source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1b00c.5 = global i32 0
@global_var_1b01c.6 = global i32* @global_var_1b00c.5
@global_var_1b17c.12 = global i32 0
@global_var_ca74.18 = constant i32 -382906384
@global_var_10f40.20 = constant i32 -481296384
@global_var_1b198.24 = global i32 0
@global_var_ff00.25 = constant i32 -390232592
@global_var_85dc.26 = constant i32 -352321555
@global_var_b9e0.32 = constant i32 -382906384
@global_var_bee0.34 = constant i32 -382906384
@global_var_b014.36 = constant i32 -382906384
@global_var_a898.38 = constant i32 -382906384
@global_var_a0dc.40 = constant i32 -382906384
@global_var_97b0.42 = constant i32 -382906384
@global_var_9078.44 = constant i32 -382906384
@global_var_88d0.46 = constant i32 -382906384
@global_var_1b230.48 = global i32 0
@global_var_c7d4.59 = constant i32 -382910448
@global_var_1b028.61 = global i32 65968
@global_var_1b238.65 = local_unnamed_addr global i32 0
@global_var_1b237.66 = local_unnamed_addr global i32 0
@global_var_1b236.67 = local_unnamed_addr global i32 0
@global_var_1b020.69 = global i32 -1
@global_var_1b19c.74 = global i32 0
@global_var_1b235.78 = local_unnamed_addr global i32 0
@global_var_123f4.82 = constant i32 10
@global_var_1b024.84 = global i32 -1
@global_var_10660.88 = constant i32 -382910448
@global_var_101b0.89 = constant i32 -382910224
@global_var_123f8.92 = constant i32 16777216
@global_var_1b1a4.94 = global i32 0
@global_var_1b1b0.96 = global i32 0
@global_var_1b1a8.98 = global i32 0
@global_var_1b1ac.100 = global i32 0
@global_var_1b24c.110 = global i32 0
@global_var_1b1e8.112 = global i32 0
@global_var_1b1b4.114 = global i32 0
@global_var_1b1e0.116 = global i32 0
@global_var_1b244.124 = global i32 0
@global_var_1b248.126 = global i32 0
@global_var_1b1bb.129 = local_unnamed_addr global i32 0
@global_var_1b1ba.130 = local_unnamed_addr global i32 0
@global_var_1b1cc.132 = global i32 0
@global_var_1b1c0.134 = local_unnamed_addr global i32 0
@global_var_1b1bd.135 = local_unnamed_addr global i32 0
@global_var_1b1cd.136 = local_unnamed_addr global i32 0
@global_var_1b1cf.137 = local_unnamed_addr global i32 0
@global_var_1b1c1.138 = local_unnamed_addr global i32 0
@global_var_1b1bc.139 = local_unnamed_addr global i32 0
@global_var_1b1ce.140 = local_unnamed_addr global i32 0
@global_var_1b1db.142 = local_unnamed_addr global i32 0
@global_var_1b1da.143 = local_unnamed_addr global i32 0
@global_var_12774.145 = constant [5 x i8] c"PMMV\00"
@global_var_128d0.147 = constant i32 0
@global_var_12918.149 = constant [6 x i8] c"CFOKL\00"
@global_var_12400.151 = constant i32 387006810
@global_var_12408.153 = constant [6 x i8] c"TKXZT\00"
@global_var_12410.155 = constant i32 437918234
@global_var_12418.157 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_12420.159 = constant [8 x i8] c"FGDCWNV\00"
@global_var_12428.161 = constant [9 x i8] c"HWCLVGAJ\00"
@global_var_12434.163 = constant i32 370216979
@global_var_1243c.165 = constant i32 269555223
@global_var_12444.167 = constant [8 x i8] c"QWRRMPV\00"
@global_var_12850.169 = constant i32 370216979
@global_var_1244c.171 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_12458.173 = constant i32 370216979
@global_var_12460.175 = constant [5 x i8] c"WQGP\00"
@global_var_12468.177 = constant [5 x i8] c"RCQQ\00"
@global_var_12470.179 = constant i32 1263486531
@global_var_125c4.181 = constant i32 320017171
@global_var_1247c.183 = constant [9 x i8] c"QOACFOKL\00"
@global_var_12488.185 = constant i32 336860180
@global_var_12490.187 = constant i32 324292169
@global_var_12498.189 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_124a8.191 = constant [7 x i8] c"OGKLQO\00"
@global_var_124b0.193 = constant [4 x i8] c"@WJ\00"
@global_var_124b4.195 = constant [7 x i8] c"RW@NKA\00"
@global_var_124bc.197 = constant [8 x i8] c"QGPTKAG\00"
@global_var_124c4.199 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_124d0.201 = constant [6 x i8] c"EWGQV\00"
@global_var_124d8.203 = constant i32 1263486531
@global_var_124e0.205 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_124f0.207 = constant [5 x i8] c"W@LV\00"
@global_var_124f8.209 = constant i32 324292169
@global_var_12500.211 = constant i32 390551160
@global_var_12508.213 = constant i32 387009354
@global_var_12510.215 = constant [6 x i8] c"HT@XF\00"
@global_var_12518.217 = constant [5 x i8] c"CLIM\00"
@global_var_12520.219 = constant [6 x i8] c"XNZZ\0C\00"
@global_var_12528.221 = constant [9 x i8] c"AJCLEGOG\00"
@global_var_12534.223 = constant i32 1867011861
@global_var_12544.225 = constant i32 1867011861
@global_var_12554.227 = constant [7 x i8] c"Q[QVGO\00"
@global_var_1255c.229 = constant [5 x i8] c"KIU@\00"
@global_var_12564.231 = constant [9 x i8] c"FPGCO@MZ\00"
@global_var_12570.233 = constant [8 x i8] c"PGCNVGI\00"
@global_var_12578.235 = constant i32 303174162
@global_var_12584.237 = constant i32 303174162
@global_var_1258c.239 = constant i32 320017171
@global_var_12594.241 = constant i32 1263486531
@global_var_1242c.243 = constant [5 x i8] c"VGAJ\00"
@global_var_125a0.245 = constant i32 454761243
@global_var_125ac.247 = constant [6 x i8] c"oGKLQ\00"
@global_var_125b4.249 = constant [4 x i8] c"hta\00"
@global_var_125b8.251 = constant i32 319820054
@global_var_125c0.253 = constant i32 320017171
@global_var_125cc.255 = constant [7 x i8] c"WVQVCP\00"
@global_var_125d4.257 = constant [9 x i8] c"XMMOCFQN\00"
@global_var_125e0.259 = constant i32 1263486531
@global_var_125e8.261 = constant i32 303059531
@global_var_125f0.263 = constant i32 303125067
@global_var_125f8.265 = constant i32 303452747
@global_var_12600.267 = constant [7 x i8] c"@KLVGA\00"
@global_var_12608.269 = constant [8 x i8] c"VQWLCOK\00"
@global_var_12610.271 = constant i32 323043395
@global_var_12618.273 = constant i32 319951888
@global_var_12620.275 = constant [7 x i8] c"Q[LLGV\00"
@global_var_12628.277 = constant [9 x i8] c"@C[CLFQN\00"
@global_var_12634.279 = constant [6 x i8] c"SWQGP\00"
@global_var_1272c.281 = constant i32 1118227
@global_var_1263c.283 = constant i32 370216979
@global_var_12644.285 = constant [8 x i8] c"oCLCEGP\00"
@global_var_1264c.287 = constant [4 x i8] c"CFO\00"
@global_var_12650.289 = constant [8 x i8] c"OCLCEGP\00"
@global_var_12658.291 = constant [7 x i8] c"DPKGLF\00"
@global_var_12660.293 = constant [4 x i8] c"CRA\00"
@global_var_12664.295 = constant i32 1263421261
@global_var_12670.297 = constant [5 x i8] c"VKLK\00"
@global_var_12678.299 = constant [7 x i8] c"CQAGLF\00"
@global_var_12680.301 = constant i32 1265504102
@global_var_12688.303 = constant [6 x i8] c"FNKLI\00"
@global_var_12690.305 = constant [6 x i8] c"NMEKL\00"
@global_var_12698.307 = constant i32 1296912387
@global_var_126a0.309 = constant [9 x i8] c"AC@NGAMO\00"
@global_var_126ac.311 = constant [7 x i8] c"PMWVGP\00"
@global_var_126b4.313 = constant [8 x i8] c"LGVMRKC\00"
@global_var_126bc.315 = constant [7 x i8] c"Q[QCFO\00"
@global_var_126c4.317 = constant [8 x i8] c"CLKAWQV\00"
@global_var_126cc.319 = constant [6 x i8] c"FG@WE\00"
@global_var_126d4.321 = constant [10 x i8] c"F\0CG\0C@\0CW\0CE\00"
@global_var_126e0.323 = constant [5 x i8] c"GAJM\00"
@global_var_126e8.325 = constant [5 x i8] c"FKCE\00"
@global_var_126f0.327 = constant [7 x i8] c"QUKVAJ\00"
@global_var_126c0.329 = constant [3 x i8] c"FO\00"
@global_var_126f8.331 = constant [7 x i8] c"VGNLGV\00"
@global_var_12700.333 = constant i32 370216979
@global_var_1270c.335 = constant [5 x i8] c"VMMP\00"
@global_var_12714.337 = constant [7 x i8] c"ACNTKL\00"
@global_var_1271c.339 = constant i32 370216979
@global_var_12728.341 = constant i32 1447906640
@global_var_12730.343 = constant i32 1447512643
@global_var_1273c.345 = constant i32 454302484
@global_var_12744.347 = constant i32 387400530
@global_var_12750.349 = constant i32 319885331
@global_var_12758.351 = constant i32 1986882928
@global_var_12760.353 = constant [7 x i8] c"CNRKLG\00"
@global_var_12768.355 = constant i32 457659992
@global_var_12770.357 = constant i32 303043392
@global_var_1277c.359 = constant [9 x i8] c"rcqqumpf\00"
@global_var_12788.361 = constant [6 x i8] c"cfokl\00"
@global_var_12790.363 = constant [8 x i8] c"LGVEGCP\00"
@global_var_12798.365 = constant i32 303257172
@global_var_127a0.367 = constant [4 x i8] c"K@O\00"
@global_var_127a4.369 = constant [7 x i8] c"T[CVVC\00"
@global_var_127ac.371 = constant [6 x i8] c"cFOKL\00"
@global_var_127b4.373 = constant i32 373380675
@global_var_127bc.375 = constant [7 x i8] c"OKAPMQ\00"
@global_var_127c4.377 = constant [6 x i8] c"QGVWR\00"
@global_var_127cc.379 = constant [8 x i8] c"AMOACQV\00"
@global_var_127d4.381 = constant [4 x i8] c"RMQ\00"
@global_var_127d8.383 = constant [4 x i8] c"UUU\00"
@global_var_127dc.385 = constant i32 303176208
@global_var_127e4.387 = constant [5 x i8] c"w`lv\00"
@global_var_127ec.389 = constant [7 x i8] c"LGVOCL\00"
@global_var_127f4.391 = constant [6 x i8] c"Cfokl\00"
@global_var_127fc.393 = constant [7 x i8] c"FCGOML\00"
@global_var_12804.395 = constant [5 x i8] c"FGOM\00"
@global_var_1280c.397 = constant [6 x i8] c"CPPKQ\00"
@global_var_12814.399 = constant [8 x i8] c"nKLIQ[Q\00"
@global_var_1281c.401 = constant [7 x i8] c"ANKGLV\00"
@global_var_12824.403 = constant [6 x i8] c"AKQAM\00"
@global_var_1282c.405 = constant [6 x i8] c"akqam\00"
@global_var_12834.407 = constant [6 x i8] c"QWRGP\00"
@global_var_1283c.409 = constant [5 x i8] c"QWPV\00"
@global_var_12844.411 = constant i32 370611221
@global_var_125d8.413 = constant [5 x i8] c"CFQN\00"
@global_var_1284c.415 = constant i32 1313949251
@global_var_12858.417 = constant [7 x i8] c"RCVPMN\00"
@global_var_12860.419 = constant i32 387007823
@global_var_12868.421 = constant [7 x i8] c"OGPNKL\00"
@global_var_12870.423 = constant [9 x i8] c"LGVCFOKL\00"
@global_var_1287c.425 = constant [9 x i8] c"JGUNRCAI\00"
@global_var_12888.427 = constant [7 x i8] c"lGVkaQ\00"
@global_var_12890.429 = constant i32 1179729984
@global_var_1289c.431 = constant [5 x i8] c"lwnn\00"
@global_var_128a4.433 = constant [9 x i8] c"CFOKLVVF\00"
@global_var_128b0.435 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_128bc.437 = constant [9 x i8] c"rNAOqRkR\00"
@global_var_128c8.439 = constant i32 269488144
@global_var_128d4.441 = constant [9 x i8] c"QGAWPKV[\00"
@global_var_128e0.443 = constant [9 x i8] c"OMWLVQ[Q\00"
@global_var_128ec.445 = constant [8 x i8] c"OGOMVGA\00"
@global_var_128f4.447 = constant i32 1464562030
@global_var_12904.449 = constant i32 2003334929
@global_var_12914.451 = constant [10 x i8] c"OWQGCFOKL\00"
@global_var_12920.453 = constant i32 1196513135
@global_var_1292c.455 = constant [10 x i8] c"QVMPUCVAJ\00"
@global_var_12938.457 = constant [11 x i8] c"QRGAKCNKQV\00"
@global_var_12944.459 = constant [10 x i8] c"CFOKLRNFV\00"
@global_var_12950.461 = constant [10 x i8] c"RNFVCFOKL\00"
@global_var_1295c.463 = constant i32 1279478337
@global_var_12968.465 = constant [13 x i8] c"VGNGAMOCFOKL\00"
@global_var_12978.467 = constant [13 x i8] c"CFOKLVGNGAMO\00"
@global_var_12988.469 = constant [7 x i8] c"EWGQV\22\00"
@global_var_12990.471 = constant i32 336675162
@global_var_12998.473 = constant [9 x i8] c"FGDCWNV\22\00"
@global_var_129a4.475 = constant [8 x i8] c"CLVQNS\22\00"
@global_var_129ac.477 = constant [12 x i8] c"QWRGPTKQMP\22\00"
@global_var_129b8.479 = constant i32 1178819416
@global_var_129c4.481 = constant [6 x i8] c"PMMV\22\00"
@global_var_1b1c4.482 = local_unnamed_addr global i32 0
@global_var_1b1c2.484 = local_unnamed_addr global i32 0
@global_var_1b1c3.485 = local_unnamed_addr global i32 0
@global_var_1b1dc.488 = local_unnamed_addr global i32 0
@global_var_1b1dd.489 = local_unnamed_addr global i32 0
@global_var_129cc.500 = constant [3 x i8] c"\0D\0A\00"
@global_var_129d8.502 = constant i32 2096127
@global_var_129cf.504 = constant i32 2095871
@global_var_1b254.508 = global i32 0
@global_var_1b030.511 = global i32 1043935
@global_var_129dc.516 = constant i32 39228
@global_var_1b25c.517 = local_unnamed_addr global i32 0
@global_var_1b260.518 = local_unnamed_addr global i32 0
@global_var_1b261.519 = local_unnamed_addr global i32 0
@global_var_129e0.521 = constant i32 55430
@global_var_1b264.522 = local_unnamed_addr global i32 0
@global_var_1b268.523 = local_unnamed_addr global i32 0
@global_var_1b269.524 = local_unnamed_addr global i32 0
@global_var_129e4.526 = constant [20 x i8] c"jT^VXYsTZZXOnQ\5CDXO=\00"
@global_var_1b26c.527 = local_unnamed_addr global i32 0
@global_var_1b270.528 = local_unnamed_addr global i32 0
@global_var_1b271.529 = local_unnamed_addr global i32 0
@global_var_129f8.531 = constant [7 x i8] c"NUXQQ=\00"
@global_var_1b274.532 = local_unnamed_addr global i32 0
@global_var_1b278.533 = local_unnamed_addr global i32 0
@global_var_1b279.534 = local_unnamed_addr global i32 0
@global_var_12a00.536 = constant [8 x i8] c"XS\5C_QX=\00"
@global_var_1b27c.537 = local_unnamed_addr global i32 0
@global_var_1b280.538 = local_unnamed_addr global i32 0
@global_var_1b281.539 = local_unnamed_addr global i32 0
@global_var_12a08.541 = constant [8 x i8] c"NDNIXP=\00"
@global_var_1b284.542 = local_unnamed_addr global i32 0
@global_var_1b288.543 = local_unnamed_addr global i32 0
@global_var_1b289.544 = local_unnamed_addr global i32 0
@global_var_12a10.546 = constant [4 x i8] c"NU=\00"
@global_var_1b290.547 = local_unnamed_addr global i32 0
@global_var_1b28c.548 = local_unnamed_addr global i32 0
@global_var_1b291.549 = local_unnamed_addr global i32 0
@global_var_12a14.551 = constant i32 1398038290
@global_var_1b298.552 = local_unnamed_addr global i32 0
@global_var_1b294.553 = local_unnamed_addr global i32 0
@global_var_1b299.554 = local_unnamed_addr global i32 0
@global_var_12a30.556 = constant i32 1449022538
@global_var_1b2a0.557 = local_unnamed_addr global i32 0
@global_var_1b29c.558 = local_unnamed_addr global i32 0
@global_var_1b2a1.559 = local_unnamed_addr global i32 0
@global_var_12a50.561 = constant [10 x i8] c"S^ROOX^I=\00"
@global_var_1b2a8.562 = local_unnamed_addr global i32 0
@global_var_1b2a4.563 = local_unnamed_addr global i32 0
@global_var_1b2a9.564 = local_unnamed_addr global i32 0
@global_var_12a5c.566 = constant [9 x i8] c"\5CNNJROY=\00"
@global_var_1b2b0.567 = local_unnamed_addr global i32 0
@global_var_1b2ac.568 = local_unnamed_addr global i32 0
@global_var_1b2b1.569 = local_unnamed_addr global i32 0
@global_var_12a68.571 = constant [6 x i8] c"RZTS=\00"
@global_var_1b2b8.572 = local_unnamed_addr global i32 0
@global_var_1b2b4.573 = local_unnamed_addr global i32 0
@global_var_1b2b9.574 = local_unnamed_addr global i32 0
@global_var_12a70.576 = constant [7 x i8] c"XSIXO=\00"
@global_var_1b2bc.577 = local_unnamed_addr global i32 0
@global_var_1b2c0.578 = local_unnamed_addr global i32 0
@global_var_1b2c1.579 = local_unnamed_addr global i32 0
@global_var_12a78.581 = constant i32 1213361769
@global_var_1b2c4.582 = local_unnamed_addr global i32 0
@global_var_1b2c8.583 = local_unnamed_addr global i32 0
@global_var_1b2c9.584 = local_unnamed_addr global i32 0
@global_var_12a90.586 = constant i32 1581864978
@global_var_1b2d0.587 = local_unnamed_addr global i32 0
@global_var_1b2cc.588 = local_unnamed_addr global i32 0
@global_var_1b2d1.589 = local_unnamed_addr global i32 0
@global_var_12aa4.591 = constant [12 x i8] c"S\5CPXNXOKXO=\00"
@global_var_1b2d4.592 = local_unnamed_addr global i32 0
@global_var_1b2d8.593 = local_unnamed_addr global i32 0
@global_var_1b2d9.594 = local_unnamed_addr global i32 0
@global_var_12ab0.596 = constant i32 1264081170
@global_var_1b2dc.597 = local_unnamed_addr global i32 0
@global_var_1b2e0.598 = local_unnamed_addr global i32 0
@global_var_1b2e1.599 = local_unnamed_addr global i32 0
@global_var_12ac8.601 = constant i32 1264081170
@global_var_1b2e4.602 = local_unnamed_addr global i32 0
@global_var_1b2e8.603 = local_unnamed_addr global i32 0
@global_var_1b2e9.604 = local_unnamed_addr global i32 0
@global_var_12adc.606 = constant i32 1208552964
@global_var_1b2ec.607 = local_unnamed_addr global i32 0
@global_var_1b2f0.608 = local_unnamed_addr global i32 0
@global_var_1b2f1.609 = local_unnamed_addr global i32 0
@global_var_12af4.611 = constant [12 x i8] c"YKOnI\5COIHM=\00"
@global_var_1b2f9.612 = local_unnamed_addr global i32 0
@global_var_1b2f4.613 = local_unnamed_addr global i32 0
@global_var_1b2f8.614 = local_unnamed_addr global i32 0
@global_var_1b224.617 = global i32 0
@global_var_1b2fc.620 = global i32 0
@global_var_1b1ec.622 = global i32 0
@global_var_1177c.624 = constant i32 -476053504
@global_var_1b130.626 = global i32 256
@global_var_1b034.627 = global i32* @global_var_1b130.626
@global_var_1b214.630 = global i32 0
@global_var_1b37c.632 = global i32 0
@global_var_11c84.633 = constant i32 -382910416
@global_var_121a0.634 = constant i32 -509595648
@global_var_10fc0.641 = constant i32 -442564520
@global_var_1b13c.647 = global i32 0
@global_var_108b0.649 = constant i32 -481230848
@global_var_1b204.651 = global i32 0
@global_var_11b80.653 = constant i32 -509587456
@global_var_1b154.656 = global i32 0
@global_var_1b208.660 = local_unnamed_addr global i32 0
@global_var_11534.662 = constant i32 -352321419
@global_var_1b000.666 = global i32 -1
@global_var_1b218.669 = global i32 0
@global_var_1b21c.671 = local_unnamed_addr global i32 0
@global_var_11768.672 = constant i32 -390234096
@global_var_12b00.674 = constant [10 x i8] c"/dev/null\00"
@global_var_1b220.676 = global i32 0
@global_var_1b20c.681 = local_unnamed_addr global i32 0
@global_var_1b210.683 = global i32 0
@global_var_109a0.685 = constant i32 -369097510
@global_var_1b16c = external local_unnamed_addr global i32
@global_var_12c0c.691 = constant i32 33554944
@global_var_11a30.697 = constant i32 -335544664
@global_var_11b4c.700 = constant i32 -275775369
@global_var_1b22c.702 = global i32 0
@global_var_1221c.703 = constant i32 -456978431
@global_var_1b174.705 = global i32* @global_var_12c0c.691
@global_var_1b394.707 = global i32 0
@global_var_1b398.709 = global i32 0
@global_var_1b004.712 = global i32 0
@global_var_1b178.3 = external global i8*
@global_var_1b194.22 = external global i8*
@global_var_1b195.30 = global i8 0
@global_var_1b234.63 = external global i8*
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1b02c.71 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1b1a0.87 = external global i8*
@global_var_1b1e4.118 = external global i8*
@global_var_1b1e5.119 = local_unnamed_addr global i8 0
@global_var_1b1b8.128 = external global i8*
@global_var_1b1d8.133 = local_unnamed_addr global i8 0
@global_var_1b1d9.141 = local_unnamed_addr global i8 0
@global_var_1b1d0.487 = local_unnamed_addr global i8 0
@global_var_1b1c8.483 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_123a4(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1b178.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1b178.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1b01c.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1b01c.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1b01c.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1b01c.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1b178.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1b01c.6, { 1, 0 }
  uselistorder i8** @global_var_1b178.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 110608 to i32*), align 16
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 110608

bb2:                                              ; preds = %.thread
  ret i32 110608

; uselistorder directives
  uselistorder i32 110608, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_1181c(i32 ptrtoint (i32* @global_var_ca74.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 74720, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_11390()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8230:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8230 = urem i32 %arg1, 256
  %v2_8234 = icmp eq i32 %v1_8230, 0
  %v3_8238 = load i32, i32* @r4, align 4
  br i1 %v2_8234, label %dec_label_pc_8280, label %dec_label_pc_8244

dec_label_pc_8244:                                ; preds = %dec_label_pc_8230
  %v0_8244 = load i32, i32* %r1.global-to-local, align 4
  %v1_8244 = add i32 %v0_8244, 4
  %v2_8244 = inttoptr i32 %v1_8244 to i8*
  %v3_8244 = load i8, i8* %v2_8244, align 1
  %v4_8244 = zext i8 %v3_8244 to i32
  %v1_8248 = urem i32 %arg3, 256
  %v9_824c = icmp eq i32 %v4_8244, %v1_8248
  br i1 %v9_824c, label %dec_label_pc_8288, label %dec_label_pc_8270.preheader

dec_label_pc_8270.preheader:                      ; preds = %dec_label_pc_8244
  br label %dec_label_pc_8270

dec_label_pc_8260:                                ; preds = %dec_label_pc_8270
  %v1_8260 = add i32 %v0_8268.in, 12
  %v2_8260 = inttoptr i32 %v1_8260 to i8*
  %v3_8260 = load i8, i8* %v2_8260, align 1
  %v4_8260 = zext i8 %v3_8260 to i32
  %v9_8264 = icmp eq i32 %v1_8248, %v4_8260
  br i1 %v9_8264, label %dec_label_pc_8288, label %dec_label_pc_8270

dec_label_pc_8270:                                ; preds = %dec_label_pc_8270.preheader, %dec_label_pc_8260
  %v0_8268.in = phi i32 [ %v0_8244, %dec_label_pc_8270.preheader ], [ %v0_8268, %dec_label_pc_8260 ]
  %v0_8270 = phi i32 [ 0, %dec_label_pc_8270.preheader ], [ %v1_8270, %dec_label_pc_8260 ]
  %v0_8268 = add i32 %v0_8268.in, 8
  %v1_8270 = add i32 %v0_8270, 1
  %v9_8274 = icmp eq i32 %v1_8230, %v1_8270
  store i32 %v0_8268, i32* %r1.global-to-local, align 4
  br i1 %v9_8274, label %dec_label_pc_8280, label %dec_label_pc_8260

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288, %dec_label_pc_8230
  store i32 %v3_8238, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8288:                                ; preds = %dec_label_pc_8260, %dec_label_pc_8244
  %v0_8288 = phi i32 [ %v0_8244, %dec_label_pc_8244 ], [ %v0_8268, %dec_label_pc_8260 ]
  %v1_8288 = inttoptr i32 %v0_8288 to i32*
  %v2_8288 = load i32, i32* %v1_8288, align 4
  store i32 %v2_8288, i32* @r0, align 4
  %v2_828c = icmp eq i32 %v2_8288, 0
  br i1 %v2_828c, label %dec_label_pc_8280, label %dec_label_pc_8294

dec_label_pc_8294:                                ; preds = %dec_label_pc_8288
  store i32 %v3_8238, i32* @r4, align 4
  %v1_8298 = call i32 @function_109dc(i32 %v2_8288)
  ret i32 %v1_8298

; uselistorder directives
  uselistorder i32 %v1_8270, { 1, 0 }
  uselistorder i32 %v0_8268, { 1, 0, 2 }
  uselistorder i32 %v0_8268.in, { 1, 0 }
  uselistorder i32 %v1_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 1, 0, 2 }
  uselistorder i32 %v3_8238, { 1, 0 }
  uselistorder i32 %v1_8230, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8280, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8270, { 1, 0 }
}

define i32 @function_829c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_829c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_829c = urem i32 %arg1, 256
  %v2_82a0 = icmp eq i32 %v1_829c, 0
  %v3_82a4 = load i32, i32* @r4, align 4
  %v6_82a4 = load i32, i32* @lr, align 4
  br i1 %v2_82a0, label %dec_label_pc_82ec, label %dec_label_pc_82b0

dec_label_pc_82b0:                                ; preds = %dec_label_pc_829c
  %v0_82b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_82b0 = add i32 %v0_82b0, 4
  %v2_82b0 = inttoptr i32 %v1_82b0 to i8*
  %v3_82b0 = load i8, i8* %v2_82b0, align 1
  %v4_82b0 = zext i8 %v3_82b0 to i32
  %v1_82b4 = urem i32 %arg3, 256
  %v9_82b8 = icmp eq i32 %v4_82b0, %v1_82b4
  br i1 %v9_82b8, label %dec_label_pc_82f4, label %dec_label_pc_82dc.preheader

dec_label_pc_82dc.preheader:                      ; preds = %dec_label_pc_82b0
  br label %dec_label_pc_82dc

dec_label_pc_82cc:                                ; preds = %dec_label_pc_82dc
  %v1_82cc = add i32 %v0_82d4.in, 12
  %v2_82cc = inttoptr i32 %v1_82cc to i8*
  %v3_82cc = load i8, i8* %v2_82cc, align 1
  %v4_82cc = zext i8 %v3_82cc to i32
  %v9_82d0 = icmp eq i32 %v1_82b4, %v4_82cc
  br i1 %v9_82d0, label %dec_label_pc_82f4, label %dec_label_pc_82dc

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82dc.preheader, %dec_label_pc_82cc
  %v0_82d4.in = phi i32 [ %v0_82b0, %dec_label_pc_82dc.preheader ], [ %v0_82d4, %dec_label_pc_82cc ]
  %v0_82dc = phi i32 [ 0, %dec_label_pc_82dc.preheader ], [ %v1_82dc, %dec_label_pc_82cc ]
  %v0_82d4 = add i32 %v0_82d4.in, 8
  %v1_82dc = add i32 %v0_82dc, 1
  store i32 %v1_82dc, i32* @lr, align 4
  %v9_82e0 = icmp eq i32 %v1_829c, %v1_82dc
  store i32 %v0_82d4, i32* %r1.global-to-local, align 4
  br i1 %v9_82e0, label %dec_label_pc_82ec, label %dec_label_pc_82cc

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82f4, %dec_label_pc_829c
  store i32 %v3_82a4, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82cc, %dec_label_pc_82b0
  %v0_82f4 = phi i32 [ %v0_82b0, %dec_label_pc_82b0 ], [ %v0_82d4, %dec_label_pc_82cc ]
  %v1_82f4 = inttoptr i32 %v0_82f4 to i32*
  %v2_82f4 = load i32, i32* %v1_82f4, align 4
  %v2_82f8 = icmp eq i32 %v2_82f4, 0
  br i1 %v2_82f8, label %dec_label_pc_82ec, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82f4
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_82a4, i32* @r4, align 4
  store i32 %v6_82a4, i32* @lr, align 4
  %v2_8308 = inttoptr i32 %v2_82f4 to i8*
  %v3_8308 = call i32 @function_10084(i8* %v2_8308, i32 10)
  ret i32 %v3_8308

; uselistorder directives
  uselistorder i32 %v1_82dc, { 1, 2, 0 }
  uselistorder i32 %v0_82d4, { 1, 0, 2 }
  uselistorder i32 %v0_82d4.in, { 1, 0 }
  uselistorder i32 %v1_82b4, { 1, 0 }
  uselistorder i32 %v0_82b0, { 1, 0, 2 }
  uselistorder i32 %v3_82a4, { 1, 0 }
  uselistorder i32 %v1_829c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_82dc, { 1, 0 }
}

define i32 @function_830c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_830c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_830c = load i32, i32* @r4, align 4
  %v6_830c = load i32, i32* @r5, align 4
  %v9_830c = load i32, i32* @r6, align 4
  %v12_830c = load i32, i32* @r7, align 4
  %v15_830c = load i32, i32* @r8, align 4
  %v18_830c = load i32, i32* @sb, align 4
  %v21_830c = load i32, i32* @sl, align 4
  %v24_830c = load i32, i32* @fp, align 4
  %v27_830c = load i32, i32* @lr, align 4
  %v7_8310 = icmp eq i32 %arg2, 3
  store i1 %v7_8310, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_831c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_831c, i32* @r4, align 4
  %tmp47 = icmp ult i32 %arg2, 4
  br i1 %tmp47, label %dec_label_pc_8330, label %dec_label_pc_8324

dec_label_pc_8324:                                ; preds = %dec_label_pc_830c
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v1_8328 = inttoptr i32 %v0_831c to i32*
  %v2_8328 = load i32, i32* %v1_8328, align 4
  store i32 %v2_8328, i32* %sl.global-to-local, align 4
  br i1 %v7_8324, label %dec_label_pc_8330, label %dec_label_pc_8338

dec_label_pc_8330:                                ; preds = %dec_label_pc_8354, %.dec_label_pc_8330_crit_edge, %dec_label_pc_8324, %dec_label_pc_8348, %dec_label_pc_8338, %dec_label_pc_830c
  %v29_8334 = phi i32 [ %v29_8334.pre, %.dec_label_pc_8330_crit_edge ], [ %v0_831c, %dec_label_pc_8354 ], [ %v0_831c, %dec_label_pc_8324 ], [ %v0_831c, %dec_label_pc_8348 ], [ %v0_831c, %dec_label_pc_8338 ], [ %v0_831c, %dec_label_pc_830c ]
  store i32 %v3_830c, i32* %r4.global-to-local, align 4
  store i32 %v9_830c, i32* @r6, align 4
  store i32 %v12_830c, i32* @r7, align 4
  store i32 %v18_830c, i32* @sb, align 4
  store i32 %v21_830c, i32* @sl, align 4
  store i32 %v24_830c, i32* @fp, align 4
  ret i32 %v29_8334

dec_label_pc_8338:                                ; preds = %dec_label_pc_8324
  %v7_8338 = icmp eq i32 %arg2, 5
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = add i32 %v0_831c, 4
  %v2_833c = inttoptr i32 %v1_833c to i8*
  %v3_833c = load i8, i8* %v2_833c, align 1
  %v4_833c = zext i8 %v3_833c to i32
  store i32 %v4_833c, i32* %r1.global-to-local, align 4
  br i1 %v7_8338, label %dec_label_pc_8330, label %dec_label_pc_8348

dec_label_pc_8348:                                ; preds = %dec_label_pc_8338
  %v1_8348 = add i32 %v0_831c, 5
  %v2_8348 = inttoptr i32 %v1_8348 to i8*
  %v3_8348 = load i8, i8* %v2_8348, align 1
  %v4_8348 = zext i8 %v3_8348 to i32
  store i32 %v4_8348, i32* @r8, align 4
  %v2_834c = icmp eq i8 %v3_8348, 0
  store i1 %v2_834c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_834c, label %dec_label_pc_8330, label %dec_label_pc_8354

dec_label_pc_8354:                                ; preds = %dec_label_pc_8348
  %v3_8354 = mul nuw nsw i32 %v4_8348, 4
  store i32 %v3_8354, i32* %sb.global-to-local, align 4
  %v1_8358 = add i32 %arg2, -6
  store i32 %v1_8358, i32* @r6, align 4
  %v2_835c = mul nuw nsw i32 %v4_8348, 5
  store i32 %v2_835c, i32* @r7, align 4
  %v3_8360 = icmp ult i32 %v1_8358, %v2_835c
  %v9_8360 = icmp eq i32 %v1_8358, %v2_835c
  store i1 %v9_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8360, label %dec_label_pc_8330, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_8354
  store i32 %v4_8348, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8370 = call i32 @function_10ee8(i32 %v4_8348, i32 24)
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  %v0_8374 = load i32, i32* @r8, align 4
  %v2_8374 = icmp eq i32 %v0_8374, 0
  store i1 %v2_8374, i1* %cpsr_z.global-to-local, align 1
  %v0_837c = load i32, i32* @r4, align 4
  %v1_837c = add i32 %v0_837c, 6
  store i32 %v1_837c, i32* %fp.global-to-local, align 4
  %tmp36 = icmp slt i32 %v0_8374, 1
  br i1 %tmp36, label %dec_label_pc_83d4thread-pre-split, label %dec_label_pc_8384

dec_label_pc_8384:                                ; preds = %dec_label_pc_8368
  store i32 %v2_8370, i32* %r1.global-to-local, align 4
  %v1_8388 = load i32, i32* @r7, align 4
  %v2_8388 = add i32 %v1_8388, %v0_837c
  store i32 %v2_8388, i32* @ip, align 4
  store i32 %v0_837c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_8398.dec_label_pc_8398_crit_edge, %dec_label_pc_8384
  %v2_83a8 = phi i32 [ %v1_83bc, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v2_8370, %dec_label_pc_8384 ]
  %v0_83a4 = phi i32 [ %v0_83a4.pre, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v2_8388, %dec_label_pc_8384 ]
  %v0_83a0 = phi i32 [ %v0_8398.pre, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v0_837c, %dec_label_pc_8384 ]
  %v1_8398 = add i32 %v0_83a0, 10
  %v2_8398 = inttoptr i32 %v1_8398 to i8*
  %v3_8398 = load i8, i8* %v2_8398, align 1
  %v1_839c = add i32 %v0_83a0, 6
  %v2_839c = inttoptr i32 %v1_839c to i32*
  %v3_839c = load i32, i32* %v2_839c, align 4
  store i32 %v3_839c, i32* @r2, align 4
  %v1_83a0 = add i32 %v0_83a0, 5
  store i32 %v1_83a0, i32* %r0.global-to-local, align 4
  %v9_83a4 = icmp eq i32 %v0_83a4, %v1_83a0
  store i1 %v9_83a4, i1* %cpsr_z.global-to-local, align 1
  %v3_83a8 = add i32 %v2_83a8, 20
  %v4_83a8 = inttoptr i32 %v3_83a8 to i8*
  store i8 %v3_8398, i8* %v4_83a8, align 1
  %v0_83ac = load i32, i32* @r2, align 4
  %v1_83ac = load i32, i32* %r1.global-to-local, align 4
  %v2_83ac = add i32 %v1_83ac, 4
  %v3_83ac = inttoptr i32 %v2_83ac to i32*
  store i32 %v0_83ac, i32* %v3_83ac, align 4
  %v0_83b0 = load i32, i32* @r2, align 4
  %v1_83b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83b0 = add i32 %v1_83b0, 16
  %v3_83b0 = inttoptr i32 %v2_83b0 to i32*
  store i32 %v0_83b0, i32* %v3_83b0, align 4
  %v0_83b4 = load i32, i32* @r4, align 4
  %v1_83b4 = trunc i32 %v0_83b4 to i8
  %v2_83b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_83b4 = inttoptr i32 %v2_83b4 to i8*
  store i8 %v1_83b4, i8* %v3_83b4, align 1
  %v0_83b8 = load i32, i32* @lr, align 4
  %v1_83b8 = trunc i32 %v0_83b8 to i8
  %v2_83b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83b8 = add i32 %v2_83b8, 1
  %v4_83b8 = inttoptr i32 %v3_83b8 to i8*
  store i8 %v1_83b8, i8* %v4_83b8, align 1
  %v0_83bc = load i32, i32* %r1.global-to-local, align 4
  %v1_83bc = add i32 %v0_83bc, 24
  store i32 %v1_83bc, i32* %r1.global-to-local, align 4
  %v0_83c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83c0, label %dec_label_pc_83c4, label %dec_label_pc_8398.dec_label_pc_8398_crit_edge

dec_label_pc_8398.dec_label_pc_8398_crit_edge:    ; preds = %dec_label_pc_8398
  %v0_8398.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_83a4.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8398

dec_label_pc_83c4:                                ; preds = %dec_label_pc_8398
  %v0_83c4 = load i32, i32* %sb.global-to-local, align 4
  %v1_83c4 = load i32, i32* @r8, align 4
  %v1_83c8 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83c4, %v0_83c4
  %v2_83c8 = sub i32 %v1_83c8, %sum
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, 6
  store i32 %v1_83cc, i32* %fp.global-to-local, align 4
  %v1_83d0 = add i32 %v2_83c8, -6
  store i32 %v1_83d0, i32* @r6, align 4
  br label %dec_label_pc_83d4

dec_label_pc_83d4thread-pre-split:                ; preds = %dec_label_pc_8368
  %v0_83d4.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83d4

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83d4thread-pre-split, %dec_label_pc_83c4
  %v0_83e0 = phi i32 [ %v1_837c, %dec_label_pc_83d4thread-pre-split ], [ %v1_83cc, %dec_label_pc_83c4 ]
  %v1_83d8 = phi i32 [ %v0_83d4.pr, %dec_label_pc_83d4thread-pre-split ], [ %v1_83d0, %dec_label_pc_83c4 ]
  %v2_83d4 = icmp eq i32 %v1_83d8, 0
  store i1 %v2_83d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83d4, label %dec_label_pc_84f4, label %dec_label_pc_83e0

dec_label_pc_83e0:                                ; preds = %dec_label_pc_83d4
  %v1_83e0 = inttoptr i32 %v0_83e0 to i8*
  %v2_83e0 = load i8, i8* %v1_83e0, align 1
  %v3_83e0 = zext i8 %v2_83e0 to i32
  store i32 %v3_83e0, i32* %sb.global-to-local, align 4
  %v2_83e4 = icmp eq i8 %v2_83e0, 0
  store i1 %v2_83e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e4, label %dec_label_pc_84c4, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e0
  store i32 %v3_83e0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83fc = call i32 @function_10ee8(i32 %v3_83e0, i32 8)
  store i32 %v2_83fc, i32* %r0.global-to-local, align 4
  %v0_8400 = load i32, i32* %sb.global-to-local, align 4
  %v2_8400 = icmp eq i32 %v0_8400, 0
  store i1 %v2_8400, i1* %cpsr_z.global-to-local, align 1
  %tmp37 = icmp slt i32 %v0_8400, 1
  br i1 %tmp37, label %dec_label_pc_84c4, label %dec_label_pc_8410

dec_label_pc_8410:                                ; preds = %dec_label_pc_83f4
  %v0_8410 = load i32, i32* @r6, align 4
  %v1_8410 = add i32 %v0_8410, -1
  store i32 %v1_8410, i32* @r2, align 4
  %v7_8410 = icmp eq i32 %v0_8410, 1
  store i1 %v7_8410, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8410, label %dec_label_pc_84f4, label %dec_label_pc_8418

dec_label_pc_8418:                                ; preds = %dec_label_pc_8410
  %v0_8418 = load i32, i32* %fp.global-to-local, align 4
  %v1_8418 = add i32 %v0_8418, 1
  %v2_8418 = inttoptr i32 %v1_8418 to i8*
  %v3_8418 = load i8, i8* %v2_8418, align 1
  %v1_841c = add i32 %v0_8410, -2
  store i32 %v1_841c, i32* @r2, align 4
  %v7_841c = icmp eq i32 %v1_8410, 1
  store i1 %v7_841c, i1* %cpsr_z.global-to-local, align 1
  %v3_8420 = add i32 %v2_83fc, 4
  %v4_8420 = inttoptr i32 %v3_8420 to i8*
  store i8 %v3_8418, i8* %v4_8420, align 1
  %v0_8424 = load i32, i32* %fp.global-to-local, align 4
  %v1_8424 = add i32 %v0_8424, 1
  store i32 %v1_8424, i32* %r0.global-to-local, align 4
  %v0_8428 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8428, label %dec_label_pc_84f4, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8418
  %v1_842c = add i32 %v0_8424, 2
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v4_842c = zext i8 %v3_842c to i32
  store i32 %v4_842c, i32* @r4, align 4
  %v0_8430 = load i32, i32* @r2, align 4
  %v1_8430 = add i32 %v0_8430, -1
  store i32 %v1_8430, i32* @r7, align 4
  %v9_8434 = icmp eq i32 %v1_8430, %v4_842c
  store i1 %v9_8434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_842c, i32* %r0.global-to-local, align 4
  %v5_843c = icmp slt i32 %v1_8430, %v4_842c
  br i1 %v5_843c, label %dec_label_pc_84f4, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  store i32 %v2_83fc, i32* @r5, align 4
  %v1_8448 = add i32 %v2_83fc, 8
  %v1_844c = add i32 %v0_8424, 3
  store i32 %v1_844c, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_849c

dec_label_pc_845c:                                ; preds = %dec_label_pc_849c
  %v0_845c = load i32, i32* @r7, align 4
  %v1_845c = load i32, i32* @r4, align 4
  %v2_845c = sub i32 %v0_845c, %v1_845c
  store i32 %v2_845c, i32* @r2, align 4
  %v9_845c = icmp eq i32 %v0_845c, %v1_845c
  store i1 %v9_845c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_845c, label %dec_label_pc_84f4, label %dec_label_pc_8464

dec_label_pc_8464:                                ; preds = %dec_label_pc_845c
  %v1_8464 = load i32, i32* @r6, align 4
  %v2_8464 = add i32 %v1_8464, %v1_845c
  %v3_8464 = inttoptr i32 %v2_8464 to i8*
  %v4_8464 = load i8, i8* %v3_8464, align 1
  store i32 %stack_var_-44.0, i32* @r5, align 4
  %v1_846c = add i32 %v2_845c, -1
  store i32 %v1_846c, i32* @r2, align 4
  %v7_846c = icmp eq i32 %v2_845c, 1
  store i1 %v7_846c, i1* %cpsr_z.global-to-local, align 1
  %v3_8470 = add i32 %stack_var_-44.0, 4
  %v4_8470 = inttoptr i32 %v3_8470 to i8*
  store i8 %v4_8464, i8* %v4_8470, align 1
  %v0_8474 = load i32, i32* @r4, align 4
  %v1_8474 = load i32, i32* @r6, align 4
  %v2_8474 = add i32 %v1_8474, %v0_8474
  store i32 %v2_8474, i32* %r0.global-to-local, align 4
  %v0_8478 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8478, label %dec_label_pc_84f4, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8464
  %v1_847c = add i32 %v2_8474, 1
  %v2_847c = inttoptr i32 %v1_847c to i8*
  %v3_847c = load i8, i8* %v2_847c, align 1
  %v4_847c = zext i8 %v3_847c to i32
  store i32 %v4_847c, i32* @r4, align 4
  %v0_8480 = load i32, i32* @r2, align 4
  %v1_8480 = add i32 %v0_8480, -1
  store i32 %v1_8480, i32* @r7, align 4
  %v0_8484 = load i32, i32* @r5, align 4
  %v1_8484 = add i32 %v0_8484, 8
  store i32 %v1_8484, i32* %r1.global-to-local, align 4
  %v2_8488 = sub i32 %v1_8480, %v4_847c
  %tmp39 = sub i32 0, %v2_8488
  %v6_8488 = and i32 %v1_8480, %tmp39
  %v7_8488 = icmp slt i32 %v6_8488, 0
  %v8_8488 = icmp slt i32 %v2_8488, 0
  %v9_8488 = icmp eq i32 %v1_8480, %v4_847c
  store i1 %v9_8488, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_847c, i32* %r0.global-to-local, align 4
  %v2_8494 = xor i1 %v8_8488, %v7_8488
  br i1 %v2_8494, label %dec_label_pc_84f4, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_847c
  %v1_8498 = add i32 %v2_8474, 2
  store i32 %v1_8498, i32* @r6, align 4
  br label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %dec_label_pc_8440, %dec_label_pc_8498
  %v0_84a0 = phi i32 [ %v4_842c, %dec_label_pc_8440 ], [ %v4_847c, %dec_label_pc_8498 ]
  %stack_var_-44.0 = phi i32 [ %v1_8448, %dec_label_pc_8440 ], [ %v1_8484, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v2_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @function_10ee8(i32 %v2_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  %v0_84a8 = load i32, i32* %fp.global-to-local, align 4
  %v1_84a8 = add i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %fp.global-to-local, align 4
  %v1_84ac = load i32, i32* @r5, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  %v3_84b8 = call i32 @function_ffd4(i32 %v2_84a4, i32 %v0_84b0, i32 %v0_84b4)
  store i32 %v3_84b8, i32* %r0.global-to-local, align 4
  %v0_84bc = load i32, i32* %sb.global-to-local, align 4
  %v1_84bc = load i32, i32* %fp.global-to-local, align 4
  %v9_84bc = icmp eq i32 %v0_84bc, %v1_84bc
  store i1 %v9_84bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84bc, label %dec_label_pc_84c4, label %dec_label_pc_845c

dec_label_pc_84c4:                                ; preds = %dec_label_pc_849c, %dec_label_pc_83f4, %dec_label_pc_83e0
  %stack_var_-52.2 = phi i32 [ %v3_83e0, %dec_label_pc_83e0 ], [ %v2_83fc, %dec_label_pc_83f4 ], [ %v2_83fc, %dec_label_pc_849c ]
  %v0_84c4 = call i32 @function_1095c()
  store i32 %v0_84c4, i32* %r0.global-to-local, align 4
  %v2_84cc = inttoptr i32 %v0_84c4 to i32*
  store i32 0, i32* %v2_84cc, align 4
  %v0_84d0 = call i32 @function_1068c()
  store i32 %v0_84d0, i32* %r0.global-to-local, align 4
  %v7_84d4 = icmp eq i32 %v0_84d0, -1
  %v2_84e0 = icmp eq i32 %v0_84d0, 0
  store i1 %v2_84e0, i1* %cpsr_z.global-to-local, align 1
  %tmp41 = icmp slt i32 %v0_84d0, 1
  br i1 %tmp41, label %bb42, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_84c4
  store i32 1, i32* @r2, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_84f4

bb42:                                             ; preds = %dec_label_pc_84c4
  %. = zext i1 %v7_84d4 to i32
  store i32 %., i32* @r2, align 4
  %v2_84ec = icmp eq i1 %v7_84d4, false
  store i1 %v2_84ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ec, label %dec_label_pc_8548, label %dec_label_pc_84f4

dec_label_pc_84f4:                                ; preds = %dec_label_pc_847c, %dec_label_pc_8464, %dec_label_pc_845c, %.thread1, %bb42, %dec_label_pc_842c, %dec_label_pc_8418, %dec_label_pc_8410, %dec_label_pc_83d4
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83d4 ], [ %stack_var_-52.2, %bb42 ], [ %v2_83fc, %dec_label_pc_8410 ], [ %v2_83fc, %dec_label_pc_8418 ], [ %v2_83fc, %dec_label_pc_842c ], [ %stack_var_-52.2, %.thread1 ], [ %v2_83fc, %dec_label_pc_845c ], [ %v2_83fc, %dec_label_pc_8464 ], [ %v2_83fc, %dec_label_pc_847c ]
  store i32 %v2_8370, i32* %r1.global-to-local, align 4
  %v2_84f8 = icmp eq i32 %v2_8370, 0
  store i1 %v2_84f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84f8, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_84f4
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_84f4, %bb43
  %v1_8500 = xor i1 %v2_84f8, true
  call void @__pseudo_cond_branch(i1 %v1_8500, i32 ptrtoint (i32* @global_var_10f40.20 to i32))
  %v2_8508 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8508, label %.dec_label_pc_8330_crit_edge, label %dec_label_pc_8510

.dec_label_pc_8330_crit_edge:                     ; preds = %bb44
  %v29_8334.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8330

dec_label_pc_8510:                                ; preds = %bb44
  %v0_8510 = load i32, i32* %sb.global-to-local, align 4
  %v2_8510 = icmp eq i32 %v0_8510, 0
  store i1 %v2_8510, i1* %cpsr_z.global-to-local, align 1
  %tmp45 = icmp slt i32 %v0_8510, 1
  br i1 %tmp45, label %dec_label_pc_8538, label %dec_label_pc_8518

dec_label_pc_8518:                                ; preds = %dec_label_pc_8510
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8518
  %v1_8520 = phi i32 [ %v1_852c, %dec_label_pc_851c ], [ 0, %dec_label_pc_8518 ]
  store i32 %stack_var_-52.3, i32* %r1.global-to-local, align 4
  %v4_8520 = mul i32 %v1_8520, 8
  %v5_8520 = add i32 %v4_8520, %stack_var_-52.3
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_8528, i32 ptrtoint (i32* @global_var_10f40.20 to i32))
  %v0_852c = load i32, i32* %r4.global-to-local, align 4
  %v1_852c = add i32 %v0_852c, 1
  store i32 %v1_852c, i32* %r4.global-to-local, align 4
  %v0_8530 = load i32, i32* %sb.global-to-local, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_852c
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_8538:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8510
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_830c, i32* @r4, align 4
  store i32 %v6_830c, i32* @r5, align 4
  store i32 %v9_830c, i32* @r6, align 4
  store i32 %v12_830c, i32* @r7, align 4
  store i32 %v15_830c, i32* @r8, align 4
  store i32 %v18_830c, i32* %sb.global-to-local, align 4
  store i32 %v21_830c, i32* %sl.global-to-local, align 4
  store i32 %v24_830c, i32* %fp.global-to-local, align 4
  store i32 %v27_830c, i32* @lr, align 4
  %v0_8544 = call i32 @function_10f40()
  store i32 %v0_8544, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %bb42, %dec_label_pc_8538
  %stack_var_-52.4 = phi i32 [ %stack_var_-52.3, %dec_label_pc_8538 ], [ %stack_var_-52.2, %bb42 ]
  %v2_854c = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_854c = zext i8 %v2_854c to i32
  %v2_8550 = icmp eq i8 %v2_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8550, label %dec_label_pc_8598, label %dec_label_pc_8558

dec_label_pc_8558:                                ; preds = %dec_label_pc_8548
  %v2_855c = load i32, i32* @global_var_1b198.24, align 4
  store i32 %v2_855c, i32* %r0.global-to-local, align 4
  %v1_8560 = inttoptr i32 %v2_855c to i32*
  %v2_8560 = load i32, i32* %v1_8560, align 4
  store i32 %v2_8560, i32* @ip, align 4
  store i32 %v4_833c, i32* %r4.global-to-local, align 4
  %v1_8568 = add i32 %v2_8560, 4
  %v2_8568 = inttoptr i32 %v1_8568 to i8*
  %v3_8568 = load i8, i8* %v2_8568, align 1
  store i32 %v4_833c, i32* %r1.global-to-local, align 4
  %v9_8570 = icmp eq i8 %v3_8568, %v3_833c
  store i1 %v9_8570, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8570, label %dec_label_pc_85a0, label %dec_label_pc_858c.preheader

dec_label_pc_858c.preheader:                      ; preds = %dec_label_pc_8558
  %v0_858c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_858c

dec_label_pc_857c:                                ; preds = %dec_label_pc_858c
  %v4_857c = mul i32 %v1_858c, 4
  %v5_857c = add i32 %v4_857c, %v2_855c
  %v6_857c = inttoptr i32 %v5_857c to i32*
  %v7_857c = load i32, i32* %v6_857c, align 4
  store i32 %v7_857c, i32* @ip, align 4
  %v1_8580 = add i32 %v7_857c, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v9_8584 = icmp eq i8 %v3_8580, %v3_833c
  store i1 %v9_8584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8584, label %dec_label_pc_85a0, label %dec_label_pc_858c

dec_label_pc_858c:                                ; preds = %dec_label_pc_858c.preheader, %dec_label_pc_857c
  %v0_858c = phi i32 [ %v0_858c.pre, %dec_label_pc_858c.preheader ], [ %v1_858c, %dec_label_pc_857c ]
  %v1_858c = add i32 %v0_858c, 1
  %v9_8590 = icmp eq i32 %v1_858c, %v3_854c
  store i1 %v9_8590, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8590, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_8598:                                ; preds = %dec_label_pc_858c, %dec_label_pc_8548, %dec_label_pc_85a0
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_859c = call i32 @function_114d8(i32 0)
  store i32 %v1_859c, i32* %r0.global-to-local, align 4
  %v0_85d8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_85a0

dec_label_pc_85a0:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8558, %dec_label_pc_8598
  %v0_85d8 = phi i32 [ %v2_8560, %dec_label_pc_8558 ], [ %v0_85d8.pre, %dec_label_pc_8598 ], [ %v7_857c, %dec_label_pc_857c ]
  %v0_85a0 = load i32, i32* %sl.global-to-local, align 4
  %v1_85a4 = and i32 %v0_85a0, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v3_85ac = mul i32 %v0_85a0, 16777216
  store i32 %stack_var_-52.4, i32* %r4.global-to-local, align 4
  %v1_85a0 = udiv i32 %v0_85a0, 256
  %v3_85b4 = and i32 %v1_85a0, 65280
  %v4_85b8 = mul i32 %v1_85a4, 256
  %v4_85bc = udiv i32 %v0_85a0, 16777216
  %v5_85bc = or i32 %v4_85bc, %v3_85ac
  %v5_85b8 = or i32 %v5_85bc, %v4_85b8
  %v2_85c4 = or i32 %v5_85b8, %v3_85b4
  store i32 %v2_85c4, i32* %r0.global-to-local, align 4
  %v0_85cc = load i32, i32* @r8, align 4
  store i32 %v0_85cc, i32* %r1.global-to-local, align 4
  %v1_85d8 = inttoptr i32 %v0_85d8 to i32*
  %v2_85d8 = load i32, i32* %v1_85d8, align 4
  call void @__pseudo_branch(i32 %v2_85d8)
  br label %dec_label_pc_8598

; uselistorder directives
  uselistorder i32 %v0_85a0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_858c, { 2, 0, 1 }
  uselistorder i1 %v9_8584, { 1, 0 }
  uselistorder i1 %v9_8570, { 1, 0 }
  uselistorder i32 %v1_852c, { 1, 2, 0 }
  uselistorder i32 %stack_var_-52.3, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_84ec, { 1, 0 }
  uselistorder i1 %v7_84d4, { 1, 0 }
  uselistorder i32 %v0_84d0, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-52.2, { 2, 0, 1 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v2_8488, { 1, 0 }
  uselistorder i32 %v1_8480, { 2, 0, 1, 3 }
  uselistorder i32 %v4_847c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8410, { 0, 2, 1 }
  uselistorder i32 %v2_83fc, { 0, 1, 2, 10, 9, 8, 3, 5, 6, 7, 4, 11 }
  uselistorder i32 %v3_83e0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_83bc, { 1, 0 }
  uselistorder i32 %v0_83a0, { 0, 2, 1 }
  uselistorder i32 %v0_837c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8370, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_835c, { 2, 1, 0 }
  uselistorder i32 %v4_8348, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_831c, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 %v3_830c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 0, 4, 5, 1, 2, 3, 6, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 9, 4, 5, 6, 7, 25, 8, 2, 12, 13, 17, 14, 10, 11, 15, 16, 23, 18, 20, 19, 21, 22, 26, 24, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 16, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 %arg2, { 1, 2, 3, 0, 5, 4, 6 }
  uselistorder label %dec_label_pc_85a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8598, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 1, 0 }
  uselistorder label %dec_label_pc_8548, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_84f4, { 4, 3, 0, 1, 2, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8330, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_85e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e8:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e8 = load i32, i32* @r4, align 4
  store i32 %v3_85e8, i32* %stack_var_-24, align 4
  %v6_85e8 = load i32, i32* @r5, align 4
  %v9_85e8 = load i32, i32* @r6, align 4
  %v12_85e8 = load i32, i32* @r7, align 4
  %v15_85e8 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85f4 = call i32 @function_10ee8(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1b194.22 to i32), i32* @r4, align 4
  %v2_85fc = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_85fc = zext i8 %v2_85fc to i32
  store i32 ptrtoint (i32* @global_var_1b198.24 to i32), i32* @r6, align 4
  store i32 45880, i32* %r2.global-to-local, align 4
  store i32 %v2_85f4, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8610 = mul nuw nsw i32 %v3_85fc, 4
  store i32 %v3_8610, i32* %r1.global-to-local, align 4
  %v2_8614 = load i32, i32* @global_var_1b198.24, align 4
  %v2_8618 = inttoptr i32 %v2_85f4 to i32*
  store i32 45880, i32* %v2_8618, align 4
  %v3_861c = load i32, i32* @r5, align 4
  %v4_861c = add i32 %v3_861c, 4
  %v5_861c = inttoptr i32 %v4_861c to i8*
  store i8 0, i8* %v5_861c, align 1
  %v0_8620 = load i32, i32* %r1.global-to-local, align 4
  %v1_8620 = add i32 %v0_8620, 4
  store i32 %v1_8620, i32* %r1.global-to-local, align 4
  %v5_8624 = call i32 @function_11030(i32 %v2_8614, i32 %v1_8620, i32 45880, i32 0)
  %v2_8628 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8628 = zext i8 %v2_8628 to i32
  store i32 %v3_8628, i32* %r3.global-to-local, align 4
  store i32 %v5_8624, i32* %ip.global-to-local, align 4
  %v0_8630 = load i32, i32* @r5, align 4
  %v5_8630 = mul nuw nsw i32 %v3_8628, 4
  %v6_8630 = add i32 %v5_8630, %v5_8624
  %v7_8630 = inttoptr i32 %v6_8630 to i32*
  store i32 %v0_8630, i32* %v7_8630, align 4
  store i32 ptrtoint (i8* @global_var_1b195.30 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_8640 = load i32, i32* @r4, align 4
  %v4_8640 = inttoptr i32 %v3_8640 to i8*
  store i8 ptrtoint (i8* @global_var_1b195.30 to i8), i8* %v4_8640, align 1
  %v0_8644 = load i32, i32* %ip.global-to-local, align 4
  %v1_8644 = load i32, i32* @r6, align 4
  %v2_8644 = inttoptr i32 %v1_8644 to i32*
  store i32 %v0_8644, i32* %v2_8644, align 4
  %v2_8648 = call i32 @function_10ee8(i32 1, i32 8)
  %v2_864c = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_864c = zext i8 %v2_864c to i32
  store i32 ptrtoint (i32* @global_var_b9e0.32 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_8648, i32* @r5, align 4
  %v3_865c = mul nuw nsw i32 %v3_864c, 4
  store i32 %v3_865c, i32* %r1.global-to-local, align 4
  %v2_8660 = load i32, i32* @global_var_1b198.24, align 4
  %v2_8664 = inttoptr i32 %v2_8648 to i32*
  store i32 ptrtoint (i32* @global_var_b9e0.32 to i32), i32* %v2_8664, align 4
  %v0_8668 = load i32, i32* @r7, align 4
  %v1_8668 = trunc i32 %v0_8668 to i8
  %v2_8668 = load i32, i32* @r5, align 4
  %v3_8668 = add i32 %v2_8668, 4
  %v4_8668 = inttoptr i32 %v3_8668 to i8*
  store i8 %v1_8668, i8* %v4_8668, align 1
  %v0_866c = load i32, i32* %r1.global-to-local, align 4
  %v1_866c = add i32 %v0_866c, 4
  store i32 %v1_866c, i32* %r1.global-to-local, align 4
  %v5_8670 = call i32 @function_11030(i32 %v2_8660, i32 %v1_866c, i32 sext (i8 ptrtoint (i8* @global_var_1b195.30 to i8) to i32), i32 ptrtoint (i32* @global_var_b9e0.32 to i32))
  %v2_8674 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8674 = zext i8 %v2_8674 to i32
  store i32 %v3_8674, i32* %r3.global-to-local, align 4
  store i32 %v5_8670, i32* %ip.global-to-local, align 4
  %v0_867c = load i32, i32* @r5, align 4
  %v5_867c = mul nuw nsw i32 %v3_8674, 4
  %v6_867c = add i32 %v5_867c, %v5_8670
  %v7_867c = inttoptr i32 %v6_867c to i32*
  store i32 %v0_867c, i32* %v7_867c, align 4
  %v0_8680 = load i32, i32* %r3.global-to-local, align 4
  %v1_8680 = load i32, i32* @r7, align 4
  %v2_8680 = add i32 %v1_8680, %v0_8680
  store i32 %v2_8680, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_868c = load i32, i32* %ip.global-to-local, align 4
  %v1_868c = load i32, i32* @r6, align 4
  %v2_868c = inttoptr i32 %v1_868c to i32*
  store i32 %v0_868c, i32* %v2_868c, align 4
  %v0_8690 = load i32, i32* %r2.global-to-local, align 4
  %v1_8690 = trunc i32 %v0_8690 to i8
  %v2_8690 = load i32, i32* @r4, align 4
  %v3_8690 = inttoptr i32 %v2_8690 to i8*
  store i8 %v1_8690, i8* %v3_8690, align 1
  %v2_8694 = call i32 @function_10ee8(i32 %v1_8680, i32 8)
  %v2_8698 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8698 = zext i8 %v2_8698 to i32
  store i32 ptrtoint (i32* @global_var_bee0.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8694, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_86a8 = mul nuw nsw i32 %v3_8698, 4
  store i32 %v3_86a8, i32* %r1.global-to-local, align 4
  %v2_86ac = load i32, i32* @global_var_1b198.24, align 4
  %v2_86b0 = inttoptr i32 %v2_8694 to i32*
  store i32 ptrtoint (i32* @global_var_bee0.34 to i32), i32* %v2_86b0, align 4
  %v3_86b4 = load i32, i32* @r5, align 4
  %v4_86b4 = add i32 %v3_86b4, 4
  %v5_86b4 = inttoptr i32 %v4_86b4 to i8*
  store i8 2, i8* %v5_86b4, align 1
  %v0_86b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_86b8 = add i32 %v0_86b8, 4
  store i32 %v1_86b8, i32* %r1.global-to-local, align 4
  %v5_86bc = call i32 @function_11030(i32 %v2_86ac, i32 %v1_86b8, i32 ptrtoint (i32* @global_var_bee0.34 to i32), i32 2)
  %v2_86c0 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_86c0 = zext i8 %v2_86c0 to i32
  store i32 %v3_86c0, i32* %r3.global-to-local, align 4
  store i32 %v5_86bc, i32* %ip.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r7, align 4
  %v2_86c8 = add i32 %v1_86c8, %v3_86c0
  %v3_86c8 = trunc i32 %v2_86c8 to i8
  store i32 %v2_86c8, i32* %r2.global-to-local, align 4
  %v0_86cc = load i32, i32* @r5, align 4
  %v5_86cc = mul nuw nsw i32 %v3_86c0, 4
  %v6_86cc = add i32 %v5_86cc, %v5_86bc
  %v7_86cc = inttoptr i32 %v6_86cc to i32*
  store i32 %v0_86cc, i32* %v7_86cc, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r7, align 4
  %v3_86d8 = load i32, i32* @r4, align 4
  %v4_86d8 = inttoptr i32 %v3_86d8 to i8*
  store i8 %v3_86c8, i8* %v4_86d8, align 1
  %v0_86dc = load i32, i32* %ip.global-to-local, align 4
  %v1_86dc = load i32, i32* @r6, align 4
  %v2_86dc = inttoptr i32 %v1_86dc to i32*
  store i32 %v0_86dc, i32* %v2_86dc, align 4
  %v2_86e0 = call i32 @function_10ee8(i32 %v0_86d4, i32 8)
  %v2_86e4 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_86e4 = zext i8 %v2_86e4 to i32
  store i32 ptrtoint (i32* @global_var_b014.36 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r8, align 4
  store i32 %v2_86e0, i32* @r5, align 4
  %v3_86f4 = mul nuw nsw i32 %v3_86e4, 4
  store i32 %v3_86f4, i32* %r1.global-to-local, align 4
  %v2_86f8 = load i32, i32* @global_var_1b198.24, align 4
  %v2_86fc = inttoptr i32 %v2_86e0 to i32*
  store i32 ptrtoint (i32* @global_var_b014.36 to i32), i32* %v2_86fc, align 4
  %v0_8700 = load i32, i32* @r8, align 4
  %v1_8700 = trunc i32 %v0_8700 to i8
  %v2_8700 = load i32, i32* @r5, align 4
  %v3_8700 = add i32 %v2_8700, 4
  %v4_8700 = inttoptr i32 %v3_8700 to i8*
  store i8 %v1_8700, i8* %v4_8700, align 1
  %v0_8704 = load i32, i32* %r1.global-to-local, align 4
  %v1_8704 = add i32 %v0_8704, 4
  store i32 %v1_8704, i32* %r1.global-to-local, align 4
  %v5_8708 = call i32 @function_11030(i32 %v2_86f8, i32 %v1_8704, i32 %v2_86c8, i32 ptrtoint (i32* @global_var_b014.36 to i32))
  %v2_870c = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_870c = zext i8 %v2_870c to i32
  store i32 %v3_870c, i32* %r3.global-to-local, align 4
  store i32 %v5_8708, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* @r5, align 4
  %v5_8714 = mul nuw nsw i32 %v3_870c, 4
  %v6_8714 = add i32 %v5_8714, %v5_8708
  %v7_8714 = inttoptr i32 %v6_8714 to i32*
  store i32 %v0_8714, i32* %v7_8714, align 4
  %v0_8718 = load i32, i32* %r3.global-to-local, align 4
  %v1_8718 = load i32, i32* @r7, align 4
  %v2_8718 = add i32 %v1_8718, %v0_8718
  store i32 %v2_8718, i32* %r2.global-to-local, align 4
  %v0_871c = load i32, i32* @r8, align 4
  store i32 %v0_871c, i32* %r1.global-to-local, align 4
  %v0_8724 = load i32, i32* %ip.global-to-local, align 4
  %v1_8724 = load i32, i32* @r6, align 4
  %v2_8724 = inttoptr i32 %v1_8724 to i32*
  store i32 %v0_8724, i32* %v2_8724, align 4
  %v0_8728 = load i32, i32* %r2.global-to-local, align 4
  %v1_8728 = trunc i32 %v0_8728 to i8
  %v2_8728 = load i32, i32* @r4, align 4
  %v3_8728 = inttoptr i32 %v2_8728 to i8*
  store i8 %v1_8728, i8* %v3_8728, align 1
  %v2_872c = call i32 @function_10ee8(i32 %v1_8718, i32 %v0_871c)
  %v2_8730 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8730 = zext i8 %v2_8730 to i32
  store i32 ptrtoint (i32* @global_var_a898.38 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_872c, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_8740 = mul nuw nsw i32 %v3_8730, 4
  store i32 %v3_8740, i32* %r1.global-to-local, align 4
  %v2_8744 = load i32, i32* @global_var_1b198.24, align 4
  %v2_8748 = inttoptr i32 %v2_872c to i32*
  store i32 ptrtoint (i32* @global_var_a898.38 to i32), i32* %v2_8748, align 4
  %v3_874c = load i32, i32* @r5, align 4
  %v4_874c = add i32 %v3_874c, 4
  %v5_874c = inttoptr i32 %v4_874c to i8*
  store i8 3, i8* %v5_874c, align 1
  %v0_8750 = load i32, i32* %r1.global-to-local, align 4
  %v1_8750 = add i32 %v0_8750, 4
  store i32 %v1_8750, i32* %r1.global-to-local, align 4
  %v5_8754 = call i32 @function_11030(i32 %v2_8744, i32 %v1_8750, i32 ptrtoint (i32* @global_var_a898.38 to i32), i32 3)
  %v2_8758 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8758 = zext i8 %v2_8758 to i32
  store i32 %v3_8758, i32* %r3.global-to-local, align 4
  store i32 %v5_8754, i32* %ip.global-to-local, align 4
  %v0_8760 = load i32, i32* @r5, align 4
  %v5_8760 = mul nuw nsw i32 %v3_8758, 4
  %v6_8760 = add i32 %v5_8760, %v5_8754
  %v7_8760 = inttoptr i32 %v6_8760 to i32*
  store i32 %v0_8760, i32* %v7_8760, align 4
  %v0_8764 = load i32, i32* %r3.global-to-local, align 4
  %v1_8764 = load i32, i32* @r7, align 4
  %v2_8764 = add i32 %v1_8764, %v0_8764
  store i32 %v2_8764, i32* %r2.global-to-local, align 4
  %v0_8768 = load i32, i32* @r8, align 4
  store i32 %v0_8768, i32* %r1.global-to-local, align 4
  %v0_8770 = load i32, i32* %ip.global-to-local, align 4
  %v1_8770 = load i32, i32* @r6, align 4
  %v2_8770 = inttoptr i32 %v1_8770 to i32*
  store i32 %v0_8770, i32* %v2_8770, align 4
  %v0_8774 = load i32, i32* %r2.global-to-local, align 4
  %v1_8774 = trunc i32 %v0_8774 to i8
  %v2_8774 = load i32, i32* @r4, align 4
  %v3_8774 = inttoptr i32 %v2_8774 to i8*
  store i8 %v1_8774, i8* %v3_8774, align 1
  %v2_8778 = call i32 @function_10ee8(i32 %v1_8764, i32 %v0_8768)
  %v2_877c = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_877c = zext i8 %v2_877c to i32
  store i32 ptrtoint (i32* @global_var_a0dc.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8778, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_878c = mul nuw nsw i32 %v3_877c, 4
  store i32 %v3_878c, i32* %r1.global-to-local, align 4
  %v2_8790 = load i32, i32* @global_var_1b198.24, align 4
  %v2_8794 = inttoptr i32 %v2_8778 to i32*
  store i32 ptrtoint (i32* @global_var_a0dc.40 to i32), i32* %v2_8794, align 4
  %v3_8798 = load i32, i32* @r5, align 4
  %v4_8798 = add i32 %v3_8798, 4
  %v5_8798 = inttoptr i32 %v4_8798 to i8*
  store i8 4, i8* %v5_8798, align 1
  %v0_879c = load i32, i32* %r1.global-to-local, align 4
  %v1_879c = add i32 %v0_879c, 4
  store i32 %v1_879c, i32* %r1.global-to-local, align 4
  %v5_87a0 = call i32 @function_11030(i32 %v2_8790, i32 %v1_879c, i32 ptrtoint (i32* @global_var_a0dc.40 to i32), i32 4)
  %v2_87a4 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_87a4 = zext i8 %v2_87a4 to i32
  store i32 %v3_87a4, i32* %r3.global-to-local, align 4
  store i32 %v5_87a0, i32* %ip.global-to-local, align 4
  %v0_87ac = load i32, i32* @r5, align 4
  %v5_87ac = mul nuw nsw i32 %v3_87a4, 4
  %v6_87ac = add i32 %v5_87ac, %v5_87a0
  %v7_87ac = inttoptr i32 %v6_87ac to i32*
  store i32 %v0_87ac, i32* %v7_87ac, align 4
  %v0_87b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87b0 = load i32, i32* @r7, align 4
  %v2_87b0 = add i32 %v1_87b0, %v0_87b0
  store i32 %v2_87b0, i32* %r2.global-to-local, align 4
  %v0_87b4 = load i32, i32* @r8, align 4
  store i32 %v0_87b4, i32* %r1.global-to-local, align 4
  %v0_87bc = load i32, i32* %ip.global-to-local, align 4
  %v1_87bc = load i32, i32* @r6, align 4
  %v2_87bc = inttoptr i32 %v1_87bc to i32*
  store i32 %v0_87bc, i32* %v2_87bc, align 4
  %v0_87c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_87c0 = trunc i32 %v0_87c0 to i8
  %v2_87c0 = load i32, i32* @r4, align 4
  %v3_87c0 = inttoptr i32 %v2_87c0 to i8*
  store i8 %v1_87c0, i8* %v3_87c0, align 1
  %v2_87c4 = call i32 @function_10ee8(i32 %v1_87b0, i32 %v0_87b4)
  %v2_87c8 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_87c8 = zext i8 %v2_87c8 to i32
  store i32 ptrtoint (i32* @global_var_97b0.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87c4, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_87d8 = mul nuw nsw i32 %v3_87c8, 4
  store i32 %v3_87d8, i32* %r1.global-to-local, align 4
  %v2_87dc = load i32, i32* @global_var_1b198.24, align 4
  %v2_87e0 = inttoptr i32 %v2_87c4 to i32*
  store i32 ptrtoint (i32* @global_var_97b0.42 to i32), i32* %v2_87e0, align 4
  %v3_87e4 = load i32, i32* @r5, align 4
  %v4_87e4 = add i32 %v3_87e4, 4
  %v5_87e4 = inttoptr i32 %v4_87e4 to i8*
  store i8 5, i8* %v5_87e4, align 1
  %v0_87e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87e8 = add i32 %v0_87e8, 4
  store i32 %v1_87e8, i32* %r1.global-to-local, align 4
  %v5_87ec = call i32 @function_11030(i32 %v2_87dc, i32 %v1_87e8, i32 ptrtoint (i32* @global_var_97b0.42 to i32), i32 5)
  %v2_87f0 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_87f0 = zext i8 %v2_87f0 to i32
  store i32 %v3_87f0, i32* %r3.global-to-local, align 4
  store i32 %v5_87ec, i32* %ip.global-to-local, align 4
  %v0_87f8 = load i32, i32* @r5, align 4
  %v5_87f8 = mul nuw nsw i32 %v3_87f0, 4
  %v6_87f8 = add i32 %v5_87f8, %v5_87ec
  %v7_87f8 = inttoptr i32 %v6_87f8 to i32*
  store i32 %v0_87f8, i32* %v7_87f8, align 4
  %v0_87fc = load i32, i32* %r3.global-to-local, align 4
  %v1_87fc = load i32, i32* @r7, align 4
  %v2_87fc = add i32 %v1_87fc, %v0_87fc
  store i32 %v2_87fc, i32* %r2.global-to-local, align 4
  %v0_8800 = load i32, i32* @r8, align 4
  store i32 %v0_8800, i32* %r1.global-to-local, align 4
  %v0_8808 = load i32, i32* %ip.global-to-local, align 4
  %v1_8808 = load i32, i32* @r6, align 4
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  store i32 %v0_8808, i32* %v2_8808, align 4
  %v0_880c = load i32, i32* %r2.global-to-local, align 4
  %v1_880c = trunc i32 %v0_880c to i8
  %v2_880c = load i32, i32* @r4, align 4
  %v3_880c = inttoptr i32 %v2_880c to i8*
  store i8 %v1_880c, i8* %v3_880c, align 1
  %v2_8810 = call i32 @function_10ee8(i32 %v1_87fc, i32 %v0_8800)
  %v2_8814 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8814 = zext i8 %v2_8814 to i32
  store i32 ptrtoint (i32* @global_var_9078.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8810, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_8824 = mul nuw nsw i32 %v3_8814, 4
  store i32 %v3_8824, i32* %r1.global-to-local, align 4
  %v2_8828 = load i32, i32* @global_var_1b198.24, align 4
  %v2_882c = inttoptr i32 %v2_8810 to i32*
  store i32 ptrtoint (i32* @global_var_9078.44 to i32), i32* %v2_882c, align 4
  %v3_8830 = load i32, i32* @r5, align 4
  %v4_8830 = add i32 %v3_8830, 4
  %v5_8830 = inttoptr i32 %v4_8830 to i8*
  store i8 6, i8* %v5_8830, align 1
  %v0_8834 = load i32, i32* %r1.global-to-local, align 4
  %v1_8834 = add i32 %v0_8834, 4
  store i32 %v1_8834, i32* %r1.global-to-local, align 4
  %v5_8838 = call i32 @function_11030(i32 %v2_8828, i32 %v1_8834, i32 ptrtoint (i32* @global_var_9078.44 to i32), i32 6)
  %v2_883c = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_883c = zext i8 %v2_883c to i32
  store i32 %v3_883c, i32* %r3.global-to-local, align 4
  store i32 %v5_8838, i32* %ip.global-to-local, align 4
  %v0_8844 = load i32, i32* @r5, align 4
  %v5_8844 = mul nuw nsw i32 %v3_883c, 4
  %v6_8844 = add i32 %v5_8844, %v5_8838
  %v7_8844 = inttoptr i32 %v6_8844 to i32*
  store i32 %v0_8844, i32* %v7_8844, align 4
  %v0_8848 = load i32, i32* %r3.global-to-local, align 4
  %v1_8848 = load i32, i32* @r7, align 4
  %v2_8848 = add i32 %v1_8848, %v0_8848
  store i32 %v2_8848, i32* %r2.global-to-local, align 4
  %v0_884c = load i32, i32* @r8, align 4
  store i32 %v0_884c, i32* %r1.global-to-local, align 4
  %v1_8854 = trunc i32 %v2_8848 to i8
  %v2_8854 = load i32, i32* @r4, align 4
  %v3_8854 = inttoptr i32 %v2_8854 to i8*
  store i8 %v1_8854, i8* %v3_8854, align 1
  %v0_8858 = load i32, i32* %ip.global-to-local, align 4
  %v1_8858 = load i32, i32* @r6, align 4
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  store i32 %v0_8858, i32* %v2_8858, align 4
  %v2_885c = call i32 @function_10ee8(i32 %v1_8848, i32 %v0_884c)
  %v2_8860 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8860 = zext i8 %v2_8860 to i32
  store i32 ptrtoint (i32* @global_var_88d0.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_885c, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8870 = mul nuw nsw i32 %v3_8860, 4
  store i32 %v3_8870, i32* %r1.global-to-local, align 4
  %v2_8874 = load i32, i32* @global_var_1b198.24, align 4
  %v2_8878 = inttoptr i32 %v2_885c to i32*
  store i32 ptrtoint (i32* @global_var_88d0.46 to i32), i32* %v2_8878, align 4
  %v3_887c = load i32, i32* @r5, align 4
  %v4_887c = add i32 %v3_887c, 4
  %v5_887c = inttoptr i32 %v4_887c to i8*
  store i8 7, i8* %v5_887c, align 1
  %v0_8880 = load i32, i32* %r1.global-to-local, align 4
  %v1_8880 = add i32 %v0_8880, 4
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v5_8884 = call i32 @function_11030(i32 %v2_8874, i32 %v1_8880, i32 ptrtoint (i32* @global_var_88d0.46 to i32), i32 7)
  %v2_8888 = load i8, i8* bitcast (i8** @global_var_1b194.22 to i8*), align 4
  %v3_8888 = zext i8 %v2_8888 to i32
  store i32 %v3_8888, i32* %r3.global-to-local, align 4
  %v1_888c = load i32, i32* @r6, align 4
  %v2_888c = inttoptr i32 %v1_888c to i32*
  store i32 %v5_8884, i32* %v2_888c, align 4
  %v0_8890 = load i32, i32* @r5, align 4
  %v2_8890 = load i32, i32* %r3.global-to-local, align 4
  %v5_8890 = mul i32 %v2_8890, 4
  %v6_8890 = add i32 %v5_8890, %v5_8884
  %v7_8890 = inttoptr i32 %v6_8890 to i32*
  store i32 %v0_8890, i32* %v7_8890, align 4
  %v0_8894 = load i32, i32* %r3.global-to-local, align 4
  %v1_8894 = load i32, i32* @r7, align 4
  %v2_8894 = add i32 %v1_8894, %v0_8894
  store i32 %v2_8894, i32* %r2.global-to-local, align 4
  %v1_889c = trunc i32 %v2_8894 to i8
  %v2_889c = load i32, i32* @r4, align 4
  %v3_889c = inttoptr i32 %v2_889c to i8*
  store i8 %v1_889c, i8* %v3_889c, align 1
  %v2_88a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_88a0, i32* @r4, align 4
  store i32 %v6_85e8, i32* @r5, align 4
  store i32 %v9_85e8, i32* @r6, align 4
  store i32 %v12_85e8, i32* @r7, align 4
  store i32 %v15_85e8, i32* @r8, align 4
  ret i32 %v1_8894

; uselistorder directives
  uselistorder i32 %v1_8894, { 1, 0 }
  uselistorder i32 %v1_8848, { 1, 0 }
  uselistorder i32 %v1_87fc, { 1, 0 }
  uselistorder i32 %v1_87b0, { 1, 0 }
  uselistorder i32 %v1_8764, { 1, 0 }
  uselistorder i32 %v1_8718, { 1, 0 }
  uselistorder i32 %v2_86c8, { 0, 2, 1 }
  uselistorder i32 %v3_86c0, { 1, 0, 2 }
  uselistorder i32 %v1_8680, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* @global_var_1b198.24, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i8* bitcast (i8** @global_var_1b194.22 to i8*), { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_88d0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_88d0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_88d0 = load i32, i32* @r4, align 4
  %v15_88d0 = load i32, i32* @r8, align 4
  %v21_88d0 = load i32, i32* @sl, align 4
  %v24_88d0 = load i32, i32* @fp, align 4
  %v1_88d4 = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_88d4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_88f0 = urem i32 %arg4, 256
  store i32 %v1_88f0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_8900 = call i32 @function_10ee8(i32 %v1_88d4, i32 4)
  %v0_8904 = load i32, i32* @r5, align 4
  store i32 %v0_8904, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8910 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8910, i32* %r3.global-to-local, align 4
  %v0_8914 = load i32, i32* @r4, align 4
  store i32 %v0_8914, i32* %r0.global-to-local, align 4
  %v5_8918 = inttoptr i32 %v0_8904 to i32*
  %v6_8918 = call i32 @function_829c(i32 %v0_8914, i32* %v5_8918, i32 2, i32 %v0_8910, i32 %v2_8900)
  %v1_8924 = urem i32 %v6_8918, 256
  store i32 %v1_8924, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8930 = load i32, i32* @r5, align 4
  store i32 %v0_8930, i32* %r1.global-to-local, align 4
  %v0_8934 = load i32, i32* @r4, align 4
  store i32 %v0_8934, i32* %r0.global-to-local, align 4
  %v5_8938 = trunc i32 %v6_8918 to i8
  %v6_893c = inttoptr i32 %v0_8930 to i32*
  %v7_893c = call i32 @function_829c(i32 %v0_8934, i32* %v6_893c, i32 3, i32 65535, i32 %v6_8918)
  %v0_8940 = load i32, i32* @r5, align 4
  store i32 %v0_8940, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_893c, i32* @r7, align 4
  %v0_8950 = load i32, i32* @r4, align 4
  store i32 %v0_8950, i32* %r0.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v0_8940 to i32*
  %v6_8954 = call i32 @function_829c(i32 %v0_8950, i32* %v5_8954, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_895c = urem i32 %v6_8954, 256
  store i32 %v1_895c, i32* %ip.global-to-local, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  store i32 %v0_8960, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_896c = load i32, i32* @r4, align 4
  store i32 %v0_896c, i32* %r0.global-to-local, align 4
  %v5_8970 = trunc i32 %v6_8954 to i8
  %v6_8974 = inttoptr i32 %v0_8960 to i32*
  %v7_8974 = call i32 @function_829c(i32 %v0_896c, i32* %v6_8974, i32 5, i32 1, i32 %v6_8954)
  %v1_8980 = urem i32 %v7_8974, 256
  store i32 %v1_8980, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_898c = load i32, i32* @r5, align 4
  store i32 %v0_898c, i32* %r1.global-to-local, align 4
  %v0_8990 = load i32, i32* @r4, align 4
  store i32 %v0_8990, i32* %r0.global-to-local, align 4
  %v5_8998 = inttoptr i32 %v0_898c to i32*
  %v6_8998 = call i32 @function_829c(i32 %v0_8990, i32* %v5_8998, i32 6, i32 65535, i32 %v1_8980)
  %v0_89a4 = load i32, i32* @r5, align 4
  store i32 %v0_89a4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_89b0 = load i32, i32* @r4, align 4
  store i32 %v0_89b0, i32* %r0.global-to-local, align 4
  %v5_89b4 = inttoptr i32 %v0_89a4 to i32*
  %v6_89b4 = call i32 @function_829c(i32 %v0_89b0, i32* %v5_89b4, i32 7, i32 65535, i32 %v6_8998)
  %v0_89b8 = load i32, i32* @r5, align 4
  store i32 %v0_89b8, i32* %r1.global-to-local, align 4
  %v0_89bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_89bc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_89b4, i32* @sl, align 4
  %v0_89c8 = load i32, i32* @r4, align 4
  store i32 %v0_89c8, i32* %r0.global-to-local, align 4
  %v5_89cc = inttoptr i32 %v0_89b8 to i32*
  %v6_89cc = call i32 @function_829c(i32 %v0_89c8, i32* %v5_89cc, i32 %v0_89bc, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_89dc = load i32, i32* @r5, align 4
  store i32 %v0_89dc, i32* %r1.global-to-local, align 4
  %v0_89e0 = load i32, i32* @r4, align 4
  store i32 %v0_89e0, i32* %r0.global-to-local, align 4
  %v5_89e4 = inttoptr i32 %v0_89dc to i32*
  %v6_89e4 = call i32 @function_829c(i32 %v0_89e0, i32* %v5_89e4, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_89ec = urem i32 %v6_89e4, 256
  store i32 %v1_89ec, i32* %ip.global-to-local, align 4
  %v0_89f0 = load i32, i32* @r5, align 4
  store i32 %v0_89f0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_89f8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_89f8, i32* %r3.global-to-local, align 4
  %v0_89fc = load i32, i32* @r4, align 4
  store i32 %v0_89fc, i32* %r0.global-to-local, align 4
  %v5_8a04 = inttoptr i32 %v0_89f0 to i32*
  %v6_8a04 = call i32 @function_829c(i32 %v0_89fc, i32* %v5_8a04, i32 18, i32 %v0_89f8, i32 %v1_89ec)
  %v0_8a0c = load i32, i32* @r5, align 4
  store i32 %v0_8a0c, i32* %r1.global-to-local, align 4
  %v2_8a10 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_8a10, i32* %r3.global-to-local, align 4
  store i32 %v6_8a04, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8a1c = load i32, i32* @r4, align 4
  store i32 %v0_8a1c, i32* %r0.global-to-local, align 4
  %v5_8a20 = inttoptr i32 %v0_8a0c to i32*
  %v6_8a20 = call i32 @function_829c(i32 %v0_8a1c, i32* %v5_8a20, i32 24, i32 %v2_8a10, i32 ptrtoint (i32* @0 to i32))
  %v0_8a28 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8a28, i32* %r0.global-to-local, align 4
  %v1_8a2c = inttoptr i32 %v0_8a28 to i32*
  %v2_8a2c = call i32 @function_10904(i32* %v1_8a2c)
  %v1_8a30 = load i32, i32* @r6, align 4
  %v2_8a30 = add i32 %v1_8a30, %v2_8a2c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_8a44 = call i32 @function_10bfc(i32 2, i32 3, i32 6)
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v7_8a48 = icmp eq i32 %v3_8a44, -1
  store i1 %v7_8a48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8a48, label %dec_label_pc_9060, label %dec_label_pc_8a54

dec_label_pc_8a54:                                ; preds = %dec_label_pc_88d0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_8a5c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_8a5c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_8a64 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8a64, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_8a70 = call i32 @function_10bcc(i32 %v3_8a44, i32 %v0_8a64, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_8a70, i32* %r0.global-to-local, align 4
  %v7_8a74 = icmp eq i32 %v6_8a70, -1
  store i1 %v7_8a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8a74, label %dec_label_pc_9068, label %dec_label_pc_8a7c

dec_label_pc_8a7c:                                ; preds = %dec_label_pc_8a54
  %v0_8a88 = load i32, i32* @sl, align 4
  %v3_8a88 = mul i32 %v0_8a88, 65536
  store i32 %v3_8a88, i32* %sl.global-to-local, align 4
  %v0_8a8c = load i32, i32* @r7, align 4
  %v2_8a94 = icmp eq i32 %v1_88d4, 0
  store i1 %v2_8a94, i1* %cpsr_z.global-to-local, align 1
  %v0_8a98 = load i32, i32* @r8, align 4
  %v1_8a98 = urem i32 %v0_8a98, 256
  store i32 %v1_8a98, i32* %r8.global-to-local, align 4
  %v3_8a9c = urem i32 %v0_8a8c, 65536
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  %v3_8aa0 = urem i32 %v6_8998, 65536
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v3_8aa4 = urem i32 %v0_8a88, 65536
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v0_8ab0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ab0, i32* %stack_var_-40, align 4
  br i1 %v2_8a94, label %dec_label_pc_8d44.preheader, label %dec_label_pc_8ac4

dec_label_pc_8ac4:                                ; preds = %dec_label_pc_8a7c
  %v3_8acc = mul i32 %v6_89cc, 65536
  %v1_8ad4 = urem i32 %v6_8998, 256
  %v1_8adc = add i32 %v3_8acc, 524288
  %v1_8ae0 = add i32 %v3_8acc, 4325376
  %v1_8ae4 = urem i32 %v0_8a88, 256
  %v1_8ae8 = add i32 %v3_8acc, 1835008
  %v0_8a8c.not = or i32 %v0_8a8c, -65536
  %v1_8af0 = xor i32 %v0_8a8c.not, 65535
  %v3_8af4 = udiv i32 %v1_8ae8, 256
  %tmp82 = udiv i32 %v0_8a8c, 256
  %v1_8b08 = and i32 %v3_8af4, 65280
  store i32 %v1_8b08, i32* %r0.global-to-local, align 4
  %v3_8b2c = mul nuw nsw i32 %v1_8ad4, 256
  %tmp83 = udiv i32 %v6_8998, 256
  %v4_8b34 = urem i32 %tmp83, 256
  %v5_8b34 = or i32 %v4_8b34, %v3_8b2c
  store i32 %v5_8b34, i32* @lr, align 4
  %tmp84 = mul nsw i32 %v1_8af0, 256
  %v3_8b3c = mul nuw nsw i32 %v1_8ae4, 256
  %sext23 = mul i32 %tmp82, 16777216
  %v4_8b44 = sdiv i32 %sext23, 16777216
  %v4_8b0c = sdiv i32 %v1_8ae0, 16777216
  %tmp85 = udiv i32 %v0_8a88, 256
  %v4_8b4c = urem i32 %tmp85, 256
  %v5_8b4c = or i32 %v4_8b4c, %v3_8b3c
  store i32 %v5_8b4c, i32* @r7, align 4
  %v1_8b50 = and i32 %tmp84, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_8b50, i32* %ip.global-to-local, align 4
  %v4_8b54 = sdiv i32 %v1_8ae8, 16777216
  %v3_8b58 = udiv i32 %v1_8adc, 256
  %tmp86 = udiv i32 %v1_8af0, 256
  %v4_8b5c = urem i32 %tmp86, 256
  %v5_8b5c = or i32 %v4_8b5c, %v1_8b50
  store i32 %v5_8b5c, i32* @r6, align 4
  %v3_8b60 = ashr i32 %v1_8ae0, 31
  %v3_8b64 = ashr i32 %sext23, 31
  %v1_8b68 = and i32 %v3_8b58, 65280
  store i32 %v1_8b68, i32* @r5, align 4
  %v3_8b74 = ashr i32 %v1_8ae8, 31
  store i32 %v3_8b74, i32* %r2.global-to-local, align 4
  %v3_8b7832 = udiv i32 %v1_8b50, 256
  store i32 %v3_8b7832, i32* %r3.global-to-local, align 4
  store i32 %v1_8ad4, i32* %r1.global-to-local, align 4
  %v4_8b80 = udiv i32 %v1_8adc, 16777216
  %v5_8b80 = or i32 %v4_8b80, %v1_8b68
  store i32 %v5_8b80, i32* %r8.global-to-local, align 4
  %v5_8b84 = trunc i32 %tmp86 to i8
  store i32 %v0_8ab0, i32* @r4, align 4
  %v3_8b9c33 = udiv i32 %v1_8b68, 256
  store i32 %v3_8b9c33, i32* %sl.global-to-local, align 4
  store i32 %v1_8ae4, i32* %fp.global-to-local, align 4
  %sext15 = mul i32 %v1_8b50, 65536
  %v4_8cc0 = sdiv i32 %sext15, 16777216
  %v2_8cf0 = icmp eq i32 %v1_8a98, 0
  %sext16 = mul i32 %v6_8998, 16777216
  %v4_8d04 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp83, 16777216
  %v4_8d20 = sdiv i32 %sext17, 16777216
  %v1_8c08 = trunc i32 %v4_8b44 to i8
  br label %dec_label_pc_8ba4

dec_label_pc_8ba4:                                ; preds = %bb97, %dec_label_pc_8ac4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8bb0 = call i32 @function_10ee8(i32 1510, i32 4)
  store i32 %v2_8bb0, i32* %r0.global-to-local, align 4
  store i32 %v2_8900, i32* %r2.global-to-local, align 4
  %v3_8bb8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8bb8, i32* %r3.global-to-local, align 4
  %v2_8bbc = load i32, i32* @r4, align 4
  %v5_8bbc = mul i32 %v2_8bbc, 4
  %v6_8bbc = add i32 %v5_8bbc, %v2_8900
  %v7_8bbc = inttoptr i32 %v6_8bbc to i32*
  store i32 %v2_8bb0, i32* %v7_8bbc, align 4
  %v0_8bc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_8bc0 = load i32, i32* %r3.global-to-local, align 4
  %v4_8bc0 = mul i32 %v1_8bc0, 4
  %v5_8bc0 = add i32 %v4_8bc0, %v0_8bc0
  %v6_8bc0 = inttoptr i32 %v5_8bc0 to i32*
  %v7_8bc0 = load i32, i32* %v6_8bc0, align 4
  store i32 %v7_8bc0, i32* %r4.global-to-local, align 4
  %v1_8bc4 = inttoptr i32 %v7_8bc0 to i8*
  %v2_8bc4 = load i8, i8* %v1_8bc4, align 1
  %tmp = urem i8 %v2_8bc4, 16
  %v1_8bc8 = zext i8 %tmp to i32
  %v1_8bcc = or i32 %v1_8bc8, 64
  store i32 %v1_8bcc, i32* %r2.global-to-local, align 4
  %v1_8bd0 = trunc i32 %v1_8bcc to i8
  store i8 %v1_8bd0, i8* %v1_8bc4, align 1
  %v0_8bd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bd4 = inttoptr i32 %v0_8bd4 to i8*
  %v2_8bd4 = load i8, i8* %v1_8bd4, align 1
  %v1_8bd8 = and i8 %v2_8bd4, -16
  %v1_8bdc = or i8 %v1_8bd8, 5
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  store i8 %v1_8bdc, i8* %v1_8bd4, align 1
  %v2_8bec = load i32, i32* %r4.global-to-local, align 4
  %v3_8bec = add i32 %v2_8bec, 1
  %v4_8bec = inttoptr i32 %v3_8bec to i8*
  store i8 %v5_8938, i8* %v4_8bec, align 1
  %v2_8bf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8bf4 = add i32 %v2_8bf4, 8
  %v4_8bf4 = inttoptr i32 %v3_8bf4 to i8*
  store i8 %v5_8970, i8* %v4_8bf4, align 1
  store i32 %v4_8b44, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_8c00 = load i32, i32* %r1.global-to-local, align 4
  %v9_8c00 = icmp eq i32 %v0_8c00, 0
  store i1 %v9_8c00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8b60, i32* %r2.global-to-local, align 4
  %v2_8c08 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c08 = add i32 %v2_8c08, 4
  %v4_8c08 = inttoptr i32 %v3_8c08 to i8*
  store i8 %v1_8c08, i8* %v4_8c08, align 1
  store i32 %v4_8b0c, i32* %r1.global-to-local, align 4
  %v0_8c10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c10, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_8ba4
  %v1_8c10 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_8c10, i32* %r3.global-to-local, align 4
  %v2_8c14 = trunc i32 %v1_8c10 to i8
  %v3_8c14 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c14 = add i32 %v3_8c14, 7
  %v5_8c14 = inttoptr i32 %v4_8c14 to i8*
  store i8 %v2_8c14, i8* %v5_8c14, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_8ba4, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_8c1c = load i32, i32* %r2.global-to-local, align 4
  %v1_8c1c = trunc i32 %v0_8c1c to i8
  %v2_8c1c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c1c = add i32 %v2_8c1c, 3
  %v4_8c1c = inttoptr i32 %v3_8c1c to i8*
  store i8 %v1_8c1c, i8* %v4_8c1c, align 1
  %v0_8c20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c20 = trunc i32 %v0_8c20 to i8
  %v2_8c20 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c20 = add i32 %v2_8c20, 2
  %v4_8c20 = inttoptr i32 %v3_8c20 to i8*
  store i8 %v1_8c20, i8* %v4_8c20, align 1
  %v0_8c24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c24, label %bb88, label %bb87

bb87:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %.thread, %bb87
  store i32 %v3_8b64, i32* %r1.global-to-local, align 4
  %v0_8c2c = load i32, i32* %r3.global-to-local, align 4
  %v1_8c2c = trunc i32 %v0_8c2c to i8
  %v2_8c2c = load i32, i32* %r4.global-to-local, align 4
  %v3_8c2c = add i32 %v2_8c2c, 9
  %v4_8c2c = inttoptr i32 %v3_8c2c to i8*
  store i8 %v1_8c2c, i8* %v4_8c2c, align 1
  %v0_8c30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8c30, label %bb90, label %bb89

bb89:                                             ; preds = %bb88
  %v1_8c30 = load i32, i32* %r2.global-to-local, align 4
  %v2_8c30 = trunc i32 %v1_8c30 to i8
  %v3_8c30 = load i32, i32* %r4.global-to-local, align 4
  %v4_8c30 = add i32 %v3_8c30, 6
  %v5_8c30 = inttoptr i32 %v4_8c30 to i8*
  store i8 %v2_8c30, i8* %v5_8c30, align 1
  br label %bb90

bb90:                                             ; preds = %bb88, %bb89
  %v3_8c34 = load i32, i32* %stack_var_-40, align 4
  %v5_8c3c = mul i32 %v3_8c34, 24
  store i32 %v5_8c3c, i32* %r3.global-to-local, align 4
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  %v1_8c44 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c44 = add i32 %v1_8c44, 12
  %v3_8c44 = inttoptr i32 %v2_8c44 to i32*
  store i32 %v6_8a20, i32* %v3_8c44, align 4
  %v0_8c48 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c48 = load i32, i32* @sb, align 4
  %v2_8c48 = add i32 %v1_8c48, %v0_8c48
  store i32 %v2_8c48, i32* %r3.global-to-local, align 4
  %v1_8c4c = add i32 %v2_8c48, 16
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v0_8c50 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c50 = trunc i32 %v0_8c50 to i8
  %v2_8c50 = load i32, i32* %r4.global-to-local, align 4
  %v3_8c50 = add i32 %v2_8c50, 5
  %v4_8c50 = inttoptr i32 %v3_8c50 to i8*
  store i8 %v1_8c50, i8* %v4_8c50, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_8c58 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c58 = add i32 %v0_8c58, 20
  store i32 %v1_8c58, i32* %r1.global-to-local, align 4
  %v3_8c5c = add i32 %v0_8c58, 22
  %v4_8c5c = inttoptr i32 %v3_8c5c to i8*
  store i8 101, i8* %v4_8c5c, align 1
  %v0_8c60 = load i32, i32* %r2.global-to-local, align 4
  %v1_8c60 = load i32, i32* %r4.global-to-local, align 4
  %v2_8c60 = add i32 %v1_8c60, 16
  %v3_8c60 = inttoptr i32 %v2_8c60 to i32*
  store i32 %v0_8c60, i32* %v3_8c60, align 4
  %v0_8c64 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c64 = add i32 %v0_8c64, 24
  store i32 %v1_8c64, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_8c6c = load i32, i32* %r3.global-to-local, align 4
  %v1_8c6c = add i32 %v0_8c6c, -93
  store i32 %v1_8c6c, i32* %r3.global-to-local, align 4
  %v2_8c70 = load i32, i32* %r1.global-to-local, align 4
  %v3_8c70 = add i32 %v2_8c70, 3
  %v4_8c70 = inttoptr i32 %v3_8c70 to i8*
  store i8 88, i8* %v4_8c70, align 1
  %v0_8c74 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c74 = trunc i32 %v0_8c74 to i8
  %v2_8c74 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c74 = add i32 %v2_8c74, 12
  %v4_8c74 = inttoptr i32 %v3_8c74 to i8*
  store i8 %v1_8c74, i8* %v4_8c74, align 1
  %v0_8c78 = load i32, i32* %ip.global-to-local, align 4
  %v1_8c78 = trunc i32 %v0_8c78 to i8
  %v2_8c78 = load i32, i32* %r0.global-to-local, align 4
  %v3_8c78 = add i32 %v2_8c78, 13
  %v4_8c78 = inttoptr i32 %v3_8c78 to i8*
  store i8 %v1_8c78, i8* %v4_8c78, align 1
  %v0_8c7c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c7c = add i32 %v0_8c7c, 38
  %v2_8c7c = inttoptr i32 %v1_8c7c to i8*
  %v3_8c7c = load i8, i8* %v2_8c7c, align 1
  %tmp103 = urem i8 %v3_8c7c, 16
  %v1_8c80 = zext i8 %tmp103 to i32
  %v1_8c84 = or i32 %v1_8c80, 64
  store i32 %v1_8c84, i32* %r3.global-to-local, align 4
  %v1_8c88 = trunc i32 %v1_8c84 to i8
  store i8 %v1_8c88, i8* %v2_8c7c, align 1
  %v0_8c8c = load i32, i32* %r4.global-to-local, align 4
  %v1_8c8c = add i32 %v0_8c8c, 38
  %v2_8c8c = inttoptr i32 %v1_8c8c to i8*
  %v3_8c8c = load i8, i8* %v2_8c8c, align 1
  %v1_8c90 = and i8 %v3_8c8c, -16
  %v1_8c94 = or i8 %v1_8c90, 5
  store i8 %v1_8c94, i8* %v2_8c8c, align 1
  %v0_8ca0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8ca0 = add i32 %v0_8ca0, 38
  store i32 %v1_8ca0, i32* @r5, align 4
  %v3_8ca4 = add i32 %v0_8ca0, 39
  %v4_8ca4 = inttoptr i32 %v3_8ca4 to i8*
  store i8 %v5_8938, i8* %v4_8ca4, align 1
  store i32 %v4_8b54, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_8b74, i32* %r2.global-to-local, align 4
  %v2_8cb4 = load i32, i32* @r5, align 4
  %v3_8cb4 = add i32 %v2_8cb4, 4
  %v4_8cb4 = inttoptr i32 %v3_8cb4 to i8*
  store i8 %v5_8b84, i8* %v4_8cb4, align 1
  %v0_8cb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cb8 = trunc i32 %v0_8cb8 to i8
  %v2_8cb8 = load i32, i32* @r5, align 4
  %v3_8cb8 = add i32 %v2_8cb8, 2
  %v4_8cb8 = inttoptr i32 %v3_8cb8 to i8*
  store i8 %v1_8cb8, i8* %v4_8cb8, align 1
  %v0_8cbc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cbc, label %bb92, label %bb91

bb91:                                             ; preds = %bb90
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %bb90, %bb91
  store i32 %v4_8cc0, i32* %r1.global-to-local, align 4
  %v0_8cc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cc4 = trunc i32 %v0_8cc4 to i8
  %v2_8cc4 = load i32, i32* @r5, align 4
  %v3_8cc4 = add i32 %v2_8cc4, 3
  %v4_8cc4 = inttoptr i32 %v3_8cc4 to i8*
  store i8 %v1_8cc4, i8* %v4_8cc4, align 1
  store i32 %v6_8954, i32* %r2.global-to-local, align 4
  %v0_8ccc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8ccc, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_8ccc = load i32, i32* %r3.global-to-local, align 4
  %v2_8ccc = trunc i32 %v1_8ccc to i8
  %v3_8ccc = load i32, i32* @r5, align 4
  %v4_8ccc = add i32 %v3_8ccc, 6
  %v5_8ccc = inttoptr i32 %v4_8ccc to i8*
  store i8 %v2_8ccc, i8* %v5_8ccc, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_8cd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8cd4 = trunc i32 %v0_8cd4 to i8
  %v2_8cd4 = load i32, i32* @r5, align 4
  %v3_8cd4 = add i32 %v2_8cd4, 5
  %v4_8cd4 = inttoptr i32 %v3_8cd4 to i8*
  store i8 %v1_8cd4, i8* %v4_8cd4, align 1
  %v0_8cd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cd8 = trunc i32 %v0_8cd8 to i8
  %v2_8cd8 = load i32, i32* @r5, align 4
  %v3_8cd8 = add i32 %v2_8cd8, 8
  %v4_8cd8 = inttoptr i32 %v3_8cd8 to i8*
  store i8 %v1_8cd8, i8* %v4_8cd8, align 1
  %v0_8cdc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cdc, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_8cdc = load i32, i32* %ip.global-to-local, align 4
  %v2_8cdc = trunc i32 %v1_8cdc to i8
  %v3_8cdc = load i32, i32* @r5, align 4
  %v4_8cdc = add i32 %v3_8cdc, 7
  %v5_8cdc = inttoptr i32 %v4_8cdc to i8*
  store i8 %v2_8cdc, i8* %v5_8cdc, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_8ce0 = load i32, i32* %r3.global-to-local, align 4
  %v1_8ce0 = trunc i32 %v0_8ce0 to i8
  %v2_8ce0 = load i32, i32* @r5, align 4
  %v3_8ce0 = add i32 %v2_8ce0, 9
  %v4_8ce0 = inttoptr i32 %v3_8ce0 to i8*
  store i8 %v1_8ce0, i8* %v4_8ce0, align 1
  %v0_8ce4 = call i32 @function_d228()
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  store i32 %v1_8a98, i32* %r1.global-to-local, align 4
  store i1 %v2_8cf0, i1* %cpsr_z.global-to-local, align 1
  %v1_8cf4 = sub i32 1023, %v0_8ce4
  store i32 %v1_8cf4, i32* %r3.global-to-local, align 4
  br i1 %v2_8cf0, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb96
  %v2_8cfc = load i32, i32* @r5, align 4
  %v3_8cfc = add i32 %v2_8cfc, 16
  %v4_8cfc = inttoptr i32 %v3_8cfc to i32*
  store i32 %v1_8cf4, i32* %v4_8cfc, align 4
  br label %bb97

.thread19:                                        ; preds = %bb96
  %v1_8cf8 = load i32, i32* %r4.global-to-local, align 4
  %v2_8cf8 = add i32 %v1_8cf8, 16
  %v3_8cf8 = inttoptr i32 %v2_8cf8 to i32*
  %v4_8cf8 = load i32, i32* %v3_8cf8, align 4
  store i32 %v4_8cf8, i32* %r3.global-to-local, align 4
  %v2_8d00 = load i32, i32* @r5, align 4
  %v3_8d00 = add i32 %v2_8d00, 16
  %v4_8d00 = inttoptr i32 %v3_8d00 to i32*
  store i32 %v4_8cf8, i32* %v4_8d00, align 4
  br label %bb97

bb97:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_8d04, i32* %r3.global-to-local, align 4
  %v0_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d08 = add i32 %v0_8d08, 58
  store i32 %v1_8d08, i32* @r6, align 4
  %v1_8d0c = load i32, i32* @r5, align 4
  %v2_8d0c = add i32 %v1_8d0c, 12
  %v3_8d0c = inttoptr i32 %v2_8d0c to i32*
  store i32 %v0_8ce4, i32* %v3_8d0c, align 4
  %v0_8d10 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d10 = trunc i32 %v0_8d10 to i8
  %v2_8d10 = load i32, i32* @r6, align 4
  %v3_8d10 = add i32 %v2_8d10, 1
  %v4_8d10 = inttoptr i32 %v3_8d10 to i8*
  store i8 %v1_8d10, i8* %v4_8d10, align 1
  %v3_8d14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8d14, i32* %r3.global-to-local, align 4
  store i32 %v1_88d4, i32* %r1.global-to-local, align 4
  %v1_8d1c = add i32 %v3_8d14, 1
  store i32 %v1_8d1c, i32* @r4, align 4
  store i32 %v4_8d20, i32* %r2.global-to-local, align 4
  %v9_8d24 = icmp eq i32 %v1_8d1c, %v1_88d4
  store i1 %v9_8d24, i1* %cpsr_z.global-to-local, align 1
  %v0_8d28 = load i32, i32* %sl.global-to-local, align 4
  %v1_8d28 = trunc i32 %v0_8d28 to i8
  %v2_8d28 = load i32, i32* @r6, align 4
  %v3_8d28 = add i32 %v2_8d28, 5
  %v4_8d28 = inttoptr i32 %v3_8d28 to i8*
  store i8 %v1_8d28, i8* %v4_8d28, align 1
  %v0_8d2c = load i32, i32* %r2.global-to-local, align 4
  %v1_8d2c = trunc i32 %v0_8d2c to i8
  %v2_8d2c = load i32, i32* @r6, align 4
  %v3_8d2c = inttoptr i32 %v2_8d2c to i8*
  store i8 %v1_8d2c, i8* %v3_8d2c, align 1
  %v0_8d30 = load i32, i32* @r7, align 4
  %v1_8d30 = trunc i32 %v0_8d30 to i8
  %v2_8d30 = load i32, i32* @r6, align 4
  %v3_8d30 = add i32 %v2_8d30, 2
  %v4_8d30 = inttoptr i32 %v3_8d30 to i8*
  store i8 %v1_8d30, i8* %v4_8d30, align 1
  %v0_8d34 = load i32, i32* %fp.global-to-local, align 4
  %v1_8d34 = trunc i32 %v0_8d34 to i8
  %v2_8d34 = load i32, i32* @r6, align 4
  %v3_8d34 = add i32 %v2_8d34, 3
  %v4_8d34 = inttoptr i32 %v3_8d34 to i8*
  store i8 %v1_8d34, i8* %v4_8d34, align 1
  %v0_8d38 = load i32, i32* %r8.global-to-local, align 4
  %v1_8d38 = trunc i32 %v0_8d38 to i8
  %v2_8d38 = load i32, i32* @r6, align 4
  %v3_8d38 = add i32 %v2_8d38, 4
  %v4_8d38 = inttoptr i32 %v3_8d38 to i8*
  store i8 %v1_8d38, i8* %v4_8d38, align 1
  %v0_8d3c = load i32, i32* @r4, align 4
  store i32 %v0_8d3c, i32* %stack_var_-40, align 4
  %v5_8d40 = icmp slt i32 %v1_8d1c, %v1_88d4
  br i1 %v5_8d40, label %dec_label_pc_8ba4, label %dec_label_pc_8d44.preheader

dec_label_pc_8d44.preheader:                      ; preds = %bb97, %dec_label_pc_8a7c
  %v1_8d64 = add i32 %v6_89cc, 66
  %v1_8d68 = add i32 %v6_89cc, 8
  %v2_8d7c = icmp eq i32 %v6_8a20, -1
  %v7_8d7c = icmp eq i32 %v6_8a20, -1
  %v3_8fa0 = icmp eq i32 %v3_8a9c, 65535
  %v2_9010 = icmp eq i32 %v1_8a98, 0
  %v2_8dd8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8df0 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8e00 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8e0c = ptrtoint i32* %stack_var_-50 to i32
  %v2_8e20 = icmp eq i32 %v1_89ec, 0
  br label %dec_label_pc_8d44

dec_label_pc_8d44:                                ; preds = %dec_label_pc_8d44.preheader, %dec_label_pc_904c
  store i32 %v1_88d4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_8a94, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_8a94, label %dec_label_pc_904c, label %dec_label_pc_8d58

dec_label_pc_8d58:                                ; preds = %dec_label_pc_8d44
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r1.global-to-local, align 4
  store i32 %v1_8d64, i32* @fp, align 4
  store i32 %v1_8d68, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_8efc

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8efc
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  store i1 %v7_8d7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d7c, label %dec_label_pc_8f90, label %dec_label_pc_8d84

dec_label_pc_8d84:                                ; preds = %dec_label_pc_8f28, %dec_label_pc_8d78
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8fa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8fa0, label %dec_label_pc_8fac, label %dec_label_pc_8d98

dec_label_pc_8d98:                                ; preds = %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge, %dec_label_pc_8d84
  %v1_8d9c = phi i32 [ %v1_8d9c.pre, %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge ], [ 65535, %dec_label_pc_8d84 ]
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v9_8d9c = icmp eq i32 %v3_8aa0, %v1_8d9c
  store i1 %v9_8d9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8d9c, label %dec_label_pc_8fe4, label %dec_label_pc_8da4

dec_label_pc_8da4:                                ; preds = %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge, %dec_label_pc_8d98
  %v1_8da8 = phi i32 [ %v1_8da8.pre, %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge ], [ %v1_8d9c, %dec_label_pc_8d98 ]
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v9_8da8 = icmp eq i32 %v3_8aa4, %v1_8da8
  store i1 %v9_8da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8da8, label %dec_label_pc_9000, label %dec_label_pc_8db0

dec_label_pc_8db0:                                ; preds = %dec_label_pc_8fe4, %dec_label_pc_8da4
  store i32 %v1_8a98, i32* %r3.global-to-local, align 4
  store i1 %v2_9010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9010, label %dec_label_pc_9024, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_8db0
  %v1_8db8 = load i32, i32* @r5, align 4
  %v2_8db8 = add i32 %v1_8db8, 16
  %v3_8db8 = inttoptr i32 %v2_8db8 to i32*
  %v4_8db8 = load i32, i32* %v3_8db8, align 4
  store i32 %v4_8db8, i32* %r3.global-to-local, align 4
  %v2_8dbc = load i32, i32* @r6, align 4
  %v3_8dbc = add i32 %v2_8dbc, 16
  %v4_8dbc = inttoptr i32 %v3_8dbc to i32*
  store i32 %v4_8db8, i32* %v4_8dbc, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_8dc4:                                ; preds = %bb102, %.thread20, %dec_label_pc_9024
  %v0_8dc4 = call i32 @function_d228()
  store i32 %v0_8dc4, i32* %r0.global-to-local, align 4
  store i32 %v0_8dc4, i32* %stack_var_-44, align 4
  %v0_8dcc = call i32 @function_d228()
  store i32 %v0_8dcc, i32* %r0.global-to-local, align 4
  store i32 %v0_8dcc, i32* %stack_var_-48, align 4
  %v0_8dd4 = call i32 @function_d228()
  store i32 %v2_8dd8, i32* %r1.global-to-local, align 4
  store i32 %v0_8dd4, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  store i32 %v0_8de4, i32* %r0.global-to-local, align 4
  %v3_8de8 = call i32 @function_ffd4(i32 %v0_8de4, i32 %v2_8dd8, i32 4)
  %v0_8dec = load i32, i32* @r8, align 4
  %v1_8dec = add i32 %v0_8dec, 6
  store i32 %v1_8dec, i32* %r0.global-to-local, align 4
  store i32 %v2_8df0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8df8 = call i32 @function_ffd4(i32 %v1_8dec, i32 %v2_8df0, i32 4)
  %v0_8dfc = load i32, i32* @r8, align 4
  %v1_8dfc = add i32 %v0_8dfc, 4
  store i32 %v1_8dfc, i32* %r0.global-to-local, align 4
  store i32 %v2_8e00, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e08 = call i32 @function_ffd4(i32 %v1_8dfc, i32 %v2_8e00, i32 2)
  store i32 %v2_8e0c, i32* %r1.global-to-local, align 4
  %v0_8e10 = load i32, i32* @r8, align 4
  %v1_8e10 = add i32 %v0_8e10, 10
  store i32 %v1_8e10, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8e18 = call i32 @function_ffd4(i32 %v1_8e10, i32 %v2_8e0c, i32 2)
  store i32 %v3_8e18, i32* %r0.global-to-local, align 4
  store i32 %v1_89ec, i32* %r1.global-to-local, align 4
  store i1 %v2_8e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e20, label %dec_label_pc_8e28, label %dec_label_pc_9030

dec_label_pc_8e28:                                ; preds = %dec_label_pc_8dc4, %dec_label_pc_9030
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e2c = load i32, i32* @sl, align 4
  %v1_8e2c = trunc i32 %v0_8e2c to i8
  %v2_8e2c = load i32, i32* @r5, align 4
  %v3_8e2c = add i32 %v2_8e2c, 10
  %v4_8e2c = inttoptr i32 %v3_8e2c to i8*
  store i8 %v1_8e2c, i8* %v4_8e2c, align 1
  %v0_8e30 = load i32, i32* @sl, align 4
  %v1_8e30 = trunc i32 %v0_8e30 to i8
  %v2_8e30 = load i32, i32* @r5, align 4
  %v3_8e30 = add i32 %v2_8e30, 11
  %v4_8e30 = inttoptr i32 %v3_8e30 to i8*
  store i8 %v1_8e30, i8* %v4_8e30, align 1
  %v0_8e34 = load i32, i32* @r5, align 4
  store i32 %v0_8e34, i32* @r0, align 4
  %v2_8e38 = call i32 @function_c6b0(i32 %v0_8e34, i32 20)
  %v3_8e38 = trunc i32 %v2_8e38 to i8
  %v4_8e3c = sdiv i32 %v2_8e38, 256
  store i32 %v4_8e3c, i32* %r3.global-to-local, align 4
  %v1_8e40 = trunc i32 %v4_8e3c to i8
  %v2_8e40 = load i32, i32* @r5, align 4
  %v3_8e40 = add i32 %v2_8e40, 11
  %v4_8e40 = inttoptr i32 %v3_8e40 to i8*
  store i8 %v1_8e40, i8* %v4_8e40, align 1
  %v3_8e44 = load i32, i32* @r5, align 4
  %v4_8e44 = add i32 %v3_8e44, 10
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 %v3_8e38, i8* %v5_8e44, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8e4c = load i32, i32* @sl, align 4
  %v1_8e4c = trunc i32 %v0_8e4c to i8
  %v2_8e4c = load i32, i32* @r6, align 4
  %v3_8e4c = add i32 %v2_8e4c, 10
  %v4_8e4c = inttoptr i32 %v3_8e4c to i8*
  store i8 %v1_8e4c, i8* %v4_8e4c, align 1
  %v0_8e50 = load i32, i32* @sl, align 4
  %v1_8e50 = trunc i32 %v0_8e50 to i8
  %v2_8e50 = load i32, i32* @r6, align 4
  %v3_8e50 = add i32 %v2_8e50, 11
  %v4_8e50 = inttoptr i32 %v3_8e50 to i8*
  store i8 %v1_8e50, i8* %v4_8e50, align 1
  %v0_8e54 = load i32, i32* @r6, align 4
  store i32 %v0_8e54, i32* @r0, align 4
  %v2_8e58 = call i32 @function_c6b0(i32 %v0_8e54, i32 20)
  %v3_8e58 = trunc i32 %v2_8e58 to i8
  store i32 %v2_8e58, i32* %r0.global-to-local, align 4
  %v4_8e5c = sdiv i32 %v2_8e58, 256
  store i32 %v4_8e5c, i32* %r3.global-to-local, align 4
  %v3_8e60 = load i32, i32* @r6, align 4
  %v4_8e60 = add i32 %v3_8e60, 10
  %v5_8e60 = inttoptr i32 %v4_8e60 to i8*
  store i8 %v3_8e58, i8* %v5_8e60, align 1
  %v0_8e64 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e64 = trunc i32 %v0_8e64 to i8
  %v2_8e64 = load i32, i32* @r6, align 4
  %v3_8e64 = add i32 %v2_8e64, 11
  %v4_8e64 = inttoptr i32 %v3_8e64 to i8*
  store i8 %v1_8e64, i8* %v4_8e64, align 1
  %v0_8e68 = load i32, i32* @r7, align 4
  %v1_8e68 = add i32 %v0_8e68, 4
  %v2_8e68 = inttoptr i32 %v1_8e68 to i8*
  %v3_8e68 = load i8, i8* %v2_8e68, align 1
  %v4_8e68 = zext i8 %v3_8e68 to i32
  store i32 %v4_8e68, i32* %r3.global-to-local, align 4
  %v1_8e6c = add i32 %v0_8e68, 5
  %v2_8e6c = inttoptr i32 %v1_8e6c to i8*
  %v3_8e6c = load i8, i8* %v2_8e6c, align 1
  %v4_8e6c = zext i8 %v3_8e6c to i32
  store i32 %v0_8e68, i32* @r1, align 4
  %v4_8e74 = mul nuw nsw i32 %v4_8e6c, 256
  %v5_8e74 = or i32 %v4_8e74, %v4_8e68
  store i32 %v5_8e74, i32* %r2.global-to-local, align 4
  %v0_8e78 = load i32, i32* @sl, align 4
  %v1_8e78 = trunc i32 %v0_8e78 to i8
  %v3_8e78 = add i32 %v0_8e68, 6
  %v4_8e78 = inttoptr i32 %v3_8e78 to i8*
  store i8 %v1_8e78, i8* %v4_8e78, align 1
  store i32 %v1_8d68, i32* %r3.global-to-local, align 4
  %v0_8e80 = load i32, i32* @sl, align 4
  %v1_8e80 = trunc i32 %v0_8e80 to i8
  %v2_8e80 = load i32, i32* @r7, align 4
  %v3_8e80 = add i32 %v2_8e80, 7
  %v4_8e80 = inttoptr i32 %v3_8e80 to i8*
  store i8 %v1_8e80, i8* %v4_8e80, align 1
  %v0_8e84 = load i32, i32* @r6, align 4
  store i32 %v0_8e84, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_c70c(i32 %v0_8e84, i32 %v0_8e68, i32 %v5_8e74, i32 %v1_8d68)
  %v5_8e88 = trunc i32 %v4_8e88 to i8
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v3_8e8c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8e8c, i32* %r3.global-to-local, align 4
  %v3_8e90 = mul i32 %v3_8e8c, 32
  store i32 %v3_8e90, i32* %r2.global-to-local, align 4
  %v0_8e94 = load i32, i32* @r5, align 4
  %v1_8e94 = add i32 %v0_8e94, 16
  %v2_8e94 = inttoptr i32 %v1_8e94 to i32*
  %v3_8e94 = load i32, i32* %v2_8e94, align 4
  store i32 %v3_8e94, i32* %r1.global-to-local, align 4
  %v5_8e98 = mul i32 %v3_8e8c, 24
  store i32 %v5_8e98, i32* %r2.global-to-local, align 4
  %v4_8e9c35 = udiv i32 %v4_8e88, 256
  %v1_8ea0 = trunc i32 %v4_8e9c35 to i8
  %v2_8ea0 = load i32, i32* @r7, align 4
  %v3_8ea0 = add i32 %v2_8ea0, 7
  %v4_8ea0 = inttoptr i32 %v3_8ea0 to i8*
  store i8 %v1_8ea0, i8* %v4_8ea0, align 1
  %v0_8ea4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8ea4 = load i32, i32* @sb, align 4
  %v2_8ea4 = add i32 %v1_8ea4, %v0_8ea4
  store i32 %v2_8ea4, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8eac = load i32, i32* @r7, align 4
  %v4_8eac = add i32 %v3_8eac, 6
  %v5_8eac = inttoptr i32 %v4_8eac to i8*
  store i8 %v5_8e88, i8* %v5_8eac, align 1
  %v0_8eb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8eb0 = load i32, i32* %lr.global-to-local, align 4
  %v2_8eb0 = add i32 %v1_8eb0, 4
  %v3_8eb0 = inttoptr i32 %v2_8eb0 to i32*
  store i32 %v0_8eb0, i32* %v3_8eb0, align 4
  %v0_8eb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8eb4 = trunc i32 %v0_8eb4 to i8
  %v2_8eb4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8eb4 = load i32, i32* @sb, align 4
  %v4_8eb4 = add i32 %v3_8eb4, %v2_8eb4
  %v5_8eb4 = inttoptr i32 %v4_8eb4 to i8*
  store i8 %v1_8eb4, i8* %v5_8eb4, align 1
  %v0_8eb8 = load i32, i32* @sl, align 4
  %v1_8eb8 = trunc i32 %v0_8eb8 to i8
  %v2_8eb8 = load i32, i32* %lr.global-to-local, align 4
  %v3_8eb8 = add i32 %v2_8eb8, 2
  %v4_8eb8 = inttoptr i32 %v3_8eb8 to i8*
  store i8 %v1_8eb8, i8* %v4_8eb8, align 1
  %v0_8ebc = load i32, i32* @sl, align 4
  %v1_8ebc = trunc i32 %v0_8ebc to i8
  %v2_8ebc = load i32, i32* %lr.global-to-local, align 4
  %v3_8ebc = add i32 %v2_8ebc, 1
  %v4_8ebc = inttoptr i32 %v3_8ebc to i8*
  store i8 %v1_8ebc, i8* %v4_8ebc, align 1
  %v0_8ec0 = load i32, i32* @sl, align 4
  %v1_8ec0 = trunc i32 %v0_8ec0 to i8
  %v2_8ec0 = load i32, i32* %lr.global-to-local, align 4
  %v3_8ec0 = add i32 %v2_8ec0, 3
  %v4_8ec0 = inttoptr i32 %v3_8ec0 to i8*
  store i8 %v1_8ec0, i8* %v4_8ec0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8ecc = load i32, i32* @r5, align 4
  store i32 %v0_8ecc, i32* %r1.global-to-local, align 4
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v0_8ed4 = load i32, i32* @fp, align 4
  store i32 %v0_8ed4, i32* %r2.global-to-local, align 4
  %v0_8ed8 = load i32, i32* %lr.global-to-local, align 4
  %v6_8ee0 = inttoptr i32 %v0_8ecc to i32*
  %v7_8ee0 = call i32 @function_10b98(i32 %v3_8a44, i32* %v6_8ee0, i32 %v0_8ed4, i32 16384, i32 %v0_8ed8, i32 16)
  %v3_8ee4 = load i32, i32* %stack_var_-40, align 4
  %v1_8ee8 = add i32 %v3_8ee4, 1
  store i32 %v1_8ee8, i32* %r0.global-to-local, align 4
  store i32 %v1_88d4, i32* %r3.global-to-local, align 4
  %v9_8ef0 = icmp eq i32 %v1_8ee8, %v1_88d4
  store i1 %v9_8ef0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ee8, i32* %stack_var_-40, align 4
  %v6_8ef8 = icmp slt i32 %v1_8ee8, %v1_88d4
  br i1 %v6_8ef8, label %dec_label_pc_8efc, label %dec_label_pc_904c

dec_label_pc_8efc:                                ; preds = %dec_label_pc_8e28, %dec_label_pc_8d58
  %v1_8f10 = phi i32 [ %v1_8ee8, %dec_label_pc_8e28 ], [ 0, %dec_label_pc_8d58 ]
  %v5_8f00 = mul i32 %v1_8f10, 24
  %v1_8f04 = load i32, i32* @sb, align 4
  %v2_8f04 = add i32 %v1_8f04, %v5_8f00
  store i32 %v2_8f04, i32* %r3.global-to-local, align 4
  store i32 %v2_8900, i32* %r1.global-to-local, align 4
  %v1_8f0c = add i32 %v2_8f04, 20
  %v2_8f0c = inttoptr i32 %v1_8f0c to i8*
  %v3_8f0c = load i8, i8* %v2_8f0c, align 1
  %v4_8f0c = zext i8 %v3_8f0c to i32
  store i32 %v4_8f0c, i32* %r2.global-to-local, align 4
  %v4_8f10 = mul i32 %v1_8f10, 4
  %v5_8f10 = add i32 %v4_8f10, %v2_8900
  %v6_8f10 = inttoptr i32 %v5_8f10 to i32*
  %v7_8f10 = load i32, i32* %v6_8f10, align 4
  store i32 %v7_8f10, i32* @r5, align 4
  %v2_8f14 = icmp ugt i8 %v3_8f0c, 30
  %v7_8f14 = icmp eq i8 %v3_8f0c, 31
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  %v1_8f18 = add i32 %v7_8f10, 24
  store i32 %v1_8f18, i32* @r8, align 4
  %v1_8f1c = add i32 %v7_8f10, 38
  store i32 %v1_8f1c, i32* @r6, align 4
  %v1_8f20 = add i32 %v7_8f10, 58
  store i32 %v1_8f20, i32* @r7, align 4
  %v2_8f24 = xor i1 %v7_8f14, true
  %v3_8f24 = and i1 %v2_8f14, %v2_8f24
  br i1 %v3_8f24, label %dec_label_pc_8d78, label %dec_label_pc_8f28

dec_label_pc_8f28:                                ; preds = %dec_label_pc_8efc
  %v1_8f28 = add i32 %v2_8f04, 16
  %v2_8f28 = inttoptr i32 %v1_8f28 to i32*
  %v3_8f28 = load i32, i32* %v2_8f28, align 4
  store i32 %v3_8f28, i32* %r4.global-to-local, align 4
  %v0_8f2c = call i32 @function_d228()
  store i32 %v0_8f2c, i32* %r0.global-to-local, align 4
  %v3_8f30 = load i32, i32* %stack_var_-40, align 4
  %v5_8f38 = mul i32 %v3_8f30, 24
  %v0_8f3c = load i32, i32* %r4.global-to-local, align 4
  %v1_8f40 = load i32, i32* @sb, align 4
  %v2_8f40 = add i32 %v1_8f40, %v5_8f38
  store i32 %v2_8f40, i32* %r1.global-to-local, align 4
  %v1_8f44 = and i32 %v0_8f3c, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_8f44, i32* %r3.global-to-local, align 4
  %v1_8f3c = udiv i32 %v0_8f3c, 256
  %v3_8f48 = and i32 %v1_8f3c, 65280
  store i32 %v3_8f48, i32* %r2.global-to-local, align 4
  %v3_8f4c = mul i32 %v0_8f3c, 16777216
  store i32 %v3_8f4c, i32* %ip.global-to-local, align 4
  %v1_8f50 = add i32 %v2_8f40, 20
  %v2_8f50 = inttoptr i32 %v1_8f50 to i8*
  %v3_8f50 = load i8, i8* %v2_8f50, align 1
  %v4_8f50 = zext i8 %v3_8f50 to i32
  store i32 %v4_8f50, i32* %lr.global-to-local, align 4
  %v4_8f54 = mul i32 %v1_8f44, 256
  %v5_8f54 = or i32 %v4_8f54, %v3_8f4c
  store i32 %v5_8f54, i32* %ip.global-to-local, align 4
  %v4_8f58 = udiv i32 %v0_8f3c, 16777216
  %v5_8f58 = or i32 %v3_8f48, %v4_8f58
  %v2_8f5c = or i32 %v5_8f58, %v5_8f54
  %v7_8f60 = lshr i32 %v0_8f2c, %v4_8f50
  %v8_8f60 = add i32 %v7_8f60, %v2_8f5c
  %v3_8f6c = mul i32 %v8_8f60, 16777216
  %v1_8f70 = and i32 %v8_8f60, 65280
  store i32 %v1_8f70, i32* %r0.global-to-local, align 4
  store i32 %v6_8a20, i32* %r2.global-to-local, align 4
  %v4_8f7c = mul nuw nsw i32 %v1_8f70, 256
  %v5_8f7c = or i32 %v4_8f7c, %v3_8f6c
  store i32 %v5_8f7c, i32* %r1.global-to-local, align 4
  %v2_8f80 = call i32 @llvm.bswap.i32(i32 %v8_8f60)
  store i32 %v2_8f80, i32* %r3.global-to-local, align 4
  store i1 %v7_8d7c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f88 = load i32, i32* @r5, align 4
  %v2_8f88 = add i32 %v1_8f88, 16
  %v3_8f88 = inttoptr i32 %v2_8f88 to i32*
  store i32 %v2_8f80, i32* %v3_8f88, align 4
  br i1 %v2_8d7c, label %dec_label_pc_8f90, label %dec_label_pc_8d84

dec_label_pc_8f90:                                ; preds = %dec_label_pc_8f28, %dec_label_pc_8d78
  %v0_8f90 = call i32 @function_d228()
  store i32 %v0_8f90, i32* %r0.global-to-local, align 4
  store i32 %v3_8a9c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8fa0, i1* %cpsr_z.global-to-local, align 1
  %v1_8fa4 = load i32, i32* @r5, align 4
  %v2_8fa4 = add i32 %v1_8fa4, 12
  %v3_8fa4 = inttoptr i32 %v2_8fa4 to i32*
  store i32 %v0_8f90, i32* %v3_8fa4, align 4
  br i1 %v3_8fa0, label %dec_label_pc_8fac, label %dec_label_pc_8f90.dec_label_pc_8d98_crit_edge

dec_label_pc_8f90.dec_label_pc_8d98_crit_edge:    ; preds = %dec_label_pc_8f90
  %v1_8d9c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8d98

dec_label_pc_8fac:                                ; preds = %dec_label_pc_8f90, %dec_label_pc_8d84
  %v0_8fac = call i32 @function_d228()
  %v3_8fb4 = urem i32 %v0_8fac, 65536
  store i32 %v3_8fb4, i32* %r0.global-to-local, align 4
  %v1_8fbc = sub nsw i32 999, %v3_8fb4
  store i32 %v1_8fbc, i32* %r2.global-to-local, align 4
  %v3_8fc0 = sdiv i32 %v1_8fbc, 256
  store i32 %v3_8fc0, i32* %r1.global-to-local, align 4
  %v3_8fc434 = udiv i32 %v3_8fb4, 256
  store i32 %v3_8fc434, i32* %r3.global-to-local, align 4
  %v1_8fc8 = trunc i32 %v3_8fc434 to i8
  %v2_8fc8 = load i32, i32* @r5, align 4
  %v3_8fc8 = add i32 %v2_8fc8, 5
  %v4_8fc8 = inttoptr i32 %v3_8fc8 to i8*
  store i8 %v1_8fc8, i8* %v4_8fc8, align 1
  %v0_8fcc = load i32, i32* %r0.global-to-local, align 4
  %v1_8fcc = trunc i32 %v0_8fcc to i8
  %v2_8fcc = load i32, i32* @r5, align 4
  %v3_8fcc = add i32 %v2_8fcc, 4
  %v4_8fcc = inttoptr i32 %v3_8fcc to i8*
  store i8 %v1_8fcc, i8* %v4_8fcc, align 1
  %v0_8fd0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8fd0 = trunc i32 %v0_8fd0 to i8
  %v2_8fd0 = load i32, i32* @r6, align 4
  %v3_8fd0 = add i32 %v2_8fd0, 5
  %v4_8fd0 = inttoptr i32 %v3_8fd0 to i8*
  store i8 %v1_8fd0, i8* %v4_8fd0, align 1
  store i32 %v3_8aa0, i32* %r1.global-to-local, align 4
  %v1_8fd8 = load i32, i32* @r4, align 4
  %v9_8fd8 = icmp eq i32 %v3_8aa0, %v1_8fd8
  store i1 %v9_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v0_8fdc = load i32, i32* %r2.global-to-local, align 4
  %v1_8fdc = trunc i32 %v0_8fdc to i8
  %v2_8fdc = load i32, i32* @r6, align 4
  %v3_8fdc = add i32 %v2_8fdc, 4
  %v4_8fdc = inttoptr i32 %v3_8fdc to i8*
  store i8 %v1_8fdc, i8* %v4_8fdc, align 1
  %v0_8fe0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8fe0, label %dec_label_pc_8fe4, label %dec_label_pc_8fac.dec_label_pc_8da4_crit_edge

dec_label_pc_8fac.dec_label_pc_8da4_crit_edge:    ; preds = %dec_label_pc_8fac
  %v1_8da8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8da4

dec_label_pc_8fe4:                                ; preds = %dec_label_pc_8fac, %dec_label_pc_8d98
  %v0_8fe4 = call i32 @function_d228()
  %v1_8fe4 = trunc i32 %v0_8fe4 to i8
  store i32 %v0_8fe4, i32* %r0.global-to-local, align 4
  store i32 %v3_8aa4, i32* %r2.global-to-local, align 4
  %v4_8fec = sdiv i32 %v0_8fe4, 256
  store i32 %v4_8fec, i32* %r3.global-to-local, align 4
  %v1_8ff0 = load i32, i32* @r4, align 4
  %v9_8ff0 = icmp eq i32 %v3_8aa4, %v1_8ff0
  store i1 %v9_8ff0, i1* %cpsr_z.global-to-local, align 1
  %v3_8ff4 = load i32, i32* @r5, align 4
  %v4_8ff4 = add i32 %v3_8ff4, 58
  %v5_8ff4 = inttoptr i32 %v4_8ff4 to i8*
  store i8 %v1_8fe4, i8* %v5_8ff4, align 1
  %v0_8ff8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8ff8 = trunc i32 %v0_8ff8 to i8
  %v2_8ff8 = load i32, i32* @r7, align 4
  %v3_8ff8 = add i32 %v2_8ff8, 1
  %v4_8ff8 = inttoptr i32 %v3_8ff8 to i8*
  store i8 %v1_8ff8, i8* %v4_8ff8, align 1
  %v0_8ffc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8ffc, label %dec_label_pc_9000, label %dec_label_pc_8db0

dec_label_pc_9000:                                ; preds = %dec_label_pc_8fe4, %dec_label_pc_8da4
  %v0_9000 = call i32 @function_d228()
  %v1_9000 = trunc i32 %v0_9000 to i8
  store i32 %v0_9000, i32* %r0.global-to-local, align 4
  %v4_900436 = udiv i32 %v0_9000, 256
  %v1_9008 = trunc i32 %v4_900436 to i8
  %v2_9008 = load i32, i32* @r7, align 4
  %v3_9008 = add i32 %v2_9008, 3
  %v4_9008 = inttoptr i32 %v3_9008 to i8*
  store i8 %v1_9008, i8* %v4_9008, align 1
  store i32 %v1_8a98, i32* %r3.global-to-local, align 4
  store i1 %v2_9010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9010, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_9000
  %v1_9014 = load i32, i32* @r5, align 4
  %v2_9014 = add i32 %v1_9014, 16
  %v3_9014 = inttoptr i32 %v2_9014 to i32*
  %v4_9014 = load i32, i32* %v3_9014, align 4
  store i32 %v4_9014, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_9000, %bb100
  %v3_9018 = load i32, i32* @r7, align 4
  %v4_9018 = add i32 %v3_9018, 2
  %v5_9018 = inttoptr i32 %v4_9018 to i8*
  store i8 %v1_9000, i8* %v5_9018, align 1
  %v0_901c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_901c, label %dec_label_pc_9024, label %bb102

bb102:                                            ; preds = %bb101
  %v1_901c = load i32, i32* %r3.global-to-local, align 4
  %v2_901c = load i32, i32* @r6, align 4
  %v3_901c = add i32 %v2_901c, 16
  %v4_901c = inttoptr i32 %v3_901c to i32*
  store i32 %v1_901c, i32* %v4_901c, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_9024:                                ; preds = %dec_label_pc_8db0, %bb101
  %v0_9024 = call i32 @function_d228()
  store i32 %v0_9024, i32* %r0.global-to-local, align 4
  %v1_9028 = load i32, i32* @r6, align 4
  %v2_9028 = add i32 %v1_9028, 16
  %v3_9028 = inttoptr i32 %v2_9028 to i32*
  store i32 %v0_9024, i32* %v3_9028, align 4
  br label %dec_label_pc_8dc4

dec_label_pc_9030:                                ; preds = %dec_label_pc_8dc4
  %v0_9030 = load i32, i32* @r7, align 4
  %v1_9030 = add i32 %v0_9030, 8
  store i32 %v1_9030, i32* @r4, align 4
  store i32 %v1_9030, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r1.global-to-local, align 4
  %v2_903c = call i32 @function_d2dc(i32 %v1_9030, i32 %v6_89cc)
  store i32 %v2_903c, i32* %r0.global-to-local, align 4
  store i32 %v6_89cc, i32* %r2.global-to-local, align 4
  %v0_9044 = load i32, i32* @sl, align 4
  %v1_9044 = trunc i32 %v0_9044 to i8
  %v2_9044 = load i32, i32* @r4, align 4
  %v4_9044 = add i32 %v2_9044, %v6_89cc
  %v5_9044 = inttoptr i32 %v4_9044 to i8*
  store i8 %v1_9044, i8* %v5_9044, align 1
  br label %dec_label_pc_8e28

dec_label_pc_904c:                                ; preds = %dec_label_pc_8e28, %dec_label_pc_8d44
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9050 = call i32 @function_10904(i32* null)
  store i32 %v2_9050, i32* %r0.global-to-local, align 4
  store i32 %v2_8a30, i32* %r1.global-to-local, align 4
  %v9_9058 = icmp eq i32 %v2_8a30, %v2_9050
  store i1 %v9_9058, i1* %cpsr_z.global-to-local, align 1
  %v6_905c = icmp slt i32 %v2_8a30, %v2_9050
  br i1 %v6_905c, label %dec_label_pc_9060, label %dec_label_pc_8d44

dec_label_pc_9060:                                ; preds = %dec_label_pc_904c, %dec_label_pc_88d0, %dec_label_pc_9068
  %v29_9064 = phi i32 [ %v3_8a44, %dec_label_pc_88d0 ], [ %v1_906c, %dec_label_pc_9068 ], [ %v2_9050, %dec_label_pc_904c ]
  store i32 %v3_88d0, i32* %r4.global-to-local, align 4
  store i32 %v15_88d0, i32* %r8.global-to-local, align 4
  store i32 %v21_88d0, i32* %sl.global-to-local, align 4
  store i32 %v24_88d0, i32* %fp.global-to-local, align 4
  ret i32 %v29_9064

dec_label_pc_9068:                                ; preds = %dec_label_pc_8a54
  store i32 %v3_8a44, i32* %r0.global-to-local, align 4
  %v1_906c = call i32 @function_10660(i32 %v3_8a44)
  store i32 %v1_906c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9060

; uselistorder directives
  uselistorder i32 %v1_906c, { 1, 0 }
  uselistorder i32 %v0_9000, { 0, 2, 1 }
  uselistorder i32 %v0_8fe4, { 0, 2, 1 }
  uselistorder i32 %v3_8fb4, { 0, 2, 1 }
  uselistorder i32 %v2_8f80, { 1, 0 }
  uselistorder i32 %v8_8f60, { 1, 2, 0 }
  uselistorder i32 %v3_8f4c, { 1, 0 }
  uselistorder i32 %v0_8f3c, { 1, 0, 2, 3 }
  uselistorder i32 %v7_8f10, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8ee8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_8e8c, { 1, 0, 2 }
  uselistorder i32 %v4_8e88, { 0, 2, 1 }
  uselistorder i32 %v0_8e68, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8e58, { 0, 2, 1 }
  uselistorder i32 %v4_8e3c, { 1, 0 }
  uselistorder i1 %v2_9010, { 2, 3, 1, 0 }
  uselistorder i1 %v3_8fa0, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8d7c, { 2, 1, 0 }
  uselistorder i32 %v1_8d68, { 1, 0, 2 }
  uselistorder i32 %v0_8ce4, { 1, 0, 2 }
  uselistorder i32 %v3_8b74, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0, 2 }
  uselistorder i32 %v1_8af0, { 1, 0 }
  uselistorder i32 %v1_8ae8, { 2, 1, 0 }
  uselistorder i32 %v1_8ae4, { 1, 0 }
  uselistorder i32 %v1_8ae0, { 1, 0 }
  uselistorder i32 %v1_8ad4, { 1, 0 }
  uselistorder i32 %v3_8acc, { 2, 0, 1 }
  uselistorder i32 %v3_8a9c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_8a98, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_8a94, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8a8c, { 0, 2, 1 }
  uselistorder i32 %v0_8a88, { 0, 1, 3, 2 }
  uselistorder i1 %v7_8a74, { 1, 0 }
  uselistorder i1 %v7_8a48, { 1, 0 }
  uselistorder i32 %v3_8a44, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_8a30, { 2, 1, 0 }
  uselistorder i32 %v6_8a20, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_89ec, { 1, 2, 3, 0 }
  uselistorder i32 %v6_89cc, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_8980, { 1, 2, 0 }
  uselistorder i32 %v6_8954, { 2, 1, 3, 0 }
  uselistorder i32 %v6_8918, { 1, 2, 0 }
  uselistorder i32 %v2_8900, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_88d4, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 19, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 47, 1, 3, 2, 46, 4, 5, 8, 9, 6, 7, 11, 10, 13, 12, 14, 16, 15, 17, 19, 18, 20, 21, 22, 23, 25, 24, 29, 26, 27, 28, 32, 30, 31, 48, 49, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_9060, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9024, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_8e28, { 1, 0 }
  uselistorder label %dec_label_pc_8dc4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d44, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_9078(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9078:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9078 = load i32, i32* @r4, align 4
  %v15_9078 = load i32, i32* @r8, align 4
  %v21_9078 = load i32, i32* @sl, align 4
  %v24_9078 = load i32, i32* @fp, align 4
  %v1_907c = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_907c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9098 = urem i32 %arg4, 256
  store i32 %v1_9098, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_90a8 = call i32 @function_10ee8(i32 %v1_907c, i32 4)
  %v0_90ac = load i32, i32* @r5, align 4
  store i32 %v0_90ac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_90b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_90b8, i32* %r3.global-to-local, align 4
  %v0_90bc = load i32, i32* @r4, align 4
  store i32 %v0_90bc, i32* %r0.global-to-local, align 4
  %v5_90c0 = inttoptr i32 %v0_90ac to i32*
  %v6_90c0 = call i32 @function_829c(i32 %v0_90bc, i32* %v5_90c0, i32 2, i32 %v0_90b8, i32 %v2_90a8)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_90d8 = load i32, i32* @r5, align 4
  store i32 %v0_90d8, i32* %r1.global-to-local, align 4
  %v0_90dc = load i32, i32* @r4, align 4
  store i32 %v0_90dc, i32* %r0.global-to-local, align 4
  %v5_90e0 = trunc i32 %v6_90c0 to i8
  %v6_90e4 = inttoptr i32 %v0_90d8 to i32*
  %v7_90e4 = call i32 @function_829c(i32 %v0_90dc, i32* %v6_90e4, i32 3, i32 65535, i32 %v6_90c0)
  %v0_90e8 = load i32, i32* @r5, align 4
  store i32 %v0_90e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_90e4, i32* @r7, align 4
  %v0_90f8 = load i32, i32* @r4, align 4
  store i32 %v0_90f8, i32* %r0.global-to-local, align 4
  %v5_90fc = inttoptr i32 %v0_90e8 to i32*
  %v6_90fc = call i32 @function_829c(i32 %v0_90f8, i32* %v5_90fc, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v0_9108 = load i32, i32* @r5, align 4
  store i32 %v0_9108, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9114 = load i32, i32* @r4, align 4
  store i32 %v0_9114, i32* %r0.global-to-local, align 4
  %v5_9118 = trunc i32 %v6_90fc to i8
  %v6_911c = inttoptr i32 %v0_9108 to i32*
  %v7_911c = call i32 @function_829c(i32 %v0_9114, i32* %v6_911c, i32 5, i32 1, i32 %v6_90fc)
  %v1_9128 = urem i32 %v7_911c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9134 = load i32, i32* @r5, align 4
  store i32 %v0_9134, i32* %r1.global-to-local, align 4
  %v0_9138 = load i32, i32* @r4, align 4
  store i32 %v0_9138, i32* %r0.global-to-local, align 4
  %v5_9140 = inttoptr i32 %v0_9134 to i32*
  %v6_9140 = call i32 @function_829c(i32 %v0_9138, i32* %v5_9140, i32 6, i32 65535, i32 %v1_9128)
  %v0_914c = load i32, i32* @r5, align 4
  store i32 %v0_914c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9158 = load i32, i32* @r4, align 4
  store i32 %v0_9158, i32* %r0.global-to-local, align 4
  %v5_915c = inttoptr i32 %v0_914c to i32*
  %v6_915c = call i32 @function_829c(i32 %v0_9158, i32* %v5_915c, i32 7, i32 65535, i32 %v6_9140)
  %v0_9160 = load i32, i32* @r5, align 4
  store i32 %v0_9160, i32* %r1.global-to-local, align 4
  %v0_9164 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9164, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_915c, i32* @sl, align 4
  %v0_9170 = load i32, i32* @r4, align 4
  store i32 %v0_9170, i32* %r0.global-to-local, align 4
  %v5_9174 = inttoptr i32 %v0_9160 to i32*
  %v6_9174 = call i32 @function_829c(i32 %v0_9170, i32* %v5_9174, i32 %v0_9164, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9184 = load i32, i32* @r5, align 4
  store i32 %v0_9184, i32* %r1.global-to-local, align 4
  %v0_9188 = load i32, i32* @r4, align 4
  store i32 %v0_9188, i32* %r0.global-to-local, align 4
  %v5_918c = inttoptr i32 %v0_9184 to i32*
  %v6_918c = call i32 @function_829c(i32 %v0_9188, i32* %v5_918c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9194 = urem i32 %v6_918c, 256
  %v0_9198 = load i32, i32* @r5, align 4
  store i32 %v0_9198, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_91a0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91a0, i32* %r3.global-to-local, align 4
  %v0_91a4 = load i32, i32* @r4, align 4
  store i32 %v0_91a4, i32* %r0.global-to-local, align 4
  %v5_91ac = inttoptr i32 %v0_9198 to i32*
  %v6_91ac = call i32 @function_829c(i32 %v0_91a4, i32* %v5_91ac, i32 18, i32 %v0_91a0, i32 %v1_9194)
  %v0_91b4 = load i32, i32* @r5, align 4
  store i32 %v0_91b4, i32* %r1.global-to-local, align 4
  %v2_91b8 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_91b8, i32* %r3.global-to-local, align 4
  store i32 %v6_91ac, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_91c4 = load i32, i32* @r4, align 4
  store i32 %v0_91c4, i32* %r0.global-to-local, align 4
  %v5_91c8 = inttoptr i32 %v0_91b4 to i32*
  %v6_91c8 = call i32 @function_829c(i32 %v0_91c4, i32* %v5_91c8, i32 24, i32 %v2_91b8, i32 ptrtoint (i32* @0 to i32))
  %v0_91d0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_91d0, i32* %r0.global-to-local, align 4
  %v1_91d4 = inttoptr i32 %v0_91d0 to i32*
  %v2_91d4 = call i32 @function_10904(i32* %v1_91d4)
  %v1_91d8 = load i32, i32* @r6, align 4
  %v2_91d8 = add i32 %v1_91d8, %v2_91d4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_91ec = call i32 @function_10bfc(i32 2, i32 3, i32 6)
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v7_91f0 = icmp eq i32 %v3_91ec, -1
  store i1 %v7_91f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_91f0, label %dec_label_pc_9798, label %dec_label_pc_91fc

dec_label_pc_91fc:                                ; preds = %dec_label_pc_9078
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9204 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9204, i32* %r3.global-to-local, align 4
  %v0_920c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_920c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9218 = call i32 @function_10bcc(i32 %v3_91ec, i32 %v0_920c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9218, i32* %r0.global-to-local, align 4
  %v7_921c = icmp eq i32 %v6_9218, -1
  store i1 %v7_921c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_921c, label %dec_label_pc_97a0, label %dec_label_pc_9224

dec_label_pc_9224:                                ; preds = %dec_label_pc_91fc
  %v0_9230 = load i32, i32* @sl, align 4
  %v3_9230 = mul i32 %v0_9230, 65536
  store i32 %v3_9230, i32* %sl.global-to-local, align 4
  %v0_9234 = load i32, i32* @r7, align 4
  %v2_923c = icmp eq i32 %v1_907c, 0
  store i1 %v2_923c, i1* %cpsr_z.global-to-local, align 1
  %v0_9240 = load i32, i32* @r8, align 4
  %v1_9240 = urem i32 %v0_9240, 256
  store i32 %v1_9240, i32* %r8.global-to-local, align 4
  %v3_9244 = urem i32 %v0_9234, 65536
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  %v3_9248 = urem i32 %v6_9140, 65536
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v3_924c = urem i32 %v0_9230, 65536
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v0_9258 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9258, i32* %stack_var_-40, align 4
  br i1 %v2_923c, label %dec_label_pc_94d8.preheader, label %dec_label_pc_926c

dec_label_pc_926c:                                ; preds = %dec_label_pc_9224
  %v3_9274 = mul i32 %v6_9174, 65536
  %v1_927c = urem i32 %v6_9140, 256
  %v1_9284 = add i32 %v3_9274, 524288
  %v1_9288 = add i32 %v3_9274, 3407872
  %v1_928c = urem i32 %v0_9230, 256
  %v1_9290 = add i32 %v3_9274, 1835008
  %v0_9234.not = or i32 %v0_9234, -65536
  %v1_9298 = xor i32 %v0_9234.not, 65535
  %v3_929c = udiv i32 %v1_9290, 256
  %tmp77 = udiv i32 %v0_9234, 256
  %v1_92b0 = and i32 %v3_929c, 65280
  store i32 %v1_92b0, i32* %r0.global-to-local, align 4
  %v3_92d4 = mul nuw nsw i32 %v1_927c, 256
  %tmp78 = udiv i32 %v6_9140, 256
  %v4_92dc = urem i32 %tmp78, 256
  %v5_92dc = or i32 %v4_92dc, %v3_92d4
  store i32 %v5_92dc, i32* @lr, align 4
  %tmp79 = mul nsw i32 %v1_9298, 256
  %v3_92e4 = mul nuw nsw i32 %v1_928c, 256
  %sext23 = mul i32 %tmp77, 16777216
  %v4_92ec = sdiv i32 %sext23, 16777216
  %v4_92b4 = sdiv i32 %v1_9288, 16777216
  %tmp80 = udiv i32 %v0_9230, 256
  %v4_92f4 = urem i32 %tmp80, 256
  %v5_92f4 = or i32 %v4_92f4, %v3_92e4
  store i32 %v5_92f4, i32* @r7, align 4
  %v1_92f8 = and i32 %tmp79, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %v4_92fc = sdiv i32 %v1_9290, 16777216
  %v3_9300 = udiv i32 %v1_9284, 256
  %tmp81 = udiv i32 %v1_9298, 256
  %v4_9304 = urem i32 %tmp81, 256
  %v5_9304 = or i32 %v4_9304, %v1_92f8
  store i32 %v5_9304, i32* @r6, align 4
  %v3_9308 = ashr i32 %v1_9288, 31
  %v3_930c = ashr i32 %sext23, 31
  %v1_9310 = and i32 %v3_9300, 65280
  store i32 %v1_9310, i32* @r5, align 4
  %v3_931c = ashr i32 %v1_9290, 31
  store i32 %v3_931c, i32* %r2.global-to-local, align 4
  %v3_932032 = udiv i32 %v1_92f8, 256
  store i32 %v3_932032, i32* %r3.global-to-local, align 4
  store i32 %v1_927c, i32* %r1.global-to-local, align 4
  %v4_9328 = udiv i32 %v1_9284, 16777216
  %v5_9328 = or i32 %v4_9328, %v1_9310
  store i32 %v5_9328, i32* %r8.global-to-local, align 4
  %v5_932c = trunc i32 %tmp81 to i8
  store i32 %v0_9258, i32* @r4, align 4
  %v3_934433 = udiv i32 %v1_9310, 256
  store i32 %v3_934433, i32* %sl.global-to-local, align 4
  store i32 %v1_928c, i32* %fp.global-to-local, align 4
  %sext15 = mul i32 %v1_92f8, 65536
  %v4_9454 = sdiv i32 %sext15, 16777216
  %v2_9484 = icmp eq i32 %v1_9240, 0
  %sext16 = mul i32 %v6_9140, 16777216
  %v4_9498 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp78, 16777216
  %v4_94b4 = sdiv i32 %sext17, 16777216
  %v1_93b0 = trunc i32 %v4_92ec to i8
  br label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %bb92, %dec_label_pc_926c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9358 = call i32 @function_10ee8(i32 1510, i32 4)
  store i32 %v2_9358, i32* %r0.global-to-local, align 4
  store i32 %v2_90a8, i32* %r2.global-to-local, align 4
  %v3_9360 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9360, i32* %r3.global-to-local, align 4
  %v2_9364 = load i32, i32* @r4, align 4
  %v5_9364 = mul i32 %v2_9364, 4
  %v6_9364 = add i32 %v5_9364, %v2_90a8
  %v7_9364 = inttoptr i32 %v6_9364 to i32*
  store i32 %v2_9358, i32* %v7_9364, align 4
  %v0_9368 = load i32, i32* %r2.global-to-local, align 4
  %v1_9368 = load i32, i32* %r3.global-to-local, align 4
  %v4_9368 = mul i32 %v1_9368, 4
  %v5_9368 = add i32 %v4_9368, %v0_9368
  %v6_9368 = inttoptr i32 %v5_9368 to i32*
  %v7_9368 = load i32, i32* %v6_9368, align 4
  store i32 %v7_9368, i32* %r4.global-to-local, align 4
  %v1_936c = inttoptr i32 %v7_9368 to i8*
  %v2_936c = load i8, i8* %v1_936c, align 1
  %tmp = urem i8 %v2_936c, 16
  %v1_9370 = zext i8 %tmp to i32
  %v1_9374 = or i32 %v1_9370, 64
  store i32 %v1_9374, i32* %r2.global-to-local, align 4
  %v1_9378 = trunc i32 %v1_9374 to i8
  store i8 %v1_9378, i8* %v1_936c, align 1
  %v0_937c = load i32, i32* %r4.global-to-local, align 4
  %v1_937c = inttoptr i32 %v0_937c to i8*
  %v2_937c = load i8, i8* %v1_937c, align 1
  %v1_9380 = and i8 %v2_937c, -16
  %v1_9384 = or i8 %v1_9380, 5
  store i32 %v1_9128, i32* %r1.global-to-local, align 4
  store i8 %v1_9384, i8* %v1_937c, align 1
  %v2_9394 = load i32, i32* %r4.global-to-local, align 4
  %v3_9394 = add i32 %v2_9394, 1
  %v4_9394 = inttoptr i32 %v3_9394 to i8*
  store i8 %v5_90e0, i8* %v4_9394, align 1
  %v2_939c = load i32, i32* %r4.global-to-local, align 4
  %v3_939c = add i32 %v2_939c, 8
  %v4_939c = inttoptr i32 %v3_939c to i8*
  store i8 %v5_9118, i8* %v4_939c, align 1
  store i32 %v4_92ec, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_93a8 = load i32, i32* %r1.global-to-local, align 4
  %v9_93a8 = icmp eq i32 %v0_93a8, 0
  store i1 %v9_93a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9308, i32* %r2.global-to-local, align 4
  %v2_93b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_93b0 = add i32 %v2_93b0, 4
  %v4_93b0 = inttoptr i32 %v3_93b0 to i8*
  store i8 %v1_93b0, i8* %v4_93b0, align 1
  store i32 %v4_92b4, i32* %r1.global-to-local, align 4
  %v0_93b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93b8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_934c
  %v1_93b8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_93b8, i32* %r3.global-to-local, align 4
  %v2_93bc = trunc i32 %v1_93b8 to i8
  %v3_93bc = load i32, i32* %r4.global-to-local, align 4
  %v4_93bc = add i32 %v3_93bc, 7
  %v5_93bc = inttoptr i32 %v4_93bc to i8*
  store i8 %v2_93bc, i8* %v5_93bc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_934c, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_93c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_93c4 = trunc i32 %v0_93c4 to i8
  %v2_93c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93c4 = add i32 %v2_93c4, 3
  %v4_93c4 = inttoptr i32 %v3_93c4 to i8*
  store i8 %v1_93c4, i8* %v4_93c4, align 1
  %v0_93c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_93c8 = trunc i32 %v0_93c8 to i8
  %v2_93c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_93c8 = add i32 %v2_93c8, 2
  %v4_93c8 = inttoptr i32 %v3_93c8 to i8*
  store i8 %v1_93c8, i8* %v4_93c8, align 1
  %v0_93cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93cc, label %bb83, label %bb82

bb82:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb83

bb83:                                             ; preds = %.thread, %bb82
  store i32 %v3_930c, i32* %r1.global-to-local, align 4
  %v0_93d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_93d4 = trunc i32 %v0_93d4 to i8
  %v2_93d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93d4 = add i32 %v2_93d4, 9
  %v4_93d4 = inttoptr i32 %v3_93d4 to i8*
  store i8 %v1_93d4, i8* %v4_93d4, align 1
  %v0_93d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_93d8, label %bb85, label %bb84

bb84:                                             ; preds = %bb83
  %v1_93d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_93d8 = trunc i32 %v1_93d8 to i8
  %v3_93d8 = load i32, i32* %r4.global-to-local, align 4
  %v4_93d8 = add i32 %v3_93d8, 6
  %v5_93d8 = inttoptr i32 %v4_93d8 to i8*
  store i8 %v2_93d8, i8* %v5_93d8, align 1
  br label %bb85

bb85:                                             ; preds = %bb83, %bb84
  %v3_93dc = load i32, i32* %stack_var_-40, align 4
  %v5_93e4 = mul i32 %v3_93dc, 24
  store i32 %v5_93e4, i32* %r3.global-to-local, align 4
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v1_93ec = load i32, i32* %r4.global-to-local, align 4
  %v2_93ec = add i32 %v1_93ec, 12
  %v3_93ec = inttoptr i32 %v2_93ec to i32*
  store i32 %v6_91c8, i32* %v3_93ec, align 4
  %v0_93f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_93f0 = load i32, i32* @sb, align 4
  %v2_93f0 = add i32 %v1_93f0, %v0_93f0
  store i32 %v2_93f0, i32* %r3.global-to-local, align 4
  %v0_93f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_93f4 = trunc i32 %v0_93f4 to i8
  %v2_93f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93f4 = add i32 %v2_93f4, 5
  %v4_93f4 = inttoptr i32 %v3_93f4 to i8*
  store i8 %v1_93f4, i8* %v4_93f4, align 1
  %v0_93f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_93f8 = add i32 %v0_93f8, 16
  %v2_93f8 = inttoptr i32 %v1_93f8 to i32*
  %v3_93f8 = load i32, i32* %v2_93f8, align 4
  store i32 %v3_93f8, i32* %r2.global-to-local, align 4
  %v0_93fc = load i32, i32* %r4.global-to-local, align 4
  %v1_93fc = add i32 %v0_93fc, 20
  store i32 %v1_93fc, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9404 = load i32, i32* %r0.global-to-local, align 4
  %v1_9404 = trunc i32 %v0_9404 to i8
  %v3_9404 = add i32 %v0_93fc, 23
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 %v1_9404, i8* %v4_9404, align 1
  %v0_9408 = load i32, i32* %r3.global-to-local, align 4
  %v1_9408 = trunc i32 %v0_9408 to i8
  %v2_9408 = load i32, i32* %r1.global-to-local, align 4
  %v3_9408 = add i32 %v2_9408, 2
  %v4_9408 = inttoptr i32 %v3_9408 to i8*
  store i8 %v1_9408, i8* %v4_9408, align 1
  %v0_940c = load i32, i32* %r4.global-to-local, align 4
  %v1_940c = add i32 %v0_940c, 24
  %v2_940c = inttoptr i32 %v1_940c to i8*
  %v3_940c = load i8, i8* %v2_940c, align 1
  %tmp98 = urem i8 %v3_940c, 16
  %v1_9410 = zext i8 %tmp98 to i32
  %v1_9414 = or i32 %v1_9410, 64
  store i32 %v1_9414, i32* %r3.global-to-local, align 4
  %v1_9418 = trunc i32 %v1_9414 to i8
  store i8 %v1_9418, i8* %v2_940c, align 1
  %v0_941c = load i32, i32* %r2.global-to-local, align 4
  %v1_941c = load i32, i32* %r4.global-to-local, align 4
  %v2_941c = add i32 %v1_941c, 16
  %v3_941c = inttoptr i32 %v2_941c to i32*
  store i32 %v0_941c, i32* %v3_941c, align 4
  %v0_9420 = load i32, i32* %r4.global-to-local, align 4
  %v1_9420 = add i32 %v0_9420, 24
  %v2_9420 = inttoptr i32 %v1_9420 to i8*
  %v3_9420 = load i8, i8* %v2_9420, align 1
  %v1_9424 = and i8 %v3_9420, -16
  %v1_9428 = or i8 %v1_9424, 5
  store i8 %v1_9428, i8* %v2_9420, align 1
  %v0_9434 = load i32, i32* %r4.global-to-local, align 4
  %v1_9434 = add i32 %v0_9434, 24
  store i32 %v1_9434, i32* @r5, align 4
  %v3_9438 = add i32 %v0_9434, 25
  %v4_9438 = inttoptr i32 %v3_9438 to i8*
  store i8 %v5_90e0, i8* %v4_9438, align 1
  store i32 %v4_92fc, i32* %r1.global-to-local, align 4
  store i32 %tmp81, i32* %r3.global-to-local, align 4
  store i32 %v3_931c, i32* %r2.global-to-local, align 4
  %v2_9448 = load i32, i32* @r5, align 4
  %v3_9448 = add i32 %v2_9448, 4
  %v4_9448 = inttoptr i32 %v3_9448 to i8*
  store i8 %v5_932c, i8* %v4_9448, align 1
  %v0_944c = load i32, i32* %r1.global-to-local, align 4
  %v1_944c = trunc i32 %v0_944c to i8
  %v2_944c = load i32, i32* @r5, align 4
  %v3_944c = add i32 %v2_944c, 2
  %v4_944c = inttoptr i32 %v3_944c to i8*
  store i8 %v1_944c, i8* %v4_944c, align 1
  %v0_9450 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9450, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  store i32 %v4_9454, i32* %r1.global-to-local, align 4
  %v0_9458 = load i32, i32* %r2.global-to-local, align 4
  %v1_9458 = trunc i32 %v0_9458 to i8
  %v2_9458 = load i32, i32* @r5, align 4
  %v3_9458 = add i32 %v2_9458, 3
  %v4_9458 = inttoptr i32 %v3_9458 to i8*
  store i8 %v1_9458, i8* %v4_9458, align 1
  store i32 %v6_90fc, i32* %r2.global-to-local, align 4
  %v0_9460 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9460, label %bb89, label %bb88

bb88:                                             ; preds = %bb87
  %v1_9460 = load i32, i32* %r3.global-to-local, align 4
  %v2_9460 = trunc i32 %v1_9460 to i8
  %v3_9460 = load i32, i32* @r5, align 4
  %v4_9460 = add i32 %v3_9460, 6
  %v5_9460 = inttoptr i32 %v4_9460 to i8*
  store i8 %v2_9460, i8* %v5_9460, align 1
  br label %bb89

bb89:                                             ; preds = %bb87, %bb88
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9468 = load i32, i32* %r1.global-to-local, align 4
  %v1_9468 = trunc i32 %v0_9468 to i8
  %v2_9468 = load i32, i32* @r5, align 4
  %v3_9468 = add i32 %v2_9468, 5
  %v4_9468 = inttoptr i32 %v3_9468 to i8*
  store i8 %v1_9468, i8* %v4_9468, align 1
  %v0_946c = load i32, i32* %r2.global-to-local, align 4
  %v1_946c = trunc i32 %v0_946c to i8
  %v2_946c = load i32, i32* @r5, align 4
  %v3_946c = add i32 %v2_946c, 8
  %v4_946c = inttoptr i32 %v3_946c to i8*
  store i8 %v1_946c, i8* %v4_946c, align 1
  %v0_9470 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9470, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v1_9470 = load i32, i32* %r0.global-to-local, align 4
  %v2_9470 = trunc i32 %v1_9470 to i8
  %v3_9470 = load i32, i32* @r5, align 4
  %v4_9470 = add i32 %v3_9470, 7
  %v5_9470 = inttoptr i32 %v4_9470 to i8*
  store i8 %v2_9470, i8* %v5_9470, align 1
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_9474 = load i32, i32* %r3.global-to-local, align 4
  %v1_9474 = trunc i32 %v0_9474 to i8
  %v2_9474 = load i32, i32* @r5, align 4
  %v3_9474 = add i32 %v2_9474, 9
  %v4_9474 = inttoptr i32 %v3_9474 to i8*
  store i8 %v1_9474, i8* %v4_9474, align 1
  %v0_9478 = call i32 @function_d228()
  store i32 %v0_9478, i32* %r0.global-to-local, align 4
  store i32 %v1_9240, i32* %r1.global-to-local, align 4
  store i1 %v2_9484, i1* %cpsr_z.global-to-local, align 1
  %v1_9488 = sub i32 1023, %v0_9478
  store i32 %v1_9488, i32* %r3.global-to-local, align 4
  br i1 %v2_9484, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb91
  %v2_9490 = load i32, i32* @r5, align 4
  %v3_9490 = add i32 %v2_9490, 16
  %v4_9490 = inttoptr i32 %v3_9490 to i32*
  store i32 %v1_9488, i32* %v4_9490, align 4
  br label %bb92

.thread19:                                        ; preds = %bb91
  %v1_948c = load i32, i32* %r4.global-to-local, align 4
  %v2_948c = add i32 %v1_948c, 16
  %v3_948c = inttoptr i32 %v2_948c to i32*
  %v4_948c = load i32, i32* %v3_948c, align 4
  store i32 %v4_948c, i32* %r3.global-to-local, align 4
  %v2_9494 = load i32, i32* @r5, align 4
  %v3_9494 = add i32 %v2_9494, 16
  %v4_9494 = inttoptr i32 %v3_9494 to i32*
  store i32 %v4_948c, i32* %v4_9494, align 4
  br label %bb92

bb92:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_9498, i32* %r3.global-to-local, align 4
  %v0_949c = load i32, i32* %r4.global-to-local, align 4
  %v1_949c = add i32 %v0_949c, 44
  store i32 %v1_949c, i32* @r6, align 4
  %v1_94a0 = load i32, i32* @r5, align 4
  %v2_94a0 = add i32 %v1_94a0, 12
  %v3_94a0 = inttoptr i32 %v2_94a0 to i32*
  store i32 %v0_9478, i32* %v3_94a0, align 4
  %v0_94a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_94a4 = trunc i32 %v0_94a4 to i8
  %v2_94a4 = load i32, i32* @r6, align 4
  %v3_94a4 = add i32 %v2_94a4, 1
  %v4_94a4 = inttoptr i32 %v3_94a4 to i8*
  store i8 %v1_94a4, i8* %v4_94a4, align 1
  %v3_94a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_94a8, i32* %r3.global-to-local, align 4
  store i32 %v1_907c, i32* %r1.global-to-local, align 4
  %v1_94b0 = add i32 %v3_94a8, 1
  store i32 %v1_94b0, i32* @r4, align 4
  store i32 %v4_94b4, i32* %r2.global-to-local, align 4
  %v9_94b8 = icmp eq i32 %v1_94b0, %v1_907c
  store i1 %v9_94b8, i1* %cpsr_z.global-to-local, align 1
  %v0_94bc = load i32, i32* %sl.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i8
  %v2_94bc = load i32, i32* @r6, align 4
  %v3_94bc = add i32 %v2_94bc, 5
  %v4_94bc = inttoptr i32 %v3_94bc to i8*
  store i8 %v1_94bc, i8* %v4_94bc, align 1
  %v0_94c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_94c0 = trunc i32 %v0_94c0 to i8
  %v2_94c0 = load i32, i32* @r6, align 4
  %v3_94c0 = inttoptr i32 %v2_94c0 to i8*
  store i8 %v1_94c0, i8* %v3_94c0, align 1
  %v0_94c4 = load i32, i32* @r7, align 4
  %v1_94c4 = trunc i32 %v0_94c4 to i8
  %v2_94c4 = load i32, i32* @r6, align 4
  %v3_94c4 = add i32 %v2_94c4, 2
  %v4_94c4 = inttoptr i32 %v3_94c4 to i8*
  store i8 %v1_94c4, i8* %v4_94c4, align 1
  %v0_94c8 = load i32, i32* %fp.global-to-local, align 4
  %v1_94c8 = trunc i32 %v0_94c8 to i8
  %v2_94c8 = load i32, i32* @r6, align 4
  %v3_94c8 = add i32 %v2_94c8, 3
  %v4_94c8 = inttoptr i32 %v3_94c8 to i8*
  store i8 %v1_94c8, i8* %v4_94c8, align 1
  %v0_94cc = load i32, i32* %r8.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94cc to i8
  %v2_94cc = load i32, i32* @r6, align 4
  %v3_94cc = add i32 %v2_94cc, 4
  %v4_94cc = inttoptr i32 %v3_94cc to i8*
  store i8 %v1_94cc, i8* %v4_94cc, align 1
  %v0_94d0 = load i32, i32* @r4, align 4
  store i32 %v0_94d0, i32* %stack_var_-40, align 4
  %v5_94d4 = icmp slt i32 %v1_94b0, %v1_907c
  br i1 %v5_94d4, label %dec_label_pc_934c, label %dec_label_pc_94d8.preheader

dec_label_pc_94d8.preheader:                      ; preds = %bb92, %dec_label_pc_9224
  %v1_94f8 = add i32 %v6_9174, 8
  %v1_94fc = add i32 %v6_9174, 52
  %v2_9508 = icmp eq i32 %v6_91c8, -1
  %v7_9508 = icmp eq i32 %v6_91c8, -1
  %v3_96d0 = icmp eq i32 %v3_9244, 65535
  %v2_9740 = icmp eq i32 %v1_9240, 0
  %v2_975c = icmp eq i32 %v1_9194, 0
  br label %dec_label_pc_94d8

dec_label_pc_94d8:                                ; preds = %dec_label_pc_94d8.preheader, %dec_label_pc_9784
  store i32 %v1_907c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_923c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_923c, label %dec_label_pc_9784, label %dec_label_pc_94ec

dec_label_pc_94ec:                                ; preds = %dec_label_pc_94d8
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v1_94f8, i32* @fp, align 4
  store i32 %v1_94fc, i32* @sl, align 4
  br label %dec_label_pc_9630

dec_label_pc_9504:                                ; preds = %dec_label_pc_9630
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  store i1 %v7_9508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9508, label %dec_label_pc_96c0, label %dec_label_pc_9510

dec_label_pc_9510:                                ; preds = %dec_label_pc_9658, %dec_label_pc_9504
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_96d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_96d0, label %dec_label_pc_96dc, label %dec_label_pc_9524

dec_label_pc_9524:                                ; preds = %dec_label_pc_96c0.dec_label_pc_9524_crit_edge, %dec_label_pc_9510
  %v1_9528 = phi i32 [ %v1_9528.pre, %dec_label_pc_96c0.dec_label_pc_9524_crit_edge ], [ 65535, %dec_label_pc_9510 ]
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v9_9528 = icmp eq i32 %v3_9248, %v1_9528
  store i1 %v9_9528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9528, label %dec_label_pc_9714, label %dec_label_pc_9530

dec_label_pc_9530:                                ; preds = %dec_label_pc_96dc.dec_label_pc_9530_crit_edge, %dec_label_pc_9524
  %v1_9534 = phi i32 [ %v1_9534.pre, %dec_label_pc_96dc.dec_label_pc_9530_crit_edge ], [ %v1_9528, %dec_label_pc_9524 ]
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v9_9534 = icmp eq i32 %v3_924c, %v1_9534
  store i1 %v9_9534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9534, label %dec_label_pc_9730, label %dec_label_pc_953c

dec_label_pc_953c:                                ; preds = %dec_label_pc_9714, %dec_label_pc_9530
  store i32 %v1_9240, i32* %r3.global-to-local, align 4
  store i1 %v2_9740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9740, label %dec_label_pc_9754, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_953c
  %v1_9544 = load i32, i32* @r5, align 4
  %v2_9544 = add i32 %v1_9544, 16
  %v3_9544 = inttoptr i32 %v2_9544 to i32*
  %v4_9544 = load i32, i32* %v3_9544, align 4
  store i32 %v4_9544, i32* %r3.global-to-local, align 4
  %v2_9548 = load i32, i32* @r6, align 4
  %v3_9548 = add i32 %v2_9548, 16
  %v4_9548 = inttoptr i32 %v3_9548 to i32*
  store i32 %v4_9544, i32* %v4_9548, align 4
  br label %dec_label_pc_9550

dec_label_pc_9550:                                ; preds = %bb97, %.thread20
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_975c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_975c, label %dec_label_pc_955c, label %dec_label_pc_9768

dec_label_pc_955c:                                ; preds = %dec_label_pc_9550, %dec_label_pc_9754, %dec_label_pc_9768
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9560 = load i32, i32* @r8, align 4
  %v1_9560 = trunc i32 %v0_9560 to i8
  %v2_9560 = load i32, i32* @r5, align 4
  %v3_9560 = add i32 %v2_9560, 10
  %v4_9560 = inttoptr i32 %v3_9560 to i8*
  store i8 %v1_9560, i8* %v4_9560, align 1
  %v0_9564 = load i32, i32* @r8, align 4
  %v1_9564 = trunc i32 %v0_9564 to i8
  %v2_9564 = load i32, i32* @r5, align 4
  %v3_9564 = add i32 %v2_9564, 11
  %v4_9564 = inttoptr i32 %v3_9564 to i8*
  store i8 %v1_9564, i8* %v4_9564, align 1
  %v0_9568 = load i32, i32* @r5, align 4
  store i32 %v0_9568, i32* @r0, align 4
  %v2_956c = call i32 @function_c6b0(i32 %v0_9568, i32 20)
  %v3_956c = trunc i32 %v2_956c to i8
  %v4_9570 = sdiv i32 %v2_956c, 256
  store i32 %v4_9570, i32* %r3.global-to-local, align 4
  %v1_9574 = trunc i32 %v4_9570 to i8
  %v2_9574 = load i32, i32* @r5, align 4
  %v3_9574 = add i32 %v2_9574, 11
  %v4_9574 = inttoptr i32 %v3_9574 to i8*
  store i8 %v1_9574, i8* %v4_9574, align 1
  %v3_9578 = load i32, i32* @r5, align 4
  %v4_9578 = add i32 %v3_9578, 10
  %v5_9578 = inttoptr i32 %v4_9578 to i8*
  store i8 %v3_956c, i8* %v5_9578, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9580 = load i32, i32* @r8, align 4
  %v1_9580 = trunc i32 %v0_9580 to i8
  %v2_9580 = load i32, i32* @r6, align 4
  %v3_9580 = add i32 %v2_9580, 10
  %v4_9580 = inttoptr i32 %v3_9580 to i8*
  store i8 %v1_9580, i8* %v4_9580, align 1
  %v0_9584 = load i32, i32* @r8, align 4
  %v1_9584 = trunc i32 %v0_9584 to i8
  %v2_9584 = load i32, i32* @r6, align 4
  %v3_9584 = add i32 %v2_9584, 11
  %v4_9584 = inttoptr i32 %v3_9584 to i8*
  store i8 %v1_9584, i8* %v4_9584, align 1
  %v0_9588 = load i32, i32* @r6, align 4
  store i32 %v0_9588, i32* @r0, align 4
  %v2_958c = call i32 @function_c6b0(i32 %v0_9588, i32 20)
  %v3_958c = trunc i32 %v2_958c to i8
  store i32 %v2_958c, i32* %r0.global-to-local, align 4
  %v4_9590 = sdiv i32 %v2_958c, 256
  store i32 %v4_9590, i32* %r3.global-to-local, align 4
  %v3_9594 = load i32, i32* @r6, align 4
  %v4_9594 = add i32 %v3_9594, 10
  %v5_9594 = inttoptr i32 %v4_9594 to i8*
  store i8 %v3_958c, i8* %v5_9594, align 1
  %v0_9598 = load i32, i32* %r3.global-to-local, align 4
  %v1_9598 = trunc i32 %v0_9598 to i8
  %v2_9598 = load i32, i32* @r6, align 4
  %v3_9598 = add i32 %v2_9598, 11
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v1_9598, i8* %v4_9598, align 1
  %v0_959c = load i32, i32* @r7, align 4
  %v1_959c = add i32 %v0_959c, 4
  %v2_959c = inttoptr i32 %v1_959c to i8*
  %v3_959c = load i8, i8* %v2_959c, align 1
  %v4_959c = zext i8 %v3_959c to i32
  store i32 %v4_959c, i32* %r3.global-to-local, align 4
  %v1_95a0 = add i32 %v0_959c, 5
  %v2_95a0 = inttoptr i32 %v1_95a0 to i8*
  %v3_95a0 = load i8, i8* %v2_95a0, align 1
  %v4_95a0 = zext i8 %v3_95a0 to i32
  store i32 %v0_959c, i32* @r1, align 4
  %v4_95a8 = mul nuw nsw i32 %v4_95a0, 256
  %v5_95a8 = or i32 %v4_95a8, %v4_959c
  store i32 %v5_95a8, i32* %r2.global-to-local, align 4
  %v0_95ac = load i32, i32* @r8, align 4
  %v1_95ac = trunc i32 %v0_95ac to i8
  %v3_95ac = add i32 %v0_959c, 6
  %v4_95ac = inttoptr i32 %v3_95ac to i8*
  store i8 %v1_95ac, i8* %v4_95ac, align 1
  %v0_95b0 = load i32, i32* @fp, align 4
  store i32 %v0_95b0, i32* %r3.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r8, align 4
  %v1_95b4 = trunc i32 %v0_95b4 to i8
  %v2_95b4 = load i32, i32* @r7, align 4
  %v3_95b4 = add i32 %v2_95b4, 7
  %v4_95b4 = inttoptr i32 %v3_95b4 to i8*
  store i8 %v1_95b4, i8* %v4_95b4, align 1
  %v0_95b8 = load i32, i32* @r6, align 4
  store i32 %v0_95b8, i32* %r0.global-to-local, align 4
  %v4_95bc = call i32 @function_c70c(i32 %v0_95b8, i32 %v0_959c, i32 %v5_95a8, i32 %v0_95b0)
  %v5_95bc = trunc i32 %v4_95bc to i8
  store i32 %v4_95bc, i32* %r0.global-to-local, align 4
  %v3_95c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_95c0, i32* %r3.global-to-local, align 4
  %v3_95c4 = mul i32 %v3_95c0, 32
  store i32 %v3_95c4, i32* %r2.global-to-local, align 4
  %v0_95c8 = load i32, i32* @r5, align 4
  %v1_95c8 = add i32 %v0_95c8, 16
  %v2_95c8 = inttoptr i32 %v1_95c8 to i32*
  %v3_95c8 = load i32, i32* %v2_95c8, align 4
  store i32 %v3_95c8, i32* %r1.global-to-local, align 4
  %v5_95cc = mul i32 %v3_95c0, 24
  store i32 %v5_95cc, i32* %r2.global-to-local, align 4
  %v4_95d035 = udiv i32 %v4_95bc, 256
  %v1_95d4 = trunc i32 %v4_95d035 to i8
  %v2_95d4 = load i32, i32* @r7, align 4
  %v3_95d4 = add i32 %v2_95d4, 7
  %v4_95d4 = inttoptr i32 %v3_95d4 to i8*
  store i8 %v1_95d4, i8* %v4_95d4, align 1
  %v0_95d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_95d8 = load i32, i32* @sb, align 4
  %v2_95d8 = add i32 %v1_95d8, %v0_95d8
  store i32 %v2_95d8, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_95e0 = load i32, i32* @r7, align 4
  %v4_95e0 = add i32 %v3_95e0, 6
  %v5_95e0 = inttoptr i32 %v4_95e0 to i8*
  store i8 %v5_95bc, i8* %v5_95e0, align 1
  %v0_95e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_95e4 = load i32, i32* %lr.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, 4
  %v3_95e4 = inttoptr i32 %v2_95e4 to i32*
  store i32 %v0_95e4, i32* %v3_95e4, align 4
  %v0_95e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v2_95e8 = load i32, i32* %r2.global-to-local, align 4
  %v3_95e8 = load i32, i32* @sb, align 4
  %v4_95e8 = add i32 %v3_95e8, %v2_95e8
  %v5_95e8 = inttoptr i32 %v4_95e8 to i8*
  store i8 %v1_95e8, i8* %v5_95e8, align 1
  %v0_95ec = load i32, i32* @r8, align 4
  %v1_95ec = trunc i32 %v0_95ec to i8
  %v2_95ec = load i32, i32* %lr.global-to-local, align 4
  %v3_95ec = add i32 %v2_95ec, 2
  %v4_95ec = inttoptr i32 %v3_95ec to i8*
  store i8 %v1_95ec, i8* %v4_95ec, align 1
  %v0_95f0 = load i32, i32* @r8, align 4
  %v1_95f0 = trunc i32 %v0_95f0 to i8
  %v2_95f0 = load i32, i32* %lr.global-to-local, align 4
  %v3_95f0 = add i32 %v2_95f0, 1
  %v4_95f0 = inttoptr i32 %v3_95f0 to i8*
  store i8 %v1_95f0, i8* %v4_95f0, align 1
  %v0_95f4 = load i32, i32* @r8, align 4
  %v1_95f4 = trunc i32 %v0_95f4 to i8
  %v2_95f4 = load i32, i32* %lr.global-to-local, align 4
  %v3_95f4 = add i32 %v2_95f4, 3
  %v4_95f4 = inttoptr i32 %v3_95f4 to i8*
  store i8 %v1_95f4, i8* %v4_95f4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9600 = load i32, i32* @r5, align 4
  store i32 %v0_9600, i32* %r1.global-to-local, align 4
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v0_9608 = load i32, i32* @sl, align 4
  store i32 %v0_9608, i32* %r2.global-to-local, align 4
  %v0_960c = load i32, i32* %lr.global-to-local, align 4
  %v6_9614 = inttoptr i32 %v0_9600 to i32*
  %v7_9614 = call i32 @function_10b98(i32 %v3_91ec, i32* %v6_9614, i32 %v0_9608, i32 16384, i32 %v0_960c, i32 16)
  %v3_9618 = load i32, i32* %stack_var_-40, align 4
  %v1_961c = add i32 %v3_9618, 1
  store i32 %v1_961c, i32* %r0.global-to-local, align 4
  store i32 %v1_907c, i32* %r3.global-to-local, align 4
  %v9_9624 = icmp eq i32 %v1_961c, %v1_907c
  store i1 %v9_9624, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_961c, i32* %stack_var_-40, align 4
  %v6_962c = icmp slt i32 %v1_961c, %v1_907c
  br i1 %v6_962c, label %dec_label_pc_9630, label %dec_label_pc_9784

dec_label_pc_9630:                                ; preds = %dec_label_pc_955c, %dec_label_pc_94ec
  %v1_9644 = phi i32 [ %v1_961c, %dec_label_pc_955c ], [ 0, %dec_label_pc_94ec ]
  %v5_9634 = mul i32 %v1_9644, 24
  %v1_9638 = load i32, i32* @sb, align 4
  %v2_9638 = add i32 %v1_9638, %v5_9634
  store i32 %v2_9638, i32* %r3.global-to-local, align 4
  store i32 %v2_90a8, i32* %r1.global-to-local, align 4
  %v1_9640 = add i32 %v2_9638, 20
  %v2_9640 = inttoptr i32 %v1_9640 to i8*
  %v3_9640 = load i8, i8* %v2_9640, align 1
  %v4_9640 = zext i8 %v3_9640 to i32
  store i32 %v4_9640, i32* %r2.global-to-local, align 4
  %v4_9644 = mul i32 %v1_9644, 4
  %v5_9644 = add i32 %v4_9644, %v2_90a8
  %v6_9644 = inttoptr i32 %v5_9644 to i32*
  %v7_9644 = load i32, i32* %v6_9644, align 4
  store i32 %v7_9644, i32* @r5, align 4
  %v2_9648 = icmp ugt i8 %v3_9640, 30
  %v7_9648 = icmp eq i8 %v3_9640, 31
  store i1 %v7_9648, i1* %cpsr_z.global-to-local, align 1
  %v1_964c = add i32 %v7_9644, 24
  store i32 %v1_964c, i32* @r6, align 4
  %v1_9650 = add i32 %v7_9644, 44
  store i32 %v1_9650, i32* @r7, align 4
  %v2_9654 = xor i1 %v7_9648, true
  %v3_9654 = and i1 %v2_9648, %v2_9654
  br i1 %v3_9654, label %dec_label_pc_9504, label %dec_label_pc_9658

dec_label_pc_9658:                                ; preds = %dec_label_pc_9630
  %v1_9658 = add i32 %v2_9638, 16
  %v2_9658 = inttoptr i32 %v1_9658 to i32*
  %v3_9658 = load i32, i32* %v2_9658, align 4
  store i32 %v3_9658, i32* %r4.global-to-local, align 4
  %v0_965c = call i32 @function_d228()
  store i32 %v0_965c, i32* %r0.global-to-local, align 4
  %v3_9660 = load i32, i32* %stack_var_-40, align 4
  %v5_9668 = mul i32 %v3_9660, 24
  %v0_966c = load i32, i32* %r4.global-to-local, align 4
  %v1_9670 = load i32, i32* @sb, align 4
  %v2_9670 = add i32 %v1_9670, %v5_9668
  store i32 %v2_9670, i32* %r1.global-to-local, align 4
  %v1_9674 = and i32 %v0_966c, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9674, i32* %r3.global-to-local, align 4
  %v1_966c = udiv i32 %v0_966c, 256
  %v3_9678 = and i32 %v1_966c, 65280
  store i32 %v3_9678, i32* %r2.global-to-local, align 4
  %v3_967c = mul i32 %v0_966c, 16777216
  %v1_9680 = add i32 %v2_9670, 20
  %v2_9680 = inttoptr i32 %v1_9680 to i8*
  %v3_9680 = load i8, i8* %v2_9680, align 1
  %v4_9680 = zext i8 %v3_9680 to i32
  store i32 %v4_9680, i32* %lr.global-to-local, align 4
  %v4_9684 = mul i32 %v1_9674, 256
  %v5_9684 = or i32 %v4_9684, %v3_967c
  %v4_9688 = udiv i32 %v0_966c, 16777216
  %v5_9688 = or i32 %v3_9678, %v4_9688
  %v2_968c = or i32 %v5_9688, %v5_9684
  %v7_9690 = lshr i32 %v0_965c, %v4_9680
  %v8_9690 = add i32 %v7_9690, %v2_968c
  %v3_969c = mul i32 %v8_9690, 16777216
  %v1_96a0 = and i32 %v8_9690, 65280
  store i32 %v1_96a0, i32* %r0.global-to-local, align 4
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v4_96ac = mul nuw nsw i32 %v1_96a0, 256
  %v5_96ac = or i32 %v4_96ac, %v3_969c
  store i32 %v5_96ac, i32* %r1.global-to-local, align 4
  %v2_96b0 = call i32 @llvm.bswap.i32(i32 %v8_9690)
  store i32 %v2_96b0, i32* %r3.global-to-local, align 4
  store i1 %v7_9508, i1* %cpsr_z.global-to-local, align 1
  %v1_96b8 = load i32, i32* @r5, align 4
  %v2_96b8 = add i32 %v1_96b8, 16
  %v3_96b8 = inttoptr i32 %v2_96b8 to i32*
  store i32 %v2_96b0, i32* %v3_96b8, align 4
  br i1 %v2_9508, label %dec_label_pc_96c0, label %dec_label_pc_9510

dec_label_pc_96c0:                                ; preds = %dec_label_pc_9658, %dec_label_pc_9504
  %v0_96c0 = call i32 @function_d228()
  store i32 %v0_96c0, i32* %r0.global-to-local, align 4
  store i32 %v3_9244, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_96d0, i1* %cpsr_z.global-to-local, align 1
  %v1_96d4 = load i32, i32* @r5, align 4
  %v2_96d4 = add i32 %v1_96d4, 12
  %v3_96d4 = inttoptr i32 %v2_96d4 to i32*
  store i32 %v0_96c0, i32* %v3_96d4, align 4
  br i1 %v3_96d0, label %dec_label_pc_96dc, label %dec_label_pc_96c0.dec_label_pc_9524_crit_edge

dec_label_pc_96c0.dec_label_pc_9524_crit_edge:    ; preds = %dec_label_pc_96c0
  %v1_9528.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9524

dec_label_pc_96dc:                                ; preds = %dec_label_pc_96c0, %dec_label_pc_9510
  %v0_96dc = call i32 @function_d228()
  %v3_96e4 = urem i32 %v0_96dc, 65536
  store i32 %v3_96e4, i32* %r0.global-to-local, align 4
  %v1_96ec = sub nsw i32 999, %v3_96e4
  store i32 %v1_96ec, i32* %r2.global-to-local, align 4
  %v3_96f0 = sdiv i32 %v1_96ec, 256
  store i32 %v3_96f0, i32* %r1.global-to-local, align 4
  %v3_96f434 = udiv i32 %v3_96e4, 256
  store i32 %v3_96f434, i32* %r3.global-to-local, align 4
  %v1_96f8 = trunc i32 %v3_96f434 to i8
  %v2_96f8 = load i32, i32* @r5, align 4
  %v3_96f8 = add i32 %v2_96f8, 5
  %v4_96f8 = inttoptr i32 %v3_96f8 to i8*
  store i8 %v1_96f8, i8* %v4_96f8, align 1
  %v0_96fc = load i32, i32* %r0.global-to-local, align 4
  %v1_96fc = trunc i32 %v0_96fc to i8
  %v2_96fc = load i32, i32* @r5, align 4
  %v3_96fc = add i32 %v2_96fc, 4
  %v4_96fc = inttoptr i32 %v3_96fc to i8*
  store i8 %v1_96fc, i8* %v4_96fc, align 1
  %v0_9700 = load i32, i32* %r1.global-to-local, align 4
  %v1_9700 = trunc i32 %v0_9700 to i8
  %v2_9700 = load i32, i32* @r6, align 4
  %v3_9700 = add i32 %v2_9700, 5
  %v4_9700 = inttoptr i32 %v3_9700 to i8*
  store i8 %v1_9700, i8* %v4_9700, align 1
  store i32 %v3_9248, i32* %r1.global-to-local, align 4
  %v1_9708 = load i32, i32* @r4, align 4
  %v9_9708 = icmp eq i32 %v3_9248, %v1_9708
  store i1 %v9_9708, i1* %cpsr_z.global-to-local, align 1
  %v0_970c = load i32, i32* %r2.global-to-local, align 4
  %v1_970c = trunc i32 %v0_970c to i8
  %v2_970c = load i32, i32* @r6, align 4
  %v3_970c = add i32 %v2_970c, 4
  %v4_970c = inttoptr i32 %v3_970c to i8*
  store i8 %v1_970c, i8* %v4_970c, align 1
  %v0_9710 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9710, label %dec_label_pc_9714, label %dec_label_pc_96dc.dec_label_pc_9530_crit_edge

dec_label_pc_96dc.dec_label_pc_9530_crit_edge:    ; preds = %dec_label_pc_96dc
  %v1_9534.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9530

dec_label_pc_9714:                                ; preds = %dec_label_pc_96dc, %dec_label_pc_9524
  %v0_9714 = call i32 @function_d228()
  %v1_9714 = trunc i32 %v0_9714 to i8
  store i32 %v0_9714, i32* %r0.global-to-local, align 4
  store i32 %v3_924c, i32* %r2.global-to-local, align 4
  %v4_971c = sdiv i32 %v0_9714, 256
  store i32 %v4_971c, i32* %r3.global-to-local, align 4
  %v1_9720 = load i32, i32* @r4, align 4
  %v9_9720 = icmp eq i32 %v3_924c, %v1_9720
  store i1 %v9_9720, i1* %cpsr_z.global-to-local, align 1
  %v3_9724 = load i32, i32* @r5, align 4
  %v4_9724 = add i32 %v3_9724, 44
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 %v1_9714, i8* %v5_9724, align 1
  %v0_9728 = load i32, i32* %r3.global-to-local, align 4
  %v1_9728 = trunc i32 %v0_9728 to i8
  %v2_9728 = load i32, i32* @r7, align 4
  %v3_9728 = add i32 %v2_9728, 1
  %v4_9728 = inttoptr i32 %v3_9728 to i8*
  store i8 %v1_9728, i8* %v4_9728, align 1
  %v0_972c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_972c, label %dec_label_pc_9730, label %dec_label_pc_953c

dec_label_pc_9730:                                ; preds = %dec_label_pc_9714, %dec_label_pc_9530
  %v0_9730 = call i32 @function_d228()
  %v1_9730 = trunc i32 %v0_9730 to i8
  store i32 %v0_9730, i32* %r0.global-to-local, align 4
  %v4_973436 = udiv i32 %v0_9730, 256
  %v1_9738 = trunc i32 %v4_973436 to i8
  %v2_9738 = load i32, i32* @r7, align 4
  %v3_9738 = add i32 %v2_9738, 3
  %v4_9738 = inttoptr i32 %v3_9738 to i8*
  store i8 %v1_9738, i8* %v4_9738, align 1
  store i32 %v1_9240, i32* %r3.global-to-local, align 4
  store i1 %v2_9740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9740, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_9730
  %v1_9744 = load i32, i32* @r5, align 4
  %v2_9744 = add i32 %v1_9744, 16
  %v3_9744 = inttoptr i32 %v2_9744 to i32*
  %v4_9744 = load i32, i32* %v3_9744, align 4
  store i32 %v4_9744, i32* %r3.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_9730, %bb95
  %v3_9748 = load i32, i32* @r7, align 4
  %v4_9748 = add i32 %v3_9748, 2
  %v5_9748 = inttoptr i32 %v4_9748 to i8*
  store i8 %v1_9730, i8* %v5_9748, align 1
  %v0_974c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_974c, label %dec_label_pc_9754, label %bb97

bb97:                                             ; preds = %bb96
  %v1_974c = load i32, i32* %r3.global-to-local, align 4
  %v2_974c = load i32, i32* @r6, align 4
  %v3_974c = add i32 %v2_974c, 16
  %v4_974c = inttoptr i32 %v3_974c to i32*
  store i32 %v1_974c, i32* %v4_974c, align 4
  br label %dec_label_pc_9550

dec_label_pc_9754:                                ; preds = %dec_label_pc_953c, %bb96
  %v0_9754 = call i32 @function_d228()
  store i32 %v0_9754, i32* %r0.global-to-local, align 4
  store i32 %v1_9194, i32* %r1.global-to-local, align 4
  store i1 %v2_975c, i1* %cpsr_z.global-to-local, align 1
  %v1_9760 = load i32, i32* @r6, align 4
  %v2_9760 = add i32 %v1_9760, 16
  %v3_9760 = inttoptr i32 %v2_9760 to i32*
  store i32 %v0_9754, i32* %v3_9760, align 4
  br i1 %v2_975c, label %dec_label_pc_955c, label %dec_label_pc_9768

dec_label_pc_9768:                                ; preds = %dec_label_pc_9550, %dec_label_pc_9754
  %v0_9768 = load i32, i32* @r7, align 4
  %v1_9768 = add i32 %v0_9768, 8
  store i32 %v1_9768, i32* @r4, align 4
  store i32 %v1_9768, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r1.global-to-local, align 4
  %v2_9774 = call i32 @function_d2dc(i32 %v1_9768, i32 %v6_9174)
  store i32 %v2_9774, i32* %r0.global-to-local, align 4
  store i32 %v6_9174, i32* %r2.global-to-local, align 4
  %v0_977c = load i32, i32* @r8, align 4
  %v1_977c = trunc i32 %v0_977c to i8
  %v2_977c = load i32, i32* @r4, align 4
  %v4_977c = add i32 %v2_977c, %v6_9174
  %v5_977c = inttoptr i32 %v4_977c to i8*
  store i8 %v1_977c, i8* %v5_977c, align 1
  br label %dec_label_pc_955c

dec_label_pc_9784:                                ; preds = %dec_label_pc_955c, %dec_label_pc_94d8
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9788 = call i32 @function_10904(i32* null)
  store i32 %v2_9788, i32* %r0.global-to-local, align 4
  store i32 %v2_91d8, i32* %r1.global-to-local, align 4
  %v9_9790 = icmp eq i32 %v2_91d8, %v2_9788
  store i1 %v9_9790, i1* %cpsr_z.global-to-local, align 1
  %v6_9794 = icmp slt i32 %v2_91d8, %v2_9788
  br i1 %v6_9794, label %dec_label_pc_9798, label %dec_label_pc_94d8

dec_label_pc_9798:                                ; preds = %dec_label_pc_9784, %dec_label_pc_9078, %dec_label_pc_97a0
  %v29_979c = phi i32 [ %v3_91ec, %dec_label_pc_9078 ], [ %v1_97a4, %dec_label_pc_97a0 ], [ %v2_9788, %dec_label_pc_9784 ]
  store i32 %v3_9078, i32* %r4.global-to-local, align 4
  store i32 %v15_9078, i32* %r8.global-to-local, align 4
  store i32 %v21_9078, i32* %sl.global-to-local, align 4
  store i32 %v24_9078, i32* %fp.global-to-local, align 4
  ret i32 %v29_979c

dec_label_pc_97a0:                                ; preds = %dec_label_pc_91fc
  store i32 %v3_91ec, i32* %r0.global-to-local, align 4
  %v1_97a4 = call i32 @function_10660(i32 %v3_91ec)
  store i32 %v1_97a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9798

; uselistorder directives
  uselistorder i32 %v1_97a4, { 1, 0 }
  uselistorder i32 %v0_9730, { 0, 2, 1 }
  uselistorder i32 %v0_9714, { 0, 2, 1 }
  uselistorder i32 %v3_96e4, { 0, 2, 1 }
  uselistorder i32 %v2_96b0, { 1, 0 }
  uselistorder i32 %v8_9690, { 1, 2, 0 }
  uselistorder i32 %v0_966c, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9644, { 1, 0, 2 }
  uselistorder i32 %v1_961c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_95c0, { 1, 0, 2 }
  uselistorder i32 %v4_95bc, { 0, 2, 1 }
  uselistorder i32 %v0_959c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_958c, { 0, 2, 1 }
  uselistorder i32 %v4_9570, { 1, 0 }
  uselistorder i1 %v2_975c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_9740, { 2, 3, 1, 0 }
  uselistorder i1 %v3_96d0, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9508, { 2, 1, 0 }
  uselistorder i32 %v0_9478, { 1, 0, 2 }
  uselistorder i32 %v3_931c, { 1, 0 }
  uselistorder i32 %tmp81, { 1, 0, 2 }
  uselistorder i32 %v1_9298, { 1, 0 }
  uselistorder i32 %v1_9290, { 2, 1, 0 }
  uselistorder i32 %v1_928c, { 1, 0 }
  uselistorder i32 %v1_9288, { 1, 0 }
  uselistorder i32 %v1_927c, { 1, 0 }
  uselistorder i32 %v3_9274, { 2, 0, 1 }
  uselistorder i32 %v3_9244, { 0, 1, 3, 2 }
  uselistorder i32 %v1_9240, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_923c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9234, { 0, 2, 1 }
  uselistorder i32 %v0_9230, { 0, 1, 3, 2 }
  uselistorder i1 %v7_921c, { 1, 0 }
  uselistorder i1 %v7_91f0, { 1, 0 }
  uselistorder i32 %v3_91ec, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_91d8, { 2, 1, 0 }
  uselistorder i32 %v6_91c8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_9194, { 1, 0, 2, 3 }
  uselistorder i32 %v6_9174, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v6_90fc, { 1, 0, 2 }
  uselistorder i32 %v2_90a8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_907c, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r8.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r4.global-to-local, { 19, 20, 21, 16, 17, 0, 1, 2, 3, 15, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18 }
  uselistorder i32* %r3.global-to-local, { 28, 27, 29, 30, 31, 32, 33, 34, 35, 49, 36, 38, 39, 40, 41, 37, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 59, 61, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0 }
  uselistorder i32* %r2.global-to-local, { 25, 26, 27, 28, 29, 30, 39, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 25, 26, 27, 28, 29, 30, 31, 32, 40, 33, 34, 35, 36, 38, 37, 39, 41, 42, 43, 44, 45, 46, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 22, 21, 24, 23, 0 }
  uselistorder i32* %r0.global-to-local, { 25, 24, 27, 26, 29, 28, 30, 33, 34, 31, 32, 36, 35, 38, 37, 39, 23, 41, 42, 43, 40, 3, 1, 2, 4, 7, 5, 6, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0 }
  uselistorder i32* %fp.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 3, 4, 5, 0, 1, 2, 6, 7, 8, 9 }
  uselistorder label %dec_label_pc_9798, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9768, { 1, 0 }
  uselistorder label %dec_label_pc_9754, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_955c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_94d8, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_97b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_97b0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp35 = call i8 @__decompiler_undefined_function_1()
  %tmp36 = call i8 @__decompiler_undefined_function_1()
  %tmp37 = call i8 @__decompiler_undefined_function_1()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %tmp43 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_97b0 = load i32, i32* @sb, align 4
  %v1_97b4 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  %v1_97d0 = urem i32 %arg4, 256
  store i32 %v1_97d0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_97e0 = call i32 @function_10ee8(i32 %v1_97b4, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  %v2_97f0 = call i32 @function_10ee8(i32 %v1_97b4, i32 4)
  %v0_97f4 = load i32, i32* @r5, align 4
  store i32 %v0_97f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_9800 = load i32, i32* @r7, align 4
  store i32 %v0_9800, i32* %r3.global-to-local, align 4
  %v0_9804 = load i32, i32* @r4, align 4
  store i32 %v0_9804, i32* %r0.global-to-local, align 4
  %v5_9808 = inttoptr i32 %v0_97f4 to i32*
  %v6_9808 = call i32 @function_829c(i32 %v0_9804, i32* %v5_9808, i32 2, i32 %v0_9800, i32 %v2_97f0)
  %v1_9814 = urem i32 %v6_9808, 256
  store i32 %v1_9814, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9820 = load i32, i32* @r5, align 4
  store i32 %v0_9820, i32* %r1.global-to-local, align 4
  %v0_9824 = load i32, i32* @r4, align 4
  store i32 %v0_9824, i32* %r0.global-to-local, align 4
  %v5_9828 = trunc i32 %v6_9808 to i8
  %v6_982c = inttoptr i32 %v0_9820 to i32*
  %v7_982c = call i32 @function_829c(i32 %v0_9824, i32* %v6_982c, i32 3, i32 65535, i32 %v6_9808)
  %v0_9830 = load i32, i32* @r5, align 4
  store i32 %v0_9830, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_982c, i32* %sb.global-to-local, align 4
  %v0_9840 = load i32, i32* @r4, align 4
  store i32 %v0_9840, i32* %r0.global-to-local, align 4
  %v5_9844 = inttoptr i32 %v0_9830 to i32*
  %v6_9844 = call i32 @function_829c(i32 %v0_9840, i32* %v5_9844, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_984c = urem i32 %v6_9844, 256
  store i32 %v1_984c, i32* %ip.global-to-local, align 4
  %v0_9850 = load i32, i32* @r5, align 4
  store i32 %v0_9850, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_985c = load i32, i32* @r4, align 4
  store i32 %v0_985c, i32* %r0.global-to-local, align 4
  %sext9 = mul i32 %v6_9844, 16777216
  %v5_9864 = sdiv i32 %sext9, 16777216
  %v6_9864 = inttoptr i32 %v0_9850 to i32*
  %v7_9864 = call i32 @function_829c(i32 %v0_985c, i32* %v6_9864, i32 5, i32 1, i32 %v5_9864)
  %v1_9870 = urem i32 %v7_9864, 256
  store i32 %v1_9870, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9878 = load i32, i32* @r5, align 4
  store i32 %v0_9878, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9880 = load i32, i32* @r4, align 4
  store i32 %v0_9880, i32* %r0.global-to-local, align 4
  %sext10 = mul i32 %v7_9864, 16777216
  %v5_9888 = sdiv i32 %sext10, 16777216
  %v6_9888 = inttoptr i32 %v0_9878 to i32*
  %v7_9888 = call i32 @function_829c(i32 %v0_9880, i32* %v6_9888, i32 7, i32 65535, i32 %v5_9888)
  %v0_988c = load i32, i32* @r5, align 4
  store i32 %v0_988c, i32* %r1.global-to-local, align 4
  %v3_9890 = mul i32 %v7_9888, 65536
  store i32 %v3_9890, i32* @sl, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_9898 = load i32, i32* @r7, align 4
  store i32 %v0_9898, i32* %r3.global-to-local, align 4
  %v0_989c = load i32, i32* @r4, align 4
  store i32 %v0_989c, i32* %r0.global-to-local, align 4
  %v5_98a0 = inttoptr i32 %v0_988c to i32*
  %v6_98a0 = call i32 @function_829c(i32 %v0_989c, i32* %v5_98a0, i32 10, i32 %v0_9898, i32 ptrtoint (i32* @0 to i32))
  %v1_98a8 = urem i32 %v6_98a0, 256
  store i32 %v1_98a8, i32* %ip.global-to-local, align 4
  %v0_98ac = load i32, i32* @r5, align 4
  store i32 %v0_98ac, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_98b8 = load i32, i32* @r4, align 4
  store i32 %v0_98b8, i32* %r0.global-to-local, align 4
  %v5_98c0 = inttoptr i32 %v0_98ac to i32*
  %v6_98c0 = call i32 @function_829c(i32 %v0_98b8, i32* %v5_98c0, i32 11, i32 1, i32 %v1_98a8)
  %v1_98c8 = urem i32 %v6_98c0, 256
  store i32 %v1_98c8, i32* %ip.global-to-local, align 4
  %v0_98cc = load i32, i32* @r5, align 4
  store i32 %v0_98cc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_98d8 = load i32, i32* @r4, align 4
  store i32 %v0_98d8, i32* %r0.global-to-local, align 4
  %v5_98e0 = inttoptr i32 %v0_98cc to i32*
  %v6_98e0 = call i32 @function_829c(i32 %v0_98d8, i32* %v5_98e0, i32 12, i32 1, i32 %v1_98c8)
  %v1_98e8 = urem i32 %v6_98e0, 256
  store i32 %v1_98e8, i32* %ip.global-to-local, align 4
  %v0_98ec = load i32, i32* @r5, align 4
  store i32 %v0_98ec, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r7, align 4
  store i32 %v0_98f4, i32* %r3.global-to-local, align 4
  %v0_98f8 = load i32, i32* @r4, align 4
  store i32 %v0_98f8, i32* %r0.global-to-local, align 4
  %v5_9900 = inttoptr i32 %v0_98ec to i32*
  %v6_9900 = call i32 @function_829c(i32 %v0_98f8, i32* %v5_9900, i32 13, i32 %v0_98f4, i32 %v1_98e8)
  %v1_9908 = urem i32 %v6_9900, 256
  store i32 %v1_9908, i32* %ip.global-to-local, align 4
  %v0_990c = load i32, i32* @r5, align 4
  store i32 %v0_990c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_9914 = load i32, i32* @r7, align 4
  store i32 %v0_9914, i32* %r3.global-to-local, align 4
  %v0_9918 = load i32, i32* @r4, align 4
  store i32 %v0_9918, i32* %r0.global-to-local, align 4
  %v5_9920 = inttoptr i32 %v0_990c to i32*
  %v6_9920 = call i32 @function_829c(i32 %v0_9918, i32* %v5_9920, i32 14, i32 %v0_9914, i32 %v1_9908)
  %v1_9928 = urem i32 %v6_9920, 256
  store i32 %v1_9928, i32* %ip.global-to-local, align 4
  %v0_992c = load i32, i32* @r5, align 4
  store i32 %v0_992c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_9934 = load i32, i32* @r7, align 4
  store i32 %v0_9934, i32* %r3.global-to-local, align 4
  %v0_9938 = load i32, i32* @r4, align 4
  store i32 %v0_9938, i32* %r0.global-to-local, align 4
  %v5_9940 = inttoptr i32 %v0_992c to i32*
  %v6_9940 = call i32 @function_829c(i32 %v0_9938, i32* %v5_9940, i32 15, i32 %v0_9934, i32 %v1_9928)
  %v1_9948 = urem i32 %v6_9940, 256
  store i32 %v1_9948, i32* %ip.global-to-local, align 4
  %v0_994c = load i32, i32* @r7, align 4
  store i32 %v0_994c, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9954 = load i32, i32* @r5, align 4
  store i32 %v0_9954, i32* %r1.global-to-local, align 4
  %v0_9958 = load i32, i32* @r4, align 4
  store i32 %v0_9958, i32* %r0.global-to-local, align 4
  %v5_9960 = inttoptr i32 %v0_9954 to i32*
  %v6_9960 = call i32 @function_829c(i32 %v0_9958, i32* %v5_9960, i32 %v0_994c, i32 768, i32 %v1_9948)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_996c = load i32, i32* @r5, align 4
  store i32 %v0_996c, i32* %r1.global-to-local, align 4
  %v0_9974 = load i32, i32* @r4, align 4
  store i32 %v0_9974, i32* %r0.global-to-local, align 4
  %v5_9978 = inttoptr i32 %v0_996c to i32*
  %v6_9978 = call i32 @function_829c(i32 %v0_9974, i32* %v5_9978, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9980 = urem i32 %v6_9978, 256
  store i32 %v1_9980, i32* %r3.global-to-local, align 4
  %v0_9984 = load i32, i32* @r7, align 4
  store i32 %v0_9984, i32* %r0.global-to-local, align 4
  %v1_998c = inttoptr i32 %v0_9984 to i32*
  %v2_998c = call i32 @function_10904(i32* %v1_998c)
  %v1_9990 = load i32, i32* @r6, align 4
  %v2_9990 = add i32 %v1_9990, %v2_998c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_99a4 = call i32 @function_10bfc(i32 2, i32 3, i32 6)
  store i32 %v3_99a4, i32* %r0.global-to-local, align 4
  %v0_99a8 = load i32, i32* @sl, align 4
  %v3_99a8 = udiv i32 %v0_99a8, 65536
  store i32 %v3_99a8, i32* %r1.global-to-local, align 4
  %v7_99ac = icmp eq i32 %v3_99a4, -1
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_99a4, i32* @r8, align 4
  br i1 %v7_99ac, label %dec_label_pc_9d78, label %dec_label_pc_99bc

dec_label_pc_99bc:                                ; preds = %dec_label_pc_97b0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_99c4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_99c4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_99cc = load i32, i32* @r7, align 4
  store i32 %v0_99cc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_99d8 = call i32 @function_10bcc(i32 %v3_99a4, i32 %v0_99cc, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_99d8, i32* %r0.global-to-local, align 4
  %v7_99dc = icmp eq i32 %v6_99d8, -1
  store i1 %v7_99dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99dc, label %dec_label_pc_9d70, label %dec_label_pc_99e4

dec_label_pc_99e4:                                ; preds = %dec_label_pc_99bc
  store i32 %v1_97b4, i32* %r2.global-to-local, align 4
  %v0_99e8 = load i32, i32* %sb.global-to-local, align 4
  %v3_99e8 = mul i32 %v0_99e8, 65536
  store i32 %v3_99e8, i32* %r0.global-to-local, align 4
  %v3_99ec = urem i32 %v0_99e8, 65536
  store i32 %v3_99ec, i32* %r3.global-to-local, align 4
  %v2_99f0 = icmp eq i32 %v1_97b4, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %v0_99f4 = load i32, i32* @r7, align 4
  store i32 %v0_99f4, i32* %stack_var_-40, align 4
  br i1 %v2_99f0, label %dec_label_pc_99e4.dec_label_pc_9bf8.preheader_crit_edge, label %dec_label_pc_9a00

dec_label_pc_99e4.dec_label_pc_9bf8.preheader_crit_edge: ; preds = %dec_label_pc_99e4
  %.pre = add i32 %v6_9960, 40
  br label %dec_label_pc_9bf8.preheader

dec_label_pc_9a00:                                ; preds = %dec_label_pc_99e4
  %v0_9a04 = load i32, i32* @sl, align 4
  %v3_9a04 = udiv i32 %v0_9a04, 16777216
  %tmp83 = udiv i32 %v0_99e8, 256
  %v3_9a08 = urem i32 %tmp83, 256
  store i32 %v3_9a08, i32* %r0.global-to-local, align 4
  %v1_9a0c = add i32 %v6_9960, 40
  store i32 %v1_9a0c, i32* %ip.global-to-local, align 4
  %v2_9a3c = ptrtoint i32* %stack_var_-76 to i32
  %v2_9a40 = ptrtoint i32* %stack_var_-332 to i32
  %v3_9dec = icmp ugt i32 %v0_99a8, -65537
  %v2_9acc = ptrtoint i32* %stack_var_-60 to i32
  %v3_9ad8 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v1_9af0 = urem i32 %v1_9a0c, 256
  %tmp84 = udiv i32 %v1_9a0c, 256
  %v3_9af4 = urem i32 %tmp84, 256
  %v2_9b04 = ptrtoint i32* %stack_var_-44 to i32
  %v4_9b78 = zext i8 %tmp37 to i32
  %v4_9b7c = zext i8 %tmp36 to i32
  %v4_9b88 = mul nuw nsw i32 %v4_9b7c, 256
  %v4_9b98 = zext i8 %tmp35 to i32
  %v1_9b9c = and i32 %v4_9b98, 18
  %v2_9ba0 = icmp eq i32 %v1_9b9c, 18
  %v1_a008 = urem i32 %v6_98a0, 2
  %tmp108 = sub nsw i32 0, %v1_a008
  %v4_a010 = and i32 %tmp108, 32
  %v1_a03c = urem i32 %v6_98e0, 2
  %tmp109 = sub nsw i32 0, %v1_a03c
  %v4_a044 = and i32 %tmp109, 8
  %v1_a088 = urem i32 %v6_9940, 2
  %v4_9af8 = mul nuw nsw i32 %v1_9af0, 256
  %v5_9af8 = or i32 %v4_9af8, %v3_9af4
  %v5_9b88 = or i32 %v4_9b78, %v4_9b88
  %v1_9ba8 = and i32 %v4_9b98, 5
  %v2_9ba8 = icmp eq i32 %v1_9ba8, 0
  %v1_9ab8 = urem i32 %v3_99a8, 256
  %v4_9abc = mul nuw nsw i32 %v1_9ab8, 256
  %v5_9abc = or i32 %v3_9a04, %v4_9abc
  %v1_9ac4 = trunc i32 %v3_99a8 to i8
  %v1_9ac8 = trunc i32 %v3_9a04 to i8
  %v1_9ef4 = urem i32 %v0_99e8, 256
  %v4_9efc = mul nuw nsw i32 %v1_9ef4, 256
  %v5_9efc = or i32 %v4_9efc, %v3_9a08
  %sext = mul i32 %v1_9a0c, 16777216
  %v4_9f18 = sdiv i32 %sext, 16777216
  %v1_a020 = urem i32 %v6_98c0, 2
  %tmp110 = sub nsw i32 0, %v1_a020
  %v4_a028 = and i32 %tmp110, 16
  %v1_a054 = urem i32 %v6_9900, 2
  %tmp111 = sub nsw i32 0, %v1_a054
  %v4_a05c = and i32 %tmp111, 4
  %v1_a06c = urem i32 %v6_9920, 2
  %tmp112 = sub nsw i32 0, %v1_a06c
  %v3_a074 = and i32 %tmp112, 2
  br label %dec_label_pc_9a1c.outer

dec_label_pc_9a1c.outer:                          ; preds = %.thread8, %dec_label_pc_9a00
  %stack_var_-336.0.ph = phi i32 [ %v0_9f34, %.thread8 ], [ %tmp, %dec_label_pc_9a00 ]
  %stack_var_-56.0.ph = phi i32 [ %v0_9e40, %.thread8 ], [ %tmp43, %dec_label_pc_9a00 ]
  br label %dec_label_pc_9a1c

dec_label_pc_9a1c:                                ; preds = %dec_label_pc_9be0, %dec_label_pc_9bb0, %dec_label_pc_9a1c.outer
  %stack_var_-56.0 = phi i32 [ %stack_var_-56.0.ph, %dec_label_pc_9a1c.outer ], [ %stack_var_-56.5, %dec_label_pc_9be0 ], [ %v0_9e40, %dec_label_pc_9bb0 ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9a34 = call i32 @function_10bfc(i32 2, i32 1, i32 0)
  store i32 %v3_9a34, i32* %r0.global-to-local, align 4
  %v7_9a38 = icmp eq i32 %v3_9a34, -1
  store i1 %v7_9a38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9a34, i32* @r7, align 4
  br i1 %v7_9a38, label %dec_label_pc_9be0, label %dec_label_pc_9a4c

dec_label_pc_9a4c:                                ; preds = %dec_label_pc_9a1c, %dec_label_pc_9bbc
  %v0_9a54 = phi i32 [ %v3_9bd0, %dec_label_pc_9bbc ], [ %v3_9a34, %dec_label_pc_9a1c ]
  %stack_var_-56.1 = phi i32 [ %v0_9e40, %dec_label_pc_9bbc ], [ %stack_var_-56.0, %dec_label_pc_9a1c ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9a54 = call i32 @function_1059c(i32 %v0_9a54, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9a5c = or i32 %v2_9a54, 2048
  store i32 %v1_9a5c, i32* @r2, align 4
  %v0_9a60 = load i32, i32* @r7, align 4
  store i32 %v0_9a60, i32* %r0.global-to-local, align 4
  %v2_9a64 = call i32 @function_1059c(i32 %v0_9a60, i32 4)
  %v3_9a68 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9a74 = mul i32 %v3_9a68, 24
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_9a88 = add i32 %v5_9a74, %arg3
  store i32 %v2_9a88, i32* %r2.global-to-local, align 4
  %v1_9a8c = add i32 %v2_9a88, 20
  %v2_9a8c = inttoptr i32 %v1_9a8c to i8*
  %v3_9a8c = load i8, i8* %v2_9a8c, align 1
  %v4_9a8c = zext i8 %v3_9a8c to i32
  store i32 %v4_9a8c, i32* %r3.global-to-local, align 4
  %v2_9a90 = icmp ugt i8 %v3_9a8c, 30
  %v7_9a90 = icmp eq i8 %v3_9a8c, 31
  store i1 %v7_9a90, i1* %cpsr_z.global-to-local, align 1
  %v2_9a94 = xor i1 %v7_9a90, true
  %v3_9a94 = and i1 %v2_9a90, %v2_9a94
  br i1 %v3_9a94, label %bb, label %bb85

bb:                                               ; preds = %dec_label_pc_9a4c
  %v5_9a94 = add i32 %v2_9a88, 16
  %v6_9a94 = inttoptr i32 %v5_9a94 to i32*
  %v7_9a94 = load i32, i32* %v6_9a94, align 4
  store i32 %v7_9a94, i32* %r3.global-to-local, align 4
  br label %bb85

bb85:                                             ; preds = %dec_label_pc_9a4c, %bb
  %v4_9a98 = phi i32 [ %v4_9a8c, %dec_label_pc_9a4c ], [ %v7_9a94, %bb ]
  %v4_9a98.stack_var_-56.1 = select i1 %v3_9a94, i32 %v4_9a98, i32 %stack_var_-56.1
  %v2_9a9c = xor i1 %v2_9a90, true
  %v3_9a9c = or i1 %v7_9a90, %v2_9a9c
  br i1 %v3_9a9c, label %dec_label_pc_9d80, label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %bb85
  store i32 %v3_99a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9dec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9dec, label %dec_label_pc_9df4, label %dec_label_pc_9ab4

dec_label_pc_9ab4:                                ; preds = %dec_label_pc_9d80, %dec_label_pc_9aa0
  %stack_var_-56.3 = phi i32 [ %v2_9dd8, %dec_label_pc_9d80 ], [ %v4_9a98.stack_var_-56.1, %dec_label_pc_9aa0 ]
  store i32 %v3_9a04, i32* %r0.global-to-local, align 4
  store i32 %v5_9abc, i32* %r3.global-to-local, align 4
  store i32 %v1_9ab8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9acc

dec_label_pc_9acc:                                ; preds = %dec_label_pc_9df4, %dec_label_pc_9ab4
  %stack_var_-57.0 = phi i8 [ %v1_9dfc, %dec_label_pc_9df4 ], [ %v1_9ac4, %dec_label_pc_9ab4 ]
  %v0_9e40 = phi i32 [ %stack_var_-56.6, %dec_label_pc_9df4 ], [ %stack_var_-56.3, %dec_label_pc_9ab4 ]
  %storemerge = phi i8 [ %v1_9df4, %dec_label_pc_9df4 ], [ %v1_9ac8, %dec_label_pc_9ab4 ]
  store i32 %v2_9acc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9ad4 = load i32, i32* @r7, align 4
  store i32 %v0_9ad4, i32* %r0.global-to-local, align 4
  %v4_9ad8 = call i32 @function_10a58(i32 %v0_9ad4, %sockaddr* %v3_9ad8, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9ae0 = call i32 @function_10904(i32* null)
  store i32 %v2_9ae0, i32* %r0.global-to-local, align 4
  store i32 %v1_9a0c, i32* %r1.global-to-local, align 4
  store i32 %v1_9af0, i32* %r3.global-to-local, align 4
  store i32 %v5_9af8, i32* @fp, align 4
  store i32 %v1_9af0, i32* %r2.global-to-local, align 4
  store i32 %v2_9ae0, i32* @r4, align 4
  store i32 %v2_9b04, i32* @r6, align 4
  %v9_9b5c = icmp eq i32 %tmp38, %v0_9e40
  %v4_9b80 = zext i8 %storemerge to i32
  %v4_9b84 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_9b5c to i32
  %v9_9b70 = icmp eq i1 %v9_9b5c, false
  %v4_9b8c = mul nuw nsw i32 %v4_9b84, 256
  %v5_9b8c = or i32 %v4_9b80, %v4_9b8c
  %v9_9b90 = icmp eq i32 %v5_9b8c, %v5_9b88
  br label %dec_label_pc_9b20

dec_label_pc_9b10:                                ; preds = %.thread30, %dec_label_pc_9b78, %dec_label_pc_9ba8, %bb88
  %v2_9b10 = call i32 @function_10904(i32* null)
  %v0_9b14 = load i32, i32* @r4, align 4
  %v2_9b14 = sub i32 %v2_9b10, %v0_9b14
  store i32 %v2_9b14, i32* %r0.global-to-local, align 4
  %v7_9b18 = icmp eq i32 %v2_9b14, 10
  store i1 %v7_9b18, i1* %cpsr_z.global-to-local, align 1
  %v8_9b1c = icmp sgt i32 %v2_9b14, 10
  br i1 %v8_9b1c, label %dec_label_pc_9bbc, label %dec_label_pc_9b20

dec_label_pc_9b20:                                ; preds = %dec_label_pc_9b10, %dec_label_pc_9acc
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_9a40, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9b30 = load i32, i32* @r8, align 4
  store i32 %v0_9b30, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  %v7_9b40 = call i32 @function_10b38(i32 %v0_9b30, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_9a3c, i32 %v2_9b04)
  store i32 %v7_9b40, i32* %r2.global-to-local, align 4
  %v7_9b48 = icmp eq i32 %v7_9b40, -1
  store i1 %v7_9b48, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9b48, label %dec_label_pc_9d78, label %dec_label_pc_9b54

dec_label_pc_9b54:                                ; preds = %dec_label_pc_9b20
  store i32 %tmp38, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_9b68 = icmp eq i32 %v7_9b40, 40
  store i1 %v7_9b68, i1* %cpsr_z.global-to-local, align 1
  %tmp113 = icmp ult i32 %v7_9b40, 41
  br i1 %tmp113, label %.thread30, label %bb88

.thread30:                                        ; preds = %dec_label_pc_9b54
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9b10

bb88:                                             ; preds = %dec_label_pc_9b54
  store i1 %v9_9b70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b70, label %dec_label_pc_9b10, label %dec_label_pc_9b78

dec_label_pc_9b78:                                ; preds = %bb88
  store i32 %v4_9b7c, i32* %r1.global-to-local, align 4
  store i32 %v4_9b80, i32* %ip.global-to-local, align 4
  store i32 %v4_9b84, i32* %r2.global-to-local, align 4
  store i32 %v5_9b88, i32* %r3.global-to-local, align 4
  store i32 %v5_9b8c, i32* @r5, align 4
  store i1 %v9_9b90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b90, label %dec_label_pc_9b98, label %dec_label_pc_9b10

dec_label_pc_9b98:                                ; preds = %dec_label_pc_9b78
  store i32 %v4_9b98, i32* %r2.global-to-local, align 4
  store i32 %v1_9b9c, i32* %r3.global-to-local, align 4
  store i1 %v2_9ba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ba0, label %dec_label_pc_9e34, label %dec_label_pc_9ba8

dec_label_pc_9ba8:                                ; preds = %dec_label_pc_9b98
  store i1 %v2_9ba8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ba8, label %dec_label_pc_9b10, label %dec_label_pc_9bb0

dec_label_pc_9bb0:                                ; preds = %dec_label_pc_9ba8
  %v0_9bb0 = load i32, i32* @r7, align 4
  store i32 %v0_9bb0, i32* %r0.global-to-local, align 4
  %v1_9bb4 = call i32 @function_10660(i32 %v0_9bb0)
  store i32 %v1_9bb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9a1c

dec_label_pc_9bbc:                                ; preds = %dec_label_pc_9b10
  %v0_9bbc = load i32, i32* @r7, align 4
  store i32 %v0_9bbc, i32* %r0.global-to-local, align 4
  %v1_9bc0 = call i32 @function_10660(i32 %v0_9bbc)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9bd0 = call i32 @function_10bfc(i32 2, i32 1, i32 0)
  store i32 %v3_9bd0, i32* %r0.global-to-local, align 4
  %v3_9bd4 = icmp eq i32 %v3_9bd0, -1
  %v8_9bd4 = icmp eq i32 %v3_9bd0, -1
  store i1 %v8_9bd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9bd0, i32* @r7, align 4
  br i1 %v3_9bd4, label %dec_label_pc_9be0, label %dec_label_pc_9a4c

dec_label_pc_9be0:                                ; preds = %dec_label_pc_9bbc, %dec_label_pc_9a1c
  %stack_var_-56.5 = phi i32 [ %stack_var_-56.0, %dec_label_pc_9a1c ], [ %v0_9e40, %dec_label_pc_9bbc ]
  %v3_9be0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v1_97b4, i32* %lr.global-to-local, align 4
  %v1_9be8 = add i32 %v3_9be0, 1
  store i32 %v1_9be8, i32* %r3.global-to-local, align 4
  %v9_9bec = icmp eq i32 %v1_9be8, %v1_97b4
  store i1 %v9_9bec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9be8, i32* %stack_var_-40, align 4
  %v5_9bf4 = icmp slt i32 %v1_9be8, %v1_97b4
  br i1 %v5_9bf4, label %dec_label_pc_9a1c, label %dec_label_pc_9bf8.preheader

dec_label_pc_9bf8.preheader:                      ; preds = %.thread8, %dec_label_pc_9be0, %dec_label_pc_99e4.dec_label_pc_9bf8.preheader_crit_edge
  %v1_9c2c.pre-phi = phi i32 [ %.pre, %dec_label_pc_99e4.dec_label_pc_9bf8.preheader_crit_edge ], [ %v1_9a0c, %dec_label_pc_9be0 ], [ %v1_9a0c, %.thread8 ]
  %v1_9c10 = add i32 %v6_9960, 20
  %v3_9c14 = mul i32 %v1_9c10, 65536
  %tmp90 = mul i32 %v1_9c10, 256
  %v1_9c1c = and i32 %tmp90, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp91 = udiv i32 %v1_9c10, 256
  %v4_9c20 = urem i32 %tmp91, 256
  %v5_9c20 = or i32 %v4_9c20, %v1_9c1c
  %v2_9d50 = icmp eq i32 %v1_9980, 0
  %v3_9d3c = icmp eq i32 %v3_99ec, 65535
  br label %dec_label_pc_9bf8

dec_label_pc_9bf8:                                ; preds = %dec_label_pc_9bf8.preheader, %dec_label_pc_9e1c
  store i32 %v1_97b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_99f0, label %dec_label_pc_9e1c, label %dec_label_pc_9c0c

dec_label_pc_9c0c:                                ; preds = %dec_label_pc_9bf8
  store i32 %v1_9c10, i32* @sl, align 4
  store i32 %v3_9c14, i32* %r2.global-to-local, align 4
  store i32 %v5_9c20, i32* @fp, align 4
  store i32 %v6_9960, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_9c2c.pre-phi, i32* @sb, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_9d28

dec_label_pc_9c38:                                ; preds = %dec_label_pc_9d4c, %dec_label_pc_9d60
  %v0_9c38 = load i32, i32* @r7, align 4
  %v1_9c38 = trunc i32 %v0_9c38 to i8
  %v2_9c38 = load i32, i32* @r4, align 4
  %v3_9c38 = add i32 %v2_9c38, 10
  %v4_9c38 = inttoptr i32 %v3_9c38 to i8*
  store i8 %v1_9c38, i8* %v4_9c38, align 1
  %v0_9c3c = load i32, i32* @r7, align 4
  %v1_9c3c = trunc i32 %v0_9c3c to i8
  %v2_9c3c = load i32, i32* @r4, align 4
  %v3_9c3c = add i32 %v2_9c3c, 11
  %v4_9c3c = inttoptr i32 %v3_9c3c to i8*
  store i8 %v1_9c3c, i8* %v4_9c3c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9c44 = load i32, i32* @r4, align 4
  store i32 %v0_9c44, i32* @r0, align 4
  %v2_9c48 = call i32 @function_c6b0(i32 %v0_9c44, i32 20)
  %v3_9c48 = trunc i32 %v2_9c48 to i8
  store i32 %v2_9c48, i32* %r0.global-to-local, align 4
  %v3_9c4c = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_97e0, i32* %r2.global-to-local, align 4
  %v3_9c54 = mul i32 %v3_9c4c, 16
  %v2_9c58 = add i32 %v3_9c54, %v2_97e0
  store i32 %v2_9c58, i32* %r1.global-to-local, align 4
  %v1_9c5c = add i32 %v2_9c58, 4
  %v2_9c5c = inttoptr i32 %v1_9c5c to i32*
  %v3_9c5c = load i32, i32* %v2_9c5c, align 4
  %v3_9c60 = mul i32 %v3_9c5c, 65536
  store i32 %v3_9c60, i32* %ip.global-to-local, align 4
  %tmp92 = mul i32 %v3_9c5c, 256
  %v1_9c68 = and i32 %tmp92, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp93 = udiv i32 %v3_9c5c, 256
  %v4_9c6c = urem i32 %tmp93, 256
  %v5_9c6c = or i32 %v4_9c6c, %v1_9c68
  store i32 %v5_9c6c, i32* %r2.global-to-local, align 4
  %v1_9c70 = add i32 %v3_9c5c, 1
  store i32 %v1_9c70, i32* %r3.global-to-local, align 4
  store i32 %v1_9c70, i32* %v2_9c5c, align 4
  %v0_9c78 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c78 = load i32, i32* @r5, align 4
  %v2_9c78 = add i32 %v1_9c78, 4
  %v3_9c78 = inttoptr i32 %v2_9c78 to i32*
  store i32 %v0_9c78, i32* %v3_9c78, align 4
  %v0_9c7c = load i32, i32* %r1.global-to-local, align 4
  %v1_9c7c = add i32 %v0_9c7c, 8
  %v2_9c7c = inttoptr i32 %v1_9c7c to i32*
  %v3_9c7c = load i32, i32* %v2_9c7c, align 4
  %tmp94 = mul i32 %v3_9c7c, 256
  %v1_9c88 = and i32 %tmp94, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp95 = udiv i32 %v3_9c7c, 256
  %v4_9c8c = urem i32 %tmp95, 256
  %v5_9c8c = or i32 %v4_9c8c, %v1_9c88
  store i32 %v5_9c8c, i32* %r2.global-to-local, align 4
  %v4_9c9033 = udiv i32 %v2_9c48, 256
  %v1_9c94 = trunc i32 %v4_9c9033 to i8
  %v2_9c94 = load i32, i32* @r4, align 4
  %v3_9c94 = add i32 %v2_9c94, 11
  %v4_9c94 = inttoptr i32 %v3_9c94 to i8*
  store i8 %v1_9c94, i8* %v4_9c94, align 1
  %v3_9c98 = load i32, i32* @r4, align 4
  %v4_9c98 = add i32 %v3_9c98, 10
  %v5_9c98 = inttoptr i32 %v4_9c98 to i8*
  store i8 %v3_9c48, i8* %v5_9c98, align 1
  %v0_9c9c = load i32, i32* %r2.global-to-local, align 4
  %v1_9c9c = load i32, i32* @r5, align 4
  %v2_9c9c = add i32 %v1_9c9c, 8
  %v3_9c9c = inttoptr i32 %v2_9c9c to i32*
  store i32 %v0_9c9c, i32* %v3_9c9c, align 4
  %v0_9ca0 = load i32, i32* @r5, align 4
  store i32 %v0_9ca0, i32* @r1, align 4
  %v0_9ca4 = load i32, i32* @fp, align 4
  store i32 %v0_9ca4, i32* %r2.global-to-local, align 4
  %v0_9ca8 = load i32, i32* @sl, align 4
  store i32 %v0_9ca8, i32* %r3.global-to-local, align 4
  %v0_9cac = load i32, i32* @r4, align 4
  store i32 %v0_9cac, i32* %r0.global-to-local, align 4
  %v0_9cb0 = load i32, i32* @r7, align 4
  %v1_9cb0 = trunc i32 %v0_9cb0 to i8
  %v3_9cb0 = add i32 %v0_9ca0, 16
  %v4_9cb0 = inttoptr i32 %v3_9cb0 to i8*
  store i8 %v1_9cb0, i8* %v4_9cb0, align 1
  %v0_9cb4 = load i32, i32* @r7, align 4
  %v1_9cb4 = trunc i32 %v0_9cb4 to i8
  %v2_9cb4 = load i32, i32* @r5, align 4
  %v3_9cb4 = add i32 %v2_9cb4, 17
  %v4_9cb4 = inttoptr i32 %v3_9cb4 to i8*
  store i8 %v1_9cb4, i8* %v4_9cb4, align 1
  %v4_9cb8 = call i32 @function_c70c(i32 %v0_9cac, i32 %v0_9ca0, i32 %v0_9ca4, i32 %v0_9ca8)
  %v5_9cb8 = trunc i32 %v4_9cb8 to i8
  store i32 %v4_9cb8, i32* %r0.global-to-local, align 4
  %v4_9cbc34 = udiv i32 %v4_9cb8, 256
  %v1_9cc0 = trunc i32 %v4_9cbc34 to i8
  %v2_9cc0 = load i32, i32* @r5, align 4
  %v3_9cc0 = add i32 %v2_9cc0, 17
  %v4_9cc0 = inttoptr i32 %v3_9cc0 to i8*
  store i8 %v1_9cc0, i8* %v4_9cc0, align 1
  %v3_9cc4 = load i32, i32* @r5, align 4
  %v4_9cc4 = add i32 %v3_9cc4, 16
  %v5_9cc4 = inttoptr i32 %v4_9cc4 to i8*
  store i8 %v5_9cb8, i8* %v5_9cc4, align 1
  %v3_9cc8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9cc8, i32* %r3.global-to-local, align 4
  %v0_9ccc = load i32, i32* @r4, align 4
  %v1_9ccc = add i32 %v0_9ccc, 20
  %v2_9ccc = inttoptr i32 %v1_9ccc to i32*
  %v3_9ccc = load i32, i32* %v2_9ccc, align 4
  %v5_9cd4 = mul i32 %v3_9cc8, 24
  %v3_9cdc = udiv i32 %v3_9ccc, 65536
  store i32 %v3_9cdc, i32* %r2.global-to-local, align 4
  %v2_9ce0 = add i32 %v5_9cd4, %arg3
  store i32 %v2_9ce0, i32* %ip.global-to-local, align 4
  %v3_9ce45 = udiv i32 %v3_9ccc, 16777216
  %v1_9ce8 = trunc i32 %v3_9ce45 to i8
  %v3_9ce8 = add i32 %v2_9ce0, 3
  %v4_9ce8 = inttoptr i32 %v3_9ce8 to i8*
  store i8 %v1_9ce8, i8* %v4_9ce8, align 1
  %v0_9cec = load i32, i32* %r2.global-to-local, align 4
  %v1_9cec = trunc i32 %v0_9cec to i8
  %v2_9cec = load i32, i32* %ip.global-to-local, align 4
  %v3_9cec = add i32 %v2_9cec, 2
  %v4_9cec = inttoptr i32 %v3_9cec to i8*
  store i8 %v1_9cec, i8* %v4_9cec, align 1
  %v0_9cf0 = load i32, i32* @r4, align 4
  store i32 %v0_9cf0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9cf8 = load i32, i32* @r8, align 4
  store i32 %v0_9cf8, i32* %r0.global-to-local, align 4
  %v0_9cfc = load i32, i32* @sb, align 4
  store i32 %v0_9cfc, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_9d04 = load i32, i32* %ip.global-to-local, align 4
  %v6_9d0c = inttoptr i32 %v0_9cf0 to i32*
  %v7_9d0c = call i32 @function_10b98(i32 %v0_9cf8, i32* %v6_9d0c, i32 %v0_9cfc, i32 16384, i32 %v0_9d04, i32 16)
  %v3_9d10 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9d10, i32* %r3.global-to-local, align 4
  store i32 %v1_97b4, i32* %ip.global-to-local, align 4
  %v1_9d18 = add i32 %v3_9d10, 1
  store i32 %v1_9d18, i32* %r0.global-to-local, align 4
  %v9_9d1c = icmp eq i32 %v1_9d18, %v1_97b4
  store i1 %v9_9d1c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9d18, i32* %stack_var_-40, align 4
  %v6_9d24 = icmp slt i32 %v1_9d18, %v1_97b4
  br i1 %v6_9d24, label %dec_label_pc_9d28, label %dec_label_pc_9e1c

dec_label_pc_9d28:                                ; preds = %dec_label_pc_9c38, %dec_label_pc_9c0c
  %v1_9d34 = phi i32 [ %v1_9d18, %dec_label_pc_9c38 ], [ 0, %dec_label_pc_9c0c ]
  store i32 %v2_97f0, i32* %ip.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_99ec, i32* %lr.global-to-local, align 4
  %v4_9d34 = mul i32 %v1_9d34, 4
  %v5_9d34 = add i32 %v4_9d34, %v2_97f0
  %v6_9d34 = inttoptr i32 %v5_9d34 to i32*
  %v7_9d34 = load i32, i32* %v6_9d34, align 4
  store i32 %v7_9d34, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9d3c, i1* %cpsr_z.global-to-local, align 1
  %v1_9d40 = add i32 %v7_9d34, 40
  store i32 %v1_9d40, i32* @r6, align 4
  %v1_9d44 = add i32 %v7_9d34, 20
  store i32 %v1_9d44, i32* @r5, align 4
  br i1 %v3_9d3c, label %dec_label_pc_9e08, label %dec_label_pc_9d4c

dec_label_pc_9d4c:                                ; preds = %dec_label_pc_9d28, %dec_label_pc_9e08
  %v0_9d58 = phi i32 [ %v1_9d40, %dec_label_pc_9d28 ], [ %v0_9d58.pre, %dec_label_pc_9e08 ]
  store i1 %v2_9d50, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  store i32 %v0_9d58, i32* %r0.global-to-local, align 4
  br i1 %v2_9d50, label %dec_label_pc_9c38, label %dec_label_pc_9d60

dec_label_pc_9d60:                                ; preds = %dec_label_pc_9d4c
  %v2_9d60 = call i32 @function_d2dc(i32 %v0_9d58, i32 %v6_9960)
  store i32 %v2_9d60, i32* %r0.global-to-local, align 4
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  %v0_9d68 = load i32, i32* @r7, align 4
  %v1_9d68 = trunc i32 %v0_9d68 to i8
  %v2_9d68 = load i32, i32* @r6, align 4
  %v4_9d68 = add i32 %v2_9d68, %v6_9960
  %v5_9d68 = inttoptr i32 %v4_9d68 to i8*
  store i8 %v1_9d68, i8* %v5_9d68, align 1
  br label %dec_label_pc_9c38

dec_label_pc_9d70:                                ; preds = %dec_label_pc_99bc
  %v0_9d70 = load i32, i32* @r8, align 4
  store i32 %v0_9d70, i32* %r0.global-to-local, align 4
  %v1_9d74 = call i32 @function_10660(i32 %v0_9d70)
  store i32 %v1_9d74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d78

dec_label_pc_9d78:                                ; preds = %dec_label_pc_9b20, %dec_label_pc_9e1c, %dec_label_pc_97b0, %dec_label_pc_9d70
  %v29_9d7c = phi i32 [ %v3_99a4, %dec_label_pc_97b0 ], [ %v1_9d74, %dec_label_pc_9d70 ], [ %v2_9e20, %dec_label_pc_9e1c ], [ 0, %dec_label_pc_9b20 ]
  store i32 %v18_97b0, i32* %sb.global-to-local, align 4
  ret i32 %v29_9d7c

dec_label_pc_9d80:                                ; preds = %bb85
  %v1_9d80 = add i32 %v2_9a88, 16
  %v2_9d80 = inttoptr i32 %v1_9d80 to i32*
  %v3_9d80 = load i32, i32* %v2_9d80, align 4
  store i32 %v3_9d80, i32* @r4, align 4
  %v0_9d84 = call i32 @function_d228()
  store i32 %v0_9d84, i32* %r0.global-to-local, align 4
  %v3_9d88 = load i32, i32* %stack_var_-40, align 4
  %v5_9d90 = mul i32 %v3_9d88, 24
  %v0_9d98 = load i32, i32* @r4, align 4
  %v2_9d9c = add i32 %v5_9d90, %arg3
  store i32 %v2_9d9c, i32* %r1.global-to-local, align 4
  %v1_9d98 = udiv i32 %v0_9d98, 256
  %v3_9da0 = and i32 %v1_9d98, 65280
  store i32 %v3_9da0, i32* %r2.global-to-local, align 4
  %v1_9da4 = and i32 %v0_9d98, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9da4, i32* %r3.global-to-local, align 4
  %v3_9da8 = mul i32 %v0_9d98, 16777216
  %v4_9dac = mul i32 %v1_9da4, 256
  %v5_9dac = or i32 %v4_9dac, %v3_9da8
  store i32 %v5_9dac, i32* %ip.global-to-local, align 4
  %v1_9db0 = add i32 %v2_9d9c, 20
  %v2_9db0 = inttoptr i32 %v1_9db0 to i8*
  %v3_9db0 = load i8, i8* %v2_9db0, align 1
  %v4_9db0 = zext i8 %v3_9db0 to i32
  store i32 %v4_9db0, i32* %lr.global-to-local, align 4
  %v4_9db4 = udiv i32 %v0_9d98, 16777216
  %v5_9db4 = or i32 %v3_9da0, %v4_9db4
  %v2_9db8 = or i32 %v5_9db4, %v5_9dac
  %v7_9dbc = lshr i32 %v0_9d84, %v4_9db0
  %v8_9dbc = add i32 %v7_9dbc, %v2_9db8
  store i32 %v8_9dbc, i32* %r2.global-to-local, align 4
  %v3_9dc8 = mul i32 %v8_9dbc, 16777216
  %v1_9dcc = and i32 %v8_9dbc, 65280
  store i32 %v1_9dcc, i32* %r0.global-to-local, align 4
  %v4_9dd0 = mul nuw nsw i32 %v1_9dcc, 256
  %v5_9dd0 = or i32 %v4_9dd0, %v3_9dc8
  store i32 %v5_9dd0, i32* %r1.global-to-local, align 4
  %v2_9dd8 = call i32 @llvm.bswap.i32(i32 %v8_9dbc)
  store i32 %v3_99a8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9dec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9dec, label %dec_label_pc_9df4, label %dec_label_pc_9ab4

dec_label_pc_9df4:                                ; preds = %dec_label_pc_9d80, %dec_label_pc_9aa0
  %stack_var_-56.6 = phi i32 [ %v2_9dd8, %dec_label_pc_9d80 ], [ %v4_9a98.stack_var_-56.1, %dec_label_pc_9aa0 ]
  %v0_9df4 = call i32 @function_d228()
  %v1_9df4 = trunc i32 %v0_9df4 to i8
  store i32 %v0_9df4, i32* %r0.global-to-local, align 4
  %v4_9df8 = sdiv i32 %v0_9df4, 256
  store i32 %v4_9df8, i32* %r3.global-to-local, align 4
  %v1_9dfc = trunc i32 %v4_9df8 to i8
  br label %dec_label_pc_9acc

dec_label_pc_9e08:                                ; preds = %dec_label_pc_9d28
  %v0_9e08 = call i32 @function_d228()
  %v1_9e08 = trunc i32 %v0_9e08 to i8
  store i32 %v0_9e08, i32* %r0.global-to-local, align 4
  %v4_9e0c = sdiv i32 %v0_9e08, 256
  store i32 %v4_9e0c, i32* %r3.global-to-local, align 4
  %v1_9e10 = trunc i32 %v4_9e0c to i8
  %v2_9e10 = load i32, i32* @r4, align 4
  %v3_9e10 = add i32 %v2_9e10, 5
  %v4_9e10 = inttoptr i32 %v3_9e10 to i8*
  store i8 %v1_9e10, i8* %v4_9e10, align 1
  %v3_9e14 = load i32, i32* @r4, align 4
  %v4_9e14 = add i32 %v3_9e14, 4
  %v5_9e14 = inttoptr i32 %v4_9e14 to i8*
  store i8 %v1_9e08, i8* %v5_9e14, align 1
  %v0_9d58.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9d4c

dec_label_pc_9e1c:                                ; preds = %dec_label_pc_9c38, %dec_label_pc_9bf8
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9e20 = call i32 @function_10904(i32* null)
  store i32 %v2_9e20, i32* %r0.global-to-local, align 4
  store i32 %v2_9990, i32* %lr.global-to-local, align 4
  %v9_9e28 = icmp eq i32 %v2_9990, %v2_9e20
  store i1 %v9_9e28, i1* %cpsr_z.global-to-local, align 1
  %v6_9e2c = icmp slt i32 %v2_9990, %v2_9e20
  br i1 %v6_9e2c, label %dec_label_pc_9d78, label %dec_label_pc_9bf8

dec_label_pc_9e34:                                ; preds = %dec_label_pc_9b98
  %v3_9e34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9e34, i32* @r4, align 4
  store i32 %v2_97e0, i32* %r0.global-to-local, align 4
  %v3_9e3c = mul i32 %v3_9e34, 16
  store i32 %v3_9e3c, i32* %ip.global-to-local, align 4
  %v3_9e40 = add i32 %v3_9e3c, %v2_97e0
  %v4_9e40 = inttoptr i32 %v3_9e40 to i32*
  store i32 %v0_9e40, i32* %v4_9e40, align 4
  store i32 %stack_var_-336.0.ph, i32* %r1.global-to-local, align 4
  %v1_9e48 = add i32 %stack_var_-336.0.ph, 4
  %v2_9e48 = inttoptr i32 %v1_9e48 to i32*
  %v3_9e48 = load i32, i32* %v2_9e48, align 4
  store i32 %v3_9e48, i32* %r0.global-to-local, align 4
  %v1_9e50 = and i32 %v3_9e48, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9e50, i32* %r1.global-to-local, align 4
  %v3_9e54 = mul i32 %v3_9e48, 16777216
  %v1_9e4c = udiv i32 %v3_9e48, 256
  %v3_9e58 = and i32 %v1_9e4c, 65280
  %v4_9e5c = mul i32 %v1_9e50, 256
  %v4_9e60 = udiv i32 %v3_9e48, 16777216
  %v5_9e60 = or i32 %v4_9e60, %v3_9e54
  %v5_9e5c = or i32 %v5_9e60, %v4_9e5c
  %v2_9e64 = or i32 %v5_9e5c, %v3_9e58
  store i32 %v2_97e0, i32* %r2.global-to-local, align 4
  %v1_9e6c = load i32, i32* %ip.global-to-local, align 4
  %v2_9e6c = add i32 %v1_9e6c, %v2_97e0
  store i32 %v2_9e6c, i32* %ip.global-to-local, align 4
  %v2_9e70 = add i32 %v2_9e6c, 4
  %v3_9e70 = inttoptr i32 %v2_9e70 to i32*
  store i32 %v2_9e64, i32* %v3_9e70, align 4
  store i32 %stack_var_-336.0.ph, i32* %r3.global-to-local, align 4
  %v1_9e78 = add i32 %stack_var_-336.0.ph, 8
  %v2_9e78 = inttoptr i32 %v1_9e78 to i32*
  %v3_9e78 = load i32, i32* %v2_9e78, align 4
  store i32 %v3_9e78, i32* %r0.global-to-local, align 4
  %v1_9e80 = and i32 %v3_9e78, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9e80, i32* %r1.global-to-local, align 4
  %v3_9e84 = mul i32 %v3_9e78, 16777216
  %v1_9e7c = udiv i32 %v3_9e78, 256
  %v3_9e88 = and i32 %v1_9e7c, 65280
  %v4_9e8c = mul i32 %v1_9e80, 256
  %v5_9e8c = or i32 %v4_9e8c, %v3_9e84
  store i32 %v5_9e8c, i32* %r2.global-to-local, align 4
  %v4_9e90 = udiv i32 %v3_9e78, 16777216
  %v5_9e90 = or i32 %v3_9e88, %v4_9e90
  %v2_9e94 = or i32 %v5_9e90, %v5_9e8c
  store i32 %v2_9e94, i32* %r3.global-to-local, align 4
  %v1_9e98 = load i32, i32* %ip.global-to-local, align 4
  %v2_9e98 = add i32 %v1_9e98, 8
  %v3_9e98 = inttoptr i32 %v2_9e98 to i32*
  store i32 %v2_9e94, i32* %v3_9e98, align 4
  store i32 %stack_var_-336.0.ph, i32* %lr.global-to-local, align 4
  %v1_9ea0 = inttoptr i32 %stack_var_-336.0.ph to i32*
  %v2_9ea0 = load i32, i32* %v1_9ea0, align 4
  %v3_9ea4 = udiv i32 %v2_9ea0, 65536
  store i32 %v3_9ea4, i32* %r2.global-to-local, align 4
  %v3_9ea86 = udiv i32 %v2_9ea0, 16777216
  store i32 %v3_9ea86, i32* %r1.global-to-local, align 4
  %v0_9eac = load i32, i32* @r5, align 4
  %v3_9eac = sdiv i32 %v0_9eac, 256
  store i32 %v3_9eac, i32* %r3.global-to-local, align 4
  %v1_9eb0 = trunc i32 %v3_9eac to i8
  %v2_9eb0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9eb0 = add i32 %v2_9eb0, 15
  %v4_9eb0 = inttoptr i32 %v3_9eb0 to i8*
  store i8 %v1_9eb0, i8* %v4_9eb0, align 1
  %v0_9eb4 = load i32, i32* %r1.global-to-local, align 4
  %v1_9eb4 = trunc i32 %v0_9eb4 to i8
  %v2_9eb4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9eb4 = add i32 %v2_9eb4, 13
  %v4_9eb4 = inttoptr i32 %v3_9eb4 to i8*
  store i8 %v1_9eb4, i8* %v4_9eb4, align 1
  %v0_9eb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_9eb8 = trunc i32 %v0_9eb8 to i8
  %v2_9eb8 = load i32, i32* %ip.global-to-local, align 4
  %v3_9eb8 = add i32 %v2_9eb8, 12
  %v4_9eb8 = inttoptr i32 %v3_9eb8 to i8*
  store i8 %v1_9eb8, i8* %v4_9eb8, align 1
  %v0_9ebc = load i32, i32* @r5, align 4
  %v1_9ebc = trunc i32 %v0_9ebc to i8
  %v2_9ebc = load i32, i32* %ip.global-to-local, align 4
  %v3_9ebc = add i32 %v2_9ebc, 14
  %v4_9ebc = inttoptr i32 %v3_9ebc to i8*
  store i8 %v1_9ebc, i8* %v4_9ebc, align 1
  store i32 %v1_9a0c, i32* %r0.global-to-local, align 4
  %v1_9ec4 = call i32 @function_10d94(i32 %v1_9a0c)
  store i32 %v1_9ec4, i32* %r0.global-to-local, align 4
  store i32 %v2_97f0, i32* %r1.global-to-local, align 4
  %v3_9ecc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9ecc, i32* %r2.global-to-local, align 4
  %v2_9ed0 = load i32, i32* @r4, align 4
  %v5_9ed0 = mul i32 %v2_9ed0, 4
  %v6_9ed0 = add i32 %v5_9ed0, %v2_97f0
  %v7_9ed0 = inttoptr i32 %v6_9ed0 to i32*
  store i32 %v1_9ec4, i32* %v7_9ed0, align 4
  %v0_9ed4 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ed4 = load i32, i32* %r2.global-to-local, align 4
  %v4_9ed4 = mul i32 %v1_9ed4, 4
  %v5_9ed4 = add i32 %v4_9ed4, %v0_9ed4
  %v6_9ed4 = inttoptr i32 %v5_9ed4 to i32*
  %v7_9ed4 = load i32, i32* %v6_9ed4, align 4
  store i32 %v7_9ed4, i32* %r0.global-to-local, align 4
  %v1_9ed8 = inttoptr i32 %v7_9ed4 to i8*
  %v2_9ed8 = load i8, i8* %v1_9ed8, align 1
  %tmp114 = urem i8 %v2_9ed8, 16
  %v1_9edc = zext i8 %tmp114 to i32
  %v1_9ee0 = or i32 %v1_9edc, 64
  store i32 %v1_9ee0, i32* %r3.global-to-local, align 4
  %v1_9ee4 = trunc i32 %v1_9ee0 to i8
  store i8 %v1_9ee4, i8* %v1_9ed8, align 1
  store i32 %v3_99ec, i32* %ip.global-to-local, align 4
  %v0_9eec = load i32, i32* %r0.global-to-local, align 4
  %v1_9eec = inttoptr i32 %v0_9eec to i8*
  %v2_9eec = load i8, i8* %v1_9eec, align 1
  %v1_9ef8 = and i8 %v2_9eec, -16
  store i32 %v5_9efc, i32* %r3.global-to-local, align 4
  %v1_9f00 = or i8 %v1_9ef8, 5
  store i32 %v5_9888, i32* %ip.global-to-local, align 4
  store i32 %v1_9ef4, i32* %r1.global-to-local, align 4
  store i8 %v1_9f00, i8* %v1_9eec, align 1
  %v0_9f10 = load i32, i32* %r1.global-to-local, align 4
  %v1_9f10 = trunc i32 %v0_9f10 to i8
  %v2_9f10 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f10 = add i32 %v2_9f10, 5
  %v4_9f10 = inttoptr i32 %v3_9f10 to i8*
  store i8 %v1_9f10, i8* %v4_9f10, align 1
  store i32 %v6_9808, i32* %r1.global-to-local, align 4
  store i32 %v4_9f18, i32* %lr.global-to-local, align 4
  %v2_9f1c = load i32, i32* %r0.global-to-local, align 4
  %v3_9f1c = add i32 %v2_9f1c, 1
  %v4_9f1c = inttoptr i32 %v3_9f1c to i8*
  store i8 %v5_9828, i8* %v4_9f1c, align 1
  store i32 %v5_9864, i32* %r2.global-to-local, align 4
  %v0_9f24 = load i32, i32* %ip.global-to-local, align 4
  %v2_9f24 = icmp eq i32 %v0_9f24, 0
  store i1 %v2_9f24, i1* %cpsr_z.global-to-local, align 1
  %v0_9f28 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f28 = trunc i32 %v0_9f28 to i8
  %v2_9f28 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f28 = add i32 %v2_9f28, 4
  %v4_9f28 = inttoptr i32 %v3_9f28 to i8*
  store i8 %v1_9f28, i8* %v4_9f28, align 1
  %v0_9f2c = load i32, i32* %r0.global-to-local, align 4
  %v1_9f2c = add i32 %v0_9f2c, 20
  store i32 %v1_9f2c, i32* %r3.global-to-local, align 4
  %v0_9f30 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f30 = trunc i32 %v0_9f30 to i8
  %v3_9f30 = add i32 %v0_9f2c, 8
  %v4_9f30 = inttoptr i32 %v3_9f30 to i8*
  store i8 %v1_9f30, i8* %v4_9f30, align 1
  %v0_9f34 = load i32, i32* %r3.global-to-local, align 4
  %v0_9f38 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f38, label %.thread7, label %bb97

bb97:                                             ; preds = %dec_label_pc_9e34
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9f3c = load i32, i32* %r0.global-to-local, align 4
  %v4_9f3c = add i32 %v3_9f3c, 6
  %v5_9f3c = inttoptr i32 %v4_9f3c to i8*
  store i8 64, i8* %v5_9f3c, align 1
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_9e34, %bb97
  %v2_9f44 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f44 = add i32 %v2_9f44, 9
  %v4_9f44 = inttoptr i32 %v3_9f44 to i8*
  store i8 6, i8* %v4_9f44, align 1
  %v2_9f4c = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_9f4c, i32* %r3.global-to-local, align 4
  %v1_9f50 = load i32, i32* %r0.global-to-local, align 4
  %v2_9f50 = add i32 %v1_9f50, 12
  %v3_9f50 = inttoptr i32 %v2_9f50 to i32*
  store i32 %v2_9f4c, i32* %v3_9f50, align 4
  %v0_9f54 = load i32, i32* %lr.global-to-local, align 4
  %v1_9f54 = trunc i32 %v0_9f54 to i8
  %v2_9f54 = load i32, i32* %r0.global-to-local, align 4
  %v3_9f54 = add i32 %v2_9f54, 3
  %v4_9f54 = inttoptr i32 %v3_9f54 to i8*
  store i8 %v1_9f54, i8* %v4_9f54, align 1
  %v3_9f58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9f58, i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* %lr.global-to-local, align 4
  %v4_9f60 = mul i32 %v3_9f58, 16
  %v5_9f60 = add i32 %v4_9f60, %v2_97e0
  %v6_9f60 = inttoptr i32 %v5_9f60 to i32*
  %v7_9f60 = load i32, i32* %v6_9f60, align 4
  store i32 %v7_9f60, i32* %r3.global-to-local, align 4
  %v0_9f64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9f64, label %.thread8, label %bb98

bb98:                                             ; preds = %.thread7
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9f68 = load i32, i32* %r0.global-to-local, align 4
  %v4_9f68 = add i32 %v3_9f68, 7
  %v5_9f68 = inttoptr i32 %v4_9f68 to i8*
  store i8 0, i8* %v5_9f68, align 1
  br label %.thread8

.thread8:                                         ; preds = %.thread7, %bb98
  %v0_9f6c = load i32, i32* @fp, align 4
  %v1_9f6c = trunc i32 %v0_9f6c to i8
  %v2_9f6c = load i32, i32* %r0.global-to-local, align 4
  %v3_9f6c = add i32 %v2_9f6c, 2
  %v4_9f6c = inttoptr i32 %v3_9f6c to i8*
  store i8 %v1_9f6c, i8* %v4_9f6c, align 1
  %v0_9f70 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f70 = load i32, i32* %r0.global-to-local, align 4
  %v2_9f70 = add i32 %v1_9f70, 16
  %v3_9f70 = inttoptr i32 %v2_9f70 to i32*
  store i32 %v0_9f70, i32* %v3_9f70, align 4
  %v0_9f74 = load i32, i32* %r2.global-to-local, align 4
  %v3_9f74 = mul i32 %v0_9f74, 16
  %v1_9f78 = load i32, i32* %lr.global-to-local, align 4
  %v2_9f78 = add i32 %v1_9f78, %v3_9f74
  store i32 %v2_9f78, i32* %r2.global-to-local, align 4
  %v1_9f7c = add i32 %v2_9f78, 13
  %v2_9f7c = inttoptr i32 %v1_9f7c to i8*
  %v3_9f7c = load i8, i8* %v2_9f7c, align 1
  %v4_9f7c = zext i8 %v3_9f7c to i32
  store i32 %v4_9f7c, i32* %r1.global-to-local, align 4
  %v1_9f80 = add i32 %v2_9f78, 12
  %v2_9f80 = inttoptr i32 %v1_9f80 to i8*
  %v3_9f80 = load i8, i8* %v2_9f80, align 1
  %v4_9f80 = zext i8 %v3_9f80 to i32
  %v4_9f84 = mul nuw nsw i32 %v4_9f7c, 256
  %v5_9f84 = or i32 %v4_9f80, %v4_9f84
  store i32 %v5_9f84, i32* %r3.global-to-local, align 4
  %v0_9f88 = load i32, i32* %r0.global-to-local, align 4
  %v1_9f88 = add i32 %v0_9f88, 40
  store i32 %v1_9f88, i32* @r4, align 4
  %v3_9f8c = add i32 %v0_9f88, 20
  %v4_9f8c = inttoptr i32 %v3_9f8c to i8*
  store i8 %v3_9f80, i8* %v4_9f8c, align 1
  store i32 %v0_9f34, i32* %r0.global-to-local, align 4
  %v0_9f94 = load i32, i32* %r3.global-to-local, align 4
  %v3_9f94 = sdiv i32 %v0_9f94, 256
  store i32 %v3_9f94, i32* %r3.global-to-local, align 4
  %v1_9f98 = trunc i32 %v3_9f94 to i8
  %v3_9f98 = add i32 %v0_9f34, 1
  %v4_9f98 = inttoptr i32 %v3_9f98 to i8*
  store i8 %v1_9f98, i8* %v4_9f98, align 1
  %v0_9f9c = load i32, i32* %r2.global-to-local, align 4
  %v1_9f9c = add i32 %v0_9f9c, 8
  %v2_9f9c = inttoptr i32 %v1_9f9c to i32*
  %v3_9f9c = load i32, i32* %v2_9f9c, align 4
  store i32 %v3_9f9c, i32* %r1.global-to-local, align 4
  store i32 %v0_9f34, i32* %lr.global-to-local, align 4
  %v0_9fa4 = load i32, i32* %r0.global-to-local, align 4
  %v1_9fa4 = add i32 %v0_9fa4, 13
  %v2_9fa4 = inttoptr i32 %v1_9fa4 to i8*
  %v3_9fa4 = load i8, i8* %v2_9fa4, align 1
  %v4_9fa4 = zext i8 %v3_9fa4 to i32
  store i32 %v4_9fa4, i32* %r3.global-to-local, align 4
  %v1_9fa8 = add i32 %v0_9f9c, 15
  %v2_9fa8 = inttoptr i32 %v1_9fa8 to i8*
  %v3_9fa8 = load i8, i8* %v2_9fa8, align 1
  %v4_9fa8 = zext i8 %v3_9fa8 to i32
  store i32 %v4_9fa8, i32* %ip.global-to-local, align 4
  %v1_9fac = add i32 %v0_9f9c, 14
  %v2_9fac = inttoptr i32 %v1_9fac to i8*
  %v3_9fac = load i8, i8* %v2_9fac, align 1
  %v4_9fac = zext i8 %v3_9fac to i32
  store i32 %v4_9fac, i32* %r0.global-to-local, align 4
  %v2_9fb0 = add i32 %v0_9f34, 4
  %v3_9fb0 = inttoptr i32 %v2_9fb0 to i32*
  store i32 %v3_9f9c, i32* %v3_9fb0, align 4
  store i32 %v0_9f34, i32* %r1.global-to-local, align 4
  %v0_9fb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9fb8 = or i32 %v0_9fb8, 1
  store i32 %v1_9fb8, i32* %r3.global-to-local, align 4
  %v0_9fbc = load i32, i32* %r2.global-to-local, align 4
  %v1_9fbc = add i32 %v0_9fbc, 4
  %v2_9fbc = inttoptr i32 %v1_9fbc to i32*
  %v3_9fbc = load i32, i32* %v2_9fbc, align 4
  store i32 %v3_9fbc, i32* %lr.global-to-local, align 4
  %v1_9fc0 = trunc i32 %v1_9fb8 to i8
  %v3_9fc0 = add i32 %v0_9f34, 13
  %v4_9fc0 = inttoptr i32 %v3_9fc0 to i8*
  store i8 %v1_9fc0, i8* %v4_9fc0, align 1
  %v0_9fc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fc4 = add i32 %v0_9fc4, 12
  %v2_9fc4 = inttoptr i32 %v1_9fc4 to i8*
  %v3_9fc4 = load i8, i8* %v2_9fc4, align 1
  %v4_9fc4 = zext i8 %v3_9fc4 to i32
  store i32 %v4_9fc4, i32* %r2.global-to-local, align 4
  %v1_9fc8 = add i32 %v0_9fc4, 13
  %v2_9fc8 = inttoptr i32 %v1_9fc8 to i8*
  %v3_9fc8 = load i8, i8* %v2_9fc8, align 1
  %v4_9fc8 = zext i8 %v3_9fc8 to i32
  %v0_9fcc = load i32, i32* %r0.global-to-local, align 4
  %v1_9fcc = load i32, i32* %ip.global-to-local, align 4
  %v4_9fcc = mul i32 %v1_9fcc, 256
  %v5_9fcc = or i32 %v4_9fcc, %v0_9fcc
  store i32 %v5_9fcc, i32* %r0.global-to-local, align 4
  %tmp115 = urem i8 %v3_9fc4, 16
  %v1_9fd0 = zext i8 %tmp115 to i32
  store i32 %v0_9f34, i32* %ip.global-to-local, align 4
  %v3_9fd8 = sdiv i32 %v5_9fcc, 256
  store i32 %v3_9fd8, i32* %r1.global-to-local, align 4
  %v1_9fdc = or i32 %v1_9fd0, 128
  store i32 %v1_9fdc, i32* %r2.global-to-local, align 4
  %v1_9fe0 = or i32 %v4_9fc8, 16
  store i32 %v1_9fe0, i32* %r3.global-to-local, align 4
  %v1_9fe4 = trunc i32 %v3_9fd8 to i8
  %v3_9fe4 = add i32 %v0_9f34, 3
  %v4_9fe4 = inttoptr i32 %v3_9fe4 to i8*
  store i8 %v1_9fe4, i8* %v4_9fe4, align 1
  %v0_9fe8 = load i32, i32* %lr.global-to-local, align 4
  %v1_9fe8 = load i32, i32* %ip.global-to-local, align 4
  %v2_9fe8 = add i32 %v1_9fe8, 8
  %v3_9fe8 = inttoptr i32 %v2_9fe8 to i32*
  store i32 %v0_9fe8, i32* %v3_9fe8, align 4
  %v0_9fec = load i32, i32* %r2.global-to-local, align 4
  %v1_9fec = trunc i32 %v0_9fec to i8
  %v2_9fec = load i32, i32* %ip.global-to-local, align 4
  %v3_9fec = add i32 %v2_9fec, 12
  %v4_9fec = inttoptr i32 %v3_9fec to i8*
  store i8 %v1_9fec, i8* %v4_9fec, align 1
  %v0_9ff0 = load i32, i32* %r3.global-to-local, align 4
  %v1_9ff0 = trunc i32 %v0_9ff0 to i8
  %v2_9ff0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ff0 = add i32 %v2_9ff0, 13
  %v4_9ff0 = inttoptr i32 %v3_9ff0 to i8*
  store i8 %v1_9ff0, i8* %v4_9ff0, align 1
  %v0_9ff4 = load i32, i32* %r0.global-to-local, align 4
  %v1_9ff4 = trunc i32 %v0_9ff4 to i8
  %v2_9ff4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ff4 = add i32 %v2_9ff4, 2
  %v4_9ff4 = inttoptr i32 %v3_9ff4 to i8*
  store i8 %v1_9ff4, i8* %v4_9ff4, align 1
  %v0_9ff8 = call i32 @function_d228()
  %v1_9ff8 = trunc i32 %v0_9ff8 to i8
  store i32 %v0_9ff8, i32* %r0.global-to-local, align 4
  store i32 %v0_9f34, i32* %lr.global-to-local, align 4
  store i32 %v1_98a8, i32* %r1.global-to-local, align 4
  %v3_a004 = load i8, i8* %v4_9fc0, align 1
  %v4_a004 = zext i8 %v3_a004 to i32
  store i32 %v1_a008, i32* %r2.global-to-local, align 4
  %v1_a00c = and i32 %v4_a004, 223
  %v5_a010 = or i32 %v1_a00c, %v4_a010
  store i32 %v5_a010, i32* %r3.global-to-local, align 4
  %v1_a014 = trunc i32 %v5_a010 to i8
  store i8 %v1_a014, i8* %v4_9fc0, align 1
  store i32 %v1_98c8, i32* %ip.global-to-local, align 4
  %v0_a01c = load i32, i32* %lr.global-to-local, align 4
  %v1_a01c = add i32 %v0_a01c, 13
  %v2_a01c = inttoptr i32 %v1_a01c to i8*
  %v3_a01c = load i8, i8* %v2_a01c, align 1
  %v4_a01c = zext i8 %v3_a01c to i32
  store i32 %v1_a020, i32* %r3.global-to-local, align 4
  %v1_a024 = and i32 %v4_a01c, 239
  %v5_a028 = or i32 %v1_a024, %v4_a028
  store i32 %v5_a028, i32* %r2.global-to-local, align 4
  %v1_a02c = trunc i32 %v5_a028 to i8
  store i8 %v1_a02c, i8* %v2_a01c, align 1
  %v0_a030 = load i32, i32* %lr.global-to-local, align 4
  %v1_a030 = add i32 %v0_a030, 13
  %v2_a030 = inttoptr i32 %v1_a030 to i8*
  %v3_a030 = load i8, i8* %v2_a030, align 1
  %v4_a030 = zext i8 %v3_a030 to i32
  store i32 %v1_98e8, i32* %lr.global-to-local, align 4
  store i32 %v0_9f34, i32* %r1.global-to-local, align 4
  store i32 %v1_a03c, i32* %r2.global-to-local, align 4
  %v1_a040 = and i32 %v4_a030, 247
  %v5_a044 = or i32 %v1_a040, %v4_a044
  store i32 %v5_a044, i32* %r3.global-to-local, align 4
  %v1_a048 = trunc i32 %v5_a044 to i8
  store i8 %v1_a048, i8* %v4_9fc0, align 1
  store i32 %v1_9908, i32* %ip.global-to-local, align 4
  %v0_a050 = load i32, i32* %r1.global-to-local, align 4
  %v1_a050 = add i32 %v0_a050, 13
  %v2_a050 = inttoptr i32 %v1_a050 to i8*
  %v3_a050 = load i8, i8* %v2_a050, align 1
  %v4_a050 = zext i8 %v3_a050 to i32
  store i32 %v1_a054, i32* %r3.global-to-local, align 4
  %v1_a058 = and i32 %v4_a050, 251
  %v5_a05c = or i32 %v1_a058, %v4_a05c
  store i32 %v5_a05c, i32* %r2.global-to-local, align 4
  %v1_a060 = trunc i32 %v5_a05c to i8
  store i8 %v1_a060, i8* %v2_a050, align 1
  store i32 %v1_9928, i32* %lr.global-to-local, align 4
  %v0_a068 = load i32, i32* %r1.global-to-local, align 4
  %v1_a068 = add i32 %v0_a068, 13
  %v2_a068 = inttoptr i32 %v1_a068 to i8*
  %v3_a068 = load i8, i8* %v2_a068, align 1
  %v4_a068 = zext i8 %v3_a068 to i32
  store i32 %v1_a06c, i32* %r2.global-to-local, align 4
  %v1_a070 = and i32 %v4_a068, 253
  %v4_a074 = or i32 %v1_a070, %v3_a074
  store i32 %v4_a074, i32* %r3.global-to-local, align 4
  %v1_a078 = trunc i32 %v4_a074 to i8
  store i8 %v1_a078, i8* %v2_a068, align 1
  %v0_a07c = load i32, i32* %r1.global-to-local, align 4
  %v1_a07c = add i32 %v0_a07c, 13
  %v2_a07c = inttoptr i32 %v1_a07c to i8*
  %v3_a07c = load i8, i8* %v2_a07c, align 1
  %v4_a07c = zext i8 %v3_a07c to i32
  %v1_a084 = and i32 %v4_a07c, 254
  %v2_a08c = or i32 %v1_a084, %v1_a088
  store i32 %v2_a08c, i32* %r3.global-to-local, align 4
  store i32 %v0_9f34, i32* %r2.global-to-local, align 4
  %v4_a094 = sdiv i32 %v0_9ff8, 256
  store i32 %v4_a094, i32* %r1.global-to-local, align 4
  %v1_a098 = trunc i32 %v2_a08c to i8
  store i8 %v1_a098, i8* %v4_9fc0, align 1
  %v0_a09c = load i32, i32* %r1.global-to-local, align 4
  %v1_a09c = trunc i32 %v0_a09c to i8
  %v2_a09c = load i32, i32* %r2.global-to-local, align 4
  %v3_a09c = add i32 %v2_a09c, 15
  %v4_a09c = inttoptr i32 %v3_a09c to i8*
  store i8 %v1_a09c, i8* %v4_a09c, align 1
  %v3_a0a0 = load i32, i32* %r2.global-to-local, align 4
  %v4_a0a0 = add i32 %v3_a0a0, 14
  %v5_a0a0 = inttoptr i32 %v4_a0a0 to i8*
  store i8 %v1_9ff8, i8* %v5_a0a0, align 1
  store i32 %v6_9960, i32* %r1.global-to-local, align 4
  %v0_a0a8 = load i32, i32* @r4, align 4
  store i32 %v0_a0a8, i32* %r0.global-to-local, align 4
  %v2_a0ac = call i32 @function_d2dc(i32 %v0_a0a8, i32 %v6_9960)
  store i32 %v2_a0ac, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a0b8 = load i32, i32* @r4, align 4
  %v4_a0b8 = add i32 %v2_a0b8, %v6_9960
  %v5_a0b8 = inttoptr i32 %v4_a0b8 to i8*
  store i8 0, i8* %v5_a0b8, align 1
  %v3_a0bc = load i32, i32* %stack_var_-40, align 4
  store i32 %v1_97b4, i32* %lr.global-to-local, align 4
  %v1_a0c4 = add i32 %v3_a0bc, 1
  store i32 %v1_a0c4, i32* %r3.global-to-local, align 4
  %v9_a0c8 = icmp eq i32 %v1_a0c4, %v1_97b4
  store i1 %v9_a0c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a0c4, i32* %stack_var_-40, align 4
  %v5_a0d0 = icmp slt i32 %v1_a0c4, %v1_97b4
  br i1 %v5_a0d0, label %dec_label_pc_9a1c.outer, label %dec_label_pc_9bf8.preheader

; uselistorder directives
  uselistorder i32 %v1_a0c4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9ff8, { 0, 2, 1 }
  uselistorder i32 %v3_9fd8, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0, 2 }
  uselistorder i32 %v3_9f94, { 1, 0 }
  uselistorder i32 %v0_9f34, { 5, 6, 7, 0, 8, 1, 9, 2, 10, 3, 11, 4 }
  uselistorder i32 %v3_9eac, { 1, 0 }
  uselistorder i32 %v3_9e78, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_9e48, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_9e3c, { 1, 0 }
  uselistorder i32 %v2_9e20, { 1, 2, 3, 0 }
  uselistorder i32 %v4_9e0c, { 1, 0 }
  uselistorder i32 %v0_9e08, { 0, 2, 1 }
  uselistorder i32 %v4_9df8, { 1, 0 }
  uselistorder i32 %v0_9df4, { 0, 2, 1 }
  uselistorder i32 %v8_9dbc, { 1, 2, 0, 3 }
  uselistorder i32 %v0_9d98, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9d58, { 1, 0 }
  uselistorder i32 %v7_9d34, { 1, 0, 2 }
  uselistorder i32 %v1_9d18, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_9cb8, { 0, 2, 1 }
  uselistorder i32 %v0_9ca0, { 1, 0, 2 }
  uselistorder i32 %v3_9c7c, { 1, 0 }
  uselistorder i32 %v3_9c5c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9c48, { 0, 2, 1 }
  uselistorder i1 %v3_9d3c, { 1, 0 }
  uselistorder i32 %v1_9c10, { 3, 2, 0, 1 }
  uselistorder i32 %v1_9be8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9bd0, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_9b48, { 1, 0 }
  uselistorder i32 %v7_9b40, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9b8c, { 1, 0 }
  uselistorder i1 %v9_9b70, { 1, 0 }
  uselistorder i32 %v4_9b84, { 1, 0 }
  uselistorder i32 %v4_9b80, { 1, 0 }
  uselistorder i32 %v0_9e40, { 2, 0, 5, 3, 1, 4 }
  uselistorder i1 %v7_9a90, { 1, 0, 2 }
  uselistorder i1 %v7_9a38, { 1, 0 }
  uselistorder i32 %v3_9a34, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-56.0, { 1, 0 }
  uselistorder i32 %stack_var_-336.0.ph, { 4, 5, 2, 3, 0, 1 }
  uselistorder i32 %v1_a06c, { 1, 0 }
  uselistorder i32 %v1_a054, { 1, 0 }
  uselistorder i32 %v1_a020, { 1, 0 }
  uselistorder i32 %v1_9ef4, { 1, 0 }
  uselistorder i32 %v1_9ab8, { 1, 0 }
  uselistorder i32 %v5_9b88, { 1, 0 }
  uselistorder i32 %v1_a03c, { 1, 0 }
  uselistorder i32 %v1_a008, { 1, 0 }
  uselistorder i1 %v2_9ba0, { 1, 0 }
  uselistorder i32 %v1_9b9c, { 1, 0 }
  uselistorder i32 %v4_9b98, { 2, 0, 1 }
  uselistorder i32 %v4_9b7c, { 1, 0 }
  uselistorder i32 %v1_9af0, { 2, 1, 0 }
  uselistorder i1 %v3_9dec, { 1, 0, 2, 3 }
  uselistorder i32 %v1_9a0c, { 6, 5, 3, 4, 7, 0, 1, 2, 8 }
  uselistorder i32 %v3_9a04, { 1, 0, 2 }
  uselistorder i1 %v2_99f0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_99ec, { 1, 2, 3, 0 }
  uselistorder i32 %v0_99e8, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99dc, { 1, 0 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v3_99a8, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_99a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_9990, { 2, 1, 0 }
  uselistorder i32 %v1_9980, { 1, 0 }
  uselistorder i32 %v6_9960, { 0, 5, 4, 1, 6, 8, 7, 9, 10, 3, 2 }
  uselistorder i32 %v1_9948, { 1, 0 }
  uselistorder i32 %v1_9928, { 1, 2, 0 }
  uselistorder i32 %v1_9908, { 1, 2, 0 }
  uselistorder i32 %v1_98e8, { 1, 2, 0 }
  uselistorder i32 %v1_98c8, { 1, 2, 0 }
  uselistorder i32 %v1_98a8, { 1, 2, 0 }
  uselistorder i32 %v6_9808, { 2, 1, 3, 0 }
  uselistorder i32 %v2_97f0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_97e0, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 %v1_97b4, { 12, 13, 14, 6, 7, 8, 5, 9, 10, 11, 15, 4, 2, 3, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 18, 16, 17 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 51, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 56, 55, 57, 59, 58, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 23, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 24, 25, 26, 27, 30, 29, 31, 33, 32, 34, 36, 35, 38, 42, 37, 39, 41, 40, 45, 43, 44, 46, 47, 48, 51, 49, 52, 53, 50, 54, 57, 55, 56, 58, 59, 63, 60, 61, 62, 64, 66, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 24, 25, 26, 27, 28, 30, 31, 45, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 9, 7, 10, 11, 12, 13, 14, 15, 17, 0, 18, 19, 16, 20, 21, 22, 23, 24, 25 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_9d78, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_9d4c, { 1, 0 }
  uselistorder label %dec_label_pc_9c38, { 1, 0 }
  uselistorder label %dec_label_pc_9bf8, { 1, 0 }
  uselistorder label %dec_label_pc_9b10, { 2, 1, 3, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %dec_label_pc_9a4c, { 1, 0 }
}

define i32 @function_a0dc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a0dc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_a0dc = load i32, i32* @sb, align 4
  %v24_a0dc = load i32, i32* @fp, align 4
  %v1_a0e0 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a0fc = urem i32 %arg4, 256
  store i32 %v1_a0fc, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a10c = call i32 @function_10ee8(i32 %v1_a0e0, i32 4)
  %v0_a110 = load i32, i32* @r5, align 4
  store i32 %v0_a110, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a11c = load i32, i32* @r7, align 4
  store i32 %v0_a11c, i32* %r3.global-to-local, align 4
  %v0_a120 = load i32, i32* @r4, align 4
  %v5_a124 = inttoptr i32 %v0_a110 to i32*
  %v6_a124 = call i32 @function_829c(i32 %v0_a120, i32* %v5_a124, i32 2, i32 %v0_a11c, i32 %v2_a10c)
  %v1_a130 = urem i32 %v6_a124, 256
  store i32 %v1_a130, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a13c = load i32, i32* @r5, align 4
  store i32 %v0_a13c, i32* %r1.global-to-local, align 4
  %v0_a140 = load i32, i32* @r4, align 4
  %v5_a144 = trunc i32 %v6_a124 to i8
  %v6_a148 = inttoptr i32 %v0_a13c to i32*
  %v7_a148 = call i32 @function_829c(i32 %v0_a140, i32* %v6_a148, i32 3, i32 65535, i32 %v6_a124)
  %v0_a14c = load i32, i32* @r5, align 4
  store i32 %v0_a14c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a15c = load i32, i32* @r4, align 4
  %v5_a160 = inttoptr i32 %v0_a14c to i32*
  %v6_a160 = call i32 @function_829c(i32 %v0_a15c, i32* %v5_a160, i32 4, i32 64, i32 %v7_a148)
  %v1_a168 = urem i32 %v6_a160, 256
  store i32 %v1_a168, i32* %ip.global-to-local, align 4
  %v0_a16c = load i32, i32* @r5, align 4
  store i32 %v0_a16c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_a174 = load i32, i32* @r7, align 4
  store i32 %v0_a174, i32* %r3.global-to-local, align 4
  %v0_a178 = load i32, i32* @r4, align 4
  %v5_a17c = trunc i32 %v6_a160 to i8
  %v6_a180 = inttoptr i32 %v0_a16c to i32*
  %v7_a180 = call i32 @function_829c(i32 %v0_a178, i32* %v6_a180, i32 5, i32 %v0_a174, i32 %v6_a160)
  %v1_a18c = urem i32 %v7_a180, 256
  store i32 %v1_a18c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a198 = load i32, i32* @r5, align 4
  store i32 %v0_a198, i32* %r1.global-to-local, align 4
  %v0_a19c = load i32, i32* @r4, align 4
  %v5_a1a4 = inttoptr i32 %v0_a198 to i32*
  %v6_a1a4 = call i32 @function_829c(i32 %v0_a19c, i32* %v5_a1a4, i32 6, i32 65535, i32 %v1_a18c)
  %v0_a1ac = load i32, i32* @r5, align 4
  store i32 %v0_a1ac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a1a4, i32* %sb.global-to-local, align 4
  %v0_a1bc = load i32, i32* @r4, align 4
  %v5_a1c0 = inttoptr i32 %v0_a1ac to i32*
  %v6_a1c0 = call i32 @function_829c(i32 %v0_a1bc, i32* %v5_a1c0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a1cc = load i32, i32* @r5, align 4
  store i32 %v0_a1cc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a1d8 = load i32, i32* @r4, align 4
  %v5_a1dc = inttoptr i32 %v0_a1cc to i32*
  %v6_a1dc = call i32 @function_829c(i32 %v0_a1d8, i32* %v5_a1dc, i32 16, i32 65535, i32 %v6_a1c0)
  %v0_a1e8 = load i32, i32* @r5, align 4
  store i32 %v0_a1e8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_a1f4 = load i32, i32* @r4, align 4
  %v5_a1f8 = inttoptr i32 %v0_a1e8 to i32*
  %v6_a1f8 = call i32 @function_829c(i32 %v0_a1f4, i32* %v5_a1f8, i32 17, i32 65535, i32 %v6_a1dc)
  %v0_a1fc = load i32, i32* @r5, align 4
  store i32 %v0_a1fc, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_a208 = load i32, i32* @r7, align 4
  store i32 %v0_a208, i32* %r3.global-to-local, align 4
  %v0_a20c = load i32, i32* @r4, align 4
  %v5_a210 = inttoptr i32 %v0_a1fc to i32*
  %v6_a210 = call i32 @function_829c(i32 %v0_a20c, i32* %v5_a210, i32 10, i32 %v0_a208, i32 %v6_a1f8)
  %v0_a214 = load i32, i32* @r5, align 4
  store i32 %v0_a214, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a224 = load i32, i32* @r4, align 4
  %v5_a228 = inttoptr i32 %v0_a214 to i32*
  %v6_a228 = call i32 @function_829c(i32 %v0_a224, i32* %v5_a228, i32 11, i32 1, i32 %v6_a210)
  %v0_a22c = load i32, i32* @r5, align 4
  store i32 %v0_a22c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_a238 = load i32, i32* @r7, align 4
  store i32 %v0_a238, i32* %r3.global-to-local, align 4
  %v0_a23c = load i32, i32* @r4, align 4
  %v5_a240 = inttoptr i32 %v0_a22c to i32*
  %v6_a240 = call i32 @function_829c(i32 %v0_a23c, i32* %v5_a240, i32 12, i32 %v0_a238, i32 %v6_a228)
  %v0_a244 = load i32, i32* @r5, align 4
  store i32 %v0_a244, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_a250 = load i32, i32* @r7, align 4
  store i32 %v0_a250, i32* %r3.global-to-local, align 4
  %v0_a254 = load i32, i32* @r4, align 4
  %v5_a258 = inttoptr i32 %v0_a244 to i32*
  %v6_a258 = call i32 @function_829c(i32 %v0_a254, i32* %v5_a258, i32 13, i32 %v0_a250, i32 %v6_a240)
  %v0_a25c = load i32, i32* @r5, align 4
  store i32 %v0_a25c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_a268 = load i32, i32* @r7, align 4
  store i32 %v0_a268, i32* %r3.global-to-local, align 4
  %v0_a26c = load i32, i32* @r4, align 4
  %v5_a270 = inttoptr i32 %v0_a25c to i32*
  %v6_a270 = call i32 @function_829c(i32 %v0_a26c, i32* %v5_a270, i32 14, i32 %v0_a268, i32 %v6_a258)
  %v0_a274 = load i32, i32* @r5, align 4
  store i32 %v0_a274, i32* %r1.global-to-local, align 4
  %v0_a27c = load i32, i32* @r7, align 4
  store i32 %v0_a27c, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_a284 = load i32, i32* @r4, align 4
  %v5_a288 = inttoptr i32 %v0_a274 to i32*
  %v6_a288 = call i32 @function_829c(i32 %v0_a284, i32* %v5_a288, i32 15, i32 %v0_a27c, i32 %v6_a270)
  %v0_a28c = load i32, i32* @r5, align 4
  store i32 %v0_a28c, i32* %r1.global-to-local, align 4
  %v0_a290 = load i32, i32* @r7, align 4
  store i32 %v0_a290, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_a288, i32* %fp.global-to-local, align 4
  %v0_a29c = load i32, i32* @r4, align 4
  %v5_a2a0 = inttoptr i32 %v0_a28c to i32*
  %v6_a2a0 = call i32 @function_829c(i32 %v0_a29c, i32* %v5_a2a0, i32 %v0_a290, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a2ac = load i32, i32* @r5, align 4
  store i32 %v0_a2ac, i32* %r1.global-to-local, align 4
  store i32 %v6_a2a0, i32* @sl, align 4
  %v0_a2b4 = load i32, i32* @r4, align 4
  %v5_a2b8 = inttoptr i32 %v0_a2ac to i32*
  %v6_a2b8 = call i32 @function_829c(i32 %v0_a2b4, i32* %v5_a2b8, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_a2c4 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_a2c4, i32* %r3.global-to-local, align 4
  %v1_a2c8 = urem i32 %v6_a2b8, 256
  store i32 %v1_a2c8, i32* %ip.global-to-local, align 4
  %v0_a2cc = load i32, i32* @r5, align 4
  store i32 %v0_a2cc, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_a2d4 = load i32, i32* @r4, align 4
  %v5_a2dc = inttoptr i32 %v0_a2cc to i32*
  %v6_a2dc = call i32 @function_8230(i32 %v0_a2d4, i32* %v5_a2dc, i32 24, i32 %v2_a2c4, i32 %v1_a2c8)
  %v0_a2e4 = load i32, i32* @r7, align 4
  %v1_a2e8 = inttoptr i32 %v0_a2e4 to i32*
  %v2_a2e8 = call i32 @function_10904(i32* %v1_a2e8)
  %v1_a2ec = load i32, i32* @r6, align 4
  %v2_a2ec = add i32 %v1_a2ec, %v2_a2e8
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a300 = call i32 @function_10bfc(i32 2, i32 3, i32 6)
  %v7_a304 = icmp eq i32 %v3_a300, -1
  store i1 %v7_a304, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a304, label %dec_label_pc_a880, label %dec_label_pc_a310

dec_label_pc_a310:                                ; preds = %dec_label_pc_a0dc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a318 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a318, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_a320 = load i32, i32* @r7, align 4
  store i32 %v0_a320, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a32c = call i32 @function_10bcc(i32 %v3_a300, i32 %v0_a320, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_a330 = icmp eq i32 %v6_a32c, -1
  store i1 %v7_a330, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a330, label %dec_label_pc_a888, label %dec_label_pc_a338

dec_label_pc_a338:                                ; preds = %dec_label_pc_a310
  store i32 %v1_a0e0, i32* %r3.global-to-local, align 4
  %v3_a344 = mul i32 %v7_a148, 65536
  store i32 %v3_a344, i32* @r4, align 4
  %v0_a348 = load i32, i32* %sb.global-to-local, align 4
  %v3_a348 = mul i32 %v0_a348, 65536
  store i32 %v3_a348, i32* %sb.global-to-local, align 4
  %v3_a350 = urem i32 %v7_a148, 65536
  store i32 %v3_a350, i32* %ip.global-to-local, align 4
  %v3_a354 = urem i32 %v0_a348, 65536
  store i32 %v3_a354, i32* %r1.global-to-local, align 4
  %v3_a358 = urem i32 %v6_a1c0, 65536
  store i32 %v3_a358, i32* %r2.global-to-local, align 4
  %v2_a35c = icmp eq i32 %v1_a0e0, 0
  store i1 %v2_a35c, i1* %cpsr_z.global-to-local, align 1
  %v0_a360 = load i32, i32* @r7, align 4
  store i32 %v0_a360, i32* %stack_var_-40, align 4
  br i1 %v2_a35c, label %dec_label_pc_a5f4.preheader, label %dec_label_pc_a374

dec_label_pc_a374:                                ; preds = %dec_label_pc_a338
  %v0_a37c = load i32, i32* @sl, align 4
  %v1_a37c = add i32 %v0_a37c, 40
  %v1_a390 = urem i32 %v0_a348, 256
  %tmp71 = udiv i32 %v7_a148, 256
  %tmp72 = udiv i32 %v1_a37c, 256
  %v1_a3ac = urem i32 %v6_a1c0, 256
  store i32 %v1_a3ac, i32* @lr, align 4
  %tmp73 = mul i32 %v6_a1dc, 256
  %v1_a3c8 = and i32 %tmp73, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp74 = udiv i32 %v6_a1dc, 256
  %v4_a3cc = urem i32 %tmp74, 256
  %v5_a3cc = or i32 %v4_a3cc, %v1_a3c8
  store i32 %v5_a3cc, i32* @r6, align 4
  %v1_a3d0 = urem i32 %v6_a210, 2
  %v1_a3d4 = urem i32 %v6_a228, 2
  %v1_a3d8 = urem i32 %v6_a240, 2
  %sext11 = mul i32 %tmp72, 16777216
  %v4_a3f4 = sdiv i32 %sext11, 16777216
  %v1_a3f8 = urem i32 %v6_a258, 2
  %tmp75 = udiv i32 %v6_a1c0, 256
  %v3_a400 = urem i32 %tmp75, 256
  %v1_a408 = urem i32 %v6_a270, 2
  store i32 %v1_a408, i32* %ip.global-to-local, align 4
  %v1_a40c = urem i32 %v6_a240, 256
  store i32 %v1_a40c, i32* %r1.global-to-local, align 4
  %v3_a410 = ashr i32 %sext11, 31
  store i32 %v3_a410, i32* %r2.global-to-local, align 4
  %sext12 = mul i32 %tmp71, 16777216
  %v4_a414 = sdiv i32 %sext12, 16777216
  store i32 %v4_a414, i32* %r3.global-to-local, align 4
  %tmp76 = udiv i32 %v0_a348, 256
  %v0_a41c = load i32, i32* %fp.global-to-local, align 4
  %v1_a41c = urem i32 %v0_a41c, 2
  %v4_a420 = mul nuw nsw i32 %v1_a3ac, 256
  %v5_a420 = or i32 %v4_a420, %v3_a400
  store i32 %v5_a420, i32* @r5, align 4
  %v3_a43c = ashr i32 %sext12, 31
  store i32 %v3_a43c, i32* @r4, align 4
  store i32 %v1_a390, i32* @fp, align 4
  store i32 %v1_a3ac, i32* @sb, align 4
  %sext8 = mul i32 %tmp76, 16777216
  %v4_a4f0 = sdiv i32 %sext8, 16777216
  %tmp = sub nsw i32 0, %v1_a3d0
  %v4_a50c = and i32 %tmp, 32
  %tmp84 = sub nsw i32 0, %v1_a3d4
  %v4_a524 = and i32 %tmp84, 16
  %tmp85 = sub nsw i32 0, %v1_a3d8
  %v4_a538 = and i32 %tmp85, 8
  %tmp86 = sub nsw i32 0, %v1_a3f8
  %v4_a54c = and i32 %tmp86, 4
  %tmp87 = sub nsw i32 0, %v1_a408
  %v3_a560 = and i32 %tmp87, 2
  %v1_a4a4 = trunc i32 %v3_a410 to i8
  %extract.t = trunc i32 %v4_a3f4 to i8
  %v2_a5b0 = icmp eq i32 %v1_a40c, 0
  br label %dec_label_pc_a448

dec_label_pc_a448:                                ; preds = %.thread10, %dec_label_pc_a374
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_a454 = call i32 @function_10ee8(i32 1510, i32 1)
  store i32 %v2_a10c, i32* %ip.global-to-local, align 4
  %v3_a45c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a45c, i32* %r3.global-to-local, align 4
  %v2_a460 = load i32, i32* @r7, align 4
  %v5_a460 = mul i32 %v2_a460, 4
  %v6_a460 = add i32 %v5_a460, %v2_a10c
  %v7_a460 = inttoptr i32 %v6_a460 to i32*
  store i32 %v2_a454, i32* %v7_a460, align 4
  %v0_a464 = load i32, i32* %ip.global-to-local, align 4
  %v1_a464 = load i32, i32* %r3.global-to-local, align 4
  %v4_a464 = mul i32 %v1_a464, 4
  %v5_a464 = add i32 %v4_a464, %v0_a464
  %v6_a464 = inttoptr i32 %v5_a464 to i32*
  %v7_a464 = load i32, i32* %v6_a464, align 4
  store i32 %v7_a464, i32* %r1.global-to-local, align 4
  %v1_a468 = inttoptr i32 %v7_a464 to i8*
  %v2_a468 = load i8, i8* %v1_a468, align 1
  %tmp88 = urem i8 %v2_a468, 16
  %v1_a46c = zext i8 %tmp88 to i32
  %v1_a470 = or i32 %v1_a46c, 64
  store i32 %v1_a470, i32* %r2.global-to-local, align 4
  %v1_a474 = trunc i32 %v1_a470 to i8
  store i8 %v1_a474, i8* %v1_a468, align 1
  %v0_a478 = load i32, i32* %r1.global-to-local, align 4
  %v1_a478 = inttoptr i32 %v0_a478 to i8*
  %v2_a478 = load i8, i8* %v1_a478, align 1
  %v1_a47c = and i8 %v2_a478, -16
  %v1_a480 = or i8 %v1_a47c, 5
  store i32 %v1_a18c, i32* %r2.global-to-local, align 4
  store i8 %v1_a480, i8* %v1_a478, align 1
  %v2_a490 = load i32, i32* %r1.global-to-local, align 4
  %v3_a490 = add i32 %v2_a490, 1
  %v4_a490 = inttoptr i32 %v3_a490 to i8*
  store i8 %v5_a144, i8* %v4_a490, align 1
  store i32 %v6_a160, i32* %ip.global-to-local, align 4
  %v2_a498 = load i32, i32* %r1.global-to-local, align 4
  %v3_a498 = add i32 %v2_a498, 8
  %v4_a498 = inttoptr i32 %v3_a498 to i8*
  store i8 %v5_a17c, i8* %v4_a498, align 1
  store i32 %v3_a410, i32* %r3.global-to-local, align 4
  %v0_a4a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_a4a0 = icmp eq i32 %v0_a4a0, 0
  store i1 %v2_a4a0, i1* %cpsr_z.global-to-local, align 1
  %v2_a4a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4a4 = add i32 %v2_a4a4, 3
  %v4_a4a4 = inttoptr i32 %v3_a4a4 to i8*
  store i8 %v1_a4a4, i8* %v4_a4a4, align 1
  store i32 %v4_a3f4, i32* %r2.global-to-local, align 4
  %v0_a4ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a4ac, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a448
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a4b0 = load i32, i32* %r1.global-to-local, align 4
  %v4_a4b0 = add i32 %v3_a4b0, 6
  %v5_a4b0 = inttoptr i32 %v4_a4b0 to i8*
  store i8 64, i8* %v5_a4b0, align 1
  %v0_a4b8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t20 = trunc i32 %v0_a4b8.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a448, %bb
  %v0_a4b8.off0 = phi i8 [ %extract.t, %dec_label_pc_a448 ], [ %extract.t20, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a4b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4b8 = add i32 %v2_a4b8, 2
  %v4_a4b8 = inttoptr i32 %v3_a4b8 to i8*
  store i8 %v0_a4b8.off0, i8* %v4_a4b8, align 1
  store i32 %v4_a414, i32* %ip.global-to-local, align 4
  %v0_a4c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a4c0, label %bb78, label %bb77

bb77:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb78

bb78:                                             ; preds = %.thread, %bb77
  %v0_a4c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4c4 = trunc i32 %v0_a4c4 to i8
  %v2_a4c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4c4 = add i32 %v2_a4c4, 9
  %v4_a4c4 = inttoptr i32 %v3_a4c4 to i8*
  store i8 %v1_a4c4, i8* %v4_a4c4, align 1
  %v0_a4c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a4c8, label %bb80, label %bb79

bb79:                                             ; preds = %bb78
  %v1_a4c8 = load i32, i32* %r2.global-to-local, align 4
  %v2_a4c8 = trunc i32 %v1_a4c8 to i8
  %v3_a4c8 = load i32, i32* %r1.global-to-local, align 4
  %v4_a4c8 = add i32 %v3_a4c8, 7
  %v5_a4c8 = inttoptr i32 %v4_a4c8 to i8*
  store i8 %v2_a4c8, i8* %v5_a4c8, align 1
  br label %bb80

bb80:                                             ; preds = %bb78, %bb79
  %v3_a4cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a4cc, i32* %r2.global-to-local, align 4
  %v0_a4d0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a4d0 = trunc i32 %v0_a4d0 to i8
  %v2_a4d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4d0 = add i32 %v2_a4d0, 4
  %v4_a4d0 = inttoptr i32 %v3_a4d0 to i8*
  store i8 %v1_a4d0, i8* %v4_a4d0, align 1
  store i32 %v6_a2dc, i32* %ip.global-to-local, align 4
  %v0_a4d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a4d8 = mul i32 %v0_a4d8, 32
  store i32 %v3_a4d8, i32* %r3.global-to-local, align 4
  %v1_a4dc = load i32, i32* %r1.global-to-local, align 4
  %v2_a4dc = add i32 %v1_a4dc, 12
  %v3_a4dc = inttoptr i32 %v2_a4dc to i32*
  store i32 %v6_a2dc, i32* %v3_a4dc, align 4
  %v0_a4e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4e0 = load i32, i32* %r2.global-to-local, align 4
  %tmp89 = mul i32 %v1_a4e0, -8
  %v5_a4e0 = add i32 %v0_a4e0, %tmp89
  %v1_a4e4 = load i32, i32* @r8, align 4
  %v2_a4e4 = add i32 %v1_a4e4, %v5_a4e0
  store i32 %v2_a4e4, i32* %r3.global-to-local, align 4
  %v1_a4e8 = add i32 %v2_a4e4, 16
  %v2_a4e8 = inttoptr i32 %v1_a4e8 to i32*
  %v3_a4e8 = load i32, i32* %v2_a4e8, align 4
  %v1_a4ec = load i32, i32* %r1.global-to-local, align 4
  %v2_a4ec = add i32 %v1_a4ec, 16
  %v3_a4ec = inttoptr i32 %v2_a4ec to i32*
  store i32 %v3_a4e8, i32* %v3_a4ec, align 4
  store i32 %v4_a4f0, i32* %r2.global-to-local, align 4
  %v0_a4f4 = load i32, i32* @r4, align 4
  %v1_a4f4 = trunc i32 %v0_a4f4 to i8
  %v2_a4f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4f4 = add i32 %v2_a4f4, 5
  %v4_a4f4 = inttoptr i32 %v3_a4f4 to i8*
  store i8 %v1_a4f4, i8* %v4_a4f4, align 1
  %v0_a4f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a4f8 = trunc i32 %v0_a4f8 to i8
  %v2_a4f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a4f8 = add i32 %v2_a4f8, 20
  %v4_a4f8 = inttoptr i32 %v3_a4f8 to i8*
  store i8 %v1_a4f8, i8* %v4_a4f8, align 1
  %v0_a4fc = load i32, i32* %r1.global-to-local, align 4
  %v1_a4fc = add i32 %v0_a4fc, 20
  store i32 %v1_a4fc, i32* @r6, align 4
  %v1_a500 = add i32 %v0_a4fc, 33
  %v2_a500 = inttoptr i32 %v1_a500 to i8*
  %v3_a500 = load i8, i8* %v2_a500, align 1
  %v4_a500 = zext i8 %v3_a500 to i32
  store i32 %v1_a3d0, i32* %ip.global-to-local, align 4
  %v1_a508 = and i32 %v4_a500, 223
  %v5_a50c = or i32 %v1_a508, %v4_a50c
  store i32 %v5_a50c, i32* %r3.global-to-local, align 4
  %v1_a510 = trunc i32 %v5_a50c to i8
  store i8 %v1_a510, i8* %v2_a500, align 1
  %v0_a514 = load i32, i32* @r6, align 4
  %v1_a514 = add i32 %v0_a514, 13
  %v2_a514 = inttoptr i32 %v1_a514 to i8*
  %v3_a514 = load i8, i8* %v2_a514, align 1
  %v4_a514 = zext i8 %v3_a514 to i32
  %v0_a518 = load i32, i32* %r1.global-to-local, align 4
  %v1_a518 = add i32 %v0_a518, 40
  store i32 %v1_a518, i32* @r7, align 4
  store i32 %v1_a3d4, i32* %r1.global-to-local, align 4
  %v1_a520 = and i32 %v4_a514, 239
  %v5_a524 = or i32 %v1_a520, %v4_a524
  store i32 %v5_a524, i32* %r2.global-to-local, align 4
  %v1_a528 = trunc i32 %v5_a524 to i8
  store i8 %v1_a528, i8* %v2_a514, align 1
  %v0_a52c = load i32, i32* @r6, align 4
  %v1_a52c = add i32 %v0_a52c, 13
  %v2_a52c = inttoptr i32 %v1_a52c to i8*
  %v3_a52c = load i8, i8* %v2_a52c, align 1
  %v4_a52c = zext i8 %v3_a52c to i32
  store i32 %v1_a3d8, i32* %r2.global-to-local, align 4
  %v1_a534 = and i32 %v4_a52c, 247
  %v5_a538 = or i32 %v1_a534, %v4_a538
  store i32 %v5_a538, i32* %r3.global-to-local, align 4
  %v1_a53c = trunc i32 %v5_a538 to i8
  store i8 %v1_a53c, i8* %v2_a52c, align 1
  %v0_a540 = load i32, i32* @r6, align 4
  %v1_a540 = add i32 %v0_a540, 13
  %v2_a540 = inttoptr i32 %v1_a540 to i8*
  %v3_a540 = load i8, i8* %v2_a540, align 1
  %v4_a540 = zext i8 %v3_a540 to i32
  store i32 %v1_a3f8, i32* %r3.global-to-local, align 4
  %v1_a548 = and i32 %v4_a540, 251
  %v5_a54c = or i32 %v1_a548, %v4_a54c
  store i32 %v5_a54c, i32* %r2.global-to-local, align 4
  %v1_a550 = trunc i32 %v5_a54c to i8
  store i8 %v1_a550, i8* %v2_a540, align 1
  %v0_a554 = load i32, i32* @r6, align 4
  %v1_a554 = add i32 %v0_a554, 13
  %v2_a554 = inttoptr i32 %v1_a554 to i8*
  %v3_a554 = load i8, i8* %v2_a554, align 1
  %v4_a554 = zext i8 %v3_a554 to i32
  store i32 %v1_a408, i32* %ip.global-to-local, align 4
  %v1_a55c = and i32 %v4_a554, 253
  %v4_a560 = or i32 %v1_a55c, %v3_a560
  store i32 %v4_a560, i32* %r3.global-to-local, align 4
  %v1_a564 = trunc i32 %v4_a560 to i8
  store i8 %v1_a564, i8* %v2_a554, align 1
  %v0_a568 = load i32, i32* @r6, align 4
  %v1_a568 = add i32 %v0_a568, 12
  %v2_a568 = inttoptr i32 %v1_a568 to i8*
  %v3_a568 = load i8, i8* %v2_a568, align 1
  %v4_a568 = zext i8 %v3_a568 to i32
  store i32 %v4_a568, i32* %r2.global-to-local, align 4
  %v1_a56c = add i32 %v0_a568, 13
  %v2_a56c = inttoptr i32 %v1_a56c to i8*
  %v3_a56c = load i8, i8* %v2_a56c, align 1
  %v4_a56c = zext i8 %v3_a56c to i32
  store i32 %v1_a41c, i32* %r1.global-to-local, align 4
  %tmp90 = urem i8 %v3_a568, 16
  %v1_a574 = zext i8 %tmp90 to i32
  %v1_a578 = and i32 %v4_a56c, 254
  %v2_a57c = or i32 %v1_a578, %v1_a41c
  store i32 %v2_a57c, i32* %r3.global-to-local, align 4
  %v1_a580 = or i32 %v1_a574, 80
  store i32 %v1_a580, i32* %r2.global-to-local, align 4
  %v1_a584 = trunc i32 %v2_a57c to i8
  store i8 %v1_a584, i8* %v2_a56c, align 1
  %v0_a588 = load i32, i32* %r2.global-to-local, align 4
  %v1_a588 = trunc i32 %v0_a588 to i8
  %v2_a588 = load i32, i32* @r6, align 4
  %v3_a588 = add i32 %v2_a588, 12
  %v4_a588 = inttoptr i32 %v3_a588 to i8*
  store i8 %v1_a588, i8* %v4_a588, align 1
  store i32 %v5_a3cc, i32* %r2.global-to-local, align 4
  %v0_a590 = load i32, i32* @fp, align 4
  %v1_a590 = trunc i32 %v0_a590 to i8
  %v2_a590 = load i32, i32* @r6, align 4
  %v3_a590 = add i32 %v2_a590, 1
  %v4_a590 = inttoptr i32 %v3_a590 to i8*
  store i8 %v1_a590, i8* %v4_a590, align 1
  %v0_a594 = load i32, i32* %r2.global-to-local, align 4
  %v1_a594 = load i32, i32* @r6, align 4
  %v2_a594 = add i32 %v1_a594, 4
  %v3_a594 = inttoptr i32 %v2_a594 to i32*
  store i32 %v0_a594, i32* %v3_a594, align 4
  %v0_a598 = load i32, i32* @r5, align 4
  %v1_a598 = trunc i32 %v0_a598 to i8
  %v2_a598 = load i32, i32* @r6, align 4
  %v3_a598 = add i32 %v2_a598, 2
  %v4_a598 = inttoptr i32 %v3_a598 to i8*
  store i8 %v1_a598, i8* %v4_a598, align 1
  %v0_a59c = load i32, i32* @sb, align 4
  %v1_a59c = trunc i32 %v0_a59c to i8
  %v2_a59c = load i32, i32* @r6, align 4
  %v3_a59c = add i32 %v2_a59c, 3
  %v4_a59c = inttoptr i32 %v3_a59c to i8*
  store i8 %v1_a59c, i8* %v4_a59c, align 1
  %v0_a5a0 = call i32 @function_d228()
  store i32 %v1_a40c, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_a5a0, 16777216
  %v1_a5a8 = sdiv i32 %sext, 16777216
  store i32 %v1_a5a8, i32* %r2.global-to-local, align 4
  %v3_a5ac = ashr i32 %sext, 31
  store i32 %v3_a5ac, i32* %r3.global-to-local, align 4
  store i1 %v2_a5b0, i1* %cpsr_z.global-to-local, align 1
  %v1_a5b4 = trunc i32 %v3_a5ac to i8
  %v2_a5b4 = load i32, i32* @r6, align 4
  %v3_a5b4 = add i32 %v2_a5b4, 15
  %v4_a5b4 = inttoptr i32 %v3_a5b4 to i8*
  store i8 %v1_a5b4, i8* %v4_a5b4, align 1
  %v0_a5b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a5b8, label %.thread10, label %bb81

bb81:                                             ; preds = %bb80
  %v1_a5b8 = load i32, i32* @r6, align 4
  %v2_a5b8 = add i32 %v1_a5b8, 13
  %v3_a5b8 = inttoptr i32 %v2_a5b8 to i8*
  %v4_a5b8 = load i8, i8* %v3_a5b8, align 1
  %v5_a5b8 = zext i8 %v4_a5b8 to i32
  %v2_a5bc = or i32 %v5_a5b8, 8
  store i32 %v2_a5bc, i32* %r3.global-to-local, align 4
  %v2_a5c0 = trunc i32 %v2_a5bc to i8
  store i8 %v2_a5c0, i8* %v3_a5b8, align 1
  br label %.thread10

.thread10:                                        ; preds = %bb80, %bb81
  %v0_a5c4 = load i32, i32* @sl, align 4
  store i32 %v0_a5c4, i32* %r1.global-to-local, align 4
  %v0_a5c8 = load i32, i32* @r7, align 4
  %v0_a5cc = load i32, i32* %r2.global-to-local, align 4
  %v1_a5cc = trunc i32 %v0_a5cc to i8
  %v2_a5cc = load i32, i32* @r6, align 4
  %v3_a5cc = add i32 %v2_a5cc, 14
  %v4_a5cc = inttoptr i32 %v3_a5cc to i8*
  store i8 %v1_a5cc, i8* %v4_a5cc, align 1
  %v2_a5d0 = call i32 @function_d2dc(i32 %v0_a5c8, i32 %v0_a5c4)
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_a5d8 = load i32, i32* @r7, align 4
  %v3_a5d8 = load i32, i32* @sl, align 4
  %v4_a5d8 = add i32 %v3_a5d8, %v2_a5d8
  %v5_a5d8 = inttoptr i32 %v4_a5d8 to i8*
  store i8 0, i8* %v5_a5d8, align 1
  %v3_a5dc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a5dc, i32* %r3.global-to-local, align 4
  store i32 %v1_a0e0, i32* %r2.global-to-local, align 4
  %v1_a5e4 = add i32 %v3_a5dc, 1
  store i32 %v1_a5e4, i32* @r7, align 4
  %v9_a5e8 = icmp eq i32 %v1_a0e0, %v1_a5e4
  store i1 %v9_a5e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a5e4, i32* %stack_var_-40, align 4
  %v8_a5f0 = icmp sgt i32 %v1_a0e0, %v1_a5e4
  br i1 %v8_a5f0, label %dec_label_pc_a448, label %dec_label_pc_a5f4.preheader

dec_label_pc_a5f4.preheader:                      ; preds = %.thread10, %dec_label_pc_a338
  %v2_a634 = icmp eq i32 %v6_a2dc, -1
  %v7_a634 = icmp eq i32 %v6_a2dc, -1
  %v3_a7cc = icmp eq i32 %v3_a350, 65535
  %v2_a848 = icmp eq i32 %v1_a2c8, 0
  br label %dec_label_pc_a5f4

dec_label_pc_a5f4:                                ; preds = %dec_label_pc_a5f4.preheader, %dec_label_pc_a86c
  store i32 %v1_a0e0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_a35c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_a35c, label %dec_label_pc_a86c, label %dec_label_pc_a608

dec_label_pc_a608:                                ; preds = %dec_label_pc_a5f4
  %v0_a608 = load i32, i32* @sl, align 4
  %v1_a608 = add i32 %v0_a608, 20
  store i32 %v1_a608, i32* @sb, align 4
  %tmp82 = mul i32 %v1_a608, 256
  %v1_a614 = and i32 %tmp82, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_a614, i32* %r3.global-to-local, align 4
  %tmp83 = udiv i32 %v1_a608, 256
  %v4_a618 = urem i32 %tmp83, 256
  %v5_a618 = or i32 %v4_a618, %v1_a614
  store i32 %v5_a618, i32* %r2.global-to-local, align 4
  %v1_a620 = add i32 %v0_a608, 40
  store i32 %v1_a620, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_a730

dec_label_pc_a630:                                ; preds = %dec_label_pc_a730
  store i32 %v6_a2dc, i32* %r1.global-to-local, align 4
  store i1 %v7_a634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a634, label %dec_label_pc_a7bc, label %dec_label_pc_a63c

dec_label_pc_a63c:                                ; preds = %dec_label_pc_a754, %dec_label_pc_a630
  store i32 %v3_a350, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a7cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a7cc, label %dec_label_pc_a7d8, label %dec_label_pc_a650

dec_label_pc_a650:                                ; preds = %dec_label_pc_a7bc.dec_label_pc_a650_crit_edge, %dec_label_pc_a63c
  %v1_a654 = phi i32 [ %v1_a654.pre, %dec_label_pc_a7bc.dec_label_pc_a650_crit_edge ], [ 65535, %dec_label_pc_a63c ]
  store i32 %v3_a354, i32* %r3.global-to-local, align 4
  %v9_a654 = icmp eq i32 %v3_a354, %v1_a654
  store i1 %v9_a654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a654, label %dec_label_pc_a7f4, label %dec_label_pc_a65c

dec_label_pc_a65c:                                ; preds = %dec_label_pc_a7d8.dec_label_pc_a65c_crit_edge, %dec_label_pc_a650
  %v1_a660 = phi i32 [ %v1_a660.pre, %dec_label_pc_a7d8.dec_label_pc_a65c_crit_edge ], [ %v1_a654, %dec_label_pc_a650 ]
  store i32 %v3_a358, i32* %ip.global-to-local, align 4
  %v9_a660 = icmp eq i32 %v3_a358, %v1_a660
  store i1 %v9_a660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a660, label %dec_label_pc_a810, label %dec_label_pc_a668

dec_label_pc_a668:                                ; preds = %dec_label_pc_a7f4.dec_label_pc_a668_crit_edge, %dec_label_pc_a65c
  %v1_a66c = phi i32 [ %v1_a66c.pre, %dec_label_pc_a7f4.dec_label_pc_a668_crit_edge ], [ %v1_a660, %dec_label_pc_a65c ]
  store i32 %v6_a1dc, i32* %r1.global-to-local, align 4
  %v9_a66c = icmp eq i32 %v6_a1dc, %v1_a66c
  store i1 %v9_a66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a66c, label %dec_label_pc_a82c, label %dec_label_pc_a674

dec_label_pc_a674:                                ; preds = %dec_label_pc_a810.dec_label_pc_a674_crit_edge, %dec_label_pc_a668
  %v1_a678 = phi i32 [ %v1_a678.pre, %dec_label_pc_a810.dec_label_pc_a674_crit_edge ], [ %v1_a66c, %dec_label_pc_a668 ]
  store i32 %v6_a1f8, i32* %r2.global-to-local, align 4
  %v9_a678 = icmp eq i32 %v6_a1f8, %v1_a678
  store i1 %v9_a678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a678, label %dec_label_pc_a840, label %dec_label_pc_a680

dec_label_pc_a680:                                ; preds = %dec_label_pc_a82c, %dec_label_pc_a674
  store i32 %v1_a2c8, i32* %r3.global-to-local, align 4
  store i1 %v2_a848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a848, label %dec_label_pc_a68c, label %dec_label_pc_a854

dec_label_pc_a68c:                                ; preds = %dec_label_pc_a680, %dec_label_pc_a840, %dec_label_pc_a854
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a690 = load i32, i32* @r7, align 4
  %v1_a690 = trunc i32 %v0_a690 to i8
  %v2_a690 = load i32, i32* @r5, align 4
  %v3_a690 = add i32 %v2_a690, 10
  %v4_a690 = inttoptr i32 %v3_a690 to i8*
  store i8 %v1_a690, i8* %v4_a690, align 1
  %v0_a694 = load i32, i32* @r7, align 4
  %v1_a694 = trunc i32 %v0_a694 to i8
  %v2_a694 = load i32, i32* @r5, align 4
  %v3_a694 = add i32 %v2_a694, 11
  %v4_a694 = inttoptr i32 %v3_a694 to i8*
  store i8 %v1_a694, i8* %v4_a694, align 1
  %v0_a698 = load i32, i32* @r5, align 4
  store i32 %v0_a698, i32* @r0, align 4
  %v2_a69c = call i32 @function_c6b0(i32 %v0_a698, i32 20)
  %v3_a69c = trunc i32 %v2_a69c to i8
  %v4_a6a022 = udiv i32 %v2_a69c, 256
  %v1_a6a4 = trunc i32 %v4_a6a022 to i8
  %v2_a6a4 = load i32, i32* @r5, align 4
  %v3_a6a4 = add i32 %v2_a6a4, 11
  %v4_a6a4 = inttoptr i32 %v3_a6a4 to i8*
  store i8 %v1_a6a4, i8* %v4_a6a4, align 1
  %v3_a6a8 = load i32, i32* @r5, align 4
  %v4_a6a8 = add i32 %v3_a6a8, 10
  %v5_a6a8 = inttoptr i32 %v4_a6a8 to i8*
  store i8 %v3_a69c, i8* %v5_a6a8, align 1
  %v0_a6ac = load i32, i32* @r6, align 4
  store i32 %v0_a6ac, i32* @r1, align 4
  store i32 %v5_a618, i32* %r2.global-to-local, align 4
  %v0_a6b4 = load i32, i32* @sb, align 4
  store i32 %v0_a6b4, i32* %r3.global-to-local, align 4
  %v0_a6b8 = load i32, i32* @r7, align 4
  %v1_a6b8 = trunc i32 %v0_a6b8 to i8
  %v3_a6b8 = add i32 %v0_a6ac, 16
  %v4_a6b8 = inttoptr i32 %v3_a6b8 to i8*
  store i8 %v1_a6b8, i8* %v4_a6b8, align 1
  %v0_a6bc = load i32, i32* @r7, align 4
  %v1_a6bc = trunc i32 %v0_a6bc to i8
  %v2_a6bc = load i32, i32* @r6, align 4
  %v3_a6bc = add i32 %v2_a6bc, 17
  %v4_a6bc = inttoptr i32 %v3_a6bc to i8*
  store i8 %v1_a6bc, i8* %v4_a6bc, align 1
  %v0_a6c0 = load i32, i32* @r5, align 4
  %v4_a6c4 = call i32 @function_c70c(i32 %v0_a6c0, i32 %v0_a6ac, i32 %v5_a618, i32 %v0_a6b4)
  %v5_a6c4 = trunc i32 %v4_a6c4 to i8
  %v4_a6c823 = udiv i32 %v4_a6c4, 256
  %v1_a6cc = trunc i32 %v4_a6c823 to i8
  %v2_a6cc = load i32, i32* @r6, align 4
  %v3_a6cc = add i32 %v2_a6cc, 17
  %v4_a6cc = inttoptr i32 %v3_a6cc to i8*
  store i8 %v1_a6cc, i8* %v4_a6cc, align 1
  %v3_a6d0 = load i32, i32* @r6, align 4
  %v4_a6d0 = add i32 %v3_a6d0, 16
  %v5_a6d0 = inttoptr i32 %v4_a6d0 to i8*
  store i8 %v5_a6c4, i8* %v5_a6d0, align 1
  %v3_a6d4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a6d4, i32* %r3.global-to-local, align 4
  %v0_a6d8 = load i32, i32* @r5, align 4
  %v1_a6d8 = add i32 %v0_a6d8, 20
  %v2_a6d8 = inttoptr i32 %v1_a6d8 to i32*
  %v3_a6d8 = load i32, i32* %v2_a6d8, align 4
  %v3_a6e0 = udiv i32 %v3_a6d8, 65536
  store i32 %v3_a6e0, i32* %r2.global-to-local, align 4
  %v5_a6e4 = mul i32 %v3_a6d4, 24
  %v1_a6e8 = load i32, i32* @r8, align 4
  %v2_a6e8 = add i32 %v1_a6e8, %v5_a6e4
  store i32 %v2_a6e8, i32* %ip.global-to-local, align 4
  %v3_a6ec21 = udiv i32 %v3_a6d8, 16777216
  %v1_a6f0 = trunc i32 %v3_a6ec21 to i8
  %v3_a6f0 = add i32 %v2_a6e8, 3
  %v4_a6f0 = inttoptr i32 %v3_a6f0 to i8*
  store i8 %v1_a6f0, i8* %v4_a6f0, align 1
  %v0_a6f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6f4 = trunc i32 %v0_a6f4 to i8
  %v2_a6f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_a6f4 = add i32 %v2_a6f4, 2
  %v4_a6f4 = inttoptr i32 %v3_a6f4 to i8*
  store i8 %v1_a6f4, i8* %v4_a6f4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a6fc = load i32, i32* @r5, align 4
  store i32 %v0_a6fc, i32* %r1.global-to-local, align 4
  %v0_a704 = load i32, i32* @fp, align 4
  store i32 %v0_a704, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a70c = load i32, i32* %ip.global-to-local, align 4
  %v6_a714 = inttoptr i32 %v0_a6fc to i32*
  %v7_a714 = call i32 @function_10b98(i32 %v3_a300, i32* %v6_a714, i32 %v0_a704, i32 16384, i32 %v0_a70c, i32 16)
  %v3_a718 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a718, i32* %r3.global-to-local, align 4
  store i32 %v1_a0e0, i32* %ip.global-to-local, align 4
  %v1_a720 = add i32 %v3_a718, 1
  %v9_a724 = icmp eq i32 %v1_a0e0, %v1_a720
  store i1 %v9_a724, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a720, i32* %stack_var_-40, align 4
  %v7_a72c = icmp sgt i32 %v1_a0e0, %v1_a720
  br i1 %v7_a72c, label %dec_label_pc_a730, label %dec_label_pc_a86c

dec_label_pc_a730:                                ; preds = %dec_label_pc_a68c, %dec_label_pc_a608
  %v1_a744 = phi i32 [ %v1_a720, %dec_label_pc_a68c ], [ 0, %dec_label_pc_a608 ]
  %v5_a734 = mul i32 %v1_a744, 24
  %v1_a738 = load i32, i32* @r8, align 4
  %v2_a738 = add i32 %v1_a738, %v5_a734
  store i32 %v2_a738, i32* %r3.global-to-local, align 4
  store i32 %v2_a10c, i32* %ip.global-to-local, align 4
  %v1_a740 = add i32 %v2_a738, 20
  %v2_a740 = inttoptr i32 %v1_a740 to i8*
  %v3_a740 = load i8, i8* %v2_a740, align 1
  %v4_a740 = zext i8 %v3_a740 to i32
  store i32 %v4_a740, i32* %r2.global-to-local, align 4
  %v4_a744 = mul i32 %v1_a744, 4
  %v5_a744 = add i32 %v4_a744, %v2_a10c
  %v6_a744 = inttoptr i32 %v5_a744 to i32*
  %v7_a744 = load i32, i32* %v6_a744, align 4
  store i32 %v7_a744, i32* @r5, align 4
  %v2_a748 = icmp ugt i8 %v3_a740, 30
  %v7_a748 = icmp eq i8 %v3_a740, 31
  store i1 %v7_a748, i1* %cpsr_z.global-to-local, align 1
  %v1_a74c = add i32 %v7_a744, 20
  store i32 %v1_a74c, i32* @r6, align 4
  %v2_a750 = xor i1 %v7_a748, true
  %v3_a750 = and i1 %v2_a748, %v2_a750
  br i1 %v3_a750, label %dec_label_pc_a630, label %dec_label_pc_a754

dec_label_pc_a754:                                ; preds = %dec_label_pc_a730
  %v1_a754 = add i32 %v2_a738, 16
  %v2_a754 = inttoptr i32 %v1_a754 to i32*
  %v3_a754 = load i32, i32* %v2_a754, align 4
  %v0_a758 = call i32 @function_d228()
  %v3_a75c = load i32, i32* %stack_var_-40, align 4
  %v5_a764 = mul i32 %v3_a75c, 24
  %v1_a76c = load i32, i32* @r8, align 4
  %v2_a76c = add i32 %v1_a76c, %v5_a764
  store i32 %v2_a76c, i32* %r1.global-to-local, align 4
  %v1_a770 = and i32 %v3_a754, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_a770, i32* %r3.global-to-local, align 4
  %v1_a768 = udiv i32 %v3_a754, 256
  %v3_a774 = and i32 %v1_a768, 65280
  store i32 %v3_a774, i32* %r2.global-to-local, align 4
  %v3_a778 = mul i32 %v3_a754, 16777216
  store i32 %v3_a778, i32* %ip.global-to-local, align 4
  %v1_a77c = add i32 %v2_a76c, 20
  %v2_a77c = inttoptr i32 %v1_a77c to i8*
  %v3_a77c = load i8, i8* %v2_a77c, align 1
  %v4_a77c = zext i8 %v3_a77c to i32
  %v4_a780 = mul i32 %v1_a770, 256
  %v5_a780 = or i32 %v4_a780, %v3_a778
  store i32 %v5_a780, i32* %ip.global-to-local, align 4
  %v4_a784 = udiv i32 %v3_a754, 16777216
  %v5_a784 = or i32 %v3_a774, %v4_a784
  %v2_a788 = or i32 %v5_a784, %v5_a780
  %v7_a78c = lshr i32 %v0_a758, %v4_a77c
  %v8_a78c = add i32 %v7_a78c, %v2_a788
  store i32 %v8_a78c, i32* %r2.global-to-local, align 4
  %v2_a7a8 = call i32 @llvm.bswap.i32(i32 %v8_a78c)
  store i32 %v2_a7a8, i32* %r3.global-to-local, align 4
  store i32 %v6_a2dc, i32* %r1.global-to-local, align 4
  store i1 %v7_a634, i1* %cpsr_z.global-to-local, align 1
  %v1_a7b4 = load i32, i32* @r5, align 4
  %v2_a7b4 = add i32 %v1_a7b4, 16
  %v3_a7b4 = inttoptr i32 %v2_a7b4 to i32*
  store i32 %v2_a7a8, i32* %v3_a7b4, align 4
  br i1 %v2_a634, label %dec_label_pc_a7bc, label %dec_label_pc_a63c

dec_label_pc_a7bc:                                ; preds = %dec_label_pc_a754, %dec_label_pc_a630
  %v0_a7bc = call i32 @function_d228()
  store i32 %v3_a350, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a7cc, i1* %cpsr_z.global-to-local, align 1
  %v1_a7d0 = load i32, i32* @r5, align 4
  %v2_a7d0 = add i32 %v1_a7d0, 12
  %v3_a7d0 = inttoptr i32 %v2_a7d0 to i32*
  store i32 %v0_a7bc, i32* %v3_a7d0, align 4
  br i1 %v3_a7cc, label %dec_label_pc_a7d8, label %dec_label_pc_a7bc.dec_label_pc_a650_crit_edge

dec_label_pc_a7bc.dec_label_pc_a650_crit_edge:    ; preds = %dec_label_pc_a7bc
  %v1_a654.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a650

dec_label_pc_a7d8:                                ; preds = %dec_label_pc_a7bc, %dec_label_pc_a63c
  %v0_a7d8 = call i32 @function_d228()
  %v1_a7d8 = trunc i32 %v0_a7d8 to i8
  %v4_a7dc24 = udiv i32 %v0_a7d8, 256
  %v1_a7e0 = trunc i32 %v4_a7dc24 to i8
  %v2_a7e0 = load i32, i32* @r5, align 4
  %v3_a7e0 = add i32 %v2_a7e0, 5
  %v4_a7e0 = inttoptr i32 %v3_a7e0 to i8*
  store i8 %v1_a7e0, i8* %v4_a7e0, align 1
  store i32 %v3_a354, i32* %r3.global-to-local, align 4
  %v1_a7e8 = load i32, i32* @r4, align 4
  %v9_a7e8 = icmp eq i32 %v3_a354, %v1_a7e8
  store i1 %v9_a7e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a7ec = load i32, i32* @r5, align 4
  %v4_a7ec = add i32 %v3_a7ec, 4
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 %v1_a7d8, i8* %v5_a7ec, align 1
  %v0_a7f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a7f0, label %dec_label_pc_a7f4, label %dec_label_pc_a7d8.dec_label_pc_a65c_crit_edge

dec_label_pc_a7d8.dec_label_pc_a65c_crit_edge:    ; preds = %dec_label_pc_a7d8
  %v1_a660.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a65c

dec_label_pc_a7f4:                                ; preds = %dec_label_pc_a7d8, %dec_label_pc_a650
  %v0_a7f4 = call i32 @function_d228()
  %v1_a7f4 = trunc i32 %v0_a7f4 to i8
  store i32 %v3_a358, i32* %ip.global-to-local, align 4
  %v4_a7fc = sdiv i32 %v0_a7f4, 256
  store i32 %v4_a7fc, i32* %r3.global-to-local, align 4
  %v1_a800 = load i32, i32* @r4, align 4
  %v9_a800 = icmp eq i32 %v3_a358, %v1_a800
  store i1 %v9_a800, i1* %cpsr_z.global-to-local, align 1
  %v3_a804 = load i32, i32* @r5, align 4
  %v4_a804 = add i32 %v3_a804, 20
  %v5_a804 = inttoptr i32 %v4_a804 to i8*
  store i8 %v1_a7f4, i8* %v5_a804, align 1
  %v0_a808 = load i32, i32* %r3.global-to-local, align 4
  %v1_a808 = trunc i32 %v0_a808 to i8
  %v2_a808 = load i32, i32* @r6, align 4
  %v3_a808 = add i32 %v2_a808, 1
  %v4_a808 = inttoptr i32 %v3_a808 to i8*
  store i8 %v1_a808, i8* %v4_a808, align 1
  %v0_a80c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a80c, label %dec_label_pc_a810, label %dec_label_pc_a7f4.dec_label_pc_a668_crit_edge

dec_label_pc_a7f4.dec_label_pc_a668_crit_edge:    ; preds = %dec_label_pc_a7f4
  %v1_a66c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a668

dec_label_pc_a810:                                ; preds = %dec_label_pc_a7f4, %dec_label_pc_a65c
  %v0_a810 = call i32 @function_d228()
  %v1_a810 = trunc i32 %v0_a810 to i8
  store i32 %v6_a1dc, i32* %r1.global-to-local, align 4
  %v4_a818 = sdiv i32 %v0_a810, 256
  store i32 %v4_a818, i32* %r3.global-to-local, align 4
  %v1_a81c = load i32, i32* @r4, align 4
  %v9_a81c = icmp eq i32 %v6_a1dc, %v1_a81c
  store i1 %v9_a81c, i1* %cpsr_z.global-to-local, align 1
  %v1_a820 = trunc i32 %v4_a818 to i8
  %v2_a820 = load i32, i32* @r6, align 4
  %v3_a820 = add i32 %v2_a820, 3
  %v4_a820 = inttoptr i32 %v3_a820 to i8*
  store i8 %v1_a820, i8* %v4_a820, align 1
  %v3_a824 = load i32, i32* @r6, align 4
  %v4_a824 = add i32 %v3_a824, 2
  %v5_a824 = inttoptr i32 %v4_a824 to i8*
  store i8 %v1_a810, i8* %v5_a824, align 1
  %v0_a828 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a828, label %dec_label_pc_a82c, label %dec_label_pc_a810.dec_label_pc_a674_crit_edge

dec_label_pc_a810.dec_label_pc_a674_crit_edge:    ; preds = %dec_label_pc_a810
  %v1_a678.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a674

dec_label_pc_a82c:                                ; preds = %dec_label_pc_a810, %dec_label_pc_a668
  %v0_a82c = call i32 @function_d228()
  store i32 %v6_a1f8, i32* %r2.global-to-local, align 4
  %v1_a834 = load i32, i32* @r4, align 4
  %v9_a834 = icmp eq i32 %v6_a1f8, %v1_a834
  store i1 %v9_a834, i1* %cpsr_z.global-to-local, align 1
  %v1_a838 = load i32, i32* @r6, align 4
  %v2_a838 = add i32 %v1_a838, 4
  %v3_a838 = inttoptr i32 %v2_a838 to i32*
  store i32 %v0_a82c, i32* %v3_a838, align 4
  br i1 %v9_a834, label %dec_label_pc_a840, label %dec_label_pc_a680

dec_label_pc_a840:                                ; preds = %dec_label_pc_a82c, %dec_label_pc_a674
  %v0_a840 = call i32 @function_d228()
  store i32 %v1_a2c8, i32* %r3.global-to-local, align 4
  store i1 %v2_a848, i1* %cpsr_z.global-to-local, align 1
  %v1_a84c = load i32, i32* @r6, align 4
  %v2_a84c = add i32 %v1_a84c, 8
  %v3_a84c = inttoptr i32 %v2_a84c to i32*
  store i32 %v0_a840, i32* %v3_a84c, align 4
  br i1 %v2_a848, label %dec_label_pc_a68c, label %dec_label_pc_a854

dec_label_pc_a854:                                ; preds = %dec_label_pc_a680, %dec_label_pc_a840
  %v0_a854 = load i32, i32* @r5, align 4
  %v1_a854 = add i32 %v0_a854, 40
  store i32 %v1_a854, i32* @r4, align 4
  %v0_a85c = load i32, i32* @sl, align 4
  store i32 %v0_a85c, i32* %r1.global-to-local, align 4
  %v2_a860 = call i32 @function_d2dc(i32 %v1_a854, i32 %v0_a85c)
  %v0_a864 = load i32, i32* @r7, align 4
  %v1_a864 = trunc i32 %v0_a864 to i8
  %v2_a864 = load i32, i32* @r4, align 4
  %v3_a864 = load i32, i32* @sl, align 4
  %v4_a864 = add i32 %v3_a864, %v2_a864
  %v5_a864 = inttoptr i32 %v4_a864 to i8*
  store i8 %v1_a864, i8* %v5_a864, align 1
  br label %dec_label_pc_a68c

dec_label_pc_a86c:                                ; preds = %dec_label_pc_a68c, %dec_label_pc_a5f4
  %v2_a870 = call i32 @function_10904(i32* null)
  store i32 %v2_a2ec, i32* %r1.global-to-local, align 4
  %v9_a878 = icmp eq i32 %v2_a2ec, %v2_a870
  store i1 %v9_a878, i1* %cpsr_z.global-to-local, align 1
  %v6_a87c = icmp slt i32 %v2_a2ec, %v2_a870
  br i1 %v6_a87c, label %dec_label_pc_a880, label %dec_label_pc_a5f4

dec_label_pc_a880:                                ; preds = %dec_label_pc_a86c, %dec_label_pc_a0dc, %dec_label_pc_a888
  %v29_a884 = phi i32 [ %v3_a300, %dec_label_pc_a0dc ], [ %v1_a88c, %dec_label_pc_a888 ], [ %v2_a870, %dec_label_pc_a86c ]
  store i32 %v18_a0dc, i32* %sb.global-to-local, align 4
  store i32 %v24_a0dc, i32* %fp.global-to-local, align 4
  ret i32 %v29_a884

dec_label_pc_a888:                                ; preds = %dec_label_pc_a310
  %v1_a88c = call i32 @function_10660(i32 %v3_a300)
  br label %dec_label_pc_a880

; uselistorder directives
  uselistorder i32 %v4_a818, { 1, 0 }
  uselistorder i32 %v2_a7a8, { 1, 0 }
  uselistorder i32 %v3_a778, { 1, 0 }
  uselistorder i32 %v3_a754, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a720, { 1, 2, 0, 3 }
  uselistorder i32 %v0_a6ac, { 1, 0, 2 }
  uselistorder i32 %v1_a608, { 1, 0, 2 }
  uselistorder i1 %v2_a848, { 2, 3, 1, 0 }
  uselistorder i1 %v3_a7cc, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a634, { 2, 1, 0 }
  uselistorder i32 %v1_a5e4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a41c, { 1, 0 }
  uselistorder i32 %v1_a40c, { 1, 2, 0 }
  uselistorder i32 %v1_a408, { 2, 0, 1 }
  uselistorder i32 %v1_a3f8, { 1, 0 }
  uselistorder i32 %v1_a3d8, { 1, 0 }
  uselistorder i32 %v1_a3d4, { 1, 0 }
  uselistorder i32 %v1_a3d0, { 1, 0 }
  uselistorder i32 %v1_a3ac, { 2, 0, 1 }
  uselistorder i1 %v2_a35c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a350, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a348, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a330, { 1, 0 }
  uselistorder i1 %v7_a304, { 1, 0 }
  uselistorder i32 %v3_a300, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_a2ec, { 2, 1, 0 }
  uselistorder i32 %v6_a2dc, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_a2c8, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_a1f8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a1dc, { 2, 5, 4, 3, 1, 0, 6 }
  uselistorder i32 %v1_a18c, { 1, 2, 0 }
  uselistorder i32 %v6_a160, { 2, 1, 3, 0 }
  uselistorder i32 %v7_a148, { 0, 2, 1, 3 }
  uselistorder i32 %v6_a124, { 1, 2, 0 }
  uselistorder i32 %v2_a10c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_a0e0, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 51, 50, 53, 52, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_a880, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a854, { 1, 0 }
  uselistorder label %dec_label_pc_a68c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a5f4, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb78, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_a898(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a898:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a898 = load i32, i32* @r4, align 4
  %v12_a898 = load i32, i32* @r7, align 4
  %v1_a89c = urem i32 %arg2, 256
  store i32 %v1_a89c, i32* %fp.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_a89c, i32* %r0.global-to-local, align 4
  %v1_a8b4 = urem i32 %arg4, 256
  store i32 %v1_a8b4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a8c4 = call i32 @function_10ee8(i32 %v1_a89c, i32 4)
  %v0_a8c8 = load i32, i32* @r5, align 4
  store i32 %v0_a8c8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a8d0 = load i32, i32* @r7, align 4
  store i32 %v0_a8d0, i32* %r3.global-to-local, align 4
  store i32 %v2_a8c4, i32* %sb.global-to-local, align 4
  %v0_a8d8 = load i32, i32* @r4, align 4
  store i32 %v0_a8d8, i32* %r0.global-to-local, align 4
  %v5_a8dc = inttoptr i32 %v0_a8c8 to i32*
  %v6_a8dc = call i32 @function_829c(i32 %v0_a8d8, i32* %v5_a8dc, i32 2, i32 %v0_a8d0, i32 ptrtoint (i32* @0 to i32))
  %v1_a8e8 = urem i32 %v6_a8dc, 256
  store i32 %v1_a8e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8f4 = load i32, i32* @r5, align 4
  store i32 %v0_a8f4, i32* %r1.global-to-local, align 4
  %v0_a8f8 = load i32, i32* @r4, align 4
  store i32 %v0_a8f8, i32* %r0.global-to-local, align 4
  %v5_a8fc = trunc i32 %v6_a8dc to i8
  %v6_a900 = inttoptr i32 %v0_a8f4 to i32*
  %v7_a900 = call i32 @function_829c(i32 %v0_a8f8, i32* %v6_a900, i32 3, i32 65535, i32 %v6_a8dc)
  %v0_a904 = load i32, i32* @r5, align 4
  store i32 %v0_a904, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a914 = load i32, i32* @r4, align 4
  store i32 %v0_a914, i32* %r0.global-to-local, align 4
  %v5_a918 = inttoptr i32 %v0_a904 to i32*
  %v6_a918 = call i32 @function_829c(i32 %v0_a914, i32* %v5_a918, i32 4, i32 64, i32 %v7_a900)
  %v1_a920 = urem i32 %v6_a918, 256
  store i32 %v1_a920, i32* %ip.global-to-local, align 4
  %v0_a924 = load i32, i32* @r5, align 4
  store i32 %v0_a924, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a930 = load i32, i32* @r4, align 4
  store i32 %v0_a930, i32* %r0.global-to-local, align 4
  %sext10 = mul i32 %v6_a918, 16777216
  %v5_a938 = sdiv i32 %sext10, 16777216
  %v6_a938 = inttoptr i32 %v0_a924 to i32*
  %v7_a938 = call i32 @function_829c(i32 %v0_a930, i32* %v6_a938, i32 5, i32 1, i32 %v5_a938)
  %v1_a944 = urem i32 %v7_a938, 256
  store i32 %v1_a944, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a950 = load i32, i32* @r5, align 4
  store i32 %v0_a950, i32* %r1.global-to-local, align 4
  %v0_a954 = load i32, i32* @r4, align 4
  store i32 %v0_a954, i32* %r0.global-to-local, align 4
  %v5_a95c = inttoptr i32 %v0_a950 to i32*
  %v6_a95c = call i32 @function_829c(i32 %v0_a954, i32* %v5_a95c, i32 6, i32 65535, i32 %v1_a944)
  %v0_a968 = load i32, i32* @r5, align 4
  store i32 %v0_a968, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a974 = load i32, i32* @r4, align 4
  store i32 %v0_a974, i32* %r0.global-to-local, align 4
  %v5_a978 = inttoptr i32 %v0_a968 to i32*
  %v6_a978 = call i32 @function_829c(i32 %v0_a974, i32* %v5_a978, i32 7, i32 65535, i32 %v6_a95c)
  %v0_a984 = load i32, i32* @r5, align 4
  store i32 %v0_a984, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a990 = load i32, i32* @r4, align 4
  store i32 %v0_a990, i32* %r0.global-to-local, align 4
  %v5_a994 = inttoptr i32 %v0_a984 to i32*
  %v6_a994 = call i32 @function_829c(i32 %v0_a990, i32* %v5_a994, i32 16, i32 65535, i32 %v6_a978)
  %v0_a998 = load i32, i32* @r5, align 4
  store i32 %v0_a998, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_a9a4 = load i32, i32* @r7, align 4
  store i32 %v0_a9a4, i32* %r3.global-to-local, align 4
  %v0_a9a8 = load i32, i32* @r4, align 4
  store i32 %v0_a9a8, i32* %r0.global-to-local, align 4
  %v5_a9ac = inttoptr i32 %v0_a998 to i32*
  %v6_a9ac = call i32 @function_829c(i32 %v0_a9a8, i32* %v5_a9ac, i32 17, i32 %v0_a9a4, i32 %v6_a994)
  %v0_a9b0 = load i32, i32* @r5, align 4
  store i32 %v0_a9b0, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_a9bc = load i32, i32* @r7, align 4
  store i32 %v0_a9bc, i32* %r3.global-to-local, align 4
  %v0_a9c0 = load i32, i32* @r4, align 4
  store i32 %v0_a9c0, i32* %r0.global-to-local, align 4
  %v5_a9c4 = inttoptr i32 %v0_a9b0 to i32*
  %v6_a9c4 = call i32 @function_829c(i32 %v0_a9c0, i32* %v5_a9c4, i32 10, i32 %v0_a9bc, i32 %v6_a9ac)
  %v0_a9c8 = load i32, i32* @r5, align 4
  store i32 %v0_a9c8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v0_a9d4 = load i32, i32* @r7, align 4
  store i32 %v0_a9d4, i32* %r3.global-to-local, align 4
  %v0_a9d8 = load i32, i32* @r4, align 4
  store i32 %v0_a9d8, i32* %r0.global-to-local, align 4
  %v5_a9dc = inttoptr i32 %v0_a9c8 to i32*
  %v6_a9dc = call i32 @function_829c(i32 %v0_a9d8, i32* %v5_a9dc, i32 11, i32 %v0_a9d4, i32 %v6_a9c4)
  %v0_a9e0 = load i32, i32* @r5, align 4
  store i32 %v0_a9e0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_a9ec = load i32, i32* @r7, align 4
  store i32 %v0_a9ec, i32* %r3.global-to-local, align 4
  %v0_a9f0 = load i32, i32* @r4, align 4
  store i32 %v0_a9f0, i32* %r0.global-to-local, align 4
  %v5_a9f4 = inttoptr i32 %v0_a9e0 to i32*
  %v6_a9f4 = call i32 @function_829c(i32 %v0_a9f0, i32* %v5_a9f4, i32 12, i32 %v0_a9ec, i32 %v6_a9dc)
  %v0_a9f8 = load i32, i32* @r5, align 4
  store i32 %v0_a9f8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_aa04 = load i32, i32* @r7, align 4
  store i32 %v0_aa04, i32* %r3.global-to-local, align 4
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %r0.global-to-local, align 4
  %v5_aa0c = inttoptr i32 %v0_a9f8 to i32*
  %v6_aa0c = call i32 @function_829c(i32 %v0_aa08, i32* %v5_aa0c, i32 13, i32 %v0_aa04, i32 %v6_a9f4)
  %v0_aa10 = load i32, i32* @r5, align 4
  store i32 %v0_aa10, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r4, align 4
  store i32 %v0_aa20, i32* %r0.global-to-local, align 4
  %v5_aa24 = inttoptr i32 %v0_aa10 to i32*
  %v6_aa24 = call i32 @function_829c(i32 %v0_aa20, i32* %v5_aa24, i32 14, i32 1, i32 %v6_aa0c)
  %v0_aa28 = load i32, i32* @r5, align 4
  store i32 %v0_aa28, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_aa34 = load i32, i32* @r7, align 4
  store i32 %v0_aa34, i32* %r3.global-to-local, align 4
  %v0_aa38 = load i32, i32* @r4, align 4
  store i32 %v0_aa38, i32* %r0.global-to-local, align 4
  %v5_aa3c = inttoptr i32 %v0_aa28 to i32*
  %v6_aa3c = call i32 @function_829c(i32 %v0_aa38, i32* %v5_aa3c, i32 15, i32 %v0_aa34, i32 %v6_aa24)
  %v0_aa44 = load i32, i32* @r5, align 4
  store i32 %v0_aa44, i32* %r1.global-to-local, align 4
  %v2_aa48 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_aa48, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_aa54 = load i32, i32* @r4, align 4
  store i32 %v0_aa54, i32* %r0.global-to-local, align 4
  %v5_aa58 = inttoptr i32 %v0_aa44 to i32*
  %v6_aa58 = call i32 @function_8230(i32 %v0_aa54, i32* %v5_aa58, i32 24, i32 %v2_aa48, i32 %v6_aa3c)
  %v0_aa60 = load i32, i32* @r7, align 4
  store i32 %v0_aa60, i32* %r0.global-to-local, align 4
  %v1_aa64 = inttoptr i32 %v0_aa60 to i32*
  %v2_aa64 = call i32 @function_10904(i32* %v1_aa64)
  %v1_aa68 = load i32, i32* @r6, align 4
  %v2_aa68 = add i32 %v1_aa68, %v2_aa64
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_aa7c = call i32 @function_10bfc(i32 2, i32 3, i32 6)
  store i32 %v3_aa7c, i32* %r0.global-to-local, align 4
  %v7_aa80 = icmp eq i32 %v3_aa7c, -1
  store i1 %v7_aa80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aa7c, i32* %sl.global-to-local, align 4
  br i1 %v7_aa80, label %dec_label_pc_affc, label %dec_label_pc_aa8c

dec_label_pc_aa8c:                                ; preds = %dec_label_pc_a898
  store i32 1, i32* %stack_var_-40, align 4
  %v6_aa94 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_aa94, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_aa9c = load i32, i32* @r7, align 4
  store i32 %v0_aa9c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_aaa8 = call i32 @function_10bcc(i32 %v3_aa7c, i32 %v0_aa9c, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_aaa8, i32* %r0.global-to-local, align 4
  %v7_aaac = icmp eq i32 %v6_aaa8, -1
  store i1 %v7_aaac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aaac, label %dec_label_pc_b004, label %dec_label_pc_aab4

dec_label_pc_aab4:                                ; preds = %dec_label_pc_aa8c
  %v3_aac8 = mul i32 %v6_a95c, 65536
  store i32 %v3_aac8, i32* @r4, align 4
  %v3_aacc = urem i32 %v7_a900, 65536
  store i32 %v3_aacc, i32* %ip.global-to-local, align 4
  %v3_aad0 = urem i32 %v6_a95c, 65536
  store i32 %v3_aad0, i32* %r0.global-to-local, align 4
  %v3_aad4 = urem i32 %v6_a978, 65536
  store i32 %v3_aad4, i32* %r2.global-to-local, align 4
  %v1_aad8 = urem i32 %v6_a9c4, 256
  store i32 %v1_aad8, i32* %r3.global-to-local, align 4
  %v0_aadc = load i32, i32* %fp.global-to-local, align 4
  %v2_aadc = icmp eq i32 %v0_aadc, 0
  store i1 %v2_aadc, i1* %cpsr_z.global-to-local, align 1
  %v0_aae0 = load i32, i32* @r7, align 4
  store i32 %v0_aae0, i32* %stack_var_-40, align 4
  %tmp69 = icmp slt i32 %v0_aadc, 1
  br i1 %tmp69, label %dec_label_pc_ad9c.preheader, label %dec_label_pc_aaf8

dec_label_pc_aaf8:                                ; preds = %dec_label_pc_aab4
  %v1_ab00 = urem i32 %v7_a900, 256
  %v1_ab14 = urem i32 %v6_a978, 256
  %tmp70 = mul i32 %v6_a994, 256
  %v1_ab1c = and i32 %tmp70, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp71 = udiv i32 %v6_a994, 256
  %v4_ab20 = urem i32 %tmp71, 256
  %v5_ab20 = or i32 %v4_ab20, %v1_ab1c
  %v3_ab24 = mul nuw nsw i32 %v1_ab14, 256
  %tmp72 = udiv i32 %v6_a978, 256
  %v4_ab30 = urem i32 %tmp72, 256
  %v5_ab30 = or i32 %v4_ab30, %v3_ab24
  store i32 %v5_ab30, i32* @r6, align 4
  %v1_ab10 = mul i32 %v6_a95c, 256
  %v3_ab34 = and i32 %v1_ab10, 65280
  store i32 %v3_ab34, i32* %r1.global-to-local, align 4
  %v3_ab40 = mul nuw nsw i32 %v1_ab00, 256
  %tmp73 = udiv i32 %v6_a95c, 256
  %v1_ab48 = urem i32 %v6_a9c4, 2
  %tmp74 = udiv i32 %v7_a900, 256
  %v4_ab4c = urem i32 %tmp74, 256
  %v5_ab4c = or i32 %v4_ab4c, %v3_ab40
  store i32 %v5_ab4c, i32* @lr, align 4
  %v1_ab54 = urem i32 %v6_a9dc, 2
  %v1_ab58 = urem i32 %v6_aa0c, 2
  %sext11 = mul i32 %tmp73, 16777216
  %v4_ab74 = sdiv i32 %sext11, 16777216
  %v1_ab78 = urem i32 %v6_a9f4, 2
  %v1_ab7c = urem i32 %v6_aa24, 2
  %v1_ab88 = urem i32 %v6_aa3c, 2
  store i32 %v1_ab88, i32* %r0.global-to-local, align 4
  store i32 %v1_ab00, i32* %r2.global-to-local, align 4
  %v3_ab90 = ashr i32 %sext11, 31
  store i32 %v3_ab90, i32* %r3.global-to-local, align 4
  store i32 %v1_ab14, i32* %ip.global-to-local, align 4
  %v5_aba4 = trunc i32 %v3_ab90 to i8
  store i32 %v0_aae0, i32* @r4, align 4
  store i32 %v0_aae0, i32* @r5, align 4
  store i32 6, i32* @r7, align 4
  %sext = mul i32 %v7_a900, 16777216
  %v4_ac0c = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %tmp74, 16777216
  %v4_ac10 = sdiv i32 %sext8, 16777216
  %tmp = sub nsw i32 0, %v1_ab48
  %v4_ac6c = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_ab54
  %v4_ac80 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_ab78
  %v4_ac94 = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_ab58
  %v4_aca8 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_ab7c
  %v3_acbc = and i32 %tmp81, 2
  %sext9 = mul i32 %v6_a978, 16777216
  %v7_acec = sdiv i32 %sext9, 16777216
  br label %dec_label_pc_abb8

dec_label_pc_abb8:                                ; preds = %bb76, %dec_label_pc_aaf8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_abc0 = call i32 @function_10ee8(i32 128, i32 1)
  store i32 %v2_abc0, i32* %r0.global-to-local, align 4
  %v3_abc4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_abc4, i32* %r2.global-to-local, align 4
  %v1_abc8 = load i32, i32* %sb.global-to-local, align 4
  %v2_abc8 = load i32, i32* @r4, align 4
  %v5_abc8 = mul i32 %v2_abc8, 4
  %v6_abc8 = add i32 %v5_abc8, %v1_abc8
  %v7_abc8 = inttoptr i32 %v6_abc8 to i32*
  store i32 %v2_abc0, i32* %v7_abc8, align 4
  %v0_abcc = load i32, i32* %sb.global-to-local, align 4
  %v1_abcc = load i32, i32* %r2.global-to-local, align 4
  %v4_abcc = mul i32 %v1_abcc, 4
  %v5_abcc = add i32 %v4_abcc, %v0_abcc
  %v6_abcc = inttoptr i32 %v5_abcc to i32*
  %v7_abcc = load i32, i32* %v6_abcc, align 4
  store i32 %v7_abcc, i32* %r4.global-to-local, align 4
  %v1_abd0 = inttoptr i32 %v7_abcc to i8*
  %v2_abd0 = load i8, i8* %v1_abd0, align 1
  %tmp82 = urem i8 %v2_abd0, 16
  %v1_abd4 = zext i8 %tmp82 to i32
  %v1_abd8 = or i32 %v1_abd4, 64
  store i32 %v1_abd8, i32* %r3.global-to-local, align 4
  %v1_abdc = trunc i32 %v1_abd8 to i8
  store i8 %v1_abdc, i8* %v1_abd0, align 1
  %v0_abe0 = load i32, i32* %r4.global-to-local, align 4
  %v1_abe0 = inttoptr i32 %v0_abe0 to i8*
  %v2_abe0 = load i8, i8* %v1_abe0, align 1
  %v1_abe4 = and i8 %v2_abe0, -16
  %v1_abe8 = or i8 %v1_abe4, 5
  store i32 %v1_a944, i32* %r0.global-to-local, align 4
  store i8 %v1_abe8, i8* %v1_abe0, align 1
  %v2_abf8 = load i32, i32* %r4.global-to-local, align 4
  %v3_abf8 = add i32 %v2_abf8, 1
  %v4_abf8 = inttoptr i32 %v3_abf8 to i8*
  store i8 %v5_a8fc, i8* %v4_abf8, align 1
  %v0_abfc = load i32, i32* %r0.global-to-local, align 4
  %v2_abfc = icmp eq i32 %v0_abfc, 0
  store i1 %v2_abfc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_a938, i32* %r0.global-to-local, align 4
  %v2_ac08 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac08 = add i32 %v2_ac08, 3
  %v4_ac08 = inttoptr i32 %v3_ac08 to i8*
  store i8 60, i8* %v4_ac08, align 1
  store i32 %v4_ac0c, i32* %ip.global-to-local, align 4
  store i32 %v4_ac10, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* %r0.global-to-local, align 4
  %v1_ac14 = trunc i32 %v0_ac14 to i8
  %v2_ac14 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac14 = add i32 %v2_ac14, 8
  %v4_ac14 = inttoptr i32 %v3_ac14 to i8*
  store i8 %v1_ac14, i8* %v4_ac14, align 1
  %v0_ac18 = load i32, i32* @r7, align 4
  %v1_ac18 = trunc i32 %v0_ac18 to i8
  %v2_ac18 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac18 = add i32 %v2_ac18, 9
  %v4_ac18 = inttoptr i32 %v3_ac18 to i8*
  store i8 %v1_ac18, i8* %v4_ac18, align 1
  %v3_ac1c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ac1c, i32* %r2.global-to-local, align 4
  %v0_ac20 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac20 = trunc i32 %v0_ac20 to i8
  %v2_ac20 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac20 = add i32 %v2_ac20, 4
  %v4_ac20 = inttoptr i32 %v3_ac20 to i8*
  store i8 %v1_ac20, i8* %v4_ac20, align 1
  %v0_ac24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac24, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_abb8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ac28 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac28 = add i32 %v3_ac28, 6
  %v5_ac28 = inttoptr i32 %v4_ac28 to i8*
  store i8 64, i8* %v5_ac28, align 1
  %v0_ac48.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_abb8, %bb
  %v0_ac48 = phi i1 [ true, %dec_label_pc_abb8 ], [ %v0_ac48.pre, %bb ]
  %v0_ac2c = load i32, i32* %r2.global-to-local, align 4
  %v5_ac30 = mul i32 %v0_ac2c, 24
  store i32 %v5_ac30, i32* %r3.global-to-local, align 4
  store i32 %v6_aa58, i32* %r2.global-to-local, align 4
  %v1_ac38 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac38 = add i32 %v1_ac38, 12
  %v3_ac38 = inttoptr i32 %v2_ac38 to i32*
  store i32 %v6_aa58, i32* %v3_ac38, align 4
  %v0_ac3c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac3c = load i32, i32* @r8, align 4
  %v2_ac3c = add i32 %v1_ac3c, %v0_ac3c
  store i32 %v2_ac3c, i32* %r3.global-to-local, align 4
  %v1_ac40 = add i32 %v2_ac3c, 16
  %v2_ac40 = inttoptr i32 %v1_ac40 to i32*
  %v3_ac40 = load i32, i32* %v2_ac40, align 4
  store i32 %v3_ac40, i32* %r2.global-to-local, align 4
  store i32 %v4_ab74, i32* %r3.global-to-local, align 4
  br i1 %v0_ac48, label %bb76, label %bb75

bb75:                                             ; preds = %.thread
  %v1_ac48 = load i32, i32* @r5, align 4
  %v2_ac48 = trunc i32 %v1_ac48 to i8
  %v3_ac48 = load i32, i32* %r4.global-to-local, align 4
  %v4_ac48 = add i32 %v3_ac48, 7
  %v5_ac48 = inttoptr i32 %v4_ac48 to i8*
  store i8 %v2_ac48, i8* %v5_ac48, align 1
  br label %bb76

bb76:                                             ; preds = %.thread, %bb75
  %v0_ac4c = load i32, i32* %ip.global-to-local, align 4
  %v1_ac4c = trunc i32 %v0_ac4c to i8
  %v2_ac4c = load i32, i32* %r4.global-to-local, align 4
  %v3_ac4c = add i32 %v2_ac4c, 5
  %v4_ac4c = inttoptr i32 %v3_ac4c to i8*
  store i8 %v1_ac4c, i8* %v4_ac4c, align 1
  %v0_ac50 = load i32, i32* @r5, align 4
  %v1_ac50 = trunc i32 %v0_ac50 to i8
  %v2_ac50 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac50 = add i32 %v2_ac50, 2
  %v4_ac50 = inttoptr i32 %v3_ac50 to i8*
  store i8 %v1_ac50, i8* %v4_ac50, align 1
  %v0_ac54 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac54 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac54 = add i32 %v1_ac54, 16
  %v3_ac54 = inttoptr i32 %v2_ac54 to i32*
  store i32 %v0_ac54, i32* %v3_ac54, align 4
  %v0_ac58 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i8
  %v2_ac58 = load i32, i32* %r4.global-to-local, align 4
  %v3_ac58 = add i32 %v2_ac58, 20
  %v4_ac58 = inttoptr i32 %v3_ac58 to i8*
  store i8 %v1_ac58, i8* %v4_ac58, align 1
  %v0_ac5c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac5c = add i32 %v0_ac5c, 20
  store i32 %v1_ac5c, i32* %r1.global-to-local, align 4
  %v1_ac60 = add i32 %v0_ac5c, 33
  %v2_ac60 = inttoptr i32 %v1_ac60 to i8*
  %v3_ac60 = load i8, i8* %v2_ac60, align 1
  %v4_ac60 = zext i8 %v3_ac60 to i32
  store i32 %v1_ab48, i32* %ip.global-to-local, align 4
  %v1_ac68 = and i32 %v4_ac60, 223
  %v5_ac6c = or i32 %v1_ac68, %v4_ac6c
  store i32 %v5_ac6c, i32* %r3.global-to-local, align 4
  %v1_ac70 = trunc i32 %v5_ac6c to i8
  store i8 %v1_ac70, i8* %v2_ac60, align 1
  %v0_ac74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac74 = add i32 %v0_ac74, 13
  %v2_ac74 = inttoptr i32 %v1_ac74 to i8*
  %v3_ac74 = load i8, i8* %v2_ac74, align 1
  %v4_ac74 = zext i8 %v3_ac74 to i32
  store i32 %v1_ab54, i32* %r0.global-to-local, align 4
  %v1_ac7c = and i32 %v4_ac74, 239
  %v5_ac80 = or i32 %v1_ac7c, %v4_ac80
  store i32 %v5_ac80, i32* %r2.global-to-local, align 4
  %v1_ac84 = trunc i32 %v5_ac80 to i8
  store i8 %v1_ac84, i8* %v2_ac74, align 1
  %v0_ac88 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac88 = add i32 %v0_ac88, 13
  %v2_ac88 = inttoptr i32 %v1_ac88 to i8*
  %v3_ac88 = load i8, i8* %v2_ac88, align 1
  %v4_ac88 = zext i8 %v3_ac88 to i32
  store i32 %v1_ab78, i32* %r2.global-to-local, align 4
  %v1_ac90 = and i32 %v4_ac88, 247
  %v5_ac94 = or i32 %v1_ac90, %v4_ac94
  store i32 %v5_ac94, i32* %r3.global-to-local, align 4
  %v1_ac98 = trunc i32 %v5_ac94 to i8
  store i8 %v1_ac98, i8* %v2_ac88, align 1
  %v0_ac9c = load i32, i32* %r1.global-to-local, align 4
  %v1_ac9c = add i32 %v0_ac9c, 13
  %v2_ac9c = inttoptr i32 %v1_ac9c to i8*
  %v3_ac9c = load i8, i8* %v2_ac9c, align 1
  %v4_ac9c = zext i8 %v3_ac9c to i32
  store i32 %v1_ab58, i32* %r3.global-to-local, align 4
  %v1_aca4 = and i32 %v4_ac9c, 251
  %v5_aca8 = or i32 %v1_aca4, %v4_aca8
  store i32 %v5_aca8, i32* %r2.global-to-local, align 4
  %v1_acac = trunc i32 %v5_aca8 to i8
  store i8 %v1_acac, i8* %v2_ac9c, align 1
  %v0_acb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_acb0 = add i32 %v0_acb0, 13
  %v2_acb0 = inttoptr i32 %v1_acb0 to i8*
  %v3_acb0 = load i8, i8* %v2_acb0, align 1
  %v4_acb0 = zext i8 %v3_acb0 to i32
  store i32 %v1_ab7c, i32* %ip.global-to-local, align 4
  %v1_acb8 = and i32 %v4_acb0, 253
  %v4_acbc = or i32 %v1_acb8, %v3_acbc
  store i32 %v4_acbc, i32* %r3.global-to-local, align 4
  %v1_acc0 = trunc i32 %v4_acbc to i8
  store i8 %v1_acc0, i8* %v2_acb0, align 1
  %v0_acc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_acc4 = add i32 %v0_acc4, 12
  %v2_acc4 = inttoptr i32 %v1_acc4 to i8*
  %v3_acc4 = load i8, i8* %v2_acc4, align 1
  %v4_acc4 = zext i8 %v3_acc4 to i32
  store i32 %v4_acc4, i32* %r2.global-to-local, align 4
  %v1_acc8 = add i32 %v0_acc4, 13
  %v2_acc8 = inttoptr i32 %v1_acc8 to i8*
  %v3_acc8 = load i8, i8* %v2_acc8, align 1
  %v4_acc8 = zext i8 %v3_acc8 to i32
  %tmp83 = urem i8 %v3_acc4, 16
  %v1_acd0 = zext i8 %tmp83 to i32
  %v1_acd4 = and i32 %v4_acc8, 254
  %v2_acd8 = or i32 %v1_acd4, %v1_ab88
  %v1_acdc = or i32 %v1_acd0, 160
  store i32 %v1_acdc, i32* %r2.global-to-local, align 4
  %v1_ace0 = trunc i32 %v2_acd8 to i8
  store i8 %v1_ace0, i8* %v2_acc8, align 1
  %v0_ace4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ace4 = trunc i32 %v0_ace4 to i8
  %v2_ace4 = load i32, i32* %r1.global-to-local, align 4
  %v3_ace4 = add i32 %v2_ace4, 12
  %v4_ace4 = inttoptr i32 %v3_ace4 to i8*
  store i8 %v1_ace4, i8* %v4_ace4, align 1
  store i32 %v7_acec, i32* %r3.global-to-local, align 4
  store i32 %v5_ab20, i32* %ip.global-to-local, align 4
  %v2_acf4 = load i32, i32* %r1.global-to-local, align 4
  %v3_acf4 = add i32 %v2_acf4, 1
  %v4_acf4 = inttoptr i32 %v3_acf4 to i8*
  store i8 %v5_aba4, i8* %v4_acf4, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_ad00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad00 = trunc i32 %v0_ad00 to i8
  %v2_ad00 = load i32, i32* %r1.global-to-local, align 4
  %v3_ad00 = add i32 %v2_ad00, 3
  %v4_ad00 = inttoptr i32 %v3_ad00 to i8*
  store i8 %v1_ad00, i8* %v4_ad00, align 1
  %v0_ad04 = load i32, i32* %ip.global-to-local, align 4
  %v1_ad04 = load i32, i32* %r1.global-to-local, align 4
  %v2_ad04 = add i32 %v1_ad04, 4
  %v3_ad04 = inttoptr i32 %v2_ad04 to i32*
  store i32 %v0_ad04, i32* %v3_ad04, align 4
  %v0_ad08 = load i32, i32* @r6, align 4
  %v1_ad08 = trunc i32 %v0_ad08 to i8
  %v2_ad08 = load i32, i32* %r1.global-to-local, align 4
  %v3_ad08 = add i32 %v2_ad08, 2
  %v4_ad08 = inttoptr i32 %v3_ad08 to i8*
  store i8 %v1_ad08, i8* %v4_ad08, align 1
  %v0_ad0c = load i32, i32* %r2.global-to-local, align 4
  %v1_ad0c = trunc i32 %v0_ad0c to i8
  %v2_ad0c = load i32, i32* %r4.global-to-local, align 4
  %v3_ad0c = add i32 %v2_ad0c, 41
  %v4_ad0c = inttoptr i32 %v3_ad0c to i8*
  store i8 %v1_ad0c, i8* %v4_ad0c, align 1
  %v0_ad10 = load i32, i32* %r0.global-to-local, align 4
  %v1_ad10 = trunc i32 %v0_ad10 to i8
  %v2_ad10 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad10 = add i32 %v2_ad10, 40
  %v4_ad10 = inttoptr i32 %v3_ad10 to i8*
  store i8 %v1_ad10, i8* %v4_ad10, align 1
  %v0_ad14 = call i32 @function_d228()
  %v1_ad18 = urem i32 %v0_ad14, 16
  %v1_ad1c = or i32 %v1_ad18, 1392
  %v1_ad20 = add nuw nsw i32 %v1_ad1c, 8
  %v3_ad24 = mul nuw nsw i32 %v1_ad20, 65536
  store i32 %v3_ad24, i32* %r0.global-to-local, align 4
  %v3_ad28 = mul nuw nsw i32 %v1_ad20, 256
  %v1_ad2c = and i32 %v3_ad28, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v5_ad30 = or i32 %v1_ad2c, 5
  store i32 %v5_ad30, i32* %r3.global-to-local, align 4
  %v2_ad34 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad34 = add i32 %v2_ad34, 42
  %v4_ad34 = inttoptr i32 %v3_ad34 to i8*
  store i8 5, i8* %v4_ad34, align 1
  %v0_ad38 = load i32, i32* %r3.global-to-local, align 4
  %v3_ad38 = sdiv i32 %v0_ad38, 256
  store i32 %v3_ad38, i32* %r1.global-to-local, align 4
  %v0_ad3c = load i32, i32* %r4.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v1_ad44 = trunc i32 %v3_ad38 to i8
  %v3_ad44 = add i32 %v0_ad3c, 43
  %v4_ad44 = inttoptr i32 %v3_ad44 to i8*
  store i8 %v1_ad44, i8* %v4_ad44, align 1
  store i32 2, i32* %ip.global-to-local, align 4
  %v0_ad4c = load i32, i32* %r3.global-to-local, align 4
  %v1_ad4c = trunc i32 %v0_ad4c to i8
  %v2_ad4c = load i32, i32* %r4.global-to-local, align 4
  %v3_ad4c = add i32 %v2_ad4c, 46
  %v4_ad4c = inttoptr i32 %v3_ad4c to i8*
  store i8 %v1_ad4c, i8* %v4_ad4c, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_ad58 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad58 = add i32 %v2_ad58, 47
  %v4_ad58 = inttoptr i32 %v3_ad58 to i8*
  store i8 10, i8* %v4_ad58, align 1
  %v0_ad5c = load i32, i32* %r3.global-to-local, align 4
  %v1_ad5c = trunc i32 %v0_ad5c to i8
  %v2_ad5c = load i32, i32* %r4.global-to-local, align 4
  %v3_ad5c = add i32 %v2_ad5c, 44
  %v4_ad5c = inttoptr i32 %v3_ad5c to i8*
  store i8 %v1_ad5c, i8* %v4_ad5c, align 1
  %v0_ad60 = load i32, i32* %ip.global-to-local, align 4
  %v1_ad60 = trunc i32 %v0_ad60 to i8
  %v2_ad60 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad60 = add i32 %v2_ad60, 45
  %v4_ad60 = inttoptr i32 %v3_ad60 to i8*
  store i8 %v1_ad60, i8* %v4_ad60, align 1
  %v0_ad64 = call i32 @function_d228()
  store i32 %v0_ad64, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_ad70 = load i32, i32* %r4.global-to-local, align 4
  %v2_ad70 = add i32 %v1_ad70, 48
  %v3_ad70 = inttoptr i32 %v2_ad70 to i32*
  store i32 %v0_ad64, i32* %v3_ad70, align 4
  %v0_ad74 = load i32, i32* %r3.global-to-local, align 4
  %v1_ad74 = trunc i32 %v0_ad74 to i8
  %v2_ad74 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad74 = add i32 %v2_ad74, 56
  %v4_ad74 = inttoptr i32 %v3_ad74 to i8*
  store i8 %v1_ad74, i8* %v4_ad74, align 1
  %v0_ad78 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad78 = trunc i32 %v0_ad78 to i8
  %v2_ad78 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad78 = add i32 %v2_ad78, 58
  %v4_ad78 = inttoptr i32 %v3_ad78 to i8*
  store i8 %v1_ad78, i8* %v4_ad78, align 1
  %v0_ad7c = load i32, i32* @r7, align 4
  %v1_ad7c = trunc i32 %v0_ad7c to i8
  %v2_ad7c = load i32, i32* %r4.global-to-local, align 4
  %v3_ad7c = add i32 %v2_ad7c, 59
  %v4_ad7c = inttoptr i32 %v3_ad7c to i8*
  store i8 %v1_ad7c, i8* %v4_ad7c, align 1
  %v0_ad80 = load i32, i32* @r5, align 4
  %v1_ad80 = load i32, i32* %r4.global-to-local, align 4
  %v2_ad80 = add i32 %v1_ad80, 52
  %v3_ad80 = inttoptr i32 %v2_ad80 to i32*
  store i32 %v0_ad80, i32* %v3_ad80, align 4
  %v0_ad84 = load i32, i32* %r2.global-to-local, align 4
  %v1_ad84 = trunc i32 %v0_ad84 to i8
  %v2_ad84 = load i32, i32* %r4.global-to-local, align 4
  %v3_ad84 = add i32 %v2_ad84, 57
  %v4_ad84 = inttoptr i32 %v3_ad84 to i8*
  store i8 %v1_ad84, i8* %v4_ad84, align 1
  %v3_ad88 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad88, i32* %r3.global-to-local, align 4
  %v1_ad8c = add i32 %v3_ad88, 1
  store i32 %v1_ad8c, i32* @r4, align 4
  %v0_ad90 = load i32, i32* %fp.global-to-local, align 4
  %v9_ad90 = icmp eq i32 %v0_ad90, %v1_ad8c
  store i1 %v9_ad90, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ad8c, i32* %stack_var_-40, align 4
  %v8_ad98 = icmp sgt i32 %v0_ad90, %v1_ad8c
  br i1 %v8_ad98, label %dec_label_pc_abb8, label %dec_label_pc_ad9c.preheader

dec_label_pc_ad9c.preheader:                      ; preds = %bb76, %dec_label_pc_aab4
  %v0_ada014 = phi i32 [ %v0_aadc, %dec_label_pc_aab4 ], [ %v0_ad90, %bb76 ]
  %v2_adbc = icmp eq i32 %v6_aa58, -1
  %v7_adbc = icmp eq i32 %v6_aa58, -1
  %v3_af4c = icmp eq i32 %v3_aacc, 65535
  %v2_afc8 = icmp eq i32 %v1_aad8, 0
  br label %dec_label_pc_ad9c

dec_label_pc_ad9c:                                ; preds = %dec_label_pc_afe8.dec_label_pc_ad9c_crit_edge, %dec_label_pc_ad9c.preheader
  %v0_ada0 = phi i32 [ %v0_ada0.pre, %dec_label_pc_afe8.dec_label_pc_ad9c_crit_edge ], [ %v0_ada014, %dec_label_pc_ad9c.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ada0 = icmp eq i32 %v0_ada0, 0
  store i1 %v2_ada0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp77 = icmp slt i32 %v0_ada0, 1
  br i1 %tmp77, label %dec_label_pc_afe8, label %dec_label_pc_adac

dec_label_pc_adac:                                ; preds = %dec_label_pc_ad9c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_aeb4

dec_label_pc_adb8:                                ; preds = %dec_label_pc_aeb4
  store i32 %v6_aa58, i32* %r0.global-to-local, align 4
  store i1 %v7_adbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_adbc, label %dec_label_pc_af3c, label %dec_label_pc_adc4

dec_label_pc_adc4:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_adb8
  store i32 %v3_aacc, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_af4c, label %dec_label_pc_af58, label %dec_label_pc_add8

dec_label_pc_add8:                                ; preds = %dec_label_pc_af3c.dec_label_pc_add8_crit_edge, %dec_label_pc_adc4
  %v1_addc = phi i32 [ %v1_addc.pre, %dec_label_pc_af3c.dec_label_pc_add8_crit_edge ], [ 65535, %dec_label_pc_adc4 ]
  store i32 %v3_aad0, i32* %r3.global-to-local, align 4
  %v9_addc = icmp eq i32 %v3_aad0, %v1_addc
  store i1 %v9_addc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_addc, label %dec_label_pc_af74, label %dec_label_pc_ade4

dec_label_pc_ade4:                                ; preds = %dec_label_pc_af58.dec_label_pc_ade4_crit_edge, %dec_label_pc_add8
  %v1_ade8 = phi i32 [ %v1_ade8.pre, %dec_label_pc_af58.dec_label_pc_ade4_crit_edge ], [ %v1_addc, %dec_label_pc_add8 ]
  store i32 %v3_aad4, i32* %ip.global-to-local, align 4
  %v9_ade8 = icmp eq i32 %v3_aad4, %v1_ade8
  store i1 %v9_ade8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ade8, label %dec_label_pc_af90, label %dec_label_pc_adf0

dec_label_pc_adf0:                                ; preds = %dec_label_pc_af74.dec_label_pc_adf0_crit_edge, %dec_label_pc_ade4
  %v1_adf4 = phi i32 [ %v1_adf4.pre, %dec_label_pc_af74.dec_label_pc_adf0_crit_edge ], [ %v1_ade8, %dec_label_pc_ade4 ]
  store i32 %v6_a994, i32* %r0.global-to-local, align 4
  %v9_adf4 = icmp eq i32 %v6_a994, %v1_adf4
  store i1 %v9_adf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_adf4, label %dec_label_pc_afac, label %dec_label_pc_adfc

dec_label_pc_adfc:                                ; preds = %dec_label_pc_af90.dec_label_pc_adfc_crit_edge, %dec_label_pc_adf0
  %v1_ae00 = phi i32 [ %v1_ae00.pre, %dec_label_pc_af90.dec_label_pc_adfc_crit_edge ], [ %v1_adf4, %dec_label_pc_adf0 ]
  store i32 %v6_a9ac, i32* %r2.global-to-local, align 4
  %v9_ae00 = icmp eq i32 %v6_a9ac, %v1_ae00
  store i1 %v9_ae00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae00, label %dec_label_pc_afc0, label %dec_label_pc_ae08

dec_label_pc_ae08:                                ; preds = %dec_label_pc_afac, %dec_label_pc_adfc
  store i32 %v1_aad8, i32* %r3.global-to-local, align 4
  store i1 %v2_afc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afc8, label %dec_label_pc_ae14, label %dec_label_pc_afd4

dec_label_pc_ae14:                                ; preds = %dec_label_pc_ae08, %dec_label_pc_afc0, %dec_label_pc_afd4
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ae18 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae18 = trunc i32 %v0_ae18 to i8
  %v2_ae18 = load i32, i32* @r5, align 4
  %v3_ae18 = add i32 %v2_ae18, 10
  %v4_ae18 = inttoptr i32 %v3_ae18 to i8*
  store i8 %v1_ae18, i8* %v4_ae18, align 1
  %v0_ae1c = load i32, i32* %r7.global-to-local, align 4
  %v1_ae1c = trunc i32 %v0_ae1c to i8
  %v2_ae1c = load i32, i32* @r5, align 4
  %v3_ae1c = add i32 %v2_ae1c, 11
  %v4_ae1c = inttoptr i32 %v3_ae1c to i8*
  store i8 %v1_ae1c, i8* %v4_ae1c, align 1
  %v0_ae20 = load i32, i32* @r5, align 4
  store i32 %v0_ae20, i32* @r0, align 4
  %v2_ae24 = call i32 @function_c6b0(i32 %v0_ae20, i32 20)
  %v3_ae24 = trunc i32 %v2_ae24 to i8
  %v4_ae2822 = udiv i32 %v2_ae24, 256
  %v1_ae2c = trunc i32 %v4_ae2822 to i8
  %v2_ae2c = load i32, i32* @r5, align 4
  %v3_ae2c = add i32 %v2_ae2c, 11
  %v4_ae2c = inttoptr i32 %v3_ae2c to i8*
  store i8 %v1_ae2c, i8* %v4_ae2c, align 1
  %v3_ae30 = load i32, i32* @r5, align 4
  %v4_ae30 = add i32 %v3_ae30, 10
  %v5_ae30 = inttoptr i32 %v4_ae30 to i8*
  store i8 %v3_ae24, i8* %v5_ae30, align 1
  %v0_ae34 = load i32, i32* @r6, align 4
  store i32 %v0_ae34, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_ae40 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae40 = trunc i32 %v0_ae40 to i8
  %v3_ae40 = add i32 %v0_ae34, 16
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  %v0_ae44 = load i32, i32* %r7.global-to-local, align 4
  %v1_ae44 = trunc i32 %v0_ae44 to i8
  %v2_ae44 = load i32, i32* @r6, align 4
  %v3_ae44 = add i32 %v2_ae44, 17
  %v4_ae44 = inttoptr i32 %v3_ae44 to i8*
  store i8 %v1_ae44, i8* %v4_ae44, align 1
  %v0_ae48 = load i32, i32* @r5, align 4
  store i32 %v0_ae48, i32* %r0.global-to-local, align 4
  %v4_ae4c = call i32 @function_c70c(i32 %v0_ae48, i32 %v0_ae34, i32 10240, i32 40)
  %v5_ae4c = trunc i32 %v4_ae4c to i8
  store i32 %v4_ae4c, i32* %r0.global-to-local, align 4
  %v4_ae5023 = udiv i32 %v4_ae4c, 256
  %v1_ae54 = trunc i32 %v4_ae5023 to i8
  %v2_ae54 = load i32, i32* @r6, align 4
  %v3_ae54 = add i32 %v2_ae54, 17
  %v4_ae54 = inttoptr i32 %v3_ae54 to i8*
  store i8 %v1_ae54, i8* %v4_ae54, align 1
  %v3_ae58 = load i32, i32* @r6, align 4
  %v4_ae58 = add i32 %v3_ae58, 16
  %v5_ae58 = inttoptr i32 %v4_ae58 to i8*
  store i8 %v5_ae4c, i8* %v5_ae58, align 1
  %v3_ae5c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae5c, i32* %r3.global-to-local, align 4
  %v0_ae60 = load i32, i32* @r5, align 4
  %v1_ae60 = add i32 %v0_ae60, 20
  %v2_ae60 = inttoptr i32 %v1_ae60 to i32*
  %v3_ae60 = load i32, i32* %v2_ae60, align 4
  %v3_ae68 = udiv i32 %v3_ae60, 65536
  store i32 %v3_ae68, i32* %r2.global-to-local, align 4
  %v5_ae6c = mul i32 %v3_ae5c, 24
  %v1_ae70 = load i32, i32* @r8, align 4
  %v2_ae70 = add i32 %v1_ae70, %v5_ae6c
  store i32 %v2_ae70, i32* %ip.global-to-local, align 4
  %v3_ae7421 = udiv i32 %v3_ae60, 16777216
  %v1_ae78 = trunc i32 %v3_ae7421 to i8
  %v3_ae78 = add i32 %v2_ae70, 3
  %v4_ae78 = inttoptr i32 %v3_ae78 to i8*
  store i8 %v1_ae78, i8* %v4_ae78, align 1
  %v0_ae7c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae7c = trunc i32 %v0_ae7c to i8
  %v2_ae7c = load i32, i32* %ip.global-to-local, align 4
  %v3_ae7c = add i32 %v2_ae7c, 2
  %v4_ae7c = inttoptr i32 %v3_ae7c to i8*
  store i8 %v1_ae7c, i8* %v4_ae7c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae84 = load i32, i32* @r5, align 4
  store i32 %v0_ae84, i32* %r1.global-to-local, align 4
  %v0_ae88 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ae88, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_ae94 = load i32, i32* %ip.global-to-local, align 4
  %v6_ae9c = inttoptr i32 %v0_ae84 to i32*
  %v7_ae9c = call i32 @function_10b98(i32 %v0_ae88, i32* %v6_ae9c, i32 60, i32 16384, i32 %v0_ae94, i32 16)
  %v3_aea0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_aea0, i32* %r3.global-to-local, align 4
  %v1_aea4 = add i32 %v3_aea0, 1
  store i32 %v1_aea4, i32* %r0.global-to-local, align 4
  %v0_aea8 = load i32, i32* %fp.global-to-local, align 4
  %v9_aea8 = icmp eq i32 %v0_aea8, %v1_aea4
  store i1 %v9_aea8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aea4, i32* %stack_var_-40, align 4
  %v7_aeb0 = icmp sgt i32 %v0_aea8, %v1_aea4
  br i1 %v7_aeb0, label %dec_label_pc_aeb4, label %dec_label_pc_afe8

dec_label_pc_aeb4:                                ; preds = %dec_label_pc_ae14, %dec_label_pc_adac
  %v1_aec4 = phi i32 [ %v1_aea4, %dec_label_pc_ae14 ], [ 0, %dec_label_pc_adac ]
  %v5_aeb8 = mul i32 %v1_aec4, 24
  %v1_aebc = load i32, i32* @r8, align 4
  %v2_aebc = add i32 %v1_aebc, %v5_aeb8
  store i32 %v2_aebc, i32* %r3.global-to-local, align 4
  %v1_aec0 = add i32 %v2_aebc, 20
  %v2_aec0 = inttoptr i32 %v1_aec0 to i8*
  %v3_aec0 = load i8, i8* %v2_aec0, align 1
  %v4_aec0 = zext i8 %v3_aec0 to i32
  store i32 %v4_aec0, i32* %r2.global-to-local, align 4
  %v0_aec4 = load i32, i32* %sb.global-to-local, align 4
  %v4_aec4 = mul i32 %v1_aec4, 4
  %v5_aec4 = add i32 %v0_aec4, %v4_aec4
  %v6_aec4 = inttoptr i32 %v5_aec4 to i32*
  %v7_aec4 = load i32, i32* %v6_aec4, align 4
  store i32 %v7_aec4, i32* @r5, align 4
  %v2_aec8 = icmp ugt i8 %v3_aec0, 30
  %v7_aec8 = icmp eq i8 %v3_aec0, 31
  store i1 %v7_aec8, i1* %cpsr_z.global-to-local, align 1
  %v1_aecc = add i32 %v7_aec4, 20
  store i32 %v1_aecc, i32* @r6, align 4
  %v2_aed0 = xor i1 %v7_aec8, true
  %v3_aed0 = and i1 %v2_aec8, %v2_aed0
  br i1 %v3_aed0, label %dec_label_pc_adb8, label %dec_label_pc_aed4

dec_label_pc_aed4:                                ; preds = %dec_label_pc_aeb4
  %v1_aed4 = add i32 %v2_aebc, 16
  %v2_aed4 = inttoptr i32 %v1_aed4 to i32*
  %v3_aed4 = load i32, i32* %v2_aed4, align 4
  store i32 %v3_aed4, i32* %r4.global-to-local, align 4
  %v0_aed8 = call i32 @function_d228()
  store i32 %v0_aed8, i32* %r0.global-to-local, align 4
  %v3_aedc = load i32, i32* %stack_var_-40, align 4
  %v5_aee4 = mul i32 %v3_aedc, 24
  %v0_aee8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aeec = load i32, i32* @r8, align 4
  %v2_aeec = add i32 %v1_aeec, %v5_aee4
  store i32 %v2_aeec, i32* %r1.global-to-local, align 4
  %v1_aef0 = and i32 %v0_aee8, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_aef0, i32* %r3.global-to-local, align 4
  %v1_aee8 = udiv i32 %v0_aee8, 256
  %v3_aef4 = and i32 %v1_aee8, 65280
  store i32 %v3_aef4, i32* %r2.global-to-local, align 4
  %v3_aef8 = mul i32 %v0_aee8, 16777216
  store i32 %v3_aef8, i32* %ip.global-to-local, align 4
  %v1_aefc = add i32 %v2_aeec, 20
  %v2_aefc = inttoptr i32 %v1_aefc to i8*
  %v3_aefc = load i8, i8* %v2_aefc, align 1
  %v4_aefc = zext i8 %v3_aefc to i32
  %v4_af00 = mul i32 %v1_aef0, 256
  %v5_af00 = or i32 %v4_af00, %v3_aef8
  store i32 %v5_af00, i32* %ip.global-to-local, align 4
  %v4_af04 = udiv i32 %v0_aee8, 16777216
  %v5_af04 = or i32 %v3_aef4, %v4_af04
  %v2_af08 = or i32 %v5_af04, %v5_af00
  %v7_af0c = lshr i32 %v0_aed8, %v4_aefc
  %v8_af0c = add i32 %v7_af0c, %v2_af08
  store i32 %v8_af0c, i32* %r2.global-to-local, align 4
  %v3_af18 = mul i32 %v8_af0c, 16777216
  %v1_af10 = mul i32 %v8_af0c, 256
  %v4_af1c = and i32 %v1_af10, 16711680
  %v5_af1c = or i32 %v4_af1c, %v3_af18
  store i32 %v5_af1c, i32* %r1.global-to-local, align 4
  store i32 %v6_aa58, i32* %r0.global-to-local, align 4
  %v2_af2c = call i32 @llvm.bswap.i32(i32 %v8_af0c)
  store i32 %v2_af2c, i32* %r3.global-to-local, align 4
  store i1 %v7_adbc, i1* %cpsr_z.global-to-local, align 1
  %v1_af34 = load i32, i32* @r5, align 4
  %v2_af34 = add i32 %v1_af34, 16
  %v3_af34 = inttoptr i32 %v2_af34 to i32*
  store i32 %v2_af2c, i32* %v3_af34, align 4
  br i1 %v2_adbc, label %dec_label_pc_af3c, label %dec_label_pc_adc4

dec_label_pc_af3c:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_adb8
  %v0_af3c = call i32 @function_d228()
  store i32 %v0_af3c, i32* %r0.global-to-local, align 4
  store i32 %v3_aacc, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af4c, i1* %cpsr_z.global-to-local, align 1
  %v1_af50 = load i32, i32* @r5, align 4
  %v2_af50 = add i32 %v1_af50, 12
  %v3_af50 = inttoptr i32 %v2_af50 to i32*
  store i32 %v0_af3c, i32* %v3_af50, align 4
  br i1 %v3_af4c, label %dec_label_pc_af58, label %dec_label_pc_af3c.dec_label_pc_add8_crit_edge

dec_label_pc_af3c.dec_label_pc_add8_crit_edge:    ; preds = %dec_label_pc_af3c
  %v1_addc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_add8

dec_label_pc_af58:                                ; preds = %dec_label_pc_af3c, %dec_label_pc_adc4
  %v0_af58 = call i32 @function_d228()
  %v1_af58 = trunc i32 %v0_af58 to i8
  store i32 %v0_af58, i32* %r0.global-to-local, align 4
  %v4_af5c24 = udiv i32 %v0_af58, 256
  %v1_af60 = trunc i32 %v4_af5c24 to i8
  %v2_af60 = load i32, i32* @r5, align 4
  %v3_af60 = add i32 %v2_af60, 5
  %v4_af60 = inttoptr i32 %v3_af60 to i8*
  store i8 %v1_af60, i8* %v4_af60, align 1
  store i32 %v3_aad0, i32* %r3.global-to-local, align 4
  %v1_af68 = load i32, i32* @r4, align 4
  %v9_af68 = icmp eq i32 %v3_aad0, %v1_af68
  store i1 %v9_af68, i1* %cpsr_z.global-to-local, align 1
  %v3_af6c = load i32, i32* @r5, align 4
  %v4_af6c = add i32 %v3_af6c, 4
  %v5_af6c = inttoptr i32 %v4_af6c to i8*
  store i8 %v1_af58, i8* %v5_af6c, align 1
  %v0_af70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af70, label %dec_label_pc_af74, label %dec_label_pc_af58.dec_label_pc_ade4_crit_edge

dec_label_pc_af58.dec_label_pc_ade4_crit_edge:    ; preds = %dec_label_pc_af58
  %v1_ade8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ade4

dec_label_pc_af74:                                ; preds = %dec_label_pc_af58, %dec_label_pc_add8
  %v0_af74 = call i32 @function_d228()
  %v1_af74 = trunc i32 %v0_af74 to i8
  store i32 %v0_af74, i32* %r0.global-to-local, align 4
  store i32 %v3_aad4, i32* %ip.global-to-local, align 4
  %v4_af7c = sdiv i32 %v0_af74, 256
  store i32 %v4_af7c, i32* %r3.global-to-local, align 4
  %v1_af80 = load i32, i32* @r4, align 4
  %v9_af80 = icmp eq i32 %v3_aad4, %v1_af80
  store i1 %v9_af80, i1* %cpsr_z.global-to-local, align 1
  %v3_af84 = load i32, i32* @r5, align 4
  %v4_af84 = add i32 %v3_af84, 20
  %v5_af84 = inttoptr i32 %v4_af84 to i8*
  store i8 %v1_af74, i8* %v5_af84, align 1
  %v0_af88 = load i32, i32* %r3.global-to-local, align 4
  %v1_af88 = trunc i32 %v0_af88 to i8
  %v2_af88 = load i32, i32* @r6, align 4
  %v3_af88 = add i32 %v2_af88, 1
  %v4_af88 = inttoptr i32 %v3_af88 to i8*
  store i8 %v1_af88, i8* %v4_af88, align 1
  %v0_af8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af8c, label %dec_label_pc_af90, label %dec_label_pc_af74.dec_label_pc_adf0_crit_edge

dec_label_pc_af74.dec_label_pc_adf0_crit_edge:    ; preds = %dec_label_pc_af74
  %v1_adf4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_adf0

dec_label_pc_af90:                                ; preds = %dec_label_pc_af74, %dec_label_pc_ade4
  %v0_af90 = call i32 @function_d228()
  %v1_af90 = trunc i32 %v0_af90 to i8
  %v4_af94 = sdiv i32 %v0_af90, 256
  store i32 %v4_af94, i32* %r3.global-to-local, align 4
  %v3_af98 = load i32, i32* @r6, align 4
  %v4_af98 = add i32 %v3_af98, 2
  %v5_af98 = inttoptr i32 %v4_af98 to i8*
  store i8 %v1_af90, i8* %v5_af98, align 1
  store i32 %v6_a994, i32* %r0.global-to-local, align 4
  %v1_afa0 = load i32, i32* @r4, align 4
  %v9_afa0 = icmp eq i32 %v6_a994, %v1_afa0
  store i1 %v9_afa0, i1* %cpsr_z.global-to-local, align 1
  %v0_afa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afa4 = trunc i32 %v0_afa4 to i8
  %v2_afa4 = load i32, i32* @r6, align 4
  %v3_afa4 = add i32 %v2_afa4, 3
  %v4_afa4 = inttoptr i32 %v3_afa4 to i8*
  store i8 %v1_afa4, i8* %v4_afa4, align 1
  %v0_afa8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afa8, label %dec_label_pc_afac, label %dec_label_pc_af90.dec_label_pc_adfc_crit_edge

dec_label_pc_af90.dec_label_pc_adfc_crit_edge:    ; preds = %dec_label_pc_af90
  %v1_ae00.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_adfc

dec_label_pc_afac:                                ; preds = %dec_label_pc_af90, %dec_label_pc_adf0
  %v0_afac = call i32 @function_d228()
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  store i32 %v6_a9ac, i32* %r2.global-to-local, align 4
  %v1_afb4 = load i32, i32* @r4, align 4
  %v9_afb4 = icmp eq i32 %v6_a9ac, %v1_afb4
  store i1 %v9_afb4, i1* %cpsr_z.global-to-local, align 1
  %v1_afb8 = load i32, i32* @r6, align 4
  %v2_afb8 = add i32 %v1_afb8, 4
  %v3_afb8 = inttoptr i32 %v2_afb8 to i32*
  store i32 %v0_afac, i32* %v3_afb8, align 4
  br i1 %v9_afb4, label %dec_label_pc_afc0, label %dec_label_pc_ae08

dec_label_pc_afc0:                                ; preds = %dec_label_pc_afac, %dec_label_pc_adfc
  %v0_afc0 = call i32 @function_d228()
  store i32 %v0_afc0, i32* %r0.global-to-local, align 4
  store i32 %v1_aad8, i32* %r3.global-to-local, align 4
  store i1 %v2_afc8, i1* %cpsr_z.global-to-local, align 1
  %v1_afcc = load i32, i32* @r6, align 4
  %v2_afcc = add i32 %v1_afcc, 8
  %v3_afcc = inttoptr i32 %v2_afcc to i32*
  store i32 %v0_afc0, i32* %v3_afcc, align 4
  br i1 %v2_afc8, label %dec_label_pc_ae14, label %dec_label_pc_afd4

dec_label_pc_afd4:                                ; preds = %dec_label_pc_ae08, %dec_label_pc_afc0
  %v0_afd4 = call i32 @function_d228()
  %v1_afd4 = trunc i32 %v0_afd4 to i8
  store i32 %v0_afd4, i32* %r0.global-to-local, align 4
  %v4_afd8 = sdiv i32 %v0_afd4, 256
  store i32 %v4_afd8, i32* %r3.global-to-local, align 4
  %v1_afdc = trunc i32 %v4_afd8 to i8
  %v2_afdc = load i32, i32* @r6, align 4
  %v3_afdc = add i32 %v2_afdc, 19
  %v4_afdc = inttoptr i32 %v3_afdc to i8*
  store i8 %v1_afdc, i8* %v4_afdc, align 1
  %v3_afe0 = load i32, i32* @r6, align 4
  %v4_afe0 = add i32 %v3_afe0, 18
  %v5_afe0 = inttoptr i32 %v4_afe0 to i8*
  store i8 %v1_afd4, i8* %v5_afe0, align 1
  br label %dec_label_pc_ae14

dec_label_pc_afe8:                                ; preds = %dec_label_pc_ae14, %dec_label_pc_ad9c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_afec = call i32 @function_10904(i32* null)
  store i32 %v2_afec, i32* %r0.global-to-local, align 4
  store i32 %v2_aa68, i32* %ip.global-to-local, align 4
  %v9_aff4 = icmp eq i32 %v2_aa68, %v2_afec
  store i1 %v9_aff4, i1* %cpsr_z.global-to-local, align 1
  %v6_aff8 = icmp slt i32 %v2_aa68, %v2_afec
  br i1 %v6_aff8, label %dec_label_pc_affc, label %dec_label_pc_afe8.dec_label_pc_ad9c_crit_edge

dec_label_pc_afe8.dec_label_pc_ad9c_crit_edge:    ; preds = %dec_label_pc_afe8
  %v0_ada0.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_ad9c

dec_label_pc_affc:                                ; preds = %dec_label_pc_afe8, %dec_label_pc_a898, %dec_label_pc_b004
  %v29_b000 = phi i32 [ %v3_aa7c, %dec_label_pc_a898 ], [ %v1_b008, %dec_label_pc_b004 ], [ %v2_afec, %dec_label_pc_afe8 ]
  store i32 %v3_a898, i32* %r4.global-to-local, align 4
  store i32 %v12_a898, i32* %r7.global-to-local, align 4
  ret i32 %v29_b000

dec_label_pc_b004:                                ; preds = %dec_label_pc_aa8c
  %v0_b004 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_b004, i32* %r0.global-to-local, align 4
  %v1_b008 = call i32 @function_10660(i32 %v0_b004)
  store i32 %v1_b008, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_affc

; uselistorder directives
  uselistorder i32 %v1_b008, { 1, 0 }
  uselistorder i32 %v4_afd8, { 1, 0 }
  uselistorder i32 %v0_afd4, { 0, 2, 1 }
  uselistorder i32 %v0_af74, { 0, 2, 1 }
  uselistorder i32 %v0_af58, { 0, 2, 1 }
  uselistorder i32 %v2_af2c, { 1, 0 }
  uselistorder i32 %v8_af0c, { 2, 0, 1, 3 }
  uselistorder i32 %v3_aef8, { 1, 0 }
  uselistorder i32 %v0_aee8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_aea4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_ae4c, { 0, 2, 1 }
  uselistorder i32 %v0_ae34, { 1, 0, 2 }
  uselistorder i1 %v2_afc8, { 2, 3, 1, 0 }
  uselistorder i1 %v3_af4c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_adbc, { 2, 1, 0 }
  uselistorder i32 %v1_ad8c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_ad38, { 1, 0 }
  uselistorder i32 %v3_ab90, { 1, 0 }
  uselistorder i32 %v1_ab88, { 1, 0 }
  uselistorder i32 %v1_ab7c, { 1, 0 }
  uselistorder i32 %v1_ab78, { 1, 0 }
  uselistorder i32 %v1_ab58, { 1, 0 }
  uselistorder i32 %v1_ab54, { 1, 0 }
  uselistorder i32 %v1_ab48, { 1, 0 }
  uselistorder i32 %v1_ab14, { 1, 0 }
  uselistorder i32 %v1_ab00, { 1, 0 }
  uselistorder i32 %v0_aae0, { 1, 0, 2 }
  uselistorder i32 %v1_aad8, { 2, 1, 3, 0 }
  uselistorder i32 %v3_aad0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v3_aacc, { 0, 1, 3, 2 }
  uselistorder i1 %v7_aaac, { 1, 0 }
  uselistorder i1 %v7_aa80, { 1, 0 }
  uselistorder i32 %v3_aa7c, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_aa68, { 2, 1, 0 }
  uselistorder i32 %v6_aa58, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_a9ac, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a994, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v6_a95c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_a944, { 1, 2, 0 }
  uselistorder i32 %v6_a8dc, { 1, 2, 0 }
  uselistorder i32 %v1_a89c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 20, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 13, 14, 15, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder label %dec_label_pc_affc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_afd4, { 1, 0 }
  uselistorder label %dec_label_pc_ae14, { 2, 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b014(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b014:
  %r0.global-to-local = alloca i32, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-84 = alloca i8, align 1
  %v1_b018 = urem i32 %arg2, 256
  store i32 %v1_b018, i32* @sl, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %v1_b018, i32* %r0.global-to-local, align 4
  %v1_b02c = urem i32 %arg4, 256
  store i32 %v1_b02c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  %v2_b038 = call i32 @function_10ee8(i32 %v1_b018, i32 4)
  %v0_b044 = load i32, i32* @sl, align 4
  store i32 %v0_b044, i32* %r0.global-to-local, align 4
  %v2_b048 = call i32 @function_10ee8(i32 %v0_b044, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_b054 = load i32, i32* @r5, align 4
  store i32 %v2_b048, i32* @sb, align 4
  %v0_b064 = load i32, i32* @r4, align 4
  store i32 %v0_b064, i32* %r0.global-to-local, align 4
  %v5_b068 = inttoptr i32 %v0_b054 to i32*
  %v6_b068 = call i32 @function_829c(i32 %v0_b064, i32* %v5_b068, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b06c = load i32, i32* @r5, align 4
  %v0_b078 = load i32, i32* @r6, align 4
  %v0_b07c = load i32, i32* @r4, align 4
  store i32 %v0_b07c, i32* %r0.global-to-local, align 4
  %v3_b080 = urem i32 %v6_b068, 65536
  store i32 %v3_b080, i32* @fp, align 4
  %v5_b084 = inttoptr i32 %v0_b06c to i32*
  %v6_b084 = call i32 @function_829c(i32 %v0_b07c, i32* %v5_b084, i32 6, i32 %v0_b078, i32 ptrtoint (i32* @0 to i32))
  %v0_b088 = load i32, i32* @r5, align 4
  %v3_b08c = mul i32 %v6_b084, 65536
  store i32 %v3_b08c, i32* @r8, align 4
  %v0_b098 = load i32, i32* @r4, align 4
  store i32 %v0_b098, i32* %r0.global-to-local, align 4
  %v5_b09c = inttoptr i32 %v0_b088 to i32*
  %v6_b09c = call i32 @function_829c(i32 %v0_b098, i32* %v5_b09c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  %v3_b0ac = urem i32 %v6_b09c, 65536
  %v0_b0b0 = load i32, i32* @r5, align 4
  %v0_b0b4 = load i32, i32* @r4, align 4
  store i32 %v0_b0b4, i32* %r0.global-to-local, align 4
  %v5_b0bc = inttoptr i32 %v0_b0b0 to i32*
  %v6_b0bc = call i32 @function_829c(i32 %v0_b0b4, i32* %v5_b0bc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_b0c8 = urem i32 %v6_b0bc, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_b0e4 = call i32 @function_10904(i32* null)
  %v0_b0e8 = load i32, i32* @r8, align 4
  %v3_b0e8 = udiv i32 %v0_b0e8, 65536
  %v1_b0ec = load i32, i32* @r6, align 4
  %v9_b0ec = icmp eq i32 %v3_b0e8, %v1_b0ec
  %v1_b0f43 = load i32, i32* @r7, align 4
  %v2_b0f44 = add i32 %v1_b0f43, %v2_b0e4
  store i32 %v2_b0f44, i32* %r0.global-to-local, align 4
  br i1 %v9_b0ec, label %dec_label_pc_b2d8, label %bb

bb:                                               ; preds = %dec_label_pc_b014
  %v2_b0f0 = mul nuw nsw i32 %v3_b0e8, 256
  %v4_b0f8 = and i32 %v2_b0f0, 65280
  %v5_b100 = udiv i32 %v0_b0e8, 16777216
  %v6_b100 = or i32 %v4_b0f8, %v5_b100
  br label %dec_label_pc_b108

dec_label_pc_b108:                                ; preds = %bb, %dec_label_pc_b2d8
  %storemerge = phi i32 [ %v6_b100, %bb ], [ %v3_b2e0, %dec_label_pc_b2d8 ]
  store i32 %storemerge, i32* @r7, align 4
  %v0_b108 = load i32, i32* @sl, align 4
  %tmp46 = icmp slt i32 %v0_b108, 1
  br i1 %tmp46, label %dec_label_pc_b2a8, label %dec_label_pc_b110

dec_label_pc_b110:                                ; preds = %dec_label_pc_b108
  %v0_b110 = load i32, i32* @fp, align 4
  %v3_b110 = udiv i32 %v0_b110, 256
  %v5_b11c = trunc i32 %v3_b110 to i8
  store i32 0, i32* @r8, align 4
  store i32 %arg3, i32* @r5, align 4
  %v3_b138 = udiv i32 %v0_b110, 65536
  store i32 0, i32* @r6, align 4
  %v4_b140 = trunc i32 %v3_b138 to i8
  store i8 %v4_b140, i8* %stack_var_-84, align 1
  %v3_b1e8 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_b168

dec_label_pc_b148:                                ; preds = %dec_label_pc_b1c8
  %v0_b148 = load i32, i32* @r6, align 4
  %v1_b148 = load i32, i32* @sb, align 4
  %v2_b148 = add i32 %v1_b148, %v0_b148
  %v3_b148 = inttoptr i32 %v2_b148 to i32*
  %v4_b148 = load i32, i32* %v3_b148, align 4
  store i32 %v4_b148, i32* %r0.global-to-local, align 4
  %v3_b154 = inttoptr i32 %v0_b1ec to %sockaddr*
  %v4_b154 = call i32 @function_10a58(i32 %v4_b148, %sockaddr* %v3_b154, i32 16)
  store i32 %v4_b154, i32* %r0.global-to-local, align 4
  %v0_b158 = load i32, i32* @r8, align 4
  %v1_b158 = load i32, i32* @sl, align 4
  %v9_b158 = icmp eq i32 %v0_b158, %v1_b158
  %v0_b15c = load i32, i32* @r6, align 4
  %v1_b15c = add i32 %v0_b15c, 4
  store i32 %v1_b15c, i32* @r6, align 4
  %v0_b160 = load i32, i32* @r5, align 4
  %v1_b160 = add i32 %v0_b160, 24
  store i32 %v1_b160, i32* @r5, align 4
  br i1 %v9_b158, label %dec_label_pc_b264, label %dec_label_pc_b168

dec_label_pc_b168:                                ; preds = %dec_label_pc_b1f8, %dec_label_pc_b148, %dec_label_pc_b110
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_b174 = call i32 @function_10ee8(i32 65535, i32 1)
  store i32 %v2_b174, i32* %r0.global-to-local, align 4
  %v0_b17c = load i32, i32* @fp, align 4
  %v9_b17c = icmp eq i32 %v0_b17c, 65535
  %v1_b184 = load i32, i32* @r6, align 4
  %v3_b184 = add i32 %v1_b184, %v2_b038
  %v4_b184 = inttoptr i32 %v3_b184 to i32*
  store i32 %v2_b174, i32* %v4_b184, align 4
  br i1 %v9_b17c, label %dec_label_pc_b2c4, label %dec_label_pc_b18c

dec_label_pc_b18c:                                ; preds = %dec_label_pc_b168
  %v2_b190 = load i32, i32* @r5, align 4
  %v3_b190 = add i32 %v2_b190, 2
  %v4_b190 = inttoptr i32 %v3_b190 to i8*
  store i8 %v5_b11c, i8* %v4_b190, align 1
  %v2_b194 = load i8, i8* %stack_var_-84, align 1
  %v2_b198 = load i32, i32* @r5, align 4
  %v3_b198 = add i32 %v2_b198, 3
  %v4_b198 = inttoptr i32 %v3_b198 to i8*
  store i8 %v2_b194, i8* %v4_b198, align 1
  br label %dec_label_pc_b19c

dec_label_pc_b19c:                                ; preds = %dec_label_pc_b2c4, %dec_label_pc_b18c
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b1a8 = call i32 @function_10bfc(i32 2, i32 2, i32 17)
  store i32 %v3_b1a8, i32* %r0.global-to-local, align 4
  %v7_b1ac = icmp eq i32 %v3_b1a8, -1
  %v0_b1b0 = load i32, i32* @r8, align 4
  %v1_b1b0 = add i32 %v0_b1b0, 1
  store i32 %v1_b1b0, i32* @r8, align 4
  %v1_b1c0 = load i32, i32* @r6, align 4
  %v2_b1c0 = load i32, i32* @sb, align 4
  %v3_b1c0 = add i32 %v2_b1c0, %v1_b1c0
  %v4_b1c0 = inttoptr i32 %v3_b1c0 to i32*
  store i32 %v3_b1a8, i32* %v4_b1c0, align 4
  br i1 %v7_b1ac, label %dec_label_pc_b2bc.loopexit, label %dec_label_pc_b1c8

dec_label_pc_b1c8:                                ; preds = %dec_label_pc_b19c
  store i32 2, i32* %stack_var_-52, align 4
  %v0_b1e8 = load i32, i32* %r0.global-to-local, align 4
  %v4_b1e8 = call i32 @function_10a2c(i32 %v0_b1e8, %sockaddr* %v3_b1e8, i32 16)
  store i32 %v4_b1e8, i32* %r0.global-to-local, align 4
  %v0_b1ec = load i32, i32* @r5, align 4
  %v1_b1ec = add i32 %v0_b1ec, 20
  %v2_b1ec = inttoptr i32 %v1_b1ec to i8*
  %v3_b1ec = load i8, i8* %v2_b1ec, align 1
  %tmp50 = icmp ugt i8 %v3_b1ec, 31
  br i1 %tmp50, label %dec_label_pc_b148, label %dec_label_pc_b1f8

dec_label_pc_b1f8:                                ; preds = %dec_label_pc_b1c8
  %v1_b1f8 = add i32 %v0_b1ec, 16
  %v2_b1f8 = inttoptr i32 %v1_b1f8 to i32*
  %v3_b1f8 = load i32, i32* %v2_b1f8, align 4
  store i32 %v3_b1f8, i32* @r4, align 4
  %v0_b1fc = call i32 @function_d228()
  store i32 %v0_b1fc, i32* %r0.global-to-local, align 4
  %v0_b200 = load i32, i32* @r4, align 4
  %v1_b204 = and i32 %v0_b200, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v1_b200 = udiv i32 %v0_b200, 256
  %v3_b208 = and i32 %v1_b200, 65280
  %v3_b20c = mul i32 %v0_b200, 16777216
  %v4_b210 = mul i32 %v1_b204, 256
  %v5_b210 = or i32 %v4_b210, %v3_b20c
  %v0_b214 = load i32, i32* @r5, align 4
  %v1_b214 = add i32 %v0_b214, 20
  %v2_b214 = inttoptr i32 %v1_b214 to i8*
  %v3_b214 = load i8, i8* %v2_b214, align 1
  %v4_b214 = zext i8 %v3_b214 to i32
  %v4_b218 = udiv i32 %v0_b200, 16777216
  %v5_b218 = or i32 %v3_b208, %v4_b218
  %v2_b21c = or i32 %v5_b218, %v5_b210
  %v7_b220 = lshr i32 %v0_b1fc, %v4_b214
  %v8_b220 = add i32 %v7_b220, %v2_b21c
  %v1_b228 = and i32 %v8_b220, 65280
  store i32 %v1_b228, i32* %r0.global-to-local, align 4
  %v2_b23c = call i32 @llvm.bswap.i32(i32 %v8_b220)
  %v2_b240 = add i32 %v0_b214, 4
  %v3_b240 = inttoptr i32 %v2_b240 to i32*
  store i32 %v2_b23c, i32* %v3_b240, align 4
  %v0_b244 = load i32, i32* @r5, align 4
  %v0_b248 = load i32, i32* @r6, align 4
  %v1_b248 = load i32, i32* @sb, align 4
  %v2_b248 = add i32 %v1_b248, %v0_b248
  %v3_b248 = inttoptr i32 %v2_b248 to i32*
  %v4_b248 = load i32, i32* %v3_b248, align 4
  store i32 %v4_b248, i32* %r0.global-to-local, align 4
  %v3_b250 = inttoptr i32 %v0_b244 to %sockaddr*
  %v4_b250 = call i32 @function_10a58(i32 %v4_b248, %sockaddr* %v3_b250, i32 16)
  store i32 %v4_b250, i32* %r0.global-to-local, align 4
  %v0_b254 = load i32, i32* @r8, align 4
  %v1_b254 = load i32, i32* @sl, align 4
  %v9_b254 = icmp eq i32 %v0_b254, %v1_b254
  %v0_b258 = load i32, i32* @r6, align 4
  %v1_b258 = add i32 %v0_b258, 4
  store i32 %v1_b258, i32* @r6, align 4
  %v0_b25c = load i32, i32* @r5, align 4
  %v1_b25c = add i32 %v0_b25c, 24
  store i32 %v1_b25c, i32* @r5, align 4
  br i1 %v9_b254, label %dec_label_pc_b264, label %dec_label_pc_b168

dec_label_pc_b264:                                ; preds = %dec_label_pc_b1f8, %dec_label_pc_b148, %dec_label_pc_b2a8.dec_label_pc_b264_crit_edge
  %v0_b264 = phi i32 [ %v0_b264.pre, %dec_label_pc_b2a8.dec_label_pc_b264_crit_edge ], [ %v0_b254, %dec_label_pc_b1f8 ], [ %v0_b158, %dec_label_pc_b148 ]
  %tmp48 = icmp slt i32 %v0_b264, 1
  br i1 %tmp48, label %dec_label_pc_b2a8, label %dec_label_pc_b26c

dec_label_pc_b26c:                                ; preds = %dec_label_pc_b264
  %v2_b270 = icmp eq i32 %v1_b0c8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_b270, label %dec_label_pc_b278, label %dec_label_pc_b2e8

dec_label_pc_b278:                                ; preds = %dec_label_pc_b26c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_b280

dec_label_pc_b280:                                ; preds = %dec_label_pc_b280, %dec_label_pc_b278
  %v0_b28c = phi i32 [ %v1_b28c, %dec_label_pc_b280 ], [ 0, %dec_label_pc_b278 ]
  %v0_b284 = phi i32 [ %v1_b2a0, %dec_label_pc_b280 ], [ 0, %dec_label_pc_b278 ]
  %v1_b284 = load i32, i32* @sb, align 4
  %v2_b284 = add i32 %v1_b284, %v0_b284
  %v3_b284 = inttoptr i32 %v2_b284 to i32*
  %v4_b284 = load i32, i32* %v3_b284, align 4
  store i32 %v4_b284, i32* %r0.global-to-local, align 4
  %v2_b288 = add i32 %v0_b284, %v2_b038
  %v3_b288 = inttoptr i32 %v2_b288 to i32*
  %v4_b288 = load i32, i32* %v3_b288, align 4
  %v1_b28c = add i32 %v0_b28c, 1
  %v4_b298 = inttoptr i32 %v4_b288 to i32*
  %v5_b298 = call i32 @function_10b6c(i32 %v4_b284, i32* %v4_b298, i32 %v3_b0ac, i32 16384)
  store i32 %v5_b298, i32* %r0.global-to-local, align 4
  %v1_b29c = load i32, i32* @sl, align 4
  %v9_b29c = icmp eq i32 %v1_b28c, %v1_b29c
  %v0_b2a0 = load i32, i32* @r4, align 4
  %v1_b2a0 = add i32 %v0_b2a0, 4
  store i32 %v1_b2a0, i32* @r4, align 4
  br i1 %v9_b29c, label %dec_label_pc_b2a8, label %dec_label_pc_b280

dec_label_pc_b2a8:                                ; preds = %dec_label_pc_b2f4, %dec_label_pc_b280, %dec_label_pc_b264, %dec_label_pc_b108
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b2ac = call i32 @function_10904(i32* null)
  store i32 %v2_b2ac, i32* %r0.global-to-local, align 4
  %v6_b2b8 = icmp slt i32 %v2_b0f44, %v2_b2ac
  br i1 %v6_b2b8, label %dec_label_pc_b2bc, label %dec_label_pc_b2a8.dec_label_pc_b264_crit_edge

dec_label_pc_b2a8.dec_label_pc_b264_crit_edge:    ; preds = %dec_label_pc_b2a8
  %v0_b264.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_b264

dec_label_pc_b2bc.loopexit:                       ; preds = %dec_label_pc_b19c
  %v29_b2c0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b2bc

dec_label_pc_b2bc:                                ; preds = %dec_label_pc_b2bc.loopexit, %dec_label_pc_b2a8
  %v29_b2c0 = phi i32 [ %v29_b2c0.pre, %dec_label_pc_b2bc.loopexit ], [ %v2_b2ac, %dec_label_pc_b2a8 ]
  ret i32 %v29_b2c0

dec_label_pc_b2c4:                                ; preds = %dec_label_pc_b168
  %v0_b2c4 = call i32 @function_d228()
  %v1_b2c4 = trunc i32 %v0_b2c4 to i8
  store i32 %v0_b2c4, i32* %r0.global-to-local, align 4
  %v4_b2c8 = sdiv i32 %v0_b2c4, 256
  %v1_b2cc = trunc i32 %v4_b2c8 to i8
  %v2_b2cc = load i32, i32* @r5, align 4
  %v3_b2cc = add i32 %v2_b2cc, 3
  %v4_b2cc = inttoptr i32 %v3_b2cc to i8*
  store i8 %v1_b2cc, i8* %v4_b2cc, align 1
  %v3_b2d0 = load i32, i32* @r5, align 4
  %v4_b2d0 = add i32 %v3_b2d0, 2
  %v5_b2d0 = inttoptr i32 %v4_b2d0 to i8*
  store i8 %v1_b2c4, i8* %v5_b2d0, align 1
  br label %dec_label_pc_b19c

dec_label_pc_b2d8:                                ; preds = %dec_label_pc_b014
  %v0_b2d8 = call i32 @function_d228()
  %v3_b2dc = mul i32 %v0_b2d8, 65536
  store i32 %v3_b2dc, i32* %r0.global-to-local, align 4
  %v3_b2e0 = urem i32 %v0_b2d8, 65536
  br label %dec_label_pc_b108

dec_label_pc_b2e8:                                ; preds = %dec_label_pc_b26c
  store i32 0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_b2f4

dec_label_pc_b2f4:                                ; preds = %dec_label_pc_b2f4, %dec_label_pc_b2e8
  %v0_b2f8 = phi i32 [ %v1_b32c, %dec_label_pc_b2f4 ], [ 0, %dec_label_pc_b2e8 ]
  %v2_b2f8 = add i32 %v0_b2f8, %v2_b038
  %v3_b2f8 = inttoptr i32 %v2_b2f8 to i32*
  %v4_b2f8 = load i32, i32* %v3_b2f8, align 4
  store i32 %v4_b2f8, i32* @r4, align 4
  store i32 %v4_b2f8, i32* %r0.global-to-local, align 4
  %v2_b304 = call i32 @function_d2dc(i32 %v4_b2f8, i32 %v3_b0ac)
  store i32 %v2_b304, i32* %r0.global-to-local, align 4
  %v0_b30c = load i32, i32* @r7, align 4
  %v1_b30c = trunc i32 %v0_b30c to i8
  %v2_b30c = load i32, i32* @r4, align 4
  %v4_b30c = add i32 %v2_b30c, %v3_b0ac
  %v5_b30c = inttoptr i32 %v4_b30c to i8*
  store i8 %v1_b30c, i8* %v5_b30c, align 1
  %v0_b310 = load i32, i32* @r4, align 4
  %v0_b314 = load i32, i32* @r6, align 4
  %v1_b314 = load i32, i32* @sb, align 4
  %v2_b314 = add i32 %v1_b314, %v0_b314
  %v3_b314 = inttoptr i32 %v2_b314 to i32*
  %v4_b314 = load i32, i32* %v3_b314, align 4
  store i32 %v4_b314, i32* %r0.global-to-local, align 4
  %v0_b318 = load i32, i32* @r5, align 4
  %v1_b318 = add i32 %v0_b318, 1
  store i32 %v1_b318, i32* @r5, align 4
  %v4_b324 = inttoptr i32 %v0_b310 to i32*
  %v5_b324 = call i32 @function_10b6c(i32 %v4_b314, i32* %v4_b324, i32 %v3_b0ac, i32 16384)
  store i32 %v5_b324, i32* %r0.global-to-local, align 4
  %v0_b328 = load i32, i32* @r5, align 4
  %v1_b328 = load i32, i32* @sl, align 4
  %v9_b328 = icmp eq i32 %v0_b328, %v1_b328
  %v0_b32c = load i32, i32* @r6, align 4
  %v1_b32c = add i32 %v0_b32c, 4
  store i32 %v1_b32c, i32* @r6, align 4
  br i1 %v9_b328, label %dec_label_pc_b2a8, label %dec_label_pc_b2f4

; uselistorder directives
  uselistorder i32 %v1_b32c, { 1, 0 }
  uselistorder i32 %v0_b2d8, { 1, 0 }
  uselistorder i32 %v0_b2c4, { 0, 2, 1 }
  uselistorder i32 %v1_b2a0, { 1, 0 }
  uselistorder i32 %v0_b200, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b1ec, { 1, 2, 0 }
  uselistorder i32 %v3_b1a8, { 1, 0, 2 }
  uselistorder i32 %v3_b0ac, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b018, { 1, 2, 0 }
  uselistorder i8* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 6, 4, 5, 7, 19, 9, 8, 31, 10, 13, 11, 12, 14, 30, 18, 20, 17, 22, 21, 16, 15, 1, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder label %dec_label_pc_b264, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b108, { 1, 0 }
}

define i32 @function_b338(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b338:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_b338 = load i32, i32* @sb, align 4
  %v21_b338 = load i32, i32* @sl, align 4
  %v1_b33c = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_b33c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b358 = urem i32 %arg4, 256
  store i32 %v1_b358, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b368 = call i32 @function_10ee8(i32 %v1_b33c, i32 4)
  %v0_b36c = load i32, i32* @r5, align 4
  store i32 %v0_b36c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b378 = load i32, i32* @r7, align 4
  store i32 %v0_b378, i32* %r3.global-to-local, align 4
  %v0_b37c = load i32, i32* @r4, align 4
  store i32 %v0_b37c, i32* %r0.global-to-local, align 4
  %v5_b380 = inttoptr i32 %v0_b36c to i32*
  %v6_b380 = call i32 @function_829c(i32 %v0_b37c, i32* %v5_b380, i32 2, i32 %v0_b378, i32 %v2_b368)
  %v1_b38c = urem i32 %v6_b380, 256
  store i32 %v1_b38c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b398 = load i32, i32* @r5, align 4
  store i32 %v0_b398, i32* %r1.global-to-local, align 4
  %v0_b39c = load i32, i32* @r4, align 4
  store i32 %v0_b39c, i32* %r0.global-to-local, align 4
  %v5_b3a0 = trunc i32 %v6_b380 to i8
  %v6_b3a4 = inttoptr i32 %v0_b398 to i32*
  %v7_b3a4 = call i32 @function_829c(i32 %v0_b39c, i32* %v6_b3a4, i32 3, i32 65535, i32 %v6_b380)
  %v0_b3a8 = load i32, i32* @r5, align 4
  store i32 %v0_b3a8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b3b8 = load i32, i32* @r4, align 4
  store i32 %v0_b3b8, i32* %r0.global-to-local, align 4
  %v5_b3bc = inttoptr i32 %v0_b3a8 to i32*
  %v6_b3bc = call i32 @function_829c(i32 %v0_b3b8, i32* %v5_b3bc, i32 4, i32 64, i32 %v7_b3a4)
  %v1_b3c4 = urem i32 %v6_b3bc, 256
  store i32 %v1_b3c4, i32* %ip.global-to-local, align 4
  %v0_b3c8 = load i32, i32* @r5, align 4
  store i32 %v0_b3c8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b3d0 = load i32, i32* @r7, align 4
  store i32 %v0_b3d0, i32* %r3.global-to-local, align 4
  %v0_b3d4 = load i32, i32* @r4, align 4
  store i32 %v0_b3d4, i32* %r0.global-to-local, align 4
  %v5_b3d8 = trunc i32 %v6_b3bc to i8
  %v6_b3dc = inttoptr i32 %v0_b3c8 to i32*
  %v7_b3dc = call i32 @function_829c(i32 %v0_b3d4, i32* %v6_b3dc, i32 5, i32 %v0_b3d0, i32 %v6_b3bc)
  %v1_b3e8 = urem i32 %v7_b3dc, 256
  store i32 %v1_b3e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b3f4 = load i32, i32* @r5, align 4
  store i32 %v0_b3f4, i32* %r1.global-to-local, align 4
  %v0_b3f8 = load i32, i32* @r4, align 4
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  %v5_b400 = inttoptr i32 %v0_b3f4 to i32*
  %v6_b400 = call i32 @function_829c(i32 %v0_b3f8, i32* %v5_b400, i32 6, i32 65535, i32 %v1_b3e8)
  %v0_b40c = load i32, i32* @r5, align 4
  store i32 %v0_b40c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b418 = load i32, i32* @r4, align 4
  store i32 %v0_b418, i32* %r0.global-to-local, align 4
  %v5_b41c = inttoptr i32 %v0_b40c to i32*
  %v6_b41c = call i32 @function_829c(i32 %v0_b418, i32* %v5_b41c, i32 7, i32 65535, i32 %v6_b400)
  %v0_b420 = load i32, i32* @r5, align 4
  store i32 %v0_b420, i32* %r1.global-to-local, align 4
  %v0_b424 = load i32, i32* @r7, align 4
  store i32 %v0_b424, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b41c, i32* %sb.global-to-local, align 4
  %v0_b430 = load i32, i32* @r4, align 4
  store i32 %v0_b430, i32* %r0.global-to-local, align 4
  %v5_b434 = inttoptr i32 %v0_b420 to i32*
  %v6_b434 = call i32 @function_829c(i32 %v0_b430, i32* %v5_b434, i32 %v0_b424, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b440 = load i32, i32* @r5, align 4
  store i32 %v0_b440, i32* %r1.global-to-local, align 4
  store i32 %v6_b434, i32* @sl, align 4
  %v0_b448 = load i32, i32* @r4, align 4
  store i32 %v0_b448, i32* %r0.global-to-local, align 4
  %v5_b44c = inttoptr i32 %v0_b440 to i32*
  %v6_b44c = call i32 @function_829c(i32 %v0_b448, i32* %v5_b44c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_b458 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_b458, i32* %r3.global-to-local, align 4
  %v1_b45c = urem i32 %v6_b44c, 256
  store i32 %v1_b45c, i32* %ip.global-to-local, align 4
  %v0_b460 = load i32, i32* @r5, align 4
  store i32 %v0_b460, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_b468 = load i32, i32* @r4, align 4
  store i32 %v0_b468, i32* %r0.global-to-local, align 4
  %v5_b470 = inttoptr i32 %v0_b460 to i32*
  %v6_b470 = call i32 @function_829c(i32 %v0_b468, i32* %v5_b470, i32 24, i32 %v2_b458, i32 %v1_b45c)
  store i32 %v6_b470, i32* @fp, align 4
  %v0_b478 = load i32, i32* @r7, align 4
  store i32 %v0_b478, i32* %r0.global-to-local, align 4
  %v1_b47c = inttoptr i32 %v0_b478 to i32*
  %v2_b47c = call i32 @function_10904(i32* %v1_b47c)
  %v1_b480 = load i32, i32* @r6, align 4
  %v2_b480 = add i32 %v1_b480, %v2_b47c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_b494 = call i32 @function_10bfc(i32 2, i32 3, i32 17)
  store i32 %v3_b494, i32* %r0.global-to-local, align 4
  %v7_b498 = icmp eq i32 %v3_b494, -1
  store i1 %v7_b498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b498, label %dec_label_pc_b8c0, label %dec_label_pc_b4a4

dec_label_pc_b4a4:                                ; preds = %dec_label_pc_b338
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b4ac = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b4ac, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b4b4 = load i32, i32* @r7, align 4
  store i32 %v0_b4b4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b4c0 = call i32 @function_10bcc(i32 %v3_b494, i32 %v0_b4b4, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b4c0, i32* %r0.global-to-local, align 4
  %v7_b4c4 = icmp eq i32 %v6_b4c0, -1
  store i1 %v7_b4c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4c4, label %dec_label_pc_b8c8, label %dec_label_pc_b4cc

dec_label_pc_b4cc:                                ; preds = %dec_label_pc_b4a4
  %v0_b4cc = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_b4d8 = urem i32 %v0_b4cc, 65536
  store i32 %v3_b4d8, i32* %r2.global-to-local, align 4
  %v3_b4dc = icmp ugt i32 %v3_b4d8, 1459
  %v9_b4dc = icmp eq i32 %v3_b4d8, 1460
  store i1 %v9_b4dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b4dc, label %bb, label %bb56

bb:                                               ; preds = %dec_label_pc_b4cc
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_b4cc, %bb
  %v0_b4e4 = phi i32 [ %v3_b4d8, %dec_label_pc_b4cc ], [ 1460, %bb ]
  store i32 %v7_b3a4, i32* %r1.global-to-local, align 4
  store i32 %v6_b400, i32* %r2.global-to-local, align 4
  store i32 %v1_b33c, i32* %r3.global-to-local, align 4
  %v0_b4f4 = load i32, i32* %sb.global-to-local, align 4
  %v3_b4f8 = mul i32 %v7_b3a4, 65536
  store i32 %v3_b4f8, i32* %r0.global-to-local, align 4
  %v3_b4fc = mul i32 %v6_b400, 65536
  store i32 %v3_b4fc, i32* %sl.global-to-local, align 4
  %v3_b500 = urem i32 %v7_b3a4, 65536
  store i32 %v3_b500, i32* @r4, align 4
  %v3_b504 = urem i32 %v6_b400, 65536
  store i32 %v3_b504, i32* %sb.global-to-local, align 4
  %v3_b508 = urem i32 %v0_b4f4, 65536
  store i32 %v3_b508, i32* %ip.global-to-local, align 4
  %v2_b50c = icmp eq i32 %v1_b33c, 0
  store i1 %v2_b50c, i1* %cpsr_z.global-to-local, align 1
  %v0_b510 = load i32, i32* @r7, align 4
  store i32 %v0_b510, i32* %stack_var_-40, align 4
  br i1 %v2_b50c, label %.dec_label_pc_b680.preheader_crit_edge, label %dec_label_pc_b524

.dec_label_pc_b680.preheader_crit_edge:           ; preds = %bb56
  %.pre = add nuw nsw i32 %v0_b4e4, 8
  %.pre19 = add nuw nsw i32 %v0_b4e4, 28
  br label %dec_label_pc_b680.preheader

dec_label_pc_b524:                                ; preds = %bb56
  %v1_b528 = add nuw nsw i32 %v0_b4e4, 28
  %v1_b52c = add nuw nsw i32 %v0_b4e4, 8
  %v1_b530 = urem i32 %v6_b400, 256
  %tmp57 = udiv i32 %v7_b3a4, 256
  %v3_b53c = urem i32 %tmp57, 256
  %v3_b540 = mul i32 %v1_b52c, 65536
  store i32 %v3_b540, i32* @lr, align 4
  %tmp58 = mul nuw nsw i32 %v1_b528, 256
  %v1_b54c = urem i32 %v7_b3a4, 256
  %tmp59 = mul nuw nsw i32 %v1_b52c, 256
  %v1_b558 = and i32 %tmp58, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_b558, i32* %r3.global-to-local, align 4
  %v4_b55c = mul nuw nsw i32 %v1_b54c, 256
  %v5_b55c = or i32 %v4_b55c, %v3_b53c
  store i32 %v5_b55c, i32* %r0.global-to-local, align 4
  %v3_b560 = mul nuw nsw i32 %v1_b530, 256
  store i32 %v3_b560, i32* %r1.global-to-local, align 4
  %tmp60 = udiv i32 %v0_b4f4, 256
  %v3_b564 = urem i32 %tmp60, 256
  %v1_b568 = and i32 %tmp59, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_b568, i32* %ip.global-to-local, align 4
  %v2_b56c = icmp eq i32 %v1_b3e8, 0
  store i1 %v2_b56c, i1* %cpsr_z.global-to-local, align 1
  %tmp61 = udiv i32 %v1_b528, 256
  %v4_b570 = urem i32 %tmp61, 256
  %v5_b570 = or i32 %v4_b570, %v1_b558
  store i32 %v5_b570, i32* %r2.global-to-local, align 4
  %v1_b574 = urem i32 %v0_b4f4, 256
  %v5_b578 = trunc i32 %tmp61 to i8
  %v5_b57c = trunc i32 %tmp57 to i8
  %tmp62 = udiv i32 %v6_b400, 256
  %v4_b580 = urem i32 %tmp62, 256
  %v5_b580 = or i32 %v4_b580, %v3_b560
  store i32 %v5_b580, i32* @r5, align 4
  %v4_b584 = mul nuw nsw i32 %v1_b574, 256
  %v5_b584 = or i32 %v4_b584, %v3_b564
  store i32 %v5_b584, i32* @r6, align 4
  %tmp63 = udiv i32 %v1_b52c, 256
  %v4_b588 = urem i32 %tmp63, 256
  %v5_b588 = or i32 %v4_b588, %v1_b568
  store i32 %v5_b588, i32* %sb.global-to-local, align 4
  br i1 %v2_b56c, label %dec_label_pc_b590, label %dec_label_pc_b8d4

dec_label_pc_b590:                                ; preds = %dec_label_pc_b524
  %v3_b59022 = udiv i32 %v1_b558, 256
  store i32 %v3_b59022, i32* %ip.global-to-local, align 4
  store i32 %v1_b54c, i32* %r0.global-to-local, align 4
  store i32 %v1_b530, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v1_b574, i32* %sl.global-to-local, align 4
  %v3_b5b023 = udiv i32 %v1_b568, 256
  store i32 %v3_b5b023, i32* @r7, align 4
  %sext10 = mul i32 %v1_b558, 65536
  %v4_b638 = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v7_b3a4, 16777216
  %v4_b644 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v6_b400, 16777216
  %v4_b648 = sdiv i32 %sext12, 16777216
  %v4_b650 = sext i8 %v5_b57c to i32
  %v4_b62c = sext i8 %v5_b578 to i32
  br label %dec_label_pc_b5b4

dec_label_pc_b5b4:                                ; preds = %dec_label_pc_b5b4, %dec_label_pc_b590
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b5c0 = call i32 @function_10ee8(i32 1510, i32 1)
  store i32 %v2_b5c0, i32* %r0.global-to-local, align 4
  store i32 %v2_b368, i32* %r3.global-to-local, align 4
  %v2_b5cc = load i32, i32* @r4, align 4
  %v5_b5cc = mul i32 %v2_b5cc, 4
  %v6_b5cc = add i32 %v5_b5cc, %v2_b368
  %v7_b5cc = inttoptr i32 %v6_b5cc to i32*
  store i32 %v2_b5c0, i32* %v7_b5cc, align 4
  %v3_b5d0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5d0, i32* %r2.global-to-local, align 4
  %v0_b5d4 = load i32, i32* %r3.global-to-local, align 4
  %v4_b5d4 = mul i32 %v3_b5d0, 4
  %v5_b5d4 = add i32 %v0_b5d4, %v4_b5d4
  %v6_b5d4 = inttoptr i32 %v5_b5d4 to i32*
  %v7_b5d4 = load i32, i32* %v6_b5d4, align 4
  store i32 %v7_b5d4, i32* %r1.global-to-local, align 4
  %v1_b5d8 = inttoptr i32 %v7_b5d4 to i8*
  %v2_b5d8 = load i8, i8* %v1_b5d8, align 1
  %tmp = urem i8 %v2_b5d8, 16
  %v1_b5dc = zext i8 %tmp to i32
  %v1_b5e0 = or i32 %v1_b5dc, 64
  store i32 %v1_b5e0, i32* %r3.global-to-local, align 4
  %v1_b5e4 = trunc i32 %v1_b5e0 to i8
  store i8 %v1_b5e4, i8* %v1_b5d8, align 1
  %v0_b5e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b5e8 = inttoptr i32 %v0_b5e8 to i8*
  %v2_b5e8 = load i8, i8* %v1_b5e8, align 1
  %v3_b5e8 = zext i8 %v2_b5e8 to i32
  %v1_b5ec = and i32 %v3_b5e8, 240
  %v1_b5f0 = or i32 %v1_b5ec, 5
  store i32 %v1_b5f0, i32* %r2.global-to-local, align 4
  %v3_b5f8 = add i32 %v0_b5e8, 9
  %v4_b5f8 = inttoptr i32 %v3_b5f8 to i8*
  store i8 17, i8* %v4_b5f8, align 1
  %v0_b5fc = load i32, i32* %r2.global-to-local, align 4
  %v1_b5fc = trunc i32 %v0_b5fc to i8
  %v2_b5fc = load i32, i32* %r1.global-to-local, align 4
  %v3_b5fc = inttoptr i32 %v2_b5fc to i8*
  store i8 %v1_b5fc, i8* %v3_b5fc, align 1
  %v2_b604 = load i32, i32* %r1.global-to-local, align 4
  %v3_b604 = add i32 %v2_b604, 1
  %v4_b604 = inttoptr i32 %v3_b604 to i8*
  store i8 %v5_b3a0, i8* %v4_b604, align 1
  store i32 %v6_b3bc, i32* %ip.global-to-local, align 4
  %v2_b60c = load i32, i32* %r1.global-to-local, align 4
  %v3_b60c = add i32 %v2_b60c, 8
  %v4_b60c = inttoptr i32 %v3_b60c to i8*
  store i8 %v5_b3d8, i8* %v4_b60c, align 1
  %v3_b610 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b610, i32* %r2.global-to-local, align 4
  %v3_b614 = mul i32 %v3_b610, 32
  store i32 %v3_b614, i32* %r3.global-to-local, align 4
  %v0_b618 = load i32, i32* @fp, align 4
  %v1_b618 = load i32, i32* %r1.global-to-local, align 4
  %v2_b618 = add i32 %v1_b618, 12
  %v3_b618 = inttoptr i32 %v2_b618 to i32*
  store i32 %v0_b618, i32* %v3_b618, align 4
  %v0_b61c = load i32, i32* %r3.global-to-local, align 4
  %v1_b61c = load i32, i32* %r2.global-to-local, align 4
  %tmp66 = mul i32 %v1_b61c, -8
  %v5_b61c = add i32 %v0_b61c, %tmp66
  %v1_b620 = load i32, i32* @r8, align 4
  %v2_b620 = add i32 %v5_b61c, %v1_b620
  store i32 %v2_b620, i32* %r3.global-to-local, align 4
  %v1_b624 = add i32 %v2_b620, 16
  %v2_b624 = inttoptr i32 %v1_b624 to i32*
  %v3_b624 = load i32, i32* %v2_b624, align 4
  %v1_b628 = add i32 %v1_b61c, 1
  store i32 %v1_b628, i32* @r4, align 4
  store i32 %v4_b62c, i32* %ip.global-to-local, align 4
  store i32 %v1_b33c, i32* %r2.global-to-local, align 4
  %v1_b634 = load i32, i32* %r1.global-to-local, align 4
  %v2_b634 = add i32 %v1_b634, 16
  %v3_b634 = inttoptr i32 %v2_b634 to i32*
  store i32 %v3_b624, i32* %v3_b634, align 4
  store i32 %v4_b638, i32* %r0.global-to-local, align 4
  %v0_b63c = load i32, i32* %ip.global-to-local, align 4
  %v1_b63c = trunc i32 %v0_b63c to i8
  %v2_b63c = load i32, i32* %r1.global-to-local, align 4
  %v3_b63c = add i32 %v2_b63c, 2
  %v4_b63c = inttoptr i32 %v3_b63c to i8*
  store i8 %v1_b63c, i8* %v4_b63c, align 1
  %v0_b640 = load i32, i32* %r0.global-to-local, align 4
  %v1_b640 = trunc i32 %v0_b640 to i8
  %v2_b640 = load i32, i32* %r1.global-to-local, align 4
  %v3_b640 = add i32 %v2_b640, 3
  %v4_b640 = inttoptr i32 %v3_b640 to i8*
  store i8 %v1_b640, i8* %v4_b640, align 1
  store i32 %v4_b644, i32* %ip.global-to-local, align 4
  store i32 %v4_b648, i32* %r0.global-to-local, align 4
  %v0_b64c = load i32, i32* @r4, align 4
  %v1_b64c = load i32, i32* %r2.global-to-local, align 4
  %v9_b64c = icmp eq i32 %v0_b64c, %v1_b64c
  store i1 %v9_b64c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b650, i32* %r2.global-to-local, align 4
  %v0_b654 = load i32, i32* %r1.global-to-local, align 4
  %v1_b654 = add i32 %v0_b654, 20
  store i32 %v1_b654, i32* %r3.global-to-local, align 4
  %v3_b658 = add i32 %v0_b654, 4
  %v4_b658 = inttoptr i32 %v3_b658 to i8*
  store i8 %v5_b57c, i8* %v4_b658, align 1
  %v0_b65c = load i32, i32* %ip.global-to-local, align 4
  %v1_b65c = trunc i32 %v0_b65c to i8
  %v2_b65c = load i32, i32* %r1.global-to-local, align 4
  %v3_b65c = add i32 %v2_b65c, 5
  %v4_b65c = inttoptr i32 %v3_b65c to i8*
  store i8 %v1_b65c, i8* %v4_b65c, align 1
  %v0_b660 = load i32, i32* @r5, align 4
  %v1_b660 = trunc i32 %v0_b660 to i8
  %v2_b660 = load i32, i32* %r1.global-to-local, align 4
  %v3_b660 = add i32 %v2_b660, 20
  %v4_b660 = inttoptr i32 %v3_b660 to i8*
  store i8 %v1_b660, i8* %v4_b660, align 1
  %v0_b664 = load i32, i32* @r7, align 4
  %v1_b664 = trunc i32 %v0_b664 to i8
  %v2_b664 = load i32, i32* %r3.global-to-local, align 4
  %v3_b664 = add i32 %v2_b664, 5
  %v4_b664 = inttoptr i32 %v3_b664 to i8*
  store i8 %v1_b664, i8* %v4_b664, align 1
  %v0_b668 = load i32, i32* %r0.global-to-local, align 4
  %v1_b668 = trunc i32 %v0_b668 to i8
  %v2_b668 = load i32, i32* %r3.global-to-local, align 4
  %v3_b668 = add i32 %v2_b668, 1
  %v4_b668 = inttoptr i32 %v3_b668 to i8*
  store i8 %v1_b668, i8* %v4_b668, align 1
  %v0_b66c = load i32, i32* @r6, align 4
  %v1_b66c = trunc i32 %v0_b66c to i8
  %v2_b66c = load i32, i32* %r3.global-to-local, align 4
  %v3_b66c = add i32 %v2_b66c, 2
  %v4_b66c = inttoptr i32 %v3_b66c to i8*
  store i8 %v1_b66c, i8* %v4_b66c, align 1
  %v0_b670 = load i32, i32* %sl.global-to-local, align 4
  %v1_b670 = trunc i32 %v0_b670 to i8
  %v2_b670 = load i32, i32* %r3.global-to-local, align 4
  %v3_b670 = add i32 %v2_b670, 3
  %v4_b670 = inttoptr i32 %v3_b670 to i8*
  store i8 %v1_b670, i8* %v4_b670, align 1
  %v0_b674 = load i32, i32* %sb.global-to-local, align 4
  %v1_b674 = trunc i32 %v0_b674 to i8
  %v2_b674 = load i32, i32* %r3.global-to-local, align 4
  %v3_b674 = add i32 %v2_b674, 4
  %v4_b674 = inttoptr i32 %v3_b674 to i8*
  store i8 %v1_b674, i8* %v4_b674, align 1
  %v0_b678 = load i32, i32* @r4, align 4
  store i32 %v0_b678, i32* %stack_var_-40, align 4
  %v5_b67c = icmp slt i32 %v0_b64c, %v1_b64c
  br i1 %v5_b67c, label %dec_label_pc_b5b4, label %dec_label_pc_b680.preheader

dec_label_pc_b680.preheader:                      ; preds = %dec_label_pc_b900, %dec_label_pc_b5b4, %.dec_label_pc_b680.preheader_crit_edge
  %v1_b6a0.pre-phi = phi i32 [ %.pre19, %.dec_label_pc_b680.preheader_crit_edge ], [ %v1_b528, %dec_label_pc_b5b4 ], [ %v1_b528, %dec_label_pc_b900 ]
  %v1_b69c.pre-phi = phi i32 [ %.pre, %.dec_label_pc_b680.preheader_crit_edge ], [ %v1_b52c, %dec_label_pc_b5b4 ], [ %v1_b52c, %dec_label_pc_b900 ]
  %v3_b830 = icmp eq i32 %v3_b500, 65535
  %v2_b6e4 = icmp eq i32 %v1_b45c, 0
  br label %dec_label_pc_b680

dec_label_pc_b680:                                ; preds = %dec_label_pc_b680.preheader, %dec_label_pc_b8ac
  store i32 %v1_b33c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b50c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b50c, label %dec_label_pc_b8ac, label %dec_label_pc_b694

dec_label_pc_b694:                                ; preds = %dec_label_pc_b680
  store i32 %v0_b4e4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_b69c.pre-phi, i32* @sb, align 4
  store i32 %v1_b6a0.pre-phi, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_b798

dec_label_pc_b6ac:                                ; preds = %dec_label_pc_b798
  %v0_b6ac = load i32, i32* @fp, align 4
  %v7_b6ac = icmp eq i32 %v0_b6ac, -1
  store i1 %v7_b6ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b6ac, label %dec_label_pc_b820, label %dec_label_pc_b6b4

dec_label_pc_b6b4:                                ; preds = %dec_label_pc_b7bc, %dec_label_pc_b6ac
  store i32 %v3_b500, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b830, label %dec_label_pc_b83c, label %dec_label_pc_b6c8

dec_label_pc_b6c8:                                ; preds = %dec_label_pc_b820.dec_label_pc_b6c8_crit_edge, %dec_label_pc_b6b4
  %v1_b6cc = phi i32 [ %v1_b6cc.pre, %dec_label_pc_b820.dec_label_pc_b6c8_crit_edge ], [ 65535, %dec_label_pc_b6b4 ]
  store i32 %v3_b504, i32* %r0.global-to-local, align 4
  %v9_b6cc = icmp eq i32 %v3_b504, %v1_b6cc
  store i1 %v9_b6cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b6cc, label %dec_label_pc_b858, label %dec_label_pc_b6d4

dec_label_pc_b6d4:                                ; preds = %dec_label_pc_b83c.dec_label_pc_b6d4_crit_edge, %dec_label_pc_b6c8
  %v1_b6d8 = phi i32 [ %v1_b6d8.pre, %dec_label_pc_b83c.dec_label_pc_b6d4_crit_edge ], [ %v1_b6cc, %dec_label_pc_b6c8 ]
  store i32 %v3_b508, i32* %r1.global-to-local, align 4
  %v9_b6d8 = icmp eq i32 %v3_b508, %v1_b6d8
  store i1 %v9_b6d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b6d8, label %dec_label_pc_b874, label %dec_label_pc_b6e0

dec_label_pc_b6e0:                                ; preds = %dec_label_pc_b858, %dec_label_pc_b6d4
  store i32 %v1_b45c, i32* %r2.global-to-local, align 4
  store i1 %v2_b6e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b6e4, label %dec_label_pc_b6ec, label %dec_label_pc_b890

dec_label_pc_b6ec:                                ; preds = %dec_label_pc_b6e0, %dec_label_pc_b874, %dec_label_pc_b890
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b6f0 = load i32, i32* @r7, align 4
  %v1_b6f0 = trunc i32 %v0_b6f0 to i8
  %v2_b6f0 = load i32, i32* @r5, align 4
  %v3_b6f0 = add i32 %v2_b6f0, 10
  %v4_b6f0 = inttoptr i32 %v3_b6f0 to i8*
  store i8 %v1_b6f0, i8* %v4_b6f0, align 1
  %v0_b6f4 = load i32, i32* @r7, align 4
  %v1_b6f4 = trunc i32 %v0_b6f4 to i8
  %v2_b6f4 = load i32, i32* @r5, align 4
  %v3_b6f4 = add i32 %v2_b6f4, 11
  %v4_b6f4 = inttoptr i32 %v3_b6f4 to i8*
  store i8 %v1_b6f4, i8* %v4_b6f4, align 1
  %v0_b6f8 = load i32, i32* @r5, align 4
  store i32 %v0_b6f8, i32* @r0, align 4
  %v2_b6fc = call i32 @function_c6b0(i32 %v0_b6f8, i32 20)
  %v3_b6fc = trunc i32 %v2_b6fc to i8
  store i32 %v2_b6fc, i32* %r0.global-to-local, align 4
  %v4_b700 = sdiv i32 %v2_b6fc, 256
  store i32 %v4_b700, i32* %r3.global-to-local, align 4
  %v1_b704 = trunc i32 %v4_b700 to i8
  %v2_b704 = load i32, i32* @r5, align 4
  %v3_b704 = add i32 %v2_b704, 11
  %v4_b704 = inttoptr i32 %v3_b704 to i8*
  store i8 %v1_b704, i8* %v4_b704, align 1
  %v3_b708 = load i32, i32* @r5, align 4
  %v4_b708 = add i32 %v3_b708, 10
  %v5_b708 = inttoptr i32 %v4_b708 to i8*
  store i8 %v3_b6fc, i8* %v5_b708, align 1
  %v0_b70c = load i32, i32* @r7, align 4
  %v1_b70c = trunc i32 %v0_b70c to i8
  %v2_b70c = load i32, i32* @r6, align 4
  %v3_b70c = add i32 %v2_b70c, 6
  %v4_b70c = inttoptr i32 %v3_b70c to i8*
  store i8 %v1_b70c, i8* %v4_b70c, align 1
  %v0_b710 = load i32, i32* @r7, align 4
  %v1_b710 = trunc i32 %v0_b710 to i8
  %v2_b710 = load i32, i32* @r6, align 4
  %v3_b710 = add i32 %v2_b710, 7
  %v4_b710 = inttoptr i32 %v3_b710 to i8*
  store i8 %v1_b710, i8* %v4_b710, align 1
  %v0_b714 = load i32, i32* @r5, align 4
  %v1_b714 = add i32 %v0_b714, 24
  %v2_b714 = inttoptr i32 %v1_b714 to i8*
  %v3_b714 = load i8, i8* %v2_b714, align 1
  %v4_b714 = zext i8 %v3_b714 to i32
  store i32 %v4_b714, i32* %r3.global-to-local, align 4
  %v1_b718 = add i32 %v0_b714, 25
  %v2_b718 = inttoptr i32 %v1_b718 to i8*
  %v3_b718 = load i8, i8* %v2_b718, align 1
  %v4_b718 = zext i8 %v3_b718 to i32
  %v0_b71c = load i32, i32* @r6, align 4
  store i32 %v0_b71c, i32* @r1, align 4
  %v4_b720 = mul nuw nsw i32 %v4_b718, 256
  %v5_b720 = or i32 %v4_b720, %v4_b714
  store i32 %v5_b720, i32* %r2.global-to-local, align 4
  store i32 %v0_b714, i32* %r0.global-to-local, align 4
  %v0_b728 = load i32, i32* @sb, align 4
  store i32 %v0_b728, i32* %r3.global-to-local, align 4
  %v4_b72c = call i32 @function_c70c(i32 %v0_b714, i32 %v0_b71c, i32 %v5_b720, i32 %v0_b728)
  %v5_b72c = trunc i32 %v4_b72c to i8
  store i32 %v4_b72c, i32* %r0.global-to-local, align 4
  %v4_b73024 = udiv i32 %v4_b72c, 256
  %v1_b734 = trunc i32 %v4_b73024 to i8
  %v2_b734 = load i32, i32* @r6, align 4
  %v3_b734 = add i32 %v2_b734, 7
  %v4_b734 = inttoptr i32 %v3_b734 to i8*
  store i8 %v1_b734, i8* %v4_b734, align 1
  %v3_b738 = load i32, i32* @r6, align 4
  %v4_b738 = add i32 %v3_b738, 6
  %v5_b738 = inttoptr i32 %v4_b738 to i8*
  store i8 %v5_b72c, i8* %v5_b738, align 1
  %v3_b73c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b73c, i32* %r3.global-to-local, align 4
  %v0_b740 = load i32, i32* @r5, align 4
  %v1_b740 = add i32 %v0_b740, 20
  %v2_b740 = inttoptr i32 %v1_b740 to i32*
  %v3_b740 = load i32, i32* %v2_b740, align 4
  %v3_b748 = udiv i32 %v3_b740, 65536
  store i32 %v3_b748, i32* %r2.global-to-local, align 4
  %v5_b74c = mul i32 %v3_b73c, 24
  %v1_b750 = load i32, i32* @r8, align 4
  %v2_b750 = add i32 %v1_b750, %v5_b74c
  store i32 %v2_b750, i32* %ip.global-to-local, align 4
  %v3_b75421 = udiv i32 %v3_b740, 16777216
  %v1_b758 = trunc i32 %v3_b75421 to i8
  %v3_b758 = add i32 %v2_b750, 3
  %v4_b758 = inttoptr i32 %v3_b758 to i8*
  store i8 %v1_b758, i8* %v4_b758, align 1
  %v0_b75c = load i32, i32* %r2.global-to-local, align 4
  %v1_b75c = trunc i32 %v0_b75c to i8
  %v2_b75c = load i32, i32* %ip.global-to-local, align 4
  %v3_b75c = add i32 %v2_b75c, 2
  %v4_b75c = inttoptr i32 %v3_b75c to i8*
  store i8 %v1_b75c, i8* %v4_b75c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b768 = load i32, i32* @r5, align 4
  store i32 %v0_b768, i32* %r1.global-to-local, align 4
  store i32 %v3_b494, i32* %r0.global-to-local, align 4
  %v0_b770 = load i32, i32* @sl, align 4
  store i32 %v0_b770, i32* %r2.global-to-local, align 4
  %v0_b778 = load i32, i32* %ip.global-to-local, align 4
  %v6_b77c = inttoptr i32 %v0_b768 to i32*
  %v7_b77c = call i32 @function_10b98(i32 %v3_b494, i32* %v6_b77c, i32 %v0_b770, i32 16384, i32 %v0_b778, i32 16)
  %v3_b780 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b780, i32* %r3.global-to-local, align 4
  store i32 %v1_b33c, i32* @r4, align 4
  %v1_b788 = add i32 %v3_b780, 1
  store i32 %v1_b788, i32* %r0.global-to-local, align 4
  %v9_b78c = icmp eq i32 %v1_b788, %v1_b33c
  store i1 %v9_b78c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b788, i32* %stack_var_-40, align 4
  %v6_b794 = icmp slt i32 %v1_b788, %v1_b33c
  br i1 %v6_b794, label %dec_label_pc_b798, label %dec_label_pc_b8ac

dec_label_pc_b798:                                ; preds = %dec_label_pc_b6ec, %dec_label_pc_b694
  %v1_b7ac = phi i32 [ %v1_b788, %dec_label_pc_b6ec ], [ 0, %dec_label_pc_b694 ]
  %v5_b79c = mul i32 %v1_b7ac, 24
  %v1_b7a0 = load i32, i32* @r8, align 4
  %v2_b7a0 = add i32 %v1_b7a0, %v5_b79c
  store i32 %v2_b7a0, i32* %r3.global-to-local, align 4
  %v1_b7a8 = add i32 %v2_b7a0, 20
  %v2_b7a8 = inttoptr i32 %v1_b7a8 to i8*
  %v3_b7a8 = load i8, i8* %v2_b7a8, align 1
  %v4_b7a8 = zext i8 %v3_b7a8 to i32
  store i32 %v4_b7a8, i32* %r2.global-to-local, align 4
  %v4_b7ac = mul i32 %v1_b7ac, 4
  %v5_b7ac = add i32 %v4_b7ac, %v2_b368
  %v6_b7ac = inttoptr i32 %v5_b7ac to i32*
  %v7_b7ac = load i32, i32* %v6_b7ac, align 4
  store i32 %v7_b7ac, i32* @r5, align 4
  %v2_b7b0 = icmp ugt i8 %v3_b7a8, 30
  %v7_b7b0 = icmp eq i8 %v3_b7a8, 31
  store i1 %v7_b7b0, i1* %cpsr_z.global-to-local, align 1
  %v1_b7b4 = add i32 %v7_b7ac, 20
  store i32 %v1_b7b4, i32* @r6, align 4
  %v2_b7b8 = xor i1 %v7_b7b0, true
  %v3_b7b8 = and i1 %v2_b7b0, %v2_b7b8
  br i1 %v3_b7b8, label %dec_label_pc_b6ac, label %dec_label_pc_b7bc

dec_label_pc_b7bc:                                ; preds = %dec_label_pc_b798
  %v1_b7bc = add i32 %v2_b7a0, 16
  %v2_b7bc = inttoptr i32 %v1_b7bc to i32*
  %v3_b7bc = load i32, i32* %v2_b7bc, align 4
  %v0_b7c0 = call i32 @function_d228()
  store i32 %v0_b7c0, i32* %r0.global-to-local, align 4
  %v3_b7c4 = load i32, i32* %stack_var_-40, align 4
  %v5_b7cc = mul i32 %v3_b7c4, 24
  %v1_b7d4 = load i32, i32* @r8, align 4
  %v2_b7d4 = add i32 %v1_b7d4, %v5_b7cc
  store i32 %v2_b7d4, i32* %r1.global-to-local, align 4
  %v1_b7d8 = and i32 %v3_b7bc, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_b7d8, i32* %r3.global-to-local, align 4
  %v1_b7d0 = udiv i32 %v3_b7bc, 256
  %v3_b7dc = and i32 %v1_b7d0, 65280
  store i32 %v3_b7dc, i32* %r2.global-to-local, align 4
  %v3_b7e0 = mul i32 %v3_b7bc, 16777216
  store i32 %v3_b7e0, i32* %ip.global-to-local, align 4
  %v1_b7e4 = add i32 %v2_b7d4, 20
  %v2_b7e4 = inttoptr i32 %v1_b7e4 to i8*
  %v3_b7e4 = load i8, i8* %v2_b7e4, align 1
  %v4_b7e4 = zext i8 %v3_b7e4 to i32
  %v4_b7e8 = mul i32 %v1_b7d8, 256
  %v5_b7e8 = or i32 %v4_b7e8, %v3_b7e0
  store i32 %v5_b7e8, i32* %ip.global-to-local, align 4
  %v4_b7ec = udiv i32 %v3_b7bc, 16777216
  %v5_b7ec = or i32 %v3_b7dc, %v4_b7ec
  %v2_b7f0 = or i32 %v5_b7ec, %v5_b7e8
  %v7_b7f4 = lshr i32 %v0_b7c0, %v4_b7e4
  %v8_b7f4 = add i32 %v7_b7f4, %v2_b7f0
  store i32 %v8_b7f4, i32* %r2.global-to-local, align 4
  %v3_b800 = mul i32 %v8_b7f4, 16777216
  %v1_b804 = and i32 %v8_b7f4, 65280
  store i32 %v1_b804, i32* %r0.global-to-local, align 4
  %v4_b808 = mul nuw nsw i32 %v1_b804, 256
  %v5_b808 = or i32 %v4_b808, %v3_b800
  store i32 %v5_b808, i32* %r1.global-to-local, align 4
  %v2_b810 = call i32 @llvm.bswap.i32(i32 %v8_b7f4)
  store i32 %v2_b810, i32* %r3.global-to-local, align 4
  %v0_b814 = load i32, i32* @fp, align 4
  %v3_b814 = icmp eq i32 %v0_b814, -1
  %v8_b814 = icmp eq i32 %v0_b814, -1
  store i1 %v8_b814, i1* %cpsr_z.global-to-local, align 1
  %v1_b818 = load i32, i32* @r5, align 4
  %v2_b818 = add i32 %v1_b818, 16
  %v3_b818 = inttoptr i32 %v2_b818 to i32*
  store i32 %v2_b810, i32* %v3_b818, align 4
  br i1 %v3_b814, label %dec_label_pc_b820, label %dec_label_pc_b6b4

dec_label_pc_b820:                                ; preds = %dec_label_pc_b7bc, %dec_label_pc_b6ac
  %v0_b820 = call i32 @function_d228()
  store i32 %v0_b820, i32* %r0.global-to-local, align 4
  store i32 %v3_b500, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b830, i1* %cpsr_z.global-to-local, align 1
  %v1_b834 = load i32, i32* @r5, align 4
  %v2_b834 = add i32 %v1_b834, 12
  %v3_b834 = inttoptr i32 %v2_b834 to i32*
  store i32 %v0_b820, i32* %v3_b834, align 4
  br i1 %v3_b830, label %dec_label_pc_b83c, label %dec_label_pc_b820.dec_label_pc_b6c8_crit_edge

dec_label_pc_b820.dec_label_pc_b6c8_crit_edge:    ; preds = %dec_label_pc_b820
  %v1_b6cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b6c8

dec_label_pc_b83c:                                ; preds = %dec_label_pc_b820, %dec_label_pc_b6b4
  %v0_b83c = call i32 @function_d228()
  %v1_b83c = trunc i32 %v0_b83c to i8
  %v4_b840 = sdiv i32 %v0_b83c, 256
  store i32 %v4_b840, i32* %r3.global-to-local, align 4
  %v3_b844 = load i32, i32* @r5, align 4
  %v4_b844 = add i32 %v3_b844, 4
  %v5_b844 = inttoptr i32 %v4_b844 to i8*
  store i8 %v1_b83c, i8* %v5_b844, align 1
  store i32 %v3_b504, i32* %r0.global-to-local, align 4
  %v1_b84c = load i32, i32* @r4, align 4
  %v9_b84c = icmp eq i32 %v3_b504, %v1_b84c
  store i1 %v9_b84c, i1* %cpsr_z.global-to-local, align 1
  %v0_b850 = load i32, i32* %r3.global-to-local, align 4
  %v1_b850 = trunc i32 %v0_b850 to i8
  %v2_b850 = load i32, i32* @r5, align 4
  %v3_b850 = add i32 %v2_b850, 5
  %v4_b850 = inttoptr i32 %v3_b850 to i8*
  store i8 %v1_b850, i8* %v4_b850, align 1
  %v0_b854 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b854, label %dec_label_pc_b858, label %dec_label_pc_b83c.dec_label_pc_b6d4_crit_edge

dec_label_pc_b83c.dec_label_pc_b6d4_crit_edge:    ; preds = %dec_label_pc_b83c
  %v1_b6d8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b6d4

dec_label_pc_b858:                                ; preds = %dec_label_pc_b83c, %dec_label_pc_b6c8
  %v0_b858 = call i32 @function_d228()
  %v1_b858 = trunc i32 %v0_b858 to i8
  store i32 %v0_b858, i32* %r0.global-to-local, align 4
  store i32 %v3_b508, i32* %r1.global-to-local, align 4
  %v4_b860 = sdiv i32 %v0_b858, 256
  store i32 %v4_b860, i32* %r3.global-to-local, align 4
  %v1_b864 = load i32, i32* @r4, align 4
  %v9_b864 = icmp eq i32 %v3_b508, %v1_b864
  store i1 %v9_b864, i1* %cpsr_z.global-to-local, align 1
  %v3_b868 = load i32, i32* @r5, align 4
  %v4_b868 = add i32 %v3_b868, 20
  %v5_b868 = inttoptr i32 %v4_b868 to i8*
  store i8 %v1_b858, i8* %v5_b868, align 1
  %v0_b86c = load i32, i32* %r3.global-to-local, align 4
  %v1_b86c = trunc i32 %v0_b86c to i8
  %v2_b86c = load i32, i32* @r6, align 4
  %v3_b86c = add i32 %v2_b86c, 1
  %v4_b86c = inttoptr i32 %v3_b86c to i8*
  store i8 %v1_b86c, i8* %v4_b86c, align 1
  %v0_b870 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b870, label %dec_label_pc_b874, label %dec_label_pc_b6e0

dec_label_pc_b874:                                ; preds = %dec_label_pc_b858, %dec_label_pc_b6d4
  %v0_b874 = call i32 @function_d228()
  %v1_b874 = trunc i32 %v0_b874 to i8
  store i32 %v0_b874, i32* %r0.global-to-local, align 4
  store i32 %v1_b45c, i32* %r2.global-to-local, align 4
  %v4_b87c = sdiv i32 %v0_b874, 256
  store i32 %v4_b87c, i32* %r3.global-to-local, align 4
  store i1 %v2_b6e4, i1* %cpsr_z.global-to-local, align 1
  %v1_b884 = trunc i32 %v4_b87c to i8
  %v2_b884 = load i32, i32* @r6, align 4
  %v3_b884 = add i32 %v2_b884, 3
  %v4_b884 = inttoptr i32 %v3_b884 to i8*
  store i8 %v1_b884, i8* %v4_b884, align 1
  %v3_b888 = load i32, i32* @r6, align 4
  %v4_b888 = add i32 %v3_b888, 2
  %v5_b888 = inttoptr i32 %v4_b888 to i8*
  store i8 %v1_b874, i8* %v5_b888, align 1
  %v0_b88c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b88c, label %dec_label_pc_b6ec, label %dec_label_pc_b890

dec_label_pc_b890:                                ; preds = %dec_label_pc_b6e0, %dec_label_pc_b874
  %v0_b890 = load i32, i32* @r5, align 4
  %v1_b890 = add i32 %v0_b890, 28
  store i32 %v1_b890, i32* @r4, align 4
  store i32 %v1_b890, i32* %r0.global-to-local, align 4
  store i32 %v0_b4e4, i32* %r1.global-to-local, align 4
  %v2_b89c = call i32 @function_d2dc(i32 %v1_b890, i32 %v0_b4e4)
  store i32 %v2_b89c, i32* %r0.global-to-local, align 4
  store i32 %v0_b4e4, i32* %r3.global-to-local, align 4
  %v0_b8a4 = load i32, i32* @r7, align 4
  %v1_b8a4 = trunc i32 %v0_b8a4 to i8
  %v2_b8a4 = load i32, i32* @r4, align 4
  %v4_b8a4 = add i32 %v2_b8a4, %v0_b4e4
  %v5_b8a4 = inttoptr i32 %v4_b8a4 to i8*
  store i8 %v1_b8a4, i8* %v5_b8a4, align 1
  br label %dec_label_pc_b6ec

dec_label_pc_b8ac:                                ; preds = %dec_label_pc_b6ec, %dec_label_pc_b680
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b8b0 = call i32 @function_10904(i32* null)
  store i32 %v2_b8b0, i32* %r0.global-to-local, align 4
  store i32 %v2_b480, i32* %sb.global-to-local, align 4
  %v9_b8b8 = icmp eq i32 %v2_b480, %v2_b8b0
  store i1 %v9_b8b8, i1* %cpsr_z.global-to-local, align 1
  %v6_b8bc = icmp slt i32 %v2_b480, %v2_b8b0
  br i1 %v6_b8bc, label %dec_label_pc_b8c0, label %dec_label_pc_b680

dec_label_pc_b8c0:                                ; preds = %dec_label_pc_b8ac, %dec_label_pc_b338, %dec_label_pc_b8c8
  %v29_b8c4 = phi i32 [ %v3_b494, %dec_label_pc_b338 ], [ %v1_b8cc, %dec_label_pc_b8c8 ], [ %v2_b8b0, %dec_label_pc_b8ac ]
  store i32 %v18_b338, i32* %sb.global-to-local, align 4
  store i32 %v21_b338, i32* %sl.global-to-local, align 4
  ret i32 %v29_b8c4

dec_label_pc_b8c8:                                ; preds = %dec_label_pc_b4a4
  store i32 %v3_b494, i32* %r0.global-to-local, align 4
  %v1_b8cc = call i32 @function_10660(i32 %v3_b494)
  store i32 %v1_b8cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8c0

dec_label_pc_b8d4:                                ; preds = %dec_label_pc_b524
  %v3_b8d8 = sext i8 %v5_b578 to i32
  %v7_b8d8 = sext i8 %v5_b57c to i32
  %v3_b8dc = sdiv i32 %v3_b8d8, 256
  store i32 %v3_b8dc, i32* %r1.global-to-local, align 4
  %v3_b8e0 = sdiv i32 %v7_b8d8, 256
  store i32 %v3_b8e0, i32* %r2.global-to-local, align 4
  store i32 %v1_b530, i32* %r3.global-to-local, align 4
  store i32 %v0_b510, i32* @r4, align 4
  store i32 %v1_b574, i32* %sl.global-to-local, align 4
  %v3_b8fc20 = udiv i32 %v1_b568, 256
  store i32 %v3_b8fc20, i32* @r7, align 4
  %sext9 = mul i32 %v6_b400, 16777216
  %v4_b994 = sdiv i32 %sext9, 16777216
  br label %dec_label_pc_b900

dec_label_pc_b900:                                ; preds = %dec_label_pc_b900, %dec_label_pc_b8d4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b90c = call i32 @function_10ee8(i32 1510, i32 1)
  store i32 %v2_b90c, i32* %r0.global-to-local, align 4
  store i32 %v2_b368, i32* %ip.global-to-local, align 4
  %v3_b914 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b914, i32* %r2.global-to-local, align 4
  %v2_b918 = load i32, i32* @r4, align 4
  %v5_b918 = mul i32 %v2_b918, 4
  %v6_b918 = add i32 %v5_b918, %v2_b368
  %v7_b918 = inttoptr i32 %v6_b918 to i32*
  store i32 %v2_b90c, i32* %v7_b918, align 4
  %v0_b91c = load i32, i32* %ip.global-to-local, align 4
  %v1_b91c = load i32, i32* %r2.global-to-local, align 4
  %v4_b91c = mul i32 %v1_b91c, 4
  %v5_b91c = add i32 %v4_b91c, %v0_b91c
  %v6_b91c = inttoptr i32 %v5_b91c to i32*
  %v7_b91c = load i32, i32* %v6_b91c, align 4
  store i32 %v7_b91c, i32* %r1.global-to-local, align 4
  %v1_b920 = inttoptr i32 %v7_b91c to i8*
  %v2_b920 = load i8, i8* %v1_b920, align 1
  %tmp67 = urem i8 %v2_b920, 16
  %v1_b924 = zext i8 %tmp67 to i32
  %v1_b928 = or i32 %v1_b924, 64
  store i32 %v1_b928, i32* %r3.global-to-local, align 4
  %v1_b92c = trunc i32 %v1_b928 to i8
  store i8 %v1_b92c, i8* %v1_b920, align 1
  %v0_b930 = load i32, i32* %r1.global-to-local, align 4
  %v1_b930 = inttoptr i32 %v0_b930 to i8*
  %v2_b930 = load i8, i8* %v1_b930, align 1
  %v3_b930 = zext i8 %v2_b930 to i32
  %v1_b934 = and i32 %v3_b930, 240
  %v1_b938 = or i32 %v1_b934, 5
  store i32 %v1_b938, i32* %r2.global-to-local, align 4
  %v3_b940 = add i32 %v0_b930, 9
  %v4_b940 = inttoptr i32 %v3_b940 to i8*
  store i8 17, i8* %v4_b940, align 1
  %v0_b944 = load i32, i32* %r2.global-to-local, align 4
  %v1_b944 = trunc i32 %v0_b944 to i8
  %v2_b944 = load i32, i32* %r1.global-to-local, align 4
  %v3_b944 = inttoptr i32 %v2_b944 to i8*
  store i8 %v1_b944, i8* %v3_b944, align 1
  store i32 %v6_b380, i32* %r0.global-to-local, align 4
  %v2_b94c = load i32, i32* %r1.global-to-local, align 4
  %v3_b94c = add i32 %v2_b94c, 1
  %v4_b94c = inttoptr i32 %v3_b94c to i8*
  store i8 %v5_b3a0, i8* %v4_b94c, align 1
  %v2_b954 = load i32, i32* %r1.global-to-local, align 4
  %v3_b954 = add i32 %v2_b954, 8
  %v4_b954 = inttoptr i32 %v3_b954 to i8*
  store i8 %v5_b3d8, i8* %v4_b954, align 1
  %v3_b958 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b958, i32* %r2.global-to-local, align 4
  %v3_b95c = mul i32 %v3_b958, 32
  store i32 %v3_b95c, i32* %r3.global-to-local, align 4
  %v0_b960 = load i32, i32* @fp, align 4
  %v1_b960 = load i32, i32* %r1.global-to-local, align 4
  %v2_b960 = add i32 %v1_b960, 12
  %v3_b960 = inttoptr i32 %v2_b960 to i32*
  store i32 %v0_b960, i32* %v3_b960, align 4
  %v0_b964 = load i32, i32* %r3.global-to-local, align 4
  %v1_b964 = load i32, i32* %r2.global-to-local, align 4
  %tmp68 = mul i32 %v1_b964, -8
  %v5_b964 = add i32 %v0_b964, %tmp68
  store i32 %v3_b8d8, i32* %ip.global-to-local, align 4
  %v1_b96c = load i32, i32* @r8, align 4
  %v2_b96c = add i32 %v1_b96c, %v5_b964
  store i32 %v2_b96c, i32* %r3.global-to-local, align 4
  %v1_b970 = add i32 %v2_b96c, 16
  %v2_b970 = inttoptr i32 %v1_b970 to i32*
  %v3_b970 = load i32, i32* %v2_b970, align 4
  store i32 %v3_b970, i32* %r0.global-to-local, align 4
  %v2_b974 = load i32, i32* %r1.global-to-local, align 4
  %v3_b974 = add i32 %v2_b974, 2
  %v4_b974 = inttoptr i32 %v3_b974 to i8*
  store i8 %v5_b578, i8* %v4_b974, align 1
  store i32 %v3_b8e0, i32* %ip.global-to-local, align 4
  %v0_b97c = load i32, i32* %r2.global-to-local, align 4
  %v1_b97c = add i32 %v0_b97c, 1
  store i32 %v1_b97c, i32* @r4, align 4
  store i32 %v1_b33c, i32* %r3.global-to-local, align 4
  store i32 %v7_b8d8, i32* %r2.global-to-local, align 4
  %v0_b988 = load i32, i32* %r0.global-to-local, align 4
  %v1_b988 = load i32, i32* %r1.global-to-local, align 4
  %v2_b988 = add i32 %v1_b988, 16
  %v3_b988 = inttoptr i32 %v2_b988 to i32*
  store i32 %v0_b988, i32* %v3_b988, align 4
  store i32 %v3_b8dc, i32* %r0.global-to-local, align 4
  %v0_b990 = load i32, i32* %ip.global-to-local, align 4
  %v1_b990 = trunc i32 %v0_b990 to i8
  %v2_b990 = load i32, i32* %r1.global-to-local, align 4
  %v3_b990 = add i32 %v2_b990, 5
  %v4_b990 = inttoptr i32 %v3_b990 to i8*
  store i8 %v1_b990, i8* %v4_b990, align 1
  store i32 %v4_b994, i32* %ip.global-to-local, align 4
  %v0_b998 = load i32, i32* %r0.global-to-local, align 4
  %v1_b998 = trunc i32 %v0_b998 to i8
  %v2_b998 = load i32, i32* %r1.global-to-local, align 4
  %v3_b998 = add i32 %v2_b998, 3
  %v4_b998 = inttoptr i32 %v3_b998 to i8*
  store i8 %v1_b998, i8* %v4_b998, align 1
  %v0_b99c = load i32, i32* %r2.global-to-local, align 4
  %v1_b99c = trunc i32 %v0_b99c to i8
  %v2_b99c = load i32, i32* %r1.global-to-local, align 4
  %v3_b99c = add i32 %v2_b99c, 4
  %v4_b99c = inttoptr i32 %v3_b99c to i8*
  store i8 %v1_b99c, i8* %v4_b99c, align 1
  %v0_b9a0 = load i32, i32* @r4, align 4
  %v1_b9a0 = load i32, i32* %r3.global-to-local, align 4
  %v9_b9a0 = icmp eq i32 %v0_b9a0, %v1_b9a0
  store i1 %v9_b9a0, i1* %cpsr_z.global-to-local, align 1
  store i32 64, i32* %r0.global-to-local, align 4
  %v0_b9a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b9a8 = add i32 %v0_b9a8, 20
  store i32 %v1_b9a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b9b0 = add i32 %v0_b9a8, 6
  %v4_b9b0 = inttoptr i32 %v3_b9b0 to i8*
  store i8 64, i8* %v4_b9b0, align 1
  %v0_b9b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b9b4 = trunc i32 %v0_b9b4 to i8
  %v2_b9b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_b9b4 = add i32 %v2_b9b4, 7
  %v4_b9b4 = inttoptr i32 %v3_b9b4 to i8*
  store i8 %v1_b9b4, i8* %v4_b9b4, align 1
  %v0_b9b8 = load i32, i32* @r5, align 4
  %v1_b9b8 = trunc i32 %v0_b9b8 to i8
  %v2_b9b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b9b8 = add i32 %v2_b9b8, 20
  %v4_b9b8 = inttoptr i32 %v3_b9b8 to i8*
  store i8 %v1_b9b8, i8* %v4_b9b8, align 1
  %v0_b9bc = load i32, i32* @r7, align 4
  %v1_b9bc = trunc i32 %v0_b9bc to i8
  %v2_b9bc = load i32, i32* %r3.global-to-local, align 4
  %v3_b9bc = add i32 %v2_b9bc, 5
  %v4_b9bc = inttoptr i32 %v3_b9bc to i8*
  store i8 %v1_b9bc, i8* %v4_b9bc, align 1
  %v0_b9c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_b9c0 = trunc i32 %v0_b9c0 to i8
  %v2_b9c0 = load i32, i32* %r3.global-to-local, align 4
  %v3_b9c0 = add i32 %v2_b9c0, 1
  %v4_b9c0 = inttoptr i32 %v3_b9c0 to i8*
  store i8 %v1_b9c0, i8* %v4_b9c0, align 1
  %v0_b9c4 = load i32, i32* @r6, align 4
  %v1_b9c4 = trunc i32 %v0_b9c4 to i8
  %v2_b9c4 = load i32, i32* %r3.global-to-local, align 4
  %v3_b9c4 = add i32 %v2_b9c4, 2
  %v4_b9c4 = inttoptr i32 %v3_b9c4 to i8*
  store i8 %v1_b9c4, i8* %v4_b9c4, align 1
  %v0_b9c8 = load i32, i32* %sl.global-to-local, align 4
  %v1_b9c8 = trunc i32 %v0_b9c8 to i8
  %v2_b9c8 = load i32, i32* %r3.global-to-local, align 4
  %v3_b9c8 = add i32 %v2_b9c8, 3
  %v4_b9c8 = inttoptr i32 %v3_b9c8 to i8*
  store i8 %v1_b9c8, i8* %v4_b9c8, align 1
  %v0_b9cc = load i32, i32* %sb.global-to-local, align 4
  %v1_b9cc = trunc i32 %v0_b9cc to i8
  %v2_b9cc = load i32, i32* %r3.global-to-local, align 4
  %v3_b9cc = add i32 %v2_b9cc, 4
  %v4_b9cc = inttoptr i32 %v3_b9cc to i8*
  store i8 %v1_b9cc, i8* %v4_b9cc, align 1
  %v0_b9d0 = load i32, i32* @r4, align 4
  store i32 %v0_b9d0, i32* %stack_var_-40, align 4
  %v5_b9d4 = icmp slt i32 %v0_b9a0, %v1_b9a0
  br i1 %v5_b9d4, label %dec_label_pc_b900, label %dec_label_pc_b680.preheader

; uselistorder directives
  uselistorder i32 %v3_b8e0, { 1, 0 }
  uselistorder i32 %v3_b8dc, { 1, 0 }
  uselistorder i32 %v7_b8d8, { 1, 0 }
  uselistorder i32 %v3_b8d8, { 1, 0 }
  uselistorder i32 %v1_b8cc, { 1, 0 }
  uselistorder i32 %v4_b87c, { 1, 0 }
  uselistorder i32 %v0_b874, { 0, 2, 1 }
  uselistorder i32 %v0_b858, { 0, 2, 1 }
  uselistorder i32 %v2_b810, { 1, 0 }
  uselistorder i32 %v8_b7f4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_b7e0, { 1, 0 }
  uselistorder i32 %v3_b7bc, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b788, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_b72c, { 0, 2, 1 }
  uselistorder i32 %v0_b714, { 1, 0, 2, 3 }
  uselistorder i32 %v4_b700, { 1, 0 }
  uselistorder i32 %v2_b6fc, { 0, 2, 1 }
  uselistorder i1 %v7_b6ac, { 1, 0 }
  uselistorder i1 %v3_b830, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b61c, { 1, 0 }
  uselistorder i8 %v5_b57c, { 0, 2, 1 }
  uselistorder i8 %v5_b578, { 0, 2, 1 }
  uselistorder i32 %v1_b574, { 1, 2, 0 }
  uselistorder i32 %v3_b560, { 1, 0 }
  uselistorder i32 %v1_b54c, { 1, 0 }
  uselistorder i32 %v1_b530, { 1, 2, 0 }
  uselistorder i32 %v1_b52c, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v1_b528, { 2, 3, 1, 0 }
  uselistorder i1 %v2_b50c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b500, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b4f4, { 1, 0, 2 }
  uselistorder i32 %v0_b4e4, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_b4d8, { 3, 1, 2, 0 }
  uselistorder i1 %v7_b4c4, { 1, 0 }
  uselistorder i1 %v7_b498, { 1, 0 }
  uselistorder i32 %v3_b494, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_b480, { 2, 1, 0 }
  uselistorder i32 %v1_b45c, { 3, 1, 2, 4, 0 }
  uselistorder i32 %v6_b400, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 %v1_b3e8, { 2, 1, 0 }
  uselistorder i32 %v6_b3bc, { 2, 1, 3, 0 }
  uselistorder i32 %v7_b3a4, { 0, 2, 1, 4, 3, 5, 6 }
  uselistorder i32 %v6_b380, { 2, 1, 3, 0 }
  uselistorder i32 %v2_b368, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v1_b33c, { 6, 2, 3, 4, 1, 5, 9, 0, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 13, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 50, 49, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 10, 9, 12, 11, 14, 13, 16, 17, 15, 19, 18, 21, 20, 22, 24, 23, 32, 25, 26, 27, 28, 29, 30, 31, 37, 33, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 240, { 1, 0 }
  uselistorder i32 512, { 0, 5, 4, 1, 6, 2, 7, 3, 8 }
  uselistorder label %dec_label_pc_b8c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b890, { 1, 0 }
  uselistorder label %dec_label_pc_b6ec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b680, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
}

define i32 @function_b9e0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b9e0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_b9e0 = load i32, i32* @r4, align 4
  %v12_b9e0 = load i32, i32* @r7, align 4
  %v15_b9e0 = load i32, i32* @r8, align 4
  %v1_b9e4 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  %v1_ba00 = urem i32 %arg4, 256
  store i32 %v1_ba00, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_ba10 = call i32 @function_10ee8(i32 %v1_b9e4, i32 4)
  %v0_ba14 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ba1c = load i32, i32* @r7, align 4
  store i32 %v0_ba1c, i32* %r3.global-to-local, align 4
  store i32 %v2_ba10, i32* %fp.global-to-local, align 4
  %v0_ba24 = load i32, i32* @r4, align 4
  %v5_ba28 = inttoptr i32 %v0_ba14 to i32*
  %v6_ba28 = call i32 @function_829c(i32 %v0_ba24, i32* %v5_ba28, i32 2, i32 %v0_ba1c, i32 ptrtoint (i32* @0 to i32))
  %v1_ba34 = urem i32 %v6_ba28, 256
  store i32 %v1_ba34, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ba40 = load i32, i32* @r4, align 4
  %v0_ba44 = load i32, i32* @r5, align 4
  %v5_ba48 = trunc i32 %v6_ba28 to i8
  %v6_ba4c = inttoptr i32 %v0_ba44 to i32*
  %v7_ba4c = call i32 @function_829c(i32 %v0_ba40, i32* %v6_ba4c, i32 3, i32 65535, i32 %v6_ba28)
  %v0_ba50 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_ba5c = load i32, i32* @r4, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_ba64 = inttoptr i32 %v0_ba50 to i32*
  %v6_ba64 = call i32 @function_829c(i32 %v0_ba5c, i32* %v5_ba64, i32 4, i32 64, i32 %v7_ba4c)
  %v1_ba6c = urem i32 %v6_ba64, 256
  store i32 %v1_ba6c, i32* %ip.global-to-local, align 4
  %v0_ba70 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_ba78 = load i32, i32* @r7, align 4
  store i32 %v0_ba78, i32* %r3.global-to-local, align 4
  %v0_ba7c = load i32, i32* @r4, align 4
  %sext8 = mul i32 %v6_ba64, 16777216
  %v5_ba84 = sdiv i32 %sext8, 16777216
  %v6_ba84 = inttoptr i32 %v0_ba70 to i32*
  %v7_ba84 = call i32 @function_829c(i32 %v0_ba7c, i32* %v6_ba84, i32 5, i32 %v0_ba78, i32 %v5_ba84)
  %v1_ba90 = urem i32 %v7_ba84, 256
  store i32 %v1_ba90, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ba9c = load i32, i32* @r4, align 4
  %v0_baa0 = load i32, i32* @r5, align 4
  %v5_baa8 = inttoptr i32 %v0_baa0 to i32*
  %v6_baa8 = call i32 @function_829c(i32 %v0_ba9c, i32* %v5_baa8, i32 6, i32 65535, i32 %v1_ba90)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_bab8 = load i32, i32* @r5, align 4
  store i32 %v6_baa8, i32* @r8, align 4
  %v0_bac0 = load i32, i32* @r4, align 4
  %v5_bac4 = inttoptr i32 %v0_bab8 to i32*
  %v6_bac4 = call i32 @function_829c(i32 %v0_bac0, i32* %v5_bac4, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_bac4, i32* @r4, align 4
  %v0_bacc = load i32, i32* @r7, align 4
  store i32 %v0_bacc, i32* %stack_var_-44, align 4
  %v1_bad4 = inttoptr i32 %v0_bacc to i32*
  %v2_bad4 = call i32 @function_10904(i32* %v1_bad4)
  %v1_bad8 = load i32, i32* @r6, align 4
  %v2_bad8 = add i32 %v1_bad8, %v2_bad4
  %v1_bae4 = call i32 @function_fb34(i32 14)
  %v3_baf0 = call i32 @function_fa50(i32 14, i32* nonnull %stack_var_-44)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_bb04 = call i32 @function_10bfc(i32 2, i32 3, i32 17)
  %v7_bb08 = icmp eq i32 %v3_bb04, -1
  store i1 %v7_bb08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_bb04, i32* %sb.global-to-local, align 4
  br i1 %v7_bb08, label %dec_label_pc_bec8, label %dec_label_pc_bb14

dec_label_pc_bb14:                                ; preds = %dec_label_pc_b9e0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bb1c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bb1c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_bb24 = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bb30 = call i32 @function_10bcc(i32 %v3_bb04, i32 %v0_bb24, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_bb34 = icmp eq i32 %v6_bb30, -1
  store i1 %v7_bb34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb34, label %dec_label_pc_bed0, label %dec_label_pc_bb3c

dec_label_pc_bb3c:                                ; preds = %dec_label_pc_bb14
  store i32 %v1_b9e4, i32* %r2.global-to-local, align 4
  %v0_bb48 = load i32, i32* @r4, align 4
  %v3_bb48 = mul i32 %v0_bb48, 65536
  store i32 %v3_bb48, i32* @lr, align 4
  %v0_bb4c = load i32, i32* @r8, align 4
  %v3_bb4c = mul i32 %v0_bb4c, 65536
  store i32 %v3_bb4c, i32* %ip.global-to-local, align 4
  %v3_bb50 = urem i32 %v7_ba4c, 65536
  store i32 %v3_bb50, i32* %r3.global-to-local, align 4
  %v3_bb54 = urem i32 %v0_bb4c, 65536
  store i32 %v3_bb54, i32* %r4.global-to-local, align 4
  %v3_bb58 = urem i32 %v0_bb48, 65536
  %v2_bb5c = icmp eq i32 %v1_b9e4, 0
  store i1 %v2_bb5c, i1* %cpsr_z.global-to-local, align 1
  %v0_bb60 = load i32, i32* @r7, align 4
  store i32 %v0_bb60, i32* %stack_var_-40, align 4
  br i1 %v2_bb5c, label %dec_label_pc_beb4.critedge, label %dec_label_pc_bb74

dec_label_pc_bb74:                                ; preds = %dec_label_pc_bb3c
  %v1_bb78 = urem i32 %v7_ba4c, 256
  %v1_bb7c = urem i32 %v0_bb48, 256
  %tmp41 = udiv i32 %v7_ba4c, 256
  %v3_bb84 = urem i32 %tmp41, 256
  %v3_bb88 = mul nuw nsw i32 %v1_bb7c, 256
  store i32 %v3_bb88, i32* %r3.global-to-local, align 4
  %v1_bb8c = urem i32 %v0_bb4c, 256
  %v4_bb90 = mul nuw nsw i32 %v1_bb78, 256
  %v5_bb90 = or i32 %v4_bb90, %v3_bb84
  store i32 %v5_bb90, i32* %r8.global-to-local, align 4
  %tmp42 = udiv i32 %v0_bb4c, 256
  %v3_bb94 = urem i32 %tmp42, 256
  store i32 %v3_bb94, i32* %ip.global-to-local, align 4
  %tmp43 = udiv i32 %v0_bb48, 256
  %v4_bb98 = urem i32 %tmp43, 256
  %v5_bb98 = or i32 %v4_bb98, %v3_bb88
  store i32 %v5_bb98, i32* @r5, align 4
  %v4_bb9c = mul nuw nsw i32 %v1_bb8c, 256
  %v5_bb9c = or i32 %v4_bb9c, %v3_bb94
  store i32 %v5_bb9c, i32* @r6, align 4
  store i32 %v1_bb7c, i32* %r2.global-to-local, align 4
  store i32 %v0_bb60, i32* @r4, align 4
  store i32 %v1_bb8c, i32* @r7, align 4
  %sext = mul i32 %v7_ba4c, 16777216
  %v4_bc34 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v0_bb48, 16777216
  %v4_bc90 = sdiv i32 %sext5, 16777216
  %v2_bc1c = icmp eq i32 %v1_ba90, 0
  %v1_bc20 = trunc i32 %v5_ba84 to i8
  br label %dec_label_pc_bbb8

dec_label_pc_bbb8:                                ; preds = %bb47, %dec_label_pc_bb74
  %v2_bbc0 = call i32 @function_10ee8(i32 128, i32 1)
  %v3_bbc4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bbc4, i32* %r3.global-to-local, align 4
  %v1_bbc8 = load i32, i32* %fp.global-to-local, align 4
  %v2_bbc8 = load i32, i32* @r4, align 4
  %v5_bbc8 = mul i32 %v2_bbc8, 4
  %v6_bbc8 = add i32 %v5_bbc8, %v1_bbc8
  %v7_bbc8 = inttoptr i32 %v6_bbc8 to i32*
  store i32 %v2_bbc0, i32* %v7_bbc8, align 4
  %v0_bbcc = load i32, i32* %fp.global-to-local, align 4
  %v1_bbcc = load i32, i32* %r3.global-to-local, align 4
  %v4_bbcc = mul i32 %v1_bbcc, 4
  %v5_bbcc = add i32 %v4_bbcc, %v0_bbcc
  %v6_bbcc = inttoptr i32 %v5_bbcc to i32*
  %v7_bbcc = load i32, i32* %v6_bbcc, align 4
  store i32 %v7_bbcc, i32* @lr, align 4
  %v1_bbd0 = inttoptr i32 %v7_bbcc to i8*
  %v2_bbd0 = load i8, i8* %v1_bbd0, align 1
  %tmp = urem i8 %v2_bbd0, 16
  %v1_bbd4 = zext i8 %tmp to i32
  %v1_bbd8 = or i32 %v1_bbd4, 64
  store i32 %v1_bbd8, i32* %r3.global-to-local, align 4
  %v1_bbe0 = trunc i32 %v1_bbd8 to i8
  store i8 %v1_bbe0, i8* %v1_bbd0, align 1
  %v0_bbe4 = load i32, i32* @lr, align 4
  %v1_bbe4 = inttoptr i32 %v0_bbe4 to i8*
  %v2_bbe4 = load i8, i8* %v1_bbe4, align 1
  %v1_bbe8 = and i8 %v2_bbe4, -16
  %v1_bbec = or i8 %v1_bbe8, 5
  store i8 %v1_bbec, i8* %v1_bbe4, align 1
  %v2_bbf8 = load i32, i32* @lr, align 4
  %v3_bbf8 = add i32 %v2_bbf8, 1
  %v4_bbf8 = inttoptr i32 %v3_bbf8 to i8*
  store i8 %v5_ba48, i8* %v4_bbf8, align 1
  %v3_bbfc = load i32, i32* %stack_var_-44, align 4
  %v1_bc00 = add i32 %v3_bbfc, 32
  %tmp44 = mul i32 %v1_bc00, 256
  store i32 %v1_ba90, i32* %r4.global-to-local, align 4
  %v1_bc10 = and i32 %tmp44, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp45 = udiv i32 %v1_bc00, 256
  %v4_bc14 = urem i32 %tmp45, 256
  %v5_bc14 = or i32 %v4_bc14, %v1_bc10
  store i32 %v5_bc14, i32* %r2.global-to-local, align 4
  store i32 %v5_ba84, i32* %r3.global-to-local, align 4
  store i1 %v2_bc1c, i1* %cpsr_z.global-to-local, align 1
  %v2_bc20 = load i32, i32* @lr, align 4
  %v3_bc20 = add i32 %v2_bc20, 8
  %v4_bc20 = inttoptr i32 %v3_bc20 to i8*
  store i8 %v1_bc20, i8* %v4_bc20, align 1
  %v0_bc24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc24, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bbb8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bc28 = load i32, i32* @lr, align 4
  %v4_bc28 = add i32 %v3_bc28, 6
  %v5_bc28 = inttoptr i32 %v4_bc28 to i8*
  store i8 64, i8* %v5_bc28, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bbb8, %bb
  %v0_bc30 = load i32, i32* %r2.global-to-local, align 4
  %v3_bc30 = sdiv i32 %v0_bc30, 256
  store i32 %v3_bc30, i32* %ip.global-to-local, align 4
  store i32 %v4_bc34, i32* %r4.global-to-local, align 4
  %v2_bc38 = load i32, i32* @lr, align 4
  %v3_bc38 = add i32 %v2_bc38, 9
  %v4_bc38 = inttoptr i32 %v3_bc38 to i8*
  store i8 17, i8* %v4_bc38, align 1
  store i32 ptrtoint (i32* @global_var_1b230.48 to i32), i32* %r3.global-to-local, align 4
  %v0_bc40 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc40 = trunc i32 %v0_bc40 to i8
  %v2_bc40 = load i32, i32* @lr, align 4
  %v3_bc40 = add i32 %v2_bc40, 2
  %v4_bc40 = inttoptr i32 %v3_bc40 to i8*
  store i8 %v1_bc40, i8* %v4_bc40, align 1
  %v0_bc44 = load i32, i32* %ip.global-to-local, align 4
  %v1_bc44 = trunc i32 %v0_bc44 to i8
  %v2_bc44 = load i32, i32* @lr, align 4
  %v3_bc44 = add i32 %v2_bc44, 3
  %v4_bc44 = inttoptr i32 %v3_bc44 to i8*
  store i8 %v1_bc44, i8* %v4_bc44, align 1
  %v0_bc48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc48, label %.thread6, label %bb46

.thread6:                                         ; preds = %.thread
  %v3_bc4c7 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc4c7, i32* %ip.global-to-local, align 4
  br label %bb47

bb46:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_bc4c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc4c, i32* %ip.global-to-local, align 4
  %v3_bc50 = load i32, i32* @lr, align 4
  %v4_bc50 = add i32 %v3_bc50, 7
  %v5_bc50 = inttoptr i32 %v4_bc50 to i8*
  store i8 0, i8* %v5_bc50, align 1
  %v0_bc58.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %.thread6, %bb46
  %v0_bc58 = phi i32 [ %v3_bc4c7, %.thread6 ], [ %v0_bc58.pre, %bb46 ]
  %v2_bc54 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_bc54, i32* %r2.global-to-local, align 4
  %v3_bc58 = mul i32 %v0_bc58, 32
  store i32 %v3_bc58, i32* %r3.global-to-local, align 4
  %v1_bc5c = load i32, i32* @lr, align 4
  %v2_bc5c = add i32 %v1_bc5c, 12
  %v3_bc5c = inttoptr i32 %v2_bc5c to i32*
  store i32 %v2_bc54, i32* %v3_bc5c, align 4
  %v0_bc60 = load i32, i32* %r3.global-to-local, align 4
  %v1_bc60 = load i32, i32* %ip.global-to-local, align 4
  %tmp52 = mul i32 %v1_bc60, -8
  %v5_bc60 = add i32 %v0_bc60, %tmp52
  %v1_bc64 = load i32, i32* @sl, align 4
  %v2_bc64 = add i32 %v5_bc60, %v1_bc64
  store i32 %v2_bc64, i32* %r3.global-to-local, align 4
  %v1_bc68 = add i32 %v2_bc64, 16
  %v2_bc68 = inttoptr i32 %v1_bc68 to i32*
  %v3_bc68 = load i32, i32* %v2_bc68, align 4
  %v1_bc6c = load i32, i32* @lr, align 4
  %v2_bc6c = add i32 %v1_bc6c, 16
  %v3_bc6c = inttoptr i32 %v2_bc6c to i32*
  store i32 %v3_bc68, i32* %v3_bc6c, align 4
  %v3_bc70 = load i32, i32* %stack_var_-44, align 4
  %v1_bc74 = add i32 %v3_bc70, 12
  %tmp48 = mul i32 %v1_bc74, 256
  %v1_bc84 = and i32 %tmp48, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp49 = udiv i32 %v1_bc74, 256
  %v4_bc88 = urem i32 %tmp49, 256
  %v5_bc88 = or i32 %v4_bc88, %v1_bc84
  store i32 %v5_bc88, i32* %ip.global-to-local, align 4
  %v1_bc8c = load i32, i32* @lr, align 4
  %v2_bc8c = add i32 %v1_bc8c, 28
  %v3_bc8c = inttoptr i32 %v2_bc8c to i32*
  store i32 -1, i32* %v3_bc8c, align 4
  store i32 %v4_bc90, i32* %r2.global-to-local, align 4
  %v0_bc94 = load i32, i32* %r4.global-to-local, align 4
  %v1_bc94 = trunc i32 %v0_bc94 to i8
  %v2_bc94 = load i32, i32* @lr, align 4
  %v3_bc94 = add i32 %v2_bc94, 5
  %v4_bc94 = inttoptr i32 %v3_bc94 to i8*
  store i8 %v1_bc94, i8* %v4_bc94, align 1
  %v0_bc98 = load i32, i32* %ip.global-to-local, align 4
  %v3_bc98 = sdiv i32 %v0_bc98, 256
  store i32 %v3_bc98, i32* %r3.global-to-local, align 4
  %v0_bc9c = load i32, i32* @lr, align 4
  %v1_bc9c = add i32 %v0_bc9c, 20
  store i32 %v1_bc9c, i32* %r4.global-to-local, align 4
  %v0_bca0 = load i32, i32* %r8.global-to-local, align 4
  %v1_bca0 = trunc i32 %v0_bca0 to i8
  %v3_bca0 = add i32 %v0_bc9c, 4
  %v4_bca0 = inttoptr i32 %v3_bca0 to i8*
  store i8 %v1_bca0, i8* %v4_bca0, align 1
  %v0_bca4 = load i32, i32* @r6, align 4
  %v1_bca4 = trunc i32 %v0_bca4 to i8
  %v2_bca4 = load i32, i32* @lr, align 4
  %v3_bca4 = add i32 %v2_bca4, 20
  %v4_bca4 = inttoptr i32 %v3_bca4 to i8*
  store i8 %v1_bca4, i8* %v4_bca4, align 1
  %v0_bca8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bca8 = trunc i32 %v0_bca8 to i8
  %v2_bca8 = load i32, i32* %r4.global-to-local, align 4
  %v3_bca8 = add i32 %v2_bca8, 5
  %v4_bca8 = inttoptr i32 %v3_bca8 to i8*
  store i8 %v1_bca8, i8* %v4_bca8, align 1
  %v0_bcac = load i32, i32* @r5, align 4
  %v1_bcac = trunc i32 %v0_bcac to i8
  %v2_bcac = load i32, i32* %r4.global-to-local, align 4
  %v3_bcac = add i32 %v2_bcac, 2
  %v4_bcac = inttoptr i32 %v3_bcac to i8*
  store i8 %v1_bcac, i8* %v4_bcac, align 1
  %v0_bcb0 = load i32, i32* @r7, align 4
  %v1_bcb0 = trunc i32 %v0_bcb0 to i8
  %v2_bcb0 = load i32, i32* %r4.global-to-local, align 4
  %v3_bcb0 = add i32 %v2_bcb0, 1
  %v4_bcb0 = inttoptr i32 %v3_bcb0 to i8*
  store i8 %v1_bcb0, i8* %v4_bcb0, align 1
  %v0_bcb4 = load i32, i32* @lr, align 4
  %v1_bcb4 = add i32 %v0_bcb4, 32
  %v0_bcb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcb8 = trunc i32 %v0_bcb8 to i8
  %v2_bcb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_bcb8 = add i32 %v2_bcb8, 3
  %v4_bcb8 = inttoptr i32 %v3_bcb8 to i8*
  store i8 %v1_bcb8, i8* %v4_bcb8, align 1
  %v0_bcbc = load i32, i32* %ip.global-to-local, align 4
  %v1_bcbc = trunc i32 %v0_bcbc to i8
  %v2_bcbc = load i32, i32* %r4.global-to-local, align 4
  %v3_bcbc = add i32 %v2_bcbc, 4
  %v4_bcbc = inttoptr i32 %v3_bcbc to i8*
  store i8 %v1_bcbc, i8* %v4_bcbc, align 1
  %v3_bcc0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bcc0, i32* %r2.global-to-local, align 4
  %v3_bcc4 = call i32 @function_ffd4(i32 %v1_bcb4, i32 %v3_baf0, i32 %v3_bcc0)
  %v3_bcc8 = load i32, i32* %stack_var_-40, align 4
  %v1_bccc = add i32 %v3_bcc8, 1
  store i32 %v1_bccc, i32* @r4, align 4
  store i32 %v1_b9e4, i32* %r3.global-to-local, align 4
  %v9_bcd4 = icmp eq i32 %v1_bccc, %v1_b9e4
  store i1 %v9_bcd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bccc, i32* %stack_var_-40, align 4
  %v5_bcdc = icmp slt i32 %v1_bccc, %v1_b9e4
  br i1 %v5_bcdc, label %dec_label_pc_bbb8, label %dec_label_pc_bce0

dec_label_pc_bce0:                                ; preds = %bb47, %dec_label_pc_beb4
  store i32 %v1_b9e4, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_bb5c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_bb5c, label %dec_label_pc_beb4, label %dec_label_pc_bcf4

dec_label_pc_bcf4:                                ; preds = %dec_label_pc_bce0
  store i32 0, i32* %r8.global-to-local, align 4
  %v3_bd04 = icmp eq i32 %v3_bb50, 65535
  br label %dec_label_pc_bdd8

dec_label_pc_bd00:                                ; preds = %dec_label_pc_bdd8
  store i1 %v3_bd04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bd04, label %dec_label_pc_be68, label %dec_label_pc_bd0c

dec_label_pc_bd0c:                                ; preds = %dec_label_pc_be00.dec_label_pc_bd0c_crit_edge, %dec_label_pc_bd00
  %v1_bd10 = phi i32 [ %v1_bd10.pre, %dec_label_pc_be00.dec_label_pc_bd0c_crit_edge ], [ 65535, %dec_label_pc_bd00 ]
  store i32 %v3_bb54, i32* %r2.global-to-local, align 4
  %v9_bd10 = icmp eq i32 %v3_bb54, %v1_bd10
  store i1 %v9_bd10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd10, label %dec_label_pc_be84, label %dec_label_pc_bd18

dec_label_pc_bd18:                                ; preds = %dec_label_pc_be68.dec_label_pc_bd18_crit_edge, %dec_label_pc_bd0c
  %v1_bd1c = phi i32 [ %v1_bd1c.pre, %dec_label_pc_be68.dec_label_pc_bd18_crit_edge ], [ %v1_bd10, %dec_label_pc_bd0c ]
  store i32 %v3_bb58, i32* %r3.global-to-local, align 4
  %v9_bd1c = icmp eq i32 %v3_bb58, %v1_bd1c
  store i1 %v9_bd1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd1c, label %dec_label_pc_bea0, label %dec_label_pc_bd24

dec_label_pc_bd24:                                ; preds = %dec_label_pc_be84, %dec_label_pc_bd18, %dec_label_pc_bea0
  %v0_bd28 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd28 = trunc i32 %v0_bd28 to i8
  %v2_bd28 = load i32, i32* @r5, align 4
  %v3_bd28 = add i32 %v2_bd28, 10
  %v4_bd28 = inttoptr i32 %v3_bd28 to i8*
  store i8 %v1_bd28, i8* %v4_bd28, align 1
  %v0_bd2c = load i32, i32* %r8.global-to-local, align 4
  %v1_bd2c = trunc i32 %v0_bd2c to i8
  %v2_bd2c = load i32, i32* @r5, align 4
  %v3_bd2c = add i32 %v2_bd2c, 11
  %v4_bd2c = inttoptr i32 %v3_bd2c to i8*
  store i8 %v1_bd2c, i8* %v4_bd2c, align 1
  %v0_bd30 = load i32, i32* @r5, align 4
  store i32 %v0_bd30, i32* @r0, align 4
  %v2_bd34 = call i32 @function_c6b0(i32 %v0_bd30, i32 20)
  %v3_bd34 = trunc i32 %v2_bd34 to i8
  %v4_bd38 = sdiv i32 %v2_bd34, 256
  store i32 %v4_bd38, i32* %r3.global-to-local, align 4
  %v1_bd3c = trunc i32 %v4_bd38 to i8
  %v2_bd3c = load i32, i32* @r5, align 4
  %v3_bd3c = add i32 %v2_bd3c, 11
  %v4_bd3c = inttoptr i32 %v3_bd3c to i8*
  store i8 %v1_bd3c, i8* %v4_bd3c, align 1
  %v3_bd40 = load i32, i32* @r5, align 4
  %v4_bd40 = add i32 %v3_bd40, 10
  %v5_bd40 = inttoptr i32 %v4_bd40 to i8*
  store i8 %v3_bd34, i8* %v5_bd40, align 1
  %v0_bd44 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd44 = trunc i32 %v0_bd44 to i8
  %v2_bd44 = load i32, i32* @r6, align 4
  %v3_bd44 = add i32 %v2_bd44, 6
  %v4_bd44 = inttoptr i32 %v3_bd44 to i8*
  store i8 %v1_bd44, i8* %v4_bd44, align 1
  %v0_bd48 = load i32, i32* %r8.global-to-local, align 4
  %v1_bd48 = trunc i32 %v0_bd48 to i8
  %v2_bd48 = load i32, i32* @r6, align 4
  %v3_bd48 = add i32 %v2_bd48, 7
  %v4_bd48 = inttoptr i32 %v3_bd48 to i8*
  store i8 %v1_bd48, i8* %v4_bd48, align 1
  %v0_bd4c = load i32, i32* @r5, align 4
  %v1_bd4c = add i32 %v0_bd4c, 24
  %v2_bd4c = inttoptr i32 %v1_bd4c to i8*
  %v3_bd4c = load i8, i8* %v2_bd4c, align 1
  %v4_bd4c = zext i8 %v3_bd4c to i32
  store i32 %v4_bd4c, i32* %r3.global-to-local, align 4
  %v1_bd50 = add i32 %v0_bd4c, 25
  %v2_bd50 = inttoptr i32 %v1_bd50 to i8*
  %v3_bd50 = load i8, i8* %v2_bd50, align 1
  %v4_bd50 = zext i8 %v3_bd50 to i32
  %v4_bd54 = mul nuw nsw i32 %v4_bd50, 256
  %v5_bd54 = or i32 %v4_bd54, %v4_bd4c
  store i32 %v5_bd54, i32* %r2.global-to-local, align 4
  %v3_bd58 = load i32, i32* %stack_var_-44, align 4
  %v0_bd5c = load i32, i32* @r6, align 4
  store i32 %v0_bd5c, i32* @r1, align 4
  %v1_bd60 = add i32 %v3_bd58, 12
  store i32 %v1_bd60, i32* %r3.global-to-local, align 4
  %v4_bd68 = call i32 @function_c70c(i32 %v0_bd4c, i32 %v0_bd5c, i32 %v5_bd54, i32 %v1_bd60)
  %v5_bd68 = trunc i32 %v4_bd68 to i8
  %v4_bd6c14 = udiv i32 %v4_bd68, 256
  %v1_bd70 = trunc i32 %v4_bd6c14 to i8
  %v2_bd70 = load i32, i32* @r6, align 4
  %v3_bd70 = add i32 %v2_bd70, 7
  %v4_bd70 = inttoptr i32 %v3_bd70 to i8*
  store i8 %v1_bd70, i8* %v4_bd70, align 1
  %v3_bd74 = load i32, i32* @r6, align 4
  %v4_bd74 = add i32 %v3_bd74, 6
  %v5_bd74 = inttoptr i32 %v4_bd74 to i8*
  store i8 %v5_bd68, i8* %v5_bd74, align 1
  %v3_bd78 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd78, i32* %r3.global-to-local, align 4
  %v0_bd7c = load i32, i32* @r5, align 4
  %v1_bd7c = add i32 %v0_bd7c, 20
  %v2_bd7c = inttoptr i32 %v1_bd7c to i32*
  %v3_bd7c = load i32, i32* %v2_bd7c, align 4
  %v5_bd84 = mul i32 %v3_bd78, 24
  %v1_bd88 = load i32, i32* @sl, align 4
  %v2_bd88 = add i32 %v1_bd88, %v5_bd84
  store i32 %v2_bd88, i32* %ip.global-to-local, align 4
  %v3_bd8c = udiv i32 %v3_bd7c, 65536
  store i32 %v3_bd8c, i32* %r2.global-to-local, align 4
  %v1_bd90 = trunc i32 %v3_bd8c to i8
  %v3_bd90 = add i32 %v2_bd88, 2
  %v4_bd90 = inttoptr i32 %v3_bd90 to i8*
  store i8 %v1_bd90, i8* %v4_bd90, align 1
  %v0_bd94 = load i32, i32* %r2.global-to-local, align 4
  %v3_bd9415 = udiv i32 %v0_bd94, 256
  %v3_bd98 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bd98, i32* %r2.global-to-local, align 4
  %v1_bd9c = trunc i32 %v3_bd9415 to i8
  %v2_bd9c = load i32, i32* %ip.global-to-local, align 4
  %v3_bd9c = add i32 %v2_bd9c, 3
  %v4_bd9c = inttoptr i32 %v3_bd9c to i8*
  store i8 %v1_bd9c, i8* %v4_bd9c, align 1
  store i32 16, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bda8 = load i32, i32* @r5, align 4
  %v0_bdac = load i32, i32* %r2.global-to-local, align 4
  %v1_bdac = add i32 %v0_bdac, 32
  store i32 %v1_bdac, i32* %r2.global-to-local, align 4
  %v0_bdb0 = load i32, i32* %sb.global-to-local, align 4
  %v0_bdb8 = load i32, i32* %ip.global-to-local, align 4
  %v6_bdbc = inttoptr i32 %v0_bda8 to i32*
  %v7_bdbc = call i32 @function_10b98(i32 %v0_bdb0, i32* %v6_bdbc, i32 %v1_bdac, i32 16384, i32 %v0_bdb8, i32 16)
  %v3_bdc0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bdc0, i32* %r3.global-to-local, align 4
  store i32 %v1_b9e4, i32* @r4, align 4
  %v1_bdc8 = add i32 %v3_bdc0, 1
  %v9_bdcc = icmp eq i32 %v1_bdc8, %v1_b9e4
  store i1 %v9_bdcc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bdc8, i32* %stack_var_-40, align 4
  %v6_bdd4 = icmp slt i32 %v1_bdc8, %v1_b9e4
  br i1 %v6_bdd4, label %dec_label_pc_bdd8, label %dec_label_pc_beb4

dec_label_pc_bdd8:                                ; preds = %dec_label_pc_bd24, %dec_label_pc_bcf4
  %v1_bde8 = phi i32 [ %v1_bdc8, %dec_label_pc_bd24 ], [ 0, %dec_label_pc_bcf4 ]
  %v5_bddc = mul i32 %v1_bde8, 24
  %v1_bde0 = load i32, i32* @sl, align 4
  %v2_bde0 = add i32 %v1_bde0, %v5_bddc
  store i32 %v2_bde0, i32* %r3.global-to-local, align 4
  %v1_bde4 = add i32 %v2_bde0, 20
  %v2_bde4 = inttoptr i32 %v1_bde4 to i8*
  %v3_bde4 = load i8, i8* %v2_bde4, align 1
  %v4_bde4 = zext i8 %v3_bde4 to i32
  store i32 %v4_bde4, i32* %r2.global-to-local, align 4
  %v0_bde8 = load i32, i32* %fp.global-to-local, align 4
  %v4_bde8 = mul i32 %v1_bde8, 4
  %v5_bde8 = add i32 %v0_bde8, %v4_bde8
  %v6_bde8 = inttoptr i32 %v5_bde8 to i32*
  %v7_bde8 = load i32, i32* %v6_bde8, align 4
  store i32 %v7_bde8, i32* @r5, align 4
  %v2_bdf0 = icmp ugt i8 %v3_bde4, 30
  %v7_bdf0 = icmp eq i8 %v3_bde4, 31
  store i1 %v7_bdf0, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_bdf8 = add i32 %v7_bde8, 20
  store i32 %v1_bdf8, i32* @r6, align 4
  %v2_bdfc = xor i1 %v7_bdf0, true
  %v3_bdfc = and i1 %v2_bdf0, %v2_bdfc
  br i1 %v3_bdfc, label %dec_label_pc_bd00, label %dec_label_pc_be00

dec_label_pc_be00:                                ; preds = %dec_label_pc_bdd8
  %v1_be00 = add i32 %v2_bde0, 16
  %v2_be00 = inttoptr i32 %v1_be00 to i32*
  %v3_be00 = load i32, i32* %v2_be00, align 4
  store i32 %v3_be00, i32* @r4, align 4
  %v0_be04 = call i32 @function_d228()
  %v3_be08 = load i32, i32* %stack_var_-40, align 4
  %v5_be10 = mul i32 %v3_be08, 24
  %v0_be14 = load i32, i32* @r4, align 4
  %v1_be18 = and i32 %v0_be14, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_be18, i32* %r3.global-to-local, align 4
  %v1_be14 = udiv i32 %v0_be14, 256
  %v3_be1c = and i32 %v1_be14, 65280
  store i32 %v3_be1c, i32* %r2.global-to-local, align 4
  %v1_be20 = load i32, i32* @sl, align 4
  %v2_be20 = add i32 %v1_be20, %v5_be10
  store i32 %v2_be20, i32* %ip.global-to-local, align 4
  %v3_be24 = mul i32 %v0_be14, 16777216
  %v4_be28 = mul i32 %v1_be18, 256
  %v5_be28 = or i32 %v4_be28, %v3_be24
  %v1_be2c = add i32 %v2_be20, 20
  %v2_be2c = inttoptr i32 %v1_be2c to i8*
  %v3_be2c = load i8, i8* %v2_be2c, align 1
  %v4_be2c = zext i8 %v3_be2c to i32
  %v4_be30 = udiv i32 %v0_be14, 16777216
  %v5_be30 = or i32 %v3_be1c, %v4_be30
  %v2_be34 = or i32 %v5_be30, %v5_be28
  %v7_be38 = lshr i32 %v0_be04, %v4_be2c
  %v8_be38 = add i32 %v7_be38, %v2_be34
  store i32 %v8_be38, i32* %r2.global-to-local, align 4
  %v2_be54 = call i32 @llvm.bswap.i32(i32 %v8_be38)
  store i32 %v2_be54, i32* %r3.global-to-local, align 4
  %v1_be5c = load i32, i32* %r7.global-to-local, align 4
  %v9_be5c = icmp eq i32 %v3_bb50, %v1_be5c
  store i1 %v9_be5c, i1* %cpsr_z.global-to-local, align 1
  %v1_be60 = load i32, i32* @r5, align 4
  %v2_be60 = add i32 %v1_be60, 16
  %v3_be60 = inttoptr i32 %v2_be60 to i32*
  store i32 %v2_be54, i32* %v3_be60, align 4
  br i1 %v9_be5c, label %dec_label_pc_be68, label %dec_label_pc_be00.dec_label_pc_bd0c_crit_edge

dec_label_pc_be00.dec_label_pc_bd0c_crit_edge:    ; preds = %dec_label_pc_be00
  %v1_bd10.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_bd0c

dec_label_pc_be68:                                ; preds = %dec_label_pc_be00, %dec_label_pc_bd00
  %v0_be68 = call i32 @function_d228()
  %v1_be68 = trunc i32 %v0_be68 to i8
  store i32 %v3_bb54, i32* %r2.global-to-local, align 4
  %v4_be70 = sdiv i32 %v0_be68, 256
  store i32 %v4_be70, i32* %r3.global-to-local, align 4
  %v1_be74 = load i32, i32* %r7.global-to-local, align 4
  %v9_be74 = icmp eq i32 %v3_bb54, %v1_be74
  store i1 %v9_be74, i1* %cpsr_z.global-to-local, align 1
  %v1_be78 = trunc i32 %v4_be70 to i8
  %v2_be78 = load i32, i32* @r5, align 4
  %v3_be78 = add i32 %v2_be78, 5
  %v4_be78 = inttoptr i32 %v3_be78 to i8*
  store i8 %v1_be78, i8* %v4_be78, align 1
  %v3_be7c = load i32, i32* @r5, align 4
  %v4_be7c = add i32 %v3_be7c, 4
  %v5_be7c = inttoptr i32 %v4_be7c to i8*
  store i8 %v1_be68, i8* %v5_be7c, align 1
  %v0_be80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be80, label %dec_label_pc_be84, label %dec_label_pc_be68.dec_label_pc_bd18_crit_edge

dec_label_pc_be68.dec_label_pc_bd18_crit_edge:    ; preds = %dec_label_pc_be68
  %v1_bd1c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_bd18

dec_label_pc_be84:                                ; preds = %dec_label_pc_be68, %dec_label_pc_bd0c
  %v0_be84 = call i32 @function_d228()
  %v1_be84 = trunc i32 %v0_be84 to i8
  %v4_be88 = sdiv i32 %v0_be84, 256
  store i32 %v4_be88, i32* %r3.global-to-local, align 4
  %v3_be8c = load i32, i32* @r5, align 4
  %v4_be8c = add i32 %v3_be8c, 20
  %v5_be8c = inttoptr i32 %v4_be8c to i8*
  store i8 %v1_be84, i8* %v5_be8c, align 1
  %v0_be90 = load i32, i32* %r3.global-to-local, align 4
  %v1_be90 = trunc i32 %v0_be90 to i8
  %v2_be90 = load i32, i32* @r6, align 4
  %v3_be90 = add i32 %v2_be90, 1
  %v4_be90 = inttoptr i32 %v3_be90 to i8*
  store i8 %v1_be90, i8* %v4_be90, align 1
  store i32 %v3_bb58, i32* %r3.global-to-local, align 4
  %v1_be98 = load i32, i32* %r7.global-to-local, align 4
  %v9_be98 = icmp eq i32 %v3_bb58, %v1_be98
  store i1 %v9_be98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_be98, label %dec_label_pc_bea0, label %dec_label_pc_bd24

dec_label_pc_bea0:                                ; preds = %dec_label_pc_be84, %dec_label_pc_bd18
  %v0_bea0 = call i32 @function_d228()
  %v1_bea0 = trunc i32 %v0_bea0 to i8
  %v4_bea4 = sdiv i32 %v0_bea0, 256
  store i32 %v4_bea4, i32* %r3.global-to-local, align 4
  %v1_bea8 = trunc i32 %v4_bea4 to i8
  %v2_bea8 = load i32, i32* @r6, align 4
  %v3_bea8 = add i32 %v2_bea8, 3
  %v4_bea8 = inttoptr i32 %v3_bea8 to i8*
  store i8 %v1_bea8, i8* %v4_bea8, align 1
  %v3_beac = load i32, i32* @r6, align 4
  %v4_beac = add i32 %v3_beac, 2
  %v5_beac = inttoptr i32 %v4_beac to i8*
  store i8 %v1_bea0, i8* %v5_beac, align 1
  br label %dec_label_pc_bd24

dec_label_pc_beb4.critedge:                       ; preds = %dec_label_pc_bb3c
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_beb4

dec_label_pc_beb4:                                ; preds = %dec_label_pc_bd24, %dec_label_pc_beb4.critedge, %dec_label_pc_bce0
  %v2_beb8 = call i32 @function_10904(i32* null)
  %v9_bec0 = icmp eq i32 %v2_bad8, %v2_beb8
  store i1 %v9_bec0, i1* %cpsr_z.global-to-local, align 1
  %v6_bec4 = icmp slt i32 %v2_bad8, %v2_beb8
  br i1 %v6_bec4, label %dec_label_pc_bec8, label %dec_label_pc_bce0

dec_label_pc_bec8:                                ; preds = %dec_label_pc_beb4, %dec_label_pc_b9e0, %dec_label_pc_bed0
  %v29_becc = phi i32 [ %v3_bb04, %dec_label_pc_b9e0 ], [ %v1_bed4, %dec_label_pc_bed0 ], [ %v2_beb8, %dec_label_pc_beb4 ]
  store i32 %v3_b9e0, i32* %r4.global-to-local, align 4
  store i32 %v12_b9e0, i32* %r7.global-to-local, align 4
  store i32 %v15_b9e0, i32* %r8.global-to-local, align 4
  ret i32 %v29_becc

dec_label_pc_bed0:                                ; preds = %dec_label_pc_bb14
  %v0_bed0 = load i32, i32* %sb.global-to-local, align 4
  %v1_bed4 = call i32 @function_10660(i32 %v0_bed0)
  br label %dec_label_pc_bec8

; uselistorder directives
  uselistorder i32 %v4_bea4, { 1, 0 }
  uselistorder i32 %v4_be70, { 1, 0 }
  uselistorder i32 %v2_be54, { 1, 0 }
  uselistorder i32 %v0_be14, { 1, 0, 2, 3 }
  uselistorder i32 %v1_bdc8, { 1, 2, 0, 3 }
  uselistorder i32 %v3_bd8c, { 1, 0 }
  uselistorder i32 %v4_bd38, { 1, 0 }
  uselistorder i1 %v3_bd04, { 1, 0 }
  uselistorder i32 %v1_bccc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_bc74, { 1, 0 }
  uselistorder i32 %v1_bc00, { 1, 0 }
  uselistorder i32 %v1_bb8c, { 1, 0 }
  uselistorder i32 %v3_bb88, { 1, 0 }
  uselistorder i32 %v1_bb7c, { 1, 0 }
  uselistorder i32 %v3_bb50, { 0, 2, 1 }
  uselistorder i32 %v0_bb4c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bb48, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_bb34, { 1, 0 }
  uselistorder i1 %v7_bb08, { 1, 0 }
  uselistorder i32 %v3_bb04, { 1, 2, 3, 0 }
  uselistorder i32 %v2_bad8, { 1, 0 }
  uselistorder i32 %v1_ba90, { 1, 3, 2, 0 }
  uselistorder i32 %v5_ba84, { 0, 2, 1 }
  uselistorder i32 %v6_ba28, { 1, 2, 0 }
  uselistorder i32 %v1_b9e4, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %stack_var_-40, { 0, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 2, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 11, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 5, 10, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960), { 6, 7, 0, 1, 2, 8, 3, 9, 10, 11, 4, 5 }
  uselistorder label %dec_label_pc_bec8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_beb4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bd24, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bce0, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_bee0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_bee0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_bee0 = load i32, i32* @r4, align 4
  %v15_bee0 = load i32, i32* @r8, align 4
  %v21_bee0 = load i32, i32* @sl, align 4
  %v24_bee0 = load i32, i32* @fp, align 4
  %v1_beec = urem i32 %arg2, 256
  store i32 0, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %v1_beec, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bf04 = urem i32 %arg4, 256
  store i32 %v1_bf04, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_bf14 = call i32 @function_10ee8(i32 %v1_beec, i32 4)
  %v0_bf18 = load i32, i32* @r5, align 4
  store i32 %v0_bf18, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_bf24 = load i32, i32* @r4, align 4
  store i32 %v0_bf24, i32* %r0.global-to-local, align 4
  %v0_bf28 = load i32, i32* @r6, align 4
  store i32 %v0_bf28, i32* %r3.global-to-local, align 4
  %v5_bf2c = inttoptr i32 %v0_bf18 to i32*
  %v6_bf2c = call i32 @function_829c(i32 %v0_bf24, i32* %v5_bf2c, i32 2, i32 %v0_bf28, i32 %v2_bf14)
  %v1_bf38 = urem i32 %v6_bf2c, 256
  store i32 %v1_bf38, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bf44 = load i32, i32* @r4, align 4
  store i32 %v0_bf44, i32* %r0.global-to-local, align 4
  %v0_bf48 = load i32, i32* @r5, align 4
  store i32 %v0_bf48, i32* %r1.global-to-local, align 4
  %v5_bf4c = trunc i32 %v6_bf2c to i8
  %v6_bf50 = inttoptr i32 %v0_bf48 to i32*
  %v7_bf50 = call i32 @function_829c(i32 %v0_bf44, i32* %v6_bf50, i32 3, i32 65535, i32 %v6_bf2c)
  %v0_bf54 = load i32, i32* @r5, align 4
  store i32 %v0_bf54, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_bf60 = load i32, i32* @r4, align 4
  store i32 %v0_bf60, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_bf68 = inttoptr i32 %v0_bf54 to i32*
  %v6_bf68 = call i32 @function_829c(i32 %v0_bf60, i32* %v5_bf68, i32 4, i32 64, i32 %v7_bf50)
  %v1_bf70 = urem i32 %v6_bf68, 256
  store i32 %v1_bf70, i32* %ip.global-to-local, align 4
  %v0_bf74 = load i32, i32* @r5, align 4
  store i32 %v0_bf74, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_bf7c = load i32, i32* @r6, align 4
  store i32 %v0_bf7c, i32* %r3.global-to-local, align 4
  %v0_bf80 = load i32, i32* @r4, align 4
  store i32 %v0_bf80, i32* %r0.global-to-local, align 4
  %sext38 = mul i32 %v6_bf68, 16777216
  %v5_bf88 = sdiv i32 %sext38, 16777216
  %v6_bf88 = inttoptr i32 %v0_bf74 to i32*
  %v7_bf88 = call i32 @function_829c(i32 %v0_bf80, i32* %v6_bf88, i32 5, i32 %v0_bf7c, i32 %v5_bf88)
  %v1_bf94 = urem i32 %v7_bf88, 256
  store i32 %v1_bf94, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bfa0 = load i32, i32* @r4, align 4
  store i32 %v0_bfa0, i32* %r0.global-to-local, align 4
  %v0_bfa4 = load i32, i32* @r5, align 4
  store i32 %v0_bfa4, i32* %r1.global-to-local, align 4
  %v5_bfac = inttoptr i32 %v0_bfa4 to i32*
  %v6_bfac = call i32 @function_829c(i32 %v0_bfa0, i32* %v5_bfac, i32 6, i32 65535, i32 %v1_bf94)
  %v0_bfb0 = load i32, i32* @r5, align 4
  store i32 %v0_bfb0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_bfbc = load i32, i32* @r4, align 4
  store i32 %v0_bfbc, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_bfc4 = inttoptr i32 %v0_bfb0 to i32*
  %v6_bfc4 = call i32 @function_829c(i32 %v0_bfbc, i32* %v5_bfc4, i32 7, i32 53, i32 %v6_bfac)
  %v0_bfd0 = load i32, i32* @r5, align 4
  store i32 %v0_bfd0, i32* %r1.global-to-local, align 4
  %v0_bfd4 = load i32, i32* @r4, align 4
  store i32 %v0_bfd4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_bfe0 = inttoptr i32 %v0_bfd0 to i32*
  %v6_bfe0 = call i32 @function_829c(i32 %v0_bfd4, i32* %v5_bfe0, i32 9, i32 65535, i32 %v6_bfc4)
  %v0_bfe4 = load i32, i32* @r5, align 4
  store i32 %v0_bfe4, i32* %r1.global-to-local, align 4
  %v0_bfec = load i32, i32* @r6, align 4
  store i32 %v0_bfec, i32* %r2.global-to-local, align 4
  %v0_bff0 = load i32, i32* @r4, align 4
  store i32 %v0_bff0, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_bff8 = inttoptr i32 %v0_bfe4 to i32*
  %v6_bff8 = call i32 @function_829c(i32 %v0_bff0, i32* %v5_bff8, i32 %v0_bfec, i32 12, i32 %v6_bfe0)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_c000 = load i32, i32* @r6, align 4
  store i32 %v0_c000, i32* %r3.global-to-local, align 4
  %v0_c004 = load i32, i32* @r5, align 4
  store i32 %v0_c004, i32* %r1.global-to-local, align 4
  %v0_c00c = load i32, i32* @r4, align 4
  store i32 %v0_c00c, i32* %r0.global-to-local, align 4
  %v5_c010 = inttoptr i32 %v0_c004 to i32*
  %v6_c010 = call i32 @function_81cc(i32 %v0_c00c, i32* %v5_c010, i32 8, i32 %v0_c000, i32 %v6_bff8)
  store i32 %v6_c010, i32* @r7, align 4
  store i32 15, i32* %r0.global-to-local, align 4
  %v1_c01c = call i32 @function_fb34(i32 15)
  %v0_c020 = load i32, i32* @r6, align 4
  store i32 %v0_c020, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r0.global-to-local, align 4
  %v2_c028 = inttoptr i32 %v0_c020 to i32*
  %v3_c028 = call i32 @function_fa50(i32 15, i32* %v2_c028)
  store i32 %v3_c028, i32* %r0.global-to-local, align 4
  %v0_c02c = load i32, i32* @r6, align 4
  store i32 %v0_c02c, i32* %r1.global-to-local, align 4
  %v2_c030 = inttoptr i32 %v3_c028 to i8*
  %v3_c030 = call i32 @function_1078c(i8* %v2_c030, i32 %v0_c02c)
  store i32 %v3_c030, i32* @r4, align 4
  store i32 15, i32* %r0.global-to-local, align 4
  %v1_c03c = call i32 @function_fa7c(i32 15)
  store i32 %v1_c03c, i32* %r0.global-to-local, align 4
  %v0_c040 = load i32, i32* @r4, align 4
  %v1_c040 = load i32, i32* @r6, align 4
  %v9_c040 = icmp eq i32 %v0_c040, %v1_c040
  store i1 %v9_c040, i1* %cpsr_z.global-to-local, align 1
  %v5_c044 = icmp slt i32 %v0_c040, %v1_c040
  br i1 %v5_c044, label %dec_label_pc_c118, label %dec_label_pc_c048

dec_label_pc_c048:                                ; preds = %dec_label_pc_bee0
  %v2_c04c = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_c04c, i32* %sl.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_c04c, i32* %r1.global-to-local, align 4
  store i32 %v0_c040, i32* %r0.global-to-local, align 4
  %v4_c05c = call i32 @function_10828(i32 %v0_c040, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_c05c, i32* @r5, align 4
  %v0_c064 = load i32, i32* @r4, align 4
  store i32 %v0_c064, i32* %r0.global-to-local, align 4
  %v1_c068 = call i32 @function_10660(i32 %v0_c064)
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_c070 = call i32 @function_fb34(i32 16)
  %v0_c074 = load i32, i32* @r6, align 4
  store i32 %v0_c074, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r0.global-to-local, align 4
  %v2_c07c = inttoptr i32 %v0_c074 to i32*
  %v3_c07c = call i32 @function_fa50(i32 16, i32* %v2_c07c)
  %v0_c080 = load i32, i32* @r5, align 4
  store i32 %v0_c080, i32* @r1, align 4
  store i32 %v3_c07c, i32* %r2.global-to-local, align 4
  store i32 %v2_c04c, i32* %r0.global-to-local, align 4
  %v3_c08c = bitcast i32* %stack_var_-2120 to i8*
  %v4_c08c = call i32 @function_1024c(i8* %v3_c08c, i32 %v0_c080, i32 %v3_c07c)
  store i32 %v4_c08c, i32* %r8.global-to-local, align 4
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_c098 = call i32 @function_fa7c(i32 16)
  store i32 %v1_c098, i32* %r0.global-to-local, align 4
  %v7_c09c = icmp eq i32 %v4_c08c, -1
  store i1 %v7_c09c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c09c, label %dec_label_pc_c118, label %dec_label_pc_c0a4

dec_label_pc_c0a4:                                ; preds = %dec_label_pc_c048
  %v0_c0a4 = load i32, i32* @r5, align 4
  %v9_c0a4 = icmp eq i32 %v0_c0a4, %v4_c08c
  store i1 %v9_c0a4, i1* %cpsr_z.global-to-local, align 1
  %v7_c0a8 = icmp sgt i32 %v0_c0a4, %v4_c08c
  br i1 %v7_c0a8, label %dec_label_pc_c0ac, label %dec_label_pc_c118

dec_label_pc_c0ac:                                ; preds = %dec_label_pc_c0a4
  %v2_c0a4 = sub i32 %v0_c0a4, %v4_c08c
  store i32 %v2_c0a4, i32* %r3.global-to-local, align 4
  %v2_c0b4 = ptrtoint i32* %stack_var_-72 to i32
  %v0_c0b8 = load i32, i32* @r6, align 4
  store i32 %v0_c0b8, i32* %r1.global-to-local, align 4
  store i32 %v4_c08c, i32* %r2.global-to-local, align 4
  %v0_c0c4 = load i32, i32* %sl.global-to-local, align 4
  %v2_c0c4 = add i32 %v0_c0c4, %v4_c08c
  store i32 %v2_c0c4, i32* %r0.global-to-local, align 4
  store i32 %v2_c0b4, i32* @r4, align 4
  %v1_c0d4 = add i32 %v0_c0a4, -1
  br label %dec_label_pc_c0cc

dec_label_pc_c0cc:                                ; preds = %dec_label_pc_c108, %dec_label_pc_c0ac
  %v0_c110 = phi i32 [ %v1_c110, %dec_label_pc_c108 ], [ %v2_c0b4, %dec_label_pc_c0ac ]
  %v0_c108 = phi i32 [ %v1_c108, %dec_label_pc_c108 ], [ %v4_c08c, %dec_label_pc_c0ac ]
  %v0_c0f0 = phi i32 [ %v0_c0f046, %dec_label_pc_c108 ], [ %v0_c0b8, %dec_label_pc_c0ac ]
  %v0_c0d0 = phi i32 [ %v0_c0d042, %dec_label_pc_c108 ], [ %v0_c0b8, %dec_label_pc_c0ac ]
  %v0_c0d8 = phi i32 [ %v1_c0d8, %dec_label_pc_c108 ], [ %v2_c0c4, %dec_label_pc_c0ac ]
  %v1_c0cc = inttoptr i32 %v0_c0d8 to i8*
  %v2_c0cc = load i8, i8* %v1_c0cc, align 1
  %v3_c0cc = zext i8 %v2_c0cc to i32
  store i32 %v3_c0cc, i32* %r3.global-to-local, align 4
  %v2_c0d0 = icmp eq i32 %v0_c0d0, 0
  store i1 %v2_c0d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0d4, i32* %lr.global-to-local, align 4
  %v1_c0d8 = add i32 %v0_c0d8, 1
  store i32 %v1_c0d8, i32* %r0.global-to-local, align 4
  %v1_c0dc = add nsw i32 %v3_c0cc, -48
  store i32 %v1_c0dc, i32* %ip.global-to-local, align 4
  br i1 %v2_c0d0, label %dec_label_pc_c0e4, label %dec_label_pc_c0f4

dec_label_pc_c0e4:                                ; preds = %dec_label_pc_c0cc
  %v7_c0e4 = icmp eq i8 %v2_c0cc, 9
  store i1 %v7_c0e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0e4, label %dec_label_pc_c108, label %bb

bb:                                               ; preds = %dec_label_pc_c0e4
  %v8_c0e8 = icmp eq i8 %v2_c0cc, 32
  store i1 %v8_c0e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c0e8, label %dec_label_pc_c108, label %dec_label_pc_c0f0

dec_label_pc_c0f0:                                ; preds = %bb
  %v1_c0f0 = add i32 %v0_c0f0, 1
  store i32 %v1_c0f0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c0f4

dec_label_pc_c0f4:                                ; preds = %dec_label_pc_c0cc, %dec_label_pc_c0f0
  %v0_c0f047 = phi i32 [ %v0_c0f0, %dec_label_pc_c0cc ], [ %v1_c0f0, %dec_label_pc_c0f0 ]
  %v0_c0d043 = phi i32 [ %v0_c0d0, %dec_label_pc_c0cc ], [ %v1_c0f0, %dec_label_pc_c0f0 ]
  %v7_c0f4 = icmp eq i8 %v2_c0cc, 46
  store i1 %v7_c0f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0f4, label %dec_label_pc_c100, label %bb129

bb129:                                            ; preds = %dec_label_pc_c0f4
  %v3_c0f8 = icmp ugt i32 %v1_c0dc, 8
  %v8_c0f8 = icmp eq i32 %v1_c0dc, 9
  store i1 %v8_c0f8, i1* %cpsr_z.global-to-local, align 1
  %v2_c0fc = xor i1 %v8_c0f8, true
  %v3_c0fc = and i1 %v3_c0f8, %v2_c0fc
  br i1 %v3_c0fc, label %dec_label_pc_c648, label %dec_label_pc_c100

dec_label_pc_c100:                                ; preds = %dec_label_pc_c0f4, %bb129
  %v9_c100 = icmp eq i32 %v0_c108, %v1_c0d4
  store i1 %v9_c100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c100, label %dec_label_pc_c648, label %dec_label_pc_c108

dec_label_pc_c108:                                ; preds = %dec_label_pc_c0e4, %dec_label_pc_c100, %bb
  %v0_c0f046 = phi i32 [ %v0_c0f0, %dec_label_pc_c0e4 ], [ %v0_c0f047, %dec_label_pc_c100 ], [ %v0_c0f0, %bb ]
  %v0_c0d042 = phi i32 [ 0, %dec_label_pc_c0e4 ], [ %v0_c0d043, %dec_label_pc_c100 ], [ 0, %bb ]
  %v1_c108 = add i32 %v0_c108, 1
  store i32 %v1_c108, i32* %r2.global-to-local, align 4
  %v9_c10c = icmp eq i32 %v0_c0a4, %v1_c108
  store i1 %v9_c10c, i1* %cpsr_z.global-to-local, align 1
  %v1_c110 = add i32 %v0_c110, 1
  store i32 %v1_c110, i32* @r4, align 4
  br i1 %v9_c10c, label %dec_label_pc_c118, label %dec_label_pc_c0cc

dec_label_pc_c118:                                ; preds = %dec_label_pc_c108, %dec_label_pc_c0a4, %dec_label_pc_c048, %dec_label_pc_bee0
  %v0_c118 = call i32 @function_d228()
  %v1_c11c = urem i32 %v0_c118, 4
  store i32 %v1_c11c, i32* %r0.global-to-local, align 4
  %v2_c120 = icmp eq i32 %v1_c11c, 3
  store i1 %v2_c120, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_c118 to i2
  switch i2 %trunc, label %dec_label_pc_c14424 [
    i2 0, label %dec_label_pc_c680
    i2 1, label %dec_label_pc_c13c
    i2 -2, label %dec_label_pc_c670
    i2 -1, label %dec_label_pc_c694
  ]

dec_label_pc_c13c:                                ; preds = %dec_label_pc_c118
  store i32 74, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_c144

dec_label_pc_c14424:                              ; preds = %dec_label_pc_c118
  unreachable

dec_label_pc_c144:                                ; preds = %dec_label_pc_c694, %dec_label_pc_c680, %dec_label_pc_c670, %dec_label_pc_c648, %dec_label_pc_c13c
  %stack_var_-2188.0 = phi i32 [ 4, %dec_label_pc_c694 ], [ 64, %dec_label_pc_c670 ], [ 74, %dec_label_pc_c13c ], [ 8, %dec_label_pc_c680 ], [ %phitmp, %dec_label_pc_c648 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c148 = call i32 @function_10904(i32* null)
  %v0_c14c = load i32, i32* @r7, align 4
  %v2_c14c = icmp eq i32 %v0_c14c, 0
  store i1 %v2_c14c, i1* %cpsr_z.global-to-local, align 1
  %v1_c150 = load i32, i32* %fp.global-to-local, align 4
  %v2_c150 = add i32 %v1_c150, %v2_c148
  store i32 %v2_c150, i32* %r0.global-to-local, align 4
  br i1 %v2_c14c, label %dec_label_pc_c624, label %dec_label_pc_c15c

dec_label_pc_c15c:                                ; preds = %dec_label_pc_c144
  store i32 %v0_c14c, i32* %r0.global-to-local, align 4
  %v1_c160 = inttoptr i32 %v0_c14c to i8*
  %v2_c160 = call i32 @function_ff58(i8* %v1_c160)
  %v3_c160 = inttoptr i32 %v2_c160 to i8*
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c174 = call i32 @function_10bfc(i32 2, i32 3, i32 17)
  store i32 %v3_c174, i32* %r0.global-to-local, align 4
  %v7_c178 = icmp eq i32 %v3_c174, -1
  store i1 %v7_c178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c178, label %dec_label_pc_c624, label %dec_label_pc_c184

dec_label_pc_c184:                                ; preds = %dec_label_pc_c15c
  store i32 1, i32* %lr.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c190 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c190, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c1a4 = call i32 @function_10bcc(i32 %v3_c174, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_c1a4, i32* %r0.global-to-local, align 4
  %v7_c1a8 = icmp eq i32 %v6_c1a4, -1
  store i1 %v7_c1a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c1a8, label %dec_label_pc_c61c, label %dec_label_pc_c1b0

dec_label_pc_c1b0:                                ; preds = %dec_label_pc_c184
  %v3_c1b8 = mul i32 %v7_bf50, 65536
  store i32 %v3_c1b8, i32* %r8.global-to-local, align 4
  %v3_c1c4 = mul i32 %v6_bfac, 65536
  store i32 %v3_c1c4, i32* %r0.global-to-local, align 4
  %v3_c1c8 = mul i32 %v6_bfc4, 65536
  store i32 %v3_c1c8, i32* %sl.global-to-local, align 4
  %v3_c1cc = mul i32 %v6_bfe0, 65536
  store i32 %v3_c1cc, i32* %fp.global-to-local, align 4
  %v2_c1d0 = icmp eq i32 %v1_beec, 0
  store i1 %v2_c1d0, i1* %cpsr_z.global-to-local, align 1
  %v1_c1d4 = urem i32 %v6_bff8, 256
  store i32 %v1_c1d4, i32* @sb, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c1dc = urem i32 %v7_bf50, 65536
  %v3_c1e0 = urem i32 %v6_bfac, 65536
  store i32 %v3_c1e0, i32* %ip.global-to-local, align 4
  %v3_c1e4 = urem i32 %v6_bfc4, 65536
  store i32 %v3_c1e4, i32* %lr.global-to-local, align 4
  %v3_c1e8 = urem i32 %v6_bfe0, 65536
  store i32 %v3_c1e8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c1d0, label %dec_label_pc_c630.critedge, label %dec_label_pc_c204

dec_label_pc_c204:                                ; preds = %dec_label_pc_c1b0
  %v2_c20c = add i32 %v2_c160, %v1_c1d4
  %v3_c210 = mul i32 %v2_c20c, 65536
  %v1_c214 = add i32 %v3_c210, 1769472
  %v1_c218 = add i32 %v3_c210, 3080192
  %v1_c234 = urem i32 %v6_bfe0, 256
  %tmp130 = udiv i32 %v6_bfac, 256
  %v3_c238 = urem i32 %tmp130, 256
  %v1_c23c = urem i32 %v6_bfac, 256
  %v1_c230 = mul i32 %v7_bf50, 256
  %v3_c244 = and i32 %v1_c230, 65280
  store i32 %v3_c244, i32* %r1.global-to-local, align 4
  %v1_c24c = urem i32 %v6_bfc4, 256
  %tmp131 = udiv i32 %v7_bf50, 256
  %v3_c254 = udiv i32 %v1_c214, 256
  %v1_c25c = and i32 %v3_c254, 65280
  %tmp132 = udiv i32 %v6_bfc4, 256
  %v4_c26c = udiv i32 %v1_c214, 16777216
  %v5_c26c = or i32 %v1_c25c, %v4_c26c
  store i32 %v5_c26c, i32* @r6, align 4
  %v3_c274 = sdiv i32 %v1_c218, 16777216
  %sext39 = mul i32 %tmp131, 16777216
  %v7_c274 = sdiv i32 %sext39, 16777216
  %v3_c278 = mul nuw nsw i32 %v1_c234, 256
  %v4_c280 = mul nuw nsw i32 %v1_c23c, 256
  %v5_c280 = or i32 %v4_c280, %v3_c238
  store i32 %v5_c280, i32* %r0.global-to-local, align 4
  %v3_c284 = ashr i32 %v1_c218, 31
  %tmp133 = udiv i32 %v6_bfe0, 256
  %v4_c288 = urem i32 %tmp133, 256
  %v5_c288 = or i32 %v4_c288, %v3_c278
  store i32 %v5_c288, i32* @r5, align 4
  %v3_c28c = ashr i32 %sext39, 31
  store i32 1, i32* %r8.global-to-local, align 4
  %v2_c294 = add i32 %v2_c160, 1
  store i32 %v2_c294, i32* %fp.global-to-local, align 4
  store i32 %v1_c24c, i32* %r3.global-to-local, align 4
  store i32 %v1_c23c, i32* %r2.global-to-local, align 4
  %v3_c2a869 = udiv i32 %v1_c25c, 256
  store i32 %v3_c2a869, i32* %ip.global-to-local, align 4
  store i32 %v1_c234, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  %v5_c2b4 = trunc i32 %tmp130 to i8
  store i32 0, i32* %sl.global-to-local, align 4
  %sext18 = mul i32 %v1_c214, 256
  %v4_c364 = sdiv i32 %sext18, 16777216
  %sext20 = mul i32 %v6_bfc4, 16777216
  %v4_c380 = sdiv i32 %sext20, 16777216
  %sext21 = mul nuw i32 %v4_c26c, 16777216
  %v4_c384 = sdiv i32 %sext21, 16777216
  %sext23 = mul i32 %v6_bfe0, 16777216
  %v4_c3a4 = sdiv i32 %sext23, 16777216
  %v1_c328 = trunc i32 %v3_c284 to i8
  %extract.t = trunc i32 %v3_c28c to i8
  %v1_c388 = trunc i32 %tmp132 to i8
  %v1_c3b0 = trunc i32 %v6_bfac to i8
  br label %dec_label_pc_c2d4

dec_label_pc_c2d4:                                ; preds = %dec_label_pc_c434, %dec_label_pc_c204
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_c2dc = call i32 @function_10ee8(i32 600, i32 1)
  store i32 %v2_c2dc, i32* %r0.global-to-local, align 4
  store i32 %v2_bf14, i32* %r2.global-to-local, align 4
  %v3_c2e4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2e4, i32* %r3.global-to-local, align 4
  %v2_c2e8 = load i32, i32* @r4, align 4
  %v5_c2e8 = mul i32 %v2_c2e8, 4
  %v6_c2e8 = add i32 %v5_c2e8, %v2_bf14
  %v7_c2e8 = inttoptr i32 %v6_c2e8 to i32*
  store i32 %v2_c2dc, i32* %v7_c2e8, align 4
  %v0_c2ec = load i32, i32* %r2.global-to-local, align 4
  %v1_c2ec = load i32, i32* %r3.global-to-local, align 4
  %v4_c2ec = mul i32 %v1_c2ec, 4
  %v5_c2ec = add i32 %v4_c2ec, %v0_c2ec
  %v6_c2ec = inttoptr i32 %v5_c2ec to i32*
  %v7_c2ec = load i32, i32* %v6_c2ec, align 4
  store i32 %v7_c2ec, i32* %r1.global-to-local, align 4
  %v1_c2f0 = inttoptr i32 %v7_c2ec to i8*
  %v2_c2f0 = load i8, i8* %v1_c2f0, align 1
  %tmp = urem i8 %v2_c2f0, 16
  %v1_c2f4 = zext i8 %tmp to i32
  %v1_c2f8 = or i32 %v1_c2f4, 64
  store i32 %v1_c2f8, i32* %r2.global-to-local, align 4
  %v1_c2fc = trunc i32 %v1_c2f8 to i8
  store i8 %v1_c2fc, i8* %v1_c2f0, align 1
  %v0_c300 = load i32, i32* %r1.global-to-local, align 4
  %v1_c300 = inttoptr i32 %v0_c300 to i8*
  %v2_c300 = load i8, i8* %v1_c300, align 1
  %v1_c304 = and i8 %v2_c300, -16
  %v1_c308 = or i8 %v1_c304, 5
  store i32 %v1_bf94, i32* %ip.global-to-local, align 4
  store i8 %v1_c308, i8* %v1_c300, align 1
  %v2_c318 = load i32, i32* %r1.global-to-local, align 4
  %v3_c318 = add i32 %v2_c318, 1
  %v4_c318 = inttoptr i32 %v3_c318 to i8*
  store i8 %v5_bf4c, i8* %v4_c318, align 1
  store i32 %v3_c284, i32* %r3.global-to-local, align 4
  store i32 %v3_c274, i32* %r2.global-to-local, align 4
  %v0_c324 = load i32, i32* %ip.global-to-local, align 4
  %v2_c324 = icmp eq i32 %v0_c324, 0
  store i1 %v2_c324, i1* %cpsr_z.global-to-local, align 1
  %v2_c328 = load i32, i32* %r1.global-to-local, align 4
  %v3_c328 = add i32 %v2_c328, 3
  %v4_c328 = inttoptr i32 %v3_c328 to i8*
  store i8 %v1_c328, i8* %v4_c328, align 1
  %v0_c32c = load i32, i32* %r2.global-to-local, align 4
  %v1_c32c = trunc i32 %v0_c32c to i8
  %v2_c32c = load i32, i32* %r1.global-to-local, align 4
  %v3_c32c = add i32 %v2_c32c, 2
  %v4_c32c = inttoptr i32 %v3_c32c to i8*
  store i8 %v1_c32c, i8* %v4_c32c, align 1
  store i32 %v3_c28c, i32* %lr.global-to-local, align 4
  store i32 %v5_bf88, i32* %r2.global-to-local, align 4
  %v0_c338 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c338, label %.thread25, label %bb134

bb134:                                            ; preds = %dec_label_pc_c2d4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c33c = load i32, i32* %r1.global-to-local, align 4
  %v4_c33c = add i32 %v3_c33c, 6
  %v5_c33c = inttoptr i32 %v4_c33c to i8*
  store i8 64, i8* %v5_c33c, align 1
  %v0_c344.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t70 = trunc i32 %v0_c344.pre to i8
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_c2d4, %bb134
  %v0_c344.off0 = phi i8 [ %extract.t, %dec_label_pc_c2d4 ], [ %extract.t70, %bb134 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_c344 = load i32, i32* %r1.global-to-local, align 4
  %v3_c344 = add i32 %v2_c344, 5
  %v4_c344 = inttoptr i32 %v3_c344 to i8*
  store i8 %v0_c344.off0, i8* %v4_c344, align 1
  store i32 %v7_c274, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b230.48 to i32), i32* %lr.global-to-local, align 4
  %v0_c350 = load i32, i32* %r2.global-to-local, align 4
  %v1_c350 = trunc i32 %v0_c350 to i8
  %v2_c350 = load i32, i32* %r1.global-to-local, align 4
  %v3_c350 = add i32 %v2_c350, 8
  %v4_c350 = inttoptr i32 %v3_c350 to i8*
  store i8 %v1_c350, i8* %v4_c350, align 1
  %v0_c354 = load i32, i32* %r3.global-to-local, align 4
  %v1_c354 = trunc i32 %v0_c354 to i8
  %v2_c354 = load i32, i32* %r1.global-to-local, align 4
  %v3_c354 = add i32 %v2_c354, 9
  %v4_c354 = inttoptr i32 %v3_c354 to i8*
  store i8 %v1_c354, i8* %v4_c354, align 1
  %v0_c358 = load i32, i32* %r1.global-to-local, align 4
  %v1_c358 = add i32 %v0_c358, 41
  %v2_c35c = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_c35c, i32* %r3.global-to-local, align 4
  %v0_c360 = load i32, i32* @sb, align 4
  %v2_c360 = add i32 %v1_c358, %v0_c360
  store i32 %v2_c360, i32* %r4.global-to-local, align 4
  store i32 %v4_c364, i32* %r2.global-to-local, align 4
  %v1_c368 = add i32 %v0_c358, 20
  store i32 %v1_c368, i32* %r0.global-to-local, align 4
  %v0_c36c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c36c, label %bb136, label %bb135

bb135:                                            ; preds = %.thread25
  %v1_c36c = load i32, i32* %sl.global-to-local, align 4
  %v2_c36c = trunc i32 %v1_c36c to i8
  %v4_c36c = add i32 %v0_c358, 7
  %v5_c36c = inttoptr i32 %v4_c36c to i8*
  store i8 %v2_c36c, i8* %v5_c36c, align 1
  %v2_c370.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb136

bb136:                                            ; preds = %.thread25, %bb135
  %v2_c370 = phi i32 [ %v0_c358, %.thread25 ], [ %v2_c370.pre, %bb135 ]
  %v0_c370 = load i32, i32* %ip.global-to-local, align 4
  %v1_c370 = trunc i32 %v0_c370 to i8
  %v3_c370 = add i32 %v2_c370, 4
  %v4_c370 = inttoptr i32 %v3_c370 to i8*
  store i8 %v1_c370, i8* %v4_c370, align 1
  %v0_c374 = load i32, i32* %r3.global-to-local, align 4
  %v1_c374 = load i32, i32* %r1.global-to-local, align 4
  %v2_c374 = add i32 %v1_c374, 12
  %v3_c374 = inttoptr i32 %v2_c374 to i32*
  store i32 %v0_c374, i32* %v3_c374, align 4
  %v0_c378 = load i32, i32* %r2.global-to-local, align 4
  %v1_c378 = trunc i32 %v0_c378 to i8
  %v2_c378 = load i32, i32* %r0.global-to-local, align 4
  %v3_c378 = add i32 %v2_c378, 5
  %v4_c378 = inttoptr i32 %v3_c378 to i8*
  store i8 %v1_c378, i8* %v4_c378, align 1
  store i32 %v4_c380, i32* %lr.global-to-local, align 4
  store i32 %v4_c384, i32* %r2.global-to-local, align 4
  %v2_c388 = load i32, i32* %r0.global-to-local, align 4
  %v3_c388 = add i32 %v2_c388, 2
  %v4_c388 = inttoptr i32 %v3_c388 to i8*
  store i8 %v1_c388, i8* %v4_c388, align 1
  %v0_c38c = load i32, i32* %lr.global-to-local, align 4
  %v1_c38c = trunc i32 %v0_c38c to i8
  %v2_c38c = load i32, i32* %r0.global-to-local, align 4
  %v3_c38c = add i32 %v2_c38c, 3
  %v4_c38c = inttoptr i32 %v3_c38c to i8*
  store i8 %v1_c38c, i8* %v4_c38c, align 1
  %v0_c390 = load i32, i32* %r2.global-to-local, align 4
  %v1_c390 = trunc i32 %v0_c390 to i8
  %v2_c390 = load i32, i32* %r0.global-to-local, align 4
  %v3_c390 = add i32 %v2_c390, 4
  %v4_c390 = inttoptr i32 %v3_c390 to i8*
  store i8 %v1_c390, i8* %v4_c390, align 1
  store i32 %stack_var_-2188.0, i32* %lr.global-to-local, align 4
  %v2_c39c = load i32, i32* %r1.global-to-local, align 4
  %v3_c39c = add i32 %v2_c39c, 20
  %v4_c39c = inttoptr i32 %v3_c39c to i8*
  store i8 %v5_c2b4, i8* %v4_c39c, align 1
  store i32 %v4_c3a4, i32* %r3.global-to-local, align 4
  %v0_c3a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c3a8 = add i32 %v0_c3a8, 28
  store i32 %v1_c3a8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v2_c3b0 = load i32, i32* %r0.global-to-local, align 4
  %v3_c3b0 = add i32 %v2_c3b0, 1
  %v4_c3b0 = inttoptr i32 %v3_c3b0 to i8*
  store i8 %v1_c3b0, i8* %v4_c3b0, align 1
  %v0_c3b4 = load i32, i32* %lr.global-to-local, align 4
  %v1_c3b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_c3b4 = add i32 %v1_c3b4, 16
  %v3_c3b4 = inttoptr i32 %v2_c3b4 to i32*
  store i32 %v0_c3b4, i32* %v3_c3b4, align 4
  %v0_c3b8 = load i32, i32* %r8.global-to-local, align 4
  %v1_c3b8 = trunc i32 %v0_c3b8 to i8
  %v2_c3b8 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3b8 = add i32 %v2_c3b8, 5
  %v4_c3b8 = inttoptr i32 %v3_c3b8 to i8*
  store i8 %v1_c3b8, i8* %v4_c3b8, align 1
  %v0_c3bc = load i32, i32* @r5, align 4
  %v1_c3bc = trunc i32 %v0_c3bc to i8
  %v2_c3bc = load i32, i32* %r1.global-to-local, align 4
  %v3_c3bc = add i32 %v2_c3bc, 28
  %v4_c3bc = inttoptr i32 %v3_c3bc to i8*
  store i8 %v1_c3bc, i8* %v4_c3bc, align 1
  %v0_c3c0 = load i32, i32* %r8.global-to-local, align 4
  %v1_c3c0 = trunc i32 %v0_c3c0 to i8
  %v2_c3c0 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3c0 = add i32 %v2_c3c0, 2
  %v4_c3c0 = inttoptr i32 %v3_c3c0 to i8*
  store i8 %v1_c3c0, i8* %v4_c3c0, align 1
  %v0_c3c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3c4 = trunc i32 %v0_c3c4 to i8
  %v2_c3c4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3c4 = add i32 %v2_c3c4, 1
  %v4_c3c4 = inttoptr i32 %v3_c3c4 to i8*
  store i8 %v1_c3c4, i8* %v4_c3c4, align 1
  %v0_c3c8 = load i32, i32* @r6, align 4
  %v1_c3c8 = trunc i32 %v0_c3c8 to i8
  %v2_c3c8 = load i32, i32* %ip.global-to-local, align 4
  %v3_c3c8 = add i32 %v2_c3c8, 3
  %v4_c3c8 = inttoptr i32 %v3_c3c8 to i8*
  store i8 %v1_c3c8, i8* %v4_c3c8, align 1
  %v0_c3cc = load i32, i32* @r6, align 4
  %v1_c3cc = trunc i32 %v0_c3cc to i8
  %v2_c3cc = load i32, i32* %ip.global-to-local, align 4
  %v3_c3cc = add i32 %v2_c3cc, 4
  %v4_c3cc = inttoptr i32 %v3_c3cc to i8*
  store i8 %v1_c3cc, i8* %v4_c3cc, align 1
  %v0_c3d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_c3d0 = add i32 %v0_c3d0, 1
  store i32 %v1_c3d0, i32* %r0.global-to-local, align 4
  %v0_c3d4 = load i32, i32* @sb, align 4
  %v1_c3d4 = trunc i32 %v0_c3d4 to i8
  %v2_c3d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3d4 = add i32 %v2_c3d4, 40
  %v4_c3d4 = inttoptr i32 %v3_c3d4 to i8*
  store i8 %v1_c3d4, i8* %v4_c3d4, align 1
  %v0_c3d8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c3d8, i32* %r2.global-to-local, align 4
  %v0_c3dc = load i32, i32* @r7, align 4
  store i32 %v0_c3dc, i32* %r1.global-to-local, align 4
  %v3_c3e0 = call i32 @function_ffd4(i32 %v1_c3d0, i32 %v0_c3dc, i32 %v0_c3d8)
  store i32 %v3_c3e0, i32* %r0.global-to-local, align 4
  %v1_c3e8 = load i32, i32* @r6, align 4
  %v10_c3e8 = inttoptr i32 %v1_c3e8 to i8*
  %v15_c3e8 = icmp eq i32 %v2_c160, %v1_c3e8
  store i1 %v15_c3e8, i1* %cpsr_z.global-to-local, align 1
  %v9_c3ec = icmp sgt i8* %v3_c160, %v10_c3e8
  store i32 %v1_c3e8, i32* %lr.global-to-local, align 4
  %v0_c3fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_c3fc, i32* %ip.global-to-local, align 4
  %extract.t72 = trunc i32 %v1_c3e8 to i8
  br i1 %v9_c3ec, label %dec_label_pc_c3f8, label %dec_label_pc_c434

dec_label_pc_c3f8:                                ; preds = %bb136
  store i32 %v1_c3e8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c404

dec_label_pc_c404:                                ; preds = %.thread37, %dec_label_pc_c3f8
  %v1_c40c = phi i32 [ %v1_c40c58, %.thread37 ], [ %v1_c3e8, %dec_label_pc_c3f8 ]
  %v0_c404 = phi i32 [ %v1_c420, %.thread37 ], [ %v1_c3e8, %dec_label_pc_c3f8 ]
  %v1_c404 = load i32, i32* @r7, align 4
  %v2_c404 = add i32 %v1_c404, %v0_c404
  %v3_c404 = inttoptr i32 %v2_c404 to i8*
  %v4_c404 = load i8, i8* %v3_c404, align 1
  %v6_c404 = zext i8 %v4_c404 to i32
  store i32 %v6_c404, i32* %r3.global-to-local, align 4
  %v7_c408 = icmp eq i8 %v4_c404, 46
  store i1 %v7_c408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c408, label %bb137, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_c404
  %v1_c41035 = add i32 %v1_c40c, 1
  store i32 %v1_c41035, i32* %r2.global-to-local, align 4
  br label %bb138

bb137:                                            ; preds = %dec_label_pc_c404
  %v2_c40c = trunc i32 %v1_c40c to i8
  %v3_c40c = load i32, i32* %ip.global-to-local, align 4
  %v4_c40c = inttoptr i32 %v3_c40c to i8*
  store i8 %v2_c40c, i8* %v4_c40c, align 1
  %v0_c414.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_c410 = load i32, i32* %lr.global-to-local, align 4
  %v1_c410 = add i32 %v0_c410, 1
  store i32 %v1_c410, i32* %r2.global-to-local, align 4
  br i1 %v0_c414.pr, label %bb139, label %bb138

bb138:                                            ; preds = %.thread33, %bb137
  %v1_c41036 = phi i32 [ %v1_c41035, %.thread33 ], [ %v1_c410, %bb137 ]
  %v2_c414 = urem i32 %v1_c41036, 256
  store i32 %v2_c414, i32* %lr.global-to-local, align 4
  br label %bb139

bb139:                                            ; preds = %bb137, %bb138
  %v1_c40c59 = phi i32 [ %v0_c410, %bb137 ], [ %v2_c414, %bb138 ]
  %v0_c428.pr = phi i1 [ true, %bb137 ], [ false, %bb138 ]
  store i32 %v2_c160, i32* %r2.global-to-local, align 4
  %v0_c41c = load i32, i32* %r4.global-to-local, align 4
  %v1_c41c = load i32, i32* %r1.global-to-local, align 4
  %v2_c41c = add i32 %v1_c41c, %v0_c41c
  store i32 %v2_c41c, i32* %r0.global-to-local, align 4
  %v1_c420 = add i32 %v1_c41c, 1
  store i32 %v1_c420, i32* %r1.global-to-local, align 4
  br i1 %v0_c428.pr, label %bb140, label %.thread37

bb140:                                            ; preds = %bb139
  %v2_c424 = add i32 %v2_c41c, 1
  store i32 %v2_c424, i32* %ip.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread37

.thread37:                                        ; preds = %bb139, %bb140
  %v1_c40c58 = phi i32 [ %v1_c40c59, %bb139 ], [ 0, %bb140 ]
  %v9_c42c = icmp eq i32 %v2_c160, %v1_c420
  store i1 %v9_c42c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c42c, label %dec_label_pc_c434.loopexit, label %dec_label_pc_c404

dec_label_pc_c434.loopexit:                       ; preds = %.thread37
  %v2_c434.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_c40c58 to i8
  br label %dec_label_pc_c434

dec_label_pc_c434:                                ; preds = %dec_label_pc_c434.loopexit, %bb136
  %v2_c434 = phi i32 [ %v2_c434.pre, %dec_label_pc_c434.loopexit ], [ %v0_c3fc, %bb136 ]
  %v0_c434.off0 = phi i8 [ %extract.t71, %dec_label_pc_c434.loopexit ], [ %extract.t72, %bb136 ]
  %v3_c434 = inttoptr i32 %v2_c434 to i8*
  store i8 %v0_c434.off0, i8* %v3_c434, align 1
  %v3_c438 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_c160, i32* %ip.global-to-local, align 4
  store i32 %v1_beec, i32* @lr, align 4
  %v0_c444 = load i32, i32* %r4.global-to-local, align 4
  %v2_c444 = add i32 %v0_c444, %v2_c160
  store i32 %v2_c444, i32* %r3.global-to-local, align 4
  %v1_c448 = add i32 %v3_c438, 1
  store i32 %v1_c448, i32* @r4, align 4
  %v9_c44c = icmp eq i32 %v1_beec, %v1_c448
  store i1 %v9_c44c, i1* %cpsr_z.global-to-local, align 1
  %v1_c450 = add i32 %v2_c444, 2
  store i32 %v1_c450, i32* %r2.global-to-local, align 4
  %v0_c454 = load i32, i32* %sl.global-to-local, align 4
  %v1_c454 = trunc i32 %v0_c454 to i8
  %v4_c454 = inttoptr i32 %v1_c450 to i8*
  store i8 %v1_c454, i8* %v4_c454, align 1
  %v0_c458 = load i32, i32* %r8.global-to-local, align 4
  %v1_c458 = trunc i32 %v0_c458 to i8
  %v2_c458 = load i32, i32* %r2.global-to-local, align 4
  %v3_c458 = add i32 %v2_c458, 3
  %v4_c458 = inttoptr i32 %v3_c458 to i8*
  store i8 %v1_c458, i8* %v4_c458, align 1
  %v0_c45c = load i32, i32* %r8.global-to-local, align 4
  %v1_c45c = trunc i32 %v0_c45c to i8
  %v2_c45c = load i32, i32* %r2.global-to-local, align 4
  %v3_c45c = add i32 %v2_c45c, 1
  %v4_c45c = inttoptr i32 %v3_c45c to i8*
  store i8 %v1_c45c, i8* %v4_c45c, align 1
  %v0_c460 = load i32, i32* %sl.global-to-local, align 4
  %v1_c460 = trunc i32 %v0_c460 to i8
  %v2_c460 = load i32, i32* %r2.global-to-local, align 4
  %v3_c460 = add i32 %v2_c460, 2
  %v4_c460 = inttoptr i32 %v3_c460 to i8*
  store i8 %v1_c460, i8* %v4_c460, align 1
  %v0_c464 = load i32, i32* @r4, align 4
  store i32 %v0_c464, i32* %stack_var_-40, align 4
  %v8_c468 = icmp sgt i32 %v1_beec, %v1_c448
  br i1 %v8_c468, label %dec_label_pc_c2d4, label %dec_label_pc_c46c

dec_label_pc_c46c:                                ; preds = %dec_label_pc_c434, %dec_label_pc_c630
  store i32 %v1_beec, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_c1d0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c1d0, label %dec_label_pc_c630, label %dec_label_pc_c480

dec_label_pc_c480:                                ; preds = %dec_label_pc_c46c
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_c48c = load i32, i32* @sb, align 4
  %v2_c48c = add i32 %v0_c48c, %v2_c160
  store i32 %v2_c48c, i32* %r3.global-to-local, align 4
  %v1_c490 = add i32 %v2_c48c, 47
  store i32 %v1_c490, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r8, align 4
  %v1_c498 = add i32 %v2_c48c, 27
  store i32 %v1_c498, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c594

dec_label_pc_c4a8:                                ; preds = %dec_label_pc_c594
  store i32 %v3_c1e0, i32* %r3.global-to-local, align 4
  %v9_c4ac = icmp eq i32 %v3_c1e0, %v1_c4ac
  store i1 %v9_c4ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4ac, label %dec_label_pc_c5d0, label %dec_label_pc_c4b4

dec_label_pc_c4b4:                                ; preds = %dec_label_pc_c5b4.dec_label_pc_c4b4_crit_edge, %dec_label_pc_c4a8
  %v1_c4b8 = phi i32 [ %v1_c4b8.pre, %dec_label_pc_c5b4.dec_label_pc_c4b4_crit_edge ], [ %v1_c4ac, %dec_label_pc_c4a8 ]
  store i32 %v3_c1e4, i32* %ip.global-to-local, align 4
  %v9_c4b8 = icmp eq i32 %v3_c1e4, %v1_c4b8
  store i1 %v9_c4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4b8, label %dec_label_pc_c5ec, label %dec_label_pc_c4c0

dec_label_pc_c4c0:                                ; preds = %dec_label_pc_c5d0.dec_label_pc_c4c0_crit_edge, %dec_label_pc_c4b4
  %v1_c4c4 = phi i32 [ %v1_c4c4.pre, %dec_label_pc_c5d0.dec_label_pc_c4c0_crit_edge ], [ %v1_c4b8, %dec_label_pc_c4b4 ]
  store i32 %v3_c1e8, i32* %lr.global-to-local, align 4
  %v9_c4c4 = icmp eq i32 %v3_c1e8, %v1_c4c4
  store i1 %v9_c4c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c4c4, label %dec_label_pc_c608, label %dec_label_pc_c4cc

dec_label_pc_c4cc:                                ; preds = %dec_label_pc_c5ec, %dec_label_pc_c4c0, %dec_label_pc_c608
  %v0_c4cc = load i32, i32* @r6, align 4
  store i32 %v0_c4cc, i32* %r0.global-to-local, align 4
  %v0_c4d0 = load i32, i32* @sb, align 4
  store i32 %v0_c4d0, i32* %r1.global-to-local, align 4
  %v2_c4d4 = call i32 @function_d2dc(i32 %v0_c4cc, i32 %v0_c4d0)
  %v0_c4d8 = load i32, i32* @r7, align 4
  %v1_c4d8 = trunc i32 %v0_c4d8 to i8
  %v2_c4d8 = load i32, i32* @r6, align 4
  %v3_c4d8 = load i32, i32* @sb, align 4
  %v4_c4d8 = add i32 %v3_c4d8, %v2_c4d8
  %v5_c4d8 = inttoptr i32 %v4_c4d8 to i8*
  store i8 %v1_c4d8, i8* %v5_c4d8, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c4e0 = load i32, i32* @r7, align 4
  %v1_c4e0 = trunc i32 %v0_c4e0 to i8
  %v2_c4e0 = load i32, i32* @r4, align 4
  %v3_c4e0 = add i32 %v2_c4e0, 10
  %v4_c4e0 = inttoptr i32 %v3_c4e0 to i8*
  store i8 %v1_c4e0, i8* %v4_c4e0, align 1
  %v0_c4e4 = load i32, i32* @r7, align 4
  %v1_c4e4 = trunc i32 %v0_c4e4 to i8
  %v2_c4e4 = load i32, i32* @r4, align 4
  %v3_c4e4 = add i32 %v2_c4e4, 11
  %v4_c4e4 = inttoptr i32 %v3_c4e4 to i8*
  store i8 %v1_c4e4, i8* %v4_c4e4, align 1
  %v0_c4e8 = load i32, i32* @r4, align 4
  store i32 %v0_c4e8, i32* @r0, align 4
  %v2_c4ec = call i32 @function_c6b0(i32 %v0_c4e8, i32 20)
  %v3_c4ec = trunc i32 %v2_c4ec to i8
  store i32 %v2_c4ec, i32* %r0.global-to-local, align 4
  %v4_c4f0 = sdiv i32 %v2_c4ec, 256
  store i32 %v4_c4f0, i32* %r3.global-to-local, align 4
  %v1_c4f4 = trunc i32 %v4_c4f0 to i8
  %v2_c4f4 = load i32, i32* @r4, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 11
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i8*
  store i8 %v1_c4f4, i8* %v4_c4f4, align 1
  %v3_c4f8 = load i32, i32* @r4, align 4
  %v4_c4f8 = add i32 %v3_c4f8, 10
  %v5_c4f8 = inttoptr i32 %v4_c4f8 to i8*
  store i8 %v3_c4ec, i8* %v5_c4f8, align 1
  %v0_c4fc = load i32, i32* @r7, align 4
  %v1_c4fc = trunc i32 %v0_c4fc to i8
  %v2_c4fc = load i32, i32* @r5, align 4
  %v3_c4fc = add i32 %v2_c4fc, 6
  %v4_c4fc = inttoptr i32 %v3_c4fc to i8*
  store i8 %v1_c4fc, i8* %v4_c4fc, align 1
  %v0_c500 = load i32, i32* @r7, align 4
  %v1_c500 = trunc i32 %v0_c500 to i8
  %v2_c500 = load i32, i32* @r5, align 4
  %v3_c500 = add i32 %v2_c500, 7
  %v4_c500 = inttoptr i32 %v3_c500 to i8*
  store i8 %v1_c500, i8* %v4_c500, align 1
  %v0_c504 = load i32, i32* @r4, align 4
  %v1_c504 = add i32 %v0_c504, 24
  %v2_c504 = inttoptr i32 %v1_c504 to i8*
  %v3_c504 = load i8, i8* %v2_c504, align 1
  %v4_c504 = zext i8 %v3_c504 to i32
  store i32 %v4_c504, i32* %r3.global-to-local, align 4
  %v1_c508 = add i32 %v0_c504, 25
  %v2_c508 = inttoptr i32 %v1_c508 to i8*
  %v3_c508 = load i8, i8* %v2_c508, align 1
  %v4_c508 = zext i8 %v3_c508 to i32
  %v0_c50c = load i32, i32* @r5, align 4
  store i32 %v0_c50c, i32* @r1, align 4
  %v4_c510 = mul nuw nsw i32 %v4_c508, 256
  %v5_c510 = or i32 %v4_c510, %v4_c504
  store i32 %v5_c510, i32* %r2.global-to-local, align 4
  store i32 %v0_c504, i32* %r0.global-to-local, align 4
  %v0_c518 = load i32, i32* @fp, align 4
  store i32 %v0_c518, i32* %r3.global-to-local, align 4
  %v4_c51c = call i32 @function_c70c(i32 %v0_c504, i32 %v0_c50c, i32 %v5_c510, i32 %v0_c518)
  %v5_c51c = trunc i32 %v4_c51c to i8
  store i32 %v4_c51c, i32* %r0.global-to-local, align 4
  %v3_c520 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v5_c52c = mul i32 %v3_c520, 24
  store i32 %v5_c52c, i32* %lr.global-to-local, align 4
  %v4_c53077 = udiv i32 %v4_c51c, 256
  %v1_c534 = trunc i32 %v4_c53077 to i8
  %v2_c534 = load i32, i32* @r5, align 4
  %v3_c534 = add i32 %v2_c534, 7
  %v4_c534 = inttoptr i32 %v3_c534 to i8*
  store i8 %v1_c534, i8* %v4_c534, align 1
  store i32 %stack_var_-2188.0, i32* %r3.global-to-local, align 4
  %v0_c53c = load i32, i32* %lr.global-to-local, align 4
  %v1_c53c = load i32, i32* %r2.global-to-local, align 4
  %v2_c53c = add i32 %v1_c53c, %v0_c53c
  store i32 %v2_c53c, i32* %lr.global-to-local, align 4
  %v3_c540 = load i32, i32* @r5, align 4
  %v4_c540 = add i32 %v3_c540, 6
  %v5_c540 = inttoptr i32 %v4_c540 to i8*
  store i8 %v5_c51c, i8* %v5_c540, align 1
  %v0_c544 = load i32, i32* %r3.global-to-local, align 4
  %v1_c544 = load i32, i32* %lr.global-to-local, align 4
  %v2_c544 = add i32 %v1_c544, 4
  %v3_c544 = inttoptr i32 %v2_c544 to i32*
  store i32 %v0_c544, i32* %v3_c544, align 4
  %v0_c548 = load i32, i32* @r4, align 4
  %v1_c548 = add i32 %v0_c548, 20
  %v2_c548 = inttoptr i32 %v1_c548 to i32*
  %v3_c548 = load i32, i32* %v2_c548, align 4
  %v3_c54c = udiv i32 %v3_c548, 65536
  store i32 %v3_c54c, i32* %r3.global-to-local, align 4
  %v3_c55016 = udiv i32 %v3_c548, 16777216
  %v1_c554 = trunc i32 %v3_c55016 to i8
  %v2_c554 = load i32, i32* %lr.global-to-local, align 4
  %v3_c554 = add i32 %v2_c554, 3
  %v4_c554 = inttoptr i32 %v3_c554 to i8*
  store i8 %v1_c554, i8* %v4_c554, align 1
  %v0_c558 = load i32, i32* %r3.global-to-local, align 4
  %v1_c558 = trunc i32 %v0_c558 to i8
  %v2_c558 = load i32, i32* %lr.global-to-local, align 4
  %v3_c558 = add i32 %v2_c558, 2
  %v4_c558 = inttoptr i32 %v3_c558 to i8*
  store i8 %v1_c558, i8* %v4_c558, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c564 = load i32, i32* @r4, align 4
  store i32 %v0_c564, i32* %r1.global-to-local, align 4
  store i32 %v3_c174, i32* %r0.global-to-local, align 4
  store i32 %v1_c490, i32* %r2.global-to-local, align 4
  %v0_c570 = load i32, i32* %lr.global-to-local, align 4
  %v6_c578 = inttoptr i32 %v0_c564 to i32*
  %v7_c578 = call i32 @function_10b98(i32 %v3_c174, i32* %v6_c578, i32 %v1_c490, i32 16384, i32 %v0_c570, i32 16)
  %v3_c57c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c57c, i32* %r3.global-to-local, align 4
  %v1_c584 = add i32 %v3_c57c, 1
  store i32 %v1_c584, i32* %r0.global-to-local, align 4
  %v9_c588 = icmp eq i32 %v1_beec, %v1_c584
  store i1 %v9_c588, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c584, i32* %stack_var_-40, align 4
  %v7_c590 = icmp sgt i32 %v1_beec, %v1_c584
  br i1 %v7_c590, label %dec_label_pc_c4cc.dec_label_pc_c594_crit_edge, label %dec_label_pc_c630

dec_label_pc_c4cc.dec_label_pc_c594_crit_edge:    ; preds = %dec_label_pc_c4cc
  %v1_c5a0.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c594

dec_label_pc_c594:                                ; preds = %dec_label_pc_c4cc.dec_label_pc_c594_crit_edge, %dec_label_pc_c480
  %v1_c4ac = phi i32 [ %v1_c5a0.pre, %dec_label_pc_c4cc.dec_label_pc_c594_crit_edge ], [ 65535, %dec_label_pc_c480 ]
  %v1_c59c = phi i32 [ %v1_c584, %dec_label_pc_c4cc.dec_label_pc_c594_crit_edge ], [ 0, %dec_label_pc_c480 ]
  store i32 %v2_bf14, i32* %lr.global-to-local, align 4
  store i32 %v3_c1dc, i32* %r2.global-to-local, align 4
  %v4_c59c = mul i32 %v1_c59c, 4
  %v5_c59c = add i32 %v4_c59c, %v2_bf14
  %v6_c59c = inttoptr i32 %v5_c59c to i32*
  %v7_c59c = load i32, i32* %v6_c59c, align 4
  store i32 %v7_c59c, i32* @r4, align 4
  %v9_c5a0 = icmp eq i32 %v3_c1dc, %v1_c4ac
  store i1 %v9_c5a0, i1* %cpsr_z.global-to-local, align 1
  %v1_c5a4 = add i32 %v7_c59c, 20
  store i32 %v1_c5a4, i32* @r5, align 4
  %v1_c5a8 = add i32 %v7_c59c, 41
  store i32 %v1_c5a8, i32* @r6, align 4
  %v1_c5ac = add i32 %v7_c59c, 28
  store i32 %v1_c5ac, i32* @sl, align 4
  br i1 %v9_c5a0, label %dec_label_pc_c5b4, label %dec_label_pc_c4a8

dec_label_pc_c5b4:                                ; preds = %dec_label_pc_c594
  %v0_c5b4 = call i32 @function_d228()
  %v1_c5b4 = trunc i32 %v0_c5b4 to i8
  store i32 %v0_c5b4, i32* %r0.global-to-local, align 4
  %v4_c5b878 = udiv i32 %v0_c5b4, 256
  %v1_c5bc = trunc i32 %v4_c5b878 to i8
  %v2_c5bc = load i32, i32* @r4, align 4
  %v3_c5bc = add i32 %v2_c5bc, 5
  %v4_c5bc = inttoptr i32 %v3_c5bc to i8*
  store i8 %v1_c5bc, i8* %v4_c5bc, align 1
  store i32 %v3_c1e0, i32* %r3.global-to-local, align 4
  %v1_c5c4 = load i32, i32* @r8, align 4
  %v9_c5c4 = icmp eq i32 %v3_c1e0, %v1_c5c4
  store i1 %v9_c5c4, i1* %cpsr_z.global-to-local, align 1
  %v3_c5c8 = load i32, i32* @r4, align 4
  %v4_c5c8 = add i32 %v3_c5c8, 4
  %v5_c5c8 = inttoptr i32 %v4_c5c8 to i8*
  store i8 %v1_c5b4, i8* %v5_c5c8, align 1
  %v0_c5cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5cc, label %dec_label_pc_c5d0, label %dec_label_pc_c5b4.dec_label_pc_c4b4_crit_edge

dec_label_pc_c5b4.dec_label_pc_c4b4_crit_edge:    ; preds = %dec_label_pc_c5b4
  %v1_c4b8.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c4b4

dec_label_pc_c5d0:                                ; preds = %dec_label_pc_c5b4, %dec_label_pc_c4a8
  %v0_c5d0 = call i32 @function_d228()
  %v1_c5d0 = trunc i32 %v0_c5d0 to i8
  store i32 %v0_c5d0, i32* %r0.global-to-local, align 4
  store i32 %v3_c1e4, i32* %ip.global-to-local, align 4
  %v4_c5d8 = sdiv i32 %v0_c5d0, 256
  store i32 %v4_c5d8, i32* %r3.global-to-local, align 4
  %v1_c5dc = load i32, i32* @r8, align 4
  %v9_c5dc = icmp eq i32 %v3_c1e4, %v1_c5dc
  store i1 %v9_c5dc, i1* %cpsr_z.global-to-local, align 1
  %v3_c5e0 = load i32, i32* @r4, align 4
  %v4_c5e0 = add i32 %v3_c5e0, 20
  %v5_c5e0 = inttoptr i32 %v4_c5e0 to i8*
  store i8 %v1_c5d0, i8* %v5_c5e0, align 1
  %v0_c5e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5e4 = trunc i32 %v0_c5e4 to i8
  %v2_c5e4 = load i32, i32* @r5, align 4
  %v3_c5e4 = add i32 %v2_c5e4, 1
  %v4_c5e4 = inttoptr i32 %v3_c5e4 to i8*
  store i8 %v1_c5e4, i8* %v4_c5e4, align 1
  %v0_c5e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5e8, label %dec_label_pc_c5ec, label %dec_label_pc_c5d0.dec_label_pc_c4c0_crit_edge

dec_label_pc_c5d0.dec_label_pc_c4c0_crit_edge:    ; preds = %dec_label_pc_c5d0
  %v1_c4c4.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_c4c0

dec_label_pc_c5ec:                                ; preds = %dec_label_pc_c5d0, %dec_label_pc_c4b4
  %v0_c5ec = call i32 @function_d228()
  %v1_c5ec = trunc i32 %v0_c5ec to i8
  store i32 %v0_c5ec, i32* %r0.global-to-local, align 4
  store i32 %v3_c1e8, i32* %lr.global-to-local, align 4
  %v4_c5f4 = sdiv i32 %v0_c5ec, 256
  store i32 %v4_c5f4, i32* %r3.global-to-local, align 4
  %v1_c5f8 = load i32, i32* @r8, align 4
  %v9_c5f8 = icmp eq i32 %v3_c1e8, %v1_c5f8
  store i1 %v9_c5f8, i1* %cpsr_z.global-to-local, align 1
  %v1_c5fc = trunc i32 %v4_c5f4 to i8
  %v2_c5fc = load i32, i32* @r5, align 4
  %v3_c5fc = add i32 %v2_c5fc, 3
  %v4_c5fc = inttoptr i32 %v3_c5fc to i8*
  store i8 %v1_c5fc, i8* %v4_c5fc, align 1
  %v3_c600 = load i32, i32* @r5, align 4
  %v4_c600 = add i32 %v3_c600, 2
  %v5_c600 = inttoptr i32 %v4_c600 to i8*
  store i8 %v1_c5ec, i8* %v5_c600, align 1
  %v0_c604 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c604, label %dec_label_pc_c608, label %dec_label_pc_c4cc

dec_label_pc_c608:                                ; preds = %dec_label_pc_c5ec, %dec_label_pc_c4c0
  %v0_c608 = call i32 @function_d228()
  %v1_c608 = trunc i32 %v0_c608 to i8
  store i32 %v0_c608, i32* %r0.global-to-local, align 4
  %v4_c60c = sdiv i32 %v0_c608, 256
  store i32 %v4_c60c, i32* %r3.global-to-local, align 4
  %v3_c610 = load i32, i32* @r4, align 4
  %v4_c610 = add i32 %v3_c610, 28
  %v5_c610 = inttoptr i32 %v4_c610 to i8*
  store i8 %v1_c608, i8* %v5_c610, align 1
  %v0_c614 = load i32, i32* %r3.global-to-local, align 4
  %v1_c614 = trunc i32 %v0_c614 to i8
  %v2_c614 = load i32, i32* @sl, align 4
  %v3_c614 = add i32 %v2_c614, 1
  %v4_c614 = inttoptr i32 %v3_c614 to i8*
  store i8 %v1_c614, i8* %v4_c614, align 1
  br label %dec_label_pc_c4cc

dec_label_pc_c61c:                                ; preds = %dec_label_pc_c184
  store i32 %v3_c174, i32* %r0.global-to-local, align 4
  %v1_c620 = call i32 @function_10660(i32 %v3_c174)
  store i32 %v1_c620, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c624

dec_label_pc_c624:                                ; preds = %dec_label_pc_c630, %dec_label_pc_c15c, %dec_label_pc_c144, %dec_label_pc_c61c
  %v29_c62c = phi i32 [ %v3_c174, %dec_label_pc_c15c ], [ %v2_c150, %dec_label_pc_c144 ], [ %v1_c620, %dec_label_pc_c61c ], [ %v2_c634, %dec_label_pc_c630 ]
  store i32 %v3_bee0, i32* %r4.global-to-local, align 4
  store i32 %v15_bee0, i32* %r8.global-to-local, align 4
  store i32 %v21_bee0, i32* %sl.global-to-local, align 4
  store i32 %v24_bee0, i32* %fp.global-to-local, align 4
  ret i32 %v29_c62c

dec_label_pc_c630.critedge:                       ; preds = %dec_label_pc_c1b0
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_c630

dec_label_pc_c630:                                ; preds = %dec_label_pc_c4cc, %dec_label_pc_c630.critedge, %dec_label_pc_c46c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c634 = call i32 @function_10904(i32* null)
  store i32 %v2_c634, i32* %r0.global-to-local, align 4
  store i32 %v2_c150, i32* %ip.global-to-local, align 4
  %v9_c63c = icmp eq i32 %v2_c150, %v2_c634
  store i1 %v9_c63c, i1* %cpsr_z.global-to-local, align 1
  %v6_c640 = icmp slt i32 %v2_c150, %v2_c634
  br i1 %v6_c640, label %dec_label_pc_c624, label %dec_label_pc_c46c

dec_label_pc_c648:                                ; preds = %dec_label_pc_c100, %bb129
  %v0_c108.lcssa = phi i32 [ %v1_c0d4, %dec_label_pc_c100 ], [ %v0_c108, %bb129 ]
  %v2_c648 = sub i32 %v0_c108.lcssa, %v4_c08c
  store i32 %v2_c648, i32* %r2.global-to-local, align 4
  store i32 %v2_c0c4, i32* %r1.global-to-local, align 4
  store i32 %v2_c0b4, i32* %r0.global-to-local, align 4
  %v3_c654 = call i32 @function_ffd4(i32 %v2_c0b4, i32 %v2_c0c4, i32 %v2_c648)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c0b4, i32* @r0, align 4
  %v2_c660 = load i32, i32* @r4, align 4
  %v3_c660 = inttoptr i32 %v2_c660 to i8*
  store i8 0, i8* %v3_c660, align 1
  %v1_c664 = call i32 @function_109dc(i32 %v2_c0b4)
  store i32 %v1_c664, i32* %r0.global-to-local, align 4
  %sext40 = mul i32 %v1_c664, 16777216
  %phitmp = sdiv i32 %sext40, 16777216
  br label %dec_label_pc_c144

dec_label_pc_c670:                                ; preds = %dec_label_pc_c118
  store i32 104859200, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c144

dec_label_pc_c680:                                ; preds = %dec_label_pc_c118
  br label %dec_label_pc_c144

dec_label_pc_c694:                                ; preds = %dec_label_pc_c118
  store i32 33686020, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c144

; uselistorder directives
  uselistorder i32 %v2_c634, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c608, { 0, 2, 1 }
  uselistorder i32 %v4_c5f4, { 1, 0 }
  uselistorder i32 %v0_c5ec, { 0, 2, 1 }
  uselistorder i32 %v0_c5d0, { 0, 2, 1 }
  uselistorder i32 %v0_c5b4, { 0, 2, 1 }
  uselistorder i32 %v7_c59c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c4ac, { 2, 1, 0 }
  uselistorder i32 %v1_c584, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_c51c, { 0, 2, 1 }
  uselistorder i32 %v0_c504, { 1, 0, 2, 3 }
  uselistorder i32 %v4_c4f0, { 1, 0 }
  uselistorder i32 %v2_c4ec, { 0, 2, 1 }
  uselistorder i32 %v1_c490, { 1, 0, 2 }
  uselistorder i32 %v1_c420, { 0, 2, 1 }
  uselistorder i32 %v1_c41c, { 1, 0 }
  uselistorder i32 %v2_c414, { 1, 0 }
  uselistorder i32 %v1_c3e8, { 2, 1, 4, 0, 3, 6, 5 }
  uselistorder i32 %v3_c28c, { 1, 0 }
  uselistorder i32 %v3_c284, { 1, 0 }
  uselistorder i32 %v1_c23c, { 1, 0 }
  uselistorder i32 %v1_c234, { 1, 0 }
  uselistorder i32 %v1_c218, { 1, 0 }
  uselistorder i32 %v3_c210, { 1, 0 }
  uselistorder i32 %v1_c1d4, { 1, 0 }
  uselistorder i1 %v7_c1a8, { 1, 0 }
  uselistorder i1 %v7_c178, { 1, 0 }
  uselistorder i32 %v3_c174, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_c160, { 0, 1, 6, 3, 5, 7, 4, 2, 8 }
  uselistorder i32 %v2_c150, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_c14c, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2188.0, { 1, 0 }
  uselistorder i32 %v1_c11c, { 1, 0 }
  uselistorder i32 %v0_c118, { 1, 0 }
  uselistorder i32 %v1_c110, { 1, 0 }
  uselistorder i32 %v1_c108, { 1, 2, 0 }
  uselistorder i1 %v7_c0f4, { 1, 0 }
  uselistorder i32 %v1_c0f0, { 1, 0, 2 }
  uselistorder i1 %v8_c0e8, { 1, 0 }
  uselistorder i1 %v7_c0e4, { 1, 0 }
  uselistorder i32 %v1_c0d8, { 1, 0 }
  uselistorder i8 %v2_c0cc, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c0d0, { 1, 0 }
  uselistorder i32 %v0_c0f0, { 1, 2, 3, 0 }
  uselistorder i32 %v2_c0c4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c0b8, { 1, 0, 2 }
  uselistorder i32 %v2_c0b4, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_c0a4, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_c09c, { 1, 0 }
  uselistorder i32 %v4_c08c, { 6, 5, 7, 4, 3, 1, 2, 0, 8 }
  uselistorder i32 %v0_c040, { 1, 0, 2, 3 }
  uselistorder i32 %v6_bfe0, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_bfc4, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_bfac, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32 %v1_bf94, { 1, 2, 0 }
  uselistorder i32 %v7_bf50, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v6_bf2c, { 1, 2, 0 }
  uselistorder i32 %v2_bf14, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_beec, { 3, 4, 2, 6, 7, 5, 8, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 12, 10, 11 }
  uselistorder i32* %sl.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 3, 4, 1, 5 }
  uselistorder i32* %r3.global-to-local, { 2, 23, 1, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0 }
  uselistorder i32* %r2.global-to-local, { 3, 28, 2, 33, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 1, 41, 42, 43, 44, 45, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r1.global-to-local, { 38, 39, 40, 41, 42, 43, 44, 45, 11, 12, 13, 14, 15, 16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 32, 31, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 61, 36, 38, 37, 40, 39, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 51, 52, 60, 53, 54, 55, 56, 57, 58, 59, 4, 1, 2, 3, 5, 7, 6, 9, 8, 10, 11, 12, 13, 15, 14, 16, 17, 19, 18, 20, 22, 21, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %lr.global-to-local, { 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5 }
  uselistorder i32* %ip.global-to-local, { 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11 }
  uselistorder i32* %fp.global-to-local, { 5, 0, 1, 2, 3, 4 }
  uselistorder i1* %cpsr_z.global-to-local, { 19, 0, 20, 21, 22, 23, 24, 25, 30, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 41, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_c630, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c624, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_c4cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c46c, { 1, 0 }
  uselistorder label %.thread37, { 1, 0 }
  uselistorder label %bb139, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %bb136, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
  uselistorder label %dec_label_pc_c108, { 1, 2, 0 }
  uselistorder label %dec_label_pc_c100, { 1, 0 }
  uselistorder label %dec_label_pc_c0f4, { 1, 0 }
}

define i32 @function_c6a8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_c6a8:
  call void @__pseudo_cond_branch(i1 false, i32 11145176)
  %v0_c6ac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c6ac, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_c6a8
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_c6a8, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_c6b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c6b0:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c6e0, label %dec_label_pc_c6bc

dec_label_pc_c6bc:                                ; preds = %dec_label_pc_c6b0
  %v0_c6c0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c6c0

dec_label_pc_c6c0:                                ; preds = %dec_label_pc_c6c0, %dec_label_pc_c6bc
  %v0_c6d4 = phi i32 [ %v2_c6d4, %dec_label_pc_c6c0 ], [ 0, %dec_label_pc_c6bc ]
  %v0_c6c8 = phi i32 [ %v1_c6c8, %dec_label_pc_c6c0 ], [ %arg1, %dec_label_pc_c6bc ]
  %v0_c6d8 = phi i32 [ %v1_c6d8, %dec_label_pc_c6c0 ], [ %v0_c6c0.pre, %dec_label_pc_c6bc ]
  %v1_c6c0 = inttoptr i32 %v0_c6d8 to i8*
  %v2_c6c0 = load i8, i8* %v1_c6c0, align 1
  %v3_c6c0 = zext i8 %v2_c6c0 to i32
  %v1_c6c4 = add i32 %v0_c6d8, 1
  %v2_c6c4 = inttoptr i32 %v1_c6c4 to i8*
  %v3_c6c4 = load i8, i8* %v2_c6c4, align 1
  %v4_c6c4 = zext i8 %v3_c6c4 to i32
  %v1_c6c8 = add i32 %v0_c6c8, -2
  %v4_c6cc = mul nuw nsw i32 %v4_c6c4, 256
  %v5_c6cc = or i32 %v4_c6cc, %v3_c6c0
  %v2_c6d4 = add i32 %v5_c6cc, %v0_c6d4
  %v1_c6d8 = add i32 %v0_c6d8, 2
  store i32 %v1_c6d8, i32* @r0, align 4
  %v1_c6c8.cmp = icmp ugt i32 %v1_c6c8, 1
  br i1 %v1_c6c8.cmp, label %dec_label_pc_c6c0, label %dec_label_pc_c6e0

dec_label_pc_c6e0:                                ; preds = %dec_label_pc_c6c0, %dec_label_pc_c6b0
  %v1_c6e8 = phi i32 [ 0, %dec_label_pc_c6b0 ], [ %v2_c6d4, %dec_label_pc_c6c0 ]
  %v0_c6e0 = phi i32 [ %arg1, %dec_label_pc_c6b0 ], [ %v1_c6c8, %dec_label_pc_c6c0 ]
  %v7_c6e0 = icmp eq i32 %v0_c6e0, 1
  br i1 %v7_c6e0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c6e0
  %v1_c6e4 = load i32, i32* @r0, align 4
  %v2_c6e4 = inttoptr i32 %v1_c6e4 to i8*
  %v3_c6e4 = load i8, i8* %v2_c6e4, align 1
  %v4_c6e4 = zext i8 %v3_c6e4 to i32
  %v3_c6e8 = add i32 %v1_c6e8, %v4_c6e4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c6e0, %bb
  %v0_c6ec = phi i32 [ %v1_c6e8, %dec_label_pc_c6e0 ], [ %v3_c6e8, %bb ]
  %v3_c6f0 = urem i32 %v0_c6ec, 65536
  %v4_c6f4 = udiv i32 %v0_c6ec, 65536
  %v5_c6f4 = add nuw nsw i32 %v4_c6f4, %v3_c6f0
  %v4_c6f8 = udiv i32 %v5_c6f4, 65536
  %v5_c6f8 = add nuw nsw i32 %v4_c6f8, %v5_c6f4
  %v1_c6fc = urem i32 %v5_c6f8, 65536
  %v3_c704 = xor i32 %v1_c6fc, 65535
  ret i32 %v3_c704

; uselistorder directives
  uselistorder i32 %v5_c6f4, { 1, 0 }
  uselistorder i32 %v1_c6d8, { 1, 0 }
  uselistorder i32 %v1_c6c8, { 1, 0, 2 }
  uselistorder i32 %v0_c6d8, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c70c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c70c:
  %v3_c71c = urem i32 %arg2, 65536
  %v1_c720 = add i32 %arg1, 12
  %v1_c724 = inttoptr i32 %v1_c720 to i32*
  %v2_c724 = load i32, i32* %v1_c724, align 4
  %v3_c724 = add i32 %arg1, 16
  %v4_c724 = inttoptr i32 %v3_c724 to i32*
  %v5_c724 = load i32, i32* %v4_c724, align 4
  %v7_c728 = icmp sgt i32 %arg3, 1
  br i1 %v7_c728, label %dec_label_pc_c734.preheader, label %dec_label_pc_c754

dec_label_pc_c734.preheader:                      ; preds = %dec_label_pc_c70c
  %v0_c734.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c734.preheader, %dec_label_pc_c734
  %v0_c748 = phi i32 [ 0, %dec_label_pc_c734.preheader ], [ %v2_c748, %dec_label_pc_c734 ]
  %v0_c73c = phi i32 [ %arg3, %dec_label_pc_c734.preheader ], [ %v1_c73c, %dec_label_pc_c734 ]
  %v0_c74c = phi i32 [ %v0_c734.pre, %dec_label_pc_c734.preheader ], [ %v1_c74c, %dec_label_pc_c734 ]
  %v1_c734 = inttoptr i32 %v0_c74c to i8*
  %v2_c734 = load i8, i8* %v1_c734, align 1
  %v3_c734 = zext i8 %v2_c734 to i32
  %v1_c738 = add i32 %v0_c74c, 1
  %v2_c738 = inttoptr i32 %v1_c738 to i8*
  %v3_c738 = load i8, i8* %v2_c738, align 1
  %v4_c738 = zext i8 %v3_c738 to i32
  %v1_c73c = add nsw i32 %v0_c73c, -2
  %v4_c740 = mul nuw nsw i32 %v4_c738, 256
  %v5_c740 = or i32 %v4_c740, %v3_c734
  %v2_c748 = add i32 %v5_c740, %v0_c748
  %v1_c74c = add i32 %v0_c74c, 2
  store i32 %v1_c74c, i32* @r1, align 4
  %v8_c750 = icmp sgt i32 %v1_c73c, 1
  br i1 %v8_c750, label %dec_label_pc_c734, label %dec_label_pc_c754

dec_label_pc_c754:                                ; preds = %dec_label_pc_c734, %dec_label_pc_c70c
  %v1_c75c = phi i32 [ 0, %dec_label_pc_c70c ], [ %v2_c748, %dec_label_pc_c734 ]
  %v0_c754 = phi i32 [ %arg3, %dec_label_pc_c70c ], [ %v1_c73c, %dec_label_pc_c734 ]
  %v7_c754 = icmp eq i32 %v0_c754, 1
  br i1 %v7_c754, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c754
  %v1_c758 = load i32, i32* @r1, align 4
  %v2_c758 = inttoptr i32 %v1_c758 to i8*
  %v3_c758 = load i8, i8* %v2_c758, align 1
  %v4_c758 = zext i8 %v3_c758 to i32
  %v3_c75c = add i32 %v4_c758, %v1_c75c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c754, %bb
  %v0_c780 = phi i32 [ %v1_c75c, %dec_label_pc_c754 ], [ %v3_c75c, %bb ]
  %v3_c764 = urem i32 %v2_c724, 65536
  %v1_c76c = add i32 %arg1, 9
  %v2_c76c = inttoptr i32 %v1_c76c to i8*
  %v3_c76c = load i8, i8* %v2_c76c, align 1
  %v4_c76c = zext i8 %v3_c76c to i32
  %v3_c770 = urem i32 %v5_c724, 65536
  %v4_c774 = udiv i32 %v2_c724, 65536
  %v3_c77c = mul nuw nsw i32 %v4_c76c, 256
  %v4_c780 = udiv i32 %v5_c724, 65536
  %v5_c780 = add i32 %v0_c780, %v4_c780
  %v2_c784 = add i32 %v5_c780, %v3_c77c
  %v5_c774 = add nuw nsw i32 %v3_c764, %v3_c71c
  %v2_c778 = add nuw nsw i32 %v5_c774, %v4_c774
  %v2_c788 = add nuw nsw i32 %v2_c778, %v3_c770
  %v2_c78c = add i32 %v2_c784, %v2_c788
  %tmp = icmp ult i32 %v2_c78c, 65536
  br i1 %tmp, label %dec_label_pc_c7ac, label %dec_label_pc_c798

dec_label_pc_c798:                                ; preds = %.thread, %dec_label_pc_c798
  %v2_c7a01 = phi i32 [ %v2_c7a0, %dec_label_pc_c798 ], [ %v2_c78c, %.thread ]
  %v3_c7a42.in = phi i32 [ %v2_c7a0, %dec_label_pc_c798 ], [ %v2_c78c, %.thread ]
  %v3_c7a42 = udiv i32 %v3_c7a42.in, 65536
  %v3_c79c = urem i32 %v2_c7a01, 65536
  %v2_c7a0 = add nuw nsw i32 %v3_c79c, %v3_c7a42
  %tmp14 = icmp ult i32 %v2_c7a0, 65536
  br i1 %tmp14, label %dec_label_pc_c7ac.loopexit, label %dec_label_pc_c798

dec_label_pc_c7ac.loopexit:                       ; preds = %dec_label_pc_c798
  br label %dec_label_pc_c7ac

dec_label_pc_c7ac:                                ; preds = %dec_label_pc_c7ac.loopexit, %.thread
  %v0_c7ac = phi i32 [ %v2_c7a0, %dec_label_pc_c7ac.loopexit ], [ %v2_c78c, %.thread ]
  %v1_c7ac = urem i32 %v0_c7ac, 65536
  %v3_c7b4 = xor i32 %v1_c7ac, 65535
  ret i32 %v3_c7b4

; uselistorder directives
  uselistorder i32 %v2_c7a0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c78c, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c75c, { 1, 0 }
  uselistorder i32 %v1_c74c, { 1, 0 }
  uselistorder i32 %v1_c73c, { 0, 2, 1 }
  uselistorder i32 %v0_c74c, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c798, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c734, { 1, 0 }
}

define i32 @function_c7bc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c7bc:
  store i32 ptrtoint (i32* @global_var_c7d4.59 to i32), i32* @global_var_1b028.61, align 4
  ret i32 %arg1
}

define i32 @function_c7d4() local_unnamed_addr {
dec_label_pc_c7d4:
  %stack_var_-8 = alloca i32, align 4
  %v3_c7d4 = load i32, i32* @r4, align 4
  store i32 %v3_c7d4, i32* %stack_var_-8, align 4
  %v1_c7dc = call i32 @function_fb34(i32 1)
  store i32 -1378207815, i32* @global_var_1b238.65, align 4
  %v3_c7f4 = call i32 @function_fa50(i32 1, i32* null)
  %v4_c7f4 = inttoptr i32 %v3_c7f4 to i8*
  %v2_c7f8 = add i32 %v3_c7f4, 1
  %v3_c7f8 = inttoptr i32 %v2_c7f8 to i8*
  %v4_c7f8 = load i8, i8* %v3_c7f8, align 1
  %v3_c7fc = load i8, i8* %v4_c7f4, align 1
  store i8 %v4_c7f8, i8* bitcast (i32* @global_var_1b237.66 to i8*), align 4
  store i8 %v3_c7fc, i8* bitcast (i32* @global_var_1b236.67 to i8*), align 4
  %v2_c814 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_c814, i32* @r4, align 4
  %v1_c818 = call i32 @function_fa7c(i32 1)
  %v0_c81c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c81c, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_c7d4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_c7d4, %bb
  ret i32 %v1_c818

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_c824(i32 %arg1) local_unnamed_addr {
dec_label_pc_c824:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_c824 = load i32, i32* @r4, align 4
  %v9_c824 = load i32, i32* @r6, align 4
  %v12_c824 = load i32, i32* @r7, align 4
  %v15_c824 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_c840 = call i32 @function_10bfc(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1b020.69 to i32), i32* @r6, align 4
  %v7_c848 = icmp eq i32 %v3_c840, -1
  store i32 %v3_c840, i32* @global_var_1b020.69, align 4
  br i1 %v7_c848, label %dec_label_pc_c908, label %dec_label_pc_c854

dec_label_pc_c854:                                ; preds = %dec_label_pc_c824
  %v0_c858 = load i32, i32* @r4, align 4
  %v6_c868 = call i32 @function_10bcc(i32 %v3_c840, i32 %v0_c858, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_c86c = load i32, i32* @global_var_1b020.69, align 4
  store i32 %v2_c86c, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_c87c = call i32 @function_1059c(i32 %v2_c86c, i32 3)
  %v1_c884 = or i32 %v2_c87c, 2048
  store i32 %v1_c884, i32* @r2, align 4
  %v0_c888 = load i32, i32* @r4, align 4
  %v2_c88c = call i32 @function_1059c(i32 %v0_c888, i32 4)
  store i32 ptrtoint (i8** @global_var_1b02c.71 to i32), i32* @r8, align 4
  %v2_c894 = load i8, i8* bitcast (i8** @global_var_1b02c.71 to i8*), align 4
  %v2_c898 = icmp eq i8 %v2_c894, 0
  br i1 %v2_c898, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_c854
  br label %bb

.thread:                                          ; preds = %dec_label_pc_c854
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_c8d0 = call i32 @function_1095c()
  %v0_c8d4 = load i32, i32* @r5, align 4
  %v2_c8d4 = inttoptr i32 %v0_c8d0 to i32*
  store i32 %v0_c8d4, i32* %v2_c8d4, align 4
  %v2_c8d8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_c8d8, i32* @r7, align 4
  store i32 %v0_c8d0, i32* @r4, align 4
  %v2_c8e4 = load i32, i32* @global_var_1b020.69, align 4
  %v3_c8ec = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_c8ec = call i32 @function_10a2c(i32 %v2_c8e4, %sockaddr* %v3_c8ec, i32 16)
  %v7_c8f0 = icmp eq i32 %v4_c8ec, -1
  br i1 %v7_c8f0, label %dec_label_pc_c910, label %dec_label_pc_c8f8

dec_label_pc_c8f8:                                ; preds = %bb
  %v2_c900 = load i32, i32* @global_var_1b020.69, align 4
  %v2_c904 = call i32 @function_10ae0(i32 %v2_c900, i32 1)
  br label %dec_label_pc_c908

dec_label_pc_c908:                                ; preds = %dec_label_pc_c824, %dec_label_pc_c91c, %dec_label_pc_c8f8
  %v20_c90c = phi i32 [ %v3_c840, %dec_label_pc_c824 ], [ %v1_c960, %dec_label_pc_c91c ], [ %v2_c904, %dec_label_pc_c8f8 ]
  store i32 %v3_c824, i32* @r4, align 4
  store i32 %v9_c824, i32* @r6, align 4
  store i32 %v12_c824, i32* @r7, align 4
  store i32 %v15_c824, i32* @r8, align 4
  ret i32 %v20_c90c

dec_label_pc_c910:                                ; preds = %bb
  %v0_c910 = load i32, i32* @r4, align 4
  %v1_c910 = inttoptr i32 %v0_c910 to i32*
  %v2_c910 = load i32, i32* %v1_c910, align 4
  %v7_c914 = icmp eq i32 %v2_c910, 99
  br i1 %v7_c914, label %dec_label_pc_c968, label %dec_label_pc_c91c

dec_label_pc_c91c:                                ; preds = %dec_label_pc_c968, %bb21, %dec_label_pc_c910
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_c934 = load i32, i32* @global_var_1b020.69, align 4
  %v4_c94c = call i32 @function_10a58(i32 %v2_c934, %sockaddr* %v3_c8ec, i32 16)
  %v1_c954 = call i32 @function_1156c(i32 5)
  %v2_c958 = load i32, i32* @global_var_1b020.69, align 4
  %v1_c95c = call i32 @function_10660(i32 %v2_c958)
  %v1_c960 = call i32 @function_c824(i32 %v1_c95c)
  br label %dec_label_pc_c908

dec_label_pc_c968:                                ; preds = %dec_label_pc_c910
  %v2_c968 = load i8, i8* bitcast (i8** @global_var_1b02c.71 to i8*), align 4
  %v3_c968 = zext i8 %v2_c968 to i32
  %v1_c96c = load i32, i32* @r5, align 4
  %v9_c96c = icmp eq i32 %v3_c968, %v1_c96c
  br i1 %v9_c96c, label %dec_label_pc_c91c, label %bb21

bb21:                                             ; preds = %dec_label_pc_c968
  %v2_c974 = trunc i32 %v1_c96c to i8
  store i8 %v2_c974, i8* bitcast (i8** @global_var_1b02c.71 to i8*), align 4
  br label %dec_label_pc_c91c

; uselistorder directives
  uselistorder i32 %v3_c840, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i8* bitcast (i8** @global_var_1b02c.71 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1b02c.71, { 1, 0 }
  uselistorder label %dec_label_pc_c91c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c908, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_c988(i32 %arg1) local_unnamed_addr {
dec_label_pc_c988:
  %stack_var_-16 = alloca i32, align 4
  %v3_c988 = load i32, i32* @r4, align 4
  %v6_c988 = load i32, i32* @r5, align 4
  %v2_c98c = ptrtoint i32* %stack_var_-16 to i32
  %v0_c990 = call i32 @function_1068c()
  %v7_c994 = icmp eq i32 %v0_c990, -1
  %. = zext i1 %v7_c994 to i32
  %tmp10 = icmp slt i32 %v0_c990, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_c9b0 = icmp eq i32 %storemerge4, 0
  store i32 %v0_c990, i32* @global_var_1b19c.74, align 4
  br i1 %v2_c9b0, label %dec_label_pc_c9c4, label %dec_label_pc_c9bc

dec_label_pc_c9bc:                                ; preds = %dec_label_pc_c988
  store i32 %v3_c988, i32* @r4, align 4
  store i32 %v6_c988, i32* @r5, align 4
  ret i32 %v0_c990

dec_label_pc_c9c4:                                ; preds = %dec_label_pc_c988
  store i32 1, i32* %stack_var_-16, align 4
  %v1_c9d0 = call i32 @function_fb34(i32 17)
  %v1_c9d8 = call i32 @function_fb34(i32 18)
  %v0_c9dc = load i32, i32* @r5, align 4
  %v2_c9e4 = inttoptr i32 %v0_c9dc to i32*
  %v3_c9e4 = call i32 @function_fa50(i32 17, i32* %v2_c9e4)
  %v2_c9ec = inttoptr i32 %v3_c9e4 to i8*
  %v3_c9ec = call i32 @function_1078c(i8* %v2_c9ec, i32 2)
  %v7_c9f0 = icmp eq i32 %v3_c9ec, -1
  store i32 %v3_c9ec, i32* @r4, align 4
  br i1 %v7_c9f0, label %dec_label_pc_ca38, label %dec_label_pc_c9fc

dec_label_pc_c9fc:                                ; preds = %dec_label_pc_ca38, %dec_label_pc_c9c4
  %v0_ca08 = phi i32 [ %v3_ca48, %dec_label_pc_ca38 ], [ %v3_c9ec, %dec_label_pc_c9c4 ]
  %v3_ca10 = call i32 @function_10710(i32 %v0_ca08, i32 -2147199228, i32 %v2_c98c)
  br label %dec_label_pc_ca14

dec_label_pc_ca14:                                ; preds = %dec_label_pc_ca14, %dec_label_pc_c9fc
  %v0_ca20 = load i32, i32* @r4, align 4
  %v3_ca28 = call i32 @function_10710(i32 %v0_ca20, i32 -2147199227, i32 0)
  %v1_ca30 = call i32 @function_1156c(i32 10)
  br label %dec_label_pc_ca14

dec_label_pc_ca38:                                ; preds = %dec_label_pc_c9c4
  %v0_ca38 = load i32, i32* @r5, align 4
  %v2_ca40 = inttoptr i32 %v0_ca38 to i32*
  %v3_ca40 = call i32 @function_fa50(i32 18, i32* %v2_ca40)
  %v2_ca48 = inttoptr i32 %v3_ca40 to i8*
  %v3_ca48 = call i32 @function_1078c(i8* %v2_ca48, i32 2)
  %v3_ca4c = icmp eq i32 %v3_ca48, -1
  store i32 %v3_ca48, i32* @r4, align 4
  br i1 %v3_ca4c, label %dec_label_pc_ca58, label %dec_label_pc_c9fc

dec_label_pc_ca58:                                ; preds = %dec_label_pc_ca38
  %v1_ca5c = call i32 @function_fa7c(i32 17)
  %v1_ca64 = call i32 @function_fa7c(i32 18)
  %v0_ca68 = load i32, i32* @r5, align 4
  %v1_ca6c = call i32 @function_114d8(i32 %v0_ca68)
  %v0_ca70 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ca70, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_ca58
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_ca58, %bb13
  ret i32 %v1_ca6c

; uselistorder directives
  uselistorder i32 %v3_ca48, { 1, 2, 0 }
  uselistorder i32 %v3_c9ec, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_c990, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10710, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_ca74(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_ca74:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ca74 = load i32, i32* @r4, align 4
  store i32 %v3_ca74, i32* %stack_var_-36, align 4
  %v6_ca74 = load i32, i32* @r5, align 4
  %v9_ca74 = load i32, i32* @r6, align 4
  %v15_ca74 = load i32, i32* @r8, align 4
  %v2_ca80 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_ca80, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_ca80, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_ca98 = call i32 @function_10c58(i32 %v2_ca80)
  store i32 %v2_ca80, i32* @r0, align 4
  %v2_caa4 = call i32 @function_10c28(i32 %v2_ca80, i32 2)
  %v0_caa8 = load i32, i32* @r5, align 4
  store i32 %v0_caa8, i32* %r2.global-to-local, align 4
  %v3_cab4 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_cab4 = call i32 @function_108b0(i32 %v0_caa8, %_TYPEDEF_sigset_t* %v3_cab4, i32 %v0_caa8)
  %v2_cac0 = call i32 @function_10c70(i32 17, i32 1)
  %v2_cacc = call i32 @function_10c70(i32 5, i32 51132)
  %v0_cad0 = call i32 @function_101b0()
  store i8 -92, i8* bitcast (i32* @global_var_1b237.66 to i8*), align 4
  store i32 %v0_cad0, i32* @global_var_1b230.48, align 4
  store i32 -583215265, i32* %r2.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1b234.63 to i8*), align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 -583215265, i32* @global_var_1b238.65, align 4
  store i8 1, i8* bitcast (i32* @global_var_1b236.67 to i8*), align 4
  %v0_cb08 = load i32, i32* @r5, align 4
  %v1_cb08 = trunc i32 %v0_cb08 to i8
  store i8 %v1_cb08, i8* bitcast (i32* @global_var_1b235.78 to i8*), align 4
  %v6_cb0c = call i32 @function_fbec(i32 %v0_cad0, i32 ptrtoint (i8** @global_var_1b234.63 to i32), i32 -583215265, i32 1)
  store i32 ptrtoint (i32* @global_var_c7d4.59 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_c7d4.59 to i32), i32* @global_var_1b028.61, align 4
  %v2_cb20 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_cb20, i32* @sb, align 4
  %v1_cb24 = call i32 @function_c824(i32 %v6_cb0c)
  %v1_cb28 = call i32 @function_d280(i32 %v1_cb24)
  %v2_cb34 = call i32 @function_fff8(i32 %v2_cb20, i32 32)
  %v0_cb38 = load i32, i32* @r6, align 4
  %v7_cb38 = icmp eq i32 %v0_cb38, 2
  br i1 %v7_cb38, label %dec_label_pc_cc60, label %dec_label_pc_cb40

dec_label_pc_cb40:                                ; preds = %dec_label_pc_cc60, %dec_label_pc_ca74, %dec_label_pc_cc70
  %v0_cb40 = call i32 @function_d228()
  store i32 %v0_cb40, i32* %r6.global-to-local, align 4
  %v0_cb48 = load i32, i32* @r8, align 4
  %v1_cb48 = inttoptr i32 %v0_cb48 to i32*
  %v2_cb48 = load i32, i32* %v1_cb48, align 4
  %v1_cb4c = inttoptr i32 %v2_cb48 to i8*
  %v2_cb4c = call i32 @function_ff58(i8* %v1_cb4c)
  %v0_cb54 = load i32, i32* @r8, align 4
  %v1_cb54 = inttoptr i32 %v0_cb54 to i32*
  %v2_cb54 = load i32, i32* %v1_cb54, align 4
  %v1_cb58 = inttoptr i32 %v2_cb54 to i8*
  %v2_cb58 = call i32 @function_ff58(i8* %v1_cb58)
  %v1_cb5c = sub i32 20, %v2_cb4c
  store i32 %v2_cb58, i32* @r5, align 4
  %v0_cb64 = load i32, i32* %r6.global-to-local, align 4
  %v2_cb68 = call i32 @function_103e8(i32 %v0_cb64, i32 %v1_cb5c)
  %v1_cb70 = load i32, i32* @r5, align 4
  %v2_cb70 = add i32 %v1_cb70, %v2_cb68
  store i32 %v2_cb70, i32* @r4, align 4
  %v2_cb74 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_cb74, i32* @r6, align 4
  %v2_cb80 = call i32 @function_d2dc(i32 %v2_cb74, i32 %v2_cb70)
  %v2_cb84 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_cb84, i32* %r2.global-to-local, align 4
  %v1_cb88 = load i32, i32* @r4, align 4
  %v2_cb88 = add i32 %v1_cb88, %v2_cb84
  store i32 %v2_cb88, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_cb94 = load i32, i32* @r8, align 4
  %v1_cb94 = inttoptr i32 %v0_cb94 to i32*
  %v2_cb94 = load i32, i32* %v1_cb94, align 4
  store i32 %v2_cb94, i32* @r0, align 4
  %v3_cb98 = add i32 %v2_cb88, -72
  %v4_cb98 = inttoptr i32 %v3_cb98 to i8*
  store i8 0, i8* %v4_cb98, align 1
  %v2_cb9c = inttoptr i32 %v2_cb94 to i8*
  %v3_cb9c = call i32 @function_ff80(i8* %v2_cb9c, i32 %v2_cb74)
  %v2_cba8 = call i32 @function_fff8(i32 %v2_cb74, i32 32)
  %v0_cbac = call i32 @function_d228()
  store i32 %v0_cbac, i32* @r7, align 4
  %v0_cbb4 = load i32, i32* @r8, align 4
  %v1_cbb4 = inttoptr i32 %v0_cbb4 to i32*
  %v2_cbb4 = load i32, i32* %v1_cbb4, align 4
  %v1_cbb8 = inttoptr i32 %v2_cbb4 to i8*
  %v2_cbb8 = call i32 @function_ff58(i8* %v1_cbb8)
  %v0_cbc0 = load i32, i32* @r8, align 4
  %v1_cbc0 = inttoptr i32 %v0_cbc0 to i32*
  %v2_cbc0 = load i32, i32* %v1_cbc0, align 4
  %v1_cbc4 = inttoptr i32 %v2_cbc0 to i8*
  %v2_cbc4 = call i32 @function_ff58(i8* %v1_cbc4)
  %v1_cbc8 = sub i32 20, %v2_cbb8
  store i32 %v2_cbc4, i32* @r5, align 4
  %v0_cbd0 = load i32, i32* @r7, align 4
  %v2_cbd4 = call i32 @function_103e8(i32 %v0_cbd0, i32 %v1_cbc8)
  %v1_cbd8 = load i32, i32* @r5, align 4
  %v2_cbd8 = add i32 %v1_cbd8, %v2_cbd4
  store i32 %v2_cbd8, i32* @r4, align 4
  %v2_cbe4 = call i32 @function_d2dc(i32 %v2_cb74, i32 %v2_cbd8)
  %v1_cbec = load i32, i32* @r4, align 4
  %v2_cbec = add i32 %v1_cbec, %v2_cb84
  store i32 %v2_cbec, i32* @r3, align 4
  %v0_cbf0 = load i32, i32* @sl, align 4
  %v1_cbf0 = trunc i32 %v0_cbf0 to i8
  %v3_cbf0 = add i32 %v2_cbec, -72
  %v4_cbf0 = inttoptr i32 %v3_cbf0 to i8*
  store i8 %v1_cbf0, i8* %v4_cbf0, align 1
  %v2_cbfc = call i32 @function_107f8(i32 15, i32 %v2_cb74)
  %v1_cc04 = call i32 @function_fb34(i32 3)
  %v3_cc14 = call i32 @function_fa50(i32 3, i32* nonnull %stack_var_-44)
  %v3_cc18 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cc18, i32* %r2.global-to-local, align 4
  %v3_cc24 = inttoptr i32 %v3_cc14 to i32*
  %v4_cc24 = call i32 @function_10930(i32 1, i32* %v3_cc24, i32 %v3_cc18)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_cc34 = call i32 @function_10930(i32 1, i32* nonnull @global_var_123f4.82, i32 1)
  %v1_cc3c = call i32 @function_fa7c(i32 3)
  %v1_cc40 = call i32 @function_85e8(i32 %v1_cc3c)
  %v1_cc44 = call i32 @function_c988(i32 %v1_cc40)
  %v0_cc48 = call i32 @function_1068c()
  %v1_cc4c = load i32, i32* @sl, align 4
  %v7_cc50 = icmp sgt i32 %v0_cc48, %v1_cc4c
  br i1 %v7_cc50, label %dec_label_pc_cc54, label %dec_label_pc_cc98

dec_label_pc_cc54:                                ; preds = %dec_label_pc_cb40
  store i32 %v6_ca74, i32* %r5.global-to-local, align 4
  store i32 %v9_ca74, i32* %r6.global-to-local, align 4
  store i32 %v15_ca74, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_cc60:                                ; preds = %dec_label_pc_ca74
  %v0_cc60 = load i32, i32* @r8, align 4
  %v1_cc60 = add i32 %v0_cc60, 4
  %v2_cc60 = inttoptr i32 %v1_cc60 to i32*
  %v3_cc60 = load i32, i32* %v2_cc60, align 4
  %v1_cc64 = inttoptr i32 %v3_cc60 to i8*
  %v2_cc64 = call i32 @function_ff58(i8* %v1_cc64)
  %v8_cc6c = icmp sgt i32 %v2_cc64, 31
  br i1 %v8_cc6c, label %dec_label_pc_cb40, label %dec_label_pc_cc70

dec_label_pc_cc70:                                ; preds = %dec_label_pc_cc60
  %v0_cc70 = load i32, i32* @r8, align 4
  %v1_cc70 = add i32 %v0_cc70, 4
  %v2_cc70 = inttoptr i32 %v1_cc70 to i32*
  %v3_cc70 = load i32, i32* %v2_cc70, align 4
  store i32 %v2_cb20, i32* @r0, align 4
  %v2_cc78 = bitcast i32* %stack_var_-140 to i8*
  %v3_cc78 = call i32 @function_ff80(i8* %v2_cc78, i32 %v3_cc70)
  %v0_cc7c = load i32, i32* @r8, align 4
  %v1_cc7c = add i32 %v0_cc7c, 4
  %v2_cc7c = inttoptr i32 %v1_cc7c to i32*
  %v3_cc7c = load i32, i32* %v2_cc7c, align 4
  %v1_cc84 = inttoptr i32 %v3_cc7c to i8*
  %v2_cc84 = call i32 @function_ff58(i8* %v1_cc84)
  %v2_cc90 = call i32 @function_fff8(i32 %v3_cc7c, i32 %v2_cc84)
  br label %dec_label_pc_cb40

dec_label_pc_cc98:                                ; preds = %dec_label_pc_cb40
  %v1_cc98 = call i32 @function_10884(i32 %v0_cc48)
  %v0_cca0 = load i32, i32* @sl, align 4
  %v1_cca4 = call i32 @function_10660(i32 %v0_cca0)
  %v1_ccac = call i32 @function_10660(i32 1)
  %v1_ccb4 = call i32 @function_10660(i32 2)
  %v1_ccb8 = call i32 @function_85e8(i32 %v1_ccb4)
  %v1_ccbc = call i32 @function_c988(i32 %v1_ccb8)
  %v1_ccc0 = call i32 @function_d644(i32 %v1_ccbc)
  store i32 ptrtoint (i32* @global_var_1b024.84 to i32), i32* @fp, align 4
  %v2_ccd0 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_ccd0, i32* @r6, align 4
  %v2_ccd4 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_ccd4, i32* @r7, align 4
  %v2_cdac = ptrtoint i32* %stack_var_-60 to i32
  %v2_cfec = ptrtoint i32* %stack_var_-52 to i32
  %v4_d000 = bitcast i8** %stack_var_-38 to i32*
  %v2_d158 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_d010 = ptrtoint i32* %stack_var_-48 to i32
  %v1_d0b0 = bitcast i32* %stack_var_-140 to i8*
  %v5_d07c = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_d08c = sub i32 0, %v1_cc98
  br label %dec_label_pc_ccd8

dec_label_pc_ccd8:                                ; preds = %dec_label_pc_ccd8.backedge, %dec_label_pc_cc98
  %v2_cce045 = phi i32 [ %v2_cce045.pre, %dec_label_pc_ccd8.backedge ], [ %v2_ccd0, %dec_label_pc_cc98 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_cce047 = inttoptr i32 %v2_cce045 to i32*
  store i32 0, i32* %v4_cce047, align 4
  %v0_cce448 = load i32, i32* %r3.global-to-local, align 4
  %v1_cce449 = add i32 %v0_cce448, 4
  store i32 %v1_cce449, i32* %r3.global-to-local, align 4
  %v7_cce850 = icmp eq i32 %v1_cce449, 128
  br i1 %v7_cce850, label %dec_label_pc_ccf0, label %dec_label_pc_cce0.dec_label_pc_cce0_crit_edge

dec_label_pc_cce0.dec_label_pc_cce0_crit_edge:    ; preds = %dec_label_pc_ccd8, %dec_label_pc_cce0.dec_label_pc_cce0_crit_edge
  %v1_cce451 = phi i32 [ %v1_cce4, %dec_label_pc_cce0.dec_label_pc_cce0_crit_edge ], [ %v1_cce449, %dec_label_pc_ccd8 ]
  %v0_cce0.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_cce0 = load i32, i32* @r6, align 4
  %v3_cce0 = add i32 %v2_cce0, %v1_cce451
  %v4_cce0 = inttoptr i32 %v3_cce0 to i32*
  store i32 %v0_cce0.pre, i32* %v4_cce0, align 4
  %v0_cce4 = load i32, i32* %r3.global-to-local, align 4
  %v1_cce4 = add i32 %v0_cce4, 4
  store i32 %v1_cce4, i32* %r3.global-to-local, align 4
  %v7_cce8 = icmp eq i32 %v1_cce4, 128
  br i1 %v7_cce8, label %dec_label_pc_ccf0, label %dec_label_pc_cce0.dec_label_pc_cce0_crit_edge

dec_label_pc_ccf0:                                ; preds = %dec_label_pc_cce0.dec_label_pc_cce0_crit_edge, %dec_label_pc_ccd8
  %v0_ccf0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ccf0, i32* %r3.global-to-local, align 4
  store i32 %v0_ccf0, i32* @r4, align 4
  %v2_ccf852 = load i32, i32* @r7, align 4
  %v3_ccf853 = add i32 %v2_ccf852, %v0_ccf0
  %v4_ccf854 = inttoptr i32 %v3_ccf853 to i32*
  store i32 %v0_ccf0, i32* %v4_ccf854, align 4
  %v0_ccfc55 = load i32, i32* %r3.global-to-local, align 4
  %v1_ccfc56 = add i32 %v0_ccfc55, 4
  store i32 %v1_ccfc56, i32* %r3.global-to-local, align 4
  %v7_cd0057 = icmp eq i32 %v1_ccfc56, 128
  br i1 %v7_cd0057, label %dec_label_pc_cd08, label %dec_label_pc_ccf8.dec_label_pc_ccf8_crit_edge

dec_label_pc_ccf8.dec_label_pc_ccf8_crit_edge:    ; preds = %dec_label_pc_ccf0, %dec_label_pc_ccf8.dec_label_pc_ccf8_crit_edge
  %v1_ccfc58 = phi i32 [ %v1_ccfc, %dec_label_pc_ccf8.dec_label_pc_ccf8_crit_edge ], [ %v1_ccfc56, %dec_label_pc_ccf0 ]
  %v0_ccf8.pre = load i32, i32* @r4, align 4
  %v2_ccf8 = load i32, i32* @r7, align 4
  %v3_ccf8 = add i32 %v2_ccf8, %v1_ccfc58
  %v4_ccf8 = inttoptr i32 %v3_ccf8 to i32*
  store i32 %v0_ccf8.pre, i32* %v4_ccf8, align 4
  %v0_ccfc = load i32, i32* %r3.global-to-local, align 4
  %v1_ccfc = add i32 %v0_ccfc, 4
  store i32 %v1_ccfc, i32* %r3.global-to-local, align 4
  %v7_cd00 = icmp eq i32 %v1_ccfc, 128
  br i1 %v7_cd00, label %dec_label_pc_cd08, label %dec_label_pc_ccf8.dec_label_pc_ccf8_crit_edge

dec_label_pc_cd08:                                ; preds = %dec_label_pc_ccf8.dec_label_pc_ccf8_crit_edge, %dec_label_pc_ccf0
  store i32 ptrtoint (i32* @global_var_1b020.69 to i32), i32* %r2.global-to-local, align 4
  %v2_cd0c = load i32, i32* @global_var_1b020.69, align 4
  %v7_cd10 = icmp eq i32 %v2_cd0c, -1
  br i1 %v7_cd10, label %dec_label_pc_cd3c, label %dec_label_pc_cd18

dec_label_pc_cd18:                                ; preds = %dec_label_pc_cd08
  %v3_cd18 = udiv i32 %v2_cd0c, 32
  %v3_cd1c = mul nuw nsw i32 %v3_cd18, 4
  %v2_cd24 = add i32 %v3_cd1c, %v2_cb84
  store i32 %v2_cd24, i32* %r3.global-to-local, align 4
  %v1_cd28 = add i32 %v2_cd24, -360
  %v2_cd28 = inttoptr i32 %v1_cd28 to i32*
  %v3_cd28 = load i32, i32* %v2_cd28, align 4
  %v1_cd2c = urem i32 %v2_cd0c, 32
  %v7_cd34 = shl i32 1, %v1_cd2c
  %v8_cd34 = or i32 %v3_cd28, %v7_cd34
  store i32 %v8_cd34, i32* %r2.global-to-local, align 4
  store i32 %v8_cd34, i32* %v2_cd28, align 4
  br label %dec_label_pc_cd3c

dec_label_pc_cd3c:                                ; preds = %dec_label_pc_cd08, %dec_label_pc_cd18
  %v2_cd3c = load i32, i32* @global_var_1b024.84, align 4
  store i32 %v2_cd3c, i32* %r3.global-to-local, align 4
  %v7_cd40 = icmp eq i32 %v2_cd3c, -1
  store i32 ptrtoint (i32* @global_var_1b024.84 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_cd40, label %dec_label_pc_cf78, label %dec_label_pc_cd4c

dec_label_pc_cd4c:                                ; preds = %dec_label_pc_cf78, %dec_label_pc_cd3c, %.thread
  store i32 ptrtoint (i8** @global_var_1b1a0.87 to i32), i32* %r2.global-to-local, align 4
  %v2_cd50 = load i8, i8* bitcast (i8** @global_var_1b1a0.87 to i8*), align 4
  %v2_cd54 = icmp eq i8 %v2_cd50, 0
  %v2_ce94 = load i32, i32* @global_var_1b024.84, align 4
  %v3_ce98 = udiv i32 %v2_ce94, 32
  store i32 %v3_ce98, i32* %r3.global-to-local, align 4
  br i1 %v2_cd54, label %dec_label_pc_ce94, label %dec_label_pc_cd5c

dec_label_pc_cd5c:                                ; preds = %dec_label_pc_cd4c
  %v3_cd64 = mul nuw nsw i32 %v3_ce98, 4
  %v2_cd6c = add i32 %v3_cd64, %v2_cb84
  store i32 %v2_cd6c, i32* %r3.global-to-local, align 4
  %v1_cd70 = add i32 %v2_cd6c, -488
  %v2_cd70 = inttoptr i32 %v1_cd70 to i32*
  %v3_cd70 = load i32, i32* %v2_cd70, align 4
  %v1_cd74 = urem i32 %v2_ce94, 32
  %v7_cd7c = shl i32 1, %v1_cd74
  %v8_cd7c = or i32 %v3_cd70, %v7_cd7c
  store i32 %v8_cd7c, i32* %r2.global-to-local, align 4
  store i32 %v8_cd7c, i32* %v2_cd70, align 4
  br label %dec_label_pc_cd84

dec_label_pc_cd84:                                ; preds = %dec_label_pc_ce94, %dec_label_pc_cd5c
  %v2_cd88 = load i32, i32* @global_var_1b020.69, align 4
  %v2_cd8c = load i32, i32* @global_var_1b024.84, align 4
  store i32 %v2_cd8c, i32* %r3.global-to-local, align 4
  %v5_cd98 = icmp slt i32 %v2_cd88, %v2_cd8c
  br i1 %v5_cd98, label %bb, label %bb42

bb:                                               ; preds = %dec_label_pc_cd84
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_cd84, %bb
  %v0_cdb0 = phi i32 [ %v2_cd88, %dec_label_pc_cd84 ], [ %v2_cd8c, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_cdb0 = add i32 %v0_cdb0, 1
  store i32 %v2_ccd4, i32* %r2.global-to-local, align 4
  %v5_cdc4 = call i32 @function_10854(i32 %v1_cdb0, i32 %v2_ccd0, i32 %v2_ccd4, i32 0, i32 %v2_cdac)
  %v8_cdc8 = icmp eq i32 %v5_cdc4, -1
  store i32 %v5_cdc4, i32* %r3.global-to-local, align 4
  br i1 %v8_cdc8, label %dec_label_pc_ccd8.backedge, label %dec_label_pc_cdd4

dec_label_pc_cdd4:                                ; preds = %bb42
  %v6_cdc4 = trunc i32 %v5_cdc4 to i8
  %v3_cdd4 = icmp eq i8 %v6_cdc4, 0
  br i1 %v3_cdd4, label %dec_label_pc_cddc, label %dec_label_pc_cdfc

dec_label_pc_cddc:                                ; preds = %dec_label_pc_cdd4
  %v0_cddc = load i32, i32* @sl, align 4
  %v6_cde8 = inttoptr i32 %v5_cdc4 to i8*
  store i8* %v6_cde8, i8** %stack_var_-38, align 4
  %v2_cdec = call i32 @function_104b4(i32 %v0_cddc, i32 6)
  %v2_cdf0 = icmp eq i32 %v2_cdec, 0
  %v0_cdf4 = load i32, i32* @sl, align 4
  %v1_cdf4 = add i32 %v0_cdf4, 1
  store i32 %v1_cdf4, i32* @sl, align 4
  br i1 %v2_cdf0, label %dec_label_pc_cfe8, label %dec_label_pc_cdfc

dec_label_pc_cdfc:                                ; preds = %dec_label_pc_cdd4, %dec_label_pc_cddc, %dec_label_pc_cfe8
  store i32 ptrtoint (i32* @global_var_1b020.69 to i32), i32* %r2.global-to-local, align 4
  %v2_ce00 = load i32, i32* @global_var_1b020.69, align 4
  %v7_ce04 = icmp eq i32 %v2_ce00, -1
  br i1 %v7_ce04, label %dec_label_pc_ce30, label %dec_label_pc_ce0c

dec_label_pc_ce0c:                                ; preds = %dec_label_pc_cdfc
  %v3_ce0c = udiv i32 %v2_ce00, 32
  %v3_ce10 = mul nuw nsw i32 %v3_ce0c, 4
  store i32 %v2_cb84, i32* @ip, align 4
  %v2_ce18 = add i32 %v3_ce10, %v2_cb84
  store i32 %v2_ce18, i32* %r3.global-to-local, align 4
  %v1_ce1c = add i32 %v2_ce18, -360
  %v2_ce1c = inttoptr i32 %v1_ce1c to i32*
  %v3_ce1c = load i32, i32* %v2_ce1c, align 4
  %v1_ce20 = urem i32 %v2_ce00, 32
  %v6_ce24 = lshr i32 %v3_ce1c, %v1_ce20
  store i32 %v6_ce24, i32* %r2.global-to-local, align 4
  %v1_ce28 = urem i32 %v6_ce24, 2
  %v2_ce28 = icmp eq i32 %v1_ce28, 0
  br i1 %v2_ce28, label %dec_label_pc_ce30, label %dec_label_pc_d064

dec_label_pc_ce30:                                ; preds = %dec_label_pc_ce0c, %dec_label_pc_cdfc
  store i32 ptrtoint (i8** @global_var_1b1a0.87 to i32), i32* %r3.global-to-local, align 4
  %v2_ce34 = load i8, i8* bitcast (i8** @global_var_1b1a0.87 to i8*), align 4
  %v3_ce34 = zext i8 %v2_ce34 to i32
  store i32 %v3_ce34, i32* @r4, align 4
  %v2_ce38 = icmp eq i8 %v2_ce34, 0
  %v2_cec0 = load i32, i32* @global_var_1b024.84, align 4
  br i1 %v2_ce38, label %dec_label_pc_cec0, label %dec_label_pc_ce40

dec_label_pc_ce40:                                ; preds = %dec_label_pc_ce30
  %v3_ce44 = udiv i32 %v2_cec0, 32
  %v3_ce4c = mul nuw nsw i32 %v3_ce44, 4
  %v2_ce50 = add i32 %v3_ce4c, %v2_cb84
  store i32 %v2_ce50, i32* %r3.global-to-local, align 4
  %v1_ce54 = add i32 %v2_ce50, -488
  %v2_ce54 = inttoptr i32 %v1_ce54 to i32*
  %v3_ce54 = load i32, i32* %v2_ce54, align 4
  %v1_ce58 = urem i32 %v2_cec0, 32
  %v6_ce5c = lshr i32 %v3_ce54, %v1_ce58
  store i32 %v6_ce5c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1b1a0.87 to i32), i32* %r3.global-to-local, align 4
  %v1_ce68 = urem i32 %v6_ce5c, 2
  %v2_ce68 = icmp eq i32 %v1_ce68, 0
  store i8 0, i8* bitcast (i8** @global_var_1b1a0.87 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1b024.84 to i32), i32* @r5, align 4
  br i1 %v2_ce68, label %dec_label_pc_ce78, label %dec_label_pc_d008

dec_label_pc_ce78:                                ; preds = %dec_label_pc_ce40
  store i32 52864, i32* @lr, align 4
  %v1_ce7c = icmp ne i32 %v2_cec0, -1
  call void @__pseudo_cond_branch(i1 %v1_ce7c, i32 ptrtoint (i32* @global_var_10660.88 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_ce84 = load i32, i32* @r5, align 4
  %v2_ce84 = inttoptr i32 %v1_ce84 to i32*
  store i32 -1, i32* %v2_ce84, align 4
  %v1_ce8c = call i32 @function_1156c(i32 1)
  br label %dec_label_pc_ccd8.backedge

dec_label_pc_ccd8.backedge:                       ; preds = %dec_label_pc_ce78, %dec_label_pc_cf64, %dec_label_pc_d03c, %dec_label_pc_d0fc, %dec_label_pc_d120, %dec_label_pc_d1d4, %dec_label_pc_d1e0, %bb42, %dec_label_pc_cec0, %dec_label_pc_ced0, %dec_label_pc_d0ac, %bb44, %dec_label_pc_d180, %dec_label_pc_d110
  %v2_cce045.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ccd8

dec_label_pc_ce94:                                ; preds = %dec_label_pc_cd4c
  store i32 %v2_cb84, i32* %r2.global-to-local, align 4
  %v3_cea0 = mul nuw nsw i32 %v3_ce98, 4
  %v2_cea4 = add i32 %v3_cea0, %v2_cb84
  store i32 %v2_cea4, i32* %r3.global-to-local, align 4
  %v1_cea8 = add i32 %v2_cea4, -360
  %v2_cea8 = inttoptr i32 %v1_cea8 to i32*
  %v3_cea8 = load i32, i32* %v2_cea8, align 4
  %v1_ceac = urem i32 %v2_ce94, 32
  %v7_ceb4 = shl i32 1, %v1_ceac
  %v8_ceb4 = or i32 %v3_cea8, %v7_ceb4
  store i32 %v8_ceb4, i32* %r2.global-to-local, align 4
  store i32 %v8_ceb4, i32* %v2_cea8, align 4
  br label %dec_label_pc_cd84

dec_label_pc_cec0:                                ; preds = %dec_label_pc_ce30
  %v7_cec4 = icmp eq i32 %v2_cec0, -1
  store i32 ptrtoint (i32* @global_var_1b024.84 to i32), i32* @r5, align 4
  br i1 %v7_cec4, label %dec_label_pc_ccd8.backedge, label %dec_label_pc_ced0

dec_label_pc_ced0:                                ; preds = %dec_label_pc_cec0
  %v3_ced0 = udiv i32 %v2_cec0, 32
  %v3_ced4 = mul nuw nsw i32 %v3_ced0, 4
  %v2_cedc = add i32 %v3_ced4, %v2_cb84
  store i32 %v2_cedc, i32* %r3.global-to-local, align 4
  %v1_cee0 = add i32 %v2_cedc, -360
  %v2_cee0 = inttoptr i32 %v1_cee0 to i32*
  %v3_cee0 = load i32, i32* %v2_cee0, align 4
  %v1_cee4 = urem i32 %v2_cec0, 32
  %v6_cee8 = lshr i32 %v3_cee0, %v1_cee4
  store i32 %v6_cee8, i32* %r2.global-to-local, align 4
  %v1_ceec = urem i32 %v6_cee8, 2
  %v2_ceec = icmp eq i32 %v1_ceec, 0
  br i1 %v2_ceec, label %dec_label_pc_ccd8.backedge, label %dec_label_pc_cef4

dec_label_pc_cef4:                                ; preds = %dec_label_pc_ced0
  %v6_cef4 = inttoptr i32 %v3_ce34 to i8*
  store i8* %v6_cef4, i8** %stack_var_-38, align 4
  %v0_cefc = call i32 @function_1095c()
  %v0_cf00 = load i32, i32* @r4, align 4
  %v2_cf00 = inttoptr i32 %v0_cefc to i32*
  store i32 %v0_cf00, i32* %v2_cf00, align 4
  store i32 %v0_cefc, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_cf14 = load i32, i32* @global_var_1b024.84, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_cf20 = call i32 @function_10b0c(i32 %v2_cf14, i32* %v4_d000, i32 2, i32 16386)
  %v7_cf24 = icmp eq i32 %v5_cf20, -1
  br i1 %v7_cf24, label %dec_label_pc_d110, label %dec_label_pc_cf2c

dec_label_pc_cf2c:                                ; preds = %dec_label_pc_cef4
  %v2_cf2c = icmp eq i32 %v5_cf20, 0
  br i1 %v2_cf2c, label %dec_label_pc_d120, label %dec_label_pc_cf34

dec_label_pc_cf34:                                ; preds = %dec_label_pc_cf2c
  %v3_cf34 = load i8*, i8** %stack_var_-38, align 4
  %v4_cf34 = ptrtoint i8* %v3_cf34 to i32
  store i32 %v3_ce34, i32* %r3.global-to-local, align 4
  %v4_cf3c = mul nuw nsw i32 %v3_ce34, 256
  %v5_cf3c = or i32 %v4_cf34, %v4_cf3c
  store i32 %v5_cf3c, i32* %r2.global-to-local, align 4
  %v7_cf3c = icmp eq i32 %v5_cf3c, 0
  br i1 %v7_cf3c, label %dec_label_pc_d1e0, label %dec_label_pc_cf44

dec_label_pc_cf44:                                ; preds = %dec_label_pc_cf34
  %v1_cf44 = mul i32 %v4_cf34, 256
  %v3_cf48 = and i32 %v1_cf44, 65280
  %v4_cf4c = udiv i32 %v5_cf3c, 256
  %v5_cf4c = or i32 %v3_cf48, %v4_cf4c
  %v6_cf4c = trunc i32 %v4_cf4c to i8
  store i32 %v5_cf4c, i32* %r2.global-to-local, align 4
  %v4_cf50 = udiv i32 %v5_cf3c, 65536
  store i32 %v4_cf50, i32* %r3.global-to-local, align 4
  %v3_cf54 = icmp slt i8 %v6_cf4c, 0
  %v7_cf5c = inttoptr i32 %v4_cf4c to i8*
  store i8* %v7_cf5c, i8** %stack_var_-38, align 4
  br i1 %v3_cf54, label %dec_label_pc_cf64, label %dec_label_pc_d150

dec_label_pc_cf64:                                ; preds = %dec_label_pc_cf44
  %v2_cf64 = load i32, i32* @global_var_1b024.84, align 4
  %v1_cf68 = call i32 @function_10660(i32 %v2_cf64)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_cf70 = load i32, i32* @r5, align 4
  %v2_cf70 = inttoptr i32 %v1_cf70 to i32*
  store i32 -1, i32* %v2_cf70, align 4
  br label %dec_label_pc_ccd8.backedge

dec_label_pc_cf78:                                ; preds = %dec_label_pc_cd3c
  %v0_cf80 = load i32, i32* @r4, align 4
  store i32 %v0_cf80, i32* %r2.global-to-local, align 4
  %v3_cf84 = call i32 @function_10bfc(i32 2, i32 1, i32 %v0_cf80)
  %v7_cf88 = icmp eq i32 %v3_cf84, -1
  store i32 %v3_cf84, i32* %r5.global-to-local, align 4
  %v1_cf90 = load i32, i32* %r8.global-to-local, align 4
  %v2_cf90 = inttoptr i32 %v1_cf90 to i32*
  store i32 %v3_cf84, i32* %v2_cf90, align 4
  br i1 %v7_cf88, label %dec_label_pc_cd4c, label %dec_label_pc_cf98

dec_label_pc_cf98:                                ; preds = %dec_label_pc_cf78
  %v0_cf98 = load i32, i32* @r4, align 4
  store i32 %v0_cf98, i32* @r2, align 4
  %v2_cfa0 = call i32 @function_1059c(i32 %v3_cf84, i32 3)
  %v1_cfa8 = or i32 %v2_cfa0, 2048
  store i32 %v1_cfa8, i32* @r2, align 4
  %v0_cfac = load i32, i32* %r5.global-to-local, align 4
  %v2_cfb0 = call i32 @function_1059c(i32 %v0_cfac, i32 4)
  store i32 ptrtoint (i32* @global_var_1b028.61 to i32), i32* %r2.global-to-local, align 4
  %v2_cfb8 = load i32, i32* @global_var_1b028.61, align 4
  store i32 %v2_cfb8, i32* %r3.global-to-local, align 4
  %v2_cfbc = icmp eq i32 %v2_cfb8, 0
  br i1 %v2_cfbc, label %.thread, label %bb43

bb43:                                             ; preds = %dec_label_pc_cf98
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_101b0.89 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_cf98, %bb43
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_cfd0 = load i32, i32* @global_var_1b024.84, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1b1a0.87 to i8*), align 4
  %v5_cfe0 = call i32 @function_10a58(i32 %v2_cfd0, %sockaddr* bitcast (i8** @global_var_1b234.63 to %sockaddr*), i32 16)
  br label %dec_label_pc_cd4c

dec_label_pc_cfe8:                                ; preds = %dec_label_pc_cddc
  %v2_cff0 = load i32, i32* @global_var_1b024.84, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d000 = call i32 @function_10b6c(i32 %v2_cff0, i32* nonnull %v4_d000, i32 2, i32 16384)
  br label %dec_label_pc_cdfc

dec_label_pc_d008:                                ; preds = %dec_label_pc_ce40
  store i32 4, i32* @r4, align 4
  store i32 %v2_d010, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_d02c = call i32 @function_10ab0(i32 %v2_cec0, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_cfec)
  %v3_d030 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d030, i32* %r3.global-to-local, align 4
  %v2_d034 = icmp eq i32 %v3_d030, 0
  br i1 %v2_d034, label %dec_label_pc_d0ac, label %dec_label_pc_d03c

dec_label_pc_d03c:                                ; preds = %dec_label_pc_d008
  %v2_d03c = load i32, i32* @global_var_1b024.84, align 4
  %v1_d040 = call i32 @function_10660(i32 %v2_d03c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d048 = load i32, i32* @r5, align 4
  %v2_d048 = inttoptr i32 %v1_d048 to i32*
  store i32 -1, i32* %v2_d048, align 4
  %v0_d04c = call i32 @function_d228()
  %v2_d054 = call i32 @function_103e8(i32 %v0_d04c, i32 10)
  %v1_d058 = add i32 %v2_d054, 1
  %v1_d05c = call i32 @function_1156c(i32 %v1_d058)
  br label %dec_label_pc_ccd8.backedge

dec_label_pc_d064:                                ; preds = %dec_label_pc_ce0c
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_d010, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_d07c = call i32 @function_10a00(i32 %v2_ce00, %sockaddr* %v5_d07c, i32 %v2_d010, i32 16, i32 16)
  %v1_d080 = call i32 @function_d3a8(i32 %v6_d07c)
  store i32 %v1_cc98, i32* %r2.global-to-local, align 4
  %v2_d090 = call i32 @function_10760(i32 %v1_d08c, i32 9)
  store i32 ptrtoint (i32* @global_var_1b19c.74 to i32), i32* %r3.global-to-local, align 4
  %v2_d098 = load i32, i32* @global_var_1b19c.74, align 4
  %v2_d09c = icmp eq i32 %v2_d098, 0
  br i1 %v2_d09c, label %dec_label_pc_d0a4, label %dec_label_pc_d144

dec_label_pc_d0a4:                                ; preds = %dec_label_pc_d064, %dec_label_pc_d144
  %v1_d0a8 = call i32 @function_114d8(i32 0)
  br label %dec_label_pc_d0ac

dec_label_pc_d0ac:                                ; preds = %dec_label_pc_d008, %dec_label_pc_d0a4
  %v2_d0b0 = call i32 @function_ff58(i8* %v1_d0b0)
  %sext = mul i32 %v2_d0b0, 16777216
  %v1_d0b4 = sdiv i32 %sext, 16777216
  %v7_d0b4 = inttoptr i32 %v1_d0b4 to i8*
  store i8* %v7_d0b4, i8** %stack_var_-38, align 4
  %v0_d0b8 = call i32 @function_101b0()
  store i32 %v0_d0b8, i32* @global_var_1b230.48, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d0cc = load i32, i32* @r4, align 4
  store i32 %v0_d0cc, i32* %r2.global-to-local, align 4
  %v0_d0d0 = load i32, i32* @r5, align 4
  %v1_d0d0 = inttoptr i32 %v0_d0d0 to i32*
  %v2_d0d0 = load i32, i32* %v1_d0d0, align 4
  %v5_d0d4 = call i32 @function_10b6c(i32 %v2_d0d0, i32* nonnull @global_var_123f8.92, i32 %v0_d0cc, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_d0e0 = load i32, i32* @r5, align 4
  %v1_d0e0 = inttoptr i32 %v0_d0e0 to i32*
  %v2_d0e0 = load i32, i32* %v1_d0e0, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d0ec = call i32 @function_10b6c(i32 %v2_d0e0, i32* %v4_d000, i32 1, i32 16384)
  %v3_d0f0 = load i8*, i8** %stack_var_-38, align 4
  %v4_d0f0 = ptrtoint i8* %v3_d0f0 to i32
  store i32 %v4_d0f0, i32* %r2.global-to-local, align 4
  %v3_d0f4 = icmp eq i8* %v3_d0f0, null
  br i1 %v3_d0f4, label %dec_label_pc_ccd8.backedge, label %dec_label_pc_d0fc

dec_label_pc_d0fc:                                ; preds = %dec_label_pc_d0ac
  %v0_d0fc = load i32, i32* @r5, align 4
  %v1_d0fc = inttoptr i32 %v0_d0fc to i32*
  %v2_d0fc = load i32, i32* %v1_d0fc, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_d108 = call i32 @function_10b6c(i32 %v2_d0fc, i32* nonnull %stack_var_-140, i32 %v4_d0f0, i32 16384)
  br label %dec_label_pc_ccd8.backedge

dec_label_pc_d110:                                ; preds = %dec_label_pc_d150, %dec_label_pc_cef4
  %v0_d110 = load i32, i32* @r8, align 4
  %v1_d110 = inttoptr i32 %v0_d110 to i32*
  %v2_d110 = load i32, i32* %v1_d110, align 4
  store i32 %v2_d110, i32* %r3.global-to-local, align 4
  %v7_d114 = icmp eq i32 %v2_d110, 4
  br i1 %v7_d114, label %dec_label_pc_ccd8.backedge, label %bb44

bb44:                                             ; preds = %dec_label_pc_d110
  %v8_d118 = icmp eq i32 %v2_d110, 11
  br i1 %v8_d118, label %dec_label_pc_ccd8.backedge, label %dec_label_pc_d120

dec_label_pc_d120:                                ; preds = %dec_label_pc_d178, %bb44, %dec_label_pc_cf2c
  %v2_d120 = load i32, i32* @global_var_1b024.84, align 4
  store i32 53548, i32* @lr, align 4
  %v1_d128 = icmp ne i32 %v2_d120, -1
  call void @__pseudo_cond_branch(i1 %v1_d128, i32 ptrtoint (i32* @global_var_10660.88 to i32))
  store i32 ptrtoint (i32* @global_var_1b024.84 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1b024.84, align 4
  %v1_d13c = call i32 @function_1156c(i32 1)
  br label %dec_label_pc_ccd8.backedge

dec_label_pc_d144:                                ; preds = %dec_label_pc_d064
  %v2_d148 = call i32 @function_10760(i32 %v2_d098, i32 9)
  br label %dec_label_pc_d0a4

dec_label_pc_d150:                                ; preds = %dec_label_pc_cf44
  %v0_d150 = load i32, i32* @r4, align 4
  %v1_d150 = load i32, i32* @r8, align 4
  %v2_d150 = inttoptr i32 %v1_d150 to i32*
  store i32 %v0_d150, i32* %v2_d150, align 4
  store i32 %v2_d158, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_d164 = load i32, i32* @global_var_1b024.84, align 4
  %v9_d16c = call i32 @function_10b0c(i32 %v2_d164, i32* nonnull %stack_var_-1548, i32 %v4_cf4c, i32 16386)
  %v7_d170 = icmp eq i32 %v9_d16c, -1
  br i1 %v7_d170, label %dec_label_pc_d110, label %dec_label_pc_d178

dec_label_pc_d178:                                ; preds = %dec_label_pc_d150
  %v2_d178 = icmp eq i32 %v9_d16c, 0
  br i1 %v2_d178, label %dec_label_pc_d120, label %dec_label_pc_d180

dec_label_pc_d180:                                ; preds = %dec_label_pc_d178
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_d190 = load i32, i32* @global_var_1b024.84, align 4
  %v5_d194 = call i32 @function_10b0c(i32 %v2_d190, i32* nonnull %v4_d000, i32 2, i32 16384)
  %v3_d198 = load i8*, i8** %stack_var_-38, align 4
  %v4_d198 = ptrtoint i8* %v3_d198 to i32
  %v4_d19c = urem i32 %v4_cf50, 256
  %v4_d1a0 = mul i32 %v4_d198, 256
  %v5_d1a0 = or i32 %v4_d1a0, %v4_d19c
  store i32 %v5_d1a0, i32* @ip, align 4
  store i32 %v5_d1a0, i32* %r2.global-to-local, align 4
  %v3_d1a8 = sdiv i32 %v4_d1a0, 256
  store i32 %v3_d1a8, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_d1b4 = load i32, i32* @global_var_1b024.84, align 4
  %v6_d1bc = inttoptr i32 %v5_d1a0 to i8*
  store i8* %v6_d1bc, i8** %stack_var_-38, align 4
  %v8_d1c0 = call i32 @function_10b0c(i32 %v2_d1b4, i32* nonnull %stack_var_-1548, i32 %v5_d1a0, i32 16384)
  %v3_d1c4 = load i8*, i8** %stack_var_-38, align 4
  %v4_d1c4 = ptrtoint i8* %v3_d1c4 to i32
  store i32 %v4_d1c4, i32* %r2.global-to-local, align 4
  %v4_d1c8 = urem i32 %v3_d1a8, 256
  store i32 %v4_d1c8, i32* %r3.global-to-local, align 4
  %v6_d1cc = mul nuw nsw i32 %v4_d1c8, 256
  %v7_d1cc = or i32 %v4_d1c4, %v6_d1cc
  %v9_d1cc = icmp eq i32 %v7_d1cc, 0
  br i1 %v9_d1cc, label %dec_label_pc_ccd8.backedge, label %dec_label_pc_d1d4

dec_label_pc_d1d4:                                ; preds = %dec_label_pc_d180
  %v7_d1d8 = call i32 @function_830c(i32* nonnull %stack_var_-1548, i32 %v7_d1cc, i32 %v4_d1c4, i32 %v4_d1c8)
  br label %dec_label_pc_ccd8.backedge

dec_label_pc_d1e0:                                ; preds = %dec_label_pc_cf34
  %v2_d1e4 = load i32, i32* @global_var_1b024.84, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d1f4 = call i32 @function_10b0c(i32 %v2_d1e4, i32* nonnull %v4_d000, i32 2, i32 16384)
  br label %dec_label_pc_ccd8.backedge

; uselistorder directives
  uselistorder i32 %v4_d1c8, { 2, 0, 1 }
  uselistorder i32 %v4_d1c4, { 1, 0, 2 }
  uselistorder i32 %v3_d1a8, { 1, 0 }
  uselistorder i32 %v5_d1a0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d1a0, { 1, 0 }
  uselistorder i32 %v9_d16c, { 1, 0 }
  uselistorder i32 %v3_cf84, { 3, 2, 1, 0 }
  uselistorder i32 %v4_cf4c, { 2, 3, 0, 1 }
  uselistorder i32 %v5_cf20, { 1, 0 }
  uselistorder i32 %v2_cec0, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_ce00, { 3, 2, 1, 0 }
  uselistorder i32 %v5_cdc4, { 2, 3, 1, 0 }
  uselistorder i32 %v2_cd0c, { 2, 1, 0 }
  uselistorder i32 %v1_ccfc, { 1, 2, 0 }
  uselistorder i32 %v1_cce4, { 1, 2, 0 }
  uselistorder i32 %v2_d010, { 1, 0, 2 }
  uselistorder i32* %v4_d000, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_ccd4, { 1, 0, 2 }
  uselistorder i32 %v2_ccd0, { 1, 0, 2 }
  uselistorder i32 %v2_cb84, { 0, 1, 9, 2, 3, 8, 4, 5, 6, 7, 10 }
  uselistorder i32 %v2_cb74, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_ca80, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 47, 48, 40, 41, 37, 45, 46, 38, 39, 42, 43, 44 }
  uselistorder i32* @global_var_1b19c.74, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_1156c, { 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1b1a0.87 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1b1a0.87, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1b1a0.87 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1b020.69, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1b024.84, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i32)* @function_c988, { 1, 0 }
  uselistorder i32 (i32)* @function_85e8, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_d2dc, { 10, 9, 2, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32)* @function_c824, { 1, 0 }
  uselistorder i32* @global_var_1b028.61, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_c7d4.59 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_10c70, { 1, 0 }
  uselistorder label %dec_label_pc_d0ac, { 1, 0 }
  uselistorder label %dec_label_pc_d0a4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_ccd8.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_cdfc, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_cd4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cd3c, { 1, 0 }
  uselistorder label %dec_label_pc_ccf8.dec_label_pc_ccf8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_cce0.dec_label_pc_cce0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_cb40, { 2, 0, 1 }
}

define i32 @function_d228() local_unnamed_addr {
dec_label_pc_d228:
  %v2_d234 = load i32, i32* @global_var_1b1a4.94, align 4
  %v2_d238 = load i32, i32* @global_var_1b1b0.96, align 4
  store i32 ptrtoint (i32* @global_var_1b1a8.98 to i32), i32* @lr, align 4
  %v4_d244 = mul i32 %v2_d234, 2048
  %v5_d244 = xor i32 %v4_d244, %v2_d234
  %v4_d248 = udiv i32 %v2_d238, 524288
  %v5_d248 = xor i32 %v4_d248, %v2_d238
  %v2_d24c = load i32, i32* @global_var_1b1a8.98, align 4
  %v2_d250 = load i32, i32* @global_var_1b1ac.100, align 4
  %v2_d254 = xor i32 %v5_d248, %v5_d244
  %v4_d258 = udiv i32 %v5_d244, 256
  %v5_d258 = xor i32 %v2_d254, %v4_d258
  store i32 %v2_d24c, i32* @global_var_1b1a4.94, align 4
  store i32 %v2_d250, i32* @global_var_1b1a8.98, align 4
  store i32 %v2_d238, i32* @global_var_1b1ac.100, align 4
  store i32 %v5_d258, i32* @global_var_1b1b0.96, align 4
  ret i32 %v5_d258

; uselistorder directives
  uselistorder i32 %v2_d238, { 2, 1, 0 }
  uselistorder i32 %v2_d234, { 1, 0 }
}

define i32 @function_d280(i32 %arg1) local_unnamed_addr {
dec_label_pc_d280:
  %stack_var_-12 = alloca i32, align 4
  %v3_d280 = load i32, i32* @r4, align 4
  store i32 %v3_d280, i32* %stack_var_-12, align 4
  %v2_d288 = call i32 @function_10904(i32* null)
  store i32 %v2_d288, i32* @global_var_1b1a4.94, align 4
  %v0_d294 = call i32 @function_106b8()
  store i32 %v0_d294, i32* @r4, align 4
  %v0_d29c = call i32 @function_106e4()
  %v0_d2a4 = load i32, i32* @r4, align 4
  %v2_d2a4 = xor i32 %v0_d2a4, %v0_d29c
  store i32 %v2_d2a4, i32* @r4, align 4
  store i32 %v2_d2a4, i32* @global_var_1b1a8.98, align 4
  %v1_d2ac = call i32 @function_10968(i32 %v0_d29c)
  %v2_d2b0 = load i32, i32* @global_var_1b1a8.98, align 4
  %v2_d2bc = xor i32 %v2_d2b0, %v1_d2ac
  store i32 %v2_d2bc, i32* @global_var_1b1b0.96, align 4
  store i32 %v1_d2ac, i32* @global_var_1b1ac.100, align 4
  %v2_d2c8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_d2c8, i32* @r4, align 4
  ret i32 %v1_d2ac

; uselistorder directives
  uselistorder i32 %v1_d2ac, { 1, 2, 0 }
  uselistorder i32 %v0_d29c, { 1, 0 }
}

define i32 @function_d2dc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d2dc:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d2dc = load i32, i32* @r4, align 4
  store i32 %v3_d2dc, i32* %stack_var_-36, align 4
  %v6_d2dc = load i32, i32* @r5, align 4
  %v9_d2dc = load i32, i32* @r6, align 4
  %v12_d2dc = load i32, i32* @r7, align 4
  %v28_d2dc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_d2e4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_d2f0 = call i32 @function_fb34(i32 19)
  %v3_d2fc = call i32 @function_fa50(i32 19, i32* null)
  %v2_d308 = inttoptr i32 %v3_d2fc to i8*
  %v3_d308 = call i32 @function_109c0(i32 %v2_d2e4, i8* %v2_d308)
  %v2_d30c = icmp eq i32 %arg2, 0
  br i1 %v2_d30c, label %dec_label_pc_d388, label %dec_label_pc_d314

dec_label_pc_d314:                                ; preds = %dec_label_pc_d2dc
  store i32 ptrtoint (i32* @global_var_1b1a4.94 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1a8.98 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1ac.100 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1b1b0.96 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_d35c = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_d328

dec_label_pc_d328:                                ; preds = %dec_label_pc_d328.dec_label_pc_d328_crit_edge, %dec_label_pc_d314
  %v1_d34c = phi i32 [ %v1_d34c.pre, %dec_label_pc_d328.dec_label_pc_d328_crit_edge ], [ ptrtoint (i32* @global_var_1b1a4.94 to i32), %dec_label_pc_d314 ]
  %v2_d328 = load i32, i32* @global_var_1b1b0.96, align 4
  store i32 %v2_d328, i32* %r2.global-to-local, align 4
  %v2_d32c = load i32, i32* @global_var_1b1a4.94, align 4
  %v4_d330 = udiv i32 %v2_d328, 524288
  %v5_d330 = xor i32 %v4_d330, %v2_d328
  %v4_d334 = mul i32 %v2_d32c, 2048
  %v5_d334 = xor i32 %v4_d334, %v2_d32c
  %v2_d338 = xor i32 %v5_d330, %v5_d334
  %v2_d33c = load i32, i32* @global_var_1b1a8.98, align 4
  %v2_d340 = load i32, i32* @global_var_1b1ac.100, align 4
  store i32 %v2_d340, i32* %ip.global-to-local, align 4
  %v4_d344 = udiv i32 %v5_d334, 256
  %v5_d344 = xor i32 %v2_d338, %v4_d344
  store i32 %v5_d344, i32* @r4, align 4
  %v2_d34c = inttoptr i32 %v1_d34c to i32*
  store i32 %v2_d33c, i32* %v2_d34c, align 4
  %v0_d350 = load i32, i32* %ip.global-to-local, align 4
  %v1_d350 = load i32, i32* %r8.global-to-local, align 4
  %v2_d350 = inttoptr i32 %v1_d350 to i32*
  store i32 %v0_d350, i32* %v2_d350, align 4
  %v0_d354 = load i32, i32* %r2.global-to-local, align 4
  %v1_d354 = load i32, i32* @r7, align 4
  %v2_d354 = inttoptr i32 %v1_d354 to i32*
  store i32 %v0_d354, i32* %v2_d354, align 4
  %v0_d358 = load i32, i32* @r4, align 4
  %v1_d358 = load i32, i32* @r6, align 4
  %v2_d358 = inttoptr i32 %v1_d358 to i32*
  store i32 %v0_d358, i32* %v2_d358, align 4
  %v2_d35c = call i32 @function_ff58(i8* %v1_d35c)
  %v0_d364 = load i32, i32* @r4, align 4
  %v2_d368 = call i32 @function_103e8(i32 %v0_d364, i32 %v2_d35c)
  %v2_d370 = add i32 %v2_d368, %v28_d2dc
  %v1_d374 = add i32 %v2_d370, -32
  %v2_d374 = inttoptr i32 %v1_d374 to i8*
  %v3_d374 = load i8, i8* %v2_d374, align 1
  %v2_d378 = load i32, i32* @r5, align 4
  %v3_d378 = load i32, i32* %fp.global-to-local, align 4
  %v4_d378 = add i32 %v3_d378, %v2_d378
  %v5_d378 = inttoptr i32 %v4_d378 to i8*
  store i8 %v3_d374, i8* %v5_d378, align 1
  %v0_d37c = load i32, i32* @r5, align 4
  %v1_d37c = add i32 %v0_d37c, 1
  store i32 %v1_d37c, i32* @r5, align 4
  %v1_d380 = load i32, i32* %sb.global-to-local, align 4
  %v9_d380 = icmp eq i32 %v1_d37c, %v1_d380
  br i1 %v9_d380, label %dec_label_pc_d388, label %dec_label_pc_d328.dec_label_pc_d328_crit_edge

dec_label_pc_d328.dec_label_pc_d328_crit_edge:    ; preds = %dec_label_pc_d328
  %v1_d34c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_d328

dec_label_pc_d388:                                ; preds = %dec_label_pc_d328, %dec_label_pc_d2dc
  %v1_d38c = call i32 @function_fa7c(i32 19)
  %v2_d394 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d394, i32* @r4, align 4
  store i32 %v6_d2dc, i32* @r5, align 4
  store i32 %v9_d2dc, i32* @r6, align 4
  store i32 %v12_d2dc, i32* @r7, align 4
  ret i32 %v1_d38c

; uselistorder directives
  uselistorder i32 %v2_d32c, { 1, 0 }
  uselistorder i32 %v2_d328, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* @global_var_1b1b0.96, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1b1ac.100, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1b1a8.98, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32* @global_var_1b1a4.94, { 2, 4, 1, 0, 3 }
}

define i32 @function_d3a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_d3a8:
  %v2_d3ac = load i32, i32* @global_var_1b24c.110, align 4
  %v2_d3b4 = call i32 @function_10760(i32 %v2_d3ac, i32 9)
  %v0_d3b8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d3b8, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_d3a8
  %v2_d3b8 = load i32, i32* @ip, align 4
  %v5_d3b81 = udiv i32 %v2_d3b8, 16
  %v6_d3b8 = and i32 %v5_d3b81, 9
  store i32 %v6_d3b8, i32* @fp, align 4
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_d3a8, %bb
  ret i32 %v2_d3b4

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_d3bc() local_unnamed_addr {
dec_label_pc_d3bc:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_d3bc = load i32, i32* @r4, align 4
  store i32 %v3_d3bc, i32* %stack_var_-16, align 4
  %v0_d3c0 = load i32, i32* @r0, align 4
  store i32 %v0_d3c0, i32* %r5.global-to-local, align 4
  %v1_d3c4 = add i32 %v0_d3c0, 4
  %v2_d3c4 = inttoptr i32 %v1_d3c4 to i32*
  %v3_d3c4 = load i32, i32* %v2_d3c4, align 4
  store i32 %v3_d3c4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 54248, i32* @lr, align 4
  %v1_d3e4 = icmp ne i32 %v3_d3c4, -1
  call void @__pseudo_cond_branch(i1 %v1_d3e4, i32 ptrtoint (i32* @global_var_10660.88 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d3f4 = call i32 @function_10bfc(i32 2, i32 1, i32 0)
  store i32 %v3_d3f4, i32* %r3.global-to-local, align 4
  %v7_d3fc = icmp eq i32 %v3_d3f4, -1
  %v0_d404 = load i32, i32* %r5.global-to-local, align 4
  %v1_d404 = add i32 %v0_d404, 28
  store i32 %v1_d404, i32* %r0.global-to-local, align 4
  %v2_d408 = add i32 %v0_d404, 4
  %v3_d408 = inttoptr i32 %v2_d408 to i32*
  store i32 %v3_d3f4, i32* %v3_d408, align 4
  br i1 %v7_d3fc, label %dec_label_pc_d3bc.dec_label_pc_d484_crit_edge, label %dec_label_pc_d410

dec_label_pc_d3bc.dec_label_pc_d484_crit_edge:    ; preds = %dec_label_pc_d3bc
  %v14_d488.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d484

dec_label_pc_d410:                                ; preds = %dec_label_pc_d3bc
  %v0_d410 = load i32, i32* %r6.global-to-local, align 4
  %v1_d410 = load i32, i32* %r5.global-to-local, align 4
  %v2_d410 = add i32 %v1_d410, 24
  %v3_d410 = inttoptr i32 %v2_d410 to i32*
  store i32 %v0_d410, i32* %v3_d410, align 4
  %v0_d414 = load i32, i32* %r0.global-to-local, align 4
  %v2_d414 = call i32 @function_fff8(i32 %v0_d414, i32 256)
  store i32 %v2_d414, i32* %r0.global-to-local, align 4
  %v0_d418 = load i32, i32* %r5.global-to-local, align 4
  %v1_d418 = add i32 %v0_d418, 4
  %v2_d418 = inttoptr i32 %v1_d418 to i32*
  %v3_d418 = load i32, i32* %v2_d418, align 4
  store i32 %v3_d418, i32* @r4, align 4
  %v0_d420 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_d420, i32* @r2, align 4
  store i32 %v3_d418, i32* %r0.global-to-local, align 4
  %v2_d428 = call i32 @function_1059c(i32 %v3_d418, i32 3)
  %v1_d430 = or i32 %v2_d428, 2048
  store i32 %v1_d430, i32* @r2, align 4
  %v0_d434 = load i32, i32* @r4, align 4
  store i32 %v0_d434, i32* %r0.global-to-local, align 4
  %v2_d438 = call i32 @function_1059c(i32 %v0_d434, i32 4)
  store i32 %v2_d438, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1e8.112 to i32), i32* %r3.global-to-local, align 4
  %v0_d440 = load i32, i32* %r5.global-to-local, align 4
  %v1_d440 = add i32 %v0_d440, 20
  %v2_d440 = inttoptr i32 %v1_d440 to i32*
  %v3_d440 = load i32, i32* %v2_d440, align 4
  store i32 %v3_d440, i32* @r4, align 4
  %v2_d444 = load i32, i32* @global_var_1b1e8.112, align 4
  %v1_d448 = add i32 %v0_d440, 16
  %v2_d448 = inttoptr i32 %v1_d448 to i32*
  %v3_d448 = load i32, i32* %v2_d448, align 4
  store i32 %v3_d448, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_d450 = add i32 %v0_d440, 8
  %v3_d450 = inttoptr i32 %v2_d450 to i32*
  store i32 %v2_d444, i32* %v3_d450, align 4
  %v0_d454 = load i32, i32* %r3.global-to-local, align 4
  %v1_d454 = load i32, i32* %r5.global-to-local, align 4
  %v2_d454 = add i32 %v1_d454, 12
  %v3_d454 = inttoptr i32 %v2_d454 to i32*
  store i32 %v0_d454, i32* %v3_d454, align 4
  %v0_d45c = load i32, i32* %r5.global-to-local, align 4
  %v1_d45c = add i32 %v0_d45c, 4
  %v2_d45c = inttoptr i32 %v1_d45c to i32*
  %v3_d45c = load i32, i32* %v2_d45c, align 4
  store i32 %v3_d45c, i32* %r0.global-to-local, align 4
  %v0_d460 = load i32, i32* %r3.global-to-local, align 4
  %v2_d460 = mul i32 %v0_d460, 2
  store i32 %v2_d460, i32* %r3.global-to-local, align 4
  store i32 %v2_d460, i32* %stack_var_-32, align 4
  %v3_d480 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_d480 = call i32 @function_10a58(i32 %v3_d45c, %sockaddr* %v3_d480, i32 16)
  store i32 %v4_d480, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d484

dec_label_pc_d484:                                ; preds = %dec_label_pc_d3bc.dec_label_pc_d484_crit_edge, %dec_label_pc_d410
  %v14_d488 = phi i32 [ %v14_d488.pre, %dec_label_pc_d3bc.dec_label_pc_d484_crit_edge ], [ %v4_d480, %dec_label_pc_d410 ]
  %v2_d488 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_d488, i32* @r4, align 4
  ret i32 %v14_d488

; uselistorder directives
  uselistorder i32 %v2_d460, { 1, 0 }
  uselistorder i32 %v3_d3f4, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 5, 6, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_fff8, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_d484, { 1, 0 }
}

define i32 @function_d490(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d490:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_d490 = load i32, i32* @r4, align 4
  %v6_d490 = load i32, i32* @r5, align 4
  %v9_d490 = load i32, i32* @r6, align 4
  %v12_d490 = load i32, i32* @r7, align 4
  %v15_d490 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1b1b4.114 to i32), i32* @r8, align 4
  %v2_d498 = load i32, i32* @global_var_1b1b4.114, align 4
  store i32 ptrtoint (i32* @global_var_1b1e0.116 to i32), i32* %sb.global-to-local, align 4
  %v3_d4a4 = mul i32 %v2_d498, 16
  store i32 %v3_d4a4, i32* %r3.global-to-local, align 4
  %v3_d4ac = urem i32 %arg3, 65536
  store i32 %v3_d4ac, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_d4b8 = load i32, i32* @global_var_1b1e0.116, align 4
  %v1_d4bc = add i32 %v3_d4a4, 16
  store i32 %v1_d4bc, i32* %r1.global-to-local, align 4
  store i32 %v3_d4ac, i32* %stack_var_-44, align 4
  %v15_d4c4 = call i32 @function_11030(i32 %v2_d4b8, i32 %v1_d4bc, i32 %v3_d4ac, i32 %v3_d4a4)
  store i32 %v15_d4c4, i32* %sl.global-to-local, align 4
  %v0_d4cc = load i32, i32* @r5, align 4
  %v1_d4d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_d4d0 = inttoptr i32 %v1_d4d0 to i32*
  store i32 %v15_d4c4, i32* %v2_d4d0, align 4
  %v2_d4d4 = load i32, i32* @global_var_1b1b4.114, align 4
  store i32 %v2_d4d4, i32* %fp.global-to-local, align 4
  %v1_d4d8 = inttoptr i32 %v0_d4cc to i8*
  %v2_d4d8 = call i32 @function_ff58(i8* %v1_d4d8)
  %sext = mul i32 %v2_d4d8, 16777216
  %v1_d4dc = sdiv i32 %sext, 16777216
  %v2_d4dc = add nsw i32 %v1_d4dc, 1
  store i32 %v2_d4dc, i32* @r4, align 4
  store i32 %v1_d4dc, i32* @r7, align 4
  %v1_d4e8 = call i32 @function_10d94(i32 %v2_d4dc)
  %v0_d4ec = load i32, i32* @r5, align 4
  store i32 %v0_d4ec, i32* %r1.global-to-local, align 4
  %v0_d4f0 = load i32, i32* @r4, align 4
  store i32 %v0_d4f0, i32* %r2.global-to-local, align 4
  store i32 %v1_d4e8, i32* @r6, align 4
  %v3_d4f8 = call i32 @function_ffd4(i32 %v1_d4e8, i32 %v0_d4ec, i32 %v0_d4f0)
  %v0_d4fc = load i32, i32* @r7, align 4
  %tmp23 = icmp slt i32 %v0_d4fc, 1
  %extract.t8 = trunc i32 %v0_d4fc to i8
  br i1 %tmp23, label %dec_label_pc_d528, label %dec_label_pc_d504

dec_label_pc_d504:                                ; preds = %dec_label_pc_d490
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d50c

dec_label_pc_d50c:                                ; preds = %dec_label_pc_d50c.dec_label_pc_d50c_crit_edge, %dec_label_pc_d504
  %v1_d514 = phi i32 [ %v1_d514.pre, %dec_label_pc_d50c.dec_label_pc_d50c_crit_edge ], [ -81, %dec_label_pc_d504 ]
  %v2_d518 = phi i32 [ %v1_d51c, %dec_label_pc_d50c.dec_label_pc_d50c_crit_edge ], [ 0, %dec_label_pc_d504 ]
  %v1_d50c = load i32, i32* @r6, align 4
  %v2_d50c = add i32 %v1_d50c, %v2_d518
  %v3_d50c = inttoptr i32 %v2_d50c to i8*
  %v4_d50c = load i8, i8* %v3_d50c, align 1
  %v6_d50c = zext i8 %v4_d50c to i32
  %v1_d510 = sub i32 -1, %v1_d514
  %v2_d514 = xor i32 %v6_d50c, %v1_d510
  store i32 %v2_d514, i32* %r3.global-to-local, align 4
  %v1_d518 = trunc i32 %v2_d514 to i8
  store i8 %v1_d518, i8* %v3_d50c, align 1
  %v0_d51c = load i32, i32* %r2.global-to-local, align 4
  %v1_d51c = add i32 %v0_d51c, 1
  store i32 %v1_d51c, i32* %r2.global-to-local, align 4
  %v0_d520 = load i32, i32* @r7, align 4
  %v9_d520 = icmp eq i32 %v0_d520, %v1_d51c
  br i1 %v9_d520, label %dec_label_pc_d528.loopexit, label %dec_label_pc_d50c.dec_label_pc_d50c_crit_edge

dec_label_pc_d50c.dec_label_pc_d50c_crit_edge:    ; preds = %dec_label_pc_d50c
  %v1_d514.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d50c

dec_label_pc_d528.loopexit:                       ; preds = %dec_label_pc_d50c
  %extract.t = trunc i32 %v1_d51c to i8
  br label %dec_label_pc_d528

dec_label_pc_d528:                                ; preds = %dec_label_pc_d528.loopexit, %dec_label_pc_d490
  %v0_d538.off0 = phi i8 [ %extract.t, %dec_label_pc_d528.loopexit ], [ %extract.t8, %dec_label_pc_d490 ]
  %v2_d528 = load i32, i32* @global_var_1b1b4.114, align 4
  %v2_d52c = load i32, i32* @global_var_1b1e0.116, align 4
  store i32 %v2_d52c, i32* %r2.global-to-local, align 4
  %v3_d530 = mul i32 %v2_d528, 16
  %v2_d534 = add i32 %v2_d52c, %v3_d530
  store i32 %v2_d534, i32* %r3.global-to-local, align 4
  %v3_d538 = add i32 %v2_d534, 12
  %v4_d538 = inttoptr i32 %v3_d538 to i8*
  store i8 %v0_d538.off0, i8* %v4_d538, align 1
  %v0_d53c = load i32, i32* @r6, align 4
  %v1_d53c = load i32, i32* %sl.global-to-local, align 4
  %v2_d53c = load i32, i32* %fp.global-to-local, align 4
  %v5_d53c = mul i32 %v2_d53c, 16
  %v6_d53c = add i32 %v5_d53c, %v1_d53c
  %v7_d53c = inttoptr i32 %v6_d53c to i32*
  store i32 %v0_d53c, i32* %v7_d53c, align 4
  %v2_d544 = load i32, i32* @global_var_1b1b4.114, align 4
  store i32 %v2_d544, i32* @r7, align 4
  %v2_d548 = load i32, i32* @global_var_1b1e0.116, align 4
  store i32 %v2_d548, i32* %sl.global-to-local, align 4
  %v1_d54c = inttoptr i32 %arg2 to i8*
  %v2_d54c = call i32 @function_ff58(i8* %v1_d54c)
  %sext1 = mul i32 %v2_d54c, 16777216
  %v1_d550 = sdiv i32 %sext1, 16777216
  %v2_d550 = add nsw i32 %v1_d550, 1
  store i32 %v2_d550, i32* @r4, align 4
  store i32 %v1_d550, i32* @r5, align 4
  %v1_d55c = call i32 @function_10d94(i32 %v2_d550)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_d564 = load i32, i32* @r4, align 4
  store i32 %v0_d564, i32* %r2.global-to-local, align 4
  store i32 %v1_d55c, i32* %r6.global-to-local, align 4
  %v3_d56c = call i32 @function_ffd4(i32 %v1_d55c, i32 %arg2, i32 %v0_d564)
  %v0_d570 = load i32, i32* @r5, align 4
  %tmp24 = icmp slt i32 %v0_d570, 1
  %extract.t10 = trunc i32 %v0_d570 to i8
  br i1 %tmp24, label %dec_label_pc_d59c, label %dec_label_pc_d578

dec_label_pc_d578:                                ; preds = %dec_label_pc_d528
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d580

dec_label_pc_d580:                                ; preds = %dec_label_pc_d580.dec_label_pc_d580_crit_edge, %dec_label_pc_d578
  %v1_d588 = phi i32 [ %v1_d588.pre, %dec_label_pc_d580.dec_label_pc_d580_crit_edge ], [ -81, %dec_label_pc_d578 ]
  %v2_d58c = phi i32 [ %v1_d590, %dec_label_pc_d580.dec_label_pc_d580_crit_edge ], [ 0, %dec_label_pc_d578 ]
  %v1_d580 = load i32, i32* %r6.global-to-local, align 4
  %v2_d580 = add i32 %v1_d580, %v2_d58c
  %v3_d580 = inttoptr i32 %v2_d580 to i8*
  %v4_d580 = load i8, i8* %v3_d580, align 1
  %v6_d580 = zext i8 %v4_d580 to i32
  %v1_d584 = sub i32 -1, %v1_d588
  %v2_d588 = xor i32 %v6_d580, %v1_d584
  store i32 %v2_d588, i32* %r3.global-to-local, align 4
  %v1_d58c = trunc i32 %v2_d588 to i8
  store i8 %v1_d58c, i8* %v3_d580, align 1
  %v0_d590 = load i32, i32* %r2.global-to-local, align 4
  %v1_d590 = add i32 %v0_d590, 1
  store i32 %v1_d590, i32* %r2.global-to-local, align 4
  %v0_d594 = load i32, i32* @r5, align 4
  %v9_d594 = icmp eq i32 %v0_d594, %v1_d590
  br i1 %v9_d594, label %dec_label_pc_d59c.loopexit, label %dec_label_pc_d580.dec_label_pc_d580_crit_edge

dec_label_pc_d580.dec_label_pc_d580_crit_edge:    ; preds = %dec_label_pc_d580
  %v1_d588.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d580

dec_label_pc_d59c.loopexit:                       ; preds = %dec_label_pc_d580
  %extract.t9 = trunc i32 %v1_d590 to i8
  br label %dec_label_pc_d59c

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d59c.loopexit, %dec_label_pc_d528
  %v0_d5ac.off0 = phi i8 [ %extract.t9, %dec_label_pc_d59c.loopexit ], [ %extract.t10, %dec_label_pc_d528 ]
  %v2_d59c = load i32, i32* @global_var_1b1b4.114, align 4
  %v2_d5a0 = load i32, i32* @global_var_1b1e0.116, align 4
  %v3_d5a4 = mul i32 %v2_d59c, 16
  %v2_d5a8 = or i32 %v3_d5a4, 13
  %v3_d5ac = add i32 %v2_d5a8, %v2_d5a0
  %v4_d5ac = inttoptr i32 %v3_d5ac to i8*
  store i8 %v0_d5ac.off0, i8* %v4_d5ac, align 1
  %v2_d5b4 = load i32, i32* @global_var_1b1b4.114, align 4
  store i32 %v2_d5b4, i32* %lr.global-to-local, align 4
  %v4_d5b8 = load i8, i8* @global_var_1b1e5.119, align 1
  %v5_d5b8 = zext i8 %v4_d5b8 to i32
  %v3_d5bc = load i8, i8* bitcast (i8** @global_var_1b1e4.118 to i8*), align 4
  %v4_d5bc = zext i8 %v3_d5bc to i32
  %v2_d5c0 = load i32, i32* @global_var_1b1e0.116, align 4
  %v4_d5c4 = mul nuw nsw i32 %v5_d5b8, 256
  %v5_d5c4 = or i32 %v4_d5bc, %v4_d5c4
  store i32 %v5_d5c4, i32* %r2.global-to-local, align 4
  %v3_d5c8 = mul i32 %v2_d5b4, 16
  %v2_d5cc = add i32 %v2_d5c0, %v3_d5c8
  store i32 %v2_d5cc, i32* %r1.global-to-local, align 4
  %v3_d5d4 = add i32 %v2_d5cc, 9
  %v4_d5d4 = inttoptr i32 %v3_d5d4 to i8*
  store i8 %v4_d5b8, i8* %v4_d5d4, align 1
  %v0_d5d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_d5d8 = trunc i32 %v0_d5d8 to i8
  %v2_d5d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_d5d8 = add i32 %v2_d5d8, 8
  %v4_d5d8 = inttoptr i32 %v3_d5d8 to i8*
  store i8 %v1_d5d8, i8* %v4_d5d8, align 1
  %v4_d5dc = load i8, i8* @global_var_1b1e5.119, align 1
  %v5_d5dc = zext i8 %v4_d5dc to i32
  %v3_d5e0 = load i8, i8* bitcast (i8** @global_var_1b1e4.118 to i8*), align 4
  %v4_d5e0 = zext i8 %v3_d5e0 to i32
  %v4_d5e4 = mul nuw nsw i32 %v5_d5dc, 256
  %v5_d5e4 = or i32 %v4_d5e0, %v4_d5e4
  %v2_d5e8 = load i32, i32* %stack_var_-44, align 4
  %v2_d5ec = add i32 %v5_d5e4, %v2_d5e8
  store i32 %v2_d5ec, i32* %r3.global-to-local, align 4
  %v3_d5f011 = udiv i32 %v2_d5ec, 256
  %v1_d5f4 = trunc i32 %v3_d5f011 to i8
  %v2_d5f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d5f4 = add i32 %v2_d5f4, 11
  %v4_d5f4 = inttoptr i32 %v3_d5f4 to i8*
  store i8 %v1_d5f4, i8* %v4_d5f4, align 1
  %v0_d5f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d5f8 = trunc i32 %v0_d5f8 to i8
  %v2_d5f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_d5f8 = add i32 %v2_d5f8, 10
  %v4_d5f8 = inttoptr i32 %v3_d5f8 to i8*
  store i8 %v1_d5f8, i8* %v4_d5f8, align 1
  %v4_d5fc = load i8, i8* @global_var_1b1e5.119, align 1
  %v5_d5fc = zext i8 %v4_d5fc to i32
  %v3_d600 = load i8, i8* bitcast (i8** @global_var_1b1e4.118 to i8*), align 4
  %v4_d600 = zext i8 %v3_d600 to i32
  %v4_d604 = mul nuw nsw i32 %v5_d5fc, 256
  %v5_d604 = or i32 %v4_d600, %v4_d604
  %v2_d608 = load i32, i32* %stack_var_-44, align 4
  %v2_d60c = add i32 %v5_d604, %v2_d608
  store i32 %v2_d60c, i32* %r2.global-to-local, align 4
  %v0_d610 = load i32, i32* @r7, align 4
  %v3_d610 = mul i32 %v0_d610, 16
  %v1_d614 = load i32, i32* %sl.global-to-local, align 4
  %v2_d614 = add i32 %v1_d614, %v3_d610
  store i32 %v2_d614, i32* %r3.global-to-local, align 4
  %v0_d618 = load i32, i32* %lr.global-to-local, align 4
  %v1_d618 = add i32 %v0_d618, 1
  store i32 %v1_d618, i32* @lr, align 4
  %v3_d61c = sdiv i32 %v2_d60c, 256
  store i32 %v3_d61c, i32* %r1.global-to-local, align 4
  %v0_d620 = load i32, i32* %r6.global-to-local, align 4
  %v2_d620 = add i32 %v2_d614, 4
  %v3_d620 = inttoptr i32 %v2_d620 to i32*
  store i32 %v0_d620, i32* %v3_d620, align 4
  %v0_d624 = load i32, i32* @lr, align 4
  %v1_d624 = load i32, i32* @r8, align 4
  %v2_d624 = inttoptr i32 %v1_d624 to i32*
  store i32 %v0_d624, i32* %v2_d624, align 4
  %v0_d628 = load i32, i32* %r1.global-to-local, align 4
  %v1_d628 = trunc i32 %v0_d628 to i8
  store i8 %v1_d628, i8* @global_var_1b1e5.119, align 1
  %v0_d62c = load i32, i32* %r2.global-to-local, align 4
  %v1_d62c = trunc i32 %v0_d62c to i8
  store i8 %v1_d62c, i8* bitcast (i8** @global_var_1b1e4.118 to i8*), align 4
  store i32 %v3_d490, i32* @r4, align 4
  store i32 %v6_d490, i32* @r5, align 4
  store i32 %v9_d490, i32* @r6, align 4
  store i32 %v12_d490, i32* @r7, align 4
  store i32 %v15_d490, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1b1e4.118 to i32)

; uselistorder directives
  uselistorder i32 %v1_d590, { 0, 2, 3, 1 }
  uselistorder i32 %v1_d55c, { 1, 0 }
  uselistorder i32 %v1_d51c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_d4e8, { 1, 0 }
  uselistorder i32 %v3_d4ac, { 1, 2, 0 }
  uselistorder i32 %v3_d4a4, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32 -81, { 0, 2, 1, 3 }
  uselistorder i32 (i8*)* @function_ff58, { 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11030, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_d644(i32 %arg1) local_unnamed_addr {
dec_label_pc_d644:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp249 = call i32 @__decompiler_undefined_function_0()
  %tmp250 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-52 = alloca i8, align 1
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %tmp278 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-36 = alloca i32, align 4
  %v3_d644 = load i32, i32* @r4, align 4
  store i32 %v3_d644, i32* %stack_var_-36, align 4
  %v6_d644 = load i32, i32* @r5, align 4
  %v15_d644 = load i32, i32* @r8, align 4
  %v18_d644 = load i32, i32* @sb, align 4
  %v21_d644 = load i32, i32* @sl, align 4
  %v0_d650 = call i32 @function_1068c()
  store i32 %v0_d650, i32* %r0.global-to-local, align 4
  %v7_d654 = icmp eq i32 %v0_d650, -1
  %. = zext i1 %v7_d654 to i32
  %tmp281 = icmp slt i32 %v0_d650, 1
  %storemerge240 = select i1 %tmp281, i32 %., i32 1
  store i32 %storemerge240, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1b24c.110 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_d670 = icmp eq i32 %storemerge240, 0
  store i1 %v2_d670, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_d650, i32* @global_var_1b24c.110, align 4
  br i1 %v2_d670, label %dec_label_pc_d948, label %dec_label_pc_d67c

dec_label_pc_d67c:                                ; preds = %dec_label_pc_d644
  store i32 %v3_d644, i32* %r4.global-to-local, align 4
  store i32 %v6_d644, i32* %r5.global-to-local, align 4
  store i32 %v15_d644, i32* %r8.global-to-local, align 4
  store i32 %v18_d644, i32* @sb, align 4
  store i32 %v21_d644, i32* @sl, align 4
  ret i32 %v0_d650

dec_label_pc_d948:                                ; preds = %dec_label_pc_d644
  %v0_d948 = call i32 @function_101b0()
  store i32 %v0_d948, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b230.48 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_d948, i32* @global_var_1b230.48, align 4
  %v1_d954 = call i32 @function_d280(i32 %v0_d948)
  %v0_d958 = load i32, i32* @r4, align 4
  store i32 %v0_d958, i32* %r0.global-to-local, align 4
  %v1_d95c = inttoptr i32 %v0_d958 to i32*
  %v2_d95c = call i32 @function_10904(i32* %v1_d95c)
  store i32 ptrtoint (i32* @global_var_1b1e8.112 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_d95c, i32* @global_var_1b1e8.112, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_d970 = call i32 @function_10ee8(i32 256, i32 288)
  store i32 %v2_d970, i32* %lr.global-to-local, align 4
  %v0_d97c = load i32, i32* @r4, align 4
  store i32 %v0_d97c, i32* %stack_var_-48, align 4
  store i32 %v2_d970, i32* @global_var_1b244.124, align 4
  store i32 %v0_d97c, i32* %r3.global-to-local, align 4
  store i32 %v0_d97c, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_d97c, i32* %ip.global-to-local, align 4
  %v1_d994 = add i32 %v2_d970, 4
  store i32 %v1_d994, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d998

dec_label_pc_d998:                                ; preds = %dec_label_pc_d998.dec_label_pc_d998_crit_edge, %dec_label_pc_d948
  %v0_d9b0 = phi i32 [ %v0_d9b0.pre, %dec_label_pc_d998.dec_label_pc_d998_crit_edge ], [ %v0_d97c, %dec_label_pc_d948 ]
  %v0_d9a0 = phi i32 [ %v0_d9b8, %dec_label_pc_d998.dec_label_pc_d998_crit_edge ], [ %v0_d97c, %dec_label_pc_d948 ]
  %v1_d9a8 = phi i32 [ %v1_d9a8.pre, %dec_label_pc_d998.dec_label_pc_d998_crit_edge ], [ %v2_d970, %dec_label_pc_d948 ]
  %v3_d998 = mul i32 %v0_d9a0, 256
  store i32 %v3_d998, i32* %r2.global-to-local, align 4
  %v1_d9a0 = add i32 %v0_d9a0, 1
  store i32 %v1_d9a0, i32* %ip.global-to-local, align 4
  %v2_d9a4 = mul i32 %v0_d9a0, 288
  %v2_d9a8 = add i32 %v1_d9a8, 12
  %v2_d9b0 = add i32 %v2_d9a8, %v2_d9a4
  %v3_d9b0 = inttoptr i32 %v2_d9b0 to i32*
  store i32 %v0_d9b0, i32* %v3_d9b0, align 4
  %v0_d9b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_d9b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_d9b4 = inttoptr i32 %v1_d9b4 to i32*
  store i32 %v0_d9b4, i32* %v2_d9b4, align 4
  %v3_d9b4 = load i32, i32* %r1.global-to-local, align 4
  %v4_d9b4 = add i32 %v3_d9b4, 288
  store i32 %v4_d9b4, i32* %r1.global-to-local, align 4
  %v0_d9b8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_d9b8, i32* %r3.global-to-local, align 4
  %v7_d9bc = icmp sgt i32 %v1_d9a0, 255
  br i1 %v7_d9bc, label %dec_label_pc_d9c0, label %dec_label_pc_d998.dec_label_pc_d998_crit_edge

dec_label_pc_d998.dec_label_pc_d998_crit_edge:    ; preds = %dec_label_pc_d998
  %v1_d9a8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_d9b0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_d998

dec_label_pc_d9c0:                                ; preds = %dec_label_pc_d998
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_d9b8, i32* %stack_var_-48, align 4
  %v3_d9d0 = call i32 @function_10bfc(i32 2, i32 3, i32 6)
  store i32 %v3_d9d0, i32* %r0.global-to-local, align 4
  %v2_d9d8 = icmp eq i32 %v3_d9d0, -1
  store i1 %v2_d9d8, i1* %cpsr_c.global-to-local, align 1
  %v7_d9d8 = icmp eq i32 %v3_d9d0, -1
  store i1 %v7_d9d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d9d0, i32* @r4, align 4
  store i32 %v3_d9d0, i32* @global_var_1b248.126, align 4
  br i1 %v7_d9d8, label %dec_label_pc_eba8, label %dec_label_pc_d9e8

dec_label_pc_d9e8:                                ; preds = %dec_label_pc_d9c0
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_d9ec = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_d9ec, i32* @r2, align 4
  %v2_d9f0 = call i32 @function_1059c(i32 %v3_d9d0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_d9f8 = or i32 %v2_d9f0, 2048
  store i32 %v1_d9f8, i32* @r2, align 4
  %v0_d9fc = load i32, i32* @r4, align 4
  store i32 %v0_d9fc, i32* %r0.global-to-local, align 4
  %v2_da00 = call i32 @function_1059c(i32 %v0_d9fc, i32 4)
  %v2_da0c = load i32, i32* @global_var_1b248.126, align 4
  store i32 %v2_da0c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_da14 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_da14, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_da1c = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_da1c, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v6_da2c = call i32 @function_10bcc(i32 %v2_da0c, i32 %v0_da14, i32 3, i32* nonnull %stack_var_-48, i32 4)
  store i32 %v6_da2c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_da30 = icmp eq i32 %v6_da2c, 0
  store i1 %v2_da30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_da30, label %dec_label_pc_da38, label %dec_label_pc_eb9c

dec_label_pc_da38:                                ; preds = %dec_label_pc_d9e8, %dec_label_pc_da38
  %v0_da38 = call i32 @function_d228()
  %v3_da3c = mul i32 %v0_da38, 65536
  store i32 %v3_da3c, i32* %r0.global-to-local, align 4
  %v1_da48 = mul i32 %v0_da38, 256
  %v3_da4c = and i32 %v1_da48, 65280
  %tmp284 = udiv i32 %v0_da38, 256
  %v4_da50 = urem i32 %tmp284, 256
  %v5_da50 = or i32 %v4_da50, %v3_da4c
  store i32 %v5_da50, i32* %r3.global-to-local, align 4
  %v2_da54 = icmp ugt i32 %v5_da50, 1023
  store i1 %v2_da54, i1* %cpsr_c.global-to-local, align 1
  %v7_da54 = icmp eq i32 %v5_da50, 1024
  store i1 %v7_da54, i1* %cpsr_z.global-to-local, align 1
  %v3_da58 = icmp ult i32 %v5_da50, 1022
  br i1 %v3_da58, label %dec_label_pc_da38, label %dec_label_pc_da5c

dec_label_pc_da5c:                                ; preds = %dec_label_pc_da38
  %v5_da44.le = trunc i32 %v0_da38 to i8
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i8 69, i8* bitcast (i8** @global_var_1b1b8.128 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1b1bb.129 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1b1ba.130 to i8*), align 4
  %v0_da90 = call i32 @function_d228()
  %v1_da90 = trunc i32 %v0_da90 to i8
  store i32 %v0_da90, i32* %r0.global-to-local, align 4
  %v4_da98 = sext i8 %v5_da44.le to i32
  %v3_da9c = load i8, i8* @global_var_1b1d8.133, align 1
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %lr.global-to-local, align 4
  %v3_daa4239 = udiv i32 %v4_da98, 256
  store i8 64, i8* bitcast (i32* @global_var_1b1c0.134 to i8*), align 4
  %v2_dab0 = and i32 %v0_da90, 128
  %v3_dab0 = icmp ne i32 %v2_dab0, 0
  store i1 %v3_dab0, i1* %cpsr_c.global-to-local, align 1
  %v4_dab0238 = udiv i32 %v0_da90, 256
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_da9c, 16
  %v1_dab8 = zext i8 %tmp to i32
  store i32 6, i32* @r4, align 4
  %v1_dac0 = trunc i32 %v4_dab0238 to i8
  store i8 %v1_dac0, i8* bitcast (i32* @global_var_1b1bd.135 to i8*), align 4
  %v1_dac4 = or i32 %v1_dab8, 80
  store i32 %v1_dac4, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v1_dacc = trunc i32 %v1_dac4 to i8
  store i8 %v1_dacc, i8* @global_var_1b1d8.133, align 1
  %v1_dad0 = trunc i32 %v3_daa4239 to i8
  store i8 %v1_dad0, i8* bitcast (i32* @global_var_1b1cd.136 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1b1cf.137 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1b1c1.138 to i8*), align 4
  store i32 %v4_da98, i32* %ip.global-to-local, align 4
  store i8 %v1_da90, i8* bitcast (i32* @global_var_1b1bc.139 to i8*), align 4
  store i8 %v5_da44.le, i8* bitcast (i32* @global_var_1b1cc.132 to i8*), align 4
  %v0_dae8 = load i32, i32* @r6, align 4
  %v1_dae8 = trunc i32 %v0_dae8 to i8
  store i8 %v1_dae8, i8* bitcast (i32* @global_var_1b1ce.140 to i8*), align 4
  %v0_daec = call i32 @function_d228()
  %v1_daec = trunc i32 %v0_daec to i8
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* @lr, align 4
  %v3_daf4 = load i8, i8* @global_var_1b1d9.141, align 1
  %v4_daf4 = zext i8 %v3_daf4 to i32
  %v2_daf8 = and i32 %v0_daec, 128
  %v3_daf8 = icmp ne i32 %v2_daf8, 0
  store i1 %v3_daf8, i1* %cpsr_c.global-to-local, align 1
  %v4_daf8 = sdiv i32 %v0_daec, 256
  store i32 %v4_daf8, i32* %ip.global-to-local, align 4
  %v1_dafc = or i32 %v4_daf4, 2
  store i32 %v1_dafc, i32* %r3.global-to-local, align 4
  store i32 %v0_daec, i32* @r5, align 4
  %v1_db04 = trunc i32 %v4_daf8 to i8
  store i8 %v1_db04, i8* bitcast (i32* @global_var_1b1db.142 to i8*), align 4
  %v1_db08 = trunc i32 %v1_dafc to i8
  store i8 %v1_db08, i8* @global_var_1b1d9.141, align 1
  store i8 %v1_daec, i8* bitcast (i32* @global_var_1b1da.143 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_db1c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_db2c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12400.151 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_db3c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12400.151 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12408.153 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_db4c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([6 x i8]* @global_var_12408.153 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_db5c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r1.global-to-local, align 4
  %v5_db6c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12410.155 to i32), i32* %r1.global-to-local, align 4
  %v0_db78 = load i32, i32* @r4, align 4
  store i32 %v0_db78, i32* %r2.global-to-local, align 4
  %v4_db7c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12410.155 to i32), i32 %v0_db78)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12418.157 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_db8c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([8 x i8]* @global_var_12418.157 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12420.159 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_db9c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([8 x i8]* @global_var_12420.159 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12428.161 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_dbac = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([9 x i8]* @global_var_12428.161 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12434.163 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_dbbc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12434.163 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1243c.165 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_dbcc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_1243c.165 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_12420.159 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12420.159 to i32), i32* %r1.global-to-local, align 4
  %v5_dbdc = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_12420.159 to i32), i32 ptrtoint ([8 x i8]* @global_var_12420.159 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_12420.159 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_dbec = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_12420.159 to i32), i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), i32* %r1.global-to-local, align 4
  %v5_dbfc = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_dc0c = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12850.169 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_dc1c = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), i32 ptrtoint (i32* @global_var_12850.169 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12434.163 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_dc2c = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), i32 ptrtoint (i32* @global_var_12434.163 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_dc3c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1244c.171 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_dc4c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_1244c.171 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r1.global-to-local, align 4
  %v5_dc5c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12458.173 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_dc6c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12458.173 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_dc7c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), i32* %r1.global-to-local, align 4
  %v5_dc8c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12434.163 to i32), i32* %r1.global-to-local, align 4
  %v0_dc98 = load i32, i32* @r4, align 4
  store i32 %v0_dc98, i32* %r2.global-to-local, align 4
  %v4_dc9c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), i32 ptrtoint (i32* @global_var_12434.163 to i32), i32 %v0_dc98)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12468.177 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_dcac = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_12468.177 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12470.179 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_dcbc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_12470.179 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125c4.181 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_dccc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_125c4.181 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1247c.183 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_dcdc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_1247c.183 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125c4.181 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_dcec = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_125c4.181 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12488.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_dcfc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12488.185 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1244c.171 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_dd0c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([9 x i8]* @global_var_1244c.171 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12850.169 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_dd1c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12850.169 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12490.187 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_dd2c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12490.187 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_12498.189 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_dd3c = call i32 @function_d490(i32 ptrtoint ([14 x i8]* @global_var_12498.189 to i32), i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_12498.189 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_124a8.191 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_dd4c = call i32 @function_d490(i32 ptrtoint ([14 x i8]* @global_var_12498.189 to i32), i32 ptrtoint ([7 x i8]* @global_var_124a8.191 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_12498.189 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_124b0.193 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_dd5c = call i32 @function_d490(i32 ptrtoint ([14 x i8]* @global_var_12498.189 to i32), i32 ptrtoint ([4 x i8]* @global_var_124b0.193 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_12498.189 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_124b4.195 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_dd6c = call i32 @function_d490(i32 ptrtoint ([14 x i8]* @global_var_12498.189 to i32), i32 ptrtoint ([7 x i8]* @global_var_124b4.195 to i32), i32 13)
  store i32 ptrtoint ([8 x i8]* @global_var_124bc.197 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_124bc.197 to i32), i32* %r1.global-to-local, align 4
  %v5_dd7c = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_124bc.197 to i32), i32 ptrtoint ([8 x i8]* @global_var_124bc.197 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_124bc.197 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_dd8c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([8 x i8]* @global_var_124bc.197 to i32), i32 7)
  store i32 ptrtoint ([11 x i8]* @global_var_124c4.199 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_124c4.199 to i32), i32* %r1.global-to-local, align 4
  %v5_dd9c = call i32 @function_d490(i32 ptrtoint ([11 x i8]* @global_var_124c4.199 to i32), i32 ptrtoint ([11 x i8]* @global_var_124c4.199 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_124d0.201 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_ddac = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_124d0.201 to i32), i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_124d0.201 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_124d0.201 to i32), i32* %r1.global-to-local, align 4
  %v5_ddbc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_124d0.201 to i32), i32 ptrtoint ([6 x i8]* @global_var_124d0.201 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_124d0.201 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12458.173 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_ddcc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_124d0.201 to i32), i32 ptrtoint (i32* @global_var_12458.173 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_124d0.201 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12434.163 to i32), i32* %r1.global-to-local, align 4
  %v0_ddd8 = load i32, i32* @r4, align 4
  store i32 %v0_ddd8, i32* %r2.global-to-local, align 4
  %v4_dddc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_124d0.201 to i32), i32 ptrtoint (i32* @global_var_12434.163 to i32), i32 %v0_ddd8)
  store i32 ptrtoint (i32* @global_var_124d8.203 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1244c.171 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_ddec = call i32 @function_d490(i32 ptrtoint (i32* @global_var_124d8.203 to i32), i32 ptrtoint ([9 x i8]* @global_var_1244c.171 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_124e0.205 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12850.169 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_ddfc = call i32 @function_d490(i32 ptrtoint ([14 x i8]* @global_var_124e0.205 to i32), i32 ptrtoint (i32* @global_var_12850.169 to i32), i32 13)
  store i32 ptrtoint (i32* @global_var_12488.185 to i32), i32* %r0.global-to-local, align 4
  %v0_de04 = load i32, i32* @r4, align 4
  store i32 %v0_de04, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12488.185 to i32), i32* %r1.global-to-local, align 4
  %v3_de0c = call i32 @function_d490(i32 ptrtoint (i32* @global_var_12488.185 to i32), i32 ptrtoint (i32* @global_var_12488.185 to i32), i32 %v0_de04)
  store i32 ptrtoint (i32* @global_var_12410.155 to i32), i32* %r0.global-to-local, align 4
  %v0_de14 = load i32, i32* @r4, align 4
  store i32 %v0_de14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12410.155 to i32), i32* %r1.global-to-local, align 4
  %v3_de1c = call i32 @function_d490(i32 ptrtoint (i32* @global_var_12410.155 to i32), i32 ptrtoint (i32* @global_var_12410.155 to i32), i32 %v0_de14)
  store i32 ptrtoint ([5 x i8]* @global_var_124f0.207 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_124f0.207 to i32), i32* %r1.global-to-local, align 4
  %v5_de2c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_124f0.207 to i32), i32 ptrtoint ([5 x i8]* @global_var_124f0.207 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_124f0.207 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_de3c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_124f0.207 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_124f8.209 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v4_de4c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_124f8.209 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12500.211 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_de5c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12500.211 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12508.213 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_de6c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12508.213 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12510.215 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_de7c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([6 x i8]* @global_var_12510.215 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12518.217 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_de8c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_12518.217 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12520.219 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_de9c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([6 x i8]* @global_var_12520.219 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12528.221 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_deac = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([9 x i8]* @global_var_12528.221 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12534.223 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_debc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12534.223 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12544.225 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_decc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12544.225 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12554.227 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_dedc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([7 x i8]* @global_var_12554.227 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1255c.229 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_deec = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_1255c.229 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12564.231 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_defc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([9 x i8]* @global_var_12564.231 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_df0c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12570.233 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_df1c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([8 x i8]* @global_var_12570.233 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12578.235 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_df2c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12578.235 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12584.237 to i32), i32* %r1.global-to-local, align 4
  %v0_df38 = load i32, i32* @r4, align 4
  store i32 %v0_df38, i32* %r2.global-to-local, align 4
  %v4_df3c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12584.237 to i32), i32 %v0_df38)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1258c.239 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_df4c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_1258c.239 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12850.169 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_df5c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_12850.169 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12458.173 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_df6c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_12458.173 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1243c.165 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_df7c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_1243c.165 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12434.163 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_df8c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_12434.163 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12544.225 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_df9c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_12544.225 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12594.241 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_dfac = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_12594.241 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12468.177 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_dfbc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([5 x i8]* @global_var_12468.177 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_124a8.191 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_dfcc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_124a8.191 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1242c.243 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_dfdc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([5 x i8]* @global_var_1242c.243 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125a0.245 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_dfec = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_125a0.245 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_125ac.247 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_dffc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_125ac.247 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_125b4.249 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e00c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([4 x i8]* @global_var_125b4.249 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125b8.251 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e01c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_125b8.251 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125c0.253 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e02c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_125c0.253 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_125cc.255 to i32), i32* %r1.global-to-local, align 4
  %v0_e038 = load i32, i32* @r4, align 4
  store i32 %v0_e038, i32* %r2.global-to-local, align 4
  %v5_e03c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_125cc.255 to i32), i32 %v0_e038)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_125d4.257 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e04c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_125d4.257 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125e0.259 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e05c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_125e0.259 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125e8.261 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e06c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_125e8.261 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125f0.263 to i32), i32* %r1.global-to-local, align 4
  %v0_e078 = load i32, i32* @r4, align 4
  store i32 %v0_e078, i32* %r2.global-to-local, align 4
  %v4_e07c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_125f0.263 to i32), i32 %v0_e078)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125f8.265 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e08c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_125f8.265 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12600.267 to i32), i32* %r1.global-to-local, align 4
  %v0_e098 = load i32, i32* @r4, align 4
  store i32 %v0_e098, i32* %r2.global-to-local, align 4
  %v5_e09c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_12600.267 to i32), i32 %v0_e098)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12608.269 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e0ac = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([8 x i8]* @global_var_12608.269 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12610.271 to i32), i32* %r1.global-to-local, align 4
  %v0_e0b8 = load i32, i32* @r4, align 4
  store i32 %v0_e0b8, i32* %r2.global-to-local, align 4
  %v4_e0bc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_12610.271 to i32), i32 %v0_e0b8)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_124b4.195 to i32), i32* %r1.global-to-local, align 4
  %v0_e0c8 = load i32, i32* @r4, align 4
  store i32 %v0_e0c8, i32* %r2.global-to-local, align 4
  %v5_e0cc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_124b4.195 to i32), i32 %v0_e0c8)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12618.273 to i32), i32* %r1.global-to-local, align 4
  %v0_e0d8 = load i32, i32* @r4, align 4
  store i32 %v0_e0d8, i32* %r2.global-to-local, align 4
  %v4_e0dc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_12618.273 to i32), i32 %v0_e0d8)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12620.275 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e0ec = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_12620.275 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12628.277 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e0fc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_12628.277 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_12634.279 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12634.279 to i32), i32* %r1.global-to-local, align 4
  %v5_e10c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12634.279 to i32), i32 ptrtoint ([6 x i8]* @global_var_12634.279 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_1242c.243 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1242c.243 to i32), i32* %r1.global-to-local, align 4
  %v5_e11c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_1242c.243 to i32), i32 ptrtoint ([5 x i8]* @global_var_1242c.243 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_1242c.243 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e12c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_1242c.243 to i32), i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1272c.281 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e13c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_1272c.281 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1263c.283 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e14c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_1263c.283 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_12644.285 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e15c = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_12644.285 to i32), i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_12644.285 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12644.285 to i32), i32* %r1.global-to-local, align 4
  %v5_e16c = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_12644.285 to i32), i32 ptrtoint ([8 x i8]* @global_var_12644.285 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_1264c.287 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_e17c = call i32 @function_d490(i32 ptrtoint ([4 x i8]* @global_var_1264c.287 to i32), i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 3)
  store i32 ptrtoint ([8 x i8]* @global_var_12650.289 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12658.291 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e18c = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_12650.289 to i32), i32 ptrtoint ([7 x i8]* @global_var_12658.291 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_12660.293 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_12660.293 to i32), i32* %r1.global-to-local, align 4
  %v5_e19c = call i32 @function_d490(i32 ptrtoint ([4 x i8]* @global_var_12660.293 to i32), i32 ptrtoint ([4 x i8]* @global_var_12660.293 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12664.295 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e1ac = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12664.295 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12670.297 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_e1bc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_12670.297 to i32), i32 4)
  store i32 ptrtoint ([7 x i8]* @global_var_12678.299 to i32), i32* %r0.global-to-local, align 4
  %v0_e1c4 = load i32, i32* @r4, align 4
  store i32 %v0_e1c4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12678.299 to i32), i32* %r1.global-to-local, align 4
  %v5_e1cc = call i32 @function_d490(i32 ptrtoint ([7 x i8]* @global_var_12678.299 to i32), i32 ptrtoint ([7 x i8]* @global_var_12678.299 to i32), i32 %v0_e1c4)
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12678.299 to i32), i32* %r1.global-to-local, align 4
  %v0_e1d8 = load i32, i32* @r4, align 4
  store i32 %v0_e1d8, i32* %r2.global-to-local, align 4
  %v4_e1dc = call i32 @function_d490(i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 ptrtoint ([7 x i8]* @global_var_12678.299 to i32), i32 %v0_e1d8)
  store i32 ptrtoint (i32* @global_var_12680.301 to i32), i32* %r0.global-to-local, align 4
  %v0_e1e4 = load i32, i32* @r4, align 4
  store i32 %v0_e1e4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12680.301 to i32), i32* %r1.global-to-local, align 4
  %v3_e1ec = call i32 @function_d490(i32 ptrtoint (i32* @global_var_12680.301 to i32), i32 ptrtoint (i32* @global_var_12680.301 to i32), i32 %v0_e1e4)
  store i32 ptrtoint ([6 x i8]* @global_var_12688.303 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12420.159 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e1fc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12688.303 to i32), i32 ptrtoint ([8 x i8]* @global_var_12420.159 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_12690.305 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e20c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12690.305 to i32), i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12690.305 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12468.177 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e21c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12690.305 to i32), i32 ptrtoint ([5 x i8]* @global_var_12468.177 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12690.305 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e22c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12690.305 to i32), i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 5)
  store i32 ptrtoint (i32* @global_var_12698.307 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v3_e23c = call i32 @function_d490(i32 ptrtoint (i32* @global_var_12698.307 to i32), i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 5)
  store i32 ptrtoint ([9 x i8]* @global_var_126a0.309 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_126ac.311 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e24c = call i32 @function_d490(i32 ptrtoint ([9 x i8]* @global_var_126a0.309 to i32), i32 ptrtoint ([7 x i8]* @global_var_126ac.311 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_126b4.313 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_126b4.313 to i32), i32* %r1.global-to-local, align 4
  %v5_e25c = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_126b4.313 to i32), i32 ptrtoint ([8 x i8]* @global_var_126b4.313 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_126bc.315 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_126bc.315 to i32), i32* %r1.global-to-local, align 4
  %v5_e26c = call i32 @function_d490(i32 ptrtoint ([7 x i8]* @global_var_126bc.315 to i32), i32 ptrtoint ([7 x i8]* @global_var_126bc.315 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_126bc.315 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_126c4.317 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e27c = call i32 @function_d490(i32 ptrtoint ([7 x i8]* @global_var_126bc.315 to i32), i32 ptrtoint ([8 x i8]* @global_var_126c4.317 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_126cc.319 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([10 x i8]* @global_var_126d4.321 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e28c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_126cc.319 to i32), i32 ptrtoint ([10 x i8]* @global_var_126d4.321 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_126cc.319 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12620.275 to i32), i32* %r1.global-to-local, align 4
  %v0_e298 = load i32, i32* @r4, align 4
  store i32 %v0_e298, i32* %r2.global-to-local, align 4
  %v5_e29c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_126cc.319 to i32), i32 ptrtoint ([7 x i8]* @global_var_12620.275 to i32), i32 %v0_e298)
  store i32 ptrtoint ([5 x i8]* @global_var_126e0.323 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_126e0.323 to i32), i32* %r1.global-to-local, align 4
  %v5_e2ac = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_126e0.323 to i32), i32 ptrtoint ([5 x i8]* @global_var_126e0.323 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_126e8.325 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_126f0.327 to i32), i32* %r1.global-to-local, align 4
  %v0_e2b8 = load i32, i32* @r4, align 4
  store i32 %v0_e2b8, i32* %r2.global-to-local, align 4
  %v5_e2bc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_126e8.325 to i32), i32 ptrtoint ([7 x i8]* @global_var_126f0.327 to i32), i32 %v0_e2b8)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_126f0.327 to i32), i32* %r1.global-to-local, align 4
  %v0_e2c8 = load i32, i32* @r4, align 4
  store i32 %v0_e2c8, i32* %r2.global-to-local, align 4
  %v5_e2cc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([7 x i8]* @global_var_126f0.327 to i32), i32 %v0_e2c8)
  store i32 ptrtoint ([3 x i8]* @global_var_126c0.329 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_126f8.331 to i32), i32* %r1.global-to-local, align 4
  %v0_e2d8 = load i32, i32* @r4, align 4
  store i32 %v0_e2d8, i32* %r2.global-to-local, align 4
  %v5_e2dc = call i32 @function_d490(i32 ptrtoint ([3 x i8]* @global_var_126c0.329 to i32), i32 ptrtoint ([7 x i8]* @global_var_126f8.331 to i32), i32 %v0_e2d8)
  store i32 ptrtoint ([7 x i8]* @global_var_126f8.331 to i32), i32* %r0.global-to-local, align 4
  %v0_e2e4 = load i32, i32* @r4, align 4
  store i32 %v0_e2e4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_126f8.331 to i32), i32* %r1.global-to-local, align 4
  %v5_e2ec = call i32 @function_d490(i32 ptrtoint ([7 x i8]* @global_var_126f8.331 to i32), i32 ptrtoint ([7 x i8]* @global_var_126f8.331 to i32), i32 %v0_e2e4)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12700.333 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e2fc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint (i32* @global_var_12700.333 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12700.333 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e30c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12700.333 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1270c.335 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_e31c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([5 x i8]* @global_var_1270c.335 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12714.337 to i32), i32* %r1.global-to-local, align 4
  %v0_e328 = load i32, i32* @r4, align 4
  store i32 %v0_e328, i32* %r2.global-to-local, align 4
  %v5_e32c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([7 x i8]* @global_var_12714.337 to i32), i32 %v0_e328)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1271c.339 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e33c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_1271c.339 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12728.341 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e34c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12728.341 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12730.343 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e35c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12730.343 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1273c.345 to i32), i32* %r1.global-to-local, align 4
  %v0_e368 = load i32, i32* @r4, align 4
  store i32 %v0_e368, i32* %r2.global-to-local, align 4
  %v4_e36c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_1273c.345 to i32), i32 %v0_e368)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12744.347 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e37c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12744.347 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12750.349 to i32), i32* %r1.global-to-local, align 4
  %v0_e388 = load i32, i32* @r4, align 4
  store i32 %v0_e388, i32* %r2.global-to-local, align 4
  %v4_e38c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12750.349 to i32), i32 %v0_e388)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12758.351 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e39c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12758.351 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12760.353 to i32), i32* %r1.global-to-local, align 4
  %v0_e3a8 = load i32, i32* @r4, align 4
  store i32 %v0_e3a8, i32* %r2.global-to-local, align 4
  %v5_e3ac = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([7 x i8]* @global_var_12760.353 to i32), i32 %v0_e3a8)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12768.355 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e3bc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12768.355 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12770.357 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e3cc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_12770.357 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1277c.359 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e3dc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint ([9 x i8]* @global_var_1277c.359 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12788.361 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e3ec = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_12788.361 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12788.361 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12788.361 to i32), i32* %r1.global-to-local, align 4
  %v5_e3fc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12788.361 to i32), i32 ptrtoint ([6 x i8]* @global_var_12788.361 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_12790.363 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12790.363 to i32), i32* %r1.global-to-local, align 4
  %v5_e40c = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_12790.363 to i32), i32 ptrtoint ([8 x i8]* @global_var_12790.363 to i32), i32 7)
  store i32 ptrtoint (i32* @global_var_12798.365 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_124b4.195 to i32), i32* %r1.global-to-local, align 4
  %v0_e418 = load i32, i32* @r4, align 4
  store i32 %v0_e418, i32* %r2.global-to-local, align 4
  %v4_e41c = call i32 @function_d490(i32 ptrtoint (i32* @global_var_12798.365 to i32), i32 ptrtoint ([7 x i8]* @global_var_124b4.195 to i32), i32 %v0_e418)
  store i32 ptrtoint ([4 x i8]* @global_var_127a0.367 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1244c.171 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e42c = call i32 @function_d490(i32 ptrtoint ([4 x i8]* @global_var_127a0.367 to i32), i32 ptrtoint ([9 x i8]* @global_var_1244c.171 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_127a4.369 to i32), i32* %r0.global-to-local, align 4
  %v0_e434 = load i32, i32* @r4, align 4
  store i32 %v0_e434, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_127a4.369 to i32), i32* %r1.global-to-local, align 4
  %v5_e43c = call i32 @function_d490(i32 ptrtoint ([7 x i8]* @global_var_127a4.369 to i32), i32 ptrtoint ([7 x i8]* @global_var_127a4.369 to i32), i32 %v0_e434)
  store i32 ptrtoint ([6 x i8]* @global_var_127ac.371 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_127b4.373 to i32), i32* %r1.global-to-local, align 4
  %v0_e448 = load i32, i32* @r4, align 4
  store i32 %v0_e448, i32* %r2.global-to-local, align 4
  %v4_e44c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_127ac.371 to i32), i32 ptrtoint (i32* @global_var_127b4.373 to i32), i32 %v0_e448)
  store i32 ptrtoint ([7 x i8]* @global_var_127bc.375 to i32), i32* %r0.global-to-local, align 4
  %v0_e454 = load i32, i32* @r4, align 4
  store i32 %v0_e454, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_127bc.375 to i32), i32* %r1.global-to-local, align 4
  %v5_e45c = call i32 @function_d490(i32 ptrtoint ([7 x i8]* @global_var_127bc.375 to i32), i32 ptrtoint ([7 x i8]* @global_var_127bc.375 to i32), i32 %v0_e454)
  store i32 ptrtoint ([6 x i8]* @global_var_127c4.377 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_127c4.377 to i32), i32* %r1.global-to-local, align 4
  %v5_e46c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_127c4.377 to i32), i32 ptrtoint ([6 x i8]* @global_var_127c4.377 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_127cc.379 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_127cc.379 to i32), i32* %r1.global-to-local, align 4
  %v5_e47c = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_127cc.379 to i32), i32 ptrtoint ([8 x i8]* @global_var_127cc.379 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_127d4.381 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_127d4.381 to i32), i32* %r1.global-to-local, align 4
  %v5_e48c = call i32 @function_d490(i32 ptrtoint ([4 x i8]* @global_var_127d4.381 to i32), i32 ptrtoint ([4 x i8]* @global_var_127d4.381 to i32), i32 3)
  store i32 ptrtoint ([4 x i8]* @global_var_127d8.383 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_127d8.383 to i32), i32* %r1.global-to-local, align 4
  %v5_e49c = call i32 @function_d490(i32 ptrtoint ([4 x i8]* @global_var_127d8.383 to i32), i32 ptrtoint ([4 x i8]* @global_var_127d8.383 to i32), i32 3)
  store i32 ptrtoint (i32* @global_var_127dc.385 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_127dc.385 to i32), i32* %r1.global-to-local, align 4
  %v3_e4ac = call i32 @function_d490(i32 ptrtoint (i32* @global_var_127dc.385 to i32), i32 ptrtoint (i32* @global_var_127dc.385 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_127e4.387 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_127e4.387 to i32), i32* %r1.global-to-local, align 4
  %v5_e4bc = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_127e4.387 to i32), i32 ptrtoint ([5 x i8]* @global_var_127e4.387 to i32), i32 4)
  store i32 ptrtoint ([7 x i8]* @global_var_127ec.389 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r1.global-to-local, align 4
  %v0_e4c8 = load i32, i32* @r4, align 4
  store i32 %v0_e4c8, i32* %r2.global-to-local, align 4
  %v4_e4cc = call i32 @function_d490(i32 ptrtoint ([7 x i8]* @global_var_127ec.389 to i32), i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 %v0_e4c8)
  store i32 ptrtoint ([6 x i8]* @global_var_127f4.391 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125c4.181 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_e4dc = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_127f4.391 to i32), i32 ptrtoint (i32* @global_var_125c4.181 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_127f4.391 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12434.163 to i32), i32* %r1.global-to-local, align 4
  %v0_e4e8 = load i32, i32* @r4, align 4
  store i32 %v0_e4e8, i32* %r2.global-to-local, align 4
  %v4_e4ec = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_127f4.391 to i32), i32 ptrtoint (i32* @global_var_12434.163 to i32), i32 %v0_e4e8)
  store i32 ptrtoint ([7 x i8]* @global_var_127fc.393 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r1.global-to-local, align 4
  %v0_e4f8 = load i32, i32* @r4, align 4
  store i32 %v0_e4f8, i32* %r2.global-to-local, align 4
  %v4_e4fc = call i32 @function_d490(i32 ptrtoint ([7 x i8]* @global_var_127fc.393 to i32), i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 %v0_e4f8)
  store i32 ptrtoint ([7 x i8]* @global_var_127fc.393 to i32), i32* %r0.global-to-local, align 4
  %v0_e504 = load i32, i32* @r4, align 4
  store i32 %v0_e504, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_127fc.393 to i32), i32* %r1.global-to-local, align 4
  %v5_e50c = call i32 @function_d490(i32 ptrtoint ([7 x i8]* @global_var_127fc.393 to i32), i32 ptrtoint ([7 x i8]* @global_var_127fc.393 to i32), i32 %v0_e504)
  store i32 ptrtoint ([5 x i8]* @global_var_12804.395 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12804.395 to i32), i32* %r1.global-to-local, align 4
  %v5_e51c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12804.395 to i32), i32 ptrtoint ([5 x i8]* @global_var_12804.395 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_1280c.397 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e52c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_1280c.397 to i32), i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_12814.399 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_e53c = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_12814.399 to i32), i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_1281c.401 to i32), i32* %r0.global-to-local, align 4
  %v0_e544 = load i32, i32* @r4, align 4
  store i32 %v0_e544, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1281c.401 to i32), i32* %r1.global-to-local, align 4
  %v5_e54c = call i32 @function_d490(i32 ptrtoint ([7 x i8]* @global_var_1281c.401 to i32), i32 ptrtoint ([7 x i8]* @global_var_1281c.401 to i32), i32 %v0_e544)
  store i32 ptrtoint ([6 x i8]* @global_var_12824.403 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1282c.405 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e55c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12824.403 to i32), i32 ptrtoint ([6 x i8]* @global_var_1282c.405 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_12834.407 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1283c.409 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_e56c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_12834.407 to i32), i32 ptrtoint ([5 x i8]* @global_var_1283c.409 to i32), i32 5)
  store i32 ptrtoint (i32* @global_var_12844.411 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12844.411 to i32), i32* %r1.global-to-local, align 4
  %v3_e57c = call i32 @function_d490(i32 ptrtoint (i32* @global_var_12844.411 to i32), i32 ptrtoint (i32* @global_var_12844.411 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_125d8.413 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1284c.415 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e58c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_125d8.413 to i32), i32 ptrtoint (i32* @global_var_1284c.415 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_12858.417 to i32), i32* %r0.global-to-local, align 4
  %v0_e594 = load i32, i32* @r4, align 4
  store i32 %v0_e594, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12858.417 to i32), i32* %r1.global-to-local, align 4
  %v5_e59c = call i32 @function_d490(i32 ptrtoint ([7 x i8]* @global_var_12858.417 to i32), i32 ptrtoint ([7 x i8]* @global_var_12858.417 to i32), i32 %v0_e594)
  store i32 ptrtoint (i32* @global_var_12860.419 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12868.421 to i32), i32* %r1.global-to-local, align 4
  %v0_e5a8 = load i32, i32* @r4, align 4
  store i32 %v0_e5a8, i32* %r2.global-to-local, align 4
  %v4_e5ac = call i32 @function_d490(i32 ptrtoint (i32* @global_var_12860.419 to i32), i32 ptrtoint ([7 x i8]* @global_var_12868.421 to i32), i32 %v0_e5a8)
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12870.423 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e5bc = call i32 @function_d490(i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 ptrtoint ([9 x i8]* @global_var_12870.423 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1287c.425 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_e5cc = call i32 @function_d490(i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 ptrtoint ([9 x i8]* @global_var_1287c.425 to i32), i32 8)
  %v0_e5d0 = load i32, i32* @r4, align 4
  store i32 %v0_e5d0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12888.427 to i32), i32* %r1.global-to-local, align 4
  %v4_e5dc = call i32 @function_d490(i32 ptrtoint (i32* @global_var_128d0.147 to i32), i32 ptrtoint ([7 x i8]* @global_var_12888.427 to i32), i32 %v0_e5d0)
  store i32 ptrtoint (i32* @global_var_12890.429 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1289c.431 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v4_e5ec = call i32 @function_d490(i32 ptrtoint (i32* @global_var_12890.429 to i32), i32 ptrtoint ([5 x i8]* @global_var_1289c.431 to i32), i32 11)
  store i32 ptrtoint ([9 x i8]* @global_var_128a4.433 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_128a4.433 to i32), i32* %r1.global-to-local, align 4
  %v5_e5fc = call i32 @function_d490(i32 ptrtoint ([9 x i8]* @global_var_128a4.433 to i32), i32 ptrtoint ([9 x i8]* @global_var_128a4.433 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_128b0.435 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_128b0.435 to i32), i32* %r1.global-to-local, align 4
  %v5_e60c = call i32 @function_d490(i32 ptrtoint ([9 x i8]* @global_var_128b0.435 to i32), i32 ptrtoint ([9 x i8]* @global_var_128b0.435 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_128bc.437 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_128bc.437 to i32), i32* %r1.global-to-local, align 4
  %v5_e61c = call i32 @function_d490(i32 ptrtoint ([9 x i8]* @global_var_128bc.437 to i32), i32 ptrtoint ([9 x i8]* @global_var_128bc.437 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_125c0.253 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_125c0.253 to i32), i32* %r1.global-to-local, align 4
  %v3_e62c = call i32 @function_d490(i32 ptrtoint (i32* @global_var_125c0.253 to i32), i32 ptrtoint (i32* @global_var_125c0.253 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_128c8.439 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128c8.439 to i32), i32* %r1.global-to-local, align 4
  %v3_e63c = call i32 @function_d490(i32 ptrtoint (i32* @global_var_128c8.439 to i32), i32 ptrtoint (i32* @global_var_128c8.439 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_128d4.441 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_128d4.441 to i32), i32* %r1.global-to-local, align 4
  %v5_e64c = call i32 @function_d490(i32 ptrtoint ([9 x i8]* @global_var_128d4.441 to i32), i32 ptrtoint ([9 x i8]* @global_var_128d4.441 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_128e0.443 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_128e0.443 to i32), i32* %r1.global-to-local, align 4
  %v5_e65c = call i32 @function_d490(i32 ptrtoint ([9 x i8]* @global_var_128e0.443 to i32), i32 ptrtoint ([9 x i8]* @global_var_128e0.443 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_128ec.445 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_124c4.199 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_e66c = call i32 @function_d490(i32 ptrtoint ([8 x i8]* @global_var_128ec.445 to i32), i32 ptrtoint ([11 x i8]* @global_var_124c4.199 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128f4.447 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_e67c = call i32 @function_d490(i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), i32 ptrtoint (i32* @global_var_128f4.447 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_127ac.371 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12904.449 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_e68c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_127ac.371 to i32), i32 ptrtoint (i32* @global_var_12904.449 to i32), i32 14)
  store i32 ptrtoint ([10 x i8]* @global_var_12914.451 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12920.453 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e69c = call i32 @function_d490(i32 ptrtoint ([10 x i8]* @global_var_12914.451 to i32), i32 ptrtoint (i32* @global_var_12920.453 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_1292c.455 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_12938.457 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_e6ac = call i32 @function_d490(i32 ptrtoint ([10 x i8]* @global_var_1292c.455 to i32), i32 ptrtoint ([11 x i8]* @global_var_12938.457 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_12944.459 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12700.333 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e6bc = call i32 @function_d490(i32 ptrtoint ([10 x i8]* @global_var_12944.459 to i32), i32 ptrtoint (i32* @global_var_12700.333 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_12950.461 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12700.333 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_e6cc = call i32 @function_d490(i32 ptrtoint ([10 x i8]* @global_var_12950.461 to i32), i32 ptrtoint (i32* @global_var_12700.333 to i32), i32 10)
  store i32 ptrtoint (i32* @global_var_12890.429 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1295c.463 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v3_e6dc = call i32 @function_d490(i32 ptrtoint (i32* @global_var_12890.429 to i32), i32 ptrtoint (i32* @global_var_1295c.463 to i32), i32 11)
  store i32 ptrtoint ([13 x i8]* @global_var_12968.465 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([13 x i8]* @global_var_12978.467 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e6ec = call i32 @function_d490(i32 ptrtoint ([13 x i8]* @global_var_12968.465 to i32), i32 ptrtoint ([13 x i8]* @global_var_12978.467 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_12988.469 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12990.471 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_e6fc = call i32 @function_d490(i32 ptrtoint ([7 x i8]* @global_var_12988.469 to i32), i32 ptrtoint (i32* @global_var_12990.471 to i32), i32 13)
  store i32 ptrtoint ([9 x i8]* @global_var_12998.473 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_129a4.475 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_e70c = call i32 @function_d490(i32 ptrtoint ([9 x i8]* @global_var_12998.473 to i32), i32 ptrtoint ([8 x i8]* @global_var_129a4.475 to i32), i32 15)
  store i32 ptrtoint ([12 x i8]* @global_var_129ac.477 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_129b8.479 to i32), i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_e71c = call i32 @function_d490(i32 ptrtoint ([12 x i8]* @global_var_129ac.477 to i32), i32 ptrtoint (i32* @global_var_129b8.479 to i32), i32 20)
  store i32 ptrtoint ([6 x i8]* @global_var_129c4.481 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_129b8.479 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_e72c = call i32 @function_d490(i32 ptrtoint ([6 x i8]* @global_var_129c4.481 to i32), i32 ptrtoint (i32* @global_var_129b8.479 to i32), i32 14)
  %v2_e734 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_e734, i32* %r0.global-to-local, align 4
  %v2_e738 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_e738, i32* %r1.global-to-local, align 4
  %tmp285 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_e744

dec_label_pc_e744:                                ; preds = %dec_label_pc_ed8c, %dec_label_pc_da5c
  %v0_ea64 = phi i32 [ %v2_e734, %dec_label_pc_da5c ], [ %stack_var_-1872.1, %dec_label_pc_ed8c ]
  %stack_var_-1868.0 = phi i8 [ %v5_da44.le, %dec_label_pc_da5c ], [ %stack_var_-1868.1, %dec_label_pc_ed8c ]
  %stack_var_-1876.0 = phi i8* [ %tmp285, %dec_label_pc_da5c ], [ %stack_var_-1876.1, %dec_label_pc_ed8c ]
  store i32 ptrtoint (i32* @global_var_1b1e8.112 to i32), i32* %r2.global-to-local, align 4
  %v2_e748 = load i32, i32* @global_var_1b1e8.112, align 4
  store i32 %v2_e748, i32* %r8.global-to-local, align 4
  %v0_e74c = load i32, i32* @fp, align 4
  %v3_e74c = icmp uge i32 %v0_e74c, %v2_e748
  store i1 %v3_e74c, i1* %cpsr_c.global-to-local, align 1
  %v9_e74c = icmp eq i32 %v0_e74c, %v2_e748
  store i1 %v9_e74c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e74c, label %dec_label_pc_e9f4, label %dec_label_pc_e754

dec_label_pc_e754:                                ; preds = %dec_label_pc_e744
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_e9c8 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_e760

dec_label_pc_e760:                                ; preds = %.thread50.dec_label_pc_e760_crit_edge, %dec_label_pc_e754
  %v0_e760 = phi i32 [ %v0_e760.pre, %.thread50.dec_label_pc_e760_crit_edge ], [ 0, %dec_label_pc_e754 ]
  store i32 %v0_e760, i32* %stack_var_-92, align 4
  %v0_e770 = call i32 @function_d228()
  %v1_e770 = trunc i32 %v0_e770 to i8
  store i32 %v0_e770, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b230.48 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %lr.global-to-local, align 4
  %v2_e77c = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_e77c, i32* %r2.global-to-local, align 4
  %v2_e780 = and i32 %v0_e770, 128
  %v3_e780 = icmp ne i32 %v2_e780, 0
  store i1 %v3_e780, i1* %cpsr_c.global-to-local, align 1
  %v4_e780 = sdiv i32 %v0_e770, 256
  store i32 %v4_e780, i32* %r3.global-to-local, align 4
  %v1_e784 = trunc i32 %v4_e780 to i8
  store i8 %v1_e784, i8* bitcast (i32* @global_var_1b1bd.135 to i8*), align 4
  store i32 %v2_e77c, i32* @global_var_1b1c4.482, align 4
  store i8 %v1_e770, i8* bitcast (i32* @global_var_1b1bc.139 to i8*), align 4
  br label %dec_label_pc_e790

dec_label_pc_e790:                                ; preds = %dec_label_pc_e864, %dec_label_pc_e7c0, %dec_label_pc_e898, %dec_label_pc_e88c, %dec_label_pc_e880, %dec_label_pc_e874, %.thread35, %bb304, %bb303, %bb302, %bb301, %bb300, %dec_label_pc_e85c, %dec_label_pc_e854, %bb296, %dec_label_pc_e824, %dec_label_pc_e800, %bb289, %dec_label_pc_e7d0, %bb288, %dec_label_pc_e7b8, %bb287, %bb306, %dec_label_pc_e760
  %v0_e790 = call i32 @function_d228()
  store i32 %v0_e790, i32* %r0.global-to-local, align 4
  %v1_e794 = urem i32 %v0_e790, 256
  store i32 %v1_e794, i32* %r1.global-to-local, align 4
  %v3_e798 = udiv i32 %v0_e790, 256
  store i32 %v3_e798, i32* %r3.global-to-local, align 4
  %v3_e79c = udiv i32 %v0_e790, 65536
  store i32 %v3_e79c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e7a0 = icmp eq i32 %v1_e794, 0
  store i1 %v2_e7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7a0, label %bb287, label %bb286

bb286:                                            ; preds = %dec_label_pc_e790
  %v3_e7a4 = icmp ugt i32 %v1_e794, 126
  store i1 %v3_e7a4, i1* %cpsr_c.global-to-local, align 1
  %v8_e7a4 = icmp eq i32 %v1_e794, 127
  store i1 %v8_e7a4, i1* %cpsr_z.global-to-local, align 1
  br label %bb287

bb287:                                            ; preds = %dec_label_pc_e790, %bb286
  %v0_e7b4 = phi i1 [ true, %dec_label_pc_e790 ], [ %v8_e7a4, %bb286 ]
  %v1_e7a8 = urem i32 %v3_e798, 256
  store i32 %v1_e7a8, i32* %ip.global-to-local, align 4
  %v1_e7ac = urem i32 %v3_e79c, 256
  store i32 %v1_e7ac, i32* %r2.global-to-local, align 4
  %v1_e7b0 = and i32 %v0_e790, 8388608
  %v2_e7b0 = icmp ne i32 %v1_e7b0, 0
  store i1 %v2_e7b0, i1* %cpsr_c.global-to-local, align 1
  %v3_e7b0 = udiv i32 %v0_e790, 16777216
  store i32 %v3_e7b0, i32* %r0.global-to-local, align 4
  br i1 %v0_e7b4, label %dec_label_pc_e790, label %dec_label_pc_e7b8

dec_label_pc_e7b8:                                ; preds = %bb287
  %v2_e7b8 = icmp ugt i32 %v1_e794, 2
  store i1 %v2_e7b8, i1* %cpsr_c.global-to-local, align 1
  %v7_e7b8 = icmp eq i32 %v1_e794, 3
  store i1 %v7_e7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7b8, label %dec_label_pc_e790, label %dec_label_pc_e7c0

dec_label_pc_e7c0:                                ; preds = %dec_label_pc_e7b8
  %v1_e7c0 = add nsw i32 %v1_e794, -15
  store i32 %v1_e7c0, i32* %r3.global-to-local, align 4
  %v2_e7c4 = icmp ugt i32 %v1_e794, 55
  store i1 %v2_e7c4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7c4 = icmp eq i32 %v1_e794, 56
  store i1 %v7_e7c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7c4, label %dec_label_pc_e790, label %bb288

bb288:                                            ; preds = %dec_label_pc_e7c0
  %v3_e7c8 = icmp ne i32 %v1_e7c0, 0
  store i1 %v3_e7c8, i1* %cpsr_c.global-to-local, align 1
  %v8_e7c8 = icmp eq i32 %v1_e7c0, 1
  store i1 %v8_e7c8, i1* %cpsr_z.global-to-local, align 1
  %v2_e7cc = xor i1 %v3_e7c8, true
  %v3_e7cc = or i1 %v8_e7c8, %v2_e7cc
  br i1 %v3_e7cc, label %dec_label_pc_e790, label %dec_label_pc_e7d0

dec_label_pc_e7d0:                                ; preds = %bb288
  %v2_e7d0 = icmp ugt i32 %v1_e794, 9
  store i1 %v2_e7d0, i1* %cpsr_c.global-to-local, align 1
  %v7_e7d0 = icmp eq i32 %v1_e794, 10
  store i1 %v7_e7d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7d0, label %dec_label_pc_e790, label %dec_label_pc_e7d8

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e7d0
  %v2_e7d8 = icmp ugt i32 %v1_e794, 191
  store i1 %v2_e7d8, i1* %cpsr_c.global-to-local, align 1
  %v7_e7d8 = icmp eq i32 %v1_e794, 192
  store i1 %v7_e7d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7d8, label %bb289, label %dec_label_pc_e7e4

bb289:                                            ; preds = %dec_label_pc_e7d8
  %v3_e7dc = icmp ugt i32 %v1_e7a8, 167
  store i1 %v3_e7dc, i1* %cpsr_c.global-to-local, align 1
  %v8_e7dc = icmp eq i32 %v1_e7a8, 168
  store i1 %v8_e7dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e7dc, label %dec_label_pc_e790, label %dec_label_pc_e7e4

dec_label_pc_e7e4:                                ; preds = %dec_label_pc_e7d8, %bb289
  %v7_e7e4 = icmp eq i32 %v1_e794, 172
  %.354 = zext i1 %v7_e7e4 to i32
  store i32 %.354, i32* %r3.global-to-local, align 4
  %v2_e7f0 = icmp ugt i32 %v1_e7a8, 14
  store i1 %v2_e7f0, i1* %cpsr_c.global-to-local, align 1
  %v7_e7f0 = icmp eq i32 %v1_e7a8, 15
  store i1 %v7_e7f0, i1* %cpsr_z.global-to-local, align 1
  %v2_e7f4 = xor i1 %v2_e7f0, true
  %v3_e7f4 = or i1 %v7_e7f0, %v2_e7f4
  br i1 %v3_e7f4, label %.thread13, label %bb292

.thread13:                                        ; preds = %dec_label_pc_e7e4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e808

bb292:                                            ; preds = %dec_label_pc_e7e4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e7f8 = icmp eq i1 %v7_e7e4, false
  store i1 %v2_e7f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7f8, label %dec_label_pc_e808, label %dec_label_pc_e800

dec_label_pc_e800:                                ; preds = %bb292
  %v2_e800 = icmp ugt i32 %v1_e7a8, 30
  store i1 %v2_e800, i1* %cpsr_c.global-to-local, align 1
  %v7_e800 = icmp eq i32 %v1_e7a8, 31
  store i1 %v7_e800, i1* %cpsr_z.global-to-local, align 1
  %v2_e804 = xor i1 %v2_e800, true
  %v3_e804 = or i1 %v7_e800, %v2_e804
  br i1 %v3_e804, label %dec_label_pc_e790, label %dec_label_pc_e808

dec_label_pc_e808:                                ; preds = %.thread13, %dec_label_pc_e800, %bb292
  %v7_e808 = icmp eq i32 %v1_e794, 100
  %.355 = zext i1 %v7_e808 to i32
  store i32 %.355, i32* %r3.global-to-local, align 4
  %v2_e814 = icmp ugt i32 %v1_e7a8, 62
  store i1 %v2_e814, i1* %cpsr_c.global-to-local, align 1
  %v7_e814 = icmp eq i32 %v1_e7a8, 63
  store i1 %v7_e814, i1* %cpsr_z.global-to-local, align 1
  %v2_e818 = xor i1 %v2_e814, true
  %v3_e818 = or i1 %v7_e814, %v2_e818
  br i1 %v3_e818, label %.thread18, label %bb295

.thread18:                                        ; preds = %dec_label_pc_e808
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e82c

bb295:                                            ; preds = %dec_label_pc_e808
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e81c = icmp eq i1 %v7_e808, false
  store i1 %v2_e81c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e81c, label %dec_label_pc_e82c, label %dec_label_pc_e824

dec_label_pc_e824:                                ; preds = %bb295
  %v2_e824 = icmp ugt i32 %v1_e7a8, 125
  store i1 %v2_e824, i1* %cpsr_c.global-to-local, align 1
  %v7_e824 = icmp eq i32 %v1_e7a8, 126
  store i1 %v7_e824, i1* %cpsr_z.global-to-local, align 1
  %v2_e828 = xor i1 %v2_e824, true
  %v3_e828 = or i1 %v7_e824, %v2_e828
  br i1 %v3_e828, label %dec_label_pc_e790, label %dec_label_pc_e82c

dec_label_pc_e82c:                                ; preds = %.thread18, %dec_label_pc_e824, %bb295
  %v2_e82c = icmp ugt i32 %v1_e794, 168
  store i1 %v2_e82c, i1* %cpsr_c.global-to-local, align 1
  %v7_e82c = icmp eq i32 %v1_e794, 169
  store i1 %v7_e82c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e82c, label %bb296, label %dec_label_pc_e838

bb296:                                            ; preds = %dec_label_pc_e82c
  %v3_e830 = icmp eq i32 %v1_e7a8, 255
  store i1 %v3_e830, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e830, label %dec_label_pc_e790, label %dec_label_pc_e838

dec_label_pc_e838:                                ; preds = %dec_label_pc_e82c, %bb296
  %v7_e838 = icmp eq i32 %v1_e794, 198
  %.356 = zext i1 %v7_e838 to i32
  store i32 %.356, i32* %r3.global-to-local, align 4
  %v2_e844 = icmp ugt i32 %v1_e7a8, 16
  store i1 %v2_e844, i1* %cpsr_c.global-to-local, align 1
  %v7_e844 = icmp eq i32 %v1_e7a8, 17
  store i1 %v7_e844, i1* %cpsr_z.global-to-local, align 1
  %v2_e848 = xor i1 %v2_e844, true
  %v3_e848 = or i1 %v7_e844, %v2_e848
  br i1 %v3_e848, label %.thread24, label %bb299

.thread24:                                        ; preds = %dec_label_pc_e838
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e85c

bb299:                                            ; preds = %dec_label_pc_e838
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e84c = icmp eq i1 %v7_e838, false
  store i1 %v2_e84c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e84c, label %dec_label_pc_e85c, label %dec_label_pc_e854

dec_label_pc_e854:                                ; preds = %bb299
  %v2_e854 = icmp ugt i32 %v1_e7a8, 18
  store i1 %v2_e854, i1* %cpsr_c.global-to-local, align 1
  %v7_e854 = icmp eq i32 %v1_e7a8, 19
  store i1 %v7_e854, i1* %cpsr_z.global-to-local, align 1
  %v2_e858 = xor i1 %v2_e854, true
  %v3_e858 = or i1 %v7_e854, %v2_e858
  br i1 %v3_e858, label %dec_label_pc_e790, label %dec_label_pc_e85c

dec_label_pc_e85c:                                ; preds = %.thread24, %dec_label_pc_e854, %bb299
  %v2_e85c = icmp ugt i32 %v1_e794, 222
  store i1 %v2_e85c, i1* %cpsr_c.global-to-local, align 1
  %v7_e85c = icmp eq i32 %v1_e794, 223
  store i1 %v7_e85c, i1* %cpsr_z.global-to-local, align 1
  %v2_e860 = xor i1 %v7_e85c, true
  %v3_e860 = and i1 %v2_e85c, %v2_e860
  br i1 %v3_e860, label %dec_label_pc_e790, label %dec_label_pc_e864

dec_label_pc_e864:                                ; preds = %dec_label_pc_e85c
  %v1_e864 = add nsw i32 %v1_e794, -6
  store i32 %v1_e864, i32* %r3.global-to-local, align 4
  %v2_e868 = icmp ugt i32 %v1_e794, 10
  store i1 %v2_e868, i1* %cpsr_c.global-to-local, align 1
  %v7_e868 = icmp eq i32 %v1_e794, 11
  store i1 %v7_e868, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e868, label %dec_label_pc_e790, label %bb300

bb300:                                            ; preds = %dec_label_pc_e864
  %v3_e86c = icmp ne i32 %v1_e864, 0
  store i1 %v3_e86c, i1* %cpsr_c.global-to-local, align 1
  %v8_e86c = icmp eq i32 %v1_e864, 1
  store i1 %v8_e86c, i1* %cpsr_z.global-to-local, align 1
  %v2_e870 = xor i1 %v3_e86c, true
  %v3_e870 = or i1 %v8_e86c, %v2_e870
  br i1 %v3_e870, label %dec_label_pc_e790, label %dec_label_pc_e874

dec_label_pc_e874:                                ; preds = %bb300
  %v2_e874 = icmp ugt i32 %v1_e794, 21
  store i1 %v2_e874, i1* %cpsr_c.global-to-local, align 1
  %v7_e874 = icmp eq i32 %v1_e794, 22
  store i1 %v7_e874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e874, label %dec_label_pc_e790, label %bb301

bb301:                                            ; preds = %dec_label_pc_e874
  %v3_e878 = icmp ugt i32 %v1_e794, 20
  store i1 %v3_e878, i1* %cpsr_c.global-to-local, align 1
  %v8_e878 = icmp eq i32 %v1_e794, 21
  store i1 %v8_e878, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e878, label %dec_label_pc_e790, label %dec_label_pc_e880

dec_label_pc_e880:                                ; preds = %bb301
  %v2_e880 = icmp ugt i32 %v1_e794, 27
  store i1 %v2_e880, i1* %cpsr_c.global-to-local, align 1
  %v7_e880 = icmp eq i32 %v1_e794, 28
  store i1 %v7_e880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e880, label %dec_label_pc_e790, label %bb302

bb302:                                            ; preds = %dec_label_pc_e880
  %v3_e884 = icmp ugt i32 %v1_e794, 25
  store i1 %v3_e884, i1* %cpsr_c.global-to-local, align 1
  %v8_e884 = icmp eq i32 %v1_e794, 26
  store i1 %v8_e884, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e884, label %dec_label_pc_e790, label %dec_label_pc_e88c

dec_label_pc_e88c:                                ; preds = %bb302
  %v2_e88c = icmp ugt i32 %v1_e794, 29
  store i1 %v2_e88c, i1* %cpsr_c.global-to-local, align 1
  %v7_e88c = icmp eq i32 %v1_e794, 30
  store i1 %v7_e88c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e88c, label %dec_label_pc_e790, label %bb303

bb303:                                            ; preds = %dec_label_pc_e88c
  %v3_e890 = icmp ugt i32 %v1_e794, 28
  store i1 %v3_e890, i1* %cpsr_c.global-to-local, align 1
  %v8_e890 = icmp eq i32 %v1_e794, 29
  store i1 %v8_e890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e890, label %dec_label_pc_e790, label %dec_label_pc_e898

dec_label_pc_e898:                                ; preds = %bb303
  %v2_e898 = icmp ugt i32 %v1_e794, 54
  store i1 %v2_e898, i1* %cpsr_c.global-to-local, align 1
  %v7_e898 = icmp eq i32 %v1_e794, 55
  store i1 %v7_e898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e898, label %dec_label_pc_e790, label %bb304

bb304:                                            ; preds = %dec_label_pc_e898
  %v3_e89c = icmp ugt i32 %v1_e794, 32
  store i1 %v3_e89c, i1* %cpsr_c.global-to-local, align 1
  %v8_e89c = icmp eq i32 %v1_e794, 33
  store i1 %v8_e89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e89c, label %dec_label_pc_e790, label %dec_label_pc_e8a4

dec_label_pc_e8a4:                                ; preds = %bb304
  %v2_e8a4 = icmp ugt i32 %v1_e794, 214
  store i1 %v2_e8a4, i1* %cpsr_c.global-to-local, align 1
  %v7_e8a4 = icmp eq i32 %v1_e794, 215
  store i1 %v7_e8a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8a4, label %.thread35, label %bb305

bb305:                                            ; preds = %dec_label_pc_e8a4
  %v3_e8a8 = icmp ugt i32 %v1_e794, 213
  store i1 %v3_e8a8, i1* %cpsr_c.global-to-local, align 1
  %v8_e8a8 = icmp eq i32 %v1_e794, 214
  store i1 %v8_e8a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e8a8, label %bb306, label %dec_label_pc_e8b8

.thread35:                                        ; preds = %dec_label_pc_e8a4
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e790

bb306:                                            ; preds = %bb305
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e790

dec_label_pc_e8b8:                                ; preds = %bb305
  store i32 0, i32* @r4, align 4
  %v5_e8c4 = call i32 @llvm.bswap.i32(i32 %v0_e790)
  store i32 %v5_e8c4, i32* %r3.global-to-local, align 4
  %tmp307 = and i32 %v0_e790, 65280
  %tmp308 = call i32 @llvm.bswap.i32(i32 %tmp307)
  %v1_e8cc = and i32 %v5_e8c4, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v3_e8d0 = mul nuw i32 %v3_e7b0, 16777216
  %v3_e8d4 = udiv i32 %tmp308, 256
  %v4_e8d8 = mul i32 %v1_e8cc, 256
  %tmp309 = and i32 %v0_e790, 32768
  %v3_e8dc = icmp ne i32 %tmp309, 0
  store i1 %v3_e8dc, i1* %cpsr_c.global-to-local, align 1
  %v4_e8dc = udiv i32 %v5_e8c4, 16777216
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* @r0, align 4
  %v5_e8dc = or i32 %v4_e8dc, %v3_e8d0
  %v5_e8d8 = or i32 %v5_e8dc, %v4_e8d8
  %v2_e8e4 = or i32 %v5_e8d8, %v3_e8d4
  store i32 %v2_e8e4, i32* %r2.global-to-local, align 4
  %v5_e8e8 = trunc i32 %v4_e8dc to i8
  store i8 %v5_e8e8, i8* @global_var_1b1c8.483, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1b1c2.484 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1b1c3.485 to i8*), align 4
  %v3_e8f8 = call i32 @function_c6b0(i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %ip.global-to-local, align 4
  %sext9 = mul i32 %v3_e8f8, 16777216
  %v1_e900 = sdiv i32 %sext9, 16777216
  store i32 %v1_e900, i32* %r3.global-to-local, align 4
  %v2_e904 = and i32 %v1_e900, 128
  %v3_e904 = icmp ne i32 %v2_e904, 0
  store i1 %v3_e904, i1* %cpsr_c.global-to-local, align 1
  %v4_e904 = ashr i32 %sext9, 31
  store i32 %v4_e904, i32* %r2.global-to-local, align 4
  %v1_e908 = trunc i32 %v1_e900 to i8
  store i8 %v1_e908, i8* bitcast (i32* @global_var_1b1c2.484 to i8*), align 4
  %v1_e90c = trunc i32 %v4_e904 to i8
  store i8 %v1_e90c, i8* bitcast (i32* @global_var_1b1c3.485 to i8*), align 4
  %v3_e910 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_e910, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_e918 = call i32 @function_104b4(i32 %v3_e910, i32 10)
  store i32 %v4_e918, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e91c = icmp eq i32 %v4_e918, 0
  store i1 %v2_e91c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e91c, label %.thread217, label %bb310

.thread217:                                       ; preds = %dec_label_pc_e8b8
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* @lr, align 4
  br label %.thread45.thread88

bb310:                                            ; preds = %dec_label_pc_e8b8
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_e92c = load i32, i32* @r4, align 4
  %v2_e92c = trunc i32 %v1_e92c to i8
  store i8 %v2_e92c, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32 2) to i8*), align 2
  %v0_e930.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e930.pr.pre, label %.thread45.thread88, label %.thread42

.thread42:                                        ; preds = %bb310
  %v1_e930 = load i32, i32* %r3.global-to-local, align 4
  %v2_e930 = trunc i32 %v1_e930 to i8
  %v3_e930 = load i32, i32* %r0.global-to-local, align 4
  %v4_e930 = add i32 %v3_e930, 3
  %v5_e930 = inttoptr i32 %v4_e930 to i8*
  store i8 %v2_e930, i8* %v5_e930, align 1
  %v0_e938.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_e938.pr.pr, label %.thread48, label %.thread50

.thread45.thread88:                               ; preds = %bb310, %.thread217
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %r0.global-to-local, align 4
  br label %.thread48

.thread48:                                        ; preds = %.thread42, %.thread45.thread88
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_e940 = load i32, i32* @lr, align 4
  %v4_e940 = add i32 %v3_e940, 2
  %v5_e940 = inttoptr i32 %v4_e940 to i8*
  store i8 9, i8* %v5_e940, align 1
  %v0_e944.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e944.pr.pr, label %bb311, label %.thread50

bb311:                                            ; preds = %.thread48
  %v1_e944 = load i32, i32* %r2.global-to-local, align 4
  %v2_e944 = trunc i32 %v1_e944 to i8
  %v3_e944 = load i32, i32* @lr, align 4
  %v4_e944 = add i32 %v3_e944, 3
  %v5_e944 = inttoptr i32 %v4_e944 to i8*
  store i8 %v2_e944, i8* %v5_e944, align 1
  br label %.thread50

.thread50:                                        ; preds = %.thread42, %.thread48, %bb311
  %v4_e948 = load i8, i8* @global_var_1b1c8.483, align 1
  %v5_e948 = sext i8 %v4_e948 to i32
  store i32 %v5_e948, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* @r1, align 4
  store i8 %v4_e948, i8* @global_var_1b1d0.487, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_e960 = load i32, i32* %sl.global-to-local, align 4
  %v1_e960 = trunc i32 %v0_e960 to i8
  store i8 %v1_e960, i8* bitcast (i32* @global_var_1b1dc.488 to i8*), align 4
  store i8 %v1_e960, i8* bitcast (i32* @global_var_1b1dd.489 to i8*), align 4
  %v5_e968 = call i32 @function_c70c(i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_e968, 16777216
  %v1_e970 = sdiv i32 %sext, 16777216
  %v3_e978 = ashr i32 %sext, 31
  %v2_e97c = load i32, i32* @global_var_1b1cc.132, align 4
  %v1_e984 = trunc i32 %v3_e978 to i8
  store i8 %v1_e984, i8* bitcast (i32* @global_var_1b1dd.489 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_e998 = load i8, i8* @global_var_1b1c8.483, align 1
  %v4_e998 = sext i8 %v3_e998 to i32
  store i32 %v4_e998, i32* @r4, align 4
  %v2_e99c = load i32, i32* @global_var_1b248.126, align 4
  store i32 %v2_e99c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), i32* %ip.global-to-local, align 4
  %v1_e9ac = and i32 %v2_e97c, 8388608
  %v2_e9ac = icmp ne i32 %v1_e9ac, 0
  store i1 %v2_e9ac, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_e9c0 = trunc i32 %v1_e970 to i8
  store i8 %v1_e9c0, i8* bitcast (i32* @global_var_1b1dc.488 to i8*), align 4
  store i32 %v2_e9c8, i32* %lr.global-to-local, align 4
  %v8_e9d8 = call i32 @function_10b98(i32 %v2_e99c, i32* bitcast (i8** @global_var_1b1b8.128 to i32*), i32 40, i32 16384, i32 %v2_e9c8, i32 16)
  store i32 %v8_e9d8, i32* %r0.global-to-local, align 4
  %v3_e9dc = load i32, i32* %stack_var_-48, align 4
  %v1_e9e0 = add i32 %v3_e9dc, 1
  store i32 %v1_e9e0, i32* %r3.global-to-local, align 4
  %v3_e9e4 = icmp ugt i32 %v1_e9e0, 383
  store i1 %v3_e9e4, i1* %cpsr_c.global-to-local, align 1
  %v8_e9e4 = icmp eq i32 %v1_e9e0, 384
  store i1 %v8_e9e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e9e0, i32* %stack_var_-48, align 4
  %v5_e9ec = icmp slt i32 %v1_e9e0, 384
  br i1 %v5_e9ec, label %.thread50.dec_label_pc_e760_crit_edge, label %dec_label_pc_e9f0

.thread50.dec_label_pc_e760_crit_edge:            ; preds = %.thread50
  %v0_e760.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e760

dec_label_pc_e9f0:                                ; preds = %.thread50
  %v0_e9f0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_e9f0, i32* @fp, align 4
  br label %dec_label_pc_e9f4

dec_label_pc_e9f4:                                ; preds = %dec_label_pc_e744, %dec_label_pc_e9f0
  %v0_e9f4 = call i32 @function_1095c()
  store i32 %v0_e9f4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v0_e9f4, i32* @sb, align 4
  %v6_ea2c = inttoptr i32 %v0_ea64 to i32*
  %v1_ea54 = add i32 %v0_ea64, 16
  %v2_ea54 = inttoptr i32 %v1_ea54 to i32*
  %v4_ea70 = ptrtoint i8* %stack_var_-1876.0 to i32
  %v1_ea78 = add i32 %v4_ea70, 1
  %v2_ea78 = inttoptr i32 %v1_ea78 to i8*
  %v1_ea9c = add i32 %v4_ea70, 2
  %v2_ea9c = inttoptr i32 %v1_ea9c to i8*
  %v1_eaa0 = add i32 %v4_ea70, 3
  %v2_eaa0 = inttoptr i32 %v1_eaa0 to i8*
  %v4_eaa4 = sext i8 %stack_var_-1868.0 to i32
  %v1_eab8 = add i32 %v4_ea70, 13
  %v2_eab8 = inttoptr i32 %v1_eab8 to i8*
  %v1_eb84 = bitcast i8* %stack_var_-1876.0 to i32*
  %v1_ea64 = add i32 %v0_ea64, 9
  %v2_ea64 = inttoptr i32 %v1_ea64 to i8*
  %v1_eadc = add i32 %v4_ea70, 8
  %v2_eadc = inttoptr i32 %v1_eadc to i32*
  %v1_eb1c = add i32 %v0_ea64, 12
  %v2_eb1c = inttoptr i32 %v1_eb1c to i32*
  br label %dec_label_pc_ea00

dec_label_pc_ea00:                                ; preds = %dec_label_pc_eadc, %dec_label_pc_ead4, %dec_label_pc_eacc, %dec_label_pc_ea98, %dec_label_pc_ea88, %dec_label_pc_ea64, %dec_label_pc_ea4c, %dec_label_pc_eac4, %dec_label_pc_eab4, %dec_label_pc_ea44, %dec_label_pc_eb7c, %dec_label_pc_e9f4
  %v1_ea04 = phi i32 [ %v0_e9f4, %dec_label_pc_e9f4 ], [ %v1_ea04.pre.pre, %dec_label_pc_eb7c ], [ %v0_ea38, %dec_label_pc_ea44 ], [ %v0_ea38, %dec_label_pc_eab4 ], [ %v0_ea38, %dec_label_pc_eac4 ], [ %v0_ea38, %dec_label_pc_ea4c ], [ %v0_ea38, %dec_label_pc_ea64 ], [ %v0_ea38, %dec_label_pc_ea88 ], [ %v0_ea38, %dec_label_pc_ea98 ], [ %v0_ea38, %dec_label_pc_eacc ], [ %v0_ea38, %dec_label_pc_ead4 ], [ %v0_ea38, %dec_label_pc_eadc ]
  %v2_ea04 = inttoptr i32 %v1_ea04 to i32*
  store i32 0, i32* %v2_ea04, align 4
  %v2_ea10 = load i32, i32* @global_var_1b248.126, align 4
  store i32 %v2_ea10, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_ea64, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_ea2c = call i32 @function_10b38(i32 %v2_ea10, i32* %v6_ea2c, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_ea2c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ea30 = icmp eq i32 %v7_ea2c, 0
  store i1 %v2_ea30, i1* %cpsr_z.global-to-local, align 1
  %tmp312 = icmp slt i32 %v7_ea2c, 1
  br i1 %tmp312, label %dec_label_pc_ebb0, label %dec_label_pc_ea38

dec_label_pc_ea38:                                ; preds = %dec_label_pc_ea00
  %v0_ea38 = load i32, i32* @sb, align 4
  %v1_ea38 = inttoptr i32 %v0_ea38 to i32*
  %v2_ea38 = load i32, i32* %v1_ea38, align 4
  store i32 %v2_ea38, i32* %r3.global-to-local, align 4
  %v2_ea3c = icmp ugt i32 %v2_ea38, 10
  store i1 %v2_ea3c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea3c = icmp eq i32 %v2_ea38, 11
  store i1 %v7_ea3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea3c, label %dec_label_pc_ebb0, label %dec_label_pc_ea44

dec_label_pc_ea44:                                ; preds = %dec_label_pc_ea38
  %v2_ea44 = icmp ugt i32 %v7_ea2c, 38
  store i1 %v2_ea44, i1* %cpsr_c.global-to-local, align 1
  %v7_ea44 = icmp eq i32 %v7_ea2c, 39
  store i1 %v7_ea44, i1* %cpsr_z.global-to-local, align 1
  %v2_ea48 = xor i1 %v2_ea44, true
  %v3_ea48 = or i1 %v7_ea44, %v2_ea48
  br i1 %v3_ea48, label %dec_label_pc_ea00, label %dec_label_pc_ea4c

dec_label_pc_ea4c:                                ; preds = %dec_label_pc_ea44
  store i32 %v0_ea64, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b230.48 to i32), i32* %r0.global-to-local, align 4
  %v3_ea54 = load i32, i32* %v2_ea54, align 4
  store i32 %v3_ea54, i32* %r2.global-to-local, align 4
  %v2_ea58 = load i32, i32* @global_var_1b230.48, align 4
  store i32 %v2_ea58, i32* %r3.global-to-local, align 4
  %v3_ea5c = icmp uge i32 %v3_ea54, %v2_ea58
  store i1 %v3_ea5c, i1* %cpsr_c.global-to-local, align 1
  %v9_ea5c = icmp eq i32 %v3_ea54, %v2_ea58
  store i1 %v9_ea5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea5c, label %dec_label_pc_ea64, label %dec_label_pc_ea00

dec_label_pc_ea64:                                ; preds = %dec_label_pc_ea4c
  %v3_ea64 = load i8, i8* %v2_ea64, align 1
  %v4_ea64 = zext i8 %v3_ea64 to i32
  store i32 %v4_ea64, i32* %r3.global-to-local, align 4
  %v2_ea68 = icmp ugt i8 %v3_ea64, 5
  store i1 %v2_ea68, i1* %cpsr_c.global-to-local, align 1
  %v7_ea68 = icmp eq i8 %v3_ea64, 6
  store i1 %v7_ea68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea68, label %dec_label_pc_ea70, label %dec_label_pc_ea00

dec_label_pc_ea70:                                ; preds = %dec_label_pc_ea64
  store i32 %v4_ea70, i32* %r1.global-to-local, align 4
  %v2_ea74 = load i8, i8* %stack_var_-1876.0, align 1
  %v3_ea74 = zext i8 %v2_ea74 to i32
  store i32 %v3_ea74, i32* %r2.global-to-local, align 4
  %v3_ea78 = load i8, i8* %v2_ea78, align 1
  %v4_ea78 = zext i8 %v3_ea78 to i32
  store i32 %v4_ea78, i32* %r3.global-to-local, align 4
  %v4_ea7c = mul nuw nsw i32 %v4_ea78, 256
  %v5_ea7c = or i32 %v4_ea7c, %v3_ea74
  store i32 %v5_ea7c, i32* %r2.global-to-local, align 4
  %v2_ea80 = icmp ugt i32 %v5_ea7c, 5887
  store i1 %v2_ea80, i1* %cpsr_c.global-to-local, align 1
  %v7_ea80 = icmp eq i32 %v5_ea7c, 5888
  store i1 %v7_ea80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea80, label %dec_label_pc_ea98, label %dec_label_pc_ea88

dec_label_pc_ea88:                                ; preds = %dec_label_pc_ea70
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ea90 = icmp ugt i32 %v5_ea7c, 4872
  store i1 %v3_ea90, i1* %cpsr_c.global-to-local, align 1
  %v9_ea90 = icmp eq i32 %v5_ea7c, 4873
  store i1 %v9_ea90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea90, label %dec_label_pc_ea98, label %dec_label_pc_ea00

dec_label_pc_ea98:                                ; preds = %dec_label_pc_ea88, %dec_label_pc_ea70
  store i32 %v4_ea70, i32* %r2.global-to-local, align 4
  %v3_ea9c = load i8, i8* %v2_ea9c, align 1
  %v4_ea9c = zext i8 %v3_ea9c to i32
  store i32 %v4_ea9c, i32* %r3.global-to-local, align 4
  %v3_eaa0 = load i8, i8* %v2_eaa0, align 1
  %v4_eaa0 = zext i8 %v3_eaa0 to i32
  store i32 %v4_eaa0, i32* %r2.global-to-local, align 4
  store i32 %v4_eaa4, i32* %ip.global-to-local, align 4
  %v4_eaa8 = mul nuw nsw i32 %v4_eaa0, 256
  %v5_eaa8 = or i32 %v4_eaa8, %v4_ea9c
  store i32 %v5_eaa8, i32* %r3.global-to-local, align 4
  %v3_eaac = icmp uge i32 %v5_eaa8, %v4_eaa4
  store i1 %v3_eaac, i1* %cpsr_c.global-to-local, align 1
  %v9_eaac = icmp eq i32 %v5_eaa8, %v4_eaa4
  store i1 %v9_eaac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_eaac, label %dec_label_pc_eab4, label %dec_label_pc_ea00

dec_label_pc_eab4:                                ; preds = %dec_label_pc_ea98
  store i32 %v4_ea70, i32* %lr.global-to-local, align 4
  %v3_eab8 = load i8, i8* %v2_eab8, align 1
  %v4_eab8 = zext i8 %v3_eab8 to i32
  store i32 %v4_eab8, i32* %r3.global-to-local, align 4
  %v1_eabc = and i32 %v4_eab8, 2
  %v2_eabc = icmp eq i32 %v1_eabc, 0
  store i1 %v2_eabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eabc, label %dec_label_pc_ea00, label %dec_label_pc_eac4

dec_label_pc_eac4:                                ; preds = %dec_label_pc_eab4
  %v1_eac4 = and i32 %v4_eab8, 16
  %v2_eac4 = icmp eq i32 %v1_eac4, 0
  store i1 %v2_eac4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eac4, label %dec_label_pc_ea00, label %dec_label_pc_eacc

dec_label_pc_eacc:                                ; preds = %dec_label_pc_eac4
  %v1_eacc = and i32 %v4_eab8, 4
  %v2_eacc = icmp eq i32 %v1_eacc, 0
  store i1 %v2_eacc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eacc, label %dec_label_pc_ead4, label %dec_label_pc_ea00

dec_label_pc_ead4:                                ; preds = %dec_label_pc_eacc
  %tmp459 = urem i8 %v3_eab8, 2
  %v2_ead4 = icmp eq i8 %tmp459, 0
  store i1 %v2_ead4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ead4, label %dec_label_pc_eadc, label %dec_label_pc_ea00

dec_label_pc_eadc:                                ; preds = %dec_label_pc_ead4
  %v3_eadc = load i32, i32* %v2_eadc, align 4
  %v1_eae4 = and i32 %v3_eadc, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v3_eae8 = mul i32 %v3_eadc, 16777216
  %v1_eae0 = udiv i32 %v3_eadc, 256
  %v3_eaec = and i32 %v1_eae0, 65280
  %v4_eaf0 = mul i32 %v1_eae4, 256
  %v4_eaf4 = udiv i32 %v3_eadc, 16777216
  %v5_eaf4 = or i32 %v4_eaf4, %v3_eae8
  %v5_eaf0 = or i32 %v5_eaf4, %v4_eaf0
  %v2_eaf8 = or i32 %v5_eaf0, %v3_eaec
  %v1_eafc = add i32 %v2_eaf8, -1
  %v1_eb00 = udiv i32 %v1_eafc, 256
  %v3_eb04 = and i32 %v1_eb00, 65280
  %v1_eb08 = and i32 %v1_eafc, 65280
  store i32 %v1_eb08, i32* %r2.global-to-local, align 4
  %v3_eb0c = mul i32 %v1_eafc, 16777216
  %v4_eb10 = udiv i32 %v1_eafc, 16777216
  %v5_eb10 = or i32 %v3_eb04, %v4_eb10
  store i32 %v5_eb10, i32* %r1.global-to-local, align 4
  store i32 %v0_ea64, i32* %r3.global-to-local, align 4
  %v4_eb18 = mul nuw nsw i32 %v1_eb08, 256
  %v5_eb18 = or i32 %v4_eb18, %v3_eb0c
  store i32 %v5_eb18, i32* %r0.global-to-local, align 4
  %v3_eb1c = load i32, i32* %v2_eb1c, align 4
  store i32 %v3_eb1c, i32* %r2.global-to-local, align 4
  %v2_eb20 = call i32 @llvm.bswap.i32(i32 %v1_eafc)
  store i32 %v2_eb20, i32* %ip.global-to-local, align 4
  %v3_eb24 = icmp uge i32 %v2_eb20, %v3_eb1c
  store i1 %v3_eb24, i1* %cpsr_c.global-to-local, align 1
  %v9_eb24 = icmp eq i32 %v2_eb20, %v3_eb1c
  store i1 %v9_eb24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_eb24, label %dec_label_pc_eb2c, label %dec_label_pc_ea00

dec_label_pc_eb2c:                                ; preds = %dec_label_pc_eadc
  %v0_eb2c = load i32, i32* @r4, align 4
  %v2_eb2c = icmp ugt i32 %v0_eb2c, 254
  store i1 %v2_eb2c, i1* %cpsr_c.global-to-local, align 1
  %v7_eb2c = icmp eq i32 %v0_eb2c, 255
  store i1 %v7_eb2c, i1* %cpsr_z.global-to-local, align 1
  %v8_eb30 = icmp sgt i32 %v0_eb2c, 255
  br i1 %v8_eb30, label %dec_label_pc_ebb0, label %dec_label_pc_eb34

dec_label_pc_eb34:                                ; preds = %dec_label_pc_eb2c
  store i32 ptrtoint (i32* @global_var_1b244.124 to i32), i32* %lr.global-to-local, align 4
  %v3_eb38 = mul i32 %v0_eb2c, 256
  store i32 %v3_eb38, i32* %r2.global-to-local, align 4
  %v2_eb3c = load i32, i32* @global_var_1b244.124, align 4
  store i32 %v2_eb3c, i32* %r1.global-to-local, align 4
  %v2_eb44 = mul i32 %v0_eb2c, 288
  store i32 %v2_eb44, i32* %r3.global-to-local, align 4
  %v2_eb48 = add i32 %v2_eb3c, %v2_eb44
  store i32 %v2_eb48, i32* @r0, align 4
  %v1_eb4c = add i32 %v2_eb48, 12
  %v2_eb4c = inttoptr i32 %v1_eb4c to i32*
  %v3_eb4c = load i32, i32* %v2_eb4c, align 4
  store i32 %v3_eb4c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb50 = icmp eq i32 %v3_eb4c, 0
  store i1 %v2_eb50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb50, label %dec_label_pc_eb7c, label %dec_label_pc_eb5c.preheader

dec_label_pc_eb5c.preheader:                      ; preds = %dec_label_pc_eb34
  %v2_eb54 = add i32 %v2_eb48, 288
  store i32 %v2_eb54, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_eb5c

dec_label_pc_eb5c:                                ; preds = %dec_label_pc_eb5c.preheader, %dec_label_pc_eb68
  %v0_eb68 = phi i32 [ %v2_eb54, %dec_label_pc_eb5c.preheader ], [ %v1_eb74, %dec_label_pc_eb68 ]
  %v0_eb5c = phi i32 [ %v0_eb2c, %dec_label_pc_eb5c.preheader ], [ %v1_eb5c, %dec_label_pc_eb68 ]
  %v1_eb5c = add i32 %v0_eb5c, 1
  store i32 %v1_eb5c, i32* @r4, align 4
  %v7_eb60 = icmp eq i32 %v1_eb5c, 256
  br i1 %v7_eb60, label %dec_label_pc_ebb0.loopexit, label %dec_label_pc_eb68

dec_label_pc_eb68:                                ; preds = %dec_label_pc_eb5c
  store i32 %v0_eb68, i32* @r0, align 4
  %v1_eb6c = add i32 %v0_eb68, 12
  %v2_eb6c = inttoptr i32 %v1_eb6c to i32*
  %v3_eb6c = load i32, i32* %v2_eb6c, align 4
  %v2_eb70 = icmp eq i32 %v3_eb6c, 0
  %v1_eb74 = add i32 %v0_eb68, 288
  store i32 %v1_eb74, i32* %r3.global-to-local, align 4
  br i1 %v2_eb70, label %dec_label_pc_eb7c.loopexit, label %dec_label_pc_eb5c

dec_label_pc_eb7c.loopexit:                       ; preds = %dec_label_pc_eb68
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eb7c

dec_label_pc_eb7c:                                ; preds = %dec_label_pc_eb7c.loopexit, %dec_label_pc_eb34
  %v1_eb7c = phi i32 [ %v0_eb68, %dec_label_pc_eb7c.loopexit ], [ %v2_eb48, %dec_label_pc_eb34 ]
  %v2_eb7c = add i32 %v1_eb7c, 16
  %v3_eb7c = inttoptr i32 %v2_eb7c to i32*
  store i32 %v3_eb1c, i32* %v3_eb7c, align 4
  store i32 %v4_ea70, i32* %r1.global-to-local, align 4
  %v2_eb84 = load i32, i32* %v1_eb84, align 4
  store i32 %v2_eb84, i32* %r2.global-to-local, align 4
  %v1_eb88 = and i32 %v2_eb84, 128
  %v2_eb88 = icmp ne i32 %v1_eb88, 0
  store i1 %v2_eb88, i1* %cpsr_c.global-to-local, align 1
  %v3_eb88 = sdiv i32 %v2_eb84, 256
  store i32 %v3_eb88, i32* %r3.global-to-local, align 4
  %v1_eb8c = trunc i32 %v3_eb88 to i8
  %v2_eb8c = load i32, i32* @r0, align 4
  %v3_eb8c = add i32 %v2_eb8c, 21
  %v4_eb8c = inttoptr i32 %v3_eb8c to i8*
  store i8 %v1_eb8c, i8* %v4_eb8c, align 1
  %v0_eb90 = load i32, i32* %r2.global-to-local, align 4
  %v1_eb90 = trunc i32 %v0_eb90 to i8
  %v2_eb90 = load i32, i32* @r0, align 4
  %v3_eb90 = add i32 %v2_eb90, 20
  %v4_eb90 = inttoptr i32 %v3_eb90 to i8*
  store i8 %v1_eb90, i8* %v4_eb90, align 1
  %v0_eb94 = call i32 @function_d3bc()
  store i32 %v0_eb94, i32* %r0.global-to-local, align 4
  %v1_ea04.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_ea00

dec_label_pc_eb9c:                                ; preds = %dec_label_pc_d9e8
  store i32 ptrtoint (i32* @global_var_1b248.126 to i32), i32* %r2.global-to-local, align 4
  %v2_eba0 = load i32, i32* @global_var_1b248.126, align 4
  store i32 %v2_eba0, i32* %r0.global-to-local, align 4
  %v1_eba4 = call i32 @function_10660(i32 %v2_eba0)
  store i32 %v1_eba4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eba8

dec_label_pc_eba8:                                ; preds = %dec_label_pc_d9c0, %dec_label_pc_eb9c
  %v0_eba8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_eba8, i32* %r0.global-to-local, align 4
  %v1_ebac = call i32 @function_114d8(i32 %v0_eba8)
  store i32 %v1_ebac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ebb0

dec_label_pc_ebb0.loopexit:                       ; preds = %dec_label_pc_eb5c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ebb0

dec_label_pc_ebb0:                                ; preds = %dec_label_pc_eb2c, %dec_label_pc_ea38, %dec_label_pc_ea00, %dec_label_pc_ebb0.loopexit, %dec_label_pc_eba8
  %stack_var_-1872.1 = phi i32 [ %tmp249, %dec_label_pc_eba8 ], [ %v0_ea64, %dec_label_pc_ebb0.loopexit ], [ %v0_ea64, %dec_label_pc_ea00 ], [ %v0_ea64, %dec_label_pc_ea38 ], [ %v0_ea64, %dec_label_pc_eb2c ]
  %stack_var_-1868.1 = phi i8 [ %tmp250, %dec_label_pc_eba8 ], [ %stack_var_-1868.0, %dec_label_pc_ebb0.loopexit ], [ %stack_var_-1868.0, %dec_label_pc_ea00 ], [ %stack_var_-1868.0, %dec_label_pc_ea38 ], [ %stack_var_-1868.0, %dec_label_pc_eb2c ]
  %stack_var_-1876.1 = phi i8* [ %tmp278, %dec_label_pc_eba8 ], [ %stack_var_-1876.0, %dec_label_pc_ebb0.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_ea00 ], [ %stack_var_-1876.0, %dec_label_pc_ea38 ], [ %stack_var_-1876.0, %dec_label_pc_eb2c ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_ebc4412 = load i32, i32* @sp, align 4
  %v3_ebc4413 = add i32 %v2_ebc4412, 1664
  %v4_ebc4414 = inttoptr i32 %v3_ebc4413 to i32*
  store i32 0, i32* %v4_ebc4414, align 4
  br label %dec_label_pc_ebb8.dec_label_pc_ebb8_crit_edge

dec_label_pc_ebb8.dec_label_pc_ebb8_crit_edge:    ; preds = %dec_label_pc_ebb0, %dec_label_pc_ebb8.dec_label_pc_ebb8_crit_edge
  %v0_ebb8.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_ebc4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ebb8 = add i32 %v0_ebb8.pre, 1664
  store i32 %v1_ebb8, i32* %ip.global-to-local, align 4
  %v1_ebbc = add i32 %v0_ebb8.pre, 4
  store i32 %v1_ebbc, i32* %r3.global-to-local, align 4
  %v7_ebc0 = icmp eq i32 %v1_ebbc, 128
  %v2_ebc4 = load i32, i32* @sp, align 4
  %v3_ebc4 = add i32 %v2_ebc4, %v1_ebb8
  %v4_ebc4 = inttoptr i32 %v3_ebc4 to i32*
  store i32 %v0_ebc4.pre, i32* %v4_ebc4, align 4
  br i1 %v7_ebc0, label %dec_label_pc_ebcc, label %dec_label_pc_ebb8.dec_label_pc_ebb8_crit_edge

dec_label_pc_ebcc:                                ; preds = %dec_label_pc_ebb8.dec_label_pc_ebb8_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ebcc = load i32, i32* %r2.global-to-local, align 4
  %v1_ebd0406 = add i32 %v0_ebcc, 1536
  store i32 %v1_ebd0406, i32* %lr.global-to-local, align 4
  %v1_ebd4407 = add i32 %v0_ebcc, 4
  store i32 %v1_ebd4407, i32* %r3.global-to-local, align 4
  %v7_ebd8408 = icmp eq i32 %v1_ebd4407, 128
  %v2_ebdc409 = load i32, i32* @sp, align 4
  %v3_ebdc410 = add i32 %v2_ebdc409, %v1_ebd0406
  %v4_ebdc411 = inttoptr i32 %v3_ebdc410 to i32*
  store i32 %v0_ebcc, i32* %v4_ebdc411, align 4
  br i1 %v7_ebd8408, label %dec_label_pc_ebe4, label %dec_label_pc_ebd0.dec_label_pc_ebd0_crit_edge

dec_label_pc_ebd0.dec_label_pc_ebd0_crit_edge:    ; preds = %dec_label_pc_ebcc, %dec_label_pc_ebd0.dec_label_pc_ebd0_crit_edge
  %v0_ebd0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_ebdc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ebd0 = add i32 %v0_ebd0.pre, 1536
  store i32 %v1_ebd0, i32* %lr.global-to-local, align 4
  %v1_ebd4 = add i32 %v0_ebd0.pre, 4
  store i32 %v1_ebd4, i32* %r3.global-to-local, align 4
  %v7_ebd8 = icmp eq i32 %v1_ebd4, 128
  %v2_ebdc = load i32, i32* @sp, align 4
  %v3_ebdc = add i32 %v2_ebdc, %v1_ebd0
  %v4_ebdc = inttoptr i32 %v3_ebdc to i32*
  store i32 %v0_ebdc.pre, i32* %v4_ebdc, align 4
  br i1 %v7_ebd8, label %dec_label_pc_ebe4, label %dec_label_pc_ebd0.dec_label_pc_ebd0_crit_edge

dec_label_pc_ebe4:                                ; preds = %dec_label_pc_ebd0.dec_label_pc_ebd0_crit_edge, %dec_label_pc_ebcc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ebe4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ebe4, i32* @r6, align 4
  store i32 %v0_ebe4, i32* @r5, align 4
  store i32 %v0_ebe4, i32* @r7, align 4
  store i32 %v0_ebe4, i32* %stack_var_-48, align 4
  %v2_eca8 = ptrtoint i32* %stack_var_-36 to i32
  %v2_ed20 = ptrtoint i32* %stack_var_-76 to i32
  %v2_ed24 = ptrtoint i32* %stack_var_-348 to i32
  %v2_ed2c = ptrtoint i32* %stack_var_-64 to i32
  %v2_ed30 = ptrtoint i32* %stack_var_-220 to i32
  %v2_f638 = ptrtoint i32* %stack_var_-41 to i32
  %v2_f648 = ptrtoint i32* %stack_var_-73 to i32
  %v2_eed8 = ptrtoint i8* %stack_var_-52 to i32
  %v2_eee0 = bitcast i8* %stack_var_-52 to i32*
  %v2_eeec = ptrtoint i32* %stack_var_-56 to i32
  %v2_f90c = ptrtoint i32* %stack_var_-92 to i32
  %v3_f914 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_ec60

dec_label_pc_ebf8:                                ; preds = %dec_label_pc_ec88, %dec_label_pc_ec60
  %storemerge232 = phi i32 [ 30, %dec_label_pc_ec60 ], [ 5, %dec_label_pc_ec88 ]
  store i32 %storemerge232, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1e8.112 to i32), i32* %r2.global-to-local, align 4
  %v2_ebfc = load i32, i32* @global_var_1b1e8.112, align 4
  store i32 %v2_ebfc, i32* %r3.global-to-local, align 4
  %v1_ec00 = add i32 %v2_ec74, 8
  %v2_ec00 = inttoptr i32 %v1_ec00 to i32*
  %v3_ec00 = load i32, i32* %v2_ec00, align 4
  store i32 %v3_ec00, i32* %r2.global-to-local, align 4
  %v2_ec04 = sub i32 %v2_ebfc, %v3_ec00
  store i32 %v2_ec04, i32* %r3.global-to-local, align 4
  %v3_ec08 = icmp uge i32 %v2_ec04, %storemerge232
  store i1 %v3_ec08, i1* %cpsr_c.global-to-local, align 1
  %v9_ec08 = icmp eq i32 %v2_ec04, %storemerge232
  store i1 %v9_ec08, i1* %cpsr_z.global-to-local, align 1
  %v2_ec0c = xor i1 %v9_ec08, true
  %v3_ec0c = and i1 %v3_ec08, %v2_ec0c
  br i1 %v3_ec0c, label %dec_label_pc_eccc, label %dec_label_pc_ec10

dec_label_pc_ec10:                                ; preds = %dec_label_pc_ebf8
  store i1 %v2_ec7c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ec7c, i1* %cpsr_z.global-to-local, align 1
  %v1_ec98 = add i32 %v2_ec74, 4
  %v2_ec98 = inttoptr i32 %v1_ec98 to i32*
  %v3_ec98 = load i32, i32* %v2_ec98, align 4
  br i1 %v7_ec7c, label %dec_label_pc_ec98, label %dec_label_pc_ec18

dec_label_pc_ec18:                                ; preds = %dec_label_pc_ec10
  store i32 %v3_ec98, i32* %ip.global-to-local, align 4
  %v3_ec20 = udiv i32 %v3_ec98, 32
  store i32 %v2_eca8, i32* %r0.global-to-local, align 4
  %v3_ec28 = mul nuw nsw i32 %v3_ec20, 4
  %v2_ec2c = add i32 %v3_ec28, %v2_eca8
  store i32 %v2_ec2c, i32* %r3.global-to-local, align 4
  %v1_ec30 = add i32 %v2_ec2c, -184
  %v2_ec30 = inttoptr i32 %v1_ec30 to i32*
  %v3_ec30 = load i32, i32* %v2_ec30, align 4
  %v1_ec34 = urem i32 %v3_ec98, 32
  store i32 %v1_ec34, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_ec3c = shl i32 1, %v1_ec34
  %v8_ec3c = or i32 %v3_ec30, %v7_ec3c
  store i32 %v8_ec3c, i32* %r2.global-to-local, align 4
  store i32 %v8_ec3c, i32* %v2_ec30, align 4
  %v0_ec44 = load i32, i32* @r6, align 4
  %v1_ec44 = load i32, i32* %ip.global-to-local, align 4
  %v2_ec44 = sub i32 %v0_ec44, %v1_ec44
  %v3_ec44 = icmp uge i32 %v0_ec44, %v1_ec44
  store i1 %v3_ec44, i1* %cpsr_c.global-to-local, align 1
  %v4_ec44 = xor i32 %v1_ec44, %v0_ec44
  %v5_ec44 = xor i32 %v2_ec44, %v0_ec44
  %v6_ec44 = and i32 %v5_ec44, %v4_ec44
  %v7_ec44 = icmp slt i32 %v6_ec44, 0
  %v8_ec44 = icmp slt i32 %v2_ec44, 0
  %v9_ec44 = icmp eq i32 %v0_ec44, %v1_ec44
  store i1 %v9_ec44, i1* %cpsr_z.global-to-local, align 1
  %v2_ec48 = xor i1 %v8_ec44, %v7_ec44
  br i1 %v2_ec48, label %bb314, label %bb315

bb314:                                            ; preds = %dec_label_pc_ec18
  store i32 %v1_ec44, i32* @r6, align 4
  br label %bb315

bb315:                                            ; preds = %dec_label_pc_ec88, %dec_label_pc_f930, %dec_label_pc_ed00, %bb317, %dec_label_pc_ec18, %bb314
  %v3_ec4c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_ec4c, i32* %r3.global-to-local, align 4
  %v1_ec50 = add i32 %v3_ec4c, 1
  store i32 %v1_ec50, i32* %r2.global-to-local, align 4
  %v2_ec54 = icmp ugt i32 %v1_ec50, 254
  store i1 %v2_ec54, i1* %cpsr_c.global-to-local, align 1
  %v7_ec54 = icmp eq i32 %v1_ec50, 255
  store i1 %v7_ec54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ec50, i32* %stack_var_-48, align 4
  %v8_ec5c = icmp sgt i32 %v1_ec50, 255
  br i1 %v8_ec5c, label %dec_label_pc_ed0c, label %dec_label_pc_ec60

dec_label_pc_ec60:                                ; preds = %bb315, %dec_label_pc_ebe4
  %v0_ec6c = phi i32 [ %v1_ec50, %bb315 ], [ %v0_ebe4, %dec_label_pc_ebe4 ]
  store i32 ptrtoint (i32* @global_var_1b244.124 to i32), i32* %r0.global-to-local, align 4
  %v3_ec64 = mul i32 %v0_ec6c, 256
  store i32 %v3_ec64, i32* %r3.global-to-local, align 4
  %v2_ec68 = load i32, i32* @global_var_1b244.124, align 4
  store i32 %v2_ec68, i32* %r1.global-to-local, align 4
  %v2_ec70 = mul i32 %v0_ec6c, 288
  store i32 %v2_ec70, i32* %r2.global-to-local, align 4
  %v2_ec74 = add i32 %v2_ec68, %v2_ec70
  store i32 %v2_ec74, i32* @r4, align 4
  %v1_ec78 = add i32 %v2_ec74, 12
  %v2_ec78 = inttoptr i32 %v1_ec78 to i32*
  %v3_ec78 = load i32, i32* %v2_ec78, align 4
  store i32 %v3_ec78, i32* %ip.global-to-local, align 4
  %v2_ec7c = icmp ne i32 %v3_ec78, 0
  store i1 %v2_ec7c, i1* %cpsr_c.global-to-local, align 1
  %v7_ec7c = icmp eq i32 %v3_ec78, 1
  store i1 %v7_ec7c, i1* %cpsr_z.global-to-local, align 1
  %v2_ec80 = xor i1 %v7_ec7c, true
  %v3_ec80 = and i1 %v2_ec7c, %v2_ec80
  br i1 %v3_ec80, label %dec_label_pc_ebf8, label %dec_label_pc_ec88

dec_label_pc_ec88:                                ; preds = %dec_label_pc_ec60
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec88 = icmp eq i32 %v3_ec78, 0
  store i1 %v2_ec88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec88, label %bb315, label %dec_label_pc_ebf8

dec_label_pc_ec98:                                ; preds = %dec_label_pc_ec10
  store i32 %v3_ec98, i32* %r0.global-to-local, align 4
  %v3_eca0 = udiv i32 %v3_ec98, 32
  %v3_eca4 = mul nuw nsw i32 %v3_eca0, 4
  store i32 %v2_eca8, i32* %lr.global-to-local, align 4
  %v2_ecac = add i32 %v3_eca4, %v2_eca8
  store i32 %v2_ecac, i32* %r3.global-to-local, align 4
  %v1_ecb0 = add i32 %v2_ecac, -312
  %v2_ecb0 = inttoptr i32 %v1_ecb0 to i32*
  %v3_ecb0 = load i32, i32* %v2_ecb0, align 4
  %v1_ecb4 = urem i32 %v3_ec98, 32
  store i32 %v1_ecb4, i32* %r1.global-to-local, align 4
  %v7_ecb8 = shl i32 1, %v1_ecb4
  %v8_ecb8 = or i32 %v3_ecb0, %v7_ecb8
  store i32 %v8_ecb8, i32* %r2.global-to-local, align 4
  %v0_ecbc = load i32, i32* @r5, align 4
  %v2_ecbc = sub i32 %v0_ecbc, %v3_ec98
  %v3_ecbc = icmp uge i32 %v0_ecbc, %v3_ec98
  store i1 %v3_ecbc, i1* %cpsr_c.global-to-local, align 1
  %v4_ecbc = xor i32 %v0_ecbc, %v3_ec98
  %v5_ecbc = xor i32 %v2_ecbc, %v0_ecbc
  %v6_ecbc = and i32 %v5_ecbc, %v4_ecbc
  %v7_ecbc = icmp slt i32 %v6_ecbc, 0
  %v8_ecbc = icmp slt i32 %v2_ecbc, 0
  %v9_ecbc = icmp eq i32 %v0_ecbc, %v3_ec98
  store i1 %v9_ecbc, i1* %cpsr_z.global-to-local, align 1
  %v2_ecc0 = xor i1 %v8_ecbc, %v7_ecbc
  br i1 %v2_ecc0, label %bb316, label %bb317

bb316:                                            ; preds = %dec_label_pc_ec98
  store i32 %v3_ec98, i32* @r5, align 4
  br label %bb317

bb317:                                            ; preds = %dec_label_pc_ec98, %bb316
  store i32 %v8_ecb8, i32* %v2_ecb0, align 4
  br label %bb315

dec_label_pc_eccc:                                ; preds = %dec_label_pc_ebf8
  %v1_eccc = add i32 %v2_ec74, 4
  %v2_eccc = inttoptr i32 %v1_eccc to i32*
  %v3_eccc = load i32, i32* %v2_eccc, align 4
  store i32 %v3_eccc, i32* %r0.global-to-local, align 4
  %v1_ecd0 = call i32 @function_10660(i32 %v3_eccc)
  store i32 %v1_ecd0, i32* %r0.global-to-local, align 4
  %v0_ecd4 = load i32, i32* @r4, align 4
  %v1_ecd4 = add i32 %v0_ecd4, 12
  %v2_ecd4 = inttoptr i32 %v1_ecd4 to i32*
  %v3_ecd4 = load i32, i32* %v2_ecd4, align 4
  store i32 %v3_ecd4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ecdc = icmp ugt i32 %v3_ecd4, 1
  store i1 %v2_ecdc, i1* %cpsr_c.global-to-local, align 1
  %v7_ecdc = icmp eq i32 %v3_ecd4, 2
  store i1 %v7_ecdc, i1* %cpsr_z.global-to-local, align 1
  %v2_ece0 = add i32 %v0_ecd4, 4
  %v3_ece0 = inttoptr i32 %v2_ece0 to i32*
  store i32 -1, i32* %v3_ece0, align 4
  %v2_ece4 = xor i1 %v2_ecdc, true
  %v3_ece4 = or i1 %v7_ecdc, %v2_ece4
  br i1 %v3_ece4, label %dec_label_pc_f930, label %dec_label_pc_ece8

dec_label_pc_ece8:                                ; preds = %dec_label_pc_eccc
  %v0_ece8 = load i32, i32* @r4, align 4
  %v1_ece8 = add i32 %v0_ece8, 284
  %v2_ece8 = inttoptr i32 %v1_ece8 to i8*
  %v3_ece8 = load i8, i8* %v2_ece8, align 1
  %v4_ece8 = zext i8 %v3_ece8 to i32
  %v1_ecec = add nuw nsw i32 %v4_ece8, 1
  %v1_ecf0 = urem i32 %v1_ecec, 256
  store i32 %v1_ecf0, i32* %r3.global-to-local, align 4
  %v2_ecf4 = icmp ugt i32 %v1_ecf0, 9
  store i1 %v2_ecf4, i1* %cpsr_c.global-to-local, align 1
  %v7_ecf4 = icmp eq i32 %v1_ecf0, 10
  store i1 %v7_ecf4, i1* %cpsr_z.global-to-local, align 1
  %v1_ecf8 = trunc i32 %v1_ecec to i8
  store i8 %v1_ecf8, i8* %v2_ece8, align 1
  %v0_ecfc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ecfc, label %dec_label_pc_f930, label %dec_label_pc_ed00

dec_label_pc_ed00:                                ; preds = %dec_label_pc_ece8
  %v0_ed00 = load i32, i32* @r4, align 4
  store i32 %v0_ed00, i32* @r0, align 4
  %v0_ed04 = call i32 @function_d3bc()
  store i32 %v0_ed04, i32* %r0.global-to-local, align 4
  br label %bb315

dec_label_pc_ed0c:                                ; preds = %bb315
  store i32 1, i32* %stack_var_-64, align 4
  %v0_ed14 = load i32, i32* @r6, align 4
  %v1_ed14 = load i32, i32* @r5, align 4
  %v2_ed14 = sub i32 %v0_ed14, %v1_ed14
  %v3_ed14 = icmp uge i32 %v0_ed14, %v1_ed14
  store i1 %v3_ed14, i1* %cpsr_c.global-to-local, align 1
  %v4_ed14 = xor i32 %v1_ed14, %v0_ed14
  %v5_ed14 = xor i32 %v2_ed14, %v0_ed14
  %v6_ed14 = and i32 %v5_ed14, %v4_ed14
  %v7_ed14 = icmp slt i32 %v6_ed14, 0
  %v8_ed14 = icmp slt i32 %v2_ed14, 0
  %v9_ed14 = icmp eq i32 %v0_ed14, %v1_ed14
  store i1 %v9_ed14, i1* %cpsr_z.global-to-local, align 1
  %v2_ed18 = xor i1 %v8_ed14, %v7_ed14
  %v1_ed14.v0_ed14 = select i1 %v2_ed18, i32 %v1_ed14, i32 %v0_ed14
  store i32 %v2_ed24, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_ed2c, i32* %ip.global-to-local, align 4
  store i32 %v2_ed30, i32* %r1.global-to-local, align 4
  %v1_ed34 = add i32 %v1_ed14.v0_ed14, 1
  store i32 %v1_ed34, i32* %r0.global-to-local, align 4
  %v5_ed40 = call i32 @function_10854(i32 %v1_ed34, i32 %v2_ed30, i32 %v2_ed24, i32 0, i32 %v2_ed2c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ed48 = call i32 @function_10904(i32* null)
  store i32 ptrtoint (i32* @global_var_1b1e8.112 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_ed48, i32* @global_var_1b1e8.112, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  br label %dec_label_pc_eda0

dec_label_pc_ed64:                                ; preds = %dec_label_pc_edc4, %dec_label_pc_eeb0
  %v0_ed7c = phi i32 [ %v3_edb8, %dec_label_pc_edc4 ], [ %v0_ed64.pre, %dec_label_pc_eeb0 ]
  %v3_ed64 = udiv i32 %v0_ed7c, 32
  %v3_ed6c = mul nuw nsw i32 %v3_ed64, 4
  store i32 %v2_eca8, i32* @lr, align 4
  %v2_ed74 = add i32 %v3_ed6c, %v2_eca8
  store i32 %v2_ed74, i32* %r3.global-to-local, align 4
  %v1_ed78 = add i32 %v2_ed74, -184
  %v2_ed78 = inttoptr i32 %v1_ed78 to i32*
  %v3_ed78 = load i32, i32* %v2_ed78, align 4
  %v1_ed7c = urem i32 %v0_ed7c, 32
  store i32 %v1_ed7c, i32* %r1.global-to-local, align 4
  %v2_ed80 = add nsw i32 %v1_ed7c, -1
  %v3_ed80 = shl i32 1, %v2_ed80
  %v4_ed80 = and i32 %v3_ed80, %v3_ed78
  %v5_ed80 = icmp ne i32 %v4_ed80, 0
  store i1 %v5_ed80, i1* %cpsr_c.global-to-local, align 1
  %v6_ed80 = lshr i32 %v3_ed78, %v1_ed7c
  store i32 %v6_ed80, i32* %r2.global-to-local, align 4
  %v1_ed84 = urem i32 %v6_ed80, 2
  %v2_ed84 = icmp eq i32 %v1_ed84, 0
  store i1 %v2_ed84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed84, label %dec_label_pc_ed8c, label %dec_label_pc_ef3c.preheader

dec_label_pc_ef3c.preheader:                      ; preds = %dec_label_pc_ed64
  %v0_ef3c112 = load i32, i32* @r5, align 4
  %v1_ef3c113 = add i32 %v0_ef3c112, 12
  %v2_ef3c114 = inttoptr i32 %v1_ef3c113 to i32*
  %v3_ef3c115 = load i32, i32* %v2_ef3c114, align 4
  store i32 %v3_ef3c115, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef40111117 = icmp eq i32 %v3_ef3c115, 0
  store i1 %v2_ef40111117, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef40111117, label %dec_label_pc_ed8c, label %dec_label_pc_ef48.lr.ph

dec_label_pc_ed8c:                                ; preds = %dec_label_pc_ef3c.loopexit, %dec_label_pc_ef40.backedge, %dec_label_pc_ef3c.preheader, %dec_label_pc_ed64, %.thread228, %dec_label_pc_f7ac, %dec_label_pc_eda0, %dec_label_pc_f97c, %dec_label_pc_f7ec
  %v3_ed8c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_ed8c, i32* %r3.global-to-local, align 4
  %v1_ed90 = add i32 %v3_ed8c, 1
  store i32 %v1_ed90, i32* %r2.global-to-local, align 4
  %v2_ed94 = icmp ugt i32 %v1_ed90, 254
  store i1 %v2_ed94, i1* %cpsr_c.global-to-local, align 1
  %v7_ed94 = icmp eq i32 %v1_ed90, 255
  store i1 %v7_ed94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ed90, i32* %stack_var_-48, align 4
  %v8_ed9c = icmp sgt i32 %v1_ed90, 255
  br i1 %v8_ed9c, label %dec_label_pc_e744, label %dec_label_pc_eda0

dec_label_pc_eda0:                                ; preds = %dec_label_pc_ed8c, %dec_label_pc_ed0c
  %v0_edac = phi i32 [ %v1_ed90, %dec_label_pc_ed8c ], [ 0, %dec_label_pc_ed0c ]
  store i32 ptrtoint (i32* @global_var_1b244.124 to i32), i32* %ip.global-to-local, align 4
  %v3_eda4 = mul i32 %v0_edac, 256
  store i32 %v3_eda4, i32* %r3.global-to-local, align 4
  %v2_eda8 = load i32, i32* @global_var_1b244.124, align 4
  store i32 %v2_eda8, i32* %r1.global-to-local, align 4
  %v2_edb0 = mul i32 %v0_edac, 288
  store i32 %v2_edb0, i32* %r2.global-to-local, align 4
  %v2_edb4 = add i32 %v2_eda8, %v2_edb0
  store i32 %v2_edb4, i32* @r5, align 4
  %v1_edb8 = add i32 %v2_edb4, 4
  %v2_edb8 = inttoptr i32 %v1_edb8 to i32*
  %v3_edb8 = load i32, i32* %v2_edb8, align 4
  store i32 %v3_edb8, i32* @r4, align 4
  %v2_edbc = icmp eq i32 %v3_edb8, -1
  store i1 %v2_edbc, i1* %cpsr_c.global-to-local, align 1
  %v7_edbc = icmp eq i32 %v3_edb8, -1
  store i1 %v7_edbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edbc, label %dec_label_pc_ed8c, label %dec_label_pc_edc4

dec_label_pc_edc4:                                ; preds = %dec_label_pc_eda0
  %v3_edc4 = udiv i32 %v3_edb8, 32
  %v3_edcc = mul nuw nsw i32 %v3_edc4, 4
  store i32 %v2_eca8, i32* %lr.global-to-local, align 4
  %v2_edd4 = add i32 %v3_edcc, %v2_eca8
  store i32 %v2_edd4, i32* %r3.global-to-local, align 4
  %v1_edd8 = add i32 %v2_edd4, -312
  %v2_edd8 = inttoptr i32 %v1_edd8 to i32*
  %v3_edd8 = load i32, i32* %v2_edd8, align 4
  %v1_eddc = urem i32 %v3_edb8, 32
  store i32 %v1_eddc, i32* %r1.global-to-local, align 4
  %v2_ede0 = add nsw i32 %v1_eddc, -1
  %v3_ede0 = shl i32 1, %v2_ede0
  %v4_ede0 = and i32 %v3_edd8, %v3_ede0
  %v5_ede0 = icmp ne i32 %v4_ede0, 0
  store i1 %v5_ede0, i1* %cpsr_c.global-to-local, align 1
  %v6_ede0 = lshr i32 %v3_edd8, %v1_eddc
  store i32 %v6_ede0, i32* %r2.global-to-local, align 4
  %v1_ede4 = urem i32 %v6_ede0, 2
  %v2_ede4 = icmp eq i32 %v1_ede4, 0
  store i1 %v2_ede4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ede4, label %dec_label_pc_ed64, label %dec_label_pc_edec

dec_label_pc_edec:                                ; preds = %dec_label_pc_edc4
  store i32 4, i32* %r2.global-to-local, align 4
  store i8 4, i8* %stack_var_-52, align 1
  store i32 %v2_eeec, i32* %r3.global-to-local, align 4
  store i32 %v2_eed8, i32* %ip.global-to-local, align 4
  store i32 %v3_edb8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v6_ee1c = call i32 @function_10ab0(i32 %v3_edb8, i32 1, i32 4, i32* nonnull %stack_var_-56, i32 %v2_eed8)
  %v3_ee20 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_ee20, i32* %r3.global-to-local, align 4
  %v2_ee24 = or i32 %v3_ee20, %v6_ee1c
  store i32 %v2_ee24, i32* %r0.global-to-local, align 4
  %v4_ee24 = icmp eq i32 %v2_ee24, 0
  store i1 %v4_ee24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_ee24, label %dec_label_pc_ee2c, label %dec_label_pc_f97c

dec_label_pc_ee2c:                                ; preds = %dec_label_pc_edec
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_ee30 = load i32, i32* @r5, align 4
  %v2_ee30 = add i32 %v1_ee30, 12
  %v3_ee30 = inttoptr i32 %v2_ee30 to i32*
  store i32 2, i32* %v3_ee30, align 4
  %v0_ee34 = call i32 @function_d228()
  store i32 %v0_ee34, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1b1e4.118 to i32), i32* %r3.global-to-local, align 4
  %v3_ee3c = load i8, i8* @global_var_1b1e5.119, align 1
  %v4_ee3c = zext i8 %v3_ee3c to i32
  store i32 %v4_ee3c, i32* %r2.global-to-local, align 4
  %v2_ee40 = load i8, i8* bitcast (i8** @global_var_1b1e4.118 to i8*), align 4
  %v3_ee40 = zext i8 %v2_ee40 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_ee44 = mul nuw nsw i32 %v4_ee3c, 256
  %v5_ee44 = or i32 %v3_ee40, %v4_ee44
  store i32 %v5_ee44, i32* %r1.global-to-local, align 4
  %v2_ee48 = call i32 @function_103e8(i32 %v0_ee34, i32 %v5_ee44)
  store i32 ptrtoint (i32* @global_var_1b1b4.114 to i32), i32* %r3.global-to-local, align 4
  %v2_ee50 = load i32, i32* @global_var_1b1b4.114, align 4
  store i32 %v2_ee50, i32* %lr.global-to-local, align 4
  %v1_ee58 = load i32, i32* @r6, align 4
  %v9_ee58 = icmp eq i32 %v2_ee50, %v1_ee58
  store i1 %v9_ee58, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_ee5c = urem i32 %v2_ee48, 65536
  store i32 %v3_ee5c, i32* %r0.global-to-local, align 4
  %v7_ee60 = icmp sgt i32 %v2_ee50, %v1_ee58
  br i1 %v7_ee60, label %dec_label_pc_ee64, label %dec_label_pc_f974

dec_label_pc_ee64:                                ; preds = %dec_label_pc_ee2c
  %v2_ee68 = load i32, i32* @global_var_1b1e0.116, align 4
  store i32 %v2_ee68, i32* %r3.global-to-local, align 4
  store i32 %v1_ee58, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ee84

dec_label_pc_ee74:                                ; preds = %dec_label_pc_ee9c, %dec_label_pc_ee84
  %v1_ee74 = add i32 %v0_ee74, 1
  store i32 %v1_ee74, i32* %ip.global-to-local, align 4
  %v3_ee78 = icmp uge i32 %v2_ee50, %v1_ee74
  store i1 %v3_ee78, i1* %cpsr_c.global-to-local, align 1
  %v9_ee78 = icmp eq i32 %v2_ee50, %v1_ee74
  store i1 %v9_ee78, i1* %cpsr_z.global-to-local, align 1
  %v1_ee7c = add i32 %v0_ee7c, 16
  store i32 %v1_ee7c, i32* %r3.global-to-local, align 4
  br i1 %v9_ee78, label %dec_label_pc_f974, label %dec_label_pc_ee84

dec_label_pc_ee84:                                ; preds = %dec_label_pc_ee74, %dec_label_pc_ee64
  %v0_ee74 = phi i32 [ %v1_ee74, %dec_label_pc_ee74 ], [ %v1_ee58, %dec_label_pc_ee64 ]
  %v0_ee7c = phi i32 [ %v1_ee7c, %dec_label_pc_ee74 ], [ %v2_ee68, %dec_label_pc_ee64 ]
  store i32 %v0_ee7c, i32* %r1.global-to-local, align 4
  %v1_ee88 = add i32 %v0_ee7c, 9
  %v2_ee88 = inttoptr i32 %v1_ee88 to i8*
  %v3_ee88 = load i8, i8* %v2_ee88, align 1
  %v4_ee88 = zext i8 %v3_ee88 to i32
  store i32 %v4_ee88, i32* %r2.global-to-local, align 4
  %v1_ee8c = add i32 %v0_ee7c, 8
  %v2_ee8c = inttoptr i32 %v1_ee8c to i8*
  %v3_ee8c = load i8, i8* %v2_ee8c, align 1
  %v4_ee8c = zext i8 %v3_ee8c to i32
  %v4_ee90 = mul nuw nsw i32 %v4_ee88, 256
  %v5_ee90 = or i32 %v4_ee8c, %v4_ee90
  store i32 %v5_ee90, i32* %r3.global-to-local, align 4
  %v3_ee94 = icmp uge i32 %v5_ee90, %v3_ee5c
  store i1 %v3_ee94, i1* %cpsr_c.global-to-local, align 1
  %v9_ee94 = icmp eq i32 %v5_ee90, %v3_ee5c
  store i1 %v9_ee94, i1* %cpsr_z.global-to-local, align 1
  %v2_ee98 = xor i1 %v9_ee94, true
  %v3_ee98 = and i1 %v3_ee94, %v2_ee98
  br i1 %v3_ee98, label %dec_label_pc_ee74, label %dec_label_pc_ee9c

dec_label_pc_ee9c:                                ; preds = %dec_label_pc_ee84
  %v1_ee9c = add i32 %v0_ee7c, 10
  %v2_ee9c = inttoptr i32 %v1_ee9c to i8*
  %v3_ee9c = load i8, i8* %v2_ee9c, align 1
  %v4_ee9c = zext i8 %v3_ee9c to i32
  store i32 %v4_ee9c, i32* %r3.global-to-local, align 4
  %v1_eea0 = add i32 %v0_ee7c, 11
  %v2_eea0 = inttoptr i32 %v1_eea0 to i8*
  %v3_eea0 = load i8, i8* %v2_eea0, align 1
  %v4_eea0 = zext i8 %v3_eea0 to i32
  store i32 %v4_eea0, i32* %r2.global-to-local, align 4
  %v4_eea4 = mul nuw nsw i32 %v4_eea0, 256
  %v5_eea4 = or i32 %v4_eea4, %v4_ee9c
  store i32 %v5_eea4, i32* %r3.global-to-local, align 4
  %v3_eea8 = icmp uge i32 %v5_eea4, %v3_ee5c
  store i1 %v3_eea8, i1* %cpsr_c.global-to-local, align 1
  %v9_eea8 = icmp eq i32 %v5_eea4, %v3_ee5c
  store i1 %v9_eea8, i1* %cpsr_z.global-to-local, align 1
  %v2_eeac = xor i1 %v3_eea8, true
  %v3_eeac = or i1 %v9_eea8, %v2_eeac
  br i1 %v3_eeac, label %dec_label_pc_ee74, label %dec_label_pc_eeb0

dec_label_pc_eeb0:                                ; preds = %dec_label_pc_ee9c, %dec_label_pc_f974
  %v0_eeb8 = phi i32 [ 0, %dec_label_pc_f974 ], [ %v0_ee7c, %dec_label_pc_ee9c ]
  %v0_eeb0 = load i32, i32* @r5, align 4
  %v1_eeb0 = add i32 %v0_eeb0, 4
  %v2_eeb0 = inttoptr i32 %v1_eeb0 to i32*
  %v3_eeb0 = load i32, i32* %v2_eeb0, align 4
  store i32 %v3_eeb0, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_eeb8 = inttoptr i32 %v0_eeb0 to i32*
  store i32 %v0_eeb8, i32* %v2_eeb8, align 4
  %v0_eebc = load i32, i32* %ip.global-to-local, align 4
  %v1_eebc = load i32, i32* @r5, align 4
  %v2_eebc = add i32 %v1_eebc, 24
  %v3_eebc = inttoptr i32 %v2_eebc to i32*
  store i32 %v0_eebc, i32* %v3_eebc, align 4
  %v0_ed64.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ed64

dec_label_pc_eec4:                                ; preds = %dec_label_pc_f104, %dec_label_pc_f0d8, %dec_label_pc_f120
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_eec8 = call i32 @function_fb34(i32 12)
  store i32 13, i32* %r0.global-to-local, align 4
  %v1_eed0 = call i32 @function_fb34(i32 13)
  store i32 %v2_eed8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_eee0 = call i32 @function_fa50(i32 12, i32* %v2_eee0)
  store i32 %v3_eee0, i32* @r4, align 4
  store i32 %v2_eeec, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r0.global-to-local, align 4
  %v3_eef4 = call i32 @function_fa50(i32 13, i32* nonnull %stack_var_-56)
  %v3_eef8 = load i8, i8* %stack_var_-52, align 1
  %v4_eef8 = sext i8 %v3_eef8 to i32
  %sext7 = mul i32 %v3_eef4, 16777216
  %v1_eefc = sdiv i32 %sext7, 16777216
  store i32 %v1_eefc, i32* @r6, align 4
  %v0_ef00 = load i32, i32* @r4, align 4
  store i32 %v0_ef00, i32* %r2.global-to-local, align 4
  %v1_ef04 = add nsw i32 %v4_eef8, -1
  store i32 %v1_ef04, i32* %r3.global-to-local, align 4
  %v0_ef08 = load i32, i32* @sl, align 4
  store i32 %v0_ef08, i32* %r0.global-to-local, align 4
  %v0_ef0c = load i32, i32* @r5, align 4
  %v1_ef0c = add i32 %v0_ef0c, 24
  %v2_ef0c = inttoptr i32 %v1_ef0c to i32*
  %v3_ef0c = load i32, i32* %v2_ef0c, align 4
  store i32 %v3_ef0c, i32* %r1.global-to-local, align 4
  %v4_ef10 = call i32 @function_1001c(i32 %v0_ef08, i32 %v3_ef0c, i32 %v0_ef00, i32 %v1_ef04)
  store i32 %v4_ef10, i32* %r0.global-to-local, align 4
  %v2_ef14 = icmp eq i32 %v4_ef10, -1
  store i1 %v2_ef14, i1* %cpsr_c.global-to-local, align 1
  %v7_ef14 = icmp eq i32 %v4_ef10, -1
  store i1 %v7_ef14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef14, label %dec_label_pc_f86c, label %dec_label_pc_ef24

dec_label_pc_ef24:                                ; preds = %dec_label_pc_f86c, %dec_label_pc_eec4
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_ef28 = call i32 @function_fa7c(i32 12)
  store i32 13, i32* %r0.global-to-local, align 4
  %v1_ef30 = call i32 @function_fa7c(i32 13)
  store i32 %v1_ef30, i32* %r0.global-to-local, align 4
  %v0_ef34 = load i32, i32* @r7, align 4
  %v3_ef34 = icmp eq i32 %v0_ef34, -1
  store i1 %v3_ef34, i1* %cpsr_c.global-to-local, align 1
  %v8_ef34 = icmp eq i32 %v0_ef34, -1
  store i1 %v8_ef34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ef34, label %dec_label_pc_ef3c.loopexit, label %dec_label_pc_f12c

dec_label_pc_ef3c.loopexit:                       ; preds = %dec_label_pc_f0c8, %dec_label_pc_f6e8, %dec_label_pc_efbc, %dec_label_pc_ef24, %dec_label_pc_f6d4
  %v0_ef3c = load i32, i32* @r5, align 4
  %v1_ef3c = add i32 %v0_ef3c, 12
  %v2_ef3c = inttoptr i32 %v1_ef3c to i32*
  %v3_ef3c = load i32, i32* %v2_ef3c, align 4
  store i32 %v3_ef3c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef40111 = icmp eq i32 %v3_ef3c, 0
  store i1 %v2_ef40111, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef40111, label %dec_label_pc_ed8c, label %dec_label_pc_ef48.lr.ph

dec_label_pc_ef48.lr.ph:                          ; preds = %dec_label_pc_ef3c.preheader, %dec_label_pc_ef3c.loopexit
  %v0_ef48145 = phi i32 [ %v0_ef3c, %dec_label_pc_ef3c.loopexit ], [ %v0_ef3c112, %dec_label_pc_ef3c.preheader ]
  br label %dec_label_pc_ef48

dec_label_pc_ef48:                                ; preds = %dec_label_pc_ef40.backedge.thread, %dec_label_pc_ef40.backedge, %dec_label_pc_ef40.backedge.thread455, %dec_label_pc_ef48.lr.ph
  %v0_f824 = phi i32 [ %v0_ef48145, %dec_label_pc_ef48.lr.ph ], [ %v0_ef48142, %dec_label_pc_ef40.backedge ], [ %v0_efbc, %dec_label_pc_ef40.backedge.thread ], [ %v0_efbc, %dec_label_pc_ef40.backedge.thread455 ]
  %v1_ef48 = add i32 %v0_f824, 24
  %v2_ef48 = inttoptr i32 %v1_ef48 to i32*
  %v3_ef48 = load i32, i32* %v2_ef48, align 4
  store i32 %v3_ef48, i32* %r3.global-to-local, align 4
  %v2_ef4c = icmp ugt i32 %v3_ef48, 255
  store i1 %v2_ef4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef4c = icmp eq i32 %v3_ef48, 256
  store i1 %v7_ef4c, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_f824, 28
  store i32 %.pre, i32* @sl, align 4
  br i1 %v7_ef4c, label %dec_label_pc_f824, label %dec_label_pc_ef58

dec_label_pc_ef58:                                ; preds = %dec_label_pc_ef48, %dec_label_pc_f824
  store i32 0, i32* @r6, align 4
  %v1_ef5c = load i32, i32* @sb, align 4
  %v2_ef5c = inttoptr i32 %v1_ef5c to i32*
  store i32 0, i32* %v2_ef5c, align 4
  %v0_ef60 = load i32, i32* @r5, align 4
  %v1_ef60 = add i32 %v0_ef60, 24
  %v2_ef60 = inttoptr i32 %v1_ef60 to i32*
  %v3_ef60 = load i32, i32* %v2_ef60, align 4
  store i32 %v3_ef60, i32* %r2.global-to-local, align 4
  %v0_ef64 = load i32, i32* @sl, align 4
  %v2_ef64 = add i32 %v0_ef64, %v3_ef60
  store i32 %v2_ef64, i32* @r4, align 4
  %v1_ef68 = add i32 %v0_ef60, 4
  %v2_ef68 = inttoptr i32 %v1_ef68 to i32*
  %v3_ef68 = load i32, i32* %v2_ef68, align 4
  store i32 %v3_ef68, i32* %r0.global-to-local, align 4
  %v1_ef6c = sub i32 256, %v3_ef60
  store i32 %v1_ef6c, i32* %r2.global-to-local, align 4
  store i32 %v2_ef64, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ef78 = inttoptr i32 %v2_ef64 to i32*
  %v5_ef78 = call i32 @function_10b0c(i32 %v3_ef68, i32* %v4_ef78, i32 %v1_ef6c, i32 16384)
  store i32 %v5_ef78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef7c = icmp eq i32 %v5_ef78, 0
  store i1 %v2_ef7c, i1* %cpsr_z.global-to-local, align 1
  %tmp320 = icmp slt i32 %v5_ef78, 1
  br i1 %tmp320, label %dec_label_pc_f7a0, label %dec_label_pc_ef84

dec_label_pc_ef84:                                ; preds = %dec_label_pc_ef58
  %v0_ef84 = load i32, i32* @r6, align 4
  store i32 %v0_ef84, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ef8c

dec_label_pc_ef8c:                                ; preds = %bb322, %dec_label_pc_ef84
  %v3_ef94 = phi i32 [ %v1_ef98, %bb322 ], [ %v0_ef84, %dec_label_pc_ef84 ]
  %v1_ef8c = load i32, i32* @r4, align 4
  %v2_ef8c = add i32 %v1_ef8c, %v3_ef94
  %v3_ef8c = inttoptr i32 %v2_ef8c to i8*
  %v4_ef8c = load i8, i8* %v3_ef8c, align 1
  %v6_ef8c = zext i8 %v4_ef8c to i32
  store i32 %v6_ef8c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef90 = icmp eq i8 %v4_ef8c, 0
  store i1 %v2_ef90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef90, label %bb321, label %bb322

bb321:                                            ; preds = %dec_label_pc_ef8c
  %v1_ef94 = load i32, i32* %r1.global-to-local, align 4
  %v2_ef94 = trunc i32 %v1_ef94 to i8
  store i8 %v2_ef94, i8* %v3_ef8c, align 1
  %v0_ef98.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb322

bb322:                                            ; preds = %dec_label_pc_ef8c, %bb321
  %v0_ef98 = phi i32 [ %v3_ef94, %dec_label_pc_ef8c ], [ %v0_ef98.pre, %bb321 ]
  %v1_ef98 = add i32 %v0_ef98, 1
  store i32 %v1_ef98, i32* %r2.global-to-local, align 4
  %v3_ef9c = icmp uge i32 %v5_ef78, %v1_ef98
  store i1 %v3_ef9c, i1* %cpsr_c.global-to-local, align 1
  %v9_ef9c = icmp eq i32 %v5_ef78, %v1_ef98
  store i1 %v9_ef9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef9c, label %dec_label_pc_efa4, label %dec_label_pc_ef8c

dec_label_pc_efa4:                                ; preds = %bb322, %dec_label_pc_f7a4
  store i32 ptrtoint (i32* @global_var_1b1e8.112 to i32), i32* %r1.global-to-local, align 4
  %v0_efa8 = load i32, i32* @r5, align 4
  %v1_efa8 = add i32 %v0_efa8, 24
  %v2_efa8 = inttoptr i32 %v1_efa8 to i32*
  %v3_efa8 = load i32, i32* %v2_efa8, align 4
  %v2_efac = load i32, i32* @global_var_1b1e8.112, align 4
  store i32 %v2_efac, i32* %r3.global-to-local, align 4
  %v2_efb0 = add i32 %v3_efa8, %v5_ef78
  store i32 %v2_efb0, i32* %ip.global-to-local, align 4
  store i32 %v2_efb0, i32* %v2_efa8, align 4
  %v0_efb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_efb8 = load i32, i32* @r5, align 4
  %v2_efb8 = add i32 %v1_efb8, 8
  %v3_efb8 = inttoptr i32 %v2_efb8 to i32*
  store i32 %v0_efb8, i32* %v3_efb8, align 4
  br label %dec_label_pc_efbc

dec_label_pc_efbc:                                ; preds = %dec_label_pc_f554, %dec_label_pc_efa4
  %v0_efbc = load i32, i32* @r5, align 4
  %v1_efbc = add i32 %v0_efbc, 12
  %v2_efbc = inttoptr i32 %v1_efbc to i32*
  %v3_efbc = load i32, i32* %v2_efbc, align 4
  store i32 %v3_efbc, i32* %r2.global-to-local, align 4
  %v1_efc0 = add i32 %v3_efbc, -2
  store i32 %v1_efc0, i32* %r3.global-to-local, align 4
  %v7_efc4 = icmp eq i32 %v1_efc0, 8
  store i1 %v7_efc4, i1* %cpsr_z.global-to-local, align 1
  %v5_efc8 = and i32 %v1_efc0, 1073741824
  %v6_efc8 = icmp ne i32 %v5_efc8, 0
  store i1 %v6_efc8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_efbc, label %dec_label_pc_ef3c.loopexit [
    i32 2, label %dec_label_pc_eff4
    i32 3, label %dec_label_pc_f0d8
    i32 4, label %dec_label_pc_f170
    i32 5, label %dec_label_pc_f200
    i32 6, label %dec_label_pc_f2b4
    i32 7, label %dec_label_pc_f41c
    i32 8, label %dec_label_pc_f368
    i32 9, label %dec_label_pc_f578
    i32 10, label %dec_label_pc_f4d0
  ]

dec_label_pc_eff4:                                ; preds = %dec_label_pc_efbc
  %v1_eff4 = add i32 %v0_efbc, 24
  %v2_eff4 = inttoptr i32 %v1_eff4 to i32*
  %v3_eff4 = load i32, i32* %v2_eff4, align 4
  store i32 %v3_eff4, i32* %ip.global-to-local, align 4
  %v0_eff8 = load i32, i32* @sl, align 4
  store i32 %v0_eff8, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  store i32 -3, i32* %r8.global-to-local, align 4
  %v1_f004 = add i32 %v0_efbc, 29
  store i32 %v1_f004, i32* @r4, align 4
  %v3_f008102 = icmp eq i32 %v3_eff4, 0
  store i1 %v3_f008102, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f008102, i1* %cpsr_z.global-to-local, align 1
  %v6_f00c109 = icmp sgt i32 %v3_eff4, 0
  br i1 %v6_f00c109, label %dec_label_pc_f010.preheader, label %dec_label_pc_f0b8

dec_label_pc_f008.loopexit:                       ; preds = %dec_label_pc_f028
  %v2_f030 = add i32 %v1_f030, 2
  store i32 %v2_f030, i32* @r6, align 4
  %v2_f034 = add i32 %v1_f034, 2
  store i32 %v2_f034, i32* @r4, align 4
  %v2_f038 = add i32 %v1_f038, 2
  store i32 %v2_f038, i32* @r7, align 4
  %v3_f008 = icmp uge i32 %v2_f038, %v1_f008
  store i1 %v3_f008, i1* %cpsr_c.global-to-local, align 1
  %v9_f008 = icmp eq i32 %v2_f038, %v1_f008
  store i1 %v9_f008, i1* %cpsr_z.global-to-local, align 1
  %v6_f00c = icmp slt i32 %v2_f038, %v1_f008
  br i1 %v6_f00c, label %dec_label_pc_f010.preheader, label %dec_label_pc_f0b8

dec_label_pc_f010.preheader:                      ; preds = %dec_label_pc_eff4, %dec_label_pc_f008.loopexit
  %v6_f0c0184 = phi i32 [ %v6_f0c0185, %dec_label_pc_f008.loopexit ], [ %v0_efbc, %dec_label_pc_eff4 ]
  %v1_f038173 = phi i32 [ %v2_f038, %dec_label_pc_f008.loopexit ], [ 0, %dec_label_pc_eff4 ]
  %v1_f030171 = phi i32 [ %v2_f030, %dec_label_pc_f008.loopexit ], [ %v0_eff8, %dec_label_pc_eff4 ]
  %v1_f01c169 = phi i32 [ %v1_f008, %dec_label_pc_f008.loopexit ], [ %v3_eff4, %dec_label_pc_eff4 ]
  %v0_f010167 = phi i32 [ %v2_f034, %dec_label_pc_f008.loopexit ], [ %v1_f004, %dec_label_pc_eff4 ]
  br label %dec_label_pc_f010

dec_label_pc_f010:                                ; preds = %dec_label_pc_f010.preheader, %dec_label_pc_f098
  %v6_f0c0185 = phi i32 [ %v6_f0c0184, %dec_label_pc_f010.preheader ], [ %v0_f0a0, %dec_label_pc_f098 ]
  %v1_f038 = phi i32 [ %v1_f038173, %dec_label_pc_f010.preheader ], [ %v1_f0a4, %dec_label_pc_f098 ]
  %v1_f030 = phi i32 [ %v1_f030171, %dec_label_pc_f010.preheader ], [ %v1_f0ac, %dec_label_pc_f098 ]
  %v1_f008 = phi i32 [ %v1_f01c169, %dec_label_pc_f010.preheader ], [ %v3_f0a0, %dec_label_pc_f098 ]
  %v1_f034 = phi i32 [ %v0_f010167, %dec_label_pc_f010.preheader ], [ %v1_f0b0, %dec_label_pc_f098 ]
  %v1_f010 = add i32 %v1_f034, -1
  %v2_f010 = inttoptr i32 %v1_f010 to i8*
  %v3_f010 = load i8, i8* %v2_f010, align 1
  %v4_f010 = zext i8 %v3_f010 to i32
  store i32 %v4_f010, i32* %r3.global-to-local, align 4
  %v2_f014 = icmp eq i8 %v3_f010, -1
  store i1 %v2_f014, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f014, label %dec_label_pc_f01c, label %dec_label_pc_f0b8

dec_label_pc_f01c:                                ; preds = %dec_label_pc_f010
  %v0_f01c = load i32, i32* @sl, align 4
  %v2_f01c = add i32 %v0_f01c, %v1_f008
  store i32 %v2_f01c, i32* %r2.global-to-local, align 4
  %v3_f020 = icmp uge i32 %v2_f01c, %v1_f034
  store i1 %v3_f020, i1* %cpsr_c.global-to-local, align 1
  %v9_f020 = icmp eq i32 %v2_f01c, %v1_f034
  store i1 %v9_f020, i1* %cpsr_z.global-to-local, align 1
  %v2_f024 = xor i1 %v3_f020, true
  %v3_f024 = or i1 %v9_f020, %v2_f024
  br i1 %v3_f024, label %dec_label_pc_f0b8, label %dec_label_pc_f028

dec_label_pc_f028:                                ; preds = %dec_label_pc_f01c
  %v1_f028 = inttoptr i32 %v1_f034 to i8*
  %v2_f028 = load i8, i8* %v1_f028, align 1
  %v3_f028 = zext i8 %v2_f028 to i32
  store i32 %v3_f028, i32* %r3.global-to-local, align 4
  %v2_f02c = icmp eq i8 %v2_f028, -1
  store i1 %v2_f02c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f02c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f02c, label %dec_label_pc_f008.loopexit, label %dec_label_pc_f040

dec_label_pc_f040:                                ; preds = %dec_label_pc_f028
  %v2_f040 = icmp ugt i8 %v2_f028, -4
  store i1 %v2_f040, i1* %cpsr_c.global-to-local, align 1
  %v7_f040 = icmp eq i8 %v2_f028, -3
  store i1 %v7_f040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f040, label %dec_label_pc_f62c, label %dec_label_pc_f048

dec_label_pc_f048:                                ; preds = %dec_label_pc_f040
  %v1_f048 = add i32 %v1_f030, 2
  store i32 %v1_f048, i32* %r3.global-to-local, align 4
  %v3_f04c = icmp uge i32 %v2_f01c, %v1_f048
  store i1 %v3_f04c, i1* %cpsr_c.global-to-local, align 1
  %v9_f04c = icmp eq i32 %v2_f01c, %v1_f048
  store i1 %v9_f04c, i1* %cpsr_z.global-to-local, align 1
  %v2_f050 = xor i1 %v3_f04c, true
  %v3_f050 = or i1 %v9_f04c, %v2_f050
  br i1 %v3_f050, label %dec_label_pc_f0b8, label %dec_label_pc_f054

dec_label_pc_f054:                                ; preds = %bb344, %dec_label_pc_f688, %.thread75, %dec_label_pc_f048
  %v0_f054 = load i32, i32* @r4, align 4
  %v1_f054 = inttoptr i32 %v0_f054 to i8*
  %v2_f054 = load i8, i8* %v1_f054, align 1
  %v3_f054 = zext i8 %v2_f054 to i32
  store i32 %v3_f054, i32* %r3.global-to-local, align 4
  %v2_f058 = icmp ugt i8 %v2_f054, -4
  store i1 %v2_f058, i1* %cpsr_c.global-to-local, align 1
  %v7_f058 = icmp eq i8 %v2_f054, -3
  store i1 %v7_f058, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f058, label %.thread62, label %dec_label_pc_f068

.thread62:                                        ; preds = %dec_label_pc_f054
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f054, align 1
  %v0_f064.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f064.pr.pr, label %bb324, label %.thread62.dec_label_pc_f068thread-pre-split_crit_edge

.thread62.dec_label_pc_f068thread-pre-split_crit_edge: ; preds = %.thread62
  %v0_f068.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f068

dec_label_pc_f068:                                ; preds = %dec_label_pc_f054, %.thread62.dec_label_pc_f068thread-pre-split_crit_edge
  %v0_f068.pr = phi i32 [ %v0_f068.pr.pre, %.thread62.dec_label_pc_f068thread-pre-split_crit_edge ], [ %v3_f054, %dec_label_pc_f054 ]
  %v2_f068 = icmp ugt i32 %v0_f068.pr, 250
  store i1 %v2_f068, i1* %cpsr_c.global-to-local, align 1
  %v7_f068 = icmp eq i32 %v0_f068.pr, 251
  store i1 %v7_f068, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f068, label %bb323, label %bb324

bb323:                                            ; preds = %dec_label_pc_f068
  %v1_f06c = load i32, i32* %r8.global-to-local, align 4
  %v2_f06c = trunc i32 %v1_f06c to i8
  %v3_f06c = load i32, i32* @r4, align 4
  %v4_f06c = inttoptr i32 %v3_f06c to i8*
  store i8 %v2_f06c, i8* %v4_f06c, align 1
  br label %bb324

bb324:                                            ; preds = %.thread62, %dec_label_pc_f068, %bb323
  %v0_f070 = load i32, i32* @r4, align 4
  %v1_f070 = add i32 %v0_f070, 1
  %v2_f070 = inttoptr i32 %v1_f070 to i8*
  %v3_f070 = load i8, i8* %v2_f070, align 1
  %v4_f070 = zext i8 %v3_f070 to i32
  store i32 %v4_f070, i32* %r3.global-to-local, align 4
  %v2_f074 = icmp ugt i8 %v3_f070, -4
  store i1 %v2_f074, i1* %cpsr_c.global-to-local, align 1
  %v7_f074 = icmp eq i8 %v3_f070, -3
  store i1 %v7_f074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f074, label %.thread65, label %dec_label_pc_f084

.thread65:                                        ; preds = %bb324
  store i32 -4, i32* %ip.global-to-local, align 4
  store i8 -4, i8* %v2_f070, align 1
  %v0_f080.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f080.pr.pr, label %bb326, label %.thread65.dec_label_pc_f084_crit_edge

.thread65.dec_label_pc_f084_crit_edge:            ; preds = %.thread65
  %v0_f084.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f084

dec_label_pc_f084:                                ; preds = %.thread65.dec_label_pc_f084_crit_edge, %bb324
  %v0_f084 = phi i32 [ %v0_f084.pre, %.thread65.dec_label_pc_f084_crit_edge ], [ %v4_f070, %bb324 ]
  %v2_f084 = icmp ugt i32 %v0_f084, 250
  store i1 %v2_f084, i1* %cpsr_c.global-to-local, align 1
  %v7_f084 = icmp eq i32 %v0_f084, 251
  store i1 %v7_f084, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f084, label %bb325, label %bb326

bb325:                                            ; preds = %dec_label_pc_f084
  %v1_f088 = load i32, i32* %r8.global-to-local, align 4
  %v2_f088 = trunc i32 %v1_f088 to i8
  %v3_f088 = load i32, i32* @r4, align 4
  %v4_f088 = add i32 %v3_f088, 1
  %v5_f088 = inttoptr i32 %v4_f088 to i8*
  store i8 %v2_f088, i8* %v5_f088, align 1
  br label %bb326

bb326:                                            ; preds = %.thread65, %dec_label_pc_f084, %bb325
  %v0_f08c = load i32, i32* @r5, align 4
  %v1_f08c = add i32 %v0_f08c, 4
  %v2_f08c = inttoptr i32 %v1_f08c to i32*
  %v3_f08c = load i32, i32* %v2_f08c, align 4
  store i32 %v3_f08c, i32* %r0.global-to-local, align 4
  %v0_f090 = load i32, i32* @r6, align 4
  br label %dec_label_pc_f098

dec_label_pc_f098:                                ; preds = %dec_label_pc_f7f8, %bb326
  %v0_f09c = phi i32 [ %v3_f814, %dec_label_pc_f7f8 ], [ %v3_f08c, %bb326 ]
  %storemerge8 = phi i32 [ %v2_f648, %dec_label_pc_f7f8 ], [ %v0_f090, %bb326 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_f7f8 ], [ 3, %bb326 ]
  store i32 %storemerge8, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f09c = inttoptr i32 %storemerge8 to i32*
  %v5_f09c = call i32 @function_10b6c(i32 %v0_f09c, i32* %v4_f09c, i32 %storemerge, i32 16384)
  store i32 %v5_f09c, i32* %r0.global-to-local, align 4
  %v0_f0a0 = load i32, i32* @r5, align 4
  %v1_f0a0 = add i32 %v0_f0a0, 24
  %v2_f0a0 = inttoptr i32 %v1_f0a0 to i32*
  %v3_f0a0 = load i32, i32* %v2_f0a0, align 4
  store i32 %v3_f0a0, i32* %ip.global-to-local, align 4
  %v0_f0a4 = load i32, i32* @r7, align 4
  %v1_f0a4 = add i32 %v0_f0a4, 3
  store i32 %v1_f0a4, i32* @r7, align 4
  %v3_f0a8 = icmp uge i32 %v1_f0a4, %v3_f0a0
  store i1 %v3_f0a8, i1* %cpsr_c.global-to-local, align 1
  %v9_f0a8 = icmp eq i32 %v1_f0a4, %v3_f0a0
  store i1 %v9_f0a8, i1* %cpsr_z.global-to-local, align 1
  %v0_f0ac = load i32, i32* @r6, align 4
  %v1_f0ac = add i32 %v0_f0ac, 3
  store i32 %v1_f0ac, i32* @r6, align 4
  %v0_f0b0 = load i32, i32* @r4, align 4
  %v1_f0b0 = add i32 %v0_f0b0, 3
  store i32 %v1_f0b0, i32* @r4, align 4
  %v5_f0b4 = icmp slt i32 %v1_f0a4, %v3_f0a0
  br i1 %v5_f0b4, label %dec_label_pc_f010, label %dec_label_pc_f0b8

dec_label_pc_f0b8:                                ; preds = %dec_label_pc_f008.loopexit, %dec_label_pc_f010, %dec_label_pc_f098, %dec_label_pc_f048, %dec_label_pc_f01c, %dec_label_pc_eff4, %dec_label_pc_f62c.dec_label_pc_f0b8.loopexit_crit_edge
  %v6_f0c0 = phi i32 [ %v0_f654, %dec_label_pc_f62c.dec_label_pc_f0b8.loopexit_crit_edge ], [ %v0_efbc, %dec_label_pc_eff4 ], [ %v6_f0c0185, %dec_label_pc_f010 ], [ %v0_f0a0, %dec_label_pc_f098 ], [ %v6_f0c0185, %dec_label_pc_f048 ], [ %v6_f0c0185, %dec_label_pc_f01c ], [ %v6_f0c0185, %dec_label_pc_f008.loopexit ]
  %v0_f0c8.pre = phi i32 [ %v0_f0b8.pre.pre, %dec_label_pc_f62c.dec_label_pc_f0b8.loopexit_crit_edge ], [ 0, %dec_label_pc_eff4 ], [ %v1_f038, %dec_label_pc_f010 ], [ %v1_f0a4, %dec_label_pc_f098 ], [ %v1_f038, %dec_label_pc_f048 ], [ %v1_f038, %dec_label_pc_f01c ], [ %v2_f038, %dec_label_pc_f008.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0b8 = icmp eq i32 %v0_f0c8.pre, 0
  store i1 %v2_f0b8, i1* %cpsr_z.global-to-local, align 1
  %tmp327 = icmp slt i32 %v0_f0c8.pre, 1
  br i1 %tmp327, label %dec_label_pc_f0c8, label %.thread223

.thread223:                                       ; preds = %dec_label_pc_f0b8
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_f0c0 = add i32 %v6_f0c0, 12
  %v8_f0c0 = inttoptr i32 %v7_f0c0 to i32*
  store i32 3, i32* %v8_f0c0, align 4
  br label %dec_label_pc_f554

dec_label_pc_f0c8:                                ; preds = %dec_label_pc_f0b8, %dec_label_pc_f5cc, %dec_label_pc_f734, %dec_label_pc_f470, %dec_label_pc_f3bc, %dec_label_pc_f308, %dec_label_pc_f254, %dec_label_pc_f1bc, %dec_label_pc_f12c
  %v0_f0c8 = phi i32 [ %v1_f5c0, %dec_label_pc_f5cc ], [ %v0_f72c, %dec_label_pc_f734 ], [ %v1_f464, %dec_label_pc_f470 ], [ %v1_f3b0, %dec_label_pc_f3bc ], [ %v1_f2fc, %dec_label_pc_f308 ], [ %v1_f248, %dec_label_pc_f254 ], [ %v0_f1bc, %dec_label_pc_f1bc ], [ %v0_f12c, %dec_label_pc_f12c ], [ %v0_f0c8.pre, %dec_label_pc_f0b8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0c8 = icmp eq i32 %v0_f0c8, 0
  store i1 %v2_f0c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0c8, label %dec_label_pc_ef3c.loopexit, label %dec_label_pc_f0d0

dec_label_pc_f0d0:                                ; preds = %dec_label_pc_f0c8
  %v0_f0d0 = load i32, i32* @r5, align 4
  %v1_f0d0 = add i32 %v0_f0d0, 24
  %v2_f0d0 = inttoptr i32 %v1_f0d0 to i32*
  %v3_f0d0 = load i32, i32* %v2_f0d0, align 4
  store i32 %v3_f0d0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f554

dec_label_pc_f0d8:                                ; preds = %dec_label_pc_efbc
  %v1_f0d8 = add i32 %v0_efbc, 24
  %v2_f0d8 = inttoptr i32 %v1_f0d8 to i32*
  %v3_f0d8 = load i32, i32* %v2_f0d8, align 4
  store i32 %v3_f0d8, i32* %ip.global-to-local, align 4
  %v1_f0dc = add i32 %v3_f0d8, -1
  store i32 %v1_f0dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0e0 = icmp eq i32 %v1_f0dc, 0
  store i1 %v2_f0e0, i1* %cpsr_z.global-to-local, align 1
  %v5_f0e4 = icmp sgt i32 %v1_f0dc, 0
  br i1 %v5_f0e4, label %dec_label_pc_f10c, label %dec_label_pc_eec4

dec_label_pc_f0ec:                                ; preds = %bb328
  %v2_f0ec = icmp ugt i8 %v3_f110, 35
  store i1 %v2_f0ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f0ec = icmp eq i8 %v3_f110, 36
  store i1 %v7_f0ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0ec, label %dec_label_pc_f120, label %dec_label_pc_f0f4

dec_label_pc_f0f4:                                ; preds = %dec_label_pc_f0ec
  %v2_f0f4 = icmp ugt i8 %v3_f110, 34
  store i1 %v2_f0f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f0f4 = icmp eq i8 %v3_f110, 35
  store i1 %v7_f0f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0f4, label %dec_label_pc_f120, label %dec_label_pc_f0fc

dec_label_pc_f0fc:                                ; preds = %dec_label_pc_f0f4
  %v2_f0fc = icmp ugt i8 %v3_f110, 36
  store i1 %v2_f0fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f0fc = icmp eq i8 %v3_f110, 37
  store i1 %v7_f0fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0fc, label %dec_label_pc_f120, label %dec_label_pc_f104

dec_label_pc_f104:                                ; preds = %dec_label_pc_f0fc
  %v1_f104 = add i32 %v0_f120, -1
  store i32 %v1_f104, i32* %r0.global-to-local, align 4
  %v2_f104 = icmp ne i32 %v0_f120, 0
  store i1 %v2_f104, i1* %cpsr_c.global-to-local, align 1
  %v7_f104 = icmp eq i32 %v0_f120, 1
  store i1 %v7_f104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f104, label %dec_label_pc_eec4, label %dec_label_pc_f10c

dec_label_pc_f10c:                                ; preds = %dec_label_pc_f0d8, %dec_label_pc_f104
  %v0_f120 = phi i32 [ %v1_f104, %dec_label_pc_f104 ], [ %v1_f0dc, %dec_label_pc_f0d8 ]
  %v2_f10c = add i32 %v0_f120, %v0_efbc
  store i32 %v2_f10c, i32* %r3.global-to-local, align 4
  %v1_f110 = add i32 %v2_f10c, 28
  %v2_f110 = inttoptr i32 %v1_f110 to i8*
  %v3_f110 = load i8, i8* %v2_f110, align 1
  %v4_f110 = zext i8 %v3_f110 to i32
  store i32 %v4_f110, i32* %r3.global-to-local, align 4
  %v2_f114 = icmp ugt i8 %v3_f110, 61
  store i1 %v2_f114, i1* %cpsr_c.global-to-local, align 1
  %v7_f114 = icmp eq i8 %v3_f110, 62
  store i1 %v7_f114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f114, label %dec_label_pc_f120, label %bb328

bb328:                                            ; preds = %dec_label_pc_f10c
  %v3_f118 = icmp ugt i8 %v3_f110, 57
  store i1 %v3_f118, i1* %cpsr_c.global-to-local, align 1
  %v8_f118 = icmp eq i8 %v3_f110, 58
  store i1 %v8_f118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f118, label %dec_label_pc_f120, label %dec_label_pc_f0ec

dec_label_pc_f120:                                ; preds = %dec_label_pc_f10c, %bb328, %dec_label_pc_f0fc, %dec_label_pc_f0f4, %dec_label_pc_f0ec
  %v1_f120 = add i32 %v0_f120, 1
  store i32 %v1_f120, i32* @r7, align 4
  %v2_f124 = icmp eq i32 %v1_f120, -1
  store i1 %v2_f124, i1* %cpsr_c.global-to-local, align 1
  %v7_f124 = icmp eq i32 %v0_f120, -2
  store i1 %v7_f124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f124, label %dec_label_pc_eec4, label %dec_label_pc_f12c

dec_label_pc_f12c:                                ; preds = %dec_label_pc_ef24, %dec_label_pc_f120
  %v0_f12c = phi i32 [ %v0_ef34, %dec_label_pc_ef24 ], [ %v1_f120, %dec_label_pc_f120 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f12c = icmp eq i32 %v0_f12c, 0
  store i1 %v2_f12c, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v0_f12c, 1
  br i1 %tmp329, label %dec_label_pc_f0c8, label %dec_label_pc_f134

dec_label_pc_f134:                                ; preds = %dec_label_pc_f12c
  %v0_f134 = load i32, i32* @r5, align 4
  %v1_f134 = inttoptr i32 %v0_f134 to i32*
  %v2_f134 = load i32, i32* %v1_f134, align 4
  store i32 %v2_f134, i32* %r3.global-to-local, align 4
  %v1_f138 = add i32 %v0_f134, 4
  %v2_f138 = inttoptr i32 %v1_f138 to i32*
  %v3_f138 = load i32, i32* %v2_f138, align 4
  store i32 %v3_f138, i32* %r0.global-to-local, align 4
  %v1_f13c = add i32 %v2_f134, 12
  %v2_f13c = inttoptr i32 %v1_f13c to i8*
  %v3_f13c = load i8, i8* %v2_f13c, align 1
  %v4_f13c = zext i8 %v3_f13c to i32
  store i32 %v4_f13c, i32* %r2.global-to-local, align 4
  %v1_f140 = inttoptr i32 %v2_f134 to i32*
  %v2_f140 = load i32, i32* %v1_f140, align 4
  store i32 %v2_f140, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f148 = inttoptr i32 %v2_f140 to i32*
  %v5_f148 = call i32 @function_10b6c(i32 %v3_f138, i32* %v4_f148, i32 %v4_f13c, i32 16384)
  store i32 %v5_f148, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f150 = load i32, i32* @r5, align 4
  %v1_f150 = add i32 %v0_f150, 4
  %v2_f150 = inttoptr i32 %v1_f150 to i32*
  %v3_f150 = load i32, i32* %v2_f150, align 4
  store i32 %v3_f150, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129cc.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f15c = call i32 @function_10b6c(i32 %v3_f150, i32* bitcast ([3 x i8]* @global_var_129cc.500 to i32*), i32 2, i32 16384)
  store i32 %v5_f15c, i32* %r0.global-to-local, align 4
  %v0_f160 = load i32, i32* @r5, align 4
  %v1_f160 = add i32 %v0_f160, 24
  %v2_f160 = inttoptr i32 %v1_f160 to i32*
  %v3_f160 = load i32, i32* %v2_f160, align 4
  store i32 %v3_f160, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_f168 = add i32 %v0_f160, 12
  %v3_f168 = inttoptr i32 %v2_f168 to i32*
  store i32 4, i32* %v3_f168, align 4
  br label %dec_label_pc_f554

dec_label_pc_f170:                                ; preds = %dec_label_pc_efbc
  %v1_f170 = add i32 %v0_efbc, 24
  %v2_f170 = inttoptr i32 %v1_f170 to i32*
  %v3_f170 = load i32, i32* %v2_f170, align 4
  store i32 %v3_f170, i32* %ip.global-to-local, align 4
  %v1_f174 = add i32 %v3_f170, -1
  store i32 %v1_f174, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f178 = icmp eq i32 %v1_f174, 0
  store i1 %v2_f178, i1* %cpsr_z.global-to-local, align 1
  %v5_f17c = icmp sgt i32 %v1_f174, 0
  br i1 %v5_f17c, label %dec_label_pc_f19c, label %dec_label_pc_f694

dec_label_pc_f184:                                ; preds = %bb330
  %v2_f184 = icmp ugt i8 %v3_f1a0, 35
  store i1 %v2_f184, i1* %cpsr_c.global-to-local, align 1
  %v7_f184 = icmp eq i8 %v3_f1a0, 36
  store i1 %v7_f184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f184, label %dec_label_pc_f1b0, label %dec_label_pc_f18c

dec_label_pc_f18c:                                ; preds = %dec_label_pc_f184
  %v2_f18c = icmp ugt i8 %v3_f1a0, 34
  store i1 %v2_f18c, i1* %cpsr_c.global-to-local, align 1
  %v7_f18c = icmp eq i8 %v3_f1a0, 35
  store i1 %v7_f18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f18c, label %dec_label_pc_f1b0, label %dec_label_pc_f194

dec_label_pc_f194:                                ; preds = %dec_label_pc_f18c
  %v1_f194 = add i32 %v0_f1b0, -1
  store i32 %v1_f194, i32* %r0.global-to-local, align 4
  %v2_f194 = icmp ne i32 %v0_f1b0, 0
  store i1 %v2_f194, i1* %cpsr_c.global-to-local, align 1
  %v7_f194 = icmp eq i32 %v0_f1b0, 1
  store i1 %v7_f194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f194, label %dec_label_pc_f694, label %dec_label_pc_f19c

dec_label_pc_f19c:                                ; preds = %dec_label_pc_f170, %dec_label_pc_f194
  %v0_f1b0 = phi i32 [ %v1_f194, %dec_label_pc_f194 ], [ %v1_f174, %dec_label_pc_f170 ]
  %v2_f19c = add i32 %v0_f1b0, %v0_efbc
  store i32 %v2_f19c, i32* %r3.global-to-local, align 4
  %v1_f1a0 = add i32 %v2_f19c, 28
  %v2_f1a0 = inttoptr i32 %v1_f1a0 to i8*
  %v3_f1a0 = load i8, i8* %v2_f1a0, align 1
  %v4_f1a0 = zext i8 %v3_f1a0 to i32
  store i32 %v4_f1a0, i32* %r3.global-to-local, align 4
  %v2_f1a4 = icmp ugt i8 %v3_f1a0, 61
  store i1 %v2_f1a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1a4 = icmp eq i8 %v3_f1a0, 62
  store i1 %v7_f1a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1a4, label %dec_label_pc_f1b0, label %bb330

bb330:                                            ; preds = %dec_label_pc_f19c
  %v3_f1a8 = icmp ugt i8 %v3_f1a0, 57
  store i1 %v3_f1a8, i1* %cpsr_c.global-to-local, align 1
  %v8_f1a8 = icmp eq i8 %v3_f1a0, 58
  store i1 %v8_f1a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f1a8, label %dec_label_pc_f1b0, label %dec_label_pc_f184

dec_label_pc_f1b0:                                ; preds = %dec_label_pc_f19c, %bb330, %dec_label_pc_f18c, %dec_label_pc_f184
  %v1_f1b0 = add i32 %v0_f1b0, 1
  store i32 %v1_f1b0, i32* @r7, align 4
  %v2_f1b4 = icmp eq i32 %v1_f1b0, -1
  store i1 %v2_f1b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1b4 = icmp eq i32 %v0_f1b0, -2
  store i1 %v7_f1b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1b4, label %dec_label_pc_f694, label %dec_label_pc_f1bc

dec_label_pc_f1bc:                                ; preds = %dec_label_pc_f6d4, %dec_label_pc_f1b0
  %v0_f1bc = phi i32 [ %v0_f6dc, %dec_label_pc_f6d4 ], [ %v1_f1b0, %dec_label_pc_f1b0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1bc = icmp eq i32 %v0_f1bc, 0
  store i1 %v2_f1bc, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v0_f1bc, 1
  br i1 %tmp331, label %dec_label_pc_f0c8, label %dec_label_pc_f1c4

dec_label_pc_f1c4:                                ; preds = %dec_label_pc_f1bc
  %v0_f1c4 = load i32, i32* @r5, align 4
  %v1_f1c4 = inttoptr i32 %v0_f1c4 to i32*
  %v2_f1c4 = load i32, i32* %v1_f1c4, align 4
  store i32 %v2_f1c4, i32* %r3.global-to-local, align 4
  %v1_f1c8 = add i32 %v0_f1c4, 4
  %v2_f1c8 = inttoptr i32 %v1_f1c8 to i32*
  %v3_f1c8 = load i32, i32* %v2_f1c8, align 4
  store i32 %v3_f1c8, i32* %r0.global-to-local, align 4
  %v1_f1cc = add i32 %v2_f1c4, 13
  %v2_f1cc = inttoptr i32 %v1_f1cc to i8*
  %v3_f1cc = load i8, i8* %v2_f1cc, align 1
  %v4_f1cc = zext i8 %v3_f1cc to i32
  store i32 %v4_f1cc, i32* %r2.global-to-local, align 4
  %v1_f1d0 = add i32 %v2_f1c4, 4
  %v2_f1d0 = inttoptr i32 %v1_f1d0 to i32*
  %v3_f1d0 = load i32, i32* %v2_f1d0, align 4
  store i32 %v3_f1d0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f1d8 = inttoptr i32 %v3_f1d0 to i32*
  %v5_f1d8 = call i32 @function_10b6c(i32 %v3_f1c8, i32* %v4_f1d8, i32 %v4_f1cc, i32 16384)
  store i32 %v5_f1d8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f1e0 = load i32, i32* @r5, align 4
  %v1_f1e0 = add i32 %v0_f1e0, 4
  %v2_f1e0 = inttoptr i32 %v1_f1e0 to i32*
  %v3_f1e0 = load i32, i32* %v2_f1e0, align 4
  store i32 %v3_f1e0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129cc.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f1ec = call i32 @function_10b6c(i32 %v3_f1e0, i32* bitcast ([3 x i8]* @global_var_129cc.500 to i32*), i32 2, i32 16384)
  store i32 %v5_f1ec, i32* %r0.global-to-local, align 4
  %v0_f1f0 = load i32, i32* @r5, align 4
  %v1_f1f0 = add i32 %v0_f1f0, 24
  %v2_f1f0 = inttoptr i32 %v1_f1f0 to i32*
  %v3_f1f0 = load i32, i32* %v2_f1f0, align 4
  store i32 %v3_f1f0, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_f1f8 = add i32 %v0_f1f0, 12
  %v3_f1f8 = inttoptr i32 %v2_f1f8 to i32*
  store i32 5, i32* %v3_f1f8, align 4
  br label %dec_label_pc_f554

dec_label_pc_f200:                                ; preds = %dec_label_pc_efbc
  %v1_f200 = add i32 %v0_efbc, 24
  %v2_f200 = inttoptr i32 %v1_f200 to i32*
  %v3_f200 = load i32, i32* %v2_f200, align 4
  store i32 %v3_f200, i32* %ip.global-to-local, align 4
  %v1_f204 = add i32 %v3_f200, -1
  store i32 %v1_f204, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f208 = icmp eq i32 %v1_f204, 0
  store i1 %v2_f208, i1* %cpsr_z.global-to-local, align 1
  %v5_f20c = icmp sgt i32 %v1_f204, 0
  br i1 %v5_f20c, label %dec_label_pc_f234, label %dec_label_pc_ef40.backedge.thread

dec_label_pc_f214:                                ; preds = %bb332
  %v2_f214 = icmp ugt i8 %v3_f238, 35
  store i1 %v2_f214, i1* %cpsr_c.global-to-local, align 1
  %v7_f214 = icmp eq i8 %v3_f238, 36
  store i1 %v7_f214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f214, label %dec_label_pc_f248, label %dec_label_pc_f21c

dec_label_pc_f21c:                                ; preds = %dec_label_pc_f214
  %v2_f21c = icmp ugt i8 %v3_f238, 34
  store i1 %v2_f21c, i1* %cpsr_c.global-to-local, align 1
  %v7_f21c = icmp eq i8 %v3_f238, 35
  store i1 %v7_f21c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f21c, label %dec_label_pc_f248, label %dec_label_pc_f224

dec_label_pc_f224:                                ; preds = %dec_label_pc_f21c
  %v2_f224 = icmp ugt i8 %v3_f238, 36
  store i1 %v2_f224, i1* %cpsr_c.global-to-local, align 1
  %v7_f224 = icmp eq i8 %v3_f238, 37
  store i1 %v7_f224, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f224, label %dec_label_pc_f248, label %dec_label_pc_f22c

dec_label_pc_f22c:                                ; preds = %dec_label_pc_f224
  %v1_f22c = add i32 %v0_f248, -1
  store i32 %v1_f22c, i32* %r0.global-to-local, align 4
  %v2_f22c = icmp ne i32 %v0_f248, 0
  store i1 %v2_f22c, i1* %cpsr_c.global-to-local, align 1
  %v7_f22c = icmp eq i32 %v0_f248, 1
  store i1 %v7_f22c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f22c, label %dec_label_pc_ef40.backedge.thread455, label %dec_label_pc_f234

dec_label_pc_f234:                                ; preds = %dec_label_pc_f200, %dec_label_pc_f22c
  %v0_f248 = phi i32 [ %v1_f22c, %dec_label_pc_f22c ], [ %v1_f204, %dec_label_pc_f200 ]
  %v2_f234 = add i32 %v0_f248, %v0_efbc
  store i32 %v2_f234, i32* %r3.global-to-local, align 4
  %v1_f238 = add i32 %v2_f234, 28
  %v2_f238 = inttoptr i32 %v1_f238 to i8*
  %v3_f238 = load i8, i8* %v2_f238, align 1
  %v4_f238 = zext i8 %v3_f238 to i32
  store i32 %v4_f238, i32* %r3.global-to-local, align 4
  %v2_f23c = icmp ugt i8 %v3_f238, 61
  store i1 %v2_f23c, i1* %cpsr_c.global-to-local, align 1
  %v7_f23c = icmp eq i8 %v3_f238, 62
  store i1 %v7_f23c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f23c, label %dec_label_pc_f248, label %bb332

bb332:                                            ; preds = %dec_label_pc_f234
  %v3_f240 = icmp ugt i8 %v3_f238, 57
  store i1 %v3_f240, i1* %cpsr_c.global-to-local, align 1
  %v8_f240 = icmp eq i8 %v3_f238, 58
  store i1 %v8_f240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f240, label %dec_label_pc_f248, label %dec_label_pc_f214

dec_label_pc_f248:                                ; preds = %dec_label_pc_f234, %bb332, %dec_label_pc_f224, %dec_label_pc_f21c, %dec_label_pc_f214
  %v1_f248 = add i32 %v0_f248, 1
  store i32 %v1_f248, i32* @r7, align 4
  %v2_f24c = icmp eq i32 %v1_f248, -1
  store i1 %v2_f24c, i1* %cpsr_c.global-to-local, align 1
  %v7_f24c = icmp eq i32 %v0_f248, -2
  store i1 %v7_f24c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f24c, label %dec_label_pc_ef40.backedge.thread455, label %dec_label_pc_f254

dec_label_pc_f254:                                ; preds = %dec_label_pc_f248
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f254 = icmp eq i32 %v1_f248, 0
  store i1 %v2_f254, i1* %cpsr_z.global-to-local, align 1
  %tmp333 = icmp slt i32 %v1_f248, 1
  br i1 %tmp333, label %dec_label_pc_f0c8, label %dec_label_pc_f25c

dec_label_pc_f25c:                                ; preds = %dec_label_pc_f254
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f260 = call i32 @function_fb34(i32 5)
  store i32 %v2_eed8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_f270 = call i32 @function_fa50(i32 5, i32* %v2_eee0)
  store i32 %v3_f270, i32* %r0.global-to-local, align 4
  %v3_f274 = load i8, i8* %stack_var_-52, align 1
  %v4_f274 = sext i8 %v3_f274 to i32
  store i32 %v4_f274, i32* %r2.global-to-local, align 4
  store i32 %v3_f270, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f280 = load i32, i32* @r5, align 4
  %v1_f280 = add i32 %v0_f280, 4
  %v2_f280 = inttoptr i32 %v1_f280 to i32*
  %v3_f280 = load i32, i32* %v2_f280, align 4
  store i32 %v3_f280, i32* %r0.global-to-local, align 4
  %v4_f284 = inttoptr i32 %v3_f270 to i32*
  %v5_f284 = call i32 @function_10b6c(i32 %v3_f280, i32* %v4_f284, i32 %v4_f274, i32 16384)
  store i32 %v5_f284, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129cc.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f294 = load i32, i32* @r5, align 4
  %v1_f294 = add i32 %v0_f294, 4
  %v2_f294 = inttoptr i32 %v1_f294 to i32*
  %v3_f294 = load i32, i32* %v2_f294, align 4
  store i32 %v3_f294, i32* %r0.global-to-local, align 4
  %v5_f298 = call i32 @function_10b6c(i32 %v3_f294, i32* bitcast ([3 x i8]* @global_var_129cc.500 to i32*), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f2a0 = call i32 @function_fa7c(i32 5)
  store i32 %v1_f2a0, i32* %r0.global-to-local, align 4
  %v0_f2a4 = load i32, i32* @r5, align 4
  %v1_f2a4 = add i32 %v0_f2a4, 24
  %v2_f2a4 = inttoptr i32 %v1_f2a4 to i32*
  %v3_f2a4 = load i32, i32* %v2_f2a4, align 4
  store i32 %v3_f2a4, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_f2ac = add i32 %v0_f2a4, 12
  %v3_f2ac = inttoptr i32 %v2_f2ac to i32*
  store i32 6, i32* %v3_f2ac, align 4
  br label %dec_label_pc_f554

dec_label_pc_f2b4:                                ; preds = %dec_label_pc_efbc
  %v1_f2b4 = add i32 %v0_efbc, 24
  %v2_f2b4 = inttoptr i32 %v1_f2b4 to i32*
  %v3_f2b4 = load i32, i32* %v2_f2b4, align 4
  store i32 %v3_f2b4, i32* %ip.global-to-local, align 4
  %v1_f2b8 = add i32 %v3_f2b4, -1
  store i32 %v1_f2b8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f2bc = icmp eq i32 %v1_f2b8, 0
  store i1 %v2_f2bc, i1* %cpsr_z.global-to-local, align 1
  %v5_f2c0 = icmp sgt i32 %v1_f2b8, 0
  br i1 %v5_f2c0, label %dec_label_pc_f2e8, label %dec_label_pc_ef40.backedge.thread

dec_label_pc_f2c8:                                ; preds = %bb334
  %v2_f2c8 = icmp ugt i8 %v3_f2ec, 35
  store i1 %v2_f2c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2c8 = icmp eq i8 %v3_f2ec, 36
  store i1 %v7_f2c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2c8, label %dec_label_pc_f2fc, label %dec_label_pc_f2d0

dec_label_pc_f2d0:                                ; preds = %dec_label_pc_f2c8
  %v2_f2d0 = icmp ugt i8 %v3_f2ec, 34
  store i1 %v2_f2d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2d0 = icmp eq i8 %v3_f2ec, 35
  store i1 %v7_f2d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2d0, label %dec_label_pc_f2fc, label %dec_label_pc_f2d8

dec_label_pc_f2d8:                                ; preds = %dec_label_pc_f2d0
  %v2_f2d8 = icmp ugt i8 %v3_f2ec, 36
  store i1 %v2_f2d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2d8 = icmp eq i8 %v3_f2ec, 37
  store i1 %v7_f2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2d8, label %dec_label_pc_f2fc, label %dec_label_pc_f2e0

dec_label_pc_f2e0:                                ; preds = %dec_label_pc_f2d8
  %v1_f2e0 = add i32 %v0_f2fc, -1
  store i32 %v1_f2e0, i32* %r0.global-to-local, align 4
  %v2_f2e0 = icmp ne i32 %v0_f2fc, 0
  store i1 %v2_f2e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2e0 = icmp eq i32 %v0_f2fc, 1
  store i1 %v7_f2e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2e0, label %dec_label_pc_ef40.backedge.thread455, label %dec_label_pc_f2e8

dec_label_pc_f2e8:                                ; preds = %dec_label_pc_f2b4, %dec_label_pc_f2e0
  %v0_f2fc = phi i32 [ %v1_f2e0, %dec_label_pc_f2e0 ], [ %v1_f2b8, %dec_label_pc_f2b4 ]
  %v2_f2e8 = add i32 %v0_f2fc, %v0_efbc
  store i32 %v2_f2e8, i32* %r3.global-to-local, align 4
  %v1_f2ec = add i32 %v2_f2e8, 28
  %v2_f2ec = inttoptr i32 %v1_f2ec to i8*
  %v3_f2ec = load i8, i8* %v2_f2ec, align 1
  %v4_f2ec = zext i8 %v3_f2ec to i32
  store i32 %v4_f2ec, i32* %r3.global-to-local, align 4
  %v2_f2f0 = icmp ugt i8 %v3_f2ec, 61
  store i1 %v2_f2f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2f0 = icmp eq i8 %v3_f2ec, 62
  store i1 %v7_f2f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2f0, label %dec_label_pc_f2fc, label %bb334

bb334:                                            ; preds = %dec_label_pc_f2e8
  %v3_f2f4 = icmp ugt i8 %v3_f2ec, 57
  store i1 %v3_f2f4, i1* %cpsr_c.global-to-local, align 1
  %v8_f2f4 = icmp eq i8 %v3_f2ec, 58
  store i1 %v8_f2f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f2f4, label %dec_label_pc_f2fc, label %dec_label_pc_f2c8

dec_label_pc_f2fc:                                ; preds = %dec_label_pc_f2e8, %bb334, %dec_label_pc_f2d8, %dec_label_pc_f2d0, %dec_label_pc_f2c8
  %v1_f2fc = add i32 %v0_f2fc, 1
  store i32 %v1_f2fc, i32* @r7, align 4
  %v2_f300 = icmp eq i32 %v1_f2fc, -1
  store i1 %v2_f300, i1* %cpsr_c.global-to-local, align 1
  %v7_f300 = icmp eq i32 %v0_f2fc, -2
  store i1 %v7_f300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f300, label %dec_label_pc_ef40.backedge.thread455, label %dec_label_pc_f308

dec_label_pc_f308:                                ; preds = %dec_label_pc_f2fc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f308 = icmp eq i32 %v1_f2fc, 0
  store i1 %v2_f308, i1* %cpsr_z.global-to-local, align 1
  %tmp335 = icmp slt i32 %v1_f2fc, 1
  br i1 %tmp335, label %dec_label_pc_f0c8, label %dec_label_pc_f310

dec_label_pc_f310:                                ; preds = %dec_label_pc_f308
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f314 = call i32 @function_fb34(i32 6)
  store i32 %v2_eeec, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f324 = call i32 @function_fa50(i32 6, i32* nonnull %stack_var_-56)
  store i32 %v3_f324, i32* %r0.global-to-local, align 4
  %v3_f328 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f328, i32* %r2.global-to-local, align 4
  store i32 %v3_f324, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f334 = load i32, i32* @r5, align 4
  %v1_f334 = add i32 %v0_f334, 4
  %v2_f334 = inttoptr i32 %v1_f334 to i32*
  %v3_f334 = load i32, i32* %v2_f334, align 4
  store i32 %v3_f334, i32* %r0.global-to-local, align 4
  %v4_f338 = inttoptr i32 %v3_f324 to i32*
  %v5_f338 = call i32 @function_10b6c(i32 %v3_f334, i32* %v4_f338, i32 %v3_f328, i32 16384)
  store i32 %v5_f338, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129cc.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f348 = load i32, i32* @r5, align 4
  %v1_f348 = add i32 %v0_f348, 4
  %v2_f348 = inttoptr i32 %v1_f348 to i32*
  %v3_f348 = load i32, i32* %v2_f348, align 4
  store i32 %v3_f348, i32* %r0.global-to-local, align 4
  %v5_f34c = call i32 @function_10b6c(i32 %v3_f348, i32* bitcast ([3 x i8]* @global_var_129cc.500 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f354 = call i32 @function_fa7c(i32 6)
  store i32 %v1_f354, i32* %r0.global-to-local, align 4
  %v0_f358 = load i32, i32* @r5, align 4
  %v1_f358 = add i32 %v0_f358, 24
  %v2_f358 = inttoptr i32 %v1_f358 to i32*
  %v3_f358 = load i32, i32* %v2_f358, align 4
  store i32 %v3_f358, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_f360 = add i32 %v0_f358, 12
  %v3_f360 = inttoptr i32 %v2_f360 to i32*
  store i32 7, i32* %v3_f360, align 4
  br label %dec_label_pc_f554

dec_label_pc_f368:                                ; preds = %dec_label_pc_efbc
  %v1_f368 = add i32 %v0_efbc, 24
  %v2_f368 = inttoptr i32 %v1_f368 to i32*
  %v3_f368 = load i32, i32* %v2_f368, align 4
  store i32 %v3_f368, i32* %ip.global-to-local, align 4
  %v1_f36c = add i32 %v3_f368, -1
  store i32 %v1_f36c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f370 = icmp eq i32 %v1_f36c, 0
  store i1 %v2_f370, i1* %cpsr_z.global-to-local, align 1
  %v5_f374 = icmp sgt i32 %v1_f36c, 0
  br i1 %v5_f374, label %dec_label_pc_f39c, label %dec_label_pc_ef40.backedge.thread

dec_label_pc_f37c:                                ; preds = %bb336
  %v2_f37c = icmp ugt i8 %v3_f3a0, 35
  store i1 %v2_f37c, i1* %cpsr_c.global-to-local, align 1
  %v7_f37c = icmp eq i8 %v3_f3a0, 36
  store i1 %v7_f37c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f37c, label %dec_label_pc_f3b0, label %dec_label_pc_f384

dec_label_pc_f384:                                ; preds = %dec_label_pc_f37c
  %v2_f384 = icmp ugt i8 %v3_f3a0, 34
  store i1 %v2_f384, i1* %cpsr_c.global-to-local, align 1
  %v7_f384 = icmp eq i8 %v3_f3a0, 35
  store i1 %v7_f384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f384, label %dec_label_pc_f3b0, label %dec_label_pc_f38c

dec_label_pc_f38c:                                ; preds = %dec_label_pc_f384
  %v2_f38c = icmp ugt i8 %v3_f3a0, 36
  store i1 %v2_f38c, i1* %cpsr_c.global-to-local, align 1
  %v7_f38c = icmp eq i8 %v3_f3a0, 37
  store i1 %v7_f38c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f38c, label %dec_label_pc_f3b0, label %dec_label_pc_f394

dec_label_pc_f394:                                ; preds = %dec_label_pc_f38c
  %v1_f394 = add i32 %v0_f3b0, -1
  store i32 %v1_f394, i32* %r0.global-to-local, align 4
  %v2_f394 = icmp ne i32 %v0_f3b0, 0
  store i1 %v2_f394, i1* %cpsr_c.global-to-local, align 1
  %v7_f394 = icmp eq i32 %v0_f3b0, 1
  store i1 %v7_f394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f394, label %dec_label_pc_ef40.backedge.thread455, label %dec_label_pc_f39c

dec_label_pc_f39c:                                ; preds = %dec_label_pc_f368, %dec_label_pc_f394
  %v0_f3b0 = phi i32 [ %v1_f394, %dec_label_pc_f394 ], [ %v1_f36c, %dec_label_pc_f368 ]
  %v2_f39c = add i32 %v0_f3b0, %v0_efbc
  store i32 %v2_f39c, i32* %r3.global-to-local, align 4
  %v1_f3a0 = add i32 %v2_f39c, 28
  %v2_f3a0 = inttoptr i32 %v1_f3a0 to i8*
  %v3_f3a0 = load i8, i8* %v2_f3a0, align 1
  %v4_f3a0 = zext i8 %v3_f3a0 to i32
  store i32 %v4_f3a0, i32* %r3.global-to-local, align 4
  %v2_f3a4 = icmp ugt i8 %v3_f3a0, 61
  store i1 %v2_f3a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3a4 = icmp eq i8 %v3_f3a0, 62
  store i1 %v7_f3a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3a4, label %dec_label_pc_f3b0, label %bb336

bb336:                                            ; preds = %dec_label_pc_f39c
  %v3_f3a8 = icmp ugt i8 %v3_f3a0, 57
  store i1 %v3_f3a8, i1* %cpsr_c.global-to-local, align 1
  %v8_f3a8 = icmp eq i8 %v3_f3a0, 58
  store i1 %v8_f3a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f3a8, label %dec_label_pc_f3b0, label %dec_label_pc_f37c

dec_label_pc_f3b0:                                ; preds = %dec_label_pc_f39c, %bb336, %dec_label_pc_f38c, %dec_label_pc_f384, %dec_label_pc_f37c
  %v1_f3b0 = add i32 %v0_f3b0, 1
  store i32 %v1_f3b0, i32* @r7, align 4
  %v2_f3b4 = icmp eq i32 %v1_f3b0, -1
  store i1 %v2_f3b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3b4 = icmp eq i32 %v0_f3b0, -2
  store i1 %v7_f3b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3b4, label %dec_label_pc_ef40.backedge.thread455, label %dec_label_pc_f3bc

dec_label_pc_f3bc:                                ; preds = %dec_label_pc_f3b0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3bc = icmp eq i32 %v1_f3b0, 0
  store i1 %v2_f3bc, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v1_f3b0, 1
  br i1 %tmp337, label %dec_label_pc_f0c8, label %dec_label_pc_f3c4

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f3bc
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f3c8 = call i32 @function_fb34(i32 7)
  store i32 %v2_eed8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_f3d8 = call i32 @function_fa50(i32 7, i32* %v2_eee0)
  store i32 %v3_f3d8, i32* %r0.global-to-local, align 4
  %v3_f3dc = load i8, i8* %stack_var_-52, align 1
  %v4_f3dc = sext i8 %v3_f3dc to i32
  store i32 %v4_f3dc, i32* %r2.global-to-local, align 4
  store i32 %v3_f3d8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f3e8 = load i32, i32* @r5, align 4
  %v1_f3e8 = add i32 %v0_f3e8, 4
  %v2_f3e8 = inttoptr i32 %v1_f3e8 to i32*
  %v3_f3e8 = load i32, i32* %v2_f3e8, align 4
  store i32 %v3_f3e8, i32* %r0.global-to-local, align 4
  %v4_f3ec = inttoptr i32 %v3_f3d8 to i32*
  %v5_f3ec = call i32 @function_10b6c(i32 %v3_f3e8, i32* %v4_f3ec, i32 %v4_f3dc, i32 16384)
  store i32 %v5_f3ec, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129cc.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f3fc = load i32, i32* @r5, align 4
  %v1_f3fc = add i32 %v0_f3fc, 4
  %v2_f3fc = inttoptr i32 %v1_f3fc to i32*
  %v3_f3fc = load i32, i32* %v2_f3fc, align 4
  store i32 %v3_f3fc, i32* %r0.global-to-local, align 4
  %v5_f400 = call i32 @function_10b6c(i32 %v3_f3fc, i32* bitcast ([3 x i8]* @global_var_129cc.500 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f408 = call i32 @function_fa7c(i32 7)
  store i32 %v1_f408, i32* %r0.global-to-local, align 4
  %v0_f40c = load i32, i32* @r5, align 4
  %v1_f40c = add i32 %v0_f40c, 24
  %v2_f40c = inttoptr i32 %v1_f40c to i32*
  %v3_f40c = load i32, i32* %v2_f40c, align 4
  store i32 %v3_f40c, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_f414 = add i32 %v0_f40c, 12
  %v3_f414 = inttoptr i32 %v2_f414 to i32*
  store i32 9, i32* %v3_f414, align 4
  br label %dec_label_pc_f554

dec_label_pc_f41c:                                ; preds = %dec_label_pc_efbc
  %v1_f41c = add i32 %v0_efbc, 24
  %v2_f41c = inttoptr i32 %v1_f41c to i32*
  %v3_f41c = load i32, i32* %v2_f41c, align 4
  store i32 %v3_f41c, i32* %ip.global-to-local, align 4
  %v1_f420 = add i32 %v3_f41c, -1
  store i32 %v1_f420, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f424 = icmp eq i32 %v1_f420, 0
  store i1 %v2_f424, i1* %cpsr_z.global-to-local, align 1
  %v5_f428 = icmp sgt i32 %v1_f420, 0
  br i1 %v5_f428, label %dec_label_pc_f450, label %dec_label_pc_ef40.backedge.thread

dec_label_pc_f430:                                ; preds = %bb338
  %v2_f430 = icmp ugt i8 %v3_f454, 35
  store i1 %v2_f430, i1* %cpsr_c.global-to-local, align 1
  %v7_f430 = icmp eq i8 %v3_f454, 36
  store i1 %v7_f430, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f430, label %dec_label_pc_f464, label %dec_label_pc_f438

dec_label_pc_f438:                                ; preds = %dec_label_pc_f430
  %v2_f438 = icmp ugt i8 %v3_f454, 34
  store i1 %v2_f438, i1* %cpsr_c.global-to-local, align 1
  %v7_f438 = icmp eq i8 %v3_f454, 35
  store i1 %v7_f438, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f438, label %dec_label_pc_f464, label %dec_label_pc_f440

dec_label_pc_f440:                                ; preds = %dec_label_pc_f438
  %v2_f440 = icmp ugt i8 %v3_f454, 36
  store i1 %v2_f440, i1* %cpsr_c.global-to-local, align 1
  %v7_f440 = icmp eq i8 %v3_f454, 37
  store i1 %v7_f440, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f440, label %dec_label_pc_f464, label %dec_label_pc_f448

dec_label_pc_f448:                                ; preds = %dec_label_pc_f440
  %v1_f448 = add i32 %v0_f464, -1
  store i32 %v1_f448, i32* %r0.global-to-local, align 4
  %v2_f448 = icmp ne i32 %v0_f464, 0
  store i1 %v2_f448, i1* %cpsr_c.global-to-local, align 1
  %v7_f448 = icmp eq i32 %v0_f464, 1
  store i1 %v7_f448, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f448, label %dec_label_pc_ef40.backedge.thread455, label %dec_label_pc_f450

dec_label_pc_f450:                                ; preds = %dec_label_pc_f41c, %dec_label_pc_f448
  %v0_f464 = phi i32 [ %v1_f448, %dec_label_pc_f448 ], [ %v1_f420, %dec_label_pc_f41c ]
  %v2_f450 = add i32 %v0_f464, %v0_efbc
  store i32 %v2_f450, i32* %r3.global-to-local, align 4
  %v1_f454 = add i32 %v2_f450, 28
  %v2_f454 = inttoptr i32 %v1_f454 to i8*
  %v3_f454 = load i8, i8* %v2_f454, align 1
  %v4_f454 = zext i8 %v3_f454 to i32
  store i32 %v4_f454, i32* %r3.global-to-local, align 4
  %v2_f458 = icmp ugt i8 %v3_f454, 61
  store i1 %v2_f458, i1* %cpsr_c.global-to-local, align 1
  %v7_f458 = icmp eq i8 %v3_f454, 62
  store i1 %v7_f458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f458, label %dec_label_pc_f464, label %bb338

bb338:                                            ; preds = %dec_label_pc_f450
  %v3_f45c = icmp ugt i8 %v3_f454, 57
  store i1 %v3_f45c, i1* %cpsr_c.global-to-local, align 1
  %v8_f45c = icmp eq i8 %v3_f454, 58
  store i1 %v8_f45c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f45c, label %dec_label_pc_f464, label %dec_label_pc_f430

dec_label_pc_f464:                                ; preds = %dec_label_pc_f450, %bb338, %dec_label_pc_f440, %dec_label_pc_f438, %dec_label_pc_f430
  %v1_f464 = add i32 %v0_f464, 1
  store i32 %v1_f464, i32* @r7, align 4
  %v2_f468 = icmp eq i32 %v1_f464, -1
  store i1 %v2_f468, i1* %cpsr_c.global-to-local, align 1
  %v7_f468 = icmp eq i32 %v0_f464, -2
  store i1 %v7_f468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f468, label %dec_label_pc_ef40.backedge.thread455, label %dec_label_pc_f470

dec_label_pc_f470:                                ; preds = %dec_label_pc_f464
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f470 = icmp eq i32 %v1_f464, 0
  store i1 %v2_f470, i1* %cpsr_z.global-to-local, align 1
  %tmp339 = icmp slt i32 %v1_f464, 1
  br i1 %tmp339, label %dec_label_pc_f0c8, label %dec_label_pc_f478

dec_label_pc_f478:                                ; preds = %dec_label_pc_f470
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f47c = call i32 @function_fb34(i32 4)
  store i32 %v2_eeec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_f48c = call i32 @function_fa50(i32 4, i32* nonnull %stack_var_-56)
  store i32 %v3_f48c, i32* %r0.global-to-local, align 4
  %v3_f490 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f490, i32* %r2.global-to-local, align 4
  store i32 %v3_f48c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f49c = load i32, i32* @r5, align 4
  %v1_f49c = add i32 %v0_f49c, 4
  %v2_f49c = inttoptr i32 %v1_f49c to i32*
  %v3_f49c = load i32, i32* %v2_f49c, align 4
  store i32 %v3_f49c, i32* %r0.global-to-local, align 4
  %v4_f4a0 = inttoptr i32 %v3_f48c to i32*
  %v5_f4a0 = call i32 @function_10b6c(i32 %v3_f49c, i32* %v4_f4a0, i32 %v3_f490, i32 16384)
  store i32 %v5_f4a0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129cc.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f4b0 = load i32, i32* @r5, align 4
  %v1_f4b0 = add i32 %v0_f4b0, 4
  %v2_f4b0 = inttoptr i32 %v1_f4b0 to i32*
  %v3_f4b0 = load i32, i32* %v2_f4b0, align 4
  store i32 %v3_f4b0, i32* %r0.global-to-local, align 4
  %v5_f4b4 = call i32 @function_10b6c(i32 %v3_f4b0, i32* bitcast ([3 x i8]* @global_var_129cc.500 to i32*), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f4bc = call i32 @function_fa7c(i32 4)
  store i32 %v1_f4bc, i32* %r0.global-to-local, align 4
  %v0_f4c0 = load i32, i32* @r5, align 4
  %v1_f4c0 = add i32 %v0_f4c0, 24
  %v2_f4c0 = inttoptr i32 %v1_f4c0 to i32*
  %v3_f4c0 = load i32, i32* %v2_f4c0, align 4
  store i32 %v3_f4c0, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_f4c8 = add i32 %v0_f4c0, 12
  %v3_f4c8 = inttoptr i32 %v2_f4c8 to i32*
  store i32 8, i32* %v3_f4c8, align 4
  br label %dec_label_pc_f554

dec_label_pc_f4d0:                                ; preds = %dec_label_pc_efbc
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f4d4 = call i32 @function_fb34(i32 10)
  store i32 %v2_eed8, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_f4e4 = call i32 @function_fa50(i32 10, i32* %v2_eee0)
  %v3_f4e8 = load i8, i8* %stack_var_-52, align 1
  %v4_f4e8 = sext i8 %v3_f4e8 to i32
  store i32 %v3_f4e4, i32* %r2.global-to-local, align 4
  %v1_f4f0 = add nsw i32 %v4_f4e8, -1
  store i32 %v1_f4f0, i32* %r3.global-to-local, align 4
  %v0_f4f4 = load i32, i32* @sl, align 4
  store i32 %v0_f4f4, i32* %r0.global-to-local, align 4
  %v0_f4f8 = load i32, i32* @r5, align 4
  %v1_f4f8 = add i32 %v0_f4f8, 24
  %v2_f4f8 = inttoptr i32 %v1_f4f8 to i32*
  %v3_f4f8 = load i32, i32* %v2_f4f8, align 4
  store i32 %v3_f4f8, i32* %r1.global-to-local, align 4
  %v4_f4fc = call i32 @function_1001c(i32 %v0_f4f4, i32 %v3_f4f8, i32 %v3_f4e4, i32 %v1_f4f0)
  %v2_f500 = icmp eq i32 %v4_f4fc, -1
  store i1 %v2_f500, i1* %cpsr_c.global-to-local, align 1
  %v7_f500 = icmp eq i32 %v4_f4fc, -1
  store i1 %v7_f500, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_f4fc, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f6ec = call i32 @function_fa7c(i32 10)
  br i1 %v7_f500, label %dec_label_pc_f6e8, label %dec_label_pc_f50c

dec_label_pc_f50c:                                ; preds = %dec_label_pc_f4d0
  store i32 %v1_f6ec, i32* %r0.global-to-local, align 4
  %v0_f514 = load i32, i32* @r5, align 4
  %v1_f514 = add i32 %v0_f514, 4
  %v2_f514 = inttoptr i32 %v1_f514 to i32*
  %v3_f514 = load i32, i32* %v2_f514, align 4
  store i32 %v3_f514, i32* %r0.global-to-local, align 4
  %v1_f518 = call i32 @function_10660(i32 %v3_f514)
  store i32 %v1_f518, i32* %r0.global-to-local, align 4
  %v0_f51c = load i32, i32* @r5, align 4
  %v1_f51c = add i32 %v0_f51c, 284
  %v2_f51c = inttoptr i32 %v1_f51c to i8*
  %v3_f51c = load i8, i8* %v2_f51c, align 1
  %v4_f51c = zext i8 %v3_f51c to i32
  %v1_f520 = add nuw nsw i32 %v4_f51c, 1
  %v1_f524 = urem i32 %v1_f520, 256
  store i32 %v1_f524, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_f52c = icmp ugt i32 %v1_f524, 9
  store i1 %v2_f52c, i1* %cpsr_c.global-to-local, align 1
  %v7_f52c = icmp eq i32 %v1_f524, 10
  store i1 %v7_f52c, i1* %cpsr_z.global-to-local, align 1
  %v2_f530 = add i32 %v0_f51c, 4
  %v3_f530 = inttoptr i32 %v2_f530 to i32*
  store i32 -1, i32* %v3_f530, align 4
  %v0_f534 = load i32, i32* %r3.global-to-local, align 4
  %v1_f534 = trunc i32 %v0_f534 to i8
  %v2_f534 = load i32, i32* @r5, align 4
  %v3_f534 = add i32 %v2_f534, 284
  %v4_f534 = inttoptr i32 %v3_f534 to i8*
  store i8 %v1_f534, i8* %v4_f534, align 1
  %v0_f538 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f538, label %dec_label_pc_f53c, label %dec_label_pc_f848

dec_label_pc_f53c:                                ; preds = %dec_label_pc_f50c
  store i32 0, i32* @lr, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_f544 = load i32, i32* @r5, align 4
  %v1_f544 = add i32 %v0_f544, 24
  %v2_f544 = inttoptr i32 %v1_f544 to i32*
  %v3_f544 = load i32, i32* %v2_f544, align 4
  store i32 %v3_f544, i32* %ip.global-to-local, align 4
  %v3_f548 = add i32 %v0_f544, 284
  %v4_f548 = inttoptr i32 %v3_f548 to i8*
  store i8 0, i8* %v4_f548, align 1
  %v0_f54c = load i32, i32* %r0.global-to-local, align 4
  %v1_f54c = load i32, i32* @r5, align 4
  %v2_f54c = add i32 %v1_f54c, 12
  %v3_f54c = inttoptr i32 %v2_f54c to i32*
  store i32 %v0_f54c, i32* %v3_f54c, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_f554

dec_label_pc_f554:                                ; preds = %.thread223, %dec_label_pc_f5d4, %dec_label_pc_f848, %dec_label_pc_f784, %dec_label_pc_f478, %dec_label_pc_f3c4, %dec_label_pc_f310, %dec_label_pc_f25c, %dec_label_pc_f1c4, %dec_label_pc_f134, %dec_label_pc_f0d0, %dec_label_pc_f53c
  %v0_f554 = load i32, i32* %ip.global-to-local, align 4
  %v1_f554 = load i32, i32* @r7, align 4
  %v2_f554 = sub i32 %v0_f554, %v1_f554
  %v3_f554 = icmp uge i32 %v0_f554, %v1_f554
  store i1 %v3_f554, i1* %cpsr_c.global-to-local, align 1
  %v4_f554 = xor i32 %v1_f554, %v0_f554
  %v5_f554 = xor i32 %v2_f554, %v0_f554
  %v6_f554 = and i32 %v5_f554, %v4_f554
  %v7_f554 = icmp slt i32 %v6_f554, 0
  %v8_f554 = icmp slt i32 %v2_f554, 0
  %v9_f554 = icmp eq i32 %v0_f554, %v1_f554
  store i1 %v9_f554, i1* %cpsr_z.global-to-local, align 1
  %v2_f558 = xor i1 %v8_f554, %v7_f554
  %v0_f554.v1_f554 = select i1 %v2_f558, i32 %v0_f554, i32 %v1_f554
  store i32 %v0_f554.v1_f554, i32* %r1.global-to-local, align 4
  %v2_f560 = sub i32 %v0_f554, %v0_f554.v1_f554
  store i32 %v2_f560, i32* @r2, align 4
  %v1_f564 = load i32, i32* @r5, align 4
  %v2_f564 = add i32 %v1_f564, 24
  %v3_f564 = inttoptr i32 %v2_f564 to i32*
  store i32 %v2_f560, i32* %v3_f564, align 4
  %v0_f568 = load i32, i32* @sl, align 4
  %v1_f568 = load i32, i32* %r1.global-to-local, align 4
  %v2_f568 = add i32 %v1_f568, %v0_f568
  store i32 %v2_f568, i32* @r1, align 4
  store i32 %v0_f568, i32* @r0, align 4
  %v3_f570 = call i32 @function_109b0(i32 %v0_f568, i32 %v2_f568, i32 %v2_f560)
  store i32 %v3_f570, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_efbc

dec_label_pc_f578:                                ; preds = %dec_label_pc_efbc
  %v1_f578 = add i32 %v0_efbc, 24
  %v2_f578 = inttoptr i32 %v1_f578 to i32*
  %v3_f578 = load i32, i32* %v2_f578, align 4
  store i32 %v3_f578, i32* %ip.global-to-local, align 4
  %v1_f57c = add i32 %v3_f578, -1
  store i32 %v1_f57c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f580 = icmp eq i32 %v1_f57c, 0
  store i1 %v2_f580, i1* %cpsr_z.global-to-local, align 1
  %v5_f584 = icmp sgt i32 %v1_f57c, 0
  br i1 %v5_f584, label %dec_label_pc_f5ac, label %dec_label_pc_ef40.backedge.thread

dec_label_pc_f58c:                                ; preds = %bb342
  %v2_f58c = icmp ugt i8 %v3_f5b0, 35
  store i1 %v2_f58c, i1* %cpsr_c.global-to-local, align 1
  %v7_f58c = icmp eq i8 %v3_f5b0, 36
  store i1 %v7_f58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f58c, label %dec_label_pc_f5c0, label %dec_label_pc_f594

dec_label_pc_f594:                                ; preds = %dec_label_pc_f58c
  %v2_f594 = icmp ugt i8 %v3_f5b0, 34
  store i1 %v2_f594, i1* %cpsr_c.global-to-local, align 1
  %v7_f594 = icmp eq i8 %v3_f5b0, 35
  store i1 %v7_f594, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f594, label %dec_label_pc_f5c0, label %dec_label_pc_f59c

dec_label_pc_f59c:                                ; preds = %dec_label_pc_f594
  %v2_f59c = icmp ugt i8 %v3_f5b0, 36
  store i1 %v2_f59c, i1* %cpsr_c.global-to-local, align 1
  %v7_f59c = icmp eq i8 %v3_f5b0, 37
  store i1 %v7_f59c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f59c, label %dec_label_pc_f5c0, label %dec_label_pc_f5a4

dec_label_pc_f5a4:                                ; preds = %dec_label_pc_f59c
  %v1_f5a4 = add i32 %v0_f5c0, -1
  store i32 %v1_f5a4, i32* %r0.global-to-local, align 4
  %v2_f5a4 = icmp ne i32 %v0_f5c0, 0
  store i1 %v2_f5a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5a4 = icmp eq i32 %v0_f5c0, 1
  store i1 %v7_f5a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5a4, label %dec_label_pc_ef40.backedge.thread455, label %dec_label_pc_f5ac

dec_label_pc_f5ac:                                ; preds = %dec_label_pc_f578, %dec_label_pc_f5a4
  %v0_f5c0 = phi i32 [ %v1_f5a4, %dec_label_pc_f5a4 ], [ %v1_f57c, %dec_label_pc_f578 ]
  %v2_f5ac = add i32 %v0_f5c0, %v0_efbc
  store i32 %v2_f5ac, i32* %r3.global-to-local, align 4
  %v1_f5b0 = add i32 %v2_f5ac, 28
  %v2_f5b0 = inttoptr i32 %v1_f5b0 to i8*
  %v3_f5b0 = load i8, i8* %v2_f5b0, align 1
  %v4_f5b0 = zext i8 %v3_f5b0 to i32
  store i32 %v4_f5b0, i32* %r3.global-to-local, align 4
  %v2_f5b4 = icmp ugt i8 %v3_f5b0, 61
  store i1 %v2_f5b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5b4 = icmp eq i8 %v3_f5b0, 62
  store i1 %v7_f5b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5b4, label %dec_label_pc_f5c0, label %bb342

bb342:                                            ; preds = %dec_label_pc_f5ac
  %v3_f5b8 = icmp ugt i8 %v3_f5b0, 57
  store i1 %v3_f5b8, i1* %cpsr_c.global-to-local, align 1
  %v8_f5b8 = icmp eq i8 %v3_f5b0, 58
  store i1 %v8_f5b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f5b8, label %dec_label_pc_f5c0, label %dec_label_pc_f58c

dec_label_pc_f5c0:                                ; preds = %dec_label_pc_f5ac, %bb342, %dec_label_pc_f59c, %dec_label_pc_f594, %dec_label_pc_f58c
  %v1_f5c0 = add i32 %v0_f5c0, 1
  store i32 %v1_f5c0, i32* @r7, align 4
  %v2_f5c4 = icmp eq i32 %v1_f5c0, -1
  store i1 %v2_f5c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5c4 = icmp eq i32 %v0_f5c0, -2
  store i1 %v7_f5c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5c4, label %dec_label_pc_ef40.backedge.thread455, label %dec_label_pc_f5cc

dec_label_pc_f5cc:                                ; preds = %dec_label_pc_f5c0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5cc = icmp eq i32 %v1_f5c0, 0
  store i1 %v2_f5cc, i1* %cpsr_z.global-to-local, align 1
  %tmp343 = icmp slt i32 %v1_f5c0, 1
  br i1 %tmp343, label %dec_label_pc_f0c8, label %dec_label_pc_f5d4

dec_label_pc_f5d4:                                ; preds = %dec_label_pc_f5cc
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f5d8 = call i32 @function_fb34(i32 8)
  store i32 %v2_eed8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_f5e8 = call i32 @function_fa50(i32 8, i32* %v2_eee0)
  store i32 %v3_f5e8, i32* %r0.global-to-local, align 4
  %v3_f5ec = load i8, i8* %stack_var_-52, align 1
  %v4_f5ec = sext i8 %v3_f5ec to i32
  store i32 %v4_f5ec, i32* %r2.global-to-local, align 4
  store i32 %v3_f5e8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f5f8 = load i32, i32* @r5, align 4
  %v1_f5f8 = add i32 %v0_f5f8, 4
  %v2_f5f8 = inttoptr i32 %v1_f5f8 to i32*
  %v3_f5f8 = load i32, i32* %v2_f5f8, align 4
  store i32 %v3_f5f8, i32* %r0.global-to-local, align 4
  %v4_f5fc = inttoptr i32 %v3_f5e8 to i32*
  %v5_f5fc = call i32 @function_10b6c(i32 %v3_f5f8, i32* %v4_f5fc, i32 %v4_f5ec, i32 16384)
  store i32 %v5_f5fc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_129cc.500 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f60c = load i32, i32* @r5, align 4
  %v1_f60c = add i32 %v0_f60c, 4
  %v2_f60c = inttoptr i32 %v1_f60c to i32*
  %v3_f60c = load i32, i32* %v2_f60c, align 4
  store i32 %v3_f60c, i32* %r0.global-to-local, align 4
  %v5_f610 = call i32 @function_10b6c(i32 %v3_f60c, i32* bitcast ([3 x i8]* @global_var_129cc.500 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f618 = call i32 @function_fa7c(i32 8)
  store i32 %v1_f618, i32* %r0.global-to-local, align 4
  %v0_f61c = load i32, i32* @r5, align 4
  %v1_f61c = add i32 %v0_f61c, 24
  %v2_f61c = inttoptr i32 %v1_f61c to i32*
  %v3_f61c = load i32, i32* %v2_f61c, align 4
  store i32 %v3_f61c, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_f624 = add i32 %v0_f61c, 12
  %v3_f624 = inttoptr i32 %v2_f624 to i32*
  store i32 10, i32* %v3_f624, align 4
  br label %dec_label_pc_f554

dec_label_pc_f62c:                                ; preds = %dec_label_pc_f040
  store i32 ptrtoint (i32* @global_var_129d8.502 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f638, i32* @r0, align 4
  %v3_f63c = call i32 @function_109a0(i32 %v2_f638, i32 ptrtoint (i32* @global_var_129d8.502 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_f648, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_129cf.504 to i32), i32* @r1, align 4
  %v3_f650 = call i32 @function_109a0(i32 %v2_f648, i32 ptrtoint (i32* @global_var_129cf.504 to i32), i32 9)
  store i32 %v3_f650, i32* %r0.global-to-local, align 4
  %v0_f654 = load i32, i32* @r5, align 4
  %v1_f654 = add i32 %v0_f654, 24
  %v2_f654 = inttoptr i32 %v1_f654 to i32*
  %v3_f654 = load i32, i32* %v2_f654, align 4
  store i32 %v3_f654, i32* %ip.global-to-local, align 4
  %v0_f658 = load i32, i32* @r6, align 4
  %v1_f658 = add i32 %v0_f658, 2
  store i32 %v1_f658, i32* %r2.global-to-local, align 4
  %v0_f65c = load i32, i32* @sl, align 4
  %v2_f65c = add i32 %v0_f65c, %v3_f654
  store i32 %v2_f65c, i32* %r3.global-to-local, align 4
  %v3_f660 = icmp uge i32 %v2_f65c, %v1_f658
  store i1 %v3_f660, i1* %cpsr_c.global-to-local, align 1
  %v9_f660 = icmp eq i32 %v2_f65c, %v1_f658
  store i1 %v9_f660, i1* %cpsr_z.global-to-local, align 1
  %v2_f664 = xor i1 %v3_f660, true
  %v3_f664 = or i1 %v9_f660, %v2_f664
  br i1 %v3_f664, label %dec_label_pc_f62c.dec_label_pc_f0b8.loopexit_crit_edge, label %dec_label_pc_f668

dec_label_pc_f62c.dec_label_pc_f0b8.loopexit_crit_edge: ; preds = %dec_label_pc_f62c
  %v0_f0b8.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f0b8

dec_label_pc_f668:                                ; preds = %dec_label_pc_f62c
  %v0_f668 = load i32, i32* @r4, align 4
  %v1_f668 = add i32 %v0_f668, 1
  %v2_f668 = inttoptr i32 %v1_f668 to i8*
  %v3_f668 = load i8, i8* %v2_f668, align 1
  %v4_f668 = zext i8 %v3_f668 to i32
  store i32 %v4_f668, i32* %r3.global-to-local, align 4
  %v2_f66c = icmp ugt i8 %v3_f668, 30
  store i1 %v2_f66c, i1* %cpsr_c.global-to-local, align 1
  %v7_f66c = icmp eq i8 %v3_f668, 31
  store i1 %v7_f66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f66c, label %dec_label_pc_f7f8, label %dec_label_pc_f674

dec_label_pc_f674:                                ; preds = %dec_label_pc_f668
  %v1_f674 = add i32 %v0_f668, -1
  %v2_f674 = inttoptr i32 %v1_f674 to i8*
  %v3_f674 = load i8, i8* %v2_f674, align 1
  %v4_f674 = zext i8 %v3_f674 to i32
  store i32 %v4_f674, i32* %r3.global-to-local, align 4
  %v2_f678 = icmp ugt i8 %v3_f674, -4
  store i1 %v2_f678, i1* %cpsr_c.global-to-local, align 1
  %v7_f678 = icmp eq i8 %v3_f674, -3
  store i1 %v7_f678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f678, label %.thread75, label %dec_label_pc_f688

.thread75:                                        ; preds = %dec_label_pc_f674
  store i32 -4, i32* %r2.global-to-local, align 4
  store i8 -4, i8* %v2_f674, align 1
  %v0_f684.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f684.pr.pr, label %dec_label_pc_f054, label %.thread75.dec_label_pc_f688_crit_edge

.thread75.dec_label_pc_f688_crit_edge:            ; preds = %.thread75
  %v0_f688.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f688

dec_label_pc_f688:                                ; preds = %.thread75.dec_label_pc_f688_crit_edge, %dec_label_pc_f674
  %v0_f688 = phi i32 [ %v0_f688.pre, %.thread75.dec_label_pc_f688_crit_edge ], [ %v4_f674, %dec_label_pc_f674 ]
  %v2_f688 = icmp ugt i32 %v0_f688, 250
  store i1 %v2_f688, i1* %cpsr_c.global-to-local, align 1
  %v7_f688 = icmp eq i32 %v0_f688, 251
  store i1 %v7_f688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f688, label %bb344, label %dec_label_pc_f054

bb344:                                            ; preds = %dec_label_pc_f688
  %v1_f68c = load i32, i32* %r8.global-to-local, align 4
  %v2_f68c = trunc i32 %v1_f68c to i8
  %v3_f68c = load i32, i32* @r4, align 4
  %v4_f68c = add i32 %v3_f68c, -1
  %v5_f68c = inttoptr i32 %v4_f68c to i8*
  store i8 %v2_f68c, i8* %v5_f68c, align 1
  br label %dec_label_pc_f054

dec_label_pc_f694:                                ; preds = %dec_label_pc_f194, %dec_label_pc_f170, %dec_label_pc_f1b0
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f698 = call i32 @function_fb34(i32 11)
  store i32 %v2_eed8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_f6a8 = call i32 @function_fa50(i32 11, i32* %v2_eee0)
  %v3_f6ac = load i8, i8* %stack_var_-52, align 1
  %v4_f6ac = sext i8 %v3_f6ac to i32
  store i32 %v3_f6a8, i32* %r2.global-to-local, align 4
  %v1_f6b4 = add nsw i32 %v4_f6ac, -1
  store i32 %v1_f6b4, i32* %r3.global-to-local, align 4
  %v0_f6b8 = load i32, i32* @sl, align 4
  store i32 %v0_f6b8, i32* %r0.global-to-local, align 4
  %v0_f6bc = load i32, i32* @r5, align 4
  %v1_f6bc = add i32 %v0_f6bc, 24
  %v2_f6bc = inttoptr i32 %v1_f6bc to i32*
  %v3_f6bc = load i32, i32* %v2_f6bc, align 4
  store i32 %v3_f6bc, i32* %r1.global-to-local, align 4
  %v4_f6c0 = call i32 @function_1001c(i32 %v0_f6b8, i32 %v3_f6bc, i32 %v3_f6a8, i32 %v1_f6b4)
  store i32 %v4_f6c0, i32* %r0.global-to-local, align 4
  %v1_f6c4 = add i32 %v4_f6c0, 1
  store i32 %v1_f6c4, i32* @r7, align 4
  %v2_f6c4 = icmp eq i32 %v4_f6c0, -1
  store i1 %v2_f6c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6c4 = icmp eq i32 %v1_f6c4, 0
  store i1 %v7_f6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6c4, label %thread-pre-split78, label %bb345

bb345:                                            ; preds = %dec_label_pc_f694
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split78

thread-pre-split78:                               ; preds = %dec_label_pc_f694, %bb345
  %v0_f6cc = phi i1 [ false, %bb345 ], [ true, %dec_label_pc_f694 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_f6cc, i1* %cpsr_z.global-to-local, align 1
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f860 = call i32 @function_fa7c(i32 11)
  store i32 %v1_f860, i32* %r0.global-to-local, align 4
  br i1 %v0_f6cc, label %dec_label_pc_f85c, label %dec_label_pc_f6d4

dec_label_pc_f6d4:                                ; preds = %thread-pre-split78
  %v0_f6dc = load i32, i32* @r7, align 4
  %v3_f6dc = icmp eq i32 %v0_f6dc, -1
  store i1 %v3_f6dc, i1* %cpsr_c.global-to-local, align 1
  %v8_f6dc = icmp eq i32 %v0_f6dc, -1
  store i1 %v8_f6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f6dc, label %dec_label_pc_ef3c.loopexit, label %dec_label_pc_f1bc

dec_label_pc_f6e8:                                ; preds = %dec_label_pc_f4d0
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f6f4 = call i32 @function_fb34(i32 9)
  store i32 %v2_eed8, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f704 = call i32 @function_fa50(i32 9, i32* nonnull %v2_eee0)
  store i32 %v3_f704, i32* %r0.global-to-local, align 4
  %v3_f708 = load i8, i8* %stack_var_-52, align 1
  %v4_f708 = sext i8 %v3_f708 to i32
  store i32 %v3_f704, i32* %r2.global-to-local, align 4
  %v1_f710 = add nsw i32 %v4_f708, -1
  store i32 %v1_f710, i32* %r3.global-to-local, align 4
  %v0_f714 = load i32, i32* @r5, align 4
  %v1_f714 = add i32 %v0_f714, 24
  %v2_f714 = inttoptr i32 %v1_f714 to i32*
  %v3_f714 = load i32, i32* %v2_f714, align 4
  store i32 %v3_f714, i32* %r1.global-to-local, align 4
  %v0_f718 = load i32, i32* @sl, align 4
  store i32 %v0_f718, i32* %r0.global-to-local, align 4
  %v4_f71c = call i32 @function_1001c(i32 %v0_f718, i32 %v3_f714, i32 %v3_f704, i32 %v1_f710)
  %sext6 = mul i32 %v4_f71c, 16777216
  %v1_f720 = sdiv i32 %sext6, 16777216
  store i32 %v1_f720, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f728 = call i32 @function_fa7c(i32 9)
  store i32 %v1_f728, i32* %r0.global-to-local, align 4
  %v0_f72c = load i32, i32* @r7, align 4
  %v2_f72c = icmp eq i32 %v0_f72c, -1
  store i1 %v2_f72c, i1* %cpsr_c.global-to-local, align 1
  %v7_f72c = icmp eq i32 %v0_f72c, -1
  store i1 %v7_f72c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f72c, label %dec_label_pc_ef3c.loopexit, label %dec_label_pc_f734

dec_label_pc_f734:                                ; preds = %dec_label_pc_f6e8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f734 = icmp eq i32 %v0_f72c, 0
  store i1 %v2_f734, i1* %cpsr_z.global-to-local, align 1
  %tmp346 = icmp slt i32 %v0_f72c, 1
  br i1 %tmp346, label %dec_label_pc_f0c8, label %dec_label_pc_f73c

dec_label_pc_f73c:                                ; preds = %dec_label_pc_f734
  %v0_f73c = load i32, i32* @r5, align 4
  %v1_f73c = add i32 %v0_f73c, 21
  %v2_f73c = inttoptr i32 %v1_f73c to i8*
  %v3_f73c = load i8, i8* %v2_f73c, align 1
  %v4_f73c = zext i8 %v3_f73c to i32
  store i32 %v4_f73c, i32* %r3.global-to-local, align 4
  %v1_f740 = add i32 %v0_f73c, 20
  %v2_f740 = inttoptr i32 %v1_f740 to i8*
  %v3_f740 = load i8, i8* %v2_f740, align 1
  %v4_f740 = zext i8 %v3_f740 to i32
  store i32 %v4_f740, i32* %r2.global-to-local, align 4
  %v1_f744 = add i32 %v0_f73c, 16
  %v2_f744 = inttoptr i32 %v1_f744 to i32*
  %v3_f744 = load i32, i32* %v2_f744, align 4
  store i32 %v3_f744, i32* %r1.global-to-local, align 4
  %v4_f748 = mul nuw nsw i32 %v4_f73c, 256
  %v5_f748 = or i32 %v4_f740, %v4_f748
  store i32 %v5_f748, i32* %r2.global-to-local, align 4
  %v1_f74c = and i32 %v4_f740, 128
  %v2_f74c = icmp ne i32 %v1_f74c, 0
  store i1 %v2_f74c, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_f73c, i32* %r3.global-to-local, align 4
  store i32 %v3_f744, i32* %stack_var_-56, align 4
  store i32 %v5_f748, i32* %stack_var_-38, align 4
  %v1_f75c = inttoptr i32 %v0_f73c to i32*
  %v2_f75c = load i32, i32* %v1_f75c, align 4
  store i32 %v2_f75c, i32* %r8.global-to-local, align 4
  %v0_f760 = call i32 @function_1068c()
  store i32 %v0_f760, i32* %r0.global-to-local, align 4
  %v7_f764 = icmp eq i32 %v0_f760, -1
  %.357 = zext i1 %v7_f764 to i32
  store i32 %.357, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f770 = icmp eq i32 %v0_f760, 0
  store i1 %v2_f770, i1* %cpsr_z.global-to-local, align 1
  %tmp349 = icmp slt i32 %v0_f760, 1
  br i1 %tmp349, label %bb350, label %.thread81

.thread81:                                        ; preds = %dec_label_pc_f73c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f784

bb350:                                            ; preds = %dec_label_pc_f73c
  store i32 %.357, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f77c = icmp eq i1 %v7_f764, false
  store i1 %v2_f77c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f77c, label %dec_label_pc_f8ac, label %dec_label_pc_f784

dec_label_pc_f784:                                ; preds = %.thread81, %bb350
  %v0_f784 = load i32, i32* @r5, align 4
  %v1_f784 = add i32 %v0_f784, 4
  %v2_f784 = inttoptr i32 %v1_f784 to i32*
  %v3_f784 = load i32, i32* %v2_f784, align 4
  store i32 %v3_f784, i32* %r0.global-to-local, align 4
  %v1_f788 = call i32 @function_10660(i32 %v3_f784)
  store i32 %v1_f788, i32* %r0.global-to-local, align 4
  %v0_f78c = load i32, i32* @r5, align 4
  %v1_f78c = add i32 %v0_f78c, 24
  %v2_f78c = inttoptr i32 %v1_f78c to i32*
  %v3_f78c = load i32, i32* %v2_f78c, align 4
  store i32 %v3_f78c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_f794 = load i32, i32* @r4, align 4
  %v2_f794 = add i32 %v0_f78c, 4
  %v3_f794 = inttoptr i32 %v2_f794 to i32*
  store i32 %v0_f794, i32* %v3_f794, align 4
  %v0_f798 = load i32, i32* %r2.global-to-local, align 4
  %v1_f798 = load i32, i32* @r5, align 4
  %v2_f798 = add i32 %v1_f798, 12
  %v3_f798 = inttoptr i32 %v2_f798 to i32*
  store i32 %v0_f798, i32* %v3_f798, align 4
  br label %dec_label_pc_f554

dec_label_pc_f7a0:                                ; preds = %dec_label_pc_ef58
  br i1 %v2_ef7c, label %dec_label_pc_f998, label %dec_label_pc_f7a4

dec_label_pc_f7a4:                                ; preds = %dec_label_pc_f7a0
  %v3_f7a4 = icmp eq i32 %v5_ef78, -1
  store i1 %v3_f7a4, i1* %cpsr_c.global-to-local, align 1
  %v8_f7a4 = icmp eq i32 %v5_ef78, -1
  store i1 %v8_f7a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f7a4, label %dec_label_pc_f7ac, label %dec_label_pc_efa4

dec_label_pc_f7ac:                                ; preds = %dec_label_pc_f7a4
  %v0_f7ac = load i32, i32* @sb, align 4
  %v1_f7ac = inttoptr i32 %v0_f7ac to i32*
  %v2_f7ac = load i32, i32* %v1_f7ac, align 4
  store i32 %v2_f7ac, i32* %r3.global-to-local, align 4
  %v2_f7b0 = icmp ugt i32 %v2_f7ac, 10
  store i1 %v2_f7b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7b0 = icmp eq i32 %v2_f7ac, 11
  store i1 %v7_f7b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7b0, label %dec_label_pc_ed8c, label %dec_label_pc_f7b8

dec_label_pc_f7b8:                                ; preds = %dec_label_pc_f7ac, %dec_label_pc_f998
  %v0_f7b8 = load i32, i32* @r5, align 4
  %v1_f7b8 = add i32 %v0_f7b8, 4
  %v2_f7b8 = inttoptr i32 %v1_f7b8 to i32*
  %v3_f7b8 = load i32, i32* %v2_f7b8, align 4
  store i32 %v3_f7b8, i32* %r0.global-to-local, align 4
  %v1_f7bc = call i32 @function_10660(i32 %v3_f7b8)
  store i32 %v1_f7bc, i32* %r0.global-to-local, align 4
  %v0_f7c0 = load i32, i32* @r5, align 4
  %v1_f7c0 = add i32 %v0_f7c0, 284
  %v2_f7c0 = inttoptr i32 %v1_f7c0 to i8*
  %v3_f7c0 = load i8, i8* %v2_f7c0, align 1
  %v4_f7c0 = zext i8 %v3_f7c0 to i32
  %v1_f7c4 = add nuw nsw i32 %v4_f7c0, 1
  %v1_f7c8 = urem i32 %v1_f7c4, 256
  store i32 %v1_f7c8, i32* %r3.global-to-local, align 4
  %v2_f7cc = icmp ugt i32 %v1_f7c8, 8
  store i1 %v2_f7cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7cc = icmp eq i32 %v1_f7c8, 9
  store i1 %v7_f7cc, i1* %cpsr_z.global-to-local, align 1
  %v2_f7d0 = xor i1 %v7_f7cc, true
  %v3_f7d0 = and i1 %v2_f7cc, %v2_f7d0
  br i1 %v3_f7d0, label %bb351, label %bb352

bb351:                                            ; preds = %dec_label_pc_f7b8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb352

bb352:                                            ; preds = %dec_label_pc_f7b8, %bb351
  store i32 -1, i32* @r4, align 4
  %v1_f7d8 = trunc i32 %v1_f7c4 to i8
  store i8 %v1_f7d8, i8* %v2_f7c0, align 1
  %v0_f7dc = load i32, i32* @r4, align 4
  %v1_f7dc = load i32, i32* @r5, align 4
  %v2_f7dc = add i32 %v1_f7dc, 4
  %v3_f7dc = inttoptr i32 %v2_f7dc to i32*
  store i32 %v0_f7dc, i32* %v3_f7dc, align 4
  %v0_f7e0 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f7e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f7e0 = xor i1 %v1_f7e0, true
  %v3_f7e0 = and i1 %v0_f7e0, %v2_f7e0
  br i1 %v3_f7e0, label %bb353, label %.thread228

bb353:                                            ; preds = %bb352
  %v4_f7e0 = load i32, i32* %r0.global-to-local, align 4
  %v5_f7e0 = load i32, i32* @r5, align 4
  %v6_f7e0 = add i32 %v5_f7e0, 12
  %v7_f7e0 = inttoptr i32 %v6_f7e0 to i32*
  store i32 %v4_f7e0, i32* %v7_f7e0, align 4
  %v4_f7e4 = load i32, i32* %r0.global-to-local, align 4
  %v5_f7e4 = trunc i32 %v4_f7e4 to i8
  %v6_f7e4 = load i32, i32* @r5, align 4
  %v7_f7e4 = add i32 %v6_f7e4, 284
  %v8_f7e4 = inttoptr i32 %v7_f7e4 to i8*
  store i8 %v5_f7e4, i8* %v8_f7e4, align 1
  %v0_f7e8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f7e8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread228

.thread228:                                       ; preds = %bb352, %bb353
  %v1_f7e8 = phi i1 [ %v1_f7e8.pre, %bb353 ], [ %v1_f7e0, %bb352 ]
  %v0_f7e8 = phi i1 [ %v0_f7e8.pre, %bb353 ], [ %v0_f7e0, %bb352 ]
  %v2_f7e8 = xor i1 %v1_f7e8, true
  %v3_f7e8 = and i1 %v0_f7e8, %v2_f7e8
  br i1 %v3_f7e8, label %dec_label_pc_ed8c, label %dec_label_pc_f7ec

dec_label_pc_f7ec:                                ; preds = %.thread228
  %v0_f7ec = load i32, i32* @r5, align 4
  store i32 %v0_f7ec, i32* @r0, align 4
  %v0_f7f0 = call i32 @function_d3bc()
  store i32 %v0_f7f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed8c

dec_label_pc_f7f8:                                ; preds = %dec_label_pc_f668
  store i32 %v2_f638, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_f808 = add i32 %v0_f654, 4
  %v2_f808 = inttoptr i32 %v1_f808 to i32*
  %v3_f808 = load i32, i32* %v2_f808, align 4
  store i32 %v3_f808, i32* %r0.global-to-local, align 4
  %v5_f80c = call i32 @function_10b6c(i32 %v3_f808, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_f80c, i32* %r0.global-to-local, align 4
  store i32 %v2_ed20, i32* %r1.global-to-local, align 4
  %v0_f814 = load i32, i32* @r5, align 4
  %v1_f814 = add i32 %v0_f814, 4
  %v2_f814 = inttoptr i32 %v1_f814 to i32*
  %v3_f814 = load i32, i32* %v2_f814, align 4
  store i32 %v3_f814, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f098

dec_label_pc_f824:                                ; preds = %dec_label_pc_ef48
  store i32 %.pre, i32* @r0, align 4
  %v1_f82c = add i32 %v0_f824, 92
  store i32 %v1_f82c, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_f834 = call i32 @function_109b0(i32 %.pre, i32 %v1_f82c, i32 192)
  store i32 %v3_f834, i32* %r0.global-to-local, align 4
  %v0_f838 = load i32, i32* @r5, align 4
  %v1_f838 = add i32 %v0_f838, 24
  %v2_f838 = inttoptr i32 %v1_f838 to i32*
  %v3_f838 = load i32, i32* %v2_f838, align 4
  store i32 %v3_f838, i32* %r3.global-to-local, align 4
  %v1_f83c = add i32 %v3_f838, -64
  store i32 %v1_f83c, i32* %ip.global-to-local, align 4
  store i32 %v1_f83c, i32* %v2_f838, align 4
  br label %dec_label_pc_ef58

dec_label_pc_f848:                                ; preds = %dec_label_pc_f50c
  %v0_f848 = load i32, i32* @r5, align 4
  store i32 %v0_f848, i32* @r0, align 4
  %v0_f84c = call i32 @function_d3bc()
  store i32 %v0_f84c, i32* %r0.global-to-local, align 4
  %v0_f850 = load i32, i32* @r5, align 4
  %v1_f850 = add i32 %v0_f850, 24
  %v2_f850 = inttoptr i32 %v1_f850 to i32*
  %v3_f850 = load i32, i32* %v2_f850, align 4
  store i32 %v3_f850, i32* %ip.global-to-local, align 4
  %v0_f854 = load i32, i32* @r4, align 4
  store i32 %v0_f854, i32* @r7, align 4
  br label %dec_label_pc_f554

dec_label_pc_f85c:                                ; preds = %thread-pre-split78
  %v0_f864 = load i32, i32* @r5, align 4
  %v1_f864 = add i32 %v0_f864, 12
  %v2_f864 = inttoptr i32 %v1_f864 to i32*
  %v3_f864 = load i32, i32* %v2_f864, align 4
  br label %dec_label_pc_ef40.backedge

dec_label_pc_f86c:                                ; preds = %dec_label_pc_eec4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f86c = load i32, i32* %stack_var_-56, align 4
  %v0_f870 = load i32, i32* @r6, align 4
  store i32 %v0_f870, i32* %r2.global-to-local, align 4
  %v1_f874 = add i32 %v3_f86c, -1
  store i32 %v1_f874, i32* %r3.global-to-local, align 4
  %v0_f878 = load i32, i32* @sl, align 4
  store i32 %v0_f878, i32* %r0.global-to-local, align 4
  %v0_f87c = load i32, i32* @r5, align 4
  %v1_f87c = add i32 %v0_f87c, 24
  %v2_f87c = inttoptr i32 %v1_f87c to i32*
  %v3_f87c = load i32, i32* %v2_f87c, align 4
  store i32 %v3_f87c, i32* %r1.global-to-local, align 4
  %v4_f880 = call i32 @function_1001c(i32 %v0_f878, i32 %v3_f87c, i32 %v0_f870, i32 %v1_f874)
  store i32 %v4_f880, i32* %r0.global-to-local, align 4
  %v2_f884 = icmp eq i32 %v4_f880, -1
  store i1 %v2_f884, i1* %cpsr_c.global-to-local, align 1
  %v7_f884 = icmp eq i32 %v4_f880, -1
  store i1 %v7_f884, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f884, label %dec_label_pc_f894, label %dec_label_pc_ef24

dec_label_pc_f894:                                ; preds = %dec_label_pc_f86c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_f898 = call i32 @function_fa7c(i32 12)
  store i32 13, i32* %r0.global-to-local, align 4
  %v1_f8a0 = call i32 @function_fa7c(i32 13)
  store i32 %v1_f8a0, i32* %r0.global-to-local, align 4
  %v0_f8a4 = load i32, i32* @r5, align 4
  %v1_f8a4 = add i32 %v0_f8a4, 12
  %v2_f8a4 = inttoptr i32 %v1_f8a4 to i32*
  %v3_f8a4 = load i32, i32* %v2_f8a4, align 4
  br label %dec_label_pc_ef40.backedge

dec_label_pc_ef40.backedge.thread:                ; preds = %dec_label_pc_f200, %dec_label_pc_f2b4, %dec_label_pc_f368, %dec_label_pc_f41c, %dec_label_pc_f578
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef48

dec_label_pc_ef40.backedge.thread455:             ; preds = %dec_label_pc_f22c, %dec_label_pc_f2e0, %dec_label_pc_f448, %dec_label_pc_f394, %dec_label_pc_f5a4, %dec_label_pc_f248, %dec_label_pc_f2fc, %dec_label_pc_f3b0, %dec_label_pc_f464, %dec_label_pc_f5c0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef48

dec_label_pc_ef40.backedge:                       ; preds = %dec_label_pc_f894, %dec_label_pc_f85c
  %storemerge458 = phi i32 [ %v3_f864, %dec_label_pc_f85c ], [ %v3_f8a4, %dec_label_pc_f894 ]
  %v0_ef40.be = phi i32 [ %v3_f864, %dec_label_pc_f85c ], [ %v3_f8a4, %dec_label_pc_f894 ]
  %v0_ef48142 = phi i32 [ %v0_f864, %dec_label_pc_f85c ], [ %v0_f8a4, %dec_label_pc_f894 ]
  store i32 %storemerge458, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef40 = icmp eq i32 %v0_ef40.be, 0
  store i1 %v2_ef40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef40, label %dec_label_pc_ed8c, label %dec_label_pc_ef48

dec_label_pc_f8ac:                                ; preds = %bb350
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f8b8 = call i32 @function_10bfc(i32 2, i32 1, i32 0)
  store i32 %v3_f8b8, i32* %r0.global-to-local, align 4
  %v2_f8bc = icmp eq i32 %v3_f8b8, -1
  store i1 %v2_f8bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f8bc = icmp eq i32 %v3_f8b8, -1
  store i1 %v7_f8bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f8b8, i32* @r4, align 4
  br i1 %v7_f8bc, label %dec_label_pc_fa48, label %dec_label_pc_f8c8

dec_label_pc_f8c8:                                ; preds = %dec_label_pc_f8ac
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f8cc = call i32 @function_fb34(i32 2)
  store i32 -1378207815, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1b234.63 to i32), i32* %r3.global-to-local, align 4
  %v0_f8d8 = load i32, i32* @r6, align 4
  store i32 %v0_f8d8, i32* %r1.global-to-local, align 4
  store i32 -1378207815, i32* @global_var_1b238.65, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_f8e4 = inttoptr i32 %v0_f8d8 to i32*
  %v3_f8e4 = call i32 @function_fa50(i32 2, i32* %v2_f8e4)
  %v4_f8e4 = inttoptr i32 %v3_f8e4 to i8*
  store i32 %v3_f8e4, i32* %r0.global-to-local, align 4
  %v2_f8e8 = add i32 %v3_f8e4, 1
  %v3_f8e8 = inttoptr i32 %v2_f8e8 to i8*
  %v4_f8e8 = load i8, i8* %v3_f8e8, align 1
  %v5_f8e8 = zext i8 %v4_f8e8 to i32
  store i32 %v5_f8e8, i32* %r2.global-to-local, align 4
  %v3_f8ec = load i8, i8* %v4_f8e4, align 1
  %v4_f8ec = zext i8 %v3_f8ec to i32
  %v4_f8f0 = mul nuw nsw i32 %v5_f8e8, 256
  %v5_f8f0 = or i32 %v4_f8ec, %v4_f8f0
  store i32 %v5_f8f0, i32* %r3.global-to-local, align 4
  %v1_f8f4 = and i32 %v4_f8ec, 128
  %v2_f8f4 = icmp ne i32 %v1_f8f4, 0
  store i1 %v2_f8f4, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_f8e8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f904 = call i32 @function_fa7c(i32 2)
  %v0_f908 = load i32, i32* @r4, align 4
  store i32 %v0_f908, i32* %r0.global-to-local, align 4
  store i32 %v2_f90c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_f914 = call i32 @function_10a58(i32 %v0_f908, %sockaddr* %v3_f914, i32 16)
  store i32 %v4_f914, i32* %r0.global-to-local, align 4
  %v3_f918 = icmp eq i32 %v4_f914, -1
  store i1 %v3_f918, i1* %cpsr_c.global-to-local, align 1
  %v8_f918 = icmp eq i32 %v4_f914, -1
  store i1 %v8_f918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f918, label %dec_label_pc_f920, label %dec_label_pc_f9a4

dec_label_pc_f920:                                ; preds = %dec_label_pc_f8c8
  %v0_f920 = load i32, i32* @r4, align 4
  store i32 %v0_f920, i32* %r0.global-to-local, align 4
  %v1_f924 = call i32 @function_10660(i32 %v0_f920)
  %v0_f928 = load i32, i32* @r6, align 4
  store i32 %v0_f928, i32* %r0.global-to-local, align 4
  %v1_f92c = call i32 @function_114d8(i32 %v0_f928)
  store i32 %v1_f92c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f930

dec_label_pc_f930:                                ; preds = %dec_label_pc_ece8, %dec_label_pc_eccc, %dec_label_pc_f920
  %v0_f930 = load i32, i32* @r7, align 4
  %v1_f930 = load i32, i32* @r4, align 4
  %v2_f930 = add i32 %v1_f930, 12
  %v3_f930 = inttoptr i32 %v2_f930 to i32*
  store i32 %v0_f930, i32* %v3_f930, align 4
  %v0_f934 = load i32, i32* @r7, align 4
  %v1_f934 = trunc i32 %v0_f934 to i8
  %v2_f934 = load i32, i32* @r4, align 4
  %v3_f934 = add i32 %v2_f934, 284
  %v4_f934 = inttoptr i32 %v3_f934 to i8*
  store i8 %v1_f934, i8* %v4_f934, align 1
  br label %bb315

dec_label_pc_f974:                                ; preds = %dec_label_pc_ee74, %dec_label_pc_ee2c
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_eeb0

dec_label_pc_f97c:                                ; preds = %dec_label_pc_edec
  %v0_f97c = load i32, i32* @r5, align 4
  %v1_f97c = add i32 %v0_f97c, 4
  %v2_f97c = inttoptr i32 %v1_f97c to i32*
  %v3_f97c = load i32, i32* %v2_f97c, align 4
  store i32 %v3_f97c, i32* %r0.global-to-local, align 4
  %v1_f980 = call i32 @function_10660(i32 %v3_f97c)
  store i32 %v1_f980, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_f988 = load i32, i32* @r6, align 4
  %v1_f988 = load i32, i32* @r5, align 4
  %v2_f988 = add i32 %v1_f988, 12
  %v3_f988 = inttoptr i32 %v2_f988 to i32*
  store i32 %v0_f988, i32* %v3_f988, align 4
  %v0_f98c = load i32, i32* %r4.global-to-local, align 4
  %v1_f98c = load i32, i32* @r5, align 4
  %v2_f98c = add i32 %v1_f98c, 4
  %v3_f98c = inttoptr i32 %v2_f98c to i32*
  store i32 %v0_f98c, i32* %v3_f98c, align 4
  %v0_f990 = load i32, i32* @r6, align 4
  %v1_f990 = trunc i32 %v0_f990 to i8
  %v2_f990 = load i32, i32* @r5, align 4
  %v3_f990 = add i32 %v2_f990, 284
  %v4_f990 = inttoptr i32 %v3_f990 to i8*
  store i8 %v1_f990, i8* %v4_f990, align 1
  br label %dec_label_pc_ed8c

dec_label_pc_f998:                                ; preds = %dec_label_pc_f7a0
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_f99c = load i32, i32* @sb, align 4
  %v2_f99c = inttoptr i32 %v1_f99c to i32*
  store i32 104, i32* %v2_f99c, align 4
  br label %dec_label_pc_f7b8

dec_label_pc_f9a4:                                ; preds = %dec_label_pc_f8c8
  store i32 %v2_eed8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f9b4 = load i32, i32* @r4, align 4
  store i32 %v0_f9b4, i32* %r0.global-to-local, align 4
  %v0_f9b8 = load i32, i32* @r6, align 4
  %v6_f9b8 = trunc i32 %v0_f9b8 to i8
  store i8 %v6_f9b8, i8* %stack_var_-52, align 1
  %v7_f9bc = call i32 @function_10b6c(i32 %v0_f9b4, i32* nonnull %v2_eee0, i32 1, i32 16384)
  store i32 %v2_eeec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f9d0 = load i32, i32* @r4, align 4
  store i32 %v0_f9d0, i32* %r0.global-to-local, align 4
  %v5_f9d4 = call i32 @function_10b6c(i32 %v0_f9d0, i32* nonnull %stack_var_-56, i32 4, i32 16384)
  %v2_f9dc = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_f9dc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f9e8 = load i32, i32* @r4, align 4
  store i32 %v0_f9e8, i32* %r0.global-to-local, align 4
  %v5_f9ec = call i32 @function_10b6c(i32 %v0_f9e8, i32* nonnull %stack_var_-38, i32 2, i32 16384)
  %v0_f9f0 = load i32, i32* %r8.global-to-local, align 4
  %v1_f9f0 = add i32 %v0_f9f0, 12
  store i32 %v1_f9f0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f9fc = load i32, i32* @r4, align 4
  store i32 %v0_f9fc, i32* %r0.global-to-local, align 4
  %v4_fa00 = inttoptr i32 %v1_f9f0 to i32*
  %v5_fa00 = call i32 @function_10b6c(i32 %v0_f9fc, i32* %v4_fa00, i32 1, i32 16384)
  store i32 %v5_fa00, i32* %r0.global-to-local, align 4
  %v0_fa04 = load i32, i32* %r8.global-to-local, align 4
  %v1_fa04 = inttoptr i32 %v0_fa04 to i32*
  %v2_fa04 = load i32, i32* %v1_fa04, align 4
  store i32 %v2_fa04, i32* %r1.global-to-local, align 4
  %v1_fa08 = add i32 %v0_fa04, 12
  %v2_fa08 = inttoptr i32 %v1_fa08 to i8*
  %v3_fa08 = load i8, i8* %v2_fa08, align 1
  %v4_fa08 = zext i8 %v3_fa08 to i32
  store i32 %v4_fa08, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fa10 = load i32, i32* @r4, align 4
  store i32 %v0_fa10, i32* %r0.global-to-local, align 4
  %v4_fa14 = inttoptr i32 %v2_fa04 to i32*
  %v5_fa14 = call i32 @function_10b6c(i32 %v0_fa10, i32* %v4_fa14, i32 %v4_fa08, i32 16384)
  %v0_fa18 = load i32, i32* %r8.global-to-local, align 4
  %v1_fa18 = add i32 %v0_fa18, 13
  store i32 %v1_fa18, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fa24 = load i32, i32* @r4, align 4
  store i32 %v0_fa24, i32* %r0.global-to-local, align 4
  %v4_fa28 = inttoptr i32 %v1_fa18 to i32*
  %v5_fa28 = call i32 @function_10b6c(i32 %v0_fa24, i32* %v4_fa28, i32 1, i32 16384)
  %v0_fa2c = load i32, i32* @r4, align 4
  store i32 %v0_fa2c, i32* %r0.global-to-local, align 4
  %v0_fa30 = load i32, i32* %r8.global-to-local, align 4
  %v1_fa30 = add i32 %v0_fa30, 13
  %v2_fa30 = inttoptr i32 %v1_fa30 to i8*
  %v3_fa30 = load i8, i8* %v2_fa30, align 1
  %v4_fa30 = zext i8 %v3_fa30 to i32
  store i32 %v4_fa30, i32* %r2.global-to-local, align 4
  %v1_fa34 = add i32 %v0_fa30, 4
  %v2_fa34 = inttoptr i32 %v1_fa34 to i32*
  %v3_fa34 = load i32, i32* %v2_fa34, align 4
  store i32 %v3_fa34, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fa3c = inttoptr i32 %v3_fa34 to i32*
  %v5_fa3c = call i32 @function_10b6c(i32 %v0_fa2c, i32* %v4_fa3c, i32 %v4_fa30, i32 16384)
  %v0_fa40 = load i32, i32* @r4, align 4
  store i32 %v0_fa40, i32* %r0.global-to-local, align 4
  %v1_fa44 = call i32 @function_10660(i32 %v0_fa40)
  store i32 %v1_fa44, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fa48

dec_label_pc_fa48:                                ; preds = %dec_label_pc_f8ac, %dec_label_pc_f9a4
  %v0_fa48 = load i32, i32* @r6, align 4
  store i32 %v0_fa48, i32* %r0.global-to-local, align 4
  %v1_fa4c = call i32 @function_114d8(i32 %v0_fa48)
  store i32 %v1_fa4c, i32* %r0.global-to-local, align 4
  ret i32 %v1_fa4c

; uselistorder directives
  uselistorder i32 %v4_f8ec, { 1, 0 }
  uselistorder i32 %v5_f8e8, { 1, 0, 2 }
  uselistorder i1 %v7_f8bc, { 1, 0 }
  uselistorder i32 %v3_f8b8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_f8a4, { 1, 0 }
  uselistorder i1 %v7_f884, { 1, 0 }
  uselistorder i32 %v3_f864, { 1, 0 }
  uselistorder i32 %v3_f814, { 1, 0 }
  uselistorder i1 %v1_f7e0, { 1, 0 }
  uselistorder i32 %v1_f7c8, { 2, 1, 0 }
  uselistorder i32 %v1_f7c4, { 1, 0 }
  uselistorder i1 %v2_f77c, { 1, 0 }
  uselistorder i32 %.357, { 1, 0 }
  uselistorder i1 %v7_f764, { 1, 0 }
  uselistorder i32 %v0_f760, { 2, 1, 0, 3 }
  uselistorder i32 %v4_f740, { 1, 0, 2 }
  uselistorder i32 %v4_f73c, { 1, 0, 2 }
  uselistorder i1 %v7_f72c, { 1, 0 }
  uselistorder i32 %v0_f72c, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v0_f6dc, { 0, 2, 1 }
  uselistorder i1 %v0_f6cc, { 1, 0 }
  uselistorder i32 %v4_f6c0, { 1, 0, 2 }
  uselistorder i32 %v0_f654, { 1, 2, 0 }
  uselistorder i1 %v7_f5c4, { 1, 0 }
  uselistorder i32 %v1_f5c0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f5b8, { 1, 0 }
  uselistorder i8 %v3_f5b0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f5c0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f59c, { 1, 0 }
  uselistorder i1 %v7_f594, { 1, 0 }
  uselistorder i1 %v7_f58c, { 1, 0 }
  uselistorder i32 %v0_f568, { 1, 2, 0 }
  uselistorder i32 %v2_f554, { 1, 0 }
  uselistorder i32 %v1_f554, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_f554, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_f524, { 2, 1, 0 }
  uselistorder i1 %v7_f500, { 1, 0 }
  uselistorder i32 %v4_f4fc, { 1, 0, 2 }
  uselistorder i1 %v7_f468, { 1, 0 }
  uselistorder i32 %v1_f464, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f45c, { 1, 0 }
  uselistorder i8 %v3_f454, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f464, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f440, { 1, 0 }
  uselistorder i1 %v7_f438, { 1, 0 }
  uselistorder i1 %v7_f430, { 1, 0 }
  uselistorder i1 %v7_f3b4, { 1, 0 }
  uselistorder i32 %v1_f3b0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f3a8, { 1, 0 }
  uselistorder i8 %v3_f3a0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f3b0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f38c, { 1, 0 }
  uselistorder i1 %v7_f384, { 1, 0 }
  uselistorder i1 %v7_f37c, { 1, 0 }
  uselistorder i1 %v7_f300, { 1, 0 }
  uselistorder i32 %v1_f2fc, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f2f4, { 1, 0 }
  uselistorder i8 %v3_f2ec, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f2fc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f2d8, { 1, 0 }
  uselistorder i1 %v7_f2d0, { 1, 0 }
  uselistorder i1 %v7_f2c8, { 1, 0 }
  uselistorder i1 %v7_f24c, { 1, 0 }
  uselistorder i32 %v1_f248, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_f240, { 1, 0 }
  uselistorder i8 %v3_f238, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f248, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f224, { 1, 0 }
  uselistorder i1 %v7_f21c, { 1, 0 }
  uselistorder i1 %v7_f214, { 1, 0 }
  uselistorder i32 %v0_f1bc, { 2, 1, 0 }
  uselistorder i1 %v7_f1b4, { 1, 0 }
  uselistorder i1 %v8_f1a8, { 1, 0 }
  uselistorder i8 %v3_f1a0, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_f1b0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f18c, { 1, 0 }
  uselistorder i1 %v7_f184, { 1, 0 }
  uselistorder i32 %v0_f12c, { 2, 1, 0 }
  uselistorder i1 %v7_f124, { 1, 0 }
  uselistorder i1 %v8_f118, { 1, 0 }
  uselistorder i8 %v3_f110, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f120, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_f0fc, { 1, 0 }
  uselistorder i1 %v7_f0f4, { 1, 0 }
  uselistorder i1 %v7_f0ec, { 1, 0 }
  uselistorder i32 %v0_f0c8.pre, { 0, 2, 1 }
  uselistorder i32 %v1_f0b0, { 1, 0 }
  uselistorder i32 %v1_f0ac, { 1, 0 }
  uselistorder i32 %v1_f0a4, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f0a0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f0a0, { 0, 2, 1 }
  uselistorder i32 %v0_f068.pr, { 1, 0 }
  uselistorder i1 %v7_f040, { 1, 0 }
  uselistorder i1 %v2_f02c, { 1, 0, 2 }
  uselistorder i1 %v2_f014, { 1, 0, 2 }
  uselistorder i32 %v1_f034, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_f008, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_f030, { 1, 0 }
  uselistorder i32 %v2_f038, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_eff4, { 0, 2, 1, 3 }
  uselistorder i32 %v0_efbc, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_ef98, { 1, 2, 3, 0 }
  uselistorder i32 %v3_ef94, { 1, 0 }
  uselistorder i32 %v5_ef78, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_ef64, { 1, 0, 2 }
  uselistorder i32 %v3_ef60, { 1, 0, 2 }
  uselistorder i32 %v0_f824, { 1, 0, 2 }
  uselistorder i32 %v0_ef34, { 1, 0, 2 }
  uselistorder i1 %v7_ef14, { 1, 0 }
  uselistorder i32 %v0_ee7c, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_ee5c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_ee50, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_eddc, { 2, 1, 0 }
  uselistorder i32 %v3_edd8, { 1, 0 }
  uselistorder i1 %v7_edbc, { 1, 0 }
  uselistorder i32 %v3_edb8, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_edac, { 1, 0 }
  uselistorder i32 %v1_ed90, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_ed7c, { 2, 1, 0 }
  uselistorder i32 %v3_ed78, { 1, 0 }
  uselistorder i32 %v0_ed7c, { 1, 0 }
  uselistorder i32 %v2_ed14, { 1, 0 }
  uselistorder i32 %v1_ed14, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_ed14, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_ecf0, { 2, 1, 0 }
  uselistorder i32 %v1_ecec, { 1, 0 }
  uselistorder i32 %v2_ecbc, { 1, 0 }
  uselistorder i32 %v0_ecbc, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_ecb4, { 1, 0 }
  uselistorder i1 %v7_ec7c, { 0, 3, 1, 2 }
  uselistorder i1 %v2_ec7c, { 1, 2, 0 }
  uselistorder i32 %v2_ec74, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_ec6c, { 1, 0 }
  uselistorder i32 %v1_ec50, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v2_ec44, { 1, 0 }
  uselistorder i32 %v1_ec44, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_ec44, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_ec34, { 1, 0 }
  uselistorder i32 %v3_ec98, { 5, 7, 4, 8, 6, 1, 0, 10, 3, 2, 9 }
  uselistorder i32 %storemerge232, { 1, 0, 2 }
  uselistorder i32 %v2_eeec, { 0, 2, 3, 4, 1 }
  uselistorder i32* %v2_eee0, { 2, 1, 6, 3, 0, 4, 5, 7 }
  uselistorder i32 %v2_eed8, { 4, 3, 8, 5, 2, 6, 7, 9, 1, 0 }
  uselistorder i32 %v2_f648, { 1, 2, 0 }
  uselistorder i32 %v2_eca8, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v3_eb88, { 1, 0 }
  uselistorder i32 %v1_eb74, { 1, 0 }
  uselistorder i32 %v1_eb5c, { 1, 2, 0 }
  uselistorder i32 %v0_eb68, { 0, 3, 2, 1 }
  uselistorder i32 %v0_eb2c, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_eb20, { 2, 1, 0 }
  uselistorder i32 %v1_eafc, { 3, 1, 0, 4, 2 }
  uselistorder i32 %v3_eadc, { 1, 2, 0, 3 }
  uselistorder i1 %v2_ead4, { 1, 0 }
  uselistorder i32 %v0_ea38, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_ea70, { 1, 2, 4, 8, 0, 3, 6, 5, 7 }
  uselistorder i32 %v1_e9e0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_e904, { 1, 0 }
  uselistorder i32 %v1_e900, { 2, 0, 1 }
  uselistorder i32 %v4_e8dc, { 1, 0 }
  uselistorder i32 %v5_e8c4, { 0, 2, 1 }
  uselistorder i1 %v2_e84c, { 1, 0 }
  uselistorder i1 %v3_e830, { 1, 0, 2 }
  uselistorder i1 %v2_e81c, { 1, 0 }
  uselistorder i1 %v2_e7f8, { 1, 0 }
  uselistorder i32 %v1_e7a8, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e794, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e790, { 4, 5, 6, 0, 7, 1, 2, 3, 8 }
  uselistorder i32 %v4_e780, { 1, 0 }
  uselistorder i32 %v0_e770, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e74c, { 1, 0 }
  uselistorder i8* %stack_var_-1876.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_ea64, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i32 %v4_daf8, { 1, 0 }
  uselistorder i32 %v0_daec, { 2, 0, 1, 3 }
  uselistorder i32 %v4_da98, { 1, 0 }
  uselistorder i32 %v0_da90, { 0, 1, 3, 2 }
  uselistorder i32 %v0_da38, { 3, 2, 0, 1 }
  uselistorder i1 %v7_d9d8, { 1, 0 }
  uselistorder i32 %v3_d9d0, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_d9b8, { 0, 2, 1 }
  uselistorder i32 %v0_d9a0, { 2, 1, 0 }
  uselistorder i32 %v0_d97c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge240, { 1, 0 }
  uselistorder i32 %v0_d650, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-56, { 1, 5, 6, 7, 4, 8, 3, 2, 9, 0, 10, 11 }
  uselistorder i8* %stack_var_-52, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 9 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 2, 1, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 4, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 62, 11, 12, 57, 63, 43, 64, 65, 107, 13, 14, 15, 35, 44, 45, 46, 47, 0, 1, 2, 3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 58, 59, 60, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 66, 67, 68, 69, 70, 71, 61, 72, 73, 75, 74, 76, 77, 78, 79, 80, 82, 84, 83, 81, 85, 86, 87, 88, 94, 89, 90, 91, 92, 95, 116, 117, 96, 118, 119, 97, 98, 99, 100, 101, 102, 103, 104, 105, 120, 121, 122, 123, 124, 125, 126, 127, 106, 128, 129, 130, 131, 132, 133, 135, 134, 137, 136, 93, 138, 139, 140, 141, 108, 109, 110, 111, 112, 113, 114, 115 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 43, 37, 14, 15, 17, 18, 19, 33, 38, 39, 0, 1, 2, 20, 21, 23, 22, 24, 26, 25, 27, 29, 28, 30, 32, 31, 34, 36, 35, 44, 46, 45, 40, 41, 42, 48, 49, 50, 51, 52, 53, 54, 47, 55, 56, 57, 58, 59, 61, 63, 62, 223, 60, 64, 65, 66, 67, 72, 68, 69, 70, 71, 75, 74, 76, 73, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 284, 285, 286, 287, 288, 289, 85, 86, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 283, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 44, 11, 12, 13, 14, 38, 36, 37, 15, 16, 17, 32, 33, 1, 2, 3, 58, 59, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 39, 40, 0, 45, 46, 47, 48, 41, 42, 43, 49, 50, 51, 53, 54, 52, 55, 56, 60, 57, 263, 61, 62, 63, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 264, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262 }
  uselistorder i32* %r0.global-to-local, { 11, 10, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 132, 131, 23, 22, 24, 26, 25, 27, 29, 28, 30, 32, 31, 112, 113, 114, 116, 115, 33, 133, 105, 108, 107, 135, 137, 138, 134, 139, 136, 35, 34, 36, 38, 37, 39, 41, 40, 42, 93, 92, 95, 94, 96, 97, 109, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 117, 44, 45, 47, 46, 48, 43, 49, 50, 51, 52, 54, 53, 56, 55, 58, 57, 59, 60, 61, 62, 64, 63, 66, 65, 68, 67, 69, 70, 71, 72, 74, 73, 76, 75, 78, 77, 79, 80, 81, 82, 84, 83, 86, 85, 88, 87, 89, 90, 91, 99, 98, 106, 100, 101, 102, 119, 118, 121, 120, 103, 104, 111, 110, 142, 140, 123, 122, 124, 126, 125, 127, 128, 129, 149, 141, 144, 143, 145, 146, 148, 147, 150, 156, 151, 152, 155, 153, 154, 157, 159, 160, 158, 163, 161, 366, 384, 367, 368, 370, 369, 204, 371, 372, 373, 130, 374, 375, 376, 378, 377, 379, 380, 381, 382, 383, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 353, 356, 355, 357, 361, 360, 358, 359, 362, 363, 364, 365 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 10, 5, 6, 11, 12, 13, 14, 7, 8, 9 }
  uselistorder i32* %ip.global-to-local, { 2, 23, 3, 16, 0, 1, 21, 4, 5, 7, 6, 9, 8, 11, 10, 12, 13, 14, 20, 15, 22, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 45, 36, 37, 46, 47, 48, 49, 50, 51, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 10, 111, 202, 157, 93, 94, 99, 102, 101, 103, 104, 105, 11, 144, 13, 14, 15, 55, 56, 57, 74, 75, 76, 77, 78, 0, 1, 6, 7, 2, 3, 4, 5, 8, 95, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 97, 66, 71, 72, 67, 68, 69, 70, 73, 96, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 106, 107, 108, 109, 110, 146, 98, 12, 100, 112, 114, 113, 115, 116, 118, 120, 119, 147, 117, 121, 122, 123, 124, 125, 126, 131, 127, 128, 129, 130, 150, 151, 148, 149, 132, 133, 134, 135, 136, 137, 138, 139, 140, 158, 159, 160, 161, 162, 163, 164, 166, 167, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 143, 184, 185, 186, 187, 188, 142, 189, 190, 191, 141, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 153, 154, 155, 152, 156 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 108, 200, 153, 90, 91, 96, 98, 99, 100, 101, 102, 12, 137, 13, 14, 15, 16, 55, 56, 57, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 92, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 94, 66, 71, 72, 67, 68, 69, 70, 73, 93, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 139, 103, 104, 105, 106, 107, 140, 95, 138, 97, 109, 111, 110, 112, 113, 115, 117, 116, 141, 114, 118, 119, 120, 121, 122, 127, 123, 124, 125, 126, 144, 146, 142, 128, 143, 129, 130, 131, 132, 133, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 136, 180, 181, 182, 183, 184, 135, 185, 186, 187, 134, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 145, 148, 149, 150, 151, 147, 152 }
  uselistorder i8** @global_var_1b234.63, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1b234.63 to i32), { 1, 0 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6 }
  uselistorder i8 30, { 6, 0, 1, 2, 3, 7, 4, 5 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_129cc.500 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_129cc.500, { 1, 0 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_10b6c, { 2, 3, 4, 5, 6, 7, 8, 19, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 20, 23, 24, 25, 26, 27, 28 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 (i32)* @function_fa7c, { 17, 9, 8, 16, 10, 18, 15, 14, 13, 12, 11, 7, 6, 0, 5, 4, 3, 19, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_1001c, { 1, 4, 2, 3, 0 }
  uselistorder i32 (i32, i32*)* @function_fa50, { 1, 2, 8, 0, 3, 4, 5, 6, 7, 9, 10, 18, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 (i32)* @function_fb34, { 17, 16, 10, 18, 15, 14, 13, 12, 11, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* bitcast (i8** @global_var_1b1e4.118 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1b1e5.119, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1b1e4.118 to i32), { 1, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10854, { 1, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32* @sp, { 2, 1, 3, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder i32 ()* @function_d3bc, { 3, 2, 1, 0 }
  uselistorder i32 254, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_10b38, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_10b98, { 6, 5, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 16384, { 30, 46, 31, 47, 32, 48, 33, 49, 34, 50, 35, 51, 13, 52, 12, 63, 0, 44, 1, 45, 2, 53, 3, 54, 4, 55, 5, 56, 6, 57, 7, 58, 8, 59, 9, 60, 28, 61, 29, 62, 26, 65, 27, 66, 25, 64, 36, 67, 10, 68, 11, 69, 38, 70, 15, 71, 39, 72, 40, 73, 41, 74, 14, 75, 37, 76, 16, 77, 17, 78, 18, 79, 42, 43, 19, 80, 20, 81, 22, 82, 21, 83, 23, 84, 24, 85 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c70c, { 2, 3, 8, 7, 6, 5, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_c6b0, { 4, 5, 10, 9, 8, 7, 6, 1, 0, 3, 2 }
  uselistorder i8* @global_var_1b1c8.483, { 2, 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 33, { 2, 0, 1 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 18, { 6, 2, 3, 4, 7, 5, 8, 0, 9, 1, 10 }
  uselistorder i32 30, { 0, 2, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32* @fp, { 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 27, 28 }
  uselistorder i32 ptrtoint (i32* @global_var_129b8.479 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_12890.429 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_12858.417 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_1281c.401 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_127fc.393 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_127f4.391 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_127bc.375 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_127ac.371 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_127a4.369 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_12788.361 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_12700.333 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_126f8.331 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_126f0.327 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_126cc.319 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_126bc.315 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_12690.305 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_12680.301 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_12678.299 to i32), { 1, 4, 2, 0, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_12644.285 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_12620.275 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_125c0.253 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_1242c.243 to i32), { 0, 5, 1, 2, 3, 6, 4, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_12544.225 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_124f0.207 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_124d0.201 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint ([11 x i8]* @global_var_124c4.199 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_124bc.197 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_124b4.195 to i32), { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_124a8.191 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([14 x i8]* @global_var_12498.189 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_12488.185 to i32), { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_125c4.181 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_12468.177 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_12460.175 to i32), { 1, 7, 2, 8, 0, 9, 3, 4, 5, 10, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_12458.173 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_1244c.171 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_12850.169 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_12444.167 to i32), { 0, 7, 1, 8, 2, 9, 3, 10, 4, 5, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_1243c.165 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_12434.163 to i32), { 0, 6, 3, 7, 1, 8, 2, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_12420.159 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_12410.155 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_12918.149 to i32), { 7, 46, 8, 47, 9, 48, 10, 49, 0, 50, 11, 51, 12, 52, 13, 53, 1, 54, 2, 55, 3, 56, 14, 57, 4, 58, 15, 59, 5, 60, 16, 61, 17, 62, 18, 63, 6, 64, 19, 65, 20, 66, 21, 67, 22, 68, 23, 69, 24, 70, 25, 71, 26, 72, 27, 73, 28, 74, 29, 75, 30, 76, 31, 77, 32, 78, 33, 79, 34, 80, 35, 81, 36, 82, 37, 83, 38, 84, 39, 85, 40, 86, 41, 42, 43, 87, 44, 88, 45, 89 }
  uselistorder i32 (i32, i32, i32)* @function_d490, { 5, 4, 3, 2, 1, 0, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_128d0.147 to i32), { 3, 16, 4, 17, 5, 18, 0, 19, 1, 20, 6, 21, 2, 22, 7, 23, 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_12774.145 to i32), { 6, 56, 7, 57, 8, 58, 9, 59, 0, 60, 10, 61, 1, 62, 11, 63, 2, 64, 12, 65, 13, 66, 14, 67, 3, 68, 15, 69, 16, 70, 17, 71, 18, 72, 19, 73, 20, 74, 4, 75, 21, 76, 22, 77, 23, 78, 24, 79, 25, 80, 26, 81, 27, 82, 28, 83, 29, 84, 30, 85, 31, 86, 32, 87, 33, 88, 34, 89, 35, 90, 36, 91, 37, 92, 38, 93, 39, 94, 40, 95, 41, 96, 42, 97, 43, 98, 44, 45, 46, 99, 47, 100, 48, 101, 49, 102, 50, 103, 51, 104, 5, 105, 52, 106, 53, 107, 54, 108, 55, 109 }
  uselistorder i8* @global_var_1b1d9.141, { 1, 0 }
  uselistorder i8 16, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 ptrtoint (i32* @global_var_1b1cc.132 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder i8* @global_var_1b1d8.133, { 1, 0 }
  uselistorder i8** @global_var_1b1b8.128, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1b1b8.128 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_d228, { 64, 18, 17, 63, 62, 61, 60, 59, 58, 22, 21, 20, 19, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 16, 15, 14, 13, 12, 11, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 2048, { 4, 3, 0, 1, 5, 6, 2, 7, 8 }
  uselistorder i32* @global_var_1b248.126, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1b244.124, { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32, i32)* @function_10ee8, { 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 1, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1b1e8.112, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_10904, { 0, 1, 2, 18, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 19, 21, 22 }
  uselistorder i32 (i32)* @function_d280, { 1, 0 }
  uselistorder i32* @global_var_1b230.48, { 3, 4, 0, 1, 2, 5, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_101b0, { 2, 1, 0 }
  uselistorder i32* @global_var_1b24c.110, { 0, 2, 1 }
  uselistorder i32 ()* @function_1068c, { 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 7, 1, 3, 4, 8, 2, 5, 6, 11, 10, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 0, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 58, 59 }
  uselistorder i32* @sb, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 33, 34, 36, 37, 40, 43, 41, 42, 44, 45, 38, 39 }
  uselistorder label %dec_label_pc_fa48, { 1, 0 }
  uselistorder label %dec_label_pc_f930, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ef40.backedge.thread455, { 9, 4, 8, 2, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_ef40.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %.thread228, { 1, 0 }
  uselistorder label %bb352, { 1, 0 }
  uselistorder label %dec_label_pc_f7b8, { 1, 0 }
  uselistorder label %dec_label_pc_f784, { 1, 0 }
  uselistorder label %thread-pre-split78, { 1, 0 }
  uselistorder label %dec_label_pc_f694, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f5c0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f5ac, { 1, 0 }
  uselistorder label %dec_label_pc_f554, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_f464, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f450, { 1, 0 }
  uselistorder label %dec_label_pc_f3b0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f39c, { 1, 0 }
  uselistorder label %dec_label_pc_f2fc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f2e8, { 1, 0 }
  uselistorder label %dec_label_pc_f248, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f234, { 1, 0 }
  uselistorder label %dec_label_pc_f1b0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f19c, { 1, 0 }
  uselistorder label %dec_label_pc_f12c, { 1, 0 }
  uselistorder label %dec_label_pc_f120, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_f10c, { 1, 0 }
  uselistorder label %dec_label_pc_f0c8, { 2, 1, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_f0b8, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb326, { 2, 1, 0 }
  uselistorder label %bb324, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f068, { 1, 0 }
  uselistorder label %dec_label_pc_f010, { 1, 0 }
  uselistorder label %dec_label_pc_f010.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_efa4, { 1, 0 }
  uselistorder label %bb322, { 1, 0 }
  uselistorder label %dec_label_pc_ef58, { 1, 0 }
  uselistorder label %dec_label_pc_ef48, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ef48.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ef3c.loopexit, { 1, 4, 0, 2, 3 }
  uselistorder label %dec_label_pc_eec4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_eeb0, { 1, 0 }
  uselistorder label %dec_label_pc_ed8c, { 7, 1, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_ed64, { 1, 0 }
  uselistorder label %bb317, { 1, 0 }
  uselistorder label %bb315, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_ebd0.dec_label_pc_ebd0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ebb8.dec_label_pc_ebb8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ebb0, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_eba8, { 1, 0 }
  uselistorder label %dec_label_pc_eb5c, { 1, 0 }
  uselistorder label %dec_label_pc_ea00, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_e9f4, { 1, 0 }
  uselistorder label %.thread50, { 2, 1, 0 }
  uselistorder label %.thread48, { 1, 0 }
  uselistorder label %dec_label_pc_e85c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e838, { 1, 0 }
  uselistorder label %dec_label_pc_e82c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e808, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e7e4, { 1, 0 }
  uselistorder label %bb287, { 1, 0 }
  uselistorder label %dec_label_pc_e790, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_da38, { 1, 0 }
}

define i32 @function_fa50(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_fa50:
  store i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32* @ip, align 4
  %v3_fa54 = mul i32 %arg1, 8
  %v2_fa58 = add i32 %v3_fa54, ptrtoint (i32* @global_var_1b254.508 to i32)
  %v2_fa5c = icmp eq i32* %arg2, null
  br i1 %v2_fa5c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_fa50
  %v3_fa6811 = inttoptr i32 %v2_fa58 to i32*
  %v4_fa6812 = load i32, i32* %v3_fa6811, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_fa50
  %v2_fa60 = add i32 %v3_fa54, add (i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32 5)
  %v3_fa60 = inttoptr i32 %v2_fa60 to i8*
  %v4_fa60 = load i8, i8* %v3_fa60, align 1
  %v5_fa60 = zext i8 %v4_fa60 to i32
  store i32 %v5_fa60, i32* @r2, align 4
  %v2_fa64 = add i32 %v3_fa54, add (i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32 4)
  %v3_fa64 = inttoptr i32 %v2_fa64 to i8*
  %v4_fa64 = load i8, i8* %v3_fa64, align 4
  %v5_fa64 = zext i8 %v4_fa64 to i32
  %v3_fa68 = inttoptr i32 %v2_fa58 to i32*
  %v4_fa68 = load i32, i32* %v3_fa68, align 4
  %v5_fa6c = mul nuw nsw i32 %v5_fa60, 256
  %v6_fa6c = or i32 %v5_fa64, %v5_fa6c
  store i32 %v6_fa6c, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_fa68714 = phi i32 [ %v4_fa6812, %.thread ], [ %v4_fa68, %bb ]
  ret i32 %v4_fa68714

; uselistorder directives
  uselistorder i32 %v2_fa58, { 1, 0 }
  uselistorder i32 %v3_fa54, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_fa7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_fa7c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_fa7c = mul i32 %arg1, 8
  %v3_fa80 = load i32, i32* @r4, align 4
  store i32 %v3_fa80, i32* %stack_var_-20, align 4
  %v3_fa90 = and i32 %v3_fa7c, 2040
  %v2_fa94 = add i32 %v3_fa90, ptrtoint (i32* @global_var_1b254.508 to i32)
  store i32 %v2_fa94, i32* @lr, align 4
  %v1_fa9c = add i32 %v3_fa90, add (i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32 4)
  store i32 %v1_fa9c, i32* %r7.global-to-local, align 4
  %v2_faa0 = load i32, i32* @global_var_1b030.511, align 4
  store i32 %v2_faa0, i32* @r2, align 4
  %v2_faa4 = inttoptr i32 %v1_fa9c to i8*
  %v3_faa4 = load i8, i8* %v2_faa4, align 4
  %v4_faa4 = zext i8 %v3_faa4 to i32
  store i32 %v4_faa4, i32* @r1, align 4
  %v1_faa8 = add i32 %v3_fa90, add (i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32 5)
  %v2_faa8 = inttoptr i32 %v1_faa8 to i8*
  %v3_faa8 = load i8, i8* %v2_faa8, align 1
  %v4_faa8 = zext i8 %v3_faa8 to i32
  %v3_faac = udiv i32 %v2_faa0, 256
  %v4_fab0 = mul nuw nsw i32 %v4_faa8, 256
  %v5_fab0 = or i32 %v4_fab0, %v4_faa4
  %v7_fab0 = icmp eq i32 %v5_fab0, 0
  store i1 %v7_fab0, i1* @cpsr_z, align 1
  %v3_fab4 = udiv i32 %v2_faa0, 65536
  %v1_fab8 = urem i32 %v3_faac, 256
  store i32 %v1_fab8, i32* %r6.global-to-local, align 4
  %v1_fabc = urem i32 %v3_fab4, 256
  store i32 %v1_fabc, i32* %r5.global-to-local, align 4
  %v3_fac0 = udiv i32 %v2_faa0, 16777216
  store i32 %v3_fac0, i32* %r4.global-to-local, align 4
  %v1_fac4 = urem i32 %v2_faa0, 256
  br i1 %v7_fab0, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_fa7c
  store i32 %v3_fa80, i32* @r4, align 4
  ret i32 %v1_fac4

bb8:                                              ; preds = %dec_label_pc_fa7c
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_fad0

dec_label_pc_fad0:                                ; preds = %dec_label_pc_fad0, %bb8
  %v2_fadc = phi i32 [ %v1_fb18, %dec_label_pc_fad0 ], [ 0, %bb8 ]
  %v0_fad0 = phi i32 [ %v0_fb10, %dec_label_pc_fad0 ], [ %v2_fa94, %bb8 ]
  %v1_fad0 = inttoptr i32 %v0_fad0 to i32*
  %v2_fad0 = load i32, i32* %v1_fad0, align 4
  %v2_fad4 = add i32 %v2_fad0, %v2_fadc
  %v3_fad4 = inttoptr i32 %v2_fad4 to i8*
  %v4_fad4 = load i8, i8* %v3_fad4, align 1
  %v6_fad4 = zext i8 %v4_fad4 to i32
  %v2_fad8 = xor i32 %v6_fad4, %v1_fac4
  %v1_fadc = trunc i32 %v2_fad8 to i8
  store i8 %v1_fadc, i8* %v3_fad4, align 1
  %v0_fae0 = load i32, i32* @lr, align 4
  %v1_fae0 = inttoptr i32 %v0_fae0 to i32*
  %v2_fae0 = load i32, i32* %v1_fae0, align 4
  %v0_fae4 = load i32, i32* @ip, align 4
  %v2_fae4 = add i32 %v0_fae4, %v2_fae0
  %v3_fae4 = inttoptr i32 %v2_fae4 to i8*
  %v4_fae4 = load i8, i8* %v3_fae4, align 1
  %v6_fae4 = zext i8 %v4_fae4 to i32
  %v0_fae8 = load i32, i32* %r6.global-to-local, align 4
  %v2_fae8 = xor i32 %v0_fae8, %v6_fae4
  %v1_faec = trunc i32 %v2_fae8 to i8
  store i8 %v1_faec, i8* %v3_fae4, align 1
  %v0_faf0 = load i32, i32* @lr, align 4
  %v1_faf0 = inttoptr i32 %v0_faf0 to i32*
  %v2_faf0 = load i32, i32* %v1_faf0, align 4
  %v0_faf4 = load i32, i32* @ip, align 4
  %v2_faf4 = add i32 %v0_faf4, %v2_faf0
  %v3_faf4 = inttoptr i32 %v2_faf4 to i8*
  %v4_faf4 = load i8, i8* %v3_faf4, align 1
  %v6_faf4 = zext i8 %v4_faf4 to i32
  %v0_faf8 = load i32, i32* %r5.global-to-local, align 4
  %v2_faf8 = xor i32 %v0_faf8, %v6_faf4
  %v1_fafc = trunc i32 %v2_faf8 to i8
  store i8 %v1_fafc, i8* %v3_faf4, align 1
  %v0_fb00 = load i32, i32* @lr, align 4
  %v1_fb00 = inttoptr i32 %v0_fb00 to i32*
  %v2_fb00 = load i32, i32* %v1_fb00, align 4
  store i32 %v2_fb00, i32* @r1, align 4
  %v0_fb04 = load i32, i32* @ip, align 4
  %v2_fb04 = add i32 %v0_fb04, %v2_fb00
  %v3_fb04 = inttoptr i32 %v2_fb04 to i8*
  %v4_fb04 = load i8, i8* %v3_fb04, align 1
  %v6_fb04 = zext i8 %v4_fb04 to i32
  %v0_fb08 = load i32, i32* %r4.global-to-local, align 4
  %v2_fb08 = xor i32 %v0_fb08, %v6_fb04
  %v1_fb0c = trunc i32 %v2_fb08 to i8
  store i8 %v1_fb0c, i8* %v3_fb04, align 1
  %v0_fb10 = load i32, i32* @lr, align 4
  %v1_fb10 = add i32 %v0_fb10, 4
  %v2_fb10 = inttoptr i32 %v1_fb10 to i8*
  %v3_fb10 = load i8, i8* %v2_fb10, align 1
  %v4_fb10 = zext i8 %v3_fb10 to i32
  %v0_fb14 = load i32, i32* %r7.global-to-local, align 4
  %v1_fb14 = add i32 %v0_fb14, 1
  %v2_fb14 = inttoptr i32 %v1_fb14 to i8*
  %v3_fb14 = load i8, i8* %v2_fb14, align 1
  %v4_fb14 = zext i8 %v3_fb14 to i32
  %v0_fb18 = load i32, i32* @ip, align 4
  %v1_fb18 = add i32 %v0_fb18, 1
  store i32 %v1_fb18, i32* @ip, align 4
  %v4_fb1c = mul nuw nsw i32 %v4_fb14, 256
  %v5_fb1c = or i32 %v4_fb1c, %v4_fb10
  store i32 %v5_fb1c, i32* @r2, align 4
  %v9_fb20 = icmp eq i32 %v5_fb1c, %v1_fb18
  store i1 %v9_fb20, i1* @cpsr_z, align 1
  %v8_fb24 = icmp sgt i32 %v5_fb1c, %v1_fb18
  br i1 %v8_fb24, label %dec_label_pc_fad0, label %dec_label_pc_fb28

dec_label_pc_fb28:                                ; preds = %dec_label_pc_fad0
  %v2_fb28 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_fb28, i32* @r4, align 4
  ret i32 %v1_fac4

; uselistorder directives
  uselistorder i32 %v1_fb18, { 1, 2, 3, 0 }
  uselistorder i32 %v0_fb10, { 1, 0 }
  uselistorder i32 %v1_fac4, { 0, 2, 1 }
  uselistorder i32 %v2_faa0, { 3, 0, 1, 2, 4 }
}

define i32 @function_fb34(i32 %arg1) local_unnamed_addr {
dec_label_pc_fb34:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_fb34 = mul i32 %arg1, 8
  %v3_fb38 = load i32, i32* @r4, align 4
  store i32 %v3_fb38, i32* %stack_var_-20, align 4
  %v3_fb48 = and i32 %v3_fb34, 2040
  %v2_fb4c = add i32 %v3_fb48, ptrtoint (i32* @global_var_1b254.508 to i32)
  store i32 %v2_fb4c, i32* @lr, align 4
  %v1_fb54 = add i32 %v3_fb48, add (i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32 4)
  store i32 %v1_fb54, i32* %r7.global-to-local, align 4
  %v2_fb58 = load i32, i32* @global_var_1b030.511, align 4
  store i32 %v2_fb58, i32* @r2, align 4
  %v2_fb5c = inttoptr i32 %v1_fb54 to i8*
  %v3_fb5c = load i8, i8* %v2_fb5c, align 4
  %v4_fb5c = zext i8 %v3_fb5c to i32
  %v1_fb60 = add i32 %v3_fb48, add (i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32 5)
  %v2_fb60 = inttoptr i32 %v1_fb60 to i8*
  %v3_fb60 = load i8, i8* %v2_fb60, align 1
  %v4_fb60 = zext i8 %v3_fb60 to i32
  %v3_fb64 = udiv i32 %v2_fb58, 256
  %v4_fb68 = mul nuw nsw i32 %v4_fb60, 256
  %v5_fb68 = or i32 %v4_fb68, %v4_fb5c
  %v7_fb68 = icmp eq i32 %v5_fb68, 0
  %v3_fb6c = udiv i32 %v2_fb58, 65536
  %v1_fb70 = urem i32 %v3_fb64, 256
  store i32 %v1_fb70, i32* %r6.global-to-local, align 4
  %v1_fb74 = urem i32 %v3_fb6c, 256
  store i32 %v1_fb74, i32* %r5.global-to-local, align 4
  %v3_fb78 = udiv i32 %v2_fb58, 16777216
  store i32 %v3_fb78, i32* %r4.global-to-local, align 4
  %v1_fb7c = urem i32 %v2_fb58, 256
  br i1 %v7_fb68, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_fb34
  store i32 %v3_fb38, i32* @r4, align 4
  ret i32 %v1_fb7c

bb8:                                              ; preds = %dec_label_pc_fb34
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fb88

dec_label_pc_fb88:                                ; preds = %dec_label_pc_fb88, %bb8
  %v2_fb94 = phi i32 [ %v1_fbd0, %dec_label_pc_fb88 ], [ 0, %bb8 ]
  %v0_fb88 = phi i32 [ %v0_fbc8, %dec_label_pc_fb88 ], [ %v2_fb4c, %bb8 ]
  %v1_fb88 = inttoptr i32 %v0_fb88 to i32*
  %v2_fb88 = load i32, i32* %v1_fb88, align 4
  %v2_fb8c = add i32 %v2_fb88, %v2_fb94
  %v3_fb8c = inttoptr i32 %v2_fb8c to i8*
  %v4_fb8c = load i8, i8* %v3_fb8c, align 1
  %v6_fb8c = zext i8 %v4_fb8c to i32
  %v2_fb90 = xor i32 %v6_fb8c, %v1_fb7c
  %v1_fb94 = trunc i32 %v2_fb90 to i8
  store i8 %v1_fb94, i8* %v3_fb8c, align 1
  %v0_fb98 = load i32, i32* @lr, align 4
  %v1_fb98 = inttoptr i32 %v0_fb98 to i32*
  %v2_fb98 = load i32, i32* %v1_fb98, align 4
  %v0_fb9c = load i32, i32* %ip.global-to-local, align 4
  %v2_fb9c = add i32 %v0_fb9c, %v2_fb98
  %v3_fb9c = inttoptr i32 %v2_fb9c to i8*
  %v4_fb9c = load i8, i8* %v3_fb9c, align 1
  %v6_fb9c = zext i8 %v4_fb9c to i32
  %v0_fba0 = load i32, i32* %r6.global-to-local, align 4
  %v2_fba0 = xor i32 %v0_fba0, %v6_fb9c
  %v1_fba4 = trunc i32 %v2_fba0 to i8
  store i8 %v1_fba4, i8* %v3_fb9c, align 1
  %v0_fba8 = load i32, i32* @lr, align 4
  %v1_fba8 = inttoptr i32 %v0_fba8 to i32*
  %v2_fba8 = load i32, i32* %v1_fba8, align 4
  %v0_fbac = load i32, i32* %ip.global-to-local, align 4
  %v2_fbac = add i32 %v0_fbac, %v2_fba8
  %v3_fbac = inttoptr i32 %v2_fbac to i8*
  %v4_fbac = load i8, i8* %v3_fbac, align 1
  %v6_fbac = zext i8 %v4_fbac to i32
  %v0_fbb0 = load i32, i32* %r5.global-to-local, align 4
  %v2_fbb0 = xor i32 %v0_fbb0, %v6_fbac
  %v1_fbb4 = trunc i32 %v2_fbb0 to i8
  store i8 %v1_fbb4, i8* %v3_fbac, align 1
  %v0_fbb8 = load i32, i32* @lr, align 4
  %v1_fbb8 = inttoptr i32 %v0_fbb8 to i32*
  %v2_fbb8 = load i32, i32* %v1_fbb8, align 4
  %v0_fbbc = load i32, i32* %ip.global-to-local, align 4
  %v2_fbbc = add i32 %v0_fbbc, %v2_fbb8
  %v3_fbbc = inttoptr i32 %v2_fbbc to i8*
  %v4_fbbc = load i8, i8* %v3_fbbc, align 1
  %v6_fbbc = zext i8 %v4_fbbc to i32
  %v0_fbc0 = load i32, i32* %r4.global-to-local, align 4
  %v2_fbc0 = xor i32 %v0_fbc0, %v6_fbbc
  %v1_fbc4 = trunc i32 %v2_fbc0 to i8
  store i8 %v1_fbc4, i8* %v3_fbbc, align 1
  %v0_fbc8 = load i32, i32* @lr, align 4
  %v1_fbc8 = add i32 %v0_fbc8, 4
  %v2_fbc8 = inttoptr i32 %v1_fbc8 to i8*
  %v3_fbc8 = load i8, i8* %v2_fbc8, align 1
  %v4_fbc8 = zext i8 %v3_fbc8 to i32
  %v0_fbcc = load i32, i32* %r7.global-to-local, align 4
  %v1_fbcc = add i32 %v0_fbcc, 1
  %v2_fbcc = inttoptr i32 %v1_fbcc to i8*
  %v3_fbcc = load i8, i8* %v2_fbcc, align 1
  %v4_fbcc = zext i8 %v3_fbcc to i32
  %v0_fbd0 = load i32, i32* %ip.global-to-local, align 4
  %v1_fbd0 = add i32 %v0_fbd0, 1
  store i32 %v1_fbd0, i32* %ip.global-to-local, align 4
  %v4_fbd4 = mul nuw nsw i32 %v4_fbcc, 256
  %v5_fbd4 = or i32 %v4_fbd4, %v4_fbc8
  store i32 %v5_fbd4, i32* @r2, align 4
  %v8_fbdc = icmp sgt i32 %v5_fbd4, %v1_fbd0
  br i1 %v8_fbdc, label %dec_label_pc_fb88, label %dec_label_pc_fbe0

dec_label_pc_fbe0:                                ; preds = %dec_label_pc_fb88
  %v2_fbe0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_fbe0, i32* @r4, align 4
  ret i32 %v1_fb7c

; uselistorder directives
  uselistorder i32 %v1_fbd0, { 1, 2, 0 }
  uselistorder i32 %v0_fbc8, { 1, 0 }
  uselistorder i32 %v1_fb7c, { 0, 2, 1 }
  uselistorder i32 %v2_fb58, { 3, 0, 1, 2, 4 }
}

define i32 @function_fbec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fbec:
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_fbec = load i32, i32* @r4, align 4
  store i32 %v3_fbec, i32* %stack_var_-28, align 4
  %v6_fbec = load i32, i32* @r5, align 4
  %v9_fbec = load i32, i32* @r6, align 4
  %v12_fbec = load i32, i32* @r7, align 4
  %v1_fbf4 = call i32 @function_10d94(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1b254.508 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_fbf4, i32* @r7, align 4
  %v3_fc10 = call i32 @function_ffd4(i32 %v1_fbf4, i32 ptrtoint (i32* @global_var_129dc.516 to i32), i32 2)
  %v0_fc14 = load i32, i32* @r5, align 4
  %v0_fc18 = load i32, i32* @r7, align 4
  store i32 %v0_fc18, i32* @global_var_1b25c.517, align 4
  %v1_fc1c = trunc i32 %v0_fc14 to i8
  store i8 %v1_fc1c, i8* bitcast (i32* @global_var_1b260.518 to i8*), align 4
  %v0_fc20 = load i32, i32* @r6, align 4
  %v1_fc20 = trunc i32 %v0_fc20 to i8
  store i8 %v1_fc20, i8* bitcast (i32* @global_var_1b261.519 to i8*), align 4
  %v1_fc24 = call i32 @function_10d94(i32 %v0_fc14)
  %v0_fc28 = load i32, i32* @r5, align 4
  store i32 %v1_fc24, i32* @r7, align 4
  %v3_fc34 = call i32 @function_ffd4(i32 %v1_fc24, i32 ptrtoint (i32* @global_var_129e0.521 to i32), i32 %v0_fc28)
  %v0_fc3c = load i32, i32* @r7, align 4
  store i32 %v0_fc3c, i32* @global_var_1b264.522, align 4
  %v0_fc40 = load i32, i32* @r5, align 4
  %v1_fc40 = trunc i32 %v0_fc40 to i8
  store i8 %v1_fc40, i8* bitcast (i32* @global_var_1b268.523 to i8*), align 4
  %v0_fc44 = load i32, i32* @r6, align 4
  %v1_fc44 = trunc i32 %v0_fc44 to i8
  store i8 %v1_fc44, i8* bitcast (i32* @global_var_1b269.524 to i8*), align 4
  %v1_fc48 = call i32 @function_10d94(i32 19)
  store i32 %v1_fc48, i32* @r5, align 4
  store i32 19, i32* %sl.global-to-local, align 4
  %v4_fc5c = call i32 @function_ffd4(i32 %v1_fc48, i32 ptrtoint ([20 x i8]* @global_var_129e4.526 to i32), i32 19)
  %v0_fc64 = load i32, i32* @r5, align 4
  store i32 %v0_fc64, i32* @global_var_1b26c.527, align 4
  store i8 19, i8* bitcast (i32* @global_var_1b270.528 to i8*), align 4
  %v0_fc6c = load i32, i32* @r6, align 4
  %v1_fc6c = trunc i32 %v0_fc6c to i8
  store i8 %v1_fc6c, i8* bitcast (i32* @global_var_1b271.529 to i8*), align 4
  %v1_fc70 = call i32 @function_10d94(i32 6)
  store i32 6, i32* %r8.global-to-local, align 4
  store i32 %v1_fc70, i32* @r5, align 4
  %v4_fc84 = call i32 @function_ffd4(i32 %v1_fc70, i32 ptrtoint ([7 x i8]* @global_var_129f8.531 to i32), i32 6)
  %v0_fc8c = load i32, i32* @r5, align 4
  store i32 %v0_fc8c, i32* @global_var_1b274.532, align 4
  store i8 6, i8* bitcast (i32* @global_var_1b278.533 to i8*), align 4
  %v0_fc94 = load i32, i32* @r6, align 4
  %v1_fc94 = trunc i32 %v0_fc94 to i8
  store i8 %v1_fc94, i8* bitcast (i32* @global_var_1b279.534 to i8*), align 4
  %v1_fc98 = call i32 @function_10d94(i32 7)
  store i32 7, i32* @r5, align 4
  store i32 %v1_fc98, i32* @r7, align 4
  %v4_fcac = call i32 @function_ffd4(i32 %v1_fc98, i32 ptrtoint ([8 x i8]* @global_var_12a00.536 to i32), i32 7)
  %v0_fcb0 = load i32, i32* @r5, align 4
  %v0_fcb4 = load i32, i32* @r7, align 4
  store i32 %v0_fcb4, i32* @global_var_1b27c.537, align 4
  %v1_fcb8 = trunc i32 %v0_fcb0 to i8
  store i8 %v1_fcb8, i8* bitcast (i32* @global_var_1b280.538 to i8*), align 4
  %v0_fcbc = load i32, i32* @r6, align 4
  %v1_fcbc = trunc i32 %v0_fcbc to i8
  store i8 %v1_fcbc, i8* bitcast (i32* @global_var_1b281.539 to i8*), align 4
  %v1_fcc0 = call i32 @function_10d94(i32 %v0_fcb0)
  %v0_fcc4 = load i32, i32* @r5, align 4
  store i32 %v1_fcc0, i32* @r7, align 4
  %v4_fcd0 = call i32 @function_ffd4(i32 %v1_fcc0, i32 ptrtoint ([8 x i8]* @global_var_12a08.541 to i32), i32 %v0_fcc4)
  %v0_fcd8 = load i32, i32* @r7, align 4
  store i32 %v0_fcd8, i32* @global_var_1b284.542, align 4
  %v0_fcdc = load i32, i32* @r5, align 4
  %v1_fcdc = trunc i32 %v0_fcdc to i8
  store i8 %v1_fcdc, i8* bitcast (i32* @global_var_1b288.543 to i8*), align 4
  %v0_fce0 = load i32, i32* @r6, align 4
  %v1_fce0 = trunc i32 %v0_fce0 to i8
  store i8 %v1_fce0, i8* bitcast (i32* @global_var_1b289.544 to i8*), align 4
  %v1_fce4 = call i32 @function_10d94(i32 3)
  store i32 %v1_fce4, i32* @r5, align 4
  %v4_fcf4 = call i32 @function_ffd4(i32 %v1_fce4, i32 ptrtoint ([4 x i8]* @global_var_12a10.546 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1b290.547 to i8*), align 4
  %v0_fd04 = load i32, i32* @r5, align 4
  store i32 %v0_fd04, i32* @global_var_1b28c.548, align 4
  %v0_fd08 = load i32, i32* @r6, align 4
  %v1_fd08 = trunc i32 %v0_fd08 to i8
  store i8 %v1_fd08, i8* bitcast (i32* @global_var_1b291.549 to i8*), align 4
  %v1_fd0c = call i32 @function_10d94(i32 24)
  store i32 %v1_fd0c, i32* @r5, align 4
  %v3_fd1c = call i32 @function_ffd4(i32 %v1_fd0c, i32 ptrtoint (i32* @global_var_12a14.551 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1b298.552 to i8*), align 4
  %v0_fd2c = load i32, i32* @r5, align 4
  store i32 %v0_fd2c, i32* @global_var_1b294.553, align 4
  %v0_fd30 = load i32, i32* @r6, align 4
  %v1_fd30 = trunc i32 %v0_fd30 to i8
  store i8 %v1_fd30, i8* bitcast (i32* @global_var_1b299.554 to i8*), align 4
  %v1_fd34 = call i32 @function_10d94(i32 29)
  store i32 %v1_fd34, i32* @r5, align 4
  %v3_fd44 = call i32 @function_ffd4(i32 %v1_fd34, i32 ptrtoint (i32* @global_var_12a30.556 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1b2a0.557 to i8*), align 4
  %v0_fd54 = load i32, i32* @r5, align 4
  store i32 %v0_fd54, i32* @global_var_1b29c.558, align 4
  %v0_fd58 = load i32, i32* @r6, align 4
  %v1_fd58 = trunc i32 %v0_fd58 to i8
  store i8 %v1_fd58, i8* bitcast (i32* @global_var_1b2a1.559 to i8*), align 4
  %v1_fd5c = call i32 @function_10d94(i32 9)
  store i32 %v1_fd5c, i32* @r5, align 4
  %v4_fd6c = call i32 @function_ffd4(i32 %v1_fd5c, i32 ptrtoint ([10 x i8]* @global_var_12a50.561 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1b2a8.562 to i8*), align 4
  %v0_fd7c = load i32, i32* @r5, align 4
  store i32 %v0_fd7c, i32* @global_var_1b2a4.563, align 4
  %v0_fd80 = load i32, i32* @r6, align 4
  %v1_fd80 = trunc i32 %v0_fd80 to i8
  store i8 %v1_fd80, i8* bitcast (i32* @global_var_1b2a9.564 to i8*), align 4
  %v1_fd84 = call i32 @function_10d94(i32 8)
  store i32 %v1_fd84, i32* @r5, align 4
  %v4_fd94 = call i32 @function_ffd4(i32 %v1_fd84, i32 ptrtoint ([9 x i8]* @global_var_12a5c.566 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1b2b0.567 to i8*), align 4
  %v0_fda4 = load i32, i32* @r5, align 4
  store i32 %v0_fda4, i32* @global_var_1b2ac.568, align 4
  %v0_fda8 = load i32, i32* @r6, align 4
  %v1_fda8 = trunc i32 %v0_fda8 to i8
  store i8 %v1_fda8, i8* bitcast (i32* @global_var_1b2b1.569 to i8*), align 4
  %v1_fdac = call i32 @function_10d94(i32 5)
  store i32 %v1_fdac, i32* @r5, align 4
  %v4_fdbc = call i32 @function_ffd4(i32 %v1_fdac, i32 ptrtoint ([6 x i8]* @global_var_12a68.571 to i32), i32 5)
  %v0_fdc4 = load i32, i32* %r8.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1b2b8.572 to i8*), align 4
  %v0_fdcc = load i32, i32* @r5, align 4
  store i32 %v0_fdcc, i32* @global_var_1b2b4.573, align 4
  %v0_fdd0 = load i32, i32* @r6, align 4
  %v1_fdd0 = trunc i32 %v0_fdd0 to i8
  store i8 %v1_fdd0, i8* bitcast (i32* @global_var_1b2b9.574 to i8*), align 4
  %v1_fdd4 = call i32 @function_10d94(i32 %v0_fdc4)
  %v0_fdd8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_fdd4, i32* @r5, align 4
  %v4_fde4 = call i32 @function_ffd4(i32 %v1_fdd4, i32 ptrtoint ([7 x i8]* @global_var_12a70.576 to i32), i32 %v0_fdd8)
  %v0_fdec = load i32, i32* @r5, align 4
  store i32 %v0_fdec, i32* @global_var_1b2bc.577, align 4
  %v1_fdf0 = trunc i32 %v0_fdd8 to i8
  store i8 %v1_fdf0, i8* bitcast (i32* @global_var_1b2c0.578 to i8*), align 4
  %v0_fdf4 = load i32, i32* @r6, align 4
  %v1_fdf4 = trunc i32 %v0_fdf4 to i8
  store i8 %v1_fdf4, i8* bitcast (i32* @global_var_1b2c1.579 to i8*), align 4
  %v1_fdf8 = call i32 @function_10d94(i32 21)
  store i32 %v1_fdf8, i32* @r5, align 4
  store i32 21, i32* @r7, align 4
  %v3_fe0c = call i32 @function_ffd4(i32 %v1_fdf8, i32 ptrtoint (i32* @global_var_12a78.581 to i32), i32 21)
  %v0_fe14 = load i32, i32* @r5, align 4
  store i32 %v0_fe14, i32* @global_var_1b2c4.582, align 4
  %v0_fe18 = load i32, i32* @r7, align 4
  %v1_fe18 = trunc i32 %v0_fe18 to i8
  store i8 %v1_fe18, i8* bitcast (i32* @global_var_1b2c8.583 to i8*), align 4
  %v0_fe1c = load i32, i32* @r6, align 4
  %v1_fe1c = trunc i32 %v0_fe1c to i8
  store i8 %v1_fe1c, i8* bitcast (i32* @global_var_1b2c9.584 to i8*), align 4
  %v1_fe20 = call i32 @function_10d94(i32 17)
  store i32 %v1_fe20, i32* @r5, align 4
  %v3_fe30 = call i32 @function_ffd4(i32 %v1_fe20, i32 ptrtoint (i32* @global_var_12a90.586 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1b2d0.587 to i8*), align 4
  %v0_fe40 = load i32, i32* @r5, align 4
  store i32 %v0_fe40, i32* @global_var_1b2cc.588, align 4
  %v0_fe44 = load i32, i32* @r6, align 4
  %v1_fe44 = trunc i32 %v0_fe44 to i8
  store i8 %v1_fe44, i8* bitcast (i32* @global_var_1b2d1.589 to i8*), align 4
  %v1_fe48 = call i32 @function_10d94(i32 11)
  store i32 %v1_fe48, i32* @r5, align 4
  %v0_fe58 = load i32, i32* %r8.global-to-local, align 4
  %v1_fe58 = add i32 %v0_fe58, 5
  store i32 %v1_fe58, i32* %r8.global-to-local, align 4
  %v4_fe5c = call i32 @function_ffd4(i32 %v1_fe48, i32 ptrtoint ([12 x i8]* @global_var_12aa4.591 to i32), i32 11)
  %v0_fe60 = load i32, i32* @r7, align 4
  %v0_fe64 = load i32, i32* @r5, align 4
  store i32 %v0_fe64, i32* @global_var_1b2d4.592, align 4
  %v1_fe68 = trunc i32 %v1_fe58 to i8
  store i8 %v1_fe68, i8* bitcast (i32* @global_var_1b2d8.593 to i8*), align 4
  %v0_fe6c = load i32, i32* @r6, align 4
  %v1_fe6c = trunc i32 %v0_fe6c to i8
  store i8 %v1_fe6c, i8* bitcast (i32* @global_var_1b2d9.594 to i8*), align 4
  %v1_fe70 = call i32 @function_10d94(i32 %v0_fe60)
  %v0_fe78 = load i32, i32* @r7, align 4
  store i32 %v1_fe70, i32* @r5, align 4
  %v3_fe80 = call i32 @function_ffd4(i32 %v1_fe70, i32 ptrtoint (i32* @global_var_12ab0.596 to i32), i32 %v0_fe78)
  %v0_fe84 = load i32, i32* %sl.global-to-local, align 4
  %v0_fe88 = load i32, i32* @r5, align 4
  store i32 %v0_fe88, i32* @global_var_1b2dc.597, align 4
  %v0_fe8c = load i32, i32* @r7, align 4
  %v1_fe8c = trunc i32 %v0_fe8c to i8
  store i8 %v1_fe8c, i8* bitcast (i32* @global_var_1b2e0.598 to i8*), align 4
  %v0_fe90 = load i32, i32* @r6, align 4
  %v1_fe90 = trunc i32 %v0_fe90 to i8
  store i8 %v1_fe90, i8* bitcast (i32* @global_var_1b2e1.599 to i8*), align 4
  %v1_fe94 = call i32 @function_10d94(i32 %v0_fe84)
  %v0_fe9c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_fe94, i32* @r5, align 4
  %v3_fea4 = call i32 @function_ffd4(i32 %v1_fe94, i32 ptrtoint (i32* @global_var_12ac8.601 to i32), i32 %v0_fe9c)
  %v0_feac = load i32, i32* @r5, align 4
  store i32 %v0_feac, i32* @global_var_1b2e4.602, align 4
  %v1_feb0 = trunc i32 %v0_fe9c to i8
  store i8 %v1_feb0, i8* bitcast (i32* @global_var_1b2e8.603 to i8*), align 4
  %v0_feb4 = load i32, i32* @r6, align 4
  %v1_feb4 = trunc i32 %v0_feb4 to i8
  store i8 %v1_feb4, i8* bitcast (i32* @global_var_1b2e9.604 to i8*), align 4
  %v1_feb8 = call i32 @function_10d94(i32 23)
  store i32 %v1_feb8, i32* @r5, align 4
  %v3_fec8 = call i32 @function_ffd4(i32 %v1_feb8, i32 ptrtoint (i32* @global_var_12adc.606 to i32), i32 23)
  %v0_fed0 = load i32, i32* %r8.global-to-local, align 4
  %v0_fed4 = load i32, i32* @r5, align 4
  store i32 %v0_fed4, i32* @global_var_1b2ec.607, align 4
  store i8 23, i8* bitcast (i32* @global_var_1b2f0.608 to i8*), align 4
  %v0_fedc = load i32, i32* @r6, align 4
  %v1_fedc = trunc i32 %v0_fedc to i8
  store i8 %v1_fedc, i8* bitcast (i32* @global_var_1b2f1.609 to i8*), align 4
  %v1_fee0 = call i32 @function_10d94(i32 %v0_fed0)
  %v0_fee8 = load i32, i32* %r8.global-to-local, align 4
  %v4_fef0 = call i32 @function_ffd4(i32 %v1_fee0, i32 ptrtoint ([12 x i8]* @global_var_12af4.611 to i32), i32 %v0_fee8)
  %v0_fef4 = load i32, i32* @r6, align 4
  %v1_fef4 = trunc i32 %v0_fef4 to i8
  store i8 %v1_fef4, i8* bitcast (i32* @global_var_1b2f9.612 to i8*), align 4
  store i32 %v1_fee0, i32* @global_var_1b2f4.613, align 4
  %v1_fefc = trunc i32 %v0_fee8 to i8
  store i8 %v1_fefc, i8* bitcast (i32* @global_var_1b2f8.614 to i8*), align 4
  %v2_ff00 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_ff00, i32* @r4, align 4
  store i32 %v6_fbec, i32* @r5, align 4
  store i32 %v9_fbec, i32* @r6, align 4
  store i32 %v12_fbec, i32* @r7, align 4
  ret i32 %v4_fef0

; uselistorder directives
  uselistorder i32 %v1_fe94, { 1, 0 }
  uselistorder i32 %v1_fe70, { 1, 0 }
  uselistorder i32 %v1_fdd4, { 1, 0 }
  uselistorder i32 %v1_fcc0, { 1, 0 }
  uselistorder i32 %v1_fc98, { 1, 0 }
  uselistorder i32 %v1_fc70, { 1, 0 }
  uselistorder i32 %v1_fc24, { 1, 0 }
  uselistorder i32 %v1_fbf4, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 23, { 1, 0, 3, 4, 2 }
  uselistorder i8 17, { 1, 0, 2, 3 }
  uselistorder i32 21, { 1, 4, 0, 3, 5, 6, 2 }
  uselistorder i8 5, { 10, 11, 0, 1, 12, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 9, { 4, 2, 27, 8, 22, 9, 23, 10, 24, 6, 26, 19, 7, 25, 5, 1, 28, 20, 29, 0, 21, 11, 30, 12, 31, 13, 32, 14, 33, 34, 3, 15, 16, 17, 46, 35, 36, 18, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48 }
  uselistorder i32 29, { 1, 0, 3, 4, 2 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 0, 3, 1, 4, 2 }
  uselistorder i32 19, { 1, 6, 2, 0, 7, 3, 4, 5, 8 }
  uselistorder i32 (i32, i32, i32)* @function_ffd4, { 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 7, 3, 2, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1b254.508 to i32), { 5, 0, 1, 2, 3, 4, 6 }
}

define i32 @function_ff58(i8* %arg1) local_unnamed_addr {
dec_label_pc_ff58:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_ff5c = load i8, i8* %arg1, align 1
  %v4_ff5c = zext i8 %v3_ff5c to i32
  %v2_ff60 = icmp eq i8 %v3_ff5c, 0
  br i1 %v2_ff60, label %dec_label_pc_ff7c, label %bb

dec_label_pc_ff7c:                                ; preds = %dec_label_pc_ff6c, %dec_label_pc_ff58
  %merge = phi i32 [ %v4_ff5c, %dec_label_pc_ff58 ], [ %v1_ff6c, %dec_label_pc_ff6c ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_ff58
  br label %dec_label_pc_ff6c

dec_label_pc_ff6c:                                ; preds = %dec_label_pc_ff6c, %bb
  %v0_ff6c = phi i32 [ %v1_ff6c, %dec_label_pc_ff6c ], [ 0, %bb ]
  %v1_ff6c = add i32 %v0_ff6c, 1
  %v2_ff70 = add i32 %v1_ff6c, %tmp
  %v3_ff70 = inttoptr i32 %v2_ff70 to i8*
  %v4_ff70 = load i8, i8* %v3_ff70, align 1
  %v2_ff74 = icmp eq i8 %v4_ff70, 0
  br i1 %v2_ff74, label %dec_label_pc_ff7c, label %dec_label_pc_ff6c

; uselistorder directives
  uselistorder i32 %v1_ff6c, { 1, 0, 2 }
}

define i32 @function_ff80(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ff80:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_ff80 = load i8, i8* %arg1, align 1
  %v3_ff80 = zext i8 %v2_ff80 to i32
  %v2_ff84 = icmp eq i8 %v2_ff80, 0
  br i1 %v2_ff84, label %dec_label_pc_ffc8, label %dec_label_pc_ff8c

dec_label_pc_ff8c:                                ; preds = %dec_label_pc_ff80
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff90

dec_label_pc_ff90:                                ; preds = %dec_label_pc_ff90, %dec_label_pc_ff8c
  %v0_ff90 = phi i32 [ %v1_ff90, %dec_label_pc_ff90 ], [ 0, %dec_label_pc_ff8c ]
  %v1_ff90 = add i32 %v0_ff90, 1
  store i32 %v1_ff90, i32* %ip.global-to-local, align 4
  %v2_ff94 = add i32 %v1_ff90, %tmp
  %v3_ff94 = inttoptr i32 %v2_ff94 to i8*
  %v4_ff94 = load i8, i8* %v3_ff94, align 1
  %v2_ff98 = icmp eq i8 %v4_ff94, 0
  br i1 %v2_ff98, label %dec_label_pc_ffa0, label %dec_label_pc_ff90

dec_label_pc_ffa0:                                ; preds = %dec_label_pc_ff90
  %v7_ffa0 = icmp eq i32 %v0_ff90, -2
  br i1 %v7_ffa0, label %dec_label_pc_ffc0, label %dec_label_pc_ffac.preheader

dec_label_pc_ffac.preheader:                      ; preds = %dec_label_pc_ffa0, %dec_label_pc_ffc8
  %storemerge = phi i32 [ %v3_ff80, %dec_label_pc_ffc8 ], [ %v1_ff90, %dec_label_pc_ffa0 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_ffb8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_ffac

dec_label_pc_ffac:                                ; preds = %dec_label_pc_ffac.dec_label_pc_ffac_crit_edge, %dec_label_pc_ffac.preheader
  %v2_ffb8 = phi i32 [ %v5_ffb8, %dec_label_pc_ffac.dec_label_pc_ffac_crit_edge ], [ %v2_ffb8.pre, %dec_label_pc_ffac.preheader ]
  %v0_ffb0 = phi i32 [ %v0_ffb0.pre, %dec_label_pc_ffac.dec_label_pc_ffac_crit_edge ], [ %tmp, %dec_label_pc_ffac.preheader ]
  %v0_ffac = phi i32 [ %v0_ffac.pre, %dec_label_pc_ffac.dec_label_pc_ffac_crit_edge ], [ %storemerge, %dec_label_pc_ffac.preheader ]
  %v1_ffac = add i32 %v0_ffac, -1
  store i32 %v1_ffac, i32* %r2.global-to-local, align 4
  %v1_ffb0 = inttoptr i32 %v0_ffb0 to i8*
  %v2_ffb0 = load i8, i8* %v1_ffb0, align 1
  %v5_ffb0 = add i32 %v0_ffb0, 1
  store i32 %v5_ffb0, i32* %r1.global-to-local, align 4
  %v3_ffb4 = icmp eq i32 %v0_ffac, 0
  %v3_ffb8 = inttoptr i32 %v2_ffb8 to i8*
  store i8 %v2_ffb0, i8* %v3_ffb8, align 1
  %v4_ffb8 = load i32, i32* @r0, align 4
  %v5_ffb8 = add i32 %v4_ffb8, 1
  store i32 %v5_ffb8, i32* @r0, align 4
  br i1 %v3_ffb4, label %dec_label_pc_ffc0.loopexit, label %dec_label_pc_ffac.dec_label_pc_ffac_crit_edge

dec_label_pc_ffac.dec_label_pc_ffac_crit_edge:    ; preds = %dec_label_pc_ffac
  %v0_ffac.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_ffb0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ffac

dec_label_pc_ffc0.loopexit:                       ; preds = %dec_label_pc_ffac
  %v0_ffc0.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ffc0

dec_label_pc_ffc0:                                ; preds = %dec_label_pc_ffc0.loopexit, %dec_label_pc_ffa0
  %v0_ffc0 = phi i32 [ %v0_ffc0.pre, %dec_label_pc_ffc0.loopexit ], [ %v1_ff90, %dec_label_pc_ffa0 ]
  ret i32 %v0_ffc0

dec_label_pc_ffc8:                                ; preds = %dec_label_pc_ff80
  store i32 %v3_ff80, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ffac.preheader

; uselistorder directives
  uselistorder i32 %v5_ffb8, { 1, 0 }
  uselistorder i32 %v0_ffb0, { 1, 0 }
  uselistorder i32 %v1_ff90, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_ff80, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ffac.preheader, { 1, 0 }
}

define i32 @function_ffd4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ffd4:
  %v2_ffd4 = icmp eq i32 %arg3, 0
  br i1 %v2_ffd4, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_ffe0, %dec_label_pc_ffd4
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_ffd4
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_ffe0

dec_label_pc_ffe0:                                ; preds = %dec_label_pc_ffe0, %bb
  %v0_ffe0 = phi i32 [ %v1_ffe8, %dec_label_pc_ffe0 ], [ 0, %bb ]
  %v2_ffe0 = add i32 %v0_ffe0, %arg2
  %v3_ffe0 = inttoptr i32 %v2_ffe0 to i8*
  %v4_ffe0 = load i8, i8* %v3_ffe0, align 1
  %v4_ffe4 = add i32 %v0_ffe0, %arg1
  %v5_ffe4 = inttoptr i32 %v4_ffe4 to i8*
  store i8 %v4_ffe0, i8* %v5_ffe4, align 1
  %v0_ffe8 = load i32, i32* @ip, align 4
  %v1_ffe8 = add i32 %v0_ffe8, 1
  store i32 %v1_ffe8, i32* @ip, align 4
  %v9_ffec = icmp eq i32 %v1_ffe8, %arg3
  br i1 %v9_ffec, label %.loopexit, label %dec_label_pc_ffe0

; uselistorder directives
  uselistorder i32 %v1_ffe8, { 1, 2, 0 }
}

define i32 @function_fff8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fff8:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_fff8 = icmp eq i32 %arg2, 0
  br i1 %v2_fff8, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_10008, %dec_label_pc_fff8
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_fff8
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10008

dec_label_pc_10008:                               ; preds = %dec_label_pc_10008.dec_label_pc_10008_crit_edge, %bb
  %v2_10008 = phi i32 [ %v1_1000c, %dec_label_pc_10008.dec_label_pc_10008_crit_edge ], [ 0, %bb ]
  %v0_10008.off0 = phi i8 [ %extract.t, %dec_label_pc_10008.dec_label_pc_10008_crit_edge ], [ 0, %bb ]
  %v4_10008 = add i32 %v2_10008, %arg1
  %v5_10008 = inttoptr i32 %v4_10008 to i8*
  store i8 %v0_10008.off0, i8* %v5_10008, align 1
  %v0_1000c = load i32, i32* %r3.global-to-local, align 4
  %v1_1000c = add i32 %v0_1000c, 1
  store i32 %v1_1000c, i32* %r3.global-to-local, align 4
  %v9_10010 = icmp eq i32 %v1_1000c, %arg2
  br i1 %v9_10010, label %.loopexit, label %dec_label_pc_10008.dec_label_pc_10008_crit_edge

dec_label_pc_10008.dec_label_pc_10008_crit_edge:  ; preds = %dec_label_pc_10008
  %v0_10008.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_10008.pre to i8
  br label %dec_label_pc_10008

; uselistorder directives
  uselistorder i32 %v1_1000c, { 1, 2, 0 }
}

define i32 @function_1001c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1001c:
  %v7_10030 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_10030, label %dec_label_pc_10034, label %dec_label_pc_1003c

dec_label_pc_10034:                               ; preds = %dec_label_pc_10050, %dec_label_pc_1001c, %dec_label_pc_1003c
  ret i32 -1

dec_label_pc_1003c:                               ; preds = %dec_label_pc_1001c
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_10034, label %dec_label_pc_10044

dec_label_pc_10044:                               ; preds = %dec_label_pc_1003c
  br label %dec_label_pc_1005c

dec_label_pc_10050:                               ; preds = %dec_label_pc_10074, %dec_label_pc_1005c
  %v1_10050 = add i32 %v0_1007c, 1
  %v9_10054 = icmp eq i32 %v1_10050, %arg2
  br i1 %v9_10054, label %dec_label_pc_10034, label %dec_label_pc_1005c

dec_label_pc_1005c:                               ; preds = %dec_label_pc_10050, %dec_label_pc_10044
  %v0_1007c = phi i32 [ %v1_10050, %dec_label_pc_10050 ], [ 0, %dec_label_pc_10044 ]
  %v0_10068 = phi i32 [ %v1_10068., %dec_label_pc_10050 ], [ 0, %dec_label_pc_10044 ]
  %v2_1005c = add i32 %v0_10068, %arg3
  %v3_1005c = inttoptr i32 %v2_1005c to i8*
  %v4_1005c = load i8, i8* %v3_1005c, align 1
  %v2_10060 = add i32 %v0_1007c, %arg1
  %v3_10060 = inttoptr i32 %v2_10060 to i8*
  %v4_10060 = load i8, i8* %v3_10060, align 1
  %v9_10064 = icmp eq i8 %v4_10060, %v4_1005c
  %v1_10068 = add i32 %v0_10068, 1
  %v1_10068. = select i1 %v9_10064, i32 %v1_10068, i32 0
  br i1 %v9_10064, label %dec_label_pc_10074, label %dec_label_pc_10050

dec_label_pc_10074:                               ; preds = %dec_label_pc_1005c
  %v9_10074 = icmp eq i32 %v1_10068., %arg4
  br i1 %v9_10074, label %dec_label_pc_1007c, label %dec_label_pc_10050

dec_label_pc_1007c:                               ; preds = %dec_label_pc_10074
  %v1_1007c = add i32 %v0_1007c, 1
  ret i32 %v1_1007c

; uselistorder directives
  uselistorder i1 %v9_10064, { 1, 0 }
  uselistorder i32 %v0_10068, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10034, { 0, 2, 1 }
}

define i32 @function_10084(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10084:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_10084 = load i32, i32* @r4, align 4
  store i32 %v3_10084, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10090

dec_label_pc_10090:                               ; preds = %.thread, %dec_label_pc_100a8, %bb, %dec_label_pc_10084
  %v0_10090 = phi i32 [ %tmp, %dec_label_pc_10084 ], [ %v5_10090, %bb ], [ %v5_10090, %dec_label_pc_100a8 ], [ %v5_10090, %.thread ]
  %v1_10090 = inttoptr i32 %v0_10090 to i8*
  %v2_10090 = load i8, i8* %v1_10090, align 1
  %v3_10090 = zext i8 %v2_10090 to i32
  %v5_10090 = add i32 %v0_10090, 1
  store i32 %v5_10090, i32* %r5.global-to-local, align 4
  %v7_10098 = icmp eq i8 %v2_10090, 9
  br i1 %v7_10098, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10090
  store i32 %v3_10090, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10090

bb:                                               ; preds = %dec_label_pc_10090
  %v8_1009c = icmp eq i8 %v2_10090, 32
  store i32 %v3_10090, i32* %r4.global-to-local, align 4
  br i1 %v8_1009c, label %dec_label_pc_10090, label %dec_label_pc_100a8

dec_label_pc_100a8:                               ; preds = %bb
  %v7_100a8 = icmp eq i8 %v2_10090, 10
  br i1 %v7_100a8, label %dec_label_pc_10090, label %dec_label_pc_100b0

dec_label_pc_100b0:                               ; preds = %dec_label_pc_100a8
  %v7_100b0 = icmp eq i8 %v2_10090, 45
  br i1 %v7_100b0, label %dec_label_pc_10190, label %dec_label_pc_100b8

dec_label_pc_100b8:                               ; preds = %dec_label_pc_100b0
  %v7_100b8 = icmp eq i8 %v2_10090, 43
  br i1 %v7_100b8, label %bb48, label %dec_label_pc_100c8

bb48:                                             ; preds = %dec_label_pc_100b8
  %v2_100bc = inttoptr i32 %v5_10090 to i8*
  %v3_100bc = load i8, i8* %v2_100bc, align 1
  %v4_100bc = zext i8 %v3_100bc to i32
  store i32 %v4_100bc, i32* %r4.global-to-local, align 4
  %v6_100bc = add i32 %v0_10090, 2
  store i32 %v6_100bc, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_100c8

dec_label_pc_100c8:                               ; preds = %bb48, %dec_label_pc_100b8, %dec_label_pc_10190
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10190 ], [ 2147483647, %dec_label_pc_100b8 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_10190 ], [ 0, %dec_label_pc_100b8 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_100d0 = call i32 @function_103e8(i32 %storemerge1, i32 %arg2)
  %v0_100d4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_100d4, i32* @r1, align 4
  store i32 %v2_100d0, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_100e0 = call i32 @function_102d8()
  store i32 %v0_100e0, i32* @lr, align 4
  %v0_100f0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_100f0

dec_label_pc_100f0:                               ; preds = %.thread8, %dec_label_pc_100c8
  %v2_1016c11 = phi i32 [ %v1_1018826, %.thread8 ], [ 0, %dec_label_pc_100c8 ]
  %v1_10148 = phi i32 [ %v0_1017c24, %.thread8 ], [ 0, %dec_label_pc_100c8 ]
  %v1_10130 = phi i32 [ %v3_10174, %.thread8 ], [ %v0_100f0.pre, %dec_label_pc_100c8 ]
  %v1_100f0 = urem i32 %v1_10130, 256
  %v1_100f4 = add nsw i32 %v1_100f0, -48
  %v1_100fc = add nsw i32 %v1_100f0, -97
  %v1_10100 = add i32 %v1_10130, -48
  %v1_10104 = add nsw i32 %v1_100f0, -65
  %tmp71 = icmp ult i32 %v1_100f4, 10
  br i1 %tmp71, label %dec_label_pc_10134, label %dec_label_pc_1010c

dec_label_pc_1010c:                               ; preds = %dec_label_pc_100f0
  %v2_1010c = icmp ugt i32 %v1_10104, 24
  %v7_1010c = icmp eq i32 %v1_10104, 25
  %v2_10110 = xor i1 %v7_1010c, true
  %v3_10110 = and i1 %v2_1010c, %v2_10110
  br i1 %v3_10110, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_1010c
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_1010c, %bb49
  %v0_1012420 = phi i32 [ %v1_10100, %dec_label_pc_1010c ], [ 0, %bb49 ]
  %v2_10114 = xor i1 %v2_1010c, true
  %v3_10114 = or i1 %v7_1010c, %v2_10114
  br i1 %v3_10114, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_10124 = phi i32 [ %v0_1012420, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_10110, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_1011c = icmp ugt i32 %v1_100fc, 24
  %v11_1011c = icmp eq i32 %v1_100fc, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_10120 = phi i1 [ %v7_1010c, %bb52 ], [ %v11_1011c, %bb53 ]
  %v0_10120 = phi i1 [ %v2_1010c, %bb52 ], [ %v6_1011c, %bb53 ]
  %v2_10120 = xor i1 %v1_10120, true
  %v3_10120 = and i1 %v0_10120, %v2_10120
  br i1 %v3_10120, label %dec_label_pc_1017c, label %dec_label_pc_10124

dec_label_pc_10124:                               ; preds = %bb54
  %v2_10124 = icmp eq i32 %v0_10124, 0
  %. = select i1 %v2_10124, i32 87, i32 55
  %v2_10130 = sub i32 %v1_10130, %.
  br label %dec_label_pc_10134

dec_label_pc_10134:                               ; preds = %dec_label_pc_100f0, %dec_label_pc_10124
  %v0_1014834 = phi i32 [ %v1_10104, %dec_label_pc_100f0 ], [ %., %dec_label_pc_10124 ]
  %v3_1016c12 = phi i32 [ %v1_10100, %dec_label_pc_100f0 ], [ %v2_10130, %dec_label_pc_10124 ]
  %v1_10134 = load i32, i32* %r6.global-to-local, align 4
  %v6_10138 = icmp slt i32 %v3_1016c12, %v1_10134
  br i1 %v6_10138, label %dec_label_pc_1013c, label %dec_label_pc_1017c

dec_label_pc_1013c:                               ; preds = %dec_label_pc_10134
  %v3_1013c = icmp uge i32 %v2_1016c11, %v0_100e0
  %v9_1013c = icmp eq i32 %v2_1016c11, %v0_100e0
  %v2_10140 = xor i1 %v3_1013c, true
  %v3_10140 = or i1 %v9_1013c, %v2_10140
  br i1 %v3_10140, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_1013c
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_1013c, %bb57
  %v0_1014833 = phi i32 [ %v0_1014834, %dec_label_pc_1013c ], [ 0, %bb57 ]
  %v2_10144 = xor i1 %v9_1013c, true
  %v3_10144 = and i1 %v3_1013c, %v2_10144
  br i1 %v3_10144, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_10148 = phi i32 [ %v0_1014833, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_10148, 0
  %v4_10148 = zext i1 %tmp72 to i32
  %v5_10148 = or i32 %v0_10148, %v4_10148
  %v7_10148 = icmp eq i32 %v5_10148, 0
  br i1 %v7_10148, label %dec_label_pc_10154, label %.thread8

dec_label_pc_10154:                               ; preds = %bb60
  %v1_10160 = load i32, i32* %r8.global-to-local, align 4
  %v7_10164 = icmp sgt i32 %v3_1016c12, %v1_10160
  br i1 %v7_10164, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_10154
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_10154
  %v2_10168 = icmp eq i1 %v9_1013c, false
  br i1 %v2_10168, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_1016c13 = mul i32 %v1_10134, %v2_1016c11
  %v5_1016c14 = add i32 %v4_1016c13, %v3_1016c12
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_1018826 = phi i32 [ %v2_1016c11, %bb63 ], [ %v2_1016c11, %bb60 ], [ %v5_1016c14, %bb64 ]
  %v0_1017c24 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_10174 = load i32, i32* %r5.global-to-local, align 4
  %v1_10174 = inttoptr i32 %v0_10174 to i8*
  %v2_10174 = load i8, i8* %v1_10174, align 1
  %v3_10174 = zext i8 %v2_10174 to i32
  store i32 %v3_10174, i32* %r4.global-to-local, align 4
  %v5_10174 = add i32 %v0_10174, 1
  store i32 %v5_10174, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_100f0

dec_label_pc_1017c:                               ; preds = %dec_label_pc_10134, %bb54
  %v1_1017c = icmp slt i32 %v1_10148, 0
  %v0_101a0 = load i32, i32* %sl.global-to-local, align 4
  %v2_101a0 = icmp eq i32 %v0_101a0, 0
  br i1 %v1_1017c, label %dec_label_pc_101a0, label %dec_label_pc_10184

dec_label_pc_10184:                               ; preds = %dec_label_pc_1017c
  br i1 %v2_101a0, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_10184
  %v2_10188 = sub i32 0, %v2_1016c11
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_10184, %bb65
  %v23_1018c = phi i32 [ %v2_1016c11, %dec_label_pc_10184 ], [ %v2_10188, %bb65 ]
  %v2_1018c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1018c, i32* @r4, align 4
  ret i32 %v23_1018c

dec_label_pc_10190:                               ; preds = %dec_label_pc_100b0
  %v1_10190 = inttoptr i32 %v5_10090 to i8*
  %v2_10190 = load i8, i8* %v1_10190, align 1
  %v3_10190 = zext i8 %v2_10190 to i32
  store i32 %v3_10190, i32* %r4.global-to-local, align 4
  %v5_10190 = add i32 %v0_10090, 2
  store i32 %v5_10190, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_100c8

dec_label_pc_101a0:                               ; preds = %dec_label_pc_1017c
  %.70 = select i1 %v2_101a0, i32 2147483647, i32 -2147483648
  %v2_101ac = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_101ac, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_10174, { 1, 0 }
  uselistorder i1 %v9_1013c, { 1, 0, 2 }
  uselistorder i1 %v3_1013c, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_1010c, { 1, 2, 0 }
  uselistorder i1 %v2_1010c, { 1, 0, 2 }
  uselistorder i32 %v1_100f0, { 1, 2, 0 }
  uselistorder i32 %v1_10130, { 1, 2, 0 }
  uselistorder i32 %v1_10148, { 1, 0 }
  uselistorder i32 %v2_1016c11, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_100e0, { 1, 0, 2 }
  uselistorder i32 %v5_10090, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_10090, { 1, 0 }
  uselistorder i32 %v0_10090, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32 55, { 0, 2, 1 }
  uselistorder i32 25, { 5, 6, 1, 2, 3, 4, 0 }
  uselistorder i32 (i32, i32)* @function_103e8, { 1, 5, 0, 4, 3, 2 }
  uselistorder i8 9, { 2, 3, 1, 0 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_10134, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_100c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10090, { 1, 2, 0, 3 }
}

define i32 @function_101b0() local_unnamed_addr {
dec_label_pc_101b0:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_101b0 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_101c0 = call i32 @function_1095c()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_101c8 = inttoptr i32 %v0_101c0 to i32*
  store i32 0, i32* %v2_101c8, align 4
  %v0_101d4 = load i32, i32* %r6.global-to-local, align 4
  %v3_101d8 = call i32 @function_10bfc(i32 2, i32 2, i32 %v0_101d4)
  %v7_101e4 = icmp eq i32 %v3_101d8, -1
  store i32 %v3_101d8, i32* %r5.global-to-local, align 4
  %v2_101f0 = load i32, i32* @r4, align 4
  br i1 %v7_101e4, label %dec_label_pc_10240, label %dec_label_pc_10204

dec_label_pc_10204:                               ; preds = %dec_label_pc_101b0
  %v7_101f0 = shl i32 2056, %v2_101f0
  %v8_101f0 = or i32 %v7_101f0, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_10220 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_10220 = call i32 @function_10a58(i32 %v3_101d8, %sockaddr* %v3_10220, i32 %v2_101f0)
  %v2_10228 = ptrtoint i32* %stack_var_-24 to i32
  %v0_1022c = load i32, i32* %r5.global-to-local, align 4
  %v4_10230 = call i32 @function_10a84(i32 %v0_1022c, %sockaddr* %v3_10220, i32 %v2_10228)
  %v1_10238 = call i32 @function_10660(i32 %v0_1022c)
  br label %dec_label_pc_10240

dec_label_pc_10240:                               ; preds = %dec_label_pc_101b0, %dec_label_pc_10204
  %v0_10240 = phi i32 [ %v0_101d4, %dec_label_pc_101b0 ], [ %v8_101f0, %dec_label_pc_10204 ]
  store i32 %v3_101b0, i32* @r4, align 4
  ret i32 %v0_10240

; uselistorder directives
  uselistorder i32 %v3_101d8, { 2, 1, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32)* @function_10660, { 21, 25, 20, 24, 19, 23, 22, 18, 17, 16, 15, 14, 13, 12, 11, 2, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_10a58, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10bfc, { 15, 16, 13, 14, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10240, { 1, 0 }
}

define i32 @function_1024c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1024c:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_10250 = load i8, i8* %tmp, align 1
  %v2_10254 = icmp eq i8 %v3_10250, 0
  br i1 %v2_10254, label %bb, label %dec_label_pc_10268

bb:                                               ; preds = %dec_label_pc_1024c
  %v4_10250 = zext i8 %v3_10250 to i32
  br label %dec_label_pc_1027c

dec_label_pc_10268:                               ; preds = %dec_label_pc_1024c
  br label %dec_label_pc_1026c

dec_label_pc_1026c:                               ; preds = %dec_label_pc_1026c, %dec_label_pc_10268
  %v0_1026c = phi i32 [ %v1_1026c, %dec_label_pc_1026c ], [ 0, %dec_label_pc_10268 ]
  %v1_1026c = add i32 %v0_1026c, 1
  %v2_10270 = add i32 %v1_1026c, %arg2
  %v3_10270 = inttoptr i32 %v2_10270 to i8*
  %v4_10270 = load i8, i8* %v3_10270, align 1
  %v2_10274 = icmp eq i8 %v4_10270, 0
  br i1 %v2_10274, label %dec_label_pc_1027c, label %dec_label_pc_1026c

dec_label_pc_1027c:                               ; preds = %dec_label_pc_1026c, %bb
  %v0_102c018 = phi i32 [ %v4_10250, %bb ], [ %v1_1026c, %dec_label_pc_1026c ]
  %v0_102841 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_102841, 1
  br i1 %tmp27, label %dec_label_pc_102d0, label %dec_label_pc_10290

dec_label_pc_10290:                               ; preds = %dec_label_pc_1027c, %dec_label_pc_10284.backedge
  %v0_10288.in = phi i32 [ %v0_10288, %dec_label_pc_10284.backedge ], [ %v0_102841, %dec_label_pc_1027c ]
  %v0_102b4 = phi i32 [ %v1_102b4., %dec_label_pc_10284.backedge ], [ 0, %dec_label_pc_1027c ]
  %v0_10290 = phi i32 [ %v5_10290, %dec_label_pc_10284.backedge ], [ %tmp20, %dec_label_pc_1027c ]
  %v0_10288 = add i32 %v0_10288.in, -1
  %v1_10290 = inttoptr i32 %v0_10290 to i8*
  %v2_10290 = load i8, i8* %v1_10290, align 1
  %v3_10290 = zext i8 %v2_10290 to i32
  %v5_10290 = add i32 %v0_10290, 1
  %v2_10294 = add i32 %v0_102b4, %arg2
  %v3_10294 = inttoptr i32 %v2_10294 to i8*
  %v4_10294 = load i8, i8* %v3_10294, align 1
  %v6_10294 = zext i8 %v4_10294 to i32
  %v1_10298 = add nsw i32 %v3_10290, -65
  %v1_1029c = add nsw i32 %v6_10294, -65
  %tmp35 = icmp ult i32 %v1_10298, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_10290
  %v5_102a4 = or i32 %v3_10290, 96
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_10290, %bb28
  %v0_102b0 = phi i32 [ %v3_10290, %dec_label_pc_10290 ], [ %v5_102a4, %bb28 ]
  %tmp36 = icmp ult i32 %v1_1029c, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_102ac = or i32 %v6_10294, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_102b0 = phi i32 [ %v6_10294, %bb29 ], [ %v5_102ac, %bb30 ]
  %v9_102b0 = icmp eq i32 %v0_102b0, %v1_102b0
  %v1_102b4 = add i32 %v0_102b4, 1
  %v1_102b4. = select i1 %v9_102b0, i32 %v1_102b4, i32 0
  br i1 %v9_102b0, label %dec_label_pc_102c0, label %dec_label_pc_10284.backedge

dec_label_pc_10284.backedge:                      ; preds = %bb31, %dec_label_pc_102c0
  %tmp32 = icmp slt i32 %v0_10288, 1
  br i1 %tmp32, label %dec_label_pc_102d0, label %dec_label_pc_10290

dec_label_pc_102c0:                               ; preds = %bb31
  %v9_102c0 = icmp eq i32 %v0_102c018, %v1_102b4.
  br i1 %v9_102c0, label %dec_label_pc_102c8, label %dec_label_pc_10284.backedge

dec_label_pc_102c8:                               ; preds = %dec_label_pc_102c0
  %v2_102c8 = sub i32 %v5_10290, %tmp20
  ret i32 %v2_102c8

dec_label_pc_102d0:                               ; preds = %dec_label_pc_10284.backedge, %dec_label_pc_1027c
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_102b4., { 1, 0 }
  uselistorder i32 %v0_10290, { 1, 0 }
  uselistorder i32 %v0_102b4, { 1, 0 }
  uselistorder i8 %v3_10250, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_10284.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_10290, { 1, 0 }
}

define i32 @function_102d8() local_unnamed_addr {
dec_label_pc_102d8:
  %v0_102d8 = load i32, i32* @r1, align 4
  %v1_102d8 = add i32 %v0_102d8, -1
  store i32 %v1_102d8, i32* @r2, align 4
  %v7_102d8 = icmp eq i32 %v0_102d8, 1
  br i1 %v7_102d8, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_102d8
  %v2_102dc = load i32, i32* @r0, align 4
  ret i32 %v2_102dc

bb82:                                             ; preds = %dec_label_pc_102d8
  %v2_102d8 = icmp eq i32 %v0_102d8, 0
  br i1 %v2_102d8, label %dec_label_pc_103c0, label %dec_label_pc_102e4

dec_label_pc_102e4:                               ; preds = %bb82
  %v0_102e4 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_102e4, %v0_102d8
  br i1 %tmp, label %dec_label_pc_102ec, label %dec_label_pc_10378

dec_label_pc_102ec:                               ; preds = %dec_label_pc_102e4
  %v2_102ec = and i32 %v1_102d8, %v0_102d8
  %v4_102ec = icmp eq i32 %v2_102ec, 0
  br i1 %v4_102ec, label %dec_label_pc_10384, label %dec_label_pc_102f4

dec_label_pc_102f4:                               ; preds = %dec_label_pc_102ec
  %v3_102f4 = icmp ult i32 %v0_102d8, 536870912
  br i1 %v3_102f4, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_102f4
  %v4_102f8 = mul i32 %v0_102d8, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_102f4, %.thread
  %v0_10318.pr36.ph = phi i32 [ %v4_102f8, %.thread ], [ %v0_102d8, %dec_label_pc_102f4 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_102f4 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_10318.pr36 = phi i32 [ %v4_1030c, %bb85 ], [ %v0_10318.pr36.ph, %.preheader.preheader ]
  %v1_10310 = phi i32 [ %v4_10310, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_10304 = icmp ugt i32 %v0_10318.pr36, 268435455
  br i1 %v2_10304, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_10318thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_10308 = icmp ult i32 %v0_10318.pr36, %v0_102e4
  br i1 %v4_10308, label %bb84, label %dec_label_pc_10318thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_1030c = and i32 %v0_10318.pr36, 268435456
  %v3_1030c = icmp eq i32 %v2_1030c, 0
  %v4_1030c = mul i32 %v0_10318.pr36, 16
  br i1 %v3_1030c, label %bb85, label %dec_label_pc_10318.loopexit

bb85:                                             ; preds = %bb84
  %v2_10310 = and i32 %v1_10310, 268435456
  %v3_10310 = icmp eq i32 %v2_10310, 0
  %v4_10310 = mul i32 %v1_10310, 16
  br i1 %v3_10310, label %.preheader, label %dec_label_pc_10318thread-pre-split.loopexit.loopexit

dec_label_pc_10318thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_1032448.ph = phi i32 [ %v1_10310, %bb83 ], [ %v4_10310, %bb85 ]
  %v0_10318.pr38.ph = phi i32 [ %v0_10318.pr36, %bb83 ], [ %v4_1030c, %bb85 ]
  br label %dec_label_pc_10318thread-pre-split.loopexit

dec_label_pc_10318thread-pre-split.loopexit:      ; preds = %dec_label_pc_10318thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1032448 = phi i32 [ %v1_10310, %.thread2 ], [ %v1_1032448.ph, %dec_label_pc_10318thread-pre-split.loopexit.loopexit ]
  %v0_10318.pr38 = phi i32 [ %v0_10318.pr36, %.thread2 ], [ %v0_10318.pr38.ph, %dec_label_pc_10318thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10318thread-pre-split

dec_label_pc_10318thread-pre-split:               ; preds = %dec_label_pc_10318thread-pre-split.loopexit, %bb87
  %v1_1032446 = phi i32 [ %v1_1032448, %dec_label_pc_10318thread-pre-split.loopexit ], [ %v3_10324, %bb87 ]
  %v0_10318.pr = phi i32 [ %v0_10318.pr38, %dec_label_pc_10318thread-pre-split.loopexit ], [ %v3_10320, %bb87 ]
  br label %dec_label_pc_10318

dec_label_pc_10318.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_10318

dec_label_pc_10318:                               ; preds = %dec_label_pc_10318.loopexit, %dec_label_pc_10318thread-pre-split
  %v1_10324 = phi i32 [ %v1_1032446, %dec_label_pc_10318thread-pre-split ], [ %v1_10310, %dec_label_pc_10318.loopexit ]
  %v1_10320 = phi i32 [ %v0_10318.pr, %dec_label_pc_10318thread-pre-split ], [ %v4_1030c, %dec_label_pc_10318.loopexit ]
  %v2_10318 = icmp slt i32 %v1_10320, 0
  br i1 %v2_10318, label %dec_label_pc_1032c, label %bb86

bb86:                                             ; preds = %dec_label_pc_10318
  %v4_1031c = icmp ult i32 %v1_10320, %v0_102e4
  br i1 %v4_1031c, label %bb87, label %dec_label_pc_1032c

bb87:                                             ; preds = %bb86
  %v3_10320 = mul i32 %v1_10320, 2
  %v2_10324 = icmp slt i32 %v1_10324, 0
  %v3_10324 = mul i32 %v1_10324, 2
  br i1 %v2_10324, label %dec_label_pc_1032c, label %dec_label_pc_10318thread-pre-split

dec_label_pc_1032c:                               ; preds = %bb86, %dec_label_pc_10318, %bb87
  %v2_1033859 = phi i32 [ %v3_10324, %bb87 ], [ %v1_10324, %bb86 ], [ %v1_10324, %dec_label_pc_10318 ]
  %v1_1033051 = phi i32 [ %v3_10320, %bb87 ], [ %v1_10320, %bb86 ], [ %v1_10320, %dec_label_pc_10318 ]
  store i32 0, i32* @r2, align 4
  br label %dec_label_pc_10330

dec_label_pc_10330:                               ; preds = %.thread11, %dec_label_pc_1032c
  %v1_10364 = phi i32 [ %v4_10364, %.thread11 ], [ %v2_1033859, %dec_label_pc_1032c ]
  %v1_10338 = phi i32 [ %v0_10370, %.thread11 ], [ 0, %dec_label_pc_1032c ]
  %v1_10368 = phi i32 [ %v4_10368, %.thread11 ], [ %v1_1033051, %dec_label_pc_1032c ]
  %v1_10334 = phi i32 [ %v0_10360, %.thread11 ], [ %v0_102e4, %dec_label_pc_1032c ]
  %v3_10330 = icmp ult i32 %v1_10334, %v1_10368
  br i1 %v3_10330, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_10330
  %v3_10334 = sub i32 %v1_10334, %v1_10368
  %v3_10338 = or i32 %v1_10338, %v1_10364
  store i32 %v3_10338, i32* @r2, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10330, %bb88
  %v1_10340 = phi i32 [ %v1_10334, %dec_label_pc_10330 ], [ %v3_10334, %bb88 ]
  %v1_10344 = phi i32 [ %v1_10338, %dec_label_pc_10330 ], [ %v3_10338, %bb88 ]
  %v4_1033c = udiv i32 %v1_10368, 2
  %v6_1033c = icmp ult i32 %v1_10340, %v4_1033c
  br i1 %v6_1033c, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_10340 = urem i32 %v1_10368, 2
  %v4_10340 = icmp eq i32 %v3_10340, 0
  %v6_10340 = sub i32 %v1_10340, %v4_1033c
  br i1 %v4_10340, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10344 = udiv i32 %v1_10364, 2
  %v6_10344 = or i32 %v1_10344, %v5_10344
  store i32 %v6_10344, i32* @r2, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_1034c = phi i32 [ %v6_10340, %bb89 ], [ %v1_10340, %.thread7 ], [ %v6_10340, %bb90 ]
  %v1_10350 = phi i32 [ %v1_10344, %bb89 ], [ %v1_10344, %.thread7 ], [ %v6_10344, %bb90 ]
  %v4_10348 = udiv i32 %v1_10368, 4
  %v6_10348 = icmp ult i32 %v1_1034c, %v4_10348
  br i1 %v6_10348, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_1034c = and i32 %v1_10368, 2
  %v4_1034c = icmp eq i32 %v3_1034c, 0
  %v6_1034c = sub i32 %v1_1034c, %v4_10348
  br i1 %v4_1034c, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_10350 = udiv i32 %v1_10364, 4
  %v6_10350 = or i32 %v1_10350, %v5_10350
  store i32 %v6_10350, i32* @r2, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_10358 = phi i32 [ %v6_1034c, %bb91 ], [ %v1_1034c, %.thread8 ], [ %v6_1034c, %bb92 ]
  %v1_1035c = phi i32 [ %v1_10350, %bb91 ], [ %v1_10350, %.thread8 ], [ %v6_10350, %bb92 ]
  %v4_10354 = udiv i32 %v1_10368, 8
  %v6_10354 = icmp ult i32 %v1_10358, %v4_10354
  br i1 %v6_10354, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_10358 = and i32 %v1_10368, 4
  %v4_10358 = icmp eq i32 %v3_10358, 0
  %v6_10358 = sub i32 %v1_10358, %v4_10354
  br i1 %v4_10358, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_1035c = udiv i32 %v1_10364, 8
  %v6_1035c = or i32 %v1_1035c, %v5_1035c
  store i32 %v6_1035c, i32* @r2, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_10370 = phi i32 [ %v1_1035c, %bb93 ], [ %v1_1035c, %.thread9 ], [ %v6_1035c, %bb94 ]
  %v0_10360 = phi i32 [ %v6_10358, %bb93 ], [ %v1_10358, %.thread9 ], [ %v6_10358, %bb94 ]
  %v2_10360 = icmp eq i32 %v0_10360, 0
  br i1 %v2_10360, label %dec_label_pc_10370, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_10364, 16
  br i1 %tmp142, label %dec_label_pc_10370, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_10364 = udiv i32 %v1_10364, 16
  %v4_10368 = udiv i32 %v1_10368, 16
  br label %dec_label_pc_10330

dec_label_pc_10370:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_10370

dec_label_pc_10378:                               ; preds = %dec_label_pc_102e4
  %v9_102e4 = icmp eq i32 %v0_102e4, %v0_102d8
  %. = zext i1 %v9_102e4 to i32
  ret i32 %.

dec_label_pc_10384:                               ; preds = %dec_label_pc_102ec
  %v2_10384 = icmp ugt i32 %v0_102d8, 65535
  br i1 %v2_10384, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_10384
  %v2_10388 = and i32 %v0_102d8, 32768
  %v3_10388 = icmp eq i32 %v2_10388, 0
  %v4_10388 = udiv i32 %v0_102d8, 65536
  br i1 %v3_10388, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_10384
  %v0_1039465 = phi i32 [ %v0_102d8, %dec_label_pc_10384 ], [ %v4_10388, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_10398 = phi i32 [ %v0_1039465, %.thread16 ], [ %v4_10388, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  store i32 %storemerge, i32* @r2, align 4
  %v2_10394 = icmp ugt i32 %v1_10398, 255
  br i1 %v2_10394, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_10398 = and i32 %v1_10398, 128
  %v3_10398 = icmp eq i32 %v2_10398, 0
  %v4_10398 = udiv i32 %v1_10398, 256
  br i1 %v3_10398, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_1039c = or i32 %storemerge, 8
  store i32 %v2_1039c, i32* @r2, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_103a8 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_1039c, %bb102 ]
  %v1_103a4 = phi i32 [ %v1_10398, %bb100 ], [ %v4_10398, %bb101 ], [ %v4_10398, %bb102 ]
  %v2_103a0 = icmp ugt i32 %v1_103a4, 15
  br i1 %v2_103a0, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_103a4 = and i32 %v1_103a4, 8
  %v3_103a4 = icmp eq i32 %v2_103a4, 0
  %v4_103a4 = udiv i32 %v1_103a4, 16
  br i1 %v3_103a4, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_103a8 = add nsw i32 %v1_103a8, 4
  store i32 %v2_103a8, i32* @r2, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_103b0 = phi i32 [ %v1_103a8, %.thread17 ], [ %v1_103a8, %bb103 ], [ %v2_103a8, %bb104 ]
  %v5_103b4 = phi i32 [ %v1_103a4, %.thread17 ], [ %v4_103a4, %bb103 ], [ %v4_103a4, %bb104 ]
  %v2_103ac = icmp ugt i32 %v5_103b4, 3
  %v7_103ac = icmp eq i32 %v5_103b4, 4
  %v2_103b0 = xor i1 %v7_103ac, true
  %v3_103b0 = and i1 %v2_103ac, %v2_103b0
  br i1 %v3_103b0, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_103b0 = add nsw i32 %v4_103b0, 3
  store i32 %v5_103b0, i32* @r2, align 4
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_103b4 = phi i32 [ %v4_103b0, %.thread18 ], [ %v5_103b0, %bb105 ]
  %v2_103b4 = xor i1 %v2_103ac, true
  %v3_103b4 = or i1 %v7_103ac, %v2_103b4
  br i1 %v3_103b4, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_103b4 = udiv i32 %v5_103b4, 2
  %v9_103b4 = add i32 %v4_103b4, %v8_103b4
  store i32 %v9_103b4, i32* @r2, align 4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_103b8 = phi i32 [ %v4_103b4, %bb106 ], [ %v9_103b4, %bb107 ]
  %v6_103b8 = lshr i32 %v0_102e4, %v1_103b8
  ret i32 %v6_103b8

dec_label_pc_103c0:                               ; preds = %bb82
  %v0_103c0 = load i32, i32* @lr, align 4
  %v0_103c4 = call i32 @function_10598()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_103c0)
  %v6_103d0 = load i32, i32* @r1, align 4
  %v9_103d0 = load i32, i32* @lr, align 4
  %v0_103d4 = call i32 @function_102d8()
  store i32 %v6_103d0, i32* @r2, align 4
  store i32 %v9_103d0, i32* @lr, align 4
  ret i32 %v0_103d4

; uselistorder directives
  uselistorder i32 %v4_103b4, { 1, 0 }
  uselistorder i1 %v7_103ac, { 1, 0 }
  uselistorder i32 %v4_103a4, { 1, 0 }
  uselistorder i32 %v1_103a4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_1039c, { 1, 0 }
  uselistorder i32 %v4_10398, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10398, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10388, { 1, 0 }
  uselistorder i32 %v0_10360, { 1, 0 }
  uselistorder i32 %v4_10354, { 1, 0 }
  uselistorder i32 %v1_1035c, { 1, 2, 0 }
  uselistorder i32 %v4_10348, { 1, 0 }
  uselistorder i32 %v1_10350, { 1, 2, 0 }
  uselistorder i32 %v4_1033c, { 1, 0 }
  uselistorder i32 %v1_10344, { 1, 2, 0 }
  uselistorder i32 %v1_10368, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10338, { 1, 0 }
  uselistorder i32 %v1_10364, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10324, { 1, 0 }
  uselistorder i32 %v3_10320, { 1, 0 }
  uselistorder i32 %v1_10320, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10324, { 1, 2, 0, 3 }
  uselistorder i32 %v4_10310, { 1, 0 }
  uselistorder i32 %v4_1030c, { 2, 1, 0 }
  uselistorder i32 %v1_10310, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10318.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_102e4, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_102d8, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 15, { 8, 9, 2, 10, 3, 4, 11, 5, 12, 6, 13, 0, 14, 15, 7, 16, 17, 18, 19, 1, 20 }
  uselistorder i32 65535, { 88, 0, 1, 11, 41, 21, 20, 23, 42, 22, 43, 13, 12, 2, 25, 44, 24, 45, 47, 14, 46, 3, 48, 49, 26, 50, 27, 51, 28, 52, 53, 29, 54, 56, 15, 55, 4, 57, 58, 59, 60, 31, 61, 30, 62, 64, 16, 63, 5, 65, 66, 67, 68, 32, 69, 33, 70, 34, 71, 72, 17, 6, 73, 35, 74, 36, 75, 77, 18, 76, 7, 8, 78, 79, 38, 80, 37, 81, 83, 19, 82, 9, 10, 84, 85, 40, 86, 39, 87 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_10370, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_1032c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10318thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_103e8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_103e8:
  store i32 %arg1, i32* @r0, align 4
  %v1_103e8 = add i32 %arg2, -1
  %v2_103e8 = icmp eq i32 %arg2, 0
  br i1 %v2_103e8, label %dec_label_pc_104a4, label %dec_label_pc_103f0

dec_label_pc_103f0:                               ; preds = %dec_label_pc_103e8
  %v7_103e8 = icmp eq i32 %arg2, 1
  br i1 %v7_103e8, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_103f0
  %v1_103f0 = load i32, i32* @r0, align 4
  %v10_103f0 = icmp eq i32 %v1_103f0, %arg2
  br i1 %v10_103f0, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_103f0, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_103f0 = icmp ult i32 %v1_103f0, %arg2
  br i1 %v4_103f0, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_103f8 = and i32 %v1_103e8, %arg2
  %v8_103f8 = icmp eq i32 %v6_103f8, 0
  br i1 %v8_103f8, label %.thread67, label %dec_label_pc_10408.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_103fc = phi i32 [ %v1_103f0, %bb75 ], [ 0, %.thread65 ]
  %v3_103fc = and i32 %v1_103fc, %v1_103e8
  br label %bb76

dec_label_pc_10408.preheader:                     ; preds = %bb75
  %v2_1040899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1040899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_10498, %bb74, %bb89, %bb84, %dec_label_pc_10468, %.thread67
  %v5_10400 = phi i32 [ %v1_103f0, %bb74 ], [ %v3_103fc, %.thread67 ], [ %v1_10444.v6_10444.v6_1044c.v6_10454, %dec_label_pc_10468 ], [ 0, %bb84 ], [ %v1_1049c, %dec_label_pc_10498 ], [ %v2_10498, %bb89 ]
  ret i32 %v5_10400

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_10408.preheader
  %v0_1041c.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_10408.preheader ], [ %v4_10410, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_10408.preheader ], [ %v2_1041411, %.thread1.thread9 ]
  br label %dec_label_pc_1041cthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_10408.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1041411, %.thread1.thread9 ], [ 0, %dec_label_pc_10408.preheader ]
  %v0_1041c.pr33100 = phi i32 [ %v4_10410, %.thread1.thread9 ], [ %arg2, %dec_label_pc_10408.preheader ]
  %v4_1040c = icmp ult i32 %v0_1041c.pr33100, %v1_103f0
  br i1 %v4_1040c, label %bb78, label %dec_label_pc_1041cthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_10410 = and i32 %v0_1041c.pr33100, 268435456
  %v3_10410 = icmp eq i32 %v2_10410, 0
  %v4_10410 = mul i32 %v0_1041c.pr33100, 16
  br i1 %v3_10410, label %.thread1.thread9, label %dec_label_pc_1041c.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1041411 = add i32 %storemerge101, 4
  %v2_10408 = icmp ugt i32 %v4_10410, 268435455
  br i1 %v2_10408, label %.thread, label %bb77

dec_label_pc_1041cthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_1041cthread-pre-split.loopexit

dec_label_pc_1041cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1041cthread-pre-split.loopexit.loopexit, %.thread
  %v0_1041c.pr3398 = phi i32 [ %v0_1041c.pr33.lcssa, %.thread ], [ %v0_1041c.pr33100, %dec_label_pc_1041cthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_1041cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1041cthread-pre-split

dec_label_pc_1041cthread-pre-split:               ; preds = %.thread4, %dec_label_pc_1041cthread-pre-split.loopexit
  %v1_1042839 = phi i32 [ %storemerge95, %dec_label_pc_1041cthread-pre-split.loopexit ], [ %v2_10428, %.thread4 ]
  %v0_1041c.pr = phi i32 [ %v0_1041c.pr3398, %dec_label_pc_1041cthread-pre-split.loopexit ], [ %v3_10424, %.thread4 ]
  br label %dec_label_pc_1041c

dec_label_pc_1041c.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_1041c

dec_label_pc_1041c:                               ; preds = %dec_label_pc_1041c.loopexit, %dec_label_pc_1041cthread-pre-split
  %v0_10430.pr = phi i32 [ %v1_1042839, %dec_label_pc_1041cthread-pre-split ], [ %storemerge101, %dec_label_pc_1041c.loopexit ]
  %v1_10424 = phi i32 [ %v0_1041c.pr, %dec_label_pc_1041cthread-pre-split ], [ %v4_10410, %dec_label_pc_1041c.loopexit ]
  %v2_1041c = icmp slt i32 %v1_10424, 0
  br i1 %v2_1041c, label %dec_label_pc_10430, label %bb79

bb79:                                             ; preds = %dec_label_pc_1041c
  %v4_10420 = icmp ult i32 %v1_10424, %v1_103f0
  br i1 %v4_10420, label %.thread4, label %dec_label_pc_10430

.thread4:                                         ; preds = %bb79
  %v3_10424 = mul i32 %v1_10424, 2
  %v2_10428 = add i32 %v0_10430.pr, 1
  br label %dec_label_pc_1041cthread-pre-split

dec_label_pc_10430:                               ; preds = %bb79, %dec_label_pc_1041c
  %v2_10430 = add i32 %v0_10430.pr, -3
  %v5_10434 = icmp slt i32 %v0_10430.pr, 3
  br i1 %v5_10434, label %dec_label_pc_10474, label %dec_label_pc_10438

dec_label_pc_10438:                               ; preds = %dec_label_pc_10430, %bb83
  %v6_10460 = phi i32 [ %v0_10468, %bb83 ], [ %v2_10430, %dec_label_pc_10430 ]
  %v1_1043c = phi i32 [ %v1_10444.v6_10444.v6_1044c.v6_10454, %bb83 ], [ %v1_103f0, %dec_label_pc_10430 ]
  %v3_1045c12 = phi i32 [ %v3_1045c, %bb83 ], [ %v1_10424, %dec_label_pc_10430 ]
  %v3_10438 = icmp ult i32 %v1_1043c, %v3_1045c12
  %v3_1043c = select i1 %v3_10438, i32 0, i32 %v3_1045c12
  %v1_10444 = sub i32 %v1_1043c, %v3_1043c
  %v4_10440 = udiv i32 %v3_1045c12, 2
  %v6_10440 = icmp ult i32 %v1_10444, %v4_10440
  %v6_10444 = select i1 %v6_10440, i32 0, i32 %v4_10440
  %v1_10444.v6_10444 = sub i32 %v1_10444, %v6_10444
  %.demorgan = and i1 %v3_10438, %v6_10440
  %v4_10448 = udiv i32 %v3_1045c12, 4
  %v6_10448 = icmp ult i32 %v1_10444.v6_10444, %v4_10448
  %v6_1044c = select i1 %v6_10448, i32 0, i32 %v4_10448
  %v1_10444.v6_10444.v6_1044c = sub i32 %v1_10444.v6_10444, %v6_1044c
  %.demorgan71 = and i1 %.demorgan, %v6_10448
  %v4_10450 = udiv i32 %v3_1045c12, 8
  %v6_10450 = icmp ult i32 %v1_10444.v6_10444.v6_1044c, %v4_10450
  %v6_10454 = select i1 %v6_10450, i32 0, i32 %v4_10450
  %v1_10444.v6_10444.v6_1044c.v6_10454 = sub i32 %v1_10444.v6_10444.v6_1044c, %v6_10454
  %.demorgan72 = and i1 %.demorgan71, %v6_10450
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_10438
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_10438, %bb80
  %v2_10458 = add i32 %v1_10444.v6_10444.v6_1044c.v6_10454, -1
  %v4_10458 = sub i32 0, %v1_10444.v6_10444.v6_1044c.v6_10454
  %v5_10458 = and i32 %v1_10444.v6_10444.v6_1044c.v6_10454, %v4_10458
  %v3_1045c = udiv i32 %v3_1045c12, 16
  %v5_10460 = icmp slt i32 %v1_10444.v6_10444.v6_1044c.v6_10454, 1
  br i1 %v5_10460, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_10460 = add i32 %v6_10460, -4
  %v9_10460 = sub i32 3, %v6_10460
  %v10_10460 = and i32 %v9_10460, %v6_10460
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_10468 = phi i32 [ %v6_10460, %bb81 ], [ %v7_10460, %bb82 ]
  %v0_1046415.in = phi i32 [ %v2_10458, %bb81 ], [ %v7_10460, %bb82 ]
  %v1_1046414.in = phi i32 [ %v5_10458, %bb81 ], [ %v10_10460, %bb82 ]
  %v1_1046414 = icmp slt i32 %v1_1046414.in, 0
  %v0_1046415 = icmp slt i32 %v0_1046415.in, 0
  %v2_10464 = xor i1 %v0_1046415, %v1_1046414
  br i1 %v2_10464, label %dec_label_pc_10468, label %dec_label_pc_10438

dec_label_pc_10468:                               ; preds = %bb83
  %v1_10468 = urem i32 %v0_10468, 4
  %v2_10468 = icmp eq i32 %v1_10468, 0
  br i1 %v2_10468, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_10468
  %v3_1046c = icmp eq i32 %v1_10444.v6_10444.v6_1044c.v6_10454, 0
  br i1 %v3_1046c, label %bb76, label %dec_label_pc_10474

dec_label_pc_10474:                               ; preds = %bb84, %dec_label_pc_10430
  %v0_10488 = phi i32 [ %v3_1045c, %bb84 ], [ %v1_10424, %dec_label_pc_10430 ]
  %v1_10484 = phi i32 [ %v1_10444.v6_10444.v6_1044c.v6_10454, %bb84 ], [ %v1_103f0, %dec_label_pc_10430 ]
  %v0_10474 = phi i32 [ %v0_10468, %bb84 ], [ %v2_10430, %dec_label_pc_10430 ]
  %v5_10478 = icmp slt i32 %v0_10474, -2
  br i1 %v5_10478, label %dec_label_pc_10498, label %dec_label_pc_1047c

dec_label_pc_1047c:                               ; preds = %dec_label_pc_10474
  %v8_10474 = icmp eq i32 %v0_10474, -2
  br i1 %v8_10474, label %dec_label_pc_1048c, label %dec_label_pc_10480

dec_label_pc_10480:                               ; preds = %dec_label_pc_1047c
  %v3_10480 = icmp ult i32 %v1_10484, %v0_10488
  br i1 %v3_10480, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_10480
  %v2_10480 = sub i32 %v1_10484, %v0_10488
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_10480, %bb85
  %v0_1048c52 = phi i32 [ %v1_10484, %dec_label_pc_10480 ], [ %v2_10480, %bb85 ]
  %v3_10488 = udiv i32 %v0_10488, 2
  br label %dec_label_pc_1048c

dec_label_pc_1048c:                               ; preds = %dec_label_pc_1047c, %bb86
  %v0_10494 = phi i32 [ %v0_10488, %dec_label_pc_1047c ], [ %v3_10488, %bb86 ]
  %v1_10490 = phi i32 [ %v1_10484, %dec_label_pc_1047c ], [ %v0_1048c52, %bb86 ]
  %v3_1048c = icmp ult i32 %v1_10490, %v0_10494
  br i1 %v3_1048c, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_1048c
  %v2_1048c = sub i32 %v1_10490, %v0_10494
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_1048c, %bb87
  %v0_1049855 = phi i32 [ %v1_10490, %dec_label_pc_1048c ], [ %v2_1048c, %bb87 ]
  %v3_10494 = udiv i32 %v0_10494, 2
  br label %dec_label_pc_10498

dec_label_pc_10498:                               ; preds = %dec_label_pc_10474, %bb88
  %v2_1049c = phi i32 [ %v0_10488, %dec_label_pc_10474 ], [ %v3_10494, %bb88 ]
  %v1_1049c = phi i32 [ %v1_10484, %dec_label_pc_10474 ], [ %v0_1049855, %bb88 ]
  %v3_10498 = icmp ult i32 %v1_1049c, %v2_1049c
  br i1 %v3_10498, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_10498
  %v2_10498 = sub i32 %v1_1049c, %v2_1049c
  br label %bb76

dec_label_pc_104a4:                               ; preds = %dec_label_pc_103e8
  %v0_104a4 = load i32, i32* @lr, align 4
  %v0_104a8 = call i32 @function_10598()
  call void @__pseudo_branch(i32 %v0_104a4)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1049c, { 1, 2, 0 }
  uselistorder i32 %v0_10488, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10468, { 1, 0, 2 }
  uselistorder i32 %v7_10460, { 1, 0 }
  uselistorder i32 %v3_1045c, { 1, 0 }
  uselistorder i32 %v1_10444.v6_10444.v6_1044c.v6_10454, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_10450, { 1, 0 }
  uselistorder i32 %v4_10448, { 1, 0 }
  uselistorder i32 %v4_10440, { 1, 0 }
  uselistorder i32 %v6_10460, { 3, 0, 2, 1 }
  uselistorder i32 %v2_10430, { 1, 0 }
  uselistorder i32 %v1_10424, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_10410, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1041c.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_103f0, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_10498, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_1048c, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_10438, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_104b4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_104b4:
  store i32 %arg1, i32* @r0, align 4
  %v2_104b4 = icmp eq i32 %arg2, 0
  br i1 %v2_104b4, label %dec_label_pc_10588, label %dec_label_pc_104bc

dec_label_pc_104bc:                               ; preds = %dec_label_pc_104b4
  %v1_104b4 = icmp slt i32 %arg2, 0
  br i1 %v1_104b4, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_104bc
  %v2_104bc = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_104bc, %bb
  %v4_104d4 = phi i32 [ %arg2, %dec_label_pc_104bc ], [ %v2_104bc, %bb ]
  %v0_104c0 = load i32, i32* @r0, align 4
  %v1_104c0 = icmp slt i32 %v0_104c0, 0
  br i1 %v1_104c0, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_104c4 = sub i32 0, %v0_104c0
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_104cc = phi i32 [ %v0_104c0, %bb79 ], [ %v2_104c4, %bb80 ]
  %v1_104c8 = add i32 %v4_104d4, -1
  %v7_104c8 = icmp eq i32 %v4_104d4, 1
  br i1 %v7_104c8, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_104cc = icmp eq i32 %v1_104cc, %v4_104d4
  br i1 %v10_104cc, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_104cc = icmp ult i32 %v1_104cc, %v4_104d4
  br i1 %v4_104cc, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_104d4 = and i32 %v1_104c8, %v4_104d4
  %v8_104d4 = icmp eq i32 %v6_104d4, 0
  br i1 %v8_104d4, label %.thread72, label %dec_label_pc_104e4.preheader

dec_label_pc_104e4.preheader:                     ; preds = %bb84
  %v2_104e4109 = icmp ugt i32 %v4_104d4, 268435455
  br i1 %v2_104e4109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_104d864 = phi i32 [ %v1_104cc, %bb84 ], [ 0, %.thread70 ]
  %v3_104d8 = and i32 %v1_104d864, %v1_104c8
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_104e4.preheader
  %v0_104f8.pr35.lcssa = phi i32 [ %v4_104d4, %dec_label_pc_104e4.preheader ], [ %v4_104ec, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_104e4.preheader ], [ %v2_104f09, %.thread2.thread7 ]
  br label %dec_label_pc_104f8thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_104e4.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_104f09, %.thread2.thread7 ], [ 0, %dec_label_pc_104e4.preheader ]
  %v0_104f8.pr35110 = phi i32 [ %v4_104ec, %.thread2.thread7 ], [ %v4_104d4, %dec_label_pc_104e4.preheader ]
  %v4_104e8 = icmp ult i32 %v0_104f8.pr35110, %v1_104cc
  br i1 %v4_104e8, label %bb86, label %dec_label_pc_104f8thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_104ec = and i32 %v0_104f8.pr35110, 268435456
  %v3_104ec = icmp eq i32 %v2_104ec, 0
  %v4_104ec = mul i32 %v0_104f8.pr35110, 16
  br i1 %v3_104ec, label %.thread2.thread7, label %dec_label_pc_104f8.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_104f09 = add i32 %storemerge111, 4
  %v2_104e4 = icmp ugt i32 %v4_104ec, 268435455
  br i1 %v2_104e4, label %.thread1, label %bb85

dec_label_pc_104f8thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_104f8thread-pre-split.loopexit

dec_label_pc_104f8thread-pre-split.loopexit:      ; preds = %dec_label_pc_104f8thread-pre-split.loopexit.loopexit, %.thread1
  %v0_104f8.pr35108 = phi i32 [ %v0_104f8.pr35.lcssa, %.thread1 ], [ %v0_104f8.pr35110, %dec_label_pc_104f8thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_104f8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_104f8thread-pre-split

dec_label_pc_104f8thread-pre-split:               ; preds = %.thread4, %dec_label_pc_104f8thread-pre-split.loopexit
  %v1_1050441 = phi i32 [ %storemerge105, %dec_label_pc_104f8thread-pre-split.loopexit ], [ %v2_10504, %.thread4 ]
  %v2_104fc36 = phi i32 [ %v1_104cc, %dec_label_pc_104f8thread-pre-split.loopexit ], [ %v2_104fc, %.thread4 ]
  %v0_104f8.pr = phi i32 [ %v0_104f8.pr35108, %dec_label_pc_104f8thread-pre-split.loopexit ], [ %v3_10500, %.thread4 ]
  br label %dec_label_pc_104f8

dec_label_pc_104f8.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_104f8

dec_label_pc_104f8:                               ; preds = %dec_label_pc_104f8.loopexit, %dec_label_pc_104f8thread-pre-split
  %v0_1050c.pr = phi i32 [ %v1_1050441, %dec_label_pc_104f8thread-pre-split ], [ %storemerge111, %dec_label_pc_104f8.loopexit ]
  %v2_104fc = phi i32 [ %v2_104fc36, %dec_label_pc_104f8thread-pre-split ], [ %v1_104cc, %dec_label_pc_104f8.loopexit ]
  %v1_10500 = phi i32 [ %v0_104f8.pr, %dec_label_pc_104f8thread-pre-split ], [ %v4_104ec, %dec_label_pc_104f8.loopexit ]
  %v2_104f8 = icmp slt i32 %v1_10500, 0
  br i1 %v2_104f8, label %dec_label_pc_1050c, label %bb87

bb87:                                             ; preds = %dec_label_pc_104f8
  %v4_104fc = icmp ult i32 %v1_10500, %v2_104fc
  br i1 %v4_104fc, label %.thread4, label %dec_label_pc_1050c

.thread4:                                         ; preds = %bb87
  %v3_10500 = mul i32 %v1_10500, 2
  %v2_10504 = add i32 %v0_1050c.pr, 1
  br label %dec_label_pc_104f8thread-pre-split

dec_label_pc_1050c:                               ; preds = %bb87, %dec_label_pc_104f8
  %v2_1050c = add i32 %v0_1050c.pr, -3
  %v5_10510 = icmp slt i32 %v0_1050c.pr, 3
  br i1 %v5_10510, label %dec_label_pc_10550, label %dec_label_pc_10514

dec_label_pc_10514:                               ; preds = %dec_label_pc_1050c, %bb91
  %v6_1053c = phi i32 [ %v0_10544, %bb91 ], [ %v2_1050c, %dec_label_pc_1050c ]
  %v1_10518 = phi i32 [ %v1_10520.v6_10520.v6_10528.v6_10530, %bb91 ], [ %v2_104fc, %dec_label_pc_1050c ]
  %v3_1053810 = phi i32 [ %v3_10538, %bb91 ], [ %v1_10500, %dec_label_pc_1050c ]
  %v3_10514 = icmp ult i32 %v1_10518, %v3_1053810
  %v3_10518 = select i1 %v3_10514, i32 0, i32 %v3_1053810
  %v1_10520 = sub i32 %v1_10518, %v3_10518
  %v4_1051c = udiv i32 %v3_1053810, 2
  %v6_1051c = icmp ult i32 %v1_10520, %v4_1051c
  %v6_10520 = select i1 %v6_1051c, i32 0, i32 %v4_1051c
  %v1_10520.v6_10520 = sub i32 %v1_10520, %v6_10520
  %.demorgan = and i1 %v3_10514, %v6_1051c
  %v4_10524 = udiv i32 %v3_1053810, 4
  %v6_10524 = icmp ult i32 %v1_10520.v6_10520, %v4_10524
  %v6_10528 = select i1 %v6_10524, i32 0, i32 %v4_10524
  %v1_10520.v6_10520.v6_10528 = sub i32 %v1_10520.v6_10520, %v6_10528
  %.demorgan76 = and i1 %.demorgan, %v6_10524
  %v4_1052c = udiv i32 %v3_1053810, 8
  %v6_1052c = icmp ult i32 %v1_10520.v6_10520.v6_10528, %v4_1052c
  %v6_10530 = select i1 %v6_1052c, i32 0, i32 %v4_1052c
  %v1_10520.v6_10520.v6_10528.v6_10530 = sub i32 %v1_10520.v6_10520.v6_10528, %v6_10530
  %.demorgan77 = and i1 %.demorgan76, %v6_1052c
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_10514
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_10514, %bb88
  %v2_10534 = add i32 %v1_10520.v6_10520.v6_10528.v6_10530, -1
  %v4_10534 = sub i32 0, %v1_10520.v6_10520.v6_10528.v6_10530
  %v5_10534 = and i32 %v1_10520.v6_10520.v6_10528.v6_10530, %v4_10534
  %v3_10538 = udiv i32 %v3_1053810, 16
  %v5_1053c = icmp slt i32 %v1_10520.v6_10520.v6_10528.v6_10530, 1
  br i1 %v5_1053c, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_1053c = add i32 %v6_1053c, -4
  %v9_1053c = sub i32 3, %v6_1053c
  %v10_1053c = and i32 %v9_1053c, %v6_1053c
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_10544 = phi i32 [ %v6_1053c, %bb89 ], [ %v7_1053c, %bb90 ]
  %v0_1054013.in = phi i32 [ %v2_10534, %bb89 ], [ %v7_1053c, %bb90 ]
  %v1_1054012.in = phi i32 [ %v5_10534, %bb89 ], [ %v10_1053c, %bb90 ]
  %v1_1054012 = icmp slt i32 %v1_1054012.in, 0
  %v0_1054013 = icmp slt i32 %v0_1054013.in, 0
  %v2_10540 = xor i1 %v0_1054013, %v1_1054012
  br i1 %v2_10540, label %dec_label_pc_10544, label %dec_label_pc_10514

dec_label_pc_10544:                               ; preds = %bb91
  %v1_10544 = urem i32 %v0_10544, 4
  %v2_10544 = icmp eq i32 %v1_10544, 0
  br i1 %v2_10544, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_10544
  %v3_10548 = icmp eq i32 %v1_10520.v6_10520.v6_10528.v6_10530, 0
  br i1 %v3_10548, label %.thread6, label %dec_label_pc_10550

dec_label_pc_10550:                               ; preds = %bb92, %dec_label_pc_1050c
  %v0_10564 = phi i32 [ %v3_10538, %bb92 ], [ %v1_10500, %dec_label_pc_1050c ]
  %v1_10560 = phi i32 [ %v1_10520.v6_10520.v6_10528.v6_10530, %bb92 ], [ %v2_104fc, %dec_label_pc_1050c ]
  %v0_10550 = phi i32 [ %v0_10544, %bb92 ], [ %v2_1050c, %dec_label_pc_1050c ]
  %v5_10554 = icmp slt i32 %v0_10550, -2
  br i1 %v5_10554, label %dec_label_pc_10574, label %dec_label_pc_10558

dec_label_pc_10558:                               ; preds = %dec_label_pc_10550
  %v8_10550 = icmp eq i32 %v0_10550, -2
  br i1 %v8_10550, label %dec_label_pc_10568, label %dec_label_pc_1055c

dec_label_pc_1055c:                               ; preds = %dec_label_pc_10558
  %v3_1055c = icmp ult i32 %v1_10560, %v0_10564
  br i1 %v3_1055c, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_1055c
  %v2_1055c = sub i32 %v1_10560, %v0_10564
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_1055c, %bb93
  %v0_1056854 = phi i32 [ %v1_10560, %dec_label_pc_1055c ], [ %v2_1055c, %bb93 ]
  %v3_10564 = udiv i32 %v0_10564, 2
  br label %dec_label_pc_10568

dec_label_pc_10568:                               ; preds = %dec_label_pc_10558, %bb94
  %v0_10570 = phi i32 [ %v0_10564, %dec_label_pc_10558 ], [ %v3_10564, %bb94 ]
  %v1_1056c = phi i32 [ %v1_10560, %dec_label_pc_10558 ], [ %v0_1056854, %bb94 ]
  %v3_10568 = icmp ult i32 %v1_1056c, %v0_10570
  br i1 %v3_10568, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_10568
  %v2_10568 = sub i32 %v1_1056c, %v0_10570
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_10568, %bb95
  %v0_1057457 = phi i32 [ %v1_1056c, %dec_label_pc_10568 ], [ %v2_10568, %bb95 ]
  %v3_10570 = udiv i32 %v0_10570, 2
  br label %dec_label_pc_10574

dec_label_pc_10574:                               ; preds = %dec_label_pc_10550, %bb96
  %v2_10578 = phi i32 [ %v0_10564, %dec_label_pc_10550 ], [ %v3_10570, %bb96 ]
  %v1_10578 = phi i32 [ %v1_10560, %dec_label_pc_10550 ], [ %v0_1057457, %bb96 ]
  %v3_10574 = icmp ult i32 %v1_10578, %v2_10578
  br i1 %v3_10574, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_10574
  %v2_10574 = sub i32 %v1_10578, %v2_10578
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_10574, %bb83, %.thread72, %dec_label_pc_10544, %bb92, %bb97
  %v1_10580 = phi i32 [ %v1_10520.v6_10520.v6_10528.v6_10530, %dec_label_pc_10544 ], [ 0, %bb92 ], [ %v1_10578, %dec_label_pc_10574 ], [ %v2_10574, %bb97 ], [ %v3_104d8, %.thread72 ], [ %v1_104cc, %bb83 ]
  br i1 %v1_104c0, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_10580 = sub i32 0, %v1_10580
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_10584 = phi i32 [ %v1_10580, %.thread6 ], [ %v2_10580, %bb98 ]
  ret i32 %v1_10584

dec_label_pc_10588:                               ; preds = %dec_label_pc_104b4
  %v0_10588 = load i32, i32* @lr, align 4
  %v0_1058c = call i32 @function_10598()
  call void @__pseudo_branch(i32 %v0_10588)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_10564, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10544, { 1, 0, 2 }
  uselistorder i32 %v7_1053c, { 1, 0 }
  uselistorder i32 %v3_10538, { 1, 0 }
  uselistorder i32 %v1_10520.v6_10520.v6_10528.v6_10530, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_1052c, { 1, 0 }
  uselistorder i32 %v4_10524, { 1, 0 }
  uselistorder i32 %v4_1051c, { 1, 0 }
  uselistorder i32 %v6_1053c, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1050c, { 1, 0 }
  uselistorder i32 %v1_10500, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_104fc, { 1, 0, 3, 2 }
  uselistorder i32 %v4_104ec, { 1, 0, 3, 2 }
  uselistorder i32 %v0_104f8.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_104cc, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_104d4, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_10598, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_10574, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10568, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_10514, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_10598() local_unnamed_addr {
dec_label_pc_10598:
  %v1_10598 = load i32, i32* @r0, align 4
  ret i32 %v1_10598
}

define i32 @function_1059c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1059c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_1059c = load i32, i32* @r2, align 4
  %v1_105ac = add i32 %arg2, -12
  store i32 %v6_1059c, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_105ac, 2
  br i1 %tmp, label %dec_label_pc_105d4, label %dec_label_pc_105cc

dec_label_pc_105cc:                               ; preds = %dec_label_pc_1059c
  %v0_105cc = call i32 @function_10610()
  br label %dec_label_pc_10600

dec_label_pc_105d4:                               ; preds = %dec_label_pc_1059c
  %v2_105dc = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_105dc, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_105dc, -4095
  br i1 %tmp8, label %dec_label_pc_10600, label %dec_label_pc_105ec

dec_label_pc_105ec:                               ; preds = %dec_label_pc_105d4
  %v0_105ec = call i32 @function_1095c()
  %v0_105f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_105f0 = sub i32 0, %v0_105f0
  %v2_105f4 = inttoptr i32 %v0_105ec to i32*
  store i32 %v1_105f0, i32* %v2_105f4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10600

dec_label_pc_10600:                               ; preds = %dec_label_pc_105ec, %dec_label_pc_105d4, %dec_label_pc_105cc
  %storemerge = phi i32 [ %v0_105cc, %dec_label_pc_105cc ], [ %v2_105dc, %dec_label_pc_105d4 ], [ -1, %dec_label_pc_105ec ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_105dc, { 1, 0, 2 }
}

define i32 @function_10610() local_unnamed_addr {
dec_label_pc_10610:
  %r4.global-to-local = alloca i32, align 4
  %v0_10630 = load i32, i32* @r0, align 4
  store i32 %v0_10630, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10630, -4095
  br i1 %tmp, label %dec_label_pc_1064c, label %dec_label_pc_1063c

dec_label_pc_1063c:                               ; preds = %dec_label_pc_10610
  %v0_1063c = call i32 @function_1095c()
  %v0_10640 = load i32, i32* %r4.global-to-local, align 4
  %v1_10640 = sub i32 0, %v0_10640
  %v2_10644 = inttoptr i32 %v0_1063c to i32*
  store i32 %v1_10640, i32* %v2_10644, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1064c

dec_label_pc_1064c:                               ; preds = %dec_label_pc_10610, %dec_label_pc_1063c
  %v0_1064c = phi i32 [ %v0_10630, %dec_label_pc_10610 ], [ -1, %dec_label_pc_1063c ]
  ret i32 %v0_1064c

; uselistorder directives
  uselistorder i32 %v0_10630, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1064c, { 1, 0 }
}

define i32 @function_10660(i32 %arg1) local_unnamed_addr {
dec_label_pc_10660:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10660 = load i32, i32* @r4, align 4
  store i32 %v3_10660, i32* %stack_var_-8, align 4
  %v1_10664 = call i32 @close(i32 %arg1)
  store i32 %v1_10664, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_10664, -4095
  br i1 %tmp, label %dec_label_pc_10684, label %dec_label_pc_10674

dec_label_pc_10674:                               ; preds = %dec_label_pc_10660
  %v0_10674 = call i32 @function_1095c()
  %v0_10678 = load i32, i32* %r4.global-to-local, align 4
  %v1_10678 = sub i32 0, %v0_10678
  %v2_1067c = inttoptr i32 %v0_10674 to i32*
  store i32 %v1_10678, i32* %v2_1067c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10684

dec_label_pc_10684:                               ; preds = %dec_label_pc_10660, %dec_label_pc_10674
  %v0_10684 = phi i32 [ %v1_10664, %dec_label_pc_10660 ], [ -1, %dec_label_pc_10674 ]
  %v2_10688 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10688, i32* @r4, align 4
  ret i32 %v0_10684

; uselistorder directives
  uselistorder i32 %v1_10664, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10684, { 1, 0 }
}

define i32 @function_1068c() local_unnamed_addr {
dec_label_pc_1068c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1068c = load i32, i32* @r4, align 4
  store i32 %v3_1068c, i32* %stack_var_-8, align 4
  %v0_10690 = call i32 @fork()
  store i32 %v0_10690, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10690, -4095
  br i1 %tmp, label %dec_label_pc_106b0, label %dec_label_pc_106a0

dec_label_pc_106a0:                               ; preds = %dec_label_pc_1068c
  %v0_106a0 = call i32 @function_1095c()
  %v0_106a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_106a4 = sub i32 0, %v0_106a4
  %v2_106a8 = inttoptr i32 %v0_106a0 to i32*
  store i32 %v1_106a4, i32* %v2_106a8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_106b0

dec_label_pc_106b0:                               ; preds = %dec_label_pc_1068c, %dec_label_pc_106a0
  %v0_106b0 = phi i32 [ %v0_10690, %dec_label_pc_1068c ], [ -1, %dec_label_pc_106a0 ]
  %v2_106b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_106b4, i32* @r4, align 4
  ret i32 %v0_106b0

; uselistorder directives
  uselistorder i32 %v0_10690, { 1, 0, 2 }
  uselistorder label %dec_label_pc_106b0, { 1, 0 }
}

define i32 @function_106b8() local_unnamed_addr {
dec_label_pc_106b8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_106b8 = load i32, i32* @r4, align 4
  store i32 %v3_106b8, i32* %stack_var_-8, align 4
  %v0_106bc = call i32 @getpid()
  store i32 %v0_106bc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_106bc, -4095
  br i1 %tmp, label %dec_label_pc_106dc, label %dec_label_pc_106cc

dec_label_pc_106cc:                               ; preds = %dec_label_pc_106b8
  %v0_106cc = call i32 @function_1095c()
  %v0_106d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_106d0 = sub i32 0, %v0_106d0
  %v2_106d4 = inttoptr i32 %v0_106cc to i32*
  store i32 %v1_106d0, i32* %v2_106d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_106dc

dec_label_pc_106dc:                               ; preds = %dec_label_pc_106b8, %dec_label_pc_106cc
  %v0_106dc = phi i32 [ %v0_106bc, %dec_label_pc_106b8 ], [ -1, %dec_label_pc_106cc ]
  %v2_106e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_106e0, i32* @r4, align 4
  ret i32 %v0_106dc

; uselistorder directives
  uselistorder i32 %v0_106bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_106dc, { 1, 0 }
}

define i32 @function_106e4() local_unnamed_addr {
dec_label_pc_106e4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_106e4 = load i32, i32* @r4, align 4
  store i32 %v3_106e4, i32* %stack_var_-8, align 4
  %v0_106e8 = call i32 @getppid()
  store i32 %v0_106e8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_106e8, -4095
  br i1 %tmp, label %dec_label_pc_10708, label %dec_label_pc_106f8

dec_label_pc_106f8:                               ; preds = %dec_label_pc_106e4
  %v0_106f8 = call i32 @function_1095c()
  %v0_106fc = load i32, i32* %r4.global-to-local, align 4
  %v1_106fc = sub i32 0, %v0_106fc
  %v2_10700 = inttoptr i32 %v0_106f8 to i32*
  store i32 %v1_106fc, i32* %v2_10700, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10708

dec_label_pc_10708:                               ; preds = %dec_label_pc_106e4, %dec_label_pc_106f8
  %v0_10708 = phi i32 [ %v0_106e8, %dec_label_pc_106e4 ], [ -1, %dec_label_pc_106f8 ]
  %v2_1070c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1070c, i32* @r4, align 4
  ret i32 %v0_10708

; uselistorder directives
  uselistorder i32 %v0_106e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10708, { 1, 0 }
}

define i32 @function_10710(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10710:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10710 = load i32, i32* @r3, align 4
  store i32 %v9_10710, i32* %stack_var_-4, align 4
  %v2_1071c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_1071c, i32* @r3, align 4
  %v2_1072c = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_1072c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_1072c, -4095
  br i1 %tmp, label %dec_label_pc_1074c, label %dec_label_pc_1073c

dec_label_pc_1073c:                               ; preds = %dec_label_pc_10710
  %v0_1073c = call i32 @function_1095c()
  %v0_10740 = load i32, i32* %r4.global-to-local, align 4
  %v1_10740 = sub i32 0, %v0_10740
  store i32 %v1_10740, i32* @r3, align 4
  %v2_10744 = inttoptr i32 %v0_1073c to i32*
  store i32 %v1_10740, i32* %v2_10744, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1074c

dec_label_pc_1074c:                               ; preds = %dec_label_pc_10710, %dec_label_pc_1073c
  %v0_1074c = phi i32 [ %v2_1072c, %dec_label_pc_10710 ], [ -1, %dec_label_pc_1073c ]
  ret i32 %v0_1074c

; uselistorder directives
  uselistorder i32 %v2_1072c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_1074c, { 1, 0 }
}

define i32 @function_10760(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10760:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10760 = load i32, i32* @r4, align 4
  store i32 %v3_10760, i32* %stack_var_-8, align 4
  %v2_10764 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_10768 = icmp eq i32 %v2_10764, -4096
  store i1 %v7_10768, i1* @cpsr_z, align 1
  store i32 %v2_10764, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10764, -4095
  br i1 %tmp, label %dec_label_pc_10784, label %dec_label_pc_10774

dec_label_pc_10774:                               ; preds = %dec_label_pc_10760
  %v0_10774 = call i32 @function_1095c()
  %v0_10778 = load i32, i32* %r4.global-to-local, align 4
  %v1_10778 = sub i32 0, %v0_10778
  %v2_1077c = inttoptr i32 %v0_10774 to i32*
  store i32 %v1_10778, i32* %v2_1077c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10784

dec_label_pc_10784:                               ; preds = %dec_label_pc_10760, %dec_label_pc_10774
  %v0_10784 = phi i32 [ %v2_10764, %dec_label_pc_10760 ], [ -1, %dec_label_pc_10774 ]
  %v2_10788 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10788, i32* @r4, align 4
  ret i32 %v0_10784

; uselistorder directives
  uselistorder i32 %v2_10764, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_10784, { 1, 0 }
}

define i32 @function_1078c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1078c:
  %r4.global-to-local = alloca i32, align 4
  %v6_1078c = load i32, i32* @r2, align 4
  %v1_1079c = and i32 %arg2, 64
  store i32 %v1_1079c, i32* @r3, align 4
  %v2_1079c = icmp eq i32 %v1_1079c, 0
  br i1 %v2_1079c, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_1078c
  store i32 %v6_1078c, i32* @r3, align 4
  %phitmp = urem i32 %v6_1078c, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1078c, %bb
  %v0_107ac = phi i32 [ 0, %dec_label_pc_1078c ], [ %phitmp, %bb ]
  store i32 %v0_107ac, i32* @r2, align 4
  %v4_107b4 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_107b8 = icmp eq i32 %v4_107b4, -4096
  store i1 %v7_107b8, i1* @cpsr_z, align 1
  store i32 %v4_107b4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_107b4, -4095
  br i1 %tmp, label %dec_label_pc_107d4, label %dec_label_pc_107c4

dec_label_pc_107c4:                               ; preds = %.thread1
  %v0_107c4 = call i32 @function_1095c()
  %v0_107c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_107c8 = sub i32 0, %v0_107c8
  store i32 %v1_107c8, i32* @r3, align 4
  %v2_107cc = inttoptr i32 %v0_107c4 to i32*
  store i32 %v1_107c8, i32* %v2_107cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_107d4

dec_label_pc_107d4:                               ; preds = %.thread1, %dec_label_pc_107c4
  %v0_107d4 = phi i32 [ %v4_107b4, %.thread1 ], [ -1, %dec_label_pc_107c4 ]
  ret i32 %v0_107d4

; uselistorder directives
  uselistorder i32 %v4_107b4, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_107d4, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_107e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_107e8:
  store i32 %arg1, i32* @r2, align 4
  %v0_107f0 = load i32, i32* @r0, align 4
  %v2_107f0 = inttoptr i32 %v0_107f0 to i8*
  %v3_107f0 = call i32 @function_1078c(i8* %v2_107f0, i32 577)
  %v0_107f4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_107f4, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_107e8
  %v6_107f4 = and i32 %v3_107f0, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_107e8, %bb
  %v7_107f4 = phi i32 [ %v3_107f0, %dec_label_pc_107e8 ], [ %v6_107f4, %bb ]
  ret i32 %v7_107f4

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_107f8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_107f8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_107f8 = load i32, i32* @r4, align 4
  store i32 %v3_107f8, i32* %stack_var_-8, align 4
  %v2_10800 = load i32, i32* @r2, align 4
  %v3_10800 = load i32, i32* @r3, align 4
  %v4_10800 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_10800, i32 %v3_10800, i32 0)
  store i32 %v4_10800, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10800, -4095
  br i1 %tmp, label %dec_label_pc_10820, label %dec_label_pc_10810

dec_label_pc_10810:                               ; preds = %dec_label_pc_107f8
  %v0_10810 = call i32 @function_1095c()
  %v0_10814 = load i32, i32* %r4.global-to-local, align 4
  %v1_10814 = sub i32 0, %v0_10814
  %v2_10818 = inttoptr i32 %v0_10810 to i32*
  store i32 %v1_10814, i32* %v2_10818, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10820

dec_label_pc_10820:                               ; preds = %dec_label_pc_107f8, %dec_label_pc_10810
  %v0_10820 = phi i32 [ %v4_10800, %dec_label_pc_107f8 ], [ -1, %dec_label_pc_10810 ]
  %v2_10824 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10824, i32* @r4, align 4
  ret i32 %v0_10820

; uselistorder directives
  uselistorder i32 %v4_10800, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10820, { 1, 0 }
}

define i32 @function_10828(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10828:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10828 = load i32, i32* @r4, align 4
  store i32 %v3_10828, i32* %stack_var_-8, align 4
  %v4_1082c = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_1082c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_1082c, -4095
  br i1 %tmp, label %dec_label_pc_1084c, label %dec_label_pc_1083c

dec_label_pc_1083c:                               ; preds = %dec_label_pc_10828
  %v0_1083c = call i32 @function_1095c()
  %v0_10840 = load i32, i32* %r4.global-to-local, align 4
  %v1_10840 = sub i32 0, %v0_10840
  %v2_10844 = inttoptr i32 %v0_1083c to i32*
  store i32 %v1_10840, i32* %v2_10844, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1084c

dec_label_pc_1084c:                               ; preds = %dec_label_pc_10828, %dec_label_pc_1083c
  %v0_1084c = phi i32 [ %v4_1082c, %dec_label_pc_10828 ], [ -1, %dec_label_pc_1083c ]
  %v2_10850 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10850, i32* @r4, align 4
  ret i32 %v0_1084c

; uselistorder directives
  uselistorder i32 %v4_1082c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1084c, { 1, 0 }
}

define i32 @function_10854(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10854:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10854 = load i32, i32* @r4, align 4
  store i32 %v3_10854, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1087c, label %dec_label_pc_1086c

dec_label_pc_1086c:                               ; preds = %dec_label_pc_10854
  %v0_1086c = call i32 @function_1095c()
  %v0_10870 = load i32, i32* %r4.global-to-local, align 4
  %v1_10870 = sub i32 0, %v0_10870
  %v2_10874 = inttoptr i32 %v0_1086c to i32*
  store i32 %v1_10870, i32* %v2_10874, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10880.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1087c

dec_label_pc_1087c:                               ; preds = %dec_label_pc_10854, %dec_label_pc_1086c
  %v2_10880 = phi i32 [ %v3_10854, %dec_label_pc_10854 ], [ %v2_10880.pre, %dec_label_pc_1086c ]
  %v0_1087c = phi i32 [ %arg1, %dec_label_pc_10854 ], [ -1, %dec_label_pc_1086c ]
  store i32 %v2_10880, i32* @r4, align 4
  ret i32 %v0_1087c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1087c, { 1, 0 }
}

define i32 @function_10884(i32 %arg1) local_unnamed_addr {
dec_label_pc_10884:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10884 = load i32, i32* @r4, align 4
  store i32 %v3_10884, i32* %stack_var_-8, align 4
  %v0_10888 = call i32 @setsid()
  store i32 %v0_10888, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10888, -4095
  br i1 %tmp, label %dec_label_pc_108a8, label %dec_label_pc_10898

dec_label_pc_10898:                               ; preds = %dec_label_pc_10884
  %v0_10898 = call i32 @function_1095c()
  %v0_1089c = load i32, i32* %r4.global-to-local, align 4
  %v1_1089c = sub i32 0, %v0_1089c
  %v2_108a0 = inttoptr i32 %v0_10898 to i32*
  store i32 %v1_1089c, i32* %v2_108a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_108a8

dec_label_pc_108a8:                               ; preds = %dec_label_pc_10884, %dec_label_pc_10898
  %v0_108a8 = phi i32 [ %v0_10888, %dec_label_pc_10884 ], [ -1, %dec_label_pc_10898 ]
  %v2_108ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_108ac, i32* @r4, align 4
  ret i32 %v0_108a8

; uselistorder directives
  uselistorder i32 %v0_10888, { 1, 0, 2 }
  uselistorder label %dec_label_pc_108a8, { 1, 0 }
}

define i32 @function_108b0(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_108b0:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_108b0 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_108b0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_108b0
  %v3_108b85 = load i32, i32* @r4, align 4
  store i32 %v3_108b85, i32* %stack_var_-8, align 4
  br label %dec_label_pc_108d8

bb:                                               ; preds = %dec_label_pc_108b0
  %v3_108b8 = load i32, i32* @r4, align 4
  store i32 %v3_108b8, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_108d8, label %dec_label_pc_108c4

dec_label_pc_108c4:                               ; preds = %bb
  %v0_108c4 = call i32 @function_1095c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_108d0 = inttoptr i32 %v0_108c4 to i32*
  store i32 22, i32* %v2_108d0, align 4
  %v0_108fc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_108fc

dec_label_pc_108d8:                               ; preds = %.thread, %bb
  %v7_108d8 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_108d8, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_108d8, -4095
  br i1 %tmp13, label %dec_label_pc_108f8, label %dec_label_pc_108e8

dec_label_pc_108e8:                               ; preds = %dec_label_pc_108d8
  %v0_108e8 = call i32 @function_1095c()
  %v0_108ec = load i32, i32* %r4.global-to-local, align 4
  %v1_108ec = sub i32 0, %v0_108ec
  %v2_108f0 = inttoptr i32 %v0_108e8 to i32*
  store i32 %v1_108ec, i32* %v2_108f0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_108f8

dec_label_pc_108f8:                               ; preds = %dec_label_pc_108d8, %dec_label_pc_108e8
  %v0_108f8 = phi i32 [ %v7_108d8, %dec_label_pc_108d8 ], [ -1, %dec_label_pc_108e8 ]
  store i32 %v0_108f8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_108fc

dec_label_pc_108fc:                               ; preds = %dec_label_pc_108c4, %dec_label_pc_108f8
  %v0_108fc = phi i32 [ %v0_108fc.pre, %dec_label_pc_108c4 ], [ %v0_108f8, %dec_label_pc_108f8 ]
  %v2_10900 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10900, i32* @r4, align 4
  ret i32 %v0_108fc

; uselistorder directives
  uselistorder i32 %v7_108d8, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_108fc, { 1, 0 }
  uselistorder label %dec_label_pc_108f8, { 1, 0 }
  uselistorder label %dec_label_pc_108d8, { 1, 0 }
}

define i32 @function_10904(i32* %arg1) local_unnamed_addr {
dec_label_pc_10904:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10904 = load i32, i32* @r4, align 4
  store i32 %v3_10904, i32* %stack_var_-8, align 4
  %v2_10908 = call i32 @time(i32* %arg1)
  store i32 %v2_10908, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10908, -4095
  br i1 %tmp, label %dec_label_pc_10928, label %dec_label_pc_10918

dec_label_pc_10918:                               ; preds = %dec_label_pc_10904
  %v0_10918 = call i32 @function_1095c()
  %v0_1091c = load i32, i32* %r4.global-to-local, align 4
  %v1_1091c = sub i32 0, %v0_1091c
  %v2_10920 = inttoptr i32 %v0_10918 to i32*
  store i32 %v1_1091c, i32* %v2_10920, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10928

dec_label_pc_10928:                               ; preds = %dec_label_pc_10904, %dec_label_pc_10918
  %v0_10928 = phi i32 [ %v2_10908, %dec_label_pc_10904 ], [ -1, %dec_label_pc_10918 ]
  %v2_1092c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1092c, i32* @r4, align 4
  ret i32 %v0_10928

; uselistorder directives
  uselistorder i32 %v2_10908, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10928, { 1, 0 }
}

define i32 @function_10930(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10930:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10930 = load i32, i32* @r4, align 4
  store i32 %v3_10930, i32* %stack_var_-8, align 4
  %v4_10934 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_10934, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_10934, -4095
  br i1 %tmp, label %dec_label_pc_10954, label %dec_label_pc_10944

dec_label_pc_10944:                               ; preds = %dec_label_pc_10930
  %v0_10944 = call i32 @function_1095c()
  %v0_10948 = load i32, i32* %r4.global-to-local, align 4
  %v1_10948 = sub i32 0, %v0_10948
  %v2_1094c = inttoptr i32 %v0_10944 to i32*
  store i32 %v1_10948, i32* %v2_1094c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10954

dec_label_pc_10954:                               ; preds = %dec_label_pc_10930, %dec_label_pc_10944
  %v0_10954 = phi i32 [ %v4_10934, %dec_label_pc_10930 ], [ -1, %dec_label_pc_10944 ]
  %v2_10958 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10958, i32* @r4, align 4
  ret i32 %v0_10954

; uselistorder directives
  uselistorder i32 %v4_10934, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10954, { 1, 0 }
}

define i32 @function_1095c() local_unnamed_addr {
dec_label_pc_1095c:
  ret i32 ptrtoint (i32* @global_var_1b224.617 to i32)
}

define i32 @function_10968(i32 %arg1) local_unnamed_addr {
dec_label_pc_10968:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_10974 = bitcast i32* %stack_var_-20 to %tms*
  %v2_10974 = call i32 @function_11cdc(%tms* %v1_10974)
  %v2_1097c = load i32, i32* %stack_var_-20, align 4
  %v2_10980 = add i32 %v2_1097c, %tmp
  %v2_10988 = mul i32 %v2_10980, 10000
  %v1_1098c = and i32 %v2_10988, 2147483632
  ret i32 %v1_1098c

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_10998(i32 %arg1) local_unnamed_addr {
dec_label_pc_10998:
  %v0_10998 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10998, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10998
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10998, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_109a0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_109a0:
  %v0_109a0 = call i32 @function_11d10()
  ret i32 %v0_109a0
}

define i32 @function_109b0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_109b0:
  %v0_109b0 = call i32 @function_11d10()
  ret i32 %v0_109b0

; uselistorder directives
  uselistorder i32 ()* @function_11d10, { 1, 0 }
}

define i32 @function_109c0(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_109c0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_109c0 = sub i32 %arg1, %tmp
  %v1_109c4 = add i32 %v2_109c0, -1
  store i32 %v1_109c4, i32* %r2.global-to-local, align 4
  %v2_109c84 = load i8, i8* %arg2, align 1
  %v5_109c86 = add i32 %tmp, 1
  store i32 %v5_109c86, i32* %r1.global-to-local, align 4
  %v2_109cc7 = icmp eq i8 %v2_109c84, 0
  store i1 %v2_109cc7, i1* %cpsr_z.global-to-local, align 1
  %v5_109d08 = inttoptr i32 %arg1 to i8*
  store i8 %v2_109c84, i8* %v5_109d08, align 1
  %v0_109d49 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_109d49, label %dec_label_pc_109d8, label %dec_label_pc_109c8.dec_label_pc_109c8_crit_edge

dec_label_pc_109c8.dec_label_pc_109c8_crit_edge:  ; preds = %dec_label_pc_109c0, %dec_label_pc_109c8.dec_label_pc_109c8_crit_edge
  %v0_109c8.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_109d0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_109c8 = inttoptr i32 %v0_109c8.pre to i8*
  %v2_109c8 = load i8, i8* %v1_109c8, align 1
  %v5_109c8 = add i32 %v0_109c8.pre, 1
  store i32 %v5_109c8, i32* %r1.global-to-local, align 4
  %v2_109cc = icmp eq i8 %v2_109c8, 0
  store i1 %v2_109cc, i1* %cpsr_z.global-to-local, align 1
  %v4_109d0 = add i32 %v5_109c8, %v3_109d0.pre
  %v5_109d0 = inttoptr i32 %v4_109d0 to i8*
  store i8 %v2_109c8, i8* %v5_109d0, align 1
  %v0_109d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_109d4, label %dec_label_pc_109d8, label %dec_label_pc_109c8.dec_label_pc_109c8_crit_edge

dec_label_pc_109d8:                               ; preds = %dec_label_pc_109c8.dec_label_pc_109c8_crit_edge, %dec_label_pc_109c0
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 2, 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_109c8.dec_label_pc_109c8_crit_edge, { 1, 0 }
}

define i32 @function_109dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_109dc:
  %stack_var_-8 = alloca i32, align 4
  %v2_109e0 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_109e0, i32* @r1, align 4
  %v0_109e8 = call i32 @function_12240()
  %v2_109ec = icmp eq i32 %v0_109e8, 0
  br i1 %v2_109ec, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_109dc
  %v3_109f4 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_109dc, %bb
  %v5_109fc = phi i32 [ -1, %dec_label_pc_109dc ], [ %v3_109f4, %bb ]
  ret i32 %v5_109fc

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_10a00(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10a00:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a00 = load i32, i32* @r4, align 4
  store i32 %v3_10a00, i32* %stack_var_-8, align 4
  %v5_10a04 = inttoptr i32 %arg3 to i32*
  %v6_10a04 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_10a04)
  store i32 %v6_10a04, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_10a04, -4095
  br i1 %tmp, label %dec_label_pc_10a24, label %dec_label_pc_10a14

dec_label_pc_10a14:                               ; preds = %dec_label_pc_10a00
  %v0_10a14 = call i32 @function_1095c()
  %v0_10a18 = load i32, i32* %r4.global-to-local, align 4
  %v1_10a18 = sub i32 0, %v0_10a18
  %v2_10a1c = inttoptr i32 %v0_10a14 to i32*
  store i32 %v1_10a18, i32* %v2_10a1c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10a24

dec_label_pc_10a24:                               ; preds = %dec_label_pc_10a00, %dec_label_pc_10a14
  %v0_10a24 = phi i32 [ %v6_10a04, %dec_label_pc_10a00 ], [ -1, %dec_label_pc_10a14 ]
  %v2_10a28 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10a28, i32* @r4, align 4
  ret i32 %v0_10a24

; uselistorder directives
  uselistorder i32 %v6_10a04, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a24, { 1, 0 }
}

define i32 @function_10a2c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10a2c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a2c = load i32, i32* @r4, align 4
  store i32 %v3_10a2c, i32* %stack_var_-8, align 4
  %v5_10a30 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_10a30, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10a30, -4095
  br i1 %tmp, label %dec_label_pc_10a50, label %dec_label_pc_10a40

dec_label_pc_10a40:                               ; preds = %dec_label_pc_10a2c
  %v0_10a40 = call i32 @function_1095c()
  %v0_10a44 = load i32, i32* %r4.global-to-local, align 4
  %v1_10a44 = sub i32 0, %v0_10a44
  %v2_10a48 = inttoptr i32 %v0_10a40 to i32*
  store i32 %v1_10a44, i32* %v2_10a48, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10a50

dec_label_pc_10a50:                               ; preds = %dec_label_pc_10a2c, %dec_label_pc_10a40
  %v0_10a50 = phi i32 [ %v5_10a30, %dec_label_pc_10a2c ], [ -1, %dec_label_pc_10a40 ]
  %v2_10a54 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10a54, i32* @r4, align 4
  ret i32 %v0_10a50

; uselistorder directives
  uselistorder i32 %v5_10a30, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a50, { 1, 0 }
}

define i32 @function_10a58(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10a58:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a58 = load i32, i32* @r4, align 4
  store i32 %v3_10a58, i32* %stack_var_-8, align 4
  %v5_10a5c = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_10a5c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10a5c, -4095
  br i1 %tmp, label %dec_label_pc_10a7c, label %dec_label_pc_10a6c

dec_label_pc_10a6c:                               ; preds = %dec_label_pc_10a58
  %v0_10a6c = call i32 @function_1095c()
  %v0_10a70 = load i32, i32* %r4.global-to-local, align 4
  %v1_10a70 = sub i32 0, %v0_10a70
  %v2_10a74 = inttoptr i32 %v0_10a6c to i32*
  store i32 %v1_10a70, i32* %v2_10a74, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10a7c

dec_label_pc_10a7c:                               ; preds = %dec_label_pc_10a58, %dec_label_pc_10a6c
  %v0_10a7c = phi i32 [ %v5_10a5c, %dec_label_pc_10a58 ], [ -1, %dec_label_pc_10a6c ]
  %v2_10a80 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10a80, i32* @r4, align 4
  ret i32 %v0_10a7c

; uselistorder directives
  uselistorder i32 %v5_10a5c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a7c, { 1, 0 }
}

define i32 @function_10a84(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10a84:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a84 = load i32, i32* @r4, align 4
  store i32 %v3_10a84, i32* %stack_var_-8, align 4
  %v5_10a88 = inttoptr i32 %arg3 to i32*
  %v6_10a88 = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_10a88)
  store i32 %v6_10a88, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_10a88, -4095
  br i1 %tmp, label %dec_label_pc_10aa8, label %dec_label_pc_10a98

dec_label_pc_10a98:                               ; preds = %dec_label_pc_10a84
  %v0_10a98 = call i32 @function_1095c()
  %v0_10a9c = load i32, i32* %r4.global-to-local, align 4
  %v1_10a9c = sub i32 0, %v0_10a9c
  %v2_10aa0 = inttoptr i32 %v0_10a98 to i32*
  store i32 %v1_10a9c, i32* %v2_10aa0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10aa8

dec_label_pc_10aa8:                               ; preds = %dec_label_pc_10a84, %dec_label_pc_10a98
  %v0_10aa8 = phi i32 [ %v6_10a88, %dec_label_pc_10a84 ], [ -1, %dec_label_pc_10a98 ]
  %v2_10aac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10aac, i32* @r4, align 4
  ret i32 %v0_10aa8

; uselistorder directives
  uselistorder i32 %v6_10a88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10aa8, { 1, 0 }
}

define i32 @function_10ab0(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10ab0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ab0 = load i32, i32* @r4, align 4
  store i32 %v3_10ab0, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_10ab8 = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_10ab8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10ab8, -4095
  br i1 %tmp, label %dec_label_pc_10ad8, label %dec_label_pc_10ac8

dec_label_pc_10ac8:                               ; preds = %dec_label_pc_10ab0
  %v0_10ac8 = call i32 @function_1095c()
  %v0_10acc = load i32, i32* %r4.global-to-local, align 4
  %v1_10acc = sub i32 0, %v0_10acc
  %v2_10ad0 = inttoptr i32 %v0_10ac8 to i32*
  store i32 %v1_10acc, i32* %v2_10ad0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ad8

dec_label_pc_10ad8:                               ; preds = %dec_label_pc_10ab0, %dec_label_pc_10ac8
  %v0_10ad8 = phi i32 [ %v5_10ab8, %dec_label_pc_10ab0 ], [ -1, %dec_label_pc_10ac8 ]
  %v2_10adc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10adc, i32* @r4, align 4
  ret i32 %v0_10ad8

; uselistorder directives
  uselistorder i32 %v5_10ab8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ad8, { 1, 0 }
}

define i32 @function_10ae0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ae0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ae0 = load i32, i32* @r4, align 4
  store i32 %v3_10ae0, i32* %stack_var_-8, align 4
  %v2_10ae4 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_10ae4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_10ae4, -4095
  br i1 %tmp, label %dec_label_pc_10b04, label %dec_label_pc_10af4

dec_label_pc_10af4:                               ; preds = %dec_label_pc_10ae0
  %v0_10af4 = call i32 @function_1095c()
  %v0_10af8 = load i32, i32* %r4.global-to-local, align 4
  %v1_10af8 = sub i32 0, %v0_10af8
  %v2_10afc = inttoptr i32 %v0_10af4 to i32*
  store i32 %v1_10af8, i32* %v2_10afc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b04

dec_label_pc_10b04:                               ; preds = %dec_label_pc_10ae0, %dec_label_pc_10af4
  %v0_10b04 = phi i32 [ %v2_10ae4, %dec_label_pc_10ae0 ], [ -1, %dec_label_pc_10af4 ]
  %v2_10b08 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10b08, i32* %r4.global-to-local, align 4
  ret i32 %v0_10b04

; uselistorder directives
  uselistorder i32 %v2_10ae4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b04, { 1, 0 }
}

define i32 @function_10b0c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10b0c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b0c = load i32, i32* @r4, align 4
  store i32 %v3_10b0c, i32* %stack_var_-8, align 4
  %v5_10b10 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_10b10, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10b10, -4095
  br i1 %tmp, label %dec_label_pc_10b30, label %dec_label_pc_10b20

dec_label_pc_10b20:                               ; preds = %dec_label_pc_10b0c
  %v0_10b20 = call i32 @function_1095c()
  %v0_10b24 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b24 = sub i32 0, %v0_10b24
  %v2_10b28 = inttoptr i32 %v0_10b20 to i32*
  store i32 %v1_10b24, i32* %v2_10b28, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b30

dec_label_pc_10b30:                               ; preds = %dec_label_pc_10b0c, %dec_label_pc_10b20
  %v0_10b30 = phi i32 [ %v5_10b10, %dec_label_pc_10b0c ], [ -1, %dec_label_pc_10b20 ]
  %v2_10b34 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10b34, i32* @r4, align 4
  ret i32 %v0_10b30

; uselistorder directives
  uselistorder i32 %v5_10b10, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b30, { 1, 0 }
}

define i32 @function_10b38(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10b38:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10b38 = load i32, i32* @r4, align 4
  store i32 %v3_10b38, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_10b44 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_10b44, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10b44, -4095
  br i1 %tmp, label %dec_label_pc_10b64, label %dec_label_pc_10b54

dec_label_pc_10b54:                               ; preds = %dec_label_pc_10b38
  %v0_10b54 = call i32 @function_1095c()
  %v0_10b58 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b58 = sub i32 0, %v0_10b58
  %v2_10b5c = inttoptr i32 %v0_10b54 to i32*
  store i32 %v1_10b58, i32* %v2_10b5c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b64

dec_label_pc_10b64:                               ; preds = %dec_label_pc_10b38, %dec_label_pc_10b54
  %v0_10b64 = phi i32 [ %v5_10b44, %dec_label_pc_10b38 ], [ -1, %dec_label_pc_10b54 ]
  %v2_10b68 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10b68, i32* @r4, align 4
  ret i32 %v0_10b64

; uselistorder directives
  uselistorder i32 %v5_10b44, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b64, { 1, 0 }
}

define i32 @function_10b6c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10b6c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b6c = load i32, i32* @r4, align 4
  store i32 %v3_10b6c, i32* %stack_var_-8, align 4
  %v5_10b70 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_10b70, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10b70, -4095
  br i1 %tmp, label %dec_label_pc_10b90, label %dec_label_pc_10b80

dec_label_pc_10b80:                               ; preds = %dec_label_pc_10b6c
  %v0_10b80 = call i32 @function_1095c()
  %v0_10b84 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b84 = sub i32 0, %v0_10b84
  %v2_10b88 = inttoptr i32 %v0_10b80 to i32*
  store i32 %v1_10b84, i32* %v2_10b88, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b90

dec_label_pc_10b90:                               ; preds = %dec_label_pc_10b6c, %dec_label_pc_10b80
  %v0_10b90 = phi i32 [ %v5_10b70, %dec_label_pc_10b6c ], [ -1, %dec_label_pc_10b80 ]
  %v2_10b94 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10b94, i32* @r4, align 4
  ret i32 %v0_10b90

; uselistorder directives
  uselistorder i32 %v5_10b70, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b90, { 1, 0 }
}

define i32 @function_10b98(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10b98:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10b98 = load i32, i32* @r4, align 4
  store i32 %v3_10b98, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_10ba4 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_10ba4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10ba4, -4095
  br i1 %tmp, label %dec_label_pc_10bc4, label %dec_label_pc_10bb4

dec_label_pc_10bb4:                               ; preds = %dec_label_pc_10b98
  %v0_10bb4 = call i32 @function_1095c()
  %v0_10bb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_10bb8 = sub i32 0, %v0_10bb8
  %v2_10bbc = inttoptr i32 %v0_10bb4 to i32*
  store i32 %v1_10bb8, i32* %v2_10bbc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10bc4

dec_label_pc_10bc4:                               ; preds = %dec_label_pc_10b98, %dec_label_pc_10bb4
  %v0_10bc4 = phi i32 [ %v5_10ba4, %dec_label_pc_10b98 ], [ -1, %dec_label_pc_10bb4 ]
  %v2_10bc8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10bc8, i32* @r4, align 4
  ret i32 %v0_10bc4

; uselistorder directives
  uselistorder i32 %v5_10ba4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10bc4, { 1, 0 }
}

define i32 @function_10bcc(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10bcc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10bcc = load i32, i32* @r4, align 4
  store i32 %v3_10bcc, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_10bd4 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_10bd4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_10bd4, -4095
  br i1 %tmp, label %dec_label_pc_10bf4, label %dec_label_pc_10be4

dec_label_pc_10be4:                               ; preds = %dec_label_pc_10bcc
  %v0_10be4 = call i32 @function_1095c()
  %v0_10be8 = load i32, i32* %r4.global-to-local, align 4
  %v1_10be8 = sub i32 0, %v0_10be8
  %v2_10bec = inttoptr i32 %v0_10be4 to i32*
  store i32 %v1_10be8, i32* %v2_10bec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10bf4

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10bcc, %dec_label_pc_10be4
  %v0_10bf4 = phi i32 [ %v5_10bd4, %dec_label_pc_10bcc ], [ -1, %dec_label_pc_10be4 ]
  %v2_10bf8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10bf8, i32* @r4, align 4
  ret i32 %v0_10bf4

; uselistorder directives
  uselistorder i32 %v5_10bd4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10bf4, { 1, 0 }
}

define i32 @function_10bfc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10bfc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10bfc = load i32, i32* @r4, align 4
  store i32 %v3_10bfc, i32* %stack_var_-8, align 4
  %v3_10c00 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_10c00, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_10c00, -4095
  br i1 %tmp, label %dec_label_pc_10c20, label %dec_label_pc_10c10

dec_label_pc_10c10:                               ; preds = %dec_label_pc_10bfc
  %v0_10c10 = call i32 @function_1095c()
  %v0_10c14 = load i32, i32* %r4.global-to-local, align 4
  %v1_10c14 = sub i32 0, %v0_10c14
  %v2_10c18 = inttoptr i32 %v0_10c10 to i32*
  store i32 %v1_10c14, i32* %v2_10c18, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10c20

dec_label_pc_10c20:                               ; preds = %dec_label_pc_10bfc, %dec_label_pc_10c10
  %v0_10c20 = phi i32 [ %v3_10c00, %dec_label_pc_10bfc ], [ -1, %dec_label_pc_10c10 ]
  %v2_10c24 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10c24, i32* @r4, align 4
  ret i32 %v0_10c20

; uselistorder directives
  uselistorder i32 %v3_10c00, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10c20, { 1, 0 }
}

define i32 @function_10c28(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c28:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_10c44, label %dec_label_pc_10c34

dec_label_pc_10c34:                               ; preds = %dec_label_pc_10c28
  %v8_10c38 = icmp sgt i32 %arg1, 64
  br i1 %v8_10c38, label %dec_label_pc_10c44, label %dec_label_pc_10c3c

dec_label_pc_10c3c:                               ; preds = %dec_label_pc_10c34
  %v0_10c40 = call i32 @function_10d4c()
  br label %dec_label_pc_10c44

dec_label_pc_10c44:                               ; preds = %dec_label_pc_10c34, %dec_label_pc_10c28, %dec_label_pc_10c3c
  %v0_10c44 = call i32 @function_1095c()
  %v2_10c4c = inttoptr i32 %v0_10c44 to i32*
  store i32 22, i32* %v2_10c4c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10c44, { 2, 0, 1 }
}

define i32 @function_10c58(i32 %arg1) local_unnamed_addr {
dec_label_pc_10c58:
  store i32 128, i32* @r2, align 4
  %v0_10c64 = load i32, i32* @r0, align 4
  %v2_10c64 = inttoptr i32 %v0_10c64 to i8*
  %v3_10c64 = call i32 @function_121a0(i8* %v2_10c64, i32 0)
  ret i32 0
}

define i32 @function_10c70(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c70:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10c70 = load i32, i32* @r4, align 4
  store i32 %v3_10c70, i32* %stack_var_-12, align 4
  %v6_10c70 = load i32, i32* @r5, align 4
  %v10_10c70 = ptrtoint i32* %stack_var_-12 to i32
  %v7_10c74 = icmp eq i32 %arg2, -1
  %v0_10c80.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_10c74, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10c70
  br label %dec_label_pc_10c98

bb:                                               ; preds = %dec_label_pc_10c70
  %v2_10c7c = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_10c80.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_10c80.pre, 1
  br i1 %tmp19, label %dec_label_pc_10c98, label %dec_label_pc_10c88

dec_label_pc_10c88:                               ; preds = %bb
  %v7_10c8c = icmp sgt i32 %v0_10c80.pre, 64
  br i1 %v7_10c8c, label %dec_label_pc_10c98, label %bb20

bb20:                                             ; preds = %dec_label_pc_10c88
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_10cbc24 = add i32 %v10_10c70, 124
  store i32 %v5_10cbc24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10cac

dec_label_pc_10c98:                               ; preds = %.thread, %dec_label_pc_10c88, %bb
  %v0_10c98 = call i32 @function_1095c()
  store i32 %v0_10c98, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10ca4 = inttoptr i32 %v0_10c98 to i32*
  store i32 22, i32* %v2_10ca4, align 4
  %v0_10d18.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d18

dec_label_pc_10cac:                               ; preds = %bb20, %dec_label_pc_10cac
  %v5_10cbc25 = phi i32 [ %v5_10cbc24, %bb20 ], [ %v5_10cbc, %dec_label_pc_10cac ]
  %v2_10cb0 = add i32 %v5_10cbc25, -136
  %v3_10cb0 = inttoptr i32 %v2_10cb0 to i32*
  store i32 0, i32* %v3_10cb0, align 4
  %v0_10cb4.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_10cb4 = add i32 %v0_10cb4.pre, -1
  store i32 %v1_10cb4, i32* %r0.global-to-local, align 4
  %v6_10cb4 = icmp slt i32 %v1_10cb4, 0
  %v4_10cbc = mul i32 %v1_10cb4, 4
  %v5_10cbc = add i32 %v4_10cbc, %v10_10c70
  store i32 %v5_10cbc, i32* %r2.global-to-local, align 4
  br i1 %v6_10cb4, label %dec_label_pc_10cc4, label %dec_label_pc_10cac

dec_label_pc_10cc4:                               ; preds = %dec_label_pc_10cac
  %v2_10cc4 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_10cc4, i32* @r5, align 4
  %v2_10cc8 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_10cc8, i32* @r0, align 4
  %v0_10ccc = load i32, i32* @r4, align 4
  store i32 %v0_10ccc, i32* @r1, align 4
  %v0_10cd0 = call i32 @function_10d4c()
  store i32 %v0_10cd0, i32* %r0.global-to-local, align 4
  %v1_10cd4 = icmp slt i32 %v0_10cd0, 0
  br i1 %v1_10cd4, label %dec_label_pc_10d14, label %dec_label_pc_10cdc

dec_label_pc_10cdc:                               ; preds = %dec_label_pc_10cc4
  %v0_10cdc = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1b2fc.620 to i32), i32* %r0.global-to-local, align 4
  %v2_10ce4 = call i32 @function_10d28(i32 ptrtoint (i32* @global_var_1b2fc.620 to i32), i32 %v0_10cdc)
  store i32 %v2_10c7c, i32* %r2.global-to-local, align 4
  %v0_10cfc = load i32, i32* @r4, align 4
  store i32 %v0_10cfc, i32* %r0.global-to-local, align 4
  %v4_10d04 = call i32 @function_11a68(i32 %v0_10cfc, i32* nonnull %stack_var_-152, i32 %v2_10c7c)
  store i32 %v4_10d04, i32* %r0.global-to-local, align 4
  %v1_10d08 = icmp slt i32 %v4_10d04, 0
  br i1 %v1_10d08, label %dec_label_pc_10d14, label %bb23

bb23:                                             ; preds = %dec_label_pc_10cdc
  %v5_10d0c = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_10d0c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d18

dec_label_pc_10d14:                               ; preds = %dec_label_pc_10cdc, %dec_label_pc_10cc4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d18

dec_label_pc_10d18:                               ; preds = %bb23, %dec_label_pc_10c98, %dec_label_pc_10d14
  %v0_10d18 = phi i32 [ %v5_10d0c, %bb23 ], [ %v0_10d18.pre, %dec_label_pc_10c98 ], [ -1, %dec_label_pc_10d14 ]
  store i32 %v0_10d18, i32* %r0.global-to-local, align 4
  %v2_10d20 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10d20, i32* @r4, align 4
  store i32 %v6_10c70, i32* @r5, align 4
  ret i32 %v0_10d18

; uselistorder directives
  uselistorder i32 %v0_10d18, { 1, 0 }
  uselistorder i32 %v5_10cbc, { 1, 0 }
  uselistorder i32 %v1_10cb4, { 0, 2, 1 }
  uselistorder i32 %v2_10c7c, { 1, 0 }
  uselistorder i32 %v0_10c80.pre, { 1, 0, 2 }
  uselistorder i32 %v10_10c70, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 22, { 0, 1, 2, 4, 3 }
  uselistorder i32 64, { 1, 5, 40, 11, 12, 0, 6, 13, 14, 15, 7, 16, 17, 18, 19, 8, 20, 21, 22, 9, 23, 24, 25, 10, 26, 27, 28, 2, 29, 30, 31, 32, 33, 3, 34, 35, 36, 37, 38, 4, 39 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_10d18, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10cac, { 1, 0 }
  uselistorder label %dec_label_pc_10c98, { 1, 2, 0 }
}

define i32 @function_10d28(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10d28:
  %v1_10d28 = add i32 %arg2, -1
  %v3_10d2c = udiv i32 %v1_10d28, 32
  %v4_10d30 = mul nuw nsw i32 %v3_10d2c, 4
  %v5_10d30 = add i32 %v4_10d30, %arg1
  %v6_10d30 = inttoptr i32 %v5_10d30 to i32*
  %v7_10d30 = load i32, i32* %v6_10d30, align 4
  %v1_10d34 = urem i32 %v1_10d28, 32
  %v7_10d3c = shl i32 1, %v1_10d34
  %v8_10d3c = and i32 %v7_10d30, %v7_10d3c
  %v10_10d3c = icmp ne i32 %v8_10d3c, 0
  %. = zext i1 %v10_10d3c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_10d28, { 1, 0 }
}

define i32 @function_10d4c() local_unnamed_addr {
dec_label_pc_10d4c:
  %v0_10d4c = load i32, i32* @r1, align 4
  %v1_10d4c = add i32 %v0_10d4c, -1
  %v3_10d50 = udiv i32 %v1_10d4c, 32
  %v0_10d54 = load i32, i32* @r0, align 4
  %v4_10d54 = mul nuw nsw i32 %v3_10d50, 4
  %v5_10d54 = add i32 %v0_10d54, %v4_10d54
  %v6_10d54 = inttoptr i32 %v5_10d54 to i32*
  %v7_10d54 = load i32, i32* %v6_10d54, align 4
  %v1_10d58 = urem i32 %v1_10d4c, 32
  %v7_10d60 = shl i32 1, %v1_10d58
  %v8_10d60 = or i32 %v7_10d54, %v7_10d60
  store i32 %v8_10d60, i32* %v6_10d54, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10d4c, { 1, 0 }
}

define i32 @function_10d70(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10d70:
  %v1_10d70 = add i32 %arg2, -1
  %v3_10d74 = udiv i32 %v1_10d70, 32
  %v4_10d78 = mul nuw nsw i32 %v3_10d74, 4
  %v5_10d78 = add i32 %v4_10d78, %arg1
  %v6_10d78 = inttoptr i32 %v5_10d78 to i32*
  %v7_10d78 = load i32, i32* %v6_10d78, align 4
  %v1_10d7c = urem i32 %v1_10d70, 32
  %tmp = shl i32 -1, %v1_10d7c
  %v8_10d84 = add i32 %tmp, -1
  %v9_10d84 = and i32 %v7_10d78, %v8_10d84
  store i32 %v9_10d84, i32* %v6_10d78, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10d70, { 1, 0 }
}

define i32 @function_10d94(i32 %arg1) local_unnamed_addr {
dec_label_pc_10d94:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10d94 = load i32, i32* @r4, align 4
  %v6_10d94 = load i32, i32* @r5, align 4
  %v9_10d94 = load i32, i32* @r6, align 4
  %v0_10d98 = load i32, i32* %r0.global-to-local, align 4
  %v2_10d98 = icmp eq i32 %v0_10d98, 0
  %v2_10d9c = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_10d98, label %bb, label %dec_label_pc_10da8

bb:                                               ; preds = %dec_label_pc_10d94
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10db0

dec_label_pc_10da8:                               ; preds = %dec_label_pc_10d94
  %tmp = icmp ugt i32 %v0_10d98, -8
  br i1 %tmp, label %dec_label_pc_10eb4, label %dec_label_pc_10db0

dec_label_pc_10db0:                               ; preds = %bb, %dec_label_pc_10da8
  %v0_10db0 = phi i32 [ %v0_10d98, %dec_label_pc_10da8 ], [ 1, %bb ]
  %v1_10db0 = add i32 %v0_10db0, 4
  store i32 %v1_10db0, i32* %stack_var_-20, align 4
  store i32 %v2_10d9c, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1b1ec.622 to i32), i32* %r0.global-to-local, align 4
  %v1_10dc8 = call i32 @function_1177c()
  store i32 ptrtoint (i32** @global_var_1b034.627 to i32), i32* %r0.global-to-local, align 4
  %v3_10dd4 = call i32 @function_11148(i32* bitcast (i32** @global_var_1b034.627 to i32*), i32 %v2_10d9c)
  store i32 %v3_10dd4, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1ec.622 to i32), i32* %r0.global-to-local, align 4
  store i32 69100, i32* @lr, align 4
  %v1_10de8 = call i32 @function_1177c()
  store i32 %v1_10de8, i32* %r0.global-to-local, align 4
  %v2_10dec = icmp eq i32 %v3_10dd4, 0
  br i1 %v2_10dec, label %dec_label_pc_10df4, label %dec_label_pc_10ea4

dec_label_pc_10df4:                               ; preds = %dec_label_pc_10db0
  %v2_10df8 = load i32, i32* @global_var_1b214.630, align 4
  store i32 %v2_10df8, i32* @r4, align 4
  %v2_10dfc = load i32, i32* %stack_var_-20, align 4
  %v3_10e00 = icmp ult i32 %v2_10dfc, %v2_10df8
  br i1 %v3_10e00, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_10df4
  %v3_10e04 = add i32 %v2_10df8, -1
  %v2_10e08 = add i32 %v3_10e04, %v2_10dfc
  %v2_10e0c = sub i32 0, %v2_10df8
  %v3_10e10 = and i32 %v2_10e08, %v2_10e0c
  store i32 %v3_10e10, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_10df4, %bb14
  store i32 ptrtoint (i32* @global_var_1b37c.632 to i32), i32* %r0.global-to-local, align 4
  %v1_10e1c = call i32 @function_1177c()
  %v0_10e20 = load i32, i32* @r4, align 4
  store i32 %v0_10e20, i32* %r0.global-to-local, align 4
  %v1_10e24 = call i32 @function_11c84(i32 %v0_10e20)
  store i32 %v1_10e24, i32* %r0.global-to-local, align 4
  %v7_10e28 = icmp eq i32 %v1_10e24, -1
  br i1 %v7_10e28, label %bb15, label %dec_label_pc_10e34

bb15:                                             ; preds = %.thread3
  store i32 %v1_10e24, i32* @r5, align 4
  br label %dec_label_pc_10e48

dec_label_pc_10e34:                               ; preds = %.thread3
  %v1_10e34 = add i32 %v1_10e24, 3
  %v1_10e38 = and i32 %v1_10e34, -4
  store i32 %v1_10e38, i32* @r5, align 4
  %v9_10e3c = icmp eq i32 %v1_10e38, %v1_10e24
  br i1 %v9_10e3c, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_10e34
  %v3_10e40 = sub i32 %v1_10e38, %v1_10e24
  store i32 %v3_10e40, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_10e34, %bb16
  %v1_10e44 = xor i1 %v9_10e3c, true
  call void @__pseudo_cond_branch(i1 %v1_10e44, i32 ptrtoint (i32* @global_var_11c84.633 to i32))
  br label %dec_label_pc_10e48

dec_label_pc_10e48:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1b37c.632 to i32), i32* %r0.global-to-local, align 4
  store i32 69208, i32* @lr, align 4
  %v1_10e54 = call i32 @function_1177c()
  store i32 %v1_10e54, i32* %r0.global-to-local, align 4
  %v0_10e58 = load i32, i32* @r5, align 4
  %v7_10e58 = icmp eq i32 %v0_10e58, -1
  br i1 %v7_10e58, label %dec_label_pc_10eb4, label %dec_label_pc_10e60

dec_label_pc_10e60:                               ; preds = %dec_label_pc_10e48
  store i32 ptrtoint (i32* @global_var_1b1ec.622 to i32), i32* %r0.global-to-local, align 4
  %v1_10e6c = call i32 @function_1177c()
  %v0_10e70 = load i32, i32* @r4, align 4
  %v0_10e74 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1b034.627 to i32), i32* %r0.global-to-local, align 4
  %v4_10e7c = call i32 @function_1129c(i32* bitcast (i32** @global_var_1b034.627 to i32*), i32 %v0_10e74, i32 %v0_10e70)
  store i32 ptrtoint (i32** @global_var_1b034.627 to i32), i32* %r0.global-to-local, align 4
  %v3_10e88 = call i32 @function_11148(i32* bitcast (i32** @global_var_1b034.627 to i32*), i32 %v2_10d9c)
  store i32 %v3_10e88, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b1ec.622 to i32), i32* %r0.global-to-local, align 4
  store i32 69276, i32* @lr, align 4
  %v1_10e98 = call i32 @function_1177c()
  store i32 %v1_10e98, i32* %r0.global-to-local, align 4
  %v2_10e9c = icmp eq i32 %v3_10e88, 0
  br i1 %v2_10e9c, label %dec_label_pc_10eb4, label %dec_label_pc_10ea4

dec_label_pc_10ea4:                               ; preds = %dec_label_pc_10db0, %dec_label_pc_10e60
  %v1_10ea8 = phi i32 [ %v3_10dd4, %dec_label_pc_10db0 ], [ %v3_10e88, %dec_label_pc_10e60 ]
  %v2_10ea4 = load i32, i32* %stack_var_-20, align 4
  %v2_10ea8 = inttoptr i32 %v1_10ea8 to i32*
  store i32 %v2_10ea4, i32* %v2_10ea8, align 4
  %v3_10ea8 = load i32, i32* %r4.global-to-local, align 4
  %v4_10ea8 = add i32 %v3_10ea8, 4
  store i32 %v4_10ea8, i32* %r4.global-to-local, align 4
  %v2_10eac = icmp eq i32 %v4_10ea8, 0
  br i1 %v2_10eac, label %dec_label_pc_10eb4, label %dec_label_pc_10ec4

dec_label_pc_10eb4:                               ; preds = %dec_label_pc_10ea4, %dec_label_pc_10e60, %dec_label_pc_10e48, %dec_label_pc_10da8
  %v0_10eb4 = call i32 @function_1095c()
  store i32 %v0_10eb4, i32* %r0.global-to-local, align 4
  %v2_10ebc = inttoptr i32 %v0_10eb4 to i32*
  store i32 12, i32* %v2_10ebc, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ec4

dec_label_pc_10ec4:                               ; preds = %dec_label_pc_10ea4, %dec_label_pc_10eb4
  %v0_10ec4 = phi i32 [ %v4_10ea8, %dec_label_pc_10ea4 ], [ 0, %dec_label_pc_10eb4 ]
  store i32 %v0_10ec4, i32* %r0.global-to-local, align 4
  store i32 %v3_10d94, i32* @r4, align 4
  store i32 %v6_10d94, i32* @r5, align 4
  store i32 %v9_10d94, i32* @r6, align 4
  ret i32 %v0_10ec4

; uselistorder directives
  uselistorder i32 %v0_10ec4, { 1, 0 }
  uselistorder i32 %v3_10e88, { 1, 0, 2 }
  uselistorder i32 %v1_10e38, { 1, 0, 2 }
  uselistorder i32 %v1_10e24, { 2, 0, 4, 3, 1, 5 }
  uselistorder i32 %v3_10dd4, { 1, 0, 2 }
  uselistorder i32 %v0_10d98, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 5, 7, 2, 6, 8, 9, 10, 3, 12, 11, 19, 14, 13, 4, 15, 16, 17, 18, 0, 1 }
  uselistorder label %dec_label_pc_10ec4, { 1, 0 }
  uselistorder label %dec_label_pc_10ea4, { 1, 0 }
  uselistorder label %dec_label_pc_10e48, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_10db0, { 1, 0 }
}

define i32 @function_10ee8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ee8:
  %stack_var_-12 = alloca i32, align 4
  %v3_10ee8 = load i32, i32* @r4, align 4
  store i32 %v3_10ee8, i32* %stack_var_-12, align 4
  %v6_10ee8 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_10ef0 = mul i32 %arg2, %arg1
  store i32 %v2_10ef0, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_10ef4 = icmp eq i32 %arg1, 0
  store i32 %v2_10ef0, i32* @r0, align 4
  br i1 %v2_10ef4, label %dec_label_pc_10f20, label %dec_label_pc_10f00

dec_label_pc_10f00:                               ; preds = %dec_label_pc_10ee8
  %v0_10f00 = call i32 @function_102d8()
  %v0_10f04 = load i32, i32* @r5, align 4
  %v9_10f04 = icmp eq i32 %v0_10f04, %v0_10f00
  store i32 0, i32* @r5, align 4
  br i1 %v9_10f04, label %dec_label_pc_10f00.dec_label_pc_10f20_crit_edge, label %dec_label_pc_10f10

dec_label_pc_10f00.dec_label_pc_10f20_crit_edge:  ; preds = %dec_label_pc_10f00
  %v0_10f20.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10f20

dec_label_pc_10f10:                               ; preds = %dec_label_pc_10f00
  %v0_10f10 = call i32 @function_1095c()
  %v2_10f18 = inttoptr i32 %v0_10f10 to i32*
  store i32 12, i32* %v2_10f18, align 4
  br label %dec_label_pc_10f38

dec_label_pc_10f20:                               ; preds = %dec_label_pc_10f00.dec_label_pc_10f20_crit_edge, %dec_label_pc_10ee8
  %v0_10f20 = phi i32 [ %v0_10f20.pre, %dec_label_pc_10f00.dec_label_pc_10f20_crit_edge ], [ %v2_10ef0, %dec_label_pc_10ee8 ]
  %v1_10f24 = call i32 @function_10d94(i32 %v0_10f20)
  store i32 %v1_10f24, i32* @r5, align 4
  %v0_10f2c = load i32, i32* @r4, align 4
  store i32 %v0_10f2c, i32* @r2, align 4
  store i32 69432, i32* @lr, align 4
  %v1_10f34 = icmp ne i32 %v1_10f24, 0
  call void @__pseudo_cond_branch(i1 %v1_10f34, i32 ptrtoint (i32* @global_var_121a0.634 to i32))
  br label %dec_label_pc_10f38

dec_label_pc_10f38:                               ; preds = %dec_label_pc_10f10, %dec_label_pc_10f20
  %v0_10f38 = load i32, i32* @r5, align 4
  %v2_10f3c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10f3c, i32* @r4, align 4
  store i32 %v6_10ee8, i32* @r5, align 4
  ret i32 %v0_10f38

; uselistorder directives
  uselistorder i32 ()* @function_102d8, { 1, 2, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10f38, { 1, 0 }
}

define i32 @function_10f40() local_unnamed_addr {
dec_label_pc_10f40:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_10f40 = load i32, i32* @r0, align 4
  %v2_10f40 = icmp eq i32 %v0_10f40, 0
  %v3_10f44 = load i32, i32* @r4, align 4
  store i32 %v3_10f44, i32* %stack_var_-24, align 4
  %v6_10f44 = load i32, i32* @r5, align 4
  %v9_10f44 = load i32, i32* @r6, align 4
  %v15_10f44 = load i32, i32* @r8, align 4
  br i1 %v2_10f40, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_10f40
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_10f40
  %v1_10f4c = add i32 %v0_10f40, -4
  %v2_10f4c = inttoptr i32 %v1_10f4c to i32*
  %v3_10f4c = load i32, i32* %v2_10f4c, align 4
  store i32 %v3_10f4c, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1b034.627 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_10f4c, i32* @r4, align 4
  %v1_10f64 = call i32 @function_1177c()
  %v0_10f68 = load i32, i32* @r4, align 4
  %v0_10f6c = load i32, i32* @r5, align 4
  %v4_10f74 = call i32 @function_1129c(i32* bitcast (i32** @global_var_1b034.627 to i32*), i32 %v0_10f68, i32 %v0_10f6c)
  %v1_10f7c = inttoptr i32 %v4_10f74 to i32*
  %v2_10f7c = load i32, i32* %v1_10f7c, align 4
  store i32 %v2_10f7c, i32* %r6.global-to-local, align 4
  %v2_10f80 = load i32, i32* @global_var_1b214.630, align 4
  %v4_10f84 = mul i32 %v2_10f80, 8
  %v6_10f84 = icmp ult i32 %v2_10f7c, %v4_10f84
  store i32 %v4_10f74, i32* @r4, align 4
  br i1 %v6_10f84, label %dec_label_pc_10fc4, label %dec_label_pc_10f90

dec_label_pc_10f90:                               ; preds = %bb11
  %v1_10f98 = call i32 @function_1177c()
  %v1_10fa0 = call i32 @function_11c84(i32 0)
  %v0_10fa4 = load i32, i32* @r4, align 4
  %v1_10fa4 = add i32 %v0_10fa4, 12
  store i32 %v1_10fa4, i32* @r5, align 4
  %v9_10fa8 = icmp eq i32 %v1_10fa4, %v1_10fa0
  br i1 %v9_10fa8, label %dec_label_pc_10fcc, label %dec_label_pc_10fb0

dec_label_pc_10fb0:                               ; preds = %dec_label_pc_10f90
  %v1_10fbc = call i32 @function_1177c()
  br label %dec_label_pc_10fc4

dec_label_pc_10fc4:                               ; preds = %bb11, %dec_label_pc_10fb0, %bb14
  %v2_10fc4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10fc4, i32* @r4, align 4
  store i32 %v6_10f44, i32* @r5, align 4
  store i32 %v9_10f44, i32* %r6.global-to-local, align 4
  store i32 %v15_10f44, i32* %r8.global-to-local, align 4
  %v0_10fc8 = call i32 @function_1177c()
  %v0_10fcc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10fcc

dec_label_pc_10fcc:                               ; preds = %dec_label_pc_10f90, %dec_label_pc_10fc4
  %v1_10fd4 = phi i32 [ %v0_10fa4, %dec_label_pc_10f90 ], [ %v0_10fcc.pre, %dec_label_pc_10fc4 ]
  %v1_10fcc = add i32 %v1_10fd4, 4
  %v2_10fcc = inttoptr i32 %v1_10fcc to i32*
  %v3_10fcc = load i32, i32* %v2_10fcc, align 4
  %v2_10fd0 = icmp eq i32 %v3_10fcc, 0
  br i1 %v2_10fd0, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_10fcc
  %v2_10fd4 = add i32 %v1_10fd4, 8
  %v3_10fd4 = inttoptr i32 %v2_10fd4 to i32*
  %v4_10fd4 = load i32, i32* %v3_10fd4, align 4
  %v3_10fd8 = add i32 %v3_10fcc, 8
  %v4_10fd8 = inttoptr i32 %v3_10fd8 to i32*
  store i32 %v4_10fd4, i32* %v4_10fd8, align 4
  %v0_10fdc.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10fcc, %bb12
  %v0_10fdc = phi i32 [ %v1_10fd4, %dec_label_pc_10fcc ], [ %v0_10fdc.pre, %bb12 ]
  %v1_10fdc = add i32 %v0_10fdc, 8
  %v2_10fdc = inttoptr i32 %v1_10fdc to i32*
  %v3_10fdc = load i32, i32* %v2_10fdc, align 4
  %v1_10fe0 = add i32 %v0_10fdc, 4
  %v2_10fe0 = inttoptr i32 %v1_10fe0 to i32*
  %v3_10fe0 = load i32, i32* %v2_10fe0, align 4
  %v2_10fe4 = icmp eq i32 %v3_10fdc, 0
  br i1 %v2_10fe4, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_10fe8 = add i32 %v3_10fdc, 4
  %v4_10fe8 = inttoptr i32 %v3_10fe8 to i32*
  store i32 %v3_10fe0, i32* %v4_10fe8, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_10fec = load i32, i32* %r8.global-to-local, align 4
  %v3_10fec = inttoptr i32 %v2_10fec to i32*
  store i32 %v3_10fe0, i32* %v3_10fec, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_10ffc = call i32 @function_1177c()
  %v0_11000 = load i32, i32* %r6.global-to-local, align 4
  %v1_11000 = load i32, i32* @r4, align 4
  %v0_11008 = load i32, i32* @r5, align 4
  %v2_11000 = sub i32 12, %v0_11000
  %v1_11004 = add i32 %v2_11000, %v1_11000
  %v2_11008 = sub i32 %v1_11004, %v0_11008
  %v1_1100c = call i32 @function_11c84(i32 %v2_11008)
  br label %dec_label_pc_10fc4

; uselistorder directives
  uselistorder i32 %v0_10fdc, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_11c84, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_10fcc, { 1, 0 }
  uselistorder label %dec_label_pc_10fc4, { 2, 1, 0 }
}

define i32 @function_11030(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11030:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11030 = load i32, i32* @r4, align 4
  store i32 %v3_11030, i32* %stack_var_-24, align 4
  %v6_11030 = load i32, i32* @r5, align 4
  %v9_11030 = load i32, i32* @r6, align 4
  %v12_11030 = load i32, i32* @r7, align 4
  %v15_11030 = load i32, i32* @r8, align 4
  %v18_11030 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_11034 = icmp eq i32 %arg2, 0
  %v0_11038 = load i32, i32* @r0, align 4
  store i32 %v0_11038, i32* @r7, align 4
  br i1 %v2_11034, label %dec_label_pc_11040, label %dec_label_pc_11048

dec_label_pc_11040:                               ; preds = %dec_label_pc_11030
  %v0_11040 = call i32 @function_10f40()
  %v0_11050.pre = load i32, i32* @r4, align 4
  %v2_11054.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_11050

dec_label_pc_11048:                               ; preds = %dec_label_pc_11030
  %v2_11048 = icmp eq i32 %v0_11038, 0
  br i1 %v2_11048, label %dec_label_pc_11050, label %dec_label_pc_1105c

dec_label_pc_11050:                               ; preds = %dec_label_pc_11048, %dec_label_pc_11040
  %v2_11054 = phi i32 [ %v3_11030, %dec_label_pc_11048 ], [ %v2_11054.pre, %dec_label_pc_11040 ]
  %v0_11050 = phi i32 [ %arg2, %dec_label_pc_11048 ], [ %v0_11050.pre, %dec_label_pc_11040 ]
  store i32 %v2_11054, i32* @r4, align 4
  store i32 %v6_11030, i32* @r5, align 4
  store i32 %v9_11030, i32* @r6, align 4
  store i32 %v12_11030, i32* @r7, align 4
  store i32 %v18_11030, i32* @lr, align 4
  %v1_11058 = call i32 @function_10d94(i32 %v0_11050)
  %v0_1105c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1105c

dec_label_pc_1105c:                               ; preds = %dec_label_pc_11048, %dec_label_pc_11050
  %v0_11074 = phi i32 [ %v0_11038, %dec_label_pc_11048 ], [ %v1_11058, %dec_label_pc_11050 ]
  %v0_1105c = phi i32 [ %arg2, %dec_label_pc_11048 ], [ %v0_1105c.pre, %dec_label_pc_11050 ]
  %v1_1105c = add i32 %v0_1105c, 7
  %v1_11060 = and i32 %v1_1105c, -4
  store i32 %v1_11060, i32* @r5, align 4
  %v2_11064 = icmp ugt i32 %v1_11060, 10
  %v1_11068 = add i32 %v0_11074, -4
  %v2_11068 = inttoptr i32 %v1_11068 to i32*
  %v3_11068 = load i32, i32* %v2_11068, align 4
  store i32 %v3_11068, i32* @r6, align 4
  br i1 %v2_11064, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_1105c
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_1105c, %bb
  %v0_110f0 = phi i32 [ %v1_11060, %dec_label_pc_1105c ], [ 12, %bb ]
  store i32 %v1_11068, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_110f0, %v3_11068
  br i1 %tmp, label %dec_label_pc_1107c, label %dec_label_pc_110f0

dec_label_pc_1107c:                               ; preds = %bb14
  %v2_11070 = sub i32 %v0_110f0, %v3_11068
  %v1_1108c = call i32 @function_1177c()
  %v0_11094 = load i32, i32* @r8, align 4
  %v1_11094 = load i32, i32* @r6, align 4
  %v2_11094 = add i32 %v1_11094, %v0_11094
  %v4_1109c = call i32 @function_111dc(i32* bitcast (i32** @global_var_1b034.627 to i32*), i32 %v2_11094, i32 %v2_11070)
  store i32 %v4_1109c, i32* @r4, align 4
  store i32 69812, i32* @lr, align 4
  %v1_110b0 = call i32 @function_1177c()
  %v0_110b4 = load i32, i32* @r4, align 4
  %v2_110b4 = icmp eq i32 %v0_110b4, 0
  br i1 %v2_110b4, label %dec_label_pc_110c4, label %.thread

.thread:                                          ; preds = %dec_label_pc_1107c
  %v1_110b8 = load i32, i32* @r6, align 4
  %v3_110b8 = add i32 %v1_110b8, %v0_110b4
  %v2_110bc = load i32, i32* @r7, align 4
  %v3_110bc = add i32 %v2_110bc, -4
  %v4_110bc = inttoptr i32 %v3_110bc to i32*
  store i32 %v3_110b8, i32* %v4_110bc, align 4
  br label %dec_label_pc_11130

dec_label_pc_110c4:                               ; preds = %dec_label_pc_1107c
  %v0_110c4 = load i32, i32* @r5, align 4
  %v1_110c4 = add i32 %v0_110c4, -4
  %v1_110c8 = call i32 @function_10d94(i32 %v1_110c4)
  store i32 %v1_110c8, i32* @r0, align 4
  store i32 %v1_110c8, i32* @r4, align 4
  %v2_110cc = icmp eq i32 %v1_110c8, 0
  br i1 %v2_110cc, label %dec_label_pc_110e8, label %dec_label_pc_110d4

dec_label_pc_110d4:                               ; preds = %dec_label_pc_110c4
  %v0_110d4 = load i32, i32* @r6, align 4
  %v1_110d4 = add i32 %v0_110d4, -4
  store i32 %v1_110d4, i32* @r2, align 4
  %v0_110d8 = load i32, i32* @r7, align 4
  store i32 %v0_110d8, i32* @r1, align 4
  %v3_110dc = call i32 @function_109a0(i32 %v1_110c8, i32 %v0_110d8, i32 %v1_110d4)
  %v0_110e0 = load i32, i32* @r7, align 4
  store i32 %v0_110e0, i32* @r0, align 4
  %v0_110e4 = call i32 @function_10f40()
  %v0_110e8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_110e8

dec_label_pc_110e8:                               ; preds = %dec_label_pc_110c4, %dec_label_pc_110d4
  %v0_110e8 = phi i32 [ 0, %dec_label_pc_110c4 ], [ %v0_110e8.pre, %dec_label_pc_110d4 ]
  store i32 %v0_110e8, i32* @r7, align 4
  br label %dec_label_pc_11130

dec_label_pc_110f0:                               ; preds = %bb14
  %v1_110f0 = add i32 %v0_110f0, 28
  %tmp15 = icmp ugt i32 %v1_110f0, %v3_11068
  br i1 %tmp15, label %dec_label_pc_11130, label %dec_label_pc_110fc

dec_label_pc_110fc:                               ; preds = %dec_label_pc_110f0
  %v1_11108 = call i32 @function_1177c()
  %v0_1110c = load i32, i32* @r8, align 4
  %v1_1110c = load i32, i32* @r5, align 4
  %v2_1110c = add i32 %v1_1110c, %v0_1110c
  %v1_11110 = load i32, i32* @r6, align 4
  %v2_11110 = sub i32 %v1_11110, %v1_1110c
  %v4_11118 = call i32 @function_1129c(i32* bitcast (i32** @global_var_1b034.627 to i32*), i32 %v2_1110c, i32 %v2_11110)
  store i32 69932, i32* @lr, align 4
  %v1_11128 = call i32 @function_1177c()
  %v0_1112c = load i32, i32* @r5, align 4
  %v1_1112c = load i32, i32* @r7, align 4
  %v2_1112c = add i32 %v1_1112c, -4
  %v3_1112c = inttoptr i32 %v2_1112c to i32*
  store i32 %v0_1112c, i32* %v3_1112c, align 4
  br label %dec_label_pc_11130

dec_label_pc_11130:                               ; preds = %.thread, %dec_label_pc_110f0, %dec_label_pc_110e8, %dec_label_pc_110fc
  %v0_11130 = load i32, i32* @r7, align 4
  %v2_11134 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11134, i32* @r4, align 4
  store i32 %v6_11030, i32* @r5, align 4
  store i32 %v9_11030, i32* @r6, align 4
  store i32 %v12_11030, i32* @r7, align 4
  store i32 %v15_11030, i32* @r8, align 4
  ret i32 %v0_11130

; uselistorder directives
  uselistorder i32 %v1_1110c, { 1, 0 }
  uselistorder i32 %v0_110f0, { 1, 2, 0 }
  uselistorder i32 %v3_11068, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1b034.627, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1b034.627 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_10d94, { 1, 25, 0, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 ()* @function_10f40, { 1, 0, 2 }
  uselistorder i32* @r8, { 73, 74, 75, 76, 77, 87, 7, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 1, 26, 2, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 40, 41, 39, 42, 43, 44, 45, 47, 46, 48, 49, 50, 52, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 98, 94, 95, 96, 97, 99, 100, 101, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93 }
  uselistorder i32* @r7, { 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 6, 7, 8, 14, 15, 16, 3, 5, 23, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 24, 1, 42, 43, 44, 45, 46, 47, 48, 49, 200, 201, 202, 203, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 2, 4, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 160, 161, 162, 163, 165, 166, 167, 168, 204, 205, 206, 207, 212, 208, 209, 210, 211, 213, 214, 215, 216, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199 }
  uselistorder label %dec_label_pc_11130, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_110e8, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_1105c, { 1, 0 }
}

define i32 @function_11148(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11148:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_11148 = inttoptr i32 %arg2 to i32*
  %v2_11148 = load i32, i32* %v1_11148, align 4
  %v3_1114c = load i32, i32* @r4, align 4
  store i32 %v3_1114c, i32* %stack_var_-8, align 4
  %v1_11150 = add i32 %v2_11148, 3
  %v1_11154 = and i32 %v1_11150, -4
  store i32 %v1_11154, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_1115c = icmp ugt i32 %v1_11154, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11164 = load i32, i32* %arg1, align 4
  store i32 %v2_11164, i32* %r0.global-to-local, align 4
  br i1 %v2_1115c, label %dec_label_pc_111d0.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_11148
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_111d0.preheader

dec_label_pc_111d0.preheader:                     ; preds = %dec_label_pc_11148, %bb
  %v1_11184 = phi i32 [ %v1_11154, %dec_label_pc_11148 ], [ 12, %bb ]
  %v2_111d09 = icmp eq i32 %v2_11164, 0
  br i1 %v2_111d09, label %dec_label_pc_111d8, label %dec_label_pc_11170

dec_label_pc_11170:                               ; preds = %dec_label_pc_111d0.preheader, %dec_label_pc_111cc
  %v2_11188 = phi i32 [ %v3_111cc, %dec_label_pc_111cc ], [ %v2_11164, %dec_label_pc_111d0.preheader ]
  %v1_11170 = inttoptr i32 %v2_11188 to i32*
  %v2_11170 = load i32, i32* %v1_11170, align 4
  store i32 %v2_11170, i32* @ip, align 4
  %v3_11174 = icmp ult i32 %v2_11170, %v1_11184
  br i1 %v3_11174, label %dec_label_pc_111cc, label %dec_label_pc_1117c

dec_label_pc_1117c:                               ; preds = %dec_label_pc_11170
  %v1_1117c = add i32 %v1_11184, 44
  %v3_11180 = icmp ult i32 %v2_11170, %v1_1117c
  br i1 %v3_11180, label %dec_label_pc_11190, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_1117c
  %v2_11174.le = sub i32 %v2_11170, %v1_11184
  store i32 %v2_11174.le, i32* %v1_11170, align 4
  %v0_111bc.pre = load i32, i32* @ip, align 4
  %v0_111c4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_11190:                               ; preds = %dec_label_pc_1117c
  %v1_11190 = add i32 %v2_11188, 4
  %v2_11190 = inttoptr i32 %v1_11190 to i32*
  %v3_11190 = load i32, i32* %v2_11190, align 4
  store i32 %v3_11190, i32* %r2.global-to-local, align 4
  %v2_11194 = icmp eq i32 %v3_11190, 0
  br i1 %v2_11194, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_11190
  %v2_11198 = add i32 %v2_11188, 8
  %v3_11198 = inttoptr i32 %v2_11198 to i32*
  %v4_11198 = load i32, i32* %v3_11198, align 4
  %v3_1119c = add i32 %v3_11190, 8
  %v4_1119c = inttoptr i32 %v3_1119c to i32*
  store i32 %v4_11198, i32* %v4_1119c, align 4
  %v0_111a0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_11190, %bb27
  %v0_111a0 = phi i32 [ %v2_11188, %dec_label_pc_11190 ], [ %v0_111a0.pre, %bb27 ]
  %v1_111a0 = add i32 %v0_111a0, 8
  %v2_111a0 = inttoptr i32 %v1_111a0 to i32*
  %v3_111a0 = load i32, i32* %v2_111a0, align 4
  %v1_111a4 = add i32 %v0_111a0, 4
  %v2_111a4 = inttoptr i32 %v1_111a4 to i32*
  %v3_111a4 = load i32, i32* %v2_111a4, align 4
  %v2_111a8 = icmp eq i32 %v3_111a0, 0
  br i1 %v2_111a8, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_111ac = add i32 %v3_111a0, 4
  %v4_111ac = inttoptr i32 %v3_111ac to i32*
  store i32 %v3_111a4, i32* %v4_111ac, align 4
  %v1_111b4 = load i32, i32* @ip, align 4
  store i32 %v1_111b4, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_111b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_111b0 = inttoptr i32 %v2_111b0 to i32*
  store i32 %v3_111a4, i32* %v3_111b0, align 4
  %v1_111b8.pre = load i32, i32* @ip, align 4
  store i32 %v1_111b8.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_111c4 = phi i32 [ %v0_111c4.pre, %.thread._crit_edge ], [ %v1_111b4, %bb28 ], [ %v1_111b8.pre, %.thread5 ]
  %v0_111bc = phi i32 [ %v0_111bc.pre, %.thread._crit_edge ], [ %v1_111b4, %bb28 ], [ %v1_111b8.pre, %.thread5 ]
  %v1_111bc = load i32, i32* %r0.global-to-local, align 4
  %v2_111bc = sub i32 %v1_111bc, %v0_111bc
  %v1_111c0 = add i32 %v2_111bc, 12
  store i32 %v1_111c0, i32* %r0.global-to-local, align 4
  %v1_111c4 = load i32, i32* %r4.global-to-local, align 4
  %v2_111c4 = inttoptr i32 %v1_111c4 to i32*
  store i32 %v0_111c4, i32* %v2_111c4, align 4
  %v2_111c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_111c8, i32* %r4.global-to-local, align 4
  ret i32 %v1_111c0

dec_label_pc_111cc:                               ; preds = %dec_label_pc_11170
  %v1_111cc = add i32 %v2_11188, 4
  %v2_111cc = inttoptr i32 %v1_111cc to i32*
  %v3_111cc = load i32, i32* %v2_111cc, align 4
  store i32 %v3_111cc, i32* %r0.global-to-local, align 4
  %v2_111d0 = icmp eq i32 %v3_111cc, 0
  br i1 %v2_111d0, label %dec_label_pc_111d0.dec_label_pc_111d8_crit_edge, label %dec_label_pc_11170

dec_label_pc_111d0.dec_label_pc_111d8_crit_edge:  ; preds = %dec_label_pc_111cc
  br label %dec_label_pc_111d8

dec_label_pc_111d8:                               ; preds = %dec_label_pc_111d0.dec_label_pc_111d8_crit_edge, %dec_label_pc_111d0.preheader
  store i32 %v3_1114c, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_111cc, { 1, 2, 0 }
  uselistorder i32 %v0_111a0, { 1, 0 }
  uselistorder i32 %v2_11170, { 1, 0, 2, 3 }
  uselistorder i32 %v2_11188, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_11184, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_11170, { 1, 0 }
  uselistorder label %dec_label_pc_111d0.preheader, { 1, 0 }
}

define i32 @function_111dc(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_111dc:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_111e0 = load i32, i32* %arg1, align 4
  store i32 %v2_111e0, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_112586 = icmp eq i32 %v2_111e0, 0
  br i1 %v2_112586, label %dec_label_pc_11260, label %dec_label_pc_111ec

dec_label_pc_111ec:                               ; preds = %dec_label_pc_111dc, %dec_label_pc_11254
  %v0_1122c = phi i32 [ %v3_11254, %dec_label_pc_11254 ], [ %v2_111e0, %dec_label_pc_111dc ]
  %v1_111ec = inttoptr i32 %v0_1122c to i32*
  %v2_111ec = load i32, i32* %v1_111ec, align 4
  store i32 %v2_111ec, i32* %r0.global-to-local, align 4
  %v2_111f0 = sub i32 %v0_1122c, %v2_111ec
  %v1_111f4 = add i32 %v2_111f0, 12
  %v3_111f8 = icmp uge i32 %v1_111f4, %arg2
  %v9_111f8 = icmp eq i32 %v1_111f4, %arg2
  %v2_111fc = xor i1 %v9_111f8, true
  %v3_111fc = and i1 %v3_111f8, %v2_111fc
  br i1 %v3_111fc, label %dec_label_pc_11254, label %dec_label_pc_11200

dec_label_pc_11200:                               ; preds = %dec_label_pc_111ec
  br i1 %v9_111f8, label %dec_label_pc_11204, label %dec_label_pc_11260

dec_label_pc_11204:                               ; preds = %dec_label_pc_11200
  %v1_11204 = add i32 %arg3, 3
  %v1_11208 = and i32 %v1_11204, -4
  store i32 %v1_11208, i32* %r2.global-to-local, align 4
  %v2_1120c = sub i32 %v2_111ec, %v1_11208
  %v3_1120c = icmp ult i32 %v2_111ec, %v1_11208
  br i1 %v3_1120c, label %dec_label_pc_11260, label %dec_label_pc_11214

dec_label_pc_11214:                               ; preds = %dec_label_pc_11204
  %v1_11214 = add i32 %v1_11208, 44
  %v3_11218 = icmp ult i32 %v2_111ec, %v1_11214
  br i1 %v3_11218, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_11214
  store i32 %v2_1120c, i32* %v1_111ec, align 4
  %v1_11224 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_11224, i32* %r0.global-to-local, align 4
  ret i32 %v1_11224

.thread2:                                         ; preds = %dec_label_pc_11214
  %v1_1122c = add i32 %v0_1122c, 4
  %v2_1122c = inttoptr i32 %v1_1122c to i32*
  %v3_1122c = load i32, i32* %v2_1122c, align 4
  store i32 %v3_1122c, i32* %r2.global-to-local, align 4
  %v2_11230 = icmp eq i32 %v3_1122c, 0
  br i1 %v2_11230, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_11234 = add i32 %v0_1122c, 8
  %v3_11234 = inttoptr i32 %v2_11234 to i32*
  %v4_11234 = load i32, i32* %v3_11234, align 4
  %v3_11238 = add i32 %v3_1122c, 8
  %v4_11238 = inttoptr i32 %v3_11238 to i32*
  store i32 %v4_11234, i32* %v4_11238, align 4
  %v0_1123c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_1123c = phi i32 [ %v0_1122c, %.thread2 ], [ %v0_1123c.pre, %bb17 ]
  %v1_1123c = add i32 %v0_1123c, 8
  %v2_1123c = inttoptr i32 %v1_1123c to i32*
  %v3_1123c = load i32, i32* %v2_1123c, align 4
  store i32 %v3_1123c, i32* %r2.global-to-local, align 4
  %v1_11240 = add i32 %v0_1123c, 4
  %v2_11240 = inttoptr i32 %v1_11240 to i32*
  %v3_11240 = load i32, i32* %v2_11240, align 4
  %v2_11244 = icmp eq i32 %v3_1123c, 0
  br i1 %v2_11244, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_11248 = add i32 %v3_1123c, 4
  %v4_11248 = inttoptr i32 %v3_11248 to i32*
  store i32 %v3_11240, i32* %v4_11248, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_1124c = load i32, i32* %lr.global-to-local, align 4
  %v3_1124c = inttoptr i32 %v2_1124c to i32*
  store i32 %v3_11240, i32* %v3_1124c, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_11250 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_11250

dec_label_pc_11254:                               ; preds = %dec_label_pc_111ec
  %v1_11254 = add i32 %v0_1122c, 4
  %v2_11254 = inttoptr i32 %v1_11254 to i32*
  %v3_11254 = load i32, i32* %v2_11254, align 4
  store i32 %v3_11254, i32* %ip.global-to-local, align 4
  %v2_11258 = icmp eq i32 %v3_11254, 0
  br i1 %v2_11258, label %dec_label_pc_11258.dec_label_pc_11260.loopexit_crit_edge, label %dec_label_pc_111ec

dec_label_pc_11258.dec_label_pc_11260.loopexit_crit_edge: ; preds = %dec_label_pc_11254
  br label %dec_label_pc_11260

dec_label_pc_11260:                               ; preds = %dec_label_pc_11204, %dec_label_pc_111dc, %dec_label_pc_11258.dec_label_pc_11260.loopexit_crit_edge, %dec_label_pc_11200
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_11254, { 1, 2, 0 }
  uselistorder i32 %v0_1123c, { 1, 0 }
  uselistorder i32 %v1_11208, { 0, 2, 1, 3 }
  uselistorder i1 %v9_111f8, { 1, 0 }
  uselistorder i32 %v2_111ec, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_1122c, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_11260, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_111ec, { 1, 0 }
}

define i32 @function_11268() local_unnamed_addr {
dec_label_pc_11268:
  %v0_11268 = load i32, i32* @r2, align 4
  %v2_11268 = icmp eq i32 %v0_11268, 0
  %v0_1126c = load i32, i32* @r3, align 4
  %v1_1126c = load i32, i32* @r1, align 4
  %v2_1126c = add i32 %v1_1126c, 4
  %v3_1126c = inttoptr i32 %v2_1126c to i32*
  store i32 %v0_1126c, i32* %v3_1126c, align 4
  %v0_11270 = load i32, i32* @r2, align 4
  %v1_11270 = load i32, i32* @r1, align 4
  %v2_11270 = add i32 %v1_11270, 8
  %v3_11270 = inttoptr i32 %v2_11270 to i32*
  store i32 %v0_11270, i32* %v3_11270, align 4
  %v1_11278 = load i32, i32* @r1, align 4
  br i1 %v2_11268, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_11268
  %v2_11274 = load i32, i32* @r2, align 4
  %v3_11274 = add i32 %v2_11274, 4
  %v4_11274 = inttoptr i32 %v3_11274 to i32*
  store i32 %v1_11278, i32* %v4_11274, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_11268
  %v2_11278 = load i32, i32* @r0, align 4
  %v3_11278 = inttoptr i32 %v2_11278 to i32*
  store i32 %v1_11278, i32* %v3_11278, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_1127c = load i32, i32* @r3, align 4
  %v2_1127c = icmp eq i32 %v0_1127c, 0
  br i1 %v2_1127c, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_11280 = load i32, i32* @r1, align 4
  %v3_11280 = add i32 %v0_1127c, 8
  %v4_11280 = inttoptr i32 %v3_11280 to i32*
  store i32 %v1_11280, i32* %v4_11280, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_11284 = load i32, i32* @r0, align 4
  ret i32 %v1_11284

; uselistorder directives
  uselistorder i32 %v1_11278, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11288() local_unnamed_addr {
dec_label_pc_11288:
  %v0_11288 = load i32, i32* @r2, align 4
  %v2_11288 = icmp eq i32 %v0_11288, 0
  %v1_1128c = load i32, i32* @r1, align 4
  br i1 %v2_11288, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11288
  %v2_1128c = load i32, i32* @r0, align 4
  %v3_1128c = inttoptr i32 %v2_1128c to i32*
  store i32 %v1_1128c, i32* %v3_1128c, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_11288
  %v3_11290 = add i32 %v0_11288, 4
  %v4_11290 = inttoptr i32 %v3_11290 to i32*
  store i32 %v1_1128c, i32* %v4_11290, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_11294 = load i32, i32* @r2, align 4
  %v1_11294 = load i32, i32* @r1, align 4
  %v2_11294 = add i32 %v1_11294, 8
  %v3_11294 = inttoptr i32 %v2_11294 to i32*
  store i32 %v0_11294, i32* %v3_11294, align 4
  %v1_11298 = load i32, i32* @r0, align 4
  ret i32 %v1_11298

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_1129c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1129c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1129c = load i32, i32* @r4, align 4
  store i32 %v3_1129c, i32* %stack_var_-20, align 4
  %v2_112a0 = load i32, i32* %arg1, align 4
  store i32 %v2_112a0, i32* %r4.global-to-local, align 4
  %v2_112a4 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_112c02 = icmp eq i32 %v2_112a0, 0
  br i1 %v2_112c02, label %dec_label_pc_11370, label %dec_label_pc_112b0

dec_label_pc_112b0:                               ; preds = %dec_label_pc_1129c, %dec_label_pc_112b8
  %v0_11300 = phi i32 [ %v0_11308, %dec_label_pc_112b8 ], [ 0, %dec_label_pc_1129c ]
  %v0_11308 = phi i32 [ %v3_112bc, %dec_label_pc_112b8 ], [ %v2_112a0, %dec_label_pc_1129c ]
  %v1_112c45.in = phi i32 [ %v3_112bc, %dec_label_pc_112b8 ], [ %v2_112a0, %dec_label_pc_1129c ]
  %v1_112c45 = add i32 %v1_112c45.in, 12
  %v3_112b0 = icmp ult i32 %v1_112c45, %arg2
  br i1 %v3_112b0, label %dec_label_pc_112b8, label %dec_label_pc_112d0

dec_label_pc_112b8:                               ; preds = %dec_label_pc_112b0
  store i32 %v0_11308, i32* %r6.global-to-local, align 4
  %v1_112bc = add i32 %v0_11308, 4
  %v2_112bc = inttoptr i32 %v1_112bc to i32*
  %v3_112bc = load i32, i32* %v2_112bc, align 4
  store i32 %v3_112bc, i32* %r4.global-to-local, align 4
  %v2_112c0 = icmp eq i32 %v3_112bc, 0
  br i1 %v2_112c0, label %dec_label_pc_112c0.dec_label_pc_11370.loopexit_crit_edge, label %dec_label_pc_112b0

dec_label_pc_112d0:                               ; preds = %dec_label_pc_112b0
  %v1_112d0 = inttoptr i32 %v0_11308 to i32*
  %v2_112d0 = load i32, i32* %v1_112d0, align 4
  store i32 %v2_112d0, i32* @ip, align 4
  %v2_112d4 = sub i32 %v0_11308, %v2_112d0
  %v1_112d8 = add i32 %v2_112d4, 12
  %v3_112dc = icmp uge i32 %v1_112d8, %v2_112a4
  %v9_112dc = icmp eq i32 %v1_112d8, %v2_112a4
  %v2_112e0 = xor i1 %v9_112dc, true
  %v3_112e0 = and i1 %v3_112dc, %v2_112e0
  br i1 %v3_112e0, label %dec_label_pc_11370, label %dec_label_pc_112e4

dec_label_pc_112e4:                               ; preds = %dec_label_pc_112d0
  %v2_112e4 = add i32 %v2_112d0, %arg3
  store i32 %v2_112e4, i32* %r7.global-to-local, align 4
  br i1 %v9_112dc, label %dec_label_pc_112ec, label %dec_label_pc_11318

dec_label_pc_112ec:                               ; preds = %dec_label_pc_112e4
  %v2_112ec = icmp eq i32 %v0_11300, 0
  br i1 %v2_112ec, label %dec_label_pc_11364, label %dec_label_pc_112f4

dec_label_pc_112f4:                               ; preds = %dec_label_pc_112ec
  %v1_112f4 = add i32 %v0_11300, 12
  %v9_112f8 = icmp eq i32 %v1_112f4, %arg2
  br i1 %v9_112f8, label %dec_label_pc_11300, label %dec_label_pc_11364

dec_label_pc_11300:                               ; preds = %dec_label_pc_112f4
  %v1_11300 = inttoptr i32 %v0_11300 to i32*
  %v2_11300 = load i32, i32* %v1_11300, align 4
  %v1_11304 = add i32 %v0_11300, 8
  %v2_11304 = inttoptr i32 %v1_11304 to i32*
  %v3_11304 = load i32, i32* %v2_11304, align 4
  store i32 %v3_11304, i32* @r2, align 4
  store i32 %v0_11308, i32* @r1, align 4
  %v2_1130c = add i32 %v2_11300, %v2_112e4
  store i32 %v2_1130c, i32* %r7.global-to-local, align 4
  %v0_11310 = call i32 @function_11288()
  br label %dec_label_pc_11364

dec_label_pc_11318:                               ; preds = %dec_label_pc_112e4
  %v1_11318 = add i32 %v0_11308, 4
  %v2_11318 = inttoptr i32 %v1_11318 to i32*
  %v3_11318 = load i32, i32* %v2_11318, align 4
  store i32 %v3_11318, i32* %r5.global-to-local, align 4
  %v2_1131c = icmp eq i32 %v3_11318, 0
  br i1 %v2_1131c, label %dec_label_pc_11350, label %dec_label_pc_11324

dec_label_pc_11324:                               ; preds = %dec_label_pc_11318
  %v1_11324 = inttoptr i32 %v3_11318 to i32*
  %v2_11324 = load i32, i32* %v1_11324, align 4
  store i32 %v2_11324, i32* @ip, align 4
  %v2_11328 = sub i32 %v3_11318, %v2_11324
  %v1_1132c = add i32 %v2_11328, 12
  %v9_11330 = icmp eq i32 %v2_112a4, %v1_1132c
  br i1 %v9_11330, label %dec_label_pc_11338, label %dec_label_pc_11350

dec_label_pc_11338:                               ; preds = %dec_label_pc_11324
  store i32 %v0_11300, i32* @r2, align 4
  store i32 %v3_11318, i32* @r1, align 4
  %v2_11340 = add i32 %v2_11324, %v2_112e4
  store i32 %v2_11340, i32* %r7.global-to-local, align 4
  %v0_11344 = call i32 @function_11288()
  %v0_11348 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11348, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11364

dec_label_pc_11350:                               ; preds = %dec_label_pc_11324, %dec_label_pc_11318
  %v2_11350 = add i32 %v0_11308, %arg3
  store i32 %v2_11350, i32* %r4.global-to-local, align 4
  store i32 %v3_11318, i32* @r3, align 4
  store i32 %v0_11300, i32* @r2, align 4
  store i32 %v2_11350, i32* @r1, align 4
  %v0_11360 = call i32 @function_11268()
  br label %dec_label_pc_11364

dec_label_pc_11364:                               ; preds = %dec_label_pc_112f4, %dec_label_pc_112ec, %dec_label_pc_11338, %dec_label_pc_11300, %dec_label_pc_11350
  %v0_11364 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11364, i32* %r5.global-to-local, align 4
  %v0_11368 = load i32, i32* %r7.global-to-local, align 4
  %v2_11368 = inttoptr i32 %v0_11364 to i32*
  store i32 %v0_11368, i32* %v2_11368, align 4
  br label %dec_label_pc_11388

dec_label_pc_112c0.dec_label_pc_11370.loopexit_crit_edge: ; preds = %dec_label_pc_112b8
  br label %dec_label_pc_11370

dec_label_pc_11370:                               ; preds = %dec_label_pc_1129c, %dec_label_pc_112c0.dec_label_pc_11370.loopexit_crit_edge, %dec_label_pc_112d0
  %v1_11370 = add i32 %v2_112a4, -12
  store i32 %v1_11370, i32* %r5.global-to-local, align 4
  %v3_11374 = inttoptr i32 %v1_11370 to i32*
  store i32 %arg3, i32* %v3_11374, align 4
  %v0_11378 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11378, i32* @r3, align 4
  %v0_1137c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1137c, i32* @r2, align 4
  %v0_11380 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11380, i32* @r1, align 4
  %v0_11384 = call i32 @function_11268()
  br label %dec_label_pc_11388

dec_label_pc_11388:                               ; preds = %dec_label_pc_11364, %dec_label_pc_11370
  %v0_11388 = load i32, i32* %r5.global-to-local, align 4
  %v2_1138c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1138c, i32* @r4, align 4
  ret i32 %v0_11388

; uselistorder directives
  uselistorder i32 %v3_11318, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_112dc, { 1, 0 }
  uselistorder i32 %v3_112bc, { 2, 3, 1, 0 }
  uselistorder i32 %v0_11308, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_11300, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_11268, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_11288, { 1, 0 }
  uselistorder i32* @ip, { 10, 11, 1, 12, 0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 4, 5, 6, 2, 7, 8, 3, 9 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11388, { 1, 0 }
  uselistorder label %dec_label_pc_11370, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11364, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_112b0, { 1, 0 }
}

define i32 @function_11390() local_unnamed_addr {
dec_label_pc_113ac.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_11390 = ptrtoint i32* %stack_var_-268 to i32
  %v1_113a0 = call i32 @function_1177c()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_113ac = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_113ac

dec_label_pc_113ac:                               ; preds = %dec_label_pc_113ac.lr.ph, %dec_label_pc_113ac
  %v1_113b0 = phi i32 [ 31, %dec_label_pc_113ac.lr.ph ], [ %v1_113bc, %dec_label_pc_113ac ]
  %v4_113b0 = mul i32 %v1_113b0, 4
  %v5_113b0 = add i32 %v4_113b0, %v2_113ac
  %v2_113b8 = add i32 %v5_113b0, -128
  %v3_113b8 = inttoptr i32 %v2_113b8 to i32*
  store i32 0, i32* %v3_113b8, align 4
  %v0_113bc = load i32, i32* %r1.global-to-local, align 4
  %v1_113bc = add i32 %v0_113bc, -1
  store i32 %v1_113bc, i32* %r1.global-to-local, align 4
  %v6_113bc = icmp slt i32 %v1_113bc, 0
  br i1 %v6_113bc, label %dec_label_pc_113c4, label %dec_label_pc_113ac

dec_label_pc_113c4:                               ; preds = %dec_label_pc_113ac
  %v2_113c4 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_113c4, i32* @r4, align 4
  store i32 %v2_113c4, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_113d0 = call i32 @function_10d4c()
  %v2_113d4 = icmp eq i32 %v0_113d0, 0
  br i1 %v2_113d4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_113c4
  store i32 %v2_113c4, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_113c4, %bb
  store i32 70632, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_113d4, i32 ptrtoint (i32* @global_var_108b0.649 to i32))
  %v2_113ec = load i32, i32* @global_var_1b204.651, align 4
  %v2_113f0 = icmp eq i32 %v2_113ec, 0
  br i1 %v2_113f0, label %dec_label_pc_113f8, label %dec_label_pc_11428

dec_label_pc_113f8:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1b204.651, align 4
  br label %dec_label_pc_11400

dec_label_pc_11400:                               ; preds = %dec_label_pc_11478, %dec_label_pc_113f8
  %v1_1140c = call i32 @function_1177c()
  %v1_11414 = call i32 @function_1232c(i32 6)
  store i32 70696, i32* @lr, align 4
  %v1_11424 = call i32 @function_1177c()
  %v2_1142c.pre = load i32, i32* @global_var_1b204.651, align 4
  br label %dec_label_pc_11428

dec_label_pc_11428:                               ; preds = %.thread1, %dec_label_pc_11400
  %v0_1149c = phi i32 [ %v2_113ec, %.thread1 ], [ %v2_1142c.pre, %dec_label_pc_11400 ]
  store i32 ptrtoint (i32* @global_var_1b204.651 to i32), i32* %ip.global-to-local, align 4
  %v7_11430 = icmp eq i32 %v0_1149c, 1
  br i1 %v7_11430, label %dec_label_pc_11460.lr.ph, label %dec_label_pc_11494

dec_label_pc_11460.lr.ph:                         ; preds = %dec_label_pc_11428
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1b204.651, align 4
  %v2_1144c = bitcast i32* %stack_var_-268 to i8*
  %v3_1144c = call i32 @function_121a0(i8* %v2_1144c, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11460

dec_label_pc_11460:                               ; preds = %dec_label_pc_11460.lr.ph, %dec_label_pc_11460
  %v1_11464 = phi i32 [ 31, %dec_label_pc_11460.lr.ph ], [ %v1_11470, %dec_label_pc_11460 ]
  %v4_11464 = mul i32 %v1_11464, 4
  %v5_11464 = add i32 %v4_11464, %v2_113ac
  %v2_1146c = add i32 %v5_11464, -264
  %v3_1146c = inttoptr i32 %v2_1146c to i32*
  store i32 -1, i32* %v3_1146c, align 4
  %v0_11470 = load i32, i32* %r1.global-to-local, align 4
  %v1_11470 = add i32 %v0_11470, -1
  store i32 %v1_11470, i32* %r1.global-to-local, align 4
  %v6_11470 = icmp slt i32 %v1_11470, 0
  br i1 %v6_11470, label %dec_label_pc_11478, label %dec_label_pc_11460

dec_label_pc_11478:                               ; preds = %dec_label_pc_11460
  store i32 %v2_11390, i32* %r1.global-to-local, align 4
  %v4_1148c = call i32 @function_11a68(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_11400

dec_label_pc_11494:                               ; preds = %dec_label_pc_11428
  %v7_11494 = icmp eq i32 %v0_1149c, 2
  br i1 %v7_11494, label %dec_label_pc_1149c, label %dec_label_pc_114a8

dec_label_pc_1149c:                               ; preds = %dec_label_pc_11494
  store i32 3, i32* @global_var_1b204.651, align 4
  %v0_114a4 = call i32 @function_11390()
  %v2_114a8.pre = load i32, i32* @global_var_1b204.651, align 4
  br label %dec_label_pc_114a8

dec_label_pc_114a8:                               ; preds = %dec_label_pc_11494, %dec_label_pc_1149c
  %v1_114b0 = phi i32 [ %v0_1149c, %dec_label_pc_11494 ], [ %v2_114a8.pre, %dec_label_pc_1149c ]
  %v7_114ac = icmp eq i32 %v1_114b0, 3
  br i1 %v7_114ac, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_114a8
  %v2_114b8 = load i32, i32* %ip.global-to-local, align 4
  %v3_114b8 = inttoptr i32 %v2_114b8 to i32*
  store i32 4, i32* %v3_114b8, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_114a8, %bb27
  call void @__pseudo_cond_branch(i1 %v7_114ac, i32 ptrtoint (i32* @global_var_11b80.653 to i32))
  br label %dec_label_pc_114c0

dec_label_pc_114c0:                               ; preds = %dec_label_pc_114c0, %.thread3
  %v0_114c0 = call i32 @function_11390()
  br label %dec_label_pc_114c0

; uselistorder directives
  uselistorder i32 %v1_11470, { 2, 1, 0 }
  uselistorder i32 %v1_113bc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 8, 3, 0, 1, 4, 5, 7, 6, 2 }
  uselistorder i32* @global_var_1b204.651, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder i32 6, { 13, 14, 71, 2, 29, 3, 16, 25, 17, 26, 18, 27, 15, 28, 0, 30, 19, 31, 4, 32, 33, 34, 5, 35, 36, 37, 38, 6, 39, 40, 41, 42, 7, 43, 8, 44, 45, 20, 46, 9, 47, 48, 49, 21, 50, 10, 51, 52, 22, 53, 54, 55, 56, 57, 23, 58, 11, 59, 64, 65, 66, 67, 68, 24, 69, 12, 70, 1, 60, 61, 62, 63 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_114a8, { 1, 0 }
  uselistorder label %dec_label_pc_11460, { 1, 0 }
  uselistorder label %dec_label_pc_11428, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_113ac, { 1, 0 }
}

define i32 @function_114d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_114d8:
  %stack_var_-16 = alloca i32, align 4
  %v2_114d8 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_114d8, i32* @r0, align 4
  %v5_114f4 = call i32 @function_11784(i32 %v2_114d8, i32 ptrtoint (i32* @global_var_1177c.624 to i32), i32 ptrtoint (i32* @global_var_1b154.656 to i32), i32 71556)
  %v1_11504 = call i32 @function_1177c()
  %v2_1150c = load i32, i32* @global_var_1b208.660, align 4
  %v2_11510 = icmp eq i32 %v2_1150c, 0
  br i1 %v2_11510, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_114d8
  call void @__pseudo_branch(i32 %v2_1150c)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_114d8, %bb
  store i32 %v2_114d8, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_11534.662 to i32), i32* @lr, align 4
  %v5_11530 = call i32 @function_11784(i32 %v2_114d8, i32 1, i32 ptrtoint (i32* @global_var_1b154.656 to i32), i32 71556)
  store i32 %v5_11530, i32* @r0, align 4
  %v1_11534 = call i32 @function_11710(i32 %v5_11530)
  store i1 true, i1* @cpsr_z, align 1
  %v0_11548 = load i32, i32* @r4, align 4
  %v1_1154c = call i32 @function_11b80(i32 %v0_11548)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_114d8, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_1177c, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5 }
  uselistorder i32 71556, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1b154.656 to i32), { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_1156c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1156c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1156c = load i32, i32* @r4, align 4
  store i32 %v3_1156c, i32* %stack_var_-20, align 4
  %v6_1156c = load i32, i32* @r5, align 4
  %v9_1156c = load i32, i32* @r6, align 4
  %v16_1156c = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v2_11570 = icmp eq i32 %arg1, 0
  %v2_11574 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_11570, label %dec_label_pc_116f8, label %dec_label_pc_1158c.preheader

dec_label_pc_1158c.preheader:                     ; preds = %dec_label_pc_1156c
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_1159417 = add i32 %v16_1156c, 124
  br label %dec_label_pc_11584

dec_label_pc_11584:                               ; preds = %dec_label_pc_1158c.preheader, %dec_label_pc_11584
  %v5_1159418 = phi i32 [ %v5_1159417, %dec_label_pc_1158c.preheader ], [ %v5_11594, %dec_label_pc_11584 ]
  %v2_11588 = add i32 %v5_1159418, -136
  %v3_11588 = inttoptr i32 %v2_11588 to i32*
  store i32 0, i32* %v3_11588, align 4
  %v0_1158c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_1158c = add i32 %v0_1158c.pre, -1
  store i32 %v1_1158c, i32* %r1.global-to-local, align 4
  %v6_1158c = icmp slt i32 %v1_1158c, 0
  %v4_11594 = mul i32 %v1_1158c, 4
  %v5_11594 = add i32 %v4_11594, %v16_1156c
  br i1 %v6_1158c, label %dec_label_pc_1159c, label %dec_label_pc_11584

dec_label_pc_1159c:                               ; preds = %dec_label_pc_11584
  %v2_1159c = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_1159c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_115ac = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_115ac, i32* %stack_var_-28, align 4
  %v0_115b4 = call i32 @function_10d4c()
  store i32 %v0_115b4, i32* %r0.global-to-local, align 4
  %v1_115b8 = load i32, i32* @r5, align 4
  %v5_115bc = icmp slt i32 %v0_115b4, %v1_115b8
  br i1 %v5_115bc, label %dec_label_pc_11700, label %dec_label_pc_115c0

dec_label_pc_115c0:                               ; preds = %dec_label_pc_1159c
  %v2_115c0 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_115c0, i32* @r4, align 4
  store i32 %v1_115b8, i32* %r0.global-to-local, align 4
  store i32 %v2_1159c, i32* %r1.global-to-local, align 4
  %v3_115d0 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_115d0 = call i32 @function_108b0(i32 %v1_115b8, %_TYPEDEF_sigset_t* %v3_115d0, i32 %v2_115c0)
  store i32 %v4_115d0, i32* %r0.global-to-local, align 4
  %v1_115d4 = load i32, i32* @r5, align 4
  %v9_115d4 = icmp eq i32 %v4_115d0, %v1_115d4
  br i1 %v9_115d4, label %dec_label_pc_115dc, label %dec_label_pc_11700

dec_label_pc_115dc:                               ; preds = %dec_label_pc_115c0
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_115c0, i32* %r0.global-to-local, align 4
  %v2_115e4 = call i32 @function_10d28(i32 %v2_115c0, i32 17)
  store i32 %v2_115e4, i32* %r0.global-to-local, align 4
  %v1_115e8 = load i32, i32* @r5, align 4
  %v9_115e8 = icmp eq i32 %v2_115e4, %v1_115e8
  br i1 %v9_115e8, label %dec_label_pc_11600.preheader, label %dec_label_pc_115dc.dec_label_pc_116c8_crit_edge

dec_label_pc_115dc.dec_label_pc_116c8_crit_edge:  ; preds = %dec_label_pc_115dc
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_116c8

dec_label_pc_11600.preheader:                     ; preds = %dec_label_pc_115dc
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_115f8

dec_label_pc_115f8:                               ; preds = %dec_label_pc_11600.preheader, %dec_label_pc_115f8
  %v5_1160816 = phi i32 [ %v5_1159417, %dec_label_pc_11600.preheader ], [ %v5_11608, %dec_label_pc_115f8 ]
  %v2_115fc = add i32 %v5_1160816, -136
  %v3_115fc = inttoptr i32 %v2_115fc to i32*
  store i32 0, i32* %v3_115fc, align 4
  %v0_11600.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11600 = add i32 %v0_11600.pre, -1
  store i32 %v1_11600, i32* %r1.global-to-local, align 4
  %v6_11600 = icmp slt i32 %v1_11600, 0
  %v4_11608 = mul i32 %v1_11600, 4
  %v5_11608 = add i32 %v4_11608, %v16_1156c
  br i1 %v6_11600, label %dec_label_pc_11610, label %dec_label_pc_115f8

dec_label_pc_11610:                               ; preds = %dec_label_pc_115f8
  store i32 %v2_1159c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_11618 = call i32 @function_10d4c()
  store i32 %v0_11618, i32* %r0.global-to-local, align 4
  %v1_1161c = icmp slt i32 %v0_11618, 0
  br i1 %v1_1161c, label %dec_label_pc_11700, label %dec_label_pc_11624

dec_label_pc_11624:                               ; preds = %dec_label_pc_11610
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_11630 = call i32 @function_11a68(i32 17, i32* null, i32 %v2_11574)
  store i32 %v4_11630, i32* %r0.global-to-local, align 4
  %v1_11634 = icmp slt i32 %v4_11630, 0
  br i1 %v1_11634, label %dec_label_pc_1163c, label %dec_label_pc_11664

dec_label_pc_1163c:                               ; preds = %dec_label_pc_11624
  %v0_1163c = call i32 @function_1095c()
  store i32 %v2_115c0, i32* %r1.global-to-local, align 4
  store i32 %v0_1163c, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_11650 = inttoptr i32 %v0_1163c to i32*
  %v2_11650 = load i32, i32* %v1_11650, align 4
  store i32 %v2_11650, i32* @r4, align 4
  %v3_11654 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_11654 = call i32 @function_108b0(i32 2, %_TYPEDEF_sigset_t* %v3_11654, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_1165c = load i32, i32* @r4, align 4
  %v1_1165c = load i32, i32* %r5.global-to-local, align 4
  %v2_1165c = inttoptr i32 %v1_1165c to i32*
  store i32 %v0_1165c, i32* %v2_1165c, align 4
  %v17_11708.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11704

dec_label_pc_11664:                               ; preds = %dec_label_pc_11624
  %v2_11664 = load i32, i32* %stack_var_-424, align 4
  %v7_11668 = icmp eq i32 %v2_11664, 1
  %v2_11670 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_11670, i32* @r4, align 4
  br i1 %v7_11668, label %dec_label_pc_11678, label %dec_label_pc_116ac

dec_label_pc_11678:                               ; preds = %dec_label_pc_11664
  store i32 %v2_11670, i32* %r1.global-to-local, align 4
  store i32 %v2_11670, i32* %r0.global-to-local, align 4
  %v2_11680 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_11680 = call i32 @function_11c58(%timespec* %v2_11680, i32 %v2_11670)
  store i32 %v3_11680, i32* %r0.global-to-local, align 4
  store i32 %v3_11680, i32* %r6.global-to-local, align 4
  %v0_11688 = call i32 @function_1095c()
  store i32 %v2_115c0, i32* %r1.global-to-local, align 4
  store i32 %v0_11688, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_1169c = inttoptr i32 %v0_11688 to i32*
  %v2_1169c = load i32, i32* %v1_1169c, align 4
  store i32 %v2_1169c, i32* @r4, align 4
  %v3_116a0 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_116a0 = call i32 @function_108b0(i32 2, %_TYPEDEF_sigset_t* %v3_116a0, i32 0)
  store i32 %v4_116a0, i32* %r0.global-to-local, align 4
  %v0_116a4 = load i32, i32* @r4, align 4
  %v1_116a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_116a4 = inttoptr i32 %v1_116a4 to i32*
  store i32 %v0_116a4, i32* %v2_116a4, align 4
  %v0_116d4.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_116d4

dec_label_pc_116ac:                               ; preds = %dec_label_pc_11664
  store i32 %v2_115c0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_116b8 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_116b8 = call i32 @function_108b0(i32 2, %_TYPEDEF_sigset_t* %v3_116b8, i32 0)
  store i32 %v4_116b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_116c8

dec_label_pc_116c8:                               ; preds = %dec_label_pc_115dc.dec_label_pc_116c8_crit_edge, %dec_label_pc_116ac
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_115dc.dec_label_pc_116c8_crit_edge ], [ %v2_11670, %dec_label_pc_116ac ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_116cc = bitcast i32* %stack_var_-28 to %timespec*
  %v3_116cc = call i32 @function_11c58(%timespec* %v2_116cc, i32 %storemerge.pre-phi)
  store i32 %v3_116cc, i32* %r0.global-to-local, align 4
  store i32 %v3_116cc, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_116d4

dec_label_pc_116d4:                               ; preds = %dec_label_pc_11678, %dec_label_pc_116c8
  %v0_116d4 = phi i32 [ %v0_116d4.pr, %dec_label_pc_11678 ], [ %v3_116cc, %dec_label_pc_116c8 ]
  %v2_116d4 = icmp eq i32 %v0_116d4, 0
  br i1 %v2_116d4, label %dec_label_pc_116f8, label %dec_label_pc_116dc

dec_label_pc_116dc:                               ; preds = %dec_label_pc_116d4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_116e4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_116e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11704

dec_label_pc_116f8:                               ; preds = %dec_label_pc_1156c, %dec_label_pc_116d4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11704

dec_label_pc_11700:                               ; preds = %dec_label_pc_115c0, %dec_label_pc_11610, %dec_label_pc_1159c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11704

dec_label_pc_11704:                               ; preds = %dec_label_pc_116dc, %dec_label_pc_116f8, %dec_label_pc_1163c, %dec_label_pc_11700
  %v17_11708 = phi i32 [ %v3_116e4, %dec_label_pc_116dc ], [ 0, %dec_label_pc_116f8 ], [ %v17_11708.pre, %dec_label_pc_1163c ], [ -1, %dec_label_pc_11700 ]
  %v2_11708 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11708, i32* @r4, align 4
  store i32 %v6_1156c, i32* @r5, align 4
  store i32 %v9_1156c, i32* @r6, align 4
  ret i32 %v17_11708

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_11670, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_11600, { 0, 2, 1 }
  uselistorder i32 %v2_115c0, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_115b8, { 1, 0, 2 }
  uselistorder i32 %v1_1158c, { 0, 2, 1 }
  uselistorder i32 %v16_1156c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 11, 10, 13, 14, 12, 16, 15, 17, 19, 18, 22, 20, 21, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_11a68, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_108b0, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_10d4c, { 2, 1, 0, 3, 4 }
  uselistorder i32 17, { 2, 15, 16, 3, 17, 18, 4, 0, 14, 5, 6, 7, 8, 19, 9, 20, 10, 21, 11, 22, 12, 23, 24, 1, 25, 26, 27, 13, 28, 29, 30, 31, 32 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder i32* @r6, { 62, 63, 198, 199, 200, 201, 202, 203, 204, 205, 218, 230, 231, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 3, 4, 39, 40, 5, 6, 14, 7, 8, 9, 10, 11, 12, 13, 41, 42, 15, 43, 44, 45, 46, 47, 48, 54, 55, 49, 50, 51, 52, 53, 232, 233, 234, 235, 0, 56, 57, 58, 59, 60, 61, 64, 65, 66, 69, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 107, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 123, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 1, 171, 172, 173, 174, 175, 176, 177, 178, 179, 187, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 236, 237, 238, 239, 247, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 223, 220, 221, 222, 224, 225, 2, 226, 227, 228, 229 }
  uselistorder label %dec_label_pc_11704, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_11700, { 1, 0, 2 }
  uselistorder label %dec_label_pc_116f8, { 1, 0 }
  uselistorder label %dec_label_pc_116d4, { 1, 0 }
  uselistorder label %dec_label_pc_116c8, { 1, 0 }
  uselistorder label %dec_label_pc_115f8, { 1, 0 }
  uselistorder label %dec_label_pc_11584, { 1, 0 }
}

define i32 @function_11710(i32 %arg1) local_unnamed_addr {
dec_label_pc_1173c:
  %stack_var_-8 = alloca i32, align 4
  %v3_11710 = load i32, i32* @r4, align 4
  store i32 %v3_11710, i32* %stack_var_-8, align 4
  %v2_11740 = load i32, i32* @global_var_1b218.669, align 4
  %v2_11744 = icmp eq i32 %v2_11740, 0
  br i1 %v2_11744, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_1173c
  store i32 71504, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_11740)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1173c, %bb
  %v2_11754 = load i32, i32* @global_var_1b21c.671, align 4
  %v2_11758 = icmp eq i32 %v2_11754, 0
  br i1 %v2_11758, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_1175c = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_1175c, i32* @r4, align 4
  %v9_1175c = load i32, i32* @r0, align 4
  ret i32 %v9_1175c

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_11768.672 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_11754)
  %v2_11768 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11768, i32* @r4, align 4
  %v8_11768 = load i32, i32* @r0, align 4
  ret i32 %v8_11768

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1177c() local_unnamed_addr {
dec_label_pc_1177c:
  ret i32 0
}

define i32 @function_11784(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11784:
  %v1_11784 = load i32, i32* @r0, align 4
  ret i32 %v1_11784
}

define i32 @function_11788(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11788:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11788 = load i32, i32* @r4, align 4
  store i32 %v3_11788, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_11798 = call i32 @function_1059c(i32 %arg1, i32 1)
  %v7_1179c = icmp eq i32 %v2_11798, -1
  br i1 %v7_1179c, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_11788
  %v3_117a0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_117a0, i32* @r4, align 4
  ret i32 %v2_11798

bb4:                                              ; preds = %dec_label_pc_11788
  %v0_117a4 = load i32, i32* @r4, align 4
  %v4_117ac = call i32 @function_1078c(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_12b00.674, i32 0, i32 0), i32 %v0_117a4)
  %v1_117b0 = load i32, i32* %r5.global-to-local, align 4
  %v9_117b0 = icmp eq i32 %v4_117ac, %v1_117b0
  br i1 %v9_117b0, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_117b4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_117b4, i32* @r4, align 4
  ret i32 %v4_117ac

bb6:                                              ; preds = %bb4
  %v0_117b8 = call i32 @function_11390()
  %v0_117bc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_117bc, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %v5_117bc = mul i32 %v0_117b8, 4194304
  %v6_117bc = and i32 %v5_117bc, %v0_117a4
  store i32 %v6_117bc, i32* @r2, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_117b8

; uselistorder directives
  uselistorder i32 %v0_117b8, { 1, 0 }
  uselistorder i32 %v2_11798, { 1, 0 }
  uselistorder i1* @cpsr_z, { 11, 10, 0, 1, 12, 9, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i32 ()* @function_11390, { 2, 1, 0, 3 }
  uselistorder i32 (i8*, i32)* @function_1078c, { 4, 0, 1, 2, 3 }
  uselistorder i32 (i32, i32)* @function_1059c, { 0, 8, 7, 10, 9, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_117c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_117c0:
  %v2_117c4 = load i32, i32* @global_var_1b220.676, align 4
  %v2_117c8 = icmp eq i32 %v2_117c4, 0
  br i1 %v2_117c8, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_117c0
  %v6_117d4 = load i32, i32* @r0, align 4
  ret i32 %v6_117d4

bb2:                                              ; preds = %dec_label_pc_117c0
  store i32 1, i32* @global_var_1b220.676, align 4
  store i32 4096, i32* @global_var_1b214.630, align 4
  ret i32 undef
}

define i32 @function_1181c(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_1181c:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_11820 = mul i32 %arg2, 4
  %v5_11820 = add i32 %tmp, %v4_11820
  %v2_11824 = load i32, i32* %arg3, align 4
  %v2_11828 = ptrtoint i32* %stack_var_-120 to i32
  %v1_1182c = add i32 %v5_11820, 4
  %v9_11830 = icmp eq i32 %v1_1182c, %v2_11824
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1b20c.681, align 4
  store i32 %v1_1182c, i32* @global_var_1b210.683, align 4
  store i32 %arg6, i32* @global_var_1b21c.671, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_11830, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_1181c
  store i32 %v5_11820, i32* @global_var_1b210.683, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_1181c, %bb
  %v2_11870 = bitcast i32* %stack_var_-120 to i8*
  %v3_11870 = call i32 @function_121a0(i8* %v2_11870, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1b210.683, align 4
  br label %dec_label_pc_11880

dec_label_pc_11880:                               ; preds = %dec_label_pc_11880, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_11880, %dec_label_pc_11880 ]
  %v1_11880 = inttoptr i32 %storemerge to i32*
  %v2_11880 = load i32, i32* %v1_11880, align 4
  %v4_11880 = add i32 %storemerge, 4
  %v2_11884 = icmp eq i32 %v2_11880, 0
  br i1 %v2_11884, label %dec_label_pc_11890, label %dec_label_pc_11880

dec_label_pc_11890:                               ; preds = %dec_label_pc_11880
  store i32 %v4_11880, i32* @r4, align 4
  %v1_118b022 = inttoptr i32 %v4_11880 to i32*
  %v2_118b023 = load i32, i32* %v1_118b022, align 4
  %v2_118b425 = icmp eq i32 %v2_118b023, 0
  br i1 %v2_118b425, label %dec_label_pc_118bc, label %dec_label_pc_11898

dec_label_pc_11898:                               ; preds = %dec_label_pc_11890, %dec_label_pc_118b0
  %v5_1189c = phi i32 [ %v2_118b0, %dec_label_pc_118b0 ], [ %v2_118b023, %dec_label_pc_11890 ]
  %v2_11898 = icmp ugt i32 %v5_1189c, 13
  %v7_11898 = icmp eq i32 %v5_1189c, 14
  %v2_1189c = xor i1 %v2_11898, true
  %v3_1189c = or i1 %v7_11898, %v2_1189c
  br i1 %v3_1189c, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_11898
  %v6_1189c = and i32 %v5_1189c, 536870912
  %v7_1189c = icmp ne i32 %v6_1189c, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_11898, %bb42
  %v1_118a8 = phi i1 [ %v2_11898, %dec_label_pc_11898 ], [ %v7_1189c, %bb42 ]
  %v2_118a0 = xor i1 %v1_118a8, true
  %v3_118a0 = or i1 %v7_11898, %v2_118a0
  br i1 %v3_118a0, label %bb44, label %dec_label_pc_118b0

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_118b0

dec_label_pc_118b0:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_118a0, i32 ptrtoint (i32* @global_var_109a0.685 to i32))
  %v0_118ac = load i32, i32* @r4, align 4
  %v1_118ac = add i32 %v0_118ac, 8
  store i32 %v1_118ac, i32* @r4, align 4
  %v1_118b0 = inttoptr i32 %v1_118ac to i32*
  %v2_118b0 = load i32, i32* %v1_118b0, align 4
  %v2_118b4 = icmp eq i32 %v2_118b0, 0
  br i1 %v2_118b4, label %dec_label_pc_118bc, label %dec_label_pc_11898

dec_label_pc_118bc:                               ; preds = %dec_label_pc_118b0, %dec_label_pc_11890
  %v1_118c0 = call i32 @function_12344(i32 %v2_11828)
  store i32 %v1_118c0, i32* @r0, align 4
  %v1_118c4 = call i32 @function_117c0(i32 %v1_118c0)
  store i32 %v1_118c4, i32* @r0, align 4
  %v2_118d0 = icmp eq i32 %tmp37, 0
  br i1 %v2_118d0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_118bc
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_118bc, %bb45
  %v0_118e0 = phi i32 [ %tmp37, %dec_label_pc_118bc ], [ 4096, %bb45 ]
  %v3_118d8 = icmp eq i32 %tmp36, -1
  %v8_118d8 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1b214.630 to i32), i32* @r2, align 4
  store i32 %v0_118e0, i32* @global_var_1b214.630, align 4
  br i1 %v3_118d8, label %dec_label_pc_118e8, label %dec_label_pc_11910

dec_label_pc_118e8:                               ; preds = %bb46
  %v0_118e8 = call i32 @function_11c2c()
  store i32 %v0_118e8, i32* @r0, align 4
  store i32 %v0_118e8, i32* @r4, align 4
  %v0_118f0 = call i32 @function_11bd4()
  %v0_118f4 = load i32, i32* @r4, align 4
  %v9_118f4 = icmp eq i32 %v0_118f4, %v0_118f0
  br i1 %v9_118f4, label %dec_label_pc_118fc, label %dec_label_pc_11938

dec_label_pc_118fc:                               ; preds = %dec_label_pc_118e8
  %v1_118fc = call i32 @function_11c00(i32 %v0_118f0)
  store i32 %v1_118fc, i32* @r0, align 4
  store i32 %v1_118fc, i32* @r4, align 4
  %v0_11904 = call i32 @function_11ba8()
  %v0_11908 = load i32, i32* @r4, align 4
  %v9_11908 = icmp eq i32 %v0_11908, %v0_11904
  br i1 %v9_11908, label %dec_label_pc_11910, label %dec_label_pc_11938

dec_label_pc_11910:                               ; preds = %dec_label_pc_118fc, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_118d8, label %dec_label_pc_119a4, label %dec_label_pc_1191c

dec_label_pc_1191c:                               ; preds = %dec_label_pc_11910
  %v9_11920 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_11920, label %dec_label_pc_11928, label %dec_label_pc_11938

dec_label_pc_11928:                               ; preds = %dec_label_pc_1191c
  br label %dec_label_pc_11938

dec_label_pc_11938:                               ; preds = %dec_label_pc_11928, %dec_label_pc_1191c, %dec_label_pc_118fc, %dec_label_pc_118e8
  %v2_11940 = call i32 @function_11788(i32 0, i32 32768)
  %v2_1194c = call i32 @function_11788(i32 1, i32 32770)
  %v2_11958 = call i32 @function_11788(i32 2, i32 32770)
  br label %dec_label_pc_119a4

dec_label_pc_119a4:                               ; preds = %dec_label_pc_11938, %dec_label_pc_11910
  %v0_11968 = load i32, i32* %r6.global-to-local, align 4
  %v1_11968 = inttoptr i32 %v0_11968 to i32*
  %v2_11968 = load i32, i32* %v1_11968, align 4
  store i32 %v2_11968, i32* @global_var_1b16c, align 4
  store i32 %arg5, i32* @global_var_1b218.669, align 4
  %v2_119a4 = icmp eq i32 %arg4, 0
  br i1 %v2_119a4, label %dec_label_pc_119e0, label %bb47

bb47:                                             ; preds = %dec_label_pc_119a4
  br label %dec_label_pc_119e0

dec_label_pc_119e0:                               ; preds = %dec_label_pc_119a4, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_119f0 = call i32 @function_1095c()
  %v2_119f8 = inttoptr i32 %v1_119f0 to i32*
  store i32 0, i32* %v2_119f8, align 4
  %v0_11a24 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_11a30 = call i32 @function_114d8(i32 %v0_11a24)
  ret i32 %v1_11a30

; uselistorder directives
  uselistorder i32 %v2_118b0, { 1, 0 }
  uselistorder i32 %v1_118ac, { 1, 0 }
  uselistorder i1 %v2_11898, { 1, 0 }
  uselistorder i32 %v4_11880, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_114d8, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_11788, { 1, 0, 2 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1b214.630, { 1, 4, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 10, 8, 9, 6, 7, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 74, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 98, 44, 48, 54, 75, 55, 99, 15, 16, 17, 76, 67, 77, 78, 79, 49, 18, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 19, 20, 96, 97, 66, 47, 13, 14, 65, 12, 100, 32, 31, 56, 61, 57, 62, 52, 60, 53, 64, 101, 21, 102, 103, 22, 23, 24, 104, 68, 69, 25, 26, 105, 70, 71, 27, 28, 106, 72, 73, 29, 30, 51, 107, 108, 63, 109, 45, 58, 33, 46, 34, 35, 36, 59, 37, 50, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 14, { 17, 7, 2, 8, 3, 9, 4, 5, 6, 10, 11, 0, 12, 13, 14, 15, 1, 16 }
  uselistorder i32 13, { 15, 16, 17, 4, 19, 18, 5, 20, 6, 21, 7, 22, 23, 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 0, 31, 32, 33, 34, 35, 1, 36, 37, 38, 39, 40, 41, 42, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 3, 55, 56 }
  uselistorder i32 (i8*, i32)* @function_121a0, { 2, 1, 0 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_119e0, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_118b0, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_11898, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_11a68(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11a68:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_11a68 = load i32, i32* @r4, align 4
  %v6_11a68 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_11a6c = icmp eq i32* %arg2, null
  %v2_11a70 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_11a6c, label %dec_label_pc_11adc, label %dec_label_pc_11a80

dec_label_pc_11a80:                               ; preds = %dec_label_pc_11a68
  %v2_11a84 = load i32, i32* %arg2, align 4
  %v4_11a84 = add i32 %tmp, 4
  store i32 %v4_11a84, i32* @r1, align 4
  %v2_11a88 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_11a88, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_11a84, i32* %stack_var_-156, align 4
  %v3_11a94 = call i32 @function_109a0(i32 %v2_11a88, i32 %v4_11a84, i32 128)
  store i32 %v3_11a94, i32* %r0.global-to-local, align 4
  %v0_11a98 = load i32, i32* @r4, align 4
  %v1_11a98 = add i32 %v0_11a98, 132
  %v2_11a98 = inttoptr i32 %v1_11a98 to i32*
  %v3_11a98 = load i32, i32* %v2_11a98, align 4
  %v1_11a9c = and i32 %v3_11a98, 67108864
  %v2_11a9c = icmp eq i32 %v1_11a9c, 0
  br i1 %v2_11a9c, label %dec_label_pc_11ab0, label %bb

bb:                                               ; preds = %dec_label_pc_11a80
  br label %dec_label_pc_11acc

dec_label_pc_11ab0:                               ; preds = %dec_label_pc_11a80
  %v1_11ab8 = and i32 %v3_11a98, 4
  %v2_11ab8 = icmp eq i32 %v1_11ab8, 0
  br i1 %v2_11ab8, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_11ab0
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_11ab0, %bb20
  br label %dec_label_pc_11acc

dec_label_pc_11acc:                               ; preds = %bb, %bb21
  %v2_11acc = icmp eq i32 %v0_11a98, 0
  %v3_11ad0 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_11ad0 = select i1 %v2_11acc, i32 0, i32 %v3_11ad0
  %v0_11adc.pre = load i32, i32* @r5, align 4
  %v0_11aec.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11adc

dec_label_pc_11adc:                               ; preds = %dec_label_pc_11acc, %dec_label_pc_11a68
  %v0_11aec = phi i32 [ %arg1, %dec_label_pc_11a68 ], [ %v0_11aec.pre, %dec_label_pc_11acc ]
  %v0_11adc = phi i32 [ %arg3, %dec_label_pc_11a68 ], [ %v0_11adc.pre, %dec_label_pc_11acc ]
  %storemerge = phi i32 [ 0, %dec_label_pc_11a68 ], [ %.v3_11ad0, %dec_label_pc_11acc ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_11adc = icmp eq i32 %v0_11adc, 0
  %.v2_11a70 = select i1 %v2_11adc, i32 0, i32 %v2_11a70
  store i32 %.v2_11a70, i32* @r2, align 4
  store i32 %v0_11aec, i32* %r0.global-to-local, align 4
  %v1_11af0 = call i32 @function_11b54(i32 %v0_11aec)
  store i32 %v1_11af0, i32* %r0.global-to-local, align 4
  %v0_11af4 = load i32, i32* @r5, align 4
  %v2_11af4 = icmp eq i32 %v0_11af4, 0
  br i1 %v2_11af4, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_11adc
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_11adc, %bb25
  %v0_11b04.pr = phi i32 [ 0, %dec_label_pc_11adc ], [ 1, %bb25 ]
  %v1_11afc = icmp slt i32 %v1_11af0, 0
  br i1 %v1_11afc, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_11b38

thread-pre-split:                                 ; preds = %bb26
  %v2_11b04 = icmp eq i32 %v0_11b04.pr, 0
  store i32 %v1_11af0, i32* @r4, align 4
  br i1 %v2_11b04, label %dec_label_pc_11b38, label %dec_label_pc_11b10

dec_label_pc_11b10:                               ; preds = %thread-pre-split
  %v2_11b10 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_11af4, i32* %r0.global-to-local, align 4
  %v2_11b18 = inttoptr i32 %v0_11af4 to i32*
  store i32 %v2_11b10, i32* %v2_11b18, align 4
  %v3_11b18 = load i32, i32* %r0.global-to-local, align 4
  %v4_11b18 = add i32 %v3_11b18, 4
  store i32 %v4_11b18, i32* @r0, align 4
  %v2_11b1c = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_11b1c, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_11b24 = call i32 @function_109a0(i32 %v4_11b18, i32 %v2_11b1c, i32 128)
  store i32 %v3_11b24, i32* %r0.global-to-local, align 4
  %v1_11b2c = load i32, i32* @r5, align 4
  %v2_11b2c = add i32 %v1_11b2c, 136
  %v3_11b2c = inttoptr i32 %v2_11b2c to i32*
  %v1_11b34 = load i32, i32* @r5, align 4
  %v2_11b34 = add i32 %v1_11b34, 132
  %v3_11b34 = inttoptr i32 %v2_11b34 to i32*
  %v0_11b38.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11b38

dec_label_pc_11b38:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_11b10
  %v0_11b38 = phi i32 [ %v1_11af0, %thread-pre-split ], [ %v0_11b38.pre, %dec_label_pc_11b10 ], [ %v1_11af0, %thread-pre-split.thread ]
  store i32 %v0_11b38, i32* %r0.global-to-local, align 4
  store i32 %v3_11a68, i32* @r4, align 4
  store i32 %v6_11a68, i32* @r5, align 4
  ret i32 %v0_11b38

; uselistorder directives
  uselistorder i32 %v0_11b38, { 1, 0 }
  uselistorder i32 %v0_11af4, { 1, 0, 2 }
  uselistorder i32 %v0_11aec, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 1, 6, 7, 0 }
  uselistorder i32 (i32, i32, i32)* @function_109a0, { 1, 0, 2, 4, 3 }
  uselistorder i32 128, { 3, 22, 4, 23, 15, 7, 8, 9, 16, 0, 17, 10, 11, 12, 13, 14, 18, 1, 19, 2, 5, 6, 20, 21 }
  uselistorder label %dec_label_pc_11b38, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_11acc, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_11b54(i32 %arg1) local_unnamed_addr {
dec_label_pc_11b54:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11b54 = load i32, i32* @r4, align 4
  store i32 %v3_11b54, i32* %stack_var_-8, align 4
  %v1_11b58 = load i32, i32* @r1, align 4
  %v2_11b58 = inttoptr i32 %v1_11b58 to %sigaction*
  %v3_11b58 = load i32, i32* @r2, align 4
  %v4_11b58 = inttoptr i32 %v3_11b58 to %sigaction*
  %v5_11b58 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_11b58, %sigaction* %v4_11b58)
  store i32 %v5_11b58, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11b58, -4095
  br i1 %tmp, label %dec_label_pc_11b78, label %dec_label_pc_11b68

dec_label_pc_11b68:                               ; preds = %dec_label_pc_11b54
  %v0_11b68 = call i32 @function_1095c()
  %v0_11b6c = load i32, i32* %r4.global-to-local, align 4
  %v1_11b6c = sub i32 0, %v0_11b6c
  %v2_11b70 = inttoptr i32 %v0_11b68 to i32*
  store i32 %v1_11b6c, i32* %v2_11b70, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b78

dec_label_pc_11b78:                               ; preds = %dec_label_pc_11b54, %dec_label_pc_11b68
  %v0_11b78 = phi i32 [ %v5_11b58, %dec_label_pc_11b54 ], [ -1, %dec_label_pc_11b68 ]
  %v2_11b7c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11b7c, i32* %r4.global-to-local, align 4
  ret i32 %v0_11b78

; uselistorder directives
  uselistorder i32 %v5_11b58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b78, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_11b80(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_11b80:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_11ba8() local_unnamed_addr {
dec_label_pc_11ba8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11ba8 = load i32, i32* @r4, align 4
  store i32 %v3_11ba8, i32* %stack_var_-8, align 4
  %v0_11bb0 = load i32, i32* @r0, align 4
  store i32 %v0_11bb0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11bb0, -4095
  br i1 %tmp, label %dec_label_pc_11bcc, label %dec_label_pc_11bbc

dec_label_pc_11bbc:                               ; preds = %dec_label_pc_11ba8
  %v0_11bbc = call i32 @function_1095c()
  %v0_11bc0 = load i32, i32* %r4.global-to-local, align 4
  %v1_11bc0 = sub i32 0, %v0_11bc0
  %v2_11bc4 = inttoptr i32 %v0_11bbc to i32*
  store i32 %v1_11bc0, i32* %v2_11bc4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11bd0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11bcc

dec_label_pc_11bcc:                               ; preds = %dec_label_pc_11ba8, %dec_label_pc_11bbc
  %v2_11bd0 = phi i32 [ %v3_11ba8, %dec_label_pc_11ba8 ], [ %v2_11bd0.pre, %dec_label_pc_11bbc ]
  %v0_11bcc = phi i32 [ %v0_11bb0, %dec_label_pc_11ba8 ], [ -1, %dec_label_pc_11bbc ]
  store i32 %v2_11bd0, i32* @r4, align 4
  ret i32 %v0_11bcc

; uselistorder directives
  uselistorder i32 %v0_11bb0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11bcc, { 1, 0 }
}

define i32 @function_11bd4() local_unnamed_addr {
dec_label_pc_11bd4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11bd4 = load i32, i32* @r4, align 4
  store i32 %v3_11bd4, i32* %stack_var_-8, align 4
  %v0_11bdc = load i32, i32* @r0, align 4
  store i32 %v0_11bdc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11bdc, -4095
  br i1 %tmp, label %dec_label_pc_11bf8, label %dec_label_pc_11be8

dec_label_pc_11be8:                               ; preds = %dec_label_pc_11bd4
  %v0_11be8 = call i32 @function_1095c()
  %v0_11bec = load i32, i32* %r4.global-to-local, align 4
  %v1_11bec = sub i32 0, %v0_11bec
  %v2_11bf0 = inttoptr i32 %v0_11be8 to i32*
  store i32 %v1_11bec, i32* %v2_11bf0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11bfc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11bf8

dec_label_pc_11bf8:                               ; preds = %dec_label_pc_11bd4, %dec_label_pc_11be8
  %v2_11bfc = phi i32 [ %v3_11bd4, %dec_label_pc_11bd4 ], [ %v2_11bfc.pre, %dec_label_pc_11be8 ]
  %v0_11bf8 = phi i32 [ %v0_11bdc, %dec_label_pc_11bd4 ], [ -1, %dec_label_pc_11be8 ]
  store i32 %v2_11bfc, i32* @r4, align 4
  ret i32 %v0_11bf8

; uselistorder directives
  uselistorder i32 %v0_11bdc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11bf8, { 1, 0 }
}

define i32 @function_11c00(i32 %arg1) local_unnamed_addr {
dec_label_pc_11c00:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11c00 = load i32, i32* @r4, align 4
  store i32 %v3_11c00, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11c24, label %dec_label_pc_11c14

dec_label_pc_11c14:                               ; preds = %dec_label_pc_11c00
  %v0_11c14 = call i32 @function_1095c()
  %v0_11c18 = load i32, i32* %r4.global-to-local, align 4
  %v1_11c18 = sub i32 0, %v0_11c18
  %v2_11c1c = inttoptr i32 %v0_11c14 to i32*
  store i32 %v1_11c18, i32* %v2_11c1c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11c28.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11c24

dec_label_pc_11c24:                               ; preds = %dec_label_pc_11c00, %dec_label_pc_11c14
  %v2_11c28 = phi i32 [ %v3_11c00, %dec_label_pc_11c00 ], [ %v2_11c28.pre, %dec_label_pc_11c14 ]
  %v0_11c24 = phi i32 [ %arg1, %dec_label_pc_11c00 ], [ -1, %dec_label_pc_11c14 ]
  store i32 %v2_11c28, i32* %r4.global-to-local, align 4
  ret i32 %v0_11c24

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c24, { 1, 0 }
}

define i32 @function_11c2c() local_unnamed_addr {
dec_label_pc_11c2c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11c2c = load i32, i32* @r4, align 4
  store i32 %v3_11c2c, i32* %stack_var_-8, align 4
  %v0_11c34 = load i32, i32* @r0, align 4
  store i32 %v0_11c34, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11c34, -4095
  br i1 %tmp, label %dec_label_pc_11c50, label %dec_label_pc_11c40

dec_label_pc_11c40:                               ; preds = %dec_label_pc_11c2c
  %v0_11c40 = call i32 @function_1095c()
  %v0_11c44 = load i32, i32* %r4.global-to-local, align 4
  %v1_11c44 = sub i32 0, %v0_11c44
  %v2_11c48 = inttoptr i32 %v0_11c40 to i32*
  store i32 %v1_11c44, i32* %v2_11c48, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11c54.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11c50

dec_label_pc_11c50:                               ; preds = %dec_label_pc_11c2c, %dec_label_pc_11c40
  %v2_11c54 = phi i32 [ %v3_11c2c, %dec_label_pc_11c2c ], [ %v2_11c54.pre, %dec_label_pc_11c40 ]
  %v0_11c50 = phi i32 [ %v0_11c34, %dec_label_pc_11c2c ], [ -1, %dec_label_pc_11c40 ]
  store i32 %v2_11c54, i32* %r4.global-to-local, align 4
  ret i32 %v0_11c50

; uselistorder directives
  uselistorder i32 %v0_11c34, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c50, { 1, 0 }
}

define i32 @function_11c58(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c58:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_11c58 = load i32, i32* @r4, align 4
  store i32 %v3_11c58, i32* %stack_var_-8, align 4
  %v6_11c5c = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_11c5c, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_11c5c, -4095
  br i1 %tmp6, label %dec_label_pc_11c7c, label %dec_label_pc_11c6c

dec_label_pc_11c6c:                               ; preds = %dec_label_pc_11c58
  %v0_11c6c = call i32 @function_1095c()
  %v0_11c70 = load i32, i32* %r4.global-to-local, align 4
  %v1_11c70 = sub i32 0, %v0_11c70
  %v2_11c74 = inttoptr i32 %v0_11c6c to i32*
  store i32 %v1_11c70, i32* %v2_11c74, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11c7c

dec_label_pc_11c7c:                               ; preds = %dec_label_pc_11c58, %dec_label_pc_11c6c
  %v0_11c7c = phi i32 [ %v6_11c5c, %dec_label_pc_11c58 ], [ -1, %dec_label_pc_11c6c ]
  %v2_11c80 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11c80, i32* %r4.global-to-local, align 4
  ret i32 %v0_11c7c

; uselistorder directives
  uselistorder i32 %v6_11c5c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c7c, { 1, 0 }
}

define i32 @function_11c84(i32 %arg1) local_unnamed_addr {
dec_label_pc_11c84:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11c84 = load i32, i32* @r4, align 4
  store i32 %v3_11c84, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1b22c.702 to i32), i32* %r4.global-to-local, align 4
  %v2_11c8c = load i32, i32* @global_var_1b22c.702, align 4
  %v2_11c90 = icmp eq i32 %v2_11c8c, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_11c90, label %dec_label_pc_11ca0, label %dec_label_pc_11cac

dec_label_pc_11ca0:                               ; preds = %dec_label_pc_11c84
  %v2_11ca0 = call i32 @function_12368(i32* null)
  %v1_11ca4 = icmp slt i32 %v2_11ca0, 0
  br i1 %v1_11ca4, label %dec_label_pc_11ccc, label %dec_label_pc_11cacthread-pre-split

dec_label_pc_11cacthread-pre-split:               ; preds = %dec_label_pc_11ca0
  %v0_11cb0.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_11cac.pre = load i32, i32* @global_var_1b22c.702, align 4
  br label %dec_label_pc_11cac

dec_label_pc_11cac:                               ; preds = %dec_label_pc_11cacthread-pre-split, %dec_label_pc_11c84
  %v2_11cac = phi i32 [ %v2_11cac.pre, %dec_label_pc_11cacthread-pre-split ], [ %v2_11c8c, %dec_label_pc_11c84 ]
  %v1_11cb8 = phi i32 [ %v0_11cb0.pr, %dec_label_pc_11cacthread-pre-split ], [ %arg1, %dec_label_pc_11c84 ]
  %v2_11cb0 = icmp eq i32 %v1_11cb8, 0
  store i32 %v2_11cac, i32* %r4.global-to-local, align 4
  br i1 %v2_11cb0, label %dec_label_pc_11cd0, label %dec_label_pc_11cc0

dec_label_pc_11cc0:                               ; preds = %dec_label_pc_11cac
  %v2_11cb8 = add i32 %v1_11cb8, %v2_11cac
  %v1_11cc0 = inttoptr i32 %v2_11cb8 to i32*
  %v2_11cc0 = call i32 @function_12368(i32* %v1_11cc0)
  %v1_11cc4 = icmp slt i32 %v2_11cc0, 0
  br i1 %v1_11cc4, label %dec_label_pc_11ccc, label %dec_label_pc_11cc0.dec_label_pc_11cd0_crit_edge

dec_label_pc_11cc0.dec_label_pc_11cd0_crit_edge:  ; preds = %dec_label_pc_11cc0
  %v0_11cd0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11cd0

dec_label_pc_11ccc:                               ; preds = %dec_label_pc_11cc0, %dec_label_pc_11ca0
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11cd0

dec_label_pc_11cd0:                               ; preds = %dec_label_pc_11cc0.dec_label_pc_11cd0_crit_edge, %dec_label_pc_11cac, %dec_label_pc_11ccc
  %v0_11cd0 = phi i32 [ %v0_11cd0.pre, %dec_label_pc_11cc0.dec_label_pc_11cd0_crit_edge ], [ %v2_11cac, %dec_label_pc_11cac ], [ -1, %dec_label_pc_11ccc ]
  %v2_11cd4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11cd4, i32* @r4, align 4
  ret i32 %v0_11cd0

; uselistorder directives
  uselistorder i32 %v2_11cac, { 1, 0, 2 }
  uselistorder i32* null, { 0, 2, 4, 21, 22, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20 }
  uselistorder label %dec_label_pc_11cd0, { 2, 0, 1 }
}

define i32 @function_11cdc(%tms* %arg1) local_unnamed_addr {
dec_label_pc_11cdc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11cdc = load i32, i32* @r4, align 4
  store i32 %v3_11cdc, i32* %stack_var_-8, align 4
  %v3_11ce0 = call i32 @times(%tms* %arg1)
  store i32 %v3_11ce0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_11ce0, -4095
  br i1 %tmp, label %dec_label_pc_11d00, label %dec_label_pc_11cf0

dec_label_pc_11cf0:                               ; preds = %dec_label_pc_11cdc
  %v0_11cf0 = call i32 @function_1095c()
  %v0_11cf4 = load i32, i32* %r4.global-to-local, align 4
  %v1_11cf4 = sub i32 0, %v0_11cf4
  %v2_11cf8 = inttoptr i32 %v0_11cf0 to i32*
  store i32 %v1_11cf4, i32* %v2_11cf8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d00

dec_label_pc_11d00:                               ; preds = %dec_label_pc_11cdc, %dec_label_pc_11cf0
  %v0_11d00 = phi i32 [ %v3_11ce0, %dec_label_pc_11cdc ], [ -1, %dec_label_pc_11cf0 ]
  %v2_11d04 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11d04, i32* %r4.global-to-local, align 4
  ret i32 %v0_11d00

; uselistorder directives
  uselistorder i32 %v3_11ce0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d00, { 1, 0 }
}

define i32 @function_11d08(i32 %arg1) local_unnamed_addr {
dec_label_pc_11d08:
  ret i32 %arg1
}

define i32 @function_11d10() local_unnamed_addr {
dec_label_pc_11d10:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_11d10 = load i32, i32* @r1, align 4
  %v1_11d10 = load i32, i32* @r0, align 4
  %v2_11d10 = sub i32 %v0_11d10, %v1_11d10
  %v3_11d10 = icmp ult i32 %v0_11d10, %v1_11d10
  %v4_11d10 = xor i32 %v1_11d10, %v0_11d10
  %v5_11d10 = xor i32 %v2_11d10, %v0_11d10
  %v6_11d10 = and i32 %v5_11d10, %v4_11d10
  %v7_11d10 = icmp slt i32 %v6_11d10, 0
  store i1 %v7_11d10, i1* %cpsr_v.global-to-local, align 1
  %v8_11d10 = icmp slt i32 %v2_11d10, 0
  store i1 %v8_11d10, i1* %cpsr_n.global-to-local, align 1
  %v9_11d10 = icmp eq i32 %v0_11d10, %v1_11d10
  store i1 %v9_11d10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11d10, label %dec_label_pc_11f5c, label %dec_label_pc_11d18

dec_label_pc_11d18:                               ; preds = %dec_label_pc_11d10
  br i1 %v9_11d10, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_11d18
  %merge = phi i32 [ %v0_11d10, %dec_label_pc_11d18 ], [ %v2_11ff0, %bb141 ], [ %v11_1200c, %bb144 ], [ %v7_1200c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_11d18
  store i32 %v1_11d10, i32* %stack_var_-8, align 4
  %v0_11d20 = load i32, i32* @r2, align 4
  %v2_11d20 = add i32 %v0_11d20, -4
  store i32 %v2_11d20, i32* %r2.global-to-local, align 4
  %v4_11d20 = sub i32 3, %v0_11d20
  %v5_11d20 = and i32 %v4_11d20, %v0_11d20
  %v6_11d20 = icmp slt i32 %v5_11d20, 0
  store i1 %v6_11d20, i1* %cpsr_v.global-to-local, align 1
  %v7_11d20 = icmp slt i32 %v2_11d20, 0
  store i1 %v7_11d20, i1* %cpsr_n.global-to-local, align 1
  %v8_11d20 = icmp eq i32 %v0_11d20, 4
  store i1 %v8_11d20, i1* %cpsr_z.global-to-local, align 1
  %v5_11d24 = icmp slt i32 %v0_11d20, 4
  br i1 %v5_11d24, label %bb131, label %dec_label_pc_11d28

dec_label_pc_11d28:                               ; preds = %bb
  %v1_11d28 = urem i32 %v1_11d10, 4
  store i32 %v1_11d28, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11d28 = icmp eq i32 %v1_11d28, 0
  store i1 %v2_11d28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11d28, label %dec_label_pc_11d30, label %dec_label_pc_11dd4

dec_label_pc_11d30:                               ; preds = %dec_label_pc_11d28
  %v1_11d30 = urem i32 %v0_11d10, 4
  store i32 %v1_11d30, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11d30 = icmp eq i32 %v1_11d30, 0
  store i1 %v2_11d30, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_11d10 to i2
  br i1 %v2_11d30, label %dec_label_pc_11d38, label %dec_label_pc_11e04

dec_label_pc_11d38:                               ; preds = %dec_label_pc_11d30, %dec_label_pc_11dfc
  %v0_11d5092 = phi i32 [ %v1_11d10, %dec_label_pc_11d30 ], [ %v0_11e4c75, %dec_label_pc_11dfc ]
  %v0_11d4c91 = phi i32 [ %v0_11d10, %dec_label_pc_11d30 ], [ %v0_11dfc, %dec_label_pc_11dfc ]
  %v0_11d38 = phi i32 [ %v2_11d20, %dec_label_pc_11d30 ], [ %v2_11df4, %dec_label_pc_11dfc ]
  %v2_11d38 = add i32 %v0_11d38, -8
  store i32 %v2_11d38, i32* %r2.global-to-local, align 4
  %v4_11d38 = sub i32 7, %v0_11d38
  %v5_11d38 = and i32 %v4_11d38, %v0_11d38
  %v6_11d38 = icmp slt i32 %v5_11d38, 0
  store i1 %v6_11d38, i1* %cpsr_v.global-to-local, align 1
  %v7_11d38 = icmp slt i32 %v2_11d38, 0
  store i1 %v7_11d38, i1* %cpsr_n.global-to-local, align 1
  %v8_11d38 = icmp eq i32 %v0_11d38, 8
  store i1 %v8_11d38, i1* %cpsr_z.global-to-local, align 1
  %v5_11d3c = icmp slt i32 %v0_11d38, 8
  br i1 %v5_11d3c, label %dec_label_pc_11d8c, label %dec_label_pc_11d40

dec_label_pc_11d40:                               ; preds = %dec_label_pc_11d38
  %v2_11d40 = add i32 %v0_11d38, -28
  store i32 %v2_11d40, i32* %r2.global-to-local, align 4
  %v4_11d40 = sub i32 27, %v0_11d38
  %v5_11d40 = and i32 %v4_11d40, %v2_11d38
  %v6_11d40 = icmp slt i32 %v5_11d40, 0
  store i1 %v6_11d40, i1* %cpsr_v.global-to-local, align 1
  %v7_11d40 = icmp slt i32 %v2_11d40, 0
  store i1 %v7_11d40, i1* %cpsr_n.global-to-local, align 1
  %v8_11d40 = icmp eq i32 %v2_11d38, 20
  store i1 %v8_11d40, i1* %cpsr_z.global-to-local, align 1
  %v5_11d44 = icmp slt i32 %v2_11d38, 20
  br i1 %v5_11d44, label %dec_label_pc_11d78, label %dec_label_pc_11d48

dec_label_pc_11d48:                               ; preds = %dec_label_pc_11d40
  %v0_11d48 = load i32, i32* @r4, align 4
  store i32 %v0_11d48, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11d4c

dec_label_pc_11d4c:                               ; preds = %dec_label_pc_11d4c.dec_label_pc_11d4c_crit_edge, %dec_label_pc_11d48
  %v0_11d50 = phi i32 [ %v12_11d58, %dec_label_pc_11d4c.dec_label_pc_11d4c_crit_edge ], [ %v0_11d5092, %dec_label_pc_11d48 ]
  %v0_11d4c = phi i32 [ %v0_11d4c.pre, %dec_label_pc_11d4c.dec_label_pc_11d4c_crit_edge ], [ %v0_11d4c91, %dec_label_pc_11d48 ]
  %v1_11d4c = inttoptr i32 %v0_11d4c to i32*
  %v2_11d4c = load i32, i32* %v1_11d4c, align 4
  store i32 %v2_11d4c, i32* %r3.global-to-local, align 4
  %v3_11d4c = add i32 %v0_11d4c, 4
  %v4_11d4c = inttoptr i32 %v3_11d4c to i32*
  %v5_11d4c = load i32, i32* %v4_11d4c, align 4
  store i32 %v5_11d4c, i32* %r4.global-to-local, align 4
  %v6_11d4c = add i32 %v0_11d4c, 8
  %v7_11d4c = inttoptr i32 %v6_11d4c to i32*
  %v8_11d4c = load i32, i32* %v7_11d4c, align 4
  store i32 %v8_11d4c, i32* %ip.global-to-local, align 4
  %v9_11d4c = add i32 %v0_11d4c, 12
  %v10_11d4c = inttoptr i32 %v9_11d4c to i32*
  %v11_11d4c = load i32, i32* %v10_11d4c, align 4
  store i32 %v11_11d4c, i32* %lr.global-to-local, align 4
  %v12_11d4c = add i32 %v0_11d4c, 16
  store i32 %v12_11d4c, i32* %r1.global-to-local, align 4
  %v1_11d50 = inttoptr i32 %v0_11d50 to i32*
  store i32 %v2_11d4c, i32* %v1_11d50, align 4
  %v3_11d50 = add i32 %v0_11d50, 4
  %v4_11d50 = inttoptr i32 %v3_11d50 to i32*
  %v5_11d50 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11d50, i32* %v4_11d50, align 4
  %v6_11d50 = add i32 %v0_11d50, 8
  %v7_11d50 = inttoptr i32 %v6_11d50 to i32*
  %v8_11d50 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_11d50, i32* %v7_11d50, align 4
  %v9_11d50 = add i32 %v0_11d50, 12
  %v10_11d50 = inttoptr i32 %v9_11d50 to i32*
  %v11_11d50 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_11d50, i32* %v10_11d50, align 4
  %v12_11d50 = add i32 %v0_11d50, 16
  store i32 %v12_11d50, i32* %r0.global-to-local, align 4
  %v0_11d54 = load i32, i32* %r1.global-to-local, align 4
  %v1_11d54 = inttoptr i32 %v0_11d54 to i32*
  %v2_11d54 = load i32, i32* %v1_11d54, align 4
  store i32 %v2_11d54, i32* %r3.global-to-local, align 4
  %v3_11d54 = add i32 %v0_11d54, 4
  %v4_11d54 = inttoptr i32 %v3_11d54 to i32*
  %v5_11d54 = load i32, i32* %v4_11d54, align 4
  store i32 %v5_11d54, i32* %r4.global-to-local, align 4
  %v6_11d54 = add i32 %v0_11d54, 8
  %v7_11d54 = inttoptr i32 %v6_11d54 to i32*
  %v8_11d54 = load i32, i32* %v7_11d54, align 4
  store i32 %v8_11d54, i32* %ip.global-to-local, align 4
  %v9_11d54 = add i32 %v0_11d54, 12
  %v10_11d54 = inttoptr i32 %v9_11d54 to i32*
  %v11_11d54 = load i32, i32* %v10_11d54, align 4
  store i32 %v11_11d54, i32* @lr, align 4
  %v12_11d54 = add i32 %v0_11d54, 16
  store i32 %v12_11d54, i32* @r1, align 4
  %v1_11d58 = inttoptr i32 %v12_11d50 to i32*
  store i32 %v2_11d54, i32* %v1_11d58, align 4
  %v3_11d58 = add i32 %v0_11d50, 20
  %v4_11d58 = inttoptr i32 %v3_11d58 to i32*
  %v5_11d58 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11d58, i32* %v4_11d58, align 4
  %v6_11d58 = add i32 %v0_11d50, 24
  %v7_11d58 = inttoptr i32 %v6_11d58 to i32*
  %v8_11d58 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_11d58, i32* %v7_11d58, align 4
  %v9_11d58 = add i32 %v0_11d50, 28
  %v10_11d58 = inttoptr i32 %v9_11d58 to i32*
  %v11_11d58 = load i32, i32* @lr, align 4
  store i32 %v11_11d58, i32* %v10_11d58, align 4
  %v12_11d58 = add i32 %v0_11d50, 32
  store i32 %v12_11d58, i32* @r0, align 4
  %v0_11d5c = load i32, i32* %r2.global-to-local, align 4
  %v2_11d5c = add i32 %v0_11d5c, -32
  store i32 %v2_11d5c, i32* %r2.global-to-local, align 4
  %v6_11d60 = icmp slt i32 %v0_11d5c, 32
  br i1 %v6_11d60, label %dec_label_pc_11d64, label %dec_label_pc_11d4c.dec_label_pc_11d4c_crit_edge

dec_label_pc_11d4c.dec_label_pc_11d4c_crit_edge:  ; preds = %dec_label_pc_11d4c
  %v0_11d4c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_11d4c

dec_label_pc_11d64:                               ; preds = %dec_label_pc_11d4c
  %v4_11d64 = add i32 %v0_11d5c, -16
  %v6_11d64 = add i32 %v0_11d5c, 2147483616
  %v7_11d64 = and i32 %v4_11d64, %v6_11d64
  %v8_11d64 = icmp slt i32 %v7_11d64, 0
  store i1 %v8_11d64, i1* %cpsr_v.global-to-local, align 1
  %v9_11d64 = icmp slt i32 %v4_11d64, 0
  store i1 %v9_11d64, i1* %cpsr_n.global-to-local, align 1
  %v10_11d64 = icmp eq i32 %v4_11d64, 0
  store i1 %v10_11d64, i1* %cpsr_z.global-to-local, align 1
  %v5_11d68 = icmp slt i32 %v2_11d5c, -16
  br i1 %v5_11d68, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_11d64
  %v6_11d68 = load i32, i32* @r1, align 4
  %v7_11d68 = inttoptr i32 %v6_11d68 to i32*
  %v8_11d68 = load i32, i32* %v7_11d68, align 4
  store i32 %v8_11d68, i32* %r3.global-to-local, align 4
  %v9_11d68 = add i32 %v6_11d68, 4
  %v10_11d68 = inttoptr i32 %v9_11d68 to i32*
  %v11_11d68 = load i32, i32* %v10_11d68, align 4
  store i32 %v11_11d68, i32* %r4.global-to-local, align 4
  %v12_11d68 = add i32 %v6_11d68, 8
  %v13_11d68 = inttoptr i32 %v12_11d68 to i32*
  %v14_11d68 = load i32, i32* %v13_11d68, align 4
  store i32 %v14_11d68, i32* %ip.global-to-local, align 4
  %v15_11d68 = add i32 %v6_11d68, 12
  %v16_11d68 = inttoptr i32 %v15_11d68 to i32*
  %v17_11d68 = load i32, i32* %v16_11d68, align 4
  store i32 %v17_11d68, i32* @lr, align 4
  %v18_11d68 = add i32 %v6_11d68, 16
  store i32 %v18_11d68, i32* @r1, align 4
  %v7_11d6c = inttoptr i32 %v12_11d58 to i32*
  store i32 %v8_11d68, i32* %v7_11d6c, align 4
  %v9_11d6c = add i32 %v0_11d50, 36
  %v10_11d6c = inttoptr i32 %v9_11d6c to i32*
  %v11_11d6c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_11d6c, i32* %v10_11d6c, align 4
  %v12_11d6c = add i32 %v0_11d50, 40
  %v13_11d6c = inttoptr i32 %v12_11d6c to i32*
  %v14_11d6c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v14_11d6c, i32* %v13_11d6c, align 4
  %v15_11d6c = add i32 %v0_11d50, 44
  %v16_11d6c = inttoptr i32 %v15_11d6c to i32*
  %v17_11d6c = load i32, i32* @lr, align 4
  store i32 %v17_11d6c, i32* %v16_11d6c, align 4
  %v18_11d6c = add i32 %v0_11d50, 48
  store i32 %v18_11d6c, i32* @r0, align 4
  %v6_11d70 = load i32, i32* %r2.global-to-local, align 4
  %v7_11d70 = add i32 %v6_11d70, -16
  store i32 %v7_11d70, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11d64, %bb128
  %v3_11d80101 = phi i32 [ %v12_11d58, %dec_label_pc_11d64 ], [ %v18_11d6c, %bb128 ]
  %v0_11d7895 = phi i32 [ %v2_11d5c, %dec_label_pc_11d64 ], [ %v7_11d70, %bb128 ]
  %v2_11d74 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11d74, i32* @r4, align 4
  br label %dec_label_pc_11d78

dec_label_pc_11d78:                               ; preds = %dec_label_pc_11d40, %.thread1
  %v3_11d80100 = phi i32 [ %v0_11d5092, %dec_label_pc_11d40 ], [ %v3_11d80101, %.thread1 ]
  %v0_11d78 = phi i32 [ %v2_11d40, %dec_label_pc_11d40 ], [ %v0_11d7895, %.thread1 ]
  %v1_11d78 = add i32 %v0_11d78, 20
  store i32 %v1_11d78, i32* %r2.global-to-local, align 4
  %v3_11d78 = sub i32 0, %v0_11d78
  %v4_11d78 = and i32 %v1_11d78, %v3_11d78
  %v5_11d78 = icmp slt i32 %v4_11d78, 0
  store i1 %v5_11d78, i1* %cpsr_v.global-to-local, align 1
  %v6_11d78 = icmp slt i32 %v1_11d78, 0
  store i1 %v6_11d78, i1* %cpsr_n.global-to-local, align 1
  %v7_11d78 = icmp eq i32 %v1_11d78, 0
  store i1 %v7_11d78, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11d7c

dec_label_pc_11d7c:                               ; preds = %.thread117, %dec_label_pc_11d78
  %v0_11d8c.pre147 = phi i32 [ %v0_11d8c.pre, %.thread117 ], [ %v1_11d78, %dec_label_pc_11d78 ]
  %v3_11d80 = phi i32 [ %v3_11d8098118, %.thread117 ], [ %v3_11d80100, %dec_label_pc_11d78 ]
  %v1_11d84 = phi i1 [ %v1_11d88, %.thread117 ], [ %v5_11d78, %dec_label_pc_11d78 ]
  %v0_11d84 = phi i1 [ %v0_11d88, %.thread117 ], [ %v6_11d78, %dec_label_pc_11d78 ]
  %v2_11d7c = xor i1 %v1_11d84, %v0_11d84
  br i1 %v2_11d7c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_11d7c
  %v3_11d7c = load i32, i32* @r1, align 4
  %v4_11d7c = inttoptr i32 %v3_11d7c to i32*
  %v5_11d7c = load i32, i32* %v4_11d7c, align 4
  store i32 %v5_11d7c, i32* %r3.global-to-local, align 4
  %v6_11d7c = add i32 %v3_11d7c, 4
  %v7_11d7c = inttoptr i32 %v6_11d7c to i32*
  %v8_11d7c = load i32, i32* %v7_11d7c, align 4
  store i32 %v8_11d7c, i32* %ip.global-to-local, align 4
  %v9_11d7c = add i32 %v3_11d7c, 8
  %v10_11d7c = inttoptr i32 %v9_11d7c to i32*
  %v11_11d7c = load i32, i32* %v10_11d7c, align 4
  store i32 %v11_11d7c, i32* @lr, align 4
  %v12_11d7c = add i32 %v3_11d7c, 12
  store i32 %v12_11d7c, i32* @r1, align 4
  %v4_11d80 = inttoptr i32 %v3_11d80 to i32*
  store i32 %v5_11d7c, i32* %v4_11d80, align 4
  %v6_11d80 = add i32 %v3_11d80, 4
  %v7_11d80 = inttoptr i32 %v6_11d80 to i32*
  %v8_11d80 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_11d80, i32* %v7_11d80, align 4
  %v9_11d80 = add i32 %v3_11d80, 8
  %v10_11d80 = inttoptr i32 %v9_11d80 to i32*
  %v11_11d80 = load i32, i32* @lr, align 4
  store i32 %v11_11d80, i32* %v10_11d80, align 4
  %v12_11d80 = add i32 %v3_11d80, 12
  store i32 %v12_11d80, i32* @r0, align 4
  %v3_11d84 = load i32, i32* %r2.global-to-local, align 4
  %v4_11d84 = add i32 %v3_11d84, -12
  store i32 %v4_11d84, i32* %r2.global-to-local, align 4
  %v6_11d84 = sub i32 11, %v3_11d84
  %v7_11d84 = and i32 %v6_11d84, %v3_11d84
  %v8_11d84 = icmp slt i32 %v7_11d84, 0
  store i1 %v8_11d84, i1* %cpsr_v.global-to-local, align 1
  %v9_11d84 = icmp slt i32 %v4_11d84, 0
  store i1 %v9_11d84, i1* %cpsr_n.global-to-local, align 1
  %v10_11d84 = icmp eq i32 %v3_11d84, 12
  store i1 %v10_11d84, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_11d7c, %bb129
  %v0_11d8c.pre = phi i32 [ %v4_11d84, %bb129 ], [ %v0_11d8c.pre147, %dec_label_pc_11d7c ]
  %v3_11d8098118 = phi i32 [ %v12_11d80, %bb129 ], [ %v3_11d80, %dec_label_pc_11d7c ]
  %v1_11d88 = phi i1 [ %v8_11d84, %bb129 ], [ %v1_11d84, %dec_label_pc_11d7c ]
  %v0_11d88 = phi i1 [ %v9_11d84, %bb129 ], [ %v0_11d84, %dec_label_pc_11d7c ]
  %v2_11d88 = xor i1 %v1_11d88, %v0_11d88
  br i1 %v2_11d88, label %dec_label_pc_11d8c, label %dec_label_pc_11d7c

dec_label_pc_11d8c:                               ; preds = %.thread117, %dec_label_pc_11d38
  %v7_11d9c = phi i32 [ %v0_11d5092, %dec_label_pc_11d38 ], [ %v3_11d8098118, %.thread117 ]
  %v0_11d8c = phi i32 [ %v2_11d38, %dec_label_pc_11d38 ], [ %v0_11d8c.pre, %.thread117 ]
  %v2_11d8c = add i32 %v0_11d8c, 8
  store i32 %v2_11d8c, i32* %r2.global-to-local, align 4
  %v4_11d8c = sub i32 0, %v0_11d8c
  %v5_11d8c = and i32 %v2_11d8c, %v4_11d8c
  %v6_11d8c = icmp slt i32 %v5_11d8c, 0
  store i1 %v6_11d8c, i1* %cpsr_v.global-to-local, align 1
  %v7_11d8c = icmp slt i32 %v2_11d8c, 0
  store i1 %v7_11d8c, i1* %cpsr_n.global-to-local, align 1
  %v8_11d8c = icmp eq i32 %v2_11d8c, 0
  store i1 %v8_11d8c, i1* %cpsr_z.global-to-local, align 1
  %v5_11d90 = icmp slt i32 %v0_11d8c, -8
  br i1 %v5_11d90, label %bb131, label %dec_label_pc_11d94

dec_label_pc_11d94:                               ; preds = %dec_label_pc_11d8c
  %v6_11d94 = add i32 %v0_11d8c, 4
  store i32 %v6_11d94, i32* %r2.global-to-local, align 4
  %v8_11d94 = sub i32 -5, %v0_11d8c
  %v9_11d94 = and i32 %v8_11d94, %v2_11d8c
  %v10_11d94 = icmp slt i32 %v9_11d94, 0
  store i1 %v10_11d94, i1* %cpsr_v.global-to-local, align 1
  %v11_11d94 = icmp slt i32 %v6_11d94, 0
  store i1 %v11_11d94, i1* %cpsr_n.global-to-local, align 1
  %v12_11d94 = icmp eq i32 %v2_11d8c, 4
  store i1 %v12_11d94, i1* %cpsr_z.global-to-local, align 1
  %v5_11d98 = icmp slt i32 %v2_11d8c, 4
  %v6_11d98 = load i32, i32* @r1, align 4
  %v7_11d98 = inttoptr i32 %v6_11d98 to i32*
  %v8_11d98 = load i32, i32* %v7_11d98, align 4
  store i32 %v8_11d98, i32* %r3.global-to-local, align 4
  %v10_11d98 = add i32 %v6_11d98, 4
  br i1 %v5_11d98, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_11d94
  store i32 %v10_11d98, i32* @r1, align 4
  %v8_11d9c = inttoptr i32 %v7_11d9c to i32*
  store i32 %v8_11d98, i32* %v8_11d9c, align 4
  %v9_11d9c = load i32, i32* @r0, align 4
  %v10_11d9c = add i32 %v9_11d9c, 4
  store i32 %v10_11d9c, i32* @r0, align 4
  %v0_11dac.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_11d94
  %v10_11da0 = inttoptr i32 %v10_11d98 to i32*
  %v11_11da0 = load i32, i32* %v10_11da0, align 4
  store i32 %v11_11da0, i32* %ip.global-to-local, align 4
  %v12_11da0 = add i32 %v6_11d98, 8
  store i32 %v12_11da0, i32* @r1, align 4
  %v7_11da4 = inttoptr i32 %v7_11d9c to i32*
  store i32 %v8_11d98, i32* %v7_11da4, align 4
  %v9_11da4 = add i32 %v7_11d9c, 4
  %v10_11da4 = inttoptr i32 %v9_11da4 to i32*
  %v11_11da4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_11da4, i32* %v10_11da4, align 4
  %v12_11da4 = add i32 %v7_11d9c, 8
  store i32 %v12_11da4, i32* @r0, align 4
  %v6_11da8 = load i32, i32* %r2.global-to-local, align 4
  %v7_11da8 = add i32 %v6_11da8, -4
  store i32 %v7_11da8, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_11d8c, %bb, %dec_label_pc_11f54, %dec_label_pc_11ee8, %dec_label_pc_11e7c, %bb130
  %v2_11dbc = phi i32 [ %v10_11d9c, %.thread5 ], [ %v0_11e4c75, %.thread11 ], [ %v7_11d9c, %dec_label_pc_11d8c ], [ %v1_11d10, %bb ], [ %v2_11dbc113, %dec_label_pc_11f54 ], [ %v2_11dbc112, %dec_label_pc_11ee8 ], [ %v2_11dbc111, %dec_label_pc_11e7c ], [ %v12_11da4, %bb130 ]
  %v0_11dac = phi i32 [ %v0_11dac.pre, %.thread5 ], [ %v2_11df4, %.thread11 ], [ %v2_11d8c, %dec_label_pc_11d8c ], [ %v2_11d20, %bb ], [ %v0_11dac109, %dec_label_pc_11f54 ], [ %v0_11dac108, %dec_label_pc_11ee8 ], [ %v0_11dac107, %dec_label_pc_11e7c ], [ %v7_11da8, %bb130 ]
  %v1_11dac = add i32 %v0_11dac, 4
  store i32 %v1_11dac, i32* %r2.global-to-local, align 4
  %v3_11dac = sub i32 0, %v0_11dac
  %v4_11dac = and i32 %v1_11dac, %v3_11dac
  %v5_11dac = icmp slt i32 %v4_11dac, 0
  store i1 %v5_11dac, i1* %cpsr_v.global-to-local, align 1
  %v6_11dac = icmp slt i32 %v1_11dac, 0
  store i1 %v6_11dac, i1* %cpsr_n.global-to-local, align 1
  %v7_11dac = icmp eq i32 %v1_11dac, 0
  store i1 %v7_11dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11dac, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_11db0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_11db0, i32* %r0.global-to-local, align 4
  ret i32 %v3_11db0

bb133:                                            ; preds = %bb131
  %v1_11db4 = add i32 %v0_11dac, 2
  %v3_11db4 = sub i32 -3, %v0_11dac
  %v4_11db4 = and i32 %v3_11db4, %v1_11dac
  %v5_11db4 = icmp slt i32 %v4_11db4, 0
  store i1 %v5_11db4, i1* %cpsr_v.global-to-local, align 1
  %v6_11db4 = icmp slt i32 %v1_11db4, 0
  store i1 %v6_11db4, i1* %cpsr_n.global-to-local, align 1
  %v7_11db4 = icmp eq i32 %v1_11dac, 2
  store i1 %v7_11db4, i1* %cpsr_z.global-to-local, align 1
  %v0_11db8 = load i32, i32* @r1, align 4
  %v1_11db8 = inttoptr i32 %v0_11db8 to i8*
  %v2_11db8 = load i8, i8* %v1_11db8, align 1
  %v3_11db8 = zext i8 %v2_11db8 to i32
  store i32 %v3_11db8, i32* %r3.global-to-local, align 4
  %v5_11db8 = add i32 %v0_11db8, 1
  store i32 %v5_11db8, i32* %r1.global-to-local, align 4
  %v3_11dbc = inttoptr i32 %v2_11dbc to i8*
  store i8 %v2_11db8, i8* %v3_11dbc, align 1
  %v4_11dbc = load i32, i32* @r0, align 4
  %v5_11dbc = add i32 %v4_11dbc, 1
  store i32 %v5_11dbc, i32* %r0.global-to-local, align 4
  %v0_11dc0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_11dc0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_11dc0 = xor i1 %v0_11dc0, %v1_11dc0
  br i1 %v2_11dc0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_11dc0 = load i32, i32* %r1.global-to-local, align 4
  %v4_11dc0 = inttoptr i32 %v3_11dc0 to i8*
  %v5_11dc0 = load i8, i8* %v4_11dc0, align 1
  %v6_11dc0 = zext i8 %v5_11dc0 to i32
  store i32 %v6_11dc0, i32* %r3.global-to-local, align 4
  %v8_11dc0 = add i32 %v3_11dc0, 1
  store i32 %v8_11dc0, i32* %r1.global-to-local, align 4
  %v6_11dc4 = inttoptr i32 %v5_11dbc to i8*
  store i8 %v5_11dc0, i8* %v6_11dc4, align 1
  %v7_11dc4 = load i32, i32* %r0.global-to-local, align 4
  %v8_11dc4 = add i32 %v7_11dc4, 1
  store i32 %v8_11dc4, i32* %r0.global-to-local, align 4
  %v1_11dc8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_11dc8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_11dcc = phi i32 [ %v8_11dc4, %bb134 ], [ %v5_11dbc, %bb133 ]
  %v2_11dcc = phi i1 [ %v2_11dc8.pre, %bb134 ], [ %v1_11dc0, %bb133 ]
  %v1_11dcc = phi i1 [ %v1_11dc8.pre, %bb134 ], [ %v0_11dc0, %bb133 ]
  %v0_11dc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_11dc8 = xor i1 %v2_11dcc, %v1_11dcc
  %v4_11dc8 = or i1 %v0_11dc8, %v3_11dc8
  br i1 %v4_11dc8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_11dc8 = load i32, i32* %r1.global-to-local, align 4
  %v6_11dc8 = inttoptr i32 %v5_11dc8 to i8*
  %v7_11dc8 = load i8, i8* %v6_11dc8, align 1
  %v8_11dc8 = zext i8 %v7_11dc8 to i32
  store i32 %v8_11dc8, i32* %r3.global-to-local, align 4
  %v10_11dc8 = add i32 %v5_11dc8, 1
  store i32 %v10_11dc8, i32* %r1.global-to-local, align 4
  %v8_11dcc = inttoptr i32 %v7_11dcc to i8*
  store i8 %v7_11dc8, i8* %v8_11dcc, align 1
  %v9_11dcc = load i32, i32* %r0.global-to-local, align 4
  %v10_11dcc = add i32 %v9_11dcc, 1
  store i32 %v10_11dcc, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_11dd0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11dd0, i32* %r0.global-to-local, align 4
  ret i32 %v2_11dd0

dec_label_pc_11dd4:                               ; preds = %dec_label_pc_11d28
  %v1_11dd4 = sub nsw i32 4, %v1_11d28
  store i32 %v1_11dd4, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_11dd8 = icmp ult i32 %v1_11dd4, 2
  store i1 %v8_11dd8, i1* %cpsr_n.global-to-local, align 1
  %v9_11dd8 = icmp eq i32 %v1_11dd4, 2
  store i1 %v9_11dd8, i1* %cpsr_z.global-to-local, align 1
  %v1_11ddc = inttoptr i32 %v0_11d10 to i8*
  %v2_11ddc = load i8, i8* %v1_11ddc, align 1
  %v3_11ddc = zext i8 %v2_11ddc to i32
  store i32 %v3_11ddc, i32* %r3.global-to-local, align 4
  %v5_11ddc = add i32 %v0_11d10, 1
  store i32 %v5_11ddc, i32* @r1, align 4
  %v3_11de0 = inttoptr i32 %v1_11d10 to i8*
  store i8 %v2_11ddc, i8* %v3_11de0, align 1
  %v4_11de0 = load i32, i32* @r0, align 4
  %v5_11de0 = add i32 %v4_11de0, 1
  store i32 %v5_11de0, i32* @r0, align 4
  br i1 %v8_11dd8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_11dd4
  %v6_11de4 = load i32, i32* @r1, align 4
  %v7_11de4 = inttoptr i32 %v6_11de4 to i8*
  %v8_11de4 = load i8, i8* %v7_11de4, align 1
  %v9_11de4 = zext i8 %v8_11de4 to i32
  store i32 %v9_11de4, i32* %r3.global-to-local, align 4
  %v11_11de4 = add i32 %v6_11de4, 1
  store i32 %v11_11de4, i32* @r1, align 4
  %v9_11de8 = inttoptr i32 %v5_11de0 to i8*
  store i8 %v8_11de4, i8* %v9_11de8, align 1
  %v10_11de8 = load i32, i32* @r0, align 4
  %v11_11de8 = add i32 %v10_11de8, 1
  store i32 %v11_11de8, i32* @r0, align 4
  br i1 %v9_11dd8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_11dec = load i32, i32* @r1, align 4
  %v9_11dec = inttoptr i32 %v8_11dec to i8*
  %v10_11dec = load i8, i8* %v9_11dec, align 1
  %v11_11dec = zext i8 %v10_11dec to i32
  store i32 %v11_11dec, i32* %r3.global-to-local, align 4
  %v13_11dec = add i32 %v8_11dec, 1
  store i32 %v13_11dec, i32* @r1, align 4
  %v11_11df0 = inttoptr i32 %v11_11de8 to i8*
  store i8 %v10_11dec, i8* %v11_11df0, align 1
  %v12_11df0 = load i32, i32* @r0, align 4
  %v13_11df0 = add i32 %v12_11df0, 1
  store i32 %v13_11df0, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_11dd4, %bb137
  %v0_11e4c75 = phi i32 [ %v11_11de8, %bb136 ], [ %v5_11de0, %dec_label_pc_11dd4 ], [ %v13_11df0, %bb137 ]
  %v0_11df4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11df4 = load i32, i32* %ip.global-to-local, align 4
  %v2_11df4 = sub i32 %v0_11df4, %v1_11df4
  store i32 %v2_11df4, i32* %r2.global-to-local, align 4
  %v4_11df4 = xor i32 %v1_11df4, %v0_11df4
  %v5_11df4 = xor i32 %v2_11df4, %v0_11df4
  %v6_11df4 = and i32 %v5_11df4, %v4_11df4
  %v7_11df4 = icmp slt i32 %v6_11df4, 0
  store i1 %v7_11df4, i1* %cpsr_v.global-to-local, align 1
  %v8_11df4 = icmp slt i32 %v2_11df4, 0
  store i1 %v8_11df4, i1* %cpsr_n.global-to-local, align 1
  %v9_11df4 = icmp eq i32 %v0_11df4, %v1_11df4
  store i1 %v9_11df4, i1* %cpsr_z.global-to-local, align 1
  %v5_11df8 = icmp slt i32 %v0_11df4, %v1_11df4
  br i1 %v5_11df8, label %bb131, label %dec_label_pc_11dfc

dec_label_pc_11dfc:                               ; preds = %.thread11
  %v0_11dfc = load i32, i32* @r1, align 4
  %v1_11dfc = urem i32 %v0_11dfc, 4
  store i32 %v1_11dfc, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11dfc = icmp eq i32 %v1_11dfc, 0
  store i1 %v2_11dfc, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_11dfc to i2
  br i1 %v2_11dfc, label %dec_label_pc_11d38, label %dec_label_pc_11e04

dec_label_pc_11e04:                               ; preds = %dec_label_pc_11d30, %dec_label_pc_11dfc
  %v0_11e4c74 = phi i32 [ %v1_11d10, %dec_label_pc_11d30 ], [ %v0_11e4c75, %dec_label_pc_11dfc ]
  %v0_11ef8 = phi i32 [ %v2_11d20, %dec_label_pc_11d30 ], [ %v2_11df4, %dec_label_pc_11dfc ]
  %v0_11e0c.off0 = phi i2 [ %extract.t, %dec_label_pc_11d30 ], [ %extract.t123, %dec_label_pc_11dfc ]
  %v0_11e04 = phi i32 [ %v0_11d10, %dec_label_pc_11d30 ], [ %v0_11dfc, %dec_label_pc_11dfc ]
  %v1_11e04 = and i32 %v0_11e04, -4
  store i32 %v1_11e04, i32* %r1.global-to-local, align 4
  %v1_11e08 = inttoptr i32 %v1_11e04 to i32*
  %v2_11e08 = load i32, i32* %v1_11e08, align 4
  store i32 %v2_11e08, i32* @lr, align 4
  %v4_11e08 = add i32 %v1_11e04, 4
  store i32 %v4_11e08, i32* %r1.global-to-local, align 4
  %v2_11ef0 = add i32 %v0_11ef8, -12
  %v4_11ef0 = sub i32 11, %v0_11ef8
  %v5_11ef0 = and i32 %v4_11ef0, %v0_11ef8
  %v6_11ef0 = icmp slt i32 %v5_11ef0, 0
  store i1 %v6_11ef0, i1* %cpsr_v.global-to-local, align 1
  %v7_11ef0 = icmp slt i32 %v2_11ef0, 0
  store i1 %v7_11ef0, i1* %cpsr_n.global-to-local, align 1
  %v8_11ef0 = icmp eq i32 %v0_11ef8, 12
  store i1 %v8_11ef0, i1* %cpsr_z.global-to-local, align 1
  %v5_11ef4 = icmp slt i32 %v0_11ef8, 12
  switch i2 %v0_11e0c.off0, label %dec_label_pc_11e18 [
    i2 -1, label %dec_label_pc_11ef0
    i2 -2, label %dec_label_pc_11e84
  ]

dec_label_pc_11e18:                               ; preds = %dec_label_pc_11e04
  br i1 %v5_11ef4, label %dec_label_pc_11e64, label %dec_label_pc_11e20

dec_label_pc_11e20:                               ; preds = %dec_label_pc_11e18
  store i32 %v2_11ef0, i32* %r2.global-to-local, align 4
  %v3_11e24 = load i32, i32* @r4, align 4
  store i32 %v3_11e24, i32* %stack_var_-16, align 4
  %v6_11e24 = load i32, i32* @r5, align 4
  store i32 %v6_11e24, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11e28

dec_label_pc_11e28:                               ; preds = %dec_label_pc_11e28.dec_label_pc_11e28_crit_edge, %dec_label_pc_11e20
  %v0_11e4c = phi i32 [ %v12_11e4c, %dec_label_pc_11e28.dec_label_pc_11e28_crit_edge ], [ %v0_11e4c74, %dec_label_pc_11e20 ]
  %v0_11e2c = phi i32 [ %v0_11e2c.pre, %dec_label_pc_11e28.dec_label_pc_11e28_crit_edge ], [ %v4_11e08, %dec_label_pc_11e20 ]
  %v0_11e28 = phi i32 [ %v0_11e28.pre, %dec_label_pc_11e28.dec_label_pc_11e28_crit_edge ], [ %v2_11e08, %dec_label_pc_11e20 ]
  %v3_11e28 = udiv i32 %v0_11e28, 256
  store i32 %v3_11e28, i32* %r3.global-to-local, align 4
  %v1_11e2c = inttoptr i32 %v0_11e2c to i32*
  %v2_11e2c = load i32, i32* %v1_11e2c, align 4
  store i32 %v2_11e2c, i32* %r4.global-to-local, align 4
  %v3_11e2c = add i32 %v0_11e2c, 4
  %v4_11e2c = inttoptr i32 %v3_11e2c to i32*
  %v5_11e2c = load i32, i32* %v4_11e2c, align 4
  store i32 %v5_11e2c, i32* %r5.global-to-local, align 4
  %v6_11e2c = add i32 %v0_11e2c, 8
  %v7_11e2c = inttoptr i32 %v6_11e2c to i32*
  %v8_11e2c = load i32, i32* %v7_11e2c, align 4
  store i32 %v8_11e2c, i32* %ip.global-to-local, align 4
  %v9_11e2c = add i32 %v0_11e2c, 12
  %v10_11e2c = inttoptr i32 %v9_11e2c to i32*
  %v11_11e2c = load i32, i32* %v10_11e2c, align 4
  store i32 %v11_11e2c, i32* @lr, align 4
  %v12_11e2c = add i32 %v0_11e2c, 16
  store i32 %v12_11e2c, i32* %r1.global-to-local, align 4
  %v4_11e30 = mul i32 %v2_11e2c, 16777216
  %v5_11e30 = or i32 %v4_11e30, %v3_11e28
  store i32 %v5_11e30, i32* %r3.global-to-local, align 4
  %v3_11e34 = udiv i32 %v2_11e2c, 256
  %v4_11e38 = mul i32 %v5_11e2c, 16777216
  %v5_11e38 = or i32 %v4_11e38, %v3_11e34
  store i32 %v5_11e38, i32* %r4.global-to-local, align 4
  %v3_11e3c = udiv i32 %v5_11e2c, 256
  %v4_11e40 = mul i32 %v8_11e2c, 16777216
  %v5_11e40 = or i32 %v4_11e40, %v3_11e3c
  store i32 %v5_11e40, i32* %r5.global-to-local, align 4
  %v3_11e44 = udiv i32 %v8_11e2c, 256
  %v4_11e48 = mul i32 %v11_11e2c, 16777216
  %v5_11e48 = or i32 %v4_11e48, %v3_11e44
  store i32 %v5_11e48, i32* %ip.global-to-local, align 4
  %v1_11e4c = inttoptr i32 %v0_11e4c to i32*
  store i32 %v5_11e30, i32* %v1_11e4c, align 4
  %v3_11e4c = add i32 %v0_11e4c, 4
  %v4_11e4c = inttoptr i32 %v3_11e4c to i32*
  %v5_11e4c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11e4c, i32* %v4_11e4c, align 4
  %v6_11e4c = add i32 %v0_11e4c, 8
  %v7_11e4c = inttoptr i32 %v6_11e4c to i32*
  %v8_11e4c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_11e4c, i32* %v7_11e4c, align 4
  %v9_11e4c = add i32 %v0_11e4c, 12
  %v10_11e4c = inttoptr i32 %v9_11e4c to i32*
  %v11_11e4c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_11e4c, i32* %v10_11e4c, align 4
  %v12_11e4c = add i32 %v0_11e4c, 16
  store i32 %v12_11e4c, i32* @r0, align 4
  %v0_11e50 = load i32, i32* %r2.global-to-local, align 4
  %v2_11e50 = add i32 %v0_11e50, -16
  store i32 %v2_11e50, i32* %r2.global-to-local, align 4
  %v6_11e54 = icmp slt i32 %v0_11e50, 16
  br i1 %v6_11e54, label %dec_label_pc_11e58, label %dec_label_pc_11e28.dec_label_pc_11e28_crit_edge

dec_label_pc_11e28.dec_label_pc_11e28_crit_edge:  ; preds = %dec_label_pc_11e28
  %v0_11e28.pre = load i32, i32* @lr, align 4
  %v0_11e2c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11e28

dec_label_pc_11e58:                               ; preds = %dec_label_pc_11e28
  %v2_11e58 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11e58, i32* @r4, align 4
  %v5_11e58 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_11e58, i32* @r5, align 4
  %v2_11e5c = add i32 %v0_11e50, -4
  store i32 %v2_11e5c, i32* %r2.global-to-local, align 4
  %v4_11e5c = add i32 %v0_11e50, 2147483632
  %v5_11e5c = and i32 %v2_11e5c, %v4_11e5c
  %v6_11e5c = icmp slt i32 %v5_11e5c, 0
  store i1 %v6_11e5c, i1* %cpsr_v.global-to-local, align 1
  %v7_11e5c = icmp slt i32 %v2_11e5c, 0
  store i1 %v7_11e5c, i1* %cpsr_n.global-to-local, align 1
  %v8_11e5c = icmp eq i32 %v2_11e5c, 0
  store i1 %v8_11e5c, i1* %cpsr_z.global-to-local, align 1
  %v5_11e60 = icmp slt i32 %v2_11e50, -12
  br i1 %v5_11e60, label %dec_label_pc_11e7c, label %dec_label_pc_11e64

dec_label_pc_11e64:                               ; preds = %dec_label_pc_11e58, %dec_label_pc_11e18, %dec_label_pc_11e64
  %v1_11e70 = phi i32 [ %v4_11e70, %dec_label_pc_11e64 ], [ %v12_11e4c, %dec_label_pc_11e58 ], [ %v0_11e4c74, %dec_label_pc_11e18 ]
  %v0_11e64 = load i32, i32* @lr, align 4
  %v3_11e64 = udiv i32 %v0_11e64, 256
  store i32 %v3_11e64, i32* %ip.global-to-local, align 4
  %v0_11e68 = load i32, i32* %r1.global-to-local, align 4
  %v1_11e68 = inttoptr i32 %v0_11e68 to i32*
  %v2_11e68 = load i32, i32* %v1_11e68, align 4
  store i32 %v2_11e68, i32* @lr, align 4
  %v4_11e68 = add i32 %v0_11e68, 4
  store i32 %v4_11e68, i32* %r1.global-to-local, align 4
  %v4_11e6c = mul i32 %v2_11e68, 16777216
  %v5_11e6c = or i32 %v4_11e6c, %v3_11e64
  store i32 %v5_11e6c, i32* %ip.global-to-local, align 4
  %v2_11e70 = inttoptr i32 %v1_11e70 to i32*
  store i32 %v5_11e6c, i32* %v2_11e70, align 4
  %v3_11e70 = load i32, i32* @r0, align 4
  %v4_11e70 = add i32 %v3_11e70, 4
  store i32 %v4_11e70, i32* @r0, align 4
  %v0_11e74 = load i32, i32* %r2.global-to-local, align 4
  %v2_11e74 = add i32 %v0_11e74, -4
  store i32 %v2_11e74, i32* %r2.global-to-local, align 4
  %v6_11e78 = icmp slt i32 %v0_11e74, 4
  br i1 %v6_11e78, label %dec_label_pc_11e7c.loopexit, label %dec_label_pc_11e64

dec_label_pc_11e7c.loopexit:                      ; preds = %dec_label_pc_11e64
  %v4_11e74 = sub i32 3, %v0_11e74
  %v5_11e74 = and i32 %v4_11e74, %v0_11e74
  %v6_11e74 = icmp slt i32 %v5_11e74, 0
  %v7_11e74 = icmp slt i32 %v2_11e74, 0
  store i1 %v6_11e74, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_11e74, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11e7c

dec_label_pc_11e7c:                               ; preds = %dec_label_pc_11e7c.loopexit, %dec_label_pc_11e58
  %v2_11dbc111 = phi i32 [ %v4_11e70, %dec_label_pc_11e7c.loopexit ], [ %v12_11e4c, %dec_label_pc_11e58 ]
  %v0_11dac107 = phi i32 [ %v2_11e74, %dec_label_pc_11e7c.loopexit ], [ %v2_11e5c, %dec_label_pc_11e58 ]
  %v0_11e7c = load i32, i32* %r1.global-to-local, align 4
  %v1_11e7c = add i32 %v0_11e7c, -3
  store i32 %v1_11e7c, i32* @r1, align 4
  br label %bb131

dec_label_pc_11e84:                               ; preds = %dec_label_pc_11e04
  br i1 %v5_11ef4, label %dec_label_pc_11ed0, label %dec_label_pc_11e8c

dec_label_pc_11e8c:                               ; preds = %dec_label_pc_11e84
  store i32 %v2_11ef0, i32* %r2.global-to-local, align 4
  %v3_11e90 = load i32, i32* @r4, align 4
  store i32 %v3_11e90, i32* %stack_var_-16, align 4
  %v6_11e90 = load i32, i32* @r5, align 4
  store i32 %v6_11e90, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11e94

dec_label_pc_11e94:                               ; preds = %dec_label_pc_11e94.dec_label_pc_11e94_crit_edge, %dec_label_pc_11e8c
  %v0_11eb8 = phi i32 [ %v12_11eb8, %dec_label_pc_11e94.dec_label_pc_11e94_crit_edge ], [ %v0_11e4c74, %dec_label_pc_11e8c ]
  %v0_11e98 = phi i32 [ %v0_11e98.pre, %dec_label_pc_11e94.dec_label_pc_11e94_crit_edge ], [ %v4_11e08, %dec_label_pc_11e8c ]
  %v0_11e94 = phi i32 [ %v0_11e94.pre, %dec_label_pc_11e94.dec_label_pc_11e94_crit_edge ], [ %v2_11e08, %dec_label_pc_11e8c ]
  %v3_11e94 = udiv i32 %v0_11e94, 65536
  store i32 %v3_11e94, i32* %r3.global-to-local, align 4
  %v1_11e98 = inttoptr i32 %v0_11e98 to i32*
  %v2_11e98 = load i32, i32* %v1_11e98, align 4
  store i32 %v2_11e98, i32* %r4.global-to-local, align 4
  %v3_11e98 = add i32 %v0_11e98, 4
  %v4_11e98 = inttoptr i32 %v3_11e98 to i32*
  %v5_11e98 = load i32, i32* %v4_11e98, align 4
  store i32 %v5_11e98, i32* %r5.global-to-local, align 4
  %v6_11e98 = add i32 %v0_11e98, 8
  %v7_11e98 = inttoptr i32 %v6_11e98 to i32*
  %v8_11e98 = load i32, i32* %v7_11e98, align 4
  store i32 %v8_11e98, i32* %ip.global-to-local, align 4
  %v9_11e98 = add i32 %v0_11e98, 12
  %v10_11e98 = inttoptr i32 %v9_11e98 to i32*
  %v11_11e98 = load i32, i32* %v10_11e98, align 4
  store i32 %v11_11e98, i32* @lr, align 4
  %v12_11e98 = add i32 %v0_11e98, 16
  store i32 %v12_11e98, i32* %r1.global-to-local, align 4
  %v4_11e9c = mul i32 %v2_11e98, 65536
  %v5_11e9c = or i32 %v4_11e9c, %v3_11e94
  store i32 %v5_11e9c, i32* %r3.global-to-local, align 4
  %v3_11ea0 = udiv i32 %v2_11e98, 65536
  %v4_11ea4 = mul i32 %v5_11e98, 65536
  %v5_11ea4 = or i32 %v4_11ea4, %v3_11ea0
  store i32 %v5_11ea4, i32* %r4.global-to-local, align 4
  %v3_11ea8 = udiv i32 %v5_11e98, 65536
  %v4_11eac = mul i32 %v8_11e98, 65536
  %v5_11eac = or i32 %v4_11eac, %v3_11ea8
  store i32 %v5_11eac, i32* %r5.global-to-local, align 4
  %v3_11eb0 = udiv i32 %v8_11e98, 65536
  %v4_11eb4 = mul i32 %v11_11e98, 65536
  %v5_11eb4 = or i32 %v4_11eb4, %v3_11eb0
  store i32 %v5_11eb4, i32* %ip.global-to-local, align 4
  %v1_11eb8 = inttoptr i32 %v0_11eb8 to i32*
  store i32 %v5_11e9c, i32* %v1_11eb8, align 4
  %v3_11eb8 = add i32 %v0_11eb8, 4
  %v4_11eb8 = inttoptr i32 %v3_11eb8 to i32*
  %v5_11eb8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11eb8, i32* %v4_11eb8, align 4
  %v6_11eb8 = add i32 %v0_11eb8, 8
  %v7_11eb8 = inttoptr i32 %v6_11eb8 to i32*
  %v8_11eb8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_11eb8, i32* %v7_11eb8, align 4
  %v9_11eb8 = add i32 %v0_11eb8, 12
  %v10_11eb8 = inttoptr i32 %v9_11eb8 to i32*
  %v11_11eb8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_11eb8, i32* %v10_11eb8, align 4
  %v12_11eb8 = add i32 %v0_11eb8, 16
  store i32 %v12_11eb8, i32* @r0, align 4
  %v0_11ebc = load i32, i32* %r2.global-to-local, align 4
  %v2_11ebc = add i32 %v0_11ebc, -16
  store i32 %v2_11ebc, i32* %r2.global-to-local, align 4
  %v6_11ec0 = icmp slt i32 %v0_11ebc, 16
  br i1 %v6_11ec0, label %dec_label_pc_11ec4, label %dec_label_pc_11e94.dec_label_pc_11e94_crit_edge

dec_label_pc_11e94.dec_label_pc_11e94_crit_edge:  ; preds = %dec_label_pc_11e94
  %v0_11e94.pre = load i32, i32* @lr, align 4
  %v0_11e98.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11e94

dec_label_pc_11ec4:                               ; preds = %dec_label_pc_11e94
  %v2_11ec4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11ec4, i32* @r4, align 4
  %v5_11ec4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_11ec4, i32* @r5, align 4
  %v2_11ec8 = add i32 %v0_11ebc, -4
  store i32 %v2_11ec8, i32* %r2.global-to-local, align 4
  %v4_11ec8 = add i32 %v0_11ebc, 2147483632
  %v5_11ec8 = and i32 %v2_11ec8, %v4_11ec8
  %v6_11ec8 = icmp slt i32 %v5_11ec8, 0
  store i1 %v6_11ec8, i1* %cpsr_v.global-to-local, align 1
  %v7_11ec8 = icmp slt i32 %v2_11ec8, 0
  store i1 %v7_11ec8, i1* %cpsr_n.global-to-local, align 1
  %v8_11ec8 = icmp eq i32 %v2_11ec8, 0
  store i1 %v8_11ec8, i1* %cpsr_z.global-to-local, align 1
  %v5_11ecc = icmp slt i32 %v2_11ebc, -12
  br i1 %v5_11ecc, label %dec_label_pc_11ee8, label %dec_label_pc_11ed0

dec_label_pc_11ed0:                               ; preds = %dec_label_pc_11ec4, %dec_label_pc_11e84, %dec_label_pc_11ed0
  %v1_11edc = phi i32 [ %v4_11edc, %dec_label_pc_11ed0 ], [ %v12_11eb8, %dec_label_pc_11ec4 ], [ %v0_11e4c74, %dec_label_pc_11e84 ]
  %v0_11ed0 = load i32, i32* @lr, align 4
  %v3_11ed0 = udiv i32 %v0_11ed0, 65536
  store i32 %v3_11ed0, i32* %ip.global-to-local, align 4
  %v0_11ed4 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ed4 = inttoptr i32 %v0_11ed4 to i32*
  %v2_11ed4 = load i32, i32* %v1_11ed4, align 4
  store i32 %v2_11ed4, i32* @lr, align 4
  %v4_11ed4 = add i32 %v0_11ed4, 4
  store i32 %v4_11ed4, i32* %r1.global-to-local, align 4
  %v4_11ed8 = mul i32 %v2_11ed4, 65536
  %v5_11ed8 = or i32 %v4_11ed8, %v3_11ed0
  store i32 %v5_11ed8, i32* %ip.global-to-local, align 4
  %v2_11edc = inttoptr i32 %v1_11edc to i32*
  store i32 %v5_11ed8, i32* %v2_11edc, align 4
  %v3_11edc = load i32, i32* @r0, align 4
  %v4_11edc = add i32 %v3_11edc, 4
  store i32 %v4_11edc, i32* @r0, align 4
  %v0_11ee0 = load i32, i32* %r2.global-to-local, align 4
  %v2_11ee0 = add i32 %v0_11ee0, -4
  store i32 %v2_11ee0, i32* %r2.global-to-local, align 4
  %v6_11ee4 = icmp slt i32 %v0_11ee0, 4
  br i1 %v6_11ee4, label %dec_label_pc_11ee8.loopexit, label %dec_label_pc_11ed0

dec_label_pc_11ee8.loopexit:                      ; preds = %dec_label_pc_11ed0
  %v4_11ee0 = sub i32 3, %v0_11ee0
  %v5_11ee0 = and i32 %v4_11ee0, %v0_11ee0
  %v6_11ee0 = icmp slt i32 %v5_11ee0, 0
  %v7_11ee0 = icmp slt i32 %v2_11ee0, 0
  store i1 %v6_11ee0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_11ee0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11ee8

dec_label_pc_11ee8:                               ; preds = %dec_label_pc_11ee8.loopexit, %dec_label_pc_11ec4
  %v2_11dbc112 = phi i32 [ %v4_11edc, %dec_label_pc_11ee8.loopexit ], [ %v12_11eb8, %dec_label_pc_11ec4 ]
  %v0_11dac108 = phi i32 [ %v2_11ee0, %dec_label_pc_11ee8.loopexit ], [ %v2_11ec8, %dec_label_pc_11ec4 ]
  %v0_11ee8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ee8 = add i32 %v0_11ee8, -2
  store i32 %v1_11ee8, i32* @r1, align 4
  br label %bb131

dec_label_pc_11ef0:                               ; preds = %dec_label_pc_11e04
  br i1 %v5_11ef4, label %dec_label_pc_11f3c, label %dec_label_pc_11ef8

dec_label_pc_11ef8:                               ; preds = %dec_label_pc_11ef0
  store i32 %v2_11ef0, i32* %r2.global-to-local, align 4
  %v3_11efc = load i32, i32* @r4, align 4
  store i32 %v3_11efc, i32* %stack_var_-16, align 4
  %v6_11efc = load i32, i32* @r5, align 4
  store i32 %v6_11efc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11f00

dec_label_pc_11f00:                               ; preds = %dec_label_pc_11f00.dec_label_pc_11f00_crit_edge, %dec_label_pc_11ef8
  %v0_11f24 = phi i32 [ %v12_11f24, %dec_label_pc_11f00.dec_label_pc_11f00_crit_edge ], [ %v0_11e4c74, %dec_label_pc_11ef8 ]
  %v0_11f04 = phi i32 [ %v0_11f04.pre, %dec_label_pc_11f00.dec_label_pc_11f00_crit_edge ], [ %v4_11e08, %dec_label_pc_11ef8 ]
  %v0_11f00 = phi i32 [ %v0_11f00.pre, %dec_label_pc_11f00.dec_label_pc_11f00_crit_edge ], [ %v2_11e08, %dec_label_pc_11ef8 ]
  %v3_11f00 = udiv i32 %v0_11f00, 16777216
  store i32 %v3_11f00, i32* %r3.global-to-local, align 4
  %v1_11f04 = inttoptr i32 %v0_11f04 to i32*
  %v2_11f04 = load i32, i32* %v1_11f04, align 4
  store i32 %v2_11f04, i32* %r4.global-to-local, align 4
  %v3_11f04 = add i32 %v0_11f04, 4
  %v4_11f04 = inttoptr i32 %v3_11f04 to i32*
  %v5_11f04 = load i32, i32* %v4_11f04, align 4
  store i32 %v5_11f04, i32* %r5.global-to-local, align 4
  %v6_11f04 = add i32 %v0_11f04, 8
  %v7_11f04 = inttoptr i32 %v6_11f04 to i32*
  %v8_11f04 = load i32, i32* %v7_11f04, align 4
  store i32 %v8_11f04, i32* %ip.global-to-local, align 4
  %v9_11f04 = add i32 %v0_11f04, 12
  %v10_11f04 = inttoptr i32 %v9_11f04 to i32*
  %v11_11f04 = load i32, i32* %v10_11f04, align 4
  store i32 %v11_11f04, i32* @lr, align 4
  %v12_11f04 = add i32 %v0_11f04, 16
  store i32 %v12_11f04, i32* %r1.global-to-local, align 4
  %v4_11f08 = mul i32 %v2_11f04, 256
  %v5_11f08 = or i32 %v4_11f08, %v3_11f00
  store i32 %v5_11f08, i32* %r3.global-to-local, align 4
  %v3_11f0c = udiv i32 %v2_11f04, 16777216
  %v4_11f10 = mul i32 %v5_11f04, 256
  %v5_11f10 = or i32 %v4_11f10, %v3_11f0c
  store i32 %v5_11f10, i32* %r4.global-to-local, align 4
  %v3_11f14 = udiv i32 %v5_11f04, 16777216
  %v4_11f18 = mul i32 %v8_11f04, 256
  %v5_11f18 = or i32 %v4_11f18, %v3_11f14
  store i32 %v5_11f18, i32* %r5.global-to-local, align 4
  %v3_11f1c = udiv i32 %v8_11f04, 16777216
  %v4_11f20 = mul i32 %v11_11f04, 256
  %v5_11f20 = or i32 %v4_11f20, %v3_11f1c
  store i32 %v5_11f20, i32* %ip.global-to-local, align 4
  %v1_11f24 = inttoptr i32 %v0_11f24 to i32*
  store i32 %v5_11f08, i32* %v1_11f24, align 4
  %v3_11f24 = add i32 %v0_11f24, 4
  %v4_11f24 = inttoptr i32 %v3_11f24 to i32*
  %v5_11f24 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11f24, i32* %v4_11f24, align 4
  %v6_11f24 = add i32 %v0_11f24, 8
  %v7_11f24 = inttoptr i32 %v6_11f24 to i32*
  %v8_11f24 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_11f24, i32* %v7_11f24, align 4
  %v9_11f24 = add i32 %v0_11f24, 12
  %v10_11f24 = inttoptr i32 %v9_11f24 to i32*
  %v11_11f24 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_11f24, i32* %v10_11f24, align 4
  %v12_11f24 = add i32 %v0_11f24, 16
  store i32 %v12_11f24, i32* @r0, align 4
  %v0_11f28 = load i32, i32* %r2.global-to-local, align 4
  %v2_11f28 = add i32 %v0_11f28, -16
  store i32 %v2_11f28, i32* %r2.global-to-local, align 4
  %v6_11f2c = icmp slt i32 %v0_11f28, 16
  br i1 %v6_11f2c, label %dec_label_pc_11f30, label %dec_label_pc_11f00.dec_label_pc_11f00_crit_edge

dec_label_pc_11f00.dec_label_pc_11f00_crit_edge:  ; preds = %dec_label_pc_11f00
  %v0_11f00.pre = load i32, i32* @lr, align 4
  %v0_11f04.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f00

dec_label_pc_11f30:                               ; preds = %dec_label_pc_11f00
  %v2_11f30 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11f30, i32* @r4, align 4
  %v5_11f30 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_11f30, i32* @r5, align 4
  %v2_11f34 = add i32 %v0_11f28, -4
  store i32 %v2_11f34, i32* %r2.global-to-local, align 4
  %v4_11f34 = add i32 %v0_11f28, 2147483632
  %v5_11f34 = and i32 %v2_11f34, %v4_11f34
  %v6_11f34 = icmp slt i32 %v5_11f34, 0
  store i1 %v6_11f34, i1* %cpsr_v.global-to-local, align 1
  %v7_11f34 = icmp slt i32 %v2_11f34, 0
  store i1 %v7_11f34, i1* %cpsr_n.global-to-local, align 1
  %v8_11f34 = icmp eq i32 %v2_11f34, 0
  store i1 %v8_11f34, i1* %cpsr_z.global-to-local, align 1
  %v5_11f38 = icmp slt i32 %v2_11f28, -12
  br i1 %v5_11f38, label %dec_label_pc_11f54, label %dec_label_pc_11f3c

dec_label_pc_11f3c:                               ; preds = %dec_label_pc_11f30, %dec_label_pc_11ef0, %dec_label_pc_11f3c
  %v1_11f48 = phi i32 [ %v4_11f48, %dec_label_pc_11f3c ], [ %v12_11f24, %dec_label_pc_11f30 ], [ %v0_11e4c74, %dec_label_pc_11ef0 ]
  %v0_11f3c = load i32, i32* @lr, align 4
  %v3_11f3c = udiv i32 %v0_11f3c, 16777216
  store i32 %v3_11f3c, i32* %ip.global-to-local, align 4
  %v0_11f40 = load i32, i32* %r1.global-to-local, align 4
  %v1_11f40 = inttoptr i32 %v0_11f40 to i32*
  %v2_11f40 = load i32, i32* %v1_11f40, align 4
  store i32 %v2_11f40, i32* @lr, align 4
  %v4_11f40 = add i32 %v0_11f40, 4
  store i32 %v4_11f40, i32* %r1.global-to-local, align 4
  %v4_11f44 = mul i32 %v2_11f40, 256
  %v5_11f44 = or i32 %v4_11f44, %v3_11f3c
  store i32 %v5_11f44, i32* %ip.global-to-local, align 4
  %v2_11f48 = inttoptr i32 %v1_11f48 to i32*
  store i32 %v5_11f44, i32* %v2_11f48, align 4
  %v3_11f48 = load i32, i32* @r0, align 4
  %v4_11f48 = add i32 %v3_11f48, 4
  store i32 %v4_11f48, i32* @r0, align 4
  %v0_11f4c = load i32, i32* %r2.global-to-local, align 4
  %v2_11f4c = add i32 %v0_11f4c, -4
  store i32 %v2_11f4c, i32* %r2.global-to-local, align 4
  %v6_11f50 = icmp slt i32 %v0_11f4c, 4
  br i1 %v6_11f50, label %dec_label_pc_11f54.loopexit, label %dec_label_pc_11f3c

dec_label_pc_11f54.loopexit:                      ; preds = %dec_label_pc_11f3c
  %v4_11f4c = sub i32 3, %v0_11f4c
  %v5_11f4c = and i32 %v4_11f4c, %v0_11f4c
  %v6_11f4c = icmp slt i32 %v5_11f4c, 0
  %v7_11f4c = icmp slt i32 %v2_11f4c, 0
  store i1 %v6_11f4c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_11f4c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11f54

dec_label_pc_11f54:                               ; preds = %dec_label_pc_11f54.loopexit, %dec_label_pc_11f30
  %v2_11dbc113 = phi i32 [ %v4_11f48, %dec_label_pc_11f54.loopexit ], [ %v12_11f24, %dec_label_pc_11f30 ]
  %v0_11dac109 = phi i32 [ %v2_11f4c, %dec_label_pc_11f54.loopexit ], [ %v2_11f34, %dec_label_pc_11f30 ]
  %v0_11f54 = load i32, i32* %r1.global-to-local, align 4
  %v1_11f54 = add i32 %v0_11f54, -1
  store i32 %v1_11f54, i32* @r1, align 4
  br label %bb131

dec_label_pc_11f5c:                               ; preds = %dec_label_pc_11d10
  %v1_11f5c = load i32, i32* @r2, align 4
  %v2_11f5c = add i32 %v1_11f5c, %v0_11d10
  store i32 %v2_11f5c, i32* %r1.global-to-local, align 4
  %v2_11f60 = add i32 %v1_11f5c, %v1_11d10
  store i32 %v2_11f60, i32* %r0.global-to-local, align 4
  %v2_11f64 = add i32 %v1_11f5c, -4
  store i32 %v2_11f64, i32* %r2.global-to-local, align 4
  %v4_11f64 = sub i32 3, %v1_11f5c
  %v5_11f64 = and i32 %v4_11f64, %v1_11f5c
  %v6_11f64 = icmp slt i32 %v5_11f64, 0
  store i1 %v6_11f64, i1* %cpsr_v.global-to-local, align 1
  %v7_11f64 = icmp slt i32 %v2_11f64, 0
  store i1 %v7_11f64, i1* %cpsr_n.global-to-local, align 1
  %v8_11f64 = icmp eq i32 %v1_11f5c, 4
  store i1 %v8_11f64, i1* %cpsr_z.global-to-local, align 1
  %v5_11f68 = icmp slt i32 %v1_11f5c, 4
  br i1 %v5_11f68, label %bb141, label %dec_label_pc_11f6c

dec_label_pc_11f6c:                               ; preds = %dec_label_pc_11f5c
  %v1_11f6c = urem i32 %v2_11f60, 4
  store i32 %v1_11f6c, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11f6c = icmp eq i32 %v1_11f6c, 0
  store i1 %v2_11f6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11f6c, label %dec_label_pc_11f74, label %dec_label_pc_12014

dec_label_pc_11f74:                               ; preds = %dec_label_pc_11f6c
  %v1_11f74 = urem i32 %v2_11f5c, 4
  store i32 %v1_11f74, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11f74 = icmp eq i32 %v1_11f74, 0
  store i1 %v2_11f74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11f74, label %dec_label_pc_11f7c, label %dec_label_pc_12040

dec_label_pc_11f7c:                               ; preds = %dec_label_pc_11f74, %dec_label_pc_12038
  %v0_11f9448 = phi i32 [ %v2_11f60, %dec_label_pc_11f74 ], [ %v0_1208831, %dec_label_pc_12038 ]
  %v0_11f9047 = phi i32 [ %v2_11f5c, %dec_label_pc_11f74 ], [ %v0_12038, %dec_label_pc_12038 ]
  %v0_11f7c = phi i32 [ %v2_11f64, %dec_label_pc_11f74 ], [ %v2_12030, %dec_label_pc_12038 ]
  %v2_11f7c = add i32 %v0_11f7c, -8
  store i32 %v2_11f7c, i32* %r2.global-to-local, align 4
  %v4_11f7c = sub i32 7, %v0_11f7c
  %v5_11f7c = and i32 %v4_11f7c, %v0_11f7c
  %v6_11f7c = icmp slt i32 %v5_11f7c, 0
  store i1 %v6_11f7c, i1* %cpsr_v.global-to-local, align 1
  %v7_11f7c = icmp slt i32 %v2_11f7c, 0
  store i1 %v7_11f7c, i1* %cpsr_n.global-to-local, align 1
  %v8_11f7c = icmp eq i32 %v0_11f7c, 8
  store i1 %v8_11f7c, i1* %cpsr_z.global-to-local, align 1
  %v5_11f80 = icmp slt i32 %v0_11f7c, 8
  br i1 %v5_11f80, label %dec_label_pc_11fcc, label %dec_label_pc_11f84

dec_label_pc_11f84:                               ; preds = %dec_label_pc_11f7c
  %v3_11f84 = load i32, i32* @r4, align 4
  store i32 %v3_11f84, i32* %stack_var_-8, align 4
  %v6_11f84 = load i32, i32* @lr, align 4
  %v2_11f88 = add i32 %v0_11f7c, -28
  store i32 %v2_11f88, i32* %r2.global-to-local, align 4
  %v4_11f88 = sub i32 27, %v0_11f7c
  %v5_11f88 = and i32 %v4_11f88, %v2_11f7c
  %v6_11f88 = icmp slt i32 %v5_11f88, 0
  store i1 %v6_11f88, i1* %cpsr_v.global-to-local, align 1
  %v7_11f88 = icmp slt i32 %v2_11f88, 0
  store i1 %v7_11f88, i1* %cpsr_n.global-to-local, align 1
  %v8_11f88 = icmp eq i32 %v2_11f7c, 20
  store i1 %v8_11f88, i1* %cpsr_z.global-to-local, align 1
  %v5_11f8c = icmp slt i32 %v2_11f7c, 20
  br i1 %v5_11f8c, label %dec_label_pc_11fa8, label %dec_label_pc_11f90

dec_label_pc_11f90:                               ; preds = %dec_label_pc_11f84, %dec_label_pc_11f90.dec_label_pc_11f90_crit_edge
  %v0_11f94 = phi i32 [ %v1_11f9c, %dec_label_pc_11f90.dec_label_pc_11f90_crit_edge ], [ %v0_11f9448, %dec_label_pc_11f84 ]
  %v0_11f90 = phi i32 [ %v0_11f90.pre, %dec_label_pc_11f90.dec_label_pc_11f90_crit_edge ], [ %v0_11f9047, %dec_label_pc_11f84 ]
  %v1_11f90 = add i32 %v0_11f90, -4
  %v2_11f90 = inttoptr i32 %v1_11f90 to i32*
  %v3_11f90 = load i32, i32* %v2_11f90, align 4
  store i32 %v3_11f90, i32* %r3.global-to-local, align 4
  %v4_11f90 = add i32 %v0_11f90, -8
  %v5_11f90 = inttoptr i32 %v4_11f90 to i32*
  %v6_11f90 = load i32, i32* %v5_11f90, align 4
  store i32 %v6_11f90, i32* %r4.global-to-local, align 4
  %v7_11f90 = add i32 %v0_11f90, -12
  %v8_11f90 = inttoptr i32 %v7_11f90 to i32*
  %v9_11f90 = load i32, i32* %v8_11f90, align 4
  store i32 %v9_11f90, i32* %ip.global-to-local, align 4
  %v10_11f90 = add i32 %v0_11f90, -16
  %v11_11f90 = inttoptr i32 %v10_11f90 to i32*
  %v12_11f90 = load i32, i32* %v11_11f90, align 4
  store i32 %v12_11f90, i32* %lr.global-to-local, align 4
  store i32 %v10_11f90, i32* %r1.global-to-local, align 4
  %v1_11f94 = add i32 %v0_11f94, -16
  %v2_11f94 = inttoptr i32 %v1_11f94 to i32*
  store i32 %v3_11f90, i32* %v2_11f94, align 4
  %v4_11f94 = add i32 %v0_11f94, -12
  %v5_11f94 = inttoptr i32 %v4_11f94 to i32*
  %v6_11f94 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_11f94, i32* %v5_11f94, align 4
  %v7_11f94 = add i32 %v0_11f94, -8
  %v8_11f94 = inttoptr i32 %v7_11f94 to i32*
  %v9_11f94 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_11f94, i32* %v8_11f94, align 4
  %v10_11f94 = add i32 %v0_11f94, -4
  %v11_11f94 = inttoptr i32 %v10_11f94 to i32*
  %v12_11f94 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_11f94, i32* %v11_11f94, align 4
  store i32 %v1_11f94, i32* %r0.global-to-local, align 4
  %v0_11f98 = load i32, i32* %r1.global-to-local, align 4
  %v1_11f98 = add i32 %v0_11f98, -4
  %v2_11f98 = inttoptr i32 %v1_11f98 to i32*
  %v3_11f98 = load i32, i32* %v2_11f98, align 4
  store i32 %v3_11f98, i32* %r3.global-to-local, align 4
  %v4_11f98 = add i32 %v0_11f98, -8
  %v5_11f98 = inttoptr i32 %v4_11f98 to i32*
  %v6_11f98 = load i32, i32* %v5_11f98, align 4
  store i32 %v6_11f98, i32* %r4.global-to-local, align 4
  %v7_11f98 = add i32 %v0_11f98, -12
  %v8_11f98 = inttoptr i32 %v7_11f98 to i32*
  %v9_11f98 = load i32, i32* %v8_11f98, align 4
  store i32 %v9_11f98, i32* %ip.global-to-local, align 4
  %v10_11f98 = add i32 %v0_11f98, -16
  %v11_11f98 = inttoptr i32 %v10_11f98 to i32*
  %v12_11f98 = load i32, i32* %v11_11f98, align 4
  store i32 %v12_11f98, i32* %lr.global-to-local, align 4
  store i32 %v10_11f98, i32* %r1.global-to-local, align 4
  %v1_11f9c = add i32 %v0_11f94, -32
  %v2_11f9c = inttoptr i32 %v1_11f9c to i32*
  store i32 %v3_11f98, i32* %v2_11f9c, align 4
  %v4_11f9c = add i32 %v0_11f94, -28
  %v5_11f9c = inttoptr i32 %v4_11f9c to i32*
  %v6_11f9c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_11f9c, i32* %v5_11f9c, align 4
  %v7_11f9c = add i32 %v0_11f94, -24
  %v8_11f9c = inttoptr i32 %v7_11f9c to i32*
  %v9_11f9c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_11f9c, i32* %v8_11f9c, align 4
  %v10_11f9c = add i32 %v0_11f94, -20
  %v11_11f9c = inttoptr i32 %v10_11f9c to i32*
  %v12_11f9c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_11f9c, i32* %v11_11f9c, align 4
  store i32 %v1_11f9c, i32* %r0.global-to-local, align 4
  %v0_11fa0 = load i32, i32* %r2.global-to-local, align 4
  %v2_11fa0 = add i32 %v0_11fa0, -32
  store i32 %v2_11fa0, i32* %r2.global-to-local, align 4
  %v6_11fa4 = icmp slt i32 %v0_11fa0, 32
  br i1 %v6_11fa4, label %dec_label_pc_11fa8.loopexit, label %dec_label_pc_11f90.dec_label_pc_11f90_crit_edge

dec_label_pc_11f90.dec_label_pc_11f90_crit_edge:  ; preds = %dec_label_pc_11f90
  %v0_11f90.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f90

dec_label_pc_11fa8.loopexit:                      ; preds = %dec_label_pc_11f90
  %v4_11fa0 = sub i32 31, %v0_11fa0
  %v5_11fa0 = and i32 %v4_11fa0, %v0_11fa0
  %v6_11fa0 = icmp slt i32 %v5_11fa0, 0
  %v7_11fa0 = icmp slt i32 %v2_11fa0, 0
  store i1 %v6_11fa0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_11fa0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11fa8

dec_label_pc_11fa8:                               ; preds = %dec_label_pc_11fa8.loopexit, %dec_label_pc_11f84
  %v6_11fb0 = phi i32 [ %v1_11f9c, %dec_label_pc_11fa8.loopexit ], [ %v0_11f9448, %dec_label_pc_11f84 ]
  %v0_11fb8.pr = phi i32 [ %v2_11fa0, %dec_label_pc_11fa8.loopexit ], [ %v2_11f88, %dec_label_pc_11f84 ]
  %v4_11fa8 = add i32 %v0_11fb8.pr, 16
  %v6_11fa8 = sub i32 0, %v0_11fb8.pr
  %v7_11fa8 = and i32 %v4_11fa8, %v6_11fa8
  %v8_11fa8 = icmp slt i32 %v7_11fa8, 0
  store i1 %v8_11fa8, i1* %cpsr_v.global-to-local, align 1
  %v9_11fa8 = icmp slt i32 %v4_11fa8, 0
  store i1 %v9_11fa8, i1* %cpsr_n.global-to-local, align 1
  %v10_11fa8 = icmp eq i32 %v4_11fa8, 0
  store i1 %v10_11fa8, i1* %cpsr_z.global-to-local, align 1
  %v5_11fac = icmp slt i32 %v0_11fb8.pr, -16
  br i1 %v5_11fac, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_11fa8
  %v6_11fac = load i32, i32* %r1.global-to-local, align 4
  %v7_11fac = add i32 %v6_11fac, -4
  %v8_11fac = inttoptr i32 %v7_11fac to i32*
  %v9_11fac = load i32, i32* %v8_11fac, align 4
  store i32 %v9_11fac, i32* %r3.global-to-local, align 4
  %v10_11fac = add i32 %v6_11fac, -8
  %v11_11fac = inttoptr i32 %v10_11fac to i32*
  %v12_11fac = load i32, i32* %v11_11fac, align 4
  store i32 %v12_11fac, i32* %r4.global-to-local, align 4
  %v13_11fac = add i32 %v6_11fac, -12
  %v14_11fac = inttoptr i32 %v13_11fac to i32*
  %v15_11fac = load i32, i32* %v14_11fac, align 4
  store i32 %v15_11fac, i32* %ip.global-to-local, align 4
  %v16_11fac = add i32 %v6_11fac, -16
  %v17_11fac = inttoptr i32 %v16_11fac to i32*
  %v18_11fac = load i32, i32* %v17_11fac, align 4
  store i32 %v18_11fac, i32* %lr.global-to-local, align 4
  store i32 %v16_11fac, i32* %r1.global-to-local, align 4
  %v7_11fb0 = add i32 %v6_11fb0, -16
  %v8_11fb0 = inttoptr i32 %v7_11fb0 to i32*
  store i32 %v9_11fac, i32* %v8_11fb0, align 4
  %v10_11fb0 = add i32 %v6_11fb0, -12
  %v11_11fb0 = inttoptr i32 %v10_11fb0 to i32*
  %v12_11fb0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_11fb0, i32* %v11_11fb0, align 4
  %v13_11fb0 = add i32 %v6_11fb0, -8
  %v14_11fb0 = inttoptr i32 %v13_11fb0 to i32*
  %v15_11fb0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v15_11fb0, i32* %v14_11fb0, align 4
  %v16_11fb0 = add i32 %v6_11fb0, -4
  %v17_11fb0 = inttoptr i32 %v16_11fb0 to i32*
  %v18_11fb0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_11fb0, i32* %v17_11fb0, align 4
  store i32 %v7_11fb0, i32* %r0.global-to-local, align 4
  %v6_11fb4 = load i32, i32* %r2.global-to-local, align 4
  %v7_11fb4 = add i32 %v6_11fb4, -16
  store i32 %v7_11fb4, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_11fa8, %bb138
  %v6_11fc0 = phi i32 [ %v7_11fb0, %bb138 ], [ %v6_11fb0, %dec_label_pc_11fa8 ]
  %v0_11fb8 = phi i32 [ %v7_11fb4, %bb138 ], [ %v0_11fb8.pr, %dec_label_pc_11fa8 ]
  %v4_11fb8 = add i32 %v0_11fb8, 20
  store i32 %v4_11fb8, i32* %r2.global-to-local, align 4
  %v6_11fb8 = sub i32 0, %v0_11fb8
  %v7_11fb8 = and i32 %v4_11fb8, %v6_11fb8
  %v8_11fb8 = icmp slt i32 %v7_11fb8, 0
  store i1 %v8_11fb8, i1* %cpsr_v.global-to-local, align 1
  %v9_11fb8 = icmp slt i32 %v4_11fb8, 0
  store i1 %v9_11fb8, i1* %cpsr_n.global-to-local, align 1
  %v10_11fb8 = icmp eq i32 %v4_11fb8, 0
  store i1 %v10_11fb8, i1* %cpsr_z.global-to-local, align 1
  %v5_11fbc = icmp slt i32 %v0_11fb8, -20
  br i1 %v5_11fbc, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_11fbc = load i32, i32* %r1.global-to-local, align 4
  %v7_11fbc = add i32 %v6_11fbc, -4
  %v8_11fbc = inttoptr i32 %v7_11fbc to i32*
  %v9_11fbc = load i32, i32* %v8_11fbc, align 4
  store i32 %v9_11fbc, i32* %r3.global-to-local, align 4
  %v10_11fbc = add i32 %v6_11fbc, -8
  %v11_11fbc = inttoptr i32 %v10_11fbc to i32*
  %v12_11fbc = load i32, i32* %v11_11fbc, align 4
  store i32 %v12_11fbc, i32* %ip.global-to-local, align 4
  %v13_11fbc = add i32 %v6_11fbc, -12
  %v14_11fbc = inttoptr i32 %v13_11fbc to i32*
  %v15_11fbc = load i32, i32* %v14_11fbc, align 4
  store i32 %v15_11fbc, i32* %lr.global-to-local, align 4
  store i32 %v13_11fbc, i32* %r1.global-to-local, align 4
  %v7_11fc0 = add i32 %v6_11fc0, -12
  %v8_11fc0 = inttoptr i32 %v7_11fc0 to i32*
  store i32 %v9_11fbc, i32* %v8_11fc0, align 4
  %v10_11fc0 = add i32 %v6_11fc0, -8
  %v11_11fc0 = inttoptr i32 %v10_11fc0 to i32*
  %v12_11fc0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_11fc0, i32* %v11_11fc0, align 4
  %v13_11fc0 = add i32 %v6_11fc0, -4
  %v14_11fc0 = inttoptr i32 %v13_11fc0 to i32*
  %v15_11fc0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_11fc0, i32* %v14_11fc0, align 4
  store i32 %v7_11fc0, i32* %r0.global-to-local, align 4
  %v6_11fc4 = load i32, i32* %r2.global-to-local, align 4
  %v7_11fc4 = add i32 %v6_11fc4, -12
  store i32 %v7_11fc4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_11fe456 = phi i32 [ %v6_11fc0, %.thread13 ], [ %v7_11fc0, %bb139 ]
  %v0_11fcc54 = phi i32 [ %v4_11fb8, %.thread13 ], [ %v7_11fc4, %bb139 ]
  %v2_11fc8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11fc8, i32* @r4, align 4
  store i32 %v6_11f84, i32* @lr, align 4
  br label %dec_label_pc_11fcc

dec_label_pc_11fcc:                               ; preds = %dec_label_pc_11f7c, %.thread15
  %v7_11fdc = phi i32 [ %v0_11f9448, %dec_label_pc_11f7c ], [ %v6_11fe456, %.thread15 ]
  %v0_11fcc = phi i32 [ %v2_11f7c, %dec_label_pc_11f7c ], [ %v0_11fcc54, %.thread15 ]
  %v2_11fcc = add i32 %v0_11fcc, 8
  store i32 %v2_11fcc, i32* %r2.global-to-local, align 4
  %v4_11fcc = sub i32 0, %v0_11fcc
  %v5_11fcc = and i32 %v2_11fcc, %v4_11fcc
  %v6_11fcc = icmp slt i32 %v5_11fcc, 0
  store i1 %v6_11fcc, i1* %cpsr_v.global-to-local, align 1
  %v7_11fcc = icmp slt i32 %v2_11fcc, 0
  store i1 %v7_11fcc, i1* %cpsr_n.global-to-local, align 1
  %v8_11fcc = icmp eq i32 %v2_11fcc, 0
  store i1 %v8_11fcc, i1* %cpsr_z.global-to-local, align 1
  %v5_11fd0 = icmp slt i32 %v0_11fcc, -8
  br i1 %v5_11fd0, label %bb141, label %dec_label_pc_11fd4

dec_label_pc_11fd4:                               ; preds = %dec_label_pc_11fcc
  %v6_11fd4 = add i32 %v0_11fcc, 4
  store i32 %v6_11fd4, i32* %r2.global-to-local, align 4
  %v8_11fd4 = sub i32 -5, %v0_11fcc
  %v9_11fd4 = and i32 %v8_11fd4, %v2_11fcc
  %v10_11fd4 = icmp slt i32 %v9_11fd4, 0
  store i1 %v10_11fd4, i1* %cpsr_v.global-to-local, align 1
  %v11_11fd4 = icmp slt i32 %v6_11fd4, 0
  store i1 %v11_11fd4, i1* %cpsr_n.global-to-local, align 1
  %v12_11fd4 = icmp eq i32 %v2_11fcc, 4
  store i1 %v12_11fd4, i1* %cpsr_z.global-to-local, align 1
  %v5_11fd8 = icmp slt i32 %v2_11fcc, 4
  %v6_11fd8 = load i32, i32* %r1.global-to-local, align 4
  %v7_11fd8 = add i32 %v6_11fd8, -4
  %v8_11fd8 = inttoptr i32 %v7_11fd8 to i32*
  %v9_11fd8 = load i32, i32* %v8_11fd8, align 4
  store i32 %v9_11fd8, i32* %r3.global-to-local, align 4
  br i1 %v5_11fd8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_11fd4
  store i32 %v7_11fd8, i32* %r1.global-to-local, align 4
  %v8_11fdc = add i32 %v7_11fdc, -4
  %v9_11fdc = inttoptr i32 %v8_11fdc to i32*
  store i32 %v9_11fd8, i32* %v9_11fdc, align 4
  %v10_11fdc = load i32, i32* %r0.global-to-local, align 4
  %v11_11fdc = add i32 %v10_11fdc, -4
  store i32 %v11_11fdc, i32* %r0.global-to-local, align 4
  %v0_11fec.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_11fd4
  %v10_11fe0 = add i32 %v6_11fd8, -8
  %v11_11fe0 = inttoptr i32 %v10_11fe0 to i32*
  %v12_11fe0 = load i32, i32* %v11_11fe0, align 4
  store i32 %v12_11fe0, i32* %ip.global-to-local, align 4
  store i32 %v10_11fe0, i32* %r1.global-to-local, align 4
  %v7_11fe4 = add i32 %v7_11fdc, -8
  %v8_11fe4 = inttoptr i32 %v7_11fe4 to i32*
  store i32 %v9_11fd8, i32* %v8_11fe4, align 4
  %v10_11fe4 = add i32 %v7_11fdc, -4
  %v11_11fe4 = inttoptr i32 %v10_11fe4 to i32*
  %v12_11fe4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_11fe4, i32* %v11_11fe4, align 4
  store i32 %v7_11fe4, i32* %r0.global-to-local, align 4
  %v6_11fe8 = load i32, i32* %r2.global-to-local, align 4
  %v7_11fe8 = add i32 %v6_11fe8, -4
  store i32 %v7_11fe8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_11fcc, %dec_label_pc_11f5c, %dec_label_pc_12190, %dec_label_pc_12124, %dec_label_pc_120b8, %bb140
  %v2_11ff0 = phi i32 [ %v11_11fdc, %.thread19 ], [ %v0_1208831, %.thread25 ], [ %v7_11fdc, %dec_label_pc_11fcc ], [ %v2_11f60, %dec_label_pc_11f5c ], [ %v2_11ffc64, %dec_label_pc_12190 ], [ %v2_11ffc63, %dec_label_pc_12124 ], [ %v2_11ffc62, %dec_label_pc_120b8 ], [ %v7_11fe4, %bb140 ]
  %v0_11fec = phi i32 [ %v0_11fec.pre, %.thread19 ], [ %v2_12030, %.thread25 ], [ %v2_11fcc, %dec_label_pc_11fcc ], [ %v2_11f64, %dec_label_pc_11f5c ], [ %v0_11fec60, %dec_label_pc_12190 ], [ %v0_11fec59, %dec_label_pc_12124 ], [ %v0_11fec58, %dec_label_pc_120b8 ], [ %v7_11fe8, %bb140 ]
  %v1_11fec = add i32 %v0_11fec, 4
  store i32 %v1_11fec, i32* %r2.global-to-local, align 4
  %v3_11fec = sub i32 0, %v0_11fec
  %v4_11fec = and i32 %v1_11fec, %v3_11fec
  %v5_11fec = icmp slt i32 %v4_11fec, 0
  store i1 %v5_11fec, i1* %cpsr_v.global-to-local, align 1
  %v6_11fec = icmp slt i32 %v1_11fec, 0
  store i1 %v6_11fec, i1* %cpsr_n.global-to-local, align 1
  %v7_11fec = icmp eq i32 %v1_11fec, 0
  store i1 %v7_11fec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11fec, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_11ff4 = add i32 %v0_11fec, 2
  %v3_11ff4 = sub i32 -3, %v0_11fec
  %v4_11ff4 = and i32 %v3_11ff4, %v1_11fec
  %v5_11ff4 = icmp slt i32 %v4_11ff4, 0
  store i1 %v5_11ff4, i1* %cpsr_v.global-to-local, align 1
  %v6_11ff4 = icmp slt i32 %v1_11ff4, 0
  store i1 %v6_11ff4, i1* %cpsr_n.global-to-local, align 1
  %v7_11ff4 = icmp eq i32 %v1_11fec, 2
  store i1 %v7_11ff4, i1* %cpsr_z.global-to-local, align 1
  %v0_11ff8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ff8 = add i32 %v0_11ff8, -1
  %v2_11ff8 = inttoptr i32 %v1_11ff8 to i8*
  %v3_11ff8 = load i8, i8* %v2_11ff8, align 1
  %v4_11ff8 = zext i8 %v3_11ff8 to i32
  store i32 %v4_11ff8, i32* %r3.global-to-local, align 4
  store i32 %v1_11ff8, i32* %r1.global-to-local, align 4
  %v3_11ffc = add i32 %v2_11ff0, -1
  %v4_11ffc = inttoptr i32 %v3_11ffc to i8*
  store i8 %v3_11ff8, i8* %v4_11ffc, align 1
  %v5_11ffc = load i32, i32* %r0.global-to-local, align 4
  %v6_11ffc = add i32 %v5_11ffc, -1
  store i32 %v6_11ffc, i32* %r0.global-to-local, align 4
  %v0_12000 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_12000 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_12000 = xor i1 %v0_12000, %v1_12000
  br i1 %v2_12000, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_12000 = load i32, i32* %r1.global-to-local, align 4
  %v4_12000 = add i32 %v3_12000, -1
  %v5_12000 = inttoptr i32 %v4_12000 to i8*
  %v6_12000 = load i8, i8* %v5_12000, align 1
  %v7_12000 = zext i8 %v6_12000 to i32
  store i32 %v7_12000, i32* %r3.global-to-local, align 4
  store i32 %v4_12000, i32* %r1.global-to-local, align 4
  %v6_12004 = add i32 %v5_11ffc, -2
  %v7_12004 = inttoptr i32 %v6_12004 to i8*
  store i8 %v6_12000, i8* %v7_12004, align 1
  %v8_12004 = load i32, i32* %r0.global-to-local, align 4
  %v9_12004 = add i32 %v8_12004, -1
  store i32 %v9_12004, i32* %r0.global-to-local, align 4
  %v1_12008.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_12008.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_1200c = phi i32 [ %v9_12004, %bb143 ], [ %v6_11ffc, %bb142 ]
  %v2_1200c = phi i1 [ %v2_12008.pre, %bb143 ], [ %v1_12000, %bb142 ]
  %v1_1200c = phi i1 [ %v1_12008.pre, %bb143 ], [ %v0_12000, %bb142 ]
  %v0_12008 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_12008 = xor i1 %v2_1200c, %v1_1200c
  %v4_12008 = or i1 %v0_12008, %v3_12008
  br i1 %v4_12008, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_12008 = load i32, i32* %r1.global-to-local, align 4
  %v6_12008 = add i32 %v5_12008, -1
  %v7_12008 = inttoptr i32 %v6_12008 to i8*
  %v8_12008 = load i8, i8* %v7_12008, align 1
  %v9_12008 = zext i8 %v8_12008 to i32
  store i32 %v9_12008, i32* %r3.global-to-local, align 4
  store i32 %v6_12008, i32* %r1.global-to-local, align 4
  %v8_1200c = add i32 %v7_1200c, -1
  %v9_1200c = inttoptr i32 %v8_1200c to i8*
  store i8 %v8_12008, i8* %v9_1200c, align 1
  %v10_1200c = load i32, i32* %r0.global-to-local, align 4
  %v11_1200c = add i32 %v10_1200c, -1
  store i32 %v11_1200c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_12014:                               ; preds = %dec_label_pc_11f6c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_12014 = icmp eq i32 %v1_11f6c, 1
  store i1 %v8_12014, i1* %cpsr_n.global-to-local, align 1
  %v9_12014 = icmp eq i32 %v1_11f6c, 2
  store i1 %v9_12014, i1* %cpsr_z.global-to-local, align 1
  %v1_12018 = add i32 %v2_11f5c, -1
  %v2_12018 = inttoptr i32 %v1_12018 to i8*
  %v3_12018 = load i8, i8* %v2_12018, align 1
  %v4_12018 = zext i8 %v3_12018 to i32
  store i32 %v4_12018, i32* %r3.global-to-local, align 4
  store i32 %v1_12018, i32* %r1.global-to-local, align 4
  %v3_1201c = add i32 %v2_11f60, -1
  %v4_1201c = inttoptr i32 %v3_1201c to i8*
  store i8 %v3_12018, i8* %v4_1201c, align 1
  %v5_1201c = load i32, i32* %r0.global-to-local, align 4
  %v6_1201c = add i32 %v5_1201c, -1
  store i32 %v6_1201c, i32* %r0.global-to-local, align 4
  br i1 %v8_12014, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_12014
  %v6_12020 = load i32, i32* %r1.global-to-local, align 4
  %v7_12020 = add i32 %v6_12020, -1
  %v8_12020 = inttoptr i32 %v7_12020 to i8*
  %v9_12020 = load i8, i8* %v8_12020, align 1
  %v10_12020 = zext i8 %v9_12020 to i32
  store i32 %v10_12020, i32* %r3.global-to-local, align 4
  store i32 %v7_12020, i32* %r1.global-to-local, align 4
  %v9_12024 = add i32 %v5_1201c, -2
  %v10_12024 = inttoptr i32 %v9_12024 to i8*
  store i8 %v9_12020, i8* %v10_12024, align 1
  %v11_12024 = load i32, i32* %r0.global-to-local, align 4
  %v12_12024 = add i32 %v11_12024, -1
  store i32 %v12_12024, i32* %r0.global-to-local, align 4
  br i1 %v9_12014, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_12028 = load i32, i32* %r1.global-to-local, align 4
  %v9_12028 = add i32 %v8_12028, -1
  %v10_12028 = inttoptr i32 %v9_12028 to i8*
  %v11_12028 = load i8, i8* %v10_12028, align 1
  %v12_12028 = zext i8 %v11_12028 to i32
  store i32 %v12_12028, i32* %r3.global-to-local, align 4
  store i32 %v9_12028, i32* %r1.global-to-local, align 4
  %v11_1202c = add i32 %v11_12024, -2
  %v12_1202c = inttoptr i32 %v11_1202c to i8*
  store i8 %v11_12028, i8* %v12_1202c, align 1
  %v13_1202c = load i32, i32* %r0.global-to-local, align 4
  %v14_1202c = add i32 %v13_1202c, -1
  store i32 %v14_1202c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_12014, %bb146
  %v0_1208831 = phi i32 [ %v12_12024, %bb145 ], [ %v6_1201c, %dec_label_pc_12014 ], [ %v14_1202c, %bb146 ]
  %v0_12030 = load i32, i32* %r2.global-to-local, align 4
  %v1_12030 = load i32, i32* %ip.global-to-local, align 4
  %v2_12030 = sub i32 %v0_12030, %v1_12030
  store i32 %v2_12030, i32* %r2.global-to-local, align 4
  %v4_12030 = xor i32 %v1_12030, %v0_12030
  %v5_12030 = xor i32 %v2_12030, %v0_12030
  %v6_12030 = and i32 %v5_12030, %v4_12030
  %v7_12030 = icmp slt i32 %v6_12030, 0
  store i1 %v7_12030, i1* %cpsr_v.global-to-local, align 1
  %v8_12030 = icmp slt i32 %v2_12030, 0
  store i1 %v8_12030, i1* %cpsr_n.global-to-local, align 1
  %v9_12030 = icmp eq i32 %v0_12030, %v1_12030
  store i1 %v9_12030, i1* %cpsr_z.global-to-local, align 1
  %v5_12034 = icmp slt i32 %v0_12030, %v1_12030
  br i1 %v5_12034, label %bb141, label %dec_label_pc_12038

dec_label_pc_12038:                               ; preds = %.thread25
  %v0_12038 = load i32, i32* %r1.global-to-local, align 4
  %v1_12038 = urem i32 %v0_12038, 4
  store i32 %v1_12038, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_12038 = icmp eq i32 %v1_12038, 0
  store i1 %v2_12038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12038, label %dec_label_pc_11f7c, label %dec_label_pc_12040

dec_label_pc_12040:                               ; preds = %dec_label_pc_11f74, %dec_label_pc_12038
  %v0_1208830 = phi i32 [ %v2_11f60, %dec_label_pc_11f74 ], [ %v0_1208831, %dec_label_pc_12038 ]
  %v0_12134 = phi i32 [ %v2_11f64, %dec_label_pc_11f74 ], [ %v2_12030, %dec_label_pc_12038 ]
  %v0_12040 = phi i32 [ %v2_11f5c, %dec_label_pc_11f74 ], [ %v0_12038, %dec_label_pc_12038 ]
  %v0_12048 = phi i32 [ %v1_11f74, %dec_label_pc_11f74 ], [ %v1_12038, %dec_label_pc_12038 ]
  %v1_12040 = and i32 %v0_12040, -4
  store i32 %v1_12040, i32* %r1.global-to-local, align 4
  %v1_12044 = inttoptr i32 %v1_12040 to i32*
  %v2_12044 = load i32, i32* %v1_12044, align 4
  store i32 %v2_12044, i32* %r3.global-to-local, align 4
  %v7_12048 = icmp ult i32 %v0_12048, 2
  %v2_1212c = add i32 %v0_12134, -12
  %v4_1212c = sub i32 11, %v0_12134
  %v5_1212c = and i32 %v4_1212c, %v0_12134
  %v6_1212c = icmp slt i32 %v5_1212c, 0
  store i1 %v6_1212c, i1* %cpsr_v.global-to-local, align 1
  %v7_1212c = icmp slt i32 %v2_1212c, 0
  store i1 %v7_1212c, i1* %cpsr_n.global-to-local, align 1
  %v8_1212c = icmp eq i32 %v0_12134, 12
  store i1 %v8_1212c, i1* %cpsr_z.global-to-local, align 1
  %v5_12130 = icmp slt i32 %v0_12134, 12
  br i1 %v7_12048, label %dec_label_pc_1212c, label %dec_label_pc_12050

dec_label_pc_12050:                               ; preds = %dec_label_pc_12040
  %v8_12048 = icmp eq i32 %v0_12048, 2
  br i1 %v8_12048, label %dec_label_pc_120c0, label %dec_label_pc_12054

dec_label_pc_12054:                               ; preds = %dec_label_pc_12050
  br i1 %v5_12130, label %dec_label_pc_120a0, label %dec_label_pc_1205c

dec_label_pc_1205c:                               ; preds = %dec_label_pc_12054
  store i32 %v2_1212c, i32* %r2.global-to-local, align 4
  %v3_12060 = load i32, i32* @r4, align 4
  store i32 %v3_12060, i32* %stack_var_-12, align 4
  %v6_12060 = load i32, i32* @r5, align 4
  store i32 %v6_12060, i32* %stack_var_-8, align 4
  %v9_12060 = load i32, i32* @lr, align 4
  br label %dec_label_pc_12064

dec_label_pc_12064:                               ; preds = %dec_label_pc_12064.dec_label_pc_12064_crit_edge, %dec_label_pc_1205c
  %v0_12088 = phi i32 [ %v1_12088, %dec_label_pc_12064.dec_label_pc_12064_crit_edge ], [ %v0_1208830, %dec_label_pc_1205c ]
  %v0_12068 = phi i32 [ %v0_12068.pre, %dec_label_pc_12064.dec_label_pc_12064_crit_edge ], [ %v1_12040, %dec_label_pc_1205c ]
  %v0_12064 = phi i32 [ %v0_12064.pre, %dec_label_pc_12064.dec_label_pc_12064_crit_edge ], [ %v2_12044, %dec_label_pc_1205c ]
  %v3_12064 = mul i32 %v0_12064, 256
  store i32 %v3_12064, i32* %lr.global-to-local, align 4
  %v1_12068 = add i32 %v0_12068, -4
  %v2_12068 = inttoptr i32 %v1_12068 to i32*
  %v3_12068 = load i32, i32* %v2_12068, align 4
  store i32 %v3_12068, i32* %r3.global-to-local, align 4
  %v4_12068 = add i32 %v0_12068, -8
  %v5_12068 = inttoptr i32 %v4_12068 to i32*
  %v6_12068 = load i32, i32* %v5_12068, align 4
  store i32 %v6_12068, i32* %r4.global-to-local, align 4
  %v7_12068 = add i32 %v0_12068, -12
  %v8_12068 = inttoptr i32 %v7_12068 to i32*
  %v9_12068 = load i32, i32* %v8_12068, align 4
  store i32 %v9_12068, i32* %r5.global-to-local, align 4
  %v10_12068 = add i32 %v0_12068, -16
  %v11_12068 = inttoptr i32 %v10_12068 to i32*
  %v12_12068 = load i32, i32* %v11_12068, align 4
  store i32 %v10_12068, i32* %r1.global-to-local, align 4
  %v4_1206c = udiv i32 %v12_12068, 16777216
  %v5_1206c = or i32 %v4_1206c, %v3_12064
  store i32 %v5_1206c, i32* %lr.global-to-local, align 4
  %v3_12070 = mul i32 %v12_12068, 256
  %v4_12074 = udiv i32 %v9_12068, 16777216
  %v5_12074 = or i32 %v3_12070, %v4_12074
  store i32 %v5_12074, i32* %ip.global-to-local, align 4
  %v3_12078 = mul i32 %v9_12068, 256
  %v4_1207c = udiv i32 %v6_12068, 16777216
  %v5_1207c = or i32 %v3_12078, %v4_1207c
  store i32 %v5_1207c, i32* %r5.global-to-local, align 4
  %v3_12080 = mul i32 %v6_12068, 256
  %v4_12084 = udiv i32 %v3_12068, 16777216
  %v5_12084 = or i32 %v3_12080, %v4_12084
  store i32 %v5_12084, i32* %r4.global-to-local, align 4
  %v1_12088 = add i32 %v0_12088, -16
  %v2_12088 = inttoptr i32 %v1_12088 to i32*
  store i32 %v5_12084, i32* %v2_12088, align 4
  %v4_12088 = add i32 %v0_12088, -12
  %v5_12088 = inttoptr i32 %v4_12088 to i32*
  %v6_12088 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_12088, i32* %v5_12088, align 4
  %v7_12088 = add i32 %v0_12088, -8
  %v8_12088 = inttoptr i32 %v7_12088 to i32*
  %v9_12088 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_12088, i32* %v8_12088, align 4
  %v10_12088 = add i32 %v0_12088, -4
  %v11_12088 = inttoptr i32 %v10_12088 to i32*
  %v12_12088 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12088, i32* %v11_12088, align 4
  store i32 %v1_12088, i32* %r0.global-to-local, align 4
  %v0_1208c = load i32, i32* %r2.global-to-local, align 4
  %v2_1208c = add i32 %v0_1208c, -16
  store i32 %v2_1208c, i32* %r2.global-to-local, align 4
  %v6_12090 = icmp slt i32 %v0_1208c, 16
  br i1 %v6_12090, label %dec_label_pc_12094, label %dec_label_pc_12064.dec_label_pc_12064_crit_edge

dec_label_pc_12064.dec_label_pc_12064_crit_edge:  ; preds = %dec_label_pc_12064
  %v0_12064.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_12068.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12064

dec_label_pc_12094:                               ; preds = %dec_label_pc_12064
  %v2_12094 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12094, i32* @r4, align 4
  %v5_12094 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_12094, i32* @r5, align 4
  store i32 %v9_12060, i32* @lr, align 4
  %v2_12098 = add i32 %v0_1208c, -4
  store i32 %v2_12098, i32* %r2.global-to-local, align 4
  %v4_12098 = add i32 %v0_1208c, 2147483632
  %v5_12098 = and i32 %v2_12098, %v4_12098
  %v6_12098 = icmp slt i32 %v5_12098, 0
  store i1 %v6_12098, i1* %cpsr_v.global-to-local, align 1
  %v7_12098 = icmp slt i32 %v2_12098, 0
  store i1 %v7_12098, i1* %cpsr_n.global-to-local, align 1
  %v8_12098 = icmp eq i32 %v2_12098, 0
  store i1 %v8_12098, i1* %cpsr_z.global-to-local, align 1
  %v5_1209c = icmp slt i32 %v2_1208c, -12
  br i1 %v5_1209c, label %dec_label_pc_120b8, label %dec_label_pc_120a0

dec_label_pc_120a0:                               ; preds = %dec_label_pc_12094, %dec_label_pc_12054, %dec_label_pc_120a0
  %v1_120ac = phi i32 [ %v5_120ac, %dec_label_pc_120a0 ], [ %v1_12088, %dec_label_pc_12094 ], [ %v0_1208830, %dec_label_pc_12054 ]
  %v0_120a0 = load i32, i32* %r3.global-to-local, align 4
  %v3_120a0 = mul i32 %v0_120a0, 256
  store i32 %v3_120a0, i32* %ip.global-to-local, align 4
  %v0_120a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_120a4 = add i32 %v0_120a4, -4
  %v2_120a4 = inttoptr i32 %v1_120a4 to i32*
  %v3_120a4 = load i32, i32* %v2_120a4, align 4
  store i32 %v3_120a4, i32* %r3.global-to-local, align 4
  store i32 %v1_120a4, i32* %r1.global-to-local, align 4
  %v4_120a8 = udiv i32 %v3_120a4, 16777216
  %v5_120a8 = or i32 %v4_120a8, %v3_120a0
  store i32 %v5_120a8, i32* %ip.global-to-local, align 4
  %v2_120ac = add i32 %v1_120ac, -4
  %v3_120ac = inttoptr i32 %v2_120ac to i32*
  store i32 %v5_120a8, i32* %v3_120ac, align 4
  %v4_120ac = load i32, i32* %r0.global-to-local, align 4
  %v5_120ac = add i32 %v4_120ac, -4
  store i32 %v5_120ac, i32* %r0.global-to-local, align 4
  %v0_120b0 = load i32, i32* %r2.global-to-local, align 4
  %v2_120b0 = add i32 %v0_120b0, -4
  store i32 %v2_120b0, i32* %r2.global-to-local, align 4
  %v6_120b4 = icmp slt i32 %v0_120b0, 4
  br i1 %v6_120b4, label %dec_label_pc_120b8.loopexit, label %dec_label_pc_120a0

dec_label_pc_120b8.loopexit:                      ; preds = %dec_label_pc_120a0
  %v4_120b0 = sub i32 3, %v0_120b0
  %v5_120b0 = and i32 %v4_120b0, %v0_120b0
  %v6_120b0 = icmp slt i32 %v5_120b0, 0
  %v7_120b0 = icmp slt i32 %v2_120b0, 0
  store i1 %v6_120b0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_120b0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_120b8

dec_label_pc_120b8:                               ; preds = %dec_label_pc_120b8.loopexit, %dec_label_pc_12094
  %v2_11ffc62 = phi i32 [ %v5_120ac, %dec_label_pc_120b8.loopexit ], [ %v1_12088, %dec_label_pc_12094 ]
  %v0_11fec58 = phi i32 [ %v2_120b0, %dec_label_pc_120b8.loopexit ], [ %v2_12098, %dec_label_pc_12094 ]
  %v0_120b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_120b8 = add i32 %v0_120b8, 3
  store i32 %v1_120b8, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_120c0:                               ; preds = %dec_label_pc_12050
  br i1 %v5_12130, label %dec_label_pc_1210c, label %dec_label_pc_120c8

dec_label_pc_120c8:                               ; preds = %dec_label_pc_120c0
  store i32 %v2_1212c, i32* %r2.global-to-local, align 4
  %v3_120cc = load i32, i32* @r4, align 4
  store i32 %v3_120cc, i32* %stack_var_-12, align 4
  %v6_120cc = load i32, i32* @r5, align 4
  store i32 %v6_120cc, i32* %stack_var_-8, align 4
  %v9_120cc = load i32, i32* @lr, align 4
  br label %dec_label_pc_120d0

dec_label_pc_120d0:                               ; preds = %dec_label_pc_120d0.dec_label_pc_120d0_crit_edge, %dec_label_pc_120c8
  %v0_120f4 = phi i32 [ %v1_120f4, %dec_label_pc_120d0.dec_label_pc_120d0_crit_edge ], [ %v0_1208830, %dec_label_pc_120c8 ]
  %v0_120d4 = phi i32 [ %v0_120d4.pre, %dec_label_pc_120d0.dec_label_pc_120d0_crit_edge ], [ %v1_12040, %dec_label_pc_120c8 ]
  %v0_120d0 = phi i32 [ %v0_120d0.pre, %dec_label_pc_120d0.dec_label_pc_120d0_crit_edge ], [ %v2_12044, %dec_label_pc_120c8 ]
  %v3_120d0 = mul i32 %v0_120d0, 65536
  store i32 %v3_120d0, i32* %lr.global-to-local, align 4
  %v1_120d4 = add i32 %v0_120d4, -4
  %v2_120d4 = inttoptr i32 %v1_120d4 to i32*
  %v3_120d4 = load i32, i32* %v2_120d4, align 4
  store i32 %v3_120d4, i32* %r3.global-to-local, align 4
  %v4_120d4 = add i32 %v0_120d4, -8
  %v5_120d4 = inttoptr i32 %v4_120d4 to i32*
  %v6_120d4 = load i32, i32* %v5_120d4, align 4
  store i32 %v6_120d4, i32* %r4.global-to-local, align 4
  %v7_120d4 = add i32 %v0_120d4, -12
  %v8_120d4 = inttoptr i32 %v7_120d4 to i32*
  %v9_120d4 = load i32, i32* %v8_120d4, align 4
  store i32 %v9_120d4, i32* %r5.global-to-local, align 4
  %v10_120d4 = add i32 %v0_120d4, -16
  %v11_120d4 = inttoptr i32 %v10_120d4 to i32*
  %v12_120d4 = load i32, i32* %v11_120d4, align 4
  store i32 %v10_120d4, i32* %r1.global-to-local, align 4
  %v4_120d8 = udiv i32 %v12_120d4, 65536
  %v5_120d8 = or i32 %v4_120d8, %v3_120d0
  store i32 %v5_120d8, i32* %lr.global-to-local, align 4
  %v3_120dc = mul i32 %v12_120d4, 65536
  %v4_120e0 = udiv i32 %v9_120d4, 65536
  %v5_120e0 = or i32 %v3_120dc, %v4_120e0
  store i32 %v5_120e0, i32* %ip.global-to-local, align 4
  %v3_120e4 = mul i32 %v9_120d4, 65536
  %v4_120e8 = udiv i32 %v6_120d4, 65536
  %v5_120e8 = or i32 %v3_120e4, %v4_120e8
  store i32 %v5_120e8, i32* %r5.global-to-local, align 4
  %v3_120ec = mul i32 %v6_120d4, 65536
  %v4_120f0 = udiv i32 %v3_120d4, 65536
  %v5_120f0 = or i32 %v3_120ec, %v4_120f0
  store i32 %v5_120f0, i32* %r4.global-to-local, align 4
  %v1_120f4 = add i32 %v0_120f4, -16
  %v2_120f4 = inttoptr i32 %v1_120f4 to i32*
  store i32 %v5_120f0, i32* %v2_120f4, align 4
  %v4_120f4 = add i32 %v0_120f4, -12
  %v5_120f4 = inttoptr i32 %v4_120f4 to i32*
  %v6_120f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_120f4, i32* %v5_120f4, align 4
  %v7_120f4 = add i32 %v0_120f4, -8
  %v8_120f4 = inttoptr i32 %v7_120f4 to i32*
  %v9_120f4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_120f4, i32* %v8_120f4, align 4
  %v10_120f4 = add i32 %v0_120f4, -4
  %v11_120f4 = inttoptr i32 %v10_120f4 to i32*
  %v12_120f4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_120f4, i32* %v11_120f4, align 4
  store i32 %v1_120f4, i32* %r0.global-to-local, align 4
  %v0_120f8 = load i32, i32* %r2.global-to-local, align 4
  %v2_120f8 = add i32 %v0_120f8, -16
  store i32 %v2_120f8, i32* %r2.global-to-local, align 4
  %v6_120fc = icmp slt i32 %v0_120f8, 16
  br i1 %v6_120fc, label %dec_label_pc_12100, label %dec_label_pc_120d0.dec_label_pc_120d0_crit_edge

dec_label_pc_120d0.dec_label_pc_120d0_crit_edge:  ; preds = %dec_label_pc_120d0
  %v0_120d0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_120d4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_120d0

dec_label_pc_12100:                               ; preds = %dec_label_pc_120d0
  %v2_12100 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12100, i32* @r4, align 4
  %v5_12100 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_12100, i32* @r5, align 4
  store i32 %v9_120cc, i32* @lr, align 4
  %v2_12104 = add i32 %v0_120f8, -4
  store i32 %v2_12104, i32* %r2.global-to-local, align 4
  %v4_12104 = add i32 %v0_120f8, 2147483632
  %v5_12104 = and i32 %v2_12104, %v4_12104
  %v6_12104 = icmp slt i32 %v5_12104, 0
  store i1 %v6_12104, i1* %cpsr_v.global-to-local, align 1
  %v7_12104 = icmp slt i32 %v2_12104, 0
  store i1 %v7_12104, i1* %cpsr_n.global-to-local, align 1
  %v8_12104 = icmp eq i32 %v2_12104, 0
  store i1 %v8_12104, i1* %cpsr_z.global-to-local, align 1
  %v5_12108 = icmp slt i32 %v2_120f8, -12
  br i1 %v5_12108, label %dec_label_pc_12124, label %dec_label_pc_1210c

dec_label_pc_1210c:                               ; preds = %dec_label_pc_12100, %dec_label_pc_120c0, %dec_label_pc_1210c
  %v1_12118 = phi i32 [ %v5_12118, %dec_label_pc_1210c ], [ %v1_120f4, %dec_label_pc_12100 ], [ %v0_1208830, %dec_label_pc_120c0 ]
  %v0_1210c = load i32, i32* %r3.global-to-local, align 4
  %v3_1210c = mul i32 %v0_1210c, 65536
  store i32 %v3_1210c, i32* %ip.global-to-local, align 4
  %v0_12110 = load i32, i32* %r1.global-to-local, align 4
  %v1_12110 = add i32 %v0_12110, -4
  %v2_12110 = inttoptr i32 %v1_12110 to i32*
  %v3_12110 = load i32, i32* %v2_12110, align 4
  store i32 %v3_12110, i32* %r3.global-to-local, align 4
  store i32 %v1_12110, i32* %r1.global-to-local, align 4
  %v4_12114 = udiv i32 %v3_12110, 65536
  %v5_12114 = or i32 %v4_12114, %v3_1210c
  store i32 %v5_12114, i32* %ip.global-to-local, align 4
  %v2_12118 = add i32 %v1_12118, -4
  %v3_12118 = inttoptr i32 %v2_12118 to i32*
  store i32 %v5_12114, i32* %v3_12118, align 4
  %v4_12118 = load i32, i32* %r0.global-to-local, align 4
  %v5_12118 = add i32 %v4_12118, -4
  store i32 %v5_12118, i32* %r0.global-to-local, align 4
  %v0_1211c = load i32, i32* %r2.global-to-local, align 4
  %v2_1211c = add i32 %v0_1211c, -4
  store i32 %v2_1211c, i32* %r2.global-to-local, align 4
  %v6_12120 = icmp slt i32 %v0_1211c, 4
  br i1 %v6_12120, label %dec_label_pc_12124.loopexit, label %dec_label_pc_1210c

dec_label_pc_12124.loopexit:                      ; preds = %dec_label_pc_1210c
  %v4_1211c = sub i32 3, %v0_1211c
  %v5_1211c = and i32 %v4_1211c, %v0_1211c
  %v6_1211c = icmp slt i32 %v5_1211c, 0
  %v7_1211c = icmp slt i32 %v2_1211c, 0
  store i1 %v6_1211c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1211c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12124

dec_label_pc_12124:                               ; preds = %dec_label_pc_12124.loopexit, %dec_label_pc_12100
  %v2_11ffc63 = phi i32 [ %v5_12118, %dec_label_pc_12124.loopexit ], [ %v1_120f4, %dec_label_pc_12100 ]
  %v0_11fec59 = phi i32 [ %v2_1211c, %dec_label_pc_12124.loopexit ], [ %v2_12104, %dec_label_pc_12100 ]
  %v0_12124 = load i32, i32* %r1.global-to-local, align 4
  %v1_12124 = add i32 %v0_12124, 2
  store i32 %v1_12124, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_1212c:                               ; preds = %dec_label_pc_12040
  br i1 %v5_12130, label %dec_label_pc_12178, label %dec_label_pc_12134

dec_label_pc_12134:                               ; preds = %dec_label_pc_1212c
  store i32 %v2_1212c, i32* %r2.global-to-local, align 4
  %v3_12138 = load i32, i32* @r4, align 4
  store i32 %v3_12138, i32* %stack_var_-12, align 4
  %v6_12138 = load i32, i32* @r5, align 4
  store i32 %v6_12138, i32* %stack_var_-8, align 4
  %v9_12138 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1213c

dec_label_pc_1213c:                               ; preds = %dec_label_pc_1213c.dec_label_pc_1213c_crit_edge, %dec_label_pc_12134
  %v0_12160 = phi i32 [ %v1_12160, %dec_label_pc_1213c.dec_label_pc_1213c_crit_edge ], [ %v0_1208830, %dec_label_pc_12134 ]
  %v0_12140 = phi i32 [ %v0_12140.pre, %dec_label_pc_1213c.dec_label_pc_1213c_crit_edge ], [ %v1_12040, %dec_label_pc_12134 ]
  %v0_1213c = phi i32 [ %v0_1213c.pre, %dec_label_pc_1213c.dec_label_pc_1213c_crit_edge ], [ %v2_12044, %dec_label_pc_12134 ]
  %v3_1213c = mul i32 %v0_1213c, 16777216
  store i32 %v3_1213c, i32* %lr.global-to-local, align 4
  %v1_12140 = add i32 %v0_12140, -4
  %v2_12140 = inttoptr i32 %v1_12140 to i32*
  %v3_12140 = load i32, i32* %v2_12140, align 4
  store i32 %v3_12140, i32* %r3.global-to-local, align 4
  %v4_12140 = add i32 %v0_12140, -8
  %v5_12140 = inttoptr i32 %v4_12140 to i32*
  %v6_12140 = load i32, i32* %v5_12140, align 4
  store i32 %v6_12140, i32* %r4.global-to-local, align 4
  %v7_12140 = add i32 %v0_12140, -12
  %v8_12140 = inttoptr i32 %v7_12140 to i32*
  %v9_12140 = load i32, i32* %v8_12140, align 4
  store i32 %v9_12140, i32* %r5.global-to-local, align 4
  %v10_12140 = add i32 %v0_12140, -16
  %v11_12140 = inttoptr i32 %v10_12140 to i32*
  %v12_12140 = load i32, i32* %v11_12140, align 4
  store i32 %v10_12140, i32* %r1.global-to-local, align 4
  %v4_12144 = udiv i32 %v12_12140, 256
  %v5_12144 = or i32 %v4_12144, %v3_1213c
  store i32 %v5_12144, i32* %lr.global-to-local, align 4
  %v3_12148 = mul i32 %v12_12140, 16777216
  %v4_1214c = udiv i32 %v9_12140, 256
  %v5_1214c = or i32 %v3_12148, %v4_1214c
  store i32 %v5_1214c, i32* %ip.global-to-local, align 4
  %v3_12150 = mul i32 %v9_12140, 16777216
  %v4_12154 = udiv i32 %v6_12140, 256
  %v5_12154 = or i32 %v3_12150, %v4_12154
  store i32 %v5_12154, i32* %r5.global-to-local, align 4
  %v3_12158 = mul i32 %v6_12140, 16777216
  %v4_1215c = udiv i32 %v3_12140, 256
  %v5_1215c = or i32 %v3_12158, %v4_1215c
  store i32 %v5_1215c, i32* %r4.global-to-local, align 4
  %v1_12160 = add i32 %v0_12160, -16
  %v2_12160 = inttoptr i32 %v1_12160 to i32*
  store i32 %v5_1215c, i32* %v2_12160, align 4
  %v4_12160 = add i32 %v0_12160, -12
  %v5_12160 = inttoptr i32 %v4_12160 to i32*
  %v6_12160 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_12160, i32* %v5_12160, align 4
  %v7_12160 = add i32 %v0_12160, -8
  %v8_12160 = inttoptr i32 %v7_12160 to i32*
  %v9_12160 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_12160, i32* %v8_12160, align 4
  %v10_12160 = add i32 %v0_12160, -4
  %v11_12160 = inttoptr i32 %v10_12160 to i32*
  %v12_12160 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_12160, i32* %v11_12160, align 4
  store i32 %v1_12160, i32* %r0.global-to-local, align 4
  %v0_12164 = load i32, i32* %r2.global-to-local, align 4
  %v2_12164 = add i32 %v0_12164, -16
  store i32 %v2_12164, i32* %r2.global-to-local, align 4
  %v6_12168 = icmp slt i32 %v0_12164, 16
  br i1 %v6_12168, label %dec_label_pc_1216c, label %dec_label_pc_1213c.dec_label_pc_1213c_crit_edge

dec_label_pc_1213c.dec_label_pc_1213c_crit_edge:  ; preds = %dec_label_pc_1213c
  %v0_1213c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_12140.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1213c

dec_label_pc_1216c:                               ; preds = %dec_label_pc_1213c
  %v2_1216c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1216c, i32* @r4, align 4
  %v5_1216c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_1216c, i32* @r5, align 4
  store i32 %v9_12138, i32* @lr, align 4
  %v2_12170 = add i32 %v0_12164, -4
  store i32 %v2_12170, i32* %r2.global-to-local, align 4
  %v4_12170 = add i32 %v0_12164, 2147483632
  %v5_12170 = and i32 %v2_12170, %v4_12170
  %v6_12170 = icmp slt i32 %v5_12170, 0
  store i1 %v6_12170, i1* %cpsr_v.global-to-local, align 1
  %v7_12170 = icmp slt i32 %v2_12170, 0
  store i1 %v7_12170, i1* %cpsr_n.global-to-local, align 1
  %v8_12170 = icmp eq i32 %v2_12170, 0
  store i1 %v8_12170, i1* %cpsr_z.global-to-local, align 1
  %v5_12174 = icmp slt i32 %v2_12164, -12
  br i1 %v5_12174, label %dec_label_pc_12190, label %dec_label_pc_12178

dec_label_pc_12178:                               ; preds = %dec_label_pc_1216c, %dec_label_pc_1212c, %dec_label_pc_12178
  %v1_12184 = phi i32 [ %v5_12184, %dec_label_pc_12178 ], [ %v1_12160, %dec_label_pc_1216c ], [ %v0_1208830, %dec_label_pc_1212c ]
  %v0_12178 = load i32, i32* %r3.global-to-local, align 4
  %v3_12178 = mul i32 %v0_12178, 16777216
  store i32 %v3_12178, i32* %ip.global-to-local, align 4
  %v0_1217c = load i32, i32* %r1.global-to-local, align 4
  %v1_1217c = add i32 %v0_1217c, -4
  %v2_1217c = inttoptr i32 %v1_1217c to i32*
  %v3_1217c = load i32, i32* %v2_1217c, align 4
  store i32 %v3_1217c, i32* %r3.global-to-local, align 4
  store i32 %v1_1217c, i32* %r1.global-to-local, align 4
  %v4_12180 = udiv i32 %v3_1217c, 256
  %v5_12180 = or i32 %v4_12180, %v3_12178
  store i32 %v5_12180, i32* %ip.global-to-local, align 4
  %v2_12184 = add i32 %v1_12184, -4
  %v3_12184 = inttoptr i32 %v2_12184 to i32*
  store i32 %v5_12180, i32* %v3_12184, align 4
  %v4_12184 = load i32, i32* %r0.global-to-local, align 4
  %v5_12184 = add i32 %v4_12184, -4
  store i32 %v5_12184, i32* %r0.global-to-local, align 4
  %v0_12188 = load i32, i32* %r2.global-to-local, align 4
  %v2_12188 = add i32 %v0_12188, -4
  store i32 %v2_12188, i32* %r2.global-to-local, align 4
  %v6_1218c = icmp slt i32 %v0_12188, 4
  br i1 %v6_1218c, label %dec_label_pc_12190.loopexit, label %dec_label_pc_12178

dec_label_pc_12190.loopexit:                      ; preds = %dec_label_pc_12178
  %v4_12188 = sub i32 3, %v0_12188
  %v5_12188 = and i32 %v4_12188, %v0_12188
  %v6_12188 = icmp slt i32 %v5_12188, 0
  %v7_12188 = icmp slt i32 %v2_12188, 0
  store i1 %v6_12188, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_12188, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12190

dec_label_pc_12190:                               ; preds = %dec_label_pc_12190.loopexit, %dec_label_pc_1216c
  %v2_11ffc64 = phi i32 [ %v5_12184, %dec_label_pc_12190.loopexit ], [ %v1_12160, %dec_label_pc_1216c ]
  %v0_11fec60 = phi i32 [ %v2_12188, %dec_label_pc_12190.loopexit ], [ %v2_12170, %dec_label_pc_1216c ]
  %v0_12190 = load i32, i32* %r1.global-to-local, align 4
  %v1_12190 = add i32 %v0_12190, 1
  store i32 %v1_12190, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_12184, { 0, 2, 1 }
  uselistorder i32 %v3_12178, { 1, 0 }
  uselistorder i32 %v2_12170, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_12160, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_12140, { 1, 0 }
  uselistorder i32 %v3_1213c, { 1, 0 }
  uselistorder i32 %v0_12140, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12160, { 3, 2, 1, 0 }
  uselistorder i32 %v5_12118, { 0, 2, 1 }
  uselistorder i32 %v3_1210c, { 1, 0 }
  uselistorder i32 %v2_12104, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_120f4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_120d4, { 1, 0 }
  uselistorder i32 %v3_120d0, { 1, 0 }
  uselistorder i32 %v0_120d4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_120f4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_120ac, { 0, 2, 1 }
  uselistorder i32 %v3_120a0, { 1, 0 }
  uselistorder i32 %v2_12098, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_12088, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_12068, { 1, 0 }
  uselistorder i32 %v3_12064, { 1, 0 }
  uselistorder i32 %v0_12068, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12088, { 3, 2, 1, 0 }
  uselistorder i1 %v5_12130, { 2, 0, 1 }
  uselistorder i32 %v0_12048, { 1, 0 }
  uselistorder i32 %v0_12134, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1208830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_12038, { 2, 1, 0 }
  uselistorder i32 %v0_12038, { 2, 0, 1 }
  uselistorder i32 %v2_12030, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_12030, { 1, 2, 0, 3 }
  uselistorder i32 %v0_12030, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1208831, { 2, 1, 0 }
  uselistorder i32 %v11_1200c, { 1, 0 }
  uselistorder i32 %v7_1200c, { 1, 0 }
  uselistorder i32 %v1_11fec, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_11fec, { 1, 2, 0, 3 }
  uselistorder i32 %v2_11ff0, { 1, 0 }
  uselistorder i32 %v7_11fe4, { 0, 2, 1 }
  uselistorder i32 %v10_11fe0, { 1, 0 }
  uselistorder i32 %v9_11fd8, { 1, 0, 2 }
  uselistorder i32 %v6_11fd4, { 1, 0 }
  uselistorder i32 %v2_11fcc, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_11fcc, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_11fdc, { 0, 3, 2, 1 }
  uselistorder i32 %v7_11fc0, { 0, 2, 1 }
  uselistorder i32 %v13_11fbc, { 1, 0 }
  uselistorder i32 %v4_11fb8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_11fb8, { 2, 0, 1 }
  uselistorder i32 %v6_11fc0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_11fb0, { 0, 2, 1 }
  uselistorder i32 %v16_11fac, { 1, 0 }
  uselistorder i32 %v4_11fa8, { 1, 2, 0 }
  uselistorder i32 %v0_11fb8.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_11fb0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_11f9c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_11f98, { 1, 0 }
  uselistorder i32 %v1_11f94, { 1, 0 }
  uselistorder i32 %v10_11f90, { 1, 0 }
  uselistorder i32 %v0_11f90, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11f94, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_11f88, { 0, 2, 1 }
  uselistorder i32 %v2_11f7c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_11f7c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_11f9448, { 1, 2, 0 }
  uselistorder i32 %v1_11f74, { 2, 1, 0 }
  uselistorder i32 %v1_11f6c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_11f64, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_11f60, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_11f5c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_11f5c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_11f48, { 0, 2, 1 }
  uselistorder i32 %v3_11f3c, { 1, 0 }
  uselistorder i32 %v2_11f34, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_11f24, { 1, 0, 3, 2 }
  uselistorder i32 %v8_11f04, { 1, 0, 2 }
  uselistorder i32 %v5_11f04, { 1, 0, 2 }
  uselistorder i32 %v2_11f04, { 1, 0, 2 }
  uselistorder i32 %v3_11f00, { 1, 0 }
  uselistorder i32 %v0_11f04, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11f24, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_11edc, { 0, 2, 1 }
  uselistorder i32 %v3_11ed0, { 1, 0 }
  uselistorder i32 %v2_11ec8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_11eb8, { 1, 0, 3, 2 }
  uselistorder i32 %v8_11e98, { 1, 0, 2 }
  uselistorder i32 %v5_11e98, { 1, 0, 2 }
  uselistorder i32 %v2_11e98, { 1, 0, 2 }
  uselistorder i32 %v3_11e94, { 1, 0 }
  uselistorder i32 %v0_11e98, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11eb8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_11e70, { 0, 2, 1 }
  uselistorder i32 %v3_11e64, { 1, 0 }
  uselistorder i32 %v2_11e5c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_11e4c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_11e2c, { 1, 0, 2 }
  uselistorder i32 %v5_11e2c, { 1, 0, 2 }
  uselistorder i32 %v2_11e2c, { 1, 0, 2 }
  uselistorder i32 %v3_11e28, { 1, 0 }
  uselistorder i32 %v0_11e2c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11e4c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_11ef4, { 2, 0, 1 }
  uselistorder i32 %v0_11ef8, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_11e4c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_11dfc, { 1, 0 }
  uselistorder i32 %v0_11dfc, { 3, 1, 0, 2 }
  uselistorder i32 %v2_11df4, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_11df4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_11df4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_11e4c75, { 2, 1, 0 }
  uselistorder i32 %v1_11dd4, { 1, 0, 2 }
  uselistorder i32 %v1_11dac, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_11dac, { 1, 2, 0, 3 }
  uselistorder i32 %v8_11d98, { 1, 0, 2 }
  uselistorder i32 %v6_11d94, { 1, 0 }
  uselistorder i32 %v2_11d8c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_11d8c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_11d9c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_11d84, { 0, 2, 1 }
  uselistorder i32 %v3_11d84, { 3, 0, 1, 2 }
  uselistorder i1 %v0_11d84, { 1, 0 }
  uselistorder i1 %v1_11d84, { 1, 0 }
  uselistorder i32 %v3_11d80, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_11d78, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_11d64, { 1, 2, 0 }
  uselistorder i32 %v12_11d58, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11d4c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11d50, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_11d40, { 0, 2, 1 }
  uselistorder i32 %v2_11d38, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_11d38, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_11d30, { 1, 0 }
  uselistorder i32 %v1_11d28, { 2, 1, 0 }
  uselistorder i32 %v2_11d20, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_11d20, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_11d10, { 1, 0 }
  uselistorder i32 %v1_11d10, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_11d10, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 15, 16, 17, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 25, 26, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 37, 38, 39, 40, 3, 7, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* %r2.global-to-local, { 0, 26, 1, 2, 3, 4, 5, 65, 66, 67, 68, 69, 71, 70, 6, 7, 8, 9, 10, 27, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 28, 29, 60, 30, 31, 32, 33, 34, 61, 35, 36, 37, 38, 39, 62, 40, 41, 42, 43, 44, 63, 45, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0, 10, 3, 4, 62, 64, 60, 63, 65, 66, 6, 7, 5, 11, 8, 9, 12, 17, 13, 14, 15, 16, 18, 19, 21, 20, 22, 23, 61, 24, 25, 32, 26, 33, 27, 34, 28, 29, 30, 31, 35, 38, 36, 48, 37, 39, 41, 40, 49, 42, 43, 46, 44, 50, 45, 47, 51, 52, 53, 55, 54, 56, 57, 58, 59 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 34, 36, 3, 22, 4, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 16, 17, 18, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 53, 54, 55, 5, 6, 7, 8, 9, 21, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 46, 6, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 0, 25, 1, 27, 2, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 42, 6, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 0, 23, 1, 25, 2, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 48, 6, 9, 8, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 24, 25, 0, 26, 1, 28, 2, 29, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32 31, { 22, 1, 0, 14, 16, 15, 17, 2, 19, 18, 23, 20, 6, 3, 7, 21, 8, 9, 4, 10, 11, 5, 12, 13 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 11, 12, 10, 16, 0, 14, 1, 15, 2, 9, 7, 8, 6, 5, 4, 3, 17, 18, 19, 13 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32* @r5, { 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 0, 508, 509, 146, 147, 148, 149, 150, 151, 382, 383, 384, 385, 386, 387, 388, 389, 419, 420, 421, 422, 423, 424, 433, 434, 435, 442, 443, 444, 445, 436, 437, 438, 439, 440, 441, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 40, 41, 31, 6, 7, 95, 36, 96, 97, 98, 99, 100, 101, 8, 9, 10, 11, 12, 32, 37, 3, 4, 5, 42, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 43, 44, 45, 46, 38, 39, 102, 103, 104, 105, 106, 47, 107, 108, 109, 110, 2, 111, 112, 113, 114, 123, 124, 115, 116, 117, 118, 119, 120, 121, 122, 446, 447, 448, 449, 450, 451, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 1, 145, 152, 153, 154, 155, 156, 157, 163, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 191, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 216, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 263, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 298, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 327, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 357, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 452, 453, 454, 455, 456, 457, 466, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 425, 428, 426, 427, 429, 430, 431, 432 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 11, 12, 13, 0, 1, 17, 4, 14, 5, 15, 6, 16, 18, 19, 20, 7, 21, 8, 22, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 2, 34, 35, 36, 10, 37, 38, 39, 3, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32* @lr, { 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 0, 83, 84, 85, 1, 86, 87, 88, 2, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 43, 44, 45, 46, 51, 52, 53, 54, 7, 55, 4, 5, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 6, 8, 11, 12, 3, 15, 13, 14, 9, 10, 68, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 69, 47, 48, 49, 50, 70, 71, 72 }
  uselistorder i32 27, { 1, 0, 2, 3 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12178, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1210c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_120a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12040, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_11fcc, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_11f90, { 1, 0 }
  uselistorder label %dec_label_pc_11f7c, { 1, 0 }
  uselistorder label %dec_label_pc_11f3c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ed0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11e64, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11e04, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_11d78, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_11d38, { 1, 0 }
}

define i32 @function_12198(i32 %arg1) local_unnamed_addr {
dec_label_pc_12198:
  ret i32 %arg1
}

define i32 @function_121a0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_121a0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_121a4 = load i32, i32* @r2, align 4
  %v8_121a4 = icmp eq i32 %v0_121a4, 8
  store i1 %v8_121a4, i1* %cpsr_z.global-to-local, align 1
  %v5_121a8 = icmp slt i32 %v0_121a4, 8
  br i1 %v5_121a8, label %dec_label_pc_12208, label %dec_label_pc_121ac

dec_label_pc_121ac:                               ; preds = %dec_label_pc_121a0
  %v4_121ac = mul i32 %arg2, 256
  %v5_121ac = or i32 %v4_121ac, %arg2
  %v4_121b0 = mul i32 %v5_121ac, 65536
  %v5_121b0 = or i32 %v4_121b0, %v5_121ac
  store i32 %v5_121b0, i32* %r1.global-to-local, align 4
  %v1_121b457 = urem i32 %tmp, 4
  %v2_121b458 = icmp eq i32 %v1_121b457, 0
  store i1 %v2_121b458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_121b458, label %dec_label_pc_121c4, label %bb

bb:                                               ; preds = %dec_label_pc_121ac, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_121ac ]
  %v3_121b859 = phi i32 [ %v6_121b8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_121ac ]
  %v4_121b8 = inttoptr i32 %v3_121b859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_121b8, align 1
  %v5_121b8 = load i32, i32* %r3.global-to-local, align 4
  %v6_121b8 = add i32 %v5_121b8, 1
  store i32 %v6_121b8, i32* %r3.global-to-local, align 4
  %v0_121bc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_121c8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_121bc.pr, label %dec_label_pc_121c4, label %.thread

.thread:                                          ; preds = %bb
  %v2_121bc = add i32 %v0_121c8.pr.pre, -1
  store i32 %v2_121bc, i32* @r2, align 4
  %v1_121b4 = urem i32 %v6_121b8, 4
  %v2_121b4 = icmp eq i32 %v1_121b4, 0
  store i1 %v2_121b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_121b4, label %dec_label_pc_121c4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_121b8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_121b8.pre to i8
  br label %bb

dec_label_pc_121c4:                               ; preds = %.thread, %bb, %dec_label_pc_121ac
  %v0_121d028 = phi i32 [ %tmp, %dec_label_pc_121ac ], [ %v6_121b8, %bb ], [ %v6_121b8, %.thread ]
  %v0_121c8.pr = phi i32 [ %v0_121a4, %dec_label_pc_121ac ], [ %v0_121c8.pr.pre, %bb ], [ %v2_121bc, %.thread ]
  %v0_121c4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_121c4, i32* %ip.global-to-local, align 4
  %v8_121c810 = icmp eq i32 %v0_121c8.pr, 8
  store i1 %v8_121c810, i1* %cpsr_z.global-to-local, align 1
  %v5_121cc11 = icmp slt i32 %v0_121c8.pr, 8
  br i1 %v5_121cc11, label %dec_label_pc_12208, label %dec_label_pc_121d0.preheader

dec_label_pc_121d0.preheader:                     ; preds = %dec_label_pc_121c4
  %v1_121d046 = inttoptr i32 %v0_121d028 to i32*
  store i32 %v0_121c4, i32* %v1_121d046, align 4
  %v3_121d047 = add i32 %v0_121d028, 4
  %v4_121d048 = inttoptr i32 %v3_121d047 to i32*
  %v5_121d049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_121d049, i32* %v4_121d048, align 4
  %v6_121d050 = add i32 %v0_121d028, 8
  store i32 %v6_121d050, i32* %r3.global-to-local, align 4
  %v0_121d451 = load i32, i32* @r2, align 4
  %v1_121d452 = add i32 %v0_121d451, -8
  store i32 %v1_121d452, i32* %r2.global-to-local, align 4
  %v5_121dc53 = icmp slt i32 %v1_121d452, 8
  br i1 %v5_121dc53, label %dec_label_pc_121d0.dec_label_pc_12208.loopexit_crit_edge, label %dec_label_pc_121e0

dec_label_pc_121e0:                               ; preds = %dec_label_pc_121d0.preheader, %dec_label_pc_121c8.dec_label_pc_121d0_crit_edge
  %v6_121d055 = phi i32 [ %v6_121d0, %dec_label_pc_121c8.dec_label_pc_121d0_crit_edge ], [ %v6_121d050, %dec_label_pc_121d0.preheader ]
  %v0_121d054 = phi i32 [ %v12_121fc, %dec_label_pc_121c8.dec_label_pc_121d0_crit_edge ], [ %v0_121d028, %dec_label_pc_121d0.preheader ]
  %v1_121e0 = inttoptr i32 %v6_121d055 to i32*
  %v2_121e0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_121e0, i32* %v1_121e0, align 4
  %v3_121e0 = add i32 %v0_121d054, 12
  %v4_121e0 = inttoptr i32 %v3_121e0 to i32*
  %v5_121e0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_121e0, i32* %v4_121e0, align 4
  %v6_121e0 = add i32 %v0_121d054, 16
  store i32 %v6_121e0, i32* %r3.global-to-local, align 4
  %v0_121e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_121e4 = add i32 %v0_121e4, -8
  store i32 %v1_121e4, i32* %r2.global-to-local, align 4
  %v5_121ec = icmp slt i32 %v1_121e4, 8
  br i1 %v5_121ec, label %dec_label_pc_121e0.dec_label_pc_12208.loopexit_crit_edge, label %dec_label_pc_121f0

dec_label_pc_121f0:                               ; preds = %dec_label_pc_121e0
  %v1_121f0 = inttoptr i32 %v6_121e0 to i32*
  %v2_121f0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_121f0, i32* %v1_121f0, align 4
  %v3_121f0 = add i32 %v0_121d054, 20
  %v4_121f0 = inttoptr i32 %v3_121f0 to i32*
  %v5_121f0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_121f0, i32* %v4_121f0, align 4
  %v6_121f0 = add i32 %v0_121d054, 24
  store i32 %v6_121f0, i32* %r3.global-to-local, align 4
  %v0_121f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_121f4 = add i32 %v0_121f4, -8
  store i32 %v1_121f4, i32* %r2.global-to-local, align 4
  %v5_121fc = icmp slt i32 %v1_121f4, 8
  br i1 %v5_121fc, label %dec_label_pc_121f0.dec_label_pc_12208.loopexit_crit_edge, label %dec_label_pc_121c8

dec_label_pc_121c8:                               ; preds = %dec_label_pc_121f0
  %v7_121fc = inttoptr i32 %v6_121f0 to i32*
  %v8_121fc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_121fc, i32* %v7_121fc, align 4
  %v9_121fc = add i32 %v0_121d054, 28
  %v10_121fc = inttoptr i32 %v9_121fc to i32*
  %v11_121fc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_121fc, i32* %v10_121fc, align 4
  %v12_121fc = add i32 %v0_121d054, 32
  store i32 %v12_121fc, i32* %r3.global-to-local, align 4
  %v6_12200 = load i32, i32* %r2.global-to-local, align 4
  %v7_12200 = add i32 %v6_12200, -8
  store i32 %v7_12200, i32* %r2.global-to-local, align 4
  %v5_121cc = icmp slt i32 %v7_12200, 8
  br i1 %v5_121cc, label %dec_label_pc_121c8.dec_label_pc_12208.loopexit_crit_edge, label %dec_label_pc_121c8.dec_label_pc_121d0_crit_edge

dec_label_pc_121c8.dec_label_pc_121d0_crit_edge:  ; preds = %dec_label_pc_121c8
  %v2_121d0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_121d0 = inttoptr i32 %v12_121fc to i32*
  store i32 %v2_121d0.pre, i32* %v1_121d0, align 4
  %v3_121d0 = add i32 %v0_121d054, 36
  %v4_121d0 = inttoptr i32 %v3_121d0 to i32*
  %v5_121d0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_121d0, i32* %v4_121d0, align 4
  %v6_121d0 = add i32 %v0_121d054, 40
  store i32 %v6_121d0, i32* %r3.global-to-local, align 4
  %v0_121d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_121d4 = add i32 %v0_121d4, -8
  store i32 %v1_121d4, i32* %r2.global-to-local, align 4
  %v5_121dc = icmp slt i32 %v1_121d4, 8
  br i1 %v5_121dc, label %dec_label_pc_121d0.dec_label_pc_12208.loopexit_crit_edge, label %dec_label_pc_121e0

dec_label_pc_121c8.dec_label_pc_12208.loopexit_crit_edge: ; preds = %dec_label_pc_121c8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12208

dec_label_pc_121d0.dec_label_pc_12208.loopexit_crit_edge: ; preds = %dec_label_pc_121c8.dec_label_pc_121d0_crit_edge, %dec_label_pc_121d0.preheader
  %v1_121d4.lcssa = phi i32 [ %v1_121d452, %dec_label_pc_121d0.preheader ], [ %v1_121d4, %dec_label_pc_121c8.dec_label_pc_121d0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12208

dec_label_pc_121e0.dec_label_pc_12208.loopexit_crit_edge: ; preds = %dec_label_pc_121e0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12208

dec_label_pc_121f0.dec_label_pc_12208.loopexit_crit_edge: ; preds = %dec_label_pc_121f0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12208

dec_label_pc_12208:                               ; preds = %dec_label_pc_121c4, %dec_label_pc_121c8.dec_label_pc_12208.loopexit_crit_edge, %dec_label_pc_121d0.dec_label_pc_12208.loopexit_crit_edge, %dec_label_pc_121e0.dec_label_pc_12208.loopexit_crit_edge, %dec_label_pc_121f0.dec_label_pc_12208.loopexit_crit_edge, %dec_label_pc_121a0
  %v0_12210 = phi i32 [ %v0_121a4, %dec_label_pc_121a0 ], [ %v1_121f4, %dec_label_pc_121f0.dec_label_pc_12208.loopexit_crit_edge ], [ %v1_121e4, %dec_label_pc_121e0.dec_label_pc_12208.loopexit_crit_edge ], [ %v1_121d4.lcssa, %dec_label_pc_121d0.dec_label_pc_12208.loopexit_crit_edge ], [ %v7_12200, %dec_label_pc_121c8.dec_label_pc_12208.loopexit_crit_edge ], [ %v0_121c8.pr, %dec_label_pc_121c4 ]
  %v2_12208 = icmp eq i32 %v0_12210, 0
  store i1 %v2_12208, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12208, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_12208
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_12208
  %v1_12210 = sub i32 7, %v0_12210
  store i32 %v1_12210, i32* %r2.global-to-local, align 4
  %v3_12214 = mul i32 %v1_12210, 4
  %v4_12214 = add i32 %v3_12214, ptrtoint (i32* @global_var_1221c.703 to i32)
  call void @__pseudo_branch(i32 %v4_12214)
  %v0_1221c = load i32, i32* %r1.global-to-local, align 4
  %v1_1221c = trunc i32 %v0_1221c to i8
  %v2_1221c = load i32, i32* %r3.global-to-local, align 4
  %v3_1221c = inttoptr i32 %v2_1221c to i8*
  store i8 %v1_1221c, i8* %v3_1221c, align 1
  %v4_1221c = load i32, i32* %r3.global-to-local, align 4
  %v5_1221c = add i32 %v4_1221c, 1
  store i32 %v5_1221c, i32* %r3.global-to-local, align 4
  %v0_12220 = load i32, i32* %r1.global-to-local, align 4
  %v1_12220 = trunc i32 %v0_12220 to i8
  %v3_12220 = inttoptr i32 %v5_1221c to i8*
  store i8 %v1_12220, i8* %v3_12220, align 1
  %v4_12220 = load i32, i32* %r3.global-to-local, align 4
  %v5_12220 = add i32 %v4_12220, 1
  store i32 %v5_12220, i32* %r3.global-to-local, align 4
  %v0_12224 = load i32, i32* %r1.global-to-local, align 4
  %v1_12224 = trunc i32 %v0_12224 to i8
  %v3_12224 = inttoptr i32 %v5_12220 to i8*
  store i8 %v1_12224, i8* %v3_12224, align 1
  %v4_12224 = load i32, i32* %r3.global-to-local, align 4
  %v5_12224 = add i32 %v4_12224, 1
  store i32 %v5_12224, i32* %r3.global-to-local, align 4
  %v0_12228 = load i32, i32* %r1.global-to-local, align 4
  %v1_12228 = trunc i32 %v0_12228 to i8
  %v3_12228 = inttoptr i32 %v5_12224 to i8*
  store i8 %v1_12228, i8* %v3_12228, align 1
  %v4_12228 = load i32, i32* %r3.global-to-local, align 4
  %v5_12228 = add i32 %v4_12228, 1
  store i32 %v5_12228, i32* %r3.global-to-local, align 4
  %v0_1222c = load i32, i32* %r1.global-to-local, align 4
  %v1_1222c = trunc i32 %v0_1222c to i8
  %v3_1222c = inttoptr i32 %v5_12228 to i8*
  store i8 %v1_1222c, i8* %v3_1222c, align 1
  %v4_1222c = load i32, i32* %r3.global-to-local, align 4
  %v5_1222c = add i32 %v4_1222c, 1
  store i32 %v5_1222c, i32* %r3.global-to-local, align 4
  %v0_12230 = load i32, i32* %r1.global-to-local, align 4
  %v1_12230 = trunc i32 %v0_12230 to i8
  %v3_12230 = inttoptr i32 %v5_1222c to i8*
  store i8 %v1_12230, i8* %v3_12230, align 1
  %v4_12230 = load i32, i32* %r3.global-to-local, align 4
  %v5_12230 = add i32 %v4_12230, 1
  store i32 %v5_12230, i32* %r3.global-to-local, align 4
  %v0_12234 = load i32, i32* %r1.global-to-local, align 4
  %v1_12234 = trunc i32 %v0_12234 to i8
  %v3_12234 = inttoptr i32 %v5_12230 to i8*
  store i8 %v1_12234, i8* %v3_12234, align 1
  %v4_12234 = load i32, i32* %r3.global-to-local, align 4
  %v5_12234 = add i32 %v4_12234, 1
  store i32 %v5_12234, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_121d0, { 1, 0 }
  uselistorder i32 %v12_121fc, { 1, 2, 0 }
  uselistorder i32 %v0_121d054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_121c8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_121b8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_121ac, { 1, 0 }
  uselistorder i32 %v0_121a4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 13, 9, 10, 11, 12, 8, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 1, 4, 0, 8, 7, 5, 9 }
  uselistorder i32 7, { 106, 43, 44, 99, 7, 49, 2, 9, 45, 10, 46, 11, 47, 8, 48, 0, 12, 50, 13, 51, 14, 52, 15, 53, 16, 54, 17, 55, 18, 56, 19, 57, 20, 58, 21, 59, 22, 60, 23, 61, 24, 62, 25, 63, 26, 64, 27, 65, 28, 66, 29, 67, 30, 68, 31, 69, 32, 70, 33, 71, 34, 72, 35, 73, 36, 74, 37, 75, 76, 77, 78, 38, 79, 80, 81, 82, 3, 83, 84, 85, 86, 39, 87, 4, 88, 40, 89, 90, 5, 91, 92, 6, 93, 94, 95, 96, 97, 41, 98, 101, 102, 103, 104, 42, 105, 1, 100 }
  uselistorder i1 false, { 18, 17, 16, 19, 24, 25, 26, 31, 13, 23, 32, 33, 20, 21, 22, 34, 12, 35, 36, 2, 1, 10, 3, 28, 11, 9, 14, 30, 4, 5, 6, 27, 0, 15, 7, 8, 29, 37 }
  uselistorder i32 40, { 0, 1, 3, 5, 6, 7, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 2 }
  uselistorder i32 24, { 0, 1, 35, 36, 14, 11, 59, 39, 64, 40, 41, 52, 56, 37, 38, 60, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 61, 55, 62, 57, 58, 65, 66, 67, 63, 68, 69, 2, 70, 15, 16, 3, 71, 17, 18, 4, 72, 12, 73, 74, 75, 19, 20, 5, 21, 22, 76, 23, 24, 6, 13, 77, 25, 7, 8, 26, 78, 27, 9, 79, 80, 81, 28, 29, 82, 30, 85, 31, 10, 86, 32, 33, 87, 83, 34, 84 }
  uselistorder i32 20, { 0, 87, 2, 88, 89, 1, 3, 90, 18, 20, 4, 21, 5, 22, 17, 15, 23, 19, 24, 25, 26, 29, 27, 6, 28, 30, 31, 32, 33, 35, 36, 34, 7, 37, 38, 39, 40, 41, 42, 45, 46, 43, 8, 44, 47, 48, 49, 50, 51, 52, 55, 56, 53, 9, 54, 57, 58, 59, 60, 63, 64, 61, 10, 62, 65, 66, 67, 68, 69, 70, 73, 71, 16, 72, 74, 75, 76, 79, 12, 77, 11, 78, 80, 82, 85, 14, 83, 13, 84, 86, 81 }
  uselistorder i32 16, { 24, 32, 33, 34, 147, 35, 148, 149, 36, 150, 151, 37, 152, 153, 154, 155, 156, 157, 4, 5, 6, 7, 8, 23, 9, 10, 0, 11, 12, 45, 66, 46, 64, 65, 67, 69, 70, 71, 25, 63, 13, 14, 22, 61, 15, 72, 16, 47, 68, 17, 40, 39, 38, 73, 41, 74, 42, 48, 49, 26, 75, 76, 50, 77, 51, 78, 52, 79, 80, 81, 27, 82, 83, 84, 85, 86, 87, 88, 30, 89, 90, 91, 54, 92, 43, 53, 93, 94, 55, 95, 96, 97, 18, 98, 99, 1, 56, 100, 101, 102, 57, 103, 104, 105, 106, 107, 2, 58, 108, 109, 19, 110, 62, 20, 111, 59, 112, 113, 114, 21, 31, 115, 60, 116, 117, 3, 44, 118, 119, 120, 121, 122, 123, 28, 124, 125, 126, 127, 129, 128, 130, 131, 133, 134, 135, 136, 137, 29, 138, 139, 140, 141, 142, 144, 143, 145, 146, 132 }
  uselistorder i32 -8, { 17, 14, 15, 16, 5, 18, 19, 20, 21, 22, 23, 13, 12, 6, 11, 10, 9, 8, 24, 25, 26, 27, 7, 28, 0, 1, 3, 2, 4 }
  uselistorder i32 4, { 124, 40, 5, 6, 70, 61, 62, 7, 374, 63, 375, 46, 8, 9, 64, 376, 65, 377, 378, 379, 380, 66, 381, 382, 383, 384, 67, 385, 386, 387, 388, 389, 10, 390, 391, 392, 393, 394, 68, 395, 45, 396, 397, 398, 399, 400, 401, 11, 12, 69, 402, 403, 404, 405, 406, 407, 125, 126, 127, 47, 128, 129, 346, 348, 347, 344, 345, 311, 312, 313, 314, 349, 350, 351, 352, 334, 335, 336, 353, 354, 130, 131, 132, 133, 13, 14, 53, 15, 16, 54, 355, 356, 170, 17, 18, 357, 358, 48, 174, 83, 175, 200, 201, 194, 195, 202, 203, 176, 177, 172, 173, 178, 179, 85, 180, 181, 182, 86, 183, 87, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 84, 197, 198, 199, 196, 55, 204, 205, 71, 88, 19, 206, 20, 207, 208, 21, 22, 209, 210, 42, 211, 41, 216, 89, 217, 90, 218, 91, 219, 92, 220, 93, 221, 94, 222, 95, 223, 96, 224, 97, 225, 98, 226, 99, 227, 100, 228, 101, 229, 102, 230, 103, 231, 104, 232, 105, 234, 106, 235, 107, 236, 237, 233, 212, 108, 213, 214, 215, 238, 51, 50, 49, 239, 109, 23, 24, 25, 26, 27, 28, 240, 43, 241, 44, 242, 243, 244, 0, 110, 245, 134, 246, 247, 248, 249, 135, 136, 112, 250, 52, 29, 111, 252, 72, 253, 254, 137, 255, 256, 138, 139, 257, 113, 258, 73, 259, 260, 140, 141, 261, 142, 262, 263, 143, 144, 56, 264, 114, 265, 74, 266, 267, 268, 269, 270, 271, 115, 75, 272, 273, 145, 274, 275, 276, 277, 146, 147, 2, 278, 116, 279, 76, 280, 281, 282, 148, 283, 284, 149, 150, 3, 57, 285, 117, 287, 77, 288, 289, 290, 291, 151, 152, 292, 293, 294, 153, 295, 296, 118, 297, 4, 298, 78, 299, 119, 300, 301, 302, 154, 303, 304, 305, 306, 307, 155, 156, 120, 308, 58, 79, 309, 80, 310, 359, 360, 157, 361, 362, 363, 121, 364, 122, 365, 366, 367, 368, 158, 159, 123, 369, 59, 370, 81, 371, 82, 373, 160, 315, 316, 30, 161, 317, 318, 31, 162, 319, 320, 32, 163, 60, 321, 322, 33, 323, 164, 324, 325, 34, 165, 326, 327, 35, 166, 328, 329, 36, 167, 330, 331, 37, 168, 332, 333, 38, 337, 169, 338, 339, 340, 341, 39, 342, 343, 1, 372, 286, 251, 171 }
  uselistorder i32 65536, { 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 1, 34, 2, 35, 0, 3, 36, 37, 38, 39, 40, 43, 41, 42, 44, 45, 46, 51, 52, 53, 54, 47, 48, 49, 50, 55, 58, 59, 60, 56, 57, 61, 62, 63, 66, 67, 68, 64, 65, 69, 71, 70, 4, 73, 74, 72, 75, 76, 77, 79, 80, 81, 78, 82, 85, 86, 87, 83, 84, 88, 110, 90, 89, 91, 93, 92, 95, 94, 96, 97, 98, 100, 101, 102, 99, 103, 104, 105, 107, 108, 109, 106 }
  uselistorder i32* @r2, { 0, 61, 3, 62, 63, 64, 5, 65, 1, 66, 72, 73, 74, 67, 68, 36, 40, 41, 44, 42, 43, 37, 38, 39, 24, 45, 12, 6, 7, 69, 70, 71, 8, 46, 47, 48, 49, 2, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 13, 9, 10, 11, 16, 17, 14, 15, 18, 19, 20, 21, 22, 23, 4, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_12208, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_121e0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_12240() local_unnamed_addr {
dec_label_pc_12240:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_12240 = load i32, i32* @r0, align 4
  %v2_12240 = icmp eq i32 %v0_12240, 0
  %v3_12244 = load i32, i32* @r4, align 4
  store i32 %v3_12244, i32* %stack_var_-20, align 4
  %v0_12248 = load i32, i32* @r1, align 4
  br i1 %v2_12240, label %dec_label_pc_12320, label %dec_label_pc_1225c.lr.ph

dec_label_pc_1225c:                               ; preds = %dec_label_pc_1225c.lr.ph, %dec_label_pc_122e0
  %v1_122e0 = phi i32 [ 0, %dec_label_pc_1225c.lr.ph ], [ %v5_122e0, %dec_label_pc_122e0 ]
  %v0_122e4 = phi i32 [ 1, %dec_label_pc_1225c.lr.ph ], [ %v1_122e4, %dec_label_pc_122e0 ]
  %v0_12264 = phi i32 [ %v0_12240, %dec_label_pc_1225c.lr.ph ], [ %v0_1226425, %dec_label_pc_122e0 ]
  %v1_12264 = inttoptr i32 %v0_12264 to i8*
  %v2_12264 = load i8, i8* %v1_12264, align 1
  %v3_12264 = zext i8 %v2_12264 to i32
  %v3_12268 = mul nuw nsw i32 %v3_12264, 2
  %v4_12268 = add i32 %v3_12268, %v2_12260.pre
  %v5_12268 = inttoptr i32 %v4_12268 to i8*
  %v6_12268 = load i8, i8* %v5_12268, align 1
  %v1_1226c = and i8 %v6_12268, 8
  %v2_1226c = icmp eq i8 %v1_1226c, 0
  br i1 %v2_1226c, label %dec_label_pc_12320, label %dec_label_pc_12274

dec_label_pc_12274:                               ; preds = %dec_label_pc_1225c
  br label %dec_label_pc_12294

dec_label_pc_1227c:                               ; preds = %dec_label_pc_12294
  %v3_12280 = mul i32 %v0_122e0, 10
  %v4_12280 = add i32 %v3_12294, %v3_12280
  %v1_12284 = add i32 %v4_12280, -48
  %v8_1228c = icmp sgt i32 %v1_12284, 255
  br i1 %v8_1228c, label %dec_label_pc_12320, label %dec_label_pc_12290

dec_label_pc_12290:                               ; preds = %dec_label_pc_1227c
  %v1_12290 = add i32 %v0_122d0, 1
  store i32 %v1_12290, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12294

dec_label_pc_12294:                               ; preds = %dec_label_pc_12274, %dec_label_pc_12290
  %v0_122e0 = phi i32 [ 0, %dec_label_pc_12274 ], [ %v1_12284, %dec_label_pc_12290 ]
  %v0_122d0 = phi i32 [ %v0_12264, %dec_label_pc_12274 ], [ %v1_12290, %dec_label_pc_12290 ]
  %v1_12294 = inttoptr i32 %v0_122d0 to i8*
  %v2_12294 = load i8, i8* %v1_12294, align 1
  %v3_12294 = zext i8 %v2_12294 to i32
  %v2_12298 = mul nuw nsw i32 %v3_12294, 2
  %v2_1229c = add i32 %v2_12298, %v2_12260.pre
  %v3_122a0 = inttoptr i32 %v2_1229c to i8*
  %v4_122a0 = load i8, i8* %v3_122a0, align 1
  %v6_122a0 = zext i8 %v4_122a0 to i32
  %v1_122ac = and i32 %v6_122a0, 8
  %v2_122ac = icmp eq i32 %v1_122ac, 0
  br i1 %v2_122ac, label %dec_label_pc_122b4, label %dec_label_pc_1227c

dec_label_pc_122b4:                               ; preds = %dec_label_pc_12294
  %v8_122b8 = icmp sgt i32 %v0_122e4, 3
  br i1 %v8_122b8, label %dec_label_pc_122cc, label %dec_label_pc_122bc

dec_label_pc_122bc:                               ; preds = %dec_label_pc_122b4
  %v7_122bc = icmp eq i8 %v2_12294, 46
  br i1 %v7_122bc, label %dec_label_pc_122c4, label %dec_label_pc_12320

dec_label_pc_122c4:                               ; preds = %dec_label_pc_122bc
  %v1_122c4 = add i32 %v0_122d0, 1
  store i32 %v1_122c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_122e0

dec_label_pc_122cc:                               ; preds = %dec_label_pc_122b4
  %v2_122cc = icmp eq i8 %v2_12294, 0
  %v1_122d0 = add i32 %v0_122d0, 1
  store i32 %v1_122d0, i32* %r0.global-to-local, align 4
  br i1 %v2_122cc, label %dec_label_pc_122e0, label %dec_label_pc_122d8

dec_label_pc_122d8:                               ; preds = %dec_label_pc_122cc
  %v1_122d8 = and i32 %v6_122a0, 32
  %v2_122d8 = icmp eq i32 %v1_122d8, 0
  br i1 %v2_122d8, label %dec_label_pc_12320, label %dec_label_pc_122e0

dec_label_pc_122e0:                               ; preds = %dec_label_pc_122d8, %dec_label_pc_122cc, %dec_label_pc_122c4
  %v0_1226425 = phi i32 [ %v1_122d0, %dec_label_pc_122d8 ], [ %v1_122d0, %dec_label_pc_122cc ], [ %v1_122c4, %dec_label_pc_122c4 ]
  %v4_122e0 = mul i32 %v1_122e0, 256
  %v5_122e0 = or i32 %v0_122e0, %v4_122e0
  %v1_122e4 = add nuw nsw i32 %v0_122e4, 1
  %v7_122ec = icmp slt i32 %v1_122e4, 5
  br i1 %v7_122ec, label %dec_label_pc_1225c, label %dec_label_pc_122f0

dec_label_pc_1225c.lr.ph:                         ; preds = %dec_label_pc_12240
  %v2_12260.pre = load i32, i32* bitcast (i32** @global_var_1b174.705 to i32*), align 4
  br label %dec_label_pc_1225c

dec_label_pc_122f0:                               ; preds = %dec_label_pc_122e0
  %v2_122f0 = icmp eq i32 %v0_12248, 0
  br i1 %v2_122f0, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_122f0
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_122f0
  %v2_122f8 = and i32 %v5_122e0, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v2_122f4 = udiv i32 %v5_122e0, 256
  %v4_122fc = and i32 %v2_122f4, 65280
  %v4_12300 = mul i32 %v2_122f8, 256
  %v5_12304 = udiv i32 %v5_122e0, 16777216
  %v6_12304 = or i32 %v4_122fc, %v5_12304
  %v5_12308 = mul i32 %v0_122e0, 16777216
  %v6_12308 = or i32 %v4_12300, %v5_12308
  %v3_1230c = or i32 %v6_12304, %v6_12308
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_12318 = inttoptr i32 %v0_12248 to i32*
  store i32 %v3_1230c, i32* %v3_12318, align 4
  %v2_1231c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_1231c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_1231c = phi i32 [ 1, %bb ], [ %v17_1231c.pre, %bb40 ]
  %v2_1231c = phi i32 [ %v3_12244, %bb ], [ %v2_1231c.pre, %bb40 ]
  store i32 %v2_1231c, i32* @r4, align 4
  ret i32 %v17_1231c

dec_label_pc_12320:                               ; preds = %dec_label_pc_122bc, %dec_label_pc_122d8, %dec_label_pc_1225c, %dec_label_pc_1227c, %dec_label_pc_12240
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_12244, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_12260.pre, { 1, 0 }
  uselistorder i32 %v1_122e4, { 1, 0 }
  uselistorder i32 %v0_122d0, { 0, 1, 3, 2 }
  uselistorder i32 %v3_12244, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 27, 26, 30, 28, 31, 29, 33, 32, 37, 34, 36, 35, 38, 40, 39, 42, 41, 44, 43, 46, 45, 47, 53, 48, 54, 49, 55, 50, 56, 57, 51, 58, 52, 60, 59, 62, 61, 65, 63, 66, 64, 68, 67, 70, 69, 71, 73, 72, 74, 77, 75, 78, 76, 79, 81, 80, 82, 83, 85, 84, 86, 91, 87, 92, 88, 93, 89, 94, 90, 96, 95, 98, 97, 99, 101, 100, 105, 102, 106, 103, 107, 104, 110, 111, 108, 112, 109, 113, 115, 114, 116, 119, 117, 118, 122, 120, 123, 121, 124, 126, 125, 131, 127, 132, 128, 133, 130, 134, 135, 136, 129, 137, 139, 138, 144, 140, 145, 141, 146, 143, 147, 148, 149, 142, 151, 150, 152 }
  uselistorder i32 65280, { 0, 20, 2, 3, 19, 1, 4, 21, 5, 6, 22, 7, 23, 8, 9, 10, 11, 12, 14, 15, 24, 13, 25, 16, 26, 27, 28, 17, 29, 30, 18 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.25 to i32), { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15 }
  uselistorder i32 5, { 14, 56, 15, 5, 2, 17, 52, 18, 53, 19, 54, 16, 55, 3, 0, 20, 57, 21, 58, 22, 59, 23, 60, 24, 61, 25, 62, 26, 63, 27, 64, 28, 65, 29, 66, 30, 67, 31, 68, 32, 69, 33, 70, 34, 71, 35, 72, 36, 73, 37, 74, 38, 75, 39, 76, 40, 77, 41, 78, 42, 79, 43, 80, 44, 81, 45, 82, 46, 83, 47, 84, 48, 85, 49, 50, 86, 87, 88, 89, 6, 90, 91, 92, 93, 7, 94, 95, 96, 97, 98, 99, 100, 101, 8, 102, 103, 51, 104, 9, 105, 106, 107, 10, 108, 109, 110, 111, 11, 112, 113, 114, 115, 116, 117, 118, 12, 119, 124, 125, 126, 127, 128, 129, 13, 130, 4, 120, 121, 1, 122, 123 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 27, 28, 32, 35, 36, 37, 33, 34, 38, 39, 40, 41, 42, 384, 385, 43, 44, 45, 46, 47, 48, 49, 386, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 64, 65, 69, 68, 67, 70, 382, 387, 75, 71, 74, 72, 73, 380, 76, 77, 78, 81, 80, 79, 82, 84, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 93, 95, 96, 97, 101, 107, 102, 98, 99, 103, 104, 105, 108, 100, 109, 110, 106, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 123, 126, 129, 130, 128, 127, 131, 134, 133, 132, 135, 141, 138, 142, 139, 136, 143, 137, 144, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 161, 163, 164, 165, 176, 171, 166, 177, 172, 178, 179, 173, 180, 174, 167, 168, 169, 181, 170, 182, 175, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 207, 217, 213, 214, 209, 210, 218, 215, 211, 219, 216, 212, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 236, 235, 238, 240, 245, 246, 241, 247, 242, 239, 248, 243, 244, 249, 250, 251, 252, 253, 254, 255, 258, 259, 256, 260, 257, 265, 261, 263, 262, 264, 266, 267, 268, 269, 270, 273, 274, 277, 275, 271, 278, 276, 272, 281, 280, 279, 381, 388, 282, 283, 289, 284, 290, 285, 286, 291, 287, 292, 293, 288, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 313, 315, 316, 320, 321, 328, 322, 323, 329, 324, 317, 318, 330, 325, 319, 326, 327, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 345, 347, 348, 352, 353, 360, 354, 355, 361, 356, 349, 350, 362, 357, 351, 358, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383 }
  uselistorder i32 32, { 44, 34, 36, 37, 35, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 40, 18, 17, 19, 21, 20, 23, 22, 24, 25, 27, 26, 38, 39, 41, 42, 28, 43, 29, 30, 0, 31, 1, 2, 32, 33 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 3, { 33, 62, 63, 156, 64, 65, 66, 67, 68, 69, 157, 3, 142, 145, 146, 0, 70, 20, 71, 21, 147, 72, 34, 22, 23, 73, 37, 74, 1, 75, 76, 77, 78, 35, 18, 79, 80, 81, 82, 38, 83, 39, 84, 40, 85, 41, 86, 42, 87, 43, 88, 24, 89, 44, 90, 36, 91, 45, 46, 47, 48, 49, 50, 92, 93, 94, 95, 96, 97, 51, 98, 52, 99, 53, 25, 100, 101, 102, 103, 104, 5, 4, 54, 26, 105, 106, 107, 108, 109, 110, 111, 7, 6, 55, 112, 27, 113, 114, 115, 116, 117, 118, 119, 120, 9, 8, 56, 121, 28, 122, 123, 124, 125, 126, 11, 10, 57, 127, 29, 128, 129, 130, 131, 58, 132, 13, 12, 59, 133, 30, 134, 135, 136, 137, 138, 139, 15, 14, 60, 140, 31, 141, 148, 149, 150, 151, 152, 153, 17, 16, 61, 154, 32, 155, 19, 143, 2, 144 }
  uselistorder i32 8, { 120, 26, 27, 24, 25, 16, 17, 20, 21, 28, 161, 162, 29, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 30, 179, 180, 153, 152, 150, 151, 136, 137, 138, 154, 155, 156, 144, 145, 146, 6, 7, 8, 71, 18, 9, 10, 15, 11, 36, 31, 12, 13, 14, 72, 38, 73, 39, 74, 40, 75, 37, 76, 23, 77, 78, 79, 80, 82, 41, 83, 42, 84, 43, 85, 44, 86, 45, 87, 46, 88, 47, 89, 48, 90, 49, 91, 50, 92, 51, 93, 52, 94, 53, 95, 54, 96, 55, 97, 56, 98, 57, 99, 58, 100, 59, 101, 60, 102, 61, 103, 62, 104, 63, 105, 64, 106, 65, 107, 66, 108, 109, 81, 110, 22, 70, 32, 111, 112, 113, 114, 115, 19, 116, 117, 118, 119, 3, 121, 122, 123, 4, 124, 125, 126, 127, 128, 129, 130, 5, 131, 132, 133, 134, 135, 157, 158, 159, 160, 139, 33, 140, 34, 141, 35, 142, 67, 143, 69, 147, 148, 68, 149, 0, 1, 2 }
  uselistorder i32 255, { 2, 6, 7, 3, 8, 4, 9, 5, 10, 0, 1 }
  uselistorder i32 10, { 7, 29, 30, 0, 31, 8, 34, 36, 9, 35, 10, 37, 11, 38, 2, 39, 40, 32, 12, 41, 33, 42, 13, 43, 14, 44, 15, 45, 16, 46, 17, 47, 18, 48, 19, 49, 20, 50, 21, 51, 22, 52, 23, 53, 24, 54, 55, 25, 1, 26, 56, 57, 58, 59, 60, 61, 62, 63, 64, 3, 65, 66, 67, 4, 68, 69, 70, 27, 71, 5, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 77, 6, 83, 28 }
  uselistorder i8 0, { 3, 0, 13, 2, 14, 15, 4, 16, 17, 18, 19, 7, 20, 1, 6, 5, 8, 21, 22, 23, 24, 25, 11, 26, 27, 9, 28, 29, 10, 12, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32 2, { 4, 120, 229, 230, 51, 231, 232, 45, 233, 44, 234, 43, 73, 74, 157, 75, 158, 76, 159, 235, 48, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 121, 14, 15, 16, 17, 18, 78, 79, 77, 46, 47, 80, 140, 81, 83, 124, 85, 125, 86, 126, 87, 127, 84, 128, 134, 57, 123, 58, 129, 59, 130, 60, 131, 61, 132, 62, 133, 63, 139, 135, 136, 137, 138, 53, 88, 141, 19, 20, 142, 144, 145, 89, 146, 49, 122, 90, 147, 91, 148, 92, 149, 150, 82, 151, 21, 93, 143, 97, 152, 95, 153, 96, 154, 94, 98, 155, 22, 23, 24, 99, 156, 100, 101, 102, 54, 104, 105, 103, 217, 218, 160, 161, 162, 163, 164, 165, 166, 106, 167, 64, 168, 169, 170, 171, 172, 107, 65, 173, 174, 175, 176, 177, 178, 179, 108, 180, 66, 181, 182, 109, 110, 111, 183, 184, 185, 186, 187, 188, 189, 190, 1, 25, 26, 27, 28, 29, 30, 112, 191, 67, 192, 193, 194, 195, 196, 2, 31, 32, 33, 34, 35, 36, 113, 68, 197, 198, 199, 200, 114, 201, 50, 202, 70, 203, 3, 37, 38, 39, 40, 41, 42, 115, 204, 69, 205, 206, 207, 208, 209, 210, 211, 212, 116, 213, 71, 214, 219, 220, 221, 117, 222, 118, 223, 224, 225, 226, 119, 227, 72, 228, 55, 215, 52, 56, 216 }
  uselistorder i32* @r1, { 20, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 1, 61, 62, 5, 63, 0, 64, 13, 14, 66, 26, 31, 32, 35, 33, 34, 27, 28, 29, 30, 25, 36, 65, 10, 4, 21, 6, 37, 3, 38, 39, 40, 11, 7, 8, 9, 12, 41, 42, 2, 15, 16, 17, 18, 19, 22, 23, 24, 43 }
  uselistorder label %dec_label_pc_12320, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_12294, { 1, 0 }
}

define i32 @function_1232c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1232c:
  %v3_1232c = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_12334 = call i32 @function_106b8()
  %v0_12338 = load i32, i32* @r4, align 4
  store i32 %v3_1232c, i32* @r4, align 4
  %v2_12340 = call i32 @function_10760(i32 %v0_12334, i32 %v0_12338)
  ret i32 %v2_12340

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_10760, { 2, 3, 1, 0 }
}

define i32 @function_12344(i32 %arg1) local_unnamed_addr {
dec_label_pc_12344:
  %v1_12344 = add i32 %arg1, 28
  %v2_12344 = inttoptr i32 %v1_12344 to i32*
  %v3_12344 = load i32, i32* %v2_12344, align 4
  %v1_1234c = add i32 %arg1, 44
  %v2_1234c = inttoptr i32 %v1_1234c to i32*
  %v3_1234c = load i32, i32* %v2_1234c, align 4
  store i32 %v3_12344, i32* @global_var_1b394.707, align 4
  store i32 %v3_1234c, i32* @global_var_1b398.709, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 7, 0, 5, 6, 1, 2, 3, 4 }
  uselistorder i32 28, { 22, 0, 1, 21, 5, 6, 7, 8, 9, 10, 11, 2, 4, 13, 12, 14, 15, 16, 17, 18, 19, 20, 3 }
}

define i32 @function_12368(i32* %arg1) local_unnamed_addr {
dec_label_pc_12368:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_12370 = call i32 @brk(i32* %arg1)
  %v3_12374 = icmp ult i32 %v2_12370, %tmp
  store i32 %v2_12370, i32* @global_var_1b22c.702, align 4
  br i1 %v3_12374, label %dec_label_pc_12388, label %dec_label_pc_12398

dec_label_pc_12388:                               ; preds = %dec_label_pc_12368
  %v0_12388 = call i32 @function_1095c()
  %v2_12390 = inttoptr i32 %v0_12388 to i32*
  store i32 12, i32* %v2_12390, align 4
  br label %dec_label_pc_12398

dec_label_pc_12398:                               ; preds = %dec_label_pc_12368, %dec_label_pc_12388
  %v0_12398 = phi i32 [ 0, %dec_label_pc_12368 ], [ -1, %dec_label_pc_12388 ]
  ret i32 %v0_12398

; uselistorder directives
  uselistorder i32 12, { 15, 6, 10, 99, 100, 101, 103, 104, 105, 106, 11, 102, 107, 108, 109, 110, 111, 112, 113, 89, 90, 91, 0, 86, 92, 7, 93, 8, 87, 4, 88, 16, 17, 26, 27, 44, 45, 37, 18, 38, 34, 46, 28, 25, 29, 30, 31, 32, 33, 35, 39, 40, 36, 47, 48, 19, 41, 20, 42, 21, 43, 49, 9, 50, 51, 53, 54, 55, 22, 56, 23, 57, 5, 58, 52, 94, 59, 24, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 12, 71, 72, 73, 74, 75, 13, 76, 77, 78, 79, 80, 81, 14, 82, 83, 84, 85, 95, 96, 97, 98, 1, 2, 3 }
  uselistorder i32 ()* @function_1095c, { 19, 47, 32, 9, 8, 7, 6, 5, 48, 31, 30, 17, 18, 46, 45, 16, 15, 14, 26, 24, 44, 29, 43, 42, 23, 25, 41, 40, 13, 4, 3, 39, 38, 27, 37, 2, 11, 36, 35, 10, 21, 12, 1, 0, 34, 22, 33, 28, 20 }
  uselistorder i32* @global_var_1b22c.702, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12398, { 1, 0 }
}

define i32 @function_123a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_123a4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_123a8 = load i32, i32* @global_var_1b000.666, align 4
  %v7_123ac = icmp eq i32 %v3_123a8, -1
  %v3_123b0 = load i32, i32* @r4, align 4
  store i32 %v3_123b0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1b000.666 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_123ac, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_123a4
  store i32 %v3_123b0, i32* %r4.global-to-local, align 4
  %v9_123b8 = load i32, i32* @r0, align 4
  ret i32 %v9_123b8

.preheader:                                       ; preds = %dec_label_pc_123a4, %.preheader
  %v0_123c0 = phi i32 [ %v3_123c4, %.preheader ], [ %v3_123a8, %dec_label_pc_123a4 ]
  call void @__pseudo_branch(i32 %v0_123c0)
  %v0_123c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_123c4 = add i32 %v0_123c4, -4
  %v2_123c4 = inttoptr i32 %v1_123c4 to i32*
  %v3_123c4 = load i32, i32* %v2_123c4, align 4
  store i32 %v1_123c4, i32* %r4.global-to-local, align 4
  %v3_123c8 = icmp eq i32 %v3_123c4, -1
  br i1 %v3_123c8, label %dec_label_pc_123d0, label %.preheader

dec_label_pc_123d0:                               ; preds = %.preheader
  %v2_123d0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_123d0, i32* %r4.global-to-local, align 4
  %v8_123d0 = load i32, i32* @r0, align 4
  ret i32 %v8_123d0

; uselistorder directives
  uselistorder i32 %v3_123c4, { 1, 0 }
  uselistorder i32 %v3_123a8, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 45, 15, 46, 47, 48, 3, 16, 17, 18, 49, 50, 51, 4, 19, 20, 21, 52, 53, 54, 5, 22, 23, 55, 14, 13, 56, 57, 58, 12, 11, 10, 9, 24, 25, 26, 27, 28, 0, 29, 1, 30, 2, 59, 8, 31, 37, 43, 38, 32, 33, 39, 40, 41, 42, 44, 7, 6, 34, 35, 36 }
  uselistorder i32 -1, { 127, 0, 75, 126, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 128, 76, 203, 77, 234, 78, 224, 79, 257, 80, 258, 81, 259, 82, 260, 83, 261, 1, 129, 2, 84, 225, 226, 130, 131, 132, 118, 133, 3, 4, 73, 64, 65, 134, 135, 136, 72, 204, 137, 205, 5, 6, 85, 235, 86, 236, 87, 237, 88, 229, 89, 231, 90, 206, 91, 227, 92, 207, 93, 208, 94, 232, 95, 230, 96, 209, 97, 138, 98, 210, 99, 238, 100, 262, 263, 101, 211, 102, 212, 103, 228, 104, 213, 105, 264, 106, 240, 107, 214, 108, 215, 109, 241, 110, 233, 111, 239, 112, 265, 74, 266, 139, 140, 141, 142, 143, 7, 8, 9, 113, 114, 10, 144, 216, 16, 145, 17, 146, 12, 147, 148, 217, 11, 149, 68, 18, 150, 151, 15, 152, 153, 154, 200, 201, 155, 156, 157, 198, 115, 199, 19, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 202, 13, 178, 14, 179, 180, 181, 20, 182, 183, 116, 218, 184, 21, 185, 219, 69, 66, 67, 22, 23, 26, 119, 220, 25, 121, 221, 24, 120, 222, 27, 28, 122, 223, 29, 30, 31, 32, 33, 186, 34, 70, 35, 36, 37, 38, 187, 39, 117, 40, 41, 43, 188, 42, 44, 45, 46, 47, 189, 48, 49, 50, 190, 51, 52, 53, 191, 54, 55, 56, 57, 58, 192, 59, 60, 61, 193, 62, 63, 71, 194, 195, 196, 197, 123, 124, 125 }
  uselistorder i32* @global_var_1b000.666, { 1, 0 }
  uselistorder i32 1, { 403, 113, 251, 269, 679, 680, 681, 682, 683, 260, 404, 228, 534, 535, 536, 537, 538, 539, 540, 753, 9, 5, 6, 7, 8, 754, 252, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 407, 406, 405, 219, 220, 221, 223, 218, 216, 222, 217, 213, 215, 214, 408, 64, 409, 109, 110, 410, 65, 411, 230, 412, 51, 413, 225, 414, 231, 415, 158, 0, 419, 418, 417, 416, 111, 112, 302, 420, 11, 12, 261, 303, 421, 58, 422, 625, 427, 426, 425, 424, 423, 46, 47, 49, 50, 48, 304, 428, 767, 262, 431, 430, 429, 227, 226, 432, 67, 68, 66, 69, 13, 14, 15, 16, 433, 191, 192, 190, 189, 434, 435, 237, 236, 436, 263, 726, 437, 56, 57, 305, 306, 249, 441, 440, 439, 438, 161, 160, 253, 442, 204, 443, 63, 444, 114, 445, 188, 446, 159, 447, 60, 448, 181, 449, 17, 450, 18, 451, 174, 452, 175, 453, 61, 454, 727, 246, 180, 179, 178, 455, 456, 62, 457, 10, 458, 33, 34, 459, 108, 460, 177, 461, 35, 462, 115, 36, 463, 212, 464, 153, 465, 229, 466, 235, 467, 234, 468, 82, 224, 59, 274, 569, 570, 275, 728, 729, 245, 730, 254, 628, 629, 255, 630, 470, 469, 233, 232, 731, 264, 265, 1, 301, 732, 471, 21, 19, 22, 23, 20, 566, 568, 567, 307, 571, 71, 70, 733, 572, 573, 574, 26, 24, 25, 734, 472, 44, 43, 735, 736, 473, 41, 40, 39, 38, 42, 737, 738, 474, 157, 156, 155, 154, 308, 543, 309, 544, 276, 545, 546, 318, 547, 575, 319, 320, 557, 558, 563, 317, 541, 542, 548, 315, 549, 550, 316, 551, 552, 314, 553, 554, 313, 555, 556, 312, 559, 560, 311, 561, 562, 310, 564, 565, 576, 321, 250, 577, 322, 578, 580, 581, 579, 582, 323, 583, 533, 266, 586, 584, 324, 585, 588, 325, 589, 590, 591, 270, 592, 593, 326, 594, 327, 595, 328, 596, 329, 597, 330, 598, 331, 599, 332, 600, 333, 601, 334, 602, 335, 603, 336, 604, 337, 605, 338, 606, 339, 607, 340, 608, 341, 609, 342, 610, 343, 611, 344, 612, 267, 618, 619, 247, 345, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 400, 477, 476, 475, 166, 167, 162, 163, 168, 170, 169, 173, 164, 165, 172, 171, 613, 614, 346, 615, 616, 347, 617, 488, 123, 122, 117, 121, 120, 119, 116, 118, 587, 348, 490, 489, 239, 241, 238, 240, 739, 492, 491, 186, 187, 185, 184, 183, 182, 493, 351, 277, 620, 621, 278, 622, 349, 350, 352, 623, 624, 353, 354, 355, 356, 357, 358, 359, 272, 273, 360, 505, 504, 503, 502, 501, 500, 499, 498, 497, 402, 496, 495, 494, 28, 30, 29, 32, 31, 361, 248, 362, 506, 365, 364, 363, 626, 508, 507, 279, 627, 366, 367, 509, 740, 280, 741, 281, 742, 2, 743, 3, 4, 631, 632, 633, 634, 635, 636, 637, 638, 271, 639, 640, 641, 642, 368, 643, 369, 644, 370, 645, 646, 647, 648, 649, 512, 511, 510, 194, 195, 201, 202, 200, 197, 203, 199, 198, 193, 196, 651, 652, 653, 654, 655, 371, 372, 514, 513, 94, 92, 91, 93, 98, 99, 96, 97, 95, 656, 657, 658, 373, 659, 660, 661, 662, 663, 664, 374, 665, 375, 283, 282, 376, 666, 515, 100, 102, 104, 105, 107, 106, 103, 101, 667, 668, 377, 669, 378, 379, 285, 284, 401, 516, 176, 670, 671, 256, 672, 673, 674, 675, 380, 676, 257, 381, 382, 677, 286, 678, 517, 144, 147, 142, 143, 148, 149, 152, 150, 146, 151, 145, 684, 685, 686, 687, 688, 383, 689, 384, 288, 287, 385, 691, 386, 692, 518, 207, 209, 210, 211, 208, 206, 205, 693, 694, 695, 696, 697, 698, 699, 387, 700, 388, 701, 389, 293, 292, 390, 702, 289, 703, 290, 704, 291, 705, 523, 522, 521, 520, 519, 85, 86, 87, 90, 89, 83, 88, 84, 706, 707, 708, 709, 710, 711, 391, 296, 295, 392, 712, 294, 713, 524, 73, 74, 75, 80, 79, 81, 77, 76, 72, 78, 744, 745, 746, 747, 748, 749, 393, 299, 298, 394, 750, 297, 751, 529, 528, 527, 526, 525, 127, 126, 125, 130, 131, 133, 134, 124, 129, 132, 128, 714, 300, 395, 530, 53, 54, 55, 52, 715, 716, 396, 268, 397, 719, 398, 399, 720, 717, 718, 721, 722, 723, 724, 258, 725, 259, 139, 136, 138, 137, 141, 135, 140, 752, 37, 690, 45, 650, 27, 531, 532, 244, 243, 242 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_123d8() local_unnamed_addr {
dec_label_pc_123d8:
  %v5_123dc = load i32, i32* @r0, align 4
  ret i32 %v5_123dc

; uselistorder directives
  uselistorder i32* @r0, { 4, 20, 21, 59, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 27, 28, 29, 30, 13, 2, 17, 18, 52, 53, 24, 108, 109, 111, 11, 19, 70, 14, 69, 65, 25, 66, 16, 67, 71, 110, 35, 15, 6, 112, 9, 12, 36, 8, 72, 7, 73, 74, 10, 75, 37, 38, 0, 31, 39, 40, 32, 33, 34, 41, 43, 44, 45, 46, 47, 42, 48, 49, 50, 51, 76, 77, 1, 54, 55, 56, 57, 58, 60, 62, 63, 64, 78, 79, 68, 61, 5, 3, 22, 23, 26 }
}

define i32 @function_123e0() local_unnamed_addr {
entry:
  %v3_123e4 = load i32, i32* @r4, align 4
  %v0_123ec = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_123e4)
  ret i32 %v0_123ec

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 9, 13, 14, 10, 11, 12, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 79, 0, 561, 562, 563, 564, 81, 80, 565, 696, 697, 50, 698, 699, 700, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 703, 704, 715, 716, 717, 718, 719, 720, 721, 722, 28, 723, 724, 725, 726, 727, 29, 728, 729, 730, 30, 731, 732, 733, 31, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 749, 750, 761, 762, 763, 764, 765, 766, 767, 768, 32, 769, 770, 771, 772, 773, 33, 774, 775, 776, 777, 778, 34, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 412, 630, 631, 632, 633, 506, 792, 793, 794, 795, 796, 797, 798, 82, 799, 56, 800, 54, 55, 801, 802, 803, 190, 807, 191, 818, 820, 360, 162, 821, 192, 819, 193, 194, 1, 804, 805, 83, 507, 180, 508, 197, 182, 181, 509, 510, 511, 512, 196, 514, 515, 195, 516, 806, 199, 808, 200, 183, 809, 810, 812, 813, 198, 636, 638, 639, 38, 163, 640, 637, 634, 635, 2, 603, 606, 604, 605, 164, 3, 643, 641, 642, 165, 84, 607, 608, 609, 610, 612, 613, 201, 4, 614, 5, 650, 651, 85, 644, 645, 646, 647, 648, 649, 6, 7, 513, 413, 414, 415, 202, 8, 203, 652, 653, 356, 654, 357, 549, 577, 416, 517, 417, 418, 578, 550, 419, 566, 420, 655, 811, 421, 422, 521, 423, 358, 814, 57, 815, 694, 424, 425, 695, 615, 656, 816, 817, 9, 426, 72, 427, 428, 157, 156, 361, 58, 59, 60, 61, 370, 362, 40, 39, 73, 429, 430, 431, 432, 434, 433, 10, 657, 658, 159, 158, 363, 62, 63, 64, 65, 371, 364, 42, 41, 37, 46, 659, 372, 660, 661, 662, 66, 663, 664, 665, 666, 667, 86, 668, 365, 373, 366, 367, 669, 374, 186, 43, 87, 204, 435, 671, 670, 672, 673, 35, 88, 674, 91, 90, 89, 187, 188, 189, 93, 92, 94, 205, 436, 437, 95, 675, 676, 77, 96, 438, 97, 439, 98, 677, 678, 99, 679, 680, 440, 387, 100, 101, 444, 441, 388, 389, 390, 391, 402, 385, 375, 212, 386, 408, 409, 392, 393, 394, 376, 210, 395, 396, 377, 211, 397, 398, 378, 209, 399, 400, 379, 208, 401, 403, 380, 207, 404, 411, 381, 206, 405, 410, 406, 53, 44, 160, 161, 407, 359, 442, 213, 443, 167, 445, 74, 446, 214, 447, 450, 451, 103, 166, 448, 449, 215, 216, 452, 453, 184, 454, 455, 456, 457, 458, 459, 382, 460, 461, 51, 217, 463, 464, 465, 466, 467, 468, 469, 170, 169, 470, 218, 471, 67, 472, 473, 78, 474, 369, 475, 476, 477, 368, 478, 479, 480, 102, 219, 220, 481, 484, 485, 486, 487, 488, 104, 482, 105, 483, 11, 106, 462, 681, 682, 489, 490, 221, 491, 493, 107, 494, 495, 496, 497, 498, 499, 500, 185, 222, 501, 52, 223, 502, 492, 12, 503, 171, 504, 224, 505, 518, 519, 520, 225, 75, 108, 47, 109, 522, 523, 68, 69, 48, 110, 111, 112, 172, 524, 76, 525, 526, 527, 168, 528, 113, 529, 530, 226, 531, 532, 533, 114, 115, 534, 116, 536, 70, 71, 49, 117, 118, 173, 537, 538, 539, 540, 119, 541, 542, 543, 120, 122, 121, 174, 545, 544, 123, 546, 547, 124, 548, 129, 228, 229, 551, 127, 128, 125, 126, 552, 130, 553, 230, 231, 227, 554, 131, 133, 132, 134, 556, 557, 555, 558, 13, 14, 15, 16, 17, 559, 135, 560, 136, 137, 175, 568, 567, 569, 571, 572, 570, 18, 19, 20, 21, 22, 573, 138, 576, 579, 580, 581, 582, 45, 139, 141, 140, 176, 584, 583, 232, 585, 587, 588, 589, 590, 591, 233, 592, 23, 24, 25, 586, 26, 27, 593, 142, 594, 595, 143, 145, 144, 177, 598, 596, 597, 234, 600, 599, 601, 146, 602, 683, 147, 149, 148, 178, 686, 685, 684, 235, 688, 687, 689, 150, 692, 179, 611, 236, 616, 617, 151, 618, 619, 620, 621, 152, 622, 237, 623, 624, 36, 625, 626, 627, 628, 629, 690, 153, 691, 574, 154, 575, 155, 535, 693, 383, 384, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836 }
  uselistorder i32* @r4, { 29, 536, 540, 541, 544, 545, 335, 336, 337, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 57, 471, 472, 186, 562, 563, 564, 565, 566, 567, 568, 569, 3, 570, 571, 572, 573, 587, 588, 589, 590, 27, 591, 26, 582, 583, 584, 585, 586, 574, 575, 576, 187, 188, 189, 190, 191, 192, 193, 194, 577, 578, 581, 473, 474, 475, 432, 4, 433, 434, 435, 5, 436, 6, 437, 438, 451, 7, 8, 452, 453, 454, 455, 456, 457, 476, 477, 9, 485, 486, 478, 479, 480, 481, 482, 483, 484, 58, 59, 60, 61, 62, 63, 487, 488, 489, 490, 491, 492, 290, 291, 371, 372, 64, 65, 195, 66, 67, 68, 69, 373, 374, 292, 293, 70, 71, 72, 73, 493, 494, 579, 580, 2, 74, 75, 76, 77, 207, 208, 78, 79, 538, 539, 80, 81, 542, 543, 458, 459, 495, 496, 82, 83, 84, 85, 497, 498, 499, 86, 87, 88, 500, 501, 502, 503, 504, 505, 30, 31, 32, 33, 34, 35, 36, 37, 89, 90, 38, 39, 40, 41, 91, 92, 42, 45, 46, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 93, 94, 55, 56, 10, 95, 96, 97, 98, 99, 100, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 154, 155, 156, 157, 158, 159, 0, 160, 148, 149, 150, 151, 152, 153, 101, 102, 103, 104, 105, 506, 507, 508, 509, 510, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 11, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 222, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 1, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 12, 269, 13, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 14, 308, 15, 309, 16, 310, 17, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 339, 340, 18, 341, 19, 342, 20, 343, 21, 344, 345, 346, 347, 348, 349, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 375, 376, 377, 378, 379, 380, 381, 382, 383, 393, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 22, 413, 23, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 511, 512, 513, 24, 514, 25, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 533, 534, 535, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 460, 464, 461, 462, 463, 465, 466, 467, 468, 469, 470, 530, 531, 532, 350, 351, 352, 28, 537 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
