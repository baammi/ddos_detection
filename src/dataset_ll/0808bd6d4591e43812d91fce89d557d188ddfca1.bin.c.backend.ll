source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_v = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1f00c.5 = global i32 0
@global_var_1f01c.6 = global i32* @global_var_1f00c.5
@global_var_1f17c.12 = global i32 0
@global_var_f128.18 = constant i32 -382906384
@global_var_15cf4.21 = constant [4 x i8] c"GET\00"
@global_var_15cf8.23 = constant i32 47
@global_var_ff00.24 = constant i32 90372
@global_var_135f0.26 = constant i32 -382910448
@global_var_10000.27 = constant i32 127444
@global_var_15cec.29 = constant i32 32
@global_var_15cc4.31 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_15cdc.33 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_15ce8.35 = constant [3 x i8] c"\0D\0A\00"
@global_var_15cfc.37 = constant [9 x i8] c"Cookie: \00"
@global_var_15d08.39 = constant [3 x i8] c"; \00"
@global_var_15d0c.41 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_15d14.43 = constant i32 59
@global_var_15d18.45 = constant [5 x i8] c"http\00"
@global_var_15d20.47 = constant [5 x i8] c"url=\00"
@global_var_15d28.49 = constant [5 x i8] c"POST\00"
@global_var_12c84.50 = constant i32 -439275520
@global_var_15d30.52 = constant i32 39
@global_var_16558.54 = constant i32 61
@global_var_14220.55 = constant i32 -481296384
@global_var_1f198.59 = global i32 0
@global_var_a394.60 = constant i32 -352321555
@global_var_d7e8.66 = constant i32 -382906384
@global_var_dce8.68 = constant i32 -382906384
@global_var_ce1c.70 = constant i32 -382906384
@global_var_c6a0.72 = constant i32 -382906384
@global_var_bee4.74 = constant i32 -382906384
@global_var_b5b8.76 = constant i32 -382906384
@global_var_ae80.78 = constant i32 -382906384
@global_var_a6d8.80 = constant i32 -382906384
@global_var_81cc.82 = constant i32 -382906384
@global_var_1f238.84 = global i32 0
@global_var_1f19c.95 = global i32 0
@global_var_1f23c.99 = local_unnamed_addr global i32 0
@global_var_1f1a0.101 = global i32 0
@global_var_ee7c.103 = constant i32 -382910448
@global_var_1f028.105 = global i32 77588
@global_var_1f244.109 = local_unnamed_addr global i32 0
@global_var_1f243.110 = local_unnamed_addr global i32 0
@global_var_1f242.111 = local_unnamed_addr global i32 0
@global_var_1f020.113 = global i32 -1
@global_var_1f1a4.118 = global i32 0
@global_var_ee64.120 = constant i32 -442556408
@global_var_1f241.123 = local_unnamed_addr global i32 0
@global_var_15d34.127 = constant i32 10
@global_var_1f024.129 = global i32 -1
@global_var_12f14.133 = constant i32 -382910224
@global_var_15d38.136 = constant i32 16777216
@global_var_1f1ac.138 = global i32 0
@global_var_1f1b8.140 = global i32 0
@global_var_1f1b0.142 = global i32 0
@global_var_1f1b4.144 = global i32 0
@global_var_1f258.154 = global i32 0
@global_var_1f1f0.156 = global i32 0
@global_var_1f1bc.158 = global i32 0
@global_var_1f1e8.160 = global i32 0
@global_var_1f250.168 = global i32 0
@global_var_1f254.170 = global i32 0
@global_var_1f1c3.173 = local_unnamed_addr global i32 0
@global_var_1f1c2.174 = local_unnamed_addr global i32 0
@global_var_1f1d4.175 = global i32 0
@global_var_1f1c8.177 = local_unnamed_addr global i32 0
@global_var_1f1c5.178 = local_unnamed_addr global i32 0
@global_var_1f1d5.179 = local_unnamed_addr global i32 0
@global_var_1f1d7.180 = local_unnamed_addr global i32 0
@global_var_1f1c9.181 = local_unnamed_addr global i32 0
@global_var_1f1c4.182 = local_unnamed_addr global i32 0
@global_var_1f1d6.183 = local_unnamed_addr global i32 0
@global_var_1f1e3.185 = local_unnamed_addr global i32 0
@global_var_1f1e2.186 = local_unnamed_addr global i32 0
@global_var_160b4.188 = constant [5 x i8] c"PMMV\00"
@global_var_15d10.190 = constant i32 0
@global_var_16258.192 = constant [6 x i8] c"CFOKL\00"
@global_var_15d40.194 = constant i32 387006810
@global_var_15d48.196 = constant [6 x i8] c"TKXZT\00"
@global_var_15d50.198 = constant i32 437918234
@global_var_15d58.200 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_15d60.202 = constant [8 x i8] c"FGDCWNV\00"
@global_var_15d68.204 = constant [9 x i8] c"HWCLVGAJ\00"
@global_var_15d74.206 = constant i32 370216979
@global_var_15d7c.208 = constant i32 269555223
@global_var_15d84.210 = constant [8 x i8] c"QWRRMPV\00"
@global_var_16190.212 = constant i32 370216979
@global_var_15d8c.214 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_15d98.216 = constant i32 370216979
@global_var_15da0.218 = constant [5 x i8] c"WQGP\00"
@global_var_15da8.220 = constant [5 x i8] c"RCQQ\00"
@global_var_15db0.222 = constant i32 1263486531
@global_var_15f04.224 = constant i32 320017171
@global_var_15dbc.226 = constant [9 x i8] c"QOACFOKL\00"
@global_var_15dc8.228 = constant i32 336860180
@global_var_15dd0.230 = constant i32 324292169
@global_var_15dd8.232 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_15de8.234 = constant [7 x i8] c"OGKLQO\00"
@global_var_15df0.236 = constant [4 x i8] c"@WJ\00"
@global_var_15df4.238 = constant [7 x i8] c"RW@NKA\00"
@global_var_15dfc.240 = constant [8 x i8] c"QGPTKAG\00"
@global_var_15e04.242 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_15e10.244 = constant [6 x i8] c"EWGQV\00"
@global_var_15e18.246 = constant i32 1263486531
@global_var_15e20.248 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_15e30.250 = constant [5 x i8] c"W@LV\00"
@global_var_15e38.252 = constant i32 324292169
@global_var_15e40.254 = constant i32 390551160
@global_var_15e48.256 = constant i32 387009354
@global_var_15e50.258 = constant [6 x i8] c"HT@XF\00"
@global_var_15e58.260 = constant [5 x i8] c"CLIM\00"
@global_var_15e60.262 = constant [6 x i8] c"XNZZ\0C\00"
@global_var_15e68.264 = constant [9 x i8] c"AJCLEGOG\00"
@global_var_15e74.266 = constant i32 1867011861
@global_var_15e84.268 = constant i32 1867011861
@global_var_15e94.270 = constant [7 x i8] c"Q[QVGO\00"
@global_var_15e9c.272 = constant [5 x i8] c"KIU@\00"
@global_var_15ea4.274 = constant [9 x i8] c"FPGCO@MZ\00"
@global_var_15eb0.276 = constant [8 x i8] c"PGCNVGI\00"
@global_var_15eb8.278 = constant i32 303174162
@global_var_15ec4.280 = constant i32 303174162
@global_var_15ecc.282 = constant i32 320017171
@global_var_15ed4.284 = constant i32 1263486531
@global_var_15d6c.286 = constant [5 x i8] c"VGAJ\00"
@global_var_15ee0.288 = constant i32 454761243
@global_var_15eec.290 = constant [6 x i8] c"oGKLQ\00"
@global_var_15ef4.292 = constant [4 x i8] c"hta\00"
@global_var_15ef8.294 = constant i32 319820054
@global_var_15f00.296 = constant i32 320017171
@global_var_15f0c.298 = constant [7 x i8] c"WVQVCP\00"
@global_var_15f14.300 = constant [9 x i8] c"XMMOCFQN\00"
@global_var_15f20.302 = constant i32 1263486531
@global_var_15f28.304 = constant i32 303059531
@global_var_15f30.306 = constant i32 303125067
@global_var_15f38.308 = constant i32 303452747
@global_var_15f40.310 = constant [7 x i8] c"@KLVGA\00"
@global_var_15f48.312 = constant [8 x i8] c"VQWLCOK\00"
@global_var_15f50.314 = constant i32 323043395
@global_var_15f58.316 = constant i32 319951888
@global_var_15f60.318 = constant [7 x i8] c"Q[LLGV\00"
@global_var_15f68.320 = constant [9 x i8] c"@C[CLFQN\00"
@global_var_15f74.322 = constant [6 x i8] c"SWQGP\00"
@global_var_1606c.324 = constant i32 1118227
@global_var_15f7c.326 = constant i32 370216979
@global_var_15f84.328 = constant [8 x i8] c"oCLCEGP\00"
@global_var_15f8c.330 = constant [4 x i8] c"CFO\00"
@global_var_15f90.332 = constant [8 x i8] c"OCLCEGP\00"
@global_var_15f98.334 = constant [7 x i8] c"DPKGLF\00"
@global_var_15fa0.336 = constant [4 x i8] c"CRA\00"
@global_var_15fa4.338 = constant i32 1263421261
@global_var_15fb0.340 = constant [5 x i8] c"VKLK\00"
@global_var_15fb8.342 = constant [7 x i8] c"CQAGLF\00"
@global_var_15fc0.344 = constant i32 1265504102
@global_var_15fc8.346 = constant [6 x i8] c"FNKLI\00"
@global_var_15fd0.348 = constant [6 x i8] c"NMEKL\00"
@global_var_15fd8.350 = constant i32 1296912387
@global_var_15fe0.352 = constant [9 x i8] c"AC@NGAMO\00"
@global_var_15fec.354 = constant [7 x i8] c"PMWVGP\00"
@global_var_15ff4.356 = constant [8 x i8] c"LGVMRKC\00"
@global_var_15ffc.358 = constant [7 x i8] c"Q[QCFO\00"
@global_var_16004.360 = constant [8 x i8] c"CLKAWQV\00"
@global_var_1600c.362 = constant [6 x i8] c"FG@WE\00"
@global_var_16014.364 = constant [10 x i8] c"F\0CG\0C@\0CW\0CE\00"
@global_var_16020.366 = constant [5 x i8] c"GAJM\00"
@global_var_16028.368 = constant [5 x i8] c"FKCE\00"
@global_var_16030.370 = constant [7 x i8] c"QUKVAJ\00"
@global_var_16000.372 = constant [3 x i8] c"FO\00"
@global_var_16038.374 = constant [7 x i8] c"VGNLGV\00"
@global_var_16040.376 = constant i32 370216979
@global_var_1604c.378 = constant [5 x i8] c"VMMP\00"
@global_var_16054.380 = constant [7 x i8] c"ACNTKL\00"
@global_var_1605c.382 = constant i32 370216979
@global_var_16068.384 = constant i32 1447906640
@global_var_16070.386 = constant i32 1447512643
@global_var_1607c.388 = constant i32 454302484
@global_var_16084.390 = constant i32 387400530
@global_var_16090.392 = constant i32 319885331
@global_var_16098.394 = constant i32 1986882928
@global_var_160a0.396 = constant [7 x i8] c"CNRKLG\00"
@global_var_160a8.398 = constant i32 457659992
@global_var_160b0.400 = constant i32 303043392
@global_var_160bc.402 = constant [9 x i8] c"rcqqumpf\00"
@global_var_160c8.404 = constant [6 x i8] c"cfokl\00"
@global_var_160d0.406 = constant [8 x i8] c"LGVEGCP\00"
@global_var_160d8.408 = constant i32 303257172
@global_var_160e0.410 = constant [4 x i8] c"K@O\00"
@global_var_160e4.412 = constant [7 x i8] c"T[CVVC\00"
@global_var_160ec.414 = constant [6 x i8] c"cFOKL\00"
@global_var_160f4.416 = constant i32 373380675
@global_var_160fc.418 = constant [7 x i8] c"OKAPMQ\00"
@global_var_16104.419 = constant [6 x i8] c"QGVWR\00"
@global_var_1610c.421 = constant [8 x i8] c"AMOACQV\00"
@global_var_16114.423 = constant [4 x i8] c"RMQ\00"
@global_var_16118.425 = constant [4 x i8] c"UUU\00"
@global_var_1611c.427 = constant i32 303176208
@global_var_16124.429 = constant [5 x i8] c"w`lv\00"
@global_var_1612c.431 = constant [7 x i8] c"LGVOCL\00"
@global_var_16134.433 = constant [6 x i8] c"Cfokl\00"
@global_var_1613c.435 = constant [7 x i8] c"FCGOML\00"
@global_var_16144.437 = constant [5 x i8] c"FGOM\00"
@global_var_1614c.439 = constant [6 x i8] c"CPPKQ\00"
@global_var_16154.441 = constant [8 x i8] c"nKLIQ[Q\00"
@global_var_1615c.443 = constant [7 x i8] c"ANKGLV\00"
@global_var_16164.445 = constant [6 x i8] c"AKQAM\00"
@global_var_1616c.447 = constant [6 x i8] c"akqam\00"
@global_var_16174.449 = constant [6 x i8] c"QWRGP\00"
@global_var_1617c.451 = constant [5 x i8] c"QWPV\00"
@global_var_16184.453 = constant i32 370611221
@global_var_15f18.455 = constant [5 x i8] c"CFQN\00"
@global_var_1618c.457 = constant i32 1313949251
@global_var_16198.459 = constant [7 x i8] c"RCVPMN\00"
@global_var_161a0.461 = constant i32 387007823
@global_var_161a8.463 = constant [7 x i8] c"OGPNKL\00"
@global_var_161b0.465 = constant [9 x i8] c"LGVCFOKL\00"
@global_var_161bc.467 = constant [9 x i8] c"JGUNRCAI\00"
@global_var_161c8.469 = constant [7 x i8] c"lGVkaQ\00"
@global_var_161d0.471 = constant i32 1179729984
@global_var_161dc.473 = constant [5 x i8] c"lwnn\00"
@global_var_161e4.475 = constant [9 x i8] c"CFOKLVVF\00"
@global_var_161f0.477 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_161fc.479 = constant [9 x i8] c"rNAOqRkR\00"
@global_var_16208.481 = constant i32 269488144
@global_var_16214.483 = constant [9 x i8] c"QGAWPKV[\00"
@global_var_16220.485 = constant [9 x i8] c"OMWLVQ[Q\00"
@global_var_1622c.487 = constant [8 x i8] c"OGOMVGA\00"
@global_var_16234.489 = constant i32 1464562030
@global_var_16244.491 = constant i32 2003334929
@global_var_16254.493 = constant [10 x i8] c"OWQGCFOKL\00"
@global_var_16260.495 = constant i32 1196513135
@global_var_1626c.497 = constant [10 x i8] c"QVMPUCVAJ\00"
@global_var_16278.499 = constant [11 x i8] c"QRGAKCNKQV\00"
@global_var_16284.501 = constant [10 x i8] c"CFOKLRNFV\00"
@global_var_16290.503 = constant [10 x i8] c"RNFVCFOKL\00"
@global_var_1629c.505 = constant i32 1279478337
@global_var_162a8.507 = constant [13 x i8] c"VGNGAMOCFOKL\00"
@global_var_162b8.509 = constant [13 x i8] c"CFOKLVGNGAMO\00"
@global_var_162c8.511 = constant [7 x i8] c"EWGQV\22\00"
@global_var_162d0.513 = constant i32 336675162
@global_var_162d8.515 = constant [9 x i8] c"FGDCWNV\22\00"
@global_var_162e4.517 = constant [8 x i8] c"CLVQNS\22\00"
@global_var_162ec.519 = constant [12 x i8] c"QWRGPTKQMP\22\00"
@global_var_162f8.521 = constant i32 1178819416
@global_var_16304.523 = constant [6 x i8] c"PMMV\22\00"
@global_var_1f1cc.524 = local_unnamed_addr global i32 0
@global_var_1f1ca.526 = local_unnamed_addr global i32 0
@global_var_1f1cb.527 = local_unnamed_addr global i32 0
@global_var_1f1e4.530 = local_unnamed_addr global i32 0
@global_var_1f1e5.531 = local_unnamed_addr global i32 0
@global_var_16313.543 = constant i32 2096127
@global_var_1630a.545 = constant i32 2095871
@global_var_1f260.549 = global i32 0
@global_var_1f030.552 = global i32 1043935
@global_var_16318.557 = constant i32 39228
@global_var_1f268.558 = local_unnamed_addr global i32 0
@global_var_1f26c.559 = local_unnamed_addr global i32 0
@global_var_1f26d.560 = local_unnamed_addr global i32 0
@global_var_1631c.562 = constant i32 55430
@global_var_1f270.563 = local_unnamed_addr global i32 0
@global_var_1f274.564 = local_unnamed_addr global i32 0
@global_var_1f275.565 = local_unnamed_addr global i32 0
@global_var_16320.567 = constant [20 x i8] c"jT^VXYsTZZXOnQ\5CDXO=\00"
@global_var_1f27c.568 = local_unnamed_addr global i32 0
@global_var_1f278.569 = local_unnamed_addr global i32 0
@global_var_1f27d.570 = local_unnamed_addr global i32 0
@global_var_16334.572 = constant i32 1380928786
@global_var_1f280.573 = local_unnamed_addr global i32 0
@global_var_1f284.574 = local_unnamed_addr global i32 0
@global_var_1f285.575 = local_unnamed_addr global i32 0
@global_var_1633c.577 = constant i32 1480939538
@global_var_1f28c.578 = local_unnamed_addr global i32 0
@global_var_1f288.579 = local_unnamed_addr global i32 0
@global_var_1f28d.580 = local_unnamed_addr global i32 0
@global_var_16344.582 = constant i32 1029266194
@global_var_1f294.583 = local_unnamed_addr global i32 0
@global_var_1f290.584 = local_unnamed_addr global i32 0
@global_var_1f295.585 = local_unnamed_addr global i32 0
@global_var_1634c.587 = constant i32 1380928786
@global_var_1f298.588 = local_unnamed_addr global i32 0
@global_var_1f29c.589 = local_unnamed_addr global i32 0
@global_var_1f29d.590 = local_unnamed_addr global i32 0
@global_var_1635c.592 = constant i32 1297895442
@global_var_1f2a0.593 = local_unnamed_addr global i32 0
@global_var_1f2a4.594 = local_unnamed_addr global i32 0
@global_var_1f2a5.595 = local_unnamed_addr global i32 0
@global_var_16364.597 = constant i32 1548307986
@global_var_1f2a8.598 = local_unnamed_addr global i32 0
@global_var_1f2ac.599 = local_unnamed_addr global i32 0
@global_var_1f2ad.600 = local_unnamed_addr global i32 0
@global_var_16370.602 = constant i32 1414749203
@global_var_1f2b0.603 = local_unnamed_addr global i32 0
@global_var_1f2b4.604 = local_unnamed_addr global i32 0
@global_var_1f2b5.605 = local_unnamed_addr global i32 0
@global_var_16378.607 = constant i32 1380928786
@global_var_1f2bc.608 = local_unnamed_addr global i32 0
@global_var_1f2b8.609 = local_unnamed_addr global i32 0
@global_var_1f2bd.610 = local_unnamed_addr global i32 0
@global_var_1638c.612 = constant i32 1380928786
@global_var_1f2c0.613 = local_unnamed_addr global i32 0
@global_var_1f2c4.614 = local_unnamed_addr global i32 0
@global_var_1f2c5.615 = local_unnamed_addr global i32 0
@global_var_1639c.617 = constant i32 1920627327
@global_var_1f2c8.618 = local_unnamed_addr global i32 0
@global_var_1f2cc.619 = local_unnamed_addr global i32 0
@global_var_1f2cd.620 = local_unnamed_addr global i32 0
@global_var_163a8.622 = constant i32 1581864978
@global_var_1f2d4.623 = local_unnamed_addr global i32 0
@global_var_1f2d0.624 = local_unnamed_addr global i32 0
@global_var_1f2d5.625 = local_unnamed_addr global i32 0
@global_var_163bc.627 = constant i32 1599867994
@global_var_1f2dc.628 = local_unnamed_addr global i32 0
@global_var_1f2d8.629 = local_unnamed_addr global i32 0
@global_var_1f2dd.630 = local_unnamed_addr global i32 0
@global_var_163d4.632 = constant [9 x i8] c"\5CNNJROY=\00"
@global_var_1f2e0.633 = local_unnamed_addr global i32 0
@global_var_1f2e4.634 = local_unnamed_addr global i32 0
@global_var_1f2e5.635 = local_unnamed_addr global i32 0
@global_var_163e0.637 = constant i32 1264081170
@global_var_1f2e8.638 = local_unnamed_addr global i32 0
@global_var_1f2ec.639 = local_unnamed_addr global i32 0
@global_var_1f2ed.640 = local_unnamed_addr global i32 0
@global_var_163f0.642 = constant i32 1264081170
@global_var_1f2f4.643 = local_unnamed_addr global i32 0
@global_var_1f2f0.644 = local_unnamed_addr global i32 0
@global_var_1f2f5.645 = local_unnamed_addr global i32 0
@global_var_16404.647 = constant i32 1264081170
@global_var_1f2fc.648 = local_unnamed_addr global i32 0
@global_var_1f2f8.649 = local_unnamed_addr global i32 0
@global_var_1f2fd.650 = local_unnamed_addr global i32 0
@global_var_1641c.652 = constant i32 1264081170
@global_var_1f300.653 = local_unnamed_addr global i32 0
@global_var_1f304.654 = local_unnamed_addr global i32 0
@global_var_1f305.655 = local_unnamed_addr global i32 0
@global_var_16438.657 = constant i32 1264081170
@global_var_1f30c.658 = local_unnamed_addr global i32 0
@global_var_1f308.659 = local_unnamed_addr global i32 0
@global_var_1f30d.660 = local_unnamed_addr global i32 0
@global_var_16448.662 = constant [7 x i8] c"NUXQQ=\00"
@global_var_1f310.663 = local_unnamed_addr global i32 0
@global_var_1f314.664 = local_unnamed_addr global i32 0
@global_var_1f315.665 = local_unnamed_addr global i32 0
@global_var_16450.667 = constant [8 x i8] c"XS\5C_QX=\00"
@global_var_1f318.668 = local_unnamed_addr global i32 0
@global_var_1f31c.669 = local_unnamed_addr global i32 0
@global_var_1f31d.670 = local_unnamed_addr global i32 0
@global_var_16458.672 = constant [8 x i8] c"NDNIXP=\00"
@global_var_1f320.673 = local_unnamed_addr global i32 0
@global_var_1f324.674 = local_unnamed_addr global i32 0
@global_var_1f325.675 = local_unnamed_addr global i32 0
@global_var_16460.677 = constant [4 x i8] c"NU=\00"
@global_var_1f32c.678 = local_unnamed_addr global i32 0
@global_var_1f328.679 = local_unnamed_addr global i32 0
@global_var_1f32d.680 = local_unnamed_addr global i32 0
@global_var_16464.682 = constant i32 1398038290
@global_var_1f330.683 = local_unnamed_addr global i32 0
@global_var_1f334.684 = local_unnamed_addr global i32 0
@global_var_1f335.685 = local_unnamed_addr global i32 0
@global_var_16480.687 = constant i32 1449022538
@global_var_1f33c.688 = local_unnamed_addr global i32 0
@global_var_1f338.689 = local_unnamed_addr global i32 0
@global_var_1f33d.690 = local_unnamed_addr global i32 0
@global_var_164a0.692 = constant [10 x i8] c"S^ROOX^I=\00"
@global_var_1f340.693 = local_unnamed_addr global i32 0
@global_var_1f344.694 = local_unnamed_addr global i32 0
@global_var_1f345.695 = local_unnamed_addr global i32 0
@global_var_1f348.696 = local_unnamed_addr global i32 0
@global_var_1f34c.697 = local_unnamed_addr global i32 0
@global_var_1f34d.698 = local_unnamed_addr global i32 0
@global_var_164ac.700 = constant [6 x i8] c"RZTS=\00"
@global_var_1f354.701 = local_unnamed_addr global i32 0
@global_var_1f350.702 = local_unnamed_addr global i32 0
@global_var_1f355.703 = local_unnamed_addr global i32 0
@global_var_164b4.705 = constant [7 x i8] c"XSIXO=\00"
@global_var_1f358.706 = local_unnamed_addr global i32 0
@global_var_1f35c.707 = local_unnamed_addr global i32 0
@global_var_1f35d.708 = local_unnamed_addr global i32 0
@global_var_164bc.710 = constant i32 1213361769
@global_var_1f360.711 = local_unnamed_addr global i32 0
@global_var_1f364.712 = local_unnamed_addr global i32 0
@global_var_1f365.713 = local_unnamed_addr global i32 0
@global_var_164d4.715 = constant i32 1581864978
@global_var_1f36c.716 = local_unnamed_addr global i32 0
@global_var_1f368.717 = local_unnamed_addr global i32 0
@global_var_1f36d.718 = local_unnamed_addr global i32 0
@global_var_164e8.720 = constant [12 x i8] c"S\5CPXNXOKXO=\00"
@global_var_1f370.721 = local_unnamed_addr global i32 0
@global_var_1f374.722 = local_unnamed_addr global i32 0
@global_var_1f375.723 = local_unnamed_addr global i32 0
@global_var_164f4.725 = constant i32 1397969534
@global_var_1f37c.726 = local_unnamed_addr global i32 0
@global_var_1f378.727 = local_unnamed_addr global i32 0
@global_var_1f37d.728 = local_unnamed_addr global i32 0
@global_var_16848.730 = constant i32 1482579580
@global_var_1f384.731 = local_unnamed_addr global i32 0
@global_var_1f380.732 = local_unnamed_addr global i32 0
@global_var_1f385.733 = local_unnamed_addr global i32 0
@global_var_1689c.735 = constant i32 1482579580
@global_var_1f38c.736 = local_unnamed_addr global i32 0
@global_var_1f388.737 = local_unnamed_addr global i32 0
@global_var_1f38d.738 = local_unnamed_addr global i32 0
@global_var_1650c.740 = constant i32 1230197374
@global_var_1f394.741 = local_unnamed_addr global i32 0
@global_var_1f390.742 = local_unnamed_addr global i32 0
@global_var_1f395.743 = local_unnamed_addr global i32 0
@global_var_16540.745 = constant i32 2118735950
@global_var_1f398.746 = local_unnamed_addr global i32 0
@global_var_1f39c.747 = local_unnamed_addr global i32 0
@global_var_1f39d.748 = local_unnamed_addr global i32 0
@global_var_16550.750 = constant i32 1331386447
@global_var_1f3a0.751 = local_unnamed_addr global i32 0
@global_var_1f3a4.752 = local_unnamed_addr global i32 0
@global_var_1f3a5.753 = local_unnamed_addr global i32 0
@global_var_1655c.755 = constant i32 1549685329
@global_var_1f3ac.756 = local_unnamed_addr global i32 0
@global_var_1f3a8.757 = local_unnamed_addr global i32 0
@global_var_1f3ad.758 = local_unnamed_addr global i32 0
@global_var_16568.760 = constant i32 273242190
@global_var_1f3b0.761 = local_unnamed_addr global i32 0
@global_var_1f3b4.762 = local_unnamed_addr global i32 0
@global_var_1f3b5.763 = local_unnamed_addr global i32 0
@global_var_16578.765 = constant i32 1230197342
@global_var_1f3bc.766 = local_unnamed_addr global i32 0
@global_var_1f3b8.767 = local_unnamed_addr global i32 0
@global_var_1f3bd.768 = local_unnamed_addr global i32 0
@global_var_1658c.770 = constant i32 1398558537
@global_var_1f3c4.771 = local_unnamed_addr global i32 0
@global_var_1f3c0.772 = local_unnamed_addr global i32 0
@global_var_1f3c5.773 = local_unnamed_addr global i32 0
@global_var_165a0.775 = constant [9 x i8] c"^UHSVXY=\00"
@global_var_1f3c8.776 = local_unnamed_addr global i32 0
@global_var_1f3cc.777 = local_unnamed_addr global i32 0
@global_var_1f3cd.778 = local_unnamed_addr global i32 0
@global_var_16500.780 = constant i32 1297635414
@global_var_1f3d0.781 = local_unnamed_addr global i32 0
@global_var_1f3d4.782 = local_unnamed_addr global i32 0
@global_var_1f3d5.783 = local_unnamed_addr global i32 0
@global_var_165ac.785 = constant i32 1397969502
@global_var_1f3d8.786 = local_unnamed_addr global i32 0
@global_var_1f3dc.787 = local_unnamed_addr global i32 0
@global_var_1f3dd.788 = local_unnamed_addr global i32 0
@global_var_165bc.790 = constant i32 1263491150
@global_var_1f3e4.791 = local_unnamed_addr global i32 0
@global_var_1f3e0.792 = local_unnamed_addr global i32 0
@global_var_1f3e5.793 = local_unnamed_addr global i32 0
@global_var_165d0.795 = constant i32 1263491150
@global_var_1f3ec.796 = local_unnamed_addr global i32 0
@global_var_1f3e8.797 = local_unnamed_addr global i32 0
@global_var_1f3ed.798 = local_unnamed_addr global i32 0
@global_var_165ec.800 = constant i32 1413960304
@global_var_1f3f0.801 = local_unnamed_addr global i32 0
@global_var_1f3f4.802 = local_unnamed_addr global i32 0
@global_var_1f3f5.803 = local_unnamed_addr global i32 0
@global_var_16660.805 = constant i32 1413960304
@global_var_1f3f8.806 = local_unnamed_addr global i32 0
@global_var_1f3fc.807 = local_unnamed_addr global i32 0
@global_var_1f3fd.808 = local_unnamed_addr global i32 0
@global_var_166d4.810 = constant i32 1413960304
@global_var_1f404.811 = local_unnamed_addr global i32 0
@global_var_1f400.812 = local_unnamed_addr global i32 0
@global_var_1f405.813 = local_unnamed_addr global i32 0
@global_var_16724.815 = constant i32 1413960304
@global_var_1f408.816 = local_unnamed_addr global i32 0
@global_var_1f40c.817 = local_unnamed_addr global i32 0
@global_var_1f40d.818 = local_unnamed_addr global i32 0
@global_var_16798.820 = constant i32 1413960304
@global_var_1f414.821 = local_unnamed_addr global i32 0
@global_var_1f410.822 = local_unnamed_addr global i32 0
@global_var_1f415.823 = local_unnamed_addr global i32 0
@global_var_1680c.825 = constant i32 1264081170
@global_var_1f418.826 = local_unnamed_addr global i32 0
@global_var_1f41c.827 = local_unnamed_addr global i32 0
@global_var_1f41d.828 = local_unnamed_addr global i32 0
@global_var_1f424.829 = local_unnamed_addr global i32 0
@global_var_1f420.830 = local_unnamed_addr global i32 0
@global_var_1f425.831 = local_unnamed_addr global i32 0
@global_var_16824.833 = constant i32 1208552964
@global_var_1f428.834 = local_unnamed_addr global i32 0
@global_var_1f42c.835 = local_unnamed_addr global i32 0
@global_var_1f42d.836 = local_unnamed_addr global i32 0
@global_var_1683c.838 = constant [12 x i8] c"YKOnI\5COIHM=\00"
@global_var_1f435.839 = local_unnamed_addr global i32 0
@global_var_1f430.840 = local_unnamed_addr global i32 0
@global_var_1f434.841 = local_unnamed_addr global i32 0
@global_var_14a5c.844 = constant i32 -476053504
@global_var_13994.848 = constant i32 -443219956
@global_var_13b00.853 = constant i32 -376111092
@global_var_1f22c.856 = global i32 0
@global_var_13c7c.858 = constant i32 -456978431
@global_var_1f438.860 = global i32 0
@global_var_1f1f4.862 = global i32 0
@global_var_1f130.865 = global i32 256
@global_var_1f034.866 = global i32* @global_var_1f130.865
@global_var_1f21c.869 = global i32 0
@global_var_1f4b8.871 = global i32 0
@global_var_15210.872 = constant i32 -382910416
@global_var_13c00.873 = constant i32 -509595648
@global_var_142a0.880 = constant i32 -442564520
@global_var_1f13c.886 = global i32 0
@global_var_1386c.888 = constant i32 -481230848
@global_var_1f20c.890 = global i32 0
@global_var_14e60.892 = constant i32 -509587456
@global_var_1f154.895 = global i32 0
@global_var_1f210.899 = local_unnamed_addr global i32 0
@global_var_14814.901 = constant i32 -352321419
@global_var_1f000.905 = global i32 -1
@global_var_1f220.908 = global i32 0
@global_var_1f224.910 = local_unnamed_addr global i32 0
@global_var_14a48.911 = constant i32 -390234096
@global_var_168c0.913 = constant [10 x i8] c"/dev/null\00"
@global_var_1f228.915 = global i32 0
@global_var_1f214.920 = local_unnamed_addr global i32 0
@global_var_1f218.922 = global i32 0
@global_var_13be0.924 = constant i32 -369097054
@global_var_1f16c = external local_unnamed_addr global i32
@global_var_169cc.930 = constant i32 33554944
@global_var_13b98.935 = constant i32 -442564608
@global_var_14d10.937 = constant i32 -335544664
@global_var_14e2c.940 = constant i32 -275775369
@global_var_155a4.941 = constant i32 -382910352
@global_var_1f234.943 = global i32 0
@global_var_1f174.945 = global i32* @global_var_169cc.930
@global_var_1f4d0.947 = global i32 0
@global_var_1f4d4.949 = global i32 0
@global_var_1f004.952 = global i32 0
@global_var_1f178.3 = external global i8*
@global_var_1f194.57 = external global i8*
@global_var_1f195.64 = global i8 0
@global_var_1f240.107 = external global i8*
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1f02c.115 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1f1a8.132 = external global i8*
@global_var_1f1ec.162 = external global i8*
@global_var_1f1ed.163 = local_unnamed_addr global i8 0
@global_var_1f1c0.172 = external global i8*
@global_var_1f1e0.176 = local_unnamed_addr global i8 0
@global_var_1f1e1.184 = local_unnamed_addr global i8 0
@global_var_1f1d8.529 = local_unnamed_addr global i8 0
@global_var_1f1d0.525 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_15c64(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1f178.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1f178.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1f01c.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1f01c.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1f01c.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1f01c.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1f178.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1f01c.6, { 1, 0 }
  uselistorder i8** @global_var_1f178.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 126992 to i32*), align 16
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 126992

bb2:                                              ; preds = %.thread
  ret i32 126992

; uselistorder directives
  uselistorder i32 126992, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_14afc(i32 ptrtoint (i32* @global_var_f128.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 89248, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_14670()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_81cc = load i32, i32* @r4, align 4
  store i32 %v3_81cc, i32* %stack_var_-36, align 4
  %v6_81cc = load i32, i32* @r5, align 4
  %v9_81cc = load i32, i32* @r6, align 4
  %v15_81cc = load i32, i32* @r8, align 4
  %v1_81d8 = urem i32 %arg3, 256
  store i32 %v1_81d8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_81e4 = urem i32 %arg1, 256
  store i32 %v1_81e4, i32* %ip.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_81d8, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8200 = inttoptr i32 %arg4 to i32*
  %v6_8200 = call i32 @function_9f84(i32 %v1_81d8, i32* %v5_8200, i32 20, i32 0, i32 %arg2)
  %v0_8204 = load i32, i32* @r5, align 4
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_8210 = load i32, i32* @r4, align 4
  store i32 %v0_8210, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15cf4.21 to i32), i32* %r3.global-to-local, align 4
  %v6_8218 = inttoptr i32 %v0_8204 to i32*
  %v7_8218 = call i32 @function_9f84(i32 %v0_8210, i32* %v6_8218, i32 19, i32 ptrtoint ([4 x i8]* @global_var_15cf4.21 to i32), i32 %v6_8200)
  %v0_821c = load i32, i32* @r5, align 4
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_8218, i32* %fp.global-to-local, align 4
  %v0_822c = load i32, i32* @r4, align 4
  store i32 %v0_822c, i32* %r0.global-to-local, align 4
  %v5_8230 = inttoptr i32 %v0_821c to i32*
  %v6_8230 = call i32 @function_9f84(i32 %v0_822c, i32* %v5_8230, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8234 = load i32, i32* @r5, align 4
  store i32 %v0_8234, i32* %r1.global-to-local, align 4
  store i32 %v6_8230, i32* %sb.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  %v0_8240 = load i32, i32* @r4, align 4
  store i32 %v0_8240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cf8.23 to i32), i32* %r3.global-to-local, align 4
  %v5_8248 = inttoptr i32 %v0_8234 to i32*
  %v6_8248 = call i32 @function_9f84(i32 %v0_8240, i32* %v5_8248, i32 21, i32 ptrtoint (i32* @global_var_15cf8.23 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_824c = load i32, i32* @r5, align 4
  store i32 %v0_824c, i32* %r1.global-to-local, align 4
  store i32 %v6_8248, i32* @sl, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v0_8258 = load i32, i32* @r4, align 4
  store i32 %v0_8258, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8260 = inttoptr i32 %v0_824c to i32*
  %v5_8260 = call i32 @function_a054(i32 %v0_8258, i32* %v4_8260, i32 23, i32 1)
  %v0_8264 = load i32, i32* @r5, align 4
  store i32 %v0_8264, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8260, i32* @r6, align 4
  %v0_8274 = load i32, i32* @r4, align 4
  store i32 %v0_8274, i32* %r0.global-to-local, align 4
  %v4_8278 = inttoptr i32 %v0_8264 to i32*
  %v5_8278 = call i32 @function_a054(i32 %v0_8274, i32* %v4_8278, i32 7, i32 80)
  %v2_8280 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8288 = mul i32 %v5_8278, 65536
  store i32 %v3_8288, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_829c = urem i32 %v5_8278, 65536
  store i32 %v3_829c, i32* %r8.global-to-local, align 4
  %v3_82a0 = call i32 @function_13c00(i8* %tmp199, i32 0)
  store i32 %v3_82a0, i32* %r0.global-to-local, align 4
  %v0_82a4 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_82a4 = icmp slt i32 %v0_82a4, 0
  store i1 %v1_82a4, i1* %cpsr_n.global-to-local, align 1
  %v2_82a4 = icmp eq i32 %v0_82a4, 0
  store i1 %v2_82a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_82a4, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_81cc
  %v1_82a8 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_82a8 = icmp slt i32 %v1_82a8, 0
  store i1 %v2_82a8, i1* %cpsr_n.global-to-local, align 1
  %v3_82a8 = icmp eq i32 %v1_82a8, 0
  store i1 %v3_82a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_82a8, label %bb200, label %dec_label_pc_82c4

.thread13:                                        ; preds = %dec_label_pc_81cc
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %bb200, %dec_label_pc_82e4, %.thread13, %dec_label_pc_82d4, %dec_label_pc_82c4
  %v29_82c0 = phi i32 [ %v2_82e8, %dec_label_pc_82e4 ], [ %v3_82a0, %.thread13 ], [ %v3_82a0, %bb200 ], [ %v2_82d8, %dec_label_pc_82d4 ], [ %v2_82c8, %dec_label_pc_82c4 ]
  %v2_82c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_82c0, i32* %r4.global-to-local, align 4
  store i32 %v6_81cc, i32* %r5.global-to-local, align 4
  store i32 %v9_81cc, i32* %r6.global-to-local, align 4
  store i32 %v15_81cc, i32* %r8.global-to-local, align 4
  ret i32 %v29_82c0

dec_label_pc_82c4:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82c8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82c8 = call i32 @function_12c5c(i8* %v1_82c8)
  store i32 %v2_82c8, i32* %r0.global-to-local, align 4
  %v1_82cc = add i32 %v2_82c8, -255
  %v2_82cc = icmp ugt i32 %v2_82c8, 254
  store i1 %v2_82cc, i1* %cpsr_c.global-to-local, align 1
  %v3_82cc = sub i32 254, %v2_82c8
  %v4_82cc = and i32 %v3_82cc, %v2_82c8
  %v5_82cc = icmp slt i32 %v4_82cc, 0
  store i1 %v5_82cc, i1* %cpsr_v.global-to-local, align 1
  %v6_82cc = icmp slt i32 %v1_82cc, 0
  store i1 %v6_82cc, i1* %cpsr_n.global-to-local, align 1
  %v7_82cc = icmp eq i32 %v2_82c8, 255
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  %v8_82d0 = icmp sgt i32 %v2_82c8, 255
  br i1 %v8_82d0, label %dec_label_pc_82b8, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82c4
  %v0_82d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_82d4, i32* %r0.global-to-local, align 4
  %v1_82d8 = inttoptr i32 %v0_82d4 to i8*
  %v2_82d8 = call i32 @function_12c5c(i8* %v1_82d8)
  store i32 %v2_82d8, i32* %r0.global-to-local, align 4
  %v1_82dc = add i32 %v2_82d8, -127
  %v2_82dc = icmp ugt i32 %v2_82d8, 126
  store i1 %v2_82dc, i1* %cpsr_c.global-to-local, align 1
  %v3_82dc = sub i32 126, %v2_82d8
  %v4_82dc = and i32 %v3_82dc, %v2_82d8
  %v5_82dc = icmp slt i32 %v4_82dc, 0
  store i1 %v5_82dc, i1* %cpsr_v.global-to-local, align 1
  %v6_82dc = icmp slt i32 %v1_82dc, 0
  store i1 %v6_82dc, i1* %cpsr_n.global-to-local, align 1
  %v7_82dc = icmp eq i32 %v2_82d8, 127
  store i1 %v7_82dc, i1* %cpsr_z.global-to-local, align 1
  %v8_82e0 = icmp sgt i32 %v2_82d8, 127
  br i1 %v8_82e0, label %dec_label_pc_82b8, label %dec_label_pc_82e4

dec_label_pc_82e4:                                ; preds = %dec_label_pc_82d4
  %v0_82e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82e4, i32* %r0.global-to-local, align 4
  %v1_82e8 = inttoptr i32 %v0_82e4 to i8*
  %v2_82e8 = call i32 @function_12c5c(i8* %v1_82e8)
  store i32 %v2_82e8, i32* %r0.global-to-local, align 4
  %v1_82ec = add i32 %v2_82e8, -9
  %v2_82ec = icmp ugt i32 %v2_82e8, 8
  store i1 %v2_82ec, i1* %cpsr_c.global-to-local, align 1
  %v3_82ec = sub i32 8, %v2_82e8
  %v4_82ec = and i32 %v3_82ec, %v2_82e8
  %v5_82ec = icmp slt i32 %v4_82ec, 0
  store i1 %v5_82ec, i1* %cpsr_v.global-to-local, align 1
  %v6_82ec = icmp slt i32 %v1_82ec, 0
  store i1 %v6_82ec, i1* %cpsr_n.global-to-local, align 1
  %v7_82ec = icmp eq i32 %v2_82e8, 9
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  %v7_82f0 = icmp sgt i32 %v2_82e8, 9
  br i1 %v7_82f0, label %dec_label_pc_82b8, label %bb201

bb201:                                            ; preds = %dec_label_pc_82e4
  %v10_82f0 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v8_82f4 = load i32, i32* @r4, align 4
  %v10_82f4 = add i32 %v10_82f0, 364
  %v11_82f4 = inttoptr i32 %v10_82f4 to i32*
  store i32 %v8_82f4, i32* %v11_82f4, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %bb201, %bb205
  %v0_82fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82fc, i32* %r0.global-to-local, align 4
  %v1_8300 = inttoptr i32 %v0_82fc to i8*
  %v2_8300 = call i32 @function_12c5c(i8* %v1_8300)
  store i32 %v2_8300, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_8308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8308, i32* %ip.global-to-local, align 4
  %v2_830c = sub i32 %v2_8300, %v3_8308
  %v3_830c = icmp uge i32 %v2_8300, %v3_8308
  store i1 %v3_830c, i1* %cpsr_c.global-to-local, align 1
  %v4_830c = xor i32 %v3_8308, %v2_8300
  %v5_830c = xor i32 %v2_830c, %v2_8300
  %v6_830c = and i32 %v5_830c, %v4_830c
  %v7_830c = icmp slt i32 %v6_830c, 0
  store i1 %v7_830c, i1* %cpsr_v.global-to-local, align 1
  %v8_830c = icmp slt i32 %v2_830c, 0
  store i1 %v8_830c, i1* %cpsr_n.global-to-local, align 1
  %v9_830c = icmp eq i32 %v2_8300, %v3_8308
  store i1 %v9_830c, i1* %cpsr_z.global-to-local, align 1
  %v7_8310 = icmp sgt i32 %v2_8300, %v3_8308
  br i1 %v7_8310, label %dec_label_pc_8314, label %dec_label_pc_8340

dec_label_pc_8314:                                ; preds = %dec_label_pc_82fc
  %v0_8314 = load i32, i32* %fp.global-to-local, align 4
  %v2_8314 = add i32 %v0_8314, %v3_8308
  %v3_8314 = inttoptr i32 %v2_8314 to i8*
  %v4_8314 = load i8, i8* %v3_8314, align 1
  %v6_8314 = zext i8 %v4_8314 to i32
  %v1_8318 = add nsw i32 %v6_8314, -32
  store i32 %v1_8318, i32* %r2.global-to-local, align 4
  %v1_831c = add nsw i32 %v6_8314, -97
  store i32 %v1_831c, i32* %r3.global-to-local, align 4
  %v2_8320 = icmp ugt i32 %v1_831c, 24
  store i1 %v2_8320, i1* %cpsr_c.global-to-local, align 1
  %v3_8320 = sub nsw i32 121, %v6_8314
  %v4_8320 = and i32 %v3_8320, %v1_831c
  %v5_8320 = icmp slt i32 %v4_8320, 0
  store i1 %v5_8320, i1* %cpsr_v.global-to-local, align 1
  %v6_8320 = icmp ult i8 %v4_8314, 122
  store i1 %v6_8320, i1* %cpsr_n.global-to-local, align 1
  %v7_8320 = icmp eq i32 %v1_831c, 25
  store i1 %v7_8320, i1* %cpsr_z.global-to-local, align 1
  %v2_8324 = xor i1 %v2_8320, true
  %v3_8324 = or i1 %v7_8320, %v2_8324
  br i1 %v3_8324, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_8314
  %v5_8324 = trunc i32 %v1_8318 to i8
  store i8 %v5_8324, i8* %v3_8314, align 1
  %v0_8328.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8328.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_8314, %bb202
  %v1_832c = phi i1 [ %v2_8320, %dec_label_pc_8314 ], [ %v1_8328.pre, %bb202 ]
  %v0_832c = phi i1 [ false, %dec_label_pc_8314 ], [ %v0_8328.pre, %bb202 ]
  %v2_8328 = xor i1 %v1_832c, true
  %v3_8328 = or i1 %v0_832c, %v2_8328
  br i1 %v3_8328, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_8334.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v7_832c = load i32, i32* %v11_82f4, align 4
  store i32 %v7_832c, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_8334 = phi i32 [ %v0_8334.pre, %._crit_edge ], [ %v7_832c, %bb204 ]
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v1_8334 = add i32 %v0_8334, 1
  store i32 %v1_8334, i32* %ip.global-to-local, align 4
  store i32 %v1_8334, i32* %stack_var_-40, align 4
  br label %dec_label_pc_82fc

dec_label_pc_8340:                                ; preds = %dec_label_pc_82fc
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_121f4(i32 39)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_121f4(i32 40)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8354 = call i32 @function_121f4(i32 41)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_835c = call i32 @function_121f4(i32 42)
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_8364 = call i32 @function_121f4(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_836c = call i32 @function_121f4(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_8374 = call i32 @function_121f4(i32 45)
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_837c = call i32 @function_121f4(i32 46)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_8384 = call i32 @function_121f4(i32 47)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_838c = call i32 @function_121f4(i32 48)
  store i32 %v1_838c, i32* %r0.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v2_8390 = add i32 %v0_8390, -512
  %v3_8390 = icmp ugt i32 %v0_8390, 511
  store i1 %v3_8390, i1* %cpsr_c.global-to-local, align 1
  %v4_8390 = sub i32 511, %v0_8390
  %v5_8390 = and i32 %v4_8390, %v0_8390
  %v6_8390 = icmp slt i32 %v5_8390, 0
  store i1 %v6_8390, i1* %cpsr_v.global-to-local, align 1
  %v7_8390 = icmp slt i32 %v2_8390, 0
  store i1 %v7_8390, i1* %cpsr_n.global-to-local, align 1
  %v8_8390 = icmp eq i32 %v0_8390, 512
  store i1 %v8_8390, i1* %cpsr_z.global-to-local, align 1
  %v5_8394 = icmp slt i32 %v0_8390, 512
  br i1 %v5_8394, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_8340
  store i32 512, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8340, %bb206
  %v0_839c = phi i32 [ 512, %bb206 ], [ %v0_8390, %dec_label_pc_8340 ]
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_83a0 = call i32 @function_121f4(i32 49)
  store i32 %v0_839c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_83b0 = call i32 @function_141c8(i32 %v0_839c, i32 3140)
  store i32 %v2_83b0, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_83b8 = icmp slt i32 %v0_839c, 0
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  %v2_83b8 = icmp eq i32 %v0_839c, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83b0, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_839c, 1
  br i1 %tmp207, label %dec_label_pc_84f4, label %dec_label_pc_83c8

dec_label_pc_83c8:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_83cc

dec_label_pc_83cc:                                ; preds = %dec_label_pc_9e70, %dec_label_pc_83c8
  %v1_83d8 = phi i32 [ %v1_9e8c, %dec_label_pc_9e70 ], [ %v2_83b0, %dec_label_pc_83c8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_81e4, i32* %r1.global-to-local, align 4
  %v2_83d8 = inttoptr i32 %v1_83d8 to i32*
  store i32 -1, i32* %v2_83d8, align 4
  %v3_83dc = load i32, i32* @r5, align 4
  %v4_83dc = add i32 %v3_83dc, 4
  %v5_83dc = inttoptr i32 %v4_83dc to i8*
  store i8 0, i8* %v5_83dc, align 1
  %v0_83e0 = load i32, i32* @r7, align 4
  store i32 %v0_83e0, i32* %r0.global-to-local, align 4
  %v5_83e4 = call i32 @function_13444(i32 %v0_83e0, i32 %v1_81e4, i32 -1, i32 0)
  store i32 %v5_83e4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_83f0 = and i32 %v5_83e4, 536870912
  %v3_83f0 = icmp ne i32 %v2_83f0, 0
  store i1 %v3_83f0, i1* %cpsr_c.global-to-local, align 1
  %v5_83f0 = mul i32 %v5_83e4, 24
  store i32 %v5_83f0, i32* %r3.global-to-local, align 4
  %v2_83f4 = add i32 %v5_83f0, %arg2
  store i32 %v2_83f4, i32* @r6, align 4
  %v1_83f8 = add i32 %v2_83f4, 16
  %v2_83f8 = inttoptr i32 %v1_83f8 to i32*
  %v3_83f8 = load i32, i32* %v2_83f8, align 4
  store i32 %v3_83f8, i32* %r2.global-to-local, align 4
  %v0_83fc = load i32, i32* @r5, align 4
  %v1_83fc = add i32 %v0_83fc, 532
  store i32 %v1_83fc, i32* @lr, align 4
  store i32 %v1_83fc, i32* @r0, align 4
  %v0_8404 = load i32, i32* @sl, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v2_8408 = add i32 %v0_83fc, 16
  %v3_8408 = inttoptr i32 %v2_8408 to i32*
  store i32 %v3_83f8, i32* %v3_8408, align 4
  %v0_840c = load i32, i32* @lr, align 4
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @function_12c84(i8* %v2_8410, i32 %v0_8404)
  store i32 %v3_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @r5, align 4
  %v1_8414 = add i32 %v0_8414, 532
  %v2_8414 = inttoptr i32 %v1_8414 to i8*
  %v3_8414 = load i8, i8* %v2_8414, align 1
  %v4_8414 = zext i8 %v3_8414 to i32
  store i32 %v4_8414, i32* %r3.global-to-local, align 4
  %v2_8418 = icmp ugt i8 %v3_8414, 46
  store i1 %v2_8418, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8418 = icmp ult i8 %v3_8414, 47
  store i1 %v6_8418, i1* %cpsr_n.global-to-local, align 1
  %v7_8418 = icmp eq i8 %v3_8414, 47
  store i1 %v7_8418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8418, label %dec_label_pc_8444, label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_83cc
  store i32 %v0_840c, i32* %r0.global-to-local, align 4
  %v1_8424 = inttoptr i32 %v0_840c to i8*
  %v2_8424 = call i32 @function_12c5c(i8* %v1_8424)
  store i32 %v2_8424, i32* @r2, align 4
  %v0_842c = load i32, i32* @r5, align 4
  %v1_8430 = add i32 %v0_842c, 533
  store i32 %v1_8430, i32* @r0, align 4
  store i32 %v0_840c, i32* @r1, align 4
  %v3_8438 = call i32 @function_13bf0(i32 %v1_8430, i32 %v0_840c, i32 %v2_8424)
  store i32 %v3_8438, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8440 = load i32, i32* @r5, align 4
  %v3_8440 = add i32 %v2_8440, 532
  %v4_8440 = inttoptr i32 %v3_8440 to i8*
  store i8 47, i8* %v4_8440, align 1
  %v0_8448.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %dec_label_pc_83cc, %dec_label_pc_8420
  %v0_8448 = phi i32 [ %v0_8414, %dec_label_pc_83cc ], [ %v0_8448.pre, %dec_label_pc_8420 ]
  %v0_8444 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8444, i32* %r1.global-to-local, align 4
  %v1_8448 = add i32 %v0_8448, 1440
  store i32 %v1_8448, i32* @r0, align 4
  %v2_844c = inttoptr i32 %v1_8448 to i8*
  %v3_844c = call i32 @function_12c84(i8* %v2_844c, i32 %v0_8444)
  %v0_8450 = load i32, i32* @r5, align 4
  %v0_8454 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8454, i32* %r1.global-to-local, align 4
  %v1_8458 = add i32 %v0_8450, 1431
  store i32 %v1_8458, i32* @r0, align 4
  %v2_845c = inttoptr i32 %v1_8458 to i8*
  %v3_845c = call i32 @function_12c84(i8* %v2_845c, i32 %v0_8454)
  %v0_8460 = load i32, i32* @r5, align 4
  %v1_8464 = add i32 %v0_8460, 789
  store i32 %v1_8464, i32* @r0, align 4
  %v0_8468 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8468, i32* %r1.global-to-local, align 4
  %v2_846c = inttoptr i32 %v1_8464 to i8*
  %v3_846c = call i32 @function_12c84(i8* %v2_846c, i32 %v0_8468)
  store i32 %v3_846c, i32* %r0.global-to-local, align 4
  %v0_8470 = load i32, i32* @r6, align 4
  %v1_8470 = add i32 %v0_8470, 20
  %v2_8470 = inttoptr i32 %v1_8470 to i8*
  %v3_8470 = load i8, i8* %v2_8470, align 1
  %v4_8470 = zext i8 %v3_8470 to i32
  store i32 %v4_8470, i32* %r3.global-to-local, align 4
  %v2_8474 = icmp ugt i8 %v3_8470, 30
  store i1 %v2_8474, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8474 = icmp ult i8 %v3_8470, 31
  store i1 %v6_8474, i1* %cpsr_n.global-to-local, align 1
  %v7_8474 = icmp eq i8 %v3_8470, 31
  store i1 %v7_8474, i1* %cpsr_z.global-to-local, align 1
  %v2_8478 = xor i1 %v7_8474, true
  %v3_8478 = and i1 %v2_8474, %v2_8478
  br i1 %v3_8478, label %dec_label_pc_84c8, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8444
  %v1_847c = add i32 %v0_8470, 16
  %v2_847c = inttoptr i32 %v1_847c to i32*
  %v3_847c = load i32, i32* %v2_847c, align 4
  store i32 %v3_847c, i32* @r4, align 4
  %v0_8480 = call i32 @function_f8e8()
  store i32 %v0_8480, i32* %r0.global-to-local, align 4
  %v0_8484 = load i32, i32* @r4, align 4
  %v1_8488 = and i32 %v0_8484, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_8488, i32* %r3.global-to-local, align 4
  %v1_8484 = udiv i32 %v0_8484, 256
  %v3_848c = and i32 %v1_8484, 65280
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  %v3_8490 = mul i32 %v0_8484, 16777216
  %v2_8494 = and i32 %v0_8484, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16777216)
  %v3_8494 = icmp ne i32 %v2_8494, 0
  store i1 %v3_8494, i1* %cpsr_c.global-to-local, align 1
  %v4_8494 = mul i32 %v1_8488, 256
  %v5_8494 = or i32 %v4_8494, %v3_8490
  store i32 %v5_8494, i32* %r1.global-to-local, align 4
  %v0_8498 = load i32, i32* @r6, align 4
  %v1_8498 = add i32 %v0_8498, 20
  %v2_8498 = inttoptr i32 %v1_8498 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* %ip.global-to-local, align 4
  %v4_849c = udiv i32 %v0_8484, 16777216
  %v5_849c = or i32 %v3_848c, %v4_849c
  %v2_84a0 = or i32 %v5_849c, %v5_8494
  %v7_84a4 = lshr i32 %v0_8480, %v4_8498
  %v8_84a4 = add i32 %v7_84a4, %v2_84a0
  store i32 %v8_84a4, i32* %r2.global-to-local, align 4
  %v3_84b0 = mul i32 %v8_84a4, 16777216
  %v1_84b4 = and i32 %v8_84a4, 65280
  store i32 %v1_84b4, i32* %r0.global-to-local, align 4
  %v4_84b8 = mul nuw nsw i32 %v1_84b4, 256
  %v5_84b8 = or i32 %v4_84b8, %v3_84b0
  store i32 %v5_84b8, i32* %r1.global-to-local, align 4
  %v2_84bc = and i32 %v8_84a4, 8388608
  %v3_84bc = icmp ne i32 %v2_84bc, 0
  store i1 %v3_84bc, i1* %cpsr_c.global-to-local, align 1
  %v2_84c0 = call i32 @llvm.bswap.i32(i32 %v8_84a4)
  store i32 %v2_84c0, i32* %r3.global-to-local, align 4
  %v1_84c4 = load i32, i32* @r5, align 4
  %v2_84c4 = add i32 %v1_84c4, 16
  %v3_84c4 = inttoptr i32 %v2_84c4 to i32*
  store i32 %v2_84c0, i32* %v3_84c4, align 4
  br label %dec_label_pc_84c8

dec_label_pc_84c8:                                ; preds = %dec_label_pc_8444, %dec_label_pc_847c
  %v0_84c8 = call i32 @function_f8e8()
  store i32 %v0_84c8, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_84d0 = call i32 @function_13378(i32 %v0_84c8, i32 5)
  store i32 %v2_84d0, i32* %r0.global-to-local, align 4
  %v1_84d4 = add i32 %v2_84d0, -4
  %v3_84d4 = sub i32 3, %v2_84d0
  %v4_84d4 = and i32 %v3_84d4, %v2_84d0
  %v5_84d4 = icmp slt i32 %v4_84d4, 0
  store i1 %v5_84d4, i1* %cpsr_v.global-to-local, align 1
  %v6_84d4 = icmp slt i32 %v1_84d4, 0
  store i1 %v6_84d4, i1* %cpsr_n.global-to-local, align 1
  %v7_84d4 = icmp eq i32 %v2_84d0, 4
  store i1 %v7_84d4, i1* %cpsr_z.global-to-local, align 1
  %v5_84d8 = and i32 %v2_84d0, 1073741824
  %v6_84d8 = icmp ne i32 %v5_84d8, 0
  store i1 %v6_84d8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_84d0, label %dec_label_pc_9e70 [
    i32 0, label %dec_label_pc_9ed4
    i32 1, label %dec_label_pc_9f00
    i32 2, label %dec_label_pc_9f2c
    i32 3, label %dec_label_pc_9f58
    i32 4, label %dec_label_pc_9e48
  ]

dec_label_pc_84f4:                                ; preds = %thread-pre-split
  %v1_84f8 = add i32 %v2_83b0, 1456
  %v0_8500 = load i32, i32* %r8.global-to-local, align 4
  %v1_8500 = urem i32 %v0_8500, 256
  store i32 %v1_8500, i32* %r3.global-to-local, align 4
  %v1_8504 = add i32 %v2_83b0, 1464
  store i32 %v1_8504, i32* %r1.global-to-local, align 4
  %v2_8508 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_8508, i32* %r2.global-to-local, align 4
  store i32 %v1_84f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_8528.preheader:                      ; preds = %dec_label_pc_84f4, %dec_label_pc_9e94
  %storemerge148.in.in = phi i32 [ %v0_9ea8, %dec_label_pc_9e94 ], [ %v0_8500, %dec_label_pc_84f4 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_9ea0, %dec_label_pc_9e94 ], [ %v1_84f8, %dec_label_pc_84f4 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_9ea8, %dec_label_pc_9e94 ], [ %v1_8500, %dec_label_pc_84f4 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9eac, %dec_label_pc_9e94 ], [ %v1_8504, %dec_label_pc_84f4 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_9eb0, %dec_label_pc_9e94 ], [ %v2_8508, %dec_label_pc_84f4 ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_9eb8, i32* %r8.global-to-local, align 4
  %v4_8590 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_86d0 = ptrtoint i32* %stack_var_-148 to i32
  %v2_86e8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_8728 = ptrtoint i32* %stack_var_-72 to i32
  %v3_8734 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_8748 = ptrtoint i32* %stack_var_-36 to i32
  %v1_8940 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_8c94 = icmp slt i32 %v6_8200, 0
  %v2_8c94 = icmp eq i32 %v6_8200, 0
  %v4_8ce8 = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_8b90 = inttoptr i32 %v6_8200 to i8*
  %v2_87b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_87b8 = ptrtoint i32* %stack_var_-200 to i32
  %v2_87bc = ptrtoint i32* %stack_var_-328 to i32
  %v2_921c = add i32 %v2_8748, -20773
  %v2_88a8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_88b4 = ptrtoint i32* %stack_var_-48 to i32
  %v5_8590 = or i32 %v4_8590, %v3_9eb8
  %v1_8594 = and i32 %v3_9eb8, 128
  %v2_8594 = icmp ne i32 %v1_8594, 0
  %v3_8594248 = udiv i32 %v5_8590, 256
  %v1_859c = add i32 %stack_var_-20872.0.ph, -1464
  %v1_85a4 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_8594248, 16777216
  %v4_8710 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_9eb8, 16777216
  %v4_8718 = sdiv i32 %sext10, 16777216
  %v2_85dc = add i32 %v2_86d0, 112
  br label %dec_label_pc_8528

dec_label_pc_8528:                                ; preds = %dec_label_pc_8794, %dec_label_pc_878c, %dec_label_pc_8574, %dec_label_pc_8838, %dec_label_pc_8528.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_852c = call i32 @function_138c0(i32* null)
  store i32 %v2_852c, i32* %r0.global-to-local, align 4
  store i32 %v2_852c, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_854c256 = load i32, i32* @sp, align 4
  %v3_854c257 = add i32 %v2_854c256, 20684
  %v4_854c258 = inttoptr i32 %v3_854c257 to i32*
  store i32 0, i32* %v4_854c258, align 4
  br label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_853c.dec_label_pc_853c_crit_edge:    ; preds = %dec_label_pc_8528, %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v0_853c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_854c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8540 = add i32 %v0_853c.pre, 4
  store i32 %v1_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = add i32 %v0_853c.pre, 20684
  store i32 %v1_8544, i32* %ip.global-to-local, align 4
  %v7_8548 = icmp eq i32 %v1_8540, 128
  %v2_854c = load i32, i32* @sp, align 4
  %v3_854c = add i32 %v2_854c, %v1_8544
  %v4_854c = inttoptr i32 %v3_854c to i32*
  store i32 %v0_854c.pre, i32* %v4_854c, align 4
  br i1 %v7_8548, label %dec_label_pc_8554, label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_8554:                                ; preds = %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v1_8548 = add i32 %v0_853c.pre, -124
  %v6_8548 = icmp slt i32 %v1_8548, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_8548, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8554 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8554, i32* %r0.global-to-local, align 4
  %v1_8560259 = add i32 %v0_8554, 4
  store i32 %v1_8560259, i32* %r3.global-to-local, align 4
  %v1_8564260 = add i32 %v0_8554, 20556
  store i32 %v1_8564260, i32* %lr.global-to-local, align 4
  %v7_8568261 = icmp eq i32 %v1_8560259, 128
  %v2_856c262 = load i32, i32* @sp, align 4
  %v3_856c263 = add i32 %v2_856c262, %v1_8564260
  %v4_856c264 = inttoptr i32 %v3_856c263 to i32*
  store i32 %v0_8554, i32* %v4_856c264, align 4
  br i1 %v7_8568261, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_855c.dec_label_pc_855c_crit_edge:    ; preds = %dec_label_pc_8554, %dec_label_pc_855c.dec_label_pc_855c_crit_edge
  %v0_855c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_856c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_8560 = add i32 %v0_855c.pre, 4
  store i32 %v1_8560, i32* %r3.global-to-local, align 4
  %v1_8564 = add i32 %v0_855c.pre, 20556
  store i32 %v1_8564, i32* %lr.global-to-local, align 4
  %v7_8568 = icmp eq i32 %v1_8560, 128
  %v2_856c = load i32, i32* @sp, align 4
  %v3_856c = add i32 %v2_856c, %v1_8564
  %v4_856c = inttoptr i32 %v3_856c to i32*
  store i32 %v0_856c.pre, i32* %v4_856c, align 4
  br i1 %v7_8568, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_8574:                                ; preds = %dec_label_pc_855c.dec_label_pc_855c_crit_edge, %dec_label_pc_8554
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_8528, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8574
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_8590, i32* %r2.global-to-local, align 4
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_8594248, i32* %lr.global-to-local, align 4
  %v0_8598 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8598, i32* @sl, align 4
  store i32 %v1_859c, i32* @r7, align 4
  store i32 %v0_8598, i32* @r8, align 4
  store i32 %v1_85a4, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_8650

dec_label_pc_85b8:                                ; preds = %dec_label_pc_865c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_85b8 = icmp eq i8 %v3_8650, 2
  store i1 %v7_85b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85b8, label %dec_label_pc_8d68, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %dec_label_pc_85b8
  %v2_85c0 = icmp ugt i8 %v3_8650, 3
  store i1 %v2_85c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c0 = icmp ult i8 %v3_8650, 4
  store i1 %v6_85c0, i1* %cpsr_n.global-to-local, align 1
  %v7_85c0 = icmp eq i8 %v3_8650, 4
  store i1 %v7_85c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c0, label %dec_label_pc_890c, label %dec_label_pc_85c8

dec_label_pc_85c8:                                ; preds = %dec_label_pc_85c0
  %v2_85c8 = icmp ugt i8 %v3_8650, 5
  store i1 %v2_85c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c8 = icmp ult i8 %v3_8650, 6
  store i1 %v6_85c8, i1* %cpsr_n.global-to-local, align 1
  %v7_85c8 = icmp eq i8 %v3_8650, 6
  store i1 %v7_85c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c8, label %.thread24, label %dec_label_pc_85e8

.thread24:                                        ; preds = %dec_label_pc_85c8
  %v2_85cc = add i32 %v3_8900, -1431
  %v3_85cc = inttoptr i32 %v2_85cc to i32*
  %v4_85cc = load i32, i32* %v3_85cc, align 4
  store i32 %v4_85cc, i32* %r0.global-to-local, align 4
  %v4_85d4 = udiv i32 %v4_85cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85d8 = mul nuw nsw i32 %v4_85d4, 4
  store i32 %v2_85dc, i32* %r1.global-to-local, align 4
  %v3_85e0 = add i32 %v4_85d8, %v2_85dc
  store i32 %v3_85e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85c8
  %v2_85e8 = icmp ugt i8 %v3_8650, 6
  store i1 %v2_85e8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85e8 = icmp ult i8 %v3_8650, 7
  store i1 %v6_85e8, i1* %cpsr_n.global-to-local, align 1
  %v7_85e8 = icmp eq i8 %v3_8650, 7
  store i1 %v7_85e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85e8, label %.thread35, label %dec_label_pc_8608

.thread35:                                        ; preds = %dec_label_pc_85e8
  %v2_85ec = add i32 %v3_8900, -1431
  %v3_85ec = inttoptr i32 %v2_85ec to i32*
  %v4_85ec = load i32, i32* %v3_85ec, align 4
  store i32 %v4_85ec, i32* %r0.global-to-local, align 4
  %v4_85f4 = udiv i32 %v4_85ec, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85f8 = mul nuw nsw i32 %v4_85f4, 4
  store i32 %v2_85dc, i32* %r2.global-to-local, align 4
  %v3_8600 = add i32 %v4_85f8, %v2_85dc
  store i32 %v3_8600, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8608:                                ; preds = %dec_label_pc_85e8
  %v2_8608 = icmp ugt i8 %v3_8650, 9
  store i1 %v2_8608, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8608 = icmp ult i8 %v3_8650, 10
  store i1 %v6_8608, i1* %cpsr_n.global-to-local, align 1
  %v7_8608 = icmp eq i8 %v3_8650, 10
  store i1 %v7_8608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8608, label %dec_label_pc_8d30, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8608
  %v1_8610 = add nsw i32 %v4_8650, -11
  %v2_8610 = icmp ugt i8 %v3_8650, 10
  store i1 %v2_8610, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8610 = icmp ult i8 %v3_8650, 11
  store i1 %v6_8610, i1* %cpsr_n.global-to-local, align 1
  %v7_8610 = icmp eq i8 %v3_8650, 11
  store i1 %v7_8610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8610, label %dec_label_pc_98a4, label %dec_label_pc_8618

dec_label_pc_8618:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8610
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8650, align 1
  %v0_8620 = load i32, i32* @r6, align 4
  %v1_8620 = add i32 %v0_8620, -1431
  %v2_8620 = inttoptr i32 %v1_8620 to i32*
  %v3_8620 = load i32, i32* %v2_8620, align 4
  store i32 %v3_8620, i32* %r0.global-to-local, align 4
  %v1_8624 = call i32 @function_135f0(i32 %v3_8620)
  store i32 %v1_8624, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_862c = load i32, i32* @r6, align 4
  %v2_862c = add i32 %v1_862c, -1431
  %v3_862c = inttoptr i32 %v2_862c to i32*
  store i32 -1, i32* %v3_862c, align 4
  br label %dec_label_pc_8630

dec_label_pc_8630:                                ; preds = %dec_label_pc_8ccc, %dec_label_pc_8d48, %dec_label_pc_8750, %dec_label_pc_8664, %dec_label_pc_98a4, %dec_label_pc_8618
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8634 = load i32, i32* @r8, align 4
  %v1_8634 = add i32 %v0_8634, 1
  store i32 %v1_8634, i32* @r8, align 4
  %v0_8638 = load i32, i32* @r7, align 4
  %v0_863c = load i32, i32* @r6, align 4
  %v2_8640 = sub i32 %v0_839c, %v1_8634
  %v3_8640 = icmp uge i32 %v0_839c, %v1_8634
  store i1 %v3_8640, i1* %cpsr_c.global-to-local, align 1
  %v4_8640 = xor i32 %v1_8634, %v0_839c
  %v5_8640 = xor i32 %v2_8640, %v0_839c
  %v6_8640 = and i32 %v5_8640, %v4_8640
  %v7_8640 = icmp slt i32 %v6_8640, 0
  store i1 %v7_8640, i1* %cpsr_v.global-to-local, align 1
  %v8_8640 = icmp slt i32 %v2_8640, 0
  store i1 %v8_8640, i1* %cpsr_n.global-to-local, align 1
  %v9_8640 = icmp eq i32 %v0_839c, %v1_8634
  store i1 %v9_8640, i1* %cpsr_z.global-to-local, align 1
  %v1_8644 = add i32 %v0_8638, 3140
  store i32 %v1_8644, i32* @r7, align 4
  %v1_8648 = add i32 %v0_863c, 3140
  store i32 %v1_8648, i32* @r6, align 4
  br i1 %v9_8640, label %dec_label_pc_8630.dec_label_pc_878c_crit_edge, label %dec_label_pc_8650

dec_label_pc_8630.dec_label_pc_878c_crit_edge:    ; preds = %dec_label_pc_8630
  %v0_878c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_878c

dec_label_pc_8650:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630, %dec_label_pc_8580
  %v3_8900 = phi i32 [ %v1_85a4, %dec_label_pc_8580 ], [ %v1_8648, %dec_label_pc_8630 ], [ %v1_8784, %dec_label_pc_876c ]
  %v1_8650 = add i32 %v3_8900, -1427
  %v2_8650 = inttoptr i32 %v1_8650 to i8*
  %v3_8650 = load i8, i8* %v2_8650, align 1
  %v4_8650 = zext i8 %v3_8650 to i32
  store i32 %v4_8650, i32* %r3.global-to-local, align 4
  %v2_8654 = icmp ne i8 %v3_8650, 0
  store i1 %v2_8654, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8654 = icmp eq i8 %v3_8650, 0
  store i1 %v6_8654, i1* %cpsr_n.global-to-local, align 1
  %v7_8654 = icmp eq i8 %v3_8650, 1
  store i1 %v7_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8654, label %dec_label_pc_88f4, label %dec_label_pc_865c

dec_label_pc_865c:                                ; preds = %dec_label_pc_8650
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8654, label %dec_label_pc_8664, label %dec_label_pc_85b8

dec_label_pc_8664:                                ; preds = %.thread43.dec_label_pc_8664_crit_edge, %dec_label_pc_865c
  %v0_8664 = phi i32 [ %v0_8664.pre, %.thread43.dec_label_pc_8664_crit_edge ], [ %v3_8900, %dec_label_pc_865c ]
  %v1_8664 = add i32 %v0_8664, -1431
  %v2_8664 = inttoptr i32 %v1_8664 to i32*
  %v3_8664 = load i32, i32* %v2_8664, align 4
  store i32 %v3_8664, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v1_8670 = add i32 %v3_8664, 1
  %v2_8670 = icmp eq i32 %v3_8664, -1
  store i1 %v2_8670, i1* %cpsr_c.global-to-local, align 1
  %v3_8670 = sub i32 0, %v3_8664
  %v4_8670 = and i32 %v1_8670, %v3_8670
  %v5_8670 = icmp slt i32 %v4_8670, 0
  store i1 %v5_8670, i1* %cpsr_v.global-to-local, align 1
  %v6_8670 = icmp slt i32 %v1_8670, 0
  store i1 %v6_8670, i1* %cpsr_n.global-to-local, align 1
  %v7_8670 = icmp eq i32 %v1_8670, 0
  store i1 %v7_8670, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8684 = xor i1 %v7_8670, true
  call void @__pseudo_cond_branch(i1 %v1_8684, i32 ptrtoint (i32* @global_var_135f0.26 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8690 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8690, i32* %r2.global-to-local, align 4
  %v3_8694 = call i32 @function_13edc(i32 2, i32 1, i32 %v0_8690)
  store i32 %v3_8694, i32* %r0.global-to-local, align 4
  %v1_8698 = add i32 %v3_8694, 1
  %v2_8698 = icmp eq i32 %v3_8694, -1
  store i1 %v2_8698, i1* %cpsr_c.global-to-local, align 1
  %v3_8698 = sub i32 0, %v3_8694
  %v4_8698 = and i32 %v1_8698, %v3_8698
  %v5_8698 = icmp slt i32 %v4_8698, 0
  store i1 %v5_8698, i1* %cpsr_v.global-to-local, align 1
  %v6_8698 = icmp slt i32 %v1_8698, 0
  store i1 %v6_8698, i1* %cpsr_n.global-to-local, align 1
  %v7_8698 = icmp eq i32 %v1_8698, 0
  store i1 %v7_8698, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8694, i32* @r4, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = add i32 %v1_86a0, -1431
  %v3_86a0 = inttoptr i32 %v2_86a0 to i32*
  store i32 %v3_8694, i32* %v3_86a0, align 4
  br i1 %v7_8698, label %dec_label_pc_8630, label %dec_label_pc_86a8

dec_label_pc_86a8:                                ; preds = %dec_label_pc_8664
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_86ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86ac, i32* @r2, align 4
  %v0_86b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_86b0 = call i32 @function_1352c(i32 %v0_86b0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_86b8 = or i32 %v2_86b0, 2048
  store i32 %v1_86b8, i32* @r2, align 4
  %v0_86bc = load i32, i32* @r4, align 4
  store i32 %v0_86bc, i32* %r0.global-to-local, align 4
  %v2_86c0 = call i32 @function_1352c(i32 %v0_86bc, i32 4)
  store i32 %v2_86c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %ip.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r6, align 4
  %v1_86d4 = add i32 %v0_86d4, -1431
  %v2_86d4 = inttoptr i32 %v1_86d4 to i32*
  %v3_86d4 = load i32, i32* %v2_86d4, align 4
  store i32 %v3_86d4, i32* %r0.global-to-local, align 4
  %v0_86d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86d8, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_86e8, i32* %r3.global-to-local, align 4
  %v6_86f0 = call i32 @function_13eac(i32 %v3_86d4, i32 %v0_86d8, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_86f0, i32* %r0.global-to-local, align 4
  %v0_86f4 = load i32, i32* @r6, align 4
  %v1_86f4 = add i32 %v0_86f4, -1415
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  %v3_86f4 = load i32, i32* %v2_86f4, align 4
  store i32 %v3_86f4, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8704 = add i32 %v0_86f4, -1431
  %v2_8704 = inttoptr i32 %v1_8704 to i32*
  %v3_8704 = load i32, i32* %v2_8704, align 4
  store i32 %v3_8704, i32* %r0.global-to-local, align 4
  %v3_870c = add i32 %v0_86f4, -1427
  %v4_870c = inttoptr i32 %v3_870c to i8*
  store i8 2, i8* %v4_870c, align 1
  store i32 %v4_8710, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8714, i32* %stack_var_-72, align 4
  store i32 %v4_8718, i32* %r3.global-to-local, align 4
  store i32 %v2_8728, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_8730 = load i32, i32* %sb.global-to-local, align 4
  %v1_8730 = load i32, i32* @r6, align 4
  %v2_8730 = add i32 %v1_8730, -1423
  %v3_8730 = inttoptr i32 %v2_8730 to i32*
  store i32 %v0_8730, i32* %v3_8730, align 4
  %v4_8734 = call i32 @function_13d38(i32 %v3_8704, %sockaddr* nonnull %v3_8734, i32 16)
  store i32 %v4_8734, i32* %r0.global-to-local, align 4
  %v0_8738 = load i32, i32* @r6, align 4
  %v1_8738 = add i32 %v0_8738, -1431
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  %v3_8738 = load i32, i32* %v2_8738, align 4
  store i32 %v3_8738, i32* %r0.global-to-local, align 4
  %v3_8740 = udiv i32 %v3_8738, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8744 = mul nuw nsw i32 %v3_8740, 4
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8750:                                ; preds = %dec_label_pc_8d78, %dec_label_pc_86a8
  %v1_875c = phi i32 [ %v3_8738, %dec_label_pc_86a8 ], [ %v3_8d78, %dec_label_pc_8d78 ]
  %v3_8744.pn = phi i32 [ %v3_8744, %dec_label_pc_86a8 ], [ %v3_8d84, %dec_label_pc_8d78 ]
  %storemerge = add i32 %v3_8744.pn, %v2_8748
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_8750 = add i32 %storemerge, -292
  %v2_8750 = inttoptr i32 %v1_8750 to i32*
  %v3_8750 = load i32, i32* %v2_8750, align 4
  %v1_8754 = urem i32 %v1_875c, 32
  store i32 %v1_8754, i32* %r1.global-to-local, align 4
  %v1_8758 = load i32, i32* %fp.global-to-local, align 4
  %v7_8758 = shl i32 %v1_8758, %v1_8754
  %v8_8758 = or i32 %v7_8758, %v3_8750
  store i32 %v8_8758, i32* %r2.global-to-local, align 4
  %v0_875c = load i32, i32* @sl, align 4
  %v2_875c = sub i32 %v0_875c, %v1_875c
  %v3_875c = icmp uge i32 %v0_875c, %v1_875c
  store i1 %v3_875c, i1* %cpsr_c.global-to-local, align 1
  %v4_875c = xor i32 %v0_875c, %v1_875c
  %v5_875c = xor i32 %v2_875c, %v0_875c
  %v6_875c = and i32 %v5_875c, %v4_875c
  %v7_875c = icmp slt i32 %v6_875c, 0
  store i1 %v7_875c, i1* %cpsr_v.global-to-local, align 1
  %v8_875c = icmp slt i32 %v2_875c, 0
  store i1 %v8_875c, i1* %cpsr_n.global-to-local, align 1
  %v9_875c = icmp eq i32 %v0_875c, %v1_875c
  store i1 %v9_875c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8758, i32* %v2_8750, align 4
  %v2_8764 = xor i1 %v8_875c, %v7_875c
  br i1 %v2_8764, label %dec_label_pc_8768, label %dec_label_pc_8630

dec_label_pc_8768:                                ; preds = %dec_label_pc_8750
  %v0_8768 = load i32, i32* %r0.global-to-local, align 4
  %v1_8768 = add i32 %v0_8768, 1
  store i32 %v1_8768, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_876c:                                ; preds = %dec_label_pc_8d60, %dec_label_pc_8d28, %dec_label_pc_8768
  %v0_878c98 = phi i32 [ %v1_8d60, %dec_label_pc_8d60 ], [ %v1_8d28, %dec_label_pc_8d28 ], [ %v1_8768, %dec_label_pc_8768 ]
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8770 = load i32, i32* @r8, align 4
  %v1_8770 = add i32 %v0_8770, 1
  store i32 %v1_8770, i32* @r8, align 4
  %v0_8774 = load i32, i32* @r7, align 4
  %v0_8778 = load i32, i32* @r6, align 4
  %v2_877c = sub i32 %v0_839c, %v1_8770
  %v3_877c = icmp uge i32 %v0_839c, %v1_8770
  store i1 %v3_877c, i1* %cpsr_c.global-to-local, align 1
  %v4_877c = xor i32 %v1_8770, %v0_839c
  %v5_877c = xor i32 %v2_877c, %v0_839c
  %v6_877c = and i32 %v5_877c, %v4_877c
  %v7_877c = icmp slt i32 %v6_877c, 0
  store i1 %v7_877c, i1* %cpsr_v.global-to-local, align 1
  %v8_877c = icmp slt i32 %v2_877c, 0
  store i1 %v8_877c, i1* %cpsr_n.global-to-local, align 1
  %v9_877c = icmp eq i32 %v0_839c, %v1_8770
  store i1 %v9_877c, i1* %cpsr_z.global-to-local, align 1
  %v1_8780 = add i32 %v0_8774, 3140
  store i32 %v1_8780, i32* @r7, align 4
  %v1_8784 = add i32 %v0_8778, 3140
  store i32 %v1_8784, i32* @r6, align 4
  br i1 %v9_877c, label %dec_label_pc_878c, label %dec_label_pc_8650

dec_label_pc_878c:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630.dec_label_pc_878c_crit_edge
  %v0_87c4 = phi i32 [ %v0_878c.pre, %dec_label_pc_8630.dec_label_pc_878c_crit_edge ], [ %v0_878c98, %dec_label_pc_876c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_878c = icmp slt i32 %v0_87c4, 0
  store i1 %v1_878c, i1* %cpsr_n.global-to-local, align 1
  %v2_878c = icmp eq i32 %v0_87c4, 0
  store i1 %v2_878c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_878c, label %dec_label_pc_8528, label %dec_label_pc_8794

dec_label_pc_8794:                                ; preds = %dec_label_pc_878c
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_87b4, i32* %ip.global-to-local, align 4
  store i32 %v2_87b8, i32* %r1.global-to-local, align 4
  store i32 %v2_87bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_87c4, i32* %r0.global-to-local, align 4
  %v5_87cc = call i32 @function_13810(i32 %v0_87c4, i32 %v2_87b8, i32 %v2_87bc, i32 0, i32 %v2_87b4)
  store i32 %v5_87cc, i32* @r4, align 4
  %v0_87d4 = load i32, i32* @r5, align 4
  store i32 %v0_87d4, i32* %r0.global-to-local, align 4
  %v1_87d8 = inttoptr i32 %v0_87d4 to i32*
  %v2_87d8 = call i32 @function_138c0(i32* %v1_87d8)
  store i32 %v2_87d8, i32* %r0.global-to-local, align 4
  %v0_87dc = load i32, i32* @r4, align 4
  %v1_87dc = load i32, i32* @r5, align 4
  %v2_87dc = sub i32 %v0_87dc, %v1_87dc
  %v3_87dc = icmp uge i32 %v0_87dc, %v1_87dc
  store i1 %v3_87dc, i1* %cpsr_c.global-to-local, align 1
  %v4_87dc = xor i32 %v1_87dc, %v0_87dc
  %v5_87dc = xor i32 %v2_87dc, %v0_87dc
  %v6_87dc = and i32 %v5_87dc, %v4_87dc
  %v7_87dc = icmp slt i32 %v6_87dc, 0
  store i1 %v7_87dc, i1* %cpsr_v.global-to-local, align 1
  %v8_87dc = icmp slt i32 %v2_87dc, 0
  store i1 %v8_87dc, i1* %cpsr_n.global-to-local, align 1
  %v9_87dc = icmp eq i32 %v0_87dc, %v1_87dc
  store i1 %v9_87dc, i1* %cpsr_z.global-to-local, align 1
  %v7_87e4 = icmp sgt i32 %v0_87dc, %v1_87dc
  br i1 %v7_87e4, label %dec_label_pc_87e8, label %dec_label_pc_8528

dec_label_pc_87e8:                                ; preds = %dec_label_pc_8794
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_8858

dec_label_pc_87f4:                                ; preds = %.thread38.dec_label_pc_87f4_crit_edge, %dec_label_pc_8868
  %v0_880c = phi i32 [ %v0_87f4.pre, %.thread38.dec_label_pc_87f4_crit_edge ], [ %v3_8858, %dec_label_pc_8868 ]
  %v3_87f4 = udiv i32 %v0_880c, 32
  store i32 %v2_8748, i32* %r2.global-to-local, align 4
  %v3_8800 = mul nuw nsw i32 %v3_87f4, 4
  %v2_8804 = add i32 %v3_8800, %v2_8748
  store i32 %v2_8804, i32* %r3.global-to-local, align 4
  %v1_8808 = add i32 %v2_8804, -164
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  %v3_8808 = load i32, i32* %v2_8808, align 4
  %v1_880c = urem i32 %v0_880c, 32
  store i32 %v1_880c, i32* %r1.global-to-local, align 4
  %v2_8810 = add nsw i32 %v1_880c, -1
  %v3_8810 = shl i32 1, %v2_8810
  %v4_8810 = and i32 %v3_8810, %v3_8808
  %v5_8810 = icmp ne i32 %v4_8810, 0
  store i1 %v5_8810, i1* %cpsr_c.global-to-local, align 1
  %v6_8810 = lshr i32 %v3_8808, %v1_880c
  store i32 %v6_8810, i32* %r2.global-to-local, align 4
  %v1_8814 = urem i32 %v6_8810, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8814 = icmp eq i32 %v1_8814, 0
  store i1 %v2_8814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8814, label %dec_label_pc_8838, label %dec_label_pc_881c

dec_label_pc_881c:                                ; preds = %dec_label_pc_87f4
  %v0_881c = load i32, i32* @r8, align 4
  %v1_881c = add i32 %v0_881c, -1452
  %v2_881c = inttoptr i32 %v1_881c to i8*
  %v3_881c = load i8, i8* %v2_881c, align 1
  %v4_881c = zext i8 %v3_881c to i32
  store i32 %v4_881c, i32* %r3.global-to-local, align 4
  %v2_8820 = icmp ugt i8 %v3_881c, 5
  store i1 %v2_8820, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8820 = icmp ult i8 %v3_881c, 6
  store i1 %v6_8820, i1* %cpsr_n.global-to-local, align 1
  %v7_8820 = icmp eq i8 %v3_881c, 6
  store i1 %v7_8820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8820, label %dec_label_pc_8dd0, label %dec_label_pc_8828

dec_label_pc_8828:                                ; preds = %dec_label_pc_881c
  %v2_8828 = icmp ugt i8 %v3_881c, 6
  store i1 %v2_8828, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8828 = icmp ult i8 %v3_881c, 7
  store i1 %v6_8828, i1* %cpsr_n.global-to-local, align 1
  %v7_8828 = icmp eq i8 %v3_881c, 7
  store i1 %v7_8828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8828, label %dec_label_pc_940c, label %dec_label_pc_8830

dec_label_pc_8830:                                ; preds = %dec_label_pc_8828
  %v2_8830 = icmp ugt i8 %v3_881c, 9
  store i1 %v2_8830, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8830 = icmp ult i8 %v3_881c, 10
  store i1 %v6_8830, i1* %cpsr_n.global-to-local, align 1
  %v7_8830 = icmp eq i8 %v3_881c, 10
  store i1 %v7_8830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8830, label %dec_label_pc_961c, label %dec_label_pc_8838

dec_label_pc_8838:                                ; preds = %dec_label_pc_9510, %dec_label_pc_9950, %dec_label_pc_9a98, %dec_label_pc_9914, %dec_label_pc_8830, %dec_label_pc_87f4, %dec_label_pc_8858, %dec_label_pc_9d84, %dec_label_pc_9b34, %dec_label_pc_9a7c, %dec_label_pc_9934, %dec_label_pc_98fc, %dec_label_pc_9884, %dec_label_pc_965c, %dec_label_pc_88dc, %dec_label_pc_9400
  store i32 %v0_839c, i32* %r3.global-to-local, align 4
  %v1_8840 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_8840, i32* %r2.global-to-local, align 4
  %v0_8844 = load i32, i32* @r8, align 4
  %v2_8848 = sub i32 %v1_8840, %v0_839c
  %v3_8848 = icmp uge i32 %v1_8840, %v0_839c
  store i1 %v3_8848, i1* %cpsr_c.global-to-local, align 1
  %v4_8848 = xor i32 %v1_8840, %v0_839c
  %v5_8848 = xor i32 %v2_8848, %v1_8840
  %v6_8848 = and i32 %v5_8848, %v4_8848
  %v7_8848 = icmp slt i32 %v6_8848, 0
  store i1 %v7_8848, i1* %cpsr_v.global-to-local, align 1
  %v8_8848 = icmp slt i32 %v2_8848, 0
  store i1 %v8_8848, i1* %cpsr_n.global-to-local, align 1
  %v9_8848 = icmp eq i32 %v1_8840, %v0_839c
  store i1 %v9_8848, i1* %cpsr_z.global-to-local, align 1
  %v1_8850 = add i32 %v0_8844, 3140
  store i32 %v1_8850, i32* @r8, align 4
  br i1 %v9_8848, label %dec_label_pc_8528, label %dec_label_pc_8858

dec_label_pc_8858:                                ; preds = %dec_label_pc_8838, %dec_label_pc_87e8
  %v0_8860 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_87e8 ], [ %v1_8850, %dec_label_pc_8838 ]
  %stack_var_-20832.0 = phi i32 [ %v1_87dc, %dec_label_pc_87e8 ], [ %v1_8840, %dec_label_pc_8838 ]
  %v1_8858 = add i32 %v0_8860, -1456
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  %v3_8858 = load i32, i32* %v2_8858, align 4
  store i32 %v3_8858, i32* %r0.global-to-local, align 4
  %v1_885c = add i32 %v3_8858, 1
  %v2_885c = icmp eq i32 %v3_8858, -1
  store i1 %v2_885c, i1* %cpsr_c.global-to-local, align 1
  %v3_885c = sub i32 0, %v3_8858
  %v4_885c = and i32 %v1_885c, %v3_885c
  %v5_885c = icmp slt i32 %v4_885c, 0
  store i1 %v5_885c, i1* %cpsr_v.global-to-local, align 1
  %v6_885c = icmp slt i32 %v1_885c, 0
  store i1 %v6_885c, i1* %cpsr_n.global-to-local, align 1
  %v7_885c = icmp eq i32 %v1_885c, 0
  store i1 %v7_885c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8858, i32* %sb.global-to-local, align 4
  br i1 %v7_885c, label %dec_label_pc_8838, label %dec_label_pc_8868

dec_label_pc_8868:                                ; preds = %dec_label_pc_8858
  %v3_8868 = udiv i32 %v3_8858, 32
  %v3_8870 = mul nuw nsw i32 %v3_8868, 4
  store i32 %v2_8748, i32* @lr, align 4
  %v2_8878 = add i32 %v3_8870, %v2_8748
  store i32 %v2_8878, i32* %r3.global-to-local, align 4
  %v1_887c = add i32 %v2_8878, -292
  %v2_887c = inttoptr i32 %v1_887c to i32*
  %v3_887c = load i32, i32* %v2_887c, align 4
  %v1_8880 = urem i32 %v3_8858, 32
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v2_8884 = add nsw i32 %v1_8880, -1
  %v3_8884 = shl i32 1, %v2_8884
  %v4_8884 = and i32 %v3_887c, %v3_8884
  %v5_8884 = icmp ne i32 %v4_8884, 0
  store i1 %v5_8884, i1* %cpsr_c.global-to-local, align 1
  %v6_8884 = lshr i32 %v3_887c, %v1_8880
  store i32 %v6_8884, i32* %r2.global-to-local, align 4
  %v1_8888 = urem i32 %v6_8884, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8888 = icmp eq i32 %v1_8888, 0
  store i1 %v2_8888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8888, label %dec_label_pc_87f4, label %dec_label_pc_8890

dec_label_pc_8890:                                ; preds = %dec_label_pc_8868
  store i32 4, i32* @r4, align 4
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_88a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_88b4, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v6_88c0 = call i32 @function_13d90(i32 %v3_8858, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_88b4)
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_88c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_88c8, i32* %r3.global-to-local, align 4
  %v2_88cc = or i32 %v3_88c8, %v6_88c0
  store i32 %v2_88cc, i32* %r0.global-to-local, align 4
  %v3_88cc = icmp slt i32 %v2_88cc, 0
  store i1 %v3_88cc, i1* %cpsr_n.global-to-local, align 1
  %v4_88cc = icmp eq i32 %v2_88cc, 0
  store i1 %v4_88cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_88cc, label %.thread38, label %dec_label_pc_88dc

.thread38:                                        ; preds = %dec_label_pc_8890
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, -1456
  %v3_88d0 = inttoptr i32 %v2_88d0 to i32*
  %v4_88d0 = load i32, i32* %v3_88d0, align 4
  store i32 %v4_88d0, i32* %r0.global-to-local, align 4
  %v1_88d4 = load i32, i32* @r4, align 4
  %v2_88d4 = trunc i32 %v1_88d4 to i8
  %v4_88d4 = add i32 %v1_88d0, -1452
  %v5_88d4 = inttoptr i32 %v4_88d4 to i8*
  store i8 %v2_88d4, i8* %v5_88d4, align 1
  %v0_88d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_88d8.pr.pr, label %.thread38.dec_label_pc_87f4_crit_edge, label %dec_label_pc_88dc

.thread38.dec_label_pc_87f4_crit_edge:            ; preds = %.thread38
  %v0_87f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87f4

dec_label_pc_88dc:                                ; preds = %dec_label_pc_8890, %.thread38
  %v0_88dc = load i32, i32* @r8, align 4
  %v1_88dc = add i32 %v0_88dc, -1456
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  %v3_88dc = load i32, i32* %v2_88dc, align 4
  store i32 %v3_88dc, i32* %r0.global-to-local, align 4
  %v1_88e0 = call i32 @function_135f0(i32 %v3_88dc)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r8, align 4
  %v2_88e8 = add i32 %v1_88e8, -1456
  %v3_88e8 = inttoptr i32 %v2_88e8 to i32*
  store i32 -1, i32* %v3_88e8, align 4
  %v0_88ec = load i32, i32* @r5, align 4
  %v1_88ec = trunc i32 %v0_88ec to i8
  %v2_88ec = load i32, i32* @r8, align 4
  %v3_88ec = add i32 %v2_88ec, -1452
  %v4_88ec = inttoptr i32 %v3_88ec to i8*
  store i8 %v1_88ec, i8* %v4_88ec, align 1
  br label %dec_label_pc_8838

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8650
  %v1_88f4 = add i32 %v3_8900, 25
  %v2_88f4 = inttoptr i32 %v1_88f4 to i32*
  %v3_88f4 = load i32, i32* %v2_88f4, align 4
  store i32 %v3_88f4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_88f8 = icmp slt i32 %v3_88f4, 0
  store i1 %v1_88f8, i1* %cpsr_n.global-to-local, align 1
  %v2_88f8 = icmp eq i32 %v3_88f4, 0
  store i1 %v2_88f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_88f8, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_88f4
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_8650, align 1
  %v0_8904.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8904.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_890c

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_8904.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_8904.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8904.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_88f4
  %v3_8904 = phi i32 [ %v3_8904.pre, %.thread41..thread43_crit_edge ], [ %v3_8900, %dec_label_pc_88f4 ]
  %v1_8904.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_88f4 ]
  %v4_8904 = add i32 %v3_8904, -1427
  %v5_8904 = inttoptr i32 %v4_8904 to i8*
  store i8 %v1_8904.off0, i8* %v5_8904, align 1
  %v0_8908.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8908.pr, label %.thread43.dec_label_pc_8664_crit_edge, label %dec_label_pc_890c

.thread43.dec_label_pc_8664_crit_edge:            ; preds = %.thread43
  %v0_8664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8664

dec_label_pc_890c:                                ; preds = %.thread41, %.thread43, %dec_label_pc_85c0
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_8914 = load i32, i32* @r7, align 4
  %v1_8914 = add i32 %v0_8914, 2112
  store i32 %v1_8914, i32* %r0.global-to-local, align 4
  %v1_8918 = load i32, i32* @r6, align 4
  %v2_8918 = add i32 %v1_8918, 33
  %v3_8918 = inttoptr i32 %v2_8918 to i32*
  store i32 -1, i32* %v3_8918, align 4
  %v0_891c = load i32, i32* %r0.global-to-local, align 4
  %v1_891c = add i32 %v0_891c, 4
  store i32 %v1_891c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8924 = load i32, i32* @r5, align 4
  %v1_8924 = load i32, i32* @r6, align 4
  %v2_8924 = add i32 %v1_8924, 21
  %v3_8924 = inttoptr i32 %v2_8924 to i32*
  store i32 %v0_8924, i32* %v3_8924, align 4
  %v2_8928 = call i32 @function_12cfc(i32 %v1_891c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8934 = load i32, i32* @r5, align 4
  %v1_8934 = load i32, i32* @r6, align 4
  %v2_8934 = add i32 %v1_8934, 681
  %v3_8934 = inttoptr i32 %v2_8934 to i32*
  store i32 %v0_8934, i32* %v3_8934, align 4
  %v2_8938 = call i32 @function_12cfc(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8940 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_8948 = load i32, i32* @r6, align 4
  store i32 %v0_8948, i32* %r1.global-to-local, align 4
  %v2_894c = add i32 %v2_8940, %stack_var_-20856.0.ph
  store i32 %v2_894c, i32* @r0, align 4
  %v2_8950 = inttoptr i32 %v2_894c to i8*
  %v3_8950 = call i32 @function_12c84(i8* %v2_8950, i32 %v0_8948)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8958 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15cec.29 to i32), i32* %r1.global-to-local, align 4
  %v2_8964 = add i32 %v2_8958, %stack_var_-20856.0.ph
  store i32 %v2_8964, i32* @r0, align 4
  %v2_8968 = inttoptr i32 %v2_8964 to i8*
  %v3_8968 = call i32 @function_12c84(i8* %v2_8968, i32 ptrtoint (i32* @global_var_15cec.29 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8970 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_8978 = load i32, i32* @r7, align 4
  %v1_8978 = add i32 %v0_8978, 532
  store i32 %v1_8978, i32* %r1.global-to-local, align 4
  %v2_897c = add i32 %v2_8970, %stack_var_-20856.0.ph
  store i32 %v2_897c, i32* @r0, align 4
  %v2_8980 = inttoptr i32 %v2_897c to i8*
  %v3_8980 = call i32 @function_12c84(i8* %v2_8980, i32 %v1_8978)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8988 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_15cc4.31 to i32), i32* %r1.global-to-local, align 4
  %v2_8994 = add i32 %v2_8988, %stack_var_-20856.0.ph
  store i32 %v2_8994, i32* @r0, align 4
  %v3_8998 = inttoptr i32 %v2_8994 to i8*
  %v4_8998 = call i32 @function_12c84(i8* %v3_8998, i32 ptrtoint ([24 x i8]* @global_var_15cc4.31 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89a0 = call i32 @function_12c5c(i8* %v1_8940)
  %v2_89a8 = add i32 %v2_89a0, %stack_var_-20856.0.ph
  store i32 %v2_89a8, i32* @r0, align 4
  %v0_89ac = load i32, i32* @r7, align 4
  %v1_89ac = add i32 %v0_89ac, 20
  store i32 %v1_89ac, i32* %r1.global-to-local, align 4
  %v2_89b0 = inttoptr i32 %v2_89a8 to i8*
  %v3_89b0 = call i32 @function_12c84(i8* %v2_89b0, i32 %v1_89ac)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b8 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15cdc.33 to i32), i32* %r1.global-to-local, align 4
  %v2_89c4 = add i32 %v2_89b8, %stack_var_-20856.0.ph
  store i32 %v2_89c4, i32* @r0, align 4
  %v3_89c8 = inttoptr i32 %v2_89c4 to i8*
  %v4_89c8 = call i32 @function_12c84(i8* %v3_89c8, i32 ptrtoint ([9 x i8]* @global_var_15cdc.33 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d0 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r7, align 4
  %v2_89dc = add i32 %v2_89d0, %stack_var_-20856.0.ph
  store i32 %v2_89dc, i32* @r0, align 4
  %v1_89e0 = add i32 %v0_89d8, 789
  store i32 %v1_89e0, i32* %r1.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v2_89dc to i8*
  %v3_89e4 = call i32 @function_12c84(i8* %v2_89e4, i32 %v1_89e0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89ec = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  %v2_89f8 = add i32 %v2_89ec, %stack_var_-20856.0.ph
  store i32 %v2_89f8, i32* @r0, align 4
  %v3_89fc = inttoptr i32 %v2_89f8 to i8*
  %v4_89fc = call i32 @function_12c84(i8* %v3_89fc, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32))
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8a04 = call i32 @function_121f4(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a0c = call i32 @function_12c5c(i8* %v1_8940)
  %v0_8a10 = load i32, i32* @r5, align 4
  store i32 %v0_8a10, i32* %r1.global-to-local, align 4
  store i32 %v2_8a0c, i32* @r4, align 4
  store i32 35, i32* %r0.global-to-local, align 4
  %v2_8a1c = inttoptr i32 %v0_8a10 to i32*
  %v3_8a1c = call i32 @function_12110(i32 35, i32* %v2_8a1c)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_8a1c, i32* %r1.global-to-local, align 4
  %v1_8a28 = load i32, i32* @r4, align 4
  %v2_8a28 = add i32 %v1_8a28, %stack_var_-20856.0.ph
  store i32 %v2_8a28, i32* @r0, align 4
  %v2_8a2c = inttoptr i32 %v2_8a28 to i8*
  %v3_8a2c = call i32 @function_12c84(i8* %v2_8a2c, i32 %v3_8a1c)
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8a34 = call i32 @function_1213c(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a3c = call i32 @function_12c5c(i8* %v1_8940)
  %v2_8a44 = add i32 %v2_8a3c, %stack_var_-20856.0.ph
  store i32 %v2_8a44, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  %v3_8a4c = inttoptr i32 %v2_8a44 to i8*
  %v4_8a4c = call i32 @function_12c84(i8* %v3_8a4c, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32))
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8a54 = call i32 @function_121f4(i32 36)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a5c = call i32 @function_12c5c(i8* %v1_8940)
  %v0_8a60 = load i32, i32* @r5, align 4
  store i32 %v0_8a60, i32* %r1.global-to-local, align 4
  store i32 %v2_8a5c, i32* @r4, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v2_8a6c = inttoptr i32 %v0_8a60 to i32*
  %v3_8a6c = call i32 @function_12110(i32 36, i32* %v2_8a6c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a6c, i32* %r1.global-to-local, align 4
  %v1_8a78 = load i32, i32* @r4, align 4
  %v2_8a78 = add i32 %v1_8a78, %stack_var_-20856.0.ph
  store i32 %v2_8a78, i32* @r0, align 4
  %v2_8a7c = inttoptr i32 %v2_8a78 to i8*
  %v3_8a7c = call i32 @function_12c84(i8* %v2_8a7c, i32 %v3_8a6c)
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8a84 = call i32 @function_1213c(i32 36)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a8c = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  %v2_8a98 = add i32 %v2_8a8c, %stack_var_-20856.0.ph
  store i32 %v2_8a98, i32* @r0, align 4
  %v3_8a9c = inttoptr i32 %v2_8a98 to i8*
  %v4_8a9c = call i32 @function_12c84(i8* %v3_8a9c, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32))
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_8aa4 = call i32 @function_121f4(i32 37)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8aac = call i32 @function_12c5c(i8* %v1_8940)
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 %v2_8aac, i32* @r4, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v2_8abc = inttoptr i32 %v0_8ab0 to i32*
  %v3_8abc = call i32 @function_12110(i32 37, i32* %v2_8abc)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8abc, i32* %r1.global-to-local, align 4
  %v1_8ac8 = load i32, i32* @r4, align 4
  %v2_8ac8 = add i32 %v1_8ac8, %stack_var_-20856.0.ph
  store i32 %v2_8ac8, i32* @r0, align 4
  %v2_8acc = inttoptr i32 %v2_8ac8 to i8*
  %v3_8acc = call i32 @function_12c84(i8* %v2_8acc, i32 %v3_8abc)
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_8ad4 = call i32 @function_1213c(i32 37)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8adc = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  %v2_8ae8 = add i32 %v2_8adc, %stack_var_-20856.0.ph
  store i32 %v2_8ae8, i32* @r0, align 4
  %v3_8aec = inttoptr i32 %v2_8ae8 to i8*
  %v4_8aec = call i32 @function_12c84(i8* %v3_8aec, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32))
  store i32 %v4_8aec, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v1_8af4 = load i32, i32* @r5, align 4
  %v2_8af4 = sub i32 %v6_8200, %v1_8af4
  %v3_8af4 = icmp uge i32 %v6_8200, %v1_8af4
  store i1 %v3_8af4, i1* %cpsr_c.global-to-local, align 1
  %v4_8af4 = xor i32 %v1_8af4, %v6_8200
  %v5_8af4 = xor i32 %v2_8af4, %v6_8200
  %v6_8af4 = and i32 %v5_8af4, %v4_8af4
  %v7_8af4 = icmp slt i32 %v6_8af4, 0
  store i1 %v7_8af4, i1* %cpsr_v.global-to-local, align 1
  %v8_8af4 = icmp slt i32 %v2_8af4, 0
  store i1 %v8_8af4, i1* %cpsr_n.global-to-local, align 1
  %v9_8af4 = icmp eq i32 %v6_8200, %v1_8af4
  store i1 %v9_8af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8af4, label %dec_label_pc_8bcc, label %dec_label_pc_8afc

dec_label_pc_8afc:                                ; preds = %dec_label_pc_890c
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8b00 = call i32 @function_121f4(i32 38)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_12c5c(i8* %v1_8940)
  %v0_8b0c = load i32, i32* @r5, align 4
  store i32 %v0_8b0c, i32* %r1.global-to-local, align 4
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v2_8b18 = inttoptr i32 %v0_8b0c to i32*
  %v3_8b18 = call i32 @function_12110(i32 38, i32* %v2_8b18)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8b18, i32* %r1.global-to-local, align 4
  %v1_8b24 = load i32, i32* @r4, align 4
  %v2_8b24 = add i32 %v1_8b24, %stack_var_-20856.0.ph
  store i32 %v2_8b24, i32* @r0, align 4
  %v2_8b28 = inttoptr i32 %v2_8b24 to i8*
  %v3_8b28 = call i32 @function_12c84(i8* %v2_8b28, i32 %v3_8b18)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8b30 = call i32 @function_1213c(i32 38)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b38 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  %v2_8b44 = add i32 %v2_8b38, %stack_var_-20856.0.ph
  store i32 %v2_8b44, i32* @r0, align 4
  %v3_8b48 = inttoptr i32 %v2_8b44 to i8*
  %v4_8b48 = call i32 @function_12c84(i8* %v3_8b48, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b50 = call i32 @function_12c5c(i8* %v1_8940)
  %v0_8b54 = load i32, i32* @r5, align 4
  store i32 %v0_8b54, i32* %r1.global-to-local, align 4
  store i32 %v2_8b50, i32* %r4.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v2_8b60 = inttoptr i32 %v0_8b54 to i32*
  %v3_8b60 = call i32 @function_12110(i32 43, i32* %v2_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8b60, i32* %r1.global-to-local, align 4
  %v2_8b6c = add i32 %v2_8b50, %stack_var_-20856.0.ph
  store i32 %v2_8b6c, i32* @r0, align 4
  %v2_8b70 = inttoptr i32 %v2_8b6c to i8*
  %v3_8b70 = call i32 @function_12c84(i8* %v2_8b70, i32 %v3_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b78 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_15cec.29 to i32), i32* %r1.global-to-local, align 4
  %v2_8b84 = add i32 %v2_8b78, %stack_var_-20856.0.ph
  store i32 %v2_8b84, i32* @r0, align 4
  %v2_8b88 = inttoptr i32 %v2_8b84 to i8*
  %v3_8b88 = call i32 @function_12c84(i8* %v2_8b88, i32 ptrtoint (i32* @global_var_15cec.29 to i32))
  store i32 %v6_8200, i32* %r0.global-to-local, align 4
  %v2_8b90 = call i32 @function_12c5c(i8* %v1_8b90)
  store i32 %v2_8b90, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b9c = call i32 @function_12c5c(i8* %v1_8940)
  %v2_8ba4 = add i32 %v2_8b9c, %stack_var_-20856.0.ph
  store i32 %v2_8ba4, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_8bac = load i32, i32* @r4, align 4
  store i32 %v0_8bac, i32* %r0.global-to-local, align 4
  %v3_8bb0 = trunc i32 %v0_8bac to i8
  %v4_8bb0 = call i32 @function_13150(i8 %v3_8bb0, i32 10, i32 %v2_8ba4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bb8 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  %v2_8bc4 = add i32 %v2_8bb8, %stack_var_-20856.0.ph
  store i32 %v2_8bc4, i32* @r0, align 4
  %v3_8bc8 = inttoptr i32 %v2_8bc4 to i8*
  %v4_8bc8 = call i32 @function_12c84(i8* %v3_8bc8, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32))
  store i32 %v4_8bc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bcc

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_890c, %dec_label_pc_8afc
  %v0_8bcc = load i32, i32* @r6, align 4
  %v1_8bcc = add i32 %v0_8bcc, 37
  %v2_8bcc = inttoptr i32 %v1_8bcc to i32*
  %v3_8bcc = load i32, i32* %v2_8bcc, align 4
  store i32 %v3_8bcc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bd0 = icmp slt i32 %v3_8bcc, 0
  store i1 %v1_8bd0, i1* %cpsr_n.global-to-local, align 1
  %v2_8bd0 = icmp eq i32 %v3_8bcc, 0
  store i1 %v2_8bd0, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_8bcc, 1
  br i1 %tmp208, label %dec_label_pc_8c78, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bcc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15cfc.37 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20856.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_12c84(i8* %v3_8bec, i32 ptrtoint ([9 x i8]* @global_var_15cfc.37 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  %v0_8bf0 = load i32, i32* @r6, align 4
  %v1_8bf0 = add i32 %v0_8bf0, 37
  %v2_8bf0 = inttoptr i32 %v1_8bf0 to i32*
  %v3_8bf0 = load i32, i32* %v2_8bf0, align 4
  store i32 %v3_8bf0, i32* %r3.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bf8 = icmp slt i32 %v3_8bf0, 0
  store i1 %v1_8bf8, i1* %cpsr_n.global-to-local, align 1
  %v2_8bf8 = icmp eq i32 %v3_8bf0, 0
  store i1 %v2_8bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_8bfc = load i32, i32* @r5, align 4
  store i32 %v0_8bfc, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_8bf0, 1
  br i1 %tmp209, label %dec_label_pc_8c60, label %dec_label_pc_8c04

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8c04
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c08 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_8c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_8c18 = and i32 %v3_8c10, 33554432
  %v2_8c18 = icmp ne i32 %v1_8c18, 0
  store i1 %v2_8c18, i1* %cpsr_c.global-to-local, align 1
  %v3_8c18 = mul i32 %v3_8c10, 128
  %v1_8c1c = add i32 %v3_8c18, 1472
  %v2_8c20 = add i32 %v2_8c08, %stack_var_-20856.0.ph
  store i32 %v2_8c20, i32* @r0, align 4
  %v0_8c24 = load i32, i32* @r7, align 4
  %v2_8c24 = add i32 %v1_8c1c, %v0_8c24
  store i32 %v2_8c24, i32* %r1.global-to-local, align 4
  %v2_8c28 = inttoptr i32 %v2_8c20 to i8*
  %v3_8c28 = call i32 @function_12c84(i8* %v2_8c28, i32 %v2_8c24)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c30 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d08.39 to i32), i32* %r1.global-to-local, align 4
  %v2_8c3c = add i32 %v2_8c30, %stack_var_-20856.0.ph
  store i32 %v2_8c3c, i32* @r0, align 4
  %v3_8c40 = inttoptr i32 %v2_8c3c to i8*
  %v4_8c40 = call i32 @function_12c84(i8* %v3_8c40, i32 ptrtoint ([3 x i8]* @global_var_15d08.39 to i32))
  store i32 %v4_8c40, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_8c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8c48, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* @r6, align 4
  %v1_8c4c = add i32 %v0_8c4c, 37
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v1_8c50 = add i32 %v3_8c48, 1
  store i32 %v1_8c50, i32* %ip.global-to-local, align 4
  %v2_8c54 = sub i32 %v3_8c4c, %v1_8c50
  %v3_8c54 = icmp uge i32 %v3_8c4c, %v1_8c50
  store i1 %v3_8c54, i1* %cpsr_c.global-to-local, align 1
  %v4_8c54 = xor i32 %v3_8c4c, %v1_8c50
  %v5_8c54 = xor i32 %v2_8c54, %v3_8c4c
  %v6_8c54 = and i32 %v5_8c54, %v4_8c54
  %v7_8c54 = icmp slt i32 %v6_8c54, 0
  store i1 %v7_8c54, i1* %cpsr_v.global-to-local, align 1
  %v8_8c54 = icmp slt i32 %v2_8c54, 0
  store i1 %v8_8c54, i1* %cpsr_n.global-to-local, align 1
  %v9_8c54 = icmp eq i32 %v3_8c4c, %v1_8c50
  store i1 %v9_8c54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8c50, i32* %stack_var_-40, align 4
  %v8_8c5c = icmp sgt i32 %v3_8c4c, %v1_8c50
  br i1 %v8_8c5c, label %dec_label_pc_8c04, label %dec_label_pc_8c60

dec_label_pc_8c60:                                ; preds = %dec_label_pc_8c04, %dec_label_pc_8bd8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c64 = call i32 @function_12c5c(i8* %v1_8940)
  %v2_8c6c = add i32 %v2_8c64, %stack_var_-20856.0.ph
  store i32 %v2_8c6c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  %v3_8c74 = inttoptr i32 %v2_8c6c to i8*
  %v4_8c74 = call i32 @function_12c84(i8* %v3_8c74, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32))
  store i32 %v4_8c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8bcc, %dec_label_pc_8c60
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c7c = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  %v2_8c88 = add i32 %v2_8c7c, %stack_var_-20856.0.ph
  store i32 %v2_8c88, i32* @r0, align 4
  %v3_8c8c = inttoptr i32 %v2_8c88 to i8*
  %v4_8c8c = call i32 @function_12c84(i8* %v3_8c8c, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32))
  store i32 %v4_8c8c, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_8c94, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_8c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c94, label %dec_label_pc_8cb4, label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c78
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ca0 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v2_8cac = add i32 %v2_8ca0, %stack_var_-20856.0.ph
  store i32 %v2_8cac, i32* @r0, align 4
  %v2_8cb0 = inttoptr i32 %v2_8cac to i8*
  %v3_8cb0 = call i32 @function_12c84(i8* %v2_8cb0, i32 %v6_8200)
  store i32 %v3_8cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8cb4

dec_label_pc_8cb4:                                ; preds = %dec_label_pc_8c78, %dec_label_pc_8c9c
  %v0_8cb4 = load i32, i32* @r7, align 4
  %v1_8cb4 = add i32 %v0_8cb4, 1440
  store i32 %v1_8cb4, i32* %r4.global-to-local, align 4
  %v0_8cb8 = load i32, i32* @r6, align 4
  store i32 %v0_8cb8, i32* %r0.global-to-local, align 4
  store i32 %v1_8cb4, i32* %r1.global-to-local, align 4
  %v2_8cc0 = inttoptr i32 %v0_8cb8 to i8*
  %v3_8cc0 = call i32 @function_1303c(i8* %v2_8cc0, i32 %v1_8cb4)
  store i32 %v3_8cc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8cc4 = icmp slt i32 %v3_8cc0, 0
  store i1 %v1_8cc4, i1* %cpsr_n.global-to-local, align 1
  %v2_8cc4 = icmp eq i32 %v3_8cc0, 0
  store i1 %v2_8cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8cc4, label %dec_label_pc_960c, label %dec_label_pc_8ccc

dec_label_pc_8ccc:                                ; preds = %dec_label_pc_8cb4, %dec_label_pc_960c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8cd0 = load i32, i32* @r6, align 4
  %v1_8cd0 = add i32 %v0_8cd0, -1431
  %v2_8cd0 = inttoptr i32 %v1_8cd0 to i32*
  %v3_8cd0 = load i32, i32* %v2_8cd0, align 4
  store i32 %v3_8cd0, i32* @r4, align 4
  %v2_8cd4 = call i32 @function_12c5c(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8cd4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ce4 = load i32, i32* @r4, align 4
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  %v5_8ce8 = call i32 @function_13e4c(i32 %v0_8ce4, i32* %v4_8ce8, i32 %v2_8cd4, i32 16384)
  store i32 %v5_8ce8, i32* %r0.global-to-local, align 4
  %v0_8cec = load i32, i32* @r6, align 4
  %v1_8cec = add i32 %v0_8cec, -1431
  %v2_8cec = inttoptr i32 %v1_8cec to i32*
  %v3_8cec = load i32, i32* %v2_8cec, align 4
  store i32 %v3_8cec, i32* %r0.global-to-local, align 4
  %v3_8cf4 = udiv i32 %v3_8cec, 32
  %v3_8cf8 = mul nuw nsw i32 %v3_8cf4, 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8d00 = add i32 %v3_8cf8, %v2_8748
  store i32 %v2_8d00, i32* %r3.global-to-local, align 4
  %v1_8d04 = add i32 %v2_8d00, -164
  %v2_8d04 = inttoptr i32 %v1_8d04 to i32*
  %v3_8d04 = load i32, i32* %v2_8d04, align 4
  %v1_8d08 = urem i32 %v3_8cec, 32
  %v1_8d0c = load i32, i32* %fp.global-to-local, align 4
  %v7_8d0c = shl i32 %v1_8d0c, %v1_8d08
  %v8_8d0c = or i32 %v7_8d0c, %v3_8d04
  store i32 %v8_8d0c, i32* %r2.global-to-local, align 4
  %v0_8d10 = load i32, i32* @sl, align 4
  %v2_8d10 = sub i32 %v0_8d10, %v3_8cec
  %v3_8d10 = icmp uge i32 %v0_8d10, %v3_8cec
  store i1 %v3_8d10, i1* %cpsr_c.global-to-local, align 1
  %v4_8d10 = xor i32 %v0_8d10, %v3_8cec
  %v5_8d10 = xor i32 %v2_8d10, %v0_8d10
  %v6_8d10 = and i32 %v5_8d10, %v4_8d10
  %v7_8d10 = icmp slt i32 %v6_8d10, 0
  store i1 %v7_8d10, i1* %cpsr_v.global-to-local, align 1
  %v8_8d10 = icmp slt i32 %v2_8d10, 0
  store i1 %v8_8d10, i1* %cpsr_n.global-to-local, align 1
  %v9_8d10 = icmp eq i32 %v0_8d10, %v3_8cec
  store i1 %v9_8d10, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_8d0c, i32* %v2_8d04, align 4
  %v0_8d1c = load i32, i32* %sb.global-to-local, align 4
  %v1_8d1c = load i32, i32* @r6, align 4
  %v2_8d1c = add i32 %v1_8d1c, -1419
  %v3_8d1c = inttoptr i32 %v2_8d1c to i32*
  store i32 %v0_8d1c, i32* %v3_8d1c, align 4
  %v0_8d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i8
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = add i32 %v2_8d20, -1427
  %v4_8d20 = inttoptr i32 %v3_8d20 to i8*
  store i8 %v1_8d20, i8* %v4_8d20, align 1
  %v0_8d24 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_8d24 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_8d24 = xor i1 %v0_8d24, %v1_8d24
  br i1 %v2_8d24, label %dec_label_pc_8d28, label %dec_label_pc_8630

dec_label_pc_8d28:                                ; preds = %dec_label_pc_8ccc
  %v0_8d28 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d30:                                ; preds = %dec_label_pc_8608
  %v1_8d30 = add i32 %v3_8900, -1431
  %v2_8d30 = inttoptr i32 %v1_8d30 to i32*
  %v3_8d30 = load i32, i32* %v2_8d30, align 4
  store i32 %v3_8d30, i32* %r0.global-to-local, align 4
  %v3_8d38 = udiv i32 %v3_8d30, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d3c = mul nuw nsw i32 %v3_8d38, 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8d44 = add i32 %v3_8d3c, %v2_8748
  store i32 %v2_8d44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %.thread24, %.thread35, %dec_label_pc_8d30
  %v1_8d54 = phi i32 [ %v4_85ec, %.thread35 ], [ %v4_85cc, %.thread24 ], [ %v3_8d30, %dec_label_pc_8d30 ]
  %v1_8d58 = phi i32 [ %v3_8600, %.thread35 ], [ %v3_85e0, %.thread24 ], [ %v2_8d44, %dec_label_pc_8d30 ]
  %v1_8d48 = add i32 %v1_8d58, -164
  %v2_8d48 = inttoptr i32 %v1_8d48 to i32*
  %v3_8d48 = load i32, i32* %v2_8d48, align 4
  %v1_8d4c = urem i32 %v1_8d54, 32
  store i32 %v1_8d4c, i32* %r1.global-to-local, align 4
  %v1_8d50 = load i32, i32* %fp.global-to-local, align 4
  %v7_8d50 = shl i32 %v1_8d50, %v1_8d4c
  %v8_8d50 = or i32 %v7_8d50, %v3_8d48
  store i32 %v8_8d50, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* @sl, align 4
  %v2_8d54 = sub i32 %v0_8d54, %v1_8d54
  %v3_8d54 = icmp uge i32 %v0_8d54, %v1_8d54
  store i1 %v3_8d54, i1* %cpsr_c.global-to-local, align 1
  %v4_8d54 = xor i32 %v0_8d54, %v1_8d54
  %v5_8d54 = xor i32 %v2_8d54, %v0_8d54
  %v6_8d54 = and i32 %v5_8d54, %v4_8d54
  %v7_8d54 = icmp slt i32 %v6_8d54, 0
  store i1 %v7_8d54, i1* %cpsr_v.global-to-local, align 1
  %v8_8d54 = icmp slt i32 %v2_8d54, 0
  store i1 %v8_8d54, i1* %cpsr_n.global-to-local, align 1
  %v9_8d54 = icmp eq i32 %v0_8d54, %v1_8d54
  store i1 %v9_8d54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d50, i32* %v2_8d48, align 4
  %v2_8d5c = xor i1 %v8_8d54, %v7_8d54
  br i1 %v2_8d5c, label %dec_label_pc_8d60, label %dec_label_pc_8630

dec_label_pc_8d60:                                ; preds = %dec_label_pc_8d48
  %v0_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d60 = add i32 %v0_8d60, 1
  store i32 %v1_8d60, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d68:                                ; preds = %dec_label_pc_85b8
  %v1_8d68 = add i32 %v3_8900, -1423
  %v2_8d68 = inttoptr i32 %v1_8d68 to i32*
  %v3_8d68 = load i32, i32* %v2_8d68, align 4
  %v1_8d6c = load i32, i32* %sb.global-to-local, align 4
  %v2_8d6c = sub i32 %v1_8d6c, %v3_8d68
  store i32 %v2_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = add i32 %v2_8d6c, -30
  %v2_8d70 = icmp ugt i32 %v2_8d6c, 29
  store i1 %v2_8d70, i1* %cpsr_c.global-to-local, align 1
  %v3_8d70 = sub i32 29, %v2_8d6c
  %v4_8d70 = and i32 %v3_8d70, %v2_8d6c
  %v5_8d70 = icmp slt i32 %v4_8d70, 0
  store i1 %v5_8d70, i1* %cpsr_v.global-to-local, align 1
  %v6_8d70 = icmp slt i32 %v1_8d70, 0
  store i1 %v6_8d70, i1* %cpsr_n.global-to-local, align 1
  %v7_8d70 = icmp eq i32 %v2_8d6c, 30
  store i1 %v7_8d70, i1* %cpsr_z.global-to-local, align 1
  %v2_8d74 = xor i1 %v7_8d70, true
  %v3_8d74 = and i1 %v2_8d70, %v2_8d74
  br i1 %v3_8d74, label %dec_label_pc_8618, label %dec_label_pc_8d78

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d68
  %v1_8d78 = add i32 %v3_8900, -1431
  %v2_8d78 = inttoptr i32 %v1_8d78 to i32*
  %v3_8d78 = load i32, i32* %v2_8d78, align 4
  store i32 %v3_8d78, i32* %r0.global-to-local, align 4
  %v3_8d80 = udiv i32 %v3_8d78, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d84 = mul nuw nsw i32 %v3_8d80, 4
  store i32 %v3_8d84, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_881c
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8dd8 = call i32 @function_12cfc(i32 %v2_8280, i32 10240)
  store i32 %v2_8dd8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  %v1_8de4 = add i32 %v0_8de4, -1456
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_8df0 = call i32 @function_13dec(i32 %v3_8de4, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_8df0, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8df8 = icmp slt i32 %v5_8df0, 0
  store i1 %v1_8df8, i1* %cpsr_n.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v5_8df0, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v5_8df0, 1
  br i1 %tmp210, label %dec_label_pc_9a7c, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d0c.41 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_8e14 = call i32 @function_12d20(i32 %v2_8280, i32 %v5_8df0, i32 ptrtoint ([5 x i8]* @global_var_15d0c.41 to i32), i32 4)
  store i32 %v5_8e14, i32* %r0.global-to-local, align 4
  %v1_8e18 = add i32 %v5_8e14, 1
  %v2_8e18 = icmp eq i32 %v5_8e14, -1
  store i1 %v2_8e18, i1* %cpsr_c.global-to-local, align 1
  %v3_8e18 = sub i32 0, %v5_8e14
  %v4_8e18 = and i32 %v1_8e18, %v3_8e18
  %v5_8e18 = icmp slt i32 %v4_8e18, 0
  store i1 %v5_8e18, i1* %cpsr_v.global-to-local, align 1
  %v6_8e18 = icmp slt i32 %v1_8e18, 0
  store i1 %v6_8e18, i1* %cpsr_n.global-to-local, align 1
  %v7_8e18 = icmp eq i32 %v1_8e18, 0
  store i1 %v7_8e18, i1* %cpsr_z.global-to-local, align 1
  %v0_9914 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_8e18, label %dec_label_pc_9914, label %dec_label_pc_8e20

dec_label_pc_8e20:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_9914
  store i32 ptrtoint ([5 x i8]* @global_var_15d0c.41 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_9914, i32* %r1.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_8e30 = call i32 @function_12d20(i32 %v2_8280, i32 %v0_9914, i32 ptrtoint ([5 x i8]* @global_var_15d0c.41 to i32), i32 4)
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8e3c = add i32 %v5_8e30, %v2_8748
  store i32 %v2_8e3c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_8e44 = load i32, i32* @r6, align 4
  %v4_8e44 = add i32 %v3_8e44, %v2_8e3c
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 0, i8* %v5_8e44, align 1
  %v0_8e48 = load i32, i32* @r5, align 4
  store i32 %v0_8e48, i32* %r1.global-to-local, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v2_8e50 = inttoptr i32 %v0_8e48 to i32*
  %v3_8e50 = call i32 @function_12110(i32 49, i32* %v2_8e50)
  %v0_8e54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e54, i32* @r1, align 4
  store i32 %v3_8e50, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e60 = call i32 @function_12fb0(i8* %tmp199, i32 %v0_8e54, i32 %v3_8e50)
  store i32 %v4_8e60, i32* %r0.global-to-local, align 4
  %v1_8e64 = add i32 %v4_8e60, 1
  %v2_8e64 = icmp eq i32 %v4_8e60, -1
  store i1 %v2_8e64, i1* %cpsr_c.global-to-local, align 1
  %v3_8e64 = sub i32 0, %v4_8e60
  %v4_8e64 = and i32 %v1_8e64, %v3_8e64
  %v5_8e64 = icmp slt i32 %v4_8e64, 0
  store i1 %v5_8e64, i1* %cpsr_v.global-to-local, align 1
  %v6_8e64 = icmp slt i32 %v1_8e64, 0
  store i1 %v6_8e64, i1* %cpsr_n.global-to-local, align 1
  %v7_8e64 = icmp eq i32 %v1_8e64, 0
  store i1 %v7_8e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e64, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_8e20
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_8e6c = load i32, i32* @r8, align 4
  %v3_8e6c = add i32 %v2_8e6c, -4
  %v4_8e6c = inttoptr i32 %v3_8e6c to i32*
  store i32 2, i32* %v4_8e6c, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_8e20, %bb211
  %v0_8e70 = load i32, i32* @r5, align 4
  store i32 %v0_8e70, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v2_8e78 = inttoptr i32 %v0_8e70 to i32*
  %v3_8e78 = call i32 @function_12110(i32 48, i32* %v2_8e78)
  %v0_8e7c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e7c, i32* @r1, align 4
  store i32 %v3_8e78, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_12fb0(i8* %tmp199, i32 %v0_8e7c, i32 %v3_8e78)
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v1_8e8c = add i32 %v4_8e88, 1
  %v2_8e8c = icmp eq i32 %v4_8e88, -1
  store i1 %v2_8e8c, i1* %cpsr_c.global-to-local, align 1
  %v3_8e8c = sub i32 0, %v4_8e88
  %v4_8e8c = and i32 %v1_8e8c, %v3_8e8c
  %v5_8e8c = icmp slt i32 %v4_8e8c, 0
  store i1 %v5_8e8c, i1* %cpsr_v.global-to-local, align 1
  %v6_8e8c = icmp slt i32 %v1_8e8c, 0
  store i1 %v6_8e8c, i1* %cpsr_n.global-to-local, align 1
  %v7_8e8c = icmp eq i32 %v1_8e8c, 0
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8e94 = load i32, i32* @r8, align 4
  %v3_8e94 = add i32 %v2_8e94, -4
  %v4_8e94 = inttoptr i32 %v3_8e94 to i32*
  store i32 1, i32* %v4_8e94, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 %v0_8e98, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_8ea0 = load i32, i32* @r8, align 4
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  store i32 %v0_8e98, i32* %v2_8ea0, align 4
  %v2_8ea4 = inttoptr i32 %v0_8e98 to i32*
  %v3_8ea4 = call i32 @function_12110(i32 47, i32* %v2_8ea4)
  %v0_8ea8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  store i32 %v3_8ea4, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8eb4 = call i32 @function_12fb0(i8* %tmp199, i32 %v0_8ea8, i32 %v3_8ea4)
  store i32 %v4_8eb4, i32* %r0.global-to-local, align 4
  %v1_8eb8 = add i32 %v4_8eb4, 1
  %v2_8eb8 = icmp eq i32 %v4_8eb4, -1
  store i1 %v2_8eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_8eb8 = sub i32 0, %v4_8eb4
  %v4_8eb8 = and i32 %v1_8eb8, %v3_8eb8
  %v5_8eb8 = icmp slt i32 %v4_8eb8, 0
  store i1 %v5_8eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_8eb8 = icmp slt i32 %v1_8eb8, 0
  store i1 %v6_8eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_8eb8 = icmp eq i32 %v1_8eb8, 0
  store i1 %v7_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8eb8, label %.thread47, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %.thread46
  %v0_8ec0 = load i32, i32* @r5, align 4
  store i32 %v0_8ec0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v2_8ec8 = inttoptr i32 %v0_8ec0 to i32*
  %v3_8ec8 = call i32 @function_12110(i32 47, i32* %v2_8ec8)
  %v0_8ecc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ecc, i32* @r1, align 4
  store i32 %v3_8ec8, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8ed8 = call i32 @function_12fb0(i8* %tmp199, i32 %v0_8ecc, i32 %v3_8ec8)
  store i32 %v4_8ed8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8ee4 = add i32 %v4_8ed8, %v2_8748
  store i32 %v2_8ee4, i32* %r3.global-to-local, align 4
  %v1_8ee8 = load i32, i32* @r6, align 4
  %v2_8ee8 = add i32 %v1_8ee8, %v2_8ee4
  %v3_8ee8 = inttoptr i32 %v2_8ee8 to i8*
  %v4_8ee8 = load i8, i8* %v3_8ee8, align 1
  %v2_8ef0 = icmp ugt i8 %v4_8ee8, 31
  store i1 %v2_8ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8ef0 = icmp ult i8 %v4_8ee8, 32
  store i1 %v6_8ef0, i1* %cpsr_n.global-to-local, align 1
  %v7_8ef0 = icmp eq i8 %v4_8ee8, 32
  store i1 %v7_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v2_8ef8 = zext i1 %v7_8ef0 to i32
  %v2_8ef8.v4_8ed8 = add i32 %v2_8ef8, %v4_8ed8
  store i32 %v2_8ef8.v4_8ed8, i32* @r4, align 4
  %v2_8efc = add i32 %v2_8ef8.v4_8ed8, %v2_8280
  store i32 %v2_8efc, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8efc, i32* %r0.global-to-local, align 4
  %v1_8f08 = load i32, i32* %fp.global-to-local, align 4
  %v2_8f08 = sub i32 %v1_8f08, %v2_8ef8.v4_8ed8
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8f10 = call i32 @function_12d20(i32 %v2_8efc, i32 %v2_8f08, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32 2)
  store i32 %v5_8f10, i32* %r0.global-to-local, align 4
  %v1_8f14 = add i32 %v5_8f10, 1
  %v2_8f14 = icmp eq i32 %v5_8f10, -1
  store i1 %v2_8f14, i1* %cpsr_c.global-to-local, align 1
  %v3_8f14 = sub i32 0, %v5_8f10
  %v4_8f14 = and i32 %v1_8f14, %v3_8f14
  %v5_8f14 = icmp slt i32 %v4_8f14, 0
  store i1 %v5_8f14, i1* %cpsr_v.global-to-local, align 1
  %v6_8f14 = icmp slt i32 %v1_8f14, 0
  store i1 %v6_8f14, i1* %cpsr_n.global-to-local, align 1
  %v7_8f14 = icmp eq i32 %v1_8f14, 0
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8f10, i32* %r2.global-to-local, align 4
  br i1 %v7_8f14, label %.thread47, label %dec_label_pc_8f20

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ec0
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_8f28 = load i32, i32* @r4, align 4
  %v2_8f28 = add i32 %v1_8f28, %v2_8748
  %v1_8f2c = add i32 %v5_8f10, -1
  %v2_8f2c = icmp ne i32 %v5_8f10, 0
  store i1 %v2_8f2c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f2c = sub i32 0, %v5_8f10
  %v4_8f2c = and i32 %v5_8f10, %v3_8f2c
  %v5_8f2c = icmp slt i32 %v4_8f2c, 0
  store i1 %v5_8f2c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f2c = icmp slt i32 %v1_8f2c, 0
  store i1 %v6_8f2c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f2c = icmp eq i32 %v5_8f10, 1
  store i1 %v7_8f2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f30 = add i32 %v2_8f28, -20736
  store i32 %v1_8f30, i32* %r3.global-to-local, align 4
  %v7_8f34 = icmp sgt i32 %v5_8f10, 1
  br i1 %v7_8f34, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_8f20
  %v9_8f34 = add i32 %v5_8f10, -2
  store i32 %v9_8f34, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_8f20, %bb213
  %v3_8f3c = phi i32 [ %v5_8f10, %dec_label_pc_8f20 ], [ %v9_8f34, %bb213 ]
  %v1_8f38 = add i32 %v2_8f28, -20773
  store i32 %v1_8f38, i32* %r3.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r5, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v4_8f3c = add i32 %v3_8f3c, %v1_8f38
  %v5_8f3c = inttoptr i32 %v4_8f3c to i8*
  store i8 %v1_8f3c, i8* %v5_8f3c, align 1
  %v0_8f40 = load i32, i32* @r6, align 4
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  %v1_8f44 = inttoptr i32 %v0_8f40 to i8*
  %v2_8f44 = call i32 @function_12c5c(i8* %v1_8f44)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 %v2_8f44, i32* @r4, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_8f54 = inttoptr i32 %v0_8f48 to i32*
  %v3_8f54 = call i32 @function_12110(i32 46, i32* %v2_8f54)
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* @r1, align 4
  store i32 %v3_8f54, i32* %r2.global-to-local, align 4
  %v0_8f60 = load i32, i32* @r6, align 4
  store i32 %v0_8f60, i32* %r0.global-to-local, align 4
  %v3_8f64 = inttoptr i32 %v0_8f60 to i8*
  %v4_8f64 = call i32 @function_12fb0(i8* %v3_8f64, i32 %v0_8f58, i32 %v3_8f54)
  store i32 %v4_8f64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8f68 = icmp slt i32 %v4_8f64, 0
  store i1 %v1_8f68, i1* %cpsr_n.global-to-local, align 1
  %v2_8f68 = icmp eq i32 %v4_8f64, 0
  store i1 %v2_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f68, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8f70 = load i32, i32* @r8, align 4
  %v3_8f70 = inttoptr i32 %v2_8f70 to i32*
  store i32 1, i32* %v3_8f70, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_8ec0, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8f80 = load i32, i32* @r8, align 4
  %v2_8f80 = add i32 %v1_8f80, 4
  %v3_8f80 = inttoptr i32 %v2_8f80 to i32*
  store i32 0, i32* %v3_8f80, align 4
  %v3_8f84 = call i32 @function_12110(i32 44, i32* null)
  %v0_8f88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8f88, i32* @r1, align 4
  store i32 %v3_8f84, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8f94 = call i32 @function_12fb0(i8* %tmp199, i32 %v0_8f88, i32 %v3_8f84)
  store i32 %v4_8f94, i32* %r0.global-to-local, align 4
  %v1_8f9c = add i32 %v4_8f94, 1
  %v2_8f9c = icmp eq i32 %v4_8f94, -1
  store i1 %v2_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f9c = sub i32 0, %v4_8f94
  %v4_8f9c = and i32 %v1_8f9c, %v3_8f9c
  %v5_8f9c = icmp slt i32 %v4_8f9c, 0
  store i1 %v5_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f9c = icmp slt i32 %v1_8f9c, 0
  store i1 %v6_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f9c = icmp eq i32 %v1_8f9c, 0
  store i1 %v7_8f9c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_8f9c, label %.thread48, label %dec_label_pc_8fa8

dec_label_pc_8fa8:                                ; preds = %.thread47
  %v0_8fa8 = load i32, i32* @r6, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v2_8fb0 = inttoptr i32 %v0_8fa8 to i32*
  %v3_8fb0 = call i32 @function_12110(i32 44, i32* %v2_8fb0)
  %v0_8fb4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fb4, i32* @r1, align 4
  store i32 %v3_8fb0, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8fc0 = call i32 @function_12fb0(i8* %tmp199, i32 %v0_8fb4, i32 %v3_8fb0)
  store i32 %v4_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8fcc = add i32 %v4_8fc0, %v2_8748
  store i32 %v2_8fcc, i32* %r3.global-to-local, align 4
  %v1_8fd0 = load i32, i32* @r5, align 4
  %v2_8fd0 = add i32 %v1_8fd0, %v2_8fcc
  %v3_8fd0 = inttoptr i32 %v2_8fd0 to i8*
  %v4_8fd0 = load i8, i8* %v3_8fd0, align 1
  %v2_8fd8 = icmp ugt i8 %v4_8fd0, 31
  store i1 %v2_8fd8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8fd8 = icmp ult i8 %v4_8fd0, 32
  store i1 %v6_8fd8, i1* %cpsr_n.global-to-local, align 1
  %v7_8fd8 = icmp eq i8 %v4_8fd0, 32
  store i1 %v7_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_8fe0 = zext i1 %v7_8fd8 to i32
  %v2_8fe0.v4_8fc0 = add i32 %v2_8fe0, %v4_8fc0
  store i32 %v2_8fe0.v4_8fc0, i32* @r4, align 4
  %v2_8fe4 = add i32 %v2_8fe0.v4_8fc0, %v2_8280
  store i32 %v2_8fe4, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8fe4, i32* %r0.global-to-local, align 4
  %v1_8ff0 = load i32, i32* %fp.global-to-local, align 4
  %v2_8ff0 = sub i32 %v1_8ff0, %v2_8fe0.v4_8fc0
  store i32 %v2_8ff0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8ff8 = call i32 @function_12d20(i32 %v2_8fe4, i32 %v2_8ff0, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32 2)
  store i32 %v5_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = add i32 %v5_8ff8, 1
  %v2_8ffc = icmp eq i32 %v5_8ff8, -1
  store i1 %v2_8ffc, i1* %cpsr_c.global-to-local, align 1
  %v3_8ffc = sub i32 0, %v5_8ff8
  %v4_8ffc = and i32 %v1_8ffc, %v3_8ffc
  %v5_8ffc = icmp slt i32 %v4_8ffc, 0
  store i1 %v5_8ffc, i1* %cpsr_v.global-to-local, align 1
  %v6_8ffc = icmp slt i32 %v1_8ffc, 0
  store i1 %v6_8ffc, i1* %cpsr_n.global-to-local, align 1
  %v7_8ffc = icmp eq i32 %v1_8ffc, 0
  store i1 %v7_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8ff8, i32* %r2.global-to-local, align 4
  br i1 %v7_8ffc, label %.thread48, label %dec_label_pc_9008

dec_label_pc_9008:                                ; preds = %dec_label_pc_8fa8
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9010 = load i32, i32* @r4, align 4
  %v2_9010 = add i32 %v1_9010, %v2_8748
  %v1_9014 = add i32 %v5_8ff8, -1
  %v2_9014 = icmp ne i32 %v5_8ff8, 0
  store i1 %v2_9014, i1* %cpsr_c.global-to-local, align 1
  %v3_9014 = sub i32 0, %v5_8ff8
  %v4_9014 = and i32 %v5_8ff8, %v3_9014
  %v5_9014 = icmp slt i32 %v4_9014, 0
  store i1 %v5_9014, i1* %cpsr_v.global-to-local, align 1
  %v6_9014 = icmp slt i32 %v1_9014, 0
  store i1 %v6_9014, i1* %cpsr_n.global-to-local, align 1
  %v7_9014 = icmp eq i32 %v5_8ff8, 1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  %v1_9018 = add i32 %v2_9010, -20736
  store i32 %v1_9018, i32* %r3.global-to-local, align 4
  %v7_901c = icmp sgt i32 %v5_8ff8, 1
  br i1 %v7_901c, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_9008
  %v9_901c = add i32 %v5_8ff8, -2
  store i32 %v9_901c, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_9008, %bb216
  %v3_9024 = phi i32 [ %v5_8ff8, %dec_label_pc_9008 ], [ %v9_901c, %bb216 ]
  %v1_9020 = add i32 %v2_9010, -20773
  store i32 %v1_9020, i32* %r3.global-to-local, align 4
  %v0_9024 = load i32, i32* @r6, align 4
  %v1_9024 = trunc i32 %v0_9024 to i8
  %v4_9024 = add i32 %v3_9024, %v1_9020
  %v5_9024 = inttoptr i32 %v4_9024 to i8*
  store i8 %v1_9024, i8* %v5_9024, align 1
  %v0_9028 = load i32, i32* @r5, align 4
  store i32 %v0_9028, i32* %r0.global-to-local, align 4
  %v1_902c = inttoptr i32 %v0_9028 to i8*
  %v2_902c = call i32 @function_12c5c(i8* %v1_902c)
  %v0_9030 = load i32, i32* @r6, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 %v2_902c, i32* @r4, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v2_903c = inttoptr i32 %v0_9030 to i32*
  %v3_903c = call i32 @function_12110(i32 45, i32* %v2_903c)
  %v0_9040 = load i32, i32* @r4, align 4
  store i32 %v0_9040, i32* @r1, align 4
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v0_9048 = load i32, i32* @r5, align 4
  store i32 %v0_9048, i32* %r0.global-to-local, align 4
  %v3_904c = inttoptr i32 %v0_9048 to i8*
  %v4_904c = call i32 @function_12fb0(i8* %v3_904c, i32 %v0_9040, i32 %v3_903c)
  store i32 %v4_904c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9050 = icmp slt i32 %v4_904c, 0
  store i1 %v1_9050, i1* %cpsr_n.global-to-local, align 1
  %v2_9050 = icmp eq i32 %v4_904c, 0
  store i1 %v2_9050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9050, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9058 = load i32, i32* @r8, align 4
  %v3_9058 = add i32 %v2_9058, 4
  %v4_9058 = inttoptr i32 %v3_9058 to i32*
  store i32 1, i32* %v4_9058, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_8fa8, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v3_9064 = call i32 @function_12110(i32 43, i32* null)
  %v0_9068 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9068, i32* @r1, align 4
  store i32 %v3_9064, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9074 = call i32 @function_12fb0(i8* %tmp199, i32 %v0_9068, i32 %v3_9064)
  store i32 %v4_9074, i32* %r0.global-to-local, align 4
  %v1_9078 = add i32 %v4_9074, 1
  %v2_9078 = icmp eq i32 %v4_9074, -1
  store i1 %v2_9078, i1* %cpsr_c.global-to-local, align 1
  %v3_9078 = sub i32 0, %v4_9074
  %v4_9078 = and i32 %v1_9078, %v3_9078
  %v5_9078 = icmp slt i32 %v4_9078, 0
  store i1 %v5_9078, i1* %cpsr_v.global-to-local, align 1
  %v6_9078 = icmp slt i32 %v1_9078, 0
  store i1 %v6_9078, i1* %cpsr_n.global-to-local, align 1
  %v7_9078 = icmp eq i32 %v1_9078, 0
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9078, label %.thread, label %dec_label_pc_9090

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9088 = load i32, i32* @r8, align 4
  %v3_9088 = add i32 %v2_9088, 8
  %v4_9088 = inttoptr i32 %v3_9088 to i32*
  store i32 0, i32* %v4_9088, align 4
  br label %dec_label_pc_9124

dec_label_pc_9090:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v3_9098 = call i32 @function_12110(i32 43, i32* null)
  %v0_909c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_909c, i32* @r1, align 4
  store i32 %v3_9098, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_90a8 = call i32 @function_12fb0(i8* %tmp199, i32 %v0_909c, i32 %v3_9098)
  store i32 %v4_90a8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_90b4 = add i32 %v4_90a8, %v2_8748
  store i32 %v2_90b4, i32* %r3.global-to-local, align 4
  %v1_90b8 = load i32, i32* @r5, align 4
  %v2_90b8 = add i32 %v1_90b8, %v2_90b4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i8*
  %v4_90b8 = load i8, i8* %v3_90b8, align 1
  %v2_90c0 = icmp ugt i8 %v4_90b8, 31
  store i1 %v2_90c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_90c0 = icmp ult i8 %v4_90b8, 32
  store i1 %v6_90c0, i1* %cpsr_n.global-to-local, align 1
  %v7_90c0 = icmp eq i8 %v4_90b8, 32
  store i1 %v7_90c0, i1* %cpsr_z.global-to-local, align 1
  %v2_90c8 = zext i1 %v7_90c0 to i32
  %v2_90c8.v4_90a8 = add i32 %v2_90c8, %v4_90a8
  store i32 %v2_90c8.v4_90a8, i32* @r4, align 4
  %v2_90cc = add i32 %v2_90c8.v4_90a8, %v2_8280
  store i32 %v2_90cc, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_90cc, i32* %r0.global-to-local, align 4
  %v1_90d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_90d8 = sub i32 %v1_90d8, %v2_90c8.v4_90a8
  store i32 %v2_90d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_90e0 = call i32 @function_12d20(i32 %v2_90cc, i32 %v2_90d8, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32 2)
  store i32 %v5_90e0, i32* %r0.global-to-local, align 4
  %v1_90e4 = add i32 %v5_90e0, 1
  %v2_90e4 = icmp eq i32 %v5_90e0, -1
  store i1 %v2_90e4, i1* %cpsr_c.global-to-local, align 1
  %v3_90e4 = sub i32 0, %v5_90e0
  %v4_90e4 = and i32 %v1_90e4, %v3_90e4
  %v5_90e4 = icmp slt i32 %v4_90e4, 0
  store i1 %v5_90e4, i1* %cpsr_v.global-to-local, align 1
  %v6_90e4 = icmp slt i32 %v1_90e4, 0
  store i1 %v6_90e4, i1* %cpsr_n.global-to-local, align 1
  %v7_90e4 = icmp eq i32 %v1_90e4, 0
  store i1 %v7_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_90e0, i32* %r2.global-to-local, align 4
  br i1 %v7_90e4, label %dec_label_pc_9124, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_9090
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_90f8 = load i32, i32* @r4, align 4
  %v2_90f8 = add i32 %v1_90f8, %v2_8748
  %v1_90fc = add i32 %v5_90e0, -1
  %v2_90fc = icmp ne i32 %v5_90e0, 0
  store i1 %v2_90fc, i1* %cpsr_c.global-to-local, align 1
  %v3_90fc = sub i32 0, %v5_90e0
  %v4_90fc = and i32 %v5_90e0, %v3_90fc
  %v5_90fc = icmp slt i32 %v4_90fc, 0
  store i1 %v5_90fc, i1* %cpsr_v.global-to-local, align 1
  %v6_90fc = icmp slt i32 %v1_90fc, 0
  store i1 %v6_90fc, i1* %cpsr_n.global-to-local, align 1
  %v7_90fc = icmp eq i32 %v5_90e0, 1
  store i1 %v7_90fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9100 = add i32 %v2_90f8, -20736
  store i32 %v1_9100, i32* %r3.global-to-local, align 4
  %v7_9104 = icmp sgt i32 %v5_90e0, 1
  br i1 %v7_9104, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_90f0
  %v9_9104 = add i32 %v5_90e0, -2
  store i32 %v9_9104, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_90f0, %bb219
  %v3_9118 = phi i32 [ %v5_90e0, %dec_label_pc_90f0 ], [ %v9_9104, %bb219 ]
  %v1_9108 = add i32 %v2_90f8, -20773
  store i32 %v1_9108, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_9110 = load i32, i32* @r5, align 4
  store i32 %v0_9110, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9118 = add i32 %v3_9118, %v1_9108
  %v5_9118 = inttoptr i32 %v4_9118 to i8*
  store i8 0, i8* %v5_9118, align 1
  %v2_911c = inttoptr i32 %v0_9110 to i8*
  %v3_911c = call i32 @function_12d88(i8* %v2_911c, i32 10)
  store i32 %v3_911c, i32* %r0.global-to-local, align 4
  %v1_9120 = load i32, i32* @r8, align 4
  %v2_9120 = add i32 %v1_9120, 8
  %v3_9120 = inttoptr i32 %v2_9120 to i32*
  store i32 %v3_911c, i32* %v3_9120, align 4
  br label %dec_label_pc_9124

dec_label_pc_9124:                                ; preds = %.thread, %dec_label_pc_9090, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_92fc, %dec_label_pc_927c, %dec_label_pc_9124
  %v1_9134 = phi i32 [ 0, %dec_label_pc_9124 ], [ %v0_927c, %dec_label_pc_927c ], [ %v1_9134.pre.pre, %dec_label_pc_92fc ]
  store i32 %v2_8280, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_9134 = add i32 %v1_9134, %v2_8280
  store i32 %v2_9134, i32* @r4, align 4
  %v3_9138 = call i32 @function_12110(i32 42, i32* null)
  %v0_913c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_913c, i32* @r1, align 4
  store i32 %v3_9138, i32* %r2.global-to-local, align 4
  %v0_9144 = load i32, i32* @r4, align 4
  store i32 %v0_9144, i32* %r0.global-to-local, align 4
  %v3_9148 = inttoptr i32 %v0_9144 to i8*
  %v4_9148 = call i32 @function_12fb0(i8* %v3_9148, i32 %v0_913c, i32 %v3_9138)
  store i32 %v4_9148, i32* %r0.global-to-local, align 4
  %v1_9150 = add i32 %v4_9148, 1
  %v2_9150 = icmp eq i32 %v4_9148, -1
  store i1 %v2_9150, i1* %cpsr_c.global-to-local, align 1
  %v3_9150 = sub i32 0, %v4_9148
  %v4_9150 = and i32 %v1_9150, %v3_9150
  %v5_9150 = icmp slt i32 %v4_9150, 0
  store i1 %v5_9150, i1* %cpsr_v.global-to-local, align 1
  %v6_9150 = icmp slt i32 %v1_9150, 0
  store i1 %v6_9150, i1* %cpsr_n.global-to-local, align 1
  %v7_9150 = icmp eq i32 %v1_9150, 0
  store i1 %v7_9150, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9150, label %dec_label_pc_9328, label %dec_label_pc_915c

dec_label_pc_915c:                                ; preds = %dec_label_pc_9128
  %v0_915c = load i32, i32* @r8, align 4
  %v1_915c = add i32 %v0_915c, 12
  %v2_915c = inttoptr i32 %v1_915c to i32*
  %v3_915c = load i32, i32* %v2_915c, align 4
  store i32 %v3_915c, i32* %r3.global-to-local, align 4
  %v1_9160 = add i32 %v3_915c, -4
  %v2_9160 = icmp ugt i32 %v3_915c, 3
  store i1 %v2_9160, i1* %cpsr_c.global-to-local, align 1
  %v3_9160 = sub i32 3, %v3_915c
  %v4_9160 = and i32 %v3_9160, %v3_915c
  %v5_9160 = icmp slt i32 %v4_9160, 0
  store i1 %v5_9160, i1* %cpsr_v.global-to-local, align 1
  %v6_9160 = icmp slt i32 %v1_9160, 0
  store i1 %v6_9160, i1* %cpsr_n.global-to-local, align 1
  %v7_9160 = icmp eq i32 %v3_915c, 4
  store i1 %v7_9160, i1* %cpsr_z.global-to-local, align 1
  %v8_9164 = icmp sgt i32 %v3_915c, 4
  br i1 %v8_9164, label %dec_label_pc_9328, label %dec_label_pc_9168

dec_label_pc_9168:                                ; preds = %dec_label_pc_915c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v3_9170 = call i32 @function_12110(i32 42, i32* null)
  %v0_9174 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9174, i32* @r1, align 4
  store i32 %v3_9170, i32* %r2.global-to-local, align 4
  %v0_917c = load i32, i32* @r4, align 4
  store i32 %v0_917c, i32* %r0.global-to-local, align 4
  %v3_9180 = inttoptr i32 %v0_917c to i8*
  %v4_9180 = call i32 @function_12fb0(i8* %v3_9180, i32 %v0_9174, i32 %v3_9170)
  store i32 %v4_9180, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* @r5, align 4
  %v2_9188 = add i32 %v0_9188, %v4_9180
  store i32 %v2_9188, i32* @sl, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v2_9190 = add i32 %v2_9188, %v2_8748
  store i32 %v2_9190, i32* %r3.global-to-local, align 4
  %v1_9194 = load i32, i32* @r6, align 4
  %v2_9194 = add i32 %v1_9194, %v2_9190
  %v3_9194 = inttoptr i32 %v2_9194 to i8*
  %v4_9194 = load i8, i8* %v3_9194, align 1
  %v6_9194 = zext i8 %v4_9194 to i32
  store i32 %v6_9194, i32* %r2.global-to-local, align 4
  %v2_9198 = icmp ugt i8 %v4_9194, 31
  store i1 %v2_9198, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9198 = icmp ult i8 %v4_9194, 32
  store i1 %v6_9198, i1* %cpsr_n.global-to-local, align 1
  %v7_9198 = icmp eq i8 %v4_9194, 32
  store i1 %v7_9198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9198, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_9168
  %v2_919c = add i32 %v4_9180, 1
  store i32 %v2_919c, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_9168, %bb221
  %v2_91ac = phi i32 [ %v4_9180, %dec_label_pc_9168 ], [ %v2_919c, %bb221 ]
  %v1_91a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_91a0 = sub i32 %v1_91a0, %v0_9188
  store i32 %v2_91a0, i32* %r3.global-to-local, align 4
  %v2_91a4 = sub i32 %v2_91a0, %v2_91ac
  store i32 %v2_91a4, i32* @r7, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  %v2_91a8 = add i32 %v0_91a8, %v2_91ac
  store i32 %v2_91a8, i32* @r6, align 4
  br i1 %v7_9198, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_91ac = add i32 %v2_91ac, %v0_9188
  store i32 %v3_91ac, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_91a4, i32* %r1.global-to-local, align 4
  store i32 %v2_91a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91c0 = call i32 @function_12d20(i32 %v2_91a8, i32 %v2_91a4, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32 2)
  store i32 %v5_91c0, i32* %r0.global-to-local, align 4
  %v1_91c4 = add i32 %v5_91c0, 1
  %v2_91c4 = icmp eq i32 %v5_91c0, -1
  store i1 %v2_91c4, i1* %cpsr_c.global-to-local, align 1
  %v3_91c4 = sub i32 0, %v5_91c0
  %v4_91c4 = and i32 %v1_91c4, %v3_91c4
  %v5_91c4 = icmp slt i32 %v4_91c4, 0
  store i1 %v5_91c4, i1* %cpsr_v.global-to-local, align 1
  %v6_91c4 = icmp slt i32 %v1_91c4, 0
  store i1 %v6_91c4, i1* %cpsr_n.global-to-local, align 1
  %v7_91c4 = icmp eq i32 %v1_91c4, 0
  store i1 %v7_91c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_91c0, i32* @r4, align 4
  br i1 %v7_91c4, label %dec_label_pc_927c, label %dec_label_pc_91d0

dec_label_pc_91d0:                                ; preds = %bb224
  store i32 %v2_8280, i32* %r2.global-to-local, align 4
  %v1_91d4 = add i32 %v5_91c0, -1
  %v2_91d4 = icmp ne i32 %v5_91c0, 0
  store i1 %v2_91d4, i1* %cpsr_c.global-to-local, align 1
  %v3_91d4 = sub i32 0, %v5_91c0
  %v4_91d4 = and i32 %v5_91c0, %v3_91d4
  %v5_91d4 = icmp slt i32 %v4_91d4, 0
  store i1 %v5_91d4, i1* %cpsr_v.global-to-local, align 1
  %v6_91d4 = icmp slt i32 %v1_91d4, 0
  store i1 %v6_91d4, i1* %cpsr_n.global-to-local, align 1
  %v7_91d4 = icmp eq i32 %v5_91c0, 1
  store i1 %v7_91d4, i1* %cpsr_z.global-to-local, align 1
  %v7_91d8 = icmp slt i32 %v5_91c0, 2
  br i1 %v7_91d8, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_91d0
  %v9_91d8 = add i32 %v5_91c0, -2
  store i32 %v9_91d8, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_91d0, %bb225
  %v1_91dc = load i32, i32* @sl, align 4
  %v2_91dc = add i32 %v1_91dc, %v2_8280
  store i32 %v2_91dc, i32* @r5, align 4
  %v0_91e0 = load i32, i32* @r6, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v0_91e4 = load i32, i32* @r7, align 4
  store i32 %v0_91e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d14.43 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_91f0 = call i32 @function_12d20(i32 %v0_91e0, i32 %v0_91e4, i32 ptrtoint (i32* @global_var_15d14.43 to i32), i32 1)
  store i32 %v4_91f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_91f4 = icmp slt i32 %v4_91f0, 0
  store i1 %v1_91f4, i1* %cpsr_n.global-to-local, align 1
  %v2_91f4 = icmp eq i32 %v4_91f0, 0
  store i1 %v2_91f4, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_91f0, 1
  br i1 %tmp227, label %.dec_label_pc_9214_crit_edge, label %dec_label_pc_91fc

.dec_label_pc_9214_crit_edge:                     ; preds = %bb226
  %v1_921c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9214

dec_label_pc_91fc:                                ; preds = %bb226
  %v0_91fc = load i32, i32* @r6, align 4
  store i32 %v0_91fc, i32* %r0.global-to-local, align 4
  %v0_9200 = load i32, i32* @r7, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d14.43 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_920c = call i32 @function_12d20(i32 %v0_91fc, i32 %v0_9200, i32 ptrtoint (i32* @global_var_15d14.43 to i32), i32 1)
  store i32 %v4_920c, i32* %r0.global-to-local, align 4
  %v1_9210 = add i32 %v4_920c, -1
  store i32 %v1_9210, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %.dec_label_pc_9214_crit_edge, %dec_label_pc_91fc
  %v1_921c = phi i32 [ %v1_921c.pre, %.dec_label_pc_9214_crit_edge ], [ %v1_9210, %dec_label_pc_91fc ]
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9224 = add i32 %v2_921c, %v1_921c
  store i32 %v1_9224, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9234 = load i32, i32* @sl, align 4
  %v4_9234 = add i32 %v3_9234, %v1_9224
  %v5_9234 = inttoptr i32 %v4_9234 to i8*
  store i8 0, i8* %v5_9234, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9254.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9254

dec_label_pc_9240:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_924c

dec_label_pc_924c:                                ; preds = %dec_label_pc_9240
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9214, %dec_label_pc_924c
  %v0_9254 = phi i32 [ %v0_9240, %dec_label_pc_924c ], [ %v0_9254.pre, %dec_label_pc_9214 ]
  %storemerge4 = phi i32 [ %v1_9268, %dec_label_pc_924c ], [ %storemerge4.pre, %dec_label_pc_9214 ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v1_9258 = inttoptr i32 %v0_9254 to i8*
  %v2_9258 = call i32 @function_12c5c(i8* %v1_9258)
  store i32 %v2_9258, i32* %r0.global-to-local, align 4
  %v3_9260 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9260, i32* %r4.global-to-local, align 4
  %v2_9264 = sub i32 %v2_9258, %v3_9260
  %v3_9264 = icmp uge i32 %v2_9258, %v3_9260
  store i1 %v3_9264, i1* %cpsr_c.global-to-local, align 1
  %v4_9264 = xor i32 %v3_9260, %v2_9258
  %v5_9264 = xor i32 %v2_9264, %v2_9258
  %v6_9264 = and i32 %v5_9264, %v4_9264
  %v7_9264 = icmp slt i32 %v6_9264, 0
  store i1 %v7_9264, i1* %cpsr_v.global-to-local, align 1
  %v8_9264 = icmp slt i32 %v2_9264, 0
  store i1 %v8_9264, i1* %cpsr_n.global-to-local, align 1
  %v9_9264 = icmp eq i32 %v2_9258, %v3_9260
  store i1 %v9_9264, i1* %cpsr_z.global-to-local, align 1
  %v1_9268 = add i32 %v3_9260, 1
  store i32 %v1_9268, i32* %ip.global-to-local, align 4
  %v8_926c = icmp sgt i32 %v2_9258, %v3_9260
  %v0_9240 = load i32, i32* @r5, align 4
  %v2_9240 = add i32 %v0_9240, %v3_9260
  %v3_9240 = inttoptr i32 %v2_9240 to i8*
  %v4_9240 = load i8, i8* %v3_9240, align 1
  %v6_9240 = zext i8 %v4_9240 to i32
  store i32 %v6_9240, i32* %r3.global-to-local, align 4
  %v2_9244 = icmp ugt i8 %v4_9240, 60
  store i1 %v2_9244, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9244 = icmp ult i8 %v4_9240, 61
  store i1 %v6_9244, i1* %cpsr_n.global-to-local, align 1
  %v7_9244 = icmp eq i8 %v4_9240, 61
  store i1 %v7_9244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_926c, label %dec_label_pc_9240, label %dec_label_pc_9270

dec_label_pc_9270:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_927c

dec_label_pc_927c:                                ; preds = %dec_label_pc_92c8, %dec_label_pc_92ec, %dec_label_pc_9270, %bb224
  %v0_927c = load i32, i32* @sl, align 4
  store i32 %v0_927c, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9284:                                ; preds = %dec_label_pc_9240, %dec_label_pc_9270
  %v0_9284 = load i32, i32* @r8, align 4
  %v1_9284 = add i32 %v0_9284, 12
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  store i32 %v3_9284, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9290 = icmp slt i32 %v3_9284, 0
  store i1 %v1_9290, i1* %cpsr_n.global-to-local, align 1
  %v2_9290 = icmp eq i32 %v3_9284, 0
  store i1 %v2_9290, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_9284, 1
  br i1 %tmp228, label %dec_label_pc_92ec, label %dec_label_pc_929c

dec_label_pc_929c:                                ; preds = %dec_label_pc_9284
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92a4:                                ; preds = %dec_label_pc_92c8
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_92a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_92a8, i32* %r3.global-to-local, align 4
  %v0_92ac = load i32, i32* @r8, align 4
  %v1_92ac = add i32 %v0_92ac, 12
  %v2_92ac = inttoptr i32 %v1_92ac to i32*
  %v3_92ac = load i32, i32* %v2_92ac, align 4
  %v1_92b0 = add i32 %v3_92a8, 1
  store i32 %v1_92b0, i32* %ip.global-to-local, align 4
  %v2_92b4 = sub i32 %v3_92ac, %v1_92b0
  %v3_92b4 = icmp uge i32 %v3_92ac, %v1_92b0
  store i1 %v3_92b4, i1* %cpsr_c.global-to-local, align 1
  %v4_92b4 = xor i32 %v3_92ac, %v1_92b0
  %v5_92b4 = xor i32 %v2_92b4, %v3_92ac
  %v6_92b4 = and i32 %v5_92b4, %v4_92b4
  %v7_92b4 = icmp slt i32 %v6_92b4, 0
  store i1 %v7_92b4, i1* %cpsr_v.global-to-local, align 1
  %v8_92b4 = icmp slt i32 %v2_92b4, 0
  store i1 %v8_92b4, i1* %cpsr_n.global-to-local, align 1
  %v9_92b4 = icmp eq i32 %v3_92ac, %v1_92b0
  store i1 %v9_92b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v1_92b0, i32* %r1.global-to-local, align 4
  store i32 %v1_92b0, i32* %stack_var_-40, align 4
  %v7_92c4 = icmp sgt i32 %v3_92ac, %v1_92b0
  %v0_92d4.pre = load i32, i32* @r5, align 4
  br i1 %v7_92c4, label %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, label %dec_label_pc_92ec

dec_label_pc_92a4.dec_label_pc_92c8_crit_edge:    ; preds = %dec_label_pc_92a4
  %v0_92d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, %dec_label_pc_929c
  %v0_92d8 = phi i32 [ %v0_92d8.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v3_9260, %dec_label_pc_929c ]
  %v0_92d4 = phi i32 [ %v0_92d4.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v0_9240, %dec_label_pc_929c ]
  %v0_92c8 = phi i32 [ %v1_92b0, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ 0, %dec_label_pc_929c ]
  %v1_92c8 = and i32 %v0_92c8, 33554432
  %v2_92c8 = icmp ne i32 %v1_92c8, 0
  store i1 %v2_92c8, i1* %cpsr_c.global-to-local, align 1
  %v3_92c8 = mul i32 %v0_92c8, 128
  %v1_92cc = add i32 %v3_92c8, 1472
  %v0_92d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_92d0 = add i32 %v1_92cc, %v0_92d0
  store i32 %v2_92d0, i32* %r1.global-to-local, align 4
  store i32 %v0_92d4, i32* %r0.global-to-local, align 4
  store i32 %v0_92d8, i32* %r2.global-to-local, align 4
  %v3_92dc = inttoptr i32 %v0_92d4 to i8*
  %v4_92dc = call i32 @function_130c0(i8* %v3_92dc, i32 %v2_92d0, i32 %v0_92d8)
  store i32 %v4_92dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_92e0 = icmp slt i32 %v4_92dc, 0
  store i1 %v1_92e0, i1* %cpsr_n.global-to-local, align 1
  %v2_92e0 = icmp eq i32 %v4_92dc, 0
  store i1 %v2_92e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_92e0, label %dec_label_pc_92a4, label %dec_label_pc_927c

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92a4, %dec_label_pc_9284
  %v0_92ec = phi i32 [ %v0_9240, %dec_label_pc_9284 ], [ %v0_92d4.pre, %dec_label_pc_92a4 ]
  store i32 %v0_92ec, i32* %r0.global-to-local, align 4
  %v1_92f0 = inttoptr i32 %v0_92ec to i8*
  %v2_92f0 = call i32 @function_12c5c(i8* %v1_92f0)
  store i32 %v2_92f0, i32* %r0.global-to-local, align 4
  %v1_92f4 = add i32 %v2_92f0, -127
  %v2_92f4 = icmp ugt i32 %v2_92f0, 126
  store i1 %v2_92f4, i1* %cpsr_c.global-to-local, align 1
  %v3_92f4 = sub i32 126, %v2_92f0
  %v4_92f4 = and i32 %v3_92f4, %v2_92f0
  %v5_92f4 = icmp slt i32 %v4_92f4, 0
  store i1 %v5_92f4, i1* %cpsr_v.global-to-local, align 1
  %v6_92f4 = icmp slt i32 %v1_92f4, 0
  store i1 %v6_92f4, i1* %cpsr_n.global-to-local, align 1
  %v7_92f4 = icmp eq i32 %v2_92f0, 127
  store i1 %v7_92f4, i1* %cpsr_z.global-to-local, align 1
  %v8_92f8 = icmp sgt i32 %v2_92f0, 127
  br i1 %v8_92f8, label %dec_label_pc_927c, label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_92ec
  %v0_92fc = load i32, i32* @r8, align 4
  %v1_92fc = add i32 %v0_92fc, 12
  %v2_92fc = inttoptr i32 %v1_92fc to i32*
  %v3_92fc = load i32, i32* %v2_92fc, align 4
  %v1_9300 = and i32 %v3_92fc, 33554432
  %v2_9300 = icmp ne i32 %v1_9300, 0
  store i1 %v2_9300, i1* %cpsr_c.global-to-local, align 1
  %v3_9300 = mul i32 %v3_92fc, 128
  %v1_9304 = add i32 %v3_9300, 1472
  %v0_9308 = load i32, i32* @r5, align 4
  store i32 %v0_9308, i32* %r1.global-to-local, align 4
  %v0_930c = load i32, i32* %sb.global-to-local, align 4
  %v2_930c = add i32 %v1_9304, %v0_930c
  store i32 %v2_930c, i32* @r0, align 4
  %v2_9310 = inttoptr i32 %v2_930c to i8*
  %v3_9310 = call i32 @function_12c84(i8* %v2_9310, i32 %v0_9308)
  store i32 %v3_9310, i32* %r0.global-to-local, align 4
  %v0_9314 = load i32, i32* @r8, align 4
  %v1_9314 = add i32 %v0_9314, 12
  %v2_9314 = inttoptr i32 %v1_9314 to i32*
  %v3_9314 = load i32, i32* %v2_9314, align 4
  %v0_9318 = load i32, i32* @sl, align 4
  store i32 %v0_9318, i32* @r5, align 4
  %v1_931c = add i32 %v3_9314, 1
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  store i32 %v1_931c, i32* %v2_9314, align 4
  %v1_9134.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9328:                                ; preds = %dec_label_pc_915c, %dec_label_pc_9128
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v3_9330 = call i32 @function_12110(i32 41, i32* null)
  %v0_9334 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9334, i32* @r1, align 4
  store i32 %v3_9330, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9340 = call i32 @function_12fb0(i8* %tmp199, i32 %v0_9334, i32 %v3_9330)
  store i32 %v4_9340, i32* %r0.global-to-local, align 4
  %v1_9344 = add i32 %v4_9340, 1
  %v2_9344 = icmp eq i32 %v4_9340, -1
  store i1 %v2_9344, i1* %cpsr_c.global-to-local, align 1
  %v3_9344 = sub i32 0, %v4_9340
  %v4_9344 = and i32 %v1_9344, %v3_9344
  %v5_9344 = icmp slt i32 %v4_9344, 0
  store i1 %v5_9344, i1* %cpsr_v.global-to-local, align 1
  %v6_9344 = icmp slt i32 %v1_9344, 0
  store i1 %v6_9344, i1* %cpsr_n.global-to-local, align 1
  %v7_9344 = icmp eq i32 %v1_9344, 0
  store i1 %v7_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9344, label %dec_label_pc_9678, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v3_9354 = call i32 @function_12110(i32 41, i32* null)
  %v0_9358 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9358, i32* @r1, align 4
  store i32 %v3_9354, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9364 = call i32 @function_12fb0(i8* %tmp199, i32 %v0_9358, i32 %v3_9354)
  store i32 %v4_9364, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_9370 = add i32 %v4_9364, %v2_8748
  store i32 %v2_9370, i32* %r3.global-to-local, align 4
  %v1_9374 = load i32, i32* @r6, align 4
  %v2_9374 = add i32 %v1_9374, %v2_9370
  %v3_9374 = inttoptr i32 %v2_9374 to i8*
  %v4_9374 = load i8, i8* %v3_9374, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9374, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_937c = icmp ult i8 %v4_9374, 32
  store i1 %v6_937c, i1* %cpsr_n.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9374, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  %v2_9384 = zext i1 %v7_937c to i32
  %v2_9384.v4_9364 = add i32 %v2_9384, %v4_9364
  store i32 %v2_9384.v4_9364, i32* @r4, align 4
  %v2_9388 = add i32 %v2_9384.v4_9364, %v2_8280
  store i32 %v2_9388, i32* @r5, align 4
  store i32 %v2_9388, i32* %r0.global-to-local, align 4
  %v1_9390 = load i32, i32* %fp.global-to-local, align 4
  %v2_9390 = sub i32 %v1_9390, %v2_9384.v4_9364
  store i32 %v2_9390, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_939c = call i32 @function_12d20(i32 %v2_9388, i32 %v2_9390, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32 2)
  store i32 %v5_939c, i32* %r0.global-to-local, align 4
  %v1_93a0 = add i32 %v5_939c, 1
  %v2_93a0 = icmp eq i32 %v5_939c, -1
  store i1 %v2_93a0, i1* %cpsr_c.global-to-local, align 1
  %v3_93a0 = sub i32 0, %v5_939c
  %v4_93a0 = and i32 %v1_93a0, %v3_93a0
  %v5_93a0 = icmp slt i32 %v4_93a0, 0
  store i1 %v5_93a0, i1* %cpsr_v.global-to-local, align 1
  %v6_93a0 = icmp slt i32 %v1_93a0, 0
  store i1 %v6_93a0, i1* %cpsr_n.global-to-local, align 1
  %v7_93a0 = icmp eq i32 %v1_93a0, 0
  store i1 %v7_93a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_939c, i32* %lr.global-to-local, align 4
  br i1 %v7_93a0, label %dec_label_pc_9678, label %dec_label_pc_93ac

dec_label_pc_93ac:                                ; preds = %dec_label_pc_934c
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_93b4 = add i32 %v5_939c, -1
  %v2_93b4 = icmp ne i32 %v5_939c, 0
  store i1 %v2_93b4, i1* %cpsr_c.global-to-local, align 1
  %v3_93b4 = sub i32 0, %v5_939c
  %v4_93b4 = and i32 %v5_939c, %v3_93b4
  %v5_93b4 = icmp slt i32 %v4_93b4, 0
  store i1 %v5_93b4, i1* %cpsr_v.global-to-local, align 1
  %v6_93b4 = icmp slt i32 %v1_93b4, 0
  store i1 %v6_93b4, i1* %cpsr_n.global-to-local, align 1
  %v7_93b4 = icmp eq i32 %v5_939c, 1
  store i1 %v7_93b4, i1* %cpsr_z.global-to-local, align 1
  %v1_93b8 = load i32, i32* @r4, align 4
  %v2_93b8 = add i32 %v1_93b8, %v2_8748
  store i32 %v2_93b8, i32* %ip.global-to-local, align 4
  %v7_93bc = icmp sgt i32 %v5_939c, 1
  br i1 %v7_93bc, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_93ac
  %v9_93bc = add i32 %v5_939c, -2
  store i32 %v9_93bc, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_93ac, %bb229
  %v3_93e0 = phi i32 [ %v5_939c, %dec_label_pc_93ac ], [ %v9_93bc, %bb229 ]
  %v1_93c4 = add i32 %v3_93e0, 1
  store i32 %v1_93c4, i32* %r6.global-to-local, align 4
  %v1_93c8 = add i32 %v2_93b8, -20773
  store i32 %v1_93c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_93d0 = load i32, i32* @r5, align 4
  store i32 %v0_93d0, i32* %r0.global-to-local, align 4
  store i32 %v1_93c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d18.45 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_93e0 = add i32 %v3_93e0, %v1_93c8
  %v5_93e0 = inttoptr i32 %v4_93e0 to i8*
  store i8 0, i8* %v5_93e0, align 1
  %v5_93e4 = call i32 @function_12d20(i32 %v0_93d0, i32 %v1_93c4, i32 ptrtoint ([5 x i8]* @global_var_15d18.45 to i32), i32 4)
  store i32 %v5_93e4, i32* %r0.global-to-local, align 4
  %v1_93e8 = add i32 %v5_93e4, -4
  %v2_93e8 = icmp ugt i32 %v5_93e4, 3
  store i1 %v2_93e8, i1* %cpsr_c.global-to-local, align 1
  %v3_93e8 = sub i32 3, %v5_93e4
  %v4_93e8 = and i32 %v3_93e8, %v5_93e4
  %v5_93e8 = icmp slt i32 %v4_93e8, 0
  store i1 %v5_93e8, i1* %cpsr_v.global-to-local, align 1
  %v6_93e8 = icmp slt i32 %v1_93e8, 0
  store i1 %v6_93e8, i1* %cpsr_n.global-to-local, align 1
  %v7_93e8 = icmp eq i32 %v5_93e4, 4
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93e8, label %dec_label_pc_9960, label %dec_label_pc_93f0

dec_label_pc_93f0:                                ; preds = %bb230
  store i32 %v2_8280, i32* %ip.global-to-local, align 4
  %v1_93f4 = load i32, i32* @r4, align 4
  %v2_93f4 = add i32 %v1_93f4, %v2_8280
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  %v4_93f4 = load i8, i8* %v3_93f4, align 1
  %v6_93f4 = zext i8 %v4_93f4 to i32
  store i32 %v6_93f4, i32* %r3.global-to-local, align 4
  %v2_93f8 = icmp ugt i8 %v4_93f4, 46
  store i1 %v2_93f8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_93f8 = icmp ult i8 %v4_93f4, 47
  store i1 %v6_93f8, i1* %cpsr_n.global-to-local, align 1
  %v7_93f8 = icmp eq i8 %v4_93f4, 47
  store i1 %v7_93f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93f8, label %dec_label_pc_9b54, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_94ac, %dec_label_pc_9a98, %dec_label_pc_9b84, %dec_label_pc_9b54, %dec_label_pc_9a30, %dec_label_pc_9a14, %dec_label_pc_93f0, %dec_label_pc_9ba0, %dec_label_pc_9a60
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9404 = load i32, i32* @r8, align 4
  %v3_9404 = add i32 %v2_9404, -1452
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 1, i8* %v4_9404, align 1
  br label %dec_label_pc_8838

dec_label_pc_940c:                                ; preds = %dec_label_pc_8828
  %v0_940c = call i32 @function_13b98()
  store i32 %v0_940c, i32* %r0.global-to-local, align 4
  %v0_9410 = load i32, i32* %sb.global-to-local, align 4
  %v1_9410 = add i32 %v0_9410, 1472
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v0_9418 = load i32, i32* @r8, align 4
  %v1_9418 = add i32 %v0_9418, 656
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  store i32 %v3_9418, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %v3_9418, -1024
  %v2_9420 = icmp ugt i32 %v3_9418, 1023
  store i1 %v2_9420, i1* %cpsr_c.global-to-local, align 1
  %v3_9420 = sub i32 1023, %v3_9418
  %v4_9420 = and i32 %v3_9420, %v3_9418
  %v5_9420 = icmp slt i32 %v4_9420, 0
  store i1 %v5_9420, i1* %cpsr_v.global-to-local, align 1
  %v6_9420 = icmp slt i32 %v1_9420, 0
  store i1 %v6_9420, i1* %cpsr_n.global-to-local, align 1
  %v7_9420 = icmp eq i32 %v3_9418, 1024
  store i1 %v7_9420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_940c, i32* %fp.global-to-local, align 4
  %v1_9428 = add i32 %v0_9410, 2116
  store i32 %v1_9428, i32* @r7, align 4
  br i1 %v7_9420, label %dec_label_pc_9528, label %dec_label_pc_9430

dec_label_pc_9430:                                ; preds = %dec_label_pc_940c, %dec_label_pc_9528, %dec_label_pc_951c
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_9434 = load i32, i32* %fp.global-to-local, align 4
  %v2_9434 = inttoptr i32 %v1_9434 to i32*
  store i32 0, i32* %v2_9434, align 4
  %v0_9438 = load i32, i32* @r8, align 4
  %v1_9438 = add i32 %v0_9438, 656
  %v2_9438 = inttoptr i32 %v1_9438 to i32*
  %v3_9438 = load i32, i32* %v2_9438, align 4
  store i32 %v3_9438, i32* %r1.global-to-local, align 4
  %v1_943c = add i32 %v0_9438, -1456
  %v2_943c = inttoptr i32 %v1_943c to i32*
  %v3_943c = load i32, i32* %v2_943c, align 4
  store i32 %v3_943c, i32* %r0.global-to-local, align 4
  %v1_9440 = sub i32 1024, %v3_9438
  store i32 %v1_9440, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9448 = load i32, i32* @r7, align 4
  %v2_9448 = add i32 %v0_9448, %v3_9438
  store i32 %v2_9448, i32* %r1.global-to-local, align 4
  %v4_944c = inttoptr i32 %v2_9448 to i32*
  %v5_944c = call i32 @function_13dec(i32 %v3_943c, i32* %v4_944c, i32 %v1_9440, i32 16384)
  store i32 %v5_944c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9450 = icmp slt i32 %v5_944c, 0
  store i1 %v1_9450, i1* %cpsr_n.global-to-local, align 1
  %v2_9450 = icmp eq i32 %v5_944c, 0
  store i1 %v2_9450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9450, label %dec_label_pc_992c, label %dec_label_pc_9458

dec_label_pc_9458:                                ; preds = %dec_label_pc_9430
  %v1_9458 = add i32 %v5_944c, 1
  %v2_9458 = icmp eq i32 %v5_944c, -1
  store i1 %v2_9458, i1* %cpsr_c.global-to-local, align 1
  %v3_9458 = sub i32 0, %v5_944c
  %v4_9458 = and i32 %v1_9458, %v3_9458
  %v5_9458 = icmp slt i32 %v4_9458, 0
  store i1 %v5_9458, i1* %cpsr_v.global-to-local, align 1
  %v6_9458 = icmp slt i32 %v1_9458, 0
  store i1 %v6_9458, i1* %cpsr_n.global-to-local, align 1
  %v7_9458 = icmp eq i32 %v1_9458, 0
  store i1 %v7_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9458, label %dec_label_pc_9950, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_9458
  %v0_9460 = load i32, i32* @r8, align 4
  %v1_9460 = add i32 %v0_9460, 656
  %v2_9460 = inttoptr i32 %v1_9460 to i32*
  %v3_9460 = load i32, i32* %v2_9460, align 4
  store i32 %v2_87d8, i32* %r1.global-to-local, align 4
  %v2_9468 = add i32 %v3_9460, %v5_944c
  store i32 %v2_9468, i32* @r4, align 4
  store i32 %v2_9468, i32* %v2_9460, align 4
  %v0_9470 = load i32, i32* %r1.global-to-local, align 4
  %v1_9470 = load i32, i32* @r8, align 4
  %v2_9470 = add i32 %v1_9470, -1448
  %v3_9470 = inttoptr i32 %v2_9470 to i32*
  store i32 %v0_9470, i32* %v3_9470, align 4
  br label %dec_label_pc_94fc

dec_label_pc_9478:                                ; preds = %dec_label_pc_94fc
  %v1_9478 = add i32 %v0_94fc, -4
  %v2_9478 = inttoptr i32 %v1_9478 to i32*
  %v3_9478 = load i32, i32* %v2_9478, align 4
  store i32 %v3_9478, i32* @sl, align 4
  %v1_947c = load i32, i32* @r4, align 4
  %v5_9480 = icmp slt i32 %v3_94fc, %v1_947c
  %storemerge73 = select i1 %v5_9480, i32 %v3_94fc, i32 %v1_947c
  store i32 %storemerge73, i32* @r5, align 4
  %v2_9488 = sub i32 %v3_94fc, %storemerge73
  store i32 %v2_9488, i32* @r6, align 4
  %v1_948c = add i32 %v3_9478, -1
  %v2_948c = icmp ne i32 %v3_9478, 0
  store i1 %v2_948c, i1* %cpsr_c.global-to-local, align 1
  %v3_948c = sub i32 0, %v3_9478
  %v4_948c = and i32 %v3_9478, %v3_948c
  %v5_948c = icmp slt i32 %v4_948c, 0
  store i1 %v5_948c, i1* %cpsr_v.global-to-local, align 1
  %v6_948c = icmp slt i32 %v1_948c, 0
  store i1 %v6_948c, i1* %cpsr_n.global-to-local, align 1
  %v7_948c = icmp eq i32 %v3_9478, 1
  store i1 %v7_948c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9488, i32* %v2_94fc, align 4
  br i1 %v7_948c, label %dec_label_pc_9548, label %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge

dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge: ; preds = %dec_label_pc_9478
  %v0_9498.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9498:                                ; preds = %dec_label_pc_9508, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge, %dec_label_pc_9570
  %v0_9498 = phi i32 [ %v3_9570, %dec_label_pc_9570 ], [ %v0_9498.pr.pre, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge ], [ %v3_94fc, %dec_label_pc_9508 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9498 = icmp slt i32 %v0_9498, 0
  store i1 %v1_9498, i1* %cpsr_n.global-to-local, align 1
  %v2_9498 = icmp eq i32 %v0_9498, 0
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %dec_label_pc_94a0, label %dec_label_pc_94c0

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9498
  %v0_94a0 = load i32, i32* @r8, align 4
  %v1_94a0 = add i32 %v0_94a0, 4
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  store i32 %v3_94a0, i32* @r4, align 4
  %v1_94a4 = add i32 %v3_94a0, -1
  %v2_94a4 = icmp ne i32 %v3_94a0, 0
  store i1 %v2_94a4, i1* %cpsr_c.global-to-local, align 1
  %v3_94a4 = sub i32 0, %v3_94a0
  %v4_94a4 = and i32 %v3_94a0, %v3_94a4
  %v5_94a4 = icmp slt i32 %v4_94a4, 0
  store i1 %v5_94a4, i1* %cpsr_v.global-to-local, align 1
  %v6_94a4 = icmp slt i32 %v1_94a4, 0
  store i1 %v6_94a4, i1* %cpsr_n.global-to-local, align 1
  %v7_94a4 = icmp eq i32 %v3_94a0, 1
  store i1 %v7_94a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94a4, label %dec_label_pc_9578, label %dec_label_pc_94ac

dec_label_pc_94ac:                                ; preds = %dec_label_pc_94a0
  %v1_94ac = add i32 %v0_94a0, 656
  %v2_94ac = inttoptr i32 %v1_94ac to i32*
  %v3_94ac = load i32, i32* %v2_94ac, align 4
  %v0_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = sub i32 %v3_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94b4 = icmp slt i32 %v2_94b0, 0
  store i1 %v1_94b4, i1* %cpsr_n.global-to-local, align 1
  %v2_94b4 = icmp eq i32 %v2_94b0, 0
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  %v2_94b8 = add i32 %v0_94a0, 8
  %v3_94b8 = inttoptr i32 %v2_94b8 to i32*
  store i32 %v2_94b0, i32* %v3_94b8, align 4
  br i1 %v2_94b4, label %dec_label_pc_9400, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_9498, %dec_label_pc_9578, %dec_label_pc_94ac, %dec_label_pc_9600
  %v0_94c0 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94c0 = icmp slt i32 %v0_94c0, 0
  store i1 %v1_94c0, i1* %cpsr_n.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v0_94c0, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9510, label %dec_label_pc_94c8

dec_label_pc_94c8:                                ; preds = %dec_label_pc_94c0
  %v0_94c8 = load i32, i32* @r8, align 4
  %v1_94c8 = add i32 %v0_94c8, 656
  %v2_94c8 = inttoptr i32 %v1_94c8 to i32*
  %v3_94c8 = load i32, i32* %v2_94c8, align 4
  store i32 %v3_94c8, i32* %r3.global-to-local, align 4
  %v2_94cc = sub i32 %v3_94c8, %v0_94c0
  store i32 %v2_94cc, i32* @r4, align 4
  store i32 %v2_94cc, i32* @r2, align 4
  store i32 %v2_94cc, i32* %v2_94c8, align 4
  %v0_94d8 = load i32, i32* @r7, align 4
  %v1_94d8 = load i32, i32* @r5, align 4
  %v2_94d8 = add i32 %v1_94d8, %v0_94d8
  store i32 %v2_94d8, i32* @r1, align 4
  store i32 %v0_94d8, i32* @r0, align 4
  %v3_94e0 = call i32 @function_13bf0(i32 %v0_94d8, i32 %v2_94d8, i32 %v2_94cc)
  store i32 %v3_94e0, i32* %r0.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r8, align 4
  %v1_94e4 = add i32 %v0_94e4, 656
  %v2_94e4 = inttoptr i32 %v1_94e4 to i32*
  %v3_94e4 = load i32, i32* %v2_94e4, align 4
  store i32 %v3_94e4, i32* @r4, align 4
  store i32 0, i32* @lr, align 4
  %v1_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94ec, %v3_94e4
  store i32 %v2_94ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94f0 = icmp slt i32 %v3_94e4, 0
  store i1 %v1_94f0, i1* %cpsr_n.global-to-local, align 1
  %v2_94f0 = icmp eq i32 %v3_94e4, 0
  store i1 %v2_94f0, i1* %cpsr_z.global-to-local, align 1
  %v3_94f4 = add i32 %v2_94ec, 2116
  %v4_94f4 = inttoptr i32 %v3_94f4 to i8*
  store i8 0, i8* %v4_94f4, align 1
  %v0_94f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94f8, label %dec_label_pc_9510, label %dec_label_pc_94fc

dec_label_pc_94fc:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_9460
  %v0_94fc = load i32, i32* @r8, align 4
  %v1_94fc = add i32 %v0_94fc, 8
  %v2_94fc = inttoptr i32 %v1_94fc to i32*
  %v3_94fc = load i32, i32* %v2_94fc, align 4
  store i32 %v3_94fc, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9500 = icmp slt i32 %v3_94fc, 0
  store i1 %v1_9500, i1* %cpsr_n.global-to-local, align 1
  %v2_9500 = icmp eq i32 %v3_94fc, 0
  store i1 %v2_9500, i1* %cpsr_z.global-to-local, align 1
  %v5_9504 = icmp sgt i32 %v3_94fc, 0
  br i1 %v5_9504, label %dec_label_pc_9478, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_94fc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9498

dec_label_pc_9510:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_94c0
  %v0_9510 = load i32, i32* @r8, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i8*
  %v3_9510 = load i8, i8* %v2_9510, align 1
  %v4_9510 = zext i8 %v3_9510 to i32
  store i32 %v4_9510, i32* %r3.global-to-local, align 4
  %v2_9514 = icmp ugt i8 %v3_9510, 6
  store i1 %v2_9514, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9514 = icmp ult i8 %v3_9510, 7
  store i1 %v6_9514, i1* %cpsr_n.global-to-local, align 1
  %v7_9514 = icmp eq i8 %v3_9510, 7
  store i1 %v7_9514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9514, label %dec_label_pc_951c, label %dec_label_pc_8838

dec_label_pc_951c:                                ; preds = %dec_label_pc_9510
  %v1_951c = add i32 %v0_9510, 656
  %v2_951c = inttoptr i32 %v1_951c to i32*
  %v3_951c = load i32, i32* %v2_951c, align 4
  store i32 %v3_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v3_951c, -1024
  %v2_9520 = icmp ugt i32 %v3_951c, 1023
  store i1 %v2_9520, i1* %cpsr_c.global-to-local, align 1
  %v3_9520 = sub i32 1023, %v3_951c
  %v4_9520 = and i32 %v3_9520, %v3_951c
  %v5_9520 = icmp slt i32 %v4_9520, 0
  store i1 %v5_9520, i1* %cpsr_v.global-to-local, align 1
  %v6_9520 = icmp slt i32 %v1_9520, 0
  store i1 %v6_9520, i1* %cpsr_n.global-to-local, align 1
  %v7_9520 = icmp eq i32 %v3_951c, 1024
  store i1 %v7_9520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9520, label %dec_label_pc_9528.loopexit, label %dec_label_pc_9430

dec_label_pc_9528.loopexit:                       ; preds = %dec_label_pc_951c
  %v0_9528.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9528

dec_label_pc_9528:                                ; preds = %dec_label_pc_9528.loopexit, %dec_label_pc_940c
  %v0_9528 = phi i32 [ %v0_9528.pre, %dec_label_pc_9528.loopexit ], [ %v1_9428, %dec_label_pc_940c ]
  store i32 %v0_9528, i32* @r0, align 4
  %v1_952c = add i32 %v0_9528, 64
  store i32 %v1_952c, i32* @r1, align 4
  store i32 960, i32* @r2, align 4
  %v3_9534 = call i32 @function_13bf0(i32 %v0_9528, i32 %v1_952c, i32 960)
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v0_9538 = load i32, i32* @r8, align 4
  %v1_9538 = add i32 %v0_9538, 656
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_953c = add i32 %v3_9538, -64
  store i32 %v1_953c, i32* @r4, align 4
  store i32 %v1_953c, i32* %v2_9538, align 4
  br label %dec_label_pc_9430

dec_label_pc_9548:                                ; preds = %dec_label_pc_9478
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_12110(i32 39, i32* null)
  %v0_9554 = load i32, i32* @r4, align 4
  store i32 %v0_9554, i32* %r1.global-to-local, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9560 = load i32, i32* @r7, align 4
  store i32 %v0_9560, i32* %r0.global-to-local, align 4
  %v4_9564 = call i32 @function_12d20(i32 %v0_9560, i32 %v0_9554, i32 %v3_9550, i32 11)
  store i32 %v4_9564, i32* %r0.global-to-local, align 4
  %v2_9568 = add i32 %v4_9564, 1
  %v3_9568 = icmp eq i32 %v4_9564, -1
  store i1 %v3_9568, i1* %cpsr_c.global-to-local, align 1
  %v4_9568 = sub i32 0, %v4_9564
  %v5_9568 = and i32 %v2_9568, %v4_9568
  %v6_9568 = icmp slt i32 %v5_9568, 0
  store i1 %v6_9568, i1* %cpsr_v.global-to-local, align 1
  %v7_9568 = icmp slt i32 %v2_9568, 0
  store i1 %v7_9568, i1* %cpsr_n.global-to-local, align 1
  %v8_9568 = icmp eq i32 %v2_9568, 0
  store i1 %v8_9568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9568, label %dec_label_pc_9570, label %dec_label_pc_9ad4

dec_label_pc_9570:                                ; preds = %dec_label_pc_9548
  %v0_9570 = load i32, i32* @r8, align 4
  %v1_9570 = add i32 %v0_9570, 8
  %v2_9570 = inttoptr i32 %v1_9570 to i32*
  %v3_9570 = load i32, i32* %v2_9570, align 4
  store i32 %v3_9570, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9578:                                ; preds = %dec_label_pc_94a0
  %v0_9578 = load i32, i32* @r7, align 4
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  %v1_957c = add i32 %v0_94a0, 656
  %v2_957c = inttoptr i32 %v1_957c to i32*
  %v3_957c = load i32, i32* %v2_957c, align 4
  store i32 %v3_957c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9588 = call i32 @function_12d20(i32 %v0_9578, i32 %v3_957c, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32 2)
  store i32 %v5_9588, i32* %r0.global-to-local, align 4
  %v1_958c = add i32 %v5_9588, 1
  %v2_958c = icmp eq i32 %v5_9588, -1
  store i1 %v2_958c, i1* %cpsr_c.global-to-local, align 1
  %v3_958c = sub i32 0, %v5_9588
  %v4_958c = and i32 %v1_958c, %v3_958c
  %v5_958c = icmp slt i32 %v4_958c, 0
  store i1 %v5_958c, i1* %cpsr_v.global-to-local, align 1
  %v6_958c = icmp slt i32 %v1_958c, 0
  store i1 %v6_958c, i1* %cpsr_n.global-to-local, align 1
  %v7_958c = icmp eq i32 %v1_958c, 0
  store i1 %v7_958c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_958c, label %dec_label_pc_94c0, label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9578
  %v0_9594 = load i32, i32* @r8, align 4
  %v1_9594 = add i32 %v0_9594, 656
  %v2_9594 = inttoptr i32 %v1_9594 to i32*
  %v3_9594 = load i32, i32* %v2_9594, align 4
  store i32 %v3_9594, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_95a0 = load i32, i32* @r7, align 4
  store i32 %v0_95a0, i32* %r0.global-to-local, align 4
  %v5_95a4 = call i32 @function_12d20(i32 %v0_95a0, i32 %v3_9594, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32 2)
  %v1_95a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, %v5_95a4
  store i32 %v2_95a8, i32* %ip.global-to-local, align 4
  store i32 %v5_95a4, i32* @r5, align 4
  store i32 %v5_95a4, i32* %r1.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r7, align 4
  store i32 %v0_95b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d14.43 to i32), i32* %r2.global-to-local, align 4
  %v0_95bc = load i32, i32* @r4, align 4
  store i32 %v0_95bc, i32* %r3.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r6, align 4
  %v1_95c0 = trunc i32 %v0_95c0 to i8
  %v3_95c0 = add i32 %v2_95a8, 2114
  %v4_95c0 = inttoptr i32 %v3_95c0 to i8*
  store i8 %v1_95c0, i8* %v4_95c0, align 1
  %v4_95c4 = call i32 @function_12d20(i32 %v0_95b4, i32 %v5_95a4, i32 ptrtoint (i32* @global_var_15d14.43 to i32), i32 %v0_95bc)
  store i32 %v4_95c4, i32* %r0.global-to-local, align 4
  %v1_95c8 = add i32 %v4_95c4, 1
  %v2_95c8 = icmp eq i32 %v4_95c4, -1
  store i1 %v2_95c8, i1* %cpsr_c.global-to-local, align 1
  %v3_95c8 = sub i32 0, %v4_95c4
  %v4_95c8 = and i32 %v1_95c8, %v3_95c8
  %v5_95c8 = icmp slt i32 %v4_95c8, 0
  store i1 %v5_95c8, i1* %cpsr_v.global-to-local, align 1
  %v6_95c8 = icmp slt i32 %v1_95c8, 0
  store i1 %v6_95c8, i1* %cpsr_n.global-to-local, align 1
  %v7_95c8 = icmp eq i32 %v1_95c8, 0
  store i1 %v7_95c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95c8, label %dec_label_pc_95ec, label %dec_label_pc_95d0

dec_label_pc_95d0:                                ; preds = %dec_label_pc_9594
  %v0_95d0 = load i32, i32* @r7, align 4
  store i32 %v0_95d0, i32* %r0.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r5, align 4
  store i32 %v0_95d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d14.43 to i32), i32* %r2.global-to-local, align 4
  %v0_95dc = load i32, i32* @r4, align 4
  store i32 %v0_95dc, i32* %r3.global-to-local, align 4
  %v4_95e0 = call i32 @function_12d20(i32 %v0_95d0, i32 %v0_95d4, i32 ptrtoint (i32* @global_var_15d14.43 to i32), i32 %v0_95dc)
  %v1_95e4 = load i32, i32* %sb.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, %v4_95e0
  store i32 %v2_95e4, i32* %r0.global-to-local, align 4
  %v0_95e8 = load i32, i32* @r6, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v3_95e8 = add i32 %v2_95e4, 2116
  %v4_95e8 = inttoptr i32 %v3_95e8 to i8*
  store i8 %v1_95e8, i8* %v4_95e8, align 1
  br label %dec_label_pc_95ec

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9594, %dec_label_pc_95d0
  %v0_95ec = load i32, i32* @r7, align 4
  store i32 %v0_95ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_95f4 = inttoptr i32 %v0_95ec to i8*
  %v3_95f4 = call i32 @function_12d88(i8* %v2_95f4, i32 16)
  store i32 %v3_95f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_95f8 = icmp slt i32 %v3_95f4, 0
  store i1 %v1_95f8, i1* %cpsr_n.global-to-local, align 1
  %v2_95f8 = icmp eq i32 %v3_95f4, 0
  store i1 %v2_95f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f8, label %dec_label_pc_9d84, label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %dec_label_pc_95ec
  %v1_9600 = add i32 %v3_95f4, 2
  store i32 %v1_9600, i32* %r6.global-to-local, align 4
  %v1_9604 = load i32, i32* @r8, align 4
  %v2_9604 = add i32 %v1_9604, 8
  %v3_9604 = inttoptr i32 %v2_9604 to i32*
  store i32 %v1_9600, i32* %v3_9604, align 4
  br label %dec_label_pc_94c0

dec_label_pc_960c:                                ; preds = %dec_label_pc_8cb4
  %v0_960c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  store i32 %v0_9610, i32* @r0, align 4
  %v2_9614 = inttoptr i32 %v0_9610 to i8*
  %v3_9614 = call i32 @function_12c84(i8* %v2_9614, i32 %v0_960c)
  store i32 %v3_9614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ccc

dec_label_pc_961c:                                ; preds = %dec_label_pc_8830
  %v0_961c = call i32 @function_13b98()
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v0_961c, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_9648.dec_label_pc_9628_crit_edge, %dec_label_pc_961c
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ %v0_961c, %dec_label_pc_961c ]
  %v0_9628 = phi i32 [ %v0_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ 0, %dec_label_pc_961c ]
  %v2_9628 = inttoptr i32 %v1_9628 to i32*
  store i32 %v0_9628, i32* %v2_9628, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v0_9630 = load i32, i32* @r8, align 4
  %v1_9630 = add i32 %v0_9630, -1456
  %v2_9630 = inttoptr i32 %v1_9630 to i32*
  %v3_9630 = load i32, i32* %v2_9630, align 4
  store i32 %v3_9630, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_963c = call i32 @function_13dec(i32 %v3_9630, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_963c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9640 = icmp slt i32 %v5_963c, 0
  store i1 %v1_9640, i1* %cpsr_n.global-to-local, align 1
  %v2_9640 = icmp eq i32 %v5_963c, 0
  store i1 %v2_9640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9640, label %dec_label_pc_9920, label %dec_label_pc_9648

dec_label_pc_9648:                                ; preds = %dec_label_pc_9628
  %v2_9648 = add i32 %v5_963c, 1
  %v3_9648 = icmp eq i32 %v5_963c, -1
  store i1 %v3_9648, i1* %cpsr_c.global-to-local, align 1
  %v4_9648 = sub i32 0, %v5_963c
  %v5_9648 = and i32 %v2_9648, %v4_9648
  %v6_9648 = icmp slt i32 %v5_9648, 0
  store i1 %v6_9648, i1* %cpsr_v.global-to-local, align 1
  %v7_9648 = icmp slt i32 %v2_9648, 0
  store i1 %v7_9648, i1* %cpsr_n.global-to-local, align 1
  %v8_9648 = icmp eq i32 %v2_9648, 0
  store i1 %v8_9648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9648, label %dec_label_pc_9650, label %dec_label_pc_9648.dec_label_pc_9628_crit_edge

dec_label_pc_9648.dec_label_pc_9628_crit_edge:    ; preds = %dec_label_pc_9648
  %v0_9628.pre = load i32, i32* @r5, align 4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9650:                                ; preds = %dec_label_pc_9648
  %v0_9650 = load i32, i32* @r4, align 4
  %v1_9650 = inttoptr i32 %v0_9650 to i32*
  %v2_9650 = load i32, i32* %v1_9650, align 4
  store i32 %v2_9650, i32* %r3.global-to-local, align 4
  %v1_9654 = add i32 %v2_9650, -11
  %v2_9654 = icmp ugt i32 %v2_9650, 10
  store i1 %v2_9654, i1* %cpsr_c.global-to-local, align 1
  %v3_9654 = sub i32 10, %v2_9650
  %v4_9654 = and i32 %v3_9654, %v2_9650
  %v5_9654 = icmp slt i32 %v4_9654, 0
  store i1 %v5_9654, i1* %cpsr_v.global-to-local, align 1
  %v6_9654 = icmp slt i32 %v1_9654, 0
  store i1 %v6_9654, i1* %cpsr_n.global-to-local, align 1
  %v7_9654 = icmp eq i32 %v2_9650, 11
  store i1 %v7_9654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9654, label %dec_label_pc_9a98, label %dec_label_pc_965c

dec_label_pc_965c:                                ; preds = %dec_label_pc_9650, %dec_label_pc_9920
  %v0_965c = load i32, i32* @r8, align 4
  %v1_965c = add i32 %v0_965c, -1456
  %v2_965c = inttoptr i32 %v1_965c to i32*
  %v3_965c = load i32, i32* %v2_965c, align 4
  store i32 %v3_965c, i32* %r0.global-to-local, align 4
  %v1_9660 = call i32 @function_135f0(i32 %v3_965c)
  store i32 %v1_9660, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_966c = load i32, i32* @r8, align 4
  %v2_966c = add i32 %v1_966c, -1456
  %v3_966c = inttoptr i32 %v2_966c to i32*
  store i32 -1, i32* %v3_966c, align 4
  %v0_9670 = load i32, i32* %r1.global-to-local, align 4
  %v1_9670 = trunc i32 %v0_9670 to i8
  %v2_9670 = load i32, i32* @r8, align 4
  %v3_9670 = add i32 %v2_9670, -1452
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 %v1_9670, i8* %v4_9670, align 1
  br label %dec_label_pc_8838

dec_label_pc_9678:                                ; preds = %dec_label_pc_9328, %dec_label_pc_934c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9680 = call i32 @function_12110(i32 40, i32* null)
  %v0_9684 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9684, i32* @r1, align 4
  store i32 %v3_9680, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9690 = call i32 @function_12fb0(i8* %tmp199, i32 %v0_9684, i32 %v3_9680)
  store i32 %v4_9690, i32* %r0.global-to-local, align 4
  %v1_9698 = add i32 %v4_9690, 1
  %v2_9698 = icmp eq i32 %v4_9690, -1
  store i1 %v2_9698, i1* %cpsr_c.global-to-local, align 1
  %v3_9698 = sub i32 0, %v4_9690
  %v4_9698 = and i32 %v1_9698, %v3_9698
  %v5_9698 = icmp slt i32 %v4_9698, 0
  store i1 %v5_9698, i1* %cpsr_v.global-to-local, align 1
  %v6_9698 = icmp slt i32 %v1_9698, 0
  store i1 %v6_9698, i1* %cpsr_n.global-to-local, align 1
  %v7_9698 = icmp eq i32 %v1_9698, 0
  store i1 %v7_9698, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9698, label %dec_label_pc_98c0, label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %dec_label_pc_9678
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_96ac = call i32 @function_12110(i32 40, i32* null)
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96b0, i32* @r1, align 4
  store i32 %v3_96ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_96bc = call i32 @function_12fb0(i8* %tmp199, i32 %v0_96b0, i32 %v3_96ac)
  store i32 %v4_96bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_96c8 = add i32 %v4_96bc, %v2_8748
  store i32 %v2_96c8, i32* %r3.global-to-local, align 4
  %v1_96cc = load i32, i32* @r5, align 4
  %v2_96cc = add i32 %v1_96cc, %v2_96c8
  %v3_96cc = inttoptr i32 %v2_96cc to i8*
  %v4_96cc = load i8, i8* %v3_96cc, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_96d4 = icmp ugt i8 %v4_96cc, 31
  store i1 %v2_96d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_96d4 = icmp ult i8 %v4_96cc, 32
  store i1 %v6_96d4, i1* %cpsr_n.global-to-local, align 1
  %v7_96d4 = icmp eq i8 %v4_96cc, 32
  store i1 %v7_96d4, i1* %cpsr_z.global-to-local, align 1
  %v2_96dc = zext i1 %v7_96d4 to i32
  %v2_96dc.v4_96bc = add i32 %v2_96dc, %v4_96bc
  store i32 %v2_96dc.v4_96bc, i32* @r4, align 4
  %v2_96e0 = add i32 %v2_96dc.v4_96bc, %v2_8280
  store i32 %v2_96e0, i32* @r6, align 4
  store i32 %v2_96e0, i32* %r0.global-to-local, align 4
  %v1_96e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_96e8 = sub i32 %v1_96e8, %v2_96dc.v4_96bc
  store i32 %v2_96e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_96f4 = call i32 @function_12d20(i32 %v2_96e0, i32 %v2_96e8, i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32 2)
  store i32 %v5_96f4, i32* %r0.global-to-local, align 4
  %v1_96f8 = add i32 %v5_96f4, 1
  %v2_96f8 = icmp eq i32 %v5_96f4, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v3_96f8 = sub i32 0, %v5_96f4
  %v4_96f8 = and i32 %v1_96f8, %v3_96f8
  %v5_96f8 = icmp slt i32 %v4_96f8, 0
  store i1 %v5_96f8, i1* %cpsr_v.global-to-local, align 1
  %v6_96f8 = icmp slt i32 %v1_96f8, 0
  store i1 %v6_96f8, i1* %cpsr_n.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v1_96f8, 0
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_96f4, i32* @r7, align 4
  br i1 %v7_96f8, label %dec_label_pc_98c0, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96a4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_970c = load i32, i32* @r4, align 4
  %v2_970c = add i32 %v1_970c, %v2_8748
  %v1_9710 = add i32 %v5_96f4, -1
  %v2_9710 = icmp ne i32 %v5_96f4, 0
  store i1 %v2_9710, i1* %cpsr_c.global-to-local, align 1
  %v3_9710 = sub i32 0, %v5_96f4
  %v4_9710 = and i32 %v5_96f4, %v3_9710
  %v5_9710 = icmp slt i32 %v4_9710, 0
  store i1 %v5_9710, i1* %cpsr_v.global-to-local, align 1
  %v6_9710 = icmp slt i32 %v1_9710, 0
  store i1 %v6_9710, i1* %cpsr_n.global-to-local, align 1
  %v7_9710 = icmp eq i32 %v5_96f4, 1
  store i1 %v7_9710, i1* %cpsr_z.global-to-local, align 1
  %v1_9714 = add i32 %v2_970c, -20736
  store i32 %v1_9714, i32* %r3.global-to-local, align 4
  %v7_9718 = icmp sgt i32 %v5_96f4, 1
  br i1 %v7_9718, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_9704
  %v9_9718 = add i32 %v5_96f4, -2
  store i32 %v9_9718, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9704, %bb231
  %v3_9724 = phi i32 [ %v5_96f4, %dec_label_pc_9704 ], [ %v9_9718, %bb231 ]
  %v1_971c = add i32 %v2_970c, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_9724 = add i32 %v1_971c, %v3_9724
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 0, i8* %v5_9724, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* @lr, align 4
  %v1_9738 = load i32, i32* @r4, align 4
  %v2_9738 = add i32 %v1_9738, %v2_8280
  %v3_9738 = inttoptr i32 %v2_9738 to i8*
  %v4_9738 = load i8, i8* %v3_9738, align 1
  %v6_9738 = zext i8 %v4_9738 to i32
  store i32 %v6_9738, i32* %r0.global-to-local, align 4
  %v1_973c = add nsw i32 %v6_9738, -48
  store i32 %v1_973c, i32* %r3.global-to-local, align 4
  %v2_9740 = icmp ugt i32 %v1_973c, 8
  store i1 %v2_9740, i1* %cpsr_c.global-to-local, align 1
  %v3_9740 = sub nsw i32 56, %v6_9738
  %v4_9740 = and i32 %v3_9740, %v1_973c
  %v5_9740 = icmp slt i32 %v4_9740, 0
  store i1 %v5_9740, i1* %cpsr_v.global-to-local, align 1
  %v6_9740 = icmp ult i8 %v4_9738, 57
  store i1 %v6_9740, i1* %cpsr_n.global-to-local, align 1
  %v7_9740 = icmp eq i32 %v1_973c, 9
  store i1 %v7_9740, i1* %cpsr_z.global-to-local, align 1
  %v2_9744 = xor i1 %v7_9740, true
  %v3_9744 = and i1 %v2_9740, %v2_9744
  br i1 %v3_9744, label %.thread142, label %dec_label_pc_974c

.thread142:                                       ; preds = %bb232
  %v4_9744 = load i32, i32* @r6, align 4
  br label %dec_label_pc_9774

dec_label_pc_974c:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_975c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9750, %dec_label_pc_974c
  %v0_9750 = phi i32 [ %v1_9750, %dec_label_pc_9750 ], [ 0, %dec_label_pc_974c ]
  %v1_9750 = add i32 %v0_9750, 1
  store i32 %v1_9750, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 %v1_9750, i32* %stack_var_-40, align 4
  %v2_975c = add i32 %v1_9750, %v1_975c.pre
  %v3_975c = inttoptr i32 %v2_975c to i8*
  %v4_975c = load i8, i8* %v3_975c, align 1
  %v6_975c = zext i8 %v4_975c to i32
  store i32 %v6_975c, i32* %r0.global-to-local, align 4
  %v1_9760 = add nsw i32 %v6_975c, -48
  %v2_9764 = icmp ugt i32 %v1_9760, 8
  store i1 %v2_9764, i1* %cpsr_c.global-to-local, align 1
  %v3_9764 = sub nsw i32 56, %v6_975c
  %v4_9764 = and i32 %v3_9764, %v1_9760
  %v5_9764 = icmp slt i32 %v4_9764, 0
  store i1 %v5_9764, i1* %cpsr_v.global-to-local, align 1
  %v6_9764 = icmp ult i8 %v4_975c, 57
  store i1 %v6_9764, i1* %cpsr_n.global-to-local, align 1
  %v7_9764 = icmp eq i32 %v1_9760, 9
  store i1 %v7_9764, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v2_976c = xor i1 %v2_9764, true
  %v3_976c = or i1 %v7_9764, %v2_976c
  br i1 %v3_976c, label %dec_label_pc_9750, label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9750, %.thread142
  %v2_9780 = phi i32 [ %v4_9744, %.thread142 ], [ %v2_975c, %dec_label_pc_9750 ]
  %v0_9774 = phi i32 [ %v6_9738, %.thread142 ], [ %v6_975c, %dec_label_pc_9750 ]
  store i32 %v2_9780, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9774 = icmp eq i32 %v0_9774, 0
  store i1 %v2_9774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9774, label %dec_label_pc_98c0, label %dec_label_pc_977c

dec_label_pc_977c:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* @r5, align 4
  %v3_9780 = inttoptr i32 %v2_9780 to i8*
  store i8 0, i8* %v3_9780, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9788 = load i32, i32* %stack_var_-40, align 4
  %v1_978c = add i32 %v3_9788, 1
  store i32 %v1_978c, i32* %ip.global-to-local, align 4
  store i32 %v1_978c, i32* %stack_var_-40, align 4
  %v0_9794 = load i32, i32* @r6, align 4
  %v2_9794 = add i32 %v0_9794, %v1_978c
  %v3_9794 = inttoptr i32 %v2_9794 to i8*
  %v4_9794 = load i8, i8* %v3_9794, align 1
  %v6_9794 = zext i8 %v4_9794 to i32
  store i32 %v6_9794, i32* %r3.global-to-local, align 4
  %v2_9798 = icmp ugt i8 %v4_9794, 31
  store i1 %v2_9798, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9798 = icmp ult i8 %v4_9794, 32
  store i1 %v6_9798, i1* %cpsr_n.global-to-local, align 1
  %v7_9798 = icmp eq i8 %v4_9794, 32
  store i1 %v7_9798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9798, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_977c
  store i32 %v2_9794, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_977c
  %v2_979c = add i32 %v3_9788, 2
  store i32 %v2_979c, i32* %ip.global-to-local, align 4
  %v2_97a0 = add i32 %v0_9794, %v2_979c
  store i32 %v2_97a0, i32* @r4, align 4
  store i32 %v2_979c, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_97a8 = phi i32 [ %v2_9794, %.thread56 ], [ %v2_97a0, %bb233 ]
  store i32 %v0_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = inttoptr i32 %v0_97a8 to i8*
  %v2_97ac = call i32 @function_12c5c(i8* %v1_97ac)
  store i32 ptrtoint ([5 x i8]* @global_var_15d20.47 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97ac, i32* @r1, align 4
  %v0_97b8 = load i32, i32* @r4, align 4
  store i32 %v0_97b8, i32* %r0.global-to-local, align 4
  %v4_97bc = inttoptr i32 %v0_97b8 to i8*
  %v5_97bc = call i32 @function_12fb0(i8* %v4_97bc, i32 %v2_97ac, i32 ptrtoint ([5 x i8]* @global_var_15d20.47 to i32))
  store i32 %v5_97bc, i32* %r0.global-to-local, align 4
  %v1_97c0 = add i32 %v5_97bc, 1
  %v2_97c0 = icmp eq i32 %v5_97bc, -1
  store i1 %v2_97c0, i1* %cpsr_c.global-to-local, align 1
  %v3_97c0 = sub i32 0, %v5_97bc
  %v4_97c0 = and i32 %v1_97c0, %v3_97c0
  %v5_97c0 = icmp slt i32 %v4_97c0, 0
  store i1 %v5_97c0, i1* %cpsr_v.global-to-local, align 1
  %v6_97c0 = icmp slt i32 %v1_97c0, 0
  store i1 %v6_97c0, i1* %cpsr_n.global-to-local, align 1
  %v7_97c0 = icmp eq i32 %v1_97c0, 0
  store i1 %v7_97c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97c0, label %.thread60, label %dec_label_pc_97d0

.thread60:                                        ; preds = %bb234
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v4_97c8 = load i32, i32* %v11_82f4, align 4
  store i32 %v4_97c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9804

dec_label_pc_97d0:                                ; preds = %bb234
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_97d4 = load i32, i32* %stack_var_-40, align 4
  %v0_97d8 = load i32, i32* @r6, align 4
  %v2_97d8 = add i32 %v0_97d8, %v3_97d4
  store i32 %v2_97d8, i32* @r4, align 4
  store i32 %v2_97d8, i32* %r0.global-to-local, align 4
  %v1_97e0 = inttoptr i32 %v2_97d8 to i8*
  %v2_97e0 = call i32 @function_12c5c(i8* %v1_97e0)
  store i32 ptrtoint ([5 x i8]* @global_var_15d20.47 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* @r1, align 4
  %v0_97ec = load i32, i32* @r4, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v4_97f0 = inttoptr i32 %v0_97ec to i8*
  %v5_97f0 = call i32 @function_12fb0(i8* %v4_97f0, i32 %v2_97e0, i32 ptrtoint ([5 x i8]* @global_var_15d20.47 to i32))
  store i32 %v5_97f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_97f8 = load i32, i32* %stack_var_-40, align 4
  %v2_97fc = add i32 %v3_97f8, %v5_97f0
  store i32 %v2_97fc, i32* %ip.global-to-local, align 4
  store i32 %v2_97fc, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9804

dec_label_pc_9804:                                ; preds = %.thread60, %dec_label_pc_97d0
  %v0_9d8c = phi i32 [ %v4_97c8, %.thread60 ], [ %v2_97fc, %dec_label_pc_97d0 ]
  %v0_9804 = load i32, i32* @r6, align 4
  %v2_9804 = add i32 %v0_9804, %v0_9d8c
  %v3_9804 = inttoptr i32 %v2_9804 to i8*
  %v4_9804 = load i8, i8* %v3_9804, align 1
  %v6_9804 = zext i8 %v4_9804 to i32
  store i32 %v6_9804, i32* %r3.global-to-local, align 4
  %v2_9808 = icmp ugt i8 %v4_9804, 33
  store i1 %v2_9808, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9808 = icmp ult i8 %v4_9804, 34
  store i1 %v6_9808, i1* %cpsr_n.global-to-local, align 1
  %v7_9808 = icmp eq i8 %v4_9804, 34
  store i1 %v7_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9808, label %dec_label_pc_9d8c, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_9d8c, %dec_label_pc_9804, %dec_label_pc_9db4
  %v0_9810 = load i32, i32* @r6, align 4
  store i32 %v0_9810, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9818 = inttoptr i32 %v0_9810 to i8*
  %v3_9818 = call i32 @function_12d88(i8* %v2_9818, i32 10)
  store i32 %v3_9818, i32* %r0.global-to-local, align 4
  %v1_981c = add i32 %v3_9818, -1
  store i32 %v1_981c, i32* %r3.global-to-local, align 4
  %v1_9820 = add i32 %v3_9818, -9
  %v2_9820 = icmp ugt i32 %v1_981c, 7
  store i1 %v2_9820, i1* %cpsr_c.global-to-local, align 1
  %v3_9820 = sub i32 8, %v3_9818
  %v4_9820 = and i32 %v3_9820, %v1_981c
  %v5_9820 = icmp slt i32 %v4_9820, 0
  store i1 %v5_9820, i1* %cpsr_v.global-to-local, align 1
  %v6_9820 = icmp slt i32 %v1_9820, 0
  store i1 %v6_9820, i1* %cpsr_n.global-to-local, align 1
  %v7_9820 = icmp eq i32 %v1_981c, 8
  store i1 %v7_9820, i1* %cpsr_z.global-to-local, align 1
  %v2_9824 = xor i1 %v2_9820, true
  %v3_9824 = or i1 %v7_9820, %v2_9824
  br i1 %v3_9824, label %dec_label_pc_9838.preheader, label %dec_label_pc_984c

dec_label_pc_9838.preheader:                      ; preds = %dec_label_pc_9810
  store i32 %v2_87d8, i32* %ip.global-to-local, align 4
  %v6_9828 = add i32 %v3_9818, %v2_87d8
  store i32 %v6_9828, i32* @r4, align 4
  br label %dec_label_pc_9838

dec_label_pc_9834:                                ; preds = %dec_label_pc_9838
  %v1_9834 = call i32 @function_1484c(i32 1)
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9838

dec_label_pc_9838:                                ; preds = %dec_label_pc_9838.preheader, %dec_label_pc_9834
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_983c = call i32 @function_138c0(i32* null)
  %v1_9840 = load i32, i32* @r4, align 4
  %v2_9840 = sub i32 %v2_983c, %v1_9840
  %v3_9840 = icmp uge i32 %v2_983c, %v1_9840
  store i1 %v3_9840, i1* %cpsr_c.global-to-local, align 1
  %v4_9840 = xor i32 %v1_9840, %v2_983c
  %v5_9840 = xor i32 %v2_9840, %v2_983c
  %v6_9840 = and i32 %v5_9840, %v4_9840
  %v7_9840 = icmp slt i32 %v6_9840, 0
  store i1 %v7_9840, i1* %cpsr_v.global-to-local, align 1
  %v8_9840 = icmp slt i32 %v2_9840, 0
  store i1 %v8_9840, i1* %cpsr_n.global-to-local, align 1
  %v9_9840 = icmp eq i32 %v2_983c, %v1_9840
  store i1 %v9_9840, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_9840, label %dec_label_pc_984c, label %dec_label_pc_9834

dec_label_pc_984c:                                ; preds = %dec_label_pc_9838, %dec_label_pc_9810
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9850, i32* @r4, align 4
  %v0_9854 = load i32, i32* @r6, align 4
  %v2_9854 = add i32 %v0_9854, %v3_9850
  store i32 %v2_9854, i32* @r5, align 4
  store i32 %v2_9854, i32* %r0.global-to-local, align 4
  %v1_985c = inttoptr i32 %v2_9854 to i8*
  %v2_985c = call i32 @function_12c5c(i8* %v1_985c)
  store i32 ptrtoint ([5 x i8]* @global_var_15d18.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_985c, i32* @r1, align 4
  %v0_9868 = load i32, i32* @r5, align 4
  store i32 %v0_9868, i32* %r0.global-to-local, align 4
  %v4_986c = inttoptr i32 %v0_9868 to i8*
  %v5_986c = call i32 @function_12fb0(i8* %v4_986c, i32 %v2_985c, i32 ptrtoint ([5 x i8]* @global_var_15d18.45 to i32))
  store i32 %v5_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v5_986c, -4
  %v2_9870 = icmp ugt i32 %v5_986c, 3
  store i1 %v2_9870, i1* %cpsr_c.global-to-local, align 1
  %v3_9870 = sub i32 3, %v5_986c
  %v4_9870 = and i32 %v3_9870, %v5_986c
  %v5_9870 = icmp slt i32 %v4_9870, 0
  store i1 %v5_9870, i1* %cpsr_v.global-to-local, align 1
  %v6_9870 = icmp slt i32 %v1_9870, 0
  store i1 %v6_9870, i1* %cpsr_n.global-to-local, align 1
  %v7_9870 = icmp eq i32 %v5_986c, 4
  store i1 %v7_9870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9870, label %dec_label_pc_9c68, label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %dec_label_pc_984c
  %v0_9878 = load i32, i32* @r6, align 4
  %v1_9878 = load i32, i32* @r4, align 4
  %v2_9878 = add i32 %v1_9878, %v0_9878
  %v3_9878 = inttoptr i32 %v2_9878 to i8*
  %v4_9878 = load i8, i8* %v3_9878, align 1
  %v6_9878 = zext i8 %v4_9878 to i32
  store i32 %v6_9878, i32* %r3.global-to-local, align 4
  %v2_987c = icmp ugt i8 %v4_9878, 46
  store i1 %v2_987c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_987c = icmp ult i8 %v4_9878, 47
  store i1 %v6_987c, i1* %cpsr_n.global-to-local, align 1
  %v7_987c = icmp eq i8 %v4_9878, 47
  store i1 %v7_987c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_987c, label %dec_label_pc_9de0, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9dfc, %dec_label_pc_9de0, %dec_label_pc_9d38, %dec_label_pc_9d1c, %dec_label_pc_9878, %dec_label_pc_9e2c, %dec_label_pc_9d68
  %v0_9884 = load i32, i32* %sb.global-to-local, align 4
  %v1_9888 = add i32 %v0_9884, 1431
  store i32 %v1_9888, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15cf4.21 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v4_9894 = call i32 @function_13be0(i32 %v1_9888, i32 ptrtoint ([4 x i8]* @global_var_15cf4.21 to i32), i32 4)
  store i32 %v4_9894, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_989c = load i32, i32* @r8, align 4
  %v3_989c = add i32 %v2_989c, -1452
  %v4_989c = inttoptr i32 %v3_989c to i8*
  store i8 10, i8* %v4_989c, align 1
  br label %dec_label_pc_8838

dec_label_pc_98a4:                                ; preds = %dec_label_pc_8610
  store i32 %v1_8610, i32* %r3.global-to-local, align 4
  %v1_98a8 = trunc i32 %v1_8610 to i8
  store i8 %v1_98a8, i8* %v2_8650, align 1
  %v0_98ac = load i32, i32* @r6, align 4
  %v1_98ac = add i32 %v0_98ac, -1431
  %v2_98ac = inttoptr i32 %v1_98ac to i32*
  %v3_98ac = load i32, i32* %v2_98ac, align 4
  store i32 %v3_98ac, i32* %r0.global-to-local, align 4
  %v1_98b0 = call i32 @function_135f0(i32 %v3_98ac)
  store i32 %v1_98b0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_98b8 = load i32, i32* @r6, align 4
  %v2_98b8 = add i32 %v1_98b8, -1431
  %v3_98b8 = inttoptr i32 %v2_98b8 to i32*
  store i32 -1, i32* %v3_98b8, align 4
  br label %dec_label_pc_8630

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9774, %dec_label_pc_96a4, %dec_label_pc_9678
  %v0_98c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d0c.41 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_98d0 = call i32 @function_12d20(i32 %v2_8280, i32 %v0_98c0, i32 ptrtoint ([5 x i8]* @global_var_15d0c.41 to i32), i32 4)
  %v0_98d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_98d8 = add i32 %v0_98d4, 1431
  store i32 %v1_98d8, i32* @r4, align 4
  store i32 %v5_98d0, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d28.49 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_98d8, i32* %r0.global-to-local, align 4
  %v3_98e8 = inttoptr i32 %v1_98d8 to i8*
  %v4_98e8 = call i32 @function_1303c(i8* %v3_98e8, i32 ptrtoint ([5 x i8]* @global_var_15d28.49 to i32))
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98ec = icmp slt i32 %v4_98e8, 0
  store i1 %v1_98ec, i1* %cpsr_n.global-to-local, align 1
  %v2_98ec = icmp eq i32 %v4_98e8, 0
  store i1 %v2_98ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_98ec, label %dec_label_pc_9aa8, label %dec_label_pc_98f4

dec_label_pc_98f4:                                ; preds = %dec_label_pc_9aa8, %dec_label_pc_98c0
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r8, align 4
  %v3_98f8 = add i32 %v2_98f8, -1452
  %v4_98f8 = inttoptr i32 %v3_98f8 to i8*
  store i8 7, i8* %v4_98f8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_98fc:                                ; preds = %bb240, %dec_label_pc_98f4
  %v0_98fc = load i32, i32* @r5, align 4
  store i32 %v0_98fc, i32* %r2.global-to-local, align 4
  %v0_9900 = load i32, i32* @r8, align 4
  %v1_9900 = add i32 %v0_9900, -1456
  %v2_9900 = inttoptr i32 %v1_9900 to i32*
  %v3_9900 = load i32, i32* %v2_9900, align 4
  store i32 %v3_9900, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_990c = call i32 @function_13dec(i32 %v3_9900, i32* nonnull %stack_var_-20809, i32 %v0_98fc, i32 16384)
  store i32 %v5_990c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8838

dec_label_pc_9914:                                ; preds = %dec_label_pc_8e04
  %v2_9914 = add i32 %v0_9914, -10240
  %v3_9914 = icmp ugt i32 %v0_9914, 10239
  store i1 %v3_9914, i1* %cpsr_c.global-to-local, align 1
  %v4_9914 = sub i32 10239, %v0_9914
  %v5_9914 = and i32 %v4_9914, %v0_9914
  %v6_9914 = icmp slt i32 %v5_9914, 0
  store i1 %v6_9914, i1* %cpsr_v.global-to-local, align 1
  %v7_9914 = icmp slt i32 %v2_9914, 0
  store i1 %v7_9914, i1* %cpsr_n.global-to-local, align 1
  %v8_9914 = icmp eq i32 %v0_9914, 10240
  store i1 %v8_9914, i1* %cpsr_z.global-to-local, align 1
  %v5_9918 = icmp slt i32 %v0_9914, 10240
  br i1 %v5_9918, label %dec_label_pc_8838, label %dec_label_pc_8e20

dec_label_pc_9920:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9924 = load i32, i32* @r4, align 4
  %v2_9924 = inttoptr i32 %v1_9924 to i32*
  store i32 104, i32* %v2_9924, align 4
  br label %dec_label_pc_965c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9430
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9930 = load i32, i32* %fp.global-to-local, align 4
  %v2_9930 = inttoptr i32 %v1_9930 to i32*
  store i32 104, i32* %v2_9930, align 4
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %dec_label_pc_9950, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r8, align 4
  %v1_9934 = add i32 %v0_9934, -1456
  %v2_9934 = inttoptr i32 %v1_9934 to i32*
  %v3_9934 = load i32, i32* %v2_9934, align 4
  store i32 %v3_9934, i32* %r0.global-to-local, align 4
  %v1_9938 = call i32 @function_135f0(i32 %v3_9934)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_9944 = load i32, i32* @r8, align 4
  %v2_9944 = add i32 %v1_9944, -1456
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  store i32 -1, i32* %v3_9944, align 4
  %v0_9948 = load i32, i32* %lr.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* @r8, align 4
  %v3_9948 = add i32 %v2_9948, -1452
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  br label %dec_label_pc_8838

dec_label_pc_9950:                                ; preds = %dec_label_pc_9458
  %v0_9950 = load i32, i32* %fp.global-to-local, align 4
  %v1_9950 = inttoptr i32 %v0_9950 to i32*
  %v2_9950 = load i32, i32* %v1_9950, align 4
  store i32 %v2_9950, i32* %r3.global-to-local, align 4
  %v1_9954 = add i32 %v2_9950, -11
  %v2_9954 = icmp ugt i32 %v2_9950, 10
  store i1 %v2_9954, i1* %cpsr_c.global-to-local, align 1
  %v3_9954 = sub i32 10, %v2_9950
  %v4_9954 = and i32 %v3_9954, %v2_9950
  %v5_9954 = icmp slt i32 %v4_9954, 0
  store i1 %v5_9954, i1* %cpsr_v.global-to-local, align 1
  %v6_9954 = icmp slt i32 %v1_9954, 0
  store i1 %v6_9954, i1* %cpsr_n.global-to-local, align 1
  %v7_9954 = icmp eq i32 %v2_9950, 11
  store i1 %v7_9954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9954, label %dec_label_pc_8838, label %dec_label_pc_9934

dec_label_pc_9960:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_996c = load i32, i32* @r5, align 4
  %v1_996c = add i32 %v0_996c, 4
  %v2_996c = inttoptr i32 %v1_996c to i8*
  %v3_996c = load i8, i8* %v2_996c, align 1
  %v4_996c = zext i8 %v3_996c to i32
  store i32 %v4_996c, i32* %r3.global-to-local, align 4
  %v2_9970 = icmp ugt i8 %v3_996c, 114
  store i1 %v2_9970, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9970 = icmp ult i8 %v3_996c, 115
  store i1 %v6_9970, i1* %cpsr_n.global-to-local, align 1
  %v7_9970 = icmp eq i8 %v3_996c, 115
  store i1 %v7_9970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9970, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_9960
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_9960, %bb235
  %v3_9980 = phi i32 [ 7, %dec_label_pc_9960 ], [ 8, %bb235 ]
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 %v0_996c, i32* @r0, align 4
  %v1_9988 = load i32, i32* %r6.global-to-local, align 4
  %v2_9988 = sub i32 %v1_9988, %v3_9980
  store i32 %v2_9988, i32* @r2, align 4
  %v2_998c = add i32 %v3_9980, %v0_996c
  store i32 %v2_998c, i32* @r1, align 4
  %v3_9990 = call i32 @function_13bf0(i32 %v0_996c, i32 %v2_998c, i32 %v2_9988)
  store i32 %v3_9990, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v0_9998 = load i32, i32* @r7, align 4
  store i32 %v0_9998, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v1_99a0 = load i32, i32* @r4, align 4
  %v2_99a0 = add i32 %v1_99a0, %v2_8280
  %v3_99a0 = inttoptr i32 %v2_99a0 to i8*
  %v4_99a0 = load i8, i8* %v3_99a0, align 1
  %v6_99a0 = zext i8 %v4_99a0 to i32
  store i32 %v6_99a0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99a4 = icmp eq i8 %v4_99a0, 0
  store i1 %v2_99a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99a4, label %dec_label_pc_99e8, label %dec_label_pc_99ac

dec_label_pc_99ac:                                ; preds = %.thread63
  %v2_99ac = icmp ugt i8 %v4_99a0, 46
  store i1 %v2_99ac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99ac = icmp ult i8 %v4_99a0, 47
  store i1 %v6_99ac, i1* %cpsr_n.global-to-local, align 1
  %v7_99ac = icmp eq i8 %v4_99a0, 47
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  %v1_99b0 = load i32, i32* @r5, align 4
  br i1 %v7_99ac, label %bb236, label %dec_label_pc_99b8

bb236:                                            ; preds = %dec_label_pc_99ac
  store i32 %v1_99b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9b48

dec_label_pc_99b8:                                ; preds = %dec_label_pc_99ac
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99c8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c8
  %v2_99c0 = icmp ugt i8 %v4_99d4, 46
  store i1 %v2_99c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99c0 = icmp ult i8 %v4_99d4, 47
  store i1 %v6_99c0, i1* %cpsr_n.global-to-local, align 1
  %v7_99c0 = icmp eq i8 %v4_99d4, 47
  store i1 %v7_99c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99c0, label %dec_label_pc_9b48, label %dec_label_pc_99c8

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99b8
  %v0_99dc = phi i32 [ %v1_99dc, %dec_label_pc_99c0 ], [ 1, %dec_label_pc_99b8 ]
  store i32 %v0_99dc, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 %v0_99dc, i32* %stack_var_-40, align 4
  %v2_99d4 = add i32 %v0_99dc, %v1_99b0
  %v3_99d4 = inttoptr i32 %v2_99d4 to i8*
  %v4_99d4 = load i8, i8* %v3_99d4, align 1
  %v6_99d4 = zext i8 %v4_99d4 to i32
  store i32 %v6_99d4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99d8 = icmp eq i8 %v4_99d4, 0
  store i1 %v2_99d8, i1* %cpsr_z.global-to-local, align 1
  %v1_99dc = add i32 %v0_99dc, 1
  store i32 %v1_99dc, i32* %r3.global-to-local, align 4
  store i32 %v2_99d4, i32* %r1.global-to-local, align 4
  br i1 %v2_99d8, label %dec_label_pc_99e8, label %dec_label_pc_99c0

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c8, %.thread63, %dec_label_pc_9b48
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r0.global-to-local, align 4
  %v1_99ec = inttoptr i32 %v0_99e8 to i8*
  %v2_99ec = call i32 @function_12c5c(i8* %v1_99ec)
  store i32 %v2_99ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_99f0 = icmp slt i32 %v2_99ec, 0
  store i1 %v1_99f0, i1* %cpsr_n.global-to-local, align 1
  %v2_99f0 = icmp eq i32 %v2_99ec, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_99ec, 1
  br i1 %tmp237, label %dec_label_pc_9a14, label %dec_label_pc_99f8

dec_label_pc_99f8:                                ; preds = %dec_label_pc_99e8
  %v0_99f8 = load i32, i32* @r5, align 4
  store i32 %v0_99f8, i32* %r0.global-to-local, align 4
  %v1_99fc = inttoptr i32 %v0_99f8 to i8*
  %v2_99fc = call i32 @function_12c5c(i8* %v1_99fc)
  store i32 %v2_99fc, i32* %r0.global-to-local, align 4
  %v1_9a00 = add i32 %v2_99fc, -127
  %v2_9a00 = icmp ugt i32 %v2_99fc, 126
  store i1 %v2_9a00, i1* %cpsr_c.global-to-local, align 1
  %v3_9a00 = sub i32 126, %v2_99fc
  %v4_9a00 = and i32 %v3_9a00, %v2_99fc
  %v5_9a00 = icmp slt i32 %v4_9a00, 0
  store i1 %v5_9a00, i1* %cpsr_v.global-to-local, align 1
  %v6_9a00 = icmp slt i32 %v1_9a00, 0
  store i1 %v6_9a00, i1* %cpsr_n.global-to-local, align 1
  %v7_9a00 = icmp eq i32 %v2_99fc, 127
  store i1 %v7_9a00, i1* %cpsr_z.global-to-local, align 1
  %v7_9a04 = icmp sgt i32 %v2_99fc, 127
  br i1 %v7_9a04, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_99f8
  %v8_9a04 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a08 = add i32 %v8_9a04, 789
  store i32 %v9_9a08, i32* %r0.global-to-local, align 4
  %v8_9a0c = load i32, i32* @r5, align 4
  store i32 %v8_9a0c, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_99f8, %bb238
  store i32 39444, i32* %lr.global-to-local, align 4
  %v3_9a10 = xor i1 %v6_9a00, %v5_9a00
  %v4_9a10 = or i1 %v7_9a00, %v3_9a10
  call void @__pseudo_cond_branch(i1 %v4_9a10, i32 ptrtoint (i32* @global_var_12c84.50 to i32))
  br label %dec_label_pc_9a14

dec_label_pc_9a14:                                ; preds = %dec_label_pc_99e8, %.thread66
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9a18 = load i32, i32* %stack_var_-40, align 4
  %v0_9a1c = load i32, i32* @r5, align 4
  %v2_9a1c = add i32 %v3_9a18, 1
  %v1_9a20 = add i32 %v2_9a1c, %v0_9a1c
  store i32 %v1_9a20, i32* %r0.global-to-local, align 4
  %v1_9a24 = inttoptr i32 %v1_9a20 to i8*
  %v2_9a24 = call i32 @function_12c5c(i8* %v1_9a24)
  store i32 %v2_9a24, i32* %r0.global-to-local, align 4
  %v1_9a28 = add i32 %v2_9a24, -255
  %v2_9a28 = icmp ugt i32 %v2_9a24, 254
  store i1 %v2_9a28, i1* %cpsr_c.global-to-local, align 1
  %v3_9a28 = sub i32 254, %v2_9a24
  %v4_9a28 = and i32 %v3_9a28, %v2_9a24
  %v5_9a28 = icmp slt i32 %v4_9a28, 0
  store i1 %v5_9a28, i1* %cpsr_v.global-to-local, align 1
  %v6_9a28 = icmp slt i32 %v1_9a28, 0
  store i1 %v6_9a28, i1* %cpsr_n.global-to-local, align 1
  %v7_9a28 = icmp eq i32 %v2_9a24, 255
  store i1 %v7_9a28, i1* %cpsr_z.global-to-local, align 1
  %v8_9a2c = icmp sgt i32 %v2_9a24, 255
  br i1 %v8_9a2c, label %dec_label_pc_9400, label %dec_label_pc_9a30

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a14
  %v0_9a30 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a34 = add i32 %v0_9a30, 533
  store i32 %v1_9a34, i32* @r4, align 4
  store i32 %v1_9a34, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9a40 = call i32 @function_12cfc(i32 %v1_9a34, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9a48 = load i32, i32* %stack_var_-40, align 4
  %v0_9a4c = load i32, i32* @r5, align 4
  %v2_9a4c = add i32 %v3_9a48, 1
  %v1_9a50 = add i32 %v2_9a4c, %v0_9a4c
  store i32 %v1_9a50, i32* %r0.global-to-local, align 4
  %v1_9a54 = inttoptr i32 %v1_9a50 to i8*
  %v2_9a54 = call i32 @function_12c5c(i8* %v1_9a54)
  store i32 %v2_9a54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a58 = icmp slt i32 %v2_9a54, 0
  store i1 %v1_9a58, i1* %cpsr_n.global-to-local, align 1
  %v2_9a58 = icmp eq i32 %v2_9a54, 0
  store i1 %v2_9a58, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_9a54, 1
  br i1 %tmp239, label %dec_label_pc_9400, label %dec_label_pc_9a60

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a30
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9a64 = load i32, i32* %stack_var_-40, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  %v0_9a6c = load i32, i32* @r4, align 4
  store i32 %v0_9a6c, i32* @r0, align 4
  %v2_9a68 = add i32 %v3_9a64, 1
  %v1_9a70 = add i32 %v2_9a68, %v0_9a68
  store i32 %v1_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = inttoptr i32 %v0_9a6c to i8*
  %v3_9a74 = call i32 @function_12c84(i8* %v2_9a74, i32 %v1_9a70)
  store i32 %v3_9a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_8dd0
  %v0_9a7c = load i32, i32* @r8, align 4
  %v1_9a7c = add i32 %v0_9a7c, -1456
  %v2_9a7c = inttoptr i32 %v1_9a7c to i32*
  %v3_9a7c = load i32, i32* %v2_9a7c, align 4
  store i32 %v3_9a7c, i32* %r0.global-to-local, align 4
  %v1_9a80 = call i32 @function_135f0(i32 %v3_9a7c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9a8c = load i32, i32* @r8, align 4
  %v2_9a8c = add i32 %v1_9a8c, -1456
  %v3_9a8c = inttoptr i32 %v2_9a8c to i32*
  store i32 -1, i32* %v3_9a8c, align 4
  %v0_9a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a90 = trunc i32 %v0_9a90 to i8
  %v2_9a90 = load i32, i32* @r8, align 4
  %v3_9a90 = add i32 %v2_9a90, -1452
  %v4_9a90 = inttoptr i32 %v3_9a90 to i8*
  store i8 %v1_9a90, i8* %v4_9a90, align 1
  br label %dec_label_pc_8838

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9650
  %v0_9a98 = load i32, i32* @r8, align 4
  %v1_9a98 = add i32 %v0_9a98, -1452
  %v2_9a98 = inttoptr i32 %v1_9a98 to i8*
  %v3_9a98 = load i8, i8* %v2_9a98, align 1
  %v4_9a98 = zext i8 %v3_9a98 to i32
  store i32 %v4_9a98, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9a9c = icmp eq i8 %v3_9a98, 0
  store i1 %v2_9a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a9c, label %dec_label_pc_8838, label %dec_label_pc_9400

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_98c0
  %v0_9aa8 = load i32, i32* @r4, align 4
  store i32 %v0_9aa8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15cf4.21 to i32), i32* %r1.global-to-local, align 4
  %v3_9ab0 = inttoptr i32 %v0_9aa8 to i8*
  %v4_9ab0 = call i32 @function_1303c(i8* %v3_9ab0, i32 ptrtoint ([4 x i8]* @global_var_15cf4.21 to i32))
  store i32 %v4_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ab4 = icmp slt i32 %v4_9ab0, 0
  store i1 %v1_9ab4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v4_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ab4, label %bb240, label %dec_label_pc_98f4

bb240:                                            ; preds = %dec_label_pc_9aa8
  %v0_9abc = load i32, i32* %fp.global-to-local, align 4
  %v1_9abc = load i32, i32* @r5, align 4
  %v2_9abc = sub i32 %v0_9abc, %v1_9abc
  %v3_9abc = icmp uge i32 %v0_9abc, %v1_9abc
  store i1 %v3_9abc, i1* %cpsr_c.global-to-local, align 1
  %v4_9abc = xor i32 %v1_9abc, %v0_9abc
  %v5_9abc = xor i32 %v2_9abc, %v0_9abc
  %v6_9abc = and i32 %v5_9abc, %v4_9abc
  %v7_9abc = icmp slt i32 %v6_9abc, 0
  store i1 %v7_9abc, i1* %cpsr_v.global-to-local, align 1
  %v8_9abc = icmp slt i32 %v2_9abc, 0
  store i1 %v8_9abc, i1* %cpsr_n.global-to-local, align 1
  %v9_9abc = icmp eq i32 %v0_9abc, %v1_9abc
  store i1 %v9_9abc, i1* %cpsr_z.global-to-local, align 1
  %v7_9ac0 = icmp sgt i32 %v0_9abc, %v1_9abc
  %. = select i1 %v7_9ac0, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9ac8 = trunc i32 %. to i8
  %v10_9ac8 = load i32, i32* @r8, align 4
  %v11_9ac8 = add i32 %v10_9ac8, -1452
  %v12_9ac8 = inttoptr i32 %v11_9ac8 to i8*
  store i8 %v9_9ac8, i8* %v12_9ac8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v0_9adc = load i32, i32* @r8, align 4
  %v1_9adc = add i32 %v0_9adc, 656
  %v2_9adc = inttoptr i32 %v1_9adc to i32*
  %v3_9adc = load i32, i32* %v2_9adc, align 4
  store i32 %v3_9adc, i32* @r4, align 4
  %v3_9ae0 = call i32 @function_12110(i32 39, i32* null)
  %v0_9ae4 = load i32, i32* @r4, align 4
  store i32 %v0_9ae4, i32* %r1.global-to-local, align 4
  store i32 %v3_9ae0, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9af0 = load i32, i32* @r7, align 4
  store i32 %v0_9af0, i32* %r0.global-to-local, align 4
  %v4_9af4 = call i32 @function_12d20(i32 %v0_9af0, i32 %v0_9ae4, i32 %v3_9ae0, i32 11)
  store i32 %v4_9af4, i32* %r0.global-to-local, align 4
  %v0_9af8 = load i32, i32* @r8, align 4
  %v1_9af8 = add i32 %v0_9af8, 656
  %v2_9af8 = inttoptr i32 %v1_9af8 to i32*
  %v3_9af8 = load i32, i32* %v2_9af8, align 4
  %v0_9afc = load i32, i32* @r7, align 4
  %v2_9afc = add i32 %v0_9afc, %v4_9af4
  store i32 %v2_9afc, i32* @r5, align 4
  store i32 %v4_9af4, i32* @r4, align 4
  %v2_9b04 = sub i32 %v3_9af8, %v4_9af4
  store i32 %v2_9b04, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d30.52 to i32), i32* %r2.global-to-local, align 4
  %v0_9b0c = load i32, i32* @sl, align 4
  store i32 %v0_9b0c, i32* %r3.global-to-local, align 4
  store i32 %v2_9afc, i32* %r0.global-to-local, align 4
  %v4_9b14 = call i32 @function_12d20(i32 %v2_9afc, i32 %v2_9b04, i32 ptrtoint (i32* @global_var_15d30.52 to i32), i32 %v0_9b0c)
  store i32 %v4_9b14, i32* %r0.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r8, align 4
  %v1_9b18 = add i32 %v0_9b18, 12
  %v2_9b18 = inttoptr i32 %v1_9b18 to i32*
  %v3_9b18 = load i32, i32* %v2_9b18, align 4
  store i32 %v3_9b18, i32* %r3.global-to-local, align 4
  %v0_9b1c = load i32, i32* @r4, align 4
  %v2_9b1c = add i32 %v0_9b1c, %v4_9b14
  store i32 %v2_9b1c, i32* %r6.global-to-local, align 4
  %v1_9b20 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b20 = add i32 %v1_9b20, %v2_9b1c
  store i32 %v2_9b20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_9b28 = add i32 %v3_9b18, -4
  %v2_9b28 = icmp ugt i32 %v3_9b18, 3
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = sub i32 3, %v3_9b18
  %v4_9b28 = and i32 %v3_9b28, %v3_9b18
  %v5_9b28 = icmp slt i32 %v4_9b28, 0
  store i1 %v5_9b28, i1* %cpsr_v.global-to-local, align 1
  %v6_9b28 = icmp slt i32 %v1_9b28, 0
  store i1 %v6_9b28, i1* %cpsr_n.global-to-local, align 1
  %v7_9b28 = icmp eq i32 %v3_9b18, 4
  store i1 %v7_9b28, i1* %cpsr_z.global-to-local, align 1
  %v3_9b2c = add i32 %v2_9b20, 2115
  %v4_9b2c = inttoptr i32 %v3_9b2c to i8*
  store i8 0, i8* %v4_9b2c, align 1
  %v7_9b30 = icmp sgt i32 %v3_9b18, 4
  br i1 %v7_9b30, label %dec_label_pc_9b34, label %dec_label_pc_9bbc

dec_label_pc_9b34:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_9bbc, %dec_label_pc_9bcc
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_9b3c = load i32, i32* @r8, align 4
  %v2_9b3c = add i32 %v1_9b3c, 8
  %v3_9b3c = inttoptr i32 %v2_9b3c to i32*
  store i32 -1, i32* %v3_9b3c, align 4
  %v0_9b40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b40 = trunc i32 %v0_9b40 to i8
  %v2_9b40 = load i32, i32* @r8, align 4
  %v3_9b40 = add i32 %v2_9b40, -1452
  %v4_9b40 = inttoptr i32 %v3_9b40 to i8*
  store i8 %v1_9b40, i8* %v4_9b40, align 1
  br label %dec_label_pc_8838

dec_label_pc_9b48:                                ; preds = %dec_label_pc_99c0, %bb236
  %v2_9b4c = phi i32 [ %v1_99b0, %bb236 ], [ %v2_99d4, %dec_label_pc_99c0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b4c = inttoptr i32 %v2_9b4c to i8*
  store i8 0, i8* %v3_9b4c, align 1
  br label %dec_label_pc_99e8

dec_label_pc_9b54:                                ; preds = %dec_label_pc_93f0
  %v0_9b54 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b58 = add i32 %v0_9b54, 533
  store i32 %v1_9b58, i32* @r4, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9b64 = call i32 @function_12cfc(i32 %v1_9b58, i32 255)
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_9b6c = load i32, i32* %stack_var_-40, align 4
  %v0_9b70 = load i32, i32* @r5, align 4
  %v2_9b70 = add i32 %v3_9b6c, 1
  %v1_9b74 = add i32 %v2_9b70, %v0_9b70
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  %v1_9b78 = inttoptr i32 %v1_9b74 to i8*
  %v2_9b78 = call i32 @function_12c5c(i8* %v1_9b78)
  store i32 %v2_9b78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9b7c = icmp slt i32 %v2_9b78, 0
  store i1 %v1_9b7c, i1* %cpsr_n.global-to-local, align 1
  %v2_9b7c = icmp eq i32 %v2_9b78, 0
  store i1 %v2_9b7c, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_9b78, 1
  br i1 %tmp241, label %dec_label_pc_9400, label %dec_label_pc_9b84

dec_label_pc_9b84:                                ; preds = %dec_label_pc_9b54
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9b88 = load i32, i32* %stack_var_-40, align 4
  %v0_9b8c = load i32, i32* @r5, align 4
  %v2_9b8c = add i32 %v3_9b88, 1
  %v1_9b90 = add i32 %v2_9b8c, %v0_9b8c
  store i32 %v1_9b90, i32* %r0.global-to-local, align 4
  %v1_9b94 = inttoptr i32 %v1_9b90 to i8*
  %v2_9b94 = call i32 @function_12c5c(i8* %v1_9b94)
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v1_9b98 = add i32 %v2_9b94, -255
  %v2_9b98 = icmp ugt i32 %v2_9b94, 254
  store i1 %v2_9b98, i1* %cpsr_c.global-to-local, align 1
  %v3_9b98 = sub i32 254, %v2_9b94
  %v4_9b98 = and i32 %v3_9b98, %v2_9b94
  %v5_9b98 = icmp slt i32 %v4_9b98, 0
  store i1 %v5_9b98, i1* %cpsr_v.global-to-local, align 1
  %v6_9b98 = icmp slt i32 %v1_9b98, 0
  store i1 %v6_9b98, i1* %cpsr_n.global-to-local, align 1
  %v7_9b98 = icmp eq i32 %v2_9b94, 255
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 255
  br i1 %v8_9b9c, label %dec_label_pc_9400, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b84
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9ba4 = load i32, i32* %stack_var_-40, align 4
  %v0_9ba8 = load i32, i32* @r5, align 4
  %v0_9bac = load i32, i32* @r4, align 4
  store i32 %v0_9bac, i32* @r0, align 4
  %v2_9ba8 = add i32 %v3_9ba4, 1
  %v1_9bb0 = add i32 %v2_9ba8, %v0_9ba8
  store i32 %v1_9bb0, i32* %r1.global-to-local, align 4
  %v2_9bb4 = inttoptr i32 %v0_9bac to i8*
  %v3_9bb4 = call i32 @function_12c84(i8* %v2_9bb4, i32 %v1_9bb0)
  store i32 %v3_9bb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9bbc:                                ; preds = %dec_label_pc_9ad4
  %v0_9bbc = load i32, i32* @r5, align 4
  store i32 %v0_9bbc, i32* %r0.global-to-local, align 4
  %v1_9bc0 = inttoptr i32 %v0_9bbc to i8*
  %v2_9bc0 = call i32 @function_12c5c(i8* %v1_9bc0)
  store i32 %v2_9bc0, i32* %r0.global-to-local, align 4
  %v1_9bc4 = add i32 %v2_9bc0, -127
  %v2_9bc4 = icmp ugt i32 %v2_9bc0, 126
  store i1 %v2_9bc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bc4 = sub i32 126, %v2_9bc0
  %v4_9bc4 = and i32 %v3_9bc4, %v2_9bc0
  %v5_9bc4 = icmp slt i32 %v4_9bc4, 0
  store i1 %v5_9bc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9bc4 = icmp slt i32 %v1_9bc4, 0
  store i1 %v6_9bc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9bc4 = icmp eq i32 %v2_9bc0, 127
  store i1 %v7_9bc4, i1* %cpsr_z.global-to-local, align 1
  %v8_9bc8 = icmp sgt i32 %v2_9bc0, 127
  br i1 %v8_9bc8, label %dec_label_pc_9b34, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %dec_label_pc_9bbc
  %v0_9bcc = load i32, i32* @r8, align 4
  %v1_9bcc = add i32 %v0_9bcc, 12
  %v2_9bcc = inttoptr i32 %v1_9bcc to i32*
  %v3_9bcc = load i32, i32* %v2_9bcc, align 4
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v1_9bd4 = and i32 %v3_9bcc, 33554432
  %v2_9bd4 = icmp ne i32 %v1_9bd4, 0
  store i1 %v2_9bd4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bd4 = mul i32 %v3_9bcc, 128
  %v0_9bd8 = load i32, i32* @r5, align 4
  store i32 %v0_9bd8, i32* %r1.global-to-local, align 4
  %v2_9bdc = add i32 %v3_9bd4, %v1_9410
  store i32 %v2_9bdc, i32* @r0, align 4
  %v2_9be0 = inttoptr i32 %v2_9bdc to i8*
  %v3_9be0 = call i32 @function_12c84(i8* %v2_9be0, i32 %v0_9bd8)
  store i32 %v3_9be0, i32* %r0.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r8, align 4
  %v1_9be4 = add i32 %v0_9be4, 12
  %v2_9be4 = inttoptr i32 %v1_9be4 to i32*
  %v3_9be4 = load i32, i32* %v2_9be4, align 4
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v1_9bec = and i32 %v3_9be4, 33554432
  %v2_9bec = icmp ne i32 %v1_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_c.global-to-local, align 1
  %v3_9bec = mul i32 %v3_9be4, 128
  %v2_9bf0 = add i32 %v3_9bec, %v1_9410
  store i32 %v2_9bf0, i32* %r4.global-to-local, align 4
  store i32 %v2_9bf0, i32* %r0.global-to-local, align 4
  %v1_9bf8 = inttoptr i32 %v2_9bf0 to i8*
  %v2_9bf8 = call i32 @function_12c5c(i8* %v1_9bf8)
  store i32 ptrtoint (i32* @global_var_16558.54 to i32), i32* %r1.global-to-local, align 4
  %v2_9c00 = add i32 %v2_9bf0, %v2_9bf8
  store i32 %v2_9c00, i32* @r0, align 4
  %v2_9c04 = inttoptr i32 %v2_9c00 to i8*
  %v3_9c04 = call i32 @function_12c84(i8* %v2_9c04, i32 ptrtoint (i32* @global_var_16558.54 to i32))
  store i32 %v3_9c04, i32* %r0.global-to-local, align 4
  %v0_9c08 = load i32, i32* %r6.global-to-local, align 4
  %v1_9c08 = add i32 %v0_9c08, 3
  store i32 %v1_9c08, i32* @r4, align 4
  %v0_9c0c = load i32, i32* @r8, align 4
  %v1_9c0c = add i32 %v0_9c0c, 656
  %v2_9c0c = inttoptr i32 %v1_9c0c to i32*
  %v3_9c0c = load i32, i32* %v2_9c0c, align 4
  %v0_9c10 = load i32, i32* @r7, align 4
  %v2_9c10 = add i32 %v0_9c10, %v1_9c08
  store i32 %v2_9c10, i32* %r6.global-to-local, align 4
  %v2_9c14 = sub i32 %v3_9c0c, %v1_9c08
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v0_9c18 = load i32, i32* @sl, align 4
  store i32 %v0_9c18, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d30.52 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9c10, i32* %r0.global-to-local, align 4
  %v4_9c24 = call i32 @function_12d20(i32 %v2_9c10, i32 %v2_9c14, i32 ptrtoint (i32* @global_var_15d30.52 to i32), i32 %v0_9c18)
  store i32 %v4_9c24, i32* %r0.global-to-local, align 4
  %v0_9c28 = load i32, i32* @r8, align 4
  %v1_9c28 = add i32 %v0_9c28, 12
  %v2_9c28 = inttoptr i32 %v1_9c28 to i32*
  %v3_9c28 = load i32, i32* %v2_9c28, align 4
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v1_9c30 = and i32 %v3_9c28, 33554432
  %v2_9c30 = icmp ne i32 %v1_9c30, 0
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v3_9c30 = mul i32 %v3_9c28, 128
  %v0_9c34 = load i32, i32* @r4, align 4
  %v1_9c34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9c38 = add i32 %v3_9c30, %v1_9410
  store i32 %v2_9c38, i32* @r5, align 4
  %v2_9c34 = add i32 %v0_9c34, %v4_9c24
  %v2_9c3c = add i32 %v2_9c34, %v1_9c34
  store i32 %v2_9c3c, i32* @r4, align 4
  %v0_9c40 = load i32, i32* %fp.global-to-local, align 4
  %v1_9c40 = trunc i32 %v0_9c40 to i8
  %v3_9c40 = add i32 %v2_9c3c, 2115
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 %v1_9c40, i8* %v4_9c40, align 1
  %v0_9c44 = load i32, i32* @r5, align 4
  store i32 %v0_9c44, i32* %r0.global-to-local, align 4
  %v1_9c48 = inttoptr i32 %v0_9c44 to i8*
  %v2_9c48 = call i32 @function_12c5c(i8* %v1_9c48)
  %v0_9c4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9c4c, i32* %r1.global-to-local, align 4
  %v0_9c50 = load i32, i32* @r5, align 4
  %v2_9c50 = add i32 %v0_9c50, %v2_9c48
  store i32 %v2_9c50, i32* @r0, align 4
  %v2_9c54 = inttoptr i32 %v2_9c50 to i8*
  %v3_9c54 = call i32 @function_12c84(i8* %v2_9c54, i32 %v0_9c4c)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  %v0_9c58 = load i32, i32* @r8, align 4
  %v1_9c58 = add i32 %v0_9c58, 12
  %v2_9c58 = inttoptr i32 %v1_9c58 to i32*
  %v3_9c58 = load i32, i32* %v2_9c58, align 4
  %v1_9c5c = add i32 %v3_9c58, 1
  store i32 %v1_9c5c, i32* %r3.global-to-local, align 4
  store i32 %v1_9c5c, i32* %v2_9c58, align 4
  br label %dec_label_pc_9b34

dec_label_pc_9c68:                                ; preds = %dec_label_pc_984c
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_9c74 = load i32, i32* @r5, align 4
  %v1_9c74 = add i32 %v0_9c74, 4
  %v2_9c74 = inttoptr i32 %v1_9c74 to i8*
  %v3_9c74 = load i8, i8* %v2_9c74, align 1
  %v4_9c74 = zext i8 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r3.global-to-local, align 4
  %v2_9c78 = icmp ugt i8 %v3_9c74, 114
  store i1 %v2_9c78, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c78 = icmp ult i8 %v3_9c74, 115
  store i1 %v6_9c78, i1* %cpsr_n.global-to-local, align 1
  %v7_9c78 = icmp eq i8 %v3_9c74, 115
  store i1 %v7_9c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c78, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_9c68
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_9c68, %bb242
  %v3_9c88 = phi i32 [ 7, %dec_label_pc_9c68 ], [ 8, %bb242 ]
  %v0_9c8c = load i32, i32* @r7, align 4
  %v1_9c8c = sub nsw i32 1, %v3_9c88
  %v2_9c90 = add i32 %v1_9c8c, %v0_9c8c
  store i32 %v2_9c90, i32* @r2, align 4
  store i32 %v0_9c74, i32* @r0, align 4
  %v2_9c98 = add i32 %v3_9c88, %v0_9c74
  store i32 %v2_9c98, i32* @r1, align 4
  %v3_9c9c = call i32 @function_13bf0(i32 %v0_9c74, i32 %v2_9c98, i32 %v2_9c90)
  store i32 %v3_9c9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_9cac = load i32, i32* @r6, align 4
  %v1_9cac = load i32, i32* @r4, align 4
  %v2_9cac = add i32 %v1_9cac, %v0_9cac
  %v3_9cac = inttoptr i32 %v2_9cac to i8*
  %v4_9cac = load i8, i8* %v3_9cac, align 1
  %v6_9cac = zext i8 %v4_9cac to i32
  store i32 %v6_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_9cb0 = icmp eq i8 %v4_9cac, 0
  store i1 %v9_9cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9cb0, label %dec_label_pc_9cf0, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %.thread69
  %v2_9cb8 = icmp ugt i8 %v4_9cac, 46
  store i1 %v2_9cb8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9cb8 = icmp ult i8 %v4_9cac, 47
  store i1 %v6_9cb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9cb8 = icmp eq i8 %v4_9cac, 47
  store i1 %v7_9cb8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cbc = load i32, i32* @r5, align 4
  br i1 %v7_9cb8, label %bb243, label %dec_label_pc_9cc4

bb243:                                            ; preds = %dec_label_pc_9cb8
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9dd4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9cb8
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9cd4

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9cd4
  %v2_9ccc = icmp ugt i8 %v4_9cdc, 46
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ccc = icmp ult i8 %v4_9cdc, 47
  store i1 %v6_9ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_9ccc = icmp eq i8 %v4_9cdc, 47
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ccc, label %dec_label_pc_9dd4, label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9ccc, %dec_label_pc_9cc4
  %v1_9ce4 = phi i32 [ %v1_9ce8, %dec_label_pc_9ccc ], [ 1, %dec_label_pc_9cc4 ]
  store i32 %v10_82f0, i32* @lr, align 4
  store i32 %v1_9ce4, i32* %stack_var_-40, align 4
  %v2_9cdc = add i32 %v1_9ce4, %v1_9cbc
  %v3_9cdc = inttoptr i32 %v2_9cdc to i8*
  %v4_9cdc = load i8, i8* %v3_9cdc, align 1
  %v6_9cdc = zext i8 %v4_9cdc to i32
  store i32 %v6_9cdc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9ce0 = icmp eq i8 %v4_9cdc, 0
  store i1 %v2_9ce0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9cdc, i32* %r1.global-to-local, align 4
  %v1_9ce8 = add i32 %v1_9ce4, 1
  store i32 %v1_9ce8, i32* %r3.global-to-local, align 4
  br i1 %v2_9ce0, label %dec_label_pc_9cf0, label %dec_label_pc_9ccc

dec_label_pc_9cf0:                                ; preds = %dec_label_pc_9cd4, %.thread69, %dec_label_pc_9dd4
  %v0_9cf0 = load i32, i32* @r5, align 4
  store i32 %v0_9cf0, i32* %r0.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v0_9cf0 to i8*
  %v2_9cf4 = call i32 @function_12c5c(i8* %v1_9cf4)
  store i32 %v2_9cf4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9cf8 = icmp slt i32 %v2_9cf4, 0
  store i1 %v1_9cf8, i1* %cpsr_n.global-to-local, align 1
  %v2_9cf8 = icmp eq i32 %v2_9cf4, 0
  store i1 %v2_9cf8, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_9cf4, 1
  br i1 %tmp244, label %dec_label_pc_9d1c, label %dec_label_pc_9d00

dec_label_pc_9d00:                                ; preds = %dec_label_pc_9cf0
  %v0_9d00 = load i32, i32* @r5, align 4
  store i32 %v0_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v0_9d00 to i8*
  %v2_9d04 = call i32 @function_12c5c(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  %v1_9d08 = add i32 %v2_9d04, -127
  %v2_9d08 = icmp ugt i32 %v2_9d04, 126
  store i1 %v2_9d08, i1* %cpsr_c.global-to-local, align 1
  %v3_9d08 = sub i32 126, %v2_9d04
  %v4_9d08 = and i32 %v3_9d08, %v2_9d04
  %v5_9d08 = icmp slt i32 %v4_9d08, 0
  store i1 %v5_9d08, i1* %cpsr_v.global-to-local, align 1
  %v6_9d08 = icmp slt i32 %v1_9d08, 0
  store i1 %v6_9d08, i1* %cpsr_n.global-to-local, align 1
  %v7_9d08 = icmp eq i32 %v2_9d04, 127
  store i1 %v7_9d08, i1* %cpsr_z.global-to-local, align 1
  %v7_9d0c = icmp sgt i32 %v2_9d04, 127
  br i1 %v7_9d0c, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_9d00
  %v8_9d0c = load i32, i32* %sb.global-to-local, align 4
  %v9_9d10 = add i32 %v8_9d0c, 789
  store i32 %v9_9d10, i32* %r0.global-to-local, align 4
  %v8_9d14 = load i32, i32* @r5, align 4
  store i32 %v8_9d14, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_9d00, %bb245
  store i32 40220, i32* @lr, align 4
  %v3_9d18 = xor i1 %v6_9d08, %v5_9d08
  %v4_9d18 = or i1 %v7_9d08, %v3_9d18
  call void @__pseudo_cond_branch(i1 %v4_9d18, i32 ptrtoint (i32* @global_var_12c84.50 to i32))
  br label %dec_label_pc_9d1c

dec_label_pc_9d1c:                                ; preds = %dec_label_pc_9cf0, %.thread72
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9d20 = load i32, i32* %stack_var_-40, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  %v2_9d24 = add i32 %v3_9d20, 1
  %v1_9d28 = add i32 %v2_9d24, %v0_9d24
  store i32 %v1_9d28, i32* %r0.global-to-local, align 4
  %v1_9d2c = inttoptr i32 %v1_9d28 to i8*
  %v2_9d2c = call i32 @function_12c5c(i8* %v1_9d2c)
  store i32 %v2_9d2c, i32* %r0.global-to-local, align 4
  %v1_9d30 = add i32 %v2_9d2c, -255
  %v2_9d30 = icmp ugt i32 %v2_9d2c, 254
  store i1 %v2_9d30, i1* %cpsr_c.global-to-local, align 1
  %v3_9d30 = sub i32 254, %v2_9d2c
  %v4_9d30 = and i32 %v3_9d30, %v2_9d2c
  %v5_9d30 = icmp slt i32 %v4_9d30, 0
  store i1 %v5_9d30, i1* %cpsr_v.global-to-local, align 1
  %v6_9d30 = icmp slt i32 %v1_9d30, 0
  store i1 %v6_9d30, i1* %cpsr_n.global-to-local, align 1
  %v7_9d30 = icmp eq i32 %v2_9d2c, 255
  store i1 %v7_9d30, i1* %cpsr_z.global-to-local, align 1
  %v8_9d34 = icmp sgt i32 %v2_9d2c, 255
  br i1 %v8_9d34, label %dec_label_pc_9884, label %dec_label_pc_9d38

dec_label_pc_9d38:                                ; preds = %dec_label_pc_9d1c
  %v0_9d38 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d38, 533
  store i32 %v1_9d3c, i32* @r4, align 4
  store i32 %v1_9d3c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9d48 = call i32 @function_12cfc(i32 %v1_9d3c, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9d50 = load i32, i32* %stack_var_-40, align 4
  %v0_9d54 = load i32, i32* @r5, align 4
  %v2_9d54 = add i32 %v3_9d50, 1
  %v1_9d58 = add i32 %v2_9d54, %v0_9d54
  store i32 %v1_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = inttoptr i32 %v1_9d58 to i8*
  %v2_9d5c = call i32 @function_12c5c(i8* %v1_9d5c)
  store i32 %v2_9d5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d60 = icmp slt i32 %v2_9d5c, 0
  store i1 %v1_9d60, i1* %cpsr_n.global-to-local, align 1
  %v2_9d60 = icmp eq i32 %v2_9d5c, 0
  store i1 %v2_9d60, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_9d5c, 1
  br i1 %tmp246, label %dec_label_pc_9884, label %dec_label_pc_9d68

dec_label_pc_9d68:                                ; preds = %dec_label_pc_9d38
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9d6c = load i32, i32* %stack_var_-40, align 4
  %v0_9d70 = load i32, i32* @r5, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* @r0, align 4
  %v2_9d70 = add i32 %v3_9d6c, 1
  %v1_9d78 = add i32 %v2_9d70, %v0_9d70
  store i32 %v1_9d78, i32* %r1.global-to-local, align 4
  %v2_9d7c = inttoptr i32 %v0_9d74 to i8*
  %v3_9d7c = call i32 @function_12c84(i8* %v2_9d7c, i32 %v1_9d78)
  store i32 %v3_9d7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9d84:                                ; preds = %dec_label_pc_95ec
  %v0_9d84 = load i32, i32* @r4, align 4
  %v1_9d84 = trunc i32 %v0_9d84 to i8
  %v2_9d84 = load i32, i32* @r8, align 4
  %v3_9d84 = add i32 %v2_9d84, -1452
  %v4_9d84 = inttoptr i32 %v3_9d84 to i8*
  store i8 %v1_9d84, i8* %v4_9d84, align 1
  br label %dec_label_pc_8838

dec_label_pc_9d8c:                                ; preds = %dec_label_pc_9804
  %v1_9d8c = add i32 %v0_9d8c, 1
  store i32 %v1_9d8c, i32* %ip.global-to-local, align 4
  %v2_9d90 = add i32 %v0_9804, %v1_9d8c
  store i32 %v2_9d90, i32* %r4.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v2_9d90, i32* %r0.global-to-local, align 4
  store i32 %v1_9d8c, i32* %stack_var_-40, align 4
  %v1_9da0 = inttoptr i32 %v2_9d90 to i8*
  %v2_9da0 = call i32 @function_12c5c(i8* %v1_9da0)
  store i32 %v2_9da0, i32* %r0.global-to-local, align 4
  %v0_9da4 = load i32, i32* %r4.global-to-local, align 4
  %v2_9da4 = add i32 %v0_9da4, %v2_9da0
  store i32 %v2_9da4, i32* @r4, align 4
  %v1_9da8 = add i32 %v2_9da4, -1
  %v2_9da8 = inttoptr i32 %v1_9da8 to i8*
  %v3_9da8 = load i8, i8* %v2_9da8, align 1
  %v4_9da8 = zext i8 %v3_9da8 to i32
  store i32 %v4_9da8, i32* %r3.global-to-local, align 4
  %v2_9dac = icmp ugt i8 %v3_9da8, 33
  store i1 %v2_9dac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9dac = icmp ult i8 %v3_9da8, 34
  store i1 %v6_9dac, i1* %cpsr_n.global-to-local, align 1
  %v7_9dac = icmp eq i8 %v3_9da8, 34
  store i1 %v7_9dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9dac, label %dec_label_pc_9db4, label %dec_label_pc_9810

dec_label_pc_9db4:                                ; preds = %dec_label_pc_9d8c
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9db8 = load i32, i32* %stack_var_-40, align 4
  %v0_9dbc = load i32, i32* @r6, align 4
  %v2_9dbc = add i32 %v0_9dbc, %v3_9db8
  store i32 %v2_9dbc, i32* %r4.global-to-local, align 4
  store i32 %v2_9dbc, i32* %r0.global-to-local, align 4
  %v1_9dc4 = inttoptr i32 %v2_9dbc to i8*
  %v2_9dc4 = call i32 @function_12c5c(i8* %v1_9dc4)
  store i32 %v2_9dc4, i32* %r0.global-to-local, align 4
  %v2_9dc8 = add i32 %v2_9dbc, %v2_9dc4
  store i32 %v2_9dc8, i32* @r4, align 4
  %v0_9dcc = load i32, i32* @r5, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i8
  %v3_9dcc = add i32 %v2_9dc8, -1
  %v4_9dcc = inttoptr i32 %v3_9dcc to i8*
  store i8 %v1_9dcc, i8* %v4_9dcc, align 1
  br label %dec_label_pc_9810

dec_label_pc_9dd4:                                ; preds = %dec_label_pc_9ccc, %bb243
  %v2_9dd8 = phi i32 [ %v1_9cbc, %bb243 ], [ %v2_9cdc, %dec_label_pc_9ccc ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i8*
  store i8 0, i8* %v3_9dd8, align 1
  br label %dec_label_pc_9cf0

dec_label_pc_9de0:                                ; preds = %dec_label_pc_9878
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  %v3_9de4 = load i32, i32* %stack_var_-40, align 4
  %v0_9de8 = load i32, i32* @r5, align 4
  %v2_9de8 = add i32 %v3_9de4, 1
  %v1_9dec = add i32 %v2_9de8, %v0_9de8
  store i32 %v1_9dec, i32* %r0.global-to-local, align 4
  %v1_9df0 = inttoptr i32 %v1_9dec to i8*
  %v2_9df0 = call i32 @function_12c5c(i8* %v1_9df0)
  store i32 %v2_9df0, i32* %r0.global-to-local, align 4
  %v1_9df4 = add i32 %v2_9df0, -255
  %v2_9df4 = icmp ugt i32 %v2_9df0, 254
  store i1 %v2_9df4, i1* %cpsr_c.global-to-local, align 1
  %v3_9df4 = sub i32 254, %v2_9df0
  %v4_9df4 = and i32 %v3_9df4, %v2_9df0
  %v5_9df4 = icmp slt i32 %v4_9df4, 0
  store i1 %v5_9df4, i1* %cpsr_v.global-to-local, align 1
  %v6_9df4 = icmp slt i32 %v1_9df4, 0
  store i1 %v6_9df4, i1* %cpsr_n.global-to-local, align 1
  %v7_9df4 = icmp eq i32 %v2_9df0, 255
  store i1 %v7_9df4, i1* %cpsr_z.global-to-local, align 1
  %v8_9df8 = icmp sgt i32 %v2_9df0, 255
  br i1 %v8_9df8, label %dec_label_pc_9884, label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9de0
  %v0_9dfc = load i32, i32* %sb.global-to-local, align 4
  %v1_9e00 = add i32 %v0_9dfc, 533
  store i32 %v1_9e00, i32* @r4, align 4
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9e0c = call i32 @function_12cfc(i32 %v1_9e00, i32 255)
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9e14 = load i32, i32* %stack_var_-40, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v2_9e18 = add i32 %v3_9e14, 1
  %v1_9e1c = add i32 %v2_9e18, %v0_9e18
  store i32 %v1_9e1c, i32* %r0.global-to-local, align 4
  %v1_9e20 = inttoptr i32 %v1_9e1c to i8*
  %v2_9e20 = call i32 @function_12c5c(i8* %v1_9e20)
  store i32 %v2_9e20, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9e24 = icmp slt i32 %v2_9e20, 0
  store i1 %v1_9e24, i1* %cpsr_n.global-to-local, align 1
  %v2_9e24 = icmp eq i32 %v2_9e20, 0
  store i1 %v2_9e24, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_9e20, 1
  br i1 %tmp247, label %dec_label_pc_9884, label %dec_label_pc_9e2c

dec_label_pc_9e2c:                                ; preds = %dec_label_pc_9dfc
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9e30 = load i32, i32* %stack_var_-40, align 4
  %v0_9e34 = load i32, i32* @r5, align 4
  %v0_9e38 = load i32, i32* @r4, align 4
  store i32 %v0_9e38, i32* @r0, align 4
  %v2_9e34 = add i32 %v3_9e30, 1
  %v1_9e3c = add i32 %v2_9e34, %v0_9e34
  store i32 %v1_9e3c, i32* %r1.global-to-local, align 4
  %v2_9e40 = inttoptr i32 %v0_9e38 to i8*
  %v3_9e40 = call i32 @function_12c84(i8* %v2_9e40, i32 %v1_9e3c)
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9e48:                                ; preds = %dec_label_pc_84c8
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_9e4c = call i32 @function_121f4(i32 54)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 54, i32* %r0.global-to-local, align 4
  %v3_9e58 = call i32 @function_12110(i32 54, i32* null)
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v0_9e60 = load i32, i32* @r5, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r0, align 4
  %v2_9e64 = inttoptr i32 %v1_9e60 to i8*
  %v3_9e64 = call i32 @function_12c84(i8* %v2_9e64, i32 %v3_9e58)
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_9e6c = call i32 @function_1213c(i32 54)
  store i32 %v1_9e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_84c8, %dec_label_pc_9f58, %dec_label_pc_9f2c, %dec_label_pc_9f00, %dec_label_pc_9ed4, %dec_label_pc_9e48
  %v0_9e70 = load i32, i32* @sl, align 4
  store i32 %v0_9e70, i32* %r1.global-to-local, align 4
  store i32 %v0_840c, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v0_840c to i8*
  %v3_9e78 = call i32 @function_12c84(i8* %v2_9e78, i32 %v0_9e70)
  store i32 %v3_9e78, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r7, align 4
  %v1_9e80 = add i32 %v0_9e80, 1
  store i32 %v1_9e80, i32* @r7, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  %v2_9e88 = sub i32 %v0_839c, %v1_9e80
  %v3_9e88 = icmp uge i32 %v0_839c, %v1_9e80
  store i1 %v3_9e88, i1* %cpsr_c.global-to-local, align 1
  %v4_9e88 = xor i32 %v1_9e80, %v0_839c
  %v5_9e88 = xor i32 %v2_9e88, %v0_839c
  %v6_9e88 = and i32 %v5_9e88, %v4_9e88
  %v7_9e88 = icmp slt i32 %v6_9e88, 0
  store i1 %v7_9e88, i1* %cpsr_v.global-to-local, align 1
  %v8_9e88 = icmp slt i32 %v2_9e88, 0
  store i1 %v8_9e88, i1* %cpsr_n.global-to-local, align 1
  %v9_9e88 = icmp eq i32 %v0_839c, %v1_9e80
  store i1 %v9_9e88, i1* %cpsr_z.global-to-local, align 1
  %v1_9e8c = add i32 %v0_9e84, 3140
  store i32 %v1_9e8c, i32* @r5, align 4
  br i1 %v9_9e88, label %dec_label_pc_9e94, label %dec_label_pc_83cc

dec_label_pc_9e94:                                ; preds = %dec_label_pc_9e70
  %v1_9ea0 = add i32 %v2_83b0, 1456
  %v0_9ea8 = load i32, i32* %r8.global-to-local, align 4
  %v1_9ea8 = urem i32 %v0_9ea8, 256
  store i32 %v1_9ea8, i32* %ip.global-to-local, align 4
  %v1_9eac = add i32 %v2_83b0, 1464
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v2_9eb0 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_9eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ea0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_9ed4:                                ; preds = %dec_label_pc_84c8
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9ed8 = call i32 @function_121f4(i32 50)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v3_9ee4 = call i32 @function_12110(i32 50, i32* null)
  store i32 %v3_9ee4, i32* %r1.global-to-local, align 4
  %v0_9eec = load i32, i32* @r5, align 4
  %v1_9eec = add i32 %v0_9eec, 20
  store i32 %v1_9eec, i32* @r0, align 4
  %v2_9ef0 = inttoptr i32 %v1_9eec to i8*
  %v3_9ef0 = call i32 @function_12c84(i8* %v2_9ef0, i32 %v3_9ee4)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_1213c(i32 50)
  store i32 %v1_9ef8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f00:                                ; preds = %dec_label_pc_84c8
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9f04 = call i32 @function_121f4(i32 51)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v3_9f10 = call i32 @function_12110(i32 51, i32* null)
  store i32 %v3_9f10, i32* %r1.global-to-local, align 4
  %v0_9f18 = load i32, i32* @r5, align 4
  %v1_9f18 = add i32 %v0_9f18, 20
  store i32 %v1_9f18, i32* @r0, align 4
  %v2_9f1c = inttoptr i32 %v1_9f18 to i8*
  %v3_9f1c = call i32 @function_12c84(i8* %v2_9f1c, i32 %v3_9f10)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9f24 = call i32 @function_1213c(i32 51)
  store i32 %v1_9f24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f2c:                                ; preds = %dec_label_pc_84c8
  store i32 52, i32* %r0.global-to-local, align 4
  %v1_9f30 = call i32 @function_121f4(i32 52)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 52, i32* %r0.global-to-local, align 4
  %v3_9f3c = call i32 @function_12110(i32 52, i32* null)
  store i32 %v3_9f3c, i32* %r1.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  %v1_9f44 = add i32 %v0_9f44, 20
  store i32 %v1_9f44, i32* @r0, align 4
  %v2_9f48 = inttoptr i32 %v1_9f44 to i8*
  %v3_9f48 = call i32 @function_12c84(i8* %v2_9f48, i32 %v3_9f3c)
  store i32 52, i32* %r0.global-to-local, align 4
  %v1_9f50 = call i32 @function_1213c(i32 52)
  store i32 %v1_9f50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f58:                                ; preds = %dec_label_pc_84c8
  store i32 53, i32* %r0.global-to-local, align 4
  %v1_9f5c = call i32 @function_121f4(i32 53)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 53, i32* %r0.global-to-local, align 4
  %v3_9f68 = call i32 @function_12110(i32 53, i32* null)
  store i32 %v3_9f68, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r5, align 4
  %v1_9f70 = add i32 %v0_9f70, 20
  store i32 %v1_9f70, i32* @r0, align 4
  %v2_9f74 = inttoptr i32 %v1_9f70 to i8*
  %v3_9f74 = call i32 @function_12c84(i8* %v2_9f74, i32 %v3_9f68)
  store i32 53, i32* %r0.global-to-local, align 4
  %v1_9f7c = call i32 @function_1213c(i32 53)
  store i32 %v1_9f7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

; uselistorder directives
  uselistorder i32 %v2_9eb0, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e8c, { 1, 0 }
  uselistorder i32 %v2_9e88, { 1, 0 }
  uselistorder i32 %v1_9e80, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9df0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9d8c, { 1, 0, 2 }
  uselistorder i32 %v2_9d2c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9d04, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9ce8, { 1, 0 }
  uselistorder i8 %v4_9cdc, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_9ce4, { 1, 0, 2 }
  uselistorder i1 %v7_9ccc, { 1, 0 }
  uselistorder i32 %v1_9cbc, { 1, 0, 2 }
  uselistorder i1 %v7_9cb8, { 1, 0 }
  uselistorder i1 %v9_9cb0, { 1, 0 }
  uselistorder i32 %v2_9c90, { 1, 0 }
  uselistorder i32 %v0_9c74, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9c10, { 1, 0, 2 }
  uselistorder i32 %v1_9c08, { 1, 0, 2 }
  uselistorder i32 %v2_9bc0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9b94, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_9b18, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_9afc, { 1, 0, 2 }
  uselistorder i32 %v4_9af4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9abc, { 1, 0 }
  uselistorder i32 %v1_9abc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_9abc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9a24, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_99fc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_99dc, { 1, 0 }
  uselistorder i8 %v4_99d4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_99dc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99c0, { 1, 0 }
  uselistorder i32 %v1_99b0, { 1, 0, 2 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v0_996c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9950, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_986c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9840, { 1, 0 }
  uselistorder i32 %v1_9840, { 2, 0, 1, 3 }
  uselistorder i32 %v2_983c, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_981c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9804, { 1, 0 }
  uselistorder i32 %v0_9d8c, { 1, 0 }
  uselistorder i32 %v1_97c0, { 1, 2, 0 }
  uselistorder i32 %v5_97bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97a8, { 1, 0 }
  uselistorder i32 %v2_979c, { 1, 0, 2 }
  uselistorder i32 %v1_9760, { 0, 2, 1 }
  uselistorder i32 %v1_9750, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_973c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_96f8, { 1, 2, 0 }
  uselistorder i32 %v5_96f4, { 1, 3, 2, 5, 8, 9, 7, 6, 4, 0, 11, 10, 12 }
  uselistorder i32 %v2_96dc.v4_96bc, { 1, 0, 2 }
  uselistorder i32 %v1_9698, { 1, 2, 0 }
  uselistorder i32 %v4_9690, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9650, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9648, { 1, 2, 0 }
  uselistorder i32 %v5_963c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_95c8, { 1, 2, 0 }
  uselistorder i32 %v4_95c4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_95a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_958c, { 1, 2, 0 }
  uselistorder i32 %v5_9588, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9570, { 1, 0 }
  uselistorder i32 %v2_9568, { 1, 2, 0 }
  uselistorder i32 %v4_9564, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9528, { 2, 1, 0 }
  uselistorder i32 %v3_951c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_94fc, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_94fc, { 1, 0 }
  uselistorder i32 %v0_94fc, { 1, 0 }
  uselistorder i32 %v3_94e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_94d8, { 1, 2, 0 }
  uselistorder i32 %v0_94c0, { 0, 2, 1 }
  uselistorder i32 %v3_94a0, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_9478, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_9458, { 1, 2, 0 }
  uselistorder i32 %v5_944c, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_9418, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9410, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_93e4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_93c4, { 1, 0, 2 }
  uselistorder i32 %v1_93a0, { 1, 2, 0 }
  uselistorder i32 %v5_939c, { 1, 2, 8, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9384.v4_9364, { 1, 0, 2 }
  uselistorder i32 %v1_9344, { 1, 2, 0 }
  uselistorder i32 %v4_9340, { 0, 2, 1, 3 }
  uselistorder i32 %v2_92f0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_92ec, { 1, 0 }
  uselistorder i32 %v0_92d4, { 1, 0 }
  uselistorder i32 %v0_92d8, { 1, 0 }
  uselistorder i32 %v2_92b4, { 1, 0 }
  uselistorder i32 %v1_92b0, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_92ac, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_927c, { 1, 0 }
  uselistorder i1 %v7_9244, { 0, 2, 1 }
  uselistorder i32 %v1_9268, { 1, 0 }
  uselistorder i32 %v2_9264, { 1, 0 }
  uselistorder i32 %v3_9260, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9258, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9254, { 1, 0 }
  uselistorder i32 %v1_91c4, { 1, 2, 0 }
  uselistorder i32 %v5_91c0, { 1, 8, 3, 6, 7, 5, 4, 2, 0, 10, 9, 11 }
  uselistorder i32 %v2_91a8, { 1, 0, 2 }
  uselistorder i32 %v2_91a4, { 1, 0, 2 }
  uselistorder i32 %v0_9188, { 0, 2, 1 }
  uselistorder i32 %v4_9180, { 1, 2, 0, 3 }
  uselistorder i32 %v3_915c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9150, { 1, 2, 0 }
  uselistorder i32 %v4_9148, { 0, 2, 1, 3 }
  uselistorder i32 %v1_90e4, { 1, 2, 0 }
  uselistorder i32 %v5_90e0, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_90c8.v4_90a8, { 1, 0, 2 }
  uselistorder i32 %v1_9078, { 1, 2, 0 }
  uselistorder i32 %v4_9074, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v5_8ff8, { 1, 9, 8, 3, 6, 7, 5, 4, 2, 0, 11, 10, 12 }
  uselistorder i32 %v2_8fe0.v4_8fc0, { 1, 0, 2 }
  uselistorder i32 %v1_8f9c, { 1, 2, 0 }
  uselistorder i32 %v4_8f94, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8f14, { 1, 2, 0 }
  uselistorder i32 %v5_8f10, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_8ef8.v4_8ed8, { 1, 0, 2 }
  uselistorder i32 %v1_8eb8, { 1, 2, 0 }
  uselistorder i32 %v4_8eb4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e8c, { 1, 2, 0 }
  uselistorder i32 %v4_8e88, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e64, { 1, 2, 0 }
  uselistorder i32 %v4_8e60, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9914, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_8e18, { 1, 2, 0 }
  uselistorder i32 %v5_8e14, { 0, 2, 1, 3 }
  uselistorder i32 %v5_8df0, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_8d78, { 0, 2, 1 }
  uselistorder i32 %v2_8d6c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_8d60, { 1, 0 }
  uselistorder i32 %v2_8d54, { 1, 0 }
  uselistorder i32 %v0_8d54, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8d4c, { 1, 0 }
  uselistorder i32 %v1_8d54, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8d30, { 1, 0, 2 }
  uselistorder i32 %v1_8d28, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v0_8d10, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_8cec, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_8c54, { 1, 0 }
  uselistorder i32 %v1_8c50, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_8c4c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_8af4, { 1, 0 }
  uselistorder i32 %v1_8af4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8880, { 2, 1, 0 }
  uselistorder i32 %v3_887c, { 1, 0 }
  uselistorder i32 %v1_885c, { 1, 2, 0 }
  uselistorder i32 %v3_8858, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_8848, { 1, 0 }
  uselistorder i32 %v1_8840, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_8830, { 1, 0 }
  uselistorder i1 %v7_8828, { 1, 0 }
  uselistorder i32 %v1_880c, { 2, 1, 0 }
  uselistorder i32 %v3_8808, { 1, 0 }
  uselistorder i32 %v0_880c, { 1, 0 }
  uselistorder i32 %v2_87dc, { 1, 0 }
  uselistorder i32 %v1_87dc, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_87dc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_87d8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_87c4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8784, { 1, 0 }
  uselistorder i32 %v2_877c, { 1, 0 }
  uselistorder i32 %v1_8770, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_875c, { 1, 0 }
  uselistorder i32 %v0_875c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_875c, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8744, { 1, 0 }
  uselistorder i32 %v3_8738, { 1, 0, 2 }
  uselistorder i32 %v0_86f4, { 1, 0, 2 }
  uselistorder i32 %v1_8698, { 1, 2, 0 }
  uselistorder i32 %v3_8694, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_8670, { 1, 2, 0 }
  uselistorder i32 %v3_8664, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8650, { 1, 0 }
  uselistorder i8 %v3_8650, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8650, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8900, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v1_8634, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_8610, { 1, 0 }
  uselistorder i32 %v1_8610, { 1, 0 }
  uselistorder i1 %v7_8608, { 1, 0 }
  uselistorder i32 %v4_85ec, { 1, 0, 2 }
  uselistorder i1 %v7_85e8, { 1, 0 }
  uselistorder i32 %v4_85cc, { 1, 0, 2 }
  uselistorder i1 %v7_85c8, { 1, 0 }
  uselistorder i1 %v7_85c0, { 1, 0 }
  uselistorder i1 %v7_85b8, { 1, 0 }
  uselistorder i32 %v2_85dc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8594248, { 1, 0 }
  uselistorder i32 %v5_8590, { 1, 0 }
  uselistorder i8* %v1_8940, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8748, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_86d0, { 1, 0 }
  uselistorder i32 %v3_9eb8, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_8500, { 1, 0 }
  uselistorder i32 %v0_8500, { 1, 0 }
  uselistorder i32 %v2_84d0, { 2, 1, 3, 0, 5, 4, 6 }
  uselistorder i32 %v2_84c0, { 1, 0 }
  uselistorder i32 %v8_84a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8484, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_840c, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b0, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_839c, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_8390, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8320, { 1, 0, 2 }
  uselistorder i32 %v1_831c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_830c, { 1, 0 }
  uselistorder i32 %v3_8308, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8300, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_82f4, { 1, 0, 2 }
  uselistorder i32 %v10_82f0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_82e8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82d8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82c8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_82a8, { 1, 0 }
  uselistorder i32 %v0_82a4, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_8280, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_8278, { 1, 0 }
  uselistorder i32 %v6_8200, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_81e4, { 2, 1, 0 }
  uselistorder i32 %v1_81d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 14, 12, 13, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 7, 5, 8, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 12, 10, 11, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 159, 161, 162, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 145, 146, 147, 148, 97, 98, 99, 100, 104, 101, 102, 103, 105, 106, 109, 110, 107, 108, 111, 113, 112, 114, 115, 116, 117, 118, 123, 119, 120, 121, 122, 124, 126, 125, 1, 128, 127, 2, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 163, 144, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 107, 108, 109, 110, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 104, 105, 106, 71, 72, 73, 74, 75, 78, 79, 76, 77, 80, 81, 82, 83, 84, 85, 86, 88, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 43, 25, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 44, 45, 9, 46, 47, 48, 49, 52, 50, 51, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 172, 60, 61, 62, 65, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 157, 158, 159, 160, 161, 162, 163, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 123, 125, 126, 128, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 155, 0 }
  uselistorder i32* %r0.global-to-local, { 16, 15, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 217, 34, 155, 30, 74, 40, 35, 37, 36, 38, 41, 39, 43, 42, 45, 44, 46, 48, 47, 49, 52, 50, 51, 54, 53, 57, 55, 56, 58, 59, 60, 62, 61, 63, 64, 65, 67, 66, 68, 70, 69, 72, 71, 73, 76, 75, 78, 77, 79, 81, 80, 83, 82, 84, 86, 85, 87, 90, 88, 89, 92, 91, 95, 93, 94, 96, 98, 97, 100, 99, 102, 101, 103, 105, 104, 106, 108, 107, 109, 110, 111, 338, 113, 112, 115, 114, 116, 118, 117, 119, 120, 121, 123, 122, 125, 124, 126, 128, 127, 129, 131, 130, 133, 132, 134, 135, 138, 136, 137, 139, 141, 140, 142, 144, 143, 340, 339, 341, 342, 31, 14, 343, 13, 345, 344, 347, 346, 146, 145, 147, 149, 148, 150, 151, 153, 152, 12, 154, 157, 156, 159, 158, 161, 160, 164, 162, 163, 166, 165, 167, 169, 168, 170, 11, 171, 173, 172, 175, 174, 176, 178, 177, 179, 181, 180, 182, 183, 185, 184, 187, 186, 188, 190, 189, 191, 193, 192, 194, 195, 197, 196, 199, 198, 200, 202, 201, 203, 205, 204, 206, 10, 207, 208, 209, 211, 210, 213, 212, 220, 214, 215, 285, 216, 218, 219, 9, 221, 222, 7, 223, 224, 225, 226, 227, 228, 229, 232, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 266, 268, 269, 270, 271, 273, 272, 274, 275, 276, 2, 277, 3, 278, 280, 279, 5, 6, 282, 281, 4, 283, 284, 286, 288, 287, 289, 8, 290, 1, 292, 291, 33, 293, 294, 295, 296, 32, 297, 230, 298, 299, 300, 301, 303, 302, 304, 306, 305, 307, 308, 309, 310, 312, 311, 314, 313, 316, 315, 318, 317, 320, 319, 321, 322, 323, 324, 325, 326, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 29, 30, 31, 9, 10, 11, 12, 13, 14, 15, 28, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0, 27 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 53, 54, 55, 56, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 51, 52, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 37, 36, 4, 5, 6, 7, 38, 39, 24, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 3, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 135, 136, 144, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 54, 55, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 133, 134, 91, 92, 93, 94, 95, 96, 101, 103, 102, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 117, 118, 110, 111, 112, 113, 114, 115, 116, 119, 0, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 129, 130, 137, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 54, 55, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 127, 128, 92, 93, 98, 97, 94, 95, 96, 99, 100, 101, 102, 103, 104, 112, 113, 105, 106, 107, 108, 109, 110, 111, 114, 0, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 132, 133, 140, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 54, 55, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 130, 131, 92, 93, 94, 99, 101, 100, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 115, 116, 108, 109, 110, 111, 112, 113, 114, 117, 0, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 147, 148, 149, 156, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 57, 58, 59, 61, 62, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 144, 145, 146, 98, 99, 104, 106, 105, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 123, 124, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 0, 1, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143 }
  uselistorder i32 ptrtoint (i32* @global_var_15d30.52 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d20.47 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d18.45 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15d14.43 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d0c.41 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15cec.29 to i32), { 0, 2, 1, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_15cf4.21 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9e70, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9d1c, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_9cf0, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_9b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9a14, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_9884, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9838, { 1, 0 }
  uselistorder label %dec_label_pc_9810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9804, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_9678, { 1, 0 }
  uselistorder label %dec_label_pc_965c, { 1, 0 }
  uselistorder label %dec_label_pc_95ec, { 1, 0 }
  uselistorder label %dec_label_pc_94c0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_9498, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9430, { 1, 2, 0 }
  uselistorder label %dec_label_pc_9400, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_9284, { 1, 0 }
  uselistorder label %dec_label_pc_927c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9254, { 1, 0 }
  uselistorder label %dec_label_pc_9214, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9124, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_8e20, { 1, 0 }
  uselistorder label %dec_label_pc_8d48, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8ccc, { 1, 0 }
  uselistorder label %dec_label_pc_8cb4, { 1, 0 }
  uselistorder label %dec_label_pc_8c78, { 1, 0 }
  uselistorder label %dec_label_pc_8c04, { 1, 0 }
  uselistorder label %dec_label_pc_8bcc, { 1, 0 }
  uselistorder label %dec_label_pc_890c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_88dc, { 1, 0 }
  uselistorder label %dec_label_pc_8838, { 7, 8, 2, 9, 1, 10, 3, 11, 12, 13, 0, 15, 14, 6, 4, 5 }
  uselistorder label %dec_label_pc_8630, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_855c.dec_label_pc_855c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_853c.dec_label_pc_853c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8528, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8528.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_84c8, { 1, 0 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 1, 0 }
  uselistorder label %dec_label_pc_82b8, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f84(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f84:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9f84 = urem i32 %arg1, 256
  %v2_9f88 = icmp eq i32 %v1_9f84, 0
  %v1_9f90 = urem i32 %arg3, 256
  br i1 %v2_9f88, label %dec_label_pc_9fd4, label %dec_label_pc_9f9c

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84
  %v0_9f9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9f9c = add i32 %v0_9f9c, 4
  %v2_9f9c = inttoptr i32 %v1_9f9c to i8*
  %v3_9f9c = load i8, i8* %v2_9f9c, align 1
  %v4_9f9c = zext i8 %v3_9f9c to i32
  %v9_9fa0 = icmp eq i32 %v4_9f9c, %v1_9f90
  br i1 %v9_9fa0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.preheader

dec_label_pc_9fc4.preheader:                      ; preds = %dec_label_pc_9f9c
  br label %dec_label_pc_9fc4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fc4
  %v1_9fb4 = add i32 %v0_9fbc.in, 12
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i8*
  %v3_9fb4 = load i8, i8* %v2_9fb4, align 1
  %v4_9fb4 = zext i8 %v3_9fb4 to i32
  %v9_9fb8 = icmp eq i32 %v4_9fb4, %v1_9f90
  br i1 %v9_9fb8, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fc4.preheader, %dec_label_pc_9fb4
  %v0_9fbc.in = phi i32 [ %v0_9f9c, %dec_label_pc_9fc4.preheader ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v0_9fc4 = phi i32 [ 0, %dec_label_pc_9fc4.preheader ], [ %v1_9fc4, %dec_label_pc_9fb4 ]
  %v0_9fbc = add i32 %v0_9fbc.in, 8
  %v1_9fc4 = add i32 %v0_9fc4, 1
  store i32 %v1_9fc4, i32* @lr, align 4
  %v9_9fc8 = icmp eq i32 %v1_9fc4, %v1_9f84
  store i32 %v0_9fbc, i32* %r1.global-to-local, align 4
  br i1 %v9_9fc8, label %dec_label_pc_9fd4, label %dec_label_pc_9fb4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9f84
  ret i32 %arg4

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fb4, %dec_label_pc_9f9c
  %v0_9fdc = phi i32 [ %v0_9f9c, %dec_label_pc_9f9c ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v1_9fdc = inttoptr i32 %v0_9fdc to i32*
  %v2_9fdc = load i32, i32* %v1_9fdc, align 4
  ret i32 %v2_9fdc

; uselistorder directives
  uselistorder i32 %v1_9fc4, { 1, 2, 0 }
  uselistorder i32 %v0_9fbc, { 1, 0, 2 }
  uselistorder i32 %v0_9fbc.in, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0, 2 }
  uselistorder i32 %v1_9f90, { 1, 0 }
  uselistorder i32 %v1_9f84, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9fc4, { 1, 0 }
}

define i32 @function_9fe8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9fe8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9fe8 = urem i32 %arg1, 256
  %v2_9fec = icmp eq i32 %v1_9fe8, 0
  %v3_9ff0 = load i32, i32* @r4, align 4
  br i1 %v2_9fec, label %dec_label_pc_a038, label %dec_label_pc_9ffc

dec_label_pc_9ffc:                                ; preds = %dec_label_pc_9fe8
  %v0_9ffc = load i32, i32* %r1.global-to-local, align 4
  %v1_9ffc = add i32 %v0_9ffc, 4
  %v2_9ffc = inttoptr i32 %v1_9ffc to i8*
  %v3_9ffc = load i8, i8* %v2_9ffc, align 1
  %v4_9ffc = zext i8 %v3_9ffc to i32
  %v1_a000 = urem i32 %arg3, 256
  %v9_a004 = icmp eq i32 %v4_9ffc, %v1_a000
  br i1 %v9_a004, label %dec_label_pc_a040, label %dec_label_pc_a028.preheader

dec_label_pc_a028.preheader:                      ; preds = %dec_label_pc_9ffc
  br label %dec_label_pc_a028

dec_label_pc_a018:                                ; preds = %dec_label_pc_a028
  %v1_a018 = add i32 %v0_a020.in, 12
  %v2_a018 = inttoptr i32 %v1_a018 to i8*
  %v3_a018 = load i8, i8* %v2_a018, align 1
  %v4_a018 = zext i8 %v3_a018 to i32
  %v9_a01c = icmp eq i32 %v1_a000, %v4_a018
  br i1 %v9_a01c, label %dec_label_pc_a040, label %dec_label_pc_a028

dec_label_pc_a028:                                ; preds = %dec_label_pc_a028.preheader, %dec_label_pc_a018
  %v0_a020.in = phi i32 [ %v0_9ffc, %dec_label_pc_a028.preheader ], [ %v0_a020, %dec_label_pc_a018 ]
  %v0_a028 = phi i32 [ 0, %dec_label_pc_a028.preheader ], [ %v1_a028, %dec_label_pc_a018 ]
  %v0_a020 = add i32 %v0_a020.in, 8
  %v1_a028 = add i32 %v0_a028, 1
  %v9_a02c = icmp eq i32 %v1_9fe8, %v1_a028
  store i32 %v0_a020, i32* %r1.global-to-local, align 4
  br i1 %v9_a02c, label %dec_label_pc_a038, label %dec_label_pc_a018

dec_label_pc_a038:                                ; preds = %dec_label_pc_a028, %dec_label_pc_a040, %dec_label_pc_9fe8
  store i32 %v3_9ff0, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a040:                                ; preds = %dec_label_pc_a018, %dec_label_pc_9ffc
  %v0_a040 = phi i32 [ %v0_9ffc, %dec_label_pc_9ffc ], [ %v0_a020, %dec_label_pc_a018 ]
  %v1_a040 = inttoptr i32 %v0_a040 to i32*
  %v2_a040 = load i32, i32* %v1_a040, align 4
  store i32 %v2_a040, i32* @r0, align 4
  %v2_a044 = icmp eq i32 %v2_a040, 0
  br i1 %v2_a044, label %dec_label_pc_a038, label %dec_label_pc_a04c

dec_label_pc_a04c:                                ; preds = %dec_label_pc_a040
  store i32 %v3_9ff0, i32* @r4, align 4
  %v1_a050 = call i32 @function_13cbc(i32 %v2_a040)
  ret i32 %v1_a050

; uselistorder directives
  uselistorder i32 %v1_a028, { 1, 0 }
  uselistorder i32 %v0_a020, { 1, 0, 2 }
  uselistorder i32 %v0_a020.in, { 1, 0 }
  uselistorder i32 %v1_a000, { 1, 0 }
  uselistorder i32 %v0_9ffc, { 1, 0, 2 }
  uselistorder i32 %v3_9ff0, { 1, 0 }
  uselistorder i32 %v1_9fe8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a038, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a028, { 1, 0 }
}

define i32 @function_a054(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a054:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a054 = urem i32 %arg1, 256
  %v2_a058 = icmp eq i32 %v1_a054, 0
  %v3_a05c = load i32, i32* @r4, align 4
  %v6_a05c = load i32, i32* @lr, align 4
  br i1 %v2_a058, label %dec_label_pc_a0a4, label %dec_label_pc_a068

dec_label_pc_a068:                                ; preds = %dec_label_pc_a054
  %v0_a068 = load i32, i32* %r1.global-to-local, align 4
  %v1_a068 = add i32 %v0_a068, 4
  %v2_a068 = inttoptr i32 %v1_a068 to i8*
  %v3_a068 = load i8, i8* %v2_a068, align 1
  %v4_a068 = zext i8 %v3_a068 to i32
  %v1_a06c = urem i32 %arg3, 256
  %v9_a070 = icmp eq i32 %v4_a068, %v1_a06c
  br i1 %v9_a070, label %dec_label_pc_a0ac, label %dec_label_pc_a094.preheader

dec_label_pc_a094.preheader:                      ; preds = %dec_label_pc_a068
  br label %dec_label_pc_a094

dec_label_pc_a084:                                ; preds = %dec_label_pc_a094
  %v1_a084 = add i32 %v0_a08c.in, 12
  %v2_a084 = inttoptr i32 %v1_a084 to i8*
  %v3_a084 = load i8, i8* %v2_a084, align 1
  %v4_a084 = zext i8 %v3_a084 to i32
  %v9_a088 = icmp eq i32 %v1_a06c, %v4_a084
  br i1 %v9_a088, label %dec_label_pc_a0ac, label %dec_label_pc_a094

dec_label_pc_a094:                                ; preds = %dec_label_pc_a094.preheader, %dec_label_pc_a084
  %v0_a08c.in = phi i32 [ %v0_a068, %dec_label_pc_a094.preheader ], [ %v0_a08c, %dec_label_pc_a084 ]
  %v0_a094 = phi i32 [ 0, %dec_label_pc_a094.preheader ], [ %v1_a094, %dec_label_pc_a084 ]
  %v0_a08c = add i32 %v0_a08c.in, 8
  %v1_a094 = add i32 %v0_a094, 1
  store i32 %v1_a094, i32* @lr, align 4
  %v9_a098 = icmp eq i32 %v1_a054, %v1_a094
  store i32 %v0_a08c, i32* %r1.global-to-local, align 4
  br i1 %v9_a098, label %dec_label_pc_a0a4, label %dec_label_pc_a084

dec_label_pc_a0a4:                                ; preds = %dec_label_pc_a094, %dec_label_pc_a0ac, %dec_label_pc_a054
  store i32 %v3_a05c, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a0ac:                                ; preds = %dec_label_pc_a084, %dec_label_pc_a068
  %v0_a0ac = phi i32 [ %v0_a068, %dec_label_pc_a068 ], [ %v0_a08c, %dec_label_pc_a084 ]
  %v1_a0ac = inttoptr i32 %v0_a0ac to i32*
  %v2_a0ac = load i32, i32* %v1_a0ac, align 4
  %v2_a0b0 = icmp eq i32 %v2_a0ac, 0
  br i1 %v2_a0b0, label %dec_label_pc_a0a4, label %dec_label_pc_a0b8

dec_label_pc_a0b8:                                ; preds = %dec_label_pc_a0ac
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_a05c, i32* @r4, align 4
  store i32 %v6_a05c, i32* @lr, align 4
  %v2_a0c0 = inttoptr i32 %v2_a0ac to i8*
  %v3_a0c0 = call i32 @function_12d88(i8* %v2_a0c0, i32 10)
  ret i32 %v3_a0c0

; uselistorder directives
  uselistorder i32 %v1_a094, { 1, 2, 0 }
  uselistorder i32 %v0_a08c, { 1, 0, 2 }
  uselistorder i32 %v0_a08c.in, { 1, 0 }
  uselistorder i32 %v1_a06c, { 1, 0 }
  uselistorder i32 %v0_a068, { 1, 0, 2 }
  uselistorder i32 %v3_a05c, { 1, 0 }
  uselistorder i32 %v1_a054, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a0a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a094, { 1, 0 }
}

define i32 @function_a0c4(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a0c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_a0c4 = load i32, i32* @r4, align 4
  %v6_a0c4 = load i32, i32* @r5, align 4
  %v9_a0c4 = load i32, i32* @r6, align 4
  %v12_a0c4 = load i32, i32* @r7, align 4
  %v15_a0c4 = load i32, i32* @r8, align 4
  %v18_a0c4 = load i32, i32* @sb, align 4
  %v21_a0c4 = load i32, i32* @sl, align 4
  %v24_a0c4 = load i32, i32* @fp, align 4
  %v27_a0c4 = load i32, i32* @lr, align 4
  %v7_a0c8 = icmp eq i32 %arg2, 3
  store i1 %v7_a0c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_a0d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a0d4, i32* @r4, align 4
  %tmp47 = icmp ult i32 %arg2, 4
  br i1 %tmp47, label %dec_label_pc_a0e8, label %dec_label_pc_a0dc

dec_label_pc_a0dc:                                ; preds = %dec_label_pc_a0c4
  %v7_a0dc = icmp eq i32 %arg2, 4
  store i1 %v7_a0dc, i1* %cpsr_z.global-to-local, align 1
  %v1_a0e0 = inttoptr i32 %v0_a0d4 to i32*
  %v2_a0e0 = load i32, i32* %v1_a0e0, align 4
  store i32 %v2_a0e0, i32* %sl.global-to-local, align 4
  br i1 %v7_a0dc, label %dec_label_pc_a0e8, label %dec_label_pc_a0f0

dec_label_pc_a0e8:                                ; preds = %dec_label_pc_a10c, %.dec_label_pc_a0e8_crit_edge, %dec_label_pc_a0dc, %dec_label_pc_a100, %dec_label_pc_a0f0, %dec_label_pc_a0c4
  %v29_a0ec = phi i32 [ %v29_a0ec.pre, %.dec_label_pc_a0e8_crit_edge ], [ %v0_a0d4, %dec_label_pc_a10c ], [ %v0_a0d4, %dec_label_pc_a0dc ], [ %v0_a0d4, %dec_label_pc_a100 ], [ %v0_a0d4, %dec_label_pc_a0f0 ], [ %v0_a0d4, %dec_label_pc_a0c4 ]
  store i32 %v3_a0c4, i32* %r4.global-to-local, align 4
  store i32 %v9_a0c4, i32* @r6, align 4
  store i32 %v12_a0c4, i32* @r7, align 4
  store i32 %v18_a0c4, i32* @sb, align 4
  store i32 %v21_a0c4, i32* @sl, align 4
  store i32 %v24_a0c4, i32* @fp, align 4
  ret i32 %v29_a0ec

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0dc
  %v7_a0f0 = icmp eq i32 %arg2, 5
  store i1 %v7_a0f0, i1* %cpsr_z.global-to-local, align 1
  %v1_a0f4 = add i32 %v0_a0d4, 4
  %v2_a0f4 = inttoptr i32 %v1_a0f4 to i8*
  %v3_a0f4 = load i8, i8* %v2_a0f4, align 1
  %v4_a0f4 = zext i8 %v3_a0f4 to i32
  store i32 %v4_a0f4, i32* %r1.global-to-local, align 4
  br i1 %v7_a0f0, label %dec_label_pc_a0e8, label %dec_label_pc_a100

dec_label_pc_a100:                                ; preds = %dec_label_pc_a0f0
  %v1_a100 = add i32 %v0_a0d4, 5
  %v2_a100 = inttoptr i32 %v1_a100 to i8*
  %v3_a100 = load i8, i8* %v2_a100, align 1
  %v4_a100 = zext i8 %v3_a100 to i32
  store i32 %v4_a100, i32* @r8, align 4
  %v2_a104 = icmp eq i8 %v3_a100, 0
  store i1 %v2_a104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a104, label %dec_label_pc_a0e8, label %dec_label_pc_a10c

dec_label_pc_a10c:                                ; preds = %dec_label_pc_a100
  %v3_a10c = mul nuw nsw i32 %v4_a100, 4
  store i32 %v3_a10c, i32* %sb.global-to-local, align 4
  %v1_a110 = add i32 %arg2, -6
  store i32 %v1_a110, i32* @r6, align 4
  %v2_a114 = mul nuw nsw i32 %v4_a100, 5
  store i32 %v2_a114, i32* @r7, align 4
  %v3_a118 = icmp ult i32 %v1_a110, %v2_a114
  %v9_a118 = icmp eq i32 %v1_a110, %v2_a114
  store i1 %v9_a118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a118, label %dec_label_pc_a0e8, label %dec_label_pc_a120

dec_label_pc_a120:                                ; preds = %dec_label_pc_a10c
  store i32 %v4_a100, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_a128 = call i32 @function_141c8(i32 %v4_a100, i32 24)
  store i32 %v2_a128, i32* %r0.global-to-local, align 4
  %v0_a12c = load i32, i32* @r8, align 4
  %v2_a12c = icmp eq i32 %v0_a12c, 0
  store i1 %v2_a12c, i1* %cpsr_z.global-to-local, align 1
  %v0_a134 = load i32, i32* @r4, align 4
  %v1_a134 = add i32 %v0_a134, 6
  store i32 %v1_a134, i32* %fp.global-to-local, align 4
  %tmp36 = icmp slt i32 %v0_a12c, 1
  br i1 %tmp36, label %dec_label_pc_a18cthread-pre-split, label %dec_label_pc_a13c

dec_label_pc_a13c:                                ; preds = %dec_label_pc_a120
  store i32 %v2_a128, i32* %r1.global-to-local, align 4
  %v1_a140 = load i32, i32* @r7, align 4
  %v2_a140 = add i32 %v1_a140, %v0_a134
  store i32 %v2_a140, i32* @ip, align 4
  store i32 %v0_a134, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_a150

dec_label_pc_a150:                                ; preds = %dec_label_pc_a150.dec_label_pc_a150_crit_edge, %dec_label_pc_a13c
  %v2_a160 = phi i32 [ %v1_a174, %dec_label_pc_a150.dec_label_pc_a150_crit_edge ], [ %v2_a128, %dec_label_pc_a13c ]
  %v0_a15c = phi i32 [ %v0_a15c.pre, %dec_label_pc_a150.dec_label_pc_a150_crit_edge ], [ %v2_a140, %dec_label_pc_a13c ]
  %v0_a158 = phi i32 [ %v0_a150.pre, %dec_label_pc_a150.dec_label_pc_a150_crit_edge ], [ %v0_a134, %dec_label_pc_a13c ]
  %v1_a150 = add i32 %v0_a158, 10
  %v2_a150 = inttoptr i32 %v1_a150 to i8*
  %v3_a150 = load i8, i8* %v2_a150, align 1
  %v1_a154 = add i32 %v0_a158, 6
  %v2_a154 = inttoptr i32 %v1_a154 to i32*
  %v3_a154 = load i32, i32* %v2_a154, align 4
  store i32 %v3_a154, i32* @r2, align 4
  %v1_a158 = add i32 %v0_a158, 5
  store i32 %v1_a158, i32* %r0.global-to-local, align 4
  %v9_a15c = icmp eq i32 %v0_a15c, %v1_a158
  store i1 %v9_a15c, i1* %cpsr_z.global-to-local, align 1
  %v3_a160 = add i32 %v2_a160, 20
  %v4_a160 = inttoptr i32 %v3_a160 to i8*
  store i8 %v3_a150, i8* %v4_a160, align 1
  %v0_a164 = load i32, i32* @r2, align 4
  %v1_a164 = load i32, i32* %r1.global-to-local, align 4
  %v2_a164 = add i32 %v1_a164, 4
  %v3_a164 = inttoptr i32 %v2_a164 to i32*
  store i32 %v0_a164, i32* %v3_a164, align 4
  %v0_a168 = load i32, i32* @r2, align 4
  %v1_a168 = load i32, i32* %r1.global-to-local, align 4
  %v2_a168 = add i32 %v1_a168, 16
  %v3_a168 = inttoptr i32 %v2_a168 to i32*
  store i32 %v0_a168, i32* %v3_a168, align 4
  %v0_a16c = load i32, i32* @r4, align 4
  %v1_a16c = trunc i32 %v0_a16c to i8
  %v2_a16c = load i32, i32* %r1.global-to-local, align 4
  %v3_a16c = inttoptr i32 %v2_a16c to i8*
  store i8 %v1_a16c, i8* %v3_a16c, align 1
  %v0_a170 = load i32, i32* @lr, align 4
  %v1_a170 = trunc i32 %v0_a170 to i8
  %v2_a170 = load i32, i32* %r1.global-to-local, align 4
  %v3_a170 = add i32 %v2_a170, 1
  %v4_a170 = inttoptr i32 %v3_a170 to i8*
  store i8 %v1_a170, i8* %v4_a170, align 1
  %v0_a174 = load i32, i32* %r1.global-to-local, align 4
  %v1_a174 = add i32 %v0_a174, 24
  store i32 %v1_a174, i32* %r1.global-to-local, align 4
  %v0_a178 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a178, label %dec_label_pc_a17c, label %dec_label_pc_a150.dec_label_pc_a150_crit_edge

dec_label_pc_a150.dec_label_pc_a150_crit_edge:    ; preds = %dec_label_pc_a150
  %v0_a150.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_a15c.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a150

dec_label_pc_a17c:                                ; preds = %dec_label_pc_a150
  %v0_a17c = load i32, i32* %sb.global-to-local, align 4
  %v1_a17c = load i32, i32* @r8, align 4
  %v1_a180 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_a17c, %v0_a17c
  %v2_a180 = sub i32 %v1_a180, %sum
  %v0_a184 = load i32, i32* %r0.global-to-local, align 4
  %v1_a184 = add i32 %v0_a184, 6
  store i32 %v1_a184, i32* %fp.global-to-local, align 4
  %v1_a188 = add i32 %v2_a180, -6
  store i32 %v1_a188, i32* @r6, align 4
  br label %dec_label_pc_a18c

dec_label_pc_a18cthread-pre-split:                ; preds = %dec_label_pc_a120
  %v0_a18c.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_a18c

dec_label_pc_a18c:                                ; preds = %dec_label_pc_a18cthread-pre-split, %dec_label_pc_a17c
  %v0_a198 = phi i32 [ %v1_a134, %dec_label_pc_a18cthread-pre-split ], [ %v1_a184, %dec_label_pc_a17c ]
  %v1_a190 = phi i32 [ %v0_a18c.pr, %dec_label_pc_a18cthread-pre-split ], [ %v1_a188, %dec_label_pc_a17c ]
  %v2_a18c = icmp eq i32 %v1_a190, 0
  store i1 %v2_a18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a18c, label %dec_label_pc_a2ac, label %dec_label_pc_a198

dec_label_pc_a198:                                ; preds = %dec_label_pc_a18c
  %v1_a198 = inttoptr i32 %v0_a198 to i8*
  %v2_a198 = load i8, i8* %v1_a198, align 1
  %v3_a198 = zext i8 %v2_a198 to i32
  store i32 %v3_a198, i32* %sb.global-to-local, align 4
  %v2_a19c = icmp eq i8 %v2_a198, 0
  store i1 %v2_a19c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a19c, label %dec_label_pc_a27c, label %dec_label_pc_a1ac

dec_label_pc_a1ac:                                ; preds = %dec_label_pc_a198
  store i32 %v3_a198, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a1b4 = call i32 @function_141c8(i32 %v3_a198, i32 8)
  store i32 %v2_a1b4, i32* %r0.global-to-local, align 4
  %v0_a1b8 = load i32, i32* %sb.global-to-local, align 4
  %v2_a1b8 = icmp eq i32 %v0_a1b8, 0
  store i1 %v2_a1b8, i1* %cpsr_z.global-to-local, align 1
  %tmp37 = icmp slt i32 %v0_a1b8, 1
  br i1 %tmp37, label %dec_label_pc_a27c, label %dec_label_pc_a1c8

dec_label_pc_a1c8:                                ; preds = %dec_label_pc_a1ac
  %v0_a1c8 = load i32, i32* @r6, align 4
  %v1_a1c8 = add i32 %v0_a1c8, -1
  store i32 %v1_a1c8, i32* @r2, align 4
  %v7_a1c8 = icmp eq i32 %v0_a1c8, 1
  store i1 %v7_a1c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1c8, label %dec_label_pc_a2ac, label %dec_label_pc_a1d0

dec_label_pc_a1d0:                                ; preds = %dec_label_pc_a1c8
  %v0_a1d0 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1d0 = add i32 %v0_a1d0, 1
  %v2_a1d0 = inttoptr i32 %v1_a1d0 to i8*
  %v3_a1d0 = load i8, i8* %v2_a1d0, align 1
  %v1_a1d4 = add i32 %v0_a1c8, -2
  store i32 %v1_a1d4, i32* @r2, align 4
  %v7_a1d4 = icmp eq i32 %v1_a1c8, 1
  store i1 %v7_a1d4, i1* %cpsr_z.global-to-local, align 1
  %v3_a1d8 = add i32 %v2_a1b4, 4
  %v4_a1d8 = inttoptr i32 %v3_a1d8 to i8*
  store i8 %v3_a1d0, i8* %v4_a1d8, align 1
  %v0_a1dc = load i32, i32* %fp.global-to-local, align 4
  %v1_a1dc = add i32 %v0_a1dc, 1
  store i32 %v1_a1dc, i32* %r0.global-to-local, align 4
  %v0_a1e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1e0, label %dec_label_pc_a2ac, label %dec_label_pc_a1e4

dec_label_pc_a1e4:                                ; preds = %dec_label_pc_a1d0
  %v1_a1e4 = add i32 %v0_a1dc, 2
  %v2_a1e4 = inttoptr i32 %v1_a1e4 to i8*
  %v3_a1e4 = load i8, i8* %v2_a1e4, align 1
  %v4_a1e4 = zext i8 %v3_a1e4 to i32
  store i32 %v4_a1e4, i32* @r4, align 4
  %v0_a1e8 = load i32, i32* @r2, align 4
  %v1_a1e8 = add i32 %v0_a1e8, -1
  store i32 %v1_a1e8, i32* @r7, align 4
  %v9_a1ec = icmp eq i32 %v1_a1e8, %v4_a1e4
  store i1 %v9_a1ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a1e4, i32* %r0.global-to-local, align 4
  %v5_a1f4 = icmp slt i32 %v1_a1e8, %v4_a1e4
  br i1 %v5_a1f4, label %dec_label_pc_a2ac, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1e4
  store i32 %v2_a1b4, i32* @r5, align 4
  %v1_a200 = add i32 %v2_a1b4, 8
  %v1_a204 = add i32 %v0_a1dc, 3
  store i32 %v1_a204, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_a254

dec_label_pc_a214:                                ; preds = %dec_label_pc_a254
  %v0_a214 = load i32, i32* @r7, align 4
  %v1_a214 = load i32, i32* @r4, align 4
  %v2_a214 = sub i32 %v0_a214, %v1_a214
  store i32 %v2_a214, i32* @r2, align 4
  %v9_a214 = icmp eq i32 %v0_a214, %v1_a214
  store i1 %v9_a214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a214, label %dec_label_pc_a2ac, label %dec_label_pc_a21c

dec_label_pc_a21c:                                ; preds = %dec_label_pc_a214
  %v1_a21c = load i32, i32* @r6, align 4
  %v2_a21c = add i32 %v1_a21c, %v1_a214
  %v3_a21c = inttoptr i32 %v2_a21c to i8*
  %v4_a21c = load i8, i8* %v3_a21c, align 1
  store i32 %stack_var_-44.0, i32* @r5, align 4
  %v1_a224 = add i32 %v2_a214, -1
  store i32 %v1_a224, i32* @r2, align 4
  %v7_a224 = icmp eq i32 %v2_a214, 1
  store i1 %v7_a224, i1* %cpsr_z.global-to-local, align 1
  %v3_a228 = add i32 %stack_var_-44.0, 4
  %v4_a228 = inttoptr i32 %v3_a228 to i8*
  store i8 %v4_a21c, i8* %v4_a228, align 1
  %v0_a22c = load i32, i32* @r4, align 4
  %v1_a22c = load i32, i32* @r6, align 4
  %v2_a22c = add i32 %v1_a22c, %v0_a22c
  store i32 %v2_a22c, i32* %r0.global-to-local, align 4
  %v0_a230 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a230, label %dec_label_pc_a2ac, label %dec_label_pc_a234

dec_label_pc_a234:                                ; preds = %dec_label_pc_a21c
  %v1_a234 = add i32 %v2_a22c, 1
  %v2_a234 = inttoptr i32 %v1_a234 to i8*
  %v3_a234 = load i8, i8* %v2_a234, align 1
  %v4_a234 = zext i8 %v3_a234 to i32
  store i32 %v4_a234, i32* @r4, align 4
  %v0_a238 = load i32, i32* @r2, align 4
  %v1_a238 = add i32 %v0_a238, -1
  store i32 %v1_a238, i32* @r7, align 4
  %v0_a23c = load i32, i32* @r5, align 4
  %v1_a23c = add i32 %v0_a23c, 8
  store i32 %v1_a23c, i32* %r1.global-to-local, align 4
  %v2_a240 = sub i32 %v1_a238, %v4_a234
  %tmp39 = sub i32 0, %v2_a240
  %v6_a240 = and i32 %v1_a238, %tmp39
  %v7_a240 = icmp slt i32 %v6_a240, 0
  %v8_a240 = icmp slt i32 %v2_a240, 0
  %v9_a240 = icmp eq i32 %v1_a238, %v4_a234
  store i1 %v9_a240, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a234, i32* %r0.global-to-local, align 4
  %v2_a24c = xor i1 %v8_a240, %v7_a240
  br i1 %v2_a24c, label %dec_label_pc_a2ac, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a234
  %v1_a250 = add i32 %v2_a22c, 2
  store i32 %v1_a250, i32* @r6, align 4
  br label %dec_label_pc_a254

dec_label_pc_a254:                                ; preds = %dec_label_pc_a1f8, %dec_label_pc_a250
  %v0_a258 = phi i32 [ %v4_a1e4, %dec_label_pc_a1f8 ], [ %v4_a234, %dec_label_pc_a250 ]
  %stack_var_-44.0 = phi i32 [ %v1_a200, %dec_label_pc_a1f8 ], [ %v1_a23c, %dec_label_pc_a250 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_a258 = add nuw nsw i32 %v0_a258, 1
  store i32 %v2_a258, i32* %r0.global-to-local, align 4
  %v2_a25c = call i32 @function_141c8(i32 %v2_a258, i32 1)
  store i32 %v2_a25c, i32* %r0.global-to-local, align 4
  %v0_a260 = load i32, i32* %fp.global-to-local, align 4
  %v1_a260 = add i32 %v0_a260, 1
  store i32 %v1_a260, i32* %fp.global-to-local, align 4
  %v1_a264 = load i32, i32* @r5, align 4
  %v2_a264 = inttoptr i32 %v1_a264 to i32*
  store i32 %v2_a25c, i32* %v2_a264, align 4
  %v0_a268 = load i32, i32* @r6, align 4
  store i32 %v0_a268, i32* %r1.global-to-local, align 4
  %v0_a26c = load i32, i32* @r4, align 4
  %v3_a270 = call i32 @function_12cd8(i32 %v2_a25c, i32 %v0_a268, i32 %v0_a26c)
  store i32 %v3_a270, i32* %r0.global-to-local, align 4
  %v0_a274 = load i32, i32* %sb.global-to-local, align 4
  %v1_a274 = load i32, i32* %fp.global-to-local, align 4
  %v9_a274 = icmp eq i32 %v0_a274, %v1_a274
  store i1 %v9_a274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a274, label %dec_label_pc_a27c, label %dec_label_pc_a214

dec_label_pc_a27c:                                ; preds = %dec_label_pc_a254, %dec_label_pc_a1ac, %dec_label_pc_a198
  %stack_var_-52.2 = phi i32 [ %v3_a198, %dec_label_pc_a198 ], [ %v2_a1b4, %dec_label_pc_a1ac ], [ %v2_a1b4, %dec_label_pc_a254 ]
  %v0_a27c = call i32 @function_13b98()
  store i32 %v0_a27c, i32* %r0.global-to-local, align 4
  %v2_a284 = inttoptr i32 %v0_a27c to i32*
  store i32 0, i32* %v2_a284, align 4
  %v0_a288 = call i32 @function_1361c()
  store i32 %v0_a288, i32* %r0.global-to-local, align 4
  %v7_a28c = icmp eq i32 %v0_a288, -1
  %v2_a298 = icmp eq i32 %v0_a288, 0
  store i1 %v2_a298, i1* %cpsr_z.global-to-local, align 1
  %tmp41 = icmp slt i32 %v0_a288, 1
  br i1 %tmp41, label %bb42, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_a27c
  store i32 1, i32* @r2, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a2ac

bb42:                                             ; preds = %dec_label_pc_a27c
  %. = zext i1 %v7_a28c to i32
  store i32 %., i32* @r2, align 4
  %v2_a2a4 = icmp eq i1 %v7_a28c, false
  store i1 %v2_a2a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2a4, label %dec_label_pc_a300, label %dec_label_pc_a2ac

dec_label_pc_a2ac:                                ; preds = %dec_label_pc_a234, %dec_label_pc_a21c, %dec_label_pc_a214, %.thread1, %bb42, %dec_label_pc_a1e4, %dec_label_pc_a1d0, %dec_label_pc_a1c8, %dec_label_pc_a18c
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_a18c ], [ %stack_var_-52.2, %bb42 ], [ %v2_a1b4, %dec_label_pc_a1c8 ], [ %v2_a1b4, %dec_label_pc_a1d0 ], [ %v2_a1b4, %dec_label_pc_a1e4 ], [ %stack_var_-52.2, %.thread1 ], [ %v2_a1b4, %dec_label_pc_a214 ], [ %v2_a1b4, %dec_label_pc_a21c ], [ %v2_a1b4, %dec_label_pc_a234 ]
  store i32 %v2_a128, i32* %r1.global-to-local, align 4
  %v2_a2b0 = icmp eq i32 %v2_a128, 0
  store i1 %v2_a2b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2b0, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_a2ac
  store i32 %v2_a128, i32* %r0.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_a2ac, %bb43
  %v1_a2b8 = xor i1 %v2_a2b0, true
  call void @__pseudo_cond_branch(i1 %v1_a2b8, i32 ptrtoint (i32* @global_var_14220.55 to i32))
  %v2_a2c0 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_a2c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2c0, label %.dec_label_pc_a0e8_crit_edge, label %dec_label_pc_a2c8

.dec_label_pc_a0e8_crit_edge:                     ; preds = %bb44
  %v29_a0ec.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0e8

dec_label_pc_a2c8:                                ; preds = %bb44
  %v0_a2c8 = load i32, i32* %sb.global-to-local, align 4
  %v2_a2c8 = icmp eq i32 %v0_a2c8, 0
  store i1 %v2_a2c8, i1* %cpsr_z.global-to-local, align 1
  %tmp45 = icmp slt i32 %v0_a2c8, 1
  br i1 %tmp45, label %dec_label_pc_a2f0, label %dec_label_pc_a2d0

dec_label_pc_a2d0:                                ; preds = %dec_label_pc_a2c8
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a2d0
  %v1_a2d8 = phi i32 [ %v1_a2e4, %dec_label_pc_a2d4 ], [ 0, %dec_label_pc_a2d0 ]
  store i32 %stack_var_-52.3, i32* %r1.global-to-local, align 4
  %v4_a2d8 = mul i32 %v1_a2d8, 8
  %v5_a2d8 = add i32 %v4_a2d8, %stack_var_-52.3
  %v6_a2d8 = inttoptr i32 %v5_a2d8 to i32*
  %v7_a2d8 = load i32, i32* %v6_a2d8, align 4
  store i32 %v7_a2d8, i32* %r0.global-to-local, align 4
  %v2_a2dc = icmp eq i32 %v7_a2d8, 0
  store i1 %v2_a2dc, i1* %cpsr_z.global-to-local, align 1
  %v1_a2e0 = xor i1 %v2_a2dc, true
  call void @__pseudo_cond_branch(i1 %v1_a2e0, i32 ptrtoint (i32* @global_var_14220.55 to i32))
  %v0_a2e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_a2e4 = add i32 %v0_a2e4, 1
  store i32 %v1_a2e4, i32* %r4.global-to-local, align 4
  %v0_a2e8 = load i32, i32* %sb.global-to-local, align 4
  %v9_a2e8 = icmp eq i32 %v0_a2e8, %v1_a2e4
  store i1 %v9_a2e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2e8, label %dec_label_pc_a2f0, label %dec_label_pc_a2d4

dec_label_pc_a2f0:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a2c8
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_a0c4, i32* @r4, align 4
  store i32 %v6_a0c4, i32* @r5, align 4
  store i32 %v9_a0c4, i32* @r6, align 4
  store i32 %v12_a0c4, i32* @r7, align 4
  store i32 %v15_a0c4, i32* @r8, align 4
  store i32 %v18_a0c4, i32* %sb.global-to-local, align 4
  store i32 %v21_a0c4, i32* %sl.global-to-local, align 4
  store i32 %v24_a0c4, i32* %fp.global-to-local, align 4
  store i32 %v27_a0c4, i32* @lr, align 4
  %v0_a2fc = call i32 @function_14220()
  store i32 %v0_a2fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %bb42, %dec_label_pc_a2f0
  %stack_var_-52.4 = phi i32 [ %stack_var_-52.3, %dec_label_pc_a2f0 ], [ %stack_var_-52.2, %bb42 ]
  %v2_a304 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a304 = zext i8 %v2_a304 to i32
  %v2_a308 = icmp eq i8 %v2_a304, 0
  store i1 %v2_a308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a308, label %dec_label_pc_a350, label %dec_label_pc_a310

dec_label_pc_a310:                                ; preds = %dec_label_pc_a300
  %v2_a314 = load i32, i32* @global_var_1f198.59, align 4
  store i32 %v2_a314, i32* %r0.global-to-local, align 4
  %v1_a318 = inttoptr i32 %v2_a314 to i32*
  %v2_a318 = load i32, i32* %v1_a318, align 4
  store i32 %v2_a318, i32* @ip, align 4
  store i32 %v4_a0f4, i32* %r4.global-to-local, align 4
  %v1_a320 = add i32 %v2_a318, 4
  %v2_a320 = inttoptr i32 %v1_a320 to i8*
  %v3_a320 = load i8, i8* %v2_a320, align 1
  store i32 %v4_a0f4, i32* %r1.global-to-local, align 4
  %v9_a328 = icmp eq i8 %v3_a320, %v3_a0f4
  store i1 %v9_a328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a328, label %dec_label_pc_a358, label %dec_label_pc_a344.preheader

dec_label_pc_a344.preheader:                      ; preds = %dec_label_pc_a310
  %v0_a344.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_a344

dec_label_pc_a334:                                ; preds = %dec_label_pc_a344
  %v4_a334 = mul i32 %v1_a344, 4
  %v5_a334 = add i32 %v4_a334, %v2_a314
  %v6_a334 = inttoptr i32 %v5_a334 to i32*
  %v7_a334 = load i32, i32* %v6_a334, align 4
  store i32 %v7_a334, i32* @ip, align 4
  %v1_a338 = add i32 %v7_a334, 4
  %v2_a338 = inttoptr i32 %v1_a338 to i8*
  %v3_a338 = load i8, i8* %v2_a338, align 1
  %v9_a33c = icmp eq i8 %v3_a338, %v3_a0f4
  store i1 %v9_a33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a33c, label %dec_label_pc_a358, label %dec_label_pc_a344

dec_label_pc_a344:                                ; preds = %dec_label_pc_a344.preheader, %dec_label_pc_a334
  %v0_a344 = phi i32 [ %v0_a344.pre, %dec_label_pc_a344.preheader ], [ %v1_a344, %dec_label_pc_a334 ]
  %v1_a344 = add i32 %v0_a344, 1
  %v9_a348 = icmp eq i32 %v1_a344, %v3_a304
  store i1 %v9_a348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a348, label %dec_label_pc_a350, label %dec_label_pc_a334

dec_label_pc_a350:                                ; preds = %dec_label_pc_a344, %dec_label_pc_a300, %dec_label_pc_a358
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_a354 = call i32 @function_147b8(i32 0)
  store i32 %v1_a354, i32* %r0.global-to-local, align 4
  %v0_a390.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a358

dec_label_pc_a358:                                ; preds = %dec_label_pc_a334, %dec_label_pc_a310, %dec_label_pc_a350
  %v0_a390 = phi i32 [ %v2_a318, %dec_label_pc_a310 ], [ %v0_a390.pre, %dec_label_pc_a350 ], [ %v7_a334, %dec_label_pc_a334 ]
  %v0_a358 = load i32, i32* %sl.global-to-local, align 4
  %v1_a35c = and i32 %v0_a358, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_a364 = mul i32 %v0_a358, 16777216
  store i32 %stack_var_-52.4, i32* %r4.global-to-local, align 4
  %v1_a358 = udiv i32 %v0_a358, 256
  %v3_a36c = and i32 %v1_a358, 65280
  %v4_a370 = mul i32 %v1_a35c, 256
  %v4_a374 = udiv i32 %v0_a358, 16777216
  %v5_a374 = or i32 %v4_a374, %v3_a364
  %v5_a370 = or i32 %v5_a374, %v4_a370
  %v2_a37c = or i32 %v5_a370, %v3_a36c
  store i32 %v2_a37c, i32* %r0.global-to-local, align 4
  %v0_a384 = load i32, i32* @r8, align 4
  store i32 %v0_a384, i32* %r1.global-to-local, align 4
  %v1_a390 = inttoptr i32 %v0_a390 to i32*
  %v2_a390 = load i32, i32* %v1_a390, align 4
  call void @__pseudo_branch(i32 %v2_a390)
  br label %dec_label_pc_a350

; uselistorder directives
  uselistorder i32 %v0_a358, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a344, { 2, 0, 1 }
  uselistorder i1 %v9_a33c, { 1, 0 }
  uselistorder i1 %v9_a328, { 1, 0 }
  uselistorder i32 %v1_a2e4, { 1, 2, 0 }
  uselistorder i32 %stack_var_-52.3, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_a2a4, { 1, 0 }
  uselistorder i1 %v7_a28c, { 1, 0 }
  uselistorder i32 %v0_a288, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-52.2, { 2, 0, 1 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v2_a240, { 1, 0 }
  uselistorder i32 %v1_a238, { 2, 0, 1, 3 }
  uselistorder i32 %v4_a234, { 2, 1, 0, 3 }
  uselistorder i32 %v0_a1c8, { 0, 2, 1 }
  uselistorder i32 %v2_a1b4, { 0, 1, 2, 10, 9, 8, 3, 5, 6, 7, 4, 11 }
  uselistorder i32 %v3_a198, { 2, 0, 1, 3 }
  uselistorder i32 %v1_a174, { 1, 0 }
  uselistorder i32 %v0_a158, { 0, 2, 1 }
  uselistorder i32 %v0_a134, { 1, 2, 0, 3 }
  uselistorder i32 %v2_a128, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_a114, { 2, 1, 0 }
  uselistorder i32 %v4_a100, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_a0d4, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 %v3_a0c4, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 0, 4, 5, 1, 2, 3, 6, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 8, 4, 5, 2, 6, 25, 7, 26, 11, 23, 15, 12, 9, 10, 13, 14, 21, 16, 18, 17, 19, 20, 24, 22, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 16, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 %arg2, { 1, 2, 4, 0, 3, 5, 6 }
  uselistorder label %dec_label_pc_a358, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a350, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a344, { 1, 0 }
  uselistorder label %dec_label_pc_a300, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_a2ac, { 4, 3, 0, 1, 2, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_a254, { 1, 0 }
  uselistorder label %dec_label_pc_a0e8, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_a3a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_a3a0:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_a3a0 = load i32, i32* @r4, align 4
  store i32 %v3_a3a0, i32* %stack_var_-24, align 4
  %v6_a3a0 = load i32, i32* @r5, align 4
  %v9_a3a0 = load i32, i32* @r6, align 4
  %v12_a3a0 = load i32, i32* @r7, align 4
  %v15_a3a0 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a3ac = call i32 @function_141c8(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1f194.57 to i32), i32* @r4, align 4
  %v2_a3b4 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a3b4 = zext i8 %v2_a3b4 to i32
  store i32 ptrtoint (i32* @global_var_1f198.59 to i32), i32* @r6, align 4
  store i32 53568, i32* %r2.global-to-local, align 4
  store i32 %v2_a3ac, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a3c8 = mul nuw nsw i32 %v3_a3b4, 4
  store i32 %v3_a3c8, i32* %r1.global-to-local, align 4
  %v2_a3cc = load i32, i32* @global_var_1f198.59, align 4
  %v2_a3d0 = inttoptr i32 %v2_a3ac to i32*
  store i32 53568, i32* %v2_a3d0, align 4
  %v3_a3d4 = load i32, i32* @r5, align 4
  %v4_a3d4 = add i32 %v3_a3d4, 4
  %v5_a3d4 = inttoptr i32 %v4_a3d4 to i8*
  store i8 0, i8* %v5_a3d4, align 1
  %v0_a3d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a3d8 = add i32 %v0_a3d8, 4
  store i32 %v1_a3d8, i32* %r1.global-to-local, align 4
  %v5_a3dc = call i32 @function_14310(i32 %v2_a3cc, i32 %v1_a3d8, i32 53568, i32 0)
  %v2_a3e0 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a3e0 = zext i8 %v2_a3e0 to i32
  store i32 %v3_a3e0, i32* %r3.global-to-local, align 4
  store i32 %v5_a3dc, i32* %ip.global-to-local, align 4
  %v0_a3e8 = load i32, i32* @r5, align 4
  %v5_a3e8 = mul nuw nsw i32 %v3_a3e0, 4
  %v6_a3e8 = add i32 %v5_a3e8, %v5_a3dc
  %v7_a3e8 = inttoptr i32 %v6_a3e8 to i32*
  store i32 %v0_a3e8, i32* %v7_a3e8, align 4
  store i32 ptrtoint (i8* @global_var_1f195.64 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_a3f8 = load i32, i32* @r4, align 4
  %v4_a3f8 = inttoptr i32 %v3_a3f8 to i8*
  store i8 ptrtoint (i8* @global_var_1f195.64 to i8), i8* %v4_a3f8, align 1
  %v0_a3fc = load i32, i32* %ip.global-to-local, align 4
  %v1_a3fc = load i32, i32* @r6, align 4
  %v2_a3fc = inttoptr i32 %v1_a3fc to i32*
  store i32 %v0_a3fc, i32* %v2_a3fc, align 4
  %v2_a400 = call i32 @function_141c8(i32 1, i32 8)
  %v2_a404 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a404 = zext i8 %v2_a404 to i32
  store i32 ptrtoint (i32* @global_var_d7e8.66 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_a400, i32* @r5, align 4
  %v3_a414 = mul nuw nsw i32 %v3_a404, 4
  store i32 %v3_a414, i32* %r1.global-to-local, align 4
  %v2_a418 = load i32, i32* @global_var_1f198.59, align 4
  %v2_a41c = inttoptr i32 %v2_a400 to i32*
  store i32 ptrtoint (i32* @global_var_d7e8.66 to i32), i32* %v2_a41c, align 4
  %v0_a420 = load i32, i32* @r8, align 4
  %v1_a420 = trunc i32 %v0_a420 to i8
  %v2_a420 = load i32, i32* @r5, align 4
  %v3_a420 = add i32 %v2_a420, 4
  %v4_a420 = inttoptr i32 %v3_a420 to i8*
  store i8 %v1_a420, i8* %v4_a420, align 1
  %v0_a424 = load i32, i32* %r1.global-to-local, align 4
  %v1_a424 = add i32 %v0_a424, 4
  store i32 %v1_a424, i32* %r1.global-to-local, align 4
  %v5_a428 = call i32 @function_14310(i32 %v2_a418, i32 %v1_a424, i32 sext (i8 ptrtoint (i8* @global_var_1f195.64 to i8) to i32), i32 ptrtoint (i32* @global_var_d7e8.66 to i32))
  %v2_a42c = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a42c = zext i8 %v2_a42c to i32
  store i32 %v3_a42c, i32* %r3.global-to-local, align 4
  store i32 %v5_a428, i32* %ip.global-to-local, align 4
  %v0_a434 = load i32, i32* @r5, align 4
  %v5_a434 = mul nuw nsw i32 %v3_a42c, 4
  %v6_a434 = add i32 %v5_a434, %v5_a428
  %v7_a434 = inttoptr i32 %v6_a434 to i32*
  store i32 %v0_a434, i32* %v7_a434, align 4
  %v0_a438 = load i32, i32* %r3.global-to-local, align 4
  %v1_a438 = load i32, i32* @r8, align 4
  %v2_a438 = add i32 %v1_a438, %v0_a438
  store i32 %v2_a438, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a444 = load i32, i32* %ip.global-to-local, align 4
  %v1_a444 = load i32, i32* @r6, align 4
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  store i32 %v0_a444, i32* %v2_a444, align 4
  %v0_a448 = load i32, i32* %r2.global-to-local, align 4
  %v1_a448 = trunc i32 %v0_a448 to i8
  %v2_a448 = load i32, i32* @r4, align 4
  %v3_a448 = inttoptr i32 %v2_a448 to i8*
  store i8 %v1_a448, i8* %v3_a448, align 1
  %v2_a44c = call i32 @function_141c8(i32 %v1_a438, i32 8)
  %v2_a450 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a450 = zext i8 %v2_a450 to i32
  store i32 ptrtoint (i32* @global_var_dce8.68 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a44c, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a460 = mul nuw nsw i32 %v3_a450, 4
  store i32 %v3_a460, i32* %r1.global-to-local, align 4
  %v2_a464 = load i32, i32* @global_var_1f198.59, align 4
  %v2_a468 = inttoptr i32 %v2_a44c to i32*
  store i32 ptrtoint (i32* @global_var_dce8.68 to i32), i32* %v2_a468, align 4
  %v3_a46c = load i32, i32* @r5, align 4
  %v4_a46c = add i32 %v3_a46c, 4
  %v5_a46c = inttoptr i32 %v4_a46c to i8*
  store i8 2, i8* %v5_a46c, align 1
  %v0_a470 = load i32, i32* %r1.global-to-local, align 4
  %v1_a470 = add i32 %v0_a470, 4
  store i32 %v1_a470, i32* %r1.global-to-local, align 4
  %v5_a474 = call i32 @function_14310(i32 %v2_a464, i32 %v1_a470, i32 ptrtoint (i32* @global_var_dce8.68 to i32), i32 2)
  %v2_a478 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a478 = zext i8 %v2_a478 to i32
  store i32 %v3_a478, i32* %r3.global-to-local, align 4
  store i32 %v5_a474, i32* %ip.global-to-local, align 4
  %v1_a480 = load i32, i32* @r8, align 4
  %v2_a480 = add i32 %v1_a480, %v3_a478
  %v3_a480 = trunc i32 %v2_a480 to i8
  store i32 %v2_a480, i32* %r2.global-to-local, align 4
  %v0_a484 = load i32, i32* @r5, align 4
  %v5_a484 = mul nuw nsw i32 %v3_a478, 4
  %v6_a484 = add i32 %v5_a484, %v5_a474
  %v7_a484 = inttoptr i32 %v6_a484 to i32*
  store i32 %v0_a484, i32* %v7_a484, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a48c = load i32, i32* @r8, align 4
  %v3_a490 = load i32, i32* @r4, align 4
  %v4_a490 = inttoptr i32 %v3_a490 to i8*
  store i8 %v3_a480, i8* %v4_a490, align 1
  %v0_a494 = load i32, i32* %ip.global-to-local, align 4
  %v1_a494 = load i32, i32* @r6, align 4
  %v2_a494 = inttoptr i32 %v1_a494 to i32*
  store i32 %v0_a494, i32* %v2_a494, align 4
  %v2_a498 = call i32 @function_141c8(i32 %v0_a48c, i32 8)
  %v2_a49c = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a49c = zext i8 %v2_a49c to i32
  store i32 ptrtoint (i32* @global_var_ce1c.70 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_a498, i32* @r5, align 4
  %v3_a4ac = mul nuw nsw i32 %v3_a49c, 4
  store i32 %v3_a4ac, i32* %r1.global-to-local, align 4
  %v2_a4b0 = load i32, i32* @global_var_1f198.59, align 4
  %v2_a4b4 = inttoptr i32 %v2_a498 to i32*
  store i32 ptrtoint (i32* @global_var_ce1c.70 to i32), i32* %v2_a4b4, align 4
  %v0_a4b8 = load i32, i32* @r7, align 4
  %v1_a4b8 = trunc i32 %v0_a4b8 to i8
  %v2_a4b8 = load i32, i32* @r5, align 4
  %v3_a4b8 = add i32 %v2_a4b8, 4
  %v4_a4b8 = inttoptr i32 %v3_a4b8 to i8*
  store i8 %v1_a4b8, i8* %v4_a4b8, align 1
  %v0_a4bc = load i32, i32* %r1.global-to-local, align 4
  %v1_a4bc = add i32 %v0_a4bc, 4
  store i32 %v1_a4bc, i32* %r1.global-to-local, align 4
  %v5_a4c0 = call i32 @function_14310(i32 %v2_a4b0, i32 %v1_a4bc, i32 %v2_a480, i32 ptrtoint (i32* @global_var_ce1c.70 to i32))
  %v2_a4c4 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a4c4 = zext i8 %v2_a4c4 to i32
  store i32 %v3_a4c4, i32* %r3.global-to-local, align 4
  store i32 %v5_a4c0, i32* %ip.global-to-local, align 4
  %v0_a4cc = load i32, i32* @r5, align 4
  %v5_a4cc = mul nuw nsw i32 %v3_a4c4, 4
  %v6_a4cc = add i32 %v5_a4cc, %v5_a4c0
  %v7_a4cc = inttoptr i32 %v6_a4cc to i32*
  store i32 %v0_a4cc, i32* %v7_a4cc, align 4
  %v0_a4d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4d0 = load i32, i32* @r8, align 4
  %v2_a4d0 = add i32 %v1_a4d0, %v0_a4d0
  store i32 %v2_a4d0, i32* %r2.global-to-local, align 4
  %v0_a4d4 = load i32, i32* @r7, align 4
  store i32 %v0_a4d4, i32* %r1.global-to-local, align 4
  %v0_a4dc = load i32, i32* %ip.global-to-local, align 4
  %v1_a4dc = load i32, i32* @r6, align 4
  %v2_a4dc = inttoptr i32 %v1_a4dc to i32*
  store i32 %v0_a4dc, i32* %v2_a4dc, align 4
  %v0_a4e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a4e0 = trunc i32 %v0_a4e0 to i8
  %v2_a4e0 = load i32, i32* @r4, align 4
  %v3_a4e0 = inttoptr i32 %v2_a4e0 to i8*
  store i8 %v1_a4e0, i8* %v3_a4e0, align 1
  %v2_a4e4 = call i32 @function_141c8(i32 %v1_a4d0, i32 %v0_a4d4)
  %v2_a4e8 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a4e8 = zext i8 %v2_a4e8 to i32
  store i32 ptrtoint (i32* @global_var_c6a0.72 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a4e4, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_a4f8 = mul nuw nsw i32 %v3_a4e8, 4
  store i32 %v3_a4f8, i32* %r1.global-to-local, align 4
  %v2_a4fc = load i32, i32* @global_var_1f198.59, align 4
  %v2_a500 = inttoptr i32 %v2_a4e4 to i32*
  store i32 ptrtoint (i32* @global_var_c6a0.72 to i32), i32* %v2_a500, align 4
  %v3_a504 = load i32, i32* @r5, align 4
  %v4_a504 = add i32 %v3_a504, 4
  %v5_a504 = inttoptr i32 %v4_a504 to i8*
  store i8 3, i8* %v5_a504, align 1
  %v0_a508 = load i32, i32* %r1.global-to-local, align 4
  %v1_a508 = add i32 %v0_a508, 4
  store i32 %v1_a508, i32* %r1.global-to-local, align 4
  %v5_a50c = call i32 @function_14310(i32 %v2_a4fc, i32 %v1_a508, i32 ptrtoint (i32* @global_var_c6a0.72 to i32), i32 3)
  %v2_a510 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a510 = zext i8 %v2_a510 to i32
  store i32 %v3_a510, i32* %r3.global-to-local, align 4
  store i32 %v5_a50c, i32* %ip.global-to-local, align 4
  %v0_a518 = load i32, i32* @r5, align 4
  %v5_a518 = mul nuw nsw i32 %v3_a510, 4
  %v6_a518 = add i32 %v5_a518, %v5_a50c
  %v7_a518 = inttoptr i32 %v6_a518 to i32*
  store i32 %v0_a518, i32* %v7_a518, align 4
  %v0_a51c = load i32, i32* %r3.global-to-local, align 4
  %v1_a51c = load i32, i32* @r8, align 4
  %v2_a51c = add i32 %v1_a51c, %v0_a51c
  store i32 %v2_a51c, i32* %r2.global-to-local, align 4
  %v0_a520 = load i32, i32* @r7, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  %v0_a528 = load i32, i32* %ip.global-to-local, align 4
  %v1_a528 = load i32, i32* @r6, align 4
  %v2_a528 = inttoptr i32 %v1_a528 to i32*
  store i32 %v0_a528, i32* %v2_a528, align 4
  %v0_a52c = load i32, i32* %r2.global-to-local, align 4
  %v1_a52c = trunc i32 %v0_a52c to i8
  %v2_a52c = load i32, i32* @r4, align 4
  %v3_a52c = inttoptr i32 %v2_a52c to i8*
  store i8 %v1_a52c, i8* %v3_a52c, align 1
  %v2_a530 = call i32 @function_141c8(i32 %v1_a51c, i32 %v0_a520)
  %v2_a534 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a534 = zext i8 %v2_a534 to i32
  store i32 ptrtoint (i32* @global_var_bee4.74 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a530, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_a544 = mul nuw nsw i32 %v3_a534, 4
  store i32 %v3_a544, i32* %r1.global-to-local, align 4
  %v2_a548 = load i32, i32* @global_var_1f198.59, align 4
  %v2_a54c = inttoptr i32 %v2_a530 to i32*
  store i32 ptrtoint (i32* @global_var_bee4.74 to i32), i32* %v2_a54c, align 4
  %v3_a550 = load i32, i32* @r5, align 4
  %v4_a550 = add i32 %v3_a550, 4
  %v5_a550 = inttoptr i32 %v4_a550 to i8*
  store i8 4, i8* %v5_a550, align 1
  %v0_a554 = load i32, i32* %r1.global-to-local, align 4
  %v1_a554 = add i32 %v0_a554, 4
  store i32 %v1_a554, i32* %r1.global-to-local, align 4
  %v5_a558 = call i32 @function_14310(i32 %v2_a548, i32 %v1_a554, i32 ptrtoint (i32* @global_var_bee4.74 to i32), i32 4)
  %v2_a55c = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a55c = zext i8 %v2_a55c to i32
  store i32 %v3_a55c, i32* %r3.global-to-local, align 4
  store i32 %v5_a558, i32* %ip.global-to-local, align 4
  %v0_a564 = load i32, i32* @r5, align 4
  %v5_a564 = mul nuw nsw i32 %v3_a55c, 4
  %v6_a564 = add i32 %v5_a564, %v5_a558
  %v7_a564 = inttoptr i32 %v6_a564 to i32*
  store i32 %v0_a564, i32* %v7_a564, align 4
  %v0_a568 = load i32, i32* %r3.global-to-local, align 4
  %v1_a568 = load i32, i32* @r8, align 4
  %v2_a568 = add i32 %v1_a568, %v0_a568
  store i32 %v2_a568, i32* %r2.global-to-local, align 4
  %v0_a56c = load i32, i32* @r7, align 4
  store i32 %v0_a56c, i32* %r1.global-to-local, align 4
  %v0_a574 = load i32, i32* %ip.global-to-local, align 4
  %v1_a574 = load i32, i32* @r6, align 4
  %v2_a574 = inttoptr i32 %v1_a574 to i32*
  store i32 %v0_a574, i32* %v2_a574, align 4
  %v0_a578 = load i32, i32* %r2.global-to-local, align 4
  %v1_a578 = trunc i32 %v0_a578 to i8
  %v2_a578 = load i32, i32* @r4, align 4
  %v3_a578 = inttoptr i32 %v2_a578 to i8*
  store i8 %v1_a578, i8* %v3_a578, align 1
  %v2_a57c = call i32 @function_141c8(i32 %v1_a568, i32 %v0_a56c)
  %v2_a580 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a580 = zext i8 %v2_a580 to i32
  store i32 ptrtoint (i32* @global_var_b5b8.76 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a57c, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_a590 = mul nuw nsw i32 %v3_a580, 4
  store i32 %v3_a590, i32* %r1.global-to-local, align 4
  %v2_a594 = load i32, i32* @global_var_1f198.59, align 4
  %v2_a598 = inttoptr i32 %v2_a57c to i32*
  store i32 ptrtoint (i32* @global_var_b5b8.76 to i32), i32* %v2_a598, align 4
  %v3_a59c = load i32, i32* @r5, align 4
  %v4_a59c = add i32 %v3_a59c, 4
  %v5_a59c = inttoptr i32 %v4_a59c to i8*
  store i8 5, i8* %v5_a59c, align 1
  %v0_a5a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5a0 = add i32 %v0_a5a0, 4
  store i32 %v1_a5a0, i32* %r1.global-to-local, align 4
  %v5_a5a4 = call i32 @function_14310(i32 %v2_a594, i32 %v1_a5a0, i32 ptrtoint (i32* @global_var_b5b8.76 to i32), i32 5)
  %v2_a5a8 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a5a8 = zext i8 %v2_a5a8 to i32
  store i32 %v3_a5a8, i32* %r3.global-to-local, align 4
  store i32 %v5_a5a4, i32* %ip.global-to-local, align 4
  %v0_a5b0 = load i32, i32* @r5, align 4
  %v5_a5b0 = mul nuw nsw i32 %v3_a5a8, 4
  %v6_a5b0 = add i32 %v5_a5b0, %v5_a5a4
  %v7_a5b0 = inttoptr i32 %v6_a5b0 to i32*
  store i32 %v0_a5b0, i32* %v7_a5b0, align 4
  %v0_a5b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5b4 = load i32, i32* @r8, align 4
  %v2_a5b4 = add i32 %v1_a5b4, %v0_a5b4
  store i32 %v2_a5b4, i32* %r2.global-to-local, align 4
  %v0_a5b8 = load i32, i32* @r7, align 4
  store i32 %v0_a5b8, i32* %r1.global-to-local, align 4
  %v0_a5c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a5c0 = load i32, i32* @r6, align 4
  %v2_a5c0 = inttoptr i32 %v1_a5c0 to i32*
  store i32 %v0_a5c0, i32* %v2_a5c0, align 4
  %v0_a5c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a5c4 = trunc i32 %v0_a5c4 to i8
  %v2_a5c4 = load i32, i32* @r4, align 4
  %v3_a5c4 = inttoptr i32 %v2_a5c4 to i8*
  store i8 %v1_a5c4, i8* %v3_a5c4, align 1
  %v2_a5c8 = call i32 @function_141c8(i32 %v1_a5b4, i32 %v0_a5b8)
  %v2_a5cc = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a5cc = zext i8 %v2_a5cc to i32
  store i32 ptrtoint (i32* @global_var_ae80.78 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a5c8, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_a5dc = mul nuw nsw i32 %v3_a5cc, 4
  store i32 %v3_a5dc, i32* %r1.global-to-local, align 4
  %v2_a5e0 = load i32, i32* @global_var_1f198.59, align 4
  %v2_a5e4 = inttoptr i32 %v2_a5c8 to i32*
  store i32 ptrtoint (i32* @global_var_ae80.78 to i32), i32* %v2_a5e4, align 4
  %v3_a5e8 = load i32, i32* @r5, align 4
  %v4_a5e8 = add i32 %v3_a5e8, 4
  %v5_a5e8 = inttoptr i32 %v4_a5e8 to i8*
  store i8 6, i8* %v5_a5e8, align 1
  %v0_a5ec = load i32, i32* %r1.global-to-local, align 4
  %v1_a5ec = add i32 %v0_a5ec, 4
  store i32 %v1_a5ec, i32* %r1.global-to-local, align 4
  %v5_a5f0 = call i32 @function_14310(i32 %v2_a5e0, i32 %v1_a5ec, i32 ptrtoint (i32* @global_var_ae80.78 to i32), i32 6)
  %v2_a5f4 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a5f4 = zext i8 %v2_a5f4 to i32
  store i32 %v3_a5f4, i32* %r3.global-to-local, align 4
  store i32 %v5_a5f0, i32* %ip.global-to-local, align 4
  %v0_a5fc = load i32, i32* @r5, align 4
  %v5_a5fc = mul nuw nsw i32 %v3_a5f4, 4
  %v6_a5fc = add i32 %v5_a5fc, %v5_a5f0
  %v7_a5fc = inttoptr i32 %v6_a5fc to i32*
  store i32 %v0_a5fc, i32* %v7_a5fc, align 4
  %v0_a600 = load i32, i32* %r3.global-to-local, align 4
  %v1_a600 = load i32, i32* @r8, align 4
  %v2_a600 = add i32 %v1_a600, %v0_a600
  store i32 %v2_a600, i32* %r2.global-to-local, align 4
  %v0_a604 = load i32, i32* @r7, align 4
  store i32 %v0_a604, i32* %r1.global-to-local, align 4
  %v0_a60c = load i32, i32* %ip.global-to-local, align 4
  %v1_a60c = load i32, i32* @r6, align 4
  %v2_a60c = inttoptr i32 %v1_a60c to i32*
  store i32 %v0_a60c, i32* %v2_a60c, align 4
  %v0_a610 = load i32, i32* %r2.global-to-local, align 4
  %v1_a610 = trunc i32 %v0_a610 to i8
  %v2_a610 = load i32, i32* @r4, align 4
  %v3_a610 = inttoptr i32 %v2_a610 to i8*
  store i8 %v1_a610, i8* %v3_a610, align 1
  %v2_a614 = call i32 @function_141c8(i32 %v1_a600, i32 %v0_a604)
  %v2_a618 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a618 = zext i8 %v2_a618 to i32
  store i32 ptrtoint (i32* @global_var_a6d8.80 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a614, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_a628 = mul nuw nsw i32 %v3_a618, 4
  store i32 %v3_a628, i32* %r1.global-to-local, align 4
  %v2_a62c = load i32, i32* @global_var_1f198.59, align 4
  %v2_a630 = inttoptr i32 %v2_a614 to i32*
  store i32 ptrtoint (i32* @global_var_a6d8.80 to i32), i32* %v2_a630, align 4
  %v3_a634 = load i32, i32* @r5, align 4
  %v4_a634 = add i32 %v3_a634, 4
  %v5_a634 = inttoptr i32 %v4_a634 to i8*
  store i8 7, i8* %v5_a634, align 1
  %v0_a638 = load i32, i32* %r1.global-to-local, align 4
  %v1_a638 = add i32 %v0_a638, 4
  store i32 %v1_a638, i32* %r1.global-to-local, align 4
  %v5_a63c = call i32 @function_14310(i32 %v2_a62c, i32 %v1_a638, i32 ptrtoint (i32* @global_var_a6d8.80 to i32), i32 7)
  %v2_a640 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a640 = zext i8 %v2_a640 to i32
  store i32 %v3_a640, i32* %r3.global-to-local, align 4
  store i32 %v5_a63c, i32* %ip.global-to-local, align 4
  %v0_a648 = load i32, i32* @r5, align 4
  %v5_a648 = mul nuw nsw i32 %v3_a640, 4
  %v6_a648 = add i32 %v5_a648, %v5_a63c
  %v7_a648 = inttoptr i32 %v6_a648 to i32*
  store i32 %v0_a648, i32* %v7_a648, align 4
  %v0_a64c = load i32, i32* %r3.global-to-local, align 4
  %v1_a64c = load i32, i32* @r8, align 4
  %v2_a64c = add i32 %v1_a64c, %v0_a64c
  store i32 %v2_a64c, i32* %r2.global-to-local, align 4
  %v0_a650 = load i32, i32* @r7, align 4
  store i32 %v0_a650, i32* %r1.global-to-local, align 4
  %v1_a658 = trunc i32 %v2_a64c to i8
  %v2_a658 = load i32, i32* @r4, align 4
  %v3_a658 = inttoptr i32 %v2_a658 to i8*
  store i8 %v1_a658, i8* %v3_a658, align 1
  %v0_a65c = load i32, i32* %ip.global-to-local, align 4
  %v1_a65c = load i32, i32* @r6, align 4
  %v2_a65c = inttoptr i32 %v1_a65c to i32*
  store i32 %v0_a65c, i32* %v2_a65c, align 4
  %v2_a660 = call i32 @function_141c8(i32 %v1_a64c, i32 %v0_a650)
  %v2_a664 = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a664 = zext i8 %v2_a664 to i32
  store i32 ptrtoint (i32* @global_var_81cc.82 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a660, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_a674 = mul nuw nsw i32 %v3_a664, 4
  store i32 %v3_a674, i32* %r1.global-to-local, align 4
  %v2_a678 = load i32, i32* @global_var_1f198.59, align 4
  %v2_a67c = inttoptr i32 %v2_a660 to i32*
  store i32 ptrtoint (i32* @global_var_81cc.82 to i32), i32* %v2_a67c, align 4
  %v3_a680 = load i32, i32* @r5, align 4
  %v4_a680 = add i32 %v3_a680, 4
  %v5_a680 = inttoptr i32 %v4_a680 to i8*
  store i8 9, i8* %v5_a680, align 1
  %v0_a684 = load i32, i32* %r1.global-to-local, align 4
  %v1_a684 = add i32 %v0_a684, 4
  store i32 %v1_a684, i32* %r1.global-to-local, align 4
  %v5_a688 = call i32 @function_14310(i32 %v2_a678, i32 %v1_a684, i32 ptrtoint (i32* @global_var_81cc.82 to i32), i32 9)
  %v2_a68c = load i8, i8* bitcast (i8** @global_var_1f194.57 to i8*), align 4
  %v3_a68c = zext i8 %v2_a68c to i32
  store i32 %v3_a68c, i32* %r3.global-to-local, align 4
  %v1_a690 = load i32, i32* @r6, align 4
  %v2_a690 = inttoptr i32 %v1_a690 to i32*
  store i32 %v5_a688, i32* %v2_a690, align 4
  %v0_a694 = load i32, i32* @r5, align 4
  %v2_a694 = load i32, i32* %r3.global-to-local, align 4
  %v5_a694 = mul i32 %v2_a694, 4
  %v6_a694 = add i32 %v5_a694, %v5_a688
  %v7_a694 = inttoptr i32 %v6_a694 to i32*
  store i32 %v0_a694, i32* %v7_a694, align 4
  %v0_a698 = load i32, i32* %r3.global-to-local, align 4
  %v1_a698 = load i32, i32* @r8, align 4
  %v2_a698 = add i32 %v1_a698, %v0_a698
  store i32 %v2_a698, i32* %r2.global-to-local, align 4
  %v1_a6a0 = trunc i32 %v2_a698 to i8
  %v2_a6a0 = load i32, i32* @r4, align 4
  %v3_a6a0 = inttoptr i32 %v2_a6a0 to i8*
  store i8 %v1_a6a0, i8* %v3_a6a0, align 1
  %v2_a6a4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_a6a4, i32* @r4, align 4
  store i32 %v6_a3a0, i32* @r5, align 4
  store i32 %v9_a3a0, i32* @r6, align 4
  store i32 %v12_a3a0, i32* @r7, align 4
  store i32 %v15_a3a0, i32* @r8, align 4
  ret i32 %v1_a698

; uselistorder directives
  uselistorder i32 %v1_a698, { 1, 0 }
  uselistorder i32 %v1_a64c, { 1, 0 }
  uselistorder i32 %v1_a600, { 1, 0 }
  uselistorder i32 %v1_a5b4, { 1, 0 }
  uselistorder i32 %v1_a568, { 1, 0 }
  uselistorder i32 %v1_a51c, { 1, 0 }
  uselistorder i32 %v1_a4d0, { 1, 0 }
  uselistorder i32 %v2_a480, { 0, 2, 1 }
  uselistorder i32 %v3_a478, { 1, 0, 2 }
  uselistorder i32 %v1_a438, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* @global_var_1f198.59, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i8* bitcast (i8** @global_var_1f194.57 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_a6d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a6d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a6d8 = load i32, i32* @r4, align 4
  %v15_a6d8 = load i32, i32* @r8, align 4
  %v21_a6d8 = load i32, i32* @sl, align 4
  %v24_a6d8 = load i32, i32* @fp, align 4
  %v1_a6dc = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_a6dc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a6f8 = urem i32 %arg4, 256
  store i32 %v1_a6f8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a708 = call i32 @function_141c8(i32 %v1_a6dc, i32 4)
  %v0_a70c = load i32, i32* @r5, align 4
  store i32 %v0_a70c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a718 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a718, i32* %r3.global-to-local, align 4
  %v0_a71c = load i32, i32* @r4, align 4
  store i32 %v0_a71c, i32* %r0.global-to-local, align 4
  %v5_a720 = inttoptr i32 %v0_a70c to i32*
  %v6_a720 = call i32 @function_a054(i32 %v0_a71c, i32* %v5_a720, i32 2, i32 %v0_a718)
  %v1_a72c = urem i32 %v6_a720, 256
  store i32 %v1_a72c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a738 = load i32, i32* @r5, align 4
  store i32 %v0_a738, i32* %r1.global-to-local, align 4
  %v0_a73c = load i32, i32* @r4, align 4
  store i32 %v0_a73c, i32* %r0.global-to-local, align 4
  %v5_a740 = trunc i32 %v6_a720 to i8
  %v6_a744 = inttoptr i32 %v0_a738 to i32*
  %v7_a744 = call i32 @function_a054(i32 %v0_a73c, i32* %v6_a744, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_a748 = load i32, i32* @r5, align 4
  store i32 %v0_a748, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a744, i32* @r7, align 4
  %v0_a758 = load i32, i32* @r4, align 4
  store i32 %v0_a758, i32* %r0.global-to-local, align 4
  %v4_a75c = inttoptr i32 %v0_a748 to i32*
  %v5_a75c = call i32 @function_a054(i32 %v0_a758, i32* %v4_a75c, i32 4, i32 64)
  %v1_a764 = urem i32 %v5_a75c, 256
  store i32 %v1_a764, i32* %ip.global-to-local, align 4
  %v0_a768 = load i32, i32* @r5, align 4
  store i32 %v0_a768, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a774 = load i32, i32* @r4, align 4
  store i32 %v0_a774, i32* %r0.global-to-local, align 4
  %v5_a778 = trunc i32 %v5_a75c to i8
  %v6_a77c = inttoptr i32 %v0_a768 to i32*
  %v7_a77c = call i32 @function_a054(i32 %v0_a774, i32* %v6_a77c, i32 5, i32 1)
  %v1_a788 = urem i32 %v7_a77c, 256
  store i32 %v1_a788, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a794 = load i32, i32* @r5, align 4
  store i32 %v0_a794, i32* %r1.global-to-local, align 4
  %v0_a798 = load i32, i32* @r4, align 4
  store i32 %v0_a798, i32* %r0.global-to-local, align 4
  %v5_a7a0 = inttoptr i32 %v0_a794 to i32*
  %v6_a7a0 = call i32 @function_a054(i32 %v0_a798, i32* %v5_a7a0, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_a7ac = load i32, i32* @r5, align 4
  store i32 %v0_a7ac, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a7b8 = load i32, i32* @r4, align 4
  store i32 %v0_a7b8, i32* %r0.global-to-local, align 4
  %v5_a7bc = inttoptr i32 %v0_a7ac to i32*
  %v6_a7bc = call i32 @function_a054(i32 %v0_a7b8, i32* %v5_a7bc, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_a7c0 = load i32, i32* @r5, align 4
  store i32 %v0_a7c0, i32* %r1.global-to-local, align 4
  %v0_a7c4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a7c4, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_a7bc, i32* @sl, align 4
  %v0_a7d0 = load i32, i32* @r4, align 4
  store i32 %v0_a7d0, i32* %r0.global-to-local, align 4
  %v4_a7d4 = inttoptr i32 %v0_a7c0 to i32*
  %v5_a7d4 = call i32 @function_a054(i32 %v0_a7d0, i32* %v4_a7d4, i32 %v0_a7c4, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a7e4 = load i32, i32* @r5, align 4
  store i32 %v0_a7e4, i32* %r1.global-to-local, align 4
  %v0_a7e8 = load i32, i32* @r4, align 4
  store i32 %v0_a7e8, i32* %r0.global-to-local, align 4
  %v4_a7ec = inttoptr i32 %v0_a7e4 to i32*
  %v5_a7ec = call i32 @function_a054(i32 %v0_a7e8, i32* %v4_a7ec, i32 1, i32 1)
  %v1_a7f4 = urem i32 %v5_a7ec, 256
  store i32 %v1_a7f4, i32* %ip.global-to-local, align 4
  %v0_a7f8 = load i32, i32* @r5, align 4
  store i32 %v0_a7f8, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a800 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a800, i32* %r3.global-to-local, align 4
  %v0_a804 = load i32, i32* @r4, align 4
  store i32 %v0_a804, i32* %r0.global-to-local, align 4
  %v5_a80c = inttoptr i32 %v0_a7f8 to i32*
  %v6_a80c = call i32 @function_a054(i32 %v0_a804, i32* %v5_a80c, i32 18, i32 %v0_a800)
  %v0_a814 = load i32, i32* @r5, align 4
  store i32 %v0_a814, i32* %r1.global-to-local, align 4
  %v2_a818 = load i32, i32* @global_var_1f238.84, align 4
  store i32 %v2_a818, i32* %r3.global-to-local, align 4
  store i32 %v6_a80c, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_a824 = load i32, i32* @r4, align 4
  store i32 %v0_a824, i32* %r0.global-to-local, align 4
  %v4_a828 = inttoptr i32 %v0_a814 to i32*
  %v5_a828 = call i32 @function_a054(i32 %v0_a824, i32* %v4_a828, i32 24, i32 %v2_a818)
  %v0_a830 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a830, i32* %r0.global-to-local, align 4
  %v1_a834 = inttoptr i32 %v0_a830 to i32*
  %v2_a834 = call i32 @function_138c0(i32* %v1_a834)
  %v1_a838 = load i32, i32* @r6, align 4
  %v2_a838 = add i32 %v1_a838, %v2_a834
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a84c = call i32 @function_13edc(i32 2, i32 3, i32 6)
  store i32 %v3_a84c, i32* %r0.global-to-local, align 4
  %v7_a850 = icmp eq i32 %v3_a84c, -1
  store i1 %v7_a850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a850, label %dec_label_pc_ae68, label %dec_label_pc_a85c

dec_label_pc_a85c:                                ; preds = %dec_label_pc_a6d8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a864 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a864, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_a86c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a86c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a878 = call i32 @function_13eac(i32 %v3_a84c, i32 %v0_a86c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_a878, i32* %r0.global-to-local, align 4
  %v7_a87c = icmp eq i32 %v6_a878, -1
  store i1 %v7_a87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a87c, label %dec_label_pc_ae70, label %dec_label_pc_a884

dec_label_pc_a884:                                ; preds = %dec_label_pc_a85c
  %v0_a890 = load i32, i32* @sl, align 4
  %v3_a890 = mul i32 %v0_a890, 65536
  store i32 %v3_a890, i32* %sl.global-to-local, align 4
  %v0_a894 = load i32, i32* @r7, align 4
  %v2_a89c = icmp eq i32 %v1_a6dc, 0
  store i1 %v2_a89c, i1* %cpsr_z.global-to-local, align 1
  %v0_a8a0 = load i32, i32* @r8, align 4
  %v1_a8a0 = urem i32 %v0_a8a0, 256
  store i32 %v1_a8a0, i32* %r8.global-to-local, align 4
  %v3_a8a4 = urem i32 %v0_a894, 65536
  store i32 %v3_a8a4, i32* %r3.global-to-local, align 4
  %v3_a8a8 = urem i32 %v6_a7a0, 65536
  store i32 %v3_a8a8, i32* %r1.global-to-local, align 4
  %v3_a8ac = urem i32 %v0_a890, 65536
  store i32 %v3_a8ac, i32* %r2.global-to-local, align 4
  %v0_a8b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a8b8, i32* %stack_var_-40, align 4
  br i1 %v2_a89c, label %dec_label_pc_ab4c.preheader, label %dec_label_pc_a8cc

dec_label_pc_a8cc:                                ; preds = %dec_label_pc_a884
  %v3_a8d4 = mul i32 %v5_a7d4, 65536
  %v1_a8dc = urem i32 %v6_a7a0, 256
  %v1_a8e4 = add i32 %v3_a8d4, 524288
  %v1_a8e8 = add i32 %v3_a8d4, 4325376
  %v1_a8ec = urem i32 %v0_a890, 256
  %v1_a8f0 = add i32 %v3_a8d4, 1835008
  %v0_a894.not = or i32 %v0_a894, -65536
  %v1_a8f8 = xor i32 %v0_a894.not, 65535
  %v3_a8fc = udiv i32 %v1_a8f0, 256
  %tmp82 = udiv i32 %v0_a894, 256
  %v1_a910 = and i32 %v3_a8fc, 65280
  store i32 %v1_a910, i32* %r0.global-to-local, align 4
  %v3_a934 = mul nuw nsw i32 %v1_a8dc, 256
  %tmp83 = udiv i32 %v6_a7a0, 256
  %v4_a93c = urem i32 %tmp83, 256
  %v5_a93c = or i32 %v4_a93c, %v3_a934
  store i32 %v5_a93c, i32* @lr, align 4
  %tmp84 = mul nsw i32 %v1_a8f8, 256
  %v3_a944 = mul nuw nsw i32 %v1_a8ec, 256
  %sext23 = mul i32 %tmp82, 16777216
  %v4_a94c = sdiv i32 %sext23, 16777216
  %v4_a914 = sdiv i32 %v1_a8e8, 16777216
  %tmp85 = udiv i32 %v0_a890, 256
  %v4_a954 = urem i32 %tmp85, 256
  %v5_a954 = or i32 %v4_a954, %v3_a944
  store i32 %v5_a954, i32* @r7, align 4
  %v1_a958 = and i32 %tmp84, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_a958, i32* %ip.global-to-local, align 4
  %v4_a95c = sdiv i32 %v1_a8f0, 16777216
  %v3_a960 = udiv i32 %v1_a8e4, 256
  %tmp86 = udiv i32 %v1_a8f8, 256
  %v4_a964 = urem i32 %tmp86, 256
  %v5_a964 = or i32 %v4_a964, %v1_a958
  store i32 %v5_a964, i32* @r6, align 4
  %v3_a968 = ashr i32 %v1_a8e8, 31
  %v3_a96c = ashr i32 %sext23, 31
  %v1_a970 = and i32 %v3_a960, 65280
  store i32 %v1_a970, i32* @r5, align 4
  %v3_a97c = ashr i32 %v1_a8f0, 31
  store i32 %v3_a97c, i32* %r2.global-to-local, align 4
  %v3_a98032 = udiv i32 %v1_a958, 256
  store i32 %v3_a98032, i32* %r3.global-to-local, align 4
  store i32 %v1_a8dc, i32* %r1.global-to-local, align 4
  %v4_a988 = udiv i32 %v1_a8e4, 16777216
  %v5_a988 = or i32 %v4_a988, %v1_a970
  store i32 %v5_a988, i32* %r8.global-to-local, align 4
  %v5_a98c = trunc i32 %tmp86 to i8
  store i32 %v0_a8b8, i32* @r4, align 4
  %v3_a9a433 = udiv i32 %v1_a970, 256
  store i32 %v3_a9a433, i32* %sl.global-to-local, align 4
  store i32 %v1_a8ec, i32* %fp.global-to-local, align 4
  %v4_a9f8 = sext i8 %v5_a778 to i32
  %sext15 = mul i32 %v1_a958, 65536
  %v4_aac8 = sdiv i32 %sext15, 16777216
  %v2_aaf8 = icmp eq i32 %v1_a8a0, 0
  %sext16 = mul i32 %v6_a7a0, 16777216
  %v4_ab0c = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp83, 16777216
  %v4_ab28 = sdiv i32 %sext17, 16777216
  %v1_aa10 = trunc i32 %v4_a94c to i8
  br label %dec_label_pc_a9ac

dec_label_pc_a9ac:                                ; preds = %bb97, %dec_label_pc_a8cc
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a9b8 = call i32 @function_141c8(i32 1510, i32 4)
  store i32 %v2_a9b8, i32* %r0.global-to-local, align 4
  store i32 %v2_a708, i32* %r2.global-to-local, align 4
  %v3_a9c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a9c0, i32* %r3.global-to-local, align 4
  %v2_a9c4 = load i32, i32* @r4, align 4
  %v5_a9c4 = mul i32 %v2_a9c4, 4
  %v6_a9c4 = add i32 %v5_a9c4, %v2_a708
  %v7_a9c4 = inttoptr i32 %v6_a9c4 to i32*
  store i32 %v2_a9b8, i32* %v7_a9c4, align 4
  %v0_a9c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a9c8 = load i32, i32* %r3.global-to-local, align 4
  %v4_a9c8 = mul i32 %v1_a9c8, 4
  %v5_a9c8 = add i32 %v4_a9c8, %v0_a9c8
  %v6_a9c8 = inttoptr i32 %v5_a9c8 to i32*
  %v7_a9c8 = load i32, i32* %v6_a9c8, align 4
  store i32 %v7_a9c8, i32* %r4.global-to-local, align 4
  %v1_a9cc = inttoptr i32 %v7_a9c8 to i8*
  %v2_a9cc = load i8, i8* %v1_a9cc, align 1
  %tmp = urem i8 %v2_a9cc, 16
  %v1_a9d0 = zext i8 %tmp to i32
  %v1_a9d4 = or i32 %v1_a9d0, 64
  store i32 %v1_a9d4, i32* %r2.global-to-local, align 4
  %v1_a9d8 = trunc i32 %v1_a9d4 to i8
  store i8 %v1_a9d8, i8* %v1_a9cc, align 1
  %v0_a9dc = load i32, i32* %r4.global-to-local, align 4
  %v1_a9dc = inttoptr i32 %v0_a9dc to i8*
  %v2_a9dc = load i8, i8* %v1_a9dc, align 1
  %v1_a9e0 = and i8 %v2_a9dc, -16
  %v1_a9e4 = or i8 %v1_a9e0, 5
  store i32 %v1_a788, i32* %r1.global-to-local, align 4
  store i8 %v1_a9e4, i8* %v1_a9dc, align 1
  %v2_a9f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_a9f4 = add i32 %v2_a9f4, 1
  %v4_a9f4 = inttoptr i32 %v3_a9f4 to i8*
  store i8 %v5_a740, i8* %v4_a9f4, align 1
  %v2_a9fc = load i32, i32* %r4.global-to-local, align 4
  %v3_a9fc = add i32 %v2_a9fc, 8
  %v4_a9fc = inttoptr i32 %v3_a9fc to i8*
  store i8 %v5_a778, i8* %v4_a9fc, align 1
  store i32 %v4_a94c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_aa08 = load i32, i32* %r1.global-to-local, align 4
  %v9_aa08 = icmp eq i32 %v0_aa08, 0
  store i1 %v9_aa08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a968, i32* %r2.global-to-local, align 4
  %v2_aa10 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa10 = add i32 %v2_aa10, 4
  %v4_aa10 = inttoptr i32 %v3_aa10 to i8*
  store i8 %v1_aa10, i8* %v4_aa10, align 1
  store i32 %v4_a914, i32* %r1.global-to-local, align 4
  %v0_aa18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa18, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a9ac
  %v1_aa18 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_aa18, i32* %r3.global-to-local, align 4
  %v2_aa1c = trunc i32 %v1_aa18 to i8
  %v3_aa1c = load i32, i32* %r4.global-to-local, align 4
  %v4_aa1c = add i32 %v3_aa1c, 7
  %v5_aa1c = inttoptr i32 %v4_aa1c to i8*
  store i8 %v2_aa1c, i8* %v5_aa1c, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a9ac, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_aa24 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa24 = trunc i32 %v0_aa24 to i8
  %v2_aa24 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa24 = add i32 %v2_aa24, 3
  %v4_aa24 = inttoptr i32 %v3_aa24 to i8*
  store i8 %v1_aa24, i8* %v4_aa24, align 1
  %v0_aa28 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa28 = trunc i32 %v0_aa28 to i8
  %v2_aa28 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa28 = add i32 %v2_aa28, 2
  %v4_aa28 = inttoptr i32 %v3_aa28 to i8*
  store i8 %v1_aa28, i8* %v4_aa28, align 1
  %v0_aa2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa2c, label %bb88, label %bb87

bb87:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %.thread, %bb87
  store i32 %v3_a96c, i32* %r1.global-to-local, align 4
  %v0_aa34 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa34 = trunc i32 %v0_aa34 to i8
  %v2_aa34 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa34 = add i32 %v2_aa34, 9
  %v4_aa34 = inttoptr i32 %v3_aa34 to i8*
  store i8 %v1_aa34, i8* %v4_aa34, align 1
  %v0_aa38 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa38, label %bb90, label %bb89

bb89:                                             ; preds = %bb88
  %v1_aa38 = load i32, i32* %r2.global-to-local, align 4
  %v2_aa38 = trunc i32 %v1_aa38 to i8
  %v3_aa38 = load i32, i32* %r4.global-to-local, align 4
  %v4_aa38 = add i32 %v3_aa38, 6
  %v5_aa38 = inttoptr i32 %v4_aa38 to i8*
  store i8 %v2_aa38, i8* %v5_aa38, align 1
  br label %bb90

bb90:                                             ; preds = %bb88, %bb89
  %v3_aa3c = load i32, i32* %stack_var_-40, align 4
  %v5_aa44 = mul i32 %v3_aa3c, 24
  store i32 %v5_aa44, i32* %r3.global-to-local, align 4
  store i32 %v5_a828, i32* %r2.global-to-local, align 4
  %v1_aa4c = load i32, i32* %r4.global-to-local, align 4
  %v2_aa4c = add i32 %v1_aa4c, 12
  %v3_aa4c = inttoptr i32 %v2_aa4c to i32*
  store i32 %v5_a828, i32* %v3_aa4c, align 4
  %v0_aa50 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa50 = load i32, i32* @sb, align 4
  %v2_aa50 = add i32 %v1_aa50, %v0_aa50
  store i32 %v2_aa50, i32* %r3.global-to-local, align 4
  %v1_aa54 = add i32 %v2_aa50, 16
  %v2_aa54 = inttoptr i32 %v1_aa54 to i32*
  %v3_aa54 = load i32, i32* %v2_aa54, align 4
  store i32 %v3_aa54, i32* %r2.global-to-local, align 4
  %v0_aa58 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa58 = trunc i32 %v0_aa58 to i8
  %v2_aa58 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa58 = add i32 %v2_aa58, 5
  %v4_aa58 = inttoptr i32 %v3_aa58 to i8*
  store i8 %v1_aa58, i8* %v4_aa58, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_aa60 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa60 = add i32 %v0_aa60, 20
  store i32 %v1_aa60, i32* %r1.global-to-local, align 4
  %v3_aa64 = add i32 %v0_aa60, 22
  %v4_aa64 = inttoptr i32 %v3_aa64 to i8*
  store i8 101, i8* %v4_aa64, align 1
  %v0_aa68 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa68 = load i32, i32* %r4.global-to-local, align 4
  %v2_aa68 = add i32 %v1_aa68, 16
  %v3_aa68 = inttoptr i32 %v2_aa68 to i32*
  store i32 %v0_aa68, i32* %v3_aa68, align 4
  %v0_aa6c = load i32, i32* %r4.global-to-local, align 4
  %v1_aa6c = add i32 %v0_aa6c, 24
  store i32 %v1_aa6c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_aa74 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa74 = add i32 %v0_aa74, -93
  store i32 %v1_aa74, i32* %r3.global-to-local, align 4
  %v2_aa78 = load i32, i32* %r1.global-to-local, align 4
  %v3_aa78 = add i32 %v2_aa78, 3
  %v4_aa78 = inttoptr i32 %v3_aa78 to i8*
  store i8 88, i8* %v4_aa78, align 1
  %v0_aa7c = load i32, i32* %r3.global-to-local, align 4
  %v1_aa7c = trunc i32 %v0_aa7c to i8
  %v2_aa7c = load i32, i32* %r0.global-to-local, align 4
  %v3_aa7c = add i32 %v2_aa7c, 12
  %v4_aa7c = inttoptr i32 %v3_aa7c to i8*
  store i8 %v1_aa7c, i8* %v4_aa7c, align 1
  %v0_aa80 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa80 = trunc i32 %v0_aa80 to i8
  %v2_aa80 = load i32, i32* %r0.global-to-local, align 4
  %v3_aa80 = add i32 %v2_aa80, 13
  %v4_aa80 = inttoptr i32 %v3_aa80 to i8*
  store i8 %v1_aa80, i8* %v4_aa80, align 1
  %v0_aa84 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa84 = add i32 %v0_aa84, 38
  %v2_aa84 = inttoptr i32 %v1_aa84 to i8*
  %v3_aa84 = load i8, i8* %v2_aa84, align 1
  %tmp103 = urem i8 %v3_aa84, 16
  %v1_aa88 = zext i8 %tmp103 to i32
  %v1_aa8c = or i32 %v1_aa88, 64
  store i32 %v1_aa8c, i32* %r3.global-to-local, align 4
  %v1_aa90 = trunc i32 %v1_aa8c to i8
  store i8 %v1_aa90, i8* %v2_aa84, align 1
  %v0_aa94 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa94 = add i32 %v0_aa94, 38
  %v2_aa94 = inttoptr i32 %v1_aa94 to i8*
  %v3_aa94 = load i8, i8* %v2_aa94, align 1
  %v1_aa98 = and i8 %v3_aa94, -16
  %v1_aa9c = or i8 %v1_aa98, 5
  store i8 %v1_aa9c, i8* %v2_aa94, align 1
  %v0_aaa8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aaa8 = add i32 %v0_aaa8, 38
  store i32 %v1_aaa8, i32* @r5, align 4
  %v3_aaac = add i32 %v0_aaa8, 39
  %v4_aaac = inttoptr i32 %v3_aaac to i8*
  store i8 %v5_a740, i8* %v4_aaac, align 1
  store i32 %v4_a95c, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_a97c, i32* %r2.global-to-local, align 4
  %v2_aabc = load i32, i32* @r5, align 4
  %v3_aabc = add i32 %v2_aabc, 4
  %v4_aabc = inttoptr i32 %v3_aabc to i8*
  store i8 %v5_a98c, i8* %v4_aabc, align 1
  %v0_aac0 = load i32, i32* %r1.global-to-local, align 4
  %v1_aac0 = trunc i32 %v0_aac0 to i8
  %v2_aac0 = load i32, i32* @r5, align 4
  %v3_aac0 = add i32 %v2_aac0, 2
  %v4_aac0 = inttoptr i32 %v3_aac0 to i8*
  store i8 %v1_aac0, i8* %v4_aac0, align 1
  %v0_aac4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aac4, label %bb92, label %bb91

bb91:                                             ; preds = %bb90
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %bb90, %bb91
  store i32 %v4_aac8, i32* %r1.global-to-local, align 4
  %v0_aacc = load i32, i32* %r2.global-to-local, align 4
  %v1_aacc = trunc i32 %v0_aacc to i8
  %v2_aacc = load i32, i32* @r5, align 4
  %v3_aacc = add i32 %v2_aacc, 3
  %v4_aacc = inttoptr i32 %v3_aacc to i8*
  store i8 %v1_aacc, i8* %v4_aacc, align 1
  store i32 %v4_a9f8, i32* %r2.global-to-local, align 4
  %v0_aad4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aad4, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_aad4 = load i32, i32* %r3.global-to-local, align 4
  %v2_aad4 = trunc i32 %v1_aad4 to i8
  %v3_aad4 = load i32, i32* @r5, align 4
  %v4_aad4 = add i32 %v3_aad4, 6
  %v5_aad4 = inttoptr i32 %v4_aad4 to i8*
  store i8 %v2_aad4, i8* %v5_aad4, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_aadc = load i32, i32* %r1.global-to-local, align 4
  %v1_aadc = trunc i32 %v0_aadc to i8
  %v2_aadc = load i32, i32* @r5, align 4
  %v3_aadc = add i32 %v2_aadc, 5
  %v4_aadc = inttoptr i32 %v3_aadc to i8*
  store i8 %v1_aadc, i8* %v4_aadc, align 1
  %v0_aae0 = load i32, i32* %r2.global-to-local, align 4
  %v1_aae0 = trunc i32 %v0_aae0 to i8
  %v2_aae0 = load i32, i32* @r5, align 4
  %v3_aae0 = add i32 %v2_aae0, 8
  %v4_aae0 = inttoptr i32 %v3_aae0 to i8*
  store i8 %v1_aae0, i8* %v4_aae0, align 1
  %v0_aae4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aae4, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_aae4 = load i32, i32* %ip.global-to-local, align 4
  %v2_aae4 = trunc i32 %v1_aae4 to i8
  %v3_aae4 = load i32, i32* @r5, align 4
  %v4_aae4 = add i32 %v3_aae4, 7
  %v5_aae4 = inttoptr i32 %v4_aae4 to i8*
  store i8 %v2_aae4, i8* %v5_aae4, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_aae8 = load i32, i32* %r3.global-to-local, align 4
  %v1_aae8 = trunc i32 %v0_aae8 to i8
  %v2_aae8 = load i32, i32* @r5, align 4
  %v3_aae8 = add i32 %v2_aae8, 9
  %v4_aae8 = inttoptr i32 %v3_aae8 to i8*
  store i8 %v1_aae8, i8* %v4_aae8, align 1
  %v0_aaec = call i32 @function_f8e8()
  store i32 %v0_aaec, i32* %r0.global-to-local, align 4
  store i32 %v1_a8a0, i32* %r1.global-to-local, align 4
  store i1 %v2_aaf8, i1* %cpsr_z.global-to-local, align 1
  %v1_aafc = sub i32 1023, %v0_aaec
  store i32 %v1_aafc, i32* %r3.global-to-local, align 4
  br i1 %v2_aaf8, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb96
  %v2_ab04 = load i32, i32* @r5, align 4
  %v3_ab04 = add i32 %v2_ab04, 16
  %v4_ab04 = inttoptr i32 %v3_ab04 to i32*
  store i32 %v1_aafc, i32* %v4_ab04, align 4
  br label %bb97

.thread19:                                        ; preds = %bb96
  %v1_ab00 = load i32, i32* %r4.global-to-local, align 4
  %v2_ab00 = add i32 %v1_ab00, 16
  %v3_ab00 = inttoptr i32 %v2_ab00 to i32*
  %v4_ab00 = load i32, i32* %v3_ab00, align 4
  store i32 %v4_ab00, i32* %r3.global-to-local, align 4
  %v2_ab08 = load i32, i32* @r5, align 4
  %v3_ab08 = add i32 %v2_ab08, 16
  %v4_ab08 = inttoptr i32 %v3_ab08 to i32*
  store i32 %v4_ab00, i32* %v4_ab08, align 4
  br label %bb97

bb97:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_ab0c, i32* %r3.global-to-local, align 4
  %v0_ab10 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab10 = add i32 %v0_ab10, 58
  store i32 %v1_ab10, i32* @r6, align 4
  %v1_ab14 = load i32, i32* @r5, align 4
  %v2_ab14 = add i32 %v1_ab14, 12
  %v3_ab14 = inttoptr i32 %v2_ab14 to i32*
  store i32 %v0_aaec, i32* %v3_ab14, align 4
  %v0_ab18 = load i32, i32* %r3.global-to-local, align 4
  %v1_ab18 = trunc i32 %v0_ab18 to i8
  %v2_ab18 = load i32, i32* @r6, align 4
  %v3_ab18 = add i32 %v2_ab18, 1
  %v4_ab18 = inttoptr i32 %v3_ab18 to i8*
  store i8 %v1_ab18, i8* %v4_ab18, align 1
  %v3_ab1c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab1c, i32* %r3.global-to-local, align 4
  store i32 %v1_a6dc, i32* %r1.global-to-local, align 4
  %v1_ab24 = add i32 %v3_ab1c, 1
  store i32 %v1_ab24, i32* @r4, align 4
  store i32 %v4_ab28, i32* %r2.global-to-local, align 4
  %v9_ab2c = icmp eq i32 %v1_ab24, %v1_a6dc
  store i1 %v9_ab2c, i1* %cpsr_z.global-to-local, align 1
  %v0_ab30 = load i32, i32* %sl.global-to-local, align 4
  %v1_ab30 = trunc i32 %v0_ab30 to i8
  %v2_ab30 = load i32, i32* @r6, align 4
  %v3_ab30 = add i32 %v2_ab30, 5
  %v4_ab30 = inttoptr i32 %v3_ab30 to i8*
  store i8 %v1_ab30, i8* %v4_ab30, align 1
  %v0_ab34 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab34 = trunc i32 %v0_ab34 to i8
  %v2_ab34 = load i32, i32* @r6, align 4
  %v3_ab34 = inttoptr i32 %v2_ab34 to i8*
  store i8 %v1_ab34, i8* %v3_ab34, align 1
  %v0_ab38 = load i32, i32* @r7, align 4
  %v1_ab38 = trunc i32 %v0_ab38 to i8
  %v2_ab38 = load i32, i32* @r6, align 4
  %v3_ab38 = add i32 %v2_ab38, 2
  %v4_ab38 = inttoptr i32 %v3_ab38 to i8*
  store i8 %v1_ab38, i8* %v4_ab38, align 1
  %v0_ab3c = load i32, i32* %fp.global-to-local, align 4
  %v1_ab3c = trunc i32 %v0_ab3c to i8
  %v2_ab3c = load i32, i32* @r6, align 4
  %v3_ab3c = add i32 %v2_ab3c, 3
  %v4_ab3c = inttoptr i32 %v3_ab3c to i8*
  store i8 %v1_ab3c, i8* %v4_ab3c, align 1
  %v0_ab40 = load i32, i32* %r8.global-to-local, align 4
  %v1_ab40 = trunc i32 %v0_ab40 to i8
  %v2_ab40 = load i32, i32* @r6, align 4
  %v3_ab40 = add i32 %v2_ab40, 4
  %v4_ab40 = inttoptr i32 %v3_ab40 to i8*
  store i8 %v1_ab40, i8* %v4_ab40, align 1
  %v0_ab44 = load i32, i32* @r4, align 4
  store i32 %v0_ab44, i32* %stack_var_-40, align 4
  %v5_ab48 = icmp slt i32 %v1_ab24, %v1_a6dc
  br i1 %v5_ab48, label %dec_label_pc_a9ac, label %dec_label_pc_ab4c.preheader

dec_label_pc_ab4c.preheader:                      ; preds = %bb97, %dec_label_pc_a884
  %v1_ab6c = add i32 %v5_a7d4, 66
  %v1_ab70 = add i32 %v5_a7d4, 8
  %v2_ab84 = icmp eq i32 %v5_a828, -1
  %v7_ab84 = icmp eq i32 %v5_a828, -1
  %v9_ada8 = icmp eq i32 %v3_a8a4, add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1)
  %v2_ae18 = icmp eq i32 %v1_a8a0, 0
  %v2_abe0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_abf8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_ac08 = ptrtoint i32* %stack_var_-52 to i32
  %v2_ac14 = ptrtoint i32* %stack_var_-50 to i32
  %v2_ac28 = icmp eq i32 %v1_a7f4, 0
  br label %dec_label_pc_ab4c

dec_label_pc_ab4c:                                ; preds = %dec_label_pc_ab4c.preheader, %dec_label_pc_ae54
  store i32 %v1_a6dc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_a89c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_a89c, label %dec_label_pc_ae54, label %dec_label_pc_ab60

dec_label_pc_ab60:                                ; preds = %dec_label_pc_ab4c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_a7d4, i32* %r1.global-to-local, align 4
  store i32 %v1_ab6c, i32* @fp, align 4
  store i32 %v1_ab70, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_ad04

dec_label_pc_ab80:                                ; preds = %dec_label_pc_ad04
  store i32 %v5_a828, i32* %r2.global-to-local, align 4
  store i1 %v7_ab84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ab84, label %dec_label_pc_ad98, label %dec_label_pc_ab8c

dec_label_pc_ab8c:                                ; preds = %dec_label_pc_ad30, %dec_label_pc_ab80
  store i32 %v3_a8a4, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_ada8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ada8, label %dec_label_pc_adb4, label %dec_label_pc_aba0

dec_label_pc_aba0:                                ; preds = %dec_label_pc_ad98.dec_label_pc_aba0_crit_edge, %dec_label_pc_ab8c
  %v1_aba4 = phi i32 [ %v1_aba4.pre, %dec_label_pc_ad98.dec_label_pc_aba0_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), %dec_label_pc_ab8c ]
  store i32 %v3_a8a8, i32* %r1.global-to-local, align 4
  %v9_aba4 = icmp eq i32 %v3_a8a8, %v1_aba4
  store i1 %v9_aba4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aba4, label %dec_label_pc_adec, label %dec_label_pc_abac

dec_label_pc_abac:                                ; preds = %dec_label_pc_adb4.dec_label_pc_abac_crit_edge, %dec_label_pc_aba0
  %v1_abb0 = phi i32 [ %v1_abb0.pre, %dec_label_pc_adb4.dec_label_pc_abac_crit_edge ], [ %v1_aba4, %dec_label_pc_aba0 ]
  store i32 %v3_a8ac, i32* %r2.global-to-local, align 4
  %v9_abb0 = icmp eq i32 %v3_a8ac, %v1_abb0
  store i1 %v9_abb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_abb0, label %dec_label_pc_ae08, label %dec_label_pc_abb8

dec_label_pc_abb8:                                ; preds = %dec_label_pc_adec, %dec_label_pc_abac
  store i32 %v1_a8a0, i32* %r3.global-to-local, align 4
  store i1 %v2_ae18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae18, label %dec_label_pc_ae2c, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_abb8
  %v1_abc0 = load i32, i32* @r5, align 4
  %v2_abc0 = add i32 %v1_abc0, 16
  %v3_abc0 = inttoptr i32 %v2_abc0 to i32*
  %v4_abc0 = load i32, i32* %v3_abc0, align 4
  store i32 %v4_abc0, i32* %r3.global-to-local, align 4
  %v2_abc4 = load i32, i32* @r6, align 4
  %v3_abc4 = add i32 %v2_abc4, 16
  %v4_abc4 = inttoptr i32 %v3_abc4 to i32*
  store i32 %v4_abc0, i32* %v4_abc4, align 4
  br label %dec_label_pc_abcc

dec_label_pc_abcc:                                ; preds = %bb102, %.thread20, %dec_label_pc_ae2c
  %v0_abcc = call i32 @function_f8e8()
  store i32 %v0_abcc, i32* %r0.global-to-local, align 4
  store i32 %v0_abcc, i32* %stack_var_-44, align 4
  %v0_abd4 = call i32 @function_f8e8()
  store i32 %v0_abd4, i32* %r0.global-to-local, align 4
  store i32 %v0_abd4, i32* %stack_var_-48, align 4
  %v0_abdc = call i32 @function_f8e8()
  store i32 %v2_abe0, i32* %r1.global-to-local, align 4
  store i32 %v0_abdc, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_abec = load i32, i32* @r8, align 4
  store i32 %v0_abec, i32* %r0.global-to-local, align 4
  %v3_abf0 = call i32 @function_12cd8(i32 %v0_abec, i32 %v2_abe0, i32 4)
  %v0_abf4 = load i32, i32* @r8, align 4
  %v1_abf4 = add i32 %v0_abf4, 6
  store i32 %v1_abf4, i32* %r0.global-to-local, align 4
  store i32 %v2_abf8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_ac00 = call i32 @function_12cd8(i32 %v1_abf4, i32 %v2_abf8, i32 4)
  %v0_ac04 = load i32, i32* @r8, align 4
  %v1_ac04 = add i32 %v0_ac04, 4
  store i32 %v1_ac04, i32* %r0.global-to-local, align 4
  store i32 %v2_ac08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ac10 = call i32 @function_12cd8(i32 %v1_ac04, i32 %v2_ac08, i32 2)
  store i32 %v2_ac14, i32* %r1.global-to-local, align 4
  %v0_ac18 = load i32, i32* @r8, align 4
  %v1_ac18 = add i32 %v0_ac18, 10
  store i32 %v1_ac18, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ac20 = call i32 @function_12cd8(i32 %v1_ac18, i32 %v2_ac14, i32 2)
  store i32 %v3_ac20, i32* %r0.global-to-local, align 4
  store i32 %v1_a7f4, i32* %r1.global-to-local, align 4
  store i1 %v2_ac28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac28, label %dec_label_pc_ac30, label %dec_label_pc_ae38

dec_label_pc_ac30:                                ; preds = %dec_label_pc_abcc, %dec_label_pc_ae38
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ac34 = load i32, i32* @sl, align 4
  %v1_ac34 = trunc i32 %v0_ac34 to i8
  %v2_ac34 = load i32, i32* @r5, align 4
  %v3_ac34 = add i32 %v2_ac34, 10
  %v4_ac34 = inttoptr i32 %v3_ac34 to i8*
  store i8 %v1_ac34, i8* %v4_ac34, align 1
  %v0_ac38 = load i32, i32* @sl, align 4
  %v1_ac38 = trunc i32 %v0_ac38 to i8
  %v2_ac38 = load i32, i32* @r5, align 4
  %v3_ac38 = add i32 %v2_ac38, 11
  %v4_ac38 = inttoptr i32 %v3_ac38 to i8*
  store i8 %v1_ac38, i8* %v4_ac38, align 1
  %v0_ac3c = load i32, i32* @r5, align 4
  store i32 %v0_ac3c, i32* @r0, align 4
  %v2_ac40 = call i32 @function_e4b8(i32 %v0_ac3c, i32 20)
  %v3_ac40 = trunc i32 %v2_ac40 to i8
  %v4_ac44 = sdiv i32 %v2_ac40, 256
  store i32 %v4_ac44, i32* %r3.global-to-local, align 4
  %v1_ac48 = trunc i32 %v4_ac44 to i8
  %v2_ac48 = load i32, i32* @r5, align 4
  %v3_ac48 = add i32 %v2_ac48, 11
  %v4_ac48 = inttoptr i32 %v3_ac48 to i8*
  store i8 %v1_ac48, i8* %v4_ac48, align 1
  %v3_ac4c = load i32, i32* @r5, align 4
  %v4_ac4c = add i32 %v3_ac4c, 10
  %v5_ac4c = inttoptr i32 %v4_ac4c to i8*
  store i8 %v3_ac40, i8* %v5_ac4c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ac54 = load i32, i32* @sl, align 4
  %v1_ac54 = trunc i32 %v0_ac54 to i8
  %v2_ac54 = load i32, i32* @r6, align 4
  %v3_ac54 = add i32 %v2_ac54, 10
  %v4_ac54 = inttoptr i32 %v3_ac54 to i8*
  store i8 %v1_ac54, i8* %v4_ac54, align 1
  %v0_ac58 = load i32, i32* @sl, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i8
  %v2_ac58 = load i32, i32* @r6, align 4
  %v3_ac58 = add i32 %v2_ac58, 11
  %v4_ac58 = inttoptr i32 %v3_ac58 to i8*
  store i8 %v1_ac58, i8* %v4_ac58, align 1
  %v0_ac5c = load i32, i32* @r6, align 4
  store i32 %v0_ac5c, i32* @r0, align 4
  %v2_ac60 = call i32 @function_e4b8(i32 %v0_ac5c, i32 20)
  %v3_ac60 = trunc i32 %v2_ac60 to i8
  store i32 %v2_ac60, i32* %r0.global-to-local, align 4
  %v4_ac64 = sdiv i32 %v2_ac60, 256
  store i32 %v4_ac64, i32* %r3.global-to-local, align 4
  %v3_ac68 = load i32, i32* @r6, align 4
  %v4_ac68 = add i32 %v3_ac68, 10
  %v5_ac68 = inttoptr i32 %v4_ac68 to i8*
  store i8 %v3_ac60, i8* %v5_ac68, align 1
  %v0_ac6c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac6c = trunc i32 %v0_ac6c to i8
  %v2_ac6c = load i32, i32* @r6, align 4
  %v3_ac6c = add i32 %v2_ac6c, 11
  %v4_ac6c = inttoptr i32 %v3_ac6c to i8*
  store i8 %v1_ac6c, i8* %v4_ac6c, align 1
  %v0_ac70 = load i32, i32* @r7, align 4
  %v1_ac70 = add i32 %v0_ac70, 4
  %v2_ac70 = inttoptr i32 %v1_ac70 to i8*
  %v3_ac70 = load i8, i8* %v2_ac70, align 1
  %v4_ac70 = zext i8 %v3_ac70 to i32
  store i32 %v4_ac70, i32* %r3.global-to-local, align 4
  %v1_ac74 = add i32 %v0_ac70, 5
  %v2_ac74 = inttoptr i32 %v1_ac74 to i8*
  %v3_ac74 = load i8, i8* %v2_ac74, align 1
  %v4_ac74 = zext i8 %v3_ac74 to i32
  store i32 %v0_ac70, i32* @r1, align 4
  %v4_ac7c = mul nuw nsw i32 %v4_ac74, 256
  %v5_ac7c = or i32 %v4_ac7c, %v4_ac70
  store i32 %v5_ac7c, i32* %r2.global-to-local, align 4
  %v0_ac80 = load i32, i32* @sl, align 4
  %v1_ac80 = trunc i32 %v0_ac80 to i8
  %v3_ac80 = add i32 %v0_ac70, 6
  %v4_ac80 = inttoptr i32 %v3_ac80 to i8*
  store i8 %v1_ac80, i8* %v4_ac80, align 1
  store i32 %v1_ab70, i32* %r3.global-to-local, align 4
  %v0_ac88 = load i32, i32* @sl, align 4
  %v1_ac88 = trunc i32 %v0_ac88 to i8
  %v2_ac88 = load i32, i32* @r7, align 4
  %v3_ac88 = add i32 %v2_ac88, 7
  %v4_ac88 = inttoptr i32 %v3_ac88 to i8*
  store i8 %v1_ac88, i8* %v4_ac88, align 1
  %v0_ac8c = load i32, i32* @r6, align 4
  store i32 %v0_ac8c, i32* %r0.global-to-local, align 4
  %v4_ac90 = call i32 @function_e514(i32 %v0_ac8c, i32 %v0_ac70, i32 %v5_ac7c, i32 %v1_ab70)
  %v5_ac90 = trunc i32 %v4_ac90 to i8
  store i32 %v4_ac90, i32* %r0.global-to-local, align 4
  %v3_ac94 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ac94, i32* %r3.global-to-local, align 4
  %v3_ac98 = mul i32 %v3_ac94, 32
  store i32 %v3_ac98, i32* %r2.global-to-local, align 4
  %v0_ac9c = load i32, i32* @r5, align 4
  %v1_ac9c = add i32 %v0_ac9c, 16
  %v2_ac9c = inttoptr i32 %v1_ac9c to i32*
  %v3_ac9c = load i32, i32* %v2_ac9c, align 4
  store i32 %v3_ac9c, i32* %r1.global-to-local, align 4
  %v5_aca0 = mul i32 %v3_ac94, 24
  store i32 %v5_aca0, i32* %r2.global-to-local, align 4
  %v4_aca435 = udiv i32 %v4_ac90, 256
  %v1_aca8 = trunc i32 %v4_aca435 to i8
  %v2_aca8 = load i32, i32* @r7, align 4
  %v3_aca8 = add i32 %v2_aca8, 7
  %v4_aca8 = inttoptr i32 %v3_aca8 to i8*
  store i8 %v1_aca8, i8* %v4_aca8, align 1
  %v0_acac = load i32, i32* %r2.global-to-local, align 4
  %v1_acac = load i32, i32* @sb, align 4
  %v2_acac = add i32 %v1_acac, %v0_acac
  store i32 %v2_acac, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_acb4 = load i32, i32* @r7, align 4
  %v4_acb4 = add i32 %v3_acb4, 6
  %v5_acb4 = inttoptr i32 %v4_acb4 to i8*
  store i8 %v5_ac90, i8* %v5_acb4, align 1
  %v0_acb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_acb8 = load i32, i32* %lr.global-to-local, align 4
  %v2_acb8 = add i32 %v1_acb8, 4
  %v3_acb8 = inttoptr i32 %v2_acb8 to i32*
  store i32 %v0_acb8, i32* %v3_acb8, align 4
  %v0_acbc = load i32, i32* %r3.global-to-local, align 4
  %v1_acbc = trunc i32 %v0_acbc to i8
  %v2_acbc = load i32, i32* %r2.global-to-local, align 4
  %v3_acbc = load i32, i32* @sb, align 4
  %v4_acbc = add i32 %v3_acbc, %v2_acbc
  %v5_acbc = inttoptr i32 %v4_acbc to i8*
  store i8 %v1_acbc, i8* %v5_acbc, align 1
  %v0_acc0 = load i32, i32* @sl, align 4
  %v1_acc0 = trunc i32 %v0_acc0 to i8
  %v2_acc0 = load i32, i32* %lr.global-to-local, align 4
  %v3_acc0 = add i32 %v2_acc0, 2
  %v4_acc0 = inttoptr i32 %v3_acc0 to i8*
  store i8 %v1_acc0, i8* %v4_acc0, align 1
  %v0_acc4 = load i32, i32* @sl, align 4
  %v1_acc4 = trunc i32 %v0_acc4 to i8
  %v2_acc4 = load i32, i32* %lr.global-to-local, align 4
  %v3_acc4 = add i32 %v2_acc4, 1
  %v4_acc4 = inttoptr i32 %v3_acc4 to i8*
  store i8 %v1_acc4, i8* %v4_acc4, align 1
  %v0_acc8 = load i32, i32* @sl, align 4
  %v1_acc8 = trunc i32 %v0_acc8 to i8
  %v2_acc8 = load i32, i32* %lr.global-to-local, align 4
  %v3_acc8 = add i32 %v2_acc8, 3
  %v4_acc8 = inttoptr i32 %v3_acc8 to i8*
  store i8 %v1_acc8, i8* %v4_acc8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r5, align 4
  store i32 %v0_acd4, i32* %r1.global-to-local, align 4
  store i32 %v3_a84c, i32* %r0.global-to-local, align 4
  %v0_acdc = load i32, i32* @fp, align 4
  store i32 %v0_acdc, i32* %r2.global-to-local, align 4
  %v0_ace0 = load i32, i32* %lr.global-to-local, align 4
  %v6_ace8 = inttoptr i32 %v0_acd4 to i32*
  %v7_ace8 = call i32 @function_13e78(i32 %v3_a84c, i32* %v6_ace8, i32 %v0_acdc, i32 16384, i32 %v0_ace0, i32 16)
  %v3_acec = load i32, i32* %stack_var_-40, align 4
  %v1_acf0 = add i32 %v3_acec, 1
  store i32 %v1_acf0, i32* %r0.global-to-local, align 4
  store i32 %v1_a6dc, i32* %r3.global-to-local, align 4
  %v9_acf8 = icmp eq i32 %v1_acf0, %v1_a6dc
  store i1 %v9_acf8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_acf0, i32* %stack_var_-40, align 4
  %v6_ad00 = icmp slt i32 %v1_acf0, %v1_a6dc
  br i1 %v6_ad00, label %dec_label_pc_ad04, label %dec_label_pc_ae54

dec_label_pc_ad04:                                ; preds = %dec_label_pc_ac30, %dec_label_pc_ab60
  %v1_ad18 = phi i32 [ %v1_acf0, %dec_label_pc_ac30 ], [ 0, %dec_label_pc_ab60 ]
  %v5_ad08 = mul i32 %v1_ad18, 24
  %v1_ad0c = load i32, i32* @sb, align 4
  %v2_ad0c = add i32 %v1_ad0c, %v5_ad08
  store i32 %v2_ad0c, i32* %r3.global-to-local, align 4
  store i32 %v2_a708, i32* %r1.global-to-local, align 4
  %v1_ad14 = add i32 %v2_ad0c, 20
  %v2_ad14 = inttoptr i32 %v1_ad14 to i8*
  %v3_ad14 = load i8, i8* %v2_ad14, align 1
  %v4_ad14 = zext i8 %v3_ad14 to i32
  store i32 %v4_ad14, i32* %r2.global-to-local, align 4
  %v4_ad18 = mul i32 %v1_ad18, 4
  %v5_ad18 = add i32 %v4_ad18, %v2_a708
  %v6_ad18 = inttoptr i32 %v5_ad18 to i32*
  %v7_ad18 = load i32, i32* %v6_ad18, align 4
  store i32 %v7_ad18, i32* @r5, align 4
  %v2_ad1c = icmp ugt i8 %v3_ad14, 30
  %v7_ad1c = icmp eq i8 %v3_ad14, 31
  store i1 %v7_ad1c, i1* %cpsr_z.global-to-local, align 1
  %v1_ad20 = add i32 %v7_ad18, 24
  store i32 %v1_ad20, i32* @r8, align 4
  %v1_ad24 = add i32 %v7_ad18, 38
  store i32 %v1_ad24, i32* @r6, align 4
  %v1_ad28 = add i32 %v7_ad18, 58
  store i32 %v1_ad28, i32* @r7, align 4
  %v2_ad2c = xor i1 %v7_ad1c, true
  %v3_ad2c = and i1 %v2_ad1c, %v2_ad2c
  br i1 %v3_ad2c, label %dec_label_pc_ab80, label %dec_label_pc_ad30

dec_label_pc_ad30:                                ; preds = %dec_label_pc_ad04
  %v1_ad30 = add i32 %v2_ad0c, 16
  %v2_ad30 = inttoptr i32 %v1_ad30 to i32*
  %v3_ad30 = load i32, i32* %v2_ad30, align 4
  store i32 %v3_ad30, i32* %r4.global-to-local, align 4
  %v0_ad34 = call i32 @function_f8e8()
  store i32 %v0_ad34, i32* %r0.global-to-local, align 4
  %v3_ad38 = load i32, i32* %stack_var_-40, align 4
  %v5_ad40 = mul i32 %v3_ad38, 24
  %v0_ad44 = load i32, i32* %r4.global-to-local, align 4
  %v1_ad48 = load i32, i32* @sb, align 4
  %v2_ad48 = add i32 %v1_ad48, %v5_ad40
  store i32 %v2_ad48, i32* %r1.global-to-local, align 4
  %v1_ad4c = and i32 %v0_ad44, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_ad4c, i32* %r3.global-to-local, align 4
  %v1_ad44 = udiv i32 %v0_ad44, 256
  %v3_ad50 = and i32 %v1_ad44, 65280
  store i32 %v3_ad50, i32* %r2.global-to-local, align 4
  %v3_ad54 = mul i32 %v0_ad44, 16777216
  store i32 %v3_ad54, i32* %ip.global-to-local, align 4
  %v1_ad58 = add i32 %v2_ad48, 20
  %v2_ad58 = inttoptr i32 %v1_ad58 to i8*
  %v3_ad58 = load i8, i8* %v2_ad58, align 1
  %v4_ad58 = zext i8 %v3_ad58 to i32
  store i32 %v4_ad58, i32* %lr.global-to-local, align 4
  %v4_ad5c = mul i32 %v1_ad4c, 256
  %v5_ad5c = or i32 %v4_ad5c, %v3_ad54
  store i32 %v5_ad5c, i32* %ip.global-to-local, align 4
  %v4_ad60 = udiv i32 %v0_ad44, 16777216
  %v5_ad60 = or i32 %v3_ad50, %v4_ad60
  %v2_ad64 = or i32 %v5_ad60, %v5_ad5c
  %v7_ad68 = lshr i32 %v0_ad34, %v4_ad58
  %v8_ad68 = add i32 %v7_ad68, %v2_ad64
  %v3_ad74 = mul i32 %v8_ad68, 16777216
  %v1_ad78 = and i32 %v8_ad68, 65280
  store i32 %v1_ad78, i32* %r0.global-to-local, align 4
  store i32 %v5_a828, i32* %r2.global-to-local, align 4
  %v4_ad84 = mul nuw nsw i32 %v1_ad78, 256
  %v5_ad84 = or i32 %v4_ad84, %v3_ad74
  store i32 %v5_ad84, i32* %r1.global-to-local, align 4
  %v2_ad88 = call i32 @llvm.bswap.i32(i32 %v8_ad68)
  store i32 %v2_ad88, i32* %r3.global-to-local, align 4
  store i1 %v7_ab84, i1* %cpsr_z.global-to-local, align 1
  %v1_ad90 = load i32, i32* @r5, align 4
  %v2_ad90 = add i32 %v1_ad90, 16
  %v3_ad90 = inttoptr i32 %v2_ad90 to i32*
  store i32 %v2_ad88, i32* %v3_ad90, align 4
  br i1 %v2_ab84, label %dec_label_pc_ad98, label %dec_label_pc_ab8c

dec_label_pc_ad98:                                ; preds = %dec_label_pc_ad30, %dec_label_pc_ab80
  %v0_ad98 = call i32 @function_f8e8()
  store i32 %v0_ad98, i32* %r0.global-to-local, align 4
  store i32 %v3_a8a4, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_ada8, i1* %cpsr_z.global-to-local, align 1
  %v1_adac = load i32, i32* @r5, align 4
  %v2_adac = add i32 %v1_adac, 12
  %v3_adac = inttoptr i32 %v2_adac to i32*
  store i32 %v0_ad98, i32* %v3_adac, align 4
  br i1 %v9_ada8, label %dec_label_pc_adb4, label %dec_label_pc_ad98.dec_label_pc_aba0_crit_edge

dec_label_pc_ad98.dec_label_pc_aba0_crit_edge:    ; preds = %dec_label_pc_ad98
  %v1_aba4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aba0

dec_label_pc_adb4:                                ; preds = %dec_label_pc_ad98, %dec_label_pc_ab8c
  %v0_adb4 = call i32 @function_f8e8()
  %v3_adbc = urem i32 %v0_adb4, 65536
  store i32 %v3_adbc, i32* %r0.global-to-local, align 4
  %v1_adc4 = sub nsw i32 999, %v3_adbc
  store i32 %v1_adc4, i32* %r2.global-to-local, align 4
  %v3_adc8 = sdiv i32 %v1_adc4, 256
  store i32 %v3_adc8, i32* %r1.global-to-local, align 4
  %v3_adcc34 = udiv i32 %v3_adbc, 256
  store i32 %v3_adcc34, i32* %r3.global-to-local, align 4
  %v1_add0 = trunc i32 %v3_adcc34 to i8
  %v2_add0 = load i32, i32* @r5, align 4
  %v3_add0 = add i32 %v2_add0, 5
  %v4_add0 = inttoptr i32 %v3_add0 to i8*
  store i8 %v1_add0, i8* %v4_add0, align 1
  %v0_add4 = load i32, i32* %r0.global-to-local, align 4
  %v1_add4 = trunc i32 %v0_add4 to i8
  %v2_add4 = load i32, i32* @r5, align 4
  %v3_add4 = add i32 %v2_add4, 4
  %v4_add4 = inttoptr i32 %v3_add4 to i8*
  store i8 %v1_add4, i8* %v4_add4, align 1
  %v0_add8 = load i32, i32* %r1.global-to-local, align 4
  %v1_add8 = trunc i32 %v0_add8 to i8
  %v2_add8 = load i32, i32* @r6, align 4
  %v3_add8 = add i32 %v2_add8, 5
  %v4_add8 = inttoptr i32 %v3_add8 to i8*
  store i8 %v1_add8, i8* %v4_add8, align 1
  store i32 %v3_a8a8, i32* %r1.global-to-local, align 4
  %v1_ade0 = load i32, i32* @r4, align 4
  %v9_ade0 = icmp eq i32 %v3_a8a8, %v1_ade0
  store i1 %v9_ade0, i1* %cpsr_z.global-to-local, align 1
  %v0_ade4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ade4 = trunc i32 %v0_ade4 to i8
  %v2_ade4 = load i32, i32* @r6, align 4
  %v3_ade4 = add i32 %v2_ade4, 4
  %v4_ade4 = inttoptr i32 %v3_ade4 to i8*
  store i8 %v1_ade4, i8* %v4_ade4, align 1
  %v0_ade8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ade8, label %dec_label_pc_adec, label %dec_label_pc_adb4.dec_label_pc_abac_crit_edge

dec_label_pc_adb4.dec_label_pc_abac_crit_edge:    ; preds = %dec_label_pc_adb4
  %v1_abb0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_abac

dec_label_pc_adec:                                ; preds = %dec_label_pc_adb4, %dec_label_pc_aba0
  %v0_adec = call i32 @function_f8e8()
  %v1_adec = trunc i32 %v0_adec to i8
  store i32 %v0_adec, i32* %r0.global-to-local, align 4
  store i32 %v3_a8ac, i32* %r2.global-to-local, align 4
  %v4_adf4 = sdiv i32 %v0_adec, 256
  store i32 %v4_adf4, i32* %r3.global-to-local, align 4
  %v1_adf8 = load i32, i32* @r4, align 4
  %v9_adf8 = icmp eq i32 %v3_a8ac, %v1_adf8
  store i1 %v9_adf8, i1* %cpsr_z.global-to-local, align 1
  %v3_adfc = load i32, i32* @r5, align 4
  %v4_adfc = add i32 %v3_adfc, 58
  %v5_adfc = inttoptr i32 %v4_adfc to i8*
  store i8 %v1_adec, i8* %v5_adfc, align 1
  %v0_ae00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae00 = trunc i32 %v0_ae00 to i8
  %v2_ae00 = load i32, i32* @r7, align 4
  %v3_ae00 = add i32 %v2_ae00, 1
  %v4_ae00 = inttoptr i32 %v3_ae00 to i8*
  store i8 %v1_ae00, i8* %v4_ae00, align 1
  %v0_ae04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae04, label %dec_label_pc_ae08, label %dec_label_pc_abb8

dec_label_pc_ae08:                                ; preds = %dec_label_pc_adec, %dec_label_pc_abac
  %v0_ae08 = call i32 @function_f8e8()
  %v1_ae08 = trunc i32 %v0_ae08 to i8
  store i32 %v0_ae08, i32* %r0.global-to-local, align 4
  %v4_ae0c36 = udiv i32 %v0_ae08, 256
  %v1_ae10 = trunc i32 %v4_ae0c36 to i8
  %v2_ae10 = load i32, i32* @r7, align 4
  %v3_ae10 = add i32 %v2_ae10, 3
  %v4_ae10 = inttoptr i32 %v3_ae10 to i8*
  store i8 %v1_ae10, i8* %v4_ae10, align 1
  store i32 %v1_a8a0, i32* %r3.global-to-local, align 4
  store i1 %v2_ae18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae18, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_ae08
  %v1_ae1c = load i32, i32* @r5, align 4
  %v2_ae1c = add i32 %v1_ae1c, 16
  %v3_ae1c = inttoptr i32 %v2_ae1c to i32*
  %v4_ae1c = load i32, i32* %v3_ae1c, align 4
  store i32 %v4_ae1c, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_ae08, %bb100
  %v3_ae20 = load i32, i32* @r7, align 4
  %v4_ae20 = add i32 %v3_ae20, 2
  %v5_ae20 = inttoptr i32 %v4_ae20 to i8*
  store i8 %v1_ae08, i8* %v5_ae20, align 1
  %v0_ae24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae24, label %dec_label_pc_ae2c, label %bb102

bb102:                                            ; preds = %bb101
  %v1_ae24 = load i32, i32* %r3.global-to-local, align 4
  %v2_ae24 = load i32, i32* @r6, align 4
  %v3_ae24 = add i32 %v2_ae24, 16
  %v4_ae24 = inttoptr i32 %v3_ae24 to i32*
  store i32 %v1_ae24, i32* %v4_ae24, align 4
  br label %dec_label_pc_abcc

dec_label_pc_ae2c:                                ; preds = %dec_label_pc_abb8, %bb101
  %v0_ae2c = call i32 @function_f8e8()
  store i32 %v0_ae2c, i32* %r0.global-to-local, align 4
  %v1_ae30 = load i32, i32* @r6, align 4
  %v2_ae30 = add i32 %v1_ae30, 16
  %v3_ae30 = inttoptr i32 %v2_ae30 to i32*
  store i32 %v0_ae2c, i32* %v3_ae30, align 4
  br label %dec_label_pc_abcc

dec_label_pc_ae38:                                ; preds = %dec_label_pc_abcc
  %v0_ae38 = load i32, i32* @r7, align 4
  %v1_ae38 = add i32 %v0_ae38, 8
  store i32 %v1_ae38, i32* @r4, align 4
  store i32 %v1_ae38, i32* %r0.global-to-local, align 4
  store i32 %v5_a7d4, i32* %r1.global-to-local, align 4
  %v2_ae44 = call i32 @function_f99c(i32 %v1_ae38, i32 %v5_a7d4)
  store i32 %v2_ae44, i32* %r0.global-to-local, align 4
  store i32 %v5_a7d4, i32* %r2.global-to-local, align 4
  %v0_ae4c = load i32, i32* @sl, align 4
  %v1_ae4c = trunc i32 %v0_ae4c to i8
  %v2_ae4c = load i32, i32* @r4, align 4
  %v4_ae4c = add i32 %v2_ae4c, %v5_a7d4
  %v5_ae4c = inttoptr i32 %v4_ae4c to i8*
  store i8 %v1_ae4c, i8* %v5_ae4c, align 1
  br label %dec_label_pc_ac30

dec_label_pc_ae54:                                ; preds = %dec_label_pc_ac30, %dec_label_pc_ab4c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ae58 = call i32 @function_138c0(i32* null)
  store i32 %v2_ae58, i32* %r0.global-to-local, align 4
  store i32 %v2_a838, i32* %r1.global-to-local, align 4
  %v9_ae60 = icmp eq i32 %v2_a838, %v2_ae58
  store i1 %v9_ae60, i1* %cpsr_z.global-to-local, align 1
  %v6_ae64 = icmp slt i32 %v2_a838, %v2_ae58
  br i1 %v6_ae64, label %dec_label_pc_ae68, label %dec_label_pc_ab4c

dec_label_pc_ae68:                                ; preds = %dec_label_pc_ae54, %dec_label_pc_a6d8, %dec_label_pc_ae70
  %v29_ae6c = phi i32 [ %v3_a84c, %dec_label_pc_a6d8 ], [ %v1_ae74, %dec_label_pc_ae70 ], [ %v2_ae58, %dec_label_pc_ae54 ]
  store i32 %v3_a6d8, i32* %r4.global-to-local, align 4
  store i32 %v15_a6d8, i32* %r8.global-to-local, align 4
  store i32 %v21_a6d8, i32* %sl.global-to-local, align 4
  store i32 %v24_a6d8, i32* %fp.global-to-local, align 4
  ret i32 %v29_ae6c

dec_label_pc_ae70:                                ; preds = %dec_label_pc_a85c
  store i32 %v3_a84c, i32* %r0.global-to-local, align 4
  %v1_ae74 = call i32 @function_135f0(i32 %v3_a84c)
  store i32 %v1_ae74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ae68

; uselistorder directives
  uselistorder i32 %v1_ae74, { 1, 0 }
  uselistorder i32 %v0_ae08, { 0, 2, 1 }
  uselistorder i32 %v0_adec, { 0, 2, 1 }
  uselistorder i32 %v3_adbc, { 0, 2, 1 }
  uselistorder i32 %v2_ad88, { 1, 0 }
  uselistorder i32 %v8_ad68, { 1, 2, 0 }
  uselistorder i32 %v3_ad54, { 1, 0 }
  uselistorder i32 %v0_ad44, { 1, 0, 2, 3 }
  uselistorder i32 %v7_ad18, { 2, 1, 0, 3 }
  uselistorder i32 %v1_acf0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_ac94, { 1, 0, 2 }
  uselistorder i32 %v4_ac90, { 0, 2, 1 }
  uselistorder i32 %v0_ac70, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_ac60, { 0, 2, 1 }
  uselistorder i32 %v4_ac44, { 1, 0 }
  uselistorder i1 %v2_ae18, { 2, 3, 1, 0 }
  uselistorder i1 %v9_ada8, { 2, 3, 1, 0 }
  uselistorder i1 %v7_ab84, { 2, 1, 0 }
  uselistorder i32 %v1_ab70, { 1, 0, 2 }
  uselistorder i32 %v0_aaec, { 1, 0, 2 }
  uselistorder i32 %v3_a97c, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0, 2 }
  uselistorder i32 %v1_a8f8, { 1, 0 }
  uselistorder i32 %v1_a8f0, { 2, 1, 0 }
  uselistorder i32 %v1_a8ec, { 1, 0 }
  uselistorder i32 %v1_a8e8, { 1, 0 }
  uselistorder i32 %v1_a8dc, { 1, 0 }
  uselistorder i32 %v3_a8d4, { 2, 0, 1 }
  uselistorder i32 %v3_a8a4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a8a0, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_a89c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a894, { 0, 2, 1 }
  uselistorder i32 %v0_a890, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a87c, { 1, 0 }
  uselistorder i1 %v7_a850, { 1, 0 }
  uselistorder i32 %v3_a84c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_a838, { 2, 1, 0 }
  uselistorder i32 %v5_a828, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_a7f4, { 1, 2, 0 }
  uselistorder i32 %v5_a7d4, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_a788, { 1, 0 }
  uselistorder i8 %v5_a778, { 1, 0 }
  uselistorder i32 %v5_a75c, { 1, 0 }
  uselistorder i32 %v6_a720, { 1, 0 }
  uselistorder i32 %v2_a708, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a6dc, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 19, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 15, 14, 16, 18, 17, 19, 21, 20, 22, 23, 24, 25, 27, 26, 31, 28, 29, 30, 34, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_ae68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ae2c, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_ac30, { 1, 0 }
  uselistorder label %dec_label_pc_abcc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ab4c, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ae80(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ae80:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_ae80 = load i32, i32* @r4, align 4
  %v15_ae80 = load i32, i32* @r8, align 4
  %v21_ae80 = load i32, i32* @sl, align 4
  %v24_ae80 = load i32, i32* @fp, align 4
  %v1_ae84 = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_ae84, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_aea0 = urem i32 %arg4, 256
  store i32 %v1_aea0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_aeb0 = call i32 @function_141c8(i32 %v1_ae84, i32 4)
  %v0_aeb4 = load i32, i32* @r5, align 4
  store i32 %v0_aeb4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_aec0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_aec0, i32* %r3.global-to-local, align 4
  %v0_aec4 = load i32, i32* @r4, align 4
  store i32 %v0_aec4, i32* %r0.global-to-local, align 4
  %v5_aec8 = inttoptr i32 %v0_aeb4 to i32*
  %v6_aec8 = call i32 @function_a054(i32 %v0_aec4, i32* %v5_aec8, i32 2, i32 %v0_aec0)
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_aee0 = load i32, i32* @r5, align 4
  store i32 %v0_aee0, i32* %r1.global-to-local, align 4
  %v0_aee4 = load i32, i32* @r4, align 4
  store i32 %v0_aee4, i32* %r0.global-to-local, align 4
  %v5_aee8 = trunc i32 %v6_aec8 to i8
  %v6_aeec = inttoptr i32 %v0_aee0 to i32*
  %v7_aeec = call i32 @function_a054(i32 %v0_aee4, i32* %v6_aeec, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_aef0 = load i32, i32* @r5, align 4
  store i32 %v0_aef0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_aeec, i32* @r7, align 4
  %v0_af00 = load i32, i32* @r4, align 4
  store i32 %v0_af00, i32* %r0.global-to-local, align 4
  %v4_af04 = inttoptr i32 %v0_aef0 to i32*
  %v5_af04 = call i32 @function_a054(i32 %v0_af00, i32* %v4_af04, i32 4, i32 64)
  %v0_af10 = load i32, i32* @r5, align 4
  store i32 %v0_af10, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_af1c = load i32, i32* @r4, align 4
  store i32 %v0_af1c, i32* %r0.global-to-local, align 4
  %v5_af20 = trunc i32 %v5_af04 to i8
  %v6_af24 = inttoptr i32 %v0_af10 to i32*
  %v7_af24 = call i32 @function_a054(i32 %v0_af1c, i32* %v6_af24, i32 5, i32 1)
  %v1_af30 = urem i32 %v7_af24, 256
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_af3c = load i32, i32* @r5, align 4
  store i32 %v0_af3c, i32* %r1.global-to-local, align 4
  %v0_af40 = load i32, i32* @r4, align 4
  store i32 %v0_af40, i32* %r0.global-to-local, align 4
  %v5_af48 = inttoptr i32 %v0_af3c to i32*
  %v6_af48 = call i32 @function_a054(i32 %v0_af40, i32* %v5_af48, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_af54 = load i32, i32* @r5, align 4
  store i32 %v0_af54, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_af60 = load i32, i32* @r4, align 4
  store i32 %v0_af60, i32* %r0.global-to-local, align 4
  %v5_af64 = inttoptr i32 %v0_af54 to i32*
  %v6_af64 = call i32 @function_a054(i32 %v0_af60, i32* %v5_af64, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_af68 = load i32, i32* @r5, align 4
  store i32 %v0_af68, i32* %r1.global-to-local, align 4
  %v0_af6c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_af6c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_af64, i32* @sl, align 4
  %v0_af78 = load i32, i32* @r4, align 4
  store i32 %v0_af78, i32* %r0.global-to-local, align 4
  %v4_af7c = inttoptr i32 %v0_af68 to i32*
  %v5_af7c = call i32 @function_a054(i32 %v0_af78, i32* %v4_af7c, i32 %v0_af6c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_af8c = load i32, i32* @r5, align 4
  store i32 %v0_af8c, i32* %r1.global-to-local, align 4
  %v0_af90 = load i32, i32* @r4, align 4
  store i32 %v0_af90, i32* %r0.global-to-local, align 4
  %v4_af94 = inttoptr i32 %v0_af8c to i32*
  %v5_af94 = call i32 @function_a054(i32 %v0_af90, i32* %v4_af94, i32 1, i32 1)
  %v1_af9c = urem i32 %v5_af94, 256
  %v0_afa0 = load i32, i32* @r5, align 4
  store i32 %v0_afa0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_afa8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_afa8, i32* %r3.global-to-local, align 4
  %v0_afac = load i32, i32* @r4, align 4
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v5_afb4 = inttoptr i32 %v0_afa0 to i32*
  %v6_afb4 = call i32 @function_a054(i32 %v0_afac, i32* %v5_afb4, i32 18, i32 %v0_afa8)
  %v0_afbc = load i32, i32* @r5, align 4
  store i32 %v0_afbc, i32* %r1.global-to-local, align 4
  %v2_afc0 = load i32, i32* @global_var_1f238.84, align 4
  store i32 %v2_afc0, i32* %r3.global-to-local, align 4
  store i32 %v6_afb4, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_afcc = load i32, i32* @r4, align 4
  store i32 %v0_afcc, i32* %r0.global-to-local, align 4
  %v4_afd0 = inttoptr i32 %v0_afbc to i32*
  %v5_afd0 = call i32 @function_a054(i32 %v0_afcc, i32* %v4_afd0, i32 24, i32 %v2_afc0)
  %v0_afd8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_afd8, i32* %r0.global-to-local, align 4
  %v1_afdc = inttoptr i32 %v0_afd8 to i32*
  %v2_afdc = call i32 @function_138c0(i32* %v1_afdc)
  %v1_afe0 = load i32, i32* @r6, align 4
  %v2_afe0 = add i32 %v1_afe0, %v2_afdc
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_aff4 = call i32 @function_13edc(i32 2, i32 3, i32 6)
  store i32 %v3_aff4, i32* %r0.global-to-local, align 4
  %v7_aff8 = icmp eq i32 %v3_aff4, -1
  store i1 %v7_aff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aff8, label %dec_label_pc_b5a0, label %dec_label_pc_b004

dec_label_pc_b004:                                ; preds = %dec_label_pc_ae80
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b00c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b00c, i32* %r3.global-to-local, align 4
  %v0_b014 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b014, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b020 = call i32 @function_13eac(i32 %v3_aff4, i32 %v0_b014, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b020, i32* %r0.global-to-local, align 4
  %v7_b024 = icmp eq i32 %v6_b020, -1
  store i1 %v7_b024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b024, label %dec_label_pc_b5a8, label %dec_label_pc_b02c

dec_label_pc_b02c:                                ; preds = %dec_label_pc_b004
  %v0_b038 = load i32, i32* @sl, align 4
  %v3_b038 = mul i32 %v0_b038, 65536
  store i32 %v3_b038, i32* %sl.global-to-local, align 4
  %v0_b03c = load i32, i32* @r7, align 4
  %v2_b044 = icmp eq i32 %v1_ae84, 0
  store i1 %v2_b044, i1* %cpsr_z.global-to-local, align 1
  %v0_b048 = load i32, i32* @r8, align 4
  %v1_b048 = urem i32 %v0_b048, 256
  store i32 %v1_b048, i32* %r8.global-to-local, align 4
  %v3_b04c = urem i32 %v0_b03c, 65536
  store i32 %v3_b04c, i32* %r3.global-to-local, align 4
  %v3_b050 = urem i32 %v6_af48, 65536
  store i32 %v3_b050, i32* %r1.global-to-local, align 4
  %v3_b054 = urem i32 %v0_b038, 65536
  store i32 %v3_b054, i32* %r2.global-to-local, align 4
  %v0_b060 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b060, i32* %stack_var_-40, align 4
  br i1 %v2_b044, label %dec_label_pc_b2e0.preheader, label %dec_label_pc_b074

dec_label_pc_b074:                                ; preds = %dec_label_pc_b02c
  %v3_b07c = mul i32 %v5_af7c, 65536
  %v1_b084 = urem i32 %v6_af48, 256
  %v1_b08c = add i32 %v3_b07c, 524288
  %v1_b090 = add i32 %v3_b07c, 3407872
  %v1_b094 = urem i32 %v0_b038, 256
  %v1_b098 = add i32 %v3_b07c, 1835008
  %v0_b03c.not = or i32 %v0_b03c, -65536
  %v1_b0a0 = xor i32 %v0_b03c.not, 65535
  %v3_b0a4 = udiv i32 %v1_b098, 256
  %tmp77 = udiv i32 %v0_b03c, 256
  %v1_b0b8 = and i32 %v3_b0a4, 65280
  store i32 %v1_b0b8, i32* %r0.global-to-local, align 4
  %v3_b0dc = mul nuw nsw i32 %v1_b084, 256
  %tmp78 = udiv i32 %v6_af48, 256
  %v4_b0e4 = urem i32 %tmp78, 256
  %v5_b0e4 = or i32 %v4_b0e4, %v3_b0dc
  store i32 %v5_b0e4, i32* @lr, align 4
  %tmp79 = mul nsw i32 %v1_b0a0, 256
  %v3_b0ec = mul nuw nsw i32 %v1_b094, 256
  %sext23 = mul i32 %tmp77, 16777216
  %v4_b0f4 = sdiv i32 %sext23, 16777216
  %v4_b0bc = sdiv i32 %v1_b090, 16777216
  %tmp80 = udiv i32 %v0_b038, 256
  %v4_b0fc = urem i32 %tmp80, 256
  %v5_b0fc = or i32 %v4_b0fc, %v3_b0ec
  store i32 %v5_b0fc, i32* @r7, align 4
  %v1_b100 = and i32 %tmp79, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %v4_b104 = sdiv i32 %v1_b098, 16777216
  %v3_b108 = udiv i32 %v1_b08c, 256
  %tmp81 = udiv i32 %v1_b0a0, 256
  %v4_b10c = urem i32 %tmp81, 256
  %v5_b10c = or i32 %v4_b10c, %v1_b100
  store i32 %v5_b10c, i32* @r6, align 4
  %v3_b110 = ashr i32 %v1_b090, 31
  %v3_b114 = ashr i32 %sext23, 31
  %v1_b118 = and i32 %v3_b108, 65280
  store i32 %v1_b118, i32* @r5, align 4
  %v3_b124 = ashr i32 %v1_b098, 31
  store i32 %v3_b124, i32* %r2.global-to-local, align 4
  %v3_b12832 = udiv i32 %v1_b100, 256
  store i32 %v3_b12832, i32* %r3.global-to-local, align 4
  store i32 %v1_b084, i32* %r1.global-to-local, align 4
  %v4_b130 = udiv i32 %v1_b08c, 16777216
  %v5_b130 = or i32 %v4_b130, %v1_b118
  store i32 %v5_b130, i32* %r8.global-to-local, align 4
  %v5_b134 = trunc i32 %tmp81 to i8
  store i32 %v0_b060, i32* @r4, align 4
  %v3_b14c33 = udiv i32 %v1_b118, 256
  store i32 %v3_b14c33, i32* %sl.global-to-local, align 4
  store i32 %v1_b094, i32* %fp.global-to-local, align 4
  %v4_b1a0 = sext i8 %v5_af20 to i32
  %sext15 = mul i32 %v1_b100, 65536
  %v4_b25c = sdiv i32 %sext15, 16777216
  %v2_b28c = icmp eq i32 %v1_b048, 0
  %sext16 = mul i32 %v6_af48, 16777216
  %v4_b2a0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp78, 16777216
  %v4_b2bc = sdiv i32 %sext17, 16777216
  %v1_b1b8 = trunc i32 %v4_b0f4 to i8
  br label %dec_label_pc_b154

dec_label_pc_b154:                                ; preds = %bb92, %dec_label_pc_b074
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b160 = call i32 @function_141c8(i32 1510, i32 4)
  store i32 %v2_b160, i32* %r0.global-to-local, align 4
  store i32 %v2_aeb0, i32* %r2.global-to-local, align 4
  %v3_b168 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b168, i32* %r3.global-to-local, align 4
  %v2_b16c = load i32, i32* @r4, align 4
  %v5_b16c = mul i32 %v2_b16c, 4
  %v6_b16c = add i32 %v5_b16c, %v2_aeb0
  %v7_b16c = inttoptr i32 %v6_b16c to i32*
  store i32 %v2_b160, i32* %v7_b16c, align 4
  %v0_b170 = load i32, i32* %r2.global-to-local, align 4
  %v1_b170 = load i32, i32* %r3.global-to-local, align 4
  %v4_b170 = mul i32 %v1_b170, 4
  %v5_b170 = add i32 %v4_b170, %v0_b170
  %v6_b170 = inttoptr i32 %v5_b170 to i32*
  %v7_b170 = load i32, i32* %v6_b170, align 4
  store i32 %v7_b170, i32* %r4.global-to-local, align 4
  %v1_b174 = inttoptr i32 %v7_b170 to i8*
  %v2_b174 = load i8, i8* %v1_b174, align 1
  %tmp = urem i8 %v2_b174, 16
  %v1_b178 = zext i8 %tmp to i32
  %v1_b17c = or i32 %v1_b178, 64
  store i32 %v1_b17c, i32* %r2.global-to-local, align 4
  %v1_b180 = trunc i32 %v1_b17c to i8
  store i8 %v1_b180, i8* %v1_b174, align 1
  %v0_b184 = load i32, i32* %r4.global-to-local, align 4
  %v1_b184 = inttoptr i32 %v0_b184 to i8*
  %v2_b184 = load i8, i8* %v1_b184, align 1
  %v1_b188 = and i8 %v2_b184, -16
  %v1_b18c = or i8 %v1_b188, 5
  store i32 %v1_af30, i32* %r1.global-to-local, align 4
  store i8 %v1_b18c, i8* %v1_b184, align 1
  %v2_b19c = load i32, i32* %r4.global-to-local, align 4
  %v3_b19c = add i32 %v2_b19c, 1
  %v4_b19c = inttoptr i32 %v3_b19c to i8*
  store i8 %v5_aee8, i8* %v4_b19c, align 1
  %v2_b1a4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1a4 = add i32 %v2_b1a4, 8
  %v4_b1a4 = inttoptr i32 %v3_b1a4 to i8*
  store i8 %v5_af20, i8* %v4_b1a4, align 1
  store i32 %v4_b0f4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_b1b0 = load i32, i32* %r1.global-to-local, align 4
  %v9_b1b0 = icmp eq i32 %v0_b1b0, 0
  store i1 %v9_b1b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b110, i32* %r2.global-to-local, align 4
  %v2_b1b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1b8 = add i32 %v2_b1b8, 4
  %v4_b1b8 = inttoptr i32 %v3_b1b8 to i8*
  store i8 %v1_b1b8, i8* %v4_b1b8, align 1
  store i32 %v4_b0bc, i32* %r1.global-to-local, align 4
  %v0_b1c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1c0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b154
  %v1_b1c0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_b1c0, i32* %r3.global-to-local, align 4
  %v2_b1c4 = trunc i32 %v1_b1c0 to i8
  %v3_b1c4 = load i32, i32* %r4.global-to-local, align 4
  %v4_b1c4 = add i32 %v3_b1c4, 7
  %v5_b1c4 = inttoptr i32 %v4_b1c4 to i8*
  store i8 %v2_b1c4, i8* %v5_b1c4, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b154, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_b1cc = load i32, i32* %r2.global-to-local, align 4
  %v1_b1cc = trunc i32 %v0_b1cc to i8
  %v2_b1cc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1cc = add i32 %v2_b1cc, 3
  %v4_b1cc = inttoptr i32 %v3_b1cc to i8*
  store i8 %v1_b1cc, i8* %v4_b1cc, align 1
  %v0_b1d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b1d0 = trunc i32 %v0_b1d0 to i8
  %v2_b1d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1d0 = add i32 %v2_b1d0, 2
  %v4_b1d0 = inttoptr i32 %v3_b1d0 to i8*
  store i8 %v1_b1d0, i8* %v4_b1d0, align 1
  %v0_b1d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1d4, label %bb83, label %bb82

bb82:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb83

bb83:                                             ; preds = %.thread, %bb82
  store i32 %v3_b114, i32* %r1.global-to-local, align 4
  %v0_b1dc = load i32, i32* %r3.global-to-local, align 4
  %v1_b1dc = trunc i32 %v0_b1dc to i8
  %v2_b1dc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1dc = add i32 %v2_b1dc, 9
  %v4_b1dc = inttoptr i32 %v3_b1dc to i8*
  store i8 %v1_b1dc, i8* %v4_b1dc, align 1
  %v0_b1e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1e0, label %bb85, label %bb84

bb84:                                             ; preds = %bb83
  %v1_b1e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_b1e0 = trunc i32 %v1_b1e0 to i8
  %v3_b1e0 = load i32, i32* %r4.global-to-local, align 4
  %v4_b1e0 = add i32 %v3_b1e0, 6
  %v5_b1e0 = inttoptr i32 %v4_b1e0 to i8*
  store i8 %v2_b1e0, i8* %v5_b1e0, align 1
  br label %bb85

bb85:                                             ; preds = %bb83, %bb84
  %v3_b1e4 = load i32, i32* %stack_var_-40, align 4
  %v5_b1ec = mul i32 %v3_b1e4, 24
  store i32 %v5_b1ec, i32* %r3.global-to-local, align 4
  store i32 %v5_afd0, i32* %r2.global-to-local, align 4
  %v1_b1f4 = load i32, i32* %r4.global-to-local, align 4
  %v2_b1f4 = add i32 %v1_b1f4, 12
  %v3_b1f4 = inttoptr i32 %v2_b1f4 to i32*
  store i32 %v5_afd0, i32* %v3_b1f4, align 4
  %v0_b1f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b1f8 = load i32, i32* @sb, align 4
  %v2_b1f8 = add i32 %v1_b1f8, %v0_b1f8
  store i32 %v2_b1f8, i32* %r3.global-to-local, align 4
  %v0_b1fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b1fc = trunc i32 %v0_b1fc to i8
  %v2_b1fc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1fc = add i32 %v2_b1fc, 5
  %v4_b1fc = inttoptr i32 %v3_b1fc to i8*
  store i8 %v1_b1fc, i8* %v4_b1fc, align 1
  %v0_b200 = load i32, i32* %r3.global-to-local, align 4
  %v1_b200 = add i32 %v0_b200, 16
  %v2_b200 = inttoptr i32 %v1_b200 to i32*
  %v3_b200 = load i32, i32* %v2_b200, align 4
  store i32 %v3_b200, i32* %r2.global-to-local, align 4
  %v0_b204 = load i32, i32* %r4.global-to-local, align 4
  %v1_b204 = add i32 %v0_b204, 20
  store i32 %v1_b204, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_b20c = load i32, i32* %r0.global-to-local, align 4
  %v1_b20c = trunc i32 %v0_b20c to i8
  %v3_b20c = add i32 %v0_b204, 23
  %v4_b20c = inttoptr i32 %v3_b20c to i8*
  store i8 %v1_b20c, i8* %v4_b20c, align 1
  %v0_b210 = load i32, i32* %r3.global-to-local, align 4
  %v1_b210 = trunc i32 %v0_b210 to i8
  %v2_b210 = load i32, i32* %r1.global-to-local, align 4
  %v3_b210 = add i32 %v2_b210, 2
  %v4_b210 = inttoptr i32 %v3_b210 to i8*
  store i8 %v1_b210, i8* %v4_b210, align 1
  %v0_b214 = load i32, i32* %r4.global-to-local, align 4
  %v1_b214 = add i32 %v0_b214, 24
  %v2_b214 = inttoptr i32 %v1_b214 to i8*
  %v3_b214 = load i8, i8* %v2_b214, align 1
  %tmp98 = urem i8 %v3_b214, 16
  %v1_b218 = zext i8 %tmp98 to i32
  %v1_b21c = or i32 %v1_b218, 64
  store i32 %v1_b21c, i32* %r3.global-to-local, align 4
  %v1_b220 = trunc i32 %v1_b21c to i8
  store i8 %v1_b220, i8* %v2_b214, align 1
  %v0_b224 = load i32, i32* %r2.global-to-local, align 4
  %v1_b224 = load i32, i32* %r4.global-to-local, align 4
  %v2_b224 = add i32 %v1_b224, 16
  %v3_b224 = inttoptr i32 %v2_b224 to i32*
  store i32 %v0_b224, i32* %v3_b224, align 4
  %v0_b228 = load i32, i32* %r4.global-to-local, align 4
  %v1_b228 = add i32 %v0_b228, 24
  %v2_b228 = inttoptr i32 %v1_b228 to i8*
  %v3_b228 = load i8, i8* %v2_b228, align 1
  %v1_b22c = and i8 %v3_b228, -16
  %v1_b230 = or i8 %v1_b22c, 5
  store i8 %v1_b230, i8* %v2_b228, align 1
  %v0_b23c = load i32, i32* %r4.global-to-local, align 4
  %v1_b23c = add i32 %v0_b23c, 24
  store i32 %v1_b23c, i32* @r5, align 4
  %v3_b240 = add i32 %v0_b23c, 25
  %v4_b240 = inttoptr i32 %v3_b240 to i8*
  store i8 %v5_aee8, i8* %v4_b240, align 1
  store i32 %v4_b104, i32* %r1.global-to-local, align 4
  store i32 %tmp81, i32* %r3.global-to-local, align 4
  store i32 %v3_b124, i32* %r2.global-to-local, align 4
  %v2_b250 = load i32, i32* @r5, align 4
  %v3_b250 = add i32 %v2_b250, 4
  %v4_b250 = inttoptr i32 %v3_b250 to i8*
  store i8 %v5_b134, i8* %v4_b250, align 1
  %v0_b254 = load i32, i32* %r1.global-to-local, align 4
  %v1_b254 = trunc i32 %v0_b254 to i8
  %v2_b254 = load i32, i32* @r5, align 4
  %v3_b254 = add i32 %v2_b254, 2
  %v4_b254 = inttoptr i32 %v3_b254 to i8*
  store i8 %v1_b254, i8* %v4_b254, align 1
  %v0_b258 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b258, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  store i32 %v4_b25c, i32* %r1.global-to-local, align 4
  %v0_b260 = load i32, i32* %r2.global-to-local, align 4
  %v1_b260 = trunc i32 %v0_b260 to i8
  %v2_b260 = load i32, i32* @r5, align 4
  %v3_b260 = add i32 %v2_b260, 3
  %v4_b260 = inttoptr i32 %v3_b260 to i8*
  store i8 %v1_b260, i8* %v4_b260, align 1
  store i32 %v4_b1a0, i32* %r2.global-to-local, align 4
  %v0_b268 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b268, label %bb89, label %bb88

bb88:                                             ; preds = %bb87
  %v1_b268 = load i32, i32* %r3.global-to-local, align 4
  %v2_b268 = trunc i32 %v1_b268 to i8
  %v3_b268 = load i32, i32* @r5, align 4
  %v4_b268 = add i32 %v3_b268, 6
  %v5_b268 = inttoptr i32 %v4_b268 to i8*
  store i8 %v2_b268, i8* %v5_b268, align 1
  br label %bb89

bb89:                                             ; preds = %bb87, %bb88
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b270 = load i32, i32* %r1.global-to-local, align 4
  %v1_b270 = trunc i32 %v0_b270 to i8
  %v2_b270 = load i32, i32* @r5, align 4
  %v3_b270 = add i32 %v2_b270, 5
  %v4_b270 = inttoptr i32 %v3_b270 to i8*
  store i8 %v1_b270, i8* %v4_b270, align 1
  %v0_b274 = load i32, i32* %r2.global-to-local, align 4
  %v1_b274 = trunc i32 %v0_b274 to i8
  %v2_b274 = load i32, i32* @r5, align 4
  %v3_b274 = add i32 %v2_b274, 8
  %v4_b274 = inttoptr i32 %v3_b274 to i8*
  store i8 %v1_b274, i8* %v4_b274, align 1
  %v0_b278 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b278, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v1_b278 = load i32, i32* %r0.global-to-local, align 4
  %v2_b278 = trunc i32 %v1_b278 to i8
  %v3_b278 = load i32, i32* @r5, align 4
  %v4_b278 = add i32 %v3_b278, 7
  %v5_b278 = inttoptr i32 %v4_b278 to i8*
  store i8 %v2_b278, i8* %v5_b278, align 1
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_b27c = load i32, i32* %r3.global-to-local, align 4
  %v1_b27c = trunc i32 %v0_b27c to i8
  %v2_b27c = load i32, i32* @r5, align 4
  %v3_b27c = add i32 %v2_b27c, 9
  %v4_b27c = inttoptr i32 %v3_b27c to i8*
  store i8 %v1_b27c, i8* %v4_b27c, align 1
  %v0_b280 = call i32 @function_f8e8()
  store i32 %v0_b280, i32* %r0.global-to-local, align 4
  store i32 %v1_b048, i32* %r1.global-to-local, align 4
  store i1 %v2_b28c, i1* %cpsr_z.global-to-local, align 1
  %v1_b290 = sub i32 1023, %v0_b280
  store i32 %v1_b290, i32* %r3.global-to-local, align 4
  br i1 %v2_b28c, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb91
  %v2_b298 = load i32, i32* @r5, align 4
  %v3_b298 = add i32 %v2_b298, 16
  %v4_b298 = inttoptr i32 %v3_b298 to i32*
  store i32 %v1_b290, i32* %v4_b298, align 4
  br label %bb92

.thread19:                                        ; preds = %bb91
  %v1_b294 = load i32, i32* %r4.global-to-local, align 4
  %v2_b294 = add i32 %v1_b294, 16
  %v3_b294 = inttoptr i32 %v2_b294 to i32*
  %v4_b294 = load i32, i32* %v3_b294, align 4
  store i32 %v4_b294, i32* %r3.global-to-local, align 4
  %v2_b29c = load i32, i32* @r5, align 4
  %v3_b29c = add i32 %v2_b29c, 16
  %v4_b29c = inttoptr i32 %v3_b29c to i32*
  store i32 %v4_b294, i32* %v4_b29c, align 4
  br label %bb92

bb92:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_b2a0, i32* %r3.global-to-local, align 4
  %v0_b2a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b2a4 = add i32 %v0_b2a4, 44
  store i32 %v1_b2a4, i32* @r6, align 4
  %v1_b2a8 = load i32, i32* @r5, align 4
  %v2_b2a8 = add i32 %v1_b2a8, 12
  %v3_b2a8 = inttoptr i32 %v2_b2a8 to i32*
  store i32 %v0_b280, i32* %v3_b2a8, align 4
  %v0_b2ac = load i32, i32* %r3.global-to-local, align 4
  %v1_b2ac = trunc i32 %v0_b2ac to i8
  %v2_b2ac = load i32, i32* @r6, align 4
  %v3_b2ac = add i32 %v2_b2ac, 1
  %v4_b2ac = inttoptr i32 %v3_b2ac to i8*
  store i8 %v1_b2ac, i8* %v4_b2ac, align 1
  %v3_b2b0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b2b0, i32* %r3.global-to-local, align 4
  store i32 %v1_ae84, i32* %r1.global-to-local, align 4
  %v1_b2b8 = add i32 %v3_b2b0, 1
  store i32 %v1_b2b8, i32* @r4, align 4
  store i32 %v4_b2bc, i32* %r2.global-to-local, align 4
  %v9_b2c0 = icmp eq i32 %v1_b2b8, %v1_ae84
  store i1 %v9_b2c0, i1* %cpsr_z.global-to-local, align 1
  %v0_b2c4 = load i32, i32* %sl.global-to-local, align 4
  %v1_b2c4 = trunc i32 %v0_b2c4 to i8
  %v2_b2c4 = load i32, i32* @r6, align 4
  %v3_b2c4 = add i32 %v2_b2c4, 5
  %v4_b2c4 = inttoptr i32 %v3_b2c4 to i8*
  store i8 %v1_b2c4, i8* %v4_b2c4, align 1
  %v0_b2c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b2c8 = trunc i32 %v0_b2c8 to i8
  %v2_b2c8 = load i32, i32* @r6, align 4
  %v3_b2c8 = inttoptr i32 %v2_b2c8 to i8*
  store i8 %v1_b2c8, i8* %v3_b2c8, align 1
  %v0_b2cc = load i32, i32* @r7, align 4
  %v1_b2cc = trunc i32 %v0_b2cc to i8
  %v2_b2cc = load i32, i32* @r6, align 4
  %v3_b2cc = add i32 %v2_b2cc, 2
  %v4_b2cc = inttoptr i32 %v3_b2cc to i8*
  store i8 %v1_b2cc, i8* %v4_b2cc, align 1
  %v0_b2d0 = load i32, i32* %fp.global-to-local, align 4
  %v1_b2d0 = trunc i32 %v0_b2d0 to i8
  %v2_b2d0 = load i32, i32* @r6, align 4
  %v3_b2d0 = add i32 %v2_b2d0, 3
  %v4_b2d0 = inttoptr i32 %v3_b2d0 to i8*
  store i8 %v1_b2d0, i8* %v4_b2d0, align 1
  %v0_b2d4 = load i32, i32* %r8.global-to-local, align 4
  %v1_b2d4 = trunc i32 %v0_b2d4 to i8
  %v2_b2d4 = load i32, i32* @r6, align 4
  %v3_b2d4 = add i32 %v2_b2d4, 4
  %v4_b2d4 = inttoptr i32 %v3_b2d4 to i8*
  store i8 %v1_b2d4, i8* %v4_b2d4, align 1
  %v0_b2d8 = load i32, i32* @r4, align 4
  store i32 %v0_b2d8, i32* %stack_var_-40, align 4
  %v5_b2dc = icmp slt i32 %v1_b2b8, %v1_ae84
  br i1 %v5_b2dc, label %dec_label_pc_b154, label %dec_label_pc_b2e0.preheader

dec_label_pc_b2e0.preheader:                      ; preds = %bb92, %dec_label_pc_b02c
  %v1_b300 = add i32 %v5_af7c, 8
  %v1_b304 = add i32 %v5_af7c, 52
  %v2_b310 = icmp eq i32 %v5_afd0, -1
  %v7_b310 = icmp eq i32 %v5_afd0, -1
  %v9_b4d8 = icmp eq i32 %v3_b04c, add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1)
  %v2_b548 = icmp eq i32 %v1_b048, 0
  %v2_b564 = icmp eq i32 %v1_af9c, 0
  br label %dec_label_pc_b2e0

dec_label_pc_b2e0:                                ; preds = %dec_label_pc_b2e0.preheader, %dec_label_pc_b58c
  store i32 %v1_ae84, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b044, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b044, label %dec_label_pc_b58c, label %dec_label_pc_b2f4

dec_label_pc_b2f4:                                ; preds = %dec_label_pc_b2e0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_af7c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v1_b300, i32* @fp, align 4
  store i32 %v1_b304, i32* @sl, align 4
  br label %dec_label_pc_b438

dec_label_pc_b30c:                                ; preds = %dec_label_pc_b438
  store i32 %v5_afd0, i32* %r2.global-to-local, align 4
  store i1 %v7_b310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b310, label %dec_label_pc_b4c8, label %dec_label_pc_b318

dec_label_pc_b318:                                ; preds = %dec_label_pc_b460, %dec_label_pc_b30c
  store i32 %v3_b04c, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_b4d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4d8, label %dec_label_pc_b4e4, label %dec_label_pc_b32c

dec_label_pc_b32c:                                ; preds = %dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge, %dec_label_pc_b318
  %v1_b330 = phi i32 [ %v1_b330.pre, %dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), %dec_label_pc_b318 ]
  store i32 %v3_b050, i32* %r1.global-to-local, align 4
  %v9_b330 = icmp eq i32 %v3_b050, %v1_b330
  store i1 %v9_b330, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b330, label %dec_label_pc_b51c, label %dec_label_pc_b338

dec_label_pc_b338:                                ; preds = %dec_label_pc_b4e4.dec_label_pc_b338_crit_edge, %dec_label_pc_b32c
  %v1_b33c = phi i32 [ %v1_b33c.pre, %dec_label_pc_b4e4.dec_label_pc_b338_crit_edge ], [ %v1_b330, %dec_label_pc_b32c ]
  store i32 %v3_b054, i32* %r2.global-to-local, align 4
  %v9_b33c = icmp eq i32 %v3_b054, %v1_b33c
  store i1 %v9_b33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b33c, label %dec_label_pc_b538, label %dec_label_pc_b344

dec_label_pc_b344:                                ; preds = %dec_label_pc_b51c, %dec_label_pc_b338
  store i32 %v1_b048, i32* %r3.global-to-local, align 4
  store i1 %v2_b548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b548, label %dec_label_pc_b55c, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_b344
  %v1_b34c = load i32, i32* @r5, align 4
  %v2_b34c = add i32 %v1_b34c, 16
  %v3_b34c = inttoptr i32 %v2_b34c to i32*
  %v4_b34c = load i32, i32* %v3_b34c, align 4
  store i32 %v4_b34c, i32* %r3.global-to-local, align 4
  %v2_b350 = load i32, i32* @r6, align 4
  %v3_b350 = add i32 %v2_b350, 16
  %v4_b350 = inttoptr i32 %v3_b350 to i32*
  store i32 %v4_b34c, i32* %v4_b350, align 4
  br label %dec_label_pc_b358

dec_label_pc_b358:                                ; preds = %bb97, %.thread20
  store i32 %v1_af9c, i32* %r1.global-to-local, align 4
  store i1 %v2_b564, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b564, label %dec_label_pc_b364, label %dec_label_pc_b570

dec_label_pc_b364:                                ; preds = %dec_label_pc_b358, %dec_label_pc_b55c, %dec_label_pc_b570
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b368 = load i32, i32* @r8, align 4
  %v1_b368 = trunc i32 %v0_b368 to i8
  %v2_b368 = load i32, i32* @r5, align 4
  %v3_b368 = add i32 %v2_b368, 10
  %v4_b368 = inttoptr i32 %v3_b368 to i8*
  store i8 %v1_b368, i8* %v4_b368, align 1
  %v0_b36c = load i32, i32* @r8, align 4
  %v1_b36c = trunc i32 %v0_b36c to i8
  %v2_b36c = load i32, i32* @r5, align 4
  %v3_b36c = add i32 %v2_b36c, 11
  %v4_b36c = inttoptr i32 %v3_b36c to i8*
  store i8 %v1_b36c, i8* %v4_b36c, align 1
  %v0_b370 = load i32, i32* @r5, align 4
  store i32 %v0_b370, i32* @r0, align 4
  %v2_b374 = call i32 @function_e4b8(i32 %v0_b370, i32 20)
  %v3_b374 = trunc i32 %v2_b374 to i8
  %v4_b378 = sdiv i32 %v2_b374, 256
  store i32 %v4_b378, i32* %r3.global-to-local, align 4
  %v1_b37c = trunc i32 %v4_b378 to i8
  %v2_b37c = load i32, i32* @r5, align 4
  %v3_b37c = add i32 %v2_b37c, 11
  %v4_b37c = inttoptr i32 %v3_b37c to i8*
  store i8 %v1_b37c, i8* %v4_b37c, align 1
  %v3_b380 = load i32, i32* @r5, align 4
  %v4_b380 = add i32 %v3_b380, 10
  %v5_b380 = inttoptr i32 %v4_b380 to i8*
  store i8 %v3_b374, i8* %v5_b380, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b388 = load i32, i32* @r8, align 4
  %v1_b388 = trunc i32 %v0_b388 to i8
  %v2_b388 = load i32, i32* @r6, align 4
  %v3_b388 = add i32 %v2_b388, 10
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 %v1_b388, i8* %v4_b388, align 1
  %v0_b38c = load i32, i32* @r8, align 4
  %v1_b38c = trunc i32 %v0_b38c to i8
  %v2_b38c = load i32, i32* @r6, align 4
  %v3_b38c = add i32 %v2_b38c, 11
  %v4_b38c = inttoptr i32 %v3_b38c to i8*
  store i8 %v1_b38c, i8* %v4_b38c, align 1
  %v0_b390 = load i32, i32* @r6, align 4
  store i32 %v0_b390, i32* @r0, align 4
  %v2_b394 = call i32 @function_e4b8(i32 %v0_b390, i32 20)
  %v3_b394 = trunc i32 %v2_b394 to i8
  store i32 %v2_b394, i32* %r0.global-to-local, align 4
  %v4_b398 = sdiv i32 %v2_b394, 256
  store i32 %v4_b398, i32* %r3.global-to-local, align 4
  %v3_b39c = load i32, i32* @r6, align 4
  %v4_b39c = add i32 %v3_b39c, 10
  %v5_b39c = inttoptr i32 %v4_b39c to i8*
  store i8 %v3_b394, i8* %v5_b39c, align 1
  %v0_b3a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3a0 = trunc i32 %v0_b3a0 to i8
  %v2_b3a0 = load i32, i32* @r6, align 4
  %v3_b3a0 = add i32 %v2_b3a0, 11
  %v4_b3a0 = inttoptr i32 %v3_b3a0 to i8*
  store i8 %v1_b3a0, i8* %v4_b3a0, align 1
  %v0_b3a4 = load i32, i32* @r7, align 4
  %v1_b3a4 = add i32 %v0_b3a4, 4
  %v2_b3a4 = inttoptr i32 %v1_b3a4 to i8*
  %v3_b3a4 = load i8, i8* %v2_b3a4, align 1
  %v4_b3a4 = zext i8 %v3_b3a4 to i32
  store i32 %v4_b3a4, i32* %r3.global-to-local, align 4
  %v1_b3a8 = add i32 %v0_b3a4, 5
  %v2_b3a8 = inttoptr i32 %v1_b3a8 to i8*
  %v3_b3a8 = load i8, i8* %v2_b3a8, align 1
  %v4_b3a8 = zext i8 %v3_b3a8 to i32
  store i32 %v0_b3a4, i32* @r1, align 4
  %v4_b3b0 = mul nuw nsw i32 %v4_b3a8, 256
  %v5_b3b0 = or i32 %v4_b3b0, %v4_b3a4
  store i32 %v5_b3b0, i32* %r2.global-to-local, align 4
  %v0_b3b4 = load i32, i32* @r8, align 4
  %v1_b3b4 = trunc i32 %v0_b3b4 to i8
  %v3_b3b4 = add i32 %v0_b3a4, 6
  %v4_b3b4 = inttoptr i32 %v3_b3b4 to i8*
  store i8 %v1_b3b4, i8* %v4_b3b4, align 1
  %v0_b3b8 = load i32, i32* @fp, align 4
  store i32 %v0_b3b8, i32* %r3.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r8, align 4
  %v1_b3bc = trunc i32 %v0_b3bc to i8
  %v2_b3bc = load i32, i32* @r7, align 4
  %v3_b3bc = add i32 %v2_b3bc, 7
  %v4_b3bc = inttoptr i32 %v3_b3bc to i8*
  store i8 %v1_b3bc, i8* %v4_b3bc, align 1
  %v0_b3c0 = load i32, i32* @r6, align 4
  store i32 %v0_b3c0, i32* %r0.global-to-local, align 4
  %v4_b3c4 = call i32 @function_e514(i32 %v0_b3c0, i32 %v0_b3a4, i32 %v5_b3b0, i32 %v0_b3b8)
  %v5_b3c4 = trunc i32 %v4_b3c4 to i8
  store i32 %v4_b3c4, i32* %r0.global-to-local, align 4
  %v3_b3c8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b3c8, i32* %r3.global-to-local, align 4
  %v3_b3cc = mul i32 %v3_b3c8, 32
  store i32 %v3_b3cc, i32* %r2.global-to-local, align 4
  %v0_b3d0 = load i32, i32* @r5, align 4
  %v1_b3d0 = add i32 %v0_b3d0, 16
  %v2_b3d0 = inttoptr i32 %v1_b3d0 to i32*
  %v3_b3d0 = load i32, i32* %v2_b3d0, align 4
  store i32 %v3_b3d0, i32* %r1.global-to-local, align 4
  %v5_b3d4 = mul i32 %v3_b3c8, 24
  store i32 %v5_b3d4, i32* %r2.global-to-local, align 4
  %v4_b3d835 = udiv i32 %v4_b3c4, 256
  %v1_b3dc = trunc i32 %v4_b3d835 to i8
  %v2_b3dc = load i32, i32* @r7, align 4
  %v3_b3dc = add i32 %v2_b3dc, 7
  %v4_b3dc = inttoptr i32 %v3_b3dc to i8*
  store i8 %v1_b3dc, i8* %v4_b3dc, align 1
  %v0_b3e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3e0 = load i32, i32* @sb, align 4
  %v2_b3e0 = add i32 %v1_b3e0, %v0_b3e0
  store i32 %v2_b3e0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b3e8 = load i32, i32* @r7, align 4
  %v4_b3e8 = add i32 %v3_b3e8, 6
  %v5_b3e8 = inttoptr i32 %v4_b3e8 to i8*
  store i8 %v5_b3c4, i8* %v5_b3e8, align 1
  %v0_b3ec = load i32, i32* %r1.global-to-local, align 4
  %v1_b3ec = load i32, i32* %lr.global-to-local, align 4
  %v2_b3ec = add i32 %v1_b3ec, 4
  %v3_b3ec = inttoptr i32 %v2_b3ec to i32*
  store i32 %v0_b3ec, i32* %v3_b3ec, align 4
  %v0_b3f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3f0 = trunc i32 %v0_b3f0 to i8
  %v2_b3f0 = load i32, i32* %r2.global-to-local, align 4
  %v3_b3f0 = load i32, i32* @sb, align 4
  %v4_b3f0 = add i32 %v3_b3f0, %v2_b3f0
  %v5_b3f0 = inttoptr i32 %v4_b3f0 to i8*
  store i8 %v1_b3f0, i8* %v5_b3f0, align 1
  %v0_b3f4 = load i32, i32* @r8, align 4
  %v1_b3f4 = trunc i32 %v0_b3f4 to i8
  %v2_b3f4 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3f4 = add i32 %v2_b3f4, 2
  %v4_b3f4 = inttoptr i32 %v3_b3f4 to i8*
  store i8 %v1_b3f4, i8* %v4_b3f4, align 1
  %v0_b3f8 = load i32, i32* @r8, align 4
  %v1_b3f8 = trunc i32 %v0_b3f8 to i8
  %v2_b3f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3f8 = add i32 %v2_b3f8, 1
  %v4_b3f8 = inttoptr i32 %v3_b3f8 to i8*
  store i8 %v1_b3f8, i8* %v4_b3f8, align 1
  %v0_b3fc = load i32, i32* @r8, align 4
  %v1_b3fc = trunc i32 %v0_b3fc to i8
  %v2_b3fc = load i32, i32* %lr.global-to-local, align 4
  %v3_b3fc = add i32 %v2_b3fc, 3
  %v4_b3fc = inttoptr i32 %v3_b3fc to i8*
  store i8 %v1_b3fc, i8* %v4_b3fc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b408 = load i32, i32* @r5, align 4
  store i32 %v0_b408, i32* %r1.global-to-local, align 4
  store i32 %v3_aff4, i32* %r0.global-to-local, align 4
  %v0_b410 = load i32, i32* @sl, align 4
  store i32 %v0_b410, i32* %r2.global-to-local, align 4
  %v0_b414 = load i32, i32* %lr.global-to-local, align 4
  %v6_b41c = inttoptr i32 %v0_b408 to i32*
  %v7_b41c = call i32 @function_13e78(i32 %v3_aff4, i32* %v6_b41c, i32 %v0_b410, i32 16384, i32 %v0_b414, i32 16)
  %v3_b420 = load i32, i32* %stack_var_-40, align 4
  %v1_b424 = add i32 %v3_b420, 1
  store i32 %v1_b424, i32* %r0.global-to-local, align 4
  store i32 %v1_ae84, i32* %r3.global-to-local, align 4
  %v9_b42c = icmp eq i32 %v1_b424, %v1_ae84
  store i1 %v9_b42c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b424, i32* %stack_var_-40, align 4
  %v6_b434 = icmp slt i32 %v1_b424, %v1_ae84
  br i1 %v6_b434, label %dec_label_pc_b438, label %dec_label_pc_b58c

dec_label_pc_b438:                                ; preds = %dec_label_pc_b364, %dec_label_pc_b2f4
  %v1_b44c = phi i32 [ %v1_b424, %dec_label_pc_b364 ], [ 0, %dec_label_pc_b2f4 ]
  %v5_b43c = mul i32 %v1_b44c, 24
  %v1_b440 = load i32, i32* @sb, align 4
  %v2_b440 = add i32 %v1_b440, %v5_b43c
  store i32 %v2_b440, i32* %r3.global-to-local, align 4
  store i32 %v2_aeb0, i32* %r1.global-to-local, align 4
  %v1_b448 = add i32 %v2_b440, 20
  %v2_b448 = inttoptr i32 %v1_b448 to i8*
  %v3_b448 = load i8, i8* %v2_b448, align 1
  %v4_b448 = zext i8 %v3_b448 to i32
  store i32 %v4_b448, i32* %r2.global-to-local, align 4
  %v4_b44c = mul i32 %v1_b44c, 4
  %v5_b44c = add i32 %v4_b44c, %v2_aeb0
  %v6_b44c = inttoptr i32 %v5_b44c to i32*
  %v7_b44c = load i32, i32* %v6_b44c, align 4
  store i32 %v7_b44c, i32* @r5, align 4
  %v2_b450 = icmp ugt i8 %v3_b448, 30
  %v7_b450 = icmp eq i8 %v3_b448, 31
  store i1 %v7_b450, i1* %cpsr_z.global-to-local, align 1
  %v1_b454 = add i32 %v7_b44c, 24
  store i32 %v1_b454, i32* @r6, align 4
  %v1_b458 = add i32 %v7_b44c, 44
  store i32 %v1_b458, i32* @r7, align 4
  %v2_b45c = xor i1 %v7_b450, true
  %v3_b45c = and i1 %v2_b450, %v2_b45c
  br i1 %v3_b45c, label %dec_label_pc_b30c, label %dec_label_pc_b460

dec_label_pc_b460:                                ; preds = %dec_label_pc_b438
  %v1_b460 = add i32 %v2_b440, 16
  %v2_b460 = inttoptr i32 %v1_b460 to i32*
  %v3_b460 = load i32, i32* %v2_b460, align 4
  store i32 %v3_b460, i32* %r4.global-to-local, align 4
  %v0_b464 = call i32 @function_f8e8()
  store i32 %v0_b464, i32* %r0.global-to-local, align 4
  %v3_b468 = load i32, i32* %stack_var_-40, align 4
  %v5_b470 = mul i32 %v3_b468, 24
  %v0_b474 = load i32, i32* %r4.global-to-local, align 4
  %v1_b478 = load i32, i32* @sb, align 4
  %v2_b478 = add i32 %v1_b478, %v5_b470
  store i32 %v2_b478, i32* %r1.global-to-local, align 4
  %v1_b47c = and i32 %v0_b474, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_b47c, i32* %r3.global-to-local, align 4
  %v1_b474 = udiv i32 %v0_b474, 256
  %v3_b480 = and i32 %v1_b474, 65280
  store i32 %v3_b480, i32* %r2.global-to-local, align 4
  %v3_b484 = mul i32 %v0_b474, 16777216
  %v1_b488 = add i32 %v2_b478, 20
  %v2_b488 = inttoptr i32 %v1_b488 to i8*
  %v3_b488 = load i8, i8* %v2_b488, align 1
  %v4_b488 = zext i8 %v3_b488 to i32
  store i32 %v4_b488, i32* %lr.global-to-local, align 4
  %v4_b48c = mul i32 %v1_b47c, 256
  %v5_b48c = or i32 %v4_b48c, %v3_b484
  %v4_b490 = udiv i32 %v0_b474, 16777216
  %v5_b490 = or i32 %v3_b480, %v4_b490
  %v2_b494 = or i32 %v5_b490, %v5_b48c
  %v7_b498 = lshr i32 %v0_b464, %v4_b488
  %v8_b498 = add i32 %v7_b498, %v2_b494
  %v3_b4a4 = mul i32 %v8_b498, 16777216
  %v1_b4a8 = and i32 %v8_b498, 65280
  store i32 %v1_b4a8, i32* %r0.global-to-local, align 4
  store i32 %v5_afd0, i32* %r2.global-to-local, align 4
  %v4_b4b4 = mul nuw nsw i32 %v1_b4a8, 256
  %v5_b4b4 = or i32 %v4_b4b4, %v3_b4a4
  store i32 %v5_b4b4, i32* %r1.global-to-local, align 4
  %v2_b4b8 = call i32 @llvm.bswap.i32(i32 %v8_b498)
  store i32 %v2_b4b8, i32* %r3.global-to-local, align 4
  store i1 %v7_b310, i1* %cpsr_z.global-to-local, align 1
  %v1_b4c0 = load i32, i32* @r5, align 4
  %v2_b4c0 = add i32 %v1_b4c0, 16
  %v3_b4c0 = inttoptr i32 %v2_b4c0 to i32*
  store i32 %v2_b4b8, i32* %v3_b4c0, align 4
  br i1 %v2_b310, label %dec_label_pc_b4c8, label %dec_label_pc_b318

dec_label_pc_b4c8:                                ; preds = %dec_label_pc_b460, %dec_label_pc_b30c
  %v0_b4c8 = call i32 @function_f8e8()
  store i32 %v0_b4c8, i32* %r0.global-to-local, align 4
  store i32 %v3_b04c, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_b4d8, i1* %cpsr_z.global-to-local, align 1
  %v1_b4dc = load i32, i32* @r5, align 4
  %v2_b4dc = add i32 %v1_b4dc, 12
  %v3_b4dc = inttoptr i32 %v2_b4dc to i32*
  store i32 %v0_b4c8, i32* %v3_b4dc, align 4
  br i1 %v9_b4d8, label %dec_label_pc_b4e4, label %dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge

dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge:    ; preds = %dec_label_pc_b4c8
  %v1_b330.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b32c

dec_label_pc_b4e4:                                ; preds = %dec_label_pc_b4c8, %dec_label_pc_b318
  %v0_b4e4 = call i32 @function_f8e8()
  %v3_b4ec = urem i32 %v0_b4e4, 65536
  store i32 %v3_b4ec, i32* %r0.global-to-local, align 4
  %v1_b4f4 = sub nsw i32 999, %v3_b4ec
  store i32 %v1_b4f4, i32* %r2.global-to-local, align 4
  %v3_b4f8 = sdiv i32 %v1_b4f4, 256
  store i32 %v3_b4f8, i32* %r1.global-to-local, align 4
  %v3_b4fc34 = udiv i32 %v3_b4ec, 256
  store i32 %v3_b4fc34, i32* %r3.global-to-local, align 4
  %v1_b500 = trunc i32 %v3_b4fc34 to i8
  %v2_b500 = load i32, i32* @r5, align 4
  %v3_b500 = add i32 %v2_b500, 5
  %v4_b500 = inttoptr i32 %v3_b500 to i8*
  store i8 %v1_b500, i8* %v4_b500, align 1
  %v0_b504 = load i32, i32* %r0.global-to-local, align 4
  %v1_b504 = trunc i32 %v0_b504 to i8
  %v2_b504 = load i32, i32* @r5, align 4
  %v3_b504 = add i32 %v2_b504, 4
  %v4_b504 = inttoptr i32 %v3_b504 to i8*
  store i8 %v1_b504, i8* %v4_b504, align 1
  %v0_b508 = load i32, i32* %r1.global-to-local, align 4
  %v1_b508 = trunc i32 %v0_b508 to i8
  %v2_b508 = load i32, i32* @r6, align 4
  %v3_b508 = add i32 %v2_b508, 5
  %v4_b508 = inttoptr i32 %v3_b508 to i8*
  store i8 %v1_b508, i8* %v4_b508, align 1
  store i32 %v3_b050, i32* %r1.global-to-local, align 4
  %v1_b510 = load i32, i32* @r4, align 4
  %v9_b510 = icmp eq i32 %v3_b050, %v1_b510
  store i1 %v9_b510, i1* %cpsr_z.global-to-local, align 1
  %v0_b514 = load i32, i32* %r2.global-to-local, align 4
  %v1_b514 = trunc i32 %v0_b514 to i8
  %v2_b514 = load i32, i32* @r6, align 4
  %v3_b514 = add i32 %v2_b514, 4
  %v4_b514 = inttoptr i32 %v3_b514 to i8*
  store i8 %v1_b514, i8* %v4_b514, align 1
  %v0_b518 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b518, label %dec_label_pc_b51c, label %dec_label_pc_b4e4.dec_label_pc_b338_crit_edge

dec_label_pc_b4e4.dec_label_pc_b338_crit_edge:    ; preds = %dec_label_pc_b4e4
  %v1_b33c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b338

dec_label_pc_b51c:                                ; preds = %dec_label_pc_b4e4, %dec_label_pc_b32c
  %v0_b51c = call i32 @function_f8e8()
  %v1_b51c = trunc i32 %v0_b51c to i8
  store i32 %v0_b51c, i32* %r0.global-to-local, align 4
  store i32 %v3_b054, i32* %r2.global-to-local, align 4
  %v4_b524 = sdiv i32 %v0_b51c, 256
  store i32 %v4_b524, i32* %r3.global-to-local, align 4
  %v1_b528 = load i32, i32* @r4, align 4
  %v9_b528 = icmp eq i32 %v3_b054, %v1_b528
  store i1 %v9_b528, i1* %cpsr_z.global-to-local, align 1
  %v3_b52c = load i32, i32* @r5, align 4
  %v4_b52c = add i32 %v3_b52c, 44
  %v5_b52c = inttoptr i32 %v4_b52c to i8*
  store i8 %v1_b51c, i8* %v5_b52c, align 1
  %v0_b530 = load i32, i32* %r3.global-to-local, align 4
  %v1_b530 = trunc i32 %v0_b530 to i8
  %v2_b530 = load i32, i32* @r7, align 4
  %v3_b530 = add i32 %v2_b530, 1
  %v4_b530 = inttoptr i32 %v3_b530 to i8*
  store i8 %v1_b530, i8* %v4_b530, align 1
  %v0_b534 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b534, label %dec_label_pc_b538, label %dec_label_pc_b344

dec_label_pc_b538:                                ; preds = %dec_label_pc_b51c, %dec_label_pc_b338
  %v0_b538 = call i32 @function_f8e8()
  %v1_b538 = trunc i32 %v0_b538 to i8
  store i32 %v0_b538, i32* %r0.global-to-local, align 4
  %v4_b53c36 = udiv i32 %v0_b538, 256
  %v1_b540 = trunc i32 %v4_b53c36 to i8
  %v2_b540 = load i32, i32* @r7, align 4
  %v3_b540 = add i32 %v2_b540, 3
  %v4_b540 = inttoptr i32 %v3_b540 to i8*
  store i8 %v1_b540, i8* %v4_b540, align 1
  store i32 %v1_b048, i32* %r3.global-to-local, align 4
  store i1 %v2_b548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b548, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_b538
  %v1_b54c = load i32, i32* @r5, align 4
  %v2_b54c = add i32 %v1_b54c, 16
  %v3_b54c = inttoptr i32 %v2_b54c to i32*
  %v4_b54c = load i32, i32* %v3_b54c, align 4
  store i32 %v4_b54c, i32* %r3.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_b538, %bb95
  %v3_b550 = load i32, i32* @r7, align 4
  %v4_b550 = add i32 %v3_b550, 2
  %v5_b550 = inttoptr i32 %v4_b550 to i8*
  store i8 %v1_b538, i8* %v5_b550, align 1
  %v0_b554 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b554, label %dec_label_pc_b55c, label %bb97

bb97:                                             ; preds = %bb96
  %v1_b554 = load i32, i32* %r3.global-to-local, align 4
  %v2_b554 = load i32, i32* @r6, align 4
  %v3_b554 = add i32 %v2_b554, 16
  %v4_b554 = inttoptr i32 %v3_b554 to i32*
  store i32 %v1_b554, i32* %v4_b554, align 4
  br label %dec_label_pc_b358

dec_label_pc_b55c:                                ; preds = %dec_label_pc_b344, %bb96
  %v0_b55c = call i32 @function_f8e8()
  store i32 %v0_b55c, i32* %r0.global-to-local, align 4
  store i32 %v1_af9c, i32* %r1.global-to-local, align 4
  store i1 %v2_b564, i1* %cpsr_z.global-to-local, align 1
  %v1_b568 = load i32, i32* @r6, align 4
  %v2_b568 = add i32 %v1_b568, 16
  %v3_b568 = inttoptr i32 %v2_b568 to i32*
  store i32 %v0_b55c, i32* %v3_b568, align 4
  br i1 %v2_b564, label %dec_label_pc_b364, label %dec_label_pc_b570

dec_label_pc_b570:                                ; preds = %dec_label_pc_b358, %dec_label_pc_b55c
  %v0_b570 = load i32, i32* @r7, align 4
  %v1_b570 = add i32 %v0_b570, 8
  store i32 %v1_b570, i32* @r4, align 4
  store i32 %v1_b570, i32* %r0.global-to-local, align 4
  store i32 %v5_af7c, i32* %r1.global-to-local, align 4
  %v2_b57c = call i32 @function_f99c(i32 %v1_b570, i32 %v5_af7c)
  store i32 %v2_b57c, i32* %r0.global-to-local, align 4
  store i32 %v5_af7c, i32* %r2.global-to-local, align 4
  %v0_b584 = load i32, i32* @r8, align 4
  %v1_b584 = trunc i32 %v0_b584 to i8
  %v2_b584 = load i32, i32* @r4, align 4
  %v4_b584 = add i32 %v2_b584, %v5_af7c
  %v5_b584 = inttoptr i32 %v4_b584 to i8*
  store i8 %v1_b584, i8* %v5_b584, align 1
  br label %dec_label_pc_b364

dec_label_pc_b58c:                                ; preds = %dec_label_pc_b364, %dec_label_pc_b2e0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b590 = call i32 @function_138c0(i32* null)
  store i32 %v2_b590, i32* %r0.global-to-local, align 4
  store i32 %v2_afe0, i32* %r1.global-to-local, align 4
  %v9_b598 = icmp eq i32 %v2_afe0, %v2_b590
  store i1 %v9_b598, i1* %cpsr_z.global-to-local, align 1
  %v6_b59c = icmp slt i32 %v2_afe0, %v2_b590
  br i1 %v6_b59c, label %dec_label_pc_b5a0, label %dec_label_pc_b2e0

dec_label_pc_b5a0:                                ; preds = %dec_label_pc_b58c, %dec_label_pc_ae80, %dec_label_pc_b5a8
  %v29_b5a4 = phi i32 [ %v3_aff4, %dec_label_pc_ae80 ], [ %v1_b5ac, %dec_label_pc_b5a8 ], [ %v2_b590, %dec_label_pc_b58c ]
  store i32 %v3_ae80, i32* %r4.global-to-local, align 4
  store i32 %v15_ae80, i32* %r8.global-to-local, align 4
  store i32 %v21_ae80, i32* %sl.global-to-local, align 4
  store i32 %v24_ae80, i32* %fp.global-to-local, align 4
  ret i32 %v29_b5a4

dec_label_pc_b5a8:                                ; preds = %dec_label_pc_b004
  store i32 %v3_aff4, i32* %r0.global-to-local, align 4
  %v1_b5ac = call i32 @function_135f0(i32 %v3_aff4)
  store i32 %v1_b5ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5a0

; uselistorder directives
  uselistorder i32 %v1_b5ac, { 1, 0 }
  uselistorder i32 %v0_b538, { 0, 2, 1 }
  uselistorder i32 %v0_b51c, { 0, 2, 1 }
  uselistorder i32 %v3_b4ec, { 0, 2, 1 }
  uselistorder i32 %v2_b4b8, { 1, 0 }
  uselistorder i32 %v8_b498, { 1, 2, 0 }
  uselistorder i32 %v0_b474, { 1, 0, 2, 3 }
  uselistorder i32 %v7_b44c, { 1, 0, 2 }
  uselistorder i32 %v1_b424, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b3c8, { 1, 0, 2 }
  uselistorder i32 %v4_b3c4, { 0, 2, 1 }
  uselistorder i32 %v0_b3a4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b394, { 0, 2, 1 }
  uselistorder i32 %v4_b378, { 1, 0 }
  uselistorder i1 %v2_b564, { 2, 3, 1, 0 }
  uselistorder i1 %v2_b548, { 2, 3, 1, 0 }
  uselistorder i1 %v9_b4d8, { 2, 3, 1, 0 }
  uselistorder i1 %v7_b310, { 2, 1, 0 }
  uselistorder i32 %v0_b280, { 1, 0, 2 }
  uselistorder i32 %v3_b124, { 1, 0 }
  uselistorder i32 %tmp81, { 1, 0, 2 }
  uselistorder i32 %v1_b0a0, { 1, 0 }
  uselistorder i32 %v1_b098, { 2, 1, 0 }
  uselistorder i32 %v1_b094, { 1, 0 }
  uselistorder i32 %v1_b090, { 1, 0 }
  uselistorder i32 %v1_b084, { 1, 0 }
  uselistorder i32 %v3_b07c, { 2, 0, 1 }
  uselistorder i32 %v3_b04c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b048, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_b044, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b03c, { 0, 2, 1 }
  uselistorder i32 %v0_b038, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b024, { 1, 0 }
  uselistorder i1 %v7_aff8, { 1, 0 }
  uselistorder i32 %v3_aff4, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_afe0, { 2, 1, 0 }
  uselistorder i32 %v5_afd0, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_af9c, { 1, 0, 2 }
  uselistorder i32 %v5_af7c, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i8 %v5_af20, { 1, 0 }
  uselistorder i32 %v2_aeb0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_ae84, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 14, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 44, 43, 46, 45, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 15, 14, 16, 18, 17, 19, 20, 25, 21, 22, 23, 24, 28, 26, 27, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_b5a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b570, { 1, 0 }
  uselistorder label %dec_label_pc_b55c, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_b364, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b2e0, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b5b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b5b8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp35 = call i8 @__decompiler_undefined_function_1()
  %tmp36 = call i8 @__decompiler_undefined_function_1()
  %tmp37 = call i8 @__decompiler_undefined_function_1()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %tmp43 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_b5b8 = load i32, i32* @sb, align 4
  %v1_b5bc = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %v1_b5bc, i32* %r0.global-to-local, align 4
  %v1_b5d8 = urem i32 %arg4, 256
  store i32 %v1_b5d8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b5e8 = call i32 @function_141c8(i32 %v1_b5bc, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_b5bc, i32* %r0.global-to-local, align 4
  %v2_b5f8 = call i32 @function_141c8(i32 %v1_b5bc, i32 4)
  %v0_b5fc = load i32, i32* @r5, align 4
  store i32 %v0_b5fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b608 = load i32, i32* @r7, align 4
  store i32 %v0_b608, i32* %r3.global-to-local, align 4
  %v0_b60c = load i32, i32* @r4, align 4
  store i32 %v0_b60c, i32* %r0.global-to-local, align 4
  %v5_b610 = inttoptr i32 %v0_b5fc to i32*
  %v6_b610 = call i32 @function_a054(i32 %v0_b60c, i32* %v5_b610, i32 2, i32 %v0_b608)
  %v1_b61c = urem i32 %v6_b610, 256
  store i32 %v1_b61c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b628 = load i32, i32* @r5, align 4
  store i32 %v0_b628, i32* %r1.global-to-local, align 4
  %v0_b62c = load i32, i32* @r4, align 4
  store i32 %v0_b62c, i32* %r0.global-to-local, align 4
  %v5_b630 = trunc i32 %v6_b610 to i8
  %v6_b634 = inttoptr i32 %v0_b628 to i32*
  %v7_b634 = call i32 @function_a054(i32 %v0_b62c, i32* %v6_b634, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_b638 = load i32, i32* @r5, align 4
  store i32 %v0_b638, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b634, i32* %sb.global-to-local, align 4
  %v0_b648 = load i32, i32* @r4, align 4
  store i32 %v0_b648, i32* %r0.global-to-local, align 4
  %v4_b64c = inttoptr i32 %v0_b638 to i32*
  %v5_b64c = call i32 @function_a054(i32 %v0_b648, i32* %v4_b64c, i32 4, i32 64)
  %v1_b654 = urem i32 %v5_b64c, 256
  store i32 %v1_b654, i32* %ip.global-to-local, align 4
  %v0_b658 = load i32, i32* @r5, align 4
  store i32 %v0_b658, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b664 = load i32, i32* @r4, align 4
  store i32 %v0_b664, i32* %r0.global-to-local, align 4
  %v6_b66c = inttoptr i32 %v0_b658 to i32*
  %v7_b66c = call i32 @function_a054(i32 %v0_b664, i32* %v6_b66c, i32 5, i32 1)
  %v1_b678 = urem i32 %v7_b66c, 256
  store i32 %v1_b678, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  %v0_b680 = load i32, i32* @r5, align 4
  store i32 %v0_b680, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b688 = load i32, i32* @r4, align 4
  store i32 %v0_b688, i32* %r0.global-to-local, align 4
  %v6_b690 = inttoptr i32 %v0_b680 to i32*
  %v7_b690 = call i32 @function_a054(i32 %v0_b688, i32* %v6_b690, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_b694 = load i32, i32* @r5, align 4
  store i32 %v0_b694, i32* %r1.global-to-local, align 4
  %v3_b698 = mul i32 %v7_b690, 65536
  store i32 %v3_b698, i32* @sl, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_b6a0 = load i32, i32* @r7, align 4
  store i32 %v0_b6a0, i32* %r3.global-to-local, align 4
  %v0_b6a4 = load i32, i32* @r4, align 4
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  %v4_b6a8 = inttoptr i32 %v0_b694 to i32*
  %v5_b6a8 = call i32 @function_a054(i32 %v0_b6a4, i32* %v4_b6a8, i32 10, i32 %v0_b6a0)
  %v1_b6b0 = urem i32 %v5_b6a8, 256
  store i32 %v1_b6b0, i32* %ip.global-to-local, align 4
  %v0_b6b4 = load i32, i32* @r5, align 4
  store i32 %v0_b6b4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b6c0 = load i32, i32* @r4, align 4
  store i32 %v0_b6c0, i32* %r0.global-to-local, align 4
  %v5_b6c8 = inttoptr i32 %v0_b6b4 to i32*
  %v6_b6c8 = call i32 @function_a054(i32 %v0_b6c0, i32* %v5_b6c8, i32 11, i32 1)
  %v1_b6d0 = urem i32 %v6_b6c8, 256
  store i32 %v1_b6d0, i32* %ip.global-to-local, align 4
  %v0_b6d4 = load i32, i32* @r5, align 4
  store i32 %v0_b6d4, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b6e0 = load i32, i32* @r4, align 4
  store i32 %v0_b6e0, i32* %r0.global-to-local, align 4
  %v5_b6e8 = inttoptr i32 %v0_b6d4 to i32*
  %v6_b6e8 = call i32 @function_a054(i32 %v0_b6e0, i32* %v5_b6e8, i32 12, i32 1)
  %v1_b6f0 = urem i32 %v6_b6e8, 256
  store i32 %v1_b6f0, i32* %ip.global-to-local, align 4
  %v0_b6f4 = load i32, i32* @r5, align 4
  store i32 %v0_b6f4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_b6fc = load i32, i32* @r7, align 4
  store i32 %v0_b6fc, i32* %r3.global-to-local, align 4
  %v0_b700 = load i32, i32* @r4, align 4
  store i32 %v0_b700, i32* %r0.global-to-local, align 4
  %v5_b708 = inttoptr i32 %v0_b6f4 to i32*
  %v6_b708 = call i32 @function_a054(i32 %v0_b700, i32* %v5_b708, i32 13, i32 %v0_b6fc)
  %v1_b710 = urem i32 %v6_b708, 256
  store i32 %v1_b710, i32* %ip.global-to-local, align 4
  %v0_b714 = load i32, i32* @r5, align 4
  store i32 %v0_b714, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_b71c = load i32, i32* @r7, align 4
  store i32 %v0_b71c, i32* %r3.global-to-local, align 4
  %v0_b720 = load i32, i32* @r4, align 4
  store i32 %v0_b720, i32* %r0.global-to-local, align 4
  %v5_b728 = inttoptr i32 %v0_b714 to i32*
  %v6_b728 = call i32 @function_a054(i32 %v0_b720, i32* %v5_b728, i32 14, i32 %v0_b71c)
  %v1_b730 = urem i32 %v6_b728, 256
  store i32 %v1_b730, i32* %ip.global-to-local, align 4
  %v0_b734 = load i32, i32* @r5, align 4
  store i32 %v0_b734, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_b73c = load i32, i32* @r7, align 4
  store i32 %v0_b73c, i32* %r3.global-to-local, align 4
  %v0_b740 = load i32, i32* @r4, align 4
  store i32 %v0_b740, i32* %r0.global-to-local, align 4
  %v5_b748 = inttoptr i32 %v0_b734 to i32*
  %v6_b748 = call i32 @function_a054(i32 %v0_b740, i32* %v5_b748, i32 15, i32 %v0_b73c)
  %v1_b750 = urem i32 %v6_b748, 256
  store i32 %v1_b750, i32* %ip.global-to-local, align 4
  %v0_b754 = load i32, i32* @r7, align 4
  store i32 %v0_b754, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b75c = load i32, i32* @r5, align 4
  store i32 %v0_b75c, i32* %r1.global-to-local, align 4
  %v0_b760 = load i32, i32* @r4, align 4
  store i32 %v0_b760, i32* %r0.global-to-local, align 4
  %v5_b768 = inttoptr i32 %v0_b75c to i32*
  %v6_b768 = call i32 @function_a054(i32 %v0_b760, i32* %v5_b768, i32 %v0_b754, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b774 = load i32, i32* @r5, align 4
  store i32 %v0_b774, i32* %r1.global-to-local, align 4
  %v0_b77c = load i32, i32* @r4, align 4
  store i32 %v0_b77c, i32* %r0.global-to-local, align 4
  %v4_b780 = inttoptr i32 %v0_b774 to i32*
  %v5_b780 = call i32 @function_a054(i32 %v0_b77c, i32* %v4_b780, i32 1, i32 1)
  %v1_b788 = urem i32 %v5_b780, 256
  store i32 %v1_b788, i32* %r3.global-to-local, align 4
  %v0_b78c = load i32, i32* @r7, align 4
  store i32 %v0_b78c, i32* %r0.global-to-local, align 4
  %v1_b794 = inttoptr i32 %v0_b78c to i32*
  %v2_b794 = call i32 @function_138c0(i32* %v1_b794)
  %v1_b798 = load i32, i32* @r6, align 4
  %v2_b798 = add i32 %v1_b798, %v2_b794
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b7ac = call i32 @function_13edc(i32 2, i32 3, i32 6)
  store i32 %v3_b7ac, i32* %r0.global-to-local, align 4
  %v0_b7b0 = load i32, i32* @sl, align 4
  %v3_b7b0 = udiv i32 %v0_b7b0, 65536
  store i32 %v3_b7b0, i32* %r1.global-to-local, align 4
  %v7_b7b4 = icmp eq i32 %v3_b7ac, -1
  store i1 %v7_b7b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b7ac, i32* @r8, align 4
  br i1 %v7_b7b4, label %dec_label_pc_bb80, label %dec_label_pc_b7c4

dec_label_pc_b7c4:                                ; preds = %dec_label_pc_b5b8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b7cc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b7cc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b7d4 = load i32, i32* @r7, align 4
  store i32 %v0_b7d4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b7e0 = call i32 @function_13eac(i32 %v3_b7ac, i32 %v0_b7d4, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_b7e0, i32* %r0.global-to-local, align 4
  %v7_b7e4 = icmp eq i32 %v6_b7e0, -1
  store i1 %v7_b7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b7e4, label %dec_label_pc_bb78, label %dec_label_pc_b7ec

dec_label_pc_b7ec:                                ; preds = %dec_label_pc_b7c4
  store i32 %v1_b5bc, i32* %r2.global-to-local, align 4
  %v0_b7f0 = load i32, i32* %sb.global-to-local, align 4
  %v3_b7f0 = mul i32 %v0_b7f0, 65536
  store i32 %v3_b7f0, i32* %r0.global-to-local, align 4
  %v3_b7f4 = urem i32 %v0_b7f0, 65536
  store i32 %v3_b7f4, i32* %r3.global-to-local, align 4
  %v2_b7f8 = icmp eq i32 %v1_b5bc, 0
  store i1 %v2_b7f8, i1* %cpsr_z.global-to-local, align 1
  %v0_b7fc = load i32, i32* @r7, align 4
  store i32 %v0_b7fc, i32* %stack_var_-40, align 4
  br i1 %v2_b7f8, label %dec_label_pc_b7ec.dec_label_pc_ba00.preheader_crit_edge, label %dec_label_pc_b808

dec_label_pc_b7ec.dec_label_pc_ba00.preheader_crit_edge: ; preds = %dec_label_pc_b7ec
  %.pre = add i32 %v6_b768, 40
  br label %dec_label_pc_ba00.preheader

dec_label_pc_b808:                                ; preds = %dec_label_pc_b7ec
  %v0_b80c = load i32, i32* @sl, align 4
  %v3_b80c = udiv i32 %v0_b80c, 16777216
  %tmp83 = udiv i32 %v0_b7f0, 256
  %v3_b810 = urem i32 %tmp83, 256
  store i32 %v3_b810, i32* %r0.global-to-local, align 4
  %v1_b814 = add i32 %v6_b768, 40
  store i32 %v1_b814, i32* %ip.global-to-local, align 4
  %v2_b844 = ptrtoint i32* %stack_var_-76 to i32
  %v2_b848 = ptrtoint i32* %stack_var_-332 to i32
  %v9_bbf4 = icmp eq i32 %v3_b7b0, add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1)
  %v2_b8d4 = ptrtoint i32* %stack_var_-60 to i32
  %v3_b8e0 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v1_b8f8 = urem i32 %v1_b814, 256
  %tmp84 = udiv i32 %v1_b814, 256
  %v3_b8fc = urem i32 %tmp84, 256
  %v2_b90c = ptrtoint i32* %stack_var_-44 to i32
  %v4_b980 = zext i8 %tmp37 to i32
  %v4_b984 = zext i8 %tmp36 to i32
  %v4_b990 = mul nuw nsw i32 %v4_b984, 256
  %v4_b9a0 = zext i8 %tmp35 to i32
  %v1_b9a4 = and i32 %v4_b9a0, 18
  %v2_b9a8 = icmp eq i32 %v1_b9a4, 18
  %sext = mul i32 %v7_b66c, 16777216
  %v4_bd0c = sdiv i32 %sext, 16777216
  %v4_bd1c = sext i8 %v5_b630 to i32
  %sext8 = mul i32 %v5_b64c, 16777216
  %v4_bd28 = sdiv i32 %sext8, 16777216
  %v1_be10 = urem i32 %v5_b6a8, 2
  %tmp108 = sub nsw i32 0, %v1_be10
  %v4_be18 = and i32 %tmp108, 32
  %v1_be44 = urem i32 %v6_b6e8, 2
  %tmp109 = sub nsw i32 0, %v1_be44
  %v4_be4c = and i32 %tmp109, 8
  %v1_be90 = urem i32 %v6_b748, 2
  %v4_b900 = mul nuw nsw i32 %v1_b8f8, 256
  %v5_b900 = or i32 %v4_b900, %v3_b8fc
  %v5_b990 = or i32 %v4_b980, %v4_b990
  %v1_b9b0 = and i32 %v4_b9a0, 5
  %v2_b9b0 = icmp eq i32 %v1_b9b0, 0
  %v1_b8c0 = urem i32 %v3_b7b0, 256
  %v4_b8c4 = mul nuw nsw i32 %v1_b8c0, 256
  %v5_b8c4 = or i32 %v3_b80c, %v4_b8c4
  %v1_b8cc = trunc i32 %v3_b7b0 to i8
  %v1_b8d0 = trunc i32 %v3_b80c to i8
  %v1_bcfc = urem i32 %v0_b7f0, 256
  %v4_bd04 = mul nuw nsw i32 %v1_bcfc, 256
  %v5_bd04 = or i32 %v4_bd04, %v3_b810
  %sext7 = mul i32 %v1_b814, 16777216
  %v4_bd20 = sdiv i32 %sext7, 16777216
  %v1_be28 = urem i32 %v6_b6c8, 2
  %tmp110 = sub nsw i32 0, %v1_be28
  %v4_be30 = and i32 %tmp110, 16
  %v1_be5c = urem i32 %v6_b708, 2
  %tmp111 = sub nsw i32 0, %v1_be5c
  %v4_be64 = and i32 %tmp111, 4
  %v1_be74 = urem i32 %v6_b728, 2
  %tmp112 = sub nsw i32 0, %v1_be74
  %v3_be7c = and i32 %tmp112, 2
  br label %dec_label_pc_b824.outer

dec_label_pc_b824.outer:                          ; preds = %.thread10, %dec_label_pc_b808
  %stack_var_-336.0.ph = phi i32 [ %v0_bd3c, %.thread10 ], [ %tmp, %dec_label_pc_b808 ]
  %stack_var_-56.0.ph = phi i32 [ %v0_bc48, %.thread10 ], [ %tmp43, %dec_label_pc_b808 ]
  br label %dec_label_pc_b824

dec_label_pc_b824:                                ; preds = %dec_label_pc_b9e8, %dec_label_pc_b9b8, %dec_label_pc_b824.outer
  %stack_var_-56.0 = phi i32 [ %stack_var_-56.0.ph, %dec_label_pc_b824.outer ], [ %stack_var_-56.5, %dec_label_pc_b9e8 ], [ %v0_bc48, %dec_label_pc_b9b8 ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b83c = call i32 @function_13edc(i32 2, i32 1, i32 0)
  store i32 %v3_b83c, i32* %r0.global-to-local, align 4
  %v7_b840 = icmp eq i32 %v3_b83c, -1
  store i1 %v7_b840, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b83c, i32* @r7, align 4
  br i1 %v7_b840, label %dec_label_pc_b9e8, label %dec_label_pc_b854

dec_label_pc_b854:                                ; preds = %dec_label_pc_b824, %dec_label_pc_b9c4
  %v0_b85c = phi i32 [ %v3_b9d8, %dec_label_pc_b9c4 ], [ %v3_b83c, %dec_label_pc_b824 ]
  %stack_var_-56.1 = phi i32 [ %v0_bc48, %dec_label_pc_b9c4 ], [ %stack_var_-56.0, %dec_label_pc_b824 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b85c = call i32 @function_1352c(i32 %v0_b85c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b864 = or i32 %v2_b85c, 2048
  store i32 %v1_b864, i32* @r2, align 4
  %v0_b868 = load i32, i32* @r7, align 4
  store i32 %v0_b868, i32* %r0.global-to-local, align 4
  %v2_b86c = call i32 @function_1352c(i32 %v0_b868, i32 4)
  %v3_b870 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_b87c = mul i32 %v3_b870, 24
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_b890 = add i32 %v5_b87c, %arg3
  store i32 %v2_b890, i32* %r2.global-to-local, align 4
  %v1_b894 = add i32 %v2_b890, 20
  %v2_b894 = inttoptr i32 %v1_b894 to i8*
  %v3_b894 = load i8, i8* %v2_b894, align 1
  %v4_b894 = zext i8 %v3_b894 to i32
  store i32 %v4_b894, i32* %r3.global-to-local, align 4
  %v2_b898 = icmp ugt i8 %v3_b894, 30
  %v7_b898 = icmp eq i8 %v3_b894, 31
  store i1 %v7_b898, i1* %cpsr_z.global-to-local, align 1
  %v2_b89c = xor i1 %v7_b898, true
  %v3_b89c = and i1 %v2_b898, %v2_b89c
  br i1 %v3_b89c, label %bb, label %bb85

bb:                                               ; preds = %dec_label_pc_b854
  %v5_b89c = add i32 %v2_b890, 16
  %v6_b89c = inttoptr i32 %v5_b89c to i32*
  %v7_b89c = load i32, i32* %v6_b89c, align 4
  store i32 %v7_b89c, i32* %r3.global-to-local, align 4
  br label %bb85

bb85:                                             ; preds = %dec_label_pc_b854, %bb
  %v4_b8a0 = phi i32 [ %v4_b894, %dec_label_pc_b854 ], [ %v7_b89c, %bb ]
  %v4_b8a0.stack_var_-56.1 = select i1 %v3_b89c, i32 %v4_b8a0, i32 %stack_var_-56.1
  %v2_b8a4 = xor i1 %v2_b898, true
  %v3_b8a4 = or i1 %v7_b898, %v2_b8a4
  br i1 %v3_b8a4, label %dec_label_pc_bb88, label %dec_label_pc_b8a8

dec_label_pc_b8a8:                                ; preds = %bb85
  store i32 %v3_b7b0, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_bbf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbf4, label %dec_label_pc_bbfc, label %dec_label_pc_b8bc

dec_label_pc_b8bc:                                ; preds = %dec_label_pc_bb88, %dec_label_pc_b8a8
  %stack_var_-56.3 = phi i32 [ %v2_bbe0, %dec_label_pc_bb88 ], [ %v4_b8a0.stack_var_-56.1, %dec_label_pc_b8a8 ]
  store i32 %v3_b80c, i32* %r0.global-to-local, align 4
  store i32 %v5_b8c4, i32* %r3.global-to-local, align 4
  store i32 %v1_b8c0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b8d4

dec_label_pc_b8d4:                                ; preds = %dec_label_pc_bbfc, %dec_label_pc_b8bc
  %stack_var_-57.0 = phi i8 [ %v1_bc04, %dec_label_pc_bbfc ], [ %v1_b8cc, %dec_label_pc_b8bc ]
  %v0_bc48 = phi i32 [ %stack_var_-56.6, %dec_label_pc_bbfc ], [ %stack_var_-56.3, %dec_label_pc_b8bc ]
  %storemerge = phi i8 [ %v1_bbfc, %dec_label_pc_bbfc ], [ %v1_b8d0, %dec_label_pc_b8bc ]
  store i32 %v2_b8d4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b8dc = load i32, i32* @r7, align 4
  store i32 %v0_b8dc, i32* %r0.global-to-local, align 4
  %v4_b8e0 = call i32 @function_13d38(i32 %v0_b8dc, %sockaddr* %v3_b8e0, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b8e8 = call i32 @function_138c0(i32* null)
  store i32 %v2_b8e8, i32* %r0.global-to-local, align 4
  store i32 %v1_b814, i32* %r1.global-to-local, align 4
  store i32 %v1_b8f8, i32* %r3.global-to-local, align 4
  store i32 %v5_b900, i32* @fp, align 4
  store i32 %v1_b8f8, i32* %r2.global-to-local, align 4
  store i32 %v2_b8e8, i32* @r4, align 4
  store i32 %v2_b90c, i32* @r6, align 4
  %v9_b964 = icmp eq i32 %tmp38, %v0_bc48
  %v4_b988 = zext i8 %storemerge to i32
  %v4_b98c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_b964 to i32
  %v9_b978 = icmp eq i1 %v9_b964, false
  %v4_b994 = mul nuw nsw i32 %v4_b98c, 256
  %v5_b994 = or i32 %v4_b988, %v4_b994
  %v9_b998 = icmp eq i32 %v5_b994, %v5_b990
  br label %dec_label_pc_b928

dec_label_pc_b918:                                ; preds = %.thread30, %dec_label_pc_b980, %dec_label_pc_b9b0, %bb88
  %v2_b918 = call i32 @function_138c0(i32* null)
  %v0_b91c = load i32, i32* @r4, align 4
  %v2_b91c = sub i32 %v2_b918, %v0_b91c
  store i32 %v2_b91c, i32* %r0.global-to-local, align 4
  %v7_b920 = icmp eq i32 %v2_b91c, 10
  store i1 %v7_b920, i1* %cpsr_z.global-to-local, align 1
  %v8_b924 = icmp sgt i32 %v2_b91c, 10
  br i1 %v8_b924, label %dec_label_pc_b9c4, label %dec_label_pc_b928

dec_label_pc_b928:                                ; preds = %dec_label_pc_b918, %dec_label_pc_b8d4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_b848, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b938 = load i32, i32* @r8, align 4
  store i32 %v0_b938, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  %v7_b948 = call i32 @function_13e18(i32 %v0_b938, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_b844, i32 %v2_b90c)
  store i32 %v7_b948, i32* %r2.global-to-local, align 4
  %v7_b950 = icmp eq i32 %v7_b948, -1
  store i1 %v7_b950, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b950, label %dec_label_pc_bb80, label %dec_label_pc_b95c

dec_label_pc_b95c:                                ; preds = %dec_label_pc_b928
  store i32 %tmp38, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b970 = icmp eq i32 %v7_b948, 40
  store i1 %v7_b970, i1* %cpsr_z.global-to-local, align 1
  %tmp113 = icmp ult i32 %v7_b948, 41
  br i1 %tmp113, label %.thread30, label %bb88

.thread30:                                        ; preds = %dec_label_pc_b95c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b918

bb88:                                             ; preds = %dec_label_pc_b95c
  store i1 %v9_b978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b978, label %dec_label_pc_b918, label %dec_label_pc_b980

dec_label_pc_b980:                                ; preds = %bb88
  store i32 %v4_b984, i32* %r1.global-to-local, align 4
  store i32 %v4_b988, i32* %ip.global-to-local, align 4
  store i32 %v4_b98c, i32* %r2.global-to-local, align 4
  store i32 %v5_b990, i32* %r3.global-to-local, align 4
  store i32 %v5_b994, i32* @r5, align 4
  store i1 %v9_b998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b998, label %dec_label_pc_b9a0, label %dec_label_pc_b918

dec_label_pc_b9a0:                                ; preds = %dec_label_pc_b980
  store i32 %v4_b9a0, i32* %r2.global-to-local, align 4
  store i32 %v1_b9a4, i32* %r3.global-to-local, align 4
  store i1 %v2_b9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b9a8, label %dec_label_pc_bc3c, label %dec_label_pc_b9b0

dec_label_pc_b9b0:                                ; preds = %dec_label_pc_b9a0
  store i1 %v2_b9b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b9b0, label %dec_label_pc_b918, label %dec_label_pc_b9b8

dec_label_pc_b9b8:                                ; preds = %dec_label_pc_b9b0
  %v0_b9b8 = load i32, i32* @r7, align 4
  store i32 %v0_b9b8, i32* %r0.global-to-local, align 4
  %v1_b9bc = call i32 @function_135f0(i32 %v0_b9b8)
  store i32 %v1_b9bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b824

dec_label_pc_b9c4:                                ; preds = %dec_label_pc_b918
  %v0_b9c4 = load i32, i32* @r7, align 4
  store i32 %v0_b9c4, i32* %r0.global-to-local, align 4
  %v1_b9c8 = call i32 @function_135f0(i32 %v0_b9c4)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b9d8 = call i32 @function_13edc(i32 2, i32 1, i32 0)
  store i32 %v3_b9d8, i32* %r0.global-to-local, align 4
  %v3_b9dc = icmp eq i32 %v3_b9d8, -1
  %v8_b9dc = icmp eq i32 %v3_b9d8, -1
  store i1 %v8_b9dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b9d8, i32* @r7, align 4
  br i1 %v3_b9dc, label %dec_label_pc_b9e8, label %dec_label_pc_b854

dec_label_pc_b9e8:                                ; preds = %dec_label_pc_b9c4, %dec_label_pc_b824
  %stack_var_-56.5 = phi i32 [ %stack_var_-56.0, %dec_label_pc_b824 ], [ %v0_bc48, %dec_label_pc_b9c4 ]
  %v3_b9e8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v1_b5bc, i32* %lr.global-to-local, align 4
  %v1_b9f0 = add i32 %v3_b9e8, 1
  store i32 %v1_b9f0, i32* %r3.global-to-local, align 4
  %v9_b9f4 = icmp eq i32 %v1_b9f0, %v1_b5bc
  store i1 %v9_b9f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b9f0, i32* %stack_var_-40, align 4
  %v5_b9fc = icmp slt i32 %v1_b9f0, %v1_b5bc
  br i1 %v5_b9fc, label %dec_label_pc_b824, label %dec_label_pc_ba00.preheader

dec_label_pc_ba00.preheader:                      ; preds = %.thread10, %dec_label_pc_b9e8, %dec_label_pc_b7ec.dec_label_pc_ba00.preheader_crit_edge
  %v1_ba34.pre-phi = phi i32 [ %.pre, %dec_label_pc_b7ec.dec_label_pc_ba00.preheader_crit_edge ], [ %v1_b814, %dec_label_pc_b9e8 ], [ %v1_b814, %.thread10 ]
  %v1_ba18 = add i32 %v6_b768, 20
  %v3_ba1c = mul i32 %v1_ba18, 65536
  %tmp90 = mul i32 %v1_ba18, 256
  %v1_ba24 = and i32 %tmp90, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp91 = udiv i32 %v1_ba18, 256
  %v4_ba28 = urem i32 %tmp91, 256
  %v5_ba28 = or i32 %v4_ba28, %v1_ba24
  %v2_bb58 = icmp eq i32 %v1_b788, 0
  %v9_bb44 = icmp eq i32 %v3_b7f4, add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1)
  br label %dec_label_pc_ba00

dec_label_pc_ba00:                                ; preds = %dec_label_pc_ba00.preheader, %dec_label_pc_bc24
  store i32 %v1_b5bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_b7f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b7f8, label %dec_label_pc_bc24, label %dec_label_pc_ba14

dec_label_pc_ba14:                                ; preds = %dec_label_pc_ba00
  store i32 %v1_ba18, i32* @sl, align 4
  store i32 %v3_ba1c, i32* %r2.global-to-local, align 4
  store i32 %v5_ba28, i32* @fp, align 4
  store i32 %v6_b768, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_ba34.pre-phi, i32* @sb, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_bb30

dec_label_pc_ba40:                                ; preds = %dec_label_pc_bb54, %dec_label_pc_bb68
  %v0_ba40 = load i32, i32* @r7, align 4
  %v1_ba40 = trunc i32 %v0_ba40 to i8
  %v2_ba40 = load i32, i32* @r4, align 4
  %v3_ba40 = add i32 %v2_ba40, 10
  %v4_ba40 = inttoptr i32 %v3_ba40 to i8*
  store i8 %v1_ba40, i8* %v4_ba40, align 1
  %v0_ba44 = load i32, i32* @r7, align 4
  %v1_ba44 = trunc i32 %v0_ba44 to i8
  %v2_ba44 = load i32, i32* @r4, align 4
  %v3_ba44 = add i32 %v2_ba44, 11
  %v4_ba44 = inttoptr i32 %v3_ba44 to i8*
  store i8 %v1_ba44, i8* %v4_ba44, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ba4c = load i32, i32* @r4, align 4
  store i32 %v0_ba4c, i32* @r0, align 4
  %v2_ba50 = call i32 @function_e4b8(i32 %v0_ba4c, i32 20)
  %v3_ba50 = trunc i32 %v2_ba50 to i8
  store i32 %v2_ba50, i32* %r0.global-to-local, align 4
  %v3_ba54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b5e8, i32* %r2.global-to-local, align 4
  %v3_ba5c = mul i32 %v3_ba54, 16
  %v2_ba60 = add i32 %v3_ba5c, %v2_b5e8
  store i32 %v2_ba60, i32* %r1.global-to-local, align 4
  %v1_ba64 = add i32 %v2_ba60, 4
  %v2_ba64 = inttoptr i32 %v1_ba64 to i32*
  %v3_ba64 = load i32, i32* %v2_ba64, align 4
  %v3_ba68 = mul i32 %v3_ba64, 65536
  store i32 %v3_ba68, i32* %ip.global-to-local, align 4
  %tmp92 = mul i32 %v3_ba64, 256
  %v1_ba70 = and i32 %tmp92, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp93 = udiv i32 %v3_ba64, 256
  %v4_ba74 = urem i32 %tmp93, 256
  %v5_ba74 = or i32 %v4_ba74, %v1_ba70
  store i32 %v5_ba74, i32* %r2.global-to-local, align 4
  %v1_ba78 = add i32 %v3_ba64, 1
  store i32 %v1_ba78, i32* %r3.global-to-local, align 4
  store i32 %v1_ba78, i32* %v2_ba64, align 4
  %v0_ba80 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba80 = load i32, i32* @r5, align 4
  %v2_ba80 = add i32 %v1_ba80, 4
  %v3_ba80 = inttoptr i32 %v2_ba80 to i32*
  store i32 %v0_ba80, i32* %v3_ba80, align 4
  %v0_ba84 = load i32, i32* %r1.global-to-local, align 4
  %v1_ba84 = add i32 %v0_ba84, 8
  %v2_ba84 = inttoptr i32 %v1_ba84 to i32*
  %v3_ba84 = load i32, i32* %v2_ba84, align 4
  %tmp94 = mul i32 %v3_ba84, 256
  %v1_ba90 = and i32 %tmp94, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp95 = udiv i32 %v3_ba84, 256
  %v4_ba94 = urem i32 %tmp95, 256
  %v5_ba94 = or i32 %v4_ba94, %v1_ba90
  store i32 %v5_ba94, i32* %r2.global-to-local, align 4
  %v4_ba9833 = udiv i32 %v2_ba50, 256
  %v1_ba9c = trunc i32 %v4_ba9833 to i8
  %v2_ba9c = load i32, i32* @r4, align 4
  %v3_ba9c = add i32 %v2_ba9c, 11
  %v4_ba9c = inttoptr i32 %v3_ba9c to i8*
  store i8 %v1_ba9c, i8* %v4_ba9c, align 1
  %v3_baa0 = load i32, i32* @r4, align 4
  %v4_baa0 = add i32 %v3_baa0, 10
  %v5_baa0 = inttoptr i32 %v4_baa0 to i8*
  store i8 %v3_ba50, i8* %v5_baa0, align 1
  %v0_baa4 = load i32, i32* %r2.global-to-local, align 4
  %v1_baa4 = load i32, i32* @r5, align 4
  %v2_baa4 = add i32 %v1_baa4, 8
  %v3_baa4 = inttoptr i32 %v2_baa4 to i32*
  store i32 %v0_baa4, i32* %v3_baa4, align 4
  %v0_baa8 = load i32, i32* @r5, align 4
  store i32 %v0_baa8, i32* @r1, align 4
  %v0_baac = load i32, i32* @fp, align 4
  store i32 %v0_baac, i32* %r2.global-to-local, align 4
  %v0_bab0 = load i32, i32* @sl, align 4
  store i32 %v0_bab0, i32* %r3.global-to-local, align 4
  %v0_bab4 = load i32, i32* @r4, align 4
  store i32 %v0_bab4, i32* %r0.global-to-local, align 4
  %v0_bab8 = load i32, i32* @r7, align 4
  %v1_bab8 = trunc i32 %v0_bab8 to i8
  %v3_bab8 = add i32 %v0_baa8, 16
  %v4_bab8 = inttoptr i32 %v3_bab8 to i8*
  store i8 %v1_bab8, i8* %v4_bab8, align 1
  %v0_babc = load i32, i32* @r7, align 4
  %v1_babc = trunc i32 %v0_babc to i8
  %v2_babc = load i32, i32* @r5, align 4
  %v3_babc = add i32 %v2_babc, 17
  %v4_babc = inttoptr i32 %v3_babc to i8*
  store i8 %v1_babc, i8* %v4_babc, align 1
  %v4_bac0 = call i32 @function_e514(i32 %v0_bab4, i32 %v0_baa8, i32 %v0_baac, i32 %v0_bab0)
  %v5_bac0 = trunc i32 %v4_bac0 to i8
  store i32 %v4_bac0, i32* %r0.global-to-local, align 4
  %v4_bac434 = udiv i32 %v4_bac0, 256
  %v1_bac8 = trunc i32 %v4_bac434 to i8
  %v2_bac8 = load i32, i32* @r5, align 4
  %v3_bac8 = add i32 %v2_bac8, 17
  %v4_bac8 = inttoptr i32 %v3_bac8 to i8*
  store i8 %v1_bac8, i8* %v4_bac8, align 1
  %v3_bacc = load i32, i32* @r5, align 4
  %v4_bacc = add i32 %v3_bacc, 16
  %v5_bacc = inttoptr i32 %v4_bacc to i8*
  store i8 %v5_bac0, i8* %v5_bacc, align 1
  %v3_bad0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bad0, i32* %r3.global-to-local, align 4
  %v0_bad4 = load i32, i32* @r4, align 4
  %v1_bad4 = add i32 %v0_bad4, 20
  %v2_bad4 = inttoptr i32 %v1_bad4 to i32*
  %v3_bad4 = load i32, i32* %v2_bad4, align 4
  %v5_badc = mul i32 %v3_bad0, 24
  %v3_bae4 = udiv i32 %v3_bad4, 65536
  store i32 %v3_bae4, i32* %r2.global-to-local, align 4
  %v2_bae8 = add i32 %v5_badc, %arg3
  store i32 %v2_bae8, i32* %ip.global-to-local, align 4
  %v3_baec5 = udiv i32 %v3_bad4, 16777216
  %v1_baf0 = trunc i32 %v3_baec5 to i8
  %v3_baf0 = add i32 %v2_bae8, 3
  %v4_baf0 = inttoptr i32 %v3_baf0 to i8*
  store i8 %v1_baf0, i8* %v4_baf0, align 1
  %v0_baf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_baf4 = trunc i32 %v0_baf4 to i8
  %v2_baf4 = load i32, i32* %ip.global-to-local, align 4
  %v3_baf4 = add i32 %v2_baf4, 2
  %v4_baf4 = inttoptr i32 %v3_baf4 to i8*
  store i8 %v1_baf4, i8* %v4_baf4, align 1
  %v0_baf8 = load i32, i32* @r4, align 4
  store i32 %v0_baf8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bb00 = load i32, i32* @r8, align 4
  store i32 %v0_bb00, i32* %r0.global-to-local, align 4
  %v0_bb04 = load i32, i32* @sb, align 4
  store i32 %v0_bb04, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_bb0c = load i32, i32* %ip.global-to-local, align 4
  %v6_bb14 = inttoptr i32 %v0_baf8 to i32*
  %v7_bb14 = call i32 @function_13e78(i32 %v0_bb00, i32* %v6_bb14, i32 %v0_bb04, i32 16384, i32 %v0_bb0c, i32 16)
  %v3_bb18 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bb18, i32* %r3.global-to-local, align 4
  store i32 %v1_b5bc, i32* %ip.global-to-local, align 4
  %v1_bb20 = add i32 %v3_bb18, 1
  store i32 %v1_bb20, i32* %r0.global-to-local, align 4
  %v9_bb24 = icmp eq i32 %v1_bb20, %v1_b5bc
  store i1 %v9_bb24, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bb20, i32* %stack_var_-40, align 4
  %v6_bb2c = icmp slt i32 %v1_bb20, %v1_b5bc
  br i1 %v6_bb2c, label %dec_label_pc_bb30, label %dec_label_pc_bc24

dec_label_pc_bb30:                                ; preds = %dec_label_pc_ba40, %dec_label_pc_ba14
  %v1_bb3c = phi i32 [ %v1_bb20, %dec_label_pc_ba40 ], [ 0, %dec_label_pc_ba14 ]
  store i32 %v2_b5f8, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.27 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_b7f4, i32* %lr.global-to-local, align 4
  %v4_bb3c = mul i32 %v1_bb3c, 4
  %v5_bb3c = add i32 %v4_bb3c, %v2_b5f8
  %v6_bb3c = inttoptr i32 %v5_bb3c to i32*
  %v7_bb3c = load i32, i32* %v6_bb3c, align 4
  store i32 %v7_bb3c, i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_bb44, i1* %cpsr_z.global-to-local, align 1
  %v1_bb48 = add i32 %v7_bb3c, 40
  store i32 %v1_bb48, i32* @r6, align 4
  %v1_bb4c = add i32 %v7_bb3c, 20
  store i32 %v1_bb4c, i32* @r5, align 4
  br i1 %v9_bb44, label %dec_label_pc_bc10, label %dec_label_pc_bb54

dec_label_pc_bb54:                                ; preds = %dec_label_pc_bb30, %dec_label_pc_bc10
  %v0_bb60 = phi i32 [ %v1_bb48, %dec_label_pc_bb30 ], [ %v0_bb60.pre, %dec_label_pc_bc10 ]
  store i1 %v2_bb58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_b768, i32* %r1.global-to-local, align 4
  store i32 %v0_bb60, i32* %r0.global-to-local, align 4
  br i1 %v2_bb58, label %dec_label_pc_ba40, label %dec_label_pc_bb68

dec_label_pc_bb68:                                ; preds = %dec_label_pc_bb54
  %v2_bb68 = call i32 @function_f99c(i32 %v0_bb60, i32 %v6_b768)
  store i32 %v2_bb68, i32* %r0.global-to-local, align 4
  store i32 %v6_b768, i32* %r1.global-to-local, align 4
  %v0_bb70 = load i32, i32* @r7, align 4
  %v1_bb70 = trunc i32 %v0_bb70 to i8
  %v2_bb70 = load i32, i32* @r6, align 4
  %v4_bb70 = add i32 %v2_bb70, %v6_b768
  %v5_bb70 = inttoptr i32 %v4_bb70 to i8*
  store i8 %v1_bb70, i8* %v5_bb70, align 1
  br label %dec_label_pc_ba40

dec_label_pc_bb78:                                ; preds = %dec_label_pc_b7c4
  %v0_bb78 = load i32, i32* @r8, align 4
  store i32 %v0_bb78, i32* %r0.global-to-local, align 4
  %v1_bb7c = call i32 @function_135f0(i32 %v0_bb78)
  store i32 %v1_bb7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb80

dec_label_pc_bb80:                                ; preds = %dec_label_pc_b928, %dec_label_pc_bc24, %dec_label_pc_b5b8, %dec_label_pc_bb78
  %v29_bb84 = phi i32 [ %v3_b7ac, %dec_label_pc_b5b8 ], [ %v1_bb7c, %dec_label_pc_bb78 ], [ %v2_bc28, %dec_label_pc_bc24 ], [ 0, %dec_label_pc_b928 ]
  store i32 %v18_b5b8, i32* %sb.global-to-local, align 4
  ret i32 %v29_bb84

dec_label_pc_bb88:                                ; preds = %bb85
  %v1_bb88 = add i32 %v2_b890, 16
  %v2_bb88 = inttoptr i32 %v1_bb88 to i32*
  %v3_bb88 = load i32, i32* %v2_bb88, align 4
  store i32 %v3_bb88, i32* @r4, align 4
  %v0_bb8c = call i32 @function_f8e8()
  store i32 %v0_bb8c, i32* %r0.global-to-local, align 4
  %v3_bb90 = load i32, i32* %stack_var_-40, align 4
  %v5_bb98 = mul i32 %v3_bb90, 24
  %v0_bba0 = load i32, i32* @r4, align 4
  %v2_bba4 = add i32 %v5_bb98, %arg3
  store i32 %v2_bba4, i32* %r1.global-to-local, align 4
  %v1_bba0 = udiv i32 %v0_bba0, 256
  %v3_bba8 = and i32 %v1_bba0, 65280
  store i32 %v3_bba8, i32* %r2.global-to-local, align 4
  %v1_bbac = and i32 %v0_bba0, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_bbac, i32* %r3.global-to-local, align 4
  %v3_bbb0 = mul i32 %v0_bba0, 16777216
  %v4_bbb4 = mul i32 %v1_bbac, 256
  %v5_bbb4 = or i32 %v4_bbb4, %v3_bbb0
  store i32 %v5_bbb4, i32* %ip.global-to-local, align 4
  %v1_bbb8 = add i32 %v2_bba4, 20
  %v2_bbb8 = inttoptr i32 %v1_bbb8 to i8*
  %v3_bbb8 = load i8, i8* %v2_bbb8, align 1
  %v4_bbb8 = zext i8 %v3_bbb8 to i32
  store i32 %v4_bbb8, i32* %lr.global-to-local, align 4
  %v4_bbbc = udiv i32 %v0_bba0, 16777216
  %v5_bbbc = or i32 %v3_bba8, %v4_bbbc
  %v2_bbc0 = or i32 %v5_bbbc, %v5_bbb4
  %v7_bbc4 = lshr i32 %v0_bb8c, %v4_bbb8
  %v8_bbc4 = add i32 %v7_bbc4, %v2_bbc0
  store i32 %v8_bbc4, i32* %r2.global-to-local, align 4
  %v3_bbd0 = mul i32 %v8_bbc4, 16777216
  %v1_bbd4 = and i32 %v8_bbc4, 65280
  store i32 %v1_bbd4, i32* %r0.global-to-local, align 4
  %v4_bbd8 = mul nuw nsw i32 %v1_bbd4, 256
  %v5_bbd8 = or i32 %v4_bbd8, %v3_bbd0
  store i32 %v5_bbd8, i32* %r1.global-to-local, align 4
  %v2_bbe0 = call i32 @llvm.bswap.i32(i32 %v8_bbc4)
  store i32 %v3_b7b0, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_bbf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbf4, label %dec_label_pc_bbfc, label %dec_label_pc_b8bc

dec_label_pc_bbfc:                                ; preds = %dec_label_pc_bb88, %dec_label_pc_b8a8
  %stack_var_-56.6 = phi i32 [ %v2_bbe0, %dec_label_pc_bb88 ], [ %v4_b8a0.stack_var_-56.1, %dec_label_pc_b8a8 ]
  %v0_bbfc = call i32 @function_f8e8()
  %v1_bbfc = trunc i32 %v0_bbfc to i8
  store i32 %v0_bbfc, i32* %r0.global-to-local, align 4
  %v4_bc00 = sdiv i32 %v0_bbfc, 256
  store i32 %v4_bc00, i32* %r3.global-to-local, align 4
  %v1_bc04 = trunc i32 %v4_bc00 to i8
  br label %dec_label_pc_b8d4

dec_label_pc_bc10:                                ; preds = %dec_label_pc_bb30
  %v0_bc10 = call i32 @function_f8e8()
  %v1_bc10 = trunc i32 %v0_bc10 to i8
  store i32 %v0_bc10, i32* %r0.global-to-local, align 4
  %v4_bc14 = sdiv i32 %v0_bc10, 256
  store i32 %v4_bc14, i32* %r3.global-to-local, align 4
  %v1_bc18 = trunc i32 %v4_bc14 to i8
  %v2_bc18 = load i32, i32* @r4, align 4
  %v3_bc18 = add i32 %v2_bc18, 5
  %v4_bc18 = inttoptr i32 %v3_bc18 to i8*
  store i8 %v1_bc18, i8* %v4_bc18, align 1
  %v3_bc1c = load i32, i32* @r4, align 4
  %v4_bc1c = add i32 %v3_bc1c, 4
  %v5_bc1c = inttoptr i32 %v4_bc1c to i8*
  store i8 %v1_bc10, i8* %v5_bc1c, align 1
  %v0_bb60.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bb54

dec_label_pc_bc24:                                ; preds = %dec_label_pc_ba40, %dec_label_pc_ba00
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bc28 = call i32 @function_138c0(i32* null)
  store i32 %v2_bc28, i32* %r0.global-to-local, align 4
  store i32 %v2_b798, i32* %lr.global-to-local, align 4
  %v9_bc30 = icmp eq i32 %v2_b798, %v2_bc28
  store i1 %v9_bc30, i1* %cpsr_z.global-to-local, align 1
  %v6_bc34 = icmp slt i32 %v2_b798, %v2_bc28
  br i1 %v6_bc34, label %dec_label_pc_bb80, label %dec_label_pc_ba00

dec_label_pc_bc3c:                                ; preds = %dec_label_pc_b9a0
  %v3_bc3c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc3c, i32* @r4, align 4
  store i32 %v2_b5e8, i32* %r0.global-to-local, align 4
  %v3_bc44 = mul i32 %v3_bc3c, 16
  store i32 %v3_bc44, i32* %ip.global-to-local, align 4
  %v3_bc48 = add i32 %v3_bc44, %v2_b5e8
  %v4_bc48 = inttoptr i32 %v3_bc48 to i32*
  store i32 %v0_bc48, i32* %v4_bc48, align 4
  store i32 %stack_var_-336.0.ph, i32* %r1.global-to-local, align 4
  %v1_bc50 = add i32 %stack_var_-336.0.ph, 4
  %v2_bc50 = inttoptr i32 %v1_bc50 to i32*
  %v3_bc50 = load i32, i32* %v2_bc50, align 4
  store i32 %v3_bc50, i32* %r0.global-to-local, align 4
  %v1_bc58 = and i32 %v3_bc50, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_bc58, i32* %r1.global-to-local, align 4
  %v3_bc5c = mul i32 %v3_bc50, 16777216
  %v1_bc54 = udiv i32 %v3_bc50, 256
  %v3_bc60 = and i32 %v1_bc54, 65280
  %v4_bc64 = mul i32 %v1_bc58, 256
  %v4_bc68 = udiv i32 %v3_bc50, 16777216
  %v5_bc68 = or i32 %v4_bc68, %v3_bc5c
  %v5_bc64 = or i32 %v5_bc68, %v4_bc64
  %v2_bc6c = or i32 %v5_bc64, %v3_bc60
  store i32 %v2_b5e8, i32* %r2.global-to-local, align 4
  %v1_bc74 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc74 = add i32 %v1_bc74, %v2_b5e8
  store i32 %v2_bc74, i32* %ip.global-to-local, align 4
  %v2_bc78 = add i32 %v2_bc74, 4
  %v3_bc78 = inttoptr i32 %v2_bc78 to i32*
  store i32 %v2_bc6c, i32* %v3_bc78, align 4
  store i32 %stack_var_-336.0.ph, i32* %r3.global-to-local, align 4
  %v1_bc80 = add i32 %stack_var_-336.0.ph, 8
  %v2_bc80 = inttoptr i32 %v1_bc80 to i32*
  %v3_bc80 = load i32, i32* %v2_bc80, align 4
  store i32 %v3_bc80, i32* %r0.global-to-local, align 4
  %v1_bc88 = and i32 %v3_bc80, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_bc88, i32* %r1.global-to-local, align 4
  %v3_bc8c = mul i32 %v3_bc80, 16777216
  %v1_bc84 = udiv i32 %v3_bc80, 256
  %v3_bc90 = and i32 %v1_bc84, 65280
  %v4_bc94 = mul i32 %v1_bc88, 256
  %v5_bc94 = or i32 %v4_bc94, %v3_bc8c
  store i32 %v5_bc94, i32* %r2.global-to-local, align 4
  %v4_bc98 = udiv i32 %v3_bc80, 16777216
  %v5_bc98 = or i32 %v3_bc90, %v4_bc98
  %v2_bc9c = or i32 %v5_bc98, %v5_bc94
  store i32 %v2_bc9c, i32* %r3.global-to-local, align 4
  %v1_bca0 = load i32, i32* %ip.global-to-local, align 4
  %v2_bca0 = add i32 %v1_bca0, 8
  %v3_bca0 = inttoptr i32 %v2_bca0 to i32*
  store i32 %v2_bc9c, i32* %v3_bca0, align 4
  store i32 %stack_var_-336.0.ph, i32* %lr.global-to-local, align 4
  %v1_bca8 = inttoptr i32 %stack_var_-336.0.ph to i32*
  %v2_bca8 = load i32, i32* %v1_bca8, align 4
  %v3_bcac = udiv i32 %v2_bca8, 65536
  store i32 %v3_bcac, i32* %r2.global-to-local, align 4
  %v3_bcb06 = udiv i32 %v2_bca8, 16777216
  store i32 %v3_bcb06, i32* %r1.global-to-local, align 4
  %v0_bcb4 = load i32, i32* @r5, align 4
  %v3_bcb4 = sdiv i32 %v0_bcb4, 256
  store i32 %v3_bcb4, i32* %r3.global-to-local, align 4
  %v1_bcb8 = trunc i32 %v3_bcb4 to i8
  %v2_bcb8 = load i32, i32* %ip.global-to-local, align 4
  %v3_bcb8 = add i32 %v2_bcb8, 15
  %v4_bcb8 = inttoptr i32 %v3_bcb8 to i8*
  store i8 %v1_bcb8, i8* %v4_bcb8, align 1
  %v0_bcbc = load i32, i32* %r1.global-to-local, align 4
  %v1_bcbc = trunc i32 %v0_bcbc to i8
  %v2_bcbc = load i32, i32* %ip.global-to-local, align 4
  %v3_bcbc = add i32 %v2_bcbc, 13
  %v4_bcbc = inttoptr i32 %v3_bcbc to i8*
  store i8 %v1_bcbc, i8* %v4_bcbc, align 1
  %v0_bcc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcc0 = trunc i32 %v0_bcc0 to i8
  %v2_bcc0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bcc0 = add i32 %v2_bcc0, 12
  %v4_bcc0 = inttoptr i32 %v3_bcc0 to i8*
  store i8 %v1_bcc0, i8* %v4_bcc0, align 1
  %v0_bcc4 = load i32, i32* @r5, align 4
  %v1_bcc4 = trunc i32 %v0_bcc4 to i8
  %v2_bcc4 = load i32, i32* %ip.global-to-local, align 4
  %v3_bcc4 = add i32 %v2_bcc4, 14
  %v4_bcc4 = inttoptr i32 %v3_bcc4 to i8*
  store i8 %v1_bcc4, i8* %v4_bcc4, align 1
  store i32 %v1_b814, i32* %r0.global-to-local, align 4
  %v1_bccc = call i32 @function_14074(i32 %v1_b814)
  store i32 %v1_bccc, i32* %r0.global-to-local, align 4
  store i32 %v2_b5f8, i32* %r1.global-to-local, align 4
  %v3_bcd4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bcd4, i32* %r2.global-to-local, align 4
  %v2_bcd8 = load i32, i32* @r4, align 4
  %v5_bcd8 = mul i32 %v2_bcd8, 4
  %v6_bcd8 = add i32 %v5_bcd8, %v2_b5f8
  %v7_bcd8 = inttoptr i32 %v6_bcd8 to i32*
  store i32 %v1_bccc, i32* %v7_bcd8, align 4
  %v0_bcdc = load i32, i32* %r1.global-to-local, align 4
  %v1_bcdc = load i32, i32* %r2.global-to-local, align 4
  %v4_bcdc = mul i32 %v1_bcdc, 4
  %v5_bcdc = add i32 %v4_bcdc, %v0_bcdc
  %v6_bcdc = inttoptr i32 %v5_bcdc to i32*
  %v7_bcdc = load i32, i32* %v6_bcdc, align 4
  store i32 %v7_bcdc, i32* %r0.global-to-local, align 4
  %v1_bce0 = inttoptr i32 %v7_bcdc to i8*
  %v2_bce0 = load i8, i8* %v1_bce0, align 1
  %tmp114 = urem i8 %v2_bce0, 16
  %v1_bce4 = zext i8 %tmp114 to i32
  %v1_bce8 = or i32 %v1_bce4, 64
  store i32 %v1_bce8, i32* %r3.global-to-local, align 4
  %v1_bcec = trunc i32 %v1_bce8 to i8
  store i8 %v1_bcec, i8* %v1_bce0, align 1
  store i32 %v3_b7f4, i32* %ip.global-to-local, align 4
  %v0_bcf4 = load i32, i32* %r0.global-to-local, align 4
  %v1_bcf4 = inttoptr i32 %v0_bcf4 to i8*
  %v2_bcf4 = load i8, i8* %v1_bcf4, align 1
  %v1_bd00 = and i8 %v2_bcf4, -16
  store i32 %v5_bd04, i32* %r3.global-to-local, align 4
  %v1_bd08 = or i8 %v1_bd00, 5
  store i32 %v4_bd0c, i32* %ip.global-to-local, align 4
  store i32 %v1_bcfc, i32* %r1.global-to-local, align 4
  store i8 %v1_bd08, i8* %v1_bcf4, align 1
  %v0_bd18 = load i32, i32* %r1.global-to-local, align 4
  %v1_bd18 = trunc i32 %v0_bd18 to i8
  %v2_bd18 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd18 = add i32 %v2_bd18, 5
  %v4_bd18 = inttoptr i32 %v3_bd18 to i8*
  store i8 %v1_bd18, i8* %v4_bd18, align 1
  store i32 %v4_bd1c, i32* %r1.global-to-local, align 4
  store i32 %v4_bd20, i32* %lr.global-to-local, align 4
  %v2_bd24 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd24 = add i32 %v2_bd24, 1
  %v4_bd24 = inttoptr i32 %v3_bd24 to i8*
  store i8 %v5_b630, i8* %v4_bd24, align 1
  store i32 %v4_bd28, i32* %r2.global-to-local, align 4
  %v0_bd2c = load i32, i32* %ip.global-to-local, align 4
  %v2_bd2c = icmp eq i32 %v0_bd2c, 0
  store i1 %v2_bd2c, i1* %cpsr_z.global-to-local, align 1
  %v0_bd30 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd30 = trunc i32 %v0_bd30 to i8
  %v2_bd30 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd30 = add i32 %v2_bd30, 4
  %v4_bd30 = inttoptr i32 %v3_bd30 to i8*
  store i8 %v1_bd30, i8* %v4_bd30, align 1
  %v0_bd34 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd34 = add i32 %v0_bd34, 20
  store i32 %v1_bd34, i32* %r3.global-to-local, align 4
  %v0_bd38 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd38 = trunc i32 %v0_bd38 to i8
  %v3_bd38 = add i32 %v0_bd34, 8
  %v4_bd38 = inttoptr i32 %v3_bd38 to i8*
  store i8 %v1_bd38, i8* %v4_bd38, align 1
  %v0_bd3c = load i32, i32* %r3.global-to-local, align 4
  %v0_bd40 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd40, label %.thread9, label %bb97

bb97:                                             ; preds = %dec_label_pc_bc3c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bd44 = load i32, i32* %r0.global-to-local, align 4
  %v4_bd44 = add i32 %v3_bd44, 6
  %v5_bd44 = inttoptr i32 %v4_bd44 to i8*
  store i8 64, i8* %v5_bd44, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_bc3c, %bb97
  %v2_bd4c = load i32, i32* %r0.global-to-local, align 4
  %v3_bd4c = add i32 %v2_bd4c, 9
  %v4_bd4c = inttoptr i32 %v3_bd4c to i8*
  store i8 6, i8* %v4_bd4c, align 1
  %v2_bd54 = load i32, i32* @global_var_1f238.84, align 4
  store i32 %v2_bd54, i32* %r3.global-to-local, align 4
  %v1_bd58 = load i32, i32* %r0.global-to-local, align 4
  %v2_bd58 = add i32 %v1_bd58, 12
  %v3_bd58 = inttoptr i32 %v2_bd58 to i32*
  store i32 %v2_bd54, i32* %v3_bd58, align 4
  %v0_bd5c = load i32, i32* %lr.global-to-local, align 4
  %v1_bd5c = trunc i32 %v0_bd5c to i8
  %v2_bd5c = load i32, i32* %r0.global-to-local, align 4
  %v3_bd5c = add i32 %v2_bd5c, 3
  %v4_bd5c = inttoptr i32 %v3_bd5c to i8*
  store i8 %v1_bd5c, i8* %v4_bd5c, align 1
  %v3_bd60 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd60, i32* %r2.global-to-local, align 4
  store i32 %v2_b5e8, i32* %lr.global-to-local, align 4
  %v4_bd68 = mul i32 %v3_bd60, 16
  %v5_bd68 = add i32 %v4_bd68, %v2_b5e8
  %v6_bd68 = inttoptr i32 %v5_bd68 to i32*
  %v7_bd68 = load i32, i32* %v6_bd68, align 4
  store i32 %v7_bd68, i32* %r3.global-to-local, align 4
  %v0_bd6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd6c, label %.thread10, label %bb98

bb98:                                             ; preds = %.thread9
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_bd70 = load i32, i32* %r0.global-to-local, align 4
  %v4_bd70 = add i32 %v3_bd70, 7
  %v5_bd70 = inttoptr i32 %v4_bd70 to i8*
  store i8 0, i8* %v5_bd70, align 1
  br label %.thread10

.thread10:                                        ; preds = %.thread9, %bb98
  %v0_bd74 = load i32, i32* @fp, align 4
  %v1_bd74 = trunc i32 %v0_bd74 to i8
  %v2_bd74 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd74 = add i32 %v2_bd74, 2
  %v4_bd74 = inttoptr i32 %v3_bd74 to i8*
  store i8 %v1_bd74, i8* %v4_bd74, align 1
  %v0_bd78 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd78 = load i32, i32* %r0.global-to-local, align 4
  %v2_bd78 = add i32 %v1_bd78, 16
  %v3_bd78 = inttoptr i32 %v2_bd78 to i32*
  store i32 %v0_bd78, i32* %v3_bd78, align 4
  %v0_bd7c = load i32, i32* %r2.global-to-local, align 4
  %v3_bd7c = mul i32 %v0_bd7c, 16
  %v1_bd80 = load i32, i32* %lr.global-to-local, align 4
  %v2_bd80 = add i32 %v1_bd80, %v3_bd7c
  store i32 %v2_bd80, i32* %r2.global-to-local, align 4
  %v1_bd84 = add i32 %v2_bd80, 13
  %v2_bd84 = inttoptr i32 %v1_bd84 to i8*
  %v3_bd84 = load i8, i8* %v2_bd84, align 1
  %v4_bd84 = zext i8 %v3_bd84 to i32
  store i32 %v4_bd84, i32* %r1.global-to-local, align 4
  %v1_bd88 = add i32 %v2_bd80, 12
  %v2_bd88 = inttoptr i32 %v1_bd88 to i8*
  %v3_bd88 = load i8, i8* %v2_bd88, align 1
  %v4_bd88 = zext i8 %v3_bd88 to i32
  %v4_bd8c = mul nuw nsw i32 %v4_bd84, 256
  %v5_bd8c = or i32 %v4_bd88, %v4_bd8c
  store i32 %v5_bd8c, i32* %r3.global-to-local, align 4
  %v0_bd90 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd90 = add i32 %v0_bd90, 40
  store i32 %v1_bd90, i32* @r4, align 4
  %v3_bd94 = add i32 %v0_bd90, 20
  %v4_bd94 = inttoptr i32 %v3_bd94 to i8*
  store i8 %v3_bd88, i8* %v4_bd94, align 1
  store i32 %v0_bd3c, i32* %r0.global-to-local, align 4
  %v0_bd9c = load i32, i32* %r3.global-to-local, align 4
  %v3_bd9c = sdiv i32 %v0_bd9c, 256
  store i32 %v3_bd9c, i32* %r3.global-to-local, align 4
  %v1_bda0 = trunc i32 %v3_bd9c to i8
  %v3_bda0 = add i32 %v0_bd3c, 1
  %v4_bda0 = inttoptr i32 %v3_bda0 to i8*
  store i8 %v1_bda0, i8* %v4_bda0, align 1
  %v0_bda4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bda4 = add i32 %v0_bda4, 8
  %v2_bda4 = inttoptr i32 %v1_bda4 to i32*
  %v3_bda4 = load i32, i32* %v2_bda4, align 4
  store i32 %v3_bda4, i32* %r1.global-to-local, align 4
  store i32 %v0_bd3c, i32* %lr.global-to-local, align 4
  %v0_bdac = load i32, i32* %r0.global-to-local, align 4
  %v1_bdac = add i32 %v0_bdac, 13
  %v2_bdac = inttoptr i32 %v1_bdac to i8*
  %v3_bdac = load i8, i8* %v2_bdac, align 1
  %v4_bdac = zext i8 %v3_bdac to i32
  store i32 %v4_bdac, i32* %r3.global-to-local, align 4
  %v1_bdb0 = add i32 %v0_bda4, 15
  %v2_bdb0 = inttoptr i32 %v1_bdb0 to i8*
  %v3_bdb0 = load i8, i8* %v2_bdb0, align 1
  %v4_bdb0 = zext i8 %v3_bdb0 to i32
  store i32 %v4_bdb0, i32* %ip.global-to-local, align 4
  %v1_bdb4 = add i32 %v0_bda4, 14
  %v2_bdb4 = inttoptr i32 %v1_bdb4 to i8*
  %v3_bdb4 = load i8, i8* %v2_bdb4, align 1
  %v4_bdb4 = zext i8 %v3_bdb4 to i32
  store i32 %v4_bdb4, i32* %r0.global-to-local, align 4
  %v2_bdb8 = add i32 %v0_bd3c, 4
  %v3_bdb8 = inttoptr i32 %v2_bdb8 to i32*
  store i32 %v3_bda4, i32* %v3_bdb8, align 4
  store i32 %v0_bd3c, i32* %r1.global-to-local, align 4
  %v0_bdc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bdc0 = or i32 %v0_bdc0, 1
  store i32 %v1_bdc0, i32* %r3.global-to-local, align 4
  %v0_bdc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bdc4 = add i32 %v0_bdc4, 4
  %v2_bdc4 = inttoptr i32 %v1_bdc4 to i32*
  %v3_bdc4 = load i32, i32* %v2_bdc4, align 4
  store i32 %v3_bdc4, i32* %lr.global-to-local, align 4
  %v1_bdc8 = trunc i32 %v1_bdc0 to i8
  %v3_bdc8 = add i32 %v0_bd3c, 13
  %v4_bdc8 = inttoptr i32 %v3_bdc8 to i8*
  store i8 %v1_bdc8, i8* %v4_bdc8, align 1
  %v0_bdcc = load i32, i32* %r1.global-to-local, align 4
  %v1_bdcc = add i32 %v0_bdcc, 12
  %v2_bdcc = inttoptr i32 %v1_bdcc to i8*
  %v3_bdcc = load i8, i8* %v2_bdcc, align 1
  %v4_bdcc = zext i8 %v3_bdcc to i32
  store i32 %v4_bdcc, i32* %r2.global-to-local, align 4
  %v1_bdd0 = add i32 %v0_bdcc, 13
  %v2_bdd0 = inttoptr i32 %v1_bdd0 to i8*
  %v3_bdd0 = load i8, i8* %v2_bdd0, align 1
  %v4_bdd0 = zext i8 %v3_bdd0 to i32
  %v0_bdd4 = load i32, i32* %r0.global-to-local, align 4
  %v1_bdd4 = load i32, i32* %ip.global-to-local, align 4
  %v4_bdd4 = mul i32 %v1_bdd4, 256
  %v5_bdd4 = or i32 %v4_bdd4, %v0_bdd4
  store i32 %v5_bdd4, i32* %r0.global-to-local, align 4
  %tmp115 = urem i8 %v3_bdcc, 16
  %v1_bdd8 = zext i8 %tmp115 to i32
  store i32 %v0_bd3c, i32* %ip.global-to-local, align 4
  %v3_bde0 = sdiv i32 %v5_bdd4, 256
  store i32 %v3_bde0, i32* %r1.global-to-local, align 4
  %v1_bde4 = or i32 %v1_bdd8, 128
  store i32 %v1_bde4, i32* %r2.global-to-local, align 4
  %v1_bde8 = or i32 %v4_bdd0, 16
  store i32 %v1_bde8, i32* %r3.global-to-local, align 4
  %v1_bdec = trunc i32 %v3_bde0 to i8
  %v3_bdec = add i32 %v0_bd3c, 3
  %v4_bdec = inttoptr i32 %v3_bdec to i8*
  store i8 %v1_bdec, i8* %v4_bdec, align 1
  %v0_bdf0 = load i32, i32* %lr.global-to-local, align 4
  %v1_bdf0 = load i32, i32* %ip.global-to-local, align 4
  %v2_bdf0 = add i32 %v1_bdf0, 8
  %v3_bdf0 = inttoptr i32 %v2_bdf0 to i32*
  store i32 %v0_bdf0, i32* %v3_bdf0, align 4
  %v0_bdf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bdf4 = trunc i32 %v0_bdf4 to i8
  %v2_bdf4 = load i32, i32* %ip.global-to-local, align 4
  %v3_bdf4 = add i32 %v2_bdf4, 12
  %v4_bdf4 = inttoptr i32 %v3_bdf4 to i8*
  store i8 %v1_bdf4, i8* %v4_bdf4, align 1
  %v0_bdf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bdf8 = trunc i32 %v0_bdf8 to i8
  %v2_bdf8 = load i32, i32* %ip.global-to-local, align 4
  %v3_bdf8 = add i32 %v2_bdf8, 13
  %v4_bdf8 = inttoptr i32 %v3_bdf8 to i8*
  store i8 %v1_bdf8, i8* %v4_bdf8, align 1
  %v0_bdfc = load i32, i32* %r0.global-to-local, align 4
  %v1_bdfc = trunc i32 %v0_bdfc to i8
  %v2_bdfc = load i32, i32* %ip.global-to-local, align 4
  %v3_bdfc = add i32 %v2_bdfc, 2
  %v4_bdfc = inttoptr i32 %v3_bdfc to i8*
  store i8 %v1_bdfc, i8* %v4_bdfc, align 1
  %v0_be00 = call i32 @function_f8e8()
  %v1_be00 = trunc i32 %v0_be00 to i8
  store i32 %v0_be00, i32* %r0.global-to-local, align 4
  store i32 %v0_bd3c, i32* %lr.global-to-local, align 4
  store i32 %v1_b6b0, i32* %r1.global-to-local, align 4
  %v3_be0c = load i8, i8* %v4_bdc8, align 1
  %v4_be0c = zext i8 %v3_be0c to i32
  store i32 %v1_be10, i32* %r2.global-to-local, align 4
  %v1_be14 = and i32 %v4_be0c, 223
  %v5_be18 = or i32 %v1_be14, %v4_be18
  store i32 %v5_be18, i32* %r3.global-to-local, align 4
  %v1_be1c = trunc i32 %v5_be18 to i8
  store i8 %v1_be1c, i8* %v4_bdc8, align 1
  store i32 %v1_b6d0, i32* %ip.global-to-local, align 4
  %v0_be24 = load i32, i32* %lr.global-to-local, align 4
  %v1_be24 = add i32 %v0_be24, 13
  %v2_be24 = inttoptr i32 %v1_be24 to i8*
  %v3_be24 = load i8, i8* %v2_be24, align 1
  %v4_be24 = zext i8 %v3_be24 to i32
  store i32 %v1_be28, i32* %r3.global-to-local, align 4
  %v1_be2c = and i32 %v4_be24, 239
  %v5_be30 = or i32 %v1_be2c, %v4_be30
  store i32 %v5_be30, i32* %r2.global-to-local, align 4
  %v1_be34 = trunc i32 %v5_be30 to i8
  store i8 %v1_be34, i8* %v2_be24, align 1
  %v0_be38 = load i32, i32* %lr.global-to-local, align 4
  %v1_be38 = add i32 %v0_be38, 13
  %v2_be38 = inttoptr i32 %v1_be38 to i8*
  %v3_be38 = load i8, i8* %v2_be38, align 1
  %v4_be38 = zext i8 %v3_be38 to i32
  store i32 %v1_b6f0, i32* %lr.global-to-local, align 4
  store i32 %v0_bd3c, i32* %r1.global-to-local, align 4
  store i32 %v1_be44, i32* %r2.global-to-local, align 4
  %v1_be48 = and i32 %v4_be38, 247
  %v5_be4c = or i32 %v1_be48, %v4_be4c
  store i32 %v5_be4c, i32* %r3.global-to-local, align 4
  %v1_be50 = trunc i32 %v5_be4c to i8
  store i8 %v1_be50, i8* %v4_bdc8, align 1
  store i32 %v1_b710, i32* %ip.global-to-local, align 4
  %v0_be58 = load i32, i32* %r1.global-to-local, align 4
  %v1_be58 = add i32 %v0_be58, 13
  %v2_be58 = inttoptr i32 %v1_be58 to i8*
  %v3_be58 = load i8, i8* %v2_be58, align 1
  %v4_be58 = zext i8 %v3_be58 to i32
  store i32 %v1_be5c, i32* %r3.global-to-local, align 4
  %v1_be60 = and i32 %v4_be58, 251
  %v5_be64 = or i32 %v1_be60, %v4_be64
  store i32 %v5_be64, i32* %r2.global-to-local, align 4
  %v1_be68 = trunc i32 %v5_be64 to i8
  store i8 %v1_be68, i8* %v2_be58, align 1
  store i32 %v1_b730, i32* %lr.global-to-local, align 4
  %v0_be70 = load i32, i32* %r1.global-to-local, align 4
  %v1_be70 = add i32 %v0_be70, 13
  %v2_be70 = inttoptr i32 %v1_be70 to i8*
  %v3_be70 = load i8, i8* %v2_be70, align 1
  %v4_be70 = zext i8 %v3_be70 to i32
  store i32 %v1_be74, i32* %r2.global-to-local, align 4
  %v1_be78 = and i32 %v4_be70, 253
  %v4_be7c = or i32 %v1_be78, %v3_be7c
  store i32 %v4_be7c, i32* %r3.global-to-local, align 4
  %v1_be80 = trunc i32 %v4_be7c to i8
  store i8 %v1_be80, i8* %v2_be70, align 1
  %v0_be84 = load i32, i32* %r1.global-to-local, align 4
  %v1_be84 = add i32 %v0_be84, 13
  %v2_be84 = inttoptr i32 %v1_be84 to i8*
  %v3_be84 = load i8, i8* %v2_be84, align 1
  %v4_be84 = zext i8 %v3_be84 to i32
  %v1_be8c = and i32 %v4_be84, 254
  %v2_be94 = or i32 %v1_be8c, %v1_be90
  store i32 %v2_be94, i32* %r3.global-to-local, align 4
  store i32 %v0_bd3c, i32* %r2.global-to-local, align 4
  %v4_be9c = sdiv i32 %v0_be00, 256
  store i32 %v4_be9c, i32* %r1.global-to-local, align 4
  %v1_bea0 = trunc i32 %v2_be94 to i8
  store i8 %v1_bea0, i8* %v4_bdc8, align 1
  %v0_bea4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bea4 = trunc i32 %v0_bea4 to i8
  %v2_bea4 = load i32, i32* %r2.global-to-local, align 4
  %v3_bea4 = add i32 %v2_bea4, 15
  %v4_bea4 = inttoptr i32 %v3_bea4 to i8*
  store i8 %v1_bea4, i8* %v4_bea4, align 1
  %v3_bea8 = load i32, i32* %r2.global-to-local, align 4
  %v4_bea8 = add i32 %v3_bea8, 14
  %v5_bea8 = inttoptr i32 %v4_bea8 to i8*
  store i8 %v1_be00, i8* %v5_bea8, align 1
  store i32 %v6_b768, i32* %r1.global-to-local, align 4
  %v0_beb0 = load i32, i32* @r4, align 4
  store i32 %v0_beb0, i32* %r0.global-to-local, align 4
  %v2_beb4 = call i32 @function_f99c(i32 %v0_beb0, i32 %v6_b768)
  store i32 %v2_beb4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_bec0 = load i32, i32* @r4, align 4
  %v4_bec0 = add i32 %v2_bec0, %v6_b768
  %v5_bec0 = inttoptr i32 %v4_bec0 to i8*
  store i8 0, i8* %v5_bec0, align 1
  %v3_bec4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v1_b5bc, i32* %lr.global-to-local, align 4
  %v1_becc = add i32 %v3_bec4, 1
  store i32 %v1_becc, i32* %r3.global-to-local, align 4
  %v9_bed0 = icmp eq i32 %v1_becc, %v1_b5bc
  store i1 %v9_bed0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_becc, i32* %stack_var_-40, align 4
  %v5_bed8 = icmp slt i32 %v1_becc, %v1_b5bc
  br i1 %v5_bed8, label %dec_label_pc_b824.outer, label %dec_label_pc_ba00.preheader

; uselistorder directives
  uselistorder i32 %v1_becc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_be00, { 0, 2, 1 }
  uselistorder i32 %v3_bde0, { 1, 0 }
  uselistorder i32 %v0_bda4, { 1, 0, 2 }
  uselistorder i32 %v3_bd9c, { 1, 0 }
  uselistorder i32 %v0_bd3c, { 5, 6, 7, 0, 8, 1, 9, 2, 10, 3, 11, 4 }
  uselistorder i32 %v3_bcb4, { 1, 0 }
  uselistorder i32 %v3_bc80, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_bc50, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_bc44, { 1, 0 }
  uselistorder i32 %v2_bc28, { 1, 2, 3, 0 }
  uselistorder i32 %v4_bc14, { 1, 0 }
  uselistorder i32 %v0_bc10, { 0, 2, 1 }
  uselistorder i32 %v4_bc00, { 1, 0 }
  uselistorder i32 %v0_bbfc, { 0, 2, 1 }
  uselistorder i32 %v8_bbc4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_bba0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_bb60, { 1, 0 }
  uselistorder i32 %v7_bb3c, { 1, 0, 2 }
  uselistorder i32 %v1_bb20, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_bac0, { 0, 2, 1 }
  uselistorder i32 %v0_baa8, { 1, 0, 2 }
  uselistorder i32 %v3_ba84, { 1, 0 }
  uselistorder i32 %v3_ba64, { 3, 2, 0, 1 }
  uselistorder i32 %v2_ba50, { 0, 2, 1 }
  uselistorder i32 %v1_ba18, { 3, 2, 0, 1 }
  uselistorder i32 %v1_b9f0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b9d8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b950, { 1, 0 }
  uselistorder i32 %v7_b948, { 0, 2, 1, 3 }
  uselistorder i32 %v5_b994, { 1, 0 }
  uselistorder i1 %v9_b978, { 1, 0 }
  uselistorder i32 %v4_b98c, { 1, 0 }
  uselistorder i32 %v4_b988, { 1, 0 }
  uselistorder i32 %v0_bc48, { 2, 0, 5, 3, 1, 4 }
  uselistorder i1 %v7_b898, { 1, 0, 2 }
  uselistorder i1 %v7_b840, { 1, 0 }
  uselistorder i32 %v3_b83c, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-56.0, { 1, 0 }
  uselistorder i32 %stack_var_-336.0.ph, { 4, 5, 2, 3, 0, 1 }
  uselistorder i32 %v1_be74, { 1, 0 }
  uselistorder i32 %v1_be5c, { 1, 0 }
  uselistorder i32 %v1_be28, { 1, 0 }
  uselistorder i32 %v1_bcfc, { 1, 0 }
  uselistorder i32 %v1_b8c0, { 1, 0 }
  uselistorder i32 %v5_b990, { 1, 0 }
  uselistorder i32 %v1_be44, { 1, 0 }
  uselistorder i32 %v1_be10, { 1, 0 }
  uselistorder i1 %v2_b9a8, { 1, 0 }
  uselistorder i32 %v1_b9a4, { 1, 0 }
  uselistorder i32 %v4_b9a0, { 2, 0, 1 }
  uselistorder i32 %v4_b984, { 1, 0 }
  uselistorder i32 %v1_b8f8, { 2, 1, 0 }
  uselistorder i1 %v9_bbf4, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b814, { 6, 5, 3, 4, 7, 0, 1, 2, 8 }
  uselistorder i32 %v3_b80c, { 1, 0, 2 }
  uselistorder i1 %v2_b7f8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b7f4, { 1, 2, 3, 0 }
  uselistorder i32 %v0_b7f0, { 1, 0, 3, 2 }
  uselistorder i1 %v7_b7e4, { 1, 0 }
  uselistorder i1 %v7_b7b4, { 1, 0 }
  uselistorder i32 %v3_b7b0, { 3, 2, 5, 0, 4, 1 }
  uselistorder i32 %v3_b7ac, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_b798, { 2, 1, 0 }
  uselistorder i32 %v1_b788, { 1, 0 }
  uselistorder i32 %v6_b768, { 0, 5, 4, 1, 6, 8, 7, 9, 10, 3, 2 }
  uselistorder i32 %v1_b730, { 1, 0 }
  uselistorder i32 %v1_b710, { 1, 0 }
  uselistorder i32 %v1_b6f0, { 1, 0 }
  uselistorder i32 %v1_b6d0, { 1, 0 }
  uselistorder i32 %v1_b6b0, { 1, 0 }
  uselistorder i8 %v5_b630, { 1, 0 }
  uselistorder i32 %v6_b610, { 1, 0 }
  uselistorder i32 %v2_b5f8, { 0, 2, 1, 3 }
  uselistorder i32 %v2_b5e8, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 %v1_b5bc, { 12, 13, 14, 6, 7, 8, 5, 9, 10, 11, 15, 4, 2, 3, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 18, 16, 17 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r2.global-to-local, { 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %r1.global-to-local, { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 40, 39, 41, 43, 42, 0 }
  uselistorder i32* %r0.global-to-local, { 75, 74, 82, 76, 77, 78, 79, 80, 81, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 19, 15, 16, 17, 18, 21, 20, 22, 24, 23, 25, 27, 26, 29, 33, 28, 30, 32, 31, 36, 34, 35, 37, 38, 39, 42, 40, 43, 44, 41, 45, 48, 46, 47, 49, 50, 54, 51, 52, 53, 55, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 0 }
  uselistorder i32* %lr.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 1, 2, 3, 4 }
  uselistorder i32* %ip.global-to-local, { 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 11, 12, 13, 14, 15, 17, 18, 32, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i1* %cpsr_z.global-to-local, { 22, 23, 24, 25, 1, 2, 4, 5, 3, 6, 7, 8, 9, 10, 11, 13, 0, 14, 15, 12, 16, 17, 18, 19, 20, 21 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_bb80, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_bb54, { 1, 0 }
  uselistorder label %dec_label_pc_ba40, { 1, 0 }
  uselistorder label %dec_label_pc_ba00, { 1, 0 }
  uselistorder label %dec_label_pc_b918, { 2, 1, 3, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %dec_label_pc_b854, { 1, 0 }
}

define i32 @function_bee4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_bee4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_bee4 = load i32, i32* @sb, align 4
  %v24_bee4 = load i32, i32* @fp, align 4
  %v1_bee8 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bf04 = urem i32 %arg4, 256
  store i32 %v1_bf04, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_bf14 = call i32 @function_141c8(i32 %v1_bee8, i32 4)
  %v0_bf18 = load i32, i32* @r5, align 4
  store i32 %v0_bf18, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_bf24 = load i32, i32* @r7, align 4
  store i32 %v0_bf24, i32* %r3.global-to-local, align 4
  %v0_bf28 = load i32, i32* @r4, align 4
  %v5_bf2c = inttoptr i32 %v0_bf18 to i32*
  %v6_bf2c = call i32 @function_a054(i32 %v0_bf28, i32* %v5_bf2c, i32 2, i32 %v0_bf24)
  %v1_bf38 = urem i32 %v6_bf2c, 256
  store i32 %v1_bf38, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bf44 = load i32, i32* @r5, align 4
  store i32 %v0_bf44, i32* %r1.global-to-local, align 4
  %v0_bf48 = load i32, i32* @r4, align 4
  %v5_bf4c = trunc i32 %v6_bf2c to i8
  %v6_bf50 = inttoptr i32 %v0_bf44 to i32*
  %v7_bf50 = call i32 @function_a054(i32 %v0_bf48, i32* %v6_bf50, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_bf54 = load i32, i32* @r5, align 4
  store i32 %v0_bf54, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_bf64 = load i32, i32* @r4, align 4
  %v5_bf68 = inttoptr i32 %v0_bf54 to i32*
  %v6_bf68 = call i32 @function_a054(i32 %v0_bf64, i32* %v5_bf68, i32 4, i32 64)
  %v1_bf70 = urem i32 %v6_bf68, 256
  store i32 %v1_bf70, i32* %ip.global-to-local, align 4
  %v0_bf74 = load i32, i32* @r5, align 4
  store i32 %v0_bf74, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_bf7c = load i32, i32* @r7, align 4
  store i32 %v0_bf7c, i32* %r3.global-to-local, align 4
  %v0_bf80 = load i32, i32* @r4, align 4
  %v5_bf84 = trunc i32 %v6_bf68 to i8
  %v6_bf88 = inttoptr i32 %v0_bf74 to i32*
  %v7_bf88 = call i32 @function_a054(i32 %v0_bf80, i32* %v6_bf88, i32 5, i32 %v0_bf7c)
  %v1_bf94 = urem i32 %v7_bf88, 256
  store i32 %v1_bf94, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bfa0 = load i32, i32* @r5, align 4
  store i32 %v0_bfa0, i32* %r1.global-to-local, align 4
  %v0_bfa4 = load i32, i32* @r4, align 4
  %v5_bfac = inttoptr i32 %v0_bfa0 to i32*
  %v6_bfac = call i32 @function_a054(i32 %v0_bfa4, i32* %v5_bfac, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_bfb4 = load i32, i32* @r5, align 4
  store i32 %v0_bfb4, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bfac, i32* %sb.global-to-local, align 4
  %v0_bfc4 = load i32, i32* @r4, align 4
  %v4_bfc8 = inttoptr i32 %v0_bfb4 to i32*
  %v5_bfc8 = call i32 @function_a054(i32 %v0_bfc4, i32* %v4_bfc8, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_bfd4 = load i32, i32* @r5, align 4
  store i32 %v0_bfd4, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_bfe0 = load i32, i32* @r4, align 4
  %v5_bfe4 = inttoptr i32 %v0_bfd4 to i32*
  %v6_bfe4 = call i32 @function_a054(i32 %v0_bfe0, i32* %v5_bfe4, i32 16, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_bff0 = load i32, i32* @r5, align 4
  store i32 %v0_bff0, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_bffc = load i32, i32* @r4, align 4
  %v5_c000 = inttoptr i32 %v0_bff0 to i32*
  %v6_c000 = call i32 @function_a054(i32 %v0_bffc, i32* %v5_c000, i32 17, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_c004 = load i32, i32* @r5, align 4
  store i32 %v0_c004, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_c010 = load i32, i32* @r7, align 4
  store i32 %v0_c010, i32* %r3.global-to-local, align 4
  %v0_c014 = load i32, i32* @r4, align 4
  %v5_c018 = inttoptr i32 %v0_c004 to i32*
  %v6_c018 = call i32 @function_a054(i32 %v0_c014, i32* %v5_c018, i32 10, i32 %v0_c010)
  %v0_c01c = load i32, i32* @r5, align 4
  store i32 %v0_c01c, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c02c = load i32, i32* @r4, align 4
  %v5_c030 = inttoptr i32 %v0_c01c to i32*
  %v6_c030 = call i32 @function_a054(i32 %v0_c02c, i32* %v5_c030, i32 11, i32 1)
  %v0_c034 = load i32, i32* @r5, align 4
  store i32 %v0_c034, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_c040 = load i32, i32* @r7, align 4
  store i32 %v0_c040, i32* %r3.global-to-local, align 4
  %v0_c044 = load i32, i32* @r4, align 4
  %v5_c048 = inttoptr i32 %v0_c034 to i32*
  %v6_c048 = call i32 @function_a054(i32 %v0_c044, i32* %v5_c048, i32 12, i32 %v0_c040)
  %v0_c04c = load i32, i32* @r5, align 4
  store i32 %v0_c04c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_c058 = load i32, i32* @r7, align 4
  store i32 %v0_c058, i32* %r3.global-to-local, align 4
  %v0_c05c = load i32, i32* @r4, align 4
  %v5_c060 = inttoptr i32 %v0_c04c to i32*
  %v6_c060 = call i32 @function_a054(i32 %v0_c05c, i32* %v5_c060, i32 13, i32 %v0_c058)
  %v0_c064 = load i32, i32* @r5, align 4
  store i32 %v0_c064, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_c070 = load i32, i32* @r7, align 4
  store i32 %v0_c070, i32* %r3.global-to-local, align 4
  %v0_c074 = load i32, i32* @r4, align 4
  %v5_c078 = inttoptr i32 %v0_c064 to i32*
  %v6_c078 = call i32 @function_a054(i32 %v0_c074, i32* %v5_c078, i32 14, i32 %v0_c070)
  %v0_c07c = load i32, i32* @r5, align 4
  store i32 %v0_c07c, i32* %r1.global-to-local, align 4
  %v0_c084 = load i32, i32* @r7, align 4
  store i32 %v0_c084, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_c08c = load i32, i32* @r4, align 4
  %v5_c090 = inttoptr i32 %v0_c07c to i32*
  %v6_c090 = call i32 @function_a054(i32 %v0_c08c, i32* %v5_c090, i32 15, i32 %v0_c084)
  %v0_c094 = load i32, i32* @r5, align 4
  store i32 %v0_c094, i32* %r1.global-to-local, align 4
  %v0_c098 = load i32, i32* @r7, align 4
  store i32 %v0_c098, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_c090, i32* %fp.global-to-local, align 4
  %v0_c0a4 = load i32, i32* @r4, align 4
  %v4_c0a8 = inttoptr i32 %v0_c094 to i32*
  %v5_c0a8 = call i32 @function_a054(i32 %v0_c0a4, i32* %v4_c0a8, i32 %v0_c098, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c0b4 = load i32, i32* @r5, align 4
  store i32 %v0_c0b4, i32* %r1.global-to-local, align 4
  store i32 %v5_c0a8, i32* @sl, align 4
  %v0_c0bc = load i32, i32* @r4, align 4
  %v4_c0c0 = inttoptr i32 %v0_c0b4 to i32*
  %v5_c0c0 = call i32 @function_a054(i32 %v0_c0bc, i32* %v4_c0c0, i32 1, i32 1)
  %v2_c0cc = load i32, i32* @global_var_1f238.84, align 4
  store i32 %v2_c0cc, i32* %r3.global-to-local, align 4
  %v1_c0d0 = urem i32 %v5_c0c0, 256
  store i32 %v1_c0d0, i32* %ip.global-to-local, align 4
  %v0_c0d4 = load i32, i32* @r5, align 4
  store i32 %v0_c0d4, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_c0dc = load i32, i32* @r4, align 4
  %v5_c0e4 = inttoptr i32 %v0_c0d4 to i32*
  %v6_c0e4 = call i32 @function_9fe8(i32 %v0_c0dc, i32* %v5_c0e4, i32 24, i32 %v2_c0cc, i32 %v1_c0d0)
  %v0_c0ec = load i32, i32* @r7, align 4
  %v1_c0f0 = inttoptr i32 %v0_c0ec to i32*
  %v2_c0f0 = call i32 @function_138c0(i32* %v1_c0f0)
  %v1_c0f4 = load i32, i32* @r6, align 4
  %v2_c0f4 = add i32 %v1_c0f4, %v2_c0f0
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c108 = call i32 @function_13edc(i32 2, i32 3, i32 6)
  %v7_c10c = icmp eq i32 %v3_c108, -1
  store i1 %v7_c10c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c10c, label %dec_label_pc_c688, label %dec_label_pc_c118

dec_label_pc_c118:                                ; preds = %dec_label_pc_bee4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c120 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c120, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_c128 = load i32, i32* @r7, align 4
  store i32 %v0_c128, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c134 = call i32 @function_13eac(i32 %v3_c108, i32 %v0_c128, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_c138 = icmp eq i32 %v6_c134, -1
  store i1 %v7_c138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c138, label %dec_label_pc_c690, label %dec_label_pc_c140

dec_label_pc_c140:                                ; preds = %dec_label_pc_c118
  store i32 %v1_bee8, i32* %r3.global-to-local, align 4
  %v3_c14c = mul i32 %v7_bf50, 65536
  store i32 %v3_c14c, i32* @r4, align 4
  %v0_c150 = load i32, i32* %sb.global-to-local, align 4
  %v3_c150 = mul i32 %v0_c150, 65536
  store i32 %v3_c150, i32* %sb.global-to-local, align 4
  %v3_c158 = urem i32 %v7_bf50, 65536
  store i32 %v3_c158, i32* %ip.global-to-local, align 4
  %v3_c15c = urem i32 %v0_c150, 65536
  store i32 %v3_c15c, i32* %r1.global-to-local, align 4
  %v3_c160 = urem i32 %v5_bfc8, 65536
  store i32 %v3_c160, i32* %r2.global-to-local, align 4
  %v2_c164 = icmp eq i32 %v1_bee8, 0
  store i1 %v2_c164, i1* %cpsr_z.global-to-local, align 1
  %v0_c168 = load i32, i32* @r7, align 4
  store i32 %v0_c168, i32* %stack_var_-40, align 4
  br i1 %v2_c164, label %dec_label_pc_c3fc.preheader, label %dec_label_pc_c17c

dec_label_pc_c17c:                                ; preds = %dec_label_pc_c140
  %v0_c184 = load i32, i32* @sl, align 4
  %v1_c184 = add i32 %v0_c184, 40
  %v1_c198 = urem i32 %v0_c150, 256
  %tmp71 = udiv i32 %v7_bf50, 256
  %tmp72 = udiv i32 %v1_c184, 256
  %v1_c1b4 = urem i32 %v5_bfc8, 256
  store i32 %v1_c1b4, i32* @lr, align 4
  %tmp73 = mul i32 %v6_bfe4, 256
  %v1_c1d0 = and i32 %tmp73, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp74 = udiv i32 %v6_bfe4, 256
  %v4_c1d4 = urem i32 %tmp74, 256
  %v5_c1d4 = or i32 %v4_c1d4, %v1_c1d0
  store i32 %v5_c1d4, i32* @r6, align 4
  %v1_c1d8 = urem i32 %v6_c018, 2
  %v1_c1dc = urem i32 %v6_c030, 2
  %v1_c1e0 = urem i32 %v6_c048, 2
  %sext11 = mul i32 %tmp72, 16777216
  %v4_c1fc = sdiv i32 %sext11, 16777216
  %v1_c200 = urem i32 %v6_c060, 2
  %tmp75 = udiv i32 %v5_bfc8, 256
  %v3_c208 = urem i32 %tmp75, 256
  %v1_c210 = urem i32 %v6_c078, 2
  store i32 %v1_c210, i32* %ip.global-to-local, align 4
  %v1_c214 = urem i32 %v6_c048, 256
  store i32 %v1_c214, i32* %r1.global-to-local, align 4
  %v3_c218 = ashr i32 %sext11, 31
  store i32 %v3_c218, i32* %r2.global-to-local, align 4
  %sext12 = mul i32 %tmp71, 16777216
  %v4_c21c = sdiv i32 %sext12, 16777216
  store i32 %v4_c21c, i32* %r3.global-to-local, align 4
  %tmp76 = udiv i32 %v0_c150, 256
  %v0_c224 = load i32, i32* %fp.global-to-local, align 4
  %v1_c224 = urem i32 %v0_c224, 2
  %v4_c228 = mul nuw nsw i32 %v1_c1b4, 256
  %v5_c228 = or i32 %v4_c228, %v3_c208
  store i32 %v5_c228, i32* @r5, align 4
  %v3_c244 = ashr i32 %sext12, 31
  store i32 %v3_c244, i32* @r4, align 4
  store i32 %v1_c198, i32* @fp, align 4
  store i32 %v1_c1b4, i32* @sb, align 4
  %v4_c29c = sext i8 %v5_bf84 to i32
  %sext8 = mul i32 %tmp76, 16777216
  %v4_c2f8 = sdiv i32 %sext8, 16777216
  %tmp = sub nsw i32 0, %v1_c1d8
  %v4_c314 = and i32 %tmp, 32
  %tmp84 = sub nsw i32 0, %v1_c1dc
  %v4_c32c = and i32 %tmp84, 16
  %tmp85 = sub nsw i32 0, %v1_c1e0
  %v4_c340 = and i32 %tmp85, 8
  %tmp86 = sub nsw i32 0, %v1_c200
  %v4_c354 = and i32 %tmp86, 4
  %tmp87 = sub nsw i32 0, %v1_c210
  %v3_c368 = and i32 %tmp87, 2
  %v1_c2ac = trunc i32 %v3_c218 to i8
  %extract.t = trunc i32 %v4_c1fc to i8
  %v2_c3b8 = icmp eq i32 %v1_c214, 0
  br label %dec_label_pc_c250

dec_label_pc_c250:                                ; preds = %.thread10, %dec_label_pc_c17c
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c25c = call i32 @function_141c8(i32 1510, i32 1)
  store i32 %v2_bf14, i32* %ip.global-to-local, align 4
  %v3_c264 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c264, i32* %r3.global-to-local, align 4
  %v2_c268 = load i32, i32* @r7, align 4
  %v5_c268 = mul i32 %v2_c268, 4
  %v6_c268 = add i32 %v5_c268, %v2_bf14
  %v7_c268 = inttoptr i32 %v6_c268 to i32*
  store i32 %v2_c25c, i32* %v7_c268, align 4
  %v0_c26c = load i32, i32* %ip.global-to-local, align 4
  %v1_c26c = load i32, i32* %r3.global-to-local, align 4
  %v4_c26c = mul i32 %v1_c26c, 4
  %v5_c26c = add i32 %v4_c26c, %v0_c26c
  %v6_c26c = inttoptr i32 %v5_c26c to i32*
  %v7_c26c = load i32, i32* %v6_c26c, align 4
  store i32 %v7_c26c, i32* %r1.global-to-local, align 4
  %v1_c270 = inttoptr i32 %v7_c26c to i8*
  %v2_c270 = load i8, i8* %v1_c270, align 1
  %tmp88 = urem i8 %v2_c270, 16
  %v1_c274 = zext i8 %tmp88 to i32
  %v1_c278 = or i32 %v1_c274, 64
  store i32 %v1_c278, i32* %r2.global-to-local, align 4
  %v1_c27c = trunc i32 %v1_c278 to i8
  store i8 %v1_c27c, i8* %v1_c270, align 1
  %v0_c280 = load i32, i32* %r1.global-to-local, align 4
  %v1_c280 = inttoptr i32 %v0_c280 to i8*
  %v2_c280 = load i8, i8* %v1_c280, align 1
  %v1_c284 = and i8 %v2_c280, -16
  %v1_c288 = or i8 %v1_c284, 5
  store i32 %v1_bf94, i32* %r2.global-to-local, align 4
  store i8 %v1_c288, i8* %v1_c280, align 1
  %v2_c298 = load i32, i32* %r1.global-to-local, align 4
  %v3_c298 = add i32 %v2_c298, 1
  %v4_c298 = inttoptr i32 %v3_c298 to i8*
  store i8 %v5_bf4c, i8* %v4_c298, align 1
  store i32 %v4_c29c, i32* %ip.global-to-local, align 4
  %v2_c2a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2a0 = add i32 %v2_c2a0, 8
  %v4_c2a0 = inttoptr i32 %v3_c2a0 to i8*
  store i8 %v5_bf84, i8* %v4_c2a0, align 1
  store i32 %v3_c218, i32* %r3.global-to-local, align 4
  %v0_c2a8 = load i32, i32* %r2.global-to-local, align 4
  %v2_c2a8 = icmp eq i32 %v0_c2a8, 0
  store i1 %v2_c2a8, i1* %cpsr_z.global-to-local, align 1
  %v2_c2ac = load i32, i32* %r1.global-to-local, align 4
  %v3_c2ac = add i32 %v2_c2ac, 3
  %v4_c2ac = inttoptr i32 %v3_c2ac to i8*
  store i8 %v1_c2ac, i8* %v4_c2ac, align 1
  store i32 %v4_c1fc, i32* %r2.global-to-local, align 4
  %v0_c2b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2b4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c250
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c2b8 = load i32, i32* %r1.global-to-local, align 4
  %v4_c2b8 = add i32 %v3_c2b8, 6
  %v5_c2b8 = inttoptr i32 %v4_c2b8 to i8*
  store i8 64, i8* %v5_c2b8, align 1
  %v0_c2c0.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t20 = trunc i32 %v0_c2c0.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c250, %bb
  %v0_c2c0.off0 = phi i8 [ %extract.t, %dec_label_pc_c250 ], [ %extract.t20, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c2c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2c0 = add i32 %v2_c2c0, 2
  %v4_c2c0 = inttoptr i32 %v3_c2c0 to i8*
  store i8 %v0_c2c0.off0, i8* %v4_c2c0, align 1
  store i32 %v4_c21c, i32* %ip.global-to-local, align 4
  %v0_c2c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2c8, label %bb78, label %bb77

bb77:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb78

bb78:                                             ; preds = %.thread, %bb77
  %v0_c2cc = load i32, i32* %r3.global-to-local, align 4
  %v1_c2cc = trunc i32 %v0_c2cc to i8
  %v2_c2cc = load i32, i32* %r1.global-to-local, align 4
  %v3_c2cc = add i32 %v2_c2cc, 9
  %v4_c2cc = inttoptr i32 %v3_c2cc to i8*
  store i8 %v1_c2cc, i8* %v4_c2cc, align 1
  %v0_c2d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2d0, label %bb80, label %bb79

bb79:                                             ; preds = %bb78
  %v1_c2d0 = load i32, i32* %r2.global-to-local, align 4
  %v2_c2d0 = trunc i32 %v1_c2d0 to i8
  %v3_c2d0 = load i32, i32* %r1.global-to-local, align 4
  %v4_c2d0 = add i32 %v3_c2d0, 7
  %v5_c2d0 = inttoptr i32 %v4_c2d0 to i8*
  store i8 %v2_c2d0, i8* %v5_c2d0, align 1
  br label %bb80

bb80:                                             ; preds = %bb78, %bb79
  %v3_c2d4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2d4, i32* %r2.global-to-local, align 4
  %v0_c2d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_c2d8 = trunc i32 %v0_c2d8 to i8
  %v2_c2d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2d8 = add i32 %v2_c2d8, 4
  %v4_c2d8 = inttoptr i32 %v3_c2d8 to i8*
  store i8 %v1_c2d8, i8* %v4_c2d8, align 1
  store i32 %v6_c0e4, i32* %ip.global-to-local, align 4
  %v0_c2e0 = load i32, i32* %r2.global-to-local, align 4
  %v3_c2e0 = mul i32 %v0_c2e0, 32
  store i32 %v3_c2e0, i32* %r3.global-to-local, align 4
  %v1_c2e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_c2e4 = add i32 %v1_c2e4, 12
  %v3_c2e4 = inttoptr i32 %v2_c2e4 to i32*
  store i32 %v6_c0e4, i32* %v3_c2e4, align 4
  %v0_c2e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c2e8 = load i32, i32* %r2.global-to-local, align 4
  %tmp89 = mul i32 %v1_c2e8, -8
  %v5_c2e8 = add i32 %v0_c2e8, %tmp89
  %v1_c2ec = load i32, i32* @r8, align 4
  %v2_c2ec = add i32 %v1_c2ec, %v5_c2e8
  store i32 %v2_c2ec, i32* %r3.global-to-local, align 4
  %v1_c2f0 = add i32 %v2_c2ec, 16
  %v2_c2f0 = inttoptr i32 %v1_c2f0 to i32*
  %v3_c2f0 = load i32, i32* %v2_c2f0, align 4
  %v1_c2f4 = load i32, i32* %r1.global-to-local, align 4
  %v2_c2f4 = add i32 %v1_c2f4, 16
  %v3_c2f4 = inttoptr i32 %v2_c2f4 to i32*
  store i32 %v3_c2f0, i32* %v3_c2f4, align 4
  store i32 %v4_c2f8, i32* %r2.global-to-local, align 4
  %v0_c2fc = load i32, i32* @r4, align 4
  %v1_c2fc = trunc i32 %v0_c2fc to i8
  %v2_c2fc = load i32, i32* %r1.global-to-local, align 4
  %v3_c2fc = add i32 %v2_c2fc, 5
  %v4_c2fc = inttoptr i32 %v3_c2fc to i8*
  store i8 %v1_c2fc, i8* %v4_c2fc, align 1
  %v0_c300 = load i32, i32* %r2.global-to-local, align 4
  %v1_c300 = trunc i32 %v0_c300 to i8
  %v2_c300 = load i32, i32* %r1.global-to-local, align 4
  %v3_c300 = add i32 %v2_c300, 20
  %v4_c300 = inttoptr i32 %v3_c300 to i8*
  store i8 %v1_c300, i8* %v4_c300, align 1
  %v0_c304 = load i32, i32* %r1.global-to-local, align 4
  %v1_c304 = add i32 %v0_c304, 20
  store i32 %v1_c304, i32* @r6, align 4
  %v1_c308 = add i32 %v0_c304, 33
  %v2_c308 = inttoptr i32 %v1_c308 to i8*
  %v3_c308 = load i8, i8* %v2_c308, align 1
  %v4_c308 = zext i8 %v3_c308 to i32
  store i32 %v1_c1d8, i32* %ip.global-to-local, align 4
  %v1_c310 = and i32 %v4_c308, 223
  %v5_c314 = or i32 %v1_c310, %v4_c314
  store i32 %v5_c314, i32* %r3.global-to-local, align 4
  %v1_c318 = trunc i32 %v5_c314 to i8
  store i8 %v1_c318, i8* %v2_c308, align 1
  %v0_c31c = load i32, i32* @r6, align 4
  %v1_c31c = add i32 %v0_c31c, 13
  %v2_c31c = inttoptr i32 %v1_c31c to i8*
  %v3_c31c = load i8, i8* %v2_c31c, align 1
  %v4_c31c = zext i8 %v3_c31c to i32
  %v0_c320 = load i32, i32* %r1.global-to-local, align 4
  %v1_c320 = add i32 %v0_c320, 40
  store i32 %v1_c320, i32* @r7, align 4
  store i32 %v1_c1dc, i32* %r1.global-to-local, align 4
  %v1_c328 = and i32 %v4_c31c, 239
  %v5_c32c = or i32 %v1_c328, %v4_c32c
  store i32 %v5_c32c, i32* %r2.global-to-local, align 4
  %v1_c330 = trunc i32 %v5_c32c to i8
  store i8 %v1_c330, i8* %v2_c31c, align 1
  %v0_c334 = load i32, i32* @r6, align 4
  %v1_c334 = add i32 %v0_c334, 13
  %v2_c334 = inttoptr i32 %v1_c334 to i8*
  %v3_c334 = load i8, i8* %v2_c334, align 1
  %v4_c334 = zext i8 %v3_c334 to i32
  store i32 %v1_c1e0, i32* %r2.global-to-local, align 4
  %v1_c33c = and i32 %v4_c334, 247
  %v5_c340 = or i32 %v1_c33c, %v4_c340
  store i32 %v5_c340, i32* %r3.global-to-local, align 4
  %v1_c344 = trunc i32 %v5_c340 to i8
  store i8 %v1_c344, i8* %v2_c334, align 1
  %v0_c348 = load i32, i32* @r6, align 4
  %v1_c348 = add i32 %v0_c348, 13
  %v2_c348 = inttoptr i32 %v1_c348 to i8*
  %v3_c348 = load i8, i8* %v2_c348, align 1
  %v4_c348 = zext i8 %v3_c348 to i32
  store i32 %v1_c200, i32* %r3.global-to-local, align 4
  %v1_c350 = and i32 %v4_c348, 251
  %v5_c354 = or i32 %v1_c350, %v4_c354
  store i32 %v5_c354, i32* %r2.global-to-local, align 4
  %v1_c358 = trunc i32 %v5_c354 to i8
  store i8 %v1_c358, i8* %v2_c348, align 1
  %v0_c35c = load i32, i32* @r6, align 4
  %v1_c35c = add i32 %v0_c35c, 13
  %v2_c35c = inttoptr i32 %v1_c35c to i8*
  %v3_c35c = load i8, i8* %v2_c35c, align 1
  %v4_c35c = zext i8 %v3_c35c to i32
  store i32 %v1_c210, i32* %ip.global-to-local, align 4
  %v1_c364 = and i32 %v4_c35c, 253
  %v4_c368 = or i32 %v1_c364, %v3_c368
  store i32 %v4_c368, i32* %r3.global-to-local, align 4
  %v1_c36c = trunc i32 %v4_c368 to i8
  store i8 %v1_c36c, i8* %v2_c35c, align 1
  %v0_c370 = load i32, i32* @r6, align 4
  %v1_c370 = add i32 %v0_c370, 12
  %v2_c370 = inttoptr i32 %v1_c370 to i8*
  %v3_c370 = load i8, i8* %v2_c370, align 1
  %v4_c370 = zext i8 %v3_c370 to i32
  store i32 %v4_c370, i32* %r2.global-to-local, align 4
  %v1_c374 = add i32 %v0_c370, 13
  %v2_c374 = inttoptr i32 %v1_c374 to i8*
  %v3_c374 = load i8, i8* %v2_c374, align 1
  %v4_c374 = zext i8 %v3_c374 to i32
  store i32 %v1_c224, i32* %r1.global-to-local, align 4
  %tmp90 = urem i8 %v3_c370, 16
  %v1_c37c = zext i8 %tmp90 to i32
  %v1_c380 = and i32 %v4_c374, 254
  %v2_c384 = or i32 %v1_c380, %v1_c224
  store i32 %v2_c384, i32* %r3.global-to-local, align 4
  %v1_c388 = or i32 %v1_c37c, 80
  store i32 %v1_c388, i32* %r2.global-to-local, align 4
  %v1_c38c = trunc i32 %v2_c384 to i8
  store i8 %v1_c38c, i8* %v2_c374, align 1
  %v0_c390 = load i32, i32* %r2.global-to-local, align 4
  %v1_c390 = trunc i32 %v0_c390 to i8
  %v2_c390 = load i32, i32* @r6, align 4
  %v3_c390 = add i32 %v2_c390, 12
  %v4_c390 = inttoptr i32 %v3_c390 to i8*
  store i8 %v1_c390, i8* %v4_c390, align 1
  store i32 %v5_c1d4, i32* %r2.global-to-local, align 4
  %v0_c398 = load i32, i32* @fp, align 4
  %v1_c398 = trunc i32 %v0_c398 to i8
  %v2_c398 = load i32, i32* @r6, align 4
  %v3_c398 = add i32 %v2_c398, 1
  %v4_c398 = inttoptr i32 %v3_c398 to i8*
  store i8 %v1_c398, i8* %v4_c398, align 1
  %v0_c39c = load i32, i32* %r2.global-to-local, align 4
  %v1_c39c = load i32, i32* @r6, align 4
  %v2_c39c = add i32 %v1_c39c, 4
  %v3_c39c = inttoptr i32 %v2_c39c to i32*
  store i32 %v0_c39c, i32* %v3_c39c, align 4
  %v0_c3a0 = load i32, i32* @r5, align 4
  %v1_c3a0 = trunc i32 %v0_c3a0 to i8
  %v2_c3a0 = load i32, i32* @r6, align 4
  %v3_c3a0 = add i32 %v2_c3a0, 2
  %v4_c3a0 = inttoptr i32 %v3_c3a0 to i8*
  store i8 %v1_c3a0, i8* %v4_c3a0, align 1
  %v0_c3a4 = load i32, i32* @sb, align 4
  %v1_c3a4 = trunc i32 %v0_c3a4 to i8
  %v2_c3a4 = load i32, i32* @r6, align 4
  %v3_c3a4 = add i32 %v2_c3a4, 3
  %v4_c3a4 = inttoptr i32 %v3_c3a4 to i8*
  store i8 %v1_c3a4, i8* %v4_c3a4, align 1
  %v0_c3a8 = call i32 @function_f8e8()
  store i32 %v1_c214, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c3a8, 16777216
  %v1_c3b0 = sdiv i32 %sext, 16777216
  store i32 %v1_c3b0, i32* %r2.global-to-local, align 4
  %v3_c3b4 = ashr i32 %sext, 31
  store i32 %v3_c3b4, i32* %r3.global-to-local, align 4
  store i1 %v2_c3b8, i1* %cpsr_z.global-to-local, align 1
  %v1_c3bc = trunc i32 %v3_c3b4 to i8
  %v2_c3bc = load i32, i32* @r6, align 4
  %v3_c3bc = add i32 %v2_c3bc, 15
  %v4_c3bc = inttoptr i32 %v3_c3bc to i8*
  store i8 %v1_c3bc, i8* %v4_c3bc, align 1
  %v0_c3c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3c0, label %.thread10, label %bb81

bb81:                                             ; preds = %bb80
  %v1_c3c0 = load i32, i32* @r6, align 4
  %v2_c3c0 = add i32 %v1_c3c0, 13
  %v3_c3c0 = inttoptr i32 %v2_c3c0 to i8*
  %v4_c3c0 = load i8, i8* %v3_c3c0, align 1
  %v5_c3c0 = zext i8 %v4_c3c0 to i32
  %v2_c3c4 = or i32 %v5_c3c0, 8
  store i32 %v2_c3c4, i32* %r3.global-to-local, align 4
  %v2_c3c8 = trunc i32 %v2_c3c4 to i8
  store i8 %v2_c3c8, i8* %v3_c3c0, align 1
  br label %.thread10

.thread10:                                        ; preds = %bb80, %bb81
  %v0_c3cc = load i32, i32* @sl, align 4
  store i32 %v0_c3cc, i32* %r1.global-to-local, align 4
  %v0_c3d0 = load i32, i32* @r7, align 4
  %v0_c3d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3d4 = trunc i32 %v0_c3d4 to i8
  %v2_c3d4 = load i32, i32* @r6, align 4
  %v3_c3d4 = add i32 %v2_c3d4, 14
  %v4_c3d4 = inttoptr i32 %v3_c3d4 to i8*
  store i8 %v1_c3d4, i8* %v4_c3d4, align 1
  %v2_c3d8 = call i32 @function_f99c(i32 %v0_c3d0, i32 %v0_c3cc)
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_c3e0 = load i32, i32* @r7, align 4
  %v3_c3e0 = load i32, i32* @sl, align 4
  %v4_c3e0 = add i32 %v3_c3e0, %v2_c3e0
  %v5_c3e0 = inttoptr i32 %v4_c3e0 to i8*
  store i8 0, i8* %v5_c3e0, align 1
  %v3_c3e4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3e4, i32* %r3.global-to-local, align 4
  store i32 %v1_bee8, i32* %r2.global-to-local, align 4
  %v1_c3ec = add i32 %v3_c3e4, 1
  store i32 %v1_c3ec, i32* @r7, align 4
  %v9_c3f0 = icmp eq i32 %v1_bee8, %v1_c3ec
  store i1 %v9_c3f0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c3ec, i32* %stack_var_-40, align 4
  %v8_c3f8 = icmp sgt i32 %v1_bee8, %v1_c3ec
  br i1 %v8_c3f8, label %dec_label_pc_c250, label %dec_label_pc_c3fc.preheader

dec_label_pc_c3fc.preheader:                      ; preds = %.thread10, %dec_label_pc_c140
  %v2_c43c = icmp eq i32 %v6_c0e4, -1
  %v7_c43c = icmp eq i32 %v6_c0e4, -1
  %v9_c5d4 = icmp eq i32 %v3_c158, add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1)
  %v2_c650 = icmp eq i32 %v1_c0d0, 0
  br label %dec_label_pc_c3fc

dec_label_pc_c3fc:                                ; preds = %dec_label_pc_c3fc.preheader, %dec_label_pc_c674
  store i32 %v1_bee8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_c164, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c164, label %dec_label_pc_c674, label %dec_label_pc_c410

dec_label_pc_c410:                                ; preds = %dec_label_pc_c3fc
  %v0_c410 = load i32, i32* @sl, align 4
  %v1_c410 = add i32 %v0_c410, 20
  store i32 %v1_c410, i32* @sb, align 4
  %tmp82 = mul i32 %v1_c410, 256
  %v1_c41c = and i32 %tmp82, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_c41c, i32* %r3.global-to-local, align 4
  %tmp83 = udiv i32 %v1_c410, 256
  %v4_c420 = urem i32 %tmp83, 256
  %v5_c420 = or i32 %v4_c420, %v1_c41c
  store i32 %v5_c420, i32* %r2.global-to-local, align 4
  %v1_c428 = add i32 %v0_c410, 40
  store i32 %v1_c428, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c538

dec_label_pc_c438:                                ; preds = %dec_label_pc_c538
  store i32 %v6_c0e4, i32* %r1.global-to-local, align 4
  store i1 %v7_c43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c43c, label %dec_label_pc_c5c4, label %dec_label_pc_c444

dec_label_pc_c444:                                ; preds = %dec_label_pc_c55c, %dec_label_pc_c438
  store i32 %v3_c158, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_c5d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c5d4, label %dec_label_pc_c5e0, label %dec_label_pc_c458

dec_label_pc_c458:                                ; preds = %dec_label_pc_c5c4.dec_label_pc_c458_crit_edge, %dec_label_pc_c444
  %v1_c45c = phi i32 [ %v1_c45c.pre, %dec_label_pc_c5c4.dec_label_pc_c458_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), %dec_label_pc_c444 ]
  store i32 %v3_c15c, i32* %r3.global-to-local, align 4
  %v9_c45c = icmp eq i32 %v3_c15c, %v1_c45c
  store i1 %v9_c45c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c45c, label %dec_label_pc_c5fc, label %dec_label_pc_c464

dec_label_pc_c464:                                ; preds = %dec_label_pc_c5e0.dec_label_pc_c464_crit_edge, %dec_label_pc_c458
  %v1_c468 = phi i32 [ %v1_c468.pre, %dec_label_pc_c5e0.dec_label_pc_c464_crit_edge ], [ %v1_c45c, %dec_label_pc_c458 ]
  store i32 %v3_c160, i32* %ip.global-to-local, align 4
  %v9_c468 = icmp eq i32 %v3_c160, %v1_c468
  store i1 %v9_c468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c468, label %dec_label_pc_c618, label %dec_label_pc_c470

dec_label_pc_c470:                                ; preds = %dec_label_pc_c5fc.dec_label_pc_c470_crit_edge, %dec_label_pc_c464
  %v1_c474 = phi i32 [ %v1_c474.pre, %dec_label_pc_c5fc.dec_label_pc_c470_crit_edge ], [ %v1_c468, %dec_label_pc_c464 ]
  store i32 %v6_bfe4, i32* %r1.global-to-local, align 4
  %v9_c474 = icmp eq i32 %v6_bfe4, %v1_c474
  store i1 %v9_c474, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c474, label %dec_label_pc_c634, label %dec_label_pc_c47c

dec_label_pc_c47c:                                ; preds = %dec_label_pc_c618.dec_label_pc_c47c_crit_edge, %dec_label_pc_c470
  %v1_c480 = phi i32 [ %v1_c480.pre, %dec_label_pc_c618.dec_label_pc_c47c_crit_edge ], [ %v1_c474, %dec_label_pc_c470 ]
  store i32 %v6_c000, i32* %r2.global-to-local, align 4
  %v9_c480 = icmp eq i32 %v6_c000, %v1_c480
  store i1 %v9_c480, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c480, label %dec_label_pc_c648, label %dec_label_pc_c488

dec_label_pc_c488:                                ; preds = %dec_label_pc_c634, %dec_label_pc_c47c
  store i32 %v1_c0d0, i32* %r3.global-to-local, align 4
  store i1 %v2_c650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c650, label %dec_label_pc_c494, label %dec_label_pc_c65c

dec_label_pc_c494:                                ; preds = %dec_label_pc_c488, %dec_label_pc_c648, %dec_label_pc_c65c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c498 = load i32, i32* @r7, align 4
  %v1_c498 = trunc i32 %v0_c498 to i8
  %v2_c498 = load i32, i32* @r5, align 4
  %v3_c498 = add i32 %v2_c498, 10
  %v4_c498 = inttoptr i32 %v3_c498 to i8*
  store i8 %v1_c498, i8* %v4_c498, align 1
  %v0_c49c = load i32, i32* @r7, align 4
  %v1_c49c = trunc i32 %v0_c49c to i8
  %v2_c49c = load i32, i32* @r5, align 4
  %v3_c49c = add i32 %v2_c49c, 11
  %v4_c49c = inttoptr i32 %v3_c49c to i8*
  store i8 %v1_c49c, i8* %v4_c49c, align 1
  %v0_c4a0 = load i32, i32* @r5, align 4
  store i32 %v0_c4a0, i32* @r0, align 4
  %v2_c4a4 = call i32 @function_e4b8(i32 %v0_c4a0, i32 20)
  %v3_c4a4 = trunc i32 %v2_c4a4 to i8
  %v4_c4a822 = udiv i32 %v2_c4a4, 256
  %v1_c4ac = trunc i32 %v4_c4a822 to i8
  %v2_c4ac = load i32, i32* @r5, align 4
  %v3_c4ac = add i32 %v2_c4ac, 11
  %v4_c4ac = inttoptr i32 %v3_c4ac to i8*
  store i8 %v1_c4ac, i8* %v4_c4ac, align 1
  %v3_c4b0 = load i32, i32* @r5, align 4
  %v4_c4b0 = add i32 %v3_c4b0, 10
  %v5_c4b0 = inttoptr i32 %v4_c4b0 to i8*
  store i8 %v3_c4a4, i8* %v5_c4b0, align 1
  %v0_c4b4 = load i32, i32* @r6, align 4
  store i32 %v0_c4b4, i32* @r1, align 4
  store i32 %v5_c420, i32* %r2.global-to-local, align 4
  %v0_c4bc = load i32, i32* @sb, align 4
  store i32 %v0_c4bc, i32* %r3.global-to-local, align 4
  %v0_c4c0 = load i32, i32* @r7, align 4
  %v1_c4c0 = trunc i32 %v0_c4c0 to i8
  %v3_c4c0 = add i32 %v0_c4b4, 16
  %v4_c4c0 = inttoptr i32 %v3_c4c0 to i8*
  store i8 %v1_c4c0, i8* %v4_c4c0, align 1
  %v0_c4c4 = load i32, i32* @r7, align 4
  %v1_c4c4 = trunc i32 %v0_c4c4 to i8
  %v2_c4c4 = load i32, i32* @r6, align 4
  %v3_c4c4 = add i32 %v2_c4c4, 17
  %v4_c4c4 = inttoptr i32 %v3_c4c4 to i8*
  store i8 %v1_c4c4, i8* %v4_c4c4, align 1
  %v0_c4c8 = load i32, i32* @r5, align 4
  %v4_c4cc = call i32 @function_e514(i32 %v0_c4c8, i32 %v0_c4b4, i32 %v5_c420, i32 %v0_c4bc)
  %v5_c4cc = trunc i32 %v4_c4cc to i8
  %v4_c4d023 = udiv i32 %v4_c4cc, 256
  %v1_c4d4 = trunc i32 %v4_c4d023 to i8
  %v2_c4d4 = load i32, i32* @r6, align 4
  %v3_c4d4 = add i32 %v2_c4d4, 17
  %v4_c4d4 = inttoptr i32 %v3_c4d4 to i8*
  store i8 %v1_c4d4, i8* %v4_c4d4, align 1
  %v3_c4d8 = load i32, i32* @r6, align 4
  %v4_c4d8 = add i32 %v3_c4d8, 16
  %v5_c4d8 = inttoptr i32 %v4_c4d8 to i8*
  store i8 %v5_c4cc, i8* %v5_c4d8, align 1
  %v3_c4dc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c4dc, i32* %r3.global-to-local, align 4
  %v0_c4e0 = load i32, i32* @r5, align 4
  %v1_c4e0 = add i32 %v0_c4e0, 20
  %v2_c4e0 = inttoptr i32 %v1_c4e0 to i32*
  %v3_c4e0 = load i32, i32* %v2_c4e0, align 4
  %v3_c4e8 = udiv i32 %v3_c4e0, 65536
  store i32 %v3_c4e8, i32* %r2.global-to-local, align 4
  %v5_c4ec = mul i32 %v3_c4dc, 24
  %v1_c4f0 = load i32, i32* @r8, align 4
  %v2_c4f0 = add i32 %v1_c4f0, %v5_c4ec
  store i32 %v2_c4f0, i32* %ip.global-to-local, align 4
  %v3_c4f421 = udiv i32 %v3_c4e0, 16777216
  %v1_c4f8 = trunc i32 %v3_c4f421 to i8
  %v3_c4f8 = add i32 %v2_c4f0, 3
  %v4_c4f8 = inttoptr i32 %v3_c4f8 to i8*
  store i8 %v1_c4f8, i8* %v4_c4f8, align 1
  %v0_c4fc = load i32, i32* %r2.global-to-local, align 4
  %v1_c4fc = trunc i32 %v0_c4fc to i8
  %v2_c4fc = load i32, i32* %ip.global-to-local, align 4
  %v3_c4fc = add i32 %v2_c4fc, 2
  %v4_c4fc = inttoptr i32 %v3_c4fc to i8*
  store i8 %v1_c4fc, i8* %v4_c4fc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c504 = load i32, i32* @r5, align 4
  store i32 %v0_c504, i32* %r1.global-to-local, align 4
  %v0_c50c = load i32, i32* @fp, align 4
  store i32 %v0_c50c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c514 = load i32, i32* %ip.global-to-local, align 4
  %v6_c51c = inttoptr i32 %v0_c504 to i32*
  %v7_c51c = call i32 @function_13e78(i32 %v3_c108, i32* %v6_c51c, i32 %v0_c50c, i32 16384, i32 %v0_c514, i32 16)
  %v3_c520 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c520, i32* %r3.global-to-local, align 4
  store i32 %v1_bee8, i32* %ip.global-to-local, align 4
  %v1_c528 = add i32 %v3_c520, 1
  %v9_c52c = icmp eq i32 %v1_bee8, %v1_c528
  store i1 %v9_c52c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c528, i32* %stack_var_-40, align 4
  %v7_c534 = icmp sgt i32 %v1_bee8, %v1_c528
  br i1 %v7_c534, label %dec_label_pc_c538, label %dec_label_pc_c674

dec_label_pc_c538:                                ; preds = %dec_label_pc_c494, %dec_label_pc_c410
  %v1_c54c = phi i32 [ %v1_c528, %dec_label_pc_c494 ], [ 0, %dec_label_pc_c410 ]
  %v5_c53c = mul i32 %v1_c54c, 24
  %v1_c540 = load i32, i32* @r8, align 4
  %v2_c540 = add i32 %v1_c540, %v5_c53c
  store i32 %v2_c540, i32* %r3.global-to-local, align 4
  store i32 %v2_bf14, i32* %ip.global-to-local, align 4
  %v1_c548 = add i32 %v2_c540, 20
  %v2_c548 = inttoptr i32 %v1_c548 to i8*
  %v3_c548 = load i8, i8* %v2_c548, align 1
  %v4_c548 = zext i8 %v3_c548 to i32
  store i32 %v4_c548, i32* %r2.global-to-local, align 4
  %v4_c54c = mul i32 %v1_c54c, 4
  %v5_c54c = add i32 %v4_c54c, %v2_bf14
  %v6_c54c = inttoptr i32 %v5_c54c to i32*
  %v7_c54c = load i32, i32* %v6_c54c, align 4
  store i32 %v7_c54c, i32* @r5, align 4
  %v2_c550 = icmp ugt i8 %v3_c548, 30
  %v7_c550 = icmp eq i8 %v3_c548, 31
  store i1 %v7_c550, i1* %cpsr_z.global-to-local, align 1
  %v1_c554 = add i32 %v7_c54c, 20
  store i32 %v1_c554, i32* @r6, align 4
  %v2_c558 = xor i1 %v7_c550, true
  %v3_c558 = and i1 %v2_c550, %v2_c558
  br i1 %v3_c558, label %dec_label_pc_c438, label %dec_label_pc_c55c

dec_label_pc_c55c:                                ; preds = %dec_label_pc_c538
  %v1_c55c = add i32 %v2_c540, 16
  %v2_c55c = inttoptr i32 %v1_c55c to i32*
  %v3_c55c = load i32, i32* %v2_c55c, align 4
  %v0_c560 = call i32 @function_f8e8()
  %v3_c564 = load i32, i32* %stack_var_-40, align 4
  %v5_c56c = mul i32 %v3_c564, 24
  %v1_c574 = load i32, i32* @r8, align 4
  %v2_c574 = add i32 %v1_c574, %v5_c56c
  store i32 %v2_c574, i32* %r1.global-to-local, align 4
  %v1_c578 = and i32 %v3_c55c, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_c578, i32* %r3.global-to-local, align 4
  %v1_c570 = udiv i32 %v3_c55c, 256
  %v3_c57c = and i32 %v1_c570, 65280
  store i32 %v3_c57c, i32* %r2.global-to-local, align 4
  %v3_c580 = mul i32 %v3_c55c, 16777216
  store i32 %v3_c580, i32* %ip.global-to-local, align 4
  %v1_c584 = add i32 %v2_c574, 20
  %v2_c584 = inttoptr i32 %v1_c584 to i8*
  %v3_c584 = load i8, i8* %v2_c584, align 1
  %v4_c584 = zext i8 %v3_c584 to i32
  %v4_c588 = mul i32 %v1_c578, 256
  %v5_c588 = or i32 %v4_c588, %v3_c580
  store i32 %v5_c588, i32* %ip.global-to-local, align 4
  %v4_c58c = udiv i32 %v3_c55c, 16777216
  %v5_c58c = or i32 %v3_c57c, %v4_c58c
  %v2_c590 = or i32 %v5_c58c, %v5_c588
  %v7_c594 = lshr i32 %v0_c560, %v4_c584
  %v8_c594 = add i32 %v7_c594, %v2_c590
  store i32 %v8_c594, i32* %r2.global-to-local, align 4
  %v2_c5b0 = call i32 @llvm.bswap.i32(i32 %v8_c594)
  store i32 %v2_c5b0, i32* %r3.global-to-local, align 4
  store i32 %v6_c0e4, i32* %r1.global-to-local, align 4
  store i1 %v7_c43c, i1* %cpsr_z.global-to-local, align 1
  %v1_c5bc = load i32, i32* @r5, align 4
  %v2_c5bc = add i32 %v1_c5bc, 16
  %v3_c5bc = inttoptr i32 %v2_c5bc to i32*
  store i32 %v2_c5b0, i32* %v3_c5bc, align 4
  br i1 %v2_c43c, label %dec_label_pc_c5c4, label %dec_label_pc_c444

dec_label_pc_c5c4:                                ; preds = %dec_label_pc_c55c, %dec_label_pc_c438
  %v0_c5c4 = call i32 @function_f8e8()
  store i32 %v3_c158, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_c5d4, i1* %cpsr_z.global-to-local, align 1
  %v1_c5d8 = load i32, i32* @r5, align 4
  %v2_c5d8 = add i32 %v1_c5d8, 12
  %v3_c5d8 = inttoptr i32 %v2_c5d8 to i32*
  store i32 %v0_c5c4, i32* %v3_c5d8, align 4
  br i1 %v9_c5d4, label %dec_label_pc_c5e0, label %dec_label_pc_c5c4.dec_label_pc_c458_crit_edge

dec_label_pc_c5c4.dec_label_pc_c458_crit_edge:    ; preds = %dec_label_pc_c5c4
  %v1_c45c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c458

dec_label_pc_c5e0:                                ; preds = %dec_label_pc_c5c4, %dec_label_pc_c444
  %v0_c5e0 = call i32 @function_f8e8()
  %v1_c5e0 = trunc i32 %v0_c5e0 to i8
  %v4_c5e424 = udiv i32 %v0_c5e0, 256
  %v1_c5e8 = trunc i32 %v4_c5e424 to i8
  %v2_c5e8 = load i32, i32* @r5, align 4
  %v3_c5e8 = add i32 %v2_c5e8, 5
  %v4_c5e8 = inttoptr i32 %v3_c5e8 to i8*
  store i8 %v1_c5e8, i8* %v4_c5e8, align 1
  store i32 %v3_c15c, i32* %r3.global-to-local, align 4
  %v1_c5f0 = load i32, i32* @r4, align 4
  %v9_c5f0 = icmp eq i32 %v3_c15c, %v1_c5f0
  store i1 %v9_c5f0, i1* %cpsr_z.global-to-local, align 1
  %v3_c5f4 = load i32, i32* @r5, align 4
  %v4_c5f4 = add i32 %v3_c5f4, 4
  %v5_c5f4 = inttoptr i32 %v4_c5f4 to i8*
  store i8 %v1_c5e0, i8* %v5_c5f4, align 1
  %v0_c5f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5f8, label %dec_label_pc_c5fc, label %dec_label_pc_c5e0.dec_label_pc_c464_crit_edge

dec_label_pc_c5e0.dec_label_pc_c464_crit_edge:    ; preds = %dec_label_pc_c5e0
  %v1_c468.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c464

dec_label_pc_c5fc:                                ; preds = %dec_label_pc_c5e0, %dec_label_pc_c458
  %v0_c5fc = call i32 @function_f8e8()
  %v1_c5fc = trunc i32 %v0_c5fc to i8
  store i32 %v3_c160, i32* %ip.global-to-local, align 4
  %v4_c604 = sdiv i32 %v0_c5fc, 256
  store i32 %v4_c604, i32* %r3.global-to-local, align 4
  %v1_c608 = load i32, i32* @r4, align 4
  %v9_c608 = icmp eq i32 %v3_c160, %v1_c608
  store i1 %v9_c608, i1* %cpsr_z.global-to-local, align 1
  %v3_c60c = load i32, i32* @r5, align 4
  %v4_c60c = add i32 %v3_c60c, 20
  %v5_c60c = inttoptr i32 %v4_c60c to i8*
  store i8 %v1_c5fc, i8* %v5_c60c, align 1
  %v0_c610 = load i32, i32* %r3.global-to-local, align 4
  %v1_c610 = trunc i32 %v0_c610 to i8
  %v2_c610 = load i32, i32* @r6, align 4
  %v3_c610 = add i32 %v2_c610, 1
  %v4_c610 = inttoptr i32 %v3_c610 to i8*
  store i8 %v1_c610, i8* %v4_c610, align 1
  %v0_c614 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c614, label %dec_label_pc_c618, label %dec_label_pc_c5fc.dec_label_pc_c470_crit_edge

dec_label_pc_c5fc.dec_label_pc_c470_crit_edge:    ; preds = %dec_label_pc_c5fc
  %v1_c474.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c470

dec_label_pc_c618:                                ; preds = %dec_label_pc_c5fc, %dec_label_pc_c464
  %v0_c618 = call i32 @function_f8e8()
  %v1_c618 = trunc i32 %v0_c618 to i8
  store i32 %v6_bfe4, i32* %r1.global-to-local, align 4
  %v4_c620 = sdiv i32 %v0_c618, 256
  store i32 %v4_c620, i32* %r3.global-to-local, align 4
  %v1_c624 = load i32, i32* @r4, align 4
  %v9_c624 = icmp eq i32 %v6_bfe4, %v1_c624
  store i1 %v9_c624, i1* %cpsr_z.global-to-local, align 1
  %v1_c628 = trunc i32 %v4_c620 to i8
  %v2_c628 = load i32, i32* @r6, align 4
  %v3_c628 = add i32 %v2_c628, 3
  %v4_c628 = inttoptr i32 %v3_c628 to i8*
  store i8 %v1_c628, i8* %v4_c628, align 1
  %v3_c62c = load i32, i32* @r6, align 4
  %v4_c62c = add i32 %v3_c62c, 2
  %v5_c62c = inttoptr i32 %v4_c62c to i8*
  store i8 %v1_c618, i8* %v5_c62c, align 1
  %v0_c630 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c630, label %dec_label_pc_c634, label %dec_label_pc_c618.dec_label_pc_c47c_crit_edge

dec_label_pc_c618.dec_label_pc_c47c_crit_edge:    ; preds = %dec_label_pc_c618
  %v1_c480.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c47c

dec_label_pc_c634:                                ; preds = %dec_label_pc_c618, %dec_label_pc_c470
  %v0_c634 = call i32 @function_f8e8()
  store i32 %v6_c000, i32* %r2.global-to-local, align 4
  %v1_c63c = load i32, i32* @r4, align 4
  %v9_c63c = icmp eq i32 %v6_c000, %v1_c63c
  store i1 %v9_c63c, i1* %cpsr_z.global-to-local, align 1
  %v1_c640 = load i32, i32* @r6, align 4
  %v2_c640 = add i32 %v1_c640, 4
  %v3_c640 = inttoptr i32 %v2_c640 to i32*
  store i32 %v0_c634, i32* %v3_c640, align 4
  br i1 %v9_c63c, label %dec_label_pc_c648, label %dec_label_pc_c488

dec_label_pc_c648:                                ; preds = %dec_label_pc_c634, %dec_label_pc_c47c
  %v0_c648 = call i32 @function_f8e8()
  store i32 %v1_c0d0, i32* %r3.global-to-local, align 4
  store i1 %v2_c650, i1* %cpsr_z.global-to-local, align 1
  %v1_c654 = load i32, i32* @r6, align 4
  %v2_c654 = add i32 %v1_c654, 8
  %v3_c654 = inttoptr i32 %v2_c654 to i32*
  store i32 %v0_c648, i32* %v3_c654, align 4
  br i1 %v2_c650, label %dec_label_pc_c494, label %dec_label_pc_c65c

dec_label_pc_c65c:                                ; preds = %dec_label_pc_c488, %dec_label_pc_c648
  %v0_c65c = load i32, i32* @r5, align 4
  %v1_c65c = add i32 %v0_c65c, 40
  store i32 %v1_c65c, i32* @r4, align 4
  %v0_c664 = load i32, i32* @sl, align 4
  store i32 %v0_c664, i32* %r1.global-to-local, align 4
  %v2_c668 = call i32 @function_f99c(i32 %v1_c65c, i32 %v0_c664)
  %v0_c66c = load i32, i32* @r7, align 4
  %v1_c66c = trunc i32 %v0_c66c to i8
  %v2_c66c = load i32, i32* @r4, align 4
  %v3_c66c = load i32, i32* @sl, align 4
  %v4_c66c = add i32 %v3_c66c, %v2_c66c
  %v5_c66c = inttoptr i32 %v4_c66c to i8*
  store i8 %v1_c66c, i8* %v5_c66c, align 1
  br label %dec_label_pc_c494

dec_label_pc_c674:                                ; preds = %dec_label_pc_c494, %dec_label_pc_c3fc
  %v2_c678 = call i32 @function_138c0(i32* null)
  store i32 %v2_c0f4, i32* %r1.global-to-local, align 4
  %v9_c680 = icmp eq i32 %v2_c0f4, %v2_c678
  store i1 %v9_c680, i1* %cpsr_z.global-to-local, align 1
  %v6_c684 = icmp slt i32 %v2_c0f4, %v2_c678
  br i1 %v6_c684, label %dec_label_pc_c688, label %dec_label_pc_c3fc

dec_label_pc_c688:                                ; preds = %dec_label_pc_c674, %dec_label_pc_bee4, %dec_label_pc_c690
  %v29_c68c = phi i32 [ %v3_c108, %dec_label_pc_bee4 ], [ %v1_c694, %dec_label_pc_c690 ], [ %v2_c678, %dec_label_pc_c674 ]
  store i32 %v18_bee4, i32* %sb.global-to-local, align 4
  store i32 %v24_bee4, i32* %fp.global-to-local, align 4
  ret i32 %v29_c68c

dec_label_pc_c690:                                ; preds = %dec_label_pc_c118
  %v1_c694 = call i32 @function_135f0(i32 %v3_c108)
  br label %dec_label_pc_c688

; uselistorder directives
  uselistorder i32 %v4_c620, { 1, 0 }
  uselistorder i32 %v2_c5b0, { 1, 0 }
  uselistorder i32 %v3_c580, { 1, 0 }
  uselistorder i32 %v3_c55c, { 2, 3, 1, 0 }
  uselistorder i32 %v1_c528, { 1, 2, 0, 3 }
  uselistorder i32 %v0_c4b4, { 1, 0, 2 }
  uselistorder i32 %v1_c410, { 1, 0, 2 }
  uselistorder i1 %v2_c650, { 2, 3, 1, 0 }
  uselistorder i1 %v9_c5d4, { 2, 3, 1, 0 }
  uselistorder i1 %v7_c43c, { 2, 1, 0 }
  uselistorder i32 %v1_c3ec, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c224, { 1, 0 }
  uselistorder i32 %v1_c214, { 1, 2, 0 }
  uselistorder i32 %v1_c210, { 2, 0, 1 }
  uselistorder i32 %v1_c200, { 1, 0 }
  uselistorder i32 %v1_c1e0, { 1, 0 }
  uselistorder i32 %v1_c1dc, { 1, 0 }
  uselistorder i32 %v1_c1d8, { 1, 0 }
  uselistorder i32 %v1_c1b4, { 2, 0, 1 }
  uselistorder i1 %v2_c164, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c158, { 1, 2, 0, 3 }
  uselistorder i32 %v0_c150, { 0, 1, 3, 2 }
  uselistorder i1 %v7_c138, { 1, 0 }
  uselistorder i1 %v7_c10c, { 1, 0 }
  uselistorder i32 %v3_c108, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_c0f4, { 2, 1, 0 }
  uselistorder i32 %v6_c0e4, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_c0d0, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_c000, { 3, 2, 1, 0 }
  uselistorder i32 %v6_bfe4, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_bf94, { 1, 0 }
  uselistorder i8 %v5_bf84, { 1, 0 }
  uselistorder i32 %v6_bf68, { 1, 0 }
  uselistorder i32 %v7_bf50, { 0, 2, 1 }
  uselistorder i32 %v6_bf2c, { 1, 0 }
  uselistorder i32 %v2_bf14, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bee8, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 51, 50, 53, 52, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_c688, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c65c, { 1, 0 }
  uselistorder label %dec_label_pc_c494, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c3fc, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb78, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c6a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c6a0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c6a0 = load i32, i32* @r4, align 4
  %v12_c6a0 = load i32, i32* @r7, align 4
  %v1_c6a4 = urem i32 %arg2, 256
  store i32 %v1_c6a4, i32* %fp.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_c6a4, i32* %r0.global-to-local, align 4
  %v1_c6bc = urem i32 %arg4, 256
  store i32 %v1_c6bc, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_c6cc = call i32 @function_141c8(i32 %v1_c6a4, i32 4)
  %v0_c6d0 = load i32, i32* @r5, align 4
  store i32 %v0_c6d0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c6d8 = load i32, i32* @r7, align 4
  store i32 %v0_c6d8, i32* %r3.global-to-local, align 4
  store i32 %v2_c6cc, i32* %sb.global-to-local, align 4
  %v0_c6e0 = load i32, i32* @r4, align 4
  store i32 %v0_c6e0, i32* %r0.global-to-local, align 4
  %v4_c6e4 = inttoptr i32 %v0_c6d0 to i32*
  %v5_c6e4 = call i32 @function_a054(i32 %v0_c6e0, i32* %v4_c6e4, i32 2, i32 %v0_c6d8)
  %v1_c6f0 = urem i32 %v5_c6e4, 256
  store i32 %v1_c6f0, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c6fc = load i32, i32* @r5, align 4
  store i32 %v0_c6fc, i32* %r1.global-to-local, align 4
  %v0_c700 = load i32, i32* @r4, align 4
  store i32 %v0_c700, i32* %r0.global-to-local, align 4
  %v5_c704 = trunc i32 %v5_c6e4 to i8
  %v6_c708 = inttoptr i32 %v0_c6fc to i32*
  %v7_c708 = call i32 @function_a054(i32 %v0_c700, i32* %v6_c708, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_c70c = load i32, i32* @r5, align 4
  store i32 %v0_c70c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c71c = load i32, i32* @r4, align 4
  store i32 %v0_c71c, i32* %r0.global-to-local, align 4
  %v5_c720 = inttoptr i32 %v0_c70c to i32*
  %v6_c720 = call i32 @function_a054(i32 %v0_c71c, i32* %v5_c720, i32 4, i32 64)
  %v1_c728 = urem i32 %v6_c720, 256
  store i32 %v1_c728, i32* %ip.global-to-local, align 4
  %v0_c72c = load i32, i32* @r5, align 4
  store i32 %v0_c72c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c738 = load i32, i32* @r4, align 4
  store i32 %v0_c738, i32* %r0.global-to-local, align 4
  %v6_c740 = inttoptr i32 %v0_c72c to i32*
  %v7_c740 = call i32 @function_a054(i32 %v0_c738, i32* %v6_c740, i32 5, i32 1)
  %v1_c74c = urem i32 %v7_c740, 256
  store i32 %v1_c74c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c758 = load i32, i32* @r5, align 4
  store i32 %v0_c758, i32* %r1.global-to-local, align 4
  %v0_c75c = load i32, i32* @r4, align 4
  store i32 %v0_c75c, i32* %r0.global-to-local, align 4
  %v5_c764 = inttoptr i32 %v0_c758 to i32*
  %v6_c764 = call i32 @function_a054(i32 %v0_c75c, i32* %v5_c764, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_c770 = load i32, i32* @r5, align 4
  store i32 %v0_c770, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c77c = load i32, i32* @r4, align 4
  store i32 %v0_c77c, i32* %r0.global-to-local, align 4
  %v5_c780 = inttoptr i32 %v0_c770 to i32*
  %v6_c780 = call i32 @function_a054(i32 %v0_c77c, i32* %v5_c780, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_c78c = load i32, i32* @r5, align 4
  store i32 %v0_c78c, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c798 = load i32, i32* @r4, align 4
  store i32 %v0_c798, i32* %r0.global-to-local, align 4
  %v5_c79c = inttoptr i32 %v0_c78c to i32*
  %v6_c79c = call i32 @function_a054(i32 %v0_c798, i32* %v5_c79c, i32 16, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_c7a0 = load i32, i32* @r5, align 4
  store i32 %v0_c7a0, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_c7ac = load i32, i32* @r7, align 4
  store i32 %v0_c7ac, i32* %r3.global-to-local, align 4
  %v0_c7b0 = load i32, i32* @r4, align 4
  store i32 %v0_c7b0, i32* %r0.global-to-local, align 4
  %v5_c7b4 = inttoptr i32 %v0_c7a0 to i32*
  %v6_c7b4 = call i32 @function_a054(i32 %v0_c7b0, i32* %v5_c7b4, i32 17, i32 %v0_c7ac)
  %v0_c7b8 = load i32, i32* @r5, align 4
  store i32 %v0_c7b8, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_c7c4 = load i32, i32* @r7, align 4
  store i32 %v0_c7c4, i32* %r3.global-to-local, align 4
  %v0_c7c8 = load i32, i32* @r4, align 4
  store i32 %v0_c7c8, i32* %r0.global-to-local, align 4
  %v5_c7cc = inttoptr i32 %v0_c7b8 to i32*
  %v6_c7cc = call i32 @function_a054(i32 %v0_c7c8, i32* %v5_c7cc, i32 10, i32 %v0_c7c4)
  %v0_c7d0 = load i32, i32* @r5, align 4
  store i32 %v0_c7d0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v0_c7dc = load i32, i32* @r7, align 4
  store i32 %v0_c7dc, i32* %r3.global-to-local, align 4
  %v0_c7e0 = load i32, i32* @r4, align 4
  store i32 %v0_c7e0, i32* %r0.global-to-local, align 4
  %v5_c7e4 = inttoptr i32 %v0_c7d0 to i32*
  %v6_c7e4 = call i32 @function_a054(i32 %v0_c7e0, i32* %v5_c7e4, i32 11, i32 %v0_c7dc)
  %v0_c7e8 = load i32, i32* @r5, align 4
  store i32 %v0_c7e8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_c7f4 = load i32, i32* @r7, align 4
  store i32 %v0_c7f4, i32* %r3.global-to-local, align 4
  %v0_c7f8 = load i32, i32* @r4, align 4
  store i32 %v0_c7f8, i32* %r0.global-to-local, align 4
  %v5_c7fc = inttoptr i32 %v0_c7e8 to i32*
  %v6_c7fc = call i32 @function_a054(i32 %v0_c7f8, i32* %v5_c7fc, i32 12, i32 %v0_c7f4)
  %v0_c800 = load i32, i32* @r5, align 4
  store i32 %v0_c800, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_c80c = load i32, i32* @r7, align 4
  store i32 %v0_c80c, i32* %r3.global-to-local, align 4
  %v0_c810 = load i32, i32* @r4, align 4
  store i32 %v0_c810, i32* %r0.global-to-local, align 4
  %v5_c814 = inttoptr i32 %v0_c800 to i32*
  %v6_c814 = call i32 @function_a054(i32 %v0_c810, i32* %v5_c814, i32 13, i32 %v0_c80c)
  %v0_c818 = load i32, i32* @r5, align 4
  store i32 %v0_c818, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c828 = load i32, i32* @r4, align 4
  store i32 %v0_c828, i32* %r0.global-to-local, align 4
  %v5_c82c = inttoptr i32 %v0_c818 to i32*
  %v6_c82c = call i32 @function_a054(i32 %v0_c828, i32* %v5_c82c, i32 14, i32 1)
  %v0_c830 = load i32, i32* @r5, align 4
  store i32 %v0_c830, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_c83c = load i32, i32* @r7, align 4
  store i32 %v0_c83c, i32* %r3.global-to-local, align 4
  %v0_c840 = load i32, i32* @r4, align 4
  store i32 %v0_c840, i32* %r0.global-to-local, align 4
  %v5_c844 = inttoptr i32 %v0_c830 to i32*
  %v6_c844 = call i32 @function_a054(i32 %v0_c840, i32* %v5_c844, i32 15, i32 %v0_c83c)
  %v0_c84c = load i32, i32* @r5, align 4
  store i32 %v0_c84c, i32* %r1.global-to-local, align 4
  %v2_c850 = load i32, i32* @global_var_1f238.84, align 4
  store i32 %v2_c850, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_c85c = load i32, i32* @r4, align 4
  store i32 %v0_c85c, i32* %r0.global-to-local, align 4
  %v5_c860 = inttoptr i32 %v0_c84c to i32*
  %v6_c860 = call i32 @function_9fe8(i32 %v0_c85c, i32* %v5_c860, i32 24, i32 %v2_c850, i32 %v6_c844)
  %v0_c868 = load i32, i32* @r7, align 4
  store i32 %v0_c868, i32* %r0.global-to-local, align 4
  %v1_c86c = inttoptr i32 %v0_c868 to i32*
  %v2_c86c = call i32 @function_138c0(i32* %v1_c86c)
  %v1_c870 = load i32, i32* @r6, align 4
  %v2_c870 = add i32 %v1_c870, %v2_c86c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c884 = call i32 @function_13edc(i32 2, i32 3, i32 6)
  store i32 %v3_c884, i32* %r0.global-to-local, align 4
  %v7_c888 = icmp eq i32 %v3_c884, -1
  store i1 %v7_c888, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c884, i32* %sl.global-to-local, align 4
  br i1 %v7_c888, label %dec_label_pc_ce04, label %dec_label_pc_c894

dec_label_pc_c894:                                ; preds = %dec_label_pc_c6a0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c89c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c89c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_c8a4 = load i32, i32* @r7, align 4
  store i32 %v0_c8a4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c8b0 = call i32 @function_13eac(i32 %v3_c884, i32 %v0_c8a4, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c8b0, i32* %r0.global-to-local, align 4
  %v7_c8b4 = icmp eq i32 %v6_c8b0, -1
  store i1 %v7_c8b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c8b4, label %dec_label_pc_ce0c, label %dec_label_pc_c8bc

dec_label_pc_c8bc:                                ; preds = %dec_label_pc_c894
  %v3_c8d0 = mul i32 %v6_c764, 65536
  store i32 %v3_c8d0, i32* @r4, align 4
  %v3_c8d4 = urem i32 %v7_c708, 65536
  store i32 %v3_c8d4, i32* %ip.global-to-local, align 4
  %v3_c8d8 = urem i32 %v6_c764, 65536
  store i32 %v3_c8d8, i32* %r0.global-to-local, align 4
  %v3_c8dc = urem i32 %v6_c780, 65536
  store i32 %v3_c8dc, i32* %r2.global-to-local, align 4
  %v1_c8e0 = urem i32 %v6_c7cc, 256
  store i32 %v1_c8e0, i32* %r3.global-to-local, align 4
  %v0_c8e4 = load i32, i32* %fp.global-to-local, align 4
  %v2_c8e4 = icmp eq i32 %v0_c8e4, 0
  store i1 %v2_c8e4, i1* %cpsr_z.global-to-local, align 1
  %v0_c8e8 = load i32, i32* @r7, align 4
  store i32 %v0_c8e8, i32* %stack_var_-40, align 4
  %tmp69 = icmp slt i32 %v0_c8e4, 1
  br i1 %tmp69, label %dec_label_pc_cba4.preheader, label %dec_label_pc_c900

dec_label_pc_c900:                                ; preds = %dec_label_pc_c8bc
  %v1_c908 = urem i32 %v7_c708, 256
  %v1_c91c = urem i32 %v6_c780, 256
  %tmp70 = mul i32 %v6_c79c, 256
  %v1_c924 = and i32 %tmp70, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp71 = udiv i32 %v6_c79c, 256
  %v4_c928 = urem i32 %tmp71, 256
  %v5_c928 = or i32 %v4_c928, %v1_c924
  %v3_c92c = mul nuw nsw i32 %v1_c91c, 256
  %tmp72 = udiv i32 %v6_c780, 256
  %v4_c938 = urem i32 %tmp72, 256
  %v5_c938 = or i32 %v4_c938, %v3_c92c
  store i32 %v5_c938, i32* @r6, align 4
  %v1_c918 = mul i32 %v6_c764, 256
  %v3_c93c = and i32 %v1_c918, 65280
  store i32 %v3_c93c, i32* %r1.global-to-local, align 4
  %v3_c948 = mul nuw nsw i32 %v1_c908, 256
  %tmp73 = udiv i32 %v6_c764, 256
  %v1_c950 = urem i32 %v6_c7cc, 2
  %tmp74 = udiv i32 %v7_c708, 256
  %v4_c954 = urem i32 %tmp74, 256
  %v5_c954 = or i32 %v4_c954, %v3_c948
  store i32 %v5_c954, i32* @lr, align 4
  %v1_c95c = urem i32 %v6_c7e4, 2
  %v1_c960 = urem i32 %v6_c814, 2
  %sext11 = mul i32 %tmp73, 16777216
  %v4_c97c = sdiv i32 %sext11, 16777216
  %v1_c980 = urem i32 %v6_c7fc, 2
  %v1_c984 = urem i32 %v6_c82c, 2
  %v1_c990 = urem i32 %v6_c844, 2
  store i32 %v1_c990, i32* %r0.global-to-local, align 4
  store i32 %v1_c908, i32* %r2.global-to-local, align 4
  %v3_c998 = ashr i32 %sext11, 31
  store i32 %v3_c998, i32* %r3.global-to-local, align 4
  store i32 %v1_c91c, i32* %ip.global-to-local, align 4
  %v5_c9ac = trunc i32 %v3_c998 to i8
  store i32 %v0_c8e8, i32* @r4, align 4
  store i32 %v0_c8e8, i32* @r5, align 4
  store i32 6, i32* @r7, align 4
  %sext = mul i32 %v6_c720, 16777216
  %v4_ca08 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v7_c708, 16777216
  %v4_ca14 = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %tmp74, 16777216
  %v4_ca18 = sdiv i32 %sext9, 16777216
  %tmp = sub nsw i32 0, %v1_c950
  %v4_ca74 = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_c95c
  %v4_ca88 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_c980
  %v4_ca9c = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_c960
  %v4_cab0 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_c984
  %v3_cac4 = and i32 %tmp81, 2
  %sext10 = mul i32 %v6_c780, 16777216
  %v7_caf4 = sdiv i32 %sext10, 16777216
  br label %dec_label_pc_c9c0

dec_label_pc_c9c0:                                ; preds = %bb76, %dec_label_pc_c900
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c9c8 = call i32 @function_141c8(i32 128, i32 1)
  store i32 %v2_c9c8, i32* %r0.global-to-local, align 4
  %v3_c9cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c9cc, i32* %r2.global-to-local, align 4
  %v1_c9d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_c9d0 = load i32, i32* @r4, align 4
  %v5_c9d0 = mul i32 %v2_c9d0, 4
  %v6_c9d0 = add i32 %v5_c9d0, %v1_c9d0
  %v7_c9d0 = inttoptr i32 %v6_c9d0 to i32*
  store i32 %v2_c9c8, i32* %v7_c9d0, align 4
  %v0_c9d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_c9d4 = load i32, i32* %r2.global-to-local, align 4
  %v4_c9d4 = mul i32 %v1_c9d4, 4
  %v5_c9d4 = add i32 %v4_c9d4, %v0_c9d4
  %v6_c9d4 = inttoptr i32 %v5_c9d4 to i32*
  %v7_c9d4 = load i32, i32* %v6_c9d4, align 4
  store i32 %v7_c9d4, i32* %r4.global-to-local, align 4
  %v1_c9d8 = inttoptr i32 %v7_c9d4 to i8*
  %v2_c9d8 = load i8, i8* %v1_c9d8, align 1
  %tmp82 = urem i8 %v2_c9d8, 16
  %v1_c9dc = zext i8 %tmp82 to i32
  %v1_c9e0 = or i32 %v1_c9dc, 64
  store i32 %v1_c9e0, i32* %r3.global-to-local, align 4
  %v1_c9e4 = trunc i32 %v1_c9e0 to i8
  store i8 %v1_c9e4, i8* %v1_c9d8, align 1
  %v0_c9e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c9e8 = inttoptr i32 %v0_c9e8 to i8*
  %v2_c9e8 = load i8, i8* %v1_c9e8, align 1
  %v1_c9ec = and i8 %v2_c9e8, -16
  %v1_c9f0 = or i8 %v1_c9ec, 5
  store i32 %v1_c74c, i32* %r0.global-to-local, align 4
  store i8 %v1_c9f0, i8* %v1_c9e8, align 1
  %v2_ca00 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca00 = add i32 %v2_ca00, 1
  %v4_ca00 = inttoptr i32 %v3_ca00 to i8*
  store i8 %v5_c704, i8* %v4_ca00, align 1
  %v0_ca04 = load i32, i32* %r0.global-to-local, align 4
  %v2_ca04 = icmp eq i32 %v0_ca04, 0
  store i1 %v2_ca04, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_ca08, i32* %r0.global-to-local, align 4
  %v2_ca10 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca10 = add i32 %v2_ca10, 3
  %v4_ca10 = inttoptr i32 %v3_ca10 to i8*
  store i8 60, i8* %v4_ca10, align 1
  store i32 %v4_ca14, i32* %ip.global-to-local, align 4
  store i32 %v4_ca18, i32* %r3.global-to-local, align 4
  %v0_ca1c = load i32, i32* %r0.global-to-local, align 4
  %v1_ca1c = trunc i32 %v0_ca1c to i8
  %v2_ca1c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca1c = add i32 %v2_ca1c, 8
  %v4_ca1c = inttoptr i32 %v3_ca1c to i8*
  store i8 %v1_ca1c, i8* %v4_ca1c, align 1
  %v0_ca20 = load i32, i32* @r7, align 4
  %v1_ca20 = trunc i32 %v0_ca20 to i8
  %v2_ca20 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca20 = add i32 %v2_ca20, 9
  %v4_ca20 = inttoptr i32 %v3_ca20 to i8*
  store i8 %v1_ca20, i8* %v4_ca20, align 1
  %v3_ca24 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca24, i32* %r2.global-to-local, align 4
  %v0_ca28 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca28 = trunc i32 %v0_ca28 to i8
  %v2_ca28 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca28 = add i32 %v2_ca28, 4
  %v4_ca28 = inttoptr i32 %v3_ca28 to i8*
  store i8 %v1_ca28, i8* %v4_ca28, align 1
  %v0_ca2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca2c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c9c0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ca30 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca30 = add i32 %v3_ca30, 6
  %v5_ca30 = inttoptr i32 %v4_ca30 to i8*
  store i8 64, i8* %v5_ca30, align 1
  %v0_ca50.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c9c0, %bb
  %v0_ca50 = phi i1 [ true, %dec_label_pc_c9c0 ], [ %v0_ca50.pre, %bb ]
  %v0_ca34 = load i32, i32* %r2.global-to-local, align 4
  %v5_ca38 = mul i32 %v0_ca34, 24
  store i32 %v5_ca38, i32* %r3.global-to-local, align 4
  store i32 %v6_c860, i32* %r2.global-to-local, align 4
  %v1_ca40 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca40 = add i32 %v1_ca40, 12
  %v3_ca40 = inttoptr i32 %v2_ca40 to i32*
  store i32 %v6_c860, i32* %v3_ca40, align 4
  %v0_ca44 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca44 = load i32, i32* @r8, align 4
  %v2_ca44 = add i32 %v1_ca44, %v0_ca44
  store i32 %v2_ca44, i32* %r3.global-to-local, align 4
  %v1_ca48 = add i32 %v2_ca44, 16
  %v2_ca48 = inttoptr i32 %v1_ca48 to i32*
  %v3_ca48 = load i32, i32* %v2_ca48, align 4
  store i32 %v3_ca48, i32* %r2.global-to-local, align 4
  store i32 %v4_c97c, i32* %r3.global-to-local, align 4
  br i1 %v0_ca50, label %bb76, label %bb75

bb75:                                             ; preds = %.thread
  %v1_ca50 = load i32, i32* @r5, align 4
  %v2_ca50 = trunc i32 %v1_ca50 to i8
  %v3_ca50 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca50 = add i32 %v3_ca50, 7
  %v5_ca50 = inttoptr i32 %v4_ca50 to i8*
  store i8 %v2_ca50, i8* %v5_ca50, align 1
  br label %bb76

bb76:                                             ; preds = %.thread, %bb75
  %v0_ca54 = load i32, i32* %ip.global-to-local, align 4
  %v1_ca54 = trunc i32 %v0_ca54 to i8
  %v2_ca54 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca54 = add i32 %v2_ca54, 5
  %v4_ca54 = inttoptr i32 %v3_ca54 to i8*
  store i8 %v1_ca54, i8* %v4_ca54, align 1
  %v0_ca58 = load i32, i32* @r5, align 4
  %v1_ca58 = trunc i32 %v0_ca58 to i8
  %v2_ca58 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca58 = add i32 %v2_ca58, 2
  %v4_ca58 = inttoptr i32 %v3_ca58 to i8*
  store i8 %v1_ca58, i8* %v4_ca58, align 1
  %v0_ca5c = load i32, i32* %r2.global-to-local, align 4
  %v1_ca5c = load i32, i32* %r4.global-to-local, align 4
  %v2_ca5c = add i32 %v1_ca5c, 16
  %v3_ca5c = inttoptr i32 %v2_ca5c to i32*
  store i32 %v0_ca5c, i32* %v3_ca5c, align 4
  %v0_ca60 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca60 = trunc i32 %v0_ca60 to i8
  %v2_ca60 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca60 = add i32 %v2_ca60, 20
  %v4_ca60 = inttoptr i32 %v3_ca60 to i8*
  store i8 %v1_ca60, i8* %v4_ca60, align 1
  %v0_ca64 = load i32, i32* %r4.global-to-local, align 4
  %v1_ca64 = add i32 %v0_ca64, 20
  store i32 %v1_ca64, i32* %r1.global-to-local, align 4
  %v1_ca68 = add i32 %v0_ca64, 33
  %v2_ca68 = inttoptr i32 %v1_ca68 to i8*
  %v3_ca68 = load i8, i8* %v2_ca68, align 1
  %v4_ca68 = zext i8 %v3_ca68 to i32
  store i32 %v1_c950, i32* %ip.global-to-local, align 4
  %v1_ca70 = and i32 %v4_ca68, 223
  %v5_ca74 = or i32 %v1_ca70, %v4_ca74
  store i32 %v5_ca74, i32* %r3.global-to-local, align 4
  %v1_ca78 = trunc i32 %v5_ca74 to i8
  store i8 %v1_ca78, i8* %v2_ca68, align 1
  %v0_ca7c = load i32, i32* %r1.global-to-local, align 4
  %v1_ca7c = add i32 %v0_ca7c, 13
  %v2_ca7c = inttoptr i32 %v1_ca7c to i8*
  %v3_ca7c = load i8, i8* %v2_ca7c, align 1
  %v4_ca7c = zext i8 %v3_ca7c to i32
  store i32 %v1_c95c, i32* %r0.global-to-local, align 4
  %v1_ca84 = and i32 %v4_ca7c, 239
  %v5_ca88 = or i32 %v1_ca84, %v4_ca88
  store i32 %v5_ca88, i32* %r2.global-to-local, align 4
  %v1_ca8c = trunc i32 %v5_ca88 to i8
  store i8 %v1_ca8c, i8* %v2_ca7c, align 1
  %v0_ca90 = load i32, i32* %r1.global-to-local, align 4
  %v1_ca90 = add i32 %v0_ca90, 13
  %v2_ca90 = inttoptr i32 %v1_ca90 to i8*
  %v3_ca90 = load i8, i8* %v2_ca90, align 1
  %v4_ca90 = zext i8 %v3_ca90 to i32
  store i32 %v1_c980, i32* %r2.global-to-local, align 4
  %v1_ca98 = and i32 %v4_ca90, 247
  %v5_ca9c = or i32 %v1_ca98, %v4_ca9c
  store i32 %v5_ca9c, i32* %r3.global-to-local, align 4
  %v1_caa0 = trunc i32 %v5_ca9c to i8
  store i8 %v1_caa0, i8* %v2_ca90, align 1
  %v0_caa4 = load i32, i32* %r1.global-to-local, align 4
  %v1_caa4 = add i32 %v0_caa4, 13
  %v2_caa4 = inttoptr i32 %v1_caa4 to i8*
  %v3_caa4 = load i8, i8* %v2_caa4, align 1
  %v4_caa4 = zext i8 %v3_caa4 to i32
  store i32 %v1_c960, i32* %r3.global-to-local, align 4
  %v1_caac = and i32 %v4_caa4, 251
  %v5_cab0 = or i32 %v1_caac, %v4_cab0
  store i32 %v5_cab0, i32* %r2.global-to-local, align 4
  %v1_cab4 = trunc i32 %v5_cab0 to i8
  store i8 %v1_cab4, i8* %v2_caa4, align 1
  %v0_cab8 = load i32, i32* %r1.global-to-local, align 4
  %v1_cab8 = add i32 %v0_cab8, 13
  %v2_cab8 = inttoptr i32 %v1_cab8 to i8*
  %v3_cab8 = load i8, i8* %v2_cab8, align 1
  %v4_cab8 = zext i8 %v3_cab8 to i32
  store i32 %v1_c984, i32* %ip.global-to-local, align 4
  %v1_cac0 = and i32 %v4_cab8, 253
  %v4_cac4 = or i32 %v1_cac0, %v3_cac4
  store i32 %v4_cac4, i32* %r3.global-to-local, align 4
  %v1_cac8 = trunc i32 %v4_cac4 to i8
  store i8 %v1_cac8, i8* %v2_cab8, align 1
  %v0_cacc = load i32, i32* %r1.global-to-local, align 4
  %v1_cacc = add i32 %v0_cacc, 12
  %v2_cacc = inttoptr i32 %v1_cacc to i8*
  %v3_cacc = load i8, i8* %v2_cacc, align 1
  %v4_cacc = zext i8 %v3_cacc to i32
  store i32 %v4_cacc, i32* %r2.global-to-local, align 4
  %v1_cad0 = add i32 %v0_cacc, 13
  %v2_cad0 = inttoptr i32 %v1_cad0 to i8*
  %v3_cad0 = load i8, i8* %v2_cad0, align 1
  %v4_cad0 = zext i8 %v3_cad0 to i32
  %tmp83 = urem i8 %v3_cacc, 16
  %v1_cad8 = zext i8 %tmp83 to i32
  %v1_cadc = and i32 %v4_cad0, 254
  %v2_cae0 = or i32 %v1_cadc, %v1_c990
  %v1_cae4 = or i32 %v1_cad8, 160
  store i32 %v1_cae4, i32* %r2.global-to-local, align 4
  %v1_cae8 = trunc i32 %v2_cae0 to i8
  store i8 %v1_cae8, i8* %v2_cad0, align 1
  %v0_caec = load i32, i32* %r2.global-to-local, align 4
  %v1_caec = trunc i32 %v0_caec to i8
  %v2_caec = load i32, i32* %r1.global-to-local, align 4
  %v3_caec = add i32 %v2_caec, 12
  %v4_caec = inttoptr i32 %v3_caec to i8*
  store i8 %v1_caec, i8* %v4_caec, align 1
  store i32 %v7_caf4, i32* %r3.global-to-local, align 4
  store i32 %v5_c928, i32* %ip.global-to-local, align 4
  %v2_cafc = load i32, i32* %r1.global-to-local, align 4
  %v3_cafc = add i32 %v2_cafc, 1
  %v4_cafc = inttoptr i32 %v3_cafc to i8*
  store i8 %v5_c9ac, i8* %v4_cafc, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_cb08 = load i32, i32* %r3.global-to-local, align 4
  %v1_cb08 = trunc i32 %v0_cb08 to i8
  %v2_cb08 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb08 = add i32 %v2_cb08, 3
  %v4_cb08 = inttoptr i32 %v3_cb08 to i8*
  store i8 %v1_cb08, i8* %v4_cb08, align 1
  %v0_cb0c = load i32, i32* %ip.global-to-local, align 4
  %v1_cb0c = load i32, i32* %r1.global-to-local, align 4
  %v2_cb0c = add i32 %v1_cb0c, 4
  %v3_cb0c = inttoptr i32 %v2_cb0c to i32*
  store i32 %v0_cb0c, i32* %v3_cb0c, align 4
  %v0_cb10 = load i32, i32* @r6, align 4
  %v1_cb10 = trunc i32 %v0_cb10 to i8
  %v2_cb10 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb10 = add i32 %v2_cb10, 2
  %v4_cb10 = inttoptr i32 %v3_cb10 to i8*
  store i8 %v1_cb10, i8* %v4_cb10, align 1
  %v0_cb14 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb14 = trunc i32 %v0_cb14 to i8
  %v2_cb14 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb14 = add i32 %v2_cb14, 41
  %v4_cb14 = inttoptr i32 %v3_cb14 to i8*
  store i8 %v1_cb14, i8* %v4_cb14, align 1
  %v0_cb18 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb18 = trunc i32 %v0_cb18 to i8
  %v2_cb18 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb18 = add i32 %v2_cb18, 40
  %v4_cb18 = inttoptr i32 %v3_cb18 to i8*
  store i8 %v1_cb18, i8* %v4_cb18, align 1
  %v0_cb1c = call i32 @function_f8e8()
  %v1_cb20 = urem i32 %v0_cb1c, 16
  %v1_cb24 = or i32 %v1_cb20, 1392
  %v1_cb28 = add nuw nsw i32 %v1_cb24, 8
  %v3_cb2c = mul nuw nsw i32 %v1_cb28, 65536
  store i32 %v3_cb2c, i32* %r0.global-to-local, align 4
  %v3_cb30 = mul nuw nsw i32 %v1_cb28, 256
  %v1_cb34 = and i32 %v3_cb30, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v5_cb38 = or i32 %v1_cb34, 5
  store i32 %v5_cb38, i32* %r3.global-to-local, align 4
  %v2_cb3c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb3c = add i32 %v2_cb3c, 42
  %v4_cb3c = inttoptr i32 %v3_cb3c to i8*
  store i8 5, i8* %v4_cb3c, align 1
  %v0_cb40 = load i32, i32* %r3.global-to-local, align 4
  %v3_cb40 = sdiv i32 %v0_cb40, 256
  store i32 %v3_cb40, i32* %r1.global-to-local, align 4
  %v0_cb44 = load i32, i32* %r4.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v1_cb4c = trunc i32 %v3_cb40 to i8
  %v3_cb4c = add i32 %v0_cb44, 43
  %v4_cb4c = inttoptr i32 %v3_cb4c to i8*
  store i8 %v1_cb4c, i8* %v4_cb4c, align 1
  store i32 2, i32* %ip.global-to-local, align 4
  %v0_cb54 = load i32, i32* %r3.global-to-local, align 4
  %v1_cb54 = trunc i32 %v0_cb54 to i8
  %v2_cb54 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb54 = add i32 %v2_cb54, 46
  %v4_cb54 = inttoptr i32 %v3_cb54 to i8*
  store i8 %v1_cb54, i8* %v4_cb54, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_cb60 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb60 = add i32 %v2_cb60, 47
  %v4_cb60 = inttoptr i32 %v3_cb60 to i8*
  store i8 10, i8* %v4_cb60, align 1
  %v0_cb64 = load i32, i32* %r3.global-to-local, align 4
  %v1_cb64 = trunc i32 %v0_cb64 to i8
  %v2_cb64 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb64 = add i32 %v2_cb64, 44
  %v4_cb64 = inttoptr i32 %v3_cb64 to i8*
  store i8 %v1_cb64, i8* %v4_cb64, align 1
  %v0_cb68 = load i32, i32* %ip.global-to-local, align 4
  %v1_cb68 = trunc i32 %v0_cb68 to i8
  %v2_cb68 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb68 = add i32 %v2_cb68, 45
  %v4_cb68 = inttoptr i32 %v3_cb68 to i8*
  store i8 %v1_cb68, i8* %v4_cb68, align 1
  %v0_cb6c = call i32 @function_f8e8()
  store i32 %v0_cb6c, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_cb78 = load i32, i32* %r4.global-to-local, align 4
  %v2_cb78 = add i32 %v1_cb78, 48
  %v3_cb78 = inttoptr i32 %v2_cb78 to i32*
  store i32 %v0_cb6c, i32* %v3_cb78, align 4
  %v0_cb7c = load i32, i32* %r3.global-to-local, align 4
  %v1_cb7c = trunc i32 %v0_cb7c to i8
  %v2_cb7c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb7c = add i32 %v2_cb7c, 56
  %v4_cb7c = inttoptr i32 %v3_cb7c to i8*
  store i8 %v1_cb7c, i8* %v4_cb7c, align 1
  %v0_cb80 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb80 = trunc i32 %v0_cb80 to i8
  %v2_cb80 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb80 = add i32 %v2_cb80, 58
  %v4_cb80 = inttoptr i32 %v3_cb80 to i8*
  store i8 %v1_cb80, i8* %v4_cb80, align 1
  %v0_cb84 = load i32, i32* @r7, align 4
  %v1_cb84 = trunc i32 %v0_cb84 to i8
  %v2_cb84 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb84 = add i32 %v2_cb84, 59
  %v4_cb84 = inttoptr i32 %v3_cb84 to i8*
  store i8 %v1_cb84, i8* %v4_cb84, align 1
  %v0_cb88 = load i32, i32* @r5, align 4
  %v1_cb88 = load i32, i32* %r4.global-to-local, align 4
  %v2_cb88 = add i32 %v1_cb88, 52
  %v3_cb88 = inttoptr i32 %v2_cb88 to i32*
  store i32 %v0_cb88, i32* %v3_cb88, align 4
  %v0_cb8c = load i32, i32* %r2.global-to-local, align 4
  %v1_cb8c = trunc i32 %v0_cb8c to i8
  %v2_cb8c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb8c = add i32 %v2_cb8c, 57
  %v4_cb8c = inttoptr i32 %v3_cb8c to i8*
  store i8 %v1_cb8c, i8* %v4_cb8c, align 1
  %v3_cb90 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cb90, i32* %r3.global-to-local, align 4
  %v1_cb94 = add i32 %v3_cb90, 1
  store i32 %v1_cb94, i32* @r4, align 4
  %v0_cb98 = load i32, i32* %fp.global-to-local, align 4
  %v9_cb98 = icmp eq i32 %v0_cb98, %v1_cb94
  store i1 %v9_cb98, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb94, i32* %stack_var_-40, align 4
  %v8_cba0 = icmp sgt i32 %v0_cb98, %v1_cb94
  br i1 %v8_cba0, label %dec_label_pc_c9c0, label %dec_label_pc_cba4.preheader

dec_label_pc_cba4.preheader:                      ; preds = %bb76, %dec_label_pc_c8bc
  %v0_cba814 = phi i32 [ %v0_c8e4, %dec_label_pc_c8bc ], [ %v0_cb98, %bb76 ]
  %v2_cbc4 = icmp eq i32 %v6_c860, -1
  %v7_cbc4 = icmp eq i32 %v6_c860, -1
  %v9_cd54 = icmp eq i32 %v3_c8d4, add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1)
  %v2_cdd0 = icmp eq i32 %v1_c8e0, 0
  br label %dec_label_pc_cba4

dec_label_pc_cba4:                                ; preds = %dec_label_pc_cdf0.dec_label_pc_cba4_crit_edge, %dec_label_pc_cba4.preheader
  %v0_cba8 = phi i32 [ %v0_cba8.pre, %dec_label_pc_cdf0.dec_label_pc_cba4_crit_edge ], [ %v0_cba814, %dec_label_pc_cba4.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_cba8 = icmp eq i32 %v0_cba8, 0
  store i1 %v2_cba8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp77 = icmp slt i32 %v0_cba8, 1
  br i1 %tmp77, label %dec_label_pc_cdf0, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %dec_label_pc_cba4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_ccbc

dec_label_pc_cbc0:                                ; preds = %dec_label_pc_ccbc
  store i32 %v6_c860, i32* %r0.global-to-local, align 4
  store i1 %v7_cbc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cbc4, label %dec_label_pc_cd44, label %dec_label_pc_cbcc

dec_label_pc_cbcc:                                ; preds = %dec_label_pc_ccdc, %dec_label_pc_cbc0
  store i32 %v3_c8d4, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_cd54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cd54, label %dec_label_pc_cd60, label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %dec_label_pc_cd44.dec_label_pc_cbe0_crit_edge, %dec_label_pc_cbcc
  %v1_cbe4 = phi i32 [ %v1_cbe4.pre, %dec_label_pc_cd44.dec_label_pc_cbe0_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), %dec_label_pc_cbcc ]
  store i32 %v3_c8d8, i32* %r3.global-to-local, align 4
  %v9_cbe4 = icmp eq i32 %v3_c8d8, %v1_cbe4
  store i1 %v9_cbe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbe4, label %dec_label_pc_cd7c, label %dec_label_pc_cbec

dec_label_pc_cbec:                                ; preds = %dec_label_pc_cd60.dec_label_pc_cbec_crit_edge, %dec_label_pc_cbe0
  %v1_cbf0 = phi i32 [ %v1_cbf0.pre, %dec_label_pc_cd60.dec_label_pc_cbec_crit_edge ], [ %v1_cbe4, %dec_label_pc_cbe0 ]
  store i32 %v3_c8dc, i32* %ip.global-to-local, align 4
  %v9_cbf0 = icmp eq i32 %v3_c8dc, %v1_cbf0
  store i1 %v9_cbf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbf0, label %dec_label_pc_cd98, label %dec_label_pc_cbf8

dec_label_pc_cbf8:                                ; preds = %dec_label_pc_cd7c.dec_label_pc_cbf8_crit_edge, %dec_label_pc_cbec
  %v1_cbfc = phi i32 [ %v1_cbfc.pre, %dec_label_pc_cd7c.dec_label_pc_cbf8_crit_edge ], [ %v1_cbf0, %dec_label_pc_cbec ]
  store i32 %v6_c79c, i32* %r0.global-to-local, align 4
  %v9_cbfc = icmp eq i32 %v6_c79c, %v1_cbfc
  store i1 %v9_cbfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbfc, label %dec_label_pc_cdb4, label %dec_label_pc_cc04

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cd98.dec_label_pc_cc04_crit_edge, %dec_label_pc_cbf8
  %v1_cc08 = phi i32 [ %v1_cc08.pre, %dec_label_pc_cd98.dec_label_pc_cc04_crit_edge ], [ %v1_cbfc, %dec_label_pc_cbf8 ]
  store i32 %v6_c7b4, i32* %r2.global-to-local, align 4
  %v9_cc08 = icmp eq i32 %v6_c7b4, %v1_cc08
  store i1 %v9_cc08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc08, label %dec_label_pc_cdc8, label %dec_label_pc_cc10

dec_label_pc_cc10:                                ; preds = %dec_label_pc_cdb4, %dec_label_pc_cc04
  store i32 %v1_c8e0, i32* %r3.global-to-local, align 4
  store i1 %v2_cdd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cdd0, label %dec_label_pc_cc1c, label %dec_label_pc_cddc

dec_label_pc_cc1c:                                ; preds = %dec_label_pc_cc10, %dec_label_pc_cdc8, %dec_label_pc_cddc
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cc20 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc20 = trunc i32 %v0_cc20 to i8
  %v2_cc20 = load i32, i32* @r5, align 4
  %v3_cc20 = add i32 %v2_cc20, 10
  %v4_cc20 = inttoptr i32 %v3_cc20 to i8*
  store i8 %v1_cc20, i8* %v4_cc20, align 1
  %v0_cc24 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc24 = trunc i32 %v0_cc24 to i8
  %v2_cc24 = load i32, i32* @r5, align 4
  %v3_cc24 = add i32 %v2_cc24, 11
  %v4_cc24 = inttoptr i32 %v3_cc24 to i8*
  store i8 %v1_cc24, i8* %v4_cc24, align 1
  %v0_cc28 = load i32, i32* @r5, align 4
  store i32 %v0_cc28, i32* @r0, align 4
  %v2_cc2c = call i32 @function_e4b8(i32 %v0_cc28, i32 20)
  %v3_cc2c = trunc i32 %v2_cc2c to i8
  %v4_cc3022 = udiv i32 %v2_cc2c, 256
  %v1_cc34 = trunc i32 %v4_cc3022 to i8
  %v2_cc34 = load i32, i32* @r5, align 4
  %v3_cc34 = add i32 %v2_cc34, 11
  %v4_cc34 = inttoptr i32 %v3_cc34 to i8*
  store i8 %v1_cc34, i8* %v4_cc34, align 1
  %v3_cc38 = load i32, i32* @r5, align 4
  %v4_cc38 = add i32 %v3_cc38, 10
  %v5_cc38 = inttoptr i32 %v4_cc38 to i8*
  store i8 %v3_cc2c, i8* %v5_cc38, align 1
  %v0_cc3c = load i32, i32* @r6, align 4
  store i32 %v0_cc3c, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_cc48 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc48 = trunc i32 %v0_cc48 to i8
  %v3_cc48 = add i32 %v0_cc3c, 16
  %v4_cc48 = inttoptr i32 %v3_cc48 to i8*
  store i8 %v1_cc48, i8* %v4_cc48, align 1
  %v0_cc4c = load i32, i32* %r7.global-to-local, align 4
  %v1_cc4c = trunc i32 %v0_cc4c to i8
  %v2_cc4c = load i32, i32* @r6, align 4
  %v3_cc4c = add i32 %v2_cc4c, 17
  %v4_cc4c = inttoptr i32 %v3_cc4c to i8*
  store i8 %v1_cc4c, i8* %v4_cc4c, align 1
  %v0_cc50 = load i32, i32* @r5, align 4
  store i32 %v0_cc50, i32* %r0.global-to-local, align 4
  %v4_cc54 = call i32 @function_e514(i32 %v0_cc50, i32 %v0_cc3c, i32 10240, i32 40)
  %v5_cc54 = trunc i32 %v4_cc54 to i8
  store i32 %v4_cc54, i32* %r0.global-to-local, align 4
  %v4_cc5823 = udiv i32 %v4_cc54, 256
  %v1_cc5c = trunc i32 %v4_cc5823 to i8
  %v2_cc5c = load i32, i32* @r6, align 4
  %v3_cc5c = add i32 %v2_cc5c, 17
  %v4_cc5c = inttoptr i32 %v3_cc5c to i8*
  store i8 %v1_cc5c, i8* %v4_cc5c, align 1
  %v3_cc60 = load i32, i32* @r6, align 4
  %v4_cc60 = add i32 %v3_cc60, 16
  %v5_cc60 = inttoptr i32 %v4_cc60 to i8*
  store i8 %v5_cc54, i8* %v5_cc60, align 1
  %v3_cc64 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc64, i32* %r3.global-to-local, align 4
  %v0_cc68 = load i32, i32* @r5, align 4
  %v1_cc68 = add i32 %v0_cc68, 20
  %v2_cc68 = inttoptr i32 %v1_cc68 to i32*
  %v3_cc68 = load i32, i32* %v2_cc68, align 4
  %v3_cc70 = udiv i32 %v3_cc68, 65536
  store i32 %v3_cc70, i32* %r2.global-to-local, align 4
  %v5_cc74 = mul i32 %v3_cc64, 24
  %v1_cc78 = load i32, i32* @r8, align 4
  %v2_cc78 = add i32 %v1_cc78, %v5_cc74
  store i32 %v2_cc78, i32* %ip.global-to-local, align 4
  %v3_cc7c21 = udiv i32 %v3_cc68, 16777216
  %v1_cc80 = trunc i32 %v3_cc7c21 to i8
  %v3_cc80 = add i32 %v2_cc78, 3
  %v4_cc80 = inttoptr i32 %v3_cc80 to i8*
  store i8 %v1_cc80, i8* %v4_cc80, align 1
  %v0_cc84 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc84 = trunc i32 %v0_cc84 to i8
  %v2_cc84 = load i32, i32* %ip.global-to-local, align 4
  %v3_cc84 = add i32 %v2_cc84, 2
  %v4_cc84 = inttoptr i32 %v3_cc84 to i8*
  store i8 %v1_cc84, i8* %v4_cc84, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cc8c = load i32, i32* @r5, align 4
  store i32 %v0_cc8c, i32* %r1.global-to-local, align 4
  %v0_cc90 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_cc90, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_cc9c = load i32, i32* %ip.global-to-local, align 4
  %v6_cca4 = inttoptr i32 %v0_cc8c to i32*
  %v7_cca4 = call i32 @function_13e78(i32 %v0_cc90, i32* %v6_cca4, i32 60, i32 16384, i32 %v0_cc9c, i32 16)
  %v3_cca8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cca8, i32* %r3.global-to-local, align 4
  %v1_ccac = add i32 %v3_cca8, 1
  store i32 %v1_ccac, i32* %r0.global-to-local, align 4
  %v0_ccb0 = load i32, i32* %fp.global-to-local, align 4
  %v9_ccb0 = icmp eq i32 %v0_ccb0, %v1_ccac
  store i1 %v9_ccb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ccac, i32* %stack_var_-40, align 4
  %v7_ccb8 = icmp sgt i32 %v0_ccb0, %v1_ccac
  br i1 %v7_ccb8, label %dec_label_pc_ccbc, label %dec_label_pc_cdf0

dec_label_pc_ccbc:                                ; preds = %dec_label_pc_cc1c, %dec_label_pc_cbb4
  %v1_cccc = phi i32 [ %v1_ccac, %dec_label_pc_cc1c ], [ 0, %dec_label_pc_cbb4 ]
  %v5_ccc0 = mul i32 %v1_cccc, 24
  %v1_ccc4 = load i32, i32* @r8, align 4
  %v2_ccc4 = add i32 %v1_ccc4, %v5_ccc0
  store i32 %v2_ccc4, i32* %r3.global-to-local, align 4
  %v1_ccc8 = add i32 %v2_ccc4, 20
  %v2_ccc8 = inttoptr i32 %v1_ccc8 to i8*
  %v3_ccc8 = load i8, i8* %v2_ccc8, align 1
  %v4_ccc8 = zext i8 %v3_ccc8 to i32
  store i32 %v4_ccc8, i32* %r2.global-to-local, align 4
  %v0_cccc = load i32, i32* %sb.global-to-local, align 4
  %v4_cccc = mul i32 %v1_cccc, 4
  %v5_cccc = add i32 %v0_cccc, %v4_cccc
  %v6_cccc = inttoptr i32 %v5_cccc to i32*
  %v7_cccc = load i32, i32* %v6_cccc, align 4
  store i32 %v7_cccc, i32* @r5, align 4
  %v2_ccd0 = icmp ugt i8 %v3_ccc8, 30
  %v7_ccd0 = icmp eq i8 %v3_ccc8, 31
  store i1 %v7_ccd0, i1* %cpsr_z.global-to-local, align 1
  %v1_ccd4 = add i32 %v7_cccc, 20
  store i32 %v1_ccd4, i32* @r6, align 4
  %v2_ccd8 = xor i1 %v7_ccd0, true
  %v3_ccd8 = and i1 %v2_ccd0, %v2_ccd8
  br i1 %v3_ccd8, label %dec_label_pc_cbc0, label %dec_label_pc_ccdc

dec_label_pc_ccdc:                                ; preds = %dec_label_pc_ccbc
  %v1_ccdc = add i32 %v2_ccc4, 16
  %v2_ccdc = inttoptr i32 %v1_ccdc to i32*
  %v3_ccdc = load i32, i32* %v2_ccdc, align 4
  store i32 %v3_ccdc, i32* %r4.global-to-local, align 4
  %v0_cce0 = call i32 @function_f8e8()
  store i32 %v0_cce0, i32* %r0.global-to-local, align 4
  %v3_cce4 = load i32, i32* %stack_var_-40, align 4
  %v5_ccec = mul i32 %v3_cce4, 24
  %v0_ccf0 = load i32, i32* %r4.global-to-local, align 4
  %v1_ccf4 = load i32, i32* @r8, align 4
  %v2_ccf4 = add i32 %v1_ccf4, %v5_ccec
  store i32 %v2_ccf4, i32* %r1.global-to-local, align 4
  %v1_ccf8 = and i32 %v0_ccf0, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_ccf8, i32* %r3.global-to-local, align 4
  %v1_ccf0 = udiv i32 %v0_ccf0, 256
  %v3_ccfc = and i32 %v1_ccf0, 65280
  store i32 %v3_ccfc, i32* %r2.global-to-local, align 4
  %v3_cd00 = mul i32 %v0_ccf0, 16777216
  store i32 %v3_cd00, i32* %ip.global-to-local, align 4
  %v1_cd04 = add i32 %v2_ccf4, 20
  %v2_cd04 = inttoptr i32 %v1_cd04 to i8*
  %v3_cd04 = load i8, i8* %v2_cd04, align 1
  %v4_cd04 = zext i8 %v3_cd04 to i32
  %v4_cd08 = mul i32 %v1_ccf8, 256
  %v5_cd08 = or i32 %v4_cd08, %v3_cd00
  store i32 %v5_cd08, i32* %ip.global-to-local, align 4
  %v4_cd0c = udiv i32 %v0_ccf0, 16777216
  %v5_cd0c = or i32 %v3_ccfc, %v4_cd0c
  %v2_cd10 = or i32 %v5_cd0c, %v5_cd08
  %v7_cd14 = lshr i32 %v0_cce0, %v4_cd04
  %v8_cd14 = add i32 %v7_cd14, %v2_cd10
  store i32 %v8_cd14, i32* %r2.global-to-local, align 4
  %v3_cd20 = mul i32 %v8_cd14, 16777216
  %v1_cd18 = mul i32 %v8_cd14, 256
  %v4_cd24 = and i32 %v1_cd18, 16711680
  %v5_cd24 = or i32 %v4_cd24, %v3_cd20
  store i32 %v5_cd24, i32* %r1.global-to-local, align 4
  store i32 %v6_c860, i32* %r0.global-to-local, align 4
  %v2_cd34 = call i32 @llvm.bswap.i32(i32 %v8_cd14)
  store i32 %v2_cd34, i32* %r3.global-to-local, align 4
  store i1 %v7_cbc4, i1* %cpsr_z.global-to-local, align 1
  %v1_cd3c = load i32, i32* @r5, align 4
  %v2_cd3c = add i32 %v1_cd3c, 16
  %v3_cd3c = inttoptr i32 %v2_cd3c to i32*
  store i32 %v2_cd34, i32* %v3_cd3c, align 4
  br i1 %v2_cbc4, label %dec_label_pc_cd44, label %dec_label_pc_cbcc

dec_label_pc_cd44:                                ; preds = %dec_label_pc_ccdc, %dec_label_pc_cbc0
  %v0_cd44 = call i32 @function_f8e8()
  store i32 %v0_cd44, i32* %r0.global-to-local, align 4
  store i32 %v3_c8d4, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_cd54, i1* %cpsr_z.global-to-local, align 1
  %v1_cd58 = load i32, i32* @r5, align 4
  %v2_cd58 = add i32 %v1_cd58, 12
  %v3_cd58 = inttoptr i32 %v2_cd58 to i32*
  store i32 %v0_cd44, i32* %v3_cd58, align 4
  br i1 %v9_cd54, label %dec_label_pc_cd60, label %dec_label_pc_cd44.dec_label_pc_cbe0_crit_edge

dec_label_pc_cd44.dec_label_pc_cbe0_crit_edge:    ; preds = %dec_label_pc_cd44
  %v1_cbe4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbe0

dec_label_pc_cd60:                                ; preds = %dec_label_pc_cd44, %dec_label_pc_cbcc
  %v0_cd60 = call i32 @function_f8e8()
  %v1_cd60 = trunc i32 %v0_cd60 to i8
  store i32 %v0_cd60, i32* %r0.global-to-local, align 4
  %v4_cd6424 = udiv i32 %v0_cd60, 256
  %v1_cd68 = trunc i32 %v4_cd6424 to i8
  %v2_cd68 = load i32, i32* @r5, align 4
  %v3_cd68 = add i32 %v2_cd68, 5
  %v4_cd68 = inttoptr i32 %v3_cd68 to i8*
  store i8 %v1_cd68, i8* %v4_cd68, align 1
  store i32 %v3_c8d8, i32* %r3.global-to-local, align 4
  %v1_cd70 = load i32, i32* @r4, align 4
  %v9_cd70 = icmp eq i32 %v3_c8d8, %v1_cd70
  store i1 %v9_cd70, i1* %cpsr_z.global-to-local, align 1
  %v3_cd74 = load i32, i32* @r5, align 4
  %v4_cd74 = add i32 %v3_cd74, 4
  %v5_cd74 = inttoptr i32 %v4_cd74 to i8*
  store i8 %v1_cd60, i8* %v5_cd74, align 1
  %v0_cd78 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd78, label %dec_label_pc_cd7c, label %dec_label_pc_cd60.dec_label_pc_cbec_crit_edge

dec_label_pc_cd60.dec_label_pc_cbec_crit_edge:    ; preds = %dec_label_pc_cd60
  %v1_cbf0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbec

dec_label_pc_cd7c:                                ; preds = %dec_label_pc_cd60, %dec_label_pc_cbe0
  %v0_cd7c = call i32 @function_f8e8()
  %v1_cd7c = trunc i32 %v0_cd7c to i8
  store i32 %v0_cd7c, i32* %r0.global-to-local, align 4
  store i32 %v3_c8dc, i32* %ip.global-to-local, align 4
  %v4_cd84 = sdiv i32 %v0_cd7c, 256
  store i32 %v4_cd84, i32* %r3.global-to-local, align 4
  %v1_cd88 = load i32, i32* @r4, align 4
  %v9_cd88 = icmp eq i32 %v3_c8dc, %v1_cd88
  store i1 %v9_cd88, i1* %cpsr_z.global-to-local, align 1
  %v3_cd8c = load i32, i32* @r5, align 4
  %v4_cd8c = add i32 %v3_cd8c, 20
  %v5_cd8c = inttoptr i32 %v4_cd8c to i8*
  store i8 %v1_cd7c, i8* %v5_cd8c, align 1
  %v0_cd90 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd90 = trunc i32 %v0_cd90 to i8
  %v2_cd90 = load i32, i32* @r6, align 4
  %v3_cd90 = add i32 %v2_cd90, 1
  %v4_cd90 = inttoptr i32 %v3_cd90 to i8*
  store i8 %v1_cd90, i8* %v4_cd90, align 1
  %v0_cd94 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd94, label %dec_label_pc_cd98, label %dec_label_pc_cd7c.dec_label_pc_cbf8_crit_edge

dec_label_pc_cd7c.dec_label_pc_cbf8_crit_edge:    ; preds = %dec_label_pc_cd7c
  %v1_cbfc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbf8

dec_label_pc_cd98:                                ; preds = %dec_label_pc_cd7c, %dec_label_pc_cbec
  %v0_cd98 = call i32 @function_f8e8()
  %v1_cd98 = trunc i32 %v0_cd98 to i8
  %v4_cd9c = sdiv i32 %v0_cd98, 256
  store i32 %v4_cd9c, i32* %r3.global-to-local, align 4
  %v3_cda0 = load i32, i32* @r6, align 4
  %v4_cda0 = add i32 %v3_cda0, 2
  %v5_cda0 = inttoptr i32 %v4_cda0 to i8*
  store i8 %v1_cd98, i8* %v5_cda0, align 1
  store i32 %v6_c79c, i32* %r0.global-to-local, align 4
  %v1_cda8 = load i32, i32* @r4, align 4
  %v9_cda8 = icmp eq i32 %v6_c79c, %v1_cda8
  store i1 %v9_cda8, i1* %cpsr_z.global-to-local, align 1
  %v0_cdac = load i32, i32* %r3.global-to-local, align 4
  %v1_cdac = trunc i32 %v0_cdac to i8
  %v2_cdac = load i32, i32* @r6, align 4
  %v3_cdac = add i32 %v2_cdac, 3
  %v4_cdac = inttoptr i32 %v3_cdac to i8*
  store i8 %v1_cdac, i8* %v4_cdac, align 1
  %v0_cdb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdb0, label %dec_label_pc_cdb4, label %dec_label_pc_cd98.dec_label_pc_cc04_crit_edge

dec_label_pc_cd98.dec_label_pc_cc04_crit_edge:    ; preds = %dec_label_pc_cd98
  %v1_cc08.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc04

dec_label_pc_cdb4:                                ; preds = %dec_label_pc_cd98, %dec_label_pc_cbf8
  %v0_cdb4 = call i32 @function_f8e8()
  store i32 %v0_cdb4, i32* %r0.global-to-local, align 4
  store i32 %v6_c7b4, i32* %r2.global-to-local, align 4
  %v1_cdbc = load i32, i32* @r4, align 4
  %v9_cdbc = icmp eq i32 %v6_c7b4, %v1_cdbc
  store i1 %v9_cdbc, i1* %cpsr_z.global-to-local, align 1
  %v1_cdc0 = load i32, i32* @r6, align 4
  %v2_cdc0 = add i32 %v1_cdc0, 4
  %v3_cdc0 = inttoptr i32 %v2_cdc0 to i32*
  store i32 %v0_cdb4, i32* %v3_cdc0, align 4
  br i1 %v9_cdbc, label %dec_label_pc_cdc8, label %dec_label_pc_cc10

dec_label_pc_cdc8:                                ; preds = %dec_label_pc_cdb4, %dec_label_pc_cc04
  %v0_cdc8 = call i32 @function_f8e8()
  store i32 %v0_cdc8, i32* %r0.global-to-local, align 4
  store i32 %v1_c8e0, i32* %r3.global-to-local, align 4
  store i1 %v2_cdd0, i1* %cpsr_z.global-to-local, align 1
  %v1_cdd4 = load i32, i32* @r6, align 4
  %v2_cdd4 = add i32 %v1_cdd4, 8
  %v3_cdd4 = inttoptr i32 %v2_cdd4 to i32*
  store i32 %v0_cdc8, i32* %v3_cdd4, align 4
  br i1 %v2_cdd0, label %dec_label_pc_cc1c, label %dec_label_pc_cddc

dec_label_pc_cddc:                                ; preds = %dec_label_pc_cc10, %dec_label_pc_cdc8
  %v0_cddc = call i32 @function_f8e8()
  %v1_cddc = trunc i32 %v0_cddc to i8
  store i32 %v0_cddc, i32* %r0.global-to-local, align 4
  %v4_cde0 = sdiv i32 %v0_cddc, 256
  store i32 %v4_cde0, i32* %r3.global-to-local, align 4
  %v1_cde4 = trunc i32 %v4_cde0 to i8
  %v2_cde4 = load i32, i32* @r6, align 4
  %v3_cde4 = add i32 %v2_cde4, 19
  %v4_cde4 = inttoptr i32 %v3_cde4 to i8*
  store i8 %v1_cde4, i8* %v4_cde4, align 1
  %v3_cde8 = load i32, i32* @r6, align 4
  %v4_cde8 = add i32 %v3_cde8, 18
  %v5_cde8 = inttoptr i32 %v4_cde8 to i8*
  store i8 %v1_cddc, i8* %v5_cde8, align 1
  br label %dec_label_pc_cc1c

dec_label_pc_cdf0:                                ; preds = %dec_label_pc_cc1c, %dec_label_pc_cba4
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_cdf4 = call i32 @function_138c0(i32* null)
  store i32 %v2_cdf4, i32* %r0.global-to-local, align 4
  store i32 %v2_c870, i32* %ip.global-to-local, align 4
  %v9_cdfc = icmp eq i32 %v2_c870, %v2_cdf4
  store i1 %v9_cdfc, i1* %cpsr_z.global-to-local, align 1
  %v6_ce00 = icmp slt i32 %v2_c870, %v2_cdf4
  br i1 %v6_ce00, label %dec_label_pc_ce04, label %dec_label_pc_cdf0.dec_label_pc_cba4_crit_edge

dec_label_pc_cdf0.dec_label_pc_cba4_crit_edge:    ; preds = %dec_label_pc_cdf0
  %v0_cba8.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_cba4

dec_label_pc_ce04:                                ; preds = %dec_label_pc_cdf0, %dec_label_pc_c6a0, %dec_label_pc_ce0c
  %v29_ce08 = phi i32 [ %v3_c884, %dec_label_pc_c6a0 ], [ %v1_ce10, %dec_label_pc_ce0c ], [ %v2_cdf4, %dec_label_pc_cdf0 ]
  store i32 %v3_c6a0, i32* %r4.global-to-local, align 4
  store i32 %v12_c6a0, i32* %r7.global-to-local, align 4
  ret i32 %v29_ce08

dec_label_pc_ce0c:                                ; preds = %dec_label_pc_c894
  %v0_ce0c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ce0c, i32* %r0.global-to-local, align 4
  %v1_ce10 = call i32 @function_135f0(i32 %v0_ce0c)
  store i32 %v1_ce10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ce04

; uselistorder directives
  uselistorder i32 %v1_ce10, { 1, 0 }
  uselistorder i32 %v4_cde0, { 1, 0 }
  uselistorder i32 %v0_cddc, { 0, 2, 1 }
  uselistorder i32 %v0_cd7c, { 0, 2, 1 }
  uselistorder i32 %v0_cd60, { 0, 2, 1 }
  uselistorder i32 %v2_cd34, { 1, 0 }
  uselistorder i32 %v8_cd14, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cd00, { 1, 0 }
  uselistorder i32 %v0_ccf0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_ccac, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_cc54, { 0, 2, 1 }
  uselistorder i32 %v0_cc3c, { 1, 0, 2 }
  uselistorder i1 %v2_cdd0, { 2, 3, 1, 0 }
  uselistorder i1 %v9_cd54, { 2, 3, 1, 0 }
  uselistorder i1 %v7_cbc4, { 2, 1, 0 }
  uselistorder i32 %v1_cb94, { 1, 0, 2, 3 }
  uselistorder i32 %v3_cb40, { 1, 0 }
  uselistorder i32 %v3_c998, { 1, 0 }
  uselistorder i32 %v1_c990, { 1, 0 }
  uselistorder i32 %v1_c984, { 1, 0 }
  uselistorder i32 %v1_c980, { 1, 0 }
  uselistorder i32 %v1_c960, { 1, 0 }
  uselistorder i32 %v1_c95c, { 1, 0 }
  uselistorder i32 %v1_c950, { 1, 0 }
  uselistorder i32 %v1_c91c, { 1, 0 }
  uselistorder i32 %v1_c908, { 1, 0 }
  uselistorder i32 %v0_c8e8, { 1, 0, 2 }
  uselistorder i32 %v1_c8e0, { 2, 1, 3, 0 }
  uselistorder i32 %v3_c8d8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v3_c8d4, { 1, 2, 0, 3 }
  uselistorder i1 %v7_c8b4, { 1, 0 }
  uselistorder i1 %v7_c888, { 1, 0 }
  uselistorder i32 %v3_c884, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_c870, { 2, 1, 0 }
  uselistorder i32 %v6_c860, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_c7b4, { 3, 2, 1, 0 }
  uselistorder i32 %v6_c79c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c764, { 1, 0, 3, 2 }
  uselistorder i32 %v1_c74c, { 1, 0 }
  uselistorder i32 %v5_c6e4, { 1, 0 }
  uselistorder i32 %v1_c6a4, { 1, 2, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 20, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 13, 14, 15, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26, 27 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 43, { 0, 2, 5, 3, 6, 1, 7, 4, 8 }
  uselistorder i32 42, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cddc, { 1, 0 }
  uselistorder label %dec_label_pc_cc1c, { 2, 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ce1c(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ce1c:
  %r0.global-to-local = alloca i32, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-84 = alloca i8, align 1
  %v1_ce20 = urem i32 %arg2, 256
  store i32 %v1_ce20, i32* @sl, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %v1_ce20, i32* %r0.global-to-local, align 4
  %v1_ce34 = urem i32 %arg4, 256
  store i32 %v1_ce34, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  %v2_ce40 = call i32 @function_141c8(i32 %v1_ce20, i32 4)
  %v0_ce4c = load i32, i32* @sl, align 4
  store i32 %v0_ce4c, i32* %r0.global-to-local, align 4
  %v2_ce50 = call i32 @function_141c8(i32 %v0_ce4c, i32 4)
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* @r6, align 4
  %v0_ce5c = load i32, i32* @r5, align 4
  store i32 %v2_ce50, i32* @sb, align 4
  %v0_ce6c = load i32, i32* @r4, align 4
  store i32 %v0_ce6c, i32* %r0.global-to-local, align 4
  %v4_ce70 = inttoptr i32 %v0_ce5c to i32*
  %v5_ce70 = call i32 @function_a054(i32 %v0_ce6c, i32* %v4_ce70, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_ce74 = load i32, i32* @r5, align 4
  %v0_ce80 = load i32, i32* @r6, align 4
  %v0_ce84 = load i32, i32* @r4, align 4
  store i32 %v0_ce84, i32* %r0.global-to-local, align 4
  %v3_ce88 = urem i32 %v5_ce70, 65536
  store i32 %v3_ce88, i32* @fp, align 4
  %v4_ce8c = inttoptr i32 %v0_ce74 to i32*
  %v5_ce8c = call i32 @function_a054(i32 %v0_ce84, i32* %v4_ce8c, i32 6, i32 %v0_ce80)
  %v0_ce90 = load i32, i32* @r5, align 4
  %v3_ce94 = mul i32 %v5_ce8c, 65536
  store i32 %v3_ce94, i32* @r8, align 4
  %v0_cea0 = load i32, i32* @r4, align 4
  store i32 %v0_cea0, i32* %r0.global-to-local, align 4
  %v4_cea4 = inttoptr i32 %v0_ce90 to i32*
  %v5_cea4 = call i32 @function_a054(i32 %v0_cea0, i32* %v4_cea4, i32 0, i32 512)
  %v3_ceb4 = urem i32 %v5_cea4, 65536
  %v0_ceb8 = load i32, i32* @r5, align 4
  %v0_cebc = load i32, i32* @r4, align 4
  store i32 %v0_cebc, i32* %r0.global-to-local, align 4
  %v4_cec4 = inttoptr i32 %v0_ceb8 to i32*
  %v5_cec4 = call i32 @function_a054(i32 %v0_cebc, i32* %v4_cec4, i32 1, i32 1)
  %v1_ced0 = urem i32 %v5_cec4, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_ceec = call i32 @function_138c0(i32* null)
  %v0_cef0 = load i32, i32* @r8, align 4
  %v3_cef0 = udiv i32 %v0_cef0, 65536
  %v1_cef4 = load i32, i32* @r6, align 4
  %v9_cef4 = icmp eq i32 %v3_cef0, %v1_cef4
  %v1_cefc3 = load i32, i32* @r7, align 4
  %v2_cefc4 = add i32 %v1_cefc3, %v2_ceec
  store i32 %v2_cefc4, i32* %r0.global-to-local, align 4
  br i1 %v9_cef4, label %dec_label_pc_d0e0, label %bb

bb:                                               ; preds = %dec_label_pc_ce1c
  %v2_cef8 = mul nuw nsw i32 %v3_cef0, 256
  %v4_cf00 = and i32 %v2_cef8, 65280
  %v5_cf08 = udiv i32 %v0_cef0, 16777216
  %v6_cf08 = or i32 %v4_cf00, %v5_cf08
  br label %dec_label_pc_cf10

dec_label_pc_cf10:                                ; preds = %bb, %dec_label_pc_d0e0
  %storemerge = phi i32 [ %v6_cf08, %bb ], [ %v3_d0e8, %dec_label_pc_d0e0 ]
  store i32 %storemerge, i32* @r7, align 4
  %v0_cf10 = load i32, i32* @sl, align 4
  %tmp46 = icmp slt i32 %v0_cf10, 1
  br i1 %tmp46, label %dec_label_pc_d0b0, label %dec_label_pc_cf18

dec_label_pc_cf18:                                ; preds = %dec_label_pc_cf10
  %v0_cf18 = load i32, i32* @fp, align 4
  %v3_cf18 = udiv i32 %v0_cf18, 256
  %v5_cf24 = trunc i32 %v3_cf18 to i8
  store i32 0, i32* @r8, align 4
  store i32 %arg3, i32* @r5, align 4
  %v3_cf40 = udiv i32 %v0_cf18, 65536
  store i32 0, i32* @r6, align 4
  %v4_cf48 = trunc i32 %v3_cf40 to i8
  store i8 %v4_cf48, i8* %stack_var_-84, align 1
  %v3_cff0 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_cf70

dec_label_pc_cf50:                                ; preds = %dec_label_pc_cfd0
  %v0_cf50 = load i32, i32* @r6, align 4
  %v1_cf50 = load i32, i32* @sb, align 4
  %v2_cf50 = add i32 %v1_cf50, %v0_cf50
  %v3_cf50 = inttoptr i32 %v2_cf50 to i32*
  %v4_cf50 = load i32, i32* %v3_cf50, align 4
  store i32 %v4_cf50, i32* %r0.global-to-local, align 4
  %v3_cf5c = inttoptr i32 %v0_cff4 to %sockaddr*
  %v4_cf5c = call i32 @function_13d38(i32 %v4_cf50, %sockaddr* %v3_cf5c, i32 16)
  store i32 %v4_cf5c, i32* %r0.global-to-local, align 4
  %v0_cf60 = load i32, i32* @r8, align 4
  %v1_cf60 = load i32, i32* @sl, align 4
  %v9_cf60 = icmp eq i32 %v0_cf60, %v1_cf60
  %v0_cf64 = load i32, i32* @r6, align 4
  %v1_cf64 = add i32 %v0_cf64, 4
  store i32 %v1_cf64, i32* @r6, align 4
  %v0_cf68 = load i32, i32* @r5, align 4
  %v1_cf68 = add i32 %v0_cf68, 24
  store i32 %v1_cf68, i32* @r5, align 4
  br i1 %v9_cf60, label %dec_label_pc_d06c, label %dec_label_pc_cf70

dec_label_pc_cf70:                                ; preds = %dec_label_pc_d000, %dec_label_pc_cf50, %dec_label_pc_cf18
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r0.global-to-local, align 4
  %v2_cf7c = call i32 @function_141c8(i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32 1)
  store i32 %v2_cf7c, i32* %r0.global-to-local, align 4
  %v0_cf84 = load i32, i32* @fp, align 4
  %v9_cf84 = icmp eq i32 %v0_cf84, add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1)
  %v1_cf8c = load i32, i32* @r6, align 4
  %v3_cf8c = add i32 %v1_cf8c, %v2_ce40
  %v4_cf8c = inttoptr i32 %v3_cf8c to i32*
  store i32 %v2_cf7c, i32* %v4_cf8c, align 4
  br i1 %v9_cf84, label %dec_label_pc_d0cc, label %dec_label_pc_cf94

dec_label_pc_cf94:                                ; preds = %dec_label_pc_cf70
  %v2_cf98 = load i32, i32* @r5, align 4
  %v3_cf98 = add i32 %v2_cf98, 2
  %v4_cf98 = inttoptr i32 %v3_cf98 to i8*
  store i8 %v5_cf24, i8* %v4_cf98, align 1
  %v2_cf9c = load i8, i8* %stack_var_-84, align 1
  %v2_cfa0 = load i32, i32* @r5, align 4
  %v3_cfa0 = add i32 %v2_cfa0, 3
  %v4_cfa0 = inttoptr i32 %v3_cfa0 to i8*
  store i8 %v2_cf9c, i8* %v4_cfa0, align 1
  br label %dec_label_pc_cfa4

dec_label_pc_cfa4:                                ; preds = %dec_label_pc_d0cc, %dec_label_pc_cf94
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cfb0 = call i32 @function_13edc(i32 2, i32 2, i32 17)
  store i32 %v3_cfb0, i32* %r0.global-to-local, align 4
  %v7_cfb4 = icmp eq i32 %v3_cfb0, -1
  %v0_cfb8 = load i32, i32* @r8, align 4
  %v1_cfb8 = add i32 %v0_cfb8, 1
  store i32 %v1_cfb8, i32* @r8, align 4
  %v1_cfc8 = load i32, i32* @r6, align 4
  %v2_cfc8 = load i32, i32* @sb, align 4
  %v3_cfc8 = add i32 %v2_cfc8, %v1_cfc8
  %v4_cfc8 = inttoptr i32 %v3_cfc8 to i32*
  store i32 %v3_cfb0, i32* %v4_cfc8, align 4
  br i1 %v7_cfb4, label %dec_label_pc_d0c4.loopexit, label %dec_label_pc_cfd0

dec_label_pc_cfd0:                                ; preds = %dec_label_pc_cfa4
  store i32 2, i32* %stack_var_-52, align 4
  %v0_cff0 = load i32, i32* %r0.global-to-local, align 4
  %v4_cff0 = call i32 @function_13d0c(i32 %v0_cff0, %sockaddr* %v3_cff0, i32 16)
  store i32 %v4_cff0, i32* %r0.global-to-local, align 4
  %v0_cff4 = load i32, i32* @r5, align 4
  %v1_cff4 = add i32 %v0_cff4, 20
  %v2_cff4 = inttoptr i32 %v1_cff4 to i8*
  %v3_cff4 = load i8, i8* %v2_cff4, align 1
  %tmp49 = icmp ugt i8 %v3_cff4, 31
  br i1 %tmp49, label %dec_label_pc_cf50, label %dec_label_pc_d000

dec_label_pc_d000:                                ; preds = %dec_label_pc_cfd0
  %v1_d000 = add i32 %v0_cff4, 16
  %v2_d000 = inttoptr i32 %v1_d000 to i32*
  %v3_d000 = load i32, i32* %v2_d000, align 4
  store i32 %v3_d000, i32* @r4, align 4
  %v0_d004 = call i32 @function_f8e8()
  store i32 %v0_d004, i32* %r0.global-to-local, align 4
  %v0_d008 = load i32, i32* @r4, align 4
  %v1_d00c = and i32 %v0_d008, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v1_d008 = udiv i32 %v0_d008, 256
  %v3_d010 = and i32 %v1_d008, 65280
  %v3_d014 = mul i32 %v0_d008, 16777216
  %v4_d018 = mul i32 %v1_d00c, 256
  %v5_d018 = or i32 %v4_d018, %v3_d014
  %v0_d01c = load i32, i32* @r5, align 4
  %v1_d01c = add i32 %v0_d01c, 20
  %v2_d01c = inttoptr i32 %v1_d01c to i8*
  %v3_d01c = load i8, i8* %v2_d01c, align 1
  %v4_d01c = zext i8 %v3_d01c to i32
  %v4_d020 = udiv i32 %v0_d008, 16777216
  %v5_d020 = or i32 %v3_d010, %v4_d020
  %v2_d024 = or i32 %v5_d020, %v5_d018
  %v7_d028 = lshr i32 %v0_d004, %v4_d01c
  %v8_d028 = add i32 %v7_d028, %v2_d024
  %v1_d030 = and i32 %v8_d028, 65280
  store i32 %v1_d030, i32* %r0.global-to-local, align 4
  %v2_d044 = call i32 @llvm.bswap.i32(i32 %v8_d028)
  %v2_d048 = add i32 %v0_d01c, 4
  %v3_d048 = inttoptr i32 %v2_d048 to i32*
  store i32 %v2_d044, i32* %v3_d048, align 4
  %v0_d04c = load i32, i32* @r5, align 4
  %v0_d050 = load i32, i32* @r6, align 4
  %v1_d050 = load i32, i32* @sb, align 4
  %v2_d050 = add i32 %v1_d050, %v0_d050
  %v3_d050 = inttoptr i32 %v2_d050 to i32*
  %v4_d050 = load i32, i32* %v3_d050, align 4
  store i32 %v4_d050, i32* %r0.global-to-local, align 4
  %v3_d058 = inttoptr i32 %v0_d04c to %sockaddr*
  %v4_d058 = call i32 @function_13d38(i32 %v4_d050, %sockaddr* %v3_d058, i32 16)
  store i32 %v4_d058, i32* %r0.global-to-local, align 4
  %v0_d05c = load i32, i32* @r8, align 4
  %v1_d05c = load i32, i32* @sl, align 4
  %v9_d05c = icmp eq i32 %v0_d05c, %v1_d05c
  %v0_d060 = load i32, i32* @r6, align 4
  %v1_d060 = add i32 %v0_d060, 4
  store i32 %v1_d060, i32* @r6, align 4
  %v0_d064 = load i32, i32* @r5, align 4
  %v1_d064 = add i32 %v0_d064, 24
  store i32 %v1_d064, i32* @r5, align 4
  br i1 %v9_d05c, label %dec_label_pc_d06c, label %dec_label_pc_cf70

dec_label_pc_d06c:                                ; preds = %dec_label_pc_d000, %dec_label_pc_cf50, %dec_label_pc_d0b0.dec_label_pc_d06c_crit_edge
  %v0_d06c = phi i32 [ %v0_d06c.pre, %dec_label_pc_d0b0.dec_label_pc_d06c_crit_edge ], [ %v0_d05c, %dec_label_pc_d000 ], [ %v0_cf60, %dec_label_pc_cf50 ]
  %tmp47 = icmp slt i32 %v0_d06c, 1
  br i1 %tmp47, label %dec_label_pc_d0b0, label %dec_label_pc_d074

dec_label_pc_d074:                                ; preds = %dec_label_pc_d06c
  %v2_d078 = icmp eq i32 %v1_ced0, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_d078, label %dec_label_pc_d080, label %dec_label_pc_d0f0

dec_label_pc_d080:                                ; preds = %dec_label_pc_d074
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_d088

dec_label_pc_d088:                                ; preds = %dec_label_pc_d088, %dec_label_pc_d080
  %v0_d094 = phi i32 [ %v1_d094, %dec_label_pc_d088 ], [ 0, %dec_label_pc_d080 ]
  %v0_d08c = phi i32 [ %v1_d0a8, %dec_label_pc_d088 ], [ 0, %dec_label_pc_d080 ]
  %v1_d08c = load i32, i32* @sb, align 4
  %v2_d08c = add i32 %v1_d08c, %v0_d08c
  %v3_d08c = inttoptr i32 %v2_d08c to i32*
  %v4_d08c = load i32, i32* %v3_d08c, align 4
  store i32 %v4_d08c, i32* %r0.global-to-local, align 4
  %v2_d090 = add i32 %v0_d08c, %v2_ce40
  %v3_d090 = inttoptr i32 %v2_d090 to i32*
  %v4_d090 = load i32, i32* %v3_d090, align 4
  %v1_d094 = add i32 %v0_d094, 1
  %v4_d0a0 = inttoptr i32 %v4_d090 to i32*
  %v5_d0a0 = call i32 @function_13e4c(i32 %v4_d08c, i32* %v4_d0a0, i32 %v3_ceb4, i32 16384)
  store i32 %v5_d0a0, i32* %r0.global-to-local, align 4
  %v1_d0a4 = load i32, i32* @sl, align 4
  %v9_d0a4 = icmp eq i32 %v1_d094, %v1_d0a4
  %v0_d0a8 = load i32, i32* @r4, align 4
  %v1_d0a8 = add i32 %v0_d0a8, 4
  store i32 %v1_d0a8, i32* @r4, align 4
  br i1 %v9_d0a4, label %dec_label_pc_d0b0, label %dec_label_pc_d088

dec_label_pc_d0b0:                                ; preds = %dec_label_pc_d0fc, %dec_label_pc_d088, %dec_label_pc_d06c, %dec_label_pc_cf10
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_d0b4 = call i32 @function_138c0(i32* null)
  store i32 %v2_d0b4, i32* %r0.global-to-local, align 4
  %v6_d0c0 = icmp slt i32 %v2_cefc4, %v2_d0b4
  br i1 %v6_d0c0, label %dec_label_pc_d0c4, label %dec_label_pc_d0b0.dec_label_pc_d06c_crit_edge

dec_label_pc_d0b0.dec_label_pc_d06c_crit_edge:    ; preds = %dec_label_pc_d0b0
  %v0_d06c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_d06c

dec_label_pc_d0c4.loopexit:                       ; preds = %dec_label_pc_cfa4
  %v29_d0c8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d0c4

dec_label_pc_d0c4:                                ; preds = %dec_label_pc_d0c4.loopexit, %dec_label_pc_d0b0
  %v29_d0c8 = phi i32 [ %v29_d0c8.pre, %dec_label_pc_d0c4.loopexit ], [ %v2_d0b4, %dec_label_pc_d0b0 ]
  ret i32 %v29_d0c8

dec_label_pc_d0cc:                                ; preds = %dec_label_pc_cf70
  %v0_d0cc = call i32 @function_f8e8()
  %v1_d0cc = trunc i32 %v0_d0cc to i8
  store i32 %v0_d0cc, i32* %r0.global-to-local, align 4
  %v4_d0d0 = sdiv i32 %v0_d0cc, 256
  %v1_d0d4 = trunc i32 %v4_d0d0 to i8
  %v2_d0d4 = load i32, i32* @r5, align 4
  %v3_d0d4 = add i32 %v2_d0d4, 3
  %v4_d0d4 = inttoptr i32 %v3_d0d4 to i8*
  store i8 %v1_d0d4, i8* %v4_d0d4, align 1
  %v3_d0d8 = load i32, i32* @r5, align 4
  %v4_d0d8 = add i32 %v3_d0d8, 2
  %v5_d0d8 = inttoptr i32 %v4_d0d8 to i8*
  store i8 %v1_d0cc, i8* %v5_d0d8, align 1
  br label %dec_label_pc_cfa4

dec_label_pc_d0e0:                                ; preds = %dec_label_pc_ce1c
  %v0_d0e0 = call i32 @function_f8e8()
  %v3_d0e4 = mul i32 %v0_d0e0, 65536
  store i32 %v3_d0e4, i32* %r0.global-to-local, align 4
  %v3_d0e8 = urem i32 %v0_d0e0, 65536
  br label %dec_label_pc_cf10

dec_label_pc_d0f0:                                ; preds = %dec_label_pc_d074
  store i32 0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d0fc

dec_label_pc_d0fc:                                ; preds = %dec_label_pc_d0fc, %dec_label_pc_d0f0
  %v0_d100 = phi i32 [ %v1_d134, %dec_label_pc_d0fc ], [ 0, %dec_label_pc_d0f0 ]
  %v2_d100 = add i32 %v0_d100, %v2_ce40
  %v3_d100 = inttoptr i32 %v2_d100 to i32*
  %v4_d100 = load i32, i32* %v3_d100, align 4
  store i32 %v4_d100, i32* @r4, align 4
  store i32 %v4_d100, i32* %r0.global-to-local, align 4
  %v2_d10c = call i32 @function_f99c(i32 %v4_d100, i32 %v3_ceb4)
  store i32 %v2_d10c, i32* %r0.global-to-local, align 4
  %v0_d114 = load i32, i32* @r7, align 4
  %v1_d114 = trunc i32 %v0_d114 to i8
  %v2_d114 = load i32, i32* @r4, align 4
  %v4_d114 = add i32 %v2_d114, %v3_ceb4
  %v5_d114 = inttoptr i32 %v4_d114 to i8*
  store i8 %v1_d114, i8* %v5_d114, align 1
  %v0_d118 = load i32, i32* @r4, align 4
  %v0_d11c = load i32, i32* @r6, align 4
  %v1_d11c = load i32, i32* @sb, align 4
  %v2_d11c = add i32 %v1_d11c, %v0_d11c
  %v3_d11c = inttoptr i32 %v2_d11c to i32*
  %v4_d11c = load i32, i32* %v3_d11c, align 4
  store i32 %v4_d11c, i32* %r0.global-to-local, align 4
  %v0_d120 = load i32, i32* @r5, align 4
  %v1_d120 = add i32 %v0_d120, 1
  store i32 %v1_d120, i32* @r5, align 4
  %v4_d12c = inttoptr i32 %v0_d118 to i32*
  %v5_d12c = call i32 @function_13e4c(i32 %v4_d11c, i32* %v4_d12c, i32 %v3_ceb4, i32 16384)
  store i32 %v5_d12c, i32* %r0.global-to-local, align 4
  %v0_d130 = load i32, i32* @r5, align 4
  %v1_d130 = load i32, i32* @sl, align 4
  %v9_d130 = icmp eq i32 %v0_d130, %v1_d130
  %v0_d134 = load i32, i32* @r6, align 4
  %v1_d134 = add i32 %v0_d134, 4
  store i32 %v1_d134, i32* @r6, align 4
  br i1 %v9_d130, label %dec_label_pc_d0b0, label %dec_label_pc_d0fc

; uselistorder directives
  uselistorder i32 %v1_d134, { 1, 0 }
  uselistorder i32 %v0_d0e0, { 1, 0 }
  uselistorder i32 %v0_d0cc, { 0, 2, 1 }
  uselistorder i32 %v1_d0a8, { 1, 0 }
  uselistorder i32 %v0_d008, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cff4, { 1, 2, 0 }
  uselistorder i32 %v3_cfb0, { 1, 0, 2 }
  uselistorder i32 %v3_ceb4, { 2, 3, 1, 0 }
  uselistorder i32 %v1_ce20, { 1, 2, 0 }
  uselistorder i8* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 6, 4, 5, 7, 20, 9, 8, 11, 10, 14, 12, 13, 15, 18, 21, 22, 19, 24, 23, 17, 16, 1, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder label %dec_label_pc_d06c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cf10, { 1, 0 }
}

define i32 @function_d140(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d140:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_d140 = load i32, i32* @sb, align 4
  %v21_d140 = load i32, i32* @sl, align 4
  %v1_d144 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_d144, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_d160 = urem i32 %arg4, 256
  store i32 %v1_d160, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_d170 = call i32 @function_141c8(i32 %v1_d144, i32 4)
  %v0_d174 = load i32, i32* @r5, align 4
  store i32 %v0_d174, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d180 = load i32, i32* @r7, align 4
  store i32 %v0_d180, i32* %r3.global-to-local, align 4
  %v0_d184 = load i32, i32* @r4, align 4
  store i32 %v0_d184, i32* %r0.global-to-local, align 4
  %v5_d188 = inttoptr i32 %v0_d174 to i32*
  %v6_d188 = call i32 @function_a054(i32 %v0_d184, i32* %v5_d188, i32 2, i32 %v0_d180)
  %v1_d194 = urem i32 %v6_d188, 256
  store i32 %v1_d194, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d1a0 = load i32, i32* @r5, align 4
  store i32 %v0_d1a0, i32* %r1.global-to-local, align 4
  %v0_d1a4 = load i32, i32* @r4, align 4
  store i32 %v0_d1a4, i32* %r0.global-to-local, align 4
  %v5_d1a8 = trunc i32 %v6_d188 to i8
  %v6_d1ac = inttoptr i32 %v0_d1a0 to i32*
  %v7_d1ac = call i32 @function_a054(i32 %v0_d1a4, i32* %v6_d1ac, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_d1b0 = load i32, i32* @r5, align 4
  store i32 %v0_d1b0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d1c0 = load i32, i32* @r4, align 4
  store i32 %v0_d1c0, i32* %r0.global-to-local, align 4
  %v5_d1c4 = inttoptr i32 %v0_d1b0 to i32*
  %v6_d1c4 = call i32 @function_a054(i32 %v0_d1c0, i32* %v5_d1c4, i32 4, i32 64)
  %v1_d1cc = urem i32 %v6_d1c4, 256
  store i32 %v1_d1cc, i32* %ip.global-to-local, align 4
  %v0_d1d0 = load i32, i32* @r5, align 4
  store i32 %v0_d1d0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_d1d8 = load i32, i32* @r7, align 4
  store i32 %v0_d1d8, i32* %r3.global-to-local, align 4
  %v0_d1dc = load i32, i32* @r4, align 4
  store i32 %v0_d1dc, i32* %r0.global-to-local, align 4
  %v5_d1e0 = trunc i32 %v6_d1c4 to i8
  %v6_d1e4 = inttoptr i32 %v0_d1d0 to i32*
  %v7_d1e4 = call i32 @function_a054(i32 %v0_d1dc, i32* %v6_d1e4, i32 5, i32 %v0_d1d8)
  %v1_d1f0 = urem i32 %v7_d1e4, 256
  store i32 %v1_d1f0, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d1fc = load i32, i32* @r5, align 4
  store i32 %v0_d1fc, i32* %r1.global-to-local, align 4
  %v0_d200 = load i32, i32* @r4, align 4
  store i32 %v0_d200, i32* %r0.global-to-local, align 4
  %v5_d208 = inttoptr i32 %v0_d1fc to i32*
  %v6_d208 = call i32 @function_a054(i32 %v0_d200, i32* %v5_d208, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_d214 = load i32, i32* @r5, align 4
  store i32 %v0_d214, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d220 = load i32, i32* @r4, align 4
  store i32 %v0_d220, i32* %r0.global-to-local, align 4
  %v5_d224 = inttoptr i32 %v0_d214 to i32*
  %v6_d224 = call i32 @function_a054(i32 %v0_d220, i32* %v5_d224, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_d228 = load i32, i32* @r5, align 4
  store i32 %v0_d228, i32* %r1.global-to-local, align 4
  %v0_d22c = load i32, i32* @r7, align 4
  store i32 %v0_d22c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_d224, i32* %sb.global-to-local, align 4
  %v0_d238 = load i32, i32* @r4, align 4
  store i32 %v0_d238, i32* %r0.global-to-local, align 4
  %v4_d23c = inttoptr i32 %v0_d228 to i32*
  %v5_d23c = call i32 @function_a054(i32 %v0_d238, i32* %v4_d23c, i32 %v0_d22c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d248 = load i32, i32* @r5, align 4
  store i32 %v0_d248, i32* %r1.global-to-local, align 4
  store i32 %v5_d23c, i32* @sl, align 4
  %v0_d250 = load i32, i32* @r4, align 4
  store i32 %v0_d250, i32* %r0.global-to-local, align 4
  %v4_d254 = inttoptr i32 %v0_d248 to i32*
  %v5_d254 = call i32 @function_a054(i32 %v0_d250, i32* %v4_d254, i32 1, i32 1)
  %v2_d260 = load i32, i32* @global_var_1f238.84, align 4
  store i32 %v2_d260, i32* %r3.global-to-local, align 4
  %v1_d264 = urem i32 %v5_d254, 256
  store i32 %v1_d264, i32* %ip.global-to-local, align 4
  %v0_d268 = load i32, i32* @r5, align 4
  store i32 %v0_d268, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_d270 = load i32, i32* @r4, align 4
  store i32 %v0_d270, i32* %r0.global-to-local, align 4
  %v5_d278 = inttoptr i32 %v0_d268 to i32*
  %v6_d278 = call i32 @function_a054(i32 %v0_d270, i32* %v5_d278, i32 24, i32 %v2_d260)
  store i32 %v6_d278, i32* @fp, align 4
  %v0_d280 = load i32, i32* @r7, align 4
  store i32 %v0_d280, i32* %r0.global-to-local, align 4
  %v1_d284 = inttoptr i32 %v0_d280 to i32*
  %v2_d284 = call i32 @function_138c0(i32* %v1_d284)
  %v1_d288 = load i32, i32* @r6, align 4
  %v2_d288 = add i32 %v1_d288, %v2_d284
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d29c = call i32 @function_13edc(i32 2, i32 3, i32 17)
  store i32 %v3_d29c, i32* %r0.global-to-local, align 4
  %v7_d2a0 = icmp eq i32 %v3_d29c, -1
  store i1 %v7_d2a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d2a0, label %dec_label_pc_d6c8, label %dec_label_pc_d2ac

dec_label_pc_d2ac:                                ; preds = %dec_label_pc_d140
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d2b4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d2b4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_d2bc = load i32, i32* @r7, align 4
  store i32 %v0_d2bc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d2c8 = call i32 @function_13eac(i32 %v3_d29c, i32 %v0_d2bc, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_d2c8, i32* %r0.global-to-local, align 4
  %v7_d2cc = icmp eq i32 %v6_d2c8, -1
  store i1 %v7_d2cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d2cc, label %dec_label_pc_d6d0, label %dec_label_pc_d2d4

dec_label_pc_d2d4:                                ; preds = %dec_label_pc_d2ac
  %v0_d2d4 = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_d2e0 = urem i32 %v0_d2d4, 65536
  store i32 %v3_d2e0, i32* %r2.global-to-local, align 4
  %v3_d2e4 = icmp ugt i32 %v3_d2e0, 1459
  %v9_d2e4 = icmp eq i32 %v3_d2e0, 1460
  store i1 %v9_d2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d2e4, label %bb, label %bb56

bb:                                               ; preds = %dec_label_pc_d2d4
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_d2d4, %bb
  %v0_d2ec = phi i32 [ %v3_d2e0, %dec_label_pc_d2d4 ], [ 1460, %bb ]
  store i32 %v7_d1ac, i32* %r1.global-to-local, align 4
  store i32 %v6_d208, i32* %r2.global-to-local, align 4
  store i32 %v1_d144, i32* %r3.global-to-local, align 4
  %v0_d2fc = load i32, i32* %sb.global-to-local, align 4
  %v3_d300 = mul i32 %v7_d1ac, 65536
  store i32 %v3_d300, i32* %r0.global-to-local, align 4
  %v3_d304 = mul i32 %v6_d208, 65536
  store i32 %v3_d304, i32* %sl.global-to-local, align 4
  %v3_d308 = urem i32 %v7_d1ac, 65536
  store i32 %v3_d308, i32* @r4, align 4
  %v3_d30c = urem i32 %v6_d208, 65536
  store i32 %v3_d30c, i32* %sb.global-to-local, align 4
  %v3_d310 = urem i32 %v0_d2fc, 65536
  store i32 %v3_d310, i32* %ip.global-to-local, align 4
  %v2_d314 = icmp eq i32 %v1_d144, 0
  store i1 %v2_d314, i1* %cpsr_z.global-to-local, align 1
  %v0_d318 = load i32, i32* @r7, align 4
  store i32 %v0_d318, i32* %stack_var_-40, align 4
  br i1 %v2_d314, label %.dec_label_pc_d488.preheader_crit_edge, label %dec_label_pc_d32c

.dec_label_pc_d488.preheader_crit_edge:           ; preds = %bb56
  %.pre = add nuw nsw i32 %v0_d2ec, 8
  %.pre19 = add nuw nsw i32 %v0_d2ec, 28
  br label %dec_label_pc_d488.preheader

dec_label_pc_d32c:                                ; preds = %bb56
  %v1_d330 = add nuw nsw i32 %v0_d2ec, 28
  %v1_d334 = add nuw nsw i32 %v0_d2ec, 8
  %v1_d338 = urem i32 %v6_d208, 256
  %tmp57 = udiv i32 %v7_d1ac, 256
  %v3_d344 = urem i32 %tmp57, 256
  %v3_d348 = mul i32 %v1_d334, 65536
  store i32 %v3_d348, i32* @lr, align 4
  %tmp58 = mul nuw nsw i32 %v1_d330, 256
  %v1_d354 = urem i32 %v7_d1ac, 256
  %tmp59 = mul nuw nsw i32 %v1_d334, 256
  %v1_d360 = and i32 %tmp58, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_d360, i32* %r3.global-to-local, align 4
  %v4_d364 = mul nuw nsw i32 %v1_d354, 256
  %v5_d364 = or i32 %v4_d364, %v3_d344
  store i32 %v5_d364, i32* %r0.global-to-local, align 4
  %v3_d368 = mul nuw nsw i32 %v1_d338, 256
  store i32 %v3_d368, i32* %r1.global-to-local, align 4
  %tmp60 = udiv i32 %v0_d2fc, 256
  %v3_d36c = urem i32 %tmp60, 256
  %v1_d370 = and i32 %tmp59, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  store i32 %v1_d370, i32* %ip.global-to-local, align 4
  %v2_d374 = icmp eq i32 %v1_d1f0, 0
  store i1 %v2_d374, i1* %cpsr_z.global-to-local, align 1
  %tmp61 = udiv i32 %v1_d330, 256
  %v4_d378 = urem i32 %tmp61, 256
  %v5_d378 = or i32 %v4_d378, %v1_d360
  store i32 %v5_d378, i32* %r2.global-to-local, align 4
  %v1_d37c = urem i32 %v0_d2fc, 256
  %v5_d380 = trunc i32 %tmp61 to i8
  %v5_d384 = trunc i32 %tmp57 to i8
  %tmp62 = udiv i32 %v6_d208, 256
  %v4_d388 = urem i32 %tmp62, 256
  %v5_d388 = or i32 %v4_d388, %v3_d368
  store i32 %v5_d388, i32* @r5, align 4
  %v4_d38c = mul nuw nsw i32 %v1_d37c, 256
  %v5_d38c = or i32 %v4_d38c, %v3_d36c
  store i32 %v5_d38c, i32* @r6, align 4
  %tmp63 = udiv i32 %v1_d334, 256
  %v4_d390 = urem i32 %tmp63, 256
  %v5_d390 = or i32 %v4_d390, %v1_d370
  store i32 %v5_d390, i32* %sb.global-to-local, align 4
  br i1 %v2_d374, label %dec_label_pc_d398, label %dec_label_pc_d6dc

dec_label_pc_d398:                                ; preds = %dec_label_pc_d32c
  %v3_d39822 = udiv i32 %v1_d360, 256
  store i32 %v3_d39822, i32* %ip.global-to-local, align 4
  store i32 %v1_d354, i32* %r0.global-to-local, align 4
  store i32 %v1_d338, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v1_d37c, i32* %sl.global-to-local, align 4
  %v3_d3b823 = udiv i32 %v1_d370, 256
  store i32 %v3_d3b823, i32* @r7, align 4
  %v4_d410 = sext i8 %v5_d1e0 to i32
  %sext10 = mul i32 %v1_d360, 65536
  %v4_d440 = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v7_d1ac, 16777216
  %v4_d44c = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v6_d208, 16777216
  %v4_d450 = sdiv i32 %sext12, 16777216
  %v4_d458 = sext i8 %v5_d384 to i32
  %v4_d434 = sext i8 %v5_d380 to i32
  br label %dec_label_pc_d3bc

dec_label_pc_d3bc:                                ; preds = %dec_label_pc_d3bc, %dec_label_pc_d398
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d3c8 = call i32 @function_141c8(i32 1510, i32 1)
  store i32 %v2_d3c8, i32* %r0.global-to-local, align 4
  store i32 %v2_d170, i32* %r3.global-to-local, align 4
  %v2_d3d4 = load i32, i32* @r4, align 4
  %v5_d3d4 = mul i32 %v2_d3d4, 4
  %v6_d3d4 = add i32 %v5_d3d4, %v2_d170
  %v7_d3d4 = inttoptr i32 %v6_d3d4 to i32*
  store i32 %v2_d3c8, i32* %v7_d3d4, align 4
  %v3_d3d8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3d8, i32* %r2.global-to-local, align 4
  %v0_d3dc = load i32, i32* %r3.global-to-local, align 4
  %v4_d3dc = mul i32 %v3_d3d8, 4
  %v5_d3dc = add i32 %v0_d3dc, %v4_d3dc
  %v6_d3dc = inttoptr i32 %v5_d3dc to i32*
  %v7_d3dc = load i32, i32* %v6_d3dc, align 4
  store i32 %v7_d3dc, i32* %r1.global-to-local, align 4
  %v1_d3e0 = inttoptr i32 %v7_d3dc to i8*
  %v2_d3e0 = load i8, i8* %v1_d3e0, align 1
  %tmp = urem i8 %v2_d3e0, 16
  %v1_d3e4 = zext i8 %tmp to i32
  %v1_d3e8 = or i32 %v1_d3e4, 64
  store i32 %v1_d3e8, i32* %r3.global-to-local, align 4
  %v1_d3ec = trunc i32 %v1_d3e8 to i8
  store i8 %v1_d3ec, i8* %v1_d3e0, align 1
  %v0_d3f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3f0 = inttoptr i32 %v0_d3f0 to i8*
  %v2_d3f0 = load i8, i8* %v1_d3f0, align 1
  %v3_d3f0 = zext i8 %v2_d3f0 to i32
  %v1_d3f4 = and i32 %v3_d3f0, 240
  %v1_d3f8 = or i32 %v1_d3f4, 5
  store i32 %v1_d3f8, i32* %r2.global-to-local, align 4
  %v3_d400 = add i32 %v0_d3f0, 9
  %v4_d400 = inttoptr i32 %v3_d400 to i8*
  store i8 17, i8* %v4_d400, align 1
  %v0_d404 = load i32, i32* %r2.global-to-local, align 4
  %v1_d404 = trunc i32 %v0_d404 to i8
  %v2_d404 = load i32, i32* %r1.global-to-local, align 4
  %v3_d404 = inttoptr i32 %v2_d404 to i8*
  store i8 %v1_d404, i8* %v3_d404, align 1
  %v2_d40c = load i32, i32* %r1.global-to-local, align 4
  %v3_d40c = add i32 %v2_d40c, 1
  %v4_d40c = inttoptr i32 %v3_d40c to i8*
  store i8 %v5_d1a8, i8* %v4_d40c, align 1
  store i32 %v4_d410, i32* %ip.global-to-local, align 4
  %v2_d414 = load i32, i32* %r1.global-to-local, align 4
  %v3_d414 = add i32 %v2_d414, 8
  %v4_d414 = inttoptr i32 %v3_d414 to i8*
  store i8 %v5_d1e0, i8* %v4_d414, align 1
  %v3_d418 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d418, i32* %r2.global-to-local, align 4
  %v3_d41c = mul i32 %v3_d418, 32
  store i32 %v3_d41c, i32* %r3.global-to-local, align 4
  %v0_d420 = load i32, i32* @fp, align 4
  %v1_d420 = load i32, i32* %r1.global-to-local, align 4
  %v2_d420 = add i32 %v1_d420, 12
  %v3_d420 = inttoptr i32 %v2_d420 to i32*
  store i32 %v0_d420, i32* %v3_d420, align 4
  %v0_d424 = load i32, i32* %r3.global-to-local, align 4
  %v1_d424 = load i32, i32* %r2.global-to-local, align 4
  %tmp66 = mul i32 %v1_d424, -8
  %v5_d424 = add i32 %v0_d424, %tmp66
  %v1_d428 = load i32, i32* @r8, align 4
  %v2_d428 = add i32 %v5_d424, %v1_d428
  store i32 %v2_d428, i32* %r3.global-to-local, align 4
  %v1_d42c = add i32 %v2_d428, 16
  %v2_d42c = inttoptr i32 %v1_d42c to i32*
  %v3_d42c = load i32, i32* %v2_d42c, align 4
  %v1_d430 = add i32 %v1_d424, 1
  store i32 %v1_d430, i32* @r4, align 4
  store i32 %v4_d434, i32* %ip.global-to-local, align 4
  store i32 %v1_d144, i32* %r2.global-to-local, align 4
  %v1_d43c = load i32, i32* %r1.global-to-local, align 4
  %v2_d43c = add i32 %v1_d43c, 16
  %v3_d43c = inttoptr i32 %v2_d43c to i32*
  store i32 %v3_d42c, i32* %v3_d43c, align 4
  store i32 %v4_d440, i32* %r0.global-to-local, align 4
  %v0_d444 = load i32, i32* %ip.global-to-local, align 4
  %v1_d444 = trunc i32 %v0_d444 to i8
  %v2_d444 = load i32, i32* %r1.global-to-local, align 4
  %v3_d444 = add i32 %v2_d444, 2
  %v4_d444 = inttoptr i32 %v3_d444 to i8*
  store i8 %v1_d444, i8* %v4_d444, align 1
  %v0_d448 = load i32, i32* %r0.global-to-local, align 4
  %v1_d448 = trunc i32 %v0_d448 to i8
  %v2_d448 = load i32, i32* %r1.global-to-local, align 4
  %v3_d448 = add i32 %v2_d448, 3
  %v4_d448 = inttoptr i32 %v3_d448 to i8*
  store i8 %v1_d448, i8* %v4_d448, align 1
  store i32 %v4_d44c, i32* %ip.global-to-local, align 4
  store i32 %v4_d450, i32* %r0.global-to-local, align 4
  %v0_d454 = load i32, i32* @r4, align 4
  %v1_d454 = load i32, i32* %r2.global-to-local, align 4
  %v9_d454 = icmp eq i32 %v0_d454, %v1_d454
  store i1 %v9_d454, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_d458, i32* %r2.global-to-local, align 4
  %v0_d45c = load i32, i32* %r1.global-to-local, align 4
  %v1_d45c = add i32 %v0_d45c, 20
  store i32 %v1_d45c, i32* %r3.global-to-local, align 4
  %v3_d460 = add i32 %v0_d45c, 4
  %v4_d460 = inttoptr i32 %v3_d460 to i8*
  store i8 %v5_d384, i8* %v4_d460, align 1
  %v0_d464 = load i32, i32* %ip.global-to-local, align 4
  %v1_d464 = trunc i32 %v0_d464 to i8
  %v2_d464 = load i32, i32* %r1.global-to-local, align 4
  %v3_d464 = add i32 %v2_d464, 5
  %v4_d464 = inttoptr i32 %v3_d464 to i8*
  store i8 %v1_d464, i8* %v4_d464, align 1
  %v0_d468 = load i32, i32* @r5, align 4
  %v1_d468 = trunc i32 %v0_d468 to i8
  %v2_d468 = load i32, i32* %r1.global-to-local, align 4
  %v3_d468 = add i32 %v2_d468, 20
  %v4_d468 = inttoptr i32 %v3_d468 to i8*
  store i8 %v1_d468, i8* %v4_d468, align 1
  %v0_d46c = load i32, i32* @r7, align 4
  %v1_d46c = trunc i32 %v0_d46c to i8
  %v2_d46c = load i32, i32* %r3.global-to-local, align 4
  %v3_d46c = add i32 %v2_d46c, 5
  %v4_d46c = inttoptr i32 %v3_d46c to i8*
  store i8 %v1_d46c, i8* %v4_d46c, align 1
  %v0_d470 = load i32, i32* %r0.global-to-local, align 4
  %v1_d470 = trunc i32 %v0_d470 to i8
  %v2_d470 = load i32, i32* %r3.global-to-local, align 4
  %v3_d470 = add i32 %v2_d470, 1
  %v4_d470 = inttoptr i32 %v3_d470 to i8*
  store i8 %v1_d470, i8* %v4_d470, align 1
  %v0_d474 = load i32, i32* @r6, align 4
  %v1_d474 = trunc i32 %v0_d474 to i8
  %v2_d474 = load i32, i32* %r3.global-to-local, align 4
  %v3_d474 = add i32 %v2_d474, 2
  %v4_d474 = inttoptr i32 %v3_d474 to i8*
  store i8 %v1_d474, i8* %v4_d474, align 1
  %v0_d478 = load i32, i32* %sl.global-to-local, align 4
  %v1_d478 = trunc i32 %v0_d478 to i8
  %v2_d478 = load i32, i32* %r3.global-to-local, align 4
  %v3_d478 = add i32 %v2_d478, 3
  %v4_d478 = inttoptr i32 %v3_d478 to i8*
  store i8 %v1_d478, i8* %v4_d478, align 1
  %v0_d47c = load i32, i32* %sb.global-to-local, align 4
  %v1_d47c = trunc i32 %v0_d47c to i8
  %v2_d47c = load i32, i32* %r3.global-to-local, align 4
  %v3_d47c = add i32 %v2_d47c, 4
  %v4_d47c = inttoptr i32 %v3_d47c to i8*
  store i8 %v1_d47c, i8* %v4_d47c, align 1
  %v0_d480 = load i32, i32* @r4, align 4
  store i32 %v0_d480, i32* %stack_var_-40, align 4
  %v5_d484 = icmp slt i32 %v0_d454, %v1_d454
  br i1 %v5_d484, label %dec_label_pc_d3bc, label %dec_label_pc_d488.preheader

dec_label_pc_d488.preheader:                      ; preds = %dec_label_pc_d708, %dec_label_pc_d3bc, %.dec_label_pc_d488.preheader_crit_edge
  %v1_d4a8.pre-phi = phi i32 [ %.pre19, %.dec_label_pc_d488.preheader_crit_edge ], [ %v1_d330, %dec_label_pc_d3bc ], [ %v1_d330, %dec_label_pc_d708 ]
  %v1_d4a4.pre-phi = phi i32 [ %.pre, %.dec_label_pc_d488.preheader_crit_edge ], [ %v1_d334, %dec_label_pc_d3bc ], [ %v1_d334, %dec_label_pc_d708 ]
  %v9_d638 = icmp eq i32 %v3_d308, add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1)
  %v2_d4ec = icmp eq i32 %v1_d264, 0
  br label %dec_label_pc_d488

dec_label_pc_d488:                                ; preds = %dec_label_pc_d488.preheader, %dec_label_pc_d6b4
  store i32 %v1_d144, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_d314, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_d314, label %dec_label_pc_d6b4, label %dec_label_pc_d49c

dec_label_pc_d49c:                                ; preds = %dec_label_pc_d488
  store i32 %v0_d2ec, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_d4a4.pre-phi, i32* @sb, align 4
  store i32 %v1_d4a8.pre-phi, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d5a0

dec_label_pc_d4b4:                                ; preds = %dec_label_pc_d5a0
  %v0_d4b4 = load i32, i32* @fp, align 4
  %v7_d4b4 = icmp eq i32 %v0_d4b4, -1
  store i1 %v7_d4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d4b4, label %dec_label_pc_d628, label %dec_label_pc_d4bc

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d5c4, %dec_label_pc_d4b4
  store i32 %v3_d308, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_d638, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d638, label %dec_label_pc_d644, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d628.dec_label_pc_d4d0_crit_edge, %dec_label_pc_d4bc
  %v1_d4d4 = phi i32 [ %v1_d4d4.pre, %dec_label_pc_d628.dec_label_pc_d4d0_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), %dec_label_pc_d4bc ]
  store i32 %v3_d30c, i32* %r0.global-to-local, align 4
  %v9_d4d4 = icmp eq i32 %v3_d30c, %v1_d4d4
  store i1 %v9_d4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4d4, label %dec_label_pc_d660, label %dec_label_pc_d4dc

dec_label_pc_d4dc:                                ; preds = %dec_label_pc_d644.dec_label_pc_d4dc_crit_edge, %dec_label_pc_d4d0
  %v1_d4e0 = phi i32 [ %v1_d4e0.pre, %dec_label_pc_d644.dec_label_pc_d4dc_crit_edge ], [ %v1_d4d4, %dec_label_pc_d4d0 ]
  store i32 %v3_d310, i32* %r1.global-to-local, align 4
  %v9_d4e0 = icmp eq i32 %v3_d310, %v1_d4e0
  store i1 %v9_d4e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4e0, label %dec_label_pc_d67c, label %dec_label_pc_d4e8

dec_label_pc_d4e8:                                ; preds = %dec_label_pc_d660, %dec_label_pc_d4dc
  store i32 %v1_d264, i32* %r2.global-to-local, align 4
  store i1 %v2_d4ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d4ec, label %dec_label_pc_d4f4, label %dec_label_pc_d698

dec_label_pc_d4f4:                                ; preds = %dec_label_pc_d4e8, %dec_label_pc_d67c, %dec_label_pc_d698
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d4f8 = load i32, i32* @r7, align 4
  %v1_d4f8 = trunc i32 %v0_d4f8 to i8
  %v2_d4f8 = load i32, i32* @r5, align 4
  %v3_d4f8 = add i32 %v2_d4f8, 10
  %v4_d4f8 = inttoptr i32 %v3_d4f8 to i8*
  store i8 %v1_d4f8, i8* %v4_d4f8, align 1
  %v0_d4fc = load i32, i32* @r7, align 4
  %v1_d4fc = trunc i32 %v0_d4fc to i8
  %v2_d4fc = load i32, i32* @r5, align 4
  %v3_d4fc = add i32 %v2_d4fc, 11
  %v4_d4fc = inttoptr i32 %v3_d4fc to i8*
  store i8 %v1_d4fc, i8* %v4_d4fc, align 1
  %v0_d500 = load i32, i32* @r5, align 4
  store i32 %v0_d500, i32* @r0, align 4
  %v2_d504 = call i32 @function_e4b8(i32 %v0_d500, i32 20)
  %v3_d504 = trunc i32 %v2_d504 to i8
  store i32 %v2_d504, i32* %r0.global-to-local, align 4
  %v4_d508 = sdiv i32 %v2_d504, 256
  store i32 %v4_d508, i32* %r3.global-to-local, align 4
  %v1_d50c = trunc i32 %v4_d508 to i8
  %v2_d50c = load i32, i32* @r5, align 4
  %v3_d50c = add i32 %v2_d50c, 11
  %v4_d50c = inttoptr i32 %v3_d50c to i8*
  store i8 %v1_d50c, i8* %v4_d50c, align 1
  %v3_d510 = load i32, i32* @r5, align 4
  %v4_d510 = add i32 %v3_d510, 10
  %v5_d510 = inttoptr i32 %v4_d510 to i8*
  store i8 %v3_d504, i8* %v5_d510, align 1
  %v0_d514 = load i32, i32* @r7, align 4
  %v1_d514 = trunc i32 %v0_d514 to i8
  %v2_d514 = load i32, i32* @r6, align 4
  %v3_d514 = add i32 %v2_d514, 6
  %v4_d514 = inttoptr i32 %v3_d514 to i8*
  store i8 %v1_d514, i8* %v4_d514, align 1
  %v0_d518 = load i32, i32* @r7, align 4
  %v1_d518 = trunc i32 %v0_d518 to i8
  %v2_d518 = load i32, i32* @r6, align 4
  %v3_d518 = add i32 %v2_d518, 7
  %v4_d518 = inttoptr i32 %v3_d518 to i8*
  store i8 %v1_d518, i8* %v4_d518, align 1
  %v0_d51c = load i32, i32* @r5, align 4
  %v1_d51c = add i32 %v0_d51c, 24
  %v2_d51c = inttoptr i32 %v1_d51c to i8*
  %v3_d51c = load i8, i8* %v2_d51c, align 1
  %v4_d51c = zext i8 %v3_d51c to i32
  store i32 %v4_d51c, i32* %r3.global-to-local, align 4
  %v1_d520 = add i32 %v0_d51c, 25
  %v2_d520 = inttoptr i32 %v1_d520 to i8*
  %v3_d520 = load i8, i8* %v2_d520, align 1
  %v4_d520 = zext i8 %v3_d520 to i32
  %v0_d524 = load i32, i32* @r6, align 4
  store i32 %v0_d524, i32* @r1, align 4
  %v4_d528 = mul nuw nsw i32 %v4_d520, 256
  %v5_d528 = or i32 %v4_d528, %v4_d51c
  store i32 %v5_d528, i32* %r2.global-to-local, align 4
  store i32 %v0_d51c, i32* %r0.global-to-local, align 4
  %v0_d530 = load i32, i32* @sb, align 4
  store i32 %v0_d530, i32* %r3.global-to-local, align 4
  %v4_d534 = call i32 @function_e514(i32 %v0_d51c, i32 %v0_d524, i32 %v5_d528, i32 %v0_d530)
  %v5_d534 = trunc i32 %v4_d534 to i8
  store i32 %v4_d534, i32* %r0.global-to-local, align 4
  %v4_d53824 = udiv i32 %v4_d534, 256
  %v1_d53c = trunc i32 %v4_d53824 to i8
  %v2_d53c = load i32, i32* @r6, align 4
  %v3_d53c = add i32 %v2_d53c, 7
  %v4_d53c = inttoptr i32 %v3_d53c to i8*
  store i8 %v1_d53c, i8* %v4_d53c, align 1
  %v3_d540 = load i32, i32* @r6, align 4
  %v4_d540 = add i32 %v3_d540, 6
  %v5_d540 = inttoptr i32 %v4_d540 to i8*
  store i8 %v5_d534, i8* %v5_d540, align 1
  %v3_d544 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d544, i32* %r3.global-to-local, align 4
  %v0_d548 = load i32, i32* @r5, align 4
  %v1_d548 = add i32 %v0_d548, 20
  %v2_d548 = inttoptr i32 %v1_d548 to i32*
  %v3_d548 = load i32, i32* %v2_d548, align 4
  %v3_d550 = udiv i32 %v3_d548, 65536
  store i32 %v3_d550, i32* %r2.global-to-local, align 4
  %v5_d554 = mul i32 %v3_d544, 24
  %v1_d558 = load i32, i32* @r8, align 4
  %v2_d558 = add i32 %v1_d558, %v5_d554
  store i32 %v2_d558, i32* %ip.global-to-local, align 4
  %v3_d55c21 = udiv i32 %v3_d548, 16777216
  %v1_d560 = trunc i32 %v3_d55c21 to i8
  %v3_d560 = add i32 %v2_d558, 3
  %v4_d560 = inttoptr i32 %v3_d560 to i8*
  store i8 %v1_d560, i8* %v4_d560, align 1
  %v0_d564 = load i32, i32* %r2.global-to-local, align 4
  %v1_d564 = trunc i32 %v0_d564 to i8
  %v2_d564 = load i32, i32* %ip.global-to-local, align 4
  %v3_d564 = add i32 %v2_d564, 2
  %v4_d564 = inttoptr i32 %v3_d564 to i8*
  store i8 %v1_d564, i8* %v4_d564, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_d570 = load i32, i32* @r5, align 4
  store i32 %v0_d570, i32* %r1.global-to-local, align 4
  store i32 %v3_d29c, i32* %r0.global-to-local, align 4
  %v0_d578 = load i32, i32* @sl, align 4
  store i32 %v0_d578, i32* %r2.global-to-local, align 4
  %v0_d580 = load i32, i32* %ip.global-to-local, align 4
  %v6_d584 = inttoptr i32 %v0_d570 to i32*
  %v7_d584 = call i32 @function_13e78(i32 %v3_d29c, i32* %v6_d584, i32 %v0_d578, i32 16384, i32 %v0_d580, i32 16)
  %v3_d588 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d588, i32* %r3.global-to-local, align 4
  store i32 %v1_d144, i32* @r4, align 4
  %v1_d590 = add i32 %v3_d588, 1
  store i32 %v1_d590, i32* %r0.global-to-local, align 4
  %v9_d594 = icmp eq i32 %v1_d590, %v1_d144
  store i1 %v9_d594, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d590, i32* %stack_var_-40, align 4
  %v6_d59c = icmp slt i32 %v1_d590, %v1_d144
  br i1 %v6_d59c, label %dec_label_pc_d5a0, label %dec_label_pc_d6b4

dec_label_pc_d5a0:                                ; preds = %dec_label_pc_d4f4, %dec_label_pc_d49c
  %v1_d5b4 = phi i32 [ %v1_d590, %dec_label_pc_d4f4 ], [ 0, %dec_label_pc_d49c ]
  %v5_d5a4 = mul i32 %v1_d5b4, 24
  %v1_d5a8 = load i32, i32* @r8, align 4
  %v2_d5a8 = add i32 %v1_d5a8, %v5_d5a4
  store i32 %v2_d5a8, i32* %r3.global-to-local, align 4
  %v1_d5b0 = add i32 %v2_d5a8, 20
  %v2_d5b0 = inttoptr i32 %v1_d5b0 to i8*
  %v3_d5b0 = load i8, i8* %v2_d5b0, align 1
  %v4_d5b0 = zext i8 %v3_d5b0 to i32
  store i32 %v4_d5b0, i32* %r2.global-to-local, align 4
  %v4_d5b4 = mul i32 %v1_d5b4, 4
  %v5_d5b4 = add i32 %v4_d5b4, %v2_d170
  %v6_d5b4 = inttoptr i32 %v5_d5b4 to i32*
  %v7_d5b4 = load i32, i32* %v6_d5b4, align 4
  store i32 %v7_d5b4, i32* @r5, align 4
  %v2_d5b8 = icmp ugt i8 %v3_d5b0, 30
  %v7_d5b8 = icmp eq i8 %v3_d5b0, 31
  store i1 %v7_d5b8, i1* %cpsr_z.global-to-local, align 1
  %v1_d5bc = add i32 %v7_d5b4, 20
  store i32 %v1_d5bc, i32* @r6, align 4
  %v2_d5c0 = xor i1 %v7_d5b8, true
  %v3_d5c0 = and i1 %v2_d5b8, %v2_d5c0
  br i1 %v3_d5c0, label %dec_label_pc_d4b4, label %dec_label_pc_d5c4

dec_label_pc_d5c4:                                ; preds = %dec_label_pc_d5a0
  %v1_d5c4 = add i32 %v2_d5a8, 16
  %v2_d5c4 = inttoptr i32 %v1_d5c4 to i32*
  %v3_d5c4 = load i32, i32* %v2_d5c4, align 4
  %v0_d5c8 = call i32 @function_f8e8()
  store i32 %v0_d5c8, i32* %r0.global-to-local, align 4
  %v3_d5cc = load i32, i32* %stack_var_-40, align 4
  %v5_d5d4 = mul i32 %v3_d5cc, 24
  %v1_d5dc = load i32, i32* @r8, align 4
  %v2_d5dc = add i32 %v1_d5dc, %v5_d5d4
  store i32 %v2_d5dc, i32* %r1.global-to-local, align 4
  %v1_d5e0 = and i32 %v3_d5c4, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_d5e0, i32* %r3.global-to-local, align 4
  %v1_d5d8 = udiv i32 %v3_d5c4, 256
  %v3_d5e4 = and i32 %v1_d5d8, 65280
  store i32 %v3_d5e4, i32* %r2.global-to-local, align 4
  %v3_d5e8 = mul i32 %v3_d5c4, 16777216
  store i32 %v3_d5e8, i32* %ip.global-to-local, align 4
  %v1_d5ec = add i32 %v2_d5dc, 20
  %v2_d5ec = inttoptr i32 %v1_d5ec to i8*
  %v3_d5ec = load i8, i8* %v2_d5ec, align 1
  %v4_d5ec = zext i8 %v3_d5ec to i32
  %v4_d5f0 = mul i32 %v1_d5e0, 256
  %v5_d5f0 = or i32 %v4_d5f0, %v3_d5e8
  store i32 %v5_d5f0, i32* %ip.global-to-local, align 4
  %v4_d5f4 = udiv i32 %v3_d5c4, 16777216
  %v5_d5f4 = or i32 %v3_d5e4, %v4_d5f4
  %v2_d5f8 = or i32 %v5_d5f4, %v5_d5f0
  %v7_d5fc = lshr i32 %v0_d5c8, %v4_d5ec
  %v8_d5fc = add i32 %v7_d5fc, %v2_d5f8
  store i32 %v8_d5fc, i32* %r2.global-to-local, align 4
  %v3_d608 = mul i32 %v8_d5fc, 16777216
  %v1_d60c = and i32 %v8_d5fc, 65280
  store i32 %v1_d60c, i32* %r0.global-to-local, align 4
  %v4_d610 = mul nuw nsw i32 %v1_d60c, 256
  %v5_d610 = or i32 %v4_d610, %v3_d608
  store i32 %v5_d610, i32* %r1.global-to-local, align 4
  %v2_d618 = call i32 @llvm.bswap.i32(i32 %v8_d5fc)
  store i32 %v2_d618, i32* %r3.global-to-local, align 4
  %v0_d61c = load i32, i32* @fp, align 4
  %v3_d61c = icmp eq i32 %v0_d61c, -1
  %v8_d61c = icmp eq i32 %v0_d61c, -1
  store i1 %v8_d61c, i1* %cpsr_z.global-to-local, align 1
  %v1_d620 = load i32, i32* @r5, align 4
  %v2_d620 = add i32 %v1_d620, 16
  %v3_d620 = inttoptr i32 %v2_d620 to i32*
  store i32 %v2_d618, i32* %v3_d620, align 4
  br i1 %v3_d61c, label %dec_label_pc_d628, label %dec_label_pc_d4bc

dec_label_pc_d628:                                ; preds = %dec_label_pc_d5c4, %dec_label_pc_d4b4
  %v0_d628 = call i32 @function_f8e8()
  store i32 %v0_d628, i32* %r0.global-to-local, align 4
  store i32 %v3_d308, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_d638, i1* %cpsr_z.global-to-local, align 1
  %v1_d63c = load i32, i32* @r5, align 4
  %v2_d63c = add i32 %v1_d63c, 12
  %v3_d63c = inttoptr i32 %v2_d63c to i32*
  store i32 %v0_d628, i32* %v3_d63c, align 4
  br i1 %v9_d638, label %dec_label_pc_d644, label %dec_label_pc_d628.dec_label_pc_d4d0_crit_edge

dec_label_pc_d628.dec_label_pc_d4d0_crit_edge:    ; preds = %dec_label_pc_d628
  %v1_d4d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4d0

dec_label_pc_d644:                                ; preds = %dec_label_pc_d628, %dec_label_pc_d4bc
  %v0_d644 = call i32 @function_f8e8()
  %v1_d644 = trunc i32 %v0_d644 to i8
  %v4_d648 = sdiv i32 %v0_d644, 256
  store i32 %v4_d648, i32* %r3.global-to-local, align 4
  %v3_d64c = load i32, i32* @r5, align 4
  %v4_d64c = add i32 %v3_d64c, 4
  %v5_d64c = inttoptr i32 %v4_d64c to i8*
  store i8 %v1_d644, i8* %v5_d64c, align 1
  store i32 %v3_d30c, i32* %r0.global-to-local, align 4
  %v1_d654 = load i32, i32* @r4, align 4
  %v9_d654 = icmp eq i32 %v3_d30c, %v1_d654
  store i1 %v9_d654, i1* %cpsr_z.global-to-local, align 1
  %v0_d658 = load i32, i32* %r3.global-to-local, align 4
  %v1_d658 = trunc i32 %v0_d658 to i8
  %v2_d658 = load i32, i32* @r5, align 4
  %v3_d658 = add i32 %v2_d658, 5
  %v4_d658 = inttoptr i32 %v3_d658 to i8*
  store i8 %v1_d658, i8* %v4_d658, align 1
  %v0_d65c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d65c, label %dec_label_pc_d660, label %dec_label_pc_d644.dec_label_pc_d4dc_crit_edge

dec_label_pc_d644.dec_label_pc_d4dc_crit_edge:    ; preds = %dec_label_pc_d644
  %v1_d4e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4dc

dec_label_pc_d660:                                ; preds = %dec_label_pc_d644, %dec_label_pc_d4d0
  %v0_d660 = call i32 @function_f8e8()
  %v1_d660 = trunc i32 %v0_d660 to i8
  store i32 %v0_d660, i32* %r0.global-to-local, align 4
  store i32 %v3_d310, i32* %r1.global-to-local, align 4
  %v4_d668 = sdiv i32 %v0_d660, 256
  store i32 %v4_d668, i32* %r3.global-to-local, align 4
  %v1_d66c = load i32, i32* @r4, align 4
  %v9_d66c = icmp eq i32 %v3_d310, %v1_d66c
  store i1 %v9_d66c, i1* %cpsr_z.global-to-local, align 1
  %v3_d670 = load i32, i32* @r5, align 4
  %v4_d670 = add i32 %v3_d670, 20
  %v5_d670 = inttoptr i32 %v4_d670 to i8*
  store i8 %v1_d660, i8* %v5_d670, align 1
  %v0_d674 = load i32, i32* %r3.global-to-local, align 4
  %v1_d674 = trunc i32 %v0_d674 to i8
  %v2_d674 = load i32, i32* @r6, align 4
  %v3_d674 = add i32 %v2_d674, 1
  %v4_d674 = inttoptr i32 %v3_d674 to i8*
  store i8 %v1_d674, i8* %v4_d674, align 1
  %v0_d678 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d678, label %dec_label_pc_d67c, label %dec_label_pc_d4e8

dec_label_pc_d67c:                                ; preds = %dec_label_pc_d660, %dec_label_pc_d4dc
  %v0_d67c = call i32 @function_f8e8()
  %v1_d67c = trunc i32 %v0_d67c to i8
  store i32 %v0_d67c, i32* %r0.global-to-local, align 4
  store i32 %v1_d264, i32* %r2.global-to-local, align 4
  %v4_d684 = sdiv i32 %v0_d67c, 256
  store i32 %v4_d684, i32* %r3.global-to-local, align 4
  store i1 %v2_d4ec, i1* %cpsr_z.global-to-local, align 1
  %v1_d68c = trunc i32 %v4_d684 to i8
  %v2_d68c = load i32, i32* @r6, align 4
  %v3_d68c = add i32 %v2_d68c, 3
  %v4_d68c = inttoptr i32 %v3_d68c to i8*
  store i8 %v1_d68c, i8* %v4_d68c, align 1
  %v3_d690 = load i32, i32* @r6, align 4
  %v4_d690 = add i32 %v3_d690, 2
  %v5_d690 = inttoptr i32 %v4_d690 to i8*
  store i8 %v1_d67c, i8* %v5_d690, align 1
  %v0_d694 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d694, label %dec_label_pc_d4f4, label %dec_label_pc_d698

dec_label_pc_d698:                                ; preds = %dec_label_pc_d4e8, %dec_label_pc_d67c
  %v0_d698 = load i32, i32* @r5, align 4
  %v1_d698 = add i32 %v0_d698, 28
  store i32 %v1_d698, i32* @r4, align 4
  store i32 %v1_d698, i32* %r0.global-to-local, align 4
  store i32 %v0_d2ec, i32* %r1.global-to-local, align 4
  %v2_d6a4 = call i32 @function_f99c(i32 %v1_d698, i32 %v0_d2ec)
  store i32 %v2_d6a4, i32* %r0.global-to-local, align 4
  store i32 %v0_d2ec, i32* %r3.global-to-local, align 4
  %v0_d6ac = load i32, i32* @r7, align 4
  %v1_d6ac = trunc i32 %v0_d6ac to i8
  %v2_d6ac = load i32, i32* @r4, align 4
  %v4_d6ac = add i32 %v2_d6ac, %v0_d2ec
  %v5_d6ac = inttoptr i32 %v4_d6ac to i8*
  store i8 %v1_d6ac, i8* %v5_d6ac, align 1
  br label %dec_label_pc_d4f4

dec_label_pc_d6b4:                                ; preds = %dec_label_pc_d4f4, %dec_label_pc_d488
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_d6b8 = call i32 @function_138c0(i32* null)
  store i32 %v2_d6b8, i32* %r0.global-to-local, align 4
  store i32 %v2_d288, i32* %sb.global-to-local, align 4
  %v9_d6c0 = icmp eq i32 %v2_d288, %v2_d6b8
  store i1 %v9_d6c0, i1* %cpsr_z.global-to-local, align 1
  %v6_d6c4 = icmp slt i32 %v2_d288, %v2_d6b8
  br i1 %v6_d6c4, label %dec_label_pc_d6c8, label %dec_label_pc_d488

dec_label_pc_d6c8:                                ; preds = %dec_label_pc_d6b4, %dec_label_pc_d140, %dec_label_pc_d6d0
  %v29_d6cc = phi i32 [ %v3_d29c, %dec_label_pc_d140 ], [ %v1_d6d4, %dec_label_pc_d6d0 ], [ %v2_d6b8, %dec_label_pc_d6b4 ]
  store i32 %v18_d140, i32* %sb.global-to-local, align 4
  store i32 %v21_d140, i32* %sl.global-to-local, align 4
  ret i32 %v29_d6cc

dec_label_pc_d6d0:                                ; preds = %dec_label_pc_d2ac
  store i32 %v3_d29c, i32* %r0.global-to-local, align 4
  %v1_d6d4 = call i32 @function_135f0(i32 %v3_d29c)
  store i32 %v1_d6d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d6c8

dec_label_pc_d6dc:                                ; preds = %dec_label_pc_d32c
  %v3_d6e0 = sext i8 %v5_d380 to i32
  %v7_d6e0 = sext i8 %v5_d384 to i32
  %v3_d6e4 = sdiv i32 %v3_d6e0, 256
  store i32 %v3_d6e4, i32* %r1.global-to-local, align 4
  %v3_d6e8 = sdiv i32 %v7_d6e0, 256
  store i32 %v3_d6e8, i32* %r2.global-to-local, align 4
  store i32 %v1_d338, i32* %r3.global-to-local, align 4
  store i32 %v0_d318, i32* @r4, align 4
  store i32 %v1_d37c, i32* %sl.global-to-local, align 4
  %v3_d70420 = udiv i32 %v1_d370, 256
  store i32 %v3_d70420, i32* @r7, align 4
  %v4_d750 = sext i8 %v5_d1a8 to i32
  %sext9 = mul i32 %v6_d208, 16777216
  %v4_d79c = sdiv i32 %sext9, 16777216
  br label %dec_label_pc_d708

dec_label_pc_d708:                                ; preds = %dec_label_pc_d708, %dec_label_pc_d6dc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d714 = call i32 @function_141c8(i32 1510, i32 1)
  store i32 %v2_d714, i32* %r0.global-to-local, align 4
  store i32 %v2_d170, i32* %ip.global-to-local, align 4
  %v3_d71c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d71c, i32* %r2.global-to-local, align 4
  %v2_d720 = load i32, i32* @r4, align 4
  %v5_d720 = mul i32 %v2_d720, 4
  %v6_d720 = add i32 %v5_d720, %v2_d170
  %v7_d720 = inttoptr i32 %v6_d720 to i32*
  store i32 %v2_d714, i32* %v7_d720, align 4
  %v0_d724 = load i32, i32* %ip.global-to-local, align 4
  %v1_d724 = load i32, i32* %r2.global-to-local, align 4
  %v4_d724 = mul i32 %v1_d724, 4
  %v5_d724 = add i32 %v4_d724, %v0_d724
  %v6_d724 = inttoptr i32 %v5_d724 to i32*
  %v7_d724 = load i32, i32* %v6_d724, align 4
  store i32 %v7_d724, i32* %r1.global-to-local, align 4
  %v1_d728 = inttoptr i32 %v7_d724 to i8*
  %v2_d728 = load i8, i8* %v1_d728, align 1
  %tmp67 = urem i8 %v2_d728, 16
  %v1_d72c = zext i8 %tmp67 to i32
  %v1_d730 = or i32 %v1_d72c, 64
  store i32 %v1_d730, i32* %r3.global-to-local, align 4
  %v1_d734 = trunc i32 %v1_d730 to i8
  store i8 %v1_d734, i8* %v1_d728, align 1
  %v0_d738 = load i32, i32* %r1.global-to-local, align 4
  %v1_d738 = inttoptr i32 %v0_d738 to i8*
  %v2_d738 = load i8, i8* %v1_d738, align 1
  %v3_d738 = zext i8 %v2_d738 to i32
  %v1_d73c = and i32 %v3_d738, 240
  %v1_d740 = or i32 %v1_d73c, 5
  store i32 %v1_d740, i32* %r2.global-to-local, align 4
  %v3_d748 = add i32 %v0_d738, 9
  %v4_d748 = inttoptr i32 %v3_d748 to i8*
  store i8 17, i8* %v4_d748, align 1
  %v0_d74c = load i32, i32* %r2.global-to-local, align 4
  %v1_d74c = trunc i32 %v0_d74c to i8
  %v2_d74c = load i32, i32* %r1.global-to-local, align 4
  %v3_d74c = inttoptr i32 %v2_d74c to i8*
  store i8 %v1_d74c, i8* %v3_d74c, align 1
  store i32 %v4_d750, i32* %r0.global-to-local, align 4
  %v2_d754 = load i32, i32* %r1.global-to-local, align 4
  %v3_d754 = add i32 %v2_d754, 1
  %v4_d754 = inttoptr i32 %v3_d754 to i8*
  store i8 %v5_d1a8, i8* %v4_d754, align 1
  %v2_d75c = load i32, i32* %r1.global-to-local, align 4
  %v3_d75c = add i32 %v2_d75c, 8
  %v4_d75c = inttoptr i32 %v3_d75c to i8*
  store i8 %v5_d1e0, i8* %v4_d75c, align 1
  %v3_d760 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d760, i32* %r2.global-to-local, align 4
  %v3_d764 = mul i32 %v3_d760, 32
  store i32 %v3_d764, i32* %r3.global-to-local, align 4
  %v0_d768 = load i32, i32* @fp, align 4
  %v1_d768 = load i32, i32* %r1.global-to-local, align 4
  %v2_d768 = add i32 %v1_d768, 12
  %v3_d768 = inttoptr i32 %v2_d768 to i32*
  store i32 %v0_d768, i32* %v3_d768, align 4
  %v0_d76c = load i32, i32* %r3.global-to-local, align 4
  %v1_d76c = load i32, i32* %r2.global-to-local, align 4
  %tmp68 = mul i32 %v1_d76c, -8
  %v5_d76c = add i32 %v0_d76c, %tmp68
  store i32 %v3_d6e0, i32* %ip.global-to-local, align 4
  %v1_d774 = load i32, i32* @r8, align 4
  %v2_d774 = add i32 %v1_d774, %v5_d76c
  store i32 %v2_d774, i32* %r3.global-to-local, align 4
  %v1_d778 = add i32 %v2_d774, 16
  %v2_d778 = inttoptr i32 %v1_d778 to i32*
  %v3_d778 = load i32, i32* %v2_d778, align 4
  store i32 %v3_d778, i32* %r0.global-to-local, align 4
  %v2_d77c = load i32, i32* %r1.global-to-local, align 4
  %v3_d77c = add i32 %v2_d77c, 2
  %v4_d77c = inttoptr i32 %v3_d77c to i8*
  store i8 %v5_d380, i8* %v4_d77c, align 1
  store i32 %v3_d6e8, i32* %ip.global-to-local, align 4
  %v0_d784 = load i32, i32* %r2.global-to-local, align 4
  %v1_d784 = add i32 %v0_d784, 1
  store i32 %v1_d784, i32* @r4, align 4
  store i32 %v1_d144, i32* %r3.global-to-local, align 4
  store i32 %v7_d6e0, i32* %r2.global-to-local, align 4
  %v0_d790 = load i32, i32* %r0.global-to-local, align 4
  %v1_d790 = load i32, i32* %r1.global-to-local, align 4
  %v2_d790 = add i32 %v1_d790, 16
  %v3_d790 = inttoptr i32 %v2_d790 to i32*
  store i32 %v0_d790, i32* %v3_d790, align 4
  store i32 %v3_d6e4, i32* %r0.global-to-local, align 4
  %v0_d798 = load i32, i32* %ip.global-to-local, align 4
  %v1_d798 = trunc i32 %v0_d798 to i8
  %v2_d798 = load i32, i32* %r1.global-to-local, align 4
  %v3_d798 = add i32 %v2_d798, 5
  %v4_d798 = inttoptr i32 %v3_d798 to i8*
  store i8 %v1_d798, i8* %v4_d798, align 1
  store i32 %v4_d79c, i32* %ip.global-to-local, align 4
  %v0_d7a0 = load i32, i32* %r0.global-to-local, align 4
  %v1_d7a0 = trunc i32 %v0_d7a0 to i8
  %v2_d7a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_d7a0 = add i32 %v2_d7a0, 3
  %v4_d7a0 = inttoptr i32 %v3_d7a0 to i8*
  store i8 %v1_d7a0, i8* %v4_d7a0, align 1
  %v0_d7a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d7a4 = trunc i32 %v0_d7a4 to i8
  %v2_d7a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d7a4 = add i32 %v2_d7a4, 4
  %v4_d7a4 = inttoptr i32 %v3_d7a4 to i8*
  store i8 %v1_d7a4, i8* %v4_d7a4, align 1
  %v0_d7a8 = load i32, i32* @r4, align 4
  %v1_d7a8 = load i32, i32* %r3.global-to-local, align 4
  %v9_d7a8 = icmp eq i32 %v0_d7a8, %v1_d7a8
  store i1 %v9_d7a8, i1* %cpsr_z.global-to-local, align 1
  store i32 64, i32* %r0.global-to-local, align 4
  %v0_d7b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_d7b0 = add i32 %v0_d7b0, 20
  store i32 %v1_d7b0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d7b8 = add i32 %v0_d7b0, 6
  %v4_d7b8 = inttoptr i32 %v3_d7b8 to i8*
  store i8 64, i8* %v4_d7b8, align 1
  %v0_d7bc = load i32, i32* %r2.global-to-local, align 4
  %v1_d7bc = trunc i32 %v0_d7bc to i8
  %v2_d7bc = load i32, i32* %r1.global-to-local, align 4
  %v3_d7bc = add i32 %v2_d7bc, 7
  %v4_d7bc = inttoptr i32 %v3_d7bc to i8*
  store i8 %v1_d7bc, i8* %v4_d7bc, align 1
  %v0_d7c0 = load i32, i32* @r5, align 4
  %v1_d7c0 = trunc i32 %v0_d7c0 to i8
  %v2_d7c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_d7c0 = add i32 %v2_d7c0, 20
  %v4_d7c0 = inttoptr i32 %v3_d7c0 to i8*
  store i8 %v1_d7c0, i8* %v4_d7c0, align 1
  %v0_d7c4 = load i32, i32* @r7, align 4
  %v1_d7c4 = trunc i32 %v0_d7c4 to i8
  %v2_d7c4 = load i32, i32* %r3.global-to-local, align 4
  %v3_d7c4 = add i32 %v2_d7c4, 5
  %v4_d7c4 = inttoptr i32 %v3_d7c4 to i8*
  store i8 %v1_d7c4, i8* %v4_d7c4, align 1
  %v0_d7c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_d7c8 = trunc i32 %v0_d7c8 to i8
  %v2_d7c8 = load i32, i32* %r3.global-to-local, align 4
  %v3_d7c8 = add i32 %v2_d7c8, 1
  %v4_d7c8 = inttoptr i32 %v3_d7c8 to i8*
  store i8 %v1_d7c8, i8* %v4_d7c8, align 1
  %v0_d7cc = load i32, i32* @r6, align 4
  %v1_d7cc = trunc i32 %v0_d7cc to i8
  %v2_d7cc = load i32, i32* %r3.global-to-local, align 4
  %v3_d7cc = add i32 %v2_d7cc, 2
  %v4_d7cc = inttoptr i32 %v3_d7cc to i8*
  store i8 %v1_d7cc, i8* %v4_d7cc, align 1
  %v0_d7d0 = load i32, i32* %sl.global-to-local, align 4
  %v1_d7d0 = trunc i32 %v0_d7d0 to i8
  %v2_d7d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_d7d0 = add i32 %v2_d7d0, 3
  %v4_d7d0 = inttoptr i32 %v3_d7d0 to i8*
  store i8 %v1_d7d0, i8* %v4_d7d0, align 1
  %v0_d7d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_d7d4 = trunc i32 %v0_d7d4 to i8
  %v2_d7d4 = load i32, i32* %r3.global-to-local, align 4
  %v3_d7d4 = add i32 %v2_d7d4, 4
  %v4_d7d4 = inttoptr i32 %v3_d7d4 to i8*
  store i8 %v1_d7d4, i8* %v4_d7d4, align 1
  %v0_d7d8 = load i32, i32* @r4, align 4
  store i32 %v0_d7d8, i32* %stack_var_-40, align 4
  %v5_d7dc = icmp slt i32 %v0_d7a8, %v1_d7a8
  br i1 %v5_d7dc, label %dec_label_pc_d708, label %dec_label_pc_d488.preheader

; uselistorder directives
  uselistorder i32 %v3_d6e8, { 1, 0 }
  uselistorder i32 %v3_d6e4, { 1, 0 }
  uselistorder i32 %v7_d6e0, { 1, 0 }
  uselistorder i32 %v3_d6e0, { 1, 0 }
  uselistorder i32 %v1_d6d4, { 1, 0 }
  uselistorder i32 %v4_d684, { 1, 0 }
  uselistorder i32 %v0_d67c, { 0, 2, 1 }
  uselistorder i32 %v0_d660, { 0, 2, 1 }
  uselistorder i32 %v2_d618, { 1, 0 }
  uselistorder i32 %v8_d5fc, { 1, 2, 0, 3 }
  uselistorder i32 %v3_d5e8, { 1, 0 }
  uselistorder i32 %v3_d5c4, { 2, 3, 1, 0 }
  uselistorder i32 %v1_d590, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_d534, { 0, 2, 1 }
  uselistorder i32 %v0_d51c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d508, { 1, 0 }
  uselistorder i32 %v2_d504, { 0, 2, 1 }
  uselistorder i1 %v7_d4b4, { 1, 0 }
  uselistorder i1 %v9_d638, { 2, 3, 1, 0 }
  uselistorder i32 %v1_d424, { 1, 0 }
  uselistorder i8 %v5_d384, { 0, 2, 1 }
  uselistorder i8 %v5_d380, { 0, 2, 1 }
  uselistorder i32 %v1_d37c, { 1, 2, 0 }
  uselistorder i32 %v3_d368, { 1, 0 }
  uselistorder i32 %v1_d354, { 1, 0 }
  uselistorder i32 %v1_d338, { 1, 2, 0 }
  uselistorder i32 %v1_d334, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v1_d330, { 2, 3, 1, 0 }
  uselistorder i1 %v2_d314, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d308, { 1, 2, 0, 3 }
  uselistorder i32 %v0_d2fc, { 1, 0, 2 }
  uselistorder i32 %v0_d2ec, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_d2e0, { 3, 1, 2, 0 }
  uselistorder i1 %v7_d2cc, { 1, 0 }
  uselistorder i1 %v7_d2a0, { 1, 0 }
  uselistorder i32 %v3_d29c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_d288, { 2, 1, 0 }
  uselistorder i32 %v1_d264, { 3, 1, 2, 0 }
  uselistorder i32 %v6_d208, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_d1f0, { 1, 0 }
  uselistorder i8 %v5_d1e0, { 0, 2, 1 }
  uselistorder i32 %v6_d1c4, { 1, 0 }
  uselistorder i32 %v7_d1ac, { 0, 2, 1, 4, 3, 5 }
  uselistorder i8 %v5_d1a8, { 1, 0, 2 }
  uselistorder i32 %v6_d188, { 1, 0 }
  uselistorder i32 %v2_d170, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_d144, { 6, 2, 3, 4, 1, 5, 9, 0, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 15, 13, 14 }
  uselistorder i32* %sl.global-to-local, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 6, 7, 0, 2, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 48, 49, 50, 51, 52, 53, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0 }
  uselistorder i32* %r2.global-to-local, { 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 44, 39, 40, 41, 42, 43, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 0 }
  uselistorder i32* %r1.global-to-local, { 29, 30, 31, 32, 33, 34, 35, 36, 41, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 26, 25, 28, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 27, 28, 29, 30, 31, 32, 34, 33, 36, 35, 38, 37, 51, 39, 41, 42, 40, 44, 43, 46, 45, 47, 26, 48, 25, 49, 50, 1, 2, 3, 4, 5, 10, 6, 7, 8, 9, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %ip.global-to-local, { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 17, 18, 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_d6c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d698, { 1, 0 }
  uselistorder label %dec_label_pc_d4f4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d488, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
}

define i32 @function_d7e8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d7e8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_d7e8 = load i32, i32* @r4, align 4
  %v12_d7e8 = load i32, i32* @r7, align 4
  %v15_d7e8 = load i32, i32* @r8, align 4
  %v1_d7ec = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  %v1_d808 = urem i32 %arg4, 256
  store i32 %v1_d808, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_d818 = call i32 @function_141c8(i32 %v1_d7ec, i32 4)
  %v0_d81c = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d824 = load i32, i32* @r7, align 4
  store i32 %v0_d824, i32* %r3.global-to-local, align 4
  store i32 %v2_d818, i32* %fp.global-to-local, align 4
  %v0_d82c = load i32, i32* @r4, align 4
  %v4_d830 = inttoptr i32 %v0_d81c to i32*
  %v5_d830 = call i32 @function_a054(i32 %v0_d82c, i32* %v4_d830, i32 2, i32 %v0_d824)
  %v1_d83c = urem i32 %v5_d830, 256
  store i32 %v1_d83c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d848 = load i32, i32* @r4, align 4
  %v0_d84c = load i32, i32* @r5, align 4
  %v5_d850 = trunc i32 %v5_d830 to i8
  %v6_d854 = inttoptr i32 %v0_d84c to i32*
  %v7_d854 = call i32 @function_a054(i32 %v0_d848, i32* %v6_d854, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_d858 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_d864 = load i32, i32* @r4, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_d86c = inttoptr i32 %v0_d858 to i32*
  %v6_d86c = call i32 @function_a054(i32 %v0_d864, i32* %v5_d86c, i32 4, i32 64)
  %v1_d874 = urem i32 %v6_d86c, 256
  store i32 %v1_d874, i32* %ip.global-to-local, align 4
  %v0_d878 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_d880 = load i32, i32* @r7, align 4
  store i32 %v0_d880, i32* %r3.global-to-local, align 4
  %v0_d884 = load i32, i32* @r4, align 4
  %v6_d88c = inttoptr i32 %v0_d878 to i32*
  %v7_d88c = call i32 @function_a054(i32 %v0_d884, i32* %v6_d88c, i32 5, i32 %v0_d880)
  %v1_d898 = urem i32 %v7_d88c, 256
  store i32 %v1_d898, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d8a4 = load i32, i32* @r4, align 4
  %v0_d8a8 = load i32, i32* @r5, align 4
  %v5_d8b0 = inttoptr i32 %v0_d8a8 to i32*
  %v6_d8b0 = call i32 @function_a054(i32 %v0_d8a4, i32* %v5_d8b0, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d8c0 = load i32, i32* @r5, align 4
  store i32 %v6_d8b0, i32* @r8, align 4
  %v0_d8c8 = load i32, i32* @r4, align 4
  %v4_d8cc = inttoptr i32 %v0_d8c0 to i32*
  %v5_d8cc = call i32 @function_a054(i32 %v0_d8c8, i32* %v4_d8cc, i32 7, i32 27015)
  store i32 %v5_d8cc, i32* @r4, align 4
  %v0_d8d4 = load i32, i32* @r7, align 4
  store i32 %v0_d8d4, i32* %stack_var_-44, align 4
  %v1_d8dc = inttoptr i32 %v0_d8d4 to i32*
  %v2_d8dc = call i32 @function_138c0(i32* %v1_d8dc)
  %v1_d8e0 = load i32, i32* @r6, align 4
  %v2_d8e0 = add i32 %v1_d8e0, %v2_d8dc
  %v1_d8ec = call i32 @function_121f4(i32 32)
  %v3_d8f8 = call i32 @function_12110(i32 32, i32* nonnull %stack_var_-44)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d90c = call i32 @function_13edc(i32 2, i32 3, i32 17)
  %v7_d910 = icmp eq i32 %v3_d90c, -1
  store i1 %v7_d910, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d90c, i32* %sb.global-to-local, align 4
  br i1 %v7_d910, label %dec_label_pc_dcd0, label %dec_label_pc_d91c

dec_label_pc_d91c:                                ; preds = %dec_label_pc_d7e8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d924 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d924, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_d92c = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d938 = call i32 @function_13eac(i32 %v3_d90c, i32 %v0_d92c, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_d93c = icmp eq i32 %v6_d938, -1
  store i1 %v7_d93c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d93c, label %dec_label_pc_dcd8, label %dec_label_pc_d944

dec_label_pc_d944:                                ; preds = %dec_label_pc_d91c
  store i32 %v1_d7ec, i32* %r2.global-to-local, align 4
  %v0_d950 = load i32, i32* @r4, align 4
  %v3_d950 = mul i32 %v0_d950, 65536
  store i32 %v3_d950, i32* @lr, align 4
  %v0_d954 = load i32, i32* @r8, align 4
  %v3_d954 = mul i32 %v0_d954, 65536
  store i32 %v3_d954, i32* %ip.global-to-local, align 4
  %v3_d958 = urem i32 %v7_d854, 65536
  store i32 %v3_d958, i32* %r3.global-to-local, align 4
  %v3_d95c = urem i32 %v0_d954, 65536
  store i32 %v3_d95c, i32* %r4.global-to-local, align 4
  %v3_d960 = urem i32 %v0_d950, 65536
  %v2_d964 = icmp eq i32 %v1_d7ec, 0
  store i1 %v2_d964, i1* %cpsr_z.global-to-local, align 1
  %v0_d968 = load i32, i32* @r7, align 4
  store i32 %v0_d968, i32* %stack_var_-40, align 4
  br i1 %v2_d964, label %dec_label_pc_dcbc.critedge, label %dec_label_pc_d97c

dec_label_pc_d97c:                                ; preds = %dec_label_pc_d944
  %v1_d980 = urem i32 %v7_d854, 256
  %v1_d984 = urem i32 %v0_d950, 256
  %tmp41 = udiv i32 %v7_d854, 256
  %v3_d98c = urem i32 %tmp41, 256
  %v3_d990 = mul nuw nsw i32 %v1_d984, 256
  store i32 %v3_d990, i32* %r3.global-to-local, align 4
  %v1_d994 = urem i32 %v0_d954, 256
  %v4_d998 = mul nuw nsw i32 %v1_d980, 256
  %v5_d998 = or i32 %v4_d998, %v3_d98c
  store i32 %v5_d998, i32* %r8.global-to-local, align 4
  %tmp42 = udiv i32 %v0_d954, 256
  %v3_d99c = urem i32 %tmp42, 256
  store i32 %v3_d99c, i32* %ip.global-to-local, align 4
  %tmp43 = udiv i32 %v0_d950, 256
  %v4_d9a0 = urem i32 %tmp43, 256
  %v5_d9a0 = or i32 %v4_d9a0, %v3_d990
  store i32 %v5_d9a0, i32* @r5, align 4
  %v4_d9a4 = mul nuw nsw i32 %v1_d994, 256
  %v5_d9a4 = or i32 %v4_d9a4, %v3_d99c
  store i32 %v5_d9a4, i32* @r6, align 4
  store i32 %v1_d984, i32* %r2.global-to-local, align 4
  store i32 %v0_d968, i32* @r4, align 4
  store i32 %v1_d994, i32* @r7, align 4
  %sext = mul i32 %v6_d86c, 16777216
  %v4_da20 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v7_d854, 16777216
  %v4_da3c = sdiv i32 %sext5, 16777216
  %sext6 = mul i32 %v0_d950, 16777216
  %v4_da98 = sdiv i32 %sext6, 16777216
  %v2_da24 = icmp eq i32 %v1_d898, 0
  %v1_da28 = trunc i32 %v4_da20 to i8
  br label %dec_label_pc_d9c0

dec_label_pc_d9c0:                                ; preds = %bb47, %dec_label_pc_d97c
  %v2_d9c8 = call i32 @function_141c8(i32 128, i32 1)
  %v3_d9cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9cc, i32* %r3.global-to-local, align 4
  %v1_d9d0 = load i32, i32* %fp.global-to-local, align 4
  %v2_d9d0 = load i32, i32* @r4, align 4
  %v5_d9d0 = mul i32 %v2_d9d0, 4
  %v6_d9d0 = add i32 %v5_d9d0, %v1_d9d0
  %v7_d9d0 = inttoptr i32 %v6_d9d0 to i32*
  store i32 %v2_d9c8, i32* %v7_d9d0, align 4
  %v0_d9d4 = load i32, i32* %fp.global-to-local, align 4
  %v1_d9d4 = load i32, i32* %r3.global-to-local, align 4
  %v4_d9d4 = mul i32 %v1_d9d4, 4
  %v5_d9d4 = add i32 %v4_d9d4, %v0_d9d4
  %v6_d9d4 = inttoptr i32 %v5_d9d4 to i32*
  %v7_d9d4 = load i32, i32* %v6_d9d4, align 4
  store i32 %v7_d9d4, i32* @lr, align 4
  %v1_d9d8 = inttoptr i32 %v7_d9d4 to i8*
  %v2_d9d8 = load i8, i8* %v1_d9d8, align 1
  %tmp = urem i8 %v2_d9d8, 16
  %v1_d9dc = zext i8 %tmp to i32
  %v1_d9e0 = or i32 %v1_d9dc, 64
  store i32 %v1_d9e0, i32* %r3.global-to-local, align 4
  %v1_d9e8 = trunc i32 %v1_d9e0 to i8
  store i8 %v1_d9e8, i8* %v1_d9d8, align 1
  %v0_d9ec = load i32, i32* @lr, align 4
  %v1_d9ec = inttoptr i32 %v0_d9ec to i8*
  %v2_d9ec = load i8, i8* %v1_d9ec, align 1
  %v1_d9f0 = and i8 %v2_d9ec, -16
  %v1_d9f4 = or i8 %v1_d9f0, 5
  store i8 %v1_d9f4, i8* %v1_d9ec, align 1
  %v2_da00 = load i32, i32* @lr, align 4
  %v3_da00 = add i32 %v2_da00, 1
  %v4_da00 = inttoptr i32 %v3_da00 to i8*
  store i8 %v5_d850, i8* %v4_da00, align 1
  %v3_da04 = load i32, i32* %stack_var_-44, align 4
  %v1_da08 = add i32 %v3_da04, 32
  %tmp44 = mul i32 %v1_da08, 256
  store i32 %v1_d898, i32* %r4.global-to-local, align 4
  %v1_da18 = and i32 %tmp44, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp45 = udiv i32 %v1_da08, 256
  %v4_da1c = urem i32 %tmp45, 256
  %v5_da1c = or i32 %v4_da1c, %v1_da18
  store i32 %v5_da1c, i32* %r2.global-to-local, align 4
  store i32 %v4_da20, i32* %r3.global-to-local, align 4
  store i1 %v2_da24, i1* %cpsr_z.global-to-local, align 1
  %v2_da28 = load i32, i32* @lr, align 4
  %v3_da28 = add i32 %v2_da28, 8
  %v4_da28 = inttoptr i32 %v3_da28 to i8*
  store i8 %v1_da28, i8* %v4_da28, align 1
  %v0_da2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da2c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d9c0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_da30 = load i32, i32* @lr, align 4
  %v4_da30 = add i32 %v3_da30, 6
  %v5_da30 = inttoptr i32 %v4_da30 to i8*
  store i8 64, i8* %v5_da30, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d9c0, %bb
  %v0_da38 = load i32, i32* %r2.global-to-local, align 4
  %v3_da38 = sdiv i32 %v0_da38, 256
  store i32 %v3_da38, i32* %ip.global-to-local, align 4
  store i32 %v4_da3c, i32* %r4.global-to-local, align 4
  %v2_da40 = load i32, i32* @lr, align 4
  %v3_da40 = add i32 %v2_da40, 9
  %v4_da40 = inttoptr i32 %v3_da40 to i8*
  store i8 17, i8* %v4_da40, align 1
  store i32 ptrtoint (i32* @global_var_1f238.84 to i32), i32* %r3.global-to-local, align 4
  %v0_da48 = load i32, i32* %r2.global-to-local, align 4
  %v1_da48 = trunc i32 %v0_da48 to i8
  %v2_da48 = load i32, i32* @lr, align 4
  %v3_da48 = add i32 %v2_da48, 2
  %v4_da48 = inttoptr i32 %v3_da48 to i8*
  store i8 %v1_da48, i8* %v4_da48, align 1
  %v0_da4c = load i32, i32* %ip.global-to-local, align 4
  %v1_da4c = trunc i32 %v0_da4c to i8
  %v2_da4c = load i32, i32* @lr, align 4
  %v3_da4c = add i32 %v2_da4c, 3
  %v4_da4c = inttoptr i32 %v3_da4c to i8*
  store i8 %v1_da4c, i8* %v4_da4c, align 1
  %v0_da50 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da50, label %.thread7, label %bb46

.thread7:                                         ; preds = %.thread
  %v3_da548 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da548, i32* %ip.global-to-local, align 4
  br label %bb47

bb46:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_da54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da54, i32* %ip.global-to-local, align 4
  %v3_da58 = load i32, i32* @lr, align 4
  %v4_da58 = add i32 %v3_da58, 7
  %v5_da58 = inttoptr i32 %v4_da58 to i8*
  store i8 0, i8* %v5_da58, align 1
  %v0_da60.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %.thread7, %bb46
  %v0_da60 = phi i32 [ %v3_da548, %.thread7 ], [ %v0_da60.pre, %bb46 ]
  %v2_da5c = load i32, i32* @global_var_1f238.84, align 4
  store i32 %v2_da5c, i32* %r2.global-to-local, align 4
  %v3_da60 = mul i32 %v0_da60, 32
  store i32 %v3_da60, i32* %r3.global-to-local, align 4
  %v1_da64 = load i32, i32* @lr, align 4
  %v2_da64 = add i32 %v1_da64, 12
  %v3_da64 = inttoptr i32 %v2_da64 to i32*
  store i32 %v2_da5c, i32* %v3_da64, align 4
  %v0_da68 = load i32, i32* %r3.global-to-local, align 4
  %v1_da68 = load i32, i32* %ip.global-to-local, align 4
  %tmp52 = mul i32 %v1_da68, -8
  %v5_da68 = add i32 %v0_da68, %tmp52
  %v1_da6c = load i32, i32* @sl, align 4
  %v2_da6c = add i32 %v5_da68, %v1_da6c
  store i32 %v2_da6c, i32* %r3.global-to-local, align 4
  %v1_da70 = add i32 %v2_da6c, 16
  %v2_da70 = inttoptr i32 %v1_da70 to i32*
  %v3_da70 = load i32, i32* %v2_da70, align 4
  %v1_da74 = load i32, i32* @lr, align 4
  %v2_da74 = add i32 %v1_da74, 16
  %v3_da74 = inttoptr i32 %v2_da74 to i32*
  store i32 %v3_da70, i32* %v3_da74, align 4
  %v3_da78 = load i32, i32* %stack_var_-44, align 4
  %v1_da7c = add i32 %v3_da78, 12
  %tmp48 = mul i32 %v1_da7c, 256
  %v1_da8c = and i32 %tmp48, and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960)
  %tmp49 = udiv i32 %v1_da7c, 256
  %v4_da90 = urem i32 %tmp49, 256
  %v5_da90 = or i32 %v4_da90, %v1_da8c
  store i32 %v5_da90, i32* %ip.global-to-local, align 4
  %v1_da94 = load i32, i32* @lr, align 4
  %v2_da94 = add i32 %v1_da94, 28
  %v3_da94 = inttoptr i32 %v2_da94 to i32*
  store i32 -1, i32* %v3_da94, align 4
  store i32 %v4_da98, i32* %r2.global-to-local, align 4
  %v0_da9c = load i32, i32* %r4.global-to-local, align 4
  %v1_da9c = trunc i32 %v0_da9c to i8
  %v2_da9c = load i32, i32* @lr, align 4
  %v3_da9c = add i32 %v2_da9c, 5
  %v4_da9c = inttoptr i32 %v3_da9c to i8*
  store i8 %v1_da9c, i8* %v4_da9c, align 1
  %v0_daa0 = load i32, i32* %ip.global-to-local, align 4
  %v3_daa0 = sdiv i32 %v0_daa0, 256
  store i32 %v3_daa0, i32* %r3.global-to-local, align 4
  %v0_daa4 = load i32, i32* @lr, align 4
  %v1_daa4 = add i32 %v0_daa4, 20
  store i32 %v1_daa4, i32* %r4.global-to-local, align 4
  %v0_daa8 = load i32, i32* %r8.global-to-local, align 4
  %v1_daa8 = trunc i32 %v0_daa8 to i8
  %v3_daa8 = add i32 %v0_daa4, 4
  %v4_daa8 = inttoptr i32 %v3_daa8 to i8*
  store i8 %v1_daa8, i8* %v4_daa8, align 1
  %v0_daac = load i32, i32* @r6, align 4
  %v1_daac = trunc i32 %v0_daac to i8
  %v2_daac = load i32, i32* @lr, align 4
  %v3_daac = add i32 %v2_daac, 20
  %v4_daac = inttoptr i32 %v3_daac to i8*
  store i8 %v1_daac, i8* %v4_daac, align 1
  %v0_dab0 = load i32, i32* %r3.global-to-local, align 4
  %v1_dab0 = trunc i32 %v0_dab0 to i8
  %v2_dab0 = load i32, i32* %r4.global-to-local, align 4
  %v3_dab0 = add i32 %v2_dab0, 5
  %v4_dab0 = inttoptr i32 %v3_dab0 to i8*
  store i8 %v1_dab0, i8* %v4_dab0, align 1
  %v0_dab4 = load i32, i32* @r5, align 4
  %v1_dab4 = trunc i32 %v0_dab4 to i8
  %v2_dab4 = load i32, i32* %r4.global-to-local, align 4
  %v3_dab4 = add i32 %v2_dab4, 2
  %v4_dab4 = inttoptr i32 %v3_dab4 to i8*
  store i8 %v1_dab4, i8* %v4_dab4, align 1
  %v0_dab8 = load i32, i32* @r7, align 4
  %v1_dab8 = trunc i32 %v0_dab8 to i8
  %v2_dab8 = load i32, i32* %r4.global-to-local, align 4
  %v3_dab8 = add i32 %v2_dab8, 1
  %v4_dab8 = inttoptr i32 %v3_dab8 to i8*
  store i8 %v1_dab8, i8* %v4_dab8, align 1
  %v0_dabc = load i32, i32* @lr, align 4
  %v1_dabc = add i32 %v0_dabc, 32
  %v0_dac0 = load i32, i32* %r2.global-to-local, align 4
  %v1_dac0 = trunc i32 %v0_dac0 to i8
  %v2_dac0 = load i32, i32* %r4.global-to-local, align 4
  %v3_dac0 = add i32 %v2_dac0, 3
  %v4_dac0 = inttoptr i32 %v3_dac0 to i8*
  store i8 %v1_dac0, i8* %v4_dac0, align 1
  %v0_dac4 = load i32, i32* %ip.global-to-local, align 4
  %v1_dac4 = trunc i32 %v0_dac4 to i8
  %v2_dac4 = load i32, i32* %r4.global-to-local, align 4
  %v3_dac4 = add i32 %v2_dac4, 4
  %v4_dac4 = inttoptr i32 %v3_dac4 to i8*
  store i8 %v1_dac4, i8* %v4_dac4, align 1
  %v3_dac8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_dac8, i32* %r2.global-to-local, align 4
  %v3_dacc = call i32 @function_12cd8(i32 %v1_dabc, i32 %v3_d8f8, i32 %v3_dac8)
  %v3_dad0 = load i32, i32* %stack_var_-40, align 4
  %v1_dad4 = add i32 %v3_dad0, 1
  store i32 %v1_dad4, i32* @r4, align 4
  store i32 %v1_d7ec, i32* %r3.global-to-local, align 4
  %v9_dadc = icmp eq i32 %v1_dad4, %v1_d7ec
  store i1 %v9_dadc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dad4, i32* %stack_var_-40, align 4
  %v5_dae4 = icmp slt i32 %v1_dad4, %v1_d7ec
  br i1 %v5_dae4, label %dec_label_pc_d9c0, label %dec_label_pc_dae8

dec_label_pc_dae8:                                ; preds = %bb47, %dec_label_pc_dcbc
  store i32 %v1_d7ec, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_d964, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_d964, label %dec_label_pc_dcbc, label %dec_label_pc_dafc

dec_label_pc_dafc:                                ; preds = %dec_label_pc_dae8
  store i32 0, i32* %r8.global-to-local, align 4
  %v9_db0c = icmp eq i32 %v3_d958, add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1)
  br label %dec_label_pc_dbe0

dec_label_pc_db08:                                ; preds = %dec_label_pc_dbe0
  store i1 %v9_db0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_db0c, label %dec_label_pc_dc70, label %dec_label_pc_db14

dec_label_pc_db14:                                ; preds = %dec_label_pc_dc08.dec_label_pc_db14_crit_edge, %dec_label_pc_db08
  %v1_db18 = phi i32 [ %v1_db18.pre, %dec_label_pc_dc08.dec_label_pc_db14_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), %dec_label_pc_db08 ]
  store i32 %v3_d95c, i32* %r2.global-to-local, align 4
  %v9_db18 = icmp eq i32 %v3_d95c, %v1_db18
  store i1 %v9_db18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_db18, label %dec_label_pc_dc8c, label %dec_label_pc_db20

dec_label_pc_db20:                                ; preds = %dec_label_pc_dc70.dec_label_pc_db20_crit_edge, %dec_label_pc_db14
  %v1_db24 = phi i32 [ %v1_db24.pre, %dec_label_pc_dc70.dec_label_pc_db20_crit_edge ], [ %v1_db18, %dec_label_pc_db14 ]
  store i32 %v3_d960, i32* %r3.global-to-local, align 4
  %v9_db24 = icmp eq i32 %v3_d960, %v1_db24
  store i1 %v9_db24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_db24, label %dec_label_pc_dca8, label %dec_label_pc_db2c

dec_label_pc_db2c:                                ; preds = %dec_label_pc_dc8c, %dec_label_pc_db20, %dec_label_pc_dca8
  %v0_db30 = load i32, i32* %r8.global-to-local, align 4
  %v1_db30 = trunc i32 %v0_db30 to i8
  %v2_db30 = load i32, i32* @r5, align 4
  %v3_db30 = add i32 %v2_db30, 10
  %v4_db30 = inttoptr i32 %v3_db30 to i8*
  store i8 %v1_db30, i8* %v4_db30, align 1
  %v0_db34 = load i32, i32* %r8.global-to-local, align 4
  %v1_db34 = trunc i32 %v0_db34 to i8
  %v2_db34 = load i32, i32* @r5, align 4
  %v3_db34 = add i32 %v2_db34, 11
  %v4_db34 = inttoptr i32 %v3_db34 to i8*
  store i8 %v1_db34, i8* %v4_db34, align 1
  %v0_db38 = load i32, i32* @r5, align 4
  store i32 %v0_db38, i32* @r0, align 4
  %v2_db3c = call i32 @function_e4b8(i32 %v0_db38, i32 20)
  %v3_db3c = trunc i32 %v2_db3c to i8
  %v4_db40 = sdiv i32 %v2_db3c, 256
  store i32 %v4_db40, i32* %r3.global-to-local, align 4
  %v1_db44 = trunc i32 %v4_db40 to i8
  %v2_db44 = load i32, i32* @r5, align 4
  %v3_db44 = add i32 %v2_db44, 11
  %v4_db44 = inttoptr i32 %v3_db44 to i8*
  store i8 %v1_db44, i8* %v4_db44, align 1
  %v3_db48 = load i32, i32* @r5, align 4
  %v4_db48 = add i32 %v3_db48, 10
  %v5_db48 = inttoptr i32 %v4_db48 to i8*
  store i8 %v3_db3c, i8* %v5_db48, align 1
  %v0_db4c = load i32, i32* %r8.global-to-local, align 4
  %v1_db4c = trunc i32 %v0_db4c to i8
  %v2_db4c = load i32, i32* @r6, align 4
  %v3_db4c = add i32 %v2_db4c, 6
  %v4_db4c = inttoptr i32 %v3_db4c to i8*
  store i8 %v1_db4c, i8* %v4_db4c, align 1
  %v0_db50 = load i32, i32* %r8.global-to-local, align 4
  %v1_db50 = trunc i32 %v0_db50 to i8
  %v2_db50 = load i32, i32* @r6, align 4
  %v3_db50 = add i32 %v2_db50, 7
  %v4_db50 = inttoptr i32 %v3_db50 to i8*
  store i8 %v1_db50, i8* %v4_db50, align 1
  %v0_db54 = load i32, i32* @r5, align 4
  %v1_db54 = add i32 %v0_db54, 24
  %v2_db54 = inttoptr i32 %v1_db54 to i8*
  %v3_db54 = load i8, i8* %v2_db54, align 1
  %v4_db54 = zext i8 %v3_db54 to i32
  store i32 %v4_db54, i32* %r3.global-to-local, align 4
  %v1_db58 = add i32 %v0_db54, 25
  %v2_db58 = inttoptr i32 %v1_db58 to i8*
  %v3_db58 = load i8, i8* %v2_db58, align 1
  %v4_db58 = zext i8 %v3_db58 to i32
  %v4_db5c = mul nuw nsw i32 %v4_db58, 256
  %v5_db5c = or i32 %v4_db5c, %v4_db54
  store i32 %v5_db5c, i32* %r2.global-to-local, align 4
  %v3_db60 = load i32, i32* %stack_var_-44, align 4
  %v0_db64 = load i32, i32* @r6, align 4
  store i32 %v0_db64, i32* @r1, align 4
  %v1_db68 = add i32 %v3_db60, 12
  store i32 %v1_db68, i32* %r3.global-to-local, align 4
  %v4_db70 = call i32 @function_e514(i32 %v0_db54, i32 %v0_db64, i32 %v5_db5c, i32 %v1_db68)
  %v5_db70 = trunc i32 %v4_db70 to i8
  %v4_db7414 = udiv i32 %v4_db70, 256
  %v1_db78 = trunc i32 %v4_db7414 to i8
  %v2_db78 = load i32, i32* @r6, align 4
  %v3_db78 = add i32 %v2_db78, 7
  %v4_db78 = inttoptr i32 %v3_db78 to i8*
  store i8 %v1_db78, i8* %v4_db78, align 1
  %v3_db7c = load i32, i32* @r6, align 4
  %v4_db7c = add i32 %v3_db7c, 6
  %v5_db7c = inttoptr i32 %v4_db7c to i8*
  store i8 %v5_db70, i8* %v5_db7c, align 1
  %v3_db80 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db80, i32* %r3.global-to-local, align 4
  %v0_db84 = load i32, i32* @r5, align 4
  %v1_db84 = add i32 %v0_db84, 20
  %v2_db84 = inttoptr i32 %v1_db84 to i32*
  %v3_db84 = load i32, i32* %v2_db84, align 4
  %v5_db8c = mul i32 %v3_db80, 24
  %v1_db90 = load i32, i32* @sl, align 4
  %v2_db90 = add i32 %v1_db90, %v5_db8c
  store i32 %v2_db90, i32* %ip.global-to-local, align 4
  %v3_db94 = udiv i32 %v3_db84, 65536
  store i32 %v3_db94, i32* %r2.global-to-local, align 4
  %v1_db98 = trunc i32 %v3_db94 to i8
  %v3_db98 = add i32 %v2_db90, 2
  %v4_db98 = inttoptr i32 %v3_db98 to i8*
  store i8 %v1_db98, i8* %v4_db98, align 1
  %v0_db9c = load i32, i32* %r2.global-to-local, align 4
  %v3_db9c15 = udiv i32 %v0_db9c, 256
  %v3_dba0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_dba0, i32* %r2.global-to-local, align 4
  %v1_dba4 = trunc i32 %v3_db9c15 to i8
  %v2_dba4 = load i32, i32* %ip.global-to-local, align 4
  %v3_dba4 = add i32 %v2_dba4, 3
  %v4_dba4 = inttoptr i32 %v3_dba4 to i8*
  store i8 %v1_dba4, i8* %v4_dba4, align 1
  store i32 16, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_dbb0 = load i32, i32* @r5, align 4
  %v0_dbb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_dbb4 = add i32 %v0_dbb4, 32
  store i32 %v1_dbb4, i32* %r2.global-to-local, align 4
  %v0_dbb8 = load i32, i32* %sb.global-to-local, align 4
  %v0_dbc0 = load i32, i32* %ip.global-to-local, align 4
  %v6_dbc4 = inttoptr i32 %v0_dbb0 to i32*
  %v7_dbc4 = call i32 @function_13e78(i32 %v0_dbb8, i32* %v6_dbc4, i32 %v1_dbb4, i32 16384, i32 %v0_dbc0, i32 16)
  %v3_dbc8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dbc8, i32* %r3.global-to-local, align 4
  store i32 %v1_d7ec, i32* @r4, align 4
  %v1_dbd0 = add i32 %v3_dbc8, 1
  %v9_dbd4 = icmp eq i32 %v1_dbd0, %v1_d7ec
  store i1 %v9_dbd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dbd0, i32* %stack_var_-40, align 4
  %v6_dbdc = icmp slt i32 %v1_dbd0, %v1_d7ec
  br i1 %v6_dbdc, label %dec_label_pc_dbe0, label %dec_label_pc_dcbc

dec_label_pc_dbe0:                                ; preds = %dec_label_pc_db2c, %dec_label_pc_dafc
  %v1_dbf0 = phi i32 [ %v1_dbd0, %dec_label_pc_db2c ], [ 0, %dec_label_pc_dafc ]
  %v5_dbe4 = mul i32 %v1_dbf0, 24
  %v1_dbe8 = load i32, i32* @sl, align 4
  %v2_dbe8 = add i32 %v1_dbe8, %v5_dbe4
  store i32 %v2_dbe8, i32* %r3.global-to-local, align 4
  %v1_dbec = add i32 %v2_dbe8, 20
  %v2_dbec = inttoptr i32 %v1_dbec to i8*
  %v3_dbec = load i8, i8* %v2_dbec, align 1
  %v4_dbec = zext i8 %v3_dbec to i32
  store i32 %v4_dbec, i32* %r2.global-to-local, align 4
  %v0_dbf0 = load i32, i32* %fp.global-to-local, align 4
  %v4_dbf0 = mul i32 %v1_dbf0, 4
  %v5_dbf0 = add i32 %v0_dbf0, %v4_dbf0
  %v6_dbf0 = inttoptr i32 %v5_dbf0 to i32*
  %v7_dbf0 = load i32, i32* %v6_dbf0, align 4
  store i32 %v7_dbf0, i32* @r5, align 4
  %v2_dbf8 = icmp ugt i8 %v3_dbec, 30
  %v7_dbf8 = icmp eq i8 %v3_dbec, 31
  store i1 %v7_dbf8, i1* %cpsr_z.global-to-local, align 1
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r7.global-to-local, align 4
  %v1_dc00 = add i32 %v7_dbf0, 20
  store i32 %v1_dc00, i32* @r6, align 4
  %v2_dc04 = xor i1 %v7_dbf8, true
  %v3_dc04 = and i1 %v2_dbf8, %v2_dc04
  br i1 %v3_dc04, label %dec_label_pc_db08, label %dec_label_pc_dc08

dec_label_pc_dc08:                                ; preds = %dec_label_pc_dbe0
  %v1_dc08 = add i32 %v2_dbe8, 16
  %v2_dc08 = inttoptr i32 %v1_dc08 to i32*
  %v3_dc08 = load i32, i32* %v2_dc08, align 4
  store i32 %v3_dc08, i32* @r4, align 4
  %v0_dc0c = call i32 @function_f8e8()
  %v3_dc10 = load i32, i32* %stack_var_-40, align 4
  %v5_dc18 = mul i32 %v3_dc10, 24
  %v0_dc1c = load i32, i32* @r4, align 4
  %v1_dc20 = and i32 %v0_dc1c, ptrtoint (i32* @global_var_ff00.24 to i32)
  store i32 %v1_dc20, i32* %r3.global-to-local, align 4
  %v1_dc1c = udiv i32 %v0_dc1c, 256
  %v3_dc24 = and i32 %v1_dc1c, 65280
  store i32 %v3_dc24, i32* %r2.global-to-local, align 4
  %v1_dc28 = load i32, i32* @sl, align 4
  %v2_dc28 = add i32 %v1_dc28, %v5_dc18
  store i32 %v2_dc28, i32* %ip.global-to-local, align 4
  %v3_dc2c = mul i32 %v0_dc1c, 16777216
  %v4_dc30 = mul i32 %v1_dc20, 256
  %v5_dc30 = or i32 %v4_dc30, %v3_dc2c
  %v1_dc34 = add i32 %v2_dc28, 20
  %v2_dc34 = inttoptr i32 %v1_dc34 to i8*
  %v3_dc34 = load i8, i8* %v2_dc34, align 1
  %v4_dc34 = zext i8 %v3_dc34 to i32
  %v4_dc38 = udiv i32 %v0_dc1c, 16777216
  %v5_dc38 = or i32 %v3_dc24, %v4_dc38
  %v2_dc3c = or i32 %v5_dc38, %v5_dc30
  %v7_dc40 = lshr i32 %v0_dc0c, %v4_dc34
  %v8_dc40 = add i32 %v7_dc40, %v2_dc3c
  store i32 %v8_dc40, i32* %r2.global-to-local, align 4
  %v2_dc5c = call i32 @llvm.bswap.i32(i32 %v8_dc40)
  store i32 %v2_dc5c, i32* %r3.global-to-local, align 4
  %v1_dc64 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc64 = icmp eq i32 %v3_d958, %v1_dc64
  store i1 %v9_dc64, i1* %cpsr_z.global-to-local, align 1
  %v1_dc68 = load i32, i32* @r5, align 4
  %v2_dc68 = add i32 %v1_dc68, 16
  %v3_dc68 = inttoptr i32 %v2_dc68 to i32*
  store i32 %v2_dc5c, i32* %v3_dc68, align 4
  br i1 %v9_dc64, label %dec_label_pc_dc70, label %dec_label_pc_dc08.dec_label_pc_db14_crit_edge

dec_label_pc_dc08.dec_label_pc_db14_crit_edge:    ; preds = %dec_label_pc_dc08
  %v1_db18.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_db14

dec_label_pc_dc70:                                ; preds = %dec_label_pc_dc08, %dec_label_pc_db08
  %v0_dc70 = call i32 @function_f8e8()
  %v1_dc70 = trunc i32 %v0_dc70 to i8
  store i32 %v3_d95c, i32* %r2.global-to-local, align 4
  %v4_dc78 = sdiv i32 %v0_dc70, 256
  store i32 %v4_dc78, i32* %r3.global-to-local, align 4
  %v1_dc7c = load i32, i32* %r7.global-to-local, align 4
  %v9_dc7c = icmp eq i32 %v3_d95c, %v1_dc7c
  store i1 %v9_dc7c, i1* %cpsr_z.global-to-local, align 1
  %v1_dc80 = trunc i32 %v4_dc78 to i8
  %v2_dc80 = load i32, i32* @r5, align 4
  %v3_dc80 = add i32 %v2_dc80, 5
  %v4_dc80 = inttoptr i32 %v3_dc80 to i8*
  store i8 %v1_dc80, i8* %v4_dc80, align 1
  %v3_dc84 = load i32, i32* @r5, align 4
  %v4_dc84 = add i32 %v3_dc84, 4
  %v5_dc84 = inttoptr i32 %v4_dc84 to i8*
  store i8 %v1_dc70, i8* %v5_dc84, align 1
  %v0_dc88 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc88, label %dec_label_pc_dc8c, label %dec_label_pc_dc70.dec_label_pc_db20_crit_edge

dec_label_pc_dc70.dec_label_pc_db20_crit_edge:    ; preds = %dec_label_pc_dc70
  %v1_db24.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_db20

dec_label_pc_dc8c:                                ; preds = %dec_label_pc_dc70, %dec_label_pc_db14
  %v0_dc8c = call i32 @function_f8e8()
  %v1_dc8c = trunc i32 %v0_dc8c to i8
  %v4_dc90 = sdiv i32 %v0_dc8c, 256
  store i32 %v4_dc90, i32* %r3.global-to-local, align 4
  %v3_dc94 = load i32, i32* @r5, align 4
  %v4_dc94 = add i32 %v3_dc94, 20
  %v5_dc94 = inttoptr i32 %v4_dc94 to i8*
  store i8 %v1_dc8c, i8* %v5_dc94, align 1
  %v0_dc98 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc98 = trunc i32 %v0_dc98 to i8
  %v2_dc98 = load i32, i32* @r6, align 4
  %v3_dc98 = add i32 %v2_dc98, 1
  %v4_dc98 = inttoptr i32 %v3_dc98 to i8*
  store i8 %v1_dc98, i8* %v4_dc98, align 1
  store i32 %v3_d960, i32* %r3.global-to-local, align 4
  %v1_dca0 = load i32, i32* %r7.global-to-local, align 4
  %v9_dca0 = icmp eq i32 %v3_d960, %v1_dca0
  store i1 %v9_dca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dca0, label %dec_label_pc_dca8, label %dec_label_pc_db2c

dec_label_pc_dca8:                                ; preds = %dec_label_pc_dc8c, %dec_label_pc_db20
  %v0_dca8 = call i32 @function_f8e8()
  %v1_dca8 = trunc i32 %v0_dca8 to i8
  %v4_dcac = sdiv i32 %v0_dca8, 256
  store i32 %v4_dcac, i32* %r3.global-to-local, align 4
  %v1_dcb0 = trunc i32 %v4_dcac to i8
  %v2_dcb0 = load i32, i32* @r6, align 4
  %v3_dcb0 = add i32 %v2_dcb0, 3
  %v4_dcb0 = inttoptr i32 %v3_dcb0 to i8*
  store i8 %v1_dcb0, i8* %v4_dcb0, align 1
  %v3_dcb4 = load i32, i32* @r6, align 4
  %v4_dcb4 = add i32 %v3_dcb4, 2
  %v5_dcb4 = inttoptr i32 %v4_dcb4 to i8*
  store i8 %v1_dca8, i8* %v5_dcb4, align 1
  br label %dec_label_pc_db2c

dec_label_pc_dcbc.critedge:                       ; preds = %dec_label_pc_d944
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_dcbc

dec_label_pc_dcbc:                                ; preds = %dec_label_pc_db2c, %dec_label_pc_dcbc.critedge, %dec_label_pc_dae8
  %v2_dcc0 = call i32 @function_138c0(i32* null)
  %v9_dcc8 = icmp eq i32 %v2_d8e0, %v2_dcc0
  store i1 %v9_dcc8, i1* %cpsr_z.global-to-local, align 1
  %v6_dccc = icmp slt i32 %v2_d8e0, %v2_dcc0
  br i1 %v6_dccc, label %dec_label_pc_dcd0, label %dec_label_pc_dae8

dec_label_pc_dcd0:                                ; preds = %dec_label_pc_dcbc, %dec_label_pc_d7e8, %dec_label_pc_dcd8
  %v29_dcd4 = phi i32 [ %v3_d90c, %dec_label_pc_d7e8 ], [ %v1_dcdc, %dec_label_pc_dcd8 ], [ %v2_dcc0, %dec_label_pc_dcbc ]
  store i32 %v3_d7e8, i32* %r4.global-to-local, align 4
  store i32 %v12_d7e8, i32* %r7.global-to-local, align 4
  store i32 %v15_d7e8, i32* %r8.global-to-local, align 4
  ret i32 %v29_dcd4

dec_label_pc_dcd8:                                ; preds = %dec_label_pc_d91c
  %v0_dcd8 = load i32, i32* %sb.global-to-local, align 4
  %v1_dcdc = call i32 @function_135f0(i32 %v0_dcd8)
  br label %dec_label_pc_dcd0

; uselistorder directives
  uselistorder i32 %v4_dcac, { 1, 0 }
  uselistorder i32 %v4_dc78, { 1, 0 }
  uselistorder i32 %v2_dc5c, { 1, 0 }
  uselistorder i32 %v0_dc1c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_dbd0, { 1, 2, 0, 3 }
  uselistorder i32 %v3_db94, { 1, 0 }
  uselistorder i32 %v4_db40, { 1, 0 }
  uselistorder i32 %v1_dad4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_da7c, { 1, 0 }
  uselistorder i32 %v1_da08, { 1, 0 }
  uselistorder i32 %v1_d994, { 1, 0 }
  uselistorder i32 %v3_d990, { 1, 0 }
  uselistorder i32 %v1_d984, { 1, 0 }
  uselistorder i32 %v3_d958, { 1, 0, 2 }
  uselistorder i32 %v0_d954, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d950, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d93c, { 1, 0 }
  uselistorder i1 %v7_d910, { 1, 0 }
  uselistorder i32 %v3_d90c, { 1, 2, 3, 0 }
  uselistorder i32 %v2_d8e0, { 1, 0 }
  uselistorder i32 %v1_d898, { 1, 2, 0 }
  uselistorder i32 %v5_d830, { 1, 0 }
  uselistorder i32 %v1_d7ec, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %stack_var_-40, { 0, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 2, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 5, 4, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 11, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 5, 10, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.24 to i32), i32 16776960), { 6, 7, 0, 1, 2, 8, 3, 9, 10, 11, 4, 5 }
  uselistorder label %dec_label_pc_dcd0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dcbc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_db2c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dae8, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_dce8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_dce8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_dce8 = load i32, i32* @r4, align 4
  %v15_dce8 = load i32, i32* @r8, align 4
  %v21_dce8 = load i32, i32* @sl, align 4
  %v24_dce8 = load i32, i32* @fp, align 4
  %v1_dcf4 = urem i32 %arg2, 256
  store i32 0, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %v1_dcf4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_dd0c = urem i32 %arg4, 256
  store i32 %v1_dd0c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_dd1c = call i32 @function_141c8(i32 %v1_dcf4, i32 4)
  %v0_dd20 = load i32, i32* @r5, align 4
  store i32 %v0_dd20, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_dd2c = load i32, i32* @r4, align 4
  store i32 %v0_dd2c, i32* %r0.global-to-local, align 4
  %v0_dd30 = load i32, i32* @r6, align 4
  store i32 %v0_dd30, i32* %r3.global-to-local, align 4
  %v5_dd34 = inttoptr i32 %v0_dd20 to i32*
  %v6_dd34 = call i32 @function_a054(i32 %v0_dd2c, i32* %v5_dd34, i32 2, i32 %v0_dd30)
  %v1_dd40 = urem i32 %v6_dd34, 256
  store i32 %v1_dd40, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_dd4c = load i32, i32* @r4, align 4
  store i32 %v0_dd4c, i32* %r0.global-to-local, align 4
  %v0_dd50 = load i32, i32* @r5, align 4
  store i32 %v0_dd50, i32* %r1.global-to-local, align 4
  %v5_dd54 = trunc i32 %v6_dd34 to i8
  %v6_dd58 = inttoptr i32 %v0_dd50 to i32*
  %v7_dd58 = call i32 @function_a054(i32 %v0_dd4c, i32* %v6_dd58, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_dd5c = load i32, i32* @r5, align 4
  store i32 %v0_dd5c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_dd68 = load i32, i32* @r4, align 4
  store i32 %v0_dd68, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_dd70 = inttoptr i32 %v0_dd5c to i32*
  %v6_dd70 = call i32 @function_a054(i32 %v0_dd68, i32* %v5_dd70, i32 4, i32 64)
  %v1_dd78 = urem i32 %v6_dd70, 256
  store i32 %v1_dd78, i32* %ip.global-to-local, align 4
  %v0_dd7c = load i32, i32* @r5, align 4
  store i32 %v0_dd7c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_dd84 = load i32, i32* @r6, align 4
  store i32 %v0_dd84, i32* %r3.global-to-local, align 4
  %v0_dd88 = load i32, i32* @r4, align 4
  store i32 %v0_dd88, i32* %r0.global-to-local, align 4
  %v6_dd90 = inttoptr i32 %v0_dd7c to i32*
  %v7_dd90 = call i32 @function_a054(i32 %v0_dd88, i32* %v6_dd90, i32 5, i32 %v0_dd84)
  %v1_dd9c = urem i32 %v7_dd90, 256
  store i32 %v1_dd9c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_dda8 = load i32, i32* @r4, align 4
  store i32 %v0_dda8, i32* %r0.global-to-local, align 4
  %v0_ddac = load i32, i32* @r5, align 4
  store i32 %v0_ddac, i32* %r1.global-to-local, align 4
  %v5_ddb4 = inttoptr i32 %v0_ddac to i32*
  %v6_ddb4 = call i32 @function_a054(i32 %v0_dda8, i32* %v5_ddb4, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_ddb8 = load i32, i32* @r5, align 4
  store i32 %v0_ddb8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ddc4 = load i32, i32* @r4, align 4
  store i32 %v0_ddc4, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_ddcc = inttoptr i32 %v0_ddb8 to i32*
  %v6_ddcc = call i32 @function_a054(i32 %v0_ddc4, i32* %v5_ddcc, i32 7, i32 53)
  %v0_ddd8 = load i32, i32* @r5, align 4
  store i32 %v0_ddd8, i32* %r1.global-to-local, align 4
  %v0_dddc = load i32, i32* @r4, align 4
  store i32 %v0_dddc, i32* %r0.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_dde8 = inttoptr i32 %v0_ddd8 to i32*
  %v6_dde8 = call i32 @function_a054(i32 %v0_dddc, i32* %v5_dde8, i32 9, i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1))
  %v0_ddec = load i32, i32* @r5, align 4
  store i32 %v0_ddec, i32* %r1.global-to-local, align 4
  %v0_ddf4 = load i32, i32* @r6, align 4
  store i32 %v0_ddf4, i32* %r2.global-to-local, align 4
  %v0_ddf8 = load i32, i32* @r4, align 4
  store i32 %v0_ddf8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_de00 = inttoptr i32 %v0_ddec to i32*
  %v6_de00 = call i32 @function_a054(i32 %v0_ddf8, i32* %v5_de00, i32 %v0_ddf4, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_de08 = load i32, i32* @r6, align 4
  store i32 %v0_de08, i32* %r3.global-to-local, align 4
  %v0_de0c = load i32, i32* @r5, align 4
  store i32 %v0_de0c, i32* %r1.global-to-local, align 4
  %v0_de14 = load i32, i32* @r4, align 4
  store i32 %v0_de14, i32* %r0.global-to-local, align 4
  %v5_de18 = inttoptr i32 %v0_de0c to i32*
  %v6_de18 = call i32 @function_9f84(i32 %v0_de14, i32* %v5_de18, i32 8, i32 %v0_de08, i32 %v6_de00)
  store i32 %v6_de18, i32* @r7, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_de24 = call i32 @function_121f4(i32 33)
  %v0_de28 = load i32, i32* @r6, align 4
  store i32 %v0_de28, i32* %r1.global-to-local, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v2_de30 = inttoptr i32 %v0_de28 to i32*
  %v3_de30 = call i32 @function_12110(i32 33, i32* %v2_de30)
  store i32 %v3_de30, i32* %r0.global-to-local, align 4
  %v0_de34 = load i32, i32* @r6, align 4
  store i32 %v0_de34, i32* %r1.global-to-local, align 4
  %v2_de38 = inttoptr i32 %v3_de30 to i8*
  %v3_de38 = call i32 @function_1371c(i8* %v2_de38, i32 %v0_de34)
  store i32 %v3_de38, i32* @r4, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_de44 = call i32 @function_1213c(i32 33)
  store i32 %v1_de44, i32* %r0.global-to-local, align 4
  %v0_de48 = load i32, i32* @r4, align 4
  %v1_de48 = load i32, i32* @r6, align 4
  %v9_de48 = icmp eq i32 %v0_de48, %v1_de48
  store i1 %v9_de48, i1* %cpsr_z.global-to-local, align 1
  %v5_de4c = icmp slt i32 %v0_de48, %v1_de48
  br i1 %v5_de4c, label %dec_label_pc_df20, label %dec_label_pc_de50

dec_label_pc_de50:                                ; preds = %dec_label_pc_dce8
  %v2_de54 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_de54, i32* %sl.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_de54, i32* %r1.global-to-local, align 4
  store i32 %v0_de48, i32* %r0.global-to-local, align 4
  %v4_de64 = call i32 @function_137b8(i32 %v0_de48, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_de64, i32* @r5, align 4
  %v0_de6c = load i32, i32* @r4, align 4
  store i32 %v0_de6c, i32* %r0.global-to-local, align 4
  %v1_de70 = call i32 @function_135f0(i32 %v0_de6c)
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_de78 = call i32 @function_121f4(i32 34)
  %v0_de7c = load i32, i32* @r6, align 4
  store i32 %v0_de7c, i32* %r1.global-to-local, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v2_de84 = inttoptr i32 %v0_de7c to i32*
  %v3_de84 = call i32 @function_12110(i32 34, i32* %v2_de84)
  %v0_de88 = load i32, i32* @r5, align 4
  store i32 %v0_de88, i32* @r1, align 4
  store i32 %v3_de84, i32* %r2.global-to-local, align 4
  store i32 %v2_de54, i32* %r0.global-to-local, align 4
  %v3_de94 = bitcast i32* %stack_var_-2120 to i8*
  %v4_de94 = call i32 @function_12fb0(i8* %v3_de94, i32 %v0_de88, i32 %v3_de84)
  store i32 %v4_de94, i32* %r8.global-to-local, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_dea0 = call i32 @function_1213c(i32 34)
  store i32 %v1_dea0, i32* %r0.global-to-local, align 4
  %v7_dea4 = icmp eq i32 %v4_de94, -1
  store i1 %v7_dea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dea4, label %dec_label_pc_df20, label %dec_label_pc_deac

dec_label_pc_deac:                                ; preds = %dec_label_pc_de50
  %v0_deac = load i32, i32* @r5, align 4
  %v9_deac = icmp eq i32 %v0_deac, %v4_de94
  store i1 %v9_deac, i1* %cpsr_z.global-to-local, align 1
  %v7_deb0 = icmp sgt i32 %v0_deac, %v4_de94
  br i1 %v7_deb0, label %dec_label_pc_deb4, label %dec_label_pc_df20

dec_label_pc_deb4:                                ; preds = %dec_label_pc_deac
  %v2_deac = sub i32 %v0_deac, %v4_de94
  store i32 %v2_deac, i32* %r3.global-to-local, align 4
  %v2_debc = ptrtoint i32* %stack_var_-72 to i32
  %v0_dec0 = load i32, i32* @r6, align 4
  store i32 %v0_dec0, i32* %r1.global-to-local, align 4
  store i32 %v4_de94, i32* %r2.global-to-local, align 4
  %v0_decc = load i32, i32* %sl.global-to-local, align 4
  %v2_decc = add i32 %v0_decc, %v4_de94
  store i32 %v2_decc, i32* %r0.global-to-local, align 4
  store i32 %v2_debc, i32* @r4, align 4
  %v1_dedc = add i32 %v0_deac, -1
  br label %dec_label_pc_ded4

dec_label_pc_ded4:                                ; preds = %dec_label_pc_df10, %dec_label_pc_deb4
  %v0_df18 = phi i32 [ %v1_df18, %dec_label_pc_df10 ], [ %v2_debc, %dec_label_pc_deb4 ]
  %v0_df10 = phi i32 [ %v1_df10, %dec_label_pc_df10 ], [ %v4_de94, %dec_label_pc_deb4 ]
  %v0_def8 = phi i32 [ %v0_def846, %dec_label_pc_df10 ], [ %v0_dec0, %dec_label_pc_deb4 ]
  %v0_ded8 = phi i32 [ %v0_ded842, %dec_label_pc_df10 ], [ %v0_dec0, %dec_label_pc_deb4 ]
  %v0_dee0 = phi i32 [ %v1_dee0, %dec_label_pc_df10 ], [ %v2_decc, %dec_label_pc_deb4 ]
  %v1_ded4 = inttoptr i32 %v0_dee0 to i8*
  %v2_ded4 = load i8, i8* %v1_ded4, align 1
  %v3_ded4 = zext i8 %v2_ded4 to i32
  store i32 %v3_ded4, i32* %r3.global-to-local, align 4
  %v2_ded8 = icmp eq i32 %v0_ded8, 0
  store i1 %v2_ded8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dedc, i32* %lr.global-to-local, align 4
  %v1_dee0 = add i32 %v0_dee0, 1
  store i32 %v1_dee0, i32* %r0.global-to-local, align 4
  %v1_dee4 = add nsw i32 %v3_ded4, -48
  store i32 %v1_dee4, i32* %ip.global-to-local, align 4
  br i1 %v2_ded8, label %dec_label_pc_deec, label %dec_label_pc_defc

dec_label_pc_deec:                                ; preds = %dec_label_pc_ded4
  %v7_deec = icmp eq i8 %v2_ded4, 9
  store i1 %v7_deec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_deec, label %dec_label_pc_df10, label %bb

bb:                                               ; preds = %dec_label_pc_deec
  %v8_def0 = icmp eq i8 %v2_ded4, 32
  store i1 %v8_def0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_def0, label %dec_label_pc_df10, label %dec_label_pc_def8

dec_label_pc_def8:                                ; preds = %bb
  %v1_def8 = add i32 %v0_def8, 1
  store i32 %v1_def8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_defc

dec_label_pc_defc:                                ; preds = %dec_label_pc_ded4, %dec_label_pc_def8
  %v0_def847 = phi i32 [ %v0_def8, %dec_label_pc_ded4 ], [ %v1_def8, %dec_label_pc_def8 ]
  %v0_ded843 = phi i32 [ %v0_ded8, %dec_label_pc_ded4 ], [ %v1_def8, %dec_label_pc_def8 ]
  %v7_defc = icmp eq i8 %v2_ded4, 46
  store i1 %v7_defc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_defc, label %dec_label_pc_df08, label %bb129

bb129:                                            ; preds = %dec_label_pc_defc
  %v3_df00 = icmp ugt i32 %v1_dee4, 8
  %v8_df00 = icmp eq i32 %v1_dee4, 9
  store i1 %v8_df00, i1* %cpsr_z.global-to-local, align 1
  %v2_df04 = xor i1 %v8_df00, true
  %v3_df04 = and i1 %v3_df00, %v2_df04
  br i1 %v3_df04, label %dec_label_pc_e450, label %dec_label_pc_df08

dec_label_pc_df08:                                ; preds = %dec_label_pc_defc, %bb129
  %v9_df08 = icmp eq i32 %v0_df10, %v1_dedc
  store i1 %v9_df08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_df08, label %dec_label_pc_e450, label %dec_label_pc_df10

dec_label_pc_df10:                                ; preds = %dec_label_pc_deec, %dec_label_pc_df08, %bb
  %v0_def846 = phi i32 [ %v0_def8, %dec_label_pc_deec ], [ %v0_def847, %dec_label_pc_df08 ], [ %v0_def8, %bb ]
  %v0_ded842 = phi i32 [ 0, %dec_label_pc_deec ], [ %v0_ded843, %dec_label_pc_df08 ], [ 0, %bb ]
  %v1_df10 = add i32 %v0_df10, 1
  store i32 %v1_df10, i32* %r2.global-to-local, align 4
  %v9_df14 = icmp eq i32 %v0_deac, %v1_df10
  store i1 %v9_df14, i1* %cpsr_z.global-to-local, align 1
  %v1_df18 = add i32 %v0_df18, 1
  store i32 %v1_df18, i32* @r4, align 4
  br i1 %v9_df14, label %dec_label_pc_df20, label %dec_label_pc_ded4

dec_label_pc_df20:                                ; preds = %dec_label_pc_df10, %dec_label_pc_deac, %dec_label_pc_de50, %dec_label_pc_dce8
  %v0_df20 = call i32 @function_f8e8()
  %v1_df24 = urem i32 %v0_df20, 4
  store i32 %v1_df24, i32* %r0.global-to-local, align 4
  %v2_df28 = icmp eq i32 %v1_df24, 3
  store i1 %v2_df28, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_df20 to i2
  switch i2 %trunc, label %dec_label_pc_df4c25 [
    i2 0, label %dec_label_pc_e488
    i2 1, label %dec_label_pc_df44
    i2 -2, label %dec_label_pc_e478
    i2 -1, label %dec_label_pc_e49c
  ]

dec_label_pc_df44:                                ; preds = %dec_label_pc_df20
  store i32 74, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_df4c

dec_label_pc_df4c25:                              ; preds = %dec_label_pc_df20
  unreachable

dec_label_pc_df4c:                                ; preds = %dec_label_pc_e49c, %dec_label_pc_e488, %dec_label_pc_e478, %dec_label_pc_e450, %dec_label_pc_df44
  %stack_var_-2188.0 = phi i32 [ 4, %dec_label_pc_e49c ], [ 64, %dec_label_pc_e478 ], [ 74, %dec_label_pc_df44 ], [ 8, %dec_label_pc_e488 ], [ %phitmp, %dec_label_pc_e450 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_df50 = call i32 @function_138c0(i32* null)
  %v0_df54 = load i32, i32* @r7, align 4
  %v2_df54 = icmp eq i32 %v0_df54, 0
  store i1 %v2_df54, i1* %cpsr_z.global-to-local, align 1
  %v1_df58 = load i32, i32* %fp.global-to-local, align 4
  %v2_df58 = add i32 %v1_df58, %v2_df50
  store i32 %v2_df58, i32* %r0.global-to-local, align 4
  br i1 %v2_df54, label %dec_label_pc_e42c, label %dec_label_pc_df64

dec_label_pc_df64:                                ; preds = %dec_label_pc_df4c
  store i32 %v0_df54, i32* %r0.global-to-local, align 4
  %v1_df68 = inttoptr i32 %v0_df54 to i8*
  %v2_df68 = call i32 @function_12c5c(i8* %v1_df68)
  %v3_df68 = inttoptr i32 %v2_df68 to i8*
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_df7c = call i32 @function_13edc(i32 2, i32 3, i32 17)
  store i32 %v3_df7c, i32* %r0.global-to-local, align 4
  %v7_df80 = icmp eq i32 %v3_df7c, -1
  store i1 %v7_df80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df80, label %dec_label_pc_e42c, label %dec_label_pc_df8c

dec_label_pc_df8c:                                ; preds = %dec_label_pc_df64
  store i32 1, i32* %lr.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_df98 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_df98, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_dfac = call i32 @function_13eac(i32 %v3_df7c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_dfac, i32* %r0.global-to-local, align 4
  %v7_dfb0 = icmp eq i32 %v6_dfac, -1
  store i1 %v7_dfb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dfb0, label %dec_label_pc_e424, label %dec_label_pc_dfb8

dec_label_pc_dfb8:                                ; preds = %dec_label_pc_df8c
  %v3_dfc0 = mul i32 %v7_dd58, 65536
  store i32 %v3_dfc0, i32* %r8.global-to-local, align 4
  %v3_dfcc = mul i32 %v6_ddb4, 65536
  store i32 %v3_dfcc, i32* %r0.global-to-local, align 4
  %v3_dfd0 = mul i32 %v6_ddcc, 65536
  store i32 %v3_dfd0, i32* %sl.global-to-local, align 4
  %v3_dfd4 = mul i32 %v6_dde8, 65536
  store i32 %v3_dfd4, i32* %fp.global-to-local, align 4
  %v2_dfd8 = icmp eq i32 %v1_dcf4, 0
  store i1 %v2_dfd8, i1* %cpsr_z.global-to-local, align 1
  %v1_dfdc = urem i32 %v6_de00, 256
  store i32 %v1_dfdc, i32* @sb, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_dfe4 = urem i32 %v7_dd58, 65536
  %v3_dfe8 = urem i32 %v6_ddb4, 65536
  store i32 %v3_dfe8, i32* %ip.global-to-local, align 4
  %v3_dfec = urem i32 %v6_ddcc, 65536
  store i32 %v3_dfec, i32* %lr.global-to-local, align 4
  %v3_dff0 = urem i32 %v6_dde8, 65536
  store i32 %v3_dff0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_dfd8, label %dec_label_pc_e438.critedge, label %dec_label_pc_e00c

dec_label_pc_e00c:                                ; preds = %dec_label_pc_dfb8
  %v2_e014 = add i32 %v2_df68, %v1_dfdc
  %v3_e018 = mul i32 %v2_e014, 65536
  %v1_e01c = add i32 %v3_e018, 1769472
  %v1_e020 = add i32 %v3_e018, 3080192
  %v1_e03c = urem i32 %v6_dde8, 256
  %tmp130 = udiv i32 %v6_ddb4, 256
  %v3_e040 = urem i32 %tmp130, 256
  %v1_e044 = urem i32 %v6_ddb4, 256
  %v1_e038 = mul i32 %v7_dd58, 256
  %v3_e04c = and i32 %v1_e038, 65280
  store i32 %v3_e04c, i32* %r1.global-to-local, align 4
  %v1_e054 = urem i32 %v6_ddcc, 256
  %tmp131 = udiv i32 %v7_dd58, 256
  %v3_e05c = udiv i32 %v1_e01c, 256
  %v1_e064 = and i32 %v3_e05c, 65280
  %tmp132 = udiv i32 %v6_ddcc, 256
  %v4_e074 = udiv i32 %v1_e01c, 16777216
  %v5_e074 = or i32 %v1_e064, %v4_e074
  store i32 %v5_e074, i32* @r6, align 4
  %v3_e07c = sdiv i32 %v1_e020, 16777216
  %sext39 = mul i32 %tmp131, 16777216
  %v7_e07c = sdiv i32 %sext39, 16777216
  %v3_e080 = mul nuw nsw i32 %v1_e03c, 256
  %v4_e088 = mul nuw nsw i32 %v1_e044, 256
  %v5_e088 = or i32 %v4_e088, %v3_e040
  store i32 %v5_e088, i32* %r0.global-to-local, align 4
  %v3_e08c = ashr i32 %v1_e020, 31
  %tmp133 = udiv i32 %v6_dde8, 256
  %v4_e090 = urem i32 %tmp133, 256
  %v5_e090 = or i32 %v4_e090, %v3_e080
  store i32 %v5_e090, i32* @r5, align 4
  %v3_e094 = ashr i32 %sext39, 31
  store i32 1, i32* %r8.global-to-local, align 4
  %v2_e09c = add i32 %v2_df68, 1
  store i32 %v2_e09c, i32* %fp.global-to-local, align 4
  store i32 %v1_e054, i32* %r3.global-to-local, align 4
  store i32 %v1_e044, i32* %r2.global-to-local, align 4
  %v3_e0b069 = udiv i32 %v1_e064, 256
  store i32 %v3_e0b069, i32* %ip.global-to-local, align 4
  store i32 %v1_e03c, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  %v5_e0bc = trunc i32 %tmp130 to i8
  store i32 0, i32* %sl.global-to-local, align 4
  %sext18 = mul i32 %v6_dd70, 16777216
  %v4_e13c = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v1_e01c, 256
  %v4_e16c = sdiv i32 %sext19, 16777216
  %sext21 = mul i32 %v6_ddcc, 16777216
  %v4_e188 = sdiv i32 %sext21, 16777216
  %sext22 = mul nuw i32 %v4_e074, 16777216
  %v4_e18c = sdiv i32 %sext22, 16777216
  %sext24 = mul i32 %v6_dde8, 16777216
  %v4_e1ac = sdiv i32 %sext24, 16777216
  %v1_e130 = trunc i32 %v3_e08c to i8
  %extract.t = trunc i32 %v3_e094 to i8
  %v1_e190 = trunc i32 %tmp132 to i8
  %v1_e1b8 = trunc i32 %v6_ddb4 to i8
  br label %dec_label_pc_e0dc

dec_label_pc_e0dc:                                ; preds = %dec_label_pc_e23c, %dec_label_pc_e00c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_e0e4 = call i32 @function_141c8(i32 600, i32 1)
  store i32 %v2_e0e4, i32* %r0.global-to-local, align 4
  store i32 %v2_dd1c, i32* %r2.global-to-local, align 4
  %v3_e0ec = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e0ec, i32* %r3.global-to-local, align 4
  %v2_e0f0 = load i32, i32* @r4, align 4
  %v5_e0f0 = mul i32 %v2_e0f0, 4
  %v6_e0f0 = add i32 %v5_e0f0, %v2_dd1c
  %v7_e0f0 = inttoptr i32 %v6_e0f0 to i32*
  store i32 %v2_e0e4, i32* %v7_e0f0, align 4
  %v0_e0f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_e0f4 = load i32, i32* %r3.global-to-local, align 4
  %v4_e0f4 = mul i32 %v1_e0f4, 4
  %v5_e0f4 = add i32 %v4_e0f4, %v0_e0f4
  %v6_e0f4 = inttoptr i32 %v5_e0f4 to i32*
  %v7_e0f4 = load i32, i32* %v6_e0f4, align 4
  store i32 %v7_e0f4, i32* %r1.global-to-local, align 4
  %v1_e0f8 = inttoptr i32 %v7_e0f4 to i8*
  %v2_e0f8 = load i8, i8* %v1_e0f8, align 1
  %tmp = urem i8 %v2_e0f8, 16
  %v1_e0fc = zext i8 %tmp to i32
  %v1_e100 = or i32 %v1_e0fc, 64
  store i32 %v1_e100, i32* %r2.global-to-local, align 4
  %v1_e104 = trunc i32 %v1_e100 to i8
  store i8 %v1_e104, i8* %v1_e0f8, align 1
  %v0_e108 = load i32, i32* %r1.global-to-local, align 4
  %v1_e108 = inttoptr i32 %v0_e108 to i8*
  %v2_e108 = load i8, i8* %v1_e108, align 1
  %v1_e10c = and i8 %v2_e108, -16
  %v1_e110 = or i8 %v1_e10c, 5
  store i32 %v1_dd9c, i32* %ip.global-to-local, align 4
  store i8 %v1_e110, i8* %v1_e108, align 1
  %v2_e120 = load i32, i32* %r1.global-to-local, align 4
  %v3_e120 = add i32 %v2_e120, 1
  %v4_e120 = inttoptr i32 %v3_e120 to i8*
  store i8 %v5_dd54, i8* %v4_e120, align 1
  store i32 %v3_e08c, i32* %r3.global-to-local, align 4
  store i32 %v3_e07c, i32* %r2.global-to-local, align 4
  %v0_e12c = load i32, i32* %ip.global-to-local, align 4
  %v2_e12c = icmp eq i32 %v0_e12c, 0
  store i1 %v2_e12c, i1* %cpsr_z.global-to-local, align 1
  %v2_e130 = load i32, i32* %r1.global-to-local, align 4
  %v3_e130 = add i32 %v2_e130, 3
  %v4_e130 = inttoptr i32 %v3_e130 to i8*
  store i8 %v1_e130, i8* %v4_e130, align 1
  %v0_e134 = load i32, i32* %r2.global-to-local, align 4
  %v1_e134 = trunc i32 %v0_e134 to i8
  %v2_e134 = load i32, i32* %r1.global-to-local, align 4
  %v3_e134 = add i32 %v2_e134, 2
  %v4_e134 = inttoptr i32 %v3_e134 to i8*
  store i8 %v1_e134, i8* %v4_e134, align 1
  store i32 %v3_e094, i32* %lr.global-to-local, align 4
  store i32 %v4_e13c, i32* %r2.global-to-local, align 4
  %v0_e140 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e140, label %.thread26, label %bb134

bb134:                                            ; preds = %dec_label_pc_e0dc
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e144 = load i32, i32* %r1.global-to-local, align 4
  %v4_e144 = add i32 %v3_e144, 6
  %v5_e144 = inttoptr i32 %v4_e144 to i8*
  store i8 64, i8* %v5_e144, align 1
  %v0_e14c.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t70 = trunc i32 %v0_e14c.pre to i8
  br label %.thread26

.thread26:                                        ; preds = %dec_label_pc_e0dc, %bb134
  %v0_e14c.off0 = phi i8 [ %extract.t, %dec_label_pc_e0dc ], [ %extract.t70, %bb134 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_e14c = load i32, i32* %r1.global-to-local, align 4
  %v3_e14c = add i32 %v2_e14c, 5
  %v4_e14c = inttoptr i32 %v3_e14c to i8*
  store i8 %v0_e14c.off0, i8* %v4_e14c, align 1
  store i32 %v7_e07c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f238.84 to i32), i32* %lr.global-to-local, align 4
  %v0_e158 = load i32, i32* %r2.global-to-local, align 4
  %v1_e158 = trunc i32 %v0_e158 to i8
  %v2_e158 = load i32, i32* %r1.global-to-local, align 4
  %v3_e158 = add i32 %v2_e158, 8
  %v4_e158 = inttoptr i32 %v3_e158 to i8*
  store i8 %v1_e158, i8* %v4_e158, align 1
  %v0_e15c = load i32, i32* %r3.global-to-local, align 4
  %v1_e15c = trunc i32 %v0_e15c to i8
  %v2_e15c = load i32, i32* %r1.global-to-local, align 4
  %v3_e15c = add i32 %v2_e15c, 9
  %v4_e15c = inttoptr i32 %v3_e15c to i8*
  store i8 %v1_e15c, i8* %v4_e15c, align 1
  %v0_e160 = load i32, i32* %r1.global-to-local, align 4
  %v1_e160 = add i32 %v0_e160, 41
  %v2_e164 = load i32, i32* @global_var_1f238.84, align 4
  store i32 %v2_e164, i32* %r3.global-to-local, align 4
  %v0_e168 = load i32, i32* @sb, align 4
  %v2_e168 = add i32 %v1_e160, %v0_e168
  store i32 %v2_e168, i32* %r4.global-to-local, align 4
  store i32 %v4_e16c, i32* %r2.global-to-local, align 4
  %v1_e170 = add i32 %v0_e160, 20
  store i32 %v1_e170, i32* %r0.global-to-local, align 4
  %v0_e174 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e174, label %bb136, label %bb135

bb135:                                            ; preds = %.thread26
  %v1_e174 = load i32, i32* %sl.global-to-local, align 4
  %v2_e174 = trunc i32 %v1_e174 to i8
  %v4_e174 = add i32 %v0_e160, 7
  %v5_e174 = inttoptr i32 %v4_e174 to i8*
  store i8 %v2_e174, i8* %v5_e174, align 1
  %v2_e178.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb136

bb136:                                            ; preds = %.thread26, %bb135
  %v2_e178 = phi i32 [ %v0_e160, %.thread26 ], [ %v2_e178.pre, %bb135 ]
  %v0_e178 = load i32, i32* %ip.global-to-local, align 4
  %v1_e178 = trunc i32 %v0_e178 to i8
  %v3_e178 = add i32 %v2_e178, 4
  %v4_e178 = inttoptr i32 %v3_e178 to i8*
  store i8 %v1_e178, i8* %v4_e178, align 1
  %v0_e17c = load i32, i32* %r3.global-to-local, align 4
  %v1_e17c = load i32, i32* %r1.global-to-local, align 4
  %v2_e17c = add i32 %v1_e17c, 12
  %v3_e17c = inttoptr i32 %v2_e17c to i32*
  store i32 %v0_e17c, i32* %v3_e17c, align 4
  %v0_e180 = load i32, i32* %r2.global-to-local, align 4
  %v1_e180 = trunc i32 %v0_e180 to i8
  %v2_e180 = load i32, i32* %r0.global-to-local, align 4
  %v3_e180 = add i32 %v2_e180, 5
  %v4_e180 = inttoptr i32 %v3_e180 to i8*
  store i8 %v1_e180, i8* %v4_e180, align 1
  store i32 %v4_e188, i32* %lr.global-to-local, align 4
  store i32 %v4_e18c, i32* %r2.global-to-local, align 4
  %v2_e190 = load i32, i32* %r0.global-to-local, align 4
  %v3_e190 = add i32 %v2_e190, 2
  %v4_e190 = inttoptr i32 %v3_e190 to i8*
  store i8 %v1_e190, i8* %v4_e190, align 1
  %v0_e194 = load i32, i32* %lr.global-to-local, align 4
  %v1_e194 = trunc i32 %v0_e194 to i8
  %v2_e194 = load i32, i32* %r0.global-to-local, align 4
  %v3_e194 = add i32 %v2_e194, 3
  %v4_e194 = inttoptr i32 %v3_e194 to i8*
  store i8 %v1_e194, i8* %v4_e194, align 1
  %v0_e198 = load i32, i32* %r2.global-to-local, align 4
  %v1_e198 = trunc i32 %v0_e198 to i8
  %v2_e198 = load i32, i32* %r0.global-to-local, align 4
  %v3_e198 = add i32 %v2_e198, 4
  %v4_e198 = inttoptr i32 %v3_e198 to i8*
  store i8 %v1_e198, i8* %v4_e198, align 1
  store i32 %stack_var_-2188.0, i32* %lr.global-to-local, align 4
  %v2_e1a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e1a4 = add i32 %v2_e1a4, 20
  %v4_e1a4 = inttoptr i32 %v3_e1a4 to i8*
  store i8 %v5_e0bc, i8* %v4_e1a4, align 1
  store i32 %v4_e1ac, i32* %r3.global-to-local, align 4
  %v0_e1b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_e1b0 = add i32 %v0_e1b0, 28
  store i32 %v1_e1b0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v2_e1b8 = load i32, i32* %r0.global-to-local, align 4
  %v3_e1b8 = add i32 %v2_e1b8, 1
  %v4_e1b8 = inttoptr i32 %v3_e1b8 to i8*
  store i8 %v1_e1b8, i8* %v4_e1b8, align 1
  %v0_e1bc = load i32, i32* %lr.global-to-local, align 4
  %v1_e1bc = load i32, i32* %r1.global-to-local, align 4
  %v2_e1bc = add i32 %v1_e1bc, 16
  %v3_e1bc = inttoptr i32 %v2_e1bc to i32*
  store i32 %v0_e1bc, i32* %v3_e1bc, align 4
  %v0_e1c0 = load i32, i32* %r8.global-to-local, align 4
  %v1_e1c0 = trunc i32 %v0_e1c0 to i8
  %v2_e1c0 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1c0 = add i32 %v2_e1c0, 5
  %v4_e1c0 = inttoptr i32 %v3_e1c0 to i8*
  store i8 %v1_e1c0, i8* %v4_e1c0, align 1
  %v0_e1c4 = load i32, i32* @r5, align 4
  %v1_e1c4 = trunc i32 %v0_e1c4 to i8
  %v2_e1c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e1c4 = add i32 %v2_e1c4, 28
  %v4_e1c4 = inttoptr i32 %v3_e1c4 to i8*
  store i8 %v1_e1c4, i8* %v4_e1c4, align 1
  %v0_e1c8 = load i32, i32* %r8.global-to-local, align 4
  %v1_e1c8 = trunc i32 %v0_e1c8 to i8
  %v2_e1c8 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1c8 = add i32 %v2_e1c8, 2
  %v4_e1c8 = inttoptr i32 %v3_e1c8 to i8*
  store i8 %v1_e1c8, i8* %v4_e1c8, align 1
  %v0_e1cc = load i32, i32* %r3.global-to-local, align 4
  %v1_e1cc = trunc i32 %v0_e1cc to i8
  %v2_e1cc = load i32, i32* %ip.global-to-local, align 4
  %v3_e1cc = add i32 %v2_e1cc, 1
  %v4_e1cc = inttoptr i32 %v3_e1cc to i8*
  store i8 %v1_e1cc, i8* %v4_e1cc, align 1
  %v0_e1d0 = load i32, i32* @r6, align 4
  %v1_e1d0 = trunc i32 %v0_e1d0 to i8
  %v2_e1d0 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1d0 = add i32 %v2_e1d0, 3
  %v4_e1d0 = inttoptr i32 %v3_e1d0 to i8*
  store i8 %v1_e1d0, i8* %v4_e1d0, align 1
  %v0_e1d4 = load i32, i32* @r6, align 4
  %v1_e1d4 = trunc i32 %v0_e1d4 to i8
  %v2_e1d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1d4 = add i32 %v2_e1d4, 4
  %v4_e1d4 = inttoptr i32 %v3_e1d4 to i8*
  store i8 %v1_e1d4, i8* %v4_e1d4, align 1
  %v0_e1d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_e1d8 = add i32 %v0_e1d8, 1
  store i32 %v1_e1d8, i32* %r0.global-to-local, align 4
  %v0_e1dc = load i32, i32* @sb, align 4
  %v1_e1dc = trunc i32 %v0_e1dc to i8
  %v2_e1dc = load i32, i32* %r1.global-to-local, align 4
  %v3_e1dc = add i32 %v2_e1dc, 40
  %v4_e1dc = inttoptr i32 %v3_e1dc to i8*
  store i8 %v1_e1dc, i8* %v4_e1dc, align 1
  %v0_e1e0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_e1e0, i32* %r2.global-to-local, align 4
  %v0_e1e4 = load i32, i32* @r7, align 4
  store i32 %v0_e1e4, i32* %r1.global-to-local, align 4
  %v3_e1e8 = call i32 @function_12cd8(i32 %v1_e1d8, i32 %v0_e1e4, i32 %v0_e1e0)
  store i32 %v3_e1e8, i32* %r0.global-to-local, align 4
  %v1_e1f0 = load i32, i32* @r6, align 4
  %v10_e1f0 = inttoptr i32 %v1_e1f0 to i8*
  %v15_e1f0 = icmp eq i32 %v2_df68, %v1_e1f0
  store i1 %v15_e1f0, i1* %cpsr_z.global-to-local, align 1
  %v9_e1f4 = icmp sgt i8* %v3_df68, %v10_e1f0
  store i32 %v1_e1f0, i32* %lr.global-to-local, align 4
  %v0_e204 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e204, i32* %ip.global-to-local, align 4
  %extract.t72 = trunc i32 %v1_e1f0 to i8
  br i1 %v9_e1f4, label %dec_label_pc_e200, label %dec_label_pc_e23c

dec_label_pc_e200:                                ; preds = %bb136
  store i32 %v1_e1f0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e20c

dec_label_pc_e20c:                                ; preds = %.thread38, %dec_label_pc_e200
  %v1_e214 = phi i32 [ %v1_e21458, %.thread38 ], [ %v1_e1f0, %dec_label_pc_e200 ]
  %v0_e20c = phi i32 [ %v1_e228, %.thread38 ], [ %v1_e1f0, %dec_label_pc_e200 ]
  %v1_e20c = load i32, i32* @r7, align 4
  %v2_e20c = add i32 %v1_e20c, %v0_e20c
  %v3_e20c = inttoptr i32 %v2_e20c to i8*
  %v4_e20c = load i8, i8* %v3_e20c, align 1
  %v6_e20c = zext i8 %v4_e20c to i32
  store i32 %v6_e20c, i32* %r3.global-to-local, align 4
  %v7_e210 = icmp eq i8 %v4_e20c, 46
  store i1 %v7_e210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e210, label %bb137, label %.thread34

.thread34:                                        ; preds = %dec_label_pc_e20c
  %v1_e21836 = add i32 %v1_e214, 1
  store i32 %v1_e21836, i32* %r2.global-to-local, align 4
  br label %bb138

bb137:                                            ; preds = %dec_label_pc_e20c
  %v2_e214 = trunc i32 %v1_e214 to i8
  %v3_e214 = load i32, i32* %ip.global-to-local, align 4
  %v4_e214 = inttoptr i32 %v3_e214 to i8*
  store i8 %v2_e214, i8* %v4_e214, align 1
  %v0_e21c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_e218 = load i32, i32* %lr.global-to-local, align 4
  %v1_e218 = add i32 %v0_e218, 1
  store i32 %v1_e218, i32* %r2.global-to-local, align 4
  br i1 %v0_e21c.pr, label %bb139, label %bb138

bb138:                                            ; preds = %.thread34, %bb137
  %v1_e21837 = phi i32 [ %v1_e21836, %.thread34 ], [ %v1_e218, %bb137 ]
  %v2_e21c = urem i32 %v1_e21837, 256
  store i32 %v2_e21c, i32* %lr.global-to-local, align 4
  br label %bb139

bb139:                                            ; preds = %bb137, %bb138
  %v1_e21459 = phi i32 [ %v0_e218, %bb137 ], [ %v2_e21c, %bb138 ]
  %v0_e230.pr = phi i1 [ true, %bb137 ], [ false, %bb138 ]
  store i32 %v2_df68, i32* %r2.global-to-local, align 4
  %v0_e224 = load i32, i32* %r4.global-to-local, align 4
  %v1_e224 = load i32, i32* %r1.global-to-local, align 4
  %v2_e224 = add i32 %v1_e224, %v0_e224
  store i32 %v2_e224, i32* %r0.global-to-local, align 4
  %v1_e228 = add i32 %v1_e224, 1
  store i32 %v1_e228, i32* %r1.global-to-local, align 4
  br i1 %v0_e230.pr, label %bb140, label %.thread38

bb140:                                            ; preds = %bb139
  %v2_e22c = add i32 %v2_e224, 1
  store i32 %v2_e22c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread38

.thread38:                                        ; preds = %bb139, %bb140
  %v1_e21458 = phi i32 [ %v1_e21459, %bb139 ], [ 0, %bb140 ]
  %v9_e234 = icmp eq i32 %v2_df68, %v1_e228
  store i1 %v9_e234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e234, label %dec_label_pc_e23c.loopexit, label %dec_label_pc_e20c

dec_label_pc_e23c.loopexit:                       ; preds = %.thread38
  %v2_e23c.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_e21458 to i8
  br label %dec_label_pc_e23c

dec_label_pc_e23c:                                ; preds = %dec_label_pc_e23c.loopexit, %bb136
  %v2_e23c = phi i32 [ %v2_e23c.pre, %dec_label_pc_e23c.loopexit ], [ %v0_e204, %bb136 ]
  %v0_e23c.off0 = phi i8 [ %extract.t71, %dec_label_pc_e23c.loopexit ], [ %extract.t72, %bb136 ]
  %v3_e23c = inttoptr i32 %v2_e23c to i8*
  store i8 %v0_e23c.off0, i8* %v3_e23c, align 1
  %v3_e240 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_df68, i32* %ip.global-to-local, align 4
  store i32 %v1_dcf4, i32* @lr, align 4
  %v0_e24c = load i32, i32* %r4.global-to-local, align 4
  %v2_e24c = add i32 %v0_e24c, %v2_df68
  store i32 %v2_e24c, i32* %r3.global-to-local, align 4
  %v1_e250 = add i32 %v3_e240, 1
  store i32 %v1_e250, i32* @r4, align 4
  %v9_e254 = icmp eq i32 %v1_dcf4, %v1_e250
  store i1 %v9_e254, i1* %cpsr_z.global-to-local, align 1
  %v1_e258 = add i32 %v2_e24c, 2
  store i32 %v1_e258, i32* %r2.global-to-local, align 4
  %v0_e25c = load i32, i32* %sl.global-to-local, align 4
  %v1_e25c = trunc i32 %v0_e25c to i8
  %v4_e25c = inttoptr i32 %v1_e258 to i8*
  store i8 %v1_e25c, i8* %v4_e25c, align 1
  %v0_e260 = load i32, i32* %r8.global-to-local, align 4
  %v1_e260 = trunc i32 %v0_e260 to i8
  %v2_e260 = load i32, i32* %r2.global-to-local, align 4
  %v3_e260 = add i32 %v2_e260, 3
  %v4_e260 = inttoptr i32 %v3_e260 to i8*
  store i8 %v1_e260, i8* %v4_e260, align 1
  %v0_e264 = load i32, i32* %r8.global-to-local, align 4
  %v1_e264 = trunc i32 %v0_e264 to i8
  %v2_e264 = load i32, i32* %r2.global-to-local, align 4
  %v3_e264 = add i32 %v2_e264, 1
  %v4_e264 = inttoptr i32 %v3_e264 to i8*
  store i8 %v1_e264, i8* %v4_e264, align 1
  %v0_e268 = load i32, i32* %sl.global-to-local, align 4
  %v1_e268 = trunc i32 %v0_e268 to i8
  %v2_e268 = load i32, i32* %r2.global-to-local, align 4
  %v3_e268 = add i32 %v2_e268, 2
  %v4_e268 = inttoptr i32 %v3_e268 to i8*
  store i8 %v1_e268, i8* %v4_e268, align 1
  %v0_e26c = load i32, i32* @r4, align 4
  store i32 %v0_e26c, i32* %stack_var_-40, align 4
  %v8_e270 = icmp sgt i32 %v1_dcf4, %v1_e250
  br i1 %v8_e270, label %dec_label_pc_e0dc, label %dec_label_pc_e274

dec_label_pc_e274:                                ; preds = %dec_label_pc_e23c, %dec_label_pc_e438
  store i32 %v1_dcf4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_dfd8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_dfd8, label %dec_label_pc_e438, label %dec_label_pc_e288

dec_label_pc_e288:                                ; preds = %dec_label_pc_e274
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_e294 = load i32, i32* @sb, align 4
  %v2_e294 = add i32 %v0_e294, %v2_df68
  store i32 %v2_e294, i32* %r3.global-to-local, align 4
  %v1_e298 = add i32 %v2_e294, 47
  store i32 %v1_e298, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), i32* @r8, align 4
  %v1_e2a0 = add i32 %v2_e294, 27
  store i32 %v1_e2a0, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e39c

dec_label_pc_e2b0:                                ; preds = %dec_label_pc_e39c
  store i32 %v3_dfe8, i32* %r3.global-to-local, align 4
  %v9_e2b4 = icmp eq i32 %v3_dfe8, %v1_e2b4
  store i1 %v9_e2b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e2b4, label %dec_label_pc_e3d8, label %dec_label_pc_e2bc

dec_label_pc_e2bc:                                ; preds = %dec_label_pc_e3bc.dec_label_pc_e2bc_crit_edge, %dec_label_pc_e2b0
  %v1_e2c0 = phi i32 [ %v1_e2c0.pre, %dec_label_pc_e3bc.dec_label_pc_e2bc_crit_edge ], [ %v1_e2b4, %dec_label_pc_e2b0 ]
  store i32 %v3_dfec, i32* %ip.global-to-local, align 4
  %v9_e2c0 = icmp eq i32 %v3_dfec, %v1_e2c0
  store i1 %v9_e2c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e2c0, label %dec_label_pc_e3f4, label %dec_label_pc_e2c8

dec_label_pc_e2c8:                                ; preds = %dec_label_pc_e3d8.dec_label_pc_e2c8_crit_edge, %dec_label_pc_e2bc
  %v1_e2cc = phi i32 [ %v1_e2cc.pre, %dec_label_pc_e3d8.dec_label_pc_e2c8_crit_edge ], [ %v1_e2c0, %dec_label_pc_e2bc ]
  store i32 %v3_dff0, i32* %lr.global-to-local, align 4
  %v9_e2cc = icmp eq i32 %v3_dff0, %v1_e2cc
  store i1 %v9_e2cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e2cc, label %dec_label_pc_e410, label %dec_label_pc_e2d4

dec_label_pc_e2d4:                                ; preds = %dec_label_pc_e3f4, %dec_label_pc_e2c8, %dec_label_pc_e410
  %v0_e2d4 = load i32, i32* @r6, align 4
  store i32 %v0_e2d4, i32* %r0.global-to-local, align 4
  %v0_e2d8 = load i32, i32* @sb, align 4
  store i32 %v0_e2d8, i32* %r1.global-to-local, align 4
  %v2_e2dc = call i32 @function_f99c(i32 %v0_e2d4, i32 %v0_e2d8)
  %v0_e2e0 = load i32, i32* @r7, align 4
  %v1_e2e0 = trunc i32 %v0_e2e0 to i8
  %v2_e2e0 = load i32, i32* @r6, align 4
  %v3_e2e0 = load i32, i32* @sb, align 4
  %v4_e2e0 = add i32 %v3_e2e0, %v2_e2e0
  %v5_e2e0 = inttoptr i32 %v4_e2e0 to i8*
  store i8 %v1_e2e0, i8* %v5_e2e0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e2e8 = load i32, i32* @r7, align 4
  %v1_e2e8 = trunc i32 %v0_e2e8 to i8
  %v2_e2e8 = load i32, i32* @r4, align 4
  %v3_e2e8 = add i32 %v2_e2e8, 10
  %v4_e2e8 = inttoptr i32 %v3_e2e8 to i8*
  store i8 %v1_e2e8, i8* %v4_e2e8, align 1
  %v0_e2ec = load i32, i32* @r7, align 4
  %v1_e2ec = trunc i32 %v0_e2ec to i8
  %v2_e2ec = load i32, i32* @r4, align 4
  %v3_e2ec = add i32 %v2_e2ec, 11
  %v4_e2ec = inttoptr i32 %v3_e2ec to i8*
  store i8 %v1_e2ec, i8* %v4_e2ec, align 1
  %v0_e2f0 = load i32, i32* @r4, align 4
  store i32 %v0_e2f0, i32* @r0, align 4
  %v2_e2f4 = call i32 @function_e4b8(i32 %v0_e2f0, i32 20)
  %v3_e2f4 = trunc i32 %v2_e2f4 to i8
  store i32 %v2_e2f4, i32* %r0.global-to-local, align 4
  %v4_e2f8 = sdiv i32 %v2_e2f4, 256
  store i32 %v4_e2f8, i32* %r3.global-to-local, align 4
  %v1_e2fc = trunc i32 %v4_e2f8 to i8
  %v2_e2fc = load i32, i32* @r4, align 4
  %v3_e2fc = add i32 %v2_e2fc, 11
  %v4_e2fc = inttoptr i32 %v3_e2fc to i8*
  store i8 %v1_e2fc, i8* %v4_e2fc, align 1
  %v3_e300 = load i32, i32* @r4, align 4
  %v4_e300 = add i32 %v3_e300, 10
  %v5_e300 = inttoptr i32 %v4_e300 to i8*
  store i8 %v3_e2f4, i8* %v5_e300, align 1
  %v0_e304 = load i32, i32* @r7, align 4
  %v1_e304 = trunc i32 %v0_e304 to i8
  %v2_e304 = load i32, i32* @r5, align 4
  %v3_e304 = add i32 %v2_e304, 6
  %v4_e304 = inttoptr i32 %v3_e304 to i8*
  store i8 %v1_e304, i8* %v4_e304, align 1
  %v0_e308 = load i32, i32* @r7, align 4
  %v1_e308 = trunc i32 %v0_e308 to i8
  %v2_e308 = load i32, i32* @r5, align 4
  %v3_e308 = add i32 %v2_e308, 7
  %v4_e308 = inttoptr i32 %v3_e308 to i8*
  store i8 %v1_e308, i8* %v4_e308, align 1
  %v0_e30c = load i32, i32* @r4, align 4
  %v1_e30c = add i32 %v0_e30c, 24
  %v2_e30c = inttoptr i32 %v1_e30c to i8*
  %v3_e30c = load i8, i8* %v2_e30c, align 1
  %v4_e30c = zext i8 %v3_e30c to i32
  store i32 %v4_e30c, i32* %r3.global-to-local, align 4
  %v1_e310 = add i32 %v0_e30c, 25
  %v2_e310 = inttoptr i32 %v1_e310 to i8*
  %v3_e310 = load i8, i8* %v2_e310, align 1
  %v4_e310 = zext i8 %v3_e310 to i32
  %v0_e314 = load i32, i32* @r5, align 4
  store i32 %v0_e314, i32* @r1, align 4
  %v4_e318 = mul nuw nsw i32 %v4_e310, 256
  %v5_e318 = or i32 %v4_e318, %v4_e30c
  store i32 %v5_e318, i32* %r2.global-to-local, align 4
  store i32 %v0_e30c, i32* %r0.global-to-local, align 4
  %v0_e320 = load i32, i32* @fp, align 4
  store i32 %v0_e320, i32* %r3.global-to-local, align 4
  %v4_e324 = call i32 @function_e514(i32 %v0_e30c, i32 %v0_e314, i32 %v5_e318, i32 %v0_e320)
  %v5_e324 = trunc i32 %v4_e324 to i8
  store i32 %v4_e324, i32* %r0.global-to-local, align 4
  %v3_e328 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v5_e334 = mul i32 %v3_e328, 24
  store i32 %v5_e334, i32* %lr.global-to-local, align 4
  %v4_e33877 = udiv i32 %v4_e324, 256
  %v1_e33c = trunc i32 %v4_e33877 to i8
  %v2_e33c = load i32, i32* @r5, align 4
  %v3_e33c = add i32 %v2_e33c, 7
  %v4_e33c = inttoptr i32 %v3_e33c to i8*
  store i8 %v1_e33c, i8* %v4_e33c, align 1
  store i32 %stack_var_-2188.0, i32* %r3.global-to-local, align 4
  %v0_e344 = load i32, i32* %lr.global-to-local, align 4
  %v1_e344 = load i32, i32* %r2.global-to-local, align 4
  %v2_e344 = add i32 %v1_e344, %v0_e344
  store i32 %v2_e344, i32* %lr.global-to-local, align 4
  %v3_e348 = load i32, i32* @r5, align 4
  %v4_e348 = add i32 %v3_e348, 6
  %v5_e348 = inttoptr i32 %v4_e348 to i8*
  store i8 %v5_e324, i8* %v5_e348, align 1
  %v0_e34c = load i32, i32* %r3.global-to-local, align 4
  %v1_e34c = load i32, i32* %lr.global-to-local, align 4
  %v2_e34c = add i32 %v1_e34c, 4
  %v3_e34c = inttoptr i32 %v2_e34c to i32*
  store i32 %v0_e34c, i32* %v3_e34c, align 4
  %v0_e350 = load i32, i32* @r4, align 4
  %v1_e350 = add i32 %v0_e350, 20
  %v2_e350 = inttoptr i32 %v1_e350 to i32*
  %v3_e350 = load i32, i32* %v2_e350, align 4
  %v3_e354 = udiv i32 %v3_e350, 65536
  store i32 %v3_e354, i32* %r3.global-to-local, align 4
  %v3_e35816 = udiv i32 %v3_e350, 16777216
  %v1_e35c = trunc i32 %v3_e35816 to i8
  %v2_e35c = load i32, i32* %lr.global-to-local, align 4
  %v3_e35c = add i32 %v2_e35c, 3
  %v4_e35c = inttoptr i32 %v3_e35c to i8*
  store i8 %v1_e35c, i8* %v4_e35c, align 1
  %v0_e360 = load i32, i32* %r3.global-to-local, align 4
  %v1_e360 = trunc i32 %v0_e360 to i8
  %v2_e360 = load i32, i32* %lr.global-to-local, align 4
  %v3_e360 = add i32 %v2_e360, 2
  %v4_e360 = inttoptr i32 %v3_e360 to i8*
  store i8 %v1_e360, i8* %v4_e360, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e36c = load i32, i32* @r4, align 4
  store i32 %v0_e36c, i32* %r1.global-to-local, align 4
  store i32 %v3_df7c, i32* %r0.global-to-local, align 4
  store i32 %v1_e298, i32* %r2.global-to-local, align 4
  %v0_e378 = load i32, i32* %lr.global-to-local, align 4
  %v6_e380 = inttoptr i32 %v0_e36c to i32*
  %v7_e380 = call i32 @function_13e78(i32 %v3_df7c, i32* %v6_e380, i32 %v1_e298, i32 16384, i32 %v0_e378, i32 16)
  %v3_e384 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e384, i32* %r3.global-to-local, align 4
  %v1_e38c = add i32 %v3_e384, 1
  store i32 %v1_e38c, i32* %r0.global-to-local, align 4
  %v9_e390 = icmp eq i32 %v1_dcf4, %v1_e38c
  store i1 %v9_e390, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e38c, i32* %stack_var_-40, align 4
  %v7_e398 = icmp sgt i32 %v1_dcf4, %v1_e38c
  br i1 %v7_e398, label %dec_label_pc_e2d4.dec_label_pc_e39c_crit_edge, label %dec_label_pc_e438

dec_label_pc_e2d4.dec_label_pc_e39c_crit_edge:    ; preds = %dec_label_pc_e2d4
  %v1_e3a8.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e39c

dec_label_pc_e39c:                                ; preds = %dec_label_pc_e2d4.dec_label_pc_e39c_crit_edge, %dec_label_pc_e288
  %v1_e2b4 = phi i32 [ %v1_e3a8.pre, %dec_label_pc_e2d4.dec_label_pc_e39c_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), %dec_label_pc_e288 ]
  %v1_e3a4 = phi i32 [ %v1_e38c, %dec_label_pc_e2d4.dec_label_pc_e39c_crit_edge ], [ 0, %dec_label_pc_e288 ]
  store i32 %v2_dd1c, i32* %lr.global-to-local, align 4
  store i32 %v3_dfe4, i32* %r2.global-to-local, align 4
  %v4_e3a4 = mul i32 %v1_e3a4, 4
  %v5_e3a4 = add i32 %v4_e3a4, %v2_dd1c
  %v6_e3a4 = inttoptr i32 %v5_e3a4 to i32*
  %v7_e3a4 = load i32, i32* %v6_e3a4, align 4
  store i32 %v7_e3a4, i32* @r4, align 4
  %v9_e3a8 = icmp eq i32 %v3_dfe4, %v1_e2b4
  store i1 %v9_e3a8, i1* %cpsr_z.global-to-local, align 1
  %v1_e3ac = add i32 %v7_e3a4, 20
  store i32 %v1_e3ac, i32* @r5, align 4
  %v1_e3b0 = add i32 %v7_e3a4, 41
  store i32 %v1_e3b0, i32* @r6, align 4
  %v1_e3b4 = add i32 %v7_e3a4, 28
  store i32 %v1_e3b4, i32* @sl, align 4
  br i1 %v9_e3a8, label %dec_label_pc_e3bc, label %dec_label_pc_e2b0

dec_label_pc_e3bc:                                ; preds = %dec_label_pc_e39c
  %v0_e3bc = call i32 @function_f8e8()
  %v1_e3bc = trunc i32 %v0_e3bc to i8
  store i32 %v0_e3bc, i32* %r0.global-to-local, align 4
  %v4_e3c078 = udiv i32 %v0_e3bc, 256
  %v1_e3c4 = trunc i32 %v4_e3c078 to i8
  %v2_e3c4 = load i32, i32* @r4, align 4
  %v3_e3c4 = add i32 %v2_e3c4, 5
  %v4_e3c4 = inttoptr i32 %v3_e3c4 to i8*
  store i8 %v1_e3c4, i8* %v4_e3c4, align 1
  store i32 %v3_dfe8, i32* %r3.global-to-local, align 4
  %v1_e3cc = load i32, i32* @r8, align 4
  %v9_e3cc = icmp eq i32 %v3_dfe8, %v1_e3cc
  store i1 %v9_e3cc, i1* %cpsr_z.global-to-local, align 1
  %v3_e3d0 = load i32, i32* @r4, align 4
  %v4_e3d0 = add i32 %v3_e3d0, 4
  %v5_e3d0 = inttoptr i32 %v4_e3d0 to i8*
  store i8 %v1_e3bc, i8* %v5_e3d0, align 1
  %v0_e3d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3d4, label %dec_label_pc_e3d8, label %dec_label_pc_e3bc.dec_label_pc_e2bc_crit_edge

dec_label_pc_e3bc.dec_label_pc_e2bc_crit_edge:    ; preds = %dec_label_pc_e3bc
  %v1_e2c0.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e2bc

dec_label_pc_e3d8:                                ; preds = %dec_label_pc_e3bc, %dec_label_pc_e2b0
  %v0_e3d8 = call i32 @function_f8e8()
  %v1_e3d8 = trunc i32 %v0_e3d8 to i8
  store i32 %v0_e3d8, i32* %r0.global-to-local, align 4
  store i32 %v3_dfec, i32* %ip.global-to-local, align 4
  %v4_e3e0 = sdiv i32 %v0_e3d8, 256
  store i32 %v4_e3e0, i32* %r3.global-to-local, align 4
  %v1_e3e4 = load i32, i32* @r8, align 4
  %v9_e3e4 = icmp eq i32 %v3_dfec, %v1_e3e4
  store i1 %v9_e3e4, i1* %cpsr_z.global-to-local, align 1
  %v3_e3e8 = load i32, i32* @r4, align 4
  %v4_e3e8 = add i32 %v3_e3e8, 20
  %v5_e3e8 = inttoptr i32 %v4_e3e8 to i8*
  store i8 %v1_e3d8, i8* %v5_e3e8, align 1
  %v0_e3ec = load i32, i32* %r3.global-to-local, align 4
  %v1_e3ec = trunc i32 %v0_e3ec to i8
  %v2_e3ec = load i32, i32* @r5, align 4
  %v3_e3ec = add i32 %v2_e3ec, 1
  %v4_e3ec = inttoptr i32 %v3_e3ec to i8*
  store i8 %v1_e3ec, i8* %v4_e3ec, align 1
  %v0_e3f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3f0, label %dec_label_pc_e3f4, label %dec_label_pc_e3d8.dec_label_pc_e2c8_crit_edge

dec_label_pc_e3d8.dec_label_pc_e2c8_crit_edge:    ; preds = %dec_label_pc_e3d8
  %v1_e2cc.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e2c8

dec_label_pc_e3f4:                                ; preds = %dec_label_pc_e3d8, %dec_label_pc_e2bc
  %v0_e3f4 = call i32 @function_f8e8()
  %v1_e3f4 = trunc i32 %v0_e3f4 to i8
  store i32 %v0_e3f4, i32* %r0.global-to-local, align 4
  store i32 %v3_dff0, i32* %lr.global-to-local, align 4
  %v4_e3fc = sdiv i32 %v0_e3f4, 256
  store i32 %v4_e3fc, i32* %r3.global-to-local, align 4
  %v1_e400 = load i32, i32* @r8, align 4
  %v9_e400 = icmp eq i32 %v3_dff0, %v1_e400
  store i1 %v9_e400, i1* %cpsr_z.global-to-local, align 1
  %v1_e404 = trunc i32 %v4_e3fc to i8
  %v2_e404 = load i32, i32* @r5, align 4
  %v3_e404 = add i32 %v2_e404, 3
  %v4_e404 = inttoptr i32 %v3_e404 to i8*
  store i8 %v1_e404, i8* %v4_e404, align 1
  %v3_e408 = load i32, i32* @r5, align 4
  %v4_e408 = add i32 %v3_e408, 2
  %v5_e408 = inttoptr i32 %v4_e408 to i8*
  store i8 %v1_e3f4, i8* %v5_e408, align 1
  %v0_e40c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e40c, label %dec_label_pc_e410, label %dec_label_pc_e2d4

dec_label_pc_e410:                                ; preds = %dec_label_pc_e3f4, %dec_label_pc_e2c8
  %v0_e410 = call i32 @function_f8e8()
  %v1_e410 = trunc i32 %v0_e410 to i8
  store i32 %v0_e410, i32* %r0.global-to-local, align 4
  %v4_e414 = sdiv i32 %v0_e410, 256
  store i32 %v4_e414, i32* %r3.global-to-local, align 4
  %v3_e418 = load i32, i32* @r4, align 4
  %v4_e418 = add i32 %v3_e418, 28
  %v5_e418 = inttoptr i32 %v4_e418 to i8*
  store i8 %v1_e410, i8* %v5_e418, align 1
  %v0_e41c = load i32, i32* %r3.global-to-local, align 4
  %v1_e41c = trunc i32 %v0_e41c to i8
  %v2_e41c = load i32, i32* @sl, align 4
  %v3_e41c = add i32 %v2_e41c, 1
  %v4_e41c = inttoptr i32 %v3_e41c to i8*
  store i8 %v1_e41c, i8* %v4_e41c, align 1
  br label %dec_label_pc_e2d4

dec_label_pc_e424:                                ; preds = %dec_label_pc_df8c
  store i32 %v3_df7c, i32* %r0.global-to-local, align 4
  %v1_e428 = call i32 @function_135f0(i32 %v3_df7c)
  store i32 %v1_e428, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e42c

dec_label_pc_e42c:                                ; preds = %dec_label_pc_e438, %dec_label_pc_df64, %dec_label_pc_df4c, %dec_label_pc_e424
  %v29_e434 = phi i32 [ %v3_df7c, %dec_label_pc_df64 ], [ %v2_df58, %dec_label_pc_df4c ], [ %v1_e428, %dec_label_pc_e424 ], [ %v2_e43c, %dec_label_pc_e438 ]
  store i32 %v3_dce8, i32* %r4.global-to-local, align 4
  store i32 %v15_dce8, i32* %r8.global-to-local, align 4
  store i32 %v21_dce8, i32* %sl.global-to-local, align 4
  store i32 %v24_dce8, i32* %fp.global-to-local, align 4
  ret i32 %v29_e434

dec_label_pc_e438.critedge:                       ; preds = %dec_label_pc_dfb8
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_e438

dec_label_pc_e438:                                ; preds = %dec_label_pc_e2d4, %dec_label_pc_e438.critedge, %dec_label_pc_e274
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_e43c = call i32 @function_138c0(i32* null)
  store i32 %v2_e43c, i32* %r0.global-to-local, align 4
  store i32 %v2_df58, i32* %ip.global-to-local, align 4
  %v9_e444 = icmp eq i32 %v2_df58, %v2_e43c
  store i1 %v9_e444, i1* %cpsr_z.global-to-local, align 1
  %v6_e448 = icmp slt i32 %v2_df58, %v2_e43c
  br i1 %v6_e448, label %dec_label_pc_e42c, label %dec_label_pc_e274

dec_label_pc_e450:                                ; preds = %dec_label_pc_df08, %bb129
  %v0_df10.lcssa = phi i32 [ %v1_dedc, %dec_label_pc_df08 ], [ %v0_df10, %bb129 ]
  %v2_e450 = sub i32 %v0_df10.lcssa, %v4_de94
  store i32 %v2_e450, i32* %r2.global-to-local, align 4
  store i32 %v2_decc, i32* %r1.global-to-local, align 4
  store i32 %v2_debc, i32* %r0.global-to-local, align 4
  %v3_e45c = call i32 @function_12cd8(i32 %v2_debc, i32 %v2_decc, i32 %v2_e450)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_debc, i32* @r0, align 4
  %v2_e468 = load i32, i32* @r4, align 4
  %v3_e468 = inttoptr i32 %v2_e468 to i8*
  store i8 0, i8* %v3_e468, align 1
  %v1_e46c = call i32 @function_13cbc(i32 %v2_debc)
  store i32 %v1_e46c, i32* %r0.global-to-local, align 4
  %sext40 = mul i32 %v1_e46c, 16777216
  %phitmp = sdiv i32 %sext40, 16777216
  br label %dec_label_pc_df4c

dec_label_pc_e478:                                ; preds = %dec_label_pc_df20
  store i32 104859200, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_df4c

dec_label_pc_e488:                                ; preds = %dec_label_pc_df20
  br label %dec_label_pc_df4c

dec_label_pc_e49c:                                ; preds = %dec_label_pc_df20
  store i32 33686020, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_df4c

; uselistorder directives
  uselistorder i32 %v2_e43c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_e410, { 0, 2, 1 }
  uselistorder i32 %v4_e3fc, { 1, 0 }
  uselistorder i32 %v0_e3f4, { 0, 2, 1 }
  uselistorder i32 %v0_e3d8, { 0, 2, 1 }
  uselistorder i32 %v0_e3bc, { 0, 2, 1 }
  uselistorder i32 %v7_e3a4, { 2, 1, 0, 3 }
  uselistorder i32 %v1_e2b4, { 2, 1, 0 }
  uselistorder i32 %v1_e38c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_e324, { 0, 2, 1 }
  uselistorder i32 %v0_e30c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e2f8, { 1, 0 }
  uselistorder i32 %v2_e2f4, { 0, 2, 1 }
  uselistorder i32 %v1_e298, { 1, 0, 2 }
  uselistorder i32 %v1_e228, { 0, 2, 1 }
  uselistorder i32 %v1_e224, { 1, 0 }
  uselistorder i32 %v2_e21c, { 1, 0 }
  uselistorder i32 %v1_e1f0, { 2, 1, 4, 0, 3, 6, 5 }
  uselistorder i32 %v3_e094, { 1, 0 }
  uselistorder i32 %v3_e08c, { 1, 0 }
  uselistorder i32 %v1_e044, { 1, 0 }
  uselistorder i32 %v1_e03c, { 1, 0 }
  uselistorder i32 %v1_e020, { 1, 0 }
  uselistorder i32 %v3_e018, { 1, 0 }
  uselistorder i32 %v1_dfdc, { 1, 0 }
  uselistorder i1 %v7_dfb0, { 1, 0 }
  uselistorder i1 %v7_df80, { 1, 0 }
  uselistorder i32 %v3_df7c, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_df68, { 0, 1, 6, 3, 5, 7, 4, 2, 8 }
  uselistorder i32 %v2_df58, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_df54, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2188.0, { 1, 0 }
  uselistorder i32 %v1_df24, { 1, 0 }
  uselistorder i32 %v0_df20, { 1, 0 }
  uselistorder i32 %v1_df18, { 1, 0 }
  uselistorder i32 %v1_df10, { 1, 2, 0 }
  uselistorder i1 %v7_defc, { 1, 0 }
  uselistorder i32 %v1_def8, { 1, 0, 2 }
  uselistorder i1 %v8_def0, { 1, 0 }
  uselistorder i1 %v7_deec, { 1, 0 }
  uselistorder i32 %v1_dee0, { 1, 0 }
  uselistorder i8 %v2_ded4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ded8, { 1, 0 }
  uselistorder i32 %v0_def8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_decc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_dec0, { 1, 0, 2 }
  uselistorder i32 %v2_debc, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_deac, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_dea4, { 1, 0 }
  uselistorder i32 %v4_de94, { 6, 5, 7, 4, 3, 1, 2, 0, 8 }
  uselistorder i32 %v0_de48, { 1, 0, 2, 3 }
  uselistorder i32 %v6_dde8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_ddcc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_ddb4, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v1_dd9c, { 1, 0 }
  uselistorder i32 %v7_dd58, { 1, 0, 3, 2 }
  uselistorder i32 %v6_dd34, { 1, 0 }
  uselistorder i32 %v2_dd1c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_dcf4, { 3, 4, 2, 6, 7, 5, 8, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 12, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 2, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 40, 39, 41, 43, 42, 45, 44, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 6, 5, 7, 8, 9, 11, 10, 12, 14, 13, 15, 16, 17, 18, 26, 19, 20, 21, 22, 23, 24, 25, 30, 27, 28, 29, 31, 33, 32, 35, 34, 36, 37, 38, 39, 41, 40, 42, 43, 45, 44, 46, 48, 47, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 24, 25, 26, 27 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 12, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder i32 41, { 4, 5, 6, 0, 1, 7, 2, 8, 3, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_10000.27 to i32), { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_10000.27 to i32), i32 -1), { 0, 33, 13, 12, 15, 34, 14, 35, 3, 1, 2, 17, 36, 16, 37, 40, 4, 38, 39, 41, 42, 18, 43, 19, 44, 20, 45, 46, 21, 47, 50, 5, 48, 49, 51, 52, 53, 54, 23, 55, 22, 56, 59, 6, 57, 58, 60, 61, 62, 63, 24, 64, 25, 65, 26, 66, 68, 7, 8, 69, 67, 27, 70, 28, 71, 74, 9, 72, 73, 75, 76, 30, 77, 29, 78, 81, 10, 79, 80, 82, 83, 32, 84, 31, 85, 11, 86 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_a054, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 87, 88, 89, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 90, 91 }
  uselistorder label %dec_label_pc_e438, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e42c, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_e2d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e274, { 1, 0 }
  uselistorder label %.thread38, { 1, 0 }
  uselistorder label %bb139, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %bb136, { 1, 0 }
  uselistorder label %.thread26, { 1, 0 }
  uselistorder label %dec_label_pc_df10, { 1, 2, 0 }
  uselistorder label %dec_label_pc_df08, { 1, 0 }
  uselistorder label %dec_label_pc_defc, { 1, 0 }
}

define i32 @function_e4b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e4b0:
  call void @__pseudo_cond_branch(i1 false, i32 11152864)
  %v0_e4b4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e4b4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e4b0
  %v2_e4b4 = load i32, i32* @r8, align 4
  %v8_e4b4 = lshr i32 %v2_e4b4, %arg2
  %v9_e4b4 = and i32 %v8_e4b4, %arg1
  call void @__pseudo_branch(i32 %v9_e4b4)
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e4b0, %bb
  %v10_e4b4 = load i32, i32* @r0, align 4
  ret i32 %v10_e4b4

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e4b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e4b8:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_e4e8, label %dec_label_pc_e4c4

dec_label_pc_e4c4:                                ; preds = %dec_label_pc_e4b8
  %v0_e4c8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e4c8

dec_label_pc_e4c8:                                ; preds = %dec_label_pc_e4c8, %dec_label_pc_e4c4
  %v0_e4dc = phi i32 [ %v2_e4dc, %dec_label_pc_e4c8 ], [ 0, %dec_label_pc_e4c4 ]
  %v0_e4d0 = phi i32 [ %v1_e4d0, %dec_label_pc_e4c8 ], [ %arg1, %dec_label_pc_e4c4 ]
  %v0_e4e0 = phi i32 [ %v1_e4e0, %dec_label_pc_e4c8 ], [ %v0_e4c8.pre, %dec_label_pc_e4c4 ]
  %v1_e4c8 = inttoptr i32 %v0_e4e0 to i8*
  %v2_e4c8 = load i8, i8* %v1_e4c8, align 1
  %v3_e4c8 = zext i8 %v2_e4c8 to i32
  %v1_e4cc = add i32 %v0_e4e0, 1
  %v2_e4cc = inttoptr i32 %v1_e4cc to i8*
  %v3_e4cc = load i8, i8* %v2_e4cc, align 1
  %v4_e4cc = zext i8 %v3_e4cc to i32
  %v1_e4d0 = add i32 %v0_e4d0, -2
  %v4_e4d4 = mul nuw nsw i32 %v4_e4cc, 256
  %v5_e4d4 = or i32 %v4_e4d4, %v3_e4c8
  %v2_e4dc = add i32 %v5_e4d4, %v0_e4dc
  %v1_e4e0 = add i32 %v0_e4e0, 2
  store i32 %v1_e4e0, i32* @r0, align 4
  %v1_e4d0.cmp = icmp ugt i32 %v1_e4d0, 1
  br i1 %v1_e4d0.cmp, label %dec_label_pc_e4c8, label %dec_label_pc_e4e8

dec_label_pc_e4e8:                                ; preds = %dec_label_pc_e4c8, %dec_label_pc_e4b8
  %v1_e4f0 = phi i32 [ 0, %dec_label_pc_e4b8 ], [ %v2_e4dc, %dec_label_pc_e4c8 ]
  %v0_e4e8 = phi i32 [ %arg1, %dec_label_pc_e4b8 ], [ %v1_e4d0, %dec_label_pc_e4c8 ]
  %v7_e4e8 = icmp eq i32 %v0_e4e8, 1
  br i1 %v7_e4e8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e4e8
  %v1_e4ec = load i32, i32* @r0, align 4
  %v2_e4ec = inttoptr i32 %v1_e4ec to i8*
  %v3_e4ec = load i8, i8* %v2_e4ec, align 1
  %v4_e4ec = zext i8 %v3_e4ec to i32
  %v3_e4f0 = add i32 %v1_e4f0, %v4_e4ec
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e4e8, %bb
  %v0_e4f4 = phi i32 [ %v1_e4f0, %dec_label_pc_e4e8 ], [ %v3_e4f0, %bb ]
  %v3_e4f8 = urem i32 %v0_e4f4, 65536
  %v4_e4fc = udiv i32 %v0_e4f4, 65536
  %v5_e4fc = add nuw nsw i32 %v4_e4fc, %v3_e4f8
  %v4_e500 = udiv i32 %v5_e4fc, 65536
  %v5_e500 = add nuw nsw i32 %v4_e500, %v5_e4fc
  %v1_e504 = urem i32 %v5_e500, 65536
  %v3_e50c = xor i32 %v1_e504, 65535
  ret i32 %v3_e50c

; uselistorder directives
  uselistorder i32 %v5_e4fc, { 1, 0 }
  uselistorder i32 %v1_e4e0, { 1, 0 }
  uselistorder i32 %v1_e4d0, { 1, 0, 2 }
  uselistorder i32 %v0_e4e0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e514(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e514:
  %v3_e524 = urem i32 %arg2, 65536
  %v1_e528 = add i32 %arg1, 12
  %v1_e52c = inttoptr i32 %v1_e528 to i32*
  %v2_e52c = load i32, i32* %v1_e52c, align 4
  %v3_e52c = add i32 %arg1, 16
  %v4_e52c = inttoptr i32 %v3_e52c to i32*
  %v5_e52c = load i32, i32* %v4_e52c, align 4
  %v7_e530 = icmp sgt i32 %arg3, 1
  br i1 %v7_e530, label %dec_label_pc_e53c.preheader, label %dec_label_pc_e55c

dec_label_pc_e53c.preheader:                      ; preds = %dec_label_pc_e514
  %v0_e53c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_e53c

dec_label_pc_e53c:                                ; preds = %dec_label_pc_e53c.preheader, %dec_label_pc_e53c
  %v0_e550 = phi i32 [ 0, %dec_label_pc_e53c.preheader ], [ %v2_e550, %dec_label_pc_e53c ]
  %v0_e544 = phi i32 [ %arg3, %dec_label_pc_e53c.preheader ], [ %v1_e544, %dec_label_pc_e53c ]
  %v0_e554 = phi i32 [ %v0_e53c.pre, %dec_label_pc_e53c.preheader ], [ %v1_e554, %dec_label_pc_e53c ]
  %v1_e53c = inttoptr i32 %v0_e554 to i8*
  %v2_e53c = load i8, i8* %v1_e53c, align 1
  %v3_e53c = zext i8 %v2_e53c to i32
  %v1_e540 = add i32 %v0_e554, 1
  %v2_e540 = inttoptr i32 %v1_e540 to i8*
  %v3_e540 = load i8, i8* %v2_e540, align 1
  %v4_e540 = zext i8 %v3_e540 to i32
  %v1_e544 = add nsw i32 %v0_e544, -2
  %v4_e548 = mul nuw nsw i32 %v4_e540, 256
  %v5_e548 = or i32 %v4_e548, %v3_e53c
  %v2_e550 = add i32 %v5_e548, %v0_e550
  %v1_e554 = add i32 %v0_e554, 2
  store i32 %v1_e554, i32* @r1, align 4
  %v8_e558 = icmp sgt i32 %v1_e544, 1
  br i1 %v8_e558, label %dec_label_pc_e53c, label %dec_label_pc_e55c

dec_label_pc_e55c:                                ; preds = %dec_label_pc_e53c, %dec_label_pc_e514
  %v1_e564 = phi i32 [ 0, %dec_label_pc_e514 ], [ %v2_e550, %dec_label_pc_e53c ]
  %v0_e55c = phi i32 [ %arg3, %dec_label_pc_e514 ], [ %v1_e544, %dec_label_pc_e53c ]
  %v7_e55c = icmp eq i32 %v0_e55c, 1
  br i1 %v7_e55c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e55c
  %v1_e560 = load i32, i32* @r1, align 4
  %v2_e560 = inttoptr i32 %v1_e560 to i8*
  %v3_e560 = load i8, i8* %v2_e560, align 1
  %v4_e560 = zext i8 %v3_e560 to i32
  %v3_e564 = add i32 %v4_e560, %v1_e564
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e55c, %bb
  %v0_e588 = phi i32 [ %v1_e564, %dec_label_pc_e55c ], [ %v3_e564, %bb ]
  %v3_e56c = urem i32 %v2_e52c, 65536
  %v1_e574 = add i32 %arg1, 9
  %v2_e574 = inttoptr i32 %v1_e574 to i8*
  %v3_e574 = load i8, i8* %v2_e574, align 1
  %v4_e574 = zext i8 %v3_e574 to i32
  %v3_e578 = urem i32 %v5_e52c, 65536
  %v4_e57c = udiv i32 %v2_e52c, 65536
  %v3_e584 = mul nuw nsw i32 %v4_e574, 256
  %v4_e588 = udiv i32 %v5_e52c, 65536
  %v5_e588 = add i32 %v0_e588, %v4_e588
  %v2_e58c = add i32 %v5_e588, %v3_e584
  %v5_e57c = add nuw nsw i32 %v3_e56c, %v3_e524
  %v2_e580 = add nuw nsw i32 %v5_e57c, %v4_e57c
  %v2_e590 = add nuw nsw i32 %v2_e580, %v3_e578
  %v2_e594 = add i32 %v2_e58c, %v2_e590
  %tmp = icmp ult i32 %v2_e594, 65536
  br i1 %tmp, label %dec_label_pc_e5b4, label %dec_label_pc_e5a0

dec_label_pc_e5a0:                                ; preds = %.thread, %dec_label_pc_e5a0
  %v2_e5a81 = phi i32 [ %v2_e5a8, %dec_label_pc_e5a0 ], [ %v2_e594, %.thread ]
  %v3_e5ac2.in = phi i32 [ %v2_e5a8, %dec_label_pc_e5a0 ], [ %v2_e594, %.thread ]
  %v3_e5ac2 = udiv i32 %v3_e5ac2.in, 65536
  %v3_e5a4 = urem i32 %v2_e5a81, 65536
  %v2_e5a8 = add nuw nsw i32 %v3_e5a4, %v3_e5ac2
  %tmp14 = icmp ult i32 %v2_e5a8, 65536
  br i1 %tmp14, label %dec_label_pc_e5b4.loopexit, label %dec_label_pc_e5a0

dec_label_pc_e5b4.loopexit:                       ; preds = %dec_label_pc_e5a0
  br label %dec_label_pc_e5b4

dec_label_pc_e5b4:                                ; preds = %dec_label_pc_e5b4.loopexit, %.thread
  %v0_e5b4 = phi i32 [ %v2_e5a8, %dec_label_pc_e5b4.loopexit ], [ %v2_e594, %.thread ]
  %v1_e5b4 = urem i32 %v0_e5b4, 65536
  %v3_e5bc = xor i32 %v1_e5b4, 65535
  ret i32 %v3_e5bc

; uselistorder directives
  uselistorder i32 %v2_e5a8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_e594, { 3, 0, 2, 1 }
  uselistorder i32 %v1_e564, { 1, 0 }
  uselistorder i32 %v1_e554, { 1, 0 }
  uselistorder i32 %v1_e544, { 0, 2, 1 }
  uselistorder i32 %v0_e554, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e5a0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e53c, { 1, 0 }
}

define i32 @function_e5c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_e5c4:
  %v2_e5c8 = load i32, i32* @global_var_1f19c.95, align 4
  %v2_e5d0 = call i32 @function_136f0(i32 %v2_e5c8, i32 9)
  %v0_e5d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e5d4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e5c4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e5c4, %bb
  ret i32 %v2_e5d0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e5d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_e5d8:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e5d8 = load i32, i32* @r4, align 4
  store i32 %v3_e5d8, i32* %stack_var_-36, align 4
  %v6_e5d8 = load i32, i32* @r5, align 4
  %v9_e5d8 = load i32, i32* @r6, align 4
  %v12_e5d8 = load i32, i32* @r7, align 4
  %v15_e5d8 = load i32, i32* @r8, align 4
  %v18_e5d8 = load i32, i32* @sb, align 4
  %v21_e5d8 = load i32, i32* @sl, align 4
  %v24_e5d8 = load i32, i32* @fp, align 4
  %v2_e5ec = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_e5ec, i32* @sl, align 4
  %v3_e5f4 = mul i32 %arg1, 65536
  store i32 %v3_e5f4, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_e600 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_e60c = bitcast i32* %stack_var_-4677 to i8*
  %v3_e60c = call i32 @function_13c00(i8* %v2_e60c, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_e624 = bitcast i32* %stack_var_-8773 to i8*
  %v3_e624 = call i32 @function_13c00(i8* %v2_e624, i32 0)
  %v2_e628 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_e628, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_e648 = call i32 @function_13c00(i8* nonnull %stack_var_-581, i32 0)
  %v2_e64c = ptrtoint i8* %stack_var_-68 to i32
  %v1_e654 = load i32, i32* @r5, align 4
  %v4_e654 = udiv i32 %v1_e654, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_e674 = trunc i32 %v4_e654 to i8
  %v4_e674 = call i32 @function_13150(i8 %v3_e674, i32 16, i32 %v2_e64c)
  %v2_e67c = call i32 @function_12c5c(i8* nonnull %stack_var_-68)
  %v7_e680 = icmp eq i32 %v2_e67c, 2
  br i1 %v7_e680, label %dec_label_pc_eb2c, label %dec_label_pc_e688

dec_label_pc_e688:                                ; preds = %dec_label_pc_e5d8, %dec_label_pc_eb2c
  %v1_e68c = call i32 @function_121f4(i32 4)
  %v1_e694 = call i32 @function_121f4(i32 5)
  %v1_e69c = call i32 @function_121f4(i32 6)
  %v1_e6a4 = call i32 @function_121f4(i32 7)
  %v0_e6a8 = load i32, i32* @r4, align 4
  %v2_e6b0 = inttoptr i32 %v0_e6a8 to i32*
  %v3_e6b0 = call i32 @function_12110(i32 7, i32* %v2_e6b0)
  %v0_e6b4 = load i32, i32* @r4, align 4
  %v2_e6b8 = inttoptr i32 %v3_e6b0 to i8*
  %v3_e6b8 = call i32 @function_1371c(i8* %v2_e6b8, i32 %v0_e6b4)
  %v7_e6bc = icmp eq i32 %v3_e6b8, -1
  store i32 %v3_e6b8, i32* @r8, align 4
  br i1 %v7_e6bc, label %dec_label_pc_eaec, label %dec_label_pc_e6c8.preheader

dec_label_pc_e6c8.preheader:                      ; preds = %dec_label_pc_e688
  %v4_e6d458 = call i32 @function_12eb4(i8* nonnull %stack_var_-581, i32 512, i32 %v3_e6b8)
  %v2_e6d860 = icmp eq i32 %v4_e6d458, 0
  br i1 %v2_e6d860, label %dec_label_pc_e868.loopexit, label %dec_label_pc_e6e0.lr.ph

dec_label_pc_e6e0.lr.ph:                          ; preds = %dec_label_pc_e6c8.preheader
  %v2_e728 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e6e0

dec_label_pc_e6e0:                                ; preds = %dec_label_pc_e6e0.lr.ph, %dec_label_pc_e6c8.backedge
  %v3_e6e4 = load i8, i8* %stack_var_-581, align 1
  %v4_e6e4 = sext i8 %v3_e6e4 to i32
  %v2_e6e8 = icmp eq i8 %v3_e6e4, 0
  br i1 %v2_e6e8, label %bb130, label %bb

bb:                                               ; preds = %dec_label_pc_e6e0
  %v8_e6ec = icmp eq i8 %v3_e6e4, 58
  br i1 %v8_e6ec, label %.thread6, label %dec_label_pc_e700

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e718

bb130:                                            ; preds = %dec_label_pc_e6e0
  br label %dec_label_pc_e718

dec_label_pc_e700:                                ; preds = %bb
  %v1_e708.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e704

dec_label_pc_e704:                                ; preds = %bb131, %dec_label_pc_e700
  %v0_e704 = phi i32 [ %v1_e704, %bb131 ], [ 0, %dec_label_pc_e700 ]
  %v1_e704 = add i32 %v0_e704, 1
  %v2_e708 = add i32 %v1_e704, %v1_e708.pre
  %v3_e708 = inttoptr i32 %v2_e708 to i8*
  %v4_e708 = load i8, i8* %v3_e708, align 1
  %v6_e708 = zext i8 %v4_e708 to i32
  %v2_e70c = icmp eq i8 %v4_e708, 0
  br i1 %v2_e70c, label %dec_label_pc_e718, label %bb131

bb131:                                            ; preds = %dec_label_pc_e704
  %v8_e710 = icmp eq i8 %v4_e708, 58
  br i1 %v8_e710, label %dec_label_pc_e718, label %dec_label_pc_e704

dec_label_pc_e718:                                ; preds = %dec_label_pc_e704, %bb131, %bb130, %.thread6
  %v1_e744 = phi i32 [ 0, %.thread6 ], [ 0, %bb130 ], [ %v1_e704, %bb131 ], [ %v1_e704, %dec_label_pc_e704 ]
  %v0_e718 = phi i32 [ %v4_e6e4, %.thread6 ], [ %v4_e6e4, %bb130 ], [ %v6_e708, %bb131 ], [ %v6_e708, %dec_label_pc_e704 ]
  %v2_e718 = icmp eq i32 %v0_e718, 0
  br i1 %v2_e718, label %dec_label_pc_e6c8.backedge, label %dec_label_pc_e720

dec_label_pc_e6c8.backedge:                       ; preds = %dec_label_pc_e718, %dec_label_pc_e7f0, %dec_label_pc_e83c, %dec_label_pc_e764
  %v0_e6d0 = load i32, i32* @r8, align 4
  %v4_e6d4 = call i32 @function_12eb4(i8* nonnull %stack_var_-581, i32 512, i32 %v0_e6d0)
  %v2_e6d8 = icmp eq i32 %v4_e6d4, 0
  br i1 %v2_e6d8, label %dec_label_pc_e868.loopexit, label %dec_label_pc_e6e0

dec_label_pc_e720:                                ; preds = %dec_label_pc_e718
  %v1_e724 = add i32 %v1_e744, 2
  %v2_e72c = add i32 %v1_e724, %v2_e728
  %v1_e730 = add i32 %v2_e72c, -545
  %v2_e730 = inttoptr i32 %v1_e730 to i8*
  %v3_e730 = load i8, i8* %v2_e730, align 1
  %v2_e734 = icmp eq i8 %v3_e730, 0
  br i1 %v2_e734, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_e720
  %v8_e738 = icmp eq i8 %v3_e730, 32
  br i1 %v8_e738, label %.thread10, label %dec_label_pc_e744

.thread10:                                        ; preds = %bb132
  store i32 %v1_e724, i32* @r5, align 4
  br label %dec_label_pc_e764

bb133:                                            ; preds = %dec_label_pc_e720
  store i32 %v1_e724, i32* @r5, align 4
  br label %dec_label_pc_e764

dec_label_pc_e744:                                ; preds = %bb132
  %v0_e744 = load i32, i32* @r6, align 4
  %v2_e744 = add i32 %v0_e744, %v1_e744
  br label %dec_label_pc_e748

dec_label_pc_e748:                                ; preds = %bb134, %dec_label_pc_e744
  %v0_e75413 = phi i32 [ %v1_e754, %bb134 ], [ %v2_e744, %dec_label_pc_e744 ]
  %v1_e748 = add i32 %v0_e75413, 3
  %v2_e748 = inttoptr i32 %v1_e748 to i8*
  %v3_e748 = load i8, i8* %v2_e748, align 1
  %v2_e74c = icmp eq i8 %v3_e748, 0
  br i1 %v2_e74c, label %.thread12, label %bb134

.thread12:                                        ; preds = %dec_label_pc_e748
  %v1_e75414 = add i32 %v0_e75413, 1
  br label %dec_label_pc_e75c

bb134:                                            ; preds = %dec_label_pc_e748
  %v8_e750 = icmp eq i8 %v3_e748, 32
  %v1_e754 = add i32 %v0_e75413, 1
  br i1 %v8_e750, label %dec_label_pc_e75c, label %dec_label_pc_e748

dec_label_pc_e75c:                                ; preds = %bb134, %.thread12
  %v1_e75415 = phi i32 [ %v1_e75414, %.thread12 ], [ %v1_e754, %bb134 ]
  %v2_e75c = sub i32 %v1_e75415, %v0_e744
  %v1_e760 = add i32 %v2_e75c, 2
  store i32 %v1_e760, i32* @r5, align 4
  br label %dec_label_pc_e764

dec_label_pc_e764:                                ; preds = %bb133, %.thread10, %dec_label_pc_e75c
  %v1_e770 = phi i32 [ %v1_e724, %.thread10 ], [ %v1_e724, %bb133 ], [ %v1_e760, %dec_label_pc_e75c ]
  %v0_e764 = load i32, i32* @r6, align 4
  %v2_e764 = add i32 %v0_e764, %v1_e724
  store i32 %v2_e764, i32* @r4, align 4
  %v2_e770 = add i32 %v1_e770, %v2_e728
  store i32 0, i32* @r7, align 4
  %v3_e77c = add i32 %v2_e770, -545
  %v4_e77c = inttoptr i32 %v3_e77c to i8*
  store i8 0, i8* %v4_e77c, align 1
  %v1_e780 = inttoptr i32 %v2_e764 to i8*
  %v2_e780 = call i32 @function_12c5c(i8* %v1_e780)
  store i32 %v2_e780, i32* @r1, align 4
  %v0_e78c = load i32, i32* @r4, align 4
  %v3_e790 = inttoptr i32 %v0_e78c to i8*
  %v4_e790 = call i32 @function_12fb0(i8* %v3_e790, i32 %v2_e780, i32 %v2_e64c)
  %v7_e794 = icmp eq i32 %v4_e790, -1
  br i1 %v7_e794, label %dec_label_pc_e6c8.backedge, label %dec_label_pc_e7b0.preheader

dec_label_pc_e7b0.preheader:                      ; preds = %dec_label_pc_e764
  %v1_e798 = load i32, i32* @r7, align 4
  %v1_e79c = load i32, i32* @r6, align 4
  %v2_e79c = load i32, i32* @r5, align 4
  %v3_e79c = add i32 %v2_e79c, %v1_e79c
  store i32 %v1_e798, i32* @lr, align 4
  store i32 %v1_e798, i32* @r4, align 4
  %v1_e7b050 = add i32 %v3_e79c, 2
  %v2_e7b051 = inttoptr i32 %v1_e7b050 to i8*
  %v3_e7b052 = load i8, i8* %v2_e7b051, align 1
  %v2_e7b454 = icmp eq i8 %v3_e7b052, 0
  %v1_e7b856 = add i32 %v2_e79c, 2
  br i1 %v2_e7b454, label %dec_label_pc_e7f0, label %dec_label_pc_e7c0

dec_label_pc_e7c0:                                ; preds = %dec_label_pc_e7b0.preheader, %dec_label_pc_e7b0.backedge
  %v0_e7f086 = phi i32 [ %v0_e7f085, %dec_label_pc_e7b0.backedge ], [ %v1_e798, %dec_label_pc_e7b0.preheader ]
  %v0_e7d8.pr = phi i32 [ %v0_e7d8.pr71, %dec_label_pc_e7b0.backedge ], [ %v1_e798, %dec_label_pc_e7b0.preheader ]
  %v0_eafc = phi i32 [ %v0_eafc74, %dec_label_pc_e7b0.backedge ], [ %v1_e798, %dec_label_pc_e7b0.preheader ]
  %v0_e7b882 = phi i32 [ %v1_e7b8, %dec_label_pc_e7b0.backedge ], [ %v1_e7b856, %dec_label_pc_e7b0.preheader ]
  %v0_e7e8 = phi i32 [ %v0_e7b0, %dec_label_pc_e7b0.backedge ], [ %v3_e79c, %dec_label_pc_e7b0.preheader ]
  %v1_e7c4.in = phi i8 [ %v3_e7b0, %dec_label_pc_e7b0.backedge ], [ %v3_e7b052, %dec_label_pc_e7b0.preheader ]
  %v7_e7c0 = icmp eq i8 %v1_e7c4.in, 9
  br i1 %v7_e7c0, label %.thread23, label %bb135

bb135:                                            ; preds = %dec_label_pc_e7c0
  %v8_e7c4 = icmp eq i8 %v1_e7c4.in, 32
  br i1 %v8_e7c4, label %.thread23.thread35, label %dec_label_pc_e7d8

.thread23.thread35:                               ; preds = %bb135
  br label %dec_label_pc_e7e4

.thread23:                                        ; preds = %dec_label_pc_e7c0
  br label %dec_label_pc_e7e4

dec_label_pc_e7d8:                                ; preds = %bb135
  %v7_e7d8 = icmp eq i32 %v0_e7d8.pr, 1
  br i1 %v7_e7d8, label %dec_label_pc_eafc, label %dec_label_pc_e7e0

dec_label_pc_e7e0:                                ; preds = %dec_label_pc_eafc, %dec_label_pc_e7d8
  %v0_e7e479 = phi i32 [ %v1_eafc, %dec_label_pc_eafc ], [ %v0_eafc, %dec_label_pc_e7d8 ]
  br label %dec_label_pc_e7e4

dec_label_pc_e7e4:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e7e0
  %v0_e7e4 = phi i32 [ %v0_eafc, %.thread23.thread35 ], [ %v0_eafc, %.thread23 ], [ %v0_e7e479, %dec_label_pc_e7e0 ]
  %v0_e7d8.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e7e0 ]
  %v7_e7ec = icmp sgt i32 %v0_e7e4, 6
  br i1 %v7_e7ec, label %dec_label_pc_e7f0, label %dec_label_pc_e7b0.backedge

dec_label_pc_e7f0:                                ; preds = %dec_label_pc_e7b0.backedge, %dec_label_pc_e7e4, %dec_label_pc_e7b0.preheader
  %v1_e840 = phi i32 [ %v1_e7b856, %dec_label_pc_e7b0.preheader ], [ %v1_e7b8, %dec_label_pc_e7b0.backedge ], [ %v0_e7b882, %dec_label_pc_e7e4 ]
  %v0_e7f0 = phi i32 [ %v1_e798, %dec_label_pc_e7b0.preheader ], [ %v0_e7f085, %dec_label_pc_e7b0.backedge ], [ %v0_e7f086, %dec_label_pc_e7e4 ]
  %v2_e7f0 = icmp eq i32 %v0_e7f0, 0
  br i1 %v2_e7f0, label %dec_label_pc_e6c8.backedge, label %dec_label_pc_e7fc

dec_label_pc_e7fc:                                ; preds = %dec_label_pc_e7f0
  %v2_e804 = add i32 %v1_e840, %v2_e728
  %v1_e808 = add i32 %v2_e804, -545
  %v2_e808 = inttoptr i32 %v1_e808 to i8*
  %v3_e808 = load i8, i8* %v2_e808, align 1
  %v2_e80c = icmp eq i8 %v3_e808, 0
  br i1 %v2_e80c, label %dec_label_pc_e83c, label %bb136

bb136:                                            ; preds = %dec_label_pc_e7fc
  %v8_e810 = icmp eq i8 %v3_e808, 32
  br i1 %v8_e810, label %dec_label_pc_e83c, label %dec_label_pc_e818

dec_label_pc_e818:                                ; preds = %bb136
  %v2_e818 = add i32 %v1_e840, %v1_e79c
  br label %dec_label_pc_e81c

dec_label_pc_e81c:                                ; preds = %bb137, %dec_label_pc_e818
  %v0_e82828 = phi i32 [ %v1_e828, %bb137 ], [ %v1_e840, %dec_label_pc_e818 ]
  %v0_e81c = phi i32 [ %v1_e81c, %bb137 ], [ %v2_e818, %dec_label_pc_e818 ]
  %v1_e81c = add i32 %v0_e81c, 1
  %v2_e81c = inttoptr i32 %v1_e81c to i8*
  %v3_e81c = load i8, i8* %v2_e81c, align 1
  %v2_e820 = icmp eq i8 %v3_e81c, 0
  br i1 %v2_e820, label %.thread27, label %bb137

.thread27:                                        ; preds = %dec_label_pc_e81c
  %v1_e82829 = add i32 %v0_e82828, 1
  br label %dec_label_pc_e830

bb137:                                            ; preds = %dec_label_pc_e81c
  %v8_e824 = icmp eq i8 %v3_e81c, 32
  %v1_e828 = add i32 %v0_e82828, 1
  br i1 %v8_e824, label %dec_label_pc_e830, label %dec_label_pc_e81c

dec_label_pc_e830:                                ; preds = %bb137, %.thread27
  %v1_e838 = phi i32 [ %v1_e82829, %.thread27 ], [ %v1_e828, %bb137 ]
  %v2_e838 = add i32 %v1_e838, %v2_e728
  br label %dec_label_pc_e83c

dec_label_pc_e83c:                                ; preds = %dec_label_pc_e7fc, %bb136, %dec_label_pc_e830
  %v2_e848 = phi i32 [ %v2_e804, %dec_label_pc_e7fc ], [ %v2_e804, %bb136 ], [ %v2_e838, %dec_label_pc_e830 ]
  %v2_e840 = add i32 %v1_e840, %v1_e79c
  store i32 %v2_e840, i32* @r4, align 4
  %v3_e848 = add i32 %v2_e848, -545
  %v4_e848 = inttoptr i32 %v3_e848 to i8*
  store i8 0, i8* %v4_e848, align 1
  %v1_e84c = inttoptr i32 %v2_e840 to i8*
  %v2_e84c = call i32 @function_12c5c(i8* %v1_e84c)
  %v8_e854 = icmp sgt i32 %v2_e84c, 15
  br i1 %v8_e854, label %dec_label_pc_e6c8.backedge, label %dec_label_pc_e858

dec_label_pc_e858:                                ; preds = %dec_label_pc_e83c
  %v0_e85c = load i32, i32* @r4, align 4
  %v2_e860 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e860, i32* @r0, align 4
  %v2_e864 = bitcast i32* %stack_var_-52 to i8*
  %v3_e864 = call i32 @function_12c84(i8* %v2_e864, i32 %v0_e85c)
  br label %dec_label_pc_e868

dec_label_pc_e868.loopexit:                       ; preds = %dec_label_pc_e6c8.backedge, %dec_label_pc_e6c8.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre99 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e868

dec_label_pc_e868:                                ; preds = %dec_label_pc_e868.loopexit, %dec_label_pc_e858
  %v1_e878.pre-phi = phi i8* [ %.pre99, %dec_label_pc_e868.loopexit ], [ %v2_e864, %dec_label_pc_e858 ]
  %v2_e874.pre-phi = phi i32 [ %.pre, %dec_label_pc_e868.loopexit ], [ %v2_e860, %dec_label_pc_e858 ]
  %v0_e868 = load i32, i32* @r8, align 4
  %v1_e86c = call i32 @function_135f0(i32 %v0_e868)
  %v2_e878 = call i32 @function_12c5c(i8* %v1_e878.pre-phi)
  store i32 %v2_e878, i32* @r4, align 4
  %v2_e87c = icmp eq i32 %v2_e878, 0
  br i1 %v2_e87c, label %dec_label_pc_eacc, label %dec_label_pc_e884

dec_label_pc_e884:                                ; preds = %dec_label_pc_e868
  %v3_e88c = call i32 @function_12110(i32 4, i32* null)
  store i32 %v3_e88c, i32* @r0, align 4
  %v1_e890 = call i32 @function_139cc(i32 %v3_e88c)
  store i32 %v1_e890, i32* @r8, align 4
  %v2_e894 = icmp eq i32 %v1_e890, 0
  br i1 %v2_e894, label %dec_label_pc_eac4, label %dec_label_pc_e8a4.preheader

dec_label_pc_e8a4.preheader:                      ; preds = %dec_label_pc_e884
  store i32 0, i32* @r5, align 4
  %v1_e8a845 = inttoptr i32 %v1_e890 to i32*
  %v2_e8a846 = call i32 @function_13ac8(i32* %v1_e8a845)
  %v2_e8ac48 = icmp eq i32 %v2_e8a846, 0
  br i1 %v2_e8ac48, label %dec_label_pc_eab8, label %dec_label_pc_e8b4.preheader

dec_label_pc_e8a4.loopexit:                       ; preds = %dec_label_pc_e8bc, %dec_label_pc_e8d0, %dec_label_pc_e938
  %v0_e8a4 = load i32, i32* @r8, align 4
  %v1_e8a8 = inttoptr i32 %v0_e8a4 to i32*
  %v2_e8a8 = call i32 @function_13ac8(i32* %v1_e8a8)
  %v2_e8ac = icmp eq i32 %v2_e8a8, 0
  br i1 %v2_e8ac, label %dec_label_pc_eab8, label %dec_label_pc_e8b4.preheader

dec_label_pc_e8b4.preheader:                      ; preds = %dec_label_pc_e8a4.preheader, %dec_label_pc_e8a4.loopexit
  %v0_e8bc94 = phi i32 [ %v2_e8a8, %dec_label_pc_e8a4.loopexit ], [ %v2_e8a846, %dec_label_pc_e8a4.preheader ]
  br label %dec_label_pc_e8b4

dec_label_pc_e8b4:                                ; preds = %dec_label_pc_e8b4.preheader, %dec_label_pc_eaa0
  %v0_e8c8 = phi i32 [ %v0_e8bc94, %dec_label_pc_e8b4.preheader ], [ %v2_eaac, %dec_label_pc_eaa0 ]
  %v0_e8b4 = load i32, i32* @r5, align 4
  %v2_e8b4 = icmp eq i32 %v0_e8b4, 0
  br i1 %v2_e8b4, label %dec_label_pc_e8bc, label %dec_label_pc_eab8

dec_label_pc_e8bc:                                ; preds = %dec_label_pc_e8b4
  %v1_e8bc = add i32 %v0_e8c8, 11
  %v2_e8bc = inttoptr i32 %v1_e8bc to i8*
  %v3_e8bc = load i8, i8* %v2_e8bc, align 1
  %v4_e8bc = zext i8 %v3_e8bc to i32
  %v1_e8c0 = add nsw i32 %v4_e8bc, -48
  store i32 %v1_e8bc, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e8c0, 9
  br i1 %tmp, label %dec_label_pc_e8a4.loopexit, label %dec_label_pc_e8d0

dec_label_pc_e8d0:                                ; preds = %dec_label_pc_e8bc
  %v3_e8d8 = call i32 @function_12110(i32 4, i32* null)
  store i32 %v2_e5ec, i32* @r0, align 4
  %v3_e8e4 = call i32 @function_12c84(i8* %v2_e60c, i32 %v3_e8d8)
  %v2_e8ec = call i32 @function_12c5c(i8* %v2_e60c)
  %v0_e8f0 = load i32, i32* @r7, align 4
  %v0_e8f4 = load i32, i32* @sl, align 4
  %v2_e8f4 = add i32 %v0_e8f4, %v2_e8ec
  store i32 %v2_e8f4, i32* @r0, align 4
  %v2_e8f8 = inttoptr i32 %v2_e8f4 to i8*
  %v3_e8f8 = call i32 @function_12c84(i8* %v2_e8f8, i32 %v0_e8f0)
  %v2_e900 = call i32 @function_12c5c(i8* %v2_e60c)
  %v0_e904 = load i32, i32* @r5, align 4
  store i32 %v2_e900, i32* @r4, align 4
  %v2_e910 = inttoptr i32 %v0_e904 to i32*
  %v3_e910 = call i32 @function_12110(i32 5, i32* %v2_e910)
  %v0_e918 = load i32, i32* @sl, align 4
  %v1_e918 = load i32, i32* @r4, align 4
  %v2_e918 = add i32 %v1_e918, %v0_e918
  store i32 %v2_e918, i32* @r0, align 4
  %v2_e91c = inttoptr i32 %v2_e918 to i8*
  %v3_e91c = call i32 @function_12c84(i8* %v2_e91c, i32 %v3_e910)
  %v4_e92c = call i32 @function_137e4(i8* %v2_e60c, i32 %v2_e600, i32 4096)
  %v7_e930 = icmp eq i32 %v4_e92c, -1
  br i1 %v7_e930, label %dec_label_pc_e8a4.loopexit, label %dec_label_pc_e938

dec_label_pc_e938:                                ; preds = %dec_label_pc_e8d0
  %v0_e938 = load i32, i32* @r5, align 4
  %v2_e940 = inttoptr i32 %v0_e938 to i32*
  %v3_e940 = call i32 @function_12110(i32 4, i32* %v2_e940)
  store i32 %v2_e5ec, i32* @r0, align 4
  %v3_e94c = call i32 @function_12c84(i8* %v2_e60c, i32 %v3_e940)
  %v2_e954 = call i32 @function_12c5c(i8* %v2_e60c)
  %v0_e958 = load i32, i32* @r7, align 4
  %v0_e95c = load i32, i32* @sl, align 4
  %v2_e95c = add i32 %v0_e95c, %v2_e954
  store i32 %v2_e95c, i32* @r0, align 4
  %v2_e960 = inttoptr i32 %v2_e95c to i8*
  %v3_e960 = call i32 @function_12c84(i8* %v2_e960, i32 %v0_e958)
  %v2_e968 = call i32 @function_12c5c(i8* %v2_e60c)
  %v0_e96c = load i32, i32* @r5, align 4
  store i32 %v2_e968, i32* @r4, align 4
  %v2_e978 = inttoptr i32 %v0_e96c to i32*
  %v3_e978 = call i32 @function_12110(i32 6, i32* %v2_e978)
  %v0_e980 = load i32, i32* @sl, align 4
  %v1_e980 = load i32, i32* @r4, align 4
  %v2_e980 = add i32 %v1_e980, %v0_e980
  store i32 %v2_e980, i32* @r0, align 4
  %v2_e984 = inttoptr i32 %v2_e980 to i8*
  %v3_e984 = call i32 @function_12c84(i8* %v2_e984, i32 %v3_e978)
  store i32 %v2_e5ec, i32* @r0, align 4
  %v1_e98c = call i32 @function_139cc(i32 %v2_e5ec)
  store i32 %v1_e98c, i32* @sb, align 4
  %v2_e990 = icmp eq i32 %v1_e98c, 0
  br i1 %v2_e990, label %dec_label_pc_e8a4.loopexit, label %dec_label_pc_e998.preheader

dec_label_pc_e998.preheader:                      ; preds = %dec_label_pc_e938
  %v1_e99c40 = inttoptr i32 %v1_e98c to i32*
  %v2_e99c41 = call i32 @function_13ac8(i32* %v1_e99c40)
  store i32 %v2_e99c41, i32* @r6, align 4
  %v2_e9a043 = icmp eq i32 %v2_e99c41, 0
  br i1 %v2_e9a043, label %dec_label_pc_eaa0, label %dec_label_pc_e9b0thread-pre-split

dec_label_pc_e998.loopexit:                       ; preds = %dec_label_pc_e9b8, %dec_label_pc_ea50
  %v0_e998 = load i32, i32* @sb, align 4
  %v1_e99c = inttoptr i32 %v0_e998 to i32*
  %v2_e99c = call i32 @function_13ac8(i32* %v1_e99c)
  store i32 %v2_e99c, i32* @r6, align 4
  %v2_e9a0 = icmp eq i32 %v2_e99c, 0
  br i1 %v2_e9a0, label %dec_label_pc_eaa0, label %dec_label_pc_e9b0thread-pre-split

dec_label_pc_e9b0thread-pre-split:                ; preds = %dec_label_pc_e998.preheader, %dec_label_pc_e998.loopexit
  %v0_e9b0.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e9b0

dec_label_pc_e9b0:                                ; preds = %dec_label_pc_e9b0thread-pre-split, %dec_label_pc_ea78
  %v0_e9b0 = phi i32 [ %v0_e9b0.pr, %dec_label_pc_e9b0thread-pre-split ], [ 1, %dec_label_pc_ea78 ]
  %v2_e9b0 = icmp eq i32 %v0_e9b0, 0
  br i1 %v2_e9b0, label %dec_label_pc_e9b8, label %dec_label_pc_eaa0

dec_label_pc_e9b8:                                ; preds = %dec_label_pc_e9b0
  %v2_e9b8 = call i32 @function_12cfc(i32 %v2_e600, i32 4096)
  %v0_e9bc = load i32, i32* @r5, align 4
  %v2_e9c4 = inttoptr i32 %v0_e9bc to i32*
  %v3_e9c4 = call i32 @function_12110(i32 4, i32* %v2_e9c4)
  store i32 %v2_e5ec, i32* @r0, align 4
  %v3_e9d0 = call i32 @function_12c84(i8* %v2_e60c, i32 %v3_e9c4)
  %v2_e9d8 = call i32 @function_12c5c(i8* %v2_e60c)
  %v0_e9dc = load i32, i32* @r7, align 4
  %v0_e9e0 = load i32, i32* @sl, align 4
  %v2_e9e0 = add i32 %v0_e9e0, %v2_e9d8
  store i32 %v2_e9e0, i32* @r0, align 4
  %v2_e9e4 = inttoptr i32 %v2_e9e0 to i8*
  %v3_e9e4 = call i32 @function_12c84(i8* %v2_e9e4, i32 %v0_e9dc)
  %v2_e9ec = call i32 @function_12c5c(i8* %v2_e60c)
  %v0_e9f0 = load i32, i32* @r5, align 4
  store i32 %v2_e9ec, i32* @r4, align 4
  %v2_e9fc = inttoptr i32 %v0_e9f0 to i32*
  %v3_e9fc = call i32 @function_12110(i32 6, i32* %v2_e9fc)
  %v0_ea04 = load i32, i32* @sl, align 4
  %v1_ea04 = load i32, i32* @r4, align 4
  %v2_ea04 = add i32 %v1_ea04, %v0_ea04
  store i32 %v2_ea04, i32* @r0, align 4
  %v2_ea08 = inttoptr i32 %v2_ea04 to i8*
  %v3_ea08 = call i32 @function_12c84(i8* %v2_ea08, i32 %v3_e9fc)
  %v2_ea10 = call i32 @function_12c5c(i8* %v2_e60c)
  %v0_ea18 = load i32, i32* @sl, align 4
  %v2_ea18 = add i32 %v0_ea18, %v2_ea10
  store i32 %v2_ea18, i32* @r0, align 4
  %v2_ea1c = inttoptr i32 %v2_ea18 to i8*
  %v3_ea1c = call i32 @function_12c84(i8* %v2_ea1c, i32 ptrtoint (i32* @global_var_15cf8.23 to i32))
  %v2_ea24 = call i32 @function_12c5c(i8* %v2_e60c)
  %v0_ea28 = load i32, i32* @r6, align 4
  %v1_ea28 = add i32 %v0_ea28, 11
  %v0_ea2c = load i32, i32* @sl, align 4
  %v2_ea2c = add i32 %v0_ea2c, %v2_ea24
  store i32 %v2_ea2c, i32* @r0, align 4
  %v2_ea30 = inttoptr i32 %v2_ea2c to i8*
  %v3_ea30 = call i32 @function_12c84(i8* %v2_ea30, i32 %v1_ea28)
  %v4_ea40 = call i32 @function_137e4(i8* %v2_e60c, i32 %v2_e600, i32 4096)
  %v7_ea44 = icmp eq i32 %v4_ea40, -1
  br i1 %v7_ea44, label %dec_label_pc_e998.loopexit, label %dec_label_pc_ea50

dec_label_pc_ea50:                                ; preds = %dec_label_pc_e9b8
  %v2_ea50 = call i32 @function_12c5c(i8* %v2_e624)
  store i32 %v2_ea50, i32* @r1, align 4
  %v4_ea64 = call i32 @function_12fb0(i8* %v2_e624, i32 %v2_ea50, i32 %v2_e874.pre-phi)
  %v7_ea68 = icmp eq i32 %v4_ea64, -1
  br i1 %v7_ea68, label %dec_label_pc_e998.loopexit, label %dec_label_pc_ea78

dec_label_pc_ea78:                                ; preds = %dec_label_pc_ea50
  %v0_ea70 = load i32, i32* @r7, align 4
  %v2_ea78 = inttoptr i32 %v0_ea70 to i8*
  %v3_ea78 = call i32 @function_12d88(i8* %v2_ea78, i32 10)
  %v2_ea80 = call i32 @function_136f0(i32 %v3_ea78, i32 9)
  %v0_ea84 = load i32, i32* @sb, align 4
  %v1_ea88 = inttoptr i32 %v0_ea84 to i32*
  %v2_ea88 = call i32 @function_13ac8(i32* %v1_ea88)
  store i32 %v2_ea88, i32* @r6, align 4
  %v2_ea8c = icmp eq i32 %v2_ea88, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_ea8c, label %dec_label_pc_eaa0, label %dec_label_pc_e9b0

dec_label_pc_eaa0:                                ; preds = %dec_label_pc_e998.loopexit, %dec_label_pc_ea78, %dec_label_pc_e9b0, %dec_label_pc_e998.preheader
  %v0_eaa0 = load i32, i32* @sb, align 4
  %v1_eaa4 = inttoptr i32 %v0_eaa0 to i32*
  %v2_eaa4 = call i32 @function_13918(i32* %v1_eaa4)
  %v0_eaa8 = load i32, i32* @r8, align 4
  %v1_eaac = inttoptr i32 %v0_eaa8 to i32*
  %v2_eaac = call i32 @function_13ac8(i32* %v1_eaac)
  %v2_eab0 = icmp eq i32 %v2_eaac, 0
  br i1 %v2_eab0, label %dec_label_pc_eab8, label %dec_label_pc_e8b4

dec_label_pc_eab8:                                ; preds = %dec_label_pc_e8a4.loopexit, %dec_label_pc_eaa0, %dec_label_pc_e8b4, %dec_label_pc_e8a4.preheader
  %v0_eab8 = load i32, i32* @r8, align 4
  %v1_eabc = inttoptr i32 %v0_eab8 to i32*
  %v2_eabc = call i32 @function_13918(i32* %v1_eabc)
  %v0_eac0 = load i32, i32* @r5, align 4
  %v1_eac0 = urem i32 %v0_eac0, 256
  br label %dec_label_pc_eac4

dec_label_pc_eac4:                                ; preds = %dec_label_pc_e884, %dec_label_pc_eab8
  %storemerge = phi i32 [ %v1_eac0, %dec_label_pc_eab8 ], [ 0, %dec_label_pc_e884 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_eac8 = call i32 @function_1484c(i32 1)
  br label %dec_label_pc_eacc

dec_label_pc_eacc:                                ; preds = %dec_label_pc_e868, %dec_label_pc_eac4
  %v1_ead0 = call i32 @function_1213c(i32 4)
  %v1_ead8 = call i32 @function_1213c(i32 5)
  %v1_eae0 = call i32 @function_1213c(i32 6)
  %v1_eae8 = call i32 @function_1213c(i32 7)
  br label %dec_label_pc_eaec

dec_label_pc_eaec:                                ; preds = %dec_label_pc_e688, %dec_label_pc_eacc
  %v0_eaec = load i32, i32* @r4, align 4
  %v2_eaf8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eaf8, i32* @r4, align 4
  store i32 %v6_e5d8, i32* @r5, align 4
  store i32 %v9_e5d8, i32* @r6, align 4
  store i32 %v12_e5d8, i32* @r7, align 4
  store i32 %v15_e5d8, i32* @r8, align 4
  store i32 %v18_e5d8, i32* @sb, align 4
  store i32 %v21_e5d8, i32* @sl, align 4
  store i32 %v24_e5d8, i32* @fp, align 4
  ret i32 %v0_eaec

dec_label_pc_eafc:                                ; preds = %dec_label_pc_e7d8
  %v1_eafc = add i32 %v0_eafc, 1
  store i32 %v1_eafc, i32* @lr, align 4
  %v7_eb00 = icmp eq i32 %v0_eafc, 0
  br i1 %v7_eb00, label %dec_label_pc_eb08, label %dec_label_pc_e7e0

dec_label_pc_eb08:                                ; preds = %dec_label_pc_eafc
  %v1_eb08 = add i32 %v0_e7e8, 3
  %v2_eb08 = inttoptr i32 %v1_eb08 to i8*
  %v3_eb08 = load i8, i8* %v2_eb08, align 1
  %v7_eb0c = icmp eq i8 %v3_eb08, 65
  br i1 %v7_eb0c, label %dec_label_pc_eb1c, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_eb08
  br label %dec_label_pc_e7b0.backedge

dec_label_pc_eb1c:                                ; preds = %dec_label_pc_eb08
  store i32 %v1_eafc, i32* @r4, align 4
  br label %dec_label_pc_e7b0.backedge

dec_label_pc_e7b0.backedge:                       ; preds = %.thread33, %dec_label_pc_eb1c, %dec_label_pc_e7e4
  %v0_e7f085 = phi i32 [ %v1_eafc, %dec_label_pc_eb1c ], [ %v0_e7f086, %dec_label_pc_e7e4 ], [ %v0_e7f086, %.thread33 ]
  %v0_eafc74 = phi i32 [ %v1_eafc, %dec_label_pc_eb1c ], [ %v0_e7e4, %dec_label_pc_e7e4 ], [ %v1_eafc, %.thread33 ]
  %v0_e7d8.pr71 = phi i32 [ 0, %dec_label_pc_eb1c ], [ %v0_e7d8.pr72, %dec_label_pc_e7e4 ], [ 0, %.thread33 ]
  %v0_e7b0 = add i32 %v0_e7e8, 1
  %v1_e7b0 = add i32 %v0_e7e8, 3
  %v2_e7b0 = inttoptr i32 %v1_e7b0 to i8*
  %v3_e7b0 = load i8, i8* %v2_e7b0, align 1
  %v2_e7b4 = icmp eq i8 %v3_e7b0, 0
  %v1_e7b8 = add i32 %v0_e7b882, 1
  br i1 %v2_e7b4, label %dec_label_pc_e7f0, label %dec_label_pc_e7c0

dec_label_pc_eb2c:                                ; preds = %dec_label_pc_e5d8
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_e688

; uselistorder directives
  uselistorder i32 %v1_e7b8, { 1, 0 }
  uselistorder i8 %v3_e7b0, { 1, 0 }
  uselistorder i32 %v0_e7f085, { 1, 0 }
  uselistorder i32 %v1_eafc, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_eaac, { 1, 0 }
  uselistorder i32 %v1_e81c, { 1, 0 }
  uselistorder i32 %v0_e82828, { 1, 0 }
  uselistorder i32 %v1_e840, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e7e4, { 1, 0 }
  uselistorder i32 %v0_e7b882, { 1, 0 }
  uselistorder i32 %v0_eafc, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e7f086, { 1, 2, 0 }
  uselistorder i32 %v1_e7b856, { 1, 0 }
  uselistorder i32 %v2_e79c, { 1, 0 }
  uselistorder i32 %v1_e798, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_e75413, { 1, 0, 2 }
  uselistorder i32 %v0_e744, { 1, 0 }
  uselistorder i32 %v1_e724, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_e6b8, { 1, 2, 0 }
  uselistorder i32 %v2_e600, { 1, 0, 2 }
  uselistorder i32 %v2_e5ec, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_12eb4, { 1, 0 }
  uselistorder label %dec_label_pc_e7b0.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eaec, { 1, 0 }
  uselistorder label %dec_label_pc_eacc, { 1, 0 }
  uselistorder label %dec_label_pc_eac4, { 1, 0 }
  uselistorder label %dec_label_pc_eab8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_eaa0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e9b0, { 1, 0 }
  uselistorder label %dec_label_pc_e9b0thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e998.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e8b4, { 1, 0 }
  uselistorder label %dec_label_pc_e8b4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e8a4.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e83c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e7e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e7c0, { 1, 0 }
  uselistorder label %dec_label_pc_e764, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e6c8.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e718, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e6e0, { 1, 0 }
  uselistorder label %dec_label_pc_e688, { 1, 0 }
}

define i32 @function_eb58(i32 %arg1) local_unnamed_addr {
dec_label_pc_eb58:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-628 = alloca i32, align 4
  %stack_var_-116 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %v3_eb58 = load i32, i32* @r4, align 4
  %v6_eb58 = load i32, i32* @r5, align 4
  %v9_eb58 = load i32, i32* @r6, align 4
  %v12_eb58 = load i32, i32* @r7, align 4
  %v15_eb58 = load i32, i32* @r8, align 4
  %v18_eb58 = load i32, i32* @sb, align 4
  %v21_eb58 = load i32, i32* @sl, align 4
  %v24_eb58 = load i32, i32* @fp, align 4
  %v2_eb64 = call i32 @function_138c0(i32* null)
  store i32 %v2_eb64, i32* @r6, align 4
  %v0_eb6c = call i32 @function_1361c()
  %v7_eb70 = icmp eq i32 %v0_eb6c, -1
  %. = zext i1 %v7_eb70 to i32
  %tmp56 = icmp slt i32 %v0_eb6c, 1
  %storemerge37 = select i1 %tmp56, i32 %., i32 1
  store i32 %storemerge37, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f19c.95 to i32), i32* %r3.global-to-local, align 4
  %v2_eb8c = icmp eq i32 %storemerge37, 0
  store i32 %v0_eb6c, i32* @global_var_1f19c.95, align 4
  br i1 %v2_eb8c, label %dec_label_pc_eba0, label %dec_label_pc_eb98

dec_label_pc_eb98:                                ; preds = %dec_label_pc_ebfc, %dec_label_pc_eb58
  %v29_eb9c = phi i32 [ %v0_eb6c, %dec_label_pc_eb58 ], [ 0, %dec_label_pc_ebfc ]
  store i32 %v3_eb58, i32* @r4, align 4
  store i32 %v6_eb58, i32* @r5, align 4
  store i32 %v9_eb58, i32* @r6, align 4
  store i32 %v12_eb58, i32* @r7, align 4
  store i32 %v15_eb58, i32* @r8, align 4
  store i32 %v18_eb58, i32* @sb, align 4
  store i32 %v21_eb58, i32* @sl, align 4
  store i32 %v24_eb58, i32* @fp, align 4
  ret i32 %v29_eb9c

dec_label_pc_eba0:                                ; preds = %dec_label_pc_eb58
  store i32 2, i32* @r5, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v1_ebb4 = call i32 @function_e5d8(i32 20736)
  %v2_ebb8 = icmp eq i32 %v1_ebb4, 0
  br i1 %v2_ebb8, label %dec_label_pc_ebc0, label %dec_label_pc_ee14

dec_label_pc_ebc0:                                ; preds = %dec_label_pc_eba0, %dec_label_pc_ee14, %dec_label_pc_ee3c
  %v1_ebc4 = call i32 @function_1484c(i32 5)
  %v1_ebcc = call i32 @function_14074(i32 4096)
  %v2_ebcc = inttoptr i32 %v1_ebcc to i8*
  store i32 %v1_ebcc, i32* @global_var_1f23c.99, align 4
  store i32 ptrtoint (i32* @global_var_1f1a0.101 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i8 0, i8* %v2_ebcc, align 1
  %v0_ebe4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ebe4 = load i32, i32* %r3.global-to-local, align 4
  %v2_ebe4 = inttoptr i32 %v1_ebe4 to i32*
  store i32 %v0_ebe4, i32* %v2_ebe4, align 4
  %v0_ebe8 = load i32, i32* @r6, align 4
  store i32 %v0_ebe8, i32* @r5, align 4
  %v0_ebec = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ebec, i32* @sb, align 4
  store i32 400, i32* @r6, align 4
  %v2_ebf4 = ptrtoint i32* %stack_var_-116 to i32
  store i32 %v2_ebf4, i32* @fp, align 4
  %v2_ebf8 = ptrtoint i32* %stack_var_-628 to i32
  store i32 %v2_ebf8, i32* @r8, align 4
  %v2_ecec = bitcast i32* %stack_var_-116 to i8*
  br label %dec_label_pc_ebfc

dec_label_pc_ebfc:                                ; preds = %dec_label_pc_ecb0, %dec_label_pc_ebc0
  %v1_ec00 = call i32 @function_121f4(i32 4)
  %v3_ec0c = call i32 @function_12110(i32 4, i32* null)
  store i32 %v3_ec0c, i32* @r0, align 4
  %v1_ec10 = call i32 @function_139cc(i32 %v3_ec0c)
  store i32 %v1_ec10, i32* @sl, align 4
  %v2_ec14 = icmp eq i32 %v1_ec10, 0
  br i1 %v2_ec14, label %dec_label_pc_eb98, label %dec_label_pc_ec1c

dec_label_pc_ec1c:                                ; preds = %dec_label_pc_ebfc
  %v1_ec20 = call i32 @function_1213c(i32 4)
  %v0_ec2420 = load i32, i32* @sl, align 4
  %v1_ec2821 = inttoptr i32 %v0_ec2420 to i32*
  %v2_ec2822 = call i32 @function_13ac8(i32* %v1_ec2821)
  %v2_ec2c24 = icmp eq i32 %v2_ec2822, 0
  br i1 %v2_ec2c24, label %dec_label_pc_ecb0, label %dec_label_pc_ec34.preheader

dec_label_pc_ec34.preheader:                      ; preds = %dec_label_pc_ec1c, %dec_label_pc_ec24.backedge
  %v0_ec3429 = phi i32 [ %v2_ec28, %dec_label_pc_ec24.backedge ], [ %v2_ec2822, %dec_label_pc_ec1c ]
  br label %dec_label_pc_ec34

dec_label_pc_ec34:                                ; preds = %dec_label_pc_ec34.preheader, %dec_label_pc_ec98
  %v0_ec44 = phi i32 [ %v0_ec3429, %dec_label_pc_ec34.preheader ], [ %v2_eca4, %dec_label_pc_ec98 ]
  %v1_ec34 = add i32 %v0_ec44, 11
  %v2_ec34 = inttoptr i32 %v1_ec34 to i8*
  %v3_ec34 = load i8, i8* %v2_ec34, align 1
  %v4_ec34 = zext i8 %v3_ec34 to i32
  %v1_ec38 = add nsw i32 %v4_ec34, -48
  store i32 %v1_ec38, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_ec38, 9
  br i1 %tmp, label %dec_label_pc_ec24.backedge, label %dec_label_pc_ec44

dec_label_pc_ec44:                                ; preds = %dec_label_pc_ec34
  store i32 %v1_ec34, i32* @r4, align 4
  %v3_ec50 = call i32 @function_12d88(i8* %v2_ec34, i32 10)
  %v0_ec54 = load i32, i32* @r6, align 4
  store i32 %v3_ec50, i32* @r7, align 4
  %v0_ec5c = load i32, i32* @sb, align 4
  %v1_ec5c = add i32 %v0_ec5c, 1
  store i32 %v1_ec5c, i32* @sb, align 4
  %v5_ec60 = icmp slt i32 %v0_ec54, %v3_ec50
  %v2_ecc0 = call i32 @function_138c0(i32* null)
  br i1 %v5_ec60, label %dec_label_pc_ecbc, label %dec_label_pc_ec64

dec_label_pc_ec64:                                ; preds = %dec_label_pc_ec44
  %v0_ec6c = load i32, i32* @r5, align 4
  %v2_ec6c = sub i32 %v2_ecc0, %v0_ec6c
  %v7_ec74 = icmp slt i32 %v2_ec6c, 601
  br i1 %v7_ec74, label %dec_label_pc_ec7c, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_ec64
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_ec24.backedge

dec_label_pc_ec7c:                                ; preds = %dec_label_pc_ec64
  %v0_ec7c = load i32, i32* @r7, align 4
  %v7_ec80 = icmp slt i32 %v0_ec7c, 401
  br i1 %v7_ec80, label %dec_label_pc_ec24.backedge, label %dec_label_pc_ec84

dec_label_pc_ec84:                                ; preds = %dec_label_pc_ec7c
  %v0_ec84 = load i32, i32* @sb, align 4
  %v2_ec8c = call i32 @function_13378(i32 %v0_ec84, i32 10)
  %v2_ec90 = icmp eq i32 %v2_ec8c, 0
  br i1 %v2_ec90, label %dec_label_pc_ec98, label %dec_label_pc_ec24.backedge

dec_label_pc_ec98:                                ; preds = %dec_label_pc_ec84
  %v1_ec9c = call i32 @function_1484c(i32 1)
  %v0_eca0 = load i32, i32* @sl, align 4
  %v1_eca4 = inttoptr i32 %v0_eca0 to i32*
  %v2_eca4 = call i32 @function_13ac8(i32* %v1_eca4)
  %v2_eca8 = icmp eq i32 %v2_eca4, 0
  br i1 %v2_eca8, label %dec_label_pc_ecb0, label %dec_label_pc_ec34

dec_label_pc_ecb0:                                ; preds = %dec_label_pc_ec24.backedge, %dec_label_pc_ec98, %dec_label_pc_ec1c
  %v0_ecb0 = load i32, i32* @sl, align 4
  %v1_ecb4 = inttoptr i32 %v0_ecb0 to i32*
  %v2_ecb4 = call i32 @function_13918(i32* %v1_ecb4)
  br label %dec_label_pc_ebfc

dec_label_pc_ecbc:                                ; preds = %dec_label_pc_ec44
  store i32 %v2_ecc0, i32* %stack_var_-632, align 4
  %v1_eccc = call i32 @function_121f4(i32 4)
  %v1_ecd4 = call i32 @function_121f4(i32 8)
  %v3_ece0 = call i32 @function_12110(i32 4, i32* null)
  store i32 %v2_ebf4, i32* @r0, align 4
  %v3_ecec = call i32 @function_12c84(i8* %v2_ecec, i32 %v3_ece0)
  %v0_ecf0 = load i32, i32* @fp, align 4
  %v2_ecf0 = add i32 %v0_ecf0, %v3_ecec
  store i32 %v2_ecf0, i32* @r5, align 4
  %v0_ecf4 = load i32, i32* @r4, align 4
  store i32 %v2_ecf0, i32* @r0, align 4
  %v2_ecfc = inttoptr i32 %v2_ecf0 to i8*
  %v3_ecfc = call i32 @function_12c84(i8* %v2_ecfc, i32 %v0_ecf4)
  store i32 %v3_ecfc, i32* @r4, align 4
  %v3_ed0c = call i32 @function_12110(i32 8, i32* null)
  %v0_ed14 = load i32, i32* @r5, align 4
  %v1_ed14 = load i32, i32* @r4, align 4
  %v2_ed14 = add i32 %v1_ed14, %v0_ed14
  store i32 %v2_ed14, i32* @r0, align 4
  %v2_ed18 = inttoptr i32 %v2_ed14 to i8*
  %v3_ed18 = call i32 @function_12c84(i8* %v2_ed18, i32 %v3_ed0c)
  %v1_ed20 = call i32 @function_1213c(i32 4)
  %v1_ed28 = call i32 @function_1213c(i32 8)
  %v3_ed34 = call i32 @function_1371c(i8* %v2_ecec, i32 0)
  %v7_ed38 = icmp eq i32 %v3_ed34, -1
  store i32 %v3_ed34, i32* @r6, align 4
  br i1 %v7_ed38, label %dec_label_pc_ede0, label %dec_label_pc_ed44

dec_label_pc_ed44:                                ; preds = %dec_label_pc_ecbc
  %v1_ed48 = call i32 @function_121f4(i32 58)
  br label %dec_label_pc_ed4c

dec_label_pc_ed4c:                                ; preds = %dec_label_pc_edb4, %.thread6, %dec_label_pc_ed64, %dec_label_pc_ed44
  %v0_ed4c = load i32, i32* @r6, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v4_ed58 = call i32 @function_137b8(i32 %v0_ed4c, i32* nonnull %stack_var_-628, i32 512)
  store i32 %v4_ed58, i32* @r4, align 4
  %tmp59 = icmp slt i32 %v4_ed58, 1
  br i1 %tmp59, label %dec_label_pc_ee00, label %dec_label_pc_ed64

dec_label_pc_ed64:                                ; preds = %dec_label_pc_ed4c
  %v3_ed6c = call i32 @function_12110(i32 58, i32* null)
  store i32 %v3_ed6c, i32* @r5, align 4
  %v3_ed7c = call i32 @function_12110(i32 58, i32* null)
  %v1_ed80 = inttoptr i32 %v3_ed7c to i8*
  %v2_ed80 = call i32 @function_12c5c(i8* %v1_ed80)
  %v0_ed84 = load i32, i32* @r4, align 4
  %v5_ed88 = icmp slt i32 %v0_ed84, %v2_ed80
  br i1 %v5_ed88, label %dec_label_pc_ed4c, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_ed64
  %v1_ed9412 = add i32 %v0_ed84, -1
  store i32 %v1_ed9412, i32* @r4, align 4
  %v2_ed9413 = icmp eq i32 %v0_ed84, 0
  br i1 %v2_ed9413, label %dec_label_pc_ed4c, label %dec_label_pc_ed9c.lr.ph

dec_label_pc_ed9c.lr.ph:                          ; preds = %.thread6
  %v0_ed9c.pre = load i32, i32* @r5, align 4
  %v1_eda0.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_ed9c

dec_label_pc_ed9c:                                ; preds = %dec_label_pc_edb4, %dec_label_pc_ed9c.lr.ph
  %v0_ed94 = phi i32 [ %v1_ed9412, %dec_label_pc_ed9c.lr.ph ], [ %v1_ed94, %dec_label_pc_edb4 ]
  %v0_edb4 = phi i32 [ 0, %dec_label_pc_ed9c.lr.ph ], [ %v1_edb4, %dec_label_pc_edb4 ]
  %v0_eda8 = phi i32 [ 0, %dec_label_pc_ed9c.lr.ph ], [ %v1_eda8., %dec_label_pc_edb4 ]
  %v2_ed9c = add i32 %v0_eda8, %v0_ed9c.pre
  %v3_ed9c = inttoptr i32 %v2_ed9c to i8*
  %v4_ed9c = load i8, i8* %v3_ed9c, align 1
  %v6_ed9c = zext i8 %v4_ed9c to i32
  store i32 %v6_ed9c, i32* %r2.global-to-local, align 4
  %v2_eda0 = add i32 %v0_edb4, %v1_eda0.pre
  %v3_eda0 = inttoptr i32 %v2_eda0 to i8*
  %v4_eda0 = load i8, i8* %v3_eda0, align 1
  %v6_eda0 = zext i8 %v4_eda0 to i32
  store i32 %v6_eda0, i32* %r3.global-to-local, align 4
  %v9_eda4 = icmp eq i8 %v4_eda0, %v4_ed9c
  %v1_eda8 = add i32 %v0_eda8, 1
  %v1_eda8. = select i1 %v9_eda4, i32 %v1_eda8, i32 0
  br i1 %v9_eda4, label %dec_label_pc_edbc, label %dec_label_pc_edb4

dec_label_pc_edb4:                                ; preds = %dec_label_pc_edbc, %dec_label_pc_ed9c
  %v1_edb4 = add i32 %v0_edb4, 1
  %v1_ed94 = add i32 %v0_ed94, -1
  store i32 %v1_ed94, i32* @r4, align 4
  %v2_ed94 = icmp eq i32 %v0_ed94, 0
  br i1 %v2_ed94, label %dec_label_pc_ed4c, label %dec_label_pc_ed9c

dec_label_pc_edbc:                                ; preds = %dec_label_pc_ed9c
  %v9_edbc = icmp eq i32 %v2_ed80, %v1_eda8.
  br i1 %v9_edbc, label %dec_label_pc_edc4, label %dec_label_pc_edb4

dec_label_pc_edc4:                                ; preds = %dec_label_pc_edbc
  %v1_edc8 = call i32 @function_1213c(i32 58)
  %v0_edcc = load i32, i32* @r6, align 4
  %v1_edd0 = call i32 @function_135f0(i32 %v0_edcc)
  %v0_edd4 = load i32, i32* @r7, align 4
  %v2_eddc = call i32 @function_136f0(i32 %v0_edd4, i32 9)
  br label %dec_label_pc_ede0

dec_label_pc_ede0:                                ; preds = %dec_label_pc_ecbc, %dec_label_pc_ee00, %dec_label_pc_edc4
  %v2_ede8 = call i32 @function_12cfc(i32 %v2_ebf4, i32 64)
  %v1_edf0 = call i32 @function_1484c(i32 1)
  %v2_edf4 = load i32, i32* %stack_var_-632, align 4
  store i32 %v2_edf4, i32* @r5, align 4
  %v0_edf8 = load i32, i32* @r7, align 4
  store i32 %v0_edf8, i32* @r6, align 4
  br label %dec_label_pc_ec24.backedge

dec_label_pc_ec24.backedge:                       ; preds = %dec_label_pc_ec84, %dec_label_pc_ec7c, %dec_label_pc_ec34, %dec_label_pc_ede0, %.thread1
  %v0_ec24 = load i32, i32* @sl, align 4
  %v1_ec28 = inttoptr i32 %v0_ec24 to i32*
  %v2_ec28 = call i32 @function_13ac8(i32* %v1_ec28)
  %v2_ec2c = icmp eq i32 %v2_ec28, 0
  br i1 %v2_ec2c, label %dec_label_pc_ecb0, label %dec_label_pc_ec34.preheader

dec_label_pc_ee00:                                ; preds = %dec_label_pc_ed4c
  %v1_ee04 = call i32 @function_1213c(i32 58)
  %v0_ee08 = load i32, i32* @r6, align 4
  %v1_ee0c = call i32 @function_135f0(i32 %v0_ee08)
  br label %dec_label_pc_ede0

dec_label_pc_ee14:                                ; preds = %dec_label_pc_eba0
  %v0_ee14 = load i32, i32* @r4, align 4
  store i32 %v0_ee14, i32* %r2.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_ee1c = load i32, i32* @r5, align 4
  %v3_ee2c = call i32 @function_13edc(i32 %v0_ee1c, i32 1, i32 %v0_ee14)
  %v7_ee30 = icmp eq i32 %v3_ee2c, -1
  store i32 %v3_ee2c, i32* @r4, align 4
  br i1 %v7_ee30, label %dec_label_pc_ebc0, label %dec_label_pc_ee3c

dec_label_pc_ee3c:                                ; preds = %dec_label_pc_ee14
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_ee44 = bitcast i32* %stack_var_-52 to %sockaddr*
  %v4_ee44 = call i32 @function_13d0c(i32 %v3_ee2c, %sockaddr* %v3_ee44, i32 16)
  %v0_ee48 = load i32, i32* @r4, align 4
  %v2_ee50 = call i32 @function_13dc0(i32 %v0_ee48, i32 1)
  br label %dec_label_pc_ebc0

; uselistorder directives
  uselistorder i32 %v3_ee2c, { 1, 2, 0 }
  uselistorder i32 %v2_ec28, { 1, 0 }
  uselistorder i32 %v1_ed94, { 1, 0 }
  uselistorder i32 %v1_eda8., { 1, 0 }
  uselistorder i1 %v9_eda4, { 1, 0 }
  uselistorder i32 %v0_eda8, { 1, 0 }
  uselistorder i32 %v0_edb4, { 1, 0 }
  uselistorder i32 %v0_ed94, { 1, 0 }
  uselistorder i32 %v0_ed84, { 1, 0, 2 }
  uselistorder i32 %v2_ed80, { 1, 0 }
  uselistorder i32 %v3_ed34, { 1, 0 }
  uselistorder i32 %v2_eca4, { 1, 0 }
  uselistorder i32 %storemerge37, { 1, 0 }
  uselistorder i32 %v0_eb6c, { 1, 2, 3, 0 }
  uselistorder i32 (i8*, i32)* @function_12d88, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32*)* @function_13ac8, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_139cc, { 2, 1, 0 }
  uselistorder i32* @global_var_1f19c.95, { 0, 2, 1 }
  uselistorder label %dec_label_pc_ec24.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_ede0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ec34, { 1, 0 }
  uselistorder label %dec_label_pc_ec34.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_ebc0, { 2, 1, 0 }
}

define i32 @function_ee64(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ee64:
  store i32 ptrtoint (i32* @global_var_ee7c.103 to i32), i32* @global_var_1f028.105, align 4
  ret i32 %arg1
}

define i32 @function_ee7c() local_unnamed_addr {
dec_label_pc_ee7c:
  %stack_var_0 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ee7c = load i32, i32* @r4, align 4
  store i32 %v3_ee7c, i32* %stack_var_-8, align 4
  %v1_ee84 = call i32 @function_121f4(i32 1)
  store i32 2032805430, i32* @global_var_1f244.109, align 4
  %v3_ee9c = call i32 @function_12110(i32 1, i32* null)
  %v4_ee9c = inttoptr i32 %v3_ee9c to i8*
  %v2_eea0 = add i32 %v3_ee9c, 1
  %v3_eea0 = inttoptr i32 %v2_eea0 to i8*
  %v4_eea0 = load i8, i8* %v3_eea0, align 1
  %v3_eea4 = load i8, i8* %v4_ee9c, align 1
  store i8 %v4_eea0, i8* bitcast (i32* @global_var_1f243.110 to i8*), align 4
  store i8 %v3_eea4, i8* bitcast (i32* @global_var_1f242.111 to i8*), align 4
  %v2_eebc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_eebc, i32* @r4, align 4
  %v7_eebc = ptrtoint i32* %stack_var_0 to i32
  %v1_eec0 = call i32 @function_1213c(i32 1)
  %v0_eec4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_eec4, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_ee7c
  %v1_eec4 = load i32, i32* @r1, align 4
  %v5_eec4 = sdiv i32 %v1_eec0, 16
  %v6_eec4 = and i32 %v1_eec4, %v5_eec4
  call void @__pseudo_branch(i32 %v6_eec4)
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_ee7c, %bb
  %v0_eec8 = load i1, i1* @cpsr_v, align 1
  br i1 %v0_eec8, label %bb5, label %bb4

bb4:                                              ; preds = %bb3
  %v1_eec8 = load i32, i32* @sl, align 4
  %v2_eec8 = add i32 %v1_eec8, -28
  %v3_eec8 = inttoptr i32 %v2_eec8 to i32*
  %v4_eec8 = load i32, i32* @r1, align 4
  store i32 %v4_eec8, i32* %v3_eec8, align 4
  %v5_eec8 = add i32 %v1_eec8, -24
  %v6_eec8 = inttoptr i32 %v5_eec8 to i32*
  %v7_eec8 = load i32, i32* @r2, align 4
  store i32 %v7_eec8, i32* %v6_eec8, align 4
  %v8_eec8 = add i32 %v1_eec8, -20
  %v9_eec8 = inttoptr i32 %v8_eec8 to i32*
  %v10_eec8 = load i32, i32* @r4, align 4
  store i32 %v10_eec8, i32* %v9_eec8, align 4
  %v11_eec8 = add i32 %v1_eec8, -16
  %v12_eec8 = inttoptr i32 %v11_eec8 to i32*
  %v13_eec8 = load i32, i32* @r5, align 4
  store i32 %v13_eec8, i32* %v12_eec8, align 4
  %v14_eec8 = add i32 %v1_eec8, -12
  %v15_eec8 = inttoptr i32 %v14_eec8 to i32*
  %v16_eec8 = load i32, i32* @sb, align 4
  store i32 %v16_eec8, i32* %v15_eec8, align 4
  %v17_eec8 = add i32 %v1_eec8, -8
  %v18_eec8 = inttoptr i32 %v17_eec8 to i32*
  %v19_eec8 = load i32, i32* @sl, align 4
  store i32 %v19_eec8, i32* %v18_eec8, align 4
  %v20_eec8 = add i32 %v1_eec8, -4
  %v21_eec8 = inttoptr i32 %v20_eec8 to i32*
  store i32 %v7_eebc, i32* %v21_eec8, align 4
  br label %bb5

bb5:                                              ; preds = %bb3, %bb4
  ret i32 %v1_eec0

; uselistorder directives
  uselistorder i32 %v1_eec0, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_eecc(i32 %arg1) local_unnamed_addr {
dec_label_pc_eecc:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_eecc = load i32, i32* @r4, align 4
  %v9_eecc = load i32, i32* @r6, align 4
  %v12_eecc = load i32, i32* @r7, align 4
  %v15_eecc = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_eee8 = call i32 @function_13edc(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1f020.113 to i32), i32* @r6, align 4
  %v7_eef0 = icmp eq i32 %v3_eee8, -1
  store i32 %v3_eee8, i32* @global_var_1f020.113, align 4
  br i1 %v7_eef0, label %dec_label_pc_efb0, label %dec_label_pc_eefc

dec_label_pc_eefc:                                ; preds = %dec_label_pc_eecc
  %v0_ef00 = load i32, i32* @r4, align 4
  %v6_ef10 = call i32 @function_13eac(i32 %v3_eee8, i32 %v0_ef00, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_ef14 = load i32, i32* @global_var_1f020.113, align 4
  store i32 %v2_ef14, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_ef24 = call i32 @function_1352c(i32 %v2_ef14, i32 3)
  %v1_ef2c = or i32 %v2_ef24, 2048
  store i32 %v1_ef2c, i32* @r2, align 4
  %v0_ef30 = load i32, i32* @r4, align 4
  %v2_ef34 = call i32 @function_1352c(i32 %v0_ef30, i32 4)
  store i32 ptrtoint (i8** @global_var_1f02c.115 to i32), i32* @r8, align 4
  %v2_ef3c = load i8, i8* bitcast (i8** @global_var_1f02c.115 to i8*), align 4
  %v2_ef40 = icmp eq i8 %v2_ef3c, 0
  br i1 %v2_ef40, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_eefc
  br label %bb

.thread:                                          ; preds = %dec_label_pc_eefc
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_ef78 = call i32 @function_13b98()
  %v0_ef7c = load i32, i32* @r5, align 4
  %v2_ef7c = inttoptr i32 %v0_ef78 to i32*
  store i32 %v0_ef7c, i32* %v2_ef7c, align 4
  %v2_ef80 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_ef80, i32* @r7, align 4
  store i32 %v0_ef78, i32* @r4, align 4
  %v2_ef8c = load i32, i32* @global_var_1f020.113, align 4
  %v3_ef94 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_ef94 = call i32 @function_13d0c(i32 %v2_ef8c, %sockaddr* %v3_ef94, i32 16)
  %v7_ef98 = icmp eq i32 %v4_ef94, -1
  br i1 %v7_ef98, label %dec_label_pc_efb8, label %dec_label_pc_efa0

dec_label_pc_efa0:                                ; preds = %bb
  %v2_efa8 = load i32, i32* @global_var_1f020.113, align 4
  %v2_efac = call i32 @function_13dc0(i32 %v2_efa8, i32 1)
  br label %dec_label_pc_efb0

dec_label_pc_efb0:                                ; preds = %dec_label_pc_eecc, %dec_label_pc_efc4, %dec_label_pc_efa0
  %v20_efb4 = phi i32 [ %v3_eee8, %dec_label_pc_eecc ], [ %v1_f014, %dec_label_pc_efc4 ], [ %v2_efac, %dec_label_pc_efa0 ]
  store i32 %v3_eecc, i32* @r4, align 4
  store i32 %v9_eecc, i32* @r6, align 4
  store i32 %v12_eecc, i32* @r7, align 4
  store i32 %v15_eecc, i32* @r8, align 4
  ret i32 %v20_efb4

dec_label_pc_efb8:                                ; preds = %bb
  %v0_efb8 = load i32, i32* @r4, align 4
  %v1_efb8 = inttoptr i32 %v0_efb8 to i32*
  %v2_efb8 = load i32, i32* %v1_efb8, align 4
  %v7_efbc = icmp eq i32 %v2_efb8, 99
  br i1 %v7_efbc, label %dec_label_pc_f01c, label %dec_label_pc_efc4

dec_label_pc_efc4:                                ; preds = %dec_label_pc_f01c, %bb21, %dec_label_pc_efb8
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_efdc = load i32, i32* @global_var_1f020.113, align 4
  %v4_eff4 = call i32 @function_13d38(i32 %v2_efdc, %sockaddr* %v3_ef94, i32 16)
  %v1_effc = call i32 @function_1484c(i32 5)
  %v2_f000 = load i32, i32* @global_var_1f020.113, align 4
  %v1_f004 = call i32 @function_135f0(i32 %v2_f000)
  %v1_f010 = call i32 @function_e5d8(i32 50951)
  %v1_f014 = call i32 @function_eecc(i32 %v1_f010)
  br label %dec_label_pc_efb0

dec_label_pc_f01c:                                ; preds = %dec_label_pc_efb8
  %v2_f01c = load i8, i8* bitcast (i8** @global_var_1f02c.115 to i8*), align 4
  %v3_f01c = zext i8 %v2_f01c to i32
  %v1_f020 = load i32, i32* @r5, align 4
  %v9_f020 = icmp eq i32 %v3_f01c, %v1_f020
  br i1 %v9_f020, label %dec_label_pc_efc4, label %bb21

bb21:                                             ; preds = %dec_label_pc_f01c
  %v2_f028 = trunc i32 %v1_f020 to i8
  store i8 %v2_f028, i8* bitcast (i8** @global_var_1f02c.115 to i8*), align 4
  br label %dec_label_pc_efc4

; uselistorder directives
  uselistorder i32 %v3_eee8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_e5d8, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_13dc0, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1f02c.115 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1f02c.115, { 1, 0 }
  uselistorder label %dec_label_pc_efc4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_efb0, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_f03c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f03c:
  %stack_var_-16 = alloca i32, align 4
  %v3_f03c = load i32, i32* @r4, align 4
  %v6_f03c = load i32, i32* @r5, align 4
  %v2_f040 = ptrtoint i32* %stack_var_-16 to i32
  %v0_f044 = call i32 @function_1361c()
  %v7_f048 = icmp eq i32 %v0_f044, -1
  %. = zext i1 %v7_f048 to i32
  %tmp10 = icmp slt i32 %v0_f044, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_f064 = icmp eq i32 %storemerge4, 0
  store i32 %v0_f044, i32* @global_var_1f1a4.118, align 4
  br i1 %v2_f064, label %dec_label_pc_f078, label %dec_label_pc_f070

dec_label_pc_f070:                                ; preds = %dec_label_pc_f03c
  store i32 %v3_f03c, i32* @r4, align 4
  store i32 %v6_f03c, i32* @r5, align 4
  ret i32 %v0_f044

dec_label_pc_f078:                                ; preds = %dec_label_pc_f03c
  store i32 1, i32* %stack_var_-16, align 4
  %v1_f084 = call i32 @function_121f4(i32 55)
  %v1_f08c = call i32 @function_121f4(i32 56)
  %v0_f090 = load i32, i32* @r5, align 4
  %v2_f098 = inttoptr i32 %v0_f090 to i32*
  %v3_f098 = call i32 @function_12110(i32 55, i32* %v2_f098)
  %v2_f0a0 = inttoptr i32 %v3_f098 to i8*
  %v3_f0a0 = call i32 @function_1371c(i8* %v2_f0a0, i32 2)
  %v7_f0a4 = icmp eq i32 %v3_f0a0, -1
  store i32 %v3_f0a0, i32* @r4, align 4
  br i1 %v7_f0a4, label %dec_label_pc_f0ec, label %dec_label_pc_f0b0

dec_label_pc_f0b0:                                ; preds = %dec_label_pc_f0ec, %dec_label_pc_f078
  %v0_f0bc = phi i32 [ %v3_f0fc, %dec_label_pc_f0ec ], [ %v3_f0a0, %dec_label_pc_f078 ]
  %v3_f0c4 = call i32 @function_136a0(i32 %v0_f0bc, i32 -2147199228, i32 %v2_f040)
  br label %dec_label_pc_f0c8

dec_label_pc_f0c8:                                ; preds = %dec_label_pc_f0c8, %dec_label_pc_f0b0
  %v0_f0d4 = load i32, i32* @r4, align 4
  %v3_f0dc = call i32 @function_136a0(i32 %v0_f0d4, i32 -2147199227, i32 0)
  %v1_f0e4 = call i32 @function_1484c(i32 10)
  br label %dec_label_pc_f0c8

dec_label_pc_f0ec:                                ; preds = %dec_label_pc_f078
  %v0_f0ec = load i32, i32* @r5, align 4
  %v2_f0f4 = inttoptr i32 %v0_f0ec to i32*
  %v3_f0f4 = call i32 @function_12110(i32 56, i32* %v2_f0f4)
  %v2_f0fc = inttoptr i32 %v3_f0f4 to i8*
  %v3_f0fc = call i32 @function_1371c(i8* %v2_f0fc, i32 2)
  %v3_f100 = icmp eq i32 %v3_f0fc, -1
  store i32 %v3_f0fc, i32* @r4, align 4
  br i1 %v3_f100, label %dec_label_pc_f10c, label %dec_label_pc_f0b0

dec_label_pc_f10c:                                ; preds = %dec_label_pc_f0ec
  %v1_f110 = call i32 @function_1213c(i32 55)
  %v1_f118 = call i32 @function_1213c(i32 56)
  %v0_f11c = load i32, i32* @r5, align 4
  %v1_f120 = call i32 @function_147b8(i32 %v0_f11c)
  %v0_f124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f124, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_f10c
  %v2_f124 = load i32, i32* @r4, align 4
  %v5_f124 = udiv i32 %v2_f124, 8
  %v6_f124 = and i32 %v5_f124, 2
  call void @__pseudo_branch(i32 %v6_f124)
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_f10c, %bb13
  ret i32 %v1_f120

; uselistorder directives
  uselistorder i32 %v3_f0fc, { 1, 2, 0 }
  uselistorder i32 %v3_f0a0, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_f044, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_136a0, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_f128(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f128:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f128 = load i32, i32* @r4, align 4
  store i32 %v3_f128, i32* %stack_var_-36, align 4
  %v6_f128 = load i32, i32* @r5, align 4
  %v9_f128 = load i32, i32* @r6, align 4
  %v2_f134 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_f134, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_f134, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_f14c = call i32 @function_13f38(i32 %v2_f134)
  store i32 %v2_f134, i32* @r0, align 4
  %v2_f158 = call i32 @function_13f08(i32 %v2_f134, i32 2)
  %v0_f15c = load i32, i32* @r5, align 4
  store i32 %v0_f15c, i32* %r2.global-to-local, align 4
  %v3_f168 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_f168 = call i32 @function_1386c(i32 %v0_f15c, %_TYPEDEF_sigset_t* %v3_f168, i32 %v0_f15c)
  %v2_f174 = call i32 @function_13f50(i32 17, i32 1)
  %v2_f180 = call i32 @function_13f50(i32 5, i32 ptrtoint (i32* @global_var_ee64.120 to i32))
  %v0_f184 = call i32 @function_12f14()
  store i8 -92, i8* bitcast (i32* @global_var_1f243.110 to i8*), align 4
  store i32 %v0_f184, i32* @global_var_1f238.84, align 4
  store i32 -583215265, i32* %r2.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1f240.107 to i8*), align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 -583215265, i32* @global_var_1f244.109, align 4
  store i8 1, i8* bitcast (i32* @global_var_1f242.111 to i8*), align 4
  %v0_f1bc = load i32, i32* @r5, align 4
  %v1_f1bc = trunc i32 %v0_f1bc to i8
  store i8 %v1_f1bc, i8* bitcast (i32* @global_var_1f241.123 to i8*), align 4
  %v6_f1c0 = call i32 @function_122ac(i32 %v0_f184, i32 ptrtoint (i8** @global_var_1f240.107 to i32), i32 -583215265, i32 1)
  store i32 ptrtoint (i32* @global_var_ee7c.103 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ee7c.103 to i32), i32* @global_var_1f028.105, align 4
  %v2_f1d4 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_f1d4, i32* @sb, align 4
  %v1_f1d8 = call i32 @function_eecc(i32 %v6_f1c0)
  %v1_f1dc = call i32 @function_f940(i32 %v1_f1d8)
  %v2_f1e8 = call i32 @function_12cfc(i32 %v2_f1d4, i32 32)
  %v0_f1ec = load i32, i32* @r6, align 4
  %v7_f1ec = icmp eq i32 %v0_f1ec, 2
  br i1 %v7_f1ec, label %dec_label_pc_f318, label %dec_label_pc_f1f4

dec_label_pc_f1f4:                                ; preds = %dec_label_pc_f318, %dec_label_pc_f128, %dec_label_pc_f328
  %v0_f1f4 = call i32 @function_f8e8()
  store i32 %v0_f1f4, i32* %r6.global-to-local, align 4
  %v0_f1fc = load i32, i32* @r8, align 4
  %v1_f1fc = inttoptr i32 %v0_f1fc to i32*
  %v2_f1fc = load i32, i32* %v1_f1fc, align 4
  %v1_f200 = inttoptr i32 %v2_f1fc to i8*
  %v2_f200 = call i32 @function_12c5c(i8* %v1_f200)
  %v0_f208 = load i32, i32* @r8, align 4
  %v1_f208 = inttoptr i32 %v0_f208 to i32*
  %v2_f208 = load i32, i32* %v1_f208, align 4
  %v1_f20c = inttoptr i32 %v2_f208 to i8*
  %v2_f20c = call i32 @function_12c5c(i8* %v1_f20c)
  %v1_f210 = sub i32 20, %v2_f200
  store i32 %v2_f20c, i32* @r5, align 4
  %v0_f218 = load i32, i32* %r6.global-to-local, align 4
  %v2_f21c = call i32 @function_13378(i32 %v0_f218, i32 %v1_f210)
  %v1_f224 = load i32, i32* @r5, align 4
  %v2_f224 = add i32 %v1_f224, %v2_f21c
  store i32 %v2_f224, i32* @r4, align 4
  %v2_f228 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_f228, i32* @r6, align 4
  %v2_f234 = call i32 @function_f99c(i32 %v2_f228, i32 %v2_f224)
  %v2_f238 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f238, i32* %r2.global-to-local, align 4
  %v1_f23c = load i32, i32* @r4, align 4
  %v2_f23c = add i32 %v1_f23c, %v2_f238
  store i32 %v2_f23c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_f248 = load i32, i32* @r8, align 4
  %v1_f248 = inttoptr i32 %v0_f248 to i32*
  %v2_f248 = load i32, i32* %v1_f248, align 4
  store i32 %v2_f248, i32* @r0, align 4
  %v3_f24c = add i32 %v2_f23c, -72
  %v4_f24c = inttoptr i32 %v3_f24c to i8*
  store i8 0, i8* %v4_f24c, align 1
  %v2_f250 = inttoptr i32 %v2_f248 to i8*
  %v3_f250 = call i32 @function_12c84(i8* %v2_f250, i32 %v2_f228)
  %v2_f25c = call i32 @function_12cfc(i32 %v2_f228, i32 32)
  %v0_f260 = call i32 @function_f8e8()
  store i32 %v0_f260, i32* @r7, align 4
  %v0_f268 = load i32, i32* @r8, align 4
  %v1_f268 = inttoptr i32 %v0_f268 to i32*
  %v2_f268 = load i32, i32* %v1_f268, align 4
  %v1_f26c = inttoptr i32 %v2_f268 to i8*
  %v2_f26c = call i32 @function_12c5c(i8* %v1_f26c)
  %v0_f274 = load i32, i32* @r8, align 4
  %v1_f274 = inttoptr i32 %v0_f274 to i32*
  %v2_f274 = load i32, i32* %v1_f274, align 4
  %v1_f278 = inttoptr i32 %v2_f274 to i8*
  %v2_f278 = call i32 @function_12c5c(i8* %v1_f278)
  %v1_f27c = sub i32 20, %v2_f26c
  store i32 %v2_f278, i32* @r5, align 4
  %v0_f284 = load i32, i32* @r7, align 4
  %v2_f288 = call i32 @function_13378(i32 %v0_f284, i32 %v1_f27c)
  %v1_f28c = load i32, i32* @r5, align 4
  %v2_f28c = add i32 %v1_f28c, %v2_f288
  store i32 %v2_f28c, i32* @r4, align 4
  %v2_f298 = call i32 @function_f99c(i32 %v2_f228, i32 %v2_f28c)
  %v1_f2a0 = load i32, i32* @r4, align 4
  %v2_f2a0 = add i32 %v1_f2a0, %v2_f238
  store i32 %v2_f2a0, i32* @r3, align 4
  %v0_f2a4 = load i32, i32* @sl, align 4
  %v1_f2a4 = trunc i32 %v0_f2a4 to i8
  %v3_f2a4 = add i32 %v2_f2a0, -72
  %v4_f2a4 = inttoptr i32 %v3_f2a4 to i8*
  store i8 %v1_f2a4, i8* %v4_f2a4, align 1
  %v2_f2b0 = call i32 @function_13788(i32 15, i32 %v2_f228)
  %v1_f2b8 = call i32 @function_121f4(i32 3)
  %v3_f2c8 = call i32 @function_12110(i32 3, i32* nonnull %stack_var_-44)
  %v3_f2cc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f2cc, i32* %r2.global-to-local, align 4
  %v3_f2d8 = inttoptr i32 %v3_f2c8 to i32*
  %v4_f2d8 = call i32 @function_138ec(i32 1, i32* %v3_f2d8, i32 %v3_f2cc)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f2e8 = call i32 @function_138ec(i32 1, i32* nonnull @global_var_15d34.127, i32 1)
  %v1_f2f0 = call i32 @function_1213c(i32 3)
  %v1_f2f4 = call i32 @function_a3a0(i32 %v1_f2f0)
  %v1_f2f8 = call i32 @function_eb58(i32 %v1_f2f4)
  %v1_f2fc = call i32 @function_f03c(i32 %v1_f2f8)
  %v0_f300 = call i32 @function_1361c()
  %v1_f304 = load i32, i32* @sl, align 4
  %v7_f308 = icmp sgt i32 %v0_f300, %v1_f304
  br i1 %v7_f308, label %dec_label_pc_f30c, label %dec_label_pc_f350

dec_label_pc_f30c:                                ; preds = %dec_label_pc_f1f4
  store i32 %v6_f128, i32* %r5.global-to-local, align 4
  store i32 %v9_f128, i32* %r6.global-to-local, align 4
  ret i32 0

dec_label_pc_f318:                                ; preds = %dec_label_pc_f128
  %v0_f318 = load i32, i32* @r8, align 4
  %v1_f318 = add i32 %v0_f318, 4
  %v2_f318 = inttoptr i32 %v1_f318 to i32*
  %v3_f318 = load i32, i32* %v2_f318, align 4
  %v1_f31c = inttoptr i32 %v3_f318 to i8*
  %v2_f31c = call i32 @function_12c5c(i8* %v1_f31c)
  %v8_f324 = icmp sgt i32 %v2_f31c, 31
  br i1 %v8_f324, label %dec_label_pc_f1f4, label %dec_label_pc_f328

dec_label_pc_f328:                                ; preds = %dec_label_pc_f318
  %v0_f328 = load i32, i32* @r8, align 4
  %v1_f328 = add i32 %v0_f328, 4
  %v2_f328 = inttoptr i32 %v1_f328 to i32*
  %v3_f328 = load i32, i32* %v2_f328, align 4
  store i32 %v2_f1d4, i32* @r0, align 4
  %v2_f330 = bitcast i32* %stack_var_-140 to i8*
  %v3_f330 = call i32 @function_12c84(i8* %v2_f330, i32 %v3_f328)
  %v0_f334 = load i32, i32* @r8, align 4
  %v1_f334 = add i32 %v0_f334, 4
  %v2_f334 = inttoptr i32 %v1_f334 to i32*
  %v3_f334 = load i32, i32* %v2_f334, align 4
  %v1_f33c = inttoptr i32 %v3_f334 to i8*
  %v2_f33c = call i32 @function_12c5c(i8* %v1_f33c)
  %v2_f348 = call i32 @function_12cfc(i32 %v3_f334, i32 %v2_f33c)
  br label %dec_label_pc_f1f4

dec_label_pc_f350:                                ; preds = %dec_label_pc_f1f4
  %v1_f350 = call i32 @function_13840(i32 %v0_f300)
  %v0_f358 = load i32, i32* @sl, align 4
  %v1_f35c = call i32 @function_135f0(i32 %v0_f358)
  %v1_f364 = call i32 @function_135f0(i32 1)
  %v1_f36c = call i32 @function_135f0(i32 2)
  %v1_f370 = call i32 @function_a3a0(i32 %v1_f36c)
  %v1_f374 = call i32 @function_eb58(i32 %v1_f370)
  %v1_f378 = call i32 @function_f03c(i32 %v1_f374)
  %v1_f37c = call i32 @function_fd04(i32 %v1_f378)
  store i32 ptrtoint (i32* @global_var_1f024.129 to i32), i32* @fp, align 4
  %v2_f38c = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_f38c, i32* @r6, align 4
  %v2_f390 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_f390, i32* @r7, align 4
  %v2_f468 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f6a8 = ptrtoint i32* %stack_var_-52 to i32
  %v4_f6bc = bitcast i8** %stack_var_-38 to i32*
  %v2_f818 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_f6cc = ptrtoint i32* %stack_var_-48 to i32
  %v1_f770 = bitcast i32* %stack_var_-140 to i8*
  %v5_f738 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_f74c = sub i32 0, %v1_f350
  br label %dec_label_pc_f394

dec_label_pc_f394:                                ; preds = %dec_label_pc_f394.backedge, %dec_label_pc_f350
  %v2_f39c46 = phi i32 [ %v2_f39c46.pre, %dec_label_pc_f394.backedge ], [ %v2_f38c, %dec_label_pc_f350 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_f39c48 = inttoptr i32 %v2_f39c46 to i32*
  store i32 0, i32* %v4_f39c48, align 4
  %v0_f3a049 = load i32, i32* %r3.global-to-local, align 4
  %v1_f3a050 = add i32 %v0_f3a049, 4
  store i32 %v1_f3a050, i32* %r3.global-to-local, align 4
  %v7_f3a451 = icmp eq i32 %v1_f3a050, 128
  br i1 %v7_f3a451, label %dec_label_pc_f3ac, label %dec_label_pc_f39c.dec_label_pc_f39c_crit_edge

dec_label_pc_f39c.dec_label_pc_f39c_crit_edge:    ; preds = %dec_label_pc_f394, %dec_label_pc_f39c.dec_label_pc_f39c_crit_edge
  %v1_f3a052 = phi i32 [ %v1_f3a0, %dec_label_pc_f39c.dec_label_pc_f39c_crit_edge ], [ %v1_f3a050, %dec_label_pc_f394 ]
  %v0_f39c.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_f39c = load i32, i32* @r6, align 4
  %v3_f39c = add i32 %v2_f39c, %v1_f3a052
  %v4_f39c = inttoptr i32 %v3_f39c to i32*
  store i32 %v0_f39c.pre, i32* %v4_f39c, align 4
  %v0_f3a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f3a0 = add i32 %v0_f3a0, 4
  store i32 %v1_f3a0, i32* %r3.global-to-local, align 4
  %v7_f3a4 = icmp eq i32 %v1_f3a0, 128
  br i1 %v7_f3a4, label %dec_label_pc_f3ac, label %dec_label_pc_f39c.dec_label_pc_f39c_crit_edge

dec_label_pc_f3ac:                                ; preds = %dec_label_pc_f39c.dec_label_pc_f39c_crit_edge, %dec_label_pc_f394
  %v0_f3ac = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f3ac, i32* %r3.global-to-local, align 4
  store i32 %v0_f3ac, i32* @r4, align 4
  %v2_f3b453 = load i32, i32* @r7, align 4
  %v3_f3b454 = add i32 %v2_f3b453, %v0_f3ac
  %v4_f3b455 = inttoptr i32 %v3_f3b454 to i32*
  store i32 %v0_f3ac, i32* %v4_f3b455, align 4
  %v0_f3b856 = load i32, i32* %r3.global-to-local, align 4
  %v1_f3b857 = add i32 %v0_f3b856, 4
  store i32 %v1_f3b857, i32* %r3.global-to-local, align 4
  %v7_f3bc58 = icmp eq i32 %v1_f3b857, 128
  br i1 %v7_f3bc58, label %dec_label_pc_f3c4, label %dec_label_pc_f3b4.dec_label_pc_f3b4_crit_edge

dec_label_pc_f3b4.dec_label_pc_f3b4_crit_edge:    ; preds = %dec_label_pc_f3ac, %dec_label_pc_f3b4.dec_label_pc_f3b4_crit_edge
  %v1_f3b859 = phi i32 [ %v1_f3b8, %dec_label_pc_f3b4.dec_label_pc_f3b4_crit_edge ], [ %v1_f3b857, %dec_label_pc_f3ac ]
  %v0_f3b4.pre = load i32, i32* @r4, align 4
  %v2_f3b4 = load i32, i32* @r7, align 4
  %v3_f3b4 = add i32 %v2_f3b4, %v1_f3b859
  %v4_f3b4 = inttoptr i32 %v3_f3b4 to i32*
  store i32 %v0_f3b4.pre, i32* %v4_f3b4, align 4
  %v0_f3b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_f3b8 = add i32 %v0_f3b8, 4
  store i32 %v1_f3b8, i32* %r3.global-to-local, align 4
  %v7_f3bc = icmp eq i32 %v1_f3b8, 128
  br i1 %v7_f3bc, label %dec_label_pc_f3c4, label %dec_label_pc_f3b4.dec_label_pc_f3b4_crit_edge

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f3b4.dec_label_pc_f3b4_crit_edge, %dec_label_pc_f3ac
  store i32 ptrtoint (i32* @global_var_1f020.113 to i32), i32* %r2.global-to-local, align 4
  %v2_f3c8 = load i32, i32* @global_var_1f020.113, align 4
  %v7_f3cc = icmp eq i32 %v2_f3c8, -1
  br i1 %v7_f3cc, label %dec_label_pc_f3f8, label %dec_label_pc_f3d4

dec_label_pc_f3d4:                                ; preds = %dec_label_pc_f3c4
  %v3_f3d4 = udiv i32 %v2_f3c8, 32
  %v3_f3d8 = mul nuw nsw i32 %v3_f3d4, 4
  %v2_f3e0 = add i32 %v3_f3d8, %v2_f238
  store i32 %v2_f3e0, i32* %r3.global-to-local, align 4
  %v1_f3e4 = add i32 %v2_f3e0, -360
  %v2_f3e4 = inttoptr i32 %v1_f3e4 to i32*
  %v3_f3e4 = load i32, i32* %v2_f3e4, align 4
  %v1_f3e8 = urem i32 %v2_f3c8, 32
  %v7_f3f0 = shl i32 1, %v1_f3e8
  %v8_f3f0 = or i32 %v3_f3e4, %v7_f3f0
  store i32 %v8_f3f0, i32* %r2.global-to-local, align 4
  store i32 %v8_f3f0, i32* %v2_f3e4, align 4
  br label %dec_label_pc_f3f8

dec_label_pc_f3f8:                                ; preds = %dec_label_pc_f3c4, %dec_label_pc_f3d4
  %v2_f3f8 = load i32, i32* @global_var_1f024.129, align 4
  store i32 %v2_f3f8, i32* %r3.global-to-local, align 4
  %v7_f3fc = icmp eq i32 %v2_f3f8, -1
  store i32 ptrtoint (i32* @global_var_1f024.129 to i32), i32* @r8, align 4
  br i1 %v7_f3fc, label %dec_label_pc_f634, label %dec_label_pc_f408

dec_label_pc_f408:                                ; preds = %dec_label_pc_f634, %dec_label_pc_f3f8, %.thread
  store i32 ptrtoint (i8** @global_var_1f1a8.132 to i32), i32* %r2.global-to-local, align 4
  %v2_f40c = load i8, i8* bitcast (i8** @global_var_1f1a8.132 to i8*), align 4
  %v2_f410 = icmp eq i8 %v2_f40c, 0
  %v2_f550 = load i32, i32* @global_var_1f024.129, align 4
  %v3_f554 = udiv i32 %v2_f550, 32
  store i32 %v3_f554, i32* %r3.global-to-local, align 4
  br i1 %v2_f410, label %dec_label_pc_f550, label %dec_label_pc_f418

dec_label_pc_f418:                                ; preds = %dec_label_pc_f408
  %v3_f420 = mul nuw nsw i32 %v3_f554, 4
  %v2_f428 = add i32 %v3_f420, %v2_f238
  store i32 %v2_f428, i32* %r3.global-to-local, align 4
  %v1_f42c = add i32 %v2_f428, -488
  %v2_f42c = inttoptr i32 %v1_f42c to i32*
  %v3_f42c = load i32, i32* %v2_f42c, align 4
  %v1_f430 = urem i32 %v2_f550, 32
  %v7_f438 = shl i32 1, %v1_f430
  %v8_f438 = or i32 %v3_f42c, %v7_f438
  store i32 %v8_f438, i32* %r2.global-to-local, align 4
  store i32 %v8_f438, i32* %v2_f42c, align 4
  br label %dec_label_pc_f440

dec_label_pc_f440:                                ; preds = %dec_label_pc_f550, %dec_label_pc_f418
  %v2_f444 = load i32, i32* @global_var_1f020.113, align 4
  %v2_f448 = load i32, i32* @global_var_1f024.129, align 4
  store i32 %v2_f448, i32* %r3.global-to-local, align 4
  %v5_f454 = icmp slt i32 %v2_f444, %v2_f448
  br i1 %v5_f454, label %bb, label %bb43

bb:                                               ; preds = %dec_label_pc_f440
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_f440, %bb
  %v0_f46c = phi i32 [ %v2_f444, %dec_label_pc_f440 ], [ %v2_f448, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f46c = add i32 %v0_f46c, 1
  store i32 %v2_f390, i32* %r2.global-to-local, align 4
  %v5_f480 = call i32 @function_13810(i32 %v1_f46c, i32 %v2_f38c, i32 %v2_f390, i32 0, i32 %v2_f468)
  %v7_f484 = icmp eq i32 %v5_f480, -1
  store i32 %v5_f480, i32* %r3.global-to-local, align 4
  br i1 %v7_f484, label %dec_label_pc_f394.backedge, label %dec_label_pc_f490

dec_label_pc_f490:                                ; preds = %bb43
  %v2_f490 = icmp eq i32 %v5_f480, 0
  br i1 %v2_f490, label %dec_label_pc_f498, label %dec_label_pc_f4b8

dec_label_pc_f498:                                ; preds = %dec_label_pc_f490
  %v0_f498 = load i32, i32* @sl, align 4
  store i8* null, i8** %stack_var_-38, align 4
  %v5_f4a8 = call i32 @function_13444(i32 %v0_f498, i32 6, i32 %v2_f390, i32 0)
  %v2_f4ac = icmp eq i32 %v5_f4a8, 0
  %v0_f4b0 = load i32, i32* @sl, align 4
  %v1_f4b0 = add i32 %v0_f4b0, 1
  store i32 %v1_f4b0, i32* @sl, align 4
  br i1 %v2_f4ac, label %dec_label_pc_f6a4, label %dec_label_pc_f4b8

dec_label_pc_f4b8:                                ; preds = %dec_label_pc_f490, %dec_label_pc_f498, %dec_label_pc_f6a4
  store i32 ptrtoint (i32* @global_var_1f020.113 to i32), i32* %r2.global-to-local, align 4
  %v2_f4bc = load i32, i32* @global_var_1f020.113, align 4
  %v7_f4c0 = icmp eq i32 %v2_f4bc, -1
  br i1 %v7_f4c0, label %dec_label_pc_f4ec, label %dec_label_pc_f4c8

dec_label_pc_f4c8:                                ; preds = %dec_label_pc_f4b8
  %v3_f4c8 = udiv i32 %v2_f4bc, 32
  %v3_f4cc = mul nuw nsw i32 %v3_f4c8, 4
  store i32 %v2_f238, i32* @ip, align 4
  %v2_f4d4 = add i32 %v3_f4cc, %v2_f238
  store i32 %v2_f4d4, i32* %r3.global-to-local, align 4
  %v1_f4d8 = add i32 %v2_f4d4, -360
  %v2_f4d8 = inttoptr i32 %v1_f4d8 to i32*
  %v3_f4d8 = load i32, i32* %v2_f4d8, align 4
  %v1_f4dc = urem i32 %v2_f4bc, 32
  %v6_f4e0 = lshr i32 %v3_f4d8, %v1_f4dc
  store i32 %v6_f4e0, i32* %r2.global-to-local, align 4
  %v1_f4e4 = urem i32 %v6_f4e0, 2
  %v2_f4e4 = icmp eq i32 %v1_f4e4, 0
  br i1 %v2_f4e4, label %dec_label_pc_f4ec, label %dec_label_pc_f720

dec_label_pc_f4ec:                                ; preds = %dec_label_pc_f4c8, %dec_label_pc_f4b8
  store i32 ptrtoint (i8** @global_var_1f1a8.132 to i32), i32* %r3.global-to-local, align 4
  %v2_f4f0 = load i8, i8* bitcast (i8** @global_var_1f1a8.132 to i8*), align 4
  %v3_f4f0 = zext i8 %v2_f4f0 to i32
  store i32 %v3_f4f0, i32* @r4, align 4
  %v2_f4f4 = icmp eq i8 %v2_f4f0, 0
  %v2_f57c = load i32, i32* @global_var_1f024.129, align 4
  br i1 %v2_f4f4, label %dec_label_pc_f57c, label %dec_label_pc_f4fc

dec_label_pc_f4fc:                                ; preds = %dec_label_pc_f4ec
  %v3_f500 = udiv i32 %v2_f57c, 32
  %v3_f508 = mul nuw nsw i32 %v3_f500, 4
  %v2_f50c = add i32 %v3_f508, %v2_f238
  store i32 %v2_f50c, i32* %r3.global-to-local, align 4
  %v1_f510 = add i32 %v2_f50c, -488
  %v2_f510 = inttoptr i32 %v1_f510 to i32*
  %v3_f510 = load i32, i32* %v2_f510, align 4
  %v1_f514 = urem i32 %v2_f57c, 32
  %v6_f518 = lshr i32 %v3_f510, %v1_f514
  store i32 %v6_f518, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f1a8.132 to i32), i32* %r3.global-to-local, align 4
  %v1_f524 = urem i32 %v6_f518, 2
  %v2_f524 = icmp eq i32 %v1_f524, 0
  store i8 0, i8* bitcast (i8** @global_var_1f1a8.132 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1f024.129 to i32), i32* @r5, align 4
  br i1 %v2_f524, label %dec_label_pc_f534, label %dec_label_pc_f6c4

dec_label_pc_f534:                                ; preds = %dec_label_pc_f4fc
  store i32 62780, i32* @lr, align 4
  %v1_f538 = icmp ne i32 %v2_f57c, -1
  call void @__pseudo_cond_branch(i1 %v1_f538, i32 ptrtoint (i32* @global_var_135f0.26 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f540 = load i32, i32* @r5, align 4
  %v2_f540 = inttoptr i32 %v1_f540 to i32*
  store i32 -1, i32* %v2_f540, align 4
  %v1_f548 = call i32 @function_1484c(i32 1)
  br label %dec_label_pc_f394.backedge

dec_label_pc_f394.backedge:                       ; preds = %dec_label_pc_f534, %dec_label_pc_f620, %dec_label_pc_f6f8, %dec_label_pc_f7bc, %dec_label_pc_f7e0, %dec_label_pc_f894, %dec_label_pc_f8a0, %bb43, %dec_label_pc_f57c, %dec_label_pc_f58c, %dec_label_pc_f76c, %bb45, %dec_label_pc_f840, %dec_label_pc_f7d0
  %v2_f39c46.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f394

dec_label_pc_f550:                                ; preds = %dec_label_pc_f408
  store i32 %v2_f238, i32* %r2.global-to-local, align 4
  %v3_f55c = mul nuw nsw i32 %v3_f554, 4
  %v2_f560 = add i32 %v3_f55c, %v2_f238
  store i32 %v2_f560, i32* %r3.global-to-local, align 4
  %v1_f564 = add i32 %v2_f560, -360
  %v2_f564 = inttoptr i32 %v1_f564 to i32*
  %v3_f564 = load i32, i32* %v2_f564, align 4
  %v1_f568 = urem i32 %v2_f550, 32
  %v7_f570 = shl i32 1, %v1_f568
  %v8_f570 = or i32 %v3_f564, %v7_f570
  store i32 %v8_f570, i32* %r2.global-to-local, align 4
  store i32 %v8_f570, i32* %v2_f564, align 4
  br label %dec_label_pc_f440

dec_label_pc_f57c:                                ; preds = %dec_label_pc_f4ec
  %v7_f580 = icmp eq i32 %v2_f57c, -1
  store i32 ptrtoint (i32* @global_var_1f024.129 to i32), i32* @r5, align 4
  br i1 %v7_f580, label %dec_label_pc_f394.backedge, label %dec_label_pc_f58c

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f57c
  %v3_f58c = udiv i32 %v2_f57c, 32
  %v3_f590 = mul nuw nsw i32 %v3_f58c, 4
  %v2_f598 = add i32 %v3_f590, %v2_f238
  store i32 %v2_f598, i32* %r3.global-to-local, align 4
  %v1_f59c = add i32 %v2_f598, -360
  %v2_f59c = inttoptr i32 %v1_f59c to i32*
  %v3_f59c = load i32, i32* %v2_f59c, align 4
  %v1_f5a0 = urem i32 %v2_f57c, 32
  %v6_f5a4 = lshr i32 %v3_f59c, %v1_f5a0
  store i32 %v6_f5a4, i32* %r2.global-to-local, align 4
  %v1_f5a8 = urem i32 %v6_f5a4, 2
  %v2_f5a8 = icmp eq i32 %v1_f5a8, 0
  br i1 %v2_f5a8, label %dec_label_pc_f394.backedge, label %dec_label_pc_f5b0

dec_label_pc_f5b0:                                ; preds = %dec_label_pc_f58c
  %v6_f5b0 = inttoptr i32 %v3_f4f0 to i8*
  store i8* %v6_f5b0, i8** %stack_var_-38, align 4
  %v0_f5b8 = call i32 @function_13b98()
  %v0_f5bc = load i32, i32* @r4, align 4
  %v2_f5bc = inttoptr i32 %v0_f5b8 to i32*
  store i32 %v0_f5bc, i32* %v2_f5bc, align 4
  store i32 %v0_f5b8, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f5d0 = load i32, i32* @global_var_1f024.129, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_f5dc = call i32 @function_13dec(i32 %v2_f5d0, i32* %v4_f6bc, i32 2, i32 16386)
  %v7_f5e0 = icmp eq i32 %v5_f5dc, -1
  br i1 %v7_f5e0, label %dec_label_pc_f7d0, label %dec_label_pc_f5e8

dec_label_pc_f5e8:                                ; preds = %dec_label_pc_f5b0
  %v2_f5e8 = icmp eq i32 %v5_f5dc, 0
  br i1 %v2_f5e8, label %dec_label_pc_f7e0, label %dec_label_pc_f5f0

dec_label_pc_f5f0:                                ; preds = %dec_label_pc_f5e8
  %v3_f5f0 = load i8*, i8** %stack_var_-38, align 4
  %v4_f5f0 = ptrtoint i8* %v3_f5f0 to i32
  store i32 %v3_f4f0, i32* %r3.global-to-local, align 4
  %v4_f5f8 = mul nuw nsw i32 %v3_f4f0, 256
  %v5_f5f8 = or i32 %v4_f5f0, %v4_f5f8
  store i32 %v5_f5f8, i32* %r2.global-to-local, align 4
  %v7_f5f8 = icmp eq i32 %v5_f5f8, 0
  br i1 %v7_f5f8, label %dec_label_pc_f8a0, label %dec_label_pc_f600

dec_label_pc_f600:                                ; preds = %dec_label_pc_f5f0
  %v1_f600 = mul i32 %v4_f5f0, 256
  %v3_f604 = and i32 %v1_f600, 65280
  %v4_f608 = udiv i32 %v5_f5f8, 256
  %v5_f608 = or i32 %v3_f604, %v4_f608
  %v6_f608 = trunc i32 %v4_f608 to i8
  store i32 %v5_f608, i32* %r2.global-to-local, align 4
  %v4_f60c = udiv i32 %v5_f5f8, 65536
  store i32 %v4_f60c, i32* %r3.global-to-local, align 4
  %v3_f610 = icmp slt i8 %v6_f608, 0
  %v7_f618 = inttoptr i32 %v4_f608 to i8*
  store i8* %v7_f618, i8** %stack_var_-38, align 4
  br i1 %v3_f610, label %dec_label_pc_f620, label %dec_label_pc_f810

dec_label_pc_f620:                                ; preds = %dec_label_pc_f600
  %v2_f620 = load i32, i32* @global_var_1f024.129, align 4
  %v1_f624 = call i32 @function_135f0(i32 %v2_f620)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f62c = load i32, i32* @r5, align 4
  %v2_f62c = inttoptr i32 %v1_f62c to i32*
  store i32 -1, i32* %v2_f62c, align 4
  br label %dec_label_pc_f394.backedge

dec_label_pc_f634:                                ; preds = %dec_label_pc_f3f8
  %v0_f63c = load i32, i32* @r4, align 4
  store i32 %v0_f63c, i32* %r2.global-to-local, align 4
  %v3_f640 = call i32 @function_13edc(i32 2, i32 1, i32 %v0_f63c)
  %v7_f644 = icmp eq i32 %v3_f640, -1
  store i32 %v3_f640, i32* %r5.global-to-local, align 4
  %v1_f64c = load i32, i32* @r8, align 4
  %v2_f64c = inttoptr i32 %v1_f64c to i32*
  store i32 %v3_f640, i32* %v2_f64c, align 4
  br i1 %v7_f644, label %dec_label_pc_f408, label %dec_label_pc_f654

dec_label_pc_f654:                                ; preds = %dec_label_pc_f634
  %v0_f654 = load i32, i32* @r4, align 4
  store i32 %v0_f654, i32* @r2, align 4
  %v2_f65c = call i32 @function_1352c(i32 %v3_f640, i32 3)
  %v1_f664 = or i32 %v2_f65c, 2048
  store i32 %v1_f664, i32* @r2, align 4
  %v0_f668 = load i32, i32* %r5.global-to-local, align 4
  %v2_f66c = call i32 @function_1352c(i32 %v0_f668, i32 4)
  store i32 ptrtoint (i32* @global_var_1f028.105 to i32), i32* %r2.global-to-local, align 4
  %v2_f674 = load i32, i32* @global_var_1f028.105, align 4
  store i32 %v2_f674, i32* %r3.global-to-local, align 4
  %v2_f678 = icmp eq i32 %v2_f674, 0
  br i1 %v2_f678, label %.thread, label %bb44

bb44:                                             ; preds = %dec_label_pc_f654
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_12f14.133 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f654, %bb44
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f68c = load i32, i32* @global_var_1f024.129, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1f1a8.132 to i8*), align 4
  %v5_f69c = call i32 @function_13d38(i32 %v2_f68c, %sockaddr* bitcast (i8** @global_var_1f240.107 to %sockaddr*), i32 16)
  br label %dec_label_pc_f408

dec_label_pc_f6a4:                                ; preds = %dec_label_pc_f498
  %v2_f6ac = load i32, i32* @global_var_1f024.129, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f6bc = call i32 @function_13e4c(i32 %v2_f6ac, i32* nonnull %v4_f6bc, i32 2, i32 16384)
  br label %dec_label_pc_f4b8

dec_label_pc_f6c4:                                ; preds = %dec_label_pc_f4fc
  store i32 4, i32* @r4, align 4
  store i32 %v2_f6cc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_f6e8 = call i32 @function_13d90(i32 %v2_f57c, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_f6a8)
  %v3_f6ec = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f6ec, i32* %r3.global-to-local, align 4
  %v2_f6f0 = icmp eq i32 %v3_f6ec, 0
  br i1 %v2_f6f0, label %dec_label_pc_f76c, label %dec_label_pc_f6f8

dec_label_pc_f6f8:                                ; preds = %dec_label_pc_f6c4
  %v2_f6f8 = load i32, i32* @global_var_1f024.129, align 4
  %v1_f6fc = call i32 @function_135f0(i32 %v2_f6f8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f704 = load i32, i32* @r5, align 4
  %v2_f704 = inttoptr i32 %v1_f704 to i32*
  store i32 -1, i32* %v2_f704, align 4
  %v0_f708 = call i32 @function_f8e8()
  %v2_f710 = call i32 @function_13378(i32 %v0_f708, i32 10)
  %v1_f714 = add i32 %v2_f710, 1
  %v1_f718 = call i32 @function_1484c(i32 %v1_f714)
  br label %dec_label_pc_f394.backedge

dec_label_pc_f720:                                ; preds = %dec_label_pc_f4c8
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_f6cc, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_f738 = call i32 @function_13ce0(i32 %v2_f4bc, %sockaddr* %v5_f738, i32 %v2_f6cc, i32 16, i32 16)
  %v1_f73c = call i32 @function_fa68(i32 %v6_f738)
  %v1_f740 = call i32 @function_e5c4(i32 %v1_f73c)
  store i32 %v1_f350, i32* %r2.global-to-local, align 4
  %v2_f750 = call i32 @function_136f0(i32 %v1_f74c, i32 9)
  store i32 ptrtoint (i32* @global_var_1f1a4.118 to i32), i32* %r3.global-to-local, align 4
  %v2_f758 = load i32, i32* @global_var_1f1a4.118, align 4
  %v2_f75c = icmp eq i32 %v2_f758, 0
  br i1 %v2_f75c, label %dec_label_pc_f764, label %dec_label_pc_f804

dec_label_pc_f764:                                ; preds = %dec_label_pc_f720, %dec_label_pc_f804
  %v1_f768 = call i32 @function_147b8(i32 0)
  br label %dec_label_pc_f76c

dec_label_pc_f76c:                                ; preds = %dec_label_pc_f6c4, %dec_label_pc_f764
  %v2_f770 = call i32 @function_12c5c(i8* %v1_f770)
  %sext = mul i32 %v2_f770, 16777216
  %v1_f774 = sdiv i32 %sext, 16777216
  %v7_f774 = inttoptr i32 %v1_f774 to i8*
  store i8* %v7_f774, i8** %stack_var_-38, align 4
  %v0_f778 = call i32 @function_12f14()
  store i32 %v0_f778, i32* @global_var_1f238.84, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f78c = load i32, i32* @r4, align 4
  store i32 %v0_f78c, i32* %r2.global-to-local, align 4
  %v0_f790 = load i32, i32* @r5, align 4
  %v1_f790 = inttoptr i32 %v0_f790 to i32*
  %v2_f790 = load i32, i32* %v1_f790, align 4
  %v5_f794 = call i32 @function_13e4c(i32 %v2_f790, i32* nonnull @global_var_15d38.136, i32 %v0_f78c, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_f7a0 = load i32, i32* @r5, align 4
  %v1_f7a0 = inttoptr i32 %v0_f7a0 to i32*
  %v2_f7a0 = load i32, i32* %v1_f7a0, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f7ac = call i32 @function_13e4c(i32 %v2_f7a0, i32* %v4_f6bc, i32 1, i32 16384)
  %v3_f7b0 = load i8*, i8** %stack_var_-38, align 4
  %v4_f7b0 = ptrtoint i8* %v3_f7b0 to i32
  store i32 %v4_f7b0, i32* %r2.global-to-local, align 4
  %v3_f7b4 = icmp eq i8* %v3_f7b0, null
  br i1 %v3_f7b4, label %dec_label_pc_f394.backedge, label %dec_label_pc_f7bc

dec_label_pc_f7bc:                                ; preds = %dec_label_pc_f76c
  %v0_f7bc = load i32, i32* @r5, align 4
  %v1_f7bc = inttoptr i32 %v0_f7bc to i32*
  %v2_f7bc = load i32, i32* %v1_f7bc, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_f7c8 = call i32 @function_13e4c(i32 %v2_f7bc, i32* nonnull %stack_var_-140, i32 %v4_f7b0, i32 16384)
  br label %dec_label_pc_f394.backedge

dec_label_pc_f7d0:                                ; preds = %dec_label_pc_f810, %dec_label_pc_f5b0
  %v0_f7d0 = load i32, i32* @r8, align 4
  %v1_f7d0 = inttoptr i32 %v0_f7d0 to i32*
  %v2_f7d0 = load i32, i32* %v1_f7d0, align 4
  store i32 %v2_f7d0, i32* %r3.global-to-local, align 4
  %v7_f7d4 = icmp eq i32 %v2_f7d0, 4
  br i1 %v7_f7d4, label %dec_label_pc_f394.backedge, label %bb45

bb45:                                             ; preds = %dec_label_pc_f7d0
  %v8_f7d8 = icmp eq i32 %v2_f7d0, 11
  br i1 %v8_f7d8, label %dec_label_pc_f394.backedge, label %dec_label_pc_f7e0

dec_label_pc_f7e0:                                ; preds = %dec_label_pc_f838, %bb45, %dec_label_pc_f5e8
  %v2_f7e0 = load i32, i32* @global_var_1f024.129, align 4
  store i32 63468, i32* @lr, align 4
  %v1_f7e8 = icmp ne i32 %v2_f7e0, -1
  call void @__pseudo_cond_branch(i1 %v1_f7e8, i32 ptrtoint (i32* @global_var_135f0.26 to i32))
  store i32 ptrtoint (i32* @global_var_1f024.129 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1f024.129, align 4
  %v1_f7fc = call i32 @function_1484c(i32 1)
  br label %dec_label_pc_f394.backedge

dec_label_pc_f804:                                ; preds = %dec_label_pc_f720
  %v2_f808 = call i32 @function_136f0(i32 %v2_f758, i32 9)
  br label %dec_label_pc_f764

dec_label_pc_f810:                                ; preds = %dec_label_pc_f600
  %v0_f810 = load i32, i32* @r4, align 4
  %v1_f810 = load i32, i32* @r8, align 4
  %v2_f810 = inttoptr i32 %v1_f810 to i32*
  store i32 %v0_f810, i32* %v2_f810, align 4
  store i32 %v2_f818, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f824 = load i32, i32* @global_var_1f024.129, align 4
  %v9_f82c = call i32 @function_13dec(i32 %v2_f824, i32* nonnull %stack_var_-1548, i32 %v4_f608, i32 16386)
  %v7_f830 = icmp eq i32 %v9_f82c, -1
  br i1 %v7_f830, label %dec_label_pc_f7d0, label %dec_label_pc_f838

dec_label_pc_f838:                                ; preds = %dec_label_pc_f810
  %v2_f838 = icmp eq i32 %v9_f82c, 0
  br i1 %v2_f838, label %dec_label_pc_f7e0, label %dec_label_pc_f840

dec_label_pc_f840:                                ; preds = %dec_label_pc_f838
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f850 = load i32, i32* @global_var_1f024.129, align 4
  %v5_f854 = call i32 @function_13dec(i32 %v2_f850, i32* nonnull %v4_f6bc, i32 2, i32 16384)
  %v3_f858 = load i8*, i8** %stack_var_-38, align 4
  %v4_f858 = ptrtoint i8* %v3_f858 to i32
  %v4_f85c = urem i32 %v4_f60c, 256
  %v4_f860 = mul i32 %v4_f858, 256
  %v5_f860 = or i32 %v4_f860, %v4_f85c
  store i32 %v5_f860, i32* @ip, align 4
  store i32 %v5_f860, i32* %r2.global-to-local, align 4
  %v3_f868 = sdiv i32 %v4_f860, 256
  store i32 %v3_f868, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f874 = load i32, i32* @global_var_1f024.129, align 4
  %v6_f87c = inttoptr i32 %v5_f860 to i8*
  store i8* %v6_f87c, i8** %stack_var_-38, align 4
  %v8_f880 = call i32 @function_13dec(i32 %v2_f874, i32* nonnull %stack_var_-1548, i32 %v5_f860, i32 16384)
  %v3_f884 = load i8*, i8** %stack_var_-38, align 4
  %v4_f884 = ptrtoint i8* %v3_f884 to i32
  store i32 %v4_f884, i32* %r2.global-to-local, align 4
  %v4_f888 = urem i32 %v3_f868, 256
  store i32 %v4_f888, i32* %r3.global-to-local, align 4
  %v6_f88c = mul nuw nsw i32 %v4_f888, 256
  %v7_f88c = or i32 %v4_f884, %v6_f88c
  %v9_f88c = icmp eq i32 %v7_f88c, 0
  br i1 %v9_f88c, label %dec_label_pc_f394.backedge, label %dec_label_pc_f894

dec_label_pc_f894:                                ; preds = %dec_label_pc_f840
  %v7_f898 = call i32 @function_a0c4(i32* nonnull %stack_var_-1548, i32 %v7_f88c, i32 %v4_f884, i32 %v4_f888)
  br label %dec_label_pc_f394.backedge

dec_label_pc_f8a0:                                ; preds = %dec_label_pc_f5f0
  %v2_f8a4 = load i32, i32* @global_var_1f024.129, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f8b4 = call i32 @function_13dec(i32 %v2_f8a4, i32* nonnull %v4_f6bc, i32 2, i32 16384)
  br label %dec_label_pc_f394.backedge

; uselistorder directives
  uselistorder i32 %v4_f888, { 2, 0, 1 }
  uselistorder i32 %v4_f884, { 1, 0, 2 }
  uselistorder i32 %v3_f868, { 1, 0 }
  uselistorder i32 %v5_f860, { 1, 0, 2, 3 }
  uselistorder i32 %v4_f860, { 1, 0 }
  uselistorder i32 %v9_f82c, { 1, 0 }
  uselistorder i32 %v3_f640, { 1, 3, 2, 0 }
  uselistorder i32 %v4_f608, { 2, 3, 0, 1 }
  uselistorder i32 %v5_f5dc, { 1, 0 }
  uselistorder i32 %v2_f57c, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_f4bc, { 3, 2, 1, 0 }
  uselistorder i32 %v5_f480, { 2, 1, 0 }
  uselistorder i32 %v2_f3c8, { 2, 1, 0 }
  uselistorder i32 %v1_f3b8, { 1, 2, 0 }
  uselistorder i32 %v1_f3a0, { 1, 2, 0 }
  uselistorder i32 %v2_f6cc, { 1, 0, 2 }
  uselistorder i32* %v4_f6bc, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_f390, { 0, 2, 1, 3 }
  uselistorder i32 %v2_f38c, { 1, 0, 2 }
  uselistorder i32 %v2_f238, { 0, 1, 9, 2, 3, 8, 4, 5, 6, 7, 10 }
  uselistorder i32 %v2_f228, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_f134, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 47, 48, 40, 41, 37, 45, 46, 38, 39, 42, 43, 44 }
  uselistorder i32* @global_var_1f1a4.118, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 (i32)* @function_1484c, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* null, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1f1a8.132 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1f1a8.132, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f1a8.132 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1f020.113, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1f024.129, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i32)* @function_f03c, { 1, 0 }
  uselistorder i32 (i32)* @function_eb58, { 1, 0 }
  uselistorder i32 (i32)* @function_a3a0, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_12c84, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 56, 57, 58, 59, 60, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32 (i32, i32)* @function_f99c, { 10, 9, 8, 0, 7, 6, 5, 1, 4, 3, 2 }
  uselistorder i32 (i32)* @function_eecc, { 1, 0 }
  uselistorder i32* @global_var_1f028.105, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_ee7c.103 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_13f50, { 1, 0 }
  uselistorder label %dec_label_pc_f76c, { 1, 0 }
  uselistorder label %dec_label_pc_f764, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f394.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_f4b8, { 2, 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_f408, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f3f8, { 1, 0 }
  uselistorder label %dec_label_pc_f3b4.dec_label_pc_f3b4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f39c.dec_label_pc_f39c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f1f4, { 2, 0, 1 }
}

define i32 @function_f8e8() local_unnamed_addr {
dec_label_pc_f8e8:
  %v2_f8f4 = load i32, i32* @global_var_1f1ac.138, align 4
  %v2_f8f8 = load i32, i32* @global_var_1f1b8.140, align 4
  store i32 ptrtoint (i32* @global_var_1f1b0.142 to i32), i32* @lr, align 4
  %v4_f904 = mul i32 %v2_f8f4, 2048
  %v5_f904 = xor i32 %v4_f904, %v2_f8f4
  %v4_f908 = udiv i32 %v2_f8f8, 524288
  %v5_f908 = xor i32 %v4_f908, %v2_f8f8
  %v2_f90c = load i32, i32* @global_var_1f1b0.142, align 4
  %v2_f910 = load i32, i32* @global_var_1f1b4.144, align 4
  %v2_f914 = xor i32 %v5_f908, %v5_f904
  %v4_f918 = udiv i32 %v5_f904, 256
  %v5_f918 = xor i32 %v2_f914, %v4_f918
  store i32 %v2_f90c, i32* @global_var_1f1ac.138, align 4
  store i32 %v2_f910, i32* @global_var_1f1b0.142, align 4
  store i32 %v2_f8f8, i32* @global_var_1f1b4.144, align 4
  store i32 %v5_f918, i32* @global_var_1f1b8.140, align 4
  ret i32 %v5_f918

; uselistorder directives
  uselistorder i32 %v2_f8f8, { 2, 1, 0 }
  uselistorder i32 %v2_f8f4, { 1, 0 }
}

define i32 @function_f940(i32 %arg1) local_unnamed_addr {
dec_label_pc_f940:
  %stack_var_-12 = alloca i32, align 4
  %v3_f940 = load i32, i32* @r4, align 4
  store i32 %v3_f940, i32* %stack_var_-12, align 4
  %v2_f948 = call i32 @function_138c0(i32* null)
  store i32 %v2_f948, i32* @global_var_1f1ac.138, align 4
  %v0_f954 = call i32 @function_13648()
  store i32 %v0_f954, i32* @r4, align 4
  %v0_f95c = call i32 @function_13674()
  %v0_f964 = load i32, i32* @r4, align 4
  %v2_f964 = xor i32 %v0_f964, %v0_f95c
  store i32 %v2_f964, i32* @r4, align 4
  store i32 %v2_f964, i32* @global_var_1f1b0.142, align 4
  %v1_f96c = call i32 @function_13ba4(i32 %v0_f95c)
  %v2_f970 = load i32, i32* @global_var_1f1b0.142, align 4
  %v2_f97c = xor i32 %v2_f970, %v1_f96c
  store i32 %v2_f97c, i32* @global_var_1f1b8.140, align 4
  store i32 %v1_f96c, i32* @global_var_1f1b4.144, align 4
  %v2_f988 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f988, i32* @r4, align 4
  ret i32 %v1_f96c

; uselistorder directives
  uselistorder i32 %v1_f96c, { 1, 2, 0 }
  uselistorder i32 %v0_f95c, { 1, 0 }
}

define i32 @function_f99c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f99c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f99c = load i32, i32* @r4, align 4
  store i32 %v3_f99c, i32* %stack_var_-36, align 4
  %v6_f99c = load i32, i32* @r5, align 4
  %v9_f99c = load i32, i32* @r6, align 4
  %v12_f99c = load i32, i32* @r7, align 4
  %v28_f99c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_f9a4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_f9b0 = call i32 @function_121f4(i32 57)
  %v3_f9bc = call i32 @function_12110(i32 57, i32* null)
  %v2_f9c8 = inttoptr i32 %v3_f9bc to i8*
  %v3_f9c8 = call i32 @function_13ca0(i32 %v2_f9a4, i8* %v2_f9c8)
  %v2_f9cc = icmp eq i32 %arg2, 0
  br i1 %v2_f9cc, label %dec_label_pc_fa48, label %dec_label_pc_f9d4

dec_label_pc_f9d4:                                ; preds = %dec_label_pc_f99c
  store i32 ptrtoint (i32* @global_var_1f1ac.138 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1b0.142 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1b4.144 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1f1b8.140 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_fa1c = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_f9e8

dec_label_pc_f9e8:                                ; preds = %dec_label_pc_f9e8.dec_label_pc_f9e8_crit_edge, %dec_label_pc_f9d4
  %v1_fa0c = phi i32 [ %v1_fa0c.pre, %dec_label_pc_f9e8.dec_label_pc_f9e8_crit_edge ], [ ptrtoint (i32* @global_var_1f1ac.138 to i32), %dec_label_pc_f9d4 ]
  %v2_f9e8 = load i32, i32* @global_var_1f1b8.140, align 4
  store i32 %v2_f9e8, i32* %r2.global-to-local, align 4
  %v2_f9ec = load i32, i32* @global_var_1f1ac.138, align 4
  %v4_f9f0 = udiv i32 %v2_f9e8, 524288
  %v5_f9f0 = xor i32 %v4_f9f0, %v2_f9e8
  %v4_f9f4 = mul i32 %v2_f9ec, 2048
  %v5_f9f4 = xor i32 %v4_f9f4, %v2_f9ec
  %v2_f9f8 = xor i32 %v5_f9f0, %v5_f9f4
  %v2_f9fc = load i32, i32* @global_var_1f1b0.142, align 4
  %v2_fa00 = load i32, i32* @global_var_1f1b4.144, align 4
  store i32 %v2_fa00, i32* %ip.global-to-local, align 4
  %v4_fa04 = udiv i32 %v5_f9f4, 256
  %v5_fa04 = xor i32 %v2_f9f8, %v4_fa04
  store i32 %v5_fa04, i32* @r4, align 4
  %v2_fa0c = inttoptr i32 %v1_fa0c to i32*
  store i32 %v2_f9fc, i32* %v2_fa0c, align 4
  %v0_fa10 = load i32, i32* %ip.global-to-local, align 4
  %v1_fa10 = load i32, i32* %r8.global-to-local, align 4
  %v2_fa10 = inttoptr i32 %v1_fa10 to i32*
  store i32 %v0_fa10, i32* %v2_fa10, align 4
  %v0_fa14 = load i32, i32* %r2.global-to-local, align 4
  %v1_fa14 = load i32, i32* @r7, align 4
  %v2_fa14 = inttoptr i32 %v1_fa14 to i32*
  store i32 %v0_fa14, i32* %v2_fa14, align 4
  %v0_fa18 = load i32, i32* @r4, align 4
  %v1_fa18 = load i32, i32* @r6, align 4
  %v2_fa18 = inttoptr i32 %v1_fa18 to i32*
  store i32 %v0_fa18, i32* %v2_fa18, align 4
  %v2_fa1c = call i32 @function_12c5c(i8* %v1_fa1c)
  %v0_fa24 = load i32, i32* @r4, align 4
  %v2_fa28 = call i32 @function_13378(i32 %v0_fa24, i32 %v2_fa1c)
  %v2_fa30 = add i32 %v2_fa28, %v28_f99c
  %v1_fa34 = add i32 %v2_fa30, -32
  %v2_fa34 = inttoptr i32 %v1_fa34 to i8*
  %v3_fa34 = load i8, i8* %v2_fa34, align 1
  %v2_fa38 = load i32, i32* @r5, align 4
  %v3_fa38 = load i32, i32* %fp.global-to-local, align 4
  %v4_fa38 = add i32 %v3_fa38, %v2_fa38
  %v5_fa38 = inttoptr i32 %v4_fa38 to i8*
  store i8 %v3_fa34, i8* %v5_fa38, align 1
  %v0_fa3c = load i32, i32* @r5, align 4
  %v1_fa3c = add i32 %v0_fa3c, 1
  store i32 %v1_fa3c, i32* @r5, align 4
  %v1_fa40 = load i32, i32* %sb.global-to-local, align 4
  %v9_fa40 = icmp eq i32 %v1_fa3c, %v1_fa40
  br i1 %v9_fa40, label %dec_label_pc_fa48, label %dec_label_pc_f9e8.dec_label_pc_f9e8_crit_edge

dec_label_pc_f9e8.dec_label_pc_f9e8_crit_edge:    ; preds = %dec_label_pc_f9e8
  %v1_fa0c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f9e8

dec_label_pc_fa48:                                ; preds = %dec_label_pc_f9e8, %dec_label_pc_f99c
  %v1_fa4c = call i32 @function_1213c(i32 57)
  %v2_fa54 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_fa54, i32* @r4, align 4
  store i32 %v6_f99c, i32* @r5, align 4
  store i32 %v9_f99c, i32* @r6, align 4
  store i32 %v12_f99c, i32* @r7, align 4
  ret i32 %v1_fa4c

; uselistorder directives
  uselistorder i32 %v2_f9ec, { 1, 0 }
  uselistorder i32 %v2_f9e8, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* @global_var_1f1b8.140, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1f1b4.144, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1f1b0.142, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32* @global_var_1f1ac.138, { 2, 4, 1, 0, 3 }
}

define i32 @function_fa68(i32 %arg1) local_unnamed_addr {
dec_label_pc_fa68:
  %v2_fa6c = load i32, i32* @global_var_1f258.154, align 4
  %v2_fa74 = call i32 @function_136f0(i32 %v2_fa6c, i32 9)
  %v0_fa78 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_fa78, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_fa68
  %v2_fa78 = load i32, i32* @r8, align 4
  %v8_fa78 = ashr i32 %v2_fa78, %arg1
  %v9_fa78 = and i32 %v8_fa78, 9
  call void @__pseudo_branch(i32 %v9_fa78)
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_fa68, %bb
  ret i32 %v2_fa74

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_fa7c() local_unnamed_addr {
dec_label_pc_fa7c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fa7c = load i32, i32* @r4, align 4
  store i32 %v3_fa7c, i32* %stack_var_-16, align 4
  %v0_fa80 = load i32, i32* @r0, align 4
  store i32 %v0_fa80, i32* %r5.global-to-local, align 4
  %v1_fa84 = add i32 %v0_fa80, 4
  %v2_fa84 = inttoptr i32 %v1_fa84 to i32*
  %v3_fa84 = load i32, i32* %v2_fa84, align 4
  store i32 %v3_fa84, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 64168, i32* @lr, align 4
  %v1_faa4 = icmp ne i32 %v3_fa84, -1
  call void @__pseudo_cond_branch(i1 %v1_faa4, i32 ptrtoint (i32* @global_var_135f0.26 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_fab4 = call i32 @function_13edc(i32 2, i32 1, i32 0)
  store i32 %v3_fab4, i32* %r3.global-to-local, align 4
  %v7_fabc = icmp eq i32 %v3_fab4, -1
  %v0_fac4 = load i32, i32* %r5.global-to-local, align 4
  %v1_fac4 = add i32 %v0_fac4, 28
  store i32 %v1_fac4, i32* %r0.global-to-local, align 4
  %v2_fac8 = add i32 %v0_fac4, 4
  %v3_fac8 = inttoptr i32 %v2_fac8 to i32*
  store i32 %v3_fab4, i32* %v3_fac8, align 4
  br i1 %v7_fabc, label %dec_label_pc_fa7c.dec_label_pc_fb44_crit_edge, label %dec_label_pc_fad0

dec_label_pc_fa7c.dec_label_pc_fb44_crit_edge:    ; preds = %dec_label_pc_fa7c
  %v14_fb48.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb44

dec_label_pc_fad0:                                ; preds = %dec_label_pc_fa7c
  %v0_fad0 = load i32, i32* %r6.global-to-local, align 4
  %v1_fad0 = load i32, i32* %r5.global-to-local, align 4
  %v2_fad0 = add i32 %v1_fad0, 24
  %v3_fad0 = inttoptr i32 %v2_fad0 to i32*
  store i32 %v0_fad0, i32* %v3_fad0, align 4
  %v0_fad4 = load i32, i32* %r0.global-to-local, align 4
  %v2_fad4 = call i32 @function_12cfc(i32 %v0_fad4, i32 256)
  store i32 %v2_fad4, i32* %r0.global-to-local, align 4
  %v0_fad8 = load i32, i32* %r5.global-to-local, align 4
  %v1_fad8 = add i32 %v0_fad8, 4
  %v2_fad8 = inttoptr i32 %v1_fad8 to i32*
  %v3_fad8 = load i32, i32* %v2_fad8, align 4
  store i32 %v3_fad8, i32* @r4, align 4
  %v0_fae0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fae0, i32* @r2, align 4
  store i32 %v3_fad8, i32* %r0.global-to-local, align 4
  %v2_fae8 = call i32 @function_1352c(i32 %v3_fad8, i32 3)
  %v1_faf0 = or i32 %v2_fae8, 2048
  store i32 %v1_faf0, i32* @r2, align 4
  %v0_faf4 = load i32, i32* @r4, align 4
  store i32 %v0_faf4, i32* %r0.global-to-local, align 4
  %v2_faf8 = call i32 @function_1352c(i32 %v0_faf4, i32 4)
  store i32 %v2_faf8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1f0.156 to i32), i32* %r3.global-to-local, align 4
  %v0_fb00 = load i32, i32* %r5.global-to-local, align 4
  %v1_fb00 = add i32 %v0_fb00, 20
  %v2_fb00 = inttoptr i32 %v1_fb00 to i32*
  %v3_fb00 = load i32, i32* %v2_fb00, align 4
  store i32 %v3_fb00, i32* @r4, align 4
  %v2_fb04 = load i32, i32* @global_var_1f1f0.156, align 4
  %v1_fb08 = add i32 %v0_fb00, 16
  %v2_fb08 = inttoptr i32 %v1_fb08 to i32*
  %v3_fb08 = load i32, i32* %v2_fb08, align 4
  store i32 %v3_fb08, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_fb10 = add i32 %v0_fb00, 8
  %v3_fb10 = inttoptr i32 %v2_fb10 to i32*
  store i32 %v2_fb04, i32* %v3_fb10, align 4
  %v0_fb14 = load i32, i32* %r3.global-to-local, align 4
  %v1_fb14 = load i32, i32* %r5.global-to-local, align 4
  %v2_fb14 = add i32 %v1_fb14, 12
  %v3_fb14 = inttoptr i32 %v2_fb14 to i32*
  store i32 %v0_fb14, i32* %v3_fb14, align 4
  %v0_fb1c = load i32, i32* %r5.global-to-local, align 4
  %v1_fb1c = add i32 %v0_fb1c, 4
  %v2_fb1c = inttoptr i32 %v1_fb1c to i32*
  %v3_fb1c = load i32, i32* %v2_fb1c, align 4
  store i32 %v3_fb1c, i32* %r0.global-to-local, align 4
  %v0_fb20 = load i32, i32* %r3.global-to-local, align 4
  %v2_fb20 = mul i32 %v0_fb20, 2
  store i32 %v2_fb20, i32* %r3.global-to-local, align 4
  store i32 %v2_fb20, i32* %stack_var_-32, align 4
  %v3_fb40 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_fb40 = call i32 @function_13d38(i32 %v3_fb1c, %sockaddr* %v3_fb40, i32 16)
  store i32 %v4_fb40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb44

dec_label_pc_fb44:                                ; preds = %dec_label_pc_fa7c.dec_label_pc_fb44_crit_edge, %dec_label_pc_fad0
  %v14_fb48 = phi i32 [ %v14_fb48.pre, %dec_label_pc_fa7c.dec_label_pc_fb44_crit_edge ], [ %v4_fb40, %dec_label_pc_fad0 ]
  %v2_fb48 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_fb48, i32* @r4, align 4
  ret i32 %v14_fb48

; uselistorder directives
  uselistorder i32 %v2_fb20, { 1, 0 }
  uselistorder i32 %v3_fab4, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 5, 6, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_12cfc, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fb44, { 1, 0 }
}

define i32 @function_fb50(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fb50:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_fb50 = load i32, i32* @r4, align 4
  %v6_fb50 = load i32, i32* @r5, align 4
  %v9_fb50 = load i32, i32* @r6, align 4
  %v12_fb50 = load i32, i32* @r7, align 4
  %v15_fb50 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1f1bc.158 to i32), i32* @r8, align 4
  %v2_fb58 = load i32, i32* @global_var_1f1bc.158, align 4
  store i32 ptrtoint (i32* @global_var_1f1e8.160 to i32), i32* %sb.global-to-local, align 4
  %v3_fb64 = mul i32 %v2_fb58, 16
  store i32 %v3_fb64, i32* %r3.global-to-local, align 4
  %v3_fb6c = urem i32 %arg3, 65536
  store i32 %v3_fb6c, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_fb78 = load i32, i32* @global_var_1f1e8.160, align 4
  %v1_fb7c = add i32 %v3_fb64, 16
  store i32 %v1_fb7c, i32* %r1.global-to-local, align 4
  store i32 %v3_fb6c, i32* %stack_var_-44, align 4
  %v15_fb84 = call i32 @function_14310(i32 %v2_fb78, i32 %v1_fb7c, i32 %v3_fb6c, i32 %v3_fb64)
  store i32 %v15_fb84, i32* %sl.global-to-local, align 4
  %v0_fb8c = load i32, i32* @r5, align 4
  %v1_fb90 = load i32, i32* %sb.global-to-local, align 4
  %v2_fb90 = inttoptr i32 %v1_fb90 to i32*
  store i32 %v15_fb84, i32* %v2_fb90, align 4
  %v2_fb94 = load i32, i32* @global_var_1f1bc.158, align 4
  store i32 %v2_fb94, i32* %fp.global-to-local, align 4
  %v1_fb98 = inttoptr i32 %v0_fb8c to i8*
  %v2_fb98 = call i32 @function_12c5c(i8* %v1_fb98)
  %sext = mul i32 %v2_fb98, 16777216
  %v1_fb9c = sdiv i32 %sext, 16777216
  %v2_fb9c = add nsw i32 %v1_fb9c, 1
  store i32 %v2_fb9c, i32* @r4, align 4
  store i32 %v1_fb9c, i32* @r7, align 4
  %v1_fba8 = call i32 @function_14074(i32 %v2_fb9c)
  %v0_fbac = load i32, i32* @r5, align 4
  store i32 %v0_fbac, i32* %r1.global-to-local, align 4
  %v0_fbb0 = load i32, i32* @r4, align 4
  store i32 %v0_fbb0, i32* %r2.global-to-local, align 4
  store i32 %v1_fba8, i32* @r6, align 4
  %v3_fbb8 = call i32 @function_12cd8(i32 %v1_fba8, i32 %v0_fbac, i32 %v0_fbb0)
  %v0_fbbc = load i32, i32* @r7, align 4
  %tmp23 = icmp slt i32 %v0_fbbc, 1
  %extract.t8 = trunc i32 %v0_fbbc to i8
  br i1 %tmp23, label %dec_label_pc_fbe8, label %dec_label_pc_fbc4

dec_label_pc_fbc4:                                ; preds = %dec_label_pc_fb50
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fbcc

dec_label_pc_fbcc:                                ; preds = %dec_label_pc_fbcc.dec_label_pc_fbcc_crit_edge, %dec_label_pc_fbc4
  %v1_fbd4 = phi i32 [ %v1_fbd4.pre, %dec_label_pc_fbcc.dec_label_pc_fbcc_crit_edge ], [ -81, %dec_label_pc_fbc4 ]
  %v2_fbd8 = phi i32 [ %v1_fbdc, %dec_label_pc_fbcc.dec_label_pc_fbcc_crit_edge ], [ 0, %dec_label_pc_fbc4 ]
  %v1_fbcc = load i32, i32* @r6, align 4
  %v2_fbcc = add i32 %v1_fbcc, %v2_fbd8
  %v3_fbcc = inttoptr i32 %v2_fbcc to i8*
  %v4_fbcc = load i8, i8* %v3_fbcc, align 1
  %v6_fbcc = zext i8 %v4_fbcc to i32
  %v1_fbd0 = sub i32 -1, %v1_fbd4
  %v2_fbd4 = xor i32 %v6_fbcc, %v1_fbd0
  store i32 %v2_fbd4, i32* %r3.global-to-local, align 4
  %v1_fbd8 = trunc i32 %v2_fbd4 to i8
  store i8 %v1_fbd8, i8* %v3_fbcc, align 1
  %v0_fbdc = load i32, i32* %r2.global-to-local, align 4
  %v1_fbdc = add i32 %v0_fbdc, 1
  store i32 %v1_fbdc, i32* %r2.global-to-local, align 4
  %v0_fbe0 = load i32, i32* @r7, align 4
  %v9_fbe0 = icmp eq i32 %v0_fbe0, %v1_fbdc
  br i1 %v9_fbe0, label %dec_label_pc_fbe8.loopexit, label %dec_label_pc_fbcc.dec_label_pc_fbcc_crit_edge

dec_label_pc_fbcc.dec_label_pc_fbcc_crit_edge:    ; preds = %dec_label_pc_fbcc
  %v1_fbd4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fbcc

dec_label_pc_fbe8.loopexit:                       ; preds = %dec_label_pc_fbcc
  %extract.t = trunc i32 %v1_fbdc to i8
  br label %dec_label_pc_fbe8

dec_label_pc_fbe8:                                ; preds = %dec_label_pc_fbe8.loopexit, %dec_label_pc_fb50
  %v0_fbf8.off0 = phi i8 [ %extract.t, %dec_label_pc_fbe8.loopexit ], [ %extract.t8, %dec_label_pc_fb50 ]
  %v2_fbe8 = load i32, i32* @global_var_1f1bc.158, align 4
  %v2_fbec = load i32, i32* @global_var_1f1e8.160, align 4
  store i32 %v2_fbec, i32* %r2.global-to-local, align 4
  %v3_fbf0 = mul i32 %v2_fbe8, 16
  %v2_fbf4 = add i32 %v2_fbec, %v3_fbf0
  store i32 %v2_fbf4, i32* %r3.global-to-local, align 4
  %v3_fbf8 = add i32 %v2_fbf4, 12
  %v4_fbf8 = inttoptr i32 %v3_fbf8 to i8*
  store i8 %v0_fbf8.off0, i8* %v4_fbf8, align 1
  %v0_fbfc = load i32, i32* @r6, align 4
  %v1_fbfc = load i32, i32* %sl.global-to-local, align 4
  %v2_fbfc = load i32, i32* %fp.global-to-local, align 4
  %v5_fbfc = mul i32 %v2_fbfc, 16
  %v6_fbfc = add i32 %v5_fbfc, %v1_fbfc
  %v7_fbfc = inttoptr i32 %v6_fbfc to i32*
  store i32 %v0_fbfc, i32* %v7_fbfc, align 4
  %v2_fc04 = load i32, i32* @global_var_1f1bc.158, align 4
  store i32 %v2_fc04, i32* @r7, align 4
  %v2_fc08 = load i32, i32* @global_var_1f1e8.160, align 4
  store i32 %v2_fc08, i32* %sl.global-to-local, align 4
  %v1_fc0c = inttoptr i32 %arg2 to i8*
  %v2_fc0c = call i32 @function_12c5c(i8* %v1_fc0c)
  %sext1 = mul i32 %v2_fc0c, 16777216
  %v1_fc10 = sdiv i32 %sext1, 16777216
  %v2_fc10 = add nsw i32 %v1_fc10, 1
  store i32 %v2_fc10, i32* @r4, align 4
  store i32 %v1_fc10, i32* @r5, align 4
  %v1_fc1c = call i32 @function_14074(i32 %v2_fc10)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_fc24 = load i32, i32* @r4, align 4
  store i32 %v0_fc24, i32* %r2.global-to-local, align 4
  store i32 %v1_fc1c, i32* %r6.global-to-local, align 4
  %v3_fc2c = call i32 @function_12cd8(i32 %v1_fc1c, i32 %arg2, i32 %v0_fc24)
  %v0_fc30 = load i32, i32* @r5, align 4
  %tmp24 = icmp slt i32 %v0_fc30, 1
  %extract.t10 = trunc i32 %v0_fc30 to i8
  br i1 %tmp24, label %dec_label_pc_fc5c, label %dec_label_pc_fc38

dec_label_pc_fc38:                                ; preds = %dec_label_pc_fbe8
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc40

dec_label_pc_fc40:                                ; preds = %dec_label_pc_fc40.dec_label_pc_fc40_crit_edge, %dec_label_pc_fc38
  %v1_fc48 = phi i32 [ %v1_fc48.pre, %dec_label_pc_fc40.dec_label_pc_fc40_crit_edge ], [ -81, %dec_label_pc_fc38 ]
  %v2_fc4c = phi i32 [ %v1_fc50, %dec_label_pc_fc40.dec_label_pc_fc40_crit_edge ], [ 0, %dec_label_pc_fc38 ]
  %v1_fc40 = load i32, i32* %r6.global-to-local, align 4
  %v2_fc40 = add i32 %v1_fc40, %v2_fc4c
  %v3_fc40 = inttoptr i32 %v2_fc40 to i8*
  %v4_fc40 = load i8, i8* %v3_fc40, align 1
  %v6_fc40 = zext i8 %v4_fc40 to i32
  %v1_fc44 = sub i32 -1, %v1_fc48
  %v2_fc48 = xor i32 %v6_fc40, %v1_fc44
  store i32 %v2_fc48, i32* %r3.global-to-local, align 4
  %v1_fc4c = trunc i32 %v2_fc48 to i8
  store i8 %v1_fc4c, i8* %v3_fc40, align 1
  %v0_fc50 = load i32, i32* %r2.global-to-local, align 4
  %v1_fc50 = add i32 %v0_fc50, 1
  store i32 %v1_fc50, i32* %r2.global-to-local, align 4
  %v0_fc54 = load i32, i32* @r5, align 4
  %v9_fc54 = icmp eq i32 %v0_fc54, %v1_fc50
  br i1 %v9_fc54, label %dec_label_pc_fc5c.loopexit, label %dec_label_pc_fc40.dec_label_pc_fc40_crit_edge

dec_label_pc_fc40.dec_label_pc_fc40_crit_edge:    ; preds = %dec_label_pc_fc40
  %v1_fc48.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc40

dec_label_pc_fc5c.loopexit:                       ; preds = %dec_label_pc_fc40
  %extract.t9 = trunc i32 %v1_fc50 to i8
  br label %dec_label_pc_fc5c

dec_label_pc_fc5c:                                ; preds = %dec_label_pc_fc5c.loopexit, %dec_label_pc_fbe8
  %v0_fc6c.off0 = phi i8 [ %extract.t9, %dec_label_pc_fc5c.loopexit ], [ %extract.t10, %dec_label_pc_fbe8 ]
  %v2_fc5c = load i32, i32* @global_var_1f1bc.158, align 4
  %v2_fc60 = load i32, i32* @global_var_1f1e8.160, align 4
  %v3_fc64 = mul i32 %v2_fc5c, 16
  %v2_fc68 = or i32 %v3_fc64, 13
  %v3_fc6c = add i32 %v2_fc68, %v2_fc60
  %v4_fc6c = inttoptr i32 %v3_fc6c to i8*
  store i8 %v0_fc6c.off0, i8* %v4_fc6c, align 1
  %v2_fc74 = load i32, i32* @global_var_1f1bc.158, align 4
  store i32 %v2_fc74, i32* %lr.global-to-local, align 4
  %v4_fc78 = load i8, i8* @global_var_1f1ed.163, align 1
  %v5_fc78 = zext i8 %v4_fc78 to i32
  %v3_fc7c = load i8, i8* bitcast (i8** @global_var_1f1ec.162 to i8*), align 4
  %v4_fc7c = zext i8 %v3_fc7c to i32
  %v2_fc80 = load i32, i32* @global_var_1f1e8.160, align 4
  %v4_fc84 = mul nuw nsw i32 %v5_fc78, 256
  %v5_fc84 = or i32 %v4_fc7c, %v4_fc84
  store i32 %v5_fc84, i32* %r2.global-to-local, align 4
  %v3_fc88 = mul i32 %v2_fc74, 16
  %v2_fc8c = add i32 %v2_fc80, %v3_fc88
  store i32 %v2_fc8c, i32* %r1.global-to-local, align 4
  %v3_fc94 = add i32 %v2_fc8c, 9
  %v4_fc94 = inttoptr i32 %v3_fc94 to i8*
  store i8 %v4_fc78, i8* %v4_fc94, align 1
  %v0_fc98 = load i32, i32* %r2.global-to-local, align 4
  %v1_fc98 = trunc i32 %v0_fc98 to i8
  %v2_fc98 = load i32, i32* %r1.global-to-local, align 4
  %v3_fc98 = add i32 %v2_fc98, 8
  %v4_fc98 = inttoptr i32 %v3_fc98 to i8*
  store i8 %v1_fc98, i8* %v4_fc98, align 1
  %v4_fc9c = load i8, i8* @global_var_1f1ed.163, align 1
  %v5_fc9c = zext i8 %v4_fc9c to i32
  %v3_fca0 = load i8, i8* bitcast (i8** @global_var_1f1ec.162 to i8*), align 4
  %v4_fca0 = zext i8 %v3_fca0 to i32
  %v4_fca4 = mul nuw nsw i32 %v5_fc9c, 256
  %v5_fca4 = or i32 %v4_fca0, %v4_fca4
  %v2_fca8 = load i32, i32* %stack_var_-44, align 4
  %v2_fcac = add i32 %v5_fca4, %v2_fca8
  store i32 %v2_fcac, i32* %r3.global-to-local, align 4
  %v3_fcb011 = udiv i32 %v2_fcac, 256
  %v1_fcb4 = trunc i32 %v3_fcb011 to i8
  %v2_fcb4 = load i32, i32* %r1.global-to-local, align 4
  %v3_fcb4 = add i32 %v2_fcb4, 11
  %v4_fcb4 = inttoptr i32 %v3_fcb4 to i8*
  store i8 %v1_fcb4, i8* %v4_fcb4, align 1
  %v0_fcb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_fcb8 = trunc i32 %v0_fcb8 to i8
  %v2_fcb8 = load i32, i32* %r1.global-to-local, align 4
  %v3_fcb8 = add i32 %v2_fcb8, 10
  %v4_fcb8 = inttoptr i32 %v3_fcb8 to i8*
  store i8 %v1_fcb8, i8* %v4_fcb8, align 1
  %v4_fcbc = load i8, i8* @global_var_1f1ed.163, align 1
  %v5_fcbc = zext i8 %v4_fcbc to i32
  %v3_fcc0 = load i8, i8* bitcast (i8** @global_var_1f1ec.162 to i8*), align 4
  %v4_fcc0 = zext i8 %v3_fcc0 to i32
  %v4_fcc4 = mul nuw nsw i32 %v5_fcbc, 256
  %v5_fcc4 = or i32 %v4_fcc0, %v4_fcc4
  %v2_fcc8 = load i32, i32* %stack_var_-44, align 4
  %v2_fccc = add i32 %v5_fcc4, %v2_fcc8
  store i32 %v2_fccc, i32* %r2.global-to-local, align 4
  %v0_fcd0 = load i32, i32* @r7, align 4
  %v3_fcd0 = mul i32 %v0_fcd0, 16
  %v1_fcd4 = load i32, i32* %sl.global-to-local, align 4
  %v2_fcd4 = add i32 %v1_fcd4, %v3_fcd0
  store i32 %v2_fcd4, i32* %r3.global-to-local, align 4
  %v0_fcd8 = load i32, i32* %lr.global-to-local, align 4
  %v1_fcd8 = add i32 %v0_fcd8, 1
  store i32 %v1_fcd8, i32* @lr, align 4
  %v3_fcdc = sdiv i32 %v2_fccc, 256
  store i32 %v3_fcdc, i32* %r1.global-to-local, align 4
  %v0_fce0 = load i32, i32* %r6.global-to-local, align 4
  %v2_fce0 = add i32 %v2_fcd4, 4
  %v3_fce0 = inttoptr i32 %v2_fce0 to i32*
  store i32 %v0_fce0, i32* %v3_fce0, align 4
  %v0_fce4 = load i32, i32* @lr, align 4
  %v1_fce4 = load i32, i32* @r8, align 4
  %v2_fce4 = inttoptr i32 %v1_fce4 to i32*
  store i32 %v0_fce4, i32* %v2_fce4, align 4
  %v0_fce8 = load i32, i32* %r1.global-to-local, align 4
  %v1_fce8 = trunc i32 %v0_fce8 to i8
  store i8 %v1_fce8, i8* @global_var_1f1ed.163, align 1
  %v0_fcec = load i32, i32* %r2.global-to-local, align 4
  %v1_fcec = trunc i32 %v0_fcec to i8
  store i8 %v1_fcec, i8* bitcast (i8** @global_var_1f1ec.162 to i8*), align 4
  store i32 %v3_fb50, i32* @r4, align 4
  store i32 %v6_fb50, i32* @r5, align 4
  store i32 %v9_fb50, i32* @r6, align 4
  store i32 %v12_fb50, i32* @r7, align 4
  store i32 %v15_fb50, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1f1ec.162 to i32)

; uselistorder directives
  uselistorder i32 %v1_fc50, { 0, 2, 3, 1 }
  uselistorder i32 %v1_fc1c, { 1, 0 }
  uselistorder i32 %v1_fbdc, { 0, 2, 3, 1 }
  uselistorder i32 %v1_fba8, { 1, 0 }
  uselistorder i32 %v3_fb6c, { 1, 2, 0 }
  uselistorder i32 %v3_fb64, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32 -81, { 0, 2, 1, 3 }
  uselistorder i32 (i8*)* @function_12c5c, { 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 74, 75, 76, 77, 78, 79, 80, 81, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73 }
  uselistorder i32 (i32, i32, i32, i32)* @function_14310, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_fd04(i32 %arg1) local_unnamed_addr {
dec_label_pc_fd04:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp249 = call i32 @__decompiler_undefined_function_0()
  %tmp250 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-52 = alloca i8, align 1
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %tmp278 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-36 = alloca i32, align 4
  %v3_fd04 = load i32, i32* @r4, align 4
  store i32 %v3_fd04, i32* %stack_var_-36, align 4
  %v6_fd04 = load i32, i32* @r5, align 4
  %v15_fd04 = load i32, i32* @r8, align 4
  %v18_fd04 = load i32, i32* @sb, align 4
  %v21_fd04 = load i32, i32* @sl, align 4
  %v0_fd10 = call i32 @function_1361c()
  store i32 %v0_fd10, i32* %r0.global-to-local, align 4
  %v7_fd14 = icmp eq i32 %v0_fd10, -1
  %. = zext i1 %v7_fd14 to i32
  %tmp281 = icmp slt i32 %v0_fd10, 1
  %storemerge240 = select i1 %tmp281, i32 %., i32 1
  store i32 %storemerge240, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f258.154 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd30 = icmp eq i32 %storemerge240, 0
  store i1 %v2_fd30, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_fd10, i32* @global_var_1f258.154, align 4
  br i1 %v2_fd30, label %dec_label_pc_10008, label %dec_label_pc_fd3c

dec_label_pc_fd3c:                                ; preds = %dec_label_pc_fd04
  store i32 %v3_fd04, i32* %r4.global-to-local, align 4
  store i32 %v6_fd04, i32* %r5.global-to-local, align 4
  store i32 %v15_fd04, i32* %r8.global-to-local, align 4
  store i32 %v18_fd04, i32* @sb, align 4
  store i32 %v21_fd04, i32* @sl, align 4
  ret i32 %v0_fd10

dec_label_pc_10008:                               ; preds = %dec_label_pc_fd04
  %v0_10008 = call i32 @function_12f14()
  store i32 %v0_10008, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f238.84 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_10008, i32* @global_var_1f238.84, align 4
  %v1_10014 = call i32 @function_f940(i32 %v0_10008)
  %v0_10018 = load i32, i32* @r4, align 4
  store i32 %v0_10018, i32* %r0.global-to-local, align 4
  %v1_1001c = inttoptr i32 %v0_10018 to i32*
  %v2_1001c = call i32 @function_138c0(i32* %v1_1001c)
  store i32 ptrtoint (i32* @global_var_1f1f0.156 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_1001c, i32* @global_var_1f1f0.156, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_10030 = call i32 @function_141c8(i32 256, i32 288)
  store i32 %v2_10030, i32* %lr.global-to-local, align 4
  %v0_1003c = load i32, i32* @r4, align 4
  store i32 %v0_1003c, i32* %stack_var_-48, align 4
  store i32 %v2_10030, i32* @global_var_1f250.168, align 4
  store i32 %v0_1003c, i32* %r3.global-to-local, align 4
  store i32 %v0_1003c, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_1003c, i32* %ip.global-to-local, align 4
  %v1_10054 = add i32 %v2_10030, 4
  store i32 %v1_10054, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10058

dec_label_pc_10058:                               ; preds = %dec_label_pc_10058.dec_label_pc_10058_crit_edge, %dec_label_pc_10008
  %v0_10070 = phi i32 [ %v0_10070.pre, %dec_label_pc_10058.dec_label_pc_10058_crit_edge ], [ %v0_1003c, %dec_label_pc_10008 ]
  %v0_10060 = phi i32 [ %v0_10078, %dec_label_pc_10058.dec_label_pc_10058_crit_edge ], [ %v0_1003c, %dec_label_pc_10008 ]
  %v1_10068 = phi i32 [ %v1_10068.pre, %dec_label_pc_10058.dec_label_pc_10058_crit_edge ], [ %v2_10030, %dec_label_pc_10008 ]
  %v3_10058 = mul i32 %v0_10060, 256
  store i32 %v3_10058, i32* %r2.global-to-local, align 4
  %v1_10060 = add i32 %v0_10060, 1
  store i32 %v1_10060, i32* %ip.global-to-local, align 4
  %v2_10064 = mul i32 %v0_10060, 288
  %v2_10068 = add i32 %v1_10068, 12
  %v2_10070 = add i32 %v2_10068, %v2_10064
  %v3_10070 = inttoptr i32 %v2_10070 to i32*
  store i32 %v0_10070, i32* %v3_10070, align 4
  %v0_10074 = load i32, i32* %r0.global-to-local, align 4
  %v1_10074 = load i32, i32* %r1.global-to-local, align 4
  %v2_10074 = inttoptr i32 %v1_10074 to i32*
  store i32 %v0_10074, i32* %v2_10074, align 4
  %v3_10074 = load i32, i32* %r1.global-to-local, align 4
  %v4_10074 = add i32 %v3_10074, 288
  store i32 %v4_10074, i32* %r1.global-to-local, align 4
  %v0_10078 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_10078, i32* %r3.global-to-local, align 4
  %v7_1007c = icmp sgt i32 %v1_10060, 255
  br i1 %v7_1007c, label %dec_label_pc_10080, label %dec_label_pc_10058.dec_label_pc_10058_crit_edge

dec_label_pc_10058.dec_label_pc_10058_crit_edge:  ; preds = %dec_label_pc_10058
  %v1_10068.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_10070.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10058

dec_label_pc_10080:                               ; preds = %dec_label_pc_10058
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_10078, i32* %stack_var_-48, align 4
  %v3_10090 = call i32 @function_13edc(i32 2, i32 3, i32 6)
  store i32 %v3_10090, i32* %r0.global-to-local, align 4
  %v2_10098 = icmp eq i32 %v3_10090, -1
  store i1 %v2_10098, i1* %cpsr_c.global-to-local, align 1
  %v7_10098 = icmp eq i32 %v3_10090, -1
  store i1 %v7_10098, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10090, i32* @r4, align 4
  store i32 %v3_10090, i32* @global_var_1f254.170, align 4
  br i1 %v7_10098, label %dec_label_pc_11268, label %dec_label_pc_100a8

dec_label_pc_100a8:                               ; preds = %dec_label_pc_10080
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_100ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_100ac, i32* @r2, align 4
  %v2_100b0 = call i32 @function_1352c(i32 %v3_10090, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_100b8 = or i32 %v2_100b0, 2048
  store i32 %v1_100b8, i32* @r2, align 4
  %v0_100bc = load i32, i32* @r4, align 4
  store i32 %v0_100bc, i32* %r0.global-to-local, align 4
  %v2_100c0 = call i32 @function_1352c(i32 %v0_100bc, i32 4)
  %v2_100cc = load i32, i32* @global_var_1f254.170, align 4
  store i32 %v2_100cc, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_100d4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_100d4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_100dc = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_100dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v6_100ec = call i32 @function_13eac(i32 %v2_100cc, i32 %v0_100d4, i32 3, i32* nonnull %stack_var_-48, i32 4)
  store i32 %v6_100ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100f0 = icmp eq i32 %v6_100ec, 0
  store i1 %v2_100f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_100f0, label %dec_label_pc_100f8, label %dec_label_pc_1125c

dec_label_pc_100f8:                               ; preds = %dec_label_pc_100a8, %dec_label_pc_100f8
  %v0_100f8 = call i32 @function_f8e8()
  %v3_100fc = mul i32 %v0_100f8, 65536
  store i32 %v3_100fc, i32* %r0.global-to-local, align 4
  %v1_10108 = mul i32 %v0_100f8, 256
  %v3_1010c = and i32 %v1_10108, 65280
  %tmp284 = udiv i32 %v0_100f8, 256
  %v4_10110 = urem i32 %tmp284, 256
  %v5_10110 = or i32 %v4_10110, %v3_1010c
  store i32 %v5_10110, i32* %r3.global-to-local, align 4
  %v2_10114 = icmp ugt i32 %v5_10110, 1023
  store i1 %v2_10114, i1* %cpsr_c.global-to-local, align 1
  %v7_10114 = icmp eq i32 %v5_10110, 1024
  store i1 %v7_10114, i1* %cpsr_z.global-to-local, align 1
  %v3_10118 = icmp ult i32 %v5_10110, 1022
  br i1 %v3_10118, label %dec_label_pc_100f8, label %dec_label_pc_1011c

dec_label_pc_1011c:                               ; preds = %dec_label_pc_100f8
  %v5_10104.le = trunc i32 %v0_100f8 to i8
  store i32 ptrtoint (i8** @global_var_1f1c0.172 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i8 69, i8* bitcast (i8** @global_var_1f1c0.172 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1f1c3.173 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1f1c2.174 to i8*), align 4
  %v0_10150 = call i32 @function_f8e8()
  %v1_10150 = trunc i32 %v0_10150 to i8
  store i32 %v0_10150, i32* %r0.global-to-local, align 4
  %v4_10158 = sext i8 %v5_10104.le to i32
  %v3_1015c = load i8, i8* @global_var_1f1e0.176, align 1
  store i32 ptrtoint (i8** @global_var_1f1c0.172 to i32), i32* %lr.global-to-local, align 4
  %v3_10164239 = udiv i32 %v4_10158, 256
  store i8 64, i8* bitcast (i32* @global_var_1f1c8.177 to i8*), align 4
  %v2_10170 = and i32 %v0_10150, 128
  %v3_10170 = icmp ne i32 %v2_10170, 0
  store i1 %v3_10170, i1* %cpsr_c.global-to-local, align 1
  %v4_10170238 = udiv i32 %v0_10150, 256
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_1015c, 16
  %v1_10178 = zext i8 %tmp to i32
  store i32 6, i32* @r4, align 4
  %v1_10180 = trunc i32 %v4_10170238 to i8
  store i8 %v1_10180, i8* bitcast (i32* @global_var_1f1c5.178 to i8*), align 4
  %v1_10184 = or i32 %v1_10178, 80
  store i32 %v1_10184, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v1_1018c = trunc i32 %v1_10184 to i8
  store i8 %v1_1018c, i8* @global_var_1f1e0.176, align 1
  %v1_10190 = trunc i32 %v3_10164239 to i8
  store i8 %v1_10190, i8* bitcast (i32* @global_var_1f1d5.179 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1f1d7.180 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1f1c9.181 to i8*), align 4
  store i32 %v4_10158, i32* %ip.global-to-local, align 4
  store i8 %v1_10150, i8* bitcast (i32* @global_var_1f1c4.182 to i8*), align 4
  store i8 %v5_10104.le, i8* bitcast (i32* @global_var_1f1d4.175 to i8*), align 4
  %v0_101a8 = load i32, i32* @r6, align 4
  %v1_101a8 = trunc i32 %v0_101a8 to i8
  store i8 %v1_101a8, i8* bitcast (i32* @global_var_1f1d6.183 to i8*), align 4
  %v0_101ac = call i32 @function_f8e8()
  %v1_101ac = trunc i32 %v0_101ac to i8
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* @lr, align 4
  %v3_101b4 = load i8, i8* @global_var_1f1e1.184, align 1
  %v4_101b4 = zext i8 %v3_101b4 to i32
  %v2_101b8 = and i32 %v0_101ac, 128
  %v3_101b8 = icmp ne i32 %v2_101b8, 0
  store i1 %v3_101b8, i1* %cpsr_c.global-to-local, align 1
  %v4_101b8 = sdiv i32 %v0_101ac, 256
  store i32 %v4_101b8, i32* %ip.global-to-local, align 4
  %v1_101bc = or i32 %v4_101b4, 2
  store i32 %v1_101bc, i32* %r3.global-to-local, align 4
  store i32 %v0_101ac, i32* @r5, align 4
  %v1_101c4 = trunc i32 %v4_101b8 to i8
  store i8 %v1_101c4, i8* bitcast (i32* @global_var_1f1e3.185 to i8*), align 4
  %v1_101c8 = trunc i32 %v1_101bc to i8
  store i8 %v1_101c8, i8* @global_var_1f1e1.184, align 1
  store i8 %v1_101ac, i8* bitcast (i32* @global_var_1f1e2.186 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_101dc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_101ec = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d40.194 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_101fc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15d40.194 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15d48.196 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_1020c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_15d48.196 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_1021c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r1.global-to-local, align 4
  %v5_1022c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d50.198 to i32), i32* %r1.global-to-local, align 4
  %v0_10238 = load i32, i32* @r4, align 4
  store i32 %v0_10238, i32* %r2.global-to-local, align 4
  %v4_1023c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15d50.198 to i32), i32 %v0_10238)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d58.200 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_1024c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d58.200 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d60.202 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_1025c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d60.202 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d68.204 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_1026c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d68.204 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d74.206 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1027c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15d74.206 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d7c.208 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1028c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15d7c.208 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_15d60.202 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d60.202 to i32), i32* %r1.global-to-local, align 4
  %v5_1029c = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_15d60.202 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d60.202 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15d60.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_102ac = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_15d60.202 to i32), i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), i32* %r1.global-to-local, align 4
  %v5_102bc = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_102cc = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16190.212 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_102dc = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), i32 ptrtoint (i32* @global_var_16190.212 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d74.206 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_102ec = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), i32 ptrtoint (i32* @global_var_15d74.206 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_102fc = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d8c.214 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_1030c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d8c.214 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r1.global-to-local, align 4
  %v5_1031c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d98.216 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_1032c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15d98.216 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_1033c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), i32* %r1.global-to-local, align 4
  %v5_1034c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d74.206 to i32), i32* %r1.global-to-local, align 4
  %v0_10358 = load i32, i32* @r4, align 4
  store i32 %v0_10358, i32* %r2.global-to-local, align 4
  %v4_1035c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), i32 ptrtoint (i32* @global_var_15d74.206 to i32), i32 %v0_10358)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15da8.220 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_1036c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15da8.220 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15db0.222 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_1037c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15db0.222 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f04.224 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_1038c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15f04.224 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15dbc.226 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_1039c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([9 x i8]* @global_var_15dbc.226 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f04.224 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_103ac = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15f04.224 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15dc8.228 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_103bc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15dc8.228 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d8c.214 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_103cc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d8c.214 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16190.212 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_103dc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_16190.212 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15dd0.230 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_103ec = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15dd0.230 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_15dd8.232 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_103fc = call i32 @function_fb50(i32 ptrtoint ([14 x i8]* @global_var_15dd8.232 to i32), i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_15dd8.232 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15de8.234 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_1040c = call i32 @function_fb50(i32 ptrtoint ([14 x i8]* @global_var_15dd8.232 to i32), i32 ptrtoint ([7 x i8]* @global_var_15de8.234 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_15dd8.232 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15df0.236 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_1041c = call i32 @function_fb50(i32 ptrtoint ([14 x i8]* @global_var_15dd8.232 to i32), i32 ptrtoint ([4 x i8]* @global_var_15df0.236 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_15dd8.232 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15df4.238 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_1042c = call i32 @function_fb50(i32 ptrtoint ([14 x i8]* @global_var_15dd8.232 to i32), i32 ptrtoint ([7 x i8]* @global_var_15df4.238 to i32), i32 13)
  store i32 ptrtoint ([8 x i8]* @global_var_15dfc.240 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15dfc.240 to i32), i32* %r1.global-to-local, align 4
  %v5_1043c = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_15dfc.240 to i32), i32 ptrtoint ([8 x i8]* @global_var_15dfc.240 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15dfc.240 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_1044c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([8 x i8]* @global_var_15dfc.240 to i32), i32 7)
  store i32 ptrtoint ([11 x i8]* @global_var_15e04.242 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_15e04.242 to i32), i32* %r1.global-to-local, align 4
  %v5_1045c = call i32 @function_fb50(i32 ptrtoint ([11 x i8]* @global_var_15e04.242 to i32), i32 ptrtoint ([11 x i8]* @global_var_15e04.242 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15e10.244 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1046c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_15e10.244 to i32), i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15e10.244 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15e10.244 to i32), i32* %r1.global-to-local, align 4
  %v5_1047c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_15e10.244 to i32), i32 ptrtoint ([6 x i8]* @global_var_15e10.244 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15e10.244 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d98.216 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1048c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_15e10.244 to i32), i32 ptrtoint (i32* @global_var_15d98.216 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15e10.244 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d74.206 to i32), i32* %r1.global-to-local, align 4
  %v0_10498 = load i32, i32* @r4, align 4
  store i32 %v0_10498, i32* %r2.global-to-local, align 4
  %v4_1049c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_15e10.244 to i32), i32 ptrtoint (i32* @global_var_15d74.206 to i32), i32 %v0_10498)
  store i32 ptrtoint (i32* @global_var_15e18.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d8c.214 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_104ac = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_15e18.246 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d8c.214 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_15e20.248 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16190.212 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_104bc = call i32 @function_fb50(i32 ptrtoint ([14 x i8]* @global_var_15e20.248 to i32), i32 ptrtoint (i32* @global_var_16190.212 to i32), i32 13)
  store i32 ptrtoint (i32* @global_var_15dc8.228 to i32), i32* %r0.global-to-local, align 4
  %v0_104c4 = load i32, i32* @r4, align 4
  store i32 %v0_104c4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15dc8.228 to i32), i32* %r1.global-to-local, align 4
  %v3_104cc = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_15dc8.228 to i32), i32 ptrtoint (i32* @global_var_15dc8.228 to i32), i32 %v0_104c4)
  store i32 ptrtoint (i32* @global_var_15d50.198 to i32), i32* %r0.global-to-local, align 4
  %v0_104d4 = load i32, i32* @r4, align 4
  store i32 %v0_104d4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d50.198 to i32), i32* %r1.global-to-local, align 4
  %v3_104dc = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_15d50.198 to i32), i32 ptrtoint (i32* @global_var_15d50.198 to i32), i32 %v0_104d4)
  store i32 ptrtoint ([5 x i8]* @global_var_15e30.250 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15e30.250 to i32), i32* %r1.global-to-local, align 4
  %v5_104ec = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_15e30.250 to i32), i32 ptrtoint ([5 x i8]* @global_var_15e30.250 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15e30.250 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_104fc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15e30.250 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e38.252 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v4_1050c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15e38.252 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e40.254 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1051c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15e40.254 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e48.256 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1052c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15e48.256 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15e50.258 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_1053c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_15e50.258 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15e58.260 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_1054c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15e58.260 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15e60.262 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_1055c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_15e60.262 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15e68.264 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_1056c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_15e68.264 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e74.266 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1057c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15e74.266 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e84.268 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1058c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15e84.268 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15e94.270 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_1059c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([7 x i8]* @global_var_15e94.270 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15e9c.272 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_105ac = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15e9c.272 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15ea4.274 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_105bc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_15ea4.274 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_105cc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15eb0.276 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_105dc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([8 x i8]* @global_var_15eb0.276 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15eb8.278 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_105ec = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15eb8.278 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ec4.280 to i32), i32* %r1.global-to-local, align 4
  %v0_105f8 = load i32, i32* @r4, align 4
  store i32 %v0_105f8, i32* %r2.global-to-local, align 4
  %v4_105fc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15ec4.280 to i32), i32 %v0_105f8)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ecc.282 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1060c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15ecc.282 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16190.212 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1061c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_16190.212 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d98.216 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1062c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15d98.216 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d7c.208 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1063c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15d7c.208 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d74.206 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1064c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15d74.206 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e84.268 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_1065c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15e84.268 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ed4.284 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_1066c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15ed4.284 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15da8.220 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_1067c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([5 x i8]* @global_var_15da8.220 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15de8.234 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_1068c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([7 x i8]* @global_var_15de8.234 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d6c.286 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_1069c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([5 x i8]* @global_var_15d6c.286 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee0.288 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_106ac = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15ee0.288 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15eec.290 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_106bc = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([6 x i8]* @global_var_15eec.290 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15ef4.292 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_106cc = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([4 x i8]* @global_var_15ef4.292 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ef8.294 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_106dc = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15ef8.294 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f00.296 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_106ec = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15f00.296 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f0c.298 to i32), i32* %r1.global-to-local, align 4
  %v0_106f8 = load i32, i32* @r4, align 4
  store i32 %v0_106f8, i32* %r2.global-to-local, align 4
  %v5_106fc = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f0c.298 to i32), i32 %v0_106f8)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15f14.300 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_1070c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([9 x i8]* @global_var_15f14.300 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f20.302 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_1071c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15f20.302 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f28.304 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1072c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15f28.304 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f30.306 to i32), i32* %r1.global-to-local, align 4
  %v0_10738 = load i32, i32* @r4, align 4
  store i32 %v0_10738, i32* %r2.global-to-local, align 4
  %v4_1073c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15f30.306 to i32), i32 %v0_10738)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f38.308 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_1074c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15f38.308 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f40.310 to i32), i32* %r1.global-to-local, align 4
  %v0_10758 = load i32, i32* @r4, align 4
  store i32 %v0_10758, i32* %r2.global-to-local, align 4
  %v5_1075c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f40.310 to i32), i32 %v0_10758)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15f48.312 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_1076c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([8 x i8]* @global_var_15f48.312 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f50.314 to i32), i32* %r1.global-to-local, align 4
  %v0_10778 = load i32, i32* @r4, align 4
  store i32 %v0_10778, i32* %r2.global-to-local, align 4
  %v4_1077c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15f50.314 to i32), i32 %v0_10778)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15df4.238 to i32), i32* %r1.global-to-local, align 4
  %v0_10788 = load i32, i32* @r4, align 4
  store i32 %v0_10788, i32* %r2.global-to-local, align 4
  %v5_1078c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([7 x i8]* @global_var_15df4.238 to i32), i32 %v0_10788)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f58.316 to i32), i32* %r1.global-to-local, align 4
  %v0_10798 = load i32, i32* @r4, align 4
  store i32 %v0_10798, i32* %r2.global-to-local, align 4
  %v4_1079c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_15f58.316 to i32), i32 %v0_10798)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f60.318 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_107ac = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f60.318 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15f68.320 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_107bc = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([9 x i8]* @global_var_15f68.320 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_15f74.322 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f74.322 to i32), i32* %r1.global-to-local, align 4
  %v5_107cc = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_15f74.322 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f74.322 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15d6c.286 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d6c.286 to i32), i32* %r1.global-to-local, align 4
  %v5_107dc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_15d6c.286 to i32), i32 ptrtoint ([5 x i8]* @global_var_15d6c.286 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15d6c.286 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_107ec = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_15d6c.286 to i32), i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1606c.324 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_107fc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_1606c.324 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f7c.326 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_1080c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15f7c.326 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15f84.328 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_1081c = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_15f84.328 to i32), i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15f84.328 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15f84.328 to i32), i32* %r1.global-to-local, align 4
  %v5_1082c = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_15f84.328 to i32), i32 ptrtoint ([8 x i8]* @global_var_15f84.328 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_15f8c.330 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_1083c = call i32 @function_fb50(i32 ptrtoint ([4 x i8]* @global_var_15f8c.330 to i32), i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 3)
  store i32 ptrtoint ([8 x i8]* @global_var_15f90.332 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f98.334 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_1084c = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_15f90.332 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f98.334 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_15fa0.336 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15fa0.336 to i32), i32* %r1.global-to-local, align 4
  %v5_1085c = call i32 @function_fb50(i32 ptrtoint ([4 x i8]* @global_var_15fa0.336 to i32), i32 ptrtoint ([4 x i8]* @global_var_15fa0.336 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fa4.338 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_1086c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_15fa4.338 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15fb0.340 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_1087c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15fb0.340 to i32), i32 4)
  store i32 ptrtoint ([7 x i8]* @global_var_15fb8.342 to i32), i32* %r0.global-to-local, align 4
  %v0_10884 = load i32, i32* @r4, align 4
  store i32 %v0_10884, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15fb8.342 to i32), i32* %r1.global-to-local, align 4
  %v5_1088c = call i32 @function_fb50(i32 ptrtoint ([7 x i8]* @global_var_15fb8.342 to i32), i32 ptrtoint ([7 x i8]* @global_var_15fb8.342 to i32), i32 %v0_10884)
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15fb8.342 to i32), i32* %r1.global-to-local, align 4
  %v0_10898 = load i32, i32* @r4, align 4
  store i32 %v0_10898, i32* %r2.global-to-local, align 4
  %v4_1089c = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 ptrtoint ([7 x i8]* @global_var_15fb8.342 to i32), i32 %v0_10898)
  store i32 ptrtoint (i32* @global_var_15fc0.344 to i32), i32* %r0.global-to-local, align 4
  %v0_108a4 = load i32, i32* @r4, align 4
  store i32 %v0_108a4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fc0.344 to i32), i32* %r1.global-to-local, align 4
  %v3_108ac = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_15fc0.344 to i32), i32 ptrtoint (i32* @global_var_15fc0.344 to i32), i32 %v0_108a4)
  store i32 ptrtoint ([6 x i8]* @global_var_15fc8.346 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15d60.202 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_108bc = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_15fc8.346 to i32), i32 ptrtoint ([8 x i8]* @global_var_15d60.202 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15fd0.348 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_108cc = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_15fd0.348 to i32), i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15fd0.348 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15da8.220 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_108dc = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_15fd0.348 to i32), i32 ptrtoint ([5 x i8]* @global_var_15da8.220 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15fd0.348 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_108ec = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_15fd0.348 to i32), i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 5)
  store i32 ptrtoint (i32* @global_var_15fd8.350 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v3_108fc = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_15fd8.350 to i32), i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 5)
  store i32 ptrtoint ([9 x i8]* @global_var_15fe0.352 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15fec.354 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_1090c = call i32 @function_fb50(i32 ptrtoint ([9 x i8]* @global_var_15fe0.352 to i32), i32 ptrtoint ([7 x i8]* @global_var_15fec.354 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_15ff4.356 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15ff4.356 to i32), i32* %r1.global-to-local, align 4
  %v5_1091c = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_15ff4.356 to i32), i32 ptrtoint ([8 x i8]* @global_var_15ff4.356 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_15ffc.358 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15ffc.358 to i32), i32* %r1.global-to-local, align 4
  %v5_1092c = call i32 @function_fb50(i32 ptrtoint ([7 x i8]* @global_var_15ffc.358 to i32), i32 ptrtoint ([7 x i8]* @global_var_15ffc.358 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_15ffc.358 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_16004.360 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_1093c = call i32 @function_fb50(i32 ptrtoint ([7 x i8]* @global_var_15ffc.358 to i32), i32 ptrtoint ([8 x i8]* @global_var_16004.360 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_1600c.362 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([10 x i8]* @global_var_16014.364 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_1094c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_1600c.362 to i32), i32 ptrtoint ([10 x i8]* @global_var_16014.364 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_1600c.362 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f60.318 to i32), i32* %r1.global-to-local, align 4
  %v0_10958 = load i32, i32* @r4, align 4
  store i32 %v0_10958, i32* %r2.global-to-local, align 4
  %v5_1095c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_1600c.362 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f60.318 to i32), i32 %v0_10958)
  store i32 ptrtoint ([5 x i8]* @global_var_16020.366 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16020.366 to i32), i32* %r1.global-to-local, align 4
  %v5_1096c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_16020.366 to i32), i32 ptrtoint ([5 x i8]* @global_var_16020.366 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16028.368 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16030.370 to i32), i32* %r1.global-to-local, align 4
  %v0_10978 = load i32, i32* @r4, align 4
  store i32 %v0_10978, i32* %r2.global-to-local, align 4
  %v5_1097c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_16028.368 to i32), i32 ptrtoint ([7 x i8]* @global_var_16030.370 to i32), i32 %v0_10978)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16030.370 to i32), i32* %r1.global-to-local, align 4
  %v0_10988 = load i32, i32* @r4, align 4
  store i32 %v0_10988, i32* %r2.global-to-local, align 4
  %v5_1098c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([7 x i8]* @global_var_16030.370 to i32), i32 %v0_10988)
  store i32 ptrtoint ([3 x i8]* @global_var_16000.372 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16038.374 to i32), i32* %r1.global-to-local, align 4
  %v0_10998 = load i32, i32* @r4, align 4
  store i32 %v0_10998, i32* %r2.global-to-local, align 4
  %v5_1099c = call i32 @function_fb50(i32 ptrtoint ([3 x i8]* @global_var_16000.372 to i32), i32 ptrtoint ([7 x i8]* @global_var_16038.374 to i32), i32 %v0_10998)
  store i32 ptrtoint ([7 x i8]* @global_var_16038.374 to i32), i32* %r0.global-to-local, align 4
  %v0_109a4 = load i32, i32* @r4, align 4
  store i32 %v0_109a4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16038.374 to i32), i32* %r1.global-to-local, align 4
  %v5_109ac = call i32 @function_fb50(i32 ptrtoint ([7 x i8]* @global_var_16038.374 to i32), i32 ptrtoint ([7 x i8]* @global_var_16038.374 to i32), i32 %v0_109a4)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16040.376 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_109bc = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint (i32* @global_var_16040.376 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16040.376 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_109cc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_16040.376 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1604c.378 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_109dc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_1604c.378 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16054.380 to i32), i32* %r1.global-to-local, align 4
  %v0_109e8 = load i32, i32* @r4, align 4
  store i32 %v0_109e8, i32* %r2.global-to-local, align 4
  %v5_109ec = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([7 x i8]* @global_var_16054.380 to i32), i32 %v0_109e8)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1605c.382 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_109fc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_1605c.382 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16068.384 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10a0c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_16068.384 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16070.386 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10a1c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_16070.386 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1607c.388 to i32), i32* %r1.global-to-local, align 4
  %v0_10a28 = load i32, i32* @r4, align 4
  store i32 %v0_10a28, i32* %r2.global-to-local, align 4
  %v4_10a2c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_1607c.388 to i32), i32 %v0_10a28)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16084.390 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10a3c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_16084.390 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16090.392 to i32), i32* %r1.global-to-local, align 4
  %v0_10a48 = load i32, i32* @r4, align 4
  store i32 %v0_10a48, i32* %r2.global-to-local, align 4
  %v4_10a4c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_16090.392 to i32), i32 %v0_10a48)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16098.394 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10a5c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_16098.394 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_160a0.396 to i32), i32* %r1.global-to-local, align 4
  %v0_10a68 = load i32, i32* @r4, align 4
  store i32 %v0_10a68, i32* %r2.global-to-local, align 4
  %v5_10a6c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([7 x i8]* @global_var_160a0.396 to i32), i32 %v0_10a68)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160a8.398 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10a7c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_160a8.398 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160b0.400 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10a8c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_160b0.400 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_160bc.402 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_10a9c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_160bc.402 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_160c8.404 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10aac = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 ptrtoint ([6 x i8]* @global_var_160c8.404 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_160c8.404 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_160c8.404 to i32), i32* %r1.global-to-local, align 4
  %v5_10abc = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_160c8.404 to i32), i32 ptrtoint ([6 x i8]* @global_var_160c8.404 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_160d0.406 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_160d0.406 to i32), i32* %r1.global-to-local, align 4
  %v5_10acc = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_160d0.406 to i32), i32 ptrtoint ([8 x i8]* @global_var_160d0.406 to i32), i32 7)
  store i32 ptrtoint (i32* @global_var_160d8.408 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15df4.238 to i32), i32* %r1.global-to-local, align 4
  %v0_10ad8 = load i32, i32* @r4, align 4
  store i32 %v0_10ad8, i32* %r2.global-to-local, align 4
  %v4_10adc = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_160d8.408 to i32), i32 ptrtoint ([7 x i8]* @global_var_15df4.238 to i32), i32 %v0_10ad8)
  store i32 ptrtoint ([4 x i8]* @global_var_160e0.410 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d8c.214 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_10aec = call i32 @function_fb50(i32 ptrtoint ([4 x i8]* @global_var_160e0.410 to i32), i32 ptrtoint ([9 x i8]* @global_var_15d8c.214 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_160e4.412 to i32), i32* %r0.global-to-local, align 4
  %v0_10af4 = load i32, i32* @r4, align 4
  store i32 %v0_10af4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_160e4.412 to i32), i32* %r1.global-to-local, align 4
  %v5_10afc = call i32 @function_fb50(i32 ptrtoint ([7 x i8]* @global_var_160e4.412 to i32), i32 ptrtoint ([7 x i8]* @global_var_160e4.412 to i32), i32 %v0_10af4)
  store i32 ptrtoint ([6 x i8]* @global_var_160ec.414 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_160f4.416 to i32), i32* %r1.global-to-local, align 4
  %v0_10b08 = load i32, i32* @r4, align 4
  store i32 %v0_10b08, i32* %r2.global-to-local, align 4
  %v4_10b0c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_160ec.414 to i32), i32 ptrtoint (i32* @global_var_160f4.416 to i32), i32 %v0_10b08)
  store i32 ptrtoint ([7 x i8]* @global_var_160fc.418 to i32), i32* %r0.global-to-local, align 4
  %v0_10b14 = load i32, i32* @r4, align 4
  store i32 %v0_10b14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_160fc.418 to i32), i32* %r1.global-to-local, align 4
  %v5_10b1c = call i32 @function_fb50(i32 ptrtoint ([7 x i8]* @global_var_160fc.418 to i32), i32 ptrtoint ([7 x i8]* @global_var_160fc.418 to i32), i32 %v0_10b14)
  store i32 ptrtoint ([6 x i8]* @global_var_16104.419 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16104.419 to i32), i32* %r1.global-to-local, align 4
  %v5_10b2c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16104.419 to i32), i32 ptrtoint ([6 x i8]* @global_var_16104.419 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_1610c.421 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1610c.421 to i32), i32* %r1.global-to-local, align 4
  %v5_10b3c = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_1610c.421 to i32), i32 ptrtoint ([8 x i8]* @global_var_1610c.421 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_16114.423 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_16114.423 to i32), i32* %r1.global-to-local, align 4
  %v5_10b4c = call i32 @function_fb50(i32 ptrtoint ([4 x i8]* @global_var_16114.423 to i32), i32 ptrtoint ([4 x i8]* @global_var_16114.423 to i32), i32 3)
  store i32 ptrtoint ([4 x i8]* @global_var_16118.425 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_16118.425 to i32), i32* %r1.global-to-local, align 4
  %v5_10b5c = call i32 @function_fb50(i32 ptrtoint ([4 x i8]* @global_var_16118.425 to i32), i32 ptrtoint ([4 x i8]* @global_var_16118.425 to i32), i32 3)
  store i32 ptrtoint (i32* @global_var_1611c.427 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1611c.427 to i32), i32* %r1.global-to-local, align 4
  %v3_10b6c = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_1611c.427 to i32), i32 ptrtoint (i32* @global_var_1611c.427 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_16124.429 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16124.429 to i32), i32* %r1.global-to-local, align 4
  %v5_10b7c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_16124.429 to i32), i32 ptrtoint ([5 x i8]* @global_var_16124.429 to i32), i32 4)
  store i32 ptrtoint ([7 x i8]* @global_var_1612c.431 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r1.global-to-local, align 4
  %v0_10b88 = load i32, i32* @r4, align 4
  store i32 %v0_10b88, i32* %r2.global-to-local, align 4
  %v4_10b8c = call i32 @function_fb50(i32 ptrtoint ([7 x i8]* @global_var_1612c.431 to i32), i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 %v0_10b88)
  store i32 ptrtoint ([6 x i8]* @global_var_16134.433 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f04.224 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10b9c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16134.433 to i32), i32 ptrtoint (i32* @global_var_15f04.224 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16134.433 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d74.206 to i32), i32* %r1.global-to-local, align 4
  %v0_10ba8 = load i32, i32* @r4, align 4
  store i32 %v0_10ba8, i32* %r2.global-to-local, align 4
  %v4_10bac = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16134.433 to i32), i32 ptrtoint (i32* @global_var_15d74.206 to i32), i32 %v0_10ba8)
  store i32 ptrtoint ([7 x i8]* @global_var_1613c.435 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r1.global-to-local, align 4
  %v0_10bb8 = load i32, i32* @r4, align 4
  store i32 %v0_10bb8, i32* %r2.global-to-local, align 4
  %v4_10bbc = call i32 @function_fb50(i32 ptrtoint ([7 x i8]* @global_var_1613c.435 to i32), i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 %v0_10bb8)
  store i32 ptrtoint ([7 x i8]* @global_var_1613c.435 to i32), i32* %r0.global-to-local, align 4
  %v0_10bc4 = load i32, i32* @r4, align 4
  store i32 %v0_10bc4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1613c.435 to i32), i32* %r1.global-to-local, align 4
  %v5_10bcc = call i32 @function_fb50(i32 ptrtoint ([7 x i8]* @global_var_1613c.435 to i32), i32 ptrtoint ([7 x i8]* @global_var_1613c.435 to i32), i32 %v0_10bc4)
  store i32 ptrtoint ([5 x i8]* @global_var_16144.437 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_16144.437 to i32), i32* %r1.global-to-local, align 4
  %v5_10bdc = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_16144.437 to i32), i32 ptrtoint ([5 x i8]* @global_var_16144.437 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_1614c.439 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10bec = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_1614c.439 to i32), i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_16154.441 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10bfc = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_16154.441 to i32), i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_1615c.443 to i32), i32* %r0.global-to-local, align 4
  %v0_10c04 = load i32, i32* @r4, align 4
  store i32 %v0_10c04, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1615c.443 to i32), i32* %r1.global-to-local, align 4
  %v5_10c0c = call i32 @function_fb50(i32 ptrtoint ([7 x i8]* @global_var_1615c.443 to i32), i32 ptrtoint ([7 x i8]* @global_var_1615c.443 to i32), i32 %v0_10c04)
  store i32 ptrtoint ([6 x i8]* @global_var_16164.445 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1616c.447 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10c1c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16164.445 to i32), i32 ptrtoint ([6 x i8]* @global_var_1616c.447 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_16174.449 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1617c.451 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10c2c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16174.449 to i32), i32 ptrtoint ([5 x i8]* @global_var_1617c.451 to i32), i32 5)
  store i32 ptrtoint (i32* @global_var_16184.453 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16184.453 to i32), i32* %r1.global-to-local, align 4
  %v3_10c3c = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_16184.453 to i32), i32 ptrtoint (i32* @global_var_16184.453 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15f18.455 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1618c.457 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10c4c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_15f18.455 to i32), i32 ptrtoint (i32* @global_var_1618c.457 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_16198.459 to i32), i32* %r0.global-to-local, align 4
  %v0_10c54 = load i32, i32* @r4, align 4
  store i32 %v0_10c54, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_16198.459 to i32), i32* %r1.global-to-local, align 4
  %v5_10c5c = call i32 @function_fb50(i32 ptrtoint ([7 x i8]* @global_var_16198.459 to i32), i32 ptrtoint ([7 x i8]* @global_var_16198.459 to i32), i32 %v0_10c54)
  store i32 ptrtoint (i32* @global_var_161a0.461 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_161a8.463 to i32), i32* %r1.global-to-local, align 4
  %v0_10c68 = load i32, i32* @r4, align 4
  store i32 %v0_10c68, i32* %r2.global-to-local, align 4
  %v4_10c6c = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_161a0.461 to i32), i32 ptrtoint ([7 x i8]* @global_var_161a8.463 to i32), i32 %v0_10c68)
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161b0.465 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10c7c = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 ptrtoint ([9 x i8]* @global_var_161b0.465 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161bc.467 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10c8c = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 ptrtoint ([9 x i8]* @global_var_161bc.467 to i32), i32 8)
  %v0_10c90 = load i32, i32* @r4, align 4
  store i32 %v0_10c90, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_161c8.469 to i32), i32* %r1.global-to-local, align 4
  %v4_10c9c = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_15d10.190 to i32), i32 ptrtoint ([7 x i8]* @global_var_161c8.469 to i32), i32 %v0_10c90)
  store i32 ptrtoint (i32* @global_var_161d0.471 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_161dc.473 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v4_10cac = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_161d0.471 to i32), i32 ptrtoint ([5 x i8]* @global_var_161dc.473 to i32), i32 11)
  store i32 ptrtoint ([9 x i8]* @global_var_161e4.475 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161e4.475 to i32), i32* %r1.global-to-local, align 4
  %v5_10cbc = call i32 @function_fb50(i32 ptrtoint ([9 x i8]* @global_var_161e4.475 to i32), i32 ptrtoint ([9 x i8]* @global_var_161e4.475 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_161f0.477 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161f0.477 to i32), i32* %r1.global-to-local, align 4
  %v5_10ccc = call i32 @function_fb50(i32 ptrtoint ([9 x i8]* @global_var_161f0.477 to i32), i32 ptrtoint ([9 x i8]* @global_var_161f0.477 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_161fc.479 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_161fc.479 to i32), i32* %r1.global-to-local, align 4
  %v5_10cdc = call i32 @function_fb50(i32 ptrtoint ([9 x i8]* @global_var_161fc.479 to i32), i32 ptrtoint ([9 x i8]* @global_var_161fc.479 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_15f00.296 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f00.296 to i32), i32* %r1.global-to-local, align 4
  %v3_10cec = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_15f00.296 to i32), i32 ptrtoint (i32* @global_var_15f00.296 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_16208.481 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16208.481 to i32), i32* %r1.global-to-local, align 4
  %v3_10cfc = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_16208.481 to i32), i32 ptrtoint (i32* @global_var_16208.481 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_16214.483 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16214.483 to i32), i32* %r1.global-to-local, align 4
  %v5_10d0c = call i32 @function_fb50(i32 ptrtoint ([9 x i8]* @global_var_16214.483 to i32), i32 ptrtoint ([9 x i8]* @global_var_16214.483 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_16220.485 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_16220.485 to i32), i32* %r1.global-to-local, align 4
  %v5_10d1c = call i32 @function_fb50(i32 ptrtoint ([9 x i8]* @global_var_16220.485 to i32), i32 ptrtoint ([9 x i8]* @global_var_16220.485 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_1622c.487 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_15e04.242 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10d2c = call i32 @function_fb50(i32 ptrtoint ([8 x i8]* @global_var_1622c.487 to i32), i32 ptrtoint ([11 x i8]* @global_var_15e04.242 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16234.489 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_10d3c = call i32 @function_fb50(i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), i32 ptrtoint (i32* @global_var_16234.489 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_160ec.414 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16244.491 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_10d4c = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_160ec.414 to i32), i32 ptrtoint (i32* @global_var_16244.491 to i32), i32 14)
  store i32 ptrtoint ([10 x i8]* @global_var_16254.493 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16260.495 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10d5c = call i32 @function_fb50(i32 ptrtoint ([10 x i8]* @global_var_16254.493 to i32), i32 ptrtoint (i32* @global_var_16260.495 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_1626c.497 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_16278.499 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10d6c = call i32 @function_fb50(i32 ptrtoint ([10 x i8]* @global_var_1626c.497 to i32), i32 ptrtoint ([11 x i8]* @global_var_16278.499 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_16284.501 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16040.376 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10d7c = call i32 @function_fb50(i32 ptrtoint ([10 x i8]* @global_var_16284.501 to i32), i32 ptrtoint (i32* @global_var_16040.376 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_16290.503 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16040.376 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10d8c = call i32 @function_fb50(i32 ptrtoint ([10 x i8]* @global_var_16290.503 to i32), i32 ptrtoint (i32* @global_var_16040.376 to i32), i32 10)
  store i32 ptrtoint (i32* @global_var_161d0.471 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1629c.505 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v3_10d9c = call i32 @function_fb50(i32 ptrtoint (i32* @global_var_161d0.471 to i32), i32 ptrtoint (i32* @global_var_1629c.505 to i32), i32 11)
  store i32 ptrtoint ([13 x i8]* @global_var_162a8.507 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([13 x i8]* @global_var_162b8.509 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10dac = call i32 @function_fb50(i32 ptrtoint ([13 x i8]* @global_var_162a8.507 to i32), i32 ptrtoint ([13 x i8]* @global_var_162b8.509 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_162c8.511 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_162d0.513 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_10dbc = call i32 @function_fb50(i32 ptrtoint ([7 x i8]* @global_var_162c8.511 to i32), i32 ptrtoint (i32* @global_var_162d0.513 to i32), i32 13)
  store i32 ptrtoint ([9 x i8]* @global_var_162d8.515 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_162e4.517 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_10dcc = call i32 @function_fb50(i32 ptrtoint ([9 x i8]* @global_var_162d8.515 to i32), i32 ptrtoint ([8 x i8]* @global_var_162e4.517 to i32), i32 15)
  store i32 ptrtoint ([12 x i8]* @global_var_162ec.519 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_162f8.521 to i32), i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_10ddc = call i32 @function_fb50(i32 ptrtoint ([12 x i8]* @global_var_162ec.519 to i32), i32 ptrtoint (i32* @global_var_162f8.521 to i32), i32 20)
  store i32 ptrtoint ([6 x i8]* @global_var_16304.523 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_162f8.521 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_10dec = call i32 @function_fb50(i32 ptrtoint ([6 x i8]* @global_var_16304.523 to i32), i32 ptrtoint (i32* @global_var_162f8.521 to i32), i32 14)
  %v2_10df4 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_10df4, i32* %r0.global-to-local, align 4
  %v2_10df8 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_10df8, i32* %r1.global-to-local, align 4
  %tmp285 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_10e04

dec_label_pc_10e04:                               ; preds = %dec_label_pc_1144c, %dec_label_pc_1011c
  %v0_11124 = phi i32 [ %v2_10df4, %dec_label_pc_1011c ], [ %stack_var_-1872.1, %dec_label_pc_1144c ]
  %stack_var_-1868.0 = phi i8 [ %v5_10104.le, %dec_label_pc_1011c ], [ %stack_var_-1868.1, %dec_label_pc_1144c ]
  %stack_var_-1876.0 = phi i8* [ %tmp285, %dec_label_pc_1011c ], [ %stack_var_-1876.1, %dec_label_pc_1144c ]
  store i32 ptrtoint (i32* @global_var_1f1f0.156 to i32), i32* %r2.global-to-local, align 4
  %v2_10e08 = load i32, i32* @global_var_1f1f0.156, align 4
  store i32 %v2_10e08, i32* %r8.global-to-local, align 4
  %v0_10e0c = load i32, i32* @fp, align 4
  %v3_10e0c = icmp uge i32 %v0_10e0c, %v2_10e08
  store i1 %v3_10e0c, i1* %cpsr_c.global-to-local, align 1
  %v9_10e0c = icmp eq i32 %v0_10e0c, %v2_10e08
  store i1 %v9_10e0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10e0c, label %dec_label_pc_110b4, label %dec_label_pc_10e14

dec_label_pc_10e14:                               ; preds = %dec_label_pc_10e04
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_11088 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_10e20

dec_label_pc_10e20:                               ; preds = %.thread50.dec_label_pc_10e20_crit_edge, %dec_label_pc_10e14
  %v0_10e20 = phi i32 [ %v0_10e20.pre, %.thread50.dec_label_pc_10e20_crit_edge ], [ 0, %dec_label_pc_10e14 ]
  store i32 %v0_10e20, i32* %stack_var_-92, align 4
  %v0_10e30 = call i32 @function_f8e8()
  %v1_10e30 = trunc i32 %v0_10e30 to i8
  store i32 %v0_10e30, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f238.84 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f1c0.172 to i32), i32* %lr.global-to-local, align 4
  %v2_10e3c = load i32, i32* @global_var_1f238.84, align 4
  store i32 %v2_10e3c, i32* %r2.global-to-local, align 4
  %v2_10e40 = and i32 %v0_10e30, 128
  %v3_10e40 = icmp ne i32 %v2_10e40, 0
  store i1 %v3_10e40, i1* %cpsr_c.global-to-local, align 1
  %v4_10e40 = sdiv i32 %v0_10e30, 256
  store i32 %v4_10e40, i32* %r3.global-to-local, align 4
  %v1_10e44 = trunc i32 %v4_10e40 to i8
  store i8 %v1_10e44, i8* bitcast (i32* @global_var_1f1c5.178 to i8*), align 4
  store i32 %v2_10e3c, i32* @global_var_1f1cc.524, align 4
  store i8 %v1_10e30, i8* bitcast (i32* @global_var_1f1c4.182 to i8*), align 4
  br label %dec_label_pc_10e50

dec_label_pc_10e50:                               ; preds = %dec_label_pc_10f24, %dec_label_pc_10e80, %dec_label_pc_10f58, %dec_label_pc_10f4c, %dec_label_pc_10f40, %dec_label_pc_10f34, %.thread35, %bb304, %bb303, %bb302, %bb301, %bb300, %dec_label_pc_10f1c, %dec_label_pc_10f14, %bb296, %dec_label_pc_10ee4, %dec_label_pc_10ec0, %bb289, %dec_label_pc_10e90, %bb288, %dec_label_pc_10e78, %bb287, %bb306, %dec_label_pc_10e20
  %v0_10e50 = call i32 @function_f8e8()
  store i32 %v0_10e50, i32* %r0.global-to-local, align 4
  %v1_10e54 = urem i32 %v0_10e50, 256
  store i32 %v1_10e54, i32* %r1.global-to-local, align 4
  %v3_10e58 = udiv i32 %v0_10e50, 256
  store i32 %v3_10e58, i32* %r3.global-to-local, align 4
  %v3_10e5c = udiv i32 %v0_10e50, 65536
  store i32 %v3_10e5c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e60 = icmp eq i32 %v1_10e54, 0
  store i1 %v2_10e60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e60, label %bb287, label %bb286

bb286:                                            ; preds = %dec_label_pc_10e50
  %v3_10e64 = icmp ugt i32 %v1_10e54, 126
  store i1 %v3_10e64, i1* %cpsr_c.global-to-local, align 1
  %v8_10e64 = icmp eq i32 %v1_10e54, 127
  store i1 %v8_10e64, i1* %cpsr_z.global-to-local, align 1
  br label %bb287

bb287:                                            ; preds = %dec_label_pc_10e50, %bb286
  %v0_10e74 = phi i1 [ true, %dec_label_pc_10e50 ], [ %v8_10e64, %bb286 ]
  %v1_10e68 = urem i32 %v3_10e58, 256
  store i32 %v1_10e68, i32* %ip.global-to-local, align 4
  %v1_10e6c = urem i32 %v3_10e5c, 256
  store i32 %v1_10e6c, i32* %r2.global-to-local, align 4
  %v1_10e70 = and i32 %v0_10e50, 8388608
  %v2_10e70 = icmp ne i32 %v1_10e70, 0
  store i1 %v2_10e70, i1* %cpsr_c.global-to-local, align 1
  %v3_10e70 = udiv i32 %v0_10e50, 16777216
  store i32 %v3_10e70, i32* %r0.global-to-local, align 4
  br i1 %v0_10e74, label %dec_label_pc_10e50, label %dec_label_pc_10e78

dec_label_pc_10e78:                               ; preds = %bb287
  %v2_10e78 = icmp ugt i32 %v1_10e54, 2
  store i1 %v2_10e78, i1* %cpsr_c.global-to-local, align 1
  %v7_10e78 = icmp eq i32 %v1_10e54, 3
  store i1 %v7_10e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e78, label %dec_label_pc_10e50, label %dec_label_pc_10e80

dec_label_pc_10e80:                               ; preds = %dec_label_pc_10e78
  %v1_10e80 = add nsw i32 %v1_10e54, -15
  store i32 %v1_10e80, i32* %r3.global-to-local, align 4
  %v2_10e84 = icmp ugt i32 %v1_10e54, 55
  store i1 %v2_10e84, i1* %cpsr_c.global-to-local, align 1
  %v7_10e84 = icmp eq i32 %v1_10e54, 56
  store i1 %v7_10e84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e84, label %dec_label_pc_10e50, label %bb288

bb288:                                            ; preds = %dec_label_pc_10e80
  %v3_10e88 = icmp ne i32 %v1_10e80, 0
  store i1 %v3_10e88, i1* %cpsr_c.global-to-local, align 1
  %v8_10e88 = icmp eq i32 %v1_10e80, 1
  store i1 %v8_10e88, i1* %cpsr_z.global-to-local, align 1
  %v2_10e8c = xor i1 %v3_10e88, true
  %v3_10e8c = or i1 %v8_10e88, %v2_10e8c
  br i1 %v3_10e8c, label %dec_label_pc_10e50, label %dec_label_pc_10e90

dec_label_pc_10e90:                               ; preds = %bb288
  %v2_10e90 = icmp ugt i32 %v1_10e54, 9
  store i1 %v2_10e90, i1* %cpsr_c.global-to-local, align 1
  %v7_10e90 = icmp eq i32 %v1_10e54, 10
  store i1 %v7_10e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e90, label %dec_label_pc_10e50, label %dec_label_pc_10e98

dec_label_pc_10e98:                               ; preds = %dec_label_pc_10e90
  %v2_10e98 = icmp ugt i32 %v1_10e54, 191
  store i1 %v2_10e98, i1* %cpsr_c.global-to-local, align 1
  %v7_10e98 = icmp eq i32 %v1_10e54, 192
  store i1 %v7_10e98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e98, label %bb289, label %dec_label_pc_10ea4

bb289:                                            ; preds = %dec_label_pc_10e98
  %v3_10e9c = icmp ugt i32 %v1_10e68, 167
  store i1 %v3_10e9c, i1* %cpsr_c.global-to-local, align 1
  %v8_10e9c = icmp eq i32 %v1_10e68, 168
  store i1 %v8_10e9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e9c, label %dec_label_pc_10e50, label %dec_label_pc_10ea4

dec_label_pc_10ea4:                               ; preds = %dec_label_pc_10e98, %bb289
  %v7_10ea4 = icmp eq i32 %v1_10e54, 172
  %.354 = zext i1 %v7_10ea4 to i32
  store i32 %.354, i32* %r3.global-to-local, align 4
  %v2_10eb0 = icmp ugt i32 %v1_10e68, 14
  store i1 %v2_10eb0, i1* %cpsr_c.global-to-local, align 1
  %v7_10eb0 = icmp eq i32 %v1_10e68, 15
  store i1 %v7_10eb0, i1* %cpsr_z.global-to-local, align 1
  %v2_10eb4 = xor i1 %v2_10eb0, true
  %v3_10eb4 = or i1 %v7_10eb0, %v2_10eb4
  br i1 %v3_10eb4, label %.thread13, label %bb292

.thread13:                                        ; preds = %dec_label_pc_10ea4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ec8

bb292:                                            ; preds = %dec_label_pc_10ea4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10eb8 = icmp eq i1 %v7_10ea4, false
  store i1 %v2_10eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10eb8, label %dec_label_pc_10ec8, label %dec_label_pc_10ec0

dec_label_pc_10ec0:                               ; preds = %bb292
  %v2_10ec0 = icmp ugt i32 %v1_10e68, 30
  store i1 %v2_10ec0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ec0 = icmp eq i32 %v1_10e68, 31
  store i1 %v7_10ec0, i1* %cpsr_z.global-to-local, align 1
  %v2_10ec4 = xor i1 %v2_10ec0, true
  %v3_10ec4 = or i1 %v7_10ec0, %v2_10ec4
  br i1 %v3_10ec4, label %dec_label_pc_10e50, label %dec_label_pc_10ec8

dec_label_pc_10ec8:                               ; preds = %.thread13, %dec_label_pc_10ec0, %bb292
  %v7_10ec8 = icmp eq i32 %v1_10e54, 100
  %.355 = zext i1 %v7_10ec8 to i32
  store i32 %.355, i32* %r3.global-to-local, align 4
  %v2_10ed4 = icmp ugt i32 %v1_10e68, 62
  store i1 %v2_10ed4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ed4 = icmp eq i32 %v1_10e68, 63
  store i1 %v7_10ed4, i1* %cpsr_z.global-to-local, align 1
  %v2_10ed8 = xor i1 %v2_10ed4, true
  %v3_10ed8 = or i1 %v7_10ed4, %v2_10ed8
  br i1 %v3_10ed8, label %.thread18, label %bb295

.thread18:                                        ; preds = %dec_label_pc_10ec8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10eec

bb295:                                            ; preds = %dec_label_pc_10ec8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10edc = icmp eq i1 %v7_10ec8, false
  store i1 %v2_10edc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10edc, label %dec_label_pc_10eec, label %dec_label_pc_10ee4

dec_label_pc_10ee4:                               ; preds = %bb295
  %v2_10ee4 = icmp ugt i32 %v1_10e68, 125
  store i1 %v2_10ee4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ee4 = icmp eq i32 %v1_10e68, 126
  store i1 %v7_10ee4, i1* %cpsr_z.global-to-local, align 1
  %v2_10ee8 = xor i1 %v2_10ee4, true
  %v3_10ee8 = or i1 %v7_10ee4, %v2_10ee8
  br i1 %v3_10ee8, label %dec_label_pc_10e50, label %dec_label_pc_10eec

dec_label_pc_10eec:                               ; preds = %.thread18, %dec_label_pc_10ee4, %bb295
  %v2_10eec = icmp ugt i32 %v1_10e54, 168
  store i1 %v2_10eec, i1* %cpsr_c.global-to-local, align 1
  %v7_10eec = icmp eq i32 %v1_10e54, 169
  store i1 %v7_10eec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10eec, label %bb296, label %dec_label_pc_10ef8

bb296:                                            ; preds = %dec_label_pc_10eec
  %v3_10ef0 = icmp eq i32 %v1_10e68, 255
  store i1 %v3_10ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10ef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10ef0, label %dec_label_pc_10e50, label %dec_label_pc_10ef8

dec_label_pc_10ef8:                               ; preds = %dec_label_pc_10eec, %bb296
  %v7_10ef8 = icmp eq i32 %v1_10e54, 198
  %.356 = zext i1 %v7_10ef8 to i32
  store i32 %.356, i32* %r3.global-to-local, align 4
  %v2_10f04 = icmp ugt i32 %v1_10e68, 16
  store i1 %v2_10f04, i1* %cpsr_c.global-to-local, align 1
  %v7_10f04 = icmp eq i32 %v1_10e68, 17
  store i1 %v7_10f04, i1* %cpsr_z.global-to-local, align 1
  %v2_10f08 = xor i1 %v2_10f04, true
  %v3_10f08 = or i1 %v7_10f04, %v2_10f08
  br i1 %v3_10f08, label %.thread24, label %bb299

.thread24:                                        ; preds = %dec_label_pc_10ef8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10f1c

bb299:                                            ; preds = %dec_label_pc_10ef8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10f0c = icmp eq i1 %v7_10ef8, false
  store i1 %v2_10f0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10f0c, label %dec_label_pc_10f1c, label %dec_label_pc_10f14

dec_label_pc_10f14:                               ; preds = %bb299
  %v2_10f14 = icmp ugt i32 %v1_10e68, 18
  store i1 %v2_10f14, i1* %cpsr_c.global-to-local, align 1
  %v7_10f14 = icmp eq i32 %v1_10e68, 19
  store i1 %v7_10f14, i1* %cpsr_z.global-to-local, align 1
  %v2_10f18 = xor i1 %v2_10f14, true
  %v3_10f18 = or i1 %v7_10f14, %v2_10f18
  br i1 %v3_10f18, label %dec_label_pc_10e50, label %dec_label_pc_10f1c

dec_label_pc_10f1c:                               ; preds = %.thread24, %dec_label_pc_10f14, %bb299
  %v2_10f1c = icmp ugt i32 %v1_10e54, 222
  store i1 %v2_10f1c, i1* %cpsr_c.global-to-local, align 1
  %v7_10f1c = icmp eq i32 %v1_10e54, 223
  store i1 %v7_10f1c, i1* %cpsr_z.global-to-local, align 1
  %v2_10f20 = xor i1 %v7_10f1c, true
  %v3_10f20 = and i1 %v2_10f1c, %v2_10f20
  br i1 %v3_10f20, label %dec_label_pc_10e50, label %dec_label_pc_10f24

dec_label_pc_10f24:                               ; preds = %dec_label_pc_10f1c
  %v1_10f24 = add nsw i32 %v1_10e54, -6
  store i32 %v1_10f24, i32* %r3.global-to-local, align 4
  %v2_10f28 = icmp ugt i32 %v1_10e54, 10
  store i1 %v2_10f28, i1* %cpsr_c.global-to-local, align 1
  %v7_10f28 = icmp eq i32 %v1_10e54, 11
  store i1 %v7_10f28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f28, label %dec_label_pc_10e50, label %bb300

bb300:                                            ; preds = %dec_label_pc_10f24
  %v3_10f2c = icmp ne i32 %v1_10f24, 0
  store i1 %v3_10f2c, i1* %cpsr_c.global-to-local, align 1
  %v8_10f2c = icmp eq i32 %v1_10f24, 1
  store i1 %v8_10f2c, i1* %cpsr_z.global-to-local, align 1
  %v2_10f30 = xor i1 %v3_10f2c, true
  %v3_10f30 = or i1 %v8_10f2c, %v2_10f30
  br i1 %v3_10f30, label %dec_label_pc_10e50, label %dec_label_pc_10f34

dec_label_pc_10f34:                               ; preds = %bb300
  %v2_10f34 = icmp ugt i32 %v1_10e54, 21
  store i1 %v2_10f34, i1* %cpsr_c.global-to-local, align 1
  %v7_10f34 = icmp eq i32 %v1_10e54, 22
  store i1 %v7_10f34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f34, label %dec_label_pc_10e50, label %bb301

bb301:                                            ; preds = %dec_label_pc_10f34
  %v3_10f38 = icmp ugt i32 %v1_10e54, 20
  store i1 %v3_10f38, i1* %cpsr_c.global-to-local, align 1
  %v8_10f38 = icmp eq i32 %v1_10e54, 21
  store i1 %v8_10f38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f38, label %dec_label_pc_10e50, label %dec_label_pc_10f40

dec_label_pc_10f40:                               ; preds = %bb301
  %v2_10f40 = icmp ugt i32 %v1_10e54, 27
  store i1 %v2_10f40, i1* %cpsr_c.global-to-local, align 1
  %v7_10f40 = icmp eq i32 %v1_10e54, 28
  store i1 %v7_10f40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f40, label %dec_label_pc_10e50, label %bb302

bb302:                                            ; preds = %dec_label_pc_10f40
  %v3_10f44 = icmp ugt i32 %v1_10e54, 25
  store i1 %v3_10f44, i1* %cpsr_c.global-to-local, align 1
  %v8_10f44 = icmp eq i32 %v1_10e54, 26
  store i1 %v8_10f44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f44, label %dec_label_pc_10e50, label %dec_label_pc_10f4c

dec_label_pc_10f4c:                               ; preds = %bb302
  %v2_10f4c = icmp ugt i32 %v1_10e54, 29
  store i1 %v2_10f4c, i1* %cpsr_c.global-to-local, align 1
  %v7_10f4c = icmp eq i32 %v1_10e54, 30
  store i1 %v7_10f4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f4c, label %dec_label_pc_10e50, label %bb303

bb303:                                            ; preds = %dec_label_pc_10f4c
  %v3_10f50 = icmp ugt i32 %v1_10e54, 28
  store i1 %v3_10f50, i1* %cpsr_c.global-to-local, align 1
  %v8_10f50 = icmp eq i32 %v1_10e54, 29
  store i1 %v8_10f50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f50, label %dec_label_pc_10e50, label %dec_label_pc_10f58

dec_label_pc_10f58:                               ; preds = %bb303
  %v2_10f58 = icmp ugt i32 %v1_10e54, 54
  store i1 %v2_10f58, i1* %cpsr_c.global-to-local, align 1
  %v7_10f58 = icmp eq i32 %v1_10e54, 55
  store i1 %v7_10f58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f58, label %dec_label_pc_10e50, label %bb304

bb304:                                            ; preds = %dec_label_pc_10f58
  %v3_10f5c = icmp ugt i32 %v1_10e54, 32
  store i1 %v3_10f5c, i1* %cpsr_c.global-to-local, align 1
  %v8_10f5c = icmp eq i32 %v1_10e54, 33
  store i1 %v8_10f5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f5c, label %dec_label_pc_10e50, label %dec_label_pc_10f64

dec_label_pc_10f64:                               ; preds = %bb304
  %v2_10f64 = icmp ugt i32 %v1_10e54, 214
  store i1 %v2_10f64, i1* %cpsr_c.global-to-local, align 1
  %v7_10f64 = icmp eq i32 %v1_10e54, 215
  store i1 %v7_10f64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f64, label %.thread35, label %bb305

bb305:                                            ; preds = %dec_label_pc_10f64
  %v3_10f68 = icmp ugt i32 %v1_10e54, 213
  store i1 %v3_10f68, i1* %cpsr_c.global-to-local, align 1
  %v8_10f68 = icmp eq i32 %v1_10e54, 214
  store i1 %v8_10f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f68, label %bb306, label %dec_label_pc_10f78

.thread35:                                        ; preds = %dec_label_pc_10f64
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e50

bb306:                                            ; preds = %bb305
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e50

dec_label_pc_10f78:                               ; preds = %bb305
  store i32 0, i32* @r4, align 4
  %v5_10f84 = call i32 @llvm.bswap.i32(i32 %v0_10e50)
  store i32 %v5_10f84, i32* %r3.global-to-local, align 4
  %tmp307 = and i32 %v0_10e50, 65280
  %tmp308 = call i32 @llvm.bswap.i32(i32 %tmp307)
  %v1_10f8c = and i32 %v5_10f84, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_10f90 = mul nuw i32 %v3_10e70, 16777216
  %v3_10f94 = udiv i32 %tmp308, 256
  %v4_10f98 = mul i32 %v1_10f8c, 256
  %tmp309 = and i32 %v0_10e50, 32768
  %v3_10f9c = icmp ne i32 %tmp309, 0
  store i1 %v3_10f9c, i1* %cpsr_c.global-to-local, align 1
  %v4_10f9c = udiv i32 %v5_10f84, 16777216
  store i32 ptrtoint (i8** @global_var_1f1c0.172 to i32), i32* @r0, align 4
  %v5_10f9c = or i32 %v4_10f9c, %v3_10f90
  %v5_10f98 = or i32 %v5_10f9c, %v4_10f98
  %v2_10fa4 = or i32 %v5_10f98, %v3_10f94
  store i32 %v2_10fa4, i32* %r2.global-to-local, align 4
  %v5_10fa8 = trunc i32 %v4_10f9c to i8
  store i8 %v5_10fa8, i8* @global_var_1f1d0.525, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1f1ca.526 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1f1cb.527 to i8*), align 4
  %v3_10fb8 = call i32 @function_e4b8(i32 ptrtoint (i8** @global_var_1f1c0.172 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1f1c0.172 to i32), i32* %ip.global-to-local, align 4
  %sext9 = mul i32 %v3_10fb8, 16777216
  %v1_10fc0 = sdiv i32 %sext9, 16777216
  store i32 %v1_10fc0, i32* %r3.global-to-local, align 4
  %v2_10fc4 = and i32 %v1_10fc0, 128
  %v3_10fc4 = icmp ne i32 %v2_10fc4, 0
  store i1 %v3_10fc4, i1* %cpsr_c.global-to-local, align 1
  %v4_10fc4 = ashr i32 %sext9, 31
  store i32 %v4_10fc4, i32* %r2.global-to-local, align 4
  %v1_10fc8 = trunc i32 %v1_10fc0 to i8
  store i8 %v1_10fc8, i8* bitcast (i32* @global_var_1f1ca.526 to i8*), align 4
  %v1_10fcc = trunc i32 %v4_10fc4 to i8
  store i8 %v1_10fcc, i8* bitcast (i32* @global_var_1f1cb.527 to i8*), align 4
  %v3_10fd0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10fd0, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_10fd8 = call i32 @function_13444(i32 %v3_10fd0, i32 10, i32 %v4_10fc4, i32 %v1_10fc0)
  store i32 %v4_10fd8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10fdc = icmp eq i32 %v4_10fd8, 0
  store i1 %v2_10fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fdc, label %.thread217, label %bb310

.thread217:                                       ; preds = %dec_label_pc_10f78
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* @lr, align 4
  br label %.thread45.thread88

bb310:                                            ; preds = %dec_label_pc_10f78
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_10fec = load i32, i32* @r4, align 4
  %v2_10fec = trunc i32 %v1_10fec to i8
  store i8 %v2_10fec, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32 2) to i8*), align 2
  %v0_10ff0.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10ff0.pr.pre, label %.thread45.thread88, label %.thread42

.thread42:                                        ; preds = %bb310
  %v1_10ff0 = load i32, i32* %r3.global-to-local, align 4
  %v2_10ff0 = trunc i32 %v1_10ff0 to i8
  %v3_10ff0 = load i32, i32* %r0.global-to-local, align 4
  %v4_10ff0 = add i32 %v3_10ff0, 3
  %v5_10ff0 = inttoptr i32 %v4_10ff0 to i8*
  store i8 %v2_10ff0, i8* %v5_10ff0, align 1
  %v0_10ff8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1f1c0.172 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_10ff8.pr.pr, label %.thread48, label %.thread50

.thread45.thread88:                               ; preds = %bb310, %.thread217
  store i32 ptrtoint (i8** @global_var_1f1c0.172 to i32), i32* %r0.global-to-local, align 4
  br label %.thread48

.thread48:                                        ; preds = %.thread42, %.thread45.thread88
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_11000 = load i32, i32* @lr, align 4
  %v4_11000 = add i32 %v3_11000, 2
  %v5_11000 = inttoptr i32 %v4_11000 to i8*
  store i8 9, i8* %v5_11000, align 1
  %v0_11004.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11004.pr.pr, label %bb311, label %.thread50

bb311:                                            ; preds = %.thread48
  %v1_11004 = load i32, i32* %r2.global-to-local, align 4
  %v2_11004 = trunc i32 %v1_11004 to i8
  %v3_11004 = load i32, i32* @lr, align 4
  %v4_11004 = add i32 %v3_11004, 3
  %v5_11004 = inttoptr i32 %v4_11004 to i8*
  store i8 %v2_11004, i8* %v5_11004, align 1
  br label %.thread50

.thread50:                                        ; preds = %.thread42, %.thread48, %bb311
  %v4_11008 = load i8, i8* @global_var_1f1d0.525, align 1
  %v5_11008 = sext i8 %v4_11008 to i32
  store i32 %v5_11008, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* @r1, align 4
  store i8 %v4_11008, i8* @global_var_1f1d8.529, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_11020 = load i32, i32* %sl.global-to-local, align 4
  %v1_11020 = trunc i32 %v0_11020 to i8
  store i8 %v1_11020, i8* bitcast (i32* @global_var_1f1e4.530 to i8*), align 4
  store i8 %v1_11020, i8* bitcast (i32* @global_var_1f1e5.531 to i8*), align 4
  %v5_11028 = call i32 @function_e514(i32 ptrtoint (i8** @global_var_1f1c0.172 to i32), i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_11028, 16777216
  %v1_11030 = sdiv i32 %sext, 16777216
  %v3_11038 = ashr i32 %sext, 31
  %v2_1103c = load i32, i32* @global_var_1f1d4.175, align 4
  %v1_11044 = trunc i32 %v3_11038 to i8
  store i8 %v1_11044, i8* bitcast (i32* @global_var_1f1e5.531 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_11058 = load i8, i8* @global_var_1f1d0.525, align 1
  %v4_11058 = sext i8 %v3_11058 to i32
  store i32 %v4_11058, i32* @r4, align 4
  %v2_1105c = load i32, i32* @global_var_1f254.170, align 4
  store i32 %v2_1105c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), i32* %ip.global-to-local, align 4
  %v1_1106c = and i32 %v2_1103c, 8388608
  %v2_1106c = icmp ne i32 %v1_1106c, 0
  store i1 %v2_1106c, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1f1c0.172 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_11080 = trunc i32 %v1_11030 to i8
  store i8 %v1_11080, i8* bitcast (i32* @global_var_1f1e4.530 to i8*), align 4
  store i32 %v2_11088, i32* %lr.global-to-local, align 4
  %v8_11098 = call i32 @function_13e78(i32 %v2_1105c, i32* bitcast (i8** @global_var_1f1c0.172 to i32*), i32 40, i32 16384, i32 %v2_11088, i32 16)
  store i32 %v8_11098, i32* %r0.global-to-local, align 4
  %v3_1109c = load i32, i32* %stack_var_-48, align 4
  %v1_110a0 = add i32 %v3_1109c, 1
  store i32 %v1_110a0, i32* %r3.global-to-local, align 4
  %v3_110a4 = icmp ugt i32 %v1_110a0, 383
  store i1 %v3_110a4, i1* %cpsr_c.global-to-local, align 1
  %v8_110a4 = icmp eq i32 %v1_110a0, 384
  store i1 %v8_110a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_110a0, i32* %stack_var_-48, align 4
  %v5_110ac = icmp slt i32 %v1_110a0, 384
  br i1 %v5_110ac, label %.thread50.dec_label_pc_10e20_crit_edge, label %dec_label_pc_110b0

.thread50.dec_label_pc_10e20_crit_edge:           ; preds = %.thread50
  %v0_10e20.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10e20

dec_label_pc_110b0:                               ; preds = %.thread50
  %v0_110b0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_110b0, i32* @fp, align 4
  br label %dec_label_pc_110b4

dec_label_pc_110b4:                               ; preds = %dec_label_pc_10e04, %dec_label_pc_110b0
  %v0_110b4 = call i32 @function_13b98()
  store i32 %v0_110b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v0_110b4, i32* @sb, align 4
  %v6_110ec = inttoptr i32 %v0_11124 to i32*
  %v1_11114 = add i32 %v0_11124, 16
  %v2_11114 = inttoptr i32 %v1_11114 to i32*
  %v4_11130 = ptrtoint i8* %stack_var_-1876.0 to i32
  %v1_11138 = add i32 %v4_11130, 1
  %v2_11138 = inttoptr i32 %v1_11138 to i8*
  %v1_1115c = add i32 %v4_11130, 2
  %v2_1115c = inttoptr i32 %v1_1115c to i8*
  %v1_11160 = add i32 %v4_11130, 3
  %v2_11160 = inttoptr i32 %v1_11160 to i8*
  %v4_11164 = sext i8 %stack_var_-1868.0 to i32
  %v1_11178 = add i32 %v4_11130, 13
  %v2_11178 = inttoptr i32 %v1_11178 to i8*
  %v1_11244 = bitcast i8* %stack_var_-1876.0 to i32*
  %v1_11124 = add i32 %v0_11124, 9
  %v2_11124 = inttoptr i32 %v1_11124 to i8*
  %v1_1119c = add i32 %v4_11130, 8
  %v2_1119c = inttoptr i32 %v1_1119c to i32*
  %v1_111dc = add i32 %v0_11124, 12
  %v2_111dc = inttoptr i32 %v1_111dc to i32*
  br label %dec_label_pc_110c0

dec_label_pc_110c0:                               ; preds = %dec_label_pc_1119c, %dec_label_pc_11194, %dec_label_pc_1118c, %dec_label_pc_11158, %dec_label_pc_11148, %dec_label_pc_11124, %dec_label_pc_1110c, %dec_label_pc_11184, %dec_label_pc_11174, %dec_label_pc_11104, %dec_label_pc_1123c, %dec_label_pc_110b4
  %v1_110c4 = phi i32 [ %v0_110b4, %dec_label_pc_110b4 ], [ %v1_110c4.pre.pre, %dec_label_pc_1123c ], [ %v0_110f8, %dec_label_pc_11104 ], [ %v0_110f8, %dec_label_pc_11174 ], [ %v0_110f8, %dec_label_pc_11184 ], [ %v0_110f8, %dec_label_pc_1110c ], [ %v0_110f8, %dec_label_pc_11124 ], [ %v0_110f8, %dec_label_pc_11148 ], [ %v0_110f8, %dec_label_pc_11158 ], [ %v0_110f8, %dec_label_pc_1118c ], [ %v0_110f8, %dec_label_pc_11194 ], [ %v0_110f8, %dec_label_pc_1119c ]
  %v2_110c4 = inttoptr i32 %v1_110c4 to i32*
  store i32 0, i32* %v2_110c4, align 4
  %v2_110d0 = load i32, i32* @global_var_1f254.170, align 4
  store i32 %v2_110d0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_11124, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_110ec = call i32 @function_13e18(i32 %v2_110d0, i32* %v6_110ec, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_110ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_110f0 = icmp eq i32 %v7_110ec, 0
  store i1 %v2_110f0, i1* %cpsr_z.global-to-local, align 1
  %tmp312 = icmp slt i32 %v7_110ec, 1
  br i1 %tmp312, label %dec_label_pc_11270, label %dec_label_pc_110f8

dec_label_pc_110f8:                               ; preds = %dec_label_pc_110c0
  %v0_110f8 = load i32, i32* @sb, align 4
  %v1_110f8 = inttoptr i32 %v0_110f8 to i32*
  %v2_110f8 = load i32, i32* %v1_110f8, align 4
  store i32 %v2_110f8, i32* %r3.global-to-local, align 4
  %v2_110fc = icmp ugt i32 %v2_110f8, 10
  store i1 %v2_110fc, i1* %cpsr_c.global-to-local, align 1
  %v7_110fc = icmp eq i32 %v2_110f8, 11
  store i1 %v7_110fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_110fc, label %dec_label_pc_11270, label %dec_label_pc_11104

dec_label_pc_11104:                               ; preds = %dec_label_pc_110f8
  %v2_11104 = icmp ugt i32 %v7_110ec, 38
  store i1 %v2_11104, i1* %cpsr_c.global-to-local, align 1
  %v7_11104 = icmp eq i32 %v7_110ec, 39
  store i1 %v7_11104, i1* %cpsr_z.global-to-local, align 1
  %v2_11108 = xor i1 %v2_11104, true
  %v3_11108 = or i1 %v7_11104, %v2_11108
  br i1 %v3_11108, label %dec_label_pc_110c0, label %dec_label_pc_1110c

dec_label_pc_1110c:                               ; preds = %dec_label_pc_11104
  store i32 %v0_11124, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f238.84 to i32), i32* %r0.global-to-local, align 4
  %v3_11114 = load i32, i32* %v2_11114, align 4
  store i32 %v3_11114, i32* %r2.global-to-local, align 4
  %v2_11118 = load i32, i32* @global_var_1f238.84, align 4
  store i32 %v2_11118, i32* %r3.global-to-local, align 4
  %v3_1111c = icmp uge i32 %v3_11114, %v2_11118
  store i1 %v3_1111c, i1* %cpsr_c.global-to-local, align 1
  %v9_1111c = icmp eq i32 %v3_11114, %v2_11118
  store i1 %v9_1111c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1111c, label %dec_label_pc_11124, label %dec_label_pc_110c0

dec_label_pc_11124:                               ; preds = %dec_label_pc_1110c
  %v3_11124 = load i8, i8* %v2_11124, align 1
  %v4_11124 = zext i8 %v3_11124 to i32
  store i32 %v4_11124, i32* %r3.global-to-local, align 4
  %v2_11128 = icmp ugt i8 %v3_11124, 5
  store i1 %v2_11128, i1* %cpsr_c.global-to-local, align 1
  %v7_11128 = icmp eq i8 %v3_11124, 6
  store i1 %v7_11128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11128, label %dec_label_pc_11130, label %dec_label_pc_110c0

dec_label_pc_11130:                               ; preds = %dec_label_pc_11124
  store i32 %v4_11130, i32* %r1.global-to-local, align 4
  %v2_11134 = load i8, i8* %stack_var_-1876.0, align 1
  %v3_11134 = zext i8 %v2_11134 to i32
  store i32 %v3_11134, i32* %r2.global-to-local, align 4
  %v3_11138 = load i8, i8* %v2_11138, align 1
  %v4_11138 = zext i8 %v3_11138 to i32
  store i32 %v4_11138, i32* %r3.global-to-local, align 4
  %v4_1113c = mul nuw nsw i32 %v4_11138, 256
  %v5_1113c = or i32 %v4_1113c, %v3_11134
  store i32 %v5_1113c, i32* %r2.global-to-local, align 4
  %v2_11140 = icmp ugt i32 %v5_1113c, 5887
  store i1 %v2_11140, i1* %cpsr_c.global-to-local, align 1
  %v7_11140 = icmp eq i32 %v5_1113c, 5888
  store i1 %v7_11140, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11140, label %dec_label_pc_11158, label %dec_label_pc_11148

dec_label_pc_11148:                               ; preds = %dec_label_pc_11130
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_11150 = icmp ugt i32 %v5_1113c, 4872
  store i1 %v3_11150, i1* %cpsr_c.global-to-local, align 1
  %v9_11150 = icmp eq i32 %v5_1113c, 4873
  store i1 %v9_11150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11150, label %dec_label_pc_11158, label %dec_label_pc_110c0

dec_label_pc_11158:                               ; preds = %dec_label_pc_11148, %dec_label_pc_11130
  store i32 %v4_11130, i32* %r2.global-to-local, align 4
  %v3_1115c = load i8, i8* %v2_1115c, align 1
  %v4_1115c = zext i8 %v3_1115c to i32
  store i32 %v4_1115c, i32* %r3.global-to-local, align 4
  %v3_11160 = load i8, i8* %v2_11160, align 1
  %v4_11160 = zext i8 %v3_11160 to i32
  store i32 %v4_11160, i32* %r2.global-to-local, align 4
  store i32 %v4_11164, i32* %ip.global-to-local, align 4
  %v4_11168 = mul nuw nsw i32 %v4_11160, 256
  %v5_11168 = or i32 %v4_11168, %v4_1115c
  store i32 %v5_11168, i32* %r3.global-to-local, align 4
  %v3_1116c = icmp uge i32 %v5_11168, %v4_11164
  store i1 %v3_1116c, i1* %cpsr_c.global-to-local, align 1
  %v9_1116c = icmp eq i32 %v5_11168, %v4_11164
  store i1 %v9_1116c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1116c, label %dec_label_pc_11174, label %dec_label_pc_110c0

dec_label_pc_11174:                               ; preds = %dec_label_pc_11158
  store i32 %v4_11130, i32* %lr.global-to-local, align 4
  %v3_11178 = load i8, i8* %v2_11178, align 1
  %v4_11178 = zext i8 %v3_11178 to i32
  store i32 %v4_11178, i32* %r3.global-to-local, align 4
  %v1_1117c = and i32 %v4_11178, 2
  %v2_1117c = icmp eq i32 %v1_1117c, 0
  store i1 %v2_1117c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1117c, label %dec_label_pc_110c0, label %dec_label_pc_11184

dec_label_pc_11184:                               ; preds = %dec_label_pc_11174
  %v1_11184 = and i32 %v4_11178, 16
  %v2_11184 = icmp eq i32 %v1_11184, 0
  store i1 %v2_11184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11184, label %dec_label_pc_110c0, label %dec_label_pc_1118c

dec_label_pc_1118c:                               ; preds = %dec_label_pc_11184
  %v1_1118c = and i32 %v4_11178, 4
  %v2_1118c = icmp eq i32 %v1_1118c, 0
  store i1 %v2_1118c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1118c, label %dec_label_pc_11194, label %dec_label_pc_110c0

dec_label_pc_11194:                               ; preds = %dec_label_pc_1118c
  %tmp459 = urem i8 %v3_11178, 2
  %v2_11194 = icmp eq i8 %tmp459, 0
  store i1 %v2_11194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11194, label %dec_label_pc_1119c, label %dec_label_pc_110c0

dec_label_pc_1119c:                               ; preds = %dec_label_pc_11194
  %v3_1119c = load i32, i32* %v2_1119c, align 4
  %v1_111a4 = and i32 %v3_1119c, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v3_111a8 = mul i32 %v3_1119c, 16777216
  %v1_111a0 = udiv i32 %v3_1119c, 256
  %v3_111ac = and i32 %v1_111a0, 65280
  %v4_111b0 = mul i32 %v1_111a4, 256
  %v4_111b4 = udiv i32 %v3_1119c, 16777216
  %v5_111b4 = or i32 %v4_111b4, %v3_111a8
  %v5_111b0 = or i32 %v5_111b4, %v4_111b0
  %v2_111b8 = or i32 %v5_111b0, %v3_111ac
  %v1_111bc = add i32 %v2_111b8, -1
  %v1_111c0 = udiv i32 %v1_111bc, 256
  %v3_111c4 = and i32 %v1_111c0, 65280
  %v1_111c8 = and i32 %v1_111bc, 65280
  store i32 %v1_111c8, i32* %r2.global-to-local, align 4
  %v3_111cc = mul i32 %v1_111bc, 16777216
  %v4_111d0 = udiv i32 %v1_111bc, 16777216
  %v5_111d0 = or i32 %v3_111c4, %v4_111d0
  store i32 %v5_111d0, i32* %r1.global-to-local, align 4
  store i32 %v0_11124, i32* %r3.global-to-local, align 4
  %v4_111d8 = mul nuw nsw i32 %v1_111c8, 256
  %v5_111d8 = or i32 %v4_111d8, %v3_111cc
  store i32 %v5_111d8, i32* %r0.global-to-local, align 4
  %v3_111dc = load i32, i32* %v2_111dc, align 4
  store i32 %v3_111dc, i32* %r2.global-to-local, align 4
  %v2_111e0 = call i32 @llvm.bswap.i32(i32 %v1_111bc)
  store i32 %v2_111e0, i32* %ip.global-to-local, align 4
  %v3_111e4 = icmp uge i32 %v2_111e0, %v3_111dc
  store i1 %v3_111e4, i1* %cpsr_c.global-to-local, align 1
  %v9_111e4 = icmp eq i32 %v2_111e0, %v3_111dc
  store i1 %v9_111e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_111e4, label %dec_label_pc_111ec, label %dec_label_pc_110c0

dec_label_pc_111ec:                               ; preds = %dec_label_pc_1119c
  %v0_111ec = load i32, i32* @r4, align 4
  %v2_111ec = icmp ugt i32 %v0_111ec, 254
  store i1 %v2_111ec, i1* %cpsr_c.global-to-local, align 1
  %v7_111ec = icmp eq i32 %v0_111ec, 255
  store i1 %v7_111ec, i1* %cpsr_z.global-to-local, align 1
  %v8_111f0 = icmp sgt i32 %v0_111ec, 255
  br i1 %v8_111f0, label %dec_label_pc_11270, label %dec_label_pc_111f4

dec_label_pc_111f4:                               ; preds = %dec_label_pc_111ec
  store i32 ptrtoint (i32* @global_var_1f250.168 to i32), i32* %lr.global-to-local, align 4
  %v3_111f8 = mul i32 %v0_111ec, 256
  store i32 %v3_111f8, i32* %r2.global-to-local, align 4
  %v2_111fc = load i32, i32* @global_var_1f250.168, align 4
  store i32 %v2_111fc, i32* %r1.global-to-local, align 4
  %v2_11204 = mul i32 %v0_111ec, 288
  store i32 %v2_11204, i32* %r3.global-to-local, align 4
  %v2_11208 = add i32 %v2_111fc, %v2_11204
  store i32 %v2_11208, i32* @r0, align 4
  %v1_1120c = add i32 %v2_11208, 12
  %v2_1120c = inttoptr i32 %v1_1120c to i32*
  %v3_1120c = load i32, i32* %v2_1120c, align 4
  store i32 %v3_1120c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11210 = icmp eq i32 %v3_1120c, 0
  store i1 %v2_11210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11210, label %dec_label_pc_1123c, label %dec_label_pc_1121c.preheader

dec_label_pc_1121c.preheader:                     ; preds = %dec_label_pc_111f4
  %v2_11214 = add i32 %v2_11208, 288
  store i32 %v2_11214, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1121c

dec_label_pc_1121c:                               ; preds = %dec_label_pc_1121c.preheader, %dec_label_pc_11228
  %v0_11228 = phi i32 [ %v2_11214, %dec_label_pc_1121c.preheader ], [ %v1_11234, %dec_label_pc_11228 ]
  %v0_1121c = phi i32 [ %v0_111ec, %dec_label_pc_1121c.preheader ], [ %v1_1121c, %dec_label_pc_11228 ]
  %v1_1121c = add i32 %v0_1121c, 1
  store i32 %v1_1121c, i32* @r4, align 4
  %v7_11220 = icmp eq i32 %v1_1121c, 256
  br i1 %v7_11220, label %dec_label_pc_11270.loopexit, label %dec_label_pc_11228

dec_label_pc_11228:                               ; preds = %dec_label_pc_1121c
  store i32 %v0_11228, i32* @r0, align 4
  %v1_1122c = add i32 %v0_11228, 12
  %v2_1122c = inttoptr i32 %v1_1122c to i32*
  %v3_1122c = load i32, i32* %v2_1122c, align 4
  %v2_11230 = icmp eq i32 %v3_1122c, 0
  %v1_11234 = add i32 %v0_11228, 288
  store i32 %v1_11234, i32* %r3.global-to-local, align 4
  br i1 %v2_11230, label %dec_label_pc_1123c.loopexit, label %dec_label_pc_1121c

dec_label_pc_1123c.loopexit:                      ; preds = %dec_label_pc_11228
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1123c

dec_label_pc_1123c:                               ; preds = %dec_label_pc_1123c.loopexit, %dec_label_pc_111f4
  %v1_1123c = phi i32 [ %v0_11228, %dec_label_pc_1123c.loopexit ], [ %v2_11208, %dec_label_pc_111f4 ]
  %v2_1123c = add i32 %v1_1123c, 16
  %v3_1123c = inttoptr i32 %v2_1123c to i32*
  store i32 %v3_111dc, i32* %v3_1123c, align 4
  store i32 %v4_11130, i32* %r1.global-to-local, align 4
  %v2_11244 = load i32, i32* %v1_11244, align 4
  store i32 %v2_11244, i32* %r2.global-to-local, align 4
  %v1_11248 = and i32 %v2_11244, 128
  %v2_11248 = icmp ne i32 %v1_11248, 0
  store i1 %v2_11248, i1* %cpsr_c.global-to-local, align 1
  %v3_11248 = sdiv i32 %v2_11244, 256
  store i32 %v3_11248, i32* %r3.global-to-local, align 4
  %v1_1124c = trunc i32 %v3_11248 to i8
  %v2_1124c = load i32, i32* @r0, align 4
  %v3_1124c = add i32 %v2_1124c, 21
  %v4_1124c = inttoptr i32 %v3_1124c to i8*
  store i8 %v1_1124c, i8* %v4_1124c, align 1
  %v0_11250 = load i32, i32* %r2.global-to-local, align 4
  %v1_11250 = trunc i32 %v0_11250 to i8
  %v2_11250 = load i32, i32* @r0, align 4
  %v3_11250 = add i32 %v2_11250, 20
  %v4_11250 = inttoptr i32 %v3_11250 to i8*
  store i8 %v1_11250, i8* %v4_11250, align 1
  %v0_11254 = call i32 @function_fa7c()
  store i32 %v0_11254, i32* %r0.global-to-local, align 4
  %v1_110c4.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_110c0

dec_label_pc_1125c:                               ; preds = %dec_label_pc_100a8
  store i32 ptrtoint (i32* @global_var_1f254.170 to i32), i32* %r2.global-to-local, align 4
  %v2_11260 = load i32, i32* @global_var_1f254.170, align 4
  store i32 %v2_11260, i32* %r0.global-to-local, align 4
  %v1_11264 = call i32 @function_135f0(i32 %v2_11260)
  store i32 %v1_11264, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11268

dec_label_pc_11268:                               ; preds = %dec_label_pc_10080, %dec_label_pc_1125c
  %v0_11268 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11268, i32* %r0.global-to-local, align 4
  %v1_1126c = call i32 @function_147b8(i32 %v0_11268)
  store i32 %v1_1126c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11270

dec_label_pc_11270.loopexit:                      ; preds = %dec_label_pc_1121c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11270

dec_label_pc_11270:                               ; preds = %dec_label_pc_111ec, %dec_label_pc_110f8, %dec_label_pc_110c0, %dec_label_pc_11270.loopexit, %dec_label_pc_11268
  %stack_var_-1872.1 = phi i32 [ %tmp249, %dec_label_pc_11268 ], [ %v0_11124, %dec_label_pc_11270.loopexit ], [ %v0_11124, %dec_label_pc_110c0 ], [ %v0_11124, %dec_label_pc_110f8 ], [ %v0_11124, %dec_label_pc_111ec ]
  %stack_var_-1868.1 = phi i8 [ %tmp250, %dec_label_pc_11268 ], [ %stack_var_-1868.0, %dec_label_pc_11270.loopexit ], [ %stack_var_-1868.0, %dec_label_pc_110c0 ], [ %stack_var_-1868.0, %dec_label_pc_110f8 ], [ %stack_var_-1868.0, %dec_label_pc_111ec ]
  %stack_var_-1876.1 = phi i8* [ %tmp278, %dec_label_pc_11268 ], [ %stack_var_-1876.0, %dec_label_pc_11270.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_110c0 ], [ %stack_var_-1876.0, %dec_label_pc_110f8 ], [ %stack_var_-1876.0, %dec_label_pc_111ec ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_11284412 = load i32, i32* @sp, align 4
  %v3_11284413 = add i32 %v2_11284412, 1664
  %v4_11284414 = inttoptr i32 %v3_11284413 to i32*
  store i32 0, i32* %v4_11284414, align 4
  br label %dec_label_pc_11278.dec_label_pc_11278_crit_edge

dec_label_pc_11278.dec_label_pc_11278_crit_edge:  ; preds = %dec_label_pc_11270, %dec_label_pc_11278.dec_label_pc_11278_crit_edge
  %v0_11278.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_11284.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11278 = add i32 %v0_11278.pre, 1664
  store i32 %v1_11278, i32* %ip.global-to-local, align 4
  %v1_1127c = add i32 %v0_11278.pre, 4
  store i32 %v1_1127c, i32* %r3.global-to-local, align 4
  %v7_11280 = icmp eq i32 %v1_1127c, 128
  %v2_11284 = load i32, i32* @sp, align 4
  %v3_11284 = add i32 %v2_11284, %v1_11278
  %v4_11284 = inttoptr i32 %v3_11284 to i32*
  store i32 %v0_11284.pre, i32* %v4_11284, align 4
  br i1 %v7_11280, label %dec_label_pc_1128c, label %dec_label_pc_11278.dec_label_pc_11278_crit_edge

dec_label_pc_1128c:                               ; preds = %dec_label_pc_11278.dec_label_pc_11278_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_1128c = load i32, i32* %r2.global-to-local, align 4
  %v1_11290406 = add i32 %v0_1128c, 1536
  store i32 %v1_11290406, i32* %lr.global-to-local, align 4
  %v1_11294407 = add i32 %v0_1128c, 4
  store i32 %v1_11294407, i32* %r3.global-to-local, align 4
  %v7_11298408 = icmp eq i32 %v1_11294407, 128
  %v2_1129c409 = load i32, i32* @sp, align 4
  %v3_1129c410 = add i32 %v2_1129c409, %v1_11290406
  %v4_1129c411 = inttoptr i32 %v3_1129c410 to i32*
  store i32 %v0_1128c, i32* %v4_1129c411, align 4
  br i1 %v7_11298408, label %dec_label_pc_112a4, label %dec_label_pc_11290.dec_label_pc_11290_crit_edge

dec_label_pc_11290.dec_label_pc_11290_crit_edge:  ; preds = %dec_label_pc_1128c, %dec_label_pc_11290.dec_label_pc_11290_crit_edge
  %v0_11290.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_1129c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11290 = add i32 %v0_11290.pre, 1536
  store i32 %v1_11290, i32* %lr.global-to-local, align 4
  %v1_11294 = add i32 %v0_11290.pre, 4
  store i32 %v1_11294, i32* %r3.global-to-local, align 4
  %v7_11298 = icmp eq i32 %v1_11294, 128
  %v2_1129c = load i32, i32* @sp, align 4
  %v3_1129c = add i32 %v2_1129c, %v1_11290
  %v4_1129c = inttoptr i32 %v3_1129c to i32*
  store i32 %v0_1129c.pre, i32* %v4_1129c, align 4
  br i1 %v7_11298, label %dec_label_pc_112a4, label %dec_label_pc_11290.dec_label_pc_11290_crit_edge

dec_label_pc_112a4:                               ; preds = %dec_label_pc_11290.dec_label_pc_11290_crit_edge, %dec_label_pc_1128c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_112a4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_112a4, i32* @r6, align 4
  store i32 %v0_112a4, i32* @r5, align 4
  store i32 %v0_112a4, i32* @r7, align 4
  store i32 %v0_112a4, i32* %stack_var_-48, align 4
  %v2_11368 = ptrtoint i32* %stack_var_-36 to i32
  %v2_113e0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_113e4 = ptrtoint i32* %stack_var_-348 to i32
  %v2_113ec = ptrtoint i32* %stack_var_-64 to i32
  %v2_113f0 = ptrtoint i32* %stack_var_-220 to i32
  %v2_11cf8 = ptrtoint i32* %stack_var_-41 to i32
  %v2_11d08 = ptrtoint i32* %stack_var_-73 to i32
  %v2_11598 = ptrtoint i8* %stack_var_-52 to i32
  %v2_115a0 = bitcast i8* %stack_var_-52 to i32*
  %v2_115ac = ptrtoint i32* %stack_var_-56 to i32
  %v2_11fcc = ptrtoint i32* %stack_var_-92 to i32
  %v3_11fd4 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_11320

dec_label_pc_112b8:                               ; preds = %dec_label_pc_11348, %dec_label_pc_11320
  %storemerge232 = phi i32 [ 30, %dec_label_pc_11320 ], [ 5, %dec_label_pc_11348 ]
  store i32 %storemerge232, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1f0.156 to i32), i32* %r2.global-to-local, align 4
  %v2_112bc = load i32, i32* @global_var_1f1f0.156, align 4
  store i32 %v2_112bc, i32* %r3.global-to-local, align 4
  %v1_112c0 = add i32 %v2_11334, 8
  %v2_112c0 = inttoptr i32 %v1_112c0 to i32*
  %v3_112c0 = load i32, i32* %v2_112c0, align 4
  store i32 %v3_112c0, i32* %r2.global-to-local, align 4
  %v2_112c4 = sub i32 %v2_112bc, %v3_112c0
  store i32 %v2_112c4, i32* %r3.global-to-local, align 4
  %v3_112c8 = icmp uge i32 %v2_112c4, %storemerge232
  store i1 %v3_112c8, i1* %cpsr_c.global-to-local, align 1
  %v9_112c8 = icmp eq i32 %v2_112c4, %storemerge232
  store i1 %v9_112c8, i1* %cpsr_z.global-to-local, align 1
  %v2_112cc = xor i1 %v9_112c8, true
  %v3_112cc = and i1 %v3_112c8, %v2_112cc
  br i1 %v3_112cc, label %dec_label_pc_1138c, label %dec_label_pc_112d0

dec_label_pc_112d0:                               ; preds = %dec_label_pc_112b8
  store i1 %v2_1133c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_1133c, i1* %cpsr_z.global-to-local, align 1
  %v1_11358 = add i32 %v2_11334, 4
  %v2_11358 = inttoptr i32 %v1_11358 to i32*
  %v3_11358 = load i32, i32* %v2_11358, align 4
  br i1 %v7_1133c, label %dec_label_pc_11358, label %dec_label_pc_112d8

dec_label_pc_112d8:                               ; preds = %dec_label_pc_112d0
  store i32 %v3_11358, i32* %ip.global-to-local, align 4
  %v3_112e0 = udiv i32 %v3_11358, 32
  store i32 %v2_11368, i32* %r0.global-to-local, align 4
  %v3_112e8 = mul nuw nsw i32 %v3_112e0, 4
  %v2_112ec = add i32 %v3_112e8, %v2_11368
  store i32 %v2_112ec, i32* %r3.global-to-local, align 4
  %v1_112f0 = add i32 %v2_112ec, -184
  %v2_112f0 = inttoptr i32 %v1_112f0 to i32*
  %v3_112f0 = load i32, i32* %v2_112f0, align 4
  %v1_112f4 = urem i32 %v3_11358, 32
  store i32 %v1_112f4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_112fc = shl i32 1, %v1_112f4
  %v8_112fc = or i32 %v3_112f0, %v7_112fc
  store i32 %v8_112fc, i32* %r2.global-to-local, align 4
  store i32 %v8_112fc, i32* %v2_112f0, align 4
  %v0_11304 = load i32, i32* @r6, align 4
  %v1_11304 = load i32, i32* %ip.global-to-local, align 4
  %v2_11304 = sub i32 %v0_11304, %v1_11304
  %v3_11304 = icmp uge i32 %v0_11304, %v1_11304
  store i1 %v3_11304, i1* %cpsr_c.global-to-local, align 1
  %v4_11304 = xor i32 %v1_11304, %v0_11304
  %v5_11304 = xor i32 %v2_11304, %v0_11304
  %v6_11304 = and i32 %v5_11304, %v4_11304
  %v7_11304 = icmp slt i32 %v6_11304, 0
  %v8_11304 = icmp slt i32 %v2_11304, 0
  %v9_11304 = icmp eq i32 %v0_11304, %v1_11304
  store i1 %v9_11304, i1* %cpsr_z.global-to-local, align 1
  %v2_11308 = xor i1 %v8_11304, %v7_11304
  br i1 %v2_11308, label %bb314, label %bb315

bb314:                                            ; preds = %dec_label_pc_112d8
  store i32 %v1_11304, i32* @r6, align 4
  br label %bb315

bb315:                                            ; preds = %dec_label_pc_11348, %dec_label_pc_11ff0, %dec_label_pc_113c0, %bb317, %dec_label_pc_112d8, %bb314
  %v3_1130c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_1130c, i32* %r3.global-to-local, align 4
  %v1_11310 = add i32 %v3_1130c, 1
  store i32 %v1_11310, i32* %r2.global-to-local, align 4
  %v2_11314 = icmp ugt i32 %v1_11310, 254
  store i1 %v2_11314, i1* %cpsr_c.global-to-local, align 1
  %v7_11314 = icmp eq i32 %v1_11310, 255
  store i1 %v7_11314, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_11310, i32* %stack_var_-48, align 4
  %v8_1131c = icmp sgt i32 %v1_11310, 255
  br i1 %v8_1131c, label %dec_label_pc_113cc, label %dec_label_pc_11320

dec_label_pc_11320:                               ; preds = %bb315, %dec_label_pc_112a4
  %v0_1132c = phi i32 [ %v1_11310, %bb315 ], [ %v0_112a4, %dec_label_pc_112a4 ]
  store i32 ptrtoint (i32* @global_var_1f250.168 to i32), i32* %r0.global-to-local, align 4
  %v3_11324 = mul i32 %v0_1132c, 256
  store i32 %v3_11324, i32* %r3.global-to-local, align 4
  %v2_11328 = load i32, i32* @global_var_1f250.168, align 4
  store i32 %v2_11328, i32* %r1.global-to-local, align 4
  %v2_11330 = mul i32 %v0_1132c, 288
  store i32 %v2_11330, i32* %r2.global-to-local, align 4
  %v2_11334 = add i32 %v2_11328, %v2_11330
  store i32 %v2_11334, i32* @r4, align 4
  %v1_11338 = add i32 %v2_11334, 12
  %v2_11338 = inttoptr i32 %v1_11338 to i32*
  %v3_11338 = load i32, i32* %v2_11338, align 4
  store i32 %v3_11338, i32* %ip.global-to-local, align 4
  %v2_1133c = icmp ne i32 %v3_11338, 0
  store i1 %v2_1133c, i1* %cpsr_c.global-to-local, align 1
  %v7_1133c = icmp eq i32 %v3_11338, 1
  store i1 %v7_1133c, i1* %cpsr_z.global-to-local, align 1
  %v2_11340 = xor i1 %v7_1133c, true
  %v3_11340 = and i1 %v2_1133c, %v2_11340
  br i1 %v3_11340, label %dec_label_pc_112b8, label %dec_label_pc_11348

dec_label_pc_11348:                               ; preds = %dec_label_pc_11320
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11348 = icmp eq i32 %v3_11338, 0
  store i1 %v2_11348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11348, label %bb315, label %dec_label_pc_112b8

dec_label_pc_11358:                               ; preds = %dec_label_pc_112d0
  store i32 %v3_11358, i32* %r0.global-to-local, align 4
  %v3_11360 = udiv i32 %v3_11358, 32
  %v3_11364 = mul nuw nsw i32 %v3_11360, 4
  store i32 %v2_11368, i32* %lr.global-to-local, align 4
  %v2_1136c = add i32 %v3_11364, %v2_11368
  store i32 %v2_1136c, i32* %r3.global-to-local, align 4
  %v1_11370 = add i32 %v2_1136c, -312
  %v2_11370 = inttoptr i32 %v1_11370 to i32*
  %v3_11370 = load i32, i32* %v2_11370, align 4
  %v1_11374 = urem i32 %v3_11358, 32
  store i32 %v1_11374, i32* %r1.global-to-local, align 4
  %v7_11378 = shl i32 1, %v1_11374
  %v8_11378 = or i32 %v3_11370, %v7_11378
  store i32 %v8_11378, i32* %r2.global-to-local, align 4
  %v0_1137c = load i32, i32* @r5, align 4
  %v2_1137c = sub i32 %v0_1137c, %v3_11358
  %v3_1137c = icmp uge i32 %v0_1137c, %v3_11358
  store i1 %v3_1137c, i1* %cpsr_c.global-to-local, align 1
  %v4_1137c = xor i32 %v0_1137c, %v3_11358
  %v5_1137c = xor i32 %v2_1137c, %v0_1137c
  %v6_1137c = and i32 %v5_1137c, %v4_1137c
  %v7_1137c = icmp slt i32 %v6_1137c, 0
  %v8_1137c = icmp slt i32 %v2_1137c, 0
  %v9_1137c = icmp eq i32 %v0_1137c, %v3_11358
  store i1 %v9_1137c, i1* %cpsr_z.global-to-local, align 1
  %v2_11380 = xor i1 %v8_1137c, %v7_1137c
  br i1 %v2_11380, label %bb316, label %bb317

bb316:                                            ; preds = %dec_label_pc_11358
  store i32 %v3_11358, i32* @r5, align 4
  br label %bb317

bb317:                                            ; preds = %dec_label_pc_11358, %bb316
  store i32 %v8_11378, i32* %v2_11370, align 4
  br label %bb315

dec_label_pc_1138c:                               ; preds = %dec_label_pc_112b8
  %v1_1138c = add i32 %v2_11334, 4
  %v2_1138c = inttoptr i32 %v1_1138c to i32*
  %v3_1138c = load i32, i32* %v2_1138c, align 4
  store i32 %v3_1138c, i32* %r0.global-to-local, align 4
  %v1_11390 = call i32 @function_135f0(i32 %v3_1138c)
  store i32 %v1_11390, i32* %r0.global-to-local, align 4
  %v0_11394 = load i32, i32* @r4, align 4
  %v1_11394 = add i32 %v0_11394, 12
  %v2_11394 = inttoptr i32 %v1_11394 to i32*
  %v3_11394 = load i32, i32* %v2_11394, align 4
  store i32 %v3_11394, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1139c = icmp ugt i32 %v3_11394, 1
  store i1 %v2_1139c, i1* %cpsr_c.global-to-local, align 1
  %v7_1139c = icmp eq i32 %v3_11394, 2
  store i1 %v7_1139c, i1* %cpsr_z.global-to-local, align 1
  %v2_113a0 = add i32 %v0_11394, 4
  %v3_113a0 = inttoptr i32 %v2_113a0 to i32*
  store i32 -1, i32* %v3_113a0, align 4
  %v2_113a4 = xor i1 %v2_1139c, true
  %v3_113a4 = or i1 %v7_1139c, %v2_113a4
  br i1 %v3_113a4, label %dec_label_pc_11ff0, label %dec_label_pc_113a8

dec_label_pc_113a8:                               ; preds = %dec_label_pc_1138c
  %v0_113a8 = load i32, i32* @r4, align 4
  %v1_113a8 = add i32 %v0_113a8, 284
  %v2_113a8 = inttoptr i32 %v1_113a8 to i8*
  %v3_113a8 = load i8, i8* %v2_113a8, align 1
  %v4_113a8 = zext i8 %v3_113a8 to i32
  %v1_113ac = add nuw nsw i32 %v4_113a8, 1
  %v1_113b0 = urem i32 %v1_113ac, 256
  store i32 %v1_113b0, i32* %r3.global-to-local, align 4
  %v2_113b4 = icmp ugt i32 %v1_113b0, 9
  store i1 %v2_113b4, i1* %cpsr_c.global-to-local, align 1
  %v7_113b4 = icmp eq i32 %v1_113b0, 10
  store i1 %v7_113b4, i1* %cpsr_z.global-to-local, align 1
  %v1_113b8 = trunc i32 %v1_113ac to i8
  store i8 %v1_113b8, i8* %v2_113a8, align 1
  %v0_113bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_113bc, label %dec_label_pc_11ff0, label %dec_label_pc_113c0

dec_label_pc_113c0:                               ; preds = %dec_label_pc_113a8
  %v0_113c0 = load i32, i32* @r4, align 4
  store i32 %v0_113c0, i32* @r0, align 4
  %v0_113c4 = call i32 @function_fa7c()
  store i32 %v0_113c4, i32* %r0.global-to-local, align 4
  br label %bb315

dec_label_pc_113cc:                               ; preds = %bb315
  store i32 1, i32* %stack_var_-64, align 4
  %v0_113d4 = load i32, i32* @r6, align 4
  %v1_113d4 = load i32, i32* @r5, align 4
  %v2_113d4 = sub i32 %v0_113d4, %v1_113d4
  %v3_113d4 = icmp uge i32 %v0_113d4, %v1_113d4
  store i1 %v3_113d4, i1* %cpsr_c.global-to-local, align 1
  %v4_113d4 = xor i32 %v1_113d4, %v0_113d4
  %v5_113d4 = xor i32 %v2_113d4, %v0_113d4
  %v6_113d4 = and i32 %v5_113d4, %v4_113d4
  %v7_113d4 = icmp slt i32 %v6_113d4, 0
  %v8_113d4 = icmp slt i32 %v2_113d4, 0
  %v9_113d4 = icmp eq i32 %v0_113d4, %v1_113d4
  store i1 %v9_113d4, i1* %cpsr_z.global-to-local, align 1
  %v2_113d8 = xor i1 %v8_113d4, %v7_113d4
  %v1_113d4.v0_113d4 = select i1 %v2_113d8, i32 %v1_113d4, i32 %v0_113d4
  store i32 %v2_113e4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_113ec, i32* %ip.global-to-local, align 4
  store i32 %v2_113f0, i32* %r1.global-to-local, align 4
  %v1_113f4 = add i32 %v1_113d4.v0_113d4, 1
  store i32 %v1_113f4, i32* %r0.global-to-local, align 4
  %v5_11400 = call i32 @function_13810(i32 %v1_113f4, i32 %v2_113f0, i32 %v2_113e4, i32 0, i32 %v2_113ec)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_11408 = call i32 @function_138c0(i32* null)
  store i32 ptrtoint (i32* @global_var_1f1f0.156 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_11408, i32* @global_var_1f1f0.156, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  br label %dec_label_pc_11460

dec_label_pc_11424:                               ; preds = %dec_label_pc_11484, %dec_label_pc_11570
  %v0_1143c = phi i32 [ %v3_11478, %dec_label_pc_11484 ], [ %v0_11424.pre, %dec_label_pc_11570 ]
  %v3_11424 = udiv i32 %v0_1143c, 32
  %v3_1142c = mul nuw nsw i32 %v3_11424, 4
  store i32 %v2_11368, i32* @lr, align 4
  %v2_11434 = add i32 %v3_1142c, %v2_11368
  store i32 %v2_11434, i32* %r3.global-to-local, align 4
  %v1_11438 = add i32 %v2_11434, -184
  %v2_11438 = inttoptr i32 %v1_11438 to i32*
  %v3_11438 = load i32, i32* %v2_11438, align 4
  %v1_1143c = urem i32 %v0_1143c, 32
  store i32 %v1_1143c, i32* %r1.global-to-local, align 4
  %v2_11440 = add nsw i32 %v1_1143c, -1
  %v3_11440 = shl i32 1, %v2_11440
  %v4_11440 = and i32 %v3_11440, %v3_11438
  %v5_11440 = icmp ne i32 %v4_11440, 0
  store i1 %v5_11440, i1* %cpsr_c.global-to-local, align 1
  %v6_11440 = lshr i32 %v3_11438, %v1_1143c
  store i32 %v6_11440, i32* %r2.global-to-local, align 4
  %v1_11444 = urem i32 %v6_11440, 2
  %v2_11444 = icmp eq i32 %v1_11444, 0
  store i1 %v2_11444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11444, label %dec_label_pc_1144c, label %dec_label_pc_115fc.preheader

dec_label_pc_115fc.preheader:                     ; preds = %dec_label_pc_11424
  %v0_115fc112 = load i32, i32* @r5, align 4
  %v1_115fc113 = add i32 %v0_115fc112, 12
  %v2_115fc114 = inttoptr i32 %v1_115fc113 to i32*
  %v3_115fc115 = load i32, i32* %v2_115fc114, align 4
  store i32 %v3_115fc115, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11600111117 = icmp eq i32 %v3_115fc115, 0
  store i1 %v2_11600111117, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11600111117, label %dec_label_pc_1144c, label %dec_label_pc_11608.lr.ph

dec_label_pc_1144c:                               ; preds = %dec_label_pc_115fc.loopexit, %dec_label_pc_11600.backedge, %dec_label_pc_115fc.preheader, %dec_label_pc_11424, %.thread228, %dec_label_pc_11e6c, %dec_label_pc_11460, %dec_label_pc_1203c, %dec_label_pc_11eac
  %v3_1144c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_1144c, i32* %r3.global-to-local, align 4
  %v1_11450 = add i32 %v3_1144c, 1
  store i32 %v1_11450, i32* %r2.global-to-local, align 4
  %v2_11454 = icmp ugt i32 %v1_11450, 254
  store i1 %v2_11454, i1* %cpsr_c.global-to-local, align 1
  %v7_11454 = icmp eq i32 %v1_11450, 255
  store i1 %v7_11454, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_11450, i32* %stack_var_-48, align 4
  %v8_1145c = icmp sgt i32 %v1_11450, 255
  br i1 %v8_1145c, label %dec_label_pc_10e04, label %dec_label_pc_11460

dec_label_pc_11460:                               ; preds = %dec_label_pc_1144c, %dec_label_pc_113cc
  %v0_1146c = phi i32 [ %v1_11450, %dec_label_pc_1144c ], [ 0, %dec_label_pc_113cc ]
  store i32 ptrtoint (i32* @global_var_1f250.168 to i32), i32* %ip.global-to-local, align 4
  %v3_11464 = mul i32 %v0_1146c, 256
  store i32 %v3_11464, i32* %r3.global-to-local, align 4
  %v2_11468 = load i32, i32* @global_var_1f250.168, align 4
  store i32 %v2_11468, i32* %r1.global-to-local, align 4
  %v2_11470 = mul i32 %v0_1146c, 288
  store i32 %v2_11470, i32* %r2.global-to-local, align 4
  %v2_11474 = add i32 %v2_11468, %v2_11470
  store i32 %v2_11474, i32* @r5, align 4
  %v1_11478 = add i32 %v2_11474, 4
  %v2_11478 = inttoptr i32 %v1_11478 to i32*
  %v3_11478 = load i32, i32* %v2_11478, align 4
  store i32 %v3_11478, i32* @r4, align 4
  %v2_1147c = icmp eq i32 %v3_11478, -1
  store i1 %v2_1147c, i1* %cpsr_c.global-to-local, align 1
  %v7_1147c = icmp eq i32 %v3_11478, -1
  store i1 %v7_1147c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1147c, label %dec_label_pc_1144c, label %dec_label_pc_11484

dec_label_pc_11484:                               ; preds = %dec_label_pc_11460
  %v3_11484 = udiv i32 %v3_11478, 32
  %v3_1148c = mul nuw nsw i32 %v3_11484, 4
  store i32 %v2_11368, i32* %lr.global-to-local, align 4
  %v2_11494 = add i32 %v3_1148c, %v2_11368
  store i32 %v2_11494, i32* %r3.global-to-local, align 4
  %v1_11498 = add i32 %v2_11494, -312
  %v2_11498 = inttoptr i32 %v1_11498 to i32*
  %v3_11498 = load i32, i32* %v2_11498, align 4
  %v1_1149c = urem i32 %v3_11478, 32
  store i32 %v1_1149c, i32* %r1.global-to-local, align 4
  %v2_114a0 = add nsw i32 %v1_1149c, -1
  %v3_114a0 = shl i32 1, %v2_114a0
  %v4_114a0 = and i32 %v3_11498, %v3_114a0
  %v5_114a0 = icmp ne i32 %v4_114a0, 0
  store i1 %v5_114a0, i1* %cpsr_c.global-to-local, align 1
  %v6_114a0 = lshr i32 %v3_11498, %v1_1149c
  store i32 %v6_114a0, i32* %r2.global-to-local, align 4
  %v1_114a4 = urem i32 %v6_114a0, 2
  %v2_114a4 = icmp eq i32 %v1_114a4, 0
  store i1 %v2_114a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_114a4, label %dec_label_pc_11424, label %dec_label_pc_114ac

dec_label_pc_114ac:                               ; preds = %dec_label_pc_11484
  store i32 4, i32* %r2.global-to-local, align 4
  store i8 4, i8* %stack_var_-52, align 1
  store i32 %v2_115ac, i32* %r3.global-to-local, align 4
  store i32 %v2_11598, i32* %ip.global-to-local, align 4
  store i32 %v3_11478, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v6_114dc = call i32 @function_13d90(i32 %v3_11478, i32 1, i32 4, i32* nonnull %stack_var_-56, i32 %v2_11598)
  %v3_114e0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_114e0, i32* %r3.global-to-local, align 4
  %v2_114e4 = or i32 %v3_114e0, %v6_114dc
  store i32 %v2_114e4, i32* %r0.global-to-local, align 4
  %v4_114e4 = icmp eq i32 %v2_114e4, 0
  store i1 %v4_114e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_114e4, label %dec_label_pc_114ec, label %dec_label_pc_1203c

dec_label_pc_114ec:                               ; preds = %dec_label_pc_114ac
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_114f0 = load i32, i32* @r5, align 4
  %v2_114f0 = add i32 %v1_114f0, 12
  %v3_114f0 = inttoptr i32 %v2_114f0 to i32*
  store i32 2, i32* %v3_114f0, align 4
  %v0_114f4 = call i32 @function_f8e8()
  store i32 %v0_114f4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f1ec.162 to i32), i32* %r3.global-to-local, align 4
  %v3_114fc = load i8, i8* @global_var_1f1ed.163, align 1
  %v4_114fc = zext i8 %v3_114fc to i32
  store i32 %v4_114fc, i32* %r2.global-to-local, align 4
  %v2_11500 = load i8, i8* bitcast (i8** @global_var_1f1ec.162 to i8*), align 4
  %v3_11500 = zext i8 %v2_11500 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_11504 = mul nuw nsw i32 %v4_114fc, 256
  %v5_11504 = or i32 %v3_11500, %v4_11504
  store i32 %v5_11504, i32* %r1.global-to-local, align 4
  %v2_11508 = call i32 @function_13378(i32 %v0_114f4, i32 %v5_11504)
  store i32 ptrtoint (i32* @global_var_1f1bc.158 to i32), i32* %r3.global-to-local, align 4
  %v2_11510 = load i32, i32* @global_var_1f1bc.158, align 4
  store i32 %v2_11510, i32* %lr.global-to-local, align 4
  %v1_11518 = load i32, i32* @r6, align 4
  %v9_11518 = icmp eq i32 %v2_11510, %v1_11518
  store i1 %v9_11518, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_1151c = urem i32 %v2_11508, 65536
  store i32 %v3_1151c, i32* %r0.global-to-local, align 4
  %v7_11520 = icmp sgt i32 %v2_11510, %v1_11518
  br i1 %v7_11520, label %dec_label_pc_11524, label %dec_label_pc_12034

dec_label_pc_11524:                               ; preds = %dec_label_pc_114ec
  %v2_11528 = load i32, i32* @global_var_1f1e8.160, align 4
  store i32 %v2_11528, i32* %r3.global-to-local, align 4
  store i32 %v1_11518, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11544

dec_label_pc_11534:                               ; preds = %dec_label_pc_1155c, %dec_label_pc_11544
  %v1_11534 = add i32 %v0_11534, 1
  store i32 %v1_11534, i32* %ip.global-to-local, align 4
  %v3_11538 = icmp uge i32 %v2_11510, %v1_11534
  store i1 %v3_11538, i1* %cpsr_c.global-to-local, align 1
  %v9_11538 = icmp eq i32 %v2_11510, %v1_11534
  store i1 %v9_11538, i1* %cpsr_z.global-to-local, align 1
  %v1_1153c = add i32 %v0_1153c, 16
  store i32 %v1_1153c, i32* %r3.global-to-local, align 4
  br i1 %v9_11538, label %dec_label_pc_12034, label %dec_label_pc_11544

dec_label_pc_11544:                               ; preds = %dec_label_pc_11534, %dec_label_pc_11524
  %v0_11534 = phi i32 [ %v1_11534, %dec_label_pc_11534 ], [ %v1_11518, %dec_label_pc_11524 ]
  %v0_1153c = phi i32 [ %v1_1153c, %dec_label_pc_11534 ], [ %v2_11528, %dec_label_pc_11524 ]
  store i32 %v0_1153c, i32* %r1.global-to-local, align 4
  %v1_11548 = add i32 %v0_1153c, 9
  %v2_11548 = inttoptr i32 %v1_11548 to i8*
  %v3_11548 = load i8, i8* %v2_11548, align 1
  %v4_11548 = zext i8 %v3_11548 to i32
  store i32 %v4_11548, i32* %r2.global-to-local, align 4
  %v1_1154c = add i32 %v0_1153c, 8
  %v2_1154c = inttoptr i32 %v1_1154c to i8*
  %v3_1154c = load i8, i8* %v2_1154c, align 1
  %v4_1154c = zext i8 %v3_1154c to i32
  %v4_11550 = mul nuw nsw i32 %v4_11548, 256
  %v5_11550 = or i32 %v4_1154c, %v4_11550
  store i32 %v5_11550, i32* %r3.global-to-local, align 4
  %v3_11554 = icmp uge i32 %v5_11550, %v3_1151c
  store i1 %v3_11554, i1* %cpsr_c.global-to-local, align 1
  %v9_11554 = icmp eq i32 %v5_11550, %v3_1151c
  store i1 %v9_11554, i1* %cpsr_z.global-to-local, align 1
  %v2_11558 = xor i1 %v9_11554, true
  %v3_11558 = and i1 %v3_11554, %v2_11558
  br i1 %v3_11558, label %dec_label_pc_11534, label %dec_label_pc_1155c

dec_label_pc_1155c:                               ; preds = %dec_label_pc_11544
  %v1_1155c = add i32 %v0_1153c, 10
  %v2_1155c = inttoptr i32 %v1_1155c to i8*
  %v3_1155c = load i8, i8* %v2_1155c, align 1
  %v4_1155c = zext i8 %v3_1155c to i32
  store i32 %v4_1155c, i32* %r3.global-to-local, align 4
  %v1_11560 = add i32 %v0_1153c, 11
  %v2_11560 = inttoptr i32 %v1_11560 to i8*
  %v3_11560 = load i8, i8* %v2_11560, align 1
  %v4_11560 = zext i8 %v3_11560 to i32
  store i32 %v4_11560, i32* %r2.global-to-local, align 4
  %v4_11564 = mul nuw nsw i32 %v4_11560, 256
  %v5_11564 = or i32 %v4_11564, %v4_1155c
  store i32 %v5_11564, i32* %r3.global-to-local, align 4
  %v3_11568 = icmp uge i32 %v5_11564, %v3_1151c
  store i1 %v3_11568, i1* %cpsr_c.global-to-local, align 1
  %v9_11568 = icmp eq i32 %v5_11564, %v3_1151c
  store i1 %v9_11568, i1* %cpsr_z.global-to-local, align 1
  %v2_1156c = xor i1 %v3_11568, true
  %v3_1156c = or i1 %v9_11568, %v2_1156c
  br i1 %v3_1156c, label %dec_label_pc_11534, label %dec_label_pc_11570

dec_label_pc_11570:                               ; preds = %dec_label_pc_1155c, %dec_label_pc_12034
  %v0_11578 = phi i32 [ 0, %dec_label_pc_12034 ], [ %v0_1153c, %dec_label_pc_1155c ]
  %v0_11570 = load i32, i32* @r5, align 4
  %v1_11570 = add i32 %v0_11570, 4
  %v2_11570 = inttoptr i32 %v1_11570 to i32*
  %v3_11570 = load i32, i32* %v2_11570, align 4
  store i32 %v3_11570, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_11578 = inttoptr i32 %v0_11570 to i32*
  store i32 %v0_11578, i32* %v2_11578, align 4
  %v0_1157c = load i32, i32* %ip.global-to-local, align 4
  %v1_1157c = load i32, i32* @r5, align 4
  %v2_1157c = add i32 %v1_1157c, 24
  %v3_1157c = inttoptr i32 %v2_1157c to i32*
  store i32 %v0_1157c, i32* %v3_1157c, align 4
  %v0_11424.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11424

dec_label_pc_11584:                               ; preds = %dec_label_pc_117c4, %dec_label_pc_11798, %dec_label_pc_117e0
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_11588 = call i32 @function_121f4(i32 30)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_11590 = call i32 @function_121f4(i32 31)
  store i32 %v2_11598, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_115a0 = call i32 @function_12110(i32 30, i32* %v2_115a0)
  store i32 %v3_115a0, i32* @r4, align 4
  store i32 %v2_115ac, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_115b4 = call i32 @function_12110(i32 31, i32* nonnull %stack_var_-56)
  %v3_115b8 = load i8, i8* %stack_var_-52, align 1
  %v4_115b8 = sext i8 %v3_115b8 to i32
  %sext7 = mul i32 %v3_115b4, 16777216
  %v1_115bc = sdiv i32 %sext7, 16777216
  store i32 %v1_115bc, i32* @r6, align 4
  %v0_115c0 = load i32, i32* @r4, align 4
  store i32 %v0_115c0, i32* %r2.global-to-local, align 4
  %v1_115c4 = add nsw i32 %v4_115b8, -1
  store i32 %v1_115c4, i32* %r3.global-to-local, align 4
  %v0_115c8 = load i32, i32* @sl, align 4
  store i32 %v0_115c8, i32* %r0.global-to-local, align 4
  %v0_115cc = load i32, i32* @r5, align 4
  %v1_115cc = add i32 %v0_115cc, 24
  %v2_115cc = inttoptr i32 %v1_115cc to i32*
  %v3_115cc = load i32, i32* %v2_115cc, align 4
  store i32 %v3_115cc, i32* %r1.global-to-local, align 4
  %v4_115d0 = call i32 @function_12d20(i32 %v0_115c8, i32 %v3_115cc, i32 %v0_115c0, i32 %v1_115c4)
  store i32 %v4_115d0, i32* %r0.global-to-local, align 4
  %v2_115d4 = icmp eq i32 %v4_115d0, -1
  store i1 %v2_115d4, i1* %cpsr_c.global-to-local, align 1
  %v7_115d4 = icmp eq i32 %v4_115d0, -1
  store i1 %v7_115d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115d4, label %dec_label_pc_11f2c, label %dec_label_pc_115e4

dec_label_pc_115e4:                               ; preds = %dec_label_pc_11f2c, %dec_label_pc_11584
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_115e8 = call i32 @function_1213c(i32 30)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_115f0 = call i32 @function_1213c(i32 31)
  store i32 %v1_115f0, i32* %r0.global-to-local, align 4
  %v0_115f4 = load i32, i32* @r7, align 4
  %v3_115f4 = icmp eq i32 %v0_115f4, -1
  store i1 %v3_115f4, i1* %cpsr_c.global-to-local, align 1
  %v8_115f4 = icmp eq i32 %v0_115f4, -1
  store i1 %v8_115f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_115f4, label %dec_label_pc_115fc.loopexit, label %dec_label_pc_117ec

dec_label_pc_115fc.loopexit:                      ; preds = %dec_label_pc_11788, %dec_label_pc_11da8, %dec_label_pc_1167c, %dec_label_pc_115e4, %dec_label_pc_11d94
  %v0_115fc = load i32, i32* @r5, align 4
  %v1_115fc = add i32 %v0_115fc, 12
  %v2_115fc = inttoptr i32 %v1_115fc to i32*
  %v3_115fc = load i32, i32* %v2_115fc, align 4
  store i32 %v3_115fc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11600111 = icmp eq i32 %v3_115fc, 0
  store i1 %v2_11600111, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11600111, label %dec_label_pc_1144c, label %dec_label_pc_11608.lr.ph

dec_label_pc_11608.lr.ph:                         ; preds = %dec_label_pc_115fc.preheader, %dec_label_pc_115fc.loopexit
  %v0_11608145 = phi i32 [ %v0_115fc, %dec_label_pc_115fc.loopexit ], [ %v0_115fc112, %dec_label_pc_115fc.preheader ]
  br label %dec_label_pc_11608

dec_label_pc_11608:                               ; preds = %dec_label_pc_11600.backedge.thread, %dec_label_pc_11600.backedge, %dec_label_pc_11600.backedge.thread455, %dec_label_pc_11608.lr.ph
  %v0_11ee4 = phi i32 [ %v0_11608145, %dec_label_pc_11608.lr.ph ], [ %v0_11608142, %dec_label_pc_11600.backedge ], [ %v0_1167c, %dec_label_pc_11600.backedge.thread ], [ %v0_1167c, %dec_label_pc_11600.backedge.thread455 ]
  %v1_11608 = add i32 %v0_11ee4, 24
  %v2_11608 = inttoptr i32 %v1_11608 to i32*
  %v3_11608 = load i32, i32* %v2_11608, align 4
  store i32 %v3_11608, i32* %r3.global-to-local, align 4
  %v2_1160c = icmp ugt i32 %v3_11608, 255
  store i1 %v2_1160c, i1* %cpsr_c.global-to-local, align 1
  %v7_1160c = icmp eq i32 %v3_11608, 256
  store i1 %v7_1160c, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_11ee4, 28
  store i32 %.pre, i32* @sl, align 4
  br i1 %v7_1160c, label %dec_label_pc_11ee4, label %dec_label_pc_11618

dec_label_pc_11618:                               ; preds = %dec_label_pc_11608, %dec_label_pc_11ee4
  store i32 0, i32* @r6, align 4
  %v1_1161c = load i32, i32* @sb, align 4
  %v2_1161c = inttoptr i32 %v1_1161c to i32*
  store i32 0, i32* %v2_1161c, align 4
  %v0_11620 = load i32, i32* @r5, align 4
  %v1_11620 = add i32 %v0_11620, 24
  %v2_11620 = inttoptr i32 %v1_11620 to i32*
  %v3_11620 = load i32, i32* %v2_11620, align 4
  store i32 %v3_11620, i32* %r2.global-to-local, align 4
  %v0_11624 = load i32, i32* @sl, align 4
  %v2_11624 = add i32 %v0_11624, %v3_11620
  store i32 %v2_11624, i32* @r4, align 4
  %v1_11628 = add i32 %v0_11620, 4
  %v2_11628 = inttoptr i32 %v1_11628 to i32*
  %v3_11628 = load i32, i32* %v2_11628, align 4
  store i32 %v3_11628, i32* %r0.global-to-local, align 4
  %v1_1162c = sub i32 256, %v3_11620
  store i32 %v1_1162c, i32* %r2.global-to-local, align 4
  store i32 %v2_11624, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11638 = inttoptr i32 %v2_11624 to i32*
  %v5_11638 = call i32 @function_13dec(i32 %v3_11628, i32* %v4_11638, i32 %v1_1162c, i32 16384)
  store i32 %v5_11638, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1163c = icmp eq i32 %v5_11638, 0
  store i1 %v2_1163c, i1* %cpsr_z.global-to-local, align 1
  %tmp320 = icmp slt i32 %v5_11638, 1
  br i1 %tmp320, label %dec_label_pc_11e60, label %dec_label_pc_11644

dec_label_pc_11644:                               ; preds = %dec_label_pc_11618
  %v0_11644 = load i32, i32* @r6, align 4
  store i32 %v0_11644, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1164c

dec_label_pc_1164c:                               ; preds = %bb322, %dec_label_pc_11644
  %v3_11654 = phi i32 [ %v1_11658, %bb322 ], [ %v0_11644, %dec_label_pc_11644 ]
  %v1_1164c = load i32, i32* @r4, align 4
  %v2_1164c = add i32 %v1_1164c, %v3_11654
  %v3_1164c = inttoptr i32 %v2_1164c to i8*
  %v4_1164c = load i8, i8* %v3_1164c, align 1
  %v6_1164c = zext i8 %v4_1164c to i32
  store i32 %v6_1164c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11650 = icmp eq i8 %v4_1164c, 0
  store i1 %v2_11650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11650, label %bb321, label %bb322

bb321:                                            ; preds = %dec_label_pc_1164c
  %v1_11654 = load i32, i32* %r1.global-to-local, align 4
  %v2_11654 = trunc i32 %v1_11654 to i8
  store i8 %v2_11654, i8* %v3_1164c, align 1
  %v0_11658.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb322

bb322:                                            ; preds = %dec_label_pc_1164c, %bb321
  %v0_11658 = phi i32 [ %v3_11654, %dec_label_pc_1164c ], [ %v0_11658.pre, %bb321 ]
  %v1_11658 = add i32 %v0_11658, 1
  store i32 %v1_11658, i32* %r2.global-to-local, align 4
  %v3_1165c = icmp uge i32 %v5_11638, %v1_11658
  store i1 %v3_1165c, i1* %cpsr_c.global-to-local, align 1
  %v9_1165c = icmp eq i32 %v5_11638, %v1_11658
  store i1 %v9_1165c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1165c, label %dec_label_pc_11664, label %dec_label_pc_1164c

dec_label_pc_11664:                               ; preds = %bb322, %dec_label_pc_11e64
  store i32 ptrtoint (i32* @global_var_1f1f0.156 to i32), i32* %r1.global-to-local, align 4
  %v0_11668 = load i32, i32* @r5, align 4
  %v1_11668 = add i32 %v0_11668, 24
  %v2_11668 = inttoptr i32 %v1_11668 to i32*
  %v3_11668 = load i32, i32* %v2_11668, align 4
  %v2_1166c = load i32, i32* @global_var_1f1f0.156, align 4
  store i32 %v2_1166c, i32* %r3.global-to-local, align 4
  %v2_11670 = add i32 %v3_11668, %v5_11638
  store i32 %v2_11670, i32* %ip.global-to-local, align 4
  store i32 %v2_11670, i32* %v2_11668, align 4
  %v0_11678 = load i32, i32* %r3.global-to-local, align 4
  %v1_11678 = load i32, i32* @r5, align 4
  %v2_11678 = add i32 %v1_11678, 8
  %v3_11678 = inttoptr i32 %v2_11678 to i32*
  store i32 %v0_11678, i32* %v3_11678, align 4
  br label %dec_label_pc_1167c

dec_label_pc_1167c:                               ; preds = %dec_label_pc_11c14, %dec_label_pc_11664
  %v0_1167c = load i32, i32* @r5, align 4
  %v1_1167c = add i32 %v0_1167c, 12
  %v2_1167c = inttoptr i32 %v1_1167c to i32*
  %v3_1167c = load i32, i32* %v2_1167c, align 4
  store i32 %v3_1167c, i32* %r2.global-to-local, align 4
  %v1_11680 = add i32 %v3_1167c, -2
  store i32 %v1_11680, i32* %r3.global-to-local, align 4
  %v7_11684 = icmp eq i32 %v1_11680, 8
  store i1 %v7_11684, i1* %cpsr_z.global-to-local, align 1
  %v5_11688 = and i32 %v1_11680, 1073741824
  %v6_11688 = icmp ne i32 %v5_11688, 0
  store i1 %v6_11688, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_1167c, label %dec_label_pc_115fc.loopexit [
    i32 2, label %dec_label_pc_116b4
    i32 3, label %dec_label_pc_11798
    i32 4, label %dec_label_pc_11830
    i32 5, label %dec_label_pc_118c0
    i32 6, label %dec_label_pc_11974
    i32 7, label %dec_label_pc_11adc
    i32 8, label %dec_label_pc_11a28
    i32 9, label %dec_label_pc_11c38
    i32 10, label %dec_label_pc_11b90
  ]

dec_label_pc_116b4:                               ; preds = %dec_label_pc_1167c
  %v1_116b4 = add i32 %v0_1167c, 24
  %v2_116b4 = inttoptr i32 %v1_116b4 to i32*
  %v3_116b4 = load i32, i32* %v2_116b4, align 4
  store i32 %v3_116b4, i32* %ip.global-to-local, align 4
  %v0_116b8 = load i32, i32* @sl, align 4
  store i32 %v0_116b8, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  store i32 -3, i32* %r8.global-to-local, align 4
  %v1_116c4 = add i32 %v0_1167c, 29
  store i32 %v1_116c4, i32* @r4, align 4
  %v3_116c8102 = icmp eq i32 %v3_116b4, 0
  store i1 %v3_116c8102, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_116c8102, i1* %cpsr_z.global-to-local, align 1
  %v6_116cc109 = icmp sgt i32 %v3_116b4, 0
  br i1 %v6_116cc109, label %dec_label_pc_116d0.preheader, label %dec_label_pc_11778

dec_label_pc_116c8.loopexit:                      ; preds = %dec_label_pc_116e8
  %v2_116f0 = add i32 %v1_116f0, 2
  store i32 %v2_116f0, i32* @r6, align 4
  %v2_116f4 = add i32 %v1_116f4, 2
  store i32 %v2_116f4, i32* @r4, align 4
  %v2_116f8 = add i32 %v1_116f8, 2
  store i32 %v2_116f8, i32* @r7, align 4
  %v3_116c8 = icmp uge i32 %v2_116f8, %v1_116c8
  store i1 %v3_116c8, i1* %cpsr_c.global-to-local, align 1
  %v9_116c8 = icmp eq i32 %v2_116f8, %v1_116c8
  store i1 %v9_116c8, i1* %cpsr_z.global-to-local, align 1
  %v6_116cc = icmp slt i32 %v2_116f8, %v1_116c8
  br i1 %v6_116cc, label %dec_label_pc_116d0.preheader, label %dec_label_pc_11778

dec_label_pc_116d0.preheader:                     ; preds = %dec_label_pc_116b4, %dec_label_pc_116c8.loopexit
  %v6_11780184 = phi i32 [ %v6_11780185, %dec_label_pc_116c8.loopexit ], [ %v0_1167c, %dec_label_pc_116b4 ]
  %v1_116f8173 = phi i32 [ %v2_116f8, %dec_label_pc_116c8.loopexit ], [ 0, %dec_label_pc_116b4 ]
  %v1_116f0171 = phi i32 [ %v2_116f0, %dec_label_pc_116c8.loopexit ], [ %v0_116b8, %dec_label_pc_116b4 ]
  %v1_116dc169 = phi i32 [ %v1_116c8, %dec_label_pc_116c8.loopexit ], [ %v3_116b4, %dec_label_pc_116b4 ]
  %v0_116d0167 = phi i32 [ %v2_116f4, %dec_label_pc_116c8.loopexit ], [ %v1_116c4, %dec_label_pc_116b4 ]
  br label %dec_label_pc_116d0

dec_label_pc_116d0:                               ; preds = %dec_label_pc_116d0.preheader, %dec_label_pc_11758
  %v6_11780185 = phi i32 [ %v6_11780184, %dec_label_pc_116d0.preheader ], [ %v0_11760, %dec_label_pc_11758 ]
  %v1_116f8 = phi i32 [ %v1_116f8173, %dec_label_pc_116d0.preheader ], [ %v1_11764, %dec_label_pc_11758 ]
  %v1_116f0 = phi i32 [ %v1_116f0171, %dec_label_pc_116d0.preheader ], [ %v1_1176c, %dec_label_pc_11758 ]
  %v1_116c8 = phi i32 [ %v1_116dc169, %dec_label_pc_116d0.preheader ], [ %v3_11760, %dec_label_pc_11758 ]
  %v1_116f4 = phi i32 [ %v0_116d0167, %dec_label_pc_116d0.preheader ], [ %v1_11770, %dec_label_pc_11758 ]
  %v1_116d0 = add i32 %v1_116f4, -1
  %v2_116d0 = inttoptr i32 %v1_116d0 to i8*
  %v3_116d0 = load i8, i8* %v2_116d0, align 1
  %v4_116d0 = zext i8 %v3_116d0 to i32
  store i32 %v4_116d0, i32* %r3.global-to-local, align 4
  %v2_116d4 = icmp eq i8 %v3_116d0, -1
  store i1 %v2_116d4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_116d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116d4, label %dec_label_pc_116dc, label %dec_label_pc_11778

dec_label_pc_116dc:                               ; preds = %dec_label_pc_116d0
  %v0_116dc = load i32, i32* @sl, align 4
  %v2_116dc = add i32 %v0_116dc, %v1_116c8
  store i32 %v2_116dc, i32* %r2.global-to-local, align 4
  %v3_116e0 = icmp uge i32 %v2_116dc, %v1_116f4
  store i1 %v3_116e0, i1* %cpsr_c.global-to-local, align 1
  %v9_116e0 = icmp eq i32 %v2_116dc, %v1_116f4
  store i1 %v9_116e0, i1* %cpsr_z.global-to-local, align 1
  %v2_116e4 = xor i1 %v3_116e0, true
  %v3_116e4 = or i1 %v9_116e0, %v2_116e4
  br i1 %v3_116e4, label %dec_label_pc_11778, label %dec_label_pc_116e8

dec_label_pc_116e8:                               ; preds = %dec_label_pc_116dc
  %v1_116e8 = inttoptr i32 %v1_116f4 to i8*
  %v2_116e8 = load i8, i8* %v1_116e8, align 1
  %v3_116e8 = zext i8 %v2_116e8 to i32
  store i32 %v3_116e8, i32* %r3.global-to-local, align 4
  %v2_116ec = icmp eq i8 %v2_116e8, -1
  store i1 %v2_116ec, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_116ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116ec, label %dec_label_pc_116c8.loopexit, label %dec_label_pc_11700

dec_label_pc_11700:                               ; preds = %dec_label_pc_116e8
  %v2_11700 = icmp ugt i8 %v2_116e8, -4
  store i1 %v2_11700, i1* %cpsr_c.global-to-local, align 1
  %v7_11700 = icmp eq i8 %v2_116e8, -3
  store i1 %v7_11700, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11700, label %dec_label_pc_11cec, label %dec_label_pc_11708

dec_label_pc_11708:                               ; preds = %dec_label_pc_11700
  %v1_11708 = add i32 %v1_116f0, 2
  store i32 %v1_11708, i32* %r3.global-to-local, align 4
  %v3_1170c = icmp uge i32 %v2_116dc, %v1_11708
  store i1 %v3_1170c, i1* %cpsr_c.global-to-local, align 1
  %v9_1170c = icmp eq i32 %v2_116dc, %v1_11708
  store i1 %v9_1170c, i1* %cpsr_z.global-to-local, align 1
  %v2_11710 = xor i1 %v3_1170c, true
  %v3_11710 = or i1 %v9_1170c, %v2_11710
  br i1 %v3_11710, label %dec_label_pc_11778, label %dec_label_pc_11714

dec_label_pc_11714:                               ; preds = %bb344, %dec_label_pc_11d48, %.thread75, %dec_label_pc_11708
  %v0_11714 = load i32, i32* @r4, align 4
  %v1_11714 = inttoptr i32 %v0_11714 to i8*
  %v2_11714 = load i8, i8* %v1_11714, align 1
  %v3_11714 = zext i8 %v2_11714 to i32
  store i32 %v3_11714, i32* %r3.global-to-local, align 4
  %v2_11718 = icmp ugt i8 %v2_11714, -4
  store i1 %v2_11718, i1* %cpsr_c.global-to-local, align 1
  %v7_11718 = icmp eq i8 %v2_11714, -3
  store i1 %v7_11718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11718, label %.thread62, label %dec_label_pc_11728

.thread62:                                        ; preds = %dec_label_pc_11714
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_11714, align 1
  %v0_11724.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11724.pr.pr, label %bb324, label %.thread62.dec_label_pc_11728thread-pre-split_crit_edge

.thread62.dec_label_pc_11728thread-pre-split_crit_edge: ; preds = %.thread62
  %v0_11728.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11728

dec_label_pc_11728:                               ; preds = %dec_label_pc_11714, %.thread62.dec_label_pc_11728thread-pre-split_crit_edge
  %v0_11728.pr = phi i32 [ %v0_11728.pr.pre, %.thread62.dec_label_pc_11728thread-pre-split_crit_edge ], [ %v3_11714, %dec_label_pc_11714 ]
  %v2_11728 = icmp ugt i32 %v0_11728.pr, 250
  store i1 %v2_11728, i1* %cpsr_c.global-to-local, align 1
  %v7_11728 = icmp eq i32 %v0_11728.pr, 251
  store i1 %v7_11728, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11728, label %bb323, label %bb324

bb323:                                            ; preds = %dec_label_pc_11728
  %v1_1172c = load i32, i32* %r8.global-to-local, align 4
  %v2_1172c = trunc i32 %v1_1172c to i8
  %v3_1172c = load i32, i32* @r4, align 4
  %v4_1172c = inttoptr i32 %v3_1172c to i8*
  store i8 %v2_1172c, i8* %v4_1172c, align 1
  br label %bb324

bb324:                                            ; preds = %.thread62, %dec_label_pc_11728, %bb323
  %v0_11730 = load i32, i32* @r4, align 4
  %v1_11730 = add i32 %v0_11730, 1
  %v2_11730 = inttoptr i32 %v1_11730 to i8*
  %v3_11730 = load i8, i8* %v2_11730, align 1
  %v4_11730 = zext i8 %v3_11730 to i32
  store i32 %v4_11730, i32* %r3.global-to-local, align 4
  %v2_11734 = icmp ugt i8 %v3_11730, -4
  store i1 %v2_11734, i1* %cpsr_c.global-to-local, align 1
  %v7_11734 = icmp eq i8 %v3_11730, -3
  store i1 %v7_11734, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11734, label %.thread65, label %dec_label_pc_11744

.thread65:                                        ; preds = %bb324
  store i32 -4, i32* %ip.global-to-local, align 4
  store i8 -4, i8* %v2_11730, align 1
  %v0_11740.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11740.pr.pr, label %bb326, label %.thread65.dec_label_pc_11744_crit_edge

.thread65.dec_label_pc_11744_crit_edge:           ; preds = %.thread65
  %v0_11744.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11744

dec_label_pc_11744:                               ; preds = %.thread65.dec_label_pc_11744_crit_edge, %bb324
  %v0_11744 = phi i32 [ %v0_11744.pre, %.thread65.dec_label_pc_11744_crit_edge ], [ %v4_11730, %bb324 ]
  %v2_11744 = icmp ugt i32 %v0_11744, 250
  store i1 %v2_11744, i1* %cpsr_c.global-to-local, align 1
  %v7_11744 = icmp eq i32 %v0_11744, 251
  store i1 %v7_11744, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11744, label %bb325, label %bb326

bb325:                                            ; preds = %dec_label_pc_11744
  %v1_11748 = load i32, i32* %r8.global-to-local, align 4
  %v2_11748 = trunc i32 %v1_11748 to i8
  %v3_11748 = load i32, i32* @r4, align 4
  %v4_11748 = add i32 %v3_11748, 1
  %v5_11748 = inttoptr i32 %v4_11748 to i8*
  store i8 %v2_11748, i8* %v5_11748, align 1
  br label %bb326

bb326:                                            ; preds = %.thread65, %dec_label_pc_11744, %bb325
  %v0_1174c = load i32, i32* @r5, align 4
  %v1_1174c = add i32 %v0_1174c, 4
  %v2_1174c = inttoptr i32 %v1_1174c to i32*
  %v3_1174c = load i32, i32* %v2_1174c, align 4
  store i32 %v3_1174c, i32* %r0.global-to-local, align 4
  %v0_11750 = load i32, i32* @r6, align 4
  br label %dec_label_pc_11758

dec_label_pc_11758:                               ; preds = %dec_label_pc_11eb8, %bb326
  %v0_1175c = phi i32 [ %v3_11ed4, %dec_label_pc_11eb8 ], [ %v3_1174c, %bb326 ]
  %storemerge8 = phi i32 [ %v2_11d08, %dec_label_pc_11eb8 ], [ %v0_11750, %bb326 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_11eb8 ], [ 3, %bb326 ]
  store i32 %storemerge8, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1175c = inttoptr i32 %storemerge8 to i32*
  %v5_1175c = call i32 @function_13e4c(i32 %v0_1175c, i32* %v4_1175c, i32 %storemerge, i32 16384)
  store i32 %v5_1175c, i32* %r0.global-to-local, align 4
  %v0_11760 = load i32, i32* @r5, align 4
  %v1_11760 = add i32 %v0_11760, 24
  %v2_11760 = inttoptr i32 %v1_11760 to i32*
  %v3_11760 = load i32, i32* %v2_11760, align 4
  store i32 %v3_11760, i32* %ip.global-to-local, align 4
  %v0_11764 = load i32, i32* @r7, align 4
  %v1_11764 = add i32 %v0_11764, 3
  store i32 %v1_11764, i32* @r7, align 4
  %v3_11768 = icmp uge i32 %v1_11764, %v3_11760
  store i1 %v3_11768, i1* %cpsr_c.global-to-local, align 1
  %v9_11768 = icmp eq i32 %v1_11764, %v3_11760
  store i1 %v9_11768, i1* %cpsr_z.global-to-local, align 1
  %v0_1176c = load i32, i32* @r6, align 4
  %v1_1176c = add i32 %v0_1176c, 3
  store i32 %v1_1176c, i32* @r6, align 4
  %v0_11770 = load i32, i32* @r4, align 4
  %v1_11770 = add i32 %v0_11770, 3
  store i32 %v1_11770, i32* @r4, align 4
  %v5_11774 = icmp slt i32 %v1_11764, %v3_11760
  br i1 %v5_11774, label %dec_label_pc_116d0, label %dec_label_pc_11778

dec_label_pc_11778:                               ; preds = %dec_label_pc_116c8.loopexit, %dec_label_pc_116d0, %dec_label_pc_11758, %dec_label_pc_11708, %dec_label_pc_116dc, %dec_label_pc_116b4, %dec_label_pc_11cec.dec_label_pc_11778.loopexit_crit_edge
  %v6_11780 = phi i32 [ %v0_11d14, %dec_label_pc_11cec.dec_label_pc_11778.loopexit_crit_edge ], [ %v0_1167c, %dec_label_pc_116b4 ], [ %v6_11780185, %dec_label_pc_116d0 ], [ %v0_11760, %dec_label_pc_11758 ], [ %v6_11780185, %dec_label_pc_11708 ], [ %v6_11780185, %dec_label_pc_116dc ], [ %v6_11780185, %dec_label_pc_116c8.loopexit ]
  %v0_11788.pre = phi i32 [ %v0_11778.pre.pre, %dec_label_pc_11cec.dec_label_pc_11778.loopexit_crit_edge ], [ 0, %dec_label_pc_116b4 ], [ %v1_116f8, %dec_label_pc_116d0 ], [ %v1_11764, %dec_label_pc_11758 ], [ %v1_116f8, %dec_label_pc_11708 ], [ %v1_116f8, %dec_label_pc_116dc ], [ %v2_116f8, %dec_label_pc_116c8.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11778 = icmp eq i32 %v0_11788.pre, 0
  store i1 %v2_11778, i1* %cpsr_z.global-to-local, align 1
  %tmp327 = icmp slt i32 %v0_11788.pre, 1
  br i1 %tmp327, label %dec_label_pc_11788, label %.thread223

.thread223:                                       ; preds = %dec_label_pc_11778
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_11780 = add i32 %v6_11780, 12
  %v8_11780 = inttoptr i32 %v7_11780 to i32*
  store i32 3, i32* %v8_11780, align 4
  br label %dec_label_pc_11c14

dec_label_pc_11788:                               ; preds = %dec_label_pc_11778, %dec_label_pc_11c8c, %dec_label_pc_11df4, %dec_label_pc_11b30, %dec_label_pc_11a7c, %dec_label_pc_119c8, %dec_label_pc_11914, %dec_label_pc_1187c, %dec_label_pc_117ec
  %v0_11788 = phi i32 [ %v1_11c80, %dec_label_pc_11c8c ], [ %v0_11dec, %dec_label_pc_11df4 ], [ %v1_11b24, %dec_label_pc_11b30 ], [ %v1_11a70, %dec_label_pc_11a7c ], [ %v1_119bc, %dec_label_pc_119c8 ], [ %v1_11908, %dec_label_pc_11914 ], [ %v0_1187c, %dec_label_pc_1187c ], [ %v0_117ec, %dec_label_pc_117ec ], [ %v0_11788.pre, %dec_label_pc_11778 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11788 = icmp eq i32 %v0_11788, 0
  store i1 %v2_11788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11788, label %dec_label_pc_115fc.loopexit, label %dec_label_pc_11790

dec_label_pc_11790:                               ; preds = %dec_label_pc_11788
  %v0_11790 = load i32, i32* @r5, align 4
  %v1_11790 = add i32 %v0_11790, 24
  %v2_11790 = inttoptr i32 %v1_11790 to i32*
  %v3_11790 = load i32, i32* %v2_11790, align 4
  store i32 %v3_11790, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11c14

dec_label_pc_11798:                               ; preds = %dec_label_pc_1167c
  %v1_11798 = add i32 %v0_1167c, 24
  %v2_11798 = inttoptr i32 %v1_11798 to i32*
  %v3_11798 = load i32, i32* %v2_11798, align 4
  store i32 %v3_11798, i32* %ip.global-to-local, align 4
  %v1_1179c = add i32 %v3_11798, -1
  store i32 %v1_1179c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_117a0 = icmp eq i32 %v1_1179c, 0
  store i1 %v2_117a0, i1* %cpsr_z.global-to-local, align 1
  %v5_117a4 = icmp sgt i32 %v1_1179c, 0
  br i1 %v5_117a4, label %dec_label_pc_117cc, label %dec_label_pc_11584

dec_label_pc_117ac:                               ; preds = %bb328
  %v2_117ac = icmp ugt i8 %v3_117d0, 35
  store i1 %v2_117ac, i1* %cpsr_c.global-to-local, align 1
  %v7_117ac = icmp eq i8 %v3_117d0, 36
  store i1 %v7_117ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117ac, label %dec_label_pc_117e0, label %dec_label_pc_117b4

dec_label_pc_117b4:                               ; preds = %dec_label_pc_117ac
  %v2_117b4 = icmp ugt i8 %v3_117d0, 34
  store i1 %v2_117b4, i1* %cpsr_c.global-to-local, align 1
  %v7_117b4 = icmp eq i8 %v3_117d0, 35
  store i1 %v7_117b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117b4, label %dec_label_pc_117e0, label %dec_label_pc_117bc

dec_label_pc_117bc:                               ; preds = %dec_label_pc_117b4
  %v2_117bc = icmp ugt i8 %v3_117d0, 36
  store i1 %v2_117bc, i1* %cpsr_c.global-to-local, align 1
  %v7_117bc = icmp eq i8 %v3_117d0, 37
  store i1 %v7_117bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117bc, label %dec_label_pc_117e0, label %dec_label_pc_117c4

dec_label_pc_117c4:                               ; preds = %dec_label_pc_117bc
  %v1_117c4 = add i32 %v0_117e0, -1
  store i32 %v1_117c4, i32* %r0.global-to-local, align 4
  %v2_117c4 = icmp ne i32 %v0_117e0, 0
  store i1 %v2_117c4, i1* %cpsr_c.global-to-local, align 1
  %v7_117c4 = icmp eq i32 %v0_117e0, 1
  store i1 %v7_117c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117c4, label %dec_label_pc_11584, label %dec_label_pc_117cc

dec_label_pc_117cc:                               ; preds = %dec_label_pc_11798, %dec_label_pc_117c4
  %v0_117e0 = phi i32 [ %v1_117c4, %dec_label_pc_117c4 ], [ %v1_1179c, %dec_label_pc_11798 ]
  %v2_117cc = add i32 %v0_117e0, %v0_1167c
  store i32 %v2_117cc, i32* %r3.global-to-local, align 4
  %v1_117d0 = add i32 %v2_117cc, 28
  %v2_117d0 = inttoptr i32 %v1_117d0 to i8*
  %v3_117d0 = load i8, i8* %v2_117d0, align 1
  %v4_117d0 = zext i8 %v3_117d0 to i32
  store i32 %v4_117d0, i32* %r3.global-to-local, align 4
  %v2_117d4 = icmp ugt i8 %v3_117d0, 61
  store i1 %v2_117d4, i1* %cpsr_c.global-to-local, align 1
  %v7_117d4 = icmp eq i8 %v3_117d0, 62
  store i1 %v7_117d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117d4, label %dec_label_pc_117e0, label %bb328

bb328:                                            ; preds = %dec_label_pc_117cc
  %v3_117d8 = icmp ugt i8 %v3_117d0, 57
  store i1 %v3_117d8, i1* %cpsr_c.global-to-local, align 1
  %v8_117d8 = icmp eq i8 %v3_117d0, 58
  store i1 %v8_117d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_117d8, label %dec_label_pc_117e0, label %dec_label_pc_117ac

dec_label_pc_117e0:                               ; preds = %dec_label_pc_117cc, %bb328, %dec_label_pc_117bc, %dec_label_pc_117b4, %dec_label_pc_117ac
  %v1_117e0 = add i32 %v0_117e0, 1
  store i32 %v1_117e0, i32* @r7, align 4
  %v2_117e4 = icmp eq i32 %v1_117e0, -1
  store i1 %v2_117e4, i1* %cpsr_c.global-to-local, align 1
  %v7_117e4 = icmp eq i32 %v0_117e0, -2
  store i1 %v7_117e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117e4, label %dec_label_pc_11584, label %dec_label_pc_117ec

dec_label_pc_117ec:                               ; preds = %dec_label_pc_115e4, %dec_label_pc_117e0
  %v0_117ec = phi i32 [ %v0_115f4, %dec_label_pc_115e4 ], [ %v1_117e0, %dec_label_pc_117e0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_117ec = icmp eq i32 %v0_117ec, 0
  store i1 %v2_117ec, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v0_117ec, 1
  br i1 %tmp329, label %dec_label_pc_11788, label %dec_label_pc_117f4

dec_label_pc_117f4:                               ; preds = %dec_label_pc_117ec
  %v0_117f4 = load i32, i32* @r5, align 4
  %v1_117f4 = inttoptr i32 %v0_117f4 to i32*
  %v2_117f4 = load i32, i32* %v1_117f4, align 4
  store i32 %v2_117f4, i32* %r3.global-to-local, align 4
  %v1_117f8 = add i32 %v0_117f4, 4
  %v2_117f8 = inttoptr i32 %v1_117f8 to i32*
  %v3_117f8 = load i32, i32* %v2_117f8, align 4
  store i32 %v3_117f8, i32* %r0.global-to-local, align 4
  %v1_117fc = add i32 %v2_117f4, 12
  %v2_117fc = inttoptr i32 %v1_117fc to i8*
  %v3_117fc = load i8, i8* %v2_117fc, align 1
  %v4_117fc = zext i8 %v3_117fc to i32
  store i32 %v4_117fc, i32* %r2.global-to-local, align 4
  %v1_11800 = inttoptr i32 %v2_117f4 to i32*
  %v2_11800 = load i32, i32* %v1_11800, align 4
  store i32 %v2_11800, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11808 = inttoptr i32 %v2_11800 to i32*
  %v5_11808 = call i32 @function_13e4c(i32 %v3_117f8, i32* %v4_11808, i32 %v4_117fc, i32 16384)
  store i32 %v5_11808, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_11810 = load i32, i32* @r5, align 4
  %v1_11810 = add i32 %v0_11810, 4
  %v2_11810 = inttoptr i32 %v1_11810 to i32*
  %v3_11810 = load i32, i32* %v2_11810, align 4
  store i32 %v3_11810, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_1181c = call i32 @function_13e4c(i32 %v3_11810, i32* bitcast ([3 x i8]* @global_var_15ce8.35 to i32*), i32 2, i32 16384)
  store i32 %v5_1181c, i32* %r0.global-to-local, align 4
  %v0_11820 = load i32, i32* @r5, align 4
  %v1_11820 = add i32 %v0_11820, 24
  %v2_11820 = inttoptr i32 %v1_11820 to i32*
  %v3_11820 = load i32, i32* %v2_11820, align 4
  store i32 %v3_11820, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_11828 = add i32 %v0_11820, 12
  %v3_11828 = inttoptr i32 %v2_11828 to i32*
  store i32 4, i32* %v3_11828, align 4
  br label %dec_label_pc_11c14

dec_label_pc_11830:                               ; preds = %dec_label_pc_1167c
  %v1_11830 = add i32 %v0_1167c, 24
  %v2_11830 = inttoptr i32 %v1_11830 to i32*
  %v3_11830 = load i32, i32* %v2_11830, align 4
  store i32 %v3_11830, i32* %ip.global-to-local, align 4
  %v1_11834 = add i32 %v3_11830, -1
  store i32 %v1_11834, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11838 = icmp eq i32 %v1_11834, 0
  store i1 %v2_11838, i1* %cpsr_z.global-to-local, align 1
  %v5_1183c = icmp sgt i32 %v1_11834, 0
  br i1 %v5_1183c, label %dec_label_pc_1185c, label %dec_label_pc_11d54

dec_label_pc_11844:                               ; preds = %bb330
  %v2_11844 = icmp ugt i8 %v3_11860, 35
  store i1 %v2_11844, i1* %cpsr_c.global-to-local, align 1
  %v7_11844 = icmp eq i8 %v3_11860, 36
  store i1 %v7_11844, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11844, label %dec_label_pc_11870, label %dec_label_pc_1184c

dec_label_pc_1184c:                               ; preds = %dec_label_pc_11844
  %v2_1184c = icmp ugt i8 %v3_11860, 34
  store i1 %v2_1184c, i1* %cpsr_c.global-to-local, align 1
  %v7_1184c = icmp eq i8 %v3_11860, 35
  store i1 %v7_1184c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1184c, label %dec_label_pc_11870, label %dec_label_pc_11854

dec_label_pc_11854:                               ; preds = %dec_label_pc_1184c
  %v1_11854 = add i32 %v0_11870, -1
  store i32 %v1_11854, i32* %r0.global-to-local, align 4
  %v2_11854 = icmp ne i32 %v0_11870, 0
  store i1 %v2_11854, i1* %cpsr_c.global-to-local, align 1
  %v7_11854 = icmp eq i32 %v0_11870, 1
  store i1 %v7_11854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11854, label %dec_label_pc_11d54, label %dec_label_pc_1185c

dec_label_pc_1185c:                               ; preds = %dec_label_pc_11830, %dec_label_pc_11854
  %v0_11870 = phi i32 [ %v1_11854, %dec_label_pc_11854 ], [ %v1_11834, %dec_label_pc_11830 ]
  %v2_1185c = add i32 %v0_11870, %v0_1167c
  store i32 %v2_1185c, i32* %r3.global-to-local, align 4
  %v1_11860 = add i32 %v2_1185c, 28
  %v2_11860 = inttoptr i32 %v1_11860 to i8*
  %v3_11860 = load i8, i8* %v2_11860, align 1
  %v4_11860 = zext i8 %v3_11860 to i32
  store i32 %v4_11860, i32* %r3.global-to-local, align 4
  %v2_11864 = icmp ugt i8 %v3_11860, 61
  store i1 %v2_11864, i1* %cpsr_c.global-to-local, align 1
  %v7_11864 = icmp eq i8 %v3_11860, 62
  store i1 %v7_11864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11864, label %dec_label_pc_11870, label %bb330

bb330:                                            ; preds = %dec_label_pc_1185c
  %v3_11868 = icmp ugt i8 %v3_11860, 57
  store i1 %v3_11868, i1* %cpsr_c.global-to-local, align 1
  %v8_11868 = icmp eq i8 %v3_11860, 58
  store i1 %v8_11868, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11868, label %dec_label_pc_11870, label %dec_label_pc_11844

dec_label_pc_11870:                               ; preds = %dec_label_pc_1185c, %bb330, %dec_label_pc_1184c, %dec_label_pc_11844
  %v1_11870 = add i32 %v0_11870, 1
  store i32 %v1_11870, i32* @r7, align 4
  %v2_11874 = icmp eq i32 %v1_11870, -1
  store i1 %v2_11874, i1* %cpsr_c.global-to-local, align 1
  %v7_11874 = icmp eq i32 %v0_11870, -2
  store i1 %v7_11874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11874, label %dec_label_pc_11d54, label %dec_label_pc_1187c

dec_label_pc_1187c:                               ; preds = %dec_label_pc_11d94, %dec_label_pc_11870
  %v0_1187c = phi i32 [ %v0_11d9c, %dec_label_pc_11d94 ], [ %v1_11870, %dec_label_pc_11870 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1187c = icmp eq i32 %v0_1187c, 0
  store i1 %v2_1187c, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v0_1187c, 1
  br i1 %tmp331, label %dec_label_pc_11788, label %dec_label_pc_11884

dec_label_pc_11884:                               ; preds = %dec_label_pc_1187c
  %v0_11884 = load i32, i32* @r5, align 4
  %v1_11884 = inttoptr i32 %v0_11884 to i32*
  %v2_11884 = load i32, i32* %v1_11884, align 4
  store i32 %v2_11884, i32* %r3.global-to-local, align 4
  %v1_11888 = add i32 %v0_11884, 4
  %v2_11888 = inttoptr i32 %v1_11888 to i32*
  %v3_11888 = load i32, i32* %v2_11888, align 4
  store i32 %v3_11888, i32* %r0.global-to-local, align 4
  %v1_1188c = add i32 %v2_11884, 13
  %v2_1188c = inttoptr i32 %v1_1188c to i8*
  %v3_1188c = load i8, i8* %v2_1188c, align 1
  %v4_1188c = zext i8 %v3_1188c to i32
  store i32 %v4_1188c, i32* %r2.global-to-local, align 4
  %v1_11890 = add i32 %v2_11884, 4
  %v2_11890 = inttoptr i32 %v1_11890 to i32*
  %v3_11890 = load i32, i32* %v2_11890, align 4
  store i32 %v3_11890, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11898 = inttoptr i32 %v3_11890 to i32*
  %v5_11898 = call i32 @function_13e4c(i32 %v3_11888, i32* %v4_11898, i32 %v4_1188c, i32 16384)
  store i32 %v5_11898, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_118a0 = load i32, i32* @r5, align 4
  %v1_118a0 = add i32 %v0_118a0, 4
  %v2_118a0 = inttoptr i32 %v1_118a0 to i32*
  %v3_118a0 = load i32, i32* %v2_118a0, align 4
  store i32 %v3_118a0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_118ac = call i32 @function_13e4c(i32 %v3_118a0, i32* bitcast ([3 x i8]* @global_var_15ce8.35 to i32*), i32 2, i32 16384)
  store i32 %v5_118ac, i32* %r0.global-to-local, align 4
  %v0_118b0 = load i32, i32* @r5, align 4
  %v1_118b0 = add i32 %v0_118b0, 24
  %v2_118b0 = inttoptr i32 %v1_118b0 to i32*
  %v3_118b0 = load i32, i32* %v2_118b0, align 4
  store i32 %v3_118b0, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_118b8 = add i32 %v0_118b0, 12
  %v3_118b8 = inttoptr i32 %v2_118b8 to i32*
  store i32 5, i32* %v3_118b8, align 4
  br label %dec_label_pc_11c14

dec_label_pc_118c0:                               ; preds = %dec_label_pc_1167c
  %v1_118c0 = add i32 %v0_1167c, 24
  %v2_118c0 = inttoptr i32 %v1_118c0 to i32*
  %v3_118c0 = load i32, i32* %v2_118c0, align 4
  store i32 %v3_118c0, i32* %ip.global-to-local, align 4
  %v1_118c4 = add i32 %v3_118c0, -1
  store i32 %v1_118c4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_118c8 = icmp eq i32 %v1_118c4, 0
  store i1 %v2_118c8, i1* %cpsr_z.global-to-local, align 1
  %v5_118cc = icmp sgt i32 %v1_118c4, 0
  br i1 %v5_118cc, label %dec_label_pc_118f4, label %dec_label_pc_11600.backedge.thread

dec_label_pc_118d4:                               ; preds = %bb332
  %v2_118d4 = icmp ugt i8 %v3_118f8, 35
  store i1 %v2_118d4, i1* %cpsr_c.global-to-local, align 1
  %v7_118d4 = icmp eq i8 %v3_118f8, 36
  store i1 %v7_118d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118d4, label %dec_label_pc_11908, label %dec_label_pc_118dc

dec_label_pc_118dc:                               ; preds = %dec_label_pc_118d4
  %v2_118dc = icmp ugt i8 %v3_118f8, 34
  store i1 %v2_118dc, i1* %cpsr_c.global-to-local, align 1
  %v7_118dc = icmp eq i8 %v3_118f8, 35
  store i1 %v7_118dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118dc, label %dec_label_pc_11908, label %dec_label_pc_118e4

dec_label_pc_118e4:                               ; preds = %dec_label_pc_118dc
  %v2_118e4 = icmp ugt i8 %v3_118f8, 36
  store i1 %v2_118e4, i1* %cpsr_c.global-to-local, align 1
  %v7_118e4 = icmp eq i8 %v3_118f8, 37
  store i1 %v7_118e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118e4, label %dec_label_pc_11908, label %dec_label_pc_118ec

dec_label_pc_118ec:                               ; preds = %dec_label_pc_118e4
  %v1_118ec = add i32 %v0_11908, -1
  store i32 %v1_118ec, i32* %r0.global-to-local, align 4
  %v2_118ec = icmp ne i32 %v0_11908, 0
  store i1 %v2_118ec, i1* %cpsr_c.global-to-local, align 1
  %v7_118ec = icmp eq i32 %v0_11908, 1
  store i1 %v7_118ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118ec, label %dec_label_pc_11600.backedge.thread455, label %dec_label_pc_118f4

dec_label_pc_118f4:                               ; preds = %dec_label_pc_118c0, %dec_label_pc_118ec
  %v0_11908 = phi i32 [ %v1_118ec, %dec_label_pc_118ec ], [ %v1_118c4, %dec_label_pc_118c0 ]
  %v2_118f4 = add i32 %v0_11908, %v0_1167c
  store i32 %v2_118f4, i32* %r3.global-to-local, align 4
  %v1_118f8 = add i32 %v2_118f4, 28
  %v2_118f8 = inttoptr i32 %v1_118f8 to i8*
  %v3_118f8 = load i8, i8* %v2_118f8, align 1
  %v4_118f8 = zext i8 %v3_118f8 to i32
  store i32 %v4_118f8, i32* %r3.global-to-local, align 4
  %v2_118fc = icmp ugt i8 %v3_118f8, 61
  store i1 %v2_118fc, i1* %cpsr_c.global-to-local, align 1
  %v7_118fc = icmp eq i8 %v3_118f8, 62
  store i1 %v7_118fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118fc, label %dec_label_pc_11908, label %bb332

bb332:                                            ; preds = %dec_label_pc_118f4
  %v3_11900 = icmp ugt i8 %v3_118f8, 57
  store i1 %v3_11900, i1* %cpsr_c.global-to-local, align 1
  %v8_11900 = icmp eq i8 %v3_118f8, 58
  store i1 %v8_11900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11900, label %dec_label_pc_11908, label %dec_label_pc_118d4

dec_label_pc_11908:                               ; preds = %dec_label_pc_118f4, %bb332, %dec_label_pc_118e4, %dec_label_pc_118dc, %dec_label_pc_118d4
  %v1_11908 = add i32 %v0_11908, 1
  store i32 %v1_11908, i32* @r7, align 4
  %v2_1190c = icmp eq i32 %v1_11908, -1
  store i1 %v2_1190c, i1* %cpsr_c.global-to-local, align 1
  %v7_1190c = icmp eq i32 %v0_11908, -2
  store i1 %v7_1190c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1190c, label %dec_label_pc_11600.backedge.thread455, label %dec_label_pc_11914

dec_label_pc_11914:                               ; preds = %dec_label_pc_11908
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11914 = icmp eq i32 %v1_11908, 0
  store i1 %v2_11914, i1* %cpsr_z.global-to-local, align 1
  %tmp333 = icmp slt i32 %v1_11908, 1
  br i1 %tmp333, label %dec_label_pc_11788, label %dec_label_pc_1191c

dec_label_pc_1191c:                               ; preds = %dec_label_pc_11914
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_11920 = call i32 @function_121f4(i32 23)
  store i32 %v2_11598, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_11930 = call i32 @function_12110(i32 23, i32* %v2_115a0)
  store i32 %v3_11930, i32* %r0.global-to-local, align 4
  %v3_11934 = load i8, i8* %stack_var_-52, align 1
  %v4_11934 = sext i8 %v3_11934 to i32
  store i32 %v4_11934, i32* %r2.global-to-local, align 4
  store i32 %v3_11930, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11940 = load i32, i32* @r5, align 4
  %v1_11940 = add i32 %v0_11940, 4
  %v2_11940 = inttoptr i32 %v1_11940 to i32*
  %v3_11940 = load i32, i32* %v2_11940, align 4
  store i32 %v3_11940, i32* %r0.global-to-local, align 4
  %v4_11944 = inttoptr i32 %v3_11930 to i32*
  %v5_11944 = call i32 @function_13e4c(i32 %v3_11940, i32* %v4_11944, i32 %v4_11934, i32 16384)
  store i32 %v5_11944, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11954 = load i32, i32* @r5, align 4
  %v1_11954 = add i32 %v0_11954, 4
  %v2_11954 = inttoptr i32 %v1_11954 to i32*
  %v3_11954 = load i32, i32* %v2_11954, align 4
  store i32 %v3_11954, i32* %r0.global-to-local, align 4
  %v5_11958 = call i32 @function_13e4c(i32 %v3_11954, i32* bitcast ([3 x i8]* @global_var_15ce8.35 to i32*), i32 2, i32 16384)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_11960 = call i32 @function_1213c(i32 23)
  store i32 %v1_11960, i32* %r0.global-to-local, align 4
  %v0_11964 = load i32, i32* @r5, align 4
  %v1_11964 = add i32 %v0_11964, 24
  %v2_11964 = inttoptr i32 %v1_11964 to i32*
  %v3_11964 = load i32, i32* %v2_11964, align 4
  store i32 %v3_11964, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_1196c = add i32 %v0_11964, 12
  %v3_1196c = inttoptr i32 %v2_1196c to i32*
  store i32 6, i32* %v3_1196c, align 4
  br label %dec_label_pc_11c14

dec_label_pc_11974:                               ; preds = %dec_label_pc_1167c
  %v1_11974 = add i32 %v0_1167c, 24
  %v2_11974 = inttoptr i32 %v1_11974 to i32*
  %v3_11974 = load i32, i32* %v2_11974, align 4
  store i32 %v3_11974, i32* %ip.global-to-local, align 4
  %v1_11978 = add i32 %v3_11974, -1
  store i32 %v1_11978, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1197c = icmp eq i32 %v1_11978, 0
  store i1 %v2_1197c, i1* %cpsr_z.global-to-local, align 1
  %v5_11980 = icmp sgt i32 %v1_11978, 0
  br i1 %v5_11980, label %dec_label_pc_119a8, label %dec_label_pc_11600.backedge.thread

dec_label_pc_11988:                               ; preds = %bb334
  %v2_11988 = icmp ugt i8 %v3_119ac, 35
  store i1 %v2_11988, i1* %cpsr_c.global-to-local, align 1
  %v7_11988 = icmp eq i8 %v3_119ac, 36
  store i1 %v7_11988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11988, label %dec_label_pc_119bc, label %dec_label_pc_11990

dec_label_pc_11990:                               ; preds = %dec_label_pc_11988
  %v2_11990 = icmp ugt i8 %v3_119ac, 34
  store i1 %v2_11990, i1* %cpsr_c.global-to-local, align 1
  %v7_11990 = icmp eq i8 %v3_119ac, 35
  store i1 %v7_11990, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11990, label %dec_label_pc_119bc, label %dec_label_pc_11998

dec_label_pc_11998:                               ; preds = %dec_label_pc_11990
  %v2_11998 = icmp ugt i8 %v3_119ac, 36
  store i1 %v2_11998, i1* %cpsr_c.global-to-local, align 1
  %v7_11998 = icmp eq i8 %v3_119ac, 37
  store i1 %v7_11998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11998, label %dec_label_pc_119bc, label %dec_label_pc_119a0

dec_label_pc_119a0:                               ; preds = %dec_label_pc_11998
  %v1_119a0 = add i32 %v0_119bc, -1
  store i32 %v1_119a0, i32* %r0.global-to-local, align 4
  %v2_119a0 = icmp ne i32 %v0_119bc, 0
  store i1 %v2_119a0, i1* %cpsr_c.global-to-local, align 1
  %v7_119a0 = icmp eq i32 %v0_119bc, 1
  store i1 %v7_119a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119a0, label %dec_label_pc_11600.backedge.thread455, label %dec_label_pc_119a8

dec_label_pc_119a8:                               ; preds = %dec_label_pc_11974, %dec_label_pc_119a0
  %v0_119bc = phi i32 [ %v1_119a0, %dec_label_pc_119a0 ], [ %v1_11978, %dec_label_pc_11974 ]
  %v2_119a8 = add i32 %v0_119bc, %v0_1167c
  store i32 %v2_119a8, i32* %r3.global-to-local, align 4
  %v1_119ac = add i32 %v2_119a8, 28
  %v2_119ac = inttoptr i32 %v1_119ac to i8*
  %v3_119ac = load i8, i8* %v2_119ac, align 1
  %v4_119ac = zext i8 %v3_119ac to i32
  store i32 %v4_119ac, i32* %r3.global-to-local, align 4
  %v2_119b0 = icmp ugt i8 %v3_119ac, 61
  store i1 %v2_119b0, i1* %cpsr_c.global-to-local, align 1
  %v7_119b0 = icmp eq i8 %v3_119ac, 62
  store i1 %v7_119b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119b0, label %dec_label_pc_119bc, label %bb334

bb334:                                            ; preds = %dec_label_pc_119a8
  %v3_119b4 = icmp ugt i8 %v3_119ac, 57
  store i1 %v3_119b4, i1* %cpsr_c.global-to-local, align 1
  %v8_119b4 = icmp eq i8 %v3_119ac, 58
  store i1 %v8_119b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_119b4, label %dec_label_pc_119bc, label %dec_label_pc_11988

dec_label_pc_119bc:                               ; preds = %dec_label_pc_119a8, %bb334, %dec_label_pc_11998, %dec_label_pc_11990, %dec_label_pc_11988
  %v1_119bc = add i32 %v0_119bc, 1
  store i32 %v1_119bc, i32* @r7, align 4
  %v2_119c0 = icmp eq i32 %v1_119bc, -1
  store i1 %v2_119c0, i1* %cpsr_c.global-to-local, align 1
  %v7_119c0 = icmp eq i32 %v0_119bc, -2
  store i1 %v7_119c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119c0, label %dec_label_pc_11600.backedge.thread455, label %dec_label_pc_119c8

dec_label_pc_119c8:                               ; preds = %dec_label_pc_119bc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_119c8 = icmp eq i32 %v1_119bc, 0
  store i1 %v2_119c8, i1* %cpsr_z.global-to-local, align 1
  %tmp335 = icmp slt i32 %v1_119bc, 1
  br i1 %tmp335, label %dec_label_pc_11788, label %dec_label_pc_119d0

dec_label_pc_119d0:                               ; preds = %dec_label_pc_119c8
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_119d4 = call i32 @function_121f4(i32 24)
  store i32 %v2_115ac, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_119e4 = call i32 @function_12110(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_119e4, i32* %r0.global-to-local, align 4
  %v3_119e8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_119e8, i32* %r2.global-to-local, align 4
  store i32 %v3_119e4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_119f4 = load i32, i32* @r5, align 4
  %v1_119f4 = add i32 %v0_119f4, 4
  %v2_119f4 = inttoptr i32 %v1_119f4 to i32*
  %v3_119f4 = load i32, i32* %v2_119f4, align 4
  store i32 %v3_119f4, i32* %r0.global-to-local, align 4
  %v4_119f8 = inttoptr i32 %v3_119e4 to i32*
  %v5_119f8 = call i32 @function_13e4c(i32 %v3_119f4, i32* %v4_119f8, i32 %v3_119e8, i32 16384)
  store i32 %v5_119f8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11a08 = load i32, i32* @r5, align 4
  %v1_11a08 = add i32 %v0_11a08, 4
  %v2_11a08 = inttoptr i32 %v1_11a08 to i32*
  %v3_11a08 = load i32, i32* %v2_11a08, align 4
  store i32 %v3_11a08, i32* %r0.global-to-local, align 4
  %v5_11a0c = call i32 @function_13e4c(i32 %v3_11a08, i32* bitcast ([3 x i8]* @global_var_15ce8.35 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11a14 = call i32 @function_1213c(i32 24)
  store i32 %v1_11a14, i32* %r0.global-to-local, align 4
  %v0_11a18 = load i32, i32* @r5, align 4
  %v1_11a18 = add i32 %v0_11a18, 24
  %v2_11a18 = inttoptr i32 %v1_11a18 to i32*
  %v3_11a18 = load i32, i32* %v2_11a18, align 4
  store i32 %v3_11a18, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_11a20 = add i32 %v0_11a18, 12
  %v3_11a20 = inttoptr i32 %v2_11a20 to i32*
  store i32 7, i32* %v3_11a20, align 4
  br label %dec_label_pc_11c14

dec_label_pc_11a28:                               ; preds = %dec_label_pc_1167c
  %v1_11a28 = add i32 %v0_1167c, 24
  %v2_11a28 = inttoptr i32 %v1_11a28 to i32*
  %v3_11a28 = load i32, i32* %v2_11a28, align 4
  store i32 %v3_11a28, i32* %ip.global-to-local, align 4
  %v1_11a2c = add i32 %v3_11a28, -1
  store i32 %v1_11a2c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a30 = icmp eq i32 %v1_11a2c, 0
  store i1 %v2_11a30, i1* %cpsr_z.global-to-local, align 1
  %v5_11a34 = icmp sgt i32 %v1_11a2c, 0
  br i1 %v5_11a34, label %dec_label_pc_11a5c, label %dec_label_pc_11600.backedge.thread

dec_label_pc_11a3c:                               ; preds = %bb336
  %v2_11a3c = icmp ugt i8 %v3_11a60, 35
  store i1 %v2_11a3c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a3c = icmp eq i8 %v3_11a60, 36
  store i1 %v7_11a3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a3c, label %dec_label_pc_11a70, label %dec_label_pc_11a44

dec_label_pc_11a44:                               ; preds = %dec_label_pc_11a3c
  %v2_11a44 = icmp ugt i8 %v3_11a60, 34
  store i1 %v2_11a44, i1* %cpsr_c.global-to-local, align 1
  %v7_11a44 = icmp eq i8 %v3_11a60, 35
  store i1 %v7_11a44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a44, label %dec_label_pc_11a70, label %dec_label_pc_11a4c

dec_label_pc_11a4c:                               ; preds = %dec_label_pc_11a44
  %v2_11a4c = icmp ugt i8 %v3_11a60, 36
  store i1 %v2_11a4c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a4c = icmp eq i8 %v3_11a60, 37
  store i1 %v7_11a4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a4c, label %dec_label_pc_11a70, label %dec_label_pc_11a54

dec_label_pc_11a54:                               ; preds = %dec_label_pc_11a4c
  %v1_11a54 = add i32 %v0_11a70, -1
  store i32 %v1_11a54, i32* %r0.global-to-local, align 4
  %v2_11a54 = icmp ne i32 %v0_11a70, 0
  store i1 %v2_11a54, i1* %cpsr_c.global-to-local, align 1
  %v7_11a54 = icmp eq i32 %v0_11a70, 1
  store i1 %v7_11a54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a54, label %dec_label_pc_11600.backedge.thread455, label %dec_label_pc_11a5c

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_11a28, %dec_label_pc_11a54
  %v0_11a70 = phi i32 [ %v1_11a54, %dec_label_pc_11a54 ], [ %v1_11a2c, %dec_label_pc_11a28 ]
  %v2_11a5c = add i32 %v0_11a70, %v0_1167c
  store i32 %v2_11a5c, i32* %r3.global-to-local, align 4
  %v1_11a60 = add i32 %v2_11a5c, 28
  %v2_11a60 = inttoptr i32 %v1_11a60 to i8*
  %v3_11a60 = load i8, i8* %v2_11a60, align 1
  %v4_11a60 = zext i8 %v3_11a60 to i32
  store i32 %v4_11a60, i32* %r3.global-to-local, align 4
  %v2_11a64 = icmp ugt i8 %v3_11a60, 61
  store i1 %v2_11a64, i1* %cpsr_c.global-to-local, align 1
  %v7_11a64 = icmp eq i8 %v3_11a60, 62
  store i1 %v7_11a64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a64, label %dec_label_pc_11a70, label %bb336

bb336:                                            ; preds = %dec_label_pc_11a5c
  %v3_11a68 = icmp ugt i8 %v3_11a60, 57
  store i1 %v3_11a68, i1* %cpsr_c.global-to-local, align 1
  %v8_11a68 = icmp eq i8 %v3_11a60, 58
  store i1 %v8_11a68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11a68, label %dec_label_pc_11a70, label %dec_label_pc_11a3c

dec_label_pc_11a70:                               ; preds = %dec_label_pc_11a5c, %bb336, %dec_label_pc_11a4c, %dec_label_pc_11a44, %dec_label_pc_11a3c
  %v1_11a70 = add i32 %v0_11a70, 1
  store i32 %v1_11a70, i32* @r7, align 4
  %v2_11a74 = icmp eq i32 %v1_11a70, -1
  store i1 %v2_11a74, i1* %cpsr_c.global-to-local, align 1
  %v7_11a74 = icmp eq i32 %v0_11a70, -2
  store i1 %v7_11a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a74, label %dec_label_pc_11600.backedge.thread455, label %dec_label_pc_11a7c

dec_label_pc_11a7c:                               ; preds = %dec_label_pc_11a70
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a7c = icmp eq i32 %v1_11a70, 0
  store i1 %v2_11a7c, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v1_11a70, 1
  br i1 %tmp337, label %dec_label_pc_11788, label %dec_label_pc_11a84

dec_label_pc_11a84:                               ; preds = %dec_label_pc_11a7c
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11a88 = call i32 @function_121f4(i32 25)
  store i32 %v2_11598, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_11a98 = call i32 @function_12110(i32 25, i32* %v2_115a0)
  store i32 %v3_11a98, i32* %r0.global-to-local, align 4
  %v3_11a9c = load i8, i8* %stack_var_-52, align 1
  %v4_11a9c = sext i8 %v3_11a9c to i32
  store i32 %v4_11a9c, i32* %r2.global-to-local, align 4
  store i32 %v3_11a98, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11aa8 = load i32, i32* @r5, align 4
  %v1_11aa8 = add i32 %v0_11aa8, 4
  %v2_11aa8 = inttoptr i32 %v1_11aa8 to i32*
  %v3_11aa8 = load i32, i32* %v2_11aa8, align 4
  store i32 %v3_11aa8, i32* %r0.global-to-local, align 4
  %v4_11aac = inttoptr i32 %v3_11a98 to i32*
  %v5_11aac = call i32 @function_13e4c(i32 %v3_11aa8, i32* %v4_11aac, i32 %v4_11a9c, i32 16384)
  store i32 %v5_11aac, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11abc = load i32, i32* @r5, align 4
  %v1_11abc = add i32 %v0_11abc, 4
  %v2_11abc = inttoptr i32 %v1_11abc to i32*
  %v3_11abc = load i32, i32* %v2_11abc, align 4
  store i32 %v3_11abc, i32* %r0.global-to-local, align 4
  %v5_11ac0 = call i32 @function_13e4c(i32 %v3_11abc, i32* bitcast ([3 x i8]* @global_var_15ce8.35 to i32*), i32 2, i32 16384)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11ac8 = call i32 @function_1213c(i32 25)
  store i32 %v1_11ac8, i32* %r0.global-to-local, align 4
  %v0_11acc = load i32, i32* @r5, align 4
  %v1_11acc = add i32 %v0_11acc, 24
  %v2_11acc = inttoptr i32 %v1_11acc to i32*
  %v3_11acc = load i32, i32* %v2_11acc, align 4
  store i32 %v3_11acc, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_11ad4 = add i32 %v0_11acc, 12
  %v3_11ad4 = inttoptr i32 %v2_11ad4 to i32*
  store i32 9, i32* %v3_11ad4, align 4
  br label %dec_label_pc_11c14

dec_label_pc_11adc:                               ; preds = %dec_label_pc_1167c
  %v1_11adc = add i32 %v0_1167c, 24
  %v2_11adc = inttoptr i32 %v1_11adc to i32*
  %v3_11adc = load i32, i32* %v2_11adc, align 4
  store i32 %v3_11adc, i32* %ip.global-to-local, align 4
  %v1_11ae0 = add i32 %v3_11adc, -1
  store i32 %v1_11ae0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11ae4 = icmp eq i32 %v1_11ae0, 0
  store i1 %v2_11ae4, i1* %cpsr_z.global-to-local, align 1
  %v5_11ae8 = icmp sgt i32 %v1_11ae0, 0
  br i1 %v5_11ae8, label %dec_label_pc_11b10, label %dec_label_pc_11600.backedge.thread

dec_label_pc_11af0:                               ; preds = %bb338
  %v2_11af0 = icmp ugt i8 %v3_11b14, 35
  store i1 %v2_11af0, i1* %cpsr_c.global-to-local, align 1
  %v7_11af0 = icmp eq i8 %v3_11b14, 36
  store i1 %v7_11af0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11af0, label %dec_label_pc_11b24, label %dec_label_pc_11af8

dec_label_pc_11af8:                               ; preds = %dec_label_pc_11af0
  %v2_11af8 = icmp ugt i8 %v3_11b14, 34
  store i1 %v2_11af8, i1* %cpsr_c.global-to-local, align 1
  %v7_11af8 = icmp eq i8 %v3_11b14, 35
  store i1 %v7_11af8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11af8, label %dec_label_pc_11b24, label %dec_label_pc_11b00

dec_label_pc_11b00:                               ; preds = %dec_label_pc_11af8
  %v2_11b00 = icmp ugt i8 %v3_11b14, 36
  store i1 %v2_11b00, i1* %cpsr_c.global-to-local, align 1
  %v7_11b00 = icmp eq i8 %v3_11b14, 37
  store i1 %v7_11b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b00, label %dec_label_pc_11b24, label %dec_label_pc_11b08

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11b00
  %v1_11b08 = add i32 %v0_11b24, -1
  store i32 %v1_11b08, i32* %r0.global-to-local, align 4
  %v2_11b08 = icmp ne i32 %v0_11b24, 0
  store i1 %v2_11b08, i1* %cpsr_c.global-to-local, align 1
  %v7_11b08 = icmp eq i32 %v0_11b24, 1
  store i1 %v7_11b08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b08, label %dec_label_pc_11600.backedge.thread455, label %dec_label_pc_11b10

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11adc, %dec_label_pc_11b08
  %v0_11b24 = phi i32 [ %v1_11b08, %dec_label_pc_11b08 ], [ %v1_11ae0, %dec_label_pc_11adc ]
  %v2_11b10 = add i32 %v0_11b24, %v0_1167c
  store i32 %v2_11b10, i32* %r3.global-to-local, align 4
  %v1_11b14 = add i32 %v2_11b10, 28
  %v2_11b14 = inttoptr i32 %v1_11b14 to i8*
  %v3_11b14 = load i8, i8* %v2_11b14, align 1
  %v4_11b14 = zext i8 %v3_11b14 to i32
  store i32 %v4_11b14, i32* %r3.global-to-local, align 4
  %v2_11b18 = icmp ugt i8 %v3_11b14, 61
  store i1 %v2_11b18, i1* %cpsr_c.global-to-local, align 1
  %v7_11b18 = icmp eq i8 %v3_11b14, 62
  store i1 %v7_11b18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b18, label %dec_label_pc_11b24, label %bb338

bb338:                                            ; preds = %dec_label_pc_11b10
  %v3_11b1c = icmp ugt i8 %v3_11b14, 57
  store i1 %v3_11b1c, i1* %cpsr_c.global-to-local, align 1
  %v8_11b1c = icmp eq i8 %v3_11b14, 58
  store i1 %v8_11b1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11b1c, label %dec_label_pc_11b24, label %dec_label_pc_11af0

dec_label_pc_11b24:                               ; preds = %dec_label_pc_11b10, %bb338, %dec_label_pc_11b00, %dec_label_pc_11af8, %dec_label_pc_11af0
  %v1_11b24 = add i32 %v0_11b24, 1
  store i32 %v1_11b24, i32* @r7, align 4
  %v2_11b28 = icmp eq i32 %v1_11b24, -1
  store i1 %v2_11b28, i1* %cpsr_c.global-to-local, align 1
  %v7_11b28 = icmp eq i32 %v0_11b24, -2
  store i1 %v7_11b28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b28, label %dec_label_pc_11600.backedge.thread455, label %dec_label_pc_11b30

dec_label_pc_11b30:                               ; preds = %dec_label_pc_11b24
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11b30 = icmp eq i32 %v1_11b24, 0
  store i1 %v2_11b30, i1* %cpsr_z.global-to-local, align 1
  %tmp339 = icmp slt i32 %v1_11b24, 1
  br i1 %tmp339, label %dec_label_pc_11788, label %dec_label_pc_11b38

dec_label_pc_11b38:                               ; preds = %dec_label_pc_11b30
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_11b3c = call i32 @function_121f4(i32 22)
  store i32 %v2_115ac, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_11b4c = call i32 @function_12110(i32 22, i32* nonnull %stack_var_-56)
  store i32 %v3_11b4c, i32* %r0.global-to-local, align 4
  %v3_11b50 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11b50, i32* %r2.global-to-local, align 4
  store i32 %v3_11b4c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b5c = load i32, i32* @r5, align 4
  %v1_11b5c = add i32 %v0_11b5c, 4
  %v2_11b5c = inttoptr i32 %v1_11b5c to i32*
  %v3_11b5c = load i32, i32* %v2_11b5c, align 4
  store i32 %v3_11b5c, i32* %r0.global-to-local, align 4
  %v4_11b60 = inttoptr i32 %v3_11b4c to i32*
  %v5_11b60 = call i32 @function_13e4c(i32 %v3_11b5c, i32* %v4_11b60, i32 %v3_11b50, i32 16384)
  store i32 %v5_11b60, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b70 = load i32, i32* @r5, align 4
  %v1_11b70 = add i32 %v0_11b70, 4
  %v2_11b70 = inttoptr i32 %v1_11b70 to i32*
  %v3_11b70 = load i32, i32* %v2_11b70, align 4
  store i32 %v3_11b70, i32* %r0.global-to-local, align 4
  %v5_11b74 = call i32 @function_13e4c(i32 %v3_11b70, i32* bitcast ([3 x i8]* @global_var_15ce8.35 to i32*), i32 2, i32 16384)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_11b7c = call i32 @function_1213c(i32 22)
  store i32 %v1_11b7c, i32* %r0.global-to-local, align 4
  %v0_11b80 = load i32, i32* @r5, align 4
  %v1_11b80 = add i32 %v0_11b80, 24
  %v2_11b80 = inttoptr i32 %v1_11b80 to i32*
  %v3_11b80 = load i32, i32* %v2_11b80, align 4
  store i32 %v3_11b80, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_11b88 = add i32 %v0_11b80, 12
  %v3_11b88 = inttoptr i32 %v2_11b88 to i32*
  store i32 8, i32* %v3_11b88, align 4
  br label %dec_label_pc_11c14

dec_label_pc_11b90:                               ; preds = %dec_label_pc_1167c
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_11b94 = call i32 @function_121f4(i32 28)
  store i32 %v2_11598, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_11ba4 = call i32 @function_12110(i32 28, i32* %v2_115a0)
  %v3_11ba8 = load i8, i8* %stack_var_-52, align 1
  %v4_11ba8 = sext i8 %v3_11ba8 to i32
  store i32 %v3_11ba4, i32* %r2.global-to-local, align 4
  %v1_11bb0 = add nsw i32 %v4_11ba8, -1
  store i32 %v1_11bb0, i32* %r3.global-to-local, align 4
  %v0_11bb4 = load i32, i32* @sl, align 4
  store i32 %v0_11bb4, i32* %r0.global-to-local, align 4
  %v0_11bb8 = load i32, i32* @r5, align 4
  %v1_11bb8 = add i32 %v0_11bb8, 24
  %v2_11bb8 = inttoptr i32 %v1_11bb8 to i32*
  %v3_11bb8 = load i32, i32* %v2_11bb8, align 4
  store i32 %v3_11bb8, i32* %r1.global-to-local, align 4
  %v4_11bbc = call i32 @function_12d20(i32 %v0_11bb4, i32 %v3_11bb8, i32 %v3_11ba4, i32 %v1_11bb0)
  %v2_11bc0 = icmp eq i32 %v4_11bbc, -1
  store i1 %v2_11bc0, i1* %cpsr_c.global-to-local, align 1
  %v7_11bc0 = icmp eq i32 %v4_11bbc, -1
  store i1 %v7_11bc0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_11bbc, i32* @r4, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_11dac = call i32 @function_1213c(i32 28)
  br i1 %v7_11bc0, label %dec_label_pc_11da8, label %dec_label_pc_11bcc

dec_label_pc_11bcc:                               ; preds = %dec_label_pc_11b90
  store i32 %v1_11dac, i32* %r0.global-to-local, align 4
  %v0_11bd4 = load i32, i32* @r5, align 4
  %v1_11bd4 = add i32 %v0_11bd4, 4
  %v2_11bd4 = inttoptr i32 %v1_11bd4 to i32*
  %v3_11bd4 = load i32, i32* %v2_11bd4, align 4
  store i32 %v3_11bd4, i32* %r0.global-to-local, align 4
  %v1_11bd8 = call i32 @function_135f0(i32 %v3_11bd4)
  store i32 %v1_11bd8, i32* %r0.global-to-local, align 4
  %v0_11bdc = load i32, i32* @r5, align 4
  %v1_11bdc = add i32 %v0_11bdc, 284
  %v2_11bdc = inttoptr i32 %v1_11bdc to i8*
  %v3_11bdc = load i8, i8* %v2_11bdc, align 1
  %v4_11bdc = zext i8 %v3_11bdc to i32
  %v1_11be0 = add nuw nsw i32 %v4_11bdc, 1
  %v1_11be4 = urem i32 %v1_11be0, 256
  store i32 %v1_11be4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_11bec = icmp ugt i32 %v1_11be4, 9
  store i1 %v2_11bec, i1* %cpsr_c.global-to-local, align 1
  %v7_11bec = icmp eq i32 %v1_11be4, 10
  store i1 %v7_11bec, i1* %cpsr_z.global-to-local, align 1
  %v2_11bf0 = add i32 %v0_11bdc, 4
  %v3_11bf0 = inttoptr i32 %v2_11bf0 to i32*
  store i32 -1, i32* %v3_11bf0, align 4
  %v0_11bf4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11bf4 = trunc i32 %v0_11bf4 to i8
  %v2_11bf4 = load i32, i32* @r5, align 4
  %v3_11bf4 = add i32 %v2_11bf4, 284
  %v4_11bf4 = inttoptr i32 %v3_11bf4 to i8*
  store i8 %v1_11bf4, i8* %v4_11bf4, align 1
  %v0_11bf8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11bf8, label %dec_label_pc_11bfc, label %dec_label_pc_11f08

dec_label_pc_11bfc:                               ; preds = %dec_label_pc_11bcc
  store i32 0, i32* @lr, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_11c04 = load i32, i32* @r5, align 4
  %v1_11c04 = add i32 %v0_11c04, 24
  %v2_11c04 = inttoptr i32 %v1_11c04 to i32*
  %v3_11c04 = load i32, i32* %v2_11c04, align 4
  store i32 %v3_11c04, i32* %ip.global-to-local, align 4
  %v3_11c08 = add i32 %v0_11c04, 284
  %v4_11c08 = inttoptr i32 %v3_11c08 to i8*
  store i8 0, i8* %v4_11c08, align 1
  %v0_11c0c = load i32, i32* %r0.global-to-local, align 4
  %v1_11c0c = load i32, i32* @r5, align 4
  %v2_11c0c = add i32 %v1_11c0c, 12
  %v3_11c0c = inttoptr i32 %v2_11c0c to i32*
  store i32 %v0_11c0c, i32* %v3_11c0c, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_11c14

dec_label_pc_11c14:                               ; preds = %.thread223, %dec_label_pc_11c94, %dec_label_pc_11f08, %dec_label_pc_11e44, %dec_label_pc_11b38, %dec_label_pc_11a84, %dec_label_pc_119d0, %dec_label_pc_1191c, %dec_label_pc_11884, %dec_label_pc_117f4, %dec_label_pc_11790, %dec_label_pc_11bfc
  %v0_11c14 = load i32, i32* %ip.global-to-local, align 4
  %v1_11c14 = load i32, i32* @r7, align 4
  %v2_11c14 = sub i32 %v0_11c14, %v1_11c14
  %v3_11c14 = icmp uge i32 %v0_11c14, %v1_11c14
  store i1 %v3_11c14, i1* %cpsr_c.global-to-local, align 1
  %v4_11c14 = xor i32 %v1_11c14, %v0_11c14
  %v5_11c14 = xor i32 %v2_11c14, %v0_11c14
  %v6_11c14 = and i32 %v5_11c14, %v4_11c14
  %v7_11c14 = icmp slt i32 %v6_11c14, 0
  %v8_11c14 = icmp slt i32 %v2_11c14, 0
  %v9_11c14 = icmp eq i32 %v0_11c14, %v1_11c14
  store i1 %v9_11c14, i1* %cpsr_z.global-to-local, align 1
  %v2_11c18 = xor i1 %v8_11c14, %v7_11c14
  %v0_11c14.v1_11c14 = select i1 %v2_11c18, i32 %v0_11c14, i32 %v1_11c14
  store i32 %v0_11c14.v1_11c14, i32* %r1.global-to-local, align 4
  %v2_11c20 = sub i32 %v0_11c14, %v0_11c14.v1_11c14
  store i32 %v2_11c20, i32* @r2, align 4
  %v1_11c24 = load i32, i32* @r5, align 4
  %v2_11c24 = add i32 %v1_11c24, 24
  %v3_11c24 = inttoptr i32 %v2_11c24 to i32*
  store i32 %v2_11c20, i32* %v3_11c24, align 4
  %v0_11c28 = load i32, i32* @sl, align 4
  %v1_11c28 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c28 = add i32 %v1_11c28, %v0_11c28
  store i32 %v2_11c28, i32* @r1, align 4
  store i32 %v0_11c28, i32* @r0, align 4
  %v3_11c30 = call i32 @function_13bf0(i32 %v0_11c28, i32 %v2_11c28, i32 %v2_11c20)
  store i32 %v3_11c30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1167c

dec_label_pc_11c38:                               ; preds = %dec_label_pc_1167c
  %v1_11c38 = add i32 %v0_1167c, 24
  %v2_11c38 = inttoptr i32 %v1_11c38 to i32*
  %v3_11c38 = load i32, i32* %v2_11c38, align 4
  store i32 %v3_11c38, i32* %ip.global-to-local, align 4
  %v1_11c3c = add i32 %v3_11c38, -1
  store i32 %v1_11c3c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c40 = icmp eq i32 %v1_11c3c, 0
  store i1 %v2_11c40, i1* %cpsr_z.global-to-local, align 1
  %v5_11c44 = icmp sgt i32 %v1_11c3c, 0
  br i1 %v5_11c44, label %dec_label_pc_11c6c, label %dec_label_pc_11600.backedge.thread

dec_label_pc_11c4c:                               ; preds = %bb342
  %v2_11c4c = icmp ugt i8 %v3_11c70, 35
  store i1 %v2_11c4c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c4c = icmp eq i8 %v3_11c70, 36
  store i1 %v7_11c4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c4c, label %dec_label_pc_11c80, label %dec_label_pc_11c54

dec_label_pc_11c54:                               ; preds = %dec_label_pc_11c4c
  %v2_11c54 = icmp ugt i8 %v3_11c70, 34
  store i1 %v2_11c54, i1* %cpsr_c.global-to-local, align 1
  %v7_11c54 = icmp eq i8 %v3_11c70, 35
  store i1 %v7_11c54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c54, label %dec_label_pc_11c80, label %dec_label_pc_11c5c

dec_label_pc_11c5c:                               ; preds = %dec_label_pc_11c54
  %v2_11c5c = icmp ugt i8 %v3_11c70, 36
  store i1 %v2_11c5c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c5c = icmp eq i8 %v3_11c70, 37
  store i1 %v7_11c5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c5c, label %dec_label_pc_11c80, label %dec_label_pc_11c64

dec_label_pc_11c64:                               ; preds = %dec_label_pc_11c5c
  %v1_11c64 = add i32 %v0_11c80, -1
  store i32 %v1_11c64, i32* %r0.global-to-local, align 4
  %v2_11c64 = icmp ne i32 %v0_11c80, 0
  store i1 %v2_11c64, i1* %cpsr_c.global-to-local, align 1
  %v7_11c64 = icmp eq i32 %v0_11c80, 1
  store i1 %v7_11c64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c64, label %dec_label_pc_11600.backedge.thread455, label %dec_label_pc_11c6c

dec_label_pc_11c6c:                               ; preds = %dec_label_pc_11c38, %dec_label_pc_11c64
  %v0_11c80 = phi i32 [ %v1_11c64, %dec_label_pc_11c64 ], [ %v1_11c3c, %dec_label_pc_11c38 ]
  %v2_11c6c = add i32 %v0_11c80, %v0_1167c
  store i32 %v2_11c6c, i32* %r3.global-to-local, align 4
  %v1_11c70 = add i32 %v2_11c6c, 28
  %v2_11c70 = inttoptr i32 %v1_11c70 to i8*
  %v3_11c70 = load i8, i8* %v2_11c70, align 1
  %v4_11c70 = zext i8 %v3_11c70 to i32
  store i32 %v4_11c70, i32* %r3.global-to-local, align 4
  %v2_11c74 = icmp ugt i8 %v3_11c70, 61
  store i1 %v2_11c74, i1* %cpsr_c.global-to-local, align 1
  %v7_11c74 = icmp eq i8 %v3_11c70, 62
  store i1 %v7_11c74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c74, label %dec_label_pc_11c80, label %bb342

bb342:                                            ; preds = %dec_label_pc_11c6c
  %v3_11c78 = icmp ugt i8 %v3_11c70, 57
  store i1 %v3_11c78, i1* %cpsr_c.global-to-local, align 1
  %v8_11c78 = icmp eq i8 %v3_11c70, 58
  store i1 %v8_11c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11c78, label %dec_label_pc_11c80, label %dec_label_pc_11c4c

dec_label_pc_11c80:                               ; preds = %dec_label_pc_11c6c, %bb342, %dec_label_pc_11c5c, %dec_label_pc_11c54, %dec_label_pc_11c4c
  %v1_11c80 = add i32 %v0_11c80, 1
  store i32 %v1_11c80, i32* @r7, align 4
  %v2_11c84 = icmp eq i32 %v1_11c80, -1
  store i1 %v2_11c84, i1* %cpsr_c.global-to-local, align 1
  %v7_11c84 = icmp eq i32 %v0_11c80, -2
  store i1 %v7_11c84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c84, label %dec_label_pc_11600.backedge.thread455, label %dec_label_pc_11c8c

dec_label_pc_11c8c:                               ; preds = %dec_label_pc_11c80
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c8c = icmp eq i32 %v1_11c80, 0
  store i1 %v2_11c8c, i1* %cpsr_z.global-to-local, align 1
  %tmp343 = icmp slt i32 %v1_11c80, 1
  br i1 %tmp343, label %dec_label_pc_11788, label %dec_label_pc_11c94

dec_label_pc_11c94:                               ; preds = %dec_label_pc_11c8c
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11c98 = call i32 @function_121f4(i32 26)
  store i32 %v2_11598, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_11ca8 = call i32 @function_12110(i32 26, i32* %v2_115a0)
  store i32 %v3_11ca8, i32* %r0.global-to-local, align 4
  %v3_11cac = load i8, i8* %stack_var_-52, align 1
  %v4_11cac = sext i8 %v3_11cac to i32
  store i32 %v4_11cac, i32* %r2.global-to-local, align 4
  store i32 %v3_11ca8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11cb8 = load i32, i32* @r5, align 4
  %v1_11cb8 = add i32 %v0_11cb8, 4
  %v2_11cb8 = inttoptr i32 %v1_11cb8 to i32*
  %v3_11cb8 = load i32, i32* %v2_11cb8, align 4
  store i32 %v3_11cb8, i32* %r0.global-to-local, align 4
  %v4_11cbc = inttoptr i32 %v3_11ca8 to i32*
  %v5_11cbc = call i32 @function_13e4c(i32 %v3_11cb8, i32* %v4_11cbc, i32 %v4_11cac, i32 16384)
  store i32 %v5_11cbc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11ccc = load i32, i32* @r5, align 4
  %v1_11ccc = add i32 %v0_11ccc, 4
  %v2_11ccc = inttoptr i32 %v1_11ccc to i32*
  %v3_11ccc = load i32, i32* %v2_11ccc, align 4
  store i32 %v3_11ccc, i32* %r0.global-to-local, align 4
  %v5_11cd0 = call i32 @function_13e4c(i32 %v3_11ccc, i32* bitcast ([3 x i8]* @global_var_15ce8.35 to i32*), i32 2, i32 16384)
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11cd8 = call i32 @function_1213c(i32 26)
  store i32 %v1_11cd8, i32* %r0.global-to-local, align 4
  %v0_11cdc = load i32, i32* @r5, align 4
  %v1_11cdc = add i32 %v0_11cdc, 24
  %v2_11cdc = inttoptr i32 %v1_11cdc to i32*
  %v3_11cdc = load i32, i32* %v2_11cdc, align 4
  store i32 %v3_11cdc, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_11ce4 = add i32 %v0_11cdc, 12
  %v3_11ce4 = inttoptr i32 %v2_11ce4 to i32*
  store i32 10, i32* %v3_11ce4, align 4
  br label %dec_label_pc_11c14

dec_label_pc_11cec:                               ; preds = %dec_label_pc_11700
  store i32 ptrtoint (i32* @global_var_16313.543 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_11cf8, i32* @r0, align 4
  %v3_11cfc = call i32 @function_13be0(i32 %v2_11cf8, i32 ptrtoint (i32* @global_var_16313.543 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_11d08, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1630a.545 to i32), i32* @r1, align 4
  %v3_11d10 = call i32 @function_13be0(i32 %v2_11d08, i32 ptrtoint (i32* @global_var_1630a.545 to i32), i32 9)
  store i32 %v3_11d10, i32* %r0.global-to-local, align 4
  %v0_11d14 = load i32, i32* @r5, align 4
  %v1_11d14 = add i32 %v0_11d14, 24
  %v2_11d14 = inttoptr i32 %v1_11d14 to i32*
  %v3_11d14 = load i32, i32* %v2_11d14, align 4
  store i32 %v3_11d14, i32* %ip.global-to-local, align 4
  %v0_11d18 = load i32, i32* @r6, align 4
  %v1_11d18 = add i32 %v0_11d18, 2
  store i32 %v1_11d18, i32* %r2.global-to-local, align 4
  %v0_11d1c = load i32, i32* @sl, align 4
  %v2_11d1c = add i32 %v0_11d1c, %v3_11d14
  store i32 %v2_11d1c, i32* %r3.global-to-local, align 4
  %v3_11d20 = icmp uge i32 %v2_11d1c, %v1_11d18
  store i1 %v3_11d20, i1* %cpsr_c.global-to-local, align 1
  %v9_11d20 = icmp eq i32 %v2_11d1c, %v1_11d18
  store i1 %v9_11d20, i1* %cpsr_z.global-to-local, align 1
  %v2_11d24 = xor i1 %v3_11d20, true
  %v3_11d24 = or i1 %v9_11d20, %v2_11d24
  br i1 %v3_11d24, label %dec_label_pc_11cec.dec_label_pc_11778.loopexit_crit_edge, label %dec_label_pc_11d28

dec_label_pc_11cec.dec_label_pc_11778.loopexit_crit_edge: ; preds = %dec_label_pc_11cec
  %v0_11778.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_11778

dec_label_pc_11d28:                               ; preds = %dec_label_pc_11cec
  %v0_11d28 = load i32, i32* @r4, align 4
  %v1_11d28 = add i32 %v0_11d28, 1
  %v2_11d28 = inttoptr i32 %v1_11d28 to i8*
  %v3_11d28 = load i8, i8* %v2_11d28, align 1
  %v4_11d28 = zext i8 %v3_11d28 to i32
  store i32 %v4_11d28, i32* %r3.global-to-local, align 4
  %v2_11d2c = icmp ugt i8 %v3_11d28, 30
  store i1 %v2_11d2c, i1* %cpsr_c.global-to-local, align 1
  %v7_11d2c = icmp eq i8 %v3_11d28, 31
  store i1 %v7_11d2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d2c, label %dec_label_pc_11eb8, label %dec_label_pc_11d34

dec_label_pc_11d34:                               ; preds = %dec_label_pc_11d28
  %v1_11d34 = add i32 %v0_11d28, -1
  %v2_11d34 = inttoptr i32 %v1_11d34 to i8*
  %v3_11d34 = load i8, i8* %v2_11d34, align 1
  %v4_11d34 = zext i8 %v3_11d34 to i32
  store i32 %v4_11d34, i32* %r3.global-to-local, align 4
  %v2_11d38 = icmp ugt i8 %v3_11d34, -4
  store i1 %v2_11d38, i1* %cpsr_c.global-to-local, align 1
  %v7_11d38 = icmp eq i8 %v3_11d34, -3
  store i1 %v7_11d38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d38, label %.thread75, label %dec_label_pc_11d48

.thread75:                                        ; preds = %dec_label_pc_11d34
  store i32 -4, i32* %r2.global-to-local, align 4
  store i8 -4, i8* %v2_11d34, align 1
  %v0_11d44.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11d44.pr.pr, label %dec_label_pc_11714, label %.thread75.dec_label_pc_11d48_crit_edge

.thread75.dec_label_pc_11d48_crit_edge:           ; preds = %.thread75
  %v0_11d48.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11d48

dec_label_pc_11d48:                               ; preds = %.thread75.dec_label_pc_11d48_crit_edge, %dec_label_pc_11d34
  %v0_11d48 = phi i32 [ %v0_11d48.pre, %.thread75.dec_label_pc_11d48_crit_edge ], [ %v4_11d34, %dec_label_pc_11d34 ]
  %v2_11d48 = icmp ugt i32 %v0_11d48, 250
  store i1 %v2_11d48, i1* %cpsr_c.global-to-local, align 1
  %v7_11d48 = icmp eq i32 %v0_11d48, 251
  store i1 %v7_11d48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d48, label %bb344, label %dec_label_pc_11714

bb344:                                            ; preds = %dec_label_pc_11d48
  %v1_11d4c = load i32, i32* %r8.global-to-local, align 4
  %v2_11d4c = trunc i32 %v1_11d4c to i8
  %v3_11d4c = load i32, i32* @r4, align 4
  %v4_11d4c = add i32 %v3_11d4c, -1
  %v5_11d4c = inttoptr i32 %v4_11d4c to i8*
  store i8 %v2_11d4c, i8* %v5_11d4c, align 1
  br label %dec_label_pc_11714

dec_label_pc_11d54:                               ; preds = %dec_label_pc_11854, %dec_label_pc_11830, %dec_label_pc_11870
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_11d58 = call i32 @function_121f4(i32 29)
  store i32 %v2_11598, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_11d68 = call i32 @function_12110(i32 29, i32* %v2_115a0)
  %v3_11d6c = load i8, i8* %stack_var_-52, align 1
  %v4_11d6c = sext i8 %v3_11d6c to i32
  store i32 %v3_11d68, i32* %r2.global-to-local, align 4
  %v1_11d74 = add nsw i32 %v4_11d6c, -1
  store i32 %v1_11d74, i32* %r3.global-to-local, align 4
  %v0_11d78 = load i32, i32* @sl, align 4
  store i32 %v0_11d78, i32* %r0.global-to-local, align 4
  %v0_11d7c = load i32, i32* @r5, align 4
  %v1_11d7c = add i32 %v0_11d7c, 24
  %v2_11d7c = inttoptr i32 %v1_11d7c to i32*
  %v3_11d7c = load i32, i32* %v2_11d7c, align 4
  store i32 %v3_11d7c, i32* %r1.global-to-local, align 4
  %v4_11d80 = call i32 @function_12d20(i32 %v0_11d78, i32 %v3_11d7c, i32 %v3_11d68, i32 %v1_11d74)
  store i32 %v4_11d80, i32* %r0.global-to-local, align 4
  %v1_11d84 = add i32 %v4_11d80, 1
  store i32 %v1_11d84, i32* @r7, align 4
  %v2_11d84 = icmp eq i32 %v4_11d80, -1
  store i1 %v2_11d84, i1* %cpsr_c.global-to-local, align 1
  %v7_11d84 = icmp eq i32 %v1_11d84, 0
  store i1 %v7_11d84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d84, label %thread-pre-split78, label %bb345

bb345:                                            ; preds = %dec_label_pc_11d54
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split78

thread-pre-split78:                               ; preds = %dec_label_pc_11d54, %bb345
  %v0_11d8c = phi i1 [ false, %bb345 ], [ true, %dec_label_pc_11d54 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_11d8c, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_11f20 = call i32 @function_1213c(i32 29)
  store i32 %v1_11f20, i32* %r0.global-to-local, align 4
  br i1 %v0_11d8c, label %dec_label_pc_11f1c, label %dec_label_pc_11d94

dec_label_pc_11d94:                               ; preds = %thread-pre-split78
  %v0_11d9c = load i32, i32* @r7, align 4
  %v3_11d9c = icmp eq i32 %v0_11d9c, -1
  store i1 %v3_11d9c, i1* %cpsr_c.global-to-local, align 1
  %v8_11d9c = icmp eq i32 %v0_11d9c, -1
  store i1 %v8_11d9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11d9c, label %dec_label_pc_115fc.loopexit, label %dec_label_pc_1187c

dec_label_pc_11da8:                               ; preds = %dec_label_pc_11b90
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_11db4 = call i32 @function_121f4(i32 27)
  store i32 %v2_11598, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_11dc4 = call i32 @function_12110(i32 27, i32* nonnull %v2_115a0)
  store i32 %v3_11dc4, i32* %r0.global-to-local, align 4
  %v3_11dc8 = load i8, i8* %stack_var_-52, align 1
  %v4_11dc8 = sext i8 %v3_11dc8 to i32
  store i32 %v3_11dc4, i32* %r2.global-to-local, align 4
  %v1_11dd0 = add nsw i32 %v4_11dc8, -1
  store i32 %v1_11dd0, i32* %r3.global-to-local, align 4
  %v0_11dd4 = load i32, i32* @r5, align 4
  %v1_11dd4 = add i32 %v0_11dd4, 24
  %v2_11dd4 = inttoptr i32 %v1_11dd4 to i32*
  %v3_11dd4 = load i32, i32* %v2_11dd4, align 4
  store i32 %v3_11dd4, i32* %r1.global-to-local, align 4
  %v0_11dd8 = load i32, i32* @sl, align 4
  store i32 %v0_11dd8, i32* %r0.global-to-local, align 4
  %v4_11ddc = call i32 @function_12d20(i32 %v0_11dd8, i32 %v3_11dd4, i32 %v3_11dc4, i32 %v1_11dd0)
  %sext6 = mul i32 %v4_11ddc, 16777216
  %v1_11de0 = sdiv i32 %sext6, 16777216
  store i32 %v1_11de0, i32* @r7, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_11de8 = call i32 @function_1213c(i32 27)
  store i32 %v1_11de8, i32* %r0.global-to-local, align 4
  %v0_11dec = load i32, i32* @r7, align 4
  %v2_11dec = icmp eq i32 %v0_11dec, -1
  store i1 %v2_11dec, i1* %cpsr_c.global-to-local, align 1
  %v7_11dec = icmp eq i32 %v0_11dec, -1
  store i1 %v7_11dec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11dec, label %dec_label_pc_115fc.loopexit, label %dec_label_pc_11df4

dec_label_pc_11df4:                               ; preds = %dec_label_pc_11da8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11df4 = icmp eq i32 %v0_11dec, 0
  store i1 %v2_11df4, i1* %cpsr_z.global-to-local, align 1
  %tmp346 = icmp slt i32 %v0_11dec, 1
  br i1 %tmp346, label %dec_label_pc_11788, label %dec_label_pc_11dfc

dec_label_pc_11dfc:                               ; preds = %dec_label_pc_11df4
  %v0_11dfc = load i32, i32* @r5, align 4
  %v1_11dfc = add i32 %v0_11dfc, 21
  %v2_11dfc = inttoptr i32 %v1_11dfc to i8*
  %v3_11dfc = load i8, i8* %v2_11dfc, align 1
  %v4_11dfc = zext i8 %v3_11dfc to i32
  store i32 %v4_11dfc, i32* %r3.global-to-local, align 4
  %v1_11e00 = add i32 %v0_11dfc, 20
  %v2_11e00 = inttoptr i32 %v1_11e00 to i8*
  %v3_11e00 = load i8, i8* %v2_11e00, align 1
  %v4_11e00 = zext i8 %v3_11e00 to i32
  store i32 %v4_11e00, i32* %r2.global-to-local, align 4
  %v1_11e04 = add i32 %v0_11dfc, 16
  %v2_11e04 = inttoptr i32 %v1_11e04 to i32*
  %v3_11e04 = load i32, i32* %v2_11e04, align 4
  store i32 %v3_11e04, i32* %r1.global-to-local, align 4
  %v4_11e08 = mul nuw nsw i32 %v4_11dfc, 256
  %v5_11e08 = or i32 %v4_11e00, %v4_11e08
  store i32 %v5_11e08, i32* %r2.global-to-local, align 4
  %v1_11e0c = and i32 %v4_11e00, 128
  %v2_11e0c = icmp ne i32 %v1_11e0c, 0
  store i1 %v2_11e0c, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_11dfc, i32* %r3.global-to-local, align 4
  store i32 %v3_11e04, i32* %stack_var_-56, align 4
  store i32 %v5_11e08, i32* %stack_var_-38, align 4
  %v1_11e1c = inttoptr i32 %v0_11dfc to i32*
  %v2_11e1c = load i32, i32* %v1_11e1c, align 4
  store i32 %v2_11e1c, i32* %r8.global-to-local, align 4
  %v0_11e20 = call i32 @function_1361c()
  store i32 %v0_11e20, i32* %r0.global-to-local, align 4
  %v7_11e24 = icmp eq i32 %v0_11e20, -1
  %.357 = zext i1 %v7_11e24 to i32
  store i32 %.357, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11e30 = icmp eq i32 %v0_11e20, 0
  store i1 %v2_11e30, i1* %cpsr_z.global-to-local, align 1
  %tmp349 = icmp slt i32 %v0_11e20, 1
  br i1 %tmp349, label %bb350, label %.thread81

.thread81:                                        ; preds = %dec_label_pc_11dfc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11e44

bb350:                                            ; preds = %dec_label_pc_11dfc
  store i32 %.357, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11e3c = icmp eq i1 %v7_11e24, false
  store i1 %v2_11e3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11e3c, label %dec_label_pc_11f6c, label %dec_label_pc_11e44

dec_label_pc_11e44:                               ; preds = %.thread81, %bb350
  %v0_11e44 = load i32, i32* @r5, align 4
  %v1_11e44 = add i32 %v0_11e44, 4
  %v2_11e44 = inttoptr i32 %v1_11e44 to i32*
  %v3_11e44 = load i32, i32* %v2_11e44, align 4
  store i32 %v3_11e44, i32* %r0.global-to-local, align 4
  %v1_11e48 = call i32 @function_135f0(i32 %v3_11e44)
  store i32 %v1_11e48, i32* %r0.global-to-local, align 4
  %v0_11e4c = load i32, i32* @r5, align 4
  %v1_11e4c = add i32 %v0_11e4c, 24
  %v2_11e4c = inttoptr i32 %v1_11e4c to i32*
  %v3_11e4c = load i32, i32* %v2_11e4c, align 4
  store i32 %v3_11e4c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_11e54 = load i32, i32* @r4, align 4
  %v2_11e54 = add i32 %v0_11e4c, 4
  %v3_11e54 = inttoptr i32 %v2_11e54 to i32*
  store i32 %v0_11e54, i32* %v3_11e54, align 4
  %v0_11e58 = load i32, i32* %r2.global-to-local, align 4
  %v1_11e58 = load i32, i32* @r5, align 4
  %v2_11e58 = add i32 %v1_11e58, 12
  %v3_11e58 = inttoptr i32 %v2_11e58 to i32*
  store i32 %v0_11e58, i32* %v3_11e58, align 4
  br label %dec_label_pc_11c14

dec_label_pc_11e60:                               ; preds = %dec_label_pc_11618
  br i1 %v2_1163c, label %dec_label_pc_12058, label %dec_label_pc_11e64

dec_label_pc_11e64:                               ; preds = %dec_label_pc_11e60
  %v3_11e64 = icmp eq i32 %v5_11638, -1
  store i1 %v3_11e64, i1* %cpsr_c.global-to-local, align 1
  %v8_11e64 = icmp eq i32 %v5_11638, -1
  store i1 %v8_11e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11e64, label %dec_label_pc_11e6c, label %dec_label_pc_11664

dec_label_pc_11e6c:                               ; preds = %dec_label_pc_11e64
  %v0_11e6c = load i32, i32* @sb, align 4
  %v1_11e6c = inttoptr i32 %v0_11e6c to i32*
  %v2_11e6c = load i32, i32* %v1_11e6c, align 4
  store i32 %v2_11e6c, i32* %r3.global-to-local, align 4
  %v2_11e70 = icmp ugt i32 %v2_11e6c, 10
  store i1 %v2_11e70, i1* %cpsr_c.global-to-local, align 1
  %v7_11e70 = icmp eq i32 %v2_11e6c, 11
  store i1 %v7_11e70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e70, label %dec_label_pc_1144c, label %dec_label_pc_11e78

dec_label_pc_11e78:                               ; preds = %dec_label_pc_11e6c, %dec_label_pc_12058
  %v0_11e78 = load i32, i32* @r5, align 4
  %v1_11e78 = add i32 %v0_11e78, 4
  %v2_11e78 = inttoptr i32 %v1_11e78 to i32*
  %v3_11e78 = load i32, i32* %v2_11e78, align 4
  store i32 %v3_11e78, i32* %r0.global-to-local, align 4
  %v1_11e7c = call i32 @function_135f0(i32 %v3_11e78)
  store i32 %v1_11e7c, i32* %r0.global-to-local, align 4
  %v0_11e80 = load i32, i32* @r5, align 4
  %v1_11e80 = add i32 %v0_11e80, 284
  %v2_11e80 = inttoptr i32 %v1_11e80 to i8*
  %v3_11e80 = load i8, i8* %v2_11e80, align 1
  %v4_11e80 = zext i8 %v3_11e80 to i32
  %v1_11e84 = add nuw nsw i32 %v4_11e80, 1
  %v1_11e88 = urem i32 %v1_11e84, 256
  store i32 %v1_11e88, i32* %r3.global-to-local, align 4
  %v2_11e8c = icmp ugt i32 %v1_11e88, 8
  store i1 %v2_11e8c, i1* %cpsr_c.global-to-local, align 1
  %v7_11e8c = icmp eq i32 %v1_11e88, 9
  store i1 %v7_11e8c, i1* %cpsr_z.global-to-local, align 1
  %v2_11e90 = xor i1 %v7_11e8c, true
  %v3_11e90 = and i1 %v2_11e8c, %v2_11e90
  br i1 %v3_11e90, label %bb351, label %bb352

bb351:                                            ; preds = %dec_label_pc_11e78
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb352

bb352:                                            ; preds = %dec_label_pc_11e78, %bb351
  store i32 -1, i32* @r4, align 4
  %v1_11e98 = trunc i32 %v1_11e84 to i8
  store i8 %v1_11e98, i8* %v2_11e80, align 1
  %v0_11e9c = load i32, i32* @r4, align 4
  %v1_11e9c = load i32, i32* @r5, align 4
  %v2_11e9c = add i32 %v1_11e9c, 4
  %v3_11e9c = inttoptr i32 %v2_11e9c to i32*
  store i32 %v0_11e9c, i32* %v3_11e9c, align 4
  %v0_11ea0 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11ea0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_11ea0 = xor i1 %v1_11ea0, true
  %v3_11ea0 = and i1 %v0_11ea0, %v2_11ea0
  br i1 %v3_11ea0, label %bb353, label %.thread228

bb353:                                            ; preds = %bb352
  %v4_11ea0 = load i32, i32* %r0.global-to-local, align 4
  %v5_11ea0 = load i32, i32* @r5, align 4
  %v6_11ea0 = add i32 %v5_11ea0, 12
  %v7_11ea0 = inttoptr i32 %v6_11ea0 to i32*
  store i32 %v4_11ea0, i32* %v7_11ea0, align 4
  %v4_11ea4 = load i32, i32* %r0.global-to-local, align 4
  %v5_11ea4 = trunc i32 %v4_11ea4 to i8
  %v6_11ea4 = load i32, i32* @r5, align 4
  %v7_11ea4 = add i32 %v6_11ea4, 284
  %v8_11ea4 = inttoptr i32 %v7_11ea4 to i8*
  store i8 %v5_11ea4, i8* %v8_11ea4, align 1
  %v0_11ea8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11ea8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread228

.thread228:                                       ; preds = %bb352, %bb353
  %v1_11ea8 = phi i1 [ %v1_11ea8.pre, %bb353 ], [ %v1_11ea0, %bb352 ]
  %v0_11ea8 = phi i1 [ %v0_11ea8.pre, %bb353 ], [ %v0_11ea0, %bb352 ]
  %v2_11ea8 = xor i1 %v1_11ea8, true
  %v3_11ea8 = and i1 %v0_11ea8, %v2_11ea8
  br i1 %v3_11ea8, label %dec_label_pc_1144c, label %dec_label_pc_11eac

dec_label_pc_11eac:                               ; preds = %.thread228
  %v0_11eac = load i32, i32* @r5, align 4
  store i32 %v0_11eac, i32* @r0, align 4
  %v0_11eb0 = call i32 @function_fa7c()
  store i32 %v0_11eb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1144c

dec_label_pc_11eb8:                               ; preds = %dec_label_pc_11d28
  store i32 %v2_11cf8, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_11ec8 = add i32 %v0_11d14, 4
  %v2_11ec8 = inttoptr i32 %v1_11ec8 to i32*
  %v3_11ec8 = load i32, i32* %v2_11ec8, align 4
  store i32 %v3_11ec8, i32* %r0.global-to-local, align 4
  %v5_11ecc = call i32 @function_13e4c(i32 %v3_11ec8, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_11ecc, i32* %r0.global-to-local, align 4
  store i32 %v2_113e0, i32* %r1.global-to-local, align 4
  %v0_11ed4 = load i32, i32* @r5, align 4
  %v1_11ed4 = add i32 %v0_11ed4, 4
  %v2_11ed4 = inttoptr i32 %v1_11ed4 to i32*
  %v3_11ed4 = load i32, i32* %v2_11ed4, align 4
  store i32 %v3_11ed4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11758

dec_label_pc_11ee4:                               ; preds = %dec_label_pc_11608
  store i32 %.pre, i32* @r0, align 4
  %v1_11eec = add i32 %v0_11ee4, 92
  store i32 %v1_11eec, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_11ef4 = call i32 @function_13bf0(i32 %.pre, i32 %v1_11eec, i32 192)
  store i32 %v3_11ef4, i32* %r0.global-to-local, align 4
  %v0_11ef8 = load i32, i32* @r5, align 4
  %v1_11ef8 = add i32 %v0_11ef8, 24
  %v2_11ef8 = inttoptr i32 %v1_11ef8 to i32*
  %v3_11ef8 = load i32, i32* %v2_11ef8, align 4
  store i32 %v3_11ef8, i32* %r3.global-to-local, align 4
  %v1_11efc = add i32 %v3_11ef8, -64
  store i32 %v1_11efc, i32* %ip.global-to-local, align 4
  store i32 %v1_11efc, i32* %v2_11ef8, align 4
  br label %dec_label_pc_11618

dec_label_pc_11f08:                               ; preds = %dec_label_pc_11bcc
  %v0_11f08 = load i32, i32* @r5, align 4
  store i32 %v0_11f08, i32* @r0, align 4
  %v0_11f0c = call i32 @function_fa7c()
  store i32 %v0_11f0c, i32* %r0.global-to-local, align 4
  %v0_11f10 = load i32, i32* @r5, align 4
  %v1_11f10 = add i32 %v0_11f10, 24
  %v2_11f10 = inttoptr i32 %v1_11f10 to i32*
  %v3_11f10 = load i32, i32* %v2_11f10, align 4
  store i32 %v3_11f10, i32* %ip.global-to-local, align 4
  %v0_11f14 = load i32, i32* @r4, align 4
  store i32 %v0_11f14, i32* @r7, align 4
  br label %dec_label_pc_11c14

dec_label_pc_11f1c:                               ; preds = %thread-pre-split78
  %v0_11f24 = load i32, i32* @r5, align 4
  %v1_11f24 = add i32 %v0_11f24, 12
  %v2_11f24 = inttoptr i32 %v1_11f24 to i32*
  %v3_11f24 = load i32, i32* %v2_11f24, align 4
  br label %dec_label_pc_11600.backedge

dec_label_pc_11f2c:                               ; preds = %dec_label_pc_11584
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_11f2c = load i32, i32* %stack_var_-56, align 4
  %v0_11f30 = load i32, i32* @r6, align 4
  store i32 %v0_11f30, i32* %r2.global-to-local, align 4
  %v1_11f34 = add i32 %v3_11f2c, -1
  store i32 %v1_11f34, i32* %r3.global-to-local, align 4
  %v0_11f38 = load i32, i32* @sl, align 4
  store i32 %v0_11f38, i32* %r0.global-to-local, align 4
  %v0_11f3c = load i32, i32* @r5, align 4
  %v1_11f3c = add i32 %v0_11f3c, 24
  %v2_11f3c = inttoptr i32 %v1_11f3c to i32*
  %v3_11f3c = load i32, i32* %v2_11f3c, align 4
  store i32 %v3_11f3c, i32* %r1.global-to-local, align 4
  %v4_11f40 = call i32 @function_12d20(i32 %v0_11f38, i32 %v3_11f3c, i32 %v0_11f30, i32 %v1_11f34)
  store i32 %v4_11f40, i32* %r0.global-to-local, align 4
  %v2_11f44 = icmp eq i32 %v4_11f40, -1
  store i1 %v2_11f44, i1* %cpsr_c.global-to-local, align 1
  %v7_11f44 = icmp eq i32 %v4_11f40, -1
  store i1 %v7_11f44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f44, label %dec_label_pc_11f54, label %dec_label_pc_115e4

dec_label_pc_11f54:                               ; preds = %dec_label_pc_11f2c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_11f58 = call i32 @function_1213c(i32 30)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_11f60 = call i32 @function_1213c(i32 31)
  store i32 %v1_11f60, i32* %r0.global-to-local, align 4
  %v0_11f64 = load i32, i32* @r5, align 4
  %v1_11f64 = add i32 %v0_11f64, 12
  %v2_11f64 = inttoptr i32 %v1_11f64 to i32*
  %v3_11f64 = load i32, i32* %v2_11f64, align 4
  br label %dec_label_pc_11600.backedge

dec_label_pc_11600.backedge.thread:               ; preds = %dec_label_pc_118c0, %dec_label_pc_11974, %dec_label_pc_11a28, %dec_label_pc_11adc, %dec_label_pc_11c38
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11608

dec_label_pc_11600.backedge.thread455:            ; preds = %dec_label_pc_118ec, %dec_label_pc_119a0, %dec_label_pc_11b08, %dec_label_pc_11a54, %dec_label_pc_11c64, %dec_label_pc_11908, %dec_label_pc_119bc, %dec_label_pc_11a70, %dec_label_pc_11b24, %dec_label_pc_11c80
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11608

dec_label_pc_11600.backedge:                      ; preds = %dec_label_pc_11f54, %dec_label_pc_11f1c
  %storemerge458 = phi i32 [ %v3_11f24, %dec_label_pc_11f1c ], [ %v3_11f64, %dec_label_pc_11f54 ]
  %v0_11600.be = phi i32 [ %v3_11f24, %dec_label_pc_11f1c ], [ %v3_11f64, %dec_label_pc_11f54 ]
  %v0_11608142 = phi i32 [ %v0_11f24, %dec_label_pc_11f1c ], [ %v0_11f64, %dec_label_pc_11f54 ]
  store i32 %storemerge458, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11600 = icmp eq i32 %v0_11600.be, 0
  store i1 %v2_11600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11600, label %dec_label_pc_1144c, label %dec_label_pc_11608

dec_label_pc_11f6c:                               ; preds = %bb350
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_11f78 = call i32 @function_13edc(i32 2, i32 1, i32 0)
  store i32 %v3_11f78, i32* %r0.global-to-local, align 4
  %v2_11f7c = icmp eq i32 %v3_11f78, -1
  store i1 %v2_11f7c, i1* %cpsr_c.global-to-local, align 1
  %v7_11f7c = icmp eq i32 %v3_11f78, -1
  store i1 %v7_11f7c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_11f78, i32* @r4, align 4
  br i1 %v7_11f7c, label %dec_label_pc_12108, label %dec_label_pc_11f88

dec_label_pc_11f88:                               ; preds = %dec_label_pc_11f6c
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_11f8c = call i32 @function_121f4(i32 2)
  store i32 2032805430, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f240.107 to i32), i32* %r3.global-to-local, align 4
  %v0_11f98 = load i32, i32* @r6, align 4
  store i32 %v0_11f98, i32* %r1.global-to-local, align 4
  store i32 2032805430, i32* @global_var_1f244.109, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_11fa4 = inttoptr i32 %v0_11f98 to i32*
  %v3_11fa4 = call i32 @function_12110(i32 2, i32* %v2_11fa4)
  %v4_11fa4 = inttoptr i32 %v3_11fa4 to i8*
  store i32 %v3_11fa4, i32* %r0.global-to-local, align 4
  %v2_11fa8 = add i32 %v3_11fa4, 1
  %v3_11fa8 = inttoptr i32 %v2_11fa8 to i8*
  %v4_11fa8 = load i8, i8* %v3_11fa8, align 1
  %v5_11fa8 = zext i8 %v4_11fa8 to i32
  store i32 %v5_11fa8, i32* %r2.global-to-local, align 4
  %v3_11fac = load i8, i8* %v4_11fa4, align 1
  %v4_11fac = zext i8 %v3_11fac to i32
  %v4_11fb0 = mul nuw nsw i32 %v5_11fa8, 256
  %v5_11fb0 = or i32 %v4_11fac, %v4_11fb0
  store i32 %v5_11fb0, i32* %r3.global-to-local, align 4
  %v1_11fb4 = and i32 %v4_11fac, 128
  %v2_11fb4 = icmp ne i32 %v1_11fb4, 0
  store i1 %v2_11fb4, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_11fa8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_11fc4 = call i32 @function_1213c(i32 2)
  %v0_11fc8 = load i32, i32* @r4, align 4
  store i32 %v0_11fc8, i32* %r0.global-to-local, align 4
  store i32 %v2_11fcc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_11fd4 = call i32 @function_13d38(i32 %v0_11fc8, %sockaddr* %v3_11fd4, i32 16)
  store i32 %v4_11fd4, i32* %r0.global-to-local, align 4
  %v3_11fd8 = icmp eq i32 %v4_11fd4, -1
  store i1 %v3_11fd8, i1* %cpsr_c.global-to-local, align 1
  %v8_11fd8 = icmp eq i32 %v4_11fd4, -1
  store i1 %v8_11fd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11fd8, label %dec_label_pc_11fe0, label %dec_label_pc_12064

dec_label_pc_11fe0:                               ; preds = %dec_label_pc_11f88
  %v0_11fe0 = load i32, i32* @r4, align 4
  store i32 %v0_11fe0, i32* %r0.global-to-local, align 4
  %v1_11fe4 = call i32 @function_135f0(i32 %v0_11fe0)
  %v0_11fe8 = load i32, i32* @r6, align 4
  store i32 %v0_11fe8, i32* %r0.global-to-local, align 4
  %v1_11fec = call i32 @function_147b8(i32 %v0_11fe8)
  store i32 %v1_11fec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ff0

dec_label_pc_11ff0:                               ; preds = %dec_label_pc_113a8, %dec_label_pc_1138c, %dec_label_pc_11fe0
  %v0_11ff0 = load i32, i32* @r7, align 4
  %v1_11ff0 = load i32, i32* @r4, align 4
  %v2_11ff0 = add i32 %v1_11ff0, 12
  %v3_11ff0 = inttoptr i32 %v2_11ff0 to i32*
  store i32 %v0_11ff0, i32* %v3_11ff0, align 4
  %v0_11ff4 = load i32, i32* @r7, align 4
  %v1_11ff4 = trunc i32 %v0_11ff4 to i8
  %v2_11ff4 = load i32, i32* @r4, align 4
  %v3_11ff4 = add i32 %v2_11ff4, 284
  %v4_11ff4 = inttoptr i32 %v3_11ff4 to i8*
  store i8 %v1_11ff4, i8* %v4_11ff4, align 1
  br label %bb315

dec_label_pc_12034:                               ; preds = %dec_label_pc_11534, %dec_label_pc_114ec
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11570

dec_label_pc_1203c:                               ; preds = %dec_label_pc_114ac
  %v0_1203c = load i32, i32* @r5, align 4
  %v1_1203c = add i32 %v0_1203c, 4
  %v2_1203c = inttoptr i32 %v1_1203c to i32*
  %v3_1203c = load i32, i32* %v2_1203c, align 4
  store i32 %v3_1203c, i32* %r0.global-to-local, align 4
  %v1_12040 = call i32 @function_135f0(i32 %v3_1203c)
  store i32 %v1_12040, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_12048 = load i32, i32* @r6, align 4
  %v1_12048 = load i32, i32* @r5, align 4
  %v2_12048 = add i32 %v1_12048, 12
  %v3_12048 = inttoptr i32 %v2_12048 to i32*
  store i32 %v0_12048, i32* %v3_12048, align 4
  %v0_1204c = load i32, i32* %r4.global-to-local, align 4
  %v1_1204c = load i32, i32* @r5, align 4
  %v2_1204c = add i32 %v1_1204c, 4
  %v3_1204c = inttoptr i32 %v2_1204c to i32*
  store i32 %v0_1204c, i32* %v3_1204c, align 4
  %v0_12050 = load i32, i32* @r6, align 4
  %v1_12050 = trunc i32 %v0_12050 to i8
  %v2_12050 = load i32, i32* @r5, align 4
  %v3_12050 = add i32 %v2_12050, 284
  %v4_12050 = inttoptr i32 %v3_12050 to i8*
  store i8 %v1_12050, i8* %v4_12050, align 1
  br label %dec_label_pc_1144c

dec_label_pc_12058:                               ; preds = %dec_label_pc_11e60
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_1205c = load i32, i32* @sb, align 4
  %v2_1205c = inttoptr i32 %v1_1205c to i32*
  store i32 104, i32* %v2_1205c, align 4
  br label %dec_label_pc_11e78

dec_label_pc_12064:                               ; preds = %dec_label_pc_11f88
  store i32 %v2_11598, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12074 = load i32, i32* @r4, align 4
  store i32 %v0_12074, i32* %r0.global-to-local, align 4
  %v0_12078 = load i32, i32* @r6, align 4
  %v6_12078 = trunc i32 %v0_12078 to i8
  store i8 %v6_12078, i8* %stack_var_-52, align 1
  %v7_1207c = call i32 @function_13e4c(i32 %v0_12074, i32* nonnull %v2_115a0, i32 1, i32 16384)
  store i32 %v2_115ac, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12090 = load i32, i32* @r4, align 4
  store i32 %v0_12090, i32* %r0.global-to-local, align 4
  %v5_12094 = call i32 @function_13e4c(i32 %v0_12090, i32* nonnull %stack_var_-56, i32 4, i32 16384)
  %v2_1209c = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_1209c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_120a8 = load i32, i32* @r4, align 4
  store i32 %v0_120a8, i32* %r0.global-to-local, align 4
  %v5_120ac = call i32 @function_13e4c(i32 %v0_120a8, i32* nonnull %stack_var_-38, i32 2, i32 16384)
  %v0_120b0 = load i32, i32* %r8.global-to-local, align 4
  %v1_120b0 = add i32 %v0_120b0, 12
  store i32 %v1_120b0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_120bc = load i32, i32* @r4, align 4
  store i32 %v0_120bc, i32* %r0.global-to-local, align 4
  %v4_120c0 = inttoptr i32 %v1_120b0 to i32*
  %v5_120c0 = call i32 @function_13e4c(i32 %v0_120bc, i32* %v4_120c0, i32 1, i32 16384)
  store i32 %v5_120c0, i32* %r0.global-to-local, align 4
  %v0_120c4 = load i32, i32* %r8.global-to-local, align 4
  %v1_120c4 = inttoptr i32 %v0_120c4 to i32*
  %v2_120c4 = load i32, i32* %v1_120c4, align 4
  store i32 %v2_120c4, i32* %r1.global-to-local, align 4
  %v1_120c8 = add i32 %v0_120c4, 12
  %v2_120c8 = inttoptr i32 %v1_120c8 to i8*
  %v3_120c8 = load i8, i8* %v2_120c8, align 1
  %v4_120c8 = zext i8 %v3_120c8 to i32
  store i32 %v4_120c8, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_120d0 = load i32, i32* @r4, align 4
  store i32 %v0_120d0, i32* %r0.global-to-local, align 4
  %v4_120d4 = inttoptr i32 %v2_120c4 to i32*
  %v5_120d4 = call i32 @function_13e4c(i32 %v0_120d0, i32* %v4_120d4, i32 %v4_120c8, i32 16384)
  %v0_120d8 = load i32, i32* %r8.global-to-local, align 4
  %v1_120d8 = add i32 %v0_120d8, 13
  store i32 %v1_120d8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_120e4 = load i32, i32* @r4, align 4
  store i32 %v0_120e4, i32* %r0.global-to-local, align 4
  %v4_120e8 = inttoptr i32 %v1_120d8 to i32*
  %v5_120e8 = call i32 @function_13e4c(i32 %v0_120e4, i32* %v4_120e8, i32 1, i32 16384)
  %v0_120ec = load i32, i32* @r4, align 4
  store i32 %v0_120ec, i32* %r0.global-to-local, align 4
  %v0_120f0 = load i32, i32* %r8.global-to-local, align 4
  %v1_120f0 = add i32 %v0_120f0, 13
  %v2_120f0 = inttoptr i32 %v1_120f0 to i8*
  %v3_120f0 = load i8, i8* %v2_120f0, align 1
  %v4_120f0 = zext i8 %v3_120f0 to i32
  store i32 %v4_120f0, i32* %r2.global-to-local, align 4
  %v1_120f4 = add i32 %v0_120f0, 4
  %v2_120f4 = inttoptr i32 %v1_120f4 to i32*
  %v3_120f4 = load i32, i32* %v2_120f4, align 4
  store i32 %v3_120f4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_120fc = inttoptr i32 %v3_120f4 to i32*
  %v5_120fc = call i32 @function_13e4c(i32 %v0_120ec, i32* %v4_120fc, i32 %v4_120f0, i32 16384)
  %v0_12100 = load i32, i32* @r4, align 4
  store i32 %v0_12100, i32* %r0.global-to-local, align 4
  %v1_12104 = call i32 @function_135f0(i32 %v0_12100)
  store i32 %v1_12104, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12108

dec_label_pc_12108:                               ; preds = %dec_label_pc_11f6c, %dec_label_pc_12064
  %v0_12108 = load i32, i32* @r6, align 4
  store i32 %v0_12108, i32* %r0.global-to-local, align 4
  %v1_1210c = call i32 @function_147b8(i32 %v0_12108)
  store i32 %v1_1210c, i32* %r0.global-to-local, align 4
  ret i32 %v1_1210c

; uselistorder directives
  uselistorder i32 %v4_11fac, { 1, 0 }
  uselistorder i32 %v5_11fa8, { 1, 0, 2 }
  uselistorder i1 %v7_11f7c, { 1, 0 }
  uselistorder i32 %v3_11f78, { 1, 0, 2, 3 }
  uselistorder i32 %v3_11f64, { 1, 0 }
  uselistorder i1 %v7_11f44, { 1, 0 }
  uselistorder i32 %v3_11f24, { 1, 0 }
  uselistorder i32 %v3_11ed4, { 1, 0 }
  uselistorder i1 %v1_11ea0, { 1, 0 }
  uselistorder i32 %v1_11e88, { 2, 1, 0 }
  uselistorder i32 %v1_11e84, { 1, 0 }
  uselistorder i1 %v2_11e3c, { 1, 0 }
  uselistorder i32 %.357, { 1, 0 }
  uselistorder i1 %v7_11e24, { 1, 0 }
  uselistorder i32 %v0_11e20, { 2, 1, 0, 3 }
  uselistorder i32 %v4_11e00, { 1, 0, 2 }
  uselistorder i32 %v4_11dfc, { 1, 0, 2 }
  uselistorder i1 %v7_11dec, { 1, 0 }
  uselistorder i32 %v0_11dec, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v0_11d9c, { 0, 2, 1 }
  uselistorder i1 %v0_11d8c, { 1, 0 }
  uselistorder i32 %v4_11d80, { 1, 0, 2 }
  uselistorder i32 %v0_11d14, { 1, 2, 0 }
  uselistorder i1 %v7_11c84, { 1, 0 }
  uselistorder i32 %v1_11c80, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11c78, { 1, 0 }
  uselistorder i8 %v3_11c70, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11c80, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11c5c, { 1, 0 }
  uselistorder i1 %v7_11c54, { 1, 0 }
  uselistorder i1 %v7_11c4c, { 1, 0 }
  uselistorder i32 %v0_11c28, { 1, 2, 0 }
  uselistorder i32 %v2_11c14, { 1, 0 }
  uselistorder i32 %v1_11c14, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_11c14, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_11be4, { 2, 1, 0 }
  uselistorder i1 %v7_11bc0, { 1, 0 }
  uselistorder i32 %v4_11bbc, { 1, 0, 2 }
  uselistorder i1 %v7_11b28, { 1, 0 }
  uselistorder i32 %v1_11b24, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11b1c, { 1, 0 }
  uselistorder i8 %v3_11b14, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b24, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11b00, { 1, 0 }
  uselistorder i1 %v7_11af8, { 1, 0 }
  uselistorder i1 %v7_11af0, { 1, 0 }
  uselistorder i1 %v7_11a74, { 1, 0 }
  uselistorder i32 %v1_11a70, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11a68, { 1, 0 }
  uselistorder i8 %v3_11a60, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11a70, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11a4c, { 1, 0 }
  uselistorder i1 %v7_11a44, { 1, 0 }
  uselistorder i1 %v7_11a3c, { 1, 0 }
  uselistorder i1 %v7_119c0, { 1, 0 }
  uselistorder i32 %v1_119bc, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_119b4, { 1, 0 }
  uselistorder i8 %v3_119ac, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_119bc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11998, { 1, 0 }
  uselistorder i1 %v7_11990, { 1, 0 }
  uselistorder i1 %v7_11988, { 1, 0 }
  uselistorder i1 %v7_1190c, { 1, 0 }
  uselistorder i32 %v1_11908, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11900, { 1, 0 }
  uselistorder i8 %v3_118f8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11908, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_118e4, { 1, 0 }
  uselistorder i1 %v7_118dc, { 1, 0 }
  uselistorder i1 %v7_118d4, { 1, 0 }
  uselistorder i32 %v0_1187c, { 2, 1, 0 }
  uselistorder i1 %v7_11874, { 1, 0 }
  uselistorder i1 %v8_11868, { 1, 0 }
  uselistorder i8 %v3_11860, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_11870, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1184c, { 1, 0 }
  uselistorder i1 %v7_11844, { 1, 0 }
  uselistorder i32 %v0_117ec, { 2, 1, 0 }
  uselistorder i1 %v7_117e4, { 1, 0 }
  uselistorder i1 %v8_117d8, { 1, 0 }
  uselistorder i8 %v3_117d0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_117e0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_117bc, { 1, 0 }
  uselistorder i1 %v7_117b4, { 1, 0 }
  uselistorder i1 %v7_117ac, { 1, 0 }
  uselistorder i32 %v0_11788.pre, { 0, 2, 1 }
  uselistorder i32 %v1_11770, { 1, 0 }
  uselistorder i32 %v1_1176c, { 1, 0 }
  uselistorder i32 %v1_11764, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_11760, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_11760, { 0, 2, 1 }
  uselistorder i32 %v0_11728.pr, { 1, 0 }
  uselistorder i1 %v7_11700, { 1, 0 }
  uselistorder i1 %v2_116ec, { 1, 0, 2 }
  uselistorder i1 %v2_116d4, { 1, 0, 2 }
  uselistorder i32 %v1_116f4, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_116c8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_116f0, { 1, 0 }
  uselistorder i32 %v2_116f8, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_116b4, { 0, 2, 1, 3 }
  uselistorder i32 %v0_1167c, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_11658, { 1, 2, 3, 0 }
  uselistorder i32 %v3_11654, { 1, 0 }
  uselistorder i32 %v5_11638, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_11624, { 1, 0, 2 }
  uselistorder i32 %v3_11620, { 1, 0, 2 }
  uselistorder i32 %v0_11ee4, { 1, 0, 2 }
  uselistorder i32 %v0_115f4, { 1, 0, 2 }
  uselistorder i1 %v7_115d4, { 1, 0 }
  uselistorder i32 %v0_1153c, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_1151c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_11510, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_1149c, { 2, 1, 0 }
  uselistorder i32 %v3_11498, { 1, 0 }
  uselistorder i1 %v7_1147c, { 1, 0 }
  uselistorder i32 %v3_11478, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_1146c, { 1, 0 }
  uselistorder i32 %v1_11450, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_1143c, { 2, 1, 0 }
  uselistorder i32 %v3_11438, { 1, 0 }
  uselistorder i32 %v0_1143c, { 1, 0 }
  uselistorder i32 %v2_113d4, { 1, 0 }
  uselistorder i32 %v1_113d4, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_113d4, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_113b0, { 2, 1, 0 }
  uselistorder i32 %v1_113ac, { 1, 0 }
  uselistorder i32 %v2_1137c, { 1, 0 }
  uselistorder i32 %v0_1137c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_11374, { 1, 0 }
  uselistorder i1 %v7_1133c, { 0, 3, 1, 2 }
  uselistorder i1 %v2_1133c, { 1, 2, 0 }
  uselistorder i32 %v2_11334, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_1132c, { 1, 0 }
  uselistorder i32 %v1_11310, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v2_11304, { 1, 0 }
  uselistorder i32 %v1_11304, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_11304, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_112f4, { 1, 0 }
  uselistorder i32 %v3_11358, { 5, 7, 4, 8, 6, 1, 0, 10, 3, 2, 9 }
  uselistorder i32 %storemerge232, { 1, 0, 2 }
  uselistorder i32 %v2_115ac, { 0, 2, 3, 4, 1 }
  uselistorder i32* %v2_115a0, { 2, 1, 6, 3, 0, 4, 5, 7 }
  uselistorder i32 %v2_11598, { 4, 3, 8, 5, 2, 6, 7, 9, 1, 0 }
  uselistorder i32 %v2_11d08, { 1, 2, 0 }
  uselistorder i32 %v2_11368, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v3_11248, { 1, 0 }
  uselistorder i32 %v1_11234, { 1, 0 }
  uselistorder i32 %v1_1121c, { 1, 2, 0 }
  uselistorder i32 %v0_11228, { 0, 3, 2, 1 }
  uselistorder i32 %v0_111ec, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_111e0, { 2, 1, 0 }
  uselistorder i32 %v1_111bc, { 3, 1, 0, 4, 2 }
  uselistorder i32 %v3_1119c, { 1, 2, 0, 3 }
  uselistorder i1 %v2_11194, { 1, 0 }
  uselistorder i32 %v0_110f8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_11130, { 1, 2, 4, 8, 0, 3, 6, 5, 7 }
  uselistorder i32 %v1_110a0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_10fc4, { 0, 2, 1 }
  uselistorder i32 %v1_10fc0, { 3, 2, 0, 1 }
  uselistorder i32 %v4_10f9c, { 1, 0 }
  uselistorder i32 %v5_10f84, { 0, 2, 1 }
  uselistorder i1 %v2_10f0c, { 1, 0 }
  uselistorder i1 %v3_10ef0, { 1, 0, 2 }
  uselistorder i1 %v2_10edc, { 1, 0 }
  uselistorder i1 %v2_10eb8, { 1, 0 }
  uselistorder i32 %v1_10e68, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10e54, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10e50, { 4, 5, 6, 0, 7, 1, 2, 3, 8 }
  uselistorder i32 %v4_10e40, { 1, 0 }
  uselistorder i32 %v0_10e30, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10e0c, { 1, 0 }
  uselistorder i8* %stack_var_-1876.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_11124, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i32 %v4_101b8, { 1, 0 }
  uselistorder i32 %v0_101ac, { 2, 0, 1, 3 }
  uselistorder i32 %v4_10158, { 1, 0 }
  uselistorder i32 %v0_10150, { 0, 1, 3, 2 }
  uselistorder i32 %v0_100f8, { 3, 2, 0, 1 }
  uselistorder i1 %v7_10098, { 1, 0 }
  uselistorder i32 %v3_10090, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_10078, { 0, 2, 1 }
  uselistorder i32 %v0_10060, { 2, 1, 0 }
  uselistorder i32 %v0_1003c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge240, { 1, 0 }
  uselistorder i32 %v0_fd10, { 2, 1, 3, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-56, { 1, 5, 6, 7, 4, 8, 3, 2, 9, 0, 10, 11 }
  uselistorder i8* %stack_var_-52, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 62, 11, 12, 57, 63, 43, 64, 65, 129, 13, 14, 15, 35, 44, 45, 46, 47, 0, 1, 2, 3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 58, 59, 60, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 66, 67, 68, 69, 70, 71, 61, 72, 73, 75, 74, 76, 77, 78, 79, 80, 82, 84, 83, 81, 85, 86, 87, 88, 94, 89, 90, 91, 92, 95, 138, 139, 96, 140, 141, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 128, 114, 115, 116, 117, 118, 119, 121, 120, 123, 122, 93, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 43, 37, 14, 15, 17, 18, 19, 33, 38, 39, 0, 1, 2, 20, 21, 23, 22, 24, 26, 25, 27, 29, 28, 30, 32, 31, 34, 36, 35, 44, 46, 45, 40, 41, 42, 48, 49, 50, 51, 52, 53, 54, 47, 55, 56, 57, 58, 59, 61, 63, 62, 272, 60, 64, 65, 66, 67, 72, 68, 69, 70, 71, 73, 76, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 85, 86, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 301, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 44, 11, 12, 13, 14, 38, 36, 37, 15, 16, 17, 32, 33, 1, 2, 3, 274, 275, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 39, 40, 0, 45, 46, 47, 48, 41, 42, 43, 49, 50, 51, 53, 54, 52, 55, 56, 58, 57, 273, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 276, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272 }
  uselistorder i32* %r0.global-to-local, { 11, 10, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 130, 129, 23, 22, 24, 26, 25, 27, 29, 28, 30, 32, 31, 112, 113, 114, 116, 115, 33, 131, 105, 108, 107, 133, 135, 136, 132, 137, 134, 35, 34, 36, 38, 37, 39, 41, 40, 42, 93, 92, 95, 94, 96, 97, 109, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 117, 44, 45, 47, 46, 48, 43, 49, 50, 51, 52, 54, 53, 56, 55, 58, 57, 59, 60, 61, 62, 64, 63, 66, 65, 68, 67, 69, 70, 71, 72, 74, 73, 76, 75, 78, 77, 79, 80, 81, 82, 84, 83, 86, 85, 88, 87, 89, 90, 91, 99, 98, 106, 100, 101, 102, 119, 118, 121, 120, 103, 104, 111, 110, 140, 138, 123, 122, 124, 126, 125, 127, 128, 150, 384, 139, 142, 141, 143, 144, 146, 145, 147, 154, 148, 149, 153, 151, 152, 155, 157, 158, 156, 161, 159, 160, 163, 162, 164, 166, 165, 226, 167, 168, 169, 171, 170, 172, 173, 175, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 374, 373, 375, 379, 378, 376, 377, 380, 381, 382, 383 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 14, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 23, 3, 16, 0, 1, 21, 4, 5, 7, 6, 9, 8, 11, 10, 12, 13, 14, 20, 15, 22, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 51, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 10, 111, 202, 201, 93, 94, 99, 102, 101, 103, 104, 105, 11, 188, 13, 14, 15, 55, 56, 57, 74, 75, 76, 77, 78, 0, 1, 6, 7, 2, 3, 4, 5, 8, 95, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 97, 66, 71, 72, 67, 68, 69, 70, 73, 96, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 189, 106, 107, 108, 109, 110, 190, 98, 12, 100, 112, 114, 113, 115, 116, 118, 120, 119, 191, 117, 121, 122, 123, 124, 125, 126, 131, 127, 128, 129, 130, 194, 195, 192, 193, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 187, 167, 168, 169, 170, 171, 186, 172, 173, 174, 185, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 197, 198, 199, 196, 200 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 108, 200, 199, 90, 91, 96, 99, 98, 100, 101, 102, 12, 183, 13, 14, 15, 16, 55, 56, 57, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 92, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 94, 66, 71, 72, 67, 68, 69, 70, 73, 93, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 185, 103, 104, 105, 106, 107, 186, 95, 184, 97, 109, 111, 110, 112, 113, 115, 117, 116, 187, 114, 118, 119, 120, 121, 122, 127, 123, 124, 125, 126, 190, 191, 188, 128, 189, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 182, 160, 161, 162, 163, 164, 181, 165, 166, 167, 180, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 193, 194, 195, 196, 197, 192, 198 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder i8** @global_var_1f240.107, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1f240.107 to i32), { 1, 0 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 30, { 6, 0, 1, 2, 3, 7, 4, 5, 8 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_15ce8.35 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_15ce8.35, { 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_15ce8.35 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13e4c, { 2, 3, 4, 5, 6, 7, 8, 19, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 20, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13dec, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8 }
  uselistorder i32 (i32)* @function_1213c, { 35, 27, 26, 34, 28, 36, 33, 32, 31, 30, 29, 25, 24, 9, 23, 22, 21, 37, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12d20, { 21, 24, 22, 23, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 2, 1, 0, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 (i32, i32*)* @function_12110, { 1, 2, 8, 0, 3, 4, 5, 6, 7, 9, 10, 31, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 59, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 54, 55, 56, 57 }
  uselistorder i32 (i32)* @function_121f4, { 45, 44, 38, 46, 43, 42, 41, 40, 39, 37, 36, 20, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1f1ec.162 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1f1ed.163, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f1ec.162 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_13810, { 2, 1, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder i32 ()* @function_fa7c, { 3, 2, 1, 0 }
  uselistorder i32 254, { 8, 9, 10, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8 2, { 0, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_13e78, { 0, 1, 2, 8, 3, 4, 5, 6, 7 }
  uselistorder i32 16384, { 31, 50, 32, 51, 33, 52, 34, 53, 35, 54, 36, 55, 13, 56, 12, 67, 0, 48, 1, 49, 2, 57, 3, 58, 4, 59, 5, 60, 6, 61, 7, 62, 8, 63, 9, 64, 29, 65, 30, 66, 27, 69, 28, 70, 26, 68, 37, 71, 10, 72, 11, 73, 39, 74, 15, 75, 40, 76, 41, 77, 42, 78, 14, 79, 38, 80, 16, 81, 17, 82, 18, 83, 43, 44, 19, 84, 20, 85, 22, 86, 21, 87, 23, 88, 24, 89, 46, 90, 47, 91, 25, 92, 45, 93 }
  uselistorder i32 (i32, i32, i32, i32)* @function_e514, { 8, 7, 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_13444, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_e4b8, { 10, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1f1d0.525, { 2, 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 127, { 5, 0, 6, 3, 7, 1, 8, 2, 9, 4, 10 }
  uselistorder i32 126, { 11, 5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ptrtoint (i32* @global_var_162f8.521 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_161d0.471 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_16198.459 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_1615c.443 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_1613c.435 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_16134.433 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_160fc.418 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_160ec.414 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_160e4.412 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_160c8.404 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_16040.376 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_16038.374 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_16030.370 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_1600c.362 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15ffc.358 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15fd0.348 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15fc0.344 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15fb8.342 to i32), { 1, 4, 2, 0, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15f84.328 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15f60.318 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15f00.296 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d6c.286 to i32), { 0, 5, 1, 2, 3, 6, 4, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_15e84.268 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15e30.250 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15e10.244 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint ([11 x i8]* @global_var_15e04.242 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15dfc.240 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15df4.238 to i32), { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15de8.234 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([14 x i8]* @global_var_15dd8.232 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_15dc8.228 to i32), { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15f04.224 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15da8.220 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15da0.218 to i32), { 1, 7, 2, 8, 0, 9, 3, 4, 5, 10, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_15d98.216 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_15d8c.214 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_16190.212 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15d84.210 to i32), { 0, 7, 1, 8, 2, 9, 3, 10, 4, 5, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_15d7c.208 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15d74.206 to i32), { 0, 6, 3, 7, 1, 8, 2, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15d60.202 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_15d50.198 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_16258.192 to i32), { 7, 46, 8, 47, 9, 48, 10, 49, 0, 50, 11, 51, 12, 52, 13, 53, 1, 54, 2, 55, 3, 56, 14, 57, 4, 58, 15, 59, 5, 60, 16, 61, 17, 62, 18, 63, 6, 64, 19, 65, 20, 66, 21, 67, 22, 68, 23, 69, 24, 70, 25, 71, 26, 72, 27, 73, 28, 74, 29, 75, 30, 76, 31, 77, 32, 78, 33, 79, 34, 80, 35, 81, 36, 82, 37, 83, 38, 84, 39, 85, 40, 86, 41, 42, 43, 87, 44, 88, 45, 89 }
  uselistorder i32 (i32, i32, i32)* @function_fb50, { 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_15d10.190 to i32), { 3, 16, 4, 17, 5, 18, 0, 19, 1, 20, 6, 21, 2, 22, 7, 23, 8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_160b4.188 to i32), { 6, 56, 7, 57, 8, 58, 9, 59, 0, 60, 10, 61, 1, 62, 11, 63, 2, 64, 12, 65, 13, 66, 14, 67, 3, 68, 15, 69, 16, 70, 17, 71, 18, 72, 19, 73, 20, 74, 4, 75, 21, 76, 22, 77, 23, 78, 24, 79, 25, 80, 26, 81, 27, 82, 28, 83, 29, 84, 30, 85, 31, 86, 32, 87, 33, 88, 34, 89, 35, 90, 36, 91, 37, 92, 38, 93, 39, 94, 40, 95, 41, 96, 42, 97, 43, 98, 44, 45, 46, 99, 47, 100, 48, 101, 49, 102, 50, 103, 51, 104, 5, 105, 52, 106, 53, 107, 54, 108, 55, 109 }
  uselistorder i8* @global_var_1f1e1.184, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1f1d4.175 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder i8* @global_var_1f1e0.176, { 1, 0 }
  uselistorder i8** @global_var_1f1c0.172, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1f1c0.172 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 ()* @function_f8e8, { 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 6, 5, 4, 3, 2, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 7, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 1, 0 }
  uselistorder i32 2048, { 4, 3, 0, 1, 5, 6, 2, 7, 8, 9 }
  uselistorder i32* @global_var_1f254.170, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1f250.168, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1f1f0.156, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_138c0, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 25, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27 }
  uselistorder i32 (i32)* @function_f940, { 1, 0 }
  uselistorder i32* @global_var_1f238.84, { 3, 4, 0, 1, 2, 5, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_12f14, { 2, 1, 0 }
  uselistorder i32* @global_var_1f258.154, { 0, 2, 1 }
  uselistorder i32 ()* @function_1361c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 9, 3, 5, 6, 10, 4, 7, 8, 13, 12, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 25, 26, 2, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 0, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 1, 111, 112, 113, 114 }
  uselistorder i32* @sb, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 46, 47, 49, 50, 51, 54, 52, 53, 55, 56, 57, 58 }
  uselistorder label %dec_label_pc_12108, { 1, 0 }
  uselistorder label %dec_label_pc_11ff0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11600.backedge.thread455, { 9, 4, 8, 2, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_11600.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %.thread228, { 1, 0 }
  uselistorder label %bb352, { 1, 0 }
  uselistorder label %dec_label_pc_11e78, { 1, 0 }
  uselistorder label %dec_label_pc_11e44, { 1, 0 }
  uselistorder label %thread-pre-split78, { 1, 0 }
  uselistorder label %dec_label_pc_11d54, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11c80, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11c6c, { 1, 0 }
  uselistorder label %dec_label_pc_11c14, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_11b24, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11b10, { 1, 0 }
  uselistorder label %dec_label_pc_11a70, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11a5c, { 1, 0 }
  uselistorder label %dec_label_pc_119bc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_119a8, { 1, 0 }
  uselistorder label %dec_label_pc_11908, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_118f4, { 1, 0 }
  uselistorder label %dec_label_pc_11870, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1185c, { 1, 0 }
  uselistorder label %dec_label_pc_117ec, { 1, 0 }
  uselistorder label %dec_label_pc_117e0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_117cc, { 1, 0 }
  uselistorder label %dec_label_pc_11788, { 2, 1, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_11778, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb326, { 2, 1, 0 }
  uselistorder label %bb324, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11728, { 1, 0 }
  uselistorder label %dec_label_pc_116d0, { 1, 0 }
  uselistorder label %dec_label_pc_116d0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11664, { 1, 0 }
  uselistorder label %bb322, { 1, 0 }
  uselistorder label %dec_label_pc_11618, { 1, 0 }
  uselistorder label %dec_label_pc_11608, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11608.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_115fc.loopexit, { 1, 4, 0, 2, 3 }
  uselistorder label %dec_label_pc_11584, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11570, { 1, 0 }
  uselistorder label %dec_label_pc_1144c, { 7, 1, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_11424, { 1, 0 }
  uselistorder label %bb317, { 1, 0 }
  uselistorder label %bb315, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_11290.dec_label_pc_11290_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11278.dec_label_pc_11278_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11270, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_11268, { 1, 0 }
  uselistorder label %dec_label_pc_1121c, { 1, 0 }
  uselistorder label %dec_label_pc_110c0, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_110b4, { 1, 0 }
  uselistorder label %.thread50, { 2, 1, 0 }
  uselistorder label %.thread48, { 1, 0 }
  uselistorder label %dec_label_pc_10f1c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10ef8, { 1, 0 }
  uselistorder label %dec_label_pc_10eec, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10ec8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10ea4, { 1, 0 }
  uselistorder label %bb287, { 1, 0 }
  uselistorder label %dec_label_pc_10e50, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_100f8, { 1, 0 }
}

define i32 @function_12110(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_12110:
  %v3_12114 = mul i32 %arg1, 8
  %v2_12118 = add i32 %v3_12114, ptrtoint (i32* @global_var_1f260.549 to i32)
  store i1 false, i1* @cpsr_v, align 1
  %v2_1211c = icmp eq i32* %arg2, null
  br i1 %v2_1211c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12110
  %v3_1212811 = inttoptr i32 %v2_12118 to i32*
  %v4_1212812 = load i32, i32* %v3_1212811, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_12110
  %v2_12120 = add i32 %v3_12114, add (i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32 5)
  %v3_12120 = inttoptr i32 %v2_12120 to i8*
  %v4_12120 = load i8, i8* %v3_12120, align 1
  %v5_12120 = zext i8 %v4_12120 to i32
  store i32 %v5_12120, i32* @r2, align 4
  %v2_12124 = add i32 %v3_12114, add (i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32 4)
  %v3_12124 = inttoptr i32 %v2_12124 to i8*
  %v4_12124 = load i8, i8* %v3_12124, align 4
  %v5_12124 = zext i8 %v4_12124 to i32
  %v3_12128 = inttoptr i32 %v2_12118 to i32*
  %v4_12128 = load i32, i32* %v3_12128, align 4
  %v5_1212c = mul nuw nsw i32 %v5_12120, 256
  %v6_1212c = or i32 %v5_12124, %v5_1212c
  store i32 %v6_1212c, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_12128714 = phi i32 [ %v4_1212812, %.thread ], [ %v4_12128, %bb ]
  ret i32 %v4_12128714

; uselistorder directives
  uselistorder i32 %v2_12118, { 1, 0 }
  uselistorder i32 %v3_12114, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_1213c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1213c:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1213c = mul i32 %arg1, 8
  %v3_12140 = load i32, i32* @r4, align 4
  store i32 %v3_12140, i32* %stack_var_-20, align 4
  %v3_12150 = and i32 %v3_1213c, 2040
  %v2_12154 = add i32 %v3_12150, ptrtoint (i32* @global_var_1f260.549 to i32)
  store i32 %v2_12154, i32* @lr, align 4
  %v1_1215c = add i32 %v3_12150, add (i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32 4)
  store i32 %v1_1215c, i32* %r7.global-to-local, align 4
  %v2_12160 = load i32, i32* @global_var_1f030.552, align 4
  store i32 %v2_12160, i32* @r2, align 4
  %v2_12164 = inttoptr i32 %v1_1215c to i8*
  %v3_12164 = load i8, i8* %v2_12164, align 4
  %v4_12164 = zext i8 %v3_12164 to i32
  store i32 %v4_12164, i32* @r1, align 4
  %v1_12168 = add i32 %v3_12150, add (i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32 5)
  %v2_12168 = inttoptr i32 %v1_12168 to i8*
  %v3_12168 = load i8, i8* %v2_12168, align 1
  %v4_12168 = zext i8 %v3_12168 to i32
  %v3_1216c = udiv i32 %v2_12160, 256
  %v4_12170 = mul nuw nsw i32 %v4_12168, 256
  %v5_12170 = or i32 %v4_12170, %v4_12164
  %v7_12170 = icmp eq i32 %v5_12170, 0
  store i1 %v7_12170, i1* @cpsr_z, align 1
  %v3_12174 = udiv i32 %v2_12160, 65536
  %v1_12178 = urem i32 %v3_1216c, 256
  store i32 %v1_12178, i32* %r6.global-to-local, align 4
  %v1_1217c = urem i32 %v3_12174, 256
  store i32 %v1_1217c, i32* %r5.global-to-local, align 4
  %v3_12180 = udiv i32 %v2_12160, 16777216
  store i32 %v3_12180, i32* %r4.global-to-local, align 4
  %v1_12184 = urem i32 %v2_12160, 256
  br i1 %v7_12170, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_1213c
  store i32 %v3_12140, i32* @r4, align 4
  ret i32 %v1_12184

bb8:                                              ; preds = %dec_label_pc_1213c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12190

dec_label_pc_12190:                               ; preds = %dec_label_pc_12190, %bb8
  %v2_1219c = phi i32 [ %v1_121d8, %dec_label_pc_12190 ], [ 0, %bb8 ]
  %v0_12190 = phi i32 [ %v0_121d0, %dec_label_pc_12190 ], [ %v2_12154, %bb8 ]
  %v1_12190 = inttoptr i32 %v0_12190 to i32*
  %v2_12190 = load i32, i32* %v1_12190, align 4
  %v2_12194 = add i32 %v2_12190, %v2_1219c
  %v3_12194 = inttoptr i32 %v2_12194 to i8*
  %v4_12194 = load i8, i8* %v3_12194, align 1
  %v6_12194 = zext i8 %v4_12194 to i32
  %v2_12198 = xor i32 %v6_12194, %v1_12184
  %v1_1219c = trunc i32 %v2_12198 to i8
  store i8 %v1_1219c, i8* %v3_12194, align 1
  %v0_121a0 = load i32, i32* @lr, align 4
  %v1_121a0 = inttoptr i32 %v0_121a0 to i32*
  %v2_121a0 = load i32, i32* %v1_121a0, align 4
  %v0_121a4 = load i32, i32* %ip.global-to-local, align 4
  %v2_121a4 = add i32 %v0_121a4, %v2_121a0
  %v3_121a4 = inttoptr i32 %v2_121a4 to i8*
  %v4_121a4 = load i8, i8* %v3_121a4, align 1
  %v6_121a4 = zext i8 %v4_121a4 to i32
  %v0_121a8 = load i32, i32* %r6.global-to-local, align 4
  %v2_121a8 = xor i32 %v0_121a8, %v6_121a4
  %v1_121ac = trunc i32 %v2_121a8 to i8
  store i8 %v1_121ac, i8* %v3_121a4, align 1
  %v0_121b0 = load i32, i32* @lr, align 4
  %v1_121b0 = inttoptr i32 %v0_121b0 to i32*
  %v2_121b0 = load i32, i32* %v1_121b0, align 4
  %v0_121b4 = load i32, i32* %ip.global-to-local, align 4
  %v2_121b4 = add i32 %v0_121b4, %v2_121b0
  %v3_121b4 = inttoptr i32 %v2_121b4 to i8*
  %v4_121b4 = load i8, i8* %v3_121b4, align 1
  %v6_121b4 = zext i8 %v4_121b4 to i32
  %v0_121b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_121b8 = xor i32 %v0_121b8, %v6_121b4
  %v1_121bc = trunc i32 %v2_121b8 to i8
  store i8 %v1_121bc, i8* %v3_121b4, align 1
  %v0_121c0 = load i32, i32* @lr, align 4
  %v1_121c0 = inttoptr i32 %v0_121c0 to i32*
  %v2_121c0 = load i32, i32* %v1_121c0, align 4
  store i32 %v2_121c0, i32* @r1, align 4
  %v0_121c4 = load i32, i32* %ip.global-to-local, align 4
  %v2_121c4 = add i32 %v0_121c4, %v2_121c0
  %v3_121c4 = inttoptr i32 %v2_121c4 to i8*
  %v4_121c4 = load i8, i8* %v3_121c4, align 1
  %v6_121c4 = zext i8 %v4_121c4 to i32
  %v0_121c8 = load i32, i32* %r4.global-to-local, align 4
  %v2_121c8 = xor i32 %v0_121c8, %v6_121c4
  %v1_121cc = trunc i32 %v2_121c8 to i8
  store i8 %v1_121cc, i8* %v3_121c4, align 1
  %v0_121d0 = load i32, i32* @lr, align 4
  %v1_121d0 = add i32 %v0_121d0, 4
  %v2_121d0 = inttoptr i32 %v1_121d0 to i8*
  %v3_121d0 = load i8, i8* %v2_121d0, align 1
  %v4_121d0 = zext i8 %v3_121d0 to i32
  %v0_121d4 = load i32, i32* %r7.global-to-local, align 4
  %v1_121d4 = add i32 %v0_121d4, 1
  %v2_121d4 = inttoptr i32 %v1_121d4 to i8*
  %v3_121d4 = load i8, i8* %v2_121d4, align 1
  %v4_121d4 = zext i8 %v3_121d4 to i32
  %v0_121d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_121d8 = add i32 %v0_121d8, 1
  store i32 %v1_121d8, i32* %ip.global-to-local, align 4
  %v4_121dc = mul nuw nsw i32 %v4_121d4, 256
  %v5_121dc = or i32 %v4_121dc, %v4_121d0
  store i32 %v5_121dc, i32* @r2, align 4
  %v2_121e0 = sub i32 %v5_121dc, %v1_121d8
  %v6_121e0 = and i32 %v2_121e0, %v1_121d8
  %v7_121e0 = icmp slt i32 %v6_121e0, 0
  store i1 %v7_121e0, i1* @cpsr_v, align 1
  %v9_121e0 = icmp eq i32 %v5_121dc, %v1_121d8
  store i1 %v9_121e0, i1* @cpsr_z, align 1
  %v8_121e4 = icmp sgt i32 %v5_121dc, %v1_121d8
  br i1 %v8_121e4, label %dec_label_pc_12190, label %dec_label_pc_121e8

dec_label_pc_121e8:                               ; preds = %dec_label_pc_12190
  %v2_121e8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_121e8, i32* @r4, align 4
  ret i32 %v1_12184

; uselistorder directives
  uselistorder i32 %v5_121dc, { 0, 2, 1, 3 }
  uselistorder i32 %v1_121d8, { 2, 4, 0, 3, 5, 1 }
  uselistorder i32 %v0_121d0, { 1, 0 }
  uselistorder i32 %v1_12184, { 0, 2, 1 }
  uselistorder i32 %v2_12160, { 3, 0, 1, 2, 4 }
  uselistorder i1* @cpsr_v, { 1, 2, 0 }
}

define i32 @function_121f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_121f4:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_121f4 = mul i32 %arg1, 8
  %v3_121f8 = load i32, i32* @r4, align 4
  store i32 %v3_121f8, i32* %stack_var_-20, align 4
  %v3_12208 = and i32 %v3_121f4, 2040
  %v2_1220c = add i32 %v3_12208, ptrtoint (i32* @global_var_1f260.549 to i32)
  store i32 %v2_1220c, i32* @lr, align 4
  %v1_12214 = add i32 %v3_12208, add (i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32 4)
  store i32 %v1_12214, i32* %r7.global-to-local, align 4
  %v2_12218 = load i32, i32* @global_var_1f030.552, align 4
  store i32 %v2_12218, i32* @r2, align 4
  %v2_1221c = inttoptr i32 %v1_12214 to i8*
  %v3_1221c = load i8, i8* %v2_1221c, align 4
  %v4_1221c = zext i8 %v3_1221c to i32
  %v1_12220 = add i32 %v3_12208, add (i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32 5)
  %v2_12220 = inttoptr i32 %v1_12220 to i8*
  %v3_12220 = load i8, i8* %v2_12220, align 1
  %v4_12220 = zext i8 %v3_12220 to i32
  %v3_12224 = udiv i32 %v2_12218, 256
  %v4_12228 = mul nuw nsw i32 %v4_12220, 256
  %v5_12228 = or i32 %v4_12228, %v4_1221c
  %v7_12228 = icmp eq i32 %v5_12228, 0
  %v3_1222c = udiv i32 %v2_12218, 65536
  %v1_12230 = urem i32 %v3_12224, 256
  store i32 %v1_12230, i32* %r6.global-to-local, align 4
  %v1_12234 = urem i32 %v3_1222c, 256
  store i32 %v1_12234, i32* %r5.global-to-local, align 4
  %v3_12238 = udiv i32 %v2_12218, 16777216
  store i32 %v3_12238, i32* %r4.global-to-local, align 4
  %v1_1223c = urem i32 %v2_12218, 256
  br i1 %v7_12228, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_121f4
  store i32 %v3_121f8, i32* @r4, align 4
  ret i32 %v1_1223c

bb8:                                              ; preds = %dec_label_pc_121f4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12248

dec_label_pc_12248:                               ; preds = %dec_label_pc_12248, %bb8
  %v2_12254 = phi i32 [ %v1_12290, %dec_label_pc_12248 ], [ 0, %bb8 ]
  %v0_12248 = phi i32 [ %v0_12288, %dec_label_pc_12248 ], [ %v2_1220c, %bb8 ]
  %v1_12248 = inttoptr i32 %v0_12248 to i32*
  %v2_12248 = load i32, i32* %v1_12248, align 4
  %v2_1224c = add i32 %v2_12248, %v2_12254
  %v3_1224c = inttoptr i32 %v2_1224c to i8*
  %v4_1224c = load i8, i8* %v3_1224c, align 1
  %v6_1224c = zext i8 %v4_1224c to i32
  %v2_12250 = xor i32 %v6_1224c, %v1_1223c
  %v1_12254 = trunc i32 %v2_12250 to i8
  store i8 %v1_12254, i8* %v3_1224c, align 1
  %v0_12258 = load i32, i32* @lr, align 4
  %v1_12258 = inttoptr i32 %v0_12258 to i32*
  %v2_12258 = load i32, i32* %v1_12258, align 4
  %v0_1225c = load i32, i32* %ip.global-to-local, align 4
  %v2_1225c = add i32 %v0_1225c, %v2_12258
  %v3_1225c = inttoptr i32 %v2_1225c to i8*
  %v4_1225c = load i8, i8* %v3_1225c, align 1
  %v6_1225c = zext i8 %v4_1225c to i32
  %v0_12260 = load i32, i32* %r6.global-to-local, align 4
  %v2_12260 = xor i32 %v0_12260, %v6_1225c
  %v1_12264 = trunc i32 %v2_12260 to i8
  store i8 %v1_12264, i8* %v3_1225c, align 1
  %v0_12268 = load i32, i32* @lr, align 4
  %v1_12268 = inttoptr i32 %v0_12268 to i32*
  %v2_12268 = load i32, i32* %v1_12268, align 4
  %v0_1226c = load i32, i32* %ip.global-to-local, align 4
  %v2_1226c = add i32 %v0_1226c, %v2_12268
  %v3_1226c = inttoptr i32 %v2_1226c to i8*
  %v4_1226c = load i8, i8* %v3_1226c, align 1
  %v6_1226c = zext i8 %v4_1226c to i32
  %v0_12270 = load i32, i32* %r5.global-to-local, align 4
  %v2_12270 = xor i32 %v0_12270, %v6_1226c
  %v1_12274 = trunc i32 %v2_12270 to i8
  store i8 %v1_12274, i8* %v3_1226c, align 1
  %v0_12278 = load i32, i32* @lr, align 4
  %v1_12278 = inttoptr i32 %v0_12278 to i32*
  %v2_12278 = load i32, i32* %v1_12278, align 4
  %v0_1227c = load i32, i32* %ip.global-to-local, align 4
  %v2_1227c = add i32 %v0_1227c, %v2_12278
  %v3_1227c = inttoptr i32 %v2_1227c to i8*
  %v4_1227c = load i8, i8* %v3_1227c, align 1
  %v6_1227c = zext i8 %v4_1227c to i32
  %v0_12280 = load i32, i32* %r4.global-to-local, align 4
  %v2_12280 = xor i32 %v0_12280, %v6_1227c
  %v1_12284 = trunc i32 %v2_12280 to i8
  store i8 %v1_12284, i8* %v3_1227c, align 1
  %v0_12288 = load i32, i32* @lr, align 4
  %v1_12288 = add i32 %v0_12288, 4
  %v2_12288 = inttoptr i32 %v1_12288 to i8*
  %v3_12288 = load i8, i8* %v2_12288, align 1
  %v4_12288 = zext i8 %v3_12288 to i32
  %v0_1228c = load i32, i32* %r7.global-to-local, align 4
  %v1_1228c = add i32 %v0_1228c, 1
  %v2_1228c = inttoptr i32 %v1_1228c to i8*
  %v3_1228c = load i8, i8* %v2_1228c, align 1
  %v4_1228c = zext i8 %v3_1228c to i32
  %v0_12290 = load i32, i32* %ip.global-to-local, align 4
  %v1_12290 = add i32 %v0_12290, 1
  store i32 %v1_12290, i32* %ip.global-to-local, align 4
  %v4_12294 = mul nuw nsw i32 %v4_1228c, 256
  %v5_12294 = or i32 %v4_12294, %v4_12288
  store i32 %v5_12294, i32* @r2, align 4
  %v8_1229c = icmp sgt i32 %v5_12294, %v1_12290
  br i1 %v8_1229c, label %dec_label_pc_12248, label %dec_label_pc_122a0

dec_label_pc_122a0:                               ; preds = %dec_label_pc_12248
  %v2_122a0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_122a0, i32* @r4, align 4
  ret i32 %v1_1223c

; uselistorder directives
  uselistorder i32 %v1_12290, { 1, 2, 0 }
  uselistorder i32 %v0_12288, { 1, 0 }
  uselistorder i32 %v1_1223c, { 0, 2, 1 }
  uselistorder i32 %v2_12218, { 3, 0, 1, 2, 4 }
}

define i32 @function_122ac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_122ac:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_122ac = load i32, i32* @r4, align 4
  store i32 %v3_122ac, i32* %stack_var_-36, align 4
  %v6_122ac = load i32, i32* @r5, align 4
  %v9_122ac = load i32, i32* @r6, align 4
  %v12_122ac = load i32, i32* @r7, align 4
  %v1_122b4 = call i32 @function_14074(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f260.549 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_122b4, i32* @r7, align 4
  %v3_122d0 = call i32 @function_12cd8(i32 %v1_122b4, i32 ptrtoint (i32* @global_var_16318.557 to i32), i32 2)
  %v0_122d4 = load i32, i32* @r5, align 4
  %v0_122d8 = load i32, i32* @r7, align 4
  store i32 %v0_122d8, i32* @global_var_1f268.558, align 4
  %v1_122dc = trunc i32 %v0_122d4 to i8
  store i8 %v1_122dc, i8* bitcast (i32* @global_var_1f26c.559 to i8*), align 4
  %v0_122e0 = load i32, i32* @r6, align 4
  %v1_122e0 = trunc i32 %v0_122e0 to i8
  store i8 %v1_122e0, i8* bitcast (i32* @global_var_1f26d.560 to i8*), align 4
  %v1_122e4 = call i32 @function_14074(i32 %v0_122d4)
  %v0_122e8 = load i32, i32* @r5, align 4
  store i32 %v1_122e4, i32* @r7, align 4
  %v3_122f4 = call i32 @function_12cd8(i32 %v1_122e4, i32 ptrtoint (i32* @global_var_1631c.562 to i32), i32 %v0_122e8)
  %v0_122fc = load i32, i32* @r7, align 4
  store i32 %v0_122fc, i32* @global_var_1f270.563, align 4
  %v0_12300 = load i32, i32* @r5, align 4
  %v1_12300 = trunc i32 %v0_12300 to i8
  store i8 %v1_12300, i8* bitcast (i32* @global_var_1f274.564 to i8*), align 4
  %v0_12304 = load i32, i32* @r6, align 4
  %v1_12304 = trunc i32 %v0_12304 to i8
  store i8 %v1_12304, i8* bitcast (i32* @global_var_1f275.565 to i8*), align 4
  %v1_12308 = call i32 @function_14074(i32 19)
  store i32 %v1_12308, i32* @r5, align 4
  %v4_12318 = call i32 @function_12cd8(i32 %v1_12308, i32 ptrtoint ([20 x i8]* @global_var_16320.567 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1f27c.568 to i8*), align 4
  %v0_12328 = load i32, i32* @r5, align 4
  store i32 %v0_12328, i32* @global_var_1f278.569, align 4
  %v0_1232c = load i32, i32* @r6, align 4
  %v1_1232c = trunc i32 %v0_1232c to i8
  store i8 %v1_1232c, i8* bitcast (i32* @global_var_1f27d.570 to i8*), align 4
  %v1_12330 = call i32 @function_14074(i32 7)
  store i32 7, i32* %r8.global-to-local, align 4
  store i32 %v1_12330, i32* @r5, align 4
  %v3_12344 = call i32 @function_12cd8(i32 %v1_12330, i32 ptrtoint (i32* @global_var_16334.572 to i32), i32 7)
  %v0_1234c = load i32, i32* @r5, align 4
  store i32 %v0_1234c, i32* @global_var_1f280.573, align 4
  store i8 7, i8* bitcast (i32* @global_var_1f284.574 to i8*), align 4
  %v0_12354 = load i32, i32* @r6, align 4
  %v1_12354 = trunc i32 %v0_12354 to i8
  store i8 %v1_12354, i8* bitcast (i32* @global_var_1f285.575 to i8*), align 4
  %v1_12358 = call i32 @function_14074(i32 5)
  store i32 %v1_12358, i32* @r5, align 4
  %v3_12368 = call i32 @function_12cd8(i32 %v1_12358, i32 ptrtoint (i32* @global_var_1633c.577 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1f28c.578 to i8*), align 4
  %v0_12378 = load i32, i32* @r5, align 4
  store i32 %v0_12378, i32* @global_var_1f288.579, align 4
  %v0_1237c = load i32, i32* @r6, align 4
  %v1_1237c = trunc i32 %v0_1237c to i8
  store i8 %v1_1237c, i8* bitcast (i32* @global_var_1f28d.580 to i8*), align 4
  %v1_12380 = call i32 @function_14074(i32 4)
  store i32 %v1_12380, i32* @r5, align 4
  %v3_12390 = call i32 @function_12cd8(i32 %v1_12380, i32 ptrtoint (i32* @global_var_16344.582 to i32), i32 4)
  store i8 4, i8* bitcast (i32* @global_var_1f294.583 to i8*), align 4
  %v0_123a0 = load i32, i32* @r5, align 4
  store i32 %v0_123a0, i32* @global_var_1f290.584, align 4
  %v0_123a4 = load i32, i32* @r6, align 4
  %v1_123a4 = trunc i32 %v0_123a4 to i8
  store i8 %v1_123a4, i8* bitcast (i32* @global_var_1f295.585 to i8*), align 4
  %v1_123a8 = call i32 @function_14074(i32 14)
  store i32 14, i32* @r7, align 4
  store i32 %v1_123a8, i32* @r5, align 4
  %v3_123bc = call i32 @function_12cd8(i32 %v1_123a8, i32 ptrtoint (i32* @global_var_1634c.587 to i32), i32 14)
  %v0_123c4 = load i32, i32* @r5, align 4
  store i32 %v0_123c4, i32* @global_var_1f298.588, align 4
  %v0_123c8 = load i32, i32* @r7, align 4
  %v1_123c8 = trunc i32 %v0_123c8 to i8
  store i8 %v1_123c8, i8* bitcast (i32* @global_var_1f29c.589 to i8*), align 4
  %v0_123cc = load i32, i32* @r6, align 4
  %v1_123cc = trunc i32 %v0_123cc to i8
  store i8 %v1_123cc, i8* bitcast (i32* @global_var_1f29d.590 to i8*), align 4
  %v1_123d0 = call i32 @function_14074(i32 6)
  store i32 6, i32* %sl.global-to-local, align 4
  store i32 %v1_123d0, i32* @r5, align 4
  %v3_123e4 = call i32 @function_12cd8(i32 %v1_123d0, i32 ptrtoint (i32* @global_var_1635c.592 to i32), i32 6)
  %v0_123ec = load i32, i32* @r5, align 4
  store i32 %v0_123ec, i32* @global_var_1f2a0.593, align 4
  store i8 6, i8* bitcast (i32* @global_var_1f2a4.594 to i8*), align 4
  %v0_123f4 = load i32, i32* @r6, align 4
  %v1_123f4 = trunc i32 %v0_123f4 to i8
  store i8 %v1_123f4, i8* bitcast (i32* @global_var_1f2a5.595 to i8*), align 4
  %v1_123f8 = call i32 @function_14074(i32 8)
  store i32 8, i32* %sb.global-to-local, align 4
  store i32 %v1_123f8, i32* @r5, align 4
  %v3_1240c = call i32 @function_12cd8(i32 %v1_123f8, i32 ptrtoint (i32* @global_var_16364.597 to i32), i32 8)
  %v0_12410 = load i32, i32* %r8.global-to-local, align 4
  %v0_12414 = load i32, i32* @r5, align 4
  store i32 %v0_12414, i32* @global_var_1f2a8.598, align 4
  store i8 8, i8* bitcast (i32* @global_var_1f2ac.599 to i8*), align 4
  %v0_1241c = load i32, i32* @r6, align 4
  %v1_1241c = trunc i32 %v0_1241c to i8
  store i8 %v1_1241c, i8* bitcast (i32* @global_var_1f2ad.600 to i8*), align 4
  %v1_12420 = call i32 @function_14074(i32 %v0_12410)
  %v0_12424 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12420, i32* @r5, align 4
  %v3_12430 = call i32 @function_12cd8(i32 %v1_12420, i32 ptrtoint (i32* @global_var_16370.602 to i32), i32 %v0_12424)
  %v0_12438 = load i32, i32* @r5, align 4
  store i32 %v0_12438, i32* @global_var_1f2b0.603, align 4
  %v1_1243c = trunc i32 %v0_12424 to i8
  store i8 %v1_1243c, i8* bitcast (i32* @global_var_1f2b4.604 to i8*), align 4
  %v0_12440 = load i32, i32* @r6, align 4
  %v1_12440 = trunc i32 %v0_12440 to i8
  store i8 %v1_12440, i8* bitcast (i32* @global_var_1f2b5.605 to i8*), align 4
  %v1_12444 = call i32 @function_14074(i32 16)
  store i32 %v1_12444, i32* @r5, align 4
  %v3_12454 = call i32 @function_12cd8(i32 %v1_12444, i32 ptrtoint (i32* @global_var_16378.607 to i32), i32 16)
  %v0_1245c = load i32, i32* @r7, align 4
  store i8 16, i8* bitcast (i32* @global_var_1f2bc.608 to i8*), align 4
  %v0_12464 = load i32, i32* @r5, align 4
  store i32 %v0_12464, i32* @global_var_1f2b8.609, align 4
  %v0_12468 = load i32, i32* @r6, align 4
  %v1_12468 = trunc i32 %v0_12468 to i8
  store i8 %v1_12468, i8* bitcast (i32* @global_var_1f2bd.610 to i8*), align 4
  %v1_1246c = call i32 @function_14074(i32 %v0_1245c)
  %v0_12470 = load i32, i32* @r7, align 4
  store i32 %v1_1246c, i32* @r5, align 4
  %v3_1247c = call i32 @function_12cd8(i32 %v1_1246c, i32 ptrtoint (i32* @global_var_1638c.612 to i32), i32 %v0_12470)
  %v0_12484 = load i32, i32* @r5, align 4
  store i32 %v0_12484, i32* @global_var_1f2c0.613, align 4
  %v0_12488 = load i32, i32* @r7, align 4
  %v1_12488 = trunc i32 %v0_12488 to i8
  store i8 %v1_12488, i8* bitcast (i32* @global_var_1f2c4.614 to i8*), align 4
  %v0_1248c = load i32, i32* @r6, align 4
  %v1_1248c = trunc i32 %v0_1248c to i8
  store i8 %v1_1248c, i8* bitcast (i32* @global_var_1f2c5.615 to i8*), align 4
  %v1_12490 = call i32 @function_14074(i32 9)
  store i32 9, i32* %fp.global-to-local, align 4
  store i32 %v1_12490, i32* @r5, align 4
  %v3_124a4 = call i32 @function_12cd8(i32 %v1_12490, i32 ptrtoint (i32* @global_var_1639c.617 to i32), i32 9)
  %v0_124ac = load i32, i32* @r5, align 4
  store i32 %v0_124ac, i32* @global_var_1f2c8.618, align 4
  store i8 9, i8* bitcast (i32* @global_var_1f2cc.619 to i8*), align 4
  %v0_124b4 = load i32, i32* @r6, align 4
  %v1_124b4 = trunc i32 %v0_124b4 to i8
  store i8 %v1_124b4, i8* bitcast (i32* @global_var_1f2cd.620 to i8*), align 4
  %v1_124b8 = call i32 @function_14074(i32 19)
  store i32 %v1_124b8, i32* @r5, align 4
  %v3_124c8 = call i32 @function_12cd8(i32 %v1_124b8, i32 ptrtoint (i32* @global_var_163a8.622 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1f2d4.623 to i8*), align 4
  %v0_124d8 = load i32, i32* @r5, align 4
  store i32 %v0_124d8, i32* @global_var_1f2d0.624, align 4
  %v0_124dc = load i32, i32* @r6, align 4
  %v1_124dc = trunc i32 %v0_124dc to i8
  store i8 %v1_124dc, i8* bitcast (i32* @global_var_1f2d5.625 to i8*), align 4
  %v1_124e0 = call i32 @function_14074(i32 23)
  store i32 %v1_124e0, i32* @r5, align 4
  %v3_124f0 = call i32 @function_12cd8(i32 %v1_124e0, i32 ptrtoint (i32* @global_var_163bc.627 to i32), i32 23)
  %v0_124f8 = load i32, i32* %sb.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1f2dc.628 to i8*), align 4
  %v0_12500 = load i32, i32* @r5, align 4
  store i32 %v0_12500, i32* @global_var_1f2d8.629, align 4
  %v0_12504 = load i32, i32* @r6, align 4
  %v1_12504 = trunc i32 %v0_12504 to i8
  store i8 %v1_12504, i8* bitcast (i32* @global_var_1f2dd.630 to i8*), align 4
  %v1_12508 = call i32 @function_14074(i32 %v0_124f8)
  %v0_12510 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_12508, i32* @r5, align 4
  %v4_12518 = call i32 @function_12cd8(i32 %v1_12508, i32 ptrtoint ([9 x i8]* @global_var_163d4.632 to i32), i32 %v0_12510)
  %v0_1251c = load i32, i32* @r7, align 4
  %v0_12520 = load i32, i32* @r5, align 4
  store i32 %v0_12520, i32* @global_var_1f2e0.633, align 4
  %v1_12524 = trunc i32 %v0_12510 to i8
  store i8 %v1_12524, i8* bitcast (i32* @global_var_1f2e4.634 to i8*), align 4
  %v0_12528 = load i32, i32* @r6, align 4
  %v1_12528 = trunc i32 %v0_12528 to i8
  store i8 %v1_12528, i8* bitcast (i32* @global_var_1f2e5.635 to i8*), align 4
  %v1_1252c = call i32 @function_14074(i32 %v0_1251c)
  %v0_12530 = load i32, i32* @r7, align 4
  store i32 %v1_1252c, i32* @r5, align 4
  %v3_1253c = call i32 @function_12cd8(i32 %v1_1252c, i32 ptrtoint (i32* @global_var_163e0.637 to i32), i32 %v0_12530)
  %v0_12544 = load i32, i32* @r5, align 4
  store i32 %v0_12544, i32* @global_var_1f2e8.638, align 4
  %v0_12548 = load i32, i32* @r7, align 4
  %v1_12548 = trunc i32 %v0_12548 to i8
  store i8 %v1_12548, i8* bitcast (i32* @global_var_1f2ec.639 to i8*), align 4
  %v0_1254c = load i32, i32* @r6, align 4
  %v1_1254c = trunc i32 %v0_1254c to i8
  store i8 %v1_1254c, i8* bitcast (i32* @global_var_1f2ed.640 to i8*), align 4
  %v1_12550 = call i32 @function_14074(i32 19)
  store i32 %v1_12550, i32* @r5, align 4
  %v3_12560 = call i32 @function_12cd8(i32 %v1_12550, i32 ptrtoint (i32* @global_var_163f0.642 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1f2f4.643 to i8*), align 4
  %v0_12570 = load i32, i32* @r5, align 4
  store i32 %v0_12570, i32* @global_var_1f2f0.644, align 4
  %v0_12574 = load i32, i32* @r6, align 4
  %v1_12574 = trunc i32 %v0_12574 to i8
  store i8 %v1_12574, i8* bitcast (i32* @global_var_1f2f5.645 to i8*), align 4
  %v1_12578 = call i32 @function_14074(i32 23)
  store i32 %v1_12578, i32* @r5, align 4
  %v3_12588 = call i32 @function_12cd8(i32 %v1_12578, i32 ptrtoint (i32* @global_var_16404.647 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1f2fc.648 to i8*), align 4
  %v0_12598 = load i32, i32* @r5, align 4
  store i32 %v0_12598, i32* @global_var_1f2f8.649, align 4
  %v0_1259c = load i32, i32* @r6, align 4
  %v1_1259c = trunc i32 %v0_1259c to i8
  store i8 %v1_1259c, i8* bitcast (i32* @global_var_1f2fd.650 to i8*), align 4
  %v1_125a0 = call i32 @function_14074(i32 24)
  %v0_125ac = load i32, i32* @r7, align 4
  %v1_125ac = add i32 %v0_125ac, 10
  store i32 %v1_125ac, i32* @r7, align 4
  store i32 %v1_125a0, i32* @r5, align 4
  %v3_125b4 = call i32 @function_12cd8(i32 %v1_125a0, i32 ptrtoint (i32* @global_var_1641c.652 to i32), i32 24)
  %v0_125bc = load i32, i32* @r5, align 4
  store i32 %v0_125bc, i32* @global_var_1f300.653, align 4
  %v0_125c0 = load i32, i32* @r7, align 4
  %v1_125c0 = trunc i32 %v0_125c0 to i8
  store i8 %v1_125c0, i8* bitcast (i32* @global_var_1f304.654 to i8*), align 4
  %v0_125c4 = load i32, i32* @r6, align 4
  %v1_125c4 = trunc i32 %v0_125c4 to i8
  store i8 %v1_125c4, i8* bitcast (i32* @global_var_1f305.655 to i8*), align 4
  %v1_125c8 = call i32 @function_14074(i32 15)
  store i32 %v1_125c8, i32* @r5, align 4
  %v3_125d8 = call i32 @function_12cd8(i32 %v1_125c8, i32 ptrtoint (i32* @global_var_16438.657 to i32), i32 15)
  %v0_125e0 = load i32, i32* %sl.global-to-local, align 4
  store i8 15, i8* bitcast (i32* @global_var_1f30c.658 to i8*), align 4
  %v0_125e8 = load i32, i32* @r5, align 4
  store i32 %v0_125e8, i32* @global_var_1f308.659, align 4
  %v0_125ec = load i32, i32* @r6, align 4
  %v1_125ec = trunc i32 %v0_125ec to i8
  store i8 %v1_125ec, i8* bitcast (i32* @global_var_1f30d.660 to i8*), align 4
  %v1_125f0 = call i32 @function_14074(i32 %v0_125e0)
  %v0_125f4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_125f0, i32* @r5, align 4
  %v4_12600 = call i32 @function_12cd8(i32 %v1_125f0, i32 ptrtoint ([7 x i8]* @global_var_16448.662 to i32), i32 %v0_125f4)
  %v0_12604 = load i32, i32* %r8.global-to-local, align 4
  %v0_12608 = load i32, i32* @r5, align 4
  store i32 %v0_12608, i32* @global_var_1f310.663, align 4
  %v1_1260c = trunc i32 %v0_125f4 to i8
  store i8 %v1_1260c, i8* bitcast (i32* @global_var_1f314.664 to i8*), align 4
  %v0_12610 = load i32, i32* @r6, align 4
  %v1_12610 = trunc i32 %v0_12610 to i8
  store i8 %v1_12610, i8* bitcast (i32* @global_var_1f315.665 to i8*), align 4
  %v1_12614 = call i32 @function_14074(i32 %v0_12604)
  %v0_12618 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12614, i32* @r5, align 4
  %v4_12624 = call i32 @function_12cd8(i32 %v1_12614, i32 ptrtoint ([8 x i8]* @global_var_16450.667 to i32), i32 %v0_12618)
  %v0_1262c = load i32, i32* @r5, align 4
  store i32 %v0_1262c, i32* @global_var_1f318.668, align 4
  %v1_12630 = trunc i32 %v0_12618 to i8
  store i8 %v1_12630, i8* bitcast (i32* @global_var_1f31c.669 to i8*), align 4
  %v0_12634 = load i32, i32* @r6, align 4
  %v1_12634 = trunc i32 %v0_12634 to i8
  store i8 %v1_12634, i8* bitcast (i32* @global_var_1f31d.670 to i8*), align 4
  %v1_12638 = call i32 @function_14074(i32 %v0_12618)
  %v0_1263c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12638, i32* @r5, align 4
  %v4_12648 = call i32 @function_12cd8(i32 %v1_12638, i32 ptrtoint ([8 x i8]* @global_var_16458.672 to i32), i32 %v0_1263c)
  %v0_12650 = load i32, i32* @r5, align 4
  store i32 %v0_12650, i32* @global_var_1f320.673, align 4
  %v1_12654 = trunc i32 %v0_1263c to i8
  store i8 %v1_12654, i8* bitcast (i32* @global_var_1f324.674 to i8*), align 4
  %v0_12658 = load i32, i32* @r6, align 4
  %v1_12658 = trunc i32 %v0_12658 to i8
  store i8 %v1_12658, i8* bitcast (i32* @global_var_1f325.675 to i8*), align 4
  %v1_1265c = call i32 @function_14074(i32 3)
  store i32 %v1_1265c, i32* @r5, align 4
  %v4_1266c = call i32 @function_12cd8(i32 %v1_1265c, i32 ptrtoint ([4 x i8]* @global_var_16460.677 to i32), i32 3)
  %v0_12674 = load i32, i32* @r7, align 4
  store i8 3, i8* bitcast (i32* @global_var_1f32c.678 to i8*), align 4
  %v0_1267c = load i32, i32* @r5, align 4
  store i32 %v0_1267c, i32* @global_var_1f328.679, align 4
  %v0_12680 = load i32, i32* @r6, align 4
  %v1_12680 = trunc i32 %v0_12680 to i8
  store i8 %v1_12680, i8* bitcast (i32* @global_var_1f32d.680 to i8*), align 4
  %v1_12684 = call i32 @function_14074(i32 %v0_12674)
  %v0_12688 = load i32, i32* @r7, align 4
  store i32 %v1_12684, i32* @r5, align 4
  %v3_12694 = call i32 @function_12cd8(i32 %v1_12684, i32 ptrtoint (i32* @global_var_16464.682 to i32), i32 %v0_12688)
  %v0_1269c = load i32, i32* @r5, align 4
  store i32 %v0_1269c, i32* @global_var_1f330.683, align 4
  %v0_126a0 = load i32, i32* @r7, align 4
  %v1_126a0 = trunc i32 %v0_126a0 to i8
  store i8 %v1_126a0, i8* bitcast (i32* @global_var_1f334.684 to i8*), align 4
  %v0_126a4 = load i32, i32* @r6, align 4
  %v1_126a4 = trunc i32 %v0_126a4 to i8
  store i8 %v1_126a4, i8* bitcast (i32* @global_var_1f335.685 to i8*), align 4
  %v1_126a8 = call i32 @function_14074(i32 29)
  store i32 %v1_126a8, i32* @r5, align 4
  %v3_126b8 = call i32 @function_12cd8(i32 %v1_126a8, i32 ptrtoint (i32* @global_var_16480.687 to i32), i32 29)
  %v0_126c0 = load i32, i32* %fp.global-to-local, align 4
  store i8 29, i8* bitcast (i32* @global_var_1f33c.688 to i8*), align 4
  %v0_126c8 = load i32, i32* @r5, align 4
  store i32 %v0_126c8, i32* @global_var_1f338.689, align 4
  %v0_126cc = load i32, i32* @r6, align 4
  %v1_126cc = trunc i32 %v0_126cc to i8
  store i8 %v1_126cc, i8* bitcast (i32* @global_var_1f33d.690 to i8*), align 4
  %v1_126d0 = call i32 @function_14074(i32 %v0_126c0)
  %v0_126d8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_126d0, i32* @r5, align 4
  %v4_126e0 = call i32 @function_12cd8(i32 %v1_126d0, i32 ptrtoint ([10 x i8]* @global_var_164a0.692 to i32), i32 %v0_126d8)
  %v0_126e4 = load i32, i32* %sb.global-to-local, align 4
  %v0_126e8 = load i32, i32* @r5, align 4
  store i32 %v0_126e8, i32* @global_var_1f340.693, align 4
  %v1_126ec = trunc i32 %v0_126d8 to i8
  store i8 %v1_126ec, i8* bitcast (i32* @global_var_1f344.694 to i8*), align 4
  %v0_126f0 = load i32, i32* @r6, align 4
  %v1_126f0 = trunc i32 %v0_126f0 to i8
  store i8 %v1_126f0, i8* bitcast (i32* @global_var_1f345.695 to i8*), align 4
  %v1_126f4 = call i32 @function_14074(i32 %v0_126e4)
  %v0_126fc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_126f4, i32* @r5, align 4
  %v4_12704 = call i32 @function_12cd8(i32 %v1_126f4, i32 ptrtoint ([9 x i8]* @global_var_163d4.632 to i32), i32 %v0_126fc)
  %v0_1270c = load i32, i32* @r5, align 4
  store i32 %v0_1270c, i32* @global_var_1f348.696, align 4
  %v1_12710 = trunc i32 %v0_126fc to i8
  store i8 %v1_12710, i8* bitcast (i32* @global_var_1f34c.697 to i8*), align 4
  %v0_12714 = load i32, i32* @r6, align 4
  %v1_12714 = trunc i32 %v0_12714 to i8
  store i8 %v1_12714, i8* bitcast (i32* @global_var_1f34d.698 to i8*), align 4
  %v1_12718 = call i32 @function_14074(i32 5)
  store i32 %v1_12718, i32* @r5, align 4
  %v4_12728 = call i32 @function_12cd8(i32 %v1_12718, i32 ptrtoint ([6 x i8]* @global_var_164ac.700 to i32), i32 5)
  %v0_12730 = load i32, i32* %sl.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1f354.701 to i8*), align 4
  %v0_12738 = load i32, i32* @r5, align 4
  store i32 %v0_12738, i32* @global_var_1f350.702, align 4
  %v0_1273c = load i32, i32* @r6, align 4
  %v1_1273c = trunc i32 %v0_1273c to i8
  store i8 %v1_1273c, i8* bitcast (i32* @global_var_1f355.703 to i8*), align 4
  %v1_12740 = call i32 @function_14074(i32 %v0_12730)
  %v0_12744 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_12740, i32* @r5, align 4
  %v4_12750 = call i32 @function_12cd8(i32 %v1_12740, i32 ptrtoint ([7 x i8]* @global_var_164b4.705 to i32), i32 %v0_12744)
  %v0_12758 = load i32, i32* @r5, align 4
  store i32 %v0_12758, i32* @global_var_1f358.706, align 4
  %v1_1275c = trunc i32 %v0_12744 to i8
  store i8 %v1_1275c, i8* bitcast (i32* @global_var_1f35c.707 to i8*), align 4
  %v0_12760 = load i32, i32* @r6, align 4
  %v1_12760 = trunc i32 %v0_12760 to i8
  store i8 %v1_12760, i8* bitcast (i32* @global_var_1f35d.708 to i8*), align 4
  %v1_12764 = call i32 @function_14074(i32 21)
  store i32 %v1_12764, i32* @r5, align 4
  %v0_12774 = load i32, i32* %sl.global-to-local, align 4
  %v1_12774 = add i32 %v0_12774, 15
  store i32 %v1_12774, i32* %sl.global-to-local, align 4
  %v3_12778 = call i32 @function_12cd8(i32 %v1_12764, i32 ptrtoint (i32* @global_var_164bc.710 to i32), i32 21)
  %v0_12780 = load i32, i32* @r5, align 4
  store i32 %v0_12780, i32* @global_var_1f360.711, align 4
  %v1_12784 = trunc i32 %v1_12774 to i8
  store i8 %v1_12784, i8* bitcast (i32* @global_var_1f364.712 to i8*), align 4
  %v0_12788 = load i32, i32* @r6, align 4
  %v1_12788 = trunc i32 %v0_12788 to i8
  store i8 %v1_12788, i8* bitcast (i32* @global_var_1f365.713 to i8*), align 4
  %v1_1278c = call i32 @function_14074(i32 17)
  store i32 %v1_1278c, i32* @r5, align 4
  %v3_1279c = call i32 @function_12cd8(i32 %v1_1278c, i32 ptrtoint (i32* @global_var_164d4.715 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1f36c.716 to i8*), align 4
  %v0_127ac = load i32, i32* @r5, align 4
  store i32 %v0_127ac, i32* @global_var_1f368.717, align 4
  %v0_127b0 = load i32, i32* @r6, align 4
  %v1_127b0 = trunc i32 %v0_127b0 to i8
  store i8 %v1_127b0, i8* bitcast (i32* @global_var_1f36d.718 to i8*), align 4
  %v1_127b4 = call i32 @function_14074(i32 11)
  %v0_127c0 = load i32, i32* %r8.global-to-local, align 4
  %v1_127c0 = add i32 %v0_127c0, 4
  store i32 %v1_127c0, i32* %r8.global-to-local, align 4
  store i32 %v1_127b4, i32* @r5, align 4
  %v4_127c8 = call i32 @function_12cd8(i32 %v1_127b4, i32 ptrtoint ([12 x i8]* @global_var_164e8.720 to i32), i32 11)
  %v0_127d0 = load i32, i32* @r5, align 4
  store i32 %v0_127d0, i32* @global_var_1f370.721, align 4
  %v1_127d4 = trunc i32 %v1_127c0 to i8
  store i8 %v1_127d4, i8* bitcast (i32* @global_var_1f374.722 to i8*), align 4
  %v0_127d8 = load i32, i32* @r6, align 4
  %v1_127d8 = trunc i32 %v0_127d8 to i8
  store i8 %v1_127d8, i8* bitcast (i32* @global_var_1f375.723 to i8*), align 4
  %v1_127dc = call i32 @function_14074(i32 23)
  store i32 %v1_127dc, i32* @r5, align 4
  %v3_127ec = call i32 @function_12cd8(i32 %v1_127dc, i32 ptrtoint (i32* @global_var_164f4.725 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1f37c.726 to i8*), align 4
  %v0_127fc = load i32, i32* @r5, align 4
  store i32 %v0_127fc, i32* @global_var_1f378.727, align 4
  %v0_12800 = load i32, i32* @r6, align 4
  %v1_12800 = trunc i32 %v0_12800 to i8
  store i8 %v1_12800, i8* bitcast (i32* @global_var_1f37d.728 to i8*), align 4
  %v1_12804 = call i32 @function_14074(i32 83)
  store i32 %v1_12804, i32* @r5, align 4
  %v3_12814 = call i32 @function_12cd8(i32 %v1_12804, i32 ptrtoint (i32* @global_var_16848.730 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1f384.731 to i8*), align 4
  %v0_12824 = load i32, i32* @r5, align 4
  store i32 %v0_12824, i32* @global_var_1f380.732, align 4
  %v0_12828 = load i32, i32* @r6, align 4
  %v1_12828 = trunc i32 %v0_12828 to i8
  store i8 %v1_12828, i8* bitcast (i32* @global_var_1f385.733 to i8*), align 4
  %v1_1282c = call i32 @function_14074(i32 32)
  store i32 %v1_1282c, i32* @r5, align 4
  %v3_1283c = call i32 @function_12cd8(i32 %v1_1282c, i32 ptrtoint (i32* @global_var_1689c.735 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1f38c.736 to i8*), align 4
  %v0_1284c = load i32, i32* @r5, align 4
  store i32 %v0_1284c, i32* @global_var_1f388.737, align 4
  %v0_12850 = load i32, i32* @r6, align 4
  %v1_12850 = trunc i32 %v0_12850 to i8
  store i8 %v1_12850, i8* bitcast (i32* @global_var_1f38d.738 to i8*), align 4
  %v1_12854 = call i32 @function_14074(i32 48)
  store i32 %v1_12854, i32* @r5, align 4
  %v3_12864 = call i32 @function_12cd8(i32 %v1_12854, i32 ptrtoint (i32* @global_var_1650c.740 to i32), i32 48)
  store i8 48, i8* bitcast (i32* @global_var_1f394.741 to i8*), align 4
  %v0_12874 = load i32, i32* @r5, align 4
  store i32 %v0_12874, i32* @global_var_1f390.742, align 4
  %v0_12878 = load i32, i32* @r6, align 4
  %v1_12878 = trunc i32 %v0_12878 to i8
  store i8 %v1_12878, i8* bitcast (i32* @global_var_1f395.743 to i8*), align 4
  %v1_1287c = call i32 @function_14074(i32 12)
  %v0_12888 = load i32, i32* @r7, align 4
  %v1_12888 = add i32 %v0_12888, -12
  store i32 %v1_12888, i32* @r7, align 4
  store i32 %v1_1287c, i32* @r5, align 4
  %v3_12890 = call i32 @function_12cd8(i32 %v1_1287c, i32 ptrtoint (i32* @global_var_16540.745 to i32), i32 12)
  %v0_12894 = load i32, i32* %fp.global-to-local, align 4
  %v0_12898 = load i32, i32* @r5, align 4
  store i32 %v0_12898, i32* @global_var_1f398.746, align 4
  %v0_1289c = load i32, i32* @r7, align 4
  %v1_1289c = trunc i32 %v0_1289c to i8
  store i8 %v1_1289c, i8* bitcast (i32* @global_var_1f39c.747 to i8*), align 4
  %v0_128a0 = load i32, i32* @r6, align 4
  %v1_128a0 = trunc i32 %v0_128a0 to i8
  store i8 %v1_128a0, i8* bitcast (i32* @global_var_1f39d.748 to i8*), align 4
  %v1_128a4 = call i32 @function_14074(i32 %v0_12894)
  %v0_128ac = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_128a4, i32* @r5, align 4
  %v3_128b4 = call i32 @function_12cd8(i32 %v1_128a4, i32 ptrtoint (i32* @global_var_16550.750 to i32), i32 %v0_128ac)
  %v0_128bc = load i32, i32* @r5, align 4
  store i32 %v0_128bc, i32* @global_var_1f3a0.751, align 4
  %v1_128c0 = trunc i32 %v0_128ac to i8
  store i8 %v1_128c0, i8* bitcast (i32* @global_var_1f3a4.752 to i8*), align 4
  %v0_128c4 = load i32, i32* @r6, align 4
  %v1_128c4 = trunc i32 %v0_128c4 to i8
  store i8 %v1_128c4, i8* bitcast (i32* @global_var_1f3a5.753 to i8*), align 4
  %v1_128c8 = call i32 @function_14074(i32 10)
  store i32 %v1_128c8, i32* @r5, align 4
  %v3_128d8 = call i32 @function_12cd8(i32 %v1_128c8, i32 ptrtoint (i32* @global_var_1655c.755 to i32), i32 10)
  %v0_128e0 = load i32, i32* @r7, align 4
  store i8 10, i8* bitcast (i32* @global_var_1f3ac.756 to i8*), align 4
  %v0_128e8 = load i32, i32* @r5, align 4
  store i32 %v0_128e8, i32* @global_var_1f3a8.757, align 4
  %v0_128ec = load i32, i32* @r6, align 4
  %v1_128ec = trunc i32 %v0_128ec to i8
  store i8 %v1_128ec, i8* bitcast (i32* @global_var_1f3ad.758 to i8*), align 4
  %v1_128f0 = call i32 @function_14074(i32 %v0_128e0)
  %v0_128f4 = load i32, i32* @r7, align 4
  store i32 %v1_128f0, i32* @r5, align 4
  %v3_12900 = call i32 @function_12cd8(i32 %v1_128f0, i32 ptrtoint (i32* @global_var_16568.760 to i32), i32 %v0_128f4)
  %v0_12908 = load i32, i32* @r5, align 4
  store i32 %v0_12908, i32* @global_var_1f3b0.761, align 4
  %v0_1290c = load i32, i32* @r7, align 4
  %v1_1290c = trunc i32 %v0_1290c to i8
  store i8 %v1_1290c, i8* bitcast (i32* @global_var_1f3b4.762 to i8*), align 4
  %v0_12910 = load i32, i32* @r6, align 4
  %v1_12910 = trunc i32 %v0_12910 to i8
  store i8 %v1_12910, i8* bitcast (i32* @global_var_1f3b5.763 to i8*), align 4
  %v1_12914 = call i32 @function_14074(i32 16)
  store i32 %v1_12914, i32* @r5, align 4
  %v3_12924 = call i32 @function_12cd8(i32 %v1_12914, i32 ptrtoint (i32* @global_var_16578.765 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1f3bc.766 to i8*), align 4
  %v0_12934 = load i32, i32* @r5, align 4
  store i32 %v0_12934, i32* @global_var_1f3b8.767, align 4
  %v0_12938 = load i32, i32* @r6, align 4
  %v1_12938 = trunc i32 %v0_12938 to i8
  store i8 %v1_12938, i8* bitcast (i32* @global_var_1f3bd.768 to i8*), align 4
  %v1_1293c = call i32 @function_14074(i32 19)
  store i32 %v1_1293c, i32* @r5, align 4
  %v3_1294c = call i32 @function_12cd8(i32 %v1_1293c, i32 ptrtoint (i32* @global_var_1658c.770 to i32), i32 19)
  %v0_12954 = load i32, i32* %sb.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1f3c4.771 to i8*), align 4
  %v0_1295c = load i32, i32* @r5, align 4
  store i32 %v0_1295c, i32* @global_var_1f3c0.772, align 4
  %v0_12960 = load i32, i32* @r6, align 4
  %v1_12960 = trunc i32 %v0_12960 to i8
  store i8 %v1_12960, i8* bitcast (i32* @global_var_1f3c5.773 to i8*), align 4
  %v1_12964 = call i32 @function_14074(i32 %v0_12954)
  %v0_1296c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_12964, i32* @r5, align 4
  %v4_12974 = call i32 @function_12cd8(i32 %v1_12964, i32 ptrtoint ([9 x i8]* @global_var_165a0.775 to i32), i32 %v0_1296c)
  %v0_12978 = load i32, i32* %r8.global-to-local, align 4
  %v0_1297c = load i32, i32* @r5, align 4
  store i32 %v0_1297c, i32* @global_var_1f3c8.776, align 4
  %v1_12980 = trunc i32 %v0_1296c to i8
  store i8 %v1_12980, i8* bitcast (i32* @global_var_1f3cc.777 to i8*), align 4
  %v0_12984 = load i32, i32* @r6, align 4
  %v1_12984 = trunc i32 %v0_12984 to i8
  store i8 %v1_12984, i8* bitcast (i32* @global_var_1f3cd.778 to i8*), align 4
  %v1_12988 = call i32 @function_14074(i32 %v0_12978)
  %v0_12990 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12988, i32* @r5, align 4
  %v3_12998 = call i32 @function_12cd8(i32 %v1_12988, i32 ptrtoint (i32* @global_var_16500.780 to i32), i32 %v0_12990)
  %v0_1299c = load i32, i32* @r7, align 4
  %v0_129a0 = load i32, i32* @r5, align 4
  store i32 %v0_129a0, i32* @global_var_1f3d0.781, align 4
  %v1_129a4 = trunc i32 %v0_12990 to i8
  store i8 %v1_129a4, i8* bitcast (i32* @global_var_1f3d4.782 to i8*), align 4
  %v0_129a8 = load i32, i32* @r6, align 4
  %v1_129a8 = trunc i32 %v0_129a8 to i8
  store i8 %v1_129a8, i8* bitcast (i32* @global_var_1f3d5.783 to i8*), align 4
  %v1_129ac = call i32 @function_14074(i32 %v0_1299c)
  %v0_129b0 = load i32, i32* @r7, align 4
  store i32 %v1_129ac, i32* @r5, align 4
  %v3_129bc = call i32 @function_12cd8(i32 %v1_129ac, i32 ptrtoint (i32* @global_var_165ac.785 to i32), i32 %v0_129b0)
  %v0_129c4 = load i32, i32* @r5, align 4
  store i32 %v0_129c4, i32* @global_var_1f3d8.786, align 4
  %v0_129c8 = load i32, i32* @r7, align 4
  %v1_129c8 = trunc i32 %v0_129c8 to i8
  store i8 %v1_129c8, i8* bitcast (i32* @global_var_1f3dc.787 to i8*), align 4
  %v0_129cc = load i32, i32* @r6, align 4
  %v1_129cc = trunc i32 %v0_129cc to i8
  store i8 %v1_129cc, i8* bitcast (i32* @global_var_1f3dd.788 to i8*), align 4
  %v1_129d0 = call i32 @function_14074(i32 18)
  store i32 %v1_129d0, i32* @r5, align 4
  %v3_129e0 = call i32 @function_12cd8(i32 %v1_129d0, i32 ptrtoint (i32* @global_var_165bc.790 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1f3e4.791 to i8*), align 4
  %v0_129f0 = load i32, i32* @r5, align 4
  store i32 %v0_129f0, i32* @global_var_1f3e0.792, align 4
  %v0_129f4 = load i32, i32* @r6, align 4
  %v1_129f4 = trunc i32 %v0_129f4 to i8
  store i8 %v1_129f4, i8* bitcast (i32* @global_var_1f3e5.793 to i8*), align 4
  %v1_129f8 = call i32 @function_14074(i32 25)
  store i32 %v1_129f8, i32* @r5, align 4
  %v3_12a08 = call i32 @function_12cd8(i32 %v1_129f8, i32 ptrtoint (i32* @global_var_165d0.795 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1f3ec.796 to i8*), align 4
  %v0_12a18 = load i32, i32* @r5, align 4
  store i32 %v0_12a18, i32* @global_var_1f3e8.797, align 4
  %v0_12a1c = load i32, i32* @r6, align 4
  %v1_12a1c = trunc i32 %v0_12a1c to i8
  store i8 %v1_12a1c, i8* bitcast (i32* @global_var_1f3ed.798 to i8*), align 4
  %v1_12a20 = call i32 @function_14074(i32 115)
  store i32 115, i32* @r5, align 4
  store i32 %v1_12a20, i32* @r7, align 4
  %v3_12a34 = call i32 @function_12cd8(i32 %v1_12a20, i32 ptrtoint (i32* @global_var_165ec.800 to i32), i32 115)
  %v0_12a38 = load i32, i32* @r5, align 4
  %v0_12a3c = load i32, i32* @r7, align 4
  store i32 %v0_12a3c, i32* @global_var_1f3f0.801, align 4
  %v1_12a40 = trunc i32 %v0_12a38 to i8
  store i8 %v1_12a40, i8* bitcast (i32* @global_var_1f3f4.802 to i8*), align 4
  %v0_12a44 = load i32, i32* @r6, align 4
  %v1_12a44 = trunc i32 %v0_12a44 to i8
  store i8 %v1_12a44, i8* bitcast (i32* @global_var_1f3f5.803 to i8*), align 4
  %v1_12a48 = call i32 @function_14074(i32 %v0_12a38)
  %v0_12a4c = load i32, i32* @r5, align 4
  store i32 %v1_12a48, i32* @r7, align 4
  %v3_12a58 = call i32 @function_12cd8(i32 %v1_12a48, i32 ptrtoint (i32* @global_var_16660.805 to i32), i32 %v0_12a4c)
  %v0_12a60 = load i32, i32* @r7, align 4
  store i32 %v0_12a60, i32* @global_var_1f3f8.806, align 4
  %v0_12a64 = load i32, i32* @r5, align 4
  %v1_12a64 = trunc i32 %v0_12a64 to i8
  store i8 %v1_12a64, i8* bitcast (i32* @global_var_1f3fc.807 to i8*), align 4
  %v0_12a68 = load i32, i32* @r6, align 4
  %v1_12a68 = trunc i32 %v0_12a68 to i8
  store i8 %v1_12a68, i8* bitcast (i32* @global_var_1f3fd.808 to i8*), align 4
  %v1_12a6c = call i32 @function_14074(i32 79)
  store i32 %v1_12a6c, i32* @r5, align 4
  %v3_12a7c = call i32 @function_12cd8(i32 %v1_12a6c, i32 ptrtoint (i32* @global_var_166d4.810 to i32), i32 79)
  store i8 79, i8* bitcast (i32* @global_var_1f404.811 to i8*), align 4
  %v0_12a8c = load i32, i32* @r5, align 4
  store i32 %v0_12a8c, i32* @global_var_1f400.812, align 4
  %v0_12a90 = load i32, i32* @r6, align 4
  %v1_12a90 = trunc i32 %v0_12a90 to i8
  store i8 %v1_12a90, i8* bitcast (i32* @global_var_1f405.813 to i8*), align 4
  %v1_12a94 = call i32 @function_14074(i32 114)
  store i32 114, i32* @r5, align 4
  store i32 %v1_12a94, i32* @r7, align 4
  %v3_12aa8 = call i32 @function_12cd8(i32 %v1_12a94, i32 ptrtoint (i32* @global_var_16724.815 to i32), i32 114)
  %v0_12aac = load i32, i32* @r5, align 4
  %v0_12ab0 = load i32, i32* @r7, align 4
  store i32 %v0_12ab0, i32* @global_var_1f408.816, align 4
  %v1_12ab4 = trunc i32 %v0_12aac to i8
  store i8 %v1_12ab4, i8* bitcast (i32* @global_var_1f40c.817 to i8*), align 4
  %v0_12ab8 = load i32, i32* @r6, align 4
  %v1_12ab8 = trunc i32 %v0_12ab8 to i8
  store i8 %v1_12ab8, i8* bitcast (i32* @global_var_1f40d.818 to i8*), align 4
  %v1_12abc = call i32 @function_14074(i32 %v0_12aac)
  %v0_12ac0 = load i32, i32* @r5, align 4
  store i32 %v1_12abc, i32* @r7, align 4
  %v3_12acc = call i32 @function_12cd8(i32 %v1_12abc, i32 ptrtoint (i32* @global_var_16798.820 to i32), i32 %v0_12ac0)
  %v0_12ad0 = load i32, i32* %sl.global-to-local, align 4
  %v0_12ad4 = load i32, i32* @r5, align 4
  %v1_12ad4 = trunc i32 %v0_12ad4 to i8
  store i8 %v1_12ad4, i8* bitcast (i32* @global_var_1f414.821 to i8*), align 4
  %v0_12ad8 = load i32, i32* @r7, align 4
  store i32 %v0_12ad8, i32* @global_var_1f410.822, align 4
  %v0_12adc = load i32, i32* @r6, align 4
  %v1_12adc = trunc i32 %v0_12adc to i8
  store i8 %v1_12adc, i8* bitcast (i32* @global_var_1f415.823 to i8*), align 4
  %v1_12ae0 = call i32 @function_14074(i32 %v0_12ad0)
  %v0_12ae8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_12ae0, i32* @r5, align 4
  %v3_12af0 = call i32 @function_12cd8(i32 %v1_12ae0, i32 ptrtoint (i32* @global_var_1680c.825 to i32), i32 %v0_12ae8)
  %v0_12af8 = load i32, i32* @r5, align 4
  store i32 %v0_12af8, i32* @global_var_1f418.826, align 4
  %v1_12afc = trunc i32 %v0_12ae8 to i8
  store i8 %v1_12afc, i8* bitcast (i32* @global_var_1f41c.827 to i8*), align 4
  %v0_12b00 = load i32, i32* @r6, align 4
  %v1_12b00 = trunc i32 %v0_12b00 to i8
  store i8 %v1_12b00, i8* bitcast (i32* @global_var_1f41d.828 to i8*), align 4
  %v1_12b04 = call i32 @function_14074(i32 19)
  store i32 %v1_12b04, i32* @r5, align 4
  %v3_12b14 = call i32 @function_12cd8(i32 %v1_12b04, i32 ptrtoint (i32* @global_var_163f0.642 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1f424.829 to i8*), align 4
  %v0_12b24 = load i32, i32* @r5, align 4
  store i32 %v0_12b24, i32* @global_var_1f420.830, align 4
  %v0_12b28 = load i32, i32* @r6, align 4
  %v1_12b28 = trunc i32 %v0_12b28 to i8
  store i8 %v1_12b28, i8* bitcast (i32* @global_var_1f425.831 to i8*), align 4
  %v1_12b2c = call i32 @function_14074(i32 23)
  store i32 %v1_12b2c, i32* @r5, align 4
  %v3_12b3c = call i32 @function_12cd8(i32 %v1_12b2c, i32 ptrtoint (i32* @global_var_16824.833 to i32), i32 23)
  %v0_12b44 = load i32, i32* %r8.global-to-local, align 4
  %v0_12b48 = load i32, i32* @r5, align 4
  store i32 %v0_12b48, i32* @global_var_1f428.834, align 4
  store i8 23, i8* bitcast (i32* @global_var_1f42c.835 to i8*), align 4
  %v0_12b50 = load i32, i32* @r6, align 4
  %v1_12b50 = trunc i32 %v0_12b50 to i8
  store i8 %v1_12b50, i8* bitcast (i32* @global_var_1f42d.836 to i8*), align 4
  %v1_12b54 = call i32 @function_14074(i32 %v0_12b44)
  %v0_12b5c = load i32, i32* %r8.global-to-local, align 4
  %v4_12b64 = call i32 @function_12cd8(i32 %v1_12b54, i32 ptrtoint ([12 x i8]* @global_var_1683c.838 to i32), i32 %v0_12b5c)
  %v0_12b68 = load i32, i32* @r6, align 4
  %v1_12b68 = trunc i32 %v0_12b68 to i8
  store i8 %v1_12b68, i8* bitcast (i32* @global_var_1f435.839 to i8*), align 4
  store i32 %v1_12b54, i32* @global_var_1f430.840, align 4
  %v1_12b70 = trunc i32 %v0_12b5c to i8
  store i8 %v1_12b70, i8* bitcast (i32* @global_var_1f434.841 to i8*), align 4
  %v2_12b74 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12b74, i32* @r4, align 4
  store i32 %v6_122ac, i32* @r5, align 4
  store i32 %v9_122ac, i32* @r6, align 4
  store i32 %v12_122ac, i32* @r7, align 4
  ret i32 %v4_12b64

; uselistorder directives
  uselistorder i32 %v1_12ae0, { 1, 0 }
  uselistorder i32 %v1_12abc, { 1, 0 }
  uselistorder i32 %v1_12a94, { 1, 0 }
  uselistorder i32 %v1_12a48, { 1, 0 }
  uselistorder i32 %v1_12a20, { 1, 0 }
  uselistorder i32 %v1_129ac, { 1, 0 }
  uselistorder i32 %v1_12988, { 1, 0 }
  uselistorder i32 %v1_12964, { 1, 0 }
  uselistorder i32 %v1_128f0, { 1, 0 }
  uselistorder i32 %v1_128a4, { 1, 0 }
  uselistorder i32 %v1_1287c, { 1, 0 }
  uselistorder i32 %v1_127b4, { 1, 0 }
  uselistorder i32 %v1_12740, { 1, 0 }
  uselistorder i32 %v1_126f4, { 1, 0 }
  uselistorder i32 %v1_126d0, { 1, 0 }
  uselistorder i32 %v1_12684, { 1, 0 }
  uselistorder i32 %v1_12638, { 1, 0 }
  uselistorder i32 %v0_12618, { 1, 0, 2 }
  uselistorder i32 %v1_12614, { 1, 0 }
  uselistorder i32 %v1_125f0, { 1, 0 }
  uselistorder i32 %v1_125a0, { 1, 0 }
  uselistorder i32 %v1_1252c, { 1, 0 }
  uselistorder i32 %v1_12508, { 1, 0 }
  uselistorder i32 %v1_12490, { 1, 0 }
  uselistorder i32 %v1_1246c, { 1, 0 }
  uselistorder i32 %v1_12420, { 1, 0 }
  uselistorder i32 %v1_123f8, { 1, 0 }
  uselistorder i32 %v1_123d0, { 1, 0 }
  uselistorder i32 %v1_123a8, { 1, 0 }
  uselistorder i32 %v1_12330, { 1, 0 }
  uselistorder i32 %v1_122e4, { 1, 0 }
  uselistorder i32 %v1_122b4, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 6, 7, 8, 3, 0, 4, 2, 1, 5 }
  uselistorder i32* %sb.global-to-local, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32* %r8.global-to-local, { 7, 8, 9, 10, 11, 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32* %fp.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 114, { 1, 2, 0 }
  uselistorder i32 115, { 1, 2, 0 }
  uselistorder i8 17, { 1, 0, 2, 3 }
  uselistorder i8 3, { 2, 1, 0 }
  uselistorder i8 16, { 15, 16, 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i8 6, { 0, 7, 5, 8, 6, 9, 1, 10, 11, 2, 3, 4 }
  uselistorder i8 4, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 5, { 11, 12, 13, 0, 1, 14, 2, 3, 4, 5, 6, 7, 8, 10, 15, 9 }
  uselistorder i8 7, { 0, 5, 6, 7, 8, 1, 2, 3, 4 }
  uselistorder i32 (i32, i32, i32)* @function_12cd8, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1f260.549 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_12c5c(i8* %arg1) local_unnamed_addr {
dec_label_pc_12c5c:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_12c60 = load i8, i8* %arg1, align 1
  %v4_12c60 = zext i8 %v3_12c60 to i32
  %v2_12c64 = icmp eq i8 %v3_12c60, 0
  br i1 %v2_12c64, label %dec_label_pc_12c80, label %bb

dec_label_pc_12c80:                               ; preds = %dec_label_pc_12c70, %dec_label_pc_12c5c
  %merge = phi i32 [ %v4_12c60, %dec_label_pc_12c5c ], [ %v1_12c70, %dec_label_pc_12c70 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_12c5c
  br label %dec_label_pc_12c70

dec_label_pc_12c70:                               ; preds = %dec_label_pc_12c70, %bb
  %v0_12c70 = phi i32 [ %v1_12c70, %dec_label_pc_12c70 ], [ 0, %bb ]
  %v1_12c70 = add i32 %v0_12c70, 1
  %v2_12c74 = add i32 %v1_12c70, %tmp
  %v3_12c74 = inttoptr i32 %v2_12c74 to i8*
  %v4_12c74 = load i8, i8* %v3_12c74, align 1
  %v2_12c78 = icmp eq i8 %v4_12c74, 0
  br i1 %v2_12c78, label %dec_label_pc_12c80, label %dec_label_pc_12c70

; uselistorder directives
  uselistorder i32 %v1_12c70, { 1, 0, 2 }
}

define i32 @function_12c84(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12c84:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12c84 = load i8, i8* %arg1, align 1
  %v3_12c84 = zext i8 %v2_12c84 to i32
  %v2_12c88 = icmp eq i8 %v2_12c84, 0
  br i1 %v2_12c88, label %dec_label_pc_12ccc, label %dec_label_pc_12c90

dec_label_pc_12c90:                               ; preds = %dec_label_pc_12c84
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12c94

dec_label_pc_12c94:                               ; preds = %dec_label_pc_12c94, %dec_label_pc_12c90
  %v0_12c94 = phi i32 [ %v1_12c94, %dec_label_pc_12c94 ], [ 0, %dec_label_pc_12c90 ]
  %v1_12c94 = add i32 %v0_12c94, 1
  store i32 %v1_12c94, i32* %ip.global-to-local, align 4
  %v2_12c98 = add i32 %v1_12c94, %tmp
  %v3_12c98 = inttoptr i32 %v2_12c98 to i8*
  %v4_12c98 = load i8, i8* %v3_12c98, align 1
  %v2_12c9c = icmp eq i8 %v4_12c98, 0
  br i1 %v2_12c9c, label %dec_label_pc_12ca4, label %dec_label_pc_12c94

dec_label_pc_12ca4:                               ; preds = %dec_label_pc_12c94
  %v7_12ca4 = icmp eq i32 %v0_12c94, -2
  br i1 %v7_12ca4, label %dec_label_pc_12cc4, label %dec_label_pc_12cb0.preheader

dec_label_pc_12cb0.preheader:                     ; preds = %dec_label_pc_12ca4, %dec_label_pc_12ccc
  %storemerge = phi i32 [ %v3_12c84, %dec_label_pc_12ccc ], [ %v1_12c94, %dec_label_pc_12ca4 ]
  %v2_12cbc.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12cb0

dec_label_pc_12cb0:                               ; preds = %dec_label_pc_12cb0.dec_label_pc_12cb0_crit_edge, %dec_label_pc_12cb0.preheader
  %v2_12cbc = phi i32 [ %v5_12cbc, %dec_label_pc_12cb0.dec_label_pc_12cb0_crit_edge ], [ %v2_12cbc.pre, %dec_label_pc_12cb0.preheader ]
  %v0_12cb4 = phi i32 [ %v0_12cb4.pre, %dec_label_pc_12cb0.dec_label_pc_12cb0_crit_edge ], [ %tmp, %dec_label_pc_12cb0.preheader ]
  %v0_12cb0 = phi i32 [ %v0_12cb0.pre, %dec_label_pc_12cb0.dec_label_pc_12cb0_crit_edge ], [ %storemerge, %dec_label_pc_12cb0.preheader ]
  %v1_12cb0 = add i32 %v0_12cb0, -1
  store i32 %v1_12cb0, i32* @r2, align 4
  %v1_12cb4 = inttoptr i32 %v0_12cb4 to i8*
  %v2_12cb4 = load i8, i8* %v1_12cb4, align 1
  %v5_12cb4 = add i32 %v0_12cb4, 1
  store i32 %v5_12cb4, i32* %r1.global-to-local, align 4
  %v3_12cb8 = icmp eq i32 %v0_12cb0, 0
  %v3_12cbc = inttoptr i32 %v2_12cbc to i8*
  store i8 %v2_12cb4, i8* %v3_12cbc, align 1
  %v4_12cbc = load i32, i32* @r0, align 4
  %v5_12cbc = add i32 %v4_12cbc, 1
  store i32 %v5_12cbc, i32* @r0, align 4
  br i1 %v3_12cb8, label %dec_label_pc_12cc4.loopexit, label %dec_label_pc_12cb0.dec_label_pc_12cb0_crit_edge

dec_label_pc_12cb0.dec_label_pc_12cb0_crit_edge:  ; preds = %dec_label_pc_12cb0
  %v0_12cb0.pre = load i32, i32* @r2, align 4
  %v0_12cb4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12cb0

dec_label_pc_12cc4.loopexit:                      ; preds = %dec_label_pc_12cb0
  %v0_12cc4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12cc4

dec_label_pc_12cc4:                               ; preds = %dec_label_pc_12cc4.loopexit, %dec_label_pc_12ca4
  %v0_12cc4 = phi i32 [ %v0_12cc4.pre, %dec_label_pc_12cc4.loopexit ], [ %v1_12c94, %dec_label_pc_12ca4 ]
  ret i32 %v0_12cc4

dec_label_pc_12ccc:                               ; preds = %dec_label_pc_12c84
  store i32 %v3_12c84, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12cb0.preheader

; uselistorder directives
  uselistorder i32 %v5_12cbc, { 1, 0 }
  uselistorder i32 %v0_12cb4, { 1, 0 }
  uselistorder i32 %v1_12c94, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_12c84, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12cb0.preheader, { 1, 0 }
}

define i32 @function_12cd8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12cd8:
  %v2_12cd8 = icmp eq i32 %arg3, 0
  br i1 %v2_12cd8, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12ce4, %dec_label_pc_12cd8
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12cd8
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_12ce4

dec_label_pc_12ce4:                               ; preds = %dec_label_pc_12ce4, %bb
  %v0_12ce4 = phi i32 [ %v1_12cec, %dec_label_pc_12ce4 ], [ 0, %bb ]
  %v2_12ce4 = add i32 %v0_12ce4, %arg2
  %v3_12ce4 = inttoptr i32 %v2_12ce4 to i8*
  %v4_12ce4 = load i8, i8* %v3_12ce4, align 1
  %v4_12ce8 = add i32 %v0_12ce4, %arg1
  %v5_12ce8 = inttoptr i32 %v4_12ce8 to i8*
  store i8 %v4_12ce4, i8* %v5_12ce8, align 1
  %v0_12cec = load i32, i32* @ip, align 4
  %v1_12cec = add i32 %v0_12cec, 1
  store i32 %v1_12cec, i32* @ip, align 4
  %v9_12cf0 = icmp eq i32 %v1_12cec, %arg3
  br i1 %v9_12cf0, label %.loopexit, label %dec_label_pc_12ce4

; uselistorder directives
  uselistorder i32 %v1_12cec, { 1, 2, 0 }
}

define i32 @function_12cfc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12cfc:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_12cfc = icmp eq i32 %arg2, 0
  br i1 %v2_12cfc, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12d0c, %dec_label_pc_12cfc
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12cfc
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d0c

dec_label_pc_12d0c:                               ; preds = %dec_label_pc_12d0c.dec_label_pc_12d0c_crit_edge, %bb
  %v2_12d0c = phi i32 [ %v1_12d10, %dec_label_pc_12d0c.dec_label_pc_12d0c_crit_edge ], [ 0, %bb ]
  %v0_12d0c.off0 = phi i8 [ %extract.t, %dec_label_pc_12d0c.dec_label_pc_12d0c_crit_edge ], [ 0, %bb ]
  %v4_12d0c = add i32 %v2_12d0c, %arg1
  %v5_12d0c = inttoptr i32 %v4_12d0c to i8*
  store i8 %v0_12d0c.off0, i8* %v5_12d0c, align 1
  %v0_12d10 = load i32, i32* %r3.global-to-local, align 4
  %v1_12d10 = add i32 %v0_12d10, 1
  store i32 %v1_12d10, i32* %r3.global-to-local, align 4
  %v9_12d14 = icmp eq i32 %v1_12d10, %arg2
  br i1 %v9_12d14, label %.loopexit, label %dec_label_pc_12d0c.dec_label_pc_12d0c_crit_edge

dec_label_pc_12d0c.dec_label_pc_12d0c_crit_edge:  ; preds = %dec_label_pc_12d0c
  %v0_12d0c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_12d0c.pre to i8
  br label %dec_label_pc_12d0c

; uselistorder directives
  uselistorder i32 %v1_12d10, { 1, 2, 0 }
}

define i32 @function_12d20(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12d20:
  store i32 %arg4, i32* @lr, align 4
  %v7_12d34 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_12d34, label %dec_label_pc_12d38, label %dec_label_pc_12d40

dec_label_pc_12d38:                               ; preds = %dec_label_pc_12d54, %dec_label_pc_12d20, %dec_label_pc_12d40
  ret i32 -1

dec_label_pc_12d40:                               ; preds = %dec_label_pc_12d20
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_12d38, label %dec_label_pc_12d48

dec_label_pc_12d48:                               ; preds = %dec_label_pc_12d40
  br label %dec_label_pc_12d60

dec_label_pc_12d54:                               ; preds = %dec_label_pc_12d78, %dec_label_pc_12d60
  %v1_12d54 = add i32 %v0_12d80, 1
  %v9_12d58 = icmp eq i32 %v1_12d54, %arg2
  br i1 %v9_12d58, label %dec_label_pc_12d38, label %dec_label_pc_12d60

dec_label_pc_12d60:                               ; preds = %dec_label_pc_12d54, %dec_label_pc_12d48
  %v0_12d80 = phi i32 [ %v1_12d54, %dec_label_pc_12d54 ], [ 0, %dec_label_pc_12d48 ]
  %v0_12d6c = phi i32 [ %v1_12d6c., %dec_label_pc_12d54 ], [ 0, %dec_label_pc_12d48 ]
  %v2_12d60 = add i32 %v0_12d6c, %arg3
  %v3_12d60 = inttoptr i32 %v2_12d60 to i8*
  %v4_12d60 = load i8, i8* %v3_12d60, align 1
  %v2_12d64 = add i32 %v0_12d80, %arg1
  %v3_12d64 = inttoptr i32 %v2_12d64 to i8*
  %v4_12d64 = load i8, i8* %v3_12d64, align 1
  %v9_12d68 = icmp eq i8 %v4_12d64, %v4_12d60
  %v1_12d6c = add i32 %v0_12d6c, 1
  %v1_12d6c. = select i1 %v9_12d68, i32 %v1_12d6c, i32 0
  br i1 %v9_12d68, label %dec_label_pc_12d78, label %dec_label_pc_12d54

dec_label_pc_12d78:                               ; preds = %dec_label_pc_12d60
  %v9_12d78 = icmp eq i32 %v1_12d6c., %arg4
  br i1 %v9_12d78, label %dec_label_pc_12d80, label %dec_label_pc_12d54

dec_label_pc_12d80:                               ; preds = %dec_label_pc_12d78
  %v1_12d80 = add i32 %v0_12d80, 1
  ret i32 %v1_12d80

; uselistorder directives
  uselistorder i1 %v9_12d68, { 1, 0 }
  uselistorder i32 %v0_12d6c, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12d38, { 0, 2, 1 }
}

define i32 @function_12d88(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d88:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_12d88 = load i32, i32* @r4, align 4
  store i32 %v3_12d88, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12d94

dec_label_pc_12d94:                               ; preds = %.thread, %dec_label_pc_12dac, %bb, %dec_label_pc_12d88
  %v0_12d94 = phi i32 [ %tmp, %dec_label_pc_12d88 ], [ %v5_12d94, %bb ], [ %v5_12d94, %dec_label_pc_12dac ], [ %v5_12d94, %.thread ]
  %v1_12d94 = inttoptr i32 %v0_12d94 to i8*
  %v2_12d94 = load i8, i8* %v1_12d94, align 1
  %v3_12d94 = zext i8 %v2_12d94 to i32
  %v5_12d94 = add i32 %v0_12d94, 1
  store i32 %v5_12d94, i32* %r5.global-to-local, align 4
  %v7_12d9c = icmp eq i8 %v2_12d94, 9
  br i1 %v7_12d9c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12d94
  store i32 %v3_12d94, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12d94

bb:                                               ; preds = %dec_label_pc_12d94
  %v8_12da0 = icmp eq i8 %v2_12d94, 32
  store i32 %v3_12d94, i32* %r4.global-to-local, align 4
  br i1 %v8_12da0, label %dec_label_pc_12d94, label %dec_label_pc_12dac

dec_label_pc_12dac:                               ; preds = %bb
  %v7_12dac = icmp eq i8 %v2_12d94, 10
  br i1 %v7_12dac, label %dec_label_pc_12d94, label %dec_label_pc_12db4

dec_label_pc_12db4:                               ; preds = %dec_label_pc_12dac
  %v7_12db4 = icmp eq i8 %v2_12d94, 45
  br i1 %v7_12db4, label %dec_label_pc_12e94, label %dec_label_pc_12dbc

dec_label_pc_12dbc:                               ; preds = %dec_label_pc_12db4
  %v7_12dbc = icmp eq i8 %v2_12d94, 43
  br i1 %v7_12dbc, label %bb48, label %dec_label_pc_12dcc

bb48:                                             ; preds = %dec_label_pc_12dbc
  %v2_12dc0 = inttoptr i32 %v5_12d94 to i8*
  %v3_12dc0 = load i8, i8* %v2_12dc0, align 1
  %v4_12dc0 = zext i8 %v3_12dc0 to i32
  store i32 %v4_12dc0, i32* %r4.global-to-local, align 4
  %v6_12dc0 = add i32 %v0_12d94, 2
  store i32 %v6_12dc0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12dcc

dec_label_pc_12dcc:                               ; preds = %bb48, %dec_label_pc_12dbc, %dec_label_pc_12e94
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_12e94 ], [ 2147483647, %dec_label_pc_12dbc ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_12e94 ], [ 0, %dec_label_pc_12dbc ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_12dd4 = call i32 @function_13378(i32 %storemerge1, i32 %arg2)
  %v0_12dd8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12dd8, i32* @r1, align 4
  store i32 %v2_12dd4, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_12de4 = call i32 @function_13268()
  store i32 %v0_12de4, i32* @lr, align 4
  %v0_12df4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12df4

dec_label_pc_12df4:                               ; preds = %.thread8, %dec_label_pc_12dcc
  %v2_12e7011 = phi i32 [ %v1_12e8c26, %.thread8 ], [ 0, %dec_label_pc_12dcc ]
  %v1_12e4c = phi i32 [ %v0_12e8024, %.thread8 ], [ 0, %dec_label_pc_12dcc ]
  %v1_12e34 = phi i32 [ %v3_12e78, %.thread8 ], [ %v0_12df4.pre, %dec_label_pc_12dcc ]
  %v1_12df4 = urem i32 %v1_12e34, 256
  %v1_12df8 = add nsw i32 %v1_12df4, -48
  %v1_12e00 = add nsw i32 %v1_12df4, -97
  %v1_12e04 = add i32 %v1_12e34, -48
  %v1_12e08 = add nsw i32 %v1_12df4, -65
  %tmp71 = icmp ult i32 %v1_12df8, 10
  br i1 %tmp71, label %dec_label_pc_12e38, label %dec_label_pc_12e10

dec_label_pc_12e10:                               ; preds = %dec_label_pc_12df4
  %v2_12e10 = icmp ugt i32 %v1_12e08, 24
  %v7_12e10 = icmp eq i32 %v1_12e08, 25
  %v2_12e14 = xor i1 %v7_12e10, true
  %v3_12e14 = and i1 %v2_12e10, %v2_12e14
  br i1 %v3_12e14, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_12e10
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_12e10, %bb49
  %v0_12e2820 = phi i32 [ %v1_12e04, %dec_label_pc_12e10 ], [ 0, %bb49 ]
  %v2_12e18 = xor i1 %v2_12e10, true
  %v3_12e18 = or i1 %v7_12e10, %v2_12e18
  br i1 %v3_12e18, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_12e28 = phi i32 [ %v0_12e2820, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_12e14, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_12e20 = icmp ugt i32 %v1_12e00, 24
  %v11_12e20 = icmp eq i32 %v1_12e00, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_12e24 = phi i1 [ %v7_12e10, %bb52 ], [ %v11_12e20, %bb53 ]
  %v0_12e24 = phi i1 [ %v2_12e10, %bb52 ], [ %v6_12e20, %bb53 ]
  %v2_12e24 = xor i1 %v1_12e24, true
  %v3_12e24 = and i1 %v0_12e24, %v2_12e24
  br i1 %v3_12e24, label %dec_label_pc_12e80, label %dec_label_pc_12e28

dec_label_pc_12e28:                               ; preds = %bb54
  %v2_12e28 = icmp eq i32 %v0_12e28, 0
  %. = select i1 %v2_12e28, i32 87, i32 55
  %v2_12e34 = sub i32 %v1_12e34, %.
  br label %dec_label_pc_12e38

dec_label_pc_12e38:                               ; preds = %dec_label_pc_12df4, %dec_label_pc_12e28
  %v0_12e4c34 = phi i32 [ %v1_12e08, %dec_label_pc_12df4 ], [ %., %dec_label_pc_12e28 ]
  %v3_12e7012 = phi i32 [ %v1_12e04, %dec_label_pc_12df4 ], [ %v2_12e34, %dec_label_pc_12e28 ]
  %v1_12e38 = load i32, i32* %r6.global-to-local, align 4
  %v6_12e3c = icmp slt i32 %v3_12e7012, %v1_12e38
  br i1 %v6_12e3c, label %dec_label_pc_12e40, label %dec_label_pc_12e80

dec_label_pc_12e40:                               ; preds = %dec_label_pc_12e38
  %v3_12e40 = icmp uge i32 %v2_12e7011, %v0_12de4
  %v9_12e40 = icmp eq i32 %v2_12e7011, %v0_12de4
  %v2_12e44 = xor i1 %v3_12e40, true
  %v3_12e44 = or i1 %v9_12e40, %v2_12e44
  br i1 %v3_12e44, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12e40
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12e40, %bb57
  %v0_12e4c33 = phi i32 [ %v0_12e4c34, %dec_label_pc_12e40 ], [ 0, %bb57 ]
  %v2_12e48 = xor i1 %v9_12e40, true
  %v3_12e48 = and i1 %v3_12e40, %v2_12e48
  br i1 %v3_12e48, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_12e4c = phi i32 [ %v0_12e4c33, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_12e4c, 0
  %v4_12e4c = zext i1 %tmp72 to i32
  %v5_12e4c = or i32 %v0_12e4c, %v4_12e4c
  %v7_12e4c = icmp eq i32 %v5_12e4c, 0
  br i1 %v7_12e4c, label %dec_label_pc_12e58, label %.thread8

dec_label_pc_12e58:                               ; preds = %bb60
  %v1_12e64 = load i32, i32* %r8.global-to-local, align 4
  %v7_12e68 = icmp sgt i32 %v3_12e7012, %v1_12e64
  br i1 %v7_12e68, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_12e58
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_12e58
  %v2_12e6c = icmp eq i1 %v9_12e40, false
  br i1 %v2_12e6c, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_12e7013 = mul i32 %v1_12e38, %v2_12e7011
  %v5_12e7014 = add i32 %v4_12e7013, %v3_12e7012
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_12e8c26 = phi i32 [ %v2_12e7011, %bb63 ], [ %v2_12e7011, %bb60 ], [ %v5_12e7014, %bb64 ]
  %v0_12e8024 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_12e78 = load i32, i32* %r5.global-to-local, align 4
  %v1_12e78 = inttoptr i32 %v0_12e78 to i8*
  %v2_12e78 = load i8, i8* %v1_12e78, align 1
  %v3_12e78 = zext i8 %v2_12e78 to i32
  store i32 %v3_12e78, i32* %r4.global-to-local, align 4
  %v5_12e78 = add i32 %v0_12e78, 1
  store i32 %v5_12e78, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12df4

dec_label_pc_12e80:                               ; preds = %dec_label_pc_12e38, %bb54
  %v1_12e80 = icmp slt i32 %v1_12e4c, 0
  %v0_12ea4 = load i32, i32* %sl.global-to-local, align 4
  %v2_12ea4 = icmp eq i32 %v0_12ea4, 0
  br i1 %v1_12e80, label %dec_label_pc_12ea4, label %dec_label_pc_12e88

dec_label_pc_12e88:                               ; preds = %dec_label_pc_12e80
  br i1 %v2_12ea4, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_12e88
  %v2_12e8c = sub i32 0, %v2_12e7011
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12e88, %bb65
  %v23_12e90 = phi i32 [ %v2_12e7011, %dec_label_pc_12e88 ], [ %v2_12e8c, %bb65 ]
  %v2_12e90 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12e90, i32* @r4, align 4
  ret i32 %v23_12e90

dec_label_pc_12e94:                               ; preds = %dec_label_pc_12db4
  %v1_12e94 = inttoptr i32 %v5_12d94 to i8*
  %v2_12e94 = load i8, i8* %v1_12e94, align 1
  %v3_12e94 = zext i8 %v2_12e94 to i32
  store i32 %v3_12e94, i32* %r4.global-to-local, align 4
  %v5_12e94 = add i32 %v0_12d94, 2
  store i32 %v5_12e94, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12dcc

dec_label_pc_12ea4:                               ; preds = %dec_label_pc_12e80
  %.70 = select i1 %v2_12ea4, i32 2147483647, i32 -2147483648
  %v2_12eb0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12eb0, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_12e78, { 1, 0 }
  uselistorder i1 %v9_12e40, { 1, 0, 2 }
  uselistorder i1 %v3_12e40, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_12e10, { 1, 2, 0 }
  uselistorder i1 %v2_12e10, { 1, 0, 2 }
  uselistorder i32 %v1_12df4, { 1, 2, 0 }
  uselistorder i32 %v1_12e34, { 1, 2, 0 }
  uselistorder i32 %v1_12e4c, { 1, 0 }
  uselistorder i32 %v2_12e7011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_12de4, { 1, 0, 2 }
  uselistorder i32 %v5_12d94, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_12d94, { 1, 0 }
  uselistorder i32 %v0_12d94, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 32, { 1, 7, 2, 3, 0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i8 9, { 7, 0, 5, 1, 2, 6, 3, 4 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_12e38, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_12dcc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12d94, { 1, 2, 0, 3 }
}

define i32 @function_12eb4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12eb4:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_12eb4 = load i32, i32* @r4, align 4
  store i32 %v3_12eb4, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12ecc

dec_label_pc_12ecc:                               ; preds = %dec_label_pc_12ef8.dec_label_pc_12ecc_crit_edge, %dec_label_pc_12eb4
  %v0_12ed0 = phi i32 [ %v0_12ed0.pre, %dec_label_pc_12ef8.dec_label_pc_12ecc_crit_edge ], [ %arg3, %dec_label_pc_12eb4 ]
  %v0_12ecc = phi i32 [ %v1_12ee4, %dec_label_pc_12ef8.dec_label_pc_12ecc_crit_edge ], [ %tmp, %dec_label_pc_12eb4 ]
  %tmp12 = inttoptr i32 %v0_12ecc to i32*
  %v5_12ed8 = call i32 @function_137b8(i32 %v0_12ed0, i32* %tmp12, i32 1)
  %v7_12edc = icmp eq i32 %v5_12ed8, 1
  %v0_12ee0 = load i32, i32* @r4, align 4
  %v1_12ee4 = add i32 %v0_12ee0, 1
  store i32 %v1_12ee4, i32* @r4, align 4
  %v0_12eec = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_12edc, label %dec_label_pc_12eec, label %dec_label_pc_12f04

dec_label_pc_12eec:                               ; preds = %dec_label_pc_12ecc
  %v1_12eec = add i32 %v0_12eec, 1
  store i32 %v1_12eec, i32* %r5.global-to-local, align 4
  %v0_12ef0 = load i32, i32* %r7.global-to-local, align 4
  %v7_12ef4 = icmp sgt i32 %v0_12ef0, %v1_12eec
  br i1 %v7_12ef4, label %dec_label_pc_12ef8, label %dec_label_pc_12f04

dec_label_pc_12ef8:                               ; preds = %dec_label_pc_12eec
  %v1_12ef8 = inttoptr i32 %v0_12ee0 to i8*
  %v2_12ef8 = load i8, i8* %v1_12ef8, align 1
  %v7_12efc = icmp eq i8 %v2_12ef8, 10
  br i1 %v7_12efc, label %dec_label_pc_12f04, label %dec_label_pc_12ef8.dec_label_pc_12ecc_crit_edge

dec_label_pc_12ef8.dec_label_pc_12ecc_crit_edge:  ; preds = %dec_label_pc_12ef8
  %v0_12ed0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12ecc

dec_label_pc_12f04:                               ; preds = %dec_label_pc_12ecc, %dec_label_pc_12ef8, %dec_label_pc_12eec
  %v0_12f04 = phi i32 [ %v1_12eec, %dec_label_pc_12ef8 ], [ %v1_12eec, %dec_label_pc_12eec ], [ %v0_12eec, %dec_label_pc_12ecc ]
  %v2_12f04 = icmp eq i32 %v0_12f04, 0
  %v1_12f08 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_12f04, i32 0, i32 %v1_12f08
  %v2_12f10 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12f10, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_12ee4, { 1, 0 }
  uselistorder i8 10, { 6, 0, 7, 8, 9, 1, 2, 3, 4, 5 }
  uselistorder i32 (i32, i32*, i32)* @function_137b8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12f04, { 1, 2, 0 }
}

define i32 @function_12f14() local_unnamed_addr {
dec_label_pc_12f14:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12f14 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_12f24 = call i32 @function_13b98()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_12f2c = inttoptr i32 %v0_12f24 to i32*
  store i32 0, i32* %v2_12f2c, align 4
  %v0_12f38 = load i32, i32* %r6.global-to-local, align 4
  %v3_12f3c = call i32 @function_13edc(i32 2, i32 2, i32 %v0_12f38)
  %v7_12f48 = icmp eq i32 %v3_12f3c, -1
  store i32 %v3_12f3c, i32* %r5.global-to-local, align 4
  %v2_12f54 = load i32, i32* @r4, align 4
  br i1 %v7_12f48, label %dec_label_pc_12fa4, label %dec_label_pc_12f68

dec_label_pc_12f68:                               ; preds = %dec_label_pc_12f14
  %v7_12f54 = shl i32 2056, %v2_12f54
  %v8_12f54 = or i32 %v7_12f54, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_12f84 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_12f84 = call i32 @function_13d38(i32 %v3_12f3c, %sockaddr* %v3_12f84, i32 %v2_12f54)
  %v2_12f8c = ptrtoint i32* %stack_var_-24 to i32
  %v0_12f90 = load i32, i32* %r5.global-to-local, align 4
  %v4_12f94 = call i32 @function_13d64(i32 %v0_12f90, %sockaddr* %v3_12f84, i32 %v2_12f8c)
  %v1_12f9c = call i32 @function_135f0(i32 %v0_12f90)
  br label %dec_label_pc_12fa4

dec_label_pc_12fa4:                               ; preds = %dec_label_pc_12f14, %dec_label_pc_12f68
  %v0_12fa4 = phi i32 [ %v0_12f38, %dec_label_pc_12f14 ], [ %v8_12f54, %dec_label_pc_12f68 ]
  store i32 %v3_12f14, i32* @r4, align 4
  ret i32 %v0_12fa4

; uselistorder directives
  uselistorder i32 %v3_12f3c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_13d38, { 6, 0, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_13edc, { 6, 18, 16, 17, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_12fa4, { 1, 0 }
}

define i32 @function_12fb0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12fb0:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_12fb4 = load i8, i8* %tmp, align 1
  %v2_12fb8 = icmp eq i8 %v3_12fb4, 0
  br i1 %v2_12fb8, label %bb, label %dec_label_pc_12fcc

bb:                                               ; preds = %dec_label_pc_12fb0
  %v4_12fb4 = zext i8 %v3_12fb4 to i32
  br label %dec_label_pc_12fe0

dec_label_pc_12fcc:                               ; preds = %dec_label_pc_12fb0
  br label %dec_label_pc_12fd0

dec_label_pc_12fd0:                               ; preds = %dec_label_pc_12fd0, %dec_label_pc_12fcc
  %v0_12fd0 = phi i32 [ %v1_12fd0, %dec_label_pc_12fd0 ], [ 0, %dec_label_pc_12fcc ]
  %v1_12fd0 = add i32 %v0_12fd0, 1
  %v2_12fd4 = add i32 %v1_12fd0, %arg2
  %v3_12fd4 = inttoptr i32 %v2_12fd4 to i8*
  %v4_12fd4 = load i8, i8* %v3_12fd4, align 1
  %v2_12fd8 = icmp eq i8 %v4_12fd4, 0
  br i1 %v2_12fd8, label %dec_label_pc_12fe0, label %dec_label_pc_12fd0

dec_label_pc_12fe0:                               ; preds = %dec_label_pc_12fd0, %bb
  %v0_1302418 = phi i32 [ %v4_12fb4, %bb ], [ %v1_12fd0, %dec_label_pc_12fd0 ]
  %v0_12fe81 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_12fe81, 1
  br i1 %tmp27, label %dec_label_pc_13034, label %dec_label_pc_12ff4

dec_label_pc_12ff4:                               ; preds = %dec_label_pc_12fe0, %dec_label_pc_12fe8.backedge
  %v0_12fec.in = phi i32 [ %v0_12fec, %dec_label_pc_12fe8.backedge ], [ %v0_12fe81, %dec_label_pc_12fe0 ]
  %v0_13018 = phi i32 [ %v1_13018., %dec_label_pc_12fe8.backedge ], [ 0, %dec_label_pc_12fe0 ]
  %v0_12ff4 = phi i32 [ %v5_12ff4, %dec_label_pc_12fe8.backedge ], [ %tmp20, %dec_label_pc_12fe0 ]
  %v0_12fec = add i32 %v0_12fec.in, -1
  %v1_12ff4 = inttoptr i32 %v0_12ff4 to i8*
  %v2_12ff4 = load i8, i8* %v1_12ff4, align 1
  %v3_12ff4 = zext i8 %v2_12ff4 to i32
  store i32 %v3_12ff4, i32* @lr, align 4
  %v5_12ff4 = add i32 %v0_12ff4, 1
  %v2_12ff8 = add i32 %v0_13018, %arg2
  %v3_12ff8 = inttoptr i32 %v2_12ff8 to i8*
  %v4_12ff8 = load i8, i8* %v3_12ff8, align 1
  %v6_12ff8 = zext i8 %v4_12ff8 to i32
  %v1_12ffc = add nsw i32 %v3_12ff4, -65
  %v1_13000 = add nsw i32 %v6_12ff8, -65
  %tmp35 = icmp ult i32 %v1_12ffc, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_12ff4
  %v5_13008 = or i32 %v3_12ff4, 96
  store i32 %v5_13008, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_12ff4, %bb28
  %v0_13014 = phi i32 [ %v3_12ff4, %dec_label_pc_12ff4 ], [ %v5_13008, %bb28 ]
  %tmp36 = icmp ult i32 %v1_13000, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_13010 = or i32 %v6_12ff8, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_13014 = phi i32 [ %v6_12ff8, %bb29 ], [ %v5_13010, %bb30 ]
  %v9_13014 = icmp eq i32 %v0_13014, %v1_13014
  %v1_13018 = add i32 %v0_13018, 1
  %v1_13018. = select i1 %v9_13014, i32 %v1_13018, i32 0
  br i1 %v9_13014, label %dec_label_pc_13024, label %dec_label_pc_12fe8.backedge

dec_label_pc_12fe8.backedge:                      ; preds = %bb31, %dec_label_pc_13024
  %tmp32 = icmp slt i32 %v0_12fec, 1
  br i1 %tmp32, label %dec_label_pc_13034, label %dec_label_pc_12ff4

dec_label_pc_13024:                               ; preds = %bb31
  %v9_13024 = icmp eq i32 %v0_1302418, %v1_13018.
  br i1 %v9_13024, label %dec_label_pc_1302c, label %dec_label_pc_12fe8.backedge

dec_label_pc_1302c:                               ; preds = %dec_label_pc_13024
  %v2_1302c = sub i32 %v5_12ff4, %tmp20
  ret i32 %v2_1302c

dec_label_pc_13034:                               ; preds = %dec_label_pc_12fe8.backedge, %dec_label_pc_12fe0
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_13018., { 1, 0 }
  uselistorder i32 %v0_12ff4, { 1, 0 }
  uselistorder i32 %v0_13018, { 1, 0 }
  uselistorder i8 %v3_12fb4, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_12fe8.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_12ff4, { 1, 0 }
}

define i32 @function_1303c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1303c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_1303c = load i8, i8* %arg1, align 1
  %v2_13040 = icmp eq i8 %v2_1303c, 0
  br i1 %v2_13040, label %bb, label %dec_label_pc_1304c

bb:                                               ; preds = %dec_label_pc_1303c
  %v3_1303c = zext i8 %v2_1303c to i32
  br label %dec_label_pc_13060

dec_label_pc_1304c:                               ; preds = %dec_label_pc_1303c
  br label %dec_label_pc_13050

dec_label_pc_13050:                               ; preds = %dec_label_pc_13050, %dec_label_pc_1304c
  %v0_13050 = phi i32 [ %v1_13050, %dec_label_pc_13050 ], [ 0, %dec_label_pc_1304c ]
  %v1_13050 = add i32 %v0_13050, 1
  %v2_13054 = add i32 %v1_13050, %tmp
  %v3_13054 = inttoptr i32 %v2_13054 to i8*
  %v4_13054 = load i8, i8* %v3_13054, align 1
  %v2_13058 = icmp eq i8 %v4_13054, 0
  br i1 %v2_13058, label %dec_label_pc_13060, label %dec_label_pc_13050

dec_label_pc_13060:                               ; preds = %dec_label_pc_13050, %bb
  %v0_13084 = phi i32 [ %v3_1303c, %bb ], [ %v1_13050, %dec_label_pc_13050 ]
  %v1_13060 = inttoptr i32 %arg2 to i8*
  %v2_13060 = load i8, i8* %v1_13060, align 1
  %v2_13064 = icmp eq i8 %v2_13060, 0
  br i1 %v2_13064, label %bb22, label %dec_label_pc_13070

bb22:                                             ; preds = %dec_label_pc_13060
  %v3_13060 = zext i8 %v2_13060 to i32
  br label %dec_label_pc_13084

dec_label_pc_13070:                               ; preds = %dec_label_pc_13060
  br label %dec_label_pc_13074

dec_label_pc_13074:                               ; preds = %dec_label_pc_13074, %dec_label_pc_13070
  %v0_13074 = phi i32 [ %v1_13074, %dec_label_pc_13074 ], [ 0, %dec_label_pc_13070 ]
  %v1_13074 = add i32 %v0_13074, 1
  %v2_13078 = add i32 %v1_13074, %arg2
  %v3_13078 = inttoptr i32 %v2_13078 to i8*
  %v4_13078 = load i8, i8* %v3_13078, align 1
  %v2_1307c = icmp eq i8 %v4_13078, 0
  br i1 %v2_1307c, label %dec_label_pc_13084, label %dec_label_pc_13074

dec_label_pc_13084:                               ; preds = %dec_label_pc_13074, %bb22
  %v0_130b04 = phi i32 [ %v3_13060, %bb22 ], [ %v1_13074, %dec_label_pc_13074 ]
  %v9_13084 = icmp eq i32 %v0_13084, %v0_130b04
  br i1 %v9_13084, label %dec_label_pc_130b0.preheader, label %dec_label_pc_13090

dec_label_pc_130b0.preheader:                     ; preds = %dec_label_pc_13084
  %v2_130b06 = icmp eq i32 %v0_13084, 0
  br i1 %v2_130b06, label %dec_label_pc_130b8, label %dec_label_pc_13098

dec_label_pc_13090:                               ; preds = %dec_label_pc_13098, %dec_label_pc_13084
  ret i32 0

dec_label_pc_13098:                               ; preds = %dec_label_pc_130a8, %dec_label_pc_130b0.preheader
  %v0_130b0.in = phi i32 [ %v0_130b0, %dec_label_pc_130a8 ], [ %v0_13084, %dec_label_pc_130b0.preheader ]
  %v0_130ac = phi i32 [ %v1_130ac, %dec_label_pc_130a8 ], [ %arg2, %dec_label_pc_130b0.preheader ]
  %v0_130a8 = phi i32 [ %v1_130a8, %dec_label_pc_130a8 ], [ %tmp, %dec_label_pc_130b0.preheader ]
  %v0_130b0 = add i32 %v0_130b0.in, -1
  %v1_13098 = inttoptr i32 %v0_130a8 to i8*
  %v2_13098 = load i8, i8* %v1_13098, align 1
  %v1_1309c = inttoptr i32 %v0_130ac to i8*
  %v2_1309c = load i8, i8* %v1_1309c, align 1
  %v9_130a0 = icmp eq i8 %v2_13098, %v2_1309c
  br i1 %v9_130a0, label %dec_label_pc_130a8, label %dec_label_pc_13090

dec_label_pc_130a8:                               ; preds = %dec_label_pc_13098
  %v1_130a8 = add i32 %v0_130a8, 1
  %v1_130ac = add i32 %v0_130ac, 1
  %v2_130b0 = icmp eq i32 %v0_130b0, 0
  br i1 %v2_130b0, label %dec_label_pc_130b8, label %dec_label_pc_13098

dec_label_pc_130b8:                               ; preds = %dec_label_pc_130a8, %dec_label_pc_130b0.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_13060, { 1, 0 }
  uselistorder i8 %v2_1303c, { 1, 0 }
}

define i32 @function_130c0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_130c0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_130c4 = load i8, i8* %arg1, align 1
  %v2_130c8 = icmp eq i8 %v2_130c4, 0
  %v0_130cc = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_130c8, label %bb, label %dec_label_pc_130d8

bb:                                               ; preds = %dec_label_pc_130c0
  %v3_130c4 = zext i8 %v2_130c4 to i32
  br label %dec_label_pc_130ec

dec_label_pc_130d8:                               ; preds = %dec_label_pc_130c0
  br label %dec_label_pc_130dc

dec_label_pc_130dc:                               ; preds = %dec_label_pc_130dc, %dec_label_pc_130d8
  %v0_130dc = phi i32 [ %v1_130dc, %dec_label_pc_130dc ], [ 0, %dec_label_pc_130d8 ]
  %v1_130dc = add i32 %v0_130dc, 1
  %v2_130e0 = add i32 %v1_130dc, %tmp
  %v3_130e0 = inttoptr i32 %v2_130e0 to i8*
  %v4_130e0 = load i8, i8* %v3_130e0, align 1
  %v2_130e4 = icmp eq i8 %v4_130e0, 0
  br i1 %v2_130e4, label %dec_label_pc_130ec, label %dec_label_pc_130dc

dec_label_pc_130ec:                               ; preds = %dec_label_pc_130dc, %bb
  %v9_13114 = phi i32 [ %v3_130c4, %bb ], [ %v1_130dc, %dec_label_pc_130dc ]
  %v0_130ec = load i32, i32* %r1.global-to-local, align 4
  %v1_130ec = inttoptr i32 %v0_130ec to i8*
  %v2_130ec = load i8, i8* %v1_130ec, align 1
  %v3_130ec = zext i8 %v2_130ec to i32
  %v2_130f0 = icmp eq i8 %v2_130ec, 0
  br i1 %v2_130f0, label %bb26, label %dec_label_pc_130fc

bb26:                                             ; preds = %dec_label_pc_130ec
  store i32 %v3_130ec, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13110

dec_label_pc_130fc:                               ; preds = %dec_label_pc_130ec
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13100

dec_label_pc_13100:                               ; preds = %dec_label_pc_13100, %dec_label_pc_130fc
  %v0_13100 = phi i32 [ %v1_13100, %dec_label_pc_13100 ], [ 0, %dec_label_pc_130fc ]
  %v1_13100 = add i32 %v0_13100, 1
  store i32 %v1_13100, i32* %r2.global-to-local, align 4
  %v2_13104 = add i32 %v1_13100, %v0_130ec
  %v3_13104 = inttoptr i32 %v2_13104 to i8*
  %v4_13104 = load i8, i8* %v3_13104, align 1
  %v2_13108 = icmp eq i8 %v4_13104, 0
  br i1 %v2_13108, label %dec_label_pc_13110, label %dec_label_pc_13100

dec_label_pc_13110:                               ; preds = %dec_label_pc_13100, %bb26
  %v1_13110 = phi i32 [ %v3_130ec, %bb26 ], [ %v1_13100, %dec_label_pc_13100 ]
  %v2_13110 = sub i32 %v0_130cc, %v1_13110
  %v4_13110 = xor i32 %v1_13110, %v0_130cc
  %v5_13110 = xor i32 %v2_13110, %v0_130cc
  %v6_13110 = and i32 %v5_13110, %v4_13110
  %v7_13114 = icmp sgt i32 %v0_130cc, %v1_13110
  br i1 %v7_13114, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_13110
  %v10_13114 = sub i32 %v0_130cc, %v9_13114
  %v12_13114 = xor i32 %v9_13114, %v0_130cc
  %v13_13114 = xor i32 %v10_13114, %v0_130cc
  %v14_13114 = and i32 %v13_13114, %v12_13114
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_13110, %bb27
  %v2_13118.in = phi i32 [ %v6_13110, %dec_label_pc_13110 ], [ %v14_13114, %bb27 ]
  %v1_13118.in = phi i32 [ %v2_13110, %dec_label_pc_13110 ], [ %v10_13114, %bb27 ]
  %v1_13110.pn = phi i32 [ %v1_13110, %dec_label_pc_13110 ], [ %v9_13114, %bb27 ]
  %v0_13118 = icmp eq i32 %v0_130cc, %v1_13110.pn
  %v1_13118 = icmp slt i32 %v1_13118.in, 0
  %v2_13118 = icmp slt i32 %v2_13118.in, 0
  %v3_13118 = xor i1 %v2_13118, %v1_13118
  %v4_13118 = or i1 %v0_13118, %v3_13118
  br i1 %v4_13118, label %dec_label_pc_13128.preheader, label %dec_label_pc_13140

dec_label_pc_13128.preheader:                     ; preds = %bb28
  %v2_131285 = icmp eq i32 %v0_130cc, 0
  br i1 %v2_131285, label %dec_label_pc_13148, label %dec_label_pc_13130

dec_label_pc_13120:                               ; preds = %dec_label_pc_13130
  %v1_13120 = add i32 %v0_13120, 1
  %v1_13124 = add i32 %v0_13124, 1
  store i32 %v1_13124, i32* %r1.global-to-local, align 4
  %v2_13128 = icmp eq i32 %v0_13128, 0
  br i1 %v2_13128, label %dec_label_pc_13148, label %dec_label_pc_13130

dec_label_pc_13130:                               ; preds = %dec_label_pc_13120, %dec_label_pc_13128.preheader
  %v0_13128.in = phi i32 [ %v0_13128, %dec_label_pc_13120 ], [ %v0_130cc, %dec_label_pc_13128.preheader ]
  %v0_13124 = phi i32 [ %v1_13124, %dec_label_pc_13120 ], [ %v0_130ec, %dec_label_pc_13128.preheader ]
  %v0_13120 = phi i32 [ %v1_13120, %dec_label_pc_13120 ], [ %tmp, %dec_label_pc_13128.preheader ]
  %v0_13128 = add i32 %v0_13128.in, -1
  %v1_13130 = inttoptr i32 %v0_13120 to i8*
  %v2_13130 = load i8, i8* %v1_13130, align 1
  %v3_13130 = zext i8 %v2_13130 to i32
  store i32 %v3_13130, i32* %r2.global-to-local, align 4
  %v1_13134 = inttoptr i32 %v0_13124 to i8*
  %v2_13134 = load i8, i8* %v1_13134, align 1
  %v9_13138 = icmp eq i8 %v2_13130, %v2_13134
  br i1 %v9_13138, label %dec_label_pc_13120, label %dec_label_pc_13140

dec_label_pc_13140:                               ; preds = %dec_label_pc_13130, %bb28
  ret i32 0

dec_label_pc_13148:                               ; preds = %dec_label_pc_13120, %dec_label_pc_13128.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_13120, { 1, 0 }
  uselistorder i32 %v0_13124, { 1, 0 }
  uselistorder i32 %v1_13110, { 0, 3, 1, 2 }
  uselistorder i32 %v1_13100, { 0, 1, 3, 2 }
  uselistorder i32 %v0_130cc, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_130c4, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_13150(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13150:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13150 = load i32, i32* @r4, align 4
  store i32 %v3_13150, i32* %stack_var_-28, align 4
  %v22_13150 = ptrtoint i32* %stack_var_-28 to i32
  %v0_13154 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_13154, i32* %r8.global-to-local, align 4
  %v2_13154 = icmp eq i32 %v0_13154, 0
  store i1 %v2_13154, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_13154, label %dec_label_pc_13244, label %dec_label_pc_13164

dec_label_pc_13164:                               ; preds = %dec_label_pc_13150
  %v3_13164 = icmp eq i8 %arg1, 0
  store i1 %v3_13164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13164, label %.thread, label %dec_label_pc_13178

.thread:                                          ; preds = %dec_label_pc_13164
  %v4_1316c = inttoptr i32 %v0_13154 to i8*
  store i8 48, i8* %v4_1316c, align 1
  %v0_13170.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13170.pr.pr, label %.thread1, label %dec_label_pc_13178

.thread1:                                         ; preds = %.thread
  %v4_13170 = load i32, i32* %r8.global-to-local, align 4
  %v5_13170 = add i32 %v4_13170, 1
  %v6_13170 = inttoptr i32 %v5_13170 to i8*
  store i8 0, i8* %v6_13170, align 1
  %v0_13174.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13174.pr.pr, label %dec_label_pc_13244, label %dec_label_pc_13178

dec_label_pc_13178:                               ; preds = %dec_label_pc_13164, %.thread, %.thread1
  %tmp39 = icmp slt i8 %arg1, 0
  %v7_1317c = icmp eq i32 %arg2, 10
  store i1 %v7_1317c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1317c, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_13178
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_13178
  %v4_13178 = zext i1 %tmp39 to i32
  store i32 %v4_13178, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_131a0

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_131b0

dec_label_pc_131a0:                               ; preds = %bb
  %v2_131a0 = sub nsw i32 0, %tmp
  store i32 %v2_131a0, i32* %r4.global-to-local, align 4
  store i1 %v3_13164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13164, label %dec_label_pc_13250, label %dec_label_pc_131b0

dec_label_pc_131b0:                               ; preds = %dec_label_pc_131a0, %.thread4
  %v0_131b810 = phi i32 [ %tmp, %.thread4 ], [ %v2_131a0, %dec_label_pc_131a0 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_131a0 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_131b4 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_131b4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_131b8

dec_label_pc_131b8:                               ; preds = %bb37, %dec_label_pc_131b0
  %v0_131b8 = phi i32 [ %v0_131dc, %bb37 ], [ %v0_131b810, %dec_label_pc_131b0 ]
  store i32 %v0_131b8, i32* %r0.global-to-local, align 4
  %v0_131bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_131bc, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_131b8, 16777216
  %v1_131c0 = sdiv i32 %sext, 16777216
  %v3_131c0 = call i32 @function_13378(i32 %v1_131c0, i32 %v0_131bc)
  store i32 %v3_131c0, i32* %r0.global-to-local, align 4
  %v7_131c4 = icmp eq i32 %v3_131c0, 9
  store i1 %v7_131c4, i1* %cpsr_z.global-to-local, align 1
  %v1_131c8 = add i32 %v3_131c0, 48
  %v0_131cc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_131cc, i32* @r1, align 4
  %v7_131d0 = icmp sgt i32 %v3_131c0, 9
  %extract.t = trunc i32 %v1_131c8 to i8
  br i1 %v7_131d0, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_131b8
  %v9_131d0 = add i32 %v3_131c0, 55
  %extract.t20 = trunc i32 %v9_131d0 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_131b8, %bb36
  %v0_131d8.off0 = phi i8 [ %extract.t, %dec_label_pc_131b8 ], [ %extract.t20, %bb36 ]
  %v0_131d4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_131d4, i32* @r0, align 4
  %v2_131d8 = load i32, i32* %r7.global-to-local, align 4
  %v3_131d8 = inttoptr i32 %v2_131d8 to i8*
  store i8 %v0_131d8.off0, i8* %v3_131d8, align 1
  %v4_131d8 = load i32, i32* %r7.global-to-local, align 4
  %v5_131d8 = add i32 %v4_131d8, -1
  store i32 %v5_131d8, i32* %r7.global-to-local, align 4
  %v0_131dc = call i32 @function_13268()
  store i32 %v0_131dc, i32* %r0.global-to-local, align 4
  store i32 %v0_131dc, i32* %r4.global-to-local, align 4
  %v2_131e0 = icmp eq i32 %v0_131dc, 0
  store i1 %v2_131e0, i1* %cpsr_z.global-to-local, align 1
  %v0_131e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_131e4 = add i32 %v0_131e4, -1
  store i32 %v1_131e4, i32* %r6.global-to-local, align 4
  br i1 %v2_131e0, label %dec_label_pc_131ec, label %dec_label_pc_131b8

dec_label_pc_131ec:                               ; preds = %bb37
  %v0_131ec = load i32, i32* %sl.global-to-local, align 4
  %v2_131ec = icmp eq i32 %v0_131ec, 0
  store i1 %v2_131ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_131ec, label %bb38, label %dec_label_pc_13254

bb38:                                             ; preds = %dec_label_pc_131ec
  store i32 %v0_131e4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_131f8

dec_label_pc_131f8:                               ; preds = %bb38, %dec_label_pc_13254
  %v1_13204 = phi i32 [ %v0_131e4, %bb38 ], [ %v1_131fc.pre, %dec_label_pc_13254 ]
  %v2_131f8 = ptrtoint i32* %stack_var_-62 to i32
  %v2_131fc = add i32 %v1_13204, %v2_131f8
  %v3_131fc = inttoptr i32 %v2_131fc to i8*
  %v4_131fc = load i8, i8* %v3_131fc, align 1
  %v6_131fc = zext i8 %v4_131fc to i32
  store i32 %v6_131fc, i32* %r2.global-to-local, align 4
  %v2_13200 = icmp eq i8 %v4_131fc, 0
  store i1 %v2_13200, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_131fc, i32* %r1.global-to-local, align 4
  br i1 %v2_13200, label %dec_label_pc_13228, label %dec_label_pc_1320c

dec_label_pc_1320c:                               ; preds = %dec_label_pc_131f8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13210

dec_label_pc_13210:                               ; preds = %dec_label_pc_13210, %dec_label_pc_1320c
  %v0_13210 = phi i32 [ %v1_13210, %dec_label_pc_13210 ], [ 0, %dec_label_pc_1320c ]
  %v1_13210 = add i32 %v0_13210, 1
  store i32 %v1_13210, i32* %r2.global-to-local, align 4
  %v2_13214 = add i32 %v1_13210, %v2_131fc
  %v3_13214 = inttoptr i32 %v2_13214 to i8*
  %v4_13214 = load i8, i8* %v3_13214, align 1
  %v2_13218 = icmp eq i8 %v4_13214, 0
  store i1 %v2_13218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13218, label %dec_label_pc_13220, label %dec_label_pc_13210

dec_label_pc_13220:                               ; preds = %dec_label_pc_13210
  %v7_13220 = icmp eq i32 %v0_13210, -2
  store i1 %v7_13220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13220, label %dec_label_pc_13244, label %dec_label_pc_13228

dec_label_pc_13228:                               ; preds = %dec_label_pc_13220, %dec_label_pc_131f8
  %v0_1323017 = phi i32 [ %v1_13210, %dec_label_pc_13220 ], [ %v6_131fc, %dec_label_pc_131f8 ]
  store i32 %v2_131fc, i32* %r0.global-to-local, align 4
  %v0_1322c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1322c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13230

dec_label_pc_13230:                               ; preds = %dec_label_pc_13230.dec_label_pc_13230_crit_edge, %dec_label_pc_13228
  %v2_1323c = phi i32 [ %v5_1323c, %dec_label_pc_13230.dec_label_pc_13230_crit_edge ], [ %v0_1322c, %dec_label_pc_13228 ]
  %v0_13234 = phi i32 [ %v0_13234.pre, %dec_label_pc_13230.dec_label_pc_13230_crit_edge ], [ %v2_131fc, %dec_label_pc_13228 ]
  %v0_13230 = phi i32 [ %v0_13230.pre, %dec_label_pc_13230.dec_label_pc_13230_crit_edge ], [ %v0_1323017, %dec_label_pc_13228 ]
  %v1_13230 = add i32 %v0_13230, -1
  store i32 %v1_13230, i32* %r2.global-to-local, align 4
  %v1_13234 = inttoptr i32 %v0_13234 to i8*
  %v2_13234 = load i8, i8* %v1_13234, align 1
  %v5_13234 = add i32 %v0_13234, 1
  store i32 %v5_13234, i32* %r0.global-to-local, align 4
  %v3_13238 = icmp eq i32 %v0_13230, 0
  store i1 %v3_13238, i1* %cpsr_z.global-to-local, align 1
  %v3_1323c = inttoptr i32 %v2_1323c to i8*
  store i8 %v2_13234, i8* %v3_1323c, align 1
  %v4_1323c = load i32, i32* %r1.global-to-local, align 4
  %v5_1323c = add i32 %v4_1323c, 1
  store i32 %v5_1323c, i32* %r1.global-to-local, align 4
  br i1 %v3_13238, label %dec_label_pc_13244, label %dec_label_pc_13230.dec_label_pc_13230_crit_edge

dec_label_pc_13230.dec_label_pc_13230_crit_edge:  ; preds = %dec_label_pc_13230
  %v0_13230.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_13234.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13230

dec_label_pc_13244:                               ; preds = %dec_label_pc_13230, %dec_label_pc_13220, %.thread1, %dec_label_pc_13150
  %v0_13244 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13244, i32* %r0.global-to-local, align 4
  %v2_1324c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1324c, i32* @r4, align 4
  ret i32 %v0_13244

dec_label_pc_13250:                               ; preds = %dec_label_pc_131a0
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13254

dec_label_pc_13254:                               ; preds = %dec_label_pc_131ec, %dec_label_pc_13250
  %v1_13258 = phi i32 [ %v1_131e4, %dec_label_pc_131ec ], [ 32, %dec_label_pc_13250 ]
  %v2_13258 = add i32 %v1_13258, %v22_13150
  store i32 %v2_13258, i32* %r2.global-to-local, align 4
  %v3_13260 = add i32 %v2_13258, -34
  %v4_13260 = inttoptr i32 %v3_13260 to i8*
  store i8 45, i8* %v4_13260, align 1
  %v1_131fc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_131f8

; uselistorder directives
  uselistorder i32 %v5_1323c, { 1, 0 }
  uselistorder i1 %v3_13238, { 1, 0 }
  uselistorder i32 %v0_13234, { 1, 0 }
  uselistorder i1 %v7_13220, { 1, 0 }
  uselistorder i32 %v1_13210, { 0, 1, 3, 2 }
  uselistorder i32 %v2_131fc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_131dc, { 1, 2, 3, 0 }
  uselistorder i32 %v3_131c0, { 2, 0, 1, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_13164, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13154, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_13378, { 2, 1, 8, 3, 7, 6, 5, 4, 0 }
  uselistorder label %dec_label_pc_13254, { 1, 0 }
  uselistorder label %dec_label_pc_131f8, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_13178, { 2, 1, 0 }
}

define i32 @function_13268() local_unnamed_addr {
dec_label_pc_13268:
  %v0_13268 = load i32, i32* @r1, align 4
  %v1_13268 = add i32 %v0_13268, -1
  store i32 %v1_13268, i32* @r2, align 4
  %v7_13268 = icmp eq i32 %v0_13268, 1
  br i1 %v7_13268, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_13268
  %v2_1326c = load i32, i32* @r0, align 4
  ret i32 %v2_1326c

bb82:                                             ; preds = %dec_label_pc_13268
  %v2_13268 = icmp eq i32 %v0_13268, 0
  br i1 %v2_13268, label %dec_label_pc_13350, label %dec_label_pc_13274

dec_label_pc_13274:                               ; preds = %bb82
  %v0_13274 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_13274, %v0_13268
  br i1 %tmp, label %dec_label_pc_1327c, label %dec_label_pc_13308

dec_label_pc_1327c:                               ; preds = %dec_label_pc_13274
  %v2_1327c = and i32 %v1_13268, %v0_13268
  %v4_1327c = icmp eq i32 %v2_1327c, 0
  br i1 %v4_1327c, label %dec_label_pc_13314, label %dec_label_pc_13284

dec_label_pc_13284:                               ; preds = %dec_label_pc_1327c
  %v3_13284 = icmp ult i32 %v0_13268, 536870912
  br i1 %v3_13284, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_13284
  %v4_13288 = mul i32 %v0_13268, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_13284, %.thread
  %v0_132a8.pr36.ph = phi i32 [ %v4_13288, %.thread ], [ %v0_13268, %dec_label_pc_13284 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_13284 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_132a8.pr36 = phi i32 [ %v4_1329c, %bb85 ], [ %v0_132a8.pr36.ph, %.preheader.preheader ]
  %v1_132a0 = phi i32 [ %v4_132a0, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_13294 = icmp ugt i32 %v0_132a8.pr36, 268435455
  br i1 %v2_13294, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_132a8thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_13298 = icmp ult i32 %v0_132a8.pr36, %v0_13274
  br i1 %v4_13298, label %bb84, label %dec_label_pc_132a8thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_1329c = and i32 %v0_132a8.pr36, 268435456
  %v3_1329c = icmp eq i32 %v2_1329c, 0
  %v4_1329c = mul i32 %v0_132a8.pr36, 16
  br i1 %v3_1329c, label %bb85, label %dec_label_pc_132a8.loopexit

bb85:                                             ; preds = %bb84
  %v2_132a0 = and i32 %v1_132a0, 268435456
  %v3_132a0 = icmp eq i32 %v2_132a0, 0
  %v4_132a0 = mul i32 %v1_132a0, 16
  br i1 %v3_132a0, label %.preheader, label %dec_label_pc_132a8thread-pre-split.loopexit.loopexit

dec_label_pc_132a8thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_132b448.ph = phi i32 [ %v1_132a0, %bb83 ], [ %v4_132a0, %bb85 ]
  %v0_132a8.pr38.ph = phi i32 [ %v0_132a8.pr36, %bb83 ], [ %v4_1329c, %bb85 ]
  br label %dec_label_pc_132a8thread-pre-split.loopexit

dec_label_pc_132a8thread-pre-split.loopexit:      ; preds = %dec_label_pc_132a8thread-pre-split.loopexit.loopexit, %.thread2
  %v1_132b448 = phi i32 [ %v1_132a0, %.thread2 ], [ %v1_132b448.ph, %dec_label_pc_132a8thread-pre-split.loopexit.loopexit ]
  %v0_132a8.pr38 = phi i32 [ %v0_132a8.pr36, %.thread2 ], [ %v0_132a8.pr38.ph, %dec_label_pc_132a8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_132a8thread-pre-split

dec_label_pc_132a8thread-pre-split:               ; preds = %dec_label_pc_132a8thread-pre-split.loopexit, %bb87
  %v1_132b446 = phi i32 [ %v1_132b448, %dec_label_pc_132a8thread-pre-split.loopexit ], [ %v3_132b4, %bb87 ]
  %v0_132a8.pr = phi i32 [ %v0_132a8.pr38, %dec_label_pc_132a8thread-pre-split.loopexit ], [ %v3_132b0, %bb87 ]
  br label %dec_label_pc_132a8

dec_label_pc_132a8.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_132a8

dec_label_pc_132a8:                               ; preds = %dec_label_pc_132a8.loopexit, %dec_label_pc_132a8thread-pre-split
  %v1_132b4 = phi i32 [ %v1_132b446, %dec_label_pc_132a8thread-pre-split ], [ %v1_132a0, %dec_label_pc_132a8.loopexit ]
  %v1_132b0 = phi i32 [ %v0_132a8.pr, %dec_label_pc_132a8thread-pre-split ], [ %v4_1329c, %dec_label_pc_132a8.loopexit ]
  %v2_132a8 = icmp slt i32 %v1_132b0, 0
  br i1 %v2_132a8, label %dec_label_pc_132bc, label %bb86

bb86:                                             ; preds = %dec_label_pc_132a8
  %v4_132ac = icmp ult i32 %v1_132b0, %v0_13274
  br i1 %v4_132ac, label %bb87, label %dec_label_pc_132bc

bb87:                                             ; preds = %bb86
  %v3_132b0 = mul i32 %v1_132b0, 2
  %v2_132b4 = icmp slt i32 %v1_132b4, 0
  %v3_132b4 = mul i32 %v1_132b4, 2
  br i1 %v2_132b4, label %dec_label_pc_132bc, label %dec_label_pc_132a8thread-pre-split

dec_label_pc_132bc:                               ; preds = %bb86, %dec_label_pc_132a8, %bb87
  %v2_132c859 = phi i32 [ %v3_132b4, %bb87 ], [ %v1_132b4, %bb86 ], [ %v1_132b4, %dec_label_pc_132a8 ]
  %v1_132c051 = phi i32 [ %v3_132b0, %bb87 ], [ %v1_132b0, %bb86 ], [ %v1_132b0, %dec_label_pc_132a8 ]
  store i32 0, i32* @r2, align 4
  br label %dec_label_pc_132c0

dec_label_pc_132c0:                               ; preds = %.thread11, %dec_label_pc_132bc
  %v1_132f4 = phi i32 [ %v4_132f4, %.thread11 ], [ %v2_132c859, %dec_label_pc_132bc ]
  %v1_132c8 = phi i32 [ %v0_13300, %.thread11 ], [ 0, %dec_label_pc_132bc ]
  %v1_132f8 = phi i32 [ %v4_132f8, %.thread11 ], [ %v1_132c051, %dec_label_pc_132bc ]
  %v1_132c4 = phi i32 [ %v0_132f0, %.thread11 ], [ %v0_13274, %dec_label_pc_132bc ]
  %v3_132c0 = icmp ult i32 %v1_132c4, %v1_132f8
  br i1 %v3_132c0, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_132c0
  %v3_132c4 = sub i32 %v1_132c4, %v1_132f8
  %v3_132c8 = or i32 %v1_132c8, %v1_132f4
  store i32 %v3_132c8, i32* @r2, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_132c0, %bb88
  %v1_132d0 = phi i32 [ %v1_132c4, %dec_label_pc_132c0 ], [ %v3_132c4, %bb88 ]
  %v1_132d4 = phi i32 [ %v1_132c8, %dec_label_pc_132c0 ], [ %v3_132c8, %bb88 ]
  %v4_132cc = udiv i32 %v1_132f8, 2
  %v6_132cc = icmp ult i32 %v1_132d0, %v4_132cc
  br i1 %v6_132cc, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_132d0 = urem i32 %v1_132f8, 2
  %v4_132d0 = icmp eq i32 %v3_132d0, 0
  %v6_132d0 = sub i32 %v1_132d0, %v4_132cc
  br i1 %v4_132d0, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_132d4 = udiv i32 %v1_132f4, 2
  %v6_132d4 = or i32 %v1_132d4, %v5_132d4
  store i32 %v6_132d4, i32* @r2, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_132dc = phi i32 [ %v6_132d0, %bb89 ], [ %v1_132d0, %.thread7 ], [ %v6_132d0, %bb90 ]
  %v1_132e0 = phi i32 [ %v1_132d4, %bb89 ], [ %v1_132d4, %.thread7 ], [ %v6_132d4, %bb90 ]
  %v4_132d8 = udiv i32 %v1_132f8, 4
  %v6_132d8 = icmp ult i32 %v1_132dc, %v4_132d8
  br i1 %v6_132d8, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_132dc = and i32 %v1_132f8, 2
  %v4_132dc = icmp eq i32 %v3_132dc, 0
  %v6_132dc = sub i32 %v1_132dc, %v4_132d8
  br i1 %v4_132dc, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_132e0 = udiv i32 %v1_132f4, 4
  %v6_132e0 = or i32 %v1_132e0, %v5_132e0
  store i32 %v6_132e0, i32* @r2, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_132e8 = phi i32 [ %v6_132dc, %bb91 ], [ %v1_132dc, %.thread8 ], [ %v6_132dc, %bb92 ]
  %v1_132ec = phi i32 [ %v1_132e0, %bb91 ], [ %v1_132e0, %.thread8 ], [ %v6_132e0, %bb92 ]
  %v4_132e4 = udiv i32 %v1_132f8, 8
  %v6_132e4 = icmp ult i32 %v1_132e8, %v4_132e4
  br i1 %v6_132e4, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_132e8 = and i32 %v1_132f8, 4
  %v4_132e8 = icmp eq i32 %v3_132e8, 0
  %v6_132e8 = sub i32 %v1_132e8, %v4_132e4
  br i1 %v4_132e8, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_132ec = udiv i32 %v1_132f4, 8
  %v6_132ec = or i32 %v1_132ec, %v5_132ec
  store i32 %v6_132ec, i32* @r2, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_13300 = phi i32 [ %v1_132ec, %bb93 ], [ %v1_132ec, %.thread9 ], [ %v6_132ec, %bb94 ]
  %v0_132f0 = phi i32 [ %v6_132e8, %bb93 ], [ %v1_132e8, %.thread9 ], [ %v6_132e8, %bb94 ]
  %v2_132f0 = icmp eq i32 %v0_132f0, 0
  br i1 %v2_132f0, label %dec_label_pc_13300, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_132f4, 16
  br i1 %tmp142, label %dec_label_pc_13300, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_132f4 = udiv i32 %v1_132f4, 16
  %v4_132f8 = udiv i32 %v1_132f8, 16
  br label %dec_label_pc_132c0

dec_label_pc_13300:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_13300

dec_label_pc_13308:                               ; preds = %dec_label_pc_13274
  %v9_13274 = icmp eq i32 %v0_13274, %v0_13268
  %. = zext i1 %v9_13274 to i32
  ret i32 %.

dec_label_pc_13314:                               ; preds = %dec_label_pc_1327c
  %v2_13314 = icmp ugt i32 %v0_13268, 65535
  br i1 %v2_13314, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_13314
  %v2_13318 = and i32 %v0_13268, 32768
  %v3_13318 = icmp eq i32 %v2_13318, 0
  %v4_13318 = udiv i32 %v0_13268, 65536
  br i1 %v3_13318, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_13314
  %v0_1332465 = phi i32 [ %v0_13268, %dec_label_pc_13314 ], [ %v4_13318, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_13328 = phi i32 [ %v0_1332465, %.thread16 ], [ %v4_13318, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  store i32 %storemerge, i32* @r2, align 4
  %v2_13324 = icmp ugt i32 %v1_13328, 255
  br i1 %v2_13324, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_13328 = and i32 %v1_13328, 128
  %v3_13328 = icmp eq i32 %v2_13328, 0
  %v4_13328 = udiv i32 %v1_13328, 256
  br i1 %v3_13328, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_1332c = or i32 %storemerge, 8
  store i32 %v2_1332c, i32* @r2, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_13338 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_1332c, %bb102 ]
  %v1_13334 = phi i32 [ %v1_13328, %bb100 ], [ %v4_13328, %bb101 ], [ %v4_13328, %bb102 ]
  %v2_13330 = icmp ugt i32 %v1_13334, 15
  br i1 %v2_13330, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_13334 = and i32 %v1_13334, 8
  %v3_13334 = icmp eq i32 %v2_13334, 0
  %v4_13334 = udiv i32 %v1_13334, 16
  br i1 %v3_13334, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_13338 = add nsw i32 %v1_13338, 4
  store i32 %v2_13338, i32* @r2, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_13340 = phi i32 [ %v1_13338, %.thread17 ], [ %v1_13338, %bb103 ], [ %v2_13338, %bb104 ]
  %v5_13344 = phi i32 [ %v1_13334, %.thread17 ], [ %v4_13334, %bb103 ], [ %v4_13334, %bb104 ]
  %v2_1333c = icmp ugt i32 %v5_13344, 3
  %v7_1333c = icmp eq i32 %v5_13344, 4
  %v2_13340 = xor i1 %v7_1333c, true
  %v3_13340 = and i1 %v2_1333c, %v2_13340
  br i1 %v3_13340, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_13340 = add nsw i32 %v4_13340, 3
  store i32 %v5_13340, i32* @r2, align 4
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_13344 = phi i32 [ %v4_13340, %.thread18 ], [ %v5_13340, %bb105 ]
  %v2_13344 = xor i1 %v2_1333c, true
  %v3_13344 = or i1 %v7_1333c, %v2_13344
  br i1 %v3_13344, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_13344 = udiv i32 %v5_13344, 2
  %v9_13344 = add i32 %v4_13344, %v8_13344
  store i32 %v9_13344, i32* @r2, align 4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_13348 = phi i32 [ %v4_13344, %bb106 ], [ %v9_13344, %bb107 ]
  %v6_13348 = lshr i32 %v0_13274, %v1_13348
  ret i32 %v6_13348

dec_label_pc_13350:                               ; preds = %bb82
  %v0_13350 = load i32, i32* @lr, align 4
  %v0_13354 = call i32 @function_13528()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_13350)
  %v6_13360 = load i32, i32* @r1, align 4
  %v9_13360 = load i32, i32* @lr, align 4
  %v0_13364 = call i32 @function_13268()
  store i32 %v6_13360, i32* @r2, align 4
  store i32 %v9_13360, i32* @lr, align 4
  ret i32 %v0_13364

; uselistorder directives
  uselistorder i32 %v4_13344, { 1, 0 }
  uselistorder i1 %v7_1333c, { 1, 0 }
  uselistorder i32 %v4_13334, { 1, 0 }
  uselistorder i32 %v1_13334, { 1, 0, 2, 3 }
  uselistorder i32 %v2_1332c, { 1, 0 }
  uselistorder i32 %v4_13328, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13328, { 1, 0, 2, 3 }
  uselistorder i32 %v4_13318, { 1, 0 }
  uselistorder i32 %v0_132f0, { 1, 0 }
  uselistorder i32 %v4_132e4, { 1, 0 }
  uselistorder i32 %v1_132ec, { 1, 2, 0 }
  uselistorder i32 %v4_132d8, { 1, 0 }
  uselistorder i32 %v1_132e0, { 1, 2, 0 }
  uselistorder i32 %v4_132cc, { 1, 0 }
  uselistorder i32 %v1_132d4, { 1, 2, 0 }
  uselistorder i32 %v1_132f8, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_132c8, { 1, 0 }
  uselistorder i32 %v1_132f4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_132b4, { 1, 0 }
  uselistorder i32 %v3_132b0, { 1, 0 }
  uselistorder i32 %v1_132b0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_132b4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_132a0, { 1, 0 }
  uselistorder i32 %v4_1329c, { 2, 1, 0 }
  uselistorder i32 %v1_132a0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_132a8.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_13274, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_13268, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 4, 0, 1, 2, 3 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_13300, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_132bc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_132a8thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_13378(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13378:
  store i32 %arg1, i32* @r0, align 4
  %v1_13378 = add i32 %arg2, -1
  %v2_13378 = icmp eq i32 %arg2, 0
  br i1 %v2_13378, label %dec_label_pc_13434, label %dec_label_pc_13380

dec_label_pc_13380:                               ; preds = %dec_label_pc_13378
  %v7_13378 = icmp eq i32 %arg2, 1
  br i1 %v7_13378, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_13380
  %v1_13380 = load i32, i32* @r0, align 4
  %v10_13380 = icmp eq i32 %v1_13380, %arg2
  br i1 %v10_13380, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_13380, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_13380 = icmp ult i32 %v1_13380, %arg2
  br i1 %v4_13380, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_13388 = and i32 %v1_13378, %arg2
  %v8_13388 = icmp eq i32 %v6_13388, 0
  br i1 %v8_13388, label %.thread67, label %dec_label_pc_13398.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_1338c = phi i32 [ %v1_13380, %bb75 ], [ 0, %.thread65 ]
  %v3_1338c = and i32 %v1_1338c, %v1_13378
  br label %bb76

dec_label_pc_13398.preheader:                     ; preds = %bb75
  %v2_1339899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1339899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_13428, %bb74, %bb89, %bb84, %dec_label_pc_133f8, %.thread67
  %v5_13390 = phi i32 [ %v1_13380, %bb74 ], [ %v3_1338c, %.thread67 ], [ %v1_133d4.v6_133d4.v6_133dc.v6_133e4, %dec_label_pc_133f8 ], [ 0, %bb84 ], [ %v1_1342c, %dec_label_pc_13428 ], [ %v2_13428, %bb89 ]
  ret i32 %v5_13390

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_13398.preheader
  %v0_133ac.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_13398.preheader ], [ %v4_133a0, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_13398.preheader ], [ %v2_133a411, %.thread1.thread9 ]
  br label %dec_label_pc_133acthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_13398.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_133a411, %.thread1.thread9 ], [ 0, %dec_label_pc_13398.preheader ]
  %v0_133ac.pr33100 = phi i32 [ %v4_133a0, %.thread1.thread9 ], [ %arg2, %dec_label_pc_13398.preheader ]
  %v4_1339c = icmp ult i32 %v0_133ac.pr33100, %v1_13380
  br i1 %v4_1339c, label %bb78, label %dec_label_pc_133acthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_133a0 = and i32 %v0_133ac.pr33100, 268435456
  %v3_133a0 = icmp eq i32 %v2_133a0, 0
  %v4_133a0 = mul i32 %v0_133ac.pr33100, 16
  br i1 %v3_133a0, label %.thread1.thread9, label %dec_label_pc_133ac.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_133a411 = add i32 %storemerge101, 4
  %v2_13398 = icmp ugt i32 %v4_133a0, 268435455
  br i1 %v2_13398, label %.thread, label %bb77

dec_label_pc_133acthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_133acthread-pre-split.loopexit

dec_label_pc_133acthread-pre-split.loopexit:      ; preds = %dec_label_pc_133acthread-pre-split.loopexit.loopexit, %.thread
  %v0_133ac.pr3398 = phi i32 [ %v0_133ac.pr33.lcssa, %.thread ], [ %v0_133ac.pr33100, %dec_label_pc_133acthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_133acthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_133acthread-pre-split

dec_label_pc_133acthread-pre-split:               ; preds = %.thread4, %dec_label_pc_133acthread-pre-split.loopexit
  %v1_133b839 = phi i32 [ %storemerge95, %dec_label_pc_133acthread-pre-split.loopexit ], [ %v2_133b8, %.thread4 ]
  %v0_133ac.pr = phi i32 [ %v0_133ac.pr3398, %dec_label_pc_133acthread-pre-split.loopexit ], [ %v3_133b4, %.thread4 ]
  br label %dec_label_pc_133ac

dec_label_pc_133ac.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_133ac

dec_label_pc_133ac:                               ; preds = %dec_label_pc_133ac.loopexit, %dec_label_pc_133acthread-pre-split
  %v0_133c0.pr = phi i32 [ %v1_133b839, %dec_label_pc_133acthread-pre-split ], [ %storemerge101, %dec_label_pc_133ac.loopexit ]
  %v1_133b4 = phi i32 [ %v0_133ac.pr, %dec_label_pc_133acthread-pre-split ], [ %v4_133a0, %dec_label_pc_133ac.loopexit ]
  %v2_133ac = icmp slt i32 %v1_133b4, 0
  br i1 %v2_133ac, label %dec_label_pc_133c0, label %bb79

bb79:                                             ; preds = %dec_label_pc_133ac
  %v4_133b0 = icmp ult i32 %v1_133b4, %v1_13380
  br i1 %v4_133b0, label %.thread4, label %dec_label_pc_133c0

.thread4:                                         ; preds = %bb79
  %v3_133b4 = mul i32 %v1_133b4, 2
  %v2_133b8 = add i32 %v0_133c0.pr, 1
  br label %dec_label_pc_133acthread-pre-split

dec_label_pc_133c0:                               ; preds = %bb79, %dec_label_pc_133ac
  %v2_133c0 = add i32 %v0_133c0.pr, -3
  %v5_133c4 = icmp slt i32 %v0_133c0.pr, 3
  br i1 %v5_133c4, label %dec_label_pc_13404, label %dec_label_pc_133c8

dec_label_pc_133c8:                               ; preds = %dec_label_pc_133c0, %bb83
  %v6_133f0 = phi i32 [ %v0_133f8, %bb83 ], [ %v2_133c0, %dec_label_pc_133c0 ]
  %v1_133cc = phi i32 [ %v1_133d4.v6_133d4.v6_133dc.v6_133e4, %bb83 ], [ %v1_13380, %dec_label_pc_133c0 ]
  %v3_133ec12 = phi i32 [ %v3_133ec, %bb83 ], [ %v1_133b4, %dec_label_pc_133c0 ]
  %v3_133c8 = icmp ult i32 %v1_133cc, %v3_133ec12
  %v3_133cc = select i1 %v3_133c8, i32 0, i32 %v3_133ec12
  %v1_133d4 = sub i32 %v1_133cc, %v3_133cc
  %v4_133d0 = udiv i32 %v3_133ec12, 2
  %v6_133d0 = icmp ult i32 %v1_133d4, %v4_133d0
  %v6_133d4 = select i1 %v6_133d0, i32 0, i32 %v4_133d0
  %v1_133d4.v6_133d4 = sub i32 %v1_133d4, %v6_133d4
  %.demorgan = and i1 %v3_133c8, %v6_133d0
  %v4_133d8 = udiv i32 %v3_133ec12, 4
  %v6_133d8 = icmp ult i32 %v1_133d4.v6_133d4, %v4_133d8
  %v6_133dc = select i1 %v6_133d8, i32 0, i32 %v4_133d8
  %v1_133d4.v6_133d4.v6_133dc = sub i32 %v1_133d4.v6_133d4, %v6_133dc
  %.demorgan71 = and i1 %.demorgan, %v6_133d8
  %v4_133e0 = udiv i32 %v3_133ec12, 8
  %v6_133e0 = icmp ult i32 %v1_133d4.v6_133d4.v6_133dc, %v4_133e0
  %v6_133e4 = select i1 %v6_133e0, i32 0, i32 %v4_133e0
  %v1_133d4.v6_133d4.v6_133dc.v6_133e4 = sub i32 %v1_133d4.v6_133d4.v6_133dc, %v6_133e4
  %.demorgan72 = and i1 %.demorgan71, %v6_133e0
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_133c8
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_133c8, %bb80
  %v2_133e8 = add i32 %v1_133d4.v6_133d4.v6_133dc.v6_133e4, -1
  %v4_133e8 = sub i32 0, %v1_133d4.v6_133d4.v6_133dc.v6_133e4
  %v5_133e8 = and i32 %v1_133d4.v6_133d4.v6_133dc.v6_133e4, %v4_133e8
  %v3_133ec = udiv i32 %v3_133ec12, 16
  %v5_133f0 = icmp slt i32 %v1_133d4.v6_133d4.v6_133dc.v6_133e4, 1
  br i1 %v5_133f0, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_133f0 = add i32 %v6_133f0, -4
  %v9_133f0 = sub i32 3, %v6_133f0
  %v10_133f0 = and i32 %v9_133f0, %v6_133f0
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_133f8 = phi i32 [ %v6_133f0, %bb81 ], [ %v7_133f0, %bb82 ]
  %v0_133f415.in = phi i32 [ %v2_133e8, %bb81 ], [ %v7_133f0, %bb82 ]
  %v1_133f414.in = phi i32 [ %v5_133e8, %bb81 ], [ %v10_133f0, %bb82 ]
  %v1_133f414 = icmp slt i32 %v1_133f414.in, 0
  %v0_133f415 = icmp slt i32 %v0_133f415.in, 0
  %v2_133f4 = xor i1 %v0_133f415, %v1_133f414
  br i1 %v2_133f4, label %dec_label_pc_133f8, label %dec_label_pc_133c8

dec_label_pc_133f8:                               ; preds = %bb83
  %v1_133f8 = urem i32 %v0_133f8, 4
  %v2_133f8 = icmp eq i32 %v1_133f8, 0
  br i1 %v2_133f8, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_133f8
  %v3_133fc = icmp eq i32 %v1_133d4.v6_133d4.v6_133dc.v6_133e4, 0
  br i1 %v3_133fc, label %bb76, label %dec_label_pc_13404

dec_label_pc_13404:                               ; preds = %bb84, %dec_label_pc_133c0
  %v0_13418 = phi i32 [ %v3_133ec, %bb84 ], [ %v1_133b4, %dec_label_pc_133c0 ]
  %v1_13414 = phi i32 [ %v1_133d4.v6_133d4.v6_133dc.v6_133e4, %bb84 ], [ %v1_13380, %dec_label_pc_133c0 ]
  %v0_13404 = phi i32 [ %v0_133f8, %bb84 ], [ %v2_133c0, %dec_label_pc_133c0 ]
  %v5_13408 = icmp slt i32 %v0_13404, -2
  br i1 %v5_13408, label %dec_label_pc_13428, label %dec_label_pc_1340c

dec_label_pc_1340c:                               ; preds = %dec_label_pc_13404
  %v8_13404 = icmp eq i32 %v0_13404, -2
  br i1 %v8_13404, label %dec_label_pc_1341c, label %dec_label_pc_13410

dec_label_pc_13410:                               ; preds = %dec_label_pc_1340c
  %v3_13410 = icmp ult i32 %v1_13414, %v0_13418
  br i1 %v3_13410, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_13410
  %v2_13410 = sub i32 %v1_13414, %v0_13418
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_13410, %bb85
  %v0_1341c52 = phi i32 [ %v1_13414, %dec_label_pc_13410 ], [ %v2_13410, %bb85 ]
  %v3_13418 = udiv i32 %v0_13418, 2
  br label %dec_label_pc_1341c

dec_label_pc_1341c:                               ; preds = %dec_label_pc_1340c, %bb86
  %v0_13424 = phi i32 [ %v0_13418, %dec_label_pc_1340c ], [ %v3_13418, %bb86 ]
  %v1_13420 = phi i32 [ %v1_13414, %dec_label_pc_1340c ], [ %v0_1341c52, %bb86 ]
  %v3_1341c = icmp ult i32 %v1_13420, %v0_13424
  br i1 %v3_1341c, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_1341c
  %v2_1341c = sub i32 %v1_13420, %v0_13424
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_1341c, %bb87
  %v0_1342855 = phi i32 [ %v1_13420, %dec_label_pc_1341c ], [ %v2_1341c, %bb87 ]
  %v3_13424 = udiv i32 %v0_13424, 2
  br label %dec_label_pc_13428

dec_label_pc_13428:                               ; preds = %dec_label_pc_13404, %bb88
  %v2_1342c = phi i32 [ %v0_13418, %dec_label_pc_13404 ], [ %v3_13424, %bb88 ]
  %v1_1342c = phi i32 [ %v1_13414, %dec_label_pc_13404 ], [ %v0_1342855, %bb88 ]
  %v3_13428 = icmp ult i32 %v1_1342c, %v2_1342c
  br i1 %v3_13428, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_13428
  %v2_13428 = sub i32 %v1_1342c, %v2_1342c
  br label %bb76

dec_label_pc_13434:                               ; preds = %dec_label_pc_13378
  %v0_13434 = load i32, i32* @lr, align 4
  %v0_13438 = call i32 @function_13528()
  call void @__pseudo_branch(i32 %v0_13434)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1342c, { 1, 2, 0 }
  uselistorder i32 %v0_13418, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_133f8, { 1, 0, 2 }
  uselistorder i32 %v7_133f0, { 1, 0 }
  uselistorder i32 %v3_133ec, { 1, 0 }
  uselistorder i32 %v1_133d4.v6_133d4.v6_133dc.v6_133e4, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_133e0, { 1, 0 }
  uselistorder i32 %v4_133d8, { 1, 0 }
  uselistorder i32 %v4_133d0, { 1, 0 }
  uselistorder i32 %v6_133f0, { 3, 0, 2, 1 }
  uselistorder i32 %v2_133c0, { 1, 0 }
  uselistorder i32 %v1_133b4, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_133a0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_133ac.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13380, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_13428, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_1341c, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_133c8, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_13444(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13444:
  store i32 %arg1, i32* @r0, align 4
  %v2_13444 = icmp eq i32 %arg2, 0
  br i1 %v2_13444, label %dec_label_pc_13518, label %dec_label_pc_1344c

dec_label_pc_1344c:                               ; preds = %dec_label_pc_13444
  %v1_13444 = icmp slt i32 %arg2, 0
  br i1 %v1_13444, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_1344c
  %v2_1344c = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_1344c, %bb
  %v4_13464 = phi i32 [ %arg2, %dec_label_pc_1344c ], [ %v2_1344c, %bb ]
  %v0_13450 = load i32, i32* @r0, align 4
  %v1_13450 = icmp slt i32 %v0_13450, 0
  br i1 %v1_13450, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_13454 = sub i32 0, %v0_13450
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_1345c = phi i32 [ %v0_13450, %bb79 ], [ %v2_13454, %bb80 ]
  %v1_13458 = add i32 %v4_13464, -1
  %v7_13458 = icmp eq i32 %v4_13464, 1
  br i1 %v7_13458, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_1345c = icmp eq i32 %v1_1345c, %v4_13464
  br i1 %v10_1345c, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_1345c = icmp ult i32 %v1_1345c, %v4_13464
  br i1 %v4_1345c, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_13464 = and i32 %v1_13458, %v4_13464
  %v8_13464 = icmp eq i32 %v6_13464, 0
  br i1 %v8_13464, label %.thread72, label %dec_label_pc_13474.preheader

dec_label_pc_13474.preheader:                     ; preds = %bb84
  %v2_13474109 = icmp ugt i32 %v4_13464, 268435455
  br i1 %v2_13474109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1346864 = phi i32 [ %v1_1345c, %bb84 ], [ 0, %.thread70 ]
  %v3_13468 = and i32 %v1_1346864, %v1_13458
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_13474.preheader
  %v0_13488.pr35.lcssa = phi i32 [ %v4_13464, %dec_label_pc_13474.preheader ], [ %v4_1347c, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_13474.preheader ], [ %v2_134809, %.thread2.thread7 ]
  br label %dec_label_pc_13488thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_13474.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_134809, %.thread2.thread7 ], [ 0, %dec_label_pc_13474.preheader ]
  %v0_13488.pr35110 = phi i32 [ %v4_1347c, %.thread2.thread7 ], [ %v4_13464, %dec_label_pc_13474.preheader ]
  %v4_13478 = icmp ult i32 %v0_13488.pr35110, %v1_1345c
  br i1 %v4_13478, label %bb86, label %dec_label_pc_13488thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_1347c = and i32 %v0_13488.pr35110, 268435456
  %v3_1347c = icmp eq i32 %v2_1347c, 0
  %v4_1347c = mul i32 %v0_13488.pr35110, 16
  br i1 %v3_1347c, label %.thread2.thread7, label %dec_label_pc_13488.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_134809 = add i32 %storemerge111, 4
  %v2_13474 = icmp ugt i32 %v4_1347c, 268435455
  br i1 %v2_13474, label %.thread1, label %bb85

dec_label_pc_13488thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_13488thread-pre-split.loopexit

dec_label_pc_13488thread-pre-split.loopexit:      ; preds = %dec_label_pc_13488thread-pre-split.loopexit.loopexit, %.thread1
  %v0_13488.pr35108 = phi i32 [ %v0_13488.pr35.lcssa, %.thread1 ], [ %v0_13488.pr35110, %dec_label_pc_13488thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_13488thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13488thread-pre-split

dec_label_pc_13488thread-pre-split:               ; preds = %.thread4, %dec_label_pc_13488thread-pre-split.loopexit
  %v1_1349441 = phi i32 [ %storemerge105, %dec_label_pc_13488thread-pre-split.loopexit ], [ %v2_13494, %.thread4 ]
  %v2_1348c36 = phi i32 [ %v1_1345c, %dec_label_pc_13488thread-pre-split.loopexit ], [ %v2_1348c, %.thread4 ]
  %v0_13488.pr = phi i32 [ %v0_13488.pr35108, %dec_label_pc_13488thread-pre-split.loopexit ], [ %v3_13490, %.thread4 ]
  br label %dec_label_pc_13488

dec_label_pc_13488.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_13488

dec_label_pc_13488:                               ; preds = %dec_label_pc_13488.loopexit, %dec_label_pc_13488thread-pre-split
  %v0_1349c.pr = phi i32 [ %v1_1349441, %dec_label_pc_13488thread-pre-split ], [ %storemerge111, %dec_label_pc_13488.loopexit ]
  %v2_1348c = phi i32 [ %v2_1348c36, %dec_label_pc_13488thread-pre-split ], [ %v1_1345c, %dec_label_pc_13488.loopexit ]
  %v1_13490 = phi i32 [ %v0_13488.pr, %dec_label_pc_13488thread-pre-split ], [ %v4_1347c, %dec_label_pc_13488.loopexit ]
  %v2_13488 = icmp slt i32 %v1_13490, 0
  br i1 %v2_13488, label %dec_label_pc_1349c, label %bb87

bb87:                                             ; preds = %dec_label_pc_13488
  %v4_1348c = icmp ult i32 %v1_13490, %v2_1348c
  br i1 %v4_1348c, label %.thread4, label %dec_label_pc_1349c

.thread4:                                         ; preds = %bb87
  %v3_13490 = mul i32 %v1_13490, 2
  %v2_13494 = add i32 %v0_1349c.pr, 1
  br label %dec_label_pc_13488thread-pre-split

dec_label_pc_1349c:                               ; preds = %bb87, %dec_label_pc_13488
  %v2_1349c = add i32 %v0_1349c.pr, -3
  %v5_134a0 = icmp slt i32 %v0_1349c.pr, 3
  br i1 %v5_134a0, label %dec_label_pc_134e0, label %dec_label_pc_134a4

dec_label_pc_134a4:                               ; preds = %dec_label_pc_1349c, %bb91
  %v6_134cc = phi i32 [ %v0_134d4, %bb91 ], [ %v2_1349c, %dec_label_pc_1349c ]
  %v1_134a8 = phi i32 [ %v1_134b0.v6_134b0.v6_134b8.v6_134c0, %bb91 ], [ %v2_1348c, %dec_label_pc_1349c ]
  %v3_134c810 = phi i32 [ %v3_134c8, %bb91 ], [ %v1_13490, %dec_label_pc_1349c ]
  %v3_134a4 = icmp ult i32 %v1_134a8, %v3_134c810
  %v3_134a8 = select i1 %v3_134a4, i32 0, i32 %v3_134c810
  %v1_134b0 = sub i32 %v1_134a8, %v3_134a8
  %v4_134ac = udiv i32 %v3_134c810, 2
  %v6_134ac = icmp ult i32 %v1_134b0, %v4_134ac
  %v6_134b0 = select i1 %v6_134ac, i32 0, i32 %v4_134ac
  %v1_134b0.v6_134b0 = sub i32 %v1_134b0, %v6_134b0
  %.demorgan = and i1 %v3_134a4, %v6_134ac
  %v4_134b4 = udiv i32 %v3_134c810, 4
  %v6_134b4 = icmp ult i32 %v1_134b0.v6_134b0, %v4_134b4
  %v6_134b8 = select i1 %v6_134b4, i32 0, i32 %v4_134b4
  %v1_134b0.v6_134b0.v6_134b8 = sub i32 %v1_134b0.v6_134b0, %v6_134b8
  %.demorgan76 = and i1 %.demorgan, %v6_134b4
  %v4_134bc = udiv i32 %v3_134c810, 8
  %v6_134bc = icmp ult i32 %v1_134b0.v6_134b0.v6_134b8, %v4_134bc
  %v6_134c0 = select i1 %v6_134bc, i32 0, i32 %v4_134bc
  %v1_134b0.v6_134b0.v6_134b8.v6_134c0 = sub i32 %v1_134b0.v6_134b0.v6_134b8, %v6_134c0
  %.demorgan77 = and i1 %.demorgan76, %v6_134bc
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_134a4
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_134a4, %bb88
  %v2_134c4 = add i32 %v1_134b0.v6_134b0.v6_134b8.v6_134c0, -1
  %v4_134c4 = sub i32 0, %v1_134b0.v6_134b0.v6_134b8.v6_134c0
  %v5_134c4 = and i32 %v1_134b0.v6_134b0.v6_134b8.v6_134c0, %v4_134c4
  %v3_134c8 = udiv i32 %v3_134c810, 16
  %v5_134cc = icmp slt i32 %v1_134b0.v6_134b0.v6_134b8.v6_134c0, 1
  br i1 %v5_134cc, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_134cc = add i32 %v6_134cc, -4
  %v9_134cc = sub i32 3, %v6_134cc
  %v10_134cc = and i32 %v9_134cc, %v6_134cc
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_134d4 = phi i32 [ %v6_134cc, %bb89 ], [ %v7_134cc, %bb90 ]
  %v0_134d013.in = phi i32 [ %v2_134c4, %bb89 ], [ %v7_134cc, %bb90 ]
  %v1_134d012.in = phi i32 [ %v5_134c4, %bb89 ], [ %v10_134cc, %bb90 ]
  %v1_134d012 = icmp slt i32 %v1_134d012.in, 0
  %v0_134d013 = icmp slt i32 %v0_134d013.in, 0
  %v2_134d0 = xor i1 %v0_134d013, %v1_134d012
  br i1 %v2_134d0, label %dec_label_pc_134d4, label %dec_label_pc_134a4

dec_label_pc_134d4:                               ; preds = %bb91
  %v1_134d4 = urem i32 %v0_134d4, 4
  %v2_134d4 = icmp eq i32 %v1_134d4, 0
  br i1 %v2_134d4, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_134d4
  %v3_134d8 = icmp eq i32 %v1_134b0.v6_134b0.v6_134b8.v6_134c0, 0
  br i1 %v3_134d8, label %.thread6, label %dec_label_pc_134e0

dec_label_pc_134e0:                               ; preds = %bb92, %dec_label_pc_1349c
  %v0_134f4 = phi i32 [ %v3_134c8, %bb92 ], [ %v1_13490, %dec_label_pc_1349c ]
  %v1_134f0 = phi i32 [ %v1_134b0.v6_134b0.v6_134b8.v6_134c0, %bb92 ], [ %v2_1348c, %dec_label_pc_1349c ]
  %v0_134e0 = phi i32 [ %v0_134d4, %bb92 ], [ %v2_1349c, %dec_label_pc_1349c ]
  %v5_134e4 = icmp slt i32 %v0_134e0, -2
  br i1 %v5_134e4, label %dec_label_pc_13504, label %dec_label_pc_134e8

dec_label_pc_134e8:                               ; preds = %dec_label_pc_134e0
  %v8_134e0 = icmp eq i32 %v0_134e0, -2
  br i1 %v8_134e0, label %dec_label_pc_134f8, label %dec_label_pc_134ec

dec_label_pc_134ec:                               ; preds = %dec_label_pc_134e8
  %v3_134ec = icmp ult i32 %v1_134f0, %v0_134f4
  br i1 %v3_134ec, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_134ec
  %v2_134ec = sub i32 %v1_134f0, %v0_134f4
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_134ec, %bb93
  %v0_134f854 = phi i32 [ %v1_134f0, %dec_label_pc_134ec ], [ %v2_134ec, %bb93 ]
  %v3_134f4 = udiv i32 %v0_134f4, 2
  br label %dec_label_pc_134f8

dec_label_pc_134f8:                               ; preds = %dec_label_pc_134e8, %bb94
  %v0_13500 = phi i32 [ %v0_134f4, %dec_label_pc_134e8 ], [ %v3_134f4, %bb94 ]
  %v1_134fc = phi i32 [ %v1_134f0, %dec_label_pc_134e8 ], [ %v0_134f854, %bb94 ]
  %v3_134f8 = icmp ult i32 %v1_134fc, %v0_13500
  br i1 %v3_134f8, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_134f8
  %v2_134f8 = sub i32 %v1_134fc, %v0_13500
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_134f8, %bb95
  %v0_1350457 = phi i32 [ %v1_134fc, %dec_label_pc_134f8 ], [ %v2_134f8, %bb95 ]
  %v3_13500 = udiv i32 %v0_13500, 2
  br label %dec_label_pc_13504

dec_label_pc_13504:                               ; preds = %dec_label_pc_134e0, %bb96
  %v2_13508 = phi i32 [ %v0_134f4, %dec_label_pc_134e0 ], [ %v3_13500, %bb96 ]
  %v1_13508 = phi i32 [ %v1_134f0, %dec_label_pc_134e0 ], [ %v0_1350457, %bb96 ]
  %v3_13504 = icmp ult i32 %v1_13508, %v2_13508
  br i1 %v3_13504, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_13504
  %v2_13504 = sub i32 %v1_13508, %v2_13508
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_13504, %bb83, %.thread72, %dec_label_pc_134d4, %bb92, %bb97
  %v1_13510 = phi i32 [ %v1_134b0.v6_134b0.v6_134b8.v6_134c0, %dec_label_pc_134d4 ], [ 0, %bb92 ], [ %v1_13508, %dec_label_pc_13504 ], [ %v2_13504, %bb97 ], [ %v3_13468, %.thread72 ], [ %v1_1345c, %bb83 ]
  br i1 %v1_13450, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_13510 = sub i32 0, %v1_13510
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_13514 = phi i32 [ %v1_13510, %.thread6 ], [ %v2_13510, %bb98 ]
  ret i32 %v1_13514

dec_label_pc_13518:                               ; preds = %dec_label_pc_13444
  %v0_13518 = load i32, i32* @lr, align 4
  %v0_1351c = call i32 @function_13528()
  call void @__pseudo_branch(i32 %v0_13518)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_134f4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_134d4, { 1, 0, 2 }
  uselistorder i32 %v7_134cc, { 1, 0 }
  uselistorder i32 %v3_134c8, { 1, 0 }
  uselistorder i32 %v1_134b0.v6_134b0.v6_134b8.v6_134c0, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_134bc, { 1, 0 }
  uselistorder i32 %v4_134b4, { 1, 0 }
  uselistorder i32 %v4_134ac, { 1, 0 }
  uselistorder i32 %v6_134cc, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1349c, { 1, 0 }
  uselistorder i32 %v1_13490, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_1348c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_1347c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_13488.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1345c, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_13464, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_13528, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_13504, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_134f8, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_134a4, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_13528() local_unnamed_addr {
dec_label_pc_13528:
  %v1_13528 = load i32, i32* @r0, align 4
  ret i32 %v1_13528
}

define i32 @function_1352c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1352c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_1352c = load i32, i32* @r2, align 4
  %v1_1353c = add i32 %arg2, -12
  store i32 %v6_1352c, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_1353c, 2
  br i1 %tmp, label %dec_label_pc_13564, label %dec_label_pc_1355c

dec_label_pc_1355c:                               ; preds = %dec_label_pc_1352c
  %v0_1355c = call i32 @function_135a0()
  br label %dec_label_pc_13590

dec_label_pc_13564:                               ; preds = %dec_label_pc_1352c
  %v2_1356c = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_1356c, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_1356c, -4095
  br i1 %tmp8, label %dec_label_pc_13590, label %dec_label_pc_1357c

dec_label_pc_1357c:                               ; preds = %dec_label_pc_13564
  %v0_1357c = call i32 @function_13b98()
  %v0_13580 = load i32, i32* %r4.global-to-local, align 4
  %v1_13580 = sub i32 0, %v0_13580
  %v2_13584 = inttoptr i32 %v0_1357c to i32*
  store i32 %v1_13580, i32* %v2_13584, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13590

dec_label_pc_13590:                               ; preds = %dec_label_pc_1357c, %dec_label_pc_13564, %dec_label_pc_1355c
  %storemerge = phi i32 [ %v0_1355c, %dec_label_pc_1355c ], [ %v2_1356c, %dec_label_pc_13564 ], [ -1, %dec_label_pc_1357c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_1356c, { 1, 0, 2 }
}

define i32 @function_135a0() local_unnamed_addr {
dec_label_pc_135a0:
  %r4.global-to-local = alloca i32, align 4
  %v0_135c0 = load i32, i32* @r0, align 4
  store i32 %v0_135c0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_135c0, -4095
  br i1 %tmp, label %dec_label_pc_135dc, label %dec_label_pc_135cc

dec_label_pc_135cc:                               ; preds = %dec_label_pc_135a0
  %v0_135cc = call i32 @function_13b98()
  %v0_135d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_135d0 = sub i32 0, %v0_135d0
  %v2_135d4 = inttoptr i32 %v0_135cc to i32*
  store i32 %v1_135d0, i32* %v2_135d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_135dc

dec_label_pc_135dc:                               ; preds = %dec_label_pc_135a0, %dec_label_pc_135cc
  %v0_135dc = phi i32 [ %v0_135c0, %dec_label_pc_135a0 ], [ -1, %dec_label_pc_135cc ]
  ret i32 %v0_135dc

; uselistorder directives
  uselistorder i32 %v0_135c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_135dc, { 1, 0 }
}

define i32 @function_135f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_135f0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_135f0 = load i32, i32* @r4, align 4
  store i32 %v3_135f0, i32* %stack_var_-8, align 4
  %v1_135f4 = call i32 @close(i32 %arg1)
  store i32 %v1_135f4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_135f4, -4095
  br i1 %tmp, label %dec_label_pc_13614, label %dec_label_pc_13604

dec_label_pc_13604:                               ; preds = %dec_label_pc_135f0
  %v0_13604 = call i32 @function_13b98()
  %v0_13608 = load i32, i32* %r4.global-to-local, align 4
  %v1_13608 = sub i32 0, %v0_13608
  %v2_1360c = inttoptr i32 %v0_13604 to i32*
  store i32 %v1_13608, i32* %v2_1360c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13614

dec_label_pc_13614:                               ; preds = %dec_label_pc_135f0, %dec_label_pc_13604
  %v0_13614 = phi i32 [ %v1_135f4, %dec_label_pc_135f0 ], [ -1, %dec_label_pc_13604 ]
  %v2_13618 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13618, i32* @r4, align 4
  ret i32 %v0_13614

; uselistorder directives
  uselistorder i32 %v1_135f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13614, { 1, 0 }
}

define i32 @function_1361c() local_unnamed_addr {
dec_label_pc_1361c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1361c = load i32, i32* @r4, align 4
  store i32 %v3_1361c, i32* %stack_var_-8, align 4
  %v0_13620 = call i32 @fork()
  store i32 %v0_13620, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13620, -4095
  br i1 %tmp, label %dec_label_pc_13640, label %dec_label_pc_13630

dec_label_pc_13630:                               ; preds = %dec_label_pc_1361c
  %v0_13630 = call i32 @function_13b98()
  %v0_13634 = load i32, i32* %r4.global-to-local, align 4
  %v1_13634 = sub i32 0, %v0_13634
  %v2_13638 = inttoptr i32 %v0_13630 to i32*
  store i32 %v1_13634, i32* %v2_13638, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13640

dec_label_pc_13640:                               ; preds = %dec_label_pc_1361c, %dec_label_pc_13630
  %v0_13640 = phi i32 [ %v0_13620, %dec_label_pc_1361c ], [ -1, %dec_label_pc_13630 ]
  %v2_13644 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13644, i32* @r4, align 4
  ret i32 %v0_13640

; uselistorder directives
  uselistorder i32 %v0_13620, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13640, { 1, 0 }
}

define i32 @function_13648() local_unnamed_addr {
dec_label_pc_13648:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13648 = load i32, i32* @r4, align 4
  store i32 %v3_13648, i32* %stack_var_-8, align 4
  %v0_1364c = call i32 @getpid()
  store i32 %v0_1364c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1364c, -4095
  br i1 %tmp, label %dec_label_pc_1366c, label %dec_label_pc_1365c

dec_label_pc_1365c:                               ; preds = %dec_label_pc_13648
  %v0_1365c = call i32 @function_13b98()
  %v0_13660 = load i32, i32* %r4.global-to-local, align 4
  %v1_13660 = sub i32 0, %v0_13660
  %v2_13664 = inttoptr i32 %v0_1365c to i32*
  store i32 %v1_13660, i32* %v2_13664, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1366c

dec_label_pc_1366c:                               ; preds = %dec_label_pc_13648, %dec_label_pc_1365c
  %v0_1366c = phi i32 [ %v0_1364c, %dec_label_pc_13648 ], [ -1, %dec_label_pc_1365c ]
  %v2_13670 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13670, i32* @r4, align 4
  ret i32 %v0_1366c

; uselistorder directives
  uselistorder i32 %v0_1364c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1366c, { 1, 0 }
}

define i32 @function_13674() local_unnamed_addr {
dec_label_pc_13674:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13674 = load i32, i32* @r4, align 4
  store i32 %v3_13674, i32* %stack_var_-8, align 4
  %v0_13678 = call i32 @getppid()
  store i32 %v0_13678, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13678, -4095
  br i1 %tmp, label %dec_label_pc_13698, label %dec_label_pc_13688

dec_label_pc_13688:                               ; preds = %dec_label_pc_13674
  %v0_13688 = call i32 @function_13b98()
  %v0_1368c = load i32, i32* %r4.global-to-local, align 4
  %v1_1368c = sub i32 0, %v0_1368c
  %v2_13690 = inttoptr i32 %v0_13688 to i32*
  store i32 %v1_1368c, i32* %v2_13690, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13698

dec_label_pc_13698:                               ; preds = %dec_label_pc_13674, %dec_label_pc_13688
  %v0_13698 = phi i32 [ %v0_13678, %dec_label_pc_13674 ], [ -1, %dec_label_pc_13688 ]
  %v2_1369c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1369c, i32* @r4, align 4
  ret i32 %v0_13698

; uselistorder directives
  uselistorder i32 %v0_13678, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13698, { 1, 0 }
}

define i32 @function_136a0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_136a0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_136a0 = load i32, i32* @r3, align 4
  store i32 %v9_136a0, i32* %stack_var_-4, align 4
  %v2_136ac = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_136ac, i32* @r3, align 4
  %v2_136bc = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_136bc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_136bc, -4095
  br i1 %tmp, label %dec_label_pc_136dc, label %dec_label_pc_136cc

dec_label_pc_136cc:                               ; preds = %dec_label_pc_136a0
  %v0_136cc = call i32 @function_13b98()
  %v0_136d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_136d0 = sub i32 0, %v0_136d0
  store i32 %v1_136d0, i32* @r3, align 4
  %v2_136d4 = inttoptr i32 %v0_136cc to i32*
  store i32 %v1_136d0, i32* %v2_136d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136dc

dec_label_pc_136dc:                               ; preds = %dec_label_pc_136a0, %dec_label_pc_136cc
  %v0_136dc = phi i32 [ %v2_136bc, %dec_label_pc_136a0 ], [ -1, %dec_label_pc_136cc ]
  ret i32 %v0_136dc

; uselistorder directives
  uselistorder i32 %v2_136bc, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_136dc, { 1, 0 }
}

define i32 @function_136f0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_136f0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_136f0 = load i32, i32* @r4, align 4
  store i32 %v3_136f0, i32* %stack_var_-8, align 4
  %v2_136f4 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_136f8 = icmp eq i32 %v2_136f4, -4096
  store i1 %v7_136f8, i1* @cpsr_z, align 1
  store i32 %v2_136f4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_136f4, -4095
  br i1 %tmp, label %dec_label_pc_13714, label %dec_label_pc_13704

dec_label_pc_13704:                               ; preds = %dec_label_pc_136f0
  %v0_13704 = call i32 @function_13b98()
  %v0_13708 = load i32, i32* %r4.global-to-local, align 4
  %v1_13708 = sub i32 0, %v0_13708
  %v2_1370c = inttoptr i32 %v0_13704 to i32*
  store i32 %v1_13708, i32* %v2_1370c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13714

dec_label_pc_13714:                               ; preds = %dec_label_pc_136f0, %dec_label_pc_13704
  %v0_13714 = phi i32 [ %v2_136f4, %dec_label_pc_136f0 ], [ -1, %dec_label_pc_13704 ]
  %v2_13718 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13718, i32* @r4, align 4
  ret i32 %v0_13714

; uselistorder directives
  uselistorder i32 %v2_136f4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_13714, { 1, 0 }
}

define i32 @function_1371c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1371c:
  %r4.global-to-local = alloca i32, align 4
  %v6_1371c = load i32, i32* @r2, align 4
  %v1_1372c = and i32 %arg2, 64
  store i32 %v1_1372c, i32* @r3, align 4
  %v2_1372c = icmp eq i32 %v1_1372c, 0
  br i1 %v2_1372c, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_1371c
  store i32 %v6_1371c, i32* @r3, align 4
  %phitmp = urem i32 %v6_1371c, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1371c, %bb
  %v0_1373c = phi i32 [ 0, %dec_label_pc_1371c ], [ %phitmp, %bb ]
  store i32 %v0_1373c, i32* @r2, align 4
  %v4_13744 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_13748 = icmp eq i32 %v4_13744, -4096
  store i1 %v7_13748, i1* @cpsr_z, align 1
  store i32 %v4_13744, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13744, -4095
  br i1 %tmp, label %dec_label_pc_13764, label %dec_label_pc_13754

dec_label_pc_13754:                               ; preds = %.thread1
  %v0_13754 = call i32 @function_13b98()
  %v0_13758 = load i32, i32* %r4.global-to-local, align 4
  %v1_13758 = sub i32 0, %v0_13758
  store i32 %v1_13758, i32* @r3, align 4
  %v2_1375c = inttoptr i32 %v0_13754 to i32*
  store i32 %v1_13758, i32* %v2_1375c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13764

dec_label_pc_13764:                               ; preds = %.thread1, %dec_label_pc_13754
  %v0_13764 = phi i32 [ %v4_13744, %.thread1 ], [ -1, %dec_label_pc_13754 ]
  ret i32 %v0_13764

; uselistorder directives
  uselistorder i32 %v4_13744, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_13764, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_13778(i32 %arg1) local_unnamed_addr {
dec_label_pc_13778:
  store i32 %arg1, i32* @r2, align 4
  %v0_13780 = load i32, i32* @r0, align 4
  %v2_13780 = inttoptr i32 %v0_13780 to i8*
  %v3_13780 = call i32 @function_1371c(i8* %v2_13780, i32 577)
  %v0_13784 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13784, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13778
  %v6_13784 = and i32 %v3_13780, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13778, %bb
  %v7_13784 = phi i32 [ %v3_13780, %dec_label_pc_13778 ], [ %v6_13784, %bb ]
  ret i32 %v7_13784

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_13788(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13788:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13788 = load i32, i32* @r4, align 4
  store i32 %v3_13788, i32* %stack_var_-8, align 4
  %v2_13790 = load i32, i32* @r2, align 4
  %v3_13790 = load i32, i32* @r3, align 4
  %v4_13790 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_13790, i32 %v3_13790, i32 0)
  store i32 %v4_13790, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13790, -4095
  br i1 %tmp, label %dec_label_pc_137b0, label %dec_label_pc_137a0

dec_label_pc_137a0:                               ; preds = %dec_label_pc_13788
  %v0_137a0 = call i32 @function_13b98()
  %v0_137a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_137a4 = sub i32 0, %v0_137a4
  %v2_137a8 = inttoptr i32 %v0_137a0 to i32*
  store i32 %v1_137a4, i32* %v2_137a8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137b0

dec_label_pc_137b0:                               ; preds = %dec_label_pc_13788, %dec_label_pc_137a0
  %v0_137b0 = phi i32 [ %v4_13790, %dec_label_pc_13788 ], [ -1, %dec_label_pc_137a0 ]
  %v2_137b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137b4, i32* @r4, align 4
  ret i32 %v0_137b0

; uselistorder directives
  uselistorder i32 %v4_13790, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137b0, { 1, 0 }
}

define i32 @function_137b8(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_137b8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_137b8 = load i32, i32* @r4, align 4
  store i32 %v3_137b8, i32* %stack_var_-8, align 4
  %v4_137bc = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_137bc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_137bc, -4095
  br i1 %tmp, label %dec_label_pc_137dc, label %dec_label_pc_137cc

dec_label_pc_137cc:                               ; preds = %dec_label_pc_137b8
  %v0_137cc = call i32 @function_13b98()
  %v0_137d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_137d0 = sub i32 0, %v0_137d0
  %v2_137d4 = inttoptr i32 %v0_137cc to i32*
  store i32 %v1_137d0, i32* %v2_137d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137dc

dec_label_pc_137dc:                               ; preds = %dec_label_pc_137b8, %dec_label_pc_137cc
  %v0_137dc = phi i32 [ %v4_137bc, %dec_label_pc_137b8 ], [ -1, %dec_label_pc_137cc ]
  %v2_137e0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137e0, i32* @r4, align 4
  ret i32 %v0_137dc

; uselistorder directives
  uselistorder i32 %v4_137bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137dc, { 1, 0 }
}

define i32 @function_137e4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_137e4:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_137e4 = load i32, i32* @r4, align 4
  store i32 %v3_137e4, i32* %stack_var_-8, align 4
  %v7_137e8 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_137e8, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_137e8, -4095
  br i1 %tmp6, label %dec_label_pc_13808, label %dec_label_pc_137f8

dec_label_pc_137f8:                               ; preds = %dec_label_pc_137e4
  %v0_137f8 = call i32 @function_13b98()
  %v0_137fc = load i32, i32* %r4.global-to-local, align 4
  %v1_137fc = sub i32 0, %v0_137fc
  %v2_13800 = inttoptr i32 %v0_137f8 to i32*
  store i32 %v1_137fc, i32* %v2_13800, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13808

dec_label_pc_13808:                               ; preds = %dec_label_pc_137e4, %dec_label_pc_137f8
  %v0_13808 = phi i32 [ %v7_137e8, %dec_label_pc_137e4 ], [ -1, %dec_label_pc_137f8 ]
  %v2_1380c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1380c, i32* @r4, align 4
  ret i32 %v0_13808

; uselistorder directives
  uselistorder i32 %v7_137e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13808, { 1, 0 }
}

define i32 @function_13810(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13810:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13810 = load i32, i32* @r4, align 4
  store i32 %v3_13810, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13838, label %dec_label_pc_13828

dec_label_pc_13828:                               ; preds = %dec_label_pc_13810
  %v0_13828 = call i32 @function_13b98()
  %v0_1382c = load i32, i32* %r4.global-to-local, align 4
  %v1_1382c = sub i32 0, %v0_1382c
  %v2_13830 = inttoptr i32 %v0_13828 to i32*
  store i32 %v1_1382c, i32* %v2_13830, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1383c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13838

dec_label_pc_13838:                               ; preds = %dec_label_pc_13810, %dec_label_pc_13828
  %v2_1383c = phi i32 [ %v3_13810, %dec_label_pc_13810 ], [ %v2_1383c.pre, %dec_label_pc_13828 ]
  %v0_13838 = phi i32 [ %arg1, %dec_label_pc_13810 ], [ -1, %dec_label_pc_13828 ]
  store i32 %v2_1383c, i32* @r4, align 4
  ret i32 %v0_13838

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13838, { 1, 0 }
}

define i32 @function_13840(i32 %arg1) local_unnamed_addr {
dec_label_pc_13840:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13840 = load i32, i32* @r4, align 4
  store i32 %v3_13840, i32* %stack_var_-8, align 4
  %v0_13844 = call i32 @setsid()
  store i32 %v0_13844, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13844, -4095
  br i1 %tmp, label %dec_label_pc_13864, label %dec_label_pc_13854

dec_label_pc_13854:                               ; preds = %dec_label_pc_13840
  %v0_13854 = call i32 @function_13b98()
  %v0_13858 = load i32, i32* %r4.global-to-local, align 4
  %v1_13858 = sub i32 0, %v0_13858
  %v2_1385c = inttoptr i32 %v0_13854 to i32*
  store i32 %v1_13858, i32* %v2_1385c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13864

dec_label_pc_13864:                               ; preds = %dec_label_pc_13840, %dec_label_pc_13854
  %v0_13864 = phi i32 [ %v0_13844, %dec_label_pc_13840 ], [ -1, %dec_label_pc_13854 ]
  %v2_13868 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13868, i32* @r4, align 4
  ret i32 %v0_13864

; uselistorder directives
  uselistorder i32 %v0_13844, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13864, { 1, 0 }
}

define i32 @function_1386c(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1386c:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1386c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_1386c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1386c
  %v3_138745 = load i32, i32* @r4, align 4
  store i32 %v3_138745, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13894

bb:                                               ; preds = %dec_label_pc_1386c
  %v3_13874 = load i32, i32* @r4, align 4
  store i32 %v3_13874, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_13894, label %dec_label_pc_13880

dec_label_pc_13880:                               ; preds = %bb
  %v0_13880 = call i32 @function_13b98()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1388c = inttoptr i32 %v0_13880 to i32*
  store i32 22, i32* %v2_1388c, align 4
  %v0_138b8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_138b8

dec_label_pc_13894:                               ; preds = %.thread, %bb
  %v7_13894 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_13894, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_13894, -4095
  br i1 %tmp13, label %dec_label_pc_138b4, label %dec_label_pc_138a4

dec_label_pc_138a4:                               ; preds = %dec_label_pc_13894
  %v0_138a4 = call i32 @function_13b98()
  %v0_138a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_138a8 = sub i32 0, %v0_138a8
  %v2_138ac = inttoptr i32 %v0_138a4 to i32*
  store i32 %v1_138a8, i32* %v2_138ac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_138b4

dec_label_pc_138b4:                               ; preds = %dec_label_pc_13894, %dec_label_pc_138a4
  %v0_138b4 = phi i32 [ %v7_13894, %dec_label_pc_13894 ], [ -1, %dec_label_pc_138a4 ]
  store i32 %v0_138b4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_138b8

dec_label_pc_138b8:                               ; preds = %dec_label_pc_13880, %dec_label_pc_138b4
  %v0_138b8 = phi i32 [ %v0_138b8.pre, %dec_label_pc_13880 ], [ %v0_138b4, %dec_label_pc_138b4 ]
  %v2_138bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_138bc, i32* @r4, align 4
  ret i32 %v0_138b8

; uselistorder directives
  uselistorder i32 %v7_13894, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_138b8, { 1, 0 }
  uselistorder label %dec_label_pc_138b4, { 1, 0 }
  uselistorder label %dec_label_pc_13894, { 1, 0 }
}

define i32 @function_138c0(i32* %arg1) local_unnamed_addr {
dec_label_pc_138c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_138c0 = load i32, i32* @r4, align 4
  store i32 %v3_138c0, i32* %stack_var_-8, align 4
  %v2_138c4 = call i32 @time(i32* %arg1)
  store i32 %v2_138c4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_138c4, -4095
  br i1 %tmp, label %dec_label_pc_138e4, label %dec_label_pc_138d4

dec_label_pc_138d4:                               ; preds = %dec_label_pc_138c0
  %v0_138d4 = call i32 @function_13b98()
  %v0_138d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_138d8 = sub i32 0, %v0_138d8
  %v2_138dc = inttoptr i32 %v0_138d4 to i32*
  store i32 %v1_138d8, i32* %v2_138dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_138e4

dec_label_pc_138e4:                               ; preds = %dec_label_pc_138c0, %dec_label_pc_138d4
  %v0_138e4 = phi i32 [ %v2_138c4, %dec_label_pc_138c0 ], [ -1, %dec_label_pc_138d4 ]
  %v2_138e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_138e8, i32* @r4, align 4
  ret i32 %v0_138e4

; uselistorder directives
  uselistorder i32 %v2_138c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138e4, { 1, 0 }
}

define i32 @function_138ec(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_138ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_138ec = load i32, i32* @r4, align 4
  store i32 %v3_138ec, i32* %stack_var_-8, align 4
  %v4_138f0 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_138f0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_138f0, -4095
  br i1 %tmp, label %dec_label_pc_13910, label %dec_label_pc_13900

dec_label_pc_13900:                               ; preds = %dec_label_pc_138ec
  %v0_13900 = call i32 @function_13b98()
  %v0_13904 = load i32, i32* %r4.global-to-local, align 4
  %v1_13904 = sub i32 0, %v0_13904
  %v2_13908 = inttoptr i32 %v0_13900 to i32*
  store i32 %v1_13904, i32* %v2_13908, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13910

dec_label_pc_13910:                               ; preds = %dec_label_pc_138ec, %dec_label_pc_13900
  %v0_13910 = phi i32 [ %v4_138f0, %dec_label_pc_138ec ], [ -1, %dec_label_pc_13900 ]
  %v2_13914 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13914, i32* @r4, align 4
  ret i32 %v0_13910

; uselistorder directives
  uselistorder i32 %v4_138f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13910, { 1, 0 }
}

define i32 @function_13918(i32* %arg1) local_unnamed_addr {
dec_label_pc_13918:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13918 = load i32, i32* @r4, align 4
  store i32 %v3_13918, i32* %stack_var_-20, align 4
  %v6_13918 = load i32, i32* @r5, align 4
  %v9_13918 = load i32, i32* @r6, align 4
  %v12_13918 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_13920 = load i32, i32* %arg1, align 4
  store i32 %v2_13920, i32* %r4.global-to-local, align 4
  %v2_13924 = ptrtoint i32* %stack_var_-36 to i32
  %v1_13928 = add i32 %tmp, 24
  store i32 %v1_13928, i32* @r6, align 4
  %v3_1392c = icmp eq i32 %v2_13920, -1
  store i32 %v2_13924, i32* @r7, align 4
  store i32 %v1_13928, i32* %r2.global-to-local, align 4
  store i32 %v2_13924, i32* @r0, align 4
  br i1 %v3_1392c, label %dec_label_pc_13944, label %dec_label_pc_13958

dec_label_pc_13944:                               ; preds = %dec_label_pc_13918
  %v0_13944 = call i32 @function_13b98()
  %v0_1394c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1394c, i32* %r2.global-to-local, align 4
  %v2_13950 = inttoptr i32 %v0_13944 to i32*
  store i32 9, i32* %v2_13950, align 4
  %v0_139b0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_139b0

dec_label_pc_13958:                               ; preds = %dec_label_pc_13918
  %v8_13960 = call i32 @function_14a64(i32 %v2_13924, i32 ptrtoint (i32* @global_var_14a5c.844 to i32), i32 %v1_13928, i32 84580, i32 %v3_13918, i32 %v6_13918, i32 %v9_13918)
  %v1_13970 = call i32 @function_14a5c()
  %v0_1397c = load i32, i32* @r5, align 4
  %v1_1397c = inttoptr i32 %v0_1397c to i32*
  %v2_1397c = load i32, i32* %v1_1397c, align 4
  store i32 %v2_1397c, i32* @r4, align 4
  store i32 %v2_13924, i32* @r0, align 4
  store i32 -1, i32* %v1_1397c, align 4
  store i32 ptrtoint (i32* @global_var_13994.848 to i32), i32* @lr, align 4
  %v8_13990 = call i32 @function_14a64(i32 %v2_13924, i32 1, i32 %v1_13928, i32 84580, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13994 = load i32, i32* @r5, align 4
  %v1_13994 = add i32 %v0_13994, 12
  %v2_13994 = inttoptr i32 %v1_13994 to i32*
  %v3_13994 = load i32, i32* %v2_13994, align 4
  store i32 %v3_13994, i32* @r0, align 4
  %v0_13998 = call i32 @function_14220()
  %v0_1399c = load i32, i32* @r5, align 4
  store i32 %v0_1399c, i32* @r0, align 4
  %v0_139a0 = call i32 @function_14220()
  %v0_139a4 = load i32, i32* @r4, align 4
  %v1_139a8 = call i32 @function_135f0(i32 %v0_139a4)
  store i32 %v1_139a8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_139b0

dec_label_pc_139b0:                               ; preds = %dec_label_pc_13944, %dec_label_pc_13958
  %v0_139b0 = phi i32 [ %v0_139b0.pre, %dec_label_pc_13944 ], [ %v1_139a8, %dec_label_pc_13958 ]
  %v2_139b8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_139b8, i32* @r4, align 4
  store i32 %v6_13918, i32* @r5, align 4
  store i32 %v9_13918, i32* @r6, align 4
  store i32 %v12_13918, i32* @r7, align 4
  ret i32 %v0_139b0

; uselistorder directives
  uselistorder i32 %v1_13928, { 2, 1, 0, 3 }
  uselistorder i32 %v2_13924, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_13918, { 1, 0 }
  uselistorder i32 %v6_13918, { 1, 0 }
  uselistorder label %dec_label_pc_139b0, { 1, 0 }
}

define i32 @function_139cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_139cc:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_139cc = load i32, i32* @r4, align 4
  %v9_139cc = load i32, i32* @r6, align 4
  %v12_139cc = load i32, i32* @r7, align 4
  %v0_139d8 = load i32, i32* @r0, align 4
  %v2_139d8 = inttoptr i32 %v0_139d8 to i8*
  %v3_139d8 = call i32 @function_1371c(i8* %v2_139d8, i32 18432)
  store i32 %v3_139d8, i32* @r0, align 4
  store i32 %v3_139d8, i32* @r7, align 4
  %v1_139dc = icmp slt i32 %v3_139d8, 0
  br i1 %v1_139dc, label %.thread1, label %dec_label_pc_139e8

.thread1:                                         ; preds = %dec_label_pc_139cc
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_13ab8

dec_label_pc_139e8:                               ; preds = %dec_label_pc_139cc
  %v2_139d4 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_139d4, i32* @r1, align 4
  %v0_139ec = call i32 @function_14e88()
  %v1_139f0 = icmp slt i32 %v0_139ec, 0
  br i1 %v1_139f0, label %dec_label_pc_13a10, label %dec_label_pc_139f8

dec_label_pc_139f8:                               ; preds = %dec_label_pc_139e8
  %v0_139f8 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_13a04 = call i32 @function_1352c(i32 %v0_139f8, i32 2)
  %v1_13a08 = icmp slt i32 %v2_13a04, 0
  br i1 %v1_13a08, label %dec_label_pc_13a10, label %dec_label_pc_13a30

dec_label_pc_13a10:                               ; preds = %dec_label_pc_139f8, %dec_label_pc_139e8
  %v0_13a10 = call i32 @function_13b98()
  store i32 %v0_13a10, i32* %r5.global-to-local, align 4
  %v0_13a18 = load i32, i32* @r7, align 4
  %v1_13a1c = inttoptr i32 %v0_13a10 to i32*
  %v2_13a1c = load i32, i32* %v1_13a1c, align 4
  store i32 %v2_13a1c, i32* @r4, align 4
  %v1_13a20 = call i32 @function_135f0(i32 %v0_13a18)
  store i32 0, i32* @r6, align 4
  %v0_13a28 = load i32, i32* @r4, align 4
  %v1_13a28 = load i32, i32* %r5.global-to-local, align 4
  %v2_13a28 = inttoptr i32 %v1_13a28 to i32*
  store i32 %v0_13a28, i32* %v2_13a28, align 4
  br label %dec_label_pc_13ab8

dec_label_pc_13a30:                               ; preds = %dec_label_pc_139f8
  %v1_13a34 = call i32 @function_14074(i32 48)
  store i32 %v1_13a34, i32* @r6, align 4
  %v2_13a38 = icmp eq i32 %v1_13a34, 0
  br i1 %v2_13a38, label %dec_label_pc_13a88, label %dec_label_pc_13a40

dec_label_pc_13a40:                               ; preds = %dec_label_pc_13a30
  store i32 0, i32* @r4, align 4
  %v2_13a44 = add i32 %v1_13a34, 16
  %v3_13a44 = inttoptr i32 %v2_13a44 to i32*
  store i32 0, i32* %v3_13a44, align 4
  %v2_13a4c = icmp ugt i32 %tmp, 511
  %v1_13a50 = load i32, i32* @r6, align 4
  %v2_13a50 = add i32 %v1_13a50, 20
  %v3_13a50 = inttoptr i32 %v2_13a50 to i32*
  store i32 %tmp, i32* %v3_13a50, align 4
  br i1 %v2_13a4c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13a40
  %v2_13a58 = load i32, i32* @r6, align 4
  %v3_13a58 = add i32 %v2_13a58, 20
  %v4_13a58 = inttoptr i32 %v3_13a58 to i32*
  store i32 512, i32* %v4_13a58, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13a40, %bb
  %v0_13a5c = load i32, i32* @r7, align 4
  %v1_13a5c = load i32, i32* @r6, align 4
  %v2_13a5c = inttoptr i32 %v1_13a5c to i32*
  store i32 %v0_13a5c, i32* %v2_13a5c, align 4
  %v0_13a60 = load i32, i32* @r4, align 4
  %v1_13a60 = load i32, i32* @r6, align 4
  %v2_13a60 = add i32 %v1_13a60, 8
  %v3_13a60 = inttoptr i32 %v2_13a60 to i32*
  store i32 %v0_13a60, i32* %v3_13a60, align 4
  %v0_13a64 = load i32, i32* @r4, align 4
  %v1_13a64 = load i32, i32* @r6, align 4
  %v2_13a64 = add i32 %v1_13a64, 4
  %v3_13a64 = inttoptr i32 %v2_13a64 to i32*
  store i32 %v0_13a64, i32* %v3_13a64, align 4
  %v0_13a6c = load i32, i32* @r6, align 4
  %v1_13a6c = add i32 %v0_13a6c, 20
  %v2_13a6c = inttoptr i32 %v1_13a6c to i32*
  %v3_13a6c = load i32, i32* %v2_13a6c, align 4
  %v2_13a70 = call i32 @function_141c8(i32 1, i32 %v3_13a6c)
  %v2_13a74 = icmp eq i32 %v2_13a70, 0
  %v1_13a78 = load i32, i32* @r6, align 4
  %v2_13a78 = add i32 %v1_13a78, 12
  %v3_13a78 = inttoptr i32 %v2_13a78 to i32*
  store i32 %v2_13a70, i32* %v3_13a78, align 4
  br i1 %v2_13a74, label %dec_label_pc_13a80, label %dec_label_pc_13aa4

dec_label_pc_13a80:                               ; preds = %.thread
  %v0_13a80 = load i32, i32* @r6, align 4
  store i32 %v0_13a80, i32* @r0, align 4
  %v0_13a84 = call i32 @function_14220()
  br label %dec_label_pc_13a88

dec_label_pc_13a88:                               ; preds = %dec_label_pc_13a30, %dec_label_pc_13a80
  %v0_13a88 = load i32, i32* @r7, align 4
  %v1_13a8c = call i32 @function_135f0(i32 %v0_13a88)
  %v0_13a90 = call i32 @function_13b98()
  store i32 0, i32* @r6, align 4
  %v2_13a9c = inttoptr i32 %v0_13a90 to i32*
  store i32 12, i32* %v2_13a9c, align 4
  br label %dec_label_pc_13ab8

dec_label_pc_13aa4:                               ; preds = %.thread
  store i32 80568, i32* @lr, align 4
  %v1_13ab4 = call i32 @function_14a5c()
  br label %dec_label_pc_13ab8

dec_label_pc_13ab8:                               ; preds = %.thread1, %dec_label_pc_13a88, %dec_label_pc_13a10, %dec_label_pc_13aa4
  %v0_13ab8 = load i32, i32* @r6, align 4
  store i32 %v3_139cc, i32* @r4, align 4
  store i32 %v9_139cc, i32* @r6, align 4
  store i32 %v12_139cc, i32* @r7, align 4
  ret i32 %v0_13ab8

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_141c8, { 34, 35, 33, 32, 31, 2, 1, 30, 29, 28, 27, 26, 25, 24, 23, 3, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 0 }
  uselistorder i32 512, { 1, 8, 11, 9, 2, 3, 12, 10, 4, 13, 5, 14, 6, 15, 0, 16, 7, 17 }
  uselistorder i32 511, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_135f0, { 21, 20, 19, 12, 37, 33, 36, 32, 35, 34, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 18, 17, 16, 15, 2, 14, 13, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder label %dec_label_pc_13ab8, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_13a88, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13ac8(i32* %arg1) local_unnamed_addr {
dec_label_pc_13ac8:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13ac8 = load i32, i32* @r4, align 4
  %v6_13ac8 = load i32, i32* @r5, align 4
  %v9_13ac8 = load i32, i32* @lr, align 4
  %v1_13acc = add i32 %tmp, 24
  store i32 %v1_13acc, i32* @r4, align 4
  %v2_13ad0 = ptrtoint i32* %stack_var_-28 to i32
  store i32 84580, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_13ad0, i32* @r0, align 4
  store i32 %v1_13acc, i32* %r2.global-to-local, align 4
  %v8_13aec = call i32 @function_14a64(i32 %v2_13ad0, i32 ptrtoint (i32* @global_var_14a5c.844 to i32), i32 %v1_13acc, i32 84580, i32 %v3_13ac8, i32 %v6_13ac8, i32 %v9_13ac8)
  %v0_13af0 = load i32, i32* @r4, align 4
  store i32 %v0_13af0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14a5c.844 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13b00.853 to i32), i32* @lr, align 4
  %v1_13afc = call i32 @function_14a5c()
  store i32 %v1_13afc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13b00

dec_label_pc_13b00:                               ; preds = %dec_label_pc_13b34, %dec_label_pc_13ac8
  %v0_13b00 = load i32, i32* @r5, align 4
  %v1_13b00 = add i32 %v0_13b00, 4
  %v2_13b00 = inttoptr i32 %v1_13b00 to i32*
  %v3_13b00 = load i32, i32* %v2_13b00, align 4
  store i32 %v3_13b00, i32* %r2.global-to-local, align 4
  %v4_13b00 = add i32 %v0_13b00, 8
  %v5_13b00 = inttoptr i32 %v4_13b00 to i32*
  %v6_13b00 = load i32, i32* %v5_13b00, align 4
  store i32 %v6_13b00, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_13b00, %v3_13b00
  br i1 %tmp8, label %dec_label_pc_13b34, label %dec_label_pc_13b0c

dec_label_pc_13b0c:                               ; preds = %dec_label_pc_13b00
  %v1_13b0c = inttoptr i32 %v0_13b00 to i32*
  %v2_13b0c = load i32, i32* %v1_13b0c, align 4
  store i32 %v2_13b0c, i32* @r0, align 4
  %v1_13b10 = add i32 %v0_13b00, 12
  %v2_13b10 = inttoptr i32 %v1_13b10 to i32*
  %v3_13b10 = load i32, i32* %v2_13b10, align 4
  %v1_13b14 = add i32 %v0_13b00, 20
  %v2_13b14 = inttoptr i32 %v1_13b14 to i32*
  %v3_13b14 = load i32, i32* %v2_13b14, align 4
  store i32 %v3_13b14, i32* @r2, align 4
  %v4_13b18 = call i32 @function_14ed8(i32 %v2_13b0c, i32 %v3_13b10, i32 %v3_13b14, i32 %v6_13b00)
  store i32 %v4_13b18, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_13b18, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_13b28

.thread:                                          ; preds = %dec_label_pc_13b0c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13b68

dec_label_pc_13b28:                               ; preds = %dec_label_pc_13b0c
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13b2c = load i32, i32* @r5, align 4
  %v2_13b2c = add i32 %v1_13b2c, 4
  %v3_13b2c = inttoptr i32 %v2_13b2c to i32*
  store i32 0, i32* %v3_13b2c, align 4
  %v1_13b30 = load i32, i32* @r5, align 4
  %v2_13b30 = add i32 %v1_13b30, 8
  %v3_13b30 = inttoptr i32 %v2_13b30 to i32*
  store i32 %v4_13b18, i32* %v3_13b30, align 4
  %v0_13b34.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13b34

dec_label_pc_13b34:                               ; preds = %dec_label_pc_13b00, %dec_label_pc_13b28
  %v1_13b4c = phi i32 [ %v0_13b00, %dec_label_pc_13b00 ], [ %v0_13b34.pre, %dec_label_pc_13b28 ]
  %v1_13b34 = add i32 %v1_13b4c, 4
  %v2_13b34 = inttoptr i32 %v1_13b34 to i32*
  %v3_13b34 = load i32, i32* %v2_13b34, align 4
  store i32 %v3_13b34, i32* %r2.global-to-local, align 4
  %v1_13b38 = add i32 %v1_13b4c, 12
  %v2_13b38 = inttoptr i32 %v1_13b38 to i32*
  %v3_13b38 = load i32, i32* %v2_13b38, align 4
  store i32 %v3_13b38, i32* %ip.global-to-local, align 4
  %v2_13b3c = add i32 %v3_13b38, %v3_13b34
  store i32 %v2_13b3c, i32* @r4, align 4
  %v1_13b40 = add i32 %v2_13b3c, 4
  %v2_13b40 = inttoptr i32 %v1_13b40 to i32*
  %v3_13b40 = load i32, i32* %v2_13b40, align 4
  %v1_13b44 = add i32 %v2_13b3c, 8
  %v2_13b44 = inttoptr i32 %v1_13b44 to i8*
  %v3_13b44 = load i8, i8* %v2_13b44, align 1
  %v4_13b44 = zext i8 %v3_13b44 to i32
  store i32 %v4_13b44, i32* %r3.global-to-local, align 4
  %v1_13b48 = add i32 %v2_13b3c, 9
  %v2_13b48 = inttoptr i32 %v1_13b48 to i8*
  %v3_13b48 = load i8, i8* %v2_13b48, align 1
  %v4_13b48 = zext i8 %v3_13b48 to i32
  store i32 %v4_13b48, i32* %r0.global-to-local, align 4
  %v2_13b4c = add i32 %v1_13b4c, 16
  %v3_13b4c = inttoptr i32 %v2_13b4c to i32*
  store i32 %v3_13b40, i32* %v3_13b4c, align 4
  %v0_13b50 = load i32, i32* %r2.global-to-local, align 4
  %v1_13b50 = load i32, i32* %ip.global-to-local, align 4
  %v2_13b50 = add i32 %v1_13b50, %v0_13b50
  %v3_13b50 = inttoptr i32 %v2_13b50 to i32*
  %v4_13b50 = load i32, i32* %v3_13b50, align 4
  %v0_13b54 = load i32, i32* %r3.global-to-local, align 4
  %v1_13b54 = load i32, i32* %r0.global-to-local, align 4
  %v4_13b54 = mul i32 %v1_13b54, 256
  %v5_13b54 = or i32 %v4_13b54, %v0_13b54
  store i32 %v5_13b54, i32* %r3.global-to-local, align 4
  %v2_13b58 = add i32 %v5_13b54, %v0_13b50
  store i32 %v2_13b58, i32* @r2, align 4
  %v2_13b5c = icmp eq i32 %v4_13b50, 0
  %v1_13b60 = load i32, i32* @r5, align 4
  %v2_13b60 = add i32 %v1_13b60, 4
  %v3_13b60 = inttoptr i32 %v2_13b60 to i32*
  store i32 %v2_13b58, i32* %v3_13b60, align 4
  br i1 %v2_13b5c, label %dec_label_pc_13b00, label %dec_label_pc_13b68

dec_label_pc_13b68:                               ; preds = %dec_label_pc_13b34, %.thread
  store i32 %v2_13ad0, i32* @r0, align 4
  store i32 84580, i32* %r3.global-to-local, align 4
  store i32 80764, i32* @lr, align 4
  %v3_13b78 = load i32, i32* @r2, align 4
  %v8_13b78 = call i32 @function_14a64(i32 %v2_13ad0, i32 1, i32 %v3_13b78, i32 84580, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13b7c = load i32, i32* @r4, align 4
  store i32 %v0_13b7c, i32* %r0.global-to-local, align 4
  store i32 %v3_13ac8, i32* @r4, align 4
  store i32 %v6_13ac8, i32* @r5, align 4
  ret i32 %v0_13b7c

; uselistorder directives
  uselistorder i32 %v1_13b4c, { 0, 2, 1 }
  uselistorder i32 %v6_13b00, { 1, 0, 2 }
  uselistorder i32 %v0_13b00, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_13ad0, { 1, 0, 3, 2 }
  uselistorder i32 %v1_13acc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_13b34, { 1, 0 }
}

define i32 @function_13b98() local_unnamed_addr {
dec_label_pc_13b98:
  ret i32 ptrtoint (i32* @global_var_1f22c.856 to i32)
}

define i32 @function_13ba4(i32 %arg1) local_unnamed_addr {
dec_label_pc_13ba4:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_13bb0 = bitcast i32* %stack_var_-20 to %tms*
  %v2_13bb0 = call i32 @function_15268(%tms* %v1_13bb0)
  %v2_13bb8 = load i32, i32* %stack_var_-20, align 4
  %v2_13bbc = add i32 %v2_13bb8, %tmp
  %v2_13bc4 = mul i32 %v2_13bbc, 10000
  %v1_13bc8 = and i32 %v2_13bc4, 2147483632
  ret i32 %v1_13bc8

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_13bd4(i32 %arg1) local_unnamed_addr {
dec_label_pc_13bd4:
  %v0_13bd4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13bd4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_13bd4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_13bd4, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_13be0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13be0:
  %v0_13be0 = call i32 @function_15670()
  ret i32 %v0_13be0
}

define i32 @function_13bf0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13bf0:
  %v0_13bf0 = call i32 @function_15670()
  ret i32 %v0_13bf0

; uselistorder directives
  uselistorder i32 ()* @function_15670, { 1, 0 }
}

define i32 @function_13c00(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c00:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_13c04 = load i32, i32* @r2, align 4
  %v8_13c04 = icmp eq i32 %v0_13c04, 8
  store i1 %v8_13c04, i1* %cpsr_z.global-to-local, align 1
  %v5_13c08 = icmp slt i32 %v0_13c04, 8
  br i1 %v5_13c08, label %dec_label_pc_13c68, label %dec_label_pc_13c0c

dec_label_pc_13c0c:                               ; preds = %dec_label_pc_13c00
  %v4_13c0c = mul i32 %arg2, 256
  %v5_13c0c = or i32 %v4_13c0c, %arg2
  %v4_13c10 = mul i32 %v5_13c0c, 65536
  %v5_13c10 = or i32 %v4_13c10, %v5_13c0c
  store i32 %v5_13c10, i32* %r1.global-to-local, align 4
  %v1_13c1457 = urem i32 %tmp, 4
  %v2_13c1458 = icmp eq i32 %v1_13c1457, 0
  store i1 %v2_13c1458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_13c1458, label %dec_label_pc_13c24, label %bb

bb:                                               ; preds = %dec_label_pc_13c0c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_13c0c ]
  %v3_13c1859 = phi i32 [ %v6_13c18, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_13c0c ]
  %v4_13c18 = inttoptr i32 %v3_13c1859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_13c18, align 1
  %v5_13c18 = load i32, i32* %r3.global-to-local, align 4
  %v6_13c18 = add i32 %v5_13c18, 1
  store i32 %v6_13c18, i32* %r3.global-to-local, align 4
  %v0_13c1c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_13c28.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_13c1c.pr, label %dec_label_pc_13c24, label %.thread

.thread:                                          ; preds = %bb
  %v2_13c1c = add i32 %v0_13c28.pr.pre, -1
  store i32 %v2_13c1c, i32* @r2, align 4
  %v1_13c14 = urem i32 %v6_13c18, 4
  %v2_13c14 = icmp eq i32 %v1_13c14, 0
  store i1 %v2_13c14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13c14, label %dec_label_pc_13c24, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_13c18.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_13c18.pre to i8
  br label %bb

dec_label_pc_13c24:                               ; preds = %.thread, %bb, %dec_label_pc_13c0c
  %v0_13c3028 = phi i32 [ %tmp, %dec_label_pc_13c0c ], [ %v6_13c18, %bb ], [ %v6_13c18, %.thread ]
  %v0_13c28.pr = phi i32 [ %v0_13c04, %dec_label_pc_13c0c ], [ %v0_13c28.pr.pre, %bb ], [ %v2_13c1c, %.thread ]
  %v0_13c24 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13c24, i32* %ip.global-to-local, align 4
  %v8_13c2810 = icmp eq i32 %v0_13c28.pr, 8
  store i1 %v8_13c2810, i1* %cpsr_z.global-to-local, align 1
  %v5_13c2c11 = icmp slt i32 %v0_13c28.pr, 8
  br i1 %v5_13c2c11, label %dec_label_pc_13c68, label %dec_label_pc_13c30.preheader

dec_label_pc_13c30.preheader:                     ; preds = %dec_label_pc_13c24
  %v1_13c3046 = inttoptr i32 %v0_13c3028 to i32*
  store i32 %v0_13c24, i32* %v1_13c3046, align 4
  %v3_13c3047 = add i32 %v0_13c3028, 4
  %v4_13c3048 = inttoptr i32 %v3_13c3047 to i32*
  %v5_13c3049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13c3049, i32* %v4_13c3048, align 4
  %v6_13c3050 = add i32 %v0_13c3028, 8
  store i32 %v6_13c3050, i32* %r3.global-to-local, align 4
  %v0_13c3451 = load i32, i32* @r2, align 4
  %v1_13c3452 = add i32 %v0_13c3451, -8
  store i32 %v1_13c3452, i32* %r2.global-to-local, align 4
  %v5_13c3c53 = icmp slt i32 %v1_13c3452, 8
  br i1 %v5_13c3c53, label %dec_label_pc_13c30.dec_label_pc_13c68.loopexit_crit_edge, label %dec_label_pc_13c40

dec_label_pc_13c40:                               ; preds = %dec_label_pc_13c30.preheader, %dec_label_pc_13c28.dec_label_pc_13c30_crit_edge
  %v6_13c3055 = phi i32 [ %v6_13c30, %dec_label_pc_13c28.dec_label_pc_13c30_crit_edge ], [ %v6_13c3050, %dec_label_pc_13c30.preheader ]
  %v0_13c3054 = phi i32 [ %v12_13c5c, %dec_label_pc_13c28.dec_label_pc_13c30_crit_edge ], [ %v0_13c3028, %dec_label_pc_13c30.preheader ]
  %v1_13c40 = inttoptr i32 %v6_13c3055 to i32*
  %v2_13c40 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13c40, i32* %v1_13c40, align 4
  %v3_13c40 = add i32 %v0_13c3054, 12
  %v4_13c40 = inttoptr i32 %v3_13c40 to i32*
  %v5_13c40 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13c40, i32* %v4_13c40, align 4
  %v6_13c40 = add i32 %v0_13c3054, 16
  store i32 %v6_13c40, i32* %r3.global-to-local, align 4
  %v0_13c44 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c44 = add i32 %v0_13c44, -8
  store i32 %v1_13c44, i32* %r2.global-to-local, align 4
  %v5_13c4c = icmp slt i32 %v1_13c44, 8
  br i1 %v5_13c4c, label %dec_label_pc_13c40.dec_label_pc_13c68.loopexit_crit_edge, label %dec_label_pc_13c50

dec_label_pc_13c50:                               ; preds = %dec_label_pc_13c40
  %v1_13c50 = inttoptr i32 %v6_13c40 to i32*
  %v2_13c50 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13c50, i32* %v1_13c50, align 4
  %v3_13c50 = add i32 %v0_13c3054, 20
  %v4_13c50 = inttoptr i32 %v3_13c50 to i32*
  %v5_13c50 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13c50, i32* %v4_13c50, align 4
  %v6_13c50 = add i32 %v0_13c3054, 24
  store i32 %v6_13c50, i32* %r3.global-to-local, align 4
  %v0_13c54 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c54 = add i32 %v0_13c54, -8
  store i32 %v1_13c54, i32* %r2.global-to-local, align 4
  %v5_13c5c = icmp slt i32 %v1_13c54, 8
  br i1 %v5_13c5c, label %dec_label_pc_13c50.dec_label_pc_13c68.loopexit_crit_edge, label %dec_label_pc_13c28

dec_label_pc_13c28:                               ; preds = %dec_label_pc_13c50
  %v7_13c5c = inttoptr i32 %v6_13c50 to i32*
  %v8_13c5c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_13c5c, i32* %v7_13c5c, align 4
  %v9_13c5c = add i32 %v0_13c3054, 28
  %v10_13c5c = inttoptr i32 %v9_13c5c to i32*
  %v11_13c5c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_13c5c, i32* %v10_13c5c, align 4
  %v12_13c5c = add i32 %v0_13c3054, 32
  store i32 %v12_13c5c, i32* %r3.global-to-local, align 4
  %v6_13c60 = load i32, i32* %r2.global-to-local, align 4
  %v7_13c60 = add i32 %v6_13c60, -8
  store i32 %v7_13c60, i32* %r2.global-to-local, align 4
  %v5_13c2c = icmp slt i32 %v7_13c60, 8
  br i1 %v5_13c2c, label %dec_label_pc_13c28.dec_label_pc_13c68.loopexit_crit_edge, label %dec_label_pc_13c28.dec_label_pc_13c30_crit_edge

dec_label_pc_13c28.dec_label_pc_13c30_crit_edge:  ; preds = %dec_label_pc_13c28
  %v2_13c30.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13c30 = inttoptr i32 %v12_13c5c to i32*
  store i32 %v2_13c30.pre, i32* %v1_13c30, align 4
  %v3_13c30 = add i32 %v0_13c3054, 36
  %v4_13c30 = inttoptr i32 %v3_13c30 to i32*
  %v5_13c30 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13c30, i32* %v4_13c30, align 4
  %v6_13c30 = add i32 %v0_13c3054, 40
  store i32 %v6_13c30, i32* %r3.global-to-local, align 4
  %v0_13c34 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c34 = add i32 %v0_13c34, -8
  store i32 %v1_13c34, i32* %r2.global-to-local, align 4
  %v5_13c3c = icmp slt i32 %v1_13c34, 8
  br i1 %v5_13c3c, label %dec_label_pc_13c30.dec_label_pc_13c68.loopexit_crit_edge, label %dec_label_pc_13c40

dec_label_pc_13c30.dec_label_pc_13c68.loopexit_crit_edge: ; preds = %dec_label_pc_13c28.dec_label_pc_13c30_crit_edge, %dec_label_pc_13c30.preheader
  %v1_13c34.lcssa = phi i32 [ %v1_13c3452, %dec_label_pc_13c30.preheader ], [ %v1_13c34, %dec_label_pc_13c28.dec_label_pc_13c30_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13c68

dec_label_pc_13c28.dec_label_pc_13c68.loopexit_crit_edge: ; preds = %dec_label_pc_13c28
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13c68

dec_label_pc_13c40.dec_label_pc_13c68.loopexit_crit_edge: ; preds = %dec_label_pc_13c40
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13c68

dec_label_pc_13c50.dec_label_pc_13c68.loopexit_crit_edge: ; preds = %dec_label_pc_13c50
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13c68

dec_label_pc_13c68:                               ; preds = %dec_label_pc_13c24, %dec_label_pc_13c30.dec_label_pc_13c68.loopexit_crit_edge, %dec_label_pc_13c28.dec_label_pc_13c68.loopexit_crit_edge, %dec_label_pc_13c40.dec_label_pc_13c68.loopexit_crit_edge, %dec_label_pc_13c50.dec_label_pc_13c68.loopexit_crit_edge, %dec_label_pc_13c00
  %v0_13c70 = phi i32 [ %v0_13c04, %dec_label_pc_13c00 ], [ %v1_13c54, %dec_label_pc_13c50.dec_label_pc_13c68.loopexit_crit_edge ], [ %v1_13c44, %dec_label_pc_13c40.dec_label_pc_13c68.loopexit_crit_edge ], [ %v7_13c60, %dec_label_pc_13c28.dec_label_pc_13c68.loopexit_crit_edge ], [ %v1_13c34.lcssa, %dec_label_pc_13c30.dec_label_pc_13c68.loopexit_crit_edge ], [ %v0_13c28.pr, %dec_label_pc_13c24 ]
  %v2_13c68 = icmp eq i32 %v0_13c70, 0
  store i1 %v2_13c68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13c68, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_13c68
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_13c68
  %v1_13c70 = sub i32 7, %v0_13c70
  store i32 %v1_13c70, i32* %r2.global-to-local, align 4
  %v3_13c74 = mul i32 %v1_13c70, 4
  %v4_13c74 = add i32 %v3_13c74, ptrtoint (i32* @global_var_13c7c.858 to i32)
  call void @__pseudo_branch(i32 %v4_13c74)
  %v0_13c7c = load i32, i32* %r1.global-to-local, align 4
  %v1_13c7c = trunc i32 %v0_13c7c to i8
  %v2_13c7c = load i32, i32* %r3.global-to-local, align 4
  %v3_13c7c = inttoptr i32 %v2_13c7c to i8*
  store i8 %v1_13c7c, i8* %v3_13c7c, align 1
  %v4_13c7c = load i32, i32* %r3.global-to-local, align 4
  %v5_13c7c = add i32 %v4_13c7c, 1
  store i32 %v5_13c7c, i32* %r3.global-to-local, align 4
  %v0_13c80 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c80 = trunc i32 %v0_13c80 to i8
  %v3_13c80 = inttoptr i32 %v5_13c7c to i8*
  store i8 %v1_13c80, i8* %v3_13c80, align 1
  %v4_13c80 = load i32, i32* %r3.global-to-local, align 4
  %v5_13c80 = add i32 %v4_13c80, 1
  store i32 %v5_13c80, i32* %r3.global-to-local, align 4
  %v0_13c84 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c84 = trunc i32 %v0_13c84 to i8
  %v3_13c84 = inttoptr i32 %v5_13c80 to i8*
  store i8 %v1_13c84, i8* %v3_13c84, align 1
  %v4_13c84 = load i32, i32* %r3.global-to-local, align 4
  %v5_13c84 = add i32 %v4_13c84, 1
  store i32 %v5_13c84, i32* %r3.global-to-local, align 4
  %v0_13c88 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c88 = trunc i32 %v0_13c88 to i8
  %v3_13c88 = inttoptr i32 %v5_13c84 to i8*
  store i8 %v1_13c88, i8* %v3_13c88, align 1
  %v4_13c88 = load i32, i32* %r3.global-to-local, align 4
  %v5_13c88 = add i32 %v4_13c88, 1
  store i32 %v5_13c88, i32* %r3.global-to-local, align 4
  %v0_13c8c = load i32, i32* %r1.global-to-local, align 4
  %v1_13c8c = trunc i32 %v0_13c8c to i8
  %v3_13c8c = inttoptr i32 %v5_13c88 to i8*
  store i8 %v1_13c8c, i8* %v3_13c8c, align 1
  %v4_13c8c = load i32, i32* %r3.global-to-local, align 4
  %v5_13c8c = add i32 %v4_13c8c, 1
  store i32 %v5_13c8c, i32* %r3.global-to-local, align 4
  %v0_13c90 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c90 = trunc i32 %v0_13c90 to i8
  %v3_13c90 = inttoptr i32 %v5_13c8c to i8*
  store i8 %v1_13c90, i8* %v3_13c90, align 1
  %v4_13c90 = load i32, i32* %r3.global-to-local, align 4
  %v5_13c90 = add i32 %v4_13c90, 1
  store i32 %v5_13c90, i32* %r3.global-to-local, align 4
  %v0_13c94 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c94 = trunc i32 %v0_13c94 to i8
  %v3_13c94 = inttoptr i32 %v5_13c90 to i8*
  store i8 %v1_13c94, i8* %v3_13c94, align 1
  %v4_13c94 = load i32, i32* %r3.global-to-local, align 4
  %v5_13c94 = add i32 %v4_13c94, 1
  store i32 %v5_13c94, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_13c30, { 1, 0 }
  uselistorder i32 %v12_13c5c, { 1, 2, 0 }
  uselistorder i32 %v0_13c3054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_13c28.pr, { 0, 2, 1 }
  uselistorder i32 %v6_13c18, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_13c0c, { 1, 0 }
  uselistorder i32 %v0_13c04, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 8, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 4, 3, 0, 2, 1, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13c68, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_13c40, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_13ca0(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_13ca0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_13ca0 = sub i32 %arg1, %tmp
  %v1_13ca4 = add i32 %v2_13ca0, -1
  store i32 %v1_13ca4, i32* %r2.global-to-local, align 4
  %v2_13ca84 = load i8, i8* %arg2, align 1
  %v5_13ca86 = add i32 %tmp, 1
  store i32 %v5_13ca86, i32* %r1.global-to-local, align 4
  %v2_13cac7 = icmp eq i8 %v2_13ca84, 0
  store i1 %v2_13cac7, i1* %cpsr_z.global-to-local, align 1
  %v5_13cb08 = inttoptr i32 %arg1 to i8*
  store i8 %v2_13ca84, i8* %v5_13cb08, align 1
  %v0_13cb49 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13cb49, label %dec_label_pc_13cb8, label %dec_label_pc_13ca8.dec_label_pc_13ca8_crit_edge

dec_label_pc_13ca8.dec_label_pc_13ca8_crit_edge:  ; preds = %dec_label_pc_13ca0, %dec_label_pc_13ca8.dec_label_pc_13ca8_crit_edge
  %v0_13ca8.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_13cb0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13ca8 = inttoptr i32 %v0_13ca8.pre to i8*
  %v2_13ca8 = load i8, i8* %v1_13ca8, align 1
  %v5_13ca8 = add i32 %v0_13ca8.pre, 1
  store i32 %v5_13ca8, i32* %r1.global-to-local, align 4
  %v2_13cac = icmp eq i8 %v2_13ca8, 0
  store i1 %v2_13cac, i1* %cpsr_z.global-to-local, align 1
  %v4_13cb0 = add i32 %v5_13ca8, %v3_13cb0.pre
  %v5_13cb0 = inttoptr i32 %v4_13cb0 to i8*
  store i8 %v2_13ca8, i8* %v5_13cb0, align 1
  %v0_13cb4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13cb4, label %dec_label_pc_13cb8, label %dec_label_pc_13ca8.dec_label_pc_13ca8_crit_edge

dec_label_pc_13cb8:                               ; preds = %dec_label_pc_13ca8.dec_label_pc_13ca8_crit_edge, %dec_label_pc_13ca0
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 2, 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ca8.dec_label_pc_13ca8_crit_edge, { 1, 0 }
}

define i32 @function_13cbc(i32 %arg1) local_unnamed_addr {
dec_label_pc_13cbc:
  %stack_var_-8 = alloca i32, align 4
  %v2_13cc0 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_13cc0, i32* @r1, align 4
  %v0_13cc8 = call i32 @function_15b00()
  %v2_13ccc = icmp eq i32 %v0_13cc8, 0
  br i1 %v2_13ccc, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13cbc
  %v3_13cd4 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_13cbc, %bb
  %v5_13cdc = phi i32 [ -1, %dec_label_pc_13cbc ], [ %v3_13cd4, %bb ]
  ret i32 %v5_13cdc

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_13ce0(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13ce0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ce0 = load i32, i32* @r4, align 4
  store i32 %v3_13ce0, i32* %stack_var_-8, align 4
  %v5_13ce4 = inttoptr i32 %arg3 to i32*
  %v6_13ce4 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_13ce4)
  store i32 %v6_13ce4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13ce4, -4095
  br i1 %tmp, label %dec_label_pc_13d04, label %dec_label_pc_13cf4

dec_label_pc_13cf4:                               ; preds = %dec_label_pc_13ce0
  %v0_13cf4 = call i32 @function_13b98()
  %v0_13cf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13cf8 = sub i32 0, %v0_13cf8
  %v2_13cfc = inttoptr i32 %v0_13cf4 to i32*
  store i32 %v1_13cf8, i32* %v2_13cfc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d04

dec_label_pc_13d04:                               ; preds = %dec_label_pc_13ce0, %dec_label_pc_13cf4
  %v0_13d04 = phi i32 [ %v6_13ce4, %dec_label_pc_13ce0 ], [ -1, %dec_label_pc_13cf4 ]
  %v2_13d08 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d08, i32* @r4, align 4
  ret i32 %v0_13d04

; uselistorder directives
  uselistorder i32 %v6_13ce4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d04, { 1, 0 }
}

define i32 @function_13d0c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13d0c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d0c = load i32, i32* @r4, align 4
  store i32 %v3_13d0c, i32* %stack_var_-8, align 4
  %v5_13d10 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13d10, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d10, -4095
  br i1 %tmp, label %dec_label_pc_13d30, label %dec_label_pc_13d20

dec_label_pc_13d20:                               ; preds = %dec_label_pc_13d0c
  %v0_13d20 = call i32 @function_13b98()
  %v0_13d24 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d24 = sub i32 0, %v0_13d24
  %v2_13d28 = inttoptr i32 %v0_13d20 to i32*
  store i32 %v1_13d24, i32* %v2_13d28, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d30

dec_label_pc_13d30:                               ; preds = %dec_label_pc_13d0c, %dec_label_pc_13d20
  %v0_13d30 = phi i32 [ %v5_13d10, %dec_label_pc_13d0c ], [ -1, %dec_label_pc_13d20 ]
  %v2_13d34 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d34, i32* @r4, align 4
  ret i32 %v0_13d30

; uselistorder directives
  uselistorder i32 %v5_13d10, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d30, { 1, 0 }
}

define i32 @function_13d38(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13d38:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d38 = load i32, i32* @r4, align 4
  store i32 %v3_13d38, i32* %stack_var_-8, align 4
  %v5_13d3c = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13d3c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d3c, -4095
  br i1 %tmp, label %dec_label_pc_13d5c, label %dec_label_pc_13d4c

dec_label_pc_13d4c:                               ; preds = %dec_label_pc_13d38
  %v0_13d4c = call i32 @function_13b98()
  %v0_13d50 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d50 = sub i32 0, %v0_13d50
  %v2_13d54 = inttoptr i32 %v0_13d4c to i32*
  store i32 %v1_13d50, i32* %v2_13d54, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d5c

dec_label_pc_13d5c:                               ; preds = %dec_label_pc_13d38, %dec_label_pc_13d4c
  %v0_13d5c = phi i32 [ %v5_13d3c, %dec_label_pc_13d38 ], [ -1, %dec_label_pc_13d4c ]
  %v2_13d60 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d60, i32* @r4, align 4
  ret i32 %v0_13d5c

; uselistorder directives
  uselistorder i32 %v5_13d3c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d5c, { 1, 0 }
}

define i32 @function_13d64(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13d64:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d64 = load i32, i32* @r4, align 4
  store i32 %v3_13d64, i32* %stack_var_-8, align 4
  %v5_13d68 = inttoptr i32 %arg3 to i32*
  %v6_13d68 = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_13d68)
  store i32 %v6_13d68, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13d68, -4095
  br i1 %tmp, label %dec_label_pc_13d88, label %dec_label_pc_13d78

dec_label_pc_13d78:                               ; preds = %dec_label_pc_13d64
  %v0_13d78 = call i32 @function_13b98()
  %v0_13d7c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d7c = sub i32 0, %v0_13d7c
  %v2_13d80 = inttoptr i32 %v0_13d78 to i32*
  store i32 %v1_13d7c, i32* %v2_13d80, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d88

dec_label_pc_13d88:                               ; preds = %dec_label_pc_13d64, %dec_label_pc_13d78
  %v0_13d88 = phi i32 [ %v6_13d68, %dec_label_pc_13d64 ], [ -1, %dec_label_pc_13d78 ]
  %v2_13d8c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d8c, i32* @r4, align 4
  ret i32 %v0_13d88

; uselistorder directives
  uselistorder i32 %v6_13d68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d88, { 1, 0 }
}

define i32 @function_13d90(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13d90:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d90 = load i32, i32* @r4, align 4
  store i32 %v3_13d90, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13d98 = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_13d98, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d98, -4095
  br i1 %tmp, label %dec_label_pc_13db8, label %dec_label_pc_13da8

dec_label_pc_13da8:                               ; preds = %dec_label_pc_13d90
  %v0_13da8 = call i32 @function_13b98()
  %v0_13dac = load i32, i32* %r4.global-to-local, align 4
  %v1_13dac = sub i32 0, %v0_13dac
  %v2_13db0 = inttoptr i32 %v0_13da8 to i32*
  store i32 %v1_13dac, i32* %v2_13db0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13db8

dec_label_pc_13db8:                               ; preds = %dec_label_pc_13d90, %dec_label_pc_13da8
  %v0_13db8 = phi i32 [ %v5_13d98, %dec_label_pc_13d90 ], [ -1, %dec_label_pc_13da8 ]
  %v2_13dbc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13dbc, i32* @r4, align 4
  ret i32 %v0_13db8

; uselistorder directives
  uselistorder i32 %v5_13d98, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13db8, { 1, 0 }
}

define i32 @function_13dc0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13dc0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13dc0 = load i32, i32* @r4, align 4
  store i32 %v3_13dc0, i32* %stack_var_-8, align 4
  %v2_13dc4 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_13dc4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13dc4, -4095
  br i1 %tmp, label %dec_label_pc_13de4, label %dec_label_pc_13dd4

dec_label_pc_13dd4:                               ; preds = %dec_label_pc_13dc0
  %v0_13dd4 = call i32 @function_13b98()
  %v0_13dd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13dd8 = sub i32 0, %v0_13dd8
  %v2_13ddc = inttoptr i32 %v0_13dd4 to i32*
  store i32 %v1_13dd8, i32* %v2_13ddc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13de4

dec_label_pc_13de4:                               ; preds = %dec_label_pc_13dc0, %dec_label_pc_13dd4
  %v0_13de4 = phi i32 [ %v2_13dc4, %dec_label_pc_13dc0 ], [ -1, %dec_label_pc_13dd4 ]
  %v2_13de8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13de8, i32* @r4, align 4
  ret i32 %v0_13de4

; uselistorder directives
  uselistorder i32 %v2_13dc4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13de4, { 1, 0 }
}

define i32 @function_13dec(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13dec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13dec = load i32, i32* @r4, align 4
  store i32 %v3_13dec, i32* %stack_var_-8, align 4
  %v5_13df0 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13df0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13df0, -4095
  br i1 %tmp, label %dec_label_pc_13e10, label %dec_label_pc_13e00

dec_label_pc_13e00:                               ; preds = %dec_label_pc_13dec
  %v0_13e00 = call i32 @function_13b98()
  %v0_13e04 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e04 = sub i32 0, %v0_13e04
  %v2_13e08 = inttoptr i32 %v0_13e00 to i32*
  store i32 %v1_13e04, i32* %v2_13e08, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e10

dec_label_pc_13e10:                               ; preds = %dec_label_pc_13dec, %dec_label_pc_13e00
  %v0_13e10 = phi i32 [ %v5_13df0, %dec_label_pc_13dec ], [ -1, %dec_label_pc_13e00 ]
  %v2_13e14 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e14, i32* @r4, align 4
  ret i32 %v0_13e10

; uselistorder directives
  uselistorder i32 %v5_13df0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e10, { 1, 0 }
}

define i32 @function_13e18(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13e18:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13e18 = load i32, i32* @r4, align 4
  store i32 %v3_13e18, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13e24 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_13e24, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13e24, -4095
  br i1 %tmp, label %dec_label_pc_13e44, label %dec_label_pc_13e34

dec_label_pc_13e34:                               ; preds = %dec_label_pc_13e18
  %v0_13e34 = call i32 @function_13b98()
  %v0_13e38 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e38 = sub i32 0, %v0_13e38
  %v2_13e3c = inttoptr i32 %v0_13e34 to i32*
  store i32 %v1_13e38, i32* %v2_13e3c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e44

dec_label_pc_13e44:                               ; preds = %dec_label_pc_13e18, %dec_label_pc_13e34
  %v0_13e44 = phi i32 [ %v5_13e24, %dec_label_pc_13e18 ], [ -1, %dec_label_pc_13e34 ]
  %v2_13e48 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13e48, i32* @r4, align 4
  ret i32 %v0_13e44

; uselistorder directives
  uselistorder i32 %v5_13e24, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e44, { 1, 0 }
}

define i32 @function_13e4c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13e4c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e4c = load i32, i32* @r4, align 4
  store i32 %v3_13e4c, i32* %stack_var_-8, align 4
  %v5_13e50 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13e50, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13e50, -4095
  br i1 %tmp, label %dec_label_pc_13e70, label %dec_label_pc_13e60

dec_label_pc_13e60:                               ; preds = %dec_label_pc_13e4c
  %v0_13e60 = call i32 @function_13b98()
  %v0_13e64 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e64 = sub i32 0, %v0_13e64
  %v2_13e68 = inttoptr i32 %v0_13e60 to i32*
  store i32 %v1_13e64, i32* %v2_13e68, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13e70

dec_label_pc_13e70:                               ; preds = %dec_label_pc_13e4c, %dec_label_pc_13e60
  %v0_13e70 = phi i32 [ %v5_13e50, %dec_label_pc_13e4c ], [ -1, %dec_label_pc_13e60 ]
  %v2_13e74 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e74, i32* @r4, align 4
  ret i32 %v0_13e70

; uselistorder directives
  uselistorder i32 %v5_13e50, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e70, { 1, 0 }
}

define i32 @function_13e78(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13e78:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13e78 = load i32, i32* @r4, align 4
  store i32 %v3_13e78, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13e84 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_13e84, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13e84, -4095
  br i1 %tmp, label %dec_label_pc_13ea4, label %dec_label_pc_13e94

dec_label_pc_13e94:                               ; preds = %dec_label_pc_13e78
  %v0_13e94 = call i32 @function_13b98()
  %v0_13e98 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e98 = sub i32 0, %v0_13e98
  %v2_13e9c = inttoptr i32 %v0_13e94 to i32*
  store i32 %v1_13e98, i32* %v2_13e9c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13ea4

dec_label_pc_13ea4:                               ; preds = %dec_label_pc_13e78, %dec_label_pc_13e94
  %v0_13ea4 = phi i32 [ %v5_13e84, %dec_label_pc_13e78 ], [ -1, %dec_label_pc_13e94 ]
  %v2_13ea8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13ea8, i32* @r4, align 4
  ret i32 %v0_13ea4

; uselistorder directives
  uselistorder i32 %v5_13e84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ea4, { 1, 0 }
}

define i32 @function_13eac(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13eac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13eac = load i32, i32* @r4, align 4
  store i32 %v3_13eac, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13eb4 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_13eb4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13eb4, -4095
  br i1 %tmp, label %dec_label_pc_13ed4, label %dec_label_pc_13ec4

dec_label_pc_13ec4:                               ; preds = %dec_label_pc_13eac
  %v0_13ec4 = call i32 @function_13b98()
  %v0_13ec8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ec8 = sub i32 0, %v0_13ec8
  %v2_13ecc = inttoptr i32 %v0_13ec4 to i32*
  store i32 %v1_13ec8, i32* %v2_13ecc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13ed4

dec_label_pc_13ed4:                               ; preds = %dec_label_pc_13eac, %dec_label_pc_13ec4
  %v0_13ed4 = phi i32 [ %v5_13eb4, %dec_label_pc_13eac ], [ -1, %dec_label_pc_13ec4 ]
  %v2_13ed8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13ed8, i32* @r4, align 4
  ret i32 %v0_13ed4

; uselistorder directives
  uselistorder i32 %v5_13eb4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ed4, { 1, 0 }
}

define i32 @function_13edc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13edc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13edc = load i32, i32* @r4, align 4
  store i32 %v3_13edc, i32* %stack_var_-8, align 4
  %v3_13ee0 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_13ee0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13ee0, -4095
  br i1 %tmp, label %dec_label_pc_13f00, label %dec_label_pc_13ef0

dec_label_pc_13ef0:                               ; preds = %dec_label_pc_13edc
  %v0_13ef0 = call i32 @function_13b98()
  %v0_13ef4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ef4 = sub i32 0, %v0_13ef4
  %v2_13ef8 = inttoptr i32 %v0_13ef0 to i32*
  store i32 %v1_13ef4, i32* %v2_13ef8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f00

dec_label_pc_13f00:                               ; preds = %dec_label_pc_13edc, %dec_label_pc_13ef0
  %v0_13f00 = phi i32 [ %v3_13ee0, %dec_label_pc_13edc ], [ -1, %dec_label_pc_13ef0 ]
  %v2_13f04 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13f04, i32* @r4, align 4
  ret i32 %v0_13f00

; uselistorder directives
  uselistorder i32 %v3_13ee0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13f00, { 1, 0 }
}

define i32 @function_13f08(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13f08:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_13f24, label %dec_label_pc_13f14

dec_label_pc_13f14:                               ; preds = %dec_label_pc_13f08
  %v8_13f18 = icmp sgt i32 %arg1, 64
  br i1 %v8_13f18, label %dec_label_pc_13f24, label %dec_label_pc_13f1c

dec_label_pc_13f1c:                               ; preds = %dec_label_pc_13f14
  %v0_13f20 = call i32 @function_1402c()
  br label %dec_label_pc_13f24

dec_label_pc_13f24:                               ; preds = %dec_label_pc_13f14, %dec_label_pc_13f08, %dec_label_pc_13f1c
  %v0_13f24 = call i32 @function_13b98()
  %v2_13f2c = inttoptr i32 %v0_13f24 to i32*
  store i32 22, i32* %v2_13f2c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13f24, { 2, 0, 1 }
}

define i32 @function_13f38(i32 %arg1) local_unnamed_addr {
dec_label_pc_13f38:
  store i32 128, i32* @r2, align 4
  %v0_13f44 = load i32, i32* @r0, align 4
  %v2_13f44 = inttoptr i32 %v0_13f44 to i8*
  %v3_13f44 = call i32 @function_13c00(i8* %v2_13f44, i32 0)
  ret i32 0
}

define i32 @function_13f50(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13f50:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13f50 = load i32, i32* @r4, align 4
  store i32 %v3_13f50, i32* %stack_var_-12, align 4
  %v6_13f50 = load i32, i32* @r5, align 4
  %v10_13f50 = ptrtoint i32* %stack_var_-12 to i32
  %v7_13f54 = icmp eq i32 %arg2, -1
  %v0_13f60.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_13f54, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_13f50
  br label %dec_label_pc_13f78

bb:                                               ; preds = %dec_label_pc_13f50
  %v2_13f5c = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_13f60.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_13f60.pre, 1
  br i1 %tmp19, label %dec_label_pc_13f78, label %dec_label_pc_13f68

dec_label_pc_13f68:                               ; preds = %bb
  %v7_13f6c = icmp sgt i32 %v0_13f60.pre, 64
  br i1 %v7_13f6c, label %dec_label_pc_13f78, label %bb20

bb20:                                             ; preds = %dec_label_pc_13f68
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_13f9c24 = add i32 %v10_13f50, 124
  store i32 %v5_13f9c24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13f8c

dec_label_pc_13f78:                               ; preds = %.thread, %dec_label_pc_13f68, %bb
  %v0_13f78 = call i32 @function_13b98()
  store i32 %v0_13f78, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13f84 = inttoptr i32 %v0_13f78 to i32*
  store i32 22, i32* %v2_13f84, align 4
  %v0_13ff8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13ff8

dec_label_pc_13f8c:                               ; preds = %bb20, %dec_label_pc_13f8c
  %v5_13f9c25 = phi i32 [ %v5_13f9c24, %bb20 ], [ %v5_13f9c, %dec_label_pc_13f8c ]
  %v2_13f90 = add i32 %v5_13f9c25, -136
  %v3_13f90 = inttoptr i32 %v2_13f90 to i32*
  store i32 0, i32* %v3_13f90, align 4
  %v0_13f94.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_13f94 = add i32 %v0_13f94.pre, -1
  store i32 %v1_13f94, i32* %r0.global-to-local, align 4
  %v6_13f94 = icmp slt i32 %v1_13f94, 0
  %v4_13f9c = mul i32 %v1_13f94, 4
  %v5_13f9c = add i32 %v4_13f9c, %v10_13f50
  store i32 %v5_13f9c, i32* %r2.global-to-local, align 4
  br i1 %v6_13f94, label %dec_label_pc_13fa4, label %dec_label_pc_13f8c

dec_label_pc_13fa4:                               ; preds = %dec_label_pc_13f8c
  %v2_13fa4 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_13fa4, i32* @r5, align 4
  %v2_13fa8 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_13fa8, i32* @r0, align 4
  %v0_13fac = load i32, i32* @r4, align 4
  store i32 %v0_13fac, i32* @r1, align 4
  %v0_13fb0 = call i32 @function_1402c()
  store i32 %v0_13fb0, i32* %r0.global-to-local, align 4
  %v1_13fb4 = icmp slt i32 %v0_13fb0, 0
  br i1 %v1_13fb4, label %dec_label_pc_13ff4, label %dec_label_pc_13fbc

dec_label_pc_13fbc:                               ; preds = %dec_label_pc_13fa4
  %v0_13fbc = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f438.860 to i32), i32* %r0.global-to-local, align 4
  %v2_13fc4 = call i32 @function_14008(i32 ptrtoint (i32* @global_var_1f438.860 to i32), i32 %v0_13fbc)
  store i32 %v2_13f5c, i32* %r2.global-to-local, align 4
  %v0_13fdc = load i32, i32* @r4, align 4
  store i32 %v0_13fdc, i32* %r0.global-to-local, align 4
  %v4_13fe4 = call i32 @function_14d48(i32 %v0_13fdc, i32* nonnull %stack_var_-152, i32 %v2_13f5c)
  store i32 %v4_13fe4, i32* %r0.global-to-local, align 4
  %v1_13fe8 = icmp slt i32 %v4_13fe4, 0
  br i1 %v1_13fe8, label %dec_label_pc_13ff4, label %bb23

bb23:                                             ; preds = %dec_label_pc_13fbc
  %v5_13fec = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_13fec, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13ff8

dec_label_pc_13ff4:                               ; preds = %dec_label_pc_13fbc, %dec_label_pc_13fa4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13ff8

dec_label_pc_13ff8:                               ; preds = %bb23, %dec_label_pc_13f78, %dec_label_pc_13ff4
  %v0_13ff8 = phi i32 [ %v5_13fec, %bb23 ], [ %v0_13ff8.pre, %dec_label_pc_13f78 ], [ -1, %dec_label_pc_13ff4 ]
  store i32 %v0_13ff8, i32* %r0.global-to-local, align 4
  %v2_14000 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14000, i32* @r4, align 4
  store i32 %v6_13f50, i32* @r5, align 4
  ret i32 %v0_13ff8

; uselistorder directives
  uselistorder i32 %v0_13ff8, { 1, 0 }
  uselistorder i32 %v5_13f9c, { 1, 0 }
  uselistorder i32 %v1_13f94, { 0, 2, 1 }
  uselistorder i32 %v2_13f5c, { 1, 0 }
  uselistorder i32 %v0_13f60.pre, { 1, 0, 2 }
  uselistorder i32 %v10_13f50, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_13ff8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13f8c, { 1, 0 }
  uselistorder label %dec_label_pc_13f78, { 1, 2, 0 }
}

define i32 @function_14008(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14008:
  %v1_14008 = add i32 %arg2, -1
  %v3_1400c = udiv i32 %v1_14008, 32
  %v4_14010 = mul nuw nsw i32 %v3_1400c, 4
  %v5_14010 = add i32 %v4_14010, %arg1
  %v6_14010 = inttoptr i32 %v5_14010 to i32*
  %v7_14010 = load i32, i32* %v6_14010, align 4
  %v1_14014 = urem i32 %v1_14008, 32
  %v7_1401c = shl i32 1, %v1_14014
  %v8_1401c = and i32 %v7_14010, %v7_1401c
  %v10_1401c = icmp ne i32 %v8_1401c, 0
  %. = zext i1 %v10_1401c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_14008, { 1, 0 }
}

define i32 @function_1402c() local_unnamed_addr {
dec_label_pc_1402c:
  %v0_1402c = load i32, i32* @r1, align 4
  %v1_1402c = add i32 %v0_1402c, -1
  %v3_14030 = udiv i32 %v1_1402c, 32
  %v0_14034 = load i32, i32* @r0, align 4
  %v4_14034 = mul nuw nsw i32 %v3_14030, 4
  %v5_14034 = add i32 %v0_14034, %v4_14034
  %v6_14034 = inttoptr i32 %v5_14034 to i32*
  %v7_14034 = load i32, i32* %v6_14034, align 4
  %v1_14038 = urem i32 %v1_1402c, 32
  %v7_14040 = shl i32 1, %v1_14038
  %v8_14040 = or i32 %v7_14034, %v7_14040
  store i32 %v8_14040, i32* %v6_14034, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1402c, { 1, 0 }
}

define i32 @function_14050(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14050:
  %v1_14050 = add i32 %arg2, -1
  %v3_14054 = udiv i32 %v1_14050, 32
  %v4_14058 = mul nuw nsw i32 %v3_14054, 4
  %v5_14058 = add i32 %v4_14058, %arg1
  %v6_14058 = inttoptr i32 %v5_14058 to i32*
  %v7_14058 = load i32, i32* %v6_14058, align 4
  %v1_1405c = urem i32 %v1_14050, 32
  %tmp = shl i32 -1, %v1_1405c
  %v8_14064 = add i32 %tmp, -1
  %v9_14064 = and i32 %v7_14058, %v8_14064
  store i32 %v9_14064, i32* %v6_14058, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_14050, { 1, 0 }
}

define i32 @function_14074(i32 %arg1) local_unnamed_addr {
dec_label_pc_14074:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14074 = load i32, i32* @r4, align 4
  %v6_14074 = load i32, i32* @r5, align 4
  %v9_14074 = load i32, i32* @r6, align 4
  %v0_14078 = load i32, i32* %r0.global-to-local, align 4
  %v2_14078 = icmp eq i32 %v0_14078, 0
  %v2_1407c = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_14078, label %bb, label %dec_label_pc_14088

bb:                                               ; preds = %dec_label_pc_14074
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14090

dec_label_pc_14088:                               ; preds = %dec_label_pc_14074
  %tmp = icmp ugt i32 %v0_14078, -8
  br i1 %tmp, label %dec_label_pc_14194, label %dec_label_pc_14090

dec_label_pc_14090:                               ; preds = %bb, %dec_label_pc_14088
  %v0_14090 = phi i32 [ %v0_14078, %dec_label_pc_14088 ], [ 1, %bb ]
  %v1_14090 = add i32 %v0_14090, 4
  store i32 %v1_14090, i32* %stack_var_-20, align 4
  store i32 %v2_1407c, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f1f4.862 to i32), i32* %r0.global-to-local, align 4
  %v1_140a8 = call i32 @function_14a5c()
  store i32 ptrtoint (i32** @global_var_1f034.866 to i32), i32* %r0.global-to-local, align 4
  %v3_140b4 = call i32 @function_14428(i32* bitcast (i32** @global_var_1f034.866 to i32*), i32 %v2_1407c)
  store i32 %v3_140b4, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1f4.862 to i32), i32* %r0.global-to-local, align 4
  store i32 82124, i32* @lr, align 4
  %v1_140c8 = call i32 @function_14a5c()
  store i32 %v1_140c8, i32* %r0.global-to-local, align 4
  %v2_140cc = icmp eq i32 %v3_140b4, 0
  br i1 %v2_140cc, label %dec_label_pc_140d4, label %dec_label_pc_14184

dec_label_pc_140d4:                               ; preds = %dec_label_pc_14090
  %v2_140d8 = load i32, i32* @global_var_1f21c.869, align 4
  store i32 %v2_140d8, i32* @r4, align 4
  %v2_140dc = load i32, i32* %stack_var_-20, align 4
  %v3_140e0 = icmp ult i32 %v2_140dc, %v2_140d8
  br i1 %v3_140e0, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_140d4
  %v3_140e4 = add i32 %v2_140d8, -1
  %v2_140e8 = add i32 %v3_140e4, %v2_140dc
  %v2_140ec = sub i32 0, %v2_140d8
  %v3_140f0 = and i32 %v2_140e8, %v2_140ec
  store i32 %v3_140f0, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_140d4, %bb14
  store i32 ptrtoint (i32* @global_var_1f4b8.871 to i32), i32* %r0.global-to-local, align 4
  %v1_140fc = call i32 @function_14a5c()
  %v0_14100 = load i32, i32* @r4, align 4
  store i32 %v0_14100, i32* %r0.global-to-local, align 4
  %v1_14104 = call i32 @function_15210(i32 %v0_14100)
  store i32 %v1_14104, i32* %r0.global-to-local, align 4
  %v7_14108 = icmp eq i32 %v1_14104, -1
  br i1 %v7_14108, label %bb15, label %dec_label_pc_14114

bb15:                                             ; preds = %.thread3
  store i32 %v1_14104, i32* @r5, align 4
  br label %dec_label_pc_14128

dec_label_pc_14114:                               ; preds = %.thread3
  %v1_14114 = add i32 %v1_14104, 3
  %v1_14118 = and i32 %v1_14114, -4
  store i32 %v1_14118, i32* @r5, align 4
  %v9_1411c = icmp eq i32 %v1_14118, %v1_14104
  br i1 %v9_1411c, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_14114
  %v3_14120 = sub i32 %v1_14118, %v1_14104
  store i32 %v3_14120, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_14114, %bb16
  %v1_14124 = xor i1 %v9_1411c, true
  call void @__pseudo_cond_branch(i1 %v1_14124, i32 ptrtoint (i32* @global_var_15210.872 to i32))
  br label %dec_label_pc_14128

dec_label_pc_14128:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1f4b8.871 to i32), i32* %r0.global-to-local, align 4
  store i32 82232, i32* @lr, align 4
  %v1_14134 = call i32 @function_14a5c()
  store i32 %v1_14134, i32* %r0.global-to-local, align 4
  %v0_14138 = load i32, i32* @r5, align 4
  %v7_14138 = icmp eq i32 %v0_14138, -1
  br i1 %v7_14138, label %dec_label_pc_14194, label %dec_label_pc_14140

dec_label_pc_14140:                               ; preds = %dec_label_pc_14128
  store i32 ptrtoint (i32* @global_var_1f1f4.862 to i32), i32* %r0.global-to-local, align 4
  %v1_1414c = call i32 @function_14a5c()
  %v0_14150 = load i32, i32* @r4, align 4
  %v0_14154 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1f034.866 to i32), i32* %r0.global-to-local, align 4
  %v4_1415c = call i32 @function_1457c(i32* bitcast (i32** @global_var_1f034.866 to i32*), i32 %v0_14154, i32 %v0_14150)
  store i32 ptrtoint (i32** @global_var_1f034.866 to i32), i32* %r0.global-to-local, align 4
  %v3_14168 = call i32 @function_14428(i32* bitcast (i32** @global_var_1f034.866 to i32*), i32 %v2_1407c)
  store i32 %v3_14168, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f1f4.862 to i32), i32* %r0.global-to-local, align 4
  store i32 82300, i32* @lr, align 4
  %v1_14178 = call i32 @function_14a5c()
  store i32 %v1_14178, i32* %r0.global-to-local, align 4
  %v2_1417c = icmp eq i32 %v3_14168, 0
  br i1 %v2_1417c, label %dec_label_pc_14194, label %dec_label_pc_14184

dec_label_pc_14184:                               ; preds = %dec_label_pc_14090, %dec_label_pc_14140
  %v1_14188 = phi i32 [ %v3_140b4, %dec_label_pc_14090 ], [ %v3_14168, %dec_label_pc_14140 ]
  %v2_14184 = load i32, i32* %stack_var_-20, align 4
  %v2_14188 = inttoptr i32 %v1_14188 to i32*
  store i32 %v2_14184, i32* %v2_14188, align 4
  %v3_14188 = load i32, i32* %r4.global-to-local, align 4
  %v4_14188 = add i32 %v3_14188, 4
  store i32 %v4_14188, i32* %r4.global-to-local, align 4
  %v2_1418c = icmp eq i32 %v4_14188, 0
  br i1 %v2_1418c, label %dec_label_pc_14194, label %dec_label_pc_141a4

dec_label_pc_14194:                               ; preds = %dec_label_pc_14184, %dec_label_pc_14140, %dec_label_pc_14128, %dec_label_pc_14088
  %v0_14194 = call i32 @function_13b98()
  store i32 %v0_14194, i32* %r0.global-to-local, align 4
  %v2_1419c = inttoptr i32 %v0_14194 to i32*
  store i32 12, i32* %v2_1419c, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_141a4

dec_label_pc_141a4:                               ; preds = %dec_label_pc_14184, %dec_label_pc_14194
  %v0_141a4 = phi i32 [ %v4_14188, %dec_label_pc_14184 ], [ 0, %dec_label_pc_14194 ]
  store i32 %v0_141a4, i32* %r0.global-to-local, align 4
  store i32 %v3_14074, i32* @r4, align 4
  store i32 %v6_14074, i32* @r5, align 4
  store i32 %v9_14074, i32* @r6, align 4
  ret i32 %v0_141a4

; uselistorder directives
  uselistorder i32 %v0_141a4, { 1, 0 }
  uselistorder i32 %v3_14168, { 1, 0, 2 }
  uselistorder i32 %v1_14118, { 1, 0, 2 }
  uselistorder i32 %v1_14104, { 2, 0, 4, 3, 1, 5 }
  uselistorder i32 %v3_140b4, { 1, 0, 2 }
  uselistorder i32 %v0_14078, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 6, 8, 4, 7, 9, 10, 11, 2, 13, 12, 5, 15, 14, 3, 16, 17, 18, 19, 0, 1 }
  uselistorder label %dec_label_pc_141a4, { 1, 0 }
  uselistorder label %dec_label_pc_14184, { 1, 0 }
  uselistorder label %dec_label_pc_14128, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14090, { 1, 0 }
}

define i32 @function_141c8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_141c8:
  %stack_var_-12 = alloca i32, align 4
  %v3_141c8 = load i32, i32* @r4, align 4
  store i32 %v3_141c8, i32* %stack_var_-12, align 4
  %v6_141c8 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_141d0 = mul i32 %arg2, %arg1
  store i32 %v2_141d0, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_141d4 = icmp eq i32 %arg1, 0
  store i32 %v2_141d0, i32* @r0, align 4
  br i1 %v2_141d4, label %dec_label_pc_14200, label %dec_label_pc_141e0

dec_label_pc_141e0:                               ; preds = %dec_label_pc_141c8
  %v0_141e0 = call i32 @function_13268()
  %v0_141e4 = load i32, i32* @r5, align 4
  %v9_141e4 = icmp eq i32 %v0_141e4, %v0_141e0
  store i32 0, i32* @r5, align 4
  br i1 %v9_141e4, label %dec_label_pc_141e0.dec_label_pc_14200_crit_edge, label %dec_label_pc_141f0

dec_label_pc_141e0.dec_label_pc_14200_crit_edge:  ; preds = %dec_label_pc_141e0
  %v0_14200.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14200

dec_label_pc_141f0:                               ; preds = %dec_label_pc_141e0
  %v0_141f0 = call i32 @function_13b98()
  %v2_141f8 = inttoptr i32 %v0_141f0 to i32*
  store i32 12, i32* %v2_141f8, align 4
  br label %dec_label_pc_14218

dec_label_pc_14200:                               ; preds = %dec_label_pc_141e0.dec_label_pc_14200_crit_edge, %dec_label_pc_141c8
  %v0_14200 = phi i32 [ %v0_14200.pre, %dec_label_pc_141e0.dec_label_pc_14200_crit_edge ], [ %v2_141d0, %dec_label_pc_141c8 ]
  %v1_14204 = call i32 @function_14074(i32 %v0_14200)
  store i32 %v1_14204, i32* @r5, align 4
  %v0_1420c = load i32, i32* @r4, align 4
  store i32 %v0_1420c, i32* @r2, align 4
  store i32 82456, i32* @lr, align 4
  %v1_14214 = icmp ne i32 %v1_14204, 0
  call void @__pseudo_cond_branch(i1 %v1_14214, i32 ptrtoint (i32* @global_var_13c00.873 to i32))
  br label %dec_label_pc_14218

dec_label_pc_14218:                               ; preds = %dec_label_pc_141f0, %dec_label_pc_14200
  %v0_14218 = load i32, i32* @r5, align 4
  %v2_1421c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1421c, i32* @r4, align 4
  store i32 %v6_141c8, i32* @r5, align 4
  ret i32 %v0_14218

; uselistorder directives
  uselistorder i32 ()* @function_13268, { 2, 3, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14218, { 1, 0 }
}

define i32 @function_14220() local_unnamed_addr {
dec_label_pc_14220:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_14220 = load i32, i32* @r0, align 4
  %v2_14220 = icmp eq i32 %v0_14220, 0
  %v3_14224 = load i32, i32* @r4, align 4
  store i32 %v3_14224, i32* %stack_var_-24, align 4
  %v6_14224 = load i32, i32* @r5, align 4
  %v9_14224 = load i32, i32* @r6, align 4
  %v15_14224 = load i32, i32* @r8, align 4
  br i1 %v2_14220, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_14220
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_14220
  %v1_1422c = add i32 %v0_14220, -4
  %v2_1422c = inttoptr i32 %v1_1422c to i32*
  %v3_1422c = load i32, i32* %v2_1422c, align 4
  store i32 %v3_1422c, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1f034.866 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_1422c, i32* @r4, align 4
  %v1_14244 = call i32 @function_14a5c()
  %v0_14248 = load i32, i32* @r4, align 4
  %v0_1424c = load i32, i32* @r5, align 4
  %v4_14254 = call i32 @function_1457c(i32* bitcast (i32** @global_var_1f034.866 to i32*), i32 %v0_14248, i32 %v0_1424c)
  %v1_1425c = inttoptr i32 %v4_14254 to i32*
  %v2_1425c = load i32, i32* %v1_1425c, align 4
  store i32 %v2_1425c, i32* %r6.global-to-local, align 4
  %v2_14260 = load i32, i32* @global_var_1f21c.869, align 4
  %v4_14264 = mul i32 %v2_14260, 8
  %v6_14264 = icmp ult i32 %v2_1425c, %v4_14264
  store i32 %v4_14254, i32* @r4, align 4
  br i1 %v6_14264, label %dec_label_pc_142a4, label %dec_label_pc_14270

dec_label_pc_14270:                               ; preds = %bb11
  %v1_14278 = call i32 @function_14a5c()
  %v1_14280 = call i32 @function_15210(i32 0)
  %v0_14284 = load i32, i32* @r4, align 4
  %v1_14284 = add i32 %v0_14284, 12
  store i32 %v1_14284, i32* @r5, align 4
  %v9_14288 = icmp eq i32 %v1_14284, %v1_14280
  br i1 %v9_14288, label %dec_label_pc_142ac, label %dec_label_pc_14290

dec_label_pc_14290:                               ; preds = %dec_label_pc_14270
  %v1_1429c = call i32 @function_14a5c()
  br label %dec_label_pc_142a4

dec_label_pc_142a4:                               ; preds = %bb11, %dec_label_pc_14290, %bb14
  %v2_142a4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_142a4, i32* @r4, align 4
  store i32 %v6_14224, i32* @r5, align 4
  store i32 %v9_14224, i32* %r6.global-to-local, align 4
  store i32 %v15_14224, i32* %r8.global-to-local, align 4
  %v0_142a8 = call i32 @function_14a5c()
  %v0_142ac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_142ac

dec_label_pc_142ac:                               ; preds = %dec_label_pc_14270, %dec_label_pc_142a4
  %v1_142b4 = phi i32 [ %v0_14284, %dec_label_pc_14270 ], [ %v0_142ac.pre, %dec_label_pc_142a4 ]
  %v1_142ac = add i32 %v1_142b4, 4
  %v2_142ac = inttoptr i32 %v1_142ac to i32*
  %v3_142ac = load i32, i32* %v2_142ac, align 4
  %v2_142b0 = icmp eq i32 %v3_142ac, 0
  br i1 %v2_142b0, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_142ac
  %v2_142b4 = add i32 %v1_142b4, 8
  %v3_142b4 = inttoptr i32 %v2_142b4 to i32*
  %v4_142b4 = load i32, i32* %v3_142b4, align 4
  %v3_142b8 = add i32 %v3_142ac, 8
  %v4_142b8 = inttoptr i32 %v3_142b8 to i32*
  store i32 %v4_142b4, i32* %v4_142b8, align 4
  %v0_142bc.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_142ac, %bb12
  %v0_142bc = phi i32 [ %v1_142b4, %dec_label_pc_142ac ], [ %v0_142bc.pre, %bb12 ]
  %v1_142bc = add i32 %v0_142bc, 8
  %v2_142bc = inttoptr i32 %v1_142bc to i32*
  %v3_142bc = load i32, i32* %v2_142bc, align 4
  %v1_142c0 = add i32 %v0_142bc, 4
  %v2_142c0 = inttoptr i32 %v1_142c0 to i32*
  %v3_142c0 = load i32, i32* %v2_142c0, align 4
  %v2_142c4 = icmp eq i32 %v3_142bc, 0
  br i1 %v2_142c4, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_142c8 = add i32 %v3_142bc, 4
  %v4_142c8 = inttoptr i32 %v3_142c8 to i32*
  store i32 %v3_142c0, i32* %v4_142c8, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_142cc = load i32, i32* %r8.global-to-local, align 4
  %v3_142cc = inttoptr i32 %v2_142cc to i32*
  store i32 %v3_142c0, i32* %v3_142cc, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_142dc = call i32 @function_14a5c()
  %v0_142e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_142e0 = load i32, i32* @r4, align 4
  %v0_142e8 = load i32, i32* @r5, align 4
  %v2_142e0 = sub i32 12, %v0_142e0
  %v1_142e4 = add i32 %v2_142e0, %v1_142e0
  %v2_142e8 = sub i32 %v1_142e4, %v0_142e8
  %v1_142ec = call i32 @function_15210(i32 %v2_142e8)
  br label %dec_label_pc_142a4

; uselistorder directives
  uselistorder i32 %v0_142bc, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_15210, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_142ac, { 1, 0 }
  uselistorder label %dec_label_pc_142a4, { 2, 1, 0 }
}

define i32 @function_14310(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14310:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14310 = load i32, i32* @r4, align 4
  store i32 %v3_14310, i32* %stack_var_-24, align 4
  %v6_14310 = load i32, i32* @r5, align 4
  %v9_14310 = load i32, i32* @r6, align 4
  %v12_14310 = load i32, i32* @r7, align 4
  %v15_14310 = load i32, i32* @r8, align 4
  %v18_14310 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_14314 = icmp eq i32 %arg2, 0
  %v0_14318 = load i32, i32* @r0, align 4
  store i32 %v0_14318, i32* @r7, align 4
  br i1 %v2_14314, label %dec_label_pc_14320, label %dec_label_pc_14328

dec_label_pc_14320:                               ; preds = %dec_label_pc_14310
  %v0_14320 = call i32 @function_14220()
  %v0_14330.pre = load i32, i32* @r4, align 4
  %v2_14334.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_14330

dec_label_pc_14328:                               ; preds = %dec_label_pc_14310
  %v2_14328 = icmp eq i32 %v0_14318, 0
  br i1 %v2_14328, label %dec_label_pc_14330, label %dec_label_pc_1433c

dec_label_pc_14330:                               ; preds = %dec_label_pc_14328, %dec_label_pc_14320
  %v2_14334 = phi i32 [ %v3_14310, %dec_label_pc_14328 ], [ %v2_14334.pre, %dec_label_pc_14320 ]
  %v0_14330 = phi i32 [ %arg2, %dec_label_pc_14328 ], [ %v0_14330.pre, %dec_label_pc_14320 ]
  store i32 %v2_14334, i32* @r4, align 4
  store i32 %v6_14310, i32* @r5, align 4
  store i32 %v9_14310, i32* @r6, align 4
  store i32 %v12_14310, i32* @r7, align 4
  store i32 %v18_14310, i32* @lr, align 4
  %v1_14338 = call i32 @function_14074(i32 %v0_14330)
  %v0_1433c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1433c

dec_label_pc_1433c:                               ; preds = %dec_label_pc_14328, %dec_label_pc_14330
  %v0_14354 = phi i32 [ %v0_14318, %dec_label_pc_14328 ], [ %v1_14338, %dec_label_pc_14330 ]
  %v0_1433c = phi i32 [ %arg2, %dec_label_pc_14328 ], [ %v0_1433c.pre, %dec_label_pc_14330 ]
  %v1_1433c = add i32 %v0_1433c, 7
  %v1_14340 = and i32 %v1_1433c, -4
  store i32 %v1_14340, i32* @r5, align 4
  %v2_14344 = icmp ugt i32 %v1_14340, 10
  %v1_14348 = add i32 %v0_14354, -4
  %v2_14348 = inttoptr i32 %v1_14348 to i32*
  %v3_14348 = load i32, i32* %v2_14348, align 4
  store i32 %v3_14348, i32* @r6, align 4
  br i1 %v2_14344, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_1433c
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_1433c, %bb
  %v0_143d0 = phi i32 [ %v1_14340, %dec_label_pc_1433c ], [ 12, %bb ]
  store i32 %v1_14348, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_143d0, %v3_14348
  br i1 %tmp, label %dec_label_pc_1435c, label %dec_label_pc_143d0

dec_label_pc_1435c:                               ; preds = %bb14
  %v2_14350 = sub i32 %v0_143d0, %v3_14348
  %v1_1436c = call i32 @function_14a5c()
  %v0_14374 = load i32, i32* @r8, align 4
  %v1_14374 = load i32, i32* @r6, align 4
  %v2_14374 = add i32 %v1_14374, %v0_14374
  %v4_1437c = call i32 @function_144bc(i32* bitcast (i32** @global_var_1f034.866 to i32*), i32 %v2_14374, i32 %v2_14350)
  store i32 %v4_1437c, i32* @r4, align 4
  store i32 82836, i32* @lr, align 4
  %v1_14390 = call i32 @function_14a5c()
  %v0_14394 = load i32, i32* @r4, align 4
  %v2_14394 = icmp eq i32 %v0_14394, 0
  br i1 %v2_14394, label %dec_label_pc_143a4, label %.thread

.thread:                                          ; preds = %dec_label_pc_1435c
  %v1_14398 = load i32, i32* @r6, align 4
  %v3_14398 = add i32 %v1_14398, %v0_14394
  %v2_1439c = load i32, i32* @r7, align 4
  %v3_1439c = add i32 %v2_1439c, -4
  %v4_1439c = inttoptr i32 %v3_1439c to i32*
  store i32 %v3_14398, i32* %v4_1439c, align 4
  br label %dec_label_pc_14410

dec_label_pc_143a4:                               ; preds = %dec_label_pc_1435c
  %v0_143a4 = load i32, i32* @r5, align 4
  %v1_143a4 = add i32 %v0_143a4, -4
  %v1_143a8 = call i32 @function_14074(i32 %v1_143a4)
  store i32 %v1_143a8, i32* @r0, align 4
  store i32 %v1_143a8, i32* @r4, align 4
  %v2_143ac = icmp eq i32 %v1_143a8, 0
  br i1 %v2_143ac, label %dec_label_pc_143c8, label %dec_label_pc_143b4

dec_label_pc_143b4:                               ; preds = %dec_label_pc_143a4
  %v0_143b4 = load i32, i32* @r6, align 4
  %v1_143b4 = add i32 %v0_143b4, -4
  store i32 %v1_143b4, i32* @r2, align 4
  %v0_143b8 = load i32, i32* @r7, align 4
  store i32 %v0_143b8, i32* @r1, align 4
  %v3_143bc = call i32 @function_13be0(i32 %v1_143a8, i32 %v0_143b8, i32 %v1_143b4)
  %v0_143c0 = load i32, i32* @r7, align 4
  store i32 %v0_143c0, i32* @r0, align 4
  %v0_143c4 = call i32 @function_14220()
  %v0_143c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_143c8

dec_label_pc_143c8:                               ; preds = %dec_label_pc_143a4, %dec_label_pc_143b4
  %v0_143c8 = phi i32 [ 0, %dec_label_pc_143a4 ], [ %v0_143c8.pre, %dec_label_pc_143b4 ]
  store i32 %v0_143c8, i32* @r7, align 4
  br label %dec_label_pc_14410

dec_label_pc_143d0:                               ; preds = %bb14
  %v1_143d0 = add i32 %v0_143d0, 28
  %tmp15 = icmp ugt i32 %v1_143d0, %v3_14348
  br i1 %tmp15, label %dec_label_pc_14410, label %dec_label_pc_143dc

dec_label_pc_143dc:                               ; preds = %dec_label_pc_143d0
  %v1_143e8 = call i32 @function_14a5c()
  %v0_143ec = load i32, i32* @r8, align 4
  %v1_143ec = load i32, i32* @r5, align 4
  %v2_143ec = add i32 %v1_143ec, %v0_143ec
  %v1_143f0 = load i32, i32* @r6, align 4
  %v2_143f0 = sub i32 %v1_143f0, %v1_143ec
  %v4_143f8 = call i32 @function_1457c(i32* bitcast (i32** @global_var_1f034.866 to i32*), i32 %v2_143ec, i32 %v2_143f0)
  store i32 82956, i32* @lr, align 4
  %v1_14408 = call i32 @function_14a5c()
  %v0_1440c = load i32, i32* @r5, align 4
  %v1_1440c = load i32, i32* @r7, align 4
  %v2_1440c = add i32 %v1_1440c, -4
  %v3_1440c = inttoptr i32 %v2_1440c to i32*
  store i32 %v0_1440c, i32* %v3_1440c, align 4
  br label %dec_label_pc_14410

dec_label_pc_14410:                               ; preds = %.thread, %dec_label_pc_143d0, %dec_label_pc_143c8, %dec_label_pc_143dc
  %v0_14410 = load i32, i32* @r7, align 4
  %v2_14414 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14414, i32* @r4, align 4
  store i32 %v6_14310, i32* @r5, align 4
  store i32 %v9_14310, i32* @r6, align 4
  store i32 %v12_14310, i32* @r7, align 4
  store i32 %v15_14310, i32* @r8, align 4
  ret i32 %v0_14410

; uselistorder directives
  uselistorder i32 %v1_143ec, { 1, 0 }
  uselistorder i32 %v0_143d0, { 1, 2, 0 }
  uselistorder i32 %v3_14348, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1f034.866, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1f034.866 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_14074, { 1, 65, 0, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 2 }
  uselistorder i32 ()* @function_14220, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32* @r8, { 97, 98, 99, 100, 101, 116, 9, 5, 6, 7, 8, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 1, 41, 2, 42, 3, 43, 44, 45, 46, 47, 48, 49, 51, 50, 52, 53, 54, 56, 57, 55, 58, 59, 60, 61, 63, 62, 64, 65, 66, 68, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 89, 90, 91, 92, 94, 95, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 181, 184, 185, 186, 187, 188, 189, 190 }
  uselistorder i32* @r7, { 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 7, 8, 9, 15, 16, 17, 3, 6, 24, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 25, 1, 65, 66, 67, 68, 69, 70, 71, 72, 217, 218, 219, 220, 73, 0, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2, 5, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 212, 208, 209, 210, 211, 213, 214, 215, 216, 221, 222, 223, 224, 229, 225, 226, 227, 228, 230, 231, 232, 233, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 4, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296 }
  uselistorder label %dec_label_pc_14410, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_143c8, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_1433c, { 1, 0 }
}

define i32 @function_14428(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14428:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_14428 = inttoptr i32 %arg2 to i32*
  %v2_14428 = load i32, i32* %v1_14428, align 4
  %v3_1442c = load i32, i32* @r4, align 4
  store i32 %v3_1442c, i32* %stack_var_-8, align 4
  %v1_14430 = add i32 %v2_14428, 3
  %v1_14434 = and i32 %v1_14430, -4
  store i32 %v1_14434, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_1443c = icmp ugt i32 %v1_14434, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_14444 = load i32, i32* %arg1, align 4
  store i32 %v2_14444, i32* %r0.global-to-local, align 4
  br i1 %v2_1443c, label %dec_label_pc_144b0.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_14428
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_144b0.preheader

dec_label_pc_144b0.preheader:                     ; preds = %dec_label_pc_14428, %bb
  %v1_14464 = phi i32 [ %v1_14434, %dec_label_pc_14428 ], [ 12, %bb ]
  %v2_144b09 = icmp eq i32 %v2_14444, 0
  br i1 %v2_144b09, label %dec_label_pc_144b8, label %dec_label_pc_14450

dec_label_pc_14450:                               ; preds = %dec_label_pc_144b0.preheader, %dec_label_pc_144ac
  %v2_14468 = phi i32 [ %v3_144ac, %dec_label_pc_144ac ], [ %v2_14444, %dec_label_pc_144b0.preheader ]
  %v1_14450 = inttoptr i32 %v2_14468 to i32*
  %v2_14450 = load i32, i32* %v1_14450, align 4
  store i32 %v2_14450, i32* @ip, align 4
  %v3_14454 = icmp ult i32 %v2_14450, %v1_14464
  br i1 %v3_14454, label %dec_label_pc_144ac, label %dec_label_pc_1445c

dec_label_pc_1445c:                               ; preds = %dec_label_pc_14450
  %v1_1445c = add i32 %v1_14464, 44
  %v3_14460 = icmp ult i32 %v2_14450, %v1_1445c
  br i1 %v3_14460, label %dec_label_pc_14470, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_1445c
  %v2_14454.le = sub i32 %v2_14450, %v1_14464
  store i32 %v2_14454.le, i32* %v1_14450, align 4
  %v0_1449c.pre = load i32, i32* @ip, align 4
  %v0_144a4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_14470:                               ; preds = %dec_label_pc_1445c
  %v1_14470 = add i32 %v2_14468, 4
  %v2_14470 = inttoptr i32 %v1_14470 to i32*
  %v3_14470 = load i32, i32* %v2_14470, align 4
  store i32 %v3_14470, i32* %r2.global-to-local, align 4
  %v2_14474 = icmp eq i32 %v3_14470, 0
  br i1 %v2_14474, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_14470
  %v2_14478 = add i32 %v2_14468, 8
  %v3_14478 = inttoptr i32 %v2_14478 to i32*
  %v4_14478 = load i32, i32* %v3_14478, align 4
  %v3_1447c = add i32 %v3_14470, 8
  %v4_1447c = inttoptr i32 %v3_1447c to i32*
  store i32 %v4_14478, i32* %v4_1447c, align 4
  %v0_14480.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14470, %bb27
  %v0_14480 = phi i32 [ %v2_14468, %dec_label_pc_14470 ], [ %v0_14480.pre, %bb27 ]
  %v1_14480 = add i32 %v0_14480, 8
  %v2_14480 = inttoptr i32 %v1_14480 to i32*
  %v3_14480 = load i32, i32* %v2_14480, align 4
  %v1_14484 = add i32 %v0_14480, 4
  %v2_14484 = inttoptr i32 %v1_14484 to i32*
  %v3_14484 = load i32, i32* %v2_14484, align 4
  %v2_14488 = icmp eq i32 %v3_14480, 0
  br i1 %v2_14488, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_1448c = add i32 %v3_14480, 4
  %v4_1448c = inttoptr i32 %v3_1448c to i32*
  store i32 %v3_14484, i32* %v4_1448c, align 4
  %v1_14494 = load i32, i32* @ip, align 4
  store i32 %v1_14494, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_14490 = load i32, i32* %r1.global-to-local, align 4
  %v3_14490 = inttoptr i32 %v2_14490 to i32*
  store i32 %v3_14484, i32* %v3_14490, align 4
  %v1_14498.pre = load i32, i32* @ip, align 4
  store i32 %v1_14498.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_144a4 = phi i32 [ %v0_144a4.pre, %.thread._crit_edge ], [ %v1_14494, %bb28 ], [ %v1_14498.pre, %.thread5 ]
  %v0_1449c = phi i32 [ %v0_1449c.pre, %.thread._crit_edge ], [ %v1_14494, %bb28 ], [ %v1_14498.pre, %.thread5 ]
  %v1_1449c = load i32, i32* %r0.global-to-local, align 4
  %v2_1449c = sub i32 %v1_1449c, %v0_1449c
  %v1_144a0 = add i32 %v2_1449c, 12
  store i32 %v1_144a0, i32* %r0.global-to-local, align 4
  %v1_144a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_144a4 = inttoptr i32 %v1_144a4 to i32*
  store i32 %v0_144a4, i32* %v2_144a4, align 4
  %v2_144a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_144a8, i32* %r4.global-to-local, align 4
  ret i32 %v1_144a0

dec_label_pc_144ac:                               ; preds = %dec_label_pc_14450
  %v1_144ac = add i32 %v2_14468, 4
  %v2_144ac = inttoptr i32 %v1_144ac to i32*
  %v3_144ac = load i32, i32* %v2_144ac, align 4
  store i32 %v3_144ac, i32* %r0.global-to-local, align 4
  %v2_144b0 = icmp eq i32 %v3_144ac, 0
  br i1 %v2_144b0, label %dec_label_pc_144b0.dec_label_pc_144b8_crit_edge, label %dec_label_pc_14450

dec_label_pc_144b0.dec_label_pc_144b8_crit_edge:  ; preds = %dec_label_pc_144ac
  br label %dec_label_pc_144b8

dec_label_pc_144b8:                               ; preds = %dec_label_pc_144b0.dec_label_pc_144b8_crit_edge, %dec_label_pc_144b0.preheader
  store i32 %v3_1442c, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_144ac, { 1, 2, 0 }
  uselistorder i32 %v0_14480, { 1, 0 }
  uselistorder i32 %v2_14450, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14468, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_14464, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_14450, { 1, 0 }
  uselistorder label %dec_label_pc_144b0.preheader, { 1, 0 }
}

define i32 @function_144bc(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_144bc:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_144c0 = load i32, i32* %arg1, align 4
  store i32 %v2_144c0, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_145386 = icmp eq i32 %v2_144c0, 0
  br i1 %v2_145386, label %dec_label_pc_14540, label %dec_label_pc_144cc

dec_label_pc_144cc:                               ; preds = %dec_label_pc_144bc, %dec_label_pc_14534
  %v0_1450c = phi i32 [ %v3_14534, %dec_label_pc_14534 ], [ %v2_144c0, %dec_label_pc_144bc ]
  %v1_144cc = inttoptr i32 %v0_1450c to i32*
  %v2_144cc = load i32, i32* %v1_144cc, align 4
  store i32 %v2_144cc, i32* %r0.global-to-local, align 4
  %v2_144d0 = sub i32 %v0_1450c, %v2_144cc
  %v1_144d4 = add i32 %v2_144d0, 12
  %v3_144d8 = icmp uge i32 %v1_144d4, %arg2
  %v9_144d8 = icmp eq i32 %v1_144d4, %arg2
  %v2_144dc = xor i1 %v9_144d8, true
  %v3_144dc = and i1 %v3_144d8, %v2_144dc
  br i1 %v3_144dc, label %dec_label_pc_14534, label %dec_label_pc_144e0

dec_label_pc_144e0:                               ; preds = %dec_label_pc_144cc
  br i1 %v9_144d8, label %dec_label_pc_144e4, label %dec_label_pc_14540

dec_label_pc_144e4:                               ; preds = %dec_label_pc_144e0
  %v1_144e4 = add i32 %arg3, 3
  %v1_144e8 = and i32 %v1_144e4, -4
  store i32 %v1_144e8, i32* %r2.global-to-local, align 4
  %v2_144ec = sub i32 %v2_144cc, %v1_144e8
  %v3_144ec = icmp ult i32 %v2_144cc, %v1_144e8
  br i1 %v3_144ec, label %dec_label_pc_14540, label %dec_label_pc_144f4

dec_label_pc_144f4:                               ; preds = %dec_label_pc_144e4
  %v1_144f4 = add i32 %v1_144e8, 44
  %v3_144f8 = icmp ult i32 %v2_144cc, %v1_144f4
  br i1 %v3_144f8, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_144f4
  store i32 %v2_144ec, i32* %v1_144cc, align 4
  %v1_14504 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_14504, i32* %r0.global-to-local, align 4
  ret i32 %v1_14504

.thread2:                                         ; preds = %dec_label_pc_144f4
  %v1_1450c = add i32 %v0_1450c, 4
  %v2_1450c = inttoptr i32 %v1_1450c to i32*
  %v3_1450c = load i32, i32* %v2_1450c, align 4
  store i32 %v3_1450c, i32* %r2.global-to-local, align 4
  %v2_14510 = icmp eq i32 %v3_1450c, 0
  br i1 %v2_14510, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_14514 = add i32 %v0_1450c, 8
  %v3_14514 = inttoptr i32 %v2_14514 to i32*
  %v4_14514 = load i32, i32* %v3_14514, align 4
  %v3_14518 = add i32 %v3_1450c, 8
  %v4_14518 = inttoptr i32 %v3_14518 to i32*
  store i32 %v4_14514, i32* %v4_14518, align 4
  %v0_1451c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_1451c = phi i32 [ %v0_1450c, %.thread2 ], [ %v0_1451c.pre, %bb17 ]
  %v1_1451c = add i32 %v0_1451c, 8
  %v2_1451c = inttoptr i32 %v1_1451c to i32*
  %v3_1451c = load i32, i32* %v2_1451c, align 4
  store i32 %v3_1451c, i32* %r2.global-to-local, align 4
  %v1_14520 = add i32 %v0_1451c, 4
  %v2_14520 = inttoptr i32 %v1_14520 to i32*
  %v3_14520 = load i32, i32* %v2_14520, align 4
  %v2_14524 = icmp eq i32 %v3_1451c, 0
  br i1 %v2_14524, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_14528 = add i32 %v3_1451c, 4
  %v4_14528 = inttoptr i32 %v3_14528 to i32*
  store i32 %v3_14520, i32* %v4_14528, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_1452c = load i32, i32* %lr.global-to-local, align 4
  %v3_1452c = inttoptr i32 %v2_1452c to i32*
  store i32 %v3_14520, i32* %v3_1452c, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_14530 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_14530

dec_label_pc_14534:                               ; preds = %dec_label_pc_144cc
  %v1_14534 = add i32 %v0_1450c, 4
  %v2_14534 = inttoptr i32 %v1_14534 to i32*
  %v3_14534 = load i32, i32* %v2_14534, align 4
  store i32 %v3_14534, i32* %ip.global-to-local, align 4
  %v2_14538 = icmp eq i32 %v3_14534, 0
  br i1 %v2_14538, label %dec_label_pc_14538.dec_label_pc_14540.loopexit_crit_edge, label %dec_label_pc_144cc

dec_label_pc_14538.dec_label_pc_14540.loopexit_crit_edge: ; preds = %dec_label_pc_14534
  br label %dec_label_pc_14540

dec_label_pc_14540:                               ; preds = %dec_label_pc_144e4, %dec_label_pc_144bc, %dec_label_pc_14538.dec_label_pc_14540.loopexit_crit_edge, %dec_label_pc_144e0
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_14534, { 1, 2, 0 }
  uselistorder i32 %v0_1451c, { 1, 0 }
  uselistorder i32 %v1_144e8, { 0, 2, 1, 3 }
  uselistorder i1 %v9_144d8, { 1, 0 }
  uselistorder i32 %v2_144cc, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_1450c, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_14540, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_144cc, { 1, 0 }
}

define i32 @function_14548() local_unnamed_addr {
dec_label_pc_14548:
  %v0_14548 = load i32, i32* @r2, align 4
  %v2_14548 = icmp eq i32 %v0_14548, 0
  %v0_1454c = load i32, i32* @r3, align 4
  %v1_1454c = load i32, i32* @r1, align 4
  %v2_1454c = add i32 %v1_1454c, 4
  %v3_1454c = inttoptr i32 %v2_1454c to i32*
  store i32 %v0_1454c, i32* %v3_1454c, align 4
  %v0_14550 = load i32, i32* @r2, align 4
  %v1_14550 = load i32, i32* @r1, align 4
  %v2_14550 = add i32 %v1_14550, 8
  %v3_14550 = inttoptr i32 %v2_14550 to i32*
  store i32 %v0_14550, i32* %v3_14550, align 4
  %v1_14558 = load i32, i32* @r1, align 4
  br i1 %v2_14548, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14548
  %v2_14554 = load i32, i32* @r2, align 4
  %v3_14554 = add i32 %v2_14554, 4
  %v4_14554 = inttoptr i32 %v3_14554 to i32*
  store i32 %v1_14558, i32* %v4_14554, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_14548
  %v2_14558 = load i32, i32* @r0, align 4
  %v3_14558 = inttoptr i32 %v2_14558 to i32*
  store i32 %v1_14558, i32* %v3_14558, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_1455c = load i32, i32* @r3, align 4
  %v2_1455c = icmp eq i32 %v0_1455c, 0
  br i1 %v2_1455c, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_14560 = load i32, i32* @r1, align 4
  %v3_14560 = add i32 %v0_1455c, 8
  %v4_14560 = inttoptr i32 %v3_14560 to i32*
  store i32 %v1_14560, i32* %v4_14560, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_14564 = load i32, i32* @r0, align 4
  ret i32 %v1_14564

; uselistorder directives
  uselistorder i32 %v1_14558, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_14568() local_unnamed_addr {
dec_label_pc_14568:
  %v0_14568 = load i32, i32* @r2, align 4
  %v2_14568 = icmp eq i32 %v0_14568, 0
  %v1_1456c = load i32, i32* @r1, align 4
  br i1 %v2_14568, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14568
  %v2_1456c = load i32, i32* @r0, align 4
  %v3_1456c = inttoptr i32 %v2_1456c to i32*
  store i32 %v1_1456c, i32* %v3_1456c, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_14568
  %v3_14570 = add i32 %v0_14568, 4
  %v4_14570 = inttoptr i32 %v3_14570 to i32*
  store i32 %v1_1456c, i32* %v4_14570, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_14574 = load i32, i32* @r2, align 4
  %v1_14574 = load i32, i32* @r1, align 4
  %v2_14574 = add i32 %v1_14574, 8
  %v3_14574 = inttoptr i32 %v2_14574 to i32*
  store i32 %v0_14574, i32* %v3_14574, align 4
  %v1_14578 = load i32, i32* @r0, align 4
  ret i32 %v1_14578

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_1457c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1457c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1457c = load i32, i32* @r4, align 4
  store i32 %v3_1457c, i32* %stack_var_-20, align 4
  %v2_14580 = load i32, i32* %arg1, align 4
  store i32 %v2_14580, i32* %r4.global-to-local, align 4
  %v2_14584 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_145a02 = icmp eq i32 %v2_14580, 0
  br i1 %v2_145a02, label %dec_label_pc_14650, label %dec_label_pc_14590

dec_label_pc_14590:                               ; preds = %dec_label_pc_1457c, %dec_label_pc_14598
  %v0_145e0 = phi i32 [ %v0_145e8, %dec_label_pc_14598 ], [ 0, %dec_label_pc_1457c ]
  %v0_145e8 = phi i32 [ %v3_1459c, %dec_label_pc_14598 ], [ %v2_14580, %dec_label_pc_1457c ]
  %v1_145a45.in = phi i32 [ %v3_1459c, %dec_label_pc_14598 ], [ %v2_14580, %dec_label_pc_1457c ]
  %v1_145a45 = add i32 %v1_145a45.in, 12
  %v3_14590 = icmp ult i32 %v1_145a45, %arg2
  br i1 %v3_14590, label %dec_label_pc_14598, label %dec_label_pc_145b0

dec_label_pc_14598:                               ; preds = %dec_label_pc_14590
  store i32 %v0_145e8, i32* %r6.global-to-local, align 4
  %v1_1459c = add i32 %v0_145e8, 4
  %v2_1459c = inttoptr i32 %v1_1459c to i32*
  %v3_1459c = load i32, i32* %v2_1459c, align 4
  store i32 %v3_1459c, i32* %r4.global-to-local, align 4
  %v2_145a0 = icmp eq i32 %v3_1459c, 0
  br i1 %v2_145a0, label %dec_label_pc_145a0.dec_label_pc_14650.loopexit_crit_edge, label %dec_label_pc_14590

dec_label_pc_145b0:                               ; preds = %dec_label_pc_14590
  %v1_145b0 = inttoptr i32 %v0_145e8 to i32*
  %v2_145b0 = load i32, i32* %v1_145b0, align 4
  store i32 %v2_145b0, i32* @ip, align 4
  %v2_145b4 = sub i32 %v0_145e8, %v2_145b0
  %v1_145b8 = add i32 %v2_145b4, 12
  %v3_145bc = icmp uge i32 %v1_145b8, %v2_14584
  %v9_145bc = icmp eq i32 %v1_145b8, %v2_14584
  %v2_145c0 = xor i1 %v9_145bc, true
  %v3_145c0 = and i1 %v3_145bc, %v2_145c0
  br i1 %v3_145c0, label %dec_label_pc_14650, label %dec_label_pc_145c4

dec_label_pc_145c4:                               ; preds = %dec_label_pc_145b0
  %v2_145c4 = add i32 %v2_145b0, %arg3
  store i32 %v2_145c4, i32* %r7.global-to-local, align 4
  br i1 %v9_145bc, label %dec_label_pc_145cc, label %dec_label_pc_145f8

dec_label_pc_145cc:                               ; preds = %dec_label_pc_145c4
  %v2_145cc = icmp eq i32 %v0_145e0, 0
  br i1 %v2_145cc, label %dec_label_pc_14644, label %dec_label_pc_145d4

dec_label_pc_145d4:                               ; preds = %dec_label_pc_145cc
  %v1_145d4 = add i32 %v0_145e0, 12
  %v9_145d8 = icmp eq i32 %v1_145d4, %arg2
  br i1 %v9_145d8, label %dec_label_pc_145e0, label %dec_label_pc_14644

dec_label_pc_145e0:                               ; preds = %dec_label_pc_145d4
  %v1_145e0 = inttoptr i32 %v0_145e0 to i32*
  %v2_145e0 = load i32, i32* %v1_145e0, align 4
  %v1_145e4 = add i32 %v0_145e0, 8
  %v2_145e4 = inttoptr i32 %v1_145e4 to i32*
  %v3_145e4 = load i32, i32* %v2_145e4, align 4
  store i32 %v3_145e4, i32* @r2, align 4
  store i32 %v0_145e8, i32* @r1, align 4
  %v2_145ec = add i32 %v2_145e0, %v2_145c4
  store i32 %v2_145ec, i32* %r7.global-to-local, align 4
  %v0_145f0 = call i32 @function_14568()
  br label %dec_label_pc_14644

dec_label_pc_145f8:                               ; preds = %dec_label_pc_145c4
  %v1_145f8 = add i32 %v0_145e8, 4
  %v2_145f8 = inttoptr i32 %v1_145f8 to i32*
  %v3_145f8 = load i32, i32* %v2_145f8, align 4
  store i32 %v3_145f8, i32* %r5.global-to-local, align 4
  %v2_145fc = icmp eq i32 %v3_145f8, 0
  br i1 %v2_145fc, label %dec_label_pc_14630, label %dec_label_pc_14604

dec_label_pc_14604:                               ; preds = %dec_label_pc_145f8
  %v1_14604 = inttoptr i32 %v3_145f8 to i32*
  %v2_14604 = load i32, i32* %v1_14604, align 4
  store i32 %v2_14604, i32* @ip, align 4
  %v2_14608 = sub i32 %v3_145f8, %v2_14604
  %v1_1460c = add i32 %v2_14608, 12
  %v9_14610 = icmp eq i32 %v2_14584, %v1_1460c
  br i1 %v9_14610, label %dec_label_pc_14618, label %dec_label_pc_14630

dec_label_pc_14618:                               ; preds = %dec_label_pc_14604
  store i32 %v0_145e0, i32* @r2, align 4
  store i32 %v3_145f8, i32* @r1, align 4
  %v2_14620 = add i32 %v2_14604, %v2_145c4
  store i32 %v2_14620, i32* %r7.global-to-local, align 4
  %v0_14624 = call i32 @function_14568()
  %v0_14628 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14628, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14644

dec_label_pc_14630:                               ; preds = %dec_label_pc_14604, %dec_label_pc_145f8
  %v2_14630 = add i32 %v0_145e8, %arg3
  store i32 %v2_14630, i32* %r4.global-to-local, align 4
  store i32 %v3_145f8, i32* @r3, align 4
  store i32 %v0_145e0, i32* @r2, align 4
  store i32 %v2_14630, i32* @r1, align 4
  %v0_14640 = call i32 @function_14548()
  br label %dec_label_pc_14644

dec_label_pc_14644:                               ; preds = %dec_label_pc_145d4, %dec_label_pc_145cc, %dec_label_pc_14618, %dec_label_pc_145e0, %dec_label_pc_14630
  %v0_14644 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14644, i32* %r5.global-to-local, align 4
  %v0_14648 = load i32, i32* %r7.global-to-local, align 4
  %v2_14648 = inttoptr i32 %v0_14644 to i32*
  store i32 %v0_14648, i32* %v2_14648, align 4
  br label %dec_label_pc_14668

dec_label_pc_145a0.dec_label_pc_14650.loopexit_crit_edge: ; preds = %dec_label_pc_14598
  br label %dec_label_pc_14650

dec_label_pc_14650:                               ; preds = %dec_label_pc_1457c, %dec_label_pc_145a0.dec_label_pc_14650.loopexit_crit_edge, %dec_label_pc_145b0
  %v1_14650 = add i32 %v2_14584, -12
  store i32 %v1_14650, i32* %r5.global-to-local, align 4
  %v3_14654 = inttoptr i32 %v1_14650 to i32*
  store i32 %arg3, i32* %v3_14654, align 4
  %v0_14658 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14658, i32* @r3, align 4
  %v0_1465c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1465c, i32* @r2, align 4
  %v0_14660 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14660, i32* @r1, align 4
  %v0_14664 = call i32 @function_14548()
  br label %dec_label_pc_14668

dec_label_pc_14668:                               ; preds = %dec_label_pc_14644, %dec_label_pc_14650
  %v0_14668 = load i32, i32* %r5.global-to-local, align 4
  %v2_1466c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1466c, i32* @r4, align 4
  ret i32 %v0_14668

; uselistorder directives
  uselistorder i32 %v3_145f8, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_145bc, { 1, 0 }
  uselistorder i32 %v3_1459c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_145e8, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_145e0, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_14548, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_14568, { 1, 0 }
  uselistorder i32* @ip, { 12, 13, 1, 14, 0, 15, 6, 7, 8, 4, 5, 2, 9, 10, 3, 11 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14668, { 1, 0 }
  uselistorder label %dec_label_pc_14650, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14644, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_14590, { 1, 0 }
}

define i32 @function_14670() local_unnamed_addr {
dec_label_pc_1468c.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_14670 = ptrtoint i32* %stack_var_-268 to i32
  %v1_14680 = call i32 @function_14a5c()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_1468c = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_1468c

dec_label_pc_1468c:                               ; preds = %dec_label_pc_1468c.lr.ph, %dec_label_pc_1468c
  %v1_14690 = phi i32 [ 31, %dec_label_pc_1468c.lr.ph ], [ %v1_1469c, %dec_label_pc_1468c ]
  %v4_14690 = mul i32 %v1_14690, 4
  %v5_14690 = add i32 %v4_14690, %v2_1468c
  %v2_14698 = add i32 %v5_14690, -128
  %v3_14698 = inttoptr i32 %v2_14698 to i32*
  store i32 0, i32* %v3_14698, align 4
  %v0_1469c = load i32, i32* %r1.global-to-local, align 4
  %v1_1469c = add i32 %v0_1469c, -1
  store i32 %v1_1469c, i32* %r1.global-to-local, align 4
  %v6_1469c = icmp slt i32 %v1_1469c, 0
  br i1 %v6_1469c, label %dec_label_pc_146a4, label %dec_label_pc_1468c

dec_label_pc_146a4:                               ; preds = %dec_label_pc_1468c
  %v2_146a4 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_146a4, i32* @r4, align 4
  store i32 %v2_146a4, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_146b0 = call i32 @function_1402c()
  %v2_146b4 = icmp eq i32 %v0_146b0, 0
  br i1 %v2_146b4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_146a4
  store i32 %v2_146a4, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_146a4, %bb
  store i32 83656, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_146b4, i32 ptrtoint (i32* @global_var_1386c.888 to i32))
  %v2_146cc = load i32, i32* @global_var_1f20c.890, align 4
  %v2_146d0 = icmp eq i32 %v2_146cc, 0
  br i1 %v2_146d0, label %dec_label_pc_146d8, label %dec_label_pc_14708

dec_label_pc_146d8:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1f20c.890, align 4
  br label %dec_label_pc_146e0

dec_label_pc_146e0:                               ; preds = %dec_label_pc_14758, %dec_label_pc_146d8
  %v1_146ec = call i32 @function_14a5c()
  %v1_146f4 = call i32 @function_15bec(i32 6)
  store i32 83720, i32* @lr, align 4
  %v1_14704 = call i32 @function_14a5c()
  %v2_1470c.pre = load i32, i32* @global_var_1f20c.890, align 4
  br label %dec_label_pc_14708

dec_label_pc_14708:                               ; preds = %.thread1, %dec_label_pc_146e0
  %v0_1477c = phi i32 [ %v2_146cc, %.thread1 ], [ %v2_1470c.pre, %dec_label_pc_146e0 ]
  store i32 ptrtoint (i32* @global_var_1f20c.890 to i32), i32* %ip.global-to-local, align 4
  %v7_14710 = icmp eq i32 %v0_1477c, 1
  br i1 %v7_14710, label %dec_label_pc_14740.lr.ph, label %dec_label_pc_14774

dec_label_pc_14740.lr.ph:                         ; preds = %dec_label_pc_14708
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1f20c.890, align 4
  %v2_1472c = bitcast i32* %stack_var_-268 to i8*
  %v3_1472c = call i32 @function_13c00(i8* %v2_1472c, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14740

dec_label_pc_14740:                               ; preds = %dec_label_pc_14740.lr.ph, %dec_label_pc_14740
  %v1_14744 = phi i32 [ 31, %dec_label_pc_14740.lr.ph ], [ %v1_14750, %dec_label_pc_14740 ]
  %v4_14744 = mul i32 %v1_14744, 4
  %v5_14744 = add i32 %v4_14744, %v2_1468c
  %v2_1474c = add i32 %v5_14744, -264
  %v3_1474c = inttoptr i32 %v2_1474c to i32*
  store i32 -1, i32* %v3_1474c, align 4
  %v0_14750 = load i32, i32* %r1.global-to-local, align 4
  %v1_14750 = add i32 %v0_14750, -1
  store i32 %v1_14750, i32* %r1.global-to-local, align 4
  %v6_14750 = icmp slt i32 %v1_14750, 0
  br i1 %v6_14750, label %dec_label_pc_14758, label %dec_label_pc_14740

dec_label_pc_14758:                               ; preds = %dec_label_pc_14740
  store i32 %v2_14670, i32* %r1.global-to-local, align 4
  %v4_1476c = call i32 @function_14d48(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_146e0

dec_label_pc_14774:                               ; preds = %dec_label_pc_14708
  %v7_14774 = icmp eq i32 %v0_1477c, 2
  br i1 %v7_14774, label %dec_label_pc_1477c, label %dec_label_pc_14788

dec_label_pc_1477c:                               ; preds = %dec_label_pc_14774
  store i32 3, i32* @global_var_1f20c.890, align 4
  %v0_14784 = call i32 @function_14670()
  %v2_14788.pre = load i32, i32* @global_var_1f20c.890, align 4
  br label %dec_label_pc_14788

dec_label_pc_14788:                               ; preds = %dec_label_pc_14774, %dec_label_pc_1477c
  %v1_14790 = phi i32 [ %v0_1477c, %dec_label_pc_14774 ], [ %v2_14788.pre, %dec_label_pc_1477c ]
  %v7_1478c = icmp eq i32 %v1_14790, 3
  br i1 %v7_1478c, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_14788
  %v2_14798 = load i32, i32* %ip.global-to-local, align 4
  %v3_14798 = inttoptr i32 %v2_14798 to i32*
  store i32 4, i32* %v3_14798, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14788, %bb27
  call void @__pseudo_cond_branch(i1 %v7_1478c, i32 ptrtoint (i32* @global_var_14e60.892 to i32))
  br label %dec_label_pc_147a0

dec_label_pc_147a0:                               ; preds = %dec_label_pc_147a0, %.thread3
  %v0_147a0 = call i32 @function_14670()
  br label %dec_label_pc_147a0

; uselistorder directives
  uselistorder i32 %v1_14750, { 2, 1, 0 }
  uselistorder i32 %v1_1469c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1f20c.890, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14788, { 1, 0 }
  uselistorder label %dec_label_pc_14740, { 1, 0 }
  uselistorder label %dec_label_pc_14708, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_1468c, { 1, 0 }
}

define i32 @function_147b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_147b8:
  %stack_var_-16 = alloca i32, align 4
  %v2_147b8 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_147b8, i32* @r0, align 4
  %v8_147d4 = call i32 @function_14a64(i32 %v2_147b8, i32 ptrtoint (i32* @global_var_14a5c.844 to i32), i32 ptrtoint (i32* @global_var_1f154.895 to i32), i32 84580, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_147e4 = call i32 @function_14a5c()
  %v2_147ec = load i32, i32* @global_var_1f210.899, align 4
  %v2_147f0 = icmp eq i32 %v2_147ec, 0
  br i1 %v2_147f0, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_147b8
  call void @__pseudo_branch(i32 %v2_147ec)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_147b8, %bb
  store i32 %v2_147b8, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_14814.901 to i32), i32* @lr, align 4
  %v8_14810 = call i32 @function_14a64(i32 %v2_147b8, i32 1, i32 ptrtoint (i32* @global_var_1f154.895 to i32), i32 84580, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_14810, i32* @r0, align 4
  %v1_14814 = call i32 @function_149f0(i32 %v8_14810)
  store i1 true, i1* @cpsr_z, align 1
  %v0_14828 = load i32, i32* @r4, align 4
  %v1_1482c = call i32 @function_14e60(i32 %v0_14828)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_147b8, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_14a5c, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_14a64, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 84580, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1f154.895 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_14a5c.844 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_1484c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1484c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1484c = load i32, i32* @r4, align 4
  store i32 %v3_1484c, i32* %stack_var_-20, align 4
  %v6_1484c = load i32, i32* @r5, align 4
  %v9_1484c = load i32, i32* @r6, align 4
  %v16_1484c = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v2_14850 = icmp eq i32 %arg1, 0
  %v2_14854 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_14850, label %dec_label_pc_149d8, label %dec_label_pc_1486c.preheader

dec_label_pc_1486c.preheader:                     ; preds = %dec_label_pc_1484c
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_1487417 = add i32 %v16_1484c, 124
  br label %dec_label_pc_14864

dec_label_pc_14864:                               ; preds = %dec_label_pc_1486c.preheader, %dec_label_pc_14864
  %v5_1487418 = phi i32 [ %v5_1487417, %dec_label_pc_1486c.preheader ], [ %v5_14874, %dec_label_pc_14864 ]
  %v2_14868 = add i32 %v5_1487418, -136
  %v3_14868 = inttoptr i32 %v2_14868 to i32*
  store i32 0, i32* %v3_14868, align 4
  %v0_1486c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_1486c = add i32 %v0_1486c.pre, -1
  store i32 %v1_1486c, i32* %r1.global-to-local, align 4
  %v6_1486c = icmp slt i32 %v1_1486c, 0
  %v4_14874 = mul i32 %v1_1486c, 4
  %v5_14874 = add i32 %v4_14874, %v16_1484c
  br i1 %v6_1486c, label %dec_label_pc_1487c, label %dec_label_pc_14864

dec_label_pc_1487c:                               ; preds = %dec_label_pc_14864
  %v2_1487c = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_1487c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_1488c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_1488c, i32* %stack_var_-28, align 4
  %v0_14894 = call i32 @function_1402c()
  store i32 %v0_14894, i32* %r0.global-to-local, align 4
  %v1_14898 = load i32, i32* @r5, align 4
  %v5_1489c = icmp slt i32 %v0_14894, %v1_14898
  br i1 %v5_1489c, label %dec_label_pc_149e0, label %dec_label_pc_148a0

dec_label_pc_148a0:                               ; preds = %dec_label_pc_1487c
  %v2_148a0 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_148a0, i32* @r4, align 4
  store i32 %v1_14898, i32* %r0.global-to-local, align 4
  store i32 %v2_1487c, i32* %r1.global-to-local, align 4
  %v3_148b0 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_148b0 = call i32 @function_1386c(i32 %v1_14898, %_TYPEDEF_sigset_t* %v3_148b0, i32 %v2_148a0)
  store i32 %v4_148b0, i32* %r0.global-to-local, align 4
  %v1_148b4 = load i32, i32* @r5, align 4
  %v9_148b4 = icmp eq i32 %v4_148b0, %v1_148b4
  br i1 %v9_148b4, label %dec_label_pc_148bc, label %dec_label_pc_149e0

dec_label_pc_148bc:                               ; preds = %dec_label_pc_148a0
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_148a0, i32* %r0.global-to-local, align 4
  %v2_148c4 = call i32 @function_14008(i32 %v2_148a0, i32 17)
  store i32 %v2_148c4, i32* %r0.global-to-local, align 4
  %v1_148c8 = load i32, i32* @r5, align 4
  %v9_148c8 = icmp eq i32 %v2_148c4, %v1_148c8
  br i1 %v9_148c8, label %dec_label_pc_148e0.preheader, label %dec_label_pc_148bc.dec_label_pc_149a8_crit_edge

dec_label_pc_148bc.dec_label_pc_149a8_crit_edge:  ; preds = %dec_label_pc_148bc
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_149a8

dec_label_pc_148e0.preheader:                     ; preds = %dec_label_pc_148bc
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_148d8

dec_label_pc_148d8:                               ; preds = %dec_label_pc_148e0.preheader, %dec_label_pc_148d8
  %v5_148e816 = phi i32 [ %v5_1487417, %dec_label_pc_148e0.preheader ], [ %v5_148e8, %dec_label_pc_148d8 ]
  %v2_148dc = add i32 %v5_148e816, -136
  %v3_148dc = inttoptr i32 %v2_148dc to i32*
  store i32 0, i32* %v3_148dc, align 4
  %v0_148e0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_148e0 = add i32 %v0_148e0.pre, -1
  store i32 %v1_148e0, i32* %r1.global-to-local, align 4
  %v6_148e0 = icmp slt i32 %v1_148e0, 0
  %v4_148e8 = mul i32 %v1_148e0, 4
  %v5_148e8 = add i32 %v4_148e8, %v16_1484c
  br i1 %v6_148e0, label %dec_label_pc_148f0, label %dec_label_pc_148d8

dec_label_pc_148f0:                               ; preds = %dec_label_pc_148d8
  store i32 %v2_1487c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_148f8 = call i32 @function_1402c()
  store i32 %v0_148f8, i32* %r0.global-to-local, align 4
  %v1_148fc = icmp slt i32 %v0_148f8, 0
  br i1 %v1_148fc, label %dec_label_pc_149e0, label %dec_label_pc_14904

dec_label_pc_14904:                               ; preds = %dec_label_pc_148f0
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_14910 = call i32 @function_14d48(i32 17, i32* null, i32 %v2_14854)
  store i32 %v4_14910, i32* %r0.global-to-local, align 4
  %v1_14914 = icmp slt i32 %v4_14910, 0
  br i1 %v1_14914, label %dec_label_pc_1491c, label %dec_label_pc_14944

dec_label_pc_1491c:                               ; preds = %dec_label_pc_14904
  %v0_1491c = call i32 @function_13b98()
  store i32 %v2_148a0, i32* %r1.global-to-local, align 4
  store i32 %v0_1491c, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_14930 = inttoptr i32 %v0_1491c to i32*
  %v2_14930 = load i32, i32* %v1_14930, align 4
  store i32 %v2_14930, i32* @r4, align 4
  %v3_14934 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14934 = call i32 @function_1386c(i32 2, %_TYPEDEF_sigset_t* %v3_14934, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_1493c = load i32, i32* @r4, align 4
  %v1_1493c = load i32, i32* %r5.global-to-local, align 4
  %v2_1493c = inttoptr i32 %v1_1493c to i32*
  store i32 %v0_1493c, i32* %v2_1493c, align 4
  %v17_149e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_149e4

dec_label_pc_14944:                               ; preds = %dec_label_pc_14904
  %v2_14944 = load i32, i32* %stack_var_-424, align 4
  %v7_14948 = icmp eq i32 %v2_14944, 1
  %v2_14950 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_14950, i32* @r4, align 4
  br i1 %v7_14948, label %dec_label_pc_14958, label %dec_label_pc_1498c

dec_label_pc_14958:                               ; preds = %dec_label_pc_14944
  store i32 %v2_14950, i32* %r1.global-to-local, align 4
  store i32 %v2_14950, i32* %r0.global-to-local, align 4
  %v2_14960 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_14960 = call i32 @function_151e4(%timespec* %v2_14960, i32 %v2_14950)
  store i32 %v3_14960, i32* %r0.global-to-local, align 4
  store i32 %v3_14960, i32* %r6.global-to-local, align 4
  %v0_14968 = call i32 @function_13b98()
  store i32 %v2_148a0, i32* %r1.global-to-local, align 4
  store i32 %v0_14968, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_1497c = inttoptr i32 %v0_14968 to i32*
  %v2_1497c = load i32, i32* %v1_1497c, align 4
  store i32 %v2_1497c, i32* @r4, align 4
  %v3_14980 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14980 = call i32 @function_1386c(i32 2, %_TYPEDEF_sigset_t* %v3_14980, i32 0)
  store i32 %v4_14980, i32* %r0.global-to-local, align 4
  %v0_14984 = load i32, i32* @r4, align 4
  %v1_14984 = load i32, i32* %r5.global-to-local, align 4
  %v2_14984 = inttoptr i32 %v1_14984 to i32*
  store i32 %v0_14984, i32* %v2_14984, align 4
  %v0_149b4.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_149b4

dec_label_pc_1498c:                               ; preds = %dec_label_pc_14944
  store i32 %v2_148a0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_14998 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14998 = call i32 @function_1386c(i32 2, %_TYPEDEF_sigset_t* %v3_14998, i32 0)
  store i32 %v4_14998, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_149a8

dec_label_pc_149a8:                               ; preds = %dec_label_pc_148bc.dec_label_pc_149a8_crit_edge, %dec_label_pc_1498c
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_148bc.dec_label_pc_149a8_crit_edge ], [ %v2_14950, %dec_label_pc_1498c ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_149ac = bitcast i32* %stack_var_-28 to %timespec*
  %v3_149ac = call i32 @function_151e4(%timespec* %v2_149ac, i32 %storemerge.pre-phi)
  store i32 %v3_149ac, i32* %r0.global-to-local, align 4
  store i32 %v3_149ac, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_149b4

dec_label_pc_149b4:                               ; preds = %dec_label_pc_14958, %dec_label_pc_149a8
  %v0_149b4 = phi i32 [ %v0_149b4.pr, %dec_label_pc_14958 ], [ %v3_149ac, %dec_label_pc_149a8 ]
  %v2_149b4 = icmp eq i32 %v0_149b4, 0
  br i1 %v2_149b4, label %dec_label_pc_149d8, label %dec_label_pc_149bc

dec_label_pc_149bc:                               ; preds = %dec_label_pc_149b4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_149c4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_149c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_149e4

dec_label_pc_149d8:                               ; preds = %dec_label_pc_1484c, %dec_label_pc_149b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_149e4

dec_label_pc_149e0:                               ; preds = %dec_label_pc_148a0, %dec_label_pc_148f0, %dec_label_pc_1487c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_149e4

dec_label_pc_149e4:                               ; preds = %dec_label_pc_149bc, %dec_label_pc_149d8, %dec_label_pc_1491c, %dec_label_pc_149e0
  %v17_149e8 = phi i32 [ %v3_149c4, %dec_label_pc_149bc ], [ 0, %dec_label_pc_149d8 ], [ %v17_149e8.pre, %dec_label_pc_1491c ], [ -1, %dec_label_pc_149e0 ]
  %v2_149e8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_149e8, i32* @r4, align 4
  store i32 %v6_1484c, i32* @r5, align 4
  store i32 %v9_1484c, i32* @r6, align 4
  ret i32 %v17_149e8

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_14950, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_148e0, { 0, 2, 1 }
  uselistorder i32 %v2_148a0, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_14898, { 1, 0, 2 }
  uselistorder i32 %v1_1486c, { 0, 2, 1 }
  uselistorder i32 %v16_1484c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 9, 0, 11, 12, 14, 13, 1 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 7, 8, 1, 10, 9, 12, 11, 4, 13, 15, 16, 14, 18, 17, 19, 3, 20, 2, 21, 22, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_14d48, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_1386c, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_1402c, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_149e4, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_149e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_149d8, { 1, 0 }
  uselistorder label %dec_label_pc_149b4, { 1, 0 }
  uselistorder label %dec_label_pc_149a8, { 1, 0 }
  uselistorder label %dec_label_pc_148d8, { 1, 0 }
  uselistorder label %dec_label_pc_14864, { 1, 0 }
}

define i32 @function_149f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_14a1c:
  %stack_var_-8 = alloca i32, align 4
  %v3_149f0 = load i32, i32* @r4, align 4
  store i32 %v3_149f0, i32* %stack_var_-8, align 4
  %v2_14a20 = load i32, i32* @global_var_1f220.908, align 4
  %v2_14a24 = icmp eq i32 %v2_14a20, 0
  br i1 %v2_14a24, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14a1c
  store i32 84528, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_14a20)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14a1c, %bb
  %v2_14a34 = load i32, i32* @global_var_1f224.910, align 4
  %v2_14a38 = icmp eq i32 %v2_14a34, 0
  br i1 %v2_14a38, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_14a3c = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_14a3c, i32* @r4, align 4
  %v9_14a3c = load i32, i32* @r0, align 4
  ret i32 %v9_14a3c

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_14a48.911 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_14a34)
  %v2_14a48 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14a48, i32* @r4, align 4
  %v8_14a48 = load i32, i32* @r0, align 4
  ret i32 %v8_14a48

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14a5c() local_unnamed_addr {
dec_label_pc_14a5c:
  ret i32 0
}

define i32 @function_14a64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14a64:
  %v1_14a64 = load i32, i32* @r0, align 4
  ret i32 %v1_14a64
}

define i32 @function_14a68(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14a68:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14a68 = load i32, i32* @r4, align 4
  store i32 %v3_14a68, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_14a78 = call i32 @function_1352c(i32 %arg1, i32 1)
  %v7_14a7c = icmp eq i32 %v2_14a78, -1
  br i1 %v7_14a7c, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14a68
  %v3_14a80 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_14a80, i32* @r4, align 4
  ret i32 %v2_14a78

bb4:                                              ; preds = %dec_label_pc_14a68
  %v0_14a84 = load i32, i32* @r4, align 4
  %v4_14a8c = call i32 @function_1371c(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_168c0.913, i32 0, i32 0), i32 %v0_14a84)
  %v1_14a90 = load i32, i32* %r5.global-to-local, align 4
  %v9_14a90 = icmp eq i32 %v4_14a8c, %v1_14a90
  br i1 %v9_14a90, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_14a94 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_14a94, i32* @r4, align 4
  ret i32 %v4_14a8c

bb6:                                              ; preds = %bb4
  %v0_14a98 = call i32 @function_14670()
  %v0_14a9c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14a9c, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %v5_14a9c = sdiv i32 %v0_14a98, 131072
  %v6_14a9c = and i32 %v5_14a9c, %v0_14a84
  store i32 %v6_14a9c, i32* @r6, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_14a98

; uselistorder directives
  uselistorder i32 %v0_14a98, { 1, 0 }
  uselistorder i32 %v2_14a78, { 1, 0 }
  uselistorder i1* @cpsr_z, { 12, 11, 0, 1, 13, 10, 7, 8, 2, 3, 4, 5, 6, 9 }
  uselistorder i32 ()* @function_14670, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_1371c, { 7, 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 (i32, i32)* @function_1352c, { 0, 5, 11, 10, 13, 12, 9, 8, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_14aa0(i32 %arg1) local_unnamed_addr {
dec_label_pc_14aa0:
  %v2_14aa4 = load i32, i32* @global_var_1f228.915, align 4
  %v2_14aa8 = icmp eq i32 %v2_14aa4, 0
  br i1 %v2_14aa8, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_14aa0
  %v6_14ab4 = load i32, i32* @r0, align 4
  ret i32 %v6_14ab4

bb2:                                              ; preds = %dec_label_pc_14aa0
  store i32 1, i32* @global_var_1f228.915, align 4
  store i32 4096, i32* @global_var_1f21c.869, align 4
  ret i32 undef
}

define i32 @function_14afc(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14afc:
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r6, align 4
  %v4_14b00 = mul i32 %arg2, 4
  %v5_14b00 = add i32 %tmp, %v4_14b00
  %v2_14b04 = load i32, i32* %arg3, align 4
  %v2_14b08 = ptrtoint i32* %stack_var_-120 to i32
  %v1_14b0c = add i32 %v5_14b00, 4
  %v9_14b10 = icmp eq i32 %v1_14b0c, %v2_14b04
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1f214.920, align 4
  store i32 %v1_14b0c, i32* @global_var_1f218.922, align 4
  store i32 %arg6, i32* @global_var_1f224.910, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_14b10, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_14afc
  store i32 %v5_14b00, i32* @global_var_1f218.922, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_14afc, %bb
  %v2_14b50 = bitcast i32* %stack_var_-120 to i8*
  %v3_14b50 = call i32 @function_13c00(i8* %v2_14b50, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1f218.922, align 4
  br label %dec_label_pc_14b60

dec_label_pc_14b60:                               ; preds = %dec_label_pc_14b60, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_14b60, %dec_label_pc_14b60 ]
  %v1_14b60 = inttoptr i32 %storemerge to i32*
  %v2_14b60 = load i32, i32* %v1_14b60, align 4
  %v4_14b60 = add i32 %storemerge, 4
  %v2_14b64 = icmp eq i32 %v2_14b60, 0
  br i1 %v2_14b64, label %dec_label_pc_14b70, label %dec_label_pc_14b60

dec_label_pc_14b70:                               ; preds = %dec_label_pc_14b60
  store i32 %v4_14b60, i32* @r4, align 4
  %v1_14b9022 = inttoptr i32 %v4_14b60 to i32*
  %v2_14b9023 = load i32, i32* %v1_14b9022, align 4
  %v2_14b9425 = icmp eq i32 %v2_14b9023, 0
  br i1 %v2_14b9425, label %dec_label_pc_14b9c, label %dec_label_pc_14b78

dec_label_pc_14b78:                               ; preds = %dec_label_pc_14b70, %dec_label_pc_14b90
  %v5_14b7c = phi i32 [ %v2_14b90, %dec_label_pc_14b90 ], [ %v2_14b9023, %dec_label_pc_14b70 ]
  %v2_14b78 = icmp ugt i32 %v5_14b7c, 13
  %v7_14b78 = icmp eq i32 %v5_14b7c, 14
  %v2_14b7c = xor i1 %v2_14b78, true
  %v3_14b7c = or i1 %v7_14b78, %v2_14b7c
  br i1 %v3_14b7c, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_14b78
  %v6_14b7c = and i32 %v5_14b7c, 536870912
  %v7_14b7c = icmp ne i32 %v6_14b7c, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_14b78, %bb42
  %v1_14b88 = phi i1 [ %v2_14b78, %dec_label_pc_14b78 ], [ %v7_14b7c, %bb42 ]
  %v2_14b80 = xor i1 %v1_14b88, true
  %v3_14b80 = or i1 %v7_14b78, %v2_14b80
  br i1 %v3_14b80, label %bb44, label %dec_label_pc_14b90

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_14b90

dec_label_pc_14b90:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_14b80, i32 ptrtoint (i32* @global_var_13be0.924 to i32))
  %v0_14b8c = load i32, i32* @r4, align 4
  %v1_14b8c = add i32 %v0_14b8c, 8
  store i32 %v1_14b8c, i32* @r4, align 4
  %v1_14b90 = inttoptr i32 %v1_14b8c to i32*
  %v2_14b90 = load i32, i32* %v1_14b90, align 4
  %v2_14b94 = icmp eq i32 %v2_14b90, 0
  br i1 %v2_14b94, label %dec_label_pc_14b9c, label %dec_label_pc_14b78

dec_label_pc_14b9c:                               ; preds = %dec_label_pc_14b90, %dec_label_pc_14b70
  %v1_14ba0 = call i32 @function_15c04(i32 %v2_14b08)
  store i32 %v1_14ba0, i32* @r0, align 4
  %v1_14ba4 = call i32 @function_14aa0(i32 %v1_14ba0)
  store i32 %v1_14ba4, i32* @r0, align 4
  %v2_14bb0 = icmp eq i32 %tmp37, 0
  br i1 %v2_14bb0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_14b9c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_14b9c, %bb45
  %v0_14bc0 = phi i32 [ %tmp37, %dec_label_pc_14b9c ], [ 4096, %bb45 ]
  %v3_14bb8 = icmp eq i32 %tmp36, -1
  %v8_14bb8 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1f21c.869 to i32), i32* @r2, align 4
  store i32 %v0_14bc0, i32* @global_var_1f21c.869, align 4
  br i1 %v3_14bb8, label %dec_label_pc_14bc8, label %dec_label_pc_14bf0

dec_label_pc_14bc8:                               ; preds = %bb46
  %v0_14bc8 = call i32 @function_15154()
  store i32 %v0_14bc8, i32* @r0, align 4
  store i32 %v0_14bc8, i32* @r4, align 4
  %v0_14bd0 = call i32 @function_150fc()
  %v0_14bd4 = load i32, i32* @r4, align 4
  %v9_14bd4 = icmp eq i32 %v0_14bd4, %v0_14bd0
  br i1 %v9_14bd4, label %dec_label_pc_14bdc, label %dec_label_pc_14c18

dec_label_pc_14bdc:                               ; preds = %dec_label_pc_14bc8
  %v1_14bdc = call i32 @function_15128(i32 %v0_14bd0)
  store i32 %v1_14bdc, i32* @r0, align 4
  store i32 %v1_14bdc, i32* @r4, align 4
  %v0_14be4 = call i32 @function_150d0()
  %v0_14be8 = load i32, i32* @r4, align 4
  %v9_14be8 = icmp eq i32 %v0_14be8, %v0_14be4
  br i1 %v9_14be8, label %dec_label_pc_14bf0, label %dec_label_pc_14c18

dec_label_pc_14bf0:                               ; preds = %dec_label_pc_14bdc, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_14bb8, label %dec_label_pc_14c84, label %dec_label_pc_14bfc

dec_label_pc_14bfc:                               ; preds = %dec_label_pc_14bf0
  %v9_14c00 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_14c00, label %dec_label_pc_14c08, label %dec_label_pc_14c18

dec_label_pc_14c08:                               ; preds = %dec_label_pc_14bfc
  br label %dec_label_pc_14c18

dec_label_pc_14c18:                               ; preds = %dec_label_pc_14c08, %dec_label_pc_14bfc, %dec_label_pc_14bdc, %dec_label_pc_14bc8
  %v2_14c20 = call i32 @function_14a68(i32 0, i32 32768)
  %v2_14c2c = call i32 @function_14a68(i32 1, i32 32770)
  %v2_14c38 = call i32 @function_14a68(i32 2, i32 32770)
  br label %dec_label_pc_14c84

dec_label_pc_14c84:                               ; preds = %dec_label_pc_14c18, %dec_label_pc_14bf0
  %v0_14c48 = load i32, i32* @r6, align 4
  %v1_14c48 = inttoptr i32 %v0_14c48 to i32*
  %v2_14c48 = load i32, i32* %v1_14c48, align 4
  store i32 %v2_14c48, i32* @global_var_1f16c, align 4
  store i32 %arg5, i32* @global_var_1f220.908, align 4
  %v2_14c84 = icmp eq i32 %arg4, 0
  br i1 %v2_14c84, label %dec_label_pc_14cc0, label %bb47

bb47:                                             ; preds = %dec_label_pc_14c84
  br label %dec_label_pc_14cc0

dec_label_pc_14cc0:                               ; preds = %dec_label_pc_14c84, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_14cd0 = call i32 @function_13b98()
  %v2_14cd8 = inttoptr i32 %v1_14cd0 to i32*
  store i32 0, i32* %v2_14cd8, align 4
  %v0_14d04 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_14d10 = call i32 @function_147b8(i32 %v0_14d04)
  ret i32 %v1_14d10

; uselistorder directives
  uselistorder i32 %v2_14b90, { 1, 0 }
  uselistorder i32 %v1_14b8c, { 1, 0 }
  uselistorder i1 %v2_14b78, { 1, 0 }
  uselistorder i32 %v4_14b60, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_147b8, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_14a68, { 2, 1, 0 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1f21c.869, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i1 true, { 0, 1, 87, 2, 3, 4, 5, 6, 57, 7, 8, 9, 10, 11, 112, 52, 58, 64, 89, 65, 113, 15, 16, 17, 90, 80, 91, 92, 93, 59, 18, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 19, 20, 110, 111, 79, 55, 13, 14, 78, 12, 114, 32, 31, 66, 73, 67, 74, 62, 72, 63, 77, 115, 21, 116, 117, 22, 23, 24, 118, 81, 82, 25, 26, 119, 83, 84, 27, 28, 120, 85, 86, 29, 30, 61, 121, 122, 75, 123, 53, 68, 33, 54, 34, 35, 36, 69, 37, 60, 38, 39, 40, 41, 42, 43, 124, 125, 126, 127, 70, 128, 129, 130, 131, 132, 133, 134, 135, 48, 136, 49, 50, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 47, 151, 152, 153, 154, 155, 156, 46, 157, 56, 158, 71, 76, 51, 159, 44, 45, 88, 160 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_14cc0, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_14b90, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_14b78, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_14d48(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14d48:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_14d48 = load i32, i32* @r4, align 4
  %v6_14d48 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_14d4c = icmp eq i32* %arg2, null
  %v2_14d50 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_14d4c, label %dec_label_pc_14dbc, label %dec_label_pc_14d60

dec_label_pc_14d60:                               ; preds = %dec_label_pc_14d48
  %v2_14d64 = load i32, i32* %arg2, align 4
  %v4_14d64 = add i32 %tmp, 4
  store i32 %v4_14d64, i32* @r1, align 4
  %v2_14d68 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_14d68, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_14d64, i32* %stack_var_-156, align 4
  %v3_14d74 = call i32 @function_13be0(i32 %v2_14d68, i32 %v4_14d64, i32 128)
  store i32 %v3_14d74, i32* %r0.global-to-local, align 4
  %v0_14d78 = load i32, i32* @r4, align 4
  %v1_14d78 = add i32 %v0_14d78, 132
  %v2_14d78 = inttoptr i32 %v1_14d78 to i32*
  %v3_14d78 = load i32, i32* %v2_14d78, align 4
  %v1_14d7c = and i32 %v3_14d78, 67108864
  %v2_14d7c = icmp eq i32 %v1_14d7c, 0
  br i1 %v2_14d7c, label %dec_label_pc_14d90, label %bb

bb:                                               ; preds = %dec_label_pc_14d60
  br label %dec_label_pc_14dac

dec_label_pc_14d90:                               ; preds = %dec_label_pc_14d60
  %v1_14d98 = and i32 %v3_14d78, 4
  %v2_14d98 = icmp eq i32 %v1_14d98, 0
  br i1 %v2_14d98, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_14d90
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_14d90, %bb20
  br label %dec_label_pc_14dac

dec_label_pc_14dac:                               ; preds = %bb, %bb21
  %v2_14dac = icmp eq i32 %v0_14d78, 0
  %v3_14db0 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_14db0 = select i1 %v2_14dac, i32 0, i32 %v3_14db0
  %v0_14dbc.pre = load i32, i32* @r5, align 4
  %v0_14dcc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14dbc

dec_label_pc_14dbc:                               ; preds = %dec_label_pc_14dac, %dec_label_pc_14d48
  %v0_14dcc = phi i32 [ %arg1, %dec_label_pc_14d48 ], [ %v0_14dcc.pre, %dec_label_pc_14dac ]
  %v0_14dbc = phi i32 [ %arg3, %dec_label_pc_14d48 ], [ %v0_14dbc.pre, %dec_label_pc_14dac ]
  %storemerge = phi i32 [ 0, %dec_label_pc_14d48 ], [ %.v3_14db0, %dec_label_pc_14dac ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_14dbc = icmp eq i32 %v0_14dbc, 0
  %.v2_14d50 = select i1 %v2_14dbc, i32 0, i32 %v2_14d50
  store i32 %.v2_14d50, i32* @r2, align 4
  store i32 %v0_14dcc, i32* %r0.global-to-local, align 4
  %v1_14dd0 = call i32 @function_14e34(i32 %v0_14dcc)
  store i32 %v1_14dd0, i32* %r0.global-to-local, align 4
  %v0_14dd4 = load i32, i32* @r5, align 4
  %v2_14dd4 = icmp eq i32 %v0_14dd4, 0
  br i1 %v2_14dd4, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_14dbc
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_14dbc, %bb25
  %v0_14de4.pr = phi i32 [ 0, %dec_label_pc_14dbc ], [ 1, %bb25 ]
  %v1_14ddc = icmp slt i32 %v1_14dd0, 0
  br i1 %v1_14ddc, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_14e18

thread-pre-split:                                 ; preds = %bb26
  %v2_14de4 = icmp eq i32 %v0_14de4.pr, 0
  store i32 %v1_14dd0, i32* @r4, align 4
  br i1 %v2_14de4, label %dec_label_pc_14e18, label %dec_label_pc_14df0

dec_label_pc_14df0:                               ; preds = %thread-pre-split
  %v2_14df0 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_14dd4, i32* %r0.global-to-local, align 4
  %v2_14df8 = inttoptr i32 %v0_14dd4 to i32*
  store i32 %v2_14df0, i32* %v2_14df8, align 4
  %v3_14df8 = load i32, i32* %r0.global-to-local, align 4
  %v4_14df8 = add i32 %v3_14df8, 4
  store i32 %v4_14df8, i32* @r0, align 4
  %v2_14dfc = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_14dfc, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_14e04 = call i32 @function_13be0(i32 %v4_14df8, i32 %v2_14dfc, i32 128)
  store i32 %v3_14e04, i32* %r0.global-to-local, align 4
  %v1_14e0c = load i32, i32* @r5, align 4
  %v2_14e0c = add i32 %v1_14e0c, 136
  %v3_14e0c = inttoptr i32 %v2_14e0c to i32*
  %v1_14e14 = load i32, i32* @r5, align 4
  %v2_14e14 = add i32 %v1_14e14, 132
  %v3_14e14 = inttoptr i32 %v2_14e14 to i32*
  %v0_14e18.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14e18

dec_label_pc_14e18:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_14df0
  %v0_14e18 = phi i32 [ %v1_14dd0, %thread-pre-split ], [ %v0_14e18.pre, %dec_label_pc_14df0 ], [ %v1_14dd0, %thread-pre-split.thread ]
  store i32 %v0_14e18, i32* %r0.global-to-local, align 4
  store i32 %v3_14d48, i32* @r4, align 4
  store i32 %v6_14d48, i32* @r5, align 4
  ret i32 %v0_14e18

; uselistorder directives
  uselistorder i32 %v0_14e18, { 1, 0 }
  uselistorder i32 %v0_14dd4, { 1, 0, 2 }
  uselistorder i32 %v0_14dcc, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_14e18, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_14dac, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_14e34(i32 %arg1) local_unnamed_addr {
dec_label_pc_14e34:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14e34 = load i32, i32* @r4, align 4
  store i32 %v3_14e34, i32* %stack_var_-8, align 4
  %v1_14e38 = load i32, i32* @r1, align 4
  %v2_14e38 = inttoptr i32 %v1_14e38 to %sigaction*
  %v3_14e38 = load i32, i32* @r2, align 4
  %v4_14e38 = inttoptr i32 %v3_14e38 to %sigaction*
  %v5_14e38 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_14e38, %sigaction* %v4_14e38)
  store i32 %v5_14e38, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14e38, -4095
  br i1 %tmp, label %dec_label_pc_14e58, label %dec_label_pc_14e48

dec_label_pc_14e48:                               ; preds = %dec_label_pc_14e34
  %v0_14e48 = call i32 @function_13b98()
  %v0_14e4c = load i32, i32* %r4.global-to-local, align 4
  %v1_14e4c = sub i32 0, %v0_14e4c
  %v2_14e50 = inttoptr i32 %v0_14e48 to i32*
  store i32 %v1_14e4c, i32* %v2_14e50, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14e58

dec_label_pc_14e58:                               ; preds = %dec_label_pc_14e34, %dec_label_pc_14e48
  %v0_14e58 = phi i32 [ %v5_14e38, %dec_label_pc_14e34 ], [ -1, %dec_label_pc_14e48 ]
  %v2_14e5c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14e5c, i32* %r4.global-to-local, align 4
  ret i32 %v0_14e58

; uselistorder directives
  uselistorder i32 %v5_14e38, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14e58, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_14e60(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_14e60:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_14e88() local_unnamed_addr {
dec_label_pc_14e88:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_14e98 = load i32, i32* @r0, align 4
  %v4_14e98 = call i32 @fstat(i32 %v0_14e98, %stat* %tmp4)
  store i32 %v4_14e98, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_14e98, -4095
  br i1 %tmp, label %dec_label_pc_14ebc, label %dec_label_pc_14ea8

dec_label_pc_14ea8:                               ; preds = %dec_label_pc_14e88
  %v0_14ea8 = call i32 @function_13b98()
  %v0_14eac = load i32, i32* %r4.global-to-local, align 4
  %v1_14eac = sub i32 0, %v0_14eac
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14eb4 = inttoptr i32 %v0_14ea8 to i32*
  store i32 %v1_14eac, i32* %v2_14eb4, align 4
  br label %dec_label_pc_14ecc

dec_label_pc_14ebc:                               ; preds = %dec_label_pc_14e88
  %v2_14ebc = icmp eq i32 %v4_14e98, 0
  store i32 85708, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_14ebc, i32 ptrtoint (i32* @global_var_155a4.941 to i32))
  br label %dec_label_pc_14ecc

dec_label_pc_14ecc:                               ; preds = %dec_label_pc_14ea8, %dec_label_pc_14ebc
  %v0_14ecc = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_14ecc

; uselistorder directives
  uselistorder i32 %v4_14e98, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 3, 14, 12, 13, 7, 8, 0, 1, 2, 4, 5, 6, 9, 10, 11 }
  uselistorder label %dec_label_pc_14ecc, { 1, 0 }
}

define i32 @function_14ed8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14ed8:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_14ed8 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_14ee0 = call i32 @function_14f6c()
  store i32 %v0_14ee0, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_14ee0, 1
  br i1 %tmp8, label %dec_label_pc_14f64, label %dec_label_pc_14f50.preheader

dec_label_pc_14f50.preheader:                     ; preds = %dec_label_pc_14ed8
  %v5_14ee8 = load i32, i32* @r4, align 4
  %v7_14ee8 = add i32 %v5_14ee8, %v0_14ee0
  store i32 %v7_14ee8, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14f50

dec_label_pc_14ef4:                               ; preds = %dec_label_pc_14f50
  %v1_14ef4 = add i32 %v2_14f04, 16
  %v2_14ef4 = inttoptr i32 %v1_14ef4 to i32*
  %v3_14ef4 = load i32, i32* %v2_14ef4, align 4
  store i32 %v3_14ef4, i32* @lr, align 4
  %v2_14ef8 = inttoptr i32 %v1_14f54 to i32*
  %v3_14ef8 = load i32, i32* %v2_14ef8, align 4
  store i32 %v3_14ef8, i32* %r2.global-to-local, align 4
  %v1_14efc = add i32 %v2_14f04, 18
  %v2_14efc = inttoptr i32 %v1_14efc to i8*
  %v3_14efc = load i8, i8* %v2_14efc, align 1
  %v4_14efc = zext i8 %v3_14efc to i32
  store i32 %v4_14efc, i32* %ip.global-to-local, align 4
  %v3_14f00 = sdiv i32 %v3_14ef4, 256
  store i32 %v3_14f00, i32* %r3.global-to-local, align 4
  %v1_14f04 = trunc i32 %v3_14ef4 to i8
  %v4_14f04 = inttoptr i32 %v1_14f54 to i8*
  store i8 %v1_14f04, i8* %v4_14f04, align 1
  %v0_14f08 = load i32, i32* %r2.global-to-local, align 4
  %v1_14f08 = load i32, i32* @r4, align 4
  %v2_14f08 = add i32 %v1_14f08, 4
  %v3_14f08 = inttoptr i32 %v2_14f08 to i32*
  store i32 %v0_14f08, i32* %v3_14f08, align 4
  %v0_14f0c = load i32, i32* %ip.global-to-local, align 4
  %v1_14f0c = trunc i32 %v0_14f0c to i8
  %v2_14f0c = load i32, i32* @r4, align 4
  %v3_14f0c = add i32 %v2_14f0c, 10
  %v4_14f0c = inttoptr i32 %v3_14f0c to i8*
  store i8 %v1_14f0c, i8* %v4_14f0c, align 1
  %v0_14f10 = load i32, i32* %r3.global-to-local, align 4
  %v1_14f10 = trunc i32 %v0_14f10 to i8
  %v2_14f10 = load i32, i32* @r4, align 4
  %v3_14f10 = add i32 %v2_14f10, 9
  %v4_14f10 = inttoptr i32 %v3_14f10 to i8*
  store i8 %v1_14f10, i8* %v4_14f10, align 1
  %v0_14f14 = load i32, i32* @r4, align 4
  %v1_14f14 = add i32 %v0_14f14, 8
  %v2_14f14 = inttoptr i32 %v1_14f14 to i8*
  %v3_14f14 = load i8, i8* %v2_14f14, align 1
  %v4_14f14 = zext i8 %v3_14f14 to i32
  store i32 %v4_14f14, i32* %r2.global-to-local, align 4
  %v0_14f18 = load i32, i32* @r5, align 4
  %v1_14f18 = add i32 %v0_14f18, 1
  %v2_14f18 = inttoptr i32 %v1_14f18 to i8*
  %v3_14f18 = load i8, i8* %v2_14f18, align 1
  %v4_14f18 = zext i8 %v3_14f18 to i32
  store i32 %v4_14f18, i32* %r3.global-to-local, align 4
  %v4_14f1c = mul nuw nsw i32 %v4_14f18, 256
  %v5_14f1c = or i32 %v4_14f1c, %v4_14f14
  %v1_14f20 = add nsw i32 %v5_14f1c, -19
  store i32 %v1_14f20, i32* @r2, align 4
  %v3_14f24 = call i32 @function_13bf0(i32 %v1_14f5c, i32 %v1_14f58, i32 %v1_14f20)
  %v0_14f28 = load i32, i32* @r4, align 4
  %v1_14f28 = add i32 %v0_14f28, 8
  %v2_14f28 = inttoptr i32 %v1_14f28 to i8*
  %v3_14f28 = load i8, i8* %v2_14f28, align 1
  %v4_14f28 = zext i8 %v3_14f28 to i32
  store i32 %v4_14f28, i32* %r3.global-to-local, align 4
  %v0_14f2c = load i32, i32* @r5, align 4
  %v1_14f2c = add i32 %v0_14f2c, 1
  %v2_14f2c = inttoptr i32 %v1_14f2c to i8*
  %v3_14f2c = load i8, i8* %v2_14f2c, align 1
  %v4_14f2c = zext i8 %v3_14f2c to i32
  store i32 %v0_14f28, i32* @r0, align 4
  %v4_14f34 = mul nuw nsw i32 %v4_14f2c, 256
  %v5_14f34 = or i32 %v4_14f34, %v4_14f28
  store i32 %v5_14f34, i32* @r2, align 4
  store i32 %v0_14f28, i32* @r1, align 4
  %v3_14f3c = call i32 @function_13bf0(i32 %v0_14f28, i32 %v0_14f28, i32 %v5_14f34)
  %v0_14f40 = load i32, i32* @r4, align 4
  %v1_14f40 = add i32 %v0_14f40, 8
  %v2_14f40 = inttoptr i32 %v1_14f40 to i8*
  %v3_14f40 = load i8, i8* %v2_14f40, align 1
  %v4_14f40 = zext i8 %v3_14f40 to i32
  store i32 %v4_14f40, i32* %r3.global-to-local, align 4
  %v0_14f44 = load i32, i32* @r5, align 4
  %v1_14f44 = add i32 %v0_14f44, 1
  %v2_14f44 = inttoptr i32 %v1_14f44 to i8*
  %v3_14f44 = load i8, i8* %v2_14f44, align 1
  %v4_14f44 = zext i8 %v3_14f44 to i32
  store i32 %v4_14f44, i32* @r2, align 4
  %v4_14f48 = mul nuw nsw i32 %v4_14f44, 256
  %v5_14f48 = or i32 %v4_14f48, %v4_14f40
  store i32 %v5_14f48, i32* %r3.global-to-local, align 4
  %v2_14f4c = add i32 %v5_14f48, %v0_14f40
  store i32 %v2_14f4c, i32* @r4, align 4
  %v1_14f50.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14f50

dec_label_pc_14f50:                               ; preds = %dec_label_pc_14f50.preheader, %dec_label_pc_14ef4
  %v1_14f50 = phi i32 [ %v7_14ee8, %dec_label_pc_14f50.preheader ], [ %v1_14f50.pre, %dec_label_pc_14ef4 ]
  %v2_14f04 = phi i32 [ %v5_14ee8, %dec_label_pc_14f50.preheader ], [ %v2_14f4c, %dec_label_pc_14ef4 ]
  %v3_14f50 = icmp ult i32 %v2_14f04, %v1_14f50
  %v1_14f54 = add i32 %v2_14f04, 8
  store i32 %v1_14f54, i32* @r5, align 4
  %v1_14f58 = add i32 %v2_14f04, 19
  store i32 %v1_14f58, i32* @r1, align 4
  %v1_14f5c = add i32 %v2_14f04, 11
  store i32 %v1_14f5c, i32* @r0, align 4
  br i1 %v3_14f50, label %dec_label_pc_14ef4, label %dec_label_pc_14f64.loopexit

dec_label_pc_14f64.loopexit:                      ; preds = %dec_label_pc_14f50
  %v0_14f64.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14f64

dec_label_pc_14f64:                               ; preds = %dec_label_pc_14ed8, %dec_label_pc_14f64.loopexit
  %v0_14f64 = phi i32 [ %v0_14f64.pre, %dec_label_pc_14f64.loopexit ], [ %v0_14ee0, %dec_label_pc_14ed8 ]
  store i32 %v6_14ed8, i32* @r5, align 4
  ret i32 %v0_14f64

; uselistorder directives
  uselistorder i32 %v1_14f5c, { 1, 0 }
  uselistorder i32 %v1_14f58, { 1, 0 }
  uselistorder i32 %v1_14f54, { 2, 1, 0 }
  uselistorder i32 %v2_14f04, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_14f28, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_14ef4, { 1, 0, 2 }
  uselistorder i32 %v5_14ee8, { 1, 0 }
  uselistorder i32 %v0_14ee0, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_13bf0, { 6, 5, 7, 8, 4, 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_14f64, { 1, 0 }
  uselistorder label %dec_label_pc_14f50, { 1, 0 }
}

define i32 @function_14f6c() local_unnamed_addr {
dec_label_pc_14f6c:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_14f70 = load i32, i32* @r4, align 4
  %v9_14f70 = load i32, i32* @r6, align 4
  %v0_14f74 = load i32, i32* @r2, align 4
  %v1_14f74 = add i32 %v0_14f74, 6
  %v2_14f7c = ptrtoint i32* %stack_var_-60 to i32
  %v1_14f80 = and i32 %v1_14f74, -4
  store i32 %v1_14f80, i32* %r3.global-to-local, align 4
  %v2_14f84 = sub i32 %v2_14f7c, %v1_14f80
  %v0_14f88 = load i32, i32* @r1, align 4
  store i32 %v0_14f88, i32* %r8.global-to-local, align 4
  store i32 %v0_14f74, i32* %stack_var_-60, align 4
  store i32 %v2_14f84, i32* %sl.global-to-local, align 4
  %v0_14f94 = load i32, i32* @r0, align 4
  %v1_14f98 = inttoptr i32 %v2_14f84 to %linux_dirent64*
  store i32 %v2_14f84, i32* %r1.global-to-local, align 4
  %v5_14f9c = call i32 @getdents64(i32 %v0_14f94, %linux_dirent64* %v1_14f98, i32 %v0_14f74)
  store i32 %v5_14f9c, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_14f9c, -4095
  br i1 %tmp, label %dec_label_pc_14fc0, label %dec_label_pc_14fac

dec_label_pc_14fac:                               ; preds = %dec_label_pc_14f6c
  %v0_14fac = call i32 @function_13b98()
  %v0_14fb0 = load i32, i32* @r6, align 4
  %v1_14fb0 = sub i32 0, %v0_14fb0
  store i32 %v1_14fb0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_14fb8 = inttoptr i32 %v0_14fac to i32*
  store i32 %v1_14fb0, i32* %v2_14fb8, align 4
  %v0_14fc8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14fc8

dec_label_pc_14fc0:                               ; preds = %dec_label_pc_14f6c
  br i1 false, label %dec_label_pc_14fc8, label %dec_label_pc_14fd0

dec_label_pc_14fc8:                               ; preds = %dec_label_pc_14fc0, %dec_label_pc_14fac
  %v0_14fc8 = phi i32 [ -1, %dec_label_pc_14fc0 ], [ %v0_14fc8.pre, %dec_label_pc_14fac ]
  store i32 %v0_14fc8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_150c4

dec_label_pc_14fd0:                               ; preds = %dec_label_pc_14fc0
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_14fd8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14fd8, i32* @r5, align 4
  %v0_14fdc = load i32, i32* @sp, align 4
  store i32 %v0_14fdc, i32* @r4, align 4
  br label %dec_label_pc_150a0

dec_label_pc_14fec:                               ; preds = %dec_label_pc_150a0
  %v2_150b8 = add i32 %v3_150a4, %v0_150b8
  %v1_14fec = add i32 %v0_14ff0, 17
  %v2_14fec = inttoptr i32 %v1_14fec to i8*
  %v3_14fec = load i8, i8* %v2_14fec, align 1
  %v4_14fec = zext i8 %v3_14fec to i32
  %v2_14ff0 = inttoptr i32 %v1_150ac to i8*
  %v3_14ff0 = load i8, i8* %v2_14ff0, align 1
  %v4_14ff0 = zext i8 %v3_14ff0 to i32
  %v4_14ff4 = mul nuw nsw i32 %v4_14fec, 256
  %v5_14ff4 = or i32 %v4_14ff0, %v4_14ff4
  %v1_14ff8 = add nuw nsw i32 %v5_14ff4, 3
  %v1_14ffc = and i32 %v1_14ff8, 131068
  store i32 %v1_14ffc, i32* %r3.global-to-local, align 4
  %v2_15000 = add i32 %v1_14ffc, %v2_15040
  store i32 %v2_15000, i32* %sb.global-to-local, align 4
  %v9_15004 = icmp eq i32 %v2_15000, %v2_150b8
  %v1_15008 = and i32 %v1_14ff8, 128
  %v2_1500c = icmp eq i32 %v1_15008, 0
  %v3_1500c = or i1 %v9_15004, %v2_1500c
  br i1 %v3_1500c, label %dec_label_pc_15040, label %dec_label_pc_15010

dec_label_pc_15010:                               ; preds = %dec_label_pc_14fec
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_15020 = call i32 @function_15180(i32 %v0_14f94, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_15024 = load i32, i32* @r5, align 4
  %v1_15024 = load i32, i32* %r8.global-to-local, align 4
  %v9_15024 = icmp eq i32 %v0_15024, %v1_15024
  br i1 %v9_15024, label %dec_label_pc_1502c, label %dec_label_pc_150c0

dec_label_pc_1502c:                               ; preds = %dec_label_pc_15010
  %v0_1502c = call i32 @function_13b98()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_15038 = inttoptr i32 %v0_1502c to i32*
  store i32 22, i32* %v2_15038, align 4
  %v0_150c4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_150c4

dec_label_pc_15040:                               ; preds = %dec_label_pc_14fec
  %v3_1500811 = udiv i32 %v1_14ff8, 256
  %v1_15040 = trunc i32 %v3_1500811 to i8
  %v3_15040 = add i32 %v2_15040, 17
  %v4_15040 = inttoptr i32 %v3_15040 to i8*
  store i8 %v1_15040, i8* %v4_15040, align 1
  %v0_15044 = load i32, i32* %r3.global-to-local, align 4
  %v1_15044 = trunc i32 %v0_15044 to i8
  %v2_15044 = load i32, i32* @r5, align 4
  %v3_15044 = add i32 %v2_15044, 16
  %v4_15044 = inttoptr i32 %v3_15044 to i8*
  store i8 %v1_15044, i8* %v4_15044, align 1
  %v0_15048 = load i32, i32* @r4, align 4
  %v1_15048 = add i32 %v0_15048, 8
  %v1_1504c = inttoptr i32 %v1_15048 to i32*
  %v2_1504c = load i32, i32* %v1_1504c, align 4
  %v3_1504c = add i32 %v0_15048, 12
  %v4_1504c = inttoptr i32 %v3_1504c to i32*
  %v5_1504c = load i32, i32* %v4_1504c, align 4
  store i32 %v5_1504c, i32* %r3.global-to-local, align 4
  %v1_15058 = inttoptr i32 %v0_15048 to i32*
  %v2_15058 = load i32, i32* %v1_15058, align 4
  %v3_15058 = add i32 %v0_15048, 4
  %v4_15058 = inttoptr i32 %v3_15058 to i32*
  %v5_15058 = load i32, i32* %v4_15058, align 4
  store i32 %v5_15058, i32* %r3.global-to-local, align 4
  %v0_1505c = load i32, i32* @r5, align 4
  %v1_1505c = inttoptr i32 %v0_1505c to i32*
  store i32 %v2_15058, i32* %v1_1505c, align 4
  %v3_1505c = add i32 %v0_1505c, 4
  %v4_1505c = inttoptr i32 %v3_1505c to i32*
  %v5_1505c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_1505c, i32* %v4_1505c, align 4
  %v0_15060 = load i32, i32* @r4, align 4
  %v1_15060 = add i32 %v0_15060, 8
  %v1_15064 = inttoptr i32 %v1_15060 to i32*
  %v2_15064 = load i32, i32* %v1_15064, align 4
  %v3_15064 = add i32 %v0_15060, 12
  %v4_15064 = inttoptr i32 %v3_15064 to i32*
  %v5_15064 = load i32, i32* %v4_15064, align 4
  store i32 %v5_15064, i32* %r3.global-to-local, align 4
  %v1_15068 = load i32, i32* @r5, align 4
  %v2_15068 = add i32 %v1_15068, 8
  %v3_15068 = inttoptr i32 %v2_15068 to i32*
  store i32 %v2_15064, i32* %v3_15068, align 4
  %v0_1506c = load i32, i32* %r3.global-to-local, align 4
  %v1_1506c = load i32, i32* @r5, align 4
  %v2_1506c = add i32 %v1_1506c, 12
  %v3_1506c = inttoptr i32 %v2_1506c to i32*
  store i32 %v0_1506c, i32* %v3_1506c, align 4
  %v0_15070 = load i32, i32* @r4, align 4
  %v1_15070 = add i32 %v0_15070, 18
  %v2_15070 = inttoptr i32 %v1_15070 to i8*
  %v3_15070 = load i8, i8* %v2_15070, align 1
  %v4_15070 = zext i8 %v3_15070 to i32
  store i32 %v4_15070, i32* %r3.global-to-local, align 4
  %v2_15074 = load i32, i32* @r5, align 4
  %v3_15074 = add i32 %v2_15074, 18
  %v4_15074 = inttoptr i32 %v3_15074 to i8*
  store i8 %v3_15070, i8* %v4_15074, align 1
  %v0_15078 = load i32, i32* @r4, align 4
  %v1_15078 = add i32 %v0_15078, 16
  %v2_15078 = inttoptr i32 %v1_15078 to i8*
  %v3_15078 = load i8, i8* %v2_15078, align 1
  %v4_15078 = zext i8 %v3_15078 to i32
  %v0_1507c = load i32, i32* %r7.global-to-local, align 4
  %v1_1507c = add i32 %v0_1507c, 1
  %v2_1507c = inttoptr i32 %v1_1507c to i8*
  %v3_1507c = load i8, i8* %v2_1507c, align 1
  %v4_1507c = zext i8 %v3_1507c to i32
  store i32 %v4_1507c, i32* %r3.global-to-local, align 4
  %v4_15080 = mul nuw nsw i32 %v4_1507c, 256
  %v5_15080 = or i32 %v4_15080, %v4_15078
  %v1_15084 = add nsw i32 %v5_15080, -19
  store i32 %v1_15084, i32* @r2, align 4
  %v3_15088 = call i32 @function_13be0(i32 %v1_150b0, i32 %v1_150b4, i32 %v1_15084)
  %v0_1508c = load i32, i32* @r4, align 4
  %v1_1508c = add i32 %v0_1508c, 16
  %v2_1508c = inttoptr i32 %v1_1508c to i8*
  %v3_1508c = load i8, i8* %v2_1508c, align 1
  %v4_1508c = zext i8 %v3_1508c to i32
  store i32 %v4_1508c, i32* %r3.global-to-local, align 4
  %v0_15090 = load i32, i32* %r7.global-to-local, align 4
  %v1_15090 = add i32 %v0_15090, 1
  %v2_15090 = inttoptr i32 %v1_15090 to i8*
  %v3_15090 = load i8, i8* %v2_15090, align 1
  %v4_15090 = zext i8 %v3_15090 to i32
  %v4_15094 = mul nuw nsw i32 %v4_15090, 256
  %v5_15094 = or i32 %v4_15094, %v4_1508c
  store i32 %v5_15094, i32* %r3.global-to-local, align 4
  %v2_15098 = add i32 %v5_15094, %v0_1508c
  store i32 %v2_15098, i32* @r4, align 4
  %v0_1509c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_1509c, i32* @r5, align 4
  %v1_150a0.pre = load i32, i32* @r6, align 4
  %v0_150b8.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_150a0

dec_label_pc_150a0:                               ; preds = %dec_label_pc_14fd0, %dec_label_pc_15040
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_14fd0 ], [ %v2_1504c, %dec_label_pc_15040 ]
  %v0_150b8 = phi i32 [ %v0_14fd8, %dec_label_pc_14fd0 ], [ %v0_150b8.pre, %dec_label_pc_15040 ]
  %v2_15040 = phi i32 [ %v0_14fd8, %dec_label_pc_14fd0 ], [ %v0_1509c, %dec_label_pc_15040 ]
  %v0_14ff0 = phi i32 [ %v0_14fdc, %dec_label_pc_14fd0 ], [ %v2_15098, %dec_label_pc_15040 ]
  %v1_150a0 = phi i32 [ %v5_14f9c, %dec_label_pc_14fd0 ], [ %v1_150a0.pre, %dec_label_pc_15040 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_14fd0 ], [ %v5_1504c, %dec_label_pc_15040 ]
  %v0_150a0 = load i32, i32* %sl.global-to-local, align 4
  %v2_150a0 = add i32 %v0_150a0, %v1_150a0
  store i32 %v2_150a0, i32* %r3.global-to-local, align 4
  %v3_150a4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_150a4, i32* @r2, align 4
  %v3_150a8 = icmp ult i32 %v0_14ff0, %v2_150a0
  %v1_150ac = add i32 %v0_14ff0, 16
  store i32 %v1_150ac, i32* %r7.global-to-local, align 4
  %v1_150b0 = add i32 %v2_15040, 19
  store i32 %v1_150b0, i32* @r0, align 4
  %v1_150b4 = add i32 %v0_14ff0, 19
  store i32 %v1_150b4, i32* @r1, align 4
  br i1 %v3_150a8, label %dec_label_pc_14fec, label %dec_label_pc_150c0

dec_label_pc_150c0:                               ; preds = %dec_label_pc_150a0, %dec_label_pc_15010
  %v1_150c0 = phi i32 [ %v0_15024, %dec_label_pc_15010 ], [ %v2_15040, %dec_label_pc_150a0 ]
  %v0_150c0 = phi i32 [ %v1_15024, %dec_label_pc_15010 ], [ %v0_150b8, %dec_label_pc_150a0 ]
  %v2_150c0 = sub i32 %v1_150c0, %v0_150c0
  store i32 %v2_150c0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_150c4

dec_label_pc_150c4:                               ; preds = %dec_label_pc_1502c, %dec_label_pc_14fc8, %dec_label_pc_150c0
  %v0_150c4 = phi i32 [ %v0_150c4.pre, %dec_label_pc_1502c ], [ %v0_14fc8, %dec_label_pc_14fc8 ], [ %v2_150c0, %dec_label_pc_150c0 ]
  store i32 %v3_14f70, i32* @r4, align 4
  store i32 %v9_14f70, i32* %r6.global-to-local, align 4
  ret i32 %v0_150c4

; uselistorder directives
  uselistorder i32 %v1_150b4, { 1, 0 }
  uselistorder i32 %v1_150b0, { 1, 0 }
  uselistorder i32 %v1_150ac, { 1, 0 }
  uselistorder i32 %v3_150a4, { 1, 0 }
  uselistorder i32 %v0_14ff0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_15040, { 0, 3, 1, 2 }
  uselistorder i32 %v0_15048, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14fd8, { 1, 0, 2 }
  uselistorder i32 %v5_14f9c, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_13be0, { 4, 1, 0, 3, 6, 5, 2 }
  uselistorder i32 128, { 11, 12, 34, 13, 35, 25, 16, 17, 18, 26, 2, 27, 19, 20, 21, 22, 23, 28, 3, 29, 4, 14, 15, 30, 31, 6, 0, 1, 7, 8, 9, 32, 5, 33, 24, 10 }
  uselistorder i32* @sp, { 6, 4, 1, 5, 0, 7, 2, 8, 3 }
  uselistorder i32* @r6, { 1, 122, 123, 124, 411, 413, 412, 342, 343, 309, 310, 311, 312, 313, 314, 315, 316, 330, 344, 345, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 10, 11, 84, 85, 12, 13, 21, 14, 15, 16, 17, 18, 19, 20, 86, 87, 22, 88, 89, 90, 91, 92, 93, 99, 100, 94, 95, 96, 97, 98, 283, 284, 285, 286, 0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 143, 144, 145, 146, 8, 147, 148, 149, 2, 150, 151, 154, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 178, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 192, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 224, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 3, 256, 257, 258, 259, 260, 261, 262, 263, 264, 272, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 287, 288, 289, 290, 298, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 335, 332, 333, 334, 336, 337, 9, 338, 339, 340, 341, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 4, 356, 357, 358, 359, 360, 361, 363, 5, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 6, 7, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410 }
  uselistorder label %dec_label_pc_150c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_150a0, { 1, 0 }
}

define i32 @function_150d0() local_unnamed_addr {
dec_label_pc_150d0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_150d0 = load i32, i32* @r4, align 4
  store i32 %v3_150d0, i32* %stack_var_-8, align 4
  %v0_150d8 = load i32, i32* @r0, align 4
  store i32 %v0_150d8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_150d8, -4095
  br i1 %tmp, label %dec_label_pc_150f4, label %dec_label_pc_150e4

dec_label_pc_150e4:                               ; preds = %dec_label_pc_150d0
  %v0_150e4 = call i32 @function_13b98()
  %v0_150e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_150e8 = sub i32 0, %v0_150e8
  %v2_150ec = inttoptr i32 %v0_150e4 to i32*
  store i32 %v1_150e8, i32* %v2_150ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_150f8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_150f4

dec_label_pc_150f4:                               ; preds = %dec_label_pc_150d0, %dec_label_pc_150e4
  %v2_150f8 = phi i32 [ %v3_150d0, %dec_label_pc_150d0 ], [ %v2_150f8.pre, %dec_label_pc_150e4 ]
  %v0_150f4 = phi i32 [ %v0_150d8, %dec_label_pc_150d0 ], [ -1, %dec_label_pc_150e4 ]
  store i32 %v2_150f8, i32* @r4, align 4
  ret i32 %v0_150f4

; uselistorder directives
  uselistorder i32 %v0_150d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_150f4, { 1, 0 }
}

define i32 @function_150fc() local_unnamed_addr {
dec_label_pc_150fc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_150fc = load i32, i32* @r4, align 4
  store i32 %v3_150fc, i32* %stack_var_-8, align 4
  %v0_15104 = load i32, i32* @r0, align 4
  store i32 %v0_15104, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15104, -4095
  br i1 %tmp, label %dec_label_pc_15120, label %dec_label_pc_15110

dec_label_pc_15110:                               ; preds = %dec_label_pc_150fc
  %v0_15110 = call i32 @function_13b98()
  %v0_15114 = load i32, i32* %r4.global-to-local, align 4
  %v1_15114 = sub i32 0, %v0_15114
  %v2_15118 = inttoptr i32 %v0_15110 to i32*
  store i32 %v1_15114, i32* %v2_15118, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15124.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15120

dec_label_pc_15120:                               ; preds = %dec_label_pc_150fc, %dec_label_pc_15110
  %v2_15124 = phi i32 [ %v3_150fc, %dec_label_pc_150fc ], [ %v2_15124.pre, %dec_label_pc_15110 ]
  %v0_15120 = phi i32 [ %v0_15104, %dec_label_pc_150fc ], [ -1, %dec_label_pc_15110 ]
  store i32 %v2_15124, i32* @r4, align 4
  ret i32 %v0_15120

; uselistorder directives
  uselistorder i32 %v0_15104, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15120, { 1, 0 }
}

define i32 @function_15128(i32 %arg1) local_unnamed_addr {
dec_label_pc_15128:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15128 = load i32, i32* @r4, align 4
  store i32 %v3_15128, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1514c, label %dec_label_pc_1513c

dec_label_pc_1513c:                               ; preds = %dec_label_pc_15128
  %v0_1513c = call i32 @function_13b98()
  %v0_15140 = load i32, i32* %r4.global-to-local, align 4
  %v1_15140 = sub i32 0, %v0_15140
  %v2_15144 = inttoptr i32 %v0_1513c to i32*
  store i32 %v1_15140, i32* %v2_15144, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15150.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1514c

dec_label_pc_1514c:                               ; preds = %dec_label_pc_15128, %dec_label_pc_1513c
  %v2_15150 = phi i32 [ %v3_15128, %dec_label_pc_15128 ], [ %v2_15150.pre, %dec_label_pc_1513c ]
  %v0_1514c = phi i32 [ %arg1, %dec_label_pc_15128 ], [ -1, %dec_label_pc_1513c ]
  store i32 %v2_15150, i32* %r4.global-to-local, align 4
  ret i32 %v0_1514c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1514c, { 1, 0 }
}

define i32 @function_15154() local_unnamed_addr {
dec_label_pc_15154:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15154 = load i32, i32* @r4, align 4
  store i32 %v3_15154, i32* %stack_var_-8, align 4
  %v0_1515c = load i32, i32* @r0, align 4
  store i32 %v0_1515c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1515c, -4095
  br i1 %tmp, label %dec_label_pc_15178, label %dec_label_pc_15168

dec_label_pc_15168:                               ; preds = %dec_label_pc_15154
  %v0_15168 = call i32 @function_13b98()
  %v0_1516c = load i32, i32* %r4.global-to-local, align 4
  %v1_1516c = sub i32 0, %v0_1516c
  %v2_15170 = inttoptr i32 %v0_15168 to i32*
  store i32 %v1_1516c, i32* %v2_15170, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1517c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15178

dec_label_pc_15178:                               ; preds = %dec_label_pc_15154, %dec_label_pc_15168
  %v2_1517c = phi i32 [ %v3_15154, %dec_label_pc_15154 ], [ %v2_1517c.pre, %dec_label_pc_15168 ]
  %v0_15178 = phi i32 [ %v0_1515c, %dec_label_pc_15154 ], [ -1, %dec_label_pc_15168 ]
  store i32 %v2_1517c, i32* %r4.global-to-local, align 4
  ret i32 %v0_15178

; uselistorder directives
  uselistorder i32 %v0_1515c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15178, { 1, 0 }
}

define i32 @function_15180(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15180:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_151c4, label %dec_label_pc_151b0

dec_label_pc_151b0:                               ; preds = %dec_label_pc_15180
  %v0_151b0 = call i32 @function_13b98()
  %v0_151b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_151b4 = sub i32 0, %v0_151b4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_151bc = inttoptr i32 %v0_151b0 to i32*
  store i32 %v1_151b4, i32* %v2_151bc, align 4
  %v0_151cc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_151cc

dec_label_pc_151c4:                               ; preds = %dec_label_pc_15180
  %v2_151c4 = icmp eq i32 %arg1, 0
  br i1 %v2_151c4, label %dec_label_pc_151d8, label %dec_label_pc_151cc

dec_label_pc_151cc:                               ; preds = %dec_label_pc_151c4, %dec_label_pc_151b0
  %v0_151cc = phi i32 [ %arg1, %dec_label_pc_151c4 ], [ %v0_151cc.pre, %dec_label_pc_151b0 ]
  br label %dec_label_pc_151dc

dec_label_pc_151d8:                               ; preds = %dec_label_pc_151c4
  br label %dec_label_pc_151dc

dec_label_pc_151dc:                               ; preds = %dec_label_pc_151cc, %dec_label_pc_151d8
  %v14_151e0 = phi i32 [ %v0_151cc, %dec_label_pc_151cc ], [ %tmp9, %dec_label_pc_151d8 ]
  ret i32 %v14_151e0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_151dc, { 1, 0 }
}

define i32 @function_151e4(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_151e4:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_151e4 = load i32, i32* @r4, align 4
  store i32 %v3_151e4, i32* %stack_var_-8, align 4
  %v6_151e8 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_151e8, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_151e8, -4095
  br i1 %tmp6, label %dec_label_pc_15208, label %dec_label_pc_151f8

dec_label_pc_151f8:                               ; preds = %dec_label_pc_151e4
  %v0_151f8 = call i32 @function_13b98()
  %v0_151fc = load i32, i32* %r4.global-to-local, align 4
  %v1_151fc = sub i32 0, %v0_151fc
  %v2_15200 = inttoptr i32 %v0_151f8 to i32*
  store i32 %v1_151fc, i32* %v2_15200, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15208

dec_label_pc_15208:                               ; preds = %dec_label_pc_151e4, %dec_label_pc_151f8
  %v0_15208 = phi i32 [ %v6_151e8, %dec_label_pc_151e4 ], [ -1, %dec_label_pc_151f8 ]
  %v2_1520c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1520c, i32* %r4.global-to-local, align 4
  ret i32 %v0_15208

; uselistorder directives
  uselistorder i32 %v6_151e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15208, { 1, 0 }
}

define i32 @function_15210(i32 %arg1) local_unnamed_addr {
dec_label_pc_15210:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15210 = load i32, i32* @r4, align 4
  store i32 %v3_15210, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1f234.943 to i32), i32* %r4.global-to-local, align 4
  %v2_15218 = load i32, i32* @global_var_1f234.943, align 4
  %v2_1521c = icmp eq i32 %v2_15218, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_1521c, label %dec_label_pc_1522c, label %dec_label_pc_15238

dec_label_pc_1522c:                               ; preds = %dec_label_pc_15210
  %v2_1522c = call i32 @function_15c28(i32* null)
  %v1_15230 = icmp slt i32 %v2_1522c, 0
  br i1 %v1_15230, label %dec_label_pc_15258, label %dec_label_pc_15238thread-pre-split

dec_label_pc_15238thread-pre-split:               ; preds = %dec_label_pc_1522c
  %v0_1523c.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_15238.pre = load i32, i32* @global_var_1f234.943, align 4
  br label %dec_label_pc_15238

dec_label_pc_15238:                               ; preds = %dec_label_pc_15238thread-pre-split, %dec_label_pc_15210
  %v2_15238 = phi i32 [ %v2_15238.pre, %dec_label_pc_15238thread-pre-split ], [ %v2_15218, %dec_label_pc_15210 ]
  %v1_15244 = phi i32 [ %v0_1523c.pr, %dec_label_pc_15238thread-pre-split ], [ %arg1, %dec_label_pc_15210 ]
  %v2_1523c = icmp eq i32 %v1_15244, 0
  store i32 %v2_15238, i32* %r4.global-to-local, align 4
  br i1 %v2_1523c, label %dec_label_pc_1525c, label %dec_label_pc_1524c

dec_label_pc_1524c:                               ; preds = %dec_label_pc_15238
  %v2_15244 = add i32 %v1_15244, %v2_15238
  %v1_1524c = inttoptr i32 %v2_15244 to i32*
  %v2_1524c = call i32 @function_15c28(i32* %v1_1524c)
  %v1_15250 = icmp slt i32 %v2_1524c, 0
  br i1 %v1_15250, label %dec_label_pc_15258, label %dec_label_pc_1524c.dec_label_pc_1525c_crit_edge

dec_label_pc_1524c.dec_label_pc_1525c_crit_edge:  ; preds = %dec_label_pc_1524c
  %v0_1525c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1525c

dec_label_pc_15258:                               ; preds = %dec_label_pc_1524c, %dec_label_pc_1522c
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1525c

dec_label_pc_1525c:                               ; preds = %dec_label_pc_1524c.dec_label_pc_1525c_crit_edge, %dec_label_pc_15238, %dec_label_pc_15258
  %v0_1525c = phi i32 [ %v0_1525c.pre, %dec_label_pc_1524c.dec_label_pc_1525c_crit_edge ], [ %v2_15238, %dec_label_pc_15238 ], [ -1, %dec_label_pc_15258 ]
  %v2_15260 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15260, i32* @r4, align 4
  ret i32 %v0_1525c

; uselistorder directives
  uselistorder i32 %v2_15238, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 7, 48, 49, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 2, 29, 30, 31, 35, 34, 33, 32, 47, 6, 36, 37, 38, 45, 39, 40, 41, 42, 43, 44, 5, 46 }
  uselistorder label %dec_label_pc_1525c, { 2, 0, 1 }
}

define i32 @function_15268(%tms* %arg1) local_unnamed_addr {
dec_label_pc_15268:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15268 = load i32, i32* @r4, align 4
  store i32 %v3_15268, i32* %stack_var_-8, align 4
  %v3_1526c = call i32 @times(%tms* %arg1)
  store i32 %v3_1526c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_1526c, -4095
  br i1 %tmp, label %dec_label_pc_1528c, label %dec_label_pc_1527c

dec_label_pc_1527c:                               ; preds = %dec_label_pc_15268
  %v0_1527c = call i32 @function_13b98()
  %v0_15280 = load i32, i32* %r4.global-to-local, align 4
  %v1_15280 = sub i32 0, %v0_15280
  %v2_15284 = inttoptr i32 %v0_1527c to i32*
  store i32 %v1_15280, i32* %v2_15284, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1528c

dec_label_pc_1528c:                               ; preds = %dec_label_pc_15268, %dec_label_pc_1527c
  %v0_1528c = phi i32 [ %v3_1526c, %dec_label_pc_15268 ], [ -1, %dec_label_pc_1527c ]
  %v2_15290 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15290, i32* %r4.global-to-local, align 4
  ret i32 %v0_1528c

; uselistorder directives
  uselistorder i32 %v3_1526c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1528c, { 1, 0 }
}

define i32 @function_15294(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15294:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_152b0 = inttoptr i32 %arg2 to i8*
  %v3_152b0 = call i32 @function_13c00(i8* %v2_152b0, i32 0)
  %v1_152b4 = add i32 %tmp, 1
  %v2_152b4 = inttoptr i32 %v1_152b4 to i8*
  %v3_152b4 = load i8, i8* %v2_152b4, align 1
  %v4_152b4 = zext i8 %v3_152b4 to i32
  %v1_152b8 = add i32 %tmp, 5
  %v2_152b8 = inttoptr i32 %v1_152b8 to i8*
  %v3_152b8 = load i8, i8* %v2_152b8, align 1
  %v4_152b8 = zext i8 %v3_152b8 to i32
  %v2_152bc = load i8, i8* %arg1, align 1
  %v3_152bc = zext i8 %v2_152bc to i32
  %v1_152c0 = add i32 %tmp, 4
  %v2_152c0 = inttoptr i32 %v1_152c0 to i8*
  %v3_152c0 = load i8, i8* %v2_152c0, align 1
  %v4_152c0 = zext i8 %v3_152c0 to i32
  %v1_152c4 = add i32 %tmp, 2
  %v2_152c4 = inttoptr i32 %v1_152c4 to i8*
  %v3_152c4 = load i8, i8* %v2_152c4, align 1
  %v4_152c4 = zext i8 %v3_152c4 to i32
  %v1_152c8 = add i32 %tmp, 6
  %v2_152c8 = inttoptr i32 %v1_152c8 to i8*
  %v3_152c8 = load i8, i8* %v2_152c8, align 1
  %v4_152c8 = zext i8 %v3_152c8 to i32
  %v1_152cc = add i32 %tmp, 3
  %v2_152cc = inttoptr i32 %v1_152cc to i8*
  %v3_152cc = load i8, i8* %v2_152cc, align 1
  %v4_152cc = zext i8 %v3_152cc to i32
  %v4_152d0 = mul nuw nsw i32 %v4_152b4, 256
  %v5_152d0 = or i32 %v3_152bc, %v4_152d0
  %v4_152d4 = mul nuw nsw i32 %v4_152b8, 256
  %v5_152d4 = or i32 %v4_152c0, %v4_152d4
  %v1_152d8 = add i32 %tmp, 7
  %v2_152d8 = inttoptr i32 %v1_152d8 to i8*
  %v3_152d8 = load i8, i8* %v2_152d8, align 1
  %v4_152d8 = zext i8 %v3_152d8 to i32
  %v4_152dc = mul nuw nsw i32 %v4_152c4, 65536
  %v5_152dc = or i32 %v4_152dc, %v5_152d0
  %v4_152e0 = mul nuw nsw i32 %v4_152c8, 65536
  %v5_152e0 = or i32 %v4_152e0, %v5_152d4
  %v4_152e4 = mul nuw i32 %v4_152cc, 16777216
  %v5_152e4 = or i32 %v4_152e4, %v5_152dc
  %v4_152e8 = mul nuw i32 %v4_152d8, 16777216
  %v5_152e8 = or i32 %v4_152e8, %v5_152e0
  store i32 %v5_152e8, i32* %r3.global-to-local, align 4
  %v0_152ec = load i32, i32* %r7.global-to-local, align 4
  %v1_152ec = inttoptr i32 %v0_152ec to i32*
  store i32 %v5_152e4, i32* %v1_152ec, align 4
  %v3_152ec = add i32 %v0_152ec, 4
  %v4_152ec = inttoptr i32 %v3_152ec to i32*
  %v5_152ec = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_152ec, i32* %v4_152ec, align 4
  %v0_152f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_152f0 = add i32 %v0_152f0, 89
  %v2_152f0 = inttoptr i32 %v1_152f0 to i8*
  %v3_152f0 = load i8, i8* %v2_152f0, align 1
  %v4_152f0 = zext i8 %v3_152f0 to i32
  %v1_152f4 = add i32 %v0_152f0, 93
  %v2_152f4 = inttoptr i32 %v1_152f4 to i8*
  %v3_152f4 = load i8, i8* %v2_152f4, align 1
  %v4_152f4 = zext i8 %v3_152f4 to i32
  %v1_152f8 = add i32 %v0_152f0, 88
  %v2_152f8 = inttoptr i32 %v1_152f8 to i8*
  %v3_152f8 = load i8, i8* %v2_152f8, align 1
  %v4_152f8 = zext i8 %v3_152f8 to i32
  %v1_152fc = add i32 %v0_152f0, 92
  %v2_152fc = inttoptr i32 %v1_152fc to i8*
  %v3_152fc = load i8, i8* %v2_152fc, align 1
  %v4_152fc = zext i8 %v3_152fc to i32
  store i32 %v4_152fc, i32* %r3.global-to-local, align 4
  %v1_15300 = add i32 %v0_152f0, 94
  %v2_15300 = inttoptr i32 %v1_15300 to i8*
  %v3_15300 = load i8, i8* %v2_15300, align 1
  %v4_15300 = zext i8 %v3_15300 to i32
  %v1_15304 = add i32 %v0_152f0, 90
  %v2_15304 = inttoptr i32 %v1_15304 to i8*
  %v3_15304 = load i8, i8* %v2_15304, align 1
  %v4_15304 = zext i8 %v3_15304 to i32
  %v1_15308 = add i32 %v0_152f0, 91
  %v2_15308 = inttoptr i32 %v1_15308 to i8*
  %v3_15308 = load i8, i8* %v2_15308, align 1
  %v4_15308 = zext i8 %v3_15308 to i32
  %v4_1530c = mul nuw nsw i32 %v4_152f0, 256
  %v5_1530c = or i32 %v4_152f8, %v4_1530c
  %v4_15310 = mul nuw nsw i32 %v4_152f4, 256
  %v5_15310 = or i32 %v4_152fc, %v4_15310
  store i32 %v5_15310, i32* %r3.global-to-local, align 4
  %v1_15314 = add i32 %v0_152f0, 95
  %v2_15314 = inttoptr i32 %v1_15314 to i8*
  %v3_15314 = load i8, i8* %v2_15314, align 1
  %v4_15314 = zext i8 %v3_15314 to i32
  %v4_15318 = mul nuw nsw i32 %v4_15300, 65536
  %v5_15318 = or i32 %v4_15318, %v5_15310
  store i32 %v5_15318, i32* %r3.global-to-local, align 4
  %v4_1531c = mul nuw nsw i32 %v4_15304, 65536
  %v5_1531c = or i32 %v4_1531c, %v5_1530c
  %v4_15320 = mul nuw i32 %v4_15308, 16777216
  %v5_15320 = or i32 %v4_15320, %v5_1531c
  %v4_15324 = mul nuw i32 %v4_15314, 16777216
  %v5_15324 = or i32 %v4_15324, %v5_15318
  store i32 %v5_15324, i32* %r6.global-to-local, align 4
  %v1_15328 = load i32, i32* %r7.global-to-local, align 4
  %v2_15328 = add i32 %v1_15328, 88
  %v3_15328 = inttoptr i32 %v2_15328 to i32*
  store i32 %v5_15320, i32* %v3_15328, align 4
  %v0_1532c = load i32, i32* %r6.global-to-local, align 4
  %v1_1532c = load i32, i32* %r7.global-to-local, align 4
  %v2_1532c = add i32 %v1_1532c, 92
  %v3_1532c = inttoptr i32 %v2_1532c to i32*
  store i32 %v0_1532c, i32* %v3_1532c, align 4
  %v0_15330 = load i32, i32* %r4.global-to-local, align 4
  %v1_15330 = add i32 %v0_15330, 13
  %v2_15330 = inttoptr i32 %v1_15330 to i8*
  %v3_15330 = load i8, i8* %v2_15330, align 1
  %v4_15330 = zext i8 %v3_15330 to i32
  %v1_15334 = add i32 %v0_15330, 12
  %v2_15334 = inttoptr i32 %v1_15334 to i8*
  %v3_15334 = load i8, i8* %v2_15334, align 1
  %v4_15334 = zext i8 %v3_15334 to i32
  store i32 %v4_15334, i32* %r3.global-to-local, align 4
  %v1_15338 = add i32 %v0_15330, 14
  %v2_15338 = inttoptr i32 %v1_15338 to i8*
  %v3_15338 = load i8, i8* %v2_15338, align 1
  %v4_15338 = zext i8 %v3_15338 to i32
  %v4_1533c = mul nuw nsw i32 %v4_15330, 256
  %v5_1533c = or i32 %v4_15334, %v4_1533c
  store i32 %v5_1533c, i32* %r3.global-to-local, align 4
  %v1_15340 = add i32 %v0_15330, 15
  %v2_15340 = inttoptr i32 %v1_15340 to i8*
  %v3_15340 = load i8, i8* %v2_15340, align 1
  %v4_15340 = zext i8 %v3_15340 to i32
  %v4_15344 = mul nuw nsw i32 %v4_15338, 65536
  %v5_15344 = or i32 %v4_15344, %v5_1533c
  %v4_15348 = mul nuw i32 %v4_15340, 16777216
  %v5_15348 = or i32 %v5_15344, %v4_15348
  store i32 %v5_15348, i32* %r3.global-to-local, align 4
  %v1_1534c = load i32, i32* %r7.global-to-local, align 4
  %v2_1534c = add i32 %v1_1534c, 12
  %v3_1534c = inttoptr i32 %v2_1534c to i32*
  store i32 %v5_15348, i32* %v3_1534c, align 4
  %v0_15350 = load i32, i32* %r4.global-to-local, align 4
  %v1_15350 = add i32 %v0_15350, 17
  %v2_15350 = inttoptr i32 %v1_15350 to i8*
  %v3_15350 = load i8, i8* %v2_15350, align 1
  %v4_15350 = zext i8 %v3_15350 to i32
  %v1_15354 = add i32 %v0_15350, 16
  %v2_15354 = inttoptr i32 %v1_15354 to i8*
  %v3_15354 = load i8, i8* %v2_15354, align 1
  %v4_15354 = zext i8 %v3_15354 to i32
  store i32 %v4_15354, i32* %r3.global-to-local, align 4
  %v1_15358 = add i32 %v0_15350, 18
  %v2_15358 = inttoptr i32 %v1_15358 to i8*
  %v3_15358 = load i8, i8* %v2_15358, align 1
  %v4_15358 = zext i8 %v3_15358 to i32
  %v4_1535c = mul nuw nsw i32 %v4_15350, 256
  %v5_1535c = or i32 %v4_15354, %v4_1535c
  store i32 %v5_1535c, i32* %r3.global-to-local, align 4
  %v1_15360 = add i32 %v0_15350, 19
  %v2_15360 = inttoptr i32 %v1_15360 to i8*
  %v3_15360 = load i8, i8* %v2_15360, align 1
  %v4_15360 = zext i8 %v3_15360 to i32
  %v4_15364 = mul nuw nsw i32 %v4_15358, 65536
  %v5_15364 = or i32 %v4_15364, %v5_1535c
  %v4_15368 = mul nuw i32 %v4_15360, 16777216
  %v5_15368 = or i32 %v5_15364, %v4_15368
  store i32 %v5_15368, i32* %r3.global-to-local, align 4
  %v1_1536c = load i32, i32* %r7.global-to-local, align 4
  %v2_1536c = add i32 %v1_1536c, 16
  %v3_1536c = inttoptr i32 %v2_1536c to i32*
  store i32 %v5_15368, i32* %v3_1536c, align 4
  %v0_15370 = load i32, i32* %r4.global-to-local, align 4
  %v1_15370 = add i32 %v0_15370, 21
  %v2_15370 = inttoptr i32 %v1_15370 to i8*
  %v3_15370 = load i8, i8* %v2_15370, align 1
  %v4_15370 = zext i8 %v3_15370 to i32
  %v1_15374 = add i32 %v0_15370, 20
  %v2_15374 = inttoptr i32 %v1_15374 to i8*
  %v3_15374 = load i8, i8* %v2_15374, align 1
  %v4_15374 = zext i8 %v3_15374 to i32
  store i32 %v4_15374, i32* %r3.global-to-local, align 4
  %v1_15378 = add i32 %v0_15370, 22
  %v2_15378 = inttoptr i32 %v1_15378 to i8*
  %v3_15378 = load i8, i8* %v2_15378, align 1
  %v4_15378 = zext i8 %v3_15378 to i32
  %v4_1537c = mul nuw nsw i32 %v4_15370, 256
  %v5_1537c = or i32 %v4_15374, %v4_1537c
  store i32 %v5_1537c, i32* %r3.global-to-local, align 4
  %v1_15380 = add i32 %v0_15370, 23
  %v2_15380 = inttoptr i32 %v1_15380 to i8*
  %v3_15380 = load i8, i8* %v2_15380, align 1
  %v4_15380 = zext i8 %v3_15380 to i32
  %v4_15384 = mul nuw nsw i32 %v4_15378, 65536
  %v5_15384 = or i32 %v4_15384, %v5_1537c
  %v4_15388 = mul nuw i32 %v4_15380, 16777216
  %v5_15388 = or i32 %v5_15384, %v4_15388
  store i32 %v5_15388, i32* %r3.global-to-local, align 4
  %v1_1538c = load i32, i32* %r7.global-to-local, align 4
  %v2_1538c = add i32 %v1_1538c, 20
  %v3_1538c = inttoptr i32 %v2_1538c to i32*
  store i32 %v5_15388, i32* %v3_1538c, align 4
  %v0_15390 = load i32, i32* %r4.global-to-local, align 4
  %v1_15390 = add i32 %v0_15390, 25
  %v2_15390 = inttoptr i32 %v1_15390 to i8*
  %v3_15390 = load i8, i8* %v2_15390, align 1
  %v4_15390 = zext i8 %v3_15390 to i32
  %v1_15394 = add i32 %v0_15390, 24
  %v2_15394 = inttoptr i32 %v1_15394 to i8*
  %v3_15394 = load i8, i8* %v2_15394, align 1
  %v4_15394 = zext i8 %v3_15394 to i32
  store i32 %v4_15394, i32* %r3.global-to-local, align 4
  %v1_15398 = add i32 %v0_15390, 26
  %v2_15398 = inttoptr i32 %v1_15398 to i8*
  %v3_15398 = load i8, i8* %v2_15398, align 1
  %v4_15398 = zext i8 %v3_15398 to i32
  %v4_1539c = mul nuw nsw i32 %v4_15390, 256
  %v5_1539c = or i32 %v4_15394, %v4_1539c
  store i32 %v5_1539c, i32* %r3.global-to-local, align 4
  %v1_153a0 = add i32 %v0_15390, 27
  %v2_153a0 = inttoptr i32 %v1_153a0 to i8*
  %v3_153a0 = load i8, i8* %v2_153a0, align 1
  %v4_153a0 = zext i8 %v3_153a0 to i32
  %v4_153a4 = mul nuw nsw i32 %v4_15398, 65536
  %v5_153a4 = or i32 %v4_153a4, %v5_1539c
  %v4_153a8 = mul nuw i32 %v4_153a0, 16777216
  %v5_153a8 = or i32 %v5_153a4, %v4_153a8
  store i32 %v5_153a8, i32* %r3.global-to-local, align 4
  %v1_153ac = load i32, i32* %r7.global-to-local, align 4
  %v2_153ac = add i32 %v1_153ac, 24
  %v3_153ac = inttoptr i32 %v2_153ac to i32*
  store i32 %v5_153a8, i32* %v3_153ac, align 4
  %v0_153b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_153b0 = add i32 %v0_153b0, 29
  %v2_153b0 = inttoptr i32 %v1_153b0 to i8*
  %v3_153b0 = load i8, i8* %v2_153b0, align 1
  %v4_153b0 = zext i8 %v3_153b0 to i32
  %v1_153b4 = add i32 %v0_153b0, 28
  %v2_153b4 = inttoptr i32 %v1_153b4 to i8*
  %v3_153b4 = load i8, i8* %v2_153b4, align 1
  %v4_153b4 = zext i8 %v3_153b4 to i32
  store i32 %v4_153b4, i32* %r3.global-to-local, align 4
  %v1_153b8 = add i32 %v0_153b0, 30
  %v2_153b8 = inttoptr i32 %v1_153b8 to i8*
  %v3_153b8 = load i8, i8* %v2_153b8, align 1
  %v4_153b8 = zext i8 %v3_153b8 to i32
  %v4_153bc = mul nuw nsw i32 %v4_153b0, 256
  %v5_153bc = or i32 %v4_153b4, %v4_153bc
  store i32 %v5_153bc, i32* %r3.global-to-local, align 4
  %v1_153c0 = add i32 %v0_153b0, 31
  %v2_153c0 = inttoptr i32 %v1_153c0 to i8*
  %v3_153c0 = load i8, i8* %v2_153c0, align 1
  %v4_153c0 = zext i8 %v3_153c0 to i32
  %v4_153c4 = mul nuw nsw i32 %v4_153b8, 65536
  %v5_153c4 = or i32 %v4_153c4, %v5_153bc
  %v4_153c8 = mul nuw i32 %v4_153c0, 16777216
  %v5_153c8 = or i32 %v5_153c4, %v4_153c8
  store i32 %v5_153c8, i32* %r3.global-to-local, align 4
  %v1_153cc = load i32, i32* %r7.global-to-local, align 4
  %v2_153cc = add i32 %v1_153cc, 28
  %v3_153cc = inttoptr i32 %v2_153cc to i32*
  store i32 %v5_153c8, i32* %v3_153cc, align 4
  %v0_153d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_153d0 = add i32 %v0_153d0, 33
  %v2_153d0 = inttoptr i32 %v1_153d0 to i8*
  %v3_153d0 = load i8, i8* %v2_153d0, align 1
  %v4_153d0 = zext i8 %v3_153d0 to i32
  %v1_153d4 = add i32 %v0_153d0, 37
  %v2_153d4 = inttoptr i32 %v1_153d4 to i8*
  %v3_153d4 = load i8, i8* %v2_153d4, align 1
  %v4_153d4 = zext i8 %v3_153d4 to i32
  %v1_153d8 = add i32 %v0_153d0, 32
  %v2_153d8 = inttoptr i32 %v1_153d8 to i8*
  %v3_153d8 = load i8, i8* %v2_153d8, align 1
  %v4_153d8 = zext i8 %v3_153d8 to i32
  %v1_153dc = add i32 %v0_153d0, 36
  %v2_153dc = inttoptr i32 %v1_153dc to i8*
  %v3_153dc = load i8, i8* %v2_153dc, align 1
  %v4_153dc = zext i8 %v3_153dc to i32
  store i32 %v4_153dc, i32* %r3.global-to-local, align 4
  %v1_153e0 = add i32 %v0_153d0, 34
  %v2_153e0 = inttoptr i32 %v1_153e0 to i8*
  %v3_153e0 = load i8, i8* %v2_153e0, align 1
  %v4_153e0 = zext i8 %v3_153e0 to i32
  %v1_153e4 = add i32 %v0_153d0, 38
  %v2_153e4 = inttoptr i32 %v1_153e4 to i8*
  %v3_153e4 = load i8, i8* %v2_153e4, align 1
  %v4_153e4 = zext i8 %v3_153e4 to i32
  %v1_153e8 = add i32 %v0_153d0, 35
  %v2_153e8 = inttoptr i32 %v1_153e8 to i8*
  %v3_153e8 = load i8, i8* %v2_153e8, align 1
  %v4_153e8 = zext i8 %v3_153e8 to i32
  %v4_153ec = mul nuw nsw i32 %v4_153d0, 256
  %v5_153ec = or i32 %v4_153d8, %v4_153ec
  %v4_153f0 = mul nuw nsw i32 %v4_153d4, 256
  %v5_153f0 = or i32 %v4_153dc, %v4_153f0
  store i32 %v5_153f0, i32* %r3.global-to-local, align 4
  %v1_153f4 = add i32 %v0_153d0, 39
  %v2_153f4 = inttoptr i32 %v1_153f4 to i8*
  %v3_153f4 = load i8, i8* %v2_153f4, align 1
  %v4_153f4 = zext i8 %v3_153f4 to i32
  %v4_153f8 = mul nuw nsw i32 %v4_153e0, 65536
  %v5_153f8 = or i32 %v4_153f8, %v5_153ec
  %v4_153fc = mul nuw nsw i32 %v4_153e4, 65536
  %v5_153fc = or i32 %v4_153fc, %v5_153f0
  %v4_15400 = mul nuw i32 %v4_153e8, 16777216
  %v5_15400 = or i32 %v5_153f8, %v4_15400
  %v4_15404 = mul nuw i32 %v4_153f4, 16777216
  %v5_15404 = or i32 %v5_153fc, %v4_15404
  store i32 %v5_15404, i32* %r3.global-to-local, align 4
  %v1_15418 = load i32, i32* %r7.global-to-local, align 4
  %v2_15418 = add i32 %v1_15418, 32
  %v3_15418 = inttoptr i32 %v2_15418 to i32*
  store i32 %v5_15400, i32* %v3_15418, align 4
  %v0_1541c = load i32, i32* %r3.global-to-local, align 4
  %v1_1541c = load i32, i32* %r7.global-to-local, align 4
  %v2_1541c = add i32 %v1_1541c, 36
  %v3_1541c = inttoptr i32 %v2_1541c to i32*
  store i32 %v0_1541c, i32* %v3_1541c, align 4
  %v0_15420 = load i32, i32* %r4.global-to-local, align 4
  %v1_15420 = add i32 %v0_15420, 45
  %v2_15420 = inttoptr i32 %v1_15420 to i8*
  %v3_15420 = load i8, i8* %v2_15420, align 1
  %v4_15420 = zext i8 %v3_15420 to i32
  %v1_15424 = add i32 %v0_15420, 49
  %v2_15424 = inttoptr i32 %v1_15424 to i8*
  %v3_15424 = load i8, i8* %v2_15424, align 1
  %v4_15424 = zext i8 %v3_15424 to i32
  %v1_15428 = add i32 %v0_15420, 44
  %v2_15428 = inttoptr i32 %v1_15428 to i8*
  %v3_15428 = load i8, i8* %v2_15428, align 1
  %v4_15428 = zext i8 %v3_15428 to i32
  %v1_1542c = add i32 %v0_15420, 48
  %v2_1542c = inttoptr i32 %v1_1542c to i8*
  %v3_1542c = load i8, i8* %v2_1542c, align 1
  %v4_1542c = zext i8 %v3_1542c to i32
  store i32 %v4_1542c, i32* %r3.global-to-local, align 4
  %v1_15430 = add i32 %v0_15420, 46
  %v2_15430 = inttoptr i32 %v1_15430 to i8*
  %v3_15430 = load i8, i8* %v2_15430, align 1
  %v4_15430 = zext i8 %v3_15430 to i32
  %v1_15434 = add i32 %v0_15420, 50
  %v2_15434 = inttoptr i32 %v1_15434 to i8*
  %v3_15434 = load i8, i8* %v2_15434, align 1
  %v4_15434 = zext i8 %v3_15434 to i32
  %v1_15438 = add i32 %v0_15420, 47
  %v2_15438 = inttoptr i32 %v1_15438 to i8*
  %v3_15438 = load i8, i8* %v2_15438, align 1
  %v4_15438 = zext i8 %v3_15438 to i32
  %v4_1543c = mul nuw nsw i32 %v4_15420, 256
  %v5_1543c = or i32 %v4_15428, %v4_1543c
  %v4_15440 = mul nuw nsw i32 %v4_15424, 256
  %v5_15440 = or i32 %v4_1542c, %v4_15440
  store i32 %v5_15440, i32* %r3.global-to-local, align 4
  %v1_15444 = add i32 %v0_15420, 51
  %v2_15444 = inttoptr i32 %v1_15444 to i8*
  %v3_15444 = load i8, i8* %v2_15444, align 1
  %v4_15444 = zext i8 %v3_15444 to i32
  %v4_15448 = mul nuw nsw i32 %v4_15430, 65536
  %v5_15448 = or i32 %v4_15448, %v5_1543c
  %v4_1544c = mul nuw nsw i32 %v4_15434, 65536
  %v5_1544c = or i32 %v4_1544c, %v5_15440
  %v4_15450 = mul nuw i32 %v4_15438, 16777216
  %v5_15450 = or i32 %v5_15448, %v4_15450
  %v4_15454 = mul nuw i32 %v4_15444, 16777216
  %v5_15454 = or i32 %v5_1544c, %v4_15454
  store i32 %v5_15454, i32* %r3.global-to-local, align 4
  %v1_15468 = load i32, i32* %r7.global-to-local, align 4
  %v2_15468 = add i32 %v1_15468, 44
  %v3_15468 = inttoptr i32 %v2_15468 to i32*
  store i32 %v5_15450, i32* %v3_15468, align 4
  %v0_1546c = load i32, i32* %r3.global-to-local, align 4
  %v1_1546c = load i32, i32* %r7.global-to-local, align 4
  %v2_1546c = add i32 %v1_1546c, 48
  %v3_1546c = inttoptr i32 %v2_1546c to i32*
  store i32 %v0_1546c, i32* %v3_1546c, align 4
  %v0_15470 = load i32, i32* %r4.global-to-local, align 4
  %v1_15470 = add i32 %v0_15470, 53
  %v2_15470 = inttoptr i32 %v1_15470 to i8*
  %v3_15470 = load i8, i8* %v2_15470, align 1
  %v4_15470 = zext i8 %v3_15470 to i32
  %v1_15474 = add i32 %v0_15470, 52
  %v2_15474 = inttoptr i32 %v1_15474 to i8*
  %v3_15474 = load i8, i8* %v2_15474, align 1
  %v4_15474 = zext i8 %v3_15474 to i32
  store i32 %v4_15474, i32* %r3.global-to-local, align 4
  %v1_15478 = add i32 %v0_15470, 54
  %v2_15478 = inttoptr i32 %v1_15478 to i8*
  %v3_15478 = load i8, i8* %v2_15478, align 1
  %v4_15478 = zext i8 %v3_15478 to i32
  %v4_1547c = mul nuw nsw i32 %v4_15470, 256
  %v5_1547c = or i32 %v4_15474, %v4_1547c
  store i32 %v5_1547c, i32* %r3.global-to-local, align 4
  %v1_15480 = add i32 %v0_15470, 55
  %v2_15480 = inttoptr i32 %v1_15480 to i8*
  %v3_15480 = load i8, i8* %v2_15480, align 1
  %v4_15480 = zext i8 %v3_15480 to i32
  %v4_15484 = mul nuw nsw i32 %v4_15478, 65536
  %v5_15484 = or i32 %v4_15484, %v5_1547c
  %v4_15488 = mul nuw i32 %v4_15480, 16777216
  %v5_15488 = or i32 %v5_15484, %v4_15488
  store i32 %v5_15488, i32* %r3.global-to-local, align 4
  %v1_1548c = load i32, i32* %r7.global-to-local, align 4
  %v2_1548c = add i32 %v1_1548c, 52
  %v3_1548c = inttoptr i32 %v2_1548c to i32*
  store i32 %v5_15488, i32* %v3_1548c, align 4
  %v0_15490 = load i32, i32* %r4.global-to-local, align 4
  %v1_15490 = add i32 %v0_15490, 57
  %v2_15490 = inttoptr i32 %v1_15490 to i8*
  %v3_15490 = load i8, i8* %v2_15490, align 1
  %v4_15490 = zext i8 %v3_15490 to i32
  %v1_15494 = add i32 %v0_15490, 56
  %v2_15494 = inttoptr i32 %v1_15494 to i8*
  %v3_15494 = load i8, i8* %v2_15494, align 1
  %v4_15494 = zext i8 %v3_15494 to i32
  %v1_15498 = add i32 %v0_15490, 60
  %v2_15498 = inttoptr i32 %v1_15498 to i8*
  %v3_15498 = load i8, i8* %v2_15498, align 1
  %v4_15498 = zext i8 %v3_15498 to i32
  store i32 %v4_15498, i32* %r3.global-to-local, align 4
  %v1_1549c = add i32 %v0_15490, 61
  %v2_1549c = inttoptr i32 %v1_1549c to i8*
  %v3_1549c = load i8, i8* %v2_1549c, align 1
  %v4_1549c = zext i8 %v3_1549c to i32
  %v1_154a0 = add i32 %v0_15490, 58
  %v2_154a0 = inttoptr i32 %v1_154a0 to i8*
  %v3_154a0 = load i8, i8* %v2_154a0, align 1
  %v4_154a0 = zext i8 %v3_154a0 to i32
  %v1_154a4 = add i32 %v0_15490, 62
  %v2_154a4 = inttoptr i32 %v1_154a4 to i8*
  %v3_154a4 = load i8, i8* %v2_154a4, align 1
  %v4_154a4 = zext i8 %v3_154a4 to i32
  %v1_154a8 = add i32 %v0_15490, 59
  %v2_154a8 = inttoptr i32 %v1_154a8 to i8*
  %v3_154a8 = load i8, i8* %v2_154a8, align 1
  %v4_154a8 = zext i8 %v3_154a8 to i32
  %v4_154ac = mul nuw nsw i32 %v4_15490, 256
  %v5_154ac = or i32 %v4_15494, %v4_154ac
  %v4_154b0 = mul nuw nsw i32 %v4_1549c, 256
  %v5_154b0 = or i32 %v4_154b0, %v4_15498
  store i32 %v5_154b0, i32* %r3.global-to-local, align 4
  %v1_154b4 = add i32 %v0_15490, 63
  %v2_154b4 = inttoptr i32 %v1_154b4 to i8*
  %v3_154b4 = load i8, i8* %v2_154b4, align 1
  %v4_154b4 = zext i8 %v3_154b4 to i32
  %v4_154b8 = mul nuw nsw i32 %v4_154a0, 65536
  %v5_154b8 = or i32 %v4_154b8, %v5_154ac
  %v4_154bc = mul nuw nsw i32 %v4_154a4, 65536
  %v5_154bc = or i32 %v4_154bc, %v5_154b0
  %v4_154c0 = mul nuw i32 %v4_154b4, 16777216
  %v5_154c0 = or i32 %v5_154bc, %v4_154c0
  %v4_154c4 = mul nuw i32 %v4_154a8, 16777216
  %v5_154c4 = or i32 %v5_154b8, %v4_154c4
  store i32 %v5_154c0, i32* %r3.global-to-local, align 4
  %v1_154d4 = load i32, i32* %r7.global-to-local, align 4
  %v2_154d4 = add i32 %v1_154d4, 56
  %v3_154d4 = inttoptr i32 %v2_154d4 to i32*
  store i32 %v5_154c4, i32* %v3_154d4, align 4
  %v0_154d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_154d8 = load i32, i32* %r7.global-to-local, align 4
  %v2_154d8 = add i32 %v1_154d8, 60
  %v3_154d8 = inttoptr i32 %v2_154d8 to i32*
  store i32 %v0_154d8, i32* %v3_154d8, align 4
  %v0_154dc = load i32, i32* %r4.global-to-local, align 4
  %v1_154dc = add i32 %v0_154dc, 65
  %v2_154dc = inttoptr i32 %v1_154dc to i8*
  %v3_154dc = load i8, i8* %v2_154dc, align 1
  %v4_154dc = zext i8 %v3_154dc to i32
  %v1_154e0 = add i32 %v0_154dc, 64
  %v2_154e0 = inttoptr i32 %v1_154e0 to i8*
  %v3_154e0 = load i8, i8* %v2_154e0, align 1
  %v4_154e0 = zext i8 %v3_154e0 to i32
  store i32 %v4_154e0, i32* %r3.global-to-local, align 4
  %v1_154e4 = add i32 %v0_154dc, 66
  %v2_154e4 = inttoptr i32 %v1_154e4 to i8*
  %v3_154e4 = load i8, i8* %v2_154e4, align 1
  %v4_154e4 = zext i8 %v3_154e4 to i32
  %v4_154e8 = mul nuw nsw i32 %v4_154dc, 256
  %v5_154e8 = or i32 %v4_154e0, %v4_154e8
  store i32 %v5_154e8, i32* %r3.global-to-local, align 4
  %v1_154ec = add i32 %v0_154dc, 67
  %v2_154ec = inttoptr i32 %v1_154ec to i8*
  %v3_154ec = load i8, i8* %v2_154ec, align 1
  %v4_154ec = zext i8 %v3_154ec to i32
  %v4_154f0 = mul nuw nsw i32 %v4_154e4, 65536
  %v5_154f0 = or i32 %v4_154f0, %v5_154e8
  %v4_154f4 = mul nuw i32 %v4_154ec, 16777216
  %v5_154f4 = or i32 %v5_154f0, %v4_154f4
  store i32 %v5_154f4, i32* %r3.global-to-local, align 4
  %v1_154f8 = load i32, i32* %r7.global-to-local, align 4
  %v2_154f8 = add i32 %v1_154f8, 64
  %v3_154f8 = inttoptr i32 %v2_154f8 to i32*
  store i32 %v5_154f4, i32* %v3_154f8, align 4
  %v0_154fc = load i32, i32* %r4.global-to-local, align 4
  %v1_154fc = add i32 %v0_154fc, 73
  %v2_154fc = inttoptr i32 %v1_154fc to i8*
  %v3_154fc = load i8, i8* %v2_154fc, align 1
  %v4_154fc = zext i8 %v3_154fc to i32
  %v1_15500 = add i32 %v0_154fc, 72
  %v2_15500 = inttoptr i32 %v1_15500 to i8*
  %v3_15500 = load i8, i8* %v2_15500, align 1
  %v4_15500 = zext i8 %v3_15500 to i32
  store i32 %v4_15500, i32* %r3.global-to-local, align 4
  %v1_15504 = add i32 %v0_154fc, 74
  %v2_15504 = inttoptr i32 %v1_15504 to i8*
  %v3_15504 = load i8, i8* %v2_15504, align 1
  %v4_15504 = zext i8 %v3_15504 to i32
  %v4_15508 = mul nuw nsw i32 %v4_154fc, 256
  %v5_15508 = or i32 %v4_15500, %v4_15508
  store i32 %v5_15508, i32* %r3.global-to-local, align 4
  %v1_1550c = add i32 %v0_154fc, 75
  %v2_1550c = inttoptr i32 %v1_1550c to i8*
  %v3_1550c = load i8, i8* %v2_1550c, align 1
  %v4_1550c = zext i8 %v3_1550c to i32
  %v4_15510 = mul nuw nsw i32 %v4_15504, 65536
  %v5_15510 = or i32 %v4_15510, %v5_15508
  %v4_15514 = mul nuw i32 %v4_1550c, 16777216
  %v5_15514 = or i32 %v5_15510, %v4_15514
  store i32 %v5_15514, i32* %r3.global-to-local, align 4
  %v1_15518 = load i32, i32* %r7.global-to-local, align 4
  %v2_15518 = add i32 %v1_15518, 72
  %v3_15518 = inttoptr i32 %v2_15518 to i32*
  store i32 %v5_15514, i32* %v3_15518, align 4
  %v0_1551c = load i32, i32* %r4.global-to-local, align 4
  %v1_1551c = add i32 %v0_1551c, 81
  %v2_1551c = inttoptr i32 %v1_1551c to i8*
  %v3_1551c = load i8, i8* %v2_1551c, align 1
  %v4_1551c = zext i8 %v3_1551c to i32
  %v1_15520 = add i32 %v0_1551c, 80
  %v2_15520 = inttoptr i32 %v1_15520 to i8*
  %v3_15520 = load i8, i8* %v2_15520, align 1
  %v4_15520 = zext i8 %v3_15520 to i32
  store i32 %v4_15520, i32* %r3.global-to-local, align 4
  %v1_15524 = add i32 %v0_1551c, 82
  %v2_15524 = inttoptr i32 %v1_15524 to i8*
  %v3_15524 = load i8, i8* %v2_15524, align 1
  %v4_15524 = zext i8 %v3_15524 to i32
  %v4_15528 = mul nuw nsw i32 %v4_1551c, 256
  %v5_15528 = or i32 %v4_15520, %v4_15528
  store i32 %v5_15528, i32* %r3.global-to-local, align 4
  %v1_1552c = add i32 %v0_1551c, 83
  %v2_1552c = inttoptr i32 %v1_1552c to i8*
  %v3_1552c = load i8, i8* %v2_1552c, align 1
  %v4_1552c = zext i8 %v3_1552c to i32
  %v4_15530 = mul nuw nsw i32 %v4_15524, 65536
  %v5_15530 = or i32 %v4_15530, %v5_15528
  %v4_15534 = mul nuw i32 %v4_1552c, 16777216
  %v5_15534 = or i32 %v5_15530, %v4_15534
  store i32 %v5_15534, i32* %r3.global-to-local, align 4
  %v1_15538 = load i32, i32* %r7.global-to-local, align 4
  %v2_15538 = add i32 %v1_15538, 80
  %v3_15538 = inttoptr i32 %v2_15538 to i32*
  store i32 %v5_15534, i32* %v3_15538, align 4
  %v0_1553c = load i32, i32* %r4.global-to-local, align 4
  %v1_1553c = add i32 %v0_1553c, 69
  %v2_1553c = inttoptr i32 %v1_1553c to i8*
  %v3_1553c = load i8, i8* %v2_1553c, align 1
  %v4_1553c = zext i8 %v3_1553c to i32
  %v1_15540 = add i32 %v0_1553c, 68
  %v2_15540 = inttoptr i32 %v1_15540 to i8*
  %v3_15540 = load i8, i8* %v2_15540, align 1
  %v4_15540 = zext i8 %v3_15540 to i32
  store i32 %v4_15540, i32* %r3.global-to-local, align 4
  %v1_15544 = add i32 %v0_1553c, 70
  %v2_15544 = inttoptr i32 %v1_15544 to i8*
  %v3_15544 = load i8, i8* %v2_15544, align 1
  %v4_15544 = zext i8 %v3_15544 to i32
  %v4_15548 = mul nuw nsw i32 %v4_1553c, 256
  %v5_15548 = or i32 %v4_15540, %v4_15548
  store i32 %v5_15548, i32* %r3.global-to-local, align 4
  %v1_1554c = add i32 %v0_1553c, 71
  %v2_1554c = inttoptr i32 %v1_1554c to i8*
  %v3_1554c = load i8, i8* %v2_1554c, align 1
  %v4_1554c = zext i8 %v3_1554c to i32
  %v4_15550 = mul nuw nsw i32 %v4_15544, 65536
  %v5_15550 = or i32 %v4_15550, %v5_15548
  %v4_15554 = mul nuw i32 %v4_1554c, 16777216
  %v5_15554 = or i32 %v5_15550, %v4_15554
  store i32 %v5_15554, i32* %r3.global-to-local, align 4
  %v1_15558 = load i32, i32* %r7.global-to-local, align 4
  %v2_15558 = add i32 %v1_15558, 68
  %v3_15558 = inttoptr i32 %v2_15558 to i32*
  store i32 %v5_15554, i32* %v3_15558, align 4
  %v0_1555c = load i32, i32* %r4.global-to-local, align 4
  %v1_1555c = add i32 %v0_1555c, 77
  %v2_1555c = inttoptr i32 %v1_1555c to i8*
  %v3_1555c = load i8, i8* %v2_1555c, align 1
  %v4_1555c = zext i8 %v3_1555c to i32
  %v1_15560 = add i32 %v0_1555c, 76
  %v2_15560 = inttoptr i32 %v1_15560 to i8*
  %v3_15560 = load i8, i8* %v2_15560, align 1
  %v4_15560 = zext i8 %v3_15560 to i32
  store i32 %v4_15560, i32* %r3.global-to-local, align 4
  %v1_15564 = add i32 %v0_1555c, 78
  %v2_15564 = inttoptr i32 %v1_15564 to i8*
  %v3_15564 = load i8, i8* %v2_15564, align 1
  %v4_15564 = zext i8 %v3_15564 to i32
  %v4_15568 = mul nuw nsw i32 %v4_1555c, 256
  %v5_15568 = or i32 %v4_15560, %v4_15568
  store i32 %v5_15568, i32* %r3.global-to-local, align 4
  %v1_1556c = add i32 %v0_1555c, 79
  %v2_1556c = inttoptr i32 %v1_1556c to i8*
  %v3_1556c = load i8, i8* %v2_1556c, align 1
  %v4_1556c = zext i8 %v3_1556c to i32
  %v4_15570 = mul nuw nsw i32 %v4_15564, 65536
  %v5_15570 = or i32 %v4_15570, %v5_15568
  %v4_15574 = mul nuw i32 %v4_1556c, 16777216
  %v5_15574 = or i32 %v5_15570, %v4_15574
  store i32 %v5_15574, i32* %r3.global-to-local, align 4
  %v1_15578 = load i32, i32* %r7.global-to-local, align 4
  %v2_15578 = add i32 %v1_15578, 76
  %v3_15578 = inttoptr i32 %v2_15578 to i32*
  store i32 %v5_15574, i32* %v3_15578, align 4
  %v0_1557c = load i32, i32* %r4.global-to-local, align 4
  %v1_1557c = add i32 %v0_1557c, 85
  %v2_1557c = inttoptr i32 %v1_1557c to i8*
  %v3_1557c = load i8, i8* %v2_1557c, align 1
  %v4_1557c = zext i8 %v3_1557c to i32
  %v1_15580 = add i32 %v0_1557c, 84
  %v2_15580 = inttoptr i32 %v1_15580 to i8*
  %v3_15580 = load i8, i8* %v2_15580, align 1
  %v4_15580 = zext i8 %v3_15580 to i32
  store i32 %v4_15580, i32* %r3.global-to-local, align 4
  %v1_15584 = add i32 %v0_1557c, 86
  %v2_15584 = inttoptr i32 %v1_15584 to i8*
  %v3_15584 = load i8, i8* %v2_15584, align 1
  %v4_15584 = zext i8 %v3_15584 to i32
  %v4_15588 = mul nuw nsw i32 %v4_1557c, 256
  %v5_15588 = or i32 %v4_15580, %v4_15588
  store i32 %v5_15588, i32* %r3.global-to-local, align 4
  %v1_1558c = add i32 %v0_1557c, 87
  %v2_1558c = inttoptr i32 %v1_1558c to i8*
  %v3_1558c = load i8, i8* %v2_1558c, align 1
  %v4_1558c = zext i8 %v3_1558c to i32
  %v4_15590 = mul nuw nsw i32 %v4_15584, 65536
  %v5_15590 = or i32 %v4_15590, %v5_15588
  %v4_15594 = mul nuw i32 %v4_1558c, 16777216
  %v5_15594 = or i32 %v5_15590, %v4_15594
  store i32 %v5_15594, i32* %r3.global-to-local, align 4
  %v1_15598 = load i32, i32* %r7.global-to-local, align 4
  %v2_15598 = add i32 %v1_15598, 84
  %v3_15598 = inttoptr i32 %v2_15598 to i32*
  store i32 %v5_15594, i32* %v3_15598, align 4
  ret i32 %v4_1549c

; uselistorder directives
  uselistorder i32 %v4_1549c, { 1, 0 }
  uselistorder i32 %v0_15490, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15420, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_153d0, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_152f0, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 79, { 2, 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 80, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 74, { 2, 0, 1 }
  uselistorder i32 59, { 1, 2, 0 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 58, { 5, 0, 1, 2, 3, 4, 6, 7, 8, 9 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 57, { 3, 0, 1, 2, 4 }
  uselistorder i32 55, { 5, 7, 0, 6, 4, 1, 2, 3 }
  uselistorder i32 54, { 4, 3, 0, 5, 1, 6, 2, 7 }
  uselistorder i32 53, { 4, 0, 5, 1, 6, 2, 7, 3, 8 }
  uselistorder i32 51, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 47, { 4, 5, 6, 7, 8, 1, 9, 0, 10, 11, 2, 12, 3 }
  uselistorder i32 50, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 46, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 49, { 2, 0, 3, 1, 4 }
  uselistorder i32 45, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 39, { 5, 6, 1, 0, 7, 2, 8, 3, 9, 4 }
  uselistorder i32 35, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 38, { 4, 3, 5, 6, 7, 8, 0, 9, 1, 10, 2, 11 }
  uselistorder i32 34, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 37, { 3, 4, 5, 6, 0, 7, 1, 8, 2, 9 }
  uselistorder i32 33, { 5, 6, 0, 7, 1, 8, 2, 9, 3, 4, 10 }
  uselistorder i32 30, { 6, 1, 7, 2, 8, 3, 9, 4, 10, 0, 11, 5, 12 }
  uselistorder i32 29, { 8, 1, 0, 2, 9, 3, 10, 4, 11, 12, 13, 6, 5, 7 }
  uselistorder i32 26, { 5, 0, 1, 2, 6, 3, 7, 4, 8, 9 }
  uselistorder i32 25, { 7, 14, 15, 1, 0, 2, 8, 3, 9, 4, 10, 6, 11, 12, 13, 5, 16, 17 }
  uselistorder i32 23, { 13, 4, 0, 5, 1, 6, 2, 7, 3, 8, 14, 9, 15, 10, 16, 17, 18, 19, 11, 12, 20 }
  uselistorder i32 22, { 8, 0, 13, 1, 2, 3, 4, 9, 5, 10, 6, 11, 12, 7 }
  uselistorder i32 21, { 4, 0, 1, 5, 6, 7, 3, 8, 2, 9 }
  uselistorder i32 19, { 12, 14, 15, 16, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 0, 13, 17, 11, 18 }
  uselistorder i32 18, { 6, 7, 8, 9, 3, 0, 5, 10, 4, 11, 1, 12, 2, 13 }
  uselistorder i32 17, { 12, 14, 0, 3, 29, 30, 4, 31, 32, 5, 1, 13, 6, 15, 7, 16, 8, 17, 9, 18, 10, 19, 20, 2, 21, 22, 23, 11, 24, 25, 26, 27, 28 }
  uselistorder i32 6, { 27, 32, 13, 14, 73, 15, 29, 2, 16, 28, 0, 30, 17, 31, 3, 18, 19, 20, 4, 21, 33, 34, 35, 5, 36, 37, 38, 39, 6, 40, 41, 42, 43, 7, 44, 8, 45, 46, 22, 47, 9, 48, 49, 50, 23, 51, 10, 52, 53, 24, 54, 55, 56, 57, 58, 25, 59, 11, 60, 61, 62, 63, 64, 65, 26, 66, 12, 67, 1, 68, 69, 70, 71, 72 }
}

define i32 @function_155a4(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_155a4:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_155a4 = load i32, i32* @r4, align 4
  store i32 %v3_155a4, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_155bc = inttoptr i32 %arg2 to i8*
  %v3_155bc = call i32 @function_13c00(i8* %v2_155bc, i32 0)
  store i32 %v3_155bc, i32* %r0.global-to-local, align 4
  %v0_155c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_155c0 = inttoptr i32 %v0_155c0 to i32*
  %v2_155c0 = load i32, i32* %v1_155c0, align 4
  store i32 %v2_155c0, i32* %r3.global-to-local, align 4
  %v1_155c4 = add i32 %v0_155c0, 4
  %v2_155c4 = inttoptr i32 %v1_155c4 to i32*
  %v3_155c4 = load i32, i32* %v2_155c4, align 4
  store i32 %v3_155c4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_155cc = load i32, i32* %r6.global-to-local, align 4
  %v1_155cc = inttoptr i32 %v0_155cc to i32*
  store i32 %v2_155c0, i32* %v1_155cc, align 4
  %v3_155cc = add i32 %v0_155cc, 4
  %v4_155cc = inttoptr i32 %v3_155cc to i32*
  %v5_155cc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_155cc, i32* %v4_155cc, align 4
  %v0_155d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_155d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_155d0 = add i32 %v1_155d0, 12
  %v3_155d0 = inttoptr i32 %v2_155d0 to i32*
  store i32 %v0_155d0, i32* %v3_155d0, align 4
  %v0_155d4 = load i32, i32* %r5.global-to-local, align 4
  %v1_155d4 = add i32 %v0_155d4, 9
  %v2_155d4 = inttoptr i32 %v1_155d4 to i8*
  %v3_155d4 = load i8, i8* %v2_155d4, align 1
  %v4_155d4 = zext i8 %v3_155d4 to i32
  store i32 %v4_155d4, i32* %r2.global-to-local, align 4
  %v1_155d8 = add i32 %v0_155d4, 8
  %v2_155d8 = inttoptr i32 %v1_155d8 to i8*
  %v3_155d8 = load i8, i8* %v2_155d8, align 1
  %v4_155d8 = zext i8 %v3_155d8 to i32
  %v4_155dc = mul nuw nsw i32 %v4_155d4, 256
  %v5_155dc = or i32 %v4_155d8, %v4_155dc
  store i32 %v5_155dc, i32* %r3.global-to-local, align 4
  %v1_155e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_155e0 = add i32 %v1_155e0, 16
  %v3_155e0 = inttoptr i32 %v2_155e0 to i32*
  store i32 %v5_155dc, i32* %v3_155e0, align 4
  %v0_155e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_155e4 = add i32 %v0_155e4, 11
  %v2_155e4 = inttoptr i32 %v1_155e4 to i8*
  %v3_155e4 = load i8, i8* %v2_155e4, align 1
  %v4_155e4 = zext i8 %v3_155e4 to i32
  store i32 %v4_155e4, i32* %r2.global-to-local, align 4
  %v1_155e8 = add i32 %v0_155e4, 10
  %v2_155e8 = inttoptr i32 %v1_155e8 to i8*
  %v3_155e8 = load i8, i8* %v2_155e8, align 1
  %v4_155e8 = zext i8 %v3_155e8 to i32
  %v4_155ec = mul nuw nsw i32 %v4_155e4, 256
  %v5_155ec = or i32 %v4_155e8, %v4_155ec
  store i32 %v5_155ec, i32* %r3.global-to-local, align 4
  %v1_155f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_155f0 = add i32 %v1_155f0, 20
  %v3_155f0 = inttoptr i32 %v2_155f0 to i32*
  store i32 %v5_155ec, i32* %v3_155f0, align 4
  %v0_155f4 = load i32, i32* %r5.global-to-local, align 4
  %v1_155f4 = add i32 %v0_155f4, 13
  %v2_155f4 = inttoptr i32 %v1_155f4 to i8*
  %v3_155f4 = load i8, i8* %v2_155f4, align 1
  %v4_155f4 = zext i8 %v3_155f4 to i32
  store i32 %v4_155f4, i32* %r2.global-to-local, align 4
  %v1_155f8 = add i32 %v0_155f4, 12
  %v2_155f8 = inttoptr i32 %v1_155f8 to i8*
  %v3_155f8 = load i8, i8* %v2_155f8, align 1
  %v4_155f8 = zext i8 %v3_155f8 to i32
  %v4_155fc = mul nuw nsw i32 %v4_155f4, 256
  %v5_155fc = or i32 %v4_155f8, %v4_155fc
  store i32 %v5_155fc, i32* %r3.global-to-local, align 4
  %v1_15600 = load i32, i32* %r6.global-to-local, align 4
  %v2_15600 = add i32 %v1_15600, 24
  %v3_15600 = inttoptr i32 %v2_15600 to i32*
  store i32 %v5_155fc, i32* %v3_15600, align 4
  %v0_15604 = load i32, i32* %r5.global-to-local, align 4
  %v1_15604 = add i32 %v0_15604, 20
  %v2_15604 = inttoptr i32 %v1_15604 to i32*
  %v3_15604 = load i32, i32* %v2_15604, align 4
  store i32 %v3_15604, i32* %r3.global-to-local, align 4
  %v1_15608 = add i32 %v0_15604, 14
  %v2_15608 = inttoptr i32 %v1_15608 to i8*
  %v3_15608 = load i8, i8* %v2_15608, align 1
  %v4_15608 = zext i8 %v3_15608 to i32
  store i32 %v4_15608, i32* %r0.global-to-local, align 4
  %v1_1560c = add i32 %v0_15604, 15
  %v2_1560c = inttoptr i32 %v1_1560c to i8*
  %v3_1560c = load i8, i8* %v2_1560c, align 1
  %v4_1560c = zext i8 %v3_1560c to i32
  store i32 %v4_1560c, i32* %ip.global-to-local, align 4
  %v1_15610 = add i32 %v0_15604, 16
  %v2_15610 = inttoptr i32 %v1_15610 to i32*
  %v3_15610 = load i32, i32* %v2_15610, align 4
  store i32 %v3_15610, i32* %r1.global-to-local, align 4
  %v1_15614 = load i32, i32* %r6.global-to-local, align 4
  %v2_15614 = add i32 %v1_15614, 44
  %v3_15614 = inttoptr i32 %v2_15614 to i32*
  store i32 %v3_15604, i32* %v3_15614, align 4
  %v0_15618 = load i32, i32* %r5.global-to-local, align 4
  %v1_15618 = add i32 %v0_15618, 24
  %v2_15618 = inttoptr i32 %v1_15618 to i32*
  %v3_15618 = load i32, i32* %v2_15618, align 4
  store i32 %v3_15618, i32* %r3.global-to-local, align 4
  %v1_1561c = load i32, i32* %r6.global-to-local, align 4
  %v2_1561c = add i32 %v1_1561c, 48
  %v3_1561c = inttoptr i32 %v2_1561c to i32*
  store i32 %v3_15618, i32* %v3_1561c, align 4
  %v0_15620 = load i32, i32* %r5.global-to-local, align 4
  %v1_15620 = add i32 %v0_15620, 28
  %v2_15620 = inttoptr i32 %v1_15620 to i32*
  %v3_15620 = load i32, i32* %v2_15620, align 4
  store i32 %v3_15620, i32* %r3.global-to-local, align 4
  %v1_15624 = load i32, i32* %r6.global-to-local, align 4
  %v2_15624 = add i32 %v1_15624, 52
  %v3_15624 = inttoptr i32 %v2_15624 to i32*
  store i32 %v3_15620, i32* %v3_15624, align 4
  %v0_15628 = load i32, i32* %r5.global-to-local, align 4
  %v1_15628 = add i32 %v0_15628, 32
  %v2_15628 = inttoptr i32 %v1_15628 to i32*
  %v3_15628 = load i32, i32* %v2_15628, align 4
  store i32 %v3_15628, i32* %r3.global-to-local, align 4
  %v1_1562c = load i32, i32* %r6.global-to-local, align 4
  %v2_1562c = add i32 %v1_1562c, 56
  %v3_1562c = inttoptr i32 %v2_1562c to i32*
  store i32 %v3_15628, i32* %v3_1562c, align 4
  %v0_15630 = load i32, i32* %r5.global-to-local, align 4
  %v1_15630 = add i32 %v0_15630, 40
  %v2_15630 = inttoptr i32 %v1_15630 to i32*
  %v3_15630 = load i32, i32* %v2_15630, align 4
  store i32 %v3_15630, i32* %r3.global-to-local, align 4
  %v1_15634 = load i32, i32* %r6.global-to-local, align 4
  %v2_15634 = add i32 %v1_15634, 64
  %v3_15634 = inttoptr i32 %v2_15634 to i32*
  store i32 %v3_15630, i32* %v3_15634, align 4
  %v0_15638 = load i32, i32* %r5.global-to-local, align 4
  %v1_15638 = add i32 %v0_15638, 48
  %v2_15638 = inttoptr i32 %v1_15638 to i32*
  %v3_15638 = load i32, i32* %v2_15638, align 4
  store i32 %v3_15638, i32* %r3.global-to-local, align 4
  %v1_1563c = load i32, i32* %r6.global-to-local, align 4
  %v2_1563c = add i32 %v1_1563c, 72
  %v3_1563c = inttoptr i32 %v2_1563c to i32*
  store i32 %v3_15638, i32* %v3_1563c, align 4
  %v0_15640 = load i32, i32* %r5.global-to-local, align 4
  %v1_15640 = add i32 %v0_15640, 36
  %v2_15640 = inttoptr i32 %v1_15640 to i32*
  %v3_15640 = load i32, i32* %v2_15640, align 4
  store i32 %v3_15640, i32* %r3.global-to-local, align 4
  %v1_15644 = load i32, i32* %r6.global-to-local, align 4
  %v2_15644 = add i32 %v1_15644, 60
  %v3_15644 = inttoptr i32 %v2_15644 to i32*
  store i32 %v3_15640, i32* %v3_15644, align 4
  %v0_15648 = load i32, i32* %r5.global-to-local, align 4
  %v1_15648 = add i32 %v0_15648, 44
  %v2_15648 = inttoptr i32 %v1_15648 to i32*
  %v3_15648 = load i32, i32* %v2_15648, align 4
  store i32 %v3_15648, i32* %r3.global-to-local, align 4
  %v0_1564c = load i32, i32* %r0.global-to-local, align 4
  %v1_1564c = load i32, i32* %ip.global-to-local, align 4
  %v4_1564c = mul i32 %v1_1564c, 256
  %v5_1564c = or i32 %v4_1564c, %v0_1564c
  store i32 %v5_1564c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_15654 = load i32, i32* %r6.global-to-local, align 4
  %v2_15654 = add i32 %v1_15654, 28
  %v3_15654 = inttoptr i32 %v2_15654 to i32*
  store i32 %v5_1564c, i32* %v3_15654, align 4
  %v0_15658 = load i32, i32* %r1.global-to-local, align 4
  %v1_15658 = load i32, i32* %r6.global-to-local, align 4
  %v2_15658 = add i32 %v1_15658, 32
  %v3_15658 = inttoptr i32 %v2_15658 to i32*
  store i32 %v0_15658, i32* %v3_15658, align 4
  %v0_1565c = load i32, i32* %r2.global-to-local, align 4
  %v1_1565c = load i32, i32* %r6.global-to-local, align 4
  %v2_1565c = add i32 %v1_1565c, 36
  %v3_1565c = inttoptr i32 %v2_1565c to i32*
  store i32 %v0_1565c, i32* %v3_1565c, align 4
  %v0_15660 = load i32, i32* %r3.global-to-local, align 4
  %v1_15660 = load i32, i32* %r6.global-to-local, align 4
  %v2_15660 = add i32 %v1_15660, 68
  %v3_15660 = inttoptr i32 %v2_15660 to i32*
  store i32 %v0_15660, i32* %v3_15660, align 4
  %v0_15664 = load i32, i32* %r5.global-to-local, align 4
  %v1_15664 = add i32 %v0_15664, 52
  %v2_15664 = inttoptr i32 %v1_15664 to i32*
  %v3_15664 = load i32, i32* %v2_15664, align 4
  store i32 %v3_15664, i32* %r3.global-to-local, align 4
  %v1_15668 = load i32, i32* %r6.global-to-local, align 4
  %v2_15668 = add i32 %v1_15668, 76
  %v3_15668 = inttoptr i32 %v2_15668 to i32*
  store i32 %v3_15664, i32* %v3_15668, align 4
  %v2_1566c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1566c, i32* %r4.global-to-local, align 4
  ret i32 %v5_1564c

; uselistorder directives
  uselistorder i32 %v0_15604, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 14, 12, 13, 1, 5, 45, 6, 15, 16, 0, 7, 17, 18, 19, 8, 20, 21, 22, 23, 9, 24, 25, 26, 10, 27, 28, 29, 11, 30, 31, 32, 2, 33, 34, 35, 36, 37, 3, 38, 39, 40, 41, 42, 4, 43, 44 }
  uselistorder i32 56, { 8, 5, 6, 7, 0, 1, 2, 9, 3, 4 }
  uselistorder i32 52, { 5, 6, 3, 4, 7, 8, 0, 9, 1, 10, 2, 11 }
  uselistorder i32 15, { 13, 9, 8, 10, 3, 0, 11, 4, 12, 5, 6, 1, 14, 15, 7, 16, 17, 18, 19, 2, 20 }
  uselistorder i32 14, { 12, 8, 20, 3, 9, 0, 7, 4, 10, 5, 11, 6, 13, 14, 1, 15, 16, 17, 18, 2, 19 }
  uselistorder i32 13, { 24, 12, 11, 13, 14, 15, 16, 4, 17, 5, 18, 6, 19, 7, 20, 8, 21, 9, 22, 10, 23, 0, 25, 26, 27, 28, 29, 1, 30, 31, 32, 33, 34, 35, 36, 2, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 3, 49, 50 }
  uselistorder i32 9, { 39, 40, 41, 9, 5, 57, 10, 30, 6, 31, 12, 29, 25, 13, 28, 11, 3, 32, 26, 33, 2, 27, 14, 34, 15, 35, 16, 36, 17, 37, 38, 7, 18, 19, 20, 21, 0, 22, 1, 23, 53, 42, 43, 24, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 4, 56, 58, 59, 8, 60 }
  uselistorder i32 (i8*, i32)* @function_13c00, { 1, 0, 8, 7, 5, 2, 3, 4, 6 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_15670() local_unnamed_addr {
dec_label_pc_15670:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_15670 = load i32, i32* @r1, align 4
  %v1_15670 = load i32, i32* @r0, align 4
  %v2_15670 = sub i32 %v0_15670, %v1_15670
  %v3_15670 = icmp ult i32 %v0_15670, %v1_15670
  %v4_15670 = xor i32 %v1_15670, %v0_15670
  %v5_15670 = xor i32 %v2_15670, %v0_15670
  %v6_15670 = and i32 %v5_15670, %v4_15670
  %v7_15670 = icmp slt i32 %v6_15670, 0
  store i1 %v7_15670, i1* %cpsr_v.global-to-local, align 1
  %v8_15670 = icmp slt i32 %v2_15670, 0
  store i1 %v8_15670, i1* %cpsr_n.global-to-local, align 1
  %v9_15670 = icmp eq i32 %v0_15670, %v1_15670
  store i1 %v9_15670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15670, label %dec_label_pc_158bc, label %dec_label_pc_15678

dec_label_pc_15678:                               ; preds = %dec_label_pc_15670
  br i1 %v9_15670, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_15678
  %merge = phi i32 [ %v0_15670, %dec_label_pc_15678 ], [ %v2_15950, %bb141 ], [ %v11_1596c, %bb144 ], [ %v7_1596c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_15678
  store i32 %v1_15670, i32* %stack_var_-8, align 4
  %v0_15680 = load i32, i32* @r2, align 4
  %v2_15680 = add i32 %v0_15680, -4
  store i32 %v2_15680, i32* %r2.global-to-local, align 4
  %v4_15680 = sub i32 3, %v0_15680
  %v5_15680 = and i32 %v4_15680, %v0_15680
  %v6_15680 = icmp slt i32 %v5_15680, 0
  store i1 %v6_15680, i1* %cpsr_v.global-to-local, align 1
  %v7_15680 = icmp slt i32 %v2_15680, 0
  store i1 %v7_15680, i1* %cpsr_n.global-to-local, align 1
  %v8_15680 = icmp eq i32 %v0_15680, 4
  store i1 %v8_15680, i1* %cpsr_z.global-to-local, align 1
  %v5_15684 = icmp slt i32 %v0_15680, 4
  br i1 %v5_15684, label %bb131, label %dec_label_pc_15688

dec_label_pc_15688:                               ; preds = %bb
  %v1_15688 = urem i32 %v1_15670, 4
  store i32 %v1_15688, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15688 = icmp eq i32 %v1_15688, 0
  store i1 %v2_15688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15688, label %dec_label_pc_15690, label %dec_label_pc_15734

dec_label_pc_15690:                               ; preds = %dec_label_pc_15688
  %v1_15690 = urem i32 %v0_15670, 4
  store i32 %v1_15690, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15690 = icmp eq i32 %v1_15690, 0
  store i1 %v2_15690, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_15670 to i2
  br i1 %v2_15690, label %dec_label_pc_15698, label %dec_label_pc_15764

dec_label_pc_15698:                               ; preds = %dec_label_pc_15690, %dec_label_pc_1575c
  %v0_156b092 = phi i32 [ %v1_15670, %dec_label_pc_15690 ], [ %v0_157ac75, %dec_label_pc_1575c ]
  %v0_156ac91 = phi i32 [ %v0_15670, %dec_label_pc_15690 ], [ %v0_1575c, %dec_label_pc_1575c ]
  %v0_15698 = phi i32 [ %v2_15680, %dec_label_pc_15690 ], [ %v2_15754, %dec_label_pc_1575c ]
  %v2_15698 = add i32 %v0_15698, -8
  store i32 %v2_15698, i32* %r2.global-to-local, align 4
  %v4_15698 = sub i32 7, %v0_15698
  %v5_15698 = and i32 %v4_15698, %v0_15698
  %v6_15698 = icmp slt i32 %v5_15698, 0
  store i1 %v6_15698, i1* %cpsr_v.global-to-local, align 1
  %v7_15698 = icmp slt i32 %v2_15698, 0
  store i1 %v7_15698, i1* %cpsr_n.global-to-local, align 1
  %v8_15698 = icmp eq i32 %v0_15698, 8
  store i1 %v8_15698, i1* %cpsr_z.global-to-local, align 1
  %v5_1569c = icmp slt i32 %v0_15698, 8
  br i1 %v5_1569c, label %dec_label_pc_156ec, label %dec_label_pc_156a0

dec_label_pc_156a0:                               ; preds = %dec_label_pc_15698
  %v2_156a0 = add i32 %v0_15698, -28
  store i32 %v2_156a0, i32* %r2.global-to-local, align 4
  %v4_156a0 = sub i32 27, %v0_15698
  %v5_156a0 = and i32 %v4_156a0, %v2_15698
  %v6_156a0 = icmp slt i32 %v5_156a0, 0
  store i1 %v6_156a0, i1* %cpsr_v.global-to-local, align 1
  %v7_156a0 = icmp slt i32 %v2_156a0, 0
  store i1 %v7_156a0, i1* %cpsr_n.global-to-local, align 1
  %v8_156a0 = icmp eq i32 %v2_15698, 20
  store i1 %v8_156a0, i1* %cpsr_z.global-to-local, align 1
  %v5_156a4 = icmp slt i32 %v2_15698, 20
  br i1 %v5_156a4, label %dec_label_pc_156d8, label %dec_label_pc_156a8

dec_label_pc_156a8:                               ; preds = %dec_label_pc_156a0
  %v0_156a8 = load i32, i32* @r4, align 4
  store i32 %v0_156a8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_156ac

dec_label_pc_156ac:                               ; preds = %dec_label_pc_156ac.dec_label_pc_156ac_crit_edge, %dec_label_pc_156a8
  %v0_156b0 = phi i32 [ %v12_156b8, %dec_label_pc_156ac.dec_label_pc_156ac_crit_edge ], [ %v0_156b092, %dec_label_pc_156a8 ]
  %v0_156ac = phi i32 [ %v0_156ac.pre, %dec_label_pc_156ac.dec_label_pc_156ac_crit_edge ], [ %v0_156ac91, %dec_label_pc_156a8 ]
  %v1_156ac = inttoptr i32 %v0_156ac to i32*
  %v2_156ac = load i32, i32* %v1_156ac, align 4
  store i32 %v2_156ac, i32* %r3.global-to-local, align 4
  %v3_156ac = add i32 %v0_156ac, 4
  %v4_156ac = inttoptr i32 %v3_156ac to i32*
  %v5_156ac = load i32, i32* %v4_156ac, align 4
  store i32 %v5_156ac, i32* %r4.global-to-local, align 4
  %v6_156ac = add i32 %v0_156ac, 8
  %v7_156ac = inttoptr i32 %v6_156ac to i32*
  %v8_156ac = load i32, i32* %v7_156ac, align 4
  store i32 %v8_156ac, i32* %ip.global-to-local, align 4
  %v9_156ac = add i32 %v0_156ac, 12
  %v10_156ac = inttoptr i32 %v9_156ac to i32*
  %v11_156ac = load i32, i32* %v10_156ac, align 4
  store i32 %v11_156ac, i32* %lr.global-to-local, align 4
  %v12_156ac = add i32 %v0_156ac, 16
  store i32 %v12_156ac, i32* %r1.global-to-local, align 4
  %v1_156b0 = inttoptr i32 %v0_156b0 to i32*
  store i32 %v2_156ac, i32* %v1_156b0, align 4
  %v3_156b0 = add i32 %v0_156b0, 4
  %v4_156b0 = inttoptr i32 %v3_156b0 to i32*
  %v5_156b0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_156b0, i32* %v4_156b0, align 4
  %v6_156b0 = add i32 %v0_156b0, 8
  %v7_156b0 = inttoptr i32 %v6_156b0 to i32*
  %v8_156b0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_156b0, i32* %v7_156b0, align 4
  %v9_156b0 = add i32 %v0_156b0, 12
  %v10_156b0 = inttoptr i32 %v9_156b0 to i32*
  %v11_156b0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_156b0, i32* %v10_156b0, align 4
  %v12_156b0 = add i32 %v0_156b0, 16
  store i32 %v12_156b0, i32* %r0.global-to-local, align 4
  %v0_156b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_156b4 = inttoptr i32 %v0_156b4 to i32*
  %v2_156b4 = load i32, i32* %v1_156b4, align 4
  store i32 %v2_156b4, i32* %r3.global-to-local, align 4
  %v3_156b4 = add i32 %v0_156b4, 4
  %v4_156b4 = inttoptr i32 %v3_156b4 to i32*
  %v5_156b4 = load i32, i32* %v4_156b4, align 4
  store i32 %v5_156b4, i32* %r4.global-to-local, align 4
  %v6_156b4 = add i32 %v0_156b4, 8
  %v7_156b4 = inttoptr i32 %v6_156b4 to i32*
  %v8_156b4 = load i32, i32* %v7_156b4, align 4
  store i32 %v8_156b4, i32* %ip.global-to-local, align 4
  %v9_156b4 = add i32 %v0_156b4, 12
  %v10_156b4 = inttoptr i32 %v9_156b4 to i32*
  %v11_156b4 = load i32, i32* %v10_156b4, align 4
  store i32 %v11_156b4, i32* @lr, align 4
  %v12_156b4 = add i32 %v0_156b4, 16
  store i32 %v12_156b4, i32* @r1, align 4
  %v1_156b8 = inttoptr i32 %v12_156b0 to i32*
  store i32 %v2_156b4, i32* %v1_156b8, align 4
  %v3_156b8 = add i32 %v0_156b0, 20
  %v4_156b8 = inttoptr i32 %v3_156b8 to i32*
  %v5_156b8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_156b8, i32* %v4_156b8, align 4
  %v6_156b8 = add i32 %v0_156b0, 24
  %v7_156b8 = inttoptr i32 %v6_156b8 to i32*
  %v8_156b8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_156b8, i32* %v7_156b8, align 4
  %v9_156b8 = add i32 %v0_156b0, 28
  %v10_156b8 = inttoptr i32 %v9_156b8 to i32*
  %v11_156b8 = load i32, i32* @lr, align 4
  store i32 %v11_156b8, i32* %v10_156b8, align 4
  %v12_156b8 = add i32 %v0_156b0, 32
  store i32 %v12_156b8, i32* @r0, align 4
  %v0_156bc = load i32, i32* %r2.global-to-local, align 4
  %v2_156bc = add i32 %v0_156bc, -32
  store i32 %v2_156bc, i32* %r2.global-to-local, align 4
  %v6_156c0 = icmp slt i32 %v0_156bc, 32
  br i1 %v6_156c0, label %dec_label_pc_156c4, label %dec_label_pc_156ac.dec_label_pc_156ac_crit_edge

dec_label_pc_156ac.dec_label_pc_156ac_crit_edge:  ; preds = %dec_label_pc_156ac
  %v0_156ac.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_156ac

dec_label_pc_156c4:                               ; preds = %dec_label_pc_156ac
  %v4_156c4 = add i32 %v0_156bc, -16
  %v6_156c4 = add i32 %v0_156bc, 2147483616
  %v7_156c4 = and i32 %v4_156c4, %v6_156c4
  %v8_156c4 = icmp slt i32 %v7_156c4, 0
  store i1 %v8_156c4, i1* %cpsr_v.global-to-local, align 1
  %v9_156c4 = icmp slt i32 %v4_156c4, 0
  store i1 %v9_156c4, i1* %cpsr_n.global-to-local, align 1
  %v10_156c4 = icmp eq i32 %v4_156c4, 0
  store i1 %v10_156c4, i1* %cpsr_z.global-to-local, align 1
  %v5_156c8 = icmp slt i32 %v2_156bc, -16
  br i1 %v5_156c8, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_156c4
  %v6_156c8 = load i32, i32* @r1, align 4
  %v7_156c8 = inttoptr i32 %v6_156c8 to i32*
  %v8_156c8 = load i32, i32* %v7_156c8, align 4
  store i32 %v8_156c8, i32* %r3.global-to-local, align 4
  %v9_156c8 = add i32 %v6_156c8, 4
  %v10_156c8 = inttoptr i32 %v9_156c8 to i32*
  %v11_156c8 = load i32, i32* %v10_156c8, align 4
  store i32 %v11_156c8, i32* %r4.global-to-local, align 4
  %v12_156c8 = add i32 %v6_156c8, 8
  %v13_156c8 = inttoptr i32 %v12_156c8 to i32*
  %v14_156c8 = load i32, i32* %v13_156c8, align 4
  store i32 %v14_156c8, i32* %ip.global-to-local, align 4
  %v15_156c8 = add i32 %v6_156c8, 12
  %v16_156c8 = inttoptr i32 %v15_156c8 to i32*
  %v17_156c8 = load i32, i32* %v16_156c8, align 4
  store i32 %v17_156c8, i32* @lr, align 4
  %v18_156c8 = add i32 %v6_156c8, 16
  store i32 %v18_156c8, i32* @r1, align 4
  %v7_156cc = inttoptr i32 %v12_156b8 to i32*
  store i32 %v8_156c8, i32* %v7_156cc, align 4
  %v9_156cc = add i32 %v0_156b0, 36
  %v10_156cc = inttoptr i32 %v9_156cc to i32*
  %v11_156cc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_156cc, i32* %v10_156cc, align 4
  %v12_156cc = add i32 %v0_156b0, 40
  %v13_156cc = inttoptr i32 %v12_156cc to i32*
  %v14_156cc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v14_156cc, i32* %v13_156cc, align 4
  %v15_156cc = add i32 %v0_156b0, 44
  %v16_156cc = inttoptr i32 %v15_156cc to i32*
  %v17_156cc = load i32, i32* @lr, align 4
  store i32 %v17_156cc, i32* %v16_156cc, align 4
  %v18_156cc = add i32 %v0_156b0, 48
  store i32 %v18_156cc, i32* @r0, align 4
  %v6_156d0 = load i32, i32* %r2.global-to-local, align 4
  %v7_156d0 = add i32 %v6_156d0, -16
  store i32 %v7_156d0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_156c4, %bb128
  %v3_156e0101 = phi i32 [ %v12_156b8, %dec_label_pc_156c4 ], [ %v18_156cc, %bb128 ]
  %v0_156d895 = phi i32 [ %v2_156bc, %dec_label_pc_156c4 ], [ %v7_156d0, %bb128 ]
  %v2_156d4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_156d4, i32* @r4, align 4
  br label %dec_label_pc_156d8

dec_label_pc_156d8:                               ; preds = %dec_label_pc_156a0, %.thread1
  %v3_156e0100 = phi i32 [ %v0_156b092, %dec_label_pc_156a0 ], [ %v3_156e0101, %.thread1 ]
  %v0_156d8 = phi i32 [ %v2_156a0, %dec_label_pc_156a0 ], [ %v0_156d895, %.thread1 ]
  %v1_156d8 = add i32 %v0_156d8, 20
  store i32 %v1_156d8, i32* %r2.global-to-local, align 4
  %v3_156d8 = sub i32 0, %v0_156d8
  %v4_156d8 = and i32 %v1_156d8, %v3_156d8
  %v5_156d8 = icmp slt i32 %v4_156d8, 0
  store i1 %v5_156d8, i1* %cpsr_v.global-to-local, align 1
  %v6_156d8 = icmp slt i32 %v1_156d8, 0
  store i1 %v6_156d8, i1* %cpsr_n.global-to-local, align 1
  %v7_156d8 = icmp eq i32 %v1_156d8, 0
  store i1 %v7_156d8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_156dc

dec_label_pc_156dc:                               ; preds = %.thread117, %dec_label_pc_156d8
  %v0_156ec.pre147 = phi i32 [ %v0_156ec.pre, %.thread117 ], [ %v1_156d8, %dec_label_pc_156d8 ]
  %v3_156e0 = phi i32 [ %v3_156e098118, %.thread117 ], [ %v3_156e0100, %dec_label_pc_156d8 ]
  %v1_156e4 = phi i1 [ %v1_156e8, %.thread117 ], [ %v5_156d8, %dec_label_pc_156d8 ]
  %v0_156e4 = phi i1 [ %v0_156e8, %.thread117 ], [ %v6_156d8, %dec_label_pc_156d8 ]
  %v2_156dc = xor i1 %v1_156e4, %v0_156e4
  br i1 %v2_156dc, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_156dc
  %v3_156dc = load i32, i32* @r1, align 4
  %v4_156dc = inttoptr i32 %v3_156dc to i32*
  %v5_156dc = load i32, i32* %v4_156dc, align 4
  store i32 %v5_156dc, i32* %r3.global-to-local, align 4
  %v6_156dc = add i32 %v3_156dc, 4
  %v7_156dc = inttoptr i32 %v6_156dc to i32*
  %v8_156dc = load i32, i32* %v7_156dc, align 4
  store i32 %v8_156dc, i32* %ip.global-to-local, align 4
  %v9_156dc = add i32 %v3_156dc, 8
  %v10_156dc = inttoptr i32 %v9_156dc to i32*
  %v11_156dc = load i32, i32* %v10_156dc, align 4
  store i32 %v11_156dc, i32* @lr, align 4
  %v12_156dc = add i32 %v3_156dc, 12
  store i32 %v12_156dc, i32* @r1, align 4
  %v4_156e0 = inttoptr i32 %v3_156e0 to i32*
  store i32 %v5_156dc, i32* %v4_156e0, align 4
  %v6_156e0 = add i32 %v3_156e0, 4
  %v7_156e0 = inttoptr i32 %v6_156e0 to i32*
  %v8_156e0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_156e0, i32* %v7_156e0, align 4
  %v9_156e0 = add i32 %v3_156e0, 8
  %v10_156e0 = inttoptr i32 %v9_156e0 to i32*
  %v11_156e0 = load i32, i32* @lr, align 4
  store i32 %v11_156e0, i32* %v10_156e0, align 4
  %v12_156e0 = add i32 %v3_156e0, 12
  store i32 %v12_156e0, i32* @r0, align 4
  %v3_156e4 = load i32, i32* %r2.global-to-local, align 4
  %v4_156e4 = add i32 %v3_156e4, -12
  store i32 %v4_156e4, i32* %r2.global-to-local, align 4
  %v6_156e4 = sub i32 11, %v3_156e4
  %v7_156e4 = and i32 %v6_156e4, %v3_156e4
  %v8_156e4 = icmp slt i32 %v7_156e4, 0
  store i1 %v8_156e4, i1* %cpsr_v.global-to-local, align 1
  %v9_156e4 = icmp slt i32 %v4_156e4, 0
  store i1 %v9_156e4, i1* %cpsr_n.global-to-local, align 1
  %v10_156e4 = icmp eq i32 %v3_156e4, 12
  store i1 %v10_156e4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_156dc, %bb129
  %v0_156ec.pre = phi i32 [ %v4_156e4, %bb129 ], [ %v0_156ec.pre147, %dec_label_pc_156dc ]
  %v3_156e098118 = phi i32 [ %v12_156e0, %bb129 ], [ %v3_156e0, %dec_label_pc_156dc ]
  %v1_156e8 = phi i1 [ %v8_156e4, %bb129 ], [ %v1_156e4, %dec_label_pc_156dc ]
  %v0_156e8 = phi i1 [ %v9_156e4, %bb129 ], [ %v0_156e4, %dec_label_pc_156dc ]
  %v2_156e8 = xor i1 %v1_156e8, %v0_156e8
  br i1 %v2_156e8, label %dec_label_pc_156ec, label %dec_label_pc_156dc

dec_label_pc_156ec:                               ; preds = %.thread117, %dec_label_pc_15698
  %v7_156fc = phi i32 [ %v0_156b092, %dec_label_pc_15698 ], [ %v3_156e098118, %.thread117 ]
  %v0_156ec = phi i32 [ %v2_15698, %dec_label_pc_15698 ], [ %v0_156ec.pre, %.thread117 ]
  %v2_156ec = add i32 %v0_156ec, 8
  store i32 %v2_156ec, i32* %r2.global-to-local, align 4
  %v4_156ec = sub i32 0, %v0_156ec
  %v5_156ec = and i32 %v2_156ec, %v4_156ec
  %v6_156ec = icmp slt i32 %v5_156ec, 0
  store i1 %v6_156ec, i1* %cpsr_v.global-to-local, align 1
  %v7_156ec = icmp slt i32 %v2_156ec, 0
  store i1 %v7_156ec, i1* %cpsr_n.global-to-local, align 1
  %v8_156ec = icmp eq i32 %v2_156ec, 0
  store i1 %v8_156ec, i1* %cpsr_z.global-to-local, align 1
  %v5_156f0 = icmp slt i32 %v0_156ec, -8
  br i1 %v5_156f0, label %bb131, label %dec_label_pc_156f4

dec_label_pc_156f4:                               ; preds = %dec_label_pc_156ec
  %v6_156f4 = add i32 %v0_156ec, 4
  store i32 %v6_156f4, i32* %r2.global-to-local, align 4
  %v8_156f4 = sub i32 -5, %v0_156ec
  %v9_156f4 = and i32 %v8_156f4, %v2_156ec
  %v10_156f4 = icmp slt i32 %v9_156f4, 0
  store i1 %v10_156f4, i1* %cpsr_v.global-to-local, align 1
  %v11_156f4 = icmp slt i32 %v6_156f4, 0
  store i1 %v11_156f4, i1* %cpsr_n.global-to-local, align 1
  %v12_156f4 = icmp eq i32 %v2_156ec, 4
  store i1 %v12_156f4, i1* %cpsr_z.global-to-local, align 1
  %v5_156f8 = icmp slt i32 %v2_156ec, 4
  %v6_156f8 = load i32, i32* @r1, align 4
  %v7_156f8 = inttoptr i32 %v6_156f8 to i32*
  %v8_156f8 = load i32, i32* %v7_156f8, align 4
  store i32 %v8_156f8, i32* %r3.global-to-local, align 4
  %v10_156f8 = add i32 %v6_156f8, 4
  br i1 %v5_156f8, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_156f4
  store i32 %v10_156f8, i32* @r1, align 4
  %v8_156fc = inttoptr i32 %v7_156fc to i32*
  store i32 %v8_156f8, i32* %v8_156fc, align 4
  %v9_156fc = load i32, i32* @r0, align 4
  %v10_156fc = add i32 %v9_156fc, 4
  store i32 %v10_156fc, i32* @r0, align 4
  %v0_1570c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_156f4
  %v10_15700 = inttoptr i32 %v10_156f8 to i32*
  %v11_15700 = load i32, i32* %v10_15700, align 4
  store i32 %v11_15700, i32* %ip.global-to-local, align 4
  %v12_15700 = add i32 %v6_156f8, 8
  store i32 %v12_15700, i32* @r1, align 4
  %v7_15704 = inttoptr i32 %v7_156fc to i32*
  store i32 %v8_156f8, i32* %v7_15704, align 4
  %v9_15704 = add i32 %v7_156fc, 4
  %v10_15704 = inttoptr i32 %v9_15704 to i32*
  %v11_15704 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_15704, i32* %v10_15704, align 4
  %v12_15704 = add i32 %v7_156fc, 8
  store i32 %v12_15704, i32* @r0, align 4
  %v6_15708 = load i32, i32* %r2.global-to-local, align 4
  %v7_15708 = add i32 %v6_15708, -4
  store i32 %v7_15708, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_156ec, %bb, %dec_label_pc_158b4, %dec_label_pc_15848, %dec_label_pc_157dc, %bb130
  %v2_1571c = phi i32 [ %v10_156fc, %.thread5 ], [ %v0_157ac75, %.thread11 ], [ %v7_156fc, %dec_label_pc_156ec ], [ %v1_15670, %bb ], [ %v2_1571c113, %dec_label_pc_158b4 ], [ %v2_1571c112, %dec_label_pc_15848 ], [ %v2_1571c111, %dec_label_pc_157dc ], [ %v12_15704, %bb130 ]
  %v0_1570c = phi i32 [ %v0_1570c.pre, %.thread5 ], [ %v2_15754, %.thread11 ], [ %v2_156ec, %dec_label_pc_156ec ], [ %v2_15680, %bb ], [ %v0_1570c109, %dec_label_pc_158b4 ], [ %v0_1570c108, %dec_label_pc_15848 ], [ %v0_1570c107, %dec_label_pc_157dc ], [ %v7_15708, %bb130 ]
  %v1_1570c = add i32 %v0_1570c, 4
  store i32 %v1_1570c, i32* %r2.global-to-local, align 4
  %v3_1570c = sub i32 0, %v0_1570c
  %v4_1570c = and i32 %v1_1570c, %v3_1570c
  %v5_1570c = icmp slt i32 %v4_1570c, 0
  store i1 %v5_1570c, i1* %cpsr_v.global-to-local, align 1
  %v6_1570c = icmp slt i32 %v1_1570c, 0
  store i1 %v6_1570c, i1* %cpsr_n.global-to-local, align 1
  %v7_1570c = icmp eq i32 %v1_1570c, 0
  store i1 %v7_1570c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1570c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_15710 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_15710, i32* %r0.global-to-local, align 4
  ret i32 %v3_15710

bb133:                                            ; preds = %bb131
  %v1_15714 = add i32 %v0_1570c, 2
  %v3_15714 = sub i32 -3, %v0_1570c
  %v4_15714 = and i32 %v3_15714, %v1_1570c
  %v5_15714 = icmp slt i32 %v4_15714, 0
  store i1 %v5_15714, i1* %cpsr_v.global-to-local, align 1
  %v6_15714 = icmp slt i32 %v1_15714, 0
  store i1 %v6_15714, i1* %cpsr_n.global-to-local, align 1
  %v7_15714 = icmp eq i32 %v1_1570c, 2
  store i1 %v7_15714, i1* %cpsr_z.global-to-local, align 1
  %v0_15718 = load i32, i32* @r1, align 4
  %v1_15718 = inttoptr i32 %v0_15718 to i8*
  %v2_15718 = load i8, i8* %v1_15718, align 1
  %v3_15718 = zext i8 %v2_15718 to i32
  store i32 %v3_15718, i32* %r3.global-to-local, align 4
  %v5_15718 = add i32 %v0_15718, 1
  store i32 %v5_15718, i32* %r1.global-to-local, align 4
  %v3_1571c = inttoptr i32 %v2_1571c to i8*
  store i8 %v2_15718, i8* %v3_1571c, align 1
  %v4_1571c = load i32, i32* @r0, align 4
  %v5_1571c = add i32 %v4_1571c, 1
  store i32 %v5_1571c, i32* %r0.global-to-local, align 4
  %v0_15720 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15720 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15720 = xor i1 %v0_15720, %v1_15720
  br i1 %v2_15720, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_15720 = load i32, i32* %r1.global-to-local, align 4
  %v4_15720 = inttoptr i32 %v3_15720 to i8*
  %v5_15720 = load i8, i8* %v4_15720, align 1
  %v6_15720 = zext i8 %v5_15720 to i32
  store i32 %v6_15720, i32* %r3.global-to-local, align 4
  %v8_15720 = add i32 %v3_15720, 1
  store i32 %v8_15720, i32* %r1.global-to-local, align 4
  %v6_15724 = inttoptr i32 %v5_1571c to i8*
  store i8 %v5_15720, i8* %v6_15724, align 1
  %v7_15724 = load i32, i32* %r0.global-to-local, align 4
  %v8_15724 = add i32 %v7_15724, 1
  store i32 %v8_15724, i32* %r0.global-to-local, align 4
  %v1_15728.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15728.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_1572c = phi i32 [ %v8_15724, %bb134 ], [ %v5_1571c, %bb133 ]
  %v2_1572c = phi i1 [ %v2_15728.pre, %bb134 ], [ %v1_15720, %bb133 ]
  %v1_1572c = phi i1 [ %v1_15728.pre, %bb134 ], [ %v0_15720, %bb133 ]
  %v0_15728 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15728 = xor i1 %v2_1572c, %v1_1572c
  %v4_15728 = or i1 %v0_15728, %v3_15728
  br i1 %v4_15728, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_15728 = load i32, i32* %r1.global-to-local, align 4
  %v6_15728 = inttoptr i32 %v5_15728 to i8*
  %v7_15728 = load i8, i8* %v6_15728, align 1
  %v8_15728 = zext i8 %v7_15728 to i32
  store i32 %v8_15728, i32* %r3.global-to-local, align 4
  %v10_15728 = add i32 %v5_15728, 1
  store i32 %v10_15728, i32* %r1.global-to-local, align 4
  %v8_1572c = inttoptr i32 %v7_1572c to i8*
  store i8 %v7_15728, i8* %v8_1572c, align 1
  %v9_1572c = load i32, i32* %r0.global-to-local, align 4
  %v10_1572c = add i32 %v9_1572c, 1
  store i32 %v10_1572c, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_15730 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15730, i32* %r0.global-to-local, align 4
  ret i32 %v2_15730

dec_label_pc_15734:                               ; preds = %dec_label_pc_15688
  %v1_15734 = sub nsw i32 4, %v1_15688
  store i32 %v1_15734, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_15738 = icmp ult i32 %v1_15734, 2
  store i1 %v8_15738, i1* %cpsr_n.global-to-local, align 1
  %v9_15738 = icmp eq i32 %v1_15734, 2
  store i1 %v9_15738, i1* %cpsr_z.global-to-local, align 1
  %v1_1573c = inttoptr i32 %v0_15670 to i8*
  %v2_1573c = load i8, i8* %v1_1573c, align 1
  %v3_1573c = zext i8 %v2_1573c to i32
  store i32 %v3_1573c, i32* %r3.global-to-local, align 4
  %v5_1573c = add i32 %v0_15670, 1
  store i32 %v5_1573c, i32* @r1, align 4
  %v3_15740 = inttoptr i32 %v1_15670 to i8*
  store i8 %v2_1573c, i8* %v3_15740, align 1
  %v4_15740 = load i32, i32* @r0, align 4
  %v5_15740 = add i32 %v4_15740, 1
  store i32 %v5_15740, i32* @r0, align 4
  br i1 %v8_15738, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_15734
  %v6_15744 = load i32, i32* @r1, align 4
  %v7_15744 = inttoptr i32 %v6_15744 to i8*
  %v8_15744 = load i8, i8* %v7_15744, align 1
  %v9_15744 = zext i8 %v8_15744 to i32
  store i32 %v9_15744, i32* %r3.global-to-local, align 4
  %v11_15744 = add i32 %v6_15744, 1
  store i32 %v11_15744, i32* @r1, align 4
  %v9_15748 = inttoptr i32 %v5_15740 to i8*
  store i8 %v8_15744, i8* %v9_15748, align 1
  %v10_15748 = load i32, i32* @r0, align 4
  %v11_15748 = add i32 %v10_15748, 1
  store i32 %v11_15748, i32* @r0, align 4
  br i1 %v9_15738, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_1574c = load i32, i32* @r1, align 4
  %v9_1574c = inttoptr i32 %v8_1574c to i8*
  %v10_1574c = load i8, i8* %v9_1574c, align 1
  %v11_1574c = zext i8 %v10_1574c to i32
  store i32 %v11_1574c, i32* %r3.global-to-local, align 4
  %v13_1574c = add i32 %v8_1574c, 1
  store i32 %v13_1574c, i32* @r1, align 4
  %v11_15750 = inttoptr i32 %v11_15748 to i8*
  store i8 %v10_1574c, i8* %v11_15750, align 1
  %v12_15750 = load i32, i32* @r0, align 4
  %v13_15750 = add i32 %v12_15750, 1
  store i32 %v13_15750, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_15734, %bb137
  %v0_157ac75 = phi i32 [ %v11_15748, %bb136 ], [ %v5_15740, %dec_label_pc_15734 ], [ %v13_15750, %bb137 ]
  %v0_15754 = load i32, i32* %r2.global-to-local, align 4
  %v1_15754 = load i32, i32* %ip.global-to-local, align 4
  %v2_15754 = sub i32 %v0_15754, %v1_15754
  store i32 %v2_15754, i32* %r2.global-to-local, align 4
  %v4_15754 = xor i32 %v1_15754, %v0_15754
  %v5_15754 = xor i32 %v2_15754, %v0_15754
  %v6_15754 = and i32 %v5_15754, %v4_15754
  %v7_15754 = icmp slt i32 %v6_15754, 0
  store i1 %v7_15754, i1* %cpsr_v.global-to-local, align 1
  %v8_15754 = icmp slt i32 %v2_15754, 0
  store i1 %v8_15754, i1* %cpsr_n.global-to-local, align 1
  %v9_15754 = icmp eq i32 %v0_15754, %v1_15754
  store i1 %v9_15754, i1* %cpsr_z.global-to-local, align 1
  %v5_15758 = icmp slt i32 %v0_15754, %v1_15754
  br i1 %v5_15758, label %bb131, label %dec_label_pc_1575c

dec_label_pc_1575c:                               ; preds = %.thread11
  %v0_1575c = load i32, i32* @r1, align 4
  %v1_1575c = urem i32 %v0_1575c, 4
  store i32 %v1_1575c, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1575c = icmp eq i32 %v1_1575c, 0
  store i1 %v2_1575c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_1575c to i2
  br i1 %v2_1575c, label %dec_label_pc_15698, label %dec_label_pc_15764

dec_label_pc_15764:                               ; preds = %dec_label_pc_15690, %dec_label_pc_1575c
  %v0_157ac74 = phi i32 [ %v1_15670, %dec_label_pc_15690 ], [ %v0_157ac75, %dec_label_pc_1575c ]
  %v0_15858 = phi i32 [ %v2_15680, %dec_label_pc_15690 ], [ %v2_15754, %dec_label_pc_1575c ]
  %v0_1576c.off0 = phi i2 [ %extract.t, %dec_label_pc_15690 ], [ %extract.t123, %dec_label_pc_1575c ]
  %v0_15764 = phi i32 [ %v0_15670, %dec_label_pc_15690 ], [ %v0_1575c, %dec_label_pc_1575c ]
  %v1_15764 = and i32 %v0_15764, -4
  store i32 %v1_15764, i32* %r1.global-to-local, align 4
  %v1_15768 = inttoptr i32 %v1_15764 to i32*
  %v2_15768 = load i32, i32* %v1_15768, align 4
  store i32 %v2_15768, i32* @lr, align 4
  %v4_15768 = add i32 %v1_15764, 4
  store i32 %v4_15768, i32* %r1.global-to-local, align 4
  %v2_15850 = add i32 %v0_15858, -12
  %v4_15850 = sub i32 11, %v0_15858
  %v5_15850 = and i32 %v4_15850, %v0_15858
  %v6_15850 = icmp slt i32 %v5_15850, 0
  store i1 %v6_15850, i1* %cpsr_v.global-to-local, align 1
  %v7_15850 = icmp slt i32 %v2_15850, 0
  store i1 %v7_15850, i1* %cpsr_n.global-to-local, align 1
  %v8_15850 = icmp eq i32 %v0_15858, 12
  store i1 %v8_15850, i1* %cpsr_z.global-to-local, align 1
  %v5_15854 = icmp slt i32 %v0_15858, 12
  switch i2 %v0_1576c.off0, label %dec_label_pc_15778 [
    i2 -1, label %dec_label_pc_15850
    i2 -2, label %dec_label_pc_157e4
  ]

dec_label_pc_15778:                               ; preds = %dec_label_pc_15764
  br i1 %v5_15854, label %dec_label_pc_157c4, label %dec_label_pc_15780

dec_label_pc_15780:                               ; preds = %dec_label_pc_15778
  store i32 %v2_15850, i32* %r2.global-to-local, align 4
  %v3_15784 = load i32, i32* @r4, align 4
  store i32 %v3_15784, i32* %stack_var_-16, align 4
  %v6_15784 = load i32, i32* @r5, align 4
  store i32 %v6_15784, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15788

dec_label_pc_15788:                               ; preds = %dec_label_pc_15788.dec_label_pc_15788_crit_edge, %dec_label_pc_15780
  %v0_157ac = phi i32 [ %v12_157ac, %dec_label_pc_15788.dec_label_pc_15788_crit_edge ], [ %v0_157ac74, %dec_label_pc_15780 ]
  %v0_1578c = phi i32 [ %v0_1578c.pre, %dec_label_pc_15788.dec_label_pc_15788_crit_edge ], [ %v4_15768, %dec_label_pc_15780 ]
  %v0_15788 = phi i32 [ %v0_15788.pre, %dec_label_pc_15788.dec_label_pc_15788_crit_edge ], [ %v2_15768, %dec_label_pc_15780 ]
  %v3_15788 = udiv i32 %v0_15788, 256
  store i32 %v3_15788, i32* %r3.global-to-local, align 4
  %v1_1578c = inttoptr i32 %v0_1578c to i32*
  %v2_1578c = load i32, i32* %v1_1578c, align 4
  store i32 %v2_1578c, i32* %r4.global-to-local, align 4
  %v3_1578c = add i32 %v0_1578c, 4
  %v4_1578c = inttoptr i32 %v3_1578c to i32*
  %v5_1578c = load i32, i32* %v4_1578c, align 4
  store i32 %v5_1578c, i32* %r5.global-to-local, align 4
  %v6_1578c = add i32 %v0_1578c, 8
  %v7_1578c = inttoptr i32 %v6_1578c to i32*
  %v8_1578c = load i32, i32* %v7_1578c, align 4
  store i32 %v8_1578c, i32* %ip.global-to-local, align 4
  %v9_1578c = add i32 %v0_1578c, 12
  %v10_1578c = inttoptr i32 %v9_1578c to i32*
  %v11_1578c = load i32, i32* %v10_1578c, align 4
  store i32 %v11_1578c, i32* @lr, align 4
  %v12_1578c = add i32 %v0_1578c, 16
  store i32 %v12_1578c, i32* %r1.global-to-local, align 4
  %v4_15790 = mul i32 %v2_1578c, 16777216
  %v5_15790 = or i32 %v4_15790, %v3_15788
  store i32 %v5_15790, i32* %r3.global-to-local, align 4
  %v3_15794 = udiv i32 %v2_1578c, 256
  %v4_15798 = mul i32 %v5_1578c, 16777216
  %v5_15798 = or i32 %v4_15798, %v3_15794
  store i32 %v5_15798, i32* %r4.global-to-local, align 4
  %v3_1579c = udiv i32 %v5_1578c, 256
  %v4_157a0 = mul i32 %v8_1578c, 16777216
  %v5_157a0 = or i32 %v4_157a0, %v3_1579c
  store i32 %v5_157a0, i32* %r5.global-to-local, align 4
  %v3_157a4 = udiv i32 %v8_1578c, 256
  %v4_157a8 = mul i32 %v11_1578c, 16777216
  %v5_157a8 = or i32 %v4_157a8, %v3_157a4
  store i32 %v5_157a8, i32* %ip.global-to-local, align 4
  %v1_157ac = inttoptr i32 %v0_157ac to i32*
  store i32 %v5_15790, i32* %v1_157ac, align 4
  %v3_157ac = add i32 %v0_157ac, 4
  %v4_157ac = inttoptr i32 %v3_157ac to i32*
  %v5_157ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_157ac, i32* %v4_157ac, align 4
  %v6_157ac = add i32 %v0_157ac, 8
  %v7_157ac = inttoptr i32 %v6_157ac to i32*
  %v8_157ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_157ac, i32* %v7_157ac, align 4
  %v9_157ac = add i32 %v0_157ac, 12
  %v10_157ac = inttoptr i32 %v9_157ac to i32*
  %v11_157ac = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_157ac, i32* %v10_157ac, align 4
  %v12_157ac = add i32 %v0_157ac, 16
  store i32 %v12_157ac, i32* @r0, align 4
  %v0_157b0 = load i32, i32* %r2.global-to-local, align 4
  %v2_157b0 = add i32 %v0_157b0, -16
  store i32 %v2_157b0, i32* %r2.global-to-local, align 4
  %v6_157b4 = icmp slt i32 %v0_157b0, 16
  br i1 %v6_157b4, label %dec_label_pc_157b8, label %dec_label_pc_15788.dec_label_pc_15788_crit_edge

dec_label_pc_15788.dec_label_pc_15788_crit_edge:  ; preds = %dec_label_pc_15788
  %v0_15788.pre = load i32, i32* @lr, align 4
  %v0_1578c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15788

dec_label_pc_157b8:                               ; preds = %dec_label_pc_15788
  %v2_157b8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_157b8, i32* @r4, align 4
  %v5_157b8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_157b8, i32* @r5, align 4
  %v2_157bc = add i32 %v0_157b0, -4
  store i32 %v2_157bc, i32* %r2.global-to-local, align 4
  %v4_157bc = add i32 %v0_157b0, 2147483632
  %v5_157bc = and i32 %v2_157bc, %v4_157bc
  %v6_157bc = icmp slt i32 %v5_157bc, 0
  store i1 %v6_157bc, i1* %cpsr_v.global-to-local, align 1
  %v7_157bc = icmp slt i32 %v2_157bc, 0
  store i1 %v7_157bc, i1* %cpsr_n.global-to-local, align 1
  %v8_157bc = icmp eq i32 %v2_157bc, 0
  store i1 %v8_157bc, i1* %cpsr_z.global-to-local, align 1
  %v5_157c0 = icmp slt i32 %v2_157b0, -12
  br i1 %v5_157c0, label %dec_label_pc_157dc, label %dec_label_pc_157c4

dec_label_pc_157c4:                               ; preds = %dec_label_pc_157b8, %dec_label_pc_15778, %dec_label_pc_157c4
  %v1_157d0 = phi i32 [ %v4_157d0, %dec_label_pc_157c4 ], [ %v12_157ac, %dec_label_pc_157b8 ], [ %v0_157ac74, %dec_label_pc_15778 ]
  %v0_157c4 = load i32, i32* @lr, align 4
  %v3_157c4 = udiv i32 %v0_157c4, 256
  store i32 %v3_157c4, i32* %ip.global-to-local, align 4
  %v0_157c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_157c8 = inttoptr i32 %v0_157c8 to i32*
  %v2_157c8 = load i32, i32* %v1_157c8, align 4
  store i32 %v2_157c8, i32* @lr, align 4
  %v4_157c8 = add i32 %v0_157c8, 4
  store i32 %v4_157c8, i32* %r1.global-to-local, align 4
  %v4_157cc = mul i32 %v2_157c8, 16777216
  %v5_157cc = or i32 %v4_157cc, %v3_157c4
  store i32 %v5_157cc, i32* %ip.global-to-local, align 4
  %v2_157d0 = inttoptr i32 %v1_157d0 to i32*
  store i32 %v5_157cc, i32* %v2_157d0, align 4
  %v3_157d0 = load i32, i32* @r0, align 4
  %v4_157d0 = add i32 %v3_157d0, 4
  store i32 %v4_157d0, i32* @r0, align 4
  %v0_157d4 = load i32, i32* %r2.global-to-local, align 4
  %v2_157d4 = add i32 %v0_157d4, -4
  store i32 %v2_157d4, i32* %r2.global-to-local, align 4
  %v6_157d8 = icmp slt i32 %v0_157d4, 4
  br i1 %v6_157d8, label %dec_label_pc_157dc.loopexit, label %dec_label_pc_157c4

dec_label_pc_157dc.loopexit:                      ; preds = %dec_label_pc_157c4
  %v4_157d4 = sub i32 3, %v0_157d4
  %v5_157d4 = and i32 %v4_157d4, %v0_157d4
  %v6_157d4 = icmp slt i32 %v5_157d4, 0
  %v7_157d4 = icmp slt i32 %v2_157d4, 0
  store i1 %v6_157d4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_157d4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_157dc

dec_label_pc_157dc:                               ; preds = %dec_label_pc_157dc.loopexit, %dec_label_pc_157b8
  %v2_1571c111 = phi i32 [ %v4_157d0, %dec_label_pc_157dc.loopexit ], [ %v12_157ac, %dec_label_pc_157b8 ]
  %v0_1570c107 = phi i32 [ %v2_157d4, %dec_label_pc_157dc.loopexit ], [ %v2_157bc, %dec_label_pc_157b8 ]
  %v0_157dc = load i32, i32* %r1.global-to-local, align 4
  %v1_157dc = add i32 %v0_157dc, -3
  store i32 %v1_157dc, i32* @r1, align 4
  br label %bb131

dec_label_pc_157e4:                               ; preds = %dec_label_pc_15764
  br i1 %v5_15854, label %dec_label_pc_15830, label %dec_label_pc_157ec

dec_label_pc_157ec:                               ; preds = %dec_label_pc_157e4
  store i32 %v2_15850, i32* %r2.global-to-local, align 4
  %v3_157f0 = load i32, i32* @r4, align 4
  store i32 %v3_157f0, i32* %stack_var_-16, align 4
  %v6_157f0 = load i32, i32* @r5, align 4
  store i32 %v6_157f0, i32* %stack_var_-12, align 4
  br label %dec_label_pc_157f4

dec_label_pc_157f4:                               ; preds = %dec_label_pc_157f4.dec_label_pc_157f4_crit_edge, %dec_label_pc_157ec
  %v0_15818 = phi i32 [ %v12_15818, %dec_label_pc_157f4.dec_label_pc_157f4_crit_edge ], [ %v0_157ac74, %dec_label_pc_157ec ]
  %v0_157f8 = phi i32 [ %v0_157f8.pre, %dec_label_pc_157f4.dec_label_pc_157f4_crit_edge ], [ %v4_15768, %dec_label_pc_157ec ]
  %v0_157f4 = phi i32 [ %v0_157f4.pre, %dec_label_pc_157f4.dec_label_pc_157f4_crit_edge ], [ %v2_15768, %dec_label_pc_157ec ]
  %v3_157f4 = udiv i32 %v0_157f4, 65536
  store i32 %v3_157f4, i32* %r3.global-to-local, align 4
  %v1_157f8 = inttoptr i32 %v0_157f8 to i32*
  %v2_157f8 = load i32, i32* %v1_157f8, align 4
  store i32 %v2_157f8, i32* %r4.global-to-local, align 4
  %v3_157f8 = add i32 %v0_157f8, 4
  %v4_157f8 = inttoptr i32 %v3_157f8 to i32*
  %v5_157f8 = load i32, i32* %v4_157f8, align 4
  store i32 %v5_157f8, i32* %r5.global-to-local, align 4
  %v6_157f8 = add i32 %v0_157f8, 8
  %v7_157f8 = inttoptr i32 %v6_157f8 to i32*
  %v8_157f8 = load i32, i32* %v7_157f8, align 4
  store i32 %v8_157f8, i32* %ip.global-to-local, align 4
  %v9_157f8 = add i32 %v0_157f8, 12
  %v10_157f8 = inttoptr i32 %v9_157f8 to i32*
  %v11_157f8 = load i32, i32* %v10_157f8, align 4
  store i32 %v11_157f8, i32* @lr, align 4
  %v12_157f8 = add i32 %v0_157f8, 16
  store i32 %v12_157f8, i32* %r1.global-to-local, align 4
  %v4_157fc = mul i32 %v2_157f8, 65536
  %v5_157fc = or i32 %v4_157fc, %v3_157f4
  store i32 %v5_157fc, i32* %r3.global-to-local, align 4
  %v3_15800 = udiv i32 %v2_157f8, 65536
  %v4_15804 = mul i32 %v5_157f8, 65536
  %v5_15804 = or i32 %v4_15804, %v3_15800
  store i32 %v5_15804, i32* %r4.global-to-local, align 4
  %v3_15808 = udiv i32 %v5_157f8, 65536
  %v4_1580c = mul i32 %v8_157f8, 65536
  %v5_1580c = or i32 %v4_1580c, %v3_15808
  store i32 %v5_1580c, i32* %r5.global-to-local, align 4
  %v3_15810 = udiv i32 %v8_157f8, 65536
  %v4_15814 = mul i32 %v11_157f8, 65536
  %v5_15814 = or i32 %v4_15814, %v3_15810
  store i32 %v5_15814, i32* %ip.global-to-local, align 4
  %v1_15818 = inttoptr i32 %v0_15818 to i32*
  store i32 %v5_157fc, i32* %v1_15818, align 4
  %v3_15818 = add i32 %v0_15818, 4
  %v4_15818 = inttoptr i32 %v3_15818 to i32*
  %v5_15818 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15818, i32* %v4_15818, align 4
  %v6_15818 = add i32 %v0_15818, 8
  %v7_15818 = inttoptr i32 %v6_15818 to i32*
  %v8_15818 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15818, i32* %v7_15818, align 4
  %v9_15818 = add i32 %v0_15818, 12
  %v10_15818 = inttoptr i32 %v9_15818 to i32*
  %v11_15818 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_15818, i32* %v10_15818, align 4
  %v12_15818 = add i32 %v0_15818, 16
  store i32 %v12_15818, i32* @r0, align 4
  %v0_1581c = load i32, i32* %r2.global-to-local, align 4
  %v2_1581c = add i32 %v0_1581c, -16
  store i32 %v2_1581c, i32* %r2.global-to-local, align 4
  %v6_15820 = icmp slt i32 %v0_1581c, 16
  br i1 %v6_15820, label %dec_label_pc_15824, label %dec_label_pc_157f4.dec_label_pc_157f4_crit_edge

dec_label_pc_157f4.dec_label_pc_157f4_crit_edge:  ; preds = %dec_label_pc_157f4
  %v0_157f4.pre = load i32, i32* @lr, align 4
  %v0_157f8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_157f4

dec_label_pc_15824:                               ; preds = %dec_label_pc_157f4
  %v2_15824 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15824, i32* @r4, align 4
  %v5_15824 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15824, i32* @r5, align 4
  %v2_15828 = add i32 %v0_1581c, -4
  store i32 %v2_15828, i32* %r2.global-to-local, align 4
  %v4_15828 = add i32 %v0_1581c, 2147483632
  %v5_15828 = and i32 %v2_15828, %v4_15828
  %v6_15828 = icmp slt i32 %v5_15828, 0
  store i1 %v6_15828, i1* %cpsr_v.global-to-local, align 1
  %v7_15828 = icmp slt i32 %v2_15828, 0
  store i1 %v7_15828, i1* %cpsr_n.global-to-local, align 1
  %v8_15828 = icmp eq i32 %v2_15828, 0
  store i1 %v8_15828, i1* %cpsr_z.global-to-local, align 1
  %v5_1582c = icmp slt i32 %v2_1581c, -12
  br i1 %v5_1582c, label %dec_label_pc_15848, label %dec_label_pc_15830

dec_label_pc_15830:                               ; preds = %dec_label_pc_15824, %dec_label_pc_157e4, %dec_label_pc_15830
  %v1_1583c = phi i32 [ %v4_1583c, %dec_label_pc_15830 ], [ %v12_15818, %dec_label_pc_15824 ], [ %v0_157ac74, %dec_label_pc_157e4 ]
  %v0_15830 = load i32, i32* @lr, align 4
  %v3_15830 = udiv i32 %v0_15830, 65536
  store i32 %v3_15830, i32* %ip.global-to-local, align 4
  %v0_15834 = load i32, i32* %r1.global-to-local, align 4
  %v1_15834 = inttoptr i32 %v0_15834 to i32*
  %v2_15834 = load i32, i32* %v1_15834, align 4
  store i32 %v2_15834, i32* @lr, align 4
  %v4_15834 = add i32 %v0_15834, 4
  store i32 %v4_15834, i32* %r1.global-to-local, align 4
  %v4_15838 = mul i32 %v2_15834, 65536
  %v5_15838 = or i32 %v4_15838, %v3_15830
  store i32 %v5_15838, i32* %ip.global-to-local, align 4
  %v2_1583c = inttoptr i32 %v1_1583c to i32*
  store i32 %v5_15838, i32* %v2_1583c, align 4
  %v3_1583c = load i32, i32* @r0, align 4
  %v4_1583c = add i32 %v3_1583c, 4
  store i32 %v4_1583c, i32* @r0, align 4
  %v0_15840 = load i32, i32* %r2.global-to-local, align 4
  %v2_15840 = add i32 %v0_15840, -4
  store i32 %v2_15840, i32* %r2.global-to-local, align 4
  %v6_15844 = icmp slt i32 %v0_15840, 4
  br i1 %v6_15844, label %dec_label_pc_15848.loopexit, label %dec_label_pc_15830

dec_label_pc_15848.loopexit:                      ; preds = %dec_label_pc_15830
  %v4_15840 = sub i32 3, %v0_15840
  %v5_15840 = and i32 %v4_15840, %v0_15840
  %v6_15840 = icmp slt i32 %v5_15840, 0
  %v7_15840 = icmp slt i32 %v2_15840, 0
  store i1 %v6_15840, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15840, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15848

dec_label_pc_15848:                               ; preds = %dec_label_pc_15848.loopexit, %dec_label_pc_15824
  %v2_1571c112 = phi i32 [ %v4_1583c, %dec_label_pc_15848.loopexit ], [ %v12_15818, %dec_label_pc_15824 ]
  %v0_1570c108 = phi i32 [ %v2_15840, %dec_label_pc_15848.loopexit ], [ %v2_15828, %dec_label_pc_15824 ]
  %v0_15848 = load i32, i32* %r1.global-to-local, align 4
  %v1_15848 = add i32 %v0_15848, -2
  store i32 %v1_15848, i32* @r1, align 4
  br label %bb131

dec_label_pc_15850:                               ; preds = %dec_label_pc_15764
  br i1 %v5_15854, label %dec_label_pc_1589c, label %dec_label_pc_15858

dec_label_pc_15858:                               ; preds = %dec_label_pc_15850
  store i32 %v2_15850, i32* %r2.global-to-local, align 4
  %v3_1585c = load i32, i32* @r4, align 4
  store i32 %v3_1585c, i32* %stack_var_-16, align 4
  %v6_1585c = load i32, i32* @r5, align 4
  store i32 %v6_1585c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15860

dec_label_pc_15860:                               ; preds = %dec_label_pc_15860.dec_label_pc_15860_crit_edge, %dec_label_pc_15858
  %v0_15884 = phi i32 [ %v12_15884, %dec_label_pc_15860.dec_label_pc_15860_crit_edge ], [ %v0_157ac74, %dec_label_pc_15858 ]
  %v0_15864 = phi i32 [ %v0_15864.pre, %dec_label_pc_15860.dec_label_pc_15860_crit_edge ], [ %v4_15768, %dec_label_pc_15858 ]
  %v0_15860 = phi i32 [ %v0_15860.pre, %dec_label_pc_15860.dec_label_pc_15860_crit_edge ], [ %v2_15768, %dec_label_pc_15858 ]
  %v3_15860 = udiv i32 %v0_15860, 16777216
  store i32 %v3_15860, i32* %r3.global-to-local, align 4
  %v1_15864 = inttoptr i32 %v0_15864 to i32*
  %v2_15864 = load i32, i32* %v1_15864, align 4
  store i32 %v2_15864, i32* %r4.global-to-local, align 4
  %v3_15864 = add i32 %v0_15864, 4
  %v4_15864 = inttoptr i32 %v3_15864 to i32*
  %v5_15864 = load i32, i32* %v4_15864, align 4
  store i32 %v5_15864, i32* %r5.global-to-local, align 4
  %v6_15864 = add i32 %v0_15864, 8
  %v7_15864 = inttoptr i32 %v6_15864 to i32*
  %v8_15864 = load i32, i32* %v7_15864, align 4
  store i32 %v8_15864, i32* %ip.global-to-local, align 4
  %v9_15864 = add i32 %v0_15864, 12
  %v10_15864 = inttoptr i32 %v9_15864 to i32*
  %v11_15864 = load i32, i32* %v10_15864, align 4
  store i32 %v11_15864, i32* @lr, align 4
  %v12_15864 = add i32 %v0_15864, 16
  store i32 %v12_15864, i32* %r1.global-to-local, align 4
  %v4_15868 = mul i32 %v2_15864, 256
  %v5_15868 = or i32 %v4_15868, %v3_15860
  store i32 %v5_15868, i32* %r3.global-to-local, align 4
  %v3_1586c = udiv i32 %v2_15864, 16777216
  %v4_15870 = mul i32 %v5_15864, 256
  %v5_15870 = or i32 %v4_15870, %v3_1586c
  store i32 %v5_15870, i32* %r4.global-to-local, align 4
  %v3_15874 = udiv i32 %v5_15864, 16777216
  %v4_15878 = mul i32 %v8_15864, 256
  %v5_15878 = or i32 %v4_15878, %v3_15874
  store i32 %v5_15878, i32* %r5.global-to-local, align 4
  %v3_1587c = udiv i32 %v8_15864, 16777216
  %v4_15880 = mul i32 %v11_15864, 256
  %v5_15880 = or i32 %v4_15880, %v3_1587c
  store i32 %v5_15880, i32* %ip.global-to-local, align 4
  %v1_15884 = inttoptr i32 %v0_15884 to i32*
  store i32 %v5_15868, i32* %v1_15884, align 4
  %v3_15884 = add i32 %v0_15884, 4
  %v4_15884 = inttoptr i32 %v3_15884 to i32*
  %v5_15884 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15884, i32* %v4_15884, align 4
  %v6_15884 = add i32 %v0_15884, 8
  %v7_15884 = inttoptr i32 %v6_15884 to i32*
  %v8_15884 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15884, i32* %v7_15884, align 4
  %v9_15884 = add i32 %v0_15884, 12
  %v10_15884 = inttoptr i32 %v9_15884 to i32*
  %v11_15884 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_15884, i32* %v10_15884, align 4
  %v12_15884 = add i32 %v0_15884, 16
  store i32 %v12_15884, i32* @r0, align 4
  %v0_15888 = load i32, i32* %r2.global-to-local, align 4
  %v2_15888 = add i32 %v0_15888, -16
  store i32 %v2_15888, i32* %r2.global-to-local, align 4
  %v6_1588c = icmp slt i32 %v0_15888, 16
  br i1 %v6_1588c, label %dec_label_pc_15890, label %dec_label_pc_15860.dec_label_pc_15860_crit_edge

dec_label_pc_15860.dec_label_pc_15860_crit_edge:  ; preds = %dec_label_pc_15860
  %v0_15860.pre = load i32, i32* @lr, align 4
  %v0_15864.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15860

dec_label_pc_15890:                               ; preds = %dec_label_pc_15860
  %v2_15890 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15890, i32* @r4, align 4
  %v5_15890 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15890, i32* @r5, align 4
  %v2_15894 = add i32 %v0_15888, -4
  store i32 %v2_15894, i32* %r2.global-to-local, align 4
  %v4_15894 = add i32 %v0_15888, 2147483632
  %v5_15894 = and i32 %v2_15894, %v4_15894
  %v6_15894 = icmp slt i32 %v5_15894, 0
  store i1 %v6_15894, i1* %cpsr_v.global-to-local, align 1
  %v7_15894 = icmp slt i32 %v2_15894, 0
  store i1 %v7_15894, i1* %cpsr_n.global-to-local, align 1
  %v8_15894 = icmp eq i32 %v2_15894, 0
  store i1 %v8_15894, i1* %cpsr_z.global-to-local, align 1
  %v5_15898 = icmp slt i32 %v2_15888, -12
  br i1 %v5_15898, label %dec_label_pc_158b4, label %dec_label_pc_1589c

dec_label_pc_1589c:                               ; preds = %dec_label_pc_15890, %dec_label_pc_15850, %dec_label_pc_1589c
  %v1_158a8 = phi i32 [ %v4_158a8, %dec_label_pc_1589c ], [ %v12_15884, %dec_label_pc_15890 ], [ %v0_157ac74, %dec_label_pc_15850 ]
  %v0_1589c = load i32, i32* @lr, align 4
  %v3_1589c = udiv i32 %v0_1589c, 16777216
  store i32 %v3_1589c, i32* %ip.global-to-local, align 4
  %v0_158a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_158a0 = inttoptr i32 %v0_158a0 to i32*
  %v2_158a0 = load i32, i32* %v1_158a0, align 4
  store i32 %v2_158a0, i32* @lr, align 4
  %v4_158a0 = add i32 %v0_158a0, 4
  store i32 %v4_158a0, i32* %r1.global-to-local, align 4
  %v4_158a4 = mul i32 %v2_158a0, 256
  %v5_158a4 = or i32 %v4_158a4, %v3_1589c
  store i32 %v5_158a4, i32* %ip.global-to-local, align 4
  %v2_158a8 = inttoptr i32 %v1_158a8 to i32*
  store i32 %v5_158a4, i32* %v2_158a8, align 4
  %v3_158a8 = load i32, i32* @r0, align 4
  %v4_158a8 = add i32 %v3_158a8, 4
  store i32 %v4_158a8, i32* @r0, align 4
  %v0_158ac = load i32, i32* %r2.global-to-local, align 4
  %v2_158ac = add i32 %v0_158ac, -4
  store i32 %v2_158ac, i32* %r2.global-to-local, align 4
  %v6_158b0 = icmp slt i32 %v0_158ac, 4
  br i1 %v6_158b0, label %dec_label_pc_158b4.loopexit, label %dec_label_pc_1589c

dec_label_pc_158b4.loopexit:                      ; preds = %dec_label_pc_1589c
  %v4_158ac = sub i32 3, %v0_158ac
  %v5_158ac = and i32 %v4_158ac, %v0_158ac
  %v6_158ac = icmp slt i32 %v5_158ac, 0
  %v7_158ac = icmp slt i32 %v2_158ac, 0
  store i1 %v6_158ac, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_158ac, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_158b4

dec_label_pc_158b4:                               ; preds = %dec_label_pc_158b4.loopexit, %dec_label_pc_15890
  %v2_1571c113 = phi i32 [ %v4_158a8, %dec_label_pc_158b4.loopexit ], [ %v12_15884, %dec_label_pc_15890 ]
  %v0_1570c109 = phi i32 [ %v2_158ac, %dec_label_pc_158b4.loopexit ], [ %v2_15894, %dec_label_pc_15890 ]
  %v0_158b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_158b4 = add i32 %v0_158b4, -1
  store i32 %v1_158b4, i32* @r1, align 4
  br label %bb131

dec_label_pc_158bc:                               ; preds = %dec_label_pc_15670
  %v1_158bc = load i32, i32* @r2, align 4
  %v2_158bc = add i32 %v1_158bc, %v0_15670
  store i32 %v2_158bc, i32* %r1.global-to-local, align 4
  %v2_158c0 = add i32 %v1_158bc, %v1_15670
  store i32 %v2_158c0, i32* %r0.global-to-local, align 4
  %v2_158c4 = add i32 %v1_158bc, -4
  store i32 %v2_158c4, i32* %r2.global-to-local, align 4
  %v4_158c4 = sub i32 3, %v1_158bc
  %v5_158c4 = and i32 %v4_158c4, %v1_158bc
  %v6_158c4 = icmp slt i32 %v5_158c4, 0
  store i1 %v6_158c4, i1* %cpsr_v.global-to-local, align 1
  %v7_158c4 = icmp slt i32 %v2_158c4, 0
  store i1 %v7_158c4, i1* %cpsr_n.global-to-local, align 1
  %v8_158c4 = icmp eq i32 %v1_158bc, 4
  store i1 %v8_158c4, i1* %cpsr_z.global-to-local, align 1
  %v5_158c8 = icmp slt i32 %v1_158bc, 4
  br i1 %v5_158c8, label %bb141, label %dec_label_pc_158cc

dec_label_pc_158cc:                               ; preds = %dec_label_pc_158bc
  %v1_158cc = urem i32 %v2_158c0, 4
  store i32 %v1_158cc, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_158cc = icmp eq i32 %v1_158cc, 0
  store i1 %v2_158cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_158cc, label %dec_label_pc_158d4, label %dec_label_pc_15974

dec_label_pc_158d4:                               ; preds = %dec_label_pc_158cc
  %v1_158d4 = urem i32 %v2_158bc, 4
  store i32 %v1_158d4, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_158d4 = icmp eq i32 %v1_158d4, 0
  store i1 %v2_158d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_158d4, label %dec_label_pc_158dc, label %dec_label_pc_159a0

dec_label_pc_158dc:                               ; preds = %dec_label_pc_158d4, %dec_label_pc_15998
  %v0_158f448 = phi i32 [ %v2_158c0, %dec_label_pc_158d4 ], [ %v0_159e831, %dec_label_pc_15998 ]
  %v0_158f047 = phi i32 [ %v2_158bc, %dec_label_pc_158d4 ], [ %v0_15998, %dec_label_pc_15998 ]
  %v0_158dc = phi i32 [ %v2_158c4, %dec_label_pc_158d4 ], [ %v2_15990, %dec_label_pc_15998 ]
  %v2_158dc = add i32 %v0_158dc, -8
  store i32 %v2_158dc, i32* %r2.global-to-local, align 4
  %v4_158dc = sub i32 7, %v0_158dc
  %v5_158dc = and i32 %v4_158dc, %v0_158dc
  %v6_158dc = icmp slt i32 %v5_158dc, 0
  store i1 %v6_158dc, i1* %cpsr_v.global-to-local, align 1
  %v7_158dc = icmp slt i32 %v2_158dc, 0
  store i1 %v7_158dc, i1* %cpsr_n.global-to-local, align 1
  %v8_158dc = icmp eq i32 %v0_158dc, 8
  store i1 %v8_158dc, i1* %cpsr_z.global-to-local, align 1
  %v5_158e0 = icmp slt i32 %v0_158dc, 8
  br i1 %v5_158e0, label %dec_label_pc_1592c, label %dec_label_pc_158e4

dec_label_pc_158e4:                               ; preds = %dec_label_pc_158dc
  %v3_158e4 = load i32, i32* @r4, align 4
  store i32 %v3_158e4, i32* %stack_var_-8, align 4
  %v6_158e4 = load i32, i32* @lr, align 4
  %v2_158e8 = add i32 %v0_158dc, -28
  store i32 %v2_158e8, i32* %r2.global-to-local, align 4
  %v4_158e8 = sub i32 27, %v0_158dc
  %v5_158e8 = and i32 %v4_158e8, %v2_158dc
  %v6_158e8 = icmp slt i32 %v5_158e8, 0
  store i1 %v6_158e8, i1* %cpsr_v.global-to-local, align 1
  %v7_158e8 = icmp slt i32 %v2_158e8, 0
  store i1 %v7_158e8, i1* %cpsr_n.global-to-local, align 1
  %v8_158e8 = icmp eq i32 %v2_158dc, 20
  store i1 %v8_158e8, i1* %cpsr_z.global-to-local, align 1
  %v5_158ec = icmp slt i32 %v2_158dc, 20
  br i1 %v5_158ec, label %dec_label_pc_15908, label %dec_label_pc_158f0

dec_label_pc_158f0:                               ; preds = %dec_label_pc_158e4, %dec_label_pc_158f0.dec_label_pc_158f0_crit_edge
  %v0_158f4 = phi i32 [ %v1_158fc, %dec_label_pc_158f0.dec_label_pc_158f0_crit_edge ], [ %v0_158f448, %dec_label_pc_158e4 ]
  %v0_158f0 = phi i32 [ %v0_158f0.pre, %dec_label_pc_158f0.dec_label_pc_158f0_crit_edge ], [ %v0_158f047, %dec_label_pc_158e4 ]
  %v1_158f0 = add i32 %v0_158f0, -4
  %v2_158f0 = inttoptr i32 %v1_158f0 to i32*
  %v3_158f0 = load i32, i32* %v2_158f0, align 4
  store i32 %v3_158f0, i32* %r3.global-to-local, align 4
  %v4_158f0 = add i32 %v0_158f0, -8
  %v5_158f0 = inttoptr i32 %v4_158f0 to i32*
  %v6_158f0 = load i32, i32* %v5_158f0, align 4
  store i32 %v6_158f0, i32* %r4.global-to-local, align 4
  %v7_158f0 = add i32 %v0_158f0, -12
  %v8_158f0 = inttoptr i32 %v7_158f0 to i32*
  %v9_158f0 = load i32, i32* %v8_158f0, align 4
  store i32 %v9_158f0, i32* %ip.global-to-local, align 4
  %v10_158f0 = add i32 %v0_158f0, -16
  %v11_158f0 = inttoptr i32 %v10_158f0 to i32*
  %v12_158f0 = load i32, i32* %v11_158f0, align 4
  store i32 %v12_158f0, i32* %lr.global-to-local, align 4
  store i32 %v10_158f0, i32* %r1.global-to-local, align 4
  %v1_158f4 = add i32 %v0_158f4, -16
  %v2_158f4 = inttoptr i32 %v1_158f4 to i32*
  store i32 %v3_158f0, i32* %v2_158f4, align 4
  %v4_158f4 = add i32 %v0_158f4, -12
  %v5_158f4 = inttoptr i32 %v4_158f4 to i32*
  %v6_158f4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_158f4, i32* %v5_158f4, align 4
  %v7_158f4 = add i32 %v0_158f4, -8
  %v8_158f4 = inttoptr i32 %v7_158f4 to i32*
  %v9_158f4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_158f4, i32* %v8_158f4, align 4
  %v10_158f4 = add i32 %v0_158f4, -4
  %v11_158f4 = inttoptr i32 %v10_158f4 to i32*
  %v12_158f4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_158f4, i32* %v11_158f4, align 4
  store i32 %v1_158f4, i32* %r0.global-to-local, align 4
  %v0_158f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_158f8 = add i32 %v0_158f8, -4
  %v2_158f8 = inttoptr i32 %v1_158f8 to i32*
  %v3_158f8 = load i32, i32* %v2_158f8, align 4
  store i32 %v3_158f8, i32* %r3.global-to-local, align 4
  %v4_158f8 = add i32 %v0_158f8, -8
  %v5_158f8 = inttoptr i32 %v4_158f8 to i32*
  %v6_158f8 = load i32, i32* %v5_158f8, align 4
  store i32 %v6_158f8, i32* %r4.global-to-local, align 4
  %v7_158f8 = add i32 %v0_158f8, -12
  %v8_158f8 = inttoptr i32 %v7_158f8 to i32*
  %v9_158f8 = load i32, i32* %v8_158f8, align 4
  store i32 %v9_158f8, i32* %ip.global-to-local, align 4
  %v10_158f8 = add i32 %v0_158f8, -16
  %v11_158f8 = inttoptr i32 %v10_158f8 to i32*
  %v12_158f8 = load i32, i32* %v11_158f8, align 4
  store i32 %v12_158f8, i32* %lr.global-to-local, align 4
  store i32 %v10_158f8, i32* %r1.global-to-local, align 4
  %v1_158fc = add i32 %v0_158f4, -32
  %v2_158fc = inttoptr i32 %v1_158fc to i32*
  store i32 %v3_158f8, i32* %v2_158fc, align 4
  %v4_158fc = add i32 %v0_158f4, -28
  %v5_158fc = inttoptr i32 %v4_158fc to i32*
  %v6_158fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_158fc, i32* %v5_158fc, align 4
  %v7_158fc = add i32 %v0_158f4, -24
  %v8_158fc = inttoptr i32 %v7_158fc to i32*
  %v9_158fc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_158fc, i32* %v8_158fc, align 4
  %v10_158fc = add i32 %v0_158f4, -20
  %v11_158fc = inttoptr i32 %v10_158fc to i32*
  %v12_158fc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_158fc, i32* %v11_158fc, align 4
  store i32 %v1_158fc, i32* %r0.global-to-local, align 4
  %v0_15900 = load i32, i32* %r2.global-to-local, align 4
  %v2_15900 = add i32 %v0_15900, -32
  store i32 %v2_15900, i32* %r2.global-to-local, align 4
  %v6_15904 = icmp slt i32 %v0_15900, 32
  br i1 %v6_15904, label %dec_label_pc_15908.loopexit, label %dec_label_pc_158f0.dec_label_pc_158f0_crit_edge

dec_label_pc_158f0.dec_label_pc_158f0_crit_edge:  ; preds = %dec_label_pc_158f0
  %v0_158f0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_158f0

dec_label_pc_15908.loopexit:                      ; preds = %dec_label_pc_158f0
  %v4_15900 = sub i32 31, %v0_15900
  %v5_15900 = and i32 %v4_15900, %v0_15900
  %v6_15900 = icmp slt i32 %v5_15900, 0
  %v7_15900 = icmp slt i32 %v2_15900, 0
  store i1 %v6_15900, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15900, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15908

dec_label_pc_15908:                               ; preds = %dec_label_pc_15908.loopexit, %dec_label_pc_158e4
  %v6_15910 = phi i32 [ %v1_158fc, %dec_label_pc_15908.loopexit ], [ %v0_158f448, %dec_label_pc_158e4 ]
  %v0_15918.pr = phi i32 [ %v2_15900, %dec_label_pc_15908.loopexit ], [ %v2_158e8, %dec_label_pc_158e4 ]
  %v4_15908 = add i32 %v0_15918.pr, 16
  %v6_15908 = sub i32 0, %v0_15918.pr
  %v7_15908 = and i32 %v4_15908, %v6_15908
  %v8_15908 = icmp slt i32 %v7_15908, 0
  store i1 %v8_15908, i1* %cpsr_v.global-to-local, align 1
  %v9_15908 = icmp slt i32 %v4_15908, 0
  store i1 %v9_15908, i1* %cpsr_n.global-to-local, align 1
  %v10_15908 = icmp eq i32 %v4_15908, 0
  store i1 %v10_15908, i1* %cpsr_z.global-to-local, align 1
  %v5_1590c = icmp slt i32 %v0_15918.pr, -16
  br i1 %v5_1590c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_15908
  %v6_1590c = load i32, i32* %r1.global-to-local, align 4
  %v7_1590c = add i32 %v6_1590c, -4
  %v8_1590c = inttoptr i32 %v7_1590c to i32*
  %v9_1590c = load i32, i32* %v8_1590c, align 4
  store i32 %v9_1590c, i32* %r3.global-to-local, align 4
  %v10_1590c = add i32 %v6_1590c, -8
  %v11_1590c = inttoptr i32 %v10_1590c to i32*
  %v12_1590c = load i32, i32* %v11_1590c, align 4
  store i32 %v12_1590c, i32* %r4.global-to-local, align 4
  %v13_1590c = add i32 %v6_1590c, -12
  %v14_1590c = inttoptr i32 %v13_1590c to i32*
  %v15_1590c = load i32, i32* %v14_1590c, align 4
  store i32 %v15_1590c, i32* %ip.global-to-local, align 4
  %v16_1590c = add i32 %v6_1590c, -16
  %v17_1590c = inttoptr i32 %v16_1590c to i32*
  %v18_1590c = load i32, i32* %v17_1590c, align 4
  store i32 %v18_1590c, i32* %lr.global-to-local, align 4
  store i32 %v16_1590c, i32* %r1.global-to-local, align 4
  %v7_15910 = add i32 %v6_15910, -16
  %v8_15910 = inttoptr i32 %v7_15910 to i32*
  store i32 %v9_1590c, i32* %v8_15910, align 4
  %v10_15910 = add i32 %v6_15910, -12
  %v11_15910 = inttoptr i32 %v10_15910 to i32*
  %v12_15910 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_15910, i32* %v11_15910, align 4
  %v13_15910 = add i32 %v6_15910, -8
  %v14_15910 = inttoptr i32 %v13_15910 to i32*
  %v15_15910 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v15_15910, i32* %v14_15910, align 4
  %v16_15910 = add i32 %v6_15910, -4
  %v17_15910 = inttoptr i32 %v16_15910 to i32*
  %v18_15910 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_15910, i32* %v17_15910, align 4
  store i32 %v7_15910, i32* %r0.global-to-local, align 4
  %v6_15914 = load i32, i32* %r2.global-to-local, align 4
  %v7_15914 = add i32 %v6_15914, -16
  store i32 %v7_15914, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_15908, %bb138
  %v6_15920 = phi i32 [ %v7_15910, %bb138 ], [ %v6_15910, %dec_label_pc_15908 ]
  %v0_15918 = phi i32 [ %v7_15914, %bb138 ], [ %v0_15918.pr, %dec_label_pc_15908 ]
  %v4_15918 = add i32 %v0_15918, 20
  store i32 %v4_15918, i32* %r2.global-to-local, align 4
  %v6_15918 = sub i32 0, %v0_15918
  %v7_15918 = and i32 %v4_15918, %v6_15918
  %v8_15918 = icmp slt i32 %v7_15918, 0
  store i1 %v8_15918, i1* %cpsr_v.global-to-local, align 1
  %v9_15918 = icmp slt i32 %v4_15918, 0
  store i1 %v9_15918, i1* %cpsr_n.global-to-local, align 1
  %v10_15918 = icmp eq i32 %v4_15918, 0
  store i1 %v10_15918, i1* %cpsr_z.global-to-local, align 1
  %v5_1591c = icmp slt i32 %v0_15918, -20
  br i1 %v5_1591c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_1591c = load i32, i32* %r1.global-to-local, align 4
  %v7_1591c = add i32 %v6_1591c, -4
  %v8_1591c = inttoptr i32 %v7_1591c to i32*
  %v9_1591c = load i32, i32* %v8_1591c, align 4
  store i32 %v9_1591c, i32* %r3.global-to-local, align 4
  %v10_1591c = add i32 %v6_1591c, -8
  %v11_1591c = inttoptr i32 %v10_1591c to i32*
  %v12_1591c = load i32, i32* %v11_1591c, align 4
  store i32 %v12_1591c, i32* %ip.global-to-local, align 4
  %v13_1591c = add i32 %v6_1591c, -12
  %v14_1591c = inttoptr i32 %v13_1591c to i32*
  %v15_1591c = load i32, i32* %v14_1591c, align 4
  store i32 %v15_1591c, i32* %lr.global-to-local, align 4
  store i32 %v13_1591c, i32* %r1.global-to-local, align 4
  %v7_15920 = add i32 %v6_15920, -12
  %v8_15920 = inttoptr i32 %v7_15920 to i32*
  store i32 %v9_1591c, i32* %v8_15920, align 4
  %v10_15920 = add i32 %v6_15920, -8
  %v11_15920 = inttoptr i32 %v10_15920 to i32*
  %v12_15920 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_15920, i32* %v11_15920, align 4
  %v13_15920 = add i32 %v6_15920, -4
  %v14_15920 = inttoptr i32 %v13_15920 to i32*
  %v15_15920 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_15920, i32* %v14_15920, align 4
  store i32 %v7_15920, i32* %r0.global-to-local, align 4
  %v6_15924 = load i32, i32* %r2.global-to-local, align 4
  %v7_15924 = add i32 %v6_15924, -12
  store i32 %v7_15924, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_1594456 = phi i32 [ %v6_15920, %.thread13 ], [ %v7_15920, %bb139 ]
  %v0_1592c54 = phi i32 [ %v4_15918, %.thread13 ], [ %v7_15924, %bb139 ]
  %v2_15928 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15928, i32* @r4, align 4
  store i32 %v6_158e4, i32* @lr, align 4
  br label %dec_label_pc_1592c

dec_label_pc_1592c:                               ; preds = %dec_label_pc_158dc, %.thread15
  %v7_1593c = phi i32 [ %v0_158f448, %dec_label_pc_158dc ], [ %v6_1594456, %.thread15 ]
  %v0_1592c = phi i32 [ %v2_158dc, %dec_label_pc_158dc ], [ %v0_1592c54, %.thread15 ]
  %v2_1592c = add i32 %v0_1592c, 8
  store i32 %v2_1592c, i32* %r2.global-to-local, align 4
  %v4_1592c = sub i32 0, %v0_1592c
  %v5_1592c = and i32 %v2_1592c, %v4_1592c
  %v6_1592c = icmp slt i32 %v5_1592c, 0
  store i1 %v6_1592c, i1* %cpsr_v.global-to-local, align 1
  %v7_1592c = icmp slt i32 %v2_1592c, 0
  store i1 %v7_1592c, i1* %cpsr_n.global-to-local, align 1
  %v8_1592c = icmp eq i32 %v2_1592c, 0
  store i1 %v8_1592c, i1* %cpsr_z.global-to-local, align 1
  %v5_15930 = icmp slt i32 %v0_1592c, -8
  br i1 %v5_15930, label %bb141, label %dec_label_pc_15934

dec_label_pc_15934:                               ; preds = %dec_label_pc_1592c
  %v6_15934 = add i32 %v0_1592c, 4
  store i32 %v6_15934, i32* %r2.global-to-local, align 4
  %v8_15934 = sub i32 -5, %v0_1592c
  %v9_15934 = and i32 %v8_15934, %v2_1592c
  %v10_15934 = icmp slt i32 %v9_15934, 0
  store i1 %v10_15934, i1* %cpsr_v.global-to-local, align 1
  %v11_15934 = icmp slt i32 %v6_15934, 0
  store i1 %v11_15934, i1* %cpsr_n.global-to-local, align 1
  %v12_15934 = icmp eq i32 %v2_1592c, 4
  store i1 %v12_15934, i1* %cpsr_z.global-to-local, align 1
  %v5_15938 = icmp slt i32 %v2_1592c, 4
  %v6_15938 = load i32, i32* %r1.global-to-local, align 4
  %v7_15938 = add i32 %v6_15938, -4
  %v8_15938 = inttoptr i32 %v7_15938 to i32*
  %v9_15938 = load i32, i32* %v8_15938, align 4
  store i32 %v9_15938, i32* %r3.global-to-local, align 4
  br i1 %v5_15938, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_15934
  store i32 %v7_15938, i32* %r1.global-to-local, align 4
  %v8_1593c = add i32 %v7_1593c, -4
  %v9_1593c = inttoptr i32 %v8_1593c to i32*
  store i32 %v9_15938, i32* %v9_1593c, align 4
  %v10_1593c = load i32, i32* %r0.global-to-local, align 4
  %v11_1593c = add i32 %v10_1593c, -4
  store i32 %v11_1593c, i32* %r0.global-to-local, align 4
  %v0_1594c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_15934
  %v10_15940 = add i32 %v6_15938, -8
  %v11_15940 = inttoptr i32 %v10_15940 to i32*
  %v12_15940 = load i32, i32* %v11_15940, align 4
  store i32 %v12_15940, i32* %ip.global-to-local, align 4
  store i32 %v10_15940, i32* %r1.global-to-local, align 4
  %v7_15944 = add i32 %v7_1593c, -8
  %v8_15944 = inttoptr i32 %v7_15944 to i32*
  store i32 %v9_15938, i32* %v8_15944, align 4
  %v10_15944 = add i32 %v7_1593c, -4
  %v11_15944 = inttoptr i32 %v10_15944 to i32*
  %v12_15944 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_15944, i32* %v11_15944, align 4
  store i32 %v7_15944, i32* %r0.global-to-local, align 4
  %v6_15948 = load i32, i32* %r2.global-to-local, align 4
  %v7_15948 = add i32 %v6_15948, -4
  store i32 %v7_15948, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_1592c, %dec_label_pc_158bc, %dec_label_pc_15af0, %dec_label_pc_15a84, %dec_label_pc_15a18, %bb140
  %v2_15950 = phi i32 [ %v11_1593c, %.thread19 ], [ %v0_159e831, %.thread25 ], [ %v7_1593c, %dec_label_pc_1592c ], [ %v2_158c0, %dec_label_pc_158bc ], [ %v2_1595c64, %dec_label_pc_15af0 ], [ %v2_1595c63, %dec_label_pc_15a84 ], [ %v2_1595c62, %dec_label_pc_15a18 ], [ %v7_15944, %bb140 ]
  %v0_1594c = phi i32 [ %v0_1594c.pre, %.thread19 ], [ %v2_15990, %.thread25 ], [ %v2_1592c, %dec_label_pc_1592c ], [ %v2_158c4, %dec_label_pc_158bc ], [ %v0_1594c60, %dec_label_pc_15af0 ], [ %v0_1594c59, %dec_label_pc_15a84 ], [ %v0_1594c58, %dec_label_pc_15a18 ], [ %v7_15948, %bb140 ]
  %v1_1594c = add i32 %v0_1594c, 4
  store i32 %v1_1594c, i32* %r2.global-to-local, align 4
  %v3_1594c = sub i32 0, %v0_1594c
  %v4_1594c = and i32 %v1_1594c, %v3_1594c
  %v5_1594c = icmp slt i32 %v4_1594c, 0
  store i1 %v5_1594c, i1* %cpsr_v.global-to-local, align 1
  %v6_1594c = icmp slt i32 %v1_1594c, 0
  store i1 %v6_1594c, i1* %cpsr_n.global-to-local, align 1
  %v7_1594c = icmp eq i32 %v1_1594c, 0
  store i1 %v7_1594c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1594c, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_15954 = add i32 %v0_1594c, 2
  %v3_15954 = sub i32 -3, %v0_1594c
  %v4_15954 = and i32 %v3_15954, %v1_1594c
  %v5_15954 = icmp slt i32 %v4_15954, 0
  store i1 %v5_15954, i1* %cpsr_v.global-to-local, align 1
  %v6_15954 = icmp slt i32 %v1_15954, 0
  store i1 %v6_15954, i1* %cpsr_n.global-to-local, align 1
  %v7_15954 = icmp eq i32 %v1_1594c, 2
  store i1 %v7_15954, i1* %cpsr_z.global-to-local, align 1
  %v0_15958 = load i32, i32* %r1.global-to-local, align 4
  %v1_15958 = add i32 %v0_15958, -1
  %v2_15958 = inttoptr i32 %v1_15958 to i8*
  %v3_15958 = load i8, i8* %v2_15958, align 1
  %v4_15958 = zext i8 %v3_15958 to i32
  store i32 %v4_15958, i32* %r3.global-to-local, align 4
  store i32 %v1_15958, i32* %r1.global-to-local, align 4
  %v3_1595c = add i32 %v2_15950, -1
  %v4_1595c = inttoptr i32 %v3_1595c to i8*
  store i8 %v3_15958, i8* %v4_1595c, align 1
  %v5_1595c = load i32, i32* %r0.global-to-local, align 4
  %v6_1595c = add i32 %v5_1595c, -1
  store i32 %v6_1595c, i32* %r0.global-to-local, align 4
  %v0_15960 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15960 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15960 = xor i1 %v0_15960, %v1_15960
  br i1 %v2_15960, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_15960 = load i32, i32* %r1.global-to-local, align 4
  %v4_15960 = add i32 %v3_15960, -1
  %v5_15960 = inttoptr i32 %v4_15960 to i8*
  %v6_15960 = load i8, i8* %v5_15960, align 1
  %v7_15960 = zext i8 %v6_15960 to i32
  store i32 %v7_15960, i32* %r3.global-to-local, align 4
  store i32 %v4_15960, i32* %r1.global-to-local, align 4
  %v6_15964 = add i32 %v5_1595c, -2
  %v7_15964 = inttoptr i32 %v6_15964 to i8*
  store i8 %v6_15960, i8* %v7_15964, align 1
  %v8_15964 = load i32, i32* %r0.global-to-local, align 4
  %v9_15964 = add i32 %v8_15964, -1
  store i32 %v9_15964, i32* %r0.global-to-local, align 4
  %v1_15968.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15968.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_1596c = phi i32 [ %v9_15964, %bb143 ], [ %v6_1595c, %bb142 ]
  %v2_1596c = phi i1 [ %v2_15968.pre, %bb143 ], [ %v1_15960, %bb142 ]
  %v1_1596c = phi i1 [ %v1_15968.pre, %bb143 ], [ %v0_15960, %bb142 ]
  %v0_15968 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15968 = xor i1 %v2_1596c, %v1_1596c
  %v4_15968 = or i1 %v0_15968, %v3_15968
  br i1 %v4_15968, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_15968 = load i32, i32* %r1.global-to-local, align 4
  %v6_15968 = add i32 %v5_15968, -1
  %v7_15968 = inttoptr i32 %v6_15968 to i8*
  %v8_15968 = load i8, i8* %v7_15968, align 1
  %v9_15968 = zext i8 %v8_15968 to i32
  store i32 %v9_15968, i32* %r3.global-to-local, align 4
  store i32 %v6_15968, i32* %r1.global-to-local, align 4
  %v8_1596c = add i32 %v7_1596c, -1
  %v9_1596c = inttoptr i32 %v8_1596c to i8*
  store i8 %v8_15968, i8* %v9_1596c, align 1
  %v10_1596c = load i32, i32* %r0.global-to-local, align 4
  %v11_1596c = add i32 %v10_1596c, -1
  store i32 %v11_1596c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_15974:                               ; preds = %dec_label_pc_158cc
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_15974 = icmp eq i32 %v1_158cc, 1
  store i1 %v8_15974, i1* %cpsr_n.global-to-local, align 1
  %v9_15974 = icmp eq i32 %v1_158cc, 2
  store i1 %v9_15974, i1* %cpsr_z.global-to-local, align 1
  %v1_15978 = add i32 %v2_158bc, -1
  %v2_15978 = inttoptr i32 %v1_15978 to i8*
  %v3_15978 = load i8, i8* %v2_15978, align 1
  %v4_15978 = zext i8 %v3_15978 to i32
  store i32 %v4_15978, i32* %r3.global-to-local, align 4
  store i32 %v1_15978, i32* %r1.global-to-local, align 4
  %v3_1597c = add i32 %v2_158c0, -1
  %v4_1597c = inttoptr i32 %v3_1597c to i8*
  store i8 %v3_15978, i8* %v4_1597c, align 1
  %v5_1597c = load i32, i32* %r0.global-to-local, align 4
  %v6_1597c = add i32 %v5_1597c, -1
  store i32 %v6_1597c, i32* %r0.global-to-local, align 4
  br i1 %v8_15974, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_15974
  %v6_15980 = load i32, i32* %r1.global-to-local, align 4
  %v7_15980 = add i32 %v6_15980, -1
  %v8_15980 = inttoptr i32 %v7_15980 to i8*
  %v9_15980 = load i8, i8* %v8_15980, align 1
  %v10_15980 = zext i8 %v9_15980 to i32
  store i32 %v10_15980, i32* %r3.global-to-local, align 4
  store i32 %v7_15980, i32* %r1.global-to-local, align 4
  %v9_15984 = add i32 %v5_1597c, -2
  %v10_15984 = inttoptr i32 %v9_15984 to i8*
  store i8 %v9_15980, i8* %v10_15984, align 1
  %v11_15984 = load i32, i32* %r0.global-to-local, align 4
  %v12_15984 = add i32 %v11_15984, -1
  store i32 %v12_15984, i32* %r0.global-to-local, align 4
  br i1 %v9_15974, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_15988 = load i32, i32* %r1.global-to-local, align 4
  %v9_15988 = add i32 %v8_15988, -1
  %v10_15988 = inttoptr i32 %v9_15988 to i8*
  %v11_15988 = load i8, i8* %v10_15988, align 1
  %v12_15988 = zext i8 %v11_15988 to i32
  store i32 %v12_15988, i32* %r3.global-to-local, align 4
  store i32 %v9_15988, i32* %r1.global-to-local, align 4
  %v11_1598c = add i32 %v11_15984, -2
  %v12_1598c = inttoptr i32 %v11_1598c to i8*
  store i8 %v11_15988, i8* %v12_1598c, align 1
  %v13_1598c = load i32, i32* %r0.global-to-local, align 4
  %v14_1598c = add i32 %v13_1598c, -1
  store i32 %v14_1598c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_15974, %bb146
  %v0_159e831 = phi i32 [ %v12_15984, %bb145 ], [ %v6_1597c, %dec_label_pc_15974 ], [ %v14_1598c, %bb146 ]
  %v0_15990 = load i32, i32* %r2.global-to-local, align 4
  %v1_15990 = load i32, i32* %ip.global-to-local, align 4
  %v2_15990 = sub i32 %v0_15990, %v1_15990
  store i32 %v2_15990, i32* %r2.global-to-local, align 4
  %v4_15990 = xor i32 %v1_15990, %v0_15990
  %v5_15990 = xor i32 %v2_15990, %v0_15990
  %v6_15990 = and i32 %v5_15990, %v4_15990
  %v7_15990 = icmp slt i32 %v6_15990, 0
  store i1 %v7_15990, i1* %cpsr_v.global-to-local, align 1
  %v8_15990 = icmp slt i32 %v2_15990, 0
  store i1 %v8_15990, i1* %cpsr_n.global-to-local, align 1
  %v9_15990 = icmp eq i32 %v0_15990, %v1_15990
  store i1 %v9_15990, i1* %cpsr_z.global-to-local, align 1
  %v5_15994 = icmp slt i32 %v0_15990, %v1_15990
  br i1 %v5_15994, label %bb141, label %dec_label_pc_15998

dec_label_pc_15998:                               ; preds = %.thread25
  %v0_15998 = load i32, i32* %r1.global-to-local, align 4
  %v1_15998 = urem i32 %v0_15998, 4
  store i32 %v1_15998, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15998 = icmp eq i32 %v1_15998, 0
  store i1 %v2_15998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15998, label %dec_label_pc_158dc, label %dec_label_pc_159a0

dec_label_pc_159a0:                               ; preds = %dec_label_pc_158d4, %dec_label_pc_15998
  %v0_159e830 = phi i32 [ %v2_158c0, %dec_label_pc_158d4 ], [ %v0_159e831, %dec_label_pc_15998 ]
  %v0_15a94 = phi i32 [ %v2_158c4, %dec_label_pc_158d4 ], [ %v2_15990, %dec_label_pc_15998 ]
  %v0_159a0 = phi i32 [ %v2_158bc, %dec_label_pc_158d4 ], [ %v0_15998, %dec_label_pc_15998 ]
  %v0_159a8 = phi i32 [ %v1_158d4, %dec_label_pc_158d4 ], [ %v1_15998, %dec_label_pc_15998 ]
  %v1_159a0 = and i32 %v0_159a0, -4
  store i32 %v1_159a0, i32* %r1.global-to-local, align 4
  %v1_159a4 = inttoptr i32 %v1_159a0 to i32*
  %v2_159a4 = load i32, i32* %v1_159a4, align 4
  store i32 %v2_159a4, i32* %r3.global-to-local, align 4
  %v7_159a8 = icmp ult i32 %v0_159a8, 2
  %v2_15a8c = add i32 %v0_15a94, -12
  %v4_15a8c = sub i32 11, %v0_15a94
  %v5_15a8c = and i32 %v4_15a8c, %v0_15a94
  %v6_15a8c = icmp slt i32 %v5_15a8c, 0
  store i1 %v6_15a8c, i1* %cpsr_v.global-to-local, align 1
  %v7_15a8c = icmp slt i32 %v2_15a8c, 0
  store i1 %v7_15a8c, i1* %cpsr_n.global-to-local, align 1
  %v8_15a8c = icmp eq i32 %v0_15a94, 12
  store i1 %v8_15a8c, i1* %cpsr_z.global-to-local, align 1
  %v5_15a90 = icmp slt i32 %v0_15a94, 12
  br i1 %v7_159a8, label %dec_label_pc_15a8c, label %dec_label_pc_159b0

dec_label_pc_159b0:                               ; preds = %dec_label_pc_159a0
  %v8_159a8 = icmp eq i32 %v0_159a8, 2
  br i1 %v8_159a8, label %dec_label_pc_15a20, label %dec_label_pc_159b4

dec_label_pc_159b4:                               ; preds = %dec_label_pc_159b0
  br i1 %v5_15a90, label %dec_label_pc_15a00, label %dec_label_pc_159bc

dec_label_pc_159bc:                               ; preds = %dec_label_pc_159b4
  store i32 %v2_15a8c, i32* %r2.global-to-local, align 4
  %v3_159c0 = load i32, i32* @r4, align 4
  store i32 %v3_159c0, i32* %stack_var_-12, align 4
  %v6_159c0 = load i32, i32* @r5, align 4
  store i32 %v6_159c0, i32* %stack_var_-8, align 4
  %v9_159c0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_159c4

dec_label_pc_159c4:                               ; preds = %dec_label_pc_159c4.dec_label_pc_159c4_crit_edge, %dec_label_pc_159bc
  %v0_159e8 = phi i32 [ %v1_159e8, %dec_label_pc_159c4.dec_label_pc_159c4_crit_edge ], [ %v0_159e830, %dec_label_pc_159bc ]
  %v0_159c8 = phi i32 [ %v0_159c8.pre, %dec_label_pc_159c4.dec_label_pc_159c4_crit_edge ], [ %v1_159a0, %dec_label_pc_159bc ]
  %v0_159c4 = phi i32 [ %v0_159c4.pre, %dec_label_pc_159c4.dec_label_pc_159c4_crit_edge ], [ %v2_159a4, %dec_label_pc_159bc ]
  %v3_159c4 = mul i32 %v0_159c4, 256
  store i32 %v3_159c4, i32* %lr.global-to-local, align 4
  %v1_159c8 = add i32 %v0_159c8, -4
  %v2_159c8 = inttoptr i32 %v1_159c8 to i32*
  %v3_159c8 = load i32, i32* %v2_159c8, align 4
  store i32 %v3_159c8, i32* %r3.global-to-local, align 4
  %v4_159c8 = add i32 %v0_159c8, -8
  %v5_159c8 = inttoptr i32 %v4_159c8 to i32*
  %v6_159c8 = load i32, i32* %v5_159c8, align 4
  store i32 %v6_159c8, i32* %r4.global-to-local, align 4
  %v7_159c8 = add i32 %v0_159c8, -12
  %v8_159c8 = inttoptr i32 %v7_159c8 to i32*
  %v9_159c8 = load i32, i32* %v8_159c8, align 4
  store i32 %v9_159c8, i32* %r5.global-to-local, align 4
  %v10_159c8 = add i32 %v0_159c8, -16
  %v11_159c8 = inttoptr i32 %v10_159c8 to i32*
  %v12_159c8 = load i32, i32* %v11_159c8, align 4
  store i32 %v10_159c8, i32* %r1.global-to-local, align 4
  %v4_159cc = udiv i32 %v12_159c8, 16777216
  %v5_159cc = or i32 %v4_159cc, %v3_159c4
  store i32 %v5_159cc, i32* %lr.global-to-local, align 4
  %v3_159d0 = mul i32 %v12_159c8, 256
  %v4_159d4 = udiv i32 %v9_159c8, 16777216
  %v5_159d4 = or i32 %v3_159d0, %v4_159d4
  store i32 %v5_159d4, i32* %ip.global-to-local, align 4
  %v3_159d8 = mul i32 %v9_159c8, 256
  %v4_159dc = udiv i32 %v6_159c8, 16777216
  %v5_159dc = or i32 %v3_159d8, %v4_159dc
  store i32 %v5_159dc, i32* %r5.global-to-local, align 4
  %v3_159e0 = mul i32 %v6_159c8, 256
  %v4_159e4 = udiv i32 %v3_159c8, 16777216
  %v5_159e4 = or i32 %v3_159e0, %v4_159e4
  store i32 %v5_159e4, i32* %r4.global-to-local, align 4
  %v1_159e8 = add i32 %v0_159e8, -16
  %v2_159e8 = inttoptr i32 %v1_159e8 to i32*
  store i32 %v5_159e4, i32* %v2_159e8, align 4
  %v4_159e8 = add i32 %v0_159e8, -12
  %v5_159e8 = inttoptr i32 %v4_159e8 to i32*
  %v6_159e8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_159e8, i32* %v5_159e8, align 4
  %v7_159e8 = add i32 %v0_159e8, -8
  %v8_159e8 = inttoptr i32 %v7_159e8 to i32*
  %v9_159e8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_159e8, i32* %v8_159e8, align 4
  %v10_159e8 = add i32 %v0_159e8, -4
  %v11_159e8 = inttoptr i32 %v10_159e8 to i32*
  %v12_159e8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_159e8, i32* %v11_159e8, align 4
  store i32 %v1_159e8, i32* %r0.global-to-local, align 4
  %v0_159ec = load i32, i32* %r2.global-to-local, align 4
  %v2_159ec = add i32 %v0_159ec, -16
  store i32 %v2_159ec, i32* %r2.global-to-local, align 4
  %v6_159f0 = icmp slt i32 %v0_159ec, 16
  br i1 %v6_159f0, label %dec_label_pc_159f4, label %dec_label_pc_159c4.dec_label_pc_159c4_crit_edge

dec_label_pc_159c4.dec_label_pc_159c4_crit_edge:  ; preds = %dec_label_pc_159c4
  %v0_159c4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_159c8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_159c4

dec_label_pc_159f4:                               ; preds = %dec_label_pc_159c4
  %v2_159f4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_159f4, i32* @r4, align 4
  %v5_159f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_159f4, i32* @r5, align 4
  store i32 %v9_159c0, i32* @lr, align 4
  %v2_159f8 = add i32 %v0_159ec, -4
  store i32 %v2_159f8, i32* %r2.global-to-local, align 4
  %v4_159f8 = add i32 %v0_159ec, 2147483632
  %v5_159f8 = and i32 %v2_159f8, %v4_159f8
  %v6_159f8 = icmp slt i32 %v5_159f8, 0
  store i1 %v6_159f8, i1* %cpsr_v.global-to-local, align 1
  %v7_159f8 = icmp slt i32 %v2_159f8, 0
  store i1 %v7_159f8, i1* %cpsr_n.global-to-local, align 1
  %v8_159f8 = icmp eq i32 %v2_159f8, 0
  store i1 %v8_159f8, i1* %cpsr_z.global-to-local, align 1
  %v5_159fc = icmp slt i32 %v2_159ec, -12
  br i1 %v5_159fc, label %dec_label_pc_15a18, label %dec_label_pc_15a00

dec_label_pc_15a00:                               ; preds = %dec_label_pc_159f4, %dec_label_pc_159b4, %dec_label_pc_15a00
  %v1_15a0c = phi i32 [ %v5_15a0c, %dec_label_pc_15a00 ], [ %v1_159e8, %dec_label_pc_159f4 ], [ %v0_159e830, %dec_label_pc_159b4 ]
  %v0_15a00 = load i32, i32* %r3.global-to-local, align 4
  %v3_15a00 = mul i32 %v0_15a00, 256
  store i32 %v3_15a00, i32* %ip.global-to-local, align 4
  %v0_15a04 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a04 = add i32 %v0_15a04, -4
  %v2_15a04 = inttoptr i32 %v1_15a04 to i32*
  %v3_15a04 = load i32, i32* %v2_15a04, align 4
  store i32 %v3_15a04, i32* %r3.global-to-local, align 4
  store i32 %v1_15a04, i32* %r1.global-to-local, align 4
  %v4_15a08 = udiv i32 %v3_15a04, 16777216
  %v5_15a08 = or i32 %v4_15a08, %v3_15a00
  store i32 %v5_15a08, i32* %ip.global-to-local, align 4
  %v2_15a0c = add i32 %v1_15a0c, -4
  %v3_15a0c = inttoptr i32 %v2_15a0c to i32*
  store i32 %v5_15a08, i32* %v3_15a0c, align 4
  %v4_15a0c = load i32, i32* %r0.global-to-local, align 4
  %v5_15a0c = add i32 %v4_15a0c, -4
  store i32 %v5_15a0c, i32* %r0.global-to-local, align 4
  %v0_15a10 = load i32, i32* %r2.global-to-local, align 4
  %v2_15a10 = add i32 %v0_15a10, -4
  store i32 %v2_15a10, i32* %r2.global-to-local, align 4
  %v6_15a14 = icmp slt i32 %v0_15a10, 4
  br i1 %v6_15a14, label %dec_label_pc_15a18.loopexit, label %dec_label_pc_15a00

dec_label_pc_15a18.loopexit:                      ; preds = %dec_label_pc_15a00
  %v4_15a10 = sub i32 3, %v0_15a10
  %v5_15a10 = and i32 %v4_15a10, %v0_15a10
  %v6_15a10 = icmp slt i32 %v5_15a10, 0
  %v7_15a10 = icmp slt i32 %v2_15a10, 0
  store i1 %v6_15a10, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15a10, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15a18

dec_label_pc_15a18:                               ; preds = %dec_label_pc_15a18.loopexit, %dec_label_pc_159f4
  %v2_1595c62 = phi i32 [ %v5_15a0c, %dec_label_pc_15a18.loopexit ], [ %v1_159e8, %dec_label_pc_159f4 ]
  %v0_1594c58 = phi i32 [ %v2_15a10, %dec_label_pc_15a18.loopexit ], [ %v2_159f8, %dec_label_pc_159f4 ]
  %v0_15a18 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a18 = add i32 %v0_15a18, 3
  store i32 %v1_15a18, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_15a20:                               ; preds = %dec_label_pc_159b0
  br i1 %v5_15a90, label %dec_label_pc_15a6c, label %dec_label_pc_15a28

dec_label_pc_15a28:                               ; preds = %dec_label_pc_15a20
  store i32 %v2_15a8c, i32* %r2.global-to-local, align 4
  %v3_15a2c = load i32, i32* @r4, align 4
  store i32 %v3_15a2c, i32* %stack_var_-12, align 4
  %v6_15a2c = load i32, i32* @r5, align 4
  store i32 %v6_15a2c, i32* %stack_var_-8, align 4
  %v9_15a2c = load i32, i32* @lr, align 4
  br label %dec_label_pc_15a30

dec_label_pc_15a30:                               ; preds = %dec_label_pc_15a30.dec_label_pc_15a30_crit_edge, %dec_label_pc_15a28
  %v0_15a54 = phi i32 [ %v1_15a54, %dec_label_pc_15a30.dec_label_pc_15a30_crit_edge ], [ %v0_159e830, %dec_label_pc_15a28 ]
  %v0_15a34 = phi i32 [ %v0_15a34.pre, %dec_label_pc_15a30.dec_label_pc_15a30_crit_edge ], [ %v1_159a0, %dec_label_pc_15a28 ]
  %v0_15a30 = phi i32 [ %v0_15a30.pre, %dec_label_pc_15a30.dec_label_pc_15a30_crit_edge ], [ %v2_159a4, %dec_label_pc_15a28 ]
  %v3_15a30 = mul i32 %v0_15a30, 65536
  store i32 %v3_15a30, i32* %lr.global-to-local, align 4
  %v1_15a34 = add i32 %v0_15a34, -4
  %v2_15a34 = inttoptr i32 %v1_15a34 to i32*
  %v3_15a34 = load i32, i32* %v2_15a34, align 4
  store i32 %v3_15a34, i32* %r3.global-to-local, align 4
  %v4_15a34 = add i32 %v0_15a34, -8
  %v5_15a34 = inttoptr i32 %v4_15a34 to i32*
  %v6_15a34 = load i32, i32* %v5_15a34, align 4
  store i32 %v6_15a34, i32* %r4.global-to-local, align 4
  %v7_15a34 = add i32 %v0_15a34, -12
  %v8_15a34 = inttoptr i32 %v7_15a34 to i32*
  %v9_15a34 = load i32, i32* %v8_15a34, align 4
  store i32 %v9_15a34, i32* %r5.global-to-local, align 4
  %v10_15a34 = add i32 %v0_15a34, -16
  %v11_15a34 = inttoptr i32 %v10_15a34 to i32*
  %v12_15a34 = load i32, i32* %v11_15a34, align 4
  store i32 %v10_15a34, i32* %r1.global-to-local, align 4
  %v4_15a38 = udiv i32 %v12_15a34, 65536
  %v5_15a38 = or i32 %v4_15a38, %v3_15a30
  store i32 %v5_15a38, i32* %lr.global-to-local, align 4
  %v3_15a3c = mul i32 %v12_15a34, 65536
  %v4_15a40 = udiv i32 %v9_15a34, 65536
  %v5_15a40 = or i32 %v3_15a3c, %v4_15a40
  store i32 %v5_15a40, i32* %ip.global-to-local, align 4
  %v3_15a44 = mul i32 %v9_15a34, 65536
  %v4_15a48 = udiv i32 %v6_15a34, 65536
  %v5_15a48 = or i32 %v3_15a44, %v4_15a48
  store i32 %v5_15a48, i32* %r5.global-to-local, align 4
  %v3_15a4c = mul i32 %v6_15a34, 65536
  %v4_15a50 = udiv i32 %v3_15a34, 65536
  %v5_15a50 = or i32 %v3_15a4c, %v4_15a50
  store i32 %v5_15a50, i32* %r4.global-to-local, align 4
  %v1_15a54 = add i32 %v0_15a54, -16
  %v2_15a54 = inttoptr i32 %v1_15a54 to i32*
  store i32 %v5_15a50, i32* %v2_15a54, align 4
  %v4_15a54 = add i32 %v0_15a54, -12
  %v5_15a54 = inttoptr i32 %v4_15a54 to i32*
  %v6_15a54 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15a54, i32* %v5_15a54, align 4
  %v7_15a54 = add i32 %v0_15a54, -8
  %v8_15a54 = inttoptr i32 %v7_15a54 to i32*
  %v9_15a54 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_15a54, i32* %v8_15a54, align 4
  %v10_15a54 = add i32 %v0_15a54, -4
  %v11_15a54 = inttoptr i32 %v10_15a54 to i32*
  %v12_15a54 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15a54, i32* %v11_15a54, align 4
  store i32 %v1_15a54, i32* %r0.global-to-local, align 4
  %v0_15a58 = load i32, i32* %r2.global-to-local, align 4
  %v2_15a58 = add i32 %v0_15a58, -16
  store i32 %v2_15a58, i32* %r2.global-to-local, align 4
  %v6_15a5c = icmp slt i32 %v0_15a58, 16
  br i1 %v6_15a5c, label %dec_label_pc_15a60, label %dec_label_pc_15a30.dec_label_pc_15a30_crit_edge

dec_label_pc_15a30.dec_label_pc_15a30_crit_edge:  ; preds = %dec_label_pc_15a30
  %v0_15a30.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15a34.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a30

dec_label_pc_15a60:                               ; preds = %dec_label_pc_15a30
  %v2_15a60 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15a60, i32* @r4, align 4
  %v5_15a60 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15a60, i32* @r5, align 4
  store i32 %v9_15a2c, i32* @lr, align 4
  %v2_15a64 = add i32 %v0_15a58, -4
  store i32 %v2_15a64, i32* %r2.global-to-local, align 4
  %v4_15a64 = add i32 %v0_15a58, 2147483632
  %v5_15a64 = and i32 %v2_15a64, %v4_15a64
  %v6_15a64 = icmp slt i32 %v5_15a64, 0
  store i1 %v6_15a64, i1* %cpsr_v.global-to-local, align 1
  %v7_15a64 = icmp slt i32 %v2_15a64, 0
  store i1 %v7_15a64, i1* %cpsr_n.global-to-local, align 1
  %v8_15a64 = icmp eq i32 %v2_15a64, 0
  store i1 %v8_15a64, i1* %cpsr_z.global-to-local, align 1
  %v5_15a68 = icmp slt i32 %v2_15a58, -12
  br i1 %v5_15a68, label %dec_label_pc_15a84, label %dec_label_pc_15a6c

dec_label_pc_15a6c:                               ; preds = %dec_label_pc_15a60, %dec_label_pc_15a20, %dec_label_pc_15a6c
  %v1_15a78 = phi i32 [ %v5_15a78, %dec_label_pc_15a6c ], [ %v1_15a54, %dec_label_pc_15a60 ], [ %v0_159e830, %dec_label_pc_15a20 ]
  %v0_15a6c = load i32, i32* %r3.global-to-local, align 4
  %v3_15a6c = mul i32 %v0_15a6c, 65536
  store i32 %v3_15a6c, i32* %ip.global-to-local, align 4
  %v0_15a70 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a70 = add i32 %v0_15a70, -4
  %v2_15a70 = inttoptr i32 %v1_15a70 to i32*
  %v3_15a70 = load i32, i32* %v2_15a70, align 4
  store i32 %v3_15a70, i32* %r3.global-to-local, align 4
  store i32 %v1_15a70, i32* %r1.global-to-local, align 4
  %v4_15a74 = udiv i32 %v3_15a70, 65536
  %v5_15a74 = or i32 %v4_15a74, %v3_15a6c
  store i32 %v5_15a74, i32* %ip.global-to-local, align 4
  %v2_15a78 = add i32 %v1_15a78, -4
  %v3_15a78 = inttoptr i32 %v2_15a78 to i32*
  store i32 %v5_15a74, i32* %v3_15a78, align 4
  %v4_15a78 = load i32, i32* %r0.global-to-local, align 4
  %v5_15a78 = add i32 %v4_15a78, -4
  store i32 %v5_15a78, i32* %r0.global-to-local, align 4
  %v0_15a7c = load i32, i32* %r2.global-to-local, align 4
  %v2_15a7c = add i32 %v0_15a7c, -4
  store i32 %v2_15a7c, i32* %r2.global-to-local, align 4
  %v6_15a80 = icmp slt i32 %v0_15a7c, 4
  br i1 %v6_15a80, label %dec_label_pc_15a84.loopexit, label %dec_label_pc_15a6c

dec_label_pc_15a84.loopexit:                      ; preds = %dec_label_pc_15a6c
  %v4_15a7c = sub i32 3, %v0_15a7c
  %v5_15a7c = and i32 %v4_15a7c, %v0_15a7c
  %v6_15a7c = icmp slt i32 %v5_15a7c, 0
  %v7_15a7c = icmp slt i32 %v2_15a7c, 0
  store i1 %v6_15a7c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15a7c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15a84

dec_label_pc_15a84:                               ; preds = %dec_label_pc_15a84.loopexit, %dec_label_pc_15a60
  %v2_1595c63 = phi i32 [ %v5_15a78, %dec_label_pc_15a84.loopexit ], [ %v1_15a54, %dec_label_pc_15a60 ]
  %v0_1594c59 = phi i32 [ %v2_15a7c, %dec_label_pc_15a84.loopexit ], [ %v2_15a64, %dec_label_pc_15a60 ]
  %v0_15a84 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a84 = add i32 %v0_15a84, 2
  store i32 %v1_15a84, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_15a8c:                               ; preds = %dec_label_pc_159a0
  br i1 %v5_15a90, label %dec_label_pc_15ad8, label %dec_label_pc_15a94

dec_label_pc_15a94:                               ; preds = %dec_label_pc_15a8c
  store i32 %v2_15a8c, i32* %r2.global-to-local, align 4
  %v3_15a98 = load i32, i32* @r4, align 4
  store i32 %v3_15a98, i32* %stack_var_-12, align 4
  %v6_15a98 = load i32, i32* @r5, align 4
  store i32 %v6_15a98, i32* %stack_var_-8, align 4
  %v9_15a98 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15a9c

dec_label_pc_15a9c:                               ; preds = %dec_label_pc_15a9c.dec_label_pc_15a9c_crit_edge, %dec_label_pc_15a94
  %v0_15ac0 = phi i32 [ %v1_15ac0, %dec_label_pc_15a9c.dec_label_pc_15a9c_crit_edge ], [ %v0_159e830, %dec_label_pc_15a94 ]
  %v0_15aa0 = phi i32 [ %v0_15aa0.pre, %dec_label_pc_15a9c.dec_label_pc_15a9c_crit_edge ], [ %v1_159a0, %dec_label_pc_15a94 ]
  %v0_15a9c = phi i32 [ %v0_15a9c.pre, %dec_label_pc_15a9c.dec_label_pc_15a9c_crit_edge ], [ %v2_159a4, %dec_label_pc_15a94 ]
  %v3_15a9c = mul i32 %v0_15a9c, 16777216
  store i32 %v3_15a9c, i32* %lr.global-to-local, align 4
  %v1_15aa0 = add i32 %v0_15aa0, -4
  %v2_15aa0 = inttoptr i32 %v1_15aa0 to i32*
  %v3_15aa0 = load i32, i32* %v2_15aa0, align 4
  store i32 %v3_15aa0, i32* %r3.global-to-local, align 4
  %v4_15aa0 = add i32 %v0_15aa0, -8
  %v5_15aa0 = inttoptr i32 %v4_15aa0 to i32*
  %v6_15aa0 = load i32, i32* %v5_15aa0, align 4
  store i32 %v6_15aa0, i32* %r4.global-to-local, align 4
  %v7_15aa0 = add i32 %v0_15aa0, -12
  %v8_15aa0 = inttoptr i32 %v7_15aa0 to i32*
  %v9_15aa0 = load i32, i32* %v8_15aa0, align 4
  store i32 %v9_15aa0, i32* %r5.global-to-local, align 4
  %v10_15aa0 = add i32 %v0_15aa0, -16
  %v11_15aa0 = inttoptr i32 %v10_15aa0 to i32*
  %v12_15aa0 = load i32, i32* %v11_15aa0, align 4
  store i32 %v10_15aa0, i32* %r1.global-to-local, align 4
  %v4_15aa4 = udiv i32 %v12_15aa0, 256
  %v5_15aa4 = or i32 %v4_15aa4, %v3_15a9c
  store i32 %v5_15aa4, i32* %lr.global-to-local, align 4
  %v3_15aa8 = mul i32 %v12_15aa0, 16777216
  %v4_15aac = udiv i32 %v9_15aa0, 256
  %v5_15aac = or i32 %v3_15aa8, %v4_15aac
  store i32 %v5_15aac, i32* %ip.global-to-local, align 4
  %v3_15ab0 = mul i32 %v9_15aa0, 16777216
  %v4_15ab4 = udiv i32 %v6_15aa0, 256
  %v5_15ab4 = or i32 %v3_15ab0, %v4_15ab4
  store i32 %v5_15ab4, i32* %r5.global-to-local, align 4
  %v3_15ab8 = mul i32 %v6_15aa0, 16777216
  %v4_15abc = udiv i32 %v3_15aa0, 256
  %v5_15abc = or i32 %v3_15ab8, %v4_15abc
  store i32 %v5_15abc, i32* %r4.global-to-local, align 4
  %v1_15ac0 = add i32 %v0_15ac0, -16
  %v2_15ac0 = inttoptr i32 %v1_15ac0 to i32*
  store i32 %v5_15abc, i32* %v2_15ac0, align 4
  %v4_15ac0 = add i32 %v0_15ac0, -12
  %v5_15ac0 = inttoptr i32 %v4_15ac0 to i32*
  %v6_15ac0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15ac0, i32* %v5_15ac0, align 4
  %v7_15ac0 = add i32 %v0_15ac0, -8
  %v8_15ac0 = inttoptr i32 %v7_15ac0 to i32*
  %v9_15ac0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_15ac0, i32* %v8_15ac0, align 4
  %v10_15ac0 = add i32 %v0_15ac0, -4
  %v11_15ac0 = inttoptr i32 %v10_15ac0 to i32*
  %v12_15ac0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15ac0, i32* %v11_15ac0, align 4
  store i32 %v1_15ac0, i32* %r0.global-to-local, align 4
  %v0_15ac4 = load i32, i32* %r2.global-to-local, align 4
  %v2_15ac4 = add i32 %v0_15ac4, -16
  store i32 %v2_15ac4, i32* %r2.global-to-local, align 4
  %v6_15ac8 = icmp slt i32 %v0_15ac4, 16
  br i1 %v6_15ac8, label %dec_label_pc_15acc, label %dec_label_pc_15a9c.dec_label_pc_15a9c_crit_edge

dec_label_pc_15a9c.dec_label_pc_15a9c_crit_edge:  ; preds = %dec_label_pc_15a9c
  %v0_15a9c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15aa0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a9c

dec_label_pc_15acc:                               ; preds = %dec_label_pc_15a9c
  %v2_15acc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15acc, i32* @r4, align 4
  %v5_15acc = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15acc, i32* @r5, align 4
  store i32 %v9_15a98, i32* @lr, align 4
  %v2_15ad0 = add i32 %v0_15ac4, -4
  store i32 %v2_15ad0, i32* %r2.global-to-local, align 4
  %v4_15ad0 = add i32 %v0_15ac4, 2147483632
  %v5_15ad0 = and i32 %v2_15ad0, %v4_15ad0
  %v6_15ad0 = icmp slt i32 %v5_15ad0, 0
  store i1 %v6_15ad0, i1* %cpsr_v.global-to-local, align 1
  %v7_15ad0 = icmp slt i32 %v2_15ad0, 0
  store i1 %v7_15ad0, i1* %cpsr_n.global-to-local, align 1
  %v8_15ad0 = icmp eq i32 %v2_15ad0, 0
  store i1 %v8_15ad0, i1* %cpsr_z.global-to-local, align 1
  %v5_15ad4 = icmp slt i32 %v2_15ac4, -12
  br i1 %v5_15ad4, label %dec_label_pc_15af0, label %dec_label_pc_15ad8

dec_label_pc_15ad8:                               ; preds = %dec_label_pc_15acc, %dec_label_pc_15a8c, %dec_label_pc_15ad8
  %v1_15ae4 = phi i32 [ %v5_15ae4, %dec_label_pc_15ad8 ], [ %v1_15ac0, %dec_label_pc_15acc ], [ %v0_159e830, %dec_label_pc_15a8c ]
  %v0_15ad8 = load i32, i32* %r3.global-to-local, align 4
  %v3_15ad8 = mul i32 %v0_15ad8, 16777216
  store i32 %v3_15ad8, i32* %ip.global-to-local, align 4
  %v0_15adc = load i32, i32* %r1.global-to-local, align 4
  %v1_15adc = add i32 %v0_15adc, -4
  %v2_15adc = inttoptr i32 %v1_15adc to i32*
  %v3_15adc = load i32, i32* %v2_15adc, align 4
  store i32 %v3_15adc, i32* %r3.global-to-local, align 4
  store i32 %v1_15adc, i32* %r1.global-to-local, align 4
  %v4_15ae0 = udiv i32 %v3_15adc, 256
  %v5_15ae0 = or i32 %v4_15ae0, %v3_15ad8
  store i32 %v5_15ae0, i32* %ip.global-to-local, align 4
  %v2_15ae4 = add i32 %v1_15ae4, -4
  %v3_15ae4 = inttoptr i32 %v2_15ae4 to i32*
  store i32 %v5_15ae0, i32* %v3_15ae4, align 4
  %v4_15ae4 = load i32, i32* %r0.global-to-local, align 4
  %v5_15ae4 = add i32 %v4_15ae4, -4
  store i32 %v5_15ae4, i32* %r0.global-to-local, align 4
  %v0_15ae8 = load i32, i32* %r2.global-to-local, align 4
  %v2_15ae8 = add i32 %v0_15ae8, -4
  store i32 %v2_15ae8, i32* %r2.global-to-local, align 4
  %v6_15aec = icmp slt i32 %v0_15ae8, 4
  br i1 %v6_15aec, label %dec_label_pc_15af0.loopexit, label %dec_label_pc_15ad8

dec_label_pc_15af0.loopexit:                      ; preds = %dec_label_pc_15ad8
  %v4_15ae8 = sub i32 3, %v0_15ae8
  %v5_15ae8 = and i32 %v4_15ae8, %v0_15ae8
  %v6_15ae8 = icmp slt i32 %v5_15ae8, 0
  %v7_15ae8 = icmp slt i32 %v2_15ae8, 0
  store i1 %v6_15ae8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15ae8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15af0

dec_label_pc_15af0:                               ; preds = %dec_label_pc_15af0.loopexit, %dec_label_pc_15acc
  %v2_1595c64 = phi i32 [ %v5_15ae4, %dec_label_pc_15af0.loopexit ], [ %v1_15ac0, %dec_label_pc_15acc ]
  %v0_1594c60 = phi i32 [ %v2_15ae8, %dec_label_pc_15af0.loopexit ], [ %v2_15ad0, %dec_label_pc_15acc ]
  %v0_15af0 = load i32, i32* %r1.global-to-local, align 4
  %v1_15af0 = add i32 %v0_15af0, 1
  store i32 %v1_15af0, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_15ae4, { 0, 2, 1 }
  uselistorder i32 %v3_15ad8, { 1, 0 }
  uselistorder i32 %v2_15ad0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15ac0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15aa0, { 1, 0 }
  uselistorder i32 %v3_15a9c, { 1, 0 }
  uselistorder i32 %v0_15aa0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15ac0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15a78, { 0, 2, 1 }
  uselistorder i32 %v3_15a6c, { 1, 0 }
  uselistorder i32 %v2_15a64, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15a54, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15a34, { 1, 0 }
  uselistorder i32 %v3_15a30, { 1, 0 }
  uselistorder i32 %v0_15a34, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15a54, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15a0c, { 0, 2, 1 }
  uselistorder i32 %v3_15a00, { 1, 0 }
  uselistorder i32 %v2_159f8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_159e8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_159c8, { 1, 0 }
  uselistorder i32 %v3_159c4, { 1, 0 }
  uselistorder i32 %v0_159c8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_159e8, { 3, 2, 1, 0 }
  uselistorder i1 %v5_15a90, { 2, 0, 1 }
  uselistorder i32 %v0_159a8, { 1, 0 }
  uselistorder i32 %v0_15a94, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_159e830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_15998, { 2, 1, 0 }
  uselistorder i32 %v0_15998, { 2, 0, 1 }
  uselistorder i32 %v2_15990, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15990, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15990, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_159e831, { 2, 1, 0 }
  uselistorder i32 %v11_1596c, { 1, 0 }
  uselistorder i32 %v7_1596c, { 1, 0 }
  uselistorder i32 %v1_1594c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1594c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_15950, { 1, 0 }
  uselistorder i32 %v7_15944, { 0, 2, 1 }
  uselistorder i32 %v10_15940, { 1, 0 }
  uselistorder i32 %v9_15938, { 1, 0, 2 }
  uselistorder i32 %v6_15934, { 1, 0 }
  uselistorder i32 %v2_1592c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1592c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1593c, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15920, { 0, 2, 1 }
  uselistorder i32 %v13_1591c, { 1, 0 }
  uselistorder i32 %v4_15918, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_15918, { 2, 0, 1 }
  uselistorder i32 %v6_15920, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15910, { 0, 2, 1 }
  uselistorder i32 %v16_1590c, { 1, 0 }
  uselistorder i32 %v4_15908, { 1, 2, 0 }
  uselistorder i32 %v0_15918.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_15910, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_158fc, { 0, 3, 2, 1 }
  uselistorder i32 %v10_158f8, { 1, 0 }
  uselistorder i32 %v1_158f4, { 1, 0 }
  uselistorder i32 %v10_158f0, { 1, 0 }
  uselistorder i32 %v0_158f0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_158f4, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_158e8, { 0, 2, 1 }
  uselistorder i32 %v2_158dc, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_158dc, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_158f448, { 1, 2, 0 }
  uselistorder i32 %v1_158d4, { 2, 1, 0 }
  uselistorder i32 %v1_158cc, { 2, 3, 1, 0 }
  uselistorder i32 %v2_158c4, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_158c0, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_158bc, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_158bc, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_158a8, { 0, 2, 1 }
  uselistorder i32 %v3_1589c, { 1, 0 }
  uselistorder i32 %v2_15894, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15884, { 1, 0, 3, 2 }
  uselistorder i32 %v8_15864, { 1, 0, 2 }
  uselistorder i32 %v5_15864, { 1, 0, 2 }
  uselistorder i32 %v2_15864, { 1, 0, 2 }
  uselistorder i32 %v3_15860, { 1, 0 }
  uselistorder i32 %v0_15864, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15884, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_1583c, { 0, 2, 1 }
  uselistorder i32 %v3_15830, { 1, 0 }
  uselistorder i32 %v2_15828, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15818, { 1, 0, 3, 2 }
  uselistorder i32 %v8_157f8, { 1, 0, 2 }
  uselistorder i32 %v5_157f8, { 1, 0, 2 }
  uselistorder i32 %v2_157f8, { 1, 0, 2 }
  uselistorder i32 %v3_157f4, { 1, 0 }
  uselistorder i32 %v0_157f8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15818, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_157d0, { 0, 2, 1 }
  uselistorder i32 %v3_157c4, { 1, 0 }
  uselistorder i32 %v2_157bc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_157ac, { 1, 0, 3, 2 }
  uselistorder i32 %v8_1578c, { 1, 0, 2 }
  uselistorder i32 %v5_1578c, { 1, 0, 2 }
  uselistorder i32 %v2_1578c, { 1, 0, 2 }
  uselistorder i32 %v3_15788, { 1, 0 }
  uselistorder i32 %v0_1578c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_157ac, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_15854, { 2, 0, 1 }
  uselistorder i32 %v0_15858, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_157ac74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_1575c, { 1, 0 }
  uselistorder i32 %v0_1575c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_15754, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15754, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15754, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_157ac75, { 2, 1, 0 }
  uselistorder i32 %v1_15734, { 1, 0, 2 }
  uselistorder i32 %v1_1570c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1570c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_156f8, { 1, 0, 2 }
  uselistorder i32 %v6_156f4, { 1, 0 }
  uselistorder i32 %v2_156ec, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_156ec, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_156fc, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_156e4, { 0, 2, 1 }
  uselistorder i32 %v3_156e4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_156e4, { 1, 0 }
  uselistorder i1 %v1_156e4, { 1, 0 }
  uselistorder i32 %v3_156e0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_156d8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_156c4, { 1, 2, 0 }
  uselistorder i32 %v12_156b8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_156ac, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_156b0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_156a0, { 0, 2, 1 }
  uselistorder i32 %v2_15698, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15698, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_15690, { 1, 0 }
  uselistorder i32 %v1_15688, { 2, 1, 0 }
  uselistorder i32 %v2_15680, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_15680, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_15670, { 1, 0 }
  uselistorder i32 %v1_15670, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_15670, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 48, 47, 53, 49, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 53, 54, 55, 21, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 7, 1, 9, 6, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 5, 19, 20, 21, 22, 23, 2, 24, 3, 26, 4, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 7, 1, 9, 6, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5, 20, 21, 22, 2, 23, 3, 25, 4, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 7, 1, 9, 6, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5, 20, 21, 22, 23, 24, 2, 25, 3, 27, 4, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 26, 27, 1, 0, 14, 16, 15, 17, 2, 19, 28, 20, 29, 21, 30, 22, 31, 23, 18, 32, 24, 6, 3, 7, 25, 8, 9, 4, 10, 11, 5, 12, 13 }
  uselistorder i32 -20, { 1, 0, 2 }
  uselistorder i32 -2, { 12, 13, 11, 23, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 24, 25, 26, 14, 22, 21, 20, 19, 18, 17 }
  uselistorder i32 65536, { 6, 5, 11, 7, 12, 8, 13, 9, 14, 10, 15, 16, 17, 21, 18, 22, 19, 23, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 1, 56, 57, 2, 58, 0, 3, 59, 60, 61, 62, 63, 66, 64, 65, 67, 68, 69, 74, 75, 76, 77, 70, 71, 72, 73, 78, 81, 82, 83, 79, 80, 84, 85, 86, 89, 90, 91, 87, 88, 92, 94, 93, 4, 96, 97, 95, 98, 99, 100, 102, 103, 104, 101, 105, 108, 109, 110, 106, 107, 111, 113, 112, 114, 116, 115, 118, 117, 119, 120, 121, 123, 124, 125, 122, 126, 127, 128, 130, 131, 132, 129, 134, 133 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32* @r5, {}
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 10, 11, 12, 23, 24, 0, 1, 13, 14, 15, 16, 4, 17, 5, 18, 6, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 2, 35, 36, 37, 7, 38, 39, 40, 3, 41, 42, 43, 44, 45, 46, 47, 48, 49, 8, 50, 51, 52, 9, 53 }
  uselistorder i32 -12, { 0, 13, 14, 1, 16, 17, 2, 18, 19, 15, 12, 11, 10, 9, 8, 20, 21, 22, 3, 4, 5, 23, 7, 24, 25, 26, 6 }
  uselistorder i32 48, { 0, 8, 9, 6, 7, 2, 11, 3, 1, 10, 4, 12, 5, 13 }
  uselistorder i32 40, { 1, 10, 0, 3, 8, 9, 11, 4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 2, 5, 22, 6, 23, 7, 24 }
  uselistorder i32 36, { 1, 8, 9, 6, 7, 0, 2, 3, 10, 4, 11, 5, 12 }
  uselistorder i32 -16, { 8, 9, 10, 11, 12, 13, 14, 15, 16, 7, 6, 5, 1, 17, 18, 19, 20, 21, 22, 4, 2, 0, 3 }
  uselistorder i32 -32, { 1, 0, 2, 4, 3 }
  uselistorder i32 24, { 0, 80, 81, 42, 43, 1, 82, 83, 39, 40, 12, 13, 69, 46, 74, 47, 48, 62, 66, 44, 45, 70, 49, 50, 51, 52, 53, 54, 55, 16, 56, 17, 57, 18, 58, 59, 60, 61, 63, 64, 71, 65, 72, 67, 68, 75, 76, 77, 73, 78, 79, 2, 84, 19, 20, 3, 85, 21, 22, 4, 86, 14, 87, 88, 89, 23, 24, 5, 25, 26, 90, 27, 28, 6, 15, 91, 29, 7, 8, 30, 92, 31, 9, 93, 94, 95, 32, 33, 96, 34, 97, 35, 10, 98, 36, 37, 99, 100, 38, 101, 11, 41 }
  uselistorder i32* @lr, { 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 0, 109, 110, 111, 1, 112, 113, 114, 2, 115, 116, 117, 118, 119, 120, 121, 122, 19, 20, 123, 124, 125, 126, 127, 52, 53, 54, 55, 60, 61, 62, 63, 21, 22, 23, 24, 25, 64, 65, 4, 5, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 6, 7, 10, 11, 3, 14, 12, 13, 8, 9, 81, 15, 16, 17, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }
  uselistorder i32 16, { 32, 33, 34, 167, 35, 168, 169, 36, 170, 171, 37, 172, 173, 174, 175, 176, 177, 83, 84, 69, 70, 88, 85, 86, 87, 89, 24, 90, 91, 4, 5, 6, 7, 8, 23, 9, 10, 0, 11, 12, 48, 73, 49, 38, 50, 39, 51, 71, 72, 74, 76, 77, 78, 25, 68, 13, 14, 22, 66, 15, 79, 16, 52, 75, 42, 41, 40, 80, 43, 81, 44, 53, 17, 54, 82, 55, 56, 26, 92, 93, 94, 95, 27, 96, 97, 98, 99, 100, 101, 102, 30, 103, 104, 105, 58, 106, 45, 57, 107, 108, 59, 109, 110, 111, 18, 112, 113, 1, 60, 114, 115, 116, 61, 117, 118, 119, 120, 121, 2, 62, 122, 123, 19, 124, 67, 20, 125, 63, 126, 127, 128, 21, 31, 129, 64, 130, 131, 3, 46, 132, 133, 134, 135, 136, 137, 28, 138, 139, 140, 141, 143, 142, 144, 145, 146, 147, 148, 149, 150, 29, 151, 152, 153, 154, 155, 157, 156, 158, 159, 160, 65, 161, 47, 162, 163, 164, 165, 166 }
  uselistorder i32 20, { 105, 2, 106, 107, 0, 3, 108, 29, 30, 19, 20, 1, 31, 32, 33, 34, 21, 23, 4, 24, 5, 25, 18, 16, 26, 22, 27, 28, 35, 38, 36, 6, 37, 39, 40, 41, 42, 44, 45, 43, 7, 46, 47, 48, 49, 50, 51, 54, 55, 52, 8, 53, 56, 57, 58, 59, 60, 61, 64, 65, 62, 9, 63, 66, 67, 68, 69, 72, 73, 70, 10, 71, 74, 75, 76, 77, 78, 79, 82, 80, 17, 81, 83, 84, 85, 88, 12, 86, 11, 87, 89, 90, 93, 14, 91, 13, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 15, 104 }
  uselistorder i32 27, { 1, 0, 6, 2, 7, 3, 8, 4, 9, 5, 10 }
  uselistorder i32 -28, { 1, 2, 0, 3 }
  uselistorder i32 7, { 48, 49, 51, 108, 114, 10, 53, 4, 11, 52, 2, 12, 54, 13, 55, 14, 56, 15, 57, 16, 58, 17, 59, 18, 60, 19, 61, 20, 62, 21, 63, 22, 64, 23, 65, 24, 66, 25, 67, 26, 68, 27, 69, 28, 70, 29, 71, 30, 72, 31, 73, 32, 74, 33, 75, 34, 76, 35, 77, 36, 78, 37, 79, 38, 39, 40, 80, 81, 82, 41, 83, 84, 85, 86, 5, 87, 88, 89, 90, 42, 91, 6, 92, 43, 93, 94, 7, 95, 96, 8, 97, 98, 99, 100, 101, 44, 102, 103, 104, 105, 106, 45, 107, 3, 109, 0, 46, 110, 1, 47, 111, 112, 50, 9, 113 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 6, 13, 12, 11, 10, 22, 23, 24, 25, 7, 26, 0, 29, 9, 27, 28, 5, 8, 1, 3, 2, 4 }
  uselistorder i1 false, { 44, 45, 46, 82, 16, 43, 83, 84, 40, 41, 42, 85, 15, 86, 87, 0, 49, 48, 50, 47, 2, 4, 88, 3, 12, 5, 52, 14, 11, 17, 54, 6, 7, 8, 51, 1, 18, 9, 10, 53, 89, 57, 90, 91, 58, 92, 23, 24, 25, 26, 59, 93, 94, 75, 95, 96, 97, 64, 98, 28, 29, 65, 99, 66, 100, 60, 61, 62, 27, 101, 63, 102, 103, 74, 104, 105, 106, 107, 108, 109, 67, 68, 110, 111, 69, 112, 70, 71, 113, 72, 114, 73, 115, 55, 56, 116, 117, 118, 119, 120, 121, 30, 31, 76, 122, 123, 77, 37, 124, 78, 20, 21, 32, 22, 33, 34, 35, 13, 36, 125, 38, 79, 80, 126, 19, 81, 127, 39, 128, 129 }
  uselistorder i32 4, { 85, 76, 77, 5, 446, 78, 447, 57, 6, 7, 79, 448, 80, 449, 450, 451, 452, 81, 453, 454, 455, 456, 82, 457, 458, 459, 460, 461, 8, 462, 463, 464, 465, 466, 83, 467, 56, 468, 469, 470, 471, 472, 473, 9, 10, 84, 474, 281, 282, 208, 209, 283, 284, 285, 475, 476, 477, 478, 479, 159, 160, 161, 58, 162, 163, 408, 410, 409, 406, 407, 370, 371, 372, 373, 411, 412, 413, 414, 395, 396, 397, 415, 416, 164, 165, 166, 167, 168, 49, 11, 12, 286, 287, 288, 289, 290, 291, 13, 14, 67, 15, 16, 68, 417, 418, 206, 17, 18, 235, 102, 86, 419, 420, 59, 212, 103, 213, 236, 237, 229, 230, 238, 239, 214, 215, 210, 211, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 104, 232, 233, 234, 231, 69, 240, 241, 87, 105, 19, 242, 20, 243, 244, 21, 22, 245, 246, 51, 247, 50, 252, 106, 253, 107, 254, 108, 255, 109, 256, 110, 257, 111, 258, 112, 259, 113, 260, 114, 261, 115, 262, 116, 263, 117, 264, 118, 265, 119, 266, 120, 267, 121, 268, 122, 270, 123, 271, 124, 272, 273, 269, 248, 125, 249, 250, 251, 274, 65, 64, 63, 275, 126, 23, 24, 25, 26, 27, 28, 276, 52, 277, 53, 278, 279, 280, 0, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 292, 169, 293, 294, 295, 296, 170, 171, 141, 297, 66, 29, 140, 298, 88, 299, 300, 172, 301, 302, 173, 174, 303, 142, 304, 89, 305, 306, 175, 176, 307, 177, 308, 309, 178, 179, 70, 310, 143, 311, 90, 312, 313, 314, 315, 316, 317, 144, 91, 318, 319, 180, 320, 321, 322, 323, 181, 182, 2, 324, 145, 325, 92, 326, 327, 328, 183, 329, 330, 184, 185, 3, 71, 331, 146, 332, 93, 333, 334, 335, 336, 186, 187, 337, 338, 339, 188, 340, 341, 147, 342, 4, 343, 94, 344, 148, 345, 346, 347, 189, 348, 349, 350, 351, 352, 190, 191, 149, 353, 72, 95, 354, 96, 355, 356, 357, 192, 358, 359, 360, 150, 361, 151, 362, 363, 364, 365, 193, 194, 152, 366, 73, 367, 97, 368, 98, 369, 195, 374, 375, 30, 196, 376, 377, 31, 197, 378, 379, 32, 198, 380, 381, 33, 199, 74, 382, 383, 34, 384, 200, 385, 386, 35, 201, 387, 388, 36, 202, 389, 390, 37, 203, 391, 392, 38, 204, 393, 394, 39, 398, 205, 399, 400, 401, 402, 40, 403, 404, 1, 421, 405, 422, 423, 101, 424, 425, 75, 426, 153, 427, 428, 429, 430, 99, 431, 154, 432, 433, 434, 100, 435, 155, 436, 41, 42, 43, 437, 438, 62, 61, 60, 439, 44, 45, 46, 156, 440, 157, 441, 47, 48, 442, 54, 443, 55, 158, 444, 445, 207 }
  uselistorder i32* @r2, { 90, 91, 26, 9, 27, 29, 28, 30, 31, 32, 33, 7, 92, 1, 93, 98, 99, 102, 94, 54, 58, 59, 62, 60, 61, 55, 56, 57, 42, 63, 15, 0, 100, 3, 101, 6, 34, 35, 36, 8, 10, 95, 96, 97, 11, 64, 65, 66, 67, 2, 68, 69, 70, 71, 72, 73, 4, 74, 75, 76, 77, 78, 79, 80, 16, 12, 13, 14, 19, 20, 17, 18, 21, 22, 23, 24, 25, 37, 38, 39, 40, 41, 5, 44, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 81, 82, 83, 84, 85, 86, 87, 88, 89 }
  uselistorder label %dec_label_pc_15ad8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a6c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a00, { 2, 0, 1 }
  uselistorder label %dec_label_pc_159a0, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_1592c, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_158f0, { 1, 0 }
  uselistorder label %dec_label_pc_158dc, { 1, 0 }
  uselistorder label %dec_label_pc_1589c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15830, { 2, 0, 1 }
  uselistorder label %dec_label_pc_157c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15764, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_156d8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_15698, { 1, 0 }
}

define i32 @function_15af8(i32 %arg1) local_unnamed_addr {
dec_label_pc_15af8:
  ret i32 %arg1
}

define i32 @function_15b00() local_unnamed_addr {
dec_label_pc_15b00:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_15b00 = load i32, i32* @r0, align 4
  %v2_15b00 = icmp eq i32 %v0_15b00, 0
  %v3_15b04 = load i32, i32* @r4, align 4
  store i32 %v3_15b04, i32* %stack_var_-20, align 4
  %v0_15b08 = load i32, i32* @r1, align 4
  br i1 %v2_15b00, label %dec_label_pc_15be0, label %dec_label_pc_15b1c.lr.ph

dec_label_pc_15b1c:                               ; preds = %dec_label_pc_15b1c.lr.ph, %dec_label_pc_15ba0
  %v1_15ba0 = phi i32 [ 0, %dec_label_pc_15b1c.lr.ph ], [ %v5_15ba0, %dec_label_pc_15ba0 ]
  %v0_15ba4 = phi i32 [ 1, %dec_label_pc_15b1c.lr.ph ], [ %v1_15ba4, %dec_label_pc_15ba0 ]
  %v0_15b24 = phi i32 [ %v0_15b00, %dec_label_pc_15b1c.lr.ph ], [ %v0_15b2425, %dec_label_pc_15ba0 ]
  %v1_15b24 = inttoptr i32 %v0_15b24 to i8*
  %v2_15b24 = load i8, i8* %v1_15b24, align 1
  %v3_15b24 = zext i8 %v2_15b24 to i32
  %v3_15b28 = mul nuw nsw i32 %v3_15b24, 2
  %v4_15b28 = add i32 %v3_15b28, %v2_15b20.pre
  %v5_15b28 = inttoptr i32 %v4_15b28 to i8*
  %v6_15b28 = load i8, i8* %v5_15b28, align 1
  %v1_15b2c = and i8 %v6_15b28, 8
  %v2_15b2c = icmp eq i8 %v1_15b2c, 0
  br i1 %v2_15b2c, label %dec_label_pc_15be0, label %dec_label_pc_15b34

dec_label_pc_15b34:                               ; preds = %dec_label_pc_15b1c
  br label %dec_label_pc_15b54

dec_label_pc_15b3c:                               ; preds = %dec_label_pc_15b54
  %v3_15b40 = mul i32 %v0_15ba0, 10
  %v4_15b40 = add i32 %v3_15b54, %v3_15b40
  %v1_15b44 = add i32 %v4_15b40, -48
  %v8_15b4c = icmp sgt i32 %v1_15b44, 255
  br i1 %v8_15b4c, label %dec_label_pc_15be0, label %dec_label_pc_15b50

dec_label_pc_15b50:                               ; preds = %dec_label_pc_15b3c
  %v1_15b50 = add i32 %v0_15b90, 1
  store i32 %v1_15b50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15b54

dec_label_pc_15b54:                               ; preds = %dec_label_pc_15b34, %dec_label_pc_15b50
  %v0_15ba0 = phi i32 [ 0, %dec_label_pc_15b34 ], [ %v1_15b44, %dec_label_pc_15b50 ]
  %v0_15b90 = phi i32 [ %v0_15b24, %dec_label_pc_15b34 ], [ %v1_15b50, %dec_label_pc_15b50 ]
  %v1_15b54 = inttoptr i32 %v0_15b90 to i8*
  %v2_15b54 = load i8, i8* %v1_15b54, align 1
  %v3_15b54 = zext i8 %v2_15b54 to i32
  %v2_15b58 = mul nuw nsw i32 %v3_15b54, 2
  %v2_15b5c = add i32 %v2_15b58, %v2_15b20.pre
  %v3_15b60 = inttoptr i32 %v2_15b5c to i8*
  %v4_15b60 = load i8, i8* %v3_15b60, align 1
  %v6_15b60 = zext i8 %v4_15b60 to i32
  %v1_15b6c = and i32 %v6_15b60, 8
  %v2_15b6c = icmp eq i32 %v1_15b6c, 0
  br i1 %v2_15b6c, label %dec_label_pc_15b74, label %dec_label_pc_15b3c

dec_label_pc_15b74:                               ; preds = %dec_label_pc_15b54
  %v8_15b78 = icmp sgt i32 %v0_15ba4, 3
  br i1 %v8_15b78, label %dec_label_pc_15b8c, label %dec_label_pc_15b7c

dec_label_pc_15b7c:                               ; preds = %dec_label_pc_15b74
  %v7_15b7c = icmp eq i8 %v2_15b54, 46
  br i1 %v7_15b7c, label %dec_label_pc_15b84, label %dec_label_pc_15be0

dec_label_pc_15b84:                               ; preds = %dec_label_pc_15b7c
  %v1_15b84 = add i32 %v0_15b90, 1
  store i32 %v1_15b84, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15ba0

dec_label_pc_15b8c:                               ; preds = %dec_label_pc_15b74
  %v2_15b8c = icmp eq i8 %v2_15b54, 0
  %v1_15b90 = add i32 %v0_15b90, 1
  store i32 %v1_15b90, i32* %r0.global-to-local, align 4
  br i1 %v2_15b8c, label %dec_label_pc_15ba0, label %dec_label_pc_15b98

dec_label_pc_15b98:                               ; preds = %dec_label_pc_15b8c
  %v1_15b98 = and i32 %v6_15b60, 32
  %v2_15b98 = icmp eq i32 %v1_15b98, 0
  br i1 %v2_15b98, label %dec_label_pc_15be0, label %dec_label_pc_15ba0

dec_label_pc_15ba0:                               ; preds = %dec_label_pc_15b98, %dec_label_pc_15b8c, %dec_label_pc_15b84
  %v0_15b2425 = phi i32 [ %v1_15b90, %dec_label_pc_15b98 ], [ %v1_15b90, %dec_label_pc_15b8c ], [ %v1_15b84, %dec_label_pc_15b84 ]
  %v4_15ba0 = mul i32 %v1_15ba0, 256
  %v5_15ba0 = or i32 %v0_15ba0, %v4_15ba0
  %v1_15ba4 = add nuw nsw i32 %v0_15ba4, 1
  %v7_15bac = icmp slt i32 %v1_15ba4, 5
  br i1 %v7_15bac, label %dec_label_pc_15b1c, label %dec_label_pc_15bb0

dec_label_pc_15b1c.lr.ph:                         ; preds = %dec_label_pc_15b00
  %v2_15b20.pre = load i32, i32* bitcast (i32** @global_var_1f174.945 to i32*), align 4
  br label %dec_label_pc_15b1c

dec_label_pc_15bb0:                               ; preds = %dec_label_pc_15ba0
  %v2_15bb0 = icmp eq i32 %v0_15b08, 0
  br i1 %v2_15bb0, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_15bb0
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_15bb0
  %v2_15bb8 = and i32 %v5_15ba0, ptrtoint (i32* @global_var_ff00.24 to i32)
  %v2_15bb4 = udiv i32 %v5_15ba0, 256
  %v4_15bbc = and i32 %v2_15bb4, 65280
  %v4_15bc0 = mul i32 %v2_15bb8, 256
  %v5_15bc4 = udiv i32 %v5_15ba0, 16777216
  %v6_15bc4 = or i32 %v4_15bbc, %v5_15bc4
  %v5_15bc8 = mul i32 %v0_15ba0, 16777216
  %v6_15bc8 = or i32 %v4_15bc0, %v5_15bc8
  %v3_15bcc = or i32 %v6_15bc4, %v6_15bc8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15bd8 = inttoptr i32 %v0_15b08 to i32*
  store i32 %v3_15bcc, i32* %v3_15bd8, align 4
  %v2_15bdc.pre = load i32, i32* %stack_var_-20, align 4
  %v17_15bdc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_15bdc = phi i32 [ 1, %bb ], [ %v17_15bdc.pre, %bb40 ]
  %v2_15bdc = phi i32 [ %v3_15b04, %bb ], [ %v2_15bdc.pre, %bb40 ]
  store i32 %v2_15bdc, i32* @r4, align 4
  ret i32 %v17_15bdc

dec_label_pc_15be0:                               ; preds = %dec_label_pc_15b7c, %dec_label_pc_15b98, %dec_label_pc_15b1c, %dec_label_pc_15b3c, %dec_label_pc_15b00
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_15b04, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_15b20.pre, { 1, 0 }
  uselistorder i32 %v1_15ba4, { 1, 0 }
  uselistorder i32 %v0_15b90, { 0, 1, 3, 2 }
  uselistorder i32 %v3_15b04, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 49, 48, 51, 50, 54, 52, 55, 53, 57, 56, 61, 58, 60, 59, 62, 64, 63, 66, 65, 68, 67, 69, 71, 70, 72, 79, 73, 80, 74, 81, 75, 82, 83, 76, 84, 77, 85, 78, 87, 86, 91, 88, 92, 89, 93, 90, 95, 94, 96, 98, 97, 99, 102, 100, 103, 101, 104, 106, 105, 107, 108, 110, 109, 111, 117, 112, 118, 113, 119, 114, 120, 115, 121, 116, 123, 122, 124, 126, 125, 130, 127, 131, 128, 132, 129, 135, 136, 133, 137, 134, 138, 140, 139, 141, 146, 142, 147, 143, 148, 144, 145, 149, 151, 150, 156, 152, 157, 153, 158, 155, 159, 160, 161, 154, 162, 164, 163, 169, 165, 170, 166, 171, 168, 172, 173, 174, 167, 176, 175, 179, 177, 180, 178, 181, 183, 184, 182, 185 }
  uselistorder i32 65280, { 0, 21, 2, 3, 20, 1, 4, 22, 5, 6, 23, 7, 24, 8, 9, 10, 11, 12, 14, 15, 25, 13, 26, 16, 27, 28, 29, 17, 30, 31, 18, 32, 19 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.24 to i32), { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 16, 0, 17 }
  uselistorder i32 5, { 15, 56, 16, 5, 17, 6, 2, 18, 57, 3, 0, 19, 58, 20, 59, 21, 60, 22, 61, 23, 62, 24, 63, 25, 64, 26, 65, 27, 66, 28, 67, 29, 68, 30, 69, 31, 70, 32, 71, 33, 72, 34, 73, 35, 74, 36, 75, 37, 76, 38, 77, 39, 78, 40, 79, 41, 80, 42, 81, 43, 82, 44, 83, 45, 84, 46, 85, 47, 86, 48, 49, 50, 51, 52, 53, 87, 88, 89, 90, 7, 91, 92, 93, 94, 8, 95, 96, 97, 98, 99, 100, 101, 102, 9, 103, 104, 54, 105, 10, 106, 107, 108, 11, 109, 110, 111, 112, 12, 113, 114, 115, 116, 117, 118, 119, 13, 120, 121, 122, 123, 124, 125, 126, 14, 127, 4, 128, 129, 1, 130, 131, 55, 132 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 62, 63, 67, 70, 71, 72, 68, 69, 73, 74, 75, 76, 77, 430, 431, 78, 79, 80, 81, 82, 83, 84, 432, 85, 86, 88, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 99, 100, 104, 103, 102, 105, 428, 433, 110, 106, 109, 107, 108, 426, 111, 112, 113, 116, 115, 114, 117, 119, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 129, 131, 132, 133, 137, 143, 138, 134, 135, 139, 140, 141, 144, 136, 145, 146, 142, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 159, 162, 165, 166, 164, 163, 167, 170, 169, 168, 171, 177, 174, 178, 175, 172, 179, 173, 180, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 197, 199, 200, 201, 212, 207, 202, 213, 208, 214, 215, 209, 216, 210, 203, 204, 205, 217, 206, 218, 211, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 243, 253, 249, 250, 245, 246, 254, 251, 247, 255, 252, 248, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 272, 271, 274, 276, 281, 282, 277, 283, 278, 275, 284, 279, 280, 285, 286, 287, 288, 289, 290, 291, 294, 295, 292, 296, 293, 301, 297, 299, 298, 300, 302, 303, 304, 305, 306, 309, 310, 313, 311, 307, 314, 312, 308, 317, 316, 315, 427, 434, 318, 319, 325, 320, 326, 321, 322, 327, 323, 328, 329, 324, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 349, 351, 352, 356, 357, 364, 358, 359, 365, 360, 353, 354, 366, 361, 355, 362, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 381, 383, 384, 388, 389, 396, 390, 391, 397, 392, 385, 386, 398, 393, 387, 394, 395, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 417, 419, 420, 421, 422, 423, 424, 425, 429 }
  uselistorder i32 32, { 67, 50, 51, 48, 62, 63, 60, 61, 4, 3, 6, 5, 8, 7, 49, 47, 68, 69, 53, 52, 10, 9, 12, 11, 14, 13, 16, 15, 59, 18, 17, 19, 21, 20, 23, 22, 24, 25, 27, 26, 54, 55, 64, 65, 28, 66, 56, 57, 29, 30, 0, 31, 1, 2, 32, 33, 34, 35, 36, 38, 37, 40, 39, 42, 41, 43, 44, 45, 46, 58 }
  uselistorder i8 46, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 3, { 34, 65, 66, 174, 67, 68, 69, 70, 71, 72, 85, 105, 175, 4, 166, 169, 170, 0, 73, 21, 74, 22, 171, 80, 35, 23, 24, 86, 38, 87, 2, 88, 89, 90, 91, 36, 19, 92, 93, 94, 95, 39, 96, 40, 97, 41, 98, 42, 99, 43, 100, 44, 101, 25, 102, 45, 103, 37, 104, 46, 47, 48, 49, 50, 51, 1, 106, 107, 108, 109, 110, 111, 112, 113, 52, 114, 53, 115, 54, 26, 116, 117, 118, 119, 120, 6, 5, 55, 27, 121, 122, 123, 124, 125, 126, 127, 8, 7, 56, 128, 28, 129, 130, 131, 132, 133, 134, 135, 136, 10, 9, 57, 137, 29, 138, 139, 140, 141, 142, 12, 11, 58, 143, 30, 144, 145, 146, 147, 59, 148, 14, 13, 60, 149, 31, 150, 151, 152, 153, 154, 155, 16, 15, 61, 156, 32, 157, 158, 159, 160, 161, 162, 163, 18, 17, 62, 164, 33, 165, 20, 167, 3, 168, 172, 75, 81, 76, 82, 77, 83, 78, 84, 63, 173, 64, 79 }
  uselistorder i32 8, { 177, 195, 31, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 32, 212, 122, 123, 124, 125, 129, 126, 127, 128, 213, 181, 180, 178, 179, 163, 164, 165, 182, 183, 184, 171, 172, 173, 6, 35, 36, 33, 34, 17, 18, 27, 28, 37, 214, 130, 131, 132, 133, 7, 8, 82, 21, 9, 10, 16, 11, 45, 88, 38, 12, 13, 14, 83, 46, 87, 30, 89, 90, 91, 92, 94, 47, 95, 48, 96, 49, 97, 50, 98, 51, 99, 52, 100, 53, 101, 54, 102, 55, 103, 56, 104, 57, 105, 58, 106, 59, 107, 60, 108, 61, 109, 62, 110, 63, 111, 64, 112, 65, 113, 66, 114, 67, 115, 68, 116, 69, 117, 70, 118, 71, 119, 72, 120, 121, 93, 15, 73, 74, 75, 134, 29, 81, 39, 135, 136, 137, 138, 139, 22, 140, 141, 142, 143, 3, 144, 145, 146, 4, 147, 148, 149, 150, 151, 152, 153, 5, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 40, 167, 41, 168, 42, 169, 76, 170, 79, 174, 175, 77, 176, 0, 1, 2, 19, 23, 24, 185, 20, 25, 26, 186, 78, 84, 85, 187, 188, 190, 189, 191, 192, 43, 193, 80, 86, 44, 194 }
  uselistorder i32 255, { 2, 15, 16, 3, 17, 4, 18, 5, 19, 0, 1, 8, 20, 9, 21, 6, 22, 7, 23, 12, 24, 13, 25, 10, 26, 11, 27, 14, 28 }
  uselistorder i32 10, { 11, 64, 65, 37, 38, 93, 0, 12, 4, 46, 39, 13, 44, 45, 3, 47, 48, 40, 14, 49, 41, 50, 15, 51, 16, 52, 17, 53, 18, 54, 19, 55, 20, 56, 21, 57, 22, 58, 23, 59, 24, 60, 25, 61, 26, 62, 63, 27, 1, 28, 29, 30, 5, 66, 67, 68, 69, 70, 71, 72, 73, 74, 6, 75, 76, 77, 7, 78, 79, 80, 31, 81, 8, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 9, 94, 95, 2, 35, 42, 96, 33, 97, 36, 43, 10, 98, 32, 99, 34 }
  uselistorder i8 0, { 4, 0, 23, 3, 24, 25, 1, 8, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 5, 37, 38, 39, 40, 11, 41, 2, 10, 9, 12, 42, 43, 44, 45, 18, 46, 47, 50, 19, 48, 49, 17, 51, 52, 53, 54, 55, 56, 13, 57, 58, 14, 21, 59, 60, 61, 63, 64, 7, 67, 16, 73, 68, 69, 65, 66, 15, 20, 70, 71, 72, 6, 74, 75, 62, 22, 76, 77, 78, 79, 80, 81, 82 }
  uselistorder i32 2, { 4, 140, 266, 267, 57, 268, 269, 47, 270, 46, 271, 45, 143, 81, 82, 251, 83, 252, 84, 253, 272, 52, 85, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 141, 14, 15, 16, 17, 18, 87, 88, 86, 48, 49, 89, 161, 90, 92, 145, 94, 146, 95, 147, 96, 148, 93, 149, 155, 63, 144, 64, 150, 65, 151, 66, 152, 67, 153, 68, 154, 69, 160, 156, 157, 158, 159, 59, 97, 162, 19, 20, 163, 165, 166, 98, 167, 53, 142, 99, 168, 100, 169, 101, 170, 171, 91, 172, 21, 102, 164, 106, 173, 104, 174, 105, 175, 103, 107, 176, 22, 23, 24, 108, 177, 109, 70, 110, 111, 60, 113, 114, 112, 115, 178, 50, 56, 179, 180, 181, 237, 238, 182, 183, 184, 185, 186, 187, 188, 116, 189, 71, 190, 191, 192, 193, 194, 117, 72, 195, 196, 197, 198, 199, 200, 201, 118, 202, 73, 203, 204, 119, 120, 121, 205, 206, 207, 208, 209, 210, 211, 212, 1, 25, 26, 27, 28, 29, 30, 122, 213, 74, 214, 215, 216, 217, 218, 2, 31, 32, 33, 34, 35, 36, 123, 75, 219, 220, 221, 222, 124, 223, 54, 224, 77, 225, 3, 37, 38, 39, 40, 41, 42, 125, 226, 76, 227, 228, 229, 230, 231, 232, 233, 234, 126, 235, 78, 236, 239, 240, 241, 127, 242, 128, 243, 244, 245, 246, 129, 247, 79, 248, 61, 249, 58, 62, 250, 51, 130, 254, 255, 80, 256, 137, 257, 131, 258, 132, 133, 259, 134, 260, 135, 261, 136, 262, 55, 263, 43, 44, 264, 138, 265, 139 }
  uselistorder i32* @r1, { 35, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 1, 97, 98, 16, 17, 19, 18, 5, 6, 99, 0, 100, 37, 38, 102, 39, 44, 45, 48, 46, 47, 40, 41, 42, 43, 34, 49, 101, 11, 4, 36, 20, 7, 50, 51, 3, 52, 53, 54, 12, 8, 9, 10, 13, 14, 15, 21, 22, 31, 32, 2, 23, 24, 25, 26, 27, 28, 29, 30, 33, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 }
  uselistorder label %dec_label_pc_15be0, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_15b54, { 1, 0 }
}

define i32 @function_15bec(i32 %arg1) local_unnamed_addr {
dec_label_pc_15bec:
  %v3_15bec = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_15bf4 = call i32 @function_13648()
  %v0_15bf8 = load i32, i32* @r4, align 4
  store i32 %v3_15bec, i32* @r4, align 4
  %v2_15c00 = call i32 @function_136f0(i32 %v0_15bf4, i32 %v0_15bf8)
  ret i32 %v2_15c00

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_136f0, { 4, 6, 3, 2, 1, 0, 5 }
}

define i32 @function_15c04(i32 %arg1) local_unnamed_addr {
dec_label_pc_15c04:
  %v1_15c04 = add i32 %arg1, 28
  %v2_15c04 = inttoptr i32 %v1_15c04 to i32*
  %v3_15c04 = load i32, i32* %v2_15c04, align 4
  %v1_15c0c = add i32 %arg1, 44
  %v2_15c0c = inttoptr i32 %v1_15c0c to i32*
  %v3_15c0c = load i32, i32* %v2_15c0c, align 4
  store i32 %v3_15c04, i32* @global_var_1f4d0.947, align 4
  store i32 %v3_15c0c, i32* @global_var_1f4d4.949, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 17, 0, 6, 7, 4, 5, 12, 13, 8, 9, 10, 11, 2, 14, 1, 15, 3, 16 }
  uselistorder i32 28, { 32, 0, 22, 23, 8, 9, 31, 1, 10, 4, 11, 5, 12, 6, 13, 14, 15, 16, 17, 18, 19, 2, 7, 21, 20, 24, 25, 26, 27, 28, 29, 30, 3 }
}

define i32 @function_15c28(i32* %arg1) local_unnamed_addr {
dec_label_pc_15c28:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_15c30 = call i32 @brk(i32* %arg1)
  %v3_15c34 = icmp ult i32 %v2_15c30, %tmp
  store i32 %v2_15c30, i32* @global_var_1f234.943, align 4
  br i1 %v3_15c34, label %dec_label_pc_15c48, label %dec_label_pc_15c58

dec_label_pc_15c48:                               ; preds = %dec_label_pc_15c28
  %v0_15c48 = call i32 @function_13b98()
  %v2_15c50 = inttoptr i32 %v0_15c48 to i32*
  store i32 12, i32* %v2_15c50, align 4
  br label %dec_label_pc_15c58

dec_label_pc_15c58:                               ; preds = %dec_label_pc_15c28, %dec_label_pc_15c48
  %v0_15c58 = phi i32 [ 0, %dec_label_pc_15c28 ], [ -1, %dec_label_pc_15c48 ]
  ret i32 %v0_15c58

; uselistorder directives
  uselistorder i32 12, { 17, 10, 115, 116, 117, 119, 120, 121, 122, 11, 118, 123, 124, 125, 126, 127, 128, 129, 58, 59, 26, 27, 60, 18, 19, 100, 101, 102, 0, 97, 103, 7, 104, 8, 98, 4, 99, 20, 21, 6, 61, 62, 22, 63, 64, 12, 13, 29, 30, 43, 44, 40, 37, 45, 31, 28, 32, 33, 34, 35, 36, 38, 41, 42, 39, 46, 47, 48, 9, 49, 50, 52, 53, 54, 23, 55, 24, 56, 5, 57, 51, 92, 65, 25, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 14, 77, 78, 79, 80, 81, 15, 82, 83, 84, 85, 86, 87, 16, 88, 89, 90, 91, 93, 94, 95, 96, 1, 2, 3, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114 }
  uselistorder i32 ()* @function_13b98, { 29, 57, 28, 52, 10, 9, 8, 7, 51, 50, 49, 6, 58, 27, 26, 24, 25, 42, 41, 23, 22, 32, 21, 14, 20, 53, 19, 40, 18, 43, 39, 48, 47, 46, 38, 17, 5, 4, 37, 16, 45, 44, 36, 3, 12, 35, 34, 11, 31, 15, 2, 1, 33, 56, 55, 54, 30, 13, 0 }
  uselistorder i32* @global_var_1f234.943, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15c58, { 1, 0 }
}

define i32 @function_15c64(i32 %arg1) local_unnamed_addr {
dec_label_pc_15c64:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15c68 = load i32, i32* @global_var_1f000.905, align 4
  %v7_15c6c = icmp eq i32 %v3_15c68, -1
  %v3_15c70 = load i32, i32* @r4, align 4
  store i32 %v3_15c70, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1f000.905 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_15c6c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_15c64
  store i32 %v3_15c70, i32* %r4.global-to-local, align 4
  %v9_15c78 = load i32, i32* @r0, align 4
  ret i32 %v9_15c78

.preheader:                                       ; preds = %dec_label_pc_15c64, %.preheader
  %v0_15c80 = phi i32 [ %v3_15c84, %.preheader ], [ %v3_15c68, %dec_label_pc_15c64 ]
  call void @__pseudo_branch(i32 %v0_15c80)
  %v0_15c84 = load i32, i32* %r4.global-to-local, align 4
  %v1_15c84 = add i32 %v0_15c84, -4
  %v2_15c84 = inttoptr i32 %v1_15c84 to i32*
  %v3_15c84 = load i32, i32* %v2_15c84, align 4
  store i32 %v1_15c84, i32* %r4.global-to-local, align 4
  %v3_15c88 = icmp eq i32 %v3_15c84, -1
  br i1 %v3_15c88, label %dec_label_pc_15c90, label %.preheader

dec_label_pc_15c90:                               ; preds = %.preheader
  %v2_15c90 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15c90, i32* %r4.global-to-local, align 4
  %v8_15c90 = load i32, i32* @r0, align 4
  ret i32 %v8_15c90

; uselistorder directives
  uselistorder i32 %v3_15c84, { 1, 0 }
  uselistorder i32 %v3_15c68, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 55, 16, 56, 57, 58, 3, 17, 18, 19, 59, 60, 61, 4, 20, 21, 22, 62, 63, 64, 5, 23, 24, 65, 15, 14, 66, 67, 68, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 69, 9, 32, 43, 44, 50, 45, 33, 34, 46, 47, 48, 49, 51, 8, 7, 40, 41, 42, 6, 35, 36, 52, 37, 38, 53, 54, 39 }
  uselistorder i32 -1, { 154, 0, 86, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 155, 87, 271, 88, 301, 89, 302, 290, 90, 342, 91, 343, 92, 344, 93, 345, 133, 84, 291, 292, 94, 293, 294, 95, 346, 1, 156, 2, 96, 303, 304, 157, 158, 159, 135, 160, 3, 4, 83, 73, 74, 161, 162, 163, 82, 272, 164, 273, 5, 6, 97, 305, 98, 306, 99, 299, 100, 307, 101, 298, 102, 308, 103, 289, 104, 309, 105, 274, 106, 310, 107, 297, 108, 275, 109, 165, 153, 110, 166, 111, 276, 112, 311, 113, 347, 348, 114, 277, 115, 312, 116, 295, 117, 296, 118, 278, 119, 349, 120, 325, 121, 279, 122, 280, 123, 326, 124, 300, 125, 313, 126, 350, 85, 351, 167, 168, 169, 170, 171, 172, 173, 174, 7, 8, 9, 10, 11, 127, 128, 12, 175, 281, 18, 176, 19, 177, 14, 178, 179, 282, 13, 180, 77, 20, 181, 182, 17, 183, 184, 185, 268, 269, 186, 187, 188, 266, 129, 267, 21, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 270, 15, 209, 16, 210, 211, 212, 22, 213, 214, 130, 283, 215, 23, 216, 284, 78, 75, 76, 24, 25, 28, 136, 285, 27, 138, 286, 26, 137, 287, 29, 30, 139, 288, 31, 32, 33, 34, 35, 217, 36, 79, 37, 38, 40, 218, 132, 39, 80, 41, 42, 43, 44, 45, 46, 47, 219, 48, 131, 49, 50, 52, 220, 51, 53, 54, 55, 56, 221, 57, 58, 59, 222, 60, 61, 62, 223, 63, 64, 65, 66, 67, 224, 68, 69, 70, 225, 71, 72, 81, 226, 227, 228, 229, 314, 315, 145, 316, 143, 317, 144, 318, 141, 319, 230, 231, 232, 233, 234, 146, 320, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 140, 321, 147, 322, 261, 262, 263, 148, 264, 265, 142, 323, 134, 149, 324, 150, 151, 152 }
  uselistorder i32* @global_var_1f000.905, { 1, 0 }
  uselistorder i32 1, { 540, 43, 329, 367, 913, 914, 915, 916, 917, 343, 541, 289, 1025, 332, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 544, 543, 542, 301, 302, 305, 304, 300, 299, 303, 308, 306, 298, 307, 545, 99, 98, 94, 96, 95, 97, 100, 93, 705, 104, 101, 103, 102, 546, 90, 547, 259, 260, 548, 91, 228, 549, 297, 550, 26, 551, 290, 552, 277, 793, 794, 553, 282, 278, 283, 279, 280, 284, 281, 795, 796, 797, 414, 123, 124, 120, 122, 121, 554, 294, 555, 168, 0, 559, 558, 557, 556, 14, 13, 415, 560, 229, 344, 416, 561, 218, 562, 919, 567, 566, 565, 564, 563, 77, 78, 79, 81, 80, 417, 568, 1038, 345, 571, 570, 569, 292, 291, 572, 231, 232, 230, 233, 105, 106, 107, 108, 573, 46, 47, 45, 44, 574, 575, 296, 295, 576, 346, 920, 577, 255, 256, 418, 419, 327, 581, 580, 579, 578, 49, 48, 333, 582, 258, 583, 254, 584, 217, 585, 253, 586, 243, 587, 219, 588, 66, 589, 150, 590, 151, 591, 152, 592, 115, 593, 116, 594, 886, 318, 119, 118, 117, 706, 707, 708, 709, 710, 711, 712, 1039, 162, 163, 159, 160, 161, 595, 420, 421, 596, 166, 165, 167, 164, 377, 798, 597, 257, 378, 599, 598, 274, 273, 600, 92, 601, 155, 602, 156, 157, 603, 57, 604, 82, 605, 40, 606, 41, 607, 242, 29, 608, 207, 609, 261, 610, 313, 611, 293, 612, 285, 613, 208, 288, 125, 379, 921, 922, 380, 923, 924, 317, 925, 926, 927, 928, 323, 929, 616, 615, 614, 30, 39, 32, 33, 36, 34, 35, 31, 37, 38, 1, 930, 931, 932, 933, 28, 27, 2, 934, 935, 936, 937, 334, 938, 939, 335, 940, 618, 617, 287, 286, 799, 800, 801, 422, 619, 12, 11, 10, 9, 941, 347, 348, 3, 413, 942, 620, 87, 85, 88, 89, 86, 943, 945, 944, 423, 946, 84, 83, 901, 947, 948, 949, 153, 154, 950, 621, 76, 74, 75, 73, 951, 952, 622, 129, 128, 127, 126, 130, 953, 954, 623, 113, 112, 111, 110, 114, 424, 715, 425, 716, 381, 717, 718, 434, 719, 738, 435, 436, 729, 730, 735, 433, 713, 714, 720, 431, 721, 722, 432, 723, 724, 430, 725, 726, 429, 727, 728, 428, 731, 732, 427, 733, 734, 426, 736, 737, 739, 437, 328, 740, 438, 741, 743, 744, 742, 745, 439, 746, 704, 349, 749, 747, 440, 748, 751, 441, 752, 753, 754, 368, 755, 756, 442, 757, 443, 758, 444, 759, 445, 760, 446, 761, 447, 762, 448, 763, 449, 764, 450, 765, 451, 766, 452, 767, 453, 768, 454, 769, 455, 770, 456, 771, 457, 772, 458, 773, 459, 774, 460, 775, 350, 781, 782, 324, 461, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 535, 626, 625, 624, 138, 139, 140, 141, 145, 148, 149, 142, 143, 144, 147, 146, 776, 777, 462, 778, 779, 463, 780, 637, 227, 226, 221, 225, 224, 223, 220, 222, 750, 464, 639, 638, 310, 312, 309, 311, 887, 641, 640, 70, 71, 69, 68, 67, 72, 642, 467, 382, 783, 784, 383, 785, 465, 466, 468, 786, 787, 469, 470, 471, 472, 473, 474, 475, 374, 375, 476, 654, 653, 652, 651, 650, 649, 648, 647, 646, 539, 645, 644, 643, 63, 62, 65, 64, 477, 325, 478, 655, 481, 480, 479, 788, 657, 656, 384, 789, 482, 483, 659, 658, 484, 485, 486, 790, 791, 487, 351, 792, 326, 488, 663, 662, 661, 660, 276, 275, 807, 5, 802, 489, 803, 4, 804, 369, 805, 330, 331, 806, 808, 370, 809, 667, 666, 665, 536, 537, 664, 888, 385, 889, 386, 890, 6, 891, 7, 8, 810, 811, 812, 813, 814, 815, 816, 817, 371, 818, 819, 820, 821, 490, 822, 491, 823, 492, 824, 825, 826, 827, 828, 670, 669, 668, 188, 187, 185, 191, 192, 195, 193, 186, 190, 194, 189, 829, 830, 831, 832, 833, 493, 494, 672, 671, 247, 245, 244, 246, 251, 252, 249, 250, 248, 834, 835, 836, 495, 837, 838, 839, 840, 841, 842, 496, 843, 497, 388, 387, 498, 844, 673, 234, 235, 239, 238, 240, 241, 236, 237, 845, 846, 499, 847, 500, 501, 390, 389, 538, 674, 109, 848, 849, 336, 850, 851, 852, 853, 502, 854, 337, 503, 504, 855, 391, 856, 675, 17, 20, 15, 16, 21, 22, 25, 23, 19, 24, 18, 857, 858, 859, 860, 861, 505, 862, 506, 393, 392, 507, 863, 508, 864, 676, 52, 54, 55, 56, 53, 51, 50, 865, 866, 867, 868, 869, 870, 871, 509, 872, 510, 873, 511, 398, 397, 512, 874, 394, 875, 395, 876, 396, 877, 681, 680, 679, 678, 677, 209, 215, 211, 213, 216, 212, 214, 210, 878, 879, 880, 881, 882, 883, 513, 401, 400, 514, 884, 399, 885, 682, 266, 265, 264, 268, 269, 272, 270, 263, 271, 267, 892, 893, 894, 895, 896, 897, 515, 404, 403, 516, 898, 402, 899, 687, 686, 685, 684, 683, 199, 198, 197, 202, 203, 206, 204, 196, 201, 205, 200, 900, 405, 517, 688, 59, 61, 60, 58, 902, 903, 518, 352, 519, 906, 520, 521, 907, 904, 905, 908, 909, 910, 911, 338, 912, 339, 135, 132, 134, 133, 137, 131, 136, 955, 262, 918, 42, 956, 158, 957, 319, 525, 359, 360, 958, 320, 523, 361, 362, 524, 959, 353, 960, 358, 961, 321, 363, 528, 364, 373, 322, 526, 365, 366, 527, 962, 354, 963, 964, 412, 965, 966, 967, 407, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 408, 980, 981, 982, 983, 984, 341, 985, 529, 986, 530, 531, 987, 988, 989, 990, 991, 409, 992, 993, 994, 355, 995, 410, 996, 997, 998, 356, 999, 411, 1000, 1001, 1002, 357, 1003, 1004, 1005, 1006, 342, 1007, 1008, 1009, 340, 522, 406, 1010, 1012, 1014, 1013, 1011, 532, 1015, 1016, 1017, 533, 1018, 1019, 1020, 1021, 703, 376, 1022, 1023, 372, 534, 1024, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 171, 170, 174, 169, 172, 184, 176, 177, 183, 182, 175, 173, 178, 180, 179, 181, 701, 702, 316, 315, 314 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_15c98() local_unnamed_addr {
dec_label_pc_15c98:
  %v5_15c9c = load i32, i32* @r0, align 4
  ret i32 %v5_15c9c

; uselistorder directives
  uselistorder i32* @r0, { 3, 10, 11, 100, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 58, 59, 61, 60, 26, 191, 192, 33, 34, 35, 36, 8, 2, 18, 19, 107, 108, 27, 193, 194, 196, 9, 12, 110, 14, 109, 96, 31, 97, 20, 98, 111, 195, 41, 13, 62, 63, 64, 65, 29, 22, 66, 67, 68, 69, 21, 197, 7, 23, 112, 15, 113, 16, 114, 115, 17, 116, 117, 118, 119, 0, 37, 42, 43, 38, 39, 40, 44, 46, 47, 48, 49, 50, 45, 51, 52, 53, 54, 55, 56, 57, 28, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 30, 82, 92, 93, 1, 6, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 99, 101, 102, 103, 104, 105, 120, 106, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 4, 5, 24, 25, 32 }
}

define i32 @function_15ca0() local_unnamed_addr {
entry:
  %v3_15ca4 = load i32, i32* @r4, align 4
  %v0_15cac = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_15ca4)
  ret i32 %v0_15cac

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 11, 16, 17, 13, 14, 15, 18, 8, 9, 10, 2, 3, 4, 5, 6, 7, 1, 12 }
  uselistorder i32 0, { 119, 0, 891, 892, 893, 894, 121, 120, 895, 1280, 1281, 1282, 1283, 1284, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1285, 1286, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 33, 1305, 1306, 1307, 1308, 1309, 34, 1310, 1311, 1312, 35, 1313, 1314, 1315, 36, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1331, 1332, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 37, 1351, 1352, 1353, 1354, 1355, 38, 1356, 1357, 1358, 1359, 1360, 39, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 741, 742, 267, 743, 268, 650, 904, 905, 906, 907, 908, 744, 745, 1374, 1375, 1376, 1377, 269, 746, 1, 747, 748, 749, 1378, 1379, 1380, 122, 1381, 87, 1382, 85, 86, 1383, 1384, 1385, 270, 1389, 271, 1400, 1402, 571, 223, 1403, 272, 1401, 273, 274, 2, 1386, 1387, 123, 909, 250, 910, 277, 252, 251, 911, 912, 913, 914, 276, 916, 917, 275, 918, 1388, 279, 1390, 280, 253, 1391, 1392, 1394, 1395, 278, 921, 923, 924, 67, 224, 925, 922, 919, 920, 3, 862, 865, 863, 864, 225, 4, 928, 926, 927, 226, 124, 866, 867, 868, 869, 871, 872, 281, 5, 873, 6, 935, 936, 125, 929, 930, 931, 932, 933, 934, 7, 8, 915, 651, 652, 653, 282, 9, 283, 937, 938, 565, 851, 566, 939, 826, 940, 733, 941, 654, 942, 807, 655, 896, 1404, 1405, 80, 750, 284, 751, 752, 753, 754, 285, 755, 756, 757, 758, 759, 760, 761, 656, 943, 1393, 657, 944, 762, 780, 658, 567, 1396, 90, 1397, 1278, 659, 660, 1279, 874, 945, 1398, 1399, 10, 946, 107, 947, 948, 218, 217, 572, 91, 92, 93, 94, 597, 573, 69, 68, 108, 949, 950, 951, 952, 954, 953, 11, 955, 956, 220, 219, 574, 95, 96, 97, 98, 598, 575, 71, 70, 66, 76, 957, 599, 958, 959, 960, 99, 961, 962, 963, 964, 965, 126, 966, 576, 600, 577, 578, 967, 601, 116, 127, 968, 969, 970, 100, 971, 972, 973, 12, 602, 227, 14, 13, 128, 974, 129, 603, 15, 228, 130, 131, 262, 72, 132, 286, 661, 88, 763, 764, 976, 975, 977, 978, 40, 133, 979, 136, 135, 134, 263, 264, 265, 138, 137, 139, 287, 980, 981, 140, 875, 876, 117, 141, 982, 142, 662, 143, 983, 984, 985, 144, 986, 987, 663, 625, 145, 146, 667, 664, 626, 627, 628, 629, 640, 623, 604, 294, 624, 646, 647, 630, 631, 632, 605, 292, 633, 634, 606, 293, 635, 636, 607, 291, 637, 638, 608, 290, 639, 641, 609, 289, 642, 649, 610, 288, 643, 648, 644, 84, 73, 221, 222, 645, 570, 665, 295, 666, 230, 668, 109, 669, 296, 670, 673, 674, 148, 229, 671, 672, 297, 298, 675, 676, 254, 677, 678, 679, 680, 681, 682, 611, 683, 684, 81, 299, 686, 687, 688, 689, 690, 691, 692, 238, 237, 693, 300, 694, 101, 695, 696, 118, 697, 596, 698, 699, 700, 595, 701, 702, 703, 147, 301, 302, 704, 707, 708, 709, 710, 711, 149, 705, 150, 706, 16, 151, 685, 852, 853, 712, 713, 303, 714, 716, 152, 717, 718, 719, 720, 721, 722, 723, 153, 724, 255, 304, 725, 82, 305, 726, 715, 17, 727, 239, 728, 306, 729, 730, 731, 732, 307, 736, 612, 266, 155, 154, 232, 308, 734, 735, 231, 737, 738, 739, 74, 740, 156, 157, 309, 89, 765, 766, 767, 768, 235, 769, 770, 771, 234, 772, 773, 774, 775, 112, 776, 778, 777, 110, 111, 158, 233, 310, 779, 258, 256, 257, 113, 159, 77, 160, 781, 782, 103, 104, 78, 161, 162, 163, 240, 783, 114, 784, 785, 786, 236, 787, 164, 788, 789, 311, 790, 791, 792, 165, 166, 793, 167, 794, 105, 106, 79, 168, 169, 241, 795, 796, 797, 798, 170, 799, 800, 801, 171, 173, 172, 242, 803, 802, 174, 804, 805, 175, 806, 180, 313, 314, 808, 178, 179, 176, 177, 809, 181, 810, 315, 316, 312, 811, 182, 184, 183, 185, 813, 814, 812, 815, 18, 19, 20, 21, 22, 816, 186, 817, 187, 188, 243, 819, 818, 820, 822, 823, 821, 23, 24, 25, 26, 27, 824, 189, 825, 827, 828, 829, 830, 75, 190, 192, 191, 244, 832, 831, 317, 833, 835, 836, 837, 838, 839, 318, 840, 28, 29, 30, 834, 31, 32, 841, 193, 842, 843, 194, 196, 195, 245, 846, 844, 845, 319, 848, 847, 849, 197, 850, 854, 198, 200, 199, 246, 857, 856, 855, 320, 859, 858, 860, 201, 861, 247, 870, 321, 877, 878, 202, 879, 880, 881, 882, 203, 883, 322, 884, 885, 41, 886, 887, 888, 889, 890, 988, 204, 989, 897, 205, 898, 206, 990, 899, 900, 901, 902, 991, 992, 903, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 323, 1006, 579, 580, 581, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 42, 1048, 1049, 1050, 207, 208, 1051, 324, 1052, 1053, 1054, 1055, 582, 613, 1056, 1057, 1058, 43, 1059, 1060, 1061, 1062, 44, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 45, 1070, 1071, 213, 1072, 1073, 1074, 1075, 1076, 1077, 46, 1078, 1079, 1080, 47, 1081, 1082, 1083, 48, 1084, 1085, 1086, 1087, 327, 1101, 1102, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 583, 614, 1097, 1098, 1099, 1100, 584, 615, 1103, 1104, 1105, 49, 1106, 1107, 328, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 585, 616, 1116, 1117, 1118, 50, 1119, 1120, 1121, 1122, 51, 1123, 586, 1124, 1125, 1128, 1129, 587, 209, 1126, 1127, 210, 211, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 588, 617, 1141, 1142, 1143, 52, 1144, 1145, 1146, 1147, 1148, 1149, 53, 1150, 115, 1151, 1152, 1153, 1154, 589, 618, 1155, 1156, 1157, 54, 1158, 212, 1159, 1160, 1161, 55, 1162, 1163, 1164, 1165, 1166, 590, 619, 1167, 1168, 1169, 56, 1170, 1171, 1172, 57, 325, 326, 1173, 1174, 1175, 1176, 1177, 591, 620, 1178, 1179, 1180, 58, 1181, 1182, 1183, 59, 1184, 1185, 1186, 60, 1187, 1188, 1189, 61, 1190, 1191, 1192, 1193, 62, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1207, 592, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 248, 1219, 1222, 1223, 1226, 1227, 1228, 63, 1224, 1225, 1220, 1221, 1229, 1230, 215, 214, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 64, 216, 1241, 1242, 1243, 65, 1244, 1245, 1246, 1247, 1249, 83, 329, 1250, 1248, 1204, 1205, 102, 568, 569, 1251, 1252, 1253, 593, 594, 249, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 259, 1274, 260, 1275, 261, 1276, 1277, 621, 622, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420 }
  uselistorder i32* @r4, { 40, 716, 720, 721, 724, 725, 565, 566, 567, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 218, 68, 571, 572, 573, 742, 743, 744, 745, 746, 747, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 748, 749, 5, 750, 751, 752, 753, 767, 768, 769, 770, 38, 771, 30, 762, 763, 764, 765, 766, 754, 755, 756, 574, 575, 576, 577, 578, 579, 580, 581, 757, 758, 761, 582, 583, 584, 525, 6, 526, 527, 528, 7, 529, 8, 530, 531, 545, 9, 10, 546, 547, 548, 549, 550, 551, 585, 586, 11, 594, 595, 587, 588, 589, 590, 591, 592, 593, 69, 70, 71, 72, 73, 74, 596, 597, 598, 599, 496, 497, 600, 601, 437, 438, 602, 603, 204, 205, 604, 605, 75, 76, 606, 607, 364, 365, 77, 78, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 79, 80, 608, 609, 759, 760, 4, 81, 82, 610, 611, 255, 256, 281, 282, 83, 84, 718, 719, 85, 86, 722, 723, 552, 553, 612, 613, 614, 615, 87, 88, 89, 90, 257, 258, 259, 260, 261, 616, 617, 618, 91, 92, 93, 619, 620, 621, 622, 623, 624, 41, 42, 43, 44, 45, 46, 47, 48, 94, 95, 49, 50, 51, 52, 96, 97, 53, 56, 57, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 98, 99, 66, 67, 12, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 159, 160, 161, 162, 163, 164, 0, 165, 153, 154, 155, 156, 157, 158, 106, 107, 108, 109, 110, 498, 499, 500, 501, 502, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 13, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 31, 210, 211, 212, 213, 214, 215, 216, 1, 217, 262, 263, 264, 2, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 296, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 3, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 14, 343, 15, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 16, 380, 17, 381, 18, 382, 19, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 20, 410, 21, 411, 22, 412, 23, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 24, 477, 25, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 503, 504, 505, 26, 506, 27, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 554, 558, 555, 556, 557, 559, 560, 561, 562, 563, 564, 625, 626, 627, 568, 569, 570, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 32, 659, 660, 37, 661, 29, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 36, 28, 674, 675, 676, 677, 678, 679, 680, 35, 681, 682, 683, 34, 684, 685, 686, 33, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 39, 717 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
