source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1db10.5 = global i32 0
@global_var_1db20.6 = global i32* @global_var_1db10.5
@global_var_1dc80.12 = global i32 0
@global_var_f10c.18 = constant i32 -382906384
@global_var_13610.20 = constant i32 -481296384
@global_var_1dc9c.24 = global i32 0
@global_var_85dc.25 = constant i32 -352321555
@global_var_d7c8.31 = constant i32 -382906384
@global_var_dcc8.33 = constant i32 -382906384
@global_var_ce04.35 = constant i32 -382906384
@global_var_c688.37 = constant i32 -382906384
@global_var_bec8.39 = constant i32 -382906384
@global_var_b5b8.41 = constant i32 -382906384
@global_var_ae80.43 = constant i32 -382906384
@global_var_8920.46 = constant i32 -382906384
@global_var_150e4.48 = constant [4 x i8] c"GET\00"
@global_var_150e8.50 = constant i32 47
@global_var_129e0.52 = constant i32 -382910448
@global_var_150dc.54 = constant i32 32
@global_var_150b4.56 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_150cc.58 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_150d8.60 = constant [3 x i8] c"\0D\0A\00"
@global_var_150ec.62 = constant [9 x i8] c"Cookie: \00"
@global_var_150f8.64 = constant [3 x i8] c"; \00"
@global_var_150fc.66 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_15104.68 = constant i32 59
@global_var_15108.70 = constant [5 x i8] c"http\00"
@global_var_15110.72 = constant [5 x i8] c"url=\00"
@global_var_15118.74 = constant [5 x i8] c"POST\00"
@global_var_12074.75 = constant i32 -439275520
@global_var_15120.77 = constant i32 39
@global_var_1541c.79 = constant i32 61
@global_var_1dd3c.81 = global i32 0
@global_var_1dca0.92 = global i32 0
@global_var_1dd40.96 = local_unnamed_addr global i32 0
@global_var_1dca4.98 = global i32 0
@global_var_ee5c.100 = constant i32 -382910448
@global_var_1db2c.102 = global i32 74500
@global_var_1dd48.105 = local_unnamed_addr global i32 0
@global_var_1dd47.106 = local_unnamed_addr global i32 0
@global_var_1dd46.107 = local_unnamed_addr global i32 0
@global_var_1db24.109 = global i32 -1
@global_var_1dca8.114 = global i32 0
@global_var_ee44.116 = constant i32 -442556408
@global_var_1dd45.120 = local_unnamed_addr global i32 0
@global_var_15124.124 = constant i32 10
@global_var_1db28.126 = global i32 -1
@global_var_12304.130 = constant i32 -382910224
@global_var_15128.133 = constant i32 16777216
@global_var_1dcb0.135 = global i32 0
@global_var_1dcbc.137 = global i32 0
@global_var_1dcb4.139 = global i32 0
@global_var_1dcb8.141 = global i32 0
@global_var_1dd5c.151 = global i32 0
@global_var_1dcf4.153 = global i32 0
@global_var_1dcc0.155 = global i32 0
@global_var_1dcec.157 = global i32 0
@global_var_1dd54.165 = global i32 0
@global_var_1dd58.167 = global i32 0
@global_var_1dcc7.170 = local_unnamed_addr global i32 0
@global_var_1dcc6.171 = local_unnamed_addr global i32 0
@global_var_1dcd8.173 = global i32 0
@global_var_1dccc.175 = local_unnamed_addr global i32 0
@global_var_1dcc9.176 = local_unnamed_addr global i32 0
@global_var_1dcd9.177 = local_unnamed_addr global i32 0
@global_var_1dcdb.178 = local_unnamed_addr global i32 0
@global_var_1dccd.179 = local_unnamed_addr global i32 0
@global_var_1dcc8.180 = local_unnamed_addr global i32 0
@global_var_1dcda.181 = local_unnamed_addr global i32 0
@global_var_1dce7.183 = local_unnamed_addr global i32 0
@global_var_1dce6.184 = local_unnamed_addr global i32 0
@global_var_15208.186 = constant [6 x i8] c"14=9>\00"
@global_var_15210.188 = constant [8 x i8] c"1!%1\229?\00"
@global_var_15218.190 = constant [5 x i8] c" 1##\00"
@global_var_15220.192 = constant [9 x i8] c"381>75=5\00"
@global_var_1522c.194 = constant i32 490349927
@global_var_15100.196 = constant i32 0
@global_var_15200.198 = constant [5 x i8] c"abcd\00"
@global_var_15130.200 = constant [4 x i8] c"14=\00"
@global_var_15134.202 = constant [5 x i8] c"\22??$\00"
@global_var_1513c.204 = constant [5 x i8] c"1>;?\00"
@global_var_15144.206 = constant [7 x i8] c"(3ceaa\00"
@global_var_1514c.208 = constant [6 x i8] c"$$>5$\00"
@global_var_15154.210 = constant [9 x i8] c"8%>$egei\00"
@global_var_15160.212 = constant [6 x i8] c"&9*(&\00"
@global_var_15168.214 = constant [6 x i8] c"abcde\00"
@global_var_15170.216 = constant [9 x i8] c"a``a389>\00"
@global_var_1517c.218 = constant [8 x i8] c"4561%<$\00"
@global_var_15184.220 = constant [4 x i8] c"abc\00"
@global_var_15188.222 = constant [7 x i8] c"1>$#<!\00"
@global_var_15190.224 = constant [4 x i8] c"e% \00"
@global_var_15194.226 = constant [9 x i8] c":%1>$538\00"
@global_var_151a0.228 = constant [6 x i8] c"*<((~\00"
@global_var_151a8.230 = constant [7 x i8] c"abcdef\00"
@global_var_151b0.232 = constant [11 x i8] c"?5<9>%(abc\00"
@global_var_151bc.234 = constant [7 x i8] c"\0A$5eba\00"
@global_var_151c4.236 = constant i32 490349927
@global_var_151d4.238 = constant [5 x i8] c"%#5\22\00"
@global_var_151dc.240 = constant [7 x i8] c"415=?>\00"
@global_var_151e4.242 = constant [4 x i8] c"29>\00"
@global_var_151e8.244 = constant [8 x i8] c"#%  ?\22$\00"
@global_var_151f0.246 = constant [11 x i8] c"#% 5\22&9#?\22\00"
@global_var_151fc.248 = constant [9 x i8] c"*)14abcd\00"
@global_var_1dcd0.249 = local_unnamed_addr global i32 0
@global_var_1dcce.251 = local_unnamed_addr global i32 0
@global_var_1dccf.252 = local_unnamed_addr global i32 0
@global_var_1dce8.254 = local_unnamed_addr global i32 0
@global_var_1dce9.255 = local_unnamed_addr global i32 0
@global_var_15242.262 = constant i32 2096127
@global_var_15239.264 = constant i32 2095871
@global_var_1dd64.267 = global i32 0
@global_var_1db34.270 = global i32 1043935
@global_var_15248.275 = constant i32 39228
@global_var_1dd74.276 = local_unnamed_addr global i32 0
@global_var_1dd78.277 = local_unnamed_addr global i32 0
@global_var_1dd79.278 = local_unnamed_addr global i32 0
@global_var_1524c.280 = constant i32 55430
@global_var_1dd84.281 = local_unnamed_addr global i32 0
@global_var_1dd88.282 = local_unnamed_addr global i32 0
@global_var_1dd89.283 = local_unnamed_addr global i32 0
@global_var_15250.285 = constant i32 1499028601
@global_var_1dd90.286 = local_unnamed_addr global i32 0
@global_var_1dd8c.287 = local_unnamed_addr global i32 0
@global_var_1dd91.288 = local_unnamed_addr global i32 0
@global_var_15270.290 = constant i32 1380928786
@global_var_1dd94.291 = local_unnamed_addr global i32 0
@global_var_1dd98.292 = local_unnamed_addr global i32 0
@global_var_1dd99.293 = local_unnamed_addr global i32 0
@global_var_15278.295 = constant i32 1480939538
@global_var_1dda0.296 = local_unnamed_addr global i32 0
@global_var_1dd9c.297 = local_unnamed_addr global i32 0
@global_var_1dda1.298 = local_unnamed_addr global i32 0
@global_var_15280.300 = constant i32 1029266194
@global_var_1dda8.301 = local_unnamed_addr global i32 0
@global_var_1dda4.302 = local_unnamed_addr global i32 0
@global_var_1dda9.303 = local_unnamed_addr global i32 0
@global_var_15288.305 = constant i32 1380928786
@global_var_1ddb0.306 = local_unnamed_addr global i32 0
@global_var_1ddac.307 = local_unnamed_addr global i32 0
@global_var_1ddb1.308 = local_unnamed_addr global i32 0
@global_var_15298.310 = constant i32 1297895442
@global_var_1ddb4.311 = local_unnamed_addr global i32 0
@global_var_1ddb8.312 = local_unnamed_addr global i32 0
@global_var_1ddb9.313 = local_unnamed_addr global i32 0
@global_var_152a0.315 = constant i32 1548307986
@global_var_1ddbc.316 = local_unnamed_addr global i32 0
@global_var_1ddc0.317 = local_unnamed_addr global i32 0
@global_var_1ddc1.318 = local_unnamed_addr global i32 0
@global_var_152ac.320 = constant i32 1414749203
@global_var_1ddc4.321 = local_unnamed_addr global i32 0
@global_var_1ddc8.322 = local_unnamed_addr global i32 0
@global_var_1ddc9.323 = local_unnamed_addr global i32 0
@global_var_152b4.325 = constant i32 1380928786
@global_var_1ddd0.326 = local_unnamed_addr global i32 0
@global_var_1ddcc.327 = local_unnamed_addr global i32 0
@global_var_1ddd1.328 = local_unnamed_addr global i32 0
@global_var_152c8.330 = constant i32 1380928786
@global_var_1ddd8.331 = local_unnamed_addr global i32 0
@global_var_1ddd4.332 = local_unnamed_addr global i32 0
@global_var_1ddd9.333 = local_unnamed_addr global i32 0
@global_var_152d8.335 = constant i32 1920627327
@global_var_1dddc.336 = local_unnamed_addr global i32 0
@global_var_1dde0.337 = local_unnamed_addr global i32 0
@global_var_1dde1.338 = local_unnamed_addr global i32 0
@global_var_152e4.340 = constant i32 1581864978
@global_var_1dde8.341 = local_unnamed_addr global i32 0
@global_var_1dde4.342 = local_unnamed_addr global i32 0
@global_var_1dde9.343 = local_unnamed_addr global i32 0
@global_var_152f8.345 = constant i32 1599867994
@global_var_1ddec.346 = local_unnamed_addr global i32 0
@global_var_1ddf0.347 = local_unnamed_addr global i32 0
@global_var_1ddf1.348 = local_unnamed_addr global i32 0
@global_var_15310.350 = constant [9 x i8] c"\5CNNJROY=\00"
@global_var_1ddf4.351 = local_unnamed_addr global i32 0
@global_var_1ddf8.352 = local_unnamed_addr global i32 0
@global_var_1ddf9.353 = local_unnamed_addr global i32 0
@global_var_1531c.355 = constant i32 1264081170
@global_var_1de00.356 = local_unnamed_addr global i32 0
@global_var_1ddfc.357 = local_unnamed_addr global i32 0
@global_var_1de01.358 = local_unnamed_addr global i32 0
@global_var_1532c.360 = constant i32 1264081170
@global_var_1de08.361 = local_unnamed_addr global i32 0
@global_var_1de04.362 = local_unnamed_addr global i32 0
@global_var_1de09.363 = local_unnamed_addr global i32 0
@global_var_15340.365 = constant i32 1264081170
@global_var_1de0c.366 = local_unnamed_addr global i32 0
@global_var_1de10.367 = local_unnamed_addr global i32 0
@global_var_1de11.368 = local_unnamed_addr global i32 0
@global_var_15358.370 = constant i32 1264081170
@global_var_1de18.371 = local_unnamed_addr global i32 0
@global_var_1de14.372 = local_unnamed_addr global i32 0
@global_var_1de19.373 = local_unnamed_addr global i32 0
@global_var_15374.375 = constant i32 1264081170
@global_var_1de20.376 = local_unnamed_addr global i32 0
@global_var_1de1c.377 = local_unnamed_addr global i32 0
@global_var_1de21.378 = local_unnamed_addr global i32 0
@global_var_15384.380 = constant [7 x i8] c"NUXQQ=\00"
@global_var_1de24.381 = local_unnamed_addr global i32 0
@global_var_1de28.382 = local_unnamed_addr global i32 0
@global_var_1de29.383 = local_unnamed_addr global i32 0
@global_var_1538c.385 = constant [8 x i8] c"XS\5C_QX=\00"
@global_var_1de2c.386 = local_unnamed_addr global i32 0
@global_var_1de30.387 = local_unnamed_addr global i32 0
@global_var_1de31.388 = local_unnamed_addr global i32 0
@global_var_15394.390 = constant [8 x i8] c"NDNIXP=\00"
@global_var_1de34.391 = local_unnamed_addr global i32 0
@global_var_1de38.392 = local_unnamed_addr global i32 0
@global_var_1de39.393 = local_unnamed_addr global i32 0
@global_var_1539c.395 = constant [4 x i8] c"NU=\00"
@global_var_1de40.396 = local_unnamed_addr global i32 0
@global_var_1de3c.397 = local_unnamed_addr global i32 0
@global_var_1de41.398 = local_unnamed_addr global i32 0
@global_var_153a0.400 = constant i32 1398038290
@global_var_1de44.401 = local_unnamed_addr global i32 0
@global_var_1de48.402 = local_unnamed_addr global i32 0
@global_var_1de49.403 = local_unnamed_addr global i32 0
@global_var_153b8.405 = constant i32 1499028569
@global_var_1de50.406 = local_unnamed_addr global i32 0
@global_var_1de4c.407 = local_unnamed_addr global i32 0
@global_var_1de51.408 = local_unnamed_addr global i32 0
@global_var_153d8.410 = constant [10 x i8] c"S^ROOX^I=\00"
@global_var_1de54.411 = local_unnamed_addr global i32 0
@global_var_1de58.412 = local_unnamed_addr global i32 0
@global_var_1de59.413 = local_unnamed_addr global i32 0
@global_var_1de5c.414 = local_unnamed_addr global i32 0
@global_var_1de60.415 = local_unnamed_addr global i32 0
@global_var_1de61.416 = local_unnamed_addr global i32 0
@global_var_153e4.418 = constant [6 x i8] c"RZTS=\00"
@global_var_1de68.419 = local_unnamed_addr global i32 0
@global_var_1de64.420 = local_unnamed_addr global i32 0
@global_var_1de69.421 = local_unnamed_addr global i32 0
@global_var_153ec.423 = constant [7 x i8] c"XSIXO=\00"
@global_var_1de6c.424 = local_unnamed_addr global i32 0
@global_var_1de70.425 = local_unnamed_addr global i32 0
@global_var_1de71.426 = local_unnamed_addr global i32 0
@global_var_153f4.428 = constant i32 1398038290
@global_var_1de78.429 = local_unnamed_addr global i32 0
@global_var_1de74.430 = local_unnamed_addr global i32 0
@global_var_1de79.431 = local_unnamed_addr global i32 0
@global_var_15408.433 = constant i32 1398038290
@global_var_1de7c.434 = local_unnamed_addr global i32 0
@global_var_1de80.435 = local_unnamed_addr global i32 0
@global_var_1de81.436 = local_unnamed_addr global i32 0
@global_var_15420.438 = constant i32 1213361769
@global_var_1de84.439 = local_unnamed_addr global i32 0
@global_var_1de88.440 = local_unnamed_addr global i32 0
@global_var_1de89.441 = local_unnamed_addr global i32 0
@global_var_15438.443 = constant i32 1581864978
@global_var_1de90.444 = local_unnamed_addr global i32 0
@global_var_1de8c.445 = local_unnamed_addr global i32 0
@global_var_1de91.446 = local_unnamed_addr global i32 0
@global_var_1544c.448 = constant [12 x i8] c"S\5CPXNXOKXO=\00"
@global_var_1de94.449 = local_unnamed_addr global i32 0
@global_var_1de98.450 = local_unnamed_addr global i32 0
@global_var_1de99.451 = local_unnamed_addr global i32 0
@global_var_15458.453 = constant i32 1397969534
@global_var_1de9c.454 = local_unnamed_addr global i32 0
@global_var_1dea0.455 = local_unnamed_addr global i32 0
@global_var_1dea1.456 = local_unnamed_addr global i32 0
@global_var_1577c.458 = constant i32 1482579580
@global_var_1dea8.459 = local_unnamed_addr global i32 0
@global_var_1dea4.460 = local_unnamed_addr global i32 0
@global_var_1dea9.461 = local_unnamed_addr global i32 0
@global_var_157d0.463 = constant i32 1482579580
@global_var_1deb0.464 = local_unnamed_addr global i32 0
@global_var_1deac.465 = local_unnamed_addr global i32 0
@global_var_1deb1.466 = local_unnamed_addr global i32 0
@global_var_15470.468 = constant i32 1230197374
@global_var_1deb8.469 = local_unnamed_addr global i32 0
@global_var_1deb4.470 = local_unnamed_addr global i32 0
@global_var_1deb9.471 = local_unnamed_addr global i32 0
@global_var_154a4.473 = constant i32 2118735950
@global_var_1debc.474 = local_unnamed_addr global i32 0
@global_var_1dec0.475 = local_unnamed_addr global i32 0
@global_var_1dec1.476 = local_unnamed_addr global i32 0
@global_var_154b4.478 = constant i32 1331386447
@global_var_1dec4.479 = local_unnamed_addr global i32 0
@global_var_1dec8.480 = local_unnamed_addr global i32 0
@global_var_1dec9.481 = local_unnamed_addr global i32 0
@global_var_154c0.483 = constant i32 1549685329
@global_var_1decc.484 = local_unnamed_addr global i32 0
@global_var_1ded0.485 = local_unnamed_addr global i32 0
@global_var_1ded1.486 = local_unnamed_addr global i32 0
@global_var_154cc.488 = constant i32 273242190
@global_var_1ded4.489 = local_unnamed_addr global i32 0
@global_var_1ded8.490 = local_unnamed_addr global i32 0
@global_var_1ded9.491 = local_unnamed_addr global i32 0
@global_var_154dc.493 = constant i32 1230197342
@global_var_1dee0.494 = local_unnamed_addr global i32 0
@global_var_1dedc.495 = local_unnamed_addr global i32 0
@global_var_1dee1.496 = local_unnamed_addr global i32 0
@global_var_154f0.498 = constant i32 1398558537
@global_var_1dee8.499 = local_unnamed_addr global i32 0
@global_var_1dee4.500 = local_unnamed_addr global i32 0
@global_var_1dee9.501 = local_unnamed_addr global i32 0
@global_var_15504.503 = constant [9 x i8] c"^UHSVXY=\00"
@global_var_1deec.504 = local_unnamed_addr global i32 0
@global_var_1def0.505 = local_unnamed_addr global i32 0
@global_var_1def1.506 = local_unnamed_addr global i32 0
@global_var_15464.508 = constant i32 1297635414
@global_var_1def4.509 = local_unnamed_addr global i32 0
@global_var_1def8.510 = local_unnamed_addr global i32 0
@global_var_1def9.511 = local_unnamed_addr global i32 0
@global_var_15510.513 = constant i32 1397969502
@global_var_1defc.514 = local_unnamed_addr global i32 0
@global_var_1df00.515 = local_unnamed_addr global i32 0
@global_var_1df01.516 = local_unnamed_addr global i32 0
@global_var_15520.518 = constant i32 1263491150
@global_var_1df08.519 = local_unnamed_addr global i32 0
@global_var_1df04.520 = local_unnamed_addr global i32 0
@global_var_1df09.521 = local_unnamed_addr global i32 0
@global_var_15534.523 = constant i32 1263491150
@global_var_1df10.524 = local_unnamed_addr global i32 0
@global_var_1df0c.525 = local_unnamed_addr global i32 0
@global_var_1df11.526 = local_unnamed_addr global i32 0
@global_var_15550.528 = constant i32 1413960304
@global_var_1df14.529 = local_unnamed_addr global i32 0
@global_var_1df18.530 = local_unnamed_addr global i32 0
@global_var_1df19.531 = local_unnamed_addr global i32 0
@global_var_155c4.533 = constant i32 1413960304
@global_var_1df1c.534 = local_unnamed_addr global i32 0
@global_var_1df20.535 = local_unnamed_addr global i32 0
@global_var_1df21.536 = local_unnamed_addr global i32 0
@global_var_15638.538 = constant i32 1413960304
@global_var_1df28.539 = local_unnamed_addr global i32 0
@global_var_1df24.540 = local_unnamed_addr global i32 0
@global_var_1df29.541 = local_unnamed_addr global i32 0
@global_var_15688.543 = constant i32 1413960304
@global_var_1df2c.544 = local_unnamed_addr global i32 0
@global_var_1df30.545 = local_unnamed_addr global i32 0
@global_var_1df31.546 = local_unnamed_addr global i32 0
@global_var_156fc.548 = constant i32 1413960304
@global_var_1df38.549 = local_unnamed_addr global i32 0
@global_var_1df34.550 = local_unnamed_addr global i32 0
@global_var_1df39.551 = local_unnamed_addr global i32 0
@global_var_1df40.552 = local_unnamed_addr global i32 0
@global_var_1df3c.553 = local_unnamed_addr global i32 0
@global_var_1df41.554 = local_unnamed_addr global i32 0
@global_var_1df48.555 = local_unnamed_addr global i32 0
@global_var_1df44.556 = local_unnamed_addr global i32 0
@global_var_1df49.557 = local_unnamed_addr global i32 0
@global_var_1df4c.558 = local_unnamed_addr global i32 0
@global_var_1df50.559 = local_unnamed_addr global i32 0
@global_var_1df51.560 = local_unnamed_addr global i32 0
@global_var_15770.562 = constant [11 x i8] c"YKOuXQMXO=\00"
@global_var_1df59.563 = local_unnamed_addr global i32 0
@global_var_1df54.564 = local_unnamed_addr global i32 0
@global_var_1df58.565 = local_unnamed_addr global i32 0
@global_var_13e4c.568 = constant i32 -476053504
@global_var_12d84.572 = constant i32 -443219956
@global_var_12ef0.577 = constant i32 -376111092
@global_var_1dd30.580 = global i32 0
@global_var_1306c.582 = constant i32 -456978431
@global_var_1df5c.584 = global i32 0
@global_var_1dcf8.586 = global i32 0
@global_var_1dc34.589 = global i32 256
@global_var_1db38.590 = global i32* @global_var_1dc34.589
@global_var_1dd20.593 = global i32 0
@global_var_1dfdc.595 = global i32 0
@global_var_14600.596 = constant i32 -382910416
@global_var_12ff0.597 = constant i32 -509595648
@global_var_13690.604 = constant i32 -442564520
@global_var_1dc40.610 = global i32 0
@global_var_12c5c.612 = constant i32 -481230848
@global_var_1dd10.614 = global i32 0
@global_var_14250.616 = constant i32 -509587456
@global_var_1dc58.619 = global i32 0
@global_var_1dd14.623 = local_unnamed_addr global i32 0
@global_var_13c04.625 = constant i32 -352321419
@global_var_1db04.629 = global i32 -1
@global_var_1dd24.632 = global i32 0
@global_var_1dd28.634 = local_unnamed_addr global i32 0
@global_var_13e38.635 = constant i32 -390234096
@global_var_157f4.637 = constant [10 x i8] c"/dev/null\00"
@global_var_1dd2c.639 = global i32 0
@global_var_1dd18.644 = local_unnamed_addr global i32 0
@global_var_1dd1c.646 = global i32 0
@global_var_12fd0.648 = constant i32 -369097054
@global_var_1dc70 = external local_unnamed_addr global i32
@global_var_15900.654 = constant i32 33554944
@global_var_12f88.659 = constant i32 -442564608
@global_var_14100.661 = constant i32 -335544664
@global_var_1421c.664 = constant i32 -275775369
@global_var_14994.665 = constant i32 -382910352
@global_var_1dd38.667 = global i32 0
@global_var_1dc78.669 = global i32* @global_var_15900.654
@global_var_1dff4.671 = global i32 0
@global_var_1dff8.673 = global i32 0
@global_var_1db08.676 = global i32 0
@global_var_1dc7c.3 = external global i8*
@global_var_1dc98.22 = external global i8*
@global_var_1dc99.29 = global i8 0
@global_var_1dd44.104 = external global i8*
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1db30.111 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1dcac.129 = external global i8*
@global_var_1dcf0.159 = external global i8*
@global_var_1dcf1.160 = local_unnamed_addr global i8 0
@global_var_1dcc4.169 = external global i8*
@global_var_1dce4.174 = local_unnamed_addr global i8 0
@global_var_1dce5.182 = local_unnamed_addr global i8 0
@global_var_1dcd4.250 = local_unnamed_addr global i8 0
@global_var_1dcdc.253 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_15054(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1dc7c.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1dc7c.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1db20.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1db20.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1db20.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1db20.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1dc7c.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1db20.6, { 1, 0 }
  uselistorder i8** @global_var_1dc7c.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 121620 to i32*), align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 121620

bb2:                                              ; preds = %.thread
  ret i32 121620

; uselistorder directives
  uselistorder i32 121620, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_13eec(i32 ptrtoint (i32* @global_var_f10c.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 86160, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_13a60()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  store i32 %v1_820c, i32* @lr, align 4
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 2, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8230:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8230 = urem i32 %arg1, 256
  %v2_8234 = icmp eq i32 %v1_8230, 0
  %v3_8238 = load i32, i32* @r4, align 4
  br i1 %v2_8234, label %dec_label_pc_8280, label %dec_label_pc_8244

dec_label_pc_8244:                                ; preds = %dec_label_pc_8230
  %v0_8244 = load i32, i32* %r1.global-to-local, align 4
  %v1_8244 = add i32 %v0_8244, 4
  %v2_8244 = inttoptr i32 %v1_8244 to i8*
  %v3_8244 = load i8, i8* %v2_8244, align 1
  %v4_8244 = zext i8 %v3_8244 to i32
  %v1_8248 = urem i32 %arg3, 256
  %v9_824c = icmp eq i32 %v4_8244, %v1_8248
  br i1 %v9_824c, label %dec_label_pc_8288, label %dec_label_pc_8270.preheader

dec_label_pc_8270.preheader:                      ; preds = %dec_label_pc_8244
  br label %dec_label_pc_8270

dec_label_pc_8260:                                ; preds = %dec_label_pc_8270
  %v1_8260 = add i32 %v0_8268.in, 12
  %v2_8260 = inttoptr i32 %v1_8260 to i8*
  %v3_8260 = load i8, i8* %v2_8260, align 1
  %v4_8260 = zext i8 %v3_8260 to i32
  %v9_8264 = icmp eq i32 %v1_8248, %v4_8260
  br i1 %v9_8264, label %dec_label_pc_8288, label %dec_label_pc_8270

dec_label_pc_8270:                                ; preds = %dec_label_pc_8270.preheader, %dec_label_pc_8260
  %v0_8268.in = phi i32 [ %v0_8244, %dec_label_pc_8270.preheader ], [ %v0_8268, %dec_label_pc_8260 ]
  %v0_8270 = phi i32 [ 0, %dec_label_pc_8270.preheader ], [ %v1_8270, %dec_label_pc_8260 ]
  %v0_8268 = add i32 %v0_8268.in, 8
  %v1_8270 = add i32 %v0_8270, 1
  %v9_8274 = icmp eq i32 %v1_8230, %v1_8270
  store i32 %v0_8268, i32* %r1.global-to-local, align 4
  br i1 %v9_8274, label %dec_label_pc_8280, label %dec_label_pc_8260

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288, %dec_label_pc_8230
  store i32 %v3_8238, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8288:                                ; preds = %dec_label_pc_8260, %dec_label_pc_8244
  %v0_8288 = phi i32 [ %v0_8244, %dec_label_pc_8244 ], [ %v0_8268, %dec_label_pc_8260 ]
  %v1_8288 = inttoptr i32 %v0_8288 to i32*
  %v2_8288 = load i32, i32* %v1_8288, align 4
  store i32 %v2_8288, i32* @r0, align 4
  %v2_828c = icmp eq i32 %v2_8288, 0
  br i1 %v2_828c, label %dec_label_pc_8280, label %dec_label_pc_8294

dec_label_pc_8294:                                ; preds = %dec_label_pc_8288
  store i32 %v3_8238, i32* @r4, align 4
  %v1_8298 = call i32 @function_130ac(i32 %v2_8288)
  ret i32 %v1_8298

; uselistorder directives
  uselistorder i32 %v1_8270, { 1, 0 }
  uselistorder i32 %v0_8268, { 1, 0, 2 }
  uselistorder i32 %v0_8268.in, { 1, 0 }
  uselistorder i32 %v1_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 1, 0, 2 }
  uselistorder i32 %v3_8238, { 1, 0 }
  uselistorder i32 %v1_8230, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8280, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8270, { 1, 0 }
}

define i32 @function_829c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_829c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_829c = urem i32 %arg1, 256
  %v2_82a0 = icmp eq i32 %v1_829c, 0
  %v3_82a4 = load i32, i32* @r4, align 4
  %v6_82a4 = load i32, i32* @lr, align 4
  br i1 %v2_82a0, label %dec_label_pc_82ec, label %dec_label_pc_82b0

dec_label_pc_82b0:                                ; preds = %dec_label_pc_829c
  %v0_82b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_82b0 = add i32 %v0_82b0, 4
  %v2_82b0 = inttoptr i32 %v1_82b0 to i8*
  %v3_82b0 = load i8, i8* %v2_82b0, align 1
  %v4_82b0 = zext i8 %v3_82b0 to i32
  %v1_82b4 = urem i32 %arg3, 256
  %v9_82b8 = icmp eq i32 %v4_82b0, %v1_82b4
  br i1 %v9_82b8, label %dec_label_pc_82f4, label %dec_label_pc_82dc.preheader

dec_label_pc_82dc.preheader:                      ; preds = %dec_label_pc_82b0
  br label %dec_label_pc_82dc

dec_label_pc_82cc:                                ; preds = %dec_label_pc_82dc
  %v1_82cc = add i32 %v0_82d4.in, 12
  %v2_82cc = inttoptr i32 %v1_82cc to i8*
  %v3_82cc = load i8, i8* %v2_82cc, align 1
  %v4_82cc = zext i8 %v3_82cc to i32
  %v9_82d0 = icmp eq i32 %v1_82b4, %v4_82cc
  br i1 %v9_82d0, label %dec_label_pc_82f4, label %dec_label_pc_82dc

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82dc.preheader, %dec_label_pc_82cc
  %v0_82d4.in = phi i32 [ %v0_82b0, %dec_label_pc_82dc.preheader ], [ %v0_82d4, %dec_label_pc_82cc ]
  %v0_82dc = phi i32 [ 0, %dec_label_pc_82dc.preheader ], [ %v1_82dc, %dec_label_pc_82cc ]
  %v0_82d4 = add i32 %v0_82d4.in, 8
  %v1_82dc = add i32 %v0_82dc, 1
  store i32 %v1_82dc, i32* @lr, align 4
  %v9_82e0 = icmp eq i32 %v1_829c, %v1_82dc
  store i32 %v0_82d4, i32* %r1.global-to-local, align 4
  br i1 %v9_82e0, label %dec_label_pc_82ec, label %dec_label_pc_82cc

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82f4, %dec_label_pc_829c
  store i32 %v3_82a4, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82cc, %dec_label_pc_82b0
  %v0_82f4 = phi i32 [ %v0_82b0, %dec_label_pc_82b0 ], [ %v0_82d4, %dec_label_pc_82cc ]
  %v1_82f4 = inttoptr i32 %v0_82f4 to i32*
  %v2_82f4 = load i32, i32* %v1_82f4, align 4
  %v2_82f8 = icmp eq i32 %v2_82f4, 0
  br i1 %v2_82f8, label %dec_label_pc_82ec, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82f4
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_82a4, i32* @r4, align 4
  store i32 %v6_82a4, i32* @lr, align 4
  %v2_8308 = inttoptr i32 %v2_82f4 to i8*
  %v3_8308 = call i32 @function_12178(i8* %v2_8308, i32 10)
  ret i32 %v3_8308

; uselistorder directives
  uselistorder i32 %v1_82dc, { 1, 2, 0 }
  uselistorder i32 %v0_82d4, { 1, 0, 2 }
  uselistorder i32 %v0_82d4.in, { 1, 0 }
  uselistorder i32 %v1_82b4, { 1, 0 }
  uselistorder i32 %v0_82b0, { 1, 0, 2 }
  uselistorder i32 %v3_82a4, { 1, 0 }
  uselistorder i32 %v1_829c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_82dc, { 1, 0 }
}

define i32 @function_830c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_830c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_830c = load i32, i32* @r4, align 4
  %v6_830c = load i32, i32* @r5, align 4
  %v9_830c = load i32, i32* @r6, align 4
  %v12_830c = load i32, i32* @r7, align 4
  %v15_830c = load i32, i32* @r8, align 4
  %v18_830c = load i32, i32* @sb, align 4
  %v21_830c = load i32, i32* @sl, align 4
  %v24_830c = load i32, i32* @fp, align 4
  %v27_830c = load i32, i32* @lr, align 4
  %v7_8310 = icmp eq i32 %arg2, 3
  store i1 %v7_8310, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_831c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_831c, i32* @r4, align 4
  %tmp47 = icmp ult i32 %arg2, 4
  br i1 %tmp47, label %dec_label_pc_8330, label %dec_label_pc_8324

dec_label_pc_8324:                                ; preds = %dec_label_pc_830c
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v1_8328 = inttoptr i32 %v0_831c to i32*
  %v2_8328 = load i32, i32* %v1_8328, align 4
  store i32 %v2_8328, i32* %sl.global-to-local, align 4
  br i1 %v7_8324, label %dec_label_pc_8330, label %dec_label_pc_8338

dec_label_pc_8330:                                ; preds = %dec_label_pc_8354, %.dec_label_pc_8330_crit_edge, %dec_label_pc_8324, %dec_label_pc_8348, %dec_label_pc_8338, %dec_label_pc_830c
  %v29_8334 = phi i32 [ %v29_8334.pre, %.dec_label_pc_8330_crit_edge ], [ %v0_831c, %dec_label_pc_8354 ], [ %v0_831c, %dec_label_pc_8324 ], [ %v0_831c, %dec_label_pc_8348 ], [ %v0_831c, %dec_label_pc_8338 ], [ %v0_831c, %dec_label_pc_830c ]
  store i32 %v3_830c, i32* %r4.global-to-local, align 4
  store i32 %v9_830c, i32* @r6, align 4
  store i32 %v12_830c, i32* @r7, align 4
  store i32 %v18_830c, i32* @sb, align 4
  store i32 %v21_830c, i32* @sl, align 4
  store i32 %v24_830c, i32* @fp, align 4
  ret i32 %v29_8334

dec_label_pc_8338:                                ; preds = %dec_label_pc_8324
  %v7_8338 = icmp eq i32 %arg2, 5
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = add i32 %v0_831c, 4
  %v2_833c = inttoptr i32 %v1_833c to i8*
  %v3_833c = load i8, i8* %v2_833c, align 1
  %v4_833c = zext i8 %v3_833c to i32
  store i32 %v4_833c, i32* %r1.global-to-local, align 4
  br i1 %v7_8338, label %dec_label_pc_8330, label %dec_label_pc_8348

dec_label_pc_8348:                                ; preds = %dec_label_pc_8338
  %v1_8348 = add i32 %v0_831c, 5
  %v2_8348 = inttoptr i32 %v1_8348 to i8*
  %v3_8348 = load i8, i8* %v2_8348, align 1
  %v4_8348 = zext i8 %v3_8348 to i32
  store i32 %v4_8348, i32* @r8, align 4
  %v2_834c = icmp eq i8 %v3_8348, 0
  store i1 %v2_834c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_834c, label %dec_label_pc_8330, label %dec_label_pc_8354

dec_label_pc_8354:                                ; preds = %dec_label_pc_8348
  %v3_8354 = mul nuw nsw i32 %v4_8348, 4
  store i32 %v3_8354, i32* %sb.global-to-local, align 4
  %v1_8358 = add i32 %arg2, -6
  store i32 %v1_8358, i32* @r6, align 4
  %v2_835c = mul nuw nsw i32 %v4_8348, 5
  store i32 %v2_835c, i32* @r7, align 4
  %v3_8360 = icmp ult i32 %v1_8358, %v2_835c
  %v9_8360 = icmp eq i32 %v1_8358, %v2_835c
  store i1 %v9_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8360, label %dec_label_pc_8330, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_8354
  store i32 %v4_8348, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8370 = call i32 @function_135b8(i32 %v4_8348, i32 24)
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  %v0_8374 = load i32, i32* @r8, align 4
  %v2_8374 = icmp eq i32 %v0_8374, 0
  store i1 %v2_8374, i1* %cpsr_z.global-to-local, align 1
  %v0_837c = load i32, i32* @r4, align 4
  %v1_837c = add i32 %v0_837c, 6
  store i32 %v1_837c, i32* %fp.global-to-local, align 4
  %tmp36 = icmp slt i32 %v0_8374, 1
  br i1 %tmp36, label %dec_label_pc_83d4thread-pre-split, label %dec_label_pc_8384

dec_label_pc_8384:                                ; preds = %dec_label_pc_8368
  store i32 %v2_8370, i32* %r1.global-to-local, align 4
  %v1_8388 = load i32, i32* @r7, align 4
  %v2_8388 = add i32 %v1_8388, %v0_837c
  store i32 %v2_8388, i32* @ip, align 4
  store i32 %v0_837c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_8398.dec_label_pc_8398_crit_edge, %dec_label_pc_8384
  %v2_83a8 = phi i32 [ %v1_83bc, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v2_8370, %dec_label_pc_8384 ]
  %v0_83a4 = phi i32 [ %v0_83a4.pre, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v2_8388, %dec_label_pc_8384 ]
  %v0_83a0 = phi i32 [ %v0_8398.pre, %dec_label_pc_8398.dec_label_pc_8398_crit_edge ], [ %v0_837c, %dec_label_pc_8384 ]
  %v1_8398 = add i32 %v0_83a0, 10
  %v2_8398 = inttoptr i32 %v1_8398 to i8*
  %v3_8398 = load i8, i8* %v2_8398, align 1
  %v1_839c = add i32 %v0_83a0, 6
  %v2_839c = inttoptr i32 %v1_839c to i32*
  %v3_839c = load i32, i32* %v2_839c, align 4
  store i32 %v3_839c, i32* @r2, align 4
  %v1_83a0 = add i32 %v0_83a0, 5
  store i32 %v1_83a0, i32* %r0.global-to-local, align 4
  %v9_83a4 = icmp eq i32 %v0_83a4, %v1_83a0
  store i1 %v9_83a4, i1* %cpsr_z.global-to-local, align 1
  %v3_83a8 = add i32 %v2_83a8, 20
  %v4_83a8 = inttoptr i32 %v3_83a8 to i8*
  store i8 %v3_8398, i8* %v4_83a8, align 1
  %v0_83ac = load i32, i32* @r2, align 4
  %v1_83ac = load i32, i32* %r1.global-to-local, align 4
  %v2_83ac = add i32 %v1_83ac, 4
  %v3_83ac = inttoptr i32 %v2_83ac to i32*
  store i32 %v0_83ac, i32* %v3_83ac, align 4
  %v0_83b0 = load i32, i32* @r2, align 4
  %v1_83b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83b0 = add i32 %v1_83b0, 16
  %v3_83b0 = inttoptr i32 %v2_83b0 to i32*
  store i32 %v0_83b0, i32* %v3_83b0, align 4
  %v0_83b4 = load i32, i32* @r4, align 4
  %v1_83b4 = trunc i32 %v0_83b4 to i8
  %v2_83b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_83b4 = inttoptr i32 %v2_83b4 to i8*
  store i8 %v1_83b4, i8* %v3_83b4, align 1
  %v0_83b8 = load i32, i32* @lr, align 4
  %v1_83b8 = trunc i32 %v0_83b8 to i8
  %v2_83b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83b8 = add i32 %v2_83b8, 1
  %v4_83b8 = inttoptr i32 %v3_83b8 to i8*
  store i8 %v1_83b8, i8* %v4_83b8, align 1
  %v0_83bc = load i32, i32* %r1.global-to-local, align 4
  %v1_83bc = add i32 %v0_83bc, 24
  store i32 %v1_83bc, i32* %r1.global-to-local, align 4
  %v0_83c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83c0, label %dec_label_pc_83c4, label %dec_label_pc_8398.dec_label_pc_8398_crit_edge

dec_label_pc_8398.dec_label_pc_8398_crit_edge:    ; preds = %dec_label_pc_8398
  %v0_8398.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_83a4.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8398

dec_label_pc_83c4:                                ; preds = %dec_label_pc_8398
  %v0_83c4 = load i32, i32* %sb.global-to-local, align 4
  %v1_83c4 = load i32, i32* @r8, align 4
  %v1_83c8 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83c4, %v0_83c4
  %v2_83c8 = sub i32 %v1_83c8, %sum
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, 6
  store i32 %v1_83cc, i32* %fp.global-to-local, align 4
  %v1_83d0 = add i32 %v2_83c8, -6
  store i32 %v1_83d0, i32* @r6, align 4
  br label %dec_label_pc_83d4

dec_label_pc_83d4thread-pre-split:                ; preds = %dec_label_pc_8368
  %v0_83d4.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83d4

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83d4thread-pre-split, %dec_label_pc_83c4
  %v0_83e0 = phi i32 [ %v1_837c, %dec_label_pc_83d4thread-pre-split ], [ %v1_83cc, %dec_label_pc_83c4 ]
  %v1_83d8 = phi i32 [ %v0_83d4.pr, %dec_label_pc_83d4thread-pre-split ], [ %v1_83d0, %dec_label_pc_83c4 ]
  %v2_83d4 = icmp eq i32 %v1_83d8, 0
  store i1 %v2_83d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83d4, label %dec_label_pc_84f4, label %dec_label_pc_83e0

dec_label_pc_83e0:                                ; preds = %dec_label_pc_83d4
  %v1_83e0 = inttoptr i32 %v0_83e0 to i8*
  %v2_83e0 = load i8, i8* %v1_83e0, align 1
  %v3_83e0 = zext i8 %v2_83e0 to i32
  store i32 %v3_83e0, i32* %sb.global-to-local, align 4
  %v2_83e4 = icmp eq i8 %v2_83e0, 0
  store i1 %v2_83e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e4, label %dec_label_pc_84c4, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e0
  store i32 %v3_83e0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83fc = call i32 @function_135b8(i32 %v3_83e0, i32 8)
  store i32 %v2_83fc, i32* %r0.global-to-local, align 4
  %v0_8400 = load i32, i32* %sb.global-to-local, align 4
  %v2_8400 = icmp eq i32 %v0_8400, 0
  store i1 %v2_8400, i1* %cpsr_z.global-to-local, align 1
  %tmp37 = icmp slt i32 %v0_8400, 1
  br i1 %tmp37, label %dec_label_pc_84c4, label %dec_label_pc_8410

dec_label_pc_8410:                                ; preds = %dec_label_pc_83f4
  %v0_8410 = load i32, i32* @r6, align 4
  %v1_8410 = add i32 %v0_8410, -1
  store i32 %v1_8410, i32* @r2, align 4
  %v7_8410 = icmp eq i32 %v0_8410, 1
  store i1 %v7_8410, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8410, label %dec_label_pc_84f4, label %dec_label_pc_8418

dec_label_pc_8418:                                ; preds = %dec_label_pc_8410
  %v0_8418 = load i32, i32* %fp.global-to-local, align 4
  %v1_8418 = add i32 %v0_8418, 1
  %v2_8418 = inttoptr i32 %v1_8418 to i8*
  %v3_8418 = load i8, i8* %v2_8418, align 1
  %v1_841c = add i32 %v0_8410, -2
  store i32 %v1_841c, i32* @r2, align 4
  %v7_841c = icmp eq i32 %v1_8410, 1
  store i1 %v7_841c, i1* %cpsr_z.global-to-local, align 1
  %v3_8420 = add i32 %v2_83fc, 4
  %v4_8420 = inttoptr i32 %v3_8420 to i8*
  store i8 %v3_8418, i8* %v4_8420, align 1
  %v0_8424 = load i32, i32* %fp.global-to-local, align 4
  %v1_8424 = add i32 %v0_8424, 1
  store i32 %v1_8424, i32* %r0.global-to-local, align 4
  %v0_8428 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8428, label %dec_label_pc_84f4, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8418
  %v1_842c = add i32 %v0_8424, 2
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v4_842c = zext i8 %v3_842c to i32
  store i32 %v4_842c, i32* @r4, align 4
  %v0_8430 = load i32, i32* @r2, align 4
  %v1_8430 = add i32 %v0_8430, -1
  store i32 %v1_8430, i32* @r7, align 4
  %v9_8434 = icmp eq i32 %v1_8430, %v4_842c
  store i1 %v9_8434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_842c, i32* %r0.global-to-local, align 4
  %v5_843c = icmp slt i32 %v1_8430, %v4_842c
  br i1 %v5_843c, label %dec_label_pc_84f4, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  store i32 %v2_83fc, i32* @r5, align 4
  %v1_8448 = add i32 %v2_83fc, 8
  %v1_844c = add i32 %v0_8424, 3
  store i32 %v1_844c, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_849c

dec_label_pc_845c:                                ; preds = %dec_label_pc_849c
  %v0_845c = load i32, i32* @r7, align 4
  %v1_845c = load i32, i32* @r4, align 4
  %v2_845c = sub i32 %v0_845c, %v1_845c
  store i32 %v2_845c, i32* @r2, align 4
  %v9_845c = icmp eq i32 %v0_845c, %v1_845c
  store i1 %v9_845c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_845c, label %dec_label_pc_84f4, label %dec_label_pc_8464

dec_label_pc_8464:                                ; preds = %dec_label_pc_845c
  %v1_8464 = load i32, i32* @r6, align 4
  %v2_8464 = add i32 %v1_8464, %v1_845c
  %v3_8464 = inttoptr i32 %v2_8464 to i8*
  %v4_8464 = load i8, i8* %v3_8464, align 1
  store i32 %stack_var_-44.0, i32* @r5, align 4
  %v1_846c = add i32 %v2_845c, -1
  store i32 %v1_846c, i32* @r2, align 4
  %v7_846c = icmp eq i32 %v2_845c, 1
  store i1 %v7_846c, i1* %cpsr_z.global-to-local, align 1
  %v3_8470 = add i32 %stack_var_-44.0, 4
  %v4_8470 = inttoptr i32 %v3_8470 to i8*
  store i8 %v4_8464, i8* %v4_8470, align 1
  %v0_8474 = load i32, i32* @r4, align 4
  %v1_8474 = load i32, i32* @r6, align 4
  %v2_8474 = add i32 %v1_8474, %v0_8474
  store i32 %v2_8474, i32* %r0.global-to-local, align 4
  %v0_8478 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8478, label %dec_label_pc_84f4, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8464
  %v1_847c = add i32 %v2_8474, 1
  %v2_847c = inttoptr i32 %v1_847c to i8*
  %v3_847c = load i8, i8* %v2_847c, align 1
  %v4_847c = zext i8 %v3_847c to i32
  store i32 %v4_847c, i32* @r4, align 4
  %v0_8480 = load i32, i32* @r2, align 4
  %v1_8480 = add i32 %v0_8480, -1
  store i32 %v1_8480, i32* @r7, align 4
  %v0_8484 = load i32, i32* @r5, align 4
  %v1_8484 = add i32 %v0_8484, 8
  store i32 %v1_8484, i32* %r1.global-to-local, align 4
  %v2_8488 = sub i32 %v1_8480, %v4_847c
  %tmp39 = sub i32 0, %v2_8488
  %v6_8488 = and i32 %v1_8480, %tmp39
  %v7_8488 = icmp slt i32 %v6_8488, 0
  %v8_8488 = icmp slt i32 %v2_8488, 0
  %v9_8488 = icmp eq i32 %v1_8480, %v4_847c
  store i1 %v9_8488, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_847c, i32* %r0.global-to-local, align 4
  %v2_8494 = xor i1 %v8_8488, %v7_8488
  br i1 %v2_8494, label %dec_label_pc_84f4, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_847c
  %v1_8498 = add i32 %v2_8474, 2
  store i32 %v1_8498, i32* @r6, align 4
  br label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %dec_label_pc_8440, %dec_label_pc_8498
  %v0_84a0 = phi i32 [ %v4_842c, %dec_label_pc_8440 ], [ %v4_847c, %dec_label_pc_8498 ]
  %stack_var_-44.0 = phi i32 [ %v1_8448, %dec_label_pc_8440 ], [ %v1_8484, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v2_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @function_135b8(i32 %v2_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  %v0_84a8 = load i32, i32* %fp.global-to-local, align 4
  %v1_84a8 = add i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %fp.global-to-local, align 4
  %v1_84ac = load i32, i32* @r5, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  %v3_84b8 = call i32 @function_120c8(i32 %v2_84a4, i32 %v0_84b0, i32 %v0_84b4)
  store i32 %v3_84b8, i32* %r0.global-to-local, align 4
  %v0_84bc = load i32, i32* %sb.global-to-local, align 4
  %v1_84bc = load i32, i32* %fp.global-to-local, align 4
  %v9_84bc = icmp eq i32 %v0_84bc, %v1_84bc
  store i1 %v9_84bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84bc, label %dec_label_pc_84c4, label %dec_label_pc_845c

dec_label_pc_84c4:                                ; preds = %dec_label_pc_849c, %dec_label_pc_83f4, %dec_label_pc_83e0
  %stack_var_-52.2 = phi i32 [ %v3_83e0, %dec_label_pc_83e0 ], [ %v2_83fc, %dec_label_pc_83f4 ], [ %v2_83fc, %dec_label_pc_849c ]
  %v0_84c4 = call i32 @function_12f88()
  store i32 %v0_84c4, i32* %r0.global-to-local, align 4
  %v2_84cc = inttoptr i32 %v0_84c4 to i32*
  store i32 0, i32* %v2_84cc, align 4
  %v0_84d0 = call i32 @function_12a0c()
  store i32 %v0_84d0, i32* %r0.global-to-local, align 4
  %v7_84d4 = icmp eq i32 %v0_84d0, -1
  %v2_84e0 = icmp eq i32 %v0_84d0, 0
  store i1 %v2_84e0, i1* %cpsr_z.global-to-local, align 1
  %tmp41 = icmp slt i32 %v0_84d0, 1
  br i1 %tmp41, label %bb42, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_84c4
  store i32 1, i32* @r2, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_84f4

bb42:                                             ; preds = %dec_label_pc_84c4
  %. = zext i1 %v7_84d4 to i32
  store i32 %., i32* @r2, align 4
  %v2_84ec = icmp eq i1 %v7_84d4, false
  store i1 %v2_84ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ec, label %dec_label_pc_8548, label %dec_label_pc_84f4

dec_label_pc_84f4:                                ; preds = %dec_label_pc_847c, %dec_label_pc_8464, %dec_label_pc_845c, %.thread1, %bb42, %dec_label_pc_842c, %dec_label_pc_8418, %dec_label_pc_8410, %dec_label_pc_83d4
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83d4 ], [ %stack_var_-52.2, %bb42 ], [ %v2_83fc, %dec_label_pc_8410 ], [ %v2_83fc, %dec_label_pc_8418 ], [ %v2_83fc, %dec_label_pc_842c ], [ %stack_var_-52.2, %.thread1 ], [ %v2_83fc, %dec_label_pc_845c ], [ %v2_83fc, %dec_label_pc_8464 ], [ %v2_83fc, %dec_label_pc_847c ]
  store i32 %v2_8370, i32* %r1.global-to-local, align 4
  %v2_84f8 = icmp eq i32 %v2_8370, 0
  store i1 %v2_84f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84f8, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_84f4
  store i32 %v2_8370, i32* %r0.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_84f4, %bb43
  %v1_8500 = xor i1 %v2_84f8, true
  call void @__pseudo_cond_branch(i1 %v1_8500, i32 ptrtoint (i32* @global_var_13610.20 to i32))
  %v2_8508 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8508, label %.dec_label_pc_8330_crit_edge, label %dec_label_pc_8510

.dec_label_pc_8330_crit_edge:                     ; preds = %bb44
  %v29_8334.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8330

dec_label_pc_8510:                                ; preds = %bb44
  %v0_8510 = load i32, i32* %sb.global-to-local, align 4
  %v2_8510 = icmp eq i32 %v0_8510, 0
  store i1 %v2_8510, i1* %cpsr_z.global-to-local, align 1
  %tmp45 = icmp slt i32 %v0_8510, 1
  br i1 %tmp45, label %dec_label_pc_8538, label %dec_label_pc_8518

dec_label_pc_8518:                                ; preds = %dec_label_pc_8510
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8518
  %v1_8520 = phi i32 [ %v1_852c, %dec_label_pc_851c ], [ 0, %dec_label_pc_8518 ]
  store i32 %stack_var_-52.3, i32* %r1.global-to-local, align 4
  %v4_8520 = mul i32 %v1_8520, 8
  %v5_8520 = add i32 %v4_8520, %stack_var_-52.3
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_8528, i32 ptrtoint (i32* @global_var_13610.20 to i32))
  %v0_852c = load i32, i32* %r4.global-to-local, align 4
  %v1_852c = add i32 %v0_852c, 1
  store i32 %v1_852c, i32* %r4.global-to-local, align 4
  %v0_8530 = load i32, i32* %sb.global-to-local, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_852c
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_8538:                                ; preds = %dec_label_pc_851c, %dec_label_pc_8510
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_830c, i32* @r4, align 4
  store i32 %v6_830c, i32* @r5, align 4
  store i32 %v9_830c, i32* @r6, align 4
  store i32 %v12_830c, i32* @r7, align 4
  store i32 %v15_830c, i32* @r8, align 4
  store i32 %v18_830c, i32* %sb.global-to-local, align 4
  store i32 %v21_830c, i32* %sl.global-to-local, align 4
  store i32 %v24_830c, i32* %fp.global-to-local, align 4
  store i32 %v27_830c, i32* @lr, align 4
  %v0_8544 = call i32 @function_13610()
  store i32 %v0_8544, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %bb42, %dec_label_pc_8538
  %stack_var_-52.4 = phi i32 [ %stack_var_-52.3, %dec_label_pc_8538 ], [ %stack_var_-52.2, %bb42 ]
  %v2_854c = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_854c = zext i8 %v2_854c to i32
  %v2_8550 = icmp eq i8 %v2_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8550, label %dec_label_pc_8598, label %dec_label_pc_8558

dec_label_pc_8558:                                ; preds = %dec_label_pc_8548
  %v2_855c = load i32, i32* @global_var_1dc9c.24, align 4
  store i32 %v2_855c, i32* %r0.global-to-local, align 4
  %v1_8560 = inttoptr i32 %v2_855c to i32*
  %v2_8560 = load i32, i32* %v1_8560, align 4
  store i32 %v2_8560, i32* @ip, align 4
  store i32 %v4_833c, i32* %r4.global-to-local, align 4
  %v1_8568 = add i32 %v2_8560, 4
  %v2_8568 = inttoptr i32 %v1_8568 to i8*
  %v3_8568 = load i8, i8* %v2_8568, align 1
  store i32 %v4_833c, i32* %r1.global-to-local, align 4
  %v9_8570 = icmp eq i8 %v3_8568, %v3_833c
  store i1 %v9_8570, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8570, label %dec_label_pc_85a0, label %dec_label_pc_858c.preheader

dec_label_pc_858c.preheader:                      ; preds = %dec_label_pc_8558
  %v0_858c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_858c

dec_label_pc_857c:                                ; preds = %dec_label_pc_858c
  %v4_857c = mul i32 %v1_858c, 4
  %v5_857c = add i32 %v4_857c, %v2_855c
  %v6_857c = inttoptr i32 %v5_857c to i32*
  %v7_857c = load i32, i32* %v6_857c, align 4
  store i32 %v7_857c, i32* @ip, align 4
  %v1_8580 = add i32 %v7_857c, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v9_8584 = icmp eq i8 %v3_8580, %v3_833c
  store i1 %v9_8584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8584, label %dec_label_pc_85a0, label %dec_label_pc_858c

dec_label_pc_858c:                                ; preds = %dec_label_pc_858c.preheader, %dec_label_pc_857c
  %v0_858c = phi i32 [ %v0_858c.pre, %dec_label_pc_858c.preheader ], [ %v1_858c, %dec_label_pc_857c ]
  %v1_858c = add i32 %v0_858c, 1
  %v9_8590 = icmp eq i32 %v1_858c, %v3_854c
  store i1 %v9_8590, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8590, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_8598:                                ; preds = %dec_label_pc_858c, %dec_label_pc_8548, %dec_label_pc_85a0
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_859c = call i32 @function_13ba8(i32 0)
  store i32 %v1_859c, i32* %r0.global-to-local, align 4
  %v0_85d8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_85a0

dec_label_pc_85a0:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8558, %dec_label_pc_8598
  %v0_85d8 = phi i32 [ %v2_8560, %dec_label_pc_8558 ], [ %v0_85d8.pre, %dec_label_pc_8598 ], [ %v7_857c, %dec_label_pc_857c ]
  %v0_85a0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %stack_var_-52.4, i32* %r4.global-to-local, align 4
  %v2_85c4 = call i32 @llvm.bswap.i32(i32 %v0_85a0)
  store i32 %v2_85c4, i32* %r0.global-to-local, align 4
  %v0_85cc = load i32, i32* @r8, align 4
  store i32 %v0_85cc, i32* %r1.global-to-local, align 4
  %v1_85d8 = inttoptr i32 %v0_85d8 to i32*
  %v2_85d8 = load i32, i32* %v1_85d8, align 4
  call void @__pseudo_branch(i32 %v2_85d8)
  br label %dec_label_pc_8598

; uselistorder directives
  uselistorder i32 %v1_858c, { 2, 0, 1 }
  uselistorder i1 %v9_8584, { 1, 0 }
  uselistorder i1 %v9_8570, { 1, 0 }
  uselistorder i32 %v1_852c, { 1, 2, 0 }
  uselistorder i32 %stack_var_-52.3, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_84ec, { 1, 0 }
  uselistorder i1 %v7_84d4, { 1, 0 }
  uselistorder i32 %v0_84d0, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-52.2, { 2, 0, 1 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v2_8488, { 1, 0 }
  uselistorder i32 %v1_8480, { 2, 0, 1, 3 }
  uselistorder i32 %v4_847c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8410, { 0, 2, 1 }
  uselistorder i32 %v2_83fc, { 0, 1, 2, 10, 9, 8, 3, 5, 6, 7, 4, 11 }
  uselistorder i32 %v3_83e0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_83bc, { 1, 0 }
  uselistorder i32 %v0_83a0, { 0, 2, 1 }
  uselistorder i32 %v0_837c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8370, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_835c, { 2, 1, 0 }
  uselistorder i32 %v4_8348, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_831c, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 %v3_830c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 0, 4, 5, 1, 2, 3, 6, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 8, 4, 5, 2, 6, 25, 7, 26, 11, 12, 16, 13, 9, 10, 14, 15, 22, 17, 19, 18, 20, 21, 24, 23, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 16, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 %arg2, { 1, 3, 2, 0, 5, 4, 6 }
  uselistorder label %dec_label_pc_85a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8598, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 1, 0 }
  uselistorder label %dec_label_pc_8548, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_84f4, { 4, 3, 0, 1, 2, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8330, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_85e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e8:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e8 = load i32, i32* @r4, align 4
  store i32 %v3_85e8, i32* %stack_var_-24, align 4
  %v6_85e8 = load i32, i32* @r5, align 4
  %v9_85e8 = load i32, i32* @r6, align 4
  %v12_85e8 = load i32, i32* @r7, align 4
  %v15_85e8 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85f4 = call i32 @function_135b8(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1dc98.22 to i32), i32* @r4, align 4
  %v2_85fc = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_85fc = zext i8 %v2_85fc to i32
  store i32 ptrtoint (i32* @global_var_1dc9c.24 to i32), i32* @r6, align 4
  store i32 53536, i32* %r2.global-to-local, align 4
  store i32 %v2_85f4, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8610 = mul nuw nsw i32 %v3_85fc, 4
  store i32 %v3_8610, i32* %r1.global-to-local, align 4
  %v2_8614 = load i32, i32* @global_var_1dc9c.24, align 4
  %v2_8618 = inttoptr i32 %v2_85f4 to i32*
  store i32 53536, i32* %v2_8618, align 4
  %v3_861c = load i32, i32* @r5, align 4
  %v4_861c = add i32 %v3_861c, 4
  %v5_861c = inttoptr i32 %v4_861c to i8*
  store i8 0, i8* %v5_861c, align 1
  %v0_8620 = load i32, i32* %r1.global-to-local, align 4
  %v1_8620 = add i32 %v0_8620, 4
  store i32 %v1_8620, i32* %r1.global-to-local, align 4
  %v5_8624 = call i32 @function_13700(i32 %v2_8614, i32 %v1_8620, i32 53536, i32 0)
  %v2_8628 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_8628 = zext i8 %v2_8628 to i32
  store i32 %v3_8628, i32* %r3.global-to-local, align 4
  store i32 %v5_8624, i32* %ip.global-to-local, align 4
  %v0_8630 = load i32, i32* @r5, align 4
  %v5_8630 = mul nuw nsw i32 %v3_8628, 4
  %v6_8630 = add i32 %v5_8630, %v5_8624
  %v7_8630 = inttoptr i32 %v6_8630 to i32*
  store i32 %v0_8630, i32* %v7_8630, align 4
  store i32 ptrtoint (i8* @global_var_1dc99.29 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_8640 = load i32, i32* @r4, align 4
  %v4_8640 = inttoptr i32 %v3_8640 to i8*
  store i8 ptrtoint (i8* @global_var_1dc99.29 to i8), i8* %v4_8640, align 1
  %v0_8644 = load i32, i32* %ip.global-to-local, align 4
  %v1_8644 = load i32, i32* @r6, align 4
  %v2_8644 = inttoptr i32 %v1_8644 to i32*
  store i32 %v0_8644, i32* %v2_8644, align 4
  %v2_8648 = call i32 @function_135b8(i32 1, i32 8)
  %v2_864c = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_864c = zext i8 %v2_864c to i32
  store i32 ptrtoint (i32* @global_var_d7c8.31 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8648, i32* @r5, align 4
  %v3_865c = mul nuw nsw i32 %v3_864c, 4
  store i32 %v3_865c, i32* %r1.global-to-local, align 4
  %v2_8660 = load i32, i32* @global_var_1dc9c.24, align 4
  %v2_8664 = inttoptr i32 %v2_8648 to i32*
  store i32 ptrtoint (i32* @global_var_d7c8.31 to i32), i32* %v2_8664, align 4
  %v0_8668 = load i32, i32* @r8, align 4
  %v1_8668 = trunc i32 %v0_8668 to i8
  %v2_8668 = load i32, i32* @r5, align 4
  %v3_8668 = add i32 %v2_8668, 4
  %v4_8668 = inttoptr i32 %v3_8668 to i8*
  store i8 %v1_8668, i8* %v4_8668, align 1
  %v0_866c = load i32, i32* %r1.global-to-local, align 4
  %v1_866c = add i32 %v0_866c, 4
  store i32 %v1_866c, i32* %r1.global-to-local, align 4
  %v5_8670 = call i32 @function_13700(i32 %v2_8660, i32 %v1_866c, i32 sext (i8 ptrtoint (i8* @global_var_1dc99.29 to i8) to i32), i32 ptrtoint (i32* @global_var_d7c8.31 to i32))
  %v2_8674 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_8674 = zext i8 %v2_8674 to i32
  store i32 %v3_8674, i32* %r3.global-to-local, align 4
  store i32 %v5_8670, i32* %ip.global-to-local, align 4
  %v0_867c = load i32, i32* @r5, align 4
  %v5_867c = mul nuw nsw i32 %v3_8674, 4
  %v6_867c = add i32 %v5_867c, %v5_8670
  %v7_867c = inttoptr i32 %v6_867c to i32*
  store i32 %v0_867c, i32* %v7_867c, align 4
  %v0_8680 = load i32, i32* %r3.global-to-local, align 4
  %v1_8680 = load i32, i32* @r8, align 4
  %v2_8680 = add i32 %v1_8680, %v0_8680
  store i32 %v2_8680, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_868c = load i32, i32* %ip.global-to-local, align 4
  %v1_868c = load i32, i32* @r6, align 4
  %v2_868c = inttoptr i32 %v1_868c to i32*
  store i32 %v0_868c, i32* %v2_868c, align 4
  %v0_8690 = load i32, i32* %r2.global-to-local, align 4
  %v1_8690 = trunc i32 %v0_8690 to i8
  %v2_8690 = load i32, i32* @r4, align 4
  %v3_8690 = inttoptr i32 %v2_8690 to i8*
  store i8 %v1_8690, i8* %v3_8690, align 1
  %v2_8694 = call i32 @function_135b8(i32 %v1_8680, i32 8)
  %v2_8698 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_8698 = zext i8 %v2_8698 to i32
  store i32 ptrtoint (i32* @global_var_dcc8.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8694, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_86a8 = mul nuw nsw i32 %v3_8698, 4
  store i32 %v3_86a8, i32* %r1.global-to-local, align 4
  %v2_86ac = load i32, i32* @global_var_1dc9c.24, align 4
  %v2_86b0 = inttoptr i32 %v2_8694 to i32*
  store i32 ptrtoint (i32* @global_var_dcc8.33 to i32), i32* %v2_86b0, align 4
  %v3_86b4 = load i32, i32* @r5, align 4
  %v4_86b4 = add i32 %v3_86b4, 4
  %v5_86b4 = inttoptr i32 %v4_86b4 to i8*
  store i8 2, i8* %v5_86b4, align 1
  %v0_86b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_86b8 = add i32 %v0_86b8, 4
  store i32 %v1_86b8, i32* %r1.global-to-local, align 4
  %v5_86bc = call i32 @function_13700(i32 %v2_86ac, i32 %v1_86b8, i32 ptrtoint (i32* @global_var_dcc8.33 to i32), i32 2)
  %v2_86c0 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_86c0 = zext i8 %v2_86c0 to i32
  store i32 %v3_86c0, i32* %r3.global-to-local, align 4
  store i32 %v5_86bc, i32* %ip.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r8, align 4
  %v2_86c8 = add i32 %v1_86c8, %v3_86c0
  %v3_86c8 = trunc i32 %v2_86c8 to i8
  store i32 %v2_86c8, i32* %r2.global-to-local, align 4
  %v0_86cc = load i32, i32* @r5, align 4
  %v5_86cc = mul nuw nsw i32 %v3_86c0, 4
  %v6_86cc = add i32 %v5_86cc, %v5_86bc
  %v7_86cc = inttoptr i32 %v6_86cc to i32*
  store i32 %v0_86cc, i32* %v7_86cc, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r8, align 4
  %v3_86d8 = load i32, i32* @r4, align 4
  %v4_86d8 = inttoptr i32 %v3_86d8 to i8*
  store i8 %v3_86c8, i8* %v4_86d8, align 1
  %v0_86dc = load i32, i32* %ip.global-to-local, align 4
  %v1_86dc = load i32, i32* @r6, align 4
  %v2_86dc = inttoptr i32 %v1_86dc to i32*
  store i32 %v0_86dc, i32* %v2_86dc, align 4
  %v2_86e0 = call i32 @function_135b8(i32 %v0_86d4, i32 8)
  %v2_86e4 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_86e4 = zext i8 %v2_86e4 to i32
  store i32 ptrtoint (i32* @global_var_ce04.35 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_86e0, i32* @r5, align 4
  %v3_86f4 = mul nuw nsw i32 %v3_86e4, 4
  store i32 %v3_86f4, i32* %r1.global-to-local, align 4
  %v2_86f8 = load i32, i32* @global_var_1dc9c.24, align 4
  %v2_86fc = inttoptr i32 %v2_86e0 to i32*
  store i32 ptrtoint (i32* @global_var_ce04.35 to i32), i32* %v2_86fc, align 4
  %v0_8700 = load i32, i32* @r7, align 4
  %v1_8700 = trunc i32 %v0_8700 to i8
  %v2_8700 = load i32, i32* @r5, align 4
  %v3_8700 = add i32 %v2_8700, 4
  %v4_8700 = inttoptr i32 %v3_8700 to i8*
  store i8 %v1_8700, i8* %v4_8700, align 1
  %v0_8704 = load i32, i32* %r1.global-to-local, align 4
  %v1_8704 = add i32 %v0_8704, 4
  store i32 %v1_8704, i32* %r1.global-to-local, align 4
  %v5_8708 = call i32 @function_13700(i32 %v2_86f8, i32 %v1_8704, i32 %v2_86c8, i32 ptrtoint (i32* @global_var_ce04.35 to i32))
  %v2_870c = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_870c = zext i8 %v2_870c to i32
  store i32 %v3_870c, i32* %r3.global-to-local, align 4
  store i32 %v5_8708, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* @r5, align 4
  %v5_8714 = mul nuw nsw i32 %v3_870c, 4
  %v6_8714 = add i32 %v5_8714, %v5_8708
  %v7_8714 = inttoptr i32 %v6_8714 to i32*
  store i32 %v0_8714, i32* %v7_8714, align 4
  %v0_8718 = load i32, i32* %r3.global-to-local, align 4
  %v1_8718 = load i32, i32* @r8, align 4
  %v2_8718 = add i32 %v1_8718, %v0_8718
  store i32 %v2_8718, i32* %r2.global-to-local, align 4
  %v0_871c = load i32, i32* @r7, align 4
  store i32 %v0_871c, i32* %r1.global-to-local, align 4
  %v0_8724 = load i32, i32* %ip.global-to-local, align 4
  %v1_8724 = load i32, i32* @r6, align 4
  %v2_8724 = inttoptr i32 %v1_8724 to i32*
  store i32 %v0_8724, i32* %v2_8724, align 4
  %v0_8728 = load i32, i32* %r2.global-to-local, align 4
  %v1_8728 = trunc i32 %v0_8728 to i8
  %v2_8728 = load i32, i32* @r4, align 4
  %v3_8728 = inttoptr i32 %v2_8728 to i8*
  store i8 %v1_8728, i8* %v3_8728, align 1
  %v2_872c = call i32 @function_135b8(i32 %v1_8718, i32 %v0_871c)
  %v2_8730 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_8730 = zext i8 %v2_8730 to i32
  store i32 ptrtoint (i32* @global_var_c688.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_872c, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_8740 = mul nuw nsw i32 %v3_8730, 4
  store i32 %v3_8740, i32* %r1.global-to-local, align 4
  %v2_8744 = load i32, i32* @global_var_1dc9c.24, align 4
  %v2_8748 = inttoptr i32 %v2_872c to i32*
  store i32 ptrtoint (i32* @global_var_c688.37 to i32), i32* %v2_8748, align 4
  %v3_874c = load i32, i32* @r5, align 4
  %v4_874c = add i32 %v3_874c, 4
  %v5_874c = inttoptr i32 %v4_874c to i8*
  store i8 3, i8* %v5_874c, align 1
  %v0_8750 = load i32, i32* %r1.global-to-local, align 4
  %v1_8750 = add i32 %v0_8750, 4
  store i32 %v1_8750, i32* %r1.global-to-local, align 4
  %v5_8754 = call i32 @function_13700(i32 %v2_8744, i32 %v1_8750, i32 ptrtoint (i32* @global_var_c688.37 to i32), i32 3)
  %v2_8758 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_8758 = zext i8 %v2_8758 to i32
  store i32 %v3_8758, i32* %r3.global-to-local, align 4
  store i32 %v5_8754, i32* %ip.global-to-local, align 4
  %v0_8760 = load i32, i32* @r5, align 4
  %v5_8760 = mul nuw nsw i32 %v3_8758, 4
  %v6_8760 = add i32 %v5_8760, %v5_8754
  %v7_8760 = inttoptr i32 %v6_8760 to i32*
  store i32 %v0_8760, i32* %v7_8760, align 4
  %v0_8764 = load i32, i32* %r3.global-to-local, align 4
  %v1_8764 = load i32, i32* @r8, align 4
  %v2_8764 = add i32 %v1_8764, %v0_8764
  store i32 %v2_8764, i32* %r2.global-to-local, align 4
  %v0_8768 = load i32, i32* @r7, align 4
  store i32 %v0_8768, i32* %r1.global-to-local, align 4
  %v0_8770 = load i32, i32* %ip.global-to-local, align 4
  %v1_8770 = load i32, i32* @r6, align 4
  %v2_8770 = inttoptr i32 %v1_8770 to i32*
  store i32 %v0_8770, i32* %v2_8770, align 4
  %v0_8774 = load i32, i32* %r2.global-to-local, align 4
  %v1_8774 = trunc i32 %v0_8774 to i8
  %v2_8774 = load i32, i32* @r4, align 4
  %v3_8774 = inttoptr i32 %v2_8774 to i8*
  store i8 %v1_8774, i8* %v3_8774, align 1
  %v2_8778 = call i32 @function_135b8(i32 %v1_8764, i32 %v0_8768)
  %v2_877c = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_877c = zext i8 %v2_877c to i32
  store i32 ptrtoint (i32* @global_var_bec8.39 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8778, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_878c = mul nuw nsw i32 %v3_877c, 4
  store i32 %v3_878c, i32* %r1.global-to-local, align 4
  %v2_8790 = load i32, i32* @global_var_1dc9c.24, align 4
  %v2_8794 = inttoptr i32 %v2_8778 to i32*
  store i32 ptrtoint (i32* @global_var_bec8.39 to i32), i32* %v2_8794, align 4
  %v3_8798 = load i32, i32* @r5, align 4
  %v4_8798 = add i32 %v3_8798, 4
  %v5_8798 = inttoptr i32 %v4_8798 to i8*
  store i8 4, i8* %v5_8798, align 1
  %v0_879c = load i32, i32* %r1.global-to-local, align 4
  %v1_879c = add i32 %v0_879c, 4
  store i32 %v1_879c, i32* %r1.global-to-local, align 4
  %v5_87a0 = call i32 @function_13700(i32 %v2_8790, i32 %v1_879c, i32 ptrtoint (i32* @global_var_bec8.39 to i32), i32 4)
  %v2_87a4 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_87a4 = zext i8 %v2_87a4 to i32
  store i32 %v3_87a4, i32* %r3.global-to-local, align 4
  store i32 %v5_87a0, i32* %ip.global-to-local, align 4
  %v0_87ac = load i32, i32* @r5, align 4
  %v5_87ac = mul nuw nsw i32 %v3_87a4, 4
  %v6_87ac = add i32 %v5_87ac, %v5_87a0
  %v7_87ac = inttoptr i32 %v6_87ac to i32*
  store i32 %v0_87ac, i32* %v7_87ac, align 4
  %v0_87b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87b0 = load i32, i32* @r8, align 4
  %v2_87b0 = add i32 %v1_87b0, %v0_87b0
  store i32 %v2_87b0, i32* %r2.global-to-local, align 4
  %v0_87b4 = load i32, i32* @r7, align 4
  store i32 %v0_87b4, i32* %r1.global-to-local, align 4
  %v0_87bc = load i32, i32* %ip.global-to-local, align 4
  %v1_87bc = load i32, i32* @r6, align 4
  %v2_87bc = inttoptr i32 %v1_87bc to i32*
  store i32 %v0_87bc, i32* %v2_87bc, align 4
  %v0_87c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_87c0 = trunc i32 %v0_87c0 to i8
  %v2_87c0 = load i32, i32* @r4, align 4
  %v3_87c0 = inttoptr i32 %v2_87c0 to i8*
  store i8 %v1_87c0, i8* %v3_87c0, align 1
  %v2_87c4 = call i32 @function_135b8(i32 %v1_87b0, i32 %v0_87b4)
  %v2_87c8 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_87c8 = zext i8 %v2_87c8 to i32
  store i32 ptrtoint (i32* @global_var_b5b8.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87c4, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_87d8 = mul nuw nsw i32 %v3_87c8, 4
  store i32 %v3_87d8, i32* %r1.global-to-local, align 4
  %v2_87dc = load i32, i32* @global_var_1dc9c.24, align 4
  %v2_87e0 = inttoptr i32 %v2_87c4 to i32*
  store i32 ptrtoint (i32* @global_var_b5b8.41 to i32), i32* %v2_87e0, align 4
  %v3_87e4 = load i32, i32* @r5, align 4
  %v4_87e4 = add i32 %v3_87e4, 4
  %v5_87e4 = inttoptr i32 %v4_87e4 to i8*
  store i8 5, i8* %v5_87e4, align 1
  %v0_87e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87e8 = add i32 %v0_87e8, 4
  store i32 %v1_87e8, i32* %r1.global-to-local, align 4
  %v5_87ec = call i32 @function_13700(i32 %v2_87dc, i32 %v1_87e8, i32 ptrtoint (i32* @global_var_b5b8.41 to i32), i32 5)
  %v2_87f0 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_87f0 = zext i8 %v2_87f0 to i32
  store i32 %v3_87f0, i32* %r3.global-to-local, align 4
  store i32 %v5_87ec, i32* %ip.global-to-local, align 4
  %v0_87f8 = load i32, i32* @r5, align 4
  %v5_87f8 = mul nuw nsw i32 %v3_87f0, 4
  %v6_87f8 = add i32 %v5_87f8, %v5_87ec
  %v7_87f8 = inttoptr i32 %v6_87f8 to i32*
  store i32 %v0_87f8, i32* %v7_87f8, align 4
  %v0_87fc = load i32, i32* %r3.global-to-local, align 4
  %v1_87fc = load i32, i32* @r8, align 4
  %v2_87fc = add i32 %v1_87fc, %v0_87fc
  store i32 %v2_87fc, i32* %r2.global-to-local, align 4
  %v0_8800 = load i32, i32* @r7, align 4
  store i32 %v0_8800, i32* %r1.global-to-local, align 4
  %v0_8808 = load i32, i32* %ip.global-to-local, align 4
  %v1_8808 = load i32, i32* @r6, align 4
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  store i32 %v0_8808, i32* %v2_8808, align 4
  %v0_880c = load i32, i32* %r2.global-to-local, align 4
  %v1_880c = trunc i32 %v0_880c to i8
  %v2_880c = load i32, i32* @r4, align 4
  %v3_880c = inttoptr i32 %v2_880c to i8*
  store i8 %v1_880c, i8* %v3_880c, align 1
  %v2_8810 = call i32 @function_135b8(i32 %v1_87fc, i32 %v0_8800)
  %v2_8814 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_8814 = zext i8 %v2_8814 to i32
  store i32 ptrtoint (i32* @global_var_ae80.43 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8810, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_8824 = mul nuw nsw i32 %v3_8814, 4
  store i32 %v3_8824, i32* %r1.global-to-local, align 4
  %v2_8828 = load i32, i32* @global_var_1dc9c.24, align 4
  %v2_882c = inttoptr i32 %v2_8810 to i32*
  store i32 ptrtoint (i32* @global_var_ae80.43 to i32), i32* %v2_882c, align 4
  %v3_8830 = load i32, i32* @r5, align 4
  %v4_8830 = add i32 %v3_8830, 4
  %v5_8830 = inttoptr i32 %v4_8830 to i8*
  store i8 6, i8* %v5_8830, align 1
  %v0_8834 = load i32, i32* %r1.global-to-local, align 4
  %v1_8834 = add i32 %v0_8834, 4
  store i32 %v1_8834, i32* %r1.global-to-local, align 4
  %v5_8838 = call i32 @function_13700(i32 %v2_8828, i32 %v1_8834, i32 ptrtoint (i32* @global_var_ae80.43 to i32), i32 6)
  %v2_883c = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_883c = zext i8 %v2_883c to i32
  store i32 %v3_883c, i32* %r3.global-to-local, align 4
  store i32 %v5_8838, i32* %ip.global-to-local, align 4
  %v0_8844 = load i32, i32* @r5, align 4
  %v5_8844 = mul nuw nsw i32 %v3_883c, 4
  %v6_8844 = add i32 %v5_8844, %v5_8838
  %v7_8844 = inttoptr i32 %v6_8844 to i32*
  store i32 %v0_8844, i32* %v7_8844, align 4
  %v0_8848 = load i32, i32* %r3.global-to-local, align 4
  %v1_8848 = load i32, i32* @r8, align 4
  %v2_8848 = add i32 %v1_8848, %v0_8848
  store i32 %v2_8848, i32* %r2.global-to-local, align 4
  %v0_884c = load i32, i32* @r7, align 4
  store i32 %v0_884c, i32* %r1.global-to-local, align 4
  %v0_8854 = load i32, i32* %ip.global-to-local, align 4
  %v1_8854 = load i32, i32* @r6, align 4
  %v2_8854 = inttoptr i32 %v1_8854 to i32*
  store i32 %v0_8854, i32* %v2_8854, align 4
  %v0_8858 = load i32, i32* %r2.global-to-local, align 4
  %v1_8858 = trunc i32 %v0_8858 to i8
  %v2_8858 = load i32, i32* @r4, align 4
  %v3_8858 = inttoptr i32 %v2_8858 to i8*
  store i8 %v1_8858, i8* %v3_8858, align 1
  %v2_885c = call i32 @function_135b8(i32 %v1_8848, i32 %v0_884c)
  %v2_8860 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_8860 = zext i8 %v2_8860 to i32
  store i32 42712, i32* %r2.global-to-local, align 4
  store i32 %v2_885c, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8870 = mul nuw nsw i32 %v3_8860, 4
  store i32 %v3_8870, i32* %r1.global-to-local, align 4
  %v2_8874 = load i32, i32* @global_var_1dc9c.24, align 4
  %v2_8878 = inttoptr i32 %v2_885c to i32*
  store i32 42712, i32* %v2_8878, align 4
  %v3_887c = load i32, i32* @r5, align 4
  %v4_887c = add i32 %v3_887c, 4
  %v5_887c = inttoptr i32 %v4_887c to i8*
  store i8 7, i8* %v5_887c, align 1
  %v0_8880 = load i32, i32* %r1.global-to-local, align 4
  %v1_8880 = add i32 %v0_8880, 4
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v5_8884 = call i32 @function_13700(i32 %v2_8874, i32 %v1_8880, i32 42712, i32 7)
  %v2_8888 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_8888 = zext i8 %v2_8888 to i32
  store i32 %v3_8888, i32* %r3.global-to-local, align 4
  store i32 %v5_8884, i32* %ip.global-to-local, align 4
  %v0_8890 = load i32, i32* @r5, align 4
  %v5_8890 = mul nuw nsw i32 %v3_8888, 4
  %v6_8890 = add i32 %v5_8890, %v5_8884
  %v7_8890 = inttoptr i32 %v6_8890 to i32*
  store i32 %v0_8890, i32* %v7_8890, align 4
  %v0_8894 = load i32, i32* %r3.global-to-local, align 4
  %v1_8894 = load i32, i32* @r8, align 4
  %v2_8894 = add i32 %v1_8894, %v0_8894
  store i32 %v2_8894, i32* %r2.global-to-local, align 4
  %v0_8898 = load i32, i32* @r7, align 4
  store i32 %v0_8898, i32* %r1.global-to-local, align 4
  %v1_88a0 = trunc i32 %v2_8894 to i8
  %v2_88a0 = load i32, i32* @r4, align 4
  %v3_88a0 = inttoptr i32 %v2_88a0 to i8*
  store i8 %v1_88a0, i8* %v3_88a0, align 1
  %v0_88a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_88a4 = load i32, i32* @r6, align 4
  %v2_88a4 = inttoptr i32 %v1_88a4 to i32*
  store i32 %v0_88a4, i32* %v2_88a4, align 4
  %v2_88a8 = call i32 @function_135b8(i32 %v1_8894, i32 %v0_8898)
  %v2_88ac = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_88ac = zext i8 %v2_88ac to i32
  store i32 ptrtoint (i32* @global_var_8920.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88a8, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_88bc = mul nuw nsw i32 %v3_88ac, 4
  store i32 %v3_88bc, i32* %r1.global-to-local, align 4
  %v2_88c0 = load i32, i32* @global_var_1dc9c.24, align 4
  %v2_88c4 = inttoptr i32 %v2_88a8 to i32*
  store i32 ptrtoint (i32* @global_var_8920.46 to i32), i32* %v2_88c4, align 4
  %v3_88c8 = load i32, i32* @r5, align 4
  %v4_88c8 = add i32 %v3_88c8, 4
  %v5_88c8 = inttoptr i32 %v4_88c8 to i8*
  store i8 9, i8* %v5_88c8, align 1
  %v0_88cc = load i32, i32* %r1.global-to-local, align 4
  %v1_88cc = add i32 %v0_88cc, 4
  store i32 %v1_88cc, i32* %r1.global-to-local, align 4
  %v5_88d0 = call i32 @function_13700(i32 %v2_88c0, i32 %v1_88cc, i32 ptrtoint (i32* @global_var_8920.46 to i32), i32 9)
  %v2_88d4 = load i8, i8* bitcast (i8** @global_var_1dc98.22 to i8*), align 4
  %v3_88d4 = zext i8 %v2_88d4 to i32
  store i32 %v3_88d4, i32* %r3.global-to-local, align 4
  %v1_88d8 = load i32, i32* @r6, align 4
  %v2_88d8 = inttoptr i32 %v1_88d8 to i32*
  store i32 %v5_88d0, i32* %v2_88d8, align 4
  %v0_88dc = load i32, i32* @r5, align 4
  %v2_88dc = load i32, i32* %r3.global-to-local, align 4
  %v5_88dc = mul i32 %v2_88dc, 4
  %v6_88dc = add i32 %v5_88dc, %v5_88d0
  %v7_88dc = inttoptr i32 %v6_88dc to i32*
  store i32 %v0_88dc, i32* %v7_88dc, align 4
  %v0_88e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88e0 = load i32, i32* @r8, align 4
  %v2_88e0 = add i32 %v1_88e0, %v0_88e0
  store i32 %v2_88e0, i32* %r2.global-to-local, align 4
  %v1_88e8 = trunc i32 %v2_88e0 to i8
  %v2_88e8 = load i32, i32* @r4, align 4
  %v3_88e8 = inttoptr i32 %v2_88e8 to i8*
  store i8 %v1_88e8, i8* %v3_88e8, align 1
  %v2_88ec = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_88ec, i32* @r4, align 4
  store i32 %v6_85e8, i32* @r5, align 4
  store i32 %v9_85e8, i32* @r6, align 4
  store i32 %v12_85e8, i32* @r7, align 4
  store i32 %v15_85e8, i32* @r8, align 4
  ret i32 %v1_88e0

; uselistorder directives
  uselistorder i32 %v1_88e0, { 1, 0 }
  uselistorder i32 %v1_8894, { 1, 0 }
  uselistorder i32 %v1_8848, { 1, 0 }
  uselistorder i32 %v1_87fc, { 1, 0 }
  uselistorder i32 %v1_87b0, { 1, 0 }
  uselistorder i32 %v1_8764, { 1, 0 }
  uselistorder i32 %v1_8718, { 1, 0 }
  uselistorder i32 %v2_86c8, { 0, 2, 1 }
  uselistorder i32 %v3_86c0, { 1, 0, 2 }
  uselistorder i32 %v1_8680, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* @global_var_1dc9c.24, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i8* bitcast (i8** @global_var_1dc98.22 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_8920(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8920:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_8920 = load i32, i32* @r4, align 4
  store i32 %v3_8920, i32* %stack_var_-36, align 4
  %v6_8920 = load i32, i32* @r5, align 4
  %v9_8920 = load i32, i32* @r6, align 4
  %v15_8920 = load i32, i32* @r8, align 4
  %v1_892c = urem i32 %arg3, 256
  store i32 %v1_892c, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_8938 = urem i32 %arg1, 256
  store i32 %v1_8938, i32* %ip.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_892c, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8954 = inttoptr i32 %arg4 to i32*
  %v6_8954 = call i32 @function_81cc(i32 %v1_892c, i32* %v5_8954, i32 20, i32 0, i32 %arg2)
  %v0_8958 = load i32, i32* @r5, align 4
  store i32 %v0_8958, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_8964 = load i32, i32* @r4, align 4
  store i32 %v0_8964, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_150e4.48 to i32), i32* %r3.global-to-local, align 4
  %v6_896c = inttoptr i32 %v0_8958 to i32*
  %v7_896c = call i32 @function_81cc(i32 %v0_8964, i32* %v6_896c, i32 19, i32 ptrtoint ([4 x i8]* @global_var_150e4.48 to i32), i32 %v6_8954)
  %v0_8970 = load i32, i32* @r5, align 4
  store i32 %v0_8970, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_896c, i32* %fp.global-to-local, align 4
  %v0_8980 = load i32, i32* @r4, align 4
  store i32 %v0_8980, i32* %r0.global-to-local, align 4
  %v5_8984 = inttoptr i32 %v0_8970 to i32*
  %v6_8984 = call i32 @function_81cc(i32 %v0_8980, i32* %v5_8984, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8988 = load i32, i32* @r5, align 4
  store i32 %v0_8988, i32* %r1.global-to-local, align 4
  store i32 %v6_8984, i32* %sb.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  %v0_8994 = load i32, i32* @r4, align 4
  store i32 %v0_8994, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150e8.50 to i32), i32* %r3.global-to-local, align 4
  %v5_899c = inttoptr i32 %v0_8988 to i32*
  %v6_899c = call i32 @function_81cc(i32 %v0_8994, i32* %v5_899c, i32 21, i32 ptrtoint (i32* @global_var_150e8.50 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_89a0 = load i32, i32* @r5, align 4
  store i32 %v0_89a0, i32* %r1.global-to-local, align 4
  store i32 %v6_899c, i32* @sl, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v0_89ac = load i32, i32* @r4, align 4
  store i32 %v0_89ac, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_89b4 = inttoptr i32 %v0_89a0 to i32*
  %v5_89b4 = call i32 @function_829c(i32 %v0_89ac, i32* %v4_89b4, i32 23, i32 1)
  %v0_89b8 = load i32, i32* @r5, align 4
  store i32 %v0_89b8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_89b4, i32* @r6, align 4
  %v0_89c8 = load i32, i32* @r4, align 4
  store i32 %v0_89c8, i32* %r0.global-to-local, align 4
  %v4_89cc = inttoptr i32 %v0_89b8 to i32*
  %v5_89cc = call i32 @function_829c(i32 %v0_89c8, i32* %v4_89cc, i32 7, i32 80)
  %v2_89d4 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_89dc = mul i32 %v5_89cc, 65536
  store i32 %v3_89dc, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_89f0 = urem i32 %v5_89cc, 65536
  store i32 %v3_89f0, i32* %r8.global-to-local, align 4
  %v3_89f4 = call i32 @function_12ff0(i8* %tmp199, i32 0)
  store i32 %v3_89f4, i32* %r0.global-to-local, align 4
  %v0_89f8 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_89f8 = icmp slt i32 %v0_89f8, 0
  store i1 %v1_89f8, i1* %cpsr_n.global-to-local, align 1
  %v2_89f8 = icmp eq i32 %v0_89f8, 0
  store i1 %v2_89f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_89f8, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_8920
  %v1_89fc = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_89fc = icmp slt i32 %v1_89fc, 0
  store i1 %v2_89fc, i1* %cpsr_n.global-to-local, align 1
  %v3_89fc = icmp eq i32 %v1_89fc, 0
  store i1 %v3_89fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_89fc, label %bb200, label %dec_label_pc_8a18

.thread13:                                        ; preds = %dec_label_pc_8920
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8a0c

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8a0c

dec_label_pc_8a0c:                                ; preds = %bb200, %dec_label_pc_8a38, %.thread13, %dec_label_pc_8a28, %dec_label_pc_8a18
  %v29_8a14 = phi i32 [ %v2_8a3c, %dec_label_pc_8a38 ], [ %v3_89f4, %.thread13 ], [ %v3_89f4, %bb200 ], [ %v2_8a2c, %dec_label_pc_8a28 ], [ %v2_8a1c, %dec_label_pc_8a18 ]
  %v2_8a14 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_8a14, i32* %r4.global-to-local, align 4
  store i32 %v6_8920, i32* %r5.global-to-local, align 4
  store i32 %v9_8920, i32* %r6.global-to-local, align 4
  store i32 %v15_8920, i32* %r8.global-to-local, align 4
  ret i32 %v29_8a14

dec_label_pc_8a18:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_89f8, i32* %r0.global-to-local, align 4
  %v1_8a1c = inttoptr i32 %v0_89f8 to i8*
  %v2_8a1c = call i32 @function_1204c(i8* %v1_8a1c)
  store i32 %v2_8a1c, i32* %r0.global-to-local, align 4
  %v1_8a20 = add i32 %v2_8a1c, -255
  %v2_8a20 = icmp ugt i32 %v2_8a1c, 254
  store i1 %v2_8a20, i1* %cpsr_c.global-to-local, align 1
  %v3_8a20 = sub i32 254, %v2_8a1c
  %v4_8a20 = and i32 %v3_8a20, %v2_8a1c
  %v5_8a20 = icmp slt i32 %v4_8a20, 0
  store i1 %v5_8a20, i1* %cpsr_v.global-to-local, align 1
  %v6_8a20 = icmp slt i32 %v1_8a20, 0
  store i1 %v6_8a20, i1* %cpsr_n.global-to-local, align 1
  %v7_8a20 = icmp eq i32 %v2_8a1c, 255
  store i1 %v7_8a20, i1* %cpsr_z.global-to-local, align 1
  %v8_8a24 = icmp sgt i32 %v2_8a1c, 255
  br i1 %v8_8a24, label %dec_label_pc_8a0c, label %dec_label_pc_8a28

dec_label_pc_8a28:                                ; preds = %dec_label_pc_8a18
  %v0_8a28 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8a28, i32* %r0.global-to-local, align 4
  %v1_8a2c = inttoptr i32 %v0_8a28 to i8*
  %v2_8a2c = call i32 @function_1204c(i8* %v1_8a2c)
  store i32 %v2_8a2c, i32* %r0.global-to-local, align 4
  %v1_8a30 = add i32 %v2_8a2c, -127
  %v2_8a30 = icmp ugt i32 %v2_8a2c, 126
  store i1 %v2_8a30, i1* %cpsr_c.global-to-local, align 1
  %v3_8a30 = sub i32 126, %v2_8a2c
  %v4_8a30 = and i32 %v3_8a30, %v2_8a2c
  %v5_8a30 = icmp slt i32 %v4_8a30, 0
  store i1 %v5_8a30, i1* %cpsr_v.global-to-local, align 1
  %v6_8a30 = icmp slt i32 %v1_8a30, 0
  store i1 %v6_8a30, i1* %cpsr_n.global-to-local, align 1
  %v7_8a30 = icmp eq i32 %v2_8a2c, 127
  store i1 %v7_8a30, i1* %cpsr_z.global-to-local, align 1
  %v8_8a34 = icmp sgt i32 %v2_8a2c, 127
  br i1 %v8_8a34, label %dec_label_pc_8a0c, label %dec_label_pc_8a38

dec_label_pc_8a38:                                ; preds = %dec_label_pc_8a28
  %v0_8a38 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8a38, i32* %r0.global-to-local, align 4
  %v1_8a3c = inttoptr i32 %v0_8a38 to i8*
  %v2_8a3c = call i32 @function_1204c(i8* %v1_8a3c)
  store i32 %v2_8a3c, i32* %r0.global-to-local, align 4
  %v1_8a40 = add i32 %v2_8a3c, -9
  %v2_8a40 = icmp ugt i32 %v2_8a3c, 8
  store i1 %v2_8a40, i1* %cpsr_c.global-to-local, align 1
  %v3_8a40 = sub i32 8, %v2_8a3c
  %v4_8a40 = and i32 %v3_8a40, %v2_8a3c
  %v5_8a40 = icmp slt i32 %v4_8a40, 0
  store i1 %v5_8a40, i1* %cpsr_v.global-to-local, align 1
  %v6_8a40 = icmp slt i32 %v1_8a40, 0
  store i1 %v6_8a40, i1* %cpsr_n.global-to-local, align 1
  %v7_8a40 = icmp eq i32 %v2_8a3c, 9
  store i1 %v7_8a40, i1* %cpsr_z.global-to-local, align 1
  %v7_8a44 = icmp sgt i32 %v2_8a3c, 9
  br i1 %v7_8a44, label %dec_label_pc_8a0c, label %bb201

bb201:                                            ; preds = %dec_label_pc_8a38
  %v10_8a44 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_8a44, i32* %r2.global-to-local, align 4
  %v8_8a48 = load i32, i32* @r4, align 4
  %v10_8a48 = add i32 %v10_8a44, 364
  %v11_8a48 = inttoptr i32 %v10_8a48 to i32*
  store i32 %v8_8a48, i32* %v11_8a48, align 4
  br label %dec_label_pc_8a50

dec_label_pc_8a50:                                ; preds = %bb201, %bb205
  %v0_8a50 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8a50, i32* %r0.global-to-local, align 4
  %v1_8a54 = inttoptr i32 %v0_8a50 to i8*
  %v2_8a54 = call i32 @function_1204c(i8* %v1_8a54)
  store i32 %v2_8a54, i32* %r0.global-to-local, align 4
  store i32 %v10_8a44, i32* %r1.global-to-local, align 4
  %v3_8a5c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8a5c, i32* %ip.global-to-local, align 4
  %v2_8a60 = sub i32 %v2_8a54, %v3_8a5c
  %v3_8a60 = icmp uge i32 %v2_8a54, %v3_8a5c
  store i1 %v3_8a60, i1* %cpsr_c.global-to-local, align 1
  %v4_8a60 = xor i32 %v3_8a5c, %v2_8a54
  %v5_8a60 = xor i32 %v2_8a60, %v2_8a54
  %v6_8a60 = and i32 %v5_8a60, %v4_8a60
  %v7_8a60 = icmp slt i32 %v6_8a60, 0
  store i1 %v7_8a60, i1* %cpsr_v.global-to-local, align 1
  %v8_8a60 = icmp slt i32 %v2_8a60, 0
  store i1 %v8_8a60, i1* %cpsr_n.global-to-local, align 1
  %v9_8a60 = icmp eq i32 %v2_8a54, %v3_8a5c
  store i1 %v9_8a60, i1* %cpsr_z.global-to-local, align 1
  %v7_8a64 = icmp sgt i32 %v2_8a54, %v3_8a5c
  br i1 %v7_8a64, label %dec_label_pc_8a68, label %dec_label_pc_8a94

dec_label_pc_8a68:                                ; preds = %dec_label_pc_8a50
  %v0_8a68 = load i32, i32* %fp.global-to-local, align 4
  %v2_8a68 = add i32 %v0_8a68, %v3_8a5c
  %v3_8a68 = inttoptr i32 %v2_8a68 to i8*
  %v4_8a68 = load i8, i8* %v3_8a68, align 1
  %v6_8a68 = zext i8 %v4_8a68 to i32
  %v1_8a6c = add nsw i32 %v6_8a68, -32
  store i32 %v1_8a6c, i32* %r2.global-to-local, align 4
  %v1_8a70 = add nsw i32 %v6_8a68, -97
  store i32 %v1_8a70, i32* %r3.global-to-local, align 4
  %v2_8a74 = icmp ugt i32 %v1_8a70, 24
  store i1 %v2_8a74, i1* %cpsr_c.global-to-local, align 1
  %v3_8a74 = sub nsw i32 121, %v6_8a68
  %v4_8a74 = and i32 %v3_8a74, %v1_8a70
  %v5_8a74 = icmp slt i32 %v4_8a74, 0
  store i1 %v5_8a74, i1* %cpsr_v.global-to-local, align 1
  %v6_8a74 = icmp ult i8 %v4_8a68, 122
  store i1 %v6_8a74, i1* %cpsr_n.global-to-local, align 1
  %v7_8a74 = icmp eq i32 %v1_8a70, 25
  store i1 %v7_8a74, i1* %cpsr_z.global-to-local, align 1
  %v2_8a78 = xor i1 %v2_8a74, true
  %v3_8a78 = or i1 %v7_8a74, %v2_8a78
  br i1 %v3_8a78, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_8a68
  %v5_8a78 = trunc i32 %v1_8a6c to i8
  store i8 %v5_8a78, i8* %v3_8a68, align 1
  %v0_8a7c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8a7c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_8a68, %bb202
  %v1_8a80 = phi i1 [ %v2_8a74, %dec_label_pc_8a68 ], [ %v1_8a7c.pre, %bb202 ]
  %v0_8a80 = phi i1 [ false, %dec_label_pc_8a68 ], [ %v0_8a7c.pre, %bb202 ]
  %v2_8a7c = xor i1 %v1_8a80, true
  %v3_8a7c = or i1 %v0_8a80, %v2_8a7c
  br i1 %v3_8a7c, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_8a88.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_8a44, i32* %r3.global-to-local, align 4
  %v7_8a80 = load i32, i32* %v11_8a48, align 4
  store i32 %v7_8a80, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_8a88 = phi i32 [ %v0_8a88.pre, %._crit_edge ], [ %v7_8a80, %bb204 ]
  store i32 %v10_8a44, i32* %lr.global-to-local, align 4
  %v1_8a88 = add i32 %v0_8a88, 1
  store i32 %v1_8a88, i32* %ip.global-to-local, align 4
  store i32 %v1_8a88, i32* %stack_var_-40, align 4
  br label %dec_label_pc_8a50

dec_label_pc_8a94:                                ; preds = %dec_label_pc_8a50
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_8a98 = call i32 @function_11598(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8aa0 = call i32 @function_11598(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_8aa8 = call i32 @function_11598(i32 45)
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_8ab0 = call i32 @function_11598(i32 46)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_8ab8 = call i32 @function_11598(i32 47)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_8ac0 = call i32 @function_11598(i32 48)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_8ac8 = call i32 @function_11598(i32 49)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_8ad0 = call i32 @function_11598(i32 50)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_8ad8 = call i32 @function_11598(i32 51)
  store i32 52, i32* %r0.global-to-local, align 4
  %v1_8ae0 = call i32 @function_11598(i32 52)
  store i32 %v1_8ae0, i32* %r0.global-to-local, align 4
  %v0_8ae4 = load i32, i32* @r6, align 4
  %v2_8ae4 = add i32 %v0_8ae4, -512
  %v3_8ae4 = icmp ugt i32 %v0_8ae4, 511
  store i1 %v3_8ae4, i1* %cpsr_c.global-to-local, align 1
  %v4_8ae4 = sub i32 511, %v0_8ae4
  %v5_8ae4 = and i32 %v4_8ae4, %v0_8ae4
  %v6_8ae4 = icmp slt i32 %v5_8ae4, 0
  store i1 %v6_8ae4, i1* %cpsr_v.global-to-local, align 1
  %v7_8ae4 = icmp slt i32 %v2_8ae4, 0
  store i1 %v7_8ae4, i1* %cpsr_n.global-to-local, align 1
  %v8_8ae4 = icmp eq i32 %v0_8ae4, 512
  store i1 %v8_8ae4, i1* %cpsr_z.global-to-local, align 1
  %v5_8ae8 = icmp slt i32 %v0_8ae4, 512
  br i1 %v5_8ae8, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_8a94
  store i32 512, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8a94, %bb206
  %v0_8af0 = phi i32 [ 512, %bb206 ], [ %v0_8ae4, %dec_label_pc_8a94 ]
  store i32 53, i32* %r0.global-to-local, align 4
  %v1_8af4 = call i32 @function_11598(i32 53)
  store i32 %v0_8af0, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_8b04 = call i32 @function_135b8(i32 %v0_8af0, i32 3140)
  store i32 %v2_8b04, i32* %r0.global-to-local, align 4
  store i32 %v0_8af0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8b0c = icmp slt i32 %v0_8af0, 0
  store i1 %v1_8b0c, i1* %cpsr_n.global-to-local, align 1
  %v2_8b0c = icmp eq i32 %v0_8af0, 0
  store i1 %v2_8b0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8b04, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_8af0, 1
  br i1 %tmp207, label %dec_label_pc_8c48, label %dec_label_pc_8b1c

dec_label_pc_8b1c:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_8b20

dec_label_pc_8b20:                                ; preds = %dec_label_pc_a5c4, %dec_label_pc_8b1c
  %v1_8b2c = phi i32 [ %v1_a5e0, %dec_label_pc_a5c4 ], [ %v2_8b04, %dec_label_pc_8b1c ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_8938, i32* %r1.global-to-local, align 4
  %v2_8b2c = inttoptr i32 %v1_8b2c to i32*
  store i32 -1, i32* %v2_8b2c, align 4
  %v3_8b30 = load i32, i32* @r5, align 4
  %v4_8b30 = add i32 %v3_8b30, 4
  %v5_8b30 = inttoptr i32 %v4_8b30 to i8*
  store i8 0, i8* %v5_8b30, align 1
  %v0_8b34 = load i32, i32* @r7, align 4
  store i32 %v0_8b34, i32* %r0.global-to-local, align 4
  %v5_8b38 = call i32 @function_12834(i32 %v0_8b34, i32 %v1_8938, i32 -1, i32 0)
  store i32 %v5_8b38, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_8b44 = and i32 %v5_8b38, 536870912
  %v3_8b44 = icmp ne i32 %v2_8b44, 0
  store i1 %v3_8b44, i1* %cpsr_c.global-to-local, align 1
  %v5_8b44 = mul i32 %v5_8b38, 24
  store i32 %v5_8b44, i32* %r3.global-to-local, align 4
  %v2_8b48 = add i32 %v5_8b44, %arg2
  store i32 %v2_8b48, i32* @r6, align 4
  %v1_8b4c = add i32 %v2_8b48, 16
  %v2_8b4c = inttoptr i32 %v1_8b4c to i32*
  %v3_8b4c = load i32, i32* %v2_8b4c, align 4
  store i32 %v3_8b4c, i32* %r2.global-to-local, align 4
  %v0_8b50 = load i32, i32* @r5, align 4
  %v1_8b50 = add i32 %v0_8b50, 532
  store i32 %v1_8b50, i32* @lr, align 4
  store i32 %v1_8b50, i32* @r0, align 4
  %v0_8b58 = load i32, i32* @sl, align 4
  store i32 %v0_8b58, i32* %r1.global-to-local, align 4
  %v2_8b5c = add i32 %v0_8b50, 16
  %v3_8b5c = inttoptr i32 %v2_8b5c to i32*
  store i32 %v3_8b4c, i32* %v3_8b5c, align 4
  %v0_8b60 = load i32, i32* @lr, align 4
  %v2_8b64 = inttoptr i32 %v1_8b50 to i8*
  %v3_8b64 = call i32 @function_12074(i8* %v2_8b64, i32 %v0_8b58)
  store i32 %v3_8b64, i32* %r0.global-to-local, align 4
  %v0_8b68 = load i32, i32* @r5, align 4
  %v1_8b68 = add i32 %v0_8b68, 532
  %v2_8b68 = inttoptr i32 %v1_8b68 to i8*
  %v3_8b68 = load i8, i8* %v2_8b68, align 1
  %v4_8b68 = zext i8 %v3_8b68 to i32
  store i32 %v4_8b68, i32* %r3.global-to-local, align 4
  %v2_8b6c = icmp ugt i8 %v3_8b68, 46
  store i1 %v2_8b6c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8b6c = icmp ult i8 %v3_8b68, 47
  store i1 %v6_8b6c, i1* %cpsr_n.global-to-local, align 1
  %v7_8b6c = icmp eq i8 %v3_8b68, 47
  store i1 %v7_8b6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b6c, label %dec_label_pc_8b98, label %dec_label_pc_8b74

dec_label_pc_8b74:                                ; preds = %dec_label_pc_8b20
  store i32 %v0_8b60, i32* %r0.global-to-local, align 4
  %v1_8b78 = inttoptr i32 %v0_8b60 to i8*
  %v2_8b78 = call i32 @function_1204c(i8* %v1_8b78)
  store i32 %v2_8b78, i32* @r2, align 4
  %v0_8b80 = load i32, i32* @r5, align 4
  %v1_8b84 = add i32 %v0_8b80, 533
  store i32 %v1_8b84, i32* @r0, align 4
  store i32 %v0_8b60, i32* @r1, align 4
  %v3_8b8c = call i32 @function_12fe0(i32 %v1_8b84, i32 %v0_8b60, i32 %v2_8b78)
  store i32 %v3_8b8c, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8b94 = load i32, i32* @r5, align 4
  %v3_8b94 = add i32 %v2_8b94, 532
  %v4_8b94 = inttoptr i32 %v3_8b94 to i8*
  store i8 47, i8* %v4_8b94, align 1
  %v0_8b9c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8b98

dec_label_pc_8b98:                                ; preds = %dec_label_pc_8b20, %dec_label_pc_8b74
  %v0_8b9c = phi i32 [ %v0_8b68, %dec_label_pc_8b20 ], [ %v0_8b9c.pre, %dec_label_pc_8b74 ]
  %v0_8b98 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8b98, i32* %r1.global-to-local, align 4
  %v1_8b9c = add i32 %v0_8b9c, 1440
  store i32 %v1_8b9c, i32* @r0, align 4
  %v2_8ba0 = inttoptr i32 %v1_8b9c to i8*
  %v3_8ba0 = call i32 @function_12074(i8* %v2_8ba0, i32 %v0_8b98)
  %v0_8ba4 = load i32, i32* @r5, align 4
  %v0_8ba8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ba8, i32* %r1.global-to-local, align 4
  %v1_8bac = add i32 %v0_8ba4, 1431
  store i32 %v1_8bac, i32* @r0, align 4
  %v2_8bb0 = inttoptr i32 %v1_8bac to i8*
  %v3_8bb0 = call i32 @function_12074(i8* %v2_8bb0, i32 %v0_8ba8)
  %v0_8bb4 = load i32, i32* @r5, align 4
  %v1_8bb8 = add i32 %v0_8bb4, 789
  store i32 %v1_8bb8, i32* @r0, align 4
  %v0_8bbc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8bbc, i32* %r1.global-to-local, align 4
  %v2_8bc0 = inttoptr i32 %v1_8bb8 to i8*
  %v3_8bc0 = call i32 @function_12074(i8* %v2_8bc0, i32 %v0_8bbc)
  store i32 %v3_8bc0, i32* %r0.global-to-local, align 4
  %v0_8bc4 = load i32, i32* @r6, align 4
  %v1_8bc4 = add i32 %v0_8bc4, 20
  %v2_8bc4 = inttoptr i32 %v1_8bc4 to i8*
  %v3_8bc4 = load i8, i8* %v2_8bc4, align 1
  %v4_8bc4 = zext i8 %v3_8bc4 to i32
  store i32 %v4_8bc4, i32* %r3.global-to-local, align 4
  %v2_8bc8 = icmp ugt i8 %v3_8bc4, 30
  store i1 %v2_8bc8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8bc8 = icmp ult i8 %v3_8bc4, 31
  store i1 %v6_8bc8, i1* %cpsr_n.global-to-local, align 1
  %v7_8bc8 = icmp eq i8 %v3_8bc4, 31
  store i1 %v7_8bc8, i1* %cpsr_z.global-to-local, align 1
  %v2_8bcc = xor i1 %v7_8bc8, true
  %v3_8bcc = and i1 %v2_8bc8, %v2_8bcc
  br i1 %v3_8bcc, label %dec_label_pc_8c1c, label %dec_label_pc_8bd0

dec_label_pc_8bd0:                                ; preds = %dec_label_pc_8b98
  %v1_8bd0 = add i32 %v0_8bc4, 16
  %v2_8bd0 = inttoptr i32 %v1_8bd0 to i32*
  %v3_8bd0 = load i32, i32* %v2_8bd0, align 4
  store i32 %v3_8bd0, i32* @r4, align 4
  %v0_8bd4 = call i32 @function_f8c4()
  store i32 %v0_8bd4, i32* %r0.global-to-local, align 4
  %v0_8bd8 = load i32, i32* @r4, align 4
  %v1_8bdc = and i32 %v0_8bd8, 65280
  store i32 %v1_8bdc, i32* %r3.global-to-local, align 4
  %v1_8bd8 = udiv i32 %v0_8bd8, 256
  %v3_8be0 = and i32 %v1_8bd8, 65280
  store i32 %v3_8be0, i32* %r2.global-to-local, align 4
  %v3_8be4 = mul i32 %v0_8bd8, 16777216
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_8be8 = mul nuw nsw i32 %v1_8bdc, 256
  %v5_8be8 = or i32 %v4_8be8, %v3_8be4
  store i32 %v5_8be8, i32* %r1.global-to-local, align 4
  %v0_8bec = load i32, i32* @r6, align 4
  %v1_8bec = add i32 %v0_8bec, 20
  %v2_8bec = inttoptr i32 %v1_8bec to i8*
  %v3_8bec = load i8, i8* %v2_8bec, align 1
  %v4_8bec = zext i8 %v3_8bec to i32
  store i32 %v4_8bec, i32* %ip.global-to-local, align 4
  %v2_8bf4 = call i32 @llvm.bswap.i32(i32 %v0_8bd8)
  %v7_8bf8 = lshr i32 %v0_8bd4, %v4_8bec
  %v8_8bf8 = add i32 %v7_8bf8, %v2_8bf4
  store i32 %v8_8bf8, i32* %r2.global-to-local, align 4
  %v3_8c04 = mul i32 %v8_8bf8, 16777216
  %v1_8c08 = and i32 %v8_8bf8, 65280
  store i32 %v1_8c08, i32* %r0.global-to-local, align 4
  %v4_8c0c = mul nuw nsw i32 %v1_8c08, 256
  %v5_8c0c = or i32 %v4_8c0c, %v3_8c04
  store i32 %v5_8c0c, i32* %r1.global-to-local, align 4
  %v2_8c10 = and i32 %v8_8bf8, 8388608
  %v3_8c10 = icmp ne i32 %v2_8c10, 0
  store i1 %v3_8c10, i1* %cpsr_c.global-to-local, align 1
  %v2_8c14 = call i32 @llvm.bswap.i32(i32 %v8_8bf8)
  store i32 %v2_8c14, i32* %r3.global-to-local, align 4
  %v1_8c18 = load i32, i32* @r5, align 4
  %v2_8c18 = add i32 %v1_8c18, 16
  %v3_8c18 = inttoptr i32 %v2_8c18 to i32*
  store i32 %v2_8c14, i32* %v3_8c18, align 4
  br label %dec_label_pc_8c1c

dec_label_pc_8c1c:                                ; preds = %dec_label_pc_8b98, %dec_label_pc_8bd0
  %v0_8c1c = call i32 @function_f8c4()
  store i32 %v0_8c1c, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_8c24 = call i32 @function_12768(i32 %v0_8c1c, i32 5)
  store i32 %v2_8c24, i32* %r0.global-to-local, align 4
  %v1_8c28 = add i32 %v2_8c24, -4
  %v3_8c28 = sub i32 3, %v2_8c24
  %v4_8c28 = and i32 %v3_8c28, %v2_8c24
  %v5_8c28 = icmp slt i32 %v4_8c28, 0
  store i1 %v5_8c28, i1* %cpsr_v.global-to-local, align 1
  %v6_8c28 = icmp slt i32 %v1_8c28, 0
  store i1 %v6_8c28, i1* %cpsr_n.global-to-local, align 1
  %v7_8c28 = icmp eq i32 %v2_8c24, 4
  store i1 %v7_8c28, i1* %cpsr_z.global-to-local, align 1
  %v5_8c2c = and i32 %v2_8c24, 1073741824
  %v6_8c2c = icmp ne i32 %v5_8c2c, 0
  store i1 %v6_8c2c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_8c24, label %dec_label_pc_a5c4 [
    i32 0, label %dec_label_pc_a628
    i32 1, label %dec_label_pc_a654
    i32 2, label %dec_label_pc_a680
    i32 3, label %dec_label_pc_a6ac
    i32 4, label %dec_label_pc_a59c
  ]

dec_label_pc_8c48:                                ; preds = %thread-pre-split
  %v1_8c4c = add i32 %v2_8b04, 1456
  %v0_8c54 = load i32, i32* %r8.global-to-local, align 4
  %v1_8c54 = urem i32 %v0_8c54, 256
  store i32 %v1_8c54, i32* %r3.global-to-local, align 4
  %v1_8c58 = add i32 %v2_8b04, 1464
  store i32 %v1_8c58, i32* %r1.global-to-local, align 4
  %v2_8c5c = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_8c5c, i32* %r2.global-to-local, align 4
  store i32 %v1_8c4c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8c7c.preheader

dec_label_pc_8c7c.preheader:                      ; preds = %dec_label_pc_8c48, %dec_label_pc_a5e8
  %storemerge148.in.in = phi i32 [ %v0_a5fc, %dec_label_pc_a5e8 ], [ %v0_8c54, %dec_label_pc_8c48 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_a5f4, %dec_label_pc_a5e8 ], [ %v1_8c4c, %dec_label_pc_8c48 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_a5fc, %dec_label_pc_a5e8 ], [ %v1_8c54, %dec_label_pc_8c48 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_a600, %dec_label_pc_a5e8 ], [ %v1_8c58, %dec_label_pc_8c48 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_a604, %dec_label_pc_a5e8 ], [ %v2_8c5c, %dec_label_pc_8c48 ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_a60c = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_a60c, i32* %r8.global-to-local, align 4
  %v4_8ce4 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_8e24 = ptrtoint i32* %stack_var_-148 to i32
  %v2_8e3c = ptrtoint i32* %stack_var_-40 to i32
  %v2_8e7c = ptrtoint i32* %stack_var_-72 to i32
  %v3_8e88 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_8e9c = ptrtoint i32* %stack_var_-36 to i32
  %v1_9094 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_93e8 = icmp slt i32 %v6_8954, 0
  %v2_93e8 = icmp eq i32 %v6_8954, 0
  %v4_943c = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_92e4 = inttoptr i32 %v6_8954 to i8*
  %v2_8f08 = ptrtoint i32* %stack_var_-56 to i32
  %v2_8f0c = ptrtoint i32* %stack_var_-200 to i32
  %v2_8f10 = ptrtoint i32* %stack_var_-328 to i32
  %v2_9970 = add i32 %v2_8e9c, -20773
  %v2_8ffc = ptrtoint i32* %stack_var_-44 to i32
  %v2_9008 = ptrtoint i32* %stack_var_-48 to i32
  %v5_8ce4 = or i32 %v4_8ce4, %v3_a60c
  %v1_8ce8 = and i32 %v3_a60c, 128
  %v2_8ce8 = icmp ne i32 %v1_8ce8, 0
  %v3_8ce8248 = udiv i32 %v5_8ce4, 256
  %v1_8cf0 = add i32 %stack_var_-20872.0.ph, -1464
  %v1_8cf8 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_8ce8248, 16777216
  %v4_8e64 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_a60c, 16777216
  %v4_8e6c = sdiv i32 %sext10, 16777216
  %v2_8d30 = add i32 %v2_8e24, 112
  br label %dec_label_pc_8c7c

dec_label_pc_8c7c:                                ; preds = %dec_label_pc_8ee8, %dec_label_pc_8ee0, %dec_label_pc_8cc8, %dec_label_pc_8f8c, %dec_label_pc_8c7c.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_8c80 = call i32 @function_12cb0(i32* null)
  store i32 %v2_8c80, i32* %r0.global-to-local, align 4
  store i32 %v2_8c80, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_8ca0256 = load i32, i32* @sp, align 4
  %v3_8ca0257 = add i32 %v2_8ca0256, 20684
  %v4_8ca0258 = inttoptr i32 %v3_8ca0257 to i32*
  store i32 0, i32* %v4_8ca0258, align 4
  br label %dec_label_pc_8c90.dec_label_pc_8c90_crit_edge

dec_label_pc_8c90.dec_label_pc_8c90_crit_edge:    ; preds = %dec_label_pc_8c7c, %dec_label_pc_8c90.dec_label_pc_8c90_crit_edge
  %v0_8c90.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_8ca0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8c94 = add i32 %v0_8c90.pre, 4
  store i32 %v1_8c94, i32* %r3.global-to-local, align 4
  %v1_8c98 = add i32 %v0_8c90.pre, 20684
  store i32 %v1_8c98, i32* %ip.global-to-local, align 4
  %v7_8c9c = icmp eq i32 %v1_8c94, 128
  %v2_8ca0 = load i32, i32* @sp, align 4
  %v3_8ca0 = add i32 %v2_8ca0, %v1_8c98
  %v4_8ca0 = inttoptr i32 %v3_8ca0 to i32*
  store i32 %v0_8ca0.pre, i32* %v4_8ca0, align 4
  br i1 %v7_8c9c, label %dec_label_pc_8ca8, label %dec_label_pc_8c90.dec_label_pc_8c90_crit_edge

dec_label_pc_8ca8:                                ; preds = %dec_label_pc_8c90.dec_label_pc_8c90_crit_edge
  %v1_8c9c = add i32 %v0_8c90.pre, -124
  %v6_8c9c = icmp slt i32 %v1_8c9c, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_8c9c, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8ca8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8ca8, i32* %r0.global-to-local, align 4
  %v1_8cb4259 = add i32 %v0_8ca8, 4
  store i32 %v1_8cb4259, i32* %r3.global-to-local, align 4
  %v1_8cb8260 = add i32 %v0_8ca8, 20556
  store i32 %v1_8cb8260, i32* %lr.global-to-local, align 4
  %v7_8cbc261 = icmp eq i32 %v1_8cb4259, 128
  %v2_8cc0262 = load i32, i32* @sp, align 4
  %v3_8cc0263 = add i32 %v2_8cc0262, %v1_8cb8260
  %v4_8cc0264 = inttoptr i32 %v3_8cc0263 to i32*
  store i32 %v0_8ca8, i32* %v4_8cc0264, align 4
  br i1 %v7_8cbc261, label %dec_label_pc_8cc8, label %dec_label_pc_8cb0.dec_label_pc_8cb0_crit_edge

dec_label_pc_8cb0.dec_label_pc_8cb0_crit_edge:    ; preds = %dec_label_pc_8ca8, %dec_label_pc_8cb0.dec_label_pc_8cb0_crit_edge
  %v0_8cb0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_8cc0.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_8cb4 = add i32 %v0_8cb0.pre, 4
  store i32 %v1_8cb4, i32* %r3.global-to-local, align 4
  %v1_8cb8 = add i32 %v0_8cb0.pre, 20556
  store i32 %v1_8cb8, i32* %lr.global-to-local, align 4
  %v7_8cbc = icmp eq i32 %v1_8cb4, 128
  %v2_8cc0 = load i32, i32* @sp, align 4
  %v3_8cc0 = add i32 %v2_8cc0, %v1_8cb8
  %v4_8cc0 = inttoptr i32 %v3_8cc0 to i32*
  store i32 %v0_8cc0.pre, i32* %v4_8cc0, align 4
  br i1 %v7_8cbc, label %dec_label_pc_8cc8, label %dec_label_pc_8cb0.dec_label_pc_8cb0_crit_edge

dec_label_pc_8cc8:                                ; preds = %dec_label_pc_8cb0.dec_label_pc_8cb0_crit_edge, %dec_label_pc_8ca8
  store i32 %v0_8af0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_8b0c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_8b0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_8c7c, label %dec_label_pc_8cd4

dec_label_pc_8cd4:                                ; preds = %dec_label_pc_8cc8
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_8ce4, i32* %r2.global-to-local, align 4
  store i1 %v2_8ce8, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_8ce8248, i32* %lr.global-to-local, align 4
  %v0_8cec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8cec, i32* @sl, align 4
  store i32 %v1_8cf0, i32* @r7, align 4
  store i32 %v0_8cec, i32* @r8, align 4
  store i32 %v1_8cf8, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_8da4

dec_label_pc_8d0c:                                ; preds = %dec_label_pc_8db0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_8d0c = icmp eq i8 %v3_8da4, 2
  store i1 %v7_8d0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d0c, label %dec_label_pc_94bc, label %dec_label_pc_8d14

dec_label_pc_8d14:                                ; preds = %dec_label_pc_8d0c
  %v2_8d14 = icmp ugt i8 %v3_8da4, 3
  store i1 %v2_8d14, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8d14 = icmp ult i8 %v3_8da4, 4
  store i1 %v6_8d14, i1* %cpsr_n.global-to-local, align 1
  %v7_8d14 = icmp eq i8 %v3_8da4, 4
  store i1 %v7_8d14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d14, label %dec_label_pc_9060, label %dec_label_pc_8d1c

dec_label_pc_8d1c:                                ; preds = %dec_label_pc_8d14
  %v2_8d1c = icmp ugt i8 %v3_8da4, 5
  store i1 %v2_8d1c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8d1c = icmp ult i8 %v3_8da4, 6
  store i1 %v6_8d1c, i1* %cpsr_n.global-to-local, align 1
  %v7_8d1c = icmp eq i8 %v3_8da4, 6
  store i1 %v7_8d1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d1c, label %.thread24, label %dec_label_pc_8d3c

.thread24:                                        ; preds = %dec_label_pc_8d1c
  %v2_8d20 = add i32 %v3_9054, -1431
  %v3_8d20 = inttoptr i32 %v2_8d20 to i32*
  %v4_8d20 = load i32, i32* %v3_8d20, align 4
  store i32 %v4_8d20, i32* %r0.global-to-local, align 4
  %v4_8d28 = udiv i32 %v4_8d20, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_8d2c = mul nuw nsw i32 %v4_8d28, 4
  store i32 %v2_8d30, i32* %r1.global-to-local, align 4
  %v3_8d34 = add i32 %v4_8d2c, %v2_8d30
  store i32 %v3_8d34, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_949c

dec_label_pc_8d3c:                                ; preds = %dec_label_pc_8d1c
  %v2_8d3c = icmp ugt i8 %v3_8da4, 6
  store i1 %v2_8d3c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8d3c = icmp ult i8 %v3_8da4, 7
  store i1 %v6_8d3c, i1* %cpsr_n.global-to-local, align 1
  %v7_8d3c = icmp eq i8 %v3_8da4, 7
  store i1 %v7_8d3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d3c, label %.thread35, label %dec_label_pc_8d5c

.thread35:                                        ; preds = %dec_label_pc_8d3c
  %v2_8d40 = add i32 %v3_9054, -1431
  %v3_8d40 = inttoptr i32 %v2_8d40 to i32*
  %v4_8d40 = load i32, i32* %v3_8d40, align 4
  store i32 %v4_8d40, i32* %r0.global-to-local, align 4
  %v4_8d48 = udiv i32 %v4_8d40, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_8d4c = mul nuw nsw i32 %v4_8d48, 4
  store i32 %v2_8d30, i32* %r2.global-to-local, align 4
  %v3_8d54 = add i32 %v4_8d4c, %v2_8d30
  store i32 %v3_8d54, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_949c

dec_label_pc_8d5c:                                ; preds = %dec_label_pc_8d3c
  %v2_8d5c = icmp ugt i8 %v3_8da4, 9
  store i1 %v2_8d5c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8d5c = icmp ult i8 %v3_8da4, 10
  store i1 %v6_8d5c, i1* %cpsr_n.global-to-local, align 1
  %v7_8d5c = icmp eq i8 %v3_8da4, 10
  store i1 %v7_8d5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d5c, label %dec_label_pc_9484, label %dec_label_pc_8d64

dec_label_pc_8d64:                                ; preds = %dec_label_pc_8d5c
  %v1_8d64 = add nsw i32 %v4_8da4, -11
  %v2_8d64 = icmp ugt i8 %v3_8da4, 10
  store i1 %v2_8d64, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8d64 = icmp ult i8 %v3_8da4, 11
  store i1 %v6_8d64, i1* %cpsr_n.global-to-local, align 1
  %v7_8d64 = icmp eq i8 %v3_8da4, 11
  store i1 %v7_8d64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8d64, label %dec_label_pc_9ff8, label %dec_label_pc_8d6c

dec_label_pc_8d6c:                                ; preds = %dec_label_pc_94bc, %dec_label_pc_8d64
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8da4, align 1
  %v0_8d74 = load i32, i32* @r6, align 4
  %v1_8d74 = add i32 %v0_8d74, -1431
  %v2_8d74 = inttoptr i32 %v1_8d74 to i32*
  %v3_8d74 = load i32, i32* %v2_8d74, align 4
  store i32 %v3_8d74, i32* %r0.global-to-local, align 4
  %v1_8d78 = call i32 @function_129e0(i32 %v3_8d74)
  store i32 %v1_8d78, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_8d80 = load i32, i32* @r6, align 4
  %v2_8d80 = add i32 %v1_8d80, -1431
  %v3_8d80 = inttoptr i32 %v2_8d80 to i32*
  store i32 -1, i32* %v3_8d80, align 4
  br label %dec_label_pc_8d84

dec_label_pc_8d84:                                ; preds = %dec_label_pc_9420, %dec_label_pc_949c, %dec_label_pc_8ea4, %dec_label_pc_8db8, %dec_label_pc_9ff8, %dec_label_pc_8d6c
  store i32 %v0_8af0, i32* %lr.global-to-local, align 4
  %v0_8d88 = load i32, i32* @r8, align 4
  %v1_8d88 = add i32 %v0_8d88, 1
  store i32 %v1_8d88, i32* @r8, align 4
  %v0_8d8c = load i32, i32* @r7, align 4
  %v0_8d90 = load i32, i32* @r6, align 4
  %v2_8d94 = sub i32 %v0_8af0, %v1_8d88
  %v3_8d94 = icmp uge i32 %v0_8af0, %v1_8d88
  store i1 %v3_8d94, i1* %cpsr_c.global-to-local, align 1
  %v4_8d94 = xor i32 %v1_8d88, %v0_8af0
  %v5_8d94 = xor i32 %v2_8d94, %v0_8af0
  %v6_8d94 = and i32 %v5_8d94, %v4_8d94
  %v7_8d94 = icmp slt i32 %v6_8d94, 0
  store i1 %v7_8d94, i1* %cpsr_v.global-to-local, align 1
  %v8_8d94 = icmp slt i32 %v2_8d94, 0
  store i1 %v8_8d94, i1* %cpsr_n.global-to-local, align 1
  %v9_8d94 = icmp eq i32 %v0_8af0, %v1_8d88
  store i1 %v9_8d94, i1* %cpsr_z.global-to-local, align 1
  %v1_8d98 = add i32 %v0_8d8c, 3140
  store i32 %v1_8d98, i32* @r7, align 4
  %v1_8d9c = add i32 %v0_8d90, 3140
  store i32 %v1_8d9c, i32* @r6, align 4
  br i1 %v9_8d94, label %dec_label_pc_8d84.dec_label_pc_8ee0_crit_edge, label %dec_label_pc_8da4

dec_label_pc_8d84.dec_label_pc_8ee0_crit_edge:    ; preds = %dec_label_pc_8d84
  %v0_8ee0.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_8ee0

dec_label_pc_8da4:                                ; preds = %dec_label_pc_8ec0, %dec_label_pc_8d84, %dec_label_pc_8cd4
  %v3_9054 = phi i32 [ %v1_8cf8, %dec_label_pc_8cd4 ], [ %v1_8d9c, %dec_label_pc_8d84 ], [ %v1_8ed8, %dec_label_pc_8ec0 ]
  %v1_8da4 = add i32 %v3_9054, -1427
  %v2_8da4 = inttoptr i32 %v1_8da4 to i8*
  %v3_8da4 = load i8, i8* %v2_8da4, align 1
  %v4_8da4 = zext i8 %v3_8da4 to i32
  store i32 %v4_8da4, i32* %r3.global-to-local, align 4
  %v2_8da8 = icmp ne i8 %v3_8da4, 0
  store i1 %v2_8da8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8da8 = icmp eq i8 %v3_8da4, 0
  store i1 %v6_8da8, i1* %cpsr_n.global-to-local, align 1
  %v7_8da8 = icmp eq i8 %v3_8da4, 1
  store i1 %v7_8da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8da8, label %dec_label_pc_9048, label %dec_label_pc_8db0

dec_label_pc_8db0:                                ; preds = %dec_label_pc_8da4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_8da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8da8, label %dec_label_pc_8db8, label %dec_label_pc_8d0c

dec_label_pc_8db8:                                ; preds = %.thread43.dec_label_pc_8db8_crit_edge, %dec_label_pc_8db0
  %v0_8db8 = phi i32 [ %v0_8db8.pre, %.thread43.dec_label_pc_8db8_crit_edge ], [ %v3_9054, %dec_label_pc_8db0 ]
  %v1_8db8 = add i32 %v0_8db8, -1431
  %v2_8db8 = inttoptr i32 %v1_8db8 to i32*
  %v3_8db8 = load i32, i32* %v2_8db8, align 4
  store i32 %v3_8db8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_8a44, i32* %r1.global-to-local, align 4
  %v1_8dc4 = add i32 %v3_8db8, 1
  %v2_8dc4 = icmp eq i32 %v3_8db8, -1
  store i1 %v2_8dc4, i1* %cpsr_c.global-to-local, align 1
  %v3_8dc4 = sub i32 0, %v3_8db8
  %v4_8dc4 = and i32 %v1_8dc4, %v3_8dc4
  %v5_8dc4 = icmp slt i32 %v4_8dc4, 0
  store i1 %v5_8dc4, i1* %cpsr_v.global-to-local, align 1
  %v6_8dc4 = icmp slt i32 %v1_8dc4, 0
  store i1 %v6_8dc4, i1* %cpsr_n.global-to-local, align 1
  %v7_8dc4 = icmp eq i32 %v1_8dc4, 0
  store i1 %v7_8dc4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8dd8 = xor i1 %v7_8dc4, true
  call void @__pseudo_cond_branch(i1 %v1_8dd8, i32 ptrtoint (i32* @global_var_129e0.52 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8de4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8de4, i32* %r2.global-to-local, align 4
  %v3_8de8 = call i32 @function_132cc(i32 2, i32 1, i32 %v0_8de4)
  store i32 %v3_8de8, i32* %r0.global-to-local, align 4
  %v1_8dec = add i32 %v3_8de8, 1
  %v2_8dec = icmp eq i32 %v3_8de8, -1
  store i1 %v2_8dec, i1* %cpsr_c.global-to-local, align 1
  %v3_8dec = sub i32 0, %v3_8de8
  %v4_8dec = and i32 %v1_8dec, %v3_8dec
  %v5_8dec = icmp slt i32 %v4_8dec, 0
  store i1 %v5_8dec, i1* %cpsr_v.global-to-local, align 1
  %v6_8dec = icmp slt i32 %v1_8dec, 0
  store i1 %v6_8dec, i1* %cpsr_n.global-to-local, align 1
  %v7_8dec = icmp eq i32 %v1_8dec, 0
  store i1 %v7_8dec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8de8, i32* @r4, align 4
  %v1_8df4 = load i32, i32* @r6, align 4
  %v2_8df4 = add i32 %v1_8df4, -1431
  %v3_8df4 = inttoptr i32 %v2_8df4 to i32*
  store i32 %v3_8de8, i32* %v3_8df4, align 4
  br i1 %v7_8dec, label %dec_label_pc_8d84, label %dec_label_pc_8dfc

dec_label_pc_8dfc:                                ; preds = %dec_label_pc_8db8
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_8e00 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8e00, i32* @r2, align 4
  %v0_8e04 = load i32, i32* %r0.global-to-local, align 4
  %v2_8e04 = call i32 @function_1291c(i32 %v0_8e04, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_8e0c = or i32 %v2_8e04, 2048
  store i32 %v1_8e0c, i32* @r2, align 4
  %v0_8e10 = load i32, i32* @r4, align 4
  store i32 %v0_8e10, i32* %r0.global-to-local, align 4
  %v2_8e14 = call i32 @function_1291c(i32 %v0_8e10, i32 4)
  store i32 %v2_8e14, i32* %r0.global-to-local, align 4
  store i32 %v10_8a44, i32* %lr.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_8e24, i32* %r3.global-to-local, align 4
  %v0_8e28 = load i32, i32* @r6, align 4
  %v1_8e28 = add i32 %v0_8e28, -1431
  %v2_8e28 = inttoptr i32 %v1_8e28 to i32*
  %v3_8e28 = load i32, i32* %v2_8e28, align 4
  store i32 %v3_8e28, i32* %r0.global-to-local, align 4
  %v0_8e2c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8e2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_8e3c, i32* %r3.global-to-local, align 4
  %v6_8e44 = call i32 @function_1329c(i32 %v3_8e28, i32 %v0_8e2c, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_8e44, i32* %r0.global-to-local, align 4
  %v0_8e48 = load i32, i32* @r6, align 4
  %v1_8e48 = add i32 %v0_8e48, -1415
  %v2_8e48 = inttoptr i32 %v1_8e48 to i32*
  %v3_8e48 = load i32, i32* %v2_8e48, align 4
  store i32 %v3_8e48, i32* %ip.global-to-local, align 4
  store i32 %v10_8a44, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8e58 = add i32 %v0_8e48, -1431
  %v2_8e58 = inttoptr i32 %v1_8e58 to i32*
  %v3_8e58 = load i32, i32* %v2_8e58, align 4
  store i32 %v3_8e58, i32* %r0.global-to-local, align 4
  %v3_8e60 = add i32 %v0_8e48, -1427
  %v4_8e60 = inttoptr i32 %v3_8e60 to i8*
  store i8 2, i8* %v4_8e60, align 1
  store i32 %v4_8e64, i32* %ip.global-to-local, align 4
  %v0_8e68 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8e68, i32* %stack_var_-72, align 4
  store i32 %v4_8e6c, i32* %r3.global-to-local, align 4
  store i32 %v2_8e7c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_8e84 = load i32, i32* %sb.global-to-local, align 4
  %v1_8e84 = load i32, i32* @r6, align 4
  %v2_8e84 = add i32 %v1_8e84, -1423
  %v3_8e84 = inttoptr i32 %v2_8e84 to i32*
  store i32 %v0_8e84, i32* %v3_8e84, align 4
  %v4_8e88 = call i32 @function_13128(i32 %v3_8e58, %sockaddr* nonnull %v3_8e88, i32 16)
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v0_8e8c = load i32, i32* @r6, align 4
  %v1_8e8c = add i32 %v0_8e8c, -1431
  %v2_8e8c = inttoptr i32 %v1_8e8c to i32*
  %v3_8e8c = load i32, i32* %v2_8e8c, align 4
  store i32 %v3_8e8c, i32* %r0.global-to-local, align 4
  %v3_8e94 = udiv i32 %v3_8e8c, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8e98 = mul nuw nsw i32 %v3_8e94, 4
  store i32 %v3_8e98, i32* %r3.global-to-local, align 4
  store i32 %v2_8e9c, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8ea4

dec_label_pc_8ea4:                                ; preds = %dec_label_pc_94cc, %dec_label_pc_8dfc
  %v1_8eb0 = phi i32 [ %v3_8e8c, %dec_label_pc_8dfc ], [ %v3_94cc, %dec_label_pc_94cc ]
  %v3_8e98.pn = phi i32 [ %v3_8e98, %dec_label_pc_8dfc ], [ %v3_94d8, %dec_label_pc_94cc ]
  %storemerge = add i32 %v3_8e98.pn, %v2_8e9c
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_8ea4 = add i32 %storemerge, -292
  %v2_8ea4 = inttoptr i32 %v1_8ea4 to i32*
  %v3_8ea4 = load i32, i32* %v2_8ea4, align 4
  %v1_8ea8 = urem i32 %v1_8eb0, 32
  store i32 %v1_8ea8, i32* %r1.global-to-local, align 4
  %v1_8eac = load i32, i32* %fp.global-to-local, align 4
  %v7_8eac = shl i32 %v1_8eac, %v1_8ea8
  %v8_8eac = or i32 %v7_8eac, %v3_8ea4
  store i32 %v8_8eac, i32* %r2.global-to-local, align 4
  %v0_8eb0 = load i32, i32* @sl, align 4
  %v2_8eb0 = sub i32 %v0_8eb0, %v1_8eb0
  %v3_8eb0 = icmp uge i32 %v0_8eb0, %v1_8eb0
  store i1 %v3_8eb0, i1* %cpsr_c.global-to-local, align 1
  %v4_8eb0 = xor i32 %v0_8eb0, %v1_8eb0
  %v5_8eb0 = xor i32 %v2_8eb0, %v0_8eb0
  %v6_8eb0 = and i32 %v5_8eb0, %v4_8eb0
  %v7_8eb0 = icmp slt i32 %v6_8eb0, 0
  store i1 %v7_8eb0, i1* %cpsr_v.global-to-local, align 1
  %v8_8eb0 = icmp slt i32 %v2_8eb0, 0
  store i1 %v8_8eb0, i1* %cpsr_n.global-to-local, align 1
  %v9_8eb0 = icmp eq i32 %v0_8eb0, %v1_8eb0
  store i1 %v9_8eb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8eac, i32* %v2_8ea4, align 4
  %v2_8eb8 = xor i1 %v8_8eb0, %v7_8eb0
  br i1 %v2_8eb8, label %dec_label_pc_8ebc, label %dec_label_pc_8d84

dec_label_pc_8ebc:                                ; preds = %dec_label_pc_8ea4
  %v0_8ebc = load i32, i32* %r0.global-to-local, align 4
  %v1_8ebc = add i32 %v0_8ebc, 1
  store i32 %v1_8ebc, i32* @sl, align 4
  br label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %dec_label_pc_94b4, %dec_label_pc_947c, %dec_label_pc_8ebc
  %v0_8ee098 = phi i32 [ %v1_94b4, %dec_label_pc_94b4 ], [ %v1_947c, %dec_label_pc_947c ], [ %v1_8ebc, %dec_label_pc_8ebc ]
  store i32 %v0_8af0, i32* %lr.global-to-local, align 4
  %v0_8ec4 = load i32, i32* @r8, align 4
  %v1_8ec4 = add i32 %v0_8ec4, 1
  store i32 %v1_8ec4, i32* @r8, align 4
  %v0_8ec8 = load i32, i32* @r7, align 4
  %v0_8ecc = load i32, i32* @r6, align 4
  %v2_8ed0 = sub i32 %v0_8af0, %v1_8ec4
  %v3_8ed0 = icmp uge i32 %v0_8af0, %v1_8ec4
  store i1 %v3_8ed0, i1* %cpsr_c.global-to-local, align 1
  %v4_8ed0 = xor i32 %v1_8ec4, %v0_8af0
  %v5_8ed0 = xor i32 %v2_8ed0, %v0_8af0
  %v6_8ed0 = and i32 %v5_8ed0, %v4_8ed0
  %v7_8ed0 = icmp slt i32 %v6_8ed0, 0
  store i1 %v7_8ed0, i1* %cpsr_v.global-to-local, align 1
  %v8_8ed0 = icmp slt i32 %v2_8ed0, 0
  store i1 %v8_8ed0, i1* %cpsr_n.global-to-local, align 1
  %v9_8ed0 = icmp eq i32 %v0_8af0, %v1_8ec4
  store i1 %v9_8ed0, i1* %cpsr_z.global-to-local, align 1
  %v1_8ed4 = add i32 %v0_8ec8, 3140
  store i32 %v1_8ed4, i32* @r7, align 4
  %v1_8ed8 = add i32 %v0_8ecc, 3140
  store i32 %v1_8ed8, i32* @r6, align 4
  br i1 %v9_8ed0, label %dec_label_pc_8ee0, label %dec_label_pc_8da4

dec_label_pc_8ee0:                                ; preds = %dec_label_pc_8ec0, %dec_label_pc_8d84.dec_label_pc_8ee0_crit_edge
  %v0_8f18 = phi i32 [ %v0_8ee0.pre, %dec_label_pc_8d84.dec_label_pc_8ee0_crit_edge ], [ %v0_8ee098, %dec_label_pc_8ec0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8ee0 = icmp slt i32 %v0_8f18, 0
  store i1 %v1_8ee0, i1* %cpsr_n.global-to-local, align 1
  %v2_8ee0 = icmp eq i32 %v0_8f18, 0
  store i1 %v2_8ee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8ee0, label %dec_label_pc_8c7c, label %dec_label_pc_8ee8

dec_label_pc_8ee8:                                ; preds = %dec_label_pc_8ee0
  store i32 %v10_8a44, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_8f08, i32* %ip.global-to-local, align 4
  store i32 %v2_8f0c, i32* %r1.global-to-local, align 4
  store i32 %v2_8f10, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_8f18, i32* %r0.global-to-local, align 4
  %v5_8f20 = call i32 @function_12c00(i32 %v0_8f18, i32 %v2_8f0c, i32 %v2_8f10, i32 0, i32 %v2_8f08)
  store i32 %v5_8f20, i32* @r4, align 4
  %v0_8f28 = load i32, i32* @r5, align 4
  store i32 %v0_8f28, i32* %r0.global-to-local, align 4
  %v1_8f2c = inttoptr i32 %v0_8f28 to i32*
  %v2_8f2c = call i32 @function_12cb0(i32* %v1_8f2c)
  store i32 %v2_8f2c, i32* %r0.global-to-local, align 4
  %v0_8f30 = load i32, i32* @r4, align 4
  %v1_8f30 = load i32, i32* @r5, align 4
  %v2_8f30 = sub i32 %v0_8f30, %v1_8f30
  %v3_8f30 = icmp uge i32 %v0_8f30, %v1_8f30
  store i1 %v3_8f30, i1* %cpsr_c.global-to-local, align 1
  %v4_8f30 = xor i32 %v1_8f30, %v0_8f30
  %v5_8f30 = xor i32 %v2_8f30, %v0_8f30
  %v6_8f30 = and i32 %v5_8f30, %v4_8f30
  %v7_8f30 = icmp slt i32 %v6_8f30, 0
  store i1 %v7_8f30, i1* %cpsr_v.global-to-local, align 1
  %v8_8f30 = icmp slt i32 %v2_8f30, 0
  store i1 %v8_8f30, i1* %cpsr_n.global-to-local, align 1
  %v9_8f30 = icmp eq i32 %v0_8f30, %v1_8f30
  store i1 %v9_8f30, i1* %cpsr_z.global-to-local, align 1
  %v7_8f38 = icmp sgt i32 %v0_8f30, %v1_8f30
  br i1 %v7_8f38, label %dec_label_pc_8f3c, label %dec_label_pc_8c7c

dec_label_pc_8f3c:                                ; preds = %dec_label_pc_8ee8
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_8fac

dec_label_pc_8f48:                                ; preds = %.thread38.dec_label_pc_8f48_crit_edge, %dec_label_pc_8fbc
  %v0_8f60 = phi i32 [ %v0_8f48.pre, %.thread38.dec_label_pc_8f48_crit_edge ], [ %v3_8fac, %dec_label_pc_8fbc ]
  %v3_8f48 = udiv i32 %v0_8f60, 32
  store i32 %v2_8e9c, i32* %r2.global-to-local, align 4
  %v3_8f54 = mul nuw nsw i32 %v3_8f48, 4
  %v2_8f58 = add i32 %v3_8f54, %v2_8e9c
  store i32 %v2_8f58, i32* %r3.global-to-local, align 4
  %v1_8f5c = add i32 %v2_8f58, -164
  %v2_8f5c = inttoptr i32 %v1_8f5c to i32*
  %v3_8f5c = load i32, i32* %v2_8f5c, align 4
  %v1_8f60 = urem i32 %v0_8f60, 32
  store i32 %v1_8f60, i32* %r1.global-to-local, align 4
  %v2_8f64 = add nsw i32 %v1_8f60, -1
  %v3_8f64 = shl i32 1, %v2_8f64
  %v4_8f64 = and i32 %v3_8f64, %v3_8f5c
  %v5_8f64 = icmp ne i32 %v4_8f64, 0
  store i1 %v5_8f64, i1* %cpsr_c.global-to-local, align 1
  %v6_8f64 = lshr i32 %v3_8f5c, %v1_8f60
  store i32 %v6_8f64, i32* %r2.global-to-local, align 4
  %v1_8f68 = urem i32 %v6_8f64, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8f68 = icmp eq i32 %v1_8f68, 0
  store i1 %v2_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f68, label %dec_label_pc_8f8c, label %dec_label_pc_8f70

dec_label_pc_8f70:                                ; preds = %dec_label_pc_8f48
  %v0_8f70 = load i32, i32* @r8, align 4
  %v1_8f70 = add i32 %v0_8f70, -1452
  %v2_8f70 = inttoptr i32 %v1_8f70 to i8*
  %v3_8f70 = load i8, i8* %v2_8f70, align 1
  %v4_8f70 = zext i8 %v3_8f70 to i32
  store i32 %v4_8f70, i32* %r3.global-to-local, align 4
  %v2_8f74 = icmp ugt i8 %v3_8f70, 5
  store i1 %v2_8f74, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8f74 = icmp ult i8 %v3_8f70, 6
  store i1 %v6_8f74, i1* %cpsr_n.global-to-local, align 1
  %v7_8f74 = icmp eq i8 %v3_8f70, 6
  store i1 %v7_8f74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8f74, label %dec_label_pc_9524, label %dec_label_pc_8f7c

dec_label_pc_8f7c:                                ; preds = %dec_label_pc_8f70
  %v2_8f7c = icmp ugt i8 %v3_8f70, 6
  store i1 %v2_8f7c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8f7c = icmp ult i8 %v3_8f70, 7
  store i1 %v6_8f7c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f7c = icmp eq i8 %v3_8f70, 7
  store i1 %v7_8f7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8f7c, label %dec_label_pc_9b60, label %dec_label_pc_8f84

dec_label_pc_8f84:                                ; preds = %dec_label_pc_8f7c
  %v2_8f84 = icmp ugt i8 %v3_8f70, 9
  store i1 %v2_8f84, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8f84 = icmp ult i8 %v3_8f70, 10
  store i1 %v6_8f84, i1* %cpsr_n.global-to-local, align 1
  %v7_8f84 = icmp eq i8 %v3_8f70, 10
  store i1 %v7_8f84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8f84, label %dec_label_pc_9d70, label %dec_label_pc_8f8c

dec_label_pc_8f8c:                                ; preds = %dec_label_pc_9c64, %dec_label_pc_a0a4, %dec_label_pc_a1ec, %dec_label_pc_8f84, %dec_label_pc_8f48, %dec_label_pc_8fac, %dec_label_pc_a068, %dec_label_pc_a4d8, %dec_label_pc_a288, %dec_label_pc_a1d0, %dec_label_pc_9db0, %dec_label_pc_9b54, %dec_label_pc_9030, %dec_label_pc_a088, %dec_label_pc_a050, %dec_label_pc_9fd8
  store i32 %v0_8af0, i32* %r3.global-to-local, align 4
  %v1_8f94 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_8f94, i32* %r2.global-to-local, align 4
  %v0_8f98 = load i32, i32* @r8, align 4
  %v2_8f9c = sub i32 %v1_8f94, %v0_8af0
  %v3_8f9c = icmp uge i32 %v1_8f94, %v0_8af0
  store i1 %v3_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v4_8f9c = xor i32 %v1_8f94, %v0_8af0
  %v5_8f9c = xor i32 %v2_8f9c, %v1_8f94
  %v6_8f9c = and i32 %v5_8f9c, %v4_8f9c
  %v7_8f9c = icmp slt i32 %v6_8f9c, 0
  store i1 %v7_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v8_8f9c = icmp slt i32 %v2_8f9c, 0
  store i1 %v8_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v9_8f9c = icmp eq i32 %v1_8f94, %v0_8af0
  store i1 %v9_8f9c, i1* %cpsr_z.global-to-local, align 1
  %v1_8fa4 = add i32 %v0_8f98, 3140
  store i32 %v1_8fa4, i32* @r8, align 4
  br i1 %v9_8f9c, label %dec_label_pc_8c7c, label %dec_label_pc_8fac

dec_label_pc_8fac:                                ; preds = %dec_label_pc_8f8c, %dec_label_pc_8f3c
  %v0_8fb4 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_8f3c ], [ %v1_8fa4, %dec_label_pc_8f8c ]
  %stack_var_-20832.0 = phi i32 [ %v1_8f30, %dec_label_pc_8f3c ], [ %v1_8f94, %dec_label_pc_8f8c ]
  %v1_8fac = add i32 %v0_8fb4, -1456
  %v2_8fac = inttoptr i32 %v1_8fac to i32*
  %v3_8fac = load i32, i32* %v2_8fac, align 4
  store i32 %v3_8fac, i32* %r0.global-to-local, align 4
  %v1_8fb0 = add i32 %v3_8fac, 1
  %v2_8fb0 = icmp eq i32 %v3_8fac, -1
  store i1 %v2_8fb0, i1* %cpsr_c.global-to-local, align 1
  %v3_8fb0 = sub i32 0, %v3_8fac
  %v4_8fb0 = and i32 %v1_8fb0, %v3_8fb0
  %v5_8fb0 = icmp slt i32 %v4_8fb0, 0
  store i1 %v5_8fb0, i1* %cpsr_v.global-to-local, align 1
  %v6_8fb0 = icmp slt i32 %v1_8fb0, 0
  store i1 %v6_8fb0, i1* %cpsr_n.global-to-local, align 1
  %v7_8fb0 = icmp eq i32 %v1_8fb0, 0
  store i1 %v7_8fb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8fac, i32* %sb.global-to-local, align 4
  br i1 %v7_8fb0, label %dec_label_pc_8f8c, label %dec_label_pc_8fbc

dec_label_pc_8fbc:                                ; preds = %dec_label_pc_8fac
  %v3_8fbc = udiv i32 %v3_8fac, 32
  %v3_8fc4 = mul nuw nsw i32 %v3_8fbc, 4
  store i32 %v2_8e9c, i32* @lr, align 4
  %v2_8fcc = add i32 %v3_8fc4, %v2_8e9c
  store i32 %v2_8fcc, i32* %r3.global-to-local, align 4
  %v1_8fd0 = add i32 %v2_8fcc, -292
  %v2_8fd0 = inttoptr i32 %v1_8fd0 to i32*
  %v3_8fd0 = load i32, i32* %v2_8fd0, align 4
  %v1_8fd4 = urem i32 %v3_8fac, 32
  store i32 %v1_8fd4, i32* %r1.global-to-local, align 4
  %v2_8fd8 = add nsw i32 %v1_8fd4, -1
  %v3_8fd8 = shl i32 1, %v2_8fd8
  %v4_8fd8 = and i32 %v3_8fd0, %v3_8fd8
  %v5_8fd8 = icmp ne i32 %v4_8fd8, 0
  store i1 %v5_8fd8, i1* %cpsr_c.global-to-local, align 1
  %v6_8fd8 = lshr i32 %v3_8fd0, %v1_8fd4
  store i32 %v6_8fd8, i32* %r2.global-to-local, align 4
  %v1_8fdc = urem i32 %v6_8fd8, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8fdc = icmp eq i32 %v1_8fdc, 0
  store i1 %v2_8fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8fdc, label %dec_label_pc_8f48, label %dec_label_pc_8fe4

dec_label_pc_8fe4:                                ; preds = %dec_label_pc_8fbc
  store i32 4, i32* @r4, align 4
  store i32 %v10_8a44, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_8ffc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_9008, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v6_9014 = call i32 @function_13180(i32 %v3_8fac, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_9008)
  store i32 %v10_8a44, i32* %r1.global-to-local, align 4
  %v3_901c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_901c, i32* %r3.global-to-local, align 4
  %v2_9020 = or i32 %v3_901c, %v6_9014
  store i32 %v2_9020, i32* %r0.global-to-local, align 4
  %v3_9020 = icmp slt i32 %v2_9020, 0
  store i1 %v3_9020, i1* %cpsr_n.global-to-local, align 1
  %v4_9020 = icmp eq i32 %v2_9020, 0
  store i1 %v4_9020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_9020, label %.thread38, label %dec_label_pc_9030

.thread38:                                        ; preds = %dec_label_pc_8fe4
  %v1_9024 = load i32, i32* @r8, align 4
  %v2_9024 = add i32 %v1_9024, -1456
  %v3_9024 = inttoptr i32 %v2_9024 to i32*
  %v4_9024 = load i32, i32* %v3_9024, align 4
  store i32 %v4_9024, i32* %r0.global-to-local, align 4
  %v1_9028 = load i32, i32* @r4, align 4
  %v2_9028 = trunc i32 %v1_9028 to i8
  %v4_9028 = add i32 %v1_9024, -1452
  %v5_9028 = inttoptr i32 %v4_9028 to i8*
  store i8 %v2_9028, i8* %v5_9028, align 1
  %v0_902c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_902c.pr.pr, label %.thread38.dec_label_pc_8f48_crit_edge, label %dec_label_pc_9030

.thread38.dec_label_pc_8f48_crit_edge:            ; preds = %.thread38
  %v0_8f48.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f48

dec_label_pc_9030:                                ; preds = %dec_label_pc_8fe4, %.thread38
  %v0_9030 = load i32, i32* @r8, align 4
  %v1_9030 = add i32 %v0_9030, -1456
  %v2_9030 = inttoptr i32 %v1_9030 to i32*
  %v3_9030 = load i32, i32* %v2_9030, align 4
  store i32 %v3_9030, i32* %r0.global-to-local, align 4
  %v1_9034 = call i32 @function_129e0(i32 %v3_9030)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_903c = load i32, i32* @r8, align 4
  %v2_903c = add i32 %v1_903c, -1456
  %v3_903c = inttoptr i32 %v2_903c to i32*
  store i32 -1, i32* %v3_903c, align 4
  %v0_9040 = load i32, i32* @r5, align 4
  %v1_9040 = trunc i32 %v0_9040 to i8
  %v2_9040 = load i32, i32* @r8, align 4
  %v3_9040 = add i32 %v2_9040, -1452
  %v4_9040 = inttoptr i32 %v3_9040 to i8*
  store i8 %v1_9040, i8* %v4_9040, align 1
  br label %dec_label_pc_8f8c

dec_label_pc_9048:                                ; preds = %dec_label_pc_8da4
  %v1_9048 = add i32 %v3_9054, 25
  %v2_9048 = inttoptr i32 %v1_9048 to i32*
  %v3_9048 = load i32, i32* %v2_9048, align 4
  store i32 %v3_9048, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_904c = icmp slt i32 %v3_9048, 0
  store i1 %v1_904c, i1* %cpsr_n.global-to-local, align 1
  %v2_904c = icmp eq i32 %v3_9048, 0
  store i1 %v2_904c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_904c, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_9048
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_8da4, align 1
  %v0_9058.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9058.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_9060

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_9058.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_9058.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_9058.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_9048
  %v3_9058 = phi i32 [ %v3_9058.pre, %.thread41..thread43_crit_edge ], [ %v3_9054, %dec_label_pc_9048 ]
  %v1_9058.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_9048 ]
  %v4_9058 = add i32 %v3_9058, -1427
  %v5_9058 = inttoptr i32 %v4_9058 to i8*
  store i8 %v1_9058.off0, i8* %v5_9058, align 1
  %v0_905c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_905c.pr, label %.thread43.dec_label_pc_8db8_crit_edge, label %dec_label_pc_9060

.thread43.dec_label_pc_8db8_crit_edge:            ; preds = %.thread43
  %v0_8db8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8db8

dec_label_pc_9060:                                ; preds = %.thread41, %.thread43, %dec_label_pc_8d14
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_9068 = load i32, i32* @r7, align 4
  %v1_9068 = add i32 %v0_9068, 2112
  store i32 %v1_9068, i32* %r0.global-to-local, align 4
  %v1_906c = load i32, i32* @r6, align 4
  %v2_906c = add i32 %v1_906c, 33
  %v3_906c = inttoptr i32 %v2_906c to i32*
  store i32 -1, i32* %v3_906c, align 4
  %v0_9070 = load i32, i32* %r0.global-to-local, align 4
  %v1_9070 = add i32 %v0_9070, 4
  store i32 %v1_9070, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_9078 = load i32, i32* @r5, align 4
  %v1_9078 = load i32, i32* @r6, align 4
  %v2_9078 = add i32 %v1_9078, 21
  %v3_9078 = inttoptr i32 %v2_9078 to i32*
  store i32 %v0_9078, i32* %v3_9078, align 4
  %v2_907c = call i32 @function_120ec(i32 %v1_9070, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_9088 = load i32, i32* @r5, align 4
  %v1_9088 = load i32, i32* @r6, align 4
  %v2_9088 = add i32 %v1_9088, 681
  %v3_9088 = inttoptr i32 %v2_9088 to i32*
  store i32 %v0_9088, i32* %v3_9088, align 4
  %v2_908c = call i32 @function_120ec(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9094 = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_909c = load i32, i32* @r6, align 4
  store i32 %v0_909c, i32* %r1.global-to-local, align 4
  %v2_90a0 = add i32 %v2_9094, %stack_var_-20856.0.ph
  store i32 %v2_90a0, i32* @r0, align 4
  %v2_90a4 = inttoptr i32 %v2_90a0 to i8*
  %v3_90a4 = call i32 @function_12074(i8* %v2_90a4, i32 %v0_909c)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_90ac = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150dc.54 to i32), i32* %r1.global-to-local, align 4
  %v2_90b8 = add i32 %v2_90ac, %stack_var_-20856.0.ph
  store i32 %v2_90b8, i32* @r0, align 4
  %v2_90bc = inttoptr i32 %v2_90b8 to i8*
  %v3_90bc = call i32 @function_12074(i8* %v2_90bc, i32 ptrtoint (i32* @global_var_150dc.54 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_90c4 = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_90cc = load i32, i32* @r7, align 4
  %v1_90cc = add i32 %v0_90cc, 532
  store i32 %v1_90cc, i32* %r1.global-to-local, align 4
  %v2_90d0 = add i32 %v2_90c4, %stack_var_-20856.0.ph
  store i32 %v2_90d0, i32* @r0, align 4
  %v2_90d4 = inttoptr i32 %v2_90d0 to i8*
  %v3_90d4 = call i32 @function_12074(i8* %v2_90d4, i32 %v1_90cc)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_90dc = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_150b4.56 to i32), i32* %r1.global-to-local, align 4
  %v2_90e8 = add i32 %v2_90dc, %stack_var_-20856.0.ph
  store i32 %v2_90e8, i32* @r0, align 4
  %v3_90ec = inttoptr i32 %v2_90e8 to i8*
  %v4_90ec = call i32 @function_12074(i8* %v3_90ec, i32 ptrtoint ([24 x i8]* @global_var_150b4.56 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_90f4 = call i32 @function_1204c(i8* %v1_9094)
  %v2_90fc = add i32 %v2_90f4, %stack_var_-20856.0.ph
  store i32 %v2_90fc, i32* @r0, align 4
  %v0_9100 = load i32, i32* @r7, align 4
  %v1_9100 = add i32 %v0_9100, 20
  store i32 %v1_9100, i32* %r1.global-to-local, align 4
  %v2_9104 = inttoptr i32 %v2_90fc to i8*
  %v3_9104 = call i32 @function_12074(i8* %v2_9104, i32 %v1_9100)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_910c = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_150cc.58 to i32), i32* %r1.global-to-local, align 4
  %v2_9118 = add i32 %v2_910c, %stack_var_-20856.0.ph
  store i32 %v2_9118, i32* @r0, align 4
  %v3_911c = inttoptr i32 %v2_9118 to i8*
  %v4_911c = call i32 @function_12074(i8* %v3_911c, i32 ptrtoint ([9 x i8]* @global_var_150cc.58 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9124 = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_912c = load i32, i32* @r7, align 4
  %v2_9130 = add i32 %v2_9124, %stack_var_-20856.0.ph
  store i32 %v2_9130, i32* @r0, align 4
  %v1_9134 = add i32 %v0_912c, 789
  store i32 %v1_9134, i32* %r1.global-to-local, align 4
  %v2_9138 = inttoptr i32 %v2_9130 to i8*
  %v3_9138 = call i32 @function_12074(i8* %v2_9138, i32 %v1_9134)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9140 = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  %v2_914c = add i32 %v2_9140, %stack_var_-20856.0.ph
  store i32 %v2_914c, i32* @r0, align 4
  %v3_9150 = inttoptr i32 %v2_914c to i8*
  %v4_9150 = call i32 @function_12074(i8* %v3_9150, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32))
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_9158 = call i32 @function_11598(i32 39)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9160 = call i32 @function_1204c(i8* %v1_9094)
  %v0_9164 = load i32, i32* @r5, align 4
  store i32 %v0_9164, i32* %r1.global-to-local, align 4
  store i32 %v2_9160, i32* @r4, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_9170 = inttoptr i32 %v0_9164 to i32*
  %v3_9170 = call i32 @function_114b4(i32 39, i32* %v2_9170)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_9170, i32* %r1.global-to-local, align 4
  %v1_917c = load i32, i32* @r4, align 4
  %v2_917c = add i32 %v1_917c, %stack_var_-20856.0.ph
  store i32 %v2_917c, i32* @r0, align 4
  %v2_9180 = inttoptr i32 %v2_917c to i8*
  %v3_9180 = call i32 @function_12074(i8* %v2_9180, i32 %v3_9170)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_9188 = call i32 @function_114e0(i32 39)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9190 = call i32 @function_1204c(i8* %v1_9094)
  %v2_9198 = add i32 %v2_9190, %stack_var_-20856.0.ph
  store i32 %v2_9198, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  %v3_91a0 = inttoptr i32 %v2_9198 to i8*
  %v4_91a0 = call i32 @function_12074(i8* %v3_91a0, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32))
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_91a8 = call i32 @function_11598(i32 40)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_91b0 = call i32 @function_1204c(i8* %v1_9094)
  %v0_91b4 = load i32, i32* @r5, align 4
  store i32 %v0_91b4, i32* %r1.global-to-local, align 4
  store i32 %v2_91b0, i32* @r4, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_91c0 = inttoptr i32 %v0_91b4 to i32*
  %v3_91c0 = call i32 @function_114b4(i32 40, i32* %v2_91c0)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_91c0, i32* %r1.global-to-local, align 4
  %v1_91cc = load i32, i32* @r4, align 4
  %v2_91cc = add i32 %v1_91cc, %stack_var_-20856.0.ph
  store i32 %v2_91cc, i32* @r0, align 4
  %v2_91d0 = inttoptr i32 %v2_91cc to i8*
  %v3_91d0 = call i32 @function_12074(i8* %v2_91d0, i32 %v3_91c0)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_91d8 = call i32 @function_114e0(i32 40)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_91e0 = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  %v2_91ec = add i32 %v2_91e0, %stack_var_-20856.0.ph
  store i32 %v2_91ec, i32* @r0, align 4
  %v3_91f0 = inttoptr i32 %v2_91ec to i8*
  %v4_91f0 = call i32 @function_12074(i8* %v3_91f0, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32))
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_91f8 = call i32 @function_11598(i32 41)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9200 = call i32 @function_1204c(i8* %v1_9094)
  %v0_9204 = load i32, i32* @r5, align 4
  store i32 %v0_9204, i32* %r1.global-to-local, align 4
  store i32 %v2_9200, i32* @r4, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_9210 = inttoptr i32 %v0_9204 to i32*
  %v3_9210 = call i32 @function_114b4(i32 41, i32* %v2_9210)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_9210, i32* %r1.global-to-local, align 4
  %v1_921c = load i32, i32* @r4, align 4
  %v2_921c = add i32 %v1_921c, %stack_var_-20856.0.ph
  store i32 %v2_921c, i32* @r0, align 4
  %v2_9220 = inttoptr i32 %v2_921c to i8*
  %v3_9220 = call i32 @function_12074(i8* %v2_9220, i32 %v3_9210)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_9228 = call i32 @function_114e0(i32 41)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9230 = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  %v2_923c = add i32 %v2_9230, %stack_var_-20856.0.ph
  store i32 %v2_923c, i32* @r0, align 4
  %v3_9240 = inttoptr i32 %v2_923c to i8*
  %v4_9240 = call i32 @function_12074(i8* %v3_9240, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32))
  store i32 %v4_9240, i32* %r0.global-to-local, align 4
  store i32 %v6_8954, i32* %r1.global-to-local, align 4
  %v1_9248 = load i32, i32* @r5, align 4
  %v2_9248 = sub i32 %v6_8954, %v1_9248
  %v3_9248 = icmp uge i32 %v6_8954, %v1_9248
  store i1 %v3_9248, i1* %cpsr_c.global-to-local, align 1
  %v4_9248 = xor i32 %v1_9248, %v6_8954
  %v5_9248 = xor i32 %v2_9248, %v6_8954
  %v6_9248 = and i32 %v5_9248, %v4_9248
  %v7_9248 = icmp slt i32 %v6_9248, 0
  store i1 %v7_9248, i1* %cpsr_v.global-to-local, align 1
  %v8_9248 = icmp slt i32 %v2_9248, 0
  store i1 %v8_9248, i1* %cpsr_n.global-to-local, align 1
  %v9_9248 = icmp eq i32 %v6_8954, %v1_9248
  store i1 %v9_9248, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9248, label %dec_label_pc_9320, label %dec_label_pc_9250

dec_label_pc_9250:                                ; preds = %dec_label_pc_9060
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_9254 = call i32 @function_11598(i32 42)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_925c = call i32 @function_1204c(i8* %v1_9094)
  %v0_9260 = load i32, i32* @r5, align 4
  store i32 %v0_9260, i32* %r1.global-to-local, align 4
  store i32 %v2_925c, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_926c = inttoptr i32 %v0_9260 to i32*
  %v3_926c = call i32 @function_114b4(i32 42, i32* %v2_926c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_926c, i32* %r1.global-to-local, align 4
  %v1_9278 = load i32, i32* @r4, align 4
  %v2_9278 = add i32 %v1_9278, %stack_var_-20856.0.ph
  store i32 %v2_9278, i32* @r0, align 4
  %v2_927c = inttoptr i32 %v2_9278 to i8*
  %v3_927c = call i32 @function_12074(i8* %v2_927c, i32 %v3_926c)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_9284 = call i32 @function_114e0(i32 42)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_928c = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  %v2_9298 = add i32 %v2_928c, %stack_var_-20856.0.ph
  store i32 %v2_9298, i32* @r0, align 4
  %v3_929c = inttoptr i32 %v2_9298 to i8*
  %v4_929c = call i32 @function_12074(i8* %v3_929c, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_92a4 = call i32 @function_1204c(i8* %v1_9094)
  %v0_92a8 = load i32, i32* @r5, align 4
  store i32 %v0_92a8, i32* %r1.global-to-local, align 4
  store i32 %v2_92a4, i32* %r4.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v2_92b4 = inttoptr i32 %v0_92a8 to i32*
  %v3_92b4 = call i32 @function_114b4(i32 47, i32* %v2_92b4)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_92b4, i32* %r1.global-to-local, align 4
  %v2_92c0 = add i32 %v2_92a4, %stack_var_-20856.0.ph
  store i32 %v2_92c0, i32* @r0, align 4
  %v2_92c4 = inttoptr i32 %v2_92c0 to i8*
  %v3_92c4 = call i32 @function_12074(i8* %v2_92c4, i32 %v3_92b4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_92cc = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_150dc.54 to i32), i32* %r1.global-to-local, align 4
  %v2_92d8 = add i32 %v2_92cc, %stack_var_-20856.0.ph
  store i32 %v2_92d8, i32* @r0, align 4
  %v2_92dc = inttoptr i32 %v2_92d8 to i8*
  %v3_92dc = call i32 @function_12074(i8* %v2_92dc, i32 ptrtoint (i32* @global_var_150dc.54 to i32))
  store i32 %v6_8954, i32* %r0.global-to-local, align 4
  %v2_92e4 = call i32 @function_1204c(i8* %v1_92e4)
  store i32 %v2_92e4, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_92f0 = call i32 @function_1204c(i8* %v1_9094)
  %v2_92f8 = add i32 %v2_92f0, %stack_var_-20856.0.ph
  store i32 %v2_92f8, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_9300 = load i32, i32* @r4, align 4
  store i32 %v0_9300, i32* %r0.global-to-local, align 4
  %v3_9304 = trunc i32 %v0_9300 to i8
  %v4_9304 = call i32 @function_12540(i8 %v3_9304, i32 10, i32 %v2_92f8)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_930c = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  %v2_9318 = add i32 %v2_930c, %stack_var_-20856.0.ph
  store i32 %v2_9318, i32* @r0, align 4
  %v3_931c = inttoptr i32 %v2_9318 to i8*
  %v4_931c = call i32 @function_12074(i8* %v3_931c, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32))
  store i32 %v4_931c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9320

dec_label_pc_9320:                                ; preds = %dec_label_pc_9060, %dec_label_pc_9250
  %v0_9320 = load i32, i32* @r6, align 4
  %v1_9320 = add i32 %v0_9320, 37
  %v2_9320 = inttoptr i32 %v1_9320 to i32*
  %v3_9320 = load i32, i32* %v2_9320, align 4
  store i32 %v3_9320, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9324 = icmp slt i32 %v3_9320, 0
  store i1 %v1_9324, i1* %cpsr_n.global-to-local, align 1
  %v2_9324 = icmp eq i32 %v3_9320, 0
  store i1 %v2_9324, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_9320, 1
  br i1 %tmp208, label %dec_label_pc_93cc, label %dec_label_pc_932c

dec_label_pc_932c:                                ; preds = %dec_label_pc_9320
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9330 = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_150ec.62 to i32), i32* %r1.global-to-local, align 4
  %v2_933c = add i32 %v2_9330, %stack_var_-20856.0.ph
  store i32 %v2_933c, i32* @r0, align 4
  %v3_9340 = inttoptr i32 %v2_933c to i8*
  %v4_9340 = call i32 @function_12074(i8* %v3_9340, i32 ptrtoint ([9 x i8]* @global_var_150ec.62 to i32))
  store i32 %v4_9340, i32* %r0.global-to-local, align 4
  %v0_9344 = load i32, i32* @r6, align 4
  %v1_9344 = add i32 %v0_9344, 37
  %v2_9344 = inttoptr i32 %v1_9344 to i32*
  %v3_9344 = load i32, i32* %v2_9344, align 4
  store i32 %v3_9344, i32* %r3.global-to-local, align 4
  store i32 %v10_8a44, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_934c = icmp slt i32 %v3_9344, 0
  store i1 %v1_934c, i1* %cpsr_n.global-to-local, align 1
  %v2_934c = icmp eq i32 %v3_9344, 0
  store i1 %v2_934c, i1* %cpsr_z.global-to-local, align 1
  %v0_9350 = load i32, i32* @r5, align 4
  store i32 %v0_9350, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_9344, 1
  br i1 %tmp209, label %dec_label_pc_93b4, label %dec_label_pc_9358

dec_label_pc_9358:                                ; preds = %dec_label_pc_932c, %dec_label_pc_9358
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_935c = call i32 @function_1204c(i8* %v1_9094)
  store i32 %v10_8a44, i32* %r2.global-to-local, align 4
  %v3_9364 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_936c = and i32 %v3_9364, 33554432
  %v2_936c = icmp ne i32 %v1_936c, 0
  store i1 %v2_936c, i1* %cpsr_c.global-to-local, align 1
  %v3_936c = mul i32 %v3_9364, 128
  %v1_9370 = add i32 %v3_936c, 1472
  %v2_9374 = add i32 %v2_935c, %stack_var_-20856.0.ph
  store i32 %v2_9374, i32* @r0, align 4
  %v0_9378 = load i32, i32* @r7, align 4
  %v2_9378 = add i32 %v1_9370, %v0_9378
  store i32 %v2_9378, i32* %r1.global-to-local, align 4
  %v2_937c = inttoptr i32 %v2_9374 to i8*
  %v3_937c = call i32 @function_12074(i8* %v2_937c, i32 %v2_9378)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9384 = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150f8.64 to i32), i32* %r1.global-to-local, align 4
  %v2_9390 = add i32 %v2_9384, %stack_var_-20856.0.ph
  store i32 %v2_9390, i32* @r0, align 4
  %v3_9394 = inttoptr i32 %v2_9390 to i8*
  %v4_9394 = call i32 @function_12074(i8* %v3_9394, i32 ptrtoint ([3 x i8]* @global_var_150f8.64 to i32))
  store i32 %v4_9394, i32* %r0.global-to-local, align 4
  store i32 %v10_8a44, i32* %lr.global-to-local, align 4
  %v3_939c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_939c, i32* %r3.global-to-local, align 4
  %v0_93a0 = load i32, i32* @r6, align 4
  %v1_93a0 = add i32 %v0_93a0, 37
  %v2_93a0 = inttoptr i32 %v1_93a0 to i32*
  %v3_93a0 = load i32, i32* %v2_93a0, align 4
  store i32 %v3_93a0, i32* %r2.global-to-local, align 4
  %v1_93a4 = add i32 %v3_939c, 1
  store i32 %v1_93a4, i32* %ip.global-to-local, align 4
  %v2_93a8 = sub i32 %v3_93a0, %v1_93a4
  %v3_93a8 = icmp uge i32 %v3_93a0, %v1_93a4
  store i1 %v3_93a8, i1* %cpsr_c.global-to-local, align 1
  %v4_93a8 = xor i32 %v3_93a0, %v1_93a4
  %v5_93a8 = xor i32 %v2_93a8, %v3_93a0
  %v6_93a8 = and i32 %v5_93a8, %v4_93a8
  %v7_93a8 = icmp slt i32 %v6_93a8, 0
  store i1 %v7_93a8, i1* %cpsr_v.global-to-local, align 1
  %v8_93a8 = icmp slt i32 %v2_93a8, 0
  store i1 %v8_93a8, i1* %cpsr_n.global-to-local, align 1
  %v9_93a8 = icmp eq i32 %v3_93a0, %v1_93a4
  store i1 %v9_93a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_93a4, i32* %stack_var_-40, align 4
  %v8_93b0 = icmp sgt i32 %v3_93a0, %v1_93a4
  br i1 %v8_93b0, label %dec_label_pc_9358, label %dec_label_pc_93b4

dec_label_pc_93b4:                                ; preds = %dec_label_pc_9358, %dec_label_pc_932c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_93b8 = call i32 @function_1204c(i8* %v1_9094)
  %v2_93c0 = add i32 %v2_93b8, %stack_var_-20856.0.ph
  store i32 %v2_93c0, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  %v3_93c8 = inttoptr i32 %v2_93c0 to i8*
  %v4_93c8 = call i32 @function_12074(i8* %v3_93c8, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32))
  store i32 %v4_93c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_93cc

dec_label_pc_93cc:                                ; preds = %dec_label_pc_9320, %dec_label_pc_93b4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_93d0 = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  %v2_93dc = add i32 %v2_93d0, %stack_var_-20856.0.ph
  store i32 %v2_93dc, i32* @r0, align 4
  %v3_93e0 = inttoptr i32 %v2_93dc to i8*
  %v4_93e0 = call i32 @function_12074(i8* %v3_93e0, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32))
  store i32 %v4_93e0, i32* %r0.global-to-local, align 4
  store i32 %v6_8954, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_93e8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_93e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_93e8, label %dec_label_pc_9408, label %dec_label_pc_93f0

dec_label_pc_93f0:                                ; preds = %dec_label_pc_93cc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_93f4 = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8954, i32* %r1.global-to-local, align 4
  %v2_9400 = add i32 %v2_93f4, %stack_var_-20856.0.ph
  store i32 %v2_9400, i32* @r0, align 4
  %v2_9404 = inttoptr i32 %v2_9400 to i8*
  %v3_9404 = call i32 @function_12074(i8* %v2_9404, i32 %v6_8954)
  store i32 %v3_9404, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9408

dec_label_pc_9408:                                ; preds = %dec_label_pc_93cc, %dec_label_pc_93f0
  %v0_9408 = load i32, i32* @r7, align 4
  %v1_9408 = add i32 %v0_9408, 1440
  store i32 %v1_9408, i32* %r4.global-to-local, align 4
  %v0_940c = load i32, i32* @r6, align 4
  store i32 %v0_940c, i32* %r0.global-to-local, align 4
  store i32 %v1_9408, i32* %r1.global-to-local, align 4
  %v2_9414 = inttoptr i32 %v0_940c to i8*
  %v3_9414 = call i32 @function_1242c(i8* %v2_9414, i32 %v1_9408)
  store i32 %v3_9414, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9418 = icmp slt i32 %v3_9414, 0
  store i1 %v1_9418, i1* %cpsr_n.global-to-local, align 1
  %v2_9418 = icmp eq i32 %v3_9414, 0
  store i1 %v2_9418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9418, label %dec_label_pc_9d60, label %dec_label_pc_9420

dec_label_pc_9420:                                ; preds = %dec_label_pc_9408, %dec_label_pc_9d60
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_9424 = load i32, i32* @r6, align 4
  %v1_9424 = add i32 %v0_9424, -1431
  %v2_9424 = inttoptr i32 %v1_9424 to i32*
  %v3_9424 = load i32, i32* %v2_9424, align 4
  store i32 %v3_9424, i32* @r4, align 4
  %v2_9428 = call i32 @function_1204c(i8* %v1_9094)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_9428, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9438 = load i32, i32* @r4, align 4
  store i32 %v0_9438, i32* %r0.global-to-local, align 4
  %v5_943c = call i32 @function_1323c(i32 %v0_9438, i32* %v4_943c, i32 %v2_9428, i32 16384)
  store i32 %v5_943c, i32* %r0.global-to-local, align 4
  %v0_9440 = load i32, i32* @r6, align 4
  %v1_9440 = add i32 %v0_9440, -1431
  %v2_9440 = inttoptr i32 %v1_9440 to i32*
  %v3_9440 = load i32, i32* %v2_9440, align 4
  store i32 %v3_9440, i32* %r0.global-to-local, align 4
  %v3_9448 = udiv i32 %v3_9440, 32
  %v3_944c = mul nuw nsw i32 %v3_9448, 4
  store i32 %v2_8e9c, i32* %lr.global-to-local, align 4
  %v2_9454 = add i32 %v3_944c, %v2_8e9c
  store i32 %v2_9454, i32* %r3.global-to-local, align 4
  %v1_9458 = add i32 %v2_9454, -164
  %v2_9458 = inttoptr i32 %v1_9458 to i32*
  %v3_9458 = load i32, i32* %v2_9458, align 4
  %v1_945c = urem i32 %v3_9440, 32
  %v1_9460 = load i32, i32* %fp.global-to-local, align 4
  %v7_9460 = shl i32 %v1_9460, %v1_945c
  %v8_9460 = or i32 %v7_9460, %v3_9458
  store i32 %v8_9460, i32* %r2.global-to-local, align 4
  %v0_9464 = load i32, i32* @sl, align 4
  %v2_9464 = sub i32 %v0_9464, %v3_9440
  %v3_9464 = icmp uge i32 %v0_9464, %v3_9440
  store i1 %v3_9464, i1* %cpsr_c.global-to-local, align 1
  %v4_9464 = xor i32 %v0_9464, %v3_9440
  %v5_9464 = xor i32 %v2_9464, %v0_9464
  %v6_9464 = and i32 %v5_9464, %v4_9464
  %v7_9464 = icmp slt i32 %v6_9464, 0
  store i1 %v7_9464, i1* %cpsr_v.global-to-local, align 1
  %v8_9464 = icmp slt i32 %v2_9464, 0
  store i1 %v8_9464, i1* %cpsr_n.global-to-local, align 1
  %v9_9464 = icmp eq i32 %v0_9464, %v3_9440
  store i1 %v9_9464, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_9460, i32* %v2_9458, align 4
  %v0_9470 = load i32, i32* %sb.global-to-local, align 4
  %v1_9470 = load i32, i32* @r6, align 4
  %v2_9470 = add i32 %v1_9470, -1419
  %v3_9470 = inttoptr i32 %v2_9470 to i32*
  store i32 %v0_9470, i32* %v3_9470, align 4
  %v0_9474 = load i32, i32* %r1.global-to-local, align 4
  %v1_9474 = trunc i32 %v0_9474 to i8
  %v2_9474 = load i32, i32* @r6, align 4
  %v3_9474 = add i32 %v2_9474, -1427
  %v4_9474 = inttoptr i32 %v3_9474 to i8*
  store i8 %v1_9474, i8* %v4_9474, align 1
  %v0_9478 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_9478 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_9478 = xor i1 %v0_9478, %v1_9478
  br i1 %v2_9478, label %dec_label_pc_947c, label %dec_label_pc_8d84

dec_label_pc_947c:                                ; preds = %dec_label_pc_9420
  %v0_947c = load i32, i32* %r0.global-to-local, align 4
  %v1_947c = add i32 %v0_947c, 1
  store i32 %v1_947c, i32* @sl, align 4
  br label %dec_label_pc_8ec0

dec_label_pc_9484:                                ; preds = %dec_label_pc_8d5c
  %v1_9484 = add i32 %v3_9054, -1431
  %v2_9484 = inttoptr i32 %v1_9484 to i32*
  %v3_9484 = load i32, i32* %v2_9484, align 4
  store i32 %v3_9484, i32* %r0.global-to-local, align 4
  %v3_948c = udiv i32 %v3_9484, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_9490 = mul nuw nsw i32 %v3_948c, 4
  store i32 %v2_8e9c, i32* %ip.global-to-local, align 4
  %v2_9498 = add i32 %v3_9490, %v2_8e9c
  store i32 %v2_9498, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_949c

dec_label_pc_949c:                                ; preds = %.thread24, %.thread35, %dec_label_pc_9484
  %v1_94a8 = phi i32 [ %v4_8d40, %.thread35 ], [ %v4_8d20, %.thread24 ], [ %v3_9484, %dec_label_pc_9484 ]
  %v1_94ac = phi i32 [ %v3_8d54, %.thread35 ], [ %v3_8d34, %.thread24 ], [ %v2_9498, %dec_label_pc_9484 ]
  %v1_949c = add i32 %v1_94ac, -164
  %v2_949c = inttoptr i32 %v1_949c to i32*
  %v3_949c = load i32, i32* %v2_949c, align 4
  %v1_94a0 = urem i32 %v1_94a8, 32
  store i32 %v1_94a0, i32* %r1.global-to-local, align 4
  %v1_94a4 = load i32, i32* %fp.global-to-local, align 4
  %v7_94a4 = shl i32 %v1_94a4, %v1_94a0
  %v8_94a4 = or i32 %v7_94a4, %v3_949c
  store i32 %v8_94a4, i32* %r2.global-to-local, align 4
  %v0_94a8 = load i32, i32* @sl, align 4
  %v2_94a8 = sub i32 %v0_94a8, %v1_94a8
  %v3_94a8 = icmp uge i32 %v0_94a8, %v1_94a8
  store i1 %v3_94a8, i1* %cpsr_c.global-to-local, align 1
  %v4_94a8 = xor i32 %v0_94a8, %v1_94a8
  %v5_94a8 = xor i32 %v2_94a8, %v0_94a8
  %v6_94a8 = and i32 %v5_94a8, %v4_94a8
  %v7_94a8 = icmp slt i32 %v6_94a8, 0
  store i1 %v7_94a8, i1* %cpsr_v.global-to-local, align 1
  %v8_94a8 = icmp slt i32 %v2_94a8, 0
  store i1 %v8_94a8, i1* %cpsr_n.global-to-local, align 1
  %v9_94a8 = icmp eq i32 %v0_94a8, %v1_94a8
  store i1 %v9_94a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_94a4, i32* %v2_949c, align 4
  %v2_94b0 = xor i1 %v8_94a8, %v7_94a8
  br i1 %v2_94b0, label %dec_label_pc_94b4, label %dec_label_pc_8d84

dec_label_pc_94b4:                                ; preds = %dec_label_pc_949c
  %v0_94b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_94b4 = add i32 %v0_94b4, 1
  store i32 %v1_94b4, i32* @sl, align 4
  br label %dec_label_pc_8ec0

dec_label_pc_94bc:                                ; preds = %dec_label_pc_8d0c
  %v1_94bc = add i32 %v3_9054, -1423
  %v2_94bc = inttoptr i32 %v1_94bc to i32*
  %v3_94bc = load i32, i32* %v2_94bc, align 4
  %v1_94c0 = load i32, i32* %sb.global-to-local, align 4
  %v2_94c0 = sub i32 %v1_94c0, %v3_94bc
  store i32 %v2_94c0, i32* %r3.global-to-local, align 4
  %v1_94c4 = add i32 %v2_94c0, -30
  %v2_94c4 = icmp ugt i32 %v2_94c0, 29
  store i1 %v2_94c4, i1* %cpsr_c.global-to-local, align 1
  %v3_94c4 = sub i32 29, %v2_94c0
  %v4_94c4 = and i32 %v3_94c4, %v2_94c0
  %v5_94c4 = icmp slt i32 %v4_94c4, 0
  store i1 %v5_94c4, i1* %cpsr_v.global-to-local, align 1
  %v6_94c4 = icmp slt i32 %v1_94c4, 0
  store i1 %v6_94c4, i1* %cpsr_n.global-to-local, align 1
  %v7_94c4 = icmp eq i32 %v2_94c0, 30
  store i1 %v7_94c4, i1* %cpsr_z.global-to-local, align 1
  %v2_94c8 = xor i1 %v7_94c4, true
  %v3_94c8 = and i1 %v2_94c4, %v2_94c8
  br i1 %v3_94c8, label %dec_label_pc_8d6c, label %dec_label_pc_94cc

dec_label_pc_94cc:                                ; preds = %dec_label_pc_94bc
  %v1_94cc = add i32 %v3_9054, -1431
  %v2_94cc = inttoptr i32 %v1_94cc to i32*
  %v3_94cc = load i32, i32* %v2_94cc, align 4
  store i32 %v3_94cc, i32* %r0.global-to-local, align 4
  %v3_94d4 = udiv i32 %v3_94cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_94d8 = mul nuw nsw i32 %v3_94d4, 4
  store i32 %v3_94d8, i32* %r3.global-to-local, align 4
  store i32 %v2_8e9c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8ea4

dec_label_pc_9524:                                ; preds = %dec_label_pc_8f70
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_952c = call i32 @function_120ec(i32 %v2_89d4, i32 10240)
  store i32 %v2_952c, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_9538 = load i32, i32* @r8, align 4
  %v1_9538 = add i32 %v0_9538, -1456
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r0.global-to-local, align 4
  store i32 %v2_89d4, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_9544 = call i32 @function_131dc(i32 %v3_9538, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_9544, i32* %r0.global-to-local, align 4
  store i32 %v5_9544, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_954c = icmp slt i32 %v5_9544, 0
  store i1 %v1_954c, i1* %cpsr_n.global-to-local, align 1
  %v2_954c = icmp eq i32 %v5_9544, 0
  store i1 %v2_954c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v5_9544, 1
  br i1 %tmp210, label %dec_label_pc_a1d0, label %dec_label_pc_9558

dec_label_pc_9558:                                ; preds = %dec_label_pc_9524
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  store i32 %v5_9544, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_150fc.66 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_9568 = call i32 @function_12110(i32 %v2_89d4, i32 %v5_9544, i32 ptrtoint ([5 x i8]* @global_var_150fc.66 to i32), i32 4)
  store i32 %v5_9568, i32* %r0.global-to-local, align 4
  %v1_956c = add i32 %v5_9568, 1
  %v2_956c = icmp eq i32 %v5_9568, -1
  store i1 %v2_956c, i1* %cpsr_c.global-to-local, align 1
  %v3_956c = sub i32 0, %v5_9568
  %v4_956c = and i32 %v1_956c, %v3_956c
  %v5_956c = icmp slt i32 %v4_956c, 0
  store i1 %v5_956c, i1* %cpsr_v.global-to-local, align 1
  %v6_956c = icmp slt i32 %v1_956c, 0
  store i1 %v6_956c, i1* %cpsr_n.global-to-local, align 1
  %v7_956c = icmp eq i32 %v1_956c, 0
  store i1 %v7_956c, i1* %cpsr_z.global-to-local, align 1
  %v0_a068 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_956c, label %dec_label_pc_a068, label %dec_label_pc_9574

dec_label_pc_9574:                                ; preds = %dec_label_pc_9558, %dec_label_pc_a068
  store i32 ptrtoint ([5 x i8]* @global_var_150fc.66 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_a068, i32* %r1.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v5_9584 = call i32 @function_12110(i32 %v2_89d4, i32 %v0_a068, i32 ptrtoint ([5 x i8]* @global_var_150fc.66 to i32), i32 4)
  store i32 %v2_8e9c, i32* %ip.global-to-local, align 4
  %v2_9590 = add i32 %v5_9584, %v2_8e9c
  store i32 %v2_9590, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_9598 = load i32, i32* @r6, align 4
  %v4_9598 = add i32 %v3_9598, %v2_9590
  %v5_9598 = inttoptr i32 %v4_9598 to i8*
  store i8 0, i8* %v5_9598, align 1
  %v0_959c = load i32, i32* @r5, align 4
  store i32 %v0_959c, i32* %r1.global-to-local, align 4
  store i32 53, i32* %r0.global-to-local, align 4
  %v2_95a4 = inttoptr i32 %v0_959c to i32*
  %v3_95a4 = call i32 @function_114b4(i32 53, i32* %v2_95a4)
  %v0_95a8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_95a8, i32* @r1, align 4
  store i32 %v3_95a4, i32* %r2.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v4_95b4 = call i32 @function_123a0(i8* %tmp199, i32 %v0_95a8, i32 %v3_95a4)
  store i32 %v4_95b4, i32* %r0.global-to-local, align 4
  %v1_95b8 = add i32 %v4_95b4, 1
  %v2_95b8 = icmp eq i32 %v4_95b4, -1
  store i1 %v2_95b8, i1* %cpsr_c.global-to-local, align 1
  %v3_95b8 = sub i32 0, %v4_95b4
  %v4_95b8 = and i32 %v1_95b8, %v3_95b8
  %v5_95b8 = icmp slt i32 %v4_95b8, 0
  store i1 %v5_95b8, i1* %cpsr_v.global-to-local, align 1
  %v6_95b8 = icmp slt i32 %v1_95b8, 0
  store i1 %v6_95b8, i1* %cpsr_n.global-to-local, align 1
  %v7_95b8 = icmp eq i32 %v1_95b8, 0
  store i1 %v7_95b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95b8, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_9574
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_95c0 = load i32, i32* @r8, align 4
  %v3_95c0 = add i32 %v2_95c0, -4
  %v4_95c0 = inttoptr i32 %v3_95c0 to i32*
  store i32 2, i32* %v4_95c0, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_9574, %bb211
  %v0_95c4 = load i32, i32* @r5, align 4
  store i32 %v0_95c4, i32* %r1.global-to-local, align 4
  store i32 52, i32* %r0.global-to-local, align 4
  %v2_95cc = inttoptr i32 %v0_95c4 to i32*
  %v3_95cc = call i32 @function_114b4(i32 52, i32* %v2_95cc)
  %v0_95d0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_95d0, i32* @r1, align 4
  store i32 %v3_95cc, i32* %r2.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v4_95dc = call i32 @function_123a0(i8* %tmp199, i32 %v0_95d0, i32 %v3_95cc)
  store i32 %v4_95dc, i32* %r0.global-to-local, align 4
  %v1_95e0 = add i32 %v4_95dc, 1
  %v2_95e0 = icmp eq i32 %v4_95dc, -1
  store i1 %v2_95e0, i1* %cpsr_c.global-to-local, align 1
  %v3_95e0 = sub i32 0, %v4_95dc
  %v4_95e0 = and i32 %v1_95e0, %v3_95e0
  %v5_95e0 = icmp slt i32 %v4_95e0, 0
  store i1 %v5_95e0, i1* %cpsr_v.global-to-local, align 1
  %v6_95e0 = icmp slt i32 %v1_95e0, 0
  store i1 %v6_95e0, i1* %cpsr_n.global-to-local, align 1
  %v7_95e0 = icmp eq i32 %v1_95e0, 0
  store i1 %v7_95e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95e0, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_95e8 = load i32, i32* @r8, align 4
  %v3_95e8 = add i32 %v2_95e8, -4
  %v4_95e8 = inttoptr i32 %v3_95e8 to i32*
  store i32 1, i32* %v4_95e8, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_95ec = load i32, i32* @r5, align 4
  store i32 %v0_95ec, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_95f4 = load i32, i32* @r8, align 4
  %v2_95f4 = inttoptr i32 %v1_95f4 to i32*
  store i32 %v0_95ec, i32* %v2_95f4, align 4
  %v2_95f8 = inttoptr i32 %v0_95ec to i32*
  %v3_95f8 = call i32 @function_114b4(i32 51, i32* %v2_95f8)
  %v0_95fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_95fc, i32* @r1, align 4
  store i32 %v3_95f8, i32* %r2.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v4_9608 = call i32 @function_123a0(i8* %tmp199, i32 %v0_95fc, i32 %v3_95f8)
  store i32 %v4_9608, i32* %r0.global-to-local, align 4
  %v1_960c = add i32 %v4_9608, 1
  %v2_960c = icmp eq i32 %v4_9608, -1
  store i1 %v2_960c, i1* %cpsr_c.global-to-local, align 1
  %v3_960c = sub i32 0, %v4_9608
  %v4_960c = and i32 %v1_960c, %v3_960c
  %v5_960c = icmp slt i32 %v4_960c, 0
  store i1 %v5_960c, i1* %cpsr_v.global-to-local, align 1
  %v6_960c = icmp slt i32 %v1_960c, 0
  store i1 %v6_960c, i1* %cpsr_n.global-to-local, align 1
  %v7_960c = icmp eq i32 %v1_960c, 0
  store i1 %v7_960c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_960c, label %.thread47, label %dec_label_pc_9614

dec_label_pc_9614:                                ; preds = %.thread46
  %v0_9614 = load i32, i32* @r5, align 4
  store i32 %v0_9614, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v2_961c = inttoptr i32 %v0_9614 to i32*
  %v3_961c = call i32 @function_114b4(i32 51, i32* %v2_961c)
  %v0_9620 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9620, i32* @r1, align 4
  store i32 %v3_961c, i32* %r2.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v4_962c = call i32 @function_123a0(i8* %tmp199, i32 %v0_9620, i32 %v3_961c)
  store i32 %v4_962c, i32* %r0.global-to-local, align 4
  store i32 %v2_8e9c, i32* %lr.global-to-local, align 4
  %v2_9638 = add i32 %v4_962c, %v2_8e9c
  store i32 %v2_9638, i32* %r3.global-to-local, align 4
  %v1_963c = load i32, i32* @r6, align 4
  %v2_963c = add i32 %v1_963c, %v2_9638
  %v3_963c = inttoptr i32 %v2_963c to i8*
  %v4_963c = load i8, i8* %v3_963c, align 1
  %v2_9644 = icmp ugt i8 %v4_963c, 31
  store i1 %v2_9644, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9644 = icmp ult i8 %v4_963c, 32
  store i1 %v6_9644, i1* %cpsr_n.global-to-local, align 1
  %v7_9644 = icmp eq i8 %v4_963c, 32
  store i1 %v7_9644, i1* %cpsr_z.global-to-local, align 1
  %v2_964c = zext i1 %v7_9644 to i32
  %v2_964c.v4_962c = add i32 %v2_964c, %v4_962c
  store i32 %v2_964c.v4_962c, i32* @r4, align 4
  %v2_9650 = add i32 %v2_964c.v4_962c, %v2_89d4
  store i32 %v2_9650, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9650, i32* %r0.global-to-local, align 4
  %v1_965c = load i32, i32* %fp.global-to-local, align 4
  %v2_965c = sub i32 %v1_965c, %v2_964c.v4_962c
  store i32 %v2_965c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9664 = call i32 @function_12110(i32 %v2_9650, i32 %v2_965c, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32 2)
  store i32 %v5_9664, i32* %r0.global-to-local, align 4
  %v1_9668 = add i32 %v5_9664, 1
  %v2_9668 = icmp eq i32 %v5_9664, -1
  store i1 %v2_9668, i1* %cpsr_c.global-to-local, align 1
  %v3_9668 = sub i32 0, %v5_9664
  %v4_9668 = and i32 %v1_9668, %v3_9668
  %v5_9668 = icmp slt i32 %v4_9668, 0
  store i1 %v5_9668, i1* %cpsr_v.global-to-local, align 1
  %v6_9668 = icmp slt i32 %v1_9668, 0
  store i1 %v6_9668, i1* %cpsr_n.global-to-local, align 1
  %v7_9668 = icmp eq i32 %v1_9668, 0
  store i1 %v7_9668, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_9664, i32* %r2.global-to-local, align 4
  br i1 %v7_9668, label %.thread47, label %dec_label_pc_9674

dec_label_pc_9674:                                ; preds = %dec_label_pc_9614
  store i32 %v2_8e9c, i32* %ip.global-to-local, align 4
  %v1_967c = load i32, i32* @r4, align 4
  %v2_967c = add i32 %v1_967c, %v2_8e9c
  %v1_9680 = add i32 %v5_9664, -1
  %v2_9680 = icmp ne i32 %v5_9664, 0
  store i1 %v2_9680, i1* %cpsr_c.global-to-local, align 1
  %v3_9680 = sub i32 0, %v5_9664
  %v4_9680 = and i32 %v5_9664, %v3_9680
  %v5_9680 = icmp slt i32 %v4_9680, 0
  store i1 %v5_9680, i1* %cpsr_v.global-to-local, align 1
  %v6_9680 = icmp slt i32 %v1_9680, 0
  store i1 %v6_9680, i1* %cpsr_n.global-to-local, align 1
  %v7_9680 = icmp eq i32 %v5_9664, 1
  store i1 %v7_9680, i1* %cpsr_z.global-to-local, align 1
  %v1_9684 = add i32 %v2_967c, -20736
  store i32 %v1_9684, i32* %r3.global-to-local, align 4
  %v7_9688 = icmp sgt i32 %v5_9664, 1
  br i1 %v7_9688, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_9674
  %v9_9688 = add i32 %v5_9664, -2
  store i32 %v9_9688, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_9674, %bb213
  %v3_9690 = phi i32 [ %v5_9664, %dec_label_pc_9674 ], [ %v9_9688, %bb213 ]
  %v1_968c = add i32 %v2_967c, -20773
  store i32 %v1_968c, i32* %r3.global-to-local, align 4
  %v0_9690 = load i32, i32* @r5, align 4
  %v1_9690 = trunc i32 %v0_9690 to i8
  %v4_9690 = add i32 %v3_9690, %v1_968c
  %v5_9690 = inttoptr i32 %v4_9690 to i8*
  store i8 %v1_9690, i8* %v5_9690, align 1
  %v0_9694 = load i32, i32* @r6, align 4
  store i32 %v0_9694, i32* %r0.global-to-local, align 4
  %v1_9698 = inttoptr i32 %v0_9694 to i8*
  %v2_9698 = call i32 @function_1204c(i8* %v1_9698)
  %v0_969c = load i32, i32* @r5, align 4
  store i32 %v0_969c, i32* %r1.global-to-local, align 4
  store i32 %v2_9698, i32* @r4, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v2_96a8 = inttoptr i32 %v0_969c to i32*
  %v3_96a8 = call i32 @function_114b4(i32 50, i32* %v2_96a8)
  %v0_96ac = load i32, i32* @r4, align 4
  store i32 %v0_96ac, i32* @r1, align 4
  store i32 %v3_96a8, i32* %r2.global-to-local, align 4
  %v0_96b4 = load i32, i32* @r6, align 4
  store i32 %v0_96b4, i32* %r0.global-to-local, align 4
  %v3_96b8 = inttoptr i32 %v0_96b4 to i8*
  %v4_96b8 = call i32 @function_123a0(i8* %v3_96b8, i32 %v0_96ac, i32 %v3_96a8)
  store i32 %v4_96b8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_96bc = icmp slt i32 %v4_96b8, 0
  store i1 %v1_96bc, i1* %cpsr_n.global-to-local, align 1
  %v2_96bc = icmp eq i32 %v4_96b8, 0
  store i1 %v2_96bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_96bc, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_96c4 = load i32, i32* @r8, align 4
  %v3_96c4 = inttoptr i32 %v2_96c4 to i32*
  store i32 1, i32* %v3_96c4, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_9614, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_96d4 = load i32, i32* @r8, align 4
  %v2_96d4 = add i32 %v1_96d4, 4
  %v3_96d4 = inttoptr i32 %v2_96d4 to i32*
  store i32 0, i32* %v3_96d4, align 4
  %v3_96d8 = call i32 @function_114b4(i32 48, i32* null)
  %v0_96dc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96dc, i32* @r1, align 4
  store i32 %v3_96d8, i32* %r2.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v4_96e8 = call i32 @function_123a0(i8* %tmp199, i32 %v0_96dc, i32 %v3_96d8)
  store i32 %v4_96e8, i32* %r0.global-to-local, align 4
  %v1_96f0 = add i32 %v4_96e8, 1
  %v2_96f0 = icmp eq i32 %v4_96e8, -1
  store i1 %v2_96f0, i1* %cpsr_c.global-to-local, align 1
  %v3_96f0 = sub i32 0, %v4_96e8
  %v4_96f0 = and i32 %v1_96f0, %v3_96f0
  %v5_96f0 = icmp slt i32 %v4_96f0, 0
  store i1 %v5_96f0, i1* %cpsr_v.global-to-local, align 1
  %v6_96f0 = icmp slt i32 %v1_96f0, 0
  store i1 %v6_96f0, i1* %cpsr_n.global-to-local, align 1
  %v7_96f0 = icmp eq i32 %v1_96f0, 0
  store i1 %v7_96f0, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_96f0, label %.thread48, label %dec_label_pc_96fc

dec_label_pc_96fc:                                ; preds = %.thread47
  %v0_96fc = load i32, i32* @r6, align 4
  store i32 %v0_96fc, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v2_9704 = inttoptr i32 %v0_96fc to i32*
  %v3_9704 = call i32 @function_114b4(i32 48, i32* %v2_9704)
  %v0_9708 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9708, i32* @r1, align 4
  store i32 %v3_9704, i32* %r2.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v4_9714 = call i32 @function_123a0(i8* %tmp199, i32 %v0_9708, i32 %v3_9704)
  store i32 %v4_9714, i32* %r0.global-to-local, align 4
  store i32 %v2_8e9c, i32* %lr.global-to-local, align 4
  %v2_9720 = add i32 %v4_9714, %v2_8e9c
  store i32 %v2_9720, i32* %r3.global-to-local, align 4
  %v1_9724 = load i32, i32* @r5, align 4
  %v2_9724 = add i32 %v1_9724, %v2_9720
  %v3_9724 = inttoptr i32 %v2_9724 to i8*
  %v4_9724 = load i8, i8* %v3_9724, align 1
  %v2_972c = icmp ugt i8 %v4_9724, 31
  store i1 %v2_972c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_972c = icmp ult i8 %v4_9724, 32
  store i1 %v6_972c, i1* %cpsr_n.global-to-local, align 1
  %v7_972c = icmp eq i8 %v4_9724, 32
  store i1 %v7_972c, i1* %cpsr_z.global-to-local, align 1
  %v2_9734 = zext i1 %v7_972c to i32
  %v2_9734.v4_9714 = add i32 %v2_9734, %v4_9714
  store i32 %v2_9734.v4_9714, i32* @r4, align 4
  %v2_9738 = add i32 %v2_9734.v4_9714, %v2_89d4
  store i32 %v2_9738, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9738, i32* %r0.global-to-local, align 4
  %v1_9744 = load i32, i32* %fp.global-to-local, align 4
  %v2_9744 = sub i32 %v1_9744, %v2_9734.v4_9714
  store i32 %v2_9744, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_974c = call i32 @function_12110(i32 %v2_9738, i32 %v2_9744, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32 2)
  store i32 %v5_974c, i32* %r0.global-to-local, align 4
  %v1_9750 = add i32 %v5_974c, 1
  %v2_9750 = icmp eq i32 %v5_974c, -1
  store i1 %v2_9750, i1* %cpsr_c.global-to-local, align 1
  %v3_9750 = sub i32 0, %v5_974c
  %v4_9750 = and i32 %v1_9750, %v3_9750
  %v5_9750 = icmp slt i32 %v4_9750, 0
  store i1 %v5_9750, i1* %cpsr_v.global-to-local, align 1
  %v6_9750 = icmp slt i32 %v1_9750, 0
  store i1 %v6_9750, i1* %cpsr_n.global-to-local, align 1
  %v7_9750 = icmp eq i32 %v1_9750, 0
  store i1 %v7_9750, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_974c, i32* %r2.global-to-local, align 4
  br i1 %v7_9750, label %.thread48, label %dec_label_pc_975c

dec_label_pc_975c:                                ; preds = %dec_label_pc_96fc
  store i32 %v2_8e9c, i32* %ip.global-to-local, align 4
  %v1_9764 = load i32, i32* @r4, align 4
  %v2_9764 = add i32 %v1_9764, %v2_8e9c
  %v1_9768 = add i32 %v5_974c, -1
  %v2_9768 = icmp ne i32 %v5_974c, 0
  store i1 %v2_9768, i1* %cpsr_c.global-to-local, align 1
  %v3_9768 = sub i32 0, %v5_974c
  %v4_9768 = and i32 %v5_974c, %v3_9768
  %v5_9768 = icmp slt i32 %v4_9768, 0
  store i1 %v5_9768, i1* %cpsr_v.global-to-local, align 1
  %v6_9768 = icmp slt i32 %v1_9768, 0
  store i1 %v6_9768, i1* %cpsr_n.global-to-local, align 1
  %v7_9768 = icmp eq i32 %v5_974c, 1
  store i1 %v7_9768, i1* %cpsr_z.global-to-local, align 1
  %v1_976c = add i32 %v2_9764, -20736
  store i32 %v1_976c, i32* %r3.global-to-local, align 4
  %v7_9770 = icmp sgt i32 %v5_974c, 1
  br i1 %v7_9770, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_975c
  %v9_9770 = add i32 %v5_974c, -2
  store i32 %v9_9770, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_975c, %bb216
  %v3_9778 = phi i32 [ %v5_974c, %dec_label_pc_975c ], [ %v9_9770, %bb216 ]
  %v1_9774 = add i32 %v2_9764, -20773
  store i32 %v1_9774, i32* %r3.global-to-local, align 4
  %v0_9778 = load i32, i32* @r6, align 4
  %v1_9778 = trunc i32 %v0_9778 to i8
  %v4_9778 = add i32 %v3_9778, %v1_9774
  %v5_9778 = inttoptr i32 %v4_9778 to i8*
  store i8 %v1_9778, i8* %v5_9778, align 1
  %v0_977c = load i32, i32* @r5, align 4
  store i32 %v0_977c, i32* %r0.global-to-local, align 4
  %v1_9780 = inttoptr i32 %v0_977c to i8*
  %v2_9780 = call i32 @function_1204c(i8* %v1_9780)
  %v0_9784 = load i32, i32* @r6, align 4
  store i32 %v0_9784, i32* %r1.global-to-local, align 4
  store i32 %v2_9780, i32* @r4, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v2_9790 = inttoptr i32 %v0_9784 to i32*
  %v3_9790 = call i32 @function_114b4(i32 49, i32* %v2_9790)
  %v0_9794 = load i32, i32* @r4, align 4
  store i32 %v0_9794, i32* @r1, align 4
  store i32 %v3_9790, i32* %r2.global-to-local, align 4
  %v0_979c = load i32, i32* @r5, align 4
  store i32 %v0_979c, i32* %r0.global-to-local, align 4
  %v3_97a0 = inttoptr i32 %v0_979c to i8*
  %v4_97a0 = call i32 @function_123a0(i8* %v3_97a0, i32 %v0_9794, i32 %v3_9790)
  store i32 %v4_97a0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_97a4 = icmp slt i32 %v4_97a0, 0
  store i1 %v1_97a4, i1* %cpsr_n.global-to-local, align 1
  %v2_97a4 = icmp eq i32 %v4_97a0, 0
  store i1 %v2_97a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_97a4, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_97ac = load i32, i32* @r8, align 4
  %v3_97ac = add i32 %v2_97ac, 4
  %v4_97ac = inttoptr i32 %v3_97ac to i32*
  store i32 1, i32* %v4_97ac, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_96fc, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_97b8 = call i32 @function_114b4(i32 47, i32* null)
  %v0_97bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_97bc, i32* @r1, align 4
  store i32 %v3_97b8, i32* %r2.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v4_97c8 = call i32 @function_123a0(i8* %tmp199, i32 %v0_97bc, i32 %v3_97b8)
  store i32 %v4_97c8, i32* %r0.global-to-local, align 4
  %v1_97cc = add i32 %v4_97c8, 1
  %v2_97cc = icmp eq i32 %v4_97c8, -1
  store i1 %v2_97cc, i1* %cpsr_c.global-to-local, align 1
  %v3_97cc = sub i32 0, %v4_97c8
  %v4_97cc = and i32 %v1_97cc, %v3_97cc
  %v5_97cc = icmp slt i32 %v4_97cc, 0
  store i1 %v5_97cc, i1* %cpsr_v.global-to-local, align 1
  %v6_97cc = icmp slt i32 %v1_97cc, 0
  store i1 %v6_97cc, i1* %cpsr_n.global-to-local, align 1
  %v7_97cc = icmp eq i32 %v1_97cc, 0
  store i1 %v7_97cc, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_97cc, label %.thread, label %dec_label_pc_97e4

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_97dc = load i32, i32* @r8, align 4
  %v3_97dc = add i32 %v2_97dc, 8
  %v4_97dc = inttoptr i32 %v3_97dc to i32*
  store i32 0, i32* %v4_97dc, align 4
  br label %dec_label_pc_9878

dec_label_pc_97e4:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_97ec = call i32 @function_114b4(i32 47, i32* null)
  %v0_97f0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_97f0, i32* @r1, align 4
  store i32 %v3_97ec, i32* %r2.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v4_97fc = call i32 @function_123a0(i8* %tmp199, i32 %v0_97f0, i32 %v3_97ec)
  store i32 %v4_97fc, i32* %r0.global-to-local, align 4
  store i32 %v2_8e9c, i32* %lr.global-to-local, align 4
  %v2_9808 = add i32 %v4_97fc, %v2_8e9c
  store i32 %v2_9808, i32* %r3.global-to-local, align 4
  %v1_980c = load i32, i32* @r5, align 4
  %v2_980c = add i32 %v1_980c, %v2_9808
  %v3_980c = inttoptr i32 %v2_980c to i8*
  %v4_980c = load i8, i8* %v3_980c, align 1
  %v2_9814 = icmp ugt i8 %v4_980c, 31
  store i1 %v2_9814, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9814 = icmp ult i8 %v4_980c, 32
  store i1 %v6_9814, i1* %cpsr_n.global-to-local, align 1
  %v7_9814 = icmp eq i8 %v4_980c, 32
  store i1 %v7_9814, i1* %cpsr_z.global-to-local, align 1
  %v2_981c = zext i1 %v7_9814 to i32
  %v2_981c.v4_97fc = add i32 %v2_981c, %v4_97fc
  store i32 %v2_981c.v4_97fc, i32* @r4, align 4
  %v2_9820 = add i32 %v2_981c.v4_97fc, %v2_89d4
  store i32 %v2_9820, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9820, i32* %r0.global-to-local, align 4
  %v1_982c = load i32, i32* %fp.global-to-local, align 4
  %v2_982c = sub i32 %v1_982c, %v2_981c.v4_97fc
  store i32 %v2_982c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9834 = call i32 @function_12110(i32 %v2_9820, i32 %v2_982c, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32 2)
  store i32 %v5_9834, i32* %r0.global-to-local, align 4
  %v1_9838 = add i32 %v5_9834, 1
  %v2_9838 = icmp eq i32 %v5_9834, -1
  store i1 %v2_9838, i1* %cpsr_c.global-to-local, align 1
  %v3_9838 = sub i32 0, %v5_9834
  %v4_9838 = and i32 %v1_9838, %v3_9838
  %v5_9838 = icmp slt i32 %v4_9838, 0
  store i1 %v5_9838, i1* %cpsr_v.global-to-local, align 1
  %v6_9838 = icmp slt i32 %v1_9838, 0
  store i1 %v6_9838, i1* %cpsr_n.global-to-local, align 1
  %v7_9838 = icmp eq i32 %v1_9838, 0
  store i1 %v7_9838, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_9834, i32* %r2.global-to-local, align 4
  br i1 %v7_9838, label %dec_label_pc_9878, label %dec_label_pc_9844

dec_label_pc_9844:                                ; preds = %dec_label_pc_97e4
  store i32 %v2_8e9c, i32* %ip.global-to-local, align 4
  %v1_984c = load i32, i32* @r4, align 4
  %v2_984c = add i32 %v1_984c, %v2_8e9c
  %v1_9850 = add i32 %v5_9834, -1
  %v2_9850 = icmp ne i32 %v5_9834, 0
  store i1 %v2_9850, i1* %cpsr_c.global-to-local, align 1
  %v3_9850 = sub i32 0, %v5_9834
  %v4_9850 = and i32 %v5_9834, %v3_9850
  %v5_9850 = icmp slt i32 %v4_9850, 0
  store i1 %v5_9850, i1* %cpsr_v.global-to-local, align 1
  %v6_9850 = icmp slt i32 %v1_9850, 0
  store i1 %v6_9850, i1* %cpsr_n.global-to-local, align 1
  %v7_9850 = icmp eq i32 %v5_9834, 1
  store i1 %v7_9850, i1* %cpsr_z.global-to-local, align 1
  %v1_9854 = add i32 %v2_984c, -20736
  store i32 %v1_9854, i32* %r3.global-to-local, align 4
  %v7_9858 = icmp sgt i32 %v5_9834, 1
  br i1 %v7_9858, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_9844
  %v9_9858 = add i32 %v5_9834, -2
  store i32 %v9_9858, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_9844, %bb219
  %v3_986c = phi i32 [ %v5_9834, %dec_label_pc_9844 ], [ %v9_9858, %bb219 ]
  %v1_985c = add i32 %v2_984c, -20773
  store i32 %v1_985c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_9864 = load i32, i32* @r5, align 4
  store i32 %v0_9864, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_986c = add i32 %v3_986c, %v1_985c
  %v5_986c = inttoptr i32 %v4_986c to i8*
  store i8 0, i8* %v5_986c, align 1
  %v2_9870 = inttoptr i32 %v0_9864 to i8*
  %v3_9870 = call i32 @function_12178(i8* %v2_9870, i32 10)
  store i32 %v3_9870, i32* %r0.global-to-local, align 4
  %v1_9874 = load i32, i32* @r8, align 4
  %v2_9874 = add i32 %v1_9874, 8
  %v3_9874 = inttoptr i32 %v2_9874 to i32*
  store i32 %v3_9870, i32* %v3_9874, align 4
  br label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %.thread, %dec_label_pc_97e4, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_987c

dec_label_pc_987c:                                ; preds = %dec_label_pc_9a50, %dec_label_pc_99d0, %dec_label_pc_9878
  %v1_9888 = phi i32 [ 0, %dec_label_pc_9878 ], [ %v0_99d0, %dec_label_pc_99d0 ], [ %v1_9888.pre.pre, %dec_label_pc_9a50 ]
  store i32 %v2_89d4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_9888 = add i32 %v1_9888, %v2_89d4
  store i32 %v2_9888, i32* @r4, align 4
  %v3_988c = call i32 @function_114b4(i32 46, i32* null)
  %v0_9890 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9890, i32* @r1, align 4
  store i32 %v3_988c, i32* %r2.global-to-local, align 4
  %v0_9898 = load i32, i32* @r4, align 4
  store i32 %v0_9898, i32* %r0.global-to-local, align 4
  %v3_989c = inttoptr i32 %v0_9898 to i8*
  %v4_989c = call i32 @function_123a0(i8* %v3_989c, i32 %v0_9890, i32 %v3_988c)
  store i32 %v4_989c, i32* %r0.global-to-local, align 4
  %v1_98a4 = add i32 %v4_989c, 1
  %v2_98a4 = icmp eq i32 %v4_989c, -1
  store i1 %v2_98a4, i1* %cpsr_c.global-to-local, align 1
  %v3_98a4 = sub i32 0, %v4_989c
  %v4_98a4 = and i32 %v1_98a4, %v3_98a4
  %v5_98a4 = icmp slt i32 %v4_98a4, 0
  store i1 %v5_98a4, i1* %cpsr_v.global-to-local, align 1
  %v6_98a4 = icmp slt i32 %v1_98a4, 0
  store i1 %v6_98a4, i1* %cpsr_n.global-to-local, align 1
  %v7_98a4 = icmp eq i32 %v1_98a4, 0
  store i1 %v7_98a4, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_98a4, label %dec_label_pc_9a7c, label %dec_label_pc_98b0

dec_label_pc_98b0:                                ; preds = %dec_label_pc_987c
  %v0_98b0 = load i32, i32* @r8, align 4
  %v1_98b0 = add i32 %v0_98b0, 12
  %v2_98b0 = inttoptr i32 %v1_98b0 to i32*
  %v3_98b0 = load i32, i32* %v2_98b0, align 4
  store i32 %v3_98b0, i32* %r3.global-to-local, align 4
  %v1_98b4 = add i32 %v3_98b0, -4
  %v2_98b4 = icmp ugt i32 %v3_98b0, 3
  store i1 %v2_98b4, i1* %cpsr_c.global-to-local, align 1
  %v3_98b4 = sub i32 3, %v3_98b0
  %v4_98b4 = and i32 %v3_98b4, %v3_98b0
  %v5_98b4 = icmp slt i32 %v4_98b4, 0
  store i1 %v5_98b4, i1* %cpsr_v.global-to-local, align 1
  %v6_98b4 = icmp slt i32 %v1_98b4, 0
  store i1 %v6_98b4, i1* %cpsr_n.global-to-local, align 1
  %v7_98b4 = icmp eq i32 %v3_98b0, 4
  store i1 %v7_98b4, i1* %cpsr_z.global-to-local, align 1
  %v8_98b8 = icmp sgt i32 %v3_98b0, 4
  br i1 %v8_98b8, label %dec_label_pc_9a7c, label %dec_label_pc_98bc

dec_label_pc_98bc:                                ; preds = %dec_label_pc_98b0
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v3_98c4 = call i32 @function_114b4(i32 46, i32* null)
  %v0_98c8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c8, i32* @r1, align 4
  store i32 %v3_98c4, i32* %r2.global-to-local, align 4
  %v0_98d0 = load i32, i32* @r4, align 4
  store i32 %v0_98d0, i32* %r0.global-to-local, align 4
  %v3_98d4 = inttoptr i32 %v0_98d0 to i8*
  %v4_98d4 = call i32 @function_123a0(i8* %v3_98d4, i32 %v0_98c8, i32 %v3_98c4)
  store i32 %v4_98d4, i32* %r0.global-to-local, align 4
  %v0_98dc = load i32, i32* @r5, align 4
  %v2_98dc = add i32 %v0_98dc, %v4_98d4
  store i32 %v2_98dc, i32* @sl, align 4
  store i32 %v2_8e9c, i32* %r1.global-to-local, align 4
  %v2_98e4 = add i32 %v2_98dc, %v2_8e9c
  store i32 %v2_98e4, i32* %r3.global-to-local, align 4
  %v1_98e8 = load i32, i32* @r6, align 4
  %v2_98e8 = add i32 %v1_98e8, %v2_98e4
  %v3_98e8 = inttoptr i32 %v2_98e8 to i8*
  %v4_98e8 = load i8, i8* %v3_98e8, align 1
  %v6_98e8 = zext i8 %v4_98e8 to i32
  store i32 %v6_98e8, i32* %r2.global-to-local, align 4
  %v2_98ec = icmp ugt i8 %v4_98e8, 31
  store i1 %v2_98ec, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_98ec = icmp ult i8 %v4_98e8, 32
  store i1 %v6_98ec, i1* %cpsr_n.global-to-local, align 1
  %v7_98ec = icmp eq i8 %v4_98e8, 32
  store i1 %v7_98ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_98ec, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_98bc
  %v2_98f0 = add i32 %v4_98d4, 1
  store i32 %v2_98f0, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_98bc, %bb221
  %v2_9900 = phi i32 [ %v4_98d4, %dec_label_pc_98bc ], [ %v2_98f0, %bb221 ]
  %v1_98f4 = load i32, i32* %fp.global-to-local, align 4
  %v2_98f4 = sub i32 %v1_98f4, %v0_98dc
  store i32 %v2_98f4, i32* %r3.global-to-local, align 4
  %v2_98f8 = sub i32 %v2_98f4, %v2_9900
  store i32 %v2_98f8, i32* @r7, align 4
  %v0_98fc = load i32, i32* @r4, align 4
  %v2_98fc = add i32 %v0_98fc, %v2_9900
  store i32 %v2_98fc, i32* @r6, align 4
  br i1 %v7_98ec, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_9900 = add i32 %v2_9900, %v0_98dc
  store i32 %v3_9900, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_98f8, i32* %r1.global-to-local, align 4
  store i32 %v2_98fc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9914 = call i32 @function_12110(i32 %v2_98fc, i32 %v2_98f8, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32 2)
  store i32 %v5_9914, i32* %r0.global-to-local, align 4
  %v1_9918 = add i32 %v5_9914, 1
  %v2_9918 = icmp eq i32 %v5_9914, -1
  store i1 %v2_9918, i1* %cpsr_c.global-to-local, align 1
  %v3_9918 = sub i32 0, %v5_9914
  %v4_9918 = and i32 %v1_9918, %v3_9918
  %v5_9918 = icmp slt i32 %v4_9918, 0
  store i1 %v5_9918, i1* %cpsr_v.global-to-local, align 1
  %v6_9918 = icmp slt i32 %v1_9918, 0
  store i1 %v6_9918, i1* %cpsr_n.global-to-local, align 1
  %v7_9918 = icmp eq i32 %v1_9918, 0
  store i1 %v7_9918, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_9914, i32* @r4, align 4
  br i1 %v7_9918, label %dec_label_pc_99d0, label %dec_label_pc_9924

dec_label_pc_9924:                                ; preds = %bb224
  store i32 %v2_89d4, i32* %r2.global-to-local, align 4
  %v1_9928 = add i32 %v5_9914, -1
  %v2_9928 = icmp ne i32 %v5_9914, 0
  store i1 %v2_9928, i1* %cpsr_c.global-to-local, align 1
  %v3_9928 = sub i32 0, %v5_9914
  %v4_9928 = and i32 %v5_9914, %v3_9928
  %v5_9928 = icmp slt i32 %v4_9928, 0
  store i1 %v5_9928, i1* %cpsr_v.global-to-local, align 1
  %v6_9928 = icmp slt i32 %v1_9928, 0
  store i1 %v6_9928, i1* %cpsr_n.global-to-local, align 1
  %v7_9928 = icmp eq i32 %v5_9914, 1
  store i1 %v7_9928, i1* %cpsr_z.global-to-local, align 1
  %v7_992c = icmp slt i32 %v5_9914, 2
  br i1 %v7_992c, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_9924
  %v9_992c = add i32 %v5_9914, -2
  store i32 %v9_992c, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_9924, %bb225
  %v1_9930 = load i32, i32* @sl, align 4
  %v2_9930 = add i32 %v1_9930, %v2_89d4
  store i32 %v2_9930, i32* @r5, align 4
  %v0_9934 = load i32, i32* @r6, align 4
  store i32 %v0_9934, i32* %r0.global-to-local, align 4
  %v0_9938 = load i32, i32* @r7, align 4
  store i32 %v0_9938, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15104.68 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_9944 = call i32 @function_12110(i32 %v0_9934, i32 %v0_9938, i32 ptrtoint (i32* @global_var_15104.68 to i32), i32 1)
  store i32 %v4_9944, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9948 = icmp slt i32 %v4_9944, 0
  store i1 %v1_9948, i1* %cpsr_n.global-to-local, align 1
  %v2_9948 = icmp eq i32 %v4_9944, 0
  store i1 %v2_9948, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_9944, 1
  br i1 %tmp227, label %.dec_label_pc_9968_crit_edge, label %dec_label_pc_9950

.dec_label_pc_9968_crit_edge:                     ; preds = %bb226
  %v1_9970.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9968

dec_label_pc_9950:                                ; preds = %bb226
  %v0_9950 = load i32, i32* @r6, align 4
  store i32 %v0_9950, i32* %r0.global-to-local, align 4
  %v0_9954 = load i32, i32* @r7, align 4
  store i32 %v0_9954, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15104.68 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_9960 = call i32 @function_12110(i32 %v0_9950, i32 %v0_9954, i32 ptrtoint (i32* @global_var_15104.68 to i32), i32 1)
  store i32 %v4_9960, i32* %r0.global-to-local, align 4
  %v1_9964 = add i32 %v4_9960, -1
  store i32 %v1_9964, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9968

dec_label_pc_9968:                                ; preds = %.dec_label_pc_9968_crit_edge, %dec_label_pc_9950
  %v1_9970 = phi i32 [ %v1_9970.pre, %.dec_label_pc_9968_crit_edge ], [ %v1_9964, %dec_label_pc_9950 ]
  store i32 %v2_8e9c, i32* %ip.global-to-local, align 4
  %v1_9978 = add i32 %v2_9970, %v1_9970
  store i32 %v1_9978, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_8a44, i32* %r1.global-to-local, align 4
  %v3_9988 = load i32, i32* @sl, align 4
  %v4_9988 = add i32 %v3_9988, %v1_9978
  %v5_9988 = inttoptr i32 %v4_9988 to i8*
  store i8 0, i8* %v5_9988, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_99a8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_99a8

dec_label_pc_9994:                                ; preds = %dec_label_pc_99a8
  br i1 %v7_9998, label %dec_label_pc_99d8, label %dec_label_pc_99a0

dec_label_pc_99a0:                                ; preds = %dec_label_pc_9994
  store i32 %v10_8a44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99a8

dec_label_pc_99a8:                                ; preds = %dec_label_pc_9968, %dec_label_pc_99a0
  %v0_99a8 = phi i32 [ %v0_9994, %dec_label_pc_99a0 ], [ %v0_99a8.pre, %dec_label_pc_9968 ]
  %storemerge4 = phi i32 [ %v1_99bc, %dec_label_pc_99a0 ], [ %storemerge4.pre, %dec_label_pc_9968 ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_99a8, i32* %r0.global-to-local, align 4
  %v1_99ac = inttoptr i32 %v0_99a8 to i8*
  %v2_99ac = call i32 @function_1204c(i8* %v1_99ac)
  store i32 %v2_99ac, i32* %r0.global-to-local, align 4
  %v3_99b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_99b4, i32* %r4.global-to-local, align 4
  %v2_99b8 = sub i32 %v2_99ac, %v3_99b4
  %v3_99b8 = icmp uge i32 %v2_99ac, %v3_99b4
  store i1 %v3_99b8, i1* %cpsr_c.global-to-local, align 1
  %v4_99b8 = xor i32 %v3_99b4, %v2_99ac
  %v5_99b8 = xor i32 %v2_99b8, %v2_99ac
  %v6_99b8 = and i32 %v5_99b8, %v4_99b8
  %v7_99b8 = icmp slt i32 %v6_99b8, 0
  store i1 %v7_99b8, i1* %cpsr_v.global-to-local, align 1
  %v8_99b8 = icmp slt i32 %v2_99b8, 0
  store i1 %v8_99b8, i1* %cpsr_n.global-to-local, align 1
  %v9_99b8 = icmp eq i32 %v2_99ac, %v3_99b4
  store i1 %v9_99b8, i1* %cpsr_z.global-to-local, align 1
  %v1_99bc = add i32 %v3_99b4, 1
  store i32 %v1_99bc, i32* %ip.global-to-local, align 4
  %v8_99c0 = icmp sgt i32 %v2_99ac, %v3_99b4
  %v0_9994 = load i32, i32* @r5, align 4
  %v2_9994 = add i32 %v0_9994, %v3_99b4
  %v3_9994 = inttoptr i32 %v2_9994 to i8*
  %v4_9994 = load i8, i8* %v3_9994, align 1
  %v6_9994 = zext i8 %v4_9994 to i32
  store i32 %v6_9994, i32* %r3.global-to-local, align 4
  %v2_9998 = icmp ugt i8 %v4_9994, 60
  store i1 %v2_9998, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9998 = icmp ult i8 %v4_9994, 61
  store i1 %v6_9998, i1* %cpsr_n.global-to-local, align 1
  %v7_9998 = icmp eq i8 %v4_9994, 61
  store i1 %v7_9998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_99c0, label %dec_label_pc_9994, label %dec_label_pc_99c4

dec_label_pc_99c4:                                ; preds = %dec_label_pc_99a8
  br i1 %v7_9998, label %dec_label_pc_99d8, label %dec_label_pc_99d0

dec_label_pc_99d0:                                ; preds = %dec_label_pc_9a1c, %dec_label_pc_9a40, %dec_label_pc_99c4, %bb224
  %v0_99d0 = load i32, i32* @sl, align 4
  store i32 %v0_99d0, i32* @r5, align 4
  br label %dec_label_pc_987c

dec_label_pc_99d8:                                ; preds = %dec_label_pc_9994, %dec_label_pc_99c4
  %v0_99d8 = load i32, i32* @r8, align 4
  %v1_99d8 = add i32 %v0_99d8, 12
  %v2_99d8 = inttoptr i32 %v1_99d8 to i32*
  %v3_99d8 = load i32, i32* %v2_99d8, align 4
  store i32 %v3_99d8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_8a44, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_99e4 = icmp slt i32 %v3_99d8, 0
  store i1 %v1_99e4, i1* %cpsr_n.global-to-local, align 1
  %v2_99e4 = icmp eq i32 %v3_99d8, 0
  store i1 %v2_99e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_99d8, 1
  br i1 %tmp228, label %dec_label_pc_9a40, label %dec_label_pc_99f0

dec_label_pc_99f0:                                ; preds = %dec_label_pc_99d8
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9a1c

dec_label_pc_99f8:                                ; preds = %dec_label_pc_9a1c
  store i32 %v10_8a44, i32* %r1.global-to-local, align 4
  %v3_99fc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_99fc, i32* %r3.global-to-local, align 4
  %v0_9a00 = load i32, i32* @r8, align 4
  %v1_9a00 = add i32 %v0_9a00, 12
  %v2_9a00 = inttoptr i32 %v1_9a00 to i32*
  %v3_9a00 = load i32, i32* %v2_9a00, align 4
  %v1_9a04 = add i32 %v3_99fc, 1
  store i32 %v1_9a04, i32* %ip.global-to-local, align 4
  %v2_9a08 = sub i32 %v3_9a00, %v1_9a04
  %v3_9a08 = icmp uge i32 %v3_9a00, %v1_9a04
  store i1 %v3_9a08, i1* %cpsr_c.global-to-local, align 1
  %v4_9a08 = xor i32 %v3_9a00, %v1_9a04
  %v5_9a08 = xor i32 %v2_9a08, %v3_9a00
  %v6_9a08 = and i32 %v5_9a08, %v4_9a08
  %v7_9a08 = icmp slt i32 %v6_9a08, 0
  store i1 %v7_9a08, i1* %cpsr_v.global-to-local, align 1
  %v8_9a08 = icmp slt i32 %v2_9a08, 0
  store i1 %v8_9a08, i1* %cpsr_n.global-to-local, align 1
  %v9_9a08 = icmp eq i32 %v3_9a00, %v1_9a04
  store i1 %v9_9a08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_8a44, i32* %r2.global-to-local, align 4
  store i32 %v1_9a04, i32* %r1.global-to-local, align 4
  store i32 %v1_9a04, i32* %stack_var_-40, align 4
  %v7_9a18 = icmp sgt i32 %v3_9a00, %v1_9a04
  %v0_9a28.pre = load i32, i32* @r5, align 4
  br i1 %v7_9a18, label %dec_label_pc_99f8.dec_label_pc_9a1c_crit_edge, label %dec_label_pc_9a40

dec_label_pc_99f8.dec_label_pc_9a1c_crit_edge:    ; preds = %dec_label_pc_99f8
  %v0_9a2c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9a1c

dec_label_pc_9a1c:                                ; preds = %dec_label_pc_99f8.dec_label_pc_9a1c_crit_edge, %dec_label_pc_99f0
  %v0_9a2c = phi i32 [ %v0_9a2c.pre, %dec_label_pc_99f8.dec_label_pc_9a1c_crit_edge ], [ %v3_99b4, %dec_label_pc_99f0 ]
  %v0_9a28 = phi i32 [ %v0_9a28.pre, %dec_label_pc_99f8.dec_label_pc_9a1c_crit_edge ], [ %v0_9994, %dec_label_pc_99f0 ]
  %v0_9a1c = phi i32 [ %v1_9a04, %dec_label_pc_99f8.dec_label_pc_9a1c_crit_edge ], [ 0, %dec_label_pc_99f0 ]
  %v1_9a1c = and i32 %v0_9a1c, 33554432
  %v2_9a1c = icmp ne i32 %v1_9a1c, 0
  store i1 %v2_9a1c, i1* %cpsr_c.global-to-local, align 1
  %v3_9a1c = mul i32 %v0_9a1c, 128
  %v1_9a20 = add i32 %v3_9a1c, 1472
  %v0_9a24 = load i32, i32* %sb.global-to-local, align 4
  %v2_9a24 = add i32 %v1_9a20, %v0_9a24
  store i32 %v2_9a24, i32* %r1.global-to-local, align 4
  store i32 %v0_9a28, i32* %r0.global-to-local, align 4
  store i32 %v0_9a2c, i32* %r2.global-to-local, align 4
  %v3_9a30 = inttoptr i32 %v0_9a28 to i8*
  %v4_9a30 = call i32 @function_124b0(i8* %v3_9a30, i32 %v2_9a24, i32 %v0_9a2c)
  store i32 %v4_9a30, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a34 = icmp slt i32 %v4_9a30, 0
  store i1 %v1_9a34, i1* %cpsr_n.global-to-local, align 1
  %v2_9a34 = icmp eq i32 %v4_9a30, 0
  store i1 %v2_9a34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a34, label %dec_label_pc_99f8, label %dec_label_pc_99d0

dec_label_pc_9a40:                                ; preds = %dec_label_pc_99f8, %dec_label_pc_99d8
  %v0_9a40 = phi i32 [ %v0_9994, %dec_label_pc_99d8 ], [ %v0_9a28.pre, %dec_label_pc_99f8 ]
  store i32 %v0_9a40, i32* %r0.global-to-local, align 4
  %v1_9a44 = inttoptr i32 %v0_9a40 to i8*
  %v2_9a44 = call i32 @function_1204c(i8* %v1_9a44)
  store i32 %v2_9a44, i32* %r0.global-to-local, align 4
  %v1_9a48 = add i32 %v2_9a44, -127
  %v2_9a48 = icmp ugt i32 %v2_9a44, 126
  store i1 %v2_9a48, i1* %cpsr_c.global-to-local, align 1
  %v3_9a48 = sub i32 126, %v2_9a44
  %v4_9a48 = and i32 %v3_9a48, %v2_9a44
  %v5_9a48 = icmp slt i32 %v4_9a48, 0
  store i1 %v5_9a48, i1* %cpsr_v.global-to-local, align 1
  %v6_9a48 = icmp slt i32 %v1_9a48, 0
  store i1 %v6_9a48, i1* %cpsr_n.global-to-local, align 1
  %v7_9a48 = icmp eq i32 %v2_9a44, 127
  store i1 %v7_9a48, i1* %cpsr_z.global-to-local, align 1
  %v8_9a4c = icmp sgt i32 %v2_9a44, 127
  br i1 %v8_9a4c, label %dec_label_pc_99d0, label %dec_label_pc_9a50

dec_label_pc_9a50:                                ; preds = %dec_label_pc_9a40
  %v0_9a50 = load i32, i32* @r8, align 4
  %v1_9a50 = add i32 %v0_9a50, 12
  %v2_9a50 = inttoptr i32 %v1_9a50 to i32*
  %v3_9a50 = load i32, i32* %v2_9a50, align 4
  %v1_9a54 = and i32 %v3_9a50, 33554432
  %v2_9a54 = icmp ne i32 %v1_9a54, 0
  store i1 %v2_9a54, i1* %cpsr_c.global-to-local, align 1
  %v3_9a54 = mul i32 %v3_9a50, 128
  %v1_9a58 = add i32 %v3_9a54, 1472
  %v0_9a5c = load i32, i32* @r5, align 4
  store i32 %v0_9a5c, i32* %r1.global-to-local, align 4
  %v0_9a60 = load i32, i32* %sb.global-to-local, align 4
  %v2_9a60 = add i32 %v1_9a58, %v0_9a60
  store i32 %v2_9a60, i32* @r0, align 4
  %v2_9a64 = inttoptr i32 %v2_9a60 to i8*
  %v3_9a64 = call i32 @function_12074(i8* %v2_9a64, i32 %v0_9a5c)
  store i32 %v3_9a64, i32* %r0.global-to-local, align 4
  %v0_9a68 = load i32, i32* @r8, align 4
  %v1_9a68 = add i32 %v0_9a68, 12
  %v2_9a68 = inttoptr i32 %v1_9a68 to i32*
  %v3_9a68 = load i32, i32* %v2_9a68, align 4
  %v0_9a6c = load i32, i32* @sl, align 4
  store i32 %v0_9a6c, i32* @r5, align 4
  %v1_9a70 = add i32 %v3_9a68, 1
  store i32 %v1_9a70, i32* %r3.global-to-local, align 4
  store i32 %v1_9a70, i32* %v2_9a68, align 4
  %v1_9888.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_987c

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_98b0, %dec_label_pc_987c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v3_9a84 = call i32 @function_114b4(i32 45, i32* null)
  %v0_9a88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9a88, i32* @r1, align 4
  store i32 %v3_9a84, i32* %r2.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v4_9a94 = call i32 @function_123a0(i8* %tmp199, i32 %v0_9a88, i32 %v3_9a84)
  store i32 %v4_9a94, i32* %r0.global-to-local, align 4
  %v1_9a98 = add i32 %v4_9a94, 1
  %v2_9a98 = icmp eq i32 %v4_9a94, -1
  store i1 %v2_9a98, i1* %cpsr_c.global-to-local, align 1
  %v3_9a98 = sub i32 0, %v4_9a94
  %v4_9a98 = and i32 %v1_9a98, %v3_9a98
  %v5_9a98 = icmp slt i32 %v4_9a98, 0
  store i1 %v5_9a98, i1* %cpsr_v.global-to-local, align 1
  %v6_9a98 = icmp slt i32 %v1_9a98, 0
  store i1 %v6_9a98, i1* %cpsr_n.global-to-local, align 1
  %v7_9a98 = icmp eq i32 %v1_9a98, 0
  store i1 %v7_9a98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9a98, label %dec_label_pc_9dcc, label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_9a7c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v3_9aa8 = call i32 @function_114b4(i32 45, i32* null)
  %v0_9aac = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9aac, i32* @r1, align 4
  store i32 %v3_9aa8, i32* %r2.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v4_9ab8 = call i32 @function_123a0(i8* %tmp199, i32 %v0_9aac, i32 %v3_9aa8)
  store i32 %v4_9ab8, i32* %r0.global-to-local, align 4
  store i32 %v2_8e9c, i32* %ip.global-to-local, align 4
  %v2_9ac4 = add i32 %v4_9ab8, %v2_8e9c
  store i32 %v2_9ac4, i32* %r3.global-to-local, align 4
  %v1_9ac8 = load i32, i32* @r6, align 4
  %v2_9ac8 = add i32 %v1_9ac8, %v2_9ac4
  %v3_9ac8 = inttoptr i32 %v2_9ac8 to i8*
  %v4_9ac8 = load i8, i8* %v3_9ac8, align 1
  store i32 %v2_89d4, i32* %lr.global-to-local, align 4
  %v2_9ad0 = icmp ugt i8 %v4_9ac8, 31
  store i1 %v2_9ad0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ad0 = icmp ult i8 %v4_9ac8, 32
  store i1 %v6_9ad0, i1* %cpsr_n.global-to-local, align 1
  %v7_9ad0 = icmp eq i8 %v4_9ac8, 32
  store i1 %v7_9ad0, i1* %cpsr_z.global-to-local, align 1
  %v2_9ad8 = zext i1 %v7_9ad0 to i32
  %v2_9ad8.v4_9ab8 = add i32 %v2_9ad8, %v4_9ab8
  store i32 %v2_9ad8.v4_9ab8, i32* @r4, align 4
  %v2_9adc = add i32 %v2_9ad8.v4_9ab8, %v2_89d4
  store i32 %v2_9adc, i32* @r5, align 4
  store i32 %v2_9adc, i32* %r0.global-to-local, align 4
  %v1_9ae4 = load i32, i32* %fp.global-to-local, align 4
  %v2_9ae4 = sub i32 %v1_9ae4, %v2_9ad8.v4_9ab8
  store i32 %v2_9ae4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9af0 = call i32 @function_12110(i32 %v2_9adc, i32 %v2_9ae4, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32 2)
  store i32 %v5_9af0, i32* %r0.global-to-local, align 4
  %v1_9af4 = add i32 %v5_9af0, 1
  %v2_9af4 = icmp eq i32 %v5_9af0, -1
  store i1 %v2_9af4, i1* %cpsr_c.global-to-local, align 1
  %v3_9af4 = sub i32 0, %v5_9af0
  %v4_9af4 = and i32 %v1_9af4, %v3_9af4
  %v5_9af4 = icmp slt i32 %v4_9af4, 0
  store i1 %v5_9af4, i1* %cpsr_v.global-to-local, align 1
  %v6_9af4 = icmp slt i32 %v1_9af4, 0
  store i1 %v6_9af4, i1* %cpsr_n.global-to-local, align 1
  %v7_9af4 = icmp eq i32 %v1_9af4, 0
  store i1 %v7_9af4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_9af0, i32* %lr.global-to-local, align 4
  br i1 %v7_9af4, label %dec_label_pc_9dcc, label %dec_label_pc_9b00

dec_label_pc_9b00:                                ; preds = %dec_label_pc_9aa0
  store i32 %v2_8e9c, i32* %r1.global-to-local, align 4
  %v1_9b08 = add i32 %v5_9af0, -1
  %v2_9b08 = icmp ne i32 %v5_9af0, 0
  store i1 %v2_9b08, i1* %cpsr_c.global-to-local, align 1
  %v3_9b08 = sub i32 0, %v5_9af0
  %v4_9b08 = and i32 %v5_9af0, %v3_9b08
  %v5_9b08 = icmp slt i32 %v4_9b08, 0
  store i1 %v5_9b08, i1* %cpsr_v.global-to-local, align 1
  %v6_9b08 = icmp slt i32 %v1_9b08, 0
  store i1 %v6_9b08, i1* %cpsr_n.global-to-local, align 1
  %v7_9b08 = icmp eq i32 %v5_9af0, 1
  store i1 %v7_9b08, i1* %cpsr_z.global-to-local, align 1
  %v1_9b0c = load i32, i32* @r4, align 4
  %v2_9b0c = add i32 %v1_9b0c, %v2_8e9c
  store i32 %v2_9b0c, i32* %ip.global-to-local, align 4
  %v7_9b10 = icmp sgt i32 %v5_9af0, 1
  br i1 %v7_9b10, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_9b00
  %v9_9b10 = add i32 %v5_9af0, -2
  store i32 %v9_9b10, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_9b00, %bb229
  %v3_9b34 = phi i32 [ %v5_9af0, %dec_label_pc_9b00 ], [ %v9_9b10, %bb229 ]
  %v1_9b18 = add i32 %v3_9b34, 1
  store i32 %v1_9b18, i32* %r6.global-to-local, align 4
  %v1_9b1c = add i32 %v2_9b0c, -20773
  store i32 %v1_9b1c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_9b24 = load i32, i32* @r5, align 4
  store i32 %v0_9b24, i32* %r0.global-to-local, align 4
  store i32 %v1_9b18, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15108.70 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_9b34 = add i32 %v3_9b34, %v1_9b1c
  %v5_9b34 = inttoptr i32 %v4_9b34 to i8*
  store i8 0, i8* %v5_9b34, align 1
  %v5_9b38 = call i32 @function_12110(i32 %v0_9b24, i32 %v1_9b18, i32 ptrtoint ([5 x i8]* @global_var_15108.70 to i32), i32 4)
  store i32 %v5_9b38, i32* %r0.global-to-local, align 4
  %v1_9b3c = add i32 %v5_9b38, -4
  %v2_9b3c = icmp ugt i32 %v5_9b38, 3
  store i1 %v2_9b3c, i1* %cpsr_c.global-to-local, align 1
  %v3_9b3c = sub i32 3, %v5_9b38
  %v4_9b3c = and i32 %v3_9b3c, %v5_9b38
  %v5_9b3c = icmp slt i32 %v4_9b3c, 0
  store i1 %v5_9b3c, i1* %cpsr_v.global-to-local, align 1
  %v6_9b3c = icmp slt i32 %v1_9b3c, 0
  store i1 %v6_9b3c, i1* %cpsr_n.global-to-local, align 1
  %v7_9b3c = icmp eq i32 %v5_9b38, 4
  store i1 %v7_9b3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b3c, label %dec_label_pc_a0b4, label %dec_label_pc_9b44

dec_label_pc_9b44:                                ; preds = %bb230
  store i32 %v2_89d4, i32* %ip.global-to-local, align 4
  %v1_9b48 = load i32, i32* @r4, align 4
  %v2_9b48 = add i32 %v1_9b48, %v2_89d4
  %v3_9b48 = inttoptr i32 %v2_9b48 to i8*
  %v4_9b48 = load i8, i8* %v3_9b48, align 1
  %v6_9b48 = zext i8 %v4_9b48 to i32
  store i32 %v6_9b48, i32* %r3.global-to-local, align 4
  %v2_9b4c = icmp ugt i8 %v4_9b48, 46
  store i1 %v2_9b4c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9b4c = icmp ult i8 %v4_9b48, 47
  store i1 %v6_9b4c, i1* %cpsr_n.global-to-local, align 1
  %v7_9b4c = icmp eq i8 %v4_9b48, 47
  store i1 %v7_9b4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b4c, label %dec_label_pc_a2a8, label %dec_label_pc_9b54

dec_label_pc_9b54:                                ; preds = %dec_label_pc_9c00, %dec_label_pc_a1ec, %dec_label_pc_a2d8, %dec_label_pc_a2a8, %dec_label_pc_a184, %dec_label_pc_a168, %dec_label_pc_9b44, %dec_label_pc_a2f4, %dec_label_pc_a1b4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9b58 = load i32, i32* @r8, align 4
  %v3_9b58 = add i32 %v2_9b58, -1452
  %v4_9b58 = inttoptr i32 %v3_9b58 to i8*
  store i8 1, i8* %v4_9b58, align 1
  br label %dec_label_pc_8f8c

dec_label_pc_9b60:                                ; preds = %dec_label_pc_8f7c
  %v0_9b60 = call i32 @function_12f88()
  store i32 %v0_9b60, i32* %r0.global-to-local, align 4
  %v0_9b64 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b64 = add i32 %v0_9b64, 1472
  store i32 %v1_9b64, i32* %r3.global-to-local, align 4
  %v0_9b6c = load i32, i32* @r8, align 4
  %v1_9b6c = add i32 %v0_9b6c, 656
  %v2_9b6c = inttoptr i32 %v1_9b6c to i32*
  %v3_9b6c = load i32, i32* %v2_9b6c, align 4
  store i32 %v3_9b6c, i32* %r3.global-to-local, align 4
  %v1_9b74 = add i32 %v3_9b6c, -1024
  %v2_9b74 = icmp ugt i32 %v3_9b6c, 1023
  store i1 %v2_9b74, i1* %cpsr_c.global-to-local, align 1
  %v3_9b74 = sub i32 1023, %v3_9b6c
  %v4_9b74 = and i32 %v3_9b74, %v3_9b6c
  %v5_9b74 = icmp slt i32 %v4_9b74, 0
  store i1 %v5_9b74, i1* %cpsr_v.global-to-local, align 1
  %v6_9b74 = icmp slt i32 %v1_9b74, 0
  store i1 %v6_9b74, i1* %cpsr_n.global-to-local, align 1
  %v7_9b74 = icmp eq i32 %v3_9b6c, 1024
  store i1 %v7_9b74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_9b60, i32* %fp.global-to-local, align 4
  %v1_9b7c = add i32 %v0_9b64, 2116
  store i32 %v1_9b7c, i32* @r7, align 4
  br i1 %v7_9b74, label %dec_label_pc_9c7c, label %dec_label_pc_9b84

dec_label_pc_9b84:                                ; preds = %dec_label_pc_9b60, %dec_label_pc_9c7c, %dec_label_pc_9c70
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_9b88 = load i32, i32* %fp.global-to-local, align 4
  %v2_9b88 = inttoptr i32 %v1_9b88 to i32*
  store i32 0, i32* %v2_9b88, align 4
  %v0_9b8c = load i32, i32* @r8, align 4
  %v1_9b8c = add i32 %v0_9b8c, 656
  %v2_9b8c = inttoptr i32 %v1_9b8c to i32*
  %v3_9b8c = load i32, i32* %v2_9b8c, align 4
  store i32 %v3_9b8c, i32* %r1.global-to-local, align 4
  %v1_9b90 = add i32 %v0_9b8c, -1456
  %v2_9b90 = inttoptr i32 %v1_9b90 to i32*
  %v3_9b90 = load i32, i32* %v2_9b90, align 4
  store i32 %v3_9b90, i32* %r0.global-to-local, align 4
  %v1_9b94 = sub i32 1024, %v3_9b8c
  store i32 %v1_9b94, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9b9c = load i32, i32* @r7, align 4
  %v2_9b9c = add i32 %v0_9b9c, %v3_9b8c
  store i32 %v2_9b9c, i32* %r1.global-to-local, align 4
  %v4_9ba0 = inttoptr i32 %v2_9b9c to i32*
  %v5_9ba0 = call i32 @function_131dc(i32 %v3_9b90, i32* %v4_9ba0, i32 %v1_9b94, i32 16384)
  store i32 %v5_9ba0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ba4 = icmp slt i32 %v5_9ba0, 0
  store i1 %v1_9ba4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ba4 = icmp eq i32 %v5_9ba0, 0
  store i1 %v2_9ba4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ba4, label %dec_label_pc_a080, label %dec_label_pc_9bac

dec_label_pc_9bac:                                ; preds = %dec_label_pc_9b84
  %v1_9bac = add i32 %v5_9ba0, 1
  %v2_9bac = icmp eq i32 %v5_9ba0, -1
  store i1 %v2_9bac, i1* %cpsr_c.global-to-local, align 1
  %v3_9bac = sub i32 0, %v5_9ba0
  %v4_9bac = and i32 %v1_9bac, %v3_9bac
  %v5_9bac = icmp slt i32 %v4_9bac, 0
  store i1 %v5_9bac, i1* %cpsr_v.global-to-local, align 1
  %v6_9bac = icmp slt i32 %v1_9bac, 0
  store i1 %v6_9bac, i1* %cpsr_n.global-to-local, align 1
  %v7_9bac = icmp eq i32 %v1_9bac, 0
  store i1 %v7_9bac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bac, label %dec_label_pc_a0a4, label %dec_label_pc_9bb4

dec_label_pc_9bb4:                                ; preds = %dec_label_pc_9bac
  %v0_9bb4 = load i32, i32* @r8, align 4
  %v1_9bb4 = add i32 %v0_9bb4, 656
  %v2_9bb4 = inttoptr i32 %v1_9bb4 to i32*
  %v3_9bb4 = load i32, i32* %v2_9bb4, align 4
  store i32 %v2_8f2c, i32* %r1.global-to-local, align 4
  %v2_9bbc = add i32 %v3_9bb4, %v5_9ba0
  store i32 %v2_9bbc, i32* @r4, align 4
  store i32 %v2_9bbc, i32* %v2_9bb4, align 4
  %v0_9bc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_9bc4 = load i32, i32* @r8, align 4
  %v2_9bc4 = add i32 %v1_9bc4, -1448
  %v3_9bc4 = inttoptr i32 %v2_9bc4 to i32*
  store i32 %v0_9bc4, i32* %v3_9bc4, align 4
  br label %dec_label_pc_9c50

dec_label_pc_9bcc:                                ; preds = %dec_label_pc_9c50
  %v1_9bcc = add i32 %v0_9c50, -4
  %v2_9bcc = inttoptr i32 %v1_9bcc to i32*
  %v3_9bcc = load i32, i32* %v2_9bcc, align 4
  store i32 %v3_9bcc, i32* @sl, align 4
  %v1_9bd0 = load i32, i32* @r4, align 4
  %v5_9bd4 = icmp slt i32 %v3_9c50, %v1_9bd0
  %storemerge73 = select i1 %v5_9bd4, i32 %v3_9c50, i32 %v1_9bd0
  store i32 %storemerge73, i32* @r5, align 4
  %v2_9bdc = sub i32 %v3_9c50, %storemerge73
  store i32 %v2_9bdc, i32* @r6, align 4
  %v1_9be0 = add i32 %v3_9bcc, -1
  %v2_9be0 = icmp ne i32 %v3_9bcc, 0
  store i1 %v2_9be0, i1* %cpsr_c.global-to-local, align 1
  %v3_9be0 = sub i32 0, %v3_9bcc
  %v4_9be0 = and i32 %v3_9bcc, %v3_9be0
  %v5_9be0 = icmp slt i32 %v4_9be0, 0
  store i1 %v5_9be0, i1* %cpsr_v.global-to-local, align 1
  %v6_9be0 = icmp slt i32 %v1_9be0, 0
  store i1 %v6_9be0, i1* %cpsr_n.global-to-local, align 1
  %v7_9be0 = icmp eq i32 %v3_9bcc, 1
  store i1 %v7_9be0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9bdc, i32* %v2_9c50, align 4
  br i1 %v7_9be0, label %dec_label_pc_9c9c, label %dec_label_pc_9bcc.dec_label_pc_9becthread-pre-split_crit_edge

dec_label_pc_9bcc.dec_label_pc_9becthread-pre-split_crit_edge: ; preds = %dec_label_pc_9bcc
  %v0_9bec.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9bec

dec_label_pc_9bec:                                ; preds = %dec_label_pc_9c5c, %dec_label_pc_9bcc.dec_label_pc_9becthread-pre-split_crit_edge, %dec_label_pc_9cc4
  %v0_9bec = phi i32 [ %v3_9cc4, %dec_label_pc_9cc4 ], [ %v0_9bec.pr.pre, %dec_label_pc_9bcc.dec_label_pc_9becthread-pre-split_crit_edge ], [ %v3_9c50, %dec_label_pc_9c5c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9bec = icmp slt i32 %v0_9bec, 0
  store i1 %v1_9bec, i1* %cpsr_n.global-to-local, align 1
  %v2_9bec = icmp eq i32 %v0_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9bec, label %dec_label_pc_9bf4, label %dec_label_pc_9c14

dec_label_pc_9bf4:                                ; preds = %dec_label_pc_9bec
  %v0_9bf4 = load i32, i32* @r8, align 4
  %v1_9bf4 = add i32 %v0_9bf4, 4
  %v2_9bf4 = inttoptr i32 %v1_9bf4 to i32*
  %v3_9bf4 = load i32, i32* %v2_9bf4, align 4
  store i32 %v3_9bf4, i32* @r4, align 4
  %v1_9bf8 = add i32 %v3_9bf4, -1
  %v2_9bf8 = icmp ne i32 %v3_9bf4, 0
  store i1 %v2_9bf8, i1* %cpsr_c.global-to-local, align 1
  %v3_9bf8 = sub i32 0, %v3_9bf4
  %v4_9bf8 = and i32 %v3_9bf4, %v3_9bf8
  %v5_9bf8 = icmp slt i32 %v4_9bf8, 0
  store i1 %v5_9bf8, i1* %cpsr_v.global-to-local, align 1
  %v6_9bf8 = icmp slt i32 %v1_9bf8, 0
  store i1 %v6_9bf8, i1* %cpsr_n.global-to-local, align 1
  %v7_9bf8 = icmp eq i32 %v3_9bf4, 1
  store i1 %v7_9bf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bf8, label %dec_label_pc_9ccc, label %dec_label_pc_9c00

dec_label_pc_9c00:                                ; preds = %dec_label_pc_9bf4
  %v1_9c00 = add i32 %v0_9bf4, 656
  %v2_9c00 = inttoptr i32 %v1_9c00 to i32*
  %v3_9c00 = load i32, i32* %v2_9c00, align 4
  %v0_9c04 = load i32, i32* @r5, align 4
  %v2_9c04 = sub i32 %v3_9c00, %v0_9c04
  store i32 %v2_9c04, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9c08 = icmp slt i32 %v2_9c04, 0
  store i1 %v1_9c08, i1* %cpsr_n.global-to-local, align 1
  %v2_9c08 = icmp eq i32 %v2_9c04, 0
  store i1 %v2_9c08, i1* %cpsr_z.global-to-local, align 1
  %v2_9c0c = add i32 %v0_9bf4, 8
  %v3_9c0c = inttoptr i32 %v2_9c0c to i32*
  store i32 %v2_9c04, i32* %v3_9c0c, align 4
  br i1 %v2_9c08, label %dec_label_pc_9b54, label %dec_label_pc_9c14

dec_label_pc_9c14:                                ; preds = %dec_label_pc_9bec, %dec_label_pc_9ccc, %dec_label_pc_9c00, %dec_label_pc_9d54
  %v0_9c14 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9c14 = icmp slt i32 %v0_9c14, 0
  store i1 %v1_9c14, i1* %cpsr_n.global-to-local, align 1
  %v2_9c14 = icmp eq i32 %v0_9c14, 0
  store i1 %v2_9c14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c14, label %dec_label_pc_9c64, label %dec_label_pc_9c1c

dec_label_pc_9c1c:                                ; preds = %dec_label_pc_9c14
  %v0_9c1c = load i32, i32* @r8, align 4
  %v1_9c1c = add i32 %v0_9c1c, 656
  %v2_9c1c = inttoptr i32 %v1_9c1c to i32*
  %v3_9c1c = load i32, i32* %v2_9c1c, align 4
  store i32 %v3_9c1c, i32* %r3.global-to-local, align 4
  %v2_9c20 = sub i32 %v3_9c1c, %v0_9c14
  store i32 %v2_9c20, i32* @r4, align 4
  store i32 %v2_9c20, i32* @r2, align 4
  store i32 %v2_9c20, i32* %v2_9c1c, align 4
  %v0_9c2c = load i32, i32* @r7, align 4
  %v1_9c2c = load i32, i32* @r5, align 4
  %v2_9c2c = add i32 %v1_9c2c, %v0_9c2c
  store i32 %v2_9c2c, i32* @r1, align 4
  store i32 %v0_9c2c, i32* @r0, align 4
  %v3_9c34 = call i32 @function_12fe0(i32 %v0_9c2c, i32 %v2_9c2c, i32 %v2_9c20)
  store i32 %v3_9c34, i32* %r0.global-to-local, align 4
  %v0_9c38 = load i32, i32* @r8, align 4
  %v1_9c38 = add i32 %v0_9c38, 656
  %v2_9c38 = inttoptr i32 %v1_9c38 to i32*
  %v3_9c38 = load i32, i32* %v2_9c38, align 4
  store i32 %v3_9c38, i32* @r4, align 4
  store i32 0, i32* @lr, align 4
  %v1_9c40 = load i32, i32* %sb.global-to-local, align 4
  %v2_9c40 = add i32 %v1_9c40, %v3_9c38
  store i32 %v2_9c40, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9c44 = icmp slt i32 %v3_9c38, 0
  store i1 %v1_9c44, i1* %cpsr_n.global-to-local, align 1
  %v2_9c44 = icmp eq i32 %v3_9c38, 0
  store i1 %v2_9c44, i1* %cpsr_z.global-to-local, align 1
  %v3_9c48 = add i32 %v2_9c40, 2116
  %v4_9c48 = inttoptr i32 %v3_9c48 to i8*
  store i8 0, i8* %v4_9c48, align 1
  %v0_9c4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9c4c, label %dec_label_pc_9c64, label %dec_label_pc_9c50

dec_label_pc_9c50:                                ; preds = %dec_label_pc_9c1c, %dec_label_pc_9bb4
  %v0_9c50 = load i32, i32* @r8, align 4
  %v1_9c50 = add i32 %v0_9c50, 8
  %v2_9c50 = inttoptr i32 %v1_9c50 to i32*
  %v3_9c50 = load i32, i32* %v2_9c50, align 4
  store i32 %v3_9c50, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9c54 = icmp slt i32 %v3_9c50, 0
  store i1 %v1_9c54, i1* %cpsr_n.global-to-local, align 1
  %v2_9c54 = icmp eq i32 %v3_9c50, 0
  store i1 %v2_9c54, i1* %cpsr_z.global-to-local, align 1
  %v5_9c58 = icmp sgt i32 %v3_9c50, 0
  br i1 %v5_9c58, label %dec_label_pc_9bcc, label %dec_label_pc_9c5c

dec_label_pc_9c5c:                                ; preds = %dec_label_pc_9c50
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9bec

dec_label_pc_9c64:                                ; preds = %dec_label_pc_9c1c, %dec_label_pc_9c14
  %v0_9c64 = load i32, i32* @r8, align 4
  %v1_9c64 = add i32 %v0_9c64, -1452
  %v2_9c64 = inttoptr i32 %v1_9c64 to i8*
  %v3_9c64 = load i8, i8* %v2_9c64, align 1
  %v4_9c64 = zext i8 %v3_9c64 to i32
  store i32 %v4_9c64, i32* %r3.global-to-local, align 4
  %v2_9c68 = icmp ugt i8 %v3_9c64, 6
  store i1 %v2_9c68, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c68 = icmp ult i8 %v3_9c64, 7
  store i1 %v6_9c68, i1* %cpsr_n.global-to-local, align 1
  %v7_9c68 = icmp eq i8 %v3_9c64, 7
  store i1 %v7_9c68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c68, label %dec_label_pc_9c70, label %dec_label_pc_8f8c

dec_label_pc_9c70:                                ; preds = %dec_label_pc_9c64
  %v1_9c70 = add i32 %v0_9c64, 656
  %v2_9c70 = inttoptr i32 %v1_9c70 to i32*
  %v3_9c70 = load i32, i32* %v2_9c70, align 4
  store i32 %v3_9c70, i32* %r3.global-to-local, align 4
  %v1_9c74 = add i32 %v3_9c70, -1024
  %v2_9c74 = icmp ugt i32 %v3_9c70, 1023
  store i1 %v2_9c74, i1* %cpsr_c.global-to-local, align 1
  %v3_9c74 = sub i32 1023, %v3_9c70
  %v4_9c74 = and i32 %v3_9c74, %v3_9c70
  %v5_9c74 = icmp slt i32 %v4_9c74, 0
  store i1 %v5_9c74, i1* %cpsr_v.global-to-local, align 1
  %v6_9c74 = icmp slt i32 %v1_9c74, 0
  store i1 %v6_9c74, i1* %cpsr_n.global-to-local, align 1
  %v7_9c74 = icmp eq i32 %v3_9c70, 1024
  store i1 %v7_9c74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c74, label %dec_label_pc_9c7c.loopexit, label %dec_label_pc_9b84

dec_label_pc_9c7c.loopexit:                       ; preds = %dec_label_pc_9c70
  %v0_9c7c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9c7c

dec_label_pc_9c7c:                                ; preds = %dec_label_pc_9c7c.loopexit, %dec_label_pc_9b60
  %v0_9c7c = phi i32 [ %v0_9c7c.pre, %dec_label_pc_9c7c.loopexit ], [ %v1_9b7c, %dec_label_pc_9b60 ]
  store i32 %v0_9c7c, i32* @r0, align 4
  %v1_9c80 = add i32 %v0_9c7c, 64
  store i32 %v1_9c80, i32* @r1, align 4
  store i32 960, i32* @r2, align 4
  %v3_9c88 = call i32 @function_12fe0(i32 %v0_9c7c, i32 %v1_9c80, i32 960)
  store i32 %v3_9c88, i32* %r0.global-to-local, align 4
  %v0_9c8c = load i32, i32* @r8, align 4
  %v1_9c8c = add i32 %v0_9c8c, 656
  %v2_9c8c = inttoptr i32 %v1_9c8c to i32*
  %v3_9c8c = load i32, i32* %v2_9c8c, align 4
  store i32 %v3_9c8c, i32* %r3.global-to-local, align 4
  %v1_9c90 = add i32 %v3_9c8c, -64
  store i32 %v1_9c90, i32* @r4, align 4
  store i32 %v1_9c90, i32* %v2_9c8c, align 4
  br label %dec_label_pc_9b84

dec_label_pc_9c9c:                                ; preds = %dec_label_pc_9bcc
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v3_9ca4 = call i32 @function_114b4(i32 43, i32* null)
  %v0_9ca8 = load i32, i32* @r4, align 4
  store i32 %v0_9ca8, i32* %r1.global-to-local, align 4
  store i32 %v3_9ca4, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9cb4 = load i32, i32* @r7, align 4
  store i32 %v0_9cb4, i32* %r0.global-to-local, align 4
  %v4_9cb8 = call i32 @function_12110(i32 %v0_9cb4, i32 %v0_9ca8, i32 %v3_9ca4, i32 11)
  store i32 %v4_9cb8, i32* %r0.global-to-local, align 4
  %v2_9cbc = add i32 %v4_9cb8, 1
  %v3_9cbc = icmp eq i32 %v4_9cb8, -1
  store i1 %v3_9cbc, i1* %cpsr_c.global-to-local, align 1
  %v4_9cbc = sub i32 0, %v4_9cb8
  %v5_9cbc = and i32 %v2_9cbc, %v4_9cbc
  %v6_9cbc = icmp slt i32 %v5_9cbc, 0
  store i1 %v6_9cbc, i1* %cpsr_v.global-to-local, align 1
  %v7_9cbc = icmp slt i32 %v2_9cbc, 0
  store i1 %v7_9cbc, i1* %cpsr_n.global-to-local, align 1
  %v8_9cbc = icmp eq i32 %v2_9cbc, 0
  store i1 %v8_9cbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9cbc, label %dec_label_pc_9cc4, label %dec_label_pc_a228

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9c9c
  %v0_9cc4 = load i32, i32* @r8, align 4
  %v1_9cc4 = add i32 %v0_9cc4, 8
  %v2_9cc4 = inttoptr i32 %v1_9cc4 to i32*
  %v3_9cc4 = load i32, i32* %v2_9cc4, align 4
  store i32 %v3_9cc4, i32* @r6, align 4
  br label %dec_label_pc_9bec

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9bf4
  %v0_9ccc = load i32, i32* @r7, align 4
  store i32 %v0_9ccc, i32* %r0.global-to-local, align 4
  %v1_9cd0 = add i32 %v0_9bf4, 656
  %v2_9cd0 = inttoptr i32 %v1_9cd0 to i32*
  %v3_9cd0 = load i32, i32* %v2_9cd0, align 4
  store i32 %v3_9cd0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9cdc = call i32 @function_12110(i32 %v0_9ccc, i32 %v3_9cd0, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32 2)
  store i32 %v5_9cdc, i32* %r0.global-to-local, align 4
  %v1_9ce0 = add i32 %v5_9cdc, 1
  %v2_9ce0 = icmp eq i32 %v5_9cdc, -1
  store i1 %v2_9ce0, i1* %cpsr_c.global-to-local, align 1
  %v3_9ce0 = sub i32 0, %v5_9cdc
  %v4_9ce0 = and i32 %v1_9ce0, %v3_9ce0
  %v5_9ce0 = icmp slt i32 %v4_9ce0, 0
  store i1 %v5_9ce0, i1* %cpsr_v.global-to-local, align 1
  %v6_9ce0 = icmp slt i32 %v1_9ce0, 0
  store i1 %v6_9ce0, i1* %cpsr_n.global-to-local, align 1
  %v7_9ce0 = icmp eq i32 %v1_9ce0, 0
  store i1 %v7_9ce0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ce0, label %dec_label_pc_9c14, label %dec_label_pc_9ce8

dec_label_pc_9ce8:                                ; preds = %dec_label_pc_9ccc
  %v0_9ce8 = load i32, i32* @r8, align 4
  %v1_9ce8 = add i32 %v0_9ce8, 656
  %v2_9ce8 = inttoptr i32 %v1_9ce8 to i32*
  %v3_9ce8 = load i32, i32* %v2_9ce8, align 4
  store i32 %v3_9ce8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_9cf4 = load i32, i32* @r7, align 4
  store i32 %v0_9cf4, i32* %r0.global-to-local, align 4
  %v5_9cf8 = call i32 @function_12110(i32 %v0_9cf4, i32 %v3_9ce8, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32 2)
  %v1_9cfc = load i32, i32* %sb.global-to-local, align 4
  %v2_9cfc = add i32 %v1_9cfc, %v5_9cf8
  store i32 %v2_9cfc, i32* %ip.global-to-local, align 4
  store i32 %v5_9cf8, i32* @r5, align 4
  store i32 %v5_9cf8, i32* %r1.global-to-local, align 4
  %v0_9d08 = load i32, i32* @r7, align 4
  store i32 %v0_9d08, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15104.68 to i32), i32* %r2.global-to-local, align 4
  %v0_9d10 = load i32, i32* @r4, align 4
  store i32 %v0_9d10, i32* %r3.global-to-local, align 4
  %v0_9d14 = load i32, i32* @r6, align 4
  %v1_9d14 = trunc i32 %v0_9d14 to i8
  %v3_9d14 = add i32 %v2_9cfc, 2114
  %v4_9d14 = inttoptr i32 %v3_9d14 to i8*
  store i8 %v1_9d14, i8* %v4_9d14, align 1
  %v4_9d18 = call i32 @function_12110(i32 %v0_9d08, i32 %v5_9cf8, i32 ptrtoint (i32* @global_var_15104.68 to i32), i32 %v0_9d10)
  store i32 %v4_9d18, i32* %r0.global-to-local, align 4
  %v1_9d1c = add i32 %v4_9d18, 1
  %v2_9d1c = icmp eq i32 %v4_9d18, -1
  store i1 %v2_9d1c, i1* %cpsr_c.global-to-local, align 1
  %v3_9d1c = sub i32 0, %v4_9d18
  %v4_9d1c = and i32 %v1_9d1c, %v3_9d1c
  %v5_9d1c = icmp slt i32 %v4_9d1c, 0
  store i1 %v5_9d1c, i1* %cpsr_v.global-to-local, align 1
  %v6_9d1c = icmp slt i32 %v1_9d1c, 0
  store i1 %v6_9d1c, i1* %cpsr_n.global-to-local, align 1
  %v7_9d1c = icmp eq i32 %v1_9d1c, 0
  store i1 %v7_9d1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d1c, label %dec_label_pc_9d40, label %dec_label_pc_9d24

dec_label_pc_9d24:                                ; preds = %dec_label_pc_9ce8
  %v0_9d24 = load i32, i32* @r7, align 4
  store i32 %v0_9d24, i32* %r0.global-to-local, align 4
  %v0_9d28 = load i32, i32* @r5, align 4
  store i32 %v0_9d28, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15104.68 to i32), i32* %r2.global-to-local, align 4
  %v0_9d30 = load i32, i32* @r4, align 4
  store i32 %v0_9d30, i32* %r3.global-to-local, align 4
  %v4_9d34 = call i32 @function_12110(i32 %v0_9d24, i32 %v0_9d28, i32 ptrtoint (i32* @global_var_15104.68 to i32), i32 %v0_9d30)
  %v1_9d38 = load i32, i32* %sb.global-to-local, align 4
  %v2_9d38 = add i32 %v1_9d38, %v4_9d34
  store i32 %v2_9d38, i32* %r0.global-to-local, align 4
  %v0_9d3c = load i32, i32* @r6, align 4
  %v1_9d3c = trunc i32 %v0_9d3c to i8
  %v3_9d3c = add i32 %v2_9d38, 2116
  %v4_9d3c = inttoptr i32 %v3_9d3c to i8*
  store i8 %v1_9d3c, i8* %v4_9d3c, align 1
  br label %dec_label_pc_9d40

dec_label_pc_9d40:                                ; preds = %dec_label_pc_9ce8, %dec_label_pc_9d24
  %v0_9d40 = load i32, i32* @r7, align 4
  store i32 %v0_9d40, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_9d48 = inttoptr i32 %v0_9d40 to i8*
  %v3_9d48 = call i32 @function_12178(i8* %v2_9d48, i32 16)
  store i32 %v3_9d48, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d4c = icmp slt i32 %v3_9d48, 0
  store i1 %v1_9d4c, i1* %cpsr_n.global-to-local, align 1
  %v2_9d4c = icmp eq i32 %v3_9d48, 0
  store i1 %v2_9d4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d4c, label %dec_label_pc_a4d8, label %dec_label_pc_9d54

dec_label_pc_9d54:                                ; preds = %dec_label_pc_9d40
  %v1_9d54 = add i32 %v3_9d48, 2
  store i32 %v1_9d54, i32* %r6.global-to-local, align 4
  %v1_9d58 = load i32, i32* @r8, align 4
  %v2_9d58 = add i32 %v1_9d58, 8
  %v3_9d58 = inttoptr i32 %v2_9d58 to i32*
  store i32 %v1_9d54, i32* %v3_9d58, align 4
  br label %dec_label_pc_9c14

dec_label_pc_9d60:                                ; preds = %dec_label_pc_9408
  %v0_9d60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_9d60, i32* %r1.global-to-local, align 4
  %v0_9d64 = load i32, i32* @r6, align 4
  store i32 %v0_9d64, i32* @r0, align 4
  %v2_9d68 = inttoptr i32 %v0_9d64 to i8*
  %v3_9d68 = call i32 @function_12074(i8* %v2_9d68, i32 %v0_9d60)
  store i32 %v3_9d68, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9420

dec_label_pc_9d70:                                ; preds = %dec_label_pc_8f84
  %v0_9d70 = call i32 @function_12f88()
  store i32 %v0_9d70, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v0_9d70, i32* @r4, align 4
  br label %dec_label_pc_9d7c

dec_label_pc_9d7c:                                ; preds = %dec_label_pc_9d9c.dec_label_pc_9d7c_crit_edge, %dec_label_pc_9d70
  %v1_9d7c = phi i32 [ %v1_9d7c.pre, %dec_label_pc_9d9c.dec_label_pc_9d7c_crit_edge ], [ %v0_9d70, %dec_label_pc_9d70 ]
  %v0_9d7c = phi i32 [ %v0_9d7c.pre, %dec_label_pc_9d9c.dec_label_pc_9d7c_crit_edge ], [ 0, %dec_label_pc_9d70 ]
  %v2_9d7c = inttoptr i32 %v1_9d7c to i32*
  store i32 %v0_9d7c, i32* %v2_9d7c, align 4
  store i32 %v2_89d4, i32* %r1.global-to-local, align 4
  %v0_9d84 = load i32, i32* @r8, align 4
  %v1_9d84 = add i32 %v0_9d84, -1456
  %v2_9d84 = inttoptr i32 %v1_9d84 to i32*
  %v3_9d84 = load i32, i32* %v2_9d84, align 4
  store i32 %v3_9d84, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_9d90 = call i32 @function_131dc(i32 %v3_9d84, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_9d90, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d94 = icmp slt i32 %v5_9d90, 0
  store i1 %v1_9d94, i1* %cpsr_n.global-to-local, align 1
  %v2_9d94 = icmp eq i32 %v5_9d90, 0
  store i1 %v2_9d94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d94, label %dec_label_pc_a074, label %dec_label_pc_9d9c

dec_label_pc_9d9c:                                ; preds = %dec_label_pc_9d7c
  %v2_9d9c = add i32 %v5_9d90, 1
  %v3_9d9c = icmp eq i32 %v5_9d90, -1
  store i1 %v3_9d9c, i1* %cpsr_c.global-to-local, align 1
  %v4_9d9c = sub i32 0, %v5_9d90
  %v5_9d9c = and i32 %v2_9d9c, %v4_9d9c
  %v6_9d9c = icmp slt i32 %v5_9d9c, 0
  store i1 %v6_9d9c, i1* %cpsr_v.global-to-local, align 1
  %v7_9d9c = icmp slt i32 %v2_9d9c, 0
  store i1 %v7_9d9c, i1* %cpsr_n.global-to-local, align 1
  %v8_9d9c = icmp eq i32 %v2_9d9c, 0
  store i1 %v8_9d9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9d9c, label %dec_label_pc_9da4, label %dec_label_pc_9d9c.dec_label_pc_9d7c_crit_edge

dec_label_pc_9d9c.dec_label_pc_9d7c_crit_edge:    ; preds = %dec_label_pc_9d9c
  %v0_9d7c.pre = load i32, i32* @r5, align 4
  %v1_9d7c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9d7c

dec_label_pc_9da4:                                ; preds = %dec_label_pc_9d9c
  %v0_9da4 = load i32, i32* @r4, align 4
  %v1_9da4 = inttoptr i32 %v0_9da4 to i32*
  %v2_9da4 = load i32, i32* %v1_9da4, align 4
  store i32 %v2_9da4, i32* %r3.global-to-local, align 4
  %v1_9da8 = add i32 %v2_9da4, -11
  %v2_9da8 = icmp ugt i32 %v2_9da4, 10
  store i1 %v2_9da8, i1* %cpsr_c.global-to-local, align 1
  %v3_9da8 = sub i32 10, %v2_9da4
  %v4_9da8 = and i32 %v3_9da8, %v2_9da4
  %v5_9da8 = icmp slt i32 %v4_9da8, 0
  store i1 %v5_9da8, i1* %cpsr_v.global-to-local, align 1
  %v6_9da8 = icmp slt i32 %v1_9da8, 0
  store i1 %v6_9da8, i1* %cpsr_n.global-to-local, align 1
  %v7_9da8 = icmp eq i32 %v2_9da4, 11
  store i1 %v7_9da8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9da8, label %dec_label_pc_a1ec, label %dec_label_pc_9db0

dec_label_pc_9db0:                                ; preds = %dec_label_pc_9da4, %dec_label_pc_a074
  %v0_9db0 = load i32, i32* @r8, align 4
  %v1_9db0 = add i32 %v0_9db0, -1456
  %v2_9db0 = inttoptr i32 %v1_9db0 to i32*
  %v3_9db0 = load i32, i32* %v2_9db0, align 4
  store i32 %v3_9db0, i32* %r0.global-to-local, align 4
  %v1_9db4 = call i32 @function_129e0(i32 %v3_9db0)
  store i32 %v1_9db4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_9dc0 = load i32, i32* @r8, align 4
  %v2_9dc0 = add i32 %v1_9dc0, -1456
  %v3_9dc0 = inttoptr i32 %v2_9dc0 to i32*
  store i32 -1, i32* %v3_9dc0, align 4
  %v0_9dc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_9dc4 = trunc i32 %v0_9dc4 to i8
  %v2_9dc4 = load i32, i32* @r8, align 4
  %v3_9dc4 = add i32 %v2_9dc4, -1452
  %v4_9dc4 = inttoptr i32 %v3_9dc4 to i8*
  store i8 %v1_9dc4, i8* %v4_9dc4, align 1
  br label %dec_label_pc_8f8c

dec_label_pc_9dcc:                                ; preds = %dec_label_pc_9aa0, %dec_label_pc_9a7c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v3_9dd4 = call i32 @function_114b4(i32 44, i32* null)
  %v0_9dd8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9dd8, i32* @r1, align 4
  store i32 %v3_9dd4, i32* %r2.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v4_9de4 = call i32 @function_123a0(i8* %tmp199, i32 %v0_9dd8, i32 %v3_9dd4)
  store i32 %v4_9de4, i32* %r0.global-to-local, align 4
  %v1_9dec = add i32 %v4_9de4, 1
  %v2_9dec = icmp eq i32 %v4_9de4, -1
  store i1 %v2_9dec, i1* %cpsr_c.global-to-local, align 1
  %v3_9dec = sub i32 0, %v4_9de4
  %v4_9dec = and i32 %v1_9dec, %v3_9dec
  %v5_9dec = icmp slt i32 %v4_9dec, 0
  store i1 %v5_9dec, i1* %cpsr_v.global-to-local, align 1
  %v6_9dec = icmp slt i32 %v1_9dec, 0
  store i1 %v6_9dec, i1* %cpsr_n.global-to-local, align 1
  %v7_9dec = icmp eq i32 %v1_9dec, 0
  store i1 %v7_9dec, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9dec, label %dec_label_pc_a014, label %dec_label_pc_9df8

dec_label_pc_9df8:                                ; preds = %dec_label_pc_9dcc
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v3_9e00 = call i32 @function_114b4(i32 44, i32* null)
  %v0_9e04 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9e04, i32* @r1, align 4
  store i32 %v3_9e00, i32* %r2.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v4_9e10 = call i32 @function_123a0(i8* %tmp199, i32 %v0_9e04, i32 %v3_9e00)
  store i32 %v4_9e10, i32* %r0.global-to-local, align 4
  store i32 %v2_8e9c, i32* %ip.global-to-local, align 4
  %v2_9e1c = add i32 %v4_9e10, %v2_8e9c
  store i32 %v2_9e1c, i32* %r3.global-to-local, align 4
  %v1_9e20 = load i32, i32* @r5, align 4
  %v2_9e20 = add i32 %v1_9e20, %v2_9e1c
  %v3_9e20 = inttoptr i32 %v2_9e20 to i8*
  %v4_9e20 = load i8, i8* %v3_9e20, align 1
  store i32 %v2_89d4, i32* %lr.global-to-local, align 4
  %v2_9e28 = icmp ugt i8 %v4_9e20, 31
  store i1 %v2_9e28, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9e28 = icmp ult i8 %v4_9e20, 32
  store i1 %v6_9e28, i1* %cpsr_n.global-to-local, align 1
  %v7_9e28 = icmp eq i8 %v4_9e20, 32
  store i1 %v7_9e28, i1* %cpsr_z.global-to-local, align 1
  %v2_9e30 = zext i1 %v7_9e28 to i32
  %v2_9e30.v4_9e10 = add i32 %v2_9e30, %v4_9e10
  store i32 %v2_9e30.v4_9e10, i32* @r4, align 4
  %v2_9e34 = add i32 %v2_9e30.v4_9e10, %v2_89d4
  store i32 %v2_9e34, i32* @r6, align 4
  store i32 %v2_9e34, i32* %r0.global-to-local, align 4
  %v1_9e3c = load i32, i32* %fp.global-to-local, align 4
  %v2_9e3c = sub i32 %v1_9e3c, %v2_9e30.v4_9e10
  store i32 %v2_9e3c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9e48 = call i32 @function_12110(i32 %v2_9e34, i32 %v2_9e3c, i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32 2)
  store i32 %v5_9e48, i32* %r0.global-to-local, align 4
  %v1_9e4c = add i32 %v5_9e48, 1
  %v2_9e4c = icmp eq i32 %v5_9e48, -1
  store i1 %v2_9e4c, i1* %cpsr_c.global-to-local, align 1
  %v3_9e4c = sub i32 0, %v5_9e48
  %v4_9e4c = and i32 %v1_9e4c, %v3_9e4c
  %v5_9e4c = icmp slt i32 %v4_9e4c, 0
  store i1 %v5_9e4c, i1* %cpsr_v.global-to-local, align 1
  %v6_9e4c = icmp slt i32 %v1_9e4c, 0
  store i1 %v6_9e4c, i1* %cpsr_n.global-to-local, align 1
  %v7_9e4c = icmp eq i32 %v1_9e4c, 0
  store i1 %v7_9e4c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_9e48, i32* @r7, align 4
  br i1 %v7_9e4c, label %dec_label_pc_a014, label %dec_label_pc_9e58

dec_label_pc_9e58:                                ; preds = %dec_label_pc_9df8
  store i32 %v2_8e9c, i32* %r1.global-to-local, align 4
  %v1_9e60 = load i32, i32* @r4, align 4
  %v2_9e60 = add i32 %v1_9e60, %v2_8e9c
  %v1_9e64 = add i32 %v5_9e48, -1
  %v2_9e64 = icmp ne i32 %v5_9e48, 0
  store i1 %v2_9e64, i1* %cpsr_c.global-to-local, align 1
  %v3_9e64 = sub i32 0, %v5_9e48
  %v4_9e64 = and i32 %v5_9e48, %v3_9e64
  %v5_9e64 = icmp slt i32 %v4_9e64, 0
  store i1 %v5_9e64, i1* %cpsr_v.global-to-local, align 1
  %v6_9e64 = icmp slt i32 %v1_9e64, 0
  store i1 %v6_9e64, i1* %cpsr_n.global-to-local, align 1
  %v7_9e64 = icmp eq i32 %v5_9e48, 1
  store i1 %v7_9e64, i1* %cpsr_z.global-to-local, align 1
  %v1_9e68 = add i32 %v2_9e60, -20736
  store i32 %v1_9e68, i32* %r3.global-to-local, align 4
  %v7_9e6c = icmp sgt i32 %v5_9e48, 1
  br i1 %v7_9e6c, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_9e58
  %v9_9e6c = add i32 %v5_9e48, -2
  store i32 %v9_9e6c, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9e58, %bb231
  %v3_9e78 = phi i32 [ %v5_9e48, %dec_label_pc_9e58 ], [ %v9_9e6c, %bb231 ]
  %v1_9e70 = add i32 %v2_9e60, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_9e78 = add i32 %v1_9e70, %v3_9e78
  %v5_9e78 = inttoptr i32 %v4_9e78 to i8*
  store i8 0, i8* %v5_9e78, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_8a44, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_89d4, i32* @lr, align 4
  %v1_9e8c = load i32, i32* @r4, align 4
  %v2_9e8c = add i32 %v1_9e8c, %v2_89d4
  %v3_9e8c = inttoptr i32 %v2_9e8c to i8*
  %v4_9e8c = load i8, i8* %v3_9e8c, align 1
  %v6_9e8c = zext i8 %v4_9e8c to i32
  store i32 %v6_9e8c, i32* %r0.global-to-local, align 4
  %v1_9e90 = add nsw i32 %v6_9e8c, -48
  store i32 %v1_9e90, i32* %r3.global-to-local, align 4
  %v2_9e94 = icmp ugt i32 %v1_9e90, 8
  store i1 %v2_9e94, i1* %cpsr_c.global-to-local, align 1
  %v3_9e94 = sub nsw i32 56, %v6_9e8c
  %v4_9e94 = and i32 %v3_9e94, %v1_9e90
  %v5_9e94 = icmp slt i32 %v4_9e94, 0
  store i1 %v5_9e94, i1* %cpsr_v.global-to-local, align 1
  %v6_9e94 = icmp ult i8 %v4_9e8c, 57
  store i1 %v6_9e94, i1* %cpsr_n.global-to-local, align 1
  %v7_9e94 = icmp eq i32 %v1_9e90, 9
  store i1 %v7_9e94, i1* %cpsr_z.global-to-local, align 1
  %v2_9e98 = xor i1 %v7_9e94, true
  %v3_9e98 = and i1 %v2_9e94, %v2_9e98
  br i1 %v3_9e98, label %.thread142, label %dec_label_pc_9ea0

.thread142:                                       ; preds = %bb232
  %v4_9e98 = load i32, i32* @r6, align 4
  br label %dec_label_pc_9ec8

dec_label_pc_9ea0:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9eb0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9ea4

dec_label_pc_9ea4:                                ; preds = %dec_label_pc_9ea4, %dec_label_pc_9ea0
  %v0_9ea4 = phi i32 [ %v1_9ea4, %dec_label_pc_9ea4 ], [ 0, %dec_label_pc_9ea0 ]
  %v1_9ea4 = add i32 %v0_9ea4, 1
  store i32 %v1_9ea4, i32* %ip.global-to-local, align 4
  store i32 %v10_8a44, i32* %r1.global-to-local, align 4
  store i32 %v1_9ea4, i32* %stack_var_-40, align 4
  %v2_9eb0 = add i32 %v1_9ea4, %v1_9eb0.pre
  %v3_9eb0 = inttoptr i32 %v2_9eb0 to i8*
  %v4_9eb0 = load i8, i8* %v3_9eb0, align 1
  %v6_9eb0 = zext i8 %v4_9eb0 to i32
  store i32 %v6_9eb0, i32* %r0.global-to-local, align 4
  %v1_9eb4 = add nsw i32 %v6_9eb0, -48
  %v2_9eb8 = icmp ugt i32 %v1_9eb4, 8
  store i1 %v2_9eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = sub nsw i32 56, %v6_9eb0
  %v4_9eb8 = and i32 %v3_9eb8, %v1_9eb4
  %v5_9eb8 = icmp slt i32 %v4_9eb8, 0
  store i1 %v5_9eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_9eb8 = icmp ult i8 %v4_9eb0, 57
  store i1 %v6_9eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9eb8 = icmp eq i32 %v1_9eb4, 9
  store i1 %v7_9eb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9ea4, i32* %r3.global-to-local, align 4
  %v2_9ec0 = xor i1 %v2_9eb8, true
  %v3_9ec0 = or i1 %v7_9eb8, %v2_9ec0
  br i1 %v3_9ec0, label %dec_label_pc_9ea4, label %dec_label_pc_9ec8

dec_label_pc_9ec8:                                ; preds = %dec_label_pc_9ea4, %.thread142
  %v2_9ed4 = phi i32 [ %v4_9e98, %.thread142 ], [ %v2_9eb0, %dec_label_pc_9ea4 ]
  %v0_9ec8 = phi i32 [ %v6_9e8c, %.thread142 ], [ %v6_9eb0, %dec_label_pc_9ea4 ]
  store i32 %v2_9ed4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9ec8 = icmp eq i32 %v0_9ec8, 0
  store i1 %v2_9ec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ec8, label %dec_label_pc_a014, label %dec_label_pc_9ed0

dec_label_pc_9ed0:                                ; preds = %dec_label_pc_9ec8
  store i32 0, i32* @r5, align 4
  %v3_9ed4 = inttoptr i32 %v2_9ed4 to i8*
  store i8 0, i8* %v3_9ed4, align 1
  store i32 %v10_8a44, i32* %r2.global-to-local, align 4
  %v3_9edc = load i32, i32* %stack_var_-40, align 4
  %v1_9ee0 = add i32 %v3_9edc, 1
  store i32 %v1_9ee0, i32* %ip.global-to-local, align 4
  store i32 %v1_9ee0, i32* %stack_var_-40, align 4
  %v0_9ee8 = load i32, i32* @r6, align 4
  %v2_9ee8 = add i32 %v0_9ee8, %v1_9ee0
  %v3_9ee8 = inttoptr i32 %v2_9ee8 to i8*
  %v4_9ee8 = load i8, i8* %v3_9ee8, align 1
  %v6_9ee8 = zext i8 %v4_9ee8 to i32
  store i32 %v6_9ee8, i32* %r3.global-to-local, align 4
  %v2_9eec = icmp ugt i8 %v4_9ee8, 31
  store i1 %v2_9eec, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9eec = icmp ult i8 %v4_9ee8, 32
  store i1 %v6_9eec, i1* %cpsr_n.global-to-local, align 1
  %v7_9eec = icmp eq i8 %v4_9ee8, 32
  store i1 %v7_9eec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9eec, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_9ed0
  store i32 %v2_9ee8, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_9ed0
  %v2_9ef0 = add i32 %v3_9edc, 2
  store i32 %v2_9ef0, i32* %ip.global-to-local, align 4
  %v2_9ef4 = add i32 %v0_9ee8, %v2_9ef0
  store i32 %v2_9ef4, i32* @r4, align 4
  store i32 %v2_9ef0, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_9efc = phi i32 [ %v2_9ee8, %.thread56 ], [ %v2_9ef4, %bb233 ]
  store i32 %v0_9efc, i32* %r0.global-to-local, align 4
  %v1_9f00 = inttoptr i32 %v0_9efc to i8*
  %v2_9f00 = call i32 @function_1204c(i8* %v1_9f00)
  store i32 ptrtoint ([5 x i8]* @global_var_15110.72 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9f00, i32* @r1, align 4
  %v0_9f0c = load i32, i32* @r4, align 4
  store i32 %v0_9f0c, i32* %r0.global-to-local, align 4
  %v4_9f10 = inttoptr i32 %v0_9f0c to i8*
  %v5_9f10 = call i32 @function_123a0(i8* %v4_9f10, i32 %v2_9f00, i32 ptrtoint ([5 x i8]* @global_var_15110.72 to i32))
  store i32 %v5_9f10, i32* %r0.global-to-local, align 4
  %v1_9f14 = add i32 %v5_9f10, 1
  %v2_9f14 = icmp eq i32 %v5_9f10, -1
  store i1 %v2_9f14, i1* %cpsr_c.global-to-local, align 1
  %v3_9f14 = sub i32 0, %v5_9f10
  %v4_9f14 = and i32 %v1_9f14, %v3_9f14
  %v5_9f14 = icmp slt i32 %v4_9f14, 0
  store i1 %v5_9f14, i1* %cpsr_v.global-to-local, align 1
  %v6_9f14 = icmp slt i32 %v1_9f14, 0
  store i1 %v6_9f14, i1* %cpsr_n.global-to-local, align 1
  %v7_9f14 = icmp eq i32 %v1_9f14, 0
  store i1 %v7_9f14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9f14, label %.thread60, label %dec_label_pc_9f24

.thread60:                                        ; preds = %bb234
  store i32 %v10_8a44, i32* %r1.global-to-local, align 4
  %v4_9f1c = load i32, i32* %v11_8a48, align 4
  store i32 %v4_9f1c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9f58

dec_label_pc_9f24:                                ; preds = %bb234
  store i32 %v10_8a44, i32* %r3.global-to-local, align 4
  %v3_9f28 = load i32, i32* %stack_var_-40, align 4
  %v0_9f2c = load i32, i32* @r6, align 4
  %v2_9f2c = add i32 %v0_9f2c, %v3_9f28
  store i32 %v2_9f2c, i32* @r4, align 4
  store i32 %v2_9f2c, i32* %r0.global-to-local, align 4
  %v1_9f34 = inttoptr i32 %v2_9f2c to i8*
  %v2_9f34 = call i32 @function_1204c(i8* %v1_9f34)
  store i32 ptrtoint ([5 x i8]* @global_var_15110.72 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9f34, i32* @r1, align 4
  %v0_9f40 = load i32, i32* @r4, align 4
  store i32 %v0_9f40, i32* %r0.global-to-local, align 4
  %v4_9f44 = inttoptr i32 %v0_9f40 to i8*
  %v5_9f44 = call i32 @function_123a0(i8* %v4_9f44, i32 %v2_9f34, i32 ptrtoint ([5 x i8]* @global_var_15110.72 to i32))
  store i32 %v5_9f44, i32* %r0.global-to-local, align 4
  store i32 %v10_8a44, i32* @lr, align 4
  %v3_9f4c = load i32, i32* %stack_var_-40, align 4
  %v2_9f50 = add i32 %v3_9f4c, %v5_9f44
  store i32 %v2_9f50, i32* %ip.global-to-local, align 4
  store i32 %v2_9f50, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9f58

dec_label_pc_9f58:                                ; preds = %.thread60, %dec_label_pc_9f24
  %v0_a4e0 = phi i32 [ %v4_9f1c, %.thread60 ], [ %v2_9f50, %dec_label_pc_9f24 ]
  %v0_9f58 = load i32, i32* @r6, align 4
  %v2_9f58 = add i32 %v0_9f58, %v0_a4e0
  %v3_9f58 = inttoptr i32 %v2_9f58 to i8*
  %v4_9f58 = load i8, i8* %v3_9f58, align 1
  %v6_9f58 = zext i8 %v4_9f58 to i32
  store i32 %v6_9f58, i32* %r3.global-to-local, align 4
  %v2_9f5c = icmp ugt i8 %v4_9f58, 33
  store i1 %v2_9f5c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9f5c = icmp ult i8 %v4_9f58, 34
  store i1 %v6_9f5c, i1* %cpsr_n.global-to-local, align 1
  %v7_9f5c = icmp eq i8 %v4_9f58, 34
  store i1 %v7_9f5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9f5c, label %dec_label_pc_a4e0, label %dec_label_pc_9f64

dec_label_pc_9f64:                                ; preds = %dec_label_pc_a4e0, %dec_label_pc_9f58, %dec_label_pc_a508
  %v0_9f64 = load i32, i32* @r6, align 4
  store i32 %v0_9f64, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9f6c = inttoptr i32 %v0_9f64 to i8*
  %v3_9f6c = call i32 @function_12178(i8* %v2_9f6c, i32 10)
  store i32 %v3_9f6c, i32* %r0.global-to-local, align 4
  %v1_9f70 = add i32 %v3_9f6c, -1
  store i32 %v1_9f70, i32* %r3.global-to-local, align 4
  %v1_9f74 = add i32 %v3_9f6c, -9
  %v2_9f74 = icmp ugt i32 %v1_9f70, 7
  store i1 %v2_9f74, i1* %cpsr_c.global-to-local, align 1
  %v3_9f74 = sub i32 8, %v3_9f6c
  %v4_9f74 = and i32 %v3_9f74, %v1_9f70
  %v5_9f74 = icmp slt i32 %v4_9f74, 0
  store i1 %v5_9f74, i1* %cpsr_v.global-to-local, align 1
  %v6_9f74 = icmp slt i32 %v1_9f74, 0
  store i1 %v6_9f74, i1* %cpsr_n.global-to-local, align 1
  %v7_9f74 = icmp eq i32 %v1_9f70, 8
  store i1 %v7_9f74, i1* %cpsr_z.global-to-local, align 1
  %v2_9f78 = xor i1 %v2_9f74, true
  %v3_9f78 = or i1 %v7_9f74, %v2_9f78
  br i1 %v3_9f78, label %dec_label_pc_9f8c.preheader, label %dec_label_pc_9fa0

dec_label_pc_9f8c.preheader:                      ; preds = %dec_label_pc_9f64
  store i32 %v2_8f2c, i32* %ip.global-to-local, align 4
  %v6_9f7c = add i32 %v3_9f6c, %v2_8f2c
  store i32 %v6_9f7c, i32* @r4, align 4
  br label %dec_label_pc_9f8c

dec_label_pc_9f88:                                ; preds = %dec_label_pc_9f8c
  %v1_9f88 = call i32 @function_13c3c(i32 1)
  store i32 %v1_9f88, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f8c

dec_label_pc_9f8c:                                ; preds = %dec_label_pc_9f8c.preheader, %dec_label_pc_9f88
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9f90 = call i32 @function_12cb0(i32* null)
  %v1_9f94 = load i32, i32* @r4, align 4
  %v2_9f94 = sub i32 %v2_9f90, %v1_9f94
  %v3_9f94 = icmp uge i32 %v2_9f90, %v1_9f94
  store i1 %v3_9f94, i1* %cpsr_c.global-to-local, align 1
  %v4_9f94 = xor i32 %v1_9f94, %v2_9f90
  %v5_9f94 = xor i32 %v2_9f94, %v2_9f90
  %v6_9f94 = and i32 %v5_9f94, %v4_9f94
  %v7_9f94 = icmp slt i32 %v6_9f94, 0
  store i1 %v7_9f94, i1* %cpsr_v.global-to-local, align 1
  %v8_9f94 = icmp slt i32 %v2_9f94, 0
  store i1 %v8_9f94, i1* %cpsr_n.global-to-local, align 1
  %v9_9f94 = icmp eq i32 %v2_9f90, %v1_9f94
  store i1 %v9_9f94, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_9f94, label %dec_label_pc_9fa0, label %dec_label_pc_9f88

dec_label_pc_9fa0:                                ; preds = %dec_label_pc_9f8c, %dec_label_pc_9f64
  store i32 %v10_8a44, i32* @lr, align 4
  %v3_9fa4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9fa4, i32* @r4, align 4
  %v0_9fa8 = load i32, i32* @r6, align 4
  %v2_9fa8 = add i32 %v0_9fa8, %v3_9fa4
  store i32 %v2_9fa8, i32* @r5, align 4
  store i32 %v2_9fa8, i32* %r0.global-to-local, align 4
  %v1_9fb0 = inttoptr i32 %v2_9fa8 to i8*
  %v2_9fb0 = call i32 @function_1204c(i8* %v1_9fb0)
  store i32 ptrtoint ([5 x i8]* @global_var_15108.70 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9fb0, i32* @r1, align 4
  %v0_9fbc = load i32, i32* @r5, align 4
  store i32 %v0_9fbc, i32* %r0.global-to-local, align 4
  %v4_9fc0 = inttoptr i32 %v0_9fbc to i8*
  %v5_9fc0 = call i32 @function_123a0(i8* %v4_9fc0, i32 %v2_9fb0, i32 ptrtoint ([5 x i8]* @global_var_15108.70 to i32))
  store i32 %v5_9fc0, i32* %r0.global-to-local, align 4
  %v1_9fc4 = add i32 %v5_9fc0, -4
  %v2_9fc4 = icmp ugt i32 %v5_9fc0, 3
  store i1 %v2_9fc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9fc4 = sub i32 3, %v5_9fc0
  %v4_9fc4 = and i32 %v3_9fc4, %v5_9fc0
  %v5_9fc4 = icmp slt i32 %v4_9fc4, 0
  store i1 %v5_9fc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9fc4 = icmp slt i32 %v1_9fc4, 0
  store i1 %v6_9fc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9fc4 = icmp eq i32 %v5_9fc0, 4
  store i1 %v7_9fc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9fc4, label %dec_label_pc_a3bc, label %dec_label_pc_9fcc

dec_label_pc_9fcc:                                ; preds = %dec_label_pc_9fa0
  %v0_9fcc = load i32, i32* @r6, align 4
  %v1_9fcc = load i32, i32* @r4, align 4
  %v2_9fcc = add i32 %v1_9fcc, %v0_9fcc
  %v3_9fcc = inttoptr i32 %v2_9fcc to i8*
  %v4_9fcc = load i8, i8* %v3_9fcc, align 1
  %v6_9fcc = zext i8 %v4_9fcc to i32
  store i32 %v6_9fcc, i32* %r3.global-to-local, align 4
  %v2_9fd0 = icmp ugt i8 %v4_9fcc, 46
  store i1 %v2_9fd0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9fd0 = icmp ult i8 %v4_9fcc, 47
  store i1 %v6_9fd0, i1* %cpsr_n.global-to-local, align 1
  %v7_9fd0 = icmp eq i8 %v4_9fcc, 47
  store i1 %v7_9fd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9fd0, label %dec_label_pc_a534, label %dec_label_pc_9fd8

dec_label_pc_9fd8:                                ; preds = %dec_label_pc_a550, %dec_label_pc_a534, %dec_label_pc_a48c, %dec_label_pc_a470, %dec_label_pc_9fcc, %dec_label_pc_a580, %dec_label_pc_a4bc
  %v0_9fd8 = load i32, i32* %sb.global-to-local, align 4
  %v1_9fdc = add i32 %v0_9fd8, 1431
  store i32 %v1_9fdc, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_150e4.48 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v4_9fe8 = call i32 @function_12fd0(i32 %v1_9fdc, i32 ptrtoint ([4 x i8]* @global_var_150e4.48 to i32), i32 4)
  store i32 %v4_9fe8, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_9ff0 = load i32, i32* @r8, align 4
  %v3_9ff0 = add i32 %v2_9ff0, -1452
  %v4_9ff0 = inttoptr i32 %v3_9ff0 to i8*
  store i8 10, i8* %v4_9ff0, align 1
  br label %dec_label_pc_8f8c

dec_label_pc_9ff8:                                ; preds = %dec_label_pc_8d64
  store i32 %v1_8d64, i32* %r3.global-to-local, align 4
  %v1_9ffc = trunc i32 %v1_8d64 to i8
  store i8 %v1_9ffc, i8* %v2_8da4, align 1
  %v0_a000 = load i32, i32* @r6, align 4
  %v1_a000 = add i32 %v0_a000, -1431
  %v2_a000 = inttoptr i32 %v1_a000 to i32*
  %v3_a000 = load i32, i32* %v2_a000, align 4
  store i32 %v3_a000, i32* %r0.global-to-local, align 4
  %v1_a004 = call i32 @function_129e0(i32 %v3_a000)
  store i32 %v1_a004, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_a00c = load i32, i32* @r6, align 4
  %v2_a00c = add i32 %v1_a00c, -1431
  %v3_a00c = inttoptr i32 %v2_a00c to i32*
  store i32 -1, i32* %v3_a00c, align 4
  br label %dec_label_pc_8d84

dec_label_pc_a014:                                ; preds = %dec_label_pc_9ec8, %dec_label_pc_9df8, %dec_label_pc_9dcc
  %v0_a014 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a014, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_150fc.66 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_89d4, i32* %r0.global-to-local, align 4
  %v5_a024 = call i32 @function_12110(i32 %v2_89d4, i32 %v0_a014, i32 ptrtoint ([5 x i8]* @global_var_150fc.66 to i32), i32 4)
  %v0_a028 = load i32, i32* %sb.global-to-local, align 4
  %v1_a02c = add i32 %v0_a028, 1431
  store i32 %v1_a02c, i32* @r4, align 4
  store i32 %v5_a024, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15118.74 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_a02c, i32* %r0.global-to-local, align 4
  %v3_a03c = inttoptr i32 %v1_a02c to i8*
  %v4_a03c = call i32 @function_1242c(i8* %v3_a03c, i32 ptrtoint ([5 x i8]* @global_var_15118.74 to i32))
  store i32 %v4_a03c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a040 = icmp slt i32 %v4_a03c, 0
  store i1 %v1_a040, i1* %cpsr_n.global-to-local, align 1
  %v2_a040 = icmp eq i32 %v4_a03c, 0
  store i1 %v2_a040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a040, label %dec_label_pc_a1fc, label %dec_label_pc_a048

dec_label_pc_a048:                                ; preds = %dec_label_pc_a1fc, %dec_label_pc_a014
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_a04c = load i32, i32* @r8, align 4
  %v3_a04c = add i32 %v2_a04c, -1452
  %v4_a04c = inttoptr i32 %v3_a04c to i8*
  store i8 7, i8* %v4_a04c, align 1
  br label %dec_label_pc_a050

dec_label_pc_a050:                                ; preds = %bb240, %dec_label_pc_a048
  %v0_a050 = load i32, i32* @r5, align 4
  store i32 %v0_a050, i32* %r2.global-to-local, align 4
  %v0_a054 = load i32, i32* @r8, align 4
  %v1_a054 = add i32 %v0_a054, -1456
  %v2_a054 = inttoptr i32 %v1_a054 to i32*
  %v3_a054 = load i32, i32* %v2_a054, align 4
  store i32 %v3_a054, i32* %r0.global-to-local, align 4
  store i32 %v2_89d4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_a060 = call i32 @function_131dc(i32 %v3_a054, i32* nonnull %stack_var_-20809, i32 %v0_a050, i32 16384)
  store i32 %v5_a060, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f8c

dec_label_pc_a068:                                ; preds = %dec_label_pc_9558
  %v2_a068 = add i32 %v0_a068, -10240
  %v3_a068 = icmp ugt i32 %v0_a068, 10239
  store i1 %v3_a068, i1* %cpsr_c.global-to-local, align 1
  %v4_a068 = sub i32 10239, %v0_a068
  %v5_a068 = and i32 %v4_a068, %v0_a068
  %v6_a068 = icmp slt i32 %v5_a068, 0
  store i1 %v6_a068, i1* %cpsr_v.global-to-local, align 1
  %v7_a068 = icmp slt i32 %v2_a068, 0
  store i1 %v7_a068, i1* %cpsr_n.global-to-local, align 1
  %v8_a068 = icmp eq i32 %v0_a068, 10240
  store i1 %v8_a068, i1* %cpsr_z.global-to-local, align 1
  %v5_a06c = icmp slt i32 %v0_a068, 10240
  br i1 %v5_a06c, label %dec_label_pc_8f8c, label %dec_label_pc_9574

dec_label_pc_a074:                                ; preds = %dec_label_pc_9d7c
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_a078 = load i32, i32* @r4, align 4
  %v2_a078 = inttoptr i32 %v1_a078 to i32*
  store i32 104, i32* %v2_a078, align 4
  br label %dec_label_pc_9db0

dec_label_pc_a080:                                ; preds = %dec_label_pc_9b84
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_a084 = load i32, i32* %fp.global-to-local, align 4
  %v2_a084 = inttoptr i32 %v1_a084 to i32*
  store i32 104, i32* %v2_a084, align 4
  br label %dec_label_pc_a088

dec_label_pc_a088:                                ; preds = %dec_label_pc_a0a4, %dec_label_pc_a080
  %v0_a088 = load i32, i32* @r8, align 4
  %v1_a088 = add i32 %v0_a088, -1456
  %v2_a088 = inttoptr i32 %v1_a088 to i32*
  %v3_a088 = load i32, i32* %v2_a088, align 4
  store i32 %v3_a088, i32* %r0.global-to-local, align 4
  %v1_a08c = call i32 @function_129e0(i32 %v3_a088)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_a098 = load i32, i32* @r8, align 4
  %v2_a098 = add i32 %v1_a098, -1456
  %v3_a098 = inttoptr i32 %v2_a098 to i32*
  store i32 -1, i32* %v3_a098, align 4
  %v0_a09c = load i32, i32* %lr.global-to-local, align 4
  %v1_a09c = trunc i32 %v0_a09c to i8
  %v2_a09c = load i32, i32* @r8, align 4
  %v3_a09c = add i32 %v2_a09c, -1452
  %v4_a09c = inttoptr i32 %v3_a09c to i8*
  store i8 %v1_a09c, i8* %v4_a09c, align 1
  br label %dec_label_pc_8f8c

dec_label_pc_a0a4:                                ; preds = %dec_label_pc_9bac
  %v0_a0a4 = load i32, i32* %fp.global-to-local, align 4
  %v1_a0a4 = inttoptr i32 %v0_a0a4 to i32*
  %v2_a0a4 = load i32, i32* %v1_a0a4, align 4
  store i32 %v2_a0a4, i32* %r3.global-to-local, align 4
  %v1_a0a8 = add i32 %v2_a0a4, -11
  %v2_a0a8 = icmp ugt i32 %v2_a0a4, 10
  store i1 %v2_a0a8, i1* %cpsr_c.global-to-local, align 1
  %v3_a0a8 = sub i32 10, %v2_a0a4
  %v4_a0a8 = and i32 %v3_a0a8, %v2_a0a4
  %v5_a0a8 = icmp slt i32 %v4_a0a8, 0
  store i1 %v5_a0a8, i1* %cpsr_v.global-to-local, align 1
  %v6_a0a8 = icmp slt i32 %v1_a0a8, 0
  store i1 %v6_a0a8, i1* %cpsr_n.global-to-local, align 1
  %v7_a0a8 = icmp eq i32 %v2_a0a4, 11
  store i1 %v7_a0a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a0a8, label %dec_label_pc_8f8c, label %dec_label_pc_a088

dec_label_pc_a0b4:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_8a44, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_a0c0 = load i32, i32* @r5, align 4
  %v1_a0c0 = add i32 %v0_a0c0, 4
  %v2_a0c0 = inttoptr i32 %v1_a0c0 to i8*
  %v3_a0c0 = load i8, i8* %v2_a0c0, align 1
  %v4_a0c0 = zext i8 %v3_a0c0 to i32
  store i32 %v4_a0c0, i32* %r3.global-to-local, align 4
  %v2_a0c4 = icmp ugt i8 %v3_a0c0, 114
  store i1 %v2_a0c4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a0c4 = icmp ult i8 %v3_a0c0, 115
  store i1 %v6_a0c4, i1* %cpsr_n.global-to-local, align 1
  %v7_a0c4 = icmp eq i8 %v3_a0c0, 115
  store i1 %v7_a0c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a0c4, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_a0b4
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_a0b4, %bb235
  %v3_a0d4 = phi i32 [ 7, %dec_label_pc_a0b4 ], [ 8, %bb235 ]
  store i32 %v10_8a44, i32* %r3.global-to-local, align 4
  store i32 %v0_a0c0, i32* @r0, align 4
  %v1_a0dc = load i32, i32* %r6.global-to-local, align 4
  %v2_a0dc = sub i32 %v1_a0dc, %v3_a0d4
  store i32 %v2_a0dc, i32* @r2, align 4
  %v2_a0e0 = add i32 %v3_a0d4, %v0_a0c0
  store i32 %v2_a0e0, i32* @r1, align 4
  %v3_a0e4 = call i32 @function_12fe0(i32 %v0_a0c0, i32 %v2_a0e0, i32 %v2_a0dc)
  store i32 %v3_a0e4, i32* %r0.global-to-local, align 4
  store i32 %v10_8a44, i32* %lr.global-to-local, align 4
  %v0_a0ec = load i32, i32* @r7, align 4
  store i32 %v0_a0ec, i32* %stack_var_-40, align 4
  store i32 %v2_89d4, i32* %r1.global-to-local, align 4
  %v1_a0f4 = load i32, i32* @r4, align 4
  %v2_a0f4 = add i32 %v1_a0f4, %v2_89d4
  %v3_a0f4 = inttoptr i32 %v2_a0f4 to i8*
  %v4_a0f4 = load i8, i8* %v3_a0f4, align 1
  %v6_a0f4 = zext i8 %v4_a0f4 to i32
  store i32 %v6_a0f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a0f8 = icmp eq i8 %v4_a0f4, 0
  store i1 %v2_a0f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a0f8, label %dec_label_pc_a13c, label %dec_label_pc_a100

dec_label_pc_a100:                                ; preds = %.thread63
  %v2_a100 = icmp ugt i8 %v4_a0f4, 46
  store i1 %v2_a100, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a100 = icmp ult i8 %v4_a0f4, 47
  store i1 %v6_a100, i1* %cpsr_n.global-to-local, align 1
  %v7_a100 = icmp eq i8 %v4_a0f4, 47
  store i1 %v7_a100, i1* %cpsr_z.global-to-local, align 1
  %v1_a104 = load i32, i32* @r5, align 4
  br i1 %v7_a100, label %bb236, label %dec_label_pc_a10c

bb236:                                            ; preds = %dec_label_pc_a100
  store i32 %v1_a104, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a29c

dec_label_pc_a10c:                                ; preds = %dec_label_pc_a100
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a11c

dec_label_pc_a114:                                ; preds = %dec_label_pc_a11c
  %v2_a114 = icmp ugt i8 %v4_a128, 46
  store i1 %v2_a114, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a114 = icmp ult i8 %v4_a128, 47
  store i1 %v6_a114, i1* %cpsr_n.global-to-local, align 1
  %v7_a114 = icmp eq i8 %v4_a128, 47
  store i1 %v7_a114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a114, label %dec_label_pc_a29c, label %dec_label_pc_a11c

dec_label_pc_a11c:                                ; preds = %dec_label_pc_a114, %dec_label_pc_a10c
  %v0_a130 = phi i32 [ %v1_a130, %dec_label_pc_a114 ], [ 1, %dec_label_pc_a10c ]
  store i32 %v0_a130, i32* %ip.global-to-local, align 4
  store i32 %v10_8a44, i32* %lr.global-to-local, align 4
  store i32 %v0_a130, i32* %stack_var_-40, align 4
  %v2_a128 = add i32 %v0_a130, %v1_a104
  %v3_a128 = inttoptr i32 %v2_a128 to i8*
  %v4_a128 = load i8, i8* %v3_a128, align 1
  %v6_a128 = zext i8 %v4_a128 to i32
  store i32 %v6_a128, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a12c = icmp eq i8 %v4_a128, 0
  store i1 %v2_a12c, i1* %cpsr_z.global-to-local, align 1
  %v1_a130 = add i32 %v0_a130, 1
  store i32 %v1_a130, i32* %r3.global-to-local, align 4
  store i32 %v2_a128, i32* %r1.global-to-local, align 4
  br i1 %v2_a12c, label %dec_label_pc_a13c, label %dec_label_pc_a114

dec_label_pc_a13c:                                ; preds = %dec_label_pc_a11c, %.thread63, %dec_label_pc_a29c
  %v0_a13c = load i32, i32* @r5, align 4
  store i32 %v0_a13c, i32* %r0.global-to-local, align 4
  %v1_a140 = inttoptr i32 %v0_a13c to i8*
  %v2_a140 = call i32 @function_1204c(i8* %v1_a140)
  store i32 %v2_a140, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a144 = icmp slt i32 %v2_a140, 0
  store i1 %v1_a144, i1* %cpsr_n.global-to-local, align 1
  %v2_a144 = icmp eq i32 %v2_a140, 0
  store i1 %v2_a144, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_a140, 1
  br i1 %tmp237, label %dec_label_pc_a168, label %dec_label_pc_a14c

dec_label_pc_a14c:                                ; preds = %dec_label_pc_a13c
  %v0_a14c = load i32, i32* @r5, align 4
  store i32 %v0_a14c, i32* %r0.global-to-local, align 4
  %v1_a150 = inttoptr i32 %v0_a14c to i8*
  %v2_a150 = call i32 @function_1204c(i8* %v1_a150)
  store i32 %v2_a150, i32* %r0.global-to-local, align 4
  %v1_a154 = add i32 %v2_a150, -127
  %v2_a154 = icmp ugt i32 %v2_a150, 126
  store i1 %v2_a154, i1* %cpsr_c.global-to-local, align 1
  %v3_a154 = sub i32 126, %v2_a150
  %v4_a154 = and i32 %v3_a154, %v2_a150
  %v5_a154 = icmp slt i32 %v4_a154, 0
  store i1 %v5_a154, i1* %cpsr_v.global-to-local, align 1
  %v6_a154 = icmp slt i32 %v1_a154, 0
  store i1 %v6_a154, i1* %cpsr_n.global-to-local, align 1
  %v7_a154 = icmp eq i32 %v2_a150, 127
  store i1 %v7_a154, i1* %cpsr_z.global-to-local, align 1
  %v7_a158 = icmp sgt i32 %v2_a150, 127
  br i1 %v7_a158, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_a14c
  %v8_a158 = load i32, i32* %sb.global-to-local, align 4
  %v9_a15c = add i32 %v8_a158, 789
  store i32 %v9_a15c, i32* %r0.global-to-local, align 4
  %v8_a160 = load i32, i32* @r5, align 4
  store i32 %v8_a160, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_a14c, %bb238
  store i32 41320, i32* %lr.global-to-local, align 4
  %v3_a164 = xor i1 %v6_a154, %v5_a154
  %v4_a164 = or i1 %v7_a154, %v3_a164
  call void @__pseudo_cond_branch(i1 %v4_a164, i32 ptrtoint (i32* @global_var_12074.75 to i32))
  br label %dec_label_pc_a168

dec_label_pc_a168:                                ; preds = %dec_label_pc_a13c, %.thread66
  store i32 %v10_8a44, i32* %r1.global-to-local, align 4
  %v3_a16c = load i32, i32* %stack_var_-40, align 4
  %v0_a170 = load i32, i32* @r5, align 4
  %v2_a170 = add i32 %v3_a16c, 1
  %v1_a174 = add i32 %v2_a170, %v0_a170
  store i32 %v1_a174, i32* %r0.global-to-local, align 4
  %v1_a178 = inttoptr i32 %v1_a174 to i8*
  %v2_a178 = call i32 @function_1204c(i8* %v1_a178)
  store i32 %v2_a178, i32* %r0.global-to-local, align 4
  %v1_a17c = add i32 %v2_a178, -255
  %v2_a17c = icmp ugt i32 %v2_a178, 254
  store i1 %v2_a17c, i1* %cpsr_c.global-to-local, align 1
  %v3_a17c = sub i32 254, %v2_a178
  %v4_a17c = and i32 %v3_a17c, %v2_a178
  %v5_a17c = icmp slt i32 %v4_a17c, 0
  store i1 %v5_a17c, i1* %cpsr_v.global-to-local, align 1
  %v6_a17c = icmp slt i32 %v1_a17c, 0
  store i1 %v6_a17c, i1* %cpsr_n.global-to-local, align 1
  %v7_a17c = icmp eq i32 %v2_a178, 255
  store i1 %v7_a17c, i1* %cpsr_z.global-to-local, align 1
  %v8_a180 = icmp sgt i32 %v2_a178, 255
  br i1 %v8_a180, label %dec_label_pc_9b54, label %dec_label_pc_a184

dec_label_pc_a184:                                ; preds = %dec_label_pc_a168
  %v0_a184 = load i32, i32* %sb.global-to-local, align 4
  %v1_a188 = add i32 %v0_a184, 533
  store i32 %v1_a188, i32* @r4, align 4
  store i32 %v1_a188, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_a194 = call i32 @function_120ec(i32 %v1_a188, i32 255)
  store i32 %v10_8a44, i32* %r2.global-to-local, align 4
  %v3_a19c = load i32, i32* %stack_var_-40, align 4
  %v0_a1a0 = load i32, i32* @r5, align 4
  %v2_a1a0 = add i32 %v3_a19c, 1
  %v1_a1a4 = add i32 %v2_a1a0, %v0_a1a0
  store i32 %v1_a1a4, i32* %r0.global-to-local, align 4
  %v1_a1a8 = inttoptr i32 %v1_a1a4 to i8*
  %v2_a1a8 = call i32 @function_1204c(i8* %v1_a1a8)
  store i32 %v2_a1a8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a1ac = icmp slt i32 %v2_a1a8, 0
  store i1 %v1_a1ac, i1* %cpsr_n.global-to-local, align 1
  %v2_a1ac = icmp eq i32 %v2_a1a8, 0
  store i1 %v2_a1ac, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_a1a8, 1
  br i1 %tmp239, label %dec_label_pc_9b54, label %dec_label_pc_a1b4

dec_label_pc_a1b4:                                ; preds = %dec_label_pc_a184
  store i32 %v10_8a44, i32* %r3.global-to-local, align 4
  %v3_a1b8 = load i32, i32* %stack_var_-40, align 4
  %v0_a1bc = load i32, i32* @r5, align 4
  %v0_a1c0 = load i32, i32* @r4, align 4
  store i32 %v0_a1c0, i32* @r0, align 4
  %v2_a1bc = add i32 %v3_a1b8, 1
  %v1_a1c4 = add i32 %v2_a1bc, %v0_a1bc
  store i32 %v1_a1c4, i32* %r1.global-to-local, align 4
  %v2_a1c8 = inttoptr i32 %v0_a1c0 to i8*
  %v3_a1c8 = call i32 @function_12074(i8* %v2_a1c8, i32 %v1_a1c4)
  store i32 %v3_a1c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9b54

dec_label_pc_a1d0:                                ; preds = %dec_label_pc_9524
  %v0_a1d0 = load i32, i32* @r8, align 4
  %v1_a1d0 = add i32 %v0_a1d0, -1456
  %v2_a1d0 = inttoptr i32 %v1_a1d0 to i32*
  %v3_a1d0 = load i32, i32* %v2_a1d0, align 4
  store i32 %v3_a1d0, i32* %r0.global-to-local, align 4
  %v1_a1d4 = call i32 @function_129e0(i32 %v3_a1d0)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_a1e0 = load i32, i32* @r8, align 4
  %v2_a1e0 = add i32 %v1_a1e0, -1456
  %v3_a1e0 = inttoptr i32 %v2_a1e0 to i32*
  store i32 -1, i32* %v3_a1e0, align 4
  %v0_a1e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1e4 = trunc i32 %v0_a1e4 to i8
  %v2_a1e4 = load i32, i32* @r8, align 4
  %v3_a1e4 = add i32 %v2_a1e4, -1452
  %v4_a1e4 = inttoptr i32 %v3_a1e4 to i8*
  store i8 %v1_a1e4, i8* %v4_a1e4, align 1
  br label %dec_label_pc_8f8c

dec_label_pc_a1ec:                                ; preds = %dec_label_pc_9da4
  %v0_a1ec = load i32, i32* @r8, align 4
  %v1_a1ec = add i32 %v0_a1ec, -1452
  %v2_a1ec = inttoptr i32 %v1_a1ec to i8*
  %v3_a1ec = load i8, i8* %v2_a1ec, align 1
  %v4_a1ec = zext i8 %v3_a1ec to i32
  store i32 %v4_a1ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a1f0 = icmp eq i8 %v3_a1ec, 0
  store i1 %v2_a1f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1f0, label %dec_label_pc_8f8c, label %dec_label_pc_9b54

dec_label_pc_a1fc:                                ; preds = %dec_label_pc_a014
  %v0_a1fc = load i32, i32* @r4, align 4
  store i32 %v0_a1fc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_150e4.48 to i32), i32* %r1.global-to-local, align 4
  %v3_a204 = inttoptr i32 %v0_a1fc to i8*
  %v4_a204 = call i32 @function_1242c(i8* %v3_a204, i32 ptrtoint ([4 x i8]* @global_var_150e4.48 to i32))
  store i32 %v4_a204, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a208 = icmp slt i32 %v4_a204, 0
  store i1 %v1_a208, i1* %cpsr_n.global-to-local, align 1
  %v2_a208 = icmp eq i32 %v4_a204, 0
  store i1 %v2_a208, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a208, label %bb240, label %dec_label_pc_a048

bb240:                                            ; preds = %dec_label_pc_a1fc
  %v0_a210 = load i32, i32* %fp.global-to-local, align 4
  %v1_a210 = load i32, i32* @r5, align 4
  %v2_a210 = sub i32 %v0_a210, %v1_a210
  %v3_a210 = icmp uge i32 %v0_a210, %v1_a210
  store i1 %v3_a210, i1* %cpsr_c.global-to-local, align 1
  %v4_a210 = xor i32 %v1_a210, %v0_a210
  %v5_a210 = xor i32 %v2_a210, %v0_a210
  %v6_a210 = and i32 %v5_a210, %v4_a210
  %v7_a210 = icmp slt i32 %v6_a210, 0
  store i1 %v7_a210, i1* %cpsr_v.global-to-local, align 1
  %v8_a210 = icmp slt i32 %v2_a210, 0
  store i1 %v8_a210, i1* %cpsr_n.global-to-local, align 1
  %v9_a210 = icmp eq i32 %v0_a210, %v1_a210
  store i1 %v9_a210, i1* %cpsr_z.global-to-local, align 1
  %v7_a214 = icmp sgt i32 %v0_a210, %v1_a210
  %. = select i1 %v7_a214, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_a21c = trunc i32 %. to i8
  %v10_a21c = load i32, i32* @r8, align 4
  %v11_a21c = add i32 %v10_a21c, -1452
  %v12_a21c = inttoptr i32 %v11_a21c to i8*
  store i8 %v9_a21c, i8* %v12_a21c, align 1
  br label %dec_label_pc_a050

dec_label_pc_a228:                                ; preds = %dec_label_pc_9c9c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v0_a230 = load i32, i32* @r8, align 4
  %v1_a230 = add i32 %v0_a230, 656
  %v2_a230 = inttoptr i32 %v1_a230 to i32*
  %v3_a230 = load i32, i32* %v2_a230, align 4
  store i32 %v3_a230, i32* @r4, align 4
  %v3_a234 = call i32 @function_114b4(i32 43, i32* null)
  %v0_a238 = load i32, i32* @r4, align 4
  store i32 %v0_a238, i32* %r1.global-to-local, align 4
  store i32 %v3_a234, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_a244 = load i32, i32* @r7, align 4
  store i32 %v0_a244, i32* %r0.global-to-local, align 4
  %v4_a248 = call i32 @function_12110(i32 %v0_a244, i32 %v0_a238, i32 %v3_a234, i32 11)
  store i32 %v4_a248, i32* %r0.global-to-local, align 4
  %v0_a24c = load i32, i32* @r8, align 4
  %v1_a24c = add i32 %v0_a24c, 656
  %v2_a24c = inttoptr i32 %v1_a24c to i32*
  %v3_a24c = load i32, i32* %v2_a24c, align 4
  %v0_a250 = load i32, i32* @r7, align 4
  %v2_a250 = add i32 %v0_a250, %v4_a248
  store i32 %v2_a250, i32* @r5, align 4
  store i32 %v4_a248, i32* @r4, align 4
  %v2_a258 = sub i32 %v3_a24c, %v4_a248
  store i32 %v2_a258, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15120.77 to i32), i32* %r2.global-to-local, align 4
  %v0_a260 = load i32, i32* @sl, align 4
  store i32 %v0_a260, i32* %r3.global-to-local, align 4
  store i32 %v2_a250, i32* %r0.global-to-local, align 4
  %v4_a268 = call i32 @function_12110(i32 %v2_a250, i32 %v2_a258, i32 ptrtoint (i32* @global_var_15120.77 to i32), i32 %v0_a260)
  store i32 %v4_a268, i32* %r0.global-to-local, align 4
  %v0_a26c = load i32, i32* @r8, align 4
  %v1_a26c = add i32 %v0_a26c, 12
  %v2_a26c = inttoptr i32 %v1_a26c to i32*
  %v3_a26c = load i32, i32* %v2_a26c, align 4
  store i32 %v3_a26c, i32* %r3.global-to-local, align 4
  %v0_a270 = load i32, i32* @r4, align 4
  %v2_a270 = add i32 %v0_a270, %v4_a268
  store i32 %v2_a270, i32* %r6.global-to-local, align 4
  %v1_a274 = load i32, i32* %sb.global-to-local, align 4
  %v2_a274 = add i32 %v1_a274, %v2_a270
  store i32 %v2_a274, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_a27c = add i32 %v3_a26c, -4
  %v2_a27c = icmp ugt i32 %v3_a26c, 3
  store i1 %v2_a27c, i1* %cpsr_c.global-to-local, align 1
  %v3_a27c = sub i32 3, %v3_a26c
  %v4_a27c = and i32 %v3_a27c, %v3_a26c
  %v5_a27c = icmp slt i32 %v4_a27c, 0
  store i1 %v5_a27c, i1* %cpsr_v.global-to-local, align 1
  %v6_a27c = icmp slt i32 %v1_a27c, 0
  store i1 %v6_a27c, i1* %cpsr_n.global-to-local, align 1
  %v7_a27c = icmp eq i32 %v3_a26c, 4
  store i1 %v7_a27c, i1* %cpsr_z.global-to-local, align 1
  %v3_a280 = add i32 %v2_a274, 2115
  %v4_a280 = inttoptr i32 %v3_a280 to i8*
  store i8 0, i8* %v4_a280, align 1
  %v7_a284 = icmp sgt i32 %v3_a26c, 4
  br i1 %v7_a284, label %dec_label_pc_a288, label %dec_label_pc_a310

dec_label_pc_a288:                                ; preds = %dec_label_pc_a228, %dec_label_pc_a310, %dec_label_pc_a320
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_a290 = load i32, i32* @r8, align 4
  %v2_a290 = add i32 %v1_a290, 8
  %v3_a290 = inttoptr i32 %v2_a290 to i32*
  store i32 -1, i32* %v3_a290, align 4
  %v0_a294 = load i32, i32* %r3.global-to-local, align 4
  %v1_a294 = trunc i32 %v0_a294 to i8
  %v2_a294 = load i32, i32* @r8, align 4
  %v3_a294 = add i32 %v2_a294, -1452
  %v4_a294 = inttoptr i32 %v3_a294 to i8*
  store i8 %v1_a294, i8* %v4_a294, align 1
  br label %dec_label_pc_8f8c

dec_label_pc_a29c:                                ; preds = %dec_label_pc_a114, %bb236
  %v2_a2a0 = phi i32 [ %v1_a104, %bb236 ], [ %v2_a128, %dec_label_pc_a114 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a2a0 = inttoptr i32 %v2_a2a0 to i8*
  store i8 0, i8* %v3_a2a0, align 1
  br label %dec_label_pc_a13c

dec_label_pc_a2a8:                                ; preds = %dec_label_pc_9b44
  %v0_a2a8 = load i32, i32* %sb.global-to-local, align 4
  %v1_a2ac = add i32 %v0_a2a8, 533
  store i32 %v1_a2ac, i32* @r4, align 4
  store i32 %v1_a2ac, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_a2b8 = call i32 @function_120ec(i32 %v1_a2ac, i32 255)
  store i32 %v10_8a44, i32* %lr.global-to-local, align 4
  %v3_a2c0 = load i32, i32* %stack_var_-40, align 4
  %v0_a2c4 = load i32, i32* @r5, align 4
  %v2_a2c4 = add i32 %v3_a2c0, 1
  %v1_a2c8 = add i32 %v2_a2c4, %v0_a2c4
  store i32 %v1_a2c8, i32* %r0.global-to-local, align 4
  %v1_a2cc = inttoptr i32 %v1_a2c8 to i8*
  %v2_a2cc = call i32 @function_1204c(i8* %v1_a2cc)
  store i32 %v2_a2cc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a2d0 = icmp slt i32 %v2_a2cc, 0
  store i1 %v1_a2d0, i1* %cpsr_n.global-to-local, align 1
  %v2_a2d0 = icmp eq i32 %v2_a2cc, 0
  store i1 %v2_a2d0, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_a2cc, 1
  br i1 %tmp241, label %dec_label_pc_9b54, label %dec_label_pc_a2d8

dec_label_pc_a2d8:                                ; preds = %dec_label_pc_a2a8
  store i32 %v10_8a44, i32* %r1.global-to-local, align 4
  %v3_a2dc = load i32, i32* %stack_var_-40, align 4
  %v0_a2e0 = load i32, i32* @r5, align 4
  %v2_a2e0 = add i32 %v3_a2dc, 1
  %v1_a2e4 = add i32 %v2_a2e0, %v0_a2e0
  store i32 %v1_a2e4, i32* %r0.global-to-local, align 4
  %v1_a2e8 = inttoptr i32 %v1_a2e4 to i8*
  %v2_a2e8 = call i32 @function_1204c(i8* %v1_a2e8)
  store i32 %v2_a2e8, i32* %r0.global-to-local, align 4
  %v1_a2ec = add i32 %v2_a2e8, -255
  %v2_a2ec = icmp ugt i32 %v2_a2e8, 254
  store i1 %v2_a2ec, i1* %cpsr_c.global-to-local, align 1
  %v3_a2ec = sub i32 254, %v2_a2e8
  %v4_a2ec = and i32 %v3_a2ec, %v2_a2e8
  %v5_a2ec = icmp slt i32 %v4_a2ec, 0
  store i1 %v5_a2ec, i1* %cpsr_v.global-to-local, align 1
  %v6_a2ec = icmp slt i32 %v1_a2ec, 0
  store i1 %v6_a2ec, i1* %cpsr_n.global-to-local, align 1
  %v7_a2ec = icmp eq i32 %v2_a2e8, 255
  store i1 %v7_a2ec, i1* %cpsr_z.global-to-local, align 1
  %v8_a2f0 = icmp sgt i32 %v2_a2e8, 255
  br i1 %v8_a2f0, label %dec_label_pc_9b54, label %dec_label_pc_a2f4

dec_label_pc_a2f4:                                ; preds = %dec_label_pc_a2d8
  store i32 %v10_8a44, i32* %r2.global-to-local, align 4
  %v3_a2f8 = load i32, i32* %stack_var_-40, align 4
  %v0_a2fc = load i32, i32* @r5, align 4
  %v0_a300 = load i32, i32* @r4, align 4
  store i32 %v0_a300, i32* @r0, align 4
  %v2_a2fc = add i32 %v3_a2f8, 1
  %v1_a304 = add i32 %v2_a2fc, %v0_a2fc
  store i32 %v1_a304, i32* %r1.global-to-local, align 4
  %v2_a308 = inttoptr i32 %v0_a300 to i8*
  %v3_a308 = call i32 @function_12074(i8* %v2_a308, i32 %v1_a304)
  store i32 %v3_a308, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9b54

dec_label_pc_a310:                                ; preds = %dec_label_pc_a228
  %v0_a310 = load i32, i32* @r5, align 4
  store i32 %v0_a310, i32* %r0.global-to-local, align 4
  %v1_a314 = inttoptr i32 %v0_a310 to i8*
  %v2_a314 = call i32 @function_1204c(i8* %v1_a314)
  store i32 %v2_a314, i32* %r0.global-to-local, align 4
  %v1_a318 = add i32 %v2_a314, -127
  %v2_a318 = icmp ugt i32 %v2_a314, 126
  store i1 %v2_a318, i1* %cpsr_c.global-to-local, align 1
  %v3_a318 = sub i32 126, %v2_a314
  %v4_a318 = and i32 %v3_a318, %v2_a314
  %v5_a318 = icmp slt i32 %v4_a318, 0
  store i1 %v5_a318, i1* %cpsr_v.global-to-local, align 1
  %v6_a318 = icmp slt i32 %v1_a318, 0
  store i1 %v6_a318, i1* %cpsr_n.global-to-local, align 1
  %v7_a318 = icmp eq i32 %v2_a314, 127
  store i1 %v7_a318, i1* %cpsr_z.global-to-local, align 1
  %v8_a31c = icmp sgt i32 %v2_a314, 127
  br i1 %v8_a31c, label %dec_label_pc_a288, label %dec_label_pc_a320

dec_label_pc_a320:                                ; preds = %dec_label_pc_a310
  %v0_a320 = load i32, i32* @r8, align 4
  %v1_a320 = add i32 %v0_a320, 12
  %v2_a320 = inttoptr i32 %v1_a320 to i32*
  %v3_a320 = load i32, i32* %v2_a320, align 4
  store i32 %v1_9b64, i32* %r2.global-to-local, align 4
  %v1_a328 = and i32 %v3_a320, 33554432
  %v2_a328 = icmp ne i32 %v1_a328, 0
  store i1 %v2_a328, i1* %cpsr_c.global-to-local, align 1
  %v3_a328 = mul i32 %v3_a320, 128
  %v0_a32c = load i32, i32* @r5, align 4
  store i32 %v0_a32c, i32* %r1.global-to-local, align 4
  %v2_a330 = add i32 %v3_a328, %v1_9b64
  store i32 %v2_a330, i32* @r0, align 4
  %v2_a334 = inttoptr i32 %v2_a330 to i8*
  %v3_a334 = call i32 @function_12074(i8* %v2_a334, i32 %v0_a32c)
  store i32 %v3_a334, i32* %r0.global-to-local, align 4
  %v0_a338 = load i32, i32* @r8, align 4
  %v1_a338 = add i32 %v0_a338, 12
  %v2_a338 = inttoptr i32 %v1_a338 to i32*
  %v3_a338 = load i32, i32* %v2_a338, align 4
  store i32 %v1_9b64, i32* %r3.global-to-local, align 4
  %v1_a340 = and i32 %v3_a338, 33554432
  %v2_a340 = icmp ne i32 %v1_a340, 0
  store i1 %v2_a340, i1* %cpsr_c.global-to-local, align 1
  %v3_a340 = mul i32 %v3_a338, 128
  %v2_a344 = add i32 %v3_a340, %v1_9b64
  store i32 %v2_a344, i32* %r4.global-to-local, align 4
  store i32 %v2_a344, i32* %r0.global-to-local, align 4
  %v1_a34c = inttoptr i32 %v2_a344 to i8*
  %v2_a34c = call i32 @function_1204c(i8* %v1_a34c)
  store i32 ptrtoint (i32* @global_var_1541c.79 to i32), i32* %r1.global-to-local, align 4
  %v2_a354 = add i32 %v2_a344, %v2_a34c
  store i32 %v2_a354, i32* @r0, align 4
  %v2_a358 = inttoptr i32 %v2_a354 to i8*
  %v3_a358 = call i32 @function_12074(i8* %v2_a358, i32 ptrtoint (i32* @global_var_1541c.79 to i32))
  store i32 %v3_a358, i32* %r0.global-to-local, align 4
  %v0_a35c = load i32, i32* %r6.global-to-local, align 4
  %v1_a35c = add i32 %v0_a35c, 3
  store i32 %v1_a35c, i32* @r4, align 4
  %v0_a360 = load i32, i32* @r8, align 4
  %v1_a360 = add i32 %v0_a360, 656
  %v2_a360 = inttoptr i32 %v1_a360 to i32*
  %v3_a360 = load i32, i32* %v2_a360, align 4
  %v0_a364 = load i32, i32* @r7, align 4
  %v2_a364 = add i32 %v0_a364, %v1_a35c
  store i32 %v2_a364, i32* %r6.global-to-local, align 4
  %v2_a368 = sub i32 %v3_a360, %v1_a35c
  store i32 %v2_a368, i32* %r1.global-to-local, align 4
  %v0_a36c = load i32, i32* @sl, align 4
  store i32 %v0_a36c, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15120.77 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a364, i32* %r0.global-to-local, align 4
  %v4_a378 = call i32 @function_12110(i32 %v2_a364, i32 %v2_a368, i32 ptrtoint (i32* @global_var_15120.77 to i32), i32 %v0_a36c)
  store i32 %v4_a378, i32* %r0.global-to-local, align 4
  %v0_a37c = load i32, i32* @r8, align 4
  %v1_a37c = add i32 %v0_a37c, 12
  %v2_a37c = inttoptr i32 %v1_a37c to i32*
  %v3_a37c = load i32, i32* %v2_a37c, align 4
  store i32 %v1_9b64, i32* %ip.global-to-local, align 4
  %v1_a384 = and i32 %v3_a37c, 33554432
  %v2_a384 = icmp ne i32 %v1_a384, 0
  store i1 %v2_a384, i1* %cpsr_c.global-to-local, align 1
  %v3_a384 = mul i32 %v3_a37c, 128
  %v0_a388 = load i32, i32* @r4, align 4
  %v1_a388 = load i32, i32* %sb.global-to-local, align 4
  %v2_a38c = add i32 %v3_a384, %v1_9b64
  store i32 %v2_a38c, i32* @r5, align 4
  %v2_a388 = add i32 %v0_a388, %v4_a378
  %v2_a390 = add i32 %v2_a388, %v1_a388
  store i32 %v2_a390, i32* @r4, align 4
  %v0_a394 = load i32, i32* %fp.global-to-local, align 4
  %v1_a394 = trunc i32 %v0_a394 to i8
  %v3_a394 = add i32 %v2_a390, 2115
  %v4_a394 = inttoptr i32 %v3_a394 to i8*
  store i8 %v1_a394, i8* %v4_a394, align 1
  %v0_a398 = load i32, i32* @r5, align 4
  store i32 %v0_a398, i32* %r0.global-to-local, align 4
  %v1_a39c = inttoptr i32 %v0_a398 to i8*
  %v2_a39c = call i32 @function_1204c(i8* %v1_a39c)
  %v0_a3a0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_a3a0, i32* %r1.global-to-local, align 4
  %v0_a3a4 = load i32, i32* @r5, align 4
  %v2_a3a4 = add i32 %v0_a3a4, %v2_a39c
  store i32 %v2_a3a4, i32* @r0, align 4
  %v2_a3a8 = inttoptr i32 %v2_a3a4 to i8*
  %v3_a3a8 = call i32 @function_12074(i8* %v2_a3a8, i32 %v0_a3a0)
  store i32 %v3_a3a8, i32* %r0.global-to-local, align 4
  %v0_a3ac = load i32, i32* @r8, align 4
  %v1_a3ac = add i32 %v0_a3ac, 12
  %v2_a3ac = inttoptr i32 %v1_a3ac to i32*
  %v3_a3ac = load i32, i32* %v2_a3ac, align 4
  %v1_a3b0 = add i32 %v3_a3ac, 1
  store i32 %v1_a3b0, i32* %r3.global-to-local, align 4
  store i32 %v1_a3b0, i32* %v2_a3ac, align 4
  br label %dec_label_pc_a288

dec_label_pc_a3bc:                                ; preds = %dec_label_pc_9fa0
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_8a44, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_a3c8 = load i32, i32* @r5, align 4
  %v1_a3c8 = add i32 %v0_a3c8, 4
  %v2_a3c8 = inttoptr i32 %v1_a3c8 to i8*
  %v3_a3c8 = load i8, i8* %v2_a3c8, align 1
  %v4_a3c8 = zext i8 %v3_a3c8 to i32
  store i32 %v4_a3c8, i32* %r3.global-to-local, align 4
  %v2_a3cc = icmp ugt i8 %v3_a3c8, 114
  store i1 %v2_a3cc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a3cc = icmp ult i8 %v3_a3c8, 115
  store i1 %v6_a3cc, i1* %cpsr_n.global-to-local, align 1
  %v7_a3cc = icmp eq i8 %v3_a3c8, 115
  store i1 %v7_a3cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a3cc, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_a3bc
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_a3bc, %bb242
  %v3_a3dc = phi i32 [ 7, %dec_label_pc_a3bc ], [ 8, %bb242 ]
  %v0_a3e0 = load i32, i32* @r7, align 4
  %v1_a3e0 = sub nsw i32 1, %v3_a3dc
  %v2_a3e4 = add i32 %v1_a3e0, %v0_a3e0
  store i32 %v2_a3e4, i32* @r2, align 4
  store i32 %v0_a3c8, i32* @r0, align 4
  %v2_a3ec = add i32 %v3_a3dc, %v0_a3c8
  store i32 %v2_a3ec, i32* @r1, align 4
  %v3_a3f0 = call i32 @function_12fe0(i32 %v0_a3c8, i32 %v2_a3ec, i32 %v2_a3e4)
  store i32 %v3_a3f0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_8a44, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_a400 = load i32, i32* @r6, align 4
  %v1_a400 = load i32, i32* @r4, align 4
  %v2_a400 = add i32 %v1_a400, %v0_a400
  %v3_a400 = inttoptr i32 %v2_a400 to i8*
  %v4_a400 = load i8, i8* %v3_a400, align 1
  %v6_a400 = zext i8 %v4_a400 to i32
  store i32 %v6_a400, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_a404 = icmp eq i8 %v4_a400, 0
  store i1 %v9_a404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a404, label %dec_label_pc_a444, label %dec_label_pc_a40c

dec_label_pc_a40c:                                ; preds = %.thread69
  %v2_a40c = icmp ugt i8 %v4_a400, 46
  store i1 %v2_a40c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a40c = icmp ult i8 %v4_a400, 47
  store i1 %v6_a40c, i1* %cpsr_n.global-to-local, align 1
  %v7_a40c = icmp eq i8 %v4_a400, 47
  store i1 %v7_a40c, i1* %cpsr_z.global-to-local, align 1
  %v1_a410 = load i32, i32* @r5, align 4
  br i1 %v7_a40c, label %bb243, label %dec_label_pc_a418

bb243:                                            ; preds = %dec_label_pc_a40c
  store i32 %v1_a410, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a528

dec_label_pc_a418:                                ; preds = %dec_label_pc_a40c
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a428

dec_label_pc_a420:                                ; preds = %dec_label_pc_a428
  %v2_a420 = icmp ugt i8 %v4_a430, 46
  store i1 %v2_a420, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a420 = icmp ult i8 %v4_a430, 47
  store i1 %v6_a420, i1* %cpsr_n.global-to-local, align 1
  %v7_a420 = icmp eq i8 %v4_a430, 47
  store i1 %v7_a420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a420, label %dec_label_pc_a528, label %dec_label_pc_a428

dec_label_pc_a428:                                ; preds = %dec_label_pc_a420, %dec_label_pc_a418
  %v1_a438 = phi i32 [ %v1_a43c, %dec_label_pc_a420 ], [ 1, %dec_label_pc_a418 ]
  store i32 %v10_8a44, i32* @lr, align 4
  store i32 %v1_a438, i32* %stack_var_-40, align 4
  %v2_a430 = add i32 %v1_a438, %v1_a410
  %v3_a430 = inttoptr i32 %v2_a430 to i8*
  %v4_a430 = load i8, i8* %v3_a430, align 1
  %v6_a430 = zext i8 %v4_a430 to i32
  store i32 %v6_a430, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_a434 = icmp eq i8 %v4_a430, 0
  store i1 %v2_a434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_a430, i32* %r1.global-to-local, align 4
  %v1_a43c = add i32 %v1_a438, 1
  store i32 %v1_a43c, i32* %r3.global-to-local, align 4
  br i1 %v2_a434, label %dec_label_pc_a444, label %dec_label_pc_a420

dec_label_pc_a444:                                ; preds = %dec_label_pc_a428, %.thread69, %dec_label_pc_a528
  %v0_a444 = load i32, i32* @r5, align 4
  store i32 %v0_a444, i32* %r0.global-to-local, align 4
  %v1_a448 = inttoptr i32 %v0_a444 to i8*
  %v2_a448 = call i32 @function_1204c(i8* %v1_a448)
  store i32 %v2_a448, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a44c = icmp slt i32 %v2_a448, 0
  store i1 %v1_a44c, i1* %cpsr_n.global-to-local, align 1
  %v2_a44c = icmp eq i32 %v2_a448, 0
  store i1 %v2_a44c, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_a448, 1
  br i1 %tmp244, label %dec_label_pc_a470, label %dec_label_pc_a454

dec_label_pc_a454:                                ; preds = %dec_label_pc_a444
  %v0_a454 = load i32, i32* @r5, align 4
  store i32 %v0_a454, i32* %r0.global-to-local, align 4
  %v1_a458 = inttoptr i32 %v0_a454 to i8*
  %v2_a458 = call i32 @function_1204c(i8* %v1_a458)
  store i32 %v2_a458, i32* %r0.global-to-local, align 4
  %v1_a45c = add i32 %v2_a458, -127
  %v2_a45c = icmp ugt i32 %v2_a458, 126
  store i1 %v2_a45c, i1* %cpsr_c.global-to-local, align 1
  %v3_a45c = sub i32 126, %v2_a458
  %v4_a45c = and i32 %v3_a45c, %v2_a458
  %v5_a45c = icmp slt i32 %v4_a45c, 0
  store i1 %v5_a45c, i1* %cpsr_v.global-to-local, align 1
  %v6_a45c = icmp slt i32 %v1_a45c, 0
  store i1 %v6_a45c, i1* %cpsr_n.global-to-local, align 1
  %v7_a45c = icmp eq i32 %v2_a458, 127
  store i1 %v7_a45c, i1* %cpsr_z.global-to-local, align 1
  %v7_a460 = icmp sgt i32 %v2_a458, 127
  br i1 %v7_a460, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_a454
  %v8_a460 = load i32, i32* %sb.global-to-local, align 4
  %v9_a464 = add i32 %v8_a460, 789
  store i32 %v9_a464, i32* %r0.global-to-local, align 4
  %v8_a468 = load i32, i32* @r5, align 4
  store i32 %v8_a468, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_a454, %bb245
  store i32 42096, i32* @lr, align 4
  %v3_a46c = xor i1 %v6_a45c, %v5_a45c
  %v4_a46c = or i1 %v7_a45c, %v3_a46c
  call void @__pseudo_cond_branch(i1 %v4_a46c, i32 ptrtoint (i32* @global_var_12074.75 to i32))
  br label %dec_label_pc_a470

dec_label_pc_a470:                                ; preds = %dec_label_pc_a444, %.thread72
  store i32 %v10_8a44, i32* %r1.global-to-local, align 4
  %v3_a474 = load i32, i32* %stack_var_-40, align 4
  %v0_a478 = load i32, i32* @r5, align 4
  %v2_a478 = add i32 %v3_a474, 1
  %v1_a47c = add i32 %v2_a478, %v0_a478
  store i32 %v1_a47c, i32* %r0.global-to-local, align 4
  %v1_a480 = inttoptr i32 %v1_a47c to i8*
  %v2_a480 = call i32 @function_1204c(i8* %v1_a480)
  store i32 %v2_a480, i32* %r0.global-to-local, align 4
  %v1_a484 = add i32 %v2_a480, -255
  %v2_a484 = icmp ugt i32 %v2_a480, 254
  store i1 %v2_a484, i1* %cpsr_c.global-to-local, align 1
  %v3_a484 = sub i32 254, %v2_a480
  %v4_a484 = and i32 %v3_a484, %v2_a480
  %v5_a484 = icmp slt i32 %v4_a484, 0
  store i1 %v5_a484, i1* %cpsr_v.global-to-local, align 1
  %v6_a484 = icmp slt i32 %v1_a484, 0
  store i1 %v6_a484, i1* %cpsr_n.global-to-local, align 1
  %v7_a484 = icmp eq i32 %v2_a480, 255
  store i1 %v7_a484, i1* %cpsr_z.global-to-local, align 1
  %v8_a488 = icmp sgt i32 %v2_a480, 255
  br i1 %v8_a488, label %dec_label_pc_9fd8, label %dec_label_pc_a48c

dec_label_pc_a48c:                                ; preds = %dec_label_pc_a470
  %v0_a48c = load i32, i32* %sb.global-to-local, align 4
  %v1_a490 = add i32 %v0_a48c, 533
  store i32 %v1_a490, i32* @r4, align 4
  store i32 %v1_a490, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_a49c = call i32 @function_120ec(i32 %v1_a490, i32 255)
  store i32 %v10_8a44, i32* %r2.global-to-local, align 4
  %v3_a4a4 = load i32, i32* %stack_var_-40, align 4
  %v0_a4a8 = load i32, i32* @r5, align 4
  %v2_a4a8 = add i32 %v3_a4a4, 1
  %v1_a4ac = add i32 %v2_a4a8, %v0_a4a8
  store i32 %v1_a4ac, i32* %r0.global-to-local, align 4
  %v1_a4b0 = inttoptr i32 %v1_a4ac to i8*
  %v2_a4b0 = call i32 @function_1204c(i8* %v1_a4b0)
  store i32 %v2_a4b0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a4b4 = icmp slt i32 %v2_a4b0, 0
  store i1 %v1_a4b4, i1* %cpsr_n.global-to-local, align 1
  %v2_a4b4 = icmp eq i32 %v2_a4b0, 0
  store i1 %v2_a4b4, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_a4b0, 1
  br i1 %tmp246, label %dec_label_pc_9fd8, label %dec_label_pc_a4bc

dec_label_pc_a4bc:                                ; preds = %dec_label_pc_a48c
  store i32 %v10_8a44, i32* %r3.global-to-local, align 4
  %v3_a4c0 = load i32, i32* %stack_var_-40, align 4
  %v0_a4c4 = load i32, i32* @r5, align 4
  %v0_a4c8 = load i32, i32* @r4, align 4
  store i32 %v0_a4c8, i32* @r0, align 4
  %v2_a4c4 = add i32 %v3_a4c0, 1
  %v1_a4cc = add i32 %v2_a4c4, %v0_a4c4
  store i32 %v1_a4cc, i32* %r1.global-to-local, align 4
  %v2_a4d0 = inttoptr i32 %v0_a4c8 to i8*
  %v3_a4d0 = call i32 @function_12074(i8* %v2_a4d0, i32 %v1_a4cc)
  store i32 %v3_a4d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9fd8

dec_label_pc_a4d8:                                ; preds = %dec_label_pc_9d40
  %v0_a4d8 = load i32, i32* @r4, align 4
  %v1_a4d8 = trunc i32 %v0_a4d8 to i8
  %v2_a4d8 = load i32, i32* @r8, align 4
  %v3_a4d8 = add i32 %v2_a4d8, -1452
  %v4_a4d8 = inttoptr i32 %v3_a4d8 to i8*
  store i8 %v1_a4d8, i8* %v4_a4d8, align 1
  br label %dec_label_pc_8f8c

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_9f58
  %v1_a4e0 = add i32 %v0_a4e0, 1
  store i32 %v1_a4e0, i32* %ip.global-to-local, align 4
  %v2_a4e4 = add i32 %v0_9f58, %v1_a4e0
  store i32 %v2_a4e4, i32* %r4.global-to-local, align 4
  store i32 %v10_8a44, i32* %r2.global-to-local, align 4
  store i32 %v2_a4e4, i32* %r0.global-to-local, align 4
  store i32 %v1_a4e0, i32* %stack_var_-40, align 4
  %v1_a4f4 = inttoptr i32 %v2_a4e4 to i8*
  %v2_a4f4 = call i32 @function_1204c(i8* %v1_a4f4)
  store i32 %v2_a4f4, i32* %r0.global-to-local, align 4
  %v0_a4f8 = load i32, i32* %r4.global-to-local, align 4
  %v2_a4f8 = add i32 %v0_a4f8, %v2_a4f4
  store i32 %v2_a4f8, i32* @r4, align 4
  %v1_a4fc = add i32 %v2_a4f8, -1
  %v2_a4fc = inttoptr i32 %v1_a4fc to i8*
  %v3_a4fc = load i8, i8* %v2_a4fc, align 1
  %v4_a4fc = zext i8 %v3_a4fc to i32
  store i32 %v4_a4fc, i32* %r3.global-to-local, align 4
  %v2_a500 = icmp ugt i8 %v3_a4fc, 33
  store i1 %v2_a500, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a500 = icmp ult i8 %v3_a4fc, 34
  store i1 %v6_a500, i1* %cpsr_n.global-to-local, align 1
  %v7_a500 = icmp eq i8 %v3_a4fc, 34
  store i1 %v7_a500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a500, label %dec_label_pc_a508, label %dec_label_pc_9f64

dec_label_pc_a508:                                ; preds = %dec_label_pc_a4e0
  store i32 %v10_8a44, i32* %r3.global-to-local, align 4
  %v3_a50c = load i32, i32* %stack_var_-40, align 4
  %v0_a510 = load i32, i32* @r6, align 4
  %v2_a510 = add i32 %v0_a510, %v3_a50c
  store i32 %v2_a510, i32* %r4.global-to-local, align 4
  store i32 %v2_a510, i32* %r0.global-to-local, align 4
  %v1_a518 = inttoptr i32 %v2_a510 to i8*
  %v2_a518 = call i32 @function_1204c(i8* %v1_a518)
  store i32 %v2_a518, i32* %r0.global-to-local, align 4
  %v2_a51c = add i32 %v2_a510, %v2_a518
  store i32 %v2_a51c, i32* @r4, align 4
  %v0_a520 = load i32, i32* @r5, align 4
  %v1_a520 = trunc i32 %v0_a520 to i8
  %v3_a520 = add i32 %v2_a51c, -1
  %v4_a520 = inttoptr i32 %v3_a520 to i8*
  store i8 %v1_a520, i8* %v4_a520, align 1
  br label %dec_label_pc_9f64

dec_label_pc_a528:                                ; preds = %dec_label_pc_a420, %bb243
  %v2_a52c = phi i32 [ %v1_a410, %bb243 ], [ %v2_a430, %dec_label_pc_a420 ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_a52c = inttoptr i32 %v2_a52c to i8*
  store i8 0, i8* %v3_a52c, align 1
  br label %dec_label_pc_a444

dec_label_pc_a534:                                ; preds = %dec_label_pc_9fcc
  store i32 %v10_8a44, i32* %ip.global-to-local, align 4
  %v3_a538 = load i32, i32* %stack_var_-40, align 4
  %v0_a53c = load i32, i32* @r5, align 4
  %v2_a53c = add i32 %v3_a538, 1
  %v1_a540 = add i32 %v2_a53c, %v0_a53c
  store i32 %v1_a540, i32* %r0.global-to-local, align 4
  %v1_a544 = inttoptr i32 %v1_a540 to i8*
  %v2_a544 = call i32 @function_1204c(i8* %v1_a544)
  store i32 %v2_a544, i32* %r0.global-to-local, align 4
  %v1_a548 = add i32 %v2_a544, -255
  %v2_a548 = icmp ugt i32 %v2_a544, 254
  store i1 %v2_a548, i1* %cpsr_c.global-to-local, align 1
  %v3_a548 = sub i32 254, %v2_a544
  %v4_a548 = and i32 %v3_a548, %v2_a544
  %v5_a548 = icmp slt i32 %v4_a548, 0
  store i1 %v5_a548, i1* %cpsr_v.global-to-local, align 1
  %v6_a548 = icmp slt i32 %v1_a548, 0
  store i1 %v6_a548, i1* %cpsr_n.global-to-local, align 1
  %v7_a548 = icmp eq i32 %v2_a544, 255
  store i1 %v7_a548, i1* %cpsr_z.global-to-local, align 1
  %v8_a54c = icmp sgt i32 %v2_a544, 255
  br i1 %v8_a54c, label %dec_label_pc_9fd8, label %dec_label_pc_a550

dec_label_pc_a550:                                ; preds = %dec_label_pc_a534
  %v0_a550 = load i32, i32* %sb.global-to-local, align 4
  %v1_a554 = add i32 %v0_a550, 533
  store i32 %v1_a554, i32* @r4, align 4
  store i32 %v1_a554, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_a560 = call i32 @function_120ec(i32 %v1_a554, i32 255)
  store i32 %v10_8a44, i32* @lr, align 4
  %v3_a568 = load i32, i32* %stack_var_-40, align 4
  %v0_a56c = load i32, i32* @r5, align 4
  %v2_a56c = add i32 %v3_a568, 1
  %v1_a570 = add i32 %v2_a56c, %v0_a56c
  store i32 %v1_a570, i32* %r0.global-to-local, align 4
  %v1_a574 = inttoptr i32 %v1_a570 to i8*
  %v2_a574 = call i32 @function_1204c(i8* %v1_a574)
  store i32 %v2_a574, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a578 = icmp slt i32 %v2_a574, 0
  store i1 %v1_a578, i1* %cpsr_n.global-to-local, align 1
  %v2_a578 = icmp eq i32 %v2_a574, 0
  store i1 %v2_a578, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_a574, 1
  br i1 %tmp247, label %dec_label_pc_9fd8, label %dec_label_pc_a580

dec_label_pc_a580:                                ; preds = %dec_label_pc_a550
  store i32 %v10_8a44, i32* %r2.global-to-local, align 4
  %v3_a584 = load i32, i32* %stack_var_-40, align 4
  %v0_a588 = load i32, i32* @r5, align 4
  %v0_a58c = load i32, i32* @r4, align 4
  store i32 %v0_a58c, i32* @r0, align 4
  %v2_a588 = add i32 %v3_a584, 1
  %v1_a590 = add i32 %v2_a588, %v0_a588
  store i32 %v1_a590, i32* %r1.global-to-local, align 4
  %v2_a594 = inttoptr i32 %v0_a58c to i8*
  %v3_a594 = call i32 @function_12074(i8* %v2_a594, i32 %v1_a590)
  store i32 %v3_a594, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9fd8

dec_label_pc_a59c:                                ; preds = %dec_label_pc_8c1c
  store i32 58, i32* %r0.global-to-local, align 4
  %v1_a5a0 = call i32 @function_11598(i32 58)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 58, i32* %r0.global-to-local, align 4
  %v3_a5ac = call i32 @function_114b4(i32 58, i32* null)
  store i32 %v3_a5ac, i32* %r1.global-to-local, align 4
  %v0_a5b4 = load i32, i32* @r5, align 4
  %v1_a5b4 = add i32 %v0_a5b4, 20
  store i32 %v1_a5b4, i32* @r0, align 4
  %v2_a5b8 = inttoptr i32 %v1_a5b4 to i8*
  %v3_a5b8 = call i32 @function_12074(i8* %v2_a5b8, i32 %v3_a5ac)
  store i32 58, i32* %r0.global-to-local, align 4
  %v1_a5c0 = call i32 @function_114e0(i32 58)
  store i32 %v1_a5c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a5c4

dec_label_pc_a5c4:                                ; preds = %dec_label_pc_8c1c, %dec_label_pc_a6ac, %dec_label_pc_a680, %dec_label_pc_a654, %dec_label_pc_a628, %dec_label_pc_a59c
  %v0_a5c4 = load i32, i32* @sl, align 4
  store i32 %v0_a5c4, i32* %r1.global-to-local, align 4
  store i32 %v0_8b60, i32* @r0, align 4
  %v2_a5cc = inttoptr i32 %v0_8b60 to i8*
  %v3_a5cc = call i32 @function_12074(i8* %v2_a5cc, i32 %v0_a5c4)
  store i32 %v3_a5cc, i32* %r0.global-to-local, align 4
  store i32 %v0_8af0, i32* %r1.global-to-local, align 4
  %v0_a5d4 = load i32, i32* @r7, align 4
  %v1_a5d4 = add i32 %v0_a5d4, 1
  store i32 %v1_a5d4, i32* @r7, align 4
  %v0_a5d8 = load i32, i32* @r5, align 4
  %v2_a5dc = sub i32 %v0_8af0, %v1_a5d4
  %v3_a5dc = icmp uge i32 %v0_8af0, %v1_a5d4
  store i1 %v3_a5dc, i1* %cpsr_c.global-to-local, align 1
  %v4_a5dc = xor i32 %v1_a5d4, %v0_8af0
  %v5_a5dc = xor i32 %v2_a5dc, %v0_8af0
  %v6_a5dc = and i32 %v5_a5dc, %v4_a5dc
  %v7_a5dc = icmp slt i32 %v6_a5dc, 0
  store i1 %v7_a5dc, i1* %cpsr_v.global-to-local, align 1
  %v8_a5dc = icmp slt i32 %v2_a5dc, 0
  store i1 %v8_a5dc, i1* %cpsr_n.global-to-local, align 1
  %v9_a5dc = icmp eq i32 %v0_8af0, %v1_a5d4
  store i1 %v9_a5dc, i1* %cpsr_z.global-to-local, align 1
  %v1_a5e0 = add i32 %v0_a5d8, 3140
  store i32 %v1_a5e0, i32* @r5, align 4
  br i1 %v9_a5dc, label %dec_label_pc_a5e8, label %dec_label_pc_8b20

dec_label_pc_a5e8:                                ; preds = %dec_label_pc_a5c4
  %v1_a5f4 = add i32 %v2_8b04, 1456
  %v0_a5fc = load i32, i32* %r8.global-to-local, align 4
  %v1_a5fc = urem i32 %v0_a5fc, 256
  store i32 %v1_a5fc, i32* %ip.global-to-local, align 4
  %v1_a600 = add i32 %v2_8b04, 1464
  store i32 %v1_a600, i32* %r2.global-to-local, align 4
  %v2_a604 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_a604, i32* %r3.global-to-local, align 4
  store i32 %v1_a5f4, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8c7c.preheader

dec_label_pc_a628:                                ; preds = %dec_label_pc_8c1c
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_a62c = call i32 @function_11598(i32 54)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 54, i32* %r0.global-to-local, align 4
  %v3_a638 = call i32 @function_114b4(i32 54, i32* null)
  store i32 %v3_a638, i32* %r1.global-to-local, align 4
  %v0_a640 = load i32, i32* @r5, align 4
  %v1_a640 = add i32 %v0_a640, 20
  store i32 %v1_a640, i32* @r0, align 4
  %v2_a644 = inttoptr i32 %v1_a640 to i8*
  %v3_a644 = call i32 @function_12074(i8* %v2_a644, i32 %v3_a638)
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_a64c = call i32 @function_114e0(i32 54)
  store i32 %v1_a64c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a5c4

dec_label_pc_a654:                                ; preds = %dec_label_pc_8c1c
  store i32 55, i32* %r0.global-to-local, align 4
  %v1_a658 = call i32 @function_11598(i32 55)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 55, i32* %r0.global-to-local, align 4
  %v3_a664 = call i32 @function_114b4(i32 55, i32* null)
  store i32 %v3_a664, i32* %r1.global-to-local, align 4
  %v0_a66c = load i32, i32* @r5, align 4
  %v1_a66c = add i32 %v0_a66c, 20
  store i32 %v1_a66c, i32* @r0, align 4
  %v2_a670 = inttoptr i32 %v1_a66c to i8*
  %v3_a670 = call i32 @function_12074(i8* %v2_a670, i32 %v3_a664)
  store i32 55, i32* %r0.global-to-local, align 4
  %v1_a678 = call i32 @function_114e0(i32 55)
  store i32 %v1_a678, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a5c4

dec_label_pc_a680:                                ; preds = %dec_label_pc_8c1c
  store i32 56, i32* %r0.global-to-local, align 4
  %v1_a684 = call i32 @function_11598(i32 56)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r0.global-to-local, align 4
  %v3_a690 = call i32 @function_114b4(i32 56, i32* null)
  store i32 %v3_a690, i32* %r1.global-to-local, align 4
  %v0_a698 = load i32, i32* @r5, align 4
  %v1_a698 = add i32 %v0_a698, 20
  store i32 %v1_a698, i32* @r0, align 4
  %v2_a69c = inttoptr i32 %v1_a698 to i8*
  %v3_a69c = call i32 @function_12074(i8* %v2_a69c, i32 %v3_a690)
  store i32 56, i32* %r0.global-to-local, align 4
  %v1_a6a4 = call i32 @function_114e0(i32 56)
  store i32 %v1_a6a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a5c4

dec_label_pc_a6ac:                                ; preds = %dec_label_pc_8c1c
  store i32 57, i32* %r0.global-to-local, align 4
  %v1_a6b0 = call i32 @function_11598(i32 57)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 57, i32* %r0.global-to-local, align 4
  %v3_a6bc = call i32 @function_114b4(i32 57, i32* null)
  store i32 %v3_a6bc, i32* %r1.global-to-local, align 4
  %v0_a6c4 = load i32, i32* @r5, align 4
  %v1_a6c4 = add i32 %v0_a6c4, 20
  store i32 %v1_a6c4, i32* @r0, align 4
  %v2_a6c8 = inttoptr i32 %v1_a6c4 to i8*
  %v3_a6c8 = call i32 @function_12074(i8* %v2_a6c8, i32 %v3_a6bc)
  store i32 57, i32* %r0.global-to-local, align 4
  %v1_a6d0 = call i32 @function_114e0(i32 57)
  store i32 %v1_a6d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a5c4

; uselistorder directives
  uselistorder i32 %v2_a604, { 1, 0 }
  uselistorder i32 %v1_a600, { 1, 0 }
  uselistorder i32 %v1_a5f4, { 1, 0 }
  uselistorder i32 %v1_a5e0, { 1, 0 }
  uselistorder i32 %v2_a5dc, { 1, 0 }
  uselistorder i32 %v1_a5d4, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_a544, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_a4e0, { 1, 0, 2 }
  uselistorder i32 %v2_a480, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_a458, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_a43c, { 1, 0 }
  uselistorder i8 %v4_a430, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_a438, { 1, 0, 2 }
  uselistorder i1 %v7_a420, { 1, 0 }
  uselistorder i32 %v1_a410, { 1, 0, 2 }
  uselistorder i1 %v7_a40c, { 1, 0 }
  uselistorder i1 %v9_a404, { 1, 0 }
  uselistorder i32 %v2_a3e4, { 1, 0 }
  uselistorder i32 %v0_a3c8, { 2, 0, 1, 3 }
  uselistorder i32 %v2_a364, { 1, 0, 2 }
  uselistorder i32 %v1_a35c, { 1, 0, 2 }
  uselistorder i32 %v2_a314, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_a2e8, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_a26c, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_a250, { 1, 0, 2 }
  uselistorder i32 %v4_a248, { 2, 1, 0, 3 }
  uselistorder i32 %v2_a210, { 1, 0 }
  uselistorder i32 %v1_a210, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_a210, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_a178, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_a150, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_a130, { 1, 0 }
  uselistorder i8 %v4_a128, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_a130, { 1, 0, 3, 2 }
  uselistorder i1 %v7_a114, { 1, 0 }
  uselistorder i32 %v1_a104, { 1, 0, 2 }
  uselistorder i1 %v7_a100, { 1, 0 }
  uselistorder i32 %v0_a0c0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_a0a4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_9fc0, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9f94, { 1, 0 }
  uselistorder i32 %v1_9f94, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9f90, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_9f70, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9f58, { 1, 0 }
  uselistorder i32 %v0_a4e0, { 1, 0 }
  uselistorder i32 %v1_9f14, { 1, 2, 0 }
  uselistorder i32 %v5_9f10, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9efc, { 1, 0 }
  uselistorder i32 %v2_9ef0, { 1, 0, 2 }
  uselistorder i32 %v1_9eb4, { 0, 2, 1 }
  uselistorder i32 %v1_9ea4, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_9e90, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9e4c, { 1, 2, 0 }
  uselistorder i32 %v5_9e48, { 1, 3, 2, 5, 8, 9, 7, 6, 4, 0, 11, 10, 12 }
  uselistorder i32 %v2_9e30.v4_9e10, { 1, 0, 2 }
  uselistorder i32 %v1_9dec, { 1, 2, 0 }
  uselistorder i32 %v4_9de4, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9da4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9d9c, { 1, 2, 0 }
  uselistorder i32 %v5_9d90, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_9d1c, { 1, 2, 0 }
  uselistorder i32 %v4_9d18, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9cf8, { 1, 2, 3, 0 }
  uselistorder i32 %v1_9ce0, { 1, 2, 0 }
  uselistorder i32 %v5_9cdc, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9cc4, { 1, 0 }
  uselistorder i32 %v2_9cbc, { 1, 2, 0 }
  uselistorder i32 %v4_9cb8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9c7c, { 2, 1, 0 }
  uselistorder i32 %v3_9c70, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_9c50, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_9c50, { 1, 0 }
  uselistorder i32 %v0_9c50, { 1, 0 }
  uselistorder i32 %v3_9c38, { 1, 2, 0, 3 }
  uselistorder i32 %v0_9c2c, { 1, 2, 0 }
  uselistorder i32 %v0_9c14, { 0, 2, 1 }
  uselistorder i32 %v3_9bf4, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_9bcc, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_9bac, { 1, 2, 0 }
  uselistorder i32 %v5_9ba0, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_9b6c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9b64, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_9b38, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9b18, { 1, 0, 2 }
  uselistorder i32 %v1_9af4, { 1, 2, 0 }
  uselistorder i32 %v5_9af0, { 1, 9, 8, 3, 6, 7, 5, 4, 2, 0, 11, 10, 12 }
  uselistorder i32 %v2_9ad8.v4_9ab8, { 1, 0, 2 }
  uselistorder i32 %v1_9a98, { 1, 2, 0 }
  uselistorder i32 %v4_9a94, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9a44, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_9a40, { 1, 0 }
  uselistorder i32 %v0_9a28, { 1, 0 }
  uselistorder i32 %v0_9a2c, { 1, 0 }
  uselistorder i32 %v2_9a08, { 1, 0 }
  uselistorder i32 %v1_9a04, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_9a00, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_99d0, { 1, 0 }
  uselistorder i1 %v7_9998, { 0, 2, 1 }
  uselistorder i32 %v1_99bc, { 1, 0 }
  uselistorder i32 %v2_99b8, { 1, 0 }
  uselistorder i32 %v3_99b4, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_99ac, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_99a8, { 1, 0 }
  uselistorder i32 %v1_9918, { 1, 2, 0 }
  uselistorder i32 %v5_9914, { 1, 8, 3, 6, 7, 5, 4, 2, 0, 10, 9, 11 }
  uselistorder i32 %v2_98fc, { 1, 0, 2 }
  uselistorder i32 %v2_98f8, { 1, 0, 2 }
  uselistorder i32 %v0_98dc, { 0, 2, 1 }
  uselistorder i32 %v4_98d4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_98b0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_98a4, { 1, 2, 0 }
  uselistorder i32 %v4_989c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9838, { 1, 2, 0 }
  uselistorder i32 %v5_9834, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_981c.v4_97fc, { 1, 0, 2 }
  uselistorder i32 %v1_97cc, { 1, 2, 0 }
  uselistorder i32 %v4_97c8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9750, { 1, 2, 0 }
  uselistorder i32 %v5_974c, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_9734.v4_9714, { 1, 0, 2 }
  uselistorder i32 %v1_96f0, { 1, 2, 0 }
  uselistorder i32 %v4_96e8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9668, { 1, 2, 0 }
  uselistorder i32 %v5_9664, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_964c.v4_962c, { 1, 0, 2 }
  uselistorder i32 %v1_960c, { 1, 2, 0 }
  uselistorder i32 %v4_9608, { 0, 2, 1, 3 }
  uselistorder i32 %v1_95e0, { 1, 2, 0 }
  uselistorder i32 %v4_95dc, { 0, 2, 1, 3 }
  uselistorder i32 %v1_95b8, { 1, 2, 0 }
  uselistorder i32 %v4_95b4, { 0, 2, 1, 3 }
  uselistorder i32 %v0_a068, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_956c, { 1, 2, 0 }
  uselistorder i32 %v5_9568, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9544, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_94cc, { 0, 2, 1 }
  uselistorder i32 %v2_94c0, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_94b4, { 1, 0 }
  uselistorder i32 %v2_94a8, { 1, 0 }
  uselistorder i32 %v0_94a8, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_94a0, { 1, 0 }
  uselistorder i32 %v1_94a8, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_9484, { 1, 0, 2 }
  uselistorder i32 %v1_947c, { 1, 0 }
  uselistorder i32 %v2_9464, { 1, 0 }
  uselistorder i32 %v0_9464, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_9440, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_93a8, { 1, 0 }
  uselistorder i32 %v1_93a4, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_93a0, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_9248, { 1, 0 }
  uselistorder i32 %v1_9248, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8fd4, { 2, 1, 0 }
  uselistorder i32 %v3_8fd0, { 1, 0 }
  uselistorder i32 %v1_8fb0, { 1, 2, 0 }
  uselistorder i32 %v3_8fac, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_8f9c, { 1, 0 }
  uselistorder i32 %v1_8f94, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_8f84, { 1, 0 }
  uselistorder i1 %v7_8f7c, { 1, 0 }
  uselistorder i32 %v1_8f60, { 2, 1, 0 }
  uselistorder i32 %v3_8f5c, { 1, 0 }
  uselistorder i32 %v0_8f60, { 1, 0 }
  uselistorder i32 %v2_8f30, { 1, 0 }
  uselistorder i32 %v1_8f30, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_8f30, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_8f2c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8f18, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8ed8, { 1, 0 }
  uselistorder i32 %v2_8ed0, { 1, 0 }
  uselistorder i32 %v1_8ec4, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_8eb0, { 1, 0 }
  uselistorder i32 %v0_8eb0, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8ea8, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_8eb0, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8e98, { 1, 0 }
  uselistorder i32 %v3_8e8c, { 1, 0, 2 }
  uselistorder i32 %v0_8e48, { 1, 0, 2 }
  uselistorder i32 %v1_8dec, { 1, 2, 0 }
  uselistorder i32 %v3_8de8, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_8dc4, { 1, 2, 0 }
  uselistorder i32 %v3_8db8, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8da4, { 1, 0 }
  uselistorder i8 %v3_8da4, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8da4, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9054, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_8d94, { 1, 0 }
  uselistorder i32 %v1_8d88, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_8d64, { 1, 0 }
  uselistorder i32 %v1_8d64, { 1, 0 }
  uselistorder i1 %v7_8d5c, { 1, 0 }
  uselistorder i32 %v4_8d40, { 1, 0, 2 }
  uselistorder i1 %v7_8d3c, { 1, 0 }
  uselistorder i32 %v4_8d20, { 1, 0, 2 }
  uselistorder i1 %v7_8d1c, { 1, 0 }
  uselistorder i1 %v7_8d14, { 1, 0 }
  uselistorder i1 %v7_8d0c, { 1, 0 }
  uselistorder i32 %v2_8d30, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8ce8248, { 1, 0 }
  uselistorder i32 %v5_8ce4, { 1, 0 }
  uselistorder i8* %v1_9094, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8e9c, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_8e24, { 1, 0 }
  uselistorder i32 %v3_a60c, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_8c54, { 1, 0 }
  uselistorder i32 %v0_8c54, { 1, 0 }
  uselistorder i32 %v2_8c24, { 2, 1, 3, 0, 5, 4, 6 }
  uselistorder i32 %v2_8c14, { 1, 0 }
  uselistorder i32 %v8_8bf8, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8bd8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8b60, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_8b04, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_8af0, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_8ae4, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8a74, { 1, 0, 2 }
  uselistorder i32 %v1_8a70, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8a60, { 1, 0 }
  uselistorder i32 %v3_8a5c, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8a54, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_8a48, { 1, 0, 2 }
  uselistorder i32 %v10_8a44, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_8a3c, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_8a2c, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_8a1c, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_89fc, { 1, 0 }
  uselistorder i32 %v0_89f8, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_89d4, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_89cc, { 1, 0 }
  uselistorder i32 %v6_8954, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_8938, { 2, 1, 0 }
  uselistorder i32 %v1_892c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 14, 15, 8, 9, 10, 13, 11, 12, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 6, 5, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 12, 10, 11, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 23, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 24, 25, 26, 30, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 50, 52, 53, 54, 55, 56, 57, 59, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 145, 146, 99, 100, 104, 101, 102, 103, 105, 106, 109, 110, 107, 108, 111, 113, 112, 114, 115, 116, 117, 118, 123, 119, 120, 121, 122, 124, 126, 125, 3, 128, 127, 2, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 163, 144, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 105, 106, 107, 108, 109, 110, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 104, 72, 73, 74, 75, 78, 79, 76, 77, 80, 81, 82, 83, 84, 85, 86, 88, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 170, 25, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 165, 166, 167, 168, 169, 171, 172, 37, 9, 38, 39, 40, 41, 44, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 121, 123, 124, 126, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 0 }
  uselistorder i32* %r0.global-to-local, { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 207, 32, 144, 209, 72, 38, 33, 35, 34, 36, 39, 37, 41, 40, 43, 42, 44, 46, 45, 47, 50, 48, 49, 52, 51, 55, 53, 54, 56, 57, 58, 60, 59, 61, 62, 63, 65, 64, 66, 68, 67, 70, 69, 71, 74, 73, 76, 75, 77, 79, 78, 81, 80, 82, 84, 83, 85, 88, 86, 87, 90, 89, 92, 91, 333, 7, 335, 334, 6, 336, 5, 337, 338, 4, 339, 3, 341, 340, 342, 343, 344, 2, 346, 345, 1, 347, 93, 95, 94, 96, 97, 98, 100, 99, 102, 101, 103, 105, 104, 106, 108, 107, 110, 109, 111, 112, 115, 113, 114, 116, 118, 117, 119, 121, 120, 123, 122, 124, 125, 126, 128, 127, 129, 131, 130, 133, 132, 135, 134, 136, 138, 137, 139, 140, 142, 141, 9, 143, 146, 145, 148, 147, 150, 149, 153, 151, 152, 155, 154, 156, 158, 157, 159, 161, 160, 163, 162, 165, 164, 166, 168, 167, 169, 171, 170, 172, 173, 175, 174, 177, 176, 178, 180, 179, 181, 183, 182, 184, 185, 187, 186, 189, 188, 190, 192, 191, 193, 195, 194, 196, 198, 197, 199, 200, 202, 201, 204, 203, 212, 205, 206, 274, 208, 210, 211, 8, 213, 214, 216, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 255, 257, 258, 259, 260, 262, 261, 263, 264, 265, 0, 266, 31, 267, 269, 268, 29, 30, 271, 270, 279, 272, 273, 275, 277, 276, 278, 281, 280, 28, 283, 282, 27, 284, 285, 286, 287, 26, 288, 25, 289, 290, 291, 293, 292, 294, 295, 296, 298, 297, 299, 300, 301, 303, 302, 305, 304, 307, 306, 309, 308, 311, 310, 312, 313, 314, 315, 316, 317, 318 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 28, 29, 30, 31, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 27, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 26 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 52, 53, 54, 55, 56, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 50, 51, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 6, 4, 3, 28, 7, 8, 9, 2, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 141, 25, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 140, 100, 99, 101, 102, 103, 108, 110, 109, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 124, 125, 117, 118, 119, 120, 121, 122, 123, 126, 0, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 134, 25, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 50, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 133, 99, 104, 103, 100, 101, 102, 105, 106, 107, 108, 109, 110, 118, 119, 111, 112, 113, 114, 115, 116, 117, 120, 0, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 137, 25, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 50, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 136, 99, 100, 105, 107, 106, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113, 121, 122, 114, 115, 116, 117, 118, 119, 120, 123, 0, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 153, 28, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 152, 106, 111, 113, 112, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 130, 131, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 0, 137, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151 }
  uselistorder i32 ptrtoint (i32* @global_var_15120.77 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15110.72 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15108.70 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15104.68 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_150fc.66 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 (i8*, i32)* @function_1242c, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_150dc.54 to i32), { 0, 2, 1, 3 }
  uselistorder i8 7, { 5, 6, 7, 0, 1, 2, 3, 4 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_150e4.48 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_a5c4, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_a470, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_a444, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_a288, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a168, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_a13c, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_9fd8, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9f8c, { 1, 0 }
  uselistorder label %dec_label_pc_9f64, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9f58, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_9db0, { 1, 0 }
  uselistorder label %dec_label_pc_9d40, { 1, 0 }
  uselistorder label %dec_label_pc_9c14, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_9bec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9b84, { 1, 2, 0 }
  uselistorder label %dec_label_pc_9b54, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_99d8, { 1, 0 }
  uselistorder label %dec_label_pc_99d0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_99a8, { 1, 0 }
  uselistorder label %dec_label_pc_9968, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9878, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_9574, { 1, 0 }
  uselistorder label %dec_label_pc_949c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9420, { 1, 0 }
  uselistorder label %dec_label_pc_9408, { 1, 0 }
  uselistorder label %dec_label_pc_93cc, { 1, 0 }
  uselistorder label %dec_label_pc_9358, { 1, 0 }
  uselistorder label %dec_label_pc_9320, { 1, 0 }
  uselistorder label %dec_label_pc_9060, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9030, { 1, 0 }
  uselistorder label %dec_label_pc_8f8c, { 7, 8, 2, 9, 1, 13, 6, 14, 15, 10, 0, 11, 12, 5, 3, 4 }
  uselistorder label %dec_label_pc_8d84, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_8cb0.dec_label_pc_8cb0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8c90.dec_label_pc_8c90_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8c7c, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8c7c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8c1c, { 1, 0 }
  uselistorder label %dec_label_pc_8b98, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_8a50, { 1, 0 }
  uselistorder label %dec_label_pc_8a0c, { 1, 3, 4, 0, 2 }
}

define i32 @function_a6d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a6d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a6d8 = load i32, i32* @r4, align 4
  %v15_a6d8 = load i32, i32* @r8, align 4
  %v21_a6d8 = load i32, i32* @sl, align 4
  %v24_a6d8 = load i32, i32* @fp, align 4
  %v1_a6dc = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_a6dc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a6f8 = urem i32 %arg4, 256
  store i32 %v1_a6f8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a708 = call i32 @function_135b8(i32 %v1_a6dc, i32 4)
  %v0_a70c = load i32, i32* @r5, align 4
  store i32 %v0_a70c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a718 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a718, i32* %r3.global-to-local, align 4
  %v0_a71c = load i32, i32* @r4, align 4
  store i32 %v0_a71c, i32* %r0.global-to-local, align 4
  %v5_a720 = inttoptr i32 %v0_a70c to i32*
  %v6_a720 = call i32 @function_829c(i32 %v0_a71c, i32* %v5_a720, i32 2, i32 %v0_a718)
  %v1_a72c = urem i32 %v6_a720, 256
  store i32 %v1_a72c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a738 = load i32, i32* @r5, align 4
  store i32 %v0_a738, i32* %r1.global-to-local, align 4
  %v0_a73c = load i32, i32* @r4, align 4
  store i32 %v0_a73c, i32* %r0.global-to-local, align 4
  %v5_a740 = trunc i32 %v6_a720 to i8
  %v6_a744 = inttoptr i32 %v0_a738 to i32*
  %v7_a744 = call i32 @function_829c(i32 %v0_a73c, i32* %v6_a744, i32 3, i32 65535)
  %v0_a748 = load i32, i32* @r5, align 4
  store i32 %v0_a748, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a744, i32* @r7, align 4
  %v0_a758 = load i32, i32* @r4, align 4
  store i32 %v0_a758, i32* %r0.global-to-local, align 4
  %v4_a75c = inttoptr i32 %v0_a748 to i32*
  %v5_a75c = call i32 @function_829c(i32 %v0_a758, i32* %v4_a75c, i32 4, i32 64)
  %v1_a764 = urem i32 %v5_a75c, 256
  store i32 %v1_a764, i32* %ip.global-to-local, align 4
  %v0_a768 = load i32, i32* @r5, align 4
  store i32 %v0_a768, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a774 = load i32, i32* @r4, align 4
  store i32 %v0_a774, i32* %r0.global-to-local, align 4
  %v5_a778 = trunc i32 %v5_a75c to i8
  %v6_a77c = inttoptr i32 %v0_a768 to i32*
  %v7_a77c = call i32 @function_829c(i32 %v0_a774, i32* %v6_a77c, i32 5, i32 1)
  %v1_a788 = urem i32 %v7_a77c, 256
  store i32 %v1_a788, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a794 = load i32, i32* @r5, align 4
  store i32 %v0_a794, i32* %r1.global-to-local, align 4
  %v0_a798 = load i32, i32* @r4, align 4
  store i32 %v0_a798, i32* %r0.global-to-local, align 4
  %v5_a7a0 = inttoptr i32 %v0_a794 to i32*
  %v6_a7a0 = call i32 @function_829c(i32 %v0_a798, i32* %v5_a7a0, i32 6, i32 65535)
  %v0_a7ac = load i32, i32* @r5, align 4
  store i32 %v0_a7ac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a7b8 = load i32, i32* @r4, align 4
  store i32 %v0_a7b8, i32* %r0.global-to-local, align 4
  %v5_a7bc = inttoptr i32 %v0_a7ac to i32*
  %v6_a7bc = call i32 @function_829c(i32 %v0_a7b8, i32* %v5_a7bc, i32 7, i32 65535)
  %v0_a7c0 = load i32, i32* @r5, align 4
  store i32 %v0_a7c0, i32* %r1.global-to-local, align 4
  %v0_a7c4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a7c4, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_a7bc, i32* @sl, align 4
  %v0_a7d0 = load i32, i32* @r4, align 4
  store i32 %v0_a7d0, i32* %r0.global-to-local, align 4
  %v4_a7d4 = inttoptr i32 %v0_a7c0 to i32*
  %v5_a7d4 = call i32 @function_829c(i32 %v0_a7d0, i32* %v4_a7d4, i32 %v0_a7c4, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a7e4 = load i32, i32* @r5, align 4
  store i32 %v0_a7e4, i32* %r1.global-to-local, align 4
  %v0_a7e8 = load i32, i32* @r4, align 4
  store i32 %v0_a7e8, i32* %r0.global-to-local, align 4
  %v4_a7ec = inttoptr i32 %v0_a7e4 to i32*
  %v5_a7ec = call i32 @function_829c(i32 %v0_a7e8, i32* %v4_a7ec, i32 1, i32 1)
  %v1_a7f4 = urem i32 %v5_a7ec, 256
  store i32 %v1_a7f4, i32* %ip.global-to-local, align 4
  %v0_a7f8 = load i32, i32* @r5, align 4
  store i32 %v0_a7f8, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a800 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a800, i32* %r3.global-to-local, align 4
  %v0_a804 = load i32, i32* @r4, align 4
  store i32 %v0_a804, i32* %r0.global-to-local, align 4
  %v5_a80c = inttoptr i32 %v0_a7f8 to i32*
  %v6_a80c = call i32 @function_829c(i32 %v0_a804, i32* %v5_a80c, i32 18, i32 %v0_a800)
  %v0_a814 = load i32, i32* @r5, align 4
  store i32 %v0_a814, i32* %r1.global-to-local, align 4
  %v2_a818 = load i32, i32* @global_var_1dd3c.81, align 4
  store i32 %v2_a818, i32* %r3.global-to-local, align 4
  store i32 %v6_a80c, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_a824 = load i32, i32* @r4, align 4
  store i32 %v0_a824, i32* %r0.global-to-local, align 4
  %v4_a828 = inttoptr i32 %v0_a814 to i32*
  %v5_a828 = call i32 @function_829c(i32 %v0_a824, i32* %v4_a828, i32 24, i32 %v2_a818)
  %v0_a830 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a830, i32* %r0.global-to-local, align 4
  %v1_a834 = inttoptr i32 %v0_a830 to i32*
  %v2_a834 = call i32 @function_12cb0(i32* %v1_a834)
  %v1_a838 = load i32, i32* @r6, align 4
  %v2_a838 = add i32 %v1_a838, %v2_a834
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a84c = call i32 @function_132cc(i32 2, i32 3, i32 6)
  store i32 %v3_a84c, i32* %r0.global-to-local, align 4
  %v7_a850 = icmp eq i32 %v3_a84c, -1
  store i1 %v7_a850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a850, label %dec_label_pc_ae68, label %dec_label_pc_a85c

dec_label_pc_a85c:                                ; preds = %dec_label_pc_a6d8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a864 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a864, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_a86c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a86c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a878 = call i32 @function_1329c(i32 %v3_a84c, i32 %v0_a86c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_a878, i32* %r0.global-to-local, align 4
  %v7_a87c = icmp eq i32 %v6_a878, -1
  store i1 %v7_a87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a87c, label %dec_label_pc_ae70, label %dec_label_pc_a884

dec_label_pc_a884:                                ; preds = %dec_label_pc_a85c
  %v0_a890 = load i32, i32* @sl, align 4
  %v3_a890 = mul i32 %v0_a890, 65536
  store i32 %v3_a890, i32* %sl.global-to-local, align 4
  %v0_a894 = load i32, i32* @r7, align 4
  %v2_a89c = icmp eq i32 %v1_a6dc, 0
  store i1 %v2_a89c, i1* %cpsr_z.global-to-local, align 1
  %v0_a8a0 = load i32, i32* @r8, align 4
  %v1_a8a0 = urem i32 %v0_a8a0, 256
  store i32 %v1_a8a0, i32* %r8.global-to-local, align 4
  %v3_a8a4 = urem i32 %v0_a894, 65536
  store i32 %v3_a8a4, i32* %r3.global-to-local, align 4
  %v3_a8a8 = urem i32 %v6_a7a0, 65536
  store i32 %v3_a8a8, i32* %r1.global-to-local, align 4
  %v3_a8ac = urem i32 %v0_a890, 65536
  store i32 %v3_a8ac, i32* %r2.global-to-local, align 4
  %v0_a8b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a8b8, i32* %stack_var_-40, align 4
  br i1 %v2_a89c, label %dec_label_pc_ab4c.preheader, label %dec_label_pc_a8cc

dec_label_pc_a8cc:                                ; preds = %dec_label_pc_a884
  %v3_a8d4 = mul i32 %v5_a7d4, 65536
  %v1_a8dc = urem i32 %v6_a7a0, 256
  %v1_a8e4 = add i32 %v3_a8d4, 524288
  %v1_a8e8 = add i32 %v3_a8d4, 4325376
  %v1_a8ec = urem i32 %v0_a890, 256
  %v1_a8f0 = add i32 %v3_a8d4, 1835008
  %v0_a894.not = or i32 %v0_a894, -65536
  %v1_a8f8 = xor i32 %v0_a894.not, 65535
  %v3_a8fc = udiv i32 %v1_a8f0, 256
  %tmp82 = udiv i32 %v0_a894, 256
  %v1_a910 = and i32 %v3_a8fc, 65280
  store i32 %v1_a910, i32* %r0.global-to-local, align 4
  %v3_a934 = mul nuw nsw i32 %v1_a8dc, 256
  %tmp83 = udiv i32 %v6_a7a0, 256
  %v4_a93c = urem i32 %tmp83, 256
  %v5_a93c = or i32 %v4_a93c, %v3_a934
  store i32 %v5_a93c, i32* @lr, align 4
  %tmp84 = mul nsw i32 %v1_a8f8, 256
  %v3_a944 = mul nuw nsw i32 %v1_a8ec, 256
  %sext23 = mul i32 %tmp82, 16777216
  %v4_a94c = sdiv i32 %sext23, 16777216
  %v4_a914 = sdiv i32 %v1_a8e8, 16777216
  %tmp85 = udiv i32 %v0_a890, 256
  %v4_a954 = urem i32 %tmp85, 256
  %v5_a954 = or i32 %v4_a954, %v3_a944
  store i32 %v5_a954, i32* @r7, align 4
  %v1_a958 = and i32 %tmp84, 65280
  store i32 %v1_a958, i32* %ip.global-to-local, align 4
  %v4_a95c = sdiv i32 %v1_a8f0, 16777216
  %v3_a960 = udiv i32 %v1_a8e4, 256
  %tmp86 = udiv i32 %v1_a8f8, 256
  %v4_a964 = urem i32 %tmp86, 256
  %v5_a964 = or i32 %v4_a964, %v1_a958
  store i32 %v5_a964, i32* @r6, align 4
  %v3_a968 = ashr i32 %v1_a8e8, 31
  %v3_a96c = ashr i32 %sext23, 31
  %v1_a970 = and i32 %v3_a960, 65280
  store i32 %v1_a970, i32* @r5, align 4
  %v3_a97c = ashr i32 %v1_a8f0, 31
  store i32 %v3_a97c, i32* %r2.global-to-local, align 4
  %v3_a98032 = udiv i32 %v1_a958, 256
  store i32 %v3_a98032, i32* %r3.global-to-local, align 4
  store i32 %v1_a8dc, i32* %r1.global-to-local, align 4
  %v4_a988 = udiv i32 %v1_a8e4, 16777216
  %v5_a988 = or i32 %v4_a988, %v1_a970
  store i32 %v5_a988, i32* %r8.global-to-local, align 4
  %v5_a98c = trunc i32 %tmp86 to i8
  store i32 %v0_a8b8, i32* @r4, align 4
  %v3_a9a433 = udiv i32 %v1_a970, 256
  store i32 %v3_a9a433, i32* %sl.global-to-local, align 4
  store i32 %v1_a8ec, i32* %fp.global-to-local, align 4
  %v4_a9f8 = sext i8 %v5_a778 to i32
  %sext15 = mul i32 %v1_a8f8, 16777216
  %v4_aac8 = sdiv i32 %sext15, 16777216
  %v2_aaf8 = icmp eq i32 %v1_a8a0, 0
  %sext16 = mul i32 %v6_a7a0, 16777216
  %v4_ab0c = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp83, 16777216
  %v4_ab28 = sdiv i32 %sext17, 16777216
  %v1_aa10 = trunc i32 %v4_a94c to i8
  br label %dec_label_pc_a9ac

dec_label_pc_a9ac:                                ; preds = %bb97, %dec_label_pc_a8cc
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a9b8 = call i32 @function_135b8(i32 1510, i32 4)
  store i32 %v2_a9b8, i32* %r0.global-to-local, align 4
  store i32 %v2_a708, i32* %r2.global-to-local, align 4
  %v3_a9c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a9c0, i32* %r3.global-to-local, align 4
  %v2_a9c4 = load i32, i32* @r4, align 4
  %v5_a9c4 = mul i32 %v2_a9c4, 4
  %v6_a9c4 = add i32 %v5_a9c4, %v2_a708
  %v7_a9c4 = inttoptr i32 %v6_a9c4 to i32*
  store i32 %v2_a9b8, i32* %v7_a9c4, align 4
  %v0_a9c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a9c8 = load i32, i32* %r3.global-to-local, align 4
  %v4_a9c8 = mul i32 %v1_a9c8, 4
  %v5_a9c8 = add i32 %v4_a9c8, %v0_a9c8
  %v6_a9c8 = inttoptr i32 %v5_a9c8 to i32*
  %v7_a9c8 = load i32, i32* %v6_a9c8, align 4
  store i32 %v7_a9c8, i32* %r4.global-to-local, align 4
  %v1_a9cc = inttoptr i32 %v7_a9c8 to i8*
  %v2_a9cc = load i8, i8* %v1_a9cc, align 1
  %tmp = urem i8 %v2_a9cc, 16
  %v1_a9d0 = zext i8 %tmp to i32
  %v1_a9d4 = or i32 %v1_a9d0, 64
  store i32 %v1_a9d4, i32* %r2.global-to-local, align 4
  %v1_a9d8 = trunc i32 %v1_a9d4 to i8
  store i8 %v1_a9d8, i8* %v1_a9cc, align 1
  %v0_a9dc = load i32, i32* %r4.global-to-local, align 4
  %v1_a9dc = inttoptr i32 %v0_a9dc to i8*
  %v2_a9dc = load i8, i8* %v1_a9dc, align 1
  %v1_a9e0 = and i8 %v2_a9dc, -16
  %v1_a9e4 = or i8 %v1_a9e0, 5
  store i32 %v1_a788, i32* %r1.global-to-local, align 4
  store i8 %v1_a9e4, i8* %v1_a9dc, align 1
  %v2_a9f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_a9f4 = add i32 %v2_a9f4, 1
  %v4_a9f4 = inttoptr i32 %v3_a9f4 to i8*
  store i8 %v5_a740, i8* %v4_a9f4, align 1
  %v2_a9fc = load i32, i32* %r4.global-to-local, align 4
  %v3_a9fc = add i32 %v2_a9fc, 8
  %v4_a9fc = inttoptr i32 %v3_a9fc to i8*
  store i8 %v5_a778, i8* %v4_a9fc, align 1
  store i32 %v4_a94c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_aa08 = load i32, i32* %r1.global-to-local, align 4
  %v9_aa08 = icmp eq i32 %v0_aa08, 0
  store i1 %v9_aa08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a968, i32* %r2.global-to-local, align 4
  %v2_aa10 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa10 = add i32 %v2_aa10, 4
  %v4_aa10 = inttoptr i32 %v3_aa10 to i8*
  store i8 %v1_aa10, i8* %v4_aa10, align 1
  store i32 %v4_a914, i32* %r1.global-to-local, align 4
  %v0_aa18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa18, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a9ac
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_aa1c = load i32, i32* %r4.global-to-local, align 4
  %v4_aa1c = add i32 %v3_aa1c, 6
  %v5_aa1c = inttoptr i32 %v4_aa1c to i8*
  store i8 64, i8* %v5_aa1c, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a9ac, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_aa24 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa24 = trunc i32 %v0_aa24 to i8
  %v2_aa24 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa24 = add i32 %v2_aa24, 3
  %v4_aa24 = inttoptr i32 %v3_aa24 to i8*
  store i8 %v1_aa24, i8* %v4_aa24, align 1
  %v0_aa28 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa28 = trunc i32 %v0_aa28 to i8
  %v2_aa28 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa28 = add i32 %v2_aa28, 2
  %v4_aa28 = inttoptr i32 %v3_aa28 to i8*
  store i8 %v1_aa28, i8* %v4_aa28, align 1
  %v0_aa2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa2c, label %bb88, label %bb87

bb87:                                             ; preds = %.thread
  %v1_aa2c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_aa2c, i32* %r2.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %.thread, %bb87
  store i32 %v3_a96c, i32* %r1.global-to-local, align 4
  %v0_aa34 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa34 = trunc i32 %v0_aa34 to i8
  %v2_aa34 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa34 = add i32 %v2_aa34, 9
  %v4_aa34 = inttoptr i32 %v3_aa34 to i8*
  store i8 %v1_aa34, i8* %v4_aa34, align 1
  %v0_aa38 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa38, label %bb90, label %bb89

bb89:                                             ; preds = %bb88
  %v1_aa38 = load i32, i32* %r2.global-to-local, align 4
  %v2_aa38 = trunc i32 %v1_aa38 to i8
  %v3_aa38 = load i32, i32* %r4.global-to-local, align 4
  %v4_aa38 = add i32 %v3_aa38, 7
  %v5_aa38 = inttoptr i32 %v4_aa38 to i8*
  store i8 %v2_aa38, i8* %v5_aa38, align 1
  br label %bb90

bb90:                                             ; preds = %bb88, %bb89
  %v3_aa3c = load i32, i32* %stack_var_-40, align 4
  %v5_aa44 = mul i32 %v3_aa3c, 24
  store i32 %v5_aa44, i32* %r3.global-to-local, align 4
  store i32 %v5_a828, i32* %r2.global-to-local, align 4
  %v1_aa4c = load i32, i32* %r4.global-to-local, align 4
  %v2_aa4c = add i32 %v1_aa4c, 12
  %v3_aa4c = inttoptr i32 %v2_aa4c to i32*
  store i32 %v5_a828, i32* %v3_aa4c, align 4
  %v0_aa50 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa50 = load i32, i32* @sb, align 4
  %v2_aa50 = add i32 %v1_aa50, %v0_aa50
  store i32 %v2_aa50, i32* %r3.global-to-local, align 4
  %v1_aa54 = add i32 %v2_aa50, 16
  %v2_aa54 = inttoptr i32 %v1_aa54 to i32*
  %v3_aa54 = load i32, i32* %v2_aa54, align 4
  store i32 %v3_aa54, i32* %r2.global-to-local, align 4
  %v0_aa58 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa58 = trunc i32 %v0_aa58 to i8
  %v2_aa58 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa58 = add i32 %v2_aa58, 5
  %v4_aa58 = inttoptr i32 %v3_aa58 to i8*
  store i8 %v1_aa58, i8* %v4_aa58, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_aa60 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa60 = add i32 %v0_aa60, 20
  store i32 %v1_aa60, i32* %r1.global-to-local, align 4
  %v3_aa64 = add i32 %v0_aa60, 22
  %v4_aa64 = inttoptr i32 %v3_aa64 to i8*
  store i8 101, i8* %v4_aa64, align 1
  %v0_aa68 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa68 = load i32, i32* %r4.global-to-local, align 4
  %v2_aa68 = add i32 %v1_aa68, 16
  %v3_aa68 = inttoptr i32 %v2_aa68 to i32*
  store i32 %v0_aa68, i32* %v3_aa68, align 4
  %v0_aa6c = load i32, i32* %r4.global-to-local, align 4
  %v1_aa6c = add i32 %v0_aa6c, 24
  store i32 %v1_aa6c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_aa74 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa74 = add i32 %v0_aa74, -93
  store i32 %v1_aa74, i32* %r3.global-to-local, align 4
  %v2_aa78 = load i32, i32* %r1.global-to-local, align 4
  %v3_aa78 = add i32 %v2_aa78, 3
  %v4_aa78 = inttoptr i32 %v3_aa78 to i8*
  store i8 88, i8* %v4_aa78, align 1
  %v0_aa7c = load i32, i32* %r3.global-to-local, align 4
  %v1_aa7c = trunc i32 %v0_aa7c to i8
  %v2_aa7c = load i32, i32* %r0.global-to-local, align 4
  %v3_aa7c = add i32 %v2_aa7c, 12
  %v4_aa7c = inttoptr i32 %v3_aa7c to i8*
  store i8 %v1_aa7c, i8* %v4_aa7c, align 1
  %v0_aa80 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa80 = trunc i32 %v0_aa80 to i8
  %v2_aa80 = load i32, i32* %r0.global-to-local, align 4
  %v3_aa80 = add i32 %v2_aa80, 13
  %v4_aa80 = inttoptr i32 %v3_aa80 to i8*
  store i8 %v1_aa80, i8* %v4_aa80, align 1
  %v0_aa84 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa84 = add i32 %v0_aa84, 38
  %v2_aa84 = inttoptr i32 %v1_aa84 to i8*
  %v3_aa84 = load i8, i8* %v2_aa84, align 1
  %tmp103 = urem i8 %v3_aa84, 16
  %v1_aa88 = zext i8 %tmp103 to i32
  %v1_aa8c = or i32 %v1_aa88, 64
  store i32 %v1_aa8c, i32* %r3.global-to-local, align 4
  %v1_aa90 = trunc i32 %v1_aa8c to i8
  store i8 %v1_aa90, i8* %v2_aa84, align 1
  %v0_aa94 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa94 = add i32 %v0_aa94, 38
  %v2_aa94 = inttoptr i32 %v1_aa94 to i8*
  %v3_aa94 = load i8, i8* %v2_aa94, align 1
  %v1_aa98 = and i8 %v3_aa94, -16
  %v1_aa9c = or i8 %v1_aa98, 5
  store i8 %v1_aa9c, i8* %v2_aa94, align 1
  %v0_aaa8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aaa8 = add i32 %v0_aaa8, 38
  store i32 %v1_aaa8, i32* @r5, align 4
  %v3_aaac = add i32 %v0_aaa8, 39
  %v4_aaac = inttoptr i32 %v3_aaac to i8*
  store i8 %v5_a740, i8* %v4_aaac, align 1
  store i32 %v4_a95c, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_a97c, i32* %r2.global-to-local, align 4
  %v2_aabc = load i32, i32* @r5, align 4
  %v3_aabc = add i32 %v2_aabc, 4
  %v4_aabc = inttoptr i32 %v3_aabc to i8*
  store i8 %v5_a98c, i8* %v4_aabc, align 1
  %v0_aac0 = load i32, i32* %r1.global-to-local, align 4
  %v1_aac0 = trunc i32 %v0_aac0 to i8
  %v2_aac0 = load i32, i32* @r5, align 4
  %v3_aac0 = add i32 %v2_aac0, 2
  %v4_aac0 = inttoptr i32 %v3_aac0 to i8*
  store i8 %v1_aac0, i8* %v4_aac0, align 1
  %v0_aac4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aac4, label %bb92, label %bb91

bb91:                                             ; preds = %bb90
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %bb90, %bb91
  store i32 %v4_aac8, i32* %r1.global-to-local, align 4
  %v0_aacc = load i32, i32* %r2.global-to-local, align 4
  %v1_aacc = trunc i32 %v0_aacc to i8
  %v2_aacc = load i32, i32* @r5, align 4
  %v3_aacc = add i32 %v2_aacc, 3
  %v4_aacc = inttoptr i32 %v3_aacc to i8*
  store i8 %v1_aacc, i8* %v4_aacc, align 1
  store i32 %v4_a9f8, i32* %r2.global-to-local, align 4
  %v0_aad4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aad4, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_aad4 = load i32, i32* %r3.global-to-local, align 4
  %v2_aad4 = trunc i32 %v1_aad4 to i8
  %v3_aad4 = load i32, i32* @r5, align 4
  %v4_aad4 = add i32 %v3_aad4, 6
  %v5_aad4 = inttoptr i32 %v4_aad4 to i8*
  store i8 %v2_aad4, i8* %v5_aad4, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_aadc = load i32, i32* %r1.global-to-local, align 4
  %v1_aadc = trunc i32 %v0_aadc to i8
  %v2_aadc = load i32, i32* @r5, align 4
  %v3_aadc = add i32 %v2_aadc, 5
  %v4_aadc = inttoptr i32 %v3_aadc to i8*
  store i8 %v1_aadc, i8* %v4_aadc, align 1
  %v0_aae0 = load i32, i32* %r2.global-to-local, align 4
  %v1_aae0 = trunc i32 %v0_aae0 to i8
  %v2_aae0 = load i32, i32* @r5, align 4
  %v3_aae0 = add i32 %v2_aae0, 8
  %v4_aae0 = inttoptr i32 %v3_aae0 to i8*
  store i8 %v1_aae0, i8* %v4_aae0, align 1
  %v0_aae4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aae4, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_aae4 = load i32, i32* %ip.global-to-local, align 4
  %v2_aae4 = trunc i32 %v1_aae4 to i8
  %v3_aae4 = load i32, i32* @r5, align 4
  %v4_aae4 = add i32 %v3_aae4, 7
  %v5_aae4 = inttoptr i32 %v4_aae4 to i8*
  store i8 %v2_aae4, i8* %v5_aae4, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_aae8 = load i32, i32* %r3.global-to-local, align 4
  %v1_aae8 = trunc i32 %v0_aae8 to i8
  %v2_aae8 = load i32, i32* @r5, align 4
  %v3_aae8 = add i32 %v2_aae8, 9
  %v4_aae8 = inttoptr i32 %v3_aae8 to i8*
  store i8 %v1_aae8, i8* %v4_aae8, align 1
  %v0_aaec = call i32 @function_f8c4()
  store i32 %v0_aaec, i32* %r0.global-to-local, align 4
  store i32 %v1_a8a0, i32* %r1.global-to-local, align 4
  store i1 %v2_aaf8, i1* %cpsr_z.global-to-local, align 1
  %v1_aafc = sub i32 1023, %v0_aaec
  store i32 %v1_aafc, i32* %r3.global-to-local, align 4
  br i1 %v2_aaf8, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb96
  %v2_ab04 = load i32, i32* @r5, align 4
  %v3_ab04 = add i32 %v2_ab04, 16
  %v4_ab04 = inttoptr i32 %v3_ab04 to i32*
  store i32 %v1_aafc, i32* %v4_ab04, align 4
  br label %bb97

.thread19:                                        ; preds = %bb96
  %v1_ab00 = load i32, i32* %r4.global-to-local, align 4
  %v2_ab00 = add i32 %v1_ab00, 16
  %v3_ab00 = inttoptr i32 %v2_ab00 to i32*
  %v4_ab00 = load i32, i32* %v3_ab00, align 4
  store i32 %v4_ab00, i32* %r3.global-to-local, align 4
  %v2_ab08 = load i32, i32* @r5, align 4
  %v3_ab08 = add i32 %v2_ab08, 16
  %v4_ab08 = inttoptr i32 %v3_ab08 to i32*
  store i32 %v4_ab00, i32* %v4_ab08, align 4
  br label %bb97

bb97:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_ab0c, i32* %r3.global-to-local, align 4
  %v0_ab10 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab10 = add i32 %v0_ab10, 58
  store i32 %v1_ab10, i32* @r6, align 4
  %v1_ab14 = load i32, i32* @r5, align 4
  %v2_ab14 = add i32 %v1_ab14, 12
  %v3_ab14 = inttoptr i32 %v2_ab14 to i32*
  store i32 %v0_aaec, i32* %v3_ab14, align 4
  %v0_ab18 = load i32, i32* %r3.global-to-local, align 4
  %v1_ab18 = trunc i32 %v0_ab18 to i8
  %v2_ab18 = load i32, i32* @r6, align 4
  %v3_ab18 = add i32 %v2_ab18, 1
  %v4_ab18 = inttoptr i32 %v3_ab18 to i8*
  store i8 %v1_ab18, i8* %v4_ab18, align 1
  %v3_ab1c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab1c, i32* %r3.global-to-local, align 4
  store i32 %v1_a6dc, i32* %r1.global-to-local, align 4
  %v1_ab24 = add i32 %v3_ab1c, 1
  store i32 %v1_ab24, i32* @r4, align 4
  store i32 %v4_ab28, i32* %r2.global-to-local, align 4
  %v9_ab2c = icmp eq i32 %v1_ab24, %v1_a6dc
  store i1 %v9_ab2c, i1* %cpsr_z.global-to-local, align 1
  %v0_ab30 = load i32, i32* %sl.global-to-local, align 4
  %v1_ab30 = trunc i32 %v0_ab30 to i8
  %v2_ab30 = load i32, i32* @r6, align 4
  %v3_ab30 = add i32 %v2_ab30, 5
  %v4_ab30 = inttoptr i32 %v3_ab30 to i8*
  store i8 %v1_ab30, i8* %v4_ab30, align 1
  %v0_ab34 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab34 = trunc i32 %v0_ab34 to i8
  %v2_ab34 = load i32, i32* @r6, align 4
  %v3_ab34 = inttoptr i32 %v2_ab34 to i8*
  store i8 %v1_ab34, i8* %v3_ab34, align 1
  %v0_ab38 = load i32, i32* @r7, align 4
  %v1_ab38 = trunc i32 %v0_ab38 to i8
  %v2_ab38 = load i32, i32* @r6, align 4
  %v3_ab38 = add i32 %v2_ab38, 2
  %v4_ab38 = inttoptr i32 %v3_ab38 to i8*
  store i8 %v1_ab38, i8* %v4_ab38, align 1
  %v0_ab3c = load i32, i32* %fp.global-to-local, align 4
  %v1_ab3c = trunc i32 %v0_ab3c to i8
  %v2_ab3c = load i32, i32* @r6, align 4
  %v3_ab3c = add i32 %v2_ab3c, 3
  %v4_ab3c = inttoptr i32 %v3_ab3c to i8*
  store i8 %v1_ab3c, i8* %v4_ab3c, align 1
  %v0_ab40 = load i32, i32* %r8.global-to-local, align 4
  %v1_ab40 = trunc i32 %v0_ab40 to i8
  %v2_ab40 = load i32, i32* @r6, align 4
  %v3_ab40 = add i32 %v2_ab40, 4
  %v4_ab40 = inttoptr i32 %v3_ab40 to i8*
  store i8 %v1_ab40, i8* %v4_ab40, align 1
  %v0_ab44 = load i32, i32* @r4, align 4
  store i32 %v0_ab44, i32* %stack_var_-40, align 4
  %v5_ab48 = icmp slt i32 %v1_ab24, %v1_a6dc
  br i1 %v5_ab48, label %dec_label_pc_a9ac, label %dec_label_pc_ab4c.preheader

dec_label_pc_ab4c.preheader:                      ; preds = %bb97, %dec_label_pc_a884
  %v1_ab6c = add i32 %v5_a7d4, 66
  %v1_ab70 = add i32 %v5_a7d4, 8
  %v2_ab84 = icmp eq i32 %v5_a828, -1
  %v7_ab84 = icmp eq i32 %v5_a828, -1
  %v3_ada8 = icmp eq i32 %v3_a8a4, 65535
  %v2_ae18 = icmp eq i32 %v1_a8a0, 0
  %v2_abe0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_abf8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_ac08 = ptrtoint i32* %stack_var_-52 to i32
  %v2_ac14 = ptrtoint i32* %stack_var_-50 to i32
  %v2_ac28 = icmp eq i32 %v1_a7f4, 0
  br label %dec_label_pc_ab4c

dec_label_pc_ab4c:                                ; preds = %dec_label_pc_ab4c.preheader, %dec_label_pc_ae54
  store i32 %v1_a6dc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_a89c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_a89c, label %dec_label_pc_ae54, label %dec_label_pc_ab60

dec_label_pc_ab60:                                ; preds = %dec_label_pc_ab4c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_a7d4, i32* %r1.global-to-local, align 4
  store i32 %v1_ab6c, i32* @fp, align 4
  store i32 %v1_ab70, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_ad04

dec_label_pc_ab80:                                ; preds = %dec_label_pc_ad04
  store i32 %v5_a828, i32* %r2.global-to-local, align 4
  store i1 %v7_ab84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ab84, label %dec_label_pc_ad98, label %dec_label_pc_ab8c

dec_label_pc_ab8c:                                ; preds = %dec_label_pc_ad30, %dec_label_pc_ab80
  store i32 %v3_a8a4, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ada8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ada8, label %dec_label_pc_adb4, label %dec_label_pc_aba0

dec_label_pc_aba0:                                ; preds = %dec_label_pc_ad98.dec_label_pc_aba0_crit_edge, %dec_label_pc_ab8c
  %v1_aba4 = phi i32 [ %v1_aba4.pre, %dec_label_pc_ad98.dec_label_pc_aba0_crit_edge ], [ 65535, %dec_label_pc_ab8c ]
  store i32 %v3_a8a8, i32* %r1.global-to-local, align 4
  %v9_aba4 = icmp eq i32 %v3_a8a8, %v1_aba4
  store i1 %v9_aba4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aba4, label %dec_label_pc_adec, label %dec_label_pc_abac

dec_label_pc_abac:                                ; preds = %dec_label_pc_adb4.dec_label_pc_abac_crit_edge, %dec_label_pc_aba0
  %v1_abb0 = phi i32 [ %v1_abb0.pre, %dec_label_pc_adb4.dec_label_pc_abac_crit_edge ], [ %v1_aba4, %dec_label_pc_aba0 ]
  store i32 %v3_a8ac, i32* %r2.global-to-local, align 4
  %v9_abb0 = icmp eq i32 %v3_a8ac, %v1_abb0
  store i1 %v9_abb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_abb0, label %dec_label_pc_ae08, label %dec_label_pc_abb8

dec_label_pc_abb8:                                ; preds = %dec_label_pc_adec, %dec_label_pc_abac
  store i32 %v1_a8a0, i32* %r3.global-to-local, align 4
  store i1 %v2_ae18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae18, label %dec_label_pc_ae2c, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_abb8
  %v1_abc0 = load i32, i32* @r5, align 4
  %v2_abc0 = add i32 %v1_abc0, 16
  %v3_abc0 = inttoptr i32 %v2_abc0 to i32*
  %v4_abc0 = load i32, i32* %v3_abc0, align 4
  store i32 %v4_abc0, i32* %r3.global-to-local, align 4
  %v2_abc4 = load i32, i32* @r6, align 4
  %v3_abc4 = add i32 %v2_abc4, 16
  %v4_abc4 = inttoptr i32 %v3_abc4 to i32*
  store i32 %v4_abc0, i32* %v4_abc4, align 4
  br label %dec_label_pc_abcc

dec_label_pc_abcc:                                ; preds = %bb102, %.thread20, %dec_label_pc_ae2c
  %v0_abcc = call i32 @function_f8c4()
  store i32 %v0_abcc, i32* %r0.global-to-local, align 4
  store i32 %v0_abcc, i32* %stack_var_-44, align 4
  %v0_abd4 = call i32 @function_f8c4()
  store i32 %v0_abd4, i32* %r0.global-to-local, align 4
  store i32 %v0_abd4, i32* %stack_var_-48, align 4
  %v0_abdc = call i32 @function_f8c4()
  store i32 %v2_abe0, i32* %r1.global-to-local, align 4
  store i32 %v0_abdc, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_abec = load i32, i32* @r8, align 4
  store i32 %v0_abec, i32* %r0.global-to-local, align 4
  %v3_abf0 = call i32 @function_120c8(i32 %v0_abec, i32 %v2_abe0, i32 4)
  %v0_abf4 = load i32, i32* @r8, align 4
  %v1_abf4 = add i32 %v0_abf4, 6
  store i32 %v1_abf4, i32* %r0.global-to-local, align 4
  store i32 %v2_abf8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_ac00 = call i32 @function_120c8(i32 %v1_abf4, i32 %v2_abf8, i32 4)
  %v0_ac04 = load i32, i32* @r8, align 4
  %v1_ac04 = add i32 %v0_ac04, 4
  store i32 %v1_ac04, i32* %r0.global-to-local, align 4
  store i32 %v2_ac08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ac10 = call i32 @function_120c8(i32 %v1_ac04, i32 %v2_ac08, i32 2)
  store i32 %v2_ac14, i32* %r1.global-to-local, align 4
  %v0_ac18 = load i32, i32* @r8, align 4
  %v1_ac18 = add i32 %v0_ac18, 10
  store i32 %v1_ac18, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ac20 = call i32 @function_120c8(i32 %v1_ac18, i32 %v2_ac14, i32 2)
  store i32 %v3_ac20, i32* %r0.global-to-local, align 4
  store i32 %v1_a7f4, i32* %r1.global-to-local, align 4
  store i1 %v2_ac28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac28, label %dec_label_pc_ac30, label %dec_label_pc_ae38

dec_label_pc_ac30:                                ; preds = %dec_label_pc_abcc, %dec_label_pc_ae38
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ac34 = load i32, i32* @sl, align 4
  %v1_ac34 = trunc i32 %v0_ac34 to i8
  %v2_ac34 = load i32, i32* @r5, align 4
  %v3_ac34 = add i32 %v2_ac34, 10
  %v4_ac34 = inttoptr i32 %v3_ac34 to i8*
  store i8 %v1_ac34, i8* %v4_ac34, align 1
  %v0_ac38 = load i32, i32* @sl, align 4
  %v1_ac38 = trunc i32 %v0_ac38 to i8
  %v2_ac38 = load i32, i32* @r5, align 4
  %v3_ac38 = add i32 %v2_ac38, 11
  %v4_ac38 = inttoptr i32 %v3_ac38 to i8*
  store i8 %v1_ac38, i8* %v4_ac38, align 1
  %v0_ac3c = load i32, i32* @r5, align 4
  store i32 %v0_ac3c, i32* @r0, align 4
  %v2_ac40 = call i32 @function_e498(i32 %v0_ac3c, i32 20)
  %v3_ac40 = trunc i32 %v2_ac40 to i8
  %v4_ac44 = sdiv i32 %v2_ac40, 256
  store i32 %v4_ac44, i32* %r3.global-to-local, align 4
  %v1_ac48 = trunc i32 %v4_ac44 to i8
  %v2_ac48 = load i32, i32* @r5, align 4
  %v3_ac48 = add i32 %v2_ac48, 11
  %v4_ac48 = inttoptr i32 %v3_ac48 to i8*
  store i8 %v1_ac48, i8* %v4_ac48, align 1
  %v3_ac4c = load i32, i32* @r5, align 4
  %v4_ac4c = add i32 %v3_ac4c, 10
  %v5_ac4c = inttoptr i32 %v4_ac4c to i8*
  store i8 %v3_ac40, i8* %v5_ac4c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ac54 = load i32, i32* @sl, align 4
  %v1_ac54 = trunc i32 %v0_ac54 to i8
  %v2_ac54 = load i32, i32* @r6, align 4
  %v3_ac54 = add i32 %v2_ac54, 10
  %v4_ac54 = inttoptr i32 %v3_ac54 to i8*
  store i8 %v1_ac54, i8* %v4_ac54, align 1
  %v0_ac58 = load i32, i32* @sl, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i8
  %v2_ac58 = load i32, i32* @r6, align 4
  %v3_ac58 = add i32 %v2_ac58, 11
  %v4_ac58 = inttoptr i32 %v3_ac58 to i8*
  store i8 %v1_ac58, i8* %v4_ac58, align 1
  %v0_ac5c = load i32, i32* @r6, align 4
  store i32 %v0_ac5c, i32* @r0, align 4
  %v2_ac60 = call i32 @function_e498(i32 %v0_ac5c, i32 20)
  %v3_ac60 = trunc i32 %v2_ac60 to i8
  store i32 %v2_ac60, i32* %r0.global-to-local, align 4
  %v4_ac64 = sdiv i32 %v2_ac60, 256
  store i32 %v4_ac64, i32* %r3.global-to-local, align 4
  %v3_ac68 = load i32, i32* @r6, align 4
  %v4_ac68 = add i32 %v3_ac68, 10
  %v5_ac68 = inttoptr i32 %v4_ac68 to i8*
  store i8 %v3_ac60, i8* %v5_ac68, align 1
  %v0_ac6c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac6c = trunc i32 %v0_ac6c to i8
  %v2_ac6c = load i32, i32* @r6, align 4
  %v3_ac6c = add i32 %v2_ac6c, 11
  %v4_ac6c = inttoptr i32 %v3_ac6c to i8*
  store i8 %v1_ac6c, i8* %v4_ac6c, align 1
  %v0_ac70 = load i32, i32* @r7, align 4
  %v1_ac70 = add i32 %v0_ac70, 4
  %v2_ac70 = inttoptr i32 %v1_ac70 to i8*
  %v3_ac70 = load i8, i8* %v2_ac70, align 1
  %v4_ac70 = zext i8 %v3_ac70 to i32
  store i32 %v4_ac70, i32* %r3.global-to-local, align 4
  %v1_ac74 = add i32 %v0_ac70, 5
  %v2_ac74 = inttoptr i32 %v1_ac74 to i8*
  %v3_ac74 = load i8, i8* %v2_ac74, align 1
  %v4_ac74 = zext i8 %v3_ac74 to i32
  store i32 %v0_ac70, i32* @r1, align 4
  %v4_ac7c = mul nuw nsw i32 %v4_ac74, 256
  %v5_ac7c = or i32 %v4_ac7c, %v4_ac70
  store i32 %v5_ac7c, i32* %r2.global-to-local, align 4
  %v0_ac80 = load i32, i32* @sl, align 4
  %v1_ac80 = trunc i32 %v0_ac80 to i8
  %v3_ac80 = add i32 %v0_ac70, 6
  %v4_ac80 = inttoptr i32 %v3_ac80 to i8*
  store i8 %v1_ac80, i8* %v4_ac80, align 1
  store i32 %v1_ab70, i32* %r3.global-to-local, align 4
  %v0_ac88 = load i32, i32* @sl, align 4
  %v1_ac88 = trunc i32 %v0_ac88 to i8
  %v2_ac88 = load i32, i32* @r7, align 4
  %v3_ac88 = add i32 %v2_ac88, 7
  %v4_ac88 = inttoptr i32 %v3_ac88 to i8*
  store i8 %v1_ac88, i8* %v4_ac88, align 1
  %v0_ac8c = load i32, i32* @r6, align 4
  store i32 %v0_ac8c, i32* %r0.global-to-local, align 4
  %v4_ac90 = call i32 @function_e4f4(i32 %v0_ac8c, i32 %v0_ac70, i32 %v5_ac7c, i32 %v1_ab70)
  %v5_ac90 = trunc i32 %v4_ac90 to i8
  store i32 %v4_ac90, i32* %r0.global-to-local, align 4
  %v3_ac94 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ac94, i32* %r3.global-to-local, align 4
  %v3_ac98 = mul i32 %v3_ac94, 32
  store i32 %v3_ac98, i32* %r2.global-to-local, align 4
  %v0_ac9c = load i32, i32* @r5, align 4
  %v1_ac9c = add i32 %v0_ac9c, 16
  %v2_ac9c = inttoptr i32 %v1_ac9c to i32*
  %v3_ac9c = load i32, i32* %v2_ac9c, align 4
  store i32 %v3_ac9c, i32* %r1.global-to-local, align 4
  %v5_aca0 = mul i32 %v3_ac94, 24
  store i32 %v5_aca0, i32* %r2.global-to-local, align 4
  %v4_aca435 = udiv i32 %v4_ac90, 256
  %v1_aca8 = trunc i32 %v4_aca435 to i8
  %v2_aca8 = load i32, i32* @r7, align 4
  %v3_aca8 = add i32 %v2_aca8, 7
  %v4_aca8 = inttoptr i32 %v3_aca8 to i8*
  store i8 %v1_aca8, i8* %v4_aca8, align 1
  %v0_acac = load i32, i32* %r2.global-to-local, align 4
  %v1_acac = load i32, i32* @sb, align 4
  %v2_acac = add i32 %v1_acac, %v0_acac
  store i32 %v2_acac, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_acb4 = load i32, i32* @r7, align 4
  %v4_acb4 = add i32 %v3_acb4, 6
  %v5_acb4 = inttoptr i32 %v4_acb4 to i8*
  store i8 %v5_ac90, i8* %v5_acb4, align 1
  %v0_acb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_acb8 = load i32, i32* %lr.global-to-local, align 4
  %v2_acb8 = add i32 %v1_acb8, 4
  %v3_acb8 = inttoptr i32 %v2_acb8 to i32*
  store i32 %v0_acb8, i32* %v3_acb8, align 4
  %v0_acbc = load i32, i32* %r3.global-to-local, align 4
  %v1_acbc = trunc i32 %v0_acbc to i8
  %v2_acbc = load i32, i32* %r2.global-to-local, align 4
  %v3_acbc = load i32, i32* @sb, align 4
  %v4_acbc = add i32 %v3_acbc, %v2_acbc
  %v5_acbc = inttoptr i32 %v4_acbc to i8*
  store i8 %v1_acbc, i8* %v5_acbc, align 1
  %v0_acc0 = load i32, i32* @sl, align 4
  %v1_acc0 = trunc i32 %v0_acc0 to i8
  %v2_acc0 = load i32, i32* %lr.global-to-local, align 4
  %v3_acc0 = add i32 %v2_acc0, 2
  %v4_acc0 = inttoptr i32 %v3_acc0 to i8*
  store i8 %v1_acc0, i8* %v4_acc0, align 1
  %v0_acc4 = load i32, i32* @sl, align 4
  %v1_acc4 = trunc i32 %v0_acc4 to i8
  %v2_acc4 = load i32, i32* %lr.global-to-local, align 4
  %v3_acc4 = add i32 %v2_acc4, 1
  %v4_acc4 = inttoptr i32 %v3_acc4 to i8*
  store i8 %v1_acc4, i8* %v4_acc4, align 1
  %v0_acc8 = load i32, i32* @sl, align 4
  %v1_acc8 = trunc i32 %v0_acc8 to i8
  %v2_acc8 = load i32, i32* %lr.global-to-local, align 4
  %v3_acc8 = add i32 %v2_acc8, 3
  %v4_acc8 = inttoptr i32 %v3_acc8 to i8*
  store i8 %v1_acc8, i8* %v4_acc8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r5, align 4
  store i32 %v0_acd4, i32* %r1.global-to-local, align 4
  store i32 %v3_a84c, i32* %r0.global-to-local, align 4
  %v0_acdc = load i32, i32* @fp, align 4
  store i32 %v0_acdc, i32* %r2.global-to-local, align 4
  %v0_ace0 = load i32, i32* %lr.global-to-local, align 4
  %v6_ace8 = inttoptr i32 %v0_acd4 to i32*
  %v7_ace8 = call i32 @function_13268(i32 %v3_a84c, i32* %v6_ace8, i32 %v0_acdc, i32 16384, i32 %v0_ace0, i32 16)
  %v3_acec = load i32, i32* %stack_var_-40, align 4
  %v1_acf0 = add i32 %v3_acec, 1
  store i32 %v1_acf0, i32* %r0.global-to-local, align 4
  store i32 %v1_a6dc, i32* %r3.global-to-local, align 4
  %v9_acf8 = icmp eq i32 %v1_acf0, %v1_a6dc
  store i1 %v9_acf8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_acf0, i32* %stack_var_-40, align 4
  %v6_ad00 = icmp slt i32 %v1_acf0, %v1_a6dc
  br i1 %v6_ad00, label %dec_label_pc_ad04, label %dec_label_pc_ae54

dec_label_pc_ad04:                                ; preds = %dec_label_pc_ac30, %dec_label_pc_ab60
  %v1_ad18 = phi i32 [ %v1_acf0, %dec_label_pc_ac30 ], [ 0, %dec_label_pc_ab60 ]
  %v5_ad08 = mul i32 %v1_ad18, 24
  %v1_ad0c = load i32, i32* @sb, align 4
  %v2_ad0c = add i32 %v1_ad0c, %v5_ad08
  store i32 %v2_ad0c, i32* %r3.global-to-local, align 4
  store i32 %v2_a708, i32* %r1.global-to-local, align 4
  %v1_ad14 = add i32 %v2_ad0c, 20
  %v2_ad14 = inttoptr i32 %v1_ad14 to i8*
  %v3_ad14 = load i8, i8* %v2_ad14, align 1
  %v4_ad14 = zext i8 %v3_ad14 to i32
  store i32 %v4_ad14, i32* %r2.global-to-local, align 4
  %v4_ad18 = mul i32 %v1_ad18, 4
  %v5_ad18 = add i32 %v4_ad18, %v2_a708
  %v6_ad18 = inttoptr i32 %v5_ad18 to i32*
  %v7_ad18 = load i32, i32* %v6_ad18, align 4
  store i32 %v7_ad18, i32* @r5, align 4
  %v2_ad1c = icmp ugt i8 %v3_ad14, 30
  %v7_ad1c = icmp eq i8 %v3_ad14, 31
  store i1 %v7_ad1c, i1* %cpsr_z.global-to-local, align 1
  %v1_ad20 = add i32 %v7_ad18, 24
  store i32 %v1_ad20, i32* @r8, align 4
  %v1_ad24 = add i32 %v7_ad18, 38
  store i32 %v1_ad24, i32* @r6, align 4
  %v1_ad28 = add i32 %v7_ad18, 58
  store i32 %v1_ad28, i32* @r7, align 4
  %v2_ad2c = xor i1 %v7_ad1c, true
  %v3_ad2c = and i1 %v2_ad1c, %v2_ad2c
  br i1 %v3_ad2c, label %dec_label_pc_ab80, label %dec_label_pc_ad30

dec_label_pc_ad30:                                ; preds = %dec_label_pc_ad04
  %v1_ad30 = add i32 %v2_ad0c, 16
  %v2_ad30 = inttoptr i32 %v1_ad30 to i32*
  %v3_ad30 = load i32, i32* %v2_ad30, align 4
  store i32 %v3_ad30, i32* %r4.global-to-local, align 4
  %v0_ad34 = call i32 @function_f8c4()
  store i32 %v0_ad34, i32* %r0.global-to-local, align 4
  %v3_ad38 = load i32, i32* %stack_var_-40, align 4
  %v5_ad40 = mul i32 %v3_ad38, 24
  %v0_ad44 = load i32, i32* %r4.global-to-local, align 4
  %v1_ad48 = load i32, i32* @sb, align 4
  %v2_ad48 = add i32 %v1_ad48, %v5_ad40
  store i32 %v2_ad48, i32* %r1.global-to-local, align 4
  %v1_ad4c = and i32 %v0_ad44, 65280
  store i32 %v1_ad4c, i32* %r3.global-to-local, align 4
  %v1_ad44 = udiv i32 %v0_ad44, 256
  %v3_ad50 = and i32 %v1_ad44, 65280
  store i32 %v3_ad50, i32* %r2.global-to-local, align 4
  %v3_ad54 = mul i32 %v0_ad44, 16777216
  store i32 %v3_ad54, i32* %ip.global-to-local, align 4
  %v1_ad58 = add i32 %v2_ad48, 20
  %v2_ad58 = inttoptr i32 %v1_ad58 to i8*
  %v3_ad58 = load i8, i8* %v2_ad58, align 1
  %v4_ad58 = zext i8 %v3_ad58 to i32
  store i32 %v4_ad58, i32* %lr.global-to-local, align 4
  %v4_ad5c = mul nuw nsw i32 %v1_ad4c, 256
  %v5_ad5c = or i32 %v4_ad5c, %v3_ad54
  store i32 %v5_ad5c, i32* %ip.global-to-local, align 4
  %v2_ad64 = call i32 @llvm.bswap.i32(i32 %v0_ad44)
  %v7_ad68 = lshr i32 %v0_ad34, %v4_ad58
  %v8_ad68 = add i32 %v7_ad68, %v2_ad64
  %v3_ad74 = mul i32 %v8_ad68, 16777216
  %v1_ad78 = and i32 %v8_ad68, 65280
  store i32 %v1_ad78, i32* %r0.global-to-local, align 4
  store i32 %v5_a828, i32* %r2.global-to-local, align 4
  %v4_ad84 = mul nuw nsw i32 %v1_ad78, 256
  %v5_ad84 = or i32 %v4_ad84, %v3_ad74
  store i32 %v5_ad84, i32* %r1.global-to-local, align 4
  %v2_ad88 = call i32 @llvm.bswap.i32(i32 %v8_ad68)
  store i32 %v2_ad88, i32* %r3.global-to-local, align 4
  store i1 %v7_ab84, i1* %cpsr_z.global-to-local, align 1
  %v1_ad90 = load i32, i32* @r5, align 4
  %v2_ad90 = add i32 %v1_ad90, 16
  %v3_ad90 = inttoptr i32 %v2_ad90 to i32*
  store i32 %v2_ad88, i32* %v3_ad90, align 4
  br i1 %v2_ab84, label %dec_label_pc_ad98, label %dec_label_pc_ab8c

dec_label_pc_ad98:                                ; preds = %dec_label_pc_ad30, %dec_label_pc_ab80
  %v0_ad98 = call i32 @function_f8c4()
  store i32 %v0_ad98, i32* %r0.global-to-local, align 4
  store i32 %v3_a8a4, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ada8, i1* %cpsr_z.global-to-local, align 1
  %v1_adac = load i32, i32* @r5, align 4
  %v2_adac = add i32 %v1_adac, 12
  %v3_adac = inttoptr i32 %v2_adac to i32*
  store i32 %v0_ad98, i32* %v3_adac, align 4
  br i1 %v3_ada8, label %dec_label_pc_adb4, label %dec_label_pc_ad98.dec_label_pc_aba0_crit_edge

dec_label_pc_ad98.dec_label_pc_aba0_crit_edge:    ; preds = %dec_label_pc_ad98
  %v1_aba4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aba0

dec_label_pc_adb4:                                ; preds = %dec_label_pc_ad98, %dec_label_pc_ab8c
  %v0_adb4 = call i32 @function_f8c4()
  %v3_adbc = urem i32 %v0_adb4, 65536
  store i32 %v3_adbc, i32* %r0.global-to-local, align 4
  %v1_adc4 = sub nsw i32 999, %v3_adbc
  store i32 %v1_adc4, i32* %r2.global-to-local, align 4
  %v3_adc8 = sdiv i32 %v1_adc4, 256
  store i32 %v3_adc8, i32* %r1.global-to-local, align 4
  %v3_adcc34 = udiv i32 %v3_adbc, 256
  store i32 %v3_adcc34, i32* %r3.global-to-local, align 4
  %v1_add0 = trunc i32 %v3_adcc34 to i8
  %v2_add0 = load i32, i32* @r5, align 4
  %v3_add0 = add i32 %v2_add0, 5
  %v4_add0 = inttoptr i32 %v3_add0 to i8*
  store i8 %v1_add0, i8* %v4_add0, align 1
  %v0_add4 = load i32, i32* %r0.global-to-local, align 4
  %v1_add4 = trunc i32 %v0_add4 to i8
  %v2_add4 = load i32, i32* @r5, align 4
  %v3_add4 = add i32 %v2_add4, 4
  %v4_add4 = inttoptr i32 %v3_add4 to i8*
  store i8 %v1_add4, i8* %v4_add4, align 1
  %v0_add8 = load i32, i32* %r1.global-to-local, align 4
  %v1_add8 = trunc i32 %v0_add8 to i8
  %v2_add8 = load i32, i32* @r6, align 4
  %v3_add8 = add i32 %v2_add8, 5
  %v4_add8 = inttoptr i32 %v3_add8 to i8*
  store i8 %v1_add8, i8* %v4_add8, align 1
  store i32 %v3_a8a8, i32* %r1.global-to-local, align 4
  %v1_ade0 = load i32, i32* @r4, align 4
  %v9_ade0 = icmp eq i32 %v3_a8a8, %v1_ade0
  store i1 %v9_ade0, i1* %cpsr_z.global-to-local, align 1
  %v0_ade4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ade4 = trunc i32 %v0_ade4 to i8
  %v2_ade4 = load i32, i32* @r6, align 4
  %v3_ade4 = add i32 %v2_ade4, 4
  %v4_ade4 = inttoptr i32 %v3_ade4 to i8*
  store i8 %v1_ade4, i8* %v4_ade4, align 1
  %v0_ade8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ade8, label %dec_label_pc_adec, label %dec_label_pc_adb4.dec_label_pc_abac_crit_edge

dec_label_pc_adb4.dec_label_pc_abac_crit_edge:    ; preds = %dec_label_pc_adb4
  %v1_abb0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_abac

dec_label_pc_adec:                                ; preds = %dec_label_pc_adb4, %dec_label_pc_aba0
  %v0_adec = call i32 @function_f8c4()
  %v1_adec = trunc i32 %v0_adec to i8
  store i32 %v0_adec, i32* %r0.global-to-local, align 4
  store i32 %v3_a8ac, i32* %r2.global-to-local, align 4
  %v4_adf4 = sdiv i32 %v0_adec, 256
  store i32 %v4_adf4, i32* %r3.global-to-local, align 4
  %v1_adf8 = load i32, i32* @r4, align 4
  %v9_adf8 = icmp eq i32 %v3_a8ac, %v1_adf8
  store i1 %v9_adf8, i1* %cpsr_z.global-to-local, align 1
  %v3_adfc = load i32, i32* @r5, align 4
  %v4_adfc = add i32 %v3_adfc, 58
  %v5_adfc = inttoptr i32 %v4_adfc to i8*
  store i8 %v1_adec, i8* %v5_adfc, align 1
  %v0_ae00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae00 = trunc i32 %v0_ae00 to i8
  %v2_ae00 = load i32, i32* @r7, align 4
  %v3_ae00 = add i32 %v2_ae00, 1
  %v4_ae00 = inttoptr i32 %v3_ae00 to i8*
  store i8 %v1_ae00, i8* %v4_ae00, align 1
  %v0_ae04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae04, label %dec_label_pc_ae08, label %dec_label_pc_abb8

dec_label_pc_ae08:                                ; preds = %dec_label_pc_adec, %dec_label_pc_abac
  %v0_ae08 = call i32 @function_f8c4()
  %v1_ae08 = trunc i32 %v0_ae08 to i8
  store i32 %v0_ae08, i32* %r0.global-to-local, align 4
  %v4_ae0c36 = udiv i32 %v0_ae08, 256
  %v1_ae10 = trunc i32 %v4_ae0c36 to i8
  %v2_ae10 = load i32, i32* @r7, align 4
  %v3_ae10 = add i32 %v2_ae10, 3
  %v4_ae10 = inttoptr i32 %v3_ae10 to i8*
  store i8 %v1_ae10, i8* %v4_ae10, align 1
  store i32 %v1_a8a0, i32* %r3.global-to-local, align 4
  store i1 %v2_ae18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae18, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_ae08
  %v1_ae1c = load i32, i32* @r5, align 4
  %v2_ae1c = add i32 %v1_ae1c, 16
  %v3_ae1c = inttoptr i32 %v2_ae1c to i32*
  %v4_ae1c = load i32, i32* %v3_ae1c, align 4
  store i32 %v4_ae1c, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_ae08, %bb100
  %v3_ae20 = load i32, i32* @r7, align 4
  %v4_ae20 = add i32 %v3_ae20, 2
  %v5_ae20 = inttoptr i32 %v4_ae20 to i8*
  store i8 %v1_ae08, i8* %v5_ae20, align 1
  %v0_ae24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae24, label %dec_label_pc_ae2c, label %bb102

bb102:                                            ; preds = %bb101
  %v1_ae24 = load i32, i32* %r3.global-to-local, align 4
  %v2_ae24 = load i32, i32* @r6, align 4
  %v3_ae24 = add i32 %v2_ae24, 16
  %v4_ae24 = inttoptr i32 %v3_ae24 to i32*
  store i32 %v1_ae24, i32* %v4_ae24, align 4
  br label %dec_label_pc_abcc

dec_label_pc_ae2c:                                ; preds = %dec_label_pc_abb8, %bb101
  %v0_ae2c = call i32 @function_f8c4()
  store i32 %v0_ae2c, i32* %r0.global-to-local, align 4
  %v1_ae30 = load i32, i32* @r6, align 4
  %v2_ae30 = add i32 %v1_ae30, 16
  %v3_ae30 = inttoptr i32 %v2_ae30 to i32*
  store i32 %v0_ae2c, i32* %v3_ae30, align 4
  br label %dec_label_pc_abcc

dec_label_pc_ae38:                                ; preds = %dec_label_pc_abcc
  %v0_ae38 = load i32, i32* @r7, align 4
  %v1_ae38 = add i32 %v0_ae38, 8
  store i32 %v1_ae38, i32* @r4, align 4
  store i32 %v1_ae38, i32* %r0.global-to-local, align 4
  store i32 %v5_a7d4, i32* %r1.global-to-local, align 4
  %v2_ae44 = call i32 @function_f978(i32 %v1_ae38, i32 %v5_a7d4)
  store i32 %v2_ae44, i32* %r0.global-to-local, align 4
  store i32 %v5_a7d4, i32* %r2.global-to-local, align 4
  %v0_ae4c = load i32, i32* @sl, align 4
  %v1_ae4c = trunc i32 %v0_ae4c to i8
  %v2_ae4c = load i32, i32* @r4, align 4
  %v4_ae4c = add i32 %v2_ae4c, %v5_a7d4
  %v5_ae4c = inttoptr i32 %v4_ae4c to i8*
  store i8 %v1_ae4c, i8* %v5_ae4c, align 1
  br label %dec_label_pc_ac30

dec_label_pc_ae54:                                ; preds = %dec_label_pc_ac30, %dec_label_pc_ab4c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ae58 = call i32 @function_12cb0(i32* null)
  store i32 %v2_ae58, i32* %r0.global-to-local, align 4
  store i32 %v2_a838, i32* %r1.global-to-local, align 4
  %v9_ae60 = icmp eq i32 %v2_a838, %v2_ae58
  store i1 %v9_ae60, i1* %cpsr_z.global-to-local, align 1
  %v6_ae64 = icmp slt i32 %v2_a838, %v2_ae58
  br i1 %v6_ae64, label %dec_label_pc_ae68, label %dec_label_pc_ab4c

dec_label_pc_ae68:                                ; preds = %dec_label_pc_ae54, %dec_label_pc_a6d8, %dec_label_pc_ae70
  %v29_ae6c = phi i32 [ %v3_a84c, %dec_label_pc_a6d8 ], [ %v1_ae74, %dec_label_pc_ae70 ], [ %v2_ae58, %dec_label_pc_ae54 ]
  store i32 %v3_a6d8, i32* %r4.global-to-local, align 4
  store i32 %v15_a6d8, i32* %r8.global-to-local, align 4
  store i32 %v21_a6d8, i32* %sl.global-to-local, align 4
  store i32 %v24_a6d8, i32* %fp.global-to-local, align 4
  ret i32 %v29_ae6c

dec_label_pc_ae70:                                ; preds = %dec_label_pc_a85c
  store i32 %v3_a84c, i32* %r0.global-to-local, align 4
  %v1_ae74 = call i32 @function_129e0(i32 %v3_a84c)
  store i32 %v1_ae74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ae68

; uselistorder directives
  uselistorder i32 %v1_ae74, { 1, 0 }
  uselistorder i32 %v0_ae08, { 0, 2, 1 }
  uselistorder i32 %v0_adec, { 0, 2, 1 }
  uselistorder i32 %v3_adbc, { 0, 2, 1 }
  uselistorder i32 %v2_ad88, { 1, 0 }
  uselistorder i32 %v8_ad68, { 1, 2, 0 }
  uselistorder i32 %v3_ad54, { 1, 0 }
  uselistorder i32 %v0_ad44, { 2, 0, 1, 3 }
  uselistorder i32 %v7_ad18, { 2, 1, 0, 3 }
  uselistorder i32 %v1_acf0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_ac94, { 1, 0, 2 }
  uselistorder i32 %v4_ac90, { 0, 2, 1 }
  uselistorder i32 %v0_ac70, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_ac60, { 0, 2, 1 }
  uselistorder i32 %v4_ac44, { 1, 0 }
  uselistorder i1 %v2_ae18, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ada8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_ab84, { 2, 1, 0 }
  uselistorder i32 %v1_ab70, { 1, 0, 2 }
  uselistorder i32 %v0_aaec, { 1, 0, 2 }
  uselistorder i32 %v3_a97c, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0, 2 }
  uselistorder i32 %v1_a8f8, { 0, 2, 1 }
  uselistorder i32 %v1_a8f0, { 2, 1, 0 }
  uselistorder i32 %v1_a8ec, { 1, 0 }
  uselistorder i32 %v1_a8e8, { 1, 0 }
  uselistorder i32 %v1_a8dc, { 1, 0 }
  uselistorder i32 %v3_a8d4, { 2, 0, 1 }
  uselistorder i32 %v3_a8a4, { 0, 1, 3, 2 }
  uselistorder i32 %v1_a8a0, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_a89c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a894, { 0, 2, 1 }
  uselistorder i32 %v0_a890, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a87c, { 1, 0 }
  uselistorder i1 %v7_a850, { 1, 0 }
  uselistorder i32 %v3_a84c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_a838, { 2, 1, 0 }
  uselistorder i32 %v5_a828, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_a7f4, { 1, 2, 0 }
  uselistorder i32 %v5_a7d4, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_a788, { 1, 0 }
  uselistorder i8 %v5_a778, { 1, 0 }
  uselistorder i32 %v5_a75c, { 1, 0 }
  uselistorder i32 %v6_a720, { 1, 0 }
  uselistorder i32 %v2_a708, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a6dc, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 45, 46, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 19, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 15, 14, 16, 18, 17, 19, 21, 20, 22, 23, 24, 25, 27, 26, 31, 28, 29, 30, 34, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_ae68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ae2c, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_ac30, { 1, 0 }
  uselistorder label %dec_label_pc_abcc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ab4c, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ae80(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ae80:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_ae80 = load i32, i32* @r4, align 4
  %v15_ae80 = load i32, i32* @r8, align 4
  %v21_ae80 = load i32, i32* @sl, align 4
  %v24_ae80 = load i32, i32* @fp, align 4
  %v1_ae84 = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_ae84, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_aea0 = urem i32 %arg4, 256
  store i32 %v1_aea0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_aeb0 = call i32 @function_135b8(i32 %v1_ae84, i32 4)
  %v0_aeb4 = load i32, i32* @r5, align 4
  store i32 %v0_aeb4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_aec0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_aec0, i32* %r3.global-to-local, align 4
  %v0_aec4 = load i32, i32* @r4, align 4
  store i32 %v0_aec4, i32* %r0.global-to-local, align 4
  %v5_aec8 = inttoptr i32 %v0_aeb4 to i32*
  %v6_aec8 = call i32 @function_829c(i32 %v0_aec4, i32* %v5_aec8, i32 2, i32 %v0_aec0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_aee0 = load i32, i32* @r5, align 4
  store i32 %v0_aee0, i32* %r1.global-to-local, align 4
  %v0_aee4 = load i32, i32* @r4, align 4
  store i32 %v0_aee4, i32* %r0.global-to-local, align 4
  %v5_aee8 = trunc i32 %v6_aec8 to i8
  %v6_aeec = inttoptr i32 %v0_aee0 to i32*
  %v7_aeec = call i32 @function_829c(i32 %v0_aee4, i32* %v6_aeec, i32 3, i32 65535)
  %v0_aef0 = load i32, i32* @r5, align 4
  store i32 %v0_aef0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_aeec, i32* @r7, align 4
  %v0_af00 = load i32, i32* @r4, align 4
  store i32 %v0_af00, i32* %r0.global-to-local, align 4
  %v4_af04 = inttoptr i32 %v0_aef0 to i32*
  %v5_af04 = call i32 @function_829c(i32 %v0_af00, i32* %v4_af04, i32 4, i32 64)
  %v0_af10 = load i32, i32* @r5, align 4
  store i32 %v0_af10, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_af1c = load i32, i32* @r4, align 4
  store i32 %v0_af1c, i32* %r0.global-to-local, align 4
  %v5_af20 = trunc i32 %v5_af04 to i8
  %v6_af24 = inttoptr i32 %v0_af10 to i32*
  %v7_af24 = call i32 @function_829c(i32 %v0_af1c, i32* %v6_af24, i32 5, i32 1)
  %v1_af30 = urem i32 %v7_af24, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_af3c = load i32, i32* @r5, align 4
  store i32 %v0_af3c, i32* %r1.global-to-local, align 4
  %v0_af40 = load i32, i32* @r4, align 4
  store i32 %v0_af40, i32* %r0.global-to-local, align 4
  %v5_af48 = inttoptr i32 %v0_af3c to i32*
  %v6_af48 = call i32 @function_829c(i32 %v0_af40, i32* %v5_af48, i32 6, i32 65535)
  %v0_af54 = load i32, i32* @r5, align 4
  store i32 %v0_af54, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_af60 = load i32, i32* @r4, align 4
  store i32 %v0_af60, i32* %r0.global-to-local, align 4
  %v5_af64 = inttoptr i32 %v0_af54 to i32*
  %v6_af64 = call i32 @function_829c(i32 %v0_af60, i32* %v5_af64, i32 7, i32 65535)
  %v0_af68 = load i32, i32* @r5, align 4
  store i32 %v0_af68, i32* %r1.global-to-local, align 4
  %v0_af6c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_af6c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_af64, i32* @sl, align 4
  %v0_af78 = load i32, i32* @r4, align 4
  store i32 %v0_af78, i32* %r0.global-to-local, align 4
  %v4_af7c = inttoptr i32 %v0_af68 to i32*
  %v5_af7c = call i32 @function_829c(i32 %v0_af78, i32* %v4_af7c, i32 %v0_af6c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_af8c = load i32, i32* @r5, align 4
  store i32 %v0_af8c, i32* %r1.global-to-local, align 4
  %v0_af90 = load i32, i32* @r4, align 4
  store i32 %v0_af90, i32* %r0.global-to-local, align 4
  %v4_af94 = inttoptr i32 %v0_af8c to i32*
  %v5_af94 = call i32 @function_829c(i32 %v0_af90, i32* %v4_af94, i32 1, i32 1)
  %v1_af9c = urem i32 %v5_af94, 256
  %v0_afa0 = load i32, i32* @r5, align 4
  store i32 %v0_afa0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_afa8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_afa8, i32* %r3.global-to-local, align 4
  %v0_afac = load i32, i32* @r4, align 4
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v5_afb4 = inttoptr i32 %v0_afa0 to i32*
  %v6_afb4 = call i32 @function_829c(i32 %v0_afac, i32* %v5_afb4, i32 18, i32 %v0_afa8)
  %v0_afbc = load i32, i32* @r5, align 4
  store i32 %v0_afbc, i32* %r1.global-to-local, align 4
  %v2_afc0 = load i32, i32* @global_var_1dd3c.81, align 4
  store i32 %v2_afc0, i32* %r3.global-to-local, align 4
  store i32 %v6_afb4, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_afcc = load i32, i32* @r4, align 4
  store i32 %v0_afcc, i32* %r0.global-to-local, align 4
  %v4_afd0 = inttoptr i32 %v0_afbc to i32*
  %v5_afd0 = call i32 @function_829c(i32 %v0_afcc, i32* %v4_afd0, i32 24, i32 %v2_afc0)
  %v0_afd8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_afd8, i32* %r0.global-to-local, align 4
  %v1_afdc = inttoptr i32 %v0_afd8 to i32*
  %v2_afdc = call i32 @function_12cb0(i32* %v1_afdc)
  %v1_afe0 = load i32, i32* @r6, align 4
  %v2_afe0 = add i32 %v1_afe0, %v2_afdc
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_aff4 = call i32 @function_132cc(i32 2, i32 3, i32 6)
  store i32 %v3_aff4, i32* %r0.global-to-local, align 4
  %v7_aff8 = icmp eq i32 %v3_aff4, -1
  store i1 %v7_aff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aff8, label %dec_label_pc_b5a0, label %dec_label_pc_b004

dec_label_pc_b004:                                ; preds = %dec_label_pc_ae80
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b00c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b00c, i32* %r3.global-to-local, align 4
  %v0_b014 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b014, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b020 = call i32 @function_1329c(i32 %v3_aff4, i32 %v0_b014, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b020, i32* %r0.global-to-local, align 4
  %v7_b024 = icmp eq i32 %v6_b020, -1
  store i1 %v7_b024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b024, label %dec_label_pc_b5a8, label %dec_label_pc_b02c

dec_label_pc_b02c:                                ; preds = %dec_label_pc_b004
  %v0_b038 = load i32, i32* @sl, align 4
  %v3_b038 = mul i32 %v0_b038, 65536
  store i32 %v3_b038, i32* %sl.global-to-local, align 4
  %v0_b03c = load i32, i32* @r7, align 4
  %v2_b044 = icmp eq i32 %v1_ae84, 0
  store i1 %v2_b044, i1* %cpsr_z.global-to-local, align 1
  %v0_b048 = load i32, i32* @r8, align 4
  %v1_b048 = urem i32 %v0_b048, 256
  store i32 %v1_b048, i32* %r8.global-to-local, align 4
  %v3_b04c = urem i32 %v0_b03c, 65536
  store i32 %v3_b04c, i32* %r3.global-to-local, align 4
  %v3_b050 = urem i32 %v6_af48, 65536
  store i32 %v3_b050, i32* %r1.global-to-local, align 4
  %v3_b054 = urem i32 %v0_b038, 65536
  store i32 %v3_b054, i32* %r2.global-to-local, align 4
  %v0_b060 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b060, i32* %stack_var_-40, align 4
  br i1 %v2_b044, label %dec_label_pc_b2e0.preheader, label %dec_label_pc_b074

dec_label_pc_b074:                                ; preds = %dec_label_pc_b02c
  %v3_b07c = mul i32 %v5_af7c, 65536
  %v1_b084 = urem i32 %v6_af48, 256
  %v1_b08c = add i32 %v3_b07c, 524288
  %v1_b090 = add i32 %v3_b07c, 3407872
  %v1_b094 = urem i32 %v0_b038, 256
  %v1_b098 = add i32 %v3_b07c, 1835008
  %v0_b03c.not = or i32 %v0_b03c, -65536
  %v1_b0a0 = xor i32 %v0_b03c.not, 65535
  %v3_b0a4 = udiv i32 %v1_b098, 256
  %tmp77 = udiv i32 %v0_b03c, 256
  %v1_b0b8 = and i32 %v3_b0a4, 65280
  store i32 %v1_b0b8, i32* %r0.global-to-local, align 4
  %v3_b0dc = mul nuw nsw i32 %v1_b084, 256
  %tmp78 = udiv i32 %v6_af48, 256
  %v4_b0e4 = urem i32 %tmp78, 256
  %v5_b0e4 = or i32 %v4_b0e4, %v3_b0dc
  store i32 %v5_b0e4, i32* @lr, align 4
  %tmp79 = mul nsw i32 %v1_b0a0, 256
  %v3_b0ec = mul nuw nsw i32 %v1_b094, 256
  %sext23 = mul i32 %tmp77, 16777216
  %v4_b0f4 = sdiv i32 %sext23, 16777216
  %v4_b0bc = sdiv i32 %v1_b090, 16777216
  %tmp80 = udiv i32 %v0_b038, 256
  %v4_b0fc = urem i32 %tmp80, 256
  %v5_b0fc = or i32 %v4_b0fc, %v3_b0ec
  store i32 %v5_b0fc, i32* @r7, align 4
  %v1_b100 = and i32 %tmp79, 65280
  %v4_b104 = sdiv i32 %v1_b098, 16777216
  %v3_b108 = udiv i32 %v1_b08c, 256
  %tmp81 = udiv i32 %v1_b0a0, 256
  %v4_b10c = urem i32 %tmp81, 256
  %v5_b10c = or i32 %v4_b10c, %v1_b100
  store i32 %v5_b10c, i32* @r6, align 4
  %v3_b110 = ashr i32 %v1_b090, 31
  %v3_b114 = ashr i32 %sext23, 31
  %v1_b118 = and i32 %v3_b108, 65280
  store i32 %v1_b118, i32* @r5, align 4
  %v3_b124 = ashr i32 %v1_b098, 31
  store i32 %v3_b124, i32* %r2.global-to-local, align 4
  %v3_b12832 = udiv i32 %v1_b100, 256
  store i32 %v3_b12832, i32* %r3.global-to-local, align 4
  store i32 %v1_b084, i32* %r1.global-to-local, align 4
  %v4_b130 = udiv i32 %v1_b08c, 16777216
  %v5_b130 = or i32 %v4_b130, %v1_b118
  store i32 %v5_b130, i32* %r8.global-to-local, align 4
  %v5_b134 = trunc i32 %tmp81 to i8
  store i32 %v0_b060, i32* @r4, align 4
  %v3_b14c33 = udiv i32 %v1_b118, 256
  store i32 %v3_b14c33, i32* %sl.global-to-local, align 4
  store i32 %v1_b094, i32* %fp.global-to-local, align 4
  %v4_b1a0 = sext i8 %v5_af20 to i32
  %sext15 = mul i32 %v1_b0a0, 16777216
  %v4_b25c = sdiv i32 %sext15, 16777216
  %v2_b28c = icmp eq i32 %v1_b048, 0
  %sext16 = mul i32 %v6_af48, 16777216
  %v4_b2a0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp78, 16777216
  %v4_b2bc = sdiv i32 %sext17, 16777216
  %v1_b1b8 = trunc i32 %v4_b0f4 to i8
  br label %dec_label_pc_b154

dec_label_pc_b154:                                ; preds = %bb92, %dec_label_pc_b074
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b160 = call i32 @function_135b8(i32 1510, i32 4)
  store i32 %v2_b160, i32* %r0.global-to-local, align 4
  store i32 %v2_aeb0, i32* %r2.global-to-local, align 4
  %v3_b168 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b168, i32* %r3.global-to-local, align 4
  %v2_b16c = load i32, i32* @r4, align 4
  %v5_b16c = mul i32 %v2_b16c, 4
  %v6_b16c = add i32 %v5_b16c, %v2_aeb0
  %v7_b16c = inttoptr i32 %v6_b16c to i32*
  store i32 %v2_b160, i32* %v7_b16c, align 4
  %v0_b170 = load i32, i32* %r2.global-to-local, align 4
  %v1_b170 = load i32, i32* %r3.global-to-local, align 4
  %v4_b170 = mul i32 %v1_b170, 4
  %v5_b170 = add i32 %v4_b170, %v0_b170
  %v6_b170 = inttoptr i32 %v5_b170 to i32*
  %v7_b170 = load i32, i32* %v6_b170, align 4
  store i32 %v7_b170, i32* %r4.global-to-local, align 4
  %v1_b174 = inttoptr i32 %v7_b170 to i8*
  %v2_b174 = load i8, i8* %v1_b174, align 1
  %tmp = urem i8 %v2_b174, 16
  %v1_b178 = zext i8 %tmp to i32
  %v1_b17c = or i32 %v1_b178, 64
  store i32 %v1_b17c, i32* %r2.global-to-local, align 4
  %v1_b180 = trunc i32 %v1_b17c to i8
  store i8 %v1_b180, i8* %v1_b174, align 1
  %v0_b184 = load i32, i32* %r4.global-to-local, align 4
  %v1_b184 = inttoptr i32 %v0_b184 to i8*
  %v2_b184 = load i8, i8* %v1_b184, align 1
  %v1_b188 = and i8 %v2_b184, -16
  %v1_b18c = or i8 %v1_b188, 5
  store i32 %v1_af30, i32* %r1.global-to-local, align 4
  store i8 %v1_b18c, i8* %v1_b184, align 1
  %v2_b19c = load i32, i32* %r4.global-to-local, align 4
  %v3_b19c = add i32 %v2_b19c, 1
  %v4_b19c = inttoptr i32 %v3_b19c to i8*
  store i8 %v5_aee8, i8* %v4_b19c, align 1
  %v2_b1a4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1a4 = add i32 %v2_b1a4, 8
  %v4_b1a4 = inttoptr i32 %v3_b1a4 to i8*
  store i8 %v5_af20, i8* %v4_b1a4, align 1
  store i32 %v4_b0f4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_b1b0 = load i32, i32* %r1.global-to-local, align 4
  %v9_b1b0 = icmp eq i32 %v0_b1b0, 0
  store i1 %v9_b1b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b110, i32* %r2.global-to-local, align 4
  %v2_b1b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1b8 = add i32 %v2_b1b8, 4
  %v4_b1b8 = inttoptr i32 %v3_b1b8 to i8*
  store i8 %v1_b1b8, i8* %v4_b1b8, align 1
  store i32 %v4_b0bc, i32* %r1.global-to-local, align 4
  %v0_b1c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1c0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b154
  %v1_b1c0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_b1c0, i32* %r3.global-to-local, align 4
  %v2_b1c4 = trunc i32 %v1_b1c0 to i8
  %v3_b1c4 = load i32, i32* %r4.global-to-local, align 4
  %v4_b1c4 = add i32 %v3_b1c4, 7
  %v5_b1c4 = inttoptr i32 %v4_b1c4 to i8*
  store i8 %v2_b1c4, i8* %v5_b1c4, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b154, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_b1cc = load i32, i32* %r2.global-to-local, align 4
  %v1_b1cc = trunc i32 %v0_b1cc to i8
  %v2_b1cc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1cc = add i32 %v2_b1cc, 3
  %v4_b1cc = inttoptr i32 %v3_b1cc to i8*
  store i8 %v1_b1cc, i8* %v4_b1cc, align 1
  %v0_b1d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b1d0 = trunc i32 %v0_b1d0 to i8
  %v2_b1d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1d0 = add i32 %v2_b1d0, 2
  %v4_b1d0 = inttoptr i32 %v3_b1d0 to i8*
  store i8 %v1_b1d0, i8* %v4_b1d0, align 1
  %v0_b1d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1d4, label %bb83, label %bb82

bb82:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb83

bb83:                                             ; preds = %.thread, %bb82
  store i32 %v3_b114, i32* %r1.global-to-local, align 4
  %v0_b1dc = load i32, i32* %r3.global-to-local, align 4
  %v1_b1dc = trunc i32 %v0_b1dc to i8
  %v2_b1dc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1dc = add i32 %v2_b1dc, 9
  %v4_b1dc = inttoptr i32 %v3_b1dc to i8*
  store i8 %v1_b1dc, i8* %v4_b1dc, align 1
  %v0_b1e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1e0, label %bb85, label %bb84

bb84:                                             ; preds = %bb83
  %v1_b1e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_b1e0 = trunc i32 %v1_b1e0 to i8
  %v3_b1e0 = load i32, i32* %r4.global-to-local, align 4
  %v4_b1e0 = add i32 %v3_b1e0, 6
  %v5_b1e0 = inttoptr i32 %v4_b1e0 to i8*
  store i8 %v2_b1e0, i8* %v5_b1e0, align 1
  br label %bb85

bb85:                                             ; preds = %bb83, %bb84
  %v3_b1e4 = load i32, i32* %stack_var_-40, align 4
  %v5_b1ec = mul i32 %v3_b1e4, 24
  store i32 %v5_b1ec, i32* %r3.global-to-local, align 4
  store i32 %v5_afd0, i32* %r2.global-to-local, align 4
  %v1_b1f4 = load i32, i32* %r4.global-to-local, align 4
  %v2_b1f4 = add i32 %v1_b1f4, 12
  %v3_b1f4 = inttoptr i32 %v2_b1f4 to i32*
  store i32 %v5_afd0, i32* %v3_b1f4, align 4
  %v0_b1f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b1f8 = load i32, i32* @sb, align 4
  %v2_b1f8 = add i32 %v1_b1f8, %v0_b1f8
  store i32 %v2_b1f8, i32* %r3.global-to-local, align 4
  %v0_b1fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b1fc = trunc i32 %v0_b1fc to i8
  %v2_b1fc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1fc = add i32 %v2_b1fc, 5
  %v4_b1fc = inttoptr i32 %v3_b1fc to i8*
  store i8 %v1_b1fc, i8* %v4_b1fc, align 1
  %v0_b200 = load i32, i32* %r3.global-to-local, align 4
  %v1_b200 = add i32 %v0_b200, 16
  %v2_b200 = inttoptr i32 %v1_b200 to i32*
  %v3_b200 = load i32, i32* %v2_b200, align 4
  store i32 %v3_b200, i32* %r2.global-to-local, align 4
  %v0_b204 = load i32, i32* %r4.global-to-local, align 4
  %v1_b204 = add i32 %v0_b204, 20
  store i32 %v1_b204, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_b20c = load i32, i32* %r0.global-to-local, align 4
  %v1_b20c = trunc i32 %v0_b20c to i8
  %v3_b20c = add i32 %v0_b204, 23
  %v4_b20c = inttoptr i32 %v3_b20c to i8*
  store i8 %v1_b20c, i8* %v4_b20c, align 1
  %v0_b210 = load i32, i32* %r3.global-to-local, align 4
  %v1_b210 = trunc i32 %v0_b210 to i8
  %v2_b210 = load i32, i32* %r1.global-to-local, align 4
  %v3_b210 = add i32 %v2_b210, 2
  %v4_b210 = inttoptr i32 %v3_b210 to i8*
  store i8 %v1_b210, i8* %v4_b210, align 1
  %v0_b214 = load i32, i32* %r4.global-to-local, align 4
  %v1_b214 = add i32 %v0_b214, 24
  %v2_b214 = inttoptr i32 %v1_b214 to i8*
  %v3_b214 = load i8, i8* %v2_b214, align 1
  %tmp98 = urem i8 %v3_b214, 16
  %v1_b218 = zext i8 %tmp98 to i32
  %v1_b21c = or i32 %v1_b218, 64
  store i32 %v1_b21c, i32* %r3.global-to-local, align 4
  %v1_b220 = trunc i32 %v1_b21c to i8
  store i8 %v1_b220, i8* %v2_b214, align 1
  %v0_b224 = load i32, i32* %r2.global-to-local, align 4
  %v1_b224 = load i32, i32* %r4.global-to-local, align 4
  %v2_b224 = add i32 %v1_b224, 16
  %v3_b224 = inttoptr i32 %v2_b224 to i32*
  store i32 %v0_b224, i32* %v3_b224, align 4
  %v0_b228 = load i32, i32* %r4.global-to-local, align 4
  %v1_b228 = add i32 %v0_b228, 24
  %v2_b228 = inttoptr i32 %v1_b228 to i8*
  %v3_b228 = load i8, i8* %v2_b228, align 1
  %v1_b22c = and i8 %v3_b228, -16
  %v1_b230 = or i8 %v1_b22c, 5
  store i8 %v1_b230, i8* %v2_b228, align 1
  %v0_b23c = load i32, i32* %r4.global-to-local, align 4
  %v1_b23c = add i32 %v0_b23c, 24
  store i32 %v1_b23c, i32* @r5, align 4
  %v3_b240 = add i32 %v0_b23c, 25
  %v4_b240 = inttoptr i32 %v3_b240 to i8*
  store i8 %v5_aee8, i8* %v4_b240, align 1
  store i32 %v4_b104, i32* %r1.global-to-local, align 4
  store i32 %tmp81, i32* %r3.global-to-local, align 4
  store i32 %v3_b124, i32* %r2.global-to-local, align 4
  %v2_b250 = load i32, i32* @r5, align 4
  %v3_b250 = add i32 %v2_b250, 4
  %v4_b250 = inttoptr i32 %v3_b250 to i8*
  store i8 %v5_b134, i8* %v4_b250, align 1
  %v0_b254 = load i32, i32* %r1.global-to-local, align 4
  %v1_b254 = trunc i32 %v0_b254 to i8
  %v2_b254 = load i32, i32* @r5, align 4
  %v3_b254 = add i32 %v2_b254, 2
  %v4_b254 = inttoptr i32 %v3_b254 to i8*
  store i8 %v1_b254, i8* %v4_b254, align 1
  %v0_b258 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b258, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  store i32 %v4_b25c, i32* %r1.global-to-local, align 4
  %v0_b260 = load i32, i32* %r2.global-to-local, align 4
  %v1_b260 = trunc i32 %v0_b260 to i8
  %v2_b260 = load i32, i32* @r5, align 4
  %v3_b260 = add i32 %v2_b260, 3
  %v4_b260 = inttoptr i32 %v3_b260 to i8*
  store i8 %v1_b260, i8* %v4_b260, align 1
  store i32 %v4_b1a0, i32* %r2.global-to-local, align 4
  %v0_b268 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b268, label %bb89, label %bb88

bb88:                                             ; preds = %bb87
  %v1_b268 = load i32, i32* %r3.global-to-local, align 4
  %v2_b268 = trunc i32 %v1_b268 to i8
  %v3_b268 = load i32, i32* @r5, align 4
  %v4_b268 = add i32 %v3_b268, 6
  %v5_b268 = inttoptr i32 %v4_b268 to i8*
  store i8 %v2_b268, i8* %v5_b268, align 1
  br label %bb89

bb89:                                             ; preds = %bb87, %bb88
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b270 = load i32, i32* %r1.global-to-local, align 4
  %v1_b270 = trunc i32 %v0_b270 to i8
  %v2_b270 = load i32, i32* @r5, align 4
  %v3_b270 = add i32 %v2_b270, 5
  %v4_b270 = inttoptr i32 %v3_b270 to i8*
  store i8 %v1_b270, i8* %v4_b270, align 1
  %v0_b274 = load i32, i32* %r2.global-to-local, align 4
  %v1_b274 = trunc i32 %v0_b274 to i8
  %v2_b274 = load i32, i32* @r5, align 4
  %v3_b274 = add i32 %v2_b274, 8
  %v4_b274 = inttoptr i32 %v3_b274 to i8*
  store i8 %v1_b274, i8* %v4_b274, align 1
  %v0_b278 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b278, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v1_b278 = load i32, i32* %r0.global-to-local, align 4
  %v2_b278 = trunc i32 %v1_b278 to i8
  %v3_b278 = load i32, i32* @r5, align 4
  %v4_b278 = add i32 %v3_b278, 7
  %v5_b278 = inttoptr i32 %v4_b278 to i8*
  store i8 %v2_b278, i8* %v5_b278, align 1
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_b27c = load i32, i32* %r3.global-to-local, align 4
  %v1_b27c = trunc i32 %v0_b27c to i8
  %v2_b27c = load i32, i32* @r5, align 4
  %v3_b27c = add i32 %v2_b27c, 9
  %v4_b27c = inttoptr i32 %v3_b27c to i8*
  store i8 %v1_b27c, i8* %v4_b27c, align 1
  %v0_b280 = call i32 @function_f8c4()
  store i32 %v0_b280, i32* %r0.global-to-local, align 4
  store i32 %v1_b048, i32* %r1.global-to-local, align 4
  store i1 %v2_b28c, i1* %cpsr_z.global-to-local, align 1
  %v1_b290 = sub i32 1023, %v0_b280
  store i32 %v1_b290, i32* %r3.global-to-local, align 4
  br i1 %v2_b28c, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb91
  %v2_b298 = load i32, i32* @r5, align 4
  %v3_b298 = add i32 %v2_b298, 16
  %v4_b298 = inttoptr i32 %v3_b298 to i32*
  store i32 %v1_b290, i32* %v4_b298, align 4
  br label %bb92

.thread19:                                        ; preds = %bb91
  %v1_b294 = load i32, i32* %r4.global-to-local, align 4
  %v2_b294 = add i32 %v1_b294, 16
  %v3_b294 = inttoptr i32 %v2_b294 to i32*
  %v4_b294 = load i32, i32* %v3_b294, align 4
  store i32 %v4_b294, i32* %r3.global-to-local, align 4
  %v2_b29c = load i32, i32* @r5, align 4
  %v3_b29c = add i32 %v2_b29c, 16
  %v4_b29c = inttoptr i32 %v3_b29c to i32*
  store i32 %v4_b294, i32* %v4_b29c, align 4
  br label %bb92

bb92:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_b2a0, i32* %r3.global-to-local, align 4
  %v0_b2a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b2a4 = add i32 %v0_b2a4, 44
  store i32 %v1_b2a4, i32* @r6, align 4
  %v1_b2a8 = load i32, i32* @r5, align 4
  %v2_b2a8 = add i32 %v1_b2a8, 12
  %v3_b2a8 = inttoptr i32 %v2_b2a8 to i32*
  store i32 %v0_b280, i32* %v3_b2a8, align 4
  %v0_b2ac = load i32, i32* %r3.global-to-local, align 4
  %v1_b2ac = trunc i32 %v0_b2ac to i8
  %v2_b2ac = load i32, i32* @r6, align 4
  %v3_b2ac = add i32 %v2_b2ac, 1
  %v4_b2ac = inttoptr i32 %v3_b2ac to i8*
  store i8 %v1_b2ac, i8* %v4_b2ac, align 1
  %v3_b2b0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b2b0, i32* %r3.global-to-local, align 4
  store i32 %v1_ae84, i32* %r1.global-to-local, align 4
  %v1_b2b8 = add i32 %v3_b2b0, 1
  store i32 %v1_b2b8, i32* @r4, align 4
  store i32 %v4_b2bc, i32* %r2.global-to-local, align 4
  %v9_b2c0 = icmp eq i32 %v1_b2b8, %v1_ae84
  store i1 %v9_b2c0, i1* %cpsr_z.global-to-local, align 1
  %v0_b2c4 = load i32, i32* %sl.global-to-local, align 4
  %v1_b2c4 = trunc i32 %v0_b2c4 to i8
  %v2_b2c4 = load i32, i32* @r6, align 4
  %v3_b2c4 = add i32 %v2_b2c4, 5
  %v4_b2c4 = inttoptr i32 %v3_b2c4 to i8*
  store i8 %v1_b2c4, i8* %v4_b2c4, align 1
  %v0_b2c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b2c8 = trunc i32 %v0_b2c8 to i8
  %v2_b2c8 = load i32, i32* @r6, align 4
  %v3_b2c8 = inttoptr i32 %v2_b2c8 to i8*
  store i8 %v1_b2c8, i8* %v3_b2c8, align 1
  %v0_b2cc = load i32, i32* @r7, align 4
  %v1_b2cc = trunc i32 %v0_b2cc to i8
  %v2_b2cc = load i32, i32* @r6, align 4
  %v3_b2cc = add i32 %v2_b2cc, 2
  %v4_b2cc = inttoptr i32 %v3_b2cc to i8*
  store i8 %v1_b2cc, i8* %v4_b2cc, align 1
  %v0_b2d0 = load i32, i32* %fp.global-to-local, align 4
  %v1_b2d0 = trunc i32 %v0_b2d0 to i8
  %v2_b2d0 = load i32, i32* @r6, align 4
  %v3_b2d0 = add i32 %v2_b2d0, 3
  %v4_b2d0 = inttoptr i32 %v3_b2d0 to i8*
  store i8 %v1_b2d0, i8* %v4_b2d0, align 1
  %v0_b2d4 = load i32, i32* %r8.global-to-local, align 4
  %v1_b2d4 = trunc i32 %v0_b2d4 to i8
  %v2_b2d4 = load i32, i32* @r6, align 4
  %v3_b2d4 = add i32 %v2_b2d4, 4
  %v4_b2d4 = inttoptr i32 %v3_b2d4 to i8*
  store i8 %v1_b2d4, i8* %v4_b2d4, align 1
  %v0_b2d8 = load i32, i32* @r4, align 4
  store i32 %v0_b2d8, i32* %stack_var_-40, align 4
  %v5_b2dc = icmp slt i32 %v1_b2b8, %v1_ae84
  br i1 %v5_b2dc, label %dec_label_pc_b154, label %dec_label_pc_b2e0.preheader

dec_label_pc_b2e0.preheader:                      ; preds = %bb92, %dec_label_pc_b02c
  %v1_b300 = add i32 %v5_af7c, 8
  %v1_b304 = add i32 %v5_af7c, 52
  %v2_b310 = icmp eq i32 %v5_afd0, -1
  %v7_b310 = icmp eq i32 %v5_afd0, -1
  %v3_b4d8 = icmp eq i32 %v3_b04c, 65535
  %v2_b548 = icmp eq i32 %v1_b048, 0
  %v2_b564 = icmp eq i32 %v1_af9c, 0
  br label %dec_label_pc_b2e0

dec_label_pc_b2e0:                                ; preds = %dec_label_pc_b2e0.preheader, %dec_label_pc_b58c
  store i32 %v1_ae84, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b044, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b044, label %dec_label_pc_b58c, label %dec_label_pc_b2f4

dec_label_pc_b2f4:                                ; preds = %dec_label_pc_b2e0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_af7c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v1_b300, i32* @fp, align 4
  store i32 %v1_b304, i32* @sl, align 4
  br label %dec_label_pc_b438

dec_label_pc_b30c:                                ; preds = %dec_label_pc_b438
  store i32 %v5_afd0, i32* %r2.global-to-local, align 4
  store i1 %v7_b310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b310, label %dec_label_pc_b4c8, label %dec_label_pc_b318

dec_label_pc_b318:                                ; preds = %dec_label_pc_b460, %dec_label_pc_b30c
  store i32 %v3_b04c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b4d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b4d8, label %dec_label_pc_b4e4, label %dec_label_pc_b32c

dec_label_pc_b32c:                                ; preds = %dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge, %dec_label_pc_b318
  %v1_b330 = phi i32 [ %v1_b330.pre, %dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge ], [ 65535, %dec_label_pc_b318 ]
  store i32 %v3_b050, i32* %r1.global-to-local, align 4
  %v9_b330 = icmp eq i32 %v3_b050, %v1_b330
  store i1 %v9_b330, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b330, label %dec_label_pc_b51c, label %dec_label_pc_b338

dec_label_pc_b338:                                ; preds = %dec_label_pc_b4e4.dec_label_pc_b338_crit_edge, %dec_label_pc_b32c
  %v1_b33c = phi i32 [ %v1_b33c.pre, %dec_label_pc_b4e4.dec_label_pc_b338_crit_edge ], [ %v1_b330, %dec_label_pc_b32c ]
  store i32 %v3_b054, i32* %r2.global-to-local, align 4
  %v9_b33c = icmp eq i32 %v3_b054, %v1_b33c
  store i1 %v9_b33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b33c, label %dec_label_pc_b538, label %dec_label_pc_b344

dec_label_pc_b344:                                ; preds = %dec_label_pc_b51c, %dec_label_pc_b338
  store i32 %v1_b048, i32* %r3.global-to-local, align 4
  store i1 %v2_b548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b548, label %dec_label_pc_b55c, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_b344
  %v1_b34c = load i32, i32* @r5, align 4
  %v2_b34c = add i32 %v1_b34c, 16
  %v3_b34c = inttoptr i32 %v2_b34c to i32*
  %v4_b34c = load i32, i32* %v3_b34c, align 4
  store i32 %v4_b34c, i32* %r3.global-to-local, align 4
  %v2_b350 = load i32, i32* @r6, align 4
  %v3_b350 = add i32 %v2_b350, 16
  %v4_b350 = inttoptr i32 %v3_b350 to i32*
  store i32 %v4_b34c, i32* %v4_b350, align 4
  br label %dec_label_pc_b358

dec_label_pc_b358:                                ; preds = %bb97, %.thread20
  store i32 %v1_af9c, i32* %r1.global-to-local, align 4
  store i1 %v2_b564, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b564, label %dec_label_pc_b364, label %dec_label_pc_b570

dec_label_pc_b364:                                ; preds = %dec_label_pc_b358, %dec_label_pc_b55c, %dec_label_pc_b570
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b368 = load i32, i32* @r8, align 4
  %v1_b368 = trunc i32 %v0_b368 to i8
  %v2_b368 = load i32, i32* @r5, align 4
  %v3_b368 = add i32 %v2_b368, 10
  %v4_b368 = inttoptr i32 %v3_b368 to i8*
  store i8 %v1_b368, i8* %v4_b368, align 1
  %v0_b36c = load i32, i32* @r8, align 4
  %v1_b36c = trunc i32 %v0_b36c to i8
  %v2_b36c = load i32, i32* @r5, align 4
  %v3_b36c = add i32 %v2_b36c, 11
  %v4_b36c = inttoptr i32 %v3_b36c to i8*
  store i8 %v1_b36c, i8* %v4_b36c, align 1
  %v0_b370 = load i32, i32* @r5, align 4
  store i32 %v0_b370, i32* @r0, align 4
  %v2_b374 = call i32 @function_e498(i32 %v0_b370, i32 20)
  %v3_b374 = trunc i32 %v2_b374 to i8
  %v4_b378 = sdiv i32 %v2_b374, 256
  store i32 %v4_b378, i32* %r3.global-to-local, align 4
  %v1_b37c = trunc i32 %v4_b378 to i8
  %v2_b37c = load i32, i32* @r5, align 4
  %v3_b37c = add i32 %v2_b37c, 11
  %v4_b37c = inttoptr i32 %v3_b37c to i8*
  store i8 %v1_b37c, i8* %v4_b37c, align 1
  %v3_b380 = load i32, i32* @r5, align 4
  %v4_b380 = add i32 %v3_b380, 10
  %v5_b380 = inttoptr i32 %v4_b380 to i8*
  store i8 %v3_b374, i8* %v5_b380, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b388 = load i32, i32* @r8, align 4
  %v1_b388 = trunc i32 %v0_b388 to i8
  %v2_b388 = load i32, i32* @r6, align 4
  %v3_b388 = add i32 %v2_b388, 10
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 %v1_b388, i8* %v4_b388, align 1
  %v0_b38c = load i32, i32* @r8, align 4
  %v1_b38c = trunc i32 %v0_b38c to i8
  %v2_b38c = load i32, i32* @r6, align 4
  %v3_b38c = add i32 %v2_b38c, 11
  %v4_b38c = inttoptr i32 %v3_b38c to i8*
  store i8 %v1_b38c, i8* %v4_b38c, align 1
  %v0_b390 = load i32, i32* @r6, align 4
  store i32 %v0_b390, i32* @r0, align 4
  %v2_b394 = call i32 @function_e498(i32 %v0_b390, i32 20)
  %v3_b394 = trunc i32 %v2_b394 to i8
  store i32 %v2_b394, i32* %r0.global-to-local, align 4
  %v4_b398 = sdiv i32 %v2_b394, 256
  store i32 %v4_b398, i32* %r3.global-to-local, align 4
  %v3_b39c = load i32, i32* @r6, align 4
  %v4_b39c = add i32 %v3_b39c, 10
  %v5_b39c = inttoptr i32 %v4_b39c to i8*
  store i8 %v3_b394, i8* %v5_b39c, align 1
  %v0_b3a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3a0 = trunc i32 %v0_b3a0 to i8
  %v2_b3a0 = load i32, i32* @r6, align 4
  %v3_b3a0 = add i32 %v2_b3a0, 11
  %v4_b3a0 = inttoptr i32 %v3_b3a0 to i8*
  store i8 %v1_b3a0, i8* %v4_b3a0, align 1
  %v0_b3a4 = load i32, i32* @r7, align 4
  %v1_b3a4 = add i32 %v0_b3a4, 4
  %v2_b3a4 = inttoptr i32 %v1_b3a4 to i8*
  %v3_b3a4 = load i8, i8* %v2_b3a4, align 1
  %v4_b3a4 = zext i8 %v3_b3a4 to i32
  store i32 %v4_b3a4, i32* %r3.global-to-local, align 4
  %v1_b3a8 = add i32 %v0_b3a4, 5
  %v2_b3a8 = inttoptr i32 %v1_b3a8 to i8*
  %v3_b3a8 = load i8, i8* %v2_b3a8, align 1
  %v4_b3a8 = zext i8 %v3_b3a8 to i32
  store i32 %v0_b3a4, i32* @r1, align 4
  %v4_b3b0 = mul nuw nsw i32 %v4_b3a8, 256
  %v5_b3b0 = or i32 %v4_b3b0, %v4_b3a4
  store i32 %v5_b3b0, i32* %r2.global-to-local, align 4
  %v0_b3b4 = load i32, i32* @r8, align 4
  %v1_b3b4 = trunc i32 %v0_b3b4 to i8
  %v3_b3b4 = add i32 %v0_b3a4, 6
  %v4_b3b4 = inttoptr i32 %v3_b3b4 to i8*
  store i8 %v1_b3b4, i8* %v4_b3b4, align 1
  %v0_b3b8 = load i32, i32* @fp, align 4
  store i32 %v0_b3b8, i32* %r3.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r8, align 4
  %v1_b3bc = trunc i32 %v0_b3bc to i8
  %v2_b3bc = load i32, i32* @r7, align 4
  %v3_b3bc = add i32 %v2_b3bc, 7
  %v4_b3bc = inttoptr i32 %v3_b3bc to i8*
  store i8 %v1_b3bc, i8* %v4_b3bc, align 1
  %v0_b3c0 = load i32, i32* @r6, align 4
  store i32 %v0_b3c0, i32* %r0.global-to-local, align 4
  %v4_b3c4 = call i32 @function_e4f4(i32 %v0_b3c0, i32 %v0_b3a4, i32 %v5_b3b0, i32 %v0_b3b8)
  %v5_b3c4 = trunc i32 %v4_b3c4 to i8
  store i32 %v4_b3c4, i32* %r0.global-to-local, align 4
  %v3_b3c8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b3c8, i32* %r3.global-to-local, align 4
  %v3_b3cc = mul i32 %v3_b3c8, 32
  store i32 %v3_b3cc, i32* %r2.global-to-local, align 4
  %v0_b3d0 = load i32, i32* @r5, align 4
  %v1_b3d0 = add i32 %v0_b3d0, 16
  %v2_b3d0 = inttoptr i32 %v1_b3d0 to i32*
  %v3_b3d0 = load i32, i32* %v2_b3d0, align 4
  store i32 %v3_b3d0, i32* %r1.global-to-local, align 4
  %v5_b3d4 = mul i32 %v3_b3c8, 24
  store i32 %v5_b3d4, i32* %r2.global-to-local, align 4
  %v4_b3d835 = udiv i32 %v4_b3c4, 256
  %v1_b3dc = trunc i32 %v4_b3d835 to i8
  %v2_b3dc = load i32, i32* @r7, align 4
  %v3_b3dc = add i32 %v2_b3dc, 7
  %v4_b3dc = inttoptr i32 %v3_b3dc to i8*
  store i8 %v1_b3dc, i8* %v4_b3dc, align 1
  %v0_b3e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3e0 = load i32, i32* @sb, align 4
  %v2_b3e0 = add i32 %v1_b3e0, %v0_b3e0
  store i32 %v2_b3e0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b3e8 = load i32, i32* @r7, align 4
  %v4_b3e8 = add i32 %v3_b3e8, 6
  %v5_b3e8 = inttoptr i32 %v4_b3e8 to i8*
  store i8 %v5_b3c4, i8* %v5_b3e8, align 1
  %v0_b3ec = load i32, i32* %r1.global-to-local, align 4
  %v1_b3ec = load i32, i32* %lr.global-to-local, align 4
  %v2_b3ec = add i32 %v1_b3ec, 4
  %v3_b3ec = inttoptr i32 %v2_b3ec to i32*
  store i32 %v0_b3ec, i32* %v3_b3ec, align 4
  %v0_b3f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3f0 = trunc i32 %v0_b3f0 to i8
  %v2_b3f0 = load i32, i32* %r2.global-to-local, align 4
  %v3_b3f0 = load i32, i32* @sb, align 4
  %v4_b3f0 = add i32 %v3_b3f0, %v2_b3f0
  %v5_b3f0 = inttoptr i32 %v4_b3f0 to i8*
  store i8 %v1_b3f0, i8* %v5_b3f0, align 1
  %v0_b3f4 = load i32, i32* @r8, align 4
  %v1_b3f4 = trunc i32 %v0_b3f4 to i8
  %v2_b3f4 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3f4 = add i32 %v2_b3f4, 2
  %v4_b3f4 = inttoptr i32 %v3_b3f4 to i8*
  store i8 %v1_b3f4, i8* %v4_b3f4, align 1
  %v0_b3f8 = load i32, i32* @r8, align 4
  %v1_b3f8 = trunc i32 %v0_b3f8 to i8
  %v2_b3f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3f8 = add i32 %v2_b3f8, 1
  %v4_b3f8 = inttoptr i32 %v3_b3f8 to i8*
  store i8 %v1_b3f8, i8* %v4_b3f8, align 1
  %v0_b3fc = load i32, i32* @r8, align 4
  %v1_b3fc = trunc i32 %v0_b3fc to i8
  %v2_b3fc = load i32, i32* %lr.global-to-local, align 4
  %v3_b3fc = add i32 %v2_b3fc, 3
  %v4_b3fc = inttoptr i32 %v3_b3fc to i8*
  store i8 %v1_b3fc, i8* %v4_b3fc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b408 = load i32, i32* @r5, align 4
  store i32 %v0_b408, i32* %r1.global-to-local, align 4
  store i32 %v3_aff4, i32* %r0.global-to-local, align 4
  %v0_b410 = load i32, i32* @sl, align 4
  store i32 %v0_b410, i32* %r2.global-to-local, align 4
  %v0_b414 = load i32, i32* %lr.global-to-local, align 4
  %v6_b41c = inttoptr i32 %v0_b408 to i32*
  %v7_b41c = call i32 @function_13268(i32 %v3_aff4, i32* %v6_b41c, i32 %v0_b410, i32 16384, i32 %v0_b414, i32 16)
  %v3_b420 = load i32, i32* %stack_var_-40, align 4
  %v1_b424 = add i32 %v3_b420, 1
  store i32 %v1_b424, i32* %r0.global-to-local, align 4
  store i32 %v1_ae84, i32* %r3.global-to-local, align 4
  %v9_b42c = icmp eq i32 %v1_b424, %v1_ae84
  store i1 %v9_b42c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b424, i32* %stack_var_-40, align 4
  %v6_b434 = icmp slt i32 %v1_b424, %v1_ae84
  br i1 %v6_b434, label %dec_label_pc_b438, label %dec_label_pc_b58c

dec_label_pc_b438:                                ; preds = %dec_label_pc_b364, %dec_label_pc_b2f4
  %v1_b44c = phi i32 [ %v1_b424, %dec_label_pc_b364 ], [ 0, %dec_label_pc_b2f4 ]
  %v5_b43c = mul i32 %v1_b44c, 24
  %v1_b440 = load i32, i32* @sb, align 4
  %v2_b440 = add i32 %v1_b440, %v5_b43c
  store i32 %v2_b440, i32* %r3.global-to-local, align 4
  store i32 %v2_aeb0, i32* %r1.global-to-local, align 4
  %v1_b448 = add i32 %v2_b440, 20
  %v2_b448 = inttoptr i32 %v1_b448 to i8*
  %v3_b448 = load i8, i8* %v2_b448, align 1
  %v4_b448 = zext i8 %v3_b448 to i32
  store i32 %v4_b448, i32* %r2.global-to-local, align 4
  %v4_b44c = mul i32 %v1_b44c, 4
  %v5_b44c = add i32 %v4_b44c, %v2_aeb0
  %v6_b44c = inttoptr i32 %v5_b44c to i32*
  %v7_b44c = load i32, i32* %v6_b44c, align 4
  store i32 %v7_b44c, i32* @r5, align 4
  %v2_b450 = icmp ugt i8 %v3_b448, 30
  %v7_b450 = icmp eq i8 %v3_b448, 31
  store i1 %v7_b450, i1* %cpsr_z.global-to-local, align 1
  %v1_b454 = add i32 %v7_b44c, 24
  store i32 %v1_b454, i32* @r6, align 4
  %v1_b458 = add i32 %v7_b44c, 44
  store i32 %v1_b458, i32* @r7, align 4
  %v2_b45c = xor i1 %v7_b450, true
  %v3_b45c = and i1 %v2_b450, %v2_b45c
  br i1 %v3_b45c, label %dec_label_pc_b30c, label %dec_label_pc_b460

dec_label_pc_b460:                                ; preds = %dec_label_pc_b438
  %v1_b460 = add i32 %v2_b440, 16
  %v2_b460 = inttoptr i32 %v1_b460 to i32*
  %v3_b460 = load i32, i32* %v2_b460, align 4
  store i32 %v3_b460, i32* %r4.global-to-local, align 4
  %v0_b464 = call i32 @function_f8c4()
  store i32 %v0_b464, i32* %r0.global-to-local, align 4
  %v3_b468 = load i32, i32* %stack_var_-40, align 4
  %v5_b470 = mul i32 %v3_b468, 24
  %v0_b474 = load i32, i32* %r4.global-to-local, align 4
  %v1_b478 = load i32, i32* @sb, align 4
  %v2_b478 = add i32 %v1_b478, %v5_b470
  store i32 %v2_b478, i32* %r1.global-to-local, align 4
  %v1_b47c = and i32 %v0_b474, 65280
  store i32 %v1_b47c, i32* %r3.global-to-local, align 4
  %v1_b474 = udiv i32 %v0_b474, 256
  %v3_b480 = and i32 %v1_b474, 65280
  store i32 %v3_b480, i32* %r2.global-to-local, align 4
  %v1_b488 = add i32 %v2_b478, 20
  %v2_b488 = inttoptr i32 %v1_b488 to i8*
  %v3_b488 = load i8, i8* %v2_b488, align 1
  %v4_b488 = zext i8 %v3_b488 to i32
  store i32 %v4_b488, i32* %lr.global-to-local, align 4
  %v2_b494 = call i32 @llvm.bswap.i32(i32 %v0_b474)
  %v7_b498 = lshr i32 %v0_b464, %v4_b488
  %v8_b498 = add i32 %v7_b498, %v2_b494
  %v3_b4a4 = mul i32 %v8_b498, 16777216
  %v1_b4a8 = and i32 %v8_b498, 65280
  store i32 %v1_b4a8, i32* %r0.global-to-local, align 4
  store i32 %v5_afd0, i32* %r2.global-to-local, align 4
  %v4_b4b4 = mul nuw nsw i32 %v1_b4a8, 256
  %v5_b4b4 = or i32 %v4_b4b4, %v3_b4a4
  store i32 %v5_b4b4, i32* %r1.global-to-local, align 4
  %v2_b4b8 = call i32 @llvm.bswap.i32(i32 %v8_b498)
  store i32 %v2_b4b8, i32* %r3.global-to-local, align 4
  store i1 %v7_b310, i1* %cpsr_z.global-to-local, align 1
  %v1_b4c0 = load i32, i32* @r5, align 4
  %v2_b4c0 = add i32 %v1_b4c0, 16
  %v3_b4c0 = inttoptr i32 %v2_b4c0 to i32*
  store i32 %v2_b4b8, i32* %v3_b4c0, align 4
  br i1 %v2_b310, label %dec_label_pc_b4c8, label %dec_label_pc_b318

dec_label_pc_b4c8:                                ; preds = %dec_label_pc_b460, %dec_label_pc_b30c
  %v0_b4c8 = call i32 @function_f8c4()
  store i32 %v0_b4c8, i32* %r0.global-to-local, align 4
  store i32 %v3_b04c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b4d8, i1* %cpsr_z.global-to-local, align 1
  %v1_b4dc = load i32, i32* @r5, align 4
  %v2_b4dc = add i32 %v1_b4dc, 12
  %v3_b4dc = inttoptr i32 %v2_b4dc to i32*
  store i32 %v0_b4c8, i32* %v3_b4dc, align 4
  br i1 %v3_b4d8, label %dec_label_pc_b4e4, label %dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge

dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge:    ; preds = %dec_label_pc_b4c8
  %v1_b330.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b32c

dec_label_pc_b4e4:                                ; preds = %dec_label_pc_b4c8, %dec_label_pc_b318
  %v0_b4e4 = call i32 @function_f8c4()
  %v3_b4ec = urem i32 %v0_b4e4, 65536
  store i32 %v3_b4ec, i32* %r0.global-to-local, align 4
  %v1_b4f4 = sub nsw i32 999, %v3_b4ec
  store i32 %v1_b4f4, i32* %r2.global-to-local, align 4
  %v3_b4f8 = sdiv i32 %v1_b4f4, 256
  store i32 %v3_b4f8, i32* %r1.global-to-local, align 4
  %v3_b4fc34 = udiv i32 %v3_b4ec, 256
  store i32 %v3_b4fc34, i32* %r3.global-to-local, align 4
  %v1_b500 = trunc i32 %v3_b4fc34 to i8
  %v2_b500 = load i32, i32* @r5, align 4
  %v3_b500 = add i32 %v2_b500, 5
  %v4_b500 = inttoptr i32 %v3_b500 to i8*
  store i8 %v1_b500, i8* %v4_b500, align 1
  %v0_b504 = load i32, i32* %r0.global-to-local, align 4
  %v1_b504 = trunc i32 %v0_b504 to i8
  %v2_b504 = load i32, i32* @r5, align 4
  %v3_b504 = add i32 %v2_b504, 4
  %v4_b504 = inttoptr i32 %v3_b504 to i8*
  store i8 %v1_b504, i8* %v4_b504, align 1
  %v0_b508 = load i32, i32* %r1.global-to-local, align 4
  %v1_b508 = trunc i32 %v0_b508 to i8
  %v2_b508 = load i32, i32* @r6, align 4
  %v3_b508 = add i32 %v2_b508, 5
  %v4_b508 = inttoptr i32 %v3_b508 to i8*
  store i8 %v1_b508, i8* %v4_b508, align 1
  store i32 %v3_b050, i32* %r1.global-to-local, align 4
  %v1_b510 = load i32, i32* @r4, align 4
  %v9_b510 = icmp eq i32 %v3_b050, %v1_b510
  store i1 %v9_b510, i1* %cpsr_z.global-to-local, align 1
  %v0_b514 = load i32, i32* %r2.global-to-local, align 4
  %v1_b514 = trunc i32 %v0_b514 to i8
  %v2_b514 = load i32, i32* @r6, align 4
  %v3_b514 = add i32 %v2_b514, 4
  %v4_b514 = inttoptr i32 %v3_b514 to i8*
  store i8 %v1_b514, i8* %v4_b514, align 1
  %v0_b518 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b518, label %dec_label_pc_b51c, label %dec_label_pc_b4e4.dec_label_pc_b338_crit_edge

dec_label_pc_b4e4.dec_label_pc_b338_crit_edge:    ; preds = %dec_label_pc_b4e4
  %v1_b33c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b338

dec_label_pc_b51c:                                ; preds = %dec_label_pc_b4e4, %dec_label_pc_b32c
  %v0_b51c = call i32 @function_f8c4()
  %v1_b51c = trunc i32 %v0_b51c to i8
  store i32 %v0_b51c, i32* %r0.global-to-local, align 4
  store i32 %v3_b054, i32* %r2.global-to-local, align 4
  %v4_b524 = sdiv i32 %v0_b51c, 256
  store i32 %v4_b524, i32* %r3.global-to-local, align 4
  %v1_b528 = load i32, i32* @r4, align 4
  %v9_b528 = icmp eq i32 %v3_b054, %v1_b528
  store i1 %v9_b528, i1* %cpsr_z.global-to-local, align 1
  %v3_b52c = load i32, i32* @r5, align 4
  %v4_b52c = add i32 %v3_b52c, 44
  %v5_b52c = inttoptr i32 %v4_b52c to i8*
  store i8 %v1_b51c, i8* %v5_b52c, align 1
  %v0_b530 = load i32, i32* %r3.global-to-local, align 4
  %v1_b530 = trunc i32 %v0_b530 to i8
  %v2_b530 = load i32, i32* @r7, align 4
  %v3_b530 = add i32 %v2_b530, 1
  %v4_b530 = inttoptr i32 %v3_b530 to i8*
  store i8 %v1_b530, i8* %v4_b530, align 1
  %v0_b534 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b534, label %dec_label_pc_b538, label %dec_label_pc_b344

dec_label_pc_b538:                                ; preds = %dec_label_pc_b51c, %dec_label_pc_b338
  %v0_b538 = call i32 @function_f8c4()
  %v1_b538 = trunc i32 %v0_b538 to i8
  store i32 %v0_b538, i32* %r0.global-to-local, align 4
  %v4_b53c36 = udiv i32 %v0_b538, 256
  %v1_b540 = trunc i32 %v4_b53c36 to i8
  %v2_b540 = load i32, i32* @r7, align 4
  %v3_b540 = add i32 %v2_b540, 3
  %v4_b540 = inttoptr i32 %v3_b540 to i8*
  store i8 %v1_b540, i8* %v4_b540, align 1
  store i32 %v1_b048, i32* %r3.global-to-local, align 4
  store i1 %v2_b548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b548, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_b538
  %v1_b54c = load i32, i32* @r5, align 4
  %v2_b54c = add i32 %v1_b54c, 16
  %v3_b54c = inttoptr i32 %v2_b54c to i32*
  %v4_b54c = load i32, i32* %v3_b54c, align 4
  store i32 %v4_b54c, i32* %r3.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_b538, %bb95
  %v3_b550 = load i32, i32* @r7, align 4
  %v4_b550 = add i32 %v3_b550, 2
  %v5_b550 = inttoptr i32 %v4_b550 to i8*
  store i8 %v1_b538, i8* %v5_b550, align 1
  %v0_b554 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b554, label %dec_label_pc_b55c, label %bb97

bb97:                                             ; preds = %bb96
  %v1_b554 = load i32, i32* %r3.global-to-local, align 4
  %v2_b554 = load i32, i32* @r6, align 4
  %v3_b554 = add i32 %v2_b554, 16
  %v4_b554 = inttoptr i32 %v3_b554 to i32*
  store i32 %v1_b554, i32* %v4_b554, align 4
  br label %dec_label_pc_b358

dec_label_pc_b55c:                                ; preds = %dec_label_pc_b344, %bb96
  %v0_b55c = call i32 @function_f8c4()
  store i32 %v0_b55c, i32* %r0.global-to-local, align 4
  store i32 %v1_af9c, i32* %r1.global-to-local, align 4
  store i1 %v2_b564, i1* %cpsr_z.global-to-local, align 1
  %v1_b568 = load i32, i32* @r6, align 4
  %v2_b568 = add i32 %v1_b568, 16
  %v3_b568 = inttoptr i32 %v2_b568 to i32*
  store i32 %v0_b55c, i32* %v3_b568, align 4
  br i1 %v2_b564, label %dec_label_pc_b364, label %dec_label_pc_b570

dec_label_pc_b570:                                ; preds = %dec_label_pc_b358, %dec_label_pc_b55c
  %v0_b570 = load i32, i32* @r7, align 4
  %v1_b570 = add i32 %v0_b570, 8
  store i32 %v1_b570, i32* @r4, align 4
  store i32 %v1_b570, i32* %r0.global-to-local, align 4
  store i32 %v5_af7c, i32* %r1.global-to-local, align 4
  %v2_b57c = call i32 @function_f978(i32 %v1_b570, i32 %v5_af7c)
  store i32 %v2_b57c, i32* %r0.global-to-local, align 4
  store i32 %v5_af7c, i32* %r2.global-to-local, align 4
  %v0_b584 = load i32, i32* @r8, align 4
  %v1_b584 = trunc i32 %v0_b584 to i8
  %v2_b584 = load i32, i32* @r4, align 4
  %v4_b584 = add i32 %v2_b584, %v5_af7c
  %v5_b584 = inttoptr i32 %v4_b584 to i8*
  store i8 %v1_b584, i8* %v5_b584, align 1
  br label %dec_label_pc_b364

dec_label_pc_b58c:                                ; preds = %dec_label_pc_b364, %dec_label_pc_b2e0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b590 = call i32 @function_12cb0(i32* null)
  store i32 %v2_b590, i32* %r0.global-to-local, align 4
  store i32 %v2_afe0, i32* %r1.global-to-local, align 4
  %v9_b598 = icmp eq i32 %v2_afe0, %v2_b590
  store i1 %v9_b598, i1* %cpsr_z.global-to-local, align 1
  %v6_b59c = icmp slt i32 %v2_afe0, %v2_b590
  br i1 %v6_b59c, label %dec_label_pc_b5a0, label %dec_label_pc_b2e0

dec_label_pc_b5a0:                                ; preds = %dec_label_pc_b58c, %dec_label_pc_ae80, %dec_label_pc_b5a8
  %v29_b5a4 = phi i32 [ %v3_aff4, %dec_label_pc_ae80 ], [ %v1_b5ac, %dec_label_pc_b5a8 ], [ %v2_b590, %dec_label_pc_b58c ]
  store i32 %v3_ae80, i32* %r4.global-to-local, align 4
  store i32 %v15_ae80, i32* %r8.global-to-local, align 4
  store i32 %v21_ae80, i32* %sl.global-to-local, align 4
  store i32 %v24_ae80, i32* %fp.global-to-local, align 4
  ret i32 %v29_b5a4

dec_label_pc_b5a8:                                ; preds = %dec_label_pc_b004
  store i32 %v3_aff4, i32* %r0.global-to-local, align 4
  %v1_b5ac = call i32 @function_129e0(i32 %v3_aff4)
  store i32 %v1_b5ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5a0

; uselistorder directives
  uselistorder i32 %v1_b5ac, { 1, 0 }
  uselistorder i32 %v0_b538, { 0, 2, 1 }
  uselistorder i32 %v0_b51c, { 0, 2, 1 }
  uselistorder i32 %v3_b4ec, { 0, 2, 1 }
  uselistorder i32 %v2_b4b8, { 1, 0 }
  uselistorder i32 %v8_b498, { 1, 2, 0 }
  uselistorder i32 %v0_b474, { 1, 0, 2 }
  uselistorder i32 %v7_b44c, { 1, 0, 2 }
  uselistorder i32 %v1_b424, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b3c8, { 1, 0, 2 }
  uselistorder i32 %v4_b3c4, { 0, 2, 1 }
  uselistorder i32 %v0_b3a4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b394, { 0, 2, 1 }
  uselistorder i32 %v4_b378, { 1, 0 }
  uselistorder i1 %v2_b564, { 2, 3, 1, 0 }
  uselistorder i1 %v2_b548, { 2, 3, 1, 0 }
  uselistorder i1 %v3_b4d8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_b310, { 2, 1, 0 }
  uselistorder i32 %v0_b280, { 1, 0, 2 }
  uselistorder i32 %v3_b124, { 1, 0 }
  uselistorder i32 %tmp81, { 1, 0, 2 }
  uselistorder i32 %v1_b0a0, { 0, 2, 1 }
  uselistorder i32 %v1_b098, { 2, 1, 0 }
  uselistorder i32 %v1_b094, { 1, 0 }
  uselistorder i32 %v1_b090, { 1, 0 }
  uselistorder i32 %v1_b084, { 1, 0 }
  uselistorder i32 %v3_b07c, { 2, 0, 1 }
  uselistorder i32 %v3_b04c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_b048, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_b044, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b03c, { 0, 2, 1 }
  uselistorder i32 %v0_b038, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b024, { 1, 0 }
  uselistorder i1 %v7_aff8, { 1, 0 }
  uselistorder i32 %v3_aff4, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_afe0, { 2, 1, 0 }
  uselistorder i32 %v5_afd0, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_af9c, { 1, 0, 2 }
  uselistorder i32 %v5_af7c, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i8 %v5_af20, { 1, 0 }
  uselistorder i32 %v2_aeb0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_ae84, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 14, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 44, 43, 46, 45, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 15, 14, 16, 18, 17, 19, 20, 25, 21, 22, 23, 24, 28, 26, 27, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_b5a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b570, { 1, 0 }
  uselistorder label %dec_label_pc_b55c, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_b364, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b2e0, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b5b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b5b8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i8 @__decompiler_undefined_function_1()
  %tmp33 = call i32 @__decompiler_undefined_function_0()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b5bc = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %v1_b5bc, i32* %r0.global-to-local, align 4
  %v1_b5d8 = urem i32 %arg4, 256
  store i32 %v1_b5d8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b5e8 = call i32 @function_135b8(i32 %v1_b5bc, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_b5bc, i32* %r0.global-to-local, align 4
  %v2_b5f8 = call i32 @function_135b8(i32 %v1_b5bc, i32 4)
  %v0_b5fc = load i32, i32* @r5, align 4
  store i32 %v0_b5fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b608 = load i32, i32* @r7, align 4
  store i32 %v0_b608, i32* %r3.global-to-local, align 4
  %v0_b60c = load i32, i32* @r4, align 4
  store i32 %v0_b60c, i32* %r0.global-to-local, align 4
  %v5_b610 = inttoptr i32 %v0_b5fc to i32*
  %v6_b610 = call i32 @function_829c(i32 %v0_b60c, i32* %v5_b610, i32 2, i32 %v0_b608)
  %v1_b61c = urem i32 %v6_b610, 256
  store i32 %v1_b61c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b628 = load i32, i32* @r5, align 4
  store i32 %v0_b628, i32* %r1.global-to-local, align 4
  %v0_b62c = load i32, i32* @r4, align 4
  store i32 %v0_b62c, i32* %r0.global-to-local, align 4
  %v5_b630 = trunc i32 %v6_b610 to i8
  %v6_b634 = inttoptr i32 %v0_b628 to i32*
  %v7_b634 = call i32 @function_829c(i32 %v0_b62c, i32* %v6_b634, i32 3, i32 65535)
  %v0_b638 = load i32, i32* @r5, align 4
  store i32 %v0_b638, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b634, i32* @sl, align 4
  %v0_b648 = load i32, i32* @r4, align 4
  store i32 %v0_b648, i32* %r0.global-to-local, align 4
  %v4_b64c = inttoptr i32 %v0_b638 to i32*
  %v5_b64c = call i32 @function_829c(i32 %v0_b648, i32* %v4_b64c, i32 4, i32 64)
  %v1_b654 = urem i32 %v5_b64c, 256
  store i32 %v1_b654, i32* %ip.global-to-local, align 4
  %v0_b658 = load i32, i32* @r5, align 4
  store i32 %v0_b658, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b664 = load i32, i32* @r4, align 4
  store i32 %v0_b664, i32* %r0.global-to-local, align 4
  %v6_b66c = inttoptr i32 %v0_b658 to i32*
  %v7_b66c = call i32 @function_829c(i32 %v0_b664, i32* %v6_b66c, i32 5, i32 1)
  %v1_b678 = urem i32 %v7_b66c, 256
  store i32 %v1_b678, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b680 = load i32, i32* @r5, align 4
  store i32 %v0_b680, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b688 = load i32, i32* @r4, align 4
  store i32 %v0_b688, i32* %r0.global-to-local, align 4
  %v5_b690 = inttoptr i32 %v0_b680 to i32*
  %v6_b690 = call i32 @function_829c(i32 %v0_b688, i32* %v5_b690, i32 7, i32 65535)
  %v0_b694 = load i32, i32* @r5, align 4
  store i32 %v0_b694, i32* %r1.global-to-local, align 4
  %v3_b698 = mul i32 %v6_b690, 65536
  store i32 %v3_b698, i32* @r8, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_b6a0 = load i32, i32* @r7, align 4
  store i32 %v0_b6a0, i32* %r3.global-to-local, align 4
  %v0_b6a4 = load i32, i32* @r4, align 4
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  %v4_b6a8 = inttoptr i32 %v0_b694 to i32*
  %v5_b6a8 = call i32 @function_829c(i32 %v0_b6a4, i32* %v4_b6a8, i32 10, i32 %v0_b6a0)
  %v1_b6b0 = urem i32 %v5_b6a8, 256
  store i32 %v1_b6b0, i32* %ip.global-to-local, align 4
  %v0_b6b4 = load i32, i32* @r5, align 4
  store i32 %v0_b6b4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b6c0 = load i32, i32* @r4, align 4
  store i32 %v0_b6c0, i32* %r0.global-to-local, align 4
  %v5_b6c8 = inttoptr i32 %v0_b6b4 to i32*
  %v6_b6c8 = call i32 @function_829c(i32 %v0_b6c0, i32* %v5_b6c8, i32 11, i32 1)
  %v1_b6d0 = urem i32 %v6_b6c8, 256
  store i32 %v1_b6d0, i32* %ip.global-to-local, align 4
  %v0_b6d4 = load i32, i32* @r5, align 4
  store i32 %v0_b6d4, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b6e0 = load i32, i32* @r4, align 4
  store i32 %v0_b6e0, i32* %r0.global-to-local, align 4
  %v5_b6e8 = inttoptr i32 %v0_b6d4 to i32*
  %v6_b6e8 = call i32 @function_829c(i32 %v0_b6e0, i32* %v5_b6e8, i32 12, i32 1)
  %v1_b6f0 = urem i32 %v6_b6e8, 256
  store i32 %v1_b6f0, i32* %ip.global-to-local, align 4
  %v0_b6f4 = load i32, i32* @r5, align 4
  store i32 %v0_b6f4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_b6fc = load i32, i32* @r7, align 4
  store i32 %v0_b6fc, i32* %r3.global-to-local, align 4
  %v0_b700 = load i32, i32* @r4, align 4
  store i32 %v0_b700, i32* %r0.global-to-local, align 4
  %v5_b708 = inttoptr i32 %v0_b6f4 to i32*
  %v6_b708 = call i32 @function_829c(i32 %v0_b700, i32* %v5_b708, i32 13, i32 %v0_b6fc)
  %v1_b710 = urem i32 %v6_b708, 256
  store i32 %v1_b710, i32* %ip.global-to-local, align 4
  %v0_b714 = load i32, i32* @r5, align 4
  store i32 %v0_b714, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_b71c = load i32, i32* @r7, align 4
  store i32 %v0_b71c, i32* %r3.global-to-local, align 4
  %v0_b720 = load i32, i32* @r4, align 4
  store i32 %v0_b720, i32* %r0.global-to-local, align 4
  %v5_b728 = inttoptr i32 %v0_b714 to i32*
  %v6_b728 = call i32 @function_829c(i32 %v0_b720, i32* %v5_b728, i32 14, i32 %v0_b71c)
  %v1_b730 = urem i32 %v6_b728, 256
  store i32 %v1_b730, i32* %ip.global-to-local, align 4
  %v0_b734 = load i32, i32* @r5, align 4
  store i32 %v0_b734, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_b73c = load i32, i32* @r7, align 4
  store i32 %v0_b73c, i32* %r3.global-to-local, align 4
  %v0_b740 = load i32, i32* @r4, align 4
  store i32 %v0_b740, i32* %r0.global-to-local, align 4
  %v5_b748 = inttoptr i32 %v0_b734 to i32*
  %v6_b748 = call i32 @function_829c(i32 %v0_b740, i32* %v5_b748, i32 15, i32 %v0_b73c)
  %v1_b750 = urem i32 %v6_b748, 256
  store i32 %v1_b750, i32* %ip.global-to-local, align 4
  %v0_b754 = load i32, i32* @r7, align 4
  store i32 %v0_b754, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b75c = load i32, i32* @r5, align 4
  store i32 %v0_b75c, i32* %r1.global-to-local, align 4
  %v0_b760 = load i32, i32* @r4, align 4
  store i32 %v0_b760, i32* %r0.global-to-local, align 4
  %v5_b768 = inttoptr i32 %v0_b75c to i32*
  %v6_b768 = call i32 @function_829c(i32 %v0_b760, i32* %v5_b768, i32 %v0_b754, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b774 = load i32, i32* @r5, align 4
  store i32 %v0_b774, i32* %r1.global-to-local, align 4
  %v0_b77c = load i32, i32* @r4, align 4
  store i32 %v0_b77c, i32* %r0.global-to-local, align 4
  %v4_b780 = inttoptr i32 %v0_b774 to i32*
  %v5_b780 = call i32 @function_829c(i32 %v0_b77c, i32* %v4_b780, i32 1, i32 1)
  %v1_b788 = urem i32 %v5_b780, 256
  store i32 %v1_b788, i32* %r3.global-to-local, align 4
  %v0_b78c = load i32, i32* @r7, align 4
  store i32 %v0_b78c, i32* %r0.global-to-local, align 4
  %v1_b794 = inttoptr i32 %v0_b78c to i32*
  %v2_b794 = call i32 @function_12cb0(i32* %v1_b794)
  %v1_b798 = load i32, i32* @r6, align 4
  %v2_b798 = add i32 %v1_b798, %v2_b794
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b7ac = call i32 @function_132cc(i32 2, i32 3, i32 6)
  store i32 %v3_b7ac, i32* %r0.global-to-local, align 4
  %v0_b7b0 = load i32, i32* @r8, align 4
  %v3_b7b0 = udiv i32 %v0_b7b0, 65536
  store i32 %v3_b7b0, i32* %r1.global-to-local, align 4
  %v7_b7b4 = icmp eq i32 %v3_b7ac, -1
  store i1 %v7_b7b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b7ac, i32* @sb, align 4
  br i1 %v7_b7b4, label %dec_label_pc_bb68, label %dec_label_pc_b7c4

dec_label_pc_b7c4:                                ; preds = %dec_label_pc_b5b8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b7cc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b7cc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b7d4 = load i32, i32* @r7, align 4
  store i32 %v0_b7d4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b7e0 = call i32 @function_1329c(i32 %v3_b7ac, i32 %v0_b7d4, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_b7e0, i32* %r0.global-to-local, align 4
  %v7_b7e4 = icmp eq i32 %v6_b7e0, -1
  store i1 %v7_b7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b7e4, label %dec_label_pc_bb60, label %dec_label_pc_b7ec

dec_label_pc_b7ec:                                ; preds = %dec_label_pc_b7c4
  store i32 %v1_b5bc, i32* %r2.global-to-local, align 4
  %v0_b7f0 = load i32, i32* @sl, align 4
  %v3_b7f0 = mul i32 %v0_b7f0, 65536
  store i32 %v3_b7f0, i32* %r0.global-to-local, align 4
  %v3_b7f4 = urem i32 %v0_b7f0, 65536
  store i32 %v3_b7f4, i32* %r3.global-to-local, align 4
  %v2_b7f8 = icmp eq i32 %v1_b5bc, 0
  store i1 %v2_b7f8, i1* %cpsr_z.global-to-local, align 1
  %v0_b7fc = load i32, i32* @r7, align 4
  store i32 %v0_b7fc, i32* %stack_var_-40, align 4
  br i1 %v2_b7f8, label %dec_label_pc_b7ec.dec_label_pc_b9e8.preheader_crit_edge, label %dec_label_pc_b808

dec_label_pc_b7ec.dec_label_pc_b9e8.preheader_crit_edge: ; preds = %dec_label_pc_b7ec
  %.pre = add i32 %v6_b768, 40
  br label %dec_label_pc_b9e8.preheader

dec_label_pc_b808:                                ; preds = %dec_label_pc_b7ec
  %v0_b80c = load i32, i32* @r8, align 4
  %v3_b80c = udiv i32 %v0_b80c, 16777216
  %tmp77 = udiv i32 %v0_b7f0, 256
  %v3_b810 = urem i32 %tmp77, 256
  store i32 %v3_b810, i32* %r0.global-to-local, align 4
  %v1_b814 = add i32 %v6_b768, 40
  store i32 %v1_b814, i32* %ip.global-to-local, align 4
  %v3_bbdc = icmp ugt i32 %v0_b7b0, -65537
  %v2_b8c0 = ptrtoint i32* %stack_var_-60 to i32
  %v3_b8cc = bitcast i32* %stack_var_-60 to %sockaddr*
  %v1_b8e4 = urem i32 %v1_b814, 256
  %tmp78 = udiv i32 %v1_b814, 256
  %v3_b8e8 = urem i32 %tmp78, 256
  %v2_b8f8 = ptrtoint i32* %stack_var_-76 to i32
  %v2_b8fc = ptrtoint i32* %stack_var_-332 to i32
  %v2_b900 = ptrtoint i32* %stack_var_-44 to i32
  %v4_b974 = zext i8 %tmp32 to i32
  %v4_b978 = zext i8 %tmp31 to i32
  %v4_b984 = mul nuw nsw i32 %v4_b978, 256
  %v4_b994 = zext i8 %tmp30 to i32
  %v1_b998 = and i32 %v4_b994, 18
  %v2_b99c = icmp eq i32 %v1_b998, 18
  %v4_bd04 = sext i8 %v5_b630 to i32
  %sext6 = mul i32 %v5_b64c, 16777216
  %v4_bd10 = sdiv i32 %sext6, 16777216
  %v1_bdf4 = urem i32 %v5_b6a8, 2
  %tmp101 = sub nsw i32 0, %v1_bdf4
  %v4_bdfc = and i32 %tmp101, 32
  %v1_be28 = urem i32 %v6_b6e8, 2
  %tmp102 = sub nsw i32 0, %v1_be28
  %v4_be30 = and i32 %tmp102, 8
  %v1_be74 = urem i32 %v6_b748, 2
  %v4_b8ec = mul nuw nsw i32 %v1_b8e4, 256
  %v5_b8ec = or i32 %v4_b8ec, %v3_b8e8
  %v5_b984 = or i32 %v4_b974, %v4_b984
  %v1_b9a4 = and i32 %v4_b994, 5
  %v2_b9a4 = icmp eq i32 %v1_b9a4, 0
  %v1_b8ac = urem i32 %v3_b7b0, 256
  %v4_b8b0 = mul nuw nsw i32 %v1_b8ac, 256
  %v5_b8b0 = or i32 %v3_b80c, %v4_b8b0
  %v1_b8b8 = trunc i32 %v3_b7b0 to i8
  %v1_b8bc = trunc i32 %v3_b80c to i8
  %v1_bce4 = urem i32 %v0_b7f0, 256
  %v4_bcec = mul nuw nsw i32 %v1_bce4, 256
  %v5_bcec = or i32 %v4_bcec, %v3_b810
  %sext = mul i32 %v1_b814, 16777216
  %v4_bd08 = sdiv i32 %sext, 16777216
  %v1_be0c = urem i32 %v6_b6c8, 2
  %tmp103 = sub nsw i32 0, %v1_be0c
  %v4_be14 = and i32 %tmp103, 16
  %v1_be40 = urem i32 %v6_b708, 2
  %tmp104 = sub nsw i32 0, %v1_be40
  %v4_be48 = and i32 %tmp104, 4
  %v1_be58 = urem i32 %v6_b728, 2
  %tmp105 = sub nsw i32 0, %v1_be58
  %v3_be60 = and i32 %tmp105, 2
  br label %dec_label_pc_b824.outer

dec_label_pc_b824.outer:                          ; preds = %bb93, %dec_label_pc_b808
  %stack_var_-336.0.ph = phi i32 [ %v0_bd24, %bb93 ], [ %tmp, %dec_label_pc_b808 ]
  %stack_var_-56.0.ph = phi i32 [ %v0_bc30, %bb93 ], [ %tmp38, %dec_label_pc_b808 ]
  br label %dec_label_pc_b824

dec_label_pc_b824:                                ; preds = %dec_label_pc_b824.outer, %dec_label_pc_b9d0
  %stack_var_-56.0 = phi i32 [ %stack_var_-56.5, %dec_label_pc_b9d0 ], [ %stack_var_-56.0.ph, %dec_label_pc_b824.outer ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b830 = call i32 @function_132cc(i32 2, i32 1, i32 0)
  store i32 %v3_b830, i32* %r0.global-to-local, align 4
  %v7_b834 = icmp eq i32 %v3_b830, -1
  store i1 %v7_b834, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b830, i32* @sl, align 4
  br i1 %v7_b834, label %dec_label_pc_b9d0, label %dec_label_pc_b840

dec_label_pc_b840:                                ; preds = %dec_label_pc_b824, %dec_label_pc_b9ac
  %v0_b848 = phi i32 [ %v3_b9c0, %dec_label_pc_b9ac ], [ %v3_b830, %dec_label_pc_b824 ]
  %stack_var_-56.1 = phi i32 [ %v0_bc30, %dec_label_pc_b9ac ], [ %stack_var_-56.0, %dec_label_pc_b824 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b848 = call i32 @function_1291c(i32 %v0_b848, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b850 = or i32 %v2_b848, 2048
  store i32 %v1_b850, i32* @r2, align 4
  %v0_b854 = load i32, i32* @sl, align 4
  store i32 %v0_b854, i32* %r0.global-to-local, align 4
  %v2_b858 = call i32 @function_1291c(i32 %v0_b854, i32 4)
  store i32 %v2_b858, i32* %r0.global-to-local, align 4
  %v3_b85c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b85c, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %lr.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_b878 = mul i32 %v3_b85c, 24
  store i32 %v5_b878, i32* %r1.global-to-local, align 4
  %v2_b87c = add i32 %v5_b878, %arg3
  store i32 %v2_b87c, i32* %r2.global-to-local, align 4
  %v1_b880 = add i32 %v2_b87c, 20
  %v2_b880 = inttoptr i32 %v1_b880 to i8*
  %v3_b880 = load i8, i8* %v2_b880, align 1
  %v4_b880 = zext i8 %v3_b880 to i32
  store i32 %v4_b880, i32* %r3.global-to-local, align 4
  %v2_b884 = icmp ugt i8 %v3_b880, 30
  %v7_b884 = icmp eq i8 %v3_b880, 31
  store i1 %v7_b884, i1* %cpsr_z.global-to-local, align 1
  %v2_b888 = xor i1 %v7_b884, true
  %v3_b888 = and i1 %v2_b884, %v2_b888
  br i1 %v3_b888, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_b840
  %v5_b888 = add i32 %v2_b87c, 16
  %v6_b888 = inttoptr i32 %v5_b888 to i32*
  %v7_b888 = load i32, i32* %v6_b888, align 4
  store i32 %v7_b888, i32* %r3.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_b840, %bb
  %v4_b88c = phi i32 [ %v4_b880, %dec_label_pc_b840 ], [ %v7_b888, %bb ]
  %v4_b88c.stack_var_-56.1 = select i1 %v3_b888, i32 %v4_b88c, i32 %stack_var_-56.1
  %v2_b890 = xor i1 %v2_b884, true
  %v3_b890 = or i1 %v7_b884, %v2_b890
  br i1 %v3_b890, label %dec_label_pc_bb70, label %dec_label_pc_b894

dec_label_pc_b894:                                ; preds = %bb79
  store i32 %v3_b7b0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bbdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bbdc, label %dec_label_pc_bbe4, label %dec_label_pc_b8a8

dec_label_pc_b8a8:                                ; preds = %dec_label_pc_bb70, %dec_label_pc_b894
  %stack_var_-56.3 = phi i32 [ %v2_bbc8, %dec_label_pc_bb70 ], [ %v4_b88c.stack_var_-56.1, %dec_label_pc_b894 ]
  store i32 %v3_b80c, i32* %r0.global-to-local, align 4
  store i32 %v5_b8b0, i32* %r3.global-to-local, align 4
  store i32 %v1_b8ac, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b8c0

dec_label_pc_b8c0:                                ; preds = %dec_label_pc_bbe4, %dec_label_pc_b8a8
  %stack_var_-57.0 = phi i8 [ %v1_bbec, %dec_label_pc_bbe4 ], [ %v1_b8b8, %dec_label_pc_b8a8 ]
  %v0_bc30 = phi i32 [ %stack_var_-56.6, %dec_label_pc_bbe4 ], [ %stack_var_-56.3, %dec_label_pc_b8a8 ]
  %storemerge = phi i8 [ %v1_bbe4, %dec_label_pc_bbe4 ], [ %v1_b8bc, %dec_label_pc_b8a8 ]
  store i32 %v2_b8c0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b8c8 = load i32, i32* @sl, align 4
  store i32 %v0_b8c8, i32* %r0.global-to-local, align 4
  %v4_b8cc = call i32 @function_13128(i32 %v0_b8c8, %sockaddr* %v3_b8cc, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b8d4 = call i32 @function_12cb0(i32* null)
  store i32 %v2_b8d4, i32* %r0.global-to-local, align 4
  store i32 %v1_b814, i32* %r1.global-to-local, align 4
  store i32 %v1_b8e4, i32* %r3.global-to-local, align 4
  store i32 %v5_b8ec, i32* @fp, align 4
  store i32 %v1_b8e4, i32* %r2.global-to-local, align 4
  store i32 %v2_b8d4, i32* @r4, align 4
  store i32 %v2_b8fc, i32* @r7, align 4
  store i32 %v2_b900, i32* @r6, align 4
  %v9_b958 = icmp eq i32 %tmp33, %v0_bc30
  %v4_b97c = zext i8 %storemerge to i32
  %v4_b980 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_b958 to i32
  %v9_b96c = icmp eq i1 %v9_b958, false
  %v4_b988 = mul nuw nsw i32 %v4_b980, 256
  %v5_b988 = or i32 %v4_b97c, %v4_b988
  %v9_b98c = icmp eq i32 %v5_b988, %v5_b984
  br label %dec_label_pc_b91c

dec_label_pc_b90c:                                ; preds = %.thread25, %dec_label_pc_b974, %dec_label_pc_b9a4, %bb82
  %v2_b90c = call i32 @function_12cb0(i32* null)
  %v0_b910 = load i32, i32* @r4, align 4
  %v2_b910 = sub i32 %v2_b90c, %v0_b910
  store i32 %v2_b910, i32* %r0.global-to-local, align 4
  %v7_b914 = icmp eq i32 %v2_b910, 10
  store i1 %v7_b914, i1* %cpsr_z.global-to-local, align 1
  %v8_b918 = icmp sgt i32 %v2_b910, 10
  br i1 %v8_b918, label %dec_label_pc_b9ac, label %dec_label_pc_b91c

dec_label_pc_b91c:                                ; preds = %dec_label_pc_b90c, %dec_label_pc_b8c0
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_b8fc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b92c = load i32, i32* @sb, align 4
  store i32 %v0_b92c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  %v7_b93c = call i32 @function_13208(i32 %v0_b92c, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_b8f8, i32 %v2_b900)
  store i32 %v7_b93c, i32* %r2.global-to-local, align 4
  %v7_b944 = icmp eq i32 %v7_b93c, -1
  store i1 %v7_b944, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b944, label %dec_label_pc_bb68, label %dec_label_pc_b950

dec_label_pc_b950:                                ; preds = %dec_label_pc_b91c
  store i32 %tmp33, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b964 = icmp eq i32 %v7_b93c, 40
  store i1 %v7_b964, i1* %cpsr_z.global-to-local, align 1
  %tmp106 = icmp ult i32 %v7_b93c, 41
  br i1 %tmp106, label %.thread25, label %bb82

.thread25:                                        ; preds = %dec_label_pc_b950
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b90c

bb82:                                             ; preds = %dec_label_pc_b950
  store i1 %v9_b96c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b96c, label %dec_label_pc_b90c, label %dec_label_pc_b974

dec_label_pc_b974:                                ; preds = %bb82
  store i32 %v4_b978, i32* %r1.global-to-local, align 4
  store i32 %v4_b97c, i32* %ip.global-to-local, align 4
  store i32 %v4_b980, i32* %r2.global-to-local, align 4
  store i32 %v5_b984, i32* %r3.global-to-local, align 4
  store i32 %v5_b988, i32* @r5, align 4
  store i1 %v9_b98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b98c, label %dec_label_pc_b994, label %dec_label_pc_b90c

dec_label_pc_b994:                                ; preds = %dec_label_pc_b974
  store i32 %v4_b994, i32* %r2.global-to-local, align 4
  store i32 %v1_b998, i32* %r3.global-to-local, align 4
  store i1 %v2_b99c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b99c, label %dec_label_pc_bc24, label %dec_label_pc_b9a4

dec_label_pc_b9a4:                                ; preds = %dec_label_pc_b994
  store i1 %v2_b9a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b9a4, label %dec_label_pc_b90c, label %dec_label_pc_b9ac

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b9a4, %dec_label_pc_b90c
  %v0_b9ac = load i32, i32* @sl, align 4
  store i32 %v0_b9ac, i32* %r0.global-to-local, align 4
  %v1_b9b0 = call i32 @function_129e0(i32 %v0_b9ac)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b9c0 = call i32 @function_132cc(i32 2, i32 1, i32 0)
  store i32 %v3_b9c0, i32* %r0.global-to-local, align 4
  %v3_b9c4 = icmp eq i32 %v3_b9c0, -1
  %v8_b9c4 = icmp eq i32 %v3_b9c0, -1
  store i1 %v8_b9c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b9c0, i32* @sl, align 4
  br i1 %v3_b9c4, label %dec_label_pc_b9d0, label %dec_label_pc_b840

dec_label_pc_b9d0:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b824
  %stack_var_-56.5 = phi i32 [ %stack_var_-56.0, %dec_label_pc_b824 ], [ %v0_bc30, %dec_label_pc_b9ac ]
  %v3_b9d0 = load i32, i32* %stack_var_-40, align 4
  %v1_b9d8 = add i32 %v3_b9d0, 1
  store i32 %v1_b9d8, i32* %r3.global-to-local, align 4
  %v9_b9dc = icmp eq i32 %v1_b9d8, %v1_b5bc
  store i1 %v9_b9dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b9d8, i32* %stack_var_-40, align 4
  %v5_b9e4 = icmp slt i32 %v1_b9d8, %v1_b5bc
  br i1 %v5_b9e4, label %dec_label_pc_b824, label %dec_label_pc_b9e8.preheader

dec_label_pc_b9e8.preheader:                      ; preds = %bb93, %dec_label_pc_b9d0, %dec_label_pc_b7ec.dec_label_pc_b9e8.preheader_crit_edge
  %v1_ba1c.pre-phi = phi i32 [ %.pre, %dec_label_pc_b7ec.dec_label_pc_b9e8.preheader_crit_edge ], [ %v1_b814, %dec_label_pc_b9d0 ], [ %v1_b814, %bb93 ]
  %v1_ba00 = add i32 %v6_b768, 20
  %v3_ba04 = mul i32 %v1_ba00, 65536
  %tmp84 = mul i32 %v1_ba00, 256
  %v1_ba0c = and i32 %tmp84, 65280
  %tmp85 = udiv i32 %v1_ba00, 256
  %v4_ba10 = urem i32 %tmp85, 256
  %v5_ba10 = or i32 %v4_ba10, %v1_ba0c
  %v2_bb40 = icmp eq i32 %v1_b788, 0
  %v3_bb2c = icmp eq i32 %v3_b7f4, 65535
  br label %dec_label_pc_b9e8

dec_label_pc_b9e8:                                ; preds = %dec_label_pc_b9e8.preheader, %dec_label_pc_bc0c
  store i32 %v1_b5bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_b7f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b7f8, label %dec_label_pc_bc0c, label %dec_label_pc_b9fc

dec_label_pc_b9fc:                                ; preds = %dec_label_pc_b9e8
  store i32 %v1_ba00, i32* @r8, align 4
  store i32 %v3_ba04, i32* %r2.global-to-local, align 4
  store i32 %v5_ba10, i32* @fp, align 4
  store i32 %v6_b768, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_ba1c.pre-phi, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_bb18

dec_label_pc_ba28:                                ; preds = %dec_label_pc_bb3c, %dec_label_pc_bb50
  %v0_ba28 = load i32, i32* @r7, align 4
  %v1_ba28 = trunc i32 %v0_ba28 to i8
  %v2_ba28 = load i32, i32* @r4, align 4
  %v3_ba28 = add i32 %v2_ba28, 10
  %v4_ba28 = inttoptr i32 %v3_ba28 to i8*
  store i8 %v1_ba28, i8* %v4_ba28, align 1
  %v0_ba2c = load i32, i32* @r7, align 4
  %v1_ba2c = trunc i32 %v0_ba2c to i8
  %v2_ba2c = load i32, i32* @r4, align 4
  %v3_ba2c = add i32 %v2_ba2c, 11
  %v4_ba2c = inttoptr i32 %v3_ba2c to i8*
  store i8 %v1_ba2c, i8* %v4_ba2c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ba34 = load i32, i32* @r4, align 4
  store i32 %v0_ba34, i32* @r0, align 4
  %v2_ba38 = call i32 @function_e498(i32 %v0_ba34, i32 20)
  %v3_ba38 = trunc i32 %v2_ba38 to i8
  store i32 %v2_ba38, i32* %r0.global-to-local, align 4
  %v3_ba3c = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b5e8, i32* %r2.global-to-local, align 4
  %v3_ba44 = mul i32 %v3_ba3c, 16
  %v2_ba48 = add i32 %v3_ba44, %v2_b5e8
  store i32 %v2_ba48, i32* %r1.global-to-local, align 4
  %v1_ba4c = add i32 %v2_ba48, 4
  %v2_ba4c = inttoptr i32 %v1_ba4c to i32*
  %v3_ba4c = load i32, i32* %v2_ba4c, align 4
  %v3_ba50 = mul i32 %v3_ba4c, 65536
  store i32 %v3_ba50, i32* %ip.global-to-local, align 4
  %tmp86 = mul i32 %v3_ba4c, 256
  %v1_ba58 = and i32 %tmp86, 65280
  %tmp87 = udiv i32 %v3_ba4c, 256
  %v4_ba5c = urem i32 %tmp87, 256
  %v5_ba5c = or i32 %v4_ba5c, %v1_ba58
  store i32 %v5_ba5c, i32* %r2.global-to-local, align 4
  %v1_ba60 = add i32 %v3_ba4c, 1
  store i32 %v1_ba60, i32* %r3.global-to-local, align 4
  store i32 %v1_ba60, i32* %v2_ba4c, align 4
  %v0_ba68 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba68 = load i32, i32* @r5, align 4
  %v2_ba68 = add i32 %v1_ba68, 4
  %v3_ba68 = inttoptr i32 %v2_ba68 to i32*
  store i32 %v0_ba68, i32* %v3_ba68, align 4
  %v0_ba6c = load i32, i32* %r1.global-to-local, align 4
  %v1_ba6c = add i32 %v0_ba6c, 8
  %v2_ba6c = inttoptr i32 %v1_ba6c to i32*
  %v3_ba6c = load i32, i32* %v2_ba6c, align 4
  %tmp88 = mul i32 %v3_ba6c, 256
  %v1_ba78 = and i32 %tmp88, 65280
  %tmp89 = udiv i32 %v3_ba6c, 256
  %v4_ba7c = urem i32 %tmp89, 256
  %v5_ba7c = or i32 %v4_ba7c, %v1_ba78
  store i32 %v5_ba7c, i32* %r2.global-to-local, align 4
  %v4_ba8028 = udiv i32 %v2_ba38, 256
  %v1_ba84 = trunc i32 %v4_ba8028 to i8
  %v2_ba84 = load i32, i32* @r4, align 4
  %v3_ba84 = add i32 %v2_ba84, 11
  %v4_ba84 = inttoptr i32 %v3_ba84 to i8*
  store i8 %v1_ba84, i8* %v4_ba84, align 1
  %v3_ba88 = load i32, i32* @r4, align 4
  %v4_ba88 = add i32 %v3_ba88, 10
  %v5_ba88 = inttoptr i32 %v4_ba88 to i8*
  store i8 %v3_ba38, i8* %v5_ba88, align 1
  %v0_ba8c = load i32, i32* %r2.global-to-local, align 4
  %v1_ba8c = load i32, i32* @r5, align 4
  %v2_ba8c = add i32 %v1_ba8c, 8
  %v3_ba8c = inttoptr i32 %v2_ba8c to i32*
  store i32 %v0_ba8c, i32* %v3_ba8c, align 4
  %v0_ba90 = load i32, i32* @r5, align 4
  store i32 %v0_ba90, i32* @r1, align 4
  %v0_ba94 = load i32, i32* @fp, align 4
  store i32 %v0_ba94, i32* %r2.global-to-local, align 4
  %v0_ba98 = load i32, i32* @r8, align 4
  store i32 %v0_ba98, i32* %r3.global-to-local, align 4
  %v0_ba9c = load i32, i32* @r4, align 4
  store i32 %v0_ba9c, i32* %r0.global-to-local, align 4
  %v0_baa0 = load i32, i32* @r7, align 4
  %v1_baa0 = trunc i32 %v0_baa0 to i8
  %v3_baa0 = add i32 %v0_ba90, 16
  %v4_baa0 = inttoptr i32 %v3_baa0 to i8*
  store i8 %v1_baa0, i8* %v4_baa0, align 1
  %v0_baa4 = load i32, i32* @r7, align 4
  %v1_baa4 = trunc i32 %v0_baa4 to i8
  %v2_baa4 = load i32, i32* @r5, align 4
  %v3_baa4 = add i32 %v2_baa4, 17
  %v4_baa4 = inttoptr i32 %v3_baa4 to i8*
  store i8 %v1_baa4, i8* %v4_baa4, align 1
  %v4_baa8 = call i32 @function_e4f4(i32 %v0_ba9c, i32 %v0_ba90, i32 %v0_ba94, i32 %v0_ba98)
  %v5_baa8 = trunc i32 %v4_baa8 to i8
  store i32 %v4_baa8, i32* %r0.global-to-local, align 4
  %v4_baac29 = udiv i32 %v4_baa8, 256
  %v1_bab0 = trunc i32 %v4_baac29 to i8
  %v2_bab0 = load i32, i32* @r5, align 4
  %v3_bab0 = add i32 %v2_bab0, 17
  %v4_bab0 = inttoptr i32 %v3_bab0 to i8*
  store i8 %v1_bab0, i8* %v4_bab0, align 1
  %v3_bab4 = load i32, i32* @r5, align 4
  %v4_bab4 = add i32 %v3_bab4, 16
  %v5_bab4 = inttoptr i32 %v4_bab4 to i8*
  store i8 %v5_baa8, i8* %v5_bab4, align 1
  %v3_bab8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bab8, i32* %r3.global-to-local, align 4
  %v0_babc = load i32, i32* @r4, align 4
  %v1_babc = add i32 %v0_babc, 20
  %v2_babc = inttoptr i32 %v1_babc to i32*
  %v3_babc = load i32, i32* %v2_babc, align 4
  %v5_bac4 = mul i32 %v3_bab8, 24
  %v3_bacc = udiv i32 %v3_babc, 65536
  store i32 %v3_bacc, i32* %r2.global-to-local, align 4
  %v2_bad0 = add i32 %v5_bac4, %arg3
  store i32 %v2_bad0, i32* %ip.global-to-local, align 4
  %v3_bad44 = udiv i32 %v3_babc, 16777216
  %v1_bad8 = trunc i32 %v3_bad44 to i8
  %v3_bad8 = add i32 %v2_bad0, 3
  %v4_bad8 = inttoptr i32 %v3_bad8 to i8*
  store i8 %v1_bad8, i8* %v4_bad8, align 1
  %v0_badc = load i32, i32* %r2.global-to-local, align 4
  %v1_badc = trunc i32 %v0_badc to i8
  %v2_badc = load i32, i32* %ip.global-to-local, align 4
  %v3_badc = add i32 %v2_badc, 2
  %v4_badc = inttoptr i32 %v3_badc to i8*
  store i8 %v1_badc, i8* %v4_badc, align 1
  %v0_bae0 = load i32, i32* @r4, align 4
  store i32 %v0_bae0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bae8 = load i32, i32* @sb, align 4
  store i32 %v0_bae8, i32* %r0.global-to-local, align 4
  %v0_baec = load i32, i32* @sl, align 4
  store i32 %v0_baec, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_baf4 = load i32, i32* %ip.global-to-local, align 4
  %v6_bafc = inttoptr i32 %v0_bae0 to i32*
  %v7_bafc = call i32 @function_13268(i32 %v0_bae8, i32* %v6_bafc, i32 %v0_baec, i32 16384, i32 %v0_baf4, i32 16)
  %v3_bb00 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bb00, i32* %r3.global-to-local, align 4
  store i32 %v1_b5bc, i32* %ip.global-to-local, align 4
  %v1_bb08 = add i32 %v3_bb00, 1
  store i32 %v1_bb08, i32* %r0.global-to-local, align 4
  %v9_bb0c = icmp eq i32 %v1_bb08, %v1_b5bc
  store i1 %v9_bb0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bb08, i32* %stack_var_-40, align 4
  %v6_bb14 = icmp slt i32 %v1_bb08, %v1_b5bc
  br i1 %v6_bb14, label %dec_label_pc_bb18, label %dec_label_pc_bc0c

dec_label_pc_bb18:                                ; preds = %dec_label_pc_ba28, %dec_label_pc_b9fc
  %v1_bb24 = phi i32 [ %v1_bb08, %dec_label_pc_ba28 ], [ 0, %dec_label_pc_b9fc ]
  store i32 %v2_b5f8, i32* %ip.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b7f4, i32* %lr.global-to-local, align 4
  %v4_bb24 = mul i32 %v1_bb24, 4
  %v5_bb24 = add i32 %v4_bb24, %v2_b5f8
  %v6_bb24 = inttoptr i32 %v5_bb24 to i32*
  %v7_bb24 = load i32, i32* %v6_bb24, align 4
  store i32 %v7_bb24, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bb2c, i1* %cpsr_z.global-to-local, align 1
  %v1_bb30 = add i32 %v7_bb24, 40
  store i32 %v1_bb30, i32* @r6, align 4
  %v1_bb34 = add i32 %v7_bb24, 20
  store i32 %v1_bb34, i32* @r5, align 4
  br i1 %v3_bb2c, label %dec_label_pc_bbf8, label %dec_label_pc_bb3c

dec_label_pc_bb3c:                                ; preds = %dec_label_pc_bb18, %dec_label_pc_bbf8
  %v0_bb48 = phi i32 [ %v1_bb30, %dec_label_pc_bb18 ], [ %v0_bb48.pre, %dec_label_pc_bbf8 ]
  store i1 %v2_bb40, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_b768, i32* %r1.global-to-local, align 4
  store i32 %v0_bb48, i32* %r0.global-to-local, align 4
  br i1 %v2_bb40, label %dec_label_pc_ba28, label %dec_label_pc_bb50

dec_label_pc_bb50:                                ; preds = %dec_label_pc_bb3c
  %v2_bb50 = call i32 @function_f978(i32 %v0_bb48, i32 %v6_b768)
  store i32 %v2_bb50, i32* %r0.global-to-local, align 4
  store i32 %v6_b768, i32* %r1.global-to-local, align 4
  %v0_bb58 = load i32, i32* @r7, align 4
  %v1_bb58 = trunc i32 %v0_bb58 to i8
  %v2_bb58 = load i32, i32* @r6, align 4
  %v4_bb58 = add i32 %v2_bb58, %v6_b768
  %v5_bb58 = inttoptr i32 %v4_bb58 to i8*
  store i8 %v1_bb58, i8* %v5_bb58, align 1
  br label %dec_label_pc_ba28

dec_label_pc_bb60:                                ; preds = %dec_label_pc_b7c4
  %v0_bb60 = load i32, i32* @sb, align 4
  store i32 %v0_bb60, i32* %r0.global-to-local, align 4
  %v1_bb64 = call i32 @function_129e0(i32 %v0_bb60)
  store i32 %v1_bb64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb68

dec_label_pc_bb68:                                ; preds = %dec_label_pc_b91c, %dec_label_pc_bc0c, %dec_label_pc_b5b8, %dec_label_pc_bb60
  %v29_bb6c = phi i32 [ %v3_b7ac, %dec_label_pc_b5b8 ], [ %v1_bb64, %dec_label_pc_bb60 ], [ %v2_bc10, %dec_label_pc_bc0c ], [ 0, %dec_label_pc_b91c ]
  ret i32 %v29_bb6c

dec_label_pc_bb70:                                ; preds = %bb79
  %v1_bb70 = add i32 %v2_b87c, 16
  %v2_bb70 = inttoptr i32 %v1_bb70 to i32*
  %v3_bb70 = load i32, i32* %v2_bb70, align 4
  store i32 %v3_bb70, i32* @r4, align 4
  %v0_bb74 = call i32 @function_f8c4()
  store i32 %v0_bb74, i32* %r0.global-to-local, align 4
  %v3_bb78 = load i32, i32* %stack_var_-40, align 4
  %v5_bb80 = mul i32 %v3_bb78, 24
  %v0_bb88 = load i32, i32* @r4, align 4
  %v2_bb8c = add i32 %v5_bb80, %arg3
  store i32 %v2_bb8c, i32* %r1.global-to-local, align 4
  %v1_bb88 = udiv i32 %v0_bb88, 256
  %v3_bb90 = and i32 %v1_bb88, 65280
  store i32 %v3_bb90, i32* %r2.global-to-local, align 4
  %v1_bb94 = and i32 %v0_bb88, 65280
  store i32 %v1_bb94, i32* %r3.global-to-local, align 4
  %v3_bb98 = mul i32 %v0_bb88, 16777216
  %v4_bb9c = mul nuw nsw i32 %v1_bb94, 256
  %v5_bb9c = or i32 %v4_bb9c, %v3_bb98
  store i32 %v5_bb9c, i32* %ip.global-to-local, align 4
  %v1_bba0 = add i32 %v2_bb8c, 20
  %v2_bba0 = inttoptr i32 %v1_bba0 to i8*
  %v3_bba0 = load i8, i8* %v2_bba0, align 1
  %v4_bba0 = zext i8 %v3_bba0 to i32
  store i32 %v4_bba0, i32* %lr.global-to-local, align 4
  %v2_bba8 = call i32 @llvm.bswap.i32(i32 %v0_bb88)
  %v7_bbac = lshr i32 %v0_bb74, %v4_bba0
  %v8_bbac = add i32 %v7_bbac, %v2_bba8
  store i32 %v8_bbac, i32* %r2.global-to-local, align 4
  %v3_bbb8 = mul i32 %v8_bbac, 16777216
  %v1_bbbc = and i32 %v8_bbac, 65280
  store i32 %v1_bbbc, i32* %r0.global-to-local, align 4
  %v4_bbc0 = mul nuw nsw i32 %v1_bbbc, 256
  %v5_bbc0 = or i32 %v4_bbc0, %v3_bbb8
  store i32 %v5_bbc0, i32* %r1.global-to-local, align 4
  %v2_bbc8 = call i32 @llvm.bswap.i32(i32 %v8_bbac)
  store i32 %v3_b7b0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bbdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bbdc, label %dec_label_pc_bbe4, label %dec_label_pc_b8a8

dec_label_pc_bbe4:                                ; preds = %dec_label_pc_bb70, %dec_label_pc_b894
  %stack_var_-56.6 = phi i32 [ %v2_bbc8, %dec_label_pc_bb70 ], [ %v4_b88c.stack_var_-56.1, %dec_label_pc_b894 ]
  %v0_bbe4 = call i32 @function_f8c4()
  %v1_bbe4 = trunc i32 %v0_bbe4 to i8
  store i32 %v0_bbe4, i32* %r0.global-to-local, align 4
  %v4_bbe8 = sdiv i32 %v0_bbe4, 256
  store i32 %v4_bbe8, i32* %r3.global-to-local, align 4
  %v1_bbec = trunc i32 %v4_bbe8 to i8
  br label %dec_label_pc_b8c0

dec_label_pc_bbf8:                                ; preds = %dec_label_pc_bb18
  %v0_bbf8 = call i32 @function_f8c4()
  %v1_bbf8 = trunc i32 %v0_bbf8 to i8
  store i32 %v0_bbf8, i32* %r0.global-to-local, align 4
  %v4_bbfc = sdiv i32 %v0_bbf8, 256
  store i32 %v4_bbfc, i32* %r3.global-to-local, align 4
  %v1_bc00 = trunc i32 %v4_bbfc to i8
  %v2_bc00 = load i32, i32* @r4, align 4
  %v3_bc00 = add i32 %v2_bc00, 5
  %v4_bc00 = inttoptr i32 %v3_bc00 to i8*
  store i8 %v1_bc00, i8* %v4_bc00, align 1
  %v3_bc04 = load i32, i32* @r4, align 4
  %v4_bc04 = add i32 %v3_bc04, 4
  %v5_bc04 = inttoptr i32 %v4_bc04 to i8*
  store i8 %v1_bbf8, i8* %v5_bc04, align 1
  %v0_bb48.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bb3c

dec_label_pc_bc0c:                                ; preds = %dec_label_pc_ba28, %dec_label_pc_b9e8
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bc10 = call i32 @function_12cb0(i32* null)
  store i32 %v2_bc10, i32* %r0.global-to-local, align 4
  store i32 %v2_b798, i32* %lr.global-to-local, align 4
  %v9_bc18 = icmp eq i32 %v2_b798, %v2_bc10
  store i1 %v9_bc18, i1* %cpsr_z.global-to-local, align 1
  %v6_bc1c = icmp slt i32 %v2_b798, %v2_bc10
  br i1 %v6_bc1c, label %dec_label_pc_bb68, label %dec_label_pc_b9e8

dec_label_pc_bc24:                                ; preds = %dec_label_pc_b994
  %v3_bc24 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc24, i32* @r4, align 4
  store i32 %v2_b5e8, i32* %r0.global-to-local, align 4
  %v3_bc2c = mul i32 %v3_bc24, 16
  store i32 %v3_bc2c, i32* %ip.global-to-local, align 4
  %v3_bc30 = add i32 %v3_bc2c, %v2_b5e8
  %v4_bc30 = inttoptr i32 %v3_bc30 to i32*
  store i32 %v0_bc30, i32* %v4_bc30, align 4
  store i32 %stack_var_-336.0.ph, i32* %r1.global-to-local, align 4
  %v1_bc38 = add i32 %stack_var_-336.0.ph, 4
  %v2_bc38 = inttoptr i32 %v1_bc38 to i32*
  %v3_bc38 = load i32, i32* %v2_bc38, align 4
  store i32 %v3_bc38, i32* %r0.global-to-local, align 4
  %v1_bc40 = and i32 %v3_bc38, 65280
  store i32 %v1_bc40, i32* %r1.global-to-local, align 4
  %v2_bc54 = call i32 @llvm.bswap.i32(i32 %v3_bc38)
  store i32 %v2_b5e8, i32* %r2.global-to-local, align 4
  %v1_bc5c = load i32, i32* %ip.global-to-local, align 4
  %v2_bc5c = add i32 %v1_bc5c, %v2_b5e8
  store i32 %v2_bc5c, i32* %ip.global-to-local, align 4
  %v2_bc60 = add i32 %v2_bc5c, 4
  %v3_bc60 = inttoptr i32 %v2_bc60 to i32*
  store i32 %v2_bc54, i32* %v3_bc60, align 4
  store i32 %stack_var_-336.0.ph, i32* %r3.global-to-local, align 4
  %v1_bc68 = add i32 %stack_var_-336.0.ph, 8
  %v2_bc68 = inttoptr i32 %v1_bc68 to i32*
  %v3_bc68 = load i32, i32* %v2_bc68, align 4
  store i32 %v3_bc68, i32* %r0.global-to-local, align 4
  %v1_bc70 = and i32 %v3_bc68, 65280
  store i32 %v1_bc70, i32* %r1.global-to-local, align 4
  %v3_bc74 = mul i32 %v3_bc68, 16777216
  %v4_bc7c = mul nuw nsw i32 %v1_bc70, 256
  %v5_bc7c = or i32 %v4_bc7c, %v3_bc74
  store i32 %v5_bc7c, i32* %r2.global-to-local, align 4
  %v2_bc84 = call i32 @llvm.bswap.i32(i32 %v3_bc68)
  store i32 %v2_bc84, i32* %r3.global-to-local, align 4
  %v1_bc88 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc88 = add i32 %v1_bc88, 8
  %v3_bc88 = inttoptr i32 %v2_bc88 to i32*
  store i32 %v2_bc84, i32* %v3_bc88, align 4
  store i32 %stack_var_-336.0.ph, i32* %lr.global-to-local, align 4
  %v1_bc90 = inttoptr i32 %stack_var_-336.0.ph to i32*
  %v2_bc90 = load i32, i32* %v1_bc90, align 4
  %v3_bc94 = udiv i32 %v2_bc90, 65536
  store i32 %v3_bc94, i32* %r2.global-to-local, align 4
  %v3_bc985 = udiv i32 %v2_bc90, 16777216
  store i32 %v3_bc985, i32* %r1.global-to-local, align 4
  %v0_bc9c = load i32, i32* @r5, align 4
  %v3_bc9c = sdiv i32 %v0_bc9c, 256
  store i32 %v3_bc9c, i32* %r3.global-to-local, align 4
  %v1_bca0 = trunc i32 %v3_bc9c to i8
  %v2_bca0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bca0 = add i32 %v2_bca0, 15
  %v4_bca0 = inttoptr i32 %v3_bca0 to i8*
  store i8 %v1_bca0, i8* %v4_bca0, align 1
  %v0_bca4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bca4 = trunc i32 %v0_bca4 to i8
  %v2_bca4 = load i32, i32* %ip.global-to-local, align 4
  %v3_bca4 = add i32 %v2_bca4, 13
  %v4_bca4 = inttoptr i32 %v3_bca4 to i8*
  store i8 %v1_bca4, i8* %v4_bca4, align 1
  %v0_bca8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bca8 = trunc i32 %v0_bca8 to i8
  %v2_bca8 = load i32, i32* %ip.global-to-local, align 4
  %v3_bca8 = add i32 %v2_bca8, 12
  %v4_bca8 = inttoptr i32 %v3_bca8 to i8*
  store i8 %v1_bca8, i8* %v4_bca8, align 1
  %v0_bcac = load i32, i32* @r5, align 4
  %v1_bcac = trunc i32 %v0_bcac to i8
  %v2_bcac = load i32, i32* %ip.global-to-local, align 4
  %v3_bcac = add i32 %v2_bcac, 14
  %v4_bcac = inttoptr i32 %v3_bcac to i8*
  store i8 %v1_bcac, i8* %v4_bcac, align 1
  store i32 %v1_b814, i32* %r0.global-to-local, align 4
  %v1_bcb4 = call i32 @function_13464(i32 %v1_b814)
  store i32 %v1_bcb4, i32* %r0.global-to-local, align 4
  store i32 %v2_b5f8, i32* %r1.global-to-local, align 4
  %v3_bcbc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bcbc, i32* %r2.global-to-local, align 4
  %v2_bcc0 = load i32, i32* @r4, align 4
  %v5_bcc0 = mul i32 %v2_bcc0, 4
  %v6_bcc0 = add i32 %v5_bcc0, %v2_b5f8
  %v7_bcc0 = inttoptr i32 %v6_bcc0 to i32*
  store i32 %v1_bcb4, i32* %v7_bcc0, align 4
  %v0_bcc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bcc4 = load i32, i32* %r2.global-to-local, align 4
  %v4_bcc4 = mul i32 %v1_bcc4, 4
  %v5_bcc4 = add i32 %v4_bcc4, %v0_bcc4
  %v6_bcc4 = inttoptr i32 %v5_bcc4 to i32*
  %v7_bcc4 = load i32, i32* %v6_bcc4, align 4
  store i32 %v7_bcc4, i32* %r0.global-to-local, align 4
  %v1_bcc8 = inttoptr i32 %v7_bcc4 to i8*
  %v2_bcc8 = load i8, i8* %v1_bcc8, align 1
  %tmp107 = urem i8 %v2_bcc8, 16
  %v1_bccc = zext i8 %tmp107 to i32
  %v1_bcd0 = or i32 %v1_bccc, 64
  store i32 %v1_bcd0, i32* %r3.global-to-local, align 4
  %v1_bcd4 = trunc i32 %v1_bcd0 to i8
  store i8 %v1_bcd4, i8* %v1_bcc8, align 1
  store i32 %v3_b7f4, i32* %ip.global-to-local, align 4
  %v0_bcdc = load i32, i32* %r0.global-to-local, align 4
  %v1_bcdc = inttoptr i32 %v0_bcdc to i8*
  %v2_bcdc = load i8, i8* %v1_bcdc, align 1
  %v1_bce8 = and i8 %v2_bcdc, -16
  store i32 %v5_bcec, i32* %r3.global-to-local, align 4
  %v1_bcf0 = or i8 %v1_bce8, 5
  store i32 %v1_b678, i32* %ip.global-to-local, align 4
  store i32 %v1_bce4, i32* %r1.global-to-local, align 4
  store i8 %v1_bcf0, i8* %v1_bcdc, align 1
  %v0_bd00 = load i32, i32* %r1.global-to-local, align 4
  %v1_bd00 = trunc i32 %v0_bd00 to i8
  %v2_bd00 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd00 = add i32 %v2_bd00, 5
  %v4_bd00 = inttoptr i32 %v3_bd00 to i8*
  store i8 %v1_bd00, i8* %v4_bd00, align 1
  store i32 %v4_bd04, i32* %r1.global-to-local, align 4
  store i32 %v4_bd08, i32* %lr.global-to-local, align 4
  %v2_bd0c = load i32, i32* %r0.global-to-local, align 4
  %v3_bd0c = add i32 %v2_bd0c, 1
  %v4_bd0c = inttoptr i32 %v3_bd0c to i8*
  store i8 %v5_b630, i8* %v4_bd0c, align 1
  store i32 %v4_bd10, i32* %r2.global-to-local, align 4
  %v0_bd14 = load i32, i32* %ip.global-to-local, align 4
  %v2_bd14 = icmp eq i32 %v0_bd14, 0
  store i1 %v2_bd14, i1* %cpsr_z.global-to-local, align 1
  %v0_bd18 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd18 = trunc i32 %v0_bd18 to i8
  %v2_bd18 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd18 = add i32 %v2_bd18, 4
  %v4_bd18 = inttoptr i32 %v3_bd18 to i8*
  store i8 %v1_bd18, i8* %v4_bd18, align 1
  %v0_bd1c = load i32, i32* %r0.global-to-local, align 4
  %v1_bd1c = add i32 %v0_bd1c, 20
  store i32 %v1_bd1c, i32* %r3.global-to-local, align 4
  %v0_bd20 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd20 = trunc i32 %v0_bd20 to i8
  %v3_bd20 = add i32 %v0_bd1c, 8
  %v4_bd20 = inttoptr i32 %v3_bd20 to i8*
  store i8 %v1_bd20, i8* %v4_bd20, align 1
  %v0_bd24 = load i32, i32* %r3.global-to-local, align 4
  %v0_bd28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd28, label %.thread8, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_bc24
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bd2c = load i32, i32* %r0.global-to-local, align 4
  %v4_bd2c = add i32 %v3_bd2c, 6
  %v5_bd2c = inttoptr i32 %v4_bd2c to i8*
  store i8 64, i8* %v5_bd2c, align 1
  %v0_bd30.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd30.pr.pr, label %.thread8, label %bb91

bb91:                                             ; preds = %.thread7
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_bc24, %.thread7, %bb91
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bd38 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd38 = add i32 %v2_bd38, 9
  %v4_bd38 = inttoptr i32 %v3_bd38 to i8*
  store i8 6, i8* %v4_bd38, align 1
  %v0_bd3c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd3c, label %bb93, label %bb92

bb92:                                             ; preds = %.thread8
  %v1_bd3c = load i32, i32* %r2.global-to-local, align 4
  %v2_bd3c = trunc i32 %v1_bd3c to i8
  %v3_bd3c = load i32, i32* %r0.global-to-local, align 4
  %v4_bd3c = add i32 %v3_bd3c, 7
  %v5_bd3c = inttoptr i32 %v4_bd3c to i8*
  store i8 %v2_bd3c, i8* %v5_bd3c, align 1
  br label %bb93

bb93:                                             ; preds = %.thread8, %bb92
  %v2_bd44 = load i32, i32* @global_var_1dd3c.81, align 4
  store i32 %v2_bd44, i32* %r3.global-to-local, align 4
  %v1_bd48 = load i32, i32* %r0.global-to-local, align 4
  %v2_bd48 = add i32 %v1_bd48, 12
  %v3_bd48 = inttoptr i32 %v2_bd48 to i32*
  store i32 %v2_bd44, i32* %v3_bd48, align 4
  %v3_bd4c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd4c, i32* %r2.global-to-local, align 4
  store i32 %v2_b5e8, i32* %ip.global-to-local, align 4
  %v4_bd54 = mul i32 %v3_bd4c, 16
  %v5_bd54 = add i32 %v4_bd54, %v2_b5e8
  %v6_bd54 = inttoptr i32 %v5_bd54 to i32*
  %v7_bd54 = load i32, i32* %v6_bd54, align 4
  store i32 %v7_bd54, i32* %r3.global-to-local, align 4
  %v0_bd58 = load i32, i32* %lr.global-to-local, align 4
  %v1_bd58 = trunc i32 %v0_bd58 to i8
  %v2_bd58 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd58 = add i32 %v2_bd58, 3
  %v4_bd58 = inttoptr i32 %v3_bd58 to i8*
  store i8 %v1_bd58, i8* %v4_bd58, align 1
  %v0_bd5c = load i32, i32* @fp, align 4
  %v1_bd5c = trunc i32 %v0_bd5c to i8
  %v2_bd5c = load i32, i32* %r0.global-to-local, align 4
  %v3_bd5c = add i32 %v2_bd5c, 2
  %v4_bd5c = inttoptr i32 %v3_bd5c to i8*
  store i8 %v1_bd5c, i8* %v4_bd5c, align 1
  %v0_bd60 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd60 = load i32, i32* %r0.global-to-local, align 4
  %v2_bd60 = add i32 %v1_bd60, 16
  %v3_bd60 = inttoptr i32 %v2_bd60 to i32*
  store i32 %v0_bd60, i32* %v3_bd60, align 4
  %v0_bd64 = load i32, i32* %r2.global-to-local, align 4
  %v3_bd64 = mul i32 %v0_bd64, 16
  %v1_bd68 = load i32, i32* %ip.global-to-local, align 4
  %v2_bd68 = add i32 %v1_bd68, %v3_bd64
  store i32 %v2_bd68, i32* %r2.global-to-local, align 4
  %v1_bd6c = add i32 %v2_bd68, 13
  %v2_bd6c = inttoptr i32 %v1_bd6c to i8*
  %v3_bd6c = load i8, i8* %v2_bd6c, align 1
  %v4_bd6c = zext i8 %v3_bd6c to i32
  store i32 %v4_bd6c, i32* %r1.global-to-local, align 4
  %v1_bd70 = add i32 %v2_bd68, 12
  %v2_bd70 = inttoptr i32 %v1_bd70 to i8*
  %v3_bd70 = load i8, i8* %v2_bd70, align 1
  %v4_bd70 = zext i8 %v3_bd70 to i32
  store i32 %v0_bd24, i32* %lr.global-to-local, align 4
  %v4_bd78 = mul nuw nsw i32 %v4_bd6c, 256
  %v5_bd78 = or i32 %v4_bd70, %v4_bd78
  store i32 %v5_bd78, i32* %r3.global-to-local, align 4
  %v2_bd7c = load i32, i32* %r0.global-to-local, align 4
  %v3_bd7c = add i32 %v2_bd7c, 20
  %v4_bd7c = inttoptr i32 %v3_bd7c to i8*
  store i8 %v3_bd70, i8* %v4_bd7c, align 1
  %v0_bd80 = load i32, i32* %r3.global-to-local, align 4
  %v3_bd80 = sdiv i32 %v0_bd80, 256
  store i32 %v3_bd80, i32* %r3.global-to-local, align 4
  %v1_bd84 = trunc i32 %v3_bd80 to i8
  %v2_bd84 = load i32, i32* %lr.global-to-local, align 4
  %v3_bd84 = add i32 %v2_bd84, 1
  %v4_bd84 = inttoptr i32 %v3_bd84 to i8*
  store i8 %v1_bd84, i8* %v4_bd84, align 1
  %v0_bd88 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd88 = add i32 %v0_bd88, 8
  %v2_bd88 = inttoptr i32 %v1_bd88 to i32*
  %v3_bd88 = load i32, i32* %v2_bd88, align 4
  store i32 %v3_bd88, i32* %r1.global-to-local, align 4
  %v0_bd8c = load i32, i32* %lr.global-to-local, align 4
  %v1_bd8c = add i32 %v0_bd8c, 13
  %v2_bd8c = inttoptr i32 %v1_bd8c to i8*
  %v3_bd8c = load i8, i8* %v2_bd8c, align 1
  %v4_bd8c = zext i8 %v3_bd8c to i32
  store i32 %v4_bd8c, i32* %r3.global-to-local, align 4
  %v1_bd90 = add i32 %v0_bd88, 15
  %v2_bd90 = inttoptr i32 %v1_bd90 to i8*
  %v3_bd90 = load i8, i8* %v2_bd90, align 1
  %v4_bd90 = zext i8 %v3_bd90 to i32
  store i32 %v4_bd90, i32* %ip.global-to-local, align 4
  %v0_bd94 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd94 = add i32 %v0_bd94, 40
  store i32 %v1_bd94, i32* @r4, align 4
  %v1_bd98 = add i32 %v0_bd88, 14
  %v2_bd98 = inttoptr i32 %v1_bd98 to i8*
  %v3_bd98 = load i8, i8* %v2_bd98, align 1
  %v4_bd98 = zext i8 %v3_bd98 to i32
  store i32 %v4_bd98, i32* %r0.global-to-local, align 4
  %v2_bd9c = add i32 %v0_bd8c, 4
  %v3_bd9c = inttoptr i32 %v2_bd9c to i32*
  store i32 %v3_bd88, i32* %v3_bd9c, align 4
  store i32 %v0_bd24, i32* %r1.global-to-local, align 4
  %v0_bda4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bda4 = or i32 %v0_bda4, 1
  store i32 %v1_bda4, i32* %r3.global-to-local, align 4
  %v0_bda8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bda8 = add i32 %v0_bda8, 4
  %v2_bda8 = inttoptr i32 %v1_bda8 to i32*
  %v3_bda8 = load i32, i32* %v2_bda8, align 4
  store i32 %v3_bda8, i32* %lr.global-to-local, align 4
  %v1_bdac = trunc i32 %v1_bda4 to i8
  %v3_bdac = add i32 %v0_bd24, 13
  %v4_bdac = inttoptr i32 %v3_bdac to i8*
  store i8 %v1_bdac, i8* %v4_bdac, align 1
  %v0_bdb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_bdb0 = add i32 %v0_bdb0, 12
  %v2_bdb0 = inttoptr i32 %v1_bdb0 to i8*
  %v3_bdb0 = load i8, i8* %v2_bdb0, align 1
  %v4_bdb0 = zext i8 %v3_bdb0 to i32
  store i32 %v4_bdb0, i32* %r2.global-to-local, align 4
  %v1_bdb4 = add i32 %v0_bdb0, 13
  %v2_bdb4 = inttoptr i32 %v1_bdb4 to i8*
  %v3_bdb4 = load i8, i8* %v2_bdb4, align 1
  %v4_bdb4 = zext i8 %v3_bdb4 to i32
  %v0_bdb8 = load i32, i32* %r0.global-to-local, align 4
  %v1_bdb8 = load i32, i32* %ip.global-to-local, align 4
  %v4_bdb8 = mul i32 %v1_bdb8, 256
  %v5_bdb8 = or i32 %v4_bdb8, %v0_bdb8
  store i32 %v5_bdb8, i32* %r0.global-to-local, align 4
  %tmp108 = urem i8 %v3_bdb0, 16
  %v1_bdbc = zext i8 %tmp108 to i32
  store i32 %v0_bd24, i32* %ip.global-to-local, align 4
  %v3_bdc4 = sdiv i32 %v5_bdb8, 256
  store i32 %v3_bdc4, i32* %r1.global-to-local, align 4
  %v1_bdc8 = or i32 %v1_bdbc, 128
  store i32 %v1_bdc8, i32* %r2.global-to-local, align 4
  %v1_bdcc = or i32 %v4_bdb4, 16
  store i32 %v1_bdcc, i32* %r3.global-to-local, align 4
  %v1_bdd0 = trunc i32 %v3_bdc4 to i8
  %v3_bdd0 = add i32 %v0_bd24, 3
  %v4_bdd0 = inttoptr i32 %v3_bdd0 to i8*
  store i8 %v1_bdd0, i8* %v4_bdd0, align 1
  %v0_bdd4 = load i32, i32* %lr.global-to-local, align 4
  %v1_bdd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bdd4 = add i32 %v1_bdd4, 8
  %v3_bdd4 = inttoptr i32 %v2_bdd4 to i32*
  store i32 %v0_bdd4, i32* %v3_bdd4, align 4
  %v0_bdd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bdd8 = trunc i32 %v0_bdd8 to i8
  %v2_bdd8 = load i32, i32* %ip.global-to-local, align 4
  %v3_bdd8 = add i32 %v2_bdd8, 12
  %v4_bdd8 = inttoptr i32 %v3_bdd8 to i8*
  store i8 %v1_bdd8, i8* %v4_bdd8, align 1
  %v0_bddc = load i32, i32* %r3.global-to-local, align 4
  %v1_bddc = trunc i32 %v0_bddc to i8
  %v2_bddc = load i32, i32* %ip.global-to-local, align 4
  %v3_bddc = add i32 %v2_bddc, 13
  %v4_bddc = inttoptr i32 %v3_bddc to i8*
  store i8 %v1_bddc, i8* %v4_bddc, align 1
  %v0_bde0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bde0 = trunc i32 %v0_bde0 to i8
  %v2_bde0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bde0 = add i32 %v2_bde0, 2
  %v4_bde0 = inttoptr i32 %v3_bde0 to i8*
  store i8 %v1_bde0, i8* %v4_bde0, align 1
  %v0_bde4 = call i32 @function_f8c4()
  %v1_bde4 = trunc i32 %v0_bde4 to i8
  store i32 %v0_bde4, i32* %r0.global-to-local, align 4
  store i32 %v0_bd24, i32* %lr.global-to-local, align 4
  store i32 %v1_b6b0, i32* %r1.global-to-local, align 4
  %v3_bdf0 = load i8, i8* %v4_bdac, align 1
  %v4_bdf0 = zext i8 %v3_bdf0 to i32
  store i32 %v1_bdf4, i32* %r2.global-to-local, align 4
  %v1_bdf8 = and i32 %v4_bdf0, 223
  %v5_bdfc = or i32 %v1_bdf8, %v4_bdfc
  store i32 %v5_bdfc, i32* %r3.global-to-local, align 4
  %v1_be00 = trunc i32 %v5_bdfc to i8
  store i8 %v1_be00, i8* %v4_bdac, align 1
  store i32 %v1_b6d0, i32* %ip.global-to-local, align 4
  %v0_be08 = load i32, i32* %lr.global-to-local, align 4
  %v1_be08 = add i32 %v0_be08, 13
  %v2_be08 = inttoptr i32 %v1_be08 to i8*
  %v3_be08 = load i8, i8* %v2_be08, align 1
  %v4_be08 = zext i8 %v3_be08 to i32
  store i32 %v1_be0c, i32* %r3.global-to-local, align 4
  %v1_be10 = and i32 %v4_be08, 239
  %v5_be14 = or i32 %v1_be10, %v4_be14
  store i32 %v5_be14, i32* %r2.global-to-local, align 4
  %v1_be18 = trunc i32 %v5_be14 to i8
  store i8 %v1_be18, i8* %v2_be08, align 1
  %v0_be1c = load i32, i32* %lr.global-to-local, align 4
  %v1_be1c = add i32 %v0_be1c, 13
  %v2_be1c = inttoptr i32 %v1_be1c to i8*
  %v3_be1c = load i8, i8* %v2_be1c, align 1
  %v4_be1c = zext i8 %v3_be1c to i32
  store i32 %v1_b6f0, i32* %lr.global-to-local, align 4
  store i32 %v0_bd24, i32* %r1.global-to-local, align 4
  store i32 %v1_be28, i32* %r2.global-to-local, align 4
  %v1_be2c = and i32 %v4_be1c, 247
  %v5_be30 = or i32 %v1_be2c, %v4_be30
  store i32 %v5_be30, i32* %r3.global-to-local, align 4
  %v1_be34 = trunc i32 %v5_be30 to i8
  store i8 %v1_be34, i8* %v4_bdac, align 1
  store i32 %v1_b710, i32* %ip.global-to-local, align 4
  %v0_be3c = load i32, i32* %r1.global-to-local, align 4
  %v1_be3c = add i32 %v0_be3c, 13
  %v2_be3c = inttoptr i32 %v1_be3c to i8*
  %v3_be3c = load i8, i8* %v2_be3c, align 1
  %v4_be3c = zext i8 %v3_be3c to i32
  store i32 %v1_be40, i32* %r3.global-to-local, align 4
  %v1_be44 = and i32 %v4_be3c, 251
  %v5_be48 = or i32 %v1_be44, %v4_be48
  store i32 %v5_be48, i32* %r2.global-to-local, align 4
  %v1_be4c = trunc i32 %v5_be48 to i8
  store i8 %v1_be4c, i8* %v2_be3c, align 1
  store i32 %v1_b730, i32* %lr.global-to-local, align 4
  %v0_be54 = load i32, i32* %r1.global-to-local, align 4
  %v1_be54 = add i32 %v0_be54, 13
  %v2_be54 = inttoptr i32 %v1_be54 to i8*
  %v3_be54 = load i8, i8* %v2_be54, align 1
  %v4_be54 = zext i8 %v3_be54 to i32
  store i32 %v1_be58, i32* %r2.global-to-local, align 4
  %v1_be5c = and i32 %v4_be54, 253
  %v4_be60 = or i32 %v1_be5c, %v3_be60
  store i32 %v4_be60, i32* %r3.global-to-local, align 4
  %v1_be64 = trunc i32 %v4_be60 to i8
  store i8 %v1_be64, i8* %v2_be54, align 1
  %v0_be68 = load i32, i32* %r1.global-to-local, align 4
  %v1_be68 = add i32 %v0_be68, 13
  %v2_be68 = inttoptr i32 %v1_be68 to i8*
  %v3_be68 = load i8, i8* %v2_be68, align 1
  %v4_be68 = zext i8 %v3_be68 to i32
  %v1_be70 = and i32 %v4_be68, 254
  %v2_be78 = or i32 %v1_be70, %v1_be74
  store i32 %v2_be78, i32* %r3.global-to-local, align 4
  store i32 %v0_bd24, i32* %r2.global-to-local, align 4
  %v4_be80 = sdiv i32 %v0_bde4, 256
  store i32 %v4_be80, i32* %r1.global-to-local, align 4
  %v1_be84 = trunc i32 %v2_be78 to i8
  store i8 %v1_be84, i8* %v4_bdac, align 1
  %v0_be88 = load i32, i32* %r1.global-to-local, align 4
  %v1_be88 = trunc i32 %v0_be88 to i8
  %v2_be88 = load i32, i32* %r2.global-to-local, align 4
  %v3_be88 = add i32 %v2_be88, 15
  %v4_be88 = inttoptr i32 %v3_be88 to i8*
  store i8 %v1_be88, i8* %v4_be88, align 1
  %v3_be8c = load i32, i32* %r2.global-to-local, align 4
  %v4_be8c = add i32 %v3_be8c, 14
  %v5_be8c = inttoptr i32 %v4_be8c to i8*
  store i8 %v1_bde4, i8* %v5_be8c, align 1
  store i32 %v6_b768, i32* %r1.global-to-local, align 4
  %v0_be94 = load i32, i32* @r4, align 4
  store i32 %v0_be94, i32* %r0.global-to-local, align 4
  %v2_be98 = call i32 @function_f978(i32 %v0_be94, i32 %v6_b768)
  store i32 %v2_be98, i32* %r0.global-to-local, align 4
  store i32 %v6_b768, i32* %ip.global-to-local, align 4
  %v2_bea4 = load i32, i32* @r4, align 4
  %v4_bea4 = add i32 %v2_bea4, %v6_b768
  %v5_bea4 = inttoptr i32 %v4_bea4 to i8*
  store i8 0, i8* %v5_bea4, align 1
  %v3_bea8 = load i32, i32* %stack_var_-40, align 4
  %v1_beb0 = add i32 %v3_bea8, 1
  store i32 %v1_beb0, i32* %r3.global-to-local, align 4
  %v9_beb4 = icmp eq i32 %v1_beb0, %v1_b5bc
  store i1 %v9_beb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_beb0, i32* %stack_var_-40, align 4
  %v5_bebc = icmp slt i32 %v1_beb0, %v1_b5bc
  br i1 %v5_bebc, label %dec_label_pc_b824.outer, label %dec_label_pc_b9e8.preheader

; uselistorder directives
  uselistorder i32 %v1_beb0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bde4, { 0, 2, 1 }
  uselistorder i32 %v3_bdc4, { 1, 0 }
  uselistorder i32 %v3_bd80, { 1, 0 }
  uselistorder i32 %v0_bd24, { 3, 4, 5, 0, 6, 1, 7, 8, 2 }
  uselistorder i32 %v3_bc9c, { 1, 0 }
  uselistorder i32 %v2_bc84, { 1, 0 }
  uselistorder i32 %v3_bc68, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bc2c, { 1, 0 }
  uselistorder i32 %v2_bc10, { 1, 2, 3, 0 }
  uselistorder i32 %v4_bbfc, { 1, 0 }
  uselistorder i32 %v0_bbf8, { 0, 2, 1 }
  uselistorder i32 %v4_bbe8, { 1, 0 }
  uselistorder i32 %v0_bbe4, { 0, 2, 1 }
  uselistorder i32 %v8_bbac, { 1, 2, 0, 3 }
  uselistorder i32 %v0_bb88, { 2, 0, 3, 1 }
  uselistorder i32 %v0_bb48, { 1, 0 }
  uselistorder i32 %v7_bb24, { 1, 0, 2 }
  uselistorder i32 %v1_bb08, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_baa8, { 0, 2, 1 }
  uselistorder i32 %v0_ba90, { 1, 0, 2 }
  uselistorder i32 %v3_ba6c, { 1, 0 }
  uselistorder i32 %v3_ba4c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_ba38, { 0, 2, 1 }
  uselistorder i1 %v3_bb2c, { 1, 0 }
  uselistorder i32 %v1_ba00, { 3, 2, 0, 1 }
  uselistorder i32 %v1_b9d8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b9c0, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b944, { 1, 0 }
  uselistorder i32 %v7_b93c, { 0, 2, 1, 3 }
  uselistorder i32 %v5_b988, { 1, 0 }
  uselistorder i1 %v9_b96c, { 1, 0 }
  uselistorder i32 %v4_b980, { 1, 0 }
  uselistorder i32 %v4_b97c, { 1, 0 }
  uselistorder i32 %v0_bc30, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_b884, { 1, 0, 2 }
  uselistorder i1 %v7_b834, { 1, 0 }
  uselistorder i32 %v3_b830, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-56.0, { 1, 0 }
  uselistorder i32 %stack_var_-336.0.ph, { 4, 5, 2, 3, 0, 1 }
  uselistorder i32 %v1_be58, { 1, 0 }
  uselistorder i32 %v1_be40, { 1, 0 }
  uselistorder i32 %v1_be0c, { 1, 0 }
  uselistorder i32 %v1_bce4, { 1, 0 }
  uselistorder i32 %v1_b8ac, { 1, 0 }
  uselistorder i32 %v5_b984, { 1, 0 }
  uselistorder i32 %v1_be28, { 1, 0 }
  uselistorder i32 %v1_bdf4, { 1, 0 }
  uselistorder i1 %v2_b99c, { 1, 0 }
  uselistorder i32 %v1_b998, { 1, 0 }
  uselistorder i32 %v4_b994, { 2, 0, 1 }
  uselistorder i32 %v4_b978, { 1, 0 }
  uselistorder i32 %v1_b8e4, { 2, 1, 0 }
  uselistorder i1 %v3_bbdc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b814, { 6, 5, 3, 4, 7, 0, 1, 2, 8 }
  uselistorder i32 %v3_b80c, { 1, 0, 2 }
  uselistorder i1 %v2_b7f8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b7f4, { 1, 2, 3, 0 }
  uselistorder i32 %v0_b7f0, { 1, 0, 3, 2 }
  uselistorder i1 %v7_b7e4, { 1, 0 }
  uselistorder i1 %v7_b7b4, { 1, 0 }
  uselistorder i32 %v3_b7b0, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_b7ac, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_b798, { 2, 1, 0 }
  uselistorder i32 %v1_b788, { 1, 0 }
  uselistorder i32 %v6_b768, { 0, 6, 5, 4, 1, 7, 9, 8, 10, 11, 3, 2 }
  uselistorder i32 %v1_b730, { 1, 0 }
  uselistorder i32 %v1_b710, { 1, 0 }
  uselistorder i32 %v1_b6f0, { 1, 0 }
  uselistorder i32 %v1_b6d0, { 1, 0 }
  uselistorder i32 %v1_b6b0, { 1, 0 }
  uselistorder i32 %v1_b678, { 1, 0 }
  uselistorder i8 %v5_b630, { 1, 0 }
  uselistorder i32 %v6_b610, { 1, 0 }
  uselistorder i32 %v2_b5f8, { 0, 2, 1, 3 }
  uselistorder i32 %v2_b5e8, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 %v1_b5bc, { 11, 12, 6, 7, 8, 5, 9, 10, 13, 4, 2, 3, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 18, 16, 17 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r2.global-to-local, { 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 56, 58, 59, 60, 62, 61, 63, 64, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %r1.global-to-local, { 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 42, 41, 43, 45, 44, 0 }
  uselistorder i32* %r0.global-to-local, { 79, 73, 78, 74, 75, 76, 77, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1, 15, 20, 16, 17, 18, 19, 22, 21, 23, 25, 24, 26, 28, 27, 30, 34, 29, 31, 33, 32, 37, 35, 36, 38, 39, 40, 42, 43, 41, 44, 47, 45, 46, 49, 48, 53, 50, 51, 52, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 0 }
  uselistorder i32* %lr.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4 }
  uselistorder i32* %ip.global-to-local, { 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 14, 15, 16, 17, 18, 20, 21, 0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i1* %cpsr_z.global-to-local, { 22, 23, 25, 24, 26, 1, 2, 4, 5, 3, 6, 7, 8, 9, 10, 11, 13, 0, 14, 15, 12, 16, 17, 18, 19, 20, 21 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %.thread8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bb68, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_bb3c, { 1, 0 }
  uselistorder label %dec_label_pc_ba28, { 1, 0 }
  uselistorder label %dec_label_pc_b9e8, { 1, 0 }
  uselistorder label %dec_label_pc_b90c, { 2, 1, 3, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_b840, { 1, 0 }
  uselistorder label %dec_label_pc_b824, { 1, 0 }
}

define i32 @function_bec8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_bec8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_bec8 = load i32, i32* @sb, align 4
  %v24_bec8 = load i32, i32* @fp, align 4
  %v1_becc = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bee8 = urem i32 %arg4, 256
  store i32 %v1_bee8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_bef8 = call i32 @function_135b8(i32 %v1_becc, i32 4)
  %v0_befc = load i32, i32* @r5, align 4
  store i32 %v0_befc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_bf08 = load i32, i32* @r7, align 4
  store i32 %v0_bf08, i32* %r3.global-to-local, align 4
  %v0_bf0c = load i32, i32* @r4, align 4
  %v5_bf10 = inttoptr i32 %v0_befc to i32*
  %v6_bf10 = call i32 @function_829c(i32 %v0_bf0c, i32* %v5_bf10, i32 2, i32 %v0_bf08)
  %v1_bf1c = urem i32 %v6_bf10, 256
  store i32 %v1_bf1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bf28 = load i32, i32* @r5, align 4
  store i32 %v0_bf28, i32* %r1.global-to-local, align 4
  %v0_bf2c = load i32, i32* @r4, align 4
  %v5_bf30 = trunc i32 %v6_bf10 to i8
  %v6_bf34 = inttoptr i32 %v0_bf28 to i32*
  %v7_bf34 = call i32 @function_829c(i32 %v0_bf2c, i32* %v6_bf34, i32 3, i32 65535)
  %v0_bf38 = load i32, i32* @r5, align 4
  store i32 %v0_bf38, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_bf48 = load i32, i32* @r4, align 4
  %v5_bf4c = inttoptr i32 %v0_bf38 to i32*
  %v6_bf4c = call i32 @function_829c(i32 %v0_bf48, i32* %v5_bf4c, i32 4, i32 64)
  %v1_bf54 = urem i32 %v6_bf4c, 256
  store i32 %v1_bf54, i32* %ip.global-to-local, align 4
  %v0_bf58 = load i32, i32* @r5, align 4
  store i32 %v0_bf58, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_bf60 = load i32, i32* @r7, align 4
  store i32 %v0_bf60, i32* %r3.global-to-local, align 4
  %v0_bf64 = load i32, i32* @r4, align 4
  %v5_bf68 = trunc i32 %v6_bf4c to i8
  %v6_bf6c = inttoptr i32 %v0_bf58 to i32*
  %v7_bf6c = call i32 @function_829c(i32 %v0_bf64, i32* %v6_bf6c, i32 5, i32 %v0_bf60)
  %v1_bf78 = urem i32 %v7_bf6c, 256
  store i32 %v1_bf78, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bf84 = load i32, i32* @r5, align 4
  store i32 %v0_bf84, i32* %r1.global-to-local, align 4
  %v0_bf88 = load i32, i32* @r4, align 4
  %v5_bf90 = inttoptr i32 %v0_bf84 to i32*
  %v6_bf90 = call i32 @function_829c(i32 %v0_bf88, i32* %v5_bf90, i32 6, i32 65535)
  %v0_bf98 = load i32, i32* @r5, align 4
  store i32 %v0_bf98, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bf90, i32* %sb.global-to-local, align 4
  %v0_bfa8 = load i32, i32* @r4, align 4
  %v4_bfac = inttoptr i32 %v0_bf98 to i32*
  %v5_bfac = call i32 @function_829c(i32 %v0_bfa8, i32* %v4_bfac, i32 7, i32 65535)
  %v0_bfb8 = load i32, i32* @r5, align 4
  store i32 %v0_bfb8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_bfc4 = load i32, i32* @r4, align 4
  %v5_bfc8 = inttoptr i32 %v0_bfb8 to i32*
  %v6_bfc8 = call i32 @function_829c(i32 %v0_bfc4, i32* %v5_bfc8, i32 16, i32 65535)
  %v0_bfd4 = load i32, i32* @r5, align 4
  store i32 %v0_bfd4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_bfe0 = load i32, i32* @r4, align 4
  %v5_bfe4 = inttoptr i32 %v0_bfd4 to i32*
  %v6_bfe4 = call i32 @function_829c(i32 %v0_bfe0, i32* %v5_bfe4, i32 17, i32 65535)
  %v0_bfe8 = load i32, i32* @r5, align 4
  store i32 %v0_bfe8, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_bff4 = load i32, i32* @r7, align 4
  store i32 %v0_bff4, i32* %r3.global-to-local, align 4
  %v0_bff8 = load i32, i32* @r4, align 4
  %v5_bffc = inttoptr i32 %v0_bfe8 to i32*
  %v6_bffc = call i32 @function_829c(i32 %v0_bff8, i32* %v5_bffc, i32 10, i32 %v0_bff4)
  %v0_c000 = load i32, i32* @r5, align 4
  store i32 %v0_c000, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c010 = load i32, i32* @r4, align 4
  %v5_c014 = inttoptr i32 %v0_c000 to i32*
  %v6_c014 = call i32 @function_829c(i32 %v0_c010, i32* %v5_c014, i32 11, i32 1)
  %v0_c018 = load i32, i32* @r5, align 4
  store i32 %v0_c018, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_c024 = load i32, i32* @r7, align 4
  store i32 %v0_c024, i32* %r3.global-to-local, align 4
  %v0_c028 = load i32, i32* @r4, align 4
  %v5_c02c = inttoptr i32 %v0_c018 to i32*
  %v6_c02c = call i32 @function_829c(i32 %v0_c028, i32* %v5_c02c, i32 12, i32 %v0_c024)
  %v0_c030 = load i32, i32* @r5, align 4
  store i32 %v0_c030, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_c03c = load i32, i32* @r7, align 4
  store i32 %v0_c03c, i32* %r3.global-to-local, align 4
  %v0_c040 = load i32, i32* @r4, align 4
  %v5_c044 = inttoptr i32 %v0_c030 to i32*
  %v6_c044 = call i32 @function_829c(i32 %v0_c040, i32* %v5_c044, i32 13, i32 %v0_c03c)
  %v0_c048 = load i32, i32* @r5, align 4
  store i32 %v0_c048, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_c054 = load i32, i32* @r7, align 4
  store i32 %v0_c054, i32* %r3.global-to-local, align 4
  %v0_c058 = load i32, i32* @r4, align 4
  %v5_c05c = inttoptr i32 %v0_c048 to i32*
  %v6_c05c = call i32 @function_829c(i32 %v0_c058, i32* %v5_c05c, i32 14, i32 %v0_c054)
  %v0_c060 = load i32, i32* @r5, align 4
  store i32 %v0_c060, i32* %r1.global-to-local, align 4
  %v0_c068 = load i32, i32* @r7, align 4
  store i32 %v0_c068, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_c070 = load i32, i32* @r4, align 4
  %v5_c074 = inttoptr i32 %v0_c060 to i32*
  %v6_c074 = call i32 @function_829c(i32 %v0_c070, i32* %v5_c074, i32 15, i32 %v0_c068)
  %v0_c078 = load i32, i32* @r5, align 4
  store i32 %v0_c078, i32* %r1.global-to-local, align 4
  %v0_c07c = load i32, i32* @r7, align 4
  store i32 %v0_c07c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_c074, i32* %fp.global-to-local, align 4
  %v0_c088 = load i32, i32* @r4, align 4
  %v4_c08c = inttoptr i32 %v0_c078 to i32*
  %v5_c08c = call i32 @function_829c(i32 %v0_c088, i32* %v4_c08c, i32 %v0_c07c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c098 = load i32, i32* @r5, align 4
  store i32 %v0_c098, i32* %r1.global-to-local, align 4
  store i32 %v5_c08c, i32* @sl, align 4
  %v0_c0a0 = load i32, i32* @r4, align 4
  %v4_c0a4 = inttoptr i32 %v0_c098 to i32*
  %v5_c0a4 = call i32 @function_829c(i32 %v0_c0a0, i32* %v4_c0a4, i32 1, i32 1)
  %v2_c0b0 = load i32, i32* @global_var_1dd3c.81, align 4
  store i32 %v2_c0b0, i32* %r3.global-to-local, align 4
  %v1_c0b4 = urem i32 %v5_c0a4, 256
  store i32 %v1_c0b4, i32* %ip.global-to-local, align 4
  %v0_c0b8 = load i32, i32* @r5, align 4
  store i32 %v0_c0b8, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_c0c0 = load i32, i32* @r4, align 4
  %v5_c0c8 = inttoptr i32 %v0_c0b8 to i32*
  %v6_c0c8 = call i32 @function_8230(i32 %v0_c0c0, i32* %v5_c0c8, i32 24, i32 %v2_c0b0, i32 %v1_c0b4)
  %v0_c0d0 = load i32, i32* @r7, align 4
  %v1_c0d4 = inttoptr i32 %v0_c0d0 to i32*
  %v2_c0d4 = call i32 @function_12cb0(i32* %v1_c0d4)
  %v1_c0d8 = load i32, i32* @r6, align 4
  %v2_c0d8 = add i32 %v1_c0d8, %v2_c0d4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c0ec = call i32 @function_132cc(i32 2, i32 3, i32 6)
  %v7_c0f0 = icmp eq i32 %v3_c0ec, -1
  store i1 %v7_c0f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0f0, label %dec_label_pc_c670, label %dec_label_pc_c0fc

dec_label_pc_c0fc:                                ; preds = %dec_label_pc_bec8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c104 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c104, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_c10c = load i32, i32* @r7, align 4
  store i32 %v0_c10c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c118 = call i32 @function_1329c(i32 %v3_c0ec, i32 %v0_c10c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_c11c = icmp eq i32 %v6_c118, -1
  store i1 %v7_c11c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c11c, label %dec_label_pc_c678, label %dec_label_pc_c124

dec_label_pc_c124:                                ; preds = %dec_label_pc_c0fc
  store i32 %v1_becc, i32* %r3.global-to-local, align 4
  %v3_c130 = mul i32 %v7_bf34, 65536
  store i32 %v3_c130, i32* @r4, align 4
  %v0_c134 = load i32, i32* %sb.global-to-local, align 4
  %v3_c134 = mul i32 %v0_c134, 65536
  store i32 %v3_c134, i32* %sb.global-to-local, align 4
  %v3_c13c = urem i32 %v7_bf34, 65536
  store i32 %v3_c13c, i32* %ip.global-to-local, align 4
  %v3_c140 = urem i32 %v0_c134, 65536
  store i32 %v3_c140, i32* %r1.global-to-local, align 4
  %v3_c144 = urem i32 %v5_bfac, 65536
  store i32 %v3_c144, i32* %r2.global-to-local, align 4
  %v2_c148 = icmp eq i32 %v1_becc, 0
  store i1 %v2_c148, i1* %cpsr_z.global-to-local, align 1
  %v0_c14c = load i32, i32* @r7, align 4
  store i32 %v0_c14c, i32* %stack_var_-40, align 4
  br i1 %v2_c148, label %dec_label_pc_c3e4.preheader, label %dec_label_pc_c160

dec_label_pc_c160:                                ; preds = %dec_label_pc_c124
  %v0_c170 = load i32, i32* @sl, align 4
  %v1_c178 = urem i32 %v0_c134, 256
  %tmp73 = udiv i32 %v7_bf34, 256
  %v1_c190 = urem i32 %v5_bfac, 256
  store i32 %v1_c190, i32* @lr, align 4
  %tmp74 = mul i32 %v6_bfc8, 256
  %v1_c1a0 = and i32 %tmp74, 65280
  %tmp76 = udiv i32 %v6_bfc8, 256
  %v4_c1a4 = urem i32 %tmp76, 256
  %v5_c1a4 = or i32 %v4_c1a4, %v1_c1a0
  %v1_c1c0 = urem i32 %v6_bffc, 2
  %v1_c1c4 = urem i32 %v6_c014, 2
  %v1_c1c8 = urem i32 %v6_c02c, 2
  %v1_c1cc = urem i32 %v6_c044, 2
  %v1_c170 = mul i32 %v0_c170, 65536
  %tmp93 = add i32 %v1_c170, 2621440
  %v3_c1ec = sdiv i32 %tmp93, 16777216
  %sext12 = mul i32 %tmp73, 16777216
  %v7_c1ec = sdiv i32 %sext12, 16777216
  %v3_c1f0 = mul nuw nsw i32 %v1_c178, 256
  %tmp77 = udiv i32 %v5_bfac, 256
  %v3_c1f4 = urem i32 %tmp77, 256
  %v1_c1f8 = urem i32 %v6_c05c, 2
  store i32 %v1_c1f8, i32* %ip.global-to-local, align 4
  %v1_c1fc = urem i32 %v6_c02c, 256
  store i32 %v1_c1fc, i32* %r1.global-to-local, align 4
  %v3_c200 = ashr i32 %tmp93, 31
  store i32 %v3_c200, i32* %r2.global-to-local, align 4
  %v3_c204 = ashr i32 %sext12, 31
  store i32 %v3_c204, i32* %r3.global-to-local, align 4
  %tmp94 = udiv i32 %v0_c134, 256
  %v4_c208 = urem i32 %tmp94, 256
  %v5_c208 = or i32 %v4_c208, %v3_c1f0
  store i32 %v5_c208, i32* @r4, align 4
  %v0_c20c = load i32, i32* %fp.global-to-local, align 4
  %v1_c20c = urem i32 %v0_c20c, 2
  %v4_c210 = mul nuw nsw i32 %v1_c190, 256
  %v5_c210 = or i32 %v4_c210, %v3_c1f4
  store i32 %v5_c210, i32* @r5, align 4
  %v5_c21c = trunc i32 %v3_c200 to i8
  store i32 %v0_c14c, i32* @r6, align 4
  store i32 %v1_c178, i32* @fp, align 4
  store i32 %v1_c190, i32* @sb, align 4
  %v4_c284 = sext i8 %v5_bf68 to i32
  %tmp = sub nsw i32 0, %v1_c1c0
  %v4_c300 = and i32 %tmp, 32
  %tmp95 = sub nsw i32 0, %v1_c1c4
  %v4_c314 = and i32 %tmp95, 16
  %tmp96 = sub nsw i32 0, %v1_c1c8
  %v4_c328 = and i32 %tmp96, 8
  %tmp97 = sub nsw i32 0, %v1_c1cc
  %v4_c33c = and i32 %tmp97, 4
  %tmp98 = sub nsw i32 0, %v1_c1f8
  %v3_c350 = and i32 %tmp98, 2
  %v2_c3a0 = icmp eq i32 %v1_c1fc, 0
  br label %dec_label_pc_c238

dec_label_pc_c238:                                ; preds = %.thread11, %dec_label_pc_c160
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c244 = call i32 @function_135b8(i32 1510, i32 1)
  store i32 %v2_bef8, i32* %ip.global-to-local, align 4
  %v3_c24c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c24c, i32* %r3.global-to-local, align 4
  %v2_c250 = load i32, i32* @r6, align 4
  %v5_c250 = mul i32 %v2_c250, 4
  %v6_c250 = add i32 %v5_c250, %v2_bef8
  %v7_c250 = inttoptr i32 %v6_c250 to i32*
  store i32 %v2_c244, i32* %v7_c250, align 4
  %v0_c254 = load i32, i32* %ip.global-to-local, align 4
  %v1_c254 = load i32, i32* %r3.global-to-local, align 4
  %v4_c254 = mul i32 %v1_c254, 4
  %v5_c254 = add i32 %v4_c254, %v0_c254
  %v6_c254 = inttoptr i32 %v5_c254 to i32*
  %v7_c254 = load i32, i32* %v6_c254, align 4
  store i32 %v7_c254, i32* %r1.global-to-local, align 4
  %v1_c258 = inttoptr i32 %v7_c254 to i8*
  %v2_c258 = load i8, i8* %v1_c258, align 1
  %tmp99 = urem i8 %v2_c258, 16
  %v1_c25c = zext i8 %tmp99 to i32
  %v1_c260 = or i32 %v1_c25c, 64
  store i32 %v1_c260, i32* %r2.global-to-local, align 4
  %v1_c264 = trunc i32 %v1_c260 to i8
  store i8 %v1_c264, i8* %v1_c258, align 1
  %v0_c268 = load i32, i32* %r1.global-to-local, align 4
  %v1_c268 = inttoptr i32 %v0_c268 to i8*
  %v2_c268 = load i8, i8* %v1_c268, align 1
  %v1_c26c = and i8 %v2_c268, -16
  %v1_c270 = or i8 %v1_c26c, 5
  store i32 %v1_bf78, i32* %r2.global-to-local, align 4
  store i8 %v1_c270, i8* %v1_c268, align 1
  %v2_c280 = load i32, i32* %r1.global-to-local, align 4
  %v3_c280 = add i32 %v2_c280, 1
  %v4_c280 = inttoptr i32 %v3_c280 to i8*
  store i8 %v5_bf30, i8* %v4_c280, align 1
  store i32 %v4_c284, i32* %ip.global-to-local, align 4
  %v2_c288 = load i32, i32* %r1.global-to-local, align 4
  %v3_c288 = add i32 %v2_c288, 8
  %v4_c288 = inttoptr i32 %v3_c288 to i8*
  store i8 %v5_bf68, i8* %v4_c288, align 1
  %v0_c28c = load i32, i32* %r2.global-to-local, align 4
  %v2_c28c = icmp eq i32 %v0_c28c, 0
  store i1 %v2_c28c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c200, i32* %r3.global-to-local, align 4
  store i32 %v3_c1ec, i32* %r2.global-to-local, align 4
  %v2_c298 = load i32, i32* %r1.global-to-local, align 4
  %v3_c298 = add i32 %v2_c298, 3
  %v4_c298 = inttoptr i32 %v3_c298 to i8*
  store i8 %v5_c21c, i8* %v4_c298, align 1
  %v0_c29c = load i32, i32* %r2.global-to-local, align 4
  %v1_c29c = trunc i32 %v0_c29c to i8
  %v2_c29c = load i32, i32* %r1.global-to-local, align 4
  %v3_c29c = add i32 %v2_c29c, 2
  %v4_c29c = inttoptr i32 %v3_c29c to i8*
  store i8 %v1_c29c, i8* %v4_c29c, align 1
  %v0_c2a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2a0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_c238
  store i32 %v3_c204, i32* %r2.global-to-local, align 4
  %extract.t91 = trunc i32 %v3_c204 to i8
  br label %bb78

bb:                                               ; preds = %dec_label_pc_c238
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_c204, i32* %r2.global-to-local, align 4
  %v3_c2a8 = load i32, i32* %r1.global-to-local, align 4
  %v4_c2a8 = add i32 %v3_c2a8, 6
  %v5_c2a8 = inttoptr i32 %v4_c2a8 to i8*
  store i8 64, i8* %v5_c2a8, align 1
  %v0_c2b0.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t92 = trunc i32 %v0_c2b0.pre to i8
  br label %bb78

bb78:                                             ; preds = %.thread, %bb
  %v3_c204.sink.off0 = phi i8 [ %extract.t91, %.thread ], [ %extract.t92, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c2b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2b0 = add i32 %v2_c2b0, 5
  %v4_c2b0 = inttoptr i32 %v3_c2b0 to i8*
  store i8 %v3_c204.sink.off0, i8* %v4_c2b0, align 1
  store i32 %v7_c1ec, i32* %ip.global-to-local, align 4
  %v0_c2b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2b8, label %bb80, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %bb78, %bb79
  %v0_c2bc = load i32, i32* %r3.global-to-local, align 4
  %v1_c2bc = trunc i32 %v0_c2bc to i8
  %v2_c2bc = load i32, i32* %r1.global-to-local, align 4
  %v3_c2bc = add i32 %v2_c2bc, 9
  %v4_c2bc = inttoptr i32 %v3_c2bc to i8*
  store i8 %v1_c2bc, i8* %v4_c2bc, align 1
  %v0_c2c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2c0, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_c2c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_c2c0 = trunc i32 %v1_c2c0 to i8
  %v3_c2c0 = load i32, i32* %r1.global-to-local, align 4
  %v4_c2c0 = add i32 %v3_c2c0, 7
  %v5_c2c0 = inttoptr i32 %v4_c2c0 to i8*
  store i8 %v2_c2c0, i8* %v5_c2c0, align 1
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  %v3_c2c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2c4, i32* %r2.global-to-local, align 4
  %v0_c2c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_c2c8 = trunc i32 %v0_c2c8 to i8
  %v2_c2c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2c8 = add i32 %v2_c2c8, 4
  %v4_c2c8 = inttoptr i32 %v3_c2c8 to i8*
  store i8 %v1_c2c8, i8* %v4_c2c8, align 1
  store i32 %v6_c0c8, i32* %ip.global-to-local, align 4
  %v0_c2d0 = load i32, i32* %r2.global-to-local, align 4
  %v3_c2d0 = mul i32 %v0_c2d0, 32
  store i32 %v3_c2d0, i32* %r3.global-to-local, align 4
  %v1_c2d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_c2d4 = add i32 %v1_c2d4, 12
  %v3_c2d4 = inttoptr i32 %v2_c2d4 to i32*
  store i32 %v6_c0c8, i32* %v3_c2d4, align 4
  %v0_c2d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c2d8 = load i32, i32* %r2.global-to-local, align 4
  %tmp100 = mul i32 %v1_c2d8, -8
  %v5_c2d8 = add i32 %v0_c2d8, %tmp100
  %v1_c2dc = load i32, i32* @r8, align 4
  %v2_c2dc = add i32 %v1_c2dc, %v5_c2d8
  store i32 %v2_c2dc, i32* %r3.global-to-local, align 4
  %v1_c2e0 = add i32 %v2_c2dc, 16
  %v2_c2e0 = inttoptr i32 %v1_c2e0 to i32*
  %v3_c2e0 = load i32, i32* %v2_c2e0, align 4
  store i32 %v3_c2e0, i32* %r2.global-to-local, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  %v1_c2e4 = trunc i32 %v0_c2e4 to i8
  %v2_c2e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2e4 = add i32 %v2_c2e4, 20
  %v4_c2e4 = inttoptr i32 %v3_c2e4 to i8*
  store i8 %v1_c2e4, i8* %v4_c2e4, align 1
  %v0_c2e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c2e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_c2e8 = add i32 %v1_c2e8, 16
  %v3_c2e8 = inttoptr i32 %v2_c2e8 to i32*
  store i32 %v0_c2e8, i32* %v3_c2e8, align 4
  %v0_c2ec = load i32, i32* %r1.global-to-local, align 4
  %v1_c2ec = add i32 %v0_c2ec, 20
  store i32 %v1_c2ec, i32* @r6, align 4
  %v1_c2f0 = add i32 %v0_c2ec, 33
  %v2_c2f0 = inttoptr i32 %v1_c2f0 to i8*
  %v3_c2f0 = load i8, i8* %v2_c2f0, align 1
  %v4_c2f0 = zext i8 %v3_c2f0 to i32
  %v1_c2f4 = add i32 %v0_c2ec, 40
  store i32 %v1_c2f4, i32* @r7, align 4
  store i32 %v1_c1c0, i32* %r1.global-to-local, align 4
  %v1_c2fc = and i32 %v4_c2f0, 223
  %v5_c300 = or i32 %v1_c2fc, %v4_c300
  store i32 %v5_c300, i32* %r3.global-to-local, align 4
  %v1_c304 = trunc i32 %v5_c300 to i8
  store i8 %v1_c304, i8* %v2_c2f0, align 1
  %v0_c308 = load i32, i32* @r6, align 4
  %v1_c308 = add i32 %v0_c308, 13
  %v2_c308 = inttoptr i32 %v1_c308 to i8*
  %v3_c308 = load i8, i8* %v2_c308, align 1
  %v4_c308 = zext i8 %v3_c308 to i32
  store i32 %v1_c1c4, i32* %r3.global-to-local, align 4
  %v1_c310 = and i32 %v4_c308, 239
  %v5_c314 = or i32 %v1_c310, %v4_c314
  store i32 %v5_c314, i32* %r2.global-to-local, align 4
  %v1_c318 = trunc i32 %v5_c314 to i8
  store i8 %v1_c318, i8* %v2_c308, align 1
  %v0_c31c = load i32, i32* @r6, align 4
  %v1_c31c = add i32 %v0_c31c, 13
  %v2_c31c = inttoptr i32 %v1_c31c to i8*
  %v3_c31c = load i8, i8* %v2_c31c, align 1
  %v4_c31c = zext i8 %v3_c31c to i32
  store i32 %v1_c1c8, i32* %ip.global-to-local, align 4
  %v1_c324 = and i32 %v4_c31c, 247
  %v5_c328 = or i32 %v1_c324, %v4_c328
  store i32 %v5_c328, i32* %r3.global-to-local, align 4
  %v1_c32c = trunc i32 %v5_c328 to i8
  store i8 %v1_c32c, i8* %v2_c31c, align 1
  %v0_c330 = load i32, i32* @r6, align 4
  %v1_c330 = add i32 %v0_c330, 13
  %v2_c330 = inttoptr i32 %v1_c330 to i8*
  %v3_c330 = load i8, i8* %v2_c330, align 1
  %v4_c330 = zext i8 %v3_c330 to i32
  store i32 %v1_c1cc, i32* %r1.global-to-local, align 4
  %v1_c338 = and i32 %v4_c330, 251
  %v5_c33c = or i32 %v1_c338, %v4_c33c
  store i32 %v5_c33c, i32* %r2.global-to-local, align 4
  %v1_c340 = trunc i32 %v5_c33c to i8
  store i8 %v1_c340, i8* %v2_c330, align 1
  %v0_c344 = load i32, i32* @r6, align 4
  %v1_c344 = add i32 %v0_c344, 13
  %v2_c344 = inttoptr i32 %v1_c344 to i8*
  %v3_c344 = load i8, i8* %v2_c344, align 1
  %v4_c344 = zext i8 %v3_c344 to i32
  store i32 %v1_c1f8, i32* %r2.global-to-local, align 4
  %v1_c34c = and i32 %v4_c344, 253
  %v4_c350 = or i32 %v1_c34c, %v3_c350
  store i32 %v4_c350, i32* %r3.global-to-local, align 4
  %v1_c354 = trunc i32 %v4_c350 to i8
  store i8 %v1_c354, i8* %v2_c344, align 1
  %v0_c358 = load i32, i32* @r6, align 4
  %v1_c358 = add i32 %v0_c358, 12
  %v2_c358 = inttoptr i32 %v1_c358 to i8*
  %v3_c358 = load i8, i8* %v2_c358, align 1
  %v4_c358 = zext i8 %v3_c358 to i32
  store i32 %v4_c358, i32* %r2.global-to-local, align 4
  %v1_c35c = add i32 %v0_c358, 13
  %v2_c35c = inttoptr i32 %v1_c35c to i8*
  %v3_c35c = load i8, i8* %v2_c35c, align 1
  %v4_c35c = zext i8 %v3_c35c to i32
  store i32 %v1_c20c, i32* %ip.global-to-local, align 4
  %tmp101 = urem i8 %v3_c358, 16
  %v1_c364 = zext i8 %tmp101 to i32
  %v1_c368 = and i32 %v4_c35c, 254
  %v2_c36c = or i32 %v1_c368, %v1_c20c
  store i32 %v2_c36c, i32* %r3.global-to-local, align 4
  %v1_c370 = or i32 %v1_c364, 80
  store i32 %v1_c370, i32* %r2.global-to-local, align 4
  %v1_c374 = trunc i32 %v1_c370 to i8
  store i8 %v1_c374, i8* %v2_c358, align 1
  %v0_c378 = load i32, i32* %r3.global-to-local, align 4
  %v1_c378 = trunc i32 %v0_c378 to i8
  %v2_c378 = load i32, i32* @r6, align 4
  %v3_c378 = add i32 %v2_c378, 13
  %v4_c378 = inttoptr i32 %v3_c378 to i8*
  store i8 %v1_c378, i8* %v4_c378, align 1
  store i32 %v5_c1a4, i32* %r1.global-to-local, align 4
  %v0_c380 = load i32, i32* @fp, align 4
  %v1_c380 = trunc i32 %v0_c380 to i8
  %v2_c380 = load i32, i32* @r6, align 4
  %v3_c380 = add i32 %v2_c380, 1
  %v4_c380 = inttoptr i32 %v3_c380 to i8*
  store i8 %v1_c380, i8* %v4_c380, align 1
  %v0_c384 = load i32, i32* %r1.global-to-local, align 4
  %v1_c384 = load i32, i32* @r6, align 4
  %v2_c384 = add i32 %v1_c384, 4
  %v3_c384 = inttoptr i32 %v2_c384 to i32*
  store i32 %v0_c384, i32* %v3_c384, align 4
  %v0_c388 = load i32, i32* @r5, align 4
  %v1_c388 = trunc i32 %v0_c388 to i8
  %v2_c388 = load i32, i32* @r6, align 4
  %v3_c388 = add i32 %v2_c388, 2
  %v4_c388 = inttoptr i32 %v3_c388 to i8*
  store i8 %v1_c388, i8* %v4_c388, align 1
  %v0_c38c = load i32, i32* @sb, align 4
  %v1_c38c = trunc i32 %v0_c38c to i8
  %v2_c38c = load i32, i32* @r6, align 4
  %v3_c38c = add i32 %v2_c38c, 3
  %v4_c38c = inttoptr i32 %v3_c38c to i8*
  store i8 %v1_c38c, i8* %v4_c38c, align 1
  %v0_c390 = call i32 @function_f8c4()
  store i32 %v1_c1fc, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c390, 16777216
  %v1_c398 = sdiv i32 %sext, 16777216
  store i32 %v1_c398, i32* %r2.global-to-local, align 4
  %v3_c39c = ashr i32 %sext, 31
  store i32 %v3_c39c, i32* %r3.global-to-local, align 4
  store i1 %v2_c3a0, i1* %cpsr_z.global-to-local, align 1
  %v1_c3a4 = trunc i32 %v3_c39c to i8
  %v2_c3a4 = load i32, i32* @r6, align 4
  %v3_c3a4 = add i32 %v2_c3a4, 15
  %v4_c3a4 = inttoptr i32 %v3_c3a4 to i8*
  store i8 %v1_c3a4, i8* %v4_c3a4, align 1
  %v0_c3a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3a8, label %.thread11, label %bb83

bb83:                                             ; preds = %bb82
  %v1_c3a8 = load i32, i32* @r6, align 4
  %v2_c3a8 = add i32 %v1_c3a8, 13
  %v3_c3a8 = inttoptr i32 %v2_c3a8 to i8*
  %v4_c3a8 = load i8, i8* %v3_c3a8, align 1
  %v5_c3a8 = zext i8 %v4_c3a8 to i32
  %v2_c3ac = or i32 %v5_c3a8, 8
  store i32 %v2_c3ac, i32* %r3.global-to-local, align 4
  %v2_c3b0 = trunc i32 %v2_c3ac to i8
  store i8 %v2_c3b0, i8* %v3_c3a8, align 1
  br label %.thread11

.thread11:                                        ; preds = %bb82, %bb83
  %v0_c3b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3b4 = trunc i32 %v0_c3b4 to i8
  %v2_c3b4 = load i32, i32* @r6, align 4
  %v3_c3b4 = add i32 %v2_c3b4, 14
  %v4_c3b4 = inttoptr i32 %v3_c3b4 to i8*
  store i8 %v1_c3b4, i8* %v4_c3b4, align 1
  %v0_c3b8 = load i32, i32* @sl, align 4
  store i32 %v0_c3b8, i32* %r1.global-to-local, align 4
  %v0_c3bc = load i32, i32* @r7, align 4
  %v2_c3c0 = call i32 @function_f978(i32 %v0_c3bc, i32 %v0_c3b8)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c3c8 = load i32, i32* @r7, align 4
  %v3_c3c8 = load i32, i32* @sl, align 4
  %v4_c3c8 = add i32 %v3_c3c8, %v2_c3c8
  %v5_c3c8 = inttoptr i32 %v4_c3c8 to i8*
  store i8 0, i8* %v5_c3c8, align 1
  %v3_c3cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3cc, i32* %r2.global-to-local, align 4
  store i32 %v1_becc, i32* %r1.global-to-local, align 4
  %v1_c3d4 = add i32 %v3_c3cc, 1
  store i32 %v1_c3d4, i32* @r6, align 4
  %v9_c3d8 = icmp eq i32 %v1_becc, %v1_c3d4
  store i1 %v9_c3d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c3d4, i32* %stack_var_-40, align 4
  %v8_c3e0 = icmp sgt i32 %v1_becc, %v1_c3d4
  br i1 %v8_c3e0, label %dec_label_pc_c238, label %dec_label_pc_c3e4.preheader

dec_label_pc_c3e4.preheader:                      ; preds = %.thread11, %dec_label_pc_c124
  %v2_c424 = icmp eq i32 %v6_c0c8, -1
  %v7_c424 = icmp eq i32 %v6_c0c8, -1
  %v3_c5bc = icmp eq i32 %v3_c13c, 65535
  %v2_c638 = icmp eq i32 %v1_c0b4, 0
  br label %dec_label_pc_c3e4

dec_label_pc_c3e4:                                ; preds = %dec_label_pc_c3e4.preheader, %dec_label_pc_c65c
  store i32 %v1_becc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_c148, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c148, label %dec_label_pc_c65c, label %dec_label_pc_c3f8

dec_label_pc_c3f8:                                ; preds = %dec_label_pc_c3e4
  %v0_c3f8 = load i32, i32* @sl, align 4
  %v1_c3f8 = add i32 %v0_c3f8, 20
  store i32 %v1_c3f8, i32* @sb, align 4
  %tmp84 = mul i32 %v1_c3f8, 256
  %v1_c404 = and i32 %tmp84, 65280
  store i32 %v1_c404, i32* %r3.global-to-local, align 4
  %tmp85 = udiv i32 %v1_c3f8, 256
  %v4_c408 = urem i32 %tmp85, 256
  %v5_c408 = or i32 %v4_c408, %v1_c404
  store i32 %v5_c408, i32* %r2.global-to-local, align 4
  %v1_c410 = add i32 %v0_c3f8, 40
  store i32 %v1_c410, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c520

dec_label_pc_c420:                                ; preds = %dec_label_pc_c520
  store i32 %v6_c0c8, i32* %r1.global-to-local, align 4
  store i1 %v7_c424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c424, label %dec_label_pc_c5ac, label %dec_label_pc_c42c

dec_label_pc_c42c:                                ; preds = %dec_label_pc_c544, %dec_label_pc_c420
  store i32 %v3_c13c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c5bc, label %dec_label_pc_c5c8, label %dec_label_pc_c440

dec_label_pc_c440:                                ; preds = %dec_label_pc_c5ac.dec_label_pc_c440_crit_edge, %dec_label_pc_c42c
  %v1_c444 = phi i32 [ %v1_c444.pre, %dec_label_pc_c5ac.dec_label_pc_c440_crit_edge ], [ 65535, %dec_label_pc_c42c ]
  store i32 %v3_c140, i32* %r3.global-to-local, align 4
  %v9_c444 = icmp eq i32 %v3_c140, %v1_c444
  store i1 %v9_c444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c444, label %dec_label_pc_c5e4, label %dec_label_pc_c44c

dec_label_pc_c44c:                                ; preds = %dec_label_pc_c5c8.dec_label_pc_c44c_crit_edge, %dec_label_pc_c440
  %v1_c450 = phi i32 [ %v1_c450.pre, %dec_label_pc_c5c8.dec_label_pc_c44c_crit_edge ], [ %v1_c444, %dec_label_pc_c440 ]
  store i32 %v3_c144, i32* %ip.global-to-local, align 4
  %v9_c450 = icmp eq i32 %v3_c144, %v1_c450
  store i1 %v9_c450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c450, label %dec_label_pc_c600, label %dec_label_pc_c458

dec_label_pc_c458:                                ; preds = %dec_label_pc_c5e4.dec_label_pc_c458_crit_edge, %dec_label_pc_c44c
  %v1_c45c = phi i32 [ %v1_c45c.pre, %dec_label_pc_c5e4.dec_label_pc_c458_crit_edge ], [ %v1_c450, %dec_label_pc_c44c ]
  store i32 %v6_bfc8, i32* %r1.global-to-local, align 4
  %v9_c45c = icmp eq i32 %v6_bfc8, %v1_c45c
  store i1 %v9_c45c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c45c, label %dec_label_pc_c61c, label %dec_label_pc_c464

dec_label_pc_c464:                                ; preds = %dec_label_pc_c600.dec_label_pc_c464_crit_edge, %dec_label_pc_c458
  %v1_c468 = phi i32 [ %v1_c468.pre, %dec_label_pc_c600.dec_label_pc_c464_crit_edge ], [ %v1_c45c, %dec_label_pc_c458 ]
  store i32 %v6_bfe4, i32* %r2.global-to-local, align 4
  %v9_c468 = icmp eq i32 %v6_bfe4, %v1_c468
  store i1 %v9_c468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c468, label %dec_label_pc_c630, label %dec_label_pc_c470

dec_label_pc_c470:                                ; preds = %dec_label_pc_c61c, %dec_label_pc_c464
  store i32 %v1_c0b4, i32* %r3.global-to-local, align 4
  store i1 %v2_c638, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c638, label %dec_label_pc_c47c, label %dec_label_pc_c644

dec_label_pc_c47c:                                ; preds = %dec_label_pc_c470, %dec_label_pc_c630, %dec_label_pc_c644
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c480 = load i32, i32* @r7, align 4
  %v1_c480 = trunc i32 %v0_c480 to i8
  %v2_c480 = load i32, i32* @r5, align 4
  %v3_c480 = add i32 %v2_c480, 10
  %v4_c480 = inttoptr i32 %v3_c480 to i8*
  store i8 %v1_c480, i8* %v4_c480, align 1
  %v0_c484 = load i32, i32* @r7, align 4
  %v1_c484 = trunc i32 %v0_c484 to i8
  %v2_c484 = load i32, i32* @r5, align 4
  %v3_c484 = add i32 %v2_c484, 11
  %v4_c484 = inttoptr i32 %v3_c484 to i8*
  store i8 %v1_c484, i8* %v4_c484, align 1
  %v0_c488 = load i32, i32* @r5, align 4
  store i32 %v0_c488, i32* @r0, align 4
  %v2_c48c = call i32 @function_e498(i32 %v0_c488, i32 20)
  %v3_c48c = trunc i32 %v2_c48c to i8
  %v4_c49024 = udiv i32 %v2_c48c, 256
  %v1_c494 = trunc i32 %v4_c49024 to i8
  %v2_c494 = load i32, i32* @r5, align 4
  %v3_c494 = add i32 %v2_c494, 11
  %v4_c494 = inttoptr i32 %v3_c494 to i8*
  store i8 %v1_c494, i8* %v4_c494, align 1
  %v3_c498 = load i32, i32* @r5, align 4
  %v4_c498 = add i32 %v3_c498, 10
  %v5_c498 = inttoptr i32 %v4_c498 to i8*
  store i8 %v3_c48c, i8* %v5_c498, align 1
  %v0_c49c = load i32, i32* @r6, align 4
  store i32 %v0_c49c, i32* @r1, align 4
  store i32 %v5_c408, i32* %r2.global-to-local, align 4
  %v0_c4a4 = load i32, i32* @sb, align 4
  store i32 %v0_c4a4, i32* %r3.global-to-local, align 4
  %v0_c4a8 = load i32, i32* @r7, align 4
  %v1_c4a8 = trunc i32 %v0_c4a8 to i8
  %v3_c4a8 = add i32 %v0_c49c, 16
  %v4_c4a8 = inttoptr i32 %v3_c4a8 to i8*
  store i8 %v1_c4a8, i8* %v4_c4a8, align 1
  %v0_c4ac = load i32, i32* @r7, align 4
  %v1_c4ac = trunc i32 %v0_c4ac to i8
  %v2_c4ac = load i32, i32* @r6, align 4
  %v3_c4ac = add i32 %v2_c4ac, 17
  %v4_c4ac = inttoptr i32 %v3_c4ac to i8*
  store i8 %v1_c4ac, i8* %v4_c4ac, align 1
  %v0_c4b0 = load i32, i32* @r5, align 4
  %v4_c4b4 = call i32 @function_e4f4(i32 %v0_c4b0, i32 %v0_c49c, i32 %v5_c408, i32 %v0_c4a4)
  %v5_c4b4 = trunc i32 %v4_c4b4 to i8
  %v4_c4b825 = udiv i32 %v4_c4b4, 256
  %v1_c4bc = trunc i32 %v4_c4b825 to i8
  %v2_c4bc = load i32, i32* @r6, align 4
  %v3_c4bc = add i32 %v2_c4bc, 17
  %v4_c4bc = inttoptr i32 %v3_c4bc to i8*
  store i8 %v1_c4bc, i8* %v4_c4bc, align 1
  %v3_c4c0 = load i32, i32* @r6, align 4
  %v4_c4c0 = add i32 %v3_c4c0, 16
  %v5_c4c0 = inttoptr i32 %v4_c4c0 to i8*
  store i8 %v5_c4b4, i8* %v5_c4c0, align 1
  %v3_c4c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c4c4, i32* %r3.global-to-local, align 4
  %v0_c4c8 = load i32, i32* @r5, align 4
  %v1_c4c8 = add i32 %v0_c4c8, 20
  %v2_c4c8 = inttoptr i32 %v1_c4c8 to i32*
  %v3_c4c8 = load i32, i32* %v2_c4c8, align 4
  %v3_c4d0 = udiv i32 %v3_c4c8, 65536
  store i32 %v3_c4d0, i32* %r2.global-to-local, align 4
  %v5_c4d4 = mul i32 %v3_c4c4, 24
  %v1_c4d8 = load i32, i32* @r8, align 4
  %v2_c4d8 = add i32 %v1_c4d8, %v5_c4d4
  store i32 %v2_c4d8, i32* %ip.global-to-local, align 4
  %v3_c4dc21 = udiv i32 %v3_c4c8, 16777216
  %v1_c4e0 = trunc i32 %v3_c4dc21 to i8
  %v3_c4e0 = add i32 %v2_c4d8, 3
  %v4_c4e0 = inttoptr i32 %v3_c4e0 to i8*
  store i8 %v1_c4e0, i8* %v4_c4e0, align 1
  %v0_c4e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c4e4 = trunc i32 %v0_c4e4 to i8
  %v2_c4e4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c4e4 = add i32 %v2_c4e4, 2
  %v4_c4e4 = inttoptr i32 %v3_c4e4 to i8*
  store i8 %v1_c4e4, i8* %v4_c4e4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c4ec = load i32, i32* @r5, align 4
  store i32 %v0_c4ec, i32* %r1.global-to-local, align 4
  %v0_c4f4 = load i32, i32* @fp, align 4
  store i32 %v0_c4f4, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c4fc = load i32, i32* %ip.global-to-local, align 4
  %v6_c504 = inttoptr i32 %v0_c4ec to i32*
  %v7_c504 = call i32 @function_13268(i32 %v3_c0ec, i32* %v6_c504, i32 %v0_c4f4, i32 16384, i32 %v0_c4fc, i32 16)
  %v3_c508 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c508, i32* %r3.global-to-local, align 4
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v1_c510 = add i32 %v3_c508, 1
  %v9_c514 = icmp eq i32 %v1_becc, %v1_c510
  store i1 %v9_c514, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c510, i32* %stack_var_-40, align 4
  %v7_c51c = icmp sgt i32 %v1_becc, %v1_c510
  br i1 %v7_c51c, label %dec_label_pc_c520, label %dec_label_pc_c65c

dec_label_pc_c520:                                ; preds = %dec_label_pc_c47c, %dec_label_pc_c3f8
  %v1_c534 = phi i32 [ %v1_c510, %dec_label_pc_c47c ], [ 0, %dec_label_pc_c3f8 ]
  %v5_c524 = mul i32 %v1_c534, 24
  %v1_c528 = load i32, i32* @r8, align 4
  %v2_c528 = add i32 %v1_c528, %v5_c524
  store i32 %v2_c528, i32* %r3.global-to-local, align 4
  store i32 %v2_bef8, i32* %ip.global-to-local, align 4
  %v1_c530 = add i32 %v2_c528, 20
  %v2_c530 = inttoptr i32 %v1_c530 to i8*
  %v3_c530 = load i8, i8* %v2_c530, align 1
  %v4_c530 = zext i8 %v3_c530 to i32
  store i32 %v4_c530, i32* %r2.global-to-local, align 4
  %v4_c534 = mul i32 %v1_c534, 4
  %v5_c534 = add i32 %v4_c534, %v2_bef8
  %v6_c534 = inttoptr i32 %v5_c534 to i32*
  %v7_c534 = load i32, i32* %v6_c534, align 4
  store i32 %v7_c534, i32* @r5, align 4
  %v2_c538 = icmp ugt i8 %v3_c530, 30
  %v7_c538 = icmp eq i8 %v3_c530, 31
  store i1 %v7_c538, i1* %cpsr_z.global-to-local, align 1
  %v1_c53c = add i32 %v7_c534, 20
  store i32 %v1_c53c, i32* @r6, align 4
  %v2_c540 = xor i1 %v7_c538, true
  %v3_c540 = and i1 %v2_c538, %v2_c540
  br i1 %v3_c540, label %dec_label_pc_c420, label %dec_label_pc_c544

dec_label_pc_c544:                                ; preds = %dec_label_pc_c520
  %v1_c544 = add i32 %v2_c528, 16
  %v2_c544 = inttoptr i32 %v1_c544 to i32*
  %v3_c544 = load i32, i32* %v2_c544, align 4
  %v0_c548 = call i32 @function_f8c4()
  %v3_c54c = load i32, i32* %stack_var_-40, align 4
  %v5_c554 = mul i32 %v3_c54c, 24
  %v1_c55c = load i32, i32* @r8, align 4
  %v2_c55c = add i32 %v1_c55c, %v5_c554
  store i32 %v2_c55c, i32* %r1.global-to-local, align 4
  %v1_c560 = and i32 %v3_c544, 65280
  store i32 %v1_c560, i32* %r3.global-to-local, align 4
  %v1_c558 = udiv i32 %v3_c544, 256
  %v3_c564 = and i32 %v1_c558, 65280
  store i32 %v3_c564, i32* %r2.global-to-local, align 4
  %v3_c568 = mul i32 %v3_c544, 16777216
  store i32 %v3_c568, i32* %ip.global-to-local, align 4
  %v1_c56c = add i32 %v2_c55c, 20
  %v2_c56c = inttoptr i32 %v1_c56c to i8*
  %v3_c56c = load i8, i8* %v2_c56c, align 1
  %v4_c56c = zext i8 %v3_c56c to i32
  %v4_c570 = mul nuw nsw i32 %v1_c560, 256
  %v5_c570 = or i32 %v4_c570, %v3_c568
  store i32 %v5_c570, i32* %ip.global-to-local, align 4
  %v2_c578 = call i32 @llvm.bswap.i32(i32 %v3_c544)
  %v7_c57c = lshr i32 %v0_c548, %v4_c56c
  %v8_c57c = add i32 %v7_c57c, %v2_c578
  store i32 %v8_c57c, i32* %r2.global-to-local, align 4
  %v2_c598 = call i32 @llvm.bswap.i32(i32 %v8_c57c)
  store i32 %v2_c598, i32* %r3.global-to-local, align 4
  store i32 %v6_c0c8, i32* %r1.global-to-local, align 4
  store i1 %v7_c424, i1* %cpsr_z.global-to-local, align 1
  %v1_c5a4 = load i32, i32* @r5, align 4
  %v2_c5a4 = add i32 %v1_c5a4, 16
  %v3_c5a4 = inttoptr i32 %v2_c5a4 to i32*
  store i32 %v2_c598, i32* %v3_c5a4, align 4
  br i1 %v2_c424, label %dec_label_pc_c5ac, label %dec_label_pc_c42c

dec_label_pc_c5ac:                                ; preds = %dec_label_pc_c544, %dec_label_pc_c420
  %v0_c5ac = call i32 @function_f8c4()
  store i32 %v3_c13c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c5bc, i1* %cpsr_z.global-to-local, align 1
  %v1_c5c0 = load i32, i32* @r5, align 4
  %v2_c5c0 = add i32 %v1_c5c0, 12
  %v3_c5c0 = inttoptr i32 %v2_c5c0 to i32*
  store i32 %v0_c5ac, i32* %v3_c5c0, align 4
  br i1 %v3_c5bc, label %dec_label_pc_c5c8, label %dec_label_pc_c5ac.dec_label_pc_c440_crit_edge

dec_label_pc_c5ac.dec_label_pc_c440_crit_edge:    ; preds = %dec_label_pc_c5ac
  %v1_c444.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c440

dec_label_pc_c5c8:                                ; preds = %dec_label_pc_c5ac, %dec_label_pc_c42c
  %v0_c5c8 = call i32 @function_f8c4()
  %v1_c5c8 = trunc i32 %v0_c5c8 to i8
  %v4_c5cc26 = udiv i32 %v0_c5c8, 256
  %v1_c5d0 = trunc i32 %v4_c5cc26 to i8
  %v2_c5d0 = load i32, i32* @r5, align 4
  %v3_c5d0 = add i32 %v2_c5d0, 5
  %v4_c5d0 = inttoptr i32 %v3_c5d0 to i8*
  store i8 %v1_c5d0, i8* %v4_c5d0, align 1
  store i32 %v3_c140, i32* %r3.global-to-local, align 4
  %v1_c5d8 = load i32, i32* @r4, align 4
  %v9_c5d8 = icmp eq i32 %v3_c140, %v1_c5d8
  store i1 %v9_c5d8, i1* %cpsr_z.global-to-local, align 1
  %v3_c5dc = load i32, i32* @r5, align 4
  %v4_c5dc = add i32 %v3_c5dc, 4
  %v5_c5dc = inttoptr i32 %v4_c5dc to i8*
  store i8 %v1_c5c8, i8* %v5_c5dc, align 1
  %v0_c5e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5e0, label %dec_label_pc_c5e4, label %dec_label_pc_c5c8.dec_label_pc_c44c_crit_edge

dec_label_pc_c5c8.dec_label_pc_c44c_crit_edge:    ; preds = %dec_label_pc_c5c8
  %v1_c450.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c44c

dec_label_pc_c5e4:                                ; preds = %dec_label_pc_c5c8, %dec_label_pc_c440
  %v0_c5e4 = call i32 @function_f8c4()
  %v1_c5e4 = trunc i32 %v0_c5e4 to i8
  store i32 %v3_c144, i32* %ip.global-to-local, align 4
  %v4_c5ec = sdiv i32 %v0_c5e4, 256
  store i32 %v4_c5ec, i32* %r3.global-to-local, align 4
  %v1_c5f0 = load i32, i32* @r4, align 4
  %v9_c5f0 = icmp eq i32 %v3_c144, %v1_c5f0
  store i1 %v9_c5f0, i1* %cpsr_z.global-to-local, align 1
  %v3_c5f4 = load i32, i32* @r5, align 4
  %v4_c5f4 = add i32 %v3_c5f4, 20
  %v5_c5f4 = inttoptr i32 %v4_c5f4 to i8*
  store i8 %v1_c5e4, i8* %v5_c5f4, align 1
  %v0_c5f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5f8 = trunc i32 %v0_c5f8 to i8
  %v2_c5f8 = load i32, i32* @r6, align 4
  %v3_c5f8 = add i32 %v2_c5f8, 1
  %v4_c5f8 = inttoptr i32 %v3_c5f8 to i8*
  store i8 %v1_c5f8, i8* %v4_c5f8, align 1
  %v0_c5fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5fc, label %dec_label_pc_c600, label %dec_label_pc_c5e4.dec_label_pc_c458_crit_edge

dec_label_pc_c5e4.dec_label_pc_c458_crit_edge:    ; preds = %dec_label_pc_c5e4
  %v1_c45c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c458

dec_label_pc_c600:                                ; preds = %dec_label_pc_c5e4, %dec_label_pc_c44c
  %v0_c600 = call i32 @function_f8c4()
  %v1_c600 = trunc i32 %v0_c600 to i8
  store i32 %v6_bfc8, i32* %r1.global-to-local, align 4
  %v4_c608 = sdiv i32 %v0_c600, 256
  store i32 %v4_c608, i32* %r3.global-to-local, align 4
  %v1_c60c = load i32, i32* @r4, align 4
  %v9_c60c = icmp eq i32 %v6_bfc8, %v1_c60c
  store i1 %v9_c60c, i1* %cpsr_z.global-to-local, align 1
  %v1_c610 = trunc i32 %v4_c608 to i8
  %v2_c610 = load i32, i32* @r6, align 4
  %v3_c610 = add i32 %v2_c610, 3
  %v4_c610 = inttoptr i32 %v3_c610 to i8*
  store i8 %v1_c610, i8* %v4_c610, align 1
  %v3_c614 = load i32, i32* @r6, align 4
  %v4_c614 = add i32 %v3_c614, 2
  %v5_c614 = inttoptr i32 %v4_c614 to i8*
  store i8 %v1_c600, i8* %v5_c614, align 1
  %v0_c618 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c618, label %dec_label_pc_c61c, label %dec_label_pc_c600.dec_label_pc_c464_crit_edge

dec_label_pc_c600.dec_label_pc_c464_crit_edge:    ; preds = %dec_label_pc_c600
  %v1_c468.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c464

dec_label_pc_c61c:                                ; preds = %dec_label_pc_c600, %dec_label_pc_c458
  %v0_c61c = call i32 @function_f8c4()
  store i32 %v6_bfe4, i32* %r2.global-to-local, align 4
  %v1_c624 = load i32, i32* @r4, align 4
  %v9_c624 = icmp eq i32 %v6_bfe4, %v1_c624
  store i1 %v9_c624, i1* %cpsr_z.global-to-local, align 1
  %v1_c628 = load i32, i32* @r6, align 4
  %v2_c628 = add i32 %v1_c628, 4
  %v3_c628 = inttoptr i32 %v2_c628 to i32*
  store i32 %v0_c61c, i32* %v3_c628, align 4
  br i1 %v9_c624, label %dec_label_pc_c630, label %dec_label_pc_c470

dec_label_pc_c630:                                ; preds = %dec_label_pc_c61c, %dec_label_pc_c464
  %v0_c630 = call i32 @function_f8c4()
  store i32 %v1_c0b4, i32* %r3.global-to-local, align 4
  store i1 %v2_c638, i1* %cpsr_z.global-to-local, align 1
  %v1_c63c = load i32, i32* @r6, align 4
  %v2_c63c = add i32 %v1_c63c, 8
  %v3_c63c = inttoptr i32 %v2_c63c to i32*
  store i32 %v0_c630, i32* %v3_c63c, align 4
  br i1 %v2_c638, label %dec_label_pc_c47c, label %dec_label_pc_c644

dec_label_pc_c644:                                ; preds = %dec_label_pc_c470, %dec_label_pc_c630
  %v0_c644 = load i32, i32* @r5, align 4
  %v1_c644 = add i32 %v0_c644, 40
  store i32 %v1_c644, i32* @r4, align 4
  %v0_c64c = load i32, i32* @sl, align 4
  store i32 %v0_c64c, i32* %r1.global-to-local, align 4
  %v2_c650 = call i32 @function_f978(i32 %v1_c644, i32 %v0_c64c)
  %v0_c654 = load i32, i32* @r7, align 4
  %v1_c654 = trunc i32 %v0_c654 to i8
  %v2_c654 = load i32, i32* @r4, align 4
  %v3_c654 = load i32, i32* @sl, align 4
  %v4_c654 = add i32 %v3_c654, %v2_c654
  %v5_c654 = inttoptr i32 %v4_c654 to i8*
  store i8 %v1_c654, i8* %v5_c654, align 1
  br label %dec_label_pc_c47c

dec_label_pc_c65c:                                ; preds = %dec_label_pc_c47c, %dec_label_pc_c3e4
  %v2_c660 = call i32 @function_12cb0(i32* null)
  store i32 %v2_c0d8, i32* %r1.global-to-local, align 4
  %v9_c668 = icmp eq i32 %v2_c0d8, %v2_c660
  store i1 %v9_c668, i1* %cpsr_z.global-to-local, align 1
  %v6_c66c = icmp slt i32 %v2_c0d8, %v2_c660
  br i1 %v6_c66c, label %dec_label_pc_c670, label %dec_label_pc_c3e4

dec_label_pc_c670:                                ; preds = %dec_label_pc_c65c, %dec_label_pc_bec8, %dec_label_pc_c678
  %v29_c674 = phi i32 [ %v3_c0ec, %dec_label_pc_bec8 ], [ %v1_c67c, %dec_label_pc_c678 ], [ %v2_c660, %dec_label_pc_c65c ]
  store i32 %v18_bec8, i32* %sb.global-to-local, align 4
  store i32 %v24_bec8, i32* %fp.global-to-local, align 4
  ret i32 %v29_c674

dec_label_pc_c678:                                ; preds = %dec_label_pc_c0fc
  %v1_c67c = call i32 @function_129e0(i32 %v3_c0ec)
  br label %dec_label_pc_c670

; uselistorder directives
  uselistorder i32 %v4_c608, { 1, 0 }
  uselistorder i32 %v2_c598, { 1, 0 }
  uselistorder i32 %v3_c568, { 1, 0 }
  uselistorder i32 %v3_c544, { 1, 3, 2, 0 }
  uselistorder i32 %v1_c510, { 1, 2, 0, 3 }
  uselistorder i32 %v0_c49c, { 1, 0, 2 }
  uselistorder i32 %v1_c3f8, { 1, 0, 2 }
  uselistorder i1 %v2_c638, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c5bc, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c424, { 2, 1, 0 }
  uselistorder i32 %v1_c3d4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c20c, { 1, 0 }
  uselistorder i32 %v3_c204, { 2, 0, 1, 3 }
  uselistorder i32 %v3_c200, { 0, 2, 1 }
  uselistorder i32 %v1_c1fc, { 1, 2, 0 }
  uselistorder i32 %v1_c1f8, { 2, 0, 1 }
  uselistorder i32 %tmp93, { 1, 0 }
  uselistorder i32 %v1_c1cc, { 1, 0 }
  uselistorder i32 %v1_c1c8, { 1, 0 }
  uselistorder i32 %v1_c1c4, { 1, 0 }
  uselistorder i32 %v1_c1c0, { 1, 0 }
  uselistorder i32 %v1_c190, { 2, 0, 1 }
  uselistorder i32 %v1_c178, { 1, 0 }
  uselistorder i1 %v2_c148, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c13c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c134, { 0, 1, 3, 2 }
  uselistorder i1 %v7_c11c, { 1, 0 }
  uselistorder i1 %v7_c0f0, { 1, 0 }
  uselistorder i32 %v3_c0ec, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_c0d8, { 2, 1, 0 }
  uselistorder i32 %v6_c0c8, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_c0b4, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bfe4, { 3, 2, 1, 0 }
  uselistorder i32 %v6_bfc8, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_bf78, { 1, 0 }
  uselistorder i8 %v5_bf68, { 1, 0 }
  uselistorder i32 %v6_bf4c, { 1, 0 }
  uselistorder i32 %v7_bf34, { 0, 2, 1 }
  uselistorder i32 %v6_bf10, { 1, 0 }
  uselistorder i32 %v2_bef8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_becc, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 18, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 28, 29, 31, 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 27, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_c670, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c644, { 1, 0 }
  uselistorder label %dec_label_pc_c47c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c3e4, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb78, { 1, 0 }
}

define i32 @function_c688(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c688:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c688 = load i32, i32* @r4, align 4
  %v12_c688 = load i32, i32* @r7, align 4
  %v1_c68c = urem i32 %arg2, 256
  store i32 %v1_c68c, i32* %fp.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_c68c, i32* %r0.global-to-local, align 4
  %v1_c6a4 = urem i32 %arg4, 256
  store i32 %v1_c6a4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_c6b4 = call i32 @function_135b8(i32 %v1_c68c, i32 4)
  %v0_c6b8 = load i32, i32* @r5, align 4
  store i32 %v0_c6b8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c6c0 = load i32, i32* @r7, align 4
  store i32 %v0_c6c0, i32* %r3.global-to-local, align 4
  store i32 %v2_c6b4, i32* %sb.global-to-local, align 4
  %v0_c6c8 = load i32, i32* @r4, align 4
  store i32 %v0_c6c8, i32* %r0.global-to-local, align 4
  %v4_c6cc = inttoptr i32 %v0_c6b8 to i32*
  %v5_c6cc = call i32 @function_829c(i32 %v0_c6c8, i32* %v4_c6cc, i32 2, i32 %v0_c6c0)
  %v1_c6d8 = urem i32 %v5_c6cc, 256
  store i32 %v1_c6d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c6e4 = load i32, i32* @r5, align 4
  store i32 %v0_c6e4, i32* %r1.global-to-local, align 4
  %v0_c6e8 = load i32, i32* @r4, align 4
  store i32 %v0_c6e8, i32* %r0.global-to-local, align 4
  %v5_c6ec = trunc i32 %v5_c6cc to i8
  %v6_c6f0 = inttoptr i32 %v0_c6e4 to i32*
  %v7_c6f0 = call i32 @function_829c(i32 %v0_c6e8, i32* %v6_c6f0, i32 3, i32 65535)
  %v0_c6f4 = load i32, i32* @r5, align 4
  store i32 %v0_c6f4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c704 = load i32, i32* @r4, align 4
  store i32 %v0_c704, i32* %r0.global-to-local, align 4
  %v5_c708 = inttoptr i32 %v0_c6f4 to i32*
  %v6_c708 = call i32 @function_829c(i32 %v0_c704, i32* %v5_c708, i32 4, i32 64)
  %v1_c710 = urem i32 %v6_c708, 256
  store i32 %v1_c710, i32* %ip.global-to-local, align 4
  %v0_c714 = load i32, i32* @r5, align 4
  store i32 %v0_c714, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c720 = load i32, i32* @r4, align 4
  store i32 %v0_c720, i32* %r0.global-to-local, align 4
  %v6_c728 = inttoptr i32 %v0_c714 to i32*
  %v7_c728 = call i32 @function_829c(i32 %v0_c720, i32* %v6_c728, i32 5, i32 1)
  %v1_c734 = urem i32 %v7_c728, 256
  store i32 %v1_c734, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c740 = load i32, i32* @r5, align 4
  store i32 %v0_c740, i32* %r1.global-to-local, align 4
  %v0_c744 = load i32, i32* @r4, align 4
  store i32 %v0_c744, i32* %r0.global-to-local, align 4
  %v5_c74c = inttoptr i32 %v0_c740 to i32*
  %v6_c74c = call i32 @function_829c(i32 %v0_c744, i32* %v5_c74c, i32 6, i32 65535)
  %v0_c758 = load i32, i32* @r5, align 4
  store i32 %v0_c758, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c764 = load i32, i32* @r4, align 4
  store i32 %v0_c764, i32* %r0.global-to-local, align 4
  %v5_c768 = inttoptr i32 %v0_c758 to i32*
  %v6_c768 = call i32 @function_829c(i32 %v0_c764, i32* %v5_c768, i32 7, i32 65535)
  %v0_c774 = load i32, i32* @r5, align 4
  store i32 %v0_c774, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c780 = load i32, i32* @r4, align 4
  store i32 %v0_c780, i32* %r0.global-to-local, align 4
  %v5_c784 = inttoptr i32 %v0_c774 to i32*
  %v6_c784 = call i32 @function_829c(i32 %v0_c780, i32* %v5_c784, i32 16, i32 65535)
  %v0_c788 = load i32, i32* @r5, align 4
  store i32 %v0_c788, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_c794 = load i32, i32* @r7, align 4
  store i32 %v0_c794, i32* %r3.global-to-local, align 4
  %v0_c798 = load i32, i32* @r4, align 4
  store i32 %v0_c798, i32* %r0.global-to-local, align 4
  %v5_c79c = inttoptr i32 %v0_c788 to i32*
  %v6_c79c = call i32 @function_829c(i32 %v0_c798, i32* %v5_c79c, i32 17, i32 %v0_c794)
  %v0_c7a0 = load i32, i32* @r5, align 4
  store i32 %v0_c7a0, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_c7ac = load i32, i32* @r7, align 4
  store i32 %v0_c7ac, i32* %r3.global-to-local, align 4
  %v0_c7b0 = load i32, i32* @r4, align 4
  store i32 %v0_c7b0, i32* %r0.global-to-local, align 4
  %v5_c7b4 = inttoptr i32 %v0_c7a0 to i32*
  %v6_c7b4 = call i32 @function_829c(i32 %v0_c7b0, i32* %v5_c7b4, i32 10, i32 %v0_c7ac)
  %v0_c7b8 = load i32, i32* @r5, align 4
  store i32 %v0_c7b8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v0_c7c4 = load i32, i32* @r7, align 4
  store i32 %v0_c7c4, i32* %r3.global-to-local, align 4
  %v0_c7c8 = load i32, i32* @r4, align 4
  store i32 %v0_c7c8, i32* %r0.global-to-local, align 4
  %v5_c7cc = inttoptr i32 %v0_c7b8 to i32*
  %v6_c7cc = call i32 @function_829c(i32 %v0_c7c8, i32* %v5_c7cc, i32 11, i32 %v0_c7c4)
  %v0_c7d0 = load i32, i32* @r5, align 4
  store i32 %v0_c7d0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_c7dc = load i32, i32* @r7, align 4
  store i32 %v0_c7dc, i32* %r3.global-to-local, align 4
  %v0_c7e0 = load i32, i32* @r4, align 4
  store i32 %v0_c7e0, i32* %r0.global-to-local, align 4
  %v5_c7e4 = inttoptr i32 %v0_c7d0 to i32*
  %v6_c7e4 = call i32 @function_829c(i32 %v0_c7e0, i32* %v5_c7e4, i32 12, i32 %v0_c7dc)
  %v0_c7e8 = load i32, i32* @r5, align 4
  store i32 %v0_c7e8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_c7f4 = load i32, i32* @r7, align 4
  store i32 %v0_c7f4, i32* %r3.global-to-local, align 4
  %v0_c7f8 = load i32, i32* @r4, align 4
  store i32 %v0_c7f8, i32* %r0.global-to-local, align 4
  %v5_c7fc = inttoptr i32 %v0_c7e8 to i32*
  %v6_c7fc = call i32 @function_829c(i32 %v0_c7f8, i32* %v5_c7fc, i32 13, i32 %v0_c7f4)
  %v0_c800 = load i32, i32* @r5, align 4
  store i32 %v0_c800, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c810 = load i32, i32* @r4, align 4
  store i32 %v0_c810, i32* %r0.global-to-local, align 4
  %v5_c814 = inttoptr i32 %v0_c800 to i32*
  %v6_c814 = call i32 @function_829c(i32 %v0_c810, i32* %v5_c814, i32 14, i32 1)
  %v0_c818 = load i32, i32* @r5, align 4
  store i32 %v0_c818, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_c824 = load i32, i32* @r7, align 4
  store i32 %v0_c824, i32* %r3.global-to-local, align 4
  %v0_c828 = load i32, i32* @r4, align 4
  store i32 %v0_c828, i32* %r0.global-to-local, align 4
  %v5_c82c = inttoptr i32 %v0_c818 to i32*
  %v6_c82c = call i32 @function_829c(i32 %v0_c828, i32* %v5_c82c, i32 15, i32 %v0_c824)
  %v0_c834 = load i32, i32* @r5, align 4
  store i32 %v0_c834, i32* %r1.global-to-local, align 4
  %v2_c838 = load i32, i32* @global_var_1dd3c.81, align 4
  store i32 %v2_c838, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_c844 = load i32, i32* @r4, align 4
  store i32 %v0_c844, i32* %r0.global-to-local, align 4
  %v5_c848 = inttoptr i32 %v0_c834 to i32*
  %v6_c848 = call i32 @function_8230(i32 %v0_c844, i32* %v5_c848, i32 24, i32 %v2_c838, i32 %v6_c82c)
  %v0_c850 = load i32, i32* @r7, align 4
  store i32 %v0_c850, i32* %r0.global-to-local, align 4
  %v1_c854 = inttoptr i32 %v0_c850 to i32*
  %v2_c854 = call i32 @function_12cb0(i32* %v1_c854)
  %v1_c858 = load i32, i32* @r6, align 4
  %v2_c858 = add i32 %v1_c858, %v2_c854
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c86c = call i32 @function_132cc(i32 2, i32 3, i32 6)
  store i32 %v3_c86c, i32* %r0.global-to-local, align 4
  %v7_c870 = icmp eq i32 %v3_c86c, -1
  store i1 %v7_c870, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c86c, i32* %sl.global-to-local, align 4
  br i1 %v7_c870, label %dec_label_pc_cdec, label %dec_label_pc_c87c

dec_label_pc_c87c:                                ; preds = %dec_label_pc_c688
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c884 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c884, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_c88c = load i32, i32* @r7, align 4
  store i32 %v0_c88c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c898 = call i32 @function_1329c(i32 %v3_c86c, i32 %v0_c88c, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c898, i32* %r0.global-to-local, align 4
  %v7_c89c = icmp eq i32 %v6_c898, -1
  store i1 %v7_c89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c89c, label %dec_label_pc_cdf4, label %dec_label_pc_c8a4

dec_label_pc_c8a4:                                ; preds = %dec_label_pc_c87c
  %v3_c8b8 = mul i32 %v6_c74c, 65536
  store i32 %v3_c8b8, i32* @r4, align 4
  %v3_c8bc = urem i32 %v7_c6f0, 65536
  store i32 %v3_c8bc, i32* %ip.global-to-local, align 4
  %v3_c8c0 = urem i32 %v6_c74c, 65536
  store i32 %v3_c8c0, i32* %r0.global-to-local, align 4
  %v3_c8c4 = urem i32 %v6_c768, 65536
  store i32 %v3_c8c4, i32* %r2.global-to-local, align 4
  %v1_c8c8 = urem i32 %v6_c7b4, 256
  store i32 %v1_c8c8, i32* %r3.global-to-local, align 4
  %v0_c8cc = load i32, i32* %fp.global-to-local, align 4
  %v2_c8cc = icmp eq i32 %v0_c8cc, 0
  store i1 %v2_c8cc, i1* %cpsr_z.global-to-local, align 1
  %v0_c8d0 = load i32, i32* @r7, align 4
  store i32 %v0_c8d0, i32* %stack_var_-40, align 4
  %tmp69 = icmp slt i32 %v0_c8cc, 1
  br i1 %tmp69, label %dec_label_pc_cb8c.preheader, label %dec_label_pc_c8e8

dec_label_pc_c8e8:                                ; preds = %dec_label_pc_c8a4
  %v1_c8f0 = urem i32 %v7_c6f0, 256
  %v1_c904 = urem i32 %v6_c768, 256
  %tmp70 = mul i32 %v6_c784, 256
  %v1_c90c = and i32 %tmp70, 65280
  %tmp71 = udiv i32 %v6_c784, 256
  %v4_c910 = urem i32 %tmp71, 256
  %v5_c910 = or i32 %v4_c910, %v1_c90c
  %v3_c914 = mul nuw nsw i32 %v1_c904, 256
  %tmp72 = udiv i32 %v6_c768, 256
  %v4_c920 = urem i32 %tmp72, 256
  %v5_c920 = or i32 %v4_c920, %v3_c914
  store i32 %v5_c920, i32* @r6, align 4
  %v1_c900 = mul i32 %v6_c74c, 256
  %v3_c924 = and i32 %v1_c900, 65280
  store i32 %v3_c924, i32* %r1.global-to-local, align 4
  %v3_c930 = mul nuw nsw i32 %v1_c8f0, 256
  %tmp73 = udiv i32 %v6_c74c, 256
  %v1_c938 = urem i32 %v6_c7b4, 2
  %tmp74 = udiv i32 %v7_c6f0, 256
  %v4_c93c = urem i32 %tmp74, 256
  %v5_c93c = or i32 %v4_c93c, %v3_c930
  store i32 %v5_c93c, i32* @lr, align 4
  %v1_c944 = urem i32 %v6_c7cc, 2
  %v1_c948 = urem i32 %v6_c7fc, 2
  %sext11 = mul i32 %tmp73, 16777216
  %v4_c964 = sdiv i32 %sext11, 16777216
  %v1_c968 = urem i32 %v6_c7e4, 2
  %v1_c96c = urem i32 %v6_c814, 2
  %v1_c978 = urem i32 %v6_c82c, 2
  store i32 %v1_c978, i32* %r0.global-to-local, align 4
  store i32 %v1_c8f0, i32* %r2.global-to-local, align 4
  %v3_c980 = ashr i32 %sext11, 31
  store i32 %v3_c980, i32* %r3.global-to-local, align 4
  store i32 %v1_c904, i32* %ip.global-to-local, align 4
  %v5_c994 = trunc i32 %v3_c980 to i8
  store i32 %v0_c8d0, i32* @r4, align 4
  store i32 %v0_c8d0, i32* @r5, align 4
  store i32 6, i32* @r7, align 4
  %sext = mul i32 %v6_c708, 16777216
  %v4_c9f0 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v7_c6f0, 16777216
  %v4_c9fc = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %tmp74, 16777216
  %v4_ca00 = sdiv i32 %sext9, 16777216
  %tmp = sub nsw i32 0, %v1_c938
  %v4_ca5c = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_c944
  %v4_ca70 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_c968
  %v4_ca84 = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_c948
  %v4_ca98 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_c96c
  %v3_caac = and i32 %tmp81, 2
  %sext10 = mul i32 %v6_c768, 16777216
  %v7_cadc = sdiv i32 %sext10, 16777216
  br label %dec_label_pc_c9a8

dec_label_pc_c9a8:                                ; preds = %bb76, %dec_label_pc_c8e8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c9b0 = call i32 @function_135b8(i32 128, i32 1)
  store i32 %v2_c9b0, i32* %r0.global-to-local, align 4
  %v3_c9b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c9b4, i32* %r2.global-to-local, align 4
  %v1_c9b8 = load i32, i32* %sb.global-to-local, align 4
  %v2_c9b8 = load i32, i32* @r4, align 4
  %v5_c9b8 = mul i32 %v2_c9b8, 4
  %v6_c9b8 = add i32 %v5_c9b8, %v1_c9b8
  %v7_c9b8 = inttoptr i32 %v6_c9b8 to i32*
  store i32 %v2_c9b0, i32* %v7_c9b8, align 4
  %v0_c9bc = load i32, i32* %sb.global-to-local, align 4
  %v1_c9bc = load i32, i32* %r2.global-to-local, align 4
  %v4_c9bc = mul i32 %v1_c9bc, 4
  %v5_c9bc = add i32 %v4_c9bc, %v0_c9bc
  %v6_c9bc = inttoptr i32 %v5_c9bc to i32*
  %v7_c9bc = load i32, i32* %v6_c9bc, align 4
  store i32 %v7_c9bc, i32* %r4.global-to-local, align 4
  %v1_c9c0 = inttoptr i32 %v7_c9bc to i8*
  %v2_c9c0 = load i8, i8* %v1_c9c0, align 1
  %tmp82 = urem i8 %v2_c9c0, 16
  %v1_c9c4 = zext i8 %tmp82 to i32
  %v1_c9c8 = or i32 %v1_c9c4, 64
  store i32 %v1_c9c8, i32* %r3.global-to-local, align 4
  %v1_c9cc = trunc i32 %v1_c9c8 to i8
  store i8 %v1_c9cc, i8* %v1_c9c0, align 1
  %v0_c9d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_c9d0 = inttoptr i32 %v0_c9d0 to i8*
  %v2_c9d0 = load i8, i8* %v1_c9d0, align 1
  %v1_c9d4 = and i8 %v2_c9d0, -16
  %v1_c9d8 = or i8 %v1_c9d4, 5
  store i32 %v1_c734, i32* %r0.global-to-local, align 4
  store i8 %v1_c9d8, i8* %v1_c9d0, align 1
  %v2_c9e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9e8 = add i32 %v2_c9e8, 1
  %v4_c9e8 = inttoptr i32 %v3_c9e8 to i8*
  store i8 %v5_c6ec, i8* %v4_c9e8, align 1
  %v0_c9ec = load i32, i32* %r0.global-to-local, align 4
  %v2_c9ec = icmp eq i32 %v0_c9ec, 0
  store i1 %v2_c9ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_c9f0, i32* %r0.global-to-local, align 4
  %v2_c9f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9f8 = add i32 %v2_c9f8, 3
  %v4_c9f8 = inttoptr i32 %v3_c9f8 to i8*
  store i8 60, i8* %v4_c9f8, align 1
  store i32 %v4_c9fc, i32* %ip.global-to-local, align 4
  store i32 %v4_ca00, i32* %r3.global-to-local, align 4
  %v0_ca04 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca04 = trunc i32 %v0_ca04 to i8
  %v2_ca04 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca04 = add i32 %v2_ca04, 8
  %v4_ca04 = inttoptr i32 %v3_ca04 to i8*
  store i8 %v1_ca04, i8* %v4_ca04, align 1
  %v0_ca08 = load i32, i32* @r7, align 4
  %v1_ca08 = trunc i32 %v0_ca08 to i8
  %v2_ca08 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca08 = add i32 %v2_ca08, 9
  %v4_ca08 = inttoptr i32 %v3_ca08 to i8*
  store i8 %v1_ca08, i8* %v4_ca08, align 1
  %v3_ca0c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca0c, i32* %r2.global-to-local, align 4
  %v0_ca10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca10 = trunc i32 %v0_ca10 to i8
  %v2_ca10 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca10 = add i32 %v2_ca10, 4
  %v4_ca10 = inttoptr i32 %v3_ca10 to i8*
  store i8 %v1_ca10, i8* %v4_ca10, align 1
  %v0_ca14 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca14, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c9a8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ca18 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca18 = add i32 %v3_ca18, 6
  %v5_ca18 = inttoptr i32 %v4_ca18 to i8*
  store i8 64, i8* %v5_ca18, align 1
  %v0_ca38.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c9a8, %bb
  %v0_ca38 = phi i1 [ true, %dec_label_pc_c9a8 ], [ %v0_ca38.pre, %bb ]
  %v0_ca1c = load i32, i32* %r2.global-to-local, align 4
  %v5_ca20 = mul i32 %v0_ca1c, 24
  store i32 %v5_ca20, i32* %r3.global-to-local, align 4
  store i32 %v6_c848, i32* %r2.global-to-local, align 4
  %v1_ca28 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca28 = add i32 %v1_ca28, 12
  %v3_ca28 = inttoptr i32 %v2_ca28 to i32*
  store i32 %v6_c848, i32* %v3_ca28, align 4
  %v0_ca2c = load i32, i32* %r3.global-to-local, align 4
  %v1_ca2c = load i32, i32* @r8, align 4
  %v2_ca2c = add i32 %v1_ca2c, %v0_ca2c
  store i32 %v2_ca2c, i32* %r3.global-to-local, align 4
  %v1_ca30 = add i32 %v2_ca2c, 16
  %v2_ca30 = inttoptr i32 %v1_ca30 to i32*
  %v3_ca30 = load i32, i32* %v2_ca30, align 4
  store i32 %v3_ca30, i32* %r2.global-to-local, align 4
  store i32 %v4_c964, i32* %r3.global-to-local, align 4
  br i1 %v0_ca38, label %bb76, label %bb75

bb75:                                             ; preds = %.thread
  %v1_ca38 = load i32, i32* @r5, align 4
  %v2_ca38 = trunc i32 %v1_ca38 to i8
  %v3_ca38 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca38 = add i32 %v3_ca38, 7
  %v5_ca38 = inttoptr i32 %v4_ca38 to i8*
  store i8 %v2_ca38, i8* %v5_ca38, align 1
  br label %bb76

bb76:                                             ; preds = %.thread, %bb75
  %v0_ca3c = load i32, i32* %ip.global-to-local, align 4
  %v1_ca3c = trunc i32 %v0_ca3c to i8
  %v2_ca3c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca3c = add i32 %v2_ca3c, 5
  %v4_ca3c = inttoptr i32 %v3_ca3c to i8*
  store i8 %v1_ca3c, i8* %v4_ca3c, align 1
  %v0_ca40 = load i32, i32* @r5, align 4
  %v1_ca40 = trunc i32 %v0_ca40 to i8
  %v2_ca40 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca40 = add i32 %v2_ca40, 2
  %v4_ca40 = inttoptr i32 %v3_ca40 to i8*
  store i8 %v1_ca40, i8* %v4_ca40, align 1
  %v0_ca44 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca44 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca44 = add i32 %v1_ca44, 16
  %v3_ca44 = inttoptr i32 %v2_ca44 to i32*
  store i32 %v0_ca44, i32* %v3_ca44, align 4
  %v0_ca48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca48 = trunc i32 %v0_ca48 to i8
  %v2_ca48 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca48 = add i32 %v2_ca48, 20
  %v4_ca48 = inttoptr i32 %v3_ca48 to i8*
  store i8 %v1_ca48, i8* %v4_ca48, align 1
  %v0_ca4c = load i32, i32* %r4.global-to-local, align 4
  %v1_ca4c = add i32 %v0_ca4c, 20
  store i32 %v1_ca4c, i32* %r1.global-to-local, align 4
  %v1_ca50 = add i32 %v0_ca4c, 33
  %v2_ca50 = inttoptr i32 %v1_ca50 to i8*
  %v3_ca50 = load i8, i8* %v2_ca50, align 1
  %v4_ca50 = zext i8 %v3_ca50 to i32
  store i32 %v1_c938, i32* %ip.global-to-local, align 4
  %v1_ca58 = and i32 %v4_ca50, 223
  %v5_ca5c = or i32 %v1_ca58, %v4_ca5c
  store i32 %v5_ca5c, i32* %r3.global-to-local, align 4
  %v1_ca60 = trunc i32 %v5_ca5c to i8
  store i8 %v1_ca60, i8* %v2_ca50, align 1
  %v0_ca64 = load i32, i32* %r1.global-to-local, align 4
  %v1_ca64 = add i32 %v0_ca64, 13
  %v2_ca64 = inttoptr i32 %v1_ca64 to i8*
  %v3_ca64 = load i8, i8* %v2_ca64, align 1
  %v4_ca64 = zext i8 %v3_ca64 to i32
  store i32 %v1_c944, i32* %r0.global-to-local, align 4
  %v1_ca6c = and i32 %v4_ca64, 239
  %v5_ca70 = or i32 %v1_ca6c, %v4_ca70
  store i32 %v5_ca70, i32* %r2.global-to-local, align 4
  %v1_ca74 = trunc i32 %v5_ca70 to i8
  store i8 %v1_ca74, i8* %v2_ca64, align 1
  %v0_ca78 = load i32, i32* %r1.global-to-local, align 4
  %v1_ca78 = add i32 %v0_ca78, 13
  %v2_ca78 = inttoptr i32 %v1_ca78 to i8*
  %v3_ca78 = load i8, i8* %v2_ca78, align 1
  %v4_ca78 = zext i8 %v3_ca78 to i32
  store i32 %v1_c968, i32* %r2.global-to-local, align 4
  %v1_ca80 = and i32 %v4_ca78, 247
  %v5_ca84 = or i32 %v1_ca80, %v4_ca84
  store i32 %v5_ca84, i32* %r3.global-to-local, align 4
  %v1_ca88 = trunc i32 %v5_ca84 to i8
  store i8 %v1_ca88, i8* %v2_ca78, align 1
  %v0_ca8c = load i32, i32* %r1.global-to-local, align 4
  %v1_ca8c = add i32 %v0_ca8c, 13
  %v2_ca8c = inttoptr i32 %v1_ca8c to i8*
  %v3_ca8c = load i8, i8* %v2_ca8c, align 1
  %v4_ca8c = zext i8 %v3_ca8c to i32
  store i32 %v1_c948, i32* %r3.global-to-local, align 4
  %v1_ca94 = and i32 %v4_ca8c, 251
  %v5_ca98 = or i32 %v1_ca94, %v4_ca98
  store i32 %v5_ca98, i32* %r2.global-to-local, align 4
  %v1_ca9c = trunc i32 %v5_ca98 to i8
  store i8 %v1_ca9c, i8* %v2_ca8c, align 1
  %v0_caa0 = load i32, i32* %r1.global-to-local, align 4
  %v1_caa0 = add i32 %v0_caa0, 13
  %v2_caa0 = inttoptr i32 %v1_caa0 to i8*
  %v3_caa0 = load i8, i8* %v2_caa0, align 1
  %v4_caa0 = zext i8 %v3_caa0 to i32
  store i32 %v1_c96c, i32* %ip.global-to-local, align 4
  %v1_caa8 = and i32 %v4_caa0, 253
  %v4_caac = or i32 %v1_caa8, %v3_caac
  store i32 %v4_caac, i32* %r3.global-to-local, align 4
  %v1_cab0 = trunc i32 %v4_caac to i8
  store i8 %v1_cab0, i8* %v2_caa0, align 1
  %v0_cab4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cab4 = add i32 %v0_cab4, 12
  %v2_cab4 = inttoptr i32 %v1_cab4 to i8*
  %v3_cab4 = load i8, i8* %v2_cab4, align 1
  %v4_cab4 = zext i8 %v3_cab4 to i32
  store i32 %v4_cab4, i32* %r2.global-to-local, align 4
  %v1_cab8 = add i32 %v0_cab4, 13
  %v2_cab8 = inttoptr i32 %v1_cab8 to i8*
  %v3_cab8 = load i8, i8* %v2_cab8, align 1
  %v4_cab8 = zext i8 %v3_cab8 to i32
  %tmp83 = urem i8 %v3_cab4, 16
  %v1_cac0 = zext i8 %tmp83 to i32
  %v1_cac4 = and i32 %v4_cab8, 254
  %v2_cac8 = or i32 %v1_cac4, %v1_c978
  %v1_cacc = or i32 %v1_cac0, 160
  store i32 %v1_cacc, i32* %r2.global-to-local, align 4
  %v1_cad0 = trunc i32 %v2_cac8 to i8
  store i8 %v1_cad0, i8* %v2_cab8, align 1
  %v0_cad4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cad4 = trunc i32 %v0_cad4 to i8
  %v2_cad4 = load i32, i32* %r1.global-to-local, align 4
  %v3_cad4 = add i32 %v2_cad4, 12
  %v4_cad4 = inttoptr i32 %v3_cad4 to i8*
  store i8 %v1_cad4, i8* %v4_cad4, align 1
  store i32 %v7_cadc, i32* %r3.global-to-local, align 4
  store i32 %v5_c910, i32* %ip.global-to-local, align 4
  %v2_cae4 = load i32, i32* %r1.global-to-local, align 4
  %v3_cae4 = add i32 %v2_cae4, 1
  %v4_cae4 = inttoptr i32 %v3_cae4 to i8*
  store i8 %v5_c994, i8* %v4_cae4, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_caf0 = load i32, i32* %r3.global-to-local, align 4
  %v1_caf0 = trunc i32 %v0_caf0 to i8
  %v2_caf0 = load i32, i32* %r1.global-to-local, align 4
  %v3_caf0 = add i32 %v2_caf0, 3
  %v4_caf0 = inttoptr i32 %v3_caf0 to i8*
  store i8 %v1_caf0, i8* %v4_caf0, align 1
  %v0_caf4 = load i32, i32* %ip.global-to-local, align 4
  %v1_caf4 = load i32, i32* %r1.global-to-local, align 4
  %v2_caf4 = add i32 %v1_caf4, 4
  %v3_caf4 = inttoptr i32 %v2_caf4 to i32*
  store i32 %v0_caf4, i32* %v3_caf4, align 4
  %v0_caf8 = load i32, i32* @r6, align 4
  %v1_caf8 = trunc i32 %v0_caf8 to i8
  %v2_caf8 = load i32, i32* %r1.global-to-local, align 4
  %v3_caf8 = add i32 %v2_caf8, 2
  %v4_caf8 = inttoptr i32 %v3_caf8 to i8*
  store i8 %v1_caf8, i8* %v4_caf8, align 1
  %v0_cafc = load i32, i32* %r2.global-to-local, align 4
  %v1_cafc = trunc i32 %v0_cafc to i8
  %v2_cafc = load i32, i32* %r4.global-to-local, align 4
  %v3_cafc = add i32 %v2_cafc, 41
  %v4_cafc = inttoptr i32 %v3_cafc to i8*
  store i8 %v1_cafc, i8* %v4_cafc, align 1
  %v0_cb00 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb00 = trunc i32 %v0_cb00 to i8
  %v2_cb00 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb00 = add i32 %v2_cb00, 40
  %v4_cb00 = inttoptr i32 %v3_cb00 to i8*
  store i8 %v1_cb00, i8* %v4_cb00, align 1
  %v0_cb04 = call i32 @function_f8c4()
  %v1_cb08 = urem i32 %v0_cb04, 16
  %v1_cb0c = or i32 %v1_cb08, 1392
  %v1_cb10 = add nuw nsw i32 %v1_cb0c, 8
  %v3_cb14 = mul nuw nsw i32 %v1_cb10, 65536
  store i32 %v3_cb14, i32* %r0.global-to-local, align 4
  %v3_cb18 = mul nuw nsw i32 %v1_cb10, 256
  %v1_cb1c = and i32 %v3_cb18, 65280
  %v5_cb20 = or i32 %v1_cb1c, 5
  store i32 %v5_cb20, i32* %r3.global-to-local, align 4
  %v2_cb24 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb24 = add i32 %v2_cb24, 42
  %v4_cb24 = inttoptr i32 %v3_cb24 to i8*
  store i8 5, i8* %v4_cb24, align 1
  %v0_cb28 = load i32, i32* %r3.global-to-local, align 4
  %v3_cb28 = sdiv i32 %v0_cb28, 256
  store i32 %v3_cb28, i32* %r1.global-to-local, align 4
  %v0_cb2c = load i32, i32* %r4.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v1_cb34 = trunc i32 %v3_cb28 to i8
  %v3_cb34 = add i32 %v0_cb2c, 43
  %v4_cb34 = inttoptr i32 %v3_cb34 to i8*
  store i8 %v1_cb34, i8* %v4_cb34, align 1
  store i32 2, i32* %ip.global-to-local, align 4
  %v0_cb3c = load i32, i32* %r3.global-to-local, align 4
  %v1_cb3c = trunc i32 %v0_cb3c to i8
  %v2_cb3c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb3c = add i32 %v2_cb3c, 46
  %v4_cb3c = inttoptr i32 %v3_cb3c to i8*
  store i8 %v1_cb3c, i8* %v4_cb3c, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_cb48 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb48 = add i32 %v2_cb48, 47
  %v4_cb48 = inttoptr i32 %v3_cb48 to i8*
  store i8 10, i8* %v4_cb48, align 1
  %v0_cb4c = load i32, i32* %r3.global-to-local, align 4
  %v1_cb4c = trunc i32 %v0_cb4c to i8
  %v2_cb4c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb4c = add i32 %v2_cb4c, 44
  %v4_cb4c = inttoptr i32 %v3_cb4c to i8*
  store i8 %v1_cb4c, i8* %v4_cb4c, align 1
  %v0_cb50 = load i32, i32* %ip.global-to-local, align 4
  %v1_cb50 = trunc i32 %v0_cb50 to i8
  %v2_cb50 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb50 = add i32 %v2_cb50, 45
  %v4_cb50 = inttoptr i32 %v3_cb50 to i8*
  store i8 %v1_cb50, i8* %v4_cb50, align 1
  %v0_cb54 = call i32 @function_f8c4()
  store i32 %v0_cb54, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_cb60 = load i32, i32* %r4.global-to-local, align 4
  %v2_cb60 = add i32 %v1_cb60, 48
  %v3_cb60 = inttoptr i32 %v2_cb60 to i32*
  store i32 %v0_cb54, i32* %v3_cb60, align 4
  %v0_cb64 = load i32, i32* %r3.global-to-local, align 4
  %v1_cb64 = trunc i32 %v0_cb64 to i8
  %v2_cb64 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb64 = add i32 %v2_cb64, 56
  %v4_cb64 = inttoptr i32 %v3_cb64 to i8*
  store i8 %v1_cb64, i8* %v4_cb64, align 1
  %v0_cb68 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb68 = trunc i32 %v0_cb68 to i8
  %v2_cb68 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb68 = add i32 %v2_cb68, 58
  %v4_cb68 = inttoptr i32 %v3_cb68 to i8*
  store i8 %v1_cb68, i8* %v4_cb68, align 1
  %v0_cb6c = load i32, i32* @r7, align 4
  %v1_cb6c = trunc i32 %v0_cb6c to i8
  %v2_cb6c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb6c = add i32 %v2_cb6c, 59
  %v4_cb6c = inttoptr i32 %v3_cb6c to i8*
  store i8 %v1_cb6c, i8* %v4_cb6c, align 1
  %v0_cb70 = load i32, i32* @r5, align 4
  %v1_cb70 = load i32, i32* %r4.global-to-local, align 4
  %v2_cb70 = add i32 %v1_cb70, 52
  %v3_cb70 = inttoptr i32 %v2_cb70 to i32*
  store i32 %v0_cb70, i32* %v3_cb70, align 4
  %v0_cb74 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb74 = trunc i32 %v0_cb74 to i8
  %v2_cb74 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb74 = add i32 %v2_cb74, 57
  %v4_cb74 = inttoptr i32 %v3_cb74 to i8*
  store i8 %v1_cb74, i8* %v4_cb74, align 1
  %v3_cb78 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cb78, i32* %r3.global-to-local, align 4
  %v1_cb7c = add i32 %v3_cb78, 1
  store i32 %v1_cb7c, i32* @r4, align 4
  %v0_cb80 = load i32, i32* %fp.global-to-local, align 4
  %v9_cb80 = icmp eq i32 %v0_cb80, %v1_cb7c
  store i1 %v9_cb80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb7c, i32* %stack_var_-40, align 4
  %v8_cb88 = icmp sgt i32 %v0_cb80, %v1_cb7c
  br i1 %v8_cb88, label %dec_label_pc_c9a8, label %dec_label_pc_cb8c.preheader

dec_label_pc_cb8c.preheader:                      ; preds = %bb76, %dec_label_pc_c8a4
  %v0_cb9014 = phi i32 [ %v0_c8cc, %dec_label_pc_c8a4 ], [ %v0_cb80, %bb76 ]
  %v2_cbac = icmp eq i32 %v6_c848, -1
  %v7_cbac = icmp eq i32 %v6_c848, -1
  %v3_cd3c = icmp eq i32 %v3_c8bc, 65535
  %v2_cdb8 = icmp eq i32 %v1_c8c8, 0
  br label %dec_label_pc_cb8c

dec_label_pc_cb8c:                                ; preds = %dec_label_pc_cdd8.dec_label_pc_cb8c_crit_edge, %dec_label_pc_cb8c.preheader
  %v0_cb90 = phi i32 [ %v0_cb90.pre, %dec_label_pc_cdd8.dec_label_pc_cb8c_crit_edge ], [ %v0_cb9014, %dec_label_pc_cb8c.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_cb90 = icmp eq i32 %v0_cb90, 0
  store i1 %v2_cb90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp77 = icmp slt i32 %v0_cb90, 1
  br i1 %tmp77, label %dec_label_pc_cdd8, label %dec_label_pc_cb9c

dec_label_pc_cb9c:                                ; preds = %dec_label_pc_cb8c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cca4

dec_label_pc_cba8:                                ; preds = %dec_label_pc_cca4
  store i32 %v6_c848, i32* %r0.global-to-local, align 4
  store i1 %v7_cbac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cbac, label %dec_label_pc_cd2c, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %dec_label_pc_ccc4, %dec_label_pc_cba8
  store i32 %v3_c8bc, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cd3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_cd3c, label %dec_label_pc_cd48, label %dec_label_pc_cbc8

dec_label_pc_cbc8:                                ; preds = %dec_label_pc_cd2c.dec_label_pc_cbc8_crit_edge, %dec_label_pc_cbb4
  %v1_cbcc = phi i32 [ %v1_cbcc.pre, %dec_label_pc_cd2c.dec_label_pc_cbc8_crit_edge ], [ 65535, %dec_label_pc_cbb4 ]
  store i32 %v3_c8c0, i32* %r3.global-to-local, align 4
  %v9_cbcc = icmp eq i32 %v3_c8c0, %v1_cbcc
  store i1 %v9_cbcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbcc, label %dec_label_pc_cd64, label %dec_label_pc_cbd4

dec_label_pc_cbd4:                                ; preds = %dec_label_pc_cd48.dec_label_pc_cbd4_crit_edge, %dec_label_pc_cbc8
  %v1_cbd8 = phi i32 [ %v1_cbd8.pre, %dec_label_pc_cd48.dec_label_pc_cbd4_crit_edge ], [ %v1_cbcc, %dec_label_pc_cbc8 ]
  store i32 %v3_c8c4, i32* %ip.global-to-local, align 4
  %v9_cbd8 = icmp eq i32 %v3_c8c4, %v1_cbd8
  store i1 %v9_cbd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbd8, label %dec_label_pc_cd80, label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %dec_label_pc_cd64.dec_label_pc_cbe0_crit_edge, %dec_label_pc_cbd4
  %v1_cbe4 = phi i32 [ %v1_cbe4.pre, %dec_label_pc_cd64.dec_label_pc_cbe0_crit_edge ], [ %v1_cbd8, %dec_label_pc_cbd4 ]
  store i32 %v6_c784, i32* %r0.global-to-local, align 4
  %v9_cbe4 = icmp eq i32 %v6_c784, %v1_cbe4
  store i1 %v9_cbe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbe4, label %dec_label_pc_cd9c, label %dec_label_pc_cbec

dec_label_pc_cbec:                                ; preds = %dec_label_pc_cd80.dec_label_pc_cbec_crit_edge, %dec_label_pc_cbe0
  %v1_cbf0 = phi i32 [ %v1_cbf0.pre, %dec_label_pc_cd80.dec_label_pc_cbec_crit_edge ], [ %v1_cbe4, %dec_label_pc_cbe0 ]
  store i32 %v6_c79c, i32* %r2.global-to-local, align 4
  %v9_cbf0 = icmp eq i32 %v6_c79c, %v1_cbf0
  store i1 %v9_cbf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbf0, label %dec_label_pc_cdb0, label %dec_label_pc_cbf8

dec_label_pc_cbf8:                                ; preds = %dec_label_pc_cd9c, %dec_label_pc_cbec
  store i32 %v1_c8c8, i32* %r3.global-to-local, align 4
  store i1 %v2_cdb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cdb8, label %dec_label_pc_cc04, label %dec_label_pc_cdc4

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cbf8, %dec_label_pc_cdb0, %dec_label_pc_cdc4
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cc08 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc08 = trunc i32 %v0_cc08 to i8
  %v2_cc08 = load i32, i32* @r5, align 4
  %v3_cc08 = add i32 %v2_cc08, 10
  %v4_cc08 = inttoptr i32 %v3_cc08 to i8*
  store i8 %v1_cc08, i8* %v4_cc08, align 1
  %v0_cc0c = load i32, i32* %r7.global-to-local, align 4
  %v1_cc0c = trunc i32 %v0_cc0c to i8
  %v2_cc0c = load i32, i32* @r5, align 4
  %v3_cc0c = add i32 %v2_cc0c, 11
  %v4_cc0c = inttoptr i32 %v3_cc0c to i8*
  store i8 %v1_cc0c, i8* %v4_cc0c, align 1
  %v0_cc10 = load i32, i32* @r5, align 4
  store i32 %v0_cc10, i32* @r0, align 4
  %v2_cc14 = call i32 @function_e498(i32 %v0_cc10, i32 20)
  %v3_cc14 = trunc i32 %v2_cc14 to i8
  %v4_cc1822 = udiv i32 %v2_cc14, 256
  %v1_cc1c = trunc i32 %v4_cc1822 to i8
  %v2_cc1c = load i32, i32* @r5, align 4
  %v3_cc1c = add i32 %v2_cc1c, 11
  %v4_cc1c = inttoptr i32 %v3_cc1c to i8*
  store i8 %v1_cc1c, i8* %v4_cc1c, align 1
  %v3_cc20 = load i32, i32* @r5, align 4
  %v4_cc20 = add i32 %v3_cc20, 10
  %v5_cc20 = inttoptr i32 %v4_cc20 to i8*
  store i8 %v3_cc14, i8* %v5_cc20, align 1
  %v0_cc24 = load i32, i32* @r6, align 4
  store i32 %v0_cc24, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_cc30 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc30 = trunc i32 %v0_cc30 to i8
  %v3_cc30 = add i32 %v0_cc24, 16
  %v4_cc30 = inttoptr i32 %v3_cc30 to i8*
  store i8 %v1_cc30, i8* %v4_cc30, align 1
  %v0_cc34 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc34 = trunc i32 %v0_cc34 to i8
  %v2_cc34 = load i32, i32* @r6, align 4
  %v3_cc34 = add i32 %v2_cc34, 17
  %v4_cc34 = inttoptr i32 %v3_cc34 to i8*
  store i8 %v1_cc34, i8* %v4_cc34, align 1
  %v0_cc38 = load i32, i32* @r5, align 4
  store i32 %v0_cc38, i32* %r0.global-to-local, align 4
  %v4_cc3c = call i32 @function_e4f4(i32 %v0_cc38, i32 %v0_cc24, i32 10240, i32 40)
  %v5_cc3c = trunc i32 %v4_cc3c to i8
  store i32 %v4_cc3c, i32* %r0.global-to-local, align 4
  %v4_cc4023 = udiv i32 %v4_cc3c, 256
  %v1_cc44 = trunc i32 %v4_cc4023 to i8
  %v2_cc44 = load i32, i32* @r6, align 4
  %v3_cc44 = add i32 %v2_cc44, 17
  %v4_cc44 = inttoptr i32 %v3_cc44 to i8*
  store i8 %v1_cc44, i8* %v4_cc44, align 1
  %v3_cc48 = load i32, i32* @r6, align 4
  %v4_cc48 = add i32 %v3_cc48, 16
  %v5_cc48 = inttoptr i32 %v4_cc48 to i8*
  store i8 %v5_cc3c, i8* %v5_cc48, align 1
  %v3_cc4c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc4c, i32* %r3.global-to-local, align 4
  %v0_cc50 = load i32, i32* @r5, align 4
  %v1_cc50 = add i32 %v0_cc50, 20
  %v2_cc50 = inttoptr i32 %v1_cc50 to i32*
  %v3_cc50 = load i32, i32* %v2_cc50, align 4
  %v3_cc58 = udiv i32 %v3_cc50, 65536
  store i32 %v3_cc58, i32* %r2.global-to-local, align 4
  %v5_cc5c = mul i32 %v3_cc4c, 24
  %v1_cc60 = load i32, i32* @r8, align 4
  %v2_cc60 = add i32 %v1_cc60, %v5_cc5c
  store i32 %v2_cc60, i32* %ip.global-to-local, align 4
  %v3_cc6421 = udiv i32 %v3_cc50, 16777216
  %v1_cc68 = trunc i32 %v3_cc6421 to i8
  %v3_cc68 = add i32 %v2_cc60, 3
  %v4_cc68 = inttoptr i32 %v3_cc68 to i8*
  store i8 %v1_cc68, i8* %v4_cc68, align 1
  %v0_cc6c = load i32, i32* %r2.global-to-local, align 4
  %v1_cc6c = trunc i32 %v0_cc6c to i8
  %v2_cc6c = load i32, i32* %ip.global-to-local, align 4
  %v3_cc6c = add i32 %v2_cc6c, 2
  %v4_cc6c = inttoptr i32 %v3_cc6c to i8*
  store i8 %v1_cc6c, i8* %v4_cc6c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cc74 = load i32, i32* @r5, align 4
  store i32 %v0_cc74, i32* %r1.global-to-local, align 4
  %v0_cc78 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_cc78, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_cc84 = load i32, i32* %ip.global-to-local, align 4
  %v6_cc8c = inttoptr i32 %v0_cc74 to i32*
  %v7_cc8c = call i32 @function_13268(i32 %v0_cc78, i32* %v6_cc8c, i32 60, i32 16384, i32 %v0_cc84, i32 16)
  %v3_cc90 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc90, i32* %r3.global-to-local, align 4
  %v1_cc94 = add i32 %v3_cc90, 1
  store i32 %v1_cc94, i32* %r0.global-to-local, align 4
  %v0_cc98 = load i32, i32* %fp.global-to-local, align 4
  %v9_cc98 = icmp eq i32 %v0_cc98, %v1_cc94
  store i1 %v9_cc98, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cc94, i32* %stack_var_-40, align 4
  %v7_cca0 = icmp sgt i32 %v0_cc98, %v1_cc94
  br i1 %v7_cca0, label %dec_label_pc_cca4, label %dec_label_pc_cdd8

dec_label_pc_cca4:                                ; preds = %dec_label_pc_cc04, %dec_label_pc_cb9c
  %v1_ccb4 = phi i32 [ %v1_cc94, %dec_label_pc_cc04 ], [ 0, %dec_label_pc_cb9c ]
  %v5_cca8 = mul i32 %v1_ccb4, 24
  %v1_ccac = load i32, i32* @r8, align 4
  %v2_ccac = add i32 %v1_ccac, %v5_cca8
  store i32 %v2_ccac, i32* %r3.global-to-local, align 4
  %v1_ccb0 = add i32 %v2_ccac, 20
  %v2_ccb0 = inttoptr i32 %v1_ccb0 to i8*
  %v3_ccb0 = load i8, i8* %v2_ccb0, align 1
  %v4_ccb0 = zext i8 %v3_ccb0 to i32
  store i32 %v4_ccb0, i32* %r2.global-to-local, align 4
  %v0_ccb4 = load i32, i32* %sb.global-to-local, align 4
  %v4_ccb4 = mul i32 %v1_ccb4, 4
  %v5_ccb4 = add i32 %v0_ccb4, %v4_ccb4
  %v6_ccb4 = inttoptr i32 %v5_ccb4 to i32*
  %v7_ccb4 = load i32, i32* %v6_ccb4, align 4
  store i32 %v7_ccb4, i32* @r5, align 4
  %v2_ccb8 = icmp ugt i8 %v3_ccb0, 30
  %v7_ccb8 = icmp eq i8 %v3_ccb0, 31
  store i1 %v7_ccb8, i1* %cpsr_z.global-to-local, align 1
  %v1_ccbc = add i32 %v7_ccb4, 20
  store i32 %v1_ccbc, i32* @r6, align 4
  %v2_ccc0 = xor i1 %v7_ccb8, true
  %v3_ccc0 = and i1 %v2_ccb8, %v2_ccc0
  br i1 %v3_ccc0, label %dec_label_pc_cba8, label %dec_label_pc_ccc4

dec_label_pc_ccc4:                                ; preds = %dec_label_pc_cca4
  %v1_ccc4 = add i32 %v2_ccac, 16
  %v2_ccc4 = inttoptr i32 %v1_ccc4 to i32*
  %v3_ccc4 = load i32, i32* %v2_ccc4, align 4
  store i32 %v3_ccc4, i32* %r4.global-to-local, align 4
  %v0_ccc8 = call i32 @function_f8c4()
  store i32 %v0_ccc8, i32* %r0.global-to-local, align 4
  %v3_cccc = load i32, i32* %stack_var_-40, align 4
  %v5_ccd4 = mul i32 %v3_cccc, 24
  %v0_ccd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_ccdc = load i32, i32* @r8, align 4
  %v2_ccdc = add i32 %v1_ccdc, %v5_ccd4
  store i32 %v2_ccdc, i32* %r1.global-to-local, align 4
  %v1_cce0 = and i32 %v0_ccd8, 65280
  store i32 %v1_cce0, i32* %r3.global-to-local, align 4
  %v1_ccd8 = udiv i32 %v0_ccd8, 256
  %v3_cce4 = and i32 %v1_ccd8, 65280
  store i32 %v3_cce4, i32* %r2.global-to-local, align 4
  %v3_cce8 = mul i32 %v0_ccd8, 16777216
  store i32 %v3_cce8, i32* %ip.global-to-local, align 4
  %v1_ccec = add i32 %v2_ccdc, 20
  %v2_ccec = inttoptr i32 %v1_ccec to i8*
  %v3_ccec = load i8, i8* %v2_ccec, align 1
  %v4_ccec = zext i8 %v3_ccec to i32
  %v4_ccf0 = mul nuw nsw i32 %v1_cce0, 256
  %v5_ccf0 = or i32 %v4_ccf0, %v3_cce8
  store i32 %v5_ccf0, i32* %ip.global-to-local, align 4
  %v2_ccf8 = call i32 @llvm.bswap.i32(i32 %v0_ccd8)
  %v7_ccfc = lshr i32 %v0_ccc8, %v4_ccec
  %v8_ccfc = add i32 %v7_ccfc, %v2_ccf8
  store i32 %v8_ccfc, i32* %r2.global-to-local, align 4
  %v3_cd08 = mul i32 %v8_ccfc, 16777216
  %v1_cd00 = mul i32 %v8_ccfc, 256
  %v4_cd0c = and i32 %v1_cd00, 16711680
  %v5_cd0c = or i32 %v4_cd0c, %v3_cd08
  store i32 %v5_cd0c, i32* %r1.global-to-local, align 4
  store i32 %v6_c848, i32* %r0.global-to-local, align 4
  %v2_cd1c = call i32 @llvm.bswap.i32(i32 %v8_ccfc)
  store i32 %v2_cd1c, i32* %r3.global-to-local, align 4
  store i1 %v7_cbac, i1* %cpsr_z.global-to-local, align 1
  %v1_cd24 = load i32, i32* @r5, align 4
  %v2_cd24 = add i32 %v1_cd24, 16
  %v3_cd24 = inttoptr i32 %v2_cd24 to i32*
  store i32 %v2_cd1c, i32* %v3_cd24, align 4
  br i1 %v2_cbac, label %dec_label_pc_cd2c, label %dec_label_pc_cbb4

dec_label_pc_cd2c:                                ; preds = %dec_label_pc_ccc4, %dec_label_pc_cba8
  %v0_cd2c = call i32 @function_f8c4()
  store i32 %v0_cd2c, i32* %r0.global-to-local, align 4
  store i32 %v3_c8bc, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cd3c, i1* %cpsr_z.global-to-local, align 1
  %v1_cd40 = load i32, i32* @r5, align 4
  %v2_cd40 = add i32 %v1_cd40, 12
  %v3_cd40 = inttoptr i32 %v2_cd40 to i32*
  store i32 %v0_cd2c, i32* %v3_cd40, align 4
  br i1 %v3_cd3c, label %dec_label_pc_cd48, label %dec_label_pc_cd2c.dec_label_pc_cbc8_crit_edge

dec_label_pc_cd2c.dec_label_pc_cbc8_crit_edge:    ; preds = %dec_label_pc_cd2c
  %v1_cbcc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbc8

dec_label_pc_cd48:                                ; preds = %dec_label_pc_cd2c, %dec_label_pc_cbb4
  %v0_cd48 = call i32 @function_f8c4()
  %v1_cd48 = trunc i32 %v0_cd48 to i8
  store i32 %v0_cd48, i32* %r0.global-to-local, align 4
  %v4_cd4c24 = udiv i32 %v0_cd48, 256
  %v1_cd50 = trunc i32 %v4_cd4c24 to i8
  %v2_cd50 = load i32, i32* @r5, align 4
  %v3_cd50 = add i32 %v2_cd50, 5
  %v4_cd50 = inttoptr i32 %v3_cd50 to i8*
  store i8 %v1_cd50, i8* %v4_cd50, align 1
  store i32 %v3_c8c0, i32* %r3.global-to-local, align 4
  %v1_cd58 = load i32, i32* @r4, align 4
  %v9_cd58 = icmp eq i32 %v3_c8c0, %v1_cd58
  store i1 %v9_cd58, i1* %cpsr_z.global-to-local, align 1
  %v3_cd5c = load i32, i32* @r5, align 4
  %v4_cd5c = add i32 %v3_cd5c, 4
  %v5_cd5c = inttoptr i32 %v4_cd5c to i8*
  store i8 %v1_cd48, i8* %v5_cd5c, align 1
  %v0_cd60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd60, label %dec_label_pc_cd64, label %dec_label_pc_cd48.dec_label_pc_cbd4_crit_edge

dec_label_pc_cd48.dec_label_pc_cbd4_crit_edge:    ; preds = %dec_label_pc_cd48
  %v1_cbd8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbd4

dec_label_pc_cd64:                                ; preds = %dec_label_pc_cd48, %dec_label_pc_cbc8
  %v0_cd64 = call i32 @function_f8c4()
  %v1_cd64 = trunc i32 %v0_cd64 to i8
  store i32 %v0_cd64, i32* %r0.global-to-local, align 4
  store i32 %v3_c8c4, i32* %ip.global-to-local, align 4
  %v4_cd6c = sdiv i32 %v0_cd64, 256
  store i32 %v4_cd6c, i32* %r3.global-to-local, align 4
  %v1_cd70 = load i32, i32* @r4, align 4
  %v9_cd70 = icmp eq i32 %v3_c8c4, %v1_cd70
  store i1 %v9_cd70, i1* %cpsr_z.global-to-local, align 1
  %v3_cd74 = load i32, i32* @r5, align 4
  %v4_cd74 = add i32 %v3_cd74, 20
  %v5_cd74 = inttoptr i32 %v4_cd74 to i8*
  store i8 %v1_cd64, i8* %v5_cd74, align 1
  %v0_cd78 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd78 = trunc i32 %v0_cd78 to i8
  %v2_cd78 = load i32, i32* @r6, align 4
  %v3_cd78 = add i32 %v2_cd78, 1
  %v4_cd78 = inttoptr i32 %v3_cd78 to i8*
  store i8 %v1_cd78, i8* %v4_cd78, align 1
  %v0_cd7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd7c, label %dec_label_pc_cd80, label %dec_label_pc_cd64.dec_label_pc_cbe0_crit_edge

dec_label_pc_cd64.dec_label_pc_cbe0_crit_edge:    ; preds = %dec_label_pc_cd64
  %v1_cbe4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbe0

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd64, %dec_label_pc_cbd4
  %v0_cd80 = call i32 @function_f8c4()
  %v1_cd80 = trunc i32 %v0_cd80 to i8
  %v4_cd84 = sdiv i32 %v0_cd80, 256
  store i32 %v4_cd84, i32* %r3.global-to-local, align 4
  %v3_cd88 = load i32, i32* @r6, align 4
  %v4_cd88 = add i32 %v3_cd88, 2
  %v5_cd88 = inttoptr i32 %v4_cd88 to i8*
  store i8 %v1_cd80, i8* %v5_cd88, align 1
  store i32 %v6_c784, i32* %r0.global-to-local, align 4
  %v1_cd90 = load i32, i32* @r4, align 4
  %v9_cd90 = icmp eq i32 %v6_c784, %v1_cd90
  store i1 %v9_cd90, i1* %cpsr_z.global-to-local, align 1
  %v0_cd94 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd94 = trunc i32 %v0_cd94 to i8
  %v2_cd94 = load i32, i32* @r6, align 4
  %v3_cd94 = add i32 %v2_cd94, 3
  %v4_cd94 = inttoptr i32 %v3_cd94 to i8*
  store i8 %v1_cd94, i8* %v4_cd94, align 1
  %v0_cd98 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd98, label %dec_label_pc_cd9c, label %dec_label_pc_cd80.dec_label_pc_cbec_crit_edge

dec_label_pc_cd80.dec_label_pc_cbec_crit_edge:    ; preds = %dec_label_pc_cd80
  %v1_cbf0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbec

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_cd80, %dec_label_pc_cbe0
  %v0_cd9c = call i32 @function_f8c4()
  store i32 %v0_cd9c, i32* %r0.global-to-local, align 4
  store i32 %v6_c79c, i32* %r2.global-to-local, align 4
  %v1_cda4 = load i32, i32* @r4, align 4
  %v9_cda4 = icmp eq i32 %v6_c79c, %v1_cda4
  store i1 %v9_cda4, i1* %cpsr_z.global-to-local, align 1
  %v1_cda8 = load i32, i32* @r6, align 4
  %v2_cda8 = add i32 %v1_cda8, 4
  %v3_cda8 = inttoptr i32 %v2_cda8 to i32*
  store i32 %v0_cd9c, i32* %v3_cda8, align 4
  br i1 %v9_cda4, label %dec_label_pc_cdb0, label %dec_label_pc_cbf8

dec_label_pc_cdb0:                                ; preds = %dec_label_pc_cd9c, %dec_label_pc_cbec
  %v0_cdb0 = call i32 @function_f8c4()
  store i32 %v0_cdb0, i32* %r0.global-to-local, align 4
  store i32 %v1_c8c8, i32* %r3.global-to-local, align 4
  store i1 %v2_cdb8, i1* %cpsr_z.global-to-local, align 1
  %v1_cdbc = load i32, i32* @r6, align 4
  %v2_cdbc = add i32 %v1_cdbc, 8
  %v3_cdbc = inttoptr i32 %v2_cdbc to i32*
  store i32 %v0_cdb0, i32* %v3_cdbc, align 4
  br i1 %v2_cdb8, label %dec_label_pc_cc04, label %dec_label_pc_cdc4

dec_label_pc_cdc4:                                ; preds = %dec_label_pc_cbf8, %dec_label_pc_cdb0
  %v0_cdc4 = call i32 @function_f8c4()
  %v1_cdc4 = trunc i32 %v0_cdc4 to i8
  store i32 %v0_cdc4, i32* %r0.global-to-local, align 4
  %v4_cdc8 = sdiv i32 %v0_cdc4, 256
  store i32 %v4_cdc8, i32* %r3.global-to-local, align 4
  %v1_cdcc = trunc i32 %v4_cdc8 to i8
  %v2_cdcc = load i32, i32* @r6, align 4
  %v3_cdcc = add i32 %v2_cdcc, 19
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  %v3_cdd0 = load i32, i32* @r6, align 4
  %v4_cdd0 = add i32 %v3_cdd0, 18
  %v5_cdd0 = inttoptr i32 %v4_cdd0 to i8*
  store i8 %v1_cdc4, i8* %v5_cdd0, align 1
  br label %dec_label_pc_cc04

dec_label_pc_cdd8:                                ; preds = %dec_label_pc_cc04, %dec_label_pc_cb8c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_cddc = call i32 @function_12cb0(i32* null)
  store i32 %v2_cddc, i32* %r0.global-to-local, align 4
  store i32 %v2_c858, i32* %ip.global-to-local, align 4
  %v9_cde4 = icmp eq i32 %v2_c858, %v2_cddc
  store i1 %v9_cde4, i1* %cpsr_z.global-to-local, align 1
  %v6_cde8 = icmp slt i32 %v2_c858, %v2_cddc
  br i1 %v6_cde8, label %dec_label_pc_cdec, label %dec_label_pc_cdd8.dec_label_pc_cb8c_crit_edge

dec_label_pc_cdd8.dec_label_pc_cb8c_crit_edge:    ; preds = %dec_label_pc_cdd8
  %v0_cb90.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_cb8c

dec_label_pc_cdec:                                ; preds = %dec_label_pc_cdd8, %dec_label_pc_c688, %dec_label_pc_cdf4
  %v29_cdf0 = phi i32 [ %v3_c86c, %dec_label_pc_c688 ], [ %v1_cdf8, %dec_label_pc_cdf4 ], [ %v2_cddc, %dec_label_pc_cdd8 ]
  store i32 %v3_c688, i32* %r4.global-to-local, align 4
  store i32 %v12_c688, i32* %r7.global-to-local, align 4
  ret i32 %v29_cdf0

dec_label_pc_cdf4:                                ; preds = %dec_label_pc_c87c
  %v0_cdf4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_cdf4, i32* %r0.global-to-local, align 4
  %v1_cdf8 = call i32 @function_129e0(i32 %v0_cdf4)
  store i32 %v1_cdf8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cdec

; uselistorder directives
  uselistorder i32 %v1_cdf8, { 1, 0 }
  uselistorder i32 %v4_cdc8, { 1, 0 }
  uselistorder i32 %v0_cdc4, { 0, 2, 1 }
  uselistorder i32 %v0_cd64, { 0, 2, 1 }
  uselistorder i32 %v0_cd48, { 0, 2, 1 }
  uselistorder i32 %v2_cd1c, { 1, 0 }
  uselistorder i32 %v8_ccfc, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cce8, { 1, 0 }
  uselistorder i32 %v0_ccd8, { 2, 0, 1, 3 }
  uselistorder i32 %v1_cc94, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_cc3c, { 0, 2, 1 }
  uselistorder i32 %v0_cc24, { 1, 0, 2 }
  uselistorder i1 %v2_cdb8, { 2, 3, 1, 0 }
  uselistorder i1 %v3_cd3c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_cbac, { 2, 1, 0 }
  uselistorder i32 %v1_cb7c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_cb28, { 1, 0 }
  uselistorder i32 %v3_c980, { 1, 0 }
  uselistorder i32 %v1_c978, { 1, 0 }
  uselistorder i32 %v1_c96c, { 1, 0 }
  uselistorder i32 %v1_c968, { 1, 0 }
  uselistorder i32 %v1_c948, { 1, 0 }
  uselistorder i32 %v1_c944, { 1, 0 }
  uselistorder i32 %v1_c938, { 1, 0 }
  uselistorder i32 %v1_c904, { 1, 0 }
  uselistorder i32 %v1_c8f0, { 1, 0 }
  uselistorder i32 %v0_c8d0, { 1, 0, 2 }
  uselistorder i32 %v1_c8c8, { 2, 1, 3, 0 }
  uselistorder i32 %v3_c8c0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v3_c8bc, { 0, 1, 3, 2 }
  uselistorder i1 %v7_c89c, { 1, 0 }
  uselistorder i1 %v7_c870, { 1, 0 }
  uselistorder i32 %v3_c86c, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_c858, { 2, 1, 0 }
  uselistorder i32 %v6_c848, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_c79c, { 3, 2, 1, 0 }
  uselistorder i32 %v6_c784, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c74c, { 1, 0, 3, 2 }
  uselistorder i32 %v1_c734, { 1, 0 }
  uselistorder i32 %v5_c6cc, { 1, 0 }
  uselistorder i32 %v1_c68c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 20, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 13, 14, 15, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %fp.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 43, { 1, 0, 4, 2, 5, 3, 6 }
  uselistorder i32 42, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder label %dec_label_pc_cdec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cdc4, { 1, 0 }
  uselistorder label %dec_label_pc_cc04, { 2, 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ce04(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ce04:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-84 = alloca i8, align 1
  %v1_ce08 = urem i32 %arg2, 256
  store i32 %v1_ce08, i32* @sl, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %v1_ce08, i32* %r0.global-to-local, align 4
  %v1_ce1c = urem i32 %arg4, 256
  store i32 %v1_ce1c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  %v2_ce28 = call i32 @function_135b8(i32 %v1_ce08, i32 4)
  %v0_ce34 = load i32, i32* @sl, align 4
  store i32 %v0_ce34, i32* %r0.global-to-local, align 4
  %v2_ce38 = call i32 @function_135b8(i32 %v0_ce34, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_ce44 = load i32, i32* @r5, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_ce38, i32* @sb, align 4
  %v0_ce54 = load i32, i32* @r4, align 4
  store i32 %v0_ce54, i32* %r0.global-to-local, align 4
  %v4_ce58 = inttoptr i32 %v0_ce44 to i32*
  %v5_ce58 = call i32 @function_829c(i32 %v0_ce54, i32* %v4_ce58, i32 7, i32 65535)
  %v0_ce5c = load i32, i32* @r5, align 4
  %v0_ce68 = load i32, i32* @r6, align 4
  store i32 %v0_ce68, i32* %r3.global-to-local, align 4
  %v0_ce6c = load i32, i32* @r4, align 4
  store i32 %v0_ce6c, i32* %r0.global-to-local, align 4
  %v3_ce70 = urem i32 %v5_ce58, 65536
  store i32 %v3_ce70, i32* @fp, align 4
  %v4_ce74 = inttoptr i32 %v0_ce5c to i32*
  %v5_ce74 = call i32 @function_829c(i32 %v0_ce6c, i32* %v4_ce74, i32 6, i32 %v0_ce68)
  %v0_ce78 = load i32, i32* @r5, align 4
  %v3_ce7c = mul i32 %v5_ce74, 65536
  store i32 %v3_ce7c, i32* @r8, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_ce88 = load i32, i32* @r4, align 4
  store i32 %v0_ce88, i32* %r0.global-to-local, align 4
  %v4_ce8c = inttoptr i32 %v0_ce78 to i32*
  %v5_ce8c = call i32 @function_829c(i32 %v0_ce88, i32* %v4_ce8c, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v3_ce9c = urem i32 %v5_ce8c, 65536
  %v0_cea0 = load i32, i32* @r5, align 4
  %v0_cea4 = load i32, i32* @r4, align 4
  store i32 %v0_cea4, i32* %r0.global-to-local, align 4
  %v4_ceac = inttoptr i32 %v0_cea0 to i32*
  %v5_ceac = call i32 @function_829c(i32 %v0_cea4, i32* %v4_ceac, i32 1, i32 1)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ceb8 = urem i32 %v5_ceac, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_ced4 = call i32 @function_12cb0(i32* null)
  %v0_ced8 = load i32, i32* @r8, align 4
  %v3_ced8 = udiv i32 %v0_ced8, 65536
  store i32 %v3_ced8, i32* %r3.global-to-local, align 4
  %v1_cedc = load i32, i32* @r6, align 4
  %v9_cedc = icmp eq i32 %v3_ced8, %v1_cedc
  %v1_cee44 = load i32, i32* @r7, align 4
  %v2_cee45 = add i32 %v1_cee44, %v2_ced4
  store i32 %v2_cee45, i32* %r0.global-to-local, align 4
  br i1 %v9_cedc, label %dec_label_pc_d0c0, label %bb

bb:                                               ; preds = %dec_label_pc_ce04
  %v2_cee0 = mul nuw nsw i32 %v3_ced8, 256
  %v4_cee8 = and i32 %v2_cee0, 65280
  store i32 %v4_cee8, i32* %r3.global-to-local, align 4
  %v5_cef0 = udiv i32 %v0_ced8, 16777216
  %v6_cef0 = or i32 %v4_cee8, %v5_cef0
  br label %dec_label_pc_cef8

dec_label_pc_cef8:                                ; preds = %bb, %dec_label_pc_d0c0
  %storemerge = phi i32 [ %v6_cef0, %bb ], [ %v3_d0c8, %dec_label_pc_d0c0 ]
  store i32 %storemerge, i32* @r7, align 4
  %v0_cef8 = load i32, i32* @sl, align 4
  %tmp47 = icmp slt i32 %v0_cef8, 1
  br i1 %tmp47, label %dec_label_pc_d090, label %dec_label_pc_cf00

dec_label_pc_cf00:                                ; preds = %dec_label_pc_cef8
  %v0_cf00 = load i32, i32* @fp, align 4
  %v3_cf00 = udiv i32 %v0_cf00, 256
  %v1_cf04 = mul i32 %v0_cf00, 256
  %v4_cf08 = and i32 %v1_cf04, 65280
  %v5_cf08 = or i32 %v4_cf08, %v3_cf00
  store i32 0, i32* @r8, align 4
  store i32 %arg3, i32* @r5, align 4
  %v5_cf18 = trunc i32 %v3_cf00 to i8
  %v3_cf203 = udiv i32 %v5_cf08, 256
  store i32 %v3_cf203, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_cf2c = trunc i32 %v3_cf203 to i8
  store i8 %v4_cf2c, i8* %stack_var_-84, align 1
  %v3_cfd0 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_cf54

dec_label_pc_cf34:                                ; preds = %dec_label_pc_cfb8
  %v0_cf34 = load i32, i32* @r6, align 4
  %v1_cf34 = load i32, i32* @sb, align 4
  %v2_cf34 = add i32 %v1_cf34, %v0_cf34
  %v3_cf34 = inttoptr i32 %v2_cf34 to i32*
  %v4_cf34 = load i32, i32* %v3_cf34, align 4
  store i32 %v4_cf34, i32* %r0.global-to-local, align 4
  %v3_cf40 = inttoptr i32 %v0_cfd4 to %sockaddr*
  %v4_cf40 = call i32 @function_13128(i32 %v4_cf34, %sockaddr* %v3_cf40, i32 16)
  store i32 %v4_cf40, i32* %r0.global-to-local, align 4
  %v0_cf44 = load i32, i32* @r8, align 4
  %v1_cf44 = load i32, i32* @sl, align 4
  %v9_cf44 = icmp eq i32 %v0_cf44, %v1_cf44
  %v0_cf48 = load i32, i32* @r6, align 4
  %v1_cf48 = add i32 %v0_cf48, 4
  store i32 %v1_cf48, i32* @r6, align 4
  %v0_cf4c = load i32, i32* @r5, align 4
  %v1_cf4c = add i32 %v0_cf4c, 24
  store i32 %v1_cf4c, i32* @r5, align 4
  br i1 %v9_cf44, label %dec_label_pc_d04c, label %dec_label_pc_cf54

dec_label_pc_cf54:                                ; preds = %dec_label_pc_cfe0, %dec_label_pc_cf34, %dec_label_pc_cf00
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_cf60 = call i32 @function_135b8(i32 65535, i32 1)
  store i32 %v2_cf60, i32* %r0.global-to-local, align 4
  store i32 %v2_ce28, i32* %r3.global-to-local, align 4
  %v0_cf6c = load i32, i32* @fp, align 4
  %v9_cf6c = icmp eq i32 %v0_cf6c, 65535
  %v1_cf70 = load i32, i32* @r6, align 4
  %v3_cf70 = add i32 %v1_cf70, %v2_ce28
  %v4_cf70 = inttoptr i32 %v3_cf70 to i32*
  store i32 %v2_cf60, i32* %v4_cf70, align 4
  br i1 %v9_cf6c, label %dec_label_pc_d0ac, label %dec_label_pc_cf78

dec_label_pc_cf78:                                ; preds = %dec_label_pc_cf54
  %v2_cf7c = load i8, i8* %stack_var_-84, align 1
  %v3_cf7c = sext i8 %v2_cf7c to i32
  store i32 %v3_cf7c, i32* %r3.global-to-local, align 4
  %v2_cf80 = load i32, i32* @r5, align 4
  %v3_cf80 = add i32 %v2_cf80, 2
  %v4_cf80 = inttoptr i32 %v3_cf80 to i8*
  store i8 %v5_cf18, i8* %v4_cf80, align 1
  %v0_cf84 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf84 = trunc i32 %v0_cf84 to i8
  %v2_cf84 = load i32, i32* @r5, align 4
  %v3_cf84 = add i32 %v2_cf84, 3
  %v4_cf84 = inttoptr i32 %v3_cf84 to i8*
  store i8 %v1_cf84, i8* %v4_cf84, align 1
  br label %dec_label_pc_cf88

dec_label_pc_cf88:                                ; preds = %dec_label_pc_d0ac, %dec_label_pc_cf78
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cf94 = call i32 @function_132cc(i32 2, i32 2, i32 17)
  store i32 %v3_cf94, i32* %r0.global-to-local, align 4
  %v7_cf98 = icmp eq i32 %v3_cf94, -1
  %v0_cf9c = load i32, i32* @r8, align 4
  %v1_cf9c = add i32 %v0_cf9c, 1
  store i32 %v1_cf9c, i32* @r8, align 4
  store i32 0, i32* @lr, align 4
  %v1_cfb0 = load i32, i32* @r6, align 4
  %v2_cfb0 = load i32, i32* @sb, align 4
  %v3_cfb0 = add i32 %v2_cfb0, %v1_cfb0
  %v4_cfb0 = inttoptr i32 %v3_cfb0 to i32*
  store i32 %v3_cf94, i32* %v4_cfb0, align 4
  br i1 %v7_cf98, label %dec_label_pc_d0a4.loopexit, label %dec_label_pc_cfb8

dec_label_pc_cfb8:                                ; preds = %dec_label_pc_cf88
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v0_cfd0 = load i32, i32* %r0.global-to-local, align 4
  %v4_cfd0 = call i32 @function_130fc(i32 %v0_cfd0, %sockaddr* %v3_cfd0, i32 16)
  store i32 %v4_cfd0, i32* %r0.global-to-local, align 4
  %v0_cfd4 = load i32, i32* @r5, align 4
  %v1_cfd4 = add i32 %v0_cfd4, 20
  %v2_cfd4 = inttoptr i32 %v1_cfd4 to i8*
  %v3_cfd4 = load i8, i8* %v2_cfd4, align 1
  %v4_cfd4 = zext i8 %v3_cfd4 to i32
  store i32 %v4_cfd4, i32* %r3.global-to-local, align 4
  %tmp51 = icmp ugt i8 %v3_cfd4, 31
  br i1 %tmp51, label %dec_label_pc_cf34, label %dec_label_pc_cfe0

dec_label_pc_cfe0:                                ; preds = %dec_label_pc_cfb8
  %v1_cfe0 = add i32 %v0_cfd4, 16
  %v2_cfe0 = inttoptr i32 %v1_cfe0 to i32*
  %v3_cfe0 = load i32, i32* %v2_cfe0, align 4
  store i32 %v3_cfe0, i32* @r4, align 4
  %v0_cfe4 = call i32 @function_f8c4()
  store i32 %v0_cfe4, i32* %r0.global-to-local, align 4
  %v0_cfe8 = load i32, i32* @r4, align 4
  %v1_cfec = and i32 %v0_cfe8, 65280
  store i32 %v1_cfec, i32* %r3.global-to-local, align 4
  %v0_cffc = load i32, i32* @r5, align 4
  %v1_cffc = add i32 %v0_cffc, 20
  %v2_cffc = inttoptr i32 %v1_cffc to i8*
  %v3_cffc = load i8, i8* %v2_cffc, align 1
  %v4_cffc = zext i8 %v3_cffc to i32
  %v2_d004 = call i32 @llvm.bswap.i32(i32 %v0_cfe8)
  %v7_d008 = lshr i32 %v0_cfe4, %v4_cffc
  %v8_d008 = add i32 %v7_d008, %v2_d004
  %v1_d010 = and i32 %v8_d008, 65280
  store i32 %v1_d010, i32* %r0.global-to-local, align 4
  %v2_d024 = call i32 @llvm.bswap.i32(i32 %v8_d008)
  store i32 %v2_d024, i32* %r3.global-to-local, align 4
  %v2_d028 = add i32 %v0_cffc, 4
  %v3_d028 = inttoptr i32 %v2_d028 to i32*
  store i32 %v2_d024, i32* %v3_d028, align 4
  %v0_d02c = load i32, i32* @r5, align 4
  %v0_d030 = load i32, i32* @r6, align 4
  %v1_d030 = load i32, i32* @sb, align 4
  %v2_d030 = add i32 %v1_d030, %v0_d030
  %v3_d030 = inttoptr i32 %v2_d030 to i32*
  %v4_d030 = load i32, i32* %v3_d030, align 4
  store i32 %v4_d030, i32* %r0.global-to-local, align 4
  %v3_d038 = inttoptr i32 %v0_d02c to %sockaddr*
  %v4_d038 = call i32 @function_13128(i32 %v4_d030, %sockaddr* %v3_d038, i32 16)
  store i32 %v4_d038, i32* %r0.global-to-local, align 4
  %v0_d03c = load i32, i32* @r8, align 4
  %v1_d03c = load i32, i32* @sl, align 4
  %v9_d03c = icmp eq i32 %v0_d03c, %v1_d03c
  %v0_d040 = load i32, i32* @r6, align 4
  %v1_d040 = add i32 %v0_d040, 4
  store i32 %v1_d040, i32* @r6, align 4
  %v0_d044 = load i32, i32* @r5, align 4
  %v1_d044 = add i32 %v0_d044, 24
  store i32 %v1_d044, i32* @r5, align 4
  br i1 %v9_d03c, label %dec_label_pc_d04c, label %dec_label_pc_cf54

dec_label_pc_d04c:                                ; preds = %dec_label_pc_cfe0, %dec_label_pc_cf34, %dec_label_pc_d090.dec_label_pc_d04c_crit_edge
  %v0_d04c = phi i32 [ %v0_d04c.pre, %dec_label_pc_d090.dec_label_pc_d04c_crit_edge ], [ %v0_d03c, %dec_label_pc_cfe0 ], [ %v0_cf44, %dec_label_pc_cf34 ]
  %tmp48 = icmp slt i32 %v0_d04c, 1
  br i1 %tmp48, label %dec_label_pc_d090, label %dec_label_pc_d054

dec_label_pc_d054:                                ; preds = %dec_label_pc_d04c
  %v2_d058 = icmp eq i32 %v1_ceb8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_d058, label %dec_label_pc_d060, label %dec_label_pc_d0d0

dec_label_pc_d060:                                ; preds = %dec_label_pc_d054
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_d068

dec_label_pc_d068:                                ; preds = %dec_label_pc_d068, %dec_label_pc_d060
  %v0_d074 = phi i32 [ %v1_d074, %dec_label_pc_d068 ], [ 0, %dec_label_pc_d060 ]
  %v0_d06c = phi i32 [ %v1_d088, %dec_label_pc_d068 ], [ 0, %dec_label_pc_d060 ]
  store i32 %v2_ce28, i32* %r3.global-to-local, align 4
  %v1_d06c = load i32, i32* @sb, align 4
  %v2_d06c = add i32 %v1_d06c, %v0_d06c
  %v3_d06c = inttoptr i32 %v2_d06c to i32*
  %v4_d06c = load i32, i32* %v3_d06c, align 4
  store i32 %v4_d06c, i32* %r0.global-to-local, align 4
  %v2_d070 = add i32 %v0_d06c, %v2_ce28
  %v3_d070 = inttoptr i32 %v2_d070 to i32*
  %v4_d070 = load i32, i32* %v3_d070, align 4
  %v1_d074 = add i32 %v0_d074, 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_d080 = inttoptr i32 %v4_d070 to i32*
  %v5_d080 = call i32 @function_1323c(i32 %v4_d06c, i32* %v4_d080, i32 %v3_ce9c, i32 16384)
  store i32 %v5_d080, i32* %r0.global-to-local, align 4
  %v1_d084 = load i32, i32* @sl, align 4
  %v9_d084 = icmp eq i32 %v1_d074, %v1_d084
  %v0_d088 = load i32, i32* @r4, align 4
  %v1_d088 = add i32 %v0_d088, 4
  store i32 %v1_d088, i32* @r4, align 4
  br i1 %v9_d084, label %dec_label_pc_d090, label %dec_label_pc_d068

dec_label_pc_d090:                                ; preds = %dec_label_pc_d0d8, %dec_label_pc_d068, %dec_label_pc_d04c, %dec_label_pc_cef8
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_d094 = call i32 @function_12cb0(i32* null)
  store i32 %v2_d094, i32* %r0.global-to-local, align 4
  store i32 %v2_cee45, i32* %r3.global-to-local, align 4
  %v6_d0a0 = icmp slt i32 %v2_cee45, %v2_d094
  br i1 %v6_d0a0, label %dec_label_pc_d0a4, label %dec_label_pc_d090.dec_label_pc_d04c_crit_edge

dec_label_pc_d090.dec_label_pc_d04c_crit_edge:    ; preds = %dec_label_pc_d090
  %v0_d04c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_d04c

dec_label_pc_d0a4.loopexit:                       ; preds = %dec_label_pc_cf88
  %v29_d0a8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d0a4

dec_label_pc_d0a4:                                ; preds = %dec_label_pc_d0a4.loopexit, %dec_label_pc_d090
  %v29_d0a8 = phi i32 [ %v29_d0a8.pre, %dec_label_pc_d0a4.loopexit ], [ %v2_d094, %dec_label_pc_d090 ]
  ret i32 %v29_d0a8

dec_label_pc_d0ac:                                ; preds = %dec_label_pc_cf54
  %v0_d0ac = call i32 @function_f8c4()
  %v1_d0ac = trunc i32 %v0_d0ac to i8
  store i32 %v0_d0ac, i32* %r0.global-to-local, align 4
  %v4_d0b0 = sdiv i32 %v0_d0ac, 256
  store i32 %v4_d0b0, i32* %r3.global-to-local, align 4
  %v1_d0b4 = trunc i32 %v4_d0b0 to i8
  %v2_d0b4 = load i32, i32* @r5, align 4
  %v3_d0b4 = add i32 %v2_d0b4, 3
  %v4_d0b4 = inttoptr i32 %v3_d0b4 to i8*
  store i8 %v1_d0b4, i8* %v4_d0b4, align 1
  %v3_d0b8 = load i32, i32* @r5, align 4
  %v4_d0b8 = add i32 %v3_d0b8, 2
  %v5_d0b8 = inttoptr i32 %v4_d0b8 to i8*
  store i8 %v1_d0ac, i8* %v5_d0b8, align 1
  br label %dec_label_pc_cf88

dec_label_pc_d0c0:                                ; preds = %dec_label_pc_ce04
  %v0_d0c0 = call i32 @function_f8c4()
  %v3_d0c4 = mul i32 %v0_d0c0, 65536
  store i32 %v3_d0c4, i32* %r0.global-to-local, align 4
  %v3_d0c8 = urem i32 %v0_d0c0, 65536
  br label %dec_label_pc_cef8

dec_label_pc_d0d0:                                ; preds = %dec_label_pc_d054
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_d0d8

dec_label_pc_d0d8:                                ; preds = %dec_label_pc_d0d8, %dec_label_pc_d0d0
  %v0_d0dc = phi i32 [ %v1_d114, %dec_label_pc_d0d8 ], [ 0, %dec_label_pc_d0d0 ]
  %v2_d0dc = add i32 %v0_d0dc, %v2_ce28
  %v3_d0dc = inttoptr i32 %v2_d0dc to i32*
  %v4_d0dc = load i32, i32* %v3_d0dc, align 4
  store i32 %v4_d0dc, i32* @r4, align 4
  store i32 %v4_d0dc, i32* %r0.global-to-local, align 4
  %v2_d0e8 = call i32 @function_f978(i32 %v4_d0dc, i32 %v3_ce9c)
  store i32 %v2_d0e8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_d0f4 = load i32, i32* @r4, align 4
  %v4_d0f4 = add i32 %v2_d0f4, %v3_ce9c
  %v5_d0f4 = inttoptr i32 %v4_d0f4 to i8*
  store i8 0, i8* %v5_d0f4, align 1
  %v0_d0f8 = load i32, i32* @r4, align 4
  %v0_d0fc = load i32, i32* @r6, align 4
  %v1_d0fc = load i32, i32* @sb, align 4
  %v2_d0fc = add i32 %v1_d0fc, %v0_d0fc
  %v3_d0fc = inttoptr i32 %v2_d0fc to i32*
  %v4_d0fc = load i32, i32* %v3_d0fc, align 4
  store i32 %v4_d0fc, i32* %r0.global-to-local, align 4
  %v0_d100 = load i32, i32* @r5, align 4
  %v1_d100 = add i32 %v0_d100, 1
  store i32 %v1_d100, i32* @r5, align 4
  %v0_d108 = load i32, i32* %r3.global-to-local, align 4
  %v1_d108 = add i32 %v0_d108, 16384
  store i32 %v1_d108, i32* %r3.global-to-local, align 4
  %v4_d10c = inttoptr i32 %v0_d0f8 to i32*
  %v5_d10c = call i32 @function_1323c(i32 %v4_d0fc, i32* %v4_d10c, i32 %v3_ce9c, i32 %v1_d108)
  store i32 %v5_d10c, i32* %r0.global-to-local, align 4
  %v0_d110 = load i32, i32* @r5, align 4
  %v1_d110 = load i32, i32* @sl, align 4
  %v9_d110 = icmp eq i32 %v0_d110, %v1_d110
  %v0_d114 = load i32, i32* @r6, align 4
  %v1_d114 = add i32 %v0_d114, 4
  store i32 %v1_d114, i32* @r6, align 4
  br i1 %v9_d110, label %dec_label_pc_d090, label %dec_label_pc_d0d8

; uselistorder directives
  uselistorder i32 %v1_d114, { 1, 0 }
  uselistorder i32 %v0_d0c0, { 1, 0 }
  uselistorder i32 %v4_d0b0, { 1, 0 }
  uselistorder i32 %v0_d0ac, { 0, 2, 1 }
  uselistorder i32 %v1_d088, { 1, 0 }
  uselistorder i32 %v2_d024, { 1, 0 }
  uselistorder i32 %v0_cfd4, { 1, 2, 0 }
  uselistorder i32 %v3_cf94, { 1, 0, 2 }
  uselistorder i32 %v3_ced8, { 0, 2, 1 }
  uselistorder i32 %v3_ce9c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_ce28, { 0, 1, 4, 2, 3 }
  uselistorder i32 %v1_ce08, { 1, 2, 0 }
  uselistorder i8* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 6, 4, 5, 7, 20, 9, 8, 11, 10, 14, 12, 13, 15, 31, 19, 21, 18, 23, 22, 17, 16, 1, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder label %dec_label_pc_d04c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cef8, { 1, 0 }
}

define i32 @function_d120(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d120:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_d120 = load i32, i32* @sb, align 4
  %v21_d120 = load i32, i32* @sl, align 4
  %v1_d124 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_d124, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_d140 = urem i32 %arg4, 256
  store i32 %v1_d140, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_d150 = call i32 @function_135b8(i32 %v1_d124, i32 4)
  %v0_d154 = load i32, i32* @r5, align 4
  store i32 %v0_d154, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d160 = load i32, i32* @r7, align 4
  store i32 %v0_d160, i32* %r3.global-to-local, align 4
  %v0_d164 = load i32, i32* @r4, align 4
  store i32 %v0_d164, i32* %r0.global-to-local, align 4
  %v5_d168 = inttoptr i32 %v0_d154 to i32*
  %v6_d168 = call i32 @function_829c(i32 %v0_d164, i32* %v5_d168, i32 2, i32 %v0_d160)
  %v1_d174 = urem i32 %v6_d168, 256
  store i32 %v1_d174, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d180 = load i32, i32* @r5, align 4
  store i32 %v0_d180, i32* %r1.global-to-local, align 4
  %v0_d184 = load i32, i32* @r4, align 4
  store i32 %v0_d184, i32* %r0.global-to-local, align 4
  %v5_d188 = trunc i32 %v6_d168 to i8
  %v6_d18c = inttoptr i32 %v0_d180 to i32*
  %v7_d18c = call i32 @function_829c(i32 %v0_d184, i32* %v6_d18c, i32 3, i32 65535)
  %v0_d190 = load i32, i32* @r5, align 4
  store i32 %v0_d190, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d1a0 = load i32, i32* @r4, align 4
  store i32 %v0_d1a0, i32* %r0.global-to-local, align 4
  %v5_d1a4 = inttoptr i32 %v0_d190 to i32*
  %v6_d1a4 = call i32 @function_829c(i32 %v0_d1a0, i32* %v5_d1a4, i32 4, i32 64)
  %v1_d1ac = urem i32 %v6_d1a4, 256
  store i32 %v1_d1ac, i32* %ip.global-to-local, align 4
  %v0_d1b0 = load i32, i32* @r5, align 4
  store i32 %v0_d1b0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_d1b8 = load i32, i32* @r7, align 4
  store i32 %v0_d1b8, i32* %r3.global-to-local, align 4
  %v0_d1bc = load i32, i32* @r4, align 4
  store i32 %v0_d1bc, i32* %r0.global-to-local, align 4
  %v5_d1c0 = trunc i32 %v6_d1a4 to i8
  %v6_d1c4 = inttoptr i32 %v0_d1b0 to i32*
  %v7_d1c4 = call i32 @function_829c(i32 %v0_d1bc, i32* %v6_d1c4, i32 5, i32 %v0_d1b8)
  %v1_d1d0 = urem i32 %v7_d1c4, 256
  store i32 %v1_d1d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d1dc = load i32, i32* @r5, align 4
  store i32 %v0_d1dc, i32* %r1.global-to-local, align 4
  %v0_d1e0 = load i32, i32* @r4, align 4
  store i32 %v0_d1e0, i32* %r0.global-to-local, align 4
  %v5_d1e8 = inttoptr i32 %v0_d1dc to i32*
  %v6_d1e8 = call i32 @function_829c(i32 %v0_d1e0, i32* %v5_d1e8, i32 6, i32 65535)
  %v0_d1f4 = load i32, i32* @r5, align 4
  store i32 %v0_d1f4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d200 = load i32, i32* @r4, align 4
  store i32 %v0_d200, i32* %r0.global-to-local, align 4
  %v5_d204 = inttoptr i32 %v0_d1f4 to i32*
  %v6_d204 = call i32 @function_829c(i32 %v0_d200, i32* %v5_d204, i32 7, i32 65535)
  %v0_d208 = load i32, i32* @r5, align 4
  store i32 %v0_d208, i32* %r1.global-to-local, align 4
  %v0_d20c = load i32, i32* @r7, align 4
  store i32 %v0_d20c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_d204, i32* %sb.global-to-local, align 4
  %v0_d218 = load i32, i32* @r4, align 4
  store i32 %v0_d218, i32* %r0.global-to-local, align 4
  %v4_d21c = inttoptr i32 %v0_d208 to i32*
  %v5_d21c = call i32 @function_829c(i32 %v0_d218, i32* %v4_d21c, i32 %v0_d20c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d228 = load i32, i32* @r5, align 4
  store i32 %v0_d228, i32* %r1.global-to-local, align 4
  store i32 %v5_d21c, i32* @sl, align 4
  %v0_d230 = load i32, i32* @r4, align 4
  store i32 %v0_d230, i32* %r0.global-to-local, align 4
  %v4_d234 = inttoptr i32 %v0_d228 to i32*
  %v5_d234 = call i32 @function_829c(i32 %v0_d230, i32* %v4_d234, i32 1, i32 1)
  %v2_d240 = load i32, i32* @global_var_1dd3c.81, align 4
  store i32 %v2_d240, i32* %r3.global-to-local, align 4
  %v1_d244 = urem i32 %v5_d234, 256
  store i32 %v1_d244, i32* %ip.global-to-local, align 4
  %v0_d248 = load i32, i32* @r5, align 4
  store i32 %v0_d248, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_d250 = load i32, i32* @r4, align 4
  store i32 %v0_d250, i32* %r0.global-to-local, align 4
  %v5_d258 = inttoptr i32 %v0_d248 to i32*
  %v6_d258 = call i32 @function_829c(i32 %v0_d250, i32* %v5_d258, i32 24, i32 %v2_d240)
  store i32 %v6_d258, i32* @fp, align 4
  %v0_d260 = load i32, i32* @r7, align 4
  store i32 %v0_d260, i32* %r0.global-to-local, align 4
  %v1_d264 = inttoptr i32 %v0_d260 to i32*
  %v2_d264 = call i32 @function_12cb0(i32* %v1_d264)
  %v1_d268 = load i32, i32* @r6, align 4
  %v2_d268 = add i32 %v1_d268, %v2_d264
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d27c = call i32 @function_132cc(i32 2, i32 3, i32 17)
  store i32 %v3_d27c, i32* %r0.global-to-local, align 4
  %v7_d280 = icmp eq i32 %v3_d27c, -1
  store i1 %v7_d280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d280, label %dec_label_pc_d6a8, label %dec_label_pc_d28c

dec_label_pc_d28c:                                ; preds = %dec_label_pc_d120
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d294 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d294, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_d29c = load i32, i32* @r7, align 4
  store i32 %v0_d29c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d2a8 = call i32 @function_1329c(i32 %v3_d27c, i32 %v0_d29c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_d2a8, i32* %r0.global-to-local, align 4
  %v7_d2ac = icmp eq i32 %v6_d2a8, -1
  store i1 %v7_d2ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d2ac, label %dec_label_pc_d6b0, label %dec_label_pc_d2b4

dec_label_pc_d2b4:                                ; preds = %dec_label_pc_d28c
  %v0_d2b4 = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_d2c0 = urem i32 %v0_d2b4, 65536
  store i32 %v3_d2c0, i32* %r2.global-to-local, align 4
  %v3_d2c4 = icmp ugt i32 %v3_d2c0, 1459
  %v9_d2c4 = icmp eq i32 %v3_d2c0, 1460
  store i1 %v9_d2c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d2c4, label %bb, label %bb56

bb:                                               ; preds = %dec_label_pc_d2b4
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_d2b4, %bb
  %v0_d2cc = phi i32 [ %v3_d2c0, %dec_label_pc_d2b4 ], [ 1460, %bb ]
  store i32 %v7_d18c, i32* %r1.global-to-local, align 4
  store i32 %v6_d1e8, i32* %r2.global-to-local, align 4
  store i32 %v1_d124, i32* %r3.global-to-local, align 4
  %v0_d2dc = load i32, i32* %sb.global-to-local, align 4
  %v3_d2e0 = mul i32 %v7_d18c, 65536
  store i32 %v3_d2e0, i32* %r0.global-to-local, align 4
  %v3_d2e4 = mul i32 %v6_d1e8, 65536
  store i32 %v3_d2e4, i32* %sl.global-to-local, align 4
  %v3_d2e8 = urem i32 %v7_d18c, 65536
  store i32 %v3_d2e8, i32* @r4, align 4
  %v3_d2ec = urem i32 %v6_d1e8, 65536
  store i32 %v3_d2ec, i32* %sb.global-to-local, align 4
  %v3_d2f0 = urem i32 %v0_d2dc, 65536
  store i32 %v3_d2f0, i32* %ip.global-to-local, align 4
  %v2_d2f4 = icmp eq i32 %v1_d124, 0
  store i1 %v2_d2f4, i1* %cpsr_z.global-to-local, align 1
  %v0_d2f8 = load i32, i32* @r7, align 4
  store i32 %v0_d2f8, i32* %stack_var_-40, align 4
  br i1 %v2_d2f4, label %.dec_label_pc_d468.preheader_crit_edge, label %dec_label_pc_d30c

.dec_label_pc_d468.preheader_crit_edge:           ; preds = %bb56
  %.pre = add nuw nsw i32 %v0_d2cc, 8
  %.pre19 = add nuw nsw i32 %v0_d2cc, 28
  br label %dec_label_pc_d468.preheader

dec_label_pc_d30c:                                ; preds = %bb56
  %v1_d310 = add nuw nsw i32 %v0_d2cc, 28
  %v1_d314 = add nuw nsw i32 %v0_d2cc, 8
  %v1_d318 = urem i32 %v6_d1e8, 256
  %tmp57 = udiv i32 %v7_d18c, 256
  %v3_d324 = urem i32 %tmp57, 256
  %v3_d328 = mul i32 %v1_d314, 65536
  store i32 %v3_d328, i32* @lr, align 4
  %tmp58 = mul nuw nsw i32 %v1_d310, 256
  %v1_d334 = urem i32 %v7_d18c, 256
  %tmp59 = mul nuw nsw i32 %v1_d314, 256
  %v1_d340 = and i32 %tmp58, 65280
  store i32 %v1_d340, i32* %r3.global-to-local, align 4
  %v4_d344 = mul nuw nsw i32 %v1_d334, 256
  %v5_d344 = or i32 %v4_d344, %v3_d324
  store i32 %v5_d344, i32* %r0.global-to-local, align 4
  %v3_d348 = mul nuw nsw i32 %v1_d318, 256
  store i32 %v3_d348, i32* %r1.global-to-local, align 4
  %tmp60 = udiv i32 %v0_d2dc, 256
  %v3_d34c = urem i32 %tmp60, 256
  %v1_d350 = and i32 %tmp59, 65280
  store i32 %v1_d350, i32* %ip.global-to-local, align 4
  %v2_d354 = icmp eq i32 %v1_d1d0, 0
  store i1 %v2_d354, i1* %cpsr_z.global-to-local, align 1
  %tmp61 = udiv i32 %v1_d310, 256
  %v4_d358 = urem i32 %tmp61, 256
  %v5_d358 = or i32 %v4_d358, %v1_d340
  store i32 %v5_d358, i32* %r2.global-to-local, align 4
  %v1_d35c = urem i32 %v0_d2dc, 256
  %v5_d360 = trunc i32 %tmp61 to i8
  %v5_d364 = trunc i32 %tmp57 to i8
  %tmp62 = udiv i32 %v6_d1e8, 256
  %v4_d368 = urem i32 %tmp62, 256
  %v5_d368 = or i32 %v4_d368, %v3_d348
  store i32 %v5_d368, i32* @r5, align 4
  %v4_d36c = mul nuw nsw i32 %v1_d35c, 256
  %v5_d36c = or i32 %v4_d36c, %v3_d34c
  store i32 %v5_d36c, i32* @r6, align 4
  %tmp63 = udiv i32 %v1_d314, 256
  %v4_d370 = urem i32 %tmp63, 256
  %v5_d370 = or i32 %v4_d370, %v1_d350
  store i32 %v5_d370, i32* %sb.global-to-local, align 4
  br i1 %v2_d354, label %dec_label_pc_d378, label %dec_label_pc_d6bc

dec_label_pc_d378:                                ; preds = %dec_label_pc_d30c
  %v3_d37822 = udiv i32 %v1_d340, 256
  store i32 %v3_d37822, i32* %ip.global-to-local, align 4
  store i32 %v1_d334, i32* %r0.global-to-local, align 4
  store i32 %v1_d318, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v1_d35c, i32* %sl.global-to-local, align 4
  %v3_d39823 = udiv i32 %v1_d350, 256
  store i32 %v3_d39823, i32* @r7, align 4
  %v4_d3f0 = sext i8 %v5_d1c0 to i32
  %sext10 = mul i32 %v1_d310, 16777216
  %v4_d420 = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v7_d18c, 16777216
  %v4_d42c = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v6_d1e8, 16777216
  %v4_d430 = sdiv i32 %sext12, 16777216
  %v4_d438 = sext i8 %v5_d364 to i32
  %v4_d414 = sext i8 %v5_d360 to i32
  br label %dec_label_pc_d39c

dec_label_pc_d39c:                                ; preds = %dec_label_pc_d39c, %dec_label_pc_d378
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d3a8 = call i32 @function_135b8(i32 1510, i32 1)
  store i32 %v2_d3a8, i32* %r0.global-to-local, align 4
  store i32 %v2_d150, i32* %r3.global-to-local, align 4
  %v2_d3b4 = load i32, i32* @r4, align 4
  %v5_d3b4 = mul i32 %v2_d3b4, 4
  %v6_d3b4 = add i32 %v5_d3b4, %v2_d150
  %v7_d3b4 = inttoptr i32 %v6_d3b4 to i32*
  store i32 %v2_d3a8, i32* %v7_d3b4, align 4
  %v3_d3b8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3b8, i32* %r2.global-to-local, align 4
  %v0_d3bc = load i32, i32* %r3.global-to-local, align 4
  %v4_d3bc = mul i32 %v3_d3b8, 4
  %v5_d3bc = add i32 %v0_d3bc, %v4_d3bc
  %v6_d3bc = inttoptr i32 %v5_d3bc to i32*
  %v7_d3bc = load i32, i32* %v6_d3bc, align 4
  store i32 %v7_d3bc, i32* %r1.global-to-local, align 4
  %v1_d3c0 = inttoptr i32 %v7_d3bc to i8*
  %v2_d3c0 = load i8, i8* %v1_d3c0, align 1
  %tmp = urem i8 %v2_d3c0, 16
  %v1_d3c4 = zext i8 %tmp to i32
  %v1_d3c8 = or i32 %v1_d3c4, 64
  store i32 %v1_d3c8, i32* %r3.global-to-local, align 4
  %v1_d3cc = trunc i32 %v1_d3c8 to i8
  store i8 %v1_d3cc, i8* %v1_d3c0, align 1
  %v0_d3d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3d0 = inttoptr i32 %v0_d3d0 to i8*
  %v2_d3d0 = load i8, i8* %v1_d3d0, align 1
  %v3_d3d0 = zext i8 %v2_d3d0 to i32
  %v1_d3d4 = and i32 %v3_d3d0, 240
  %v1_d3d8 = or i32 %v1_d3d4, 5
  store i32 %v1_d3d8, i32* %r2.global-to-local, align 4
  %v3_d3e0 = add i32 %v0_d3d0, 9
  %v4_d3e0 = inttoptr i32 %v3_d3e0 to i8*
  store i8 17, i8* %v4_d3e0, align 1
  %v0_d3e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d3e4 = trunc i32 %v0_d3e4 to i8
  %v2_d3e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d3e4 = inttoptr i32 %v2_d3e4 to i8*
  store i8 %v1_d3e4, i8* %v3_d3e4, align 1
  %v2_d3ec = load i32, i32* %r1.global-to-local, align 4
  %v3_d3ec = add i32 %v2_d3ec, 1
  %v4_d3ec = inttoptr i32 %v3_d3ec to i8*
  store i8 %v5_d188, i8* %v4_d3ec, align 1
  store i32 %v4_d3f0, i32* %ip.global-to-local, align 4
  %v2_d3f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d3f4 = add i32 %v2_d3f4, 8
  %v4_d3f4 = inttoptr i32 %v3_d3f4 to i8*
  store i8 %v5_d1c0, i8* %v4_d3f4, align 1
  %v3_d3f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3f8, i32* %r2.global-to-local, align 4
  %v3_d3fc = mul i32 %v3_d3f8, 32
  store i32 %v3_d3fc, i32* %r3.global-to-local, align 4
  %v0_d400 = load i32, i32* @fp, align 4
  %v1_d400 = load i32, i32* %r1.global-to-local, align 4
  %v2_d400 = add i32 %v1_d400, 12
  %v3_d400 = inttoptr i32 %v2_d400 to i32*
  store i32 %v0_d400, i32* %v3_d400, align 4
  %v0_d404 = load i32, i32* %r3.global-to-local, align 4
  %v1_d404 = load i32, i32* %r2.global-to-local, align 4
  %tmp66 = mul i32 %v1_d404, -8
  %v5_d404 = add i32 %v0_d404, %tmp66
  %v1_d408 = load i32, i32* @r8, align 4
  %v2_d408 = add i32 %v5_d404, %v1_d408
  store i32 %v2_d408, i32* %r3.global-to-local, align 4
  %v1_d40c = add i32 %v2_d408, 16
  %v2_d40c = inttoptr i32 %v1_d40c to i32*
  %v3_d40c = load i32, i32* %v2_d40c, align 4
  %v1_d410 = add i32 %v1_d404, 1
  store i32 %v1_d410, i32* @r4, align 4
  store i32 %v4_d414, i32* %ip.global-to-local, align 4
  store i32 %v1_d124, i32* %r2.global-to-local, align 4
  %v1_d41c = load i32, i32* %r1.global-to-local, align 4
  %v2_d41c = add i32 %v1_d41c, 16
  %v3_d41c = inttoptr i32 %v2_d41c to i32*
  store i32 %v3_d40c, i32* %v3_d41c, align 4
  store i32 %v4_d420, i32* %r0.global-to-local, align 4
  %v0_d424 = load i32, i32* %ip.global-to-local, align 4
  %v1_d424 = trunc i32 %v0_d424 to i8
  %v2_d424 = load i32, i32* %r1.global-to-local, align 4
  %v3_d424 = add i32 %v2_d424, 2
  %v4_d424 = inttoptr i32 %v3_d424 to i8*
  store i8 %v1_d424, i8* %v4_d424, align 1
  %v0_d428 = load i32, i32* %r0.global-to-local, align 4
  %v1_d428 = trunc i32 %v0_d428 to i8
  %v2_d428 = load i32, i32* %r1.global-to-local, align 4
  %v3_d428 = add i32 %v2_d428, 3
  %v4_d428 = inttoptr i32 %v3_d428 to i8*
  store i8 %v1_d428, i8* %v4_d428, align 1
  store i32 %v4_d42c, i32* %ip.global-to-local, align 4
  store i32 %v4_d430, i32* %r0.global-to-local, align 4
  %v0_d434 = load i32, i32* @r4, align 4
  %v1_d434 = load i32, i32* %r2.global-to-local, align 4
  %v9_d434 = icmp eq i32 %v0_d434, %v1_d434
  store i1 %v9_d434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_d438, i32* %r2.global-to-local, align 4
  %v0_d43c = load i32, i32* %r1.global-to-local, align 4
  %v1_d43c = add i32 %v0_d43c, 20
  store i32 %v1_d43c, i32* %r3.global-to-local, align 4
  %v3_d440 = add i32 %v0_d43c, 4
  %v4_d440 = inttoptr i32 %v3_d440 to i8*
  store i8 %v5_d364, i8* %v4_d440, align 1
  %v0_d444 = load i32, i32* %ip.global-to-local, align 4
  %v1_d444 = trunc i32 %v0_d444 to i8
  %v2_d444 = load i32, i32* %r1.global-to-local, align 4
  %v3_d444 = add i32 %v2_d444, 5
  %v4_d444 = inttoptr i32 %v3_d444 to i8*
  store i8 %v1_d444, i8* %v4_d444, align 1
  %v0_d448 = load i32, i32* @r5, align 4
  %v1_d448 = trunc i32 %v0_d448 to i8
  %v2_d448 = load i32, i32* %r1.global-to-local, align 4
  %v3_d448 = add i32 %v2_d448, 20
  %v4_d448 = inttoptr i32 %v3_d448 to i8*
  store i8 %v1_d448, i8* %v4_d448, align 1
  %v0_d44c = load i32, i32* @r7, align 4
  %v1_d44c = trunc i32 %v0_d44c to i8
  %v2_d44c = load i32, i32* %r3.global-to-local, align 4
  %v3_d44c = add i32 %v2_d44c, 5
  %v4_d44c = inttoptr i32 %v3_d44c to i8*
  store i8 %v1_d44c, i8* %v4_d44c, align 1
  %v0_d450 = load i32, i32* %r0.global-to-local, align 4
  %v1_d450 = trunc i32 %v0_d450 to i8
  %v2_d450 = load i32, i32* %r3.global-to-local, align 4
  %v3_d450 = add i32 %v2_d450, 1
  %v4_d450 = inttoptr i32 %v3_d450 to i8*
  store i8 %v1_d450, i8* %v4_d450, align 1
  %v0_d454 = load i32, i32* @r6, align 4
  %v1_d454 = trunc i32 %v0_d454 to i8
  %v2_d454 = load i32, i32* %r3.global-to-local, align 4
  %v3_d454 = add i32 %v2_d454, 2
  %v4_d454 = inttoptr i32 %v3_d454 to i8*
  store i8 %v1_d454, i8* %v4_d454, align 1
  %v0_d458 = load i32, i32* %sl.global-to-local, align 4
  %v1_d458 = trunc i32 %v0_d458 to i8
  %v2_d458 = load i32, i32* %r3.global-to-local, align 4
  %v3_d458 = add i32 %v2_d458, 3
  %v4_d458 = inttoptr i32 %v3_d458 to i8*
  store i8 %v1_d458, i8* %v4_d458, align 1
  %v0_d45c = load i32, i32* %sb.global-to-local, align 4
  %v1_d45c = trunc i32 %v0_d45c to i8
  %v2_d45c = load i32, i32* %r3.global-to-local, align 4
  %v3_d45c = add i32 %v2_d45c, 4
  %v4_d45c = inttoptr i32 %v3_d45c to i8*
  store i8 %v1_d45c, i8* %v4_d45c, align 1
  %v0_d460 = load i32, i32* @r4, align 4
  store i32 %v0_d460, i32* %stack_var_-40, align 4
  %v5_d464 = icmp slt i32 %v0_d434, %v1_d434
  br i1 %v5_d464, label %dec_label_pc_d39c, label %dec_label_pc_d468.preheader

dec_label_pc_d468.preheader:                      ; preds = %dec_label_pc_d6e8, %dec_label_pc_d39c, %.dec_label_pc_d468.preheader_crit_edge
  %v1_d48c.pre-phi = phi i32 [ %.pre19, %.dec_label_pc_d468.preheader_crit_edge ], [ %v1_d310, %dec_label_pc_d39c ], [ %v1_d310, %dec_label_pc_d6e8 ]
  %v1_d488.pre-phi = phi i32 [ %.pre, %.dec_label_pc_d468.preheader_crit_edge ], [ %v1_d314, %dec_label_pc_d39c ], [ %v1_d314, %dec_label_pc_d6e8 ]
  %v3_d618 = icmp eq i32 %v3_d2e8, 65535
  %v2_d4cc = icmp eq i32 %v1_d244, 0
  br label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d468.preheader, %dec_label_pc_d694
  store i32 %v1_d124, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_d2f4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_d2f4, label %dec_label_pc_d694, label %dec_label_pc_d47c

dec_label_pc_d47c:                                ; preds = %dec_label_pc_d468
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_d2cc, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %v1_d488.pre-phi, i32* @sb, align 4
  store i32 %v1_d48c.pre-phi, i32* @sl, align 4
  br label %dec_label_pc_d580

dec_label_pc_d494:                                ; preds = %dec_label_pc_d580
  %v0_d494 = load i32, i32* @fp, align 4
  %v7_d494 = icmp eq i32 %v0_d494, -1
  store i1 %v7_d494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d494, label %dec_label_pc_d608, label %dec_label_pc_d49c

dec_label_pc_d49c:                                ; preds = %dec_label_pc_d5a4, %dec_label_pc_d494
  store i32 %v3_d2e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d618, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d618, label %dec_label_pc_d624, label %dec_label_pc_d4b0

dec_label_pc_d4b0:                                ; preds = %dec_label_pc_d608.dec_label_pc_d4b0_crit_edge, %dec_label_pc_d49c
  %v1_d4b4 = phi i32 [ %v1_d4b4.pre, %dec_label_pc_d608.dec_label_pc_d4b0_crit_edge ], [ 65535, %dec_label_pc_d49c ]
  store i32 %v3_d2ec, i32* %r0.global-to-local, align 4
  %v9_d4b4 = icmp eq i32 %v3_d2ec, %v1_d4b4
  store i1 %v9_d4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4b4, label %dec_label_pc_d640, label %dec_label_pc_d4bc

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d624.dec_label_pc_d4bc_crit_edge, %dec_label_pc_d4b0
  %v1_d4c0 = phi i32 [ %v1_d4c0.pre, %dec_label_pc_d624.dec_label_pc_d4bc_crit_edge ], [ %v1_d4b4, %dec_label_pc_d4b0 ]
  store i32 %v3_d2f0, i32* %r1.global-to-local, align 4
  %v9_d4c0 = icmp eq i32 %v3_d2f0, %v1_d4c0
  store i1 %v9_d4c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4c0, label %dec_label_pc_d65c, label %dec_label_pc_d4c8

dec_label_pc_d4c8:                                ; preds = %dec_label_pc_d640, %dec_label_pc_d4bc
  store i32 %v1_d244, i32* %r2.global-to-local, align 4
  store i1 %v2_d4cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d4cc, label %dec_label_pc_d4d4, label %dec_label_pc_d678

dec_label_pc_d4d4:                                ; preds = %dec_label_pc_d4c8, %dec_label_pc_d65c, %dec_label_pc_d678
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d4d8 = load i32, i32* @r7, align 4
  %v1_d4d8 = trunc i32 %v0_d4d8 to i8
  %v2_d4d8 = load i32, i32* @r5, align 4
  %v3_d4d8 = add i32 %v2_d4d8, 10
  %v4_d4d8 = inttoptr i32 %v3_d4d8 to i8*
  store i8 %v1_d4d8, i8* %v4_d4d8, align 1
  %v0_d4dc = load i32, i32* @r7, align 4
  %v1_d4dc = trunc i32 %v0_d4dc to i8
  %v2_d4dc = load i32, i32* @r5, align 4
  %v3_d4dc = add i32 %v2_d4dc, 11
  %v4_d4dc = inttoptr i32 %v3_d4dc to i8*
  store i8 %v1_d4dc, i8* %v4_d4dc, align 1
  %v0_d4e0 = load i32, i32* @r5, align 4
  store i32 %v0_d4e0, i32* @r0, align 4
  %v2_d4e4 = call i32 @function_e498(i32 %v0_d4e0, i32 20)
  %v3_d4e4 = trunc i32 %v2_d4e4 to i8
  store i32 %v2_d4e4, i32* %r0.global-to-local, align 4
  %v4_d4e8 = sdiv i32 %v2_d4e4, 256
  store i32 %v4_d4e8, i32* %r3.global-to-local, align 4
  %v1_d4ec = trunc i32 %v4_d4e8 to i8
  %v2_d4ec = load i32, i32* @r5, align 4
  %v3_d4ec = add i32 %v2_d4ec, 11
  %v4_d4ec = inttoptr i32 %v3_d4ec to i8*
  store i8 %v1_d4ec, i8* %v4_d4ec, align 1
  %v3_d4f0 = load i32, i32* @r5, align 4
  %v4_d4f0 = add i32 %v3_d4f0, 10
  %v5_d4f0 = inttoptr i32 %v4_d4f0 to i8*
  store i8 %v3_d4e4, i8* %v5_d4f0, align 1
  %v0_d4f4 = load i32, i32* @r7, align 4
  %v1_d4f4 = trunc i32 %v0_d4f4 to i8
  %v2_d4f4 = load i32, i32* @r6, align 4
  %v3_d4f4 = add i32 %v2_d4f4, 6
  %v4_d4f4 = inttoptr i32 %v3_d4f4 to i8*
  store i8 %v1_d4f4, i8* %v4_d4f4, align 1
  %v0_d4f8 = load i32, i32* @r7, align 4
  %v1_d4f8 = trunc i32 %v0_d4f8 to i8
  %v2_d4f8 = load i32, i32* @r6, align 4
  %v3_d4f8 = add i32 %v2_d4f8, 7
  %v4_d4f8 = inttoptr i32 %v3_d4f8 to i8*
  store i8 %v1_d4f8, i8* %v4_d4f8, align 1
  %v0_d4fc = load i32, i32* @r5, align 4
  %v1_d4fc = add i32 %v0_d4fc, 24
  %v2_d4fc = inttoptr i32 %v1_d4fc to i8*
  %v3_d4fc = load i8, i8* %v2_d4fc, align 1
  %v4_d4fc = zext i8 %v3_d4fc to i32
  store i32 %v4_d4fc, i32* %r3.global-to-local, align 4
  %v1_d500 = add i32 %v0_d4fc, 25
  %v2_d500 = inttoptr i32 %v1_d500 to i8*
  %v3_d500 = load i8, i8* %v2_d500, align 1
  %v4_d500 = zext i8 %v3_d500 to i32
  %v0_d504 = load i32, i32* @r6, align 4
  store i32 %v0_d504, i32* @r1, align 4
  %v4_d508 = mul nuw nsw i32 %v4_d500, 256
  %v5_d508 = or i32 %v4_d508, %v4_d4fc
  store i32 %v5_d508, i32* %r2.global-to-local, align 4
  store i32 %v0_d4fc, i32* %r0.global-to-local, align 4
  %v0_d510 = load i32, i32* @sb, align 4
  store i32 %v0_d510, i32* %r3.global-to-local, align 4
  %v4_d514 = call i32 @function_e4f4(i32 %v0_d4fc, i32 %v0_d504, i32 %v5_d508, i32 %v0_d510)
  %v5_d514 = trunc i32 %v4_d514 to i8
  store i32 %v4_d514, i32* %r0.global-to-local, align 4
  %v4_d51824 = udiv i32 %v4_d514, 256
  %v1_d51c = trunc i32 %v4_d51824 to i8
  %v2_d51c = load i32, i32* @r6, align 4
  %v3_d51c = add i32 %v2_d51c, 7
  %v4_d51c = inttoptr i32 %v3_d51c to i8*
  store i8 %v1_d51c, i8* %v4_d51c, align 1
  %v3_d520 = load i32, i32* @r6, align 4
  %v4_d520 = add i32 %v3_d520, 6
  %v5_d520 = inttoptr i32 %v4_d520 to i8*
  store i8 %v5_d514, i8* %v5_d520, align 1
  %v3_d524 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d524, i32* %r3.global-to-local, align 4
  %v0_d528 = load i32, i32* @r5, align 4
  %v1_d528 = add i32 %v0_d528, 20
  %v2_d528 = inttoptr i32 %v1_d528 to i32*
  %v3_d528 = load i32, i32* %v2_d528, align 4
  %v3_d530 = udiv i32 %v3_d528, 65536
  store i32 %v3_d530, i32* %r2.global-to-local, align 4
  %v5_d534 = mul i32 %v3_d524, 24
  %v1_d538 = load i32, i32* @r8, align 4
  %v2_d538 = add i32 %v1_d538, %v5_d534
  store i32 %v2_d538, i32* %ip.global-to-local, align 4
  %v3_d53c21 = udiv i32 %v3_d528, 16777216
  %v1_d540 = trunc i32 %v3_d53c21 to i8
  %v3_d540 = add i32 %v2_d538, 3
  %v4_d540 = inttoptr i32 %v3_d540 to i8*
  store i8 %v1_d540, i8* %v4_d540, align 1
  %v0_d544 = load i32, i32* %r2.global-to-local, align 4
  %v1_d544 = trunc i32 %v0_d544 to i8
  %v2_d544 = load i32, i32* %ip.global-to-local, align 4
  %v3_d544 = add i32 %v2_d544, 2
  %v4_d544 = inttoptr i32 %v3_d544 to i8*
  store i8 %v1_d544, i8* %v4_d544, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_d550 = load i32, i32* @r5, align 4
  store i32 %v0_d550, i32* %r1.global-to-local, align 4
  store i32 %v3_d27c, i32* %r0.global-to-local, align 4
  %v0_d558 = load i32, i32* @sl, align 4
  store i32 %v0_d558, i32* %r2.global-to-local, align 4
  %v0_d560 = load i32, i32* %ip.global-to-local, align 4
  %v6_d564 = inttoptr i32 %v0_d550 to i32*
  %v7_d564 = call i32 @function_13268(i32 %v3_d27c, i32* %v6_d564, i32 %v0_d558, i32 16384, i32 %v0_d560, i32 16)
  %v3_d568 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d568, i32* %r3.global-to-local, align 4
  store i32 %v1_d124, i32* @r4, align 4
  %v1_d570 = add i32 %v3_d568, 1
  store i32 %v1_d570, i32* %r0.global-to-local, align 4
  %v9_d574 = icmp eq i32 %v1_d570, %v1_d124
  store i1 %v9_d574, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d570, i32* %stack_var_-40, align 4
  %v6_d57c = icmp slt i32 %v1_d570, %v1_d124
  br i1 %v6_d57c, label %dec_label_pc_d580, label %dec_label_pc_d694

dec_label_pc_d580:                                ; preds = %dec_label_pc_d4d4, %dec_label_pc_d47c
  %v1_d594 = phi i32 [ %v1_d570, %dec_label_pc_d4d4 ], [ 0, %dec_label_pc_d47c ]
  %v5_d584 = mul i32 %v1_d594, 24
  %v1_d588 = load i32, i32* @r8, align 4
  %v2_d588 = add i32 %v1_d588, %v5_d584
  store i32 %v2_d588, i32* %r3.global-to-local, align 4
  %v1_d590 = add i32 %v2_d588, 20
  %v2_d590 = inttoptr i32 %v1_d590 to i8*
  %v3_d590 = load i8, i8* %v2_d590, align 1
  %v4_d590 = zext i8 %v3_d590 to i32
  store i32 %v4_d590, i32* %r2.global-to-local, align 4
  %v4_d594 = mul i32 %v1_d594, 4
  %v5_d594 = add i32 %v4_d594, %v2_d150
  %v6_d594 = inttoptr i32 %v5_d594 to i32*
  %v7_d594 = load i32, i32* %v6_d594, align 4
  store i32 %v7_d594, i32* @r5, align 4
  %v2_d598 = icmp ugt i8 %v3_d590, 30
  %v7_d598 = icmp eq i8 %v3_d590, 31
  store i1 %v7_d598, i1* %cpsr_z.global-to-local, align 1
  %v1_d59c = add i32 %v7_d594, 20
  store i32 %v1_d59c, i32* @r6, align 4
  %v2_d5a0 = xor i1 %v7_d598, true
  %v3_d5a0 = and i1 %v2_d598, %v2_d5a0
  br i1 %v3_d5a0, label %dec_label_pc_d494, label %dec_label_pc_d5a4

dec_label_pc_d5a4:                                ; preds = %dec_label_pc_d580
  %v1_d5a4 = add i32 %v2_d588, 16
  %v2_d5a4 = inttoptr i32 %v1_d5a4 to i32*
  %v3_d5a4 = load i32, i32* %v2_d5a4, align 4
  %v0_d5a8 = call i32 @function_f8c4()
  store i32 %v0_d5a8, i32* %r0.global-to-local, align 4
  %v3_d5ac = load i32, i32* %stack_var_-40, align 4
  %v5_d5b4 = mul i32 %v3_d5ac, 24
  %v1_d5bc = load i32, i32* @r8, align 4
  %v2_d5bc = add i32 %v1_d5bc, %v5_d5b4
  store i32 %v2_d5bc, i32* %r1.global-to-local, align 4
  %v1_d5c0 = and i32 %v3_d5a4, 65280
  store i32 %v1_d5c0, i32* %r3.global-to-local, align 4
  %v1_d5b8 = udiv i32 %v3_d5a4, 256
  %v3_d5c4 = and i32 %v1_d5b8, 65280
  store i32 %v3_d5c4, i32* %r2.global-to-local, align 4
  %v3_d5c8 = mul i32 %v3_d5a4, 16777216
  store i32 %v3_d5c8, i32* %ip.global-to-local, align 4
  %v1_d5cc = add i32 %v2_d5bc, 20
  %v2_d5cc = inttoptr i32 %v1_d5cc to i8*
  %v3_d5cc = load i8, i8* %v2_d5cc, align 1
  %v4_d5cc = zext i8 %v3_d5cc to i32
  %v4_d5d0 = mul nuw nsw i32 %v1_d5c0, 256
  %v5_d5d0 = or i32 %v4_d5d0, %v3_d5c8
  store i32 %v5_d5d0, i32* %ip.global-to-local, align 4
  %v2_d5d8 = call i32 @llvm.bswap.i32(i32 %v3_d5a4)
  %v7_d5dc = lshr i32 %v0_d5a8, %v4_d5cc
  %v8_d5dc = add i32 %v7_d5dc, %v2_d5d8
  store i32 %v8_d5dc, i32* %r2.global-to-local, align 4
  %v3_d5e8 = mul i32 %v8_d5dc, 16777216
  %v1_d5ec = and i32 %v8_d5dc, 65280
  store i32 %v1_d5ec, i32* %r0.global-to-local, align 4
  %v4_d5f0 = mul nuw nsw i32 %v1_d5ec, 256
  %v5_d5f0 = or i32 %v4_d5f0, %v3_d5e8
  store i32 %v5_d5f0, i32* %r1.global-to-local, align 4
  %v2_d5f8 = call i32 @llvm.bswap.i32(i32 %v8_d5dc)
  store i32 %v2_d5f8, i32* %r3.global-to-local, align 4
  %v0_d5fc = load i32, i32* @fp, align 4
  %v3_d5fc = icmp eq i32 %v0_d5fc, -1
  %v8_d5fc = icmp eq i32 %v0_d5fc, -1
  store i1 %v8_d5fc, i1* %cpsr_z.global-to-local, align 1
  %v1_d600 = load i32, i32* @r5, align 4
  %v2_d600 = add i32 %v1_d600, 16
  %v3_d600 = inttoptr i32 %v2_d600 to i32*
  store i32 %v2_d5f8, i32* %v3_d600, align 4
  br i1 %v3_d5fc, label %dec_label_pc_d608, label %dec_label_pc_d49c

dec_label_pc_d608:                                ; preds = %dec_label_pc_d5a4, %dec_label_pc_d494
  %v0_d608 = call i32 @function_f8c4()
  store i32 %v0_d608, i32* %r0.global-to-local, align 4
  store i32 %v3_d2e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d618, i1* %cpsr_z.global-to-local, align 1
  %v1_d61c = load i32, i32* @r5, align 4
  %v2_d61c = add i32 %v1_d61c, 12
  %v3_d61c = inttoptr i32 %v2_d61c to i32*
  store i32 %v0_d608, i32* %v3_d61c, align 4
  br i1 %v3_d618, label %dec_label_pc_d624, label %dec_label_pc_d608.dec_label_pc_d4b0_crit_edge

dec_label_pc_d608.dec_label_pc_d4b0_crit_edge:    ; preds = %dec_label_pc_d608
  %v1_d4b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4b0

dec_label_pc_d624:                                ; preds = %dec_label_pc_d608, %dec_label_pc_d49c
  %v0_d624 = call i32 @function_f8c4()
  %v1_d624 = trunc i32 %v0_d624 to i8
  %v4_d628 = sdiv i32 %v0_d624, 256
  store i32 %v4_d628, i32* %r3.global-to-local, align 4
  %v3_d62c = load i32, i32* @r5, align 4
  %v4_d62c = add i32 %v3_d62c, 4
  %v5_d62c = inttoptr i32 %v4_d62c to i8*
  store i8 %v1_d624, i8* %v5_d62c, align 1
  store i32 %v3_d2ec, i32* %r0.global-to-local, align 4
  %v1_d634 = load i32, i32* @r4, align 4
  %v9_d634 = icmp eq i32 %v3_d2ec, %v1_d634
  store i1 %v9_d634, i1* %cpsr_z.global-to-local, align 1
  %v0_d638 = load i32, i32* %r3.global-to-local, align 4
  %v1_d638 = trunc i32 %v0_d638 to i8
  %v2_d638 = load i32, i32* @r5, align 4
  %v3_d638 = add i32 %v2_d638, 5
  %v4_d638 = inttoptr i32 %v3_d638 to i8*
  store i8 %v1_d638, i8* %v4_d638, align 1
  %v0_d63c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d63c, label %dec_label_pc_d640, label %dec_label_pc_d624.dec_label_pc_d4bc_crit_edge

dec_label_pc_d624.dec_label_pc_d4bc_crit_edge:    ; preds = %dec_label_pc_d624
  %v1_d4c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4bc

dec_label_pc_d640:                                ; preds = %dec_label_pc_d624, %dec_label_pc_d4b0
  %v0_d640 = call i32 @function_f8c4()
  %v1_d640 = trunc i32 %v0_d640 to i8
  store i32 %v0_d640, i32* %r0.global-to-local, align 4
  store i32 %v3_d2f0, i32* %r1.global-to-local, align 4
  %v4_d648 = sdiv i32 %v0_d640, 256
  store i32 %v4_d648, i32* %r3.global-to-local, align 4
  %v1_d64c = load i32, i32* @r4, align 4
  %v9_d64c = icmp eq i32 %v3_d2f0, %v1_d64c
  store i1 %v9_d64c, i1* %cpsr_z.global-to-local, align 1
  %v3_d650 = load i32, i32* @r5, align 4
  %v4_d650 = add i32 %v3_d650, 20
  %v5_d650 = inttoptr i32 %v4_d650 to i8*
  store i8 %v1_d640, i8* %v5_d650, align 1
  %v0_d654 = load i32, i32* %r3.global-to-local, align 4
  %v1_d654 = trunc i32 %v0_d654 to i8
  %v2_d654 = load i32, i32* @r6, align 4
  %v3_d654 = add i32 %v2_d654, 1
  %v4_d654 = inttoptr i32 %v3_d654 to i8*
  store i8 %v1_d654, i8* %v4_d654, align 1
  %v0_d658 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d658, label %dec_label_pc_d65c, label %dec_label_pc_d4c8

dec_label_pc_d65c:                                ; preds = %dec_label_pc_d640, %dec_label_pc_d4bc
  %v0_d65c = call i32 @function_f8c4()
  %v1_d65c = trunc i32 %v0_d65c to i8
  store i32 %v0_d65c, i32* %r0.global-to-local, align 4
  store i32 %v1_d244, i32* %r2.global-to-local, align 4
  %v4_d664 = sdiv i32 %v0_d65c, 256
  store i32 %v4_d664, i32* %r3.global-to-local, align 4
  store i1 %v2_d4cc, i1* %cpsr_z.global-to-local, align 1
  %v1_d66c = trunc i32 %v4_d664 to i8
  %v2_d66c = load i32, i32* @r6, align 4
  %v3_d66c = add i32 %v2_d66c, 3
  %v4_d66c = inttoptr i32 %v3_d66c to i8*
  store i8 %v1_d66c, i8* %v4_d66c, align 1
  %v3_d670 = load i32, i32* @r6, align 4
  %v4_d670 = add i32 %v3_d670, 2
  %v5_d670 = inttoptr i32 %v4_d670 to i8*
  store i8 %v1_d65c, i8* %v5_d670, align 1
  %v0_d674 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d674, label %dec_label_pc_d4d4, label %dec_label_pc_d678

dec_label_pc_d678:                                ; preds = %dec_label_pc_d4c8, %dec_label_pc_d65c
  %v0_d678 = load i32, i32* @r5, align 4
  %v1_d678 = add i32 %v0_d678, 28
  store i32 %v1_d678, i32* @r4, align 4
  store i32 %v1_d678, i32* %r0.global-to-local, align 4
  store i32 %v0_d2cc, i32* %r1.global-to-local, align 4
  %v2_d684 = call i32 @function_f978(i32 %v1_d678, i32 %v0_d2cc)
  store i32 %v2_d684, i32* %r0.global-to-local, align 4
  store i32 %v0_d2cc, i32* %r3.global-to-local, align 4
  %v0_d68c = load i32, i32* @r7, align 4
  %v1_d68c = trunc i32 %v0_d68c to i8
  %v2_d68c = load i32, i32* @r4, align 4
  %v4_d68c = add i32 %v2_d68c, %v0_d2cc
  %v5_d68c = inttoptr i32 %v4_d68c to i8*
  store i8 %v1_d68c, i8* %v5_d68c, align 1
  br label %dec_label_pc_d4d4

dec_label_pc_d694:                                ; preds = %dec_label_pc_d4d4, %dec_label_pc_d468
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_d698 = call i32 @function_12cb0(i32* null)
  store i32 %v2_d698, i32* %r0.global-to-local, align 4
  store i32 %v2_d268, i32* %sb.global-to-local, align 4
  %v9_d6a0 = icmp eq i32 %v2_d268, %v2_d698
  store i1 %v9_d6a0, i1* %cpsr_z.global-to-local, align 1
  %v6_d6a4 = icmp slt i32 %v2_d268, %v2_d698
  br i1 %v6_d6a4, label %dec_label_pc_d6a8, label %dec_label_pc_d468

dec_label_pc_d6a8:                                ; preds = %dec_label_pc_d694, %dec_label_pc_d120, %dec_label_pc_d6b0
  %v29_d6ac = phi i32 [ %v3_d27c, %dec_label_pc_d120 ], [ %v1_d6b4, %dec_label_pc_d6b0 ], [ %v2_d698, %dec_label_pc_d694 ]
  store i32 %v18_d120, i32* %sb.global-to-local, align 4
  store i32 %v21_d120, i32* %sl.global-to-local, align 4
  ret i32 %v29_d6ac

dec_label_pc_d6b0:                                ; preds = %dec_label_pc_d28c
  store i32 %v3_d27c, i32* %r0.global-to-local, align 4
  %v1_d6b4 = call i32 @function_129e0(i32 %v3_d27c)
  store i32 %v1_d6b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d6a8

dec_label_pc_d6bc:                                ; preds = %dec_label_pc_d30c
  %v3_d6c0 = sext i8 %v5_d360 to i32
  %v7_d6c0 = sext i8 %v5_d364 to i32
  %v3_d6c4 = sdiv i32 %v3_d6c0, 256
  store i32 %v3_d6c4, i32* %r1.global-to-local, align 4
  %v3_d6c8 = sdiv i32 %v7_d6c0, 256
  store i32 %v3_d6c8, i32* %r2.global-to-local, align 4
  store i32 %v1_d318, i32* %r3.global-to-local, align 4
  store i32 %v0_d2f8, i32* @r4, align 4
  store i32 %v1_d35c, i32* %sl.global-to-local, align 4
  %v3_d6e420 = udiv i32 %v1_d350, 256
  store i32 %v3_d6e420, i32* @r7, align 4
  %v4_d730 = sext i8 %v5_d188 to i32
  %sext9 = mul i32 %v6_d1e8, 16777216
  %v4_d7a0 = sdiv i32 %sext9, 16777216
  %v1_d790 = trunc i32 %v3_d6c4 to i8
  br label %dec_label_pc_d6e8

dec_label_pc_d6e8:                                ; preds = %dec_label_pc_d6e8, %dec_label_pc_d6bc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d6f4 = call i32 @function_135b8(i32 1510, i32 1)
  store i32 %v2_d6f4, i32* %r0.global-to-local, align 4
  store i32 %v2_d150, i32* %ip.global-to-local, align 4
  %v3_d6fc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d6fc, i32* %r2.global-to-local, align 4
  %v2_d700 = load i32, i32* @r4, align 4
  %v5_d700 = mul i32 %v2_d700, 4
  %v6_d700 = add i32 %v5_d700, %v2_d150
  %v7_d700 = inttoptr i32 %v6_d700 to i32*
  store i32 %v2_d6f4, i32* %v7_d700, align 4
  %v0_d704 = load i32, i32* %ip.global-to-local, align 4
  %v1_d704 = load i32, i32* %r2.global-to-local, align 4
  %v4_d704 = mul i32 %v1_d704, 4
  %v5_d704 = add i32 %v4_d704, %v0_d704
  %v6_d704 = inttoptr i32 %v5_d704 to i32*
  %v7_d704 = load i32, i32* %v6_d704, align 4
  store i32 %v7_d704, i32* %r1.global-to-local, align 4
  %v1_d708 = inttoptr i32 %v7_d704 to i8*
  %v2_d708 = load i8, i8* %v1_d708, align 1
  %tmp67 = urem i8 %v2_d708, 16
  %v1_d70c = zext i8 %tmp67 to i32
  %v1_d710 = or i32 %v1_d70c, 64
  store i32 %v1_d710, i32* %r3.global-to-local, align 4
  %v1_d714 = trunc i32 %v1_d710 to i8
  store i8 %v1_d714, i8* %v1_d708, align 1
  %v0_d718 = load i32, i32* %r1.global-to-local, align 4
  %v1_d718 = inttoptr i32 %v0_d718 to i8*
  %v2_d718 = load i8, i8* %v1_d718, align 1
  %v3_d718 = zext i8 %v2_d718 to i32
  %v1_d71c = and i32 %v3_d718, 240
  %v1_d720 = or i32 %v1_d71c, 5
  store i32 %v1_d720, i32* %r2.global-to-local, align 4
  %v3_d728 = add i32 %v0_d718, 9
  %v4_d728 = inttoptr i32 %v3_d728 to i8*
  store i8 17, i8* %v4_d728, align 1
  %v0_d72c = load i32, i32* %r2.global-to-local, align 4
  %v1_d72c = trunc i32 %v0_d72c to i8
  %v2_d72c = load i32, i32* %r1.global-to-local, align 4
  %v3_d72c = inttoptr i32 %v2_d72c to i8*
  store i8 %v1_d72c, i8* %v3_d72c, align 1
  store i32 %v4_d730, i32* %r0.global-to-local, align 4
  %v2_d734 = load i32, i32* %r1.global-to-local, align 4
  %v3_d734 = add i32 %v2_d734, 1
  %v4_d734 = inttoptr i32 %v3_d734 to i8*
  store i8 %v5_d188, i8* %v4_d734, align 1
  %v2_d73c = load i32, i32* %r1.global-to-local, align 4
  %v3_d73c = add i32 %v2_d73c, 8
  %v4_d73c = inttoptr i32 %v3_d73c to i8*
  store i8 %v5_d1c0, i8* %v4_d73c, align 1
  %v3_d740 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d740, i32* %r2.global-to-local, align 4
  %v3_d744 = mul i32 %v3_d740, 32
  store i32 %v3_d744, i32* %r3.global-to-local, align 4
  %v0_d748 = load i32, i32* @fp, align 4
  %v1_d748 = load i32, i32* %r1.global-to-local, align 4
  %v2_d748 = add i32 %v1_d748, 12
  %v3_d748 = inttoptr i32 %v2_d748 to i32*
  store i32 %v0_d748, i32* %v3_d748, align 4
  %v0_d74c = load i32, i32* %r3.global-to-local, align 4
  %v1_d74c = load i32, i32* %r2.global-to-local, align 4
  %tmp68 = mul i32 %v1_d74c, -8
  %v5_d74c = add i32 %v0_d74c, %tmp68
  %v1_d750 = load i32, i32* @r8, align 4
  %v2_d750 = add i32 %v5_d74c, %v1_d750
  store i32 %v2_d750, i32* %r3.global-to-local, align 4
  %v1_d754 = add i32 %v2_d750, 16
  %v2_d754 = inttoptr i32 %v1_d754 to i32*
  %v3_d754 = load i32, i32* %v2_d754, align 4
  store i32 %v1_d124, i32* %r3.global-to-local, align 4
  %v1_d75c = add i32 %v1_d74c, 1
  store i32 %v1_d75c, i32* @r4, align 4
  %v1_d760 = load i32, i32* %r1.global-to-local, align 4
  %v2_d760 = add i32 %v1_d760, 16
  %v3_d760 = inttoptr i32 %v2_d760 to i32*
  store i32 %v3_d754, i32* %v3_d760, align 4
  store i32 %v3_d6c0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_d76c = load i32, i32* @r4, align 4
  %v1_d76c = load i32, i32* %r3.global-to-local, align 4
  %v9_d76c = icmp eq i32 %v0_d76c, %v1_d76c
  store i1 %v9_d76c, i1* %cpsr_z.global-to-local, align 1
  %v2_d774 = load i32, i32* %r1.global-to-local, align 4
  %v3_d774 = add i32 %v2_d774, 6
  %v4_d774 = inttoptr i32 %v3_d774 to i8*
  store i8 64, i8* %v4_d774, align 1
  %v0_d778 = load i32, i32* %r2.global-to-local, align 4
  %v1_d778 = trunc i32 %v0_d778 to i8
  %v2_d778 = load i32, i32* %r1.global-to-local, align 4
  %v3_d778 = add i32 %v2_d778, 7
  %v4_d778 = inttoptr i32 %v3_d778 to i8*
  store i8 %v1_d778, i8* %v4_d778, align 1
  %v0_d77c = load i32, i32* %ip.global-to-local, align 4
  %v1_d77c = trunc i32 %v0_d77c to i8
  %v2_d77c = load i32, i32* %r1.global-to-local, align 4
  %v3_d77c = add i32 %v2_d77c, 2
  %v4_d77c = inttoptr i32 %v3_d77c to i8*
  store i8 %v1_d77c, i8* %v4_d77c, align 1
  store i32 %v3_d6c4, i32* %r2.global-to-local, align 4
  store i32 %v7_d6c0, i32* %r3.global-to-local, align 4
  store i32 %v3_d6c8, i32* %ip.global-to-local, align 4
  %v0_d78c = load i32, i32* %r1.global-to-local, align 4
  %v1_d78c = add i32 %v0_d78c, 20
  store i32 %v1_d78c, i32* %r0.global-to-local, align 4
  %v3_d790 = add i32 %v0_d78c, 3
  %v4_d790 = inttoptr i32 %v3_d790 to i8*
  store i8 %v1_d790, i8* %v4_d790, align 1
  %v0_d794 = load i32, i32* %r3.global-to-local, align 4
  %v1_d794 = trunc i32 %v0_d794 to i8
  %v2_d794 = load i32, i32* %r1.global-to-local, align 4
  %v3_d794 = add i32 %v2_d794, 4
  %v4_d794 = inttoptr i32 %v3_d794 to i8*
  store i8 %v1_d794, i8* %v4_d794, align 1
  %v0_d798 = load i32, i32* %ip.global-to-local, align 4
  %v1_d798 = trunc i32 %v0_d798 to i8
  %v2_d798 = load i32, i32* %r1.global-to-local, align 4
  %v3_d798 = add i32 %v2_d798, 5
  %v4_d798 = inttoptr i32 %v3_d798 to i8*
  store i8 %v1_d798, i8* %v4_d798, align 1
  %v0_d79c = load i32, i32* @r5, align 4
  %v1_d79c = trunc i32 %v0_d79c to i8
  %v2_d79c = load i32, i32* %r1.global-to-local, align 4
  %v3_d79c = add i32 %v2_d79c, 20
  %v4_d79c = inttoptr i32 %v3_d79c to i8*
  store i8 %v1_d79c, i8* %v4_d79c, align 1
  store i32 %v4_d7a0, i32* %r1.global-to-local, align 4
  %v0_d7a4 = load i32, i32* @r7, align 4
  %v1_d7a4 = trunc i32 %v0_d7a4 to i8
  %v2_d7a4 = load i32, i32* %r0.global-to-local, align 4
  %v3_d7a4 = add i32 %v2_d7a4, 5
  %v4_d7a4 = inttoptr i32 %v3_d7a4 to i8*
  store i8 %v1_d7a4, i8* %v4_d7a4, align 1
  %v0_d7a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d7a8 = trunc i32 %v0_d7a8 to i8
  %v2_d7a8 = load i32, i32* %r0.global-to-local, align 4
  %v3_d7a8 = add i32 %v2_d7a8, 1
  %v4_d7a8 = inttoptr i32 %v3_d7a8 to i8*
  store i8 %v1_d7a8, i8* %v4_d7a8, align 1
  %v0_d7ac = load i32, i32* @r6, align 4
  %v1_d7ac = trunc i32 %v0_d7ac to i8
  %v2_d7ac = load i32, i32* %r0.global-to-local, align 4
  %v3_d7ac = add i32 %v2_d7ac, 2
  %v4_d7ac = inttoptr i32 %v3_d7ac to i8*
  store i8 %v1_d7ac, i8* %v4_d7ac, align 1
  %v0_d7b0 = load i32, i32* %sl.global-to-local, align 4
  %v1_d7b0 = trunc i32 %v0_d7b0 to i8
  %v2_d7b0 = load i32, i32* %r0.global-to-local, align 4
  %v3_d7b0 = add i32 %v2_d7b0, 3
  %v4_d7b0 = inttoptr i32 %v3_d7b0 to i8*
  store i8 %v1_d7b0, i8* %v4_d7b0, align 1
  %v0_d7b4 = load i32, i32* %sb.global-to-local, align 4
  %v1_d7b4 = trunc i32 %v0_d7b4 to i8
  %v2_d7b4 = load i32, i32* %r0.global-to-local, align 4
  %v3_d7b4 = add i32 %v2_d7b4, 4
  %v4_d7b4 = inttoptr i32 %v3_d7b4 to i8*
  store i8 %v1_d7b4, i8* %v4_d7b4, align 1
  %v0_d7b8 = load i32, i32* @r4, align 4
  store i32 %v0_d7b8, i32* %stack_var_-40, align 4
  %v5_d7bc = icmp slt i32 %v0_d76c, %v1_d76c
  br i1 %v5_d7bc, label %dec_label_pc_d6e8, label %dec_label_pc_d468.preheader

; uselistorder directives
  uselistorder i32 %v1_d74c, { 1, 0 }
  uselistorder i32 %v3_d6c8, { 1, 0 }
  uselistorder i32 %v3_d6c4, { 2, 1, 0 }
  uselistorder i32 %v7_d6c0, { 1, 0 }
  uselistorder i32 %v3_d6c0, { 1, 0 }
  uselistorder i32 %v1_d6b4, { 1, 0 }
  uselistorder i32 %v4_d664, { 1, 0 }
  uselistorder i32 %v0_d65c, { 0, 2, 1 }
  uselistorder i32 %v0_d640, { 0, 2, 1 }
  uselistorder i32 %v2_d5f8, { 1, 0 }
  uselistorder i32 %v8_d5dc, { 1, 2, 0, 3 }
  uselistorder i32 %v3_d5c8, { 1, 0 }
  uselistorder i32 %v3_d5a4, { 1, 3, 2, 0 }
  uselistorder i32 %v1_d570, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_d514, { 0, 2, 1 }
  uselistorder i32 %v0_d4fc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d4e8, { 1, 0 }
  uselistorder i32 %v2_d4e4, { 0, 2, 1 }
  uselistorder i1 %v7_d494, { 1, 0 }
  uselistorder i1 %v3_d618, { 1, 0, 2, 3 }
  uselistorder i32 %v1_d404, { 1, 0 }
  uselistorder i8 %v5_d364, { 0, 2, 1 }
  uselistorder i8 %v5_d360, { 1, 0 }
  uselistorder i32 %v1_d35c, { 1, 2, 0 }
  uselistorder i32 %v3_d348, { 1, 0 }
  uselistorder i32 %v1_d334, { 1, 0 }
  uselistorder i32 %v1_d318, { 1, 2, 0 }
  uselistorder i32 %v1_d314, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v1_d310, { 3, 4, 0, 2, 1 }
  uselistorder i1 %v2_d2f4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d2e8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d2dc, { 1, 0, 2 }
  uselistorder i32 %v0_d2cc, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_d2c0, { 3, 1, 2, 0 }
  uselistorder i1 %v7_d2ac, { 1, 0 }
  uselistorder i1 %v7_d280, { 1, 0 }
  uselistorder i32 %v3_d27c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_d268, { 2, 1, 0 }
  uselistorder i32 %v1_d244, { 3, 1, 2, 0 }
  uselistorder i32 %v6_d1e8, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_d1d0, { 1, 0 }
  uselistorder i8 %v5_d1c0, { 0, 2, 1 }
  uselistorder i32 %v6_d1a4, { 1, 0 }
  uselistorder i32 %v7_d18c, { 0, 2, 1, 4, 3, 5 }
  uselistorder i8 %v5_d188, { 1, 0, 2 }
  uselistorder i32 %v6_d168, { 1, 0 }
  uselistorder i32 %v2_d150, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_d124, { 6, 2, 3, 4, 1, 5, 9, 0, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 51, 50, 53, 52, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 11, 10, 13, 12, 15, 14, 17, 18, 16, 20, 19, 22, 21, 23, 25, 24, 32, 26, 27, 28, 29, 30, 31, 37, 33, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_d6a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d678, { 1, 0 }
  uselistorder label %dec_label_pc_d4d4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d468, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
}

define i32 @function_d7c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d7c8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_d7c8 = load i32, i32* @r4, align 4
  %v12_d7c8 = load i32, i32* @r7, align 4
  %v15_d7c8 = load i32, i32* @r8, align 4
  %v1_d7cc = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  %v1_d7e8 = urem i32 %arg4, 256
  store i32 %v1_d7e8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_d7f8 = call i32 @function_135b8(i32 %v1_d7cc, i32 4)
  %v0_d7fc = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d804 = load i32, i32* @r7, align 4
  store i32 %v0_d804, i32* %r3.global-to-local, align 4
  store i32 %v2_d7f8, i32* %fp.global-to-local, align 4
  %v0_d80c = load i32, i32* @r4, align 4
  %v4_d810 = inttoptr i32 %v0_d7fc to i32*
  %v5_d810 = call i32 @function_829c(i32 %v0_d80c, i32* %v4_d810, i32 2, i32 %v0_d804)
  %v1_d81c = urem i32 %v5_d810, 256
  store i32 %v1_d81c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d828 = load i32, i32* @r4, align 4
  %v0_d82c = load i32, i32* @r5, align 4
  %v5_d830 = trunc i32 %v5_d810 to i8
  %v6_d834 = inttoptr i32 %v0_d82c to i32*
  %v7_d834 = call i32 @function_829c(i32 %v0_d828, i32* %v6_d834, i32 3, i32 65535)
  %v0_d838 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_d844 = load i32, i32* @r4, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_d84c = inttoptr i32 %v0_d838 to i32*
  %v6_d84c = call i32 @function_829c(i32 %v0_d844, i32* %v5_d84c, i32 4, i32 64)
  %v1_d854 = urem i32 %v6_d84c, 256
  store i32 %v1_d854, i32* %ip.global-to-local, align 4
  %v0_d858 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_d860 = load i32, i32* @r7, align 4
  store i32 %v0_d860, i32* %r3.global-to-local, align 4
  %v0_d864 = load i32, i32* @r4, align 4
  %v6_d86c = inttoptr i32 %v0_d858 to i32*
  %v7_d86c = call i32 @function_829c(i32 %v0_d864, i32* %v6_d86c, i32 5, i32 %v0_d860)
  %v1_d878 = urem i32 %v7_d86c, 256
  store i32 %v1_d878, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d884 = load i32, i32* @r4, align 4
  %v0_d888 = load i32, i32* @r5, align 4
  %v5_d890 = inttoptr i32 %v0_d888 to i32*
  %v6_d890 = call i32 @function_829c(i32 %v0_d884, i32* %v5_d890, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d8a0 = load i32, i32* @r5, align 4
  store i32 %v6_d890, i32* @r8, align 4
  %v0_d8a8 = load i32, i32* @r4, align 4
  %v4_d8ac = inttoptr i32 %v0_d8a0 to i32*
  %v5_d8ac = call i32 @function_829c(i32 %v0_d8a8, i32* %v4_d8ac, i32 7, i32 27015)
  store i32 %v5_d8ac, i32* @r4, align 4
  %v0_d8b4 = load i32, i32* @r7, align 4
  store i32 %v0_d8b4, i32* %stack_var_-44, align 4
  %v1_d8bc = inttoptr i32 %v0_d8b4 to i32*
  %v2_d8bc = call i32 @function_12cb0(i32* %v1_d8bc)
  %v1_d8c0 = load i32, i32* @r6, align 4
  %v2_d8c0 = add i32 %v1_d8c0, %v2_d8bc
  %v1_d8cc = call i32 @function_11598(i32 36)
  %v3_d8d8 = call i32 @function_114b4(i32 36, i32* nonnull %stack_var_-44)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d8ec = call i32 @function_132cc(i32 2, i32 3, i32 17)
  %v7_d8f0 = icmp eq i32 %v3_d8ec, -1
  store i1 %v7_d8f0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d8ec, i32* %sb.global-to-local, align 4
  br i1 %v7_d8f0, label %dec_label_pc_dcb0, label %dec_label_pc_d8fc

dec_label_pc_d8fc:                                ; preds = %dec_label_pc_d7c8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d904 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d904, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_d90c = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d918 = call i32 @function_1329c(i32 %v3_d8ec, i32 %v0_d90c, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_d91c = icmp eq i32 %v6_d918, -1
  store i1 %v7_d91c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d91c, label %dec_label_pc_dcb8, label %dec_label_pc_d924

dec_label_pc_d924:                                ; preds = %dec_label_pc_d8fc
  store i32 %v1_d7cc, i32* %r2.global-to-local, align 4
  %v0_d930 = load i32, i32* @r4, align 4
  %v3_d930 = mul i32 %v0_d930, 65536
  store i32 %v3_d930, i32* @lr, align 4
  %v0_d934 = load i32, i32* @r8, align 4
  %v3_d934 = mul i32 %v0_d934, 65536
  store i32 %v3_d934, i32* %ip.global-to-local, align 4
  %v3_d938 = urem i32 %v7_d834, 65536
  store i32 %v3_d938, i32* %r3.global-to-local, align 4
  %v3_d93c = urem i32 %v0_d934, 65536
  store i32 %v3_d93c, i32* %r4.global-to-local, align 4
  %v3_d940 = urem i32 %v0_d930, 65536
  %v2_d944 = icmp eq i32 %v1_d7cc, 0
  store i1 %v2_d944, i1* %cpsr_z.global-to-local, align 1
  %v0_d948 = load i32, i32* @r7, align 4
  store i32 %v0_d948, i32* %stack_var_-40, align 4
  br i1 %v2_d944, label %dec_label_pc_dc9c.critedge, label %dec_label_pc_d95c

dec_label_pc_d95c:                                ; preds = %dec_label_pc_d924
  %v1_d960 = urem i32 %v7_d834, 256
  %v1_d964 = urem i32 %v0_d930, 256
  %tmp41 = udiv i32 %v7_d834, 256
  %v3_d96c = urem i32 %tmp41, 256
  %v3_d970 = mul nuw nsw i32 %v1_d964, 256
  store i32 %v3_d970, i32* %r3.global-to-local, align 4
  %v1_d974 = urem i32 %v0_d934, 256
  %v4_d978 = mul nuw nsw i32 %v1_d960, 256
  %v5_d978 = or i32 %v4_d978, %v3_d96c
  store i32 %v5_d978, i32* %r8.global-to-local, align 4
  %tmp42 = udiv i32 %v0_d934, 256
  %v3_d97c = urem i32 %tmp42, 256
  store i32 %v3_d97c, i32* %ip.global-to-local, align 4
  %tmp43 = udiv i32 %v0_d930, 256
  %v4_d980 = urem i32 %tmp43, 256
  %v5_d980 = or i32 %v4_d980, %v3_d970
  store i32 %v5_d980, i32* @r5, align 4
  %v4_d984 = mul nuw nsw i32 %v1_d974, 256
  %v5_d984 = or i32 %v4_d984, %v3_d97c
  store i32 %v5_d984, i32* @r6, align 4
  store i32 %v1_d964, i32* %r2.global-to-local, align 4
  store i32 %v0_d948, i32* @r4, align 4
  store i32 %v1_d974, i32* @r7, align 4
  %sext = mul i32 %v6_d84c, 16777216
  %v4_da00 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v7_d834, 16777216
  %v4_da1c = sdiv i32 %sext5, 16777216
  %sext6 = mul i32 %v0_d930, 16777216
  %v4_da78 = sdiv i32 %sext6, 16777216
  %v2_da04 = icmp eq i32 %v1_d878, 0
  %v1_da08 = trunc i32 %v4_da00 to i8
  br label %dec_label_pc_d9a0

dec_label_pc_d9a0:                                ; preds = %bb47, %dec_label_pc_d95c
  %v2_d9a8 = call i32 @function_135b8(i32 128, i32 1)
  %v3_d9ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9ac, i32* %r3.global-to-local, align 4
  %v1_d9b0 = load i32, i32* %fp.global-to-local, align 4
  %v2_d9b0 = load i32, i32* @r4, align 4
  %v5_d9b0 = mul i32 %v2_d9b0, 4
  %v6_d9b0 = add i32 %v5_d9b0, %v1_d9b0
  %v7_d9b0 = inttoptr i32 %v6_d9b0 to i32*
  store i32 %v2_d9a8, i32* %v7_d9b0, align 4
  %v0_d9b4 = load i32, i32* %fp.global-to-local, align 4
  %v1_d9b4 = load i32, i32* %r3.global-to-local, align 4
  %v4_d9b4 = mul i32 %v1_d9b4, 4
  %v5_d9b4 = add i32 %v4_d9b4, %v0_d9b4
  %v6_d9b4 = inttoptr i32 %v5_d9b4 to i32*
  %v7_d9b4 = load i32, i32* %v6_d9b4, align 4
  store i32 %v7_d9b4, i32* @lr, align 4
  %v1_d9b8 = inttoptr i32 %v7_d9b4 to i8*
  %v2_d9b8 = load i8, i8* %v1_d9b8, align 1
  %tmp = urem i8 %v2_d9b8, 16
  %v1_d9bc = zext i8 %tmp to i32
  %v1_d9c0 = or i32 %v1_d9bc, 64
  store i32 %v1_d9c0, i32* %r3.global-to-local, align 4
  %v1_d9c8 = trunc i32 %v1_d9c0 to i8
  store i8 %v1_d9c8, i8* %v1_d9b8, align 1
  %v0_d9cc = load i32, i32* @lr, align 4
  %v1_d9cc = inttoptr i32 %v0_d9cc to i8*
  %v2_d9cc = load i8, i8* %v1_d9cc, align 1
  %v1_d9d0 = and i8 %v2_d9cc, -16
  %v1_d9d4 = or i8 %v1_d9d0, 5
  store i8 %v1_d9d4, i8* %v1_d9cc, align 1
  %v2_d9e0 = load i32, i32* @lr, align 4
  %v3_d9e0 = add i32 %v2_d9e0, 1
  %v4_d9e0 = inttoptr i32 %v3_d9e0 to i8*
  store i8 %v5_d830, i8* %v4_d9e0, align 1
  %v3_d9e4 = load i32, i32* %stack_var_-44, align 4
  %v1_d9e8 = add i32 %v3_d9e4, 32
  %tmp44 = mul i32 %v1_d9e8, 256
  store i32 %v1_d878, i32* %r4.global-to-local, align 4
  %v1_d9f8 = and i32 %tmp44, 65280
  %tmp45 = udiv i32 %v1_d9e8, 256
  %v4_d9fc = urem i32 %tmp45, 256
  %v5_d9fc = or i32 %v4_d9fc, %v1_d9f8
  store i32 %v5_d9fc, i32* %r2.global-to-local, align 4
  store i32 %v4_da00, i32* %r3.global-to-local, align 4
  store i1 %v2_da04, i1* %cpsr_z.global-to-local, align 1
  %v2_da08 = load i32, i32* @lr, align 4
  %v3_da08 = add i32 %v2_da08, 8
  %v4_da08 = inttoptr i32 %v3_da08 to i8*
  store i8 %v1_da08, i8* %v4_da08, align 1
  %v0_da0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da0c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d9a0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_da10 = load i32, i32* @lr, align 4
  %v4_da10 = add i32 %v3_da10, 6
  %v5_da10 = inttoptr i32 %v4_da10 to i8*
  store i8 64, i8* %v5_da10, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d9a0, %bb
  %v0_da18 = load i32, i32* %r2.global-to-local, align 4
  %v3_da18 = sdiv i32 %v0_da18, 256
  store i32 %v3_da18, i32* %ip.global-to-local, align 4
  store i32 %v4_da1c, i32* %r4.global-to-local, align 4
  %v2_da20 = load i32, i32* @lr, align 4
  %v3_da20 = add i32 %v2_da20, 9
  %v4_da20 = inttoptr i32 %v3_da20 to i8*
  store i8 17, i8* %v4_da20, align 1
  store i32 ptrtoint (i32* @global_var_1dd3c.81 to i32), i32* %r3.global-to-local, align 4
  %v0_da28 = load i32, i32* %r2.global-to-local, align 4
  %v1_da28 = trunc i32 %v0_da28 to i8
  %v2_da28 = load i32, i32* @lr, align 4
  %v3_da28 = add i32 %v2_da28, 2
  %v4_da28 = inttoptr i32 %v3_da28 to i8*
  store i8 %v1_da28, i8* %v4_da28, align 1
  %v0_da2c = load i32, i32* %ip.global-to-local, align 4
  %v1_da2c = trunc i32 %v0_da2c to i8
  %v2_da2c = load i32, i32* @lr, align 4
  %v3_da2c = add i32 %v2_da2c, 3
  %v4_da2c = inttoptr i32 %v3_da2c to i8*
  store i8 %v1_da2c, i8* %v4_da2c, align 1
  %v0_da30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da30, label %.thread7, label %bb46

.thread7:                                         ; preds = %.thread
  %v3_da348 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da348, i32* %ip.global-to-local, align 4
  br label %bb47

bb46:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_da34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da34, i32* %ip.global-to-local, align 4
  %v3_da38 = load i32, i32* @lr, align 4
  %v4_da38 = add i32 %v3_da38, 7
  %v5_da38 = inttoptr i32 %v4_da38 to i8*
  store i8 0, i8* %v5_da38, align 1
  %v0_da40.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %.thread7, %bb46
  %v0_da40 = phi i32 [ %v3_da348, %.thread7 ], [ %v0_da40.pre, %bb46 ]
  %v2_da3c = load i32, i32* @global_var_1dd3c.81, align 4
  store i32 %v2_da3c, i32* %r2.global-to-local, align 4
  %v3_da40 = mul i32 %v0_da40, 32
  store i32 %v3_da40, i32* %r3.global-to-local, align 4
  %v1_da44 = load i32, i32* @lr, align 4
  %v2_da44 = add i32 %v1_da44, 12
  %v3_da44 = inttoptr i32 %v2_da44 to i32*
  store i32 %v2_da3c, i32* %v3_da44, align 4
  %v0_da48 = load i32, i32* %r3.global-to-local, align 4
  %v1_da48 = load i32, i32* %ip.global-to-local, align 4
  %tmp52 = mul i32 %v1_da48, -8
  %v5_da48 = add i32 %v0_da48, %tmp52
  %v1_da4c = load i32, i32* @sl, align 4
  %v2_da4c = add i32 %v5_da48, %v1_da4c
  store i32 %v2_da4c, i32* %r3.global-to-local, align 4
  %v1_da50 = add i32 %v2_da4c, 16
  %v2_da50 = inttoptr i32 %v1_da50 to i32*
  %v3_da50 = load i32, i32* %v2_da50, align 4
  %v1_da54 = load i32, i32* @lr, align 4
  %v2_da54 = add i32 %v1_da54, 16
  %v3_da54 = inttoptr i32 %v2_da54 to i32*
  store i32 %v3_da50, i32* %v3_da54, align 4
  %v3_da58 = load i32, i32* %stack_var_-44, align 4
  %v1_da5c = add i32 %v3_da58, 12
  %tmp48 = mul i32 %v1_da5c, 256
  %v1_da6c = and i32 %tmp48, 65280
  %tmp49 = udiv i32 %v1_da5c, 256
  %v4_da70 = urem i32 %tmp49, 256
  %v5_da70 = or i32 %v4_da70, %v1_da6c
  store i32 %v5_da70, i32* %ip.global-to-local, align 4
  %v1_da74 = load i32, i32* @lr, align 4
  %v2_da74 = add i32 %v1_da74, 28
  %v3_da74 = inttoptr i32 %v2_da74 to i32*
  store i32 -1, i32* %v3_da74, align 4
  store i32 %v4_da78, i32* %r2.global-to-local, align 4
  %v0_da7c = load i32, i32* %r4.global-to-local, align 4
  %v1_da7c = trunc i32 %v0_da7c to i8
  %v2_da7c = load i32, i32* @lr, align 4
  %v3_da7c = add i32 %v2_da7c, 5
  %v4_da7c = inttoptr i32 %v3_da7c to i8*
  store i8 %v1_da7c, i8* %v4_da7c, align 1
  %v0_da80 = load i32, i32* %ip.global-to-local, align 4
  %v3_da80 = sdiv i32 %v0_da80, 256
  store i32 %v3_da80, i32* %r3.global-to-local, align 4
  %v0_da84 = load i32, i32* @lr, align 4
  %v1_da84 = add i32 %v0_da84, 20
  store i32 %v1_da84, i32* %r4.global-to-local, align 4
  %v0_da88 = load i32, i32* %r8.global-to-local, align 4
  %v1_da88 = trunc i32 %v0_da88 to i8
  %v3_da88 = add i32 %v0_da84, 4
  %v4_da88 = inttoptr i32 %v3_da88 to i8*
  store i8 %v1_da88, i8* %v4_da88, align 1
  %v0_da8c = load i32, i32* @r6, align 4
  %v1_da8c = trunc i32 %v0_da8c to i8
  %v2_da8c = load i32, i32* @lr, align 4
  %v3_da8c = add i32 %v2_da8c, 20
  %v4_da8c = inttoptr i32 %v3_da8c to i8*
  store i8 %v1_da8c, i8* %v4_da8c, align 1
  %v0_da90 = load i32, i32* %r3.global-to-local, align 4
  %v1_da90 = trunc i32 %v0_da90 to i8
  %v2_da90 = load i32, i32* %r4.global-to-local, align 4
  %v3_da90 = add i32 %v2_da90, 5
  %v4_da90 = inttoptr i32 %v3_da90 to i8*
  store i8 %v1_da90, i8* %v4_da90, align 1
  %v0_da94 = load i32, i32* @r5, align 4
  %v1_da94 = trunc i32 %v0_da94 to i8
  %v2_da94 = load i32, i32* %r4.global-to-local, align 4
  %v3_da94 = add i32 %v2_da94, 2
  %v4_da94 = inttoptr i32 %v3_da94 to i8*
  store i8 %v1_da94, i8* %v4_da94, align 1
  %v0_da98 = load i32, i32* @r7, align 4
  %v1_da98 = trunc i32 %v0_da98 to i8
  %v2_da98 = load i32, i32* %r4.global-to-local, align 4
  %v3_da98 = add i32 %v2_da98, 1
  %v4_da98 = inttoptr i32 %v3_da98 to i8*
  store i8 %v1_da98, i8* %v4_da98, align 1
  %v0_da9c = load i32, i32* @lr, align 4
  %v1_da9c = add i32 %v0_da9c, 32
  %v0_daa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_daa0 = trunc i32 %v0_daa0 to i8
  %v2_daa0 = load i32, i32* %r4.global-to-local, align 4
  %v3_daa0 = add i32 %v2_daa0, 3
  %v4_daa0 = inttoptr i32 %v3_daa0 to i8*
  store i8 %v1_daa0, i8* %v4_daa0, align 1
  %v0_daa4 = load i32, i32* %ip.global-to-local, align 4
  %v1_daa4 = trunc i32 %v0_daa4 to i8
  %v2_daa4 = load i32, i32* %r4.global-to-local, align 4
  %v3_daa4 = add i32 %v2_daa4, 4
  %v4_daa4 = inttoptr i32 %v3_daa4 to i8*
  store i8 %v1_daa4, i8* %v4_daa4, align 1
  %v3_daa8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_daa8, i32* %r2.global-to-local, align 4
  %v3_daac = call i32 @function_120c8(i32 %v1_da9c, i32 %v3_d8d8, i32 %v3_daa8)
  %v3_dab0 = load i32, i32* %stack_var_-40, align 4
  %v1_dab4 = add i32 %v3_dab0, 1
  store i32 %v1_dab4, i32* @r4, align 4
  store i32 %v1_d7cc, i32* %r3.global-to-local, align 4
  %v9_dabc = icmp eq i32 %v1_dab4, %v1_d7cc
  store i1 %v9_dabc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dab4, i32* %stack_var_-40, align 4
  %v5_dac4 = icmp slt i32 %v1_dab4, %v1_d7cc
  br i1 %v5_dac4, label %dec_label_pc_d9a0, label %dec_label_pc_dac8

dec_label_pc_dac8:                                ; preds = %bb47, %dec_label_pc_dc9c
  store i32 %v1_d7cc, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_d944, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_d944, label %dec_label_pc_dc9c, label %dec_label_pc_dadc

dec_label_pc_dadc:                                ; preds = %dec_label_pc_dac8
  store i32 0, i32* %r8.global-to-local, align 4
  %v3_daec = icmp eq i32 %v3_d938, 65535
  br label %dec_label_pc_dbc0

dec_label_pc_dae8:                                ; preds = %dec_label_pc_dbc0
  store i1 %v3_daec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_daec, label %dec_label_pc_dc50, label %dec_label_pc_daf4

dec_label_pc_daf4:                                ; preds = %dec_label_pc_dbe8.dec_label_pc_daf4_crit_edge, %dec_label_pc_dae8
  %v1_daf8 = phi i32 [ %v1_daf8.pre, %dec_label_pc_dbe8.dec_label_pc_daf4_crit_edge ], [ 65535, %dec_label_pc_dae8 ]
  store i32 %v3_d93c, i32* %r2.global-to-local, align 4
  %v9_daf8 = icmp eq i32 %v3_d93c, %v1_daf8
  store i1 %v9_daf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_daf8, label %dec_label_pc_dc6c, label %dec_label_pc_db00

dec_label_pc_db00:                                ; preds = %dec_label_pc_dc50.dec_label_pc_db00_crit_edge, %dec_label_pc_daf4
  %v1_db04 = phi i32 [ %v1_db04.pre, %dec_label_pc_dc50.dec_label_pc_db00_crit_edge ], [ %v1_daf8, %dec_label_pc_daf4 ]
  store i32 %v3_d940, i32* %r3.global-to-local, align 4
  %v9_db04 = icmp eq i32 %v3_d940, %v1_db04
  store i1 %v9_db04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_db04, label %dec_label_pc_dc88, label %dec_label_pc_db0c

dec_label_pc_db0c:                                ; preds = %dec_label_pc_dc6c, %dec_label_pc_db00, %dec_label_pc_dc88
  %v0_db10 = load i32, i32* %r8.global-to-local, align 4
  %v1_db10 = trunc i32 %v0_db10 to i8
  %v2_db10 = load i32, i32* @r5, align 4
  %v3_db10 = add i32 %v2_db10, 10
  %v4_db10 = inttoptr i32 %v3_db10 to i8*
  store i8 %v1_db10, i8* %v4_db10, align 1
  %v0_db14 = load i32, i32* %r8.global-to-local, align 4
  %v1_db14 = trunc i32 %v0_db14 to i8
  %v2_db14 = load i32, i32* @r5, align 4
  %v3_db14 = add i32 %v2_db14, 11
  %v4_db14 = inttoptr i32 %v3_db14 to i8*
  store i8 %v1_db14, i8* %v4_db14, align 1
  %v0_db18 = load i32, i32* @r5, align 4
  store i32 %v0_db18, i32* @r0, align 4
  %v2_db1c = call i32 @function_e498(i32 %v0_db18, i32 20)
  %v3_db1c = trunc i32 %v2_db1c to i8
  %v4_db20 = sdiv i32 %v2_db1c, 256
  store i32 %v4_db20, i32* %r3.global-to-local, align 4
  %v1_db24 = trunc i32 %v4_db20 to i8
  %v2_db24 = load i32, i32* @r5, align 4
  %v3_db24 = add i32 %v2_db24, 11
  %v4_db24 = inttoptr i32 %v3_db24 to i8*
  store i8 %v1_db24, i8* %v4_db24, align 1
  %v3_db28 = load i32, i32* @r5, align 4
  %v4_db28 = add i32 %v3_db28, 10
  %v5_db28 = inttoptr i32 %v4_db28 to i8*
  store i8 %v3_db1c, i8* %v5_db28, align 1
  %v0_db2c = load i32, i32* %r8.global-to-local, align 4
  %v1_db2c = trunc i32 %v0_db2c to i8
  %v2_db2c = load i32, i32* @r6, align 4
  %v3_db2c = add i32 %v2_db2c, 6
  %v4_db2c = inttoptr i32 %v3_db2c to i8*
  store i8 %v1_db2c, i8* %v4_db2c, align 1
  %v0_db30 = load i32, i32* %r8.global-to-local, align 4
  %v1_db30 = trunc i32 %v0_db30 to i8
  %v2_db30 = load i32, i32* @r6, align 4
  %v3_db30 = add i32 %v2_db30, 7
  %v4_db30 = inttoptr i32 %v3_db30 to i8*
  store i8 %v1_db30, i8* %v4_db30, align 1
  %v0_db34 = load i32, i32* @r5, align 4
  %v1_db34 = add i32 %v0_db34, 24
  %v2_db34 = inttoptr i32 %v1_db34 to i8*
  %v3_db34 = load i8, i8* %v2_db34, align 1
  %v4_db34 = zext i8 %v3_db34 to i32
  store i32 %v4_db34, i32* %r3.global-to-local, align 4
  %v1_db38 = add i32 %v0_db34, 25
  %v2_db38 = inttoptr i32 %v1_db38 to i8*
  %v3_db38 = load i8, i8* %v2_db38, align 1
  %v4_db38 = zext i8 %v3_db38 to i32
  %v4_db3c = mul nuw nsw i32 %v4_db38, 256
  %v5_db3c = or i32 %v4_db3c, %v4_db34
  store i32 %v5_db3c, i32* %r2.global-to-local, align 4
  %v3_db40 = load i32, i32* %stack_var_-44, align 4
  %v0_db44 = load i32, i32* @r6, align 4
  store i32 %v0_db44, i32* @r1, align 4
  %v1_db48 = add i32 %v3_db40, 12
  store i32 %v1_db48, i32* %r3.global-to-local, align 4
  %v4_db50 = call i32 @function_e4f4(i32 %v0_db34, i32 %v0_db44, i32 %v5_db3c, i32 %v1_db48)
  %v5_db50 = trunc i32 %v4_db50 to i8
  %v4_db5414 = udiv i32 %v4_db50, 256
  %v1_db58 = trunc i32 %v4_db5414 to i8
  %v2_db58 = load i32, i32* @r6, align 4
  %v3_db58 = add i32 %v2_db58, 7
  %v4_db58 = inttoptr i32 %v3_db58 to i8*
  store i8 %v1_db58, i8* %v4_db58, align 1
  %v3_db5c = load i32, i32* @r6, align 4
  %v4_db5c = add i32 %v3_db5c, 6
  %v5_db5c = inttoptr i32 %v4_db5c to i8*
  store i8 %v5_db50, i8* %v5_db5c, align 1
  %v3_db60 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db60, i32* %r3.global-to-local, align 4
  %v0_db64 = load i32, i32* @r5, align 4
  %v1_db64 = add i32 %v0_db64, 20
  %v2_db64 = inttoptr i32 %v1_db64 to i32*
  %v3_db64 = load i32, i32* %v2_db64, align 4
  %v5_db6c = mul i32 %v3_db60, 24
  %v1_db70 = load i32, i32* @sl, align 4
  %v2_db70 = add i32 %v1_db70, %v5_db6c
  store i32 %v2_db70, i32* %ip.global-to-local, align 4
  %v3_db74 = udiv i32 %v3_db64, 65536
  store i32 %v3_db74, i32* %r2.global-to-local, align 4
  %v1_db78 = trunc i32 %v3_db74 to i8
  %v3_db78 = add i32 %v2_db70, 2
  %v4_db78 = inttoptr i32 %v3_db78 to i8*
  store i8 %v1_db78, i8* %v4_db78, align 1
  %v0_db7c = load i32, i32* %r2.global-to-local, align 4
  %v3_db7c15 = udiv i32 %v0_db7c, 256
  %v3_db80 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_db80, i32* %r2.global-to-local, align 4
  %v1_db84 = trunc i32 %v3_db7c15 to i8
  %v2_db84 = load i32, i32* %ip.global-to-local, align 4
  %v3_db84 = add i32 %v2_db84, 3
  %v4_db84 = inttoptr i32 %v3_db84 to i8*
  store i8 %v1_db84, i8* %v4_db84, align 1
  store i32 16, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_db90 = load i32, i32* @r5, align 4
  %v0_db94 = load i32, i32* %r2.global-to-local, align 4
  %v1_db94 = add i32 %v0_db94, 32
  store i32 %v1_db94, i32* %r2.global-to-local, align 4
  %v0_db98 = load i32, i32* %sb.global-to-local, align 4
  %v0_dba0 = load i32, i32* %ip.global-to-local, align 4
  %v6_dba4 = inttoptr i32 %v0_db90 to i32*
  %v7_dba4 = call i32 @function_13268(i32 %v0_db98, i32* %v6_dba4, i32 %v1_db94, i32 16384, i32 %v0_dba0, i32 16)
  %v3_dba8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dba8, i32* %r3.global-to-local, align 4
  store i32 %v1_d7cc, i32* @r4, align 4
  %v1_dbb0 = add i32 %v3_dba8, 1
  %v9_dbb4 = icmp eq i32 %v1_dbb0, %v1_d7cc
  store i1 %v9_dbb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dbb0, i32* %stack_var_-40, align 4
  %v6_dbbc = icmp slt i32 %v1_dbb0, %v1_d7cc
  br i1 %v6_dbbc, label %dec_label_pc_dbc0, label %dec_label_pc_dc9c

dec_label_pc_dbc0:                                ; preds = %dec_label_pc_db0c, %dec_label_pc_dadc
  %v1_dbd0 = phi i32 [ %v1_dbb0, %dec_label_pc_db0c ], [ 0, %dec_label_pc_dadc ]
  %v5_dbc4 = mul i32 %v1_dbd0, 24
  %v1_dbc8 = load i32, i32* @sl, align 4
  %v2_dbc8 = add i32 %v1_dbc8, %v5_dbc4
  store i32 %v2_dbc8, i32* %r3.global-to-local, align 4
  %v1_dbcc = add i32 %v2_dbc8, 20
  %v2_dbcc = inttoptr i32 %v1_dbcc to i8*
  %v3_dbcc = load i8, i8* %v2_dbcc, align 1
  %v4_dbcc = zext i8 %v3_dbcc to i32
  store i32 %v4_dbcc, i32* %r2.global-to-local, align 4
  %v0_dbd0 = load i32, i32* %fp.global-to-local, align 4
  %v4_dbd0 = mul i32 %v1_dbd0, 4
  %v5_dbd0 = add i32 %v0_dbd0, %v4_dbd0
  %v6_dbd0 = inttoptr i32 %v5_dbd0 to i32*
  %v7_dbd0 = load i32, i32* %v6_dbd0, align 4
  store i32 %v7_dbd0, i32* @r5, align 4
  %v2_dbd8 = icmp ugt i8 %v3_dbcc, 30
  %v7_dbd8 = icmp eq i8 %v3_dbcc, 31
  store i1 %v7_dbd8, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_dbe0 = add i32 %v7_dbd0, 20
  store i32 %v1_dbe0, i32* @r6, align 4
  %v2_dbe4 = xor i1 %v7_dbd8, true
  %v3_dbe4 = and i1 %v2_dbd8, %v2_dbe4
  br i1 %v3_dbe4, label %dec_label_pc_dae8, label %dec_label_pc_dbe8

dec_label_pc_dbe8:                                ; preds = %dec_label_pc_dbc0
  %v1_dbe8 = add i32 %v2_dbc8, 16
  %v2_dbe8 = inttoptr i32 %v1_dbe8 to i32*
  %v3_dbe8 = load i32, i32* %v2_dbe8, align 4
  store i32 %v3_dbe8, i32* @r4, align 4
  %v0_dbec = call i32 @function_f8c4()
  %v3_dbf0 = load i32, i32* %stack_var_-40, align 4
  %v5_dbf8 = mul i32 %v3_dbf0, 24
  %v0_dbfc = load i32, i32* @r4, align 4
  %v1_dc00 = and i32 %v0_dbfc, 65280
  store i32 %v1_dc00, i32* %r3.global-to-local, align 4
  %v1_dbfc = udiv i32 %v0_dbfc, 256
  %v3_dc04 = and i32 %v1_dbfc, 65280
  store i32 %v3_dc04, i32* %r2.global-to-local, align 4
  %v1_dc08 = load i32, i32* @sl, align 4
  %v2_dc08 = add i32 %v1_dc08, %v5_dbf8
  store i32 %v2_dc08, i32* %ip.global-to-local, align 4
  %v1_dc14 = add i32 %v2_dc08, 20
  %v2_dc14 = inttoptr i32 %v1_dc14 to i8*
  %v3_dc14 = load i8, i8* %v2_dc14, align 1
  %v4_dc14 = zext i8 %v3_dc14 to i32
  %v2_dc1c = call i32 @llvm.bswap.i32(i32 %v0_dbfc)
  %v7_dc20 = lshr i32 %v0_dbec, %v4_dc14
  %v8_dc20 = add i32 %v7_dc20, %v2_dc1c
  store i32 %v8_dc20, i32* %r2.global-to-local, align 4
  %v2_dc3c = call i32 @llvm.bswap.i32(i32 %v8_dc20)
  store i32 %v2_dc3c, i32* %r3.global-to-local, align 4
  %v1_dc44 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc44 = icmp eq i32 %v3_d938, %v1_dc44
  store i1 %v9_dc44, i1* %cpsr_z.global-to-local, align 1
  %v1_dc48 = load i32, i32* @r5, align 4
  %v2_dc48 = add i32 %v1_dc48, 16
  %v3_dc48 = inttoptr i32 %v2_dc48 to i32*
  store i32 %v2_dc3c, i32* %v3_dc48, align 4
  br i1 %v9_dc44, label %dec_label_pc_dc50, label %dec_label_pc_dbe8.dec_label_pc_daf4_crit_edge

dec_label_pc_dbe8.dec_label_pc_daf4_crit_edge:    ; preds = %dec_label_pc_dbe8
  %v1_daf8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_daf4

dec_label_pc_dc50:                                ; preds = %dec_label_pc_dbe8, %dec_label_pc_dae8
  %v0_dc50 = call i32 @function_f8c4()
  %v1_dc50 = trunc i32 %v0_dc50 to i8
  store i32 %v3_d93c, i32* %r2.global-to-local, align 4
  %v4_dc58 = sdiv i32 %v0_dc50, 256
  store i32 %v4_dc58, i32* %r3.global-to-local, align 4
  %v1_dc5c = load i32, i32* %r7.global-to-local, align 4
  %v9_dc5c = icmp eq i32 %v3_d93c, %v1_dc5c
  store i1 %v9_dc5c, i1* %cpsr_z.global-to-local, align 1
  %v1_dc60 = trunc i32 %v4_dc58 to i8
  %v2_dc60 = load i32, i32* @r5, align 4
  %v3_dc60 = add i32 %v2_dc60, 5
  %v4_dc60 = inttoptr i32 %v3_dc60 to i8*
  store i8 %v1_dc60, i8* %v4_dc60, align 1
  %v3_dc64 = load i32, i32* @r5, align 4
  %v4_dc64 = add i32 %v3_dc64, 4
  %v5_dc64 = inttoptr i32 %v4_dc64 to i8*
  store i8 %v1_dc50, i8* %v5_dc64, align 1
  %v0_dc68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc68, label %dec_label_pc_dc6c, label %dec_label_pc_dc50.dec_label_pc_db00_crit_edge

dec_label_pc_dc50.dec_label_pc_db00_crit_edge:    ; preds = %dec_label_pc_dc50
  %v1_db04.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_db00

dec_label_pc_dc6c:                                ; preds = %dec_label_pc_dc50, %dec_label_pc_daf4
  %v0_dc6c = call i32 @function_f8c4()
  %v1_dc6c = trunc i32 %v0_dc6c to i8
  %v4_dc70 = sdiv i32 %v0_dc6c, 256
  store i32 %v4_dc70, i32* %r3.global-to-local, align 4
  %v3_dc74 = load i32, i32* @r5, align 4
  %v4_dc74 = add i32 %v3_dc74, 20
  %v5_dc74 = inttoptr i32 %v4_dc74 to i8*
  store i8 %v1_dc6c, i8* %v5_dc74, align 1
  %v0_dc78 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc78 = trunc i32 %v0_dc78 to i8
  %v2_dc78 = load i32, i32* @r6, align 4
  %v3_dc78 = add i32 %v2_dc78, 1
  %v4_dc78 = inttoptr i32 %v3_dc78 to i8*
  store i8 %v1_dc78, i8* %v4_dc78, align 1
  store i32 %v3_d940, i32* %r3.global-to-local, align 4
  %v1_dc80 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc80 = icmp eq i32 %v3_d940, %v1_dc80
  store i1 %v9_dc80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dc80, label %dec_label_pc_dc88, label %dec_label_pc_db0c

dec_label_pc_dc88:                                ; preds = %dec_label_pc_dc6c, %dec_label_pc_db00
  %v0_dc88 = call i32 @function_f8c4()
  %v1_dc88 = trunc i32 %v0_dc88 to i8
  %v4_dc8c = sdiv i32 %v0_dc88, 256
  store i32 %v4_dc8c, i32* %r3.global-to-local, align 4
  %v1_dc90 = trunc i32 %v4_dc8c to i8
  %v2_dc90 = load i32, i32* @r6, align 4
  %v3_dc90 = add i32 %v2_dc90, 3
  %v4_dc90 = inttoptr i32 %v3_dc90 to i8*
  store i8 %v1_dc90, i8* %v4_dc90, align 1
  %v3_dc94 = load i32, i32* @r6, align 4
  %v4_dc94 = add i32 %v3_dc94, 2
  %v5_dc94 = inttoptr i32 %v4_dc94 to i8*
  store i8 %v1_dc88, i8* %v5_dc94, align 1
  br label %dec_label_pc_db0c

dec_label_pc_dc9c.critedge:                       ; preds = %dec_label_pc_d924
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_dc9c

dec_label_pc_dc9c:                                ; preds = %dec_label_pc_db0c, %dec_label_pc_dc9c.critedge, %dec_label_pc_dac8
  %v2_dca0 = call i32 @function_12cb0(i32* null)
  %v9_dca8 = icmp eq i32 %v2_d8c0, %v2_dca0
  store i1 %v9_dca8, i1* %cpsr_z.global-to-local, align 1
  %v6_dcac = icmp slt i32 %v2_d8c0, %v2_dca0
  br i1 %v6_dcac, label %dec_label_pc_dcb0, label %dec_label_pc_dac8

dec_label_pc_dcb0:                                ; preds = %dec_label_pc_dc9c, %dec_label_pc_d7c8, %dec_label_pc_dcb8
  %v29_dcb4 = phi i32 [ %v3_d8ec, %dec_label_pc_d7c8 ], [ %v1_dcbc, %dec_label_pc_dcb8 ], [ %v2_dca0, %dec_label_pc_dc9c ]
  store i32 %v3_d7c8, i32* %r4.global-to-local, align 4
  store i32 %v12_d7c8, i32* %r7.global-to-local, align 4
  store i32 %v15_d7c8, i32* %r8.global-to-local, align 4
  ret i32 %v29_dcb4

dec_label_pc_dcb8:                                ; preds = %dec_label_pc_d8fc
  %v0_dcb8 = load i32, i32* %sb.global-to-local, align 4
  %v1_dcbc = call i32 @function_129e0(i32 %v0_dcb8)
  br label %dec_label_pc_dcb0

; uselistorder directives
  uselistorder i32 %v4_dc8c, { 1, 0 }
  uselistorder i32 %v4_dc58, { 1, 0 }
  uselistorder i32 %v2_dc3c, { 1, 0 }
  uselistorder i32 %v0_dbfc, { 1, 0, 2 }
  uselistorder i32 %v1_dbb0, { 1, 2, 0, 3 }
  uselistorder i32 %v3_db74, { 1, 0 }
  uselistorder i32 %v4_db20, { 1, 0 }
  uselistorder i1 %v3_daec, { 1, 0 }
  uselistorder i32 %v1_dab4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_da5c, { 1, 0 }
  uselistorder i32 %v1_d9e8, { 1, 0 }
  uselistorder i32 %v1_d974, { 1, 0 }
  uselistorder i32 %v3_d970, { 1, 0 }
  uselistorder i32 %v1_d964, { 1, 0 }
  uselistorder i32 %v3_d938, { 0, 2, 1 }
  uselistorder i32 %v0_d934, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d930, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d91c, { 1, 0 }
  uselistorder i1 %v7_d8f0, { 1, 0 }
  uselistorder i32 %v3_d8ec, { 1, 2, 3, 0 }
  uselistorder i32 %v2_d8c0, { 1, 0 }
  uselistorder i32 %v1_d878, { 1, 2, 0 }
  uselistorder i32 %v5_d810, { 1, 0 }
  uselistorder i32 %v1_d7cc, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %stack_var_-40, { 0, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 2, 15, 13, 14 }
  uselistorder i32* %r8.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 1, 16, 17, 18, 19, 20, 21, 22, 30, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r2.global-to-local, { 14, 15, 16, 24, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %ip.global-to-local, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %fp.global-to-local, { 2, 0, 1, 3 }
  uselistorder i1* %cpsr_z.global-to-local, { 7, 0, 8, 9, 10, 11, 16, 12, 13, 14, 15, 17, 18, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_dcb0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dc9c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_db0c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dac8, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_dcc8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_dcc8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_dcc8 = load i32, i32* @r4, align 4
  %v15_dcc8 = load i32, i32* @r8, align 4
  %v21_dcc8 = load i32, i32* @sl, align 4
  %v24_dcc8 = load i32, i32* @fp, align 4
  %v1_dcd4 = urem i32 %arg2, 256
  store i32 0, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %v1_dcd4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_dcec = urem i32 %arg4, 256
  store i32 %v1_dcec, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_dcfc = call i32 @function_135b8(i32 %v1_dcd4, i32 4)
  %v0_dd00 = load i32, i32* @r5, align 4
  store i32 %v0_dd00, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_dd0c = load i32, i32* @r4, align 4
  store i32 %v0_dd0c, i32* %r0.global-to-local, align 4
  %v0_dd10 = load i32, i32* @r6, align 4
  store i32 %v0_dd10, i32* %r3.global-to-local, align 4
  %v5_dd14 = inttoptr i32 %v0_dd00 to i32*
  %v6_dd14 = call i32 @function_829c(i32 %v0_dd0c, i32* %v5_dd14, i32 2, i32 %v0_dd10)
  %v1_dd20 = urem i32 %v6_dd14, 256
  store i32 %v1_dd20, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_dd2c = load i32, i32* @r4, align 4
  store i32 %v0_dd2c, i32* %r0.global-to-local, align 4
  %v0_dd30 = load i32, i32* @r5, align 4
  store i32 %v0_dd30, i32* %r1.global-to-local, align 4
  %v5_dd34 = trunc i32 %v6_dd14 to i8
  %v6_dd38 = inttoptr i32 %v0_dd30 to i32*
  %v7_dd38 = call i32 @function_829c(i32 %v0_dd2c, i32* %v6_dd38, i32 3, i32 65535)
  %v0_dd3c = load i32, i32* @r5, align 4
  store i32 %v0_dd3c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_dd48 = load i32, i32* @r4, align 4
  store i32 %v0_dd48, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_dd50 = inttoptr i32 %v0_dd3c to i32*
  %v6_dd50 = call i32 @function_829c(i32 %v0_dd48, i32* %v5_dd50, i32 4, i32 64)
  %v1_dd58 = urem i32 %v6_dd50, 256
  store i32 %v1_dd58, i32* %ip.global-to-local, align 4
  %v0_dd5c = load i32, i32* @r5, align 4
  store i32 %v0_dd5c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_dd64 = load i32, i32* @r6, align 4
  store i32 %v0_dd64, i32* %r3.global-to-local, align 4
  %v0_dd68 = load i32, i32* @r4, align 4
  store i32 %v0_dd68, i32* %r0.global-to-local, align 4
  %v6_dd70 = inttoptr i32 %v0_dd5c to i32*
  %v7_dd70 = call i32 @function_829c(i32 %v0_dd68, i32* %v6_dd70, i32 5, i32 %v0_dd64)
  %v1_dd7c = urem i32 %v7_dd70, 256
  store i32 %v1_dd7c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_dd88 = load i32, i32* @r4, align 4
  store i32 %v0_dd88, i32* %r0.global-to-local, align 4
  %v0_dd8c = load i32, i32* @r5, align 4
  store i32 %v0_dd8c, i32* %r1.global-to-local, align 4
  %v5_dd94 = inttoptr i32 %v0_dd8c to i32*
  %v6_dd94 = call i32 @function_829c(i32 %v0_dd88, i32* %v5_dd94, i32 6, i32 65535)
  %v0_dd98 = load i32, i32* @r5, align 4
  store i32 %v0_dd98, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_dda4 = load i32, i32* @r4, align 4
  store i32 %v0_dda4, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_ddac = inttoptr i32 %v0_dd98 to i32*
  %v6_ddac = call i32 @function_829c(i32 %v0_dda4, i32* %v5_ddac, i32 7, i32 53)
  %v0_ddb8 = load i32, i32* @r5, align 4
  store i32 %v0_ddb8, i32* %r1.global-to-local, align 4
  %v0_ddbc = load i32, i32* @r4, align 4
  store i32 %v0_ddbc, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ddc8 = inttoptr i32 %v0_ddb8 to i32*
  %v6_ddc8 = call i32 @function_829c(i32 %v0_ddbc, i32* %v5_ddc8, i32 9, i32 65535)
  %v0_ddcc = load i32, i32* @r5, align 4
  store i32 %v0_ddcc, i32* %r1.global-to-local, align 4
  %v0_ddd4 = load i32, i32* @r6, align 4
  store i32 %v0_ddd4, i32* %r2.global-to-local, align 4
  %v0_ddd8 = load i32, i32* @r4, align 4
  store i32 %v0_ddd8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_dde0 = inttoptr i32 %v0_ddcc to i32*
  %v6_dde0 = call i32 @function_829c(i32 %v0_ddd8, i32* %v5_dde0, i32 %v0_ddd4, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_dde8 = load i32, i32* @r6, align 4
  store i32 %v0_dde8, i32* %r3.global-to-local, align 4
  %v0_ddec = load i32, i32* @r5, align 4
  store i32 %v0_ddec, i32* %r1.global-to-local, align 4
  %v0_ddf4 = load i32, i32* @r4, align 4
  store i32 %v0_ddf4, i32* %r0.global-to-local, align 4
  %v5_ddf8 = inttoptr i32 %v0_ddec to i32*
  %v6_ddf8 = call i32 @function_81cc(i32 %v0_ddf4, i32* %v5_ddf8, i32 8, i32 %v0_dde8, i32 %v6_dde0)
  store i32 %v6_ddf8, i32* @r7, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_de04 = call i32 @function_11598(i32 37)
  %v0_de08 = load i32, i32* @r6, align 4
  store i32 %v0_de08, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v2_de10 = inttoptr i32 %v0_de08 to i32*
  %v3_de10 = call i32 @function_114b4(i32 37, i32* %v2_de10)
  store i32 %v3_de10, i32* %r0.global-to-local, align 4
  %v0_de14 = load i32, i32* @r6, align 4
  store i32 %v0_de14, i32* %r1.global-to-local, align 4
  %v2_de18 = inttoptr i32 %v3_de10 to i8*
  %v3_de18 = call i32 @function_12b0c(i8* %v2_de18, i32 %v0_de14)
  store i32 %v3_de18, i32* @r4, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_de24 = call i32 @function_114e0(i32 37)
  store i32 %v1_de24, i32* %r0.global-to-local, align 4
  %v0_de28 = load i32, i32* @r4, align 4
  %v1_de28 = load i32, i32* @r6, align 4
  %v9_de28 = icmp eq i32 %v0_de28, %v1_de28
  store i1 %v9_de28, i1* %cpsr_z.global-to-local, align 1
  %v5_de2c = icmp slt i32 %v0_de28, %v1_de28
  br i1 %v5_de2c, label %dec_label_pc_df00, label %dec_label_pc_de30

dec_label_pc_de30:                                ; preds = %dec_label_pc_dcc8
  %v2_de34 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_de34, i32* %sl.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_de34, i32* %r1.global-to-local, align 4
  store i32 %v0_de28, i32* %r0.global-to-local, align 4
  %v4_de44 = call i32 @function_12ba8(i32 %v0_de28, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_de44, i32* @r5, align 4
  %v0_de4c = load i32, i32* @r4, align 4
  store i32 %v0_de4c, i32* %r0.global-to-local, align 4
  %v1_de50 = call i32 @function_129e0(i32 %v0_de4c)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_de58 = call i32 @function_11598(i32 38)
  %v0_de5c = load i32, i32* @r6, align 4
  store i32 %v0_de5c, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v2_de64 = inttoptr i32 %v0_de5c to i32*
  %v3_de64 = call i32 @function_114b4(i32 38, i32* %v2_de64)
  %v0_de68 = load i32, i32* @r5, align 4
  store i32 %v0_de68, i32* @r1, align 4
  store i32 %v3_de64, i32* %r2.global-to-local, align 4
  store i32 %v2_de34, i32* %r0.global-to-local, align 4
  %v3_de74 = bitcast i32* %stack_var_-2120 to i8*
  %v4_de74 = call i32 @function_123a0(i8* %v3_de74, i32 %v0_de68, i32 %v3_de64)
  store i32 %v4_de74, i32* %r8.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_de80 = call i32 @function_114e0(i32 38)
  store i32 %v1_de80, i32* %r0.global-to-local, align 4
  %v7_de84 = icmp eq i32 %v4_de74, -1
  store i1 %v7_de84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de84, label %dec_label_pc_df00, label %dec_label_pc_de8c

dec_label_pc_de8c:                                ; preds = %dec_label_pc_de30
  %v0_de8c = load i32, i32* @r5, align 4
  %v9_de8c = icmp eq i32 %v0_de8c, %v4_de74
  store i1 %v9_de8c, i1* %cpsr_z.global-to-local, align 1
  %v7_de90 = icmp sgt i32 %v0_de8c, %v4_de74
  br i1 %v7_de90, label %dec_label_pc_de94, label %dec_label_pc_df00

dec_label_pc_de94:                                ; preds = %dec_label_pc_de8c
  %v2_de8c = sub i32 %v0_de8c, %v4_de74
  store i32 %v2_de8c, i32* %r3.global-to-local, align 4
  %v2_de9c = ptrtoint i32* %stack_var_-72 to i32
  %v0_dea0 = load i32, i32* @r6, align 4
  store i32 %v0_dea0, i32* %r1.global-to-local, align 4
  store i32 %v4_de74, i32* %r2.global-to-local, align 4
  %v0_deac = load i32, i32* %sl.global-to-local, align 4
  %v2_deac = add i32 %v0_deac, %v4_de74
  store i32 %v2_deac, i32* %r0.global-to-local, align 4
  store i32 %v2_de9c, i32* @r4, align 4
  %v1_debc = add i32 %v0_de8c, -1
  br label %dec_label_pc_deb4

dec_label_pc_deb4:                                ; preds = %dec_label_pc_def0, %dec_label_pc_de94
  %v0_def8 = phi i32 [ %v1_def8, %dec_label_pc_def0 ], [ %v2_de9c, %dec_label_pc_de94 ]
  %v0_def0 = phi i32 [ %v1_def0, %dec_label_pc_def0 ], [ %v4_de74, %dec_label_pc_de94 ]
  %v0_ded8 = phi i32 [ %v0_ded846, %dec_label_pc_def0 ], [ %v0_dea0, %dec_label_pc_de94 ]
  %v0_deb8 = phi i32 [ %v0_deb842, %dec_label_pc_def0 ], [ %v0_dea0, %dec_label_pc_de94 ]
  %v0_dec0 = phi i32 [ %v1_dec0, %dec_label_pc_def0 ], [ %v2_deac, %dec_label_pc_de94 ]
  %v1_deb4 = inttoptr i32 %v0_dec0 to i8*
  %v2_deb4 = load i8, i8* %v1_deb4, align 1
  %v3_deb4 = zext i8 %v2_deb4 to i32
  store i32 %v3_deb4, i32* %r3.global-to-local, align 4
  %v2_deb8 = icmp eq i32 %v0_deb8, 0
  store i1 %v2_deb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_debc, i32* %lr.global-to-local, align 4
  %v1_dec0 = add i32 %v0_dec0, 1
  store i32 %v1_dec0, i32* %r0.global-to-local, align 4
  %v1_dec4 = add nsw i32 %v3_deb4, -48
  store i32 %v1_dec4, i32* %ip.global-to-local, align 4
  br i1 %v2_deb8, label %dec_label_pc_decc, label %dec_label_pc_dedc

dec_label_pc_decc:                                ; preds = %dec_label_pc_deb4
  %v7_decc = icmp eq i8 %v2_deb4, 9
  store i1 %v7_decc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_decc, label %dec_label_pc_def0, label %bb

bb:                                               ; preds = %dec_label_pc_decc
  %v8_ded0 = icmp eq i8 %v2_deb4, 32
  store i1 %v8_ded0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ded0, label %dec_label_pc_def0, label %dec_label_pc_ded8

dec_label_pc_ded8:                                ; preds = %bb
  %v1_ded8 = add i32 %v0_ded8, 1
  store i32 %v1_ded8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_dedc

dec_label_pc_dedc:                                ; preds = %dec_label_pc_deb4, %dec_label_pc_ded8
  %v0_ded847 = phi i32 [ %v0_ded8, %dec_label_pc_deb4 ], [ %v1_ded8, %dec_label_pc_ded8 ]
  %v0_deb843 = phi i32 [ %v0_deb8, %dec_label_pc_deb4 ], [ %v1_ded8, %dec_label_pc_ded8 ]
  %v7_dedc = icmp eq i8 %v2_deb4, 46
  store i1 %v7_dedc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dedc, label %dec_label_pc_dee8, label %bb129

bb129:                                            ; preds = %dec_label_pc_dedc
  %v3_dee0 = icmp ugt i32 %v1_dec4, 8
  %v8_dee0 = icmp eq i32 %v1_dec4, 9
  store i1 %v8_dee0, i1* %cpsr_z.global-to-local, align 1
  %v2_dee4 = xor i1 %v8_dee0, true
  %v3_dee4 = and i1 %v3_dee0, %v2_dee4
  br i1 %v3_dee4, label %dec_label_pc_e430, label %dec_label_pc_dee8

dec_label_pc_dee8:                                ; preds = %dec_label_pc_dedc, %bb129
  %v9_dee8 = icmp eq i32 %v0_def0, %v1_debc
  store i1 %v9_dee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dee8, label %dec_label_pc_e430, label %dec_label_pc_def0

dec_label_pc_def0:                                ; preds = %dec_label_pc_decc, %dec_label_pc_dee8, %bb
  %v0_ded846 = phi i32 [ %v0_ded8, %dec_label_pc_decc ], [ %v0_ded847, %dec_label_pc_dee8 ], [ %v0_ded8, %bb ]
  %v0_deb842 = phi i32 [ 0, %dec_label_pc_decc ], [ %v0_deb843, %dec_label_pc_dee8 ], [ 0, %bb ]
  %v1_def0 = add i32 %v0_def0, 1
  store i32 %v1_def0, i32* %r2.global-to-local, align 4
  %v9_def4 = icmp eq i32 %v0_de8c, %v1_def0
  store i1 %v9_def4, i1* %cpsr_z.global-to-local, align 1
  %v1_def8 = add i32 %v0_def8, 1
  store i32 %v1_def8, i32* @r4, align 4
  br i1 %v9_def4, label %dec_label_pc_df00, label %dec_label_pc_deb4

dec_label_pc_df00:                                ; preds = %dec_label_pc_def0, %dec_label_pc_de8c, %dec_label_pc_de30, %dec_label_pc_dcc8
  %v0_df00 = call i32 @function_f8c4()
  %v1_df04 = urem i32 %v0_df00, 4
  store i32 %v1_df04, i32* %r0.global-to-local, align 4
  %v2_df08 = icmp eq i32 %v1_df04, 3
  store i1 %v2_df08, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_df00 to i2
  switch i2 %trunc, label %dec_label_pc_df2c25 [
    i2 0, label %dec_label_pc_e468
    i2 1, label %dec_label_pc_df24
    i2 -2, label %dec_label_pc_e458
    i2 -1, label %dec_label_pc_e47c
  ]

dec_label_pc_df24:                                ; preds = %dec_label_pc_df00
  store i32 74, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_df2c

dec_label_pc_df2c25:                              ; preds = %dec_label_pc_df00
  unreachable

dec_label_pc_df2c:                                ; preds = %dec_label_pc_e47c, %dec_label_pc_e468, %dec_label_pc_e458, %dec_label_pc_e430, %dec_label_pc_df24
  %stack_var_-2188.0 = phi i32 [ 4, %dec_label_pc_e47c ], [ 64, %dec_label_pc_e458 ], [ 74, %dec_label_pc_df24 ], [ 8, %dec_label_pc_e468 ], [ %phitmp, %dec_label_pc_e430 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_df30 = call i32 @function_12cb0(i32* null)
  %v0_df34 = load i32, i32* @r7, align 4
  %v2_df34 = icmp eq i32 %v0_df34, 0
  store i1 %v2_df34, i1* %cpsr_z.global-to-local, align 1
  %v1_df38 = load i32, i32* %fp.global-to-local, align 4
  %v2_df38 = add i32 %v1_df38, %v2_df30
  store i32 %v2_df38, i32* %r0.global-to-local, align 4
  br i1 %v2_df34, label %dec_label_pc_e40c, label %dec_label_pc_df44

dec_label_pc_df44:                                ; preds = %dec_label_pc_df2c
  store i32 %v0_df34, i32* %r0.global-to-local, align 4
  %v1_df48 = inttoptr i32 %v0_df34 to i8*
  %v2_df48 = call i32 @function_1204c(i8* %v1_df48)
  %v3_df48 = inttoptr i32 %v2_df48 to i8*
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_df5c = call i32 @function_132cc(i32 2, i32 3, i32 17)
  store i32 %v3_df5c, i32* %r0.global-to-local, align 4
  %v7_df60 = icmp eq i32 %v3_df5c, -1
  store i1 %v7_df60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df60, label %dec_label_pc_e40c, label %dec_label_pc_df6c

dec_label_pc_df6c:                                ; preds = %dec_label_pc_df44
  store i32 1, i32* %lr.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_df78 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_df78, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_df8c = call i32 @function_1329c(i32 %v3_df5c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_df8c, i32* %r0.global-to-local, align 4
  %v7_df90 = icmp eq i32 %v6_df8c, -1
  store i1 %v7_df90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df90, label %dec_label_pc_e404, label %dec_label_pc_df98

dec_label_pc_df98:                                ; preds = %dec_label_pc_df6c
  %v3_dfa0 = mul i32 %v7_dd38, 65536
  store i32 %v3_dfa0, i32* %r8.global-to-local, align 4
  %v3_dfac = mul i32 %v6_dd94, 65536
  store i32 %v3_dfac, i32* %r0.global-to-local, align 4
  %v3_dfb0 = mul i32 %v6_ddac, 65536
  store i32 %v3_dfb0, i32* %sl.global-to-local, align 4
  %v3_dfb4 = mul i32 %v6_ddc8, 65536
  store i32 %v3_dfb4, i32* %fp.global-to-local, align 4
  %v2_dfb8 = icmp eq i32 %v1_dcd4, 0
  store i1 %v2_dfb8, i1* %cpsr_z.global-to-local, align 1
  %v1_dfbc = urem i32 %v6_dde0, 256
  store i32 %v1_dfbc, i32* @sb, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_dfc4 = urem i32 %v7_dd38, 65536
  %v3_dfc8 = urem i32 %v6_dd94, 65536
  store i32 %v3_dfc8, i32* %ip.global-to-local, align 4
  %v3_dfcc = urem i32 %v6_ddac, 65536
  store i32 %v3_dfcc, i32* %lr.global-to-local, align 4
  %v3_dfd0 = urem i32 %v6_ddc8, 65536
  store i32 %v3_dfd0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_dfb8, label %dec_label_pc_e418.critedge, label %dec_label_pc_dfec

dec_label_pc_dfec:                                ; preds = %dec_label_pc_df98
  %v2_dff4 = add i32 %v2_df48, %v1_dfbc
  %v3_dff8 = mul i32 %v2_dff4, 65536
  %v1_dffc = add i32 %v3_dff8, 1769472
  %v1_e000 = add i32 %v3_dff8, 3080192
  %v1_e01c = urem i32 %v6_ddc8, 256
  %tmp130 = udiv i32 %v6_dd94, 256
  %v3_e020 = urem i32 %tmp130, 256
  %v1_e024 = urem i32 %v6_dd94, 256
  %v1_e018 = mul i32 %v7_dd38, 256
  %v3_e02c = and i32 %v1_e018, 65280
  store i32 %v3_e02c, i32* %r1.global-to-local, align 4
  %v1_e034 = urem i32 %v6_ddac, 256
  %tmp131 = udiv i32 %v7_dd38, 256
  %v3_e03c = udiv i32 %v1_dffc, 256
  %v1_e044 = and i32 %v3_e03c, 65280
  %tmp132 = udiv i32 %v6_ddac, 256
  %v4_e054 = udiv i32 %v1_dffc, 16777216
  %v5_e054 = or i32 %v1_e044, %v4_e054
  store i32 %v5_e054, i32* @r6, align 4
  %v3_e05c = sdiv i32 %v1_e000, 16777216
  %sext39 = mul i32 %tmp131, 16777216
  %v7_e05c = sdiv i32 %sext39, 16777216
  %v3_e060 = mul nuw nsw i32 %v1_e01c, 256
  %v4_e068 = mul nuw nsw i32 %v1_e024, 256
  %v5_e068 = or i32 %v4_e068, %v3_e020
  store i32 %v5_e068, i32* %r0.global-to-local, align 4
  %v3_e06c = ashr i32 %v1_e000, 31
  %tmp133 = udiv i32 %v6_ddc8, 256
  %v4_e070 = urem i32 %tmp133, 256
  %v5_e070 = or i32 %v4_e070, %v3_e060
  store i32 %v5_e070, i32* @r5, align 4
  %v3_e074 = ashr i32 %sext39, 31
  store i32 1, i32* %r8.global-to-local, align 4
  %v2_e07c = add i32 %v2_df48, 1
  store i32 %v2_e07c, i32* %fp.global-to-local, align 4
  store i32 %v1_e034, i32* %r3.global-to-local, align 4
  store i32 %v1_e024, i32* %r2.global-to-local, align 4
  %v3_e09069 = udiv i32 %v1_e044, 256
  store i32 %v3_e09069, i32* %ip.global-to-local, align 4
  store i32 %v1_e01c, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  %v5_e09c = trunc i32 %tmp130 to i8
  store i32 0, i32* %sl.global-to-local, align 4
  %sext18 = mul i32 %v6_dd50, 16777216
  %v4_e11c = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v1_dffc, 256
  %v4_e14c = sdiv i32 %sext19, 16777216
  %sext21 = mul i32 %v6_ddac, 16777216
  %v4_e168 = sdiv i32 %sext21, 16777216
  %sext22 = mul nuw i32 %v4_e054, 16777216
  %v4_e16c = sdiv i32 %sext22, 16777216
  %sext24 = mul i32 %v6_ddc8, 16777216
  %v4_e18c = sdiv i32 %sext24, 16777216
  %v1_e110 = trunc i32 %v3_e06c to i8
  %extract.t = trunc i32 %v3_e074 to i8
  %v1_e170 = trunc i32 %tmp132 to i8
  %v1_e198 = trunc i32 %v6_dd94 to i8
  br label %dec_label_pc_e0bc

dec_label_pc_e0bc:                                ; preds = %dec_label_pc_e21c, %dec_label_pc_dfec
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_e0c4 = call i32 @function_135b8(i32 600, i32 1)
  store i32 %v2_e0c4, i32* %r0.global-to-local, align 4
  store i32 %v2_dcfc, i32* %r2.global-to-local, align 4
  %v3_e0cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e0cc, i32* %r3.global-to-local, align 4
  %v2_e0d0 = load i32, i32* @r4, align 4
  %v5_e0d0 = mul i32 %v2_e0d0, 4
  %v6_e0d0 = add i32 %v5_e0d0, %v2_dcfc
  %v7_e0d0 = inttoptr i32 %v6_e0d0 to i32*
  store i32 %v2_e0c4, i32* %v7_e0d0, align 4
  %v0_e0d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_e0d4 = load i32, i32* %r3.global-to-local, align 4
  %v4_e0d4 = mul i32 %v1_e0d4, 4
  %v5_e0d4 = add i32 %v4_e0d4, %v0_e0d4
  %v6_e0d4 = inttoptr i32 %v5_e0d4 to i32*
  %v7_e0d4 = load i32, i32* %v6_e0d4, align 4
  store i32 %v7_e0d4, i32* %r1.global-to-local, align 4
  %v1_e0d8 = inttoptr i32 %v7_e0d4 to i8*
  %v2_e0d8 = load i8, i8* %v1_e0d8, align 1
  %tmp = urem i8 %v2_e0d8, 16
  %v1_e0dc = zext i8 %tmp to i32
  %v1_e0e0 = or i32 %v1_e0dc, 64
  store i32 %v1_e0e0, i32* %r2.global-to-local, align 4
  %v1_e0e4 = trunc i32 %v1_e0e0 to i8
  store i8 %v1_e0e4, i8* %v1_e0d8, align 1
  %v0_e0e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0e8 = inttoptr i32 %v0_e0e8 to i8*
  %v2_e0e8 = load i8, i8* %v1_e0e8, align 1
  %v1_e0ec = and i8 %v2_e0e8, -16
  %v1_e0f0 = or i8 %v1_e0ec, 5
  store i32 %v1_dd7c, i32* %ip.global-to-local, align 4
  store i8 %v1_e0f0, i8* %v1_e0e8, align 1
  %v2_e100 = load i32, i32* %r1.global-to-local, align 4
  %v3_e100 = add i32 %v2_e100, 1
  %v4_e100 = inttoptr i32 %v3_e100 to i8*
  store i8 %v5_dd34, i8* %v4_e100, align 1
  store i32 %v3_e06c, i32* %r3.global-to-local, align 4
  store i32 %v3_e05c, i32* %r2.global-to-local, align 4
  %v0_e10c = load i32, i32* %ip.global-to-local, align 4
  %v2_e10c = icmp eq i32 %v0_e10c, 0
  store i1 %v2_e10c, i1* %cpsr_z.global-to-local, align 1
  %v2_e110 = load i32, i32* %r1.global-to-local, align 4
  %v3_e110 = add i32 %v2_e110, 3
  %v4_e110 = inttoptr i32 %v3_e110 to i8*
  store i8 %v1_e110, i8* %v4_e110, align 1
  %v0_e114 = load i32, i32* %r2.global-to-local, align 4
  %v1_e114 = trunc i32 %v0_e114 to i8
  %v2_e114 = load i32, i32* %r1.global-to-local, align 4
  %v3_e114 = add i32 %v2_e114, 2
  %v4_e114 = inttoptr i32 %v3_e114 to i8*
  store i8 %v1_e114, i8* %v4_e114, align 1
  store i32 %v3_e074, i32* %lr.global-to-local, align 4
  store i32 %v4_e11c, i32* %r2.global-to-local, align 4
  %v0_e120 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e120, label %.thread26, label %bb134

bb134:                                            ; preds = %dec_label_pc_e0bc
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e124 = load i32, i32* %r1.global-to-local, align 4
  %v4_e124 = add i32 %v3_e124, 6
  %v5_e124 = inttoptr i32 %v4_e124 to i8*
  store i8 64, i8* %v5_e124, align 1
  %v0_e12c.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t70 = trunc i32 %v0_e12c.pre to i8
  br label %.thread26

.thread26:                                        ; preds = %dec_label_pc_e0bc, %bb134
  %v0_e12c.off0 = phi i8 [ %extract.t, %dec_label_pc_e0bc ], [ %extract.t70, %bb134 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_e12c = load i32, i32* %r1.global-to-local, align 4
  %v3_e12c = add i32 %v2_e12c, 5
  %v4_e12c = inttoptr i32 %v3_e12c to i8*
  store i8 %v0_e12c.off0, i8* %v4_e12c, align 1
  store i32 %v7_e05c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dd3c.81 to i32), i32* %lr.global-to-local, align 4
  %v0_e138 = load i32, i32* %r2.global-to-local, align 4
  %v1_e138 = trunc i32 %v0_e138 to i8
  %v2_e138 = load i32, i32* %r1.global-to-local, align 4
  %v3_e138 = add i32 %v2_e138, 8
  %v4_e138 = inttoptr i32 %v3_e138 to i8*
  store i8 %v1_e138, i8* %v4_e138, align 1
  %v0_e13c = load i32, i32* %r3.global-to-local, align 4
  %v1_e13c = trunc i32 %v0_e13c to i8
  %v2_e13c = load i32, i32* %r1.global-to-local, align 4
  %v3_e13c = add i32 %v2_e13c, 9
  %v4_e13c = inttoptr i32 %v3_e13c to i8*
  store i8 %v1_e13c, i8* %v4_e13c, align 1
  %v0_e140 = load i32, i32* %r1.global-to-local, align 4
  %v1_e140 = add i32 %v0_e140, 41
  %v2_e144 = load i32, i32* @global_var_1dd3c.81, align 4
  store i32 %v2_e144, i32* %r3.global-to-local, align 4
  %v0_e148 = load i32, i32* @sb, align 4
  %v2_e148 = add i32 %v1_e140, %v0_e148
  store i32 %v2_e148, i32* %r4.global-to-local, align 4
  store i32 %v4_e14c, i32* %r2.global-to-local, align 4
  %v1_e150 = add i32 %v0_e140, 20
  store i32 %v1_e150, i32* %r0.global-to-local, align 4
  %v0_e154 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e154, label %bb136, label %bb135

bb135:                                            ; preds = %.thread26
  %v1_e154 = load i32, i32* %sl.global-to-local, align 4
  %v2_e154 = trunc i32 %v1_e154 to i8
  %v4_e154 = add i32 %v0_e140, 7
  %v5_e154 = inttoptr i32 %v4_e154 to i8*
  store i8 %v2_e154, i8* %v5_e154, align 1
  %v2_e158.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb136

bb136:                                            ; preds = %.thread26, %bb135
  %v2_e158 = phi i32 [ %v0_e140, %.thread26 ], [ %v2_e158.pre, %bb135 ]
  %v0_e158 = load i32, i32* %ip.global-to-local, align 4
  %v1_e158 = trunc i32 %v0_e158 to i8
  %v3_e158 = add i32 %v2_e158, 4
  %v4_e158 = inttoptr i32 %v3_e158 to i8*
  store i8 %v1_e158, i8* %v4_e158, align 1
  %v0_e15c = load i32, i32* %r3.global-to-local, align 4
  %v1_e15c = load i32, i32* %r1.global-to-local, align 4
  %v2_e15c = add i32 %v1_e15c, 12
  %v3_e15c = inttoptr i32 %v2_e15c to i32*
  store i32 %v0_e15c, i32* %v3_e15c, align 4
  %v0_e160 = load i32, i32* %r2.global-to-local, align 4
  %v1_e160 = trunc i32 %v0_e160 to i8
  %v2_e160 = load i32, i32* %r0.global-to-local, align 4
  %v3_e160 = add i32 %v2_e160, 5
  %v4_e160 = inttoptr i32 %v3_e160 to i8*
  store i8 %v1_e160, i8* %v4_e160, align 1
  store i32 %v4_e168, i32* %lr.global-to-local, align 4
  store i32 %v4_e16c, i32* %r2.global-to-local, align 4
  %v2_e170 = load i32, i32* %r0.global-to-local, align 4
  %v3_e170 = add i32 %v2_e170, 2
  %v4_e170 = inttoptr i32 %v3_e170 to i8*
  store i8 %v1_e170, i8* %v4_e170, align 1
  %v0_e174 = load i32, i32* %lr.global-to-local, align 4
  %v1_e174 = trunc i32 %v0_e174 to i8
  %v2_e174 = load i32, i32* %r0.global-to-local, align 4
  %v3_e174 = add i32 %v2_e174, 3
  %v4_e174 = inttoptr i32 %v3_e174 to i8*
  store i8 %v1_e174, i8* %v4_e174, align 1
  %v0_e178 = load i32, i32* %r2.global-to-local, align 4
  %v1_e178 = trunc i32 %v0_e178 to i8
  %v2_e178 = load i32, i32* %r0.global-to-local, align 4
  %v3_e178 = add i32 %v2_e178, 4
  %v4_e178 = inttoptr i32 %v3_e178 to i8*
  store i8 %v1_e178, i8* %v4_e178, align 1
  store i32 %stack_var_-2188.0, i32* %lr.global-to-local, align 4
  %v2_e184 = load i32, i32* %r1.global-to-local, align 4
  %v3_e184 = add i32 %v2_e184, 20
  %v4_e184 = inttoptr i32 %v3_e184 to i8*
  store i8 %v5_e09c, i8* %v4_e184, align 1
  store i32 %v4_e18c, i32* %r3.global-to-local, align 4
  %v0_e190 = load i32, i32* %r1.global-to-local, align 4
  %v1_e190 = add i32 %v0_e190, 28
  store i32 %v1_e190, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v2_e198 = load i32, i32* %r0.global-to-local, align 4
  %v3_e198 = add i32 %v2_e198, 1
  %v4_e198 = inttoptr i32 %v3_e198 to i8*
  store i8 %v1_e198, i8* %v4_e198, align 1
  %v0_e19c = load i32, i32* %lr.global-to-local, align 4
  %v1_e19c = load i32, i32* %r1.global-to-local, align 4
  %v2_e19c = add i32 %v1_e19c, 16
  %v3_e19c = inttoptr i32 %v2_e19c to i32*
  store i32 %v0_e19c, i32* %v3_e19c, align 4
  %v0_e1a0 = load i32, i32* %r8.global-to-local, align 4
  %v1_e1a0 = trunc i32 %v0_e1a0 to i8
  %v2_e1a0 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1a0 = add i32 %v2_e1a0, 5
  %v4_e1a0 = inttoptr i32 %v3_e1a0 to i8*
  store i8 %v1_e1a0, i8* %v4_e1a0, align 1
  %v0_e1a4 = load i32, i32* @r5, align 4
  %v1_e1a4 = trunc i32 %v0_e1a4 to i8
  %v2_e1a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e1a4 = add i32 %v2_e1a4, 28
  %v4_e1a4 = inttoptr i32 %v3_e1a4 to i8*
  store i8 %v1_e1a4, i8* %v4_e1a4, align 1
  %v0_e1a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_e1a8 = trunc i32 %v0_e1a8 to i8
  %v2_e1a8 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1a8 = add i32 %v2_e1a8, 2
  %v4_e1a8 = inttoptr i32 %v3_e1a8 to i8*
  store i8 %v1_e1a8, i8* %v4_e1a8, align 1
  %v0_e1ac = load i32, i32* %r3.global-to-local, align 4
  %v1_e1ac = trunc i32 %v0_e1ac to i8
  %v2_e1ac = load i32, i32* %ip.global-to-local, align 4
  %v3_e1ac = add i32 %v2_e1ac, 1
  %v4_e1ac = inttoptr i32 %v3_e1ac to i8*
  store i8 %v1_e1ac, i8* %v4_e1ac, align 1
  %v0_e1b0 = load i32, i32* @r6, align 4
  %v1_e1b0 = trunc i32 %v0_e1b0 to i8
  %v2_e1b0 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1b0 = add i32 %v2_e1b0, 3
  %v4_e1b0 = inttoptr i32 %v3_e1b0 to i8*
  store i8 %v1_e1b0, i8* %v4_e1b0, align 1
  %v0_e1b4 = load i32, i32* @r6, align 4
  %v1_e1b4 = trunc i32 %v0_e1b4 to i8
  %v2_e1b4 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1b4 = add i32 %v2_e1b4, 4
  %v4_e1b4 = inttoptr i32 %v3_e1b4 to i8*
  store i8 %v1_e1b4, i8* %v4_e1b4, align 1
  %v0_e1b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_e1b8 = add i32 %v0_e1b8, 1
  store i32 %v1_e1b8, i32* %r0.global-to-local, align 4
  %v0_e1bc = load i32, i32* @sb, align 4
  %v1_e1bc = trunc i32 %v0_e1bc to i8
  %v2_e1bc = load i32, i32* %r1.global-to-local, align 4
  %v3_e1bc = add i32 %v2_e1bc, 40
  %v4_e1bc = inttoptr i32 %v3_e1bc to i8*
  store i8 %v1_e1bc, i8* %v4_e1bc, align 1
  %v0_e1c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_e1c0, i32* %r2.global-to-local, align 4
  %v0_e1c4 = load i32, i32* @r7, align 4
  store i32 %v0_e1c4, i32* %r1.global-to-local, align 4
  %v3_e1c8 = call i32 @function_120c8(i32 %v1_e1b8, i32 %v0_e1c4, i32 %v0_e1c0)
  store i32 %v3_e1c8, i32* %r0.global-to-local, align 4
  %v1_e1d0 = load i32, i32* @r6, align 4
  %v10_e1d0 = inttoptr i32 %v1_e1d0 to i8*
  %v15_e1d0 = icmp eq i32 %v2_df48, %v1_e1d0
  store i1 %v15_e1d0, i1* %cpsr_z.global-to-local, align 1
  %v9_e1d4 = icmp sgt i8* %v3_df48, %v10_e1d0
  store i32 %v1_e1d0, i32* %lr.global-to-local, align 4
  %v0_e1e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e1e4, i32* %ip.global-to-local, align 4
  %extract.t72 = trunc i32 %v1_e1d0 to i8
  br i1 %v9_e1d4, label %dec_label_pc_e1e0, label %dec_label_pc_e21c

dec_label_pc_e1e0:                                ; preds = %bb136
  store i32 %v1_e1d0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e1ec

dec_label_pc_e1ec:                                ; preds = %.thread38, %dec_label_pc_e1e0
  %v1_e1f4 = phi i32 [ %v1_e1f458, %.thread38 ], [ %v1_e1d0, %dec_label_pc_e1e0 ]
  %v0_e1ec = phi i32 [ %v1_e208, %.thread38 ], [ %v1_e1d0, %dec_label_pc_e1e0 ]
  %v1_e1ec = load i32, i32* @r7, align 4
  %v2_e1ec = add i32 %v1_e1ec, %v0_e1ec
  %v3_e1ec = inttoptr i32 %v2_e1ec to i8*
  %v4_e1ec = load i8, i8* %v3_e1ec, align 1
  %v6_e1ec = zext i8 %v4_e1ec to i32
  store i32 %v6_e1ec, i32* %r3.global-to-local, align 4
  %v7_e1f0 = icmp eq i8 %v4_e1ec, 46
  store i1 %v7_e1f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e1f0, label %bb137, label %.thread34

.thread34:                                        ; preds = %dec_label_pc_e1ec
  %v1_e1f836 = add i32 %v1_e1f4, 1
  store i32 %v1_e1f836, i32* %r2.global-to-local, align 4
  br label %bb138

bb137:                                            ; preds = %dec_label_pc_e1ec
  %v2_e1f4 = trunc i32 %v1_e1f4 to i8
  %v3_e1f4 = load i32, i32* %ip.global-to-local, align 4
  %v4_e1f4 = inttoptr i32 %v3_e1f4 to i8*
  store i8 %v2_e1f4, i8* %v4_e1f4, align 1
  %v0_e1fc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_e1f8 = load i32, i32* %lr.global-to-local, align 4
  %v1_e1f8 = add i32 %v0_e1f8, 1
  store i32 %v1_e1f8, i32* %r2.global-to-local, align 4
  br i1 %v0_e1fc.pr, label %bb139, label %bb138

bb138:                                            ; preds = %.thread34, %bb137
  %v1_e1f837 = phi i32 [ %v1_e1f836, %.thread34 ], [ %v1_e1f8, %bb137 ]
  %v2_e1fc = urem i32 %v1_e1f837, 256
  store i32 %v2_e1fc, i32* %lr.global-to-local, align 4
  br label %bb139

bb139:                                            ; preds = %bb137, %bb138
  %v1_e1f459 = phi i32 [ %v0_e1f8, %bb137 ], [ %v2_e1fc, %bb138 ]
  %v0_e210.pr = phi i1 [ true, %bb137 ], [ false, %bb138 ]
  store i32 %v2_df48, i32* %r2.global-to-local, align 4
  %v0_e204 = load i32, i32* %r4.global-to-local, align 4
  %v1_e204 = load i32, i32* %r1.global-to-local, align 4
  %v2_e204 = add i32 %v1_e204, %v0_e204
  store i32 %v2_e204, i32* %r0.global-to-local, align 4
  %v1_e208 = add i32 %v1_e204, 1
  store i32 %v1_e208, i32* %r1.global-to-local, align 4
  br i1 %v0_e210.pr, label %bb140, label %.thread38

bb140:                                            ; preds = %bb139
  %v2_e20c = add i32 %v2_e204, 1
  store i32 %v2_e20c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread38

.thread38:                                        ; preds = %bb139, %bb140
  %v1_e1f458 = phi i32 [ %v1_e1f459, %bb139 ], [ 0, %bb140 ]
  %v9_e214 = icmp eq i32 %v2_df48, %v1_e208
  store i1 %v9_e214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e214, label %dec_label_pc_e21c.loopexit, label %dec_label_pc_e1ec

dec_label_pc_e21c.loopexit:                       ; preds = %.thread38
  %v2_e21c.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_e1f458 to i8
  br label %dec_label_pc_e21c

dec_label_pc_e21c:                                ; preds = %dec_label_pc_e21c.loopexit, %bb136
  %v2_e21c = phi i32 [ %v2_e21c.pre, %dec_label_pc_e21c.loopexit ], [ %v0_e1e4, %bb136 ]
  %v0_e21c.off0 = phi i8 [ %extract.t71, %dec_label_pc_e21c.loopexit ], [ %extract.t72, %bb136 ]
  %v3_e21c = inttoptr i32 %v2_e21c to i8*
  store i8 %v0_e21c.off0, i8* %v3_e21c, align 1
  %v3_e220 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_df48, i32* %ip.global-to-local, align 4
  store i32 %v1_dcd4, i32* @lr, align 4
  %v0_e22c = load i32, i32* %r4.global-to-local, align 4
  %v2_e22c = add i32 %v0_e22c, %v2_df48
  store i32 %v2_e22c, i32* %r3.global-to-local, align 4
  %v1_e230 = add i32 %v3_e220, 1
  store i32 %v1_e230, i32* @r4, align 4
  %v9_e234 = icmp eq i32 %v1_dcd4, %v1_e230
  store i1 %v9_e234, i1* %cpsr_z.global-to-local, align 1
  %v1_e238 = add i32 %v2_e22c, 2
  store i32 %v1_e238, i32* %r2.global-to-local, align 4
  %v0_e23c = load i32, i32* %sl.global-to-local, align 4
  %v1_e23c = trunc i32 %v0_e23c to i8
  %v4_e23c = inttoptr i32 %v1_e238 to i8*
  store i8 %v1_e23c, i8* %v4_e23c, align 1
  %v0_e240 = load i32, i32* %r8.global-to-local, align 4
  %v1_e240 = trunc i32 %v0_e240 to i8
  %v2_e240 = load i32, i32* %r2.global-to-local, align 4
  %v3_e240 = add i32 %v2_e240, 3
  %v4_e240 = inttoptr i32 %v3_e240 to i8*
  store i8 %v1_e240, i8* %v4_e240, align 1
  %v0_e244 = load i32, i32* %r8.global-to-local, align 4
  %v1_e244 = trunc i32 %v0_e244 to i8
  %v2_e244 = load i32, i32* %r2.global-to-local, align 4
  %v3_e244 = add i32 %v2_e244, 1
  %v4_e244 = inttoptr i32 %v3_e244 to i8*
  store i8 %v1_e244, i8* %v4_e244, align 1
  %v0_e248 = load i32, i32* %sl.global-to-local, align 4
  %v1_e248 = trunc i32 %v0_e248 to i8
  %v2_e248 = load i32, i32* %r2.global-to-local, align 4
  %v3_e248 = add i32 %v2_e248, 2
  %v4_e248 = inttoptr i32 %v3_e248 to i8*
  store i8 %v1_e248, i8* %v4_e248, align 1
  %v0_e24c = load i32, i32* @r4, align 4
  store i32 %v0_e24c, i32* %stack_var_-40, align 4
  %v8_e250 = icmp sgt i32 %v1_dcd4, %v1_e230
  br i1 %v8_e250, label %dec_label_pc_e0bc, label %dec_label_pc_e254

dec_label_pc_e254:                                ; preds = %dec_label_pc_e21c, %dec_label_pc_e418
  store i32 %v1_dcd4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_dfb8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_dfb8, label %dec_label_pc_e418, label %dec_label_pc_e268

dec_label_pc_e268:                                ; preds = %dec_label_pc_e254
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_e274 = load i32, i32* @sb, align 4
  %v2_e274 = add i32 %v0_e274, %v2_df48
  store i32 %v2_e274, i32* %r3.global-to-local, align 4
  %v1_e278 = add i32 %v2_e274, 47
  store i32 %v1_e278, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r8, align 4
  %v1_e280 = add i32 %v2_e274, 27
  store i32 %v1_e280, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e37c

dec_label_pc_e290:                                ; preds = %dec_label_pc_e37c
  store i32 %v3_dfc8, i32* %r3.global-to-local, align 4
  %v9_e294 = icmp eq i32 %v3_dfc8, %v1_e294
  store i1 %v9_e294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e294, label %dec_label_pc_e3b8, label %dec_label_pc_e29c

dec_label_pc_e29c:                                ; preds = %dec_label_pc_e39c.dec_label_pc_e29c_crit_edge, %dec_label_pc_e290
  %v1_e2a0 = phi i32 [ %v1_e2a0.pre, %dec_label_pc_e39c.dec_label_pc_e29c_crit_edge ], [ %v1_e294, %dec_label_pc_e290 ]
  store i32 %v3_dfcc, i32* %ip.global-to-local, align 4
  %v9_e2a0 = icmp eq i32 %v3_dfcc, %v1_e2a0
  store i1 %v9_e2a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e2a0, label %dec_label_pc_e3d4, label %dec_label_pc_e2a8

dec_label_pc_e2a8:                                ; preds = %dec_label_pc_e3b8.dec_label_pc_e2a8_crit_edge, %dec_label_pc_e29c
  %v1_e2ac = phi i32 [ %v1_e2ac.pre, %dec_label_pc_e3b8.dec_label_pc_e2a8_crit_edge ], [ %v1_e2a0, %dec_label_pc_e29c ]
  store i32 %v3_dfd0, i32* %lr.global-to-local, align 4
  %v9_e2ac = icmp eq i32 %v3_dfd0, %v1_e2ac
  store i1 %v9_e2ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e2ac, label %dec_label_pc_e3f0, label %dec_label_pc_e2b4

dec_label_pc_e2b4:                                ; preds = %dec_label_pc_e3d4, %dec_label_pc_e2a8, %dec_label_pc_e3f0
  %v0_e2b4 = load i32, i32* @r6, align 4
  store i32 %v0_e2b4, i32* %r0.global-to-local, align 4
  %v0_e2b8 = load i32, i32* @sb, align 4
  store i32 %v0_e2b8, i32* %r1.global-to-local, align 4
  %v2_e2bc = call i32 @function_f978(i32 %v0_e2b4, i32 %v0_e2b8)
  %v0_e2c0 = load i32, i32* @r7, align 4
  %v1_e2c0 = trunc i32 %v0_e2c0 to i8
  %v2_e2c0 = load i32, i32* @r6, align 4
  %v3_e2c0 = load i32, i32* @sb, align 4
  %v4_e2c0 = add i32 %v3_e2c0, %v2_e2c0
  %v5_e2c0 = inttoptr i32 %v4_e2c0 to i8*
  store i8 %v1_e2c0, i8* %v5_e2c0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e2c8 = load i32, i32* @r7, align 4
  %v1_e2c8 = trunc i32 %v0_e2c8 to i8
  %v2_e2c8 = load i32, i32* @r4, align 4
  %v3_e2c8 = add i32 %v2_e2c8, 10
  %v4_e2c8 = inttoptr i32 %v3_e2c8 to i8*
  store i8 %v1_e2c8, i8* %v4_e2c8, align 1
  %v0_e2cc = load i32, i32* @r7, align 4
  %v1_e2cc = trunc i32 %v0_e2cc to i8
  %v2_e2cc = load i32, i32* @r4, align 4
  %v3_e2cc = add i32 %v2_e2cc, 11
  %v4_e2cc = inttoptr i32 %v3_e2cc to i8*
  store i8 %v1_e2cc, i8* %v4_e2cc, align 1
  %v0_e2d0 = load i32, i32* @r4, align 4
  store i32 %v0_e2d0, i32* @r0, align 4
  %v2_e2d4 = call i32 @function_e498(i32 %v0_e2d0, i32 20)
  %v3_e2d4 = trunc i32 %v2_e2d4 to i8
  store i32 %v2_e2d4, i32* %r0.global-to-local, align 4
  %v4_e2d8 = sdiv i32 %v2_e2d4, 256
  store i32 %v4_e2d8, i32* %r3.global-to-local, align 4
  %v1_e2dc = trunc i32 %v4_e2d8 to i8
  %v2_e2dc = load i32, i32* @r4, align 4
  %v3_e2dc = add i32 %v2_e2dc, 11
  %v4_e2dc = inttoptr i32 %v3_e2dc to i8*
  store i8 %v1_e2dc, i8* %v4_e2dc, align 1
  %v3_e2e0 = load i32, i32* @r4, align 4
  %v4_e2e0 = add i32 %v3_e2e0, 10
  %v5_e2e0 = inttoptr i32 %v4_e2e0 to i8*
  store i8 %v3_e2d4, i8* %v5_e2e0, align 1
  %v0_e2e4 = load i32, i32* @r7, align 4
  %v1_e2e4 = trunc i32 %v0_e2e4 to i8
  %v2_e2e4 = load i32, i32* @r5, align 4
  %v3_e2e4 = add i32 %v2_e2e4, 6
  %v4_e2e4 = inttoptr i32 %v3_e2e4 to i8*
  store i8 %v1_e2e4, i8* %v4_e2e4, align 1
  %v0_e2e8 = load i32, i32* @r7, align 4
  %v1_e2e8 = trunc i32 %v0_e2e8 to i8
  %v2_e2e8 = load i32, i32* @r5, align 4
  %v3_e2e8 = add i32 %v2_e2e8, 7
  %v4_e2e8 = inttoptr i32 %v3_e2e8 to i8*
  store i8 %v1_e2e8, i8* %v4_e2e8, align 1
  %v0_e2ec = load i32, i32* @r4, align 4
  %v1_e2ec = add i32 %v0_e2ec, 24
  %v2_e2ec = inttoptr i32 %v1_e2ec to i8*
  %v3_e2ec = load i8, i8* %v2_e2ec, align 1
  %v4_e2ec = zext i8 %v3_e2ec to i32
  store i32 %v4_e2ec, i32* %r3.global-to-local, align 4
  %v1_e2f0 = add i32 %v0_e2ec, 25
  %v2_e2f0 = inttoptr i32 %v1_e2f0 to i8*
  %v3_e2f0 = load i8, i8* %v2_e2f0, align 1
  %v4_e2f0 = zext i8 %v3_e2f0 to i32
  %v0_e2f4 = load i32, i32* @r5, align 4
  store i32 %v0_e2f4, i32* @r1, align 4
  %v4_e2f8 = mul nuw nsw i32 %v4_e2f0, 256
  %v5_e2f8 = or i32 %v4_e2f8, %v4_e2ec
  store i32 %v5_e2f8, i32* %r2.global-to-local, align 4
  store i32 %v0_e2ec, i32* %r0.global-to-local, align 4
  %v0_e300 = load i32, i32* @fp, align 4
  store i32 %v0_e300, i32* %r3.global-to-local, align 4
  %v4_e304 = call i32 @function_e4f4(i32 %v0_e2ec, i32 %v0_e2f4, i32 %v5_e2f8, i32 %v0_e300)
  %v5_e304 = trunc i32 %v4_e304 to i8
  store i32 %v4_e304, i32* %r0.global-to-local, align 4
  %v3_e308 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v5_e314 = mul i32 %v3_e308, 24
  store i32 %v5_e314, i32* %lr.global-to-local, align 4
  %v4_e31877 = udiv i32 %v4_e304, 256
  %v1_e31c = trunc i32 %v4_e31877 to i8
  %v2_e31c = load i32, i32* @r5, align 4
  %v3_e31c = add i32 %v2_e31c, 7
  %v4_e31c = inttoptr i32 %v3_e31c to i8*
  store i8 %v1_e31c, i8* %v4_e31c, align 1
  store i32 %stack_var_-2188.0, i32* %r3.global-to-local, align 4
  %v0_e324 = load i32, i32* %lr.global-to-local, align 4
  %v1_e324 = load i32, i32* %r2.global-to-local, align 4
  %v2_e324 = add i32 %v1_e324, %v0_e324
  store i32 %v2_e324, i32* %lr.global-to-local, align 4
  %v3_e328 = load i32, i32* @r5, align 4
  %v4_e328 = add i32 %v3_e328, 6
  %v5_e328 = inttoptr i32 %v4_e328 to i8*
  store i8 %v5_e304, i8* %v5_e328, align 1
  %v0_e32c = load i32, i32* %r3.global-to-local, align 4
  %v1_e32c = load i32, i32* %lr.global-to-local, align 4
  %v2_e32c = add i32 %v1_e32c, 4
  %v3_e32c = inttoptr i32 %v2_e32c to i32*
  store i32 %v0_e32c, i32* %v3_e32c, align 4
  %v0_e330 = load i32, i32* @r4, align 4
  %v1_e330 = add i32 %v0_e330, 20
  %v2_e330 = inttoptr i32 %v1_e330 to i32*
  %v3_e330 = load i32, i32* %v2_e330, align 4
  %v3_e334 = udiv i32 %v3_e330, 65536
  store i32 %v3_e334, i32* %r3.global-to-local, align 4
  %v3_e33816 = udiv i32 %v3_e330, 16777216
  %v1_e33c = trunc i32 %v3_e33816 to i8
  %v2_e33c = load i32, i32* %lr.global-to-local, align 4
  %v3_e33c = add i32 %v2_e33c, 3
  %v4_e33c = inttoptr i32 %v3_e33c to i8*
  store i8 %v1_e33c, i8* %v4_e33c, align 1
  %v0_e340 = load i32, i32* %r3.global-to-local, align 4
  %v1_e340 = trunc i32 %v0_e340 to i8
  %v2_e340 = load i32, i32* %lr.global-to-local, align 4
  %v3_e340 = add i32 %v2_e340, 2
  %v4_e340 = inttoptr i32 %v3_e340 to i8*
  store i8 %v1_e340, i8* %v4_e340, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e34c = load i32, i32* @r4, align 4
  store i32 %v0_e34c, i32* %r1.global-to-local, align 4
  store i32 %v3_df5c, i32* %r0.global-to-local, align 4
  store i32 %v1_e278, i32* %r2.global-to-local, align 4
  %v0_e358 = load i32, i32* %lr.global-to-local, align 4
  %v6_e360 = inttoptr i32 %v0_e34c to i32*
  %v7_e360 = call i32 @function_13268(i32 %v3_df5c, i32* %v6_e360, i32 %v1_e278, i32 16384, i32 %v0_e358, i32 16)
  %v3_e364 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e364, i32* %r3.global-to-local, align 4
  %v1_e36c = add i32 %v3_e364, 1
  store i32 %v1_e36c, i32* %r0.global-to-local, align 4
  %v9_e370 = icmp eq i32 %v1_dcd4, %v1_e36c
  store i1 %v9_e370, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e36c, i32* %stack_var_-40, align 4
  %v7_e378 = icmp sgt i32 %v1_dcd4, %v1_e36c
  br i1 %v7_e378, label %dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge, label %dec_label_pc_e418

dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge:    ; preds = %dec_label_pc_e2b4
  %v1_e388.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e37c

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge, %dec_label_pc_e268
  %v1_e294 = phi i32 [ %v1_e388.pre, %dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge ], [ 65535, %dec_label_pc_e268 ]
  %v1_e384 = phi i32 [ %v1_e36c, %dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge ], [ 0, %dec_label_pc_e268 ]
  store i32 %v2_dcfc, i32* %lr.global-to-local, align 4
  store i32 %v3_dfc4, i32* %r2.global-to-local, align 4
  %v4_e384 = mul i32 %v1_e384, 4
  %v5_e384 = add i32 %v4_e384, %v2_dcfc
  %v6_e384 = inttoptr i32 %v5_e384 to i32*
  %v7_e384 = load i32, i32* %v6_e384, align 4
  store i32 %v7_e384, i32* @r4, align 4
  %v9_e388 = icmp eq i32 %v3_dfc4, %v1_e294
  store i1 %v9_e388, i1* %cpsr_z.global-to-local, align 1
  %v1_e38c = add i32 %v7_e384, 20
  store i32 %v1_e38c, i32* @r5, align 4
  %v1_e390 = add i32 %v7_e384, 41
  store i32 %v1_e390, i32* @r6, align 4
  %v1_e394 = add i32 %v7_e384, 28
  store i32 %v1_e394, i32* @sl, align 4
  br i1 %v9_e388, label %dec_label_pc_e39c, label %dec_label_pc_e290

dec_label_pc_e39c:                                ; preds = %dec_label_pc_e37c
  %v0_e39c = call i32 @function_f8c4()
  %v1_e39c = trunc i32 %v0_e39c to i8
  store i32 %v0_e39c, i32* %r0.global-to-local, align 4
  %v4_e3a078 = udiv i32 %v0_e39c, 256
  %v1_e3a4 = trunc i32 %v4_e3a078 to i8
  %v2_e3a4 = load i32, i32* @r4, align 4
  %v3_e3a4 = add i32 %v2_e3a4, 5
  %v4_e3a4 = inttoptr i32 %v3_e3a4 to i8*
  store i8 %v1_e3a4, i8* %v4_e3a4, align 1
  store i32 %v3_dfc8, i32* %r3.global-to-local, align 4
  %v1_e3ac = load i32, i32* @r8, align 4
  %v9_e3ac = icmp eq i32 %v3_dfc8, %v1_e3ac
  store i1 %v9_e3ac, i1* %cpsr_z.global-to-local, align 1
  %v3_e3b0 = load i32, i32* @r4, align 4
  %v4_e3b0 = add i32 %v3_e3b0, 4
  %v5_e3b0 = inttoptr i32 %v4_e3b0 to i8*
  store i8 %v1_e39c, i8* %v5_e3b0, align 1
  %v0_e3b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3b4, label %dec_label_pc_e3b8, label %dec_label_pc_e39c.dec_label_pc_e29c_crit_edge

dec_label_pc_e39c.dec_label_pc_e29c_crit_edge:    ; preds = %dec_label_pc_e39c
  %v1_e2a0.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e29c

dec_label_pc_e3b8:                                ; preds = %dec_label_pc_e39c, %dec_label_pc_e290
  %v0_e3b8 = call i32 @function_f8c4()
  %v1_e3b8 = trunc i32 %v0_e3b8 to i8
  store i32 %v0_e3b8, i32* %r0.global-to-local, align 4
  store i32 %v3_dfcc, i32* %ip.global-to-local, align 4
  %v4_e3c0 = sdiv i32 %v0_e3b8, 256
  store i32 %v4_e3c0, i32* %r3.global-to-local, align 4
  %v1_e3c4 = load i32, i32* @r8, align 4
  %v9_e3c4 = icmp eq i32 %v3_dfcc, %v1_e3c4
  store i1 %v9_e3c4, i1* %cpsr_z.global-to-local, align 1
  %v3_e3c8 = load i32, i32* @r4, align 4
  %v4_e3c8 = add i32 %v3_e3c8, 20
  %v5_e3c8 = inttoptr i32 %v4_e3c8 to i8*
  store i8 %v1_e3b8, i8* %v5_e3c8, align 1
  %v0_e3cc = load i32, i32* %r3.global-to-local, align 4
  %v1_e3cc = trunc i32 %v0_e3cc to i8
  %v2_e3cc = load i32, i32* @r5, align 4
  %v3_e3cc = add i32 %v2_e3cc, 1
  %v4_e3cc = inttoptr i32 %v3_e3cc to i8*
  store i8 %v1_e3cc, i8* %v4_e3cc, align 1
  %v0_e3d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3d0, label %dec_label_pc_e3d4, label %dec_label_pc_e3b8.dec_label_pc_e2a8_crit_edge

dec_label_pc_e3b8.dec_label_pc_e2a8_crit_edge:    ; preds = %dec_label_pc_e3b8
  %v1_e2ac.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e2a8

dec_label_pc_e3d4:                                ; preds = %dec_label_pc_e3b8, %dec_label_pc_e29c
  %v0_e3d4 = call i32 @function_f8c4()
  %v1_e3d4 = trunc i32 %v0_e3d4 to i8
  store i32 %v0_e3d4, i32* %r0.global-to-local, align 4
  store i32 %v3_dfd0, i32* %lr.global-to-local, align 4
  %v4_e3dc = sdiv i32 %v0_e3d4, 256
  store i32 %v4_e3dc, i32* %r3.global-to-local, align 4
  %v1_e3e0 = load i32, i32* @r8, align 4
  %v9_e3e0 = icmp eq i32 %v3_dfd0, %v1_e3e0
  store i1 %v9_e3e0, i1* %cpsr_z.global-to-local, align 1
  %v1_e3e4 = trunc i32 %v4_e3dc to i8
  %v2_e3e4 = load i32, i32* @r5, align 4
  %v3_e3e4 = add i32 %v2_e3e4, 3
  %v4_e3e4 = inttoptr i32 %v3_e3e4 to i8*
  store i8 %v1_e3e4, i8* %v4_e3e4, align 1
  %v3_e3e8 = load i32, i32* @r5, align 4
  %v4_e3e8 = add i32 %v3_e3e8, 2
  %v5_e3e8 = inttoptr i32 %v4_e3e8 to i8*
  store i8 %v1_e3d4, i8* %v5_e3e8, align 1
  %v0_e3ec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3ec, label %dec_label_pc_e3f0, label %dec_label_pc_e2b4

dec_label_pc_e3f0:                                ; preds = %dec_label_pc_e3d4, %dec_label_pc_e2a8
  %v0_e3f0 = call i32 @function_f8c4()
  %v1_e3f0 = trunc i32 %v0_e3f0 to i8
  store i32 %v0_e3f0, i32* %r0.global-to-local, align 4
  %v4_e3f4 = sdiv i32 %v0_e3f0, 256
  store i32 %v4_e3f4, i32* %r3.global-to-local, align 4
  %v3_e3f8 = load i32, i32* @r4, align 4
  %v4_e3f8 = add i32 %v3_e3f8, 28
  %v5_e3f8 = inttoptr i32 %v4_e3f8 to i8*
  store i8 %v1_e3f0, i8* %v5_e3f8, align 1
  %v0_e3fc = load i32, i32* %r3.global-to-local, align 4
  %v1_e3fc = trunc i32 %v0_e3fc to i8
  %v2_e3fc = load i32, i32* @sl, align 4
  %v3_e3fc = add i32 %v2_e3fc, 1
  %v4_e3fc = inttoptr i32 %v3_e3fc to i8*
  store i8 %v1_e3fc, i8* %v4_e3fc, align 1
  br label %dec_label_pc_e2b4

dec_label_pc_e404:                                ; preds = %dec_label_pc_df6c
  store i32 %v3_df5c, i32* %r0.global-to-local, align 4
  %v1_e408 = call i32 @function_129e0(i32 %v3_df5c)
  store i32 %v1_e408, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e40c

dec_label_pc_e40c:                                ; preds = %dec_label_pc_e418, %dec_label_pc_df44, %dec_label_pc_df2c, %dec_label_pc_e404
  %v29_e414 = phi i32 [ %v3_df5c, %dec_label_pc_df44 ], [ %v2_df38, %dec_label_pc_df2c ], [ %v1_e408, %dec_label_pc_e404 ], [ %v2_e41c, %dec_label_pc_e418 ]
  store i32 %v3_dcc8, i32* %r4.global-to-local, align 4
  store i32 %v15_dcc8, i32* %r8.global-to-local, align 4
  store i32 %v21_dcc8, i32* %sl.global-to-local, align 4
  store i32 %v24_dcc8, i32* %fp.global-to-local, align 4
  ret i32 %v29_e414

dec_label_pc_e418.critedge:                       ; preds = %dec_label_pc_df98
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_e418

dec_label_pc_e418:                                ; preds = %dec_label_pc_e2b4, %dec_label_pc_e418.critedge, %dec_label_pc_e254
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_e41c = call i32 @function_12cb0(i32* null)
  store i32 %v2_e41c, i32* %r0.global-to-local, align 4
  store i32 %v2_df38, i32* %ip.global-to-local, align 4
  %v9_e424 = icmp eq i32 %v2_df38, %v2_e41c
  store i1 %v9_e424, i1* %cpsr_z.global-to-local, align 1
  %v6_e428 = icmp slt i32 %v2_df38, %v2_e41c
  br i1 %v6_e428, label %dec_label_pc_e40c, label %dec_label_pc_e254

dec_label_pc_e430:                                ; preds = %dec_label_pc_dee8, %bb129
  %v0_def0.lcssa = phi i32 [ %v1_debc, %dec_label_pc_dee8 ], [ %v0_def0, %bb129 ]
  %v2_e430 = sub i32 %v0_def0.lcssa, %v4_de74
  store i32 %v2_e430, i32* %r2.global-to-local, align 4
  store i32 %v2_deac, i32* %r1.global-to-local, align 4
  store i32 %v2_de9c, i32* %r0.global-to-local, align 4
  %v3_e43c = call i32 @function_120c8(i32 %v2_de9c, i32 %v2_deac, i32 %v2_e430)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_de9c, i32* @r0, align 4
  %v2_e448 = load i32, i32* @r4, align 4
  %v3_e448 = inttoptr i32 %v2_e448 to i8*
  store i8 0, i8* %v3_e448, align 1
  %v1_e44c = call i32 @function_130ac(i32 %v2_de9c)
  store i32 %v1_e44c, i32* %r0.global-to-local, align 4
  %sext40 = mul i32 %v1_e44c, 16777216
  %phitmp = sdiv i32 %sext40, 16777216
  br label %dec_label_pc_df2c

dec_label_pc_e458:                                ; preds = %dec_label_pc_df00
  store i32 104859200, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_df2c

dec_label_pc_e468:                                ; preds = %dec_label_pc_df00
  br label %dec_label_pc_df2c

dec_label_pc_e47c:                                ; preds = %dec_label_pc_df00
  store i32 33686020, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_df2c

; uselistorder directives
  uselistorder i32 %v2_e41c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_e3f0, { 0, 2, 1 }
  uselistorder i32 %v4_e3dc, { 1, 0 }
  uselistorder i32 %v0_e3d4, { 0, 2, 1 }
  uselistorder i32 %v0_e3b8, { 0, 2, 1 }
  uselistorder i32 %v0_e39c, { 0, 2, 1 }
  uselistorder i32 %v7_e384, { 2, 1, 0, 3 }
  uselistorder i32 %v1_e294, { 2, 1, 0 }
  uselistorder i32 %v1_e36c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_e304, { 0, 2, 1 }
  uselistorder i32 %v0_e2ec, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e2d8, { 1, 0 }
  uselistorder i32 %v2_e2d4, { 0, 2, 1 }
  uselistorder i32 %v1_e278, { 1, 0, 2 }
  uselistorder i32 %v1_e208, { 0, 2, 1 }
  uselistorder i32 %v1_e204, { 1, 0 }
  uselistorder i32 %v2_e1fc, { 1, 0 }
  uselistorder i32 %v1_e1d0, { 2, 1, 4, 0, 3, 6, 5 }
  uselistorder i32 %v3_e074, { 1, 0 }
  uselistorder i32 %v3_e06c, { 1, 0 }
  uselistorder i32 %v1_e024, { 1, 0 }
  uselistorder i32 %v1_e01c, { 1, 0 }
  uselistorder i32 %v1_e000, { 1, 0 }
  uselistorder i32 %v3_dff8, { 1, 0 }
  uselistorder i32 %v1_dfbc, { 1, 0 }
  uselistorder i1 %v7_df90, { 1, 0 }
  uselistorder i1 %v7_df60, { 1, 0 }
  uselistorder i32 %v3_df5c, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_df48, { 0, 1, 6, 3, 5, 7, 4, 2, 8 }
  uselistorder i32 %v2_df38, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_df34, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2188.0, { 1, 0 }
  uselistorder i32 %v1_df04, { 1, 0 }
  uselistorder i32 %v0_df00, { 1, 0 }
  uselistorder i32 %v1_def8, { 1, 0 }
  uselistorder i32 %v1_def0, { 1, 2, 0 }
  uselistorder i1 %v7_dedc, { 1, 0 }
  uselistorder i32 %v1_ded8, { 1, 0, 2 }
  uselistorder i1 %v8_ded0, { 1, 0 }
  uselistorder i1 %v7_decc, { 1, 0 }
  uselistorder i32 %v1_dec0, { 1, 0 }
  uselistorder i8 %v2_deb4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_deb8, { 1, 0 }
  uselistorder i32 %v0_ded8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_deac, { 1, 0, 2, 3 }
  uselistorder i32 %v0_dea0, { 1, 0, 2 }
  uselistorder i32 %v2_de9c, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_de8c, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_de84, { 1, 0 }
  uselistorder i32 %v4_de74, { 6, 5, 7, 4, 3, 1, 2, 0, 8 }
  uselistorder i32 %v0_de28, { 1, 0, 2, 3 }
  uselistorder i32 %v6_ddc8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_ddac, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_dd94, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v1_dd7c, { 1, 0 }
  uselistorder i32 %v7_dd38, { 1, 0, 3, 2 }
  uselistorder i32 %v6_dd14, { 1, 0 }
  uselistorder i32 %v2_dcfc, { 0, 3, 1, 2 }
  uselistorder i32 %v1_dcd4, { 3, 4, 2, 6, 7, 5, 8, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 12, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 25, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 17, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 1, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 40, 39, 41, 43, 42, 45, 44, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 6, 5, 7, 8, 9, 11, 10, 12, 14, 13, 15, 16, 17, 18, 26, 19, 20, 21, 22, 23, 24, 25, 30, 27, 28, 29, 31, 33, 32, 35, 34, 36, 37, 38, 39, 41, 40, 42, 43, 45, 44, 46, 48, 47, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 23, 24, 25, 26 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 18, 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder i32 41, { 4, 5, 6, 0, 1, 7, 2, 8, 3, 9 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_829c, { 82, 83, 84, 85, 86, 87, 88, 89, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 90, 91 }
  uselistorder label %dec_label_pc_e418, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e40c, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_e2b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e254, { 1, 0 }
  uselistorder label %.thread38, { 1, 0 }
  uselistorder label %bb139, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %bb136, { 1, 0 }
  uselistorder label %.thread26, { 1, 0 }
  uselistorder label %dec_label_pc_def0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_dee8, { 1, 0 }
  uselistorder label %dec_label_pc_dedc, { 1, 0 }
}

define i32 @function_e490(i32 %arg1) local_unnamed_addr {
dec_label_pc_e490:
  call void @__pseudo_cond_branch(i1 false, i32 11152832)
  %v0_e494 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e494, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e490
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e490, %bb
  %v10_e494 = load i32, i32* @r0, align 4
  ret i32 %v10_e494

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e498(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e498:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_e4c8, label %dec_label_pc_e4a4

dec_label_pc_e4a4:                                ; preds = %dec_label_pc_e498
  %v0_e4a8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e4a8, %dec_label_pc_e4a4
  %v0_e4bc = phi i32 [ %v2_e4bc, %dec_label_pc_e4a8 ], [ 0, %dec_label_pc_e4a4 ]
  %v0_e4b0 = phi i32 [ %v1_e4b0, %dec_label_pc_e4a8 ], [ %arg1, %dec_label_pc_e4a4 ]
  %v0_e4c0 = phi i32 [ %v1_e4c0, %dec_label_pc_e4a8 ], [ %v0_e4a8.pre, %dec_label_pc_e4a4 ]
  %v1_e4a8 = inttoptr i32 %v0_e4c0 to i8*
  %v2_e4a8 = load i8, i8* %v1_e4a8, align 1
  %v3_e4a8 = zext i8 %v2_e4a8 to i32
  %v1_e4ac = add i32 %v0_e4c0, 1
  %v2_e4ac = inttoptr i32 %v1_e4ac to i8*
  %v3_e4ac = load i8, i8* %v2_e4ac, align 1
  %v4_e4ac = zext i8 %v3_e4ac to i32
  %v1_e4b0 = add i32 %v0_e4b0, -2
  %v4_e4b4 = mul nuw nsw i32 %v4_e4ac, 256
  %v5_e4b4 = or i32 %v4_e4b4, %v3_e4a8
  %v2_e4bc = add i32 %v5_e4b4, %v0_e4bc
  %v1_e4c0 = add i32 %v0_e4c0, 2
  store i32 %v1_e4c0, i32* @r0, align 4
  %v1_e4b0.cmp = icmp ugt i32 %v1_e4b0, 1
  br i1 %v1_e4b0.cmp, label %dec_label_pc_e4a8, label %dec_label_pc_e4c8

dec_label_pc_e4c8:                                ; preds = %dec_label_pc_e4a8, %dec_label_pc_e498
  %v1_e4d0 = phi i32 [ 0, %dec_label_pc_e498 ], [ %v2_e4bc, %dec_label_pc_e4a8 ]
  %v0_e4c8 = phi i32 [ %arg1, %dec_label_pc_e498 ], [ %v1_e4b0, %dec_label_pc_e4a8 ]
  %v7_e4c8 = icmp eq i32 %v0_e4c8, 1
  br i1 %v7_e4c8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e4c8
  %v1_e4cc = load i32, i32* @r0, align 4
  %v2_e4cc = inttoptr i32 %v1_e4cc to i8*
  %v3_e4cc = load i8, i8* %v2_e4cc, align 1
  %v4_e4cc = zext i8 %v3_e4cc to i32
  %v3_e4d0 = add i32 %v1_e4d0, %v4_e4cc
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e4c8, %bb
  %v0_e4d4 = phi i32 [ %v1_e4d0, %dec_label_pc_e4c8 ], [ %v3_e4d0, %bb ]
  %v3_e4d8 = urem i32 %v0_e4d4, 65536
  %v4_e4dc = udiv i32 %v0_e4d4, 65536
  %v5_e4dc = add nuw nsw i32 %v4_e4dc, %v3_e4d8
  %v4_e4e0 = udiv i32 %v5_e4dc, 65536
  %v5_e4e0 = add nuw nsw i32 %v4_e4e0, %v5_e4dc
  %v1_e4e4 = urem i32 %v5_e4e0, 65536
  %v3_e4ec = xor i32 %v1_e4e4, 65535
  ret i32 %v3_e4ec

; uselistorder directives
  uselistorder i32 %v5_e4dc, { 1, 0 }
  uselistorder i32 %v1_e4c0, { 1, 0 }
  uselistorder i32 %v1_e4b0, { 1, 0, 2 }
  uselistorder i32 %v0_e4c0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e4f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e4f4:
  %v3_e504 = urem i32 %arg2, 65536
  %v1_e508 = add i32 %arg1, 12
  %v1_e50c = inttoptr i32 %v1_e508 to i32*
  %v2_e50c = load i32, i32* %v1_e50c, align 4
  %v3_e50c = add i32 %arg1, 16
  %v4_e50c = inttoptr i32 %v3_e50c to i32*
  %v5_e50c = load i32, i32* %v4_e50c, align 4
  %v7_e510 = icmp sgt i32 %arg3, 1
  br i1 %v7_e510, label %dec_label_pc_e51c.preheader, label %dec_label_pc_e53c

dec_label_pc_e51c.preheader:                      ; preds = %dec_label_pc_e4f4
  %v0_e51c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_e51c

dec_label_pc_e51c:                                ; preds = %dec_label_pc_e51c.preheader, %dec_label_pc_e51c
  %v0_e530 = phi i32 [ 0, %dec_label_pc_e51c.preheader ], [ %v2_e530, %dec_label_pc_e51c ]
  %v0_e524 = phi i32 [ %arg3, %dec_label_pc_e51c.preheader ], [ %v1_e524, %dec_label_pc_e51c ]
  %v0_e534 = phi i32 [ %v0_e51c.pre, %dec_label_pc_e51c.preheader ], [ %v1_e534, %dec_label_pc_e51c ]
  %v1_e51c = inttoptr i32 %v0_e534 to i8*
  %v2_e51c = load i8, i8* %v1_e51c, align 1
  %v3_e51c = zext i8 %v2_e51c to i32
  %v1_e520 = add i32 %v0_e534, 1
  %v2_e520 = inttoptr i32 %v1_e520 to i8*
  %v3_e520 = load i8, i8* %v2_e520, align 1
  %v4_e520 = zext i8 %v3_e520 to i32
  %v1_e524 = add nsw i32 %v0_e524, -2
  %v4_e528 = mul nuw nsw i32 %v4_e520, 256
  %v5_e528 = or i32 %v4_e528, %v3_e51c
  %v2_e530 = add i32 %v5_e528, %v0_e530
  %v1_e534 = add i32 %v0_e534, 2
  store i32 %v1_e534, i32* @r1, align 4
  %v8_e538 = icmp sgt i32 %v1_e524, 1
  br i1 %v8_e538, label %dec_label_pc_e51c, label %dec_label_pc_e53c

dec_label_pc_e53c:                                ; preds = %dec_label_pc_e51c, %dec_label_pc_e4f4
  %v1_e544 = phi i32 [ 0, %dec_label_pc_e4f4 ], [ %v2_e530, %dec_label_pc_e51c ]
  %v0_e53c = phi i32 [ %arg3, %dec_label_pc_e4f4 ], [ %v1_e524, %dec_label_pc_e51c ]
  %v7_e53c = icmp eq i32 %v0_e53c, 1
  br i1 %v7_e53c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e53c
  %v1_e540 = load i32, i32* @r1, align 4
  %v2_e540 = inttoptr i32 %v1_e540 to i8*
  %v3_e540 = load i8, i8* %v2_e540, align 1
  %v4_e540 = zext i8 %v3_e540 to i32
  %v3_e544 = add i32 %v4_e540, %v1_e544
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e53c, %bb
  %v0_e568 = phi i32 [ %v1_e544, %dec_label_pc_e53c ], [ %v3_e544, %bb ]
  %v3_e54c = urem i32 %v2_e50c, 65536
  %v1_e554 = add i32 %arg1, 9
  %v2_e554 = inttoptr i32 %v1_e554 to i8*
  %v3_e554 = load i8, i8* %v2_e554, align 1
  %v4_e554 = zext i8 %v3_e554 to i32
  %v3_e558 = urem i32 %v5_e50c, 65536
  %v4_e55c = udiv i32 %v2_e50c, 65536
  %v3_e564 = mul nuw nsw i32 %v4_e554, 256
  %v4_e568 = udiv i32 %v5_e50c, 65536
  %v5_e568 = add i32 %v0_e568, %v4_e568
  %v2_e56c = add i32 %v5_e568, %v3_e564
  %v5_e55c = add nuw nsw i32 %v3_e54c, %v3_e504
  %v2_e560 = add nuw nsw i32 %v5_e55c, %v4_e55c
  %v2_e570 = add nuw nsw i32 %v2_e560, %v3_e558
  %v2_e574 = add i32 %v2_e56c, %v2_e570
  %tmp = icmp ult i32 %v2_e574, 65536
  br i1 %tmp, label %dec_label_pc_e594, label %dec_label_pc_e580

dec_label_pc_e580:                                ; preds = %.thread, %dec_label_pc_e580
  %v2_e5881 = phi i32 [ %v2_e588, %dec_label_pc_e580 ], [ %v2_e574, %.thread ]
  %v3_e58c2.in = phi i32 [ %v2_e588, %dec_label_pc_e580 ], [ %v2_e574, %.thread ]
  %v3_e58c2 = udiv i32 %v3_e58c2.in, 65536
  %v3_e584 = urem i32 %v2_e5881, 65536
  %v2_e588 = add nuw nsw i32 %v3_e584, %v3_e58c2
  %tmp14 = icmp ult i32 %v2_e588, 65536
  br i1 %tmp14, label %dec_label_pc_e594.loopexit, label %dec_label_pc_e580

dec_label_pc_e594.loopexit:                       ; preds = %dec_label_pc_e580
  br label %dec_label_pc_e594

dec_label_pc_e594:                                ; preds = %dec_label_pc_e594.loopexit, %.thread
  %v0_e594 = phi i32 [ %v2_e588, %dec_label_pc_e594.loopexit ], [ %v2_e574, %.thread ]
  %v1_e594 = urem i32 %v0_e594, 65536
  %v3_e59c = xor i32 %v1_e594, 65535
  ret i32 %v3_e59c

; uselistorder directives
  uselistorder i32 %v2_e588, { 2, 1, 3, 0 }
  uselistorder i32 %v2_e574, { 3, 0, 2, 1 }
  uselistorder i32 %v1_e544, { 1, 0 }
  uselistorder i32 %v1_e534, { 1, 0 }
  uselistorder i32 %v1_e524, { 0, 2, 1 }
  uselistorder i32 %v0_e534, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e580, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e51c, { 1, 0 }
}

define i32 @function_e5a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_e5a4:
  %v2_e5a8 = load i32, i32* @global_var_1dca0.92, align 4
  %v2_e5b0 = call i32 @function_12ae0(i32 %v2_e5a8, i32 9)
  %v0_e5b4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e5b4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e5a4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e5a4, %bb
  ret i32 %v2_e5b0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e5b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_e5b8:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e5b8 = load i32, i32* @r4, align 4
  store i32 %v3_e5b8, i32* %stack_var_-36, align 4
  %v6_e5b8 = load i32, i32* @r5, align 4
  %v9_e5b8 = load i32, i32* @r6, align 4
  %v12_e5b8 = load i32, i32* @r7, align 4
  %v15_e5b8 = load i32, i32* @r8, align 4
  %v18_e5b8 = load i32, i32* @sb, align 4
  %v21_e5b8 = load i32, i32* @sl, align 4
  %v24_e5b8 = load i32, i32* @fp, align 4
  %v2_e5cc = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_e5cc, i32* @sl, align 4
  %v3_e5d4 = mul i32 %arg1, 65536
  store i32 %v3_e5d4, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_e5e0 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_e5ec = bitcast i32* %stack_var_-4677 to i8*
  %v3_e5ec = call i32 @function_12ff0(i8* %v2_e5ec, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_e604 = bitcast i32* %stack_var_-8773 to i8*
  %v3_e604 = call i32 @function_12ff0(i8* %v2_e604, i32 0)
  %v2_e608 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_e608, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_e628 = call i32 @function_12ff0(i8* nonnull %stack_var_-581, i32 0)
  %v2_e62c = ptrtoint i8* %stack_var_-68 to i32
  %v1_e634 = load i32, i32* @r5, align 4
  %v4_e634 = udiv i32 %v1_e634, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_e654 = trunc i32 %v4_e634 to i8
  %v4_e654 = call i32 @function_12540(i8 %v3_e654, i32 16, i32 %v2_e62c)
  %v2_e65c = call i32 @function_1204c(i8* nonnull %stack_var_-68)
  %v7_e660 = icmp eq i32 %v2_e65c, 2
  br i1 %v7_e660, label %dec_label_pc_eb0c, label %dec_label_pc_e668

dec_label_pc_e668:                                ; preds = %dec_label_pc_e5b8, %dec_label_pc_eb0c
  %v1_e66c = call i32 @function_11598(i32 6)
  %v1_e674 = call i32 @function_11598(i32 7)
  %v1_e67c = call i32 @function_11598(i32 8)
  %v1_e684 = call i32 @function_11598(i32 9)
  %v0_e688 = load i32, i32* @r4, align 4
  %v2_e690 = inttoptr i32 %v0_e688 to i32*
  %v3_e690 = call i32 @function_114b4(i32 9, i32* %v2_e690)
  %v0_e694 = load i32, i32* @r4, align 4
  %v2_e698 = inttoptr i32 %v3_e690 to i8*
  %v3_e698 = call i32 @function_12b0c(i8* %v2_e698, i32 %v0_e694)
  %v7_e69c = icmp eq i32 %v3_e698, -1
  store i32 %v3_e698, i32* @r8, align 4
  br i1 %v7_e69c, label %dec_label_pc_eacc, label %dec_label_pc_e6a8.preheader

dec_label_pc_e6a8.preheader:                      ; preds = %dec_label_pc_e668
  %v4_e6b458 = call i32 @function_122a4(i8* nonnull %stack_var_-581, i32 512, i32 %v3_e698)
  %v2_e6b860 = icmp eq i32 %v4_e6b458, 0
  br i1 %v2_e6b860, label %dec_label_pc_e848.loopexit, label %dec_label_pc_e6c0.lr.ph

dec_label_pc_e6c0.lr.ph:                          ; preds = %dec_label_pc_e6a8.preheader
  %v2_e708 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e6c0

dec_label_pc_e6c0:                                ; preds = %dec_label_pc_e6c0.lr.ph, %dec_label_pc_e6a8.backedge
  %v3_e6c4 = load i8, i8* %stack_var_-581, align 1
  %v4_e6c4 = sext i8 %v3_e6c4 to i32
  %v2_e6c8 = icmp eq i8 %v3_e6c4, 0
  br i1 %v2_e6c8, label %bb130, label %bb

bb:                                               ; preds = %dec_label_pc_e6c0
  %v8_e6cc = icmp eq i8 %v3_e6c4, 58
  br i1 %v8_e6cc, label %.thread6, label %dec_label_pc_e6e0

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e6f8

bb130:                                            ; preds = %dec_label_pc_e6c0
  br label %dec_label_pc_e6f8

dec_label_pc_e6e0:                                ; preds = %bb
  %v1_e6e8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e6e4

dec_label_pc_e6e4:                                ; preds = %bb131, %dec_label_pc_e6e0
  %v0_e6e4 = phi i32 [ %v1_e6e4, %bb131 ], [ 0, %dec_label_pc_e6e0 ]
  %v1_e6e4 = add i32 %v0_e6e4, 1
  %v2_e6e8 = add i32 %v1_e6e4, %v1_e6e8.pre
  %v3_e6e8 = inttoptr i32 %v2_e6e8 to i8*
  %v4_e6e8 = load i8, i8* %v3_e6e8, align 1
  %v6_e6e8 = zext i8 %v4_e6e8 to i32
  %v2_e6ec = icmp eq i8 %v4_e6e8, 0
  br i1 %v2_e6ec, label %dec_label_pc_e6f8, label %bb131

bb131:                                            ; preds = %dec_label_pc_e6e4
  %v8_e6f0 = icmp eq i8 %v4_e6e8, 58
  br i1 %v8_e6f0, label %dec_label_pc_e6f8, label %dec_label_pc_e6e4

dec_label_pc_e6f8:                                ; preds = %dec_label_pc_e6e4, %bb131, %bb130, %.thread6
  %v1_e724 = phi i32 [ 0, %.thread6 ], [ 0, %bb130 ], [ %v1_e6e4, %bb131 ], [ %v1_e6e4, %dec_label_pc_e6e4 ]
  %v0_e6f8 = phi i32 [ %v4_e6c4, %.thread6 ], [ %v4_e6c4, %bb130 ], [ %v6_e6e8, %bb131 ], [ %v6_e6e8, %dec_label_pc_e6e4 ]
  %v2_e6f8 = icmp eq i32 %v0_e6f8, 0
  br i1 %v2_e6f8, label %dec_label_pc_e6a8.backedge, label %dec_label_pc_e700

dec_label_pc_e6a8.backedge:                       ; preds = %dec_label_pc_e6f8, %dec_label_pc_e7d0, %dec_label_pc_e81c, %dec_label_pc_e744
  %v0_e6b0 = load i32, i32* @r8, align 4
  %v4_e6b4 = call i32 @function_122a4(i8* nonnull %stack_var_-581, i32 512, i32 %v0_e6b0)
  %v2_e6b8 = icmp eq i32 %v4_e6b4, 0
  br i1 %v2_e6b8, label %dec_label_pc_e848.loopexit, label %dec_label_pc_e6c0

dec_label_pc_e700:                                ; preds = %dec_label_pc_e6f8
  %v1_e704 = add i32 %v1_e724, 2
  %v2_e70c = add i32 %v1_e704, %v2_e708
  %v1_e710 = add i32 %v2_e70c, -545
  %v2_e710 = inttoptr i32 %v1_e710 to i8*
  %v3_e710 = load i8, i8* %v2_e710, align 1
  %v2_e714 = icmp eq i8 %v3_e710, 0
  br i1 %v2_e714, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_e700
  %v8_e718 = icmp eq i8 %v3_e710, 32
  br i1 %v8_e718, label %.thread10, label %dec_label_pc_e724

.thread10:                                        ; preds = %bb132
  store i32 %v1_e704, i32* @r5, align 4
  br label %dec_label_pc_e744

bb133:                                            ; preds = %dec_label_pc_e700
  store i32 %v1_e704, i32* @r5, align 4
  br label %dec_label_pc_e744

dec_label_pc_e724:                                ; preds = %bb132
  %v0_e724 = load i32, i32* @r6, align 4
  %v2_e724 = add i32 %v0_e724, %v1_e724
  br label %dec_label_pc_e728

dec_label_pc_e728:                                ; preds = %bb134, %dec_label_pc_e724
  %v0_e73413 = phi i32 [ %v1_e734, %bb134 ], [ %v2_e724, %dec_label_pc_e724 ]
  %v1_e728 = add i32 %v0_e73413, 3
  %v2_e728 = inttoptr i32 %v1_e728 to i8*
  %v3_e728 = load i8, i8* %v2_e728, align 1
  %v2_e72c = icmp eq i8 %v3_e728, 0
  br i1 %v2_e72c, label %.thread12, label %bb134

.thread12:                                        ; preds = %dec_label_pc_e728
  %v1_e73414 = add i32 %v0_e73413, 1
  br label %dec_label_pc_e73c

bb134:                                            ; preds = %dec_label_pc_e728
  %v8_e730 = icmp eq i8 %v3_e728, 32
  %v1_e734 = add i32 %v0_e73413, 1
  br i1 %v8_e730, label %dec_label_pc_e73c, label %dec_label_pc_e728

dec_label_pc_e73c:                                ; preds = %bb134, %.thread12
  %v1_e73415 = phi i32 [ %v1_e73414, %.thread12 ], [ %v1_e734, %bb134 ]
  %v2_e73c = sub i32 %v1_e73415, %v0_e724
  %v1_e740 = add i32 %v2_e73c, 2
  store i32 %v1_e740, i32* @r5, align 4
  br label %dec_label_pc_e744

dec_label_pc_e744:                                ; preds = %bb133, %.thread10, %dec_label_pc_e73c
  %v1_e750 = phi i32 [ %v1_e704, %.thread10 ], [ %v1_e704, %bb133 ], [ %v1_e740, %dec_label_pc_e73c ]
  %v0_e744 = load i32, i32* @r6, align 4
  %v2_e744 = add i32 %v0_e744, %v1_e704
  store i32 %v2_e744, i32* @r4, align 4
  %v2_e750 = add i32 %v1_e750, %v2_e708
  store i32 0, i32* @r7, align 4
  %v3_e75c = add i32 %v2_e750, -545
  %v4_e75c = inttoptr i32 %v3_e75c to i8*
  store i8 0, i8* %v4_e75c, align 1
  %v1_e760 = inttoptr i32 %v2_e744 to i8*
  %v2_e760 = call i32 @function_1204c(i8* %v1_e760)
  store i32 %v2_e760, i32* @r1, align 4
  %v0_e76c = load i32, i32* @r4, align 4
  %v3_e770 = inttoptr i32 %v0_e76c to i8*
  %v4_e770 = call i32 @function_123a0(i8* %v3_e770, i32 %v2_e760, i32 %v2_e62c)
  %v7_e774 = icmp eq i32 %v4_e770, -1
  br i1 %v7_e774, label %dec_label_pc_e6a8.backedge, label %dec_label_pc_e790.preheader

dec_label_pc_e790.preheader:                      ; preds = %dec_label_pc_e744
  %v1_e778 = load i32, i32* @r7, align 4
  %v1_e77c = load i32, i32* @r6, align 4
  %v2_e77c = load i32, i32* @r5, align 4
  %v3_e77c = add i32 %v2_e77c, %v1_e77c
  store i32 %v1_e778, i32* @lr, align 4
  store i32 %v1_e778, i32* @r4, align 4
  %v1_e79050 = add i32 %v3_e77c, 2
  %v2_e79051 = inttoptr i32 %v1_e79050 to i8*
  %v3_e79052 = load i8, i8* %v2_e79051, align 1
  %v2_e79454 = icmp eq i8 %v3_e79052, 0
  %v1_e79856 = add i32 %v2_e77c, 2
  br i1 %v2_e79454, label %dec_label_pc_e7d0, label %dec_label_pc_e7a0

dec_label_pc_e7a0:                                ; preds = %dec_label_pc_e790.preheader, %dec_label_pc_e790.backedge
  %v0_e7d086 = phi i32 [ %v0_e7d085, %dec_label_pc_e790.backedge ], [ %v1_e778, %dec_label_pc_e790.preheader ]
  %v0_e7b8.pr = phi i32 [ %v0_e7b8.pr71, %dec_label_pc_e790.backedge ], [ %v1_e778, %dec_label_pc_e790.preheader ]
  %v0_eadc = phi i32 [ %v0_eadc74, %dec_label_pc_e790.backedge ], [ %v1_e778, %dec_label_pc_e790.preheader ]
  %v0_e79882 = phi i32 [ %v1_e798, %dec_label_pc_e790.backedge ], [ %v1_e79856, %dec_label_pc_e790.preheader ]
  %v0_e7c8 = phi i32 [ %v0_e790, %dec_label_pc_e790.backedge ], [ %v3_e77c, %dec_label_pc_e790.preheader ]
  %v1_e7a4.in = phi i8 [ %v3_e790, %dec_label_pc_e790.backedge ], [ %v3_e79052, %dec_label_pc_e790.preheader ]
  %v7_e7a0 = icmp eq i8 %v1_e7a4.in, 9
  br i1 %v7_e7a0, label %.thread23, label %bb135

bb135:                                            ; preds = %dec_label_pc_e7a0
  %v8_e7a4 = icmp eq i8 %v1_e7a4.in, 32
  br i1 %v8_e7a4, label %.thread23.thread35, label %dec_label_pc_e7b8

.thread23.thread35:                               ; preds = %bb135
  br label %dec_label_pc_e7c4

.thread23:                                        ; preds = %dec_label_pc_e7a0
  br label %dec_label_pc_e7c4

dec_label_pc_e7b8:                                ; preds = %bb135
  %v7_e7b8 = icmp eq i32 %v0_e7b8.pr, 1
  br i1 %v7_e7b8, label %dec_label_pc_eadc, label %dec_label_pc_e7c0

dec_label_pc_e7c0:                                ; preds = %dec_label_pc_eadc, %dec_label_pc_e7b8
  %v0_e7c479 = phi i32 [ %v1_eadc, %dec_label_pc_eadc ], [ %v0_eadc, %dec_label_pc_e7b8 ]
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e7c0
  %v0_e7c4 = phi i32 [ %v0_eadc, %.thread23.thread35 ], [ %v0_eadc, %.thread23 ], [ %v0_e7c479, %dec_label_pc_e7c0 ]
  %v0_e7b8.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e7c0 ]
  %v7_e7cc = icmp sgt i32 %v0_e7c4, 6
  br i1 %v7_e7cc, label %dec_label_pc_e7d0, label %dec_label_pc_e790.backedge

dec_label_pc_e7d0:                                ; preds = %dec_label_pc_e790.backedge, %dec_label_pc_e7c4, %dec_label_pc_e790.preheader
  %v1_e820 = phi i32 [ %v1_e79856, %dec_label_pc_e790.preheader ], [ %v1_e798, %dec_label_pc_e790.backedge ], [ %v0_e79882, %dec_label_pc_e7c4 ]
  %v0_e7d0 = phi i32 [ %v1_e778, %dec_label_pc_e790.preheader ], [ %v0_e7d085, %dec_label_pc_e790.backedge ], [ %v0_e7d086, %dec_label_pc_e7c4 ]
  %v2_e7d0 = icmp eq i32 %v0_e7d0, 0
  br i1 %v2_e7d0, label %dec_label_pc_e6a8.backedge, label %dec_label_pc_e7dc

dec_label_pc_e7dc:                                ; preds = %dec_label_pc_e7d0
  %v2_e7e4 = add i32 %v1_e820, %v2_e708
  %v1_e7e8 = add i32 %v2_e7e4, -545
  %v2_e7e8 = inttoptr i32 %v1_e7e8 to i8*
  %v3_e7e8 = load i8, i8* %v2_e7e8, align 1
  %v2_e7ec = icmp eq i8 %v3_e7e8, 0
  br i1 %v2_e7ec, label %dec_label_pc_e81c, label %bb136

bb136:                                            ; preds = %dec_label_pc_e7dc
  %v8_e7f0 = icmp eq i8 %v3_e7e8, 32
  br i1 %v8_e7f0, label %dec_label_pc_e81c, label %dec_label_pc_e7f8

dec_label_pc_e7f8:                                ; preds = %bb136
  %v2_e7f8 = add i32 %v1_e820, %v1_e77c
  br label %dec_label_pc_e7fc

dec_label_pc_e7fc:                                ; preds = %bb137, %dec_label_pc_e7f8
  %v0_e80828 = phi i32 [ %v1_e808, %bb137 ], [ %v1_e820, %dec_label_pc_e7f8 ]
  %v0_e7fc = phi i32 [ %v1_e7fc, %bb137 ], [ %v2_e7f8, %dec_label_pc_e7f8 ]
  %v1_e7fc = add i32 %v0_e7fc, 1
  %v2_e7fc = inttoptr i32 %v1_e7fc to i8*
  %v3_e7fc = load i8, i8* %v2_e7fc, align 1
  %v2_e800 = icmp eq i8 %v3_e7fc, 0
  br i1 %v2_e800, label %.thread27, label %bb137

.thread27:                                        ; preds = %dec_label_pc_e7fc
  %v1_e80829 = add i32 %v0_e80828, 1
  br label %dec_label_pc_e810

bb137:                                            ; preds = %dec_label_pc_e7fc
  %v8_e804 = icmp eq i8 %v3_e7fc, 32
  %v1_e808 = add i32 %v0_e80828, 1
  br i1 %v8_e804, label %dec_label_pc_e810, label %dec_label_pc_e7fc

dec_label_pc_e810:                                ; preds = %bb137, %.thread27
  %v1_e818 = phi i32 [ %v1_e80829, %.thread27 ], [ %v1_e808, %bb137 ]
  %v2_e818 = add i32 %v1_e818, %v2_e708
  br label %dec_label_pc_e81c

dec_label_pc_e81c:                                ; preds = %dec_label_pc_e7dc, %bb136, %dec_label_pc_e810
  %v2_e828 = phi i32 [ %v2_e7e4, %dec_label_pc_e7dc ], [ %v2_e7e4, %bb136 ], [ %v2_e818, %dec_label_pc_e810 ]
  %v2_e820 = add i32 %v1_e820, %v1_e77c
  store i32 %v2_e820, i32* @r4, align 4
  %v3_e828 = add i32 %v2_e828, -545
  %v4_e828 = inttoptr i32 %v3_e828 to i8*
  store i8 0, i8* %v4_e828, align 1
  %v1_e82c = inttoptr i32 %v2_e820 to i8*
  %v2_e82c = call i32 @function_1204c(i8* %v1_e82c)
  %v8_e834 = icmp sgt i32 %v2_e82c, 15
  br i1 %v8_e834, label %dec_label_pc_e6a8.backedge, label %dec_label_pc_e838

dec_label_pc_e838:                                ; preds = %dec_label_pc_e81c
  %v0_e83c = load i32, i32* @r4, align 4
  %v2_e840 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e840, i32* @r0, align 4
  %v2_e844 = bitcast i32* %stack_var_-52 to i8*
  %v3_e844 = call i32 @function_12074(i8* %v2_e844, i32 %v0_e83c)
  br label %dec_label_pc_e848

dec_label_pc_e848.loopexit:                       ; preds = %dec_label_pc_e6a8.backedge, %dec_label_pc_e6a8.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre99 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e848

dec_label_pc_e848:                                ; preds = %dec_label_pc_e848.loopexit, %dec_label_pc_e838
  %v1_e858.pre-phi = phi i8* [ %.pre99, %dec_label_pc_e848.loopexit ], [ %v2_e844, %dec_label_pc_e838 ]
  %v2_e854.pre-phi = phi i32 [ %.pre, %dec_label_pc_e848.loopexit ], [ %v2_e840, %dec_label_pc_e838 ]
  %v0_e848 = load i32, i32* @r8, align 4
  %v1_e84c = call i32 @function_129e0(i32 %v0_e848)
  %v2_e858 = call i32 @function_1204c(i8* %v1_e858.pre-phi)
  store i32 %v2_e858, i32* @r4, align 4
  %v2_e85c = icmp eq i32 %v2_e858, 0
  br i1 %v2_e85c, label %dec_label_pc_eaac, label %dec_label_pc_e864

dec_label_pc_e864:                                ; preds = %dec_label_pc_e848
  %v3_e86c = call i32 @function_114b4(i32 6, i32* null)
  store i32 %v3_e86c, i32* @r0, align 4
  %v1_e870 = call i32 @function_12dbc(i32 %v3_e86c)
  store i32 %v1_e870, i32* @r8, align 4
  %v2_e874 = icmp eq i32 %v1_e870, 0
  br i1 %v2_e874, label %dec_label_pc_eaa4, label %dec_label_pc_e884.preheader

dec_label_pc_e884.preheader:                      ; preds = %dec_label_pc_e864
  store i32 0, i32* @r5, align 4
  %v1_e88845 = inttoptr i32 %v1_e870 to i32*
  %v2_e88846 = call i32 @function_12eb8(i32* %v1_e88845)
  %v2_e88c48 = icmp eq i32 %v2_e88846, 0
  br i1 %v2_e88c48, label %dec_label_pc_ea98, label %dec_label_pc_e894.preheader

dec_label_pc_e884.loopexit:                       ; preds = %dec_label_pc_e89c, %dec_label_pc_e8b0, %dec_label_pc_e918
  %v0_e884 = load i32, i32* @r8, align 4
  %v1_e888 = inttoptr i32 %v0_e884 to i32*
  %v2_e888 = call i32 @function_12eb8(i32* %v1_e888)
  %v2_e88c = icmp eq i32 %v2_e888, 0
  br i1 %v2_e88c, label %dec_label_pc_ea98, label %dec_label_pc_e894.preheader

dec_label_pc_e894.preheader:                      ; preds = %dec_label_pc_e884.preheader, %dec_label_pc_e884.loopexit
  %v0_e89c94 = phi i32 [ %v2_e888, %dec_label_pc_e884.loopexit ], [ %v2_e88846, %dec_label_pc_e884.preheader ]
  br label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %dec_label_pc_e894.preheader, %dec_label_pc_ea80
  %v0_e8a8 = phi i32 [ %v0_e89c94, %dec_label_pc_e894.preheader ], [ %v2_ea8c, %dec_label_pc_ea80 ]
  %v0_e894 = load i32, i32* @r5, align 4
  %v2_e894 = icmp eq i32 %v0_e894, 0
  br i1 %v2_e894, label %dec_label_pc_e89c, label %dec_label_pc_ea98

dec_label_pc_e89c:                                ; preds = %dec_label_pc_e894
  %v1_e89c = add i32 %v0_e8a8, 11
  %v2_e89c = inttoptr i32 %v1_e89c to i8*
  %v3_e89c = load i8, i8* %v2_e89c, align 1
  %v4_e89c = zext i8 %v3_e89c to i32
  %v1_e8a0 = add nsw i32 %v4_e89c, -48
  store i32 %v1_e89c, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e8a0, 9
  br i1 %tmp, label %dec_label_pc_e884.loopexit, label %dec_label_pc_e8b0

dec_label_pc_e8b0:                                ; preds = %dec_label_pc_e89c
  %v3_e8b8 = call i32 @function_114b4(i32 6, i32* null)
  store i32 %v2_e5cc, i32* @r0, align 4
  %v3_e8c4 = call i32 @function_12074(i8* %v2_e5ec, i32 %v3_e8b8)
  %v2_e8cc = call i32 @function_1204c(i8* %v2_e5ec)
  %v0_e8d0 = load i32, i32* @r7, align 4
  %v0_e8d4 = load i32, i32* @sl, align 4
  %v2_e8d4 = add i32 %v0_e8d4, %v2_e8cc
  store i32 %v2_e8d4, i32* @r0, align 4
  %v2_e8d8 = inttoptr i32 %v2_e8d4 to i8*
  %v3_e8d8 = call i32 @function_12074(i8* %v2_e8d8, i32 %v0_e8d0)
  %v2_e8e0 = call i32 @function_1204c(i8* %v2_e5ec)
  %v0_e8e4 = load i32, i32* @r5, align 4
  store i32 %v2_e8e0, i32* @r4, align 4
  %v2_e8f0 = inttoptr i32 %v0_e8e4 to i32*
  %v3_e8f0 = call i32 @function_114b4(i32 7, i32* %v2_e8f0)
  %v0_e8f8 = load i32, i32* @sl, align 4
  %v1_e8f8 = load i32, i32* @r4, align 4
  %v2_e8f8 = add i32 %v1_e8f8, %v0_e8f8
  store i32 %v2_e8f8, i32* @r0, align 4
  %v2_e8fc = inttoptr i32 %v2_e8f8 to i8*
  %v3_e8fc = call i32 @function_12074(i8* %v2_e8fc, i32 %v3_e8f0)
  %v4_e90c = call i32 @function_12bd4(i8* %v2_e5ec, i32 %v2_e5e0, i32 4096)
  %v7_e910 = icmp eq i32 %v4_e90c, -1
  br i1 %v7_e910, label %dec_label_pc_e884.loopexit, label %dec_label_pc_e918

dec_label_pc_e918:                                ; preds = %dec_label_pc_e8b0
  %v0_e918 = load i32, i32* @r5, align 4
  %v2_e920 = inttoptr i32 %v0_e918 to i32*
  %v3_e920 = call i32 @function_114b4(i32 6, i32* %v2_e920)
  store i32 %v2_e5cc, i32* @r0, align 4
  %v3_e92c = call i32 @function_12074(i8* %v2_e5ec, i32 %v3_e920)
  %v2_e934 = call i32 @function_1204c(i8* %v2_e5ec)
  %v0_e938 = load i32, i32* @r7, align 4
  %v0_e93c = load i32, i32* @sl, align 4
  %v2_e93c = add i32 %v0_e93c, %v2_e934
  store i32 %v2_e93c, i32* @r0, align 4
  %v2_e940 = inttoptr i32 %v2_e93c to i8*
  %v3_e940 = call i32 @function_12074(i8* %v2_e940, i32 %v0_e938)
  %v2_e948 = call i32 @function_1204c(i8* %v2_e5ec)
  %v0_e94c = load i32, i32* @r5, align 4
  store i32 %v2_e948, i32* @r4, align 4
  %v2_e958 = inttoptr i32 %v0_e94c to i32*
  %v3_e958 = call i32 @function_114b4(i32 8, i32* %v2_e958)
  %v0_e960 = load i32, i32* @sl, align 4
  %v1_e960 = load i32, i32* @r4, align 4
  %v2_e960 = add i32 %v1_e960, %v0_e960
  store i32 %v2_e960, i32* @r0, align 4
  %v2_e964 = inttoptr i32 %v2_e960 to i8*
  %v3_e964 = call i32 @function_12074(i8* %v2_e964, i32 %v3_e958)
  store i32 %v2_e5cc, i32* @r0, align 4
  %v1_e96c = call i32 @function_12dbc(i32 %v2_e5cc)
  store i32 %v1_e96c, i32* @sb, align 4
  %v2_e970 = icmp eq i32 %v1_e96c, 0
  br i1 %v2_e970, label %dec_label_pc_e884.loopexit, label %dec_label_pc_e978.preheader

dec_label_pc_e978.preheader:                      ; preds = %dec_label_pc_e918
  %v1_e97c40 = inttoptr i32 %v1_e96c to i32*
  %v2_e97c41 = call i32 @function_12eb8(i32* %v1_e97c40)
  store i32 %v2_e97c41, i32* @r6, align 4
  %v2_e98043 = icmp eq i32 %v2_e97c41, 0
  br i1 %v2_e98043, label %dec_label_pc_ea80, label %dec_label_pc_e990thread-pre-split

dec_label_pc_e978.loopexit:                       ; preds = %dec_label_pc_e998, %dec_label_pc_ea30
  %v0_e978 = load i32, i32* @sb, align 4
  %v1_e97c = inttoptr i32 %v0_e978 to i32*
  %v2_e97c = call i32 @function_12eb8(i32* %v1_e97c)
  store i32 %v2_e97c, i32* @r6, align 4
  %v2_e980 = icmp eq i32 %v2_e97c, 0
  br i1 %v2_e980, label %dec_label_pc_ea80, label %dec_label_pc_e990thread-pre-split

dec_label_pc_e990thread-pre-split:                ; preds = %dec_label_pc_e978.preheader, %dec_label_pc_e978.loopexit
  %v0_e990.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e990

dec_label_pc_e990:                                ; preds = %dec_label_pc_e990thread-pre-split, %dec_label_pc_ea58
  %v0_e990 = phi i32 [ %v0_e990.pr, %dec_label_pc_e990thread-pre-split ], [ 1, %dec_label_pc_ea58 ]
  %v2_e990 = icmp eq i32 %v0_e990, 0
  br i1 %v2_e990, label %dec_label_pc_e998, label %dec_label_pc_ea80

dec_label_pc_e998:                                ; preds = %dec_label_pc_e990
  %v2_e998 = call i32 @function_120ec(i32 %v2_e5e0, i32 4096)
  %v0_e99c = load i32, i32* @r5, align 4
  %v2_e9a4 = inttoptr i32 %v0_e99c to i32*
  %v3_e9a4 = call i32 @function_114b4(i32 6, i32* %v2_e9a4)
  store i32 %v2_e5cc, i32* @r0, align 4
  %v3_e9b0 = call i32 @function_12074(i8* %v2_e5ec, i32 %v3_e9a4)
  %v2_e9b8 = call i32 @function_1204c(i8* %v2_e5ec)
  %v0_e9bc = load i32, i32* @r7, align 4
  %v0_e9c0 = load i32, i32* @sl, align 4
  %v2_e9c0 = add i32 %v0_e9c0, %v2_e9b8
  store i32 %v2_e9c0, i32* @r0, align 4
  %v2_e9c4 = inttoptr i32 %v2_e9c0 to i8*
  %v3_e9c4 = call i32 @function_12074(i8* %v2_e9c4, i32 %v0_e9bc)
  %v2_e9cc = call i32 @function_1204c(i8* %v2_e5ec)
  %v0_e9d0 = load i32, i32* @r5, align 4
  store i32 %v2_e9cc, i32* @r4, align 4
  %v2_e9dc = inttoptr i32 %v0_e9d0 to i32*
  %v3_e9dc = call i32 @function_114b4(i32 8, i32* %v2_e9dc)
  %v0_e9e4 = load i32, i32* @sl, align 4
  %v1_e9e4 = load i32, i32* @r4, align 4
  %v2_e9e4 = add i32 %v1_e9e4, %v0_e9e4
  store i32 %v2_e9e4, i32* @r0, align 4
  %v2_e9e8 = inttoptr i32 %v2_e9e4 to i8*
  %v3_e9e8 = call i32 @function_12074(i8* %v2_e9e8, i32 %v3_e9dc)
  %v2_e9f0 = call i32 @function_1204c(i8* %v2_e5ec)
  %v0_e9f8 = load i32, i32* @sl, align 4
  %v2_e9f8 = add i32 %v0_e9f8, %v2_e9f0
  store i32 %v2_e9f8, i32* @r0, align 4
  %v2_e9fc = inttoptr i32 %v2_e9f8 to i8*
  %v3_e9fc = call i32 @function_12074(i8* %v2_e9fc, i32 ptrtoint (i32* @global_var_150e8.50 to i32))
  %v2_ea04 = call i32 @function_1204c(i8* %v2_e5ec)
  %v0_ea08 = load i32, i32* @r6, align 4
  %v1_ea08 = add i32 %v0_ea08, 11
  %v0_ea0c = load i32, i32* @sl, align 4
  %v2_ea0c = add i32 %v0_ea0c, %v2_ea04
  store i32 %v2_ea0c, i32* @r0, align 4
  %v2_ea10 = inttoptr i32 %v2_ea0c to i8*
  %v3_ea10 = call i32 @function_12074(i8* %v2_ea10, i32 %v1_ea08)
  %v4_ea20 = call i32 @function_12bd4(i8* %v2_e5ec, i32 %v2_e5e0, i32 4096)
  %v7_ea24 = icmp eq i32 %v4_ea20, -1
  br i1 %v7_ea24, label %dec_label_pc_e978.loopexit, label %dec_label_pc_ea30

dec_label_pc_ea30:                                ; preds = %dec_label_pc_e998
  %v2_ea30 = call i32 @function_1204c(i8* %v2_e604)
  store i32 %v2_ea30, i32* @r1, align 4
  %v4_ea44 = call i32 @function_123a0(i8* %v2_e604, i32 %v2_ea30, i32 %v2_e854.pre-phi)
  %v7_ea48 = icmp eq i32 %v4_ea44, -1
  br i1 %v7_ea48, label %dec_label_pc_e978.loopexit, label %dec_label_pc_ea58

dec_label_pc_ea58:                                ; preds = %dec_label_pc_ea30
  %v0_ea50 = load i32, i32* @r7, align 4
  %v2_ea58 = inttoptr i32 %v0_ea50 to i8*
  %v3_ea58 = call i32 @function_12178(i8* %v2_ea58, i32 10)
  %v2_ea60 = call i32 @function_12ae0(i32 %v3_ea58, i32 9)
  %v0_ea64 = load i32, i32* @sb, align 4
  %v1_ea68 = inttoptr i32 %v0_ea64 to i32*
  %v2_ea68 = call i32 @function_12eb8(i32* %v1_ea68)
  store i32 %v2_ea68, i32* @r6, align 4
  %v2_ea6c = icmp eq i32 %v2_ea68, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_ea6c, label %dec_label_pc_ea80, label %dec_label_pc_e990

dec_label_pc_ea80:                                ; preds = %dec_label_pc_e978.loopexit, %dec_label_pc_ea58, %dec_label_pc_e990, %dec_label_pc_e978.preheader
  %v0_ea80 = load i32, i32* @sb, align 4
  %v1_ea84 = inttoptr i32 %v0_ea80 to i32*
  %v2_ea84 = call i32 @function_12d08(i32* %v1_ea84)
  %v0_ea88 = load i32, i32* @r8, align 4
  %v1_ea8c = inttoptr i32 %v0_ea88 to i32*
  %v2_ea8c = call i32 @function_12eb8(i32* %v1_ea8c)
  %v2_ea90 = icmp eq i32 %v2_ea8c, 0
  br i1 %v2_ea90, label %dec_label_pc_ea98, label %dec_label_pc_e894

dec_label_pc_ea98:                                ; preds = %dec_label_pc_e884.loopexit, %dec_label_pc_ea80, %dec_label_pc_e894, %dec_label_pc_e884.preheader
  %v0_ea98 = load i32, i32* @r8, align 4
  %v1_ea9c = inttoptr i32 %v0_ea98 to i32*
  %v2_ea9c = call i32 @function_12d08(i32* %v1_ea9c)
  %v0_eaa0 = load i32, i32* @r5, align 4
  %v1_eaa0 = urem i32 %v0_eaa0, 256
  br label %dec_label_pc_eaa4

dec_label_pc_eaa4:                                ; preds = %dec_label_pc_e864, %dec_label_pc_ea98
  %storemerge = phi i32 [ %v1_eaa0, %dec_label_pc_ea98 ], [ 0, %dec_label_pc_e864 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_eaa8 = call i32 @function_13c3c(i32 1)
  br label %dec_label_pc_eaac

dec_label_pc_eaac:                                ; preds = %dec_label_pc_e848, %dec_label_pc_eaa4
  %v1_eab0 = call i32 @function_114e0(i32 6)
  %v1_eab8 = call i32 @function_114e0(i32 7)
  %v1_eac0 = call i32 @function_114e0(i32 8)
  %v1_eac8 = call i32 @function_114e0(i32 9)
  br label %dec_label_pc_eacc

dec_label_pc_eacc:                                ; preds = %dec_label_pc_e668, %dec_label_pc_eaac
  %v0_eacc = load i32, i32* @r4, align 4
  %v2_ead8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ead8, i32* @r4, align 4
  store i32 %v6_e5b8, i32* @r5, align 4
  store i32 %v9_e5b8, i32* @r6, align 4
  store i32 %v12_e5b8, i32* @r7, align 4
  store i32 %v15_e5b8, i32* @r8, align 4
  store i32 %v18_e5b8, i32* @sb, align 4
  store i32 %v21_e5b8, i32* @sl, align 4
  store i32 %v24_e5b8, i32* @fp, align 4
  ret i32 %v0_eacc

dec_label_pc_eadc:                                ; preds = %dec_label_pc_e7b8
  %v1_eadc = add i32 %v0_eadc, 1
  store i32 %v1_eadc, i32* @lr, align 4
  %v7_eae0 = icmp eq i32 %v0_eadc, 0
  br i1 %v7_eae0, label %dec_label_pc_eae8, label %dec_label_pc_e7c0

dec_label_pc_eae8:                                ; preds = %dec_label_pc_eadc
  %v1_eae8 = add i32 %v0_e7c8, 3
  %v2_eae8 = inttoptr i32 %v1_eae8 to i8*
  %v3_eae8 = load i8, i8* %v2_eae8, align 1
  %v7_eaec = icmp eq i8 %v3_eae8, 65
  br i1 %v7_eaec, label %dec_label_pc_eafc, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_eae8
  br label %dec_label_pc_e790.backedge

dec_label_pc_eafc:                                ; preds = %dec_label_pc_eae8
  store i32 %v1_eadc, i32* @r4, align 4
  br label %dec_label_pc_e790.backedge

dec_label_pc_e790.backedge:                       ; preds = %.thread33, %dec_label_pc_eafc, %dec_label_pc_e7c4
  %v0_e7d085 = phi i32 [ %v1_eadc, %dec_label_pc_eafc ], [ %v0_e7d086, %dec_label_pc_e7c4 ], [ %v0_e7d086, %.thread33 ]
  %v0_eadc74 = phi i32 [ %v1_eadc, %dec_label_pc_eafc ], [ %v0_e7c4, %dec_label_pc_e7c4 ], [ %v1_eadc, %.thread33 ]
  %v0_e7b8.pr71 = phi i32 [ 0, %dec_label_pc_eafc ], [ %v0_e7b8.pr72, %dec_label_pc_e7c4 ], [ 0, %.thread33 ]
  %v0_e790 = add i32 %v0_e7c8, 1
  %v1_e790 = add i32 %v0_e7c8, 3
  %v2_e790 = inttoptr i32 %v1_e790 to i8*
  %v3_e790 = load i8, i8* %v2_e790, align 1
  %v2_e794 = icmp eq i8 %v3_e790, 0
  %v1_e798 = add i32 %v0_e79882, 1
  br i1 %v2_e794, label %dec_label_pc_e7d0, label %dec_label_pc_e7a0

dec_label_pc_eb0c:                                ; preds = %dec_label_pc_e5b8
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_e668

; uselistorder directives
  uselistorder i32 %v1_e798, { 1, 0 }
  uselistorder i8 %v3_e790, { 1, 0 }
  uselistorder i32 %v0_e7d085, { 1, 0 }
  uselistorder i32 %v1_eadc, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_ea8c, { 1, 0 }
  uselistorder i32 %v1_e7fc, { 1, 0 }
  uselistorder i32 %v0_e80828, { 1, 0 }
  uselistorder i32 %v1_e820, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e7c4, { 1, 0 }
  uselistorder i32 %v0_e79882, { 1, 0 }
  uselistorder i32 %v0_eadc, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e7d086, { 1, 2, 0 }
  uselistorder i32 %v1_e79856, { 1, 0 }
  uselistorder i32 %v2_e77c, { 1, 0 }
  uselistorder i32 %v1_e778, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_e73413, { 1, 0, 2 }
  uselistorder i32 %v0_e724, { 1, 0 }
  uselistorder i32 %v1_e704, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_e698, { 1, 2, 0 }
  uselistorder i32 %v2_e5e0, { 1, 0, 2 }
  uselistorder i32 %v2_e5cc, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_123a0, { 0, 1, 2, 20, 21, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 (i8*, i32, i32)* @function_122a4, { 1, 0 }
  uselistorder label %dec_label_pc_e790.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eacc, { 1, 0 }
  uselistorder label %dec_label_pc_eaac, { 1, 0 }
  uselistorder label %dec_label_pc_eaa4, { 1, 0 }
  uselistorder label %dec_label_pc_ea98, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ea80, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e990, { 1, 0 }
  uselistorder label %dec_label_pc_e990thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e978.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e894, { 1, 0 }
  uselistorder label %dec_label_pc_e894.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e884.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e81c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e7c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e7a0, { 1, 0 }
  uselistorder label %dec_label_pc_e744, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e6a8.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e6f8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e6c0, { 1, 0 }
  uselistorder label %dec_label_pc_e668, { 1, 0 }
}

define i32 @function_eb38(i32 %arg1) local_unnamed_addr {
dec_label_pc_eb38:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-628 = alloca i32, align 4
  %stack_var_-116 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %v3_eb38 = load i32, i32* @r4, align 4
  %v6_eb38 = load i32, i32* @r5, align 4
  %v9_eb38 = load i32, i32* @r6, align 4
  %v12_eb38 = load i32, i32* @r7, align 4
  %v15_eb38 = load i32, i32* @r8, align 4
  %v18_eb38 = load i32, i32* @sb, align 4
  %v21_eb38 = load i32, i32* @sl, align 4
  %v24_eb38 = load i32, i32* @fp, align 4
  %v2_eb44 = call i32 @function_12cb0(i32* null)
  store i32 %v2_eb44, i32* @r6, align 4
  %v0_eb4c = call i32 @function_12a0c()
  %v7_eb50 = icmp eq i32 %v0_eb4c, -1
  %. = zext i1 %v7_eb50 to i32
  %tmp56 = icmp slt i32 %v0_eb4c, 1
  %storemerge37 = select i1 %tmp56, i32 %., i32 1
  store i32 %storemerge37, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1dca0.92 to i32), i32* %r3.global-to-local, align 4
  %v2_eb6c = icmp eq i32 %storemerge37, 0
  store i32 %v0_eb4c, i32* @global_var_1dca0.92, align 4
  br i1 %v2_eb6c, label %dec_label_pc_eb80, label %dec_label_pc_eb78

dec_label_pc_eb78:                                ; preds = %dec_label_pc_ebdc, %dec_label_pc_eb38
  %v29_eb7c = phi i32 [ %v0_eb4c, %dec_label_pc_eb38 ], [ 0, %dec_label_pc_ebdc ]
  store i32 %v3_eb38, i32* @r4, align 4
  store i32 %v6_eb38, i32* @r5, align 4
  store i32 %v9_eb38, i32* @r6, align 4
  store i32 %v12_eb38, i32* @r7, align 4
  store i32 %v15_eb38, i32* @r8, align 4
  store i32 %v18_eb38, i32* @sb, align 4
  store i32 %v21_eb38, i32* @sl, align 4
  store i32 %v24_eb38, i32* @fp, align 4
  ret i32 %v29_eb7c

dec_label_pc_eb80:                                ; preds = %dec_label_pc_eb38
  store i32 2, i32* @r5, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v1_eb94 = call i32 @function_e5b8(i32 20736)
  %v2_eb98 = icmp eq i32 %v1_eb94, 0
  br i1 %v2_eb98, label %dec_label_pc_eba0, label %dec_label_pc_edf4

dec_label_pc_eba0:                                ; preds = %dec_label_pc_eb80, %dec_label_pc_edf4, %dec_label_pc_ee1c
  %v1_eba4 = call i32 @function_13c3c(i32 5)
  %v1_ebac = call i32 @function_13464(i32 4096)
  %v2_ebac = inttoptr i32 %v1_ebac to i8*
  store i32 %v1_ebac, i32* @global_var_1dd40.96, align 4
  store i32 ptrtoint (i32* @global_var_1dca4.98 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i8 0, i8* %v2_ebac, align 1
  %v0_ebc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ebc4 = load i32, i32* %r3.global-to-local, align 4
  %v2_ebc4 = inttoptr i32 %v1_ebc4 to i32*
  store i32 %v0_ebc4, i32* %v2_ebc4, align 4
  %v0_ebc8 = load i32, i32* @r6, align 4
  store i32 %v0_ebc8, i32* @r5, align 4
  %v0_ebcc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ebcc, i32* @sb, align 4
  store i32 400, i32* @r6, align 4
  %v2_ebd4 = ptrtoint i32* %stack_var_-116 to i32
  store i32 %v2_ebd4, i32* @fp, align 4
  %v2_ebd8 = ptrtoint i32* %stack_var_-628 to i32
  store i32 %v2_ebd8, i32* @r8, align 4
  %v2_eccc = bitcast i32* %stack_var_-116 to i8*
  br label %dec_label_pc_ebdc

dec_label_pc_ebdc:                                ; preds = %dec_label_pc_ec90, %dec_label_pc_eba0
  %v1_ebe0 = call i32 @function_11598(i32 6)
  %v3_ebec = call i32 @function_114b4(i32 6, i32* null)
  store i32 %v3_ebec, i32* @r0, align 4
  %v1_ebf0 = call i32 @function_12dbc(i32 %v3_ebec)
  store i32 %v1_ebf0, i32* @sl, align 4
  %v2_ebf4 = icmp eq i32 %v1_ebf0, 0
  br i1 %v2_ebf4, label %dec_label_pc_eb78, label %dec_label_pc_ebfc

dec_label_pc_ebfc:                                ; preds = %dec_label_pc_ebdc
  %v1_ec00 = call i32 @function_114e0(i32 6)
  %v0_ec0420 = load i32, i32* @sl, align 4
  %v1_ec0821 = inttoptr i32 %v0_ec0420 to i32*
  %v2_ec0822 = call i32 @function_12eb8(i32* %v1_ec0821)
  %v2_ec0c24 = icmp eq i32 %v2_ec0822, 0
  br i1 %v2_ec0c24, label %dec_label_pc_ec90, label %dec_label_pc_ec14.preheader

dec_label_pc_ec14.preheader:                      ; preds = %dec_label_pc_ebfc, %dec_label_pc_ec04.backedge
  %v0_ec1429 = phi i32 [ %v2_ec08, %dec_label_pc_ec04.backedge ], [ %v2_ec0822, %dec_label_pc_ebfc ]
  br label %dec_label_pc_ec14

dec_label_pc_ec14:                                ; preds = %dec_label_pc_ec14.preheader, %dec_label_pc_ec78
  %v0_ec24 = phi i32 [ %v0_ec1429, %dec_label_pc_ec14.preheader ], [ %v2_ec84, %dec_label_pc_ec78 ]
  %v1_ec14 = add i32 %v0_ec24, 11
  %v2_ec14 = inttoptr i32 %v1_ec14 to i8*
  %v3_ec14 = load i8, i8* %v2_ec14, align 1
  %v4_ec14 = zext i8 %v3_ec14 to i32
  %v1_ec18 = add nsw i32 %v4_ec14, -48
  store i32 %v1_ec18, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_ec18, 9
  br i1 %tmp, label %dec_label_pc_ec04.backedge, label %dec_label_pc_ec24

dec_label_pc_ec24:                                ; preds = %dec_label_pc_ec14
  store i32 %v1_ec14, i32* @r4, align 4
  %v3_ec30 = call i32 @function_12178(i8* %v2_ec14, i32 10)
  %v0_ec34 = load i32, i32* @r6, align 4
  store i32 %v3_ec30, i32* @r7, align 4
  %v0_ec3c = load i32, i32* @sb, align 4
  %v1_ec3c = add i32 %v0_ec3c, 1
  store i32 %v1_ec3c, i32* @sb, align 4
  %v5_ec40 = icmp slt i32 %v0_ec34, %v3_ec30
  %v2_eca0 = call i32 @function_12cb0(i32* null)
  br i1 %v5_ec40, label %dec_label_pc_ec9c, label %dec_label_pc_ec44

dec_label_pc_ec44:                                ; preds = %dec_label_pc_ec24
  %v0_ec4c = load i32, i32* @r5, align 4
  %v2_ec4c = sub i32 %v2_eca0, %v0_ec4c
  %v7_ec54 = icmp slt i32 %v2_ec4c, 601
  br i1 %v7_ec54, label %dec_label_pc_ec5c, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_ec44
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_ec04.backedge

dec_label_pc_ec5c:                                ; preds = %dec_label_pc_ec44
  %v0_ec5c = load i32, i32* @r7, align 4
  %v7_ec60 = icmp slt i32 %v0_ec5c, 401
  br i1 %v7_ec60, label %dec_label_pc_ec04.backedge, label %dec_label_pc_ec64

dec_label_pc_ec64:                                ; preds = %dec_label_pc_ec5c
  %v0_ec64 = load i32, i32* @sb, align 4
  %v2_ec6c = call i32 @function_12768(i32 %v0_ec64, i32 10)
  %v2_ec70 = icmp eq i32 %v2_ec6c, 0
  br i1 %v2_ec70, label %dec_label_pc_ec78, label %dec_label_pc_ec04.backedge

dec_label_pc_ec78:                                ; preds = %dec_label_pc_ec64
  %v1_ec7c = call i32 @function_13c3c(i32 1)
  %v0_ec80 = load i32, i32* @sl, align 4
  %v1_ec84 = inttoptr i32 %v0_ec80 to i32*
  %v2_ec84 = call i32 @function_12eb8(i32* %v1_ec84)
  %v2_ec88 = icmp eq i32 %v2_ec84, 0
  br i1 %v2_ec88, label %dec_label_pc_ec90, label %dec_label_pc_ec14

dec_label_pc_ec90:                                ; preds = %dec_label_pc_ec04.backedge, %dec_label_pc_ec78, %dec_label_pc_ebfc
  %v0_ec90 = load i32, i32* @sl, align 4
  %v1_ec94 = inttoptr i32 %v0_ec90 to i32*
  %v2_ec94 = call i32 @function_12d08(i32* %v1_ec94)
  br label %dec_label_pc_ebdc

dec_label_pc_ec9c:                                ; preds = %dec_label_pc_ec24
  store i32 %v2_eca0, i32* %stack_var_-632, align 4
  %v1_ecac = call i32 @function_11598(i32 6)
  %v1_ecb4 = call i32 @function_11598(i32 10)
  %v3_ecc0 = call i32 @function_114b4(i32 6, i32* null)
  store i32 %v2_ebd4, i32* @r0, align 4
  %v3_eccc = call i32 @function_12074(i8* %v2_eccc, i32 %v3_ecc0)
  %v0_ecd0 = load i32, i32* @fp, align 4
  %v2_ecd0 = add i32 %v0_ecd0, %v3_eccc
  store i32 %v2_ecd0, i32* @r5, align 4
  %v0_ecd4 = load i32, i32* @r4, align 4
  store i32 %v2_ecd0, i32* @r0, align 4
  %v2_ecdc = inttoptr i32 %v2_ecd0 to i8*
  %v3_ecdc = call i32 @function_12074(i8* %v2_ecdc, i32 %v0_ecd4)
  store i32 %v3_ecdc, i32* @r4, align 4
  %v3_ecec = call i32 @function_114b4(i32 10, i32* null)
  %v0_ecf4 = load i32, i32* @r5, align 4
  %v1_ecf4 = load i32, i32* @r4, align 4
  %v2_ecf4 = add i32 %v1_ecf4, %v0_ecf4
  store i32 %v2_ecf4, i32* @r0, align 4
  %v2_ecf8 = inttoptr i32 %v2_ecf4 to i8*
  %v3_ecf8 = call i32 @function_12074(i8* %v2_ecf8, i32 %v3_ecec)
  %v1_ed00 = call i32 @function_114e0(i32 6)
  %v1_ed08 = call i32 @function_114e0(i32 10)
  %v3_ed14 = call i32 @function_12b0c(i8* %v2_eccc, i32 0)
  %v7_ed18 = icmp eq i32 %v3_ed14, -1
  store i32 %v3_ed14, i32* @r6, align 4
  br i1 %v7_ed18, label %dec_label_pc_edc0, label %dec_label_pc_ed24

dec_label_pc_ed24:                                ; preds = %dec_label_pc_ec9c
  %v1_ed28 = call i32 @function_11598(i32 62)
  br label %dec_label_pc_ed2c

dec_label_pc_ed2c:                                ; preds = %dec_label_pc_ed94, %.thread6, %dec_label_pc_ed44, %dec_label_pc_ed24
  %v0_ed2c = load i32, i32* @r6, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v4_ed38 = call i32 @function_12ba8(i32 %v0_ed2c, i32* nonnull %stack_var_-628, i32 512)
  store i32 %v4_ed38, i32* @r4, align 4
  %tmp59 = icmp slt i32 %v4_ed38, 1
  br i1 %tmp59, label %dec_label_pc_ede0, label %dec_label_pc_ed44

dec_label_pc_ed44:                                ; preds = %dec_label_pc_ed2c
  %v3_ed4c = call i32 @function_114b4(i32 62, i32* null)
  store i32 %v3_ed4c, i32* @r5, align 4
  %v3_ed5c = call i32 @function_114b4(i32 62, i32* null)
  %v1_ed60 = inttoptr i32 %v3_ed5c to i8*
  %v2_ed60 = call i32 @function_1204c(i8* %v1_ed60)
  %v0_ed64 = load i32, i32* @r4, align 4
  %v5_ed68 = icmp slt i32 %v0_ed64, %v2_ed60
  br i1 %v5_ed68, label %dec_label_pc_ed2c, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_ed44
  %v1_ed7412 = add i32 %v0_ed64, -1
  store i32 %v1_ed7412, i32* @r4, align 4
  %v2_ed7413 = icmp eq i32 %v0_ed64, 0
  br i1 %v2_ed7413, label %dec_label_pc_ed2c, label %dec_label_pc_ed7c.lr.ph

dec_label_pc_ed7c.lr.ph:                          ; preds = %.thread6
  %v0_ed7c.pre = load i32, i32* @r5, align 4
  %v1_ed80.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_ed7c

dec_label_pc_ed7c:                                ; preds = %dec_label_pc_ed94, %dec_label_pc_ed7c.lr.ph
  %v0_ed74 = phi i32 [ %v1_ed7412, %dec_label_pc_ed7c.lr.ph ], [ %v1_ed74, %dec_label_pc_ed94 ]
  %v0_ed94 = phi i32 [ 0, %dec_label_pc_ed7c.lr.ph ], [ %v1_ed94, %dec_label_pc_ed94 ]
  %v0_ed88 = phi i32 [ 0, %dec_label_pc_ed7c.lr.ph ], [ %v1_ed88., %dec_label_pc_ed94 ]
  %v2_ed7c = add i32 %v0_ed88, %v0_ed7c.pre
  %v3_ed7c = inttoptr i32 %v2_ed7c to i8*
  %v4_ed7c = load i8, i8* %v3_ed7c, align 1
  %v6_ed7c = zext i8 %v4_ed7c to i32
  store i32 %v6_ed7c, i32* %r2.global-to-local, align 4
  %v2_ed80 = add i32 %v0_ed94, %v1_ed80.pre
  %v3_ed80 = inttoptr i32 %v2_ed80 to i8*
  %v4_ed80 = load i8, i8* %v3_ed80, align 1
  %v6_ed80 = zext i8 %v4_ed80 to i32
  store i32 %v6_ed80, i32* %r3.global-to-local, align 4
  %v9_ed84 = icmp eq i8 %v4_ed80, %v4_ed7c
  %v1_ed88 = add i32 %v0_ed88, 1
  %v1_ed88. = select i1 %v9_ed84, i32 %v1_ed88, i32 0
  br i1 %v9_ed84, label %dec_label_pc_ed9c, label %dec_label_pc_ed94

dec_label_pc_ed94:                                ; preds = %dec_label_pc_ed9c, %dec_label_pc_ed7c
  %v1_ed94 = add i32 %v0_ed94, 1
  %v1_ed74 = add i32 %v0_ed74, -1
  store i32 %v1_ed74, i32* @r4, align 4
  %v2_ed74 = icmp eq i32 %v0_ed74, 0
  br i1 %v2_ed74, label %dec_label_pc_ed2c, label %dec_label_pc_ed7c

dec_label_pc_ed9c:                                ; preds = %dec_label_pc_ed7c
  %v9_ed9c = icmp eq i32 %v2_ed60, %v1_ed88.
  br i1 %v9_ed9c, label %dec_label_pc_eda4, label %dec_label_pc_ed94

dec_label_pc_eda4:                                ; preds = %dec_label_pc_ed9c
  %v1_eda8 = call i32 @function_114e0(i32 62)
  %v0_edac = load i32, i32* @r6, align 4
  %v1_edb0 = call i32 @function_129e0(i32 %v0_edac)
  %v0_edb4 = load i32, i32* @r7, align 4
  %v2_edbc = call i32 @function_12ae0(i32 %v0_edb4, i32 9)
  br label %dec_label_pc_edc0

dec_label_pc_edc0:                                ; preds = %dec_label_pc_ec9c, %dec_label_pc_ede0, %dec_label_pc_eda4
  %v2_edc8 = call i32 @function_120ec(i32 %v2_ebd4, i32 64)
  %v1_edd0 = call i32 @function_13c3c(i32 1)
  %v2_edd4 = load i32, i32* %stack_var_-632, align 4
  store i32 %v2_edd4, i32* @r5, align 4
  %v0_edd8 = load i32, i32* @r7, align 4
  store i32 %v0_edd8, i32* @r6, align 4
  br label %dec_label_pc_ec04.backedge

dec_label_pc_ec04.backedge:                       ; preds = %dec_label_pc_ec64, %dec_label_pc_ec5c, %dec_label_pc_ec14, %dec_label_pc_edc0, %.thread1
  %v0_ec04 = load i32, i32* @sl, align 4
  %v1_ec08 = inttoptr i32 %v0_ec04 to i32*
  %v2_ec08 = call i32 @function_12eb8(i32* %v1_ec08)
  %v2_ec0c = icmp eq i32 %v2_ec08, 0
  br i1 %v2_ec0c, label %dec_label_pc_ec90, label %dec_label_pc_ec14.preheader

dec_label_pc_ede0:                                ; preds = %dec_label_pc_ed2c
  %v1_ede4 = call i32 @function_114e0(i32 62)
  %v0_ede8 = load i32, i32* @r6, align 4
  %v1_edec = call i32 @function_129e0(i32 %v0_ede8)
  br label %dec_label_pc_edc0

dec_label_pc_edf4:                                ; preds = %dec_label_pc_eb80
  %v0_edf4 = load i32, i32* @r4, align 4
  store i32 %v0_edf4, i32* %r2.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_edfc = load i32, i32* @r5, align 4
  %v3_ee0c = call i32 @function_132cc(i32 %v0_edfc, i32 1, i32 %v0_edf4)
  %v7_ee10 = icmp eq i32 %v3_ee0c, -1
  store i32 %v3_ee0c, i32* @r4, align 4
  br i1 %v7_ee10, label %dec_label_pc_eba0, label %dec_label_pc_ee1c

dec_label_pc_ee1c:                                ; preds = %dec_label_pc_edf4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_ee24 = bitcast i32* %stack_var_-52 to %sockaddr*
  %v4_ee24 = call i32 @function_130fc(i32 %v3_ee0c, %sockaddr* %v3_ee24, i32 16)
  %v0_ee28 = load i32, i32* @r4, align 4
  %v2_ee30 = call i32 @function_131b0(i32 %v0_ee28, i32 1)
  br label %dec_label_pc_eba0

; uselistorder directives
  uselistorder i32 %v3_ee0c, { 2, 1, 0 }
  uselistorder i32 %v2_ec08, { 1, 0 }
  uselistorder i32 %v1_ed74, { 1, 0 }
  uselistorder i32 %v1_ed88., { 1, 0 }
  uselistorder i1 %v9_ed84, { 1, 0 }
  uselistorder i32 %v0_ed88, { 1, 0 }
  uselistorder i32 %v0_ed94, { 1, 0 }
  uselistorder i32 %v0_ed74, { 1, 0 }
  uselistorder i32 %v0_ed64, { 1, 0, 2 }
  uselistorder i32 %v2_ed60, { 1, 0 }
  uselistorder i32 %v3_ed14, { 1, 0 }
  uselistorder i32 %v2_ec84, { 1, 0 }
  uselistorder i32 %storemerge37, { 1, 0 }
  uselistorder i32 %v0_eb4c, { 1, 2, 3, 0 }
  uselistorder i32 (i8*, i32)* @function_12178, { 1, 2, 5, 3, 4, 0 }
  uselistorder i32 (i32*)* @function_12eb8, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_12dbc, { 2, 1, 0 }
  uselistorder i32* @global_var_1dca0.92, { 0, 2, 1 }
  uselistorder label %dec_label_pc_ec04.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_edc0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ec14, { 1, 0 }
  uselistorder label %dec_label_pc_ec14.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_eba0, { 2, 1, 0 }
}

define i32 @function_ee44(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ee44:
  store i32 ptrtoint (i32* @global_var_ee5c.100 to i32), i32* @global_var_1db2c.102, align 4
  ret i32 %arg1
}

define i32 @function_ee5c() local_unnamed_addr {
dec_label_pc_ee5c:
  %stack_var_-8 = alloca i32, align 4
  %v3_ee5c = load i32, i32* @r4, align 4
  store i32 %v3_ee5c, i32* %stack_var_-8, align 4
  %v1_ee64 = call i32 @function_11598(i32 2)
  store i32 385990760, i32* @global_var_1dd48.105, align 4
  %v3_ee84 = call i32 @function_114b4(i32 2, i32* null)
  %v4_ee84 = inttoptr i32 %v3_ee84 to i8*
  %v2_ee88 = add i32 %v3_ee84, 1
  %v3_ee88 = inttoptr i32 %v2_ee88 to i8*
  %v4_ee88 = load i8, i8* %v3_ee88, align 1
  %v3_ee8c = load i8, i8* %v4_ee84, align 1
  store i8 %v4_ee88, i8* bitcast (i32* @global_var_1dd47.106 to i8*), align 4
  store i8 %v3_ee8c, i8* bitcast (i32* @global_var_1dd46.107 to i8*), align 4
  %v2_eea4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_eea4, i32* @r4, align 4
  %v1_eea8 = call i32 @function_114e0(i32 2)
  %v0_eeac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_eeac, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_ee5c
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_ee5c, %bb
  ret i32 %v1_eea8

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_eeb0(i32 %arg1) local_unnamed_addr {
dec_label_pc_eeb0:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_eeb0 = load i32, i32* @r4, align 4
  %v9_eeb0 = load i32, i32* @r6, align 4
  %v12_eeb0 = load i32, i32* @r7, align 4
  %v15_eeb0 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_eecc = call i32 @function_132cc(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1db24.109 to i32), i32* @r6, align 4
  %v7_eed4 = icmp eq i32 %v3_eecc, -1
  store i32 %v3_eecc, i32* @global_var_1db24.109, align 4
  br i1 %v7_eed4, label %dec_label_pc_ef94, label %dec_label_pc_eee0

dec_label_pc_eee0:                                ; preds = %dec_label_pc_eeb0
  %v0_eee4 = load i32, i32* @r4, align 4
  %v6_eef4 = call i32 @function_1329c(i32 %v3_eecc, i32 %v0_eee4, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_eef8 = load i32, i32* @global_var_1db24.109, align 4
  store i32 %v2_eef8, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_ef08 = call i32 @function_1291c(i32 %v2_eef8, i32 3)
  %v1_ef10 = or i32 %v2_ef08, 2048
  store i32 %v1_ef10, i32* @r2, align 4
  %v0_ef14 = load i32, i32* @r4, align 4
  %v2_ef18 = call i32 @function_1291c(i32 %v0_ef14, i32 4)
  store i32 ptrtoint (i8** @global_var_1db30.111 to i32), i32* @r8, align 4
  %v2_ef20 = load i8, i8* bitcast (i8** @global_var_1db30.111 to i8*), align 4
  %v2_ef24 = icmp eq i8 %v2_ef20, 0
  br i1 %v2_ef24, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_eee0
  br label %bb

.thread:                                          ; preds = %dec_label_pc_eee0
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_ef5c = call i32 @function_12f88()
  %v0_ef60 = load i32, i32* @r5, align 4
  %v2_ef60 = inttoptr i32 %v0_ef5c to i32*
  store i32 %v0_ef60, i32* %v2_ef60, align 4
  %v2_ef64 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_ef64, i32* @r7, align 4
  store i32 %v0_ef5c, i32* @r4, align 4
  %v2_ef70 = load i32, i32* @global_var_1db24.109, align 4
  %v3_ef78 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_ef78 = call i32 @function_130fc(i32 %v2_ef70, %sockaddr* %v3_ef78, i32 16)
  %v7_ef7c = icmp eq i32 %v4_ef78, -1
  br i1 %v7_ef7c, label %dec_label_pc_ef9c, label %dec_label_pc_ef84

dec_label_pc_ef84:                                ; preds = %bb
  %v2_ef8c = load i32, i32* @global_var_1db24.109, align 4
  %v2_ef90 = call i32 @function_131b0(i32 %v2_ef8c, i32 1)
  br label %dec_label_pc_ef94

dec_label_pc_ef94:                                ; preds = %dec_label_pc_eeb0, %dec_label_pc_efa8, %dec_label_pc_ef84
  %v20_ef98 = phi i32 [ %v3_eecc, %dec_label_pc_eeb0 ], [ %v1_eff8, %dec_label_pc_efa8 ], [ %v2_ef90, %dec_label_pc_ef84 ]
  store i32 %v3_eeb0, i32* @r4, align 4
  store i32 %v9_eeb0, i32* @r6, align 4
  store i32 %v12_eeb0, i32* @r7, align 4
  store i32 %v15_eeb0, i32* @r8, align 4
  ret i32 %v20_ef98

dec_label_pc_ef9c:                                ; preds = %bb
  %v0_ef9c = load i32, i32* @r4, align 4
  %v1_ef9c = inttoptr i32 %v0_ef9c to i32*
  %v2_ef9c = load i32, i32* %v1_ef9c, align 4
  %v7_efa0 = icmp eq i32 %v2_ef9c, 99
  br i1 %v7_efa0, label %dec_label_pc_f000, label %dec_label_pc_efa8

dec_label_pc_efa8:                                ; preds = %dec_label_pc_f000, %bb21, %dec_label_pc_ef9c
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_efc0 = load i32, i32* @global_var_1db24.109, align 4
  %v4_efd8 = call i32 @function_13128(i32 %v2_efc0, %sockaddr* %v3_ef78, i32 16)
  %v1_efe0 = call i32 @function_13c3c(i32 5)
  %v2_efe4 = load i32, i32* @global_var_1db24.109, align 4
  %v1_efe8 = call i32 @function_129e0(i32 %v2_efe4)
  %v1_eff4 = call i32 @function_e5b8(i32 50951)
  %v1_eff8 = call i32 @function_eeb0(i32 %v1_eff4)
  br label %dec_label_pc_ef94

dec_label_pc_f000:                                ; preds = %dec_label_pc_ef9c
  %v2_f000 = load i8, i8* bitcast (i8** @global_var_1db30.111 to i8*), align 4
  %v3_f000 = zext i8 %v2_f000 to i32
  %v1_f004 = load i32, i32* @r5, align 4
  %v9_f004 = icmp eq i32 %v3_f000, %v1_f004
  br i1 %v9_f004, label %dec_label_pc_efa8, label %bb21

bb21:                                             ; preds = %dec_label_pc_f000
  %v2_f00c = trunc i32 %v1_f004 to i8
  store i8 %v2_f00c, i8* bitcast (i8** @global_var_1db30.111 to i8*), align 4
  br label %dec_label_pc_efa8

; uselistorder directives
  uselistorder i32 %v3_eecc, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_e5b8, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_131b0, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1db30.111 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1db30.111, { 1, 0 }
  uselistorder label %dec_label_pc_efa8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ef94, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_f020(i32 %arg1) local_unnamed_addr {
dec_label_pc_f020:
  %stack_var_-16 = alloca i32, align 4
  %v3_f020 = load i32, i32* @r4, align 4
  %v6_f020 = load i32, i32* @r5, align 4
  %v2_f024 = ptrtoint i32* %stack_var_-16 to i32
  %v0_f028 = call i32 @function_12a0c()
  %v7_f02c = icmp eq i32 %v0_f028, -1
  %. = zext i1 %v7_f02c to i32
  %tmp10 = icmp slt i32 %v0_f028, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_f048 = icmp eq i32 %storemerge4, 0
  store i32 %v0_f028, i32* @global_var_1dca8.114, align 4
  br i1 %v2_f048, label %dec_label_pc_f05c, label %dec_label_pc_f054

dec_label_pc_f054:                                ; preds = %dec_label_pc_f020
  store i32 %v3_f020, i32* @r4, align 4
  store i32 %v6_f020, i32* @r5, align 4
  ret i32 %v0_f028

dec_label_pc_f05c:                                ; preds = %dec_label_pc_f020
  store i32 1, i32* %stack_var_-16, align 4
  %v1_f068 = call i32 @function_11598(i32 59)
  %v1_f070 = call i32 @function_11598(i32 60)
  %v0_f074 = load i32, i32* @r5, align 4
  %v2_f07c = inttoptr i32 %v0_f074 to i32*
  %v3_f07c = call i32 @function_114b4(i32 59, i32* %v2_f07c)
  %v2_f084 = inttoptr i32 %v3_f07c to i8*
  %v3_f084 = call i32 @function_12b0c(i8* %v2_f084, i32 2)
  %v7_f088 = icmp eq i32 %v3_f084, -1
  store i32 %v3_f084, i32* @r4, align 4
  br i1 %v7_f088, label %dec_label_pc_f0d0, label %dec_label_pc_f094

dec_label_pc_f094:                                ; preds = %dec_label_pc_f0d0, %dec_label_pc_f05c
  %v0_f0a0 = phi i32 [ %v3_f0e0, %dec_label_pc_f0d0 ], [ %v3_f084, %dec_label_pc_f05c ]
  %v3_f0a8 = call i32 @function_12a90(i32 %v0_f0a0, i32 -2147199228, i32 %v2_f024)
  br label %dec_label_pc_f0ac

dec_label_pc_f0ac:                                ; preds = %dec_label_pc_f0ac, %dec_label_pc_f094
  %v0_f0b8 = load i32, i32* @r4, align 4
  %v3_f0c0 = call i32 @function_12a90(i32 %v0_f0b8, i32 -2147199227, i32 0)
  %v1_f0c8 = call i32 @function_13c3c(i32 10)
  br label %dec_label_pc_f0ac

dec_label_pc_f0d0:                                ; preds = %dec_label_pc_f05c
  %v0_f0d0 = load i32, i32* @r5, align 4
  %v2_f0d8 = inttoptr i32 %v0_f0d0 to i32*
  %v3_f0d8 = call i32 @function_114b4(i32 60, i32* %v2_f0d8)
  %v2_f0e0 = inttoptr i32 %v3_f0d8 to i8*
  %v3_f0e0 = call i32 @function_12b0c(i8* %v2_f0e0, i32 2)
  %v3_f0e4 = icmp eq i32 %v3_f0e0, -1
  store i32 %v3_f0e0, i32* @r4, align 4
  br i1 %v3_f0e4, label %dec_label_pc_f0f0, label %dec_label_pc_f094

dec_label_pc_f0f0:                                ; preds = %dec_label_pc_f0d0
  %v1_f0f4 = call i32 @function_114e0(i32 59)
  %v1_f0fc = call i32 @function_114e0(i32 60)
  %v0_f100 = load i32, i32* @r5, align 4
  %v1_f104 = call i32 @function_13ba8(i32 %v0_f100)
  %v0_f108 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f108, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_f0f0
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_f0f0, %bb13
  ret i32 %v1_f104

; uselistorder directives
  uselistorder i32 %v3_f0e0, { 1, 2, 0 }
  uselistorder i32 %v3_f084, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_f028, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_12a90, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_f10c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f10c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f10c = load i32, i32* @r4, align 4
  store i32 %v3_f10c, i32* %stack_var_-36, align 4
  %v6_f10c = load i32, i32* @r5, align 4
  %v9_f10c = load i32, i32* @r6, align 4
  %v15_f10c = load i32, i32* @r8, align 4
  %v2_f118 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_f118, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_f118, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_f130 = call i32 @function_13328(i32 %v2_f118)
  store i32 %v2_f118, i32* @r0, align 4
  %v2_f13c = call i32 @function_132f8(i32 %v2_f118, i32 2)
  %v0_f140 = load i32, i32* @r5, align 4
  store i32 %v0_f140, i32* %r2.global-to-local, align 4
  %v3_f14c = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_f14c = call i32 @function_12c5c(i32 %v0_f140, %_TYPEDEF_sigset_t* %v3_f14c, i32 %v0_f140)
  %v2_f158 = call i32 @function_13340(i32 17, i32 1)
  %v2_f164 = call i32 @function_13340(i32 5, i32 ptrtoint (i32* @global_var_ee44.116 to i32))
  %v0_f168 = call i32 @function_12304()
  store i32 %v0_f168, i32* @global_var_1dd3c.81, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1dd47.106 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1dd44.104 to i8*), align 4
  store i32 1494907824, i32* @global_var_1dd48.105, align 4
  %v0_f190 = load i32, i32* @r5, align 4
  %v1_f190 = trunc i32 %v0_f190 to i8
  store i8 %v1_f190, i8* bitcast (i32* @global_var_1dd46.107 to i8*), align 4
  store i8 %v1_f190, i8* bitcast (i32* @global_var_1dd45.120 to i8*), align 4
  %v6_f198 = call i32 @function_11650(i32 %v0_f168, i32 ptrtoint (i8** @global_var_1dd44.104 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_ee5c.100 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ee5c.100 to i32), i32* @global_var_1db2c.102, align 4
  %v2_f1ac = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_f1ac, i32* @sb, align 4
  %v1_f1b0 = call i32 @function_eeb0(i32 %v6_f198)
  %v1_f1b4 = call i32 @function_f91c(i32 %v1_f1b0)
  %v2_f1c0 = call i32 @function_120ec(i32 %v2_f1ac, i32 32)
  %v0_f1c4 = load i32, i32* @r6, align 4
  %v7_f1c4 = icmp eq i32 %v0_f1c4, 2
  br i1 %v7_f1c4, label %dec_label_pc_f2f0, label %dec_label_pc_f1cc

dec_label_pc_f1cc:                                ; preds = %dec_label_pc_f2f0, %dec_label_pc_f10c, %dec_label_pc_f300
  %v0_f1cc = call i32 @function_f8c4()
  store i32 %v0_f1cc, i32* %r6.global-to-local, align 4
  %v0_f1d4 = load i32, i32* @r8, align 4
  %v1_f1d4 = inttoptr i32 %v0_f1d4 to i32*
  %v2_f1d4 = load i32, i32* %v1_f1d4, align 4
  %v1_f1d8 = inttoptr i32 %v2_f1d4 to i8*
  %v2_f1d8 = call i32 @function_1204c(i8* %v1_f1d8)
  %v0_f1e0 = load i32, i32* @r8, align 4
  %v1_f1e0 = inttoptr i32 %v0_f1e0 to i32*
  %v2_f1e0 = load i32, i32* %v1_f1e0, align 4
  %v1_f1e4 = inttoptr i32 %v2_f1e0 to i8*
  %v2_f1e4 = call i32 @function_1204c(i8* %v1_f1e4)
  %v1_f1e8 = sub i32 20, %v2_f1d8
  store i32 %v2_f1e4, i32* @r5, align 4
  %v0_f1f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_f1f4 = call i32 @function_12768(i32 %v0_f1f0, i32 %v1_f1e8)
  %v1_f1fc = load i32, i32* @r5, align 4
  %v2_f1fc = add i32 %v1_f1fc, %v2_f1f4
  store i32 %v2_f1fc, i32* @r4, align 4
  %v2_f200 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_f200, i32* @r6, align 4
  %v2_f20c = call i32 @function_f978(i32 %v2_f200, i32 %v2_f1fc)
  %v2_f210 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f210, i32* %r2.global-to-local, align 4
  %v1_f214 = load i32, i32* @r4, align 4
  %v2_f214 = add i32 %v1_f214, %v2_f210
  store i32 %v2_f214, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_f220 = load i32, i32* @r8, align 4
  %v1_f220 = inttoptr i32 %v0_f220 to i32*
  %v2_f220 = load i32, i32* %v1_f220, align 4
  store i32 %v2_f220, i32* @r0, align 4
  %v3_f224 = add i32 %v2_f214, -72
  %v4_f224 = inttoptr i32 %v3_f224 to i8*
  store i8 0, i8* %v4_f224, align 1
  %v2_f228 = inttoptr i32 %v2_f220 to i8*
  %v3_f228 = call i32 @function_12074(i8* %v2_f228, i32 %v2_f200)
  %v2_f234 = call i32 @function_120ec(i32 %v2_f200, i32 32)
  %v0_f238 = call i32 @function_f8c4()
  store i32 %v0_f238, i32* @r7, align 4
  %v0_f240 = load i32, i32* @r8, align 4
  %v1_f240 = inttoptr i32 %v0_f240 to i32*
  %v2_f240 = load i32, i32* %v1_f240, align 4
  %v1_f244 = inttoptr i32 %v2_f240 to i8*
  %v2_f244 = call i32 @function_1204c(i8* %v1_f244)
  %v0_f24c = load i32, i32* @r8, align 4
  %v1_f24c = inttoptr i32 %v0_f24c to i32*
  %v2_f24c = load i32, i32* %v1_f24c, align 4
  %v1_f250 = inttoptr i32 %v2_f24c to i8*
  %v2_f250 = call i32 @function_1204c(i8* %v1_f250)
  %v1_f254 = sub i32 20, %v2_f244
  store i32 %v2_f250, i32* @r5, align 4
  %v0_f25c = load i32, i32* @r7, align 4
  %v2_f260 = call i32 @function_12768(i32 %v0_f25c, i32 %v1_f254)
  %v1_f264 = load i32, i32* @r5, align 4
  %v2_f264 = add i32 %v1_f264, %v2_f260
  store i32 %v2_f264, i32* @r4, align 4
  %v2_f270 = call i32 @function_f978(i32 %v2_f200, i32 %v2_f264)
  %v1_f278 = load i32, i32* @r4, align 4
  %v2_f278 = add i32 %v1_f278, %v2_f210
  store i32 %v2_f278, i32* @r3, align 4
  %v0_f27c = load i32, i32* @sl, align 4
  %v1_f27c = trunc i32 %v0_f27c to i8
  %v3_f27c = add i32 %v2_f278, -72
  %v4_f27c = inttoptr i32 %v3_f27c to i8*
  store i8 %v1_f27c, i8* %v4_f27c, align 1
  %v2_f288 = call i32 @function_12b78(i32 15, i32 %v2_f200)
  %v1_f290 = call i32 @function_11598(i32 5)
  %v3_f2a0 = call i32 @function_114b4(i32 5, i32* nonnull %stack_var_-44)
  %v3_f2a4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f2a4, i32* %r2.global-to-local, align 4
  %v3_f2b0 = inttoptr i32 %v3_f2a0 to i32*
  %v4_f2b0 = call i32 @function_12cdc(i32 1, i32* %v3_f2b0, i32 %v3_f2a4)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f2c0 = call i32 @function_12cdc(i32 1, i32* nonnull @global_var_15124.124, i32 1)
  %v1_f2c8 = call i32 @function_114e0(i32 5)
  %v1_f2cc = call i32 @function_85e8(i32 %v1_f2c8)
  %v1_f2d0 = call i32 @function_eb38(i32 %v1_f2cc)
  %v1_f2d4 = call i32 @function_f020(i32 %v1_f2d0)
  %v0_f2d8 = call i32 @function_12a0c()
  %v1_f2dc = load i32, i32* @sl, align 4
  %v7_f2e0 = icmp sgt i32 %v0_f2d8, %v1_f2dc
  br i1 %v7_f2e0, label %dec_label_pc_f2e4, label %dec_label_pc_f328

dec_label_pc_f2e4:                                ; preds = %dec_label_pc_f1cc
  store i32 %v6_f10c, i32* %r5.global-to-local, align 4
  store i32 %v9_f10c, i32* %r6.global-to-local, align 4
  store i32 %v15_f10c, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_f2f0:                                ; preds = %dec_label_pc_f10c
  %v0_f2f0 = load i32, i32* @r8, align 4
  %v1_f2f0 = add i32 %v0_f2f0, 4
  %v2_f2f0 = inttoptr i32 %v1_f2f0 to i32*
  %v3_f2f0 = load i32, i32* %v2_f2f0, align 4
  %v1_f2f4 = inttoptr i32 %v3_f2f0 to i8*
  %v2_f2f4 = call i32 @function_1204c(i8* %v1_f2f4)
  %v8_f2fc = icmp sgt i32 %v2_f2f4, 31
  br i1 %v8_f2fc, label %dec_label_pc_f1cc, label %dec_label_pc_f300

dec_label_pc_f300:                                ; preds = %dec_label_pc_f2f0
  %v0_f300 = load i32, i32* @r8, align 4
  %v1_f300 = add i32 %v0_f300, 4
  %v2_f300 = inttoptr i32 %v1_f300 to i32*
  %v3_f300 = load i32, i32* %v2_f300, align 4
  store i32 %v2_f1ac, i32* @r0, align 4
  %v2_f308 = bitcast i32* %stack_var_-140 to i8*
  %v3_f308 = call i32 @function_12074(i8* %v2_f308, i32 %v3_f300)
  %v0_f30c = load i32, i32* @r8, align 4
  %v1_f30c = add i32 %v0_f30c, 4
  %v2_f30c = inttoptr i32 %v1_f30c to i32*
  %v3_f30c = load i32, i32* %v2_f30c, align 4
  %v1_f314 = inttoptr i32 %v3_f30c to i8*
  %v2_f314 = call i32 @function_1204c(i8* %v1_f314)
  %v2_f320 = call i32 @function_120ec(i32 %v3_f30c, i32 %v2_f314)
  br label %dec_label_pc_f1cc

dec_label_pc_f328:                                ; preds = %dec_label_pc_f1cc
  %v1_f328 = call i32 @function_12c30(i32 %v0_f2d8)
  %v0_f330 = load i32, i32* @sl, align 4
  %v1_f334 = call i32 @function_129e0(i32 %v0_f330)
  %v1_f33c = call i32 @function_129e0(i32 1)
  %v1_f344 = call i32 @function_129e0(i32 2)
  %v1_f348 = call i32 @function_85e8(i32 %v1_f344)
  %v1_f34c = call i32 @function_eb38(i32 %v1_f348)
  %v1_f350 = call i32 @function_f020(i32 %v1_f34c)
  %v1_f354 = call i32 @function_fce0(i32 %v1_f350)
  store i32 ptrtoint (i32* @global_var_1db28.126 to i32), i32* @fp, align 4
  %v2_f364 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_f364, i32* @r6, align 4
  %v2_f368 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_f368, i32* @r7, align 4
  %v2_f440 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f680 = ptrtoint i32* %stack_var_-52 to i32
  %v4_f694 = bitcast i8** %stack_var_-38 to i32*
  %v2_f7f0 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_f6a4 = ptrtoint i32* %stack_var_-48 to i32
  %v1_f748 = bitcast i32* %stack_var_-140 to i8*
  %v5_f710 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_f724 = sub i32 0, %v1_f328
  br label %dec_label_pc_f36c

dec_label_pc_f36c:                                ; preds = %dec_label_pc_f36c.backedge, %dec_label_pc_f328
  %v2_f37446 = phi i32 [ %v2_f37446.pre, %dec_label_pc_f36c.backedge ], [ %v2_f364, %dec_label_pc_f328 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_f37448 = inttoptr i32 %v2_f37446 to i32*
  store i32 0, i32* %v4_f37448, align 4
  %v0_f37849 = load i32, i32* %r3.global-to-local, align 4
  %v1_f37850 = add i32 %v0_f37849, 4
  store i32 %v1_f37850, i32* %r3.global-to-local, align 4
  %v7_f37c51 = icmp eq i32 %v1_f37850, 128
  br i1 %v7_f37c51, label %dec_label_pc_f384, label %dec_label_pc_f374.dec_label_pc_f374_crit_edge

dec_label_pc_f374.dec_label_pc_f374_crit_edge:    ; preds = %dec_label_pc_f36c, %dec_label_pc_f374.dec_label_pc_f374_crit_edge
  %v1_f37852 = phi i32 [ %v1_f378, %dec_label_pc_f374.dec_label_pc_f374_crit_edge ], [ %v1_f37850, %dec_label_pc_f36c ]
  %v0_f374.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_f374 = load i32, i32* @r6, align 4
  %v3_f374 = add i32 %v2_f374, %v1_f37852
  %v4_f374 = inttoptr i32 %v3_f374 to i32*
  store i32 %v0_f374.pre, i32* %v4_f374, align 4
  %v0_f378 = load i32, i32* %r3.global-to-local, align 4
  %v1_f378 = add i32 %v0_f378, 4
  store i32 %v1_f378, i32* %r3.global-to-local, align 4
  %v7_f37c = icmp eq i32 %v1_f378, 128
  br i1 %v7_f37c, label %dec_label_pc_f384, label %dec_label_pc_f374.dec_label_pc_f374_crit_edge

dec_label_pc_f384:                                ; preds = %dec_label_pc_f374.dec_label_pc_f374_crit_edge, %dec_label_pc_f36c
  %v0_f384 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f384, i32* %r3.global-to-local, align 4
  store i32 %v0_f384, i32* @r4, align 4
  %v2_f38c53 = load i32, i32* @r7, align 4
  %v3_f38c54 = add i32 %v2_f38c53, %v0_f384
  %v4_f38c55 = inttoptr i32 %v3_f38c54 to i32*
  store i32 %v0_f384, i32* %v4_f38c55, align 4
  %v0_f39056 = load i32, i32* %r3.global-to-local, align 4
  %v1_f39057 = add i32 %v0_f39056, 4
  store i32 %v1_f39057, i32* %r3.global-to-local, align 4
  %v7_f39458 = icmp eq i32 %v1_f39057, 128
  br i1 %v7_f39458, label %dec_label_pc_f39c, label %dec_label_pc_f38c.dec_label_pc_f38c_crit_edge

dec_label_pc_f38c.dec_label_pc_f38c_crit_edge:    ; preds = %dec_label_pc_f384, %dec_label_pc_f38c.dec_label_pc_f38c_crit_edge
  %v1_f39059 = phi i32 [ %v1_f390, %dec_label_pc_f38c.dec_label_pc_f38c_crit_edge ], [ %v1_f39057, %dec_label_pc_f384 ]
  %v0_f38c.pre = load i32, i32* @r4, align 4
  %v2_f38c = load i32, i32* @r7, align 4
  %v3_f38c = add i32 %v2_f38c, %v1_f39059
  %v4_f38c = inttoptr i32 %v3_f38c to i32*
  store i32 %v0_f38c.pre, i32* %v4_f38c, align 4
  %v0_f390 = load i32, i32* %r3.global-to-local, align 4
  %v1_f390 = add i32 %v0_f390, 4
  store i32 %v1_f390, i32* %r3.global-to-local, align 4
  %v7_f394 = icmp eq i32 %v1_f390, 128
  br i1 %v7_f394, label %dec_label_pc_f39c, label %dec_label_pc_f38c.dec_label_pc_f38c_crit_edge

dec_label_pc_f39c:                                ; preds = %dec_label_pc_f38c.dec_label_pc_f38c_crit_edge, %dec_label_pc_f384
  store i32 ptrtoint (i32* @global_var_1db24.109 to i32), i32* %r2.global-to-local, align 4
  %v2_f3a0 = load i32, i32* @global_var_1db24.109, align 4
  %v7_f3a4 = icmp eq i32 %v2_f3a0, -1
  br i1 %v7_f3a4, label %dec_label_pc_f3d0, label %dec_label_pc_f3ac

dec_label_pc_f3ac:                                ; preds = %dec_label_pc_f39c
  %v3_f3ac = udiv i32 %v2_f3a0, 32
  %v3_f3b0 = mul nuw nsw i32 %v3_f3ac, 4
  %v2_f3b8 = add i32 %v3_f3b0, %v2_f210
  store i32 %v2_f3b8, i32* %r3.global-to-local, align 4
  %v1_f3bc = add i32 %v2_f3b8, -360
  %v2_f3bc = inttoptr i32 %v1_f3bc to i32*
  %v3_f3bc = load i32, i32* %v2_f3bc, align 4
  %v1_f3c0 = urem i32 %v2_f3a0, 32
  %v7_f3c8 = shl i32 1, %v1_f3c0
  %v8_f3c8 = or i32 %v3_f3bc, %v7_f3c8
  store i32 %v8_f3c8, i32* %r2.global-to-local, align 4
  store i32 %v8_f3c8, i32* %v2_f3bc, align 4
  br label %dec_label_pc_f3d0

dec_label_pc_f3d0:                                ; preds = %dec_label_pc_f39c, %dec_label_pc_f3ac
  %v2_f3d0 = load i32, i32* @global_var_1db28.126, align 4
  store i32 %v2_f3d0, i32* %r3.global-to-local, align 4
  %v7_f3d4 = icmp eq i32 %v2_f3d0, -1
  store i32 ptrtoint (i32* @global_var_1db28.126 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_f3d4, label %dec_label_pc_f60c, label %dec_label_pc_f3e0

dec_label_pc_f3e0:                                ; preds = %dec_label_pc_f60c, %dec_label_pc_f3d0, %.thread
  store i32 ptrtoint (i8** @global_var_1dcac.129 to i32), i32* %r2.global-to-local, align 4
  %v2_f3e4 = load i8, i8* bitcast (i8** @global_var_1dcac.129 to i8*), align 4
  %v2_f3e8 = icmp eq i8 %v2_f3e4, 0
  %v2_f528 = load i32, i32* @global_var_1db28.126, align 4
  %v3_f52c = udiv i32 %v2_f528, 32
  store i32 %v3_f52c, i32* %r3.global-to-local, align 4
  br i1 %v2_f3e8, label %dec_label_pc_f528, label %dec_label_pc_f3f0

dec_label_pc_f3f0:                                ; preds = %dec_label_pc_f3e0
  %v3_f3f8 = mul nuw nsw i32 %v3_f52c, 4
  %v2_f400 = add i32 %v3_f3f8, %v2_f210
  store i32 %v2_f400, i32* %r3.global-to-local, align 4
  %v1_f404 = add i32 %v2_f400, -488
  %v2_f404 = inttoptr i32 %v1_f404 to i32*
  %v3_f404 = load i32, i32* %v2_f404, align 4
  %v1_f408 = urem i32 %v2_f528, 32
  %v7_f410 = shl i32 1, %v1_f408
  %v8_f410 = or i32 %v3_f404, %v7_f410
  store i32 %v8_f410, i32* %r2.global-to-local, align 4
  store i32 %v8_f410, i32* %v2_f404, align 4
  br label %dec_label_pc_f418

dec_label_pc_f418:                                ; preds = %dec_label_pc_f528, %dec_label_pc_f3f0
  %v2_f41c = load i32, i32* @global_var_1db24.109, align 4
  %v2_f420 = load i32, i32* @global_var_1db28.126, align 4
  store i32 %v2_f420, i32* %r3.global-to-local, align 4
  %v5_f42c = icmp slt i32 %v2_f41c, %v2_f420
  br i1 %v5_f42c, label %bb, label %bb43

bb:                                               ; preds = %dec_label_pc_f418
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_f418, %bb
  %v0_f444 = phi i32 [ %v2_f41c, %dec_label_pc_f418 ], [ %v2_f420, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f444 = add i32 %v0_f444, 1
  store i32 %v2_f368, i32* %r2.global-to-local, align 4
  %v5_f458 = call i32 @function_12c00(i32 %v1_f444, i32 %v2_f364, i32 %v2_f368, i32 0, i32 %v2_f440)
  %v7_f45c = icmp eq i32 %v5_f458, -1
  store i32 %v5_f458, i32* %r3.global-to-local, align 4
  br i1 %v7_f45c, label %dec_label_pc_f36c.backedge, label %dec_label_pc_f468

dec_label_pc_f468:                                ; preds = %bb43
  %v2_f468 = icmp eq i32 %v5_f458, 0
  br i1 %v2_f468, label %dec_label_pc_f470, label %dec_label_pc_f490

dec_label_pc_f470:                                ; preds = %dec_label_pc_f468
  %v0_f470 = load i32, i32* @sl, align 4
  store i8* null, i8** %stack_var_-38, align 4
  %v5_f480 = call i32 @function_12834(i32 %v0_f470, i32 6, i32 %v2_f368, i32 0)
  %v2_f484 = icmp eq i32 %v5_f480, 0
  %v0_f488 = load i32, i32* @sl, align 4
  %v1_f488 = add i32 %v0_f488, 1
  store i32 %v1_f488, i32* @sl, align 4
  br i1 %v2_f484, label %dec_label_pc_f67c, label %dec_label_pc_f490

dec_label_pc_f490:                                ; preds = %dec_label_pc_f468, %dec_label_pc_f470, %dec_label_pc_f67c
  store i32 ptrtoint (i32* @global_var_1db24.109 to i32), i32* %r2.global-to-local, align 4
  %v2_f494 = load i32, i32* @global_var_1db24.109, align 4
  %v7_f498 = icmp eq i32 %v2_f494, -1
  br i1 %v7_f498, label %dec_label_pc_f4c4, label %dec_label_pc_f4a0

dec_label_pc_f4a0:                                ; preds = %dec_label_pc_f490
  %v3_f4a0 = udiv i32 %v2_f494, 32
  %v3_f4a4 = mul nuw nsw i32 %v3_f4a0, 4
  store i32 %v2_f210, i32* @ip, align 4
  %v2_f4ac = add i32 %v3_f4a4, %v2_f210
  store i32 %v2_f4ac, i32* %r3.global-to-local, align 4
  %v1_f4b0 = add i32 %v2_f4ac, -360
  %v2_f4b0 = inttoptr i32 %v1_f4b0 to i32*
  %v3_f4b0 = load i32, i32* %v2_f4b0, align 4
  %v1_f4b4 = urem i32 %v2_f494, 32
  %v6_f4b8 = lshr i32 %v3_f4b0, %v1_f4b4
  store i32 %v6_f4b8, i32* %r2.global-to-local, align 4
  %v1_f4bc = urem i32 %v6_f4b8, 2
  %v2_f4bc = icmp eq i32 %v1_f4bc, 0
  br i1 %v2_f4bc, label %dec_label_pc_f4c4, label %dec_label_pc_f6f8

dec_label_pc_f4c4:                                ; preds = %dec_label_pc_f4a0, %dec_label_pc_f490
  store i32 ptrtoint (i8** @global_var_1dcac.129 to i32), i32* %r3.global-to-local, align 4
  %v2_f4c8 = load i8, i8* bitcast (i8** @global_var_1dcac.129 to i8*), align 4
  %v3_f4c8 = zext i8 %v2_f4c8 to i32
  store i32 %v3_f4c8, i32* @r4, align 4
  %v2_f4cc = icmp eq i8 %v2_f4c8, 0
  %v2_f554 = load i32, i32* @global_var_1db28.126, align 4
  br i1 %v2_f4cc, label %dec_label_pc_f554, label %dec_label_pc_f4d4

dec_label_pc_f4d4:                                ; preds = %dec_label_pc_f4c4
  %v3_f4d8 = udiv i32 %v2_f554, 32
  %v3_f4e0 = mul nuw nsw i32 %v3_f4d8, 4
  %v2_f4e4 = add i32 %v3_f4e0, %v2_f210
  store i32 %v2_f4e4, i32* %r3.global-to-local, align 4
  %v1_f4e8 = add i32 %v2_f4e4, -488
  %v2_f4e8 = inttoptr i32 %v1_f4e8 to i32*
  %v3_f4e8 = load i32, i32* %v2_f4e8, align 4
  %v1_f4ec = urem i32 %v2_f554, 32
  %v6_f4f0 = lshr i32 %v3_f4e8, %v1_f4ec
  store i32 %v6_f4f0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1dcac.129 to i32), i32* %r3.global-to-local, align 4
  %v1_f4fc = urem i32 %v6_f4f0, 2
  %v2_f4fc = icmp eq i32 %v1_f4fc, 0
  store i8 0, i8* bitcast (i8** @global_var_1dcac.129 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1db28.126 to i32), i32* @r5, align 4
  br i1 %v2_f4fc, label %dec_label_pc_f50c, label %dec_label_pc_f69c

dec_label_pc_f50c:                                ; preds = %dec_label_pc_f4d4
  store i32 62740, i32* @lr, align 4
  %v1_f510 = icmp ne i32 %v2_f554, -1
  call void @__pseudo_cond_branch(i1 %v1_f510, i32 ptrtoint (i32* @global_var_129e0.52 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f518 = load i32, i32* @r5, align 4
  %v2_f518 = inttoptr i32 %v1_f518 to i32*
  store i32 -1, i32* %v2_f518, align 4
  %v1_f520 = call i32 @function_13c3c(i32 1)
  br label %dec_label_pc_f36c.backedge

dec_label_pc_f36c.backedge:                       ; preds = %dec_label_pc_f50c, %dec_label_pc_f5f8, %dec_label_pc_f6d0, %dec_label_pc_f794, %dec_label_pc_f7b8, %dec_label_pc_f86c, %dec_label_pc_f878, %bb43, %dec_label_pc_f554, %dec_label_pc_f564, %dec_label_pc_f744, %bb45, %dec_label_pc_f818, %dec_label_pc_f7a8
  %v2_f37446.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f36c

dec_label_pc_f528:                                ; preds = %dec_label_pc_f3e0
  store i32 %v2_f210, i32* %r2.global-to-local, align 4
  %v3_f534 = mul nuw nsw i32 %v3_f52c, 4
  %v2_f538 = add i32 %v3_f534, %v2_f210
  store i32 %v2_f538, i32* %r3.global-to-local, align 4
  %v1_f53c = add i32 %v2_f538, -360
  %v2_f53c = inttoptr i32 %v1_f53c to i32*
  %v3_f53c = load i32, i32* %v2_f53c, align 4
  %v1_f540 = urem i32 %v2_f528, 32
  %v7_f548 = shl i32 1, %v1_f540
  %v8_f548 = or i32 %v3_f53c, %v7_f548
  store i32 %v8_f548, i32* %r2.global-to-local, align 4
  store i32 %v8_f548, i32* %v2_f53c, align 4
  br label %dec_label_pc_f418

dec_label_pc_f554:                                ; preds = %dec_label_pc_f4c4
  %v7_f558 = icmp eq i32 %v2_f554, -1
  store i32 ptrtoint (i32* @global_var_1db28.126 to i32), i32* @r5, align 4
  br i1 %v7_f558, label %dec_label_pc_f36c.backedge, label %dec_label_pc_f564

dec_label_pc_f564:                                ; preds = %dec_label_pc_f554
  %v3_f564 = udiv i32 %v2_f554, 32
  %v3_f568 = mul nuw nsw i32 %v3_f564, 4
  %v2_f570 = add i32 %v3_f568, %v2_f210
  store i32 %v2_f570, i32* %r3.global-to-local, align 4
  %v1_f574 = add i32 %v2_f570, -360
  %v2_f574 = inttoptr i32 %v1_f574 to i32*
  %v3_f574 = load i32, i32* %v2_f574, align 4
  %v1_f578 = urem i32 %v2_f554, 32
  %v6_f57c = lshr i32 %v3_f574, %v1_f578
  store i32 %v6_f57c, i32* %r2.global-to-local, align 4
  %v1_f580 = urem i32 %v6_f57c, 2
  %v2_f580 = icmp eq i32 %v1_f580, 0
  br i1 %v2_f580, label %dec_label_pc_f36c.backedge, label %dec_label_pc_f588

dec_label_pc_f588:                                ; preds = %dec_label_pc_f564
  %v6_f588 = inttoptr i32 %v3_f4c8 to i8*
  store i8* %v6_f588, i8** %stack_var_-38, align 4
  %v0_f590 = call i32 @function_12f88()
  %v0_f594 = load i32, i32* @r4, align 4
  %v2_f594 = inttoptr i32 %v0_f590 to i32*
  store i32 %v0_f594, i32* %v2_f594, align 4
  store i32 %v0_f590, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f5a8 = load i32, i32* @global_var_1db28.126, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_f5b4 = call i32 @function_131dc(i32 %v2_f5a8, i32* %v4_f694, i32 2, i32 16386)
  %v7_f5b8 = icmp eq i32 %v5_f5b4, -1
  br i1 %v7_f5b8, label %dec_label_pc_f7a8, label %dec_label_pc_f5c0

dec_label_pc_f5c0:                                ; preds = %dec_label_pc_f588
  %v2_f5c0 = icmp eq i32 %v5_f5b4, 0
  br i1 %v2_f5c0, label %dec_label_pc_f7b8, label %dec_label_pc_f5c8

dec_label_pc_f5c8:                                ; preds = %dec_label_pc_f5c0
  %v3_f5c8 = load i8*, i8** %stack_var_-38, align 4
  %v4_f5c8 = ptrtoint i8* %v3_f5c8 to i32
  store i32 %v3_f4c8, i32* %r3.global-to-local, align 4
  %v4_f5d0 = mul nuw nsw i32 %v3_f4c8, 256
  %v5_f5d0 = or i32 %v4_f5c8, %v4_f5d0
  store i32 %v5_f5d0, i32* %r2.global-to-local, align 4
  %v7_f5d0 = icmp eq i32 %v5_f5d0, 0
  br i1 %v7_f5d0, label %dec_label_pc_f878, label %dec_label_pc_f5d8

dec_label_pc_f5d8:                                ; preds = %dec_label_pc_f5c8
  %v1_f5d8 = mul i32 %v4_f5c8, 256
  %v3_f5dc = and i32 %v1_f5d8, 65280
  %v4_f5e0 = udiv i32 %v5_f5d0, 256
  %v5_f5e0 = or i32 %v3_f5dc, %v4_f5e0
  %v6_f5e0 = trunc i32 %v4_f5e0 to i8
  store i32 %v5_f5e0, i32* %r2.global-to-local, align 4
  %v4_f5e4 = udiv i32 %v5_f5d0, 65536
  store i32 %v4_f5e4, i32* %r3.global-to-local, align 4
  %v3_f5e8 = icmp slt i8 %v6_f5e0, 0
  %v7_f5f0 = inttoptr i32 %v4_f5e0 to i8*
  store i8* %v7_f5f0, i8** %stack_var_-38, align 4
  br i1 %v3_f5e8, label %dec_label_pc_f5f8, label %dec_label_pc_f7e8

dec_label_pc_f5f8:                                ; preds = %dec_label_pc_f5d8
  %v2_f5f8 = load i32, i32* @global_var_1db28.126, align 4
  %v1_f5fc = call i32 @function_129e0(i32 %v2_f5f8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f604 = load i32, i32* @r5, align 4
  %v2_f604 = inttoptr i32 %v1_f604 to i32*
  store i32 -1, i32* %v2_f604, align 4
  br label %dec_label_pc_f36c.backedge

dec_label_pc_f60c:                                ; preds = %dec_label_pc_f3d0
  %v0_f614 = load i32, i32* @r4, align 4
  store i32 %v0_f614, i32* %r2.global-to-local, align 4
  %v3_f618 = call i32 @function_132cc(i32 2, i32 1, i32 %v0_f614)
  %v7_f61c = icmp eq i32 %v3_f618, -1
  store i32 %v3_f618, i32* %r5.global-to-local, align 4
  %v1_f624 = load i32, i32* %r8.global-to-local, align 4
  %v2_f624 = inttoptr i32 %v1_f624 to i32*
  store i32 %v3_f618, i32* %v2_f624, align 4
  br i1 %v7_f61c, label %dec_label_pc_f3e0, label %dec_label_pc_f62c

dec_label_pc_f62c:                                ; preds = %dec_label_pc_f60c
  %v0_f62c = load i32, i32* @r4, align 4
  store i32 %v0_f62c, i32* @r2, align 4
  %v2_f634 = call i32 @function_1291c(i32 %v3_f618, i32 3)
  %v1_f63c = or i32 %v2_f634, 2048
  store i32 %v1_f63c, i32* @r2, align 4
  %v0_f640 = load i32, i32* %r5.global-to-local, align 4
  %v2_f644 = call i32 @function_1291c(i32 %v0_f640, i32 4)
  store i32 ptrtoint (i32* @global_var_1db2c.102 to i32), i32* %r2.global-to-local, align 4
  %v2_f64c = load i32, i32* @global_var_1db2c.102, align 4
  store i32 %v2_f64c, i32* %r3.global-to-local, align 4
  %v2_f650 = icmp eq i32 %v2_f64c, 0
  br i1 %v2_f650, label %.thread, label %bb44

bb44:                                             ; preds = %dec_label_pc_f62c
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_12304.130 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f62c, %bb44
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f664 = load i32, i32* @global_var_1db28.126, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1dcac.129 to i8*), align 4
  %v5_f674 = call i32 @function_13128(i32 %v2_f664, %sockaddr* bitcast (i8** @global_var_1dd44.104 to %sockaddr*), i32 16)
  br label %dec_label_pc_f3e0

dec_label_pc_f67c:                                ; preds = %dec_label_pc_f470
  %v2_f684 = load i32, i32* @global_var_1db28.126, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f694 = call i32 @function_1323c(i32 %v2_f684, i32* nonnull %v4_f694, i32 2, i32 16384)
  br label %dec_label_pc_f490

dec_label_pc_f69c:                                ; preds = %dec_label_pc_f4d4
  store i32 4, i32* @r4, align 4
  store i32 %v2_f6a4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_f6c0 = call i32 @function_13180(i32 %v2_f554, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_f680)
  %v3_f6c4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f6c4, i32* %r3.global-to-local, align 4
  %v2_f6c8 = icmp eq i32 %v3_f6c4, 0
  br i1 %v2_f6c8, label %dec_label_pc_f744, label %dec_label_pc_f6d0

dec_label_pc_f6d0:                                ; preds = %dec_label_pc_f69c
  %v2_f6d0 = load i32, i32* @global_var_1db28.126, align 4
  %v1_f6d4 = call i32 @function_129e0(i32 %v2_f6d0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f6dc = load i32, i32* @r5, align 4
  %v2_f6dc = inttoptr i32 %v1_f6dc to i32*
  store i32 -1, i32* %v2_f6dc, align 4
  %v0_f6e0 = call i32 @function_f8c4()
  %v2_f6e8 = call i32 @function_12768(i32 %v0_f6e0, i32 10)
  %v1_f6ec = add i32 %v2_f6e8, 1
  %v1_f6f0 = call i32 @function_13c3c(i32 %v1_f6ec)
  br label %dec_label_pc_f36c.backedge

dec_label_pc_f6f8:                                ; preds = %dec_label_pc_f4a0
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_f6a4, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_f710 = call i32 @function_130d0(i32 %v2_f494, %sockaddr* %v5_f710, i32 %v2_f6a4, i32 16, i32 16)
  %v1_f714 = call i32 @function_fa44(i32 %v6_f710)
  %v1_f718 = call i32 @function_e5a4(i32 %v1_f714)
  store i32 %v1_f328, i32* %r2.global-to-local, align 4
  %v2_f728 = call i32 @function_12ae0(i32 %v1_f724, i32 9)
  store i32 ptrtoint (i32* @global_var_1dca8.114 to i32), i32* %r3.global-to-local, align 4
  %v2_f730 = load i32, i32* @global_var_1dca8.114, align 4
  %v2_f734 = icmp eq i32 %v2_f730, 0
  br i1 %v2_f734, label %dec_label_pc_f73c, label %dec_label_pc_f7dc

dec_label_pc_f73c:                                ; preds = %dec_label_pc_f6f8, %dec_label_pc_f7dc
  %v1_f740 = call i32 @function_13ba8(i32 0)
  br label %dec_label_pc_f744

dec_label_pc_f744:                                ; preds = %dec_label_pc_f69c, %dec_label_pc_f73c
  %v2_f748 = call i32 @function_1204c(i8* %v1_f748)
  %sext = mul i32 %v2_f748, 16777216
  %v1_f74c = sdiv i32 %sext, 16777216
  %v7_f74c = inttoptr i32 %v1_f74c to i8*
  store i8* %v7_f74c, i8** %stack_var_-38, align 4
  %v0_f750 = call i32 @function_12304()
  store i32 %v0_f750, i32* @global_var_1dd3c.81, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f764 = load i32, i32* @r4, align 4
  store i32 %v0_f764, i32* %r2.global-to-local, align 4
  %v0_f768 = load i32, i32* @r5, align 4
  %v1_f768 = inttoptr i32 %v0_f768 to i32*
  %v2_f768 = load i32, i32* %v1_f768, align 4
  %v5_f76c = call i32 @function_1323c(i32 %v2_f768, i32* nonnull @global_var_15128.133, i32 %v0_f764, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_f778 = load i32, i32* @r5, align 4
  %v1_f778 = inttoptr i32 %v0_f778 to i32*
  %v2_f778 = load i32, i32* %v1_f778, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f784 = call i32 @function_1323c(i32 %v2_f778, i32* %v4_f694, i32 1, i32 16384)
  %v3_f788 = load i8*, i8** %stack_var_-38, align 4
  %v4_f788 = ptrtoint i8* %v3_f788 to i32
  store i32 %v4_f788, i32* %r2.global-to-local, align 4
  %v3_f78c = icmp eq i8* %v3_f788, null
  br i1 %v3_f78c, label %dec_label_pc_f36c.backedge, label %dec_label_pc_f794

dec_label_pc_f794:                                ; preds = %dec_label_pc_f744
  %v0_f794 = load i32, i32* @r5, align 4
  %v1_f794 = inttoptr i32 %v0_f794 to i32*
  %v2_f794 = load i32, i32* %v1_f794, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_f7a0 = call i32 @function_1323c(i32 %v2_f794, i32* nonnull %stack_var_-140, i32 %v4_f788, i32 16384)
  br label %dec_label_pc_f36c.backedge

dec_label_pc_f7a8:                                ; preds = %dec_label_pc_f7e8, %dec_label_pc_f588
  %v0_f7a8 = load i32, i32* @r8, align 4
  %v1_f7a8 = inttoptr i32 %v0_f7a8 to i32*
  %v2_f7a8 = load i32, i32* %v1_f7a8, align 4
  store i32 %v2_f7a8, i32* %r3.global-to-local, align 4
  %v7_f7ac = icmp eq i32 %v2_f7a8, 4
  br i1 %v7_f7ac, label %dec_label_pc_f36c.backedge, label %bb45

bb45:                                             ; preds = %dec_label_pc_f7a8
  %v8_f7b0 = icmp eq i32 %v2_f7a8, 11
  br i1 %v8_f7b0, label %dec_label_pc_f36c.backedge, label %dec_label_pc_f7b8

dec_label_pc_f7b8:                                ; preds = %dec_label_pc_f810, %bb45, %dec_label_pc_f5c0
  %v2_f7b8 = load i32, i32* @global_var_1db28.126, align 4
  store i32 63428, i32* @lr, align 4
  %v1_f7c0 = icmp ne i32 %v2_f7b8, -1
  call void @__pseudo_cond_branch(i1 %v1_f7c0, i32 ptrtoint (i32* @global_var_129e0.52 to i32))
  store i32 ptrtoint (i32* @global_var_1db28.126 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1db28.126, align 4
  %v1_f7d4 = call i32 @function_13c3c(i32 1)
  br label %dec_label_pc_f36c.backedge

dec_label_pc_f7dc:                                ; preds = %dec_label_pc_f6f8
  %v2_f7e0 = call i32 @function_12ae0(i32 %v2_f730, i32 9)
  br label %dec_label_pc_f73c

dec_label_pc_f7e8:                                ; preds = %dec_label_pc_f5d8
  %v0_f7e8 = load i32, i32* @r4, align 4
  %v1_f7e8 = load i32, i32* @r8, align 4
  %v2_f7e8 = inttoptr i32 %v1_f7e8 to i32*
  store i32 %v0_f7e8, i32* %v2_f7e8, align 4
  store i32 %v2_f7f0, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f7fc = load i32, i32* @global_var_1db28.126, align 4
  %v9_f804 = call i32 @function_131dc(i32 %v2_f7fc, i32* nonnull %stack_var_-1548, i32 %v4_f5e0, i32 16386)
  %v7_f808 = icmp eq i32 %v9_f804, -1
  br i1 %v7_f808, label %dec_label_pc_f7a8, label %dec_label_pc_f810

dec_label_pc_f810:                                ; preds = %dec_label_pc_f7e8
  %v2_f810 = icmp eq i32 %v9_f804, 0
  br i1 %v2_f810, label %dec_label_pc_f7b8, label %dec_label_pc_f818

dec_label_pc_f818:                                ; preds = %dec_label_pc_f810
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f828 = load i32, i32* @global_var_1db28.126, align 4
  %v5_f82c = call i32 @function_131dc(i32 %v2_f828, i32* nonnull %v4_f694, i32 2, i32 16384)
  %v3_f830 = load i8*, i8** %stack_var_-38, align 4
  %v4_f830 = ptrtoint i8* %v3_f830 to i32
  %v4_f834 = urem i32 %v4_f5e4, 256
  %v4_f838 = mul i32 %v4_f830, 256
  %v5_f838 = or i32 %v4_f838, %v4_f834
  store i32 %v5_f838, i32* @ip, align 4
  store i32 %v5_f838, i32* %r2.global-to-local, align 4
  %v3_f840 = sdiv i32 %v4_f838, 256
  store i32 %v3_f840, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f84c = load i32, i32* @global_var_1db28.126, align 4
  %v6_f854 = inttoptr i32 %v5_f838 to i8*
  store i8* %v6_f854, i8** %stack_var_-38, align 4
  %v8_f858 = call i32 @function_131dc(i32 %v2_f84c, i32* nonnull %stack_var_-1548, i32 %v5_f838, i32 16384)
  %v3_f85c = load i8*, i8** %stack_var_-38, align 4
  %v4_f85c = ptrtoint i8* %v3_f85c to i32
  store i32 %v4_f85c, i32* %r2.global-to-local, align 4
  %v4_f860 = urem i32 %v3_f840, 256
  store i32 %v4_f860, i32* %r3.global-to-local, align 4
  %v6_f864 = mul nuw nsw i32 %v4_f860, 256
  %v7_f864 = or i32 %v4_f85c, %v6_f864
  %v9_f864 = icmp eq i32 %v7_f864, 0
  br i1 %v9_f864, label %dec_label_pc_f36c.backedge, label %dec_label_pc_f86c

dec_label_pc_f86c:                                ; preds = %dec_label_pc_f818
  %v7_f870 = call i32 @function_830c(i32* nonnull %stack_var_-1548, i32 %v7_f864, i32 %v4_f85c, i32 %v4_f860)
  br label %dec_label_pc_f36c.backedge

dec_label_pc_f878:                                ; preds = %dec_label_pc_f5c8
  %v2_f87c = load i32, i32* @global_var_1db28.126, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f88c = call i32 @function_131dc(i32 %v2_f87c, i32* nonnull %v4_f694, i32 2, i32 16384)
  br label %dec_label_pc_f36c.backedge

; uselistorder directives
  uselistorder i32 %v4_f860, { 2, 0, 1 }
  uselistorder i32 %v4_f85c, { 1, 0, 2 }
  uselistorder i32 %v3_f840, { 1, 0 }
  uselistorder i32 %v5_f838, { 1, 0, 2, 3 }
  uselistorder i32 %v4_f838, { 1, 0 }
  uselistorder i32 %v9_f804, { 1, 0 }
  uselistorder i32 %v3_f618, { 3, 2, 1, 0 }
  uselistorder i32 %v4_f5e0, { 2, 3, 0, 1 }
  uselistorder i32 %v5_f5b4, { 1, 0 }
  uselistorder i32 %v2_f554, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_f494, { 3, 2, 1, 0 }
  uselistorder i32 %v5_f458, { 2, 1, 0 }
  uselistorder i32 %v2_f3a0, { 2, 1, 0 }
  uselistorder i32 %v1_f390, { 1, 2, 0 }
  uselistorder i32 %v1_f378, { 1, 2, 0 }
  uselistorder i32 %v2_f6a4, { 1, 0, 2 }
  uselistorder i32* %v4_f694, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_f368, { 0, 2, 1, 3 }
  uselistorder i32 %v2_f364, { 1, 0, 2 }
  uselistorder i32 %v2_f210, { 0, 1, 9, 2, 3, 8, 4, 5, 6, 7, 10 }
  uselistorder i32 %v2_f200, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_f118, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 47, 48, 40, 41, 37, 45, 46, 38, 39, 42, 43, 44 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @global_var_1dca8.114, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 (i32)* @function_13c3c, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* null, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1dcac.129 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1dcac.129, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1dcac.129 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1db24.109, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1db28.126, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i32)* @function_f020, { 1, 0 }
  uselistorder i32 (i32)* @function_eb38, { 1, 0 }
  uselistorder i32 (i32)* @function_85e8, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_12074, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 55, 56, 57, 58, 59, 60, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder i32 (i32, i32)* @function_f978, { 10, 9, 8, 7, 6, 5, 4, 0, 3, 2, 1 }
  uselistorder i32 (i32)* @function_eeb0, { 1, 0 }
  uselistorder i32* @global_var_1db2c.102, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_ee5c.100 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_13340, { 1, 0 }
  uselistorder label %dec_label_pc_f744, { 1, 0 }
  uselistorder label %dec_label_pc_f73c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f36c.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_f490, { 2, 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_f3e0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f3d0, { 1, 0 }
  uselistorder label %dec_label_pc_f38c.dec_label_pc_f38c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f374.dec_label_pc_f374_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f1cc, { 2, 0, 1 }
}

define i32 @function_f8c4() local_unnamed_addr {
dec_label_pc_f8c4:
  %v2_f8d0 = load i32, i32* @global_var_1dcb0.135, align 4
  %v2_f8d4 = load i32, i32* @global_var_1dcbc.137, align 4
  store i32 ptrtoint (i32* @global_var_1dcb4.139 to i32), i32* @lr, align 4
  %v4_f8e0 = mul i32 %v2_f8d0, 2048
  %v5_f8e0 = xor i32 %v4_f8e0, %v2_f8d0
  %v4_f8e4 = udiv i32 %v2_f8d4, 524288
  %v5_f8e4 = xor i32 %v4_f8e4, %v2_f8d4
  %v2_f8e8 = load i32, i32* @global_var_1dcb4.139, align 4
  %v2_f8ec = load i32, i32* @global_var_1dcb8.141, align 4
  %v2_f8f0 = xor i32 %v5_f8e4, %v5_f8e0
  %v4_f8f4 = udiv i32 %v5_f8e0, 256
  %v5_f8f4 = xor i32 %v2_f8f0, %v4_f8f4
  store i32 %v2_f8e8, i32* @global_var_1dcb0.135, align 4
  store i32 %v2_f8ec, i32* @global_var_1dcb4.139, align 4
  store i32 %v2_f8d4, i32* @global_var_1dcb8.141, align 4
  store i32 %v5_f8f4, i32* @global_var_1dcbc.137, align 4
  ret i32 %v5_f8f4

; uselistorder directives
  uselistorder i32 %v2_f8d4, { 2, 1, 0 }
  uselistorder i32 %v2_f8d0, { 1, 0 }
}

define i32 @function_f91c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f91c:
  %stack_var_-12 = alloca i32, align 4
  %v3_f91c = load i32, i32* @r4, align 4
  store i32 %v3_f91c, i32* %stack_var_-12, align 4
  %v2_f924 = call i32 @function_12cb0(i32* null)
  store i32 %v2_f924, i32* @global_var_1dcb0.135, align 4
  %v0_f930 = call i32 @function_12a38()
  store i32 %v0_f930, i32* @r4, align 4
  %v0_f938 = call i32 @function_12a64()
  %v0_f940 = load i32, i32* @r4, align 4
  %v2_f940 = xor i32 %v0_f940, %v0_f938
  store i32 %v2_f940, i32* @r4, align 4
  store i32 %v2_f940, i32* @global_var_1dcb4.139, align 4
  %v1_f948 = call i32 @function_12f94(i32 %v0_f938)
  %v2_f94c = load i32, i32* @global_var_1dcb4.139, align 4
  %v2_f958 = xor i32 %v2_f94c, %v1_f948
  store i32 %v2_f958, i32* @global_var_1dcbc.137, align 4
  store i32 %v1_f948, i32* @global_var_1dcb8.141, align 4
  %v2_f964 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f964, i32* @r4, align 4
  ret i32 %v1_f948

; uselistorder directives
  uselistorder i32 %v1_f948, { 1, 2, 0 }
  uselistorder i32 %v0_f938, { 1, 0 }
}

define i32 @function_f978(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f978:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f978 = load i32, i32* @r4, align 4
  store i32 %v3_f978, i32* %stack_var_-36, align 4
  %v6_f978 = load i32, i32* @r5, align 4
  %v9_f978 = load i32, i32* @r6, align 4
  %v12_f978 = load i32, i32* @r7, align 4
  %v28_f978 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_f980 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_f98c = call i32 @function_11598(i32 61)
  %v3_f998 = call i32 @function_114b4(i32 61, i32* null)
  %v2_f9a4 = inttoptr i32 %v3_f998 to i8*
  %v3_f9a4 = call i32 @function_13090(i32 %v2_f980, i8* %v2_f9a4)
  %v2_f9a8 = icmp eq i32 %arg2, 0
  br i1 %v2_f9a8, label %dec_label_pc_fa24, label %dec_label_pc_f9b0

dec_label_pc_f9b0:                                ; preds = %dec_label_pc_f978
  store i32 ptrtoint (i32* @global_var_1dcb0.135 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dcb4.139 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dcb8.141 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1dcbc.137 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_f9f8 = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_f9c4

dec_label_pc_f9c4:                                ; preds = %dec_label_pc_f9c4.dec_label_pc_f9c4_crit_edge, %dec_label_pc_f9b0
  %v1_f9e8 = phi i32 [ %v1_f9e8.pre, %dec_label_pc_f9c4.dec_label_pc_f9c4_crit_edge ], [ ptrtoint (i32* @global_var_1dcb0.135 to i32), %dec_label_pc_f9b0 ]
  %v2_f9c4 = load i32, i32* @global_var_1dcbc.137, align 4
  store i32 %v2_f9c4, i32* %r2.global-to-local, align 4
  %v2_f9c8 = load i32, i32* @global_var_1dcb0.135, align 4
  %v4_f9cc = udiv i32 %v2_f9c4, 524288
  %v5_f9cc = xor i32 %v4_f9cc, %v2_f9c4
  %v4_f9d0 = mul i32 %v2_f9c8, 2048
  %v5_f9d0 = xor i32 %v4_f9d0, %v2_f9c8
  %v2_f9d4 = xor i32 %v5_f9cc, %v5_f9d0
  %v2_f9d8 = load i32, i32* @global_var_1dcb4.139, align 4
  %v2_f9dc = load i32, i32* @global_var_1dcb8.141, align 4
  store i32 %v2_f9dc, i32* %ip.global-to-local, align 4
  %v4_f9e0 = udiv i32 %v5_f9d0, 256
  %v5_f9e0 = xor i32 %v2_f9d4, %v4_f9e0
  store i32 %v5_f9e0, i32* @r4, align 4
  %v2_f9e8 = inttoptr i32 %v1_f9e8 to i32*
  store i32 %v2_f9d8, i32* %v2_f9e8, align 4
  %v0_f9ec = load i32, i32* %ip.global-to-local, align 4
  %v1_f9ec = load i32, i32* %r8.global-to-local, align 4
  %v2_f9ec = inttoptr i32 %v1_f9ec to i32*
  store i32 %v0_f9ec, i32* %v2_f9ec, align 4
  %v0_f9f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_f9f0 = load i32, i32* @r7, align 4
  %v2_f9f0 = inttoptr i32 %v1_f9f0 to i32*
  store i32 %v0_f9f0, i32* %v2_f9f0, align 4
  %v0_f9f4 = load i32, i32* @r4, align 4
  %v1_f9f4 = load i32, i32* @r6, align 4
  %v2_f9f4 = inttoptr i32 %v1_f9f4 to i32*
  store i32 %v0_f9f4, i32* %v2_f9f4, align 4
  %v2_f9f8 = call i32 @function_1204c(i8* %v1_f9f8)
  %v0_fa00 = load i32, i32* @r4, align 4
  %v2_fa04 = call i32 @function_12768(i32 %v0_fa00, i32 %v2_f9f8)
  %v2_fa0c = add i32 %v2_fa04, %v28_f978
  %v1_fa10 = add i32 %v2_fa0c, -32
  %v2_fa10 = inttoptr i32 %v1_fa10 to i8*
  %v3_fa10 = load i8, i8* %v2_fa10, align 1
  %v2_fa14 = load i32, i32* @r5, align 4
  %v3_fa14 = load i32, i32* %fp.global-to-local, align 4
  %v4_fa14 = add i32 %v3_fa14, %v2_fa14
  %v5_fa14 = inttoptr i32 %v4_fa14 to i8*
  store i8 %v3_fa10, i8* %v5_fa14, align 1
  %v0_fa18 = load i32, i32* @r5, align 4
  %v1_fa18 = add i32 %v0_fa18, 1
  store i32 %v1_fa18, i32* @r5, align 4
  %v1_fa1c = load i32, i32* %sb.global-to-local, align 4
  %v9_fa1c = icmp eq i32 %v1_fa18, %v1_fa1c
  br i1 %v9_fa1c, label %dec_label_pc_fa24, label %dec_label_pc_f9c4.dec_label_pc_f9c4_crit_edge

dec_label_pc_f9c4.dec_label_pc_f9c4_crit_edge:    ; preds = %dec_label_pc_f9c4
  %v1_f9e8.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f9c4

dec_label_pc_fa24:                                ; preds = %dec_label_pc_f9c4, %dec_label_pc_f978
  %v1_fa28 = call i32 @function_114e0(i32 61)
  %v2_fa30 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_fa30, i32* @r4, align 4
  store i32 %v6_f978, i32* @r5, align 4
  store i32 %v9_f978, i32* @r6, align 4
  store i32 %v12_f978, i32* @r7, align 4
  ret i32 %v1_fa28

; uselistorder directives
  uselistorder i32 %v2_f9c8, { 1, 0 }
  uselistorder i32 %v2_f9c4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* @global_var_1dcbc.137, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1dcb8.141, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1dcb4.139, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32* @global_var_1dcb0.135, { 2, 4, 1, 0, 3 }
}

define i32 @function_fa44(i32 %arg1) local_unnamed_addr {
dec_label_pc_fa44:
  %v2_fa48 = load i32, i32* @global_var_1dd5c.151, align 4
  %v2_fa50 = call i32 @function_12ae0(i32 %v2_fa48, i32 9)
  %v0_fa54 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_fa54, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_fa44
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_fa44, %bb
  ret i32 %v2_fa50

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_fa58() local_unnamed_addr {
dec_label_pc_fa58:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fa58 = load i32, i32* @r4, align 4
  store i32 %v3_fa58, i32* %stack_var_-16, align 4
  %v0_fa5c = load i32, i32* @r0, align 4
  store i32 %v0_fa5c, i32* %r5.global-to-local, align 4
  %v1_fa60 = add i32 %v0_fa5c, 4
  %v2_fa60 = inttoptr i32 %v1_fa60 to i32*
  %v3_fa60 = load i32, i32* %v2_fa60, align 4
  store i32 %v3_fa60, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 64132, i32* @lr, align 4
  %v1_fa80 = icmp ne i32 %v3_fa60, -1
  call void @__pseudo_cond_branch(i1 %v1_fa80, i32 ptrtoint (i32* @global_var_129e0.52 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_fa90 = call i32 @function_132cc(i32 2, i32 1, i32 0)
  store i32 %v3_fa90, i32* %r3.global-to-local, align 4
  %v7_fa98 = icmp eq i32 %v3_fa90, -1
  %v0_faa0 = load i32, i32* %r5.global-to-local, align 4
  %v1_faa0 = add i32 %v0_faa0, 28
  store i32 %v1_faa0, i32* %r0.global-to-local, align 4
  %v2_faa4 = add i32 %v0_faa0, 4
  %v3_faa4 = inttoptr i32 %v2_faa4 to i32*
  store i32 %v3_fa90, i32* %v3_faa4, align 4
  br i1 %v7_fa98, label %dec_label_pc_fa58.dec_label_pc_fb20_crit_edge, label %dec_label_pc_faac

dec_label_pc_fa58.dec_label_pc_fb20_crit_edge:    ; preds = %dec_label_pc_fa58
  %v14_fb24.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb20

dec_label_pc_faac:                                ; preds = %dec_label_pc_fa58
  %v0_faac = load i32, i32* %r6.global-to-local, align 4
  %v1_faac = load i32, i32* %r5.global-to-local, align 4
  %v2_faac = add i32 %v1_faac, 24
  %v3_faac = inttoptr i32 %v2_faac to i32*
  store i32 %v0_faac, i32* %v3_faac, align 4
  %v0_fab0 = load i32, i32* %r0.global-to-local, align 4
  %v2_fab0 = call i32 @function_120ec(i32 %v0_fab0, i32 256)
  store i32 %v2_fab0, i32* %r0.global-to-local, align 4
  %v0_fab4 = load i32, i32* %r5.global-to-local, align 4
  %v1_fab4 = add i32 %v0_fab4, 4
  %v2_fab4 = inttoptr i32 %v1_fab4 to i32*
  %v3_fab4 = load i32, i32* %v2_fab4, align 4
  store i32 %v3_fab4, i32* @r4, align 4
  %v0_fabc = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fabc, i32* @r2, align 4
  store i32 %v3_fab4, i32* %r0.global-to-local, align 4
  %v2_fac4 = call i32 @function_1291c(i32 %v3_fab4, i32 3)
  %v1_facc = or i32 %v2_fac4, 2048
  store i32 %v1_facc, i32* @r2, align 4
  %v0_fad0 = load i32, i32* @r4, align 4
  store i32 %v0_fad0, i32* %r0.global-to-local, align 4
  %v2_fad4 = call i32 @function_1291c(i32 %v0_fad0, i32 4)
  store i32 %v2_fad4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dcf4.153 to i32), i32* %r3.global-to-local, align 4
  %v0_fadc = load i32, i32* %r5.global-to-local, align 4
  %v1_fadc = add i32 %v0_fadc, 20
  %v2_fadc = inttoptr i32 %v1_fadc to i32*
  %v3_fadc = load i32, i32* %v2_fadc, align 4
  store i32 %v3_fadc, i32* @r4, align 4
  %v2_fae0 = load i32, i32* @global_var_1dcf4.153, align 4
  %v1_fae4 = add i32 %v0_fadc, 16
  %v2_fae4 = inttoptr i32 %v1_fae4 to i32*
  %v3_fae4 = load i32, i32* %v2_fae4, align 4
  store i32 %v3_fae4, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_faec = add i32 %v0_fadc, 8
  %v3_faec = inttoptr i32 %v2_faec to i32*
  store i32 %v2_fae0, i32* %v3_faec, align 4
  %v0_faf0 = load i32, i32* %r3.global-to-local, align 4
  %v1_faf0 = load i32, i32* %r5.global-to-local, align 4
  %v2_faf0 = add i32 %v1_faf0, 12
  %v3_faf0 = inttoptr i32 %v2_faf0 to i32*
  store i32 %v0_faf0, i32* %v3_faf0, align 4
  %v0_faf8 = load i32, i32* %r5.global-to-local, align 4
  %v1_faf8 = add i32 %v0_faf8, 4
  %v2_faf8 = inttoptr i32 %v1_faf8 to i32*
  %v3_faf8 = load i32, i32* %v2_faf8, align 4
  store i32 %v3_faf8, i32* %r0.global-to-local, align 4
  %v0_fafc = load i32, i32* %r3.global-to-local, align 4
  %v2_fafc = mul i32 %v0_fafc, 2
  store i32 %v2_fafc, i32* %r3.global-to-local, align 4
  store i32 %v2_fafc, i32* %stack_var_-32, align 4
  %v3_fb1c = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_fb1c = call i32 @function_13128(i32 %v3_faf8, %sockaddr* %v3_fb1c, i32 16)
  store i32 %v4_fb1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb20

dec_label_pc_fb20:                                ; preds = %dec_label_pc_fa58.dec_label_pc_fb20_crit_edge, %dec_label_pc_faac
  %v14_fb24 = phi i32 [ %v14_fb24.pre, %dec_label_pc_fa58.dec_label_pc_fb20_crit_edge ], [ %v4_fb1c, %dec_label_pc_faac ]
  %v2_fb24 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_fb24, i32* @r4, align 4
  ret i32 %v14_fb24

; uselistorder directives
  uselistorder i32 %v2_fafc, { 1, 0 }
  uselistorder i32 %v3_fa90, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 5, 6, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_120ec, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fb20, { 1, 0 }
}

define i32 @function_fb2c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fb2c:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_fb2c = load i32, i32* @r4, align 4
  %v6_fb2c = load i32, i32* @r5, align 4
  %v9_fb2c = load i32, i32* @r6, align 4
  %v12_fb2c = load i32, i32* @r7, align 4
  %v15_fb2c = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1dcc0.155 to i32), i32* @r8, align 4
  %v2_fb34 = load i32, i32* @global_var_1dcc0.155, align 4
  store i32 ptrtoint (i32* @global_var_1dcec.157 to i32), i32* %sb.global-to-local, align 4
  %v3_fb40 = mul i32 %v2_fb34, 16
  store i32 %v3_fb40, i32* %r3.global-to-local, align 4
  %v3_fb48 = urem i32 %arg3, 65536
  store i32 %v3_fb48, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_fb54 = load i32, i32* @global_var_1dcec.157, align 4
  %v1_fb58 = add i32 %v3_fb40, 16
  store i32 %v1_fb58, i32* %r1.global-to-local, align 4
  store i32 %v3_fb48, i32* %stack_var_-44, align 4
  %v15_fb60 = call i32 @function_13700(i32 %v2_fb54, i32 %v1_fb58, i32 %v3_fb48, i32 %v3_fb40)
  store i32 %v15_fb60, i32* %sl.global-to-local, align 4
  %v0_fb68 = load i32, i32* @r5, align 4
  %v1_fb6c = load i32, i32* %sb.global-to-local, align 4
  %v2_fb6c = inttoptr i32 %v1_fb6c to i32*
  store i32 %v15_fb60, i32* %v2_fb6c, align 4
  %v2_fb70 = load i32, i32* @global_var_1dcc0.155, align 4
  store i32 %v2_fb70, i32* %fp.global-to-local, align 4
  %v1_fb74 = inttoptr i32 %v0_fb68 to i8*
  %v2_fb74 = call i32 @function_1204c(i8* %v1_fb74)
  %sext = mul i32 %v2_fb74, 16777216
  %v1_fb78 = sdiv i32 %sext, 16777216
  %v2_fb78 = add nsw i32 %v1_fb78, 1
  store i32 %v2_fb78, i32* @r4, align 4
  store i32 %v1_fb78, i32* @r7, align 4
  %v1_fb84 = call i32 @function_13464(i32 %v2_fb78)
  %v0_fb88 = load i32, i32* @r5, align 4
  store i32 %v0_fb88, i32* %r1.global-to-local, align 4
  %v0_fb8c = load i32, i32* @r4, align 4
  store i32 %v0_fb8c, i32* %r2.global-to-local, align 4
  store i32 %v1_fb84, i32* @r6, align 4
  %v3_fb94 = call i32 @function_120c8(i32 %v1_fb84, i32 %v0_fb88, i32 %v0_fb8c)
  %v0_fb98 = load i32, i32* @r7, align 4
  %tmp23 = icmp slt i32 %v0_fb98, 1
  %extract.t8 = trunc i32 %v0_fb98 to i8
  br i1 %tmp23, label %dec_label_pc_fbc4, label %dec_label_pc_fba0

dec_label_pc_fba0:                                ; preds = %dec_label_pc_fb2c
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fba8

dec_label_pc_fba8:                                ; preds = %dec_label_pc_fba8.dec_label_pc_fba8_crit_edge, %dec_label_pc_fba0
  %v1_fbb0 = phi i32 [ %v1_fbb0.pre, %dec_label_pc_fba8.dec_label_pc_fba8_crit_edge ], [ -81, %dec_label_pc_fba0 ]
  %v2_fbb4 = phi i32 [ %v1_fbb8, %dec_label_pc_fba8.dec_label_pc_fba8_crit_edge ], [ 0, %dec_label_pc_fba0 ]
  %v1_fba8 = load i32, i32* @r6, align 4
  %v2_fba8 = add i32 %v1_fba8, %v2_fbb4
  %v3_fba8 = inttoptr i32 %v2_fba8 to i8*
  %v4_fba8 = load i8, i8* %v3_fba8, align 1
  %v6_fba8 = zext i8 %v4_fba8 to i32
  %v1_fbac = sub i32 -1, %v1_fbb0
  %v2_fbb0 = xor i32 %v6_fba8, %v1_fbac
  store i32 %v2_fbb0, i32* %r3.global-to-local, align 4
  %v1_fbb4 = trunc i32 %v2_fbb0 to i8
  store i8 %v1_fbb4, i8* %v3_fba8, align 1
  %v0_fbb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_fbb8 = add i32 %v0_fbb8, 1
  store i32 %v1_fbb8, i32* %r2.global-to-local, align 4
  %v0_fbbc = load i32, i32* @r7, align 4
  %v9_fbbc = icmp eq i32 %v0_fbbc, %v1_fbb8
  br i1 %v9_fbbc, label %dec_label_pc_fbc4.loopexit, label %dec_label_pc_fba8.dec_label_pc_fba8_crit_edge

dec_label_pc_fba8.dec_label_pc_fba8_crit_edge:    ; preds = %dec_label_pc_fba8
  %v1_fbb0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fba8

dec_label_pc_fbc4.loopexit:                       ; preds = %dec_label_pc_fba8
  %extract.t = trunc i32 %v1_fbb8 to i8
  br label %dec_label_pc_fbc4

dec_label_pc_fbc4:                                ; preds = %dec_label_pc_fbc4.loopexit, %dec_label_pc_fb2c
  %v0_fbd4.off0 = phi i8 [ %extract.t, %dec_label_pc_fbc4.loopexit ], [ %extract.t8, %dec_label_pc_fb2c ]
  %v2_fbc4 = load i32, i32* @global_var_1dcc0.155, align 4
  %v2_fbc8 = load i32, i32* @global_var_1dcec.157, align 4
  store i32 %v2_fbc8, i32* %r2.global-to-local, align 4
  %v3_fbcc = mul i32 %v2_fbc4, 16
  %v2_fbd0 = add i32 %v2_fbc8, %v3_fbcc
  store i32 %v2_fbd0, i32* %r3.global-to-local, align 4
  %v3_fbd4 = add i32 %v2_fbd0, 12
  %v4_fbd4 = inttoptr i32 %v3_fbd4 to i8*
  store i8 %v0_fbd4.off0, i8* %v4_fbd4, align 1
  %v0_fbd8 = load i32, i32* @r6, align 4
  %v1_fbd8 = load i32, i32* %sl.global-to-local, align 4
  %v2_fbd8 = load i32, i32* %fp.global-to-local, align 4
  %v5_fbd8 = mul i32 %v2_fbd8, 16
  %v6_fbd8 = add i32 %v5_fbd8, %v1_fbd8
  %v7_fbd8 = inttoptr i32 %v6_fbd8 to i32*
  store i32 %v0_fbd8, i32* %v7_fbd8, align 4
  %v2_fbe0 = load i32, i32* @global_var_1dcc0.155, align 4
  store i32 %v2_fbe0, i32* @r7, align 4
  %v2_fbe4 = load i32, i32* @global_var_1dcec.157, align 4
  store i32 %v2_fbe4, i32* %sl.global-to-local, align 4
  %v1_fbe8 = inttoptr i32 %arg2 to i8*
  %v2_fbe8 = call i32 @function_1204c(i8* %v1_fbe8)
  %sext1 = mul i32 %v2_fbe8, 16777216
  %v1_fbec = sdiv i32 %sext1, 16777216
  %v2_fbec = add nsw i32 %v1_fbec, 1
  store i32 %v2_fbec, i32* @r4, align 4
  store i32 %v1_fbec, i32* @r5, align 4
  %v1_fbf8 = call i32 @function_13464(i32 %v2_fbec)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_fc00 = load i32, i32* @r4, align 4
  store i32 %v0_fc00, i32* %r2.global-to-local, align 4
  store i32 %v1_fbf8, i32* %r6.global-to-local, align 4
  %v3_fc08 = call i32 @function_120c8(i32 %v1_fbf8, i32 %arg2, i32 %v0_fc00)
  %v0_fc0c = load i32, i32* @r5, align 4
  %tmp24 = icmp slt i32 %v0_fc0c, 1
  %extract.t10 = trunc i32 %v0_fc0c to i8
  br i1 %tmp24, label %dec_label_pc_fc38, label %dec_label_pc_fc14

dec_label_pc_fc14:                                ; preds = %dec_label_pc_fbc4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc1c

dec_label_pc_fc1c:                                ; preds = %dec_label_pc_fc1c.dec_label_pc_fc1c_crit_edge, %dec_label_pc_fc14
  %v1_fc24 = phi i32 [ %v1_fc24.pre, %dec_label_pc_fc1c.dec_label_pc_fc1c_crit_edge ], [ -81, %dec_label_pc_fc14 ]
  %v2_fc28 = phi i32 [ %v1_fc2c, %dec_label_pc_fc1c.dec_label_pc_fc1c_crit_edge ], [ 0, %dec_label_pc_fc14 ]
  %v1_fc1c = load i32, i32* %r6.global-to-local, align 4
  %v2_fc1c = add i32 %v1_fc1c, %v2_fc28
  %v3_fc1c = inttoptr i32 %v2_fc1c to i8*
  %v4_fc1c = load i8, i8* %v3_fc1c, align 1
  %v6_fc1c = zext i8 %v4_fc1c to i32
  %v1_fc20 = sub i32 -1, %v1_fc24
  %v2_fc24 = xor i32 %v6_fc1c, %v1_fc20
  store i32 %v2_fc24, i32* %r3.global-to-local, align 4
  %v1_fc28 = trunc i32 %v2_fc24 to i8
  store i8 %v1_fc28, i8* %v3_fc1c, align 1
  %v0_fc2c = load i32, i32* %r2.global-to-local, align 4
  %v1_fc2c = add i32 %v0_fc2c, 1
  store i32 %v1_fc2c, i32* %r2.global-to-local, align 4
  %v0_fc30 = load i32, i32* @r5, align 4
  %v9_fc30 = icmp eq i32 %v0_fc30, %v1_fc2c
  br i1 %v9_fc30, label %dec_label_pc_fc38.loopexit, label %dec_label_pc_fc1c.dec_label_pc_fc1c_crit_edge

dec_label_pc_fc1c.dec_label_pc_fc1c_crit_edge:    ; preds = %dec_label_pc_fc1c
  %v1_fc24.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc1c

dec_label_pc_fc38.loopexit:                       ; preds = %dec_label_pc_fc1c
  %extract.t9 = trunc i32 %v1_fc2c to i8
  br label %dec_label_pc_fc38

dec_label_pc_fc38:                                ; preds = %dec_label_pc_fc38.loopexit, %dec_label_pc_fbc4
  %v0_fc48.off0 = phi i8 [ %extract.t9, %dec_label_pc_fc38.loopexit ], [ %extract.t10, %dec_label_pc_fbc4 ]
  %v2_fc38 = load i32, i32* @global_var_1dcc0.155, align 4
  %v2_fc3c = load i32, i32* @global_var_1dcec.157, align 4
  %v3_fc40 = mul i32 %v2_fc38, 16
  %v2_fc44 = or i32 %v3_fc40, 13
  %v3_fc48 = add i32 %v2_fc44, %v2_fc3c
  %v4_fc48 = inttoptr i32 %v3_fc48 to i8*
  store i8 %v0_fc48.off0, i8* %v4_fc48, align 1
  %v2_fc50 = load i32, i32* @global_var_1dcc0.155, align 4
  store i32 %v2_fc50, i32* %lr.global-to-local, align 4
  %v4_fc54 = load i8, i8* @global_var_1dcf1.160, align 1
  %v5_fc54 = zext i8 %v4_fc54 to i32
  %v3_fc58 = load i8, i8* bitcast (i8** @global_var_1dcf0.159 to i8*), align 4
  %v4_fc58 = zext i8 %v3_fc58 to i32
  %v2_fc5c = load i32, i32* @global_var_1dcec.157, align 4
  %v4_fc60 = mul nuw nsw i32 %v5_fc54, 256
  %v5_fc60 = or i32 %v4_fc58, %v4_fc60
  store i32 %v5_fc60, i32* %r2.global-to-local, align 4
  %v3_fc64 = mul i32 %v2_fc50, 16
  %v2_fc68 = add i32 %v2_fc5c, %v3_fc64
  store i32 %v2_fc68, i32* %r1.global-to-local, align 4
  %v3_fc70 = add i32 %v2_fc68, 9
  %v4_fc70 = inttoptr i32 %v3_fc70 to i8*
  store i8 %v4_fc54, i8* %v4_fc70, align 1
  %v0_fc74 = load i32, i32* %r2.global-to-local, align 4
  %v1_fc74 = trunc i32 %v0_fc74 to i8
  %v2_fc74 = load i32, i32* %r1.global-to-local, align 4
  %v3_fc74 = add i32 %v2_fc74, 8
  %v4_fc74 = inttoptr i32 %v3_fc74 to i8*
  store i8 %v1_fc74, i8* %v4_fc74, align 1
  %v4_fc78 = load i8, i8* @global_var_1dcf1.160, align 1
  %v5_fc78 = zext i8 %v4_fc78 to i32
  %v3_fc7c = load i8, i8* bitcast (i8** @global_var_1dcf0.159 to i8*), align 4
  %v4_fc7c = zext i8 %v3_fc7c to i32
  %v4_fc80 = mul nuw nsw i32 %v5_fc78, 256
  %v5_fc80 = or i32 %v4_fc7c, %v4_fc80
  %v2_fc84 = load i32, i32* %stack_var_-44, align 4
  %v2_fc88 = add i32 %v5_fc80, %v2_fc84
  store i32 %v2_fc88, i32* %r3.global-to-local, align 4
  %v3_fc8c11 = udiv i32 %v2_fc88, 256
  %v1_fc90 = trunc i32 %v3_fc8c11 to i8
  %v2_fc90 = load i32, i32* %r1.global-to-local, align 4
  %v3_fc90 = add i32 %v2_fc90, 11
  %v4_fc90 = inttoptr i32 %v3_fc90 to i8*
  store i8 %v1_fc90, i8* %v4_fc90, align 1
  %v0_fc94 = load i32, i32* %r3.global-to-local, align 4
  %v1_fc94 = trunc i32 %v0_fc94 to i8
  %v2_fc94 = load i32, i32* %r1.global-to-local, align 4
  %v3_fc94 = add i32 %v2_fc94, 10
  %v4_fc94 = inttoptr i32 %v3_fc94 to i8*
  store i8 %v1_fc94, i8* %v4_fc94, align 1
  %v4_fc98 = load i8, i8* @global_var_1dcf1.160, align 1
  %v5_fc98 = zext i8 %v4_fc98 to i32
  %v3_fc9c = load i8, i8* bitcast (i8** @global_var_1dcf0.159 to i8*), align 4
  %v4_fc9c = zext i8 %v3_fc9c to i32
  %v4_fca0 = mul nuw nsw i32 %v5_fc98, 256
  %v5_fca0 = or i32 %v4_fc9c, %v4_fca0
  %v2_fca4 = load i32, i32* %stack_var_-44, align 4
  %v2_fca8 = add i32 %v5_fca0, %v2_fca4
  store i32 %v2_fca8, i32* %r2.global-to-local, align 4
  %v0_fcac = load i32, i32* @r7, align 4
  %v3_fcac = mul i32 %v0_fcac, 16
  %v1_fcb0 = load i32, i32* %sl.global-to-local, align 4
  %v2_fcb0 = add i32 %v1_fcb0, %v3_fcac
  store i32 %v2_fcb0, i32* %r3.global-to-local, align 4
  %v0_fcb4 = load i32, i32* %lr.global-to-local, align 4
  %v1_fcb4 = add i32 %v0_fcb4, 1
  store i32 %v1_fcb4, i32* @lr, align 4
  %v3_fcb8 = sdiv i32 %v2_fca8, 256
  store i32 %v3_fcb8, i32* %r1.global-to-local, align 4
  %v0_fcbc = load i32, i32* %r6.global-to-local, align 4
  %v2_fcbc = add i32 %v2_fcb0, 4
  %v3_fcbc = inttoptr i32 %v2_fcbc to i32*
  store i32 %v0_fcbc, i32* %v3_fcbc, align 4
  %v0_fcc0 = load i32, i32* @lr, align 4
  %v1_fcc0 = load i32, i32* @r8, align 4
  %v2_fcc0 = inttoptr i32 %v1_fcc0 to i32*
  store i32 %v0_fcc0, i32* %v2_fcc0, align 4
  %v0_fcc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_fcc4 = trunc i32 %v0_fcc4 to i8
  store i8 %v1_fcc4, i8* @global_var_1dcf1.160, align 1
  %v0_fcc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_fcc8 = trunc i32 %v0_fcc8 to i8
  store i8 %v1_fcc8, i8* bitcast (i8** @global_var_1dcf0.159 to i8*), align 4
  store i32 %v3_fb2c, i32* @r4, align 4
  store i32 %v6_fb2c, i32* @r5, align 4
  store i32 %v9_fb2c, i32* @r6, align 4
  store i32 %v12_fb2c, i32* @r7, align 4
  store i32 %v15_fb2c, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1dcf0.159 to i32)

; uselistorder directives
  uselistorder i32 %v1_fc2c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_fbf8, { 1, 0 }
  uselistorder i32 %v1_fbb8, { 0, 2, 3, 1 }
  uselistorder i32 %v1_fb84, { 1, 0 }
  uselistorder i32 %v3_fb48, { 1, 2, 0 }
  uselistorder i32 %v3_fb40, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32 -81, { 0, 2, 1, 3 }
  uselistorder i32 (i8*)* @function_1204c, { 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 80, 81, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 74, 75, 76, 77, 78, 79, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73 }
  uselistorder i32 (i32, i32, i32, i32)* @function_13700, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_fce0(i32 %arg1) local_unnamed_addr {
dec_label_pc_fce0:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp249 = call i32 @__decompiler_undefined_function_0()
  %tmp250 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-52 = alloca i8, align 1
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %tmp278 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-36 = alloca i32, align 4
  %v3_fce0 = load i32, i32* @r4, align 4
  store i32 %v3_fce0, i32* %stack_var_-36, align 4
  %v6_fce0 = load i32, i32* @r5, align 4
  %v15_fce0 = load i32, i32* @r8, align 4
  %v18_fce0 = load i32, i32* @sb, align 4
  %v21_fce0 = load i32, i32* @sl, align 4
  %v0_fcec = call i32 @function_12a0c()
  store i32 %v0_fcec, i32* %r0.global-to-local, align 4
  %v7_fcf0 = icmp eq i32 %v0_fcec, -1
  %. = zext i1 %v7_fcf0 to i32
  %tmp281 = icmp slt i32 %v0_fcec, 1
  %storemerge240 = select i1 %tmp281, i32 %., i32 1
  store i32 %storemerge240, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1dd5c.151 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd0c = icmp eq i32 %storemerge240, 0
  store i1 %v2_fd0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_fcec, i32* @global_var_1dd5c.151, align 4
  br i1 %v2_fd0c, label %dec_label_pc_fd24, label %dec_label_pc_fd18

dec_label_pc_fd18:                                ; preds = %dec_label_pc_fce0
  store i32 %v3_fce0, i32* %r4.global-to-local, align 4
  store i32 %v6_fce0, i32* %r5.global-to-local, align 4
  store i32 %v15_fce0, i32* %r8.global-to-local, align 4
  store i32 %v18_fce0, i32* @sb, align 4
  store i32 %v21_fce0, i32* @sl, align 4
  ret i32 %v0_fcec

dec_label_pc_fd24:                                ; preds = %dec_label_pc_fce0
  %v0_fd24 = call i32 @function_12304()
  store i32 %v0_fd24, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dd3c.81 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_fd24, i32* @global_var_1dd3c.81, align 4
  %v1_fd30 = call i32 @function_f91c(i32 %v0_fd24)
  %v0_fd34 = load i32, i32* @r4, align 4
  store i32 %v0_fd34, i32* %r0.global-to-local, align 4
  %v1_fd38 = inttoptr i32 %v0_fd34 to i32*
  %v2_fd38 = call i32 @function_12cb0(i32* %v1_fd38)
  store i32 ptrtoint (i32* @global_var_1dcf4.153 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_fd38, i32* @global_var_1dcf4.153, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_fd4c = call i32 @function_135b8(i32 256, i32 288)
  store i32 %v2_fd4c, i32* %lr.global-to-local, align 4
  %v0_fd58 = load i32, i32* @r4, align 4
  store i32 %v0_fd58, i32* %stack_var_-48, align 4
  store i32 %v2_fd4c, i32* @global_var_1dd54.165, align 4
  store i32 %v0_fd58, i32* %r3.global-to-local, align 4
  store i32 %v0_fd58, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_fd58, i32* %ip.global-to-local, align 4
  %v1_fd70 = add i32 %v2_fd4c, 4
  store i32 %v1_fd70, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fd74

dec_label_pc_fd74:                                ; preds = %dec_label_pc_fd74.dec_label_pc_fd74_crit_edge, %dec_label_pc_fd24
  %v0_fd8c = phi i32 [ %v0_fd8c.pre, %dec_label_pc_fd74.dec_label_pc_fd74_crit_edge ], [ %v0_fd58, %dec_label_pc_fd24 ]
  %v0_fd7c = phi i32 [ %v0_fd94, %dec_label_pc_fd74.dec_label_pc_fd74_crit_edge ], [ %v0_fd58, %dec_label_pc_fd24 ]
  %v1_fd84 = phi i32 [ %v1_fd84.pre, %dec_label_pc_fd74.dec_label_pc_fd74_crit_edge ], [ %v2_fd4c, %dec_label_pc_fd24 ]
  %v3_fd74 = mul i32 %v0_fd7c, 256
  store i32 %v3_fd74, i32* %r2.global-to-local, align 4
  %v1_fd7c = add i32 %v0_fd7c, 1
  store i32 %v1_fd7c, i32* %ip.global-to-local, align 4
  %v2_fd80 = mul i32 %v0_fd7c, 288
  %v2_fd84 = add i32 %v1_fd84, 12
  %v2_fd8c = add i32 %v2_fd84, %v2_fd80
  %v3_fd8c = inttoptr i32 %v2_fd8c to i32*
  store i32 %v0_fd8c, i32* %v3_fd8c, align 4
  %v0_fd90 = load i32, i32* %r0.global-to-local, align 4
  %v1_fd90 = load i32, i32* %r1.global-to-local, align 4
  %v2_fd90 = inttoptr i32 %v1_fd90 to i32*
  store i32 %v0_fd90, i32* %v2_fd90, align 4
  %v3_fd90 = load i32, i32* %r1.global-to-local, align 4
  %v4_fd90 = add i32 %v3_fd90, 288
  store i32 %v4_fd90, i32* %r1.global-to-local, align 4
  %v0_fd94 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_fd94, i32* %r3.global-to-local, align 4
  %v7_fd98 = icmp sgt i32 %v1_fd7c, 255
  br i1 %v7_fd98, label %dec_label_pc_fd9c, label %dec_label_pc_fd74.dec_label_pc_fd74_crit_edge

dec_label_pc_fd74.dec_label_pc_fd74_crit_edge:    ; preds = %dec_label_pc_fd74
  %v1_fd84.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_fd8c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_fd74

dec_label_pc_fd9c:                                ; preds = %dec_label_pc_fd74
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_fd94, i32* %stack_var_-48, align 4
  %v3_fdac = call i32 @function_132cc(i32 2, i32 3, i32 6)
  store i32 %v3_fdac, i32* %r0.global-to-local, align 4
  %v2_fdb4 = icmp eq i32 %v3_fdac, -1
  store i1 %v2_fdb4, i1* %cpsr_c.global-to-local, align 1
  %v7_fdb4 = icmp eq i32 %v3_fdac, -1
  store i1 %v7_fdb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_fdac, i32* @r4, align 4
  store i32 %v3_fdac, i32* @global_var_1dd58.167, align 4
  br i1 %v7_fdb4, label %dec_label_pc_10584, label %dec_label_pc_fdc4

dec_label_pc_fdc4:                                ; preds = %dec_label_pc_fd9c
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_fdc8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_fdc8, i32* @r2, align 4
  %v2_fdcc = call i32 @function_1291c(i32 %v3_fdac, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_fdd4 = or i32 %v2_fdcc, 2048
  store i32 %v1_fdd4, i32* @r2, align 4
  %v0_fdd8 = load i32, i32* @r4, align 4
  store i32 %v0_fdd8, i32* %r0.global-to-local, align 4
  %v2_fddc = call i32 @function_1291c(i32 %v0_fdd8, i32 4)
  %v2_fde8 = load i32, i32* @global_var_1dd58.167, align 4
  store i32 %v2_fde8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_fdf0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_fdf0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_fdf8 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_fdf8, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v6_fe08 = call i32 @function_1329c(i32 %v2_fde8, i32 %v0_fdf0, i32 3, i32* nonnull %stack_var_-48, i32 4)
  store i32 %v6_fe08, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe0c = icmp eq i32 %v6_fe08, 0
  store i1 %v2_fe0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe0c, label %dec_label_pc_fe14, label %dec_label_pc_10578

dec_label_pc_fe14:                                ; preds = %dec_label_pc_fdc4, %dec_label_pc_fe14
  %v0_fe14 = call i32 @function_f8c4()
  %v3_fe18 = mul i32 %v0_fe14, 65536
  store i32 %v3_fe18, i32* %r0.global-to-local, align 4
  %v1_fe24 = mul i32 %v0_fe14, 256
  %v3_fe28 = and i32 %v1_fe24, 65280
  %tmp284 = udiv i32 %v0_fe14, 256
  %v4_fe2c = urem i32 %tmp284, 256
  %v5_fe2c = or i32 %v4_fe2c, %v3_fe28
  store i32 %v5_fe2c, i32* %r3.global-to-local, align 4
  %v2_fe30 = icmp ugt i32 %v5_fe2c, 1023
  store i1 %v2_fe30, i1* %cpsr_c.global-to-local, align 1
  %v7_fe30 = icmp eq i32 %v5_fe2c, 1024
  store i1 %v7_fe30, i1* %cpsr_z.global-to-local, align 1
  %v3_fe34 = icmp ult i32 %v5_fe2c, 1022
  br i1 %v3_fe34, label %dec_label_pc_fe14, label %dec_label_pc_fe38

dec_label_pc_fe38:                                ; preds = %dec_label_pc_fe14
  %v5_fe20.le = trunc i32 %v0_fe14 to i8
  store i32 ptrtoint (i8** @global_var_1dcc4.169 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1dcc4.169 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1dcc7.170 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1dcc6.171 to i8*), align 4
  %v0_fe6c = call i32 @function_f8c4()
  %v1_fe6c = trunc i32 %v0_fe6c to i8
  store i32 %v0_fe6c, i32* %r0.global-to-local, align 4
  %v4_fe74 = sext i8 %v5_fe20.le to i32
  %v3_fe78 = load i8, i8* @global_var_1dce4.174, align 1
  store i32 ptrtoint (i8** @global_var_1dcc4.169 to i32), i32* %lr.global-to-local, align 4
  %v3_fe80239 = udiv i32 %v4_fe74, 256
  store i8 64, i8* bitcast (i32* @global_var_1dccc.175 to i8*), align 4
  %v2_fe8c = and i32 %v0_fe6c, 128
  %v3_fe8c = icmp ne i32 %v2_fe8c, 0
  store i1 %v3_fe8c, i1* %cpsr_c.global-to-local, align 1
  %v4_fe8c238 = udiv i32 %v0_fe6c, 256
  store i32 ptrtoint (i32* @global_var_1dcd8.173 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_fe78, 16
  %v1_fe94 = zext i8 %tmp to i32
  %v1_fe98 = trunc i32 %v4_fe8c238 to i8
  store i8 %v1_fe98, i8* bitcast (i32* @global_var_1dcc9.176 to i8*), align 4
  %v1_fe9c = or i32 %v1_fe94, 80
  store i32 %v1_fe9c, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  store i32 6, i32* @r6, align 4
  %v1_fea8 = trunc i32 %v1_fe9c to i8
  store i8 %v1_fea8, i8* @global_var_1dce4.174, align 1
  %v1_feac = trunc i32 %v3_fe80239 to i8
  store i8 %v1_feac, i8* bitcast (i32* @global_var_1dcd9.177 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1dcdb.178 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1dccd.179 to i8*), align 4
  store i32 %v4_fe74, i32* %ip.global-to-local, align 4
  store i8 %v1_fe6c, i8* bitcast (i32* @global_var_1dcc8.180 to i8*), align 4
  store i8 %v5_fe20.le, i8* bitcast (i32* @global_var_1dcd8.173 to i8*), align 4
  %v0_fec4 = load i32, i32* @r5, align 4
  %v1_fec4 = trunc i32 %v0_fec4 to i8
  store i8 %v1_fec4, i8* bitcast (i32* @global_var_1dcda.181 to i8*), align 4
  %v0_fec8 = call i32 @function_f8c4()
  %v1_fec8 = trunc i32 %v0_fec8 to i8
  store i32 ptrtoint (i32* @global_var_1dcd8.173 to i32), i32* @lr, align 4
  %v3_fed0 = load i8, i8* @global_var_1dce5.182, align 1
  %v4_fed0 = zext i8 %v3_fed0 to i32
  %v2_fed4 = and i32 %v0_fec8, 128
  %v3_fed4 = icmp ne i32 %v2_fed4, 0
  store i1 %v3_fed4, i1* %cpsr_c.global-to-local, align 1
  %v4_fed4 = sdiv i32 %v0_fec8, 256
  store i32 %v4_fed4, i32* %ip.global-to-local, align 4
  %v1_fed8 = or i32 %v4_fed0, 2
  store i32 %v1_fed8, i32* %r3.global-to-local, align 4
  store i32 %v0_fec8, i32* @r4, align 4
  %v1_fee0 = trunc i32 %v4_fed4 to i8
  store i8 %v1_fee0, i8* bitcast (i32* @global_var_1dce7.183 to i8*), align 4
  %v1_fee4 = trunc i32 %v1_fed8 to i8
  store i8 %v1_fee4, i8* @global_var_1dce5.182, align 1
  store i8 %v1_fec8, i8* bitcast (i32* @global_var_1dce6.184 to i8*), align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15210.188 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_fef8 = call i32 @function_fb2c(i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32 ptrtoint ([8 x i8]* @global_var_15210.188 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15218.190 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ff08 = call i32 @function_fb2c(i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32 ptrtoint ([5 x i8]* @global_var_15218.190 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15220.192 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_ff18 = call i32 @function_fb2c(i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32 ptrtoint ([9 x i8]* @global_var_15220.192 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32* %r1.global-to-local, align 4
  %v5_ff28 = call i32 @function_fb2c(i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1522c.194 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_ff38 = call i32 @function_fb2c(i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32 ptrtoint (i32* @global_var_1522c.194 to i32), i32 17)
  store i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15100.196 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_ff48 = call i32 @function_fb2c(i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32 ptrtoint (i32* @global_var_15100.196 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15200.198 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ff58 = call i32 @function_fb2c(i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), i32 ptrtoint ([5 x i8]* @global_var_15200.198 to i32), i32 9)
  store i32 ptrtoint ([4 x i8]* @global_var_15130.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15100.196 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_ff68 = call i32 @function_fb2c(i32 ptrtoint ([4 x i8]* @global_var_15130.200 to i32), i32 ptrtoint (i32* @global_var_15100.196 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1513c.204 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_ff78 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([5 x i8]* @global_var_1513c.204 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15144.206 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_ff88 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([7 x i8]* @global_var_15144.206 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15100.196 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_ff98 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint (i32* @global_var_15100.196 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1514c.208 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ffa8 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([6 x i8]* @global_var_1514c.208 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15154.210 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_ffb8 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([9 x i8]* @global_var_15154.210 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15160.212 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ffc8 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([6 x i8]* @global_var_15160.212 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15168.214 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ffd8 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([6 x i8]* @global_var_15168.214 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15170.216 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_ffe8 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([9 x i8]* @global_var_15170.216 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1517c.218 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_fff8 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([8 x i8]* @global_var_1517c.218 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15184.220 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10008 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([4 x i8]* @global_var_15184.220 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15188.222 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10018 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([7 x i8]* @global_var_15188.222 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15190.224 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10028 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([4 x i8]* @global_var_15190.224 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15194.226 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10038 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([9 x i8]* @global_var_15194.226 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15220.192 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10048 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([9 x i8]* @global_var_15220.192 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1522c.194 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10058 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint (i32* @global_var_1522c.194 to i32), i32 16)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_151a0.228 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10068 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([6 x i8]* @global_var_151a0.228 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_151a8.230 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10078 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([7 x i8]* @global_var_151a8.230 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_151b0.232 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v5_10088 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([11 x i8]* @global_var_151b0.232 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_151bc.234 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10098 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint ([7 x i8]* @global_var_151bc.234 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151c4.236 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_100a8 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), i32 ptrtoint (i32* @global_var_151c4.236 to i32), i32 16)
  store i32 ptrtoint ([8 x i8]* @global_var_1517c.218 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15100.196 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_100b8 = call i32 @function_fb2c(i32 ptrtoint ([8 x i8]* @global_var_1517c.218 to i32), i32 ptrtoint (i32* @global_var_15100.196 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_151d4.238 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_151d4.238 to i32), i32* %r1.global-to-local, align 4
  %v5_100c8 = call i32 @function_fb2c(i32 ptrtoint ([5 x i8]* @global_var_151d4.238 to i32), i32 ptrtoint ([5 x i8]* @global_var_151d4.238 to i32), i32 8)
  %v0_100cc = load i32, i32* @r6, align 4
  store i32 %v0_100cc, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_151dc.240 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15100.196 to i32), i32* %r1.global-to-local, align 4
  %v4_100d8 = call i32 @function_fb2c(i32 ptrtoint ([7 x i8]* @global_var_151dc.240 to i32), i32 ptrtoint (i32* @global_var_15100.196 to i32), i32 %v0_100cc)
  store i32 ptrtoint ([4 x i8]* @global_var_151e4.242 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15100.196 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_100e8 = call i32 @function_fb2c(i32 ptrtoint ([4 x i8]* @global_var_151e4.242 to i32), i32 ptrtoint (i32* @global_var_15100.196 to i32), i32 3)
  store i32 ptrtoint ([8 x i8]* @global_var_151e8.244 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_151e8.244 to i32), i32* %r1.global-to-local, align 4
  %v5_100f8 = call i32 @function_fb2c(i32 ptrtoint ([8 x i8]* @global_var_151e8.244 to i32), i32 ptrtoint ([8 x i8]* @global_var_151e8.244 to i32), i32 14)
  store i32 ptrtoint ([11 x i8]* @global_var_151f0.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_151fc.248 to i32), i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v5_10108 = call i32 @function_fb2c(i32 ptrtoint ([11 x i8]* @global_var_151f0.246 to i32), i32 ptrtoint ([9 x i8]* @global_var_151fc.248 to i32), i32 18)
  %v2_10110 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_10110, i32* %r0.global-to-local, align 4
  %v2_10114 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_10114, i32* %r1.global-to-local, align 4
  %tmp285 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_10120

dec_label_pc_10120:                               ; preds = %dec_label_pc_10768, %dec_label_pc_fe38
  %v0_10440 = phi i32 [ %v2_10110, %dec_label_pc_fe38 ], [ %stack_var_-1872.1, %dec_label_pc_10768 ]
  %stack_var_-1868.0 = phi i8 [ %v5_fe20.le, %dec_label_pc_fe38 ], [ %stack_var_-1868.1, %dec_label_pc_10768 ]
  %stack_var_-1876.0 = phi i8* [ %tmp285, %dec_label_pc_fe38 ], [ %stack_var_-1876.1, %dec_label_pc_10768 ]
  store i32 ptrtoint (i32* @global_var_1dcf4.153 to i32), i32* %r2.global-to-local, align 4
  %v2_10124 = load i32, i32* @global_var_1dcf4.153, align 4
  store i32 %v2_10124, i32* %r8.global-to-local, align 4
  %v0_10128 = load i32, i32* @fp, align 4
  %v3_10128 = icmp uge i32 %v0_10128, %v2_10124
  store i1 %v3_10128, i1* %cpsr_c.global-to-local, align 1
  %v9_10128 = icmp eq i32 %v0_10128, %v2_10124
  store i1 %v9_10128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10128, label %dec_label_pc_103d0, label %dec_label_pc_10130

dec_label_pc_10130:                               ; preds = %dec_label_pc_10120
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_103a4 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_1013c

dec_label_pc_1013c:                               ; preds = %.thread50.dec_label_pc_1013c_crit_edge, %dec_label_pc_10130
  %v0_1013c = phi i32 [ %v0_1013c.pre, %.thread50.dec_label_pc_1013c_crit_edge ], [ 0, %dec_label_pc_10130 ]
  store i32 %v0_1013c, i32* %stack_var_-92, align 4
  %v0_1014c = call i32 @function_f8c4()
  %v1_1014c = trunc i32 %v0_1014c to i8
  store i32 %v0_1014c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dd3c.81 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1dcc4.169 to i32), i32* %lr.global-to-local, align 4
  %v2_10158 = load i32, i32* @global_var_1dd3c.81, align 4
  store i32 %v2_10158, i32* %r2.global-to-local, align 4
  %v2_1015c = and i32 %v0_1014c, 128
  %v3_1015c = icmp ne i32 %v2_1015c, 0
  store i1 %v3_1015c, i1* %cpsr_c.global-to-local, align 1
  %v4_1015c = sdiv i32 %v0_1014c, 256
  store i32 %v4_1015c, i32* %r3.global-to-local, align 4
  %v1_10160 = trunc i32 %v4_1015c to i8
  store i8 %v1_10160, i8* bitcast (i32* @global_var_1dcc9.176 to i8*), align 4
  store i32 %v2_10158, i32* @global_var_1dcd0.249, align 4
  store i8 %v1_1014c, i8* bitcast (i32* @global_var_1dcc8.180 to i8*), align 4
  br label %dec_label_pc_1016c

dec_label_pc_1016c:                               ; preds = %dec_label_pc_10240, %dec_label_pc_1019c, %dec_label_pc_10274, %dec_label_pc_10268, %dec_label_pc_1025c, %dec_label_pc_10250, %.thread35, %bb304, %bb303, %bb302, %bb301, %bb300, %dec_label_pc_10238, %dec_label_pc_10230, %bb296, %dec_label_pc_10200, %dec_label_pc_101dc, %bb289, %dec_label_pc_101ac, %bb288, %dec_label_pc_10194, %bb287, %bb306, %dec_label_pc_1013c
  %v0_1016c = call i32 @function_f8c4()
  store i32 %v0_1016c, i32* %r0.global-to-local, align 4
  %v1_10170 = urem i32 %v0_1016c, 256
  store i32 %v1_10170, i32* %r1.global-to-local, align 4
  %v3_10174 = udiv i32 %v0_1016c, 256
  store i32 %v3_10174, i32* %r3.global-to-local, align 4
  %v3_10178 = udiv i32 %v0_1016c, 65536
  store i32 %v3_10178, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1017c = icmp eq i32 %v1_10170, 0
  store i1 %v2_1017c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1017c, label %bb287, label %bb286

bb286:                                            ; preds = %dec_label_pc_1016c
  %v3_10180 = icmp ugt i32 %v1_10170, 126
  store i1 %v3_10180, i1* %cpsr_c.global-to-local, align 1
  %v8_10180 = icmp eq i32 %v1_10170, 127
  store i1 %v8_10180, i1* %cpsr_z.global-to-local, align 1
  br label %bb287

bb287:                                            ; preds = %dec_label_pc_1016c, %bb286
  %v0_10190 = phi i1 [ true, %dec_label_pc_1016c ], [ %v8_10180, %bb286 ]
  %v1_10184 = urem i32 %v3_10174, 256
  store i32 %v1_10184, i32* %ip.global-to-local, align 4
  %v1_10188 = urem i32 %v3_10178, 256
  store i32 %v1_10188, i32* %r2.global-to-local, align 4
  %v1_1018c = and i32 %v0_1016c, 8388608
  %v2_1018c = icmp ne i32 %v1_1018c, 0
  store i1 %v2_1018c, i1* %cpsr_c.global-to-local, align 1
  %v3_1018c = udiv i32 %v0_1016c, 16777216
  store i32 %v3_1018c, i32* %r0.global-to-local, align 4
  br i1 %v0_10190, label %dec_label_pc_1016c, label %dec_label_pc_10194

dec_label_pc_10194:                               ; preds = %bb287
  %v2_10194 = icmp ugt i32 %v1_10170, 2
  store i1 %v2_10194, i1* %cpsr_c.global-to-local, align 1
  %v7_10194 = icmp eq i32 %v1_10170, 3
  store i1 %v7_10194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10194, label %dec_label_pc_1016c, label %dec_label_pc_1019c

dec_label_pc_1019c:                               ; preds = %dec_label_pc_10194
  %v1_1019c = add nsw i32 %v1_10170, -15
  store i32 %v1_1019c, i32* %r3.global-to-local, align 4
  %v2_101a0 = icmp ugt i32 %v1_10170, 55
  store i1 %v2_101a0, i1* %cpsr_c.global-to-local, align 1
  %v7_101a0 = icmp eq i32 %v1_10170, 56
  store i1 %v7_101a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101a0, label %dec_label_pc_1016c, label %bb288

bb288:                                            ; preds = %dec_label_pc_1019c
  %v3_101a4 = icmp ne i32 %v1_1019c, 0
  store i1 %v3_101a4, i1* %cpsr_c.global-to-local, align 1
  %v8_101a4 = icmp eq i32 %v1_1019c, 1
  store i1 %v8_101a4, i1* %cpsr_z.global-to-local, align 1
  %v2_101a8 = xor i1 %v3_101a4, true
  %v3_101a8 = or i1 %v8_101a4, %v2_101a8
  br i1 %v3_101a8, label %dec_label_pc_1016c, label %dec_label_pc_101ac

dec_label_pc_101ac:                               ; preds = %bb288
  %v2_101ac = icmp ugt i32 %v1_10170, 9
  store i1 %v2_101ac, i1* %cpsr_c.global-to-local, align 1
  %v7_101ac = icmp eq i32 %v1_10170, 10
  store i1 %v7_101ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101ac, label %dec_label_pc_1016c, label %dec_label_pc_101b4

dec_label_pc_101b4:                               ; preds = %dec_label_pc_101ac
  %v2_101b4 = icmp ugt i32 %v1_10170, 191
  store i1 %v2_101b4, i1* %cpsr_c.global-to-local, align 1
  %v7_101b4 = icmp eq i32 %v1_10170, 192
  store i1 %v7_101b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101b4, label %bb289, label %dec_label_pc_101c0

bb289:                                            ; preds = %dec_label_pc_101b4
  %v3_101b8 = icmp ugt i32 %v1_10184, 167
  store i1 %v3_101b8, i1* %cpsr_c.global-to-local, align 1
  %v8_101b8 = icmp eq i32 %v1_10184, 168
  store i1 %v8_101b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_101b8, label %dec_label_pc_1016c, label %dec_label_pc_101c0

dec_label_pc_101c0:                               ; preds = %dec_label_pc_101b4, %bb289
  %v7_101c0 = icmp eq i32 %v1_10170, 172
  %.356 = zext i1 %v7_101c0 to i32
  store i32 %.356, i32* %r3.global-to-local, align 4
  %v2_101cc = icmp ugt i32 %v1_10184, 14
  store i1 %v2_101cc, i1* %cpsr_c.global-to-local, align 1
  %v7_101cc = icmp eq i32 %v1_10184, 15
  store i1 %v7_101cc, i1* %cpsr_z.global-to-local, align 1
  %v2_101d0 = xor i1 %v2_101cc, true
  %v3_101d0 = or i1 %v7_101cc, %v2_101d0
  br i1 %v3_101d0, label %.thread13, label %bb292

.thread13:                                        ; preds = %dec_label_pc_101c0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_101e4

bb292:                                            ; preds = %dec_label_pc_101c0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101d4 = icmp eq i1 %v7_101c0, false
  store i1 %v2_101d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101d4, label %dec_label_pc_101e4, label %dec_label_pc_101dc

dec_label_pc_101dc:                               ; preds = %bb292
  %v2_101dc = icmp ugt i32 %v1_10184, 30
  store i1 %v2_101dc, i1* %cpsr_c.global-to-local, align 1
  %v7_101dc = icmp eq i32 %v1_10184, 31
  store i1 %v7_101dc, i1* %cpsr_z.global-to-local, align 1
  %v2_101e0 = xor i1 %v2_101dc, true
  %v3_101e0 = or i1 %v7_101dc, %v2_101e0
  br i1 %v3_101e0, label %dec_label_pc_1016c, label %dec_label_pc_101e4

dec_label_pc_101e4:                               ; preds = %.thread13, %dec_label_pc_101dc, %bb292
  %v7_101e4 = icmp eq i32 %v1_10170, 100
  %.357 = zext i1 %v7_101e4 to i32
  store i32 %.357, i32* %r3.global-to-local, align 4
  %v2_101f0 = icmp ugt i32 %v1_10184, 62
  store i1 %v2_101f0, i1* %cpsr_c.global-to-local, align 1
  %v7_101f0 = icmp eq i32 %v1_10184, 63
  store i1 %v7_101f0, i1* %cpsr_z.global-to-local, align 1
  %v2_101f4 = xor i1 %v2_101f0, true
  %v3_101f4 = or i1 %v7_101f0, %v2_101f4
  br i1 %v3_101f4, label %.thread18, label %bb295

.thread18:                                        ; preds = %dec_label_pc_101e4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10208

bb295:                                            ; preds = %dec_label_pc_101e4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101f8 = icmp eq i1 %v7_101e4, false
  store i1 %v2_101f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101f8, label %dec_label_pc_10208, label %dec_label_pc_10200

dec_label_pc_10200:                               ; preds = %bb295
  %v2_10200 = icmp ugt i32 %v1_10184, 125
  store i1 %v2_10200, i1* %cpsr_c.global-to-local, align 1
  %v7_10200 = icmp eq i32 %v1_10184, 126
  store i1 %v7_10200, i1* %cpsr_z.global-to-local, align 1
  %v2_10204 = xor i1 %v2_10200, true
  %v3_10204 = or i1 %v7_10200, %v2_10204
  br i1 %v3_10204, label %dec_label_pc_1016c, label %dec_label_pc_10208

dec_label_pc_10208:                               ; preds = %.thread18, %dec_label_pc_10200, %bb295
  %v2_10208 = icmp ugt i32 %v1_10170, 168
  store i1 %v2_10208, i1* %cpsr_c.global-to-local, align 1
  %v7_10208 = icmp eq i32 %v1_10170, 169
  store i1 %v7_10208, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10208, label %bb296, label %dec_label_pc_10214

bb296:                                            ; preds = %dec_label_pc_10208
  %v3_1020c = icmp eq i32 %v1_10184, 255
  store i1 %v3_1020c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_1020c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1020c, label %dec_label_pc_1016c, label %dec_label_pc_10214

dec_label_pc_10214:                               ; preds = %dec_label_pc_10208, %bb296
  %v7_10214 = icmp eq i32 %v1_10170, 198
  %.358 = zext i1 %v7_10214 to i32
  store i32 %.358, i32* %r3.global-to-local, align 4
  %v2_10220 = icmp ugt i32 %v1_10184, 16
  store i1 %v2_10220, i1* %cpsr_c.global-to-local, align 1
  %v7_10220 = icmp eq i32 %v1_10184, 17
  store i1 %v7_10220, i1* %cpsr_z.global-to-local, align 1
  %v2_10224 = xor i1 %v2_10220, true
  %v3_10224 = or i1 %v7_10220, %v2_10224
  br i1 %v3_10224, label %.thread24, label %bb299

.thread24:                                        ; preds = %dec_label_pc_10214
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10238

bb299:                                            ; preds = %dec_label_pc_10214
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10228 = icmp eq i1 %v7_10214, false
  store i1 %v2_10228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10228, label %dec_label_pc_10238, label %dec_label_pc_10230

dec_label_pc_10230:                               ; preds = %bb299
  %v2_10230 = icmp ugt i32 %v1_10184, 18
  store i1 %v2_10230, i1* %cpsr_c.global-to-local, align 1
  %v7_10230 = icmp eq i32 %v1_10184, 19
  store i1 %v7_10230, i1* %cpsr_z.global-to-local, align 1
  %v2_10234 = xor i1 %v2_10230, true
  %v3_10234 = or i1 %v7_10230, %v2_10234
  br i1 %v3_10234, label %dec_label_pc_1016c, label %dec_label_pc_10238

dec_label_pc_10238:                               ; preds = %.thread24, %dec_label_pc_10230, %bb299
  %v2_10238 = icmp ugt i32 %v1_10170, 222
  store i1 %v2_10238, i1* %cpsr_c.global-to-local, align 1
  %v7_10238 = icmp eq i32 %v1_10170, 223
  store i1 %v7_10238, i1* %cpsr_z.global-to-local, align 1
  %v2_1023c = xor i1 %v7_10238, true
  %v3_1023c = and i1 %v2_10238, %v2_1023c
  br i1 %v3_1023c, label %dec_label_pc_1016c, label %dec_label_pc_10240

dec_label_pc_10240:                               ; preds = %dec_label_pc_10238
  %v1_10240 = add nsw i32 %v1_10170, -6
  store i32 %v1_10240, i32* %r3.global-to-local, align 4
  %v2_10244 = icmp ugt i32 %v1_10170, 10
  store i1 %v2_10244, i1* %cpsr_c.global-to-local, align 1
  %v7_10244 = icmp eq i32 %v1_10170, 11
  store i1 %v7_10244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10244, label %dec_label_pc_1016c, label %bb300

bb300:                                            ; preds = %dec_label_pc_10240
  %v3_10248 = icmp ne i32 %v1_10240, 0
  store i1 %v3_10248, i1* %cpsr_c.global-to-local, align 1
  %v8_10248 = icmp eq i32 %v1_10240, 1
  store i1 %v8_10248, i1* %cpsr_z.global-to-local, align 1
  %v2_1024c = xor i1 %v3_10248, true
  %v3_1024c = or i1 %v8_10248, %v2_1024c
  br i1 %v3_1024c, label %dec_label_pc_1016c, label %dec_label_pc_10250

dec_label_pc_10250:                               ; preds = %bb300
  %v2_10250 = icmp ugt i32 %v1_10170, 21
  store i1 %v2_10250, i1* %cpsr_c.global-to-local, align 1
  %v7_10250 = icmp eq i32 %v1_10170, 22
  store i1 %v7_10250, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10250, label %dec_label_pc_1016c, label %bb301

bb301:                                            ; preds = %dec_label_pc_10250
  %v3_10254 = icmp ugt i32 %v1_10170, 20
  store i1 %v3_10254, i1* %cpsr_c.global-to-local, align 1
  %v8_10254 = icmp eq i32 %v1_10170, 21
  store i1 %v8_10254, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10254, label %dec_label_pc_1016c, label %dec_label_pc_1025c

dec_label_pc_1025c:                               ; preds = %bb301
  %v2_1025c = icmp ugt i32 %v1_10170, 27
  store i1 %v2_1025c, i1* %cpsr_c.global-to-local, align 1
  %v7_1025c = icmp eq i32 %v1_10170, 28
  store i1 %v7_1025c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1025c, label %dec_label_pc_1016c, label %bb302

bb302:                                            ; preds = %dec_label_pc_1025c
  %v3_10260 = icmp ugt i32 %v1_10170, 25
  store i1 %v3_10260, i1* %cpsr_c.global-to-local, align 1
  %v8_10260 = icmp eq i32 %v1_10170, 26
  store i1 %v8_10260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10260, label %dec_label_pc_1016c, label %dec_label_pc_10268

dec_label_pc_10268:                               ; preds = %bb302
  %v2_10268 = icmp ugt i32 %v1_10170, 29
  store i1 %v2_10268, i1* %cpsr_c.global-to-local, align 1
  %v7_10268 = icmp eq i32 %v1_10170, 30
  store i1 %v7_10268, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10268, label %dec_label_pc_1016c, label %bb303

bb303:                                            ; preds = %dec_label_pc_10268
  %v3_1026c = icmp ugt i32 %v1_10170, 28
  store i1 %v3_1026c, i1* %cpsr_c.global-to-local, align 1
  %v8_1026c = icmp eq i32 %v1_10170, 29
  store i1 %v8_1026c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1026c, label %dec_label_pc_1016c, label %dec_label_pc_10274

dec_label_pc_10274:                               ; preds = %bb303
  %v2_10274 = icmp ugt i32 %v1_10170, 54
  store i1 %v2_10274, i1* %cpsr_c.global-to-local, align 1
  %v7_10274 = icmp eq i32 %v1_10170, 55
  store i1 %v7_10274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10274, label %dec_label_pc_1016c, label %bb304

bb304:                                            ; preds = %dec_label_pc_10274
  %v3_10278 = icmp ugt i32 %v1_10170, 32
  store i1 %v3_10278, i1* %cpsr_c.global-to-local, align 1
  %v8_10278 = icmp eq i32 %v1_10170, 33
  store i1 %v8_10278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10278, label %dec_label_pc_1016c, label %dec_label_pc_10280

dec_label_pc_10280:                               ; preds = %bb304
  %v2_10280 = icmp ugt i32 %v1_10170, 214
  store i1 %v2_10280, i1* %cpsr_c.global-to-local, align 1
  %v7_10280 = icmp eq i32 %v1_10170, 215
  store i1 %v7_10280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10280, label %.thread35, label %bb305

bb305:                                            ; preds = %dec_label_pc_10280
  %v3_10284 = icmp ugt i32 %v1_10170, 213
  store i1 %v3_10284, i1* %cpsr_c.global-to-local, align 1
  %v8_10284 = icmp eq i32 %v1_10170, 214
  store i1 %v8_10284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10284, label %bb306, label %dec_label_pc_10294

.thread35:                                        ; preds = %dec_label_pc_10280
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1016c

bb306:                                            ; preds = %bb305
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1016c

dec_label_pc_10294:                               ; preds = %bb305
  store i32 0, i32* @r4, align 4
  %v5_102a0 = call i32 @llvm.bswap.i32(i32 %v0_1016c)
  store i32 %v5_102a0, i32* %r3.global-to-local, align 4
  %tmp307 = and i32 %v0_1016c, 65280
  %tmp308 = call i32 @llvm.bswap.i32(i32 %tmp307)
  %tmp309 = and i32 %v0_1016c, 16711680
  %tmp310 = call i32 @llvm.bswap.i32(i32 %tmp309)
  %v3_102ac = mul nuw i32 %v3_1018c, 16777216
  %v3_102b0 = udiv i32 %tmp308, 256
  %v4_102b4 = mul nuw nsw i32 %tmp310, 256
  %tmp311 = and i32 %v0_1016c, 32768
  %v3_102b8 = icmp ne i32 %tmp311, 0
  store i1 %v3_102b8, i1* %cpsr_c.global-to-local, align 1
  %v4_102b8 = udiv i32 %v5_102a0, 16777216
  store i32 ptrtoint (i8** @global_var_1dcc4.169 to i32), i32* @r0, align 4
  %v5_102b8 = or i32 %v4_102b8, %v3_102ac
  %v5_102b4 = or i32 %v5_102b8, %v4_102b4
  %v2_102c0 = or i32 %v5_102b4, %v3_102b0
  store i32 %v2_102c0, i32* %r2.global-to-local, align 4
  %v5_102c4 = trunc i32 %v4_102b8 to i8
  store i8 %v5_102c4, i8* @global_var_1dcd4.250, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1dcce.251 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1dccf.252 to i8*), align 4
  %v3_102d4 = call i32 @function_e498(i32 ptrtoint (i8** @global_var_1dcc4.169 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1dcc4.169 to i32), i32* %ip.global-to-local, align 4
  %sext9 = mul i32 %v3_102d4, 16777216
  %v1_102dc = sdiv i32 %sext9, 16777216
  store i32 %v1_102dc, i32* %r3.global-to-local, align 4
  %v2_102e0 = and i32 %v1_102dc, 128
  %v3_102e0 = icmp ne i32 %v2_102e0, 0
  store i1 %v3_102e0, i1* %cpsr_c.global-to-local, align 1
  %v4_102e0 = ashr i32 %sext9, 31
  store i32 %v4_102e0, i32* %r2.global-to-local, align 4
  %v1_102e4 = trunc i32 %v1_102dc to i8
  store i8 %v1_102e4, i8* bitcast (i32* @global_var_1dcce.251 to i8*), align 4
  %v1_102e8 = trunc i32 %v4_102e0 to i8
  store i8 %v1_102e8, i8* bitcast (i32* @global_var_1dccf.252 to i8*), align 4
  %v3_102ec = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_102ec, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_102f4 = call i32 @function_12834(i32 %v3_102ec, i32 10, i32 %v4_102e0, i32 %v1_102dc)
  store i32 %v4_102f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_102f8 = icmp eq i32 %v4_102f4, 0
  store i1 %v2_102f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102f8, label %.thread217, label %bb312

.thread217:                                       ; preds = %dec_label_pc_10294
  store i32 ptrtoint (i32* @global_var_1dcd8.173 to i32), i32* @lr, align 4
  br label %.thread45.thread88

bb312:                                            ; preds = %dec_label_pc_10294
  store i32 ptrtoint (i32* @global_var_1dcd8.173 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_10308 = load i32, i32* @r4, align 4
  %v2_10308 = trunc i32 %v1_10308 to i8
  store i8 %v2_10308, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1dcd8.173 to i32), i32 2) to i8*), align 2
  %v0_1030c.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1030c.pr.pre, label %.thread45.thread88, label %.thread42

.thread42:                                        ; preds = %bb312
  %v1_1030c = load i32, i32* %r3.global-to-local, align 4
  %v2_1030c = trunc i32 %v1_1030c to i8
  %v3_1030c = load i32, i32* %r0.global-to-local, align 4
  %v4_1030c = add i32 %v3_1030c, 3
  %v5_1030c = inttoptr i32 %v4_1030c to i8*
  store i8 %v2_1030c, i8* %v5_1030c, align 1
  %v0_10314.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1dcc4.169 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_10314.pr.pr, label %.thread48, label %.thread50

.thread45.thread88:                               ; preds = %bb312, %.thread217
  store i32 ptrtoint (i8** @global_var_1dcc4.169 to i32), i32* %r0.global-to-local, align 4
  br label %.thread48

.thread48:                                        ; preds = %.thread42, %.thread45.thread88
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_1031c = load i32, i32* @lr, align 4
  %v4_1031c = add i32 %v3_1031c, 2
  %v5_1031c = inttoptr i32 %v4_1031c to i8*
  store i8 9, i8* %v5_1031c, align 1
  %v0_10320.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10320.pr.pr, label %bb313, label %.thread50

bb313:                                            ; preds = %.thread48
  %v1_10320 = load i32, i32* %r2.global-to-local, align 4
  %v2_10320 = trunc i32 %v1_10320 to i8
  %v3_10320 = load i32, i32* @lr, align 4
  %v4_10320 = add i32 %v3_10320, 3
  %v5_10320 = inttoptr i32 %v4_10320 to i8*
  store i8 %v2_10320, i8* %v5_10320, align 1
  br label %.thread50

.thread50:                                        ; preds = %.thread42, %.thread48, %bb313
  %v4_10324 = load i8, i8* @global_var_1dcd4.250, align 1
  %v5_10324 = sext i8 %v4_10324 to i32
  store i32 %v5_10324, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dcd8.173 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dcd8.173 to i32), i32* @r1, align 4
  store i8 %v4_10324, i8* @global_var_1dcdc.253, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_1033c = load i32, i32* %sl.global-to-local, align 4
  %v1_1033c = trunc i32 %v0_1033c to i8
  store i8 %v1_1033c, i8* bitcast (i32* @global_var_1dce8.254 to i8*), align 4
  store i8 %v1_1033c, i8* bitcast (i32* @global_var_1dce9.255 to i8*), align 4
  %v5_10344 = call i32 @function_e4f4(i32 ptrtoint (i8** @global_var_1dcc4.169 to i32), i32 ptrtoint (i32* @global_var_1dcd8.173 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_10344, 16777216
  %v1_1034c = sdiv i32 %sext, 16777216
  %v3_10354 = ashr i32 %sext, 31
  %v2_10358 = load i32, i32* @global_var_1dcd8.173, align 4
  %v1_10360 = trunc i32 %v3_10354 to i8
  store i8 %v1_10360, i8* bitcast (i32* @global_var_1dce9.255 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_10374 = load i8, i8* @global_var_1dcd4.250, align 1
  %v4_10374 = sext i8 %v3_10374 to i32
  store i32 %v4_10374, i32* @r4, align 4
  %v2_10378 = load i32, i32* @global_var_1dd58.167, align 4
  store i32 %v2_10378, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dcd8.173 to i32), i32* %ip.global-to-local, align 4
  %v1_10388 = and i32 %v2_10358, 8388608
  %v2_10388 = icmp ne i32 %v1_10388, 0
  store i1 %v2_10388, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1dcc4.169 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_1039c = trunc i32 %v1_1034c to i8
  store i8 %v1_1039c, i8* bitcast (i32* @global_var_1dce8.254 to i8*), align 4
  store i32 %v2_103a4, i32* %lr.global-to-local, align 4
  %v8_103b4 = call i32 @function_13268(i32 %v2_10378, i32* bitcast (i8** @global_var_1dcc4.169 to i32*), i32 40, i32 16384, i32 %v2_103a4, i32 16)
  store i32 %v8_103b4, i32* %r0.global-to-local, align 4
  %v3_103b8 = load i32, i32* %stack_var_-48, align 4
  %v1_103bc = add i32 %v3_103b8, 1
  store i32 %v1_103bc, i32* %r3.global-to-local, align 4
  %v3_103c0 = icmp ugt i32 %v1_103bc, 383
  store i1 %v3_103c0, i1* %cpsr_c.global-to-local, align 1
  %v8_103c0 = icmp eq i32 %v1_103bc, 384
  store i1 %v8_103c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_103bc, i32* %stack_var_-48, align 4
  %v5_103c8 = icmp slt i32 %v1_103bc, 384
  br i1 %v5_103c8, label %.thread50.dec_label_pc_1013c_crit_edge, label %dec_label_pc_103cc

.thread50.dec_label_pc_1013c_crit_edge:           ; preds = %.thread50
  %v0_1013c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_1013c

dec_label_pc_103cc:                               ; preds = %.thread50
  %v0_103cc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_103cc, i32* @fp, align 4
  br label %dec_label_pc_103d0

dec_label_pc_103d0:                               ; preds = %dec_label_pc_10120, %dec_label_pc_103cc
  %v0_103d0 = call i32 @function_12f88()
  store i32 %v0_103d0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v0_103d0, i32* @sb, align 4
  %v6_10408 = inttoptr i32 %v0_10440 to i32*
  %v1_10430 = add i32 %v0_10440, 16
  %v2_10430 = inttoptr i32 %v1_10430 to i32*
  %v4_1044c = ptrtoint i8* %stack_var_-1876.0 to i32
  %v1_10454 = add i32 %v4_1044c, 1
  %v2_10454 = inttoptr i32 %v1_10454 to i8*
  %v1_10478 = add i32 %v4_1044c, 2
  %v2_10478 = inttoptr i32 %v1_10478 to i8*
  %v1_1047c = add i32 %v4_1044c, 3
  %v2_1047c = inttoptr i32 %v1_1047c to i8*
  %v4_10480 = sext i8 %stack_var_-1868.0 to i32
  %v1_10494 = add i32 %v4_1044c, 13
  %v2_10494 = inttoptr i32 %v1_10494 to i8*
  %v1_10560 = bitcast i8* %stack_var_-1876.0 to i32*
  %v1_10440 = add i32 %v0_10440, 9
  %v2_10440 = inttoptr i32 %v1_10440 to i8*
  %v1_104b8 = add i32 %v4_1044c, 8
  %v2_104b8 = inttoptr i32 %v1_104b8 to i32*
  %v1_104f8 = add i32 %v0_10440, 12
  %v2_104f8 = inttoptr i32 %v1_104f8 to i32*
  br label %dec_label_pc_103dc

dec_label_pc_103dc:                               ; preds = %dec_label_pc_104b8, %dec_label_pc_104b0, %dec_label_pc_104a8, %dec_label_pc_10474, %dec_label_pc_10464, %dec_label_pc_10440, %dec_label_pc_10428, %dec_label_pc_104a0, %dec_label_pc_10490, %dec_label_pc_10420, %dec_label_pc_10558, %dec_label_pc_103d0
  %v1_103e0 = phi i32 [ %v0_103d0, %dec_label_pc_103d0 ], [ %v1_103e0.pre.pre, %dec_label_pc_10558 ], [ %v0_10414, %dec_label_pc_10420 ], [ %v0_10414, %dec_label_pc_10490 ], [ %v0_10414, %dec_label_pc_104a0 ], [ %v0_10414, %dec_label_pc_10428 ], [ %v0_10414, %dec_label_pc_10440 ], [ %v0_10414, %dec_label_pc_10464 ], [ %v0_10414, %dec_label_pc_10474 ], [ %v0_10414, %dec_label_pc_104a8 ], [ %v0_10414, %dec_label_pc_104b0 ], [ %v0_10414, %dec_label_pc_104b8 ]
  %v2_103e0 = inttoptr i32 %v1_103e0 to i32*
  store i32 0, i32* %v2_103e0, align 4
  %v2_103ec = load i32, i32* @global_var_1dd58.167, align 4
  store i32 %v2_103ec, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_10440, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_10408 = call i32 @function_13208(i32 %v2_103ec, i32* %v6_10408, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_10408, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1040c = icmp eq i32 %v7_10408, 0
  store i1 %v2_1040c, i1* %cpsr_z.global-to-local, align 1
  %tmp314 = icmp slt i32 %v7_10408, 1
  br i1 %tmp314, label %dec_label_pc_1058c, label %dec_label_pc_10414

dec_label_pc_10414:                               ; preds = %dec_label_pc_103dc
  %v0_10414 = load i32, i32* @sb, align 4
  %v1_10414 = inttoptr i32 %v0_10414 to i32*
  %v2_10414 = load i32, i32* %v1_10414, align 4
  store i32 %v2_10414, i32* %r3.global-to-local, align 4
  %v2_10418 = icmp ugt i32 %v2_10414, 10
  store i1 %v2_10418, i1* %cpsr_c.global-to-local, align 1
  %v7_10418 = icmp eq i32 %v2_10414, 11
  store i1 %v7_10418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10418, label %dec_label_pc_1058c, label %dec_label_pc_10420

dec_label_pc_10420:                               ; preds = %dec_label_pc_10414
  %v2_10420 = icmp ugt i32 %v7_10408, 38
  store i1 %v2_10420, i1* %cpsr_c.global-to-local, align 1
  %v7_10420 = icmp eq i32 %v7_10408, 39
  store i1 %v7_10420, i1* %cpsr_z.global-to-local, align 1
  %v2_10424 = xor i1 %v2_10420, true
  %v3_10424 = or i1 %v7_10420, %v2_10424
  br i1 %v3_10424, label %dec_label_pc_103dc, label %dec_label_pc_10428

dec_label_pc_10428:                               ; preds = %dec_label_pc_10420
  store i32 %v0_10440, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dd3c.81 to i32), i32* %r0.global-to-local, align 4
  %v3_10430 = load i32, i32* %v2_10430, align 4
  store i32 %v3_10430, i32* %r2.global-to-local, align 4
  %v2_10434 = load i32, i32* @global_var_1dd3c.81, align 4
  store i32 %v2_10434, i32* %r3.global-to-local, align 4
  %v3_10438 = icmp uge i32 %v3_10430, %v2_10434
  store i1 %v3_10438, i1* %cpsr_c.global-to-local, align 1
  %v9_10438 = icmp eq i32 %v3_10430, %v2_10434
  store i1 %v9_10438, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10438, label %dec_label_pc_10440, label %dec_label_pc_103dc

dec_label_pc_10440:                               ; preds = %dec_label_pc_10428
  %v3_10440 = load i8, i8* %v2_10440, align 1
  %v4_10440 = zext i8 %v3_10440 to i32
  store i32 %v4_10440, i32* %r3.global-to-local, align 4
  %v2_10444 = icmp ugt i8 %v3_10440, 5
  store i1 %v2_10444, i1* %cpsr_c.global-to-local, align 1
  %v7_10444 = icmp eq i8 %v3_10440, 6
  store i1 %v7_10444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10444, label %dec_label_pc_1044c, label %dec_label_pc_103dc

dec_label_pc_1044c:                               ; preds = %dec_label_pc_10440
  store i32 %v4_1044c, i32* %r1.global-to-local, align 4
  %v2_10450 = load i8, i8* %stack_var_-1876.0, align 1
  %v3_10450 = zext i8 %v2_10450 to i32
  store i32 %v3_10450, i32* %r2.global-to-local, align 4
  %v3_10454 = load i8, i8* %v2_10454, align 1
  %v4_10454 = zext i8 %v3_10454 to i32
  store i32 %v4_10454, i32* %r3.global-to-local, align 4
  %v4_10458 = mul nuw nsw i32 %v4_10454, 256
  %v5_10458 = or i32 %v4_10458, %v3_10450
  store i32 %v5_10458, i32* %r2.global-to-local, align 4
  %v2_1045c = icmp ugt i32 %v5_10458, 5887
  store i1 %v2_1045c, i1* %cpsr_c.global-to-local, align 1
  %v7_1045c = icmp eq i32 %v5_10458, 5888
  store i1 %v7_1045c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1045c, label %dec_label_pc_10474, label %dec_label_pc_10464

dec_label_pc_10464:                               ; preds = %dec_label_pc_1044c
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_1046c = icmp ugt i32 %v5_10458, 4872
  store i1 %v3_1046c, i1* %cpsr_c.global-to-local, align 1
  %v9_1046c = icmp eq i32 %v5_10458, 4873
  store i1 %v9_1046c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1046c, label %dec_label_pc_10474, label %dec_label_pc_103dc

dec_label_pc_10474:                               ; preds = %dec_label_pc_10464, %dec_label_pc_1044c
  store i32 %v4_1044c, i32* %r2.global-to-local, align 4
  %v3_10478 = load i8, i8* %v2_10478, align 1
  %v4_10478 = zext i8 %v3_10478 to i32
  store i32 %v4_10478, i32* %r3.global-to-local, align 4
  %v3_1047c = load i8, i8* %v2_1047c, align 1
  %v4_1047c = zext i8 %v3_1047c to i32
  store i32 %v4_1047c, i32* %r2.global-to-local, align 4
  store i32 %v4_10480, i32* %ip.global-to-local, align 4
  %v4_10484 = mul nuw nsw i32 %v4_1047c, 256
  %v5_10484 = or i32 %v4_10484, %v4_10478
  store i32 %v5_10484, i32* %r3.global-to-local, align 4
  %v3_10488 = icmp uge i32 %v5_10484, %v4_10480
  store i1 %v3_10488, i1* %cpsr_c.global-to-local, align 1
  %v9_10488 = icmp eq i32 %v5_10484, %v4_10480
  store i1 %v9_10488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10488, label %dec_label_pc_10490, label %dec_label_pc_103dc

dec_label_pc_10490:                               ; preds = %dec_label_pc_10474
  store i32 %v4_1044c, i32* %lr.global-to-local, align 4
  %v3_10494 = load i8, i8* %v2_10494, align 1
  %v4_10494 = zext i8 %v3_10494 to i32
  store i32 %v4_10494, i32* %r3.global-to-local, align 4
  %v1_10498 = and i32 %v4_10494, 2
  %v2_10498 = icmp eq i32 %v1_10498, 0
  store i1 %v2_10498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10498, label %dec_label_pc_103dc, label %dec_label_pc_104a0

dec_label_pc_104a0:                               ; preds = %dec_label_pc_10490
  %v1_104a0 = and i32 %v4_10494, 16
  %v2_104a0 = icmp eq i32 %v1_104a0, 0
  store i1 %v2_104a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104a0, label %dec_label_pc_103dc, label %dec_label_pc_104a8

dec_label_pc_104a8:                               ; preds = %dec_label_pc_104a0
  %v1_104a8 = and i32 %v4_10494, 4
  %v2_104a8 = icmp eq i32 %v1_104a8, 0
  store i1 %v2_104a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104a8, label %dec_label_pc_104b0, label %dec_label_pc_103dc

dec_label_pc_104b0:                               ; preds = %dec_label_pc_104a8
  %tmp461 = urem i8 %v3_10494, 2
  %v2_104b0 = icmp eq i8 %tmp461, 0
  store i1 %v2_104b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104b0, label %dec_label_pc_104b8, label %dec_label_pc_103dc

dec_label_pc_104b8:                               ; preds = %dec_label_pc_104b0
  %v3_104b8 = load i32, i32* %v2_104b8, align 4
  %v2_104d4 = call i32 @llvm.bswap.i32(i32 %v3_104b8)
  %v1_104d8 = add i32 %v2_104d4, -1
  %v1_104dc = udiv i32 %v1_104d8, 256
  %v3_104e0 = and i32 %v1_104dc, 65280
  %v1_104e4 = and i32 %v1_104d8, 65280
  store i32 %v1_104e4, i32* %r2.global-to-local, align 4
  %v3_104e8 = mul i32 %v1_104d8, 16777216
  %v4_104ec = udiv i32 %v1_104d8, 16777216
  %v5_104ec = or i32 %v3_104e0, %v4_104ec
  store i32 %v5_104ec, i32* %r1.global-to-local, align 4
  store i32 %v0_10440, i32* %r3.global-to-local, align 4
  %v4_104f4 = mul nuw nsw i32 %v1_104e4, 256
  %v5_104f4 = or i32 %v4_104f4, %v3_104e8
  store i32 %v5_104f4, i32* %r0.global-to-local, align 4
  %v3_104f8 = load i32, i32* %v2_104f8, align 4
  store i32 %v3_104f8, i32* %r2.global-to-local, align 4
  %v2_104fc = call i32 @llvm.bswap.i32(i32 %v1_104d8)
  store i32 %v2_104fc, i32* %ip.global-to-local, align 4
  %v3_10500 = icmp uge i32 %v2_104fc, %v3_104f8
  store i1 %v3_10500, i1* %cpsr_c.global-to-local, align 1
  %v9_10500 = icmp eq i32 %v2_104fc, %v3_104f8
  store i1 %v9_10500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10500, label %dec_label_pc_10508, label %dec_label_pc_103dc

dec_label_pc_10508:                               ; preds = %dec_label_pc_104b8
  %v0_10508 = load i32, i32* @r4, align 4
  %v2_10508 = icmp ugt i32 %v0_10508, 254
  store i1 %v2_10508, i1* %cpsr_c.global-to-local, align 1
  %v7_10508 = icmp eq i32 %v0_10508, 255
  store i1 %v7_10508, i1* %cpsr_z.global-to-local, align 1
  %v8_1050c = icmp sgt i32 %v0_10508, 255
  br i1 %v8_1050c, label %dec_label_pc_1058c, label %dec_label_pc_10510

dec_label_pc_10510:                               ; preds = %dec_label_pc_10508
  store i32 ptrtoint (i32* @global_var_1dd54.165 to i32), i32* %lr.global-to-local, align 4
  %v3_10514 = mul i32 %v0_10508, 256
  store i32 %v3_10514, i32* %r2.global-to-local, align 4
  %v2_10518 = load i32, i32* @global_var_1dd54.165, align 4
  store i32 %v2_10518, i32* %r1.global-to-local, align 4
  %v2_10520 = mul i32 %v0_10508, 288
  store i32 %v2_10520, i32* %r3.global-to-local, align 4
  %v2_10524 = add i32 %v2_10518, %v2_10520
  store i32 %v2_10524, i32* @r0, align 4
  %v1_10528 = add i32 %v2_10524, 12
  %v2_10528 = inttoptr i32 %v1_10528 to i32*
  %v3_10528 = load i32, i32* %v2_10528, align 4
  store i32 %v3_10528, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1052c = icmp eq i32 %v3_10528, 0
  store i1 %v2_1052c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1052c, label %dec_label_pc_10558, label %dec_label_pc_10538.preheader

dec_label_pc_10538.preheader:                     ; preds = %dec_label_pc_10510
  %v2_10530 = add i32 %v2_10524, 288
  store i32 %v2_10530, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10538

dec_label_pc_10538:                               ; preds = %dec_label_pc_10538.preheader, %dec_label_pc_10544
  %v0_10544 = phi i32 [ %v2_10530, %dec_label_pc_10538.preheader ], [ %v1_10550, %dec_label_pc_10544 ]
  %v0_10538 = phi i32 [ %v0_10508, %dec_label_pc_10538.preheader ], [ %v1_10538, %dec_label_pc_10544 ]
  %v1_10538 = add i32 %v0_10538, 1
  store i32 %v1_10538, i32* @r4, align 4
  %v7_1053c = icmp eq i32 %v1_10538, 256
  br i1 %v7_1053c, label %dec_label_pc_1058c.loopexit, label %dec_label_pc_10544

dec_label_pc_10544:                               ; preds = %dec_label_pc_10538
  store i32 %v0_10544, i32* @r0, align 4
  %v1_10548 = add i32 %v0_10544, 12
  %v2_10548 = inttoptr i32 %v1_10548 to i32*
  %v3_10548 = load i32, i32* %v2_10548, align 4
  %v2_1054c = icmp eq i32 %v3_10548, 0
  %v1_10550 = add i32 %v0_10544, 288
  store i32 %v1_10550, i32* %r3.global-to-local, align 4
  br i1 %v2_1054c, label %dec_label_pc_10558.loopexit, label %dec_label_pc_10538

dec_label_pc_10558.loopexit:                      ; preds = %dec_label_pc_10544
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10558

dec_label_pc_10558:                               ; preds = %dec_label_pc_10558.loopexit, %dec_label_pc_10510
  %v1_10558 = phi i32 [ %v0_10544, %dec_label_pc_10558.loopexit ], [ %v2_10524, %dec_label_pc_10510 ]
  %v2_10558 = add i32 %v1_10558, 16
  %v3_10558 = inttoptr i32 %v2_10558 to i32*
  store i32 %v3_104f8, i32* %v3_10558, align 4
  store i32 %v4_1044c, i32* %r1.global-to-local, align 4
  %v2_10560 = load i32, i32* %v1_10560, align 4
  store i32 %v2_10560, i32* %r2.global-to-local, align 4
  %v1_10564 = and i32 %v2_10560, 128
  %v2_10564 = icmp ne i32 %v1_10564, 0
  store i1 %v2_10564, i1* %cpsr_c.global-to-local, align 1
  %v3_10564 = sdiv i32 %v2_10560, 256
  store i32 %v3_10564, i32* %r3.global-to-local, align 4
  %v1_10568 = trunc i32 %v3_10564 to i8
  %v2_10568 = load i32, i32* @r0, align 4
  %v3_10568 = add i32 %v2_10568, 21
  %v4_10568 = inttoptr i32 %v3_10568 to i8*
  store i8 %v1_10568, i8* %v4_10568, align 1
  %v0_1056c = load i32, i32* %r2.global-to-local, align 4
  %v1_1056c = trunc i32 %v0_1056c to i8
  %v2_1056c = load i32, i32* @r0, align 4
  %v3_1056c = add i32 %v2_1056c, 20
  %v4_1056c = inttoptr i32 %v3_1056c to i8*
  store i8 %v1_1056c, i8* %v4_1056c, align 1
  %v0_10570 = call i32 @function_fa58()
  store i32 %v0_10570, i32* %r0.global-to-local, align 4
  %v1_103e0.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_103dc

dec_label_pc_10578:                               ; preds = %dec_label_pc_fdc4
  store i32 ptrtoint (i32* @global_var_1dd58.167 to i32), i32* %r2.global-to-local, align 4
  %v2_1057c = load i32, i32* @global_var_1dd58.167, align 4
  store i32 %v2_1057c, i32* %r0.global-to-local, align 4
  %v1_10580 = call i32 @function_129e0(i32 %v2_1057c)
  store i32 %v1_10580, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10584

dec_label_pc_10584:                               ; preds = %dec_label_pc_fd9c, %dec_label_pc_10578
  %v0_10584 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10584, i32* %r0.global-to-local, align 4
  %v1_10588 = call i32 @function_13ba8(i32 %v0_10584)
  store i32 %v1_10588, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1058c

dec_label_pc_1058c.loopexit:                      ; preds = %dec_label_pc_10538
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1058c

dec_label_pc_1058c:                               ; preds = %dec_label_pc_10508, %dec_label_pc_10414, %dec_label_pc_103dc, %dec_label_pc_1058c.loopexit, %dec_label_pc_10584
  %stack_var_-1872.1 = phi i32 [ %tmp249, %dec_label_pc_10584 ], [ %v0_10440, %dec_label_pc_1058c.loopexit ], [ %v0_10440, %dec_label_pc_103dc ], [ %v0_10440, %dec_label_pc_10414 ], [ %v0_10440, %dec_label_pc_10508 ]
  %stack_var_-1868.1 = phi i8 [ %tmp250, %dec_label_pc_10584 ], [ %stack_var_-1868.0, %dec_label_pc_1058c.loopexit ], [ %stack_var_-1868.0, %dec_label_pc_103dc ], [ %stack_var_-1868.0, %dec_label_pc_10414 ], [ %stack_var_-1868.0, %dec_label_pc_10508 ]
  %stack_var_-1876.1 = phi i8* [ %tmp278, %dec_label_pc_10584 ], [ %stack_var_-1876.0, %dec_label_pc_1058c.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_103dc ], [ %stack_var_-1876.0, %dec_label_pc_10414 ], [ %stack_var_-1876.0, %dec_label_pc_10508 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_105a0414 = load i32, i32* @sp, align 4
  %v3_105a0415 = add i32 %v2_105a0414, 1664
  %v4_105a0416 = inttoptr i32 %v3_105a0415 to i32*
  store i32 0, i32* %v4_105a0416, align 4
  br label %dec_label_pc_10594.dec_label_pc_10594_crit_edge

dec_label_pc_10594.dec_label_pc_10594_crit_edge:  ; preds = %dec_label_pc_1058c, %dec_label_pc_10594.dec_label_pc_10594_crit_edge
  %v0_10594.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_105a0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10594 = add i32 %v0_10594.pre, 1664
  store i32 %v1_10594, i32* %ip.global-to-local, align 4
  %v1_10598 = add i32 %v0_10594.pre, 4
  store i32 %v1_10598, i32* %r3.global-to-local, align 4
  %v7_1059c = icmp eq i32 %v1_10598, 128
  %v2_105a0 = load i32, i32* @sp, align 4
  %v3_105a0 = add i32 %v2_105a0, %v1_10594
  %v4_105a0 = inttoptr i32 %v3_105a0 to i32*
  store i32 %v0_105a0.pre, i32* %v4_105a0, align 4
  br i1 %v7_1059c, label %dec_label_pc_105a8, label %dec_label_pc_10594.dec_label_pc_10594_crit_edge

dec_label_pc_105a8:                               ; preds = %dec_label_pc_10594.dec_label_pc_10594_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_105a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_105ac408 = add i32 %v0_105a8, 1536
  store i32 %v1_105ac408, i32* %lr.global-to-local, align 4
  %v1_105b0409 = add i32 %v0_105a8, 4
  store i32 %v1_105b0409, i32* %r3.global-to-local, align 4
  %v7_105b4410 = icmp eq i32 %v1_105b0409, 128
  %v2_105b8411 = load i32, i32* @sp, align 4
  %v3_105b8412 = add i32 %v2_105b8411, %v1_105ac408
  %v4_105b8413 = inttoptr i32 %v3_105b8412 to i32*
  store i32 %v0_105a8, i32* %v4_105b8413, align 4
  br i1 %v7_105b4410, label %dec_label_pc_105c0, label %dec_label_pc_105ac.dec_label_pc_105ac_crit_edge

dec_label_pc_105ac.dec_label_pc_105ac_crit_edge:  ; preds = %dec_label_pc_105a8, %dec_label_pc_105ac.dec_label_pc_105ac_crit_edge
  %v0_105ac.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_105b8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_105ac = add i32 %v0_105ac.pre, 1536
  store i32 %v1_105ac, i32* %lr.global-to-local, align 4
  %v1_105b0 = add i32 %v0_105ac.pre, 4
  store i32 %v1_105b0, i32* %r3.global-to-local, align 4
  %v7_105b4 = icmp eq i32 %v1_105b0, 128
  %v2_105b8 = load i32, i32* @sp, align 4
  %v3_105b8 = add i32 %v2_105b8, %v1_105ac
  %v4_105b8 = inttoptr i32 %v3_105b8 to i32*
  store i32 %v0_105b8.pre, i32* %v4_105b8, align 4
  br i1 %v7_105b4, label %dec_label_pc_105c0, label %dec_label_pc_105ac.dec_label_pc_105ac_crit_edge

dec_label_pc_105c0:                               ; preds = %dec_label_pc_105ac.dec_label_pc_105ac_crit_edge, %dec_label_pc_105a8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_105c0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_105c0, i32* @r6, align 4
  store i32 %v0_105c0, i32* @r5, align 4
  store i32 %v0_105c0, i32* @r7, align 4
  store i32 %v0_105c0, i32* %stack_var_-48, align 4
  %v2_10684 = ptrtoint i32* %stack_var_-36 to i32
  %v2_106fc = ptrtoint i32* %stack_var_-76 to i32
  %v2_10700 = ptrtoint i32* %stack_var_-348 to i32
  %v2_10708 = ptrtoint i32* %stack_var_-64 to i32
  %v2_1070c = ptrtoint i32* %stack_var_-220 to i32
  %v2_110cc = ptrtoint i32* %stack_var_-41 to i32
  %v2_110dc = ptrtoint i32* %stack_var_-73 to i32
  %v2_108b4 = ptrtoint i8* %stack_var_-52 to i32
  %v2_108bc = bitcast i8* %stack_var_-52 to i32*
  %v2_108c8 = ptrtoint i32* %stack_var_-56 to i32
  %v2_113a8 = ptrtoint i32* %stack_var_-92 to i32
  %v3_113b0 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_1063c

dec_label_pc_105d4:                               ; preds = %dec_label_pc_10664, %dec_label_pc_1063c
  %storemerge232 = phi i32 [ 30, %dec_label_pc_1063c ], [ 5, %dec_label_pc_10664 ]
  store i32 %storemerge232, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dcf4.153 to i32), i32* %r2.global-to-local, align 4
  %v2_105d8 = load i32, i32* @global_var_1dcf4.153, align 4
  store i32 %v2_105d8, i32* %r3.global-to-local, align 4
  %v1_105dc = add i32 %v2_10650, 8
  %v2_105dc = inttoptr i32 %v1_105dc to i32*
  %v3_105dc = load i32, i32* %v2_105dc, align 4
  store i32 %v3_105dc, i32* %r2.global-to-local, align 4
  %v2_105e0 = sub i32 %v2_105d8, %v3_105dc
  store i32 %v2_105e0, i32* %r3.global-to-local, align 4
  %v3_105e4 = icmp uge i32 %v2_105e0, %storemerge232
  store i1 %v3_105e4, i1* %cpsr_c.global-to-local, align 1
  %v9_105e4 = icmp eq i32 %v2_105e0, %storemerge232
  store i1 %v9_105e4, i1* %cpsr_z.global-to-local, align 1
  %v2_105e8 = xor i1 %v9_105e4, true
  %v3_105e8 = and i1 %v3_105e4, %v2_105e8
  br i1 %v3_105e8, label %dec_label_pc_106a8, label %dec_label_pc_105ec

dec_label_pc_105ec:                               ; preds = %dec_label_pc_105d4
  store i1 %v2_10658, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_10658, i1* %cpsr_z.global-to-local, align 1
  %v1_10674 = add i32 %v2_10650, 4
  %v2_10674 = inttoptr i32 %v1_10674 to i32*
  %v3_10674 = load i32, i32* %v2_10674, align 4
  br i1 %v7_10658, label %dec_label_pc_10674, label %dec_label_pc_105f4

dec_label_pc_105f4:                               ; preds = %dec_label_pc_105ec
  store i32 %v3_10674, i32* %ip.global-to-local, align 4
  %v3_105fc = udiv i32 %v3_10674, 32
  store i32 %v2_10684, i32* %r0.global-to-local, align 4
  %v3_10604 = mul nuw nsw i32 %v3_105fc, 4
  %v2_10608 = add i32 %v3_10604, %v2_10684
  store i32 %v2_10608, i32* %r3.global-to-local, align 4
  %v1_1060c = add i32 %v2_10608, -184
  %v2_1060c = inttoptr i32 %v1_1060c to i32*
  %v3_1060c = load i32, i32* %v2_1060c, align 4
  %v1_10610 = urem i32 %v3_10674, 32
  store i32 %v1_10610, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_10618 = shl i32 1, %v1_10610
  %v8_10618 = or i32 %v3_1060c, %v7_10618
  store i32 %v8_10618, i32* %r2.global-to-local, align 4
  store i32 %v8_10618, i32* %v2_1060c, align 4
  %v0_10620 = load i32, i32* @r6, align 4
  %v1_10620 = load i32, i32* %ip.global-to-local, align 4
  %v2_10620 = sub i32 %v0_10620, %v1_10620
  %v3_10620 = icmp uge i32 %v0_10620, %v1_10620
  store i1 %v3_10620, i1* %cpsr_c.global-to-local, align 1
  %v4_10620 = xor i32 %v1_10620, %v0_10620
  %v5_10620 = xor i32 %v2_10620, %v0_10620
  %v6_10620 = and i32 %v5_10620, %v4_10620
  %v7_10620 = icmp slt i32 %v6_10620, 0
  %v8_10620 = icmp slt i32 %v2_10620, 0
  %v9_10620 = icmp eq i32 %v0_10620, %v1_10620
  store i1 %v9_10620, i1* %cpsr_z.global-to-local, align 1
  %v2_10624 = xor i1 %v8_10620, %v7_10620
  br i1 %v2_10624, label %bb316, label %bb317

bb316:                                            ; preds = %dec_label_pc_105f4
  store i32 %v1_10620, i32* @r6, align 4
  br label %bb317

bb317:                                            ; preds = %dec_label_pc_10664, %dec_label_pc_113cc, %dec_label_pc_106dc, %bb319, %dec_label_pc_105f4, %bb316
  %v3_10628 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10628, i32* %r3.global-to-local, align 4
  %v1_1062c = add i32 %v3_10628, 1
  store i32 %v1_1062c, i32* %r2.global-to-local, align 4
  %v2_10630 = icmp ugt i32 %v1_1062c, 254
  store i1 %v2_10630, i1* %cpsr_c.global-to-local, align 1
  %v7_10630 = icmp eq i32 %v1_1062c, 255
  store i1 %v7_10630, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_1062c, i32* %stack_var_-48, align 4
  %v8_10638 = icmp sgt i32 %v1_1062c, 255
  br i1 %v8_10638, label %dec_label_pc_106e8, label %dec_label_pc_1063c

dec_label_pc_1063c:                               ; preds = %bb317, %dec_label_pc_105c0
  %v0_10648 = phi i32 [ %v1_1062c, %bb317 ], [ %v0_105c0, %dec_label_pc_105c0 ]
  store i32 ptrtoint (i32* @global_var_1dd54.165 to i32), i32* %r0.global-to-local, align 4
  %v3_10640 = mul i32 %v0_10648, 256
  store i32 %v3_10640, i32* %r3.global-to-local, align 4
  %v2_10644 = load i32, i32* @global_var_1dd54.165, align 4
  store i32 %v2_10644, i32* %r1.global-to-local, align 4
  %v2_1064c = mul i32 %v0_10648, 288
  store i32 %v2_1064c, i32* %r2.global-to-local, align 4
  %v2_10650 = add i32 %v2_10644, %v2_1064c
  store i32 %v2_10650, i32* @r4, align 4
  %v1_10654 = add i32 %v2_10650, 12
  %v2_10654 = inttoptr i32 %v1_10654 to i32*
  %v3_10654 = load i32, i32* %v2_10654, align 4
  store i32 %v3_10654, i32* %ip.global-to-local, align 4
  %v2_10658 = icmp ne i32 %v3_10654, 0
  store i1 %v2_10658, i1* %cpsr_c.global-to-local, align 1
  %v7_10658 = icmp eq i32 %v3_10654, 1
  store i1 %v7_10658, i1* %cpsr_z.global-to-local, align 1
  %v2_1065c = xor i1 %v7_10658, true
  %v3_1065c = and i1 %v2_10658, %v2_1065c
  br i1 %v3_1065c, label %dec_label_pc_105d4, label %dec_label_pc_10664

dec_label_pc_10664:                               ; preds = %dec_label_pc_1063c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10664 = icmp eq i32 %v3_10654, 0
  store i1 %v2_10664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10664, label %bb317, label %dec_label_pc_105d4

dec_label_pc_10674:                               ; preds = %dec_label_pc_105ec
  store i32 %v3_10674, i32* %r0.global-to-local, align 4
  %v3_1067c = udiv i32 %v3_10674, 32
  %v3_10680 = mul nuw nsw i32 %v3_1067c, 4
  store i32 %v2_10684, i32* %lr.global-to-local, align 4
  %v2_10688 = add i32 %v3_10680, %v2_10684
  store i32 %v2_10688, i32* %r3.global-to-local, align 4
  %v1_1068c = add i32 %v2_10688, -312
  %v2_1068c = inttoptr i32 %v1_1068c to i32*
  %v3_1068c = load i32, i32* %v2_1068c, align 4
  %v1_10690 = urem i32 %v3_10674, 32
  store i32 %v1_10690, i32* %r1.global-to-local, align 4
  %v7_10694 = shl i32 1, %v1_10690
  %v8_10694 = or i32 %v3_1068c, %v7_10694
  store i32 %v8_10694, i32* %r2.global-to-local, align 4
  %v0_10698 = load i32, i32* @r5, align 4
  %v2_10698 = sub i32 %v0_10698, %v3_10674
  %v3_10698 = icmp uge i32 %v0_10698, %v3_10674
  store i1 %v3_10698, i1* %cpsr_c.global-to-local, align 1
  %v4_10698 = xor i32 %v0_10698, %v3_10674
  %v5_10698 = xor i32 %v2_10698, %v0_10698
  %v6_10698 = and i32 %v5_10698, %v4_10698
  %v7_10698 = icmp slt i32 %v6_10698, 0
  %v8_10698 = icmp slt i32 %v2_10698, 0
  %v9_10698 = icmp eq i32 %v0_10698, %v3_10674
  store i1 %v9_10698, i1* %cpsr_z.global-to-local, align 1
  %v2_1069c = xor i1 %v8_10698, %v7_10698
  br i1 %v2_1069c, label %bb318, label %bb319

bb318:                                            ; preds = %dec_label_pc_10674
  store i32 %v3_10674, i32* @r5, align 4
  br label %bb319

bb319:                                            ; preds = %dec_label_pc_10674, %bb318
  store i32 %v8_10694, i32* %v2_1068c, align 4
  br label %bb317

dec_label_pc_106a8:                               ; preds = %dec_label_pc_105d4
  %v1_106a8 = add i32 %v2_10650, 4
  %v2_106a8 = inttoptr i32 %v1_106a8 to i32*
  %v3_106a8 = load i32, i32* %v2_106a8, align 4
  store i32 %v3_106a8, i32* %r0.global-to-local, align 4
  %v1_106ac = call i32 @function_129e0(i32 %v3_106a8)
  store i32 %v1_106ac, i32* %r0.global-to-local, align 4
  %v0_106b0 = load i32, i32* @r4, align 4
  %v1_106b0 = add i32 %v0_106b0, 12
  %v2_106b0 = inttoptr i32 %v1_106b0 to i32*
  %v3_106b0 = load i32, i32* %v2_106b0, align 4
  store i32 %v3_106b0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_106b8 = icmp ugt i32 %v3_106b0, 1
  store i1 %v2_106b8, i1* %cpsr_c.global-to-local, align 1
  %v7_106b8 = icmp eq i32 %v3_106b0, 2
  store i1 %v7_106b8, i1* %cpsr_z.global-to-local, align 1
  %v2_106bc = add i32 %v0_106b0, 4
  %v3_106bc = inttoptr i32 %v2_106bc to i32*
  store i32 -1, i32* %v3_106bc, align 4
  %v2_106c0 = xor i1 %v2_106b8, true
  %v3_106c0 = or i1 %v7_106b8, %v2_106c0
  br i1 %v3_106c0, label %dec_label_pc_113cc, label %dec_label_pc_106c4

dec_label_pc_106c4:                               ; preds = %dec_label_pc_106a8
  %v0_106c4 = load i32, i32* @r4, align 4
  %v1_106c4 = add i32 %v0_106c4, 284
  %v2_106c4 = inttoptr i32 %v1_106c4 to i8*
  %v3_106c4 = load i8, i8* %v2_106c4, align 1
  %v4_106c4 = zext i8 %v3_106c4 to i32
  %v1_106c8 = add nuw nsw i32 %v4_106c4, 1
  %v1_106cc = urem i32 %v1_106c8, 256
  store i32 %v1_106cc, i32* %r3.global-to-local, align 4
  %v2_106d0 = icmp ugt i32 %v1_106cc, 9
  store i1 %v2_106d0, i1* %cpsr_c.global-to-local, align 1
  %v7_106d0 = icmp eq i32 %v1_106cc, 10
  store i1 %v7_106d0, i1* %cpsr_z.global-to-local, align 1
  %v1_106d4 = trunc i32 %v1_106c8 to i8
  store i8 %v1_106d4, i8* %v2_106c4, align 1
  %v0_106d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_106d8, label %dec_label_pc_113cc, label %dec_label_pc_106dc

dec_label_pc_106dc:                               ; preds = %dec_label_pc_106c4
  %v0_106dc = load i32, i32* @r4, align 4
  store i32 %v0_106dc, i32* @r0, align 4
  %v0_106e0 = call i32 @function_fa58()
  store i32 %v0_106e0, i32* %r0.global-to-local, align 4
  br label %bb317

dec_label_pc_106e8:                               ; preds = %bb317
  store i32 1, i32* %stack_var_-64, align 4
  %v0_106f0 = load i32, i32* @r6, align 4
  %v1_106f0 = load i32, i32* @r5, align 4
  %v2_106f0 = sub i32 %v0_106f0, %v1_106f0
  %v3_106f0 = icmp uge i32 %v0_106f0, %v1_106f0
  store i1 %v3_106f0, i1* %cpsr_c.global-to-local, align 1
  %v4_106f0 = xor i32 %v1_106f0, %v0_106f0
  %v5_106f0 = xor i32 %v2_106f0, %v0_106f0
  %v6_106f0 = and i32 %v5_106f0, %v4_106f0
  %v7_106f0 = icmp slt i32 %v6_106f0, 0
  %v8_106f0 = icmp slt i32 %v2_106f0, 0
  %v9_106f0 = icmp eq i32 %v0_106f0, %v1_106f0
  store i1 %v9_106f0, i1* %cpsr_z.global-to-local, align 1
  %v2_106f4 = xor i1 %v8_106f0, %v7_106f0
  %v1_106f0.v0_106f0 = select i1 %v2_106f4, i32 %v1_106f0, i32 %v0_106f0
  store i32 %v2_10700, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_10708, i32* %ip.global-to-local, align 4
  store i32 %v2_1070c, i32* %r1.global-to-local, align 4
  %v1_10710 = add i32 %v1_106f0.v0_106f0, 1
  store i32 %v1_10710, i32* %r0.global-to-local, align 4
  %v5_1071c = call i32 @function_12c00(i32 %v1_10710, i32 %v2_1070c, i32 %v2_10700, i32 0, i32 %v2_10708)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_10724 = call i32 @function_12cb0(i32* null)
  store i32 ptrtoint (i32* @global_var_1dcf4.153 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_10724, i32* @global_var_1dcf4.153, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  br label %dec_label_pc_1077c

dec_label_pc_10740:                               ; preds = %dec_label_pc_107a0, %dec_label_pc_1088c
  %v0_10758 = phi i32 [ %v3_10794, %dec_label_pc_107a0 ], [ %v0_10740.pre, %dec_label_pc_1088c ]
  %v3_10740 = udiv i32 %v0_10758, 32
  %v3_10748 = mul nuw nsw i32 %v3_10740, 4
  store i32 %v2_10684, i32* @lr, align 4
  %v2_10750 = add i32 %v3_10748, %v2_10684
  store i32 %v2_10750, i32* %r3.global-to-local, align 4
  %v1_10754 = add i32 %v2_10750, -184
  %v2_10754 = inttoptr i32 %v1_10754 to i32*
  %v3_10754 = load i32, i32* %v2_10754, align 4
  %v1_10758 = urem i32 %v0_10758, 32
  store i32 %v1_10758, i32* %r1.global-to-local, align 4
  %v2_1075c = add nsw i32 %v1_10758, -1
  %v3_1075c = shl i32 1, %v2_1075c
  %v4_1075c = and i32 %v3_1075c, %v3_10754
  %v5_1075c = icmp ne i32 %v4_1075c, 0
  store i1 %v5_1075c, i1* %cpsr_c.global-to-local, align 1
  %v6_1075c = lshr i32 %v3_10754, %v1_10758
  store i32 %v6_1075c, i32* %r2.global-to-local, align 4
  %v1_10760 = urem i32 %v6_1075c, 2
  %v2_10760 = icmp eq i32 %v1_10760, 0
  store i1 %v2_10760, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10760, label %dec_label_pc_10768, label %dec_label_pc_10918.preheader

dec_label_pc_10918.preheader:                     ; preds = %dec_label_pc_10740
  %v0_10918112 = load i32, i32* @r5, align 4
  %v1_10918113 = add i32 %v0_10918112, 12
  %v2_10918114 = inttoptr i32 %v1_10918113 to i32*
  %v3_10918115 = load i32, i32* %v2_10918114, align 4
  store i32 %v3_10918115, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1091c111117 = icmp eq i32 %v3_10918115, 0
  store i1 %v2_1091c111117, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1091c111117, label %dec_label_pc_10768, label %dec_label_pc_10924.lr.ph

dec_label_pc_10768:                               ; preds = %dec_label_pc_10918.loopexit, %dec_label_pc_1091c.backedge, %dec_label_pc_10918.preheader, %dec_label_pc_10740, %.thread228, %dec_label_pc_11240, %dec_label_pc_1077c, %dec_label_pc_113e0, %dec_label_pc_11280
  %v3_10768 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10768, i32* %r3.global-to-local, align 4
  %v1_1076c = add i32 %v3_10768, 1
  store i32 %v1_1076c, i32* %r2.global-to-local, align 4
  %v2_10770 = icmp ugt i32 %v1_1076c, 254
  store i1 %v2_10770, i1* %cpsr_c.global-to-local, align 1
  %v7_10770 = icmp eq i32 %v1_1076c, 255
  store i1 %v7_10770, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_1076c, i32* %stack_var_-48, align 4
  %v8_10778 = icmp sgt i32 %v1_1076c, 255
  br i1 %v8_10778, label %dec_label_pc_10120, label %dec_label_pc_1077c

dec_label_pc_1077c:                               ; preds = %dec_label_pc_10768, %dec_label_pc_106e8
  %v0_10788 = phi i32 [ %v1_1076c, %dec_label_pc_10768 ], [ 0, %dec_label_pc_106e8 ]
  store i32 ptrtoint (i32* @global_var_1dd54.165 to i32), i32* %ip.global-to-local, align 4
  %v3_10780 = mul i32 %v0_10788, 256
  store i32 %v3_10780, i32* %r3.global-to-local, align 4
  %v2_10784 = load i32, i32* @global_var_1dd54.165, align 4
  store i32 %v2_10784, i32* %r1.global-to-local, align 4
  %v2_1078c = mul i32 %v0_10788, 288
  store i32 %v2_1078c, i32* %r2.global-to-local, align 4
  %v2_10790 = add i32 %v2_10784, %v2_1078c
  store i32 %v2_10790, i32* @r5, align 4
  %v1_10794 = add i32 %v2_10790, 4
  %v2_10794 = inttoptr i32 %v1_10794 to i32*
  %v3_10794 = load i32, i32* %v2_10794, align 4
  store i32 %v3_10794, i32* @r4, align 4
  %v2_10798 = icmp eq i32 %v3_10794, -1
  store i1 %v2_10798, i1* %cpsr_c.global-to-local, align 1
  %v7_10798 = icmp eq i32 %v3_10794, -1
  store i1 %v7_10798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10798, label %dec_label_pc_10768, label %dec_label_pc_107a0

dec_label_pc_107a0:                               ; preds = %dec_label_pc_1077c
  %v3_107a0 = udiv i32 %v3_10794, 32
  %v3_107a8 = mul nuw nsw i32 %v3_107a0, 4
  store i32 %v2_10684, i32* %lr.global-to-local, align 4
  %v2_107b0 = add i32 %v3_107a8, %v2_10684
  store i32 %v2_107b0, i32* %r3.global-to-local, align 4
  %v1_107b4 = add i32 %v2_107b0, -312
  %v2_107b4 = inttoptr i32 %v1_107b4 to i32*
  %v3_107b4 = load i32, i32* %v2_107b4, align 4
  %v1_107b8 = urem i32 %v3_10794, 32
  store i32 %v1_107b8, i32* %r1.global-to-local, align 4
  %v2_107bc = add nsw i32 %v1_107b8, -1
  %v3_107bc = shl i32 1, %v2_107bc
  %v4_107bc = and i32 %v3_107b4, %v3_107bc
  %v5_107bc = icmp ne i32 %v4_107bc, 0
  store i1 %v5_107bc, i1* %cpsr_c.global-to-local, align 1
  %v6_107bc = lshr i32 %v3_107b4, %v1_107b8
  store i32 %v6_107bc, i32* %r2.global-to-local, align 4
  %v1_107c0 = urem i32 %v6_107bc, 2
  %v2_107c0 = icmp eq i32 %v1_107c0, 0
  store i1 %v2_107c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_107c0, label %dec_label_pc_10740, label %dec_label_pc_107c8

dec_label_pc_107c8:                               ; preds = %dec_label_pc_107a0
  store i32 4, i32* %r2.global-to-local, align 4
  store i8 4, i8* %stack_var_-52, align 1
  store i32 %v2_108c8, i32* %r3.global-to-local, align 4
  store i32 %v2_108b4, i32* %ip.global-to-local, align 4
  store i32 %v3_10794, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v6_107f8 = call i32 @function_13180(i32 %v3_10794, i32 1, i32 4, i32* nonnull %stack_var_-56, i32 %v2_108b4)
  %v3_107fc = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_107fc, i32* %r3.global-to-local, align 4
  %v2_10800 = or i32 %v3_107fc, %v6_107f8
  store i32 %v2_10800, i32* %r0.global-to-local, align 4
  %v4_10800 = icmp eq i32 %v2_10800, 0
  store i1 %v4_10800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_10800, label %dec_label_pc_10808, label %dec_label_pc_113e0

dec_label_pc_10808:                               ; preds = %dec_label_pc_107c8
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1080c = load i32, i32* @r5, align 4
  %v2_1080c = add i32 %v1_1080c, 12
  %v3_1080c = inttoptr i32 %v2_1080c to i32*
  store i32 2, i32* %v3_1080c, align 4
  %v0_10810 = call i32 @function_f8c4()
  store i32 %v0_10810, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1dcf0.159 to i32), i32* %r3.global-to-local, align 4
  %v3_10818 = load i8, i8* @global_var_1dcf1.160, align 1
  %v4_10818 = zext i8 %v3_10818 to i32
  store i32 %v4_10818, i32* %r2.global-to-local, align 4
  %v2_1081c = load i8, i8* bitcast (i8** @global_var_1dcf0.159 to i8*), align 4
  %v3_1081c = zext i8 %v2_1081c to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_10820 = mul nuw nsw i32 %v4_10818, 256
  %v5_10820 = or i32 %v3_1081c, %v4_10820
  store i32 %v5_10820, i32* %r1.global-to-local, align 4
  %v2_10824 = call i32 @function_12768(i32 %v0_10810, i32 %v5_10820)
  store i32 ptrtoint (i32* @global_var_1dcc0.155 to i32), i32* %r3.global-to-local, align 4
  %v2_1082c = load i32, i32* @global_var_1dcc0.155, align 4
  store i32 %v2_1082c, i32* %lr.global-to-local, align 4
  %v1_10834 = load i32, i32* @r6, align 4
  %v9_10834 = icmp eq i32 %v2_1082c, %v1_10834
  store i1 %v9_10834, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_10838 = urem i32 %v2_10824, 65536
  store i32 %v3_10838, i32* %r0.global-to-local, align 4
  %v7_1083c = icmp sgt i32 %v2_1082c, %v1_10834
  br i1 %v7_1083c, label %dec_label_pc_10840, label %dec_label_pc_113d8

dec_label_pc_10840:                               ; preds = %dec_label_pc_10808
  %v2_10844 = load i32, i32* @global_var_1dcec.157, align 4
  store i32 %v2_10844, i32* %r3.global-to-local, align 4
  store i32 %v1_10834, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10860

dec_label_pc_10850:                               ; preds = %dec_label_pc_10878, %dec_label_pc_10860
  %v1_10850 = add i32 %v0_10850, 1
  store i32 %v1_10850, i32* %ip.global-to-local, align 4
  %v3_10854 = icmp uge i32 %v2_1082c, %v1_10850
  store i1 %v3_10854, i1* %cpsr_c.global-to-local, align 1
  %v9_10854 = icmp eq i32 %v2_1082c, %v1_10850
  store i1 %v9_10854, i1* %cpsr_z.global-to-local, align 1
  %v1_10858 = add i32 %v0_10858, 16
  store i32 %v1_10858, i32* %r3.global-to-local, align 4
  br i1 %v9_10854, label %dec_label_pc_113d8, label %dec_label_pc_10860

dec_label_pc_10860:                               ; preds = %dec_label_pc_10850, %dec_label_pc_10840
  %v0_10850 = phi i32 [ %v1_10850, %dec_label_pc_10850 ], [ %v1_10834, %dec_label_pc_10840 ]
  %v0_10858 = phi i32 [ %v1_10858, %dec_label_pc_10850 ], [ %v2_10844, %dec_label_pc_10840 ]
  store i32 %v0_10858, i32* %r1.global-to-local, align 4
  %v1_10864 = add i32 %v0_10858, 9
  %v2_10864 = inttoptr i32 %v1_10864 to i8*
  %v3_10864 = load i8, i8* %v2_10864, align 1
  %v4_10864 = zext i8 %v3_10864 to i32
  store i32 %v4_10864, i32* %r2.global-to-local, align 4
  %v1_10868 = add i32 %v0_10858, 8
  %v2_10868 = inttoptr i32 %v1_10868 to i8*
  %v3_10868 = load i8, i8* %v2_10868, align 1
  %v4_10868 = zext i8 %v3_10868 to i32
  %v4_1086c = mul nuw nsw i32 %v4_10864, 256
  %v5_1086c = or i32 %v4_10868, %v4_1086c
  store i32 %v5_1086c, i32* %r3.global-to-local, align 4
  %v3_10870 = icmp uge i32 %v5_1086c, %v3_10838
  store i1 %v3_10870, i1* %cpsr_c.global-to-local, align 1
  %v9_10870 = icmp eq i32 %v5_1086c, %v3_10838
  store i1 %v9_10870, i1* %cpsr_z.global-to-local, align 1
  %v2_10874 = xor i1 %v9_10870, true
  %v3_10874 = and i1 %v3_10870, %v2_10874
  br i1 %v3_10874, label %dec_label_pc_10850, label %dec_label_pc_10878

dec_label_pc_10878:                               ; preds = %dec_label_pc_10860
  %v1_10878 = add i32 %v0_10858, 10
  %v2_10878 = inttoptr i32 %v1_10878 to i8*
  %v3_10878 = load i8, i8* %v2_10878, align 1
  %v4_10878 = zext i8 %v3_10878 to i32
  store i32 %v4_10878, i32* %r3.global-to-local, align 4
  %v1_1087c = add i32 %v0_10858, 11
  %v2_1087c = inttoptr i32 %v1_1087c to i8*
  %v3_1087c = load i8, i8* %v2_1087c, align 1
  %v4_1087c = zext i8 %v3_1087c to i32
  store i32 %v4_1087c, i32* %r2.global-to-local, align 4
  %v4_10880 = mul nuw nsw i32 %v4_1087c, 256
  %v5_10880 = or i32 %v4_10880, %v4_10878
  store i32 %v5_10880, i32* %r3.global-to-local, align 4
  %v3_10884 = icmp uge i32 %v5_10880, %v3_10838
  store i1 %v3_10884, i1* %cpsr_c.global-to-local, align 1
  %v9_10884 = icmp eq i32 %v5_10880, %v3_10838
  store i1 %v9_10884, i1* %cpsr_z.global-to-local, align 1
  %v2_10888 = xor i1 %v3_10884, true
  %v3_10888 = or i1 %v9_10884, %v2_10888
  br i1 %v3_10888, label %dec_label_pc_10850, label %dec_label_pc_1088c

dec_label_pc_1088c:                               ; preds = %dec_label_pc_10878, %dec_label_pc_113d8
  %v0_10894 = phi i32 [ 0, %dec_label_pc_113d8 ], [ %v0_10858, %dec_label_pc_10878 ]
  %v0_1088c = load i32, i32* @r5, align 4
  %v1_1088c = add i32 %v0_1088c, 4
  %v2_1088c = inttoptr i32 %v1_1088c to i32*
  %v3_1088c = load i32, i32* %v2_1088c, align 4
  store i32 %v3_1088c, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_10894 = inttoptr i32 %v0_1088c to i32*
  store i32 %v0_10894, i32* %v2_10894, align 4
  %v0_10898 = load i32, i32* %ip.global-to-local, align 4
  %v1_10898 = load i32, i32* @r5, align 4
  %v2_10898 = add i32 %v1_10898, 24
  %v3_10898 = inttoptr i32 %v2_10898 to i32*
  store i32 %v0_10898, i32* %v3_10898, align 4
  %v0_10740.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10740

dec_label_pc_108a0:                               ; preds = %dec_label_pc_10ae0, %dec_label_pc_10ab4, %dec_label_pc_10afc
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_108a4 = call i32 @function_11598(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_108ac = call i32 @function_11598(i32 33)
  store i32 %v2_108b4, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v3_108bc = call i32 @function_114b4(i32 32, i32* %v2_108bc)
  store i32 %v3_108bc, i32* @r4, align 4
  store i32 %v2_108c8, i32* %r1.global-to-local, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v3_108d0 = call i32 @function_114b4(i32 33, i32* nonnull %stack_var_-56)
  %v3_108d4 = load i8, i8* %stack_var_-52, align 1
  %v4_108d4 = sext i8 %v3_108d4 to i32
  %sext7 = mul i32 %v3_108d0, 16777216
  %v1_108d8 = sdiv i32 %sext7, 16777216
  store i32 %v1_108d8, i32* @r6, align 4
  %v0_108dc = load i32, i32* @r4, align 4
  store i32 %v0_108dc, i32* %r2.global-to-local, align 4
  %v1_108e0 = add nsw i32 %v4_108d4, -1
  store i32 %v1_108e0, i32* %r3.global-to-local, align 4
  %v0_108e4 = load i32, i32* @sl, align 4
  store i32 %v0_108e4, i32* %r0.global-to-local, align 4
  %v0_108e8 = load i32, i32* @r5, align 4
  %v1_108e8 = add i32 %v0_108e8, 24
  %v2_108e8 = inttoptr i32 %v1_108e8 to i32*
  %v3_108e8 = load i32, i32* %v2_108e8, align 4
  store i32 %v3_108e8, i32* %r1.global-to-local, align 4
  %v4_108ec = call i32 @function_12110(i32 %v0_108e4, i32 %v3_108e8, i32 %v0_108dc, i32 %v1_108e0)
  store i32 %v4_108ec, i32* %r0.global-to-local, align 4
  %v2_108f0 = icmp eq i32 %v4_108ec, -1
  store i1 %v2_108f0, i1* %cpsr_c.global-to-local, align 1
  %v7_108f0 = icmp eq i32 %v4_108ec, -1
  store i1 %v7_108f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108f0, label %dec_label_pc_11300, label %dec_label_pc_10900

dec_label_pc_10900:                               ; preds = %dec_label_pc_11300, %dec_label_pc_108a0
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10904 = call i32 @function_114e0(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_1090c = call i32 @function_114e0(i32 33)
  store i32 %v1_1090c, i32* %r0.global-to-local, align 4
  %v0_10910 = load i32, i32* @r7, align 4
  %v3_10910 = icmp eq i32 %v0_10910, -1
  store i1 %v3_10910, i1* %cpsr_c.global-to-local, align 1
  %v8_10910 = icmp eq i32 %v0_10910, -1
  store i1 %v8_10910, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10910, label %dec_label_pc_10918.loopexit, label %dec_label_pc_10b08

dec_label_pc_10918.loopexit:                      ; preds = %dec_label_pc_1117c, %dec_label_pc_10aa4, %dec_label_pc_10998, %dec_label_pc_10900, %dec_label_pc_11168
  %v0_10918 = load i32, i32* @r5, align 4
  %v1_10918 = add i32 %v0_10918, 12
  %v2_10918 = inttoptr i32 %v1_10918 to i32*
  %v3_10918 = load i32, i32* %v2_10918, align 4
  store i32 %v3_10918, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1091c111 = icmp eq i32 %v3_10918, 0
  store i1 %v2_1091c111, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1091c111, label %dec_label_pc_10768, label %dec_label_pc_10924.lr.ph

dec_label_pc_10924.lr.ph:                         ; preds = %dec_label_pc_10918.preheader, %dec_label_pc_10918.loopexit
  %v0_10924145 = phi i32 [ %v0_10918, %dec_label_pc_10918.loopexit ], [ %v0_10918112, %dec_label_pc_10918.preheader ]
  br label %dec_label_pc_10924

dec_label_pc_10924:                               ; preds = %dec_label_pc_1091c.backedge.thread, %dec_label_pc_1091c.backedge, %dec_label_pc_1091c.backedge.thread457, %dec_label_pc_10924.lr.ph
  %v0_112b8 = phi i32 [ %v0_10924145, %dec_label_pc_10924.lr.ph ], [ %v0_10924142, %dec_label_pc_1091c.backedge ], [ %v0_10998, %dec_label_pc_1091c.backedge.thread ], [ %v0_10998, %dec_label_pc_1091c.backedge.thread457 ]
  %v1_10924 = add i32 %v0_112b8, 24
  %v2_10924 = inttoptr i32 %v1_10924 to i32*
  %v3_10924 = load i32, i32* %v2_10924, align 4
  store i32 %v3_10924, i32* %r3.global-to-local, align 4
  %v2_10928 = icmp ugt i32 %v3_10924, 255
  store i1 %v2_10928, i1* %cpsr_c.global-to-local, align 1
  %v7_10928 = icmp eq i32 %v3_10924, 256
  store i1 %v7_10928, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_112b8, 28
  store i32 %.pre, i32* @sl, align 4
  br i1 %v7_10928, label %dec_label_pc_112b8, label %dec_label_pc_10934

dec_label_pc_10934:                               ; preds = %dec_label_pc_10924, %dec_label_pc_112b8
  store i32 0, i32* @r6, align 4
  %v1_10938 = load i32, i32* @sb, align 4
  %v2_10938 = inttoptr i32 %v1_10938 to i32*
  store i32 0, i32* %v2_10938, align 4
  %v0_1093c = load i32, i32* @r5, align 4
  %v1_1093c = add i32 %v0_1093c, 24
  %v2_1093c = inttoptr i32 %v1_1093c to i32*
  %v3_1093c = load i32, i32* %v2_1093c, align 4
  store i32 %v3_1093c, i32* %r2.global-to-local, align 4
  %v0_10940 = load i32, i32* @sl, align 4
  %v2_10940 = add i32 %v0_10940, %v3_1093c
  store i32 %v2_10940, i32* @r4, align 4
  %v1_10944 = add i32 %v0_1093c, 4
  %v2_10944 = inttoptr i32 %v1_10944 to i32*
  %v3_10944 = load i32, i32* %v2_10944, align 4
  store i32 %v3_10944, i32* %r0.global-to-local, align 4
  %v1_10948 = sub i32 256, %v3_1093c
  store i32 %v1_10948, i32* %r2.global-to-local, align 4
  store i32 %v2_10940, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10954 = inttoptr i32 %v2_10940 to i32*
  %v5_10954 = call i32 @function_131dc(i32 %v3_10944, i32* %v4_10954, i32 %v1_10948, i32 16384)
  store i32 %v5_10954, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10958 = icmp eq i32 %v5_10954, 0
  store i1 %v2_10958, i1* %cpsr_z.global-to-local, align 1
  %tmp322 = icmp slt i32 %v5_10954, 1
  br i1 %tmp322, label %dec_label_pc_11234, label %dec_label_pc_10960

dec_label_pc_10960:                               ; preds = %dec_label_pc_10934
  %v0_10960 = load i32, i32* @r6, align 4
  store i32 %v0_10960, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10968

dec_label_pc_10968:                               ; preds = %bb324, %dec_label_pc_10960
  %v3_10970 = phi i32 [ %v1_10974, %bb324 ], [ %v0_10960, %dec_label_pc_10960 ]
  %v1_10968 = load i32, i32* @r4, align 4
  %v2_10968 = add i32 %v1_10968, %v3_10970
  %v3_10968 = inttoptr i32 %v2_10968 to i8*
  %v4_10968 = load i8, i8* %v3_10968, align 1
  %v6_10968 = zext i8 %v4_10968 to i32
  store i32 %v6_10968, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1096c = icmp eq i8 %v4_10968, 0
  store i1 %v2_1096c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1096c, label %bb323, label %bb324

bb323:                                            ; preds = %dec_label_pc_10968
  %v1_10970 = load i32, i32* %r1.global-to-local, align 4
  %v2_10970 = trunc i32 %v1_10970 to i8
  store i8 %v2_10970, i8* %v3_10968, align 1
  %v0_10974.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb324

bb324:                                            ; preds = %dec_label_pc_10968, %bb323
  %v0_10974 = phi i32 [ %v3_10970, %dec_label_pc_10968 ], [ %v0_10974.pre, %bb323 ]
  %v1_10974 = add i32 %v0_10974, 1
  store i32 %v1_10974, i32* %r2.global-to-local, align 4
  %v3_10978 = icmp uge i32 %v5_10954, %v1_10974
  store i1 %v3_10978, i1* %cpsr_c.global-to-local, align 1
  %v9_10978 = icmp eq i32 %v5_10954, %v1_10974
  store i1 %v9_10978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10978, label %dec_label_pc_10980, label %dec_label_pc_10968

dec_label_pc_10980:                               ; preds = %bb324, %dec_label_pc_11238
  store i32 ptrtoint (i32* @global_var_1dcf4.153 to i32), i32* %r1.global-to-local, align 4
  %v0_10984 = load i32, i32* @r5, align 4
  %v1_10984 = add i32 %v0_10984, 24
  %v2_10984 = inttoptr i32 %v1_10984 to i32*
  %v3_10984 = load i32, i32* %v2_10984, align 4
  %v2_10988 = load i32, i32* @global_var_1dcf4.153, align 4
  store i32 %v2_10988, i32* %r3.global-to-local, align 4
  %v2_1098c = add i32 %v3_10984, %v5_10954
  store i32 %v2_1098c, i32* %ip.global-to-local, align 4
  store i32 %v2_1098c, i32* %v2_10984, align 4
  %v0_10994 = load i32, i32* %r3.global-to-local, align 4
  %v1_10994 = load i32, i32* @r5, align 4
  %v2_10994 = add i32 %v1_10994, 8
  %v3_10994 = inttoptr i32 %v2_10994 to i32*
  store i32 %v0_10994, i32* %v3_10994, align 4
  br label %dec_label_pc_10998

dec_label_pc_10998:                               ; preds = %dec_label_pc_10fe8, %dec_label_pc_10980
  %v0_10998 = load i32, i32* @r5, align 4
  %v1_10998 = add i32 %v0_10998, 12
  %v2_10998 = inttoptr i32 %v1_10998 to i32*
  %v3_10998 = load i32, i32* %v2_10998, align 4
  store i32 %v3_10998, i32* %r2.global-to-local, align 4
  %v1_1099c = add i32 %v3_10998, -2
  store i32 %v1_1099c, i32* %r3.global-to-local, align 4
  %v7_109a0 = icmp eq i32 %v1_1099c, 8
  store i1 %v7_109a0, i1* %cpsr_z.global-to-local, align 1
  %v5_109a4 = and i32 %v1_1099c, 1073741824
  %v6_109a4 = icmp ne i32 %v5_109a4, 0
  store i1 %v6_109a4, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_10998, label %dec_label_pc_10918.loopexit [
    i32 2, label %dec_label_pc_109d0
    i32 3, label %dec_label_pc_10ab4
    i32 4, label %dec_label_pc_10b4c
    i32 5, label %dec_label_pc_10bdc
    i32 6, label %dec_label_pc_10c90
    i32 7, label %dec_label_pc_10eb0
    i32 8, label %dec_label_pc_10dfc
    i32 9, label %dec_label_pc_1100c
    i32 10, label %dec_label_pc_10f64
  ]

dec_label_pc_109d0:                               ; preds = %dec_label_pc_10998
  %v1_109d0 = add i32 %v0_10998, 24
  %v2_109d0 = inttoptr i32 %v1_109d0 to i32*
  %v3_109d0 = load i32, i32* %v2_109d0, align 4
  store i32 %v3_109d0, i32* %ip.global-to-local, align 4
  %v0_109d4 = load i32, i32* @sl, align 4
  store i32 %v0_109d4, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_109dc = add i32 %v0_10998, 29
  store i32 %v1_109dc, i32* @r4, align 4
  store i32 -3, i32* %r8.global-to-local, align 4
  %v3_109e4102 = icmp eq i32 %v3_109d0, 0
  store i1 %v3_109e4102, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_109e4102, i1* %cpsr_z.global-to-local, align 1
  %v6_109e8109 = icmp sgt i32 %v3_109d0, 0
  br i1 %v6_109e8109, label %dec_label_pc_109ec.preheader, label %dec_label_pc_10a94

dec_label_pc_109e4.loopexit:                      ; preds = %dec_label_pc_10a04
  %v2_10a0c = add i32 %v1_10a0c, 2
  store i32 %v2_10a0c, i32* @r6, align 4
  %v2_10a10 = add i32 %v1_10a10, 2
  store i32 %v2_10a10, i32* @r4, align 4
  %v2_10a14 = add i32 %v1_10a14, 2
  store i32 %v2_10a14, i32* @r7, align 4
  %v3_109e4 = icmp uge i32 %v2_10a14, %v1_109e4
  store i1 %v3_109e4, i1* %cpsr_c.global-to-local, align 1
  %v9_109e4 = icmp eq i32 %v2_10a14, %v1_109e4
  store i1 %v9_109e4, i1* %cpsr_z.global-to-local, align 1
  %v6_109e8 = icmp slt i32 %v2_10a14, %v1_109e4
  br i1 %v6_109e8, label %dec_label_pc_109ec.preheader, label %dec_label_pc_10a94

dec_label_pc_109ec.preheader:                     ; preds = %dec_label_pc_109d0, %dec_label_pc_109e4.loopexit
  %v6_10a9c184 = phi i32 [ %v6_10a9c185, %dec_label_pc_109e4.loopexit ], [ %v0_10998, %dec_label_pc_109d0 ]
  %v1_10a14173 = phi i32 [ %v2_10a14, %dec_label_pc_109e4.loopexit ], [ 0, %dec_label_pc_109d0 ]
  %v1_10a0c171 = phi i32 [ %v2_10a0c, %dec_label_pc_109e4.loopexit ], [ %v0_109d4, %dec_label_pc_109d0 ]
  %v1_109f8169 = phi i32 [ %v1_109e4, %dec_label_pc_109e4.loopexit ], [ %v3_109d0, %dec_label_pc_109d0 ]
  %v0_109ec167 = phi i32 [ %v2_10a10, %dec_label_pc_109e4.loopexit ], [ %v1_109dc, %dec_label_pc_109d0 ]
  br label %dec_label_pc_109ec

dec_label_pc_109ec:                               ; preds = %dec_label_pc_109ec.preheader, %dec_label_pc_10a74
  %v6_10a9c185 = phi i32 [ %v6_10a9c184, %dec_label_pc_109ec.preheader ], [ %v0_10a7c, %dec_label_pc_10a74 ]
  %v1_10a14 = phi i32 [ %v1_10a14173, %dec_label_pc_109ec.preheader ], [ %v1_10a80, %dec_label_pc_10a74 ]
  %v1_10a0c = phi i32 [ %v1_10a0c171, %dec_label_pc_109ec.preheader ], [ %v1_10a88, %dec_label_pc_10a74 ]
  %v1_109e4 = phi i32 [ %v1_109f8169, %dec_label_pc_109ec.preheader ], [ %v3_10a7c, %dec_label_pc_10a74 ]
  %v1_10a10 = phi i32 [ %v0_109ec167, %dec_label_pc_109ec.preheader ], [ %v1_10a8c, %dec_label_pc_10a74 ]
  %v1_109ec = add i32 %v1_10a10, -1
  %v2_109ec = inttoptr i32 %v1_109ec to i8*
  %v3_109ec = load i8, i8* %v2_109ec, align 1
  %v4_109ec = zext i8 %v3_109ec to i32
  store i32 %v4_109ec, i32* %r3.global-to-local, align 4
  %v2_109f0 = icmp eq i8 %v3_109ec, -1
  store i1 %v2_109f0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_109f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_109f0, label %dec_label_pc_109f8, label %dec_label_pc_10a94

dec_label_pc_109f8:                               ; preds = %dec_label_pc_109ec
  %v0_109f8 = load i32, i32* @sl, align 4
  %v2_109f8 = add i32 %v0_109f8, %v1_109e4
  store i32 %v2_109f8, i32* %r2.global-to-local, align 4
  %v3_109fc = icmp uge i32 %v2_109f8, %v1_10a10
  store i1 %v3_109fc, i1* %cpsr_c.global-to-local, align 1
  %v9_109fc = icmp eq i32 %v2_109f8, %v1_10a10
  store i1 %v9_109fc, i1* %cpsr_z.global-to-local, align 1
  %v2_10a00 = xor i1 %v3_109fc, true
  %v3_10a00 = or i1 %v9_109fc, %v2_10a00
  br i1 %v3_10a00, label %dec_label_pc_10a94, label %dec_label_pc_10a04

dec_label_pc_10a04:                               ; preds = %dec_label_pc_109f8
  %v1_10a04 = inttoptr i32 %v1_10a10 to i8*
  %v2_10a04 = load i8, i8* %v1_10a04, align 1
  %v3_10a04 = zext i8 %v2_10a04 to i32
  store i32 %v3_10a04, i32* %r3.global-to-local, align 4
  %v2_10a08 = icmp eq i8 %v2_10a04, -1
  store i1 %v2_10a08, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10a08, label %dec_label_pc_109e4.loopexit, label %dec_label_pc_10a1c

dec_label_pc_10a1c:                               ; preds = %dec_label_pc_10a04
  %v2_10a1c = icmp ugt i8 %v2_10a04, -4
  store i1 %v2_10a1c, i1* %cpsr_c.global-to-local, align 1
  %v7_10a1c = icmp eq i8 %v2_10a04, -3
  store i1 %v7_10a1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a1c, label %dec_label_pc_110c0, label %dec_label_pc_10a24

dec_label_pc_10a24:                               ; preds = %dec_label_pc_10a1c
  %v1_10a24 = add i32 %v1_10a0c, 2
  store i32 %v1_10a24, i32* %r3.global-to-local, align 4
  %v3_10a28 = icmp uge i32 %v2_109f8, %v1_10a24
  store i1 %v3_10a28, i1* %cpsr_c.global-to-local, align 1
  %v9_10a28 = icmp eq i32 %v2_109f8, %v1_10a24
  store i1 %v9_10a28, i1* %cpsr_z.global-to-local, align 1
  %v2_10a2c = xor i1 %v3_10a28, true
  %v3_10a2c = or i1 %v9_10a28, %v2_10a2c
  br i1 %v3_10a2c, label %dec_label_pc_10a94, label %dec_label_pc_10a30

dec_label_pc_10a30:                               ; preds = %bb346, %dec_label_pc_1111c, %dec_label_pc_10a24, %.thread75
  %v0_10a30 = load i32, i32* @r4, align 4
  %v1_10a30 = inttoptr i32 %v0_10a30 to i8*
  %v2_10a30 = load i8, i8* %v1_10a30, align 1
  %v3_10a30 = zext i8 %v2_10a30 to i32
  store i32 %v3_10a30, i32* %r3.global-to-local, align 4
  %v2_10a34 = icmp ugt i8 %v2_10a30, -4
  store i1 %v2_10a34, i1* %cpsr_c.global-to-local, align 1
  %v7_10a34 = icmp eq i8 %v2_10a30, -3
  store i1 %v7_10a34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a34, label %.thread62, label %dec_label_pc_10a44

.thread62:                                        ; preds = %dec_label_pc_10a30
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_10a30, align 1
  %v0_10a40.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10a40.pr.pr, label %bb326, label %.thread62.dec_label_pc_10a44thread-pre-split_crit_edge

.thread62.dec_label_pc_10a44thread-pre-split_crit_edge: ; preds = %.thread62
  %v0_10a44.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10a44

dec_label_pc_10a44:                               ; preds = %dec_label_pc_10a30, %.thread62.dec_label_pc_10a44thread-pre-split_crit_edge
  %v0_10a44.pr = phi i32 [ %v0_10a44.pr.pre, %.thread62.dec_label_pc_10a44thread-pre-split_crit_edge ], [ %v3_10a30, %dec_label_pc_10a30 ]
  %v2_10a44 = icmp ugt i32 %v0_10a44.pr, 250
  store i1 %v2_10a44, i1* %cpsr_c.global-to-local, align 1
  %v7_10a44 = icmp eq i32 %v0_10a44.pr, 251
  store i1 %v7_10a44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a44, label %bb325, label %bb326

bb325:                                            ; preds = %dec_label_pc_10a44
  %v1_10a48 = load i32, i32* %r8.global-to-local, align 4
  %v2_10a48 = trunc i32 %v1_10a48 to i8
  %v3_10a48 = load i32, i32* @r4, align 4
  %v4_10a48 = inttoptr i32 %v3_10a48 to i8*
  store i8 %v2_10a48, i8* %v4_10a48, align 1
  br label %bb326

bb326:                                            ; preds = %.thread62, %dec_label_pc_10a44, %bb325
  %v0_10a4c = load i32, i32* @r4, align 4
  %v1_10a4c = add i32 %v0_10a4c, 1
  %v2_10a4c = inttoptr i32 %v1_10a4c to i8*
  %v3_10a4c = load i8, i8* %v2_10a4c, align 1
  %v4_10a4c = zext i8 %v3_10a4c to i32
  store i32 %v4_10a4c, i32* %r3.global-to-local, align 4
  %v2_10a50 = icmp ugt i8 %v3_10a4c, -4
  store i1 %v2_10a50, i1* %cpsr_c.global-to-local, align 1
  %v7_10a50 = icmp eq i8 %v3_10a4c, -3
  store i1 %v7_10a50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a50, label %.thread65, label %dec_label_pc_10a60

.thread65:                                        ; preds = %bb326
  store i32 -4, i32* %ip.global-to-local, align 4
  store i8 -4, i8* %v2_10a4c, align 1
  %v0_10a5c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10a5c.pr.pr, label %bb328, label %.thread65.dec_label_pc_10a60_crit_edge

.thread65.dec_label_pc_10a60_crit_edge:           ; preds = %.thread65
  %v0_10a60.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10a60

dec_label_pc_10a60:                               ; preds = %.thread65.dec_label_pc_10a60_crit_edge, %bb326
  %v0_10a60 = phi i32 [ %v0_10a60.pre, %.thread65.dec_label_pc_10a60_crit_edge ], [ %v4_10a4c, %bb326 ]
  %v2_10a60 = icmp ugt i32 %v0_10a60, 250
  store i1 %v2_10a60, i1* %cpsr_c.global-to-local, align 1
  %v7_10a60 = icmp eq i32 %v0_10a60, 251
  store i1 %v7_10a60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a60, label %bb327, label %bb328

bb327:                                            ; preds = %dec_label_pc_10a60
  %v1_10a64 = load i32, i32* %r8.global-to-local, align 4
  %v2_10a64 = trunc i32 %v1_10a64 to i8
  %v3_10a64 = load i32, i32* @r4, align 4
  %v4_10a64 = add i32 %v3_10a64, 1
  %v5_10a64 = inttoptr i32 %v4_10a64 to i8*
  store i8 %v2_10a64, i8* %v5_10a64, align 1
  br label %bb328

bb328:                                            ; preds = %.thread65, %dec_label_pc_10a60, %bb327
  %v0_10a68 = load i32, i32* @r5, align 4
  %v1_10a68 = add i32 %v0_10a68, 4
  %v2_10a68 = inttoptr i32 %v1_10a68 to i32*
  %v3_10a68 = load i32, i32* %v2_10a68, align 4
  store i32 %v3_10a68, i32* %r0.global-to-local, align 4
  %v0_10a6c = load i32, i32* @r6, align 4
  br label %dec_label_pc_10a74

dec_label_pc_10a74:                               ; preds = %dec_label_pc_1128c, %bb328
  %v0_10a78 = phi i32 [ %v3_112a8, %dec_label_pc_1128c ], [ %v3_10a68, %bb328 ]
  %storemerge8 = phi i32 [ %v2_110dc, %dec_label_pc_1128c ], [ %v0_10a6c, %bb328 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_1128c ], [ 3, %bb328 ]
  store i32 %storemerge8, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10a78 = inttoptr i32 %storemerge8 to i32*
  %v5_10a78 = call i32 @function_1323c(i32 %v0_10a78, i32* %v4_10a78, i32 %storemerge, i32 16384)
  store i32 %v5_10a78, i32* %r0.global-to-local, align 4
  %v0_10a7c = load i32, i32* @r5, align 4
  %v1_10a7c = add i32 %v0_10a7c, 24
  %v2_10a7c = inttoptr i32 %v1_10a7c to i32*
  %v3_10a7c = load i32, i32* %v2_10a7c, align 4
  store i32 %v3_10a7c, i32* %ip.global-to-local, align 4
  %v0_10a80 = load i32, i32* @r7, align 4
  %v1_10a80 = add i32 %v0_10a80, 3
  store i32 %v1_10a80, i32* @r7, align 4
  %v3_10a84 = icmp uge i32 %v1_10a80, %v3_10a7c
  store i1 %v3_10a84, i1* %cpsr_c.global-to-local, align 1
  %v9_10a84 = icmp eq i32 %v1_10a80, %v3_10a7c
  store i1 %v9_10a84, i1* %cpsr_z.global-to-local, align 1
  %v0_10a88 = load i32, i32* @r6, align 4
  %v1_10a88 = add i32 %v0_10a88, 3
  store i32 %v1_10a88, i32* @r6, align 4
  %v0_10a8c = load i32, i32* @r4, align 4
  %v1_10a8c = add i32 %v0_10a8c, 3
  store i32 %v1_10a8c, i32* @r4, align 4
  %v5_10a90 = icmp slt i32 %v1_10a80, %v3_10a7c
  br i1 %v5_10a90, label %dec_label_pc_109ec, label %dec_label_pc_10a94

dec_label_pc_10a94:                               ; preds = %dec_label_pc_109e4.loopexit, %dec_label_pc_109ec, %dec_label_pc_10a74, %dec_label_pc_10a24, %dec_label_pc_109f8, %dec_label_pc_109d0, %dec_label_pc_110c0.dec_label_pc_10a94.loopexit_crit_edge
  %v6_10a9c = phi i32 [ %v0_110e8, %dec_label_pc_110c0.dec_label_pc_10a94.loopexit_crit_edge ], [ %v0_10998, %dec_label_pc_109d0 ], [ %v6_10a9c185, %dec_label_pc_109ec ], [ %v0_10a7c, %dec_label_pc_10a74 ], [ %v6_10a9c185, %dec_label_pc_10a24 ], [ %v6_10a9c185, %dec_label_pc_109f8 ], [ %v6_10a9c185, %dec_label_pc_109e4.loopexit ]
  %v0_10aa4.pre = phi i32 [ %v0_10a94.pre.pre, %dec_label_pc_110c0.dec_label_pc_10a94.loopexit_crit_edge ], [ 0, %dec_label_pc_109d0 ], [ %v1_10a14, %dec_label_pc_109ec ], [ %v1_10a80, %dec_label_pc_10a74 ], [ %v1_10a14, %dec_label_pc_10a24 ], [ %v1_10a14, %dec_label_pc_109f8 ], [ %v2_10a14, %dec_label_pc_109e4.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a94 = icmp eq i32 %v0_10aa4.pre, 0
  store i1 %v2_10a94, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v0_10aa4.pre, 1
  br i1 %tmp329, label %dec_label_pc_10aa4, label %.thread223

.thread223:                                       ; preds = %dec_label_pc_10a94
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_10a9c = add i32 %v6_10a9c, 12
  %v8_10a9c = inttoptr i32 %v7_10a9c to i32*
  store i32 3, i32* %v8_10a9c, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10aa4:                               ; preds = %dec_label_pc_10a94, %dec_label_pc_11060, %dec_label_pc_10b08, %dec_label_pc_111c8, %dec_label_pc_10f04, %dec_label_pc_10e50, %dec_label_pc_10d9c, %dec_label_pc_10c30, %dec_label_pc_10b98
  %v0_10aa4 = phi i32 [ %v1_11054, %dec_label_pc_11060 ], [ %v0_10b08, %dec_label_pc_10b08 ], [ %v0_111c0, %dec_label_pc_111c8 ], [ %v1_10ef8, %dec_label_pc_10f04 ], [ %v1_10e44, %dec_label_pc_10e50 ], [ %v1_10d90, %dec_label_pc_10d9c ], [ %v1_10c24, %dec_label_pc_10c30 ], [ %v0_10b98, %dec_label_pc_10b98 ], [ %v0_10aa4.pre, %dec_label_pc_10a94 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10aa4 = icmp eq i32 %v0_10aa4, 0
  store i1 %v2_10aa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10aa4, label %dec_label_pc_10918.loopexit, label %dec_label_pc_10aac

dec_label_pc_10aac:                               ; preds = %dec_label_pc_10aa4
  %v0_10aac = load i32, i32* @r5, align 4
  %v1_10aac = add i32 %v0_10aac, 24
  %v2_10aac = inttoptr i32 %v1_10aac to i32*
  %v3_10aac = load i32, i32* %v2_10aac, align 4
  store i32 %v3_10aac, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10ab4:                               ; preds = %dec_label_pc_10998
  %v1_10ab4 = add i32 %v0_10998, 24
  %v2_10ab4 = inttoptr i32 %v1_10ab4 to i32*
  %v3_10ab4 = load i32, i32* %v2_10ab4, align 4
  store i32 %v3_10ab4, i32* %ip.global-to-local, align 4
  %v1_10ab8 = add i32 %v3_10ab4, -1
  store i32 %v1_10ab8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10abc = icmp eq i32 %v1_10ab8, 0
  store i1 %v2_10abc, i1* %cpsr_z.global-to-local, align 1
  %v5_10ac0 = icmp sgt i32 %v1_10ab8, 0
  br i1 %v5_10ac0, label %dec_label_pc_10ae8, label %dec_label_pc_108a0

dec_label_pc_10ac8:                               ; preds = %bb330
  %v2_10ac8 = icmp ugt i8 %v3_10aec, 35
  store i1 %v2_10ac8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ac8 = icmp eq i8 %v3_10aec, 36
  store i1 %v7_10ac8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ac8, label %dec_label_pc_10afc, label %dec_label_pc_10ad0

dec_label_pc_10ad0:                               ; preds = %dec_label_pc_10ac8
  %v2_10ad0 = icmp ugt i8 %v3_10aec, 34
  store i1 %v2_10ad0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ad0 = icmp eq i8 %v3_10aec, 35
  store i1 %v7_10ad0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ad0, label %dec_label_pc_10afc, label %dec_label_pc_10ad8

dec_label_pc_10ad8:                               ; preds = %dec_label_pc_10ad0
  %v2_10ad8 = icmp ugt i8 %v3_10aec, 36
  store i1 %v2_10ad8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ad8 = icmp eq i8 %v3_10aec, 37
  store i1 %v7_10ad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ad8, label %dec_label_pc_10afc, label %dec_label_pc_10ae0

dec_label_pc_10ae0:                               ; preds = %dec_label_pc_10ad8
  %v1_10ae0 = add i32 %v0_10afc, -1
  store i32 %v1_10ae0, i32* %r0.global-to-local, align 4
  %v2_10ae0 = icmp ne i32 %v0_10afc, 0
  store i1 %v2_10ae0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ae0 = icmp eq i32 %v0_10afc, 1
  store i1 %v7_10ae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ae0, label %dec_label_pc_108a0, label %dec_label_pc_10ae8

dec_label_pc_10ae8:                               ; preds = %dec_label_pc_10ab4, %dec_label_pc_10ae0
  %v0_10afc = phi i32 [ %v1_10ae0, %dec_label_pc_10ae0 ], [ %v1_10ab8, %dec_label_pc_10ab4 ]
  %v2_10ae8 = add i32 %v0_10afc, %v0_10998
  store i32 %v2_10ae8, i32* %r3.global-to-local, align 4
  %v1_10aec = add i32 %v2_10ae8, 28
  %v2_10aec = inttoptr i32 %v1_10aec to i8*
  %v3_10aec = load i8, i8* %v2_10aec, align 1
  %v4_10aec = zext i8 %v3_10aec to i32
  store i32 %v4_10aec, i32* %r3.global-to-local, align 4
  %v2_10af0 = icmp ugt i8 %v3_10aec, 61
  store i1 %v2_10af0, i1* %cpsr_c.global-to-local, align 1
  %v7_10af0 = icmp eq i8 %v3_10aec, 62
  store i1 %v7_10af0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10af0, label %dec_label_pc_10afc, label %bb330

bb330:                                            ; preds = %dec_label_pc_10ae8
  %v3_10af4 = icmp ugt i8 %v3_10aec, 57
  store i1 %v3_10af4, i1* %cpsr_c.global-to-local, align 1
  %v8_10af4 = icmp eq i8 %v3_10aec, 58
  store i1 %v8_10af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10af4, label %dec_label_pc_10afc, label %dec_label_pc_10ac8

dec_label_pc_10afc:                               ; preds = %dec_label_pc_10ae8, %bb330, %dec_label_pc_10ad8, %dec_label_pc_10ad0, %dec_label_pc_10ac8
  %v1_10afc = add i32 %v0_10afc, 1
  store i32 %v1_10afc, i32* @r7, align 4
  %v2_10b00 = icmp eq i32 %v1_10afc, -1
  store i1 %v2_10b00, i1* %cpsr_c.global-to-local, align 1
  %v7_10b00 = icmp eq i32 %v0_10afc, -2
  store i1 %v7_10b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b00, label %dec_label_pc_108a0, label %dec_label_pc_10b08

dec_label_pc_10b08:                               ; preds = %dec_label_pc_10900, %dec_label_pc_10afc
  %v0_10b08 = phi i32 [ %v0_10910, %dec_label_pc_10900 ], [ %v1_10afc, %dec_label_pc_10afc ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b08 = icmp eq i32 %v0_10b08, 0
  store i1 %v2_10b08, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v0_10b08, 1
  br i1 %tmp331, label %dec_label_pc_10aa4, label %dec_label_pc_10b10

dec_label_pc_10b10:                               ; preds = %dec_label_pc_10b08
  %v0_10b10 = load i32, i32* @r5, align 4
  %v1_10b10 = inttoptr i32 %v0_10b10 to i32*
  %v2_10b10 = load i32, i32* %v1_10b10, align 4
  store i32 %v2_10b10, i32* %r3.global-to-local, align 4
  %v1_10b14 = add i32 %v0_10b10, 4
  %v2_10b14 = inttoptr i32 %v1_10b14 to i32*
  %v3_10b14 = load i32, i32* %v2_10b14, align 4
  store i32 %v3_10b14, i32* %r0.global-to-local, align 4
  %v1_10b18 = add i32 %v2_10b10, 12
  %v2_10b18 = inttoptr i32 %v1_10b18 to i8*
  %v3_10b18 = load i8, i8* %v2_10b18, align 1
  %v4_10b18 = zext i8 %v3_10b18 to i32
  store i32 %v4_10b18, i32* %r2.global-to-local, align 4
  %v1_10b1c = inttoptr i32 %v2_10b10 to i32*
  %v2_10b1c = load i32, i32* %v1_10b1c, align 4
  store i32 %v2_10b1c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10b24 = inttoptr i32 %v2_10b1c to i32*
  %v5_10b24 = call i32 @function_1323c(i32 %v3_10b14, i32* %v4_10b24, i32 %v4_10b18, i32 16384)
  store i32 %v5_10b24, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10b2c = load i32, i32* @r5, align 4
  %v1_10b2c = add i32 %v0_10b2c, 4
  %v2_10b2c = inttoptr i32 %v1_10b2c to i32*
  %v3_10b2c = load i32, i32* %v2_10b2c, align 4
  store i32 %v3_10b2c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10b38 = call i32 @function_1323c(i32 %v3_10b2c, i32* bitcast ([3 x i8]* @global_var_150d8.60 to i32*), i32 2, i32 16384)
  store i32 %v5_10b38, i32* %r0.global-to-local, align 4
  %v0_10b3c = load i32, i32* @r5, align 4
  %v1_10b3c = add i32 %v0_10b3c, 24
  %v2_10b3c = inttoptr i32 %v1_10b3c to i32*
  %v3_10b3c = load i32, i32* %v2_10b3c, align 4
  store i32 %v3_10b3c, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_10b44 = add i32 %v0_10b3c, 12
  %v3_10b44 = inttoptr i32 %v2_10b44 to i32*
  store i32 4, i32* %v3_10b44, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10b4c:                               ; preds = %dec_label_pc_10998
  %v1_10b4c = add i32 %v0_10998, 24
  %v2_10b4c = inttoptr i32 %v1_10b4c to i32*
  %v3_10b4c = load i32, i32* %v2_10b4c, align 4
  store i32 %v3_10b4c, i32* %ip.global-to-local, align 4
  %v1_10b50 = add i32 %v3_10b4c, -1
  store i32 %v1_10b50, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b54 = icmp eq i32 %v1_10b50, 0
  store i1 %v2_10b54, i1* %cpsr_z.global-to-local, align 1
  %v5_10b58 = icmp sgt i32 %v1_10b50, 0
  br i1 %v5_10b58, label %dec_label_pc_10b78, label %dec_label_pc_11128

dec_label_pc_10b60:                               ; preds = %bb332
  %v2_10b60 = icmp ugt i8 %v3_10b7c, 35
  store i1 %v2_10b60, i1* %cpsr_c.global-to-local, align 1
  %v7_10b60 = icmp eq i8 %v3_10b7c, 36
  store i1 %v7_10b60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b60, label %dec_label_pc_10b8c, label %dec_label_pc_10b68

dec_label_pc_10b68:                               ; preds = %dec_label_pc_10b60
  %v2_10b68 = icmp ugt i8 %v3_10b7c, 34
  store i1 %v2_10b68, i1* %cpsr_c.global-to-local, align 1
  %v7_10b68 = icmp eq i8 %v3_10b7c, 35
  store i1 %v7_10b68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b68, label %dec_label_pc_10b8c, label %dec_label_pc_10b70

dec_label_pc_10b70:                               ; preds = %dec_label_pc_10b68
  %v1_10b70 = add i32 %v0_10b8c, -1
  store i32 %v1_10b70, i32* %r0.global-to-local, align 4
  %v2_10b70 = icmp ne i32 %v0_10b8c, 0
  store i1 %v2_10b70, i1* %cpsr_c.global-to-local, align 1
  %v7_10b70 = icmp eq i32 %v0_10b8c, 1
  store i1 %v7_10b70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b70, label %dec_label_pc_11128, label %dec_label_pc_10b78

dec_label_pc_10b78:                               ; preds = %dec_label_pc_10b4c, %dec_label_pc_10b70
  %v0_10b8c = phi i32 [ %v1_10b70, %dec_label_pc_10b70 ], [ %v1_10b50, %dec_label_pc_10b4c ]
  %v2_10b78 = add i32 %v0_10b8c, %v0_10998
  store i32 %v2_10b78, i32* %r3.global-to-local, align 4
  %v1_10b7c = add i32 %v2_10b78, 28
  %v2_10b7c = inttoptr i32 %v1_10b7c to i8*
  %v3_10b7c = load i8, i8* %v2_10b7c, align 1
  %v4_10b7c = zext i8 %v3_10b7c to i32
  store i32 %v4_10b7c, i32* %r3.global-to-local, align 4
  %v2_10b80 = icmp ugt i8 %v3_10b7c, 61
  store i1 %v2_10b80, i1* %cpsr_c.global-to-local, align 1
  %v7_10b80 = icmp eq i8 %v3_10b7c, 62
  store i1 %v7_10b80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b80, label %dec_label_pc_10b8c, label %bb332

bb332:                                            ; preds = %dec_label_pc_10b78
  %v3_10b84 = icmp ugt i8 %v3_10b7c, 57
  store i1 %v3_10b84, i1* %cpsr_c.global-to-local, align 1
  %v8_10b84 = icmp eq i8 %v3_10b7c, 58
  store i1 %v8_10b84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10b84, label %dec_label_pc_10b8c, label %dec_label_pc_10b60

dec_label_pc_10b8c:                               ; preds = %dec_label_pc_10b78, %bb332, %dec_label_pc_10b68, %dec_label_pc_10b60
  %v1_10b8c = add i32 %v0_10b8c, 1
  store i32 %v1_10b8c, i32* @r7, align 4
  %v2_10b90 = icmp eq i32 %v1_10b8c, -1
  store i1 %v2_10b90, i1* %cpsr_c.global-to-local, align 1
  %v7_10b90 = icmp eq i32 %v0_10b8c, -2
  store i1 %v7_10b90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b90, label %dec_label_pc_11128, label %dec_label_pc_10b98

dec_label_pc_10b98:                               ; preds = %dec_label_pc_11168, %dec_label_pc_10b8c
  %v0_10b98 = phi i32 [ %v0_11170, %dec_label_pc_11168 ], [ %v1_10b8c, %dec_label_pc_10b8c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b98 = icmp eq i32 %v0_10b98, 0
  store i1 %v2_10b98, i1* %cpsr_z.global-to-local, align 1
  %tmp333 = icmp slt i32 %v0_10b98, 1
  br i1 %tmp333, label %dec_label_pc_10aa4, label %dec_label_pc_10ba0

dec_label_pc_10ba0:                               ; preds = %dec_label_pc_10b98
  %v0_10ba0 = load i32, i32* @r5, align 4
  %v1_10ba0 = inttoptr i32 %v0_10ba0 to i32*
  %v2_10ba0 = load i32, i32* %v1_10ba0, align 4
  store i32 %v2_10ba0, i32* %r3.global-to-local, align 4
  %v1_10ba4 = add i32 %v0_10ba0, 4
  %v2_10ba4 = inttoptr i32 %v1_10ba4 to i32*
  %v3_10ba4 = load i32, i32* %v2_10ba4, align 4
  store i32 %v3_10ba4, i32* %r0.global-to-local, align 4
  %v1_10ba8 = add i32 %v2_10ba0, 13
  %v2_10ba8 = inttoptr i32 %v1_10ba8 to i8*
  %v3_10ba8 = load i8, i8* %v2_10ba8, align 1
  %v4_10ba8 = zext i8 %v3_10ba8 to i32
  store i32 %v4_10ba8, i32* %r2.global-to-local, align 4
  %v1_10bac = add i32 %v2_10ba0, 4
  %v2_10bac = inttoptr i32 %v1_10bac to i32*
  %v3_10bac = load i32, i32* %v2_10bac, align 4
  store i32 %v3_10bac, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10bb4 = inttoptr i32 %v3_10bac to i32*
  %v5_10bb4 = call i32 @function_1323c(i32 %v3_10ba4, i32* %v4_10bb4, i32 %v4_10ba8, i32 16384)
  store i32 %v5_10bb4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10bbc = load i32, i32* @r5, align 4
  %v1_10bbc = add i32 %v0_10bbc, 4
  %v2_10bbc = inttoptr i32 %v1_10bbc to i32*
  %v3_10bbc = load i32, i32* %v2_10bbc, align 4
  store i32 %v3_10bbc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10bc8 = call i32 @function_1323c(i32 %v3_10bbc, i32* bitcast ([3 x i8]* @global_var_150d8.60 to i32*), i32 2, i32 16384)
  store i32 %v5_10bc8, i32* %r0.global-to-local, align 4
  %v0_10bcc = load i32, i32* @r5, align 4
  %v1_10bcc = add i32 %v0_10bcc, 24
  %v2_10bcc = inttoptr i32 %v1_10bcc to i32*
  %v3_10bcc = load i32, i32* %v2_10bcc, align 4
  store i32 %v3_10bcc, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_10bd4 = add i32 %v0_10bcc, 12
  %v3_10bd4 = inttoptr i32 %v2_10bd4 to i32*
  store i32 5, i32* %v3_10bd4, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10bdc:                               ; preds = %dec_label_pc_10998
  %v1_10bdc = add i32 %v0_10998, 24
  %v2_10bdc = inttoptr i32 %v1_10bdc to i32*
  %v3_10bdc = load i32, i32* %v2_10bdc, align 4
  store i32 %v3_10bdc, i32* %ip.global-to-local, align 4
  %v1_10be0 = add i32 %v3_10bdc, -1
  store i32 %v1_10be0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10be4 = icmp eq i32 %v1_10be0, 0
  store i1 %v2_10be4, i1* %cpsr_z.global-to-local, align 1
  %v5_10be8 = icmp sgt i32 %v1_10be0, 0
  br i1 %v5_10be8, label %dec_label_pc_10c10, label %dec_label_pc_1091c.backedge.thread

dec_label_pc_10bf0:                               ; preds = %bb334
  %v2_10bf0 = icmp ugt i8 %v3_10c14, 35
  store i1 %v2_10bf0, i1* %cpsr_c.global-to-local, align 1
  %v7_10bf0 = icmp eq i8 %v3_10c14, 36
  store i1 %v7_10bf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bf0, label %dec_label_pc_10c24, label %dec_label_pc_10bf8

dec_label_pc_10bf8:                               ; preds = %dec_label_pc_10bf0
  %v2_10bf8 = icmp ugt i8 %v3_10c14, 34
  store i1 %v2_10bf8, i1* %cpsr_c.global-to-local, align 1
  %v7_10bf8 = icmp eq i8 %v3_10c14, 35
  store i1 %v7_10bf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bf8, label %dec_label_pc_10c24, label %dec_label_pc_10c00

dec_label_pc_10c00:                               ; preds = %dec_label_pc_10bf8
  %v2_10c00 = icmp ugt i8 %v3_10c14, 36
  store i1 %v2_10c00, i1* %cpsr_c.global-to-local, align 1
  %v7_10c00 = icmp eq i8 %v3_10c14, 37
  store i1 %v7_10c00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c00, label %dec_label_pc_10c24, label %dec_label_pc_10c08

dec_label_pc_10c08:                               ; preds = %dec_label_pc_10c00
  %v1_10c08 = add i32 %v0_10c24, -1
  store i32 %v1_10c08, i32* %r0.global-to-local, align 4
  %v2_10c08 = icmp ne i32 %v0_10c24, 0
  store i1 %v2_10c08, i1* %cpsr_c.global-to-local, align 1
  %v7_10c08 = icmp eq i32 %v0_10c24, 1
  store i1 %v7_10c08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c08, label %dec_label_pc_1091c.backedge.thread457, label %dec_label_pc_10c10

dec_label_pc_10c10:                               ; preds = %dec_label_pc_10bdc, %dec_label_pc_10c08
  %v0_10c24 = phi i32 [ %v1_10c08, %dec_label_pc_10c08 ], [ %v1_10be0, %dec_label_pc_10bdc ]
  %v2_10c10 = add i32 %v0_10c24, %v0_10998
  store i32 %v2_10c10, i32* %r3.global-to-local, align 4
  %v1_10c14 = add i32 %v2_10c10, 28
  %v2_10c14 = inttoptr i32 %v1_10c14 to i8*
  %v3_10c14 = load i8, i8* %v2_10c14, align 1
  %v4_10c14 = zext i8 %v3_10c14 to i32
  store i32 %v4_10c14, i32* %r3.global-to-local, align 4
  %v2_10c18 = icmp ugt i8 %v3_10c14, 61
  store i1 %v2_10c18, i1* %cpsr_c.global-to-local, align 1
  %v7_10c18 = icmp eq i8 %v3_10c14, 62
  store i1 %v7_10c18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c18, label %dec_label_pc_10c24, label %bb334

bb334:                                            ; preds = %dec_label_pc_10c10
  %v3_10c1c = icmp ugt i8 %v3_10c14, 57
  store i1 %v3_10c1c, i1* %cpsr_c.global-to-local, align 1
  %v8_10c1c = icmp eq i8 %v3_10c14, 58
  store i1 %v8_10c1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10c1c, label %dec_label_pc_10c24, label %dec_label_pc_10bf0

dec_label_pc_10c24:                               ; preds = %dec_label_pc_10c10, %bb334, %dec_label_pc_10c00, %dec_label_pc_10bf8, %dec_label_pc_10bf0
  %v1_10c24 = add i32 %v0_10c24, 1
  store i32 %v1_10c24, i32* @r7, align 4
  %v2_10c28 = icmp eq i32 %v1_10c24, -1
  store i1 %v2_10c28, i1* %cpsr_c.global-to-local, align 1
  %v7_10c28 = icmp eq i32 %v0_10c24, -2
  store i1 %v7_10c28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c28, label %dec_label_pc_1091c.backedge.thread457, label %dec_label_pc_10c30

dec_label_pc_10c30:                               ; preds = %dec_label_pc_10c24
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c30 = icmp eq i32 %v1_10c24, 0
  store i1 %v2_10c30, i1* %cpsr_z.global-to-local, align 1
  %tmp335 = icmp slt i32 %v1_10c24, 1
  br i1 %tmp335, label %dec_label_pc_10aa4, label %dec_label_pc_10c38

dec_label_pc_10c38:                               ; preds = %dec_label_pc_10c30
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10c3c = call i32 @function_11598(i32 25)
  store i32 %v2_108b4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_10c4c = call i32 @function_114b4(i32 25, i32* %v2_108bc)
  store i32 %v3_10c4c, i32* %r0.global-to-local, align 4
  %v3_10c50 = load i8, i8* %stack_var_-52, align 1
  %v4_10c50 = sext i8 %v3_10c50 to i32
  store i32 %v4_10c50, i32* %r2.global-to-local, align 4
  store i32 %v3_10c4c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c5c = load i32, i32* @r5, align 4
  %v1_10c5c = add i32 %v0_10c5c, 4
  %v2_10c5c = inttoptr i32 %v1_10c5c to i32*
  %v3_10c5c = load i32, i32* %v2_10c5c, align 4
  store i32 %v3_10c5c, i32* %r0.global-to-local, align 4
  %v4_10c60 = inttoptr i32 %v3_10c4c to i32*
  %v5_10c60 = call i32 @function_1323c(i32 %v3_10c5c, i32* %v4_10c60, i32 %v4_10c50, i32 16384)
  store i32 %v5_10c60, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c70 = load i32, i32* @r5, align 4
  %v1_10c70 = add i32 %v0_10c70, 4
  %v2_10c70 = inttoptr i32 %v1_10c70 to i32*
  %v3_10c70 = load i32, i32* %v2_10c70, align 4
  store i32 %v3_10c70, i32* %r0.global-to-local, align 4
  %v5_10c74 = call i32 @function_1323c(i32 %v3_10c70, i32* bitcast ([3 x i8]* @global_var_150d8.60 to i32*), i32 2, i32 16384)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10c7c = call i32 @function_114e0(i32 25)
  store i32 %v1_10c7c, i32* %r0.global-to-local, align 4
  %v0_10c80 = load i32, i32* @r5, align 4
  %v1_10c80 = add i32 %v0_10c80, 24
  %v2_10c80 = inttoptr i32 %v1_10c80 to i32*
  %v3_10c80 = load i32, i32* %v2_10c80, align 4
  store i32 %v3_10c80, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_10c88 = add i32 %v0_10c80, 12
  %v3_10c88 = inttoptr i32 %v2_10c88 to i32*
  store i32 6, i32* %v3_10c88, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10c90:                               ; preds = %dec_label_pc_10998
  %v1_10c90 = add i32 %v0_10998, 24
  %v2_10c90 = inttoptr i32 %v1_10c90 to i32*
  %v3_10c90 = load i32, i32* %v2_10c90, align 4
  store i32 %v3_10c90, i32* %ip.global-to-local, align 4
  %v1_10c94 = add i32 %v3_10c90, -1
  store i32 %v1_10c94, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c98 = icmp eq i32 %v1_10c94, 0
  store i1 %v2_10c98, i1* %cpsr_z.global-to-local, align 1
  %v5_10c9c = icmp sgt i32 %v1_10c94, 0
  br i1 %v5_10c9c, label %dec_label_pc_10d7c, label %dec_label_pc_1091c.backedge.thread

dec_label_pc_10d5c:                               ; preds = %bb336
  %v2_10d5c = icmp ugt i8 %v3_10d80, 35
  store i1 %v2_10d5c, i1* %cpsr_c.global-to-local, align 1
  %v7_10d5c = icmp eq i8 %v3_10d80, 36
  store i1 %v7_10d5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d5c, label %dec_label_pc_10d90, label %dec_label_pc_10d64

dec_label_pc_10d64:                               ; preds = %dec_label_pc_10d5c
  %v2_10d64 = icmp ugt i8 %v3_10d80, 34
  store i1 %v2_10d64, i1* %cpsr_c.global-to-local, align 1
  %v7_10d64 = icmp eq i8 %v3_10d80, 35
  store i1 %v7_10d64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d64, label %dec_label_pc_10d90, label %dec_label_pc_10d6c

dec_label_pc_10d6c:                               ; preds = %dec_label_pc_10d64
  %v2_10d6c = icmp ugt i8 %v3_10d80, 36
  store i1 %v2_10d6c, i1* %cpsr_c.global-to-local, align 1
  %v7_10d6c = icmp eq i8 %v3_10d80, 37
  store i1 %v7_10d6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d6c, label %dec_label_pc_10d90, label %dec_label_pc_10d74

dec_label_pc_10d74:                               ; preds = %dec_label_pc_10d6c
  %v1_10d74 = add i32 %v0_10d90, -1
  store i32 %v1_10d74, i32* %r0.global-to-local, align 4
  %v2_10d74 = icmp ne i32 %v0_10d90, 0
  store i1 %v2_10d74, i1* %cpsr_c.global-to-local, align 1
  %v7_10d74 = icmp eq i32 %v0_10d90, 1
  store i1 %v7_10d74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d74, label %dec_label_pc_1091c.backedge.thread457, label %dec_label_pc_10d7c

dec_label_pc_10d7c:                               ; preds = %dec_label_pc_10c90, %dec_label_pc_10d74
  %v0_10d90 = phi i32 [ %v1_10d74, %dec_label_pc_10d74 ], [ %v1_10c94, %dec_label_pc_10c90 ]
  %v2_10d7c = add i32 %v0_10d90, %v0_10998
  store i32 %v2_10d7c, i32* %r3.global-to-local, align 4
  %v1_10d80 = add i32 %v2_10d7c, 28
  %v2_10d80 = inttoptr i32 %v1_10d80 to i8*
  %v3_10d80 = load i8, i8* %v2_10d80, align 1
  %v4_10d80 = zext i8 %v3_10d80 to i32
  store i32 %v4_10d80, i32* %r3.global-to-local, align 4
  %v2_10d84 = icmp ugt i8 %v3_10d80, 61
  store i1 %v2_10d84, i1* %cpsr_c.global-to-local, align 1
  %v7_10d84 = icmp eq i8 %v3_10d80, 62
  store i1 %v7_10d84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d84, label %dec_label_pc_10d90, label %bb336

bb336:                                            ; preds = %dec_label_pc_10d7c
  %v3_10d88 = icmp ugt i8 %v3_10d80, 57
  store i1 %v3_10d88, i1* %cpsr_c.global-to-local, align 1
  %v8_10d88 = icmp eq i8 %v3_10d80, 58
  store i1 %v8_10d88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10d88, label %dec_label_pc_10d90, label %dec_label_pc_10d5c

dec_label_pc_10d90:                               ; preds = %dec_label_pc_10d7c, %bb336, %dec_label_pc_10d6c, %dec_label_pc_10d64, %dec_label_pc_10d5c
  %v1_10d90 = add i32 %v0_10d90, 1
  store i32 %v1_10d90, i32* @r7, align 4
  %v2_10d94 = icmp eq i32 %v1_10d90, -1
  store i1 %v2_10d94, i1* %cpsr_c.global-to-local, align 1
  %v7_10d94 = icmp eq i32 %v0_10d90, -2
  store i1 %v7_10d94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d94, label %dec_label_pc_1091c.backedge.thread457, label %dec_label_pc_10d9c

dec_label_pc_10d9c:                               ; preds = %dec_label_pc_10d90
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10d9c = icmp eq i32 %v1_10d90, 0
  store i1 %v2_10d9c, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v1_10d90, 1
  br i1 %tmp337, label %dec_label_pc_10aa4, label %dec_label_pc_10da4

dec_label_pc_10da4:                               ; preds = %dec_label_pc_10d9c
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10da8 = call i32 @function_11598(i32 26)
  store i32 %v2_108c8, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_10db8 = call i32 @function_114b4(i32 26, i32* nonnull %stack_var_-56)
  store i32 %v3_10db8, i32* %r0.global-to-local, align 4
  %v3_10dbc = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10dbc, i32* %r2.global-to-local, align 4
  store i32 %v3_10db8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10dc8 = load i32, i32* @r5, align 4
  %v1_10dc8 = add i32 %v0_10dc8, 4
  %v2_10dc8 = inttoptr i32 %v1_10dc8 to i32*
  %v3_10dc8 = load i32, i32* %v2_10dc8, align 4
  store i32 %v3_10dc8, i32* %r0.global-to-local, align 4
  %v4_10dcc = inttoptr i32 %v3_10db8 to i32*
  %v5_10dcc = call i32 @function_1323c(i32 %v3_10dc8, i32* %v4_10dcc, i32 %v3_10dbc, i32 16384)
  store i32 %v5_10dcc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ddc = load i32, i32* @r5, align 4
  %v1_10ddc = add i32 %v0_10ddc, 4
  %v2_10ddc = inttoptr i32 %v1_10ddc to i32*
  %v3_10ddc = load i32, i32* %v2_10ddc, align 4
  store i32 %v3_10ddc, i32* %r0.global-to-local, align 4
  %v5_10de0 = call i32 @function_1323c(i32 %v3_10ddc, i32* bitcast ([3 x i8]* @global_var_150d8.60 to i32*), i32 2, i32 16384)
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10de8 = call i32 @function_114e0(i32 26)
  store i32 %v1_10de8, i32* %r0.global-to-local, align 4
  %v0_10dec = load i32, i32* @r5, align 4
  %v1_10dec = add i32 %v0_10dec, 24
  %v2_10dec = inttoptr i32 %v1_10dec to i32*
  %v3_10dec = load i32, i32* %v2_10dec, align 4
  store i32 %v3_10dec, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_10df4 = add i32 %v0_10dec, 12
  %v3_10df4 = inttoptr i32 %v2_10df4 to i32*
  store i32 7, i32* %v3_10df4, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10dfc:                               ; preds = %dec_label_pc_10998
  %v1_10dfc = add i32 %v0_10998, 24
  %v2_10dfc = inttoptr i32 %v1_10dfc to i32*
  %v3_10dfc = load i32, i32* %v2_10dfc, align 4
  store i32 %v3_10dfc, i32* %ip.global-to-local, align 4
  %v1_10e00 = add i32 %v3_10dfc, -1
  store i32 %v1_10e00, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e04 = icmp eq i32 %v1_10e00, 0
  store i1 %v2_10e04, i1* %cpsr_z.global-to-local, align 1
  %v5_10e08 = icmp sgt i32 %v1_10e00, 0
  br i1 %v5_10e08, label %dec_label_pc_10e30, label %dec_label_pc_1091c.backedge.thread

dec_label_pc_10e10:                               ; preds = %bb338
  %v2_10e10 = icmp ugt i8 %v3_10e34, 35
  store i1 %v2_10e10, i1* %cpsr_c.global-to-local, align 1
  %v7_10e10 = icmp eq i8 %v3_10e34, 36
  store i1 %v7_10e10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e10, label %dec_label_pc_10e44, label %dec_label_pc_10e18

dec_label_pc_10e18:                               ; preds = %dec_label_pc_10e10
  %v2_10e18 = icmp ugt i8 %v3_10e34, 34
  store i1 %v2_10e18, i1* %cpsr_c.global-to-local, align 1
  %v7_10e18 = icmp eq i8 %v3_10e34, 35
  store i1 %v7_10e18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e18, label %dec_label_pc_10e44, label %dec_label_pc_10e20

dec_label_pc_10e20:                               ; preds = %dec_label_pc_10e18
  %v2_10e20 = icmp ugt i8 %v3_10e34, 36
  store i1 %v2_10e20, i1* %cpsr_c.global-to-local, align 1
  %v7_10e20 = icmp eq i8 %v3_10e34, 37
  store i1 %v7_10e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e20, label %dec_label_pc_10e44, label %dec_label_pc_10e28

dec_label_pc_10e28:                               ; preds = %dec_label_pc_10e20
  %v1_10e28 = add i32 %v0_10e44, -1
  store i32 %v1_10e28, i32* %r0.global-to-local, align 4
  %v2_10e28 = icmp ne i32 %v0_10e44, 0
  store i1 %v2_10e28, i1* %cpsr_c.global-to-local, align 1
  %v7_10e28 = icmp eq i32 %v0_10e44, 1
  store i1 %v7_10e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e28, label %dec_label_pc_1091c.backedge.thread457, label %dec_label_pc_10e30

dec_label_pc_10e30:                               ; preds = %dec_label_pc_10dfc, %dec_label_pc_10e28
  %v0_10e44 = phi i32 [ %v1_10e28, %dec_label_pc_10e28 ], [ %v1_10e00, %dec_label_pc_10dfc ]
  %v2_10e30 = add i32 %v0_10e44, %v0_10998
  store i32 %v2_10e30, i32* %r3.global-to-local, align 4
  %v1_10e34 = add i32 %v2_10e30, 28
  %v2_10e34 = inttoptr i32 %v1_10e34 to i8*
  %v3_10e34 = load i8, i8* %v2_10e34, align 1
  %v4_10e34 = zext i8 %v3_10e34 to i32
  store i32 %v4_10e34, i32* %r3.global-to-local, align 4
  %v2_10e38 = icmp ugt i8 %v3_10e34, 61
  store i1 %v2_10e38, i1* %cpsr_c.global-to-local, align 1
  %v7_10e38 = icmp eq i8 %v3_10e34, 62
  store i1 %v7_10e38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e38, label %dec_label_pc_10e44, label %bb338

bb338:                                            ; preds = %dec_label_pc_10e30
  %v3_10e3c = icmp ugt i8 %v3_10e34, 57
  store i1 %v3_10e3c, i1* %cpsr_c.global-to-local, align 1
  %v8_10e3c = icmp eq i8 %v3_10e34, 58
  store i1 %v8_10e3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e3c, label %dec_label_pc_10e44, label %dec_label_pc_10e10

dec_label_pc_10e44:                               ; preds = %dec_label_pc_10e30, %bb338, %dec_label_pc_10e20, %dec_label_pc_10e18, %dec_label_pc_10e10
  %v1_10e44 = add i32 %v0_10e44, 1
  store i32 %v1_10e44, i32* @r7, align 4
  %v2_10e48 = icmp eq i32 %v1_10e44, -1
  store i1 %v2_10e48, i1* %cpsr_c.global-to-local, align 1
  %v7_10e48 = icmp eq i32 %v0_10e44, -2
  store i1 %v7_10e48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e48, label %dec_label_pc_1091c.backedge.thread457, label %dec_label_pc_10e50

dec_label_pc_10e50:                               ; preds = %dec_label_pc_10e44
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e50 = icmp eq i32 %v1_10e44, 0
  store i1 %v2_10e50, i1* %cpsr_z.global-to-local, align 1
  %tmp339 = icmp slt i32 %v1_10e44, 1
  br i1 %tmp339, label %dec_label_pc_10aa4, label %dec_label_pc_10e58

dec_label_pc_10e58:                               ; preds = %dec_label_pc_10e50
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10e5c = call i32 @function_11598(i32 27)
  store i32 %v2_108b4, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_10e6c = call i32 @function_114b4(i32 27, i32* %v2_108bc)
  store i32 %v3_10e6c, i32* %r0.global-to-local, align 4
  %v3_10e70 = load i8, i8* %stack_var_-52, align 1
  %v4_10e70 = sext i8 %v3_10e70 to i32
  store i32 %v4_10e70, i32* %r2.global-to-local, align 4
  store i32 %v3_10e6c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10e7c = load i32, i32* @r5, align 4
  %v1_10e7c = add i32 %v0_10e7c, 4
  %v2_10e7c = inttoptr i32 %v1_10e7c to i32*
  %v3_10e7c = load i32, i32* %v2_10e7c, align 4
  store i32 %v3_10e7c, i32* %r0.global-to-local, align 4
  %v4_10e80 = inttoptr i32 %v3_10e6c to i32*
  %v5_10e80 = call i32 @function_1323c(i32 %v3_10e7c, i32* %v4_10e80, i32 %v4_10e70, i32 16384)
  store i32 %v5_10e80, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10e90 = load i32, i32* @r5, align 4
  %v1_10e90 = add i32 %v0_10e90, 4
  %v2_10e90 = inttoptr i32 %v1_10e90 to i32*
  %v3_10e90 = load i32, i32* %v2_10e90, align 4
  store i32 %v3_10e90, i32* %r0.global-to-local, align 4
  %v5_10e94 = call i32 @function_1323c(i32 %v3_10e90, i32* bitcast ([3 x i8]* @global_var_150d8.60 to i32*), i32 2, i32 16384)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10e9c = call i32 @function_114e0(i32 27)
  store i32 %v1_10e9c, i32* %r0.global-to-local, align 4
  %v0_10ea0 = load i32, i32* @r5, align 4
  %v1_10ea0 = add i32 %v0_10ea0, 24
  %v2_10ea0 = inttoptr i32 %v1_10ea0 to i32*
  %v3_10ea0 = load i32, i32* %v2_10ea0, align 4
  store i32 %v3_10ea0, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_10ea8 = add i32 %v0_10ea0, 12
  %v3_10ea8 = inttoptr i32 %v2_10ea8 to i32*
  store i32 9, i32* %v3_10ea8, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10eb0:                               ; preds = %dec_label_pc_10998
  %v1_10eb0 = add i32 %v0_10998, 24
  %v2_10eb0 = inttoptr i32 %v1_10eb0 to i32*
  %v3_10eb0 = load i32, i32* %v2_10eb0, align 4
  store i32 %v3_10eb0, i32* %ip.global-to-local, align 4
  %v1_10eb4 = add i32 %v3_10eb0, -1
  store i32 %v1_10eb4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10eb8 = icmp eq i32 %v1_10eb4, 0
  store i1 %v2_10eb8, i1* %cpsr_z.global-to-local, align 1
  %v5_10ebc = icmp sgt i32 %v1_10eb4, 0
  br i1 %v5_10ebc, label %dec_label_pc_10ee4, label %dec_label_pc_1091c.backedge.thread

dec_label_pc_10ec4:                               ; preds = %bb340
  %v2_10ec4 = icmp ugt i8 %v3_10ee8, 35
  store i1 %v2_10ec4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ec4 = icmp eq i8 %v3_10ee8, 36
  store i1 %v7_10ec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ec4, label %dec_label_pc_10ef8, label %dec_label_pc_10ecc

dec_label_pc_10ecc:                               ; preds = %dec_label_pc_10ec4
  %v2_10ecc = icmp ugt i8 %v3_10ee8, 34
  store i1 %v2_10ecc, i1* %cpsr_c.global-to-local, align 1
  %v7_10ecc = icmp eq i8 %v3_10ee8, 35
  store i1 %v7_10ecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ecc, label %dec_label_pc_10ef8, label %dec_label_pc_10ed4

dec_label_pc_10ed4:                               ; preds = %dec_label_pc_10ecc
  %v2_10ed4 = icmp ugt i8 %v3_10ee8, 36
  store i1 %v2_10ed4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ed4 = icmp eq i8 %v3_10ee8, 37
  store i1 %v7_10ed4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ed4, label %dec_label_pc_10ef8, label %dec_label_pc_10edc

dec_label_pc_10edc:                               ; preds = %dec_label_pc_10ed4
  %v1_10edc = add i32 %v0_10ef8, -1
  store i32 %v1_10edc, i32* %r0.global-to-local, align 4
  %v2_10edc = icmp ne i32 %v0_10ef8, 0
  store i1 %v2_10edc, i1* %cpsr_c.global-to-local, align 1
  %v7_10edc = icmp eq i32 %v0_10ef8, 1
  store i1 %v7_10edc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10edc, label %dec_label_pc_1091c.backedge.thread457, label %dec_label_pc_10ee4

dec_label_pc_10ee4:                               ; preds = %dec_label_pc_10eb0, %dec_label_pc_10edc
  %v0_10ef8 = phi i32 [ %v1_10edc, %dec_label_pc_10edc ], [ %v1_10eb4, %dec_label_pc_10eb0 ]
  %v2_10ee4 = add i32 %v0_10ef8, %v0_10998
  store i32 %v2_10ee4, i32* %r3.global-to-local, align 4
  %v1_10ee8 = add i32 %v2_10ee4, 28
  %v2_10ee8 = inttoptr i32 %v1_10ee8 to i8*
  %v3_10ee8 = load i8, i8* %v2_10ee8, align 1
  %v4_10ee8 = zext i8 %v3_10ee8 to i32
  store i32 %v4_10ee8, i32* %r3.global-to-local, align 4
  %v2_10eec = icmp ugt i8 %v3_10ee8, 61
  store i1 %v2_10eec, i1* %cpsr_c.global-to-local, align 1
  %v7_10eec = icmp eq i8 %v3_10ee8, 62
  store i1 %v7_10eec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10eec, label %dec_label_pc_10ef8, label %bb340

bb340:                                            ; preds = %dec_label_pc_10ee4
  %v3_10ef0 = icmp ugt i8 %v3_10ee8, 57
  store i1 %v3_10ef0, i1* %cpsr_c.global-to-local, align 1
  %v8_10ef0 = icmp eq i8 %v3_10ee8, 58
  store i1 %v8_10ef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10ef0, label %dec_label_pc_10ef8, label %dec_label_pc_10ec4

dec_label_pc_10ef8:                               ; preds = %dec_label_pc_10ee4, %bb340, %dec_label_pc_10ed4, %dec_label_pc_10ecc, %dec_label_pc_10ec4
  %v1_10ef8 = add i32 %v0_10ef8, 1
  store i32 %v1_10ef8, i32* @r7, align 4
  %v2_10efc = icmp eq i32 %v1_10ef8, -1
  store i1 %v2_10efc, i1* %cpsr_c.global-to-local, align 1
  %v7_10efc = icmp eq i32 %v0_10ef8, -2
  store i1 %v7_10efc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10efc, label %dec_label_pc_1091c.backedge.thread457, label %dec_label_pc_10f04

dec_label_pc_10f04:                               ; preds = %dec_label_pc_10ef8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10f04 = icmp eq i32 %v1_10ef8, 0
  store i1 %v2_10f04, i1* %cpsr_z.global-to-local, align 1
  %tmp341 = icmp slt i32 %v1_10ef8, 1
  br i1 %tmp341, label %dec_label_pc_10aa4, label %dec_label_pc_10f0c

dec_label_pc_10f0c:                               ; preds = %dec_label_pc_10f04
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_10f10 = call i32 @function_11598(i32 24)
  store i32 %v2_108c8, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_10f20 = call i32 @function_114b4(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_10f20, i32* %r0.global-to-local, align 4
  %v3_10f24 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10f24, i32* %r2.global-to-local, align 4
  store i32 %v3_10f20, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f30 = load i32, i32* @r5, align 4
  %v1_10f30 = add i32 %v0_10f30, 4
  %v2_10f30 = inttoptr i32 %v1_10f30 to i32*
  %v3_10f30 = load i32, i32* %v2_10f30, align 4
  store i32 %v3_10f30, i32* %r0.global-to-local, align 4
  %v4_10f34 = inttoptr i32 %v3_10f20 to i32*
  %v5_10f34 = call i32 @function_1323c(i32 %v3_10f30, i32* %v4_10f34, i32 %v3_10f24, i32 16384)
  store i32 %v5_10f34, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f44 = load i32, i32* @r5, align 4
  %v1_10f44 = add i32 %v0_10f44, 4
  %v2_10f44 = inttoptr i32 %v1_10f44 to i32*
  %v3_10f44 = load i32, i32* %v2_10f44, align 4
  store i32 %v3_10f44, i32* %r0.global-to-local, align 4
  %v5_10f48 = call i32 @function_1323c(i32 %v3_10f44, i32* bitcast ([3 x i8]* @global_var_150d8.60 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_10f50 = call i32 @function_114e0(i32 24)
  store i32 %v1_10f50, i32* %r0.global-to-local, align 4
  %v0_10f54 = load i32, i32* @r5, align 4
  %v1_10f54 = add i32 %v0_10f54, 24
  %v2_10f54 = inttoptr i32 %v1_10f54 to i32*
  %v3_10f54 = load i32, i32* %v2_10f54, align 4
  store i32 %v3_10f54, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_10f5c = add i32 %v0_10f54, 12
  %v3_10f5c = inttoptr i32 %v2_10f5c to i32*
  store i32 8, i32* %v3_10f5c, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10f64:                               ; preds = %dec_label_pc_10998
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10f68 = call i32 @function_11598(i32 30)
  store i32 %v2_108b4, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_10f78 = call i32 @function_114b4(i32 30, i32* %v2_108bc)
  %v3_10f7c = load i8, i8* %stack_var_-52, align 1
  %v4_10f7c = sext i8 %v3_10f7c to i32
  store i32 %v3_10f78, i32* %r2.global-to-local, align 4
  %v1_10f84 = add nsw i32 %v4_10f7c, -1
  store i32 %v1_10f84, i32* %r3.global-to-local, align 4
  %v0_10f88 = load i32, i32* @sl, align 4
  store i32 %v0_10f88, i32* %r0.global-to-local, align 4
  %v0_10f8c = load i32, i32* @r5, align 4
  %v1_10f8c = add i32 %v0_10f8c, 24
  %v2_10f8c = inttoptr i32 %v1_10f8c to i32*
  %v3_10f8c = load i32, i32* %v2_10f8c, align 4
  store i32 %v3_10f8c, i32* %r1.global-to-local, align 4
  %v4_10f90 = call i32 @function_12110(i32 %v0_10f88, i32 %v3_10f8c, i32 %v3_10f78, i32 %v1_10f84)
  %v2_10f94 = icmp eq i32 %v4_10f90, -1
  store i1 %v2_10f94, i1* %cpsr_c.global-to-local, align 1
  %v7_10f94 = icmp eq i32 %v4_10f90, -1
  store i1 %v7_10f94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_10f90, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_11180 = call i32 @function_114e0(i32 30)
  br i1 %v7_10f94, label %dec_label_pc_1117c, label %dec_label_pc_10fa0

dec_label_pc_10fa0:                               ; preds = %dec_label_pc_10f64
  store i32 %v1_11180, i32* %r0.global-to-local, align 4
  %v0_10fa8 = load i32, i32* @r5, align 4
  %v1_10fa8 = add i32 %v0_10fa8, 4
  %v2_10fa8 = inttoptr i32 %v1_10fa8 to i32*
  %v3_10fa8 = load i32, i32* %v2_10fa8, align 4
  store i32 %v3_10fa8, i32* %r0.global-to-local, align 4
  %v1_10fac = call i32 @function_129e0(i32 %v3_10fa8)
  store i32 %v1_10fac, i32* %r0.global-to-local, align 4
  %v0_10fb0 = load i32, i32* @r5, align 4
  %v1_10fb0 = add i32 %v0_10fb0, 284
  %v2_10fb0 = inttoptr i32 %v1_10fb0 to i8*
  %v3_10fb0 = load i8, i8* %v2_10fb0, align 1
  %v4_10fb0 = zext i8 %v3_10fb0 to i32
  %v1_10fb4 = add nuw nsw i32 %v4_10fb0, 1
  %v1_10fb8 = urem i32 %v1_10fb4, 256
  store i32 %v1_10fb8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_10fc0 = icmp ugt i32 %v1_10fb8, 9
  store i1 %v2_10fc0, i1* %cpsr_c.global-to-local, align 1
  %v7_10fc0 = icmp eq i32 %v1_10fb8, 10
  store i1 %v7_10fc0, i1* %cpsr_z.global-to-local, align 1
  %v2_10fc4 = add i32 %v0_10fb0, 4
  %v3_10fc4 = inttoptr i32 %v2_10fc4 to i32*
  store i32 -1, i32* %v3_10fc4, align 4
  %v0_10fc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_10fc8 = trunc i32 %v0_10fc8 to i8
  %v2_10fc8 = load i32, i32* @r5, align 4
  %v3_10fc8 = add i32 %v2_10fc8, 284
  %v4_10fc8 = inttoptr i32 %v3_10fc8 to i8*
  store i8 %v1_10fc8, i8* %v4_10fc8, align 1
  %v0_10fcc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10fcc, label %dec_label_pc_10fd0, label %dec_label_pc_112dc

dec_label_pc_10fd0:                               ; preds = %dec_label_pc_10fa0
  store i32 0, i32* @lr, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_10fd8 = load i32, i32* @r5, align 4
  %v1_10fd8 = add i32 %v0_10fd8, 24
  %v2_10fd8 = inttoptr i32 %v1_10fd8 to i32*
  %v3_10fd8 = load i32, i32* %v2_10fd8, align 4
  store i32 %v3_10fd8, i32* %ip.global-to-local, align 4
  %v3_10fdc = add i32 %v0_10fd8, 284
  %v4_10fdc = inttoptr i32 %v3_10fdc to i8*
  store i8 0, i8* %v4_10fdc, align 1
  %v0_10fe0 = load i32, i32* %r0.global-to-local, align 4
  %v1_10fe0 = load i32, i32* @r5, align 4
  %v2_10fe0 = add i32 %v1_10fe0, 12
  %v3_10fe0 = inttoptr i32 %v2_10fe0 to i32*
  store i32 %v0_10fe0, i32* %v3_10fe0, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10fe8:                               ; preds = %.thread223, %dec_label_pc_11068, %dec_label_pc_10b10, %dec_label_pc_10aac, %dec_label_pc_112dc, %dec_label_pc_11218, %dec_label_pc_10f0c, %dec_label_pc_10e58, %dec_label_pc_10da4, %dec_label_pc_10c38, %dec_label_pc_10ba0, %dec_label_pc_10fd0
  %v0_10fe8 = load i32, i32* %ip.global-to-local, align 4
  %v1_10fe8 = load i32, i32* @r7, align 4
  %v2_10fe8 = sub i32 %v0_10fe8, %v1_10fe8
  %v3_10fe8 = icmp uge i32 %v0_10fe8, %v1_10fe8
  store i1 %v3_10fe8, i1* %cpsr_c.global-to-local, align 1
  %v4_10fe8 = xor i32 %v1_10fe8, %v0_10fe8
  %v5_10fe8 = xor i32 %v2_10fe8, %v0_10fe8
  %v6_10fe8 = and i32 %v5_10fe8, %v4_10fe8
  %v7_10fe8 = icmp slt i32 %v6_10fe8, 0
  %v8_10fe8 = icmp slt i32 %v2_10fe8, 0
  %v9_10fe8 = icmp eq i32 %v0_10fe8, %v1_10fe8
  store i1 %v9_10fe8, i1* %cpsr_z.global-to-local, align 1
  %v2_10fec = xor i1 %v8_10fe8, %v7_10fe8
  %v0_10fe8.v1_10fe8 = select i1 %v2_10fec, i32 %v0_10fe8, i32 %v1_10fe8
  store i32 %v0_10fe8.v1_10fe8, i32* %r1.global-to-local, align 4
  %v2_10ff4 = sub i32 %v0_10fe8, %v0_10fe8.v1_10fe8
  store i32 %v2_10ff4, i32* @r2, align 4
  %v1_10ff8 = load i32, i32* @r5, align 4
  %v2_10ff8 = add i32 %v1_10ff8, 24
  %v3_10ff8 = inttoptr i32 %v2_10ff8 to i32*
  store i32 %v2_10ff4, i32* %v3_10ff8, align 4
  %v0_10ffc = load i32, i32* @sl, align 4
  %v1_10ffc = load i32, i32* %r1.global-to-local, align 4
  %v2_10ffc = add i32 %v1_10ffc, %v0_10ffc
  store i32 %v2_10ffc, i32* @r1, align 4
  store i32 %v0_10ffc, i32* @r0, align 4
  %v3_11004 = call i32 @function_12fe0(i32 %v0_10ffc, i32 %v2_10ffc, i32 %v2_10ff4)
  store i32 %v3_11004, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10998

dec_label_pc_1100c:                               ; preds = %dec_label_pc_10998
  %v1_1100c = add i32 %v0_10998, 24
  %v2_1100c = inttoptr i32 %v1_1100c to i32*
  %v3_1100c = load i32, i32* %v2_1100c, align 4
  store i32 %v3_1100c, i32* %ip.global-to-local, align 4
  %v1_11010 = add i32 %v3_1100c, -1
  store i32 %v1_11010, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11014 = icmp eq i32 %v1_11010, 0
  store i1 %v2_11014, i1* %cpsr_z.global-to-local, align 1
  %v5_11018 = icmp sgt i32 %v1_11010, 0
  br i1 %v5_11018, label %dec_label_pc_11040, label %dec_label_pc_1091c.backedge.thread

dec_label_pc_11020:                               ; preds = %bb344
  %v2_11020 = icmp ugt i8 %v3_11044, 35
  store i1 %v2_11020, i1* %cpsr_c.global-to-local, align 1
  %v7_11020 = icmp eq i8 %v3_11044, 36
  store i1 %v7_11020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11020, label %dec_label_pc_11054, label %dec_label_pc_11028

dec_label_pc_11028:                               ; preds = %dec_label_pc_11020
  %v2_11028 = icmp ugt i8 %v3_11044, 34
  store i1 %v2_11028, i1* %cpsr_c.global-to-local, align 1
  %v7_11028 = icmp eq i8 %v3_11044, 35
  store i1 %v7_11028, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11028, label %dec_label_pc_11054, label %dec_label_pc_11030

dec_label_pc_11030:                               ; preds = %dec_label_pc_11028
  %v2_11030 = icmp ugt i8 %v3_11044, 36
  store i1 %v2_11030, i1* %cpsr_c.global-to-local, align 1
  %v7_11030 = icmp eq i8 %v3_11044, 37
  store i1 %v7_11030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11030, label %dec_label_pc_11054, label %dec_label_pc_11038

dec_label_pc_11038:                               ; preds = %dec_label_pc_11030
  %v1_11038 = add i32 %v0_11054, -1
  store i32 %v1_11038, i32* %r0.global-to-local, align 4
  %v2_11038 = icmp ne i32 %v0_11054, 0
  store i1 %v2_11038, i1* %cpsr_c.global-to-local, align 1
  %v7_11038 = icmp eq i32 %v0_11054, 1
  store i1 %v7_11038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11038, label %dec_label_pc_1091c.backedge.thread457, label %dec_label_pc_11040

dec_label_pc_11040:                               ; preds = %dec_label_pc_1100c, %dec_label_pc_11038
  %v0_11054 = phi i32 [ %v1_11038, %dec_label_pc_11038 ], [ %v1_11010, %dec_label_pc_1100c ]
  %v2_11040 = add i32 %v0_11054, %v0_10998
  store i32 %v2_11040, i32* %r3.global-to-local, align 4
  %v1_11044 = add i32 %v2_11040, 28
  %v2_11044 = inttoptr i32 %v1_11044 to i8*
  %v3_11044 = load i8, i8* %v2_11044, align 1
  %v4_11044 = zext i8 %v3_11044 to i32
  store i32 %v4_11044, i32* %r3.global-to-local, align 4
  %v2_11048 = icmp ugt i8 %v3_11044, 61
  store i1 %v2_11048, i1* %cpsr_c.global-to-local, align 1
  %v7_11048 = icmp eq i8 %v3_11044, 62
  store i1 %v7_11048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11048, label %dec_label_pc_11054, label %bb344

bb344:                                            ; preds = %dec_label_pc_11040
  %v3_1104c = icmp ugt i8 %v3_11044, 57
  store i1 %v3_1104c, i1* %cpsr_c.global-to-local, align 1
  %v8_1104c = icmp eq i8 %v3_11044, 58
  store i1 %v8_1104c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1104c, label %dec_label_pc_11054, label %dec_label_pc_11020

dec_label_pc_11054:                               ; preds = %dec_label_pc_11040, %bb344, %dec_label_pc_11030, %dec_label_pc_11028, %dec_label_pc_11020
  %v1_11054 = add i32 %v0_11054, 1
  store i32 %v1_11054, i32* @r7, align 4
  %v2_11058 = icmp eq i32 %v1_11054, -1
  store i1 %v2_11058, i1* %cpsr_c.global-to-local, align 1
  %v7_11058 = icmp eq i32 %v0_11054, -2
  store i1 %v7_11058, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11058, label %dec_label_pc_1091c.backedge.thread457, label %dec_label_pc_11060

dec_label_pc_11060:                               ; preds = %dec_label_pc_11054
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11060 = icmp eq i32 %v1_11054, 0
  store i1 %v2_11060, i1* %cpsr_z.global-to-local, align 1
  %tmp345 = icmp slt i32 %v1_11054, 1
  br i1 %tmp345, label %dec_label_pc_10aa4, label %dec_label_pc_11068

dec_label_pc_11068:                               ; preds = %dec_label_pc_11060
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_1106c = call i32 @function_11598(i32 28)
  store i32 %v2_108b4, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_1107c = call i32 @function_114b4(i32 28, i32* %v2_108bc)
  store i32 %v3_1107c, i32* %r0.global-to-local, align 4
  %v3_11080 = load i8, i8* %stack_var_-52, align 1
  %v4_11080 = sext i8 %v3_11080 to i32
  store i32 %v4_11080, i32* %r2.global-to-local, align 4
  store i32 %v3_1107c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1108c = load i32, i32* @r5, align 4
  %v1_1108c = add i32 %v0_1108c, 4
  %v2_1108c = inttoptr i32 %v1_1108c to i32*
  %v3_1108c = load i32, i32* %v2_1108c, align 4
  store i32 %v3_1108c, i32* %r0.global-to-local, align 4
  %v4_11090 = inttoptr i32 %v3_1107c to i32*
  %v5_11090 = call i32 @function_1323c(i32 %v3_1108c, i32* %v4_11090, i32 %v4_11080, i32 16384)
  store i32 %v5_11090, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_110a0 = load i32, i32* @r5, align 4
  %v1_110a0 = add i32 %v0_110a0, 4
  %v2_110a0 = inttoptr i32 %v1_110a0 to i32*
  %v3_110a0 = load i32, i32* %v2_110a0, align 4
  store i32 %v3_110a0, i32* %r0.global-to-local, align 4
  %v5_110a4 = call i32 @function_1323c(i32 %v3_110a0, i32* bitcast ([3 x i8]* @global_var_150d8.60 to i32*), i32 2, i32 16384)
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_110ac = call i32 @function_114e0(i32 28)
  store i32 %v1_110ac, i32* %r0.global-to-local, align 4
  %v0_110b0 = load i32, i32* @r5, align 4
  %v1_110b0 = add i32 %v0_110b0, 24
  %v2_110b0 = inttoptr i32 %v1_110b0 to i32*
  %v3_110b0 = load i32, i32* %v2_110b0, align 4
  store i32 %v3_110b0, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_110b8 = add i32 %v0_110b0, 12
  %v3_110b8 = inttoptr i32 %v2_110b8 to i32*
  store i32 10, i32* %v3_110b8, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_110c0:                               ; preds = %dec_label_pc_10a1c
  store i32 ptrtoint (i32* @global_var_15242.262 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_110cc, i32* @r0, align 4
  %v3_110d0 = call i32 @function_12fd0(i32 %v2_110cc, i32 ptrtoint (i32* @global_var_15242.262 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_110dc, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_15239.264 to i32), i32* @r1, align 4
  %v3_110e4 = call i32 @function_12fd0(i32 %v2_110dc, i32 ptrtoint (i32* @global_var_15239.264 to i32), i32 9)
  store i32 %v3_110e4, i32* %r0.global-to-local, align 4
  %v0_110e8 = load i32, i32* @r5, align 4
  %v1_110e8 = add i32 %v0_110e8, 24
  %v2_110e8 = inttoptr i32 %v1_110e8 to i32*
  %v3_110e8 = load i32, i32* %v2_110e8, align 4
  store i32 %v3_110e8, i32* %ip.global-to-local, align 4
  %v0_110ec = load i32, i32* @r6, align 4
  %v1_110ec = add i32 %v0_110ec, 2
  store i32 %v1_110ec, i32* %r2.global-to-local, align 4
  %v0_110f0 = load i32, i32* @sl, align 4
  %v2_110f0 = add i32 %v0_110f0, %v3_110e8
  store i32 %v2_110f0, i32* %r3.global-to-local, align 4
  %v3_110f4 = icmp uge i32 %v2_110f0, %v1_110ec
  store i1 %v3_110f4, i1* %cpsr_c.global-to-local, align 1
  %v9_110f4 = icmp eq i32 %v2_110f0, %v1_110ec
  store i1 %v9_110f4, i1* %cpsr_z.global-to-local, align 1
  %v2_110f8 = xor i1 %v3_110f4, true
  %v3_110f8 = or i1 %v9_110f4, %v2_110f8
  br i1 %v3_110f8, label %dec_label_pc_110c0.dec_label_pc_10a94.loopexit_crit_edge, label %dec_label_pc_110fc

dec_label_pc_110c0.dec_label_pc_10a94.loopexit_crit_edge: ; preds = %dec_label_pc_110c0
  %v0_10a94.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10a94

dec_label_pc_110fc:                               ; preds = %dec_label_pc_110c0
  %v0_110fc = load i32, i32* @r4, align 4
  %v1_110fc = add i32 %v0_110fc, 1
  %v2_110fc = inttoptr i32 %v1_110fc to i8*
  %v3_110fc = load i8, i8* %v2_110fc, align 1
  %v4_110fc = zext i8 %v3_110fc to i32
  store i32 %v4_110fc, i32* %r3.global-to-local, align 4
  %v2_11100 = icmp ugt i8 %v3_110fc, 30
  store i1 %v2_11100, i1* %cpsr_c.global-to-local, align 1
  %v7_11100 = icmp eq i8 %v3_110fc, 31
  store i1 %v7_11100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11100, label %dec_label_pc_1128c, label %dec_label_pc_11108

dec_label_pc_11108:                               ; preds = %dec_label_pc_110fc
  %v1_11108 = add i32 %v0_110fc, -1
  %v2_11108 = inttoptr i32 %v1_11108 to i8*
  %v3_11108 = load i8, i8* %v2_11108, align 1
  %v4_11108 = zext i8 %v3_11108 to i32
  store i32 %v4_11108, i32* %r3.global-to-local, align 4
  %v2_1110c = icmp ugt i8 %v3_11108, -4
  store i1 %v2_1110c, i1* %cpsr_c.global-to-local, align 1
  %v7_1110c = icmp eq i8 %v3_11108, -3
  store i1 %v7_1110c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1110c, label %.thread75, label %dec_label_pc_1111c

.thread75:                                        ; preds = %dec_label_pc_11108
  store i32 -4, i32* %r2.global-to-local, align 4
  store i8 -4, i8* %v2_11108, align 1
  %v0_11118.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11118.pr.pr, label %dec_label_pc_10a30, label %.thread75.dec_label_pc_1111c_crit_edge

.thread75.dec_label_pc_1111c_crit_edge:           ; preds = %.thread75
  %v0_1111c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1111c

dec_label_pc_1111c:                               ; preds = %.thread75.dec_label_pc_1111c_crit_edge, %dec_label_pc_11108
  %v0_1111c = phi i32 [ %v0_1111c.pre, %.thread75.dec_label_pc_1111c_crit_edge ], [ %v4_11108, %dec_label_pc_11108 ]
  %v2_1111c = icmp ugt i32 %v0_1111c, 250
  store i1 %v2_1111c, i1* %cpsr_c.global-to-local, align 1
  %v7_1111c = icmp eq i32 %v0_1111c, 251
  store i1 %v7_1111c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1111c, label %bb346, label %dec_label_pc_10a30

bb346:                                            ; preds = %dec_label_pc_1111c
  %v1_11120 = load i32, i32* %r8.global-to-local, align 4
  %v2_11120 = trunc i32 %v1_11120 to i8
  %v3_11120 = load i32, i32* @r4, align 4
  %v4_11120 = add i32 %v3_11120, -1
  %v5_11120 = inttoptr i32 %v4_11120 to i8*
  store i8 %v2_11120, i8* %v5_11120, align 1
  br label %dec_label_pc_10a30

dec_label_pc_11128:                               ; preds = %dec_label_pc_10b70, %dec_label_pc_10b4c, %dec_label_pc_10b8c
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_1112c = call i32 @function_11598(i32 31)
  store i32 %v2_108b4, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_1113c = call i32 @function_114b4(i32 31, i32* %v2_108bc)
  %v3_11140 = load i8, i8* %stack_var_-52, align 1
  %v4_11140 = sext i8 %v3_11140 to i32
  store i32 %v3_1113c, i32* %r2.global-to-local, align 4
  %v1_11148 = add nsw i32 %v4_11140, -1
  store i32 %v1_11148, i32* %r3.global-to-local, align 4
  %v0_1114c = load i32, i32* @sl, align 4
  store i32 %v0_1114c, i32* %r0.global-to-local, align 4
  %v0_11150 = load i32, i32* @r5, align 4
  %v1_11150 = add i32 %v0_11150, 24
  %v2_11150 = inttoptr i32 %v1_11150 to i32*
  %v3_11150 = load i32, i32* %v2_11150, align 4
  store i32 %v3_11150, i32* %r1.global-to-local, align 4
  %v4_11154 = call i32 @function_12110(i32 %v0_1114c, i32 %v3_11150, i32 %v3_1113c, i32 %v1_11148)
  store i32 %v4_11154, i32* %r0.global-to-local, align 4
  %v1_11158 = add i32 %v4_11154, 1
  store i32 %v1_11158, i32* @r7, align 4
  %v2_11158 = icmp eq i32 %v4_11154, -1
  store i1 %v2_11158, i1* %cpsr_c.global-to-local, align 1
  %v7_11158 = icmp eq i32 %v1_11158, 0
  store i1 %v7_11158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11158, label %thread-pre-split78, label %bb347

bb347:                                            ; preds = %dec_label_pc_11128
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split78

thread-pre-split78:                               ; preds = %dec_label_pc_11128, %bb347
  %v0_11160 = phi i1 [ false, %bb347 ], [ true, %dec_label_pc_11128 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_11160, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_112f4 = call i32 @function_114e0(i32 31)
  store i32 %v1_112f4, i32* %r0.global-to-local, align 4
  br i1 %v0_11160, label %dec_label_pc_112f0, label %dec_label_pc_11168

dec_label_pc_11168:                               ; preds = %thread-pre-split78
  %v0_11170 = load i32, i32* @r7, align 4
  %v3_11170 = icmp eq i32 %v0_11170, -1
  store i1 %v3_11170, i1* %cpsr_c.global-to-local, align 1
  %v8_11170 = icmp eq i32 %v0_11170, -1
  store i1 %v8_11170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11170, label %dec_label_pc_10918.loopexit, label %dec_label_pc_10b98

dec_label_pc_1117c:                               ; preds = %dec_label_pc_10f64
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_11188 = call i32 @function_11598(i32 29)
  store i32 %v2_108b4, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_11198 = call i32 @function_114b4(i32 29, i32* nonnull %v2_108bc)
  store i32 %v3_11198, i32* %r0.global-to-local, align 4
  %v3_1119c = load i8, i8* %stack_var_-52, align 1
  %v4_1119c = sext i8 %v3_1119c to i32
  store i32 %v3_11198, i32* %r2.global-to-local, align 4
  %v1_111a4 = add nsw i32 %v4_1119c, -1
  store i32 %v1_111a4, i32* %r3.global-to-local, align 4
  %v0_111a8 = load i32, i32* @r5, align 4
  %v1_111a8 = add i32 %v0_111a8, 24
  %v2_111a8 = inttoptr i32 %v1_111a8 to i32*
  %v3_111a8 = load i32, i32* %v2_111a8, align 4
  store i32 %v3_111a8, i32* %r1.global-to-local, align 4
  %v0_111ac = load i32, i32* @sl, align 4
  store i32 %v0_111ac, i32* %r0.global-to-local, align 4
  %v4_111b0 = call i32 @function_12110(i32 %v0_111ac, i32 %v3_111a8, i32 %v3_11198, i32 %v1_111a4)
  %sext6 = mul i32 %v4_111b0, 16777216
  %v1_111b4 = sdiv i32 %sext6, 16777216
  store i32 %v1_111b4, i32* @r7, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_111bc = call i32 @function_114e0(i32 29)
  store i32 %v1_111bc, i32* %r0.global-to-local, align 4
  %v0_111c0 = load i32, i32* @r7, align 4
  %v2_111c0 = icmp eq i32 %v0_111c0, -1
  store i1 %v2_111c0, i1* %cpsr_c.global-to-local, align 1
  %v7_111c0 = icmp eq i32 %v0_111c0, -1
  store i1 %v7_111c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_111c0, label %dec_label_pc_10918.loopexit, label %dec_label_pc_111c8

dec_label_pc_111c8:                               ; preds = %dec_label_pc_1117c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_111c8 = icmp eq i32 %v0_111c0, 0
  store i1 %v2_111c8, i1* %cpsr_z.global-to-local, align 1
  %tmp348 = icmp slt i32 %v0_111c0, 1
  br i1 %tmp348, label %dec_label_pc_10aa4, label %dec_label_pc_111d0

dec_label_pc_111d0:                               ; preds = %dec_label_pc_111c8
  %v0_111d0 = load i32, i32* @r5, align 4
  %v1_111d0 = add i32 %v0_111d0, 21
  %v2_111d0 = inttoptr i32 %v1_111d0 to i8*
  %v3_111d0 = load i8, i8* %v2_111d0, align 1
  %v4_111d0 = zext i8 %v3_111d0 to i32
  store i32 %v4_111d0, i32* %r3.global-to-local, align 4
  %v1_111d4 = add i32 %v0_111d0, 20
  %v2_111d4 = inttoptr i32 %v1_111d4 to i8*
  %v3_111d4 = load i8, i8* %v2_111d4, align 1
  %v4_111d4 = zext i8 %v3_111d4 to i32
  store i32 %v4_111d4, i32* %r2.global-to-local, align 4
  %v1_111d8 = add i32 %v0_111d0, 16
  %v2_111d8 = inttoptr i32 %v1_111d8 to i32*
  %v3_111d8 = load i32, i32* %v2_111d8, align 4
  store i32 %v3_111d8, i32* %r1.global-to-local, align 4
  %v4_111dc = mul nuw nsw i32 %v4_111d0, 256
  %v5_111dc = or i32 %v4_111d4, %v4_111dc
  store i32 %v5_111dc, i32* %r2.global-to-local, align 4
  %v1_111e0 = and i32 %v4_111d4, 128
  %v2_111e0 = icmp ne i32 %v1_111e0, 0
  store i1 %v2_111e0, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_111d0, i32* %r3.global-to-local, align 4
  store i32 %v3_111d8, i32* %stack_var_-56, align 4
  store i32 %v5_111dc, i32* %stack_var_-38, align 4
  %v1_111f0 = inttoptr i32 %v0_111d0 to i32*
  %v2_111f0 = load i32, i32* %v1_111f0, align 4
  store i32 %v2_111f0, i32* %r8.global-to-local, align 4
  %v0_111f4 = call i32 @function_12a0c()
  store i32 %v0_111f4, i32* %r0.global-to-local, align 4
  %v7_111f8 = icmp eq i32 %v0_111f4, -1
  %.359 = zext i1 %v7_111f8 to i32
  store i32 %.359, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11204 = icmp eq i32 %v0_111f4, 0
  store i1 %v2_11204, i1* %cpsr_z.global-to-local, align 1
  %tmp351 = icmp slt i32 %v0_111f4, 1
  br i1 %tmp351, label %bb352, label %.thread81

.thread81:                                        ; preds = %dec_label_pc_111d0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11218

bb352:                                            ; preds = %dec_label_pc_111d0
  store i32 %.359, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11210 = icmp eq i1 %v7_111f8, false
  store i1 %v2_11210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11210, label %dec_label_pc_11340, label %dec_label_pc_11218

dec_label_pc_11218:                               ; preds = %.thread81, %bb352
  %v0_11218 = load i32, i32* @r5, align 4
  %v1_11218 = add i32 %v0_11218, 4
  %v2_11218 = inttoptr i32 %v1_11218 to i32*
  %v3_11218 = load i32, i32* %v2_11218, align 4
  store i32 %v3_11218, i32* %r0.global-to-local, align 4
  %v1_1121c = call i32 @function_129e0(i32 %v3_11218)
  store i32 %v1_1121c, i32* %r0.global-to-local, align 4
  %v0_11220 = load i32, i32* @r5, align 4
  %v1_11220 = add i32 %v0_11220, 24
  %v2_11220 = inttoptr i32 %v1_11220 to i32*
  %v3_11220 = load i32, i32* %v2_11220, align 4
  store i32 %v3_11220, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_11228 = load i32, i32* @r4, align 4
  %v2_11228 = add i32 %v0_11220, 4
  %v3_11228 = inttoptr i32 %v2_11228 to i32*
  store i32 %v0_11228, i32* %v3_11228, align 4
  %v0_1122c = load i32, i32* %r2.global-to-local, align 4
  %v1_1122c = load i32, i32* @r5, align 4
  %v2_1122c = add i32 %v1_1122c, 12
  %v3_1122c = inttoptr i32 %v2_1122c to i32*
  store i32 %v0_1122c, i32* %v3_1122c, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_11234:                               ; preds = %dec_label_pc_10934
  br i1 %v2_10958, label %dec_label_pc_113fc, label %dec_label_pc_11238

dec_label_pc_11238:                               ; preds = %dec_label_pc_11234
  %v3_11238 = icmp eq i32 %v5_10954, -1
  store i1 %v3_11238, i1* %cpsr_c.global-to-local, align 1
  %v8_11238 = icmp eq i32 %v5_10954, -1
  store i1 %v8_11238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11238, label %dec_label_pc_11240, label %dec_label_pc_10980

dec_label_pc_11240:                               ; preds = %dec_label_pc_11238
  %v0_11240 = load i32, i32* @sb, align 4
  %v1_11240 = inttoptr i32 %v0_11240 to i32*
  %v2_11240 = load i32, i32* %v1_11240, align 4
  store i32 %v2_11240, i32* %r3.global-to-local, align 4
  %v2_11244 = icmp ugt i32 %v2_11240, 10
  store i1 %v2_11244, i1* %cpsr_c.global-to-local, align 1
  %v7_11244 = icmp eq i32 %v2_11240, 11
  store i1 %v7_11244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11244, label %dec_label_pc_10768, label %dec_label_pc_1124c

dec_label_pc_1124c:                               ; preds = %dec_label_pc_11240, %dec_label_pc_113fc
  %v0_1124c = load i32, i32* @r5, align 4
  %v1_1124c = add i32 %v0_1124c, 4
  %v2_1124c = inttoptr i32 %v1_1124c to i32*
  %v3_1124c = load i32, i32* %v2_1124c, align 4
  store i32 %v3_1124c, i32* %r0.global-to-local, align 4
  %v1_11250 = call i32 @function_129e0(i32 %v3_1124c)
  store i32 %v1_11250, i32* %r0.global-to-local, align 4
  %v0_11254 = load i32, i32* @r5, align 4
  %v1_11254 = add i32 %v0_11254, 284
  %v2_11254 = inttoptr i32 %v1_11254 to i8*
  %v3_11254 = load i8, i8* %v2_11254, align 1
  %v4_11254 = zext i8 %v3_11254 to i32
  %v1_11258 = add nuw nsw i32 %v4_11254, 1
  %v1_1125c = urem i32 %v1_11258, 256
  store i32 %v1_1125c, i32* %r3.global-to-local, align 4
  %v2_11260 = icmp ugt i32 %v1_1125c, 8
  store i1 %v2_11260, i1* %cpsr_c.global-to-local, align 1
  %v7_11260 = icmp eq i32 %v1_1125c, 9
  store i1 %v7_11260, i1* %cpsr_z.global-to-local, align 1
  %v2_11264 = xor i1 %v7_11260, true
  %v3_11264 = and i1 %v2_11260, %v2_11264
  br i1 %v3_11264, label %bb353, label %bb354

bb353:                                            ; preds = %dec_label_pc_1124c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb354

bb354:                                            ; preds = %dec_label_pc_1124c, %bb353
  store i32 -1, i32* @r4, align 4
  %v1_1126c = trunc i32 %v1_11258 to i8
  store i8 %v1_1126c, i8* %v2_11254, align 1
  %v0_11270 = load i32, i32* @r4, align 4
  %v1_11270 = load i32, i32* @r5, align 4
  %v2_11270 = add i32 %v1_11270, 4
  %v3_11270 = inttoptr i32 %v2_11270 to i32*
  store i32 %v0_11270, i32* %v3_11270, align 4
  %v0_11274 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11274 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_11274 = xor i1 %v1_11274, true
  %v3_11274 = and i1 %v0_11274, %v2_11274
  br i1 %v3_11274, label %bb355, label %.thread228

bb355:                                            ; preds = %bb354
  %v4_11274 = load i32, i32* %r0.global-to-local, align 4
  %v5_11274 = load i32, i32* @r5, align 4
  %v6_11274 = add i32 %v5_11274, 12
  %v7_11274 = inttoptr i32 %v6_11274 to i32*
  store i32 %v4_11274, i32* %v7_11274, align 4
  %v4_11278 = load i32, i32* %r0.global-to-local, align 4
  %v5_11278 = trunc i32 %v4_11278 to i8
  %v6_11278 = load i32, i32* @r5, align 4
  %v7_11278 = add i32 %v6_11278, 284
  %v8_11278 = inttoptr i32 %v7_11278 to i8*
  store i8 %v5_11278, i8* %v8_11278, align 1
  %v0_1127c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_1127c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread228

.thread228:                                       ; preds = %bb354, %bb355
  %v1_1127c = phi i1 [ %v1_1127c.pre, %bb355 ], [ %v1_11274, %bb354 ]
  %v0_1127c = phi i1 [ %v0_1127c.pre, %bb355 ], [ %v0_11274, %bb354 ]
  %v2_1127c = xor i1 %v1_1127c, true
  %v3_1127c = and i1 %v0_1127c, %v2_1127c
  br i1 %v3_1127c, label %dec_label_pc_10768, label %dec_label_pc_11280

dec_label_pc_11280:                               ; preds = %.thread228
  %v0_11280 = load i32, i32* @r5, align 4
  store i32 %v0_11280, i32* @r0, align 4
  %v0_11284 = call i32 @function_fa58()
  store i32 %v0_11284, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10768

dec_label_pc_1128c:                               ; preds = %dec_label_pc_110fc
  store i32 %v2_110cc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_1129c = add i32 %v0_110e8, 4
  %v2_1129c = inttoptr i32 %v1_1129c to i32*
  %v3_1129c = load i32, i32* %v2_1129c, align 4
  store i32 %v3_1129c, i32* %r0.global-to-local, align 4
  %v5_112a0 = call i32 @function_1323c(i32 %v3_1129c, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_112a0, i32* %r0.global-to-local, align 4
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  %v0_112a8 = load i32, i32* @r5, align 4
  %v1_112a8 = add i32 %v0_112a8, 4
  %v2_112a8 = inttoptr i32 %v1_112a8 to i32*
  %v3_112a8 = load i32, i32* %v2_112a8, align 4
  store i32 %v3_112a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10a74

dec_label_pc_112b8:                               ; preds = %dec_label_pc_10924
  store i32 %.pre, i32* @r0, align 4
  %v1_112c0 = add i32 %v0_112b8, 92
  store i32 %v1_112c0, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_112c8 = call i32 @function_12fe0(i32 %.pre, i32 %v1_112c0, i32 192)
  store i32 %v3_112c8, i32* %r0.global-to-local, align 4
  %v0_112cc = load i32, i32* @r5, align 4
  %v1_112cc = add i32 %v0_112cc, 24
  %v2_112cc = inttoptr i32 %v1_112cc to i32*
  %v3_112cc = load i32, i32* %v2_112cc, align 4
  store i32 %v3_112cc, i32* %r3.global-to-local, align 4
  %v1_112d0 = add i32 %v3_112cc, -64
  store i32 %v1_112d0, i32* %ip.global-to-local, align 4
  store i32 %v1_112d0, i32* %v2_112cc, align 4
  br label %dec_label_pc_10934

dec_label_pc_112dc:                               ; preds = %dec_label_pc_10fa0
  %v0_112dc = load i32, i32* @r5, align 4
  store i32 %v0_112dc, i32* @r0, align 4
  %v0_112e0 = call i32 @function_fa58()
  store i32 %v0_112e0, i32* %r0.global-to-local, align 4
  %v0_112e4 = load i32, i32* @r5, align 4
  %v1_112e4 = add i32 %v0_112e4, 24
  %v2_112e4 = inttoptr i32 %v1_112e4 to i32*
  %v3_112e4 = load i32, i32* %v2_112e4, align 4
  store i32 %v3_112e4, i32* %ip.global-to-local, align 4
  %v0_112e8 = load i32, i32* @r4, align 4
  store i32 %v0_112e8, i32* @r7, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_112f0:                               ; preds = %thread-pre-split78
  %v0_112f8 = load i32, i32* @r5, align 4
  %v1_112f8 = add i32 %v0_112f8, 12
  %v2_112f8 = inttoptr i32 %v1_112f8 to i32*
  %v3_112f8 = load i32, i32* %v2_112f8, align 4
  br label %dec_label_pc_1091c.backedge

dec_label_pc_1091c.backedge.thread:               ; preds = %dec_label_pc_10bdc, %dec_label_pc_10c90, %dec_label_pc_10dfc, %dec_label_pc_10eb0, %dec_label_pc_1100c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10924

dec_label_pc_1091c.backedge.thread457:            ; preds = %dec_label_pc_10c08, %dec_label_pc_10d74, %dec_label_pc_10edc, %dec_label_pc_10e28, %dec_label_pc_11038, %dec_label_pc_10c24, %dec_label_pc_10d90, %dec_label_pc_10e44, %dec_label_pc_10ef8, %dec_label_pc_11054
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10924

dec_label_pc_1091c.backedge:                      ; preds = %dec_label_pc_112f0, %dec_label_pc_11328
  %storemerge460 = phi i32 [ %v3_112f8, %dec_label_pc_112f0 ], [ %v3_11338, %dec_label_pc_11328 ]
  %v0_1091c.be = phi i32 [ %v3_112f8, %dec_label_pc_112f0 ], [ %v3_11338, %dec_label_pc_11328 ]
  %v0_10924142 = phi i32 [ %v0_112f8, %dec_label_pc_112f0 ], [ %v0_11338, %dec_label_pc_11328 ]
  store i32 %storemerge460, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1091c = icmp eq i32 %v0_1091c.be, 0
  store i1 %v2_1091c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1091c, label %dec_label_pc_10768, label %dec_label_pc_10924

dec_label_pc_11300:                               ; preds = %dec_label_pc_108a0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_11300 = load i32, i32* %stack_var_-56, align 4
  %v0_11304 = load i32, i32* @r6, align 4
  store i32 %v0_11304, i32* %r2.global-to-local, align 4
  %v1_11308 = add i32 %v3_11300, -1
  store i32 %v1_11308, i32* %r3.global-to-local, align 4
  %v0_1130c = load i32, i32* @sl, align 4
  store i32 %v0_1130c, i32* %r0.global-to-local, align 4
  %v0_11310 = load i32, i32* @r5, align 4
  %v1_11310 = add i32 %v0_11310, 24
  %v2_11310 = inttoptr i32 %v1_11310 to i32*
  %v3_11310 = load i32, i32* %v2_11310, align 4
  store i32 %v3_11310, i32* %r1.global-to-local, align 4
  %v4_11314 = call i32 @function_12110(i32 %v0_1130c, i32 %v3_11310, i32 %v0_11304, i32 %v1_11308)
  store i32 %v4_11314, i32* %r0.global-to-local, align 4
  %v2_11318 = icmp eq i32 %v4_11314, -1
  store i1 %v2_11318, i1* %cpsr_c.global-to-local, align 1
  %v7_11318 = icmp eq i32 %v4_11314, -1
  store i1 %v7_11318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11318, label %dec_label_pc_11328, label %dec_label_pc_10900

dec_label_pc_11328:                               ; preds = %dec_label_pc_11300
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_1132c = call i32 @function_114e0(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_11334 = call i32 @function_114e0(i32 33)
  store i32 %v1_11334, i32* %r0.global-to-local, align 4
  %v0_11338 = load i32, i32* @r5, align 4
  %v1_11338 = add i32 %v0_11338, 12
  %v2_11338 = inttoptr i32 %v1_11338 to i32*
  %v3_11338 = load i32, i32* %v2_11338, align 4
  br label %dec_label_pc_1091c.backedge

dec_label_pc_11340:                               ; preds = %bb352
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_1134c = call i32 @function_132cc(i32 2, i32 1, i32 0)
  store i32 %v3_1134c, i32* %r0.global-to-local, align 4
  %v2_11350 = icmp eq i32 %v3_1134c, -1
  store i1 %v2_11350, i1* %cpsr_c.global-to-local, align 1
  %v7_11350 = icmp eq i32 %v3_1134c, -1
  store i1 %v7_11350, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_1134c, i32* @r4, align 4
  br i1 %v7_11350, label %dec_label_pc_114ac, label %dec_label_pc_1135c

dec_label_pc_1135c:                               ; preds = %dec_label_pc_11340
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_11360 = call i32 @function_11598(i32 4)
  store i32 ptrtoint (i8** @global_var_1dd44.104 to i32), i32* %r2.global-to-local, align 4
  store i32 385990760, i32* %r3.global-to-local, align 4
  store i32 385990760, i32* @global_var_1dd48.105, align 4
  %v0_11378 = load i32, i32* @r6, align 4
  store i32 %v0_11378, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_11380 = inttoptr i32 %v0_11378 to i32*
  %v3_11380 = call i32 @function_114b4(i32 4, i32* %v2_11380)
  %v4_11380 = inttoptr i32 %v3_11380 to i8*
  store i32 %v3_11380, i32* %r0.global-to-local, align 4
  %v2_11384 = add i32 %v3_11380, 1
  %v3_11384 = inttoptr i32 %v2_11384 to i8*
  %v4_11384 = load i8, i8* %v3_11384, align 1
  %v5_11384 = zext i8 %v4_11384 to i32
  store i32 %v5_11384, i32* %r2.global-to-local, align 4
  %v3_11388 = load i8, i8* %v4_11380, align 1
  %v4_11388 = zext i8 %v3_11388 to i32
  %v4_1138c = mul nuw nsw i32 %v5_11384, 256
  %v5_1138c = or i32 %v4_11388, %v4_1138c
  store i32 %v5_1138c, i32* %r3.global-to-local, align 4
  %v1_11390 = and i32 %v4_11388, 128
  %v2_11390 = icmp ne i32 %v1_11390, 0
  store i1 %v2_11390, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_11384, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_113a0 = call i32 @function_114e0(i32 4)
  %v0_113a4 = load i32, i32* @r4, align 4
  store i32 %v0_113a4, i32* %r0.global-to-local, align 4
  store i32 %v2_113a8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_113b0 = call i32 @function_13128(i32 %v0_113a4, %sockaddr* %v3_113b0, i32 16)
  store i32 %v4_113b0, i32* %r0.global-to-local, align 4
  %v3_113b4 = icmp eq i32 %v4_113b0, -1
  store i1 %v3_113b4, i1* %cpsr_c.global-to-local, align 1
  %v8_113b4 = icmp eq i32 %v4_113b0, -1
  store i1 %v8_113b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_113b4, label %dec_label_pc_113bc, label %dec_label_pc_11408

dec_label_pc_113bc:                               ; preds = %dec_label_pc_1135c
  %v0_113bc = load i32, i32* @r4, align 4
  store i32 %v0_113bc, i32* %r0.global-to-local, align 4
  %v1_113c0 = call i32 @function_129e0(i32 %v0_113bc)
  %v0_113c4 = load i32, i32* @r6, align 4
  store i32 %v0_113c4, i32* %r0.global-to-local, align 4
  %v1_113c8 = call i32 @function_13ba8(i32 %v0_113c4)
  store i32 %v1_113c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_113cc

dec_label_pc_113cc:                               ; preds = %dec_label_pc_106c4, %dec_label_pc_106a8, %dec_label_pc_113bc
  %v0_113cc = load i32, i32* @r7, align 4
  %v1_113cc = load i32, i32* @r4, align 4
  %v2_113cc = add i32 %v1_113cc, 12
  %v3_113cc = inttoptr i32 %v2_113cc to i32*
  store i32 %v0_113cc, i32* %v3_113cc, align 4
  %v0_113d0 = load i32, i32* @r7, align 4
  %v1_113d0 = trunc i32 %v0_113d0 to i8
  %v2_113d0 = load i32, i32* @r4, align 4
  %v3_113d0 = add i32 %v2_113d0, 284
  %v4_113d0 = inttoptr i32 %v3_113d0 to i8*
  store i8 %v1_113d0, i8* %v4_113d0, align 1
  br label %bb317

dec_label_pc_113d8:                               ; preds = %dec_label_pc_10850, %dec_label_pc_10808
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1088c

dec_label_pc_113e0:                               ; preds = %dec_label_pc_107c8
  %v0_113e0 = load i32, i32* @r5, align 4
  %v1_113e0 = add i32 %v0_113e0, 4
  %v2_113e0 = inttoptr i32 %v1_113e0 to i32*
  %v3_113e0 = load i32, i32* %v2_113e0, align 4
  store i32 %v3_113e0, i32* %r0.global-to-local, align 4
  %v1_113e4 = call i32 @function_129e0(i32 %v3_113e0)
  store i32 %v1_113e4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_113ec = load i32, i32* @r6, align 4
  %v1_113ec = load i32, i32* @r5, align 4
  %v2_113ec = add i32 %v1_113ec, 12
  %v3_113ec = inttoptr i32 %v2_113ec to i32*
  store i32 %v0_113ec, i32* %v3_113ec, align 4
  %v0_113f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_113f0 = load i32, i32* @r5, align 4
  %v2_113f0 = add i32 %v1_113f0, 4
  %v3_113f0 = inttoptr i32 %v2_113f0 to i32*
  store i32 %v0_113f0, i32* %v3_113f0, align 4
  %v0_113f4 = load i32, i32* @r6, align 4
  %v1_113f4 = trunc i32 %v0_113f4 to i8
  %v2_113f4 = load i32, i32* @r5, align 4
  %v3_113f4 = add i32 %v2_113f4, 284
  %v4_113f4 = inttoptr i32 %v3_113f4 to i8*
  store i8 %v1_113f4, i8* %v4_113f4, align 1
  br label %dec_label_pc_10768

dec_label_pc_113fc:                               ; preds = %dec_label_pc_11234
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_11400 = load i32, i32* @sb, align 4
  %v2_11400 = inttoptr i32 %v1_11400 to i32*
  store i32 104, i32* %v2_11400, align 4
  br label %dec_label_pc_1124c

dec_label_pc_11408:                               ; preds = %dec_label_pc_1135c
  store i32 %v2_108b4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11418 = load i32, i32* @r4, align 4
  store i32 %v0_11418, i32* %r0.global-to-local, align 4
  %v0_1141c = load i32, i32* @r6, align 4
  %v6_1141c = trunc i32 %v0_1141c to i8
  store i8 %v6_1141c, i8* %stack_var_-52, align 1
  %v7_11420 = call i32 @function_1323c(i32 %v0_11418, i32* %v2_108bc, i32 1, i32 16384)
  store i32 %v2_108c8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11434 = load i32, i32* @r4, align 4
  store i32 %v0_11434, i32* %r0.global-to-local, align 4
  %v5_11438 = call i32 @function_1323c(i32 %v0_11434, i32* nonnull %stack_var_-56, i32 4, i32 16384)
  %v2_11440 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_11440, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1144c = load i32, i32* @r4, align 4
  store i32 %v0_1144c, i32* %r0.global-to-local, align 4
  %v5_11450 = call i32 @function_1323c(i32 %v0_1144c, i32* nonnull %stack_var_-38, i32 2, i32 16384)
  %v0_11454 = load i32, i32* %r8.global-to-local, align 4
  %v1_11454 = add i32 %v0_11454, 12
  store i32 %v1_11454, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11460 = load i32, i32* @r4, align 4
  store i32 %v0_11460, i32* %r0.global-to-local, align 4
  %v4_11464 = inttoptr i32 %v1_11454 to i32*
  %v5_11464 = call i32 @function_1323c(i32 %v0_11460, i32* %v4_11464, i32 1, i32 16384)
  store i32 %v5_11464, i32* %r0.global-to-local, align 4
  %v0_11468 = load i32, i32* %r8.global-to-local, align 4
  %v1_11468 = inttoptr i32 %v0_11468 to i32*
  %v2_11468 = load i32, i32* %v1_11468, align 4
  store i32 %v2_11468, i32* %r1.global-to-local, align 4
  %v1_1146c = add i32 %v0_11468, 12
  %v2_1146c = inttoptr i32 %v1_1146c to i8*
  %v3_1146c = load i8, i8* %v2_1146c, align 1
  %v4_1146c = zext i8 %v3_1146c to i32
  store i32 %v4_1146c, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11474 = load i32, i32* @r4, align 4
  store i32 %v0_11474, i32* %r0.global-to-local, align 4
  %v4_11478 = inttoptr i32 %v2_11468 to i32*
  %v5_11478 = call i32 @function_1323c(i32 %v0_11474, i32* %v4_11478, i32 %v4_1146c, i32 16384)
  %v0_1147c = load i32, i32* %r8.global-to-local, align 4
  %v1_1147c = add i32 %v0_1147c, 13
  store i32 %v1_1147c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11488 = load i32, i32* @r4, align 4
  store i32 %v0_11488, i32* %r0.global-to-local, align 4
  %v4_1148c = inttoptr i32 %v1_1147c to i32*
  %v5_1148c = call i32 @function_1323c(i32 %v0_11488, i32* %v4_1148c, i32 1, i32 16384)
  %v0_11490 = load i32, i32* @r4, align 4
  store i32 %v0_11490, i32* %r0.global-to-local, align 4
  %v0_11494 = load i32, i32* %r8.global-to-local, align 4
  %v1_11494 = add i32 %v0_11494, 13
  %v2_11494 = inttoptr i32 %v1_11494 to i8*
  %v3_11494 = load i8, i8* %v2_11494, align 1
  %v4_11494 = zext i8 %v3_11494 to i32
  store i32 %v4_11494, i32* %r2.global-to-local, align 4
  %v1_11498 = add i32 %v0_11494, 4
  %v2_11498 = inttoptr i32 %v1_11498 to i32*
  %v3_11498 = load i32, i32* %v2_11498, align 4
  store i32 %v3_11498, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_114a0 = inttoptr i32 %v3_11498 to i32*
  %v5_114a0 = call i32 @function_1323c(i32 %v0_11490, i32* %v4_114a0, i32 %v4_11494, i32 16384)
  %v0_114a4 = load i32, i32* @r4, align 4
  store i32 %v0_114a4, i32* %r0.global-to-local, align 4
  %v1_114a8 = call i32 @function_129e0(i32 %v0_114a4)
  store i32 %v1_114a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_114ac

dec_label_pc_114ac:                               ; preds = %dec_label_pc_11340, %dec_label_pc_11408
  %v0_114ac = load i32, i32* @r6, align 4
  store i32 %v0_114ac, i32* %r0.global-to-local, align 4
  %v1_114b0 = call i32 @function_13ba8(i32 %v0_114ac)
  store i32 %v1_114b0, i32* %r0.global-to-local, align 4
  ret i32 %v1_114b0

; uselistorder directives
  uselistorder i32 %v4_11388, { 1, 0 }
  uselistorder i32 %v5_11384, { 1, 0, 2 }
  uselistorder i1 %v7_11350, { 1, 0 }
  uselistorder i32 %v3_1134c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_11338, { 1, 0 }
  uselistorder i32 %v0_11338, { 1, 0 }
  uselistorder i1 %v7_11318, { 1, 0 }
  uselistorder i32 %v3_112a8, { 1, 0 }
  uselistorder i1 %v1_11274, { 1, 0 }
  uselistorder i32 %v1_1125c, { 2, 1, 0 }
  uselistorder i32 %v1_11258, { 1, 0 }
  uselistorder i1 %v2_11210, { 1, 0 }
  uselistorder i32 %.359, { 1, 0 }
  uselistorder i1 %v7_111f8, { 1, 0 }
  uselistorder i32 %v0_111f4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_111d4, { 1, 0, 2 }
  uselistorder i32 %v4_111d0, { 1, 0, 2 }
  uselistorder i1 %v7_111c0, { 1, 0 }
  uselistorder i32 %v0_111c0, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v0_11170, { 0, 2, 1 }
  uselistorder i1 %v0_11160, { 1, 0 }
  uselistorder i32 %v4_11154, { 1, 0, 2 }
  uselistorder i32 %v0_110e8, { 1, 2, 0 }
  uselistorder i1 %v7_11058, { 1, 0 }
  uselistorder i32 %v1_11054, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_1104c, { 1, 0 }
  uselistorder i8 %v3_11044, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11054, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11030, { 1, 0 }
  uselistorder i1 %v7_11028, { 1, 0 }
  uselistorder i1 %v7_11020, { 1, 0 }
  uselistorder i32 %v0_10ffc, { 1, 2, 0 }
  uselistorder i32 %v2_10fe8, { 1, 0 }
  uselistorder i32 %v1_10fe8, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_10fe8, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_10fb8, { 2, 1, 0 }
  uselistorder i1 %v7_10f94, { 1, 0 }
  uselistorder i32 %v4_10f90, { 1, 0, 2 }
  uselistorder i1 %v7_10efc, { 1, 0 }
  uselistorder i32 %v1_10ef8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10ef0, { 1, 0 }
  uselistorder i8 %v3_10ee8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10ef8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10ed4, { 1, 0 }
  uselistorder i1 %v7_10ecc, { 1, 0 }
  uselistorder i1 %v7_10ec4, { 1, 0 }
  uselistorder i1 %v7_10e48, { 1, 0 }
  uselistorder i32 %v1_10e44, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10e3c, { 1, 0 }
  uselistorder i8 %v3_10e34, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10e44, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10e20, { 1, 0 }
  uselistorder i1 %v7_10e18, { 1, 0 }
  uselistorder i1 %v7_10e10, { 1, 0 }
  uselistorder i1 %v7_10d94, { 1, 0 }
  uselistorder i32 %v1_10d90, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10d88, { 1, 0 }
  uselistorder i8 %v3_10d80, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10d90, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10d6c, { 1, 0 }
  uselistorder i1 %v7_10d64, { 1, 0 }
  uselistorder i1 %v7_10d5c, { 1, 0 }
  uselistorder i1 %v7_10c28, { 1, 0 }
  uselistorder i32 %v1_10c24, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10c1c, { 1, 0 }
  uselistorder i8 %v3_10c14, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10c24, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10c00, { 1, 0 }
  uselistorder i1 %v7_10bf8, { 1, 0 }
  uselistorder i1 %v7_10bf0, { 1, 0 }
  uselistorder i32 %v0_10b98, { 2, 1, 0 }
  uselistorder i1 %v7_10b90, { 1, 0 }
  uselistorder i1 %v8_10b84, { 1, 0 }
  uselistorder i8 %v3_10b7c, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_10b8c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10b68, { 1, 0 }
  uselistorder i1 %v7_10b60, { 1, 0 }
  uselistorder i32 %v0_10b08, { 2, 1, 0 }
  uselistorder i1 %v7_10b00, { 1, 0 }
  uselistorder i1 %v8_10af4, { 1, 0 }
  uselistorder i8 %v3_10aec, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10afc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10ad8, { 1, 0 }
  uselistorder i1 %v7_10ad0, { 1, 0 }
  uselistorder i1 %v7_10ac8, { 1, 0 }
  uselistorder i32 %v0_10aa4.pre, { 0, 2, 1 }
  uselistorder i32 %v1_10a8c, { 1, 0 }
  uselistorder i32 %v1_10a88, { 1, 0 }
  uselistorder i32 %v1_10a80, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_10a7c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_10a7c, { 0, 2, 1 }
  uselistorder i32 %v0_10a44.pr, { 1, 0 }
  uselistorder i1 %v7_10a1c, { 1, 0 }
  uselistorder i1 %v2_10a08, { 1, 0, 2 }
  uselistorder i1 %v2_109f0, { 1, 0, 2 }
  uselistorder i32 %v1_10a10, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_109e4, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_10a0c, { 1, 0 }
  uselistorder i32 %v2_10a14, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_109d0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_10998, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_10974, { 1, 2, 3, 0 }
  uselistorder i32 %v3_10970, { 1, 0 }
  uselistorder i32 %v5_10954, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_10940, { 1, 0, 2 }
  uselistorder i32 %v3_1093c, { 1, 0, 2 }
  uselistorder i32 %v0_112b8, { 1, 0, 2 }
  uselistorder i32 %v0_10910, { 1, 0, 2 }
  uselistorder i1 %v7_108f0, { 1, 0 }
  uselistorder i32 %v0_10858, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_10838, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_1082c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_107b8, { 2, 1, 0 }
  uselistorder i32 %v3_107b4, { 1, 0 }
  uselistorder i1 %v7_10798, { 1, 0 }
  uselistorder i32 %v3_10794, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_10788, { 1, 0 }
  uselistorder i32 %v1_1076c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_10758, { 2, 1, 0 }
  uselistorder i32 %v3_10754, { 1, 0 }
  uselistorder i32 %v0_10758, { 1, 0 }
  uselistorder i32 %v2_106f0, { 1, 0 }
  uselistorder i32 %v1_106f0, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_106f0, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_106cc, { 2, 1, 0 }
  uselistorder i32 %v1_106c8, { 1, 0 }
  uselistorder i32 %v2_10698, { 1, 0 }
  uselistorder i32 %v0_10698, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_10690, { 1, 0 }
  uselistorder i1 %v7_10658, { 0, 3, 1, 2 }
  uselistorder i1 %v2_10658, { 1, 2, 0 }
  uselistorder i32 %v2_10650, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_10648, { 1, 0 }
  uselistorder i32 %v1_1062c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v2_10620, { 1, 0 }
  uselistorder i32 %v1_10620, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_10620, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_10610, { 1, 0 }
  uselistorder i32 %v3_10674, { 5, 7, 4, 8, 6, 1, 0, 10, 3, 2, 9 }
  uselistorder i32 %storemerge232, { 1, 0, 2 }
  uselistorder i32 %v2_108c8, { 0, 2, 3, 4, 1 }
  uselistorder i32* %v2_108bc, { 2, 1, 6, 3, 0, 4, 5, 7 }
  uselistorder i32 %v2_108b4, { 4, 3, 8, 5, 2, 6, 7, 9, 1, 0 }
  uselistorder i32 %v2_110dc, { 1, 2, 0 }
  uselistorder i32 %v2_10684, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v3_10564, { 1, 0 }
  uselistorder i32 %v1_10550, { 1, 0 }
  uselistorder i32 %v1_10538, { 1, 2, 0 }
  uselistorder i32 %v0_10544, { 0, 3, 2, 1 }
  uselistorder i32 %v0_10508, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_104fc, { 2, 1, 0 }
  uselistorder i32 %v1_104d8, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_104b0, { 1, 0 }
  uselistorder i32 %v0_10414, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_1044c, { 1, 2, 4, 8, 0, 3, 6, 5, 7 }
  uselistorder i32 %v1_103bc, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_102e0, { 0, 2, 1 }
  uselistorder i32 %v1_102dc, { 3, 2, 0, 1 }
  uselistorder i32 %v4_102b8, { 1, 0 }
  uselistorder i1 %v2_10228, { 1, 0 }
  uselistorder i1 %v3_1020c, { 1, 0, 2 }
  uselistorder i1 %v2_101f8, { 1, 0 }
  uselistorder i1 %v2_101d4, { 1, 0 }
  uselistorder i32 %v1_10184, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10170, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1016c, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_1015c, { 1, 0 }
  uselistorder i32 %v0_1014c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10128, { 1, 0 }
  uselistorder i8* %stack_var_-1876.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_10440, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i32 %v4_fed4, { 1, 0 }
  uselistorder i32 %v0_fec8, { 2, 0, 1, 3 }
  uselistorder i32 %v4_fe74, { 1, 0 }
  uselistorder i32 %v0_fe6c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_fe14, { 3, 2, 0, 1 }
  uselistorder i1 %v7_fdb4, { 1, 0 }
  uselistorder i32 %v3_fdac, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_fd94, { 0, 2, 1 }
  uselistorder i32 %v0_fd7c, { 2, 1, 0 }
  uselistorder i32 %v0_fd58, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge240, { 1, 0 }
  uselistorder i32 %v0_fcec, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-56, { 1, 5, 6, 7, 4, 8, 3, 2, 9, 0, 10, 11 }
  uselistorder i8* %stack_var_-52, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 7, 8, 9, 10, 11, 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 94, 95, 96, 97, 98, 99, 100, 18, 101, 102, 13, 19, 133, 20, 21, 85, 103, 104, 105, 125, 134, 135, 136, 137, 0, 1, 2, 3, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 14, 15, 16, 131, 132, 4, 5, 6, 7, 8, 9, 10, 11, 12, 22, 23, 24, 25, 26, 27, 17, 28, 29, 31, 30, 32, 33, 34, 35, 36, 38, 40, 39, 37, 41, 42, 43, 44, 50, 45, 46, 47, 48, 51, 138, 139, 52, 140, 141, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 84, 70, 71, 72, 73, 74, 75, 77, 76, 79, 78, 49, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93 }
  uselistorder i32* %r2.global-to-local, { 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 7, 117, 138, 115, 116, 118, 119, 120, 134, 139, 3, 0, 1, 2, 121, 122, 124, 123, 125, 127, 126, 128, 130, 129, 131, 132, 133, 135, 137, 136, 8, 10, 9, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 11, 19, 20, 21, 22, 23, 25, 27, 26, 141, 24, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 57, 58, 61, 62, 63, 64, 65, 66, 67, 69, 68, 70, 140, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103 }
  uselistorder i32* %r1.global-to-local, { 82, 83, 84, 85, 86, 87, 88, 9, 89, 90, 91, 92, 3, 114, 115, 93, 94, 95, 110, 111, 0, 1, 2, 80, 81, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 4, 5, 79, 10, 11, 12, 13, 6, 7, 8, 14, 15, 16, 18, 19, 17, 20, 21, 23, 22, 78, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 116, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77 }
  uselistorder i32* %r0.global-to-local, { 127, 126, 129, 128, 130, 131, 132, 134, 133, 135, 136, 137, 31, 30, 139, 138, 140, 142, 141, 143, 145, 144, 146, 148, 147, 12, 13, 14, 16, 15, 224, 32, 220, 223, 222, 34, 36, 37, 33, 38, 35, 150, 149, 151, 153, 152, 154, 156, 155, 157, 208, 207, 210, 209, 211, 212, 9, 1, 0, 2, 4, 3, 6, 5, 7, 8, 125, 17, 159, 160, 162, 161, 163, 158, 164, 165, 166, 167, 169, 168, 171, 170, 173, 172, 174, 175, 176, 177, 179, 178, 181, 180, 183, 182, 184, 185, 186, 187, 189, 188, 191, 190, 193, 192, 194, 195, 196, 198, 197, 199, 201, 200, 203, 202, 204, 205, 206, 214, 213, 221, 215, 216, 217, 19, 18, 21, 20, 218, 219, 11, 10, 41, 39, 23, 22, 24, 26, 25, 27, 28, 29, 50, 40, 43, 42, 44, 45, 47, 46, 48, 55, 49, 51, 54, 52, 53, 56, 58, 59, 57, 62, 60, 61, 64, 63, 65, 67, 66, 100, 68, 69, 70, 72, 71, 73, 74, 76, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 112, 115, 114, 116, 120, 119, 117, 118, 121, 122, 123, 124 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 14, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 36, 7, 37, 1, 0, 35, 47, 38, 39, 41, 40, 43, 42, 44, 45, 46, 48, 49, 5, 50, 6, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 18, 16, 17, 19, 51, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 130, 131, 22, 23, 28, 40, 200, 128, 31, 30, 32, 33, 34, 132, 117, 134, 135, 136, 176, 177, 178, 195, 196, 197, 198, 199, 0, 1, 6, 7, 2, 3, 4, 5, 129, 24, 137, 138, 139, 140, 141, 146, 147, 142, 143, 144, 145, 148, 149, 150, 155, 156, 151, 152, 153, 154, 157, 158, 159, 164, 165, 160, 161, 162, 163, 166, 167, 168, 173, 174, 169, 170, 171, 172, 175, 179, 180, 184, 185, 181, 182, 183, 186, 26, 187, 192, 193, 188, 189, 190, 191, 194, 25, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 201, 35, 36, 37, 38, 39, 202, 27, 133, 29, 41, 43, 42, 44, 45, 47, 49, 48, 122, 46, 50, 51, 52, 53, 54, 55, 60, 56, 57, 58, 59, 125, 126, 123, 124, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 116, 96, 97, 98, 99, 100, 115, 101, 102, 103, 114, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 127, 121 }
  uselistorder i1* %cpsr_c.global-to-local, { 129, 130, 131, 20, 21, 26, 38, 198, 127, 28, 29, 30, 31, 32, 132, 113, 133, 134, 135, 136, 175, 176, 177, 194, 195, 196, 197, 0, 1, 6, 7, 2, 3, 4, 5, 128, 22, 137, 138, 139, 140, 145, 146, 141, 142, 143, 144, 147, 148, 149, 154, 155, 150, 151, 152, 153, 156, 157, 158, 163, 164, 159, 160, 161, 162, 165, 166, 167, 172, 173, 168, 169, 170, 171, 174, 178, 179, 183, 184, 180, 181, 182, 185, 24, 186, 191, 192, 187, 188, 189, 190, 193, 23, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 121, 33, 34, 35, 36, 37, 199, 25, 114, 27, 39, 41, 40, 42, 43, 45, 47, 46, 200, 44, 48, 49, 50, 51, 52, 57, 53, 54, 55, 56, 124, 125, 122, 58, 123, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 90, 91, 92, 93, 94, 111, 95, 96, 97, 110, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 115, 116, 117, 118, 119, 126, 120 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder i8** @global_var_1dd44.104, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1dd44.104 to i32), { 1, 0 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 30, { 6, 0, 1, 2, 3, 7, 4, 5, 8 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_150d8.60 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_150d8.60, { 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_150d8.60 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_1323c, { 11, 12, 13, 14, 15, 16, 17, 28, 0, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 3, 4, 2, 5, 6, 7, 8, 9, 10, 29 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_131dc, { 0, 1, 2, 3, 4, 5, 9, 6, 7, 8 }
  uselistorder i32 (i32)* @function_114e0, { 17, 35, 34, 16, 10, 36, 15, 14, 13, 12, 11, 33, 32, 9, 31, 30, 29, 37, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 8, 7, 6, 5, 4, 2, 1, 0, 3 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12110, { 24, 22, 20, 21, 23, 19, 18, 17, 0, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32*)* @function_114b4, { 23, 24, 30, 0, 25, 26, 27, 28, 29, 1, 2, 31, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 55, 56 }
  uselistorder i32 (i32)* @function_11598, { 28, 27, 21, 46, 26, 25, 24, 23, 22, 45, 44, 20, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 19, 18, 17, 16, 15, 1, 0, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i8* bitcast (i8** @global_var_1dcf0.159 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1dcf1.160, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1dcf0.159 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_12c00, { 2, 1, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder i32 ()* @function_fa58, { 0, 3, 2, 1 }
  uselistorder i32 254, { 8, 9, 10, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8 2, { 0, 4, 2, 1, 3 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_13268, { 0, 1, 8, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 16384, { 31, 49, 32, 50, 33, 51, 34, 52, 35, 53, 36, 54, 13, 55, 12, 66, 0, 47, 1, 48, 2, 56, 3, 57, 4, 58, 5, 59, 6, 60, 7, 61, 8, 62, 9, 63, 29, 64, 30, 65, 27, 68, 28, 69, 26, 67, 37, 70, 10, 71, 11, 72, 39, 73, 15, 74, 40, 75, 41, 76, 42, 77, 14, 78, 38, 79, 16, 80, 17, 81, 18, 82, 83, 43, 84, 19, 85, 20, 86, 22, 87, 21, 88, 23, 89, 24, 90, 45, 91, 46, 92, 25, 93, 44, 94 }
  uselistorder i32 (i32, i32, i32, i32)* @function_e4f4, { 8, 7, 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12834, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_e498, { 10, 9, 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1dcd4.250, { 2, 1, 0 }
  uselistorder i32 16711680, { 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 127, { 5, 0, 6, 3, 7, 1, 8, 2, 9, 4, 10 }
  uselistorder i32 126, { 11, 5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_1517c.218 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15134.202 to i32), { 0, 20, 1, 21, 2, 22, 3, 23, 4, 24, 5, 25, 6, 26, 7, 27, 8, 28, 9, 29, 10, 30, 11, 31, 12, 32, 13, 33, 14, 34, 15, 35, 16, 36, 17, 37, 18, 38, 19, 39 }
  uselistorder i32 ptrtoint (i32* @global_var_15100.196 to i32), { 0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_1522c.194 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_15220.192 to i32), { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32, i32)* @function_fb2c, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15208.186 to i32), { 0, 9, 1, 10, 2, 11, 3, 4, 5, 12, 6, 13, 7, 14, 8, 15 }
  uselistorder i8* @global_var_1dce5.182, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1dcd8.173 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1dce4.174, { 1, 0 }
  uselistorder i8** @global_var_1dcc4.169, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1dcc4.169 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 65280, { 28, 1, 15, 0, 2, 29, 3, 4, 30, 22, 23, 31, 5, 32, 16, 17, 33, 34, 6, 7, 8, 35, 36, 9, 18, 10, 37, 24, 19, 38, 39, 40, 41, 11, 25, 26, 27, 42, 12, 43, 44, 20, 45, 46, 13, 47, 48, 21, 49, 50, 14, 51 }
  uselistorder i32 ()* @function_f8c4, { 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 5, 4, 3, 2, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 6, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 1, 0 }
  uselistorder i32 2048, { 4, 3, 0, 1, 5, 6, 2, 7, 8, 9 }
  uselistorder i32* @global_var_1dd58.167, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1dd54.165, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1dcf4.153, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_12cb0, { 0, 1, 2, 3, 4, 5, 6, 24, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 25, 26 }
  uselistorder i32 (i32)* @function_f91c, { 1, 0 }
  uselistorder i32* @global_var_1dd3c.81, { 3, 4, 0, 1, 2, 5, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_12304, { 2, 1, 0 }
  uselistorder i32* @global_var_1dd5c.151, { 0, 2, 1 }
  uselistorder i32 ()* @function_12a0c, { 1, 5, 4, 3, 2, 0 }
  uselistorder i32* @sl, { 9, 3, 5, 6, 10, 4, 7, 8, 13, 12, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 23, 24, 2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 0, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 1, 113, 114, 115, 116, 95, 96 }
  uselistorder i32* @sb, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 46, 47, 49, 50, 51, 54, 52, 53, 55, 56, 57, 58 }
  uselistorder label %dec_label_pc_114ac, { 1, 0 }
  uselistorder label %dec_label_pc_113cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1091c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_1091c.backedge.thread457, { 9, 4, 8, 2, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_1091c.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %.thread228, { 1, 0 }
  uselistorder label %bb354, { 1, 0 }
  uselistorder label %dec_label_pc_1124c, { 1, 0 }
  uselistorder label %dec_label_pc_11218, { 1, 0 }
  uselistorder label %thread-pre-split78, { 1, 0 }
  uselistorder label %dec_label_pc_11128, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11054, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11040, { 1, 0 }
  uselistorder label %dec_label_pc_10fe8, { 4, 5, 1, 11, 6, 7, 8, 9, 10, 2, 3, 0 }
  uselistorder label %dec_label_pc_10ef8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10ee4, { 1, 0 }
  uselistorder label %dec_label_pc_10e44, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10e30, { 1, 0 }
  uselistorder label %dec_label_pc_10d90, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10d7c, { 1, 0 }
  uselistorder label %dec_label_pc_10c24, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10c10, { 1, 0 }
  uselistorder label %dec_label_pc_10b8c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10b78, { 1, 0 }
  uselistorder label %dec_label_pc_10b08, { 1, 0 }
  uselistorder label %dec_label_pc_10afc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10ae8, { 1, 0 }
  uselistorder label %dec_label_pc_10aa4, { 3, 1, 4, 5, 6, 7, 8, 2, 0 }
  uselistorder label %dec_label_pc_10a94, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb328, { 2, 1, 0 }
  uselistorder label %bb326, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10a44, { 1, 0 }
  uselistorder label %dec_label_pc_10a30, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_109ec, { 1, 0 }
  uselistorder label %dec_label_pc_109ec.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10980, { 1, 0 }
  uselistorder label %bb324, { 1, 0 }
  uselistorder label %dec_label_pc_10934, { 1, 0 }
  uselistorder label %dec_label_pc_10924, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_10924.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_10918.loopexit, { 0, 4, 1, 2, 3 }
  uselistorder label %dec_label_pc_108a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1088c, { 1, 0 }
  uselistorder label %dec_label_pc_10768, { 7, 1, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_10740, { 1, 0 }
  uselistorder label %bb319, { 1, 0 }
  uselistorder label %bb317, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_105ac.dec_label_pc_105ac_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10594.dec_label_pc_10594_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1058c, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_10584, { 1, 0 }
  uselistorder label %dec_label_pc_10538, { 1, 0 }
  uselistorder label %dec_label_pc_103dc, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_103d0, { 1, 0 }
  uselistorder label %.thread50, { 2, 1, 0 }
  uselistorder label %.thread48, { 1, 0 }
  uselistorder label %dec_label_pc_10238, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10214, { 1, 0 }
  uselistorder label %dec_label_pc_10208, { 1, 2, 0 }
  uselistorder label %dec_label_pc_101e4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_101c0, { 1, 0 }
  uselistorder label %bb287, { 1, 0 }
  uselistorder label %dec_label_pc_1016c, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_fe14, { 1, 0 }
}

define i32 @function_114b4(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_114b4:
  %v3_114b8 = mul i32 %arg1, 8
  %v2_114bc = add i32 %v3_114b8, ptrtoint (i32* @global_var_1dd64.267 to i32)
  %v2_114c0 = icmp eq i32* %arg2, null
  br i1 %v2_114c0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_114b4
  %v3_114cc11 = inttoptr i32 %v2_114bc to i32*
  %v4_114cc12 = load i32, i32* %v3_114cc11, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_114b4
  %v2_114c4 = add i32 %v3_114b8, add (i32 ptrtoint (i32* @global_var_1dd64.267 to i32), i32 5)
  %v3_114c4 = inttoptr i32 %v2_114c4 to i8*
  %v4_114c4 = load i8, i8* %v3_114c4, align 1
  %v5_114c4 = zext i8 %v4_114c4 to i32
  store i32 %v5_114c4, i32* @r2, align 4
  %v2_114c8 = add i32 %v3_114b8, add (i32 ptrtoint (i32* @global_var_1dd64.267 to i32), i32 4)
  %v3_114c8 = inttoptr i32 %v2_114c8 to i8*
  %v4_114c8 = load i8, i8* %v3_114c8, align 4
  %v5_114c8 = zext i8 %v4_114c8 to i32
  %v3_114cc = inttoptr i32 %v2_114bc to i32*
  %v4_114cc = load i32, i32* %v3_114cc, align 4
  %v5_114d0 = mul nuw nsw i32 %v5_114c4, 256
  %v6_114d0 = or i32 %v5_114c8, %v5_114d0
  store i32 %v6_114d0, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_114cc714 = phi i32 [ %v4_114cc12, %.thread ], [ %v4_114cc, %bb ]
  ret i32 %v4_114cc714

; uselistorder directives
  uselistorder i32 %v2_114bc, { 1, 0 }
  uselistorder i32 %v3_114b8, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_114e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_114e0:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_114e0 = mul i32 %arg1, 8
  %v3_114e4 = load i32, i32* @r4, align 4
  store i32 %v3_114e4, i32* %stack_var_-20, align 4
  %v3_114f4 = and i32 %v3_114e0, 2040
  %v2_114f8 = add i32 %v3_114f4, ptrtoint (i32* @global_var_1dd64.267 to i32)
  store i32 %v2_114f8, i32* @lr, align 4
  %v1_11500 = add i32 %v3_114f4, add (i32 ptrtoint (i32* @global_var_1dd64.267 to i32), i32 4)
  store i32 %v1_11500, i32* %r7.global-to-local, align 4
  %v2_11504 = load i32, i32* @global_var_1db34.270, align 4
  store i32 %v2_11504, i32* @r2, align 4
  %v2_11508 = inttoptr i32 %v1_11500 to i8*
  %v3_11508 = load i8, i8* %v2_11508, align 4
  %v4_11508 = zext i8 %v3_11508 to i32
  %v1_1150c = add i32 %v3_114f4, add (i32 ptrtoint (i32* @global_var_1dd64.267 to i32), i32 5)
  %v2_1150c = inttoptr i32 %v1_1150c to i8*
  %v3_1150c = load i8, i8* %v2_1150c, align 1
  %v4_1150c = zext i8 %v3_1150c to i32
  %v3_11510 = udiv i32 %v2_11504, 256
  %v4_11514 = mul nuw nsw i32 %v4_1150c, 256
  %v5_11514 = or i32 %v4_11514, %v4_11508
  %v7_11514 = icmp eq i32 %v5_11514, 0
  store i1 %v7_11514, i1* @cpsr_z, align 1
  %v3_11518 = udiv i32 %v2_11504, 65536
  %v1_1151c = urem i32 %v3_11510, 256
  store i32 %v1_1151c, i32* %r6.global-to-local, align 4
  %v1_11520 = urem i32 %v3_11518, 256
  store i32 %v1_11520, i32* %r5.global-to-local, align 4
  %v3_11524 = udiv i32 %v2_11504, 16777216
  store i32 %v3_11524, i32* %r4.global-to-local, align 4
  %v1_11528 = urem i32 %v2_11504, 256
  br i1 %v7_11514, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_114e0
  store i32 %v3_114e4, i32* @r4, align 4
  ret i32 %v1_11528

bb8:                                              ; preds = %dec_label_pc_114e0
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11534

dec_label_pc_11534:                               ; preds = %dec_label_pc_11534, %bb8
  %v2_11540 = phi i32 [ %v1_1157c, %dec_label_pc_11534 ], [ 0, %bb8 ]
  %v0_11534 = phi i32 [ %v0_11574, %dec_label_pc_11534 ], [ %v2_114f8, %bb8 ]
  %v1_11534 = inttoptr i32 %v0_11534 to i32*
  %v2_11534 = load i32, i32* %v1_11534, align 4
  %v2_11538 = add i32 %v2_11534, %v2_11540
  %v3_11538 = inttoptr i32 %v2_11538 to i8*
  %v4_11538 = load i8, i8* %v3_11538, align 1
  %v6_11538 = zext i8 %v4_11538 to i32
  %v2_1153c = xor i32 %v6_11538, %v1_11528
  %v1_11540 = trunc i32 %v2_1153c to i8
  store i8 %v1_11540, i8* %v3_11538, align 1
  %v0_11544 = load i32, i32* @lr, align 4
  %v1_11544 = inttoptr i32 %v0_11544 to i32*
  %v2_11544 = load i32, i32* %v1_11544, align 4
  %v0_11548 = load i32, i32* %ip.global-to-local, align 4
  %v2_11548 = add i32 %v0_11548, %v2_11544
  %v3_11548 = inttoptr i32 %v2_11548 to i8*
  %v4_11548 = load i8, i8* %v3_11548, align 1
  %v6_11548 = zext i8 %v4_11548 to i32
  %v0_1154c = load i32, i32* %r6.global-to-local, align 4
  %v2_1154c = xor i32 %v0_1154c, %v6_11548
  %v1_11550 = trunc i32 %v2_1154c to i8
  store i8 %v1_11550, i8* %v3_11548, align 1
  %v0_11554 = load i32, i32* @lr, align 4
  %v1_11554 = inttoptr i32 %v0_11554 to i32*
  %v2_11554 = load i32, i32* %v1_11554, align 4
  %v0_11558 = load i32, i32* %ip.global-to-local, align 4
  %v2_11558 = add i32 %v0_11558, %v2_11554
  %v3_11558 = inttoptr i32 %v2_11558 to i8*
  %v4_11558 = load i8, i8* %v3_11558, align 1
  %v6_11558 = zext i8 %v4_11558 to i32
  %v0_1155c = load i32, i32* %r5.global-to-local, align 4
  %v2_1155c = xor i32 %v0_1155c, %v6_11558
  %v1_11560 = trunc i32 %v2_1155c to i8
  store i8 %v1_11560, i8* %v3_11558, align 1
  %v0_11564 = load i32, i32* @lr, align 4
  %v1_11564 = inttoptr i32 %v0_11564 to i32*
  %v2_11564 = load i32, i32* %v1_11564, align 4
  %v0_11568 = load i32, i32* %ip.global-to-local, align 4
  %v2_11568 = add i32 %v0_11568, %v2_11564
  %v3_11568 = inttoptr i32 %v2_11568 to i8*
  %v4_11568 = load i8, i8* %v3_11568, align 1
  %v6_11568 = zext i8 %v4_11568 to i32
  %v0_1156c = load i32, i32* %r4.global-to-local, align 4
  %v2_1156c = xor i32 %v0_1156c, %v6_11568
  %v1_11570 = trunc i32 %v2_1156c to i8
  store i8 %v1_11570, i8* %v3_11568, align 1
  %v0_11574 = load i32, i32* @lr, align 4
  %v1_11574 = add i32 %v0_11574, 4
  %v2_11574 = inttoptr i32 %v1_11574 to i8*
  %v3_11574 = load i8, i8* %v2_11574, align 1
  %v4_11574 = zext i8 %v3_11574 to i32
  %v0_11578 = load i32, i32* %r7.global-to-local, align 4
  %v1_11578 = add i32 %v0_11578, 1
  %v2_11578 = inttoptr i32 %v1_11578 to i8*
  %v3_11578 = load i8, i8* %v2_11578, align 1
  %v4_11578 = zext i8 %v3_11578 to i32
  %v0_1157c = load i32, i32* %ip.global-to-local, align 4
  %v1_1157c = add i32 %v0_1157c, 1
  store i32 %v1_1157c, i32* %ip.global-to-local, align 4
  %v4_11580 = mul nuw nsw i32 %v4_11578, 256
  %v5_11580 = or i32 %v4_11580, %v4_11574
  store i32 %v5_11580, i32* @r2, align 4
  %v9_11584 = icmp eq i32 %v5_11580, %v1_1157c
  store i1 %v9_11584, i1* @cpsr_z, align 1
  %v8_11588 = icmp sgt i32 %v5_11580, %v1_1157c
  br i1 %v8_11588, label %dec_label_pc_11534, label %dec_label_pc_1158c

dec_label_pc_1158c:                               ; preds = %dec_label_pc_11534
  %v2_1158c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1158c, i32* @r4, align 4
  ret i32 %v1_11528

; uselistorder directives
  uselistorder i32 %v1_1157c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_11574, { 1, 0 }
  uselistorder i32 %v1_11528, { 0, 2, 1 }
  uselistorder i32 %v2_11504, { 3, 0, 1, 2, 4 }
}

define i32 @function_11598(i32 %arg1) local_unnamed_addr {
dec_label_pc_11598:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11598 = mul i32 %arg1, 8
  %v3_1159c = load i32, i32* @r4, align 4
  store i32 %v3_1159c, i32* %stack_var_-20, align 4
  %v3_115ac = and i32 %v3_11598, 2040
  %v2_115b0 = add i32 %v3_115ac, ptrtoint (i32* @global_var_1dd64.267 to i32)
  store i32 %v2_115b0, i32* @lr, align 4
  %v1_115b8 = add i32 %v3_115ac, add (i32 ptrtoint (i32* @global_var_1dd64.267 to i32), i32 4)
  store i32 %v1_115b8, i32* %r7.global-to-local, align 4
  %v2_115bc = load i32, i32* @global_var_1db34.270, align 4
  store i32 %v2_115bc, i32* @r2, align 4
  %v2_115c0 = inttoptr i32 %v1_115b8 to i8*
  %v3_115c0 = load i8, i8* %v2_115c0, align 4
  %v4_115c0 = zext i8 %v3_115c0 to i32
  %v1_115c4 = add i32 %v3_115ac, add (i32 ptrtoint (i32* @global_var_1dd64.267 to i32), i32 5)
  %v2_115c4 = inttoptr i32 %v1_115c4 to i8*
  %v3_115c4 = load i8, i8* %v2_115c4, align 1
  %v4_115c4 = zext i8 %v3_115c4 to i32
  %v3_115c8 = udiv i32 %v2_115bc, 256
  %v4_115cc = mul nuw nsw i32 %v4_115c4, 256
  %v5_115cc = or i32 %v4_115cc, %v4_115c0
  %v7_115cc = icmp eq i32 %v5_115cc, 0
  %v3_115d0 = udiv i32 %v2_115bc, 65536
  %v1_115d4 = urem i32 %v3_115c8, 256
  store i32 %v1_115d4, i32* %r6.global-to-local, align 4
  %v1_115d8 = urem i32 %v3_115d0, 256
  store i32 %v1_115d8, i32* %r5.global-to-local, align 4
  %v3_115dc = udiv i32 %v2_115bc, 16777216
  store i32 %v3_115dc, i32* %r4.global-to-local, align 4
  %v1_115e0 = urem i32 %v2_115bc, 256
  br i1 %v7_115cc, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_11598
  store i32 %v3_1159c, i32* @r4, align 4
  ret i32 %v1_115e0

bb8:                                              ; preds = %dec_label_pc_11598
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_115ec

dec_label_pc_115ec:                               ; preds = %dec_label_pc_115ec, %bb8
  %v2_115f8 = phi i32 [ %v1_11634, %dec_label_pc_115ec ], [ 0, %bb8 ]
  %v0_115ec = phi i32 [ %v0_1162c, %dec_label_pc_115ec ], [ %v2_115b0, %bb8 ]
  %v1_115ec = inttoptr i32 %v0_115ec to i32*
  %v2_115ec = load i32, i32* %v1_115ec, align 4
  %v2_115f0 = add i32 %v2_115ec, %v2_115f8
  %v3_115f0 = inttoptr i32 %v2_115f0 to i8*
  %v4_115f0 = load i8, i8* %v3_115f0, align 1
  %v6_115f0 = zext i8 %v4_115f0 to i32
  %v2_115f4 = xor i32 %v6_115f0, %v1_115e0
  %v1_115f8 = trunc i32 %v2_115f4 to i8
  store i8 %v1_115f8, i8* %v3_115f0, align 1
  %v0_115fc = load i32, i32* @lr, align 4
  %v1_115fc = inttoptr i32 %v0_115fc to i32*
  %v2_115fc = load i32, i32* %v1_115fc, align 4
  %v0_11600 = load i32, i32* %ip.global-to-local, align 4
  %v2_11600 = add i32 %v0_11600, %v2_115fc
  %v3_11600 = inttoptr i32 %v2_11600 to i8*
  %v4_11600 = load i8, i8* %v3_11600, align 1
  %v6_11600 = zext i8 %v4_11600 to i32
  %v0_11604 = load i32, i32* %r6.global-to-local, align 4
  %v2_11604 = xor i32 %v0_11604, %v6_11600
  %v1_11608 = trunc i32 %v2_11604 to i8
  store i8 %v1_11608, i8* %v3_11600, align 1
  %v0_1160c = load i32, i32* @lr, align 4
  %v1_1160c = inttoptr i32 %v0_1160c to i32*
  %v2_1160c = load i32, i32* %v1_1160c, align 4
  %v0_11610 = load i32, i32* %ip.global-to-local, align 4
  %v2_11610 = add i32 %v0_11610, %v2_1160c
  %v3_11610 = inttoptr i32 %v2_11610 to i8*
  %v4_11610 = load i8, i8* %v3_11610, align 1
  %v6_11610 = zext i8 %v4_11610 to i32
  %v0_11614 = load i32, i32* %r5.global-to-local, align 4
  %v2_11614 = xor i32 %v0_11614, %v6_11610
  %v1_11618 = trunc i32 %v2_11614 to i8
  store i8 %v1_11618, i8* %v3_11610, align 1
  %v0_1161c = load i32, i32* @lr, align 4
  %v1_1161c = inttoptr i32 %v0_1161c to i32*
  %v2_1161c = load i32, i32* %v1_1161c, align 4
  %v0_11620 = load i32, i32* %ip.global-to-local, align 4
  %v2_11620 = add i32 %v0_11620, %v2_1161c
  %v3_11620 = inttoptr i32 %v2_11620 to i8*
  %v4_11620 = load i8, i8* %v3_11620, align 1
  %v6_11620 = zext i8 %v4_11620 to i32
  %v0_11624 = load i32, i32* %r4.global-to-local, align 4
  %v2_11624 = xor i32 %v0_11624, %v6_11620
  %v1_11628 = trunc i32 %v2_11624 to i8
  store i8 %v1_11628, i8* %v3_11620, align 1
  %v0_1162c = load i32, i32* @lr, align 4
  %v1_1162c = add i32 %v0_1162c, 4
  %v2_1162c = inttoptr i32 %v1_1162c to i8*
  %v3_1162c = load i8, i8* %v2_1162c, align 1
  %v4_1162c = zext i8 %v3_1162c to i32
  %v0_11630 = load i32, i32* %r7.global-to-local, align 4
  %v1_11630 = add i32 %v0_11630, 1
  %v2_11630 = inttoptr i32 %v1_11630 to i8*
  %v3_11630 = load i8, i8* %v2_11630, align 1
  %v4_11630 = zext i8 %v3_11630 to i32
  %v0_11634 = load i32, i32* %ip.global-to-local, align 4
  %v1_11634 = add i32 %v0_11634, 1
  store i32 %v1_11634, i32* %ip.global-to-local, align 4
  %v4_11638 = mul nuw nsw i32 %v4_11630, 256
  %v5_11638 = or i32 %v4_11638, %v4_1162c
  store i32 %v5_11638, i32* @r2, align 4
  %v8_11640 = icmp sgt i32 %v5_11638, %v1_11634
  br i1 %v8_11640, label %dec_label_pc_115ec, label %dec_label_pc_11644

dec_label_pc_11644:                               ; preds = %dec_label_pc_115ec
  %v2_11644 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11644, i32* @r4, align 4
  ret i32 %v1_115e0

; uselistorder directives
  uselistorder i32 %v1_11634, { 1, 2, 0 }
  uselistorder i32 %v0_1162c, { 1, 0 }
  uselistorder i32 %v1_115e0, { 0, 2, 1 }
  uselistorder i32 %v2_115bc, { 3, 0, 1, 2, 4 }
}

define i32 @function_11650(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11650:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11650 = load i32, i32* @r4, align 4
  store i32 %v3_11650, i32* %stack_var_-36, align 4
  %v6_11650 = load i32, i32* @r5, align 4
  %v9_11650 = load i32, i32* @r6, align 4
  %v12_11650 = load i32, i32* @r7, align 4
  %v1_11658 = call i32 @function_13464(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1dd64.267 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_11658, i32* @r7, align 4
  %v3_11674 = call i32 @function_120c8(i32 %v1_11658, i32 ptrtoint (i32* @global_var_15248.275 to i32), i32 2)
  %v0_11678 = load i32, i32* @r5, align 4
  %v0_1167c = load i32, i32* @r7, align 4
  store i32 %v0_1167c, i32* @global_var_1dd74.276, align 4
  %v1_11680 = trunc i32 %v0_11678 to i8
  store i8 %v1_11680, i8* bitcast (i32* @global_var_1dd78.277 to i8*), align 4
  %v0_11684 = load i32, i32* @r6, align 4
  %v1_11684 = trunc i32 %v0_11684 to i8
  store i8 %v1_11684, i8* bitcast (i32* @global_var_1dd79.278 to i8*), align 4
  %v1_11688 = call i32 @function_13464(i32 %v0_11678)
  %v0_1168c = load i32, i32* @r5, align 4
  store i32 %v1_11688, i32* @r7, align 4
  %v3_11698 = call i32 @function_120c8(i32 %v1_11688, i32 ptrtoint (i32* @global_var_1524c.280 to i32), i32 %v0_1168c)
  %v0_116a0 = load i32, i32* @r7, align 4
  store i32 %v0_116a0, i32* @global_var_1dd84.281, align 4
  %v0_116a4 = load i32, i32* @r5, align 4
  %v1_116a4 = trunc i32 %v0_116a4 to i8
  store i8 %v1_116a4, i8* bitcast (i32* @global_var_1dd88.282 to i8*), align 4
  %v0_116a8 = load i32, i32* @r6, align 4
  %v1_116a8 = trunc i32 %v0_116a8 to i8
  store i8 %v1_116a8, i8* bitcast (i32* @global_var_1dd89.283 to i8*), align 4
  %v1_116ac = call i32 @function_13464(i32 29)
  store i32 %v1_116ac, i32* @r5, align 4
  %v3_116bc = call i32 @function_120c8(i32 %v1_116ac, i32 ptrtoint (i32* @global_var_15250.285 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1dd90.286 to i8*), align 4
  %v0_116cc = load i32, i32* @r5, align 4
  store i32 %v0_116cc, i32* @global_var_1dd8c.287, align 4
  %v0_116d0 = load i32, i32* @r6, align 4
  %v1_116d0 = trunc i32 %v0_116d0 to i8
  store i8 %v1_116d0, i8* bitcast (i32* @global_var_1dd91.288 to i8*), align 4
  %v1_116d4 = call i32 @function_13464(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_116d4, i32* @r5, align 4
  %v3_116e8 = call i32 @function_120c8(i32 %v1_116d4, i32 ptrtoint (i32* @global_var_15270.290 to i32), i32 7)
  %v0_116f0 = load i32, i32* @r5, align 4
  store i32 %v0_116f0, i32* @global_var_1dd94.291, align 4
  %v0_116f4 = load i32, i32* @r7, align 4
  %v1_116f4 = trunc i32 %v0_116f4 to i8
  store i8 %v1_116f4, i8* bitcast (i32* @global_var_1dd98.292 to i8*), align 4
  %v0_116f8 = load i32, i32* @r6, align 4
  %v1_116f8 = trunc i32 %v0_116f8 to i8
  store i8 %v1_116f8, i8* bitcast (i32* @global_var_1dd99.293 to i8*), align 4
  %v1_116fc = call i32 @function_13464(i32 5)
  store i32 %v1_116fc, i32* @r5, align 4
  %v3_1170c = call i32 @function_120c8(i32 %v1_116fc, i32 ptrtoint (i32* @global_var_15278.295 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1dda0.296 to i8*), align 4
  %v0_1171c = load i32, i32* @r5, align 4
  store i32 %v0_1171c, i32* @global_var_1dd9c.297, align 4
  %v0_11720 = load i32, i32* @r6, align 4
  %v1_11720 = trunc i32 %v0_11720 to i8
  store i8 %v1_11720, i8* bitcast (i32* @global_var_1dda1.298 to i8*), align 4
  %v1_11724 = call i32 @function_13464(i32 4)
  store i32 %v1_11724, i32* @r5, align 4
  %v3_11734 = call i32 @function_120c8(i32 %v1_11724, i32 ptrtoint (i32* @global_var_15280.300 to i32), i32 4)
  store i8 4, i8* bitcast (i32* @global_var_1dda8.301 to i8*), align 4
  %v0_11744 = load i32, i32* @r5, align 4
  store i32 %v0_11744, i32* @global_var_1dda4.302, align 4
  %v0_11748 = load i32, i32* @r6, align 4
  %v1_11748 = trunc i32 %v0_11748 to i8
  store i8 %v1_11748, i8* bitcast (i32* @global_var_1dda9.303 to i8*), align 4
  %v1_1174c = call i32 @function_13464(i32 14)
  store i32 %v1_1174c, i32* @r5, align 4
  %v3_1175c = call i32 @function_120c8(i32 %v1_1174c, i32 ptrtoint (i32* @global_var_15288.305 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1ddb0.306 to i8*), align 4
  %v0_1176c = load i32, i32* @r5, align 4
  store i32 %v0_1176c, i32* @global_var_1ddac.307, align 4
  %v0_11770 = load i32, i32* @r6, align 4
  %v1_11770 = trunc i32 %v0_11770 to i8
  store i8 %v1_11770, i8* bitcast (i32* @global_var_1ddb1.308 to i8*), align 4
  %v1_11774 = call i32 @function_13464(i32 6)
  store i32 6, i32* %r8.global-to-local, align 4
  store i32 %v1_11774, i32* @r5, align 4
  %v3_11788 = call i32 @function_120c8(i32 %v1_11774, i32 ptrtoint (i32* @global_var_15298.310 to i32), i32 6)
  %v0_11790 = load i32, i32* @r5, align 4
  store i32 %v0_11790, i32* @global_var_1ddb4.311, align 4
  store i8 6, i8* bitcast (i32* @global_var_1ddb8.312 to i8*), align 4
  %v0_11798 = load i32, i32* @r6, align 4
  %v1_11798 = trunc i32 %v0_11798 to i8
  store i8 %v1_11798, i8* bitcast (i32* @global_var_1ddb9.313 to i8*), align 4
  %v1_1179c = call i32 @function_13464(i32 8)
  store i32 8, i32* %sb.global-to-local, align 4
  store i32 %v1_1179c, i32* @r5, align 4
  %v3_117b0 = call i32 @function_120c8(i32 %v1_1179c, i32 ptrtoint (i32* @global_var_152a0.315 to i32), i32 8)
  %v0_117b4 = load i32, i32* @r7, align 4
  %v0_117b8 = load i32, i32* @r5, align 4
  store i32 %v0_117b8, i32* @global_var_1ddbc.316, align 4
  store i8 8, i8* bitcast (i32* @global_var_1ddc0.317 to i8*), align 4
  %v0_117c0 = load i32, i32* @r6, align 4
  %v1_117c0 = trunc i32 %v0_117c0 to i8
  store i8 %v1_117c0, i8* bitcast (i32* @global_var_1ddc1.318 to i8*), align 4
  %v1_117c4 = call i32 @function_13464(i32 %v0_117b4)
  %v0_117c8 = load i32, i32* @r7, align 4
  store i32 %v1_117c4, i32* @r5, align 4
  %v3_117d4 = call i32 @function_120c8(i32 %v1_117c4, i32 ptrtoint (i32* @global_var_152ac.320 to i32), i32 %v0_117c8)
  %v0_117dc = load i32, i32* @r5, align 4
  store i32 %v0_117dc, i32* @global_var_1ddc4.321, align 4
  %v0_117e0 = load i32, i32* @r7, align 4
  %v1_117e0 = trunc i32 %v0_117e0 to i8
  store i8 %v1_117e0, i8* bitcast (i32* @global_var_1ddc8.322 to i8*), align 4
  %v0_117e4 = load i32, i32* @r6, align 4
  %v1_117e4 = trunc i32 %v0_117e4 to i8
  store i8 %v1_117e4, i8* bitcast (i32* @global_var_1ddc9.323 to i8*), align 4
  %v1_117e8 = call i32 @function_13464(i32 16)
  store i32 %v1_117e8, i32* @r5, align 4
  %v3_117f8 = call i32 @function_120c8(i32 %v1_117e8, i32 ptrtoint (i32* @global_var_152b4.325 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1ddd0.326 to i8*), align 4
  %v0_11808 = load i32, i32* @r5, align 4
  store i32 %v0_11808, i32* @global_var_1ddcc.327, align 4
  %v0_1180c = load i32, i32* @r6, align 4
  %v1_1180c = trunc i32 %v0_1180c to i8
  store i8 %v1_1180c, i8* bitcast (i32* @global_var_1ddd1.328 to i8*), align 4
  %v1_11810 = call i32 @function_13464(i32 14)
  store i32 %v1_11810, i32* @r5, align 4
  %v3_11820 = call i32 @function_120c8(i32 %v1_11810, i32 ptrtoint (i32* @global_var_152c8.330 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1ddd8.331 to i8*), align 4
  %v0_11830 = load i32, i32* @r5, align 4
  store i32 %v0_11830, i32* @global_var_1ddd4.332, align 4
  %v0_11834 = load i32, i32* @r6, align 4
  %v1_11834 = trunc i32 %v0_11834 to i8
  store i8 %v1_11834, i8* bitcast (i32* @global_var_1ddd9.333 to i8*), align 4
  %v1_11838 = call i32 @function_13464(i32 9)
  store i32 9, i32* %fp.global-to-local, align 4
  store i32 %v1_11838, i32* @r5, align 4
  %v3_1184c = call i32 @function_120c8(i32 %v1_11838, i32 ptrtoint (i32* @global_var_152d8.335 to i32), i32 9)
  %v0_11854 = load i32, i32* @r5, align 4
  store i32 %v0_11854, i32* @global_var_1dddc.336, align 4
  store i8 9, i8* bitcast (i32* @global_var_1dde0.337 to i8*), align 4
  %v0_1185c = load i32, i32* @r6, align 4
  %v1_1185c = trunc i32 %v0_1185c to i8
  store i8 %v1_1185c, i8* bitcast (i32* @global_var_1dde1.338 to i8*), align 4
  %v1_11860 = call i32 @function_13464(i32 19)
  store i32 %v1_11860, i32* @r5, align 4
  %v3_11870 = call i32 @function_120c8(i32 %v1_11860, i32 ptrtoint (i32* @global_var_152e4.340 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1dde8.341 to i8*), align 4
  %v0_11880 = load i32, i32* @r5, align 4
  store i32 %v0_11880, i32* @global_var_1dde4.342, align 4
  %v0_11884 = load i32, i32* @r6, align 4
  %v1_11884 = trunc i32 %v0_11884 to i8
  store i8 %v1_11884, i8* bitcast (i32* @global_var_1dde9.343 to i8*), align 4
  %v1_11888 = call i32 @function_13464(i32 23)
  store i32 23, i32* %sl.global-to-local, align 4
  store i32 %v1_11888, i32* @r5, align 4
  %v3_1189c = call i32 @function_120c8(i32 %v1_11888, i32 ptrtoint (i32* @global_var_152f8.345 to i32), i32 23)
  %v0_118a0 = load i32, i32* %sb.global-to-local, align 4
  %v0_118a4 = load i32, i32* @r5, align 4
  store i32 %v0_118a4, i32* @global_var_1ddec.346, align 4
  store i8 23, i8* bitcast (i32* @global_var_1ddf0.347 to i8*), align 4
  %v0_118ac = load i32, i32* @r6, align 4
  %v1_118ac = trunc i32 %v0_118ac to i8
  store i8 %v1_118ac, i8* bitcast (i32* @global_var_1ddf1.348 to i8*), align 4
  %v1_118b0 = call i32 @function_13464(i32 %v0_118a0)
  %v0_118b8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_118b0, i32* @r5, align 4
  %v4_118c0 = call i32 @function_120c8(i32 %v1_118b0, i32 ptrtoint ([9 x i8]* @global_var_15310.350 to i32), i32 %v0_118b8)
  %v0_118c8 = load i32, i32* @r5, align 4
  store i32 %v0_118c8, i32* @global_var_1ddf4.351, align 4
  %v1_118cc = trunc i32 %v0_118b8 to i8
  store i8 %v1_118cc, i8* bitcast (i32* @global_var_1ddf8.352 to i8*), align 4
  %v0_118d0 = load i32, i32* @r6, align 4
  %v1_118d0 = trunc i32 %v0_118d0 to i8
  store i8 %v1_118d0, i8* bitcast (i32* @global_var_1ddf9.353 to i8*), align 4
  %v1_118d4 = call i32 @function_13464(i32 14)
  store i32 %v1_118d4, i32* @r5, align 4
  %v3_118e4 = call i32 @function_120c8(i32 %v1_118d4, i32 ptrtoint (i32* @global_var_1531c.355 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1de00.356 to i8*), align 4
  %v0_118f4 = load i32, i32* @r5, align 4
  store i32 %v0_118f4, i32* @global_var_1ddfc.357, align 4
  %v0_118f8 = load i32, i32* @r6, align 4
  %v1_118f8 = trunc i32 %v0_118f8 to i8
  store i8 %v1_118f8, i8* bitcast (i32* @global_var_1de01.358 to i8*), align 4
  %v1_118fc = call i32 @function_13464(i32 19)
  store i32 %v1_118fc, i32* @r5, align 4
  %v3_1190c = call i32 @function_120c8(i32 %v1_118fc, i32 ptrtoint (i32* @global_var_1532c.360 to i32), i32 19)
  %v0_11914 = load i32, i32* %sl.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1de08.361 to i8*), align 4
  %v0_1191c = load i32, i32* @r5, align 4
  store i32 %v0_1191c, i32* @global_var_1de04.362, align 4
  %v0_11920 = load i32, i32* @r6, align 4
  %v1_11920 = trunc i32 %v0_11920 to i8
  store i8 %v1_11920, i8* bitcast (i32* @global_var_1de09.363 to i8*), align 4
  %v1_11924 = call i32 @function_13464(i32 %v0_11914)
  %v0_1192c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_11924, i32* @r5, align 4
  %v3_11934 = call i32 @function_120c8(i32 %v1_11924, i32 ptrtoint (i32* @global_var_15340.365 to i32), i32 %v0_1192c)
  %v0_1193c = load i32, i32* @r5, align 4
  store i32 %v0_1193c, i32* @global_var_1de0c.366, align 4
  %v1_11940 = trunc i32 %v0_1192c to i8
  store i8 %v1_11940, i8* bitcast (i32* @global_var_1de10.367 to i8*), align 4
  %v0_11944 = load i32, i32* @r6, align 4
  %v1_11944 = trunc i32 %v0_11944 to i8
  store i8 %v1_11944, i8* bitcast (i32* @global_var_1de11.368 to i8*), align 4
  %v1_11948 = call i32 @function_13464(i32 24)
  store i32 %v1_11948, i32* @r5, align 4
  %v3_11958 = call i32 @function_120c8(i32 %v1_11948, i32 ptrtoint (i32* @global_var_15358.370 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1de18.371 to i8*), align 4
  %v0_11968 = load i32, i32* @r5, align 4
  store i32 %v0_11968, i32* @global_var_1de14.372, align 4
  %v0_1196c = load i32, i32* @r6, align 4
  %v1_1196c = trunc i32 %v0_1196c to i8
  store i8 %v1_1196c, i8* bitcast (i32* @global_var_1de19.373 to i8*), align 4
  %v1_11970 = call i32 @function_13464(i32 15)
  store i32 %v1_11970, i32* @r5, align 4
  %v3_11980 = call i32 @function_120c8(i32 %v1_11970, i32 ptrtoint (i32* @global_var_15374.375 to i32), i32 15)
  %v0_11988 = load i32, i32* %r8.global-to-local, align 4
  store i8 15, i8* bitcast (i32* @global_var_1de20.376 to i8*), align 4
  %v0_11990 = load i32, i32* @r5, align 4
  store i32 %v0_11990, i32* @global_var_1de1c.377, align 4
  %v0_11994 = load i32, i32* @r6, align 4
  %v1_11994 = trunc i32 %v0_11994 to i8
  store i8 %v1_11994, i8* bitcast (i32* @global_var_1de21.378 to i8*), align 4
  %v1_11998 = call i32 @function_13464(i32 %v0_11988)
  %v0_1199c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_11998, i32* @r5, align 4
  %v4_119a8 = call i32 @function_120c8(i32 %v1_11998, i32 ptrtoint ([7 x i8]* @global_var_15384.380 to i32), i32 %v0_1199c)
  %v0_119ac = load i32, i32* @r7, align 4
  %v0_119b0 = load i32, i32* @r5, align 4
  store i32 %v0_119b0, i32* @global_var_1de24.381, align 4
  %v1_119b4 = trunc i32 %v0_1199c to i8
  store i8 %v1_119b4, i8* bitcast (i32* @global_var_1de28.382 to i8*), align 4
  %v0_119b8 = load i32, i32* @r6, align 4
  %v1_119b8 = trunc i32 %v0_119b8 to i8
  store i8 %v1_119b8, i8* bitcast (i32* @global_var_1de29.383 to i8*), align 4
  %v1_119bc = call i32 @function_13464(i32 %v0_119ac)
  %v0_119c0 = load i32, i32* @r7, align 4
  store i32 %v1_119bc, i32* @r5, align 4
  %v4_119cc = call i32 @function_120c8(i32 %v1_119bc, i32 ptrtoint ([8 x i8]* @global_var_1538c.385 to i32), i32 %v0_119c0)
  %v0_119d0 = load i32, i32* @r7, align 4
  %v0_119d4 = load i32, i32* @r5, align 4
  store i32 %v0_119d4, i32* @global_var_1de2c.386, align 4
  %v1_119d8 = trunc i32 %v0_119d0 to i8
  store i8 %v1_119d8, i8* bitcast (i32* @global_var_1de30.387 to i8*), align 4
  %v0_119dc = load i32, i32* @r6, align 4
  %v1_119dc = trunc i32 %v0_119dc to i8
  store i8 %v1_119dc, i8* bitcast (i32* @global_var_1de31.388 to i8*), align 4
  %v1_119e0 = call i32 @function_13464(i32 %v0_119d0)
  %v0_119e4 = load i32, i32* @r7, align 4
  store i32 %v1_119e0, i32* @r5, align 4
  %v4_119f0 = call i32 @function_120c8(i32 %v1_119e0, i32 ptrtoint ([8 x i8]* @global_var_15394.390 to i32), i32 %v0_119e4)
  %v0_119f8 = load i32, i32* @r5, align 4
  store i32 %v0_119f8, i32* @global_var_1de34.391, align 4
  %v0_119fc = load i32, i32* @r7, align 4
  %v1_119fc = trunc i32 %v0_119fc to i8
  store i8 %v1_119fc, i8* bitcast (i32* @global_var_1de38.392 to i8*), align 4
  %v0_11a00 = load i32, i32* @r6, align 4
  %v1_11a00 = trunc i32 %v0_11a00 to i8
  store i8 %v1_11a00, i8* bitcast (i32* @global_var_1de39.393 to i8*), align 4
  %v1_11a04 = call i32 @function_13464(i32 3)
  store i32 %v1_11a04, i32* @r5, align 4
  %v4_11a14 = call i32 @function_120c8(i32 %v1_11a04, i32 ptrtoint ([4 x i8]* @global_var_1539c.395 to i32), i32 3)
  %v0_11a1c = load i32, i32* %sl.global-to-local, align 4
  store i8 3, i8* bitcast (i32* @global_var_1de40.396 to i8*), align 4
  %v0_11a24 = load i32, i32* @r5, align 4
  store i32 %v0_11a24, i32* @global_var_1de3c.397, align 4
  %v0_11a28 = load i32, i32* @r6, align 4
  %v1_11a28 = trunc i32 %v0_11a28 to i8
  store i8 %v1_11a28, i8* bitcast (i32* @global_var_1de41.398 to i8*), align 4
  %v1_11a2c = call i32 @function_13464(i32 %v0_11a1c)
  %v0_11a34 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_11a2c, i32* @r5, align 4
  %v3_11a3c = call i32 @function_120c8(i32 %v1_11a2c, i32 ptrtoint (i32* @global_var_153a0.400 to i32), i32 %v0_11a34)
  %v0_11a44 = load i32, i32* @r5, align 4
  store i32 %v0_11a44, i32* @global_var_1de44.401, align 4
  %v1_11a48 = trunc i32 %v0_11a34 to i8
  store i8 %v1_11a48, i8* bitcast (i32* @global_var_1de48.402 to i8*), align 4
  %v0_11a4c = load i32, i32* @r6, align 4
  %v1_11a4c = trunc i32 %v0_11a4c to i8
  store i8 %v1_11a4c, i8* bitcast (i32* @global_var_1de49.403 to i8*), align 4
  %v1_11a50 = call i32 @function_13464(i32 28)
  store i32 %v1_11a50, i32* @r5, align 4
  %v3_11a60 = call i32 @function_120c8(i32 %v1_11a50, i32 ptrtoint (i32* @global_var_153b8.405 to i32), i32 28)
  %v0_11a68 = load i32, i32* %fp.global-to-local, align 4
  store i8 28, i8* bitcast (i32* @global_var_1de50.406 to i8*), align 4
  %v0_11a70 = load i32, i32* @r5, align 4
  store i32 %v0_11a70, i32* @global_var_1de4c.407, align 4
  %v0_11a74 = load i32, i32* @r6, align 4
  %v1_11a74 = trunc i32 %v0_11a74 to i8
  store i8 %v1_11a74, i8* bitcast (i32* @global_var_1de51.408 to i8*), align 4
  %v1_11a78 = call i32 @function_13464(i32 %v0_11a68)
  %v0_11a7c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_11a78, i32* @r5, align 4
  %v4_11a88 = call i32 @function_120c8(i32 %v1_11a78, i32 ptrtoint ([10 x i8]* @global_var_153d8.410 to i32), i32 %v0_11a7c)
  %v0_11a8c = load i32, i32* %sb.global-to-local, align 4
  %v0_11a90 = load i32, i32* @r5, align 4
  store i32 %v0_11a90, i32* @global_var_1de54.411, align 4
  %v1_11a94 = trunc i32 %v0_11a7c to i8
  store i8 %v1_11a94, i8* bitcast (i32* @global_var_1de58.412 to i8*), align 4
  %v0_11a98 = load i32, i32* @r6, align 4
  %v1_11a98 = trunc i32 %v0_11a98 to i8
  store i8 %v1_11a98, i8* bitcast (i32* @global_var_1de59.413 to i8*), align 4
  %v1_11a9c = call i32 @function_13464(i32 %v0_11a8c)
  %v0_11aa4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_11a9c, i32* @r5, align 4
  %v4_11aac = call i32 @function_120c8(i32 %v1_11a9c, i32 ptrtoint ([9 x i8]* @global_var_15310.350 to i32), i32 %v0_11aa4)
  %v0_11ab4 = load i32, i32* @r5, align 4
  store i32 %v0_11ab4, i32* @global_var_1de5c.414, align 4
  %v1_11ab8 = trunc i32 %v0_11aa4 to i8
  store i8 %v1_11ab8, i8* bitcast (i32* @global_var_1de60.415 to i8*), align 4
  %v0_11abc = load i32, i32* @r6, align 4
  %v1_11abc = trunc i32 %v0_11abc to i8
  store i8 %v1_11abc, i8* bitcast (i32* @global_var_1de61.416 to i8*), align 4
  %v1_11ac0 = call i32 @function_13464(i32 5)
  store i32 %v1_11ac0, i32* @r5, align 4
  %v4_11ad0 = call i32 @function_120c8(i32 %v1_11ac0, i32 ptrtoint ([6 x i8]* @global_var_153e4.418 to i32), i32 5)
  %v0_11ad8 = load i32, i32* %r8.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1de68.419 to i8*), align 4
  %v0_11ae0 = load i32, i32* @r5, align 4
  store i32 %v0_11ae0, i32* @global_var_1de64.420, align 4
  %v0_11ae4 = load i32, i32* @r6, align 4
  %v1_11ae4 = trunc i32 %v0_11ae4 to i8
  store i8 %v1_11ae4, i8* bitcast (i32* @global_var_1de69.421 to i8*), align 4
  %v1_11ae8 = call i32 @function_13464(i32 %v0_11ad8)
  %v0_11aec = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_11ae8, i32* @r5, align 4
  %v4_11af8 = call i32 @function_120c8(i32 %v1_11ae8, i32 ptrtoint ([7 x i8]* @global_var_153ec.423 to i32), i32 %v0_11aec)
  %v0_11b00 = load i32, i32* @r5, align 4
  store i32 %v0_11b00, i32* @global_var_1de6c.424, align 4
  %v1_11b04 = trunc i32 %v0_11aec to i8
  store i8 %v1_11b04, i8* bitcast (i32* @global_var_1de70.425 to i8*), align 4
  %v0_11b08 = load i32, i32* @r6, align 4
  %v1_11b08 = trunc i32 %v0_11b08 to i8
  store i8 %v1_11b08, i8* bitcast (i32* @global_var_1de71.426 to i8*), align 4
  %v1_11b0c = call i32 @function_13464(i32 16)
  store i32 %v1_11b0c, i32* @r5, align 4
  %v3_11b1c = call i32 @function_120c8(i32 %v1_11b0c, i32 ptrtoint (i32* @global_var_153f4.428 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1de78.429 to i8*), align 4
  %v0_11b2c = load i32, i32* @r5, align 4
  store i32 %v0_11b2c, i32* @global_var_1de74.430, align 4
  %v0_11b30 = load i32, i32* @r6, align 4
  %v1_11b30 = trunc i32 %v0_11b30 to i8
  store i8 %v1_11b30, i8* bitcast (i32* @global_var_1de79.431 to i8*), align 4
  %v1_11b34 = call i32 @function_13464(i32 21)
  store i32 21, i32* @r5, align 4
  store i32 %v1_11b34, i32* @r7, align 4
  %v3_11b48 = call i32 @function_120c8(i32 %v1_11b34, i32 ptrtoint (i32* @global_var_15408.433 to i32), i32 21)
  %v0_11b4c = load i32, i32* @r5, align 4
  %v0_11b50 = load i32, i32* @r7, align 4
  store i32 %v0_11b50, i32* @global_var_1de7c.434, align 4
  %v1_11b54 = trunc i32 %v0_11b4c to i8
  store i8 %v1_11b54, i8* bitcast (i32* @global_var_1de80.435 to i8*), align 4
  %v0_11b58 = load i32, i32* @r6, align 4
  %v1_11b58 = trunc i32 %v0_11b58 to i8
  store i8 %v1_11b58, i8* bitcast (i32* @global_var_1de81.436 to i8*), align 4
  %v1_11b5c = call i32 @function_13464(i32 %v0_11b4c)
  %v0_11b60 = load i32, i32* @r5, align 4
  store i32 %v1_11b5c, i32* @r7, align 4
  %v3_11b6c = call i32 @function_120c8(i32 %v1_11b5c, i32 ptrtoint (i32* @global_var_15420.438 to i32), i32 %v0_11b60)
  %v0_11b74 = load i32, i32* @r7, align 4
  store i32 %v0_11b74, i32* @global_var_1de84.439, align 4
  %v0_11b78 = load i32, i32* @r5, align 4
  %v1_11b78 = trunc i32 %v0_11b78 to i8
  store i8 %v1_11b78, i8* bitcast (i32* @global_var_1de88.440 to i8*), align 4
  %v0_11b7c = load i32, i32* @r6, align 4
  %v1_11b7c = trunc i32 %v0_11b7c to i8
  store i8 %v1_11b7c, i8* bitcast (i32* @global_var_1de89.441 to i8*), align 4
  %v1_11b80 = call i32 @function_13464(i32 17)
  store i32 %v1_11b80, i32* @r5, align 4
  %v3_11b90 = call i32 @function_120c8(i32 %v1_11b80, i32 ptrtoint (i32* @global_var_15438.443 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1de90.444 to i8*), align 4
  %v0_11ba0 = load i32, i32* @r5, align 4
  store i32 %v0_11ba0, i32* @global_var_1de8c.445, align 4
  %v0_11ba4 = load i32, i32* @r6, align 4
  %v1_11ba4 = trunc i32 %v0_11ba4 to i8
  store i8 %v1_11ba4, i8* bitcast (i32* @global_var_1de91.446 to i8*), align 4
  %v1_11ba8 = call i32 @function_13464(i32 11)
  store i32 %v1_11ba8, i32* @r5, align 4
  %v0_11bb8 = load i32, i32* %r8.global-to-local, align 4
  %v1_11bb8 = add i32 %v0_11bb8, 5
  store i32 %v1_11bb8, i32* %r8.global-to-local, align 4
  %v4_11bbc = call i32 @function_120c8(i32 %v1_11ba8, i32 ptrtoint ([12 x i8]* @global_var_1544c.448 to i32), i32 11)
  %v0_11bc0 = load i32, i32* %sl.global-to-local, align 4
  %v0_11bc4 = load i32, i32* @r5, align 4
  store i32 %v0_11bc4, i32* @global_var_1de94.449, align 4
  %v1_11bc8 = trunc i32 %v1_11bb8 to i8
  store i8 %v1_11bc8, i8* bitcast (i32* @global_var_1de98.450 to i8*), align 4
  %v0_11bcc = load i32, i32* @r6, align 4
  %v1_11bcc = trunc i32 %v0_11bcc to i8
  store i8 %v1_11bcc, i8* bitcast (i32* @global_var_1de99.451 to i8*), align 4
  %v1_11bd0 = call i32 @function_13464(i32 %v0_11bc0)
  %v0_11bd8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_11bd0, i32* @r5, align 4
  %v3_11be0 = call i32 @function_120c8(i32 %v1_11bd0, i32 ptrtoint (i32* @global_var_15458.453 to i32), i32 %v0_11bd8)
  %v0_11be8 = load i32, i32* @r5, align 4
  store i32 %v0_11be8, i32* @global_var_1de9c.454, align 4
  %v1_11bec = trunc i32 %v0_11bd8 to i8
  store i8 %v1_11bec, i8* bitcast (i32* @global_var_1dea0.455 to i8*), align 4
  %v0_11bf0 = load i32, i32* @r6, align 4
  %v1_11bf0 = trunc i32 %v0_11bf0 to i8
  store i8 %v1_11bf0, i8* bitcast (i32* @global_var_1dea1.456 to i8*), align 4
  %v1_11bf4 = call i32 @function_13464(i32 83)
  store i32 %v1_11bf4, i32* @r5, align 4
  %v3_11c04 = call i32 @function_120c8(i32 %v1_11bf4, i32 ptrtoint (i32* @global_var_1577c.458 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1dea8.459 to i8*), align 4
  %v0_11c14 = load i32, i32* @r5, align 4
  store i32 %v0_11c14, i32* @global_var_1dea4.460, align 4
  %v0_11c18 = load i32, i32* @r6, align 4
  %v1_11c18 = trunc i32 %v0_11c18 to i8
  store i8 %v1_11c18, i8* bitcast (i32* @global_var_1dea9.461 to i8*), align 4
  %v1_11c1c = call i32 @function_13464(i32 32)
  store i32 %v1_11c1c, i32* @r5, align 4
  %v3_11c2c = call i32 @function_120c8(i32 %v1_11c1c, i32 ptrtoint (i32* @global_var_157d0.463 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1deb0.464 to i8*), align 4
  %v0_11c3c = load i32, i32* @r5, align 4
  store i32 %v0_11c3c, i32* @global_var_1deac.465, align 4
  %v0_11c40 = load i32, i32* @r6, align 4
  %v1_11c40 = trunc i32 %v0_11c40 to i8
  store i8 %v1_11c40, i8* bitcast (i32* @global_var_1deb1.466 to i8*), align 4
  %v1_11c44 = call i32 @function_13464(i32 48)
  store i32 %v1_11c44, i32* @r5, align 4
  %v3_11c54 = call i32 @function_120c8(i32 %v1_11c44, i32 ptrtoint (i32* @global_var_15470.468 to i32), i32 48)
  store i8 48, i8* bitcast (i32* @global_var_1deb8.469 to i8*), align 4
  %v0_11c64 = load i32, i32* @r5, align 4
  store i32 %v0_11c64, i32* @global_var_1deb4.470, align 4
  %v0_11c68 = load i32, i32* @r6, align 4
  %v1_11c68 = trunc i32 %v0_11c68 to i8
  store i8 %v1_11c68, i8* bitcast (i32* @global_var_1deb9.471 to i8*), align 4
  %v1_11c6c = call i32 @function_13464(i32 12)
  store i32 12, i32* @r7, align 4
  store i32 %v1_11c6c, i32* @r5, align 4
  %v3_11c80 = call i32 @function_120c8(i32 %v1_11c6c, i32 ptrtoint (i32* @global_var_154a4.473 to i32), i32 12)
  %v0_11c84 = load i32, i32* %fp.global-to-local, align 4
  %v0_11c88 = load i32, i32* @r5, align 4
  store i32 %v0_11c88, i32* @global_var_1debc.474, align 4
  %v0_11c8c = load i32, i32* @r7, align 4
  %v1_11c8c = trunc i32 %v0_11c8c to i8
  store i8 %v1_11c8c, i8* bitcast (i32* @global_var_1dec0.475 to i8*), align 4
  %v0_11c90 = load i32, i32* @r6, align 4
  %v1_11c90 = trunc i32 %v0_11c90 to i8
  store i8 %v1_11c90, i8* bitcast (i32* @global_var_1dec1.476 to i8*), align 4
  %v1_11c94 = call i32 @function_13464(i32 %v0_11c84)
  %v0_11c98 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_11c94, i32* @r5, align 4
  %v3_11ca4 = call i32 @function_120c8(i32 %v1_11c94, i32 ptrtoint (i32* @global_var_154b4.478 to i32), i32 %v0_11c98)
  %v0_11cac = load i32, i32* @r5, align 4
  store i32 %v0_11cac, i32* @global_var_1dec4.479, align 4
  %v1_11cb0 = trunc i32 %v0_11c98 to i8
  store i8 %v1_11cb0, i8* bitcast (i32* @global_var_1dec8.480 to i8*), align 4
  %v0_11cb4 = load i32, i32* @r6, align 4
  %v1_11cb4 = trunc i32 %v0_11cb4 to i8
  store i8 %v1_11cb4, i8* bitcast (i32* @global_var_1dec9.481 to i8*), align 4
  %v1_11cb8 = call i32 @function_13464(i32 10)
  store i32 %v1_11cb8, i32* @r5, align 4
  %v0_11cc8 = load i32, i32* %fp.global-to-local, align 4
  %v1_11cc8 = add i32 %v0_11cc8, 1
  store i32 %v1_11cc8, i32* %fp.global-to-local, align 4
  %v3_11ccc = call i32 @function_120c8(i32 %v1_11cb8, i32 ptrtoint (i32* @global_var_154c0.483 to i32), i32 10)
  %v0_11cd0 = load i32, i32* @r7, align 4
  %v0_11cd4 = load i32, i32* @r5, align 4
  store i32 %v0_11cd4, i32* @global_var_1decc.484, align 4
  %v1_11cd8 = trunc i32 %v1_11cc8 to i8
  store i8 %v1_11cd8, i8* bitcast (i32* @global_var_1ded0.485 to i8*), align 4
  %v0_11cdc = load i32, i32* @r6, align 4
  %v1_11cdc = trunc i32 %v0_11cdc to i8
  store i8 %v1_11cdc, i8* bitcast (i32* @global_var_1ded1.486 to i8*), align 4
  %v1_11ce0 = call i32 @function_13464(i32 %v0_11cd0)
  %v0_11ce4 = load i32, i32* @r7, align 4
  store i32 %v1_11ce0, i32* @r5, align 4
  %v3_11cf0 = call i32 @function_120c8(i32 %v1_11ce0, i32 ptrtoint (i32* @global_var_154cc.488 to i32), i32 %v0_11ce4)
  %v0_11cf8 = load i32, i32* @r5, align 4
  store i32 %v0_11cf8, i32* @global_var_1ded4.489, align 4
  %v0_11cfc = load i32, i32* @r7, align 4
  %v1_11cfc = trunc i32 %v0_11cfc to i8
  store i8 %v1_11cfc, i8* bitcast (i32* @global_var_1ded8.490 to i8*), align 4
  %v0_11d00 = load i32, i32* @r6, align 4
  %v1_11d00 = trunc i32 %v0_11d00 to i8
  store i8 %v1_11d00, i8* bitcast (i32* @global_var_1ded9.491 to i8*), align 4
  %v1_11d04 = call i32 @function_13464(i32 16)
  store i32 %v1_11d04, i32* @r5, align 4
  %v3_11d14 = call i32 @function_120c8(i32 %v1_11d04, i32 ptrtoint (i32* @global_var_154dc.493 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1dee0.494 to i8*), align 4
  %v0_11d24 = load i32, i32* @r5, align 4
  store i32 %v0_11d24, i32* @global_var_1dedc.495, align 4
  %v0_11d28 = load i32, i32* @r6, align 4
  %v1_11d28 = trunc i32 %v0_11d28 to i8
  store i8 %v1_11d28, i8* bitcast (i32* @global_var_1dee1.496 to i8*), align 4
  %v1_11d2c = call i32 @function_13464(i32 19)
  store i32 %v1_11d2c, i32* @r5, align 4
  %v3_11d3c = call i32 @function_120c8(i32 %v1_11d2c, i32 ptrtoint (i32* @global_var_154f0.498 to i32), i32 19)
  %v0_11d44 = load i32, i32* %sb.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1dee8.499 to i8*), align 4
  %v0_11d4c = load i32, i32* @r5, align 4
  store i32 %v0_11d4c, i32* @global_var_1dee4.500, align 4
  %v0_11d50 = load i32, i32* @r6, align 4
  %v1_11d50 = trunc i32 %v0_11d50 to i8
  store i8 %v1_11d50, i8* bitcast (i32* @global_var_1dee9.501 to i8*), align 4
  %v1_11d54 = call i32 @function_13464(i32 %v0_11d44)
  %v0_11d5c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_11d54, i32* @r5, align 4
  %v4_11d64 = call i32 @function_120c8(i32 %v1_11d54, i32 ptrtoint ([9 x i8]* @global_var_15504.503 to i32), i32 %v0_11d5c)
  %v0_11d68 = load i32, i32* %r8.global-to-local, align 4
  %v0_11d6c = load i32, i32* @r5, align 4
  store i32 %v0_11d6c, i32* @global_var_1deec.504, align 4
  %v1_11d70 = trunc i32 %v0_11d5c to i8
  store i8 %v1_11d70, i8* bitcast (i32* @global_var_1def0.505 to i8*), align 4
  %v0_11d74 = load i32, i32* @r6, align 4
  %v1_11d74 = trunc i32 %v0_11d74 to i8
  store i8 %v1_11d74, i8* bitcast (i32* @global_var_1def1.506 to i8*), align 4
  %v1_11d78 = call i32 @function_13464(i32 %v0_11d68)
  %v0_11d80 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_11d78, i32* @r5, align 4
  %v3_11d88 = call i32 @function_120c8(i32 %v1_11d78, i32 ptrtoint (i32* @global_var_15464.508 to i32), i32 %v0_11d80)
  %v0_11d8c = load i32, i32* @r7, align 4
  %v0_11d90 = load i32, i32* @r5, align 4
  store i32 %v0_11d90, i32* @global_var_1def4.509, align 4
  %v1_11d94 = trunc i32 %v0_11d80 to i8
  store i8 %v1_11d94, i8* bitcast (i32* @global_var_1def8.510 to i8*), align 4
  %v0_11d98 = load i32, i32* @r6, align 4
  %v1_11d98 = trunc i32 %v0_11d98 to i8
  store i8 %v1_11d98, i8* bitcast (i32* @global_var_1def9.511 to i8*), align 4
  %v1_11d9c = call i32 @function_13464(i32 %v0_11d8c)
  %v0_11da0 = load i32, i32* @r7, align 4
  store i32 %v1_11d9c, i32* @r5, align 4
  %v3_11dac = call i32 @function_120c8(i32 %v1_11d9c, i32 ptrtoint (i32* @global_var_15510.513 to i32), i32 %v0_11da0)
  %v0_11db4 = load i32, i32* @r5, align 4
  store i32 %v0_11db4, i32* @global_var_1defc.514, align 4
  %v0_11db8 = load i32, i32* @r7, align 4
  %v1_11db8 = trunc i32 %v0_11db8 to i8
  store i8 %v1_11db8, i8* bitcast (i32* @global_var_1df00.515 to i8*), align 4
  %v0_11dbc = load i32, i32* @r6, align 4
  %v1_11dbc = trunc i32 %v0_11dbc to i8
  store i8 %v1_11dbc, i8* bitcast (i32* @global_var_1df01.516 to i8*), align 4
  %v1_11dc0 = call i32 @function_13464(i32 18)
  store i32 %v1_11dc0, i32* @r5, align 4
  %v3_11dd0 = call i32 @function_120c8(i32 %v1_11dc0, i32 ptrtoint (i32* @global_var_15520.518 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1df08.519 to i8*), align 4
  %v0_11de0 = load i32, i32* @r5, align 4
  store i32 %v0_11de0, i32* @global_var_1df04.520, align 4
  %v0_11de4 = load i32, i32* @r6, align 4
  %v1_11de4 = trunc i32 %v0_11de4 to i8
  store i8 %v1_11de4, i8* bitcast (i32* @global_var_1df09.521 to i8*), align 4
  %v1_11de8 = call i32 @function_13464(i32 25)
  store i32 %v1_11de8, i32* @r5, align 4
  %v3_11df8 = call i32 @function_120c8(i32 %v1_11de8, i32 ptrtoint (i32* @global_var_15534.523 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1df10.524 to i8*), align 4
  %v0_11e08 = load i32, i32* @r5, align 4
  store i32 %v0_11e08, i32* @global_var_1df0c.525, align 4
  %v0_11e0c = load i32, i32* @r6, align 4
  %v1_11e0c = trunc i32 %v0_11e0c to i8
  store i8 %v1_11e0c, i8* bitcast (i32* @global_var_1df11.526 to i8*), align 4
  %v1_11e10 = call i32 @function_13464(i32 115)
  store i32 115, i32* @r5, align 4
  store i32 %v1_11e10, i32* @r7, align 4
  %v3_11e24 = call i32 @function_120c8(i32 %v1_11e10, i32 ptrtoint (i32* @global_var_15550.528 to i32), i32 115)
  %v0_11e28 = load i32, i32* @r5, align 4
  %v0_11e2c = load i32, i32* @r7, align 4
  store i32 %v0_11e2c, i32* @global_var_1df14.529, align 4
  %v1_11e30 = trunc i32 %v0_11e28 to i8
  store i8 %v1_11e30, i8* bitcast (i32* @global_var_1df18.530 to i8*), align 4
  %v0_11e34 = load i32, i32* @r6, align 4
  %v1_11e34 = trunc i32 %v0_11e34 to i8
  store i8 %v1_11e34, i8* bitcast (i32* @global_var_1df19.531 to i8*), align 4
  %v1_11e38 = call i32 @function_13464(i32 %v0_11e28)
  %v0_11e3c = load i32, i32* @r5, align 4
  store i32 %v1_11e38, i32* @r7, align 4
  %v3_11e48 = call i32 @function_120c8(i32 %v1_11e38, i32 ptrtoint (i32* @global_var_155c4.533 to i32), i32 %v0_11e3c)
  %v0_11e50 = load i32, i32* @r7, align 4
  store i32 %v0_11e50, i32* @global_var_1df1c.534, align 4
  %v0_11e54 = load i32, i32* @r5, align 4
  %v1_11e54 = trunc i32 %v0_11e54 to i8
  store i8 %v1_11e54, i8* bitcast (i32* @global_var_1df20.535 to i8*), align 4
  %v0_11e58 = load i32, i32* @r6, align 4
  %v1_11e58 = trunc i32 %v0_11e58 to i8
  store i8 %v1_11e58, i8* bitcast (i32* @global_var_1df21.536 to i8*), align 4
  %v1_11e5c = call i32 @function_13464(i32 79)
  store i32 %v1_11e5c, i32* @r5, align 4
  %v3_11e6c = call i32 @function_120c8(i32 %v1_11e5c, i32 ptrtoint (i32* @global_var_15638.538 to i32), i32 79)
  store i8 79, i8* bitcast (i32* @global_var_1df28.539 to i8*), align 4
  %v0_11e7c = load i32, i32* @r5, align 4
  store i32 %v0_11e7c, i32* @global_var_1df24.540, align 4
  %v0_11e80 = load i32, i32* @r6, align 4
  %v1_11e80 = trunc i32 %v0_11e80 to i8
  store i8 %v1_11e80, i8* bitcast (i32* @global_var_1df29.541 to i8*), align 4
  %v1_11e84 = call i32 @function_13464(i32 114)
  store i32 114, i32* @r5, align 4
  store i32 %v1_11e84, i32* @r7, align 4
  %v3_11e98 = call i32 @function_120c8(i32 %v1_11e84, i32 ptrtoint (i32* @global_var_15688.543 to i32), i32 114)
  %v0_11e9c = load i32, i32* @r5, align 4
  %v0_11ea0 = load i32, i32* @r7, align 4
  store i32 %v0_11ea0, i32* @global_var_1df2c.544, align 4
  %v1_11ea4 = trunc i32 %v0_11e9c to i8
  store i8 %v1_11ea4, i8* bitcast (i32* @global_var_1df30.545 to i8*), align 4
  %v0_11ea8 = load i32, i32* @r6, align 4
  %v1_11ea8 = trunc i32 %v0_11ea8 to i8
  store i8 %v1_11ea8, i8* bitcast (i32* @global_var_1df31.546 to i8*), align 4
  %v1_11eac = call i32 @function_13464(i32 %v0_11e9c)
  %v0_11eb0 = load i32, i32* @r5, align 4
  store i32 %v1_11eac, i32* @r7, align 4
  %v3_11ebc = call i32 @function_120c8(i32 %v1_11eac, i32 ptrtoint (i32* @global_var_156fc.548 to i32), i32 %v0_11eb0)
  %v0_11ec4 = load i32, i32* @r5, align 4
  %v1_11ec4 = trunc i32 %v0_11ec4 to i8
  store i8 %v1_11ec4, i8* bitcast (i32* @global_var_1df38.549 to i8*), align 4
  %v0_11ec8 = load i32, i32* @r7, align 4
  store i32 %v0_11ec8, i32* @global_var_1df34.550, align 4
  %v0_11ecc = load i32, i32* @r6, align 4
  %v1_11ecc = trunc i32 %v0_11ecc to i8
  store i8 %v1_11ecc, i8* bitcast (i32* @global_var_1df39.551 to i8*), align 4
  %v1_11ed0 = call i32 @function_13464(i32 14)
  store i32 %v1_11ed0, i32* @r5, align 4
  %v3_11ee0 = call i32 @function_120c8(i32 %v1_11ed0, i32 ptrtoint (i32* @global_var_1531c.355 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1df40.552 to i8*), align 4
  %v0_11ef0 = load i32, i32* @r5, align 4
  store i32 %v0_11ef0, i32* @global_var_1df3c.553, align 4
  %v0_11ef4 = load i32, i32* @r6, align 4
  %v1_11ef4 = trunc i32 %v0_11ef4 to i8
  store i8 %v1_11ef4, i8* bitcast (i32* @global_var_1df41.554 to i8*), align 4
  %v1_11ef8 = call i32 @function_13464(i32 19)
  store i32 %v1_11ef8, i32* @r5, align 4
  %v3_11f08 = call i32 @function_120c8(i32 %v1_11ef8, i32 ptrtoint (i32* @global_var_1532c.360 to i32), i32 19)
  %v0_11f10 = load i32, i32* %sl.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1df48.555 to i8*), align 4
  %v0_11f18 = load i32, i32* @r5, align 4
  store i32 %v0_11f18, i32* @global_var_1df44.556, align 4
  %v0_11f1c = load i32, i32* @r6, align 4
  %v1_11f1c = trunc i32 %v0_11f1c to i8
  store i8 %v1_11f1c, i8* bitcast (i32* @global_var_1df49.557 to i8*), align 4
  %v1_11f20 = call i32 @function_13464(i32 %v0_11f10)
  %v0_11f28 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_11f20, i32* @r5, align 4
  %v3_11f30 = call i32 @function_120c8(i32 %v1_11f20, i32 ptrtoint (i32* @global_var_152f8.345 to i32), i32 %v0_11f28)
  %v0_11f34 = load i32, i32* %fp.global-to-local, align 4
  %v0_11f38 = load i32, i32* @r5, align 4
  store i32 %v0_11f38, i32* @global_var_1df4c.558, align 4
  %v1_11f3c = trunc i32 %v0_11f28 to i8
  store i8 %v1_11f3c, i8* bitcast (i32* @global_var_1df50.559 to i8*), align 4
  %v0_11f40 = load i32, i32* @r6, align 4
  %v1_11f40 = trunc i32 %v0_11f40 to i8
  store i8 %v1_11f40, i8* bitcast (i32* @global_var_1df51.560 to i8*), align 4
  %v1_11f44 = call i32 @function_13464(i32 %v0_11f34)
  %v0_11f4c = load i32, i32* %fp.global-to-local, align 4
  %v4_11f54 = call i32 @function_120c8(i32 %v1_11f44, i32 ptrtoint ([11 x i8]* @global_var_15770.562 to i32), i32 %v0_11f4c)
  %v0_11f58 = load i32, i32* @r6, align 4
  %v1_11f58 = trunc i32 %v0_11f58 to i8
  store i8 %v1_11f58, i8* bitcast (i32* @global_var_1df59.563 to i8*), align 4
  store i32 %v1_11f44, i32* @global_var_1df54.564, align 4
  %v1_11f60 = trunc i32 %v0_11f4c to i8
  store i8 %v1_11f60, i8* bitcast (i32* @global_var_1df58.565 to i8*), align 4
  %v2_11f64 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11f64, i32* @r4, align 4
  store i32 %v6_11650, i32* @r5, align 4
  store i32 %v9_11650, i32* @r6, align 4
  store i32 %v12_11650, i32* @r7, align 4
  ret i32 %v4_11f54

; uselistorder directives
  uselistorder i32 %v1_11f20, { 1, 0 }
  uselistorder i32 %v1_11eac, { 1, 0 }
  uselistorder i32 %v1_11e84, { 1, 0 }
  uselistorder i32 %v1_11e38, { 1, 0 }
  uselistorder i32 %v1_11e10, { 1, 0 }
  uselistorder i32 %v1_11d9c, { 1, 0 }
  uselistorder i32 %v1_11d78, { 1, 0 }
  uselistorder i32 %v1_11d54, { 1, 0 }
  uselistorder i32 %v1_11ce0, { 1, 0 }
  uselistorder i32 %v1_11c94, { 1, 0 }
  uselistorder i32 %v1_11c6c, { 1, 0 }
  uselistorder i32 %v1_11bd0, { 1, 0 }
  uselistorder i32 %v1_11b5c, { 1, 0 }
  uselistorder i32 %v1_11b34, { 1, 0 }
  uselistorder i32 %v1_11ae8, { 1, 0 }
  uselistorder i32 %v1_11a9c, { 1, 0 }
  uselistorder i32 %v1_11a78, { 1, 0 }
  uselistorder i32 %v1_11a2c, { 1, 0 }
  uselistorder i32 %v1_119e0, { 1, 0 }
  uselistorder i32 %v1_119bc, { 1, 0 }
  uselistorder i32 %v1_11998, { 1, 0 }
  uselistorder i32 %v1_11924, { 1, 0 }
  uselistorder i32 %v1_118b0, { 1, 0 }
  uselistorder i32 %v1_11888, { 1, 0 }
  uselistorder i32 %v1_11838, { 1, 0 }
  uselistorder i32 %v1_117c4, { 1, 0 }
  uselistorder i32 %v1_1179c, { 1, 0 }
  uselistorder i32 %v1_11774, { 1, 0 }
  uselistorder i32 %v1_116d4, { 1, 0 }
  uselistorder i32 %v1_11688, { 1, 0 }
  uselistorder i32 %v1_11658, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 3, 5, 4, 7, 6, 8 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 6, 8 }
  uselistorder i32 114, { 1, 2, 0 }
  uselistorder i32 115, { 1, 2, 0 }
  uselistorder i8 17, { 1, 0, 2, 3 }
  uselistorder i8 3, { 2, 0, 1 }
  uselistorder i8 16, { 15, 16, 17, 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i8 6, { 0, 7, 5, 8, 9, 1, 10, 11, 2, 3, 4, 6 }
  uselistorder i8 4, { 4, 5, 2, 0, 1, 3 }
  uselistorder i8 5, { 11, 12, 13, 0, 1, 14, 2, 3, 4, 5, 6, 7, 8, 15, 9, 10 }
  uselistorder i32 (i32, i32, i32)* @function_120c8, { 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_1dd64.267 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_1204c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1204c:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_12050 = load i8, i8* %arg1, align 1
  %v4_12050 = zext i8 %v3_12050 to i32
  %v2_12054 = icmp eq i8 %v3_12050, 0
  br i1 %v2_12054, label %dec_label_pc_12070, label %bb

dec_label_pc_12070:                               ; preds = %dec_label_pc_12060, %dec_label_pc_1204c
  %merge = phi i32 [ %v4_12050, %dec_label_pc_1204c ], [ %v1_12060, %dec_label_pc_12060 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_1204c
  br label %dec_label_pc_12060

dec_label_pc_12060:                               ; preds = %dec_label_pc_12060, %bb
  %v0_12060 = phi i32 [ %v1_12060, %dec_label_pc_12060 ], [ 0, %bb ]
  %v1_12060 = add i32 %v0_12060, 1
  %v2_12064 = add i32 %v1_12060, %tmp
  %v3_12064 = inttoptr i32 %v2_12064 to i8*
  %v4_12064 = load i8, i8* %v3_12064, align 1
  %v2_12068 = icmp eq i8 %v4_12064, 0
  br i1 %v2_12068, label %dec_label_pc_12070, label %dec_label_pc_12060

; uselistorder directives
  uselistorder i32 %v1_12060, { 1, 0, 2 }
}

define i32 @function_12074(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12074:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12074 = load i8, i8* %arg1, align 1
  %v3_12074 = zext i8 %v2_12074 to i32
  %v2_12078 = icmp eq i8 %v2_12074, 0
  br i1 %v2_12078, label %dec_label_pc_120bc, label %dec_label_pc_12080

dec_label_pc_12080:                               ; preds = %dec_label_pc_12074
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12084

dec_label_pc_12084:                               ; preds = %dec_label_pc_12084, %dec_label_pc_12080
  %v0_12084 = phi i32 [ %v1_12084, %dec_label_pc_12084 ], [ 0, %dec_label_pc_12080 ]
  %v1_12084 = add i32 %v0_12084, 1
  store i32 %v1_12084, i32* %ip.global-to-local, align 4
  %v2_12088 = add i32 %v1_12084, %tmp
  %v3_12088 = inttoptr i32 %v2_12088 to i8*
  %v4_12088 = load i8, i8* %v3_12088, align 1
  %v2_1208c = icmp eq i8 %v4_12088, 0
  br i1 %v2_1208c, label %dec_label_pc_12094, label %dec_label_pc_12084

dec_label_pc_12094:                               ; preds = %dec_label_pc_12084
  %v7_12094 = icmp eq i32 %v0_12084, -2
  br i1 %v7_12094, label %dec_label_pc_120b4, label %dec_label_pc_120a0.preheader

dec_label_pc_120a0.preheader:                     ; preds = %dec_label_pc_12094, %dec_label_pc_120bc
  %storemerge = phi i32 [ %v3_12074, %dec_label_pc_120bc ], [ %v1_12084, %dec_label_pc_12094 ]
  %v2_120ac.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_120a0

dec_label_pc_120a0:                               ; preds = %dec_label_pc_120a0.dec_label_pc_120a0_crit_edge, %dec_label_pc_120a0.preheader
  %v2_120ac = phi i32 [ %v5_120ac, %dec_label_pc_120a0.dec_label_pc_120a0_crit_edge ], [ %v2_120ac.pre, %dec_label_pc_120a0.preheader ]
  %v0_120a4 = phi i32 [ %v0_120a4.pre, %dec_label_pc_120a0.dec_label_pc_120a0_crit_edge ], [ %tmp, %dec_label_pc_120a0.preheader ]
  %v0_120a0 = phi i32 [ %v0_120a0.pre, %dec_label_pc_120a0.dec_label_pc_120a0_crit_edge ], [ %storemerge, %dec_label_pc_120a0.preheader ]
  %v1_120a0 = add i32 %v0_120a0, -1
  store i32 %v1_120a0, i32* @r2, align 4
  %v1_120a4 = inttoptr i32 %v0_120a4 to i8*
  %v2_120a4 = load i8, i8* %v1_120a4, align 1
  %v5_120a4 = add i32 %v0_120a4, 1
  store i32 %v5_120a4, i32* %r1.global-to-local, align 4
  %v3_120a8 = icmp eq i32 %v0_120a0, 0
  %v3_120ac = inttoptr i32 %v2_120ac to i8*
  store i8 %v2_120a4, i8* %v3_120ac, align 1
  %v4_120ac = load i32, i32* @r0, align 4
  %v5_120ac = add i32 %v4_120ac, 1
  store i32 %v5_120ac, i32* @r0, align 4
  br i1 %v3_120a8, label %dec_label_pc_120b4.loopexit, label %dec_label_pc_120a0.dec_label_pc_120a0_crit_edge

dec_label_pc_120a0.dec_label_pc_120a0_crit_edge:  ; preds = %dec_label_pc_120a0
  %v0_120a0.pre = load i32, i32* @r2, align 4
  %v0_120a4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_120a0

dec_label_pc_120b4.loopexit:                      ; preds = %dec_label_pc_120a0
  %v0_120b4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_120b4

dec_label_pc_120b4:                               ; preds = %dec_label_pc_120b4.loopexit, %dec_label_pc_12094
  %v0_120b4 = phi i32 [ %v0_120b4.pre, %dec_label_pc_120b4.loopexit ], [ %v1_12084, %dec_label_pc_12094 ]
  ret i32 %v0_120b4

dec_label_pc_120bc:                               ; preds = %dec_label_pc_12074
  store i32 %v3_12074, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_120a0.preheader

; uselistorder directives
  uselistorder i32 %v5_120ac, { 1, 0 }
  uselistorder i32 %v0_120a4, { 1, 0 }
  uselistorder i32 %v1_12084, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_12074, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_120a0.preheader, { 1, 0 }
}

define i32 @function_120c8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_120c8:
  %v2_120c8 = icmp eq i32 %arg3, 0
  br i1 %v2_120c8, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_120d4, %dec_label_pc_120c8
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_120c8
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_120d4

dec_label_pc_120d4:                               ; preds = %dec_label_pc_120d4, %bb
  %v0_120d4 = phi i32 [ %v1_120dc, %dec_label_pc_120d4 ], [ 0, %bb ]
  %v2_120d4 = add i32 %v0_120d4, %arg2
  %v3_120d4 = inttoptr i32 %v2_120d4 to i8*
  %v4_120d4 = load i8, i8* %v3_120d4, align 1
  %v4_120d8 = add i32 %v0_120d4, %arg1
  %v5_120d8 = inttoptr i32 %v4_120d8 to i8*
  store i8 %v4_120d4, i8* %v5_120d8, align 1
  %v0_120dc = load i32, i32* @ip, align 4
  %v1_120dc = add i32 %v0_120dc, 1
  store i32 %v1_120dc, i32* @ip, align 4
  %v9_120e0 = icmp eq i32 %v1_120dc, %arg3
  br i1 %v9_120e0, label %.loopexit, label %dec_label_pc_120d4

; uselistorder directives
  uselistorder i32 %v1_120dc, { 1, 2, 0 }
}

define i32 @function_120ec(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_120ec:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_120ec = icmp eq i32 %arg2, 0
  br i1 %v2_120ec, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_120fc, %dec_label_pc_120ec
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_120ec
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_120fc

dec_label_pc_120fc:                               ; preds = %dec_label_pc_120fc.dec_label_pc_120fc_crit_edge, %bb
  %v2_120fc = phi i32 [ %v1_12100, %dec_label_pc_120fc.dec_label_pc_120fc_crit_edge ], [ 0, %bb ]
  %v0_120fc.off0 = phi i8 [ %extract.t, %dec_label_pc_120fc.dec_label_pc_120fc_crit_edge ], [ 0, %bb ]
  %v4_120fc = add i32 %v2_120fc, %arg1
  %v5_120fc = inttoptr i32 %v4_120fc to i8*
  store i8 %v0_120fc.off0, i8* %v5_120fc, align 1
  %v0_12100 = load i32, i32* %r3.global-to-local, align 4
  %v1_12100 = add i32 %v0_12100, 1
  store i32 %v1_12100, i32* %r3.global-to-local, align 4
  %v9_12104 = icmp eq i32 %v1_12100, %arg2
  br i1 %v9_12104, label %.loopexit, label %dec_label_pc_120fc.dec_label_pc_120fc_crit_edge

dec_label_pc_120fc.dec_label_pc_120fc_crit_edge:  ; preds = %dec_label_pc_120fc
  %v0_120fc.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_120fc.pre to i8
  br label %dec_label_pc_120fc

; uselistorder directives
  uselistorder i32 %v1_12100, { 1, 2, 0 }
}

define i32 @function_12110(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12110:
  store i32 %arg4, i32* @lr, align 4
  %v7_12124 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_12124, label %dec_label_pc_12128, label %dec_label_pc_12130

dec_label_pc_12128:                               ; preds = %dec_label_pc_12144, %dec_label_pc_12110, %dec_label_pc_12130
  ret i32 -1

dec_label_pc_12130:                               ; preds = %dec_label_pc_12110
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_12128, label %dec_label_pc_12138

dec_label_pc_12138:                               ; preds = %dec_label_pc_12130
  br label %dec_label_pc_12150

dec_label_pc_12144:                               ; preds = %dec_label_pc_12168, %dec_label_pc_12150
  %v1_12144 = add i32 %v0_12170, 1
  %v9_12148 = icmp eq i32 %v1_12144, %arg2
  br i1 %v9_12148, label %dec_label_pc_12128, label %dec_label_pc_12150

dec_label_pc_12150:                               ; preds = %dec_label_pc_12144, %dec_label_pc_12138
  %v0_12170 = phi i32 [ %v1_12144, %dec_label_pc_12144 ], [ 0, %dec_label_pc_12138 ]
  %v0_1215c = phi i32 [ %v1_1215c., %dec_label_pc_12144 ], [ 0, %dec_label_pc_12138 ]
  %v2_12150 = add i32 %v0_1215c, %arg3
  %v3_12150 = inttoptr i32 %v2_12150 to i8*
  %v4_12150 = load i8, i8* %v3_12150, align 1
  %v2_12154 = add i32 %v0_12170, %arg1
  %v3_12154 = inttoptr i32 %v2_12154 to i8*
  %v4_12154 = load i8, i8* %v3_12154, align 1
  %v9_12158 = icmp eq i8 %v4_12154, %v4_12150
  %v1_1215c = add i32 %v0_1215c, 1
  %v1_1215c. = select i1 %v9_12158, i32 %v1_1215c, i32 0
  br i1 %v9_12158, label %dec_label_pc_12168, label %dec_label_pc_12144

dec_label_pc_12168:                               ; preds = %dec_label_pc_12150
  %v9_12168 = icmp eq i32 %v1_1215c., %arg4
  br i1 %v9_12168, label %dec_label_pc_12170, label %dec_label_pc_12144

dec_label_pc_12170:                               ; preds = %dec_label_pc_12168
  %v1_12170 = add i32 %v0_12170, 1
  ret i32 %v1_12170

; uselistorder directives
  uselistorder i1 %v9_12158, { 1, 0 }
  uselistorder i32 %v0_1215c, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12128, { 0, 2, 1 }
}

define i32 @function_12178(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12178:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_12178 = load i32, i32* @r4, align 4
  store i32 %v3_12178, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12184

dec_label_pc_12184:                               ; preds = %.thread, %dec_label_pc_1219c, %bb, %dec_label_pc_12178
  %v0_12184 = phi i32 [ %tmp, %dec_label_pc_12178 ], [ %v5_12184, %bb ], [ %v5_12184, %dec_label_pc_1219c ], [ %v5_12184, %.thread ]
  %v1_12184 = inttoptr i32 %v0_12184 to i8*
  %v2_12184 = load i8, i8* %v1_12184, align 1
  %v3_12184 = zext i8 %v2_12184 to i32
  %v5_12184 = add i32 %v0_12184, 1
  store i32 %v5_12184, i32* %r5.global-to-local, align 4
  %v7_1218c = icmp eq i8 %v2_12184, 9
  br i1 %v7_1218c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12184
  store i32 %v3_12184, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12184

bb:                                               ; preds = %dec_label_pc_12184
  %v8_12190 = icmp eq i8 %v2_12184, 32
  store i32 %v3_12184, i32* %r4.global-to-local, align 4
  br i1 %v8_12190, label %dec_label_pc_12184, label %dec_label_pc_1219c

dec_label_pc_1219c:                               ; preds = %bb
  %v7_1219c = icmp eq i8 %v2_12184, 10
  br i1 %v7_1219c, label %dec_label_pc_12184, label %dec_label_pc_121a4

dec_label_pc_121a4:                               ; preds = %dec_label_pc_1219c
  %v7_121a4 = icmp eq i8 %v2_12184, 45
  br i1 %v7_121a4, label %dec_label_pc_12284, label %dec_label_pc_121ac

dec_label_pc_121ac:                               ; preds = %dec_label_pc_121a4
  %v7_121ac = icmp eq i8 %v2_12184, 43
  br i1 %v7_121ac, label %bb48, label %dec_label_pc_121bc

bb48:                                             ; preds = %dec_label_pc_121ac
  %v2_121b0 = inttoptr i32 %v5_12184 to i8*
  %v3_121b0 = load i8, i8* %v2_121b0, align 1
  %v4_121b0 = zext i8 %v3_121b0 to i32
  store i32 %v4_121b0, i32* %r4.global-to-local, align 4
  %v6_121b0 = add i32 %v0_12184, 2
  store i32 %v6_121b0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_121bc

dec_label_pc_121bc:                               ; preds = %bb48, %dec_label_pc_121ac, %dec_label_pc_12284
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_12284 ], [ 2147483647, %dec_label_pc_121ac ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_12284 ], [ 0, %dec_label_pc_121ac ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_121c4 = call i32 @function_12768(i32 %storemerge1, i32 %arg2)
  %v0_121c8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_121c8, i32* @r1, align 4
  store i32 %v2_121c4, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_121d4 = call i32 @function_12658()
  store i32 %v0_121d4, i32* @lr, align 4
  %v0_121e4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_121e4

dec_label_pc_121e4:                               ; preds = %.thread8, %dec_label_pc_121bc
  %v2_1226011 = phi i32 [ %v1_1227c26, %.thread8 ], [ 0, %dec_label_pc_121bc ]
  %v1_1223c = phi i32 [ %v0_1227024, %.thread8 ], [ 0, %dec_label_pc_121bc ]
  %v1_12224 = phi i32 [ %v3_12268, %.thread8 ], [ %v0_121e4.pre, %dec_label_pc_121bc ]
  %v1_121e4 = urem i32 %v1_12224, 256
  %v1_121e8 = add nsw i32 %v1_121e4, -48
  %v1_121f0 = add nsw i32 %v1_121e4, -97
  %v1_121f4 = add i32 %v1_12224, -48
  %v1_121f8 = add nsw i32 %v1_121e4, -65
  %tmp71 = icmp ult i32 %v1_121e8, 10
  br i1 %tmp71, label %dec_label_pc_12228, label %dec_label_pc_12200

dec_label_pc_12200:                               ; preds = %dec_label_pc_121e4
  %v2_12200 = icmp ugt i32 %v1_121f8, 24
  %v7_12200 = icmp eq i32 %v1_121f8, 25
  %v2_12204 = xor i1 %v7_12200, true
  %v3_12204 = and i1 %v2_12200, %v2_12204
  br i1 %v3_12204, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_12200
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_12200, %bb49
  %v0_1221820 = phi i32 [ %v1_121f4, %dec_label_pc_12200 ], [ 0, %bb49 ]
  %v2_12208 = xor i1 %v2_12200, true
  %v3_12208 = or i1 %v7_12200, %v2_12208
  br i1 %v3_12208, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_12218 = phi i32 [ %v0_1221820, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_12204, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_12210 = icmp ugt i32 %v1_121f0, 24
  %v11_12210 = icmp eq i32 %v1_121f0, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_12214 = phi i1 [ %v7_12200, %bb52 ], [ %v11_12210, %bb53 ]
  %v0_12214 = phi i1 [ %v2_12200, %bb52 ], [ %v6_12210, %bb53 ]
  %v2_12214 = xor i1 %v1_12214, true
  %v3_12214 = and i1 %v0_12214, %v2_12214
  br i1 %v3_12214, label %dec_label_pc_12270, label %dec_label_pc_12218

dec_label_pc_12218:                               ; preds = %bb54
  %v2_12218 = icmp eq i32 %v0_12218, 0
  %. = select i1 %v2_12218, i32 87, i32 55
  %v2_12224 = sub i32 %v1_12224, %.
  br label %dec_label_pc_12228

dec_label_pc_12228:                               ; preds = %dec_label_pc_121e4, %dec_label_pc_12218
  %v0_1223c34 = phi i32 [ %v1_121f8, %dec_label_pc_121e4 ], [ %., %dec_label_pc_12218 ]
  %v3_1226012 = phi i32 [ %v1_121f4, %dec_label_pc_121e4 ], [ %v2_12224, %dec_label_pc_12218 ]
  %v1_12228 = load i32, i32* %r6.global-to-local, align 4
  %v6_1222c = icmp slt i32 %v3_1226012, %v1_12228
  br i1 %v6_1222c, label %dec_label_pc_12230, label %dec_label_pc_12270

dec_label_pc_12230:                               ; preds = %dec_label_pc_12228
  %v3_12230 = icmp uge i32 %v2_1226011, %v0_121d4
  %v9_12230 = icmp eq i32 %v2_1226011, %v0_121d4
  %v2_12234 = xor i1 %v3_12230, true
  %v3_12234 = or i1 %v9_12230, %v2_12234
  br i1 %v3_12234, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12230
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12230, %bb57
  %v0_1223c33 = phi i32 [ %v0_1223c34, %dec_label_pc_12230 ], [ 0, %bb57 ]
  %v2_12238 = xor i1 %v9_12230, true
  %v3_12238 = and i1 %v3_12230, %v2_12238
  br i1 %v3_12238, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_1223c = phi i32 [ %v0_1223c33, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_1223c, 0
  %v4_1223c = zext i1 %tmp72 to i32
  %v5_1223c = or i32 %v0_1223c, %v4_1223c
  %v7_1223c = icmp eq i32 %v5_1223c, 0
  br i1 %v7_1223c, label %dec_label_pc_12248, label %.thread8

dec_label_pc_12248:                               ; preds = %bb60
  %v1_12254 = load i32, i32* %r8.global-to-local, align 4
  %v7_12258 = icmp sgt i32 %v3_1226012, %v1_12254
  br i1 %v7_12258, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_12248
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_12248
  %v2_1225c = icmp eq i1 %v9_12230, false
  br i1 %v2_1225c, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_1226013 = mul i32 %v1_12228, %v2_1226011
  %v5_1226014 = add i32 %v4_1226013, %v3_1226012
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_1227c26 = phi i32 [ %v2_1226011, %bb63 ], [ %v2_1226011, %bb60 ], [ %v5_1226014, %bb64 ]
  %v0_1227024 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_12268 = load i32, i32* %r5.global-to-local, align 4
  %v1_12268 = inttoptr i32 %v0_12268 to i8*
  %v2_12268 = load i8, i8* %v1_12268, align 1
  %v3_12268 = zext i8 %v2_12268 to i32
  store i32 %v3_12268, i32* %r4.global-to-local, align 4
  %v5_12268 = add i32 %v0_12268, 1
  store i32 %v5_12268, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_121e4

dec_label_pc_12270:                               ; preds = %dec_label_pc_12228, %bb54
  %v1_12270 = icmp slt i32 %v1_1223c, 0
  %v0_12294 = load i32, i32* %sl.global-to-local, align 4
  %v2_12294 = icmp eq i32 %v0_12294, 0
  br i1 %v1_12270, label %dec_label_pc_12294, label %dec_label_pc_12278

dec_label_pc_12278:                               ; preds = %dec_label_pc_12270
  br i1 %v2_12294, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_12278
  %v2_1227c = sub i32 0, %v2_1226011
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12278, %bb65
  %v23_12280 = phi i32 [ %v2_1226011, %dec_label_pc_12278 ], [ %v2_1227c, %bb65 ]
  %v2_12280 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12280, i32* @r4, align 4
  ret i32 %v23_12280

dec_label_pc_12284:                               ; preds = %dec_label_pc_121a4
  %v1_12284 = inttoptr i32 %v5_12184 to i8*
  %v2_12284 = load i8, i8* %v1_12284, align 1
  %v3_12284 = zext i8 %v2_12284 to i32
  store i32 %v3_12284, i32* %r4.global-to-local, align 4
  %v5_12284 = add i32 %v0_12184, 2
  store i32 %v5_12284, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_121bc

dec_label_pc_12294:                               ; preds = %dec_label_pc_12270
  %.70 = select i1 %v2_12294, i32 2147483647, i32 -2147483648
  %v2_122a0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_122a0, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_12268, { 1, 0 }
  uselistorder i1 %v9_12230, { 1, 0, 2 }
  uselistorder i1 %v3_12230, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_12200, { 1, 2, 0 }
  uselistorder i1 %v2_12200, { 1, 0, 2 }
  uselistorder i32 %v1_121e4, { 1, 2, 0 }
  uselistorder i32 %v1_12224, { 1, 2, 0 }
  uselistorder i32 %v1_1223c, { 1, 0 }
  uselistorder i32 %v2_1226011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_121d4, { 1, 0, 2 }
  uselistorder i32 %v5_12184, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_12184, { 1, 0 }
  uselistorder i32 %v0_12184, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 32, { 1, 7, 2, 3, 0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i8 9, { 7, 0, 5, 1, 2, 3, 4, 6 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_12228, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_121bc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12184, { 1, 2, 0, 3 }
}

define i32 @function_122a4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_122a4:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_122a4 = load i32, i32* @r4, align 4
  store i32 %v3_122a4, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_122bc

dec_label_pc_122bc:                               ; preds = %dec_label_pc_122e8.dec_label_pc_122bc_crit_edge, %dec_label_pc_122a4
  %v0_122c0 = phi i32 [ %v0_122c0.pre, %dec_label_pc_122e8.dec_label_pc_122bc_crit_edge ], [ %arg3, %dec_label_pc_122a4 ]
  %v0_122bc = phi i32 [ %v1_122d4, %dec_label_pc_122e8.dec_label_pc_122bc_crit_edge ], [ %tmp, %dec_label_pc_122a4 ]
  %tmp12 = inttoptr i32 %v0_122bc to i32*
  %v5_122c8 = call i32 @function_12ba8(i32 %v0_122c0, i32* %tmp12, i32 1)
  %v7_122cc = icmp eq i32 %v5_122c8, 1
  %v0_122d0 = load i32, i32* @r4, align 4
  %v1_122d4 = add i32 %v0_122d0, 1
  store i32 %v1_122d4, i32* @r4, align 4
  %v0_122dc = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_122cc, label %dec_label_pc_122dc, label %dec_label_pc_122f4

dec_label_pc_122dc:                               ; preds = %dec_label_pc_122bc
  %v1_122dc = add i32 %v0_122dc, 1
  store i32 %v1_122dc, i32* %r5.global-to-local, align 4
  %v0_122e0 = load i32, i32* %r7.global-to-local, align 4
  %v7_122e4 = icmp sgt i32 %v0_122e0, %v1_122dc
  br i1 %v7_122e4, label %dec_label_pc_122e8, label %dec_label_pc_122f4

dec_label_pc_122e8:                               ; preds = %dec_label_pc_122dc
  %v1_122e8 = inttoptr i32 %v0_122d0 to i8*
  %v2_122e8 = load i8, i8* %v1_122e8, align 1
  %v7_122ec = icmp eq i8 %v2_122e8, 10
  br i1 %v7_122ec, label %dec_label_pc_122f4, label %dec_label_pc_122e8.dec_label_pc_122bc_crit_edge

dec_label_pc_122e8.dec_label_pc_122bc_crit_edge:  ; preds = %dec_label_pc_122e8
  %v0_122c0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_122bc

dec_label_pc_122f4:                               ; preds = %dec_label_pc_122bc, %dec_label_pc_122e8, %dec_label_pc_122dc
  %v0_122f4 = phi i32 [ %v1_122dc, %dec_label_pc_122e8 ], [ %v1_122dc, %dec_label_pc_122dc ], [ %v0_122dc, %dec_label_pc_122bc ]
  %v2_122f4 = icmp eq i32 %v0_122f4, 0
  %v1_122f8 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_122f4, i32 0, i32 %v1_122f8
  %v2_12300 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12300, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_122d4, { 1, 0 }
  uselistorder i8 10, { 6, 0, 7, 8, 1, 2, 3, 4, 5 }
  uselistorder i32 (i32, i32*, i32)* @function_12ba8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_122f4, { 1, 2, 0 }
}

define i32 @function_12304() local_unnamed_addr {
dec_label_pc_12304:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12304 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_12314 = call i32 @function_12f88()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_1231c = inttoptr i32 %v0_12314 to i32*
  store i32 0, i32* %v2_1231c, align 4
  %v0_12328 = load i32, i32* %r6.global-to-local, align 4
  %v3_1232c = call i32 @function_132cc(i32 2, i32 2, i32 %v0_12328)
  %v7_12338 = icmp eq i32 %v3_1232c, -1
  store i32 %v3_1232c, i32* %r5.global-to-local, align 4
  %v2_12344 = load i32, i32* @r4, align 4
  br i1 %v7_12338, label %dec_label_pc_12394, label %dec_label_pc_12358

dec_label_pc_12358:                               ; preds = %dec_label_pc_12304
  %v7_12344 = shl i32 2056, %v2_12344
  %v8_12344 = or i32 %v7_12344, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_12374 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_12374 = call i32 @function_13128(i32 %v3_1232c, %sockaddr* %v3_12374, i32 %v2_12344)
  %v2_1237c = ptrtoint i32* %stack_var_-24 to i32
  %v0_12380 = load i32, i32* %r5.global-to-local, align 4
  %v4_12384 = call i32 @function_13154(i32 %v0_12380, %sockaddr* %v3_12374, i32 %v2_1237c)
  %v1_1238c = call i32 @function_129e0(i32 %v0_12380)
  br label %dec_label_pc_12394

dec_label_pc_12394:                               ; preds = %dec_label_pc_12304, %dec_label_pc_12358
  %v0_12394 = phi i32 [ %v0_12328, %dec_label_pc_12304 ], [ %v8_12344, %dec_label_pc_12358 ]
  store i32 %v3_12304, i32* @r4, align 4
  ret i32 %v0_12394

; uselistorder directives
  uselistorder i32 %v3_1232c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_13128, { 0, 6, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_132cc, { 18, 6, 16, 17, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_12394, { 1, 0 }
}

define i32 @function_123a0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_123a0:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_123a4 = load i8, i8* %tmp, align 1
  %v2_123a8 = icmp eq i8 %v3_123a4, 0
  br i1 %v2_123a8, label %bb, label %dec_label_pc_123bc

bb:                                               ; preds = %dec_label_pc_123a0
  %v4_123a4 = zext i8 %v3_123a4 to i32
  br label %dec_label_pc_123d0

dec_label_pc_123bc:                               ; preds = %dec_label_pc_123a0
  br label %dec_label_pc_123c0

dec_label_pc_123c0:                               ; preds = %dec_label_pc_123c0, %dec_label_pc_123bc
  %v0_123c0 = phi i32 [ %v1_123c0, %dec_label_pc_123c0 ], [ 0, %dec_label_pc_123bc ]
  %v1_123c0 = add i32 %v0_123c0, 1
  %v2_123c4 = add i32 %v1_123c0, %arg2
  %v3_123c4 = inttoptr i32 %v2_123c4 to i8*
  %v4_123c4 = load i8, i8* %v3_123c4, align 1
  %v2_123c8 = icmp eq i8 %v4_123c4, 0
  br i1 %v2_123c8, label %dec_label_pc_123d0, label %dec_label_pc_123c0

dec_label_pc_123d0:                               ; preds = %dec_label_pc_123c0, %bb
  %v0_1241418 = phi i32 [ %v4_123a4, %bb ], [ %v1_123c0, %dec_label_pc_123c0 ]
  %v0_123d81 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_123d81, 1
  br i1 %tmp27, label %dec_label_pc_12424, label %dec_label_pc_123e4

dec_label_pc_123e4:                               ; preds = %dec_label_pc_123d0, %dec_label_pc_123d8.backedge
  %v0_123dc.in = phi i32 [ %v0_123dc, %dec_label_pc_123d8.backedge ], [ %v0_123d81, %dec_label_pc_123d0 ]
  %v0_12408 = phi i32 [ %v1_12408., %dec_label_pc_123d8.backedge ], [ 0, %dec_label_pc_123d0 ]
  %v0_123e4 = phi i32 [ %v5_123e4, %dec_label_pc_123d8.backedge ], [ %tmp20, %dec_label_pc_123d0 ]
  %v0_123dc = add i32 %v0_123dc.in, -1
  %v1_123e4 = inttoptr i32 %v0_123e4 to i8*
  %v2_123e4 = load i8, i8* %v1_123e4, align 1
  %v3_123e4 = zext i8 %v2_123e4 to i32
  store i32 %v3_123e4, i32* @lr, align 4
  %v5_123e4 = add i32 %v0_123e4, 1
  %v2_123e8 = add i32 %v0_12408, %arg2
  %v3_123e8 = inttoptr i32 %v2_123e8 to i8*
  %v4_123e8 = load i8, i8* %v3_123e8, align 1
  %v6_123e8 = zext i8 %v4_123e8 to i32
  %v1_123ec = add nsw i32 %v3_123e4, -65
  %v1_123f0 = add nsw i32 %v6_123e8, -65
  %tmp35 = icmp ult i32 %v1_123ec, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_123e4
  %v5_123f8 = or i32 %v3_123e4, 96
  store i32 %v5_123f8, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_123e4, %bb28
  %v0_12404 = phi i32 [ %v3_123e4, %dec_label_pc_123e4 ], [ %v5_123f8, %bb28 ]
  %tmp36 = icmp ult i32 %v1_123f0, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_12400 = or i32 %v6_123e8, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_12404 = phi i32 [ %v6_123e8, %bb29 ], [ %v5_12400, %bb30 ]
  %v9_12404 = icmp eq i32 %v0_12404, %v1_12404
  %v1_12408 = add i32 %v0_12408, 1
  %v1_12408. = select i1 %v9_12404, i32 %v1_12408, i32 0
  br i1 %v9_12404, label %dec_label_pc_12414, label %dec_label_pc_123d8.backedge

dec_label_pc_123d8.backedge:                      ; preds = %bb31, %dec_label_pc_12414
  %tmp32 = icmp slt i32 %v0_123dc, 1
  br i1 %tmp32, label %dec_label_pc_12424, label %dec_label_pc_123e4

dec_label_pc_12414:                               ; preds = %bb31
  %v9_12414 = icmp eq i32 %v0_1241418, %v1_12408.
  br i1 %v9_12414, label %dec_label_pc_1241c, label %dec_label_pc_123d8.backedge

dec_label_pc_1241c:                               ; preds = %dec_label_pc_12414
  %v2_1241c = sub i32 %v5_123e4, %tmp20
  ret i32 %v2_1241c

dec_label_pc_12424:                               ; preds = %dec_label_pc_123d8.backedge, %dec_label_pc_123d0
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_12408., { 1, 0 }
  uselistorder i32 %v0_123e4, { 1, 0 }
  uselistorder i32 %v0_12408, { 1, 0 }
  uselistorder i8 %v3_123a4, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_123d8.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_123e4, { 1, 0 }
}

define i32 @function_1242c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1242c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_1242c = load i8, i8* %arg1, align 1
  %v2_12430 = icmp eq i8 %v2_1242c, 0
  br i1 %v2_12430, label %bb, label %dec_label_pc_1243c

bb:                                               ; preds = %dec_label_pc_1242c
  %v3_1242c = zext i8 %v2_1242c to i32
  br label %dec_label_pc_12450

dec_label_pc_1243c:                               ; preds = %dec_label_pc_1242c
  br label %dec_label_pc_12440

dec_label_pc_12440:                               ; preds = %dec_label_pc_12440, %dec_label_pc_1243c
  %v0_12440 = phi i32 [ %v1_12440, %dec_label_pc_12440 ], [ 0, %dec_label_pc_1243c ]
  %v1_12440 = add i32 %v0_12440, 1
  %v2_12444 = add i32 %v1_12440, %tmp
  %v3_12444 = inttoptr i32 %v2_12444 to i8*
  %v4_12444 = load i8, i8* %v3_12444, align 1
  %v2_12448 = icmp eq i8 %v4_12444, 0
  br i1 %v2_12448, label %dec_label_pc_12450, label %dec_label_pc_12440

dec_label_pc_12450:                               ; preds = %dec_label_pc_12440, %bb
  %v0_12474 = phi i32 [ %v3_1242c, %bb ], [ %v1_12440, %dec_label_pc_12440 ]
  %v1_12450 = inttoptr i32 %arg2 to i8*
  %v2_12450 = load i8, i8* %v1_12450, align 1
  %v2_12454 = icmp eq i8 %v2_12450, 0
  br i1 %v2_12454, label %bb22, label %dec_label_pc_12460

bb22:                                             ; preds = %dec_label_pc_12450
  %v3_12450 = zext i8 %v2_12450 to i32
  br label %dec_label_pc_12474

dec_label_pc_12460:                               ; preds = %dec_label_pc_12450
  br label %dec_label_pc_12464

dec_label_pc_12464:                               ; preds = %dec_label_pc_12464, %dec_label_pc_12460
  %v0_12464 = phi i32 [ %v1_12464, %dec_label_pc_12464 ], [ 0, %dec_label_pc_12460 ]
  %v1_12464 = add i32 %v0_12464, 1
  %v2_12468 = add i32 %v1_12464, %arg2
  %v3_12468 = inttoptr i32 %v2_12468 to i8*
  %v4_12468 = load i8, i8* %v3_12468, align 1
  %v2_1246c = icmp eq i8 %v4_12468, 0
  br i1 %v2_1246c, label %dec_label_pc_12474, label %dec_label_pc_12464

dec_label_pc_12474:                               ; preds = %dec_label_pc_12464, %bb22
  %v0_124a04 = phi i32 [ %v3_12450, %bb22 ], [ %v1_12464, %dec_label_pc_12464 ]
  %v9_12474 = icmp eq i32 %v0_12474, %v0_124a04
  br i1 %v9_12474, label %dec_label_pc_124a0.preheader, label %dec_label_pc_12480

dec_label_pc_124a0.preheader:                     ; preds = %dec_label_pc_12474
  %v2_124a06 = icmp eq i32 %v0_12474, 0
  br i1 %v2_124a06, label %dec_label_pc_124a8, label %dec_label_pc_12488

dec_label_pc_12480:                               ; preds = %dec_label_pc_12488, %dec_label_pc_12474
  ret i32 0

dec_label_pc_12488:                               ; preds = %dec_label_pc_12498, %dec_label_pc_124a0.preheader
  %v0_124a0.in = phi i32 [ %v0_124a0, %dec_label_pc_12498 ], [ %v0_12474, %dec_label_pc_124a0.preheader ]
  %v0_1249c = phi i32 [ %v1_1249c, %dec_label_pc_12498 ], [ %arg2, %dec_label_pc_124a0.preheader ]
  %v0_12498 = phi i32 [ %v1_12498, %dec_label_pc_12498 ], [ %tmp, %dec_label_pc_124a0.preheader ]
  %v0_124a0 = add i32 %v0_124a0.in, -1
  %v1_12488 = inttoptr i32 %v0_12498 to i8*
  %v2_12488 = load i8, i8* %v1_12488, align 1
  %v1_1248c = inttoptr i32 %v0_1249c to i8*
  %v2_1248c = load i8, i8* %v1_1248c, align 1
  %v9_12490 = icmp eq i8 %v2_12488, %v2_1248c
  br i1 %v9_12490, label %dec_label_pc_12498, label %dec_label_pc_12480

dec_label_pc_12498:                               ; preds = %dec_label_pc_12488
  %v1_12498 = add i32 %v0_12498, 1
  %v1_1249c = add i32 %v0_1249c, 1
  %v2_124a0 = icmp eq i32 %v0_124a0, 0
  br i1 %v2_124a0, label %dec_label_pc_124a8, label %dec_label_pc_12488

dec_label_pc_124a8:                               ; preds = %dec_label_pc_12498, %dec_label_pc_124a0.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_12450, { 1, 0 }
  uselistorder i8 %v2_1242c, { 1, 0 }
}

define i32 @function_124b0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_124b0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_124b4 = load i8, i8* %arg1, align 1
  %v2_124b8 = icmp eq i8 %v2_124b4, 0
  %v0_124bc = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_124b8, label %bb, label %dec_label_pc_124c8

bb:                                               ; preds = %dec_label_pc_124b0
  %v3_124b4 = zext i8 %v2_124b4 to i32
  br label %dec_label_pc_124dc

dec_label_pc_124c8:                               ; preds = %dec_label_pc_124b0
  br label %dec_label_pc_124cc

dec_label_pc_124cc:                               ; preds = %dec_label_pc_124cc, %dec_label_pc_124c8
  %v0_124cc = phi i32 [ %v1_124cc, %dec_label_pc_124cc ], [ 0, %dec_label_pc_124c8 ]
  %v1_124cc = add i32 %v0_124cc, 1
  %v2_124d0 = add i32 %v1_124cc, %tmp
  %v3_124d0 = inttoptr i32 %v2_124d0 to i8*
  %v4_124d0 = load i8, i8* %v3_124d0, align 1
  %v2_124d4 = icmp eq i8 %v4_124d0, 0
  br i1 %v2_124d4, label %dec_label_pc_124dc, label %dec_label_pc_124cc

dec_label_pc_124dc:                               ; preds = %dec_label_pc_124cc, %bb
  %v9_12504 = phi i32 [ %v3_124b4, %bb ], [ %v1_124cc, %dec_label_pc_124cc ]
  %v0_124dc = load i32, i32* %r1.global-to-local, align 4
  %v1_124dc = inttoptr i32 %v0_124dc to i8*
  %v2_124dc = load i8, i8* %v1_124dc, align 1
  %v3_124dc = zext i8 %v2_124dc to i32
  %v2_124e0 = icmp eq i8 %v2_124dc, 0
  br i1 %v2_124e0, label %bb26, label %dec_label_pc_124ec

bb26:                                             ; preds = %dec_label_pc_124dc
  store i32 %v3_124dc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12500

dec_label_pc_124ec:                               ; preds = %dec_label_pc_124dc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_124f0

dec_label_pc_124f0:                               ; preds = %dec_label_pc_124f0, %dec_label_pc_124ec
  %v0_124f0 = phi i32 [ %v1_124f0, %dec_label_pc_124f0 ], [ 0, %dec_label_pc_124ec ]
  %v1_124f0 = add i32 %v0_124f0, 1
  store i32 %v1_124f0, i32* %r2.global-to-local, align 4
  %v2_124f4 = add i32 %v1_124f0, %v0_124dc
  %v3_124f4 = inttoptr i32 %v2_124f4 to i8*
  %v4_124f4 = load i8, i8* %v3_124f4, align 1
  %v2_124f8 = icmp eq i8 %v4_124f4, 0
  br i1 %v2_124f8, label %dec_label_pc_12500, label %dec_label_pc_124f0

dec_label_pc_12500:                               ; preds = %dec_label_pc_124f0, %bb26
  %v1_12500 = phi i32 [ %v3_124dc, %bb26 ], [ %v1_124f0, %dec_label_pc_124f0 ]
  %v2_12500 = sub i32 %v0_124bc, %v1_12500
  %v4_12500 = xor i32 %v1_12500, %v0_124bc
  %v5_12500 = xor i32 %v2_12500, %v0_124bc
  %v6_12500 = and i32 %v5_12500, %v4_12500
  %v7_12504 = icmp sgt i32 %v0_124bc, %v1_12500
  br i1 %v7_12504, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_12500
  %v10_12504 = sub i32 %v0_124bc, %v9_12504
  %v12_12504 = xor i32 %v9_12504, %v0_124bc
  %v13_12504 = xor i32 %v10_12504, %v0_124bc
  %v14_12504 = and i32 %v13_12504, %v12_12504
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_12500, %bb27
  %v2_12508.in = phi i32 [ %v6_12500, %dec_label_pc_12500 ], [ %v14_12504, %bb27 ]
  %v1_12508.in = phi i32 [ %v2_12500, %dec_label_pc_12500 ], [ %v10_12504, %bb27 ]
  %v1_12500.pn = phi i32 [ %v1_12500, %dec_label_pc_12500 ], [ %v9_12504, %bb27 ]
  %v0_12508 = icmp eq i32 %v0_124bc, %v1_12500.pn
  %v1_12508 = icmp slt i32 %v1_12508.in, 0
  %v2_12508 = icmp slt i32 %v2_12508.in, 0
  %v3_12508 = xor i1 %v2_12508, %v1_12508
  %v4_12508 = or i1 %v0_12508, %v3_12508
  br i1 %v4_12508, label %dec_label_pc_12518.preheader, label %dec_label_pc_12530

dec_label_pc_12518.preheader:                     ; preds = %bb28
  %v2_125185 = icmp eq i32 %v0_124bc, 0
  br i1 %v2_125185, label %dec_label_pc_12538, label %dec_label_pc_12520

dec_label_pc_12510:                               ; preds = %dec_label_pc_12520
  %v1_12510 = add i32 %v0_12510, 1
  %v1_12514 = add i32 %v0_12514, 1
  store i32 %v1_12514, i32* %r1.global-to-local, align 4
  %v2_12518 = icmp eq i32 %v0_12518, 0
  br i1 %v2_12518, label %dec_label_pc_12538, label %dec_label_pc_12520

dec_label_pc_12520:                               ; preds = %dec_label_pc_12510, %dec_label_pc_12518.preheader
  %v0_12518.in = phi i32 [ %v0_12518, %dec_label_pc_12510 ], [ %v0_124bc, %dec_label_pc_12518.preheader ]
  %v0_12514 = phi i32 [ %v1_12514, %dec_label_pc_12510 ], [ %v0_124dc, %dec_label_pc_12518.preheader ]
  %v0_12510 = phi i32 [ %v1_12510, %dec_label_pc_12510 ], [ %tmp, %dec_label_pc_12518.preheader ]
  %v0_12518 = add i32 %v0_12518.in, -1
  %v1_12520 = inttoptr i32 %v0_12510 to i8*
  %v2_12520 = load i8, i8* %v1_12520, align 1
  %v3_12520 = zext i8 %v2_12520 to i32
  store i32 %v3_12520, i32* %r2.global-to-local, align 4
  %v1_12524 = inttoptr i32 %v0_12514 to i8*
  %v2_12524 = load i8, i8* %v1_12524, align 1
  %v9_12528 = icmp eq i8 %v2_12520, %v2_12524
  br i1 %v9_12528, label %dec_label_pc_12510, label %dec_label_pc_12530

dec_label_pc_12530:                               ; preds = %dec_label_pc_12520, %bb28
  ret i32 0

dec_label_pc_12538:                               ; preds = %dec_label_pc_12510, %dec_label_pc_12518.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_12510, { 1, 0 }
  uselistorder i32 %v0_12514, { 1, 0 }
  uselistorder i32 %v1_12500, { 0, 3, 1, 2 }
  uselistorder i32 %v1_124f0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_124bc, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_124b4, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_12540(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12540:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_12540 = load i32, i32* @r4, align 4
  store i32 %v3_12540, i32* %stack_var_-28, align 4
  %v22_12540 = ptrtoint i32* %stack_var_-28 to i32
  %v0_12544 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_12544, i32* %r8.global-to-local, align 4
  %v2_12544 = icmp eq i32 %v0_12544, 0
  store i1 %v2_12544, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_12544, label %dec_label_pc_12634, label %dec_label_pc_12554

dec_label_pc_12554:                               ; preds = %dec_label_pc_12540
  %v3_12554 = icmp eq i8 %arg1, 0
  store i1 %v3_12554, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12554, label %.thread, label %dec_label_pc_12568

.thread:                                          ; preds = %dec_label_pc_12554
  %v4_1255c = inttoptr i32 %v0_12544 to i8*
  store i8 48, i8* %v4_1255c, align 1
  %v0_12560.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12560.pr.pr, label %.thread1, label %dec_label_pc_12568

.thread1:                                         ; preds = %.thread
  %v4_12560 = load i32, i32* %r8.global-to-local, align 4
  %v5_12560 = add i32 %v4_12560, 1
  %v6_12560 = inttoptr i32 %v5_12560 to i8*
  store i8 0, i8* %v6_12560, align 1
  %v0_12564.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12564.pr.pr, label %dec_label_pc_12634, label %dec_label_pc_12568

dec_label_pc_12568:                               ; preds = %dec_label_pc_12554, %.thread, %.thread1
  %tmp39 = icmp slt i8 %arg1, 0
  %v7_1256c = icmp eq i32 %arg2, 10
  store i1 %v7_1256c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1256c, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_12568
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_12568
  %v4_12568 = zext i1 %tmp39 to i32
  store i32 %v4_12568, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_12590

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125a0

dec_label_pc_12590:                               ; preds = %bb
  %v2_12590 = sub nsw i32 0, %tmp
  store i32 %v2_12590, i32* %r4.global-to-local, align 4
  store i1 %v3_12554, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12554, label %dec_label_pc_12640, label %dec_label_pc_125a0

dec_label_pc_125a0:                               ; preds = %dec_label_pc_12590, %.thread4
  %v0_125a810 = phi i32 [ %tmp, %.thread4 ], [ %v2_12590, %dec_label_pc_12590 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_12590 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_125a4 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_125a4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_125a8

dec_label_pc_125a8:                               ; preds = %bb37, %dec_label_pc_125a0
  %v0_125a8 = phi i32 [ %v0_125cc, %bb37 ], [ %v0_125a810, %dec_label_pc_125a0 ]
  store i32 %v0_125a8, i32* %r0.global-to-local, align 4
  %v0_125ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_125ac, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_125a8, 16777216
  %v1_125b0 = sdiv i32 %sext, 16777216
  %v3_125b0 = call i32 @function_12768(i32 %v1_125b0, i32 %v0_125ac)
  store i32 %v3_125b0, i32* %r0.global-to-local, align 4
  %v7_125b4 = icmp eq i32 %v3_125b0, 9
  store i1 %v7_125b4, i1* %cpsr_z.global-to-local, align 1
  %v1_125b8 = add i32 %v3_125b0, 48
  %v0_125bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_125bc, i32* @r1, align 4
  %v7_125c0 = icmp sgt i32 %v3_125b0, 9
  %extract.t = trunc i32 %v1_125b8 to i8
  br i1 %v7_125c0, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_125a8
  %v9_125c0 = add i32 %v3_125b0, 55
  %extract.t20 = trunc i32 %v9_125c0 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_125a8, %bb36
  %v0_125c8.off0 = phi i8 [ %extract.t, %dec_label_pc_125a8 ], [ %extract.t20, %bb36 ]
  %v0_125c4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_125c4, i32* @r0, align 4
  %v2_125c8 = load i32, i32* %r7.global-to-local, align 4
  %v3_125c8 = inttoptr i32 %v2_125c8 to i8*
  store i8 %v0_125c8.off0, i8* %v3_125c8, align 1
  %v4_125c8 = load i32, i32* %r7.global-to-local, align 4
  %v5_125c8 = add i32 %v4_125c8, -1
  store i32 %v5_125c8, i32* %r7.global-to-local, align 4
  %v0_125cc = call i32 @function_12658()
  store i32 %v0_125cc, i32* %r0.global-to-local, align 4
  store i32 %v0_125cc, i32* %r4.global-to-local, align 4
  %v2_125d0 = icmp eq i32 %v0_125cc, 0
  store i1 %v2_125d0, i1* %cpsr_z.global-to-local, align 1
  %v0_125d4 = load i32, i32* %r6.global-to-local, align 4
  %v1_125d4 = add i32 %v0_125d4, -1
  store i32 %v1_125d4, i32* %r6.global-to-local, align 4
  br i1 %v2_125d0, label %dec_label_pc_125dc, label %dec_label_pc_125a8

dec_label_pc_125dc:                               ; preds = %bb37
  %v0_125dc = load i32, i32* %sl.global-to-local, align 4
  %v2_125dc = icmp eq i32 %v0_125dc, 0
  store i1 %v2_125dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_125dc, label %bb38, label %dec_label_pc_12644

bb38:                                             ; preds = %dec_label_pc_125dc
  store i32 %v0_125d4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_125e8

dec_label_pc_125e8:                               ; preds = %bb38, %dec_label_pc_12644
  %v1_125f4 = phi i32 [ %v0_125d4, %bb38 ], [ %v1_125ec.pre, %dec_label_pc_12644 ]
  %v2_125e8 = ptrtoint i32* %stack_var_-62 to i32
  %v2_125ec = add i32 %v1_125f4, %v2_125e8
  %v3_125ec = inttoptr i32 %v2_125ec to i8*
  %v4_125ec = load i8, i8* %v3_125ec, align 1
  %v6_125ec = zext i8 %v4_125ec to i32
  store i32 %v6_125ec, i32* %r2.global-to-local, align 4
  %v2_125f0 = icmp eq i8 %v4_125ec, 0
  store i1 %v2_125f0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_125ec, i32* %r1.global-to-local, align 4
  br i1 %v2_125f0, label %dec_label_pc_12618, label %dec_label_pc_125fc

dec_label_pc_125fc:                               ; preds = %dec_label_pc_125e8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12600

dec_label_pc_12600:                               ; preds = %dec_label_pc_12600, %dec_label_pc_125fc
  %v0_12600 = phi i32 [ %v1_12600, %dec_label_pc_12600 ], [ 0, %dec_label_pc_125fc ]
  %v1_12600 = add i32 %v0_12600, 1
  store i32 %v1_12600, i32* %r2.global-to-local, align 4
  %v2_12604 = add i32 %v1_12600, %v2_125ec
  %v3_12604 = inttoptr i32 %v2_12604 to i8*
  %v4_12604 = load i8, i8* %v3_12604, align 1
  %v2_12608 = icmp eq i8 %v4_12604, 0
  store i1 %v2_12608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12608, label %dec_label_pc_12610, label %dec_label_pc_12600

dec_label_pc_12610:                               ; preds = %dec_label_pc_12600
  %v7_12610 = icmp eq i32 %v0_12600, -2
  store i1 %v7_12610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12610, label %dec_label_pc_12634, label %dec_label_pc_12618

dec_label_pc_12618:                               ; preds = %dec_label_pc_12610, %dec_label_pc_125e8
  %v0_1262017 = phi i32 [ %v1_12600, %dec_label_pc_12610 ], [ %v6_125ec, %dec_label_pc_125e8 ]
  store i32 %v2_125ec, i32* %r0.global-to-local, align 4
  %v0_1261c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1261c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12620

dec_label_pc_12620:                               ; preds = %dec_label_pc_12620.dec_label_pc_12620_crit_edge, %dec_label_pc_12618
  %v2_1262c = phi i32 [ %v5_1262c, %dec_label_pc_12620.dec_label_pc_12620_crit_edge ], [ %v0_1261c, %dec_label_pc_12618 ]
  %v0_12624 = phi i32 [ %v0_12624.pre, %dec_label_pc_12620.dec_label_pc_12620_crit_edge ], [ %v2_125ec, %dec_label_pc_12618 ]
  %v0_12620 = phi i32 [ %v0_12620.pre, %dec_label_pc_12620.dec_label_pc_12620_crit_edge ], [ %v0_1262017, %dec_label_pc_12618 ]
  %v1_12620 = add i32 %v0_12620, -1
  store i32 %v1_12620, i32* %r2.global-to-local, align 4
  %v1_12624 = inttoptr i32 %v0_12624 to i8*
  %v2_12624 = load i8, i8* %v1_12624, align 1
  %v5_12624 = add i32 %v0_12624, 1
  store i32 %v5_12624, i32* %r0.global-to-local, align 4
  %v3_12628 = icmp eq i32 %v0_12620, 0
  store i1 %v3_12628, i1* %cpsr_z.global-to-local, align 1
  %v3_1262c = inttoptr i32 %v2_1262c to i8*
  store i8 %v2_12624, i8* %v3_1262c, align 1
  %v4_1262c = load i32, i32* %r1.global-to-local, align 4
  %v5_1262c = add i32 %v4_1262c, 1
  store i32 %v5_1262c, i32* %r1.global-to-local, align 4
  br i1 %v3_12628, label %dec_label_pc_12634, label %dec_label_pc_12620.dec_label_pc_12620_crit_edge

dec_label_pc_12620.dec_label_pc_12620_crit_edge:  ; preds = %dec_label_pc_12620
  %v0_12620.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_12624.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12620

dec_label_pc_12634:                               ; preds = %dec_label_pc_12620, %dec_label_pc_12610, %.thread1, %dec_label_pc_12540
  %v0_12634 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_12634, i32* %r0.global-to-local, align 4
  %v2_1263c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1263c, i32* @r4, align 4
  ret i32 %v0_12634

dec_label_pc_12640:                               ; preds = %dec_label_pc_12590
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12644

dec_label_pc_12644:                               ; preds = %dec_label_pc_125dc, %dec_label_pc_12640
  %v1_12648 = phi i32 [ %v1_125d4, %dec_label_pc_125dc ], [ 32, %dec_label_pc_12640 ]
  %v2_12648 = add i32 %v1_12648, %v22_12540
  store i32 %v2_12648, i32* %r2.global-to-local, align 4
  %v3_12650 = add i32 %v2_12648, -34
  %v4_12650 = inttoptr i32 %v3_12650 to i8*
  store i8 45, i8* %v4_12650, align 1
  %v1_125ec.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_125e8

; uselistorder directives
  uselistorder i32 %v5_1262c, { 1, 0 }
  uselistorder i1 %v3_12628, { 1, 0 }
  uselistorder i32 %v0_12624, { 1, 0 }
  uselistorder i1 %v7_12610, { 1, 0 }
  uselistorder i32 %v1_12600, { 0, 1, 3, 2 }
  uselistorder i32 %v2_125ec, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_125cc, { 1, 2, 3, 0 }
  uselistorder i32 %v3_125b0, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_12554, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12544, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 12, 11, 13, 14 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_12768, { 2, 1, 8, 3, 7, 6, 5, 4, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12644, { 1, 0 }
  uselistorder label %dec_label_pc_125e8, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_12568, { 2, 1, 0 }
}

define i32 @function_12658() local_unnamed_addr {
dec_label_pc_12658:
  %v0_12658 = load i32, i32* @r1, align 4
  %v1_12658 = add i32 %v0_12658, -1
  store i32 %v1_12658, i32* @r2, align 4
  %v7_12658 = icmp eq i32 %v0_12658, 1
  br i1 %v7_12658, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_12658
  %v2_1265c = load i32, i32* @r0, align 4
  ret i32 %v2_1265c

bb82:                                             ; preds = %dec_label_pc_12658
  %v2_12658 = icmp eq i32 %v0_12658, 0
  br i1 %v2_12658, label %dec_label_pc_12740, label %dec_label_pc_12664

dec_label_pc_12664:                               ; preds = %bb82
  %v0_12664 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_12664, %v0_12658
  br i1 %tmp, label %dec_label_pc_1266c, label %dec_label_pc_126f8

dec_label_pc_1266c:                               ; preds = %dec_label_pc_12664
  %v2_1266c = and i32 %v1_12658, %v0_12658
  %v4_1266c = icmp eq i32 %v2_1266c, 0
  br i1 %v4_1266c, label %dec_label_pc_12704, label %dec_label_pc_12674

dec_label_pc_12674:                               ; preds = %dec_label_pc_1266c
  %v3_12674 = icmp ult i32 %v0_12658, 536870912
  br i1 %v3_12674, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_12674
  %v4_12678 = mul i32 %v0_12658, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_12674, %.thread
  %v0_12698.pr36.ph = phi i32 [ %v4_12678, %.thread ], [ %v0_12658, %dec_label_pc_12674 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_12674 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_12698.pr36 = phi i32 [ %v4_1268c, %bb85 ], [ %v0_12698.pr36.ph, %.preheader.preheader ]
  %v1_12690 = phi i32 [ %v4_12690, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_12684 = icmp ugt i32 %v0_12698.pr36, 268435455
  br i1 %v2_12684, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_12698thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_12688 = icmp ult i32 %v0_12698.pr36, %v0_12664
  br i1 %v4_12688, label %bb84, label %dec_label_pc_12698thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_1268c = and i32 %v0_12698.pr36, 268435456
  %v3_1268c = icmp eq i32 %v2_1268c, 0
  %v4_1268c = mul i32 %v0_12698.pr36, 16
  br i1 %v3_1268c, label %bb85, label %dec_label_pc_12698.loopexit

bb85:                                             ; preds = %bb84
  %v2_12690 = and i32 %v1_12690, 268435456
  %v3_12690 = icmp eq i32 %v2_12690, 0
  %v4_12690 = mul i32 %v1_12690, 16
  br i1 %v3_12690, label %.preheader, label %dec_label_pc_12698thread-pre-split.loopexit.loopexit

dec_label_pc_12698thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_126a448.ph = phi i32 [ %v1_12690, %bb83 ], [ %v4_12690, %bb85 ]
  %v0_12698.pr38.ph = phi i32 [ %v0_12698.pr36, %bb83 ], [ %v4_1268c, %bb85 ]
  br label %dec_label_pc_12698thread-pre-split.loopexit

dec_label_pc_12698thread-pre-split.loopexit:      ; preds = %dec_label_pc_12698thread-pre-split.loopexit.loopexit, %.thread2
  %v1_126a448 = phi i32 [ %v1_12690, %.thread2 ], [ %v1_126a448.ph, %dec_label_pc_12698thread-pre-split.loopexit.loopexit ]
  %v0_12698.pr38 = phi i32 [ %v0_12698.pr36, %.thread2 ], [ %v0_12698.pr38.ph, %dec_label_pc_12698thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_12698thread-pre-split

dec_label_pc_12698thread-pre-split:               ; preds = %dec_label_pc_12698thread-pre-split.loopexit, %bb87
  %v1_126a446 = phi i32 [ %v1_126a448, %dec_label_pc_12698thread-pre-split.loopexit ], [ %v3_126a4, %bb87 ]
  %v0_12698.pr = phi i32 [ %v0_12698.pr38, %dec_label_pc_12698thread-pre-split.loopexit ], [ %v3_126a0, %bb87 ]
  br label %dec_label_pc_12698

dec_label_pc_12698.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_12698

dec_label_pc_12698:                               ; preds = %dec_label_pc_12698.loopexit, %dec_label_pc_12698thread-pre-split
  %v1_126a4 = phi i32 [ %v1_126a446, %dec_label_pc_12698thread-pre-split ], [ %v1_12690, %dec_label_pc_12698.loopexit ]
  %v1_126a0 = phi i32 [ %v0_12698.pr, %dec_label_pc_12698thread-pre-split ], [ %v4_1268c, %dec_label_pc_12698.loopexit ]
  %v2_12698 = icmp slt i32 %v1_126a0, 0
  br i1 %v2_12698, label %dec_label_pc_126ac, label %bb86

bb86:                                             ; preds = %dec_label_pc_12698
  %v4_1269c = icmp ult i32 %v1_126a0, %v0_12664
  br i1 %v4_1269c, label %bb87, label %dec_label_pc_126ac

bb87:                                             ; preds = %bb86
  %v3_126a0 = mul i32 %v1_126a0, 2
  %v2_126a4 = icmp slt i32 %v1_126a4, 0
  %v3_126a4 = mul i32 %v1_126a4, 2
  br i1 %v2_126a4, label %dec_label_pc_126ac, label %dec_label_pc_12698thread-pre-split

dec_label_pc_126ac:                               ; preds = %bb86, %dec_label_pc_12698, %bb87
  %v2_126b859 = phi i32 [ %v3_126a4, %bb87 ], [ %v1_126a4, %bb86 ], [ %v1_126a4, %dec_label_pc_12698 ]
  %v1_126b051 = phi i32 [ %v3_126a0, %bb87 ], [ %v1_126a0, %bb86 ], [ %v1_126a0, %dec_label_pc_12698 ]
  store i32 0, i32* @r2, align 4
  br label %dec_label_pc_126b0

dec_label_pc_126b0:                               ; preds = %.thread11, %dec_label_pc_126ac
  %v1_126e4 = phi i32 [ %v4_126e4, %.thread11 ], [ %v2_126b859, %dec_label_pc_126ac ]
  %v1_126b8 = phi i32 [ %v0_126f0, %.thread11 ], [ 0, %dec_label_pc_126ac ]
  %v1_126e8 = phi i32 [ %v4_126e8, %.thread11 ], [ %v1_126b051, %dec_label_pc_126ac ]
  %v1_126b4 = phi i32 [ %v0_126e0, %.thread11 ], [ %v0_12664, %dec_label_pc_126ac ]
  %v3_126b0 = icmp ult i32 %v1_126b4, %v1_126e8
  br i1 %v3_126b0, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_126b0
  %v3_126b4 = sub i32 %v1_126b4, %v1_126e8
  %v3_126b8 = or i32 %v1_126b8, %v1_126e4
  store i32 %v3_126b8, i32* @r2, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_126b0, %bb88
  %v1_126c0 = phi i32 [ %v1_126b4, %dec_label_pc_126b0 ], [ %v3_126b4, %bb88 ]
  %v1_126c4 = phi i32 [ %v1_126b8, %dec_label_pc_126b0 ], [ %v3_126b8, %bb88 ]
  %v4_126bc = udiv i32 %v1_126e8, 2
  %v6_126bc = icmp ult i32 %v1_126c0, %v4_126bc
  br i1 %v6_126bc, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_126c0 = urem i32 %v1_126e8, 2
  %v4_126c0 = icmp eq i32 %v3_126c0, 0
  %v6_126c0 = sub i32 %v1_126c0, %v4_126bc
  br i1 %v4_126c0, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_126c4 = udiv i32 %v1_126e4, 2
  %v6_126c4 = or i32 %v1_126c4, %v5_126c4
  store i32 %v6_126c4, i32* @r2, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_126cc = phi i32 [ %v6_126c0, %bb89 ], [ %v1_126c0, %.thread7 ], [ %v6_126c0, %bb90 ]
  %v1_126d0 = phi i32 [ %v1_126c4, %bb89 ], [ %v1_126c4, %.thread7 ], [ %v6_126c4, %bb90 ]
  %v4_126c8 = udiv i32 %v1_126e8, 4
  %v6_126c8 = icmp ult i32 %v1_126cc, %v4_126c8
  br i1 %v6_126c8, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_126cc = and i32 %v1_126e8, 2
  %v4_126cc = icmp eq i32 %v3_126cc, 0
  %v6_126cc = sub i32 %v1_126cc, %v4_126c8
  br i1 %v4_126cc, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_126d0 = udiv i32 %v1_126e4, 4
  %v6_126d0 = or i32 %v1_126d0, %v5_126d0
  store i32 %v6_126d0, i32* @r2, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_126d8 = phi i32 [ %v6_126cc, %bb91 ], [ %v1_126cc, %.thread8 ], [ %v6_126cc, %bb92 ]
  %v1_126dc = phi i32 [ %v1_126d0, %bb91 ], [ %v1_126d0, %.thread8 ], [ %v6_126d0, %bb92 ]
  %v4_126d4 = udiv i32 %v1_126e8, 8
  %v6_126d4 = icmp ult i32 %v1_126d8, %v4_126d4
  br i1 %v6_126d4, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_126d8 = and i32 %v1_126e8, 4
  %v4_126d8 = icmp eq i32 %v3_126d8, 0
  %v6_126d8 = sub i32 %v1_126d8, %v4_126d4
  br i1 %v4_126d8, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_126dc = udiv i32 %v1_126e4, 8
  %v6_126dc = or i32 %v1_126dc, %v5_126dc
  store i32 %v6_126dc, i32* @r2, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_126f0 = phi i32 [ %v1_126dc, %bb93 ], [ %v1_126dc, %.thread9 ], [ %v6_126dc, %bb94 ]
  %v0_126e0 = phi i32 [ %v6_126d8, %bb93 ], [ %v1_126d8, %.thread9 ], [ %v6_126d8, %bb94 ]
  %v2_126e0 = icmp eq i32 %v0_126e0, 0
  br i1 %v2_126e0, label %dec_label_pc_126f0, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_126e4, 16
  br i1 %tmp142, label %dec_label_pc_126f0, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_126e4 = udiv i32 %v1_126e4, 16
  %v4_126e8 = udiv i32 %v1_126e8, 16
  br label %dec_label_pc_126b0

dec_label_pc_126f0:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_126f0

dec_label_pc_126f8:                               ; preds = %dec_label_pc_12664
  %v9_12664 = icmp eq i32 %v0_12664, %v0_12658
  %. = zext i1 %v9_12664 to i32
  ret i32 %.

dec_label_pc_12704:                               ; preds = %dec_label_pc_1266c
  %v2_12704 = icmp ugt i32 %v0_12658, 65535
  br i1 %v2_12704, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_12704
  %v2_12708 = and i32 %v0_12658, 32768
  %v3_12708 = icmp eq i32 %v2_12708, 0
  %v4_12708 = udiv i32 %v0_12658, 65536
  br i1 %v3_12708, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_12704
  %v0_1271465 = phi i32 [ %v0_12658, %dec_label_pc_12704 ], [ %v4_12708, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_12718 = phi i32 [ %v0_1271465, %.thread16 ], [ %v4_12708, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  store i32 %storemerge, i32* @r2, align 4
  %v2_12714 = icmp ugt i32 %v1_12718, 255
  br i1 %v2_12714, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_12718 = and i32 %v1_12718, 128
  %v3_12718 = icmp eq i32 %v2_12718, 0
  %v4_12718 = udiv i32 %v1_12718, 256
  br i1 %v3_12718, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_1271c = or i32 %storemerge, 8
  store i32 %v2_1271c, i32* @r2, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_12728 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_1271c, %bb102 ]
  %v1_12724 = phi i32 [ %v1_12718, %bb100 ], [ %v4_12718, %bb101 ], [ %v4_12718, %bb102 ]
  %v2_12720 = icmp ugt i32 %v1_12724, 15
  br i1 %v2_12720, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_12724 = and i32 %v1_12724, 8
  %v3_12724 = icmp eq i32 %v2_12724, 0
  %v4_12724 = udiv i32 %v1_12724, 16
  br i1 %v3_12724, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_12728 = add nsw i32 %v1_12728, 4
  store i32 %v2_12728, i32* @r2, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_12730 = phi i32 [ %v1_12728, %.thread17 ], [ %v1_12728, %bb103 ], [ %v2_12728, %bb104 ]
  %v5_12734 = phi i32 [ %v1_12724, %.thread17 ], [ %v4_12724, %bb103 ], [ %v4_12724, %bb104 ]
  %v2_1272c = icmp ugt i32 %v5_12734, 3
  %v7_1272c = icmp eq i32 %v5_12734, 4
  %v2_12730 = xor i1 %v7_1272c, true
  %v3_12730 = and i1 %v2_1272c, %v2_12730
  br i1 %v3_12730, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_12730 = add nsw i32 %v4_12730, 3
  store i32 %v5_12730, i32* @r2, align 4
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_12734 = phi i32 [ %v4_12730, %.thread18 ], [ %v5_12730, %bb105 ]
  %v2_12734 = xor i1 %v2_1272c, true
  %v3_12734 = or i1 %v7_1272c, %v2_12734
  br i1 %v3_12734, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_12734 = udiv i32 %v5_12734, 2
  %v9_12734 = add i32 %v4_12734, %v8_12734
  store i32 %v9_12734, i32* @r2, align 4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_12738 = phi i32 [ %v4_12734, %bb106 ], [ %v9_12734, %bb107 ]
  %v6_12738 = lshr i32 %v0_12664, %v1_12738
  ret i32 %v6_12738

dec_label_pc_12740:                               ; preds = %bb82
  %v0_12740 = load i32, i32* @lr, align 4
  %v0_12744 = call i32 @function_12918()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_12740)
  %v6_12750 = load i32, i32* @r1, align 4
  %v9_12750 = load i32, i32* @lr, align 4
  %v0_12754 = call i32 @function_12658()
  store i32 %v6_12750, i32* @r2, align 4
  store i32 %v9_12750, i32* @lr, align 4
  ret i32 %v0_12754

; uselistorder directives
  uselistorder i32 %v4_12734, { 1, 0 }
  uselistorder i1 %v7_1272c, { 1, 0 }
  uselistorder i32 %v4_12724, { 1, 0 }
  uselistorder i32 %v1_12724, { 1, 0, 2, 3 }
  uselistorder i32 %v2_1271c, { 1, 0 }
  uselistorder i32 %v4_12718, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12718, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12708, { 1, 0 }
  uselistorder i32 %v0_126e0, { 1, 0 }
  uselistorder i32 %v4_126d4, { 1, 0 }
  uselistorder i32 %v1_126dc, { 1, 2, 0 }
  uselistorder i32 %v4_126c8, { 1, 0 }
  uselistorder i32 %v1_126d0, { 1, 2, 0 }
  uselistorder i32 %v4_126bc, { 1, 0 }
  uselistorder i32 %v1_126c4, { 1, 2, 0 }
  uselistorder i32 %v1_126e8, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_126b8, { 1, 0 }
  uselistorder i32 %v1_126e4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_126a4, { 1, 0 }
  uselistorder i32 %v3_126a0, { 1, 0 }
  uselistorder i32 %v1_126a0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_126a4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12690, { 1, 0 }
  uselistorder i32 %v4_1268c, { 2, 1, 0 }
  uselistorder i32 %v1_12690, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_12698.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_12664, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_12658, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 91, 1, 2, 12, 42, 23, 22, 25, 43, 24, 44, 14, 13, 3, 27, 45, 26, 46, 48, 15, 47, 4, 49, 50, 28, 51, 29, 52, 0, 53, 54, 30, 55, 56, 58, 16, 57, 5, 59, 60, 61, 62, 32, 63, 31, 64, 66, 17, 65, 6, 67, 68, 69, 70, 33, 71, 34, 72, 35, 73, 74, 18, 7, 75, 36, 76, 37, 77, 79, 19, 78, 8, 9, 80, 81, 39, 82, 38, 83, 85, 20, 84, 10, 11, 86, 87, 41, 88, 40, 89, 21, 90 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_126f0, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_126ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12698thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_12768(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12768:
  store i32 %arg1, i32* @r0, align 4
  %v1_12768 = add i32 %arg2, -1
  %v2_12768 = icmp eq i32 %arg2, 0
  br i1 %v2_12768, label %dec_label_pc_12824, label %dec_label_pc_12770

dec_label_pc_12770:                               ; preds = %dec_label_pc_12768
  %v7_12768 = icmp eq i32 %arg2, 1
  br i1 %v7_12768, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_12770
  %v1_12770 = load i32, i32* @r0, align 4
  %v10_12770 = icmp eq i32 %v1_12770, %arg2
  br i1 %v10_12770, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_12770, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_12770 = icmp ult i32 %v1_12770, %arg2
  br i1 %v4_12770, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_12778 = and i32 %v1_12768, %arg2
  %v8_12778 = icmp eq i32 %v6_12778, 0
  br i1 %v8_12778, label %.thread67, label %dec_label_pc_12788.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_1277c = phi i32 [ %v1_12770, %bb75 ], [ 0, %.thread65 ]
  %v3_1277c = and i32 %v1_1277c, %v1_12768
  br label %bb76

dec_label_pc_12788.preheader:                     ; preds = %bb75
  %v2_1278899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1278899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_12818, %bb74, %bb89, %bb84, %dec_label_pc_127e8, %.thread67
  %v5_12780 = phi i32 [ %v1_12770, %bb74 ], [ %v3_1277c, %.thread67 ], [ %v1_127c4.v6_127c4.v6_127cc.v6_127d4, %dec_label_pc_127e8 ], [ 0, %bb84 ], [ %v1_1281c, %dec_label_pc_12818 ], [ %v2_12818, %bb89 ]
  ret i32 %v5_12780

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_12788.preheader
  %v0_1279c.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_12788.preheader ], [ %v4_12790, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_12788.preheader ], [ %v2_1279411, %.thread1.thread9 ]
  br label %dec_label_pc_1279cthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_12788.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1279411, %.thread1.thread9 ], [ 0, %dec_label_pc_12788.preheader ]
  %v0_1279c.pr33100 = phi i32 [ %v4_12790, %.thread1.thread9 ], [ %arg2, %dec_label_pc_12788.preheader ]
  %v4_1278c = icmp ult i32 %v0_1279c.pr33100, %v1_12770
  br i1 %v4_1278c, label %bb78, label %dec_label_pc_1279cthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_12790 = and i32 %v0_1279c.pr33100, 268435456
  %v3_12790 = icmp eq i32 %v2_12790, 0
  %v4_12790 = mul i32 %v0_1279c.pr33100, 16
  br i1 %v3_12790, label %.thread1.thread9, label %dec_label_pc_1279c.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1279411 = add i32 %storemerge101, 4
  %v2_12788 = icmp ugt i32 %v4_12790, 268435455
  br i1 %v2_12788, label %.thread, label %bb77

dec_label_pc_1279cthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_1279cthread-pre-split.loopexit

dec_label_pc_1279cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1279cthread-pre-split.loopexit.loopexit, %.thread
  %v0_1279c.pr3398 = phi i32 [ %v0_1279c.pr33.lcssa, %.thread ], [ %v0_1279c.pr33100, %dec_label_pc_1279cthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_1279cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1279cthread-pre-split

dec_label_pc_1279cthread-pre-split:               ; preds = %.thread4, %dec_label_pc_1279cthread-pre-split.loopexit
  %v1_127a839 = phi i32 [ %storemerge95, %dec_label_pc_1279cthread-pre-split.loopexit ], [ %v2_127a8, %.thread4 ]
  %v0_1279c.pr = phi i32 [ %v0_1279c.pr3398, %dec_label_pc_1279cthread-pre-split.loopexit ], [ %v3_127a4, %.thread4 ]
  br label %dec_label_pc_1279c

dec_label_pc_1279c.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_1279c

dec_label_pc_1279c:                               ; preds = %dec_label_pc_1279c.loopexit, %dec_label_pc_1279cthread-pre-split
  %v0_127b0.pr = phi i32 [ %v1_127a839, %dec_label_pc_1279cthread-pre-split ], [ %storemerge101, %dec_label_pc_1279c.loopexit ]
  %v1_127a4 = phi i32 [ %v0_1279c.pr, %dec_label_pc_1279cthread-pre-split ], [ %v4_12790, %dec_label_pc_1279c.loopexit ]
  %v2_1279c = icmp slt i32 %v1_127a4, 0
  br i1 %v2_1279c, label %dec_label_pc_127b0, label %bb79

bb79:                                             ; preds = %dec_label_pc_1279c
  %v4_127a0 = icmp ult i32 %v1_127a4, %v1_12770
  br i1 %v4_127a0, label %.thread4, label %dec_label_pc_127b0

.thread4:                                         ; preds = %bb79
  %v3_127a4 = mul i32 %v1_127a4, 2
  %v2_127a8 = add i32 %v0_127b0.pr, 1
  br label %dec_label_pc_1279cthread-pre-split

dec_label_pc_127b0:                               ; preds = %bb79, %dec_label_pc_1279c
  %v2_127b0 = add i32 %v0_127b0.pr, -3
  %v5_127b4 = icmp slt i32 %v0_127b0.pr, 3
  br i1 %v5_127b4, label %dec_label_pc_127f4, label %dec_label_pc_127b8

dec_label_pc_127b8:                               ; preds = %dec_label_pc_127b0, %bb83
  %v6_127e0 = phi i32 [ %v0_127e8, %bb83 ], [ %v2_127b0, %dec_label_pc_127b0 ]
  %v1_127bc = phi i32 [ %v1_127c4.v6_127c4.v6_127cc.v6_127d4, %bb83 ], [ %v1_12770, %dec_label_pc_127b0 ]
  %v3_127dc12 = phi i32 [ %v3_127dc, %bb83 ], [ %v1_127a4, %dec_label_pc_127b0 ]
  %v3_127b8 = icmp ult i32 %v1_127bc, %v3_127dc12
  %v3_127bc = select i1 %v3_127b8, i32 0, i32 %v3_127dc12
  %v1_127c4 = sub i32 %v1_127bc, %v3_127bc
  %v4_127c0 = udiv i32 %v3_127dc12, 2
  %v6_127c0 = icmp ult i32 %v1_127c4, %v4_127c0
  %v6_127c4 = select i1 %v6_127c0, i32 0, i32 %v4_127c0
  %v1_127c4.v6_127c4 = sub i32 %v1_127c4, %v6_127c4
  %.demorgan = and i1 %v3_127b8, %v6_127c0
  %v4_127c8 = udiv i32 %v3_127dc12, 4
  %v6_127c8 = icmp ult i32 %v1_127c4.v6_127c4, %v4_127c8
  %v6_127cc = select i1 %v6_127c8, i32 0, i32 %v4_127c8
  %v1_127c4.v6_127c4.v6_127cc = sub i32 %v1_127c4.v6_127c4, %v6_127cc
  %.demorgan71 = and i1 %.demorgan, %v6_127c8
  %v4_127d0 = udiv i32 %v3_127dc12, 8
  %v6_127d0 = icmp ult i32 %v1_127c4.v6_127c4.v6_127cc, %v4_127d0
  %v6_127d4 = select i1 %v6_127d0, i32 0, i32 %v4_127d0
  %v1_127c4.v6_127c4.v6_127cc.v6_127d4 = sub i32 %v1_127c4.v6_127c4.v6_127cc, %v6_127d4
  %.demorgan72 = and i1 %.demorgan71, %v6_127d0
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_127b8
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_127b8, %bb80
  %v2_127d8 = add i32 %v1_127c4.v6_127c4.v6_127cc.v6_127d4, -1
  %v4_127d8 = sub i32 0, %v1_127c4.v6_127c4.v6_127cc.v6_127d4
  %v5_127d8 = and i32 %v1_127c4.v6_127c4.v6_127cc.v6_127d4, %v4_127d8
  %v3_127dc = udiv i32 %v3_127dc12, 16
  %v5_127e0 = icmp slt i32 %v1_127c4.v6_127c4.v6_127cc.v6_127d4, 1
  br i1 %v5_127e0, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_127e0 = add i32 %v6_127e0, -4
  %v9_127e0 = sub i32 3, %v6_127e0
  %v10_127e0 = and i32 %v9_127e0, %v6_127e0
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_127e8 = phi i32 [ %v6_127e0, %bb81 ], [ %v7_127e0, %bb82 ]
  %v0_127e415.in = phi i32 [ %v2_127d8, %bb81 ], [ %v7_127e0, %bb82 ]
  %v1_127e414.in = phi i32 [ %v5_127d8, %bb81 ], [ %v10_127e0, %bb82 ]
  %v1_127e414 = icmp slt i32 %v1_127e414.in, 0
  %v0_127e415 = icmp slt i32 %v0_127e415.in, 0
  %v2_127e4 = xor i1 %v0_127e415, %v1_127e414
  br i1 %v2_127e4, label %dec_label_pc_127e8, label %dec_label_pc_127b8

dec_label_pc_127e8:                               ; preds = %bb83
  %v1_127e8 = urem i32 %v0_127e8, 4
  %v2_127e8 = icmp eq i32 %v1_127e8, 0
  br i1 %v2_127e8, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_127e8
  %v3_127ec = icmp eq i32 %v1_127c4.v6_127c4.v6_127cc.v6_127d4, 0
  br i1 %v3_127ec, label %bb76, label %dec_label_pc_127f4

dec_label_pc_127f4:                               ; preds = %bb84, %dec_label_pc_127b0
  %v0_12808 = phi i32 [ %v3_127dc, %bb84 ], [ %v1_127a4, %dec_label_pc_127b0 ]
  %v1_12804 = phi i32 [ %v1_127c4.v6_127c4.v6_127cc.v6_127d4, %bb84 ], [ %v1_12770, %dec_label_pc_127b0 ]
  %v0_127f4 = phi i32 [ %v0_127e8, %bb84 ], [ %v2_127b0, %dec_label_pc_127b0 ]
  %v5_127f8 = icmp slt i32 %v0_127f4, -2
  br i1 %v5_127f8, label %dec_label_pc_12818, label %dec_label_pc_127fc

dec_label_pc_127fc:                               ; preds = %dec_label_pc_127f4
  %v8_127f4 = icmp eq i32 %v0_127f4, -2
  br i1 %v8_127f4, label %dec_label_pc_1280c, label %dec_label_pc_12800

dec_label_pc_12800:                               ; preds = %dec_label_pc_127fc
  %v3_12800 = icmp ult i32 %v1_12804, %v0_12808
  br i1 %v3_12800, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_12800
  %v2_12800 = sub i32 %v1_12804, %v0_12808
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_12800, %bb85
  %v0_1280c52 = phi i32 [ %v1_12804, %dec_label_pc_12800 ], [ %v2_12800, %bb85 ]
  %v3_12808 = udiv i32 %v0_12808, 2
  br label %dec_label_pc_1280c

dec_label_pc_1280c:                               ; preds = %dec_label_pc_127fc, %bb86
  %v0_12814 = phi i32 [ %v0_12808, %dec_label_pc_127fc ], [ %v3_12808, %bb86 ]
  %v1_12810 = phi i32 [ %v1_12804, %dec_label_pc_127fc ], [ %v0_1280c52, %bb86 ]
  %v3_1280c = icmp ult i32 %v1_12810, %v0_12814
  br i1 %v3_1280c, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_1280c
  %v2_1280c = sub i32 %v1_12810, %v0_12814
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_1280c, %bb87
  %v0_1281855 = phi i32 [ %v1_12810, %dec_label_pc_1280c ], [ %v2_1280c, %bb87 ]
  %v3_12814 = udiv i32 %v0_12814, 2
  br label %dec_label_pc_12818

dec_label_pc_12818:                               ; preds = %dec_label_pc_127f4, %bb88
  %v2_1281c = phi i32 [ %v0_12808, %dec_label_pc_127f4 ], [ %v3_12814, %bb88 ]
  %v1_1281c = phi i32 [ %v1_12804, %dec_label_pc_127f4 ], [ %v0_1281855, %bb88 ]
  %v3_12818 = icmp ult i32 %v1_1281c, %v2_1281c
  br i1 %v3_12818, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_12818
  %v2_12818 = sub i32 %v1_1281c, %v2_1281c
  br label %bb76

dec_label_pc_12824:                               ; preds = %dec_label_pc_12768
  %v0_12824 = load i32, i32* @lr, align 4
  %v0_12828 = call i32 @function_12918()
  call void @__pseudo_branch(i32 %v0_12824)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1281c, { 1, 2, 0 }
  uselistorder i32 %v0_12808, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_127e8, { 1, 0, 2 }
  uselistorder i32 %v7_127e0, { 1, 0 }
  uselistorder i32 %v3_127dc, { 1, 0 }
  uselistorder i32 %v1_127c4.v6_127c4.v6_127cc.v6_127d4, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_127d0, { 1, 0 }
  uselistorder i32 %v4_127c8, { 1, 0 }
  uselistorder i32 %v4_127c0, { 1, 0 }
  uselistorder i32 %v6_127e0, { 3, 0, 2, 1 }
  uselistorder i32 %v2_127b0, { 1, 0 }
  uselistorder i32 %v1_127a4, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_12790, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1279c.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12770, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_12818, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_1280c, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_127b8, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_12834(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12834:
  store i32 %arg1, i32* @r0, align 4
  %v2_12834 = icmp eq i32 %arg2, 0
  br i1 %v2_12834, label %dec_label_pc_12908, label %dec_label_pc_1283c

dec_label_pc_1283c:                               ; preds = %dec_label_pc_12834
  %v1_12834 = icmp slt i32 %arg2, 0
  br i1 %v1_12834, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_1283c
  %v2_1283c = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_1283c, %bb
  %v4_12854 = phi i32 [ %arg2, %dec_label_pc_1283c ], [ %v2_1283c, %bb ]
  %v0_12840 = load i32, i32* @r0, align 4
  %v1_12840 = icmp slt i32 %v0_12840, 0
  br i1 %v1_12840, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_12844 = sub i32 0, %v0_12840
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_1284c = phi i32 [ %v0_12840, %bb79 ], [ %v2_12844, %bb80 ]
  %v1_12848 = add i32 %v4_12854, -1
  %v7_12848 = icmp eq i32 %v4_12854, 1
  br i1 %v7_12848, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_1284c = icmp eq i32 %v1_1284c, %v4_12854
  br i1 %v10_1284c, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_1284c = icmp ult i32 %v1_1284c, %v4_12854
  br i1 %v4_1284c, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_12854 = and i32 %v1_12848, %v4_12854
  %v8_12854 = icmp eq i32 %v6_12854, 0
  br i1 %v8_12854, label %.thread72, label %dec_label_pc_12864.preheader

dec_label_pc_12864.preheader:                     ; preds = %bb84
  %v2_12864109 = icmp ugt i32 %v4_12854, 268435455
  br i1 %v2_12864109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1285864 = phi i32 [ %v1_1284c, %bb84 ], [ 0, %.thread70 ]
  %v3_12858 = and i32 %v1_1285864, %v1_12848
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_12864.preheader
  %v0_12878.pr35.lcssa = phi i32 [ %v4_12854, %dec_label_pc_12864.preheader ], [ %v4_1286c, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_12864.preheader ], [ %v2_128709, %.thread2.thread7 ]
  br label %dec_label_pc_12878thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_12864.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_128709, %.thread2.thread7 ], [ 0, %dec_label_pc_12864.preheader ]
  %v0_12878.pr35110 = phi i32 [ %v4_1286c, %.thread2.thread7 ], [ %v4_12854, %dec_label_pc_12864.preheader ]
  %v4_12868 = icmp ult i32 %v0_12878.pr35110, %v1_1284c
  br i1 %v4_12868, label %bb86, label %dec_label_pc_12878thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_1286c = and i32 %v0_12878.pr35110, 268435456
  %v3_1286c = icmp eq i32 %v2_1286c, 0
  %v4_1286c = mul i32 %v0_12878.pr35110, 16
  br i1 %v3_1286c, label %.thread2.thread7, label %dec_label_pc_12878.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_128709 = add i32 %storemerge111, 4
  %v2_12864 = icmp ugt i32 %v4_1286c, 268435455
  br i1 %v2_12864, label %.thread1, label %bb85

dec_label_pc_12878thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_12878thread-pre-split.loopexit

dec_label_pc_12878thread-pre-split.loopexit:      ; preds = %dec_label_pc_12878thread-pre-split.loopexit.loopexit, %.thread1
  %v0_12878.pr35108 = phi i32 [ %v0_12878.pr35.lcssa, %.thread1 ], [ %v0_12878.pr35110, %dec_label_pc_12878thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_12878thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_12878thread-pre-split

dec_label_pc_12878thread-pre-split:               ; preds = %.thread4, %dec_label_pc_12878thread-pre-split.loopexit
  %v1_1288441 = phi i32 [ %storemerge105, %dec_label_pc_12878thread-pre-split.loopexit ], [ %v2_12884, %.thread4 ]
  %v2_1287c36 = phi i32 [ %v1_1284c, %dec_label_pc_12878thread-pre-split.loopexit ], [ %v2_1287c, %.thread4 ]
  %v0_12878.pr = phi i32 [ %v0_12878.pr35108, %dec_label_pc_12878thread-pre-split.loopexit ], [ %v3_12880, %.thread4 ]
  br label %dec_label_pc_12878

dec_label_pc_12878.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_12878

dec_label_pc_12878:                               ; preds = %dec_label_pc_12878.loopexit, %dec_label_pc_12878thread-pre-split
  %v0_1288c.pr = phi i32 [ %v1_1288441, %dec_label_pc_12878thread-pre-split ], [ %storemerge111, %dec_label_pc_12878.loopexit ]
  %v2_1287c = phi i32 [ %v2_1287c36, %dec_label_pc_12878thread-pre-split ], [ %v1_1284c, %dec_label_pc_12878.loopexit ]
  %v1_12880 = phi i32 [ %v0_12878.pr, %dec_label_pc_12878thread-pre-split ], [ %v4_1286c, %dec_label_pc_12878.loopexit ]
  %v2_12878 = icmp slt i32 %v1_12880, 0
  br i1 %v2_12878, label %dec_label_pc_1288c, label %bb87

bb87:                                             ; preds = %dec_label_pc_12878
  %v4_1287c = icmp ult i32 %v1_12880, %v2_1287c
  br i1 %v4_1287c, label %.thread4, label %dec_label_pc_1288c

.thread4:                                         ; preds = %bb87
  %v3_12880 = mul i32 %v1_12880, 2
  %v2_12884 = add i32 %v0_1288c.pr, 1
  br label %dec_label_pc_12878thread-pre-split

dec_label_pc_1288c:                               ; preds = %bb87, %dec_label_pc_12878
  %v2_1288c = add i32 %v0_1288c.pr, -3
  %v5_12890 = icmp slt i32 %v0_1288c.pr, 3
  br i1 %v5_12890, label %dec_label_pc_128d0, label %dec_label_pc_12894

dec_label_pc_12894:                               ; preds = %dec_label_pc_1288c, %bb91
  %v6_128bc = phi i32 [ %v0_128c4, %bb91 ], [ %v2_1288c, %dec_label_pc_1288c ]
  %v1_12898 = phi i32 [ %v1_128a0.v6_128a0.v6_128a8.v6_128b0, %bb91 ], [ %v2_1287c, %dec_label_pc_1288c ]
  %v3_128b810 = phi i32 [ %v3_128b8, %bb91 ], [ %v1_12880, %dec_label_pc_1288c ]
  %v3_12894 = icmp ult i32 %v1_12898, %v3_128b810
  %v3_12898 = select i1 %v3_12894, i32 0, i32 %v3_128b810
  %v1_128a0 = sub i32 %v1_12898, %v3_12898
  %v4_1289c = udiv i32 %v3_128b810, 2
  %v6_1289c = icmp ult i32 %v1_128a0, %v4_1289c
  %v6_128a0 = select i1 %v6_1289c, i32 0, i32 %v4_1289c
  %v1_128a0.v6_128a0 = sub i32 %v1_128a0, %v6_128a0
  %.demorgan = and i1 %v3_12894, %v6_1289c
  %v4_128a4 = udiv i32 %v3_128b810, 4
  %v6_128a4 = icmp ult i32 %v1_128a0.v6_128a0, %v4_128a4
  %v6_128a8 = select i1 %v6_128a4, i32 0, i32 %v4_128a4
  %v1_128a0.v6_128a0.v6_128a8 = sub i32 %v1_128a0.v6_128a0, %v6_128a8
  %.demorgan76 = and i1 %.demorgan, %v6_128a4
  %v4_128ac = udiv i32 %v3_128b810, 8
  %v6_128ac = icmp ult i32 %v1_128a0.v6_128a0.v6_128a8, %v4_128ac
  %v6_128b0 = select i1 %v6_128ac, i32 0, i32 %v4_128ac
  %v1_128a0.v6_128a0.v6_128a8.v6_128b0 = sub i32 %v1_128a0.v6_128a0.v6_128a8, %v6_128b0
  %.demorgan77 = and i1 %.demorgan76, %v6_128ac
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_12894
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_12894, %bb88
  %v2_128b4 = add i32 %v1_128a0.v6_128a0.v6_128a8.v6_128b0, -1
  %v4_128b4 = sub i32 0, %v1_128a0.v6_128a0.v6_128a8.v6_128b0
  %v5_128b4 = and i32 %v1_128a0.v6_128a0.v6_128a8.v6_128b0, %v4_128b4
  %v3_128b8 = udiv i32 %v3_128b810, 16
  %v5_128bc = icmp slt i32 %v1_128a0.v6_128a0.v6_128a8.v6_128b0, 1
  br i1 %v5_128bc, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_128bc = add i32 %v6_128bc, -4
  %v9_128bc = sub i32 3, %v6_128bc
  %v10_128bc = and i32 %v9_128bc, %v6_128bc
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_128c4 = phi i32 [ %v6_128bc, %bb89 ], [ %v7_128bc, %bb90 ]
  %v0_128c013.in = phi i32 [ %v2_128b4, %bb89 ], [ %v7_128bc, %bb90 ]
  %v1_128c012.in = phi i32 [ %v5_128b4, %bb89 ], [ %v10_128bc, %bb90 ]
  %v1_128c012 = icmp slt i32 %v1_128c012.in, 0
  %v0_128c013 = icmp slt i32 %v0_128c013.in, 0
  %v2_128c0 = xor i1 %v0_128c013, %v1_128c012
  br i1 %v2_128c0, label %dec_label_pc_128c4, label %dec_label_pc_12894

dec_label_pc_128c4:                               ; preds = %bb91
  %v1_128c4 = urem i32 %v0_128c4, 4
  %v2_128c4 = icmp eq i32 %v1_128c4, 0
  br i1 %v2_128c4, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_128c4
  %v3_128c8 = icmp eq i32 %v1_128a0.v6_128a0.v6_128a8.v6_128b0, 0
  br i1 %v3_128c8, label %.thread6, label %dec_label_pc_128d0

dec_label_pc_128d0:                               ; preds = %bb92, %dec_label_pc_1288c
  %v0_128e4 = phi i32 [ %v3_128b8, %bb92 ], [ %v1_12880, %dec_label_pc_1288c ]
  %v1_128e0 = phi i32 [ %v1_128a0.v6_128a0.v6_128a8.v6_128b0, %bb92 ], [ %v2_1287c, %dec_label_pc_1288c ]
  %v0_128d0 = phi i32 [ %v0_128c4, %bb92 ], [ %v2_1288c, %dec_label_pc_1288c ]
  %v5_128d4 = icmp slt i32 %v0_128d0, -2
  br i1 %v5_128d4, label %dec_label_pc_128f4, label %dec_label_pc_128d8

dec_label_pc_128d8:                               ; preds = %dec_label_pc_128d0
  %v8_128d0 = icmp eq i32 %v0_128d0, -2
  br i1 %v8_128d0, label %dec_label_pc_128e8, label %dec_label_pc_128dc

dec_label_pc_128dc:                               ; preds = %dec_label_pc_128d8
  %v3_128dc = icmp ult i32 %v1_128e0, %v0_128e4
  br i1 %v3_128dc, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_128dc
  %v2_128dc = sub i32 %v1_128e0, %v0_128e4
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_128dc, %bb93
  %v0_128e854 = phi i32 [ %v1_128e0, %dec_label_pc_128dc ], [ %v2_128dc, %bb93 ]
  %v3_128e4 = udiv i32 %v0_128e4, 2
  br label %dec_label_pc_128e8

dec_label_pc_128e8:                               ; preds = %dec_label_pc_128d8, %bb94
  %v0_128f0 = phi i32 [ %v0_128e4, %dec_label_pc_128d8 ], [ %v3_128e4, %bb94 ]
  %v1_128ec = phi i32 [ %v1_128e0, %dec_label_pc_128d8 ], [ %v0_128e854, %bb94 ]
  %v3_128e8 = icmp ult i32 %v1_128ec, %v0_128f0
  br i1 %v3_128e8, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_128e8
  %v2_128e8 = sub i32 %v1_128ec, %v0_128f0
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_128e8, %bb95
  %v0_128f457 = phi i32 [ %v1_128ec, %dec_label_pc_128e8 ], [ %v2_128e8, %bb95 ]
  %v3_128f0 = udiv i32 %v0_128f0, 2
  br label %dec_label_pc_128f4

dec_label_pc_128f4:                               ; preds = %dec_label_pc_128d0, %bb96
  %v2_128f8 = phi i32 [ %v0_128e4, %dec_label_pc_128d0 ], [ %v3_128f0, %bb96 ]
  %v1_128f8 = phi i32 [ %v1_128e0, %dec_label_pc_128d0 ], [ %v0_128f457, %bb96 ]
  %v3_128f4 = icmp ult i32 %v1_128f8, %v2_128f8
  br i1 %v3_128f4, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_128f4
  %v2_128f4 = sub i32 %v1_128f8, %v2_128f8
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_128f4, %bb83, %.thread72, %dec_label_pc_128c4, %bb92, %bb97
  %v1_12900 = phi i32 [ %v1_128a0.v6_128a0.v6_128a8.v6_128b0, %dec_label_pc_128c4 ], [ 0, %bb92 ], [ %v1_128f8, %dec_label_pc_128f4 ], [ %v2_128f4, %bb97 ], [ %v3_12858, %.thread72 ], [ %v1_1284c, %bb83 ]
  br i1 %v1_12840, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_12900 = sub i32 0, %v1_12900
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_12904 = phi i32 [ %v1_12900, %.thread6 ], [ %v2_12900, %bb98 ]
  ret i32 %v1_12904

dec_label_pc_12908:                               ; preds = %dec_label_pc_12834
  %v0_12908 = load i32, i32* @lr, align 4
  %v0_1290c = call i32 @function_12918()
  call void @__pseudo_branch(i32 %v0_12908)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_128e4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_128c4, { 1, 0, 2 }
  uselistorder i32 %v7_128bc, { 1, 0 }
  uselistorder i32 %v3_128b8, { 1, 0 }
  uselistorder i32 %v1_128a0.v6_128a0.v6_128a8.v6_128b0, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_128ac, { 1, 0 }
  uselistorder i32 %v4_128a4, { 1, 0 }
  uselistorder i32 %v4_1289c, { 1, 0 }
  uselistorder i32 %v6_128bc, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1288c, { 1, 0 }
  uselistorder i32 %v1_12880, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_1287c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_1286c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_12878.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1284c, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_12854, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_12918, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_128f4, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_128e8, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_12894, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_12918() local_unnamed_addr {
dec_label_pc_12918:
  %v1_12918 = load i32, i32* @r0, align 4
  ret i32 %v1_12918
}

define i32 @function_1291c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1291c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_1291c = load i32, i32* @r2, align 4
  %v1_1292c = add i32 %arg2, -12
  store i32 %v6_1291c, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_1292c, 2
  br i1 %tmp, label %dec_label_pc_12954, label %dec_label_pc_1294c

dec_label_pc_1294c:                               ; preds = %dec_label_pc_1291c
  %v0_1294c = call i32 @function_12990()
  br label %dec_label_pc_12980

dec_label_pc_12954:                               ; preds = %dec_label_pc_1291c
  %v2_1295c = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_1295c, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_1295c, -4095
  br i1 %tmp8, label %dec_label_pc_12980, label %dec_label_pc_1296c

dec_label_pc_1296c:                               ; preds = %dec_label_pc_12954
  %v0_1296c = call i32 @function_12f88()
  %v0_12970 = load i32, i32* %r4.global-to-local, align 4
  %v1_12970 = sub i32 0, %v0_12970
  %v2_12974 = inttoptr i32 %v0_1296c to i32*
  store i32 %v1_12970, i32* %v2_12974, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12980

dec_label_pc_12980:                               ; preds = %dec_label_pc_1296c, %dec_label_pc_12954, %dec_label_pc_1294c
  %storemerge = phi i32 [ %v0_1294c, %dec_label_pc_1294c ], [ %v2_1295c, %dec_label_pc_12954 ], [ -1, %dec_label_pc_1296c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_1295c, { 1, 0, 2 }
}

define i32 @function_12990() local_unnamed_addr {
dec_label_pc_12990:
  %r4.global-to-local = alloca i32, align 4
  %v0_129b0 = load i32, i32* @r0, align 4
  store i32 %v0_129b0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_129b0, -4095
  br i1 %tmp, label %dec_label_pc_129cc, label %dec_label_pc_129bc

dec_label_pc_129bc:                               ; preds = %dec_label_pc_12990
  %v0_129bc = call i32 @function_12f88()
  %v0_129c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_129c0 = sub i32 0, %v0_129c0
  %v2_129c4 = inttoptr i32 %v0_129bc to i32*
  store i32 %v1_129c0, i32* %v2_129c4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_129cc

dec_label_pc_129cc:                               ; preds = %dec_label_pc_12990, %dec_label_pc_129bc
  %v0_129cc = phi i32 [ %v0_129b0, %dec_label_pc_12990 ], [ -1, %dec_label_pc_129bc ]
  ret i32 %v0_129cc

; uselistorder directives
  uselistorder i32 %v0_129b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_129cc, { 1, 0 }
}

define i32 @function_129e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_129e0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_129e0 = load i32, i32* @r4, align 4
  store i32 %v3_129e0, i32* %stack_var_-8, align 4
  %v1_129e4 = call i32 @close(i32 %arg1)
  store i32 %v1_129e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_129e4, -4095
  br i1 %tmp, label %dec_label_pc_12a04, label %dec_label_pc_129f4

dec_label_pc_129f4:                               ; preds = %dec_label_pc_129e0
  %v0_129f4 = call i32 @function_12f88()
  %v0_129f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_129f8 = sub i32 0, %v0_129f8
  %v2_129fc = inttoptr i32 %v0_129f4 to i32*
  store i32 %v1_129f8, i32* %v2_129fc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12a04

dec_label_pc_12a04:                               ; preds = %dec_label_pc_129e0, %dec_label_pc_129f4
  %v0_12a04 = phi i32 [ %v1_129e4, %dec_label_pc_129e0 ], [ -1, %dec_label_pc_129f4 ]
  %v2_12a08 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12a08, i32* @r4, align 4
  ret i32 %v0_12a04

; uselistorder directives
  uselistorder i32 %v1_129e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a04, { 1, 0 }
}

define i32 @function_12a0c() local_unnamed_addr {
dec_label_pc_12a0c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a0c = load i32, i32* @r4, align 4
  store i32 %v3_12a0c, i32* %stack_var_-8, align 4
  %v0_12a10 = call i32 @fork()
  store i32 %v0_12a10, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12a10, -4095
  br i1 %tmp, label %dec_label_pc_12a30, label %dec_label_pc_12a20

dec_label_pc_12a20:                               ; preds = %dec_label_pc_12a0c
  %v0_12a20 = call i32 @function_12f88()
  %v0_12a24 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a24 = sub i32 0, %v0_12a24
  %v2_12a28 = inttoptr i32 %v0_12a20 to i32*
  store i32 %v1_12a24, i32* %v2_12a28, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12a30

dec_label_pc_12a30:                               ; preds = %dec_label_pc_12a0c, %dec_label_pc_12a20
  %v0_12a30 = phi i32 [ %v0_12a10, %dec_label_pc_12a0c ], [ -1, %dec_label_pc_12a20 ]
  %v2_12a34 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12a34, i32* @r4, align 4
  ret i32 %v0_12a30

; uselistorder directives
  uselistorder i32 %v0_12a10, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a30, { 1, 0 }
}

define i32 @function_12a38() local_unnamed_addr {
dec_label_pc_12a38:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a38 = load i32, i32* @r4, align 4
  store i32 %v3_12a38, i32* %stack_var_-8, align 4
  %v0_12a3c = call i32 @getpid()
  store i32 %v0_12a3c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12a3c, -4095
  br i1 %tmp, label %dec_label_pc_12a5c, label %dec_label_pc_12a4c

dec_label_pc_12a4c:                               ; preds = %dec_label_pc_12a38
  %v0_12a4c = call i32 @function_12f88()
  %v0_12a50 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a50 = sub i32 0, %v0_12a50
  %v2_12a54 = inttoptr i32 %v0_12a4c to i32*
  store i32 %v1_12a50, i32* %v2_12a54, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12a5c

dec_label_pc_12a5c:                               ; preds = %dec_label_pc_12a38, %dec_label_pc_12a4c
  %v0_12a5c = phi i32 [ %v0_12a3c, %dec_label_pc_12a38 ], [ -1, %dec_label_pc_12a4c ]
  %v2_12a60 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12a60, i32* @r4, align 4
  ret i32 %v0_12a5c

; uselistorder directives
  uselistorder i32 %v0_12a3c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a5c, { 1, 0 }
}

define i32 @function_12a64() local_unnamed_addr {
dec_label_pc_12a64:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a64 = load i32, i32* @r4, align 4
  store i32 %v3_12a64, i32* %stack_var_-8, align 4
  %v0_12a68 = call i32 @getppid()
  store i32 %v0_12a68, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12a68, -4095
  br i1 %tmp, label %dec_label_pc_12a88, label %dec_label_pc_12a78

dec_label_pc_12a78:                               ; preds = %dec_label_pc_12a64
  %v0_12a78 = call i32 @function_12f88()
  %v0_12a7c = load i32, i32* %r4.global-to-local, align 4
  %v1_12a7c = sub i32 0, %v0_12a7c
  %v2_12a80 = inttoptr i32 %v0_12a78 to i32*
  store i32 %v1_12a7c, i32* %v2_12a80, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12a88

dec_label_pc_12a88:                               ; preds = %dec_label_pc_12a64, %dec_label_pc_12a78
  %v0_12a88 = phi i32 [ %v0_12a68, %dec_label_pc_12a64 ], [ -1, %dec_label_pc_12a78 ]
  %v2_12a8c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12a8c, i32* @r4, align 4
  ret i32 %v0_12a88

; uselistorder directives
  uselistorder i32 %v0_12a68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a88, { 1, 0 }
}

define i32 @function_12a90(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12a90:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_12a90 = load i32, i32* @r3, align 4
  store i32 %v9_12a90, i32* %stack_var_-4, align 4
  %v2_12a9c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_12a9c, i32* @r3, align 4
  %v2_12aac = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_12aac, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_12aac, -4095
  br i1 %tmp, label %dec_label_pc_12acc, label %dec_label_pc_12abc

dec_label_pc_12abc:                               ; preds = %dec_label_pc_12a90
  %v0_12abc = call i32 @function_12f88()
  %v0_12ac0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12ac0 = sub i32 0, %v0_12ac0
  store i32 %v1_12ac0, i32* @r3, align 4
  %v2_12ac4 = inttoptr i32 %v0_12abc to i32*
  store i32 %v1_12ac0, i32* %v2_12ac4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12acc

dec_label_pc_12acc:                               ; preds = %dec_label_pc_12a90, %dec_label_pc_12abc
  %v0_12acc = phi i32 [ %v2_12aac, %dec_label_pc_12a90 ], [ -1, %dec_label_pc_12abc ]
  ret i32 %v0_12acc

; uselistorder directives
  uselistorder i32 %v2_12aac, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_12acc, { 1, 0 }
}

define i32 @function_12ae0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12ae0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ae0 = load i32, i32* @r4, align 4
  store i32 %v3_12ae0, i32* %stack_var_-8, align 4
  %v2_12ae4 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_12ae8 = icmp eq i32 %v2_12ae4, -4096
  store i1 %v7_12ae8, i1* @cpsr_z, align 1
  store i32 %v2_12ae4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_12ae4, -4095
  br i1 %tmp, label %dec_label_pc_12b04, label %dec_label_pc_12af4

dec_label_pc_12af4:                               ; preds = %dec_label_pc_12ae0
  %v0_12af4 = call i32 @function_12f88()
  %v0_12af8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12af8 = sub i32 0, %v0_12af8
  %v2_12afc = inttoptr i32 %v0_12af4 to i32*
  store i32 %v1_12af8, i32* %v2_12afc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b04

dec_label_pc_12b04:                               ; preds = %dec_label_pc_12ae0, %dec_label_pc_12af4
  %v0_12b04 = phi i32 [ %v2_12ae4, %dec_label_pc_12ae0 ], [ -1, %dec_label_pc_12af4 ]
  %v2_12b08 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12b08, i32* @r4, align 4
  ret i32 %v0_12b04

; uselistorder directives
  uselistorder i32 %v2_12ae4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_12b04, { 1, 0 }
}

define i32 @function_12b0c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12b0c:
  %r4.global-to-local = alloca i32, align 4
  %v6_12b0c = load i32, i32* @r2, align 4
  %v1_12b1c = and i32 %arg2, 64
  store i32 %v1_12b1c, i32* @r3, align 4
  %v2_12b1c = icmp eq i32 %v1_12b1c, 0
  br i1 %v2_12b1c, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_12b0c
  store i32 %v6_12b0c, i32* @r3, align 4
  %phitmp = urem i32 %v6_12b0c, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12b0c, %bb
  %v0_12b2c = phi i32 [ 0, %dec_label_pc_12b0c ], [ %phitmp, %bb ]
  store i32 %v0_12b2c, i32* @r2, align 4
  %v4_12b34 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_12b38 = icmp eq i32 %v4_12b34, -4096
  store i1 %v7_12b38, i1* @cpsr_z, align 1
  store i32 %v4_12b34, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12b34, -4095
  br i1 %tmp, label %dec_label_pc_12b54, label %dec_label_pc_12b44

dec_label_pc_12b44:                               ; preds = %.thread1
  %v0_12b44 = call i32 @function_12f88()
  %v0_12b48 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b48 = sub i32 0, %v0_12b48
  store i32 %v1_12b48, i32* @r3, align 4
  %v2_12b4c = inttoptr i32 %v0_12b44 to i32*
  store i32 %v1_12b48, i32* %v2_12b4c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b54

dec_label_pc_12b54:                               ; preds = %.thread1, %dec_label_pc_12b44
  %v0_12b54 = phi i32 [ %v4_12b34, %.thread1 ], [ -1, %dec_label_pc_12b44 ]
  ret i32 %v0_12b54

; uselistorder directives
  uselistorder i32 %v4_12b34, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_12b54, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_12b68(i32 %arg1) local_unnamed_addr {
dec_label_pc_12b68:
  store i32 %arg1, i32* @r2, align 4
  %v0_12b70 = load i32, i32* @r0, align 4
  %v2_12b70 = inttoptr i32 %v0_12b70 to i8*
  %v3_12b70 = call i32 @function_12b0c(i8* %v2_12b70, i32 577)
  %v0_12b74 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12b74, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_12b68
  %v6_12b74 = and i32 %v3_12b70, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_12b68, %bb
  %v7_12b74 = phi i32 [ %v3_12b70, %dec_label_pc_12b68 ], [ %v6_12b74, %bb ]
  ret i32 %v7_12b74

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_12b78(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12b78:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12b78 = load i32, i32* @r4, align 4
  store i32 %v3_12b78, i32* %stack_var_-8, align 4
  %v2_12b80 = load i32, i32* @r2, align 4
  %v3_12b80 = load i32, i32* @r3, align 4
  %v4_12b80 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_12b80, i32 %v3_12b80, i32 0)
  store i32 %v4_12b80, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12b80, -4095
  br i1 %tmp, label %dec_label_pc_12ba0, label %dec_label_pc_12b90

dec_label_pc_12b90:                               ; preds = %dec_label_pc_12b78
  %v0_12b90 = call i32 @function_12f88()
  %v0_12b94 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b94 = sub i32 0, %v0_12b94
  %v2_12b98 = inttoptr i32 %v0_12b90 to i32*
  store i32 %v1_12b94, i32* %v2_12b98, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12ba0

dec_label_pc_12ba0:                               ; preds = %dec_label_pc_12b78, %dec_label_pc_12b90
  %v0_12ba0 = phi i32 [ %v4_12b80, %dec_label_pc_12b78 ], [ -1, %dec_label_pc_12b90 ]
  %v2_12ba4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12ba4, i32* @r4, align 4
  ret i32 %v0_12ba0

; uselistorder directives
  uselistorder i32 %v4_12b80, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12ba0, { 1, 0 }
}

define i32 @function_12ba8(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12ba8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ba8 = load i32, i32* @r4, align 4
  store i32 %v3_12ba8, i32* %stack_var_-8, align 4
  %v4_12bac = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_12bac, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12bac, -4095
  br i1 %tmp, label %dec_label_pc_12bcc, label %dec_label_pc_12bbc

dec_label_pc_12bbc:                               ; preds = %dec_label_pc_12ba8
  %v0_12bbc = call i32 @function_12f88()
  %v0_12bc0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12bc0 = sub i32 0, %v0_12bc0
  %v2_12bc4 = inttoptr i32 %v0_12bbc to i32*
  store i32 %v1_12bc0, i32* %v2_12bc4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12bcc

dec_label_pc_12bcc:                               ; preds = %dec_label_pc_12ba8, %dec_label_pc_12bbc
  %v0_12bcc = phi i32 [ %v4_12bac, %dec_label_pc_12ba8 ], [ -1, %dec_label_pc_12bbc ]
  %v2_12bd0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12bd0, i32* @r4, align 4
  ret i32 %v0_12bcc

; uselistorder directives
  uselistorder i32 %v4_12bac, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12bcc, { 1, 0 }
}

define i32 @function_12bd4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12bd4:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_12bd4 = load i32, i32* @r4, align 4
  store i32 %v3_12bd4, i32* %stack_var_-8, align 4
  %v7_12bd8 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_12bd8, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_12bd8, -4095
  br i1 %tmp6, label %dec_label_pc_12bf8, label %dec_label_pc_12be8

dec_label_pc_12be8:                               ; preds = %dec_label_pc_12bd4
  %v0_12be8 = call i32 @function_12f88()
  %v0_12bec = load i32, i32* %r4.global-to-local, align 4
  %v1_12bec = sub i32 0, %v0_12bec
  %v2_12bf0 = inttoptr i32 %v0_12be8 to i32*
  store i32 %v1_12bec, i32* %v2_12bf0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12bf8

dec_label_pc_12bf8:                               ; preds = %dec_label_pc_12bd4, %dec_label_pc_12be8
  %v0_12bf8 = phi i32 [ %v7_12bd8, %dec_label_pc_12bd4 ], [ -1, %dec_label_pc_12be8 ]
  %v2_12bfc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12bfc, i32* @r4, align 4
  ret i32 %v0_12bf8

; uselistorder directives
  uselistorder i32 %v7_12bd8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12bf8, { 1, 0 }
}

define i32 @function_12c00(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12c00:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12c00 = load i32, i32* @r4, align 4
  store i32 %v3_12c00, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12c28, label %dec_label_pc_12c18

dec_label_pc_12c18:                               ; preds = %dec_label_pc_12c00
  %v0_12c18 = call i32 @function_12f88()
  %v0_12c1c = load i32, i32* %r4.global-to-local, align 4
  %v1_12c1c = sub i32 0, %v0_12c1c
  %v2_12c20 = inttoptr i32 %v0_12c18 to i32*
  store i32 %v1_12c1c, i32* %v2_12c20, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12c2c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12c28

dec_label_pc_12c28:                               ; preds = %dec_label_pc_12c00, %dec_label_pc_12c18
  %v2_12c2c = phi i32 [ %v3_12c00, %dec_label_pc_12c00 ], [ %v2_12c2c.pre, %dec_label_pc_12c18 ]
  %v0_12c28 = phi i32 [ %arg1, %dec_label_pc_12c00 ], [ -1, %dec_label_pc_12c18 ]
  store i32 %v2_12c2c, i32* @r4, align 4
  ret i32 %v0_12c28

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12c28, { 1, 0 }
}

define i32 @function_12c30(i32 %arg1) local_unnamed_addr {
dec_label_pc_12c30:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12c30 = load i32, i32* @r4, align 4
  store i32 %v3_12c30, i32* %stack_var_-8, align 4
  %v0_12c34 = call i32 @setsid()
  store i32 %v0_12c34, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12c34, -4095
  br i1 %tmp, label %dec_label_pc_12c54, label %dec_label_pc_12c44

dec_label_pc_12c44:                               ; preds = %dec_label_pc_12c30
  %v0_12c44 = call i32 @function_12f88()
  %v0_12c48 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c48 = sub i32 0, %v0_12c48
  %v2_12c4c = inttoptr i32 %v0_12c44 to i32*
  store i32 %v1_12c48, i32* %v2_12c4c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c54

dec_label_pc_12c54:                               ; preds = %dec_label_pc_12c30, %dec_label_pc_12c44
  %v0_12c54 = phi i32 [ %v0_12c34, %dec_label_pc_12c30 ], [ -1, %dec_label_pc_12c44 ]
  %v2_12c58 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12c58, i32* @r4, align 4
  ret i32 %v0_12c54

; uselistorder directives
  uselistorder i32 %v0_12c34, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12c54, { 1, 0 }
}

define i32 @function_12c5c(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12c5c:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12c5c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_12c5c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12c5c
  %v3_12c645 = load i32, i32* @r4, align 4
  store i32 %v3_12c645, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12c84

bb:                                               ; preds = %dec_label_pc_12c5c
  %v3_12c64 = load i32, i32* @r4, align 4
  store i32 %v3_12c64, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_12c84, label %dec_label_pc_12c70

dec_label_pc_12c70:                               ; preds = %bb
  %v0_12c70 = call i32 @function_12f88()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12c7c = inttoptr i32 %v0_12c70 to i32*
  store i32 22, i32* %v2_12c7c, align 4
  %v0_12ca8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12ca8

dec_label_pc_12c84:                               ; preds = %.thread, %bb
  %v7_12c84 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_12c84, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_12c84, -4095
  br i1 %tmp13, label %dec_label_pc_12ca4, label %dec_label_pc_12c94

dec_label_pc_12c94:                               ; preds = %dec_label_pc_12c84
  %v0_12c94 = call i32 @function_12f88()
  %v0_12c98 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c98 = sub i32 0, %v0_12c98
  %v2_12c9c = inttoptr i32 %v0_12c94 to i32*
  store i32 %v1_12c98, i32* %v2_12c9c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12ca4

dec_label_pc_12ca4:                               ; preds = %dec_label_pc_12c84, %dec_label_pc_12c94
  %v0_12ca4 = phi i32 [ %v7_12c84, %dec_label_pc_12c84 ], [ -1, %dec_label_pc_12c94 ]
  store i32 %v0_12ca4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12ca8

dec_label_pc_12ca8:                               ; preds = %dec_label_pc_12c70, %dec_label_pc_12ca4
  %v0_12ca8 = phi i32 [ %v0_12ca8.pre, %dec_label_pc_12c70 ], [ %v0_12ca4, %dec_label_pc_12ca4 ]
  %v2_12cac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12cac, i32* @r4, align 4
  ret i32 %v0_12ca8

; uselistorder directives
  uselistorder i32 %v7_12c84, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_12ca8, { 1, 0 }
  uselistorder label %dec_label_pc_12ca4, { 1, 0 }
  uselistorder label %dec_label_pc_12c84, { 1, 0 }
}

define i32 @function_12cb0(i32* %arg1) local_unnamed_addr {
dec_label_pc_12cb0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12cb0 = load i32, i32* @r4, align 4
  store i32 %v3_12cb0, i32* %stack_var_-8, align 4
  %v2_12cb4 = call i32 @time(i32* %arg1)
  store i32 %v2_12cb4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_12cb4, -4095
  br i1 %tmp, label %dec_label_pc_12cd4, label %dec_label_pc_12cc4

dec_label_pc_12cc4:                               ; preds = %dec_label_pc_12cb0
  %v0_12cc4 = call i32 @function_12f88()
  %v0_12cc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12cc8 = sub i32 0, %v0_12cc8
  %v2_12ccc = inttoptr i32 %v0_12cc4 to i32*
  store i32 %v1_12cc8, i32* %v2_12ccc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12cd4

dec_label_pc_12cd4:                               ; preds = %dec_label_pc_12cb0, %dec_label_pc_12cc4
  %v0_12cd4 = phi i32 [ %v2_12cb4, %dec_label_pc_12cb0 ], [ -1, %dec_label_pc_12cc4 ]
  %v2_12cd8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12cd8, i32* @r4, align 4
  ret i32 %v0_12cd4

; uselistorder directives
  uselistorder i32 %v2_12cb4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12cd4, { 1, 0 }
}

define i32 @function_12cdc(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12cdc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12cdc = load i32, i32* @r4, align 4
  store i32 %v3_12cdc, i32* %stack_var_-8, align 4
  %v4_12ce0 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_12ce0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12ce0, -4095
  br i1 %tmp, label %dec_label_pc_12d00, label %dec_label_pc_12cf0

dec_label_pc_12cf0:                               ; preds = %dec_label_pc_12cdc
  %v0_12cf0 = call i32 @function_12f88()
  %v0_12cf4 = load i32, i32* %r4.global-to-local, align 4
  %v1_12cf4 = sub i32 0, %v0_12cf4
  %v2_12cf8 = inttoptr i32 %v0_12cf0 to i32*
  store i32 %v1_12cf4, i32* %v2_12cf8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12d00

dec_label_pc_12d00:                               ; preds = %dec_label_pc_12cdc, %dec_label_pc_12cf0
  %v0_12d00 = phi i32 [ %v4_12ce0, %dec_label_pc_12cdc ], [ -1, %dec_label_pc_12cf0 ]
  %v2_12d04 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12d04, i32* @r4, align 4
  ret i32 %v0_12d00

; uselistorder directives
  uselistorder i32 %v4_12ce0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12d00, { 1, 0 }
}

define i32 @function_12d08(i32* %arg1) local_unnamed_addr {
dec_label_pc_12d08:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12d08 = load i32, i32* @r4, align 4
  store i32 %v3_12d08, i32* %stack_var_-20, align 4
  %v6_12d08 = load i32, i32* @r5, align 4
  %v9_12d08 = load i32, i32* @r6, align 4
  %v12_12d08 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12d10 = load i32, i32* %arg1, align 4
  store i32 %v2_12d10, i32* %r4.global-to-local, align 4
  %v2_12d14 = ptrtoint i32* %stack_var_-36 to i32
  %v1_12d18 = add i32 %tmp, 24
  store i32 %v1_12d18, i32* @r6, align 4
  %v3_12d1c = icmp eq i32 %v2_12d10, -1
  store i32 %v2_12d14, i32* @r7, align 4
  store i32 %v1_12d18, i32* %r2.global-to-local, align 4
  store i32 %v2_12d14, i32* @r0, align 4
  br i1 %v3_12d1c, label %dec_label_pc_12d34, label %dec_label_pc_12d48

dec_label_pc_12d34:                               ; preds = %dec_label_pc_12d08
  %v0_12d34 = call i32 @function_12f88()
  %v0_12d3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12d3c, i32* %r2.global-to-local, align 4
  %v2_12d40 = inttoptr i32 %v0_12d34 to i32*
  store i32 9, i32* %v2_12d40, align 4
  %v0_12da0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12da0

dec_label_pc_12d48:                               ; preds = %dec_label_pc_12d08
  %v8_12d50 = call i32 @function_13e54(i32 %v2_12d14, i32 ptrtoint (i32* @global_var_13e4c.568 to i32), i32 %v1_12d18, i32 81492, i32 %v3_12d08, i32 %v6_12d08, i32 %v9_12d08)
  %v1_12d60 = call i32 @function_13e4c()
  %v0_12d6c = load i32, i32* @r5, align 4
  %v1_12d6c = inttoptr i32 %v0_12d6c to i32*
  %v2_12d6c = load i32, i32* %v1_12d6c, align 4
  store i32 %v2_12d6c, i32* @r4, align 4
  store i32 %v2_12d14, i32* @r0, align 4
  store i32 -1, i32* %v1_12d6c, align 4
  store i32 ptrtoint (i32* @global_var_12d84.572 to i32), i32* @lr, align 4
  %v8_12d80 = call i32 @function_13e54(i32 %v2_12d14, i32 1, i32 %v1_12d18, i32 81492, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_12d84 = load i32, i32* @r5, align 4
  %v1_12d84 = add i32 %v0_12d84, 12
  %v2_12d84 = inttoptr i32 %v1_12d84 to i32*
  %v3_12d84 = load i32, i32* %v2_12d84, align 4
  store i32 %v3_12d84, i32* @r0, align 4
  %v0_12d88 = call i32 @function_13610()
  %v0_12d8c = load i32, i32* @r5, align 4
  store i32 %v0_12d8c, i32* @r0, align 4
  %v0_12d90 = call i32 @function_13610()
  %v0_12d94 = load i32, i32* @r4, align 4
  %v1_12d98 = call i32 @function_129e0(i32 %v0_12d94)
  store i32 %v1_12d98, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12da0

dec_label_pc_12da0:                               ; preds = %dec_label_pc_12d34, %dec_label_pc_12d48
  %v0_12da0 = phi i32 [ %v0_12da0.pre, %dec_label_pc_12d34 ], [ %v1_12d98, %dec_label_pc_12d48 ]
  %v2_12da8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12da8, i32* @r4, align 4
  store i32 %v6_12d08, i32* @r5, align 4
  store i32 %v9_12d08, i32* @r6, align 4
  store i32 %v12_12d08, i32* @r7, align 4
  ret i32 %v0_12da0

; uselistorder directives
  uselistorder i32 %v1_12d18, { 2, 1, 0, 3 }
  uselistorder i32 %v2_12d14, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_12d08, { 1, 0 }
  uselistorder i32 %v6_12d08, { 1, 0 }
  uselistorder label %dec_label_pc_12da0, { 1, 0 }
}

define i32 @function_12dbc(i32 %arg1) local_unnamed_addr {
dec_label_pc_12dbc:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_12dbc = load i32, i32* @r4, align 4
  %v9_12dbc = load i32, i32* @r6, align 4
  %v12_12dbc = load i32, i32* @r7, align 4
  %v0_12dc8 = load i32, i32* @r0, align 4
  %v2_12dc8 = inttoptr i32 %v0_12dc8 to i8*
  %v3_12dc8 = call i32 @function_12b0c(i8* %v2_12dc8, i32 18432)
  store i32 %v3_12dc8, i32* @r0, align 4
  store i32 %v3_12dc8, i32* @r7, align 4
  %v1_12dcc = icmp slt i32 %v3_12dc8, 0
  br i1 %v1_12dcc, label %.thread1, label %dec_label_pc_12dd8

.thread1:                                         ; preds = %dec_label_pc_12dbc
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_12ea8

dec_label_pc_12dd8:                               ; preds = %dec_label_pc_12dbc
  %v2_12dc4 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_12dc4, i32* @r1, align 4
  %v0_12ddc = call i32 @function_14278()
  %v1_12de0 = icmp slt i32 %v0_12ddc, 0
  br i1 %v1_12de0, label %dec_label_pc_12e00, label %dec_label_pc_12de8

dec_label_pc_12de8:                               ; preds = %dec_label_pc_12dd8
  %v0_12de8 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_12df4 = call i32 @function_1291c(i32 %v0_12de8, i32 2)
  %v1_12df8 = icmp slt i32 %v2_12df4, 0
  br i1 %v1_12df8, label %dec_label_pc_12e00, label %dec_label_pc_12e20

dec_label_pc_12e00:                               ; preds = %dec_label_pc_12de8, %dec_label_pc_12dd8
  %v0_12e00 = call i32 @function_12f88()
  store i32 %v0_12e00, i32* %r5.global-to-local, align 4
  %v0_12e08 = load i32, i32* @r7, align 4
  %v1_12e0c = inttoptr i32 %v0_12e00 to i32*
  %v2_12e0c = load i32, i32* %v1_12e0c, align 4
  store i32 %v2_12e0c, i32* @r4, align 4
  %v1_12e10 = call i32 @function_129e0(i32 %v0_12e08)
  store i32 0, i32* @r6, align 4
  %v0_12e18 = load i32, i32* @r4, align 4
  %v1_12e18 = load i32, i32* %r5.global-to-local, align 4
  %v2_12e18 = inttoptr i32 %v1_12e18 to i32*
  store i32 %v0_12e18, i32* %v2_12e18, align 4
  br label %dec_label_pc_12ea8

dec_label_pc_12e20:                               ; preds = %dec_label_pc_12de8
  %v1_12e24 = call i32 @function_13464(i32 48)
  store i32 %v1_12e24, i32* @r6, align 4
  %v2_12e28 = icmp eq i32 %v1_12e24, 0
  br i1 %v2_12e28, label %dec_label_pc_12e78, label %dec_label_pc_12e30

dec_label_pc_12e30:                               ; preds = %dec_label_pc_12e20
  store i32 0, i32* @r4, align 4
  %v2_12e34 = add i32 %v1_12e24, 16
  %v3_12e34 = inttoptr i32 %v2_12e34 to i32*
  store i32 0, i32* %v3_12e34, align 4
  %v2_12e3c = icmp ugt i32 %tmp, 511
  %v1_12e40 = load i32, i32* @r6, align 4
  %v2_12e40 = add i32 %v1_12e40, 20
  %v3_12e40 = inttoptr i32 %v2_12e40 to i32*
  store i32 %tmp, i32* %v3_12e40, align 4
  br i1 %v2_12e3c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12e30
  %v2_12e48 = load i32, i32* @r6, align 4
  %v3_12e48 = add i32 %v2_12e48, 20
  %v4_12e48 = inttoptr i32 %v3_12e48 to i32*
  store i32 512, i32* %v4_12e48, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12e30, %bb
  %v0_12e4c = load i32, i32* @r7, align 4
  %v1_12e4c = load i32, i32* @r6, align 4
  %v2_12e4c = inttoptr i32 %v1_12e4c to i32*
  store i32 %v0_12e4c, i32* %v2_12e4c, align 4
  %v0_12e50 = load i32, i32* @r4, align 4
  %v1_12e50 = load i32, i32* @r6, align 4
  %v2_12e50 = add i32 %v1_12e50, 8
  %v3_12e50 = inttoptr i32 %v2_12e50 to i32*
  store i32 %v0_12e50, i32* %v3_12e50, align 4
  %v0_12e54 = load i32, i32* @r4, align 4
  %v1_12e54 = load i32, i32* @r6, align 4
  %v2_12e54 = add i32 %v1_12e54, 4
  %v3_12e54 = inttoptr i32 %v2_12e54 to i32*
  store i32 %v0_12e54, i32* %v3_12e54, align 4
  %v0_12e5c = load i32, i32* @r6, align 4
  %v1_12e5c = add i32 %v0_12e5c, 20
  %v2_12e5c = inttoptr i32 %v1_12e5c to i32*
  %v3_12e5c = load i32, i32* %v2_12e5c, align 4
  %v2_12e60 = call i32 @function_135b8(i32 1, i32 %v3_12e5c)
  %v2_12e64 = icmp eq i32 %v2_12e60, 0
  %v1_12e68 = load i32, i32* @r6, align 4
  %v2_12e68 = add i32 %v1_12e68, 12
  %v3_12e68 = inttoptr i32 %v2_12e68 to i32*
  store i32 %v2_12e60, i32* %v3_12e68, align 4
  br i1 %v2_12e64, label %dec_label_pc_12e70, label %dec_label_pc_12e94

dec_label_pc_12e70:                               ; preds = %.thread
  %v0_12e70 = load i32, i32* @r6, align 4
  store i32 %v0_12e70, i32* @r0, align 4
  %v0_12e74 = call i32 @function_13610()
  br label %dec_label_pc_12e78

dec_label_pc_12e78:                               ; preds = %dec_label_pc_12e20, %dec_label_pc_12e70
  %v0_12e78 = load i32, i32* @r7, align 4
  %v1_12e7c = call i32 @function_129e0(i32 %v0_12e78)
  %v0_12e80 = call i32 @function_12f88()
  store i32 0, i32* @r6, align 4
  %v2_12e8c = inttoptr i32 %v0_12e80 to i32*
  store i32 12, i32* %v2_12e8c, align 4
  br label %dec_label_pc_12ea8

dec_label_pc_12e94:                               ; preds = %.thread
  store i32 77480, i32* @lr, align 4
  %v1_12ea4 = call i32 @function_13e4c()
  br label %dec_label_pc_12ea8

dec_label_pc_12ea8:                               ; preds = %.thread1, %dec_label_pc_12e78, %dec_label_pc_12e00, %dec_label_pc_12e94
  %v0_12ea8 = load i32, i32* @r6, align 4
  store i32 %v3_12dbc, i32* @r4, align 4
  store i32 %v9_12dbc, i32* @r6, align 4
  store i32 %v12_12dbc, i32* @r7, align 4
  ret i32 %v0_12ea8

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_135b8, { 34, 35, 33, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 2, 21, 20, 19, 18, 17, 16, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 512, { 1, 8, 11, 9, 2, 3, 12, 10, 13, 4, 14, 5, 15, 6, 16, 0, 17, 7, 18 }
  uselistorder i32 511, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_129e0, { 23, 22, 21, 36, 14, 35, 13, 34, 12, 11, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 20, 19, 18, 5, 17, 16, 15, 10, 9, 8, 7, 6, 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_12ea8, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_12e78, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12eb8(i32* %arg1) local_unnamed_addr {
dec_label_pc_12eb8:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_12eb8 = load i32, i32* @r4, align 4
  %v6_12eb8 = load i32, i32* @r5, align 4
  %v9_12eb8 = load i32, i32* @lr, align 4
  %v1_12ebc = add i32 %tmp, 24
  store i32 %v1_12ebc, i32* @r4, align 4
  %v2_12ec0 = ptrtoint i32* %stack_var_-28 to i32
  store i32 81492, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_12ec0, i32* @r0, align 4
  store i32 %v1_12ebc, i32* %r2.global-to-local, align 4
  %v8_12edc = call i32 @function_13e54(i32 %v2_12ec0, i32 ptrtoint (i32* @global_var_13e4c.568 to i32), i32 %v1_12ebc, i32 81492, i32 %v3_12eb8, i32 %v6_12eb8, i32 %v9_12eb8)
  %v0_12ee0 = load i32, i32* @r4, align 4
  store i32 %v0_12ee0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13e4c.568 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12ef0.577 to i32), i32* @lr, align 4
  %v1_12eec = call i32 @function_13e4c()
  store i32 %v1_12eec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12ef0

dec_label_pc_12ef0:                               ; preds = %dec_label_pc_12f24, %dec_label_pc_12eb8
  %v0_12ef0 = load i32, i32* @r5, align 4
  %v1_12ef0 = add i32 %v0_12ef0, 4
  %v2_12ef0 = inttoptr i32 %v1_12ef0 to i32*
  %v3_12ef0 = load i32, i32* %v2_12ef0, align 4
  store i32 %v3_12ef0, i32* %r2.global-to-local, align 4
  %v4_12ef0 = add i32 %v0_12ef0, 8
  %v5_12ef0 = inttoptr i32 %v4_12ef0 to i32*
  %v6_12ef0 = load i32, i32* %v5_12ef0, align 4
  store i32 %v6_12ef0, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_12ef0, %v3_12ef0
  br i1 %tmp8, label %dec_label_pc_12f24, label %dec_label_pc_12efc

dec_label_pc_12efc:                               ; preds = %dec_label_pc_12ef0
  %v1_12efc = inttoptr i32 %v0_12ef0 to i32*
  %v2_12efc = load i32, i32* %v1_12efc, align 4
  store i32 %v2_12efc, i32* @r0, align 4
  %v1_12f00 = add i32 %v0_12ef0, 12
  %v2_12f00 = inttoptr i32 %v1_12f00 to i32*
  %v3_12f00 = load i32, i32* %v2_12f00, align 4
  %v1_12f04 = add i32 %v0_12ef0, 20
  %v2_12f04 = inttoptr i32 %v1_12f04 to i32*
  %v3_12f04 = load i32, i32* %v2_12f04, align 4
  store i32 %v3_12f04, i32* @r2, align 4
  %v4_12f08 = call i32 @function_142c8(i32 %v2_12efc, i32 %v3_12f00, i32 %v3_12f04, i32 %v6_12ef0)
  store i32 %v4_12f08, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_12f08, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_12f18

.thread:                                          ; preds = %dec_label_pc_12efc
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12f58

dec_label_pc_12f18:                               ; preds = %dec_label_pc_12efc
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12f1c = load i32, i32* @r5, align 4
  %v2_12f1c = add i32 %v1_12f1c, 4
  %v3_12f1c = inttoptr i32 %v2_12f1c to i32*
  store i32 0, i32* %v3_12f1c, align 4
  %v1_12f20 = load i32, i32* @r5, align 4
  %v2_12f20 = add i32 %v1_12f20, 8
  %v3_12f20 = inttoptr i32 %v2_12f20 to i32*
  store i32 %v4_12f08, i32* %v3_12f20, align 4
  %v0_12f24.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12f24

dec_label_pc_12f24:                               ; preds = %dec_label_pc_12ef0, %dec_label_pc_12f18
  %v1_12f3c = phi i32 [ %v0_12ef0, %dec_label_pc_12ef0 ], [ %v0_12f24.pre, %dec_label_pc_12f18 ]
  %v1_12f24 = add i32 %v1_12f3c, 4
  %v2_12f24 = inttoptr i32 %v1_12f24 to i32*
  %v3_12f24 = load i32, i32* %v2_12f24, align 4
  store i32 %v3_12f24, i32* %r2.global-to-local, align 4
  %v1_12f28 = add i32 %v1_12f3c, 12
  %v2_12f28 = inttoptr i32 %v1_12f28 to i32*
  %v3_12f28 = load i32, i32* %v2_12f28, align 4
  store i32 %v3_12f28, i32* %ip.global-to-local, align 4
  %v2_12f2c = add i32 %v3_12f28, %v3_12f24
  store i32 %v2_12f2c, i32* @r4, align 4
  %v1_12f30 = add i32 %v2_12f2c, 4
  %v2_12f30 = inttoptr i32 %v1_12f30 to i32*
  %v3_12f30 = load i32, i32* %v2_12f30, align 4
  %v1_12f34 = add i32 %v2_12f2c, 8
  %v2_12f34 = inttoptr i32 %v1_12f34 to i8*
  %v3_12f34 = load i8, i8* %v2_12f34, align 1
  %v4_12f34 = zext i8 %v3_12f34 to i32
  store i32 %v4_12f34, i32* %r3.global-to-local, align 4
  %v1_12f38 = add i32 %v2_12f2c, 9
  %v2_12f38 = inttoptr i32 %v1_12f38 to i8*
  %v3_12f38 = load i8, i8* %v2_12f38, align 1
  %v4_12f38 = zext i8 %v3_12f38 to i32
  store i32 %v4_12f38, i32* %r0.global-to-local, align 4
  %v2_12f3c = add i32 %v1_12f3c, 16
  %v3_12f3c = inttoptr i32 %v2_12f3c to i32*
  store i32 %v3_12f30, i32* %v3_12f3c, align 4
  %v0_12f40 = load i32, i32* %r2.global-to-local, align 4
  %v1_12f40 = load i32, i32* %ip.global-to-local, align 4
  %v2_12f40 = add i32 %v1_12f40, %v0_12f40
  %v3_12f40 = inttoptr i32 %v2_12f40 to i32*
  %v4_12f40 = load i32, i32* %v3_12f40, align 4
  %v0_12f44 = load i32, i32* %r3.global-to-local, align 4
  %v1_12f44 = load i32, i32* %r0.global-to-local, align 4
  %v4_12f44 = mul i32 %v1_12f44, 256
  %v5_12f44 = or i32 %v4_12f44, %v0_12f44
  store i32 %v5_12f44, i32* %r3.global-to-local, align 4
  %v2_12f48 = add i32 %v5_12f44, %v0_12f40
  store i32 %v2_12f48, i32* @r2, align 4
  %v2_12f4c = icmp eq i32 %v4_12f40, 0
  %v1_12f50 = load i32, i32* @r5, align 4
  %v2_12f50 = add i32 %v1_12f50, 4
  %v3_12f50 = inttoptr i32 %v2_12f50 to i32*
  store i32 %v2_12f48, i32* %v3_12f50, align 4
  br i1 %v2_12f4c, label %dec_label_pc_12ef0, label %dec_label_pc_12f58

dec_label_pc_12f58:                               ; preds = %dec_label_pc_12f24, %.thread
  store i32 %v2_12ec0, i32* @r0, align 4
  store i32 81492, i32* %r3.global-to-local, align 4
  store i32 77676, i32* @lr, align 4
  %v3_12f68 = load i32, i32* @r2, align 4
  %v8_12f68 = call i32 @function_13e54(i32 %v2_12ec0, i32 1, i32 %v3_12f68, i32 81492, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_12f6c = load i32, i32* @r4, align 4
  store i32 %v0_12f6c, i32* %r0.global-to-local, align 4
  store i32 %v3_12eb8, i32* @r4, align 4
  store i32 %v6_12eb8, i32* @r5, align 4
  ret i32 %v0_12f6c

; uselistorder directives
  uselistorder i32 %v1_12f3c, { 0, 2, 1 }
  uselistorder i32 %v6_12ef0, { 1, 0, 2 }
  uselistorder i32 %v0_12ef0, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_12ec0, { 1, 0, 3, 2 }
  uselistorder i32 %v1_12ebc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_12f24, { 1, 0 }
}

define i32 @function_12f88() local_unnamed_addr {
dec_label_pc_12f88:
  ret i32 ptrtoint (i32* @global_var_1dd30.580 to i32)
}

define i32 @function_12f94(i32 %arg1) local_unnamed_addr {
dec_label_pc_12f94:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_12fa0 = bitcast i32* %stack_var_-20 to %tms*
  %v2_12fa0 = call i32 @function_14658(%tms* %v1_12fa0)
  %v2_12fa8 = load i32, i32* %stack_var_-20, align 4
  %v2_12fac = add i32 %v2_12fa8, %tmp
  %v2_12fb4 = mul i32 %v2_12fac, 10000
  %v1_12fb8 = and i32 %v2_12fb4, 2147483632
  ret i32 %v1_12fb8

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_12fc4(i32 %arg1) local_unnamed_addr {
dec_label_pc_12fc4:
  %v0_12fc4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12fc4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_12fc4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_12fc4, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_12fd0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12fd0:
  %v0_12fd0 = call i32 @function_14a60()
  ret i32 %v0_12fd0
}

define i32 @function_12fe0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12fe0:
  %v0_12fe0 = call i32 @function_14a60()
  ret i32 %v0_12fe0

; uselistorder directives
  uselistorder i32 ()* @function_14a60, { 1, 0 }
}

define i32 @function_12ff0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12ff0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_12ff4 = load i32, i32* @r2, align 4
  %v8_12ff4 = icmp eq i32 %v0_12ff4, 8
  store i1 %v8_12ff4, i1* %cpsr_z.global-to-local, align 1
  %v5_12ff8 = icmp slt i32 %v0_12ff4, 8
  br i1 %v5_12ff8, label %dec_label_pc_13058, label %dec_label_pc_12ffc

dec_label_pc_12ffc:                               ; preds = %dec_label_pc_12ff0
  %v4_12ffc = mul i32 %arg2, 256
  %v5_12ffc = or i32 %v4_12ffc, %arg2
  %v4_13000 = mul i32 %v5_12ffc, 65536
  %v5_13000 = or i32 %v4_13000, %v5_12ffc
  store i32 %v5_13000, i32* %r1.global-to-local, align 4
  %v1_1300457 = urem i32 %tmp, 4
  %v2_1300458 = icmp eq i32 %v1_1300457, 0
  store i1 %v2_1300458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1300458, label %dec_label_pc_13014, label %bb

bb:                                               ; preds = %dec_label_pc_12ffc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_12ffc ]
  %v3_1300859 = phi i32 [ %v6_13008, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_12ffc ]
  %v4_13008 = inttoptr i32 %v3_1300859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_13008, align 1
  %v5_13008 = load i32, i32* %r3.global-to-local, align 4
  %v6_13008 = add i32 %v5_13008, 1
  store i32 %v6_13008, i32* %r3.global-to-local, align 4
  %v0_1300c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_13018.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1300c.pr, label %dec_label_pc_13014, label %.thread

.thread:                                          ; preds = %bb
  %v2_1300c = add i32 %v0_13018.pr.pre, -1
  store i32 %v2_1300c, i32* @r2, align 4
  %v1_13004 = urem i32 %v6_13008, 4
  %v2_13004 = icmp eq i32 %v1_13004, 0
  store i1 %v2_13004, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13004, label %dec_label_pc_13014, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_13008.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_13008.pre to i8
  br label %bb

dec_label_pc_13014:                               ; preds = %.thread, %bb, %dec_label_pc_12ffc
  %v0_1302028 = phi i32 [ %tmp, %dec_label_pc_12ffc ], [ %v6_13008, %bb ], [ %v6_13008, %.thread ]
  %v0_13018.pr = phi i32 [ %v0_12ff4, %dec_label_pc_12ffc ], [ %v0_13018.pr.pre, %bb ], [ %v2_1300c, %.thread ]
  %v0_13014 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13014, i32* %ip.global-to-local, align 4
  %v8_1301810 = icmp eq i32 %v0_13018.pr, 8
  store i1 %v8_1301810, i1* %cpsr_z.global-to-local, align 1
  %v5_1301c11 = icmp slt i32 %v0_13018.pr, 8
  br i1 %v5_1301c11, label %dec_label_pc_13058, label %dec_label_pc_13020.preheader

dec_label_pc_13020.preheader:                     ; preds = %dec_label_pc_13014
  %v1_1302046 = inttoptr i32 %v0_1302028 to i32*
  store i32 %v0_13014, i32* %v1_1302046, align 4
  %v3_1302047 = add i32 %v0_1302028, 4
  %v4_1302048 = inttoptr i32 %v3_1302047 to i32*
  %v5_1302049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1302049, i32* %v4_1302048, align 4
  %v6_1302050 = add i32 %v0_1302028, 8
  store i32 %v6_1302050, i32* %r3.global-to-local, align 4
  %v0_1302451 = load i32, i32* @r2, align 4
  %v1_1302452 = add i32 %v0_1302451, -8
  store i32 %v1_1302452, i32* %r2.global-to-local, align 4
  %v5_1302c53 = icmp slt i32 %v1_1302452, 8
  br i1 %v5_1302c53, label %dec_label_pc_13020.dec_label_pc_13058.loopexit_crit_edge, label %dec_label_pc_13030

dec_label_pc_13030:                               ; preds = %dec_label_pc_13020.preheader, %dec_label_pc_13018.dec_label_pc_13020_crit_edge
  %v6_1302055 = phi i32 [ %v6_13020, %dec_label_pc_13018.dec_label_pc_13020_crit_edge ], [ %v6_1302050, %dec_label_pc_13020.preheader ]
  %v0_1302054 = phi i32 [ %v12_1304c, %dec_label_pc_13018.dec_label_pc_13020_crit_edge ], [ %v0_1302028, %dec_label_pc_13020.preheader ]
  %v1_13030 = inttoptr i32 %v6_1302055 to i32*
  %v2_13030 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13030, i32* %v1_13030, align 4
  %v3_13030 = add i32 %v0_1302054, 12
  %v4_13030 = inttoptr i32 %v3_13030 to i32*
  %v5_13030 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13030, i32* %v4_13030, align 4
  %v6_13030 = add i32 %v0_1302054, 16
  store i32 %v6_13030, i32* %r3.global-to-local, align 4
  %v0_13034 = load i32, i32* %r2.global-to-local, align 4
  %v1_13034 = add i32 %v0_13034, -8
  store i32 %v1_13034, i32* %r2.global-to-local, align 4
  %v5_1303c = icmp slt i32 %v1_13034, 8
  br i1 %v5_1303c, label %dec_label_pc_13030.dec_label_pc_13058.loopexit_crit_edge, label %dec_label_pc_13040

dec_label_pc_13040:                               ; preds = %dec_label_pc_13030
  %v1_13040 = inttoptr i32 %v6_13030 to i32*
  %v2_13040 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13040, i32* %v1_13040, align 4
  %v3_13040 = add i32 %v0_1302054, 20
  %v4_13040 = inttoptr i32 %v3_13040 to i32*
  %v5_13040 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13040, i32* %v4_13040, align 4
  %v6_13040 = add i32 %v0_1302054, 24
  store i32 %v6_13040, i32* %r3.global-to-local, align 4
  %v0_13044 = load i32, i32* %r2.global-to-local, align 4
  %v1_13044 = add i32 %v0_13044, -8
  store i32 %v1_13044, i32* %r2.global-to-local, align 4
  %v5_1304c = icmp slt i32 %v1_13044, 8
  br i1 %v5_1304c, label %dec_label_pc_13040.dec_label_pc_13058.loopexit_crit_edge, label %dec_label_pc_13018

dec_label_pc_13018:                               ; preds = %dec_label_pc_13040
  %v7_1304c = inttoptr i32 %v6_13040 to i32*
  %v8_1304c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1304c, i32* %v7_1304c, align 4
  %v9_1304c = add i32 %v0_1302054, 28
  %v10_1304c = inttoptr i32 %v9_1304c to i32*
  %v11_1304c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1304c, i32* %v10_1304c, align 4
  %v12_1304c = add i32 %v0_1302054, 32
  store i32 %v12_1304c, i32* %r3.global-to-local, align 4
  %v6_13050 = load i32, i32* %r2.global-to-local, align 4
  %v7_13050 = add i32 %v6_13050, -8
  store i32 %v7_13050, i32* %r2.global-to-local, align 4
  %v5_1301c = icmp slt i32 %v7_13050, 8
  br i1 %v5_1301c, label %dec_label_pc_13018.dec_label_pc_13058.loopexit_crit_edge, label %dec_label_pc_13018.dec_label_pc_13020_crit_edge

dec_label_pc_13018.dec_label_pc_13020_crit_edge:  ; preds = %dec_label_pc_13018
  %v2_13020.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13020 = inttoptr i32 %v12_1304c to i32*
  store i32 %v2_13020.pre, i32* %v1_13020, align 4
  %v3_13020 = add i32 %v0_1302054, 36
  %v4_13020 = inttoptr i32 %v3_13020 to i32*
  %v5_13020 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13020, i32* %v4_13020, align 4
  %v6_13020 = add i32 %v0_1302054, 40
  store i32 %v6_13020, i32* %r3.global-to-local, align 4
  %v0_13024 = load i32, i32* %r2.global-to-local, align 4
  %v1_13024 = add i32 %v0_13024, -8
  store i32 %v1_13024, i32* %r2.global-to-local, align 4
  %v5_1302c = icmp slt i32 %v1_13024, 8
  br i1 %v5_1302c, label %dec_label_pc_13020.dec_label_pc_13058.loopexit_crit_edge, label %dec_label_pc_13030

dec_label_pc_13020.dec_label_pc_13058.loopexit_crit_edge: ; preds = %dec_label_pc_13018.dec_label_pc_13020_crit_edge, %dec_label_pc_13020.preheader
  %v1_13024.lcssa = phi i32 [ %v1_1302452, %dec_label_pc_13020.preheader ], [ %v1_13024, %dec_label_pc_13018.dec_label_pc_13020_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13058

dec_label_pc_13018.dec_label_pc_13058.loopexit_crit_edge: ; preds = %dec_label_pc_13018
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13058

dec_label_pc_13030.dec_label_pc_13058.loopexit_crit_edge: ; preds = %dec_label_pc_13030
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13058

dec_label_pc_13040.dec_label_pc_13058.loopexit_crit_edge: ; preds = %dec_label_pc_13040
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13058

dec_label_pc_13058:                               ; preds = %dec_label_pc_13014, %dec_label_pc_13020.dec_label_pc_13058.loopexit_crit_edge, %dec_label_pc_13018.dec_label_pc_13058.loopexit_crit_edge, %dec_label_pc_13030.dec_label_pc_13058.loopexit_crit_edge, %dec_label_pc_13040.dec_label_pc_13058.loopexit_crit_edge, %dec_label_pc_12ff0
  %v0_13060 = phi i32 [ %v0_12ff4, %dec_label_pc_12ff0 ], [ %v1_13044, %dec_label_pc_13040.dec_label_pc_13058.loopexit_crit_edge ], [ %v1_13034, %dec_label_pc_13030.dec_label_pc_13058.loopexit_crit_edge ], [ %v7_13050, %dec_label_pc_13018.dec_label_pc_13058.loopexit_crit_edge ], [ %v1_13024.lcssa, %dec_label_pc_13020.dec_label_pc_13058.loopexit_crit_edge ], [ %v0_13018.pr, %dec_label_pc_13014 ]
  %v2_13058 = icmp eq i32 %v0_13060, 0
  store i1 %v2_13058, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13058, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_13058
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_13058
  %v1_13060 = sub i32 7, %v0_13060
  store i32 %v1_13060, i32* %r2.global-to-local, align 4
  %v3_13064 = mul i32 %v1_13060, 4
  %v4_13064 = add i32 %v3_13064, ptrtoint (i32* @global_var_1306c.582 to i32)
  call void @__pseudo_branch(i32 %v4_13064)
  %v0_1306c = load i32, i32* %r1.global-to-local, align 4
  %v1_1306c = trunc i32 %v0_1306c to i8
  %v2_1306c = load i32, i32* %r3.global-to-local, align 4
  %v3_1306c = inttoptr i32 %v2_1306c to i8*
  store i8 %v1_1306c, i8* %v3_1306c, align 1
  %v4_1306c = load i32, i32* %r3.global-to-local, align 4
  %v5_1306c = add i32 %v4_1306c, 1
  store i32 %v5_1306c, i32* %r3.global-to-local, align 4
  %v0_13070 = load i32, i32* %r1.global-to-local, align 4
  %v1_13070 = trunc i32 %v0_13070 to i8
  %v3_13070 = inttoptr i32 %v5_1306c to i8*
  store i8 %v1_13070, i8* %v3_13070, align 1
  %v4_13070 = load i32, i32* %r3.global-to-local, align 4
  %v5_13070 = add i32 %v4_13070, 1
  store i32 %v5_13070, i32* %r3.global-to-local, align 4
  %v0_13074 = load i32, i32* %r1.global-to-local, align 4
  %v1_13074 = trunc i32 %v0_13074 to i8
  %v3_13074 = inttoptr i32 %v5_13070 to i8*
  store i8 %v1_13074, i8* %v3_13074, align 1
  %v4_13074 = load i32, i32* %r3.global-to-local, align 4
  %v5_13074 = add i32 %v4_13074, 1
  store i32 %v5_13074, i32* %r3.global-to-local, align 4
  %v0_13078 = load i32, i32* %r1.global-to-local, align 4
  %v1_13078 = trunc i32 %v0_13078 to i8
  %v3_13078 = inttoptr i32 %v5_13074 to i8*
  store i8 %v1_13078, i8* %v3_13078, align 1
  %v4_13078 = load i32, i32* %r3.global-to-local, align 4
  %v5_13078 = add i32 %v4_13078, 1
  store i32 %v5_13078, i32* %r3.global-to-local, align 4
  %v0_1307c = load i32, i32* %r1.global-to-local, align 4
  %v1_1307c = trunc i32 %v0_1307c to i8
  %v3_1307c = inttoptr i32 %v5_13078 to i8*
  store i8 %v1_1307c, i8* %v3_1307c, align 1
  %v4_1307c = load i32, i32* %r3.global-to-local, align 4
  %v5_1307c = add i32 %v4_1307c, 1
  store i32 %v5_1307c, i32* %r3.global-to-local, align 4
  %v0_13080 = load i32, i32* %r1.global-to-local, align 4
  %v1_13080 = trunc i32 %v0_13080 to i8
  %v3_13080 = inttoptr i32 %v5_1307c to i8*
  store i8 %v1_13080, i8* %v3_13080, align 1
  %v4_13080 = load i32, i32* %r3.global-to-local, align 4
  %v5_13080 = add i32 %v4_13080, 1
  store i32 %v5_13080, i32* %r3.global-to-local, align 4
  %v0_13084 = load i32, i32* %r1.global-to-local, align 4
  %v1_13084 = trunc i32 %v0_13084 to i8
  %v3_13084 = inttoptr i32 %v5_13080 to i8*
  store i8 %v1_13084, i8* %v3_13084, align 1
  %v4_13084 = load i32, i32* %r3.global-to-local, align 4
  %v5_13084 = add i32 %v4_13084, 1
  store i32 %v5_13084, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_13020, { 1, 0 }
  uselistorder i32 %v12_1304c, { 1, 2, 0 }
  uselistorder i32 %v0_1302054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_13018.pr, { 0, 2, 1 }
  uselistorder i32 %v6_13008, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_12ffc, { 1, 0 }
  uselistorder i32 %v0_12ff4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13058, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_13030, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_13090(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_13090:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_13090 = sub i32 %arg1, %tmp
  %v1_13094 = add i32 %v2_13090, -1
  store i32 %v1_13094, i32* %r2.global-to-local, align 4
  %v2_130984 = load i8, i8* %arg2, align 1
  %v5_130986 = add i32 %tmp, 1
  store i32 %v5_130986, i32* %r1.global-to-local, align 4
  %v2_1309c7 = icmp eq i8 %v2_130984, 0
  store i1 %v2_1309c7, i1* %cpsr_z.global-to-local, align 1
  %v5_130a08 = inttoptr i32 %arg1 to i8*
  store i8 %v2_130984, i8* %v5_130a08, align 1
  %v0_130a49 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_130a49, label %dec_label_pc_130a8, label %dec_label_pc_13098.dec_label_pc_13098_crit_edge

dec_label_pc_13098.dec_label_pc_13098_crit_edge:  ; preds = %dec_label_pc_13090, %dec_label_pc_13098.dec_label_pc_13098_crit_edge
  %v0_13098.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_130a0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13098 = inttoptr i32 %v0_13098.pre to i8*
  %v2_13098 = load i8, i8* %v1_13098, align 1
  %v5_13098 = add i32 %v0_13098.pre, 1
  store i32 %v5_13098, i32* %r1.global-to-local, align 4
  %v2_1309c = icmp eq i8 %v2_13098, 0
  store i1 %v2_1309c, i1* %cpsr_z.global-to-local, align 1
  %v4_130a0 = add i32 %v5_13098, %v3_130a0.pre
  %v5_130a0 = inttoptr i32 %v4_130a0 to i8*
  store i8 %v2_13098, i8* %v5_130a0, align 1
  %v0_130a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_130a4, label %dec_label_pc_130a8, label %dec_label_pc_13098.dec_label_pc_13098_crit_edge

dec_label_pc_130a8:                               ; preds = %dec_label_pc_13098.dec_label_pc_13098_crit_edge, %dec_label_pc_13090
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 2, 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13098.dec_label_pc_13098_crit_edge, { 1, 0 }
}

define i32 @function_130ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_130ac:
  %stack_var_-8 = alloca i32, align 4
  %v2_130b0 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_130b0, i32* @r1, align 4
  %v0_130b8 = call i32 @function_14ef0()
  %v2_130bc = icmp eq i32 %v0_130b8, 0
  br i1 %v2_130bc, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_130ac
  %v3_130c4 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_130ac, %bb
  %v5_130cc = phi i32 [ -1, %dec_label_pc_130ac ], [ %v3_130c4, %bb ]
  ret i32 %v5_130cc

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_130d0(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_130d0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_130d0 = load i32, i32* @r4, align 4
  store i32 %v3_130d0, i32* %stack_var_-8, align 4
  %v5_130d4 = inttoptr i32 %arg3 to i32*
  %v6_130d4 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_130d4)
  store i32 %v6_130d4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_130d4, -4095
  br i1 %tmp, label %dec_label_pc_130f4, label %dec_label_pc_130e4

dec_label_pc_130e4:                               ; preds = %dec_label_pc_130d0
  %v0_130e4 = call i32 @function_12f88()
  %v0_130e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_130e8 = sub i32 0, %v0_130e8
  %v2_130ec = inttoptr i32 %v0_130e4 to i32*
  store i32 %v1_130e8, i32* %v2_130ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_130f4

dec_label_pc_130f4:                               ; preds = %dec_label_pc_130d0, %dec_label_pc_130e4
  %v0_130f4 = phi i32 [ %v6_130d4, %dec_label_pc_130d0 ], [ -1, %dec_label_pc_130e4 ]
  %v2_130f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_130f8, i32* @r4, align 4
  ret i32 %v0_130f4

; uselistorder directives
  uselistorder i32 %v6_130d4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_130f4, { 1, 0 }
}

define i32 @function_130fc(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_130fc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_130fc = load i32, i32* @r4, align 4
  store i32 %v3_130fc, i32* %stack_var_-8, align 4
  %v5_13100 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13100, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13100, -4095
  br i1 %tmp, label %dec_label_pc_13120, label %dec_label_pc_13110

dec_label_pc_13110:                               ; preds = %dec_label_pc_130fc
  %v0_13110 = call i32 @function_12f88()
  %v0_13114 = load i32, i32* %r4.global-to-local, align 4
  %v1_13114 = sub i32 0, %v0_13114
  %v2_13118 = inttoptr i32 %v0_13110 to i32*
  store i32 %v1_13114, i32* %v2_13118, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13120

dec_label_pc_13120:                               ; preds = %dec_label_pc_130fc, %dec_label_pc_13110
  %v0_13120 = phi i32 [ %v5_13100, %dec_label_pc_130fc ], [ -1, %dec_label_pc_13110 ]
  %v2_13124 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13124, i32* @r4, align 4
  ret i32 %v0_13120

; uselistorder directives
  uselistorder i32 %v5_13100, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13120, { 1, 0 }
}

define i32 @function_13128(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13128:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13128 = load i32, i32* @r4, align 4
  store i32 %v3_13128, i32* %stack_var_-8, align 4
  %v5_1312c = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_1312c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_1312c, -4095
  br i1 %tmp, label %dec_label_pc_1314c, label %dec_label_pc_1313c

dec_label_pc_1313c:                               ; preds = %dec_label_pc_13128
  %v0_1313c = call i32 @function_12f88()
  %v0_13140 = load i32, i32* %r4.global-to-local, align 4
  %v1_13140 = sub i32 0, %v0_13140
  %v2_13144 = inttoptr i32 %v0_1313c to i32*
  store i32 %v1_13140, i32* %v2_13144, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1314c

dec_label_pc_1314c:                               ; preds = %dec_label_pc_13128, %dec_label_pc_1313c
  %v0_1314c = phi i32 [ %v5_1312c, %dec_label_pc_13128 ], [ -1, %dec_label_pc_1313c ]
  %v2_13150 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13150, i32* @r4, align 4
  ret i32 %v0_1314c

; uselistorder directives
  uselistorder i32 %v5_1312c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1314c, { 1, 0 }
}

define i32 @function_13154(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13154:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13154 = load i32, i32* @r4, align 4
  store i32 %v3_13154, i32* %stack_var_-8, align 4
  %v5_13158 = inttoptr i32 %arg3 to i32*
  %v6_13158 = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_13158)
  store i32 %v6_13158, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13158, -4095
  br i1 %tmp, label %dec_label_pc_13178, label %dec_label_pc_13168

dec_label_pc_13168:                               ; preds = %dec_label_pc_13154
  %v0_13168 = call i32 @function_12f88()
  %v0_1316c = load i32, i32* %r4.global-to-local, align 4
  %v1_1316c = sub i32 0, %v0_1316c
  %v2_13170 = inttoptr i32 %v0_13168 to i32*
  store i32 %v1_1316c, i32* %v2_13170, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13178

dec_label_pc_13178:                               ; preds = %dec_label_pc_13154, %dec_label_pc_13168
  %v0_13178 = phi i32 [ %v6_13158, %dec_label_pc_13154 ], [ -1, %dec_label_pc_13168 ]
  %v2_1317c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1317c, i32* @r4, align 4
  ret i32 %v0_13178

; uselistorder directives
  uselistorder i32 %v6_13158, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13178, { 1, 0 }
}

define i32 @function_13180(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13180:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13180 = load i32, i32* @r4, align 4
  store i32 %v3_13180, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13188 = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_13188, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13188, -4095
  br i1 %tmp, label %dec_label_pc_131a8, label %dec_label_pc_13198

dec_label_pc_13198:                               ; preds = %dec_label_pc_13180
  %v0_13198 = call i32 @function_12f88()
  %v0_1319c = load i32, i32* %r4.global-to-local, align 4
  %v1_1319c = sub i32 0, %v0_1319c
  %v2_131a0 = inttoptr i32 %v0_13198 to i32*
  store i32 %v1_1319c, i32* %v2_131a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_131a8

dec_label_pc_131a8:                               ; preds = %dec_label_pc_13180, %dec_label_pc_13198
  %v0_131a8 = phi i32 [ %v5_13188, %dec_label_pc_13180 ], [ -1, %dec_label_pc_13198 ]
  %v2_131ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_131ac, i32* @r4, align 4
  ret i32 %v0_131a8

; uselistorder directives
  uselistorder i32 %v5_13188, { 1, 0, 2 }
  uselistorder label %dec_label_pc_131a8, { 1, 0 }
}

define i32 @function_131b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_131b0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_131b0 = load i32, i32* @r4, align 4
  store i32 %v3_131b0, i32* %stack_var_-8, align 4
  %v2_131b4 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_131b4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_131b4, -4095
  br i1 %tmp, label %dec_label_pc_131d4, label %dec_label_pc_131c4

dec_label_pc_131c4:                               ; preds = %dec_label_pc_131b0
  %v0_131c4 = call i32 @function_12f88()
  %v0_131c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_131c8 = sub i32 0, %v0_131c8
  %v2_131cc = inttoptr i32 %v0_131c4 to i32*
  store i32 %v1_131c8, i32* %v2_131cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_131d4

dec_label_pc_131d4:                               ; preds = %dec_label_pc_131b0, %dec_label_pc_131c4
  %v0_131d4 = phi i32 [ %v2_131b4, %dec_label_pc_131b0 ], [ -1, %dec_label_pc_131c4 ]
  %v2_131d8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_131d8, i32* @r4, align 4
  ret i32 %v0_131d4

; uselistorder directives
  uselistorder i32 %v2_131b4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_131d4, { 1, 0 }
}

define i32 @function_131dc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_131dc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_131dc = load i32, i32* @r4, align 4
  store i32 %v3_131dc, i32* %stack_var_-8, align 4
  %v5_131e0 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_131e0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_131e0, -4095
  br i1 %tmp, label %dec_label_pc_13200, label %dec_label_pc_131f0

dec_label_pc_131f0:                               ; preds = %dec_label_pc_131dc
  %v0_131f0 = call i32 @function_12f88()
  %v0_131f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_131f4 = sub i32 0, %v0_131f4
  %v2_131f8 = inttoptr i32 %v0_131f0 to i32*
  store i32 %v1_131f4, i32* %v2_131f8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13200

dec_label_pc_13200:                               ; preds = %dec_label_pc_131dc, %dec_label_pc_131f0
  %v0_13200 = phi i32 [ %v5_131e0, %dec_label_pc_131dc ], [ -1, %dec_label_pc_131f0 ]
  %v2_13204 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13204, i32* @r4, align 4
  ret i32 %v0_13200

; uselistorder directives
  uselistorder i32 %v5_131e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13200, { 1, 0 }
}

define i32 @function_13208(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13208:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13208 = load i32, i32* @r4, align 4
  store i32 %v3_13208, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13214 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_13214, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13214, -4095
  br i1 %tmp, label %dec_label_pc_13234, label %dec_label_pc_13224

dec_label_pc_13224:                               ; preds = %dec_label_pc_13208
  %v0_13224 = call i32 @function_12f88()
  %v0_13228 = load i32, i32* %r4.global-to-local, align 4
  %v1_13228 = sub i32 0, %v0_13228
  %v2_1322c = inttoptr i32 %v0_13224 to i32*
  store i32 %v1_13228, i32* %v2_1322c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13234

dec_label_pc_13234:                               ; preds = %dec_label_pc_13208, %dec_label_pc_13224
  %v0_13234 = phi i32 [ %v5_13214, %dec_label_pc_13208 ], [ -1, %dec_label_pc_13224 ]
  %v2_13238 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13238, i32* @r4, align 4
  ret i32 %v0_13234

; uselistorder directives
  uselistorder i32 %v5_13214, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13234, { 1, 0 }
}

define i32 @function_1323c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1323c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1323c = load i32, i32* @r4, align 4
  store i32 %v3_1323c, i32* %stack_var_-8, align 4
  %v5_13240 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13240, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13240, -4095
  br i1 %tmp, label %dec_label_pc_13260, label %dec_label_pc_13250

dec_label_pc_13250:                               ; preds = %dec_label_pc_1323c
  %v0_13250 = call i32 @function_12f88()
  %v0_13254 = load i32, i32* %r4.global-to-local, align 4
  %v1_13254 = sub i32 0, %v0_13254
  %v2_13258 = inttoptr i32 %v0_13250 to i32*
  store i32 %v1_13254, i32* %v2_13258, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13260

dec_label_pc_13260:                               ; preds = %dec_label_pc_1323c, %dec_label_pc_13250
  %v0_13260 = phi i32 [ %v5_13240, %dec_label_pc_1323c ], [ -1, %dec_label_pc_13250 ]
  %v2_13264 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13264, i32* @r4, align 4
  ret i32 %v0_13260

; uselistorder directives
  uselistorder i32 %v5_13240, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13260, { 1, 0 }
}

define i32 @function_13268(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13268:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13268 = load i32, i32* @r4, align 4
  store i32 %v3_13268, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13274 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_13274, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13274, -4095
  br i1 %tmp, label %dec_label_pc_13294, label %dec_label_pc_13284

dec_label_pc_13284:                               ; preds = %dec_label_pc_13268
  %v0_13284 = call i32 @function_12f88()
  %v0_13288 = load i32, i32* %r4.global-to-local, align 4
  %v1_13288 = sub i32 0, %v0_13288
  %v2_1328c = inttoptr i32 %v0_13284 to i32*
  store i32 %v1_13288, i32* %v2_1328c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13294

dec_label_pc_13294:                               ; preds = %dec_label_pc_13268, %dec_label_pc_13284
  %v0_13294 = phi i32 [ %v5_13274, %dec_label_pc_13268 ], [ -1, %dec_label_pc_13284 ]
  %v2_13298 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13298, i32* @r4, align 4
  ret i32 %v0_13294

; uselistorder directives
  uselistorder i32 %v5_13274, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13294, { 1, 0 }
}

define i32 @function_1329c(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1329c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1329c = load i32, i32* @r4, align 4
  store i32 %v3_1329c, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_132a4 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_132a4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_132a4, -4095
  br i1 %tmp, label %dec_label_pc_132c4, label %dec_label_pc_132b4

dec_label_pc_132b4:                               ; preds = %dec_label_pc_1329c
  %v0_132b4 = call i32 @function_12f88()
  %v0_132b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_132b8 = sub i32 0, %v0_132b8
  %v2_132bc = inttoptr i32 %v0_132b4 to i32*
  store i32 %v1_132b8, i32* %v2_132bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_132c4

dec_label_pc_132c4:                               ; preds = %dec_label_pc_1329c, %dec_label_pc_132b4
  %v0_132c4 = phi i32 [ %v5_132a4, %dec_label_pc_1329c ], [ -1, %dec_label_pc_132b4 ]
  %v2_132c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_132c8, i32* @r4, align 4
  ret i32 %v0_132c4

; uselistorder directives
  uselistorder i32 %v5_132a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_132c4, { 1, 0 }
}

define i32 @function_132cc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_132cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_132cc = load i32, i32* @r4, align 4
  store i32 %v3_132cc, i32* %stack_var_-8, align 4
  %v3_132d0 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_132d0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_132d0, -4095
  br i1 %tmp, label %dec_label_pc_132f0, label %dec_label_pc_132e0

dec_label_pc_132e0:                               ; preds = %dec_label_pc_132cc
  %v0_132e0 = call i32 @function_12f88()
  %v0_132e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_132e4 = sub i32 0, %v0_132e4
  %v2_132e8 = inttoptr i32 %v0_132e0 to i32*
  store i32 %v1_132e4, i32* %v2_132e8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_132f0

dec_label_pc_132f0:                               ; preds = %dec_label_pc_132cc, %dec_label_pc_132e0
  %v0_132f0 = phi i32 [ %v3_132d0, %dec_label_pc_132cc ], [ -1, %dec_label_pc_132e0 ]
  %v2_132f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_132f4, i32* @r4, align 4
  ret i32 %v0_132f0

; uselistorder directives
  uselistorder i32 %v3_132d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_132f0, { 1, 0 }
}

define i32 @function_132f8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_132f8:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_13314, label %dec_label_pc_13304

dec_label_pc_13304:                               ; preds = %dec_label_pc_132f8
  %v8_13308 = icmp sgt i32 %arg1, 64
  br i1 %v8_13308, label %dec_label_pc_13314, label %dec_label_pc_1330c

dec_label_pc_1330c:                               ; preds = %dec_label_pc_13304
  %v0_13310 = call i32 @function_1341c()
  br label %dec_label_pc_13314

dec_label_pc_13314:                               ; preds = %dec_label_pc_13304, %dec_label_pc_132f8, %dec_label_pc_1330c
  %v0_13314 = call i32 @function_12f88()
  %v2_1331c = inttoptr i32 %v0_13314 to i32*
  store i32 22, i32* %v2_1331c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13314, { 2, 0, 1 }
}

define i32 @function_13328(i32 %arg1) local_unnamed_addr {
dec_label_pc_13328:
  store i32 128, i32* @r2, align 4
  %v0_13334 = load i32, i32* @r0, align 4
  %v2_13334 = inttoptr i32 %v0_13334 to i8*
  %v3_13334 = call i32 @function_12ff0(i8* %v2_13334, i32 0)
  ret i32 0
}

define i32 @function_13340(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13340:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13340 = load i32, i32* @r4, align 4
  store i32 %v3_13340, i32* %stack_var_-12, align 4
  %v6_13340 = load i32, i32* @r5, align 4
  %v10_13340 = ptrtoint i32* %stack_var_-12 to i32
  %v7_13344 = icmp eq i32 %arg2, -1
  %v0_13350.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_13344, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_13340
  br label %dec_label_pc_13368

bb:                                               ; preds = %dec_label_pc_13340
  %v2_1334c = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_13350.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_13350.pre, 1
  br i1 %tmp19, label %dec_label_pc_13368, label %dec_label_pc_13358

dec_label_pc_13358:                               ; preds = %bb
  %v7_1335c = icmp sgt i32 %v0_13350.pre, 64
  br i1 %v7_1335c, label %dec_label_pc_13368, label %bb20

bb20:                                             ; preds = %dec_label_pc_13358
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_1338c24 = add i32 %v10_13340, 124
  store i32 %v5_1338c24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1337c

dec_label_pc_13368:                               ; preds = %.thread, %dec_label_pc_13358, %bb
  %v0_13368 = call i32 @function_12f88()
  store i32 %v0_13368, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13374 = inttoptr i32 %v0_13368 to i32*
  store i32 22, i32* %v2_13374, align 4
  %v0_133e8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_133e8

dec_label_pc_1337c:                               ; preds = %bb20, %dec_label_pc_1337c
  %v5_1338c25 = phi i32 [ %v5_1338c24, %bb20 ], [ %v5_1338c, %dec_label_pc_1337c ]
  %v2_13380 = add i32 %v5_1338c25, -136
  %v3_13380 = inttoptr i32 %v2_13380 to i32*
  store i32 0, i32* %v3_13380, align 4
  %v0_13384.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_13384 = add i32 %v0_13384.pre, -1
  store i32 %v1_13384, i32* %r0.global-to-local, align 4
  %v6_13384 = icmp slt i32 %v1_13384, 0
  %v4_1338c = mul i32 %v1_13384, 4
  %v5_1338c = add i32 %v4_1338c, %v10_13340
  store i32 %v5_1338c, i32* %r2.global-to-local, align 4
  br i1 %v6_13384, label %dec_label_pc_13394, label %dec_label_pc_1337c

dec_label_pc_13394:                               ; preds = %dec_label_pc_1337c
  %v2_13394 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_13394, i32* @r5, align 4
  %v2_13398 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_13398, i32* @r0, align 4
  %v0_1339c = load i32, i32* @r4, align 4
  store i32 %v0_1339c, i32* @r1, align 4
  %v0_133a0 = call i32 @function_1341c()
  store i32 %v0_133a0, i32* %r0.global-to-local, align 4
  %v1_133a4 = icmp slt i32 %v0_133a0, 0
  br i1 %v1_133a4, label %dec_label_pc_133e4, label %dec_label_pc_133ac

dec_label_pc_133ac:                               ; preds = %dec_label_pc_13394
  %v0_133ac = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1df5c.584 to i32), i32* %r0.global-to-local, align 4
  %v2_133b4 = call i32 @function_133f8(i32 ptrtoint (i32* @global_var_1df5c.584 to i32), i32 %v0_133ac)
  store i32 %v2_1334c, i32* %r2.global-to-local, align 4
  %v0_133cc = load i32, i32* @r4, align 4
  store i32 %v0_133cc, i32* %r0.global-to-local, align 4
  %v4_133d4 = call i32 @function_14138(i32 %v0_133cc, i32* nonnull %stack_var_-152, i32 %v2_1334c)
  store i32 %v4_133d4, i32* %r0.global-to-local, align 4
  %v1_133d8 = icmp slt i32 %v4_133d4, 0
  br i1 %v1_133d8, label %dec_label_pc_133e4, label %bb23

bb23:                                             ; preds = %dec_label_pc_133ac
  %v5_133dc = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_133dc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_133e8

dec_label_pc_133e4:                               ; preds = %dec_label_pc_133ac, %dec_label_pc_13394
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_133e8

dec_label_pc_133e8:                               ; preds = %bb23, %dec_label_pc_13368, %dec_label_pc_133e4
  %v0_133e8 = phi i32 [ %v5_133dc, %bb23 ], [ %v0_133e8.pre, %dec_label_pc_13368 ], [ -1, %dec_label_pc_133e4 ]
  store i32 %v0_133e8, i32* %r0.global-to-local, align 4
  %v2_133f0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_133f0, i32* @r4, align 4
  store i32 %v6_13340, i32* @r5, align 4
  ret i32 %v0_133e8

; uselistorder directives
  uselistorder i32 %v0_133e8, { 1, 0 }
  uselistorder i32 %v5_1338c, { 1, 0 }
  uselistorder i32 %v1_13384, { 0, 2, 1 }
  uselistorder i32 %v2_1334c, { 1, 0 }
  uselistorder i32 %v0_13350.pre, { 1, 0, 2 }
  uselistorder i32 %v10_13340, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_133e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1337c, { 1, 0 }
  uselistorder label %dec_label_pc_13368, { 1, 2, 0 }
}

define i32 @function_133f8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_133f8:
  %v1_133f8 = add i32 %arg2, -1
  %v3_133fc = udiv i32 %v1_133f8, 32
  %v4_13400 = mul nuw nsw i32 %v3_133fc, 4
  %v5_13400 = add i32 %v4_13400, %arg1
  %v6_13400 = inttoptr i32 %v5_13400 to i32*
  %v7_13400 = load i32, i32* %v6_13400, align 4
  %v1_13404 = urem i32 %v1_133f8, 32
  %v7_1340c = shl i32 1, %v1_13404
  %v8_1340c = and i32 %v7_13400, %v7_1340c
  %v10_1340c = icmp ne i32 %v8_1340c, 0
  %. = zext i1 %v10_1340c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_133f8, { 1, 0 }
}

define i32 @function_1341c() local_unnamed_addr {
dec_label_pc_1341c:
  %v0_1341c = load i32, i32* @r1, align 4
  %v1_1341c = add i32 %v0_1341c, -1
  %v3_13420 = udiv i32 %v1_1341c, 32
  %v0_13424 = load i32, i32* @r0, align 4
  %v4_13424 = mul nuw nsw i32 %v3_13420, 4
  %v5_13424 = add i32 %v0_13424, %v4_13424
  %v6_13424 = inttoptr i32 %v5_13424 to i32*
  %v7_13424 = load i32, i32* %v6_13424, align 4
  %v1_13428 = urem i32 %v1_1341c, 32
  %v7_13430 = shl i32 1, %v1_13428
  %v8_13430 = or i32 %v7_13424, %v7_13430
  store i32 %v8_13430, i32* %v6_13424, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1341c, { 1, 0 }
}

define i32 @function_13440(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13440:
  %v1_13440 = add i32 %arg2, -1
  %v3_13444 = udiv i32 %v1_13440, 32
  %v4_13448 = mul nuw nsw i32 %v3_13444, 4
  %v5_13448 = add i32 %v4_13448, %arg1
  %v6_13448 = inttoptr i32 %v5_13448 to i32*
  %v7_13448 = load i32, i32* %v6_13448, align 4
  %v1_1344c = urem i32 %v1_13440, 32
  %tmp = shl i32 -1, %v1_1344c
  %v8_13454 = add i32 %tmp, -1
  %v9_13454 = and i32 %v7_13448, %v8_13454
  store i32 %v9_13454, i32* %v6_13448, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_13440, { 1, 0 }
}

define i32 @function_13464(i32 %arg1) local_unnamed_addr {
dec_label_pc_13464:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13464 = load i32, i32* @r4, align 4
  %v6_13464 = load i32, i32* @r5, align 4
  %v9_13464 = load i32, i32* @r6, align 4
  %v0_13468 = load i32, i32* %r0.global-to-local, align 4
  %v2_13468 = icmp eq i32 %v0_13468, 0
  %v2_1346c = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_13468, label %bb, label %dec_label_pc_13478

bb:                                               ; preds = %dec_label_pc_13464
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13480

dec_label_pc_13478:                               ; preds = %dec_label_pc_13464
  %tmp = icmp ugt i32 %v0_13468, -8
  br i1 %tmp, label %dec_label_pc_13584, label %dec_label_pc_13480

dec_label_pc_13480:                               ; preds = %bb, %dec_label_pc_13478
  %v0_13480 = phi i32 [ %v0_13468, %dec_label_pc_13478 ], [ 1, %bb ]
  %v1_13480 = add i32 %v0_13480, 4
  store i32 %v1_13480, i32* %stack_var_-20, align 4
  store i32 %v2_1346c, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1dcf8.586 to i32), i32* %r0.global-to-local, align 4
  %v1_13498 = call i32 @function_13e4c()
  store i32 ptrtoint (i32** @global_var_1db38.590 to i32), i32* %r0.global-to-local, align 4
  %v3_134a4 = call i32 @function_13818(i32* bitcast (i32** @global_var_1db38.590 to i32*), i32 %v2_1346c)
  store i32 %v3_134a4, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dcf8.586 to i32), i32* %r0.global-to-local, align 4
  store i32 79036, i32* @lr, align 4
  %v1_134b8 = call i32 @function_13e4c()
  store i32 %v1_134b8, i32* %r0.global-to-local, align 4
  %v2_134bc = icmp eq i32 %v3_134a4, 0
  br i1 %v2_134bc, label %dec_label_pc_134c4, label %dec_label_pc_13574

dec_label_pc_134c4:                               ; preds = %dec_label_pc_13480
  %v2_134c8 = load i32, i32* @global_var_1dd20.593, align 4
  store i32 %v2_134c8, i32* @r4, align 4
  %v2_134cc = load i32, i32* %stack_var_-20, align 4
  %v3_134d0 = icmp ult i32 %v2_134cc, %v2_134c8
  br i1 %v3_134d0, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_134c4
  %v3_134d4 = add i32 %v2_134c8, -1
  %v2_134d8 = add i32 %v3_134d4, %v2_134cc
  %v2_134dc = sub i32 0, %v2_134c8
  %v3_134e0 = and i32 %v2_134d8, %v2_134dc
  store i32 %v3_134e0, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_134c4, %bb14
  store i32 ptrtoint (i32* @global_var_1dfdc.595 to i32), i32* %r0.global-to-local, align 4
  %v1_134ec = call i32 @function_13e4c()
  %v0_134f0 = load i32, i32* @r4, align 4
  store i32 %v0_134f0, i32* %r0.global-to-local, align 4
  %v1_134f4 = call i32 @function_14600(i32 %v0_134f0)
  store i32 %v1_134f4, i32* %r0.global-to-local, align 4
  %v7_134f8 = icmp eq i32 %v1_134f4, -1
  br i1 %v7_134f8, label %bb15, label %dec_label_pc_13504

bb15:                                             ; preds = %.thread3
  store i32 %v1_134f4, i32* @r5, align 4
  br label %dec_label_pc_13518

dec_label_pc_13504:                               ; preds = %.thread3
  %v1_13504 = add i32 %v1_134f4, 3
  %v1_13508 = and i32 %v1_13504, -4
  store i32 %v1_13508, i32* @r5, align 4
  %v9_1350c = icmp eq i32 %v1_13508, %v1_134f4
  br i1 %v9_1350c, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_13504
  %v3_13510 = sub i32 %v1_13508, %v1_134f4
  store i32 %v3_13510, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_13504, %bb16
  %v1_13514 = xor i1 %v9_1350c, true
  call void @__pseudo_cond_branch(i1 %v1_13514, i32 ptrtoint (i32* @global_var_14600.596 to i32))
  br label %dec_label_pc_13518

dec_label_pc_13518:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1dfdc.595 to i32), i32* %r0.global-to-local, align 4
  store i32 79144, i32* @lr, align 4
  %v1_13524 = call i32 @function_13e4c()
  store i32 %v1_13524, i32* %r0.global-to-local, align 4
  %v0_13528 = load i32, i32* @r5, align 4
  %v7_13528 = icmp eq i32 %v0_13528, -1
  br i1 %v7_13528, label %dec_label_pc_13584, label %dec_label_pc_13530

dec_label_pc_13530:                               ; preds = %dec_label_pc_13518
  store i32 ptrtoint (i32* @global_var_1dcf8.586 to i32), i32* %r0.global-to-local, align 4
  %v1_1353c = call i32 @function_13e4c()
  %v0_13540 = load i32, i32* @r4, align 4
  %v0_13544 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1db38.590 to i32), i32* %r0.global-to-local, align 4
  %v4_1354c = call i32 @function_1396c(i32* bitcast (i32** @global_var_1db38.590 to i32*), i32 %v0_13544, i32 %v0_13540)
  store i32 ptrtoint (i32** @global_var_1db38.590 to i32), i32* %r0.global-to-local, align 4
  %v3_13558 = call i32 @function_13818(i32* bitcast (i32** @global_var_1db38.590 to i32*), i32 %v2_1346c)
  store i32 %v3_13558, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dcf8.586 to i32), i32* %r0.global-to-local, align 4
  store i32 79212, i32* @lr, align 4
  %v1_13568 = call i32 @function_13e4c()
  store i32 %v1_13568, i32* %r0.global-to-local, align 4
  %v2_1356c = icmp eq i32 %v3_13558, 0
  br i1 %v2_1356c, label %dec_label_pc_13584, label %dec_label_pc_13574

dec_label_pc_13574:                               ; preds = %dec_label_pc_13480, %dec_label_pc_13530
  %v1_13578 = phi i32 [ %v3_134a4, %dec_label_pc_13480 ], [ %v3_13558, %dec_label_pc_13530 ]
  %v2_13574 = load i32, i32* %stack_var_-20, align 4
  %v2_13578 = inttoptr i32 %v1_13578 to i32*
  store i32 %v2_13574, i32* %v2_13578, align 4
  %v3_13578 = load i32, i32* %r4.global-to-local, align 4
  %v4_13578 = add i32 %v3_13578, 4
  store i32 %v4_13578, i32* %r4.global-to-local, align 4
  %v2_1357c = icmp eq i32 %v4_13578, 0
  br i1 %v2_1357c, label %dec_label_pc_13584, label %dec_label_pc_13594

dec_label_pc_13584:                               ; preds = %dec_label_pc_13574, %dec_label_pc_13530, %dec_label_pc_13518, %dec_label_pc_13478
  %v0_13584 = call i32 @function_12f88()
  store i32 %v0_13584, i32* %r0.global-to-local, align 4
  %v2_1358c = inttoptr i32 %v0_13584 to i32*
  store i32 12, i32* %v2_1358c, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13594

dec_label_pc_13594:                               ; preds = %dec_label_pc_13574, %dec_label_pc_13584
  %v0_13594 = phi i32 [ %v4_13578, %dec_label_pc_13574 ], [ 0, %dec_label_pc_13584 ]
  store i32 %v0_13594, i32* %r0.global-to-local, align 4
  store i32 %v3_13464, i32* @r4, align 4
  store i32 %v6_13464, i32* @r5, align 4
  store i32 %v9_13464, i32* @r6, align 4
  ret i32 %v0_13594

; uselistorder directives
  uselistorder i32 %v0_13594, { 1, 0 }
  uselistorder i32 %v3_13558, { 1, 0, 2 }
  uselistorder i32 %v1_13508, { 1, 0, 2 }
  uselistorder i32 %v1_134f4, { 3, 0, 4, 2, 1, 5 }
  uselistorder i32 %v3_134a4, { 1, 0, 2 }
  uselistorder i32 %v0_13468, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 6, 8, 4, 7, 9, 10, 11, 3, 13, 12, 5, 15, 14, 2, 16, 17, 18, 19, 0, 1 }
  uselistorder label %dec_label_pc_13594, { 1, 0 }
  uselistorder label %dec_label_pc_13574, { 1, 0 }
  uselistorder label %dec_label_pc_13518, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_13480, { 1, 0 }
}

define i32 @function_135b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_135b8:
  %stack_var_-12 = alloca i32, align 4
  %v3_135b8 = load i32, i32* @r4, align 4
  store i32 %v3_135b8, i32* %stack_var_-12, align 4
  %v6_135b8 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_135c0 = mul i32 %arg2, %arg1
  store i32 %v2_135c0, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_135c4 = icmp eq i32 %arg1, 0
  store i32 %v2_135c0, i32* @r0, align 4
  br i1 %v2_135c4, label %dec_label_pc_135f0, label %dec_label_pc_135d0

dec_label_pc_135d0:                               ; preds = %dec_label_pc_135b8
  %v0_135d0 = call i32 @function_12658()
  %v0_135d4 = load i32, i32* @r5, align 4
  %v9_135d4 = icmp eq i32 %v0_135d4, %v0_135d0
  store i32 0, i32* @r5, align 4
  br i1 %v9_135d4, label %dec_label_pc_135d0.dec_label_pc_135f0_crit_edge, label %dec_label_pc_135e0

dec_label_pc_135d0.dec_label_pc_135f0_crit_edge:  ; preds = %dec_label_pc_135d0
  %v0_135f0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_135f0

dec_label_pc_135e0:                               ; preds = %dec_label_pc_135d0
  %v0_135e0 = call i32 @function_12f88()
  %v2_135e8 = inttoptr i32 %v0_135e0 to i32*
  store i32 12, i32* %v2_135e8, align 4
  br label %dec_label_pc_13608

dec_label_pc_135f0:                               ; preds = %dec_label_pc_135d0.dec_label_pc_135f0_crit_edge, %dec_label_pc_135b8
  %v0_135f0 = phi i32 [ %v0_135f0.pre, %dec_label_pc_135d0.dec_label_pc_135f0_crit_edge ], [ %v2_135c0, %dec_label_pc_135b8 ]
  %v1_135f4 = call i32 @function_13464(i32 %v0_135f0)
  store i32 %v1_135f4, i32* @r5, align 4
  %v0_135fc = load i32, i32* @r4, align 4
  store i32 %v0_135fc, i32* @r2, align 4
  store i32 79368, i32* @lr, align 4
  %v1_13604 = icmp ne i32 %v1_135f4, 0
  call void @__pseudo_cond_branch(i1 %v1_13604, i32 ptrtoint (i32* @global_var_12ff0.597 to i32))
  br label %dec_label_pc_13608

dec_label_pc_13608:                               ; preds = %dec_label_pc_135e0, %dec_label_pc_135f0
  %v0_13608 = load i32, i32* @r5, align 4
  %v2_1360c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1360c, i32* @r4, align 4
  store i32 %v6_135b8, i32* @r5, align 4
  ret i32 %v0_13608

; uselistorder directives
  uselistorder i32 ()* @function_12658, { 2, 3, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13608, { 1, 0 }
}

define i32 @function_13610() local_unnamed_addr {
dec_label_pc_13610:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_13610 = load i32, i32* @r0, align 4
  %v2_13610 = icmp eq i32 %v0_13610, 0
  %v3_13614 = load i32, i32* @r4, align 4
  store i32 %v3_13614, i32* %stack_var_-24, align 4
  %v6_13614 = load i32, i32* @r5, align 4
  %v9_13614 = load i32, i32* @r6, align 4
  %v15_13614 = load i32, i32* @r8, align 4
  br i1 %v2_13610, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_13610
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_13610
  %v1_1361c = add i32 %v0_13610, -4
  %v2_1361c = inttoptr i32 %v1_1361c to i32*
  %v3_1361c = load i32, i32* %v2_1361c, align 4
  store i32 %v3_1361c, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1db38.590 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_1361c, i32* @r4, align 4
  %v1_13634 = call i32 @function_13e4c()
  %v0_13638 = load i32, i32* @r4, align 4
  %v0_1363c = load i32, i32* @r5, align 4
  %v4_13644 = call i32 @function_1396c(i32* bitcast (i32** @global_var_1db38.590 to i32*), i32 %v0_13638, i32 %v0_1363c)
  %v1_1364c = inttoptr i32 %v4_13644 to i32*
  %v2_1364c = load i32, i32* %v1_1364c, align 4
  store i32 %v2_1364c, i32* %r6.global-to-local, align 4
  %v2_13650 = load i32, i32* @global_var_1dd20.593, align 4
  %v4_13654 = mul i32 %v2_13650, 8
  %v6_13654 = icmp ult i32 %v2_1364c, %v4_13654
  store i32 %v4_13644, i32* @r4, align 4
  br i1 %v6_13654, label %dec_label_pc_13694, label %dec_label_pc_13660

dec_label_pc_13660:                               ; preds = %bb11
  %v1_13668 = call i32 @function_13e4c()
  %v1_13670 = call i32 @function_14600(i32 0)
  %v0_13674 = load i32, i32* @r4, align 4
  %v1_13674 = add i32 %v0_13674, 12
  store i32 %v1_13674, i32* @r5, align 4
  %v9_13678 = icmp eq i32 %v1_13674, %v1_13670
  br i1 %v9_13678, label %dec_label_pc_1369c, label %dec_label_pc_13680

dec_label_pc_13680:                               ; preds = %dec_label_pc_13660
  %v1_1368c = call i32 @function_13e4c()
  br label %dec_label_pc_13694

dec_label_pc_13694:                               ; preds = %bb11, %dec_label_pc_13680, %bb14
  %v2_13694 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13694, i32* @r4, align 4
  store i32 %v6_13614, i32* @r5, align 4
  store i32 %v9_13614, i32* %r6.global-to-local, align 4
  store i32 %v15_13614, i32* %r8.global-to-local, align 4
  %v0_13698 = call i32 @function_13e4c()
  %v0_1369c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1369c

dec_label_pc_1369c:                               ; preds = %dec_label_pc_13660, %dec_label_pc_13694
  %v1_136a4 = phi i32 [ %v0_13674, %dec_label_pc_13660 ], [ %v0_1369c.pre, %dec_label_pc_13694 ]
  %v1_1369c = add i32 %v1_136a4, 4
  %v2_1369c = inttoptr i32 %v1_1369c to i32*
  %v3_1369c = load i32, i32* %v2_1369c, align 4
  %v2_136a0 = icmp eq i32 %v3_1369c, 0
  br i1 %v2_136a0, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_1369c
  %v2_136a4 = add i32 %v1_136a4, 8
  %v3_136a4 = inttoptr i32 %v2_136a4 to i32*
  %v4_136a4 = load i32, i32* %v3_136a4, align 4
  %v3_136a8 = add i32 %v3_1369c, 8
  %v4_136a8 = inttoptr i32 %v3_136a8 to i32*
  store i32 %v4_136a4, i32* %v4_136a8, align 4
  %v0_136ac.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1369c, %bb12
  %v0_136ac = phi i32 [ %v1_136a4, %dec_label_pc_1369c ], [ %v0_136ac.pre, %bb12 ]
  %v1_136ac = add i32 %v0_136ac, 8
  %v2_136ac = inttoptr i32 %v1_136ac to i32*
  %v3_136ac = load i32, i32* %v2_136ac, align 4
  %v1_136b0 = add i32 %v0_136ac, 4
  %v2_136b0 = inttoptr i32 %v1_136b0 to i32*
  %v3_136b0 = load i32, i32* %v2_136b0, align 4
  %v2_136b4 = icmp eq i32 %v3_136ac, 0
  br i1 %v2_136b4, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_136b8 = add i32 %v3_136ac, 4
  %v4_136b8 = inttoptr i32 %v3_136b8 to i32*
  store i32 %v3_136b0, i32* %v4_136b8, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_136bc = load i32, i32* %r8.global-to-local, align 4
  %v3_136bc = inttoptr i32 %v2_136bc to i32*
  store i32 %v3_136b0, i32* %v3_136bc, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_136cc = call i32 @function_13e4c()
  %v0_136d0 = load i32, i32* %r6.global-to-local, align 4
  %v1_136d0 = load i32, i32* @r4, align 4
  %v0_136d8 = load i32, i32* @r5, align 4
  %v2_136d0 = sub i32 12, %v0_136d0
  %v1_136d4 = add i32 %v2_136d0, %v1_136d0
  %v2_136d8 = sub i32 %v1_136d4, %v0_136d8
  %v1_136dc = call i32 @function_14600(i32 %v2_136d8)
  br label %dec_label_pc_13694

; uselistorder directives
  uselistorder i32 %v0_136ac, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_14600, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_1369c, { 1, 0 }
  uselistorder label %dec_label_pc_13694, { 2, 1, 0 }
}

define i32 @function_13700(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13700:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_13700 = load i32, i32* @r4, align 4
  store i32 %v3_13700, i32* %stack_var_-24, align 4
  %v6_13700 = load i32, i32* @r5, align 4
  %v9_13700 = load i32, i32* @r6, align 4
  %v12_13700 = load i32, i32* @r7, align 4
  %v15_13700 = load i32, i32* @r8, align 4
  %v18_13700 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_13704 = icmp eq i32 %arg2, 0
  %v0_13708 = load i32, i32* @r0, align 4
  store i32 %v0_13708, i32* @r7, align 4
  br i1 %v2_13704, label %dec_label_pc_13710, label %dec_label_pc_13718

dec_label_pc_13710:                               ; preds = %dec_label_pc_13700
  %v0_13710 = call i32 @function_13610()
  %v0_13720.pre = load i32, i32* @r4, align 4
  %v2_13724.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_13720

dec_label_pc_13718:                               ; preds = %dec_label_pc_13700
  %v2_13718 = icmp eq i32 %v0_13708, 0
  br i1 %v2_13718, label %dec_label_pc_13720, label %dec_label_pc_1372c

dec_label_pc_13720:                               ; preds = %dec_label_pc_13718, %dec_label_pc_13710
  %v2_13724 = phi i32 [ %v3_13700, %dec_label_pc_13718 ], [ %v2_13724.pre, %dec_label_pc_13710 ]
  %v0_13720 = phi i32 [ %arg2, %dec_label_pc_13718 ], [ %v0_13720.pre, %dec_label_pc_13710 ]
  store i32 %v2_13724, i32* @r4, align 4
  store i32 %v6_13700, i32* @r5, align 4
  store i32 %v9_13700, i32* @r6, align 4
  store i32 %v12_13700, i32* @r7, align 4
  store i32 %v18_13700, i32* @lr, align 4
  %v1_13728 = call i32 @function_13464(i32 %v0_13720)
  %v0_1372c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1372c

dec_label_pc_1372c:                               ; preds = %dec_label_pc_13718, %dec_label_pc_13720
  %v0_13744 = phi i32 [ %v0_13708, %dec_label_pc_13718 ], [ %v1_13728, %dec_label_pc_13720 ]
  %v0_1372c = phi i32 [ %arg2, %dec_label_pc_13718 ], [ %v0_1372c.pre, %dec_label_pc_13720 ]
  %v1_1372c = add i32 %v0_1372c, 7
  %v1_13730 = and i32 %v1_1372c, -4
  store i32 %v1_13730, i32* @r5, align 4
  %v2_13734 = icmp ugt i32 %v1_13730, 10
  %v1_13738 = add i32 %v0_13744, -4
  %v2_13738 = inttoptr i32 %v1_13738 to i32*
  %v3_13738 = load i32, i32* %v2_13738, align 4
  store i32 %v3_13738, i32* @r6, align 4
  br i1 %v2_13734, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_1372c
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_1372c, %bb
  %v0_137c0 = phi i32 [ %v1_13730, %dec_label_pc_1372c ], [ 12, %bb ]
  store i32 %v1_13738, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_137c0, %v3_13738
  br i1 %tmp, label %dec_label_pc_1374c, label %dec_label_pc_137c0

dec_label_pc_1374c:                               ; preds = %bb14
  %v2_13740 = sub i32 %v0_137c0, %v3_13738
  %v1_1375c = call i32 @function_13e4c()
  %v0_13764 = load i32, i32* @r8, align 4
  %v1_13764 = load i32, i32* @r6, align 4
  %v2_13764 = add i32 %v1_13764, %v0_13764
  %v4_1376c = call i32 @function_138ac(i32* bitcast (i32** @global_var_1db38.590 to i32*), i32 %v2_13764, i32 %v2_13740)
  store i32 %v4_1376c, i32* @r4, align 4
  store i32 79748, i32* @lr, align 4
  %v1_13780 = call i32 @function_13e4c()
  %v0_13784 = load i32, i32* @r4, align 4
  %v2_13784 = icmp eq i32 %v0_13784, 0
  br i1 %v2_13784, label %dec_label_pc_13794, label %.thread

.thread:                                          ; preds = %dec_label_pc_1374c
  %v1_13788 = load i32, i32* @r6, align 4
  %v3_13788 = add i32 %v1_13788, %v0_13784
  %v2_1378c = load i32, i32* @r7, align 4
  %v3_1378c = add i32 %v2_1378c, -4
  %v4_1378c = inttoptr i32 %v3_1378c to i32*
  store i32 %v3_13788, i32* %v4_1378c, align 4
  br label %dec_label_pc_13800

dec_label_pc_13794:                               ; preds = %dec_label_pc_1374c
  %v0_13794 = load i32, i32* @r5, align 4
  %v1_13794 = add i32 %v0_13794, -4
  %v1_13798 = call i32 @function_13464(i32 %v1_13794)
  store i32 %v1_13798, i32* @r0, align 4
  store i32 %v1_13798, i32* @r4, align 4
  %v2_1379c = icmp eq i32 %v1_13798, 0
  br i1 %v2_1379c, label %dec_label_pc_137b8, label %dec_label_pc_137a4

dec_label_pc_137a4:                               ; preds = %dec_label_pc_13794
  %v0_137a4 = load i32, i32* @r6, align 4
  %v1_137a4 = add i32 %v0_137a4, -4
  store i32 %v1_137a4, i32* @r2, align 4
  %v0_137a8 = load i32, i32* @r7, align 4
  store i32 %v0_137a8, i32* @r1, align 4
  %v3_137ac = call i32 @function_12fd0(i32 %v1_13798, i32 %v0_137a8, i32 %v1_137a4)
  %v0_137b0 = load i32, i32* @r7, align 4
  store i32 %v0_137b0, i32* @r0, align 4
  %v0_137b4 = call i32 @function_13610()
  %v0_137b8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_137b8

dec_label_pc_137b8:                               ; preds = %dec_label_pc_13794, %dec_label_pc_137a4
  %v0_137b8 = phi i32 [ 0, %dec_label_pc_13794 ], [ %v0_137b8.pre, %dec_label_pc_137a4 ]
  store i32 %v0_137b8, i32* @r7, align 4
  br label %dec_label_pc_13800

dec_label_pc_137c0:                               ; preds = %bb14
  %v1_137c0 = add i32 %v0_137c0, 28
  %tmp15 = icmp ugt i32 %v1_137c0, %v3_13738
  br i1 %tmp15, label %dec_label_pc_13800, label %dec_label_pc_137cc

dec_label_pc_137cc:                               ; preds = %dec_label_pc_137c0
  %v1_137d8 = call i32 @function_13e4c()
  %v0_137dc = load i32, i32* @r8, align 4
  %v1_137dc = load i32, i32* @r5, align 4
  %v2_137dc = add i32 %v1_137dc, %v0_137dc
  %v1_137e0 = load i32, i32* @r6, align 4
  %v2_137e0 = sub i32 %v1_137e0, %v1_137dc
  %v4_137e8 = call i32 @function_1396c(i32* bitcast (i32** @global_var_1db38.590 to i32*), i32 %v2_137dc, i32 %v2_137e0)
  store i32 79868, i32* @lr, align 4
  %v1_137f8 = call i32 @function_13e4c()
  %v0_137fc = load i32, i32* @r5, align 4
  %v1_137fc = load i32, i32* @r7, align 4
  %v2_137fc = add i32 %v1_137fc, -4
  %v3_137fc = inttoptr i32 %v2_137fc to i32*
  store i32 %v0_137fc, i32* %v3_137fc, align 4
  br label %dec_label_pc_13800

dec_label_pc_13800:                               ; preds = %.thread, %dec_label_pc_137c0, %dec_label_pc_137b8, %dec_label_pc_137cc
  %v0_13800 = load i32, i32* @r7, align 4
  %v2_13804 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13804, i32* @r4, align 4
  store i32 %v6_13700, i32* @r5, align 4
  store i32 %v9_13700, i32* @r6, align 4
  store i32 %v12_13700, i32* @r7, align 4
  store i32 %v15_13700, i32* @r8, align 4
  ret i32 %v0_13800

; uselistorder directives
  uselistorder i32 %v1_137dc, { 1, 0 }
  uselistorder i32 %v0_137c0, { 1, 2, 0 }
  uselistorder i32 %v3_13738, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1db38.590, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1db38.590 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_13464, { 1, 67, 0, 3, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2 }
  uselistorder i32 ()* @function_13610, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32* @r8, { 95, 96, 97, 98, 99, 114, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 38, 2, 39, 3, 40, 41, 42, 43, 44, 45, 46, 48, 47, 49, 50, 51, 53, 54, 52, 55, 56, 57, 58, 60, 59, 61, 62, 63, 65, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 87, 88, 89, 90, 92, 93, 94, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 179, 182, 183, 184, 185, 186, 187, 188, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120 }
  uselistorder i32* @r7, { 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 7, 8, 9, 15, 16, 17, 3, 6, 24, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 25, 1, 64, 65, 66, 67, 68, 69, 70, 71, 207, 208, 209, 210, 72, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 2, 5, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 198, 199, 200, 201, 203, 204, 205, 206, 211, 212, 213, 214, 219, 215, 216, 217, 218, 220, 221, 222, 223, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 4, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251 }
  uselistorder label %dec_label_pc_13800, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_137b8, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_1372c, { 1, 0 }
}

define i32 @function_13818(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13818:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_13818 = inttoptr i32 %arg2 to i32*
  %v2_13818 = load i32, i32* %v1_13818, align 4
  %v3_1381c = load i32, i32* @r4, align 4
  store i32 %v3_1381c, i32* %stack_var_-8, align 4
  %v1_13820 = add i32 %v2_13818, 3
  %v1_13824 = and i32 %v1_13820, -4
  store i32 %v1_13824, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_1382c = icmp ugt i32 %v1_13824, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_13834 = load i32, i32* %arg1, align 4
  store i32 %v2_13834, i32* %r0.global-to-local, align 4
  br i1 %v2_1382c, label %dec_label_pc_138a0.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_13818
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_138a0.preheader

dec_label_pc_138a0.preheader:                     ; preds = %dec_label_pc_13818, %bb
  %v1_13854 = phi i32 [ %v1_13824, %dec_label_pc_13818 ], [ 12, %bb ]
  %v2_138a09 = icmp eq i32 %v2_13834, 0
  br i1 %v2_138a09, label %dec_label_pc_138a8, label %dec_label_pc_13840

dec_label_pc_13840:                               ; preds = %dec_label_pc_138a0.preheader, %dec_label_pc_1389c
  %v2_13858 = phi i32 [ %v3_1389c, %dec_label_pc_1389c ], [ %v2_13834, %dec_label_pc_138a0.preheader ]
  %v1_13840 = inttoptr i32 %v2_13858 to i32*
  %v2_13840 = load i32, i32* %v1_13840, align 4
  store i32 %v2_13840, i32* @ip, align 4
  %v3_13844 = icmp ult i32 %v2_13840, %v1_13854
  br i1 %v3_13844, label %dec_label_pc_1389c, label %dec_label_pc_1384c

dec_label_pc_1384c:                               ; preds = %dec_label_pc_13840
  %v1_1384c = add i32 %v1_13854, 44
  %v3_13850 = icmp ult i32 %v2_13840, %v1_1384c
  br i1 %v3_13850, label %dec_label_pc_13860, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_1384c
  %v2_13844.le = sub i32 %v2_13840, %v1_13854
  store i32 %v2_13844.le, i32* %v1_13840, align 4
  %v0_1388c.pre = load i32, i32* @ip, align 4
  %v0_13894.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_13860:                               ; preds = %dec_label_pc_1384c
  %v1_13860 = add i32 %v2_13858, 4
  %v2_13860 = inttoptr i32 %v1_13860 to i32*
  %v3_13860 = load i32, i32* %v2_13860, align 4
  store i32 %v3_13860, i32* %r2.global-to-local, align 4
  %v2_13864 = icmp eq i32 %v3_13860, 0
  br i1 %v2_13864, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_13860
  %v2_13868 = add i32 %v2_13858, 8
  %v3_13868 = inttoptr i32 %v2_13868 to i32*
  %v4_13868 = load i32, i32* %v3_13868, align 4
  %v3_1386c = add i32 %v3_13860, 8
  %v4_1386c = inttoptr i32 %v3_1386c to i32*
  store i32 %v4_13868, i32* %v4_1386c, align 4
  %v0_13870.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13860, %bb27
  %v0_13870 = phi i32 [ %v2_13858, %dec_label_pc_13860 ], [ %v0_13870.pre, %bb27 ]
  %v1_13870 = add i32 %v0_13870, 8
  %v2_13870 = inttoptr i32 %v1_13870 to i32*
  %v3_13870 = load i32, i32* %v2_13870, align 4
  %v1_13874 = add i32 %v0_13870, 4
  %v2_13874 = inttoptr i32 %v1_13874 to i32*
  %v3_13874 = load i32, i32* %v2_13874, align 4
  %v2_13878 = icmp eq i32 %v3_13870, 0
  br i1 %v2_13878, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_1387c = add i32 %v3_13870, 4
  %v4_1387c = inttoptr i32 %v3_1387c to i32*
  store i32 %v3_13874, i32* %v4_1387c, align 4
  %v1_13884 = load i32, i32* @ip, align 4
  store i32 %v1_13884, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_13880 = load i32, i32* %r1.global-to-local, align 4
  %v3_13880 = inttoptr i32 %v2_13880 to i32*
  store i32 %v3_13874, i32* %v3_13880, align 4
  %v1_13888.pre = load i32, i32* @ip, align 4
  store i32 %v1_13888.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_13894 = phi i32 [ %v0_13894.pre, %.thread._crit_edge ], [ %v1_13884, %bb28 ], [ %v1_13888.pre, %.thread5 ]
  %v0_1388c = phi i32 [ %v0_1388c.pre, %.thread._crit_edge ], [ %v1_13884, %bb28 ], [ %v1_13888.pre, %.thread5 ]
  %v1_1388c = load i32, i32* %r0.global-to-local, align 4
  %v2_1388c = sub i32 %v1_1388c, %v0_1388c
  %v1_13890 = add i32 %v2_1388c, 12
  store i32 %v1_13890, i32* %r0.global-to-local, align 4
  %v1_13894 = load i32, i32* %r4.global-to-local, align 4
  %v2_13894 = inttoptr i32 %v1_13894 to i32*
  store i32 %v0_13894, i32* %v2_13894, align 4
  %v2_13898 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13898, i32* %r4.global-to-local, align 4
  ret i32 %v1_13890

dec_label_pc_1389c:                               ; preds = %dec_label_pc_13840
  %v1_1389c = add i32 %v2_13858, 4
  %v2_1389c = inttoptr i32 %v1_1389c to i32*
  %v3_1389c = load i32, i32* %v2_1389c, align 4
  store i32 %v3_1389c, i32* %r0.global-to-local, align 4
  %v2_138a0 = icmp eq i32 %v3_1389c, 0
  br i1 %v2_138a0, label %dec_label_pc_138a0.dec_label_pc_138a8_crit_edge, label %dec_label_pc_13840

dec_label_pc_138a0.dec_label_pc_138a8_crit_edge:  ; preds = %dec_label_pc_1389c
  br label %dec_label_pc_138a8

dec_label_pc_138a8:                               ; preds = %dec_label_pc_138a0.dec_label_pc_138a8_crit_edge, %dec_label_pc_138a0.preheader
  store i32 %v3_1381c, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_1389c, { 1, 2, 0 }
  uselistorder i32 %v0_13870, { 1, 0 }
  uselistorder i32 %v2_13840, { 1, 0, 2, 3 }
  uselistorder i32 %v2_13858, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_13854, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_13840, { 1, 0 }
  uselistorder label %dec_label_pc_138a0.preheader, { 1, 0 }
}

define i32 @function_138ac(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_138ac:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_138b0 = load i32, i32* %arg1, align 4
  store i32 %v2_138b0, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_139286 = icmp eq i32 %v2_138b0, 0
  br i1 %v2_139286, label %dec_label_pc_13930, label %dec_label_pc_138bc

dec_label_pc_138bc:                               ; preds = %dec_label_pc_138ac, %dec_label_pc_13924
  %v0_138fc = phi i32 [ %v3_13924, %dec_label_pc_13924 ], [ %v2_138b0, %dec_label_pc_138ac ]
  %v1_138bc = inttoptr i32 %v0_138fc to i32*
  %v2_138bc = load i32, i32* %v1_138bc, align 4
  store i32 %v2_138bc, i32* %r0.global-to-local, align 4
  %v2_138c0 = sub i32 %v0_138fc, %v2_138bc
  %v1_138c4 = add i32 %v2_138c0, 12
  %v3_138c8 = icmp uge i32 %v1_138c4, %arg2
  %v9_138c8 = icmp eq i32 %v1_138c4, %arg2
  %v2_138cc = xor i1 %v9_138c8, true
  %v3_138cc = and i1 %v3_138c8, %v2_138cc
  br i1 %v3_138cc, label %dec_label_pc_13924, label %dec_label_pc_138d0

dec_label_pc_138d0:                               ; preds = %dec_label_pc_138bc
  br i1 %v9_138c8, label %dec_label_pc_138d4, label %dec_label_pc_13930

dec_label_pc_138d4:                               ; preds = %dec_label_pc_138d0
  %v1_138d4 = add i32 %arg3, 3
  %v1_138d8 = and i32 %v1_138d4, -4
  store i32 %v1_138d8, i32* %r2.global-to-local, align 4
  %v2_138dc = sub i32 %v2_138bc, %v1_138d8
  %v3_138dc = icmp ult i32 %v2_138bc, %v1_138d8
  br i1 %v3_138dc, label %dec_label_pc_13930, label %dec_label_pc_138e4

dec_label_pc_138e4:                               ; preds = %dec_label_pc_138d4
  %v1_138e4 = add i32 %v1_138d8, 44
  %v3_138e8 = icmp ult i32 %v2_138bc, %v1_138e4
  br i1 %v3_138e8, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_138e4
  store i32 %v2_138dc, i32* %v1_138bc, align 4
  %v1_138f4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_138f4, i32* %r0.global-to-local, align 4
  ret i32 %v1_138f4

.thread2:                                         ; preds = %dec_label_pc_138e4
  %v1_138fc = add i32 %v0_138fc, 4
  %v2_138fc = inttoptr i32 %v1_138fc to i32*
  %v3_138fc = load i32, i32* %v2_138fc, align 4
  store i32 %v3_138fc, i32* %r2.global-to-local, align 4
  %v2_13900 = icmp eq i32 %v3_138fc, 0
  br i1 %v2_13900, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_13904 = add i32 %v0_138fc, 8
  %v3_13904 = inttoptr i32 %v2_13904 to i32*
  %v4_13904 = load i32, i32* %v3_13904, align 4
  %v3_13908 = add i32 %v3_138fc, 8
  %v4_13908 = inttoptr i32 %v3_13908 to i32*
  store i32 %v4_13904, i32* %v4_13908, align 4
  %v0_1390c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_1390c = phi i32 [ %v0_138fc, %.thread2 ], [ %v0_1390c.pre, %bb17 ]
  %v1_1390c = add i32 %v0_1390c, 8
  %v2_1390c = inttoptr i32 %v1_1390c to i32*
  %v3_1390c = load i32, i32* %v2_1390c, align 4
  store i32 %v3_1390c, i32* %r2.global-to-local, align 4
  %v1_13910 = add i32 %v0_1390c, 4
  %v2_13910 = inttoptr i32 %v1_13910 to i32*
  %v3_13910 = load i32, i32* %v2_13910, align 4
  %v2_13914 = icmp eq i32 %v3_1390c, 0
  br i1 %v2_13914, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_13918 = add i32 %v3_1390c, 4
  %v4_13918 = inttoptr i32 %v3_13918 to i32*
  store i32 %v3_13910, i32* %v4_13918, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_1391c = load i32, i32* %lr.global-to-local, align 4
  %v3_1391c = inttoptr i32 %v2_1391c to i32*
  store i32 %v3_13910, i32* %v3_1391c, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_13920 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_13920

dec_label_pc_13924:                               ; preds = %dec_label_pc_138bc
  %v1_13924 = add i32 %v0_138fc, 4
  %v2_13924 = inttoptr i32 %v1_13924 to i32*
  %v3_13924 = load i32, i32* %v2_13924, align 4
  store i32 %v3_13924, i32* %ip.global-to-local, align 4
  %v2_13928 = icmp eq i32 %v3_13924, 0
  br i1 %v2_13928, label %dec_label_pc_13928.dec_label_pc_13930.loopexit_crit_edge, label %dec_label_pc_138bc

dec_label_pc_13928.dec_label_pc_13930.loopexit_crit_edge: ; preds = %dec_label_pc_13924
  br label %dec_label_pc_13930

dec_label_pc_13930:                               ; preds = %dec_label_pc_138d4, %dec_label_pc_138ac, %dec_label_pc_13928.dec_label_pc_13930.loopexit_crit_edge, %dec_label_pc_138d0
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_13924, { 1, 2, 0 }
  uselistorder i32 %v0_1390c, { 1, 0 }
  uselistorder i32 %v1_138d8, { 0, 2, 1, 3 }
  uselistorder i1 %v9_138c8, { 1, 0 }
  uselistorder i32 %v2_138bc, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_138fc, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_13930, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_138bc, { 1, 0 }
}

define i32 @function_13938() local_unnamed_addr {
dec_label_pc_13938:
  %v0_13938 = load i32, i32* @r2, align 4
  %v2_13938 = icmp eq i32 %v0_13938, 0
  %v0_1393c = load i32, i32* @r3, align 4
  %v1_1393c = load i32, i32* @r1, align 4
  %v2_1393c = add i32 %v1_1393c, 4
  %v3_1393c = inttoptr i32 %v2_1393c to i32*
  store i32 %v0_1393c, i32* %v3_1393c, align 4
  %v0_13940 = load i32, i32* @r2, align 4
  %v1_13940 = load i32, i32* @r1, align 4
  %v2_13940 = add i32 %v1_13940, 8
  %v3_13940 = inttoptr i32 %v2_13940 to i32*
  store i32 %v0_13940, i32* %v3_13940, align 4
  %v1_13948 = load i32, i32* @r1, align 4
  br i1 %v2_13938, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13938
  %v2_13944 = load i32, i32* @r2, align 4
  %v3_13944 = add i32 %v2_13944, 4
  %v4_13944 = inttoptr i32 %v3_13944 to i32*
  store i32 %v1_13948, i32* %v4_13944, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_13938
  %v2_13948 = load i32, i32* @r0, align 4
  %v3_13948 = inttoptr i32 %v2_13948 to i32*
  store i32 %v1_13948, i32* %v3_13948, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_1394c = load i32, i32* @r3, align 4
  %v2_1394c = icmp eq i32 %v0_1394c, 0
  br i1 %v2_1394c, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_13950 = load i32, i32* @r1, align 4
  %v3_13950 = add i32 %v0_1394c, 8
  %v4_13950 = inttoptr i32 %v3_13950 to i32*
  store i32 %v1_13950, i32* %v4_13950, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_13954 = load i32, i32* @r0, align 4
  ret i32 %v1_13954

; uselistorder directives
  uselistorder i32 %v1_13948, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_13958() local_unnamed_addr {
dec_label_pc_13958:
  %v0_13958 = load i32, i32* @r2, align 4
  %v2_13958 = icmp eq i32 %v0_13958, 0
  %v1_1395c = load i32, i32* @r1, align 4
  br i1 %v2_13958, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13958
  %v2_1395c = load i32, i32* @r0, align 4
  %v3_1395c = inttoptr i32 %v2_1395c to i32*
  store i32 %v1_1395c, i32* %v3_1395c, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_13958
  %v3_13960 = add i32 %v0_13958, 4
  %v4_13960 = inttoptr i32 %v3_13960 to i32*
  store i32 %v1_1395c, i32* %v4_13960, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_13964 = load i32, i32* @r2, align 4
  %v1_13964 = load i32, i32* @r1, align 4
  %v2_13964 = add i32 %v1_13964, 8
  %v3_13964 = inttoptr i32 %v2_13964 to i32*
  store i32 %v0_13964, i32* %v3_13964, align 4
  %v1_13968 = load i32, i32* @r0, align 4
  ret i32 %v1_13968

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_1396c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1396c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1396c = load i32, i32* @r4, align 4
  store i32 %v3_1396c, i32* %stack_var_-20, align 4
  %v2_13970 = load i32, i32* %arg1, align 4
  store i32 %v2_13970, i32* %r4.global-to-local, align 4
  %v2_13974 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_139902 = icmp eq i32 %v2_13970, 0
  br i1 %v2_139902, label %dec_label_pc_13a40, label %dec_label_pc_13980

dec_label_pc_13980:                               ; preds = %dec_label_pc_1396c, %dec_label_pc_13988
  %v0_139d0 = phi i32 [ %v0_139d8, %dec_label_pc_13988 ], [ 0, %dec_label_pc_1396c ]
  %v0_139d8 = phi i32 [ %v3_1398c, %dec_label_pc_13988 ], [ %v2_13970, %dec_label_pc_1396c ]
  %v1_139945.in = phi i32 [ %v3_1398c, %dec_label_pc_13988 ], [ %v2_13970, %dec_label_pc_1396c ]
  %v1_139945 = add i32 %v1_139945.in, 12
  %v3_13980 = icmp ult i32 %v1_139945, %arg2
  br i1 %v3_13980, label %dec_label_pc_13988, label %dec_label_pc_139a0

dec_label_pc_13988:                               ; preds = %dec_label_pc_13980
  store i32 %v0_139d8, i32* %r6.global-to-local, align 4
  %v1_1398c = add i32 %v0_139d8, 4
  %v2_1398c = inttoptr i32 %v1_1398c to i32*
  %v3_1398c = load i32, i32* %v2_1398c, align 4
  store i32 %v3_1398c, i32* %r4.global-to-local, align 4
  %v2_13990 = icmp eq i32 %v3_1398c, 0
  br i1 %v2_13990, label %dec_label_pc_13990.dec_label_pc_13a40.loopexit_crit_edge, label %dec_label_pc_13980

dec_label_pc_139a0:                               ; preds = %dec_label_pc_13980
  %v1_139a0 = inttoptr i32 %v0_139d8 to i32*
  %v2_139a0 = load i32, i32* %v1_139a0, align 4
  store i32 %v2_139a0, i32* @ip, align 4
  %v2_139a4 = sub i32 %v0_139d8, %v2_139a0
  %v1_139a8 = add i32 %v2_139a4, 12
  %v3_139ac = icmp uge i32 %v1_139a8, %v2_13974
  %v9_139ac = icmp eq i32 %v1_139a8, %v2_13974
  %v2_139b0 = xor i1 %v9_139ac, true
  %v3_139b0 = and i1 %v3_139ac, %v2_139b0
  br i1 %v3_139b0, label %dec_label_pc_13a40, label %dec_label_pc_139b4

dec_label_pc_139b4:                               ; preds = %dec_label_pc_139a0
  %v2_139b4 = add i32 %v2_139a0, %arg3
  store i32 %v2_139b4, i32* %r7.global-to-local, align 4
  br i1 %v9_139ac, label %dec_label_pc_139bc, label %dec_label_pc_139e8

dec_label_pc_139bc:                               ; preds = %dec_label_pc_139b4
  %v2_139bc = icmp eq i32 %v0_139d0, 0
  br i1 %v2_139bc, label %dec_label_pc_13a34, label %dec_label_pc_139c4

dec_label_pc_139c4:                               ; preds = %dec_label_pc_139bc
  %v1_139c4 = add i32 %v0_139d0, 12
  %v9_139c8 = icmp eq i32 %v1_139c4, %arg2
  br i1 %v9_139c8, label %dec_label_pc_139d0, label %dec_label_pc_13a34

dec_label_pc_139d0:                               ; preds = %dec_label_pc_139c4
  %v1_139d0 = inttoptr i32 %v0_139d0 to i32*
  %v2_139d0 = load i32, i32* %v1_139d0, align 4
  %v1_139d4 = add i32 %v0_139d0, 8
  %v2_139d4 = inttoptr i32 %v1_139d4 to i32*
  %v3_139d4 = load i32, i32* %v2_139d4, align 4
  store i32 %v3_139d4, i32* @r2, align 4
  store i32 %v0_139d8, i32* @r1, align 4
  %v2_139dc = add i32 %v2_139d0, %v2_139b4
  store i32 %v2_139dc, i32* %r7.global-to-local, align 4
  %v0_139e0 = call i32 @function_13958()
  br label %dec_label_pc_13a34

dec_label_pc_139e8:                               ; preds = %dec_label_pc_139b4
  %v1_139e8 = add i32 %v0_139d8, 4
  %v2_139e8 = inttoptr i32 %v1_139e8 to i32*
  %v3_139e8 = load i32, i32* %v2_139e8, align 4
  store i32 %v3_139e8, i32* %r5.global-to-local, align 4
  %v2_139ec = icmp eq i32 %v3_139e8, 0
  br i1 %v2_139ec, label %dec_label_pc_13a20, label %dec_label_pc_139f4

dec_label_pc_139f4:                               ; preds = %dec_label_pc_139e8
  %v1_139f4 = inttoptr i32 %v3_139e8 to i32*
  %v2_139f4 = load i32, i32* %v1_139f4, align 4
  store i32 %v2_139f4, i32* @ip, align 4
  %v2_139f8 = sub i32 %v3_139e8, %v2_139f4
  %v1_139fc = add i32 %v2_139f8, 12
  %v9_13a00 = icmp eq i32 %v2_13974, %v1_139fc
  br i1 %v9_13a00, label %dec_label_pc_13a08, label %dec_label_pc_13a20

dec_label_pc_13a08:                               ; preds = %dec_label_pc_139f4
  store i32 %v0_139d0, i32* @r2, align 4
  store i32 %v3_139e8, i32* @r1, align 4
  %v2_13a10 = add i32 %v2_139f4, %v2_139b4
  store i32 %v2_13a10, i32* %r7.global-to-local, align 4
  %v0_13a14 = call i32 @function_13958()
  %v0_13a18 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13a18, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13a34

dec_label_pc_13a20:                               ; preds = %dec_label_pc_139f4, %dec_label_pc_139e8
  %v2_13a20 = add i32 %v0_139d8, %arg3
  store i32 %v2_13a20, i32* %r4.global-to-local, align 4
  store i32 %v3_139e8, i32* @r3, align 4
  store i32 %v0_139d0, i32* @r2, align 4
  store i32 %v2_13a20, i32* @r1, align 4
  %v0_13a30 = call i32 @function_13938()
  br label %dec_label_pc_13a34

dec_label_pc_13a34:                               ; preds = %dec_label_pc_139c4, %dec_label_pc_139bc, %dec_label_pc_13a08, %dec_label_pc_139d0, %dec_label_pc_13a20
  %v0_13a34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13a34, i32* %r5.global-to-local, align 4
  %v0_13a38 = load i32, i32* %r7.global-to-local, align 4
  %v2_13a38 = inttoptr i32 %v0_13a34 to i32*
  store i32 %v0_13a38, i32* %v2_13a38, align 4
  br label %dec_label_pc_13a58

dec_label_pc_13990.dec_label_pc_13a40.loopexit_crit_edge: ; preds = %dec_label_pc_13988
  br label %dec_label_pc_13a40

dec_label_pc_13a40:                               ; preds = %dec_label_pc_1396c, %dec_label_pc_13990.dec_label_pc_13a40.loopexit_crit_edge, %dec_label_pc_139a0
  %v1_13a40 = add i32 %v2_13974, -12
  store i32 %v1_13a40, i32* %r5.global-to-local, align 4
  %v3_13a44 = inttoptr i32 %v1_13a40 to i32*
  store i32 %arg3, i32* %v3_13a44, align 4
  %v0_13a48 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13a48, i32* @r3, align 4
  %v0_13a4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13a4c, i32* @r2, align 4
  %v0_13a50 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13a50, i32* @r1, align 4
  %v0_13a54 = call i32 @function_13938()
  br label %dec_label_pc_13a58

dec_label_pc_13a58:                               ; preds = %dec_label_pc_13a34, %dec_label_pc_13a40
  %v0_13a58 = load i32, i32* %r5.global-to-local, align 4
  %v2_13a5c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13a5c, i32* @r4, align 4
  ret i32 %v0_13a58

; uselistorder directives
  uselistorder i32 %v3_139e8, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_139ac, { 1, 0 }
  uselistorder i32 %v3_1398c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_139d8, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_139d0, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_13938, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_13958, { 1, 0 }
  uselistorder i32* @ip, { 12, 13, 1, 14, 0, 15, 6, 7, 8, 4, 5, 2, 9, 10, 3, 11 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13a58, { 1, 0 }
  uselistorder label %dec_label_pc_13a40, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13a34, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_13980, { 1, 0 }
}

define i32 @function_13a60() local_unnamed_addr {
dec_label_pc_13a7c.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_13a60 = ptrtoint i32* %stack_var_-268 to i32
  %v1_13a70 = call i32 @function_13e4c()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_13a7c = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_13a7c

dec_label_pc_13a7c:                               ; preds = %dec_label_pc_13a7c.lr.ph, %dec_label_pc_13a7c
  %v1_13a80 = phi i32 [ 31, %dec_label_pc_13a7c.lr.ph ], [ %v1_13a8c, %dec_label_pc_13a7c ]
  %v4_13a80 = mul i32 %v1_13a80, 4
  %v5_13a80 = add i32 %v4_13a80, %v2_13a7c
  %v2_13a88 = add i32 %v5_13a80, -128
  %v3_13a88 = inttoptr i32 %v2_13a88 to i32*
  store i32 0, i32* %v3_13a88, align 4
  %v0_13a8c = load i32, i32* %r1.global-to-local, align 4
  %v1_13a8c = add i32 %v0_13a8c, -1
  store i32 %v1_13a8c, i32* %r1.global-to-local, align 4
  %v6_13a8c = icmp slt i32 %v1_13a8c, 0
  br i1 %v6_13a8c, label %dec_label_pc_13a94, label %dec_label_pc_13a7c

dec_label_pc_13a94:                               ; preds = %dec_label_pc_13a7c
  %v2_13a94 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_13a94, i32* @r4, align 4
  store i32 %v2_13a94, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_13aa0 = call i32 @function_1341c()
  %v2_13aa4 = icmp eq i32 %v0_13aa0, 0
  br i1 %v2_13aa4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_13a94
  store i32 %v2_13a94, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13a94, %bb
  store i32 80568, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_13aa4, i32 ptrtoint (i32* @global_var_12c5c.612 to i32))
  %v2_13abc = load i32, i32* @global_var_1dd10.614, align 4
  %v2_13ac0 = icmp eq i32 %v2_13abc, 0
  br i1 %v2_13ac0, label %dec_label_pc_13ac8, label %dec_label_pc_13af8

dec_label_pc_13ac8:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1dd10.614, align 4
  br label %dec_label_pc_13ad0

dec_label_pc_13ad0:                               ; preds = %dec_label_pc_13b48, %dec_label_pc_13ac8
  %v1_13adc = call i32 @function_13e4c()
  %v1_13ae4 = call i32 @function_14fdc(i32 6)
  store i32 80632, i32* @lr, align 4
  %v1_13af4 = call i32 @function_13e4c()
  %v2_13afc.pre = load i32, i32* @global_var_1dd10.614, align 4
  br label %dec_label_pc_13af8

dec_label_pc_13af8:                               ; preds = %.thread1, %dec_label_pc_13ad0
  %v0_13b6c = phi i32 [ %v2_13abc, %.thread1 ], [ %v2_13afc.pre, %dec_label_pc_13ad0 ]
  store i32 ptrtoint (i32* @global_var_1dd10.614 to i32), i32* %ip.global-to-local, align 4
  %v7_13b00 = icmp eq i32 %v0_13b6c, 1
  br i1 %v7_13b00, label %dec_label_pc_13b30.lr.ph, label %dec_label_pc_13b64

dec_label_pc_13b30.lr.ph:                         ; preds = %dec_label_pc_13af8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1dd10.614, align 4
  %v2_13b1c = bitcast i32* %stack_var_-268 to i8*
  %v3_13b1c = call i32 @function_12ff0(i8* %v2_13b1c, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13b30

dec_label_pc_13b30:                               ; preds = %dec_label_pc_13b30.lr.ph, %dec_label_pc_13b30
  %v1_13b34 = phi i32 [ 31, %dec_label_pc_13b30.lr.ph ], [ %v1_13b40, %dec_label_pc_13b30 ]
  %v4_13b34 = mul i32 %v1_13b34, 4
  %v5_13b34 = add i32 %v4_13b34, %v2_13a7c
  %v2_13b3c = add i32 %v5_13b34, -264
  %v3_13b3c = inttoptr i32 %v2_13b3c to i32*
  store i32 -1, i32* %v3_13b3c, align 4
  %v0_13b40 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b40 = add i32 %v0_13b40, -1
  store i32 %v1_13b40, i32* %r1.global-to-local, align 4
  %v6_13b40 = icmp slt i32 %v1_13b40, 0
  br i1 %v6_13b40, label %dec_label_pc_13b48, label %dec_label_pc_13b30

dec_label_pc_13b48:                               ; preds = %dec_label_pc_13b30
  store i32 %v2_13a60, i32* %r1.global-to-local, align 4
  %v4_13b5c = call i32 @function_14138(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_13ad0

dec_label_pc_13b64:                               ; preds = %dec_label_pc_13af8
  %v7_13b64 = icmp eq i32 %v0_13b6c, 2
  br i1 %v7_13b64, label %dec_label_pc_13b6c, label %dec_label_pc_13b78

dec_label_pc_13b6c:                               ; preds = %dec_label_pc_13b64
  store i32 3, i32* @global_var_1dd10.614, align 4
  %v0_13b74 = call i32 @function_13a60()
  %v2_13b78.pre = load i32, i32* @global_var_1dd10.614, align 4
  br label %dec_label_pc_13b78

dec_label_pc_13b78:                               ; preds = %dec_label_pc_13b64, %dec_label_pc_13b6c
  %v1_13b80 = phi i32 [ %v0_13b6c, %dec_label_pc_13b64 ], [ %v2_13b78.pre, %dec_label_pc_13b6c ]
  %v7_13b7c = icmp eq i32 %v1_13b80, 3
  br i1 %v7_13b7c, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_13b78
  %v2_13b88 = load i32, i32* %ip.global-to-local, align 4
  %v3_13b88 = inttoptr i32 %v2_13b88 to i32*
  store i32 4, i32* %v3_13b88, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_13b78, %bb27
  call void @__pseudo_cond_branch(i1 %v7_13b7c, i32 ptrtoint (i32* @global_var_14250.616 to i32))
  br label %dec_label_pc_13b90

dec_label_pc_13b90:                               ; preds = %dec_label_pc_13b90, %.thread3
  %v0_13b90 = call i32 @function_13a60()
  br label %dec_label_pc_13b90

; uselistorder directives
  uselistorder i32 %v1_13b40, { 2, 1, 0 }
  uselistorder i32 %v1_13a8c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1dd10.614, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_13b78, { 1, 0 }
  uselistorder label %dec_label_pc_13b30, { 1, 0 }
  uselistorder label %dec_label_pc_13af8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_13a7c, { 1, 0 }
}

define i32 @function_13ba8(i32 %arg1) local_unnamed_addr {
dec_label_pc_13ba8:
  %stack_var_-16 = alloca i32, align 4
  %v2_13ba8 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_13ba8, i32* @r0, align 4
  %v8_13bc4 = call i32 @function_13e54(i32 %v2_13ba8, i32 ptrtoint (i32* @global_var_13e4c.568 to i32), i32 ptrtoint (i32* @global_var_1dc58.619 to i32), i32 81492, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_13bd4 = call i32 @function_13e4c()
  %v2_13bdc = load i32, i32* @global_var_1dd14.623, align 4
  %v2_13be0 = icmp eq i32 %v2_13bdc, 0
  br i1 %v2_13be0, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_13ba8
  call void @__pseudo_branch(i32 %v2_13bdc)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13ba8, %bb
  store i32 %v2_13ba8, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_13c04.625 to i32), i32* @lr, align 4
  %v8_13c00 = call i32 @function_13e54(i32 %v2_13ba8, i32 1, i32 ptrtoint (i32* @global_var_1dc58.619 to i32), i32 81492, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_13c00, i32* @r0, align 4
  %v1_13c04 = call i32 @function_13de0(i32 %v8_13c00)
  store i1 true, i1* @cpsr_z, align 1
  %v0_13c18 = load i32, i32* @r4, align 4
  %v1_13c1c = call i32 @function_14250(i32 %v0_13c18)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_13ba8, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_13e4c, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_13e54, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 81492, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1dc58.619 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_13e4c.568 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_13c3c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13c3c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13c3c = load i32, i32* @r4, align 4
  store i32 %v3_13c3c, i32* %stack_var_-20, align 4
  %v6_13c3c = load i32, i32* @r5, align 4
  %v9_13c3c = load i32, i32* @r6, align 4
  %v16_13c3c = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v2_13c40 = icmp eq i32 %arg1, 0
  %v2_13c44 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_13c40, label %dec_label_pc_13dc8, label %dec_label_pc_13c5c.preheader

dec_label_pc_13c5c.preheader:                     ; preds = %dec_label_pc_13c3c
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_13c6417 = add i32 %v16_13c3c, 124
  br label %dec_label_pc_13c54

dec_label_pc_13c54:                               ; preds = %dec_label_pc_13c5c.preheader, %dec_label_pc_13c54
  %v5_13c6418 = phi i32 [ %v5_13c6417, %dec_label_pc_13c5c.preheader ], [ %v5_13c64, %dec_label_pc_13c54 ]
  %v2_13c58 = add i32 %v5_13c6418, -136
  %v3_13c58 = inttoptr i32 %v2_13c58 to i32*
  store i32 0, i32* %v3_13c58, align 4
  %v0_13c5c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13c5c = add i32 %v0_13c5c.pre, -1
  store i32 %v1_13c5c, i32* %r1.global-to-local, align 4
  %v6_13c5c = icmp slt i32 %v1_13c5c, 0
  %v4_13c64 = mul i32 %v1_13c5c, 4
  %v5_13c64 = add i32 %v4_13c64, %v16_13c3c
  br i1 %v6_13c5c, label %dec_label_pc_13c6c, label %dec_label_pc_13c54

dec_label_pc_13c6c:                               ; preds = %dec_label_pc_13c54
  %v2_13c6c = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_13c6c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_13c7c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_13c7c, i32* %stack_var_-28, align 4
  %v0_13c84 = call i32 @function_1341c()
  store i32 %v0_13c84, i32* %r0.global-to-local, align 4
  %v1_13c88 = load i32, i32* @r5, align 4
  %v5_13c8c = icmp slt i32 %v0_13c84, %v1_13c88
  br i1 %v5_13c8c, label %dec_label_pc_13dd0, label %dec_label_pc_13c90

dec_label_pc_13c90:                               ; preds = %dec_label_pc_13c6c
  %v2_13c90 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_13c90, i32* @r4, align 4
  store i32 %v1_13c88, i32* %r0.global-to-local, align 4
  store i32 %v2_13c6c, i32* %r1.global-to-local, align 4
  %v3_13ca0 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_13ca0 = call i32 @function_12c5c(i32 %v1_13c88, %_TYPEDEF_sigset_t* %v3_13ca0, i32 %v2_13c90)
  store i32 %v4_13ca0, i32* %r0.global-to-local, align 4
  %v1_13ca4 = load i32, i32* @r5, align 4
  %v9_13ca4 = icmp eq i32 %v4_13ca0, %v1_13ca4
  br i1 %v9_13ca4, label %dec_label_pc_13cac, label %dec_label_pc_13dd0

dec_label_pc_13cac:                               ; preds = %dec_label_pc_13c90
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_13c90, i32* %r0.global-to-local, align 4
  %v2_13cb4 = call i32 @function_133f8(i32 %v2_13c90, i32 17)
  store i32 %v2_13cb4, i32* %r0.global-to-local, align 4
  %v1_13cb8 = load i32, i32* @r5, align 4
  %v9_13cb8 = icmp eq i32 %v2_13cb4, %v1_13cb8
  br i1 %v9_13cb8, label %dec_label_pc_13cd0.preheader, label %dec_label_pc_13cac.dec_label_pc_13d98_crit_edge

dec_label_pc_13cac.dec_label_pc_13d98_crit_edge:  ; preds = %dec_label_pc_13cac
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_13d98

dec_label_pc_13cd0.preheader:                     ; preds = %dec_label_pc_13cac
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13cc8

dec_label_pc_13cc8:                               ; preds = %dec_label_pc_13cd0.preheader, %dec_label_pc_13cc8
  %v5_13cd816 = phi i32 [ %v5_13c6417, %dec_label_pc_13cd0.preheader ], [ %v5_13cd8, %dec_label_pc_13cc8 ]
  %v2_13ccc = add i32 %v5_13cd816, -136
  %v3_13ccc = inttoptr i32 %v2_13ccc to i32*
  store i32 0, i32* %v3_13ccc, align 4
  %v0_13cd0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13cd0 = add i32 %v0_13cd0.pre, -1
  store i32 %v1_13cd0, i32* %r1.global-to-local, align 4
  %v6_13cd0 = icmp slt i32 %v1_13cd0, 0
  %v4_13cd8 = mul i32 %v1_13cd0, 4
  %v5_13cd8 = add i32 %v4_13cd8, %v16_13c3c
  br i1 %v6_13cd0, label %dec_label_pc_13ce0, label %dec_label_pc_13cc8

dec_label_pc_13ce0:                               ; preds = %dec_label_pc_13cc8
  store i32 %v2_13c6c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_13ce8 = call i32 @function_1341c()
  store i32 %v0_13ce8, i32* %r0.global-to-local, align 4
  %v1_13cec = icmp slt i32 %v0_13ce8, 0
  br i1 %v1_13cec, label %dec_label_pc_13dd0, label %dec_label_pc_13cf4

dec_label_pc_13cf4:                               ; preds = %dec_label_pc_13ce0
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_13d00 = call i32 @function_14138(i32 17, i32* null, i32 %v2_13c44)
  store i32 %v4_13d00, i32* %r0.global-to-local, align 4
  %v1_13d04 = icmp slt i32 %v4_13d00, 0
  br i1 %v1_13d04, label %dec_label_pc_13d0c, label %dec_label_pc_13d34

dec_label_pc_13d0c:                               ; preds = %dec_label_pc_13cf4
  %v0_13d0c = call i32 @function_12f88()
  store i32 %v2_13c90, i32* %r1.global-to-local, align 4
  store i32 %v0_13d0c, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_13d20 = inttoptr i32 %v0_13d0c to i32*
  %v2_13d20 = load i32, i32* %v1_13d20, align 4
  store i32 %v2_13d20, i32* @r4, align 4
  %v3_13d24 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13d24 = call i32 @function_12c5c(i32 2, %_TYPEDEF_sigset_t* %v3_13d24, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_13d2c = load i32, i32* @r4, align 4
  %v1_13d2c = load i32, i32* %r5.global-to-local, align 4
  %v2_13d2c = inttoptr i32 %v1_13d2c to i32*
  store i32 %v0_13d2c, i32* %v2_13d2c, align 4
  %v17_13dd8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13dd4

dec_label_pc_13d34:                               ; preds = %dec_label_pc_13cf4
  %v2_13d34 = load i32, i32* %stack_var_-424, align 4
  %v7_13d38 = icmp eq i32 %v2_13d34, 1
  %v2_13d40 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_13d40, i32* @r4, align 4
  br i1 %v7_13d38, label %dec_label_pc_13d48, label %dec_label_pc_13d7c

dec_label_pc_13d48:                               ; preds = %dec_label_pc_13d34
  store i32 %v2_13d40, i32* %r1.global-to-local, align 4
  store i32 %v2_13d40, i32* %r0.global-to-local, align 4
  %v2_13d50 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_13d50 = call i32 @function_145d4(%timespec* %v2_13d50, i32 %v2_13d40)
  store i32 %v3_13d50, i32* %r0.global-to-local, align 4
  store i32 %v3_13d50, i32* %r6.global-to-local, align 4
  %v0_13d58 = call i32 @function_12f88()
  store i32 %v2_13c90, i32* %r1.global-to-local, align 4
  store i32 %v0_13d58, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_13d6c = inttoptr i32 %v0_13d58 to i32*
  %v2_13d6c = load i32, i32* %v1_13d6c, align 4
  store i32 %v2_13d6c, i32* @r4, align 4
  %v3_13d70 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13d70 = call i32 @function_12c5c(i32 2, %_TYPEDEF_sigset_t* %v3_13d70, i32 0)
  store i32 %v4_13d70, i32* %r0.global-to-local, align 4
  %v0_13d74 = load i32, i32* @r4, align 4
  %v1_13d74 = load i32, i32* %r5.global-to-local, align 4
  %v2_13d74 = inttoptr i32 %v1_13d74 to i32*
  store i32 %v0_13d74, i32* %v2_13d74, align 4
  %v0_13da4.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13da4

dec_label_pc_13d7c:                               ; preds = %dec_label_pc_13d34
  store i32 %v2_13c90, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_13d88 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13d88 = call i32 @function_12c5c(i32 2, %_TYPEDEF_sigset_t* %v3_13d88, i32 0)
  store i32 %v4_13d88, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13d98

dec_label_pc_13d98:                               ; preds = %dec_label_pc_13cac.dec_label_pc_13d98_crit_edge, %dec_label_pc_13d7c
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_13cac.dec_label_pc_13d98_crit_edge ], [ %v2_13d40, %dec_label_pc_13d7c ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_13d9c = bitcast i32* %stack_var_-28 to %timespec*
  %v3_13d9c = call i32 @function_145d4(%timespec* %v2_13d9c, i32 %storemerge.pre-phi)
  store i32 %v3_13d9c, i32* %r0.global-to-local, align 4
  store i32 %v3_13d9c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13da4

dec_label_pc_13da4:                               ; preds = %dec_label_pc_13d48, %dec_label_pc_13d98
  %v0_13da4 = phi i32 [ %v0_13da4.pr, %dec_label_pc_13d48 ], [ %v3_13d9c, %dec_label_pc_13d98 ]
  %v2_13da4 = icmp eq i32 %v0_13da4, 0
  br i1 %v2_13da4, label %dec_label_pc_13dc8, label %dec_label_pc_13dac

dec_label_pc_13dac:                               ; preds = %dec_label_pc_13da4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_13db4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_13db4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13dd4

dec_label_pc_13dc8:                               ; preds = %dec_label_pc_13c3c, %dec_label_pc_13da4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13dd4

dec_label_pc_13dd0:                               ; preds = %dec_label_pc_13c90, %dec_label_pc_13ce0, %dec_label_pc_13c6c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13dd4

dec_label_pc_13dd4:                               ; preds = %dec_label_pc_13dac, %dec_label_pc_13dc8, %dec_label_pc_13d0c, %dec_label_pc_13dd0
  %v17_13dd8 = phi i32 [ %v3_13db4, %dec_label_pc_13dac ], [ 0, %dec_label_pc_13dc8 ], [ %v17_13dd8.pre, %dec_label_pc_13d0c ], [ -1, %dec_label_pc_13dd0 ]
  %v2_13dd8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13dd8, i32* @r4, align 4
  store i32 %v6_13c3c, i32* @r5, align 4
  store i32 %v9_13c3c, i32* @r6, align 4
  ret i32 %v17_13dd8

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_13d40, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_13cd0, { 0, 2, 1 }
  uselistorder i32 %v2_13c90, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_13c88, { 1, 0, 2 }
  uselistorder i32 %v1_13c5c, { 0, 2, 1 }
  uselistorder i32 %v16_13c3c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 9, 0, 11, 12, 14, 13, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 21, 10, 12, 13, 11, 15, 14, 16, 20, 17, 22, 18, 19, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_14138, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_12c5c, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_1341c, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13dd4, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_13dd0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13dc8, { 1, 0 }
  uselistorder label %dec_label_pc_13da4, { 1, 0 }
  uselistorder label %dec_label_pc_13d98, { 1, 0 }
  uselistorder label %dec_label_pc_13cc8, { 1, 0 }
  uselistorder label %dec_label_pc_13c54, { 1, 0 }
}

define i32 @function_13de0(i32 %arg1) local_unnamed_addr {
dec_label_pc_13e0c:
  %stack_var_-8 = alloca i32, align 4
  %v3_13de0 = load i32, i32* @r4, align 4
  store i32 %v3_13de0, i32* %stack_var_-8, align 4
  %v2_13e10 = load i32, i32* @global_var_1dd24.632, align 4
  %v2_13e14 = icmp eq i32 %v2_13e10, 0
  br i1 %v2_13e14, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13e0c
  store i32 81440, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_13e10)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13e0c, %bb
  %v2_13e24 = load i32, i32* @global_var_1dd28.634, align 4
  %v2_13e28 = icmp eq i32 %v2_13e24, 0
  br i1 %v2_13e28, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_13e2c = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_13e2c, i32* @r4, align 4
  %v9_13e2c = load i32, i32* @r0, align 4
  ret i32 %v9_13e2c

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_13e38.635 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_13e24)
  %v2_13e38 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e38, i32* @r4, align 4
  %v8_13e38 = load i32, i32* @r0, align 4
  ret i32 %v8_13e38

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13e4c() local_unnamed_addr {
dec_label_pc_13e4c:
  ret i32 0
}

define i32 @function_13e54(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13e54:
  %v1_13e54 = load i32, i32* @r0, align 4
  ret i32 %v1_13e54
}

define i32 @function_13e58(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_13e58:
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_13e58 = load i32, i32* @r4, align 4
  store i32 %v3_13e58, i32* %stack_var_-12, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_13e68 = call i32 @function_1291c(i32 %arg1, i32 1)
  %v7_13e6c = icmp eq i32 %v2_13e68, -1
  br i1 %v7_13e6c, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_13e58
  %v3_13e70 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_13e70, i32* @r4, align 4
  ret i32 %v2_13e68

bb5:                                              ; preds = %dec_label_pc_13e58
  %v0_13e74 = load i32, i32* @r4, align 4
  %v4_13e7c = call i32 @function_12b0c(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_157f4.637, i32 0, i32 0), i32 %v0_13e74)
  %v1_13e80 = load i32, i32* %r5.global-to-local, align 4
  %v9_13e80 = icmp eq i32 %v4_13e7c, %v1_13e80
  br i1 %v9_13e80, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %v3_13e84 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_13e84, i32* @r4, align 4
  ret i32 %v4_13e7c

bb7:                                              ; preds = %bb5
  %v0_13e88 = call i32 @function_13a60()
  %v0_13e8c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13e8c, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %v1_13e8c = load i32, i32* @r5, align 4
  %v4_13e8c = inttoptr i32 %v0_13e74 to i32*
  store i32 %v1_13e8c, i32* %v4_13e8c, align 4
  br label %bb9

bb9:                                              ; preds = %bb7, %bb8
  ret i32 %v0_13e88

; uselistorder directives
  uselistorder i32 %v2_13e68, { 1, 0 }
  uselistorder i1* @cpsr_z, { 12, 11, 0, 1, 13, 10, 7, 8, 2, 3, 4, 5, 6, 9 }
  uselistorder i32 ()* @function_13a60, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_12b0c, { 7, 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 (i32, i32)* @function_1291c, { 0, 5, 11, 10, 13, 12, 9, 8, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
}

define i32 @function_13e90(i32 %arg1) local_unnamed_addr {
dec_label_pc_13e90:
  %v2_13e94 = load i32, i32* @global_var_1dd2c.639, align 4
  %v2_13e98 = icmp eq i32 %v2_13e94, 0
  br i1 %v2_13e98, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_13e90
  %v6_13ea4 = load i32, i32* @r0, align 4
  ret i32 %v6_13ea4

bb2:                                              ; preds = %dec_label_pc_13e90
  store i32 1, i32* @global_var_1dd2c.639, align 4
  store i32 4096, i32* @global_var_1dd20.593, align 4
  ret i32 undef
}

define i32 @function_13eec(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13eec:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_13ef0 = mul i32 %arg2, 4
  %v5_13ef0 = add i32 %tmp, %v4_13ef0
  %v2_13ef4 = load i32, i32* %arg3, align 4
  %v2_13ef8 = ptrtoint i32* %stack_var_-120 to i32
  %v1_13efc = add i32 %v5_13ef0, 4
  %v9_13f00 = icmp eq i32 %v1_13efc, %v2_13ef4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1dd18.644, align 4
  store i32 %v1_13efc, i32* @global_var_1dd1c.646, align 4
  store i32 %arg6, i32* @global_var_1dd28.634, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_13f00, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_13eec
  store i32 %v5_13ef0, i32* @global_var_1dd1c.646, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_13eec, %bb
  %v2_13f40 = bitcast i32* %stack_var_-120 to i8*
  %v3_13f40 = call i32 @function_12ff0(i8* %v2_13f40, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1dd1c.646, align 4
  br label %dec_label_pc_13f50

dec_label_pc_13f50:                               ; preds = %dec_label_pc_13f50, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_13f50, %dec_label_pc_13f50 ]
  %v1_13f50 = inttoptr i32 %storemerge to i32*
  %v2_13f50 = load i32, i32* %v1_13f50, align 4
  %v4_13f50 = add i32 %storemerge, 4
  %v2_13f54 = icmp eq i32 %v2_13f50, 0
  br i1 %v2_13f54, label %dec_label_pc_13f60, label %dec_label_pc_13f50

dec_label_pc_13f60:                               ; preds = %dec_label_pc_13f50
  store i32 %v4_13f50, i32* @r4, align 4
  %v1_13f8022 = inttoptr i32 %v4_13f50 to i32*
  %v2_13f8023 = load i32, i32* %v1_13f8022, align 4
  %v2_13f8425 = icmp eq i32 %v2_13f8023, 0
  br i1 %v2_13f8425, label %dec_label_pc_13f8c, label %dec_label_pc_13f68

dec_label_pc_13f68:                               ; preds = %dec_label_pc_13f60, %dec_label_pc_13f80
  %v5_13f6c = phi i32 [ %v2_13f80, %dec_label_pc_13f80 ], [ %v2_13f8023, %dec_label_pc_13f60 ]
  %v2_13f68 = icmp ugt i32 %v5_13f6c, 13
  %v7_13f68 = icmp eq i32 %v5_13f6c, 14
  %v2_13f6c = xor i1 %v2_13f68, true
  %v3_13f6c = or i1 %v7_13f68, %v2_13f6c
  br i1 %v3_13f6c, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_13f68
  %v6_13f6c = and i32 %v5_13f6c, 536870912
  %v7_13f6c = icmp ne i32 %v6_13f6c, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_13f68, %bb42
  %v1_13f78 = phi i1 [ %v2_13f68, %dec_label_pc_13f68 ], [ %v7_13f6c, %bb42 ]
  %v2_13f70 = xor i1 %v1_13f78, true
  %v3_13f70 = or i1 %v7_13f68, %v2_13f70
  br i1 %v3_13f70, label %bb44, label %dec_label_pc_13f80

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_13f80

dec_label_pc_13f80:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_13f70, i32 ptrtoint (i32* @global_var_12fd0.648 to i32))
  %v0_13f7c = load i32, i32* @r4, align 4
  %v1_13f7c = add i32 %v0_13f7c, 8
  store i32 %v1_13f7c, i32* @r4, align 4
  %v1_13f80 = inttoptr i32 %v1_13f7c to i32*
  %v2_13f80 = load i32, i32* %v1_13f80, align 4
  %v2_13f84 = icmp eq i32 %v2_13f80, 0
  br i1 %v2_13f84, label %dec_label_pc_13f8c, label %dec_label_pc_13f68

dec_label_pc_13f8c:                               ; preds = %dec_label_pc_13f80, %dec_label_pc_13f60
  %v1_13f90 = call i32 @function_14ff4(i32 %v2_13ef8)
  store i32 %v1_13f90, i32* @r0, align 4
  %v1_13f94 = call i32 @function_13e90(i32 %v1_13f90)
  store i32 %v1_13f94, i32* @r0, align 4
  %v2_13fa0 = icmp eq i32 %tmp37, 0
  br i1 %v2_13fa0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_13f8c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_13f8c, %bb45
  %v0_13fb0 = phi i32 [ %tmp37, %dec_label_pc_13f8c ], [ 4096, %bb45 ]
  %v3_13fa8 = icmp eq i32 %tmp36, -1
  %v8_13fa8 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1dd20.593 to i32), i32* @r2, align 4
  store i32 %v0_13fb0, i32* @global_var_1dd20.593, align 4
  br i1 %v3_13fa8, label %dec_label_pc_13fb8, label %dec_label_pc_13fe0

dec_label_pc_13fb8:                               ; preds = %bb46
  %v0_13fb8 = call i32 @function_14544()
  store i32 %v0_13fb8, i32* @r0, align 4
  store i32 %v0_13fb8, i32* @r4, align 4
  %v0_13fc0 = call i32 @function_144ec()
  %v0_13fc4 = load i32, i32* @r4, align 4
  %v9_13fc4 = icmp eq i32 %v0_13fc4, %v0_13fc0
  br i1 %v9_13fc4, label %dec_label_pc_13fcc, label %dec_label_pc_14008

dec_label_pc_13fcc:                               ; preds = %dec_label_pc_13fb8
  %v1_13fcc = call i32 @function_14518(i32 %v0_13fc0)
  store i32 %v1_13fcc, i32* @r0, align 4
  store i32 %v1_13fcc, i32* @r4, align 4
  %v0_13fd4 = call i32 @function_144c0()
  %v0_13fd8 = load i32, i32* @r4, align 4
  %v9_13fd8 = icmp eq i32 %v0_13fd8, %v0_13fd4
  br i1 %v9_13fd8, label %dec_label_pc_13fe0, label %dec_label_pc_14008

dec_label_pc_13fe0:                               ; preds = %dec_label_pc_13fcc, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_13fa8, label %dec_label_pc_14074, label %dec_label_pc_13fec

dec_label_pc_13fec:                               ; preds = %dec_label_pc_13fe0
  %v9_13ff0 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_13ff0, label %dec_label_pc_13ff8, label %dec_label_pc_14008

dec_label_pc_13ff8:                               ; preds = %dec_label_pc_13fec
  br label %dec_label_pc_14008

dec_label_pc_14008:                               ; preds = %dec_label_pc_13ff8, %dec_label_pc_13fec, %dec_label_pc_13fcc, %dec_label_pc_13fb8
  %v3_14010 = call i32 @function_13e58(i32 0, i32* inttoptr (i32 32768 to i32*))
  %v3_1401c = call i32 @function_13e58(i32 1, i32* inttoptr (i32 32770 to i32*))
  %v3_14028 = call i32 @function_13e58(i32 2, i32* inttoptr (i32 32770 to i32*))
  br label %dec_label_pc_14074

dec_label_pc_14074:                               ; preds = %dec_label_pc_14008, %dec_label_pc_13fe0
  %v0_14038 = load i32, i32* %r6.global-to-local, align 4
  %v1_14038 = inttoptr i32 %v0_14038 to i32*
  %v2_14038 = load i32, i32* %v1_14038, align 4
  store i32 %v2_14038, i32* @global_var_1dc70, align 4
  store i32 %arg5, i32* @global_var_1dd24.632, align 4
  %v2_14074 = icmp eq i32 %arg4, 0
  br i1 %v2_14074, label %dec_label_pc_140b0, label %bb47

bb47:                                             ; preds = %dec_label_pc_14074
  br label %dec_label_pc_140b0

dec_label_pc_140b0:                               ; preds = %dec_label_pc_14074, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_140c0 = call i32 @function_12f88()
  %v2_140c8 = inttoptr i32 %v1_140c0 to i32*
  store i32 0, i32* %v2_140c8, align 4
  %v0_140f4 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_14100 = call i32 @function_13ba8(i32 %v0_140f4)
  ret i32 %v1_14100

; uselistorder directives
  uselistorder i32 %v2_13f80, { 1, 0 }
  uselistorder i32 %v1_13f7c, { 1, 0 }
  uselistorder i1 %v2_13f68, { 1, 0 }
  uselistorder i32 %v4_13f50, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_13ba8, { 0, 3, 2, 6, 5, 4, 1 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1dd20.593, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i1 true, { 0, 1, 87, 2, 3, 4, 5, 6, 57, 7, 8, 9, 10, 11, 64, 89, 65, 113, 112, 52, 58, 15, 16, 17, 90, 80, 91, 92, 93, 59, 18, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 19, 20, 110, 111, 79, 55, 13, 14, 78, 12, 114, 32, 31, 66, 73, 67, 74, 62, 72, 63, 77, 115, 21, 116, 117, 22, 23, 24, 118, 81, 82, 25, 26, 119, 83, 84, 27, 28, 120, 85, 86, 29, 30, 61, 121, 122, 75, 123, 53, 68, 33, 54, 34, 35, 36, 69, 37, 60, 38, 39, 40, 41, 124, 125, 126, 127, 70, 128, 129, 130, 131, 132, 133, 134, 135, 46, 136, 47, 48, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 45, 151, 152, 153, 154, 155, 156, 44, 157, 56, 158, 71, 76, 49, 159, 42, 43, 88, 160, 50, 51 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_140b0, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_13f80, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_13f68, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_14138(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14138:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_14138 = load i32, i32* @r4, align 4
  %v6_14138 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_1413c = icmp eq i32* %arg2, null
  %v2_14140 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_1413c, label %dec_label_pc_141ac, label %dec_label_pc_14150

dec_label_pc_14150:                               ; preds = %dec_label_pc_14138
  %v2_14154 = load i32, i32* %arg2, align 4
  %v4_14154 = add i32 %tmp, 4
  store i32 %v4_14154, i32* @r1, align 4
  %v2_14158 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_14158, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_14154, i32* %stack_var_-156, align 4
  %v3_14164 = call i32 @function_12fd0(i32 %v2_14158, i32 %v4_14154, i32 128)
  store i32 %v3_14164, i32* %r0.global-to-local, align 4
  %v0_14168 = load i32, i32* @r4, align 4
  %v1_14168 = add i32 %v0_14168, 132
  %v2_14168 = inttoptr i32 %v1_14168 to i32*
  %v3_14168 = load i32, i32* %v2_14168, align 4
  %v1_1416c = and i32 %v3_14168, 67108864
  %v2_1416c = icmp eq i32 %v1_1416c, 0
  br i1 %v2_1416c, label %dec_label_pc_14180, label %bb

bb:                                               ; preds = %dec_label_pc_14150
  br label %dec_label_pc_1419c

dec_label_pc_14180:                               ; preds = %dec_label_pc_14150
  %v1_14188 = and i32 %v3_14168, 4
  %v2_14188 = icmp eq i32 %v1_14188, 0
  br i1 %v2_14188, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_14180
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_14180, %bb20
  br label %dec_label_pc_1419c

dec_label_pc_1419c:                               ; preds = %bb, %bb21
  %v2_1419c = icmp eq i32 %v0_14168, 0
  %v3_141a0 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_141a0 = select i1 %v2_1419c, i32 0, i32 %v3_141a0
  %v0_141ac.pre = load i32, i32* @r5, align 4
  %v0_141bc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_141ac

dec_label_pc_141ac:                               ; preds = %dec_label_pc_1419c, %dec_label_pc_14138
  %v0_141bc = phi i32 [ %arg1, %dec_label_pc_14138 ], [ %v0_141bc.pre, %dec_label_pc_1419c ]
  %v0_141ac = phi i32 [ %arg3, %dec_label_pc_14138 ], [ %v0_141ac.pre, %dec_label_pc_1419c ]
  %storemerge = phi i32 [ 0, %dec_label_pc_14138 ], [ %.v3_141a0, %dec_label_pc_1419c ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_141ac = icmp eq i32 %v0_141ac, 0
  %.v2_14140 = select i1 %v2_141ac, i32 0, i32 %v2_14140
  store i32 %.v2_14140, i32* @r2, align 4
  store i32 %v0_141bc, i32* %r0.global-to-local, align 4
  %v1_141c0 = call i32 @function_14224(i32 %v0_141bc)
  store i32 %v1_141c0, i32* %r0.global-to-local, align 4
  %v0_141c4 = load i32, i32* @r5, align 4
  %v2_141c4 = icmp eq i32 %v0_141c4, 0
  br i1 %v2_141c4, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_141ac
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_141ac, %bb25
  %v0_141d4.pr = phi i32 [ 0, %dec_label_pc_141ac ], [ 1, %bb25 ]
  %v1_141cc = icmp slt i32 %v1_141c0, 0
  br i1 %v1_141cc, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_14208

thread-pre-split:                                 ; preds = %bb26
  %v2_141d4 = icmp eq i32 %v0_141d4.pr, 0
  store i32 %v1_141c0, i32* @r4, align 4
  br i1 %v2_141d4, label %dec_label_pc_14208, label %dec_label_pc_141e0

dec_label_pc_141e0:                               ; preds = %thread-pre-split
  %v2_141e0 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_141c4, i32* %r0.global-to-local, align 4
  %v2_141e8 = inttoptr i32 %v0_141c4 to i32*
  store i32 %v2_141e0, i32* %v2_141e8, align 4
  %v3_141e8 = load i32, i32* %r0.global-to-local, align 4
  %v4_141e8 = add i32 %v3_141e8, 4
  store i32 %v4_141e8, i32* @r0, align 4
  %v2_141ec = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_141ec, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_141f4 = call i32 @function_12fd0(i32 %v4_141e8, i32 %v2_141ec, i32 128)
  store i32 %v3_141f4, i32* %r0.global-to-local, align 4
  %v1_141fc = load i32, i32* @r5, align 4
  %v2_141fc = add i32 %v1_141fc, 136
  %v3_141fc = inttoptr i32 %v2_141fc to i32*
  %v1_14204 = load i32, i32* @r5, align 4
  %v2_14204 = add i32 %v1_14204, 132
  %v3_14204 = inttoptr i32 %v2_14204 to i32*
  %v0_14208.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14208

dec_label_pc_14208:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_141e0
  %v0_14208 = phi i32 [ %v1_141c0, %thread-pre-split ], [ %v0_14208.pre, %dec_label_pc_141e0 ], [ %v1_141c0, %thread-pre-split.thread ]
  store i32 %v0_14208, i32* %r0.global-to-local, align 4
  store i32 %v3_14138, i32* @r4, align 4
  store i32 %v6_14138, i32* @r5, align 4
  ret i32 %v0_14208

; uselistorder directives
  uselistorder i32 %v0_14208, { 1, 0 }
  uselistorder i32 %v0_141c4, { 1, 0, 2 }
  uselistorder i32 %v0_141bc, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 1, 6, 7, 0 }
  uselistorder label %dec_label_pc_14208, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_1419c, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_14224(i32 %arg1) local_unnamed_addr {
dec_label_pc_14224:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14224 = load i32, i32* @r4, align 4
  store i32 %v3_14224, i32* %stack_var_-8, align 4
  %v1_14228 = load i32, i32* @r1, align 4
  %v2_14228 = inttoptr i32 %v1_14228 to %sigaction*
  %v3_14228 = load i32, i32* @r2, align 4
  %v4_14228 = inttoptr i32 %v3_14228 to %sigaction*
  %v5_14228 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_14228, %sigaction* %v4_14228)
  store i32 %v5_14228, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14228, -4095
  br i1 %tmp, label %dec_label_pc_14248, label %dec_label_pc_14238

dec_label_pc_14238:                               ; preds = %dec_label_pc_14224
  %v0_14238 = call i32 @function_12f88()
  %v0_1423c = load i32, i32* %r4.global-to-local, align 4
  %v1_1423c = sub i32 0, %v0_1423c
  %v2_14240 = inttoptr i32 %v0_14238 to i32*
  store i32 %v1_1423c, i32* %v2_14240, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14248

dec_label_pc_14248:                               ; preds = %dec_label_pc_14224, %dec_label_pc_14238
  %v0_14248 = phi i32 [ %v5_14228, %dec_label_pc_14224 ], [ -1, %dec_label_pc_14238 ]
  %v2_1424c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1424c, i32* %r4.global-to-local, align 4
  ret i32 %v0_14248

; uselistorder directives
  uselistorder i32 %v5_14228, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14248, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_14250(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_14250:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_14278() local_unnamed_addr {
dec_label_pc_14278:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_14288 = load i32, i32* @r0, align 4
  %v4_14288 = call i32 @fstat(i32 %v0_14288, %stat* %tmp4)
  store i32 %v4_14288, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_14288, -4095
  br i1 %tmp, label %dec_label_pc_142ac, label %dec_label_pc_14298

dec_label_pc_14298:                               ; preds = %dec_label_pc_14278
  %v0_14298 = call i32 @function_12f88()
  %v0_1429c = load i32, i32* %r4.global-to-local, align 4
  %v1_1429c = sub i32 0, %v0_1429c
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_142a4 = inttoptr i32 %v0_14298 to i32*
  store i32 %v1_1429c, i32* %v2_142a4, align 4
  br label %dec_label_pc_142bc

dec_label_pc_142ac:                               ; preds = %dec_label_pc_14278
  %v2_142ac = icmp eq i32 %v4_14288, 0
  store i32 82620, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_142ac, i32 ptrtoint (i32* @global_var_14994.665 to i32))
  br label %dec_label_pc_142bc

dec_label_pc_142bc:                               ; preds = %dec_label_pc_14298, %dec_label_pc_142ac
  %v0_142bc = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_142bc

; uselistorder directives
  uselistorder i32 %v4_14288, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 3, 14, 12, 13, 7, 8, 0, 1, 2, 4, 9, 10, 11, 5, 6 }
  uselistorder label %dec_label_pc_142bc, { 1, 0 }
}

define i32 @function_142c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_142c8:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_142c8 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_142d0 = call i32 @function_1435c()
  store i32 %v0_142d0, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_142d0, 1
  br i1 %tmp8, label %dec_label_pc_14354, label %dec_label_pc_14340.preheader

dec_label_pc_14340.preheader:                     ; preds = %dec_label_pc_142c8
  %v5_142d8 = load i32, i32* @r4, align 4
  %v7_142d8 = add i32 %v5_142d8, %v0_142d0
  store i32 %v7_142d8, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14340

dec_label_pc_142e4:                               ; preds = %dec_label_pc_14340
  %v1_142e4 = add i32 %v2_142f4, 16
  %v2_142e4 = inttoptr i32 %v1_142e4 to i32*
  %v3_142e4 = load i32, i32* %v2_142e4, align 4
  store i32 %v3_142e4, i32* @lr, align 4
  %v2_142e8 = inttoptr i32 %v1_14344 to i32*
  %v3_142e8 = load i32, i32* %v2_142e8, align 4
  store i32 %v3_142e8, i32* %r2.global-to-local, align 4
  %v1_142ec = add i32 %v2_142f4, 18
  %v2_142ec = inttoptr i32 %v1_142ec to i8*
  %v3_142ec = load i8, i8* %v2_142ec, align 1
  %v4_142ec = zext i8 %v3_142ec to i32
  store i32 %v4_142ec, i32* %ip.global-to-local, align 4
  %v3_142f0 = sdiv i32 %v3_142e4, 256
  store i32 %v3_142f0, i32* %r3.global-to-local, align 4
  %v1_142f4 = trunc i32 %v3_142e4 to i8
  %v4_142f4 = inttoptr i32 %v1_14344 to i8*
  store i8 %v1_142f4, i8* %v4_142f4, align 1
  %v0_142f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_142f8 = load i32, i32* @r4, align 4
  %v2_142f8 = add i32 %v1_142f8, 4
  %v3_142f8 = inttoptr i32 %v2_142f8 to i32*
  store i32 %v0_142f8, i32* %v3_142f8, align 4
  %v0_142fc = load i32, i32* %ip.global-to-local, align 4
  %v1_142fc = trunc i32 %v0_142fc to i8
  %v2_142fc = load i32, i32* @r4, align 4
  %v3_142fc = add i32 %v2_142fc, 10
  %v4_142fc = inttoptr i32 %v3_142fc to i8*
  store i8 %v1_142fc, i8* %v4_142fc, align 1
  %v0_14300 = load i32, i32* %r3.global-to-local, align 4
  %v1_14300 = trunc i32 %v0_14300 to i8
  %v2_14300 = load i32, i32* @r4, align 4
  %v3_14300 = add i32 %v2_14300, 9
  %v4_14300 = inttoptr i32 %v3_14300 to i8*
  store i8 %v1_14300, i8* %v4_14300, align 1
  %v0_14304 = load i32, i32* @r4, align 4
  %v1_14304 = add i32 %v0_14304, 8
  %v2_14304 = inttoptr i32 %v1_14304 to i8*
  %v3_14304 = load i8, i8* %v2_14304, align 1
  %v4_14304 = zext i8 %v3_14304 to i32
  store i32 %v4_14304, i32* %r2.global-to-local, align 4
  %v0_14308 = load i32, i32* @r5, align 4
  %v1_14308 = add i32 %v0_14308, 1
  %v2_14308 = inttoptr i32 %v1_14308 to i8*
  %v3_14308 = load i8, i8* %v2_14308, align 1
  %v4_14308 = zext i8 %v3_14308 to i32
  store i32 %v4_14308, i32* %r3.global-to-local, align 4
  %v4_1430c = mul nuw nsw i32 %v4_14308, 256
  %v5_1430c = or i32 %v4_1430c, %v4_14304
  %v1_14310 = add nsw i32 %v5_1430c, -19
  store i32 %v1_14310, i32* @r2, align 4
  %v3_14314 = call i32 @function_12fe0(i32 %v1_1434c, i32 %v1_14348, i32 %v1_14310)
  %v0_14318 = load i32, i32* @r4, align 4
  %v1_14318 = add i32 %v0_14318, 8
  %v2_14318 = inttoptr i32 %v1_14318 to i8*
  %v3_14318 = load i8, i8* %v2_14318, align 1
  %v4_14318 = zext i8 %v3_14318 to i32
  store i32 %v4_14318, i32* %r3.global-to-local, align 4
  %v0_1431c = load i32, i32* @r5, align 4
  %v1_1431c = add i32 %v0_1431c, 1
  %v2_1431c = inttoptr i32 %v1_1431c to i8*
  %v3_1431c = load i8, i8* %v2_1431c, align 1
  %v4_1431c = zext i8 %v3_1431c to i32
  store i32 %v0_14318, i32* @r0, align 4
  %v4_14324 = mul nuw nsw i32 %v4_1431c, 256
  %v5_14324 = or i32 %v4_14324, %v4_14318
  store i32 %v5_14324, i32* @r2, align 4
  store i32 %v0_14318, i32* @r1, align 4
  %v3_1432c = call i32 @function_12fe0(i32 %v0_14318, i32 %v0_14318, i32 %v5_14324)
  %v0_14330 = load i32, i32* @r4, align 4
  %v1_14330 = add i32 %v0_14330, 8
  %v2_14330 = inttoptr i32 %v1_14330 to i8*
  %v3_14330 = load i8, i8* %v2_14330, align 1
  %v4_14330 = zext i8 %v3_14330 to i32
  store i32 %v4_14330, i32* %r3.global-to-local, align 4
  %v0_14334 = load i32, i32* @r5, align 4
  %v1_14334 = add i32 %v0_14334, 1
  %v2_14334 = inttoptr i32 %v1_14334 to i8*
  %v3_14334 = load i8, i8* %v2_14334, align 1
  %v4_14334 = zext i8 %v3_14334 to i32
  store i32 %v4_14334, i32* @r2, align 4
  %v4_14338 = mul nuw nsw i32 %v4_14334, 256
  %v5_14338 = or i32 %v4_14338, %v4_14330
  store i32 %v5_14338, i32* %r3.global-to-local, align 4
  %v2_1433c = add i32 %v5_14338, %v0_14330
  store i32 %v2_1433c, i32* @r4, align 4
  %v1_14340.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14340

dec_label_pc_14340:                               ; preds = %dec_label_pc_14340.preheader, %dec_label_pc_142e4
  %v1_14340 = phi i32 [ %v7_142d8, %dec_label_pc_14340.preheader ], [ %v1_14340.pre, %dec_label_pc_142e4 ]
  %v2_142f4 = phi i32 [ %v5_142d8, %dec_label_pc_14340.preheader ], [ %v2_1433c, %dec_label_pc_142e4 ]
  %v3_14340 = icmp ult i32 %v2_142f4, %v1_14340
  %v1_14344 = add i32 %v2_142f4, 8
  store i32 %v1_14344, i32* @r5, align 4
  %v1_14348 = add i32 %v2_142f4, 19
  store i32 %v1_14348, i32* @r1, align 4
  %v1_1434c = add i32 %v2_142f4, 11
  store i32 %v1_1434c, i32* @r0, align 4
  br i1 %v3_14340, label %dec_label_pc_142e4, label %dec_label_pc_14354.loopexit

dec_label_pc_14354.loopexit:                      ; preds = %dec_label_pc_14340
  %v0_14354.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14354

dec_label_pc_14354:                               ; preds = %dec_label_pc_142c8, %dec_label_pc_14354.loopexit
  %v0_14354 = phi i32 [ %v0_14354.pre, %dec_label_pc_14354.loopexit ], [ %v0_142d0, %dec_label_pc_142c8 ]
  store i32 %v6_142c8, i32* @r5, align 4
  ret i32 %v0_14354

; uselistorder directives
  uselistorder i32 %v1_1434c, { 1, 0 }
  uselistorder i32 %v1_14348, { 1, 0 }
  uselistorder i32 %v1_14344, { 2, 1, 0 }
  uselistorder i32 %v2_142f4, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_14318, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_142e4, { 1, 0, 2 }
  uselistorder i32 %v5_142d8, { 1, 0 }
  uselistorder i32 %v0_142d0, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_12fe0, { 6, 5, 7, 8, 4, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_14354, { 1, 0 }
  uselistorder label %dec_label_pc_14340, { 1, 0 }
}

define i32 @function_1435c() local_unnamed_addr {
dec_label_pc_1435c:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_14360 = load i32, i32* @r4, align 4
  %v9_14360 = load i32, i32* @r6, align 4
  %v0_14364 = load i32, i32* @r2, align 4
  %v1_14364 = add i32 %v0_14364, 6
  %v2_1436c = ptrtoint i32* %stack_var_-60 to i32
  %v1_14370 = and i32 %v1_14364, -4
  store i32 %v1_14370, i32* %r3.global-to-local, align 4
  %v2_14374 = sub i32 %v2_1436c, %v1_14370
  %v0_14378 = load i32, i32* @r1, align 4
  store i32 %v0_14378, i32* %r8.global-to-local, align 4
  store i32 %v0_14364, i32* %stack_var_-60, align 4
  store i32 %v2_14374, i32* %sl.global-to-local, align 4
  %v0_14384 = load i32, i32* @r0, align 4
  %v1_14388 = inttoptr i32 %v2_14374 to %linux_dirent64*
  store i32 %v2_14374, i32* %r1.global-to-local, align 4
  %v5_1438c = call i32 @getdents64(i32 %v0_14384, %linux_dirent64* %v1_14388, i32 %v0_14364)
  store i32 %v5_1438c, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_1438c, -4095
  br i1 %tmp, label %dec_label_pc_143b0, label %dec_label_pc_1439c

dec_label_pc_1439c:                               ; preds = %dec_label_pc_1435c
  %v0_1439c = call i32 @function_12f88()
  %v0_143a0 = load i32, i32* @r6, align 4
  %v1_143a0 = sub i32 0, %v0_143a0
  store i32 %v1_143a0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_143a8 = inttoptr i32 %v0_1439c to i32*
  store i32 %v1_143a0, i32* %v2_143a8, align 4
  %v0_143b8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_143b8

dec_label_pc_143b0:                               ; preds = %dec_label_pc_1435c
  br i1 false, label %dec_label_pc_143b8, label %dec_label_pc_143c0

dec_label_pc_143b8:                               ; preds = %dec_label_pc_143b0, %dec_label_pc_1439c
  %v0_143b8 = phi i32 [ -1, %dec_label_pc_143b0 ], [ %v0_143b8.pre, %dec_label_pc_1439c ]
  store i32 %v0_143b8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_144b4

dec_label_pc_143c0:                               ; preds = %dec_label_pc_143b0
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_143c8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_143c8, i32* @r5, align 4
  %v0_143cc = load i32, i32* @sp, align 4
  store i32 %v0_143cc, i32* @r4, align 4
  br label %dec_label_pc_14490

dec_label_pc_143dc:                               ; preds = %dec_label_pc_14490
  %v2_144a8 = add i32 %v3_14494, %v0_144a8
  %v1_143dc = add i32 %v0_143e0, 17
  %v2_143dc = inttoptr i32 %v1_143dc to i8*
  %v3_143dc = load i8, i8* %v2_143dc, align 1
  %v4_143dc = zext i8 %v3_143dc to i32
  %v2_143e0 = inttoptr i32 %v1_1449c to i8*
  %v3_143e0 = load i8, i8* %v2_143e0, align 1
  %v4_143e0 = zext i8 %v3_143e0 to i32
  %v4_143e4 = mul nuw nsw i32 %v4_143dc, 256
  %v5_143e4 = or i32 %v4_143e0, %v4_143e4
  %v1_143e8 = add nuw nsw i32 %v5_143e4, 3
  %v1_143ec = and i32 %v1_143e8, 131068
  store i32 %v1_143ec, i32* %r3.global-to-local, align 4
  %v2_143f0 = add i32 %v1_143ec, %v2_14430
  store i32 %v2_143f0, i32* %sb.global-to-local, align 4
  %v9_143f4 = icmp eq i32 %v2_143f0, %v2_144a8
  %v1_143f8 = and i32 %v1_143e8, 128
  %v2_143fc = icmp eq i32 %v1_143f8, 0
  %v3_143fc = or i1 %v9_143f4, %v2_143fc
  br i1 %v3_143fc, label %dec_label_pc_14430, label %dec_label_pc_14400

dec_label_pc_14400:                               ; preds = %dec_label_pc_143dc
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_14410 = call i32 @function_14570(i32 %v0_14384, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_14414 = load i32, i32* @r5, align 4
  %v1_14414 = load i32, i32* %r8.global-to-local, align 4
  %v9_14414 = icmp eq i32 %v0_14414, %v1_14414
  br i1 %v9_14414, label %dec_label_pc_1441c, label %dec_label_pc_144b0

dec_label_pc_1441c:                               ; preds = %dec_label_pc_14400
  %v0_1441c = call i32 @function_12f88()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_14428 = inttoptr i32 %v0_1441c to i32*
  store i32 22, i32* %v2_14428, align 4
  %v0_144b4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_144b4

dec_label_pc_14430:                               ; preds = %dec_label_pc_143dc
  %v3_143f811 = udiv i32 %v1_143e8, 256
  %v1_14430 = trunc i32 %v3_143f811 to i8
  %v3_14430 = add i32 %v2_14430, 17
  %v4_14430 = inttoptr i32 %v3_14430 to i8*
  store i8 %v1_14430, i8* %v4_14430, align 1
  %v0_14434 = load i32, i32* %r3.global-to-local, align 4
  %v1_14434 = trunc i32 %v0_14434 to i8
  %v2_14434 = load i32, i32* @r5, align 4
  %v3_14434 = add i32 %v2_14434, 16
  %v4_14434 = inttoptr i32 %v3_14434 to i8*
  store i8 %v1_14434, i8* %v4_14434, align 1
  %v0_14438 = load i32, i32* @r4, align 4
  %v1_14438 = add i32 %v0_14438, 8
  %v1_1443c = inttoptr i32 %v1_14438 to i32*
  %v2_1443c = load i32, i32* %v1_1443c, align 4
  %v3_1443c = add i32 %v0_14438, 12
  %v4_1443c = inttoptr i32 %v3_1443c to i32*
  %v5_1443c = load i32, i32* %v4_1443c, align 4
  store i32 %v5_1443c, i32* %r3.global-to-local, align 4
  %v1_14448 = inttoptr i32 %v0_14438 to i32*
  %v2_14448 = load i32, i32* %v1_14448, align 4
  %v3_14448 = add i32 %v0_14438, 4
  %v4_14448 = inttoptr i32 %v3_14448 to i32*
  %v5_14448 = load i32, i32* %v4_14448, align 4
  store i32 %v5_14448, i32* %r3.global-to-local, align 4
  %v0_1444c = load i32, i32* @r5, align 4
  %v1_1444c = inttoptr i32 %v0_1444c to i32*
  store i32 %v2_14448, i32* %v1_1444c, align 4
  %v3_1444c = add i32 %v0_1444c, 4
  %v4_1444c = inttoptr i32 %v3_1444c to i32*
  %v5_1444c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_1444c, i32* %v4_1444c, align 4
  %v0_14450 = load i32, i32* @r4, align 4
  %v1_14450 = add i32 %v0_14450, 8
  %v1_14454 = inttoptr i32 %v1_14450 to i32*
  %v2_14454 = load i32, i32* %v1_14454, align 4
  %v3_14454 = add i32 %v0_14450, 12
  %v4_14454 = inttoptr i32 %v3_14454 to i32*
  %v5_14454 = load i32, i32* %v4_14454, align 4
  store i32 %v5_14454, i32* %r3.global-to-local, align 4
  %v1_14458 = load i32, i32* @r5, align 4
  %v2_14458 = add i32 %v1_14458, 8
  %v3_14458 = inttoptr i32 %v2_14458 to i32*
  store i32 %v2_14454, i32* %v3_14458, align 4
  %v0_1445c = load i32, i32* %r3.global-to-local, align 4
  %v1_1445c = load i32, i32* @r5, align 4
  %v2_1445c = add i32 %v1_1445c, 12
  %v3_1445c = inttoptr i32 %v2_1445c to i32*
  store i32 %v0_1445c, i32* %v3_1445c, align 4
  %v0_14460 = load i32, i32* @r4, align 4
  %v1_14460 = add i32 %v0_14460, 18
  %v2_14460 = inttoptr i32 %v1_14460 to i8*
  %v3_14460 = load i8, i8* %v2_14460, align 1
  %v4_14460 = zext i8 %v3_14460 to i32
  store i32 %v4_14460, i32* %r3.global-to-local, align 4
  %v2_14464 = load i32, i32* @r5, align 4
  %v3_14464 = add i32 %v2_14464, 18
  %v4_14464 = inttoptr i32 %v3_14464 to i8*
  store i8 %v3_14460, i8* %v4_14464, align 1
  %v0_14468 = load i32, i32* @r4, align 4
  %v1_14468 = add i32 %v0_14468, 16
  %v2_14468 = inttoptr i32 %v1_14468 to i8*
  %v3_14468 = load i8, i8* %v2_14468, align 1
  %v4_14468 = zext i8 %v3_14468 to i32
  %v0_1446c = load i32, i32* %r7.global-to-local, align 4
  %v1_1446c = add i32 %v0_1446c, 1
  %v2_1446c = inttoptr i32 %v1_1446c to i8*
  %v3_1446c = load i8, i8* %v2_1446c, align 1
  %v4_1446c = zext i8 %v3_1446c to i32
  store i32 %v4_1446c, i32* %r3.global-to-local, align 4
  %v4_14470 = mul nuw nsw i32 %v4_1446c, 256
  %v5_14470 = or i32 %v4_14470, %v4_14468
  %v1_14474 = add nsw i32 %v5_14470, -19
  store i32 %v1_14474, i32* @r2, align 4
  %v3_14478 = call i32 @function_12fd0(i32 %v1_144a0, i32 %v1_144a4, i32 %v1_14474)
  %v0_1447c = load i32, i32* @r4, align 4
  %v1_1447c = add i32 %v0_1447c, 16
  %v2_1447c = inttoptr i32 %v1_1447c to i8*
  %v3_1447c = load i8, i8* %v2_1447c, align 1
  %v4_1447c = zext i8 %v3_1447c to i32
  store i32 %v4_1447c, i32* %r3.global-to-local, align 4
  %v0_14480 = load i32, i32* %r7.global-to-local, align 4
  %v1_14480 = add i32 %v0_14480, 1
  %v2_14480 = inttoptr i32 %v1_14480 to i8*
  %v3_14480 = load i8, i8* %v2_14480, align 1
  %v4_14480 = zext i8 %v3_14480 to i32
  %v4_14484 = mul nuw nsw i32 %v4_14480, 256
  %v5_14484 = or i32 %v4_14484, %v4_1447c
  store i32 %v5_14484, i32* %r3.global-to-local, align 4
  %v2_14488 = add i32 %v5_14484, %v0_1447c
  store i32 %v2_14488, i32* @r4, align 4
  %v0_1448c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_1448c, i32* @r5, align 4
  %v1_14490.pre = load i32, i32* @r6, align 4
  %v0_144a8.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_14490

dec_label_pc_14490:                               ; preds = %dec_label_pc_143c0, %dec_label_pc_14430
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_143c0 ], [ %v2_1443c, %dec_label_pc_14430 ]
  %v0_144a8 = phi i32 [ %v0_143c8, %dec_label_pc_143c0 ], [ %v0_144a8.pre, %dec_label_pc_14430 ]
  %v2_14430 = phi i32 [ %v0_143c8, %dec_label_pc_143c0 ], [ %v0_1448c, %dec_label_pc_14430 ]
  %v0_143e0 = phi i32 [ %v0_143cc, %dec_label_pc_143c0 ], [ %v2_14488, %dec_label_pc_14430 ]
  %v1_14490 = phi i32 [ %v5_1438c, %dec_label_pc_143c0 ], [ %v1_14490.pre, %dec_label_pc_14430 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_143c0 ], [ %v5_1443c, %dec_label_pc_14430 ]
  %v0_14490 = load i32, i32* %sl.global-to-local, align 4
  %v2_14490 = add i32 %v0_14490, %v1_14490
  store i32 %v2_14490, i32* %r3.global-to-local, align 4
  %v3_14494 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_14494, i32* @r2, align 4
  %v3_14498 = icmp ult i32 %v0_143e0, %v2_14490
  %v1_1449c = add i32 %v0_143e0, 16
  store i32 %v1_1449c, i32* %r7.global-to-local, align 4
  %v1_144a0 = add i32 %v2_14430, 19
  store i32 %v1_144a0, i32* @r0, align 4
  %v1_144a4 = add i32 %v0_143e0, 19
  store i32 %v1_144a4, i32* @r1, align 4
  br i1 %v3_14498, label %dec_label_pc_143dc, label %dec_label_pc_144b0

dec_label_pc_144b0:                               ; preds = %dec_label_pc_14490, %dec_label_pc_14400
  %v1_144b0 = phi i32 [ %v0_14414, %dec_label_pc_14400 ], [ %v2_14430, %dec_label_pc_14490 ]
  %v0_144b0 = phi i32 [ %v1_14414, %dec_label_pc_14400 ], [ %v0_144a8, %dec_label_pc_14490 ]
  %v2_144b0 = sub i32 %v1_144b0, %v0_144b0
  store i32 %v2_144b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_144b4

dec_label_pc_144b4:                               ; preds = %dec_label_pc_1441c, %dec_label_pc_143b8, %dec_label_pc_144b0
  %v0_144b4 = phi i32 [ %v0_144b4.pre, %dec_label_pc_1441c ], [ %v0_143b8, %dec_label_pc_143b8 ], [ %v2_144b0, %dec_label_pc_144b0 ]
  store i32 %v3_14360, i32* @r4, align 4
  store i32 %v9_14360, i32* %r6.global-to-local, align 4
  ret i32 %v0_144b4

; uselistorder directives
  uselistorder i32 %v1_144a4, { 1, 0 }
  uselistorder i32 %v1_144a0, { 1, 0 }
  uselistorder i32 %v1_1449c, { 1, 0 }
  uselistorder i32 %v3_14494, { 1, 0 }
  uselistorder i32 %v0_143e0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_14430, { 0, 3, 1, 2 }
  uselistorder i32 %v0_14438, { 1, 0, 2, 3 }
  uselistorder i32 %v0_143c8, { 1, 0, 2 }
  uselistorder i32 %v5_1438c, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_12fd0, { 4, 2, 1, 3, 6, 5, 0 }
  uselistorder i32 128, { 11, 12, 34, 13, 35, 25, 16, 17, 18, 26, 2, 27, 19, 20, 21, 22, 23, 28, 3, 29, 4, 14, 15, 30, 31, 6, 0, 1, 7, 8, 9, 32, 5, 33, 24, 10 }
  uselistorder i32* @sp, { 6, 4, 1, 5, 0, 7, 2, 8, 3 }
  uselistorder i32* @r6, { 1, 124, 125, 126, 346, 347, 313, 314, 315, 316, 317, 318, 319, 320, 334, 348, 349, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 10, 11, 86, 87, 12, 13, 21, 14, 15, 16, 17, 18, 19, 20, 88, 89, 22, 90, 91, 92, 93, 94, 95, 96, 102, 97, 98, 99, 100, 101, 287, 288, 289, 290, 0, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 145, 146, 147, 148, 8, 149, 150, 151, 2, 152, 153, 156, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 180, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 194, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 3, 260, 261, 262, 263, 264, 265, 266, 267, 268, 276, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 302, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 4, 360, 361, 362, 363, 364, 365, 367, 5, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 6, 7, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 339, 336, 337, 338, 340, 341, 9, 342, 343, 344, 345 }
  uselistorder label %dec_label_pc_144b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14490, { 1, 0 }
}

define i32 @function_144c0() local_unnamed_addr {
dec_label_pc_144c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_144c0 = load i32, i32* @r4, align 4
  store i32 %v3_144c0, i32* %stack_var_-8, align 4
  %v0_144c8 = load i32, i32* @r0, align 4
  store i32 %v0_144c8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_144c8, -4095
  br i1 %tmp, label %dec_label_pc_144e4, label %dec_label_pc_144d4

dec_label_pc_144d4:                               ; preds = %dec_label_pc_144c0
  %v0_144d4 = call i32 @function_12f88()
  %v0_144d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_144d8 = sub i32 0, %v0_144d8
  %v2_144dc = inttoptr i32 %v0_144d4 to i32*
  store i32 %v1_144d8, i32* %v2_144dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_144e8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_144e4

dec_label_pc_144e4:                               ; preds = %dec_label_pc_144c0, %dec_label_pc_144d4
  %v2_144e8 = phi i32 [ %v3_144c0, %dec_label_pc_144c0 ], [ %v2_144e8.pre, %dec_label_pc_144d4 ]
  %v0_144e4 = phi i32 [ %v0_144c8, %dec_label_pc_144c0 ], [ -1, %dec_label_pc_144d4 ]
  store i32 %v2_144e8, i32* @r4, align 4
  ret i32 %v0_144e4

; uselistorder directives
  uselistorder i32 %v0_144c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_144e4, { 1, 0 }
}

define i32 @function_144ec() local_unnamed_addr {
dec_label_pc_144ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_144ec = load i32, i32* @r4, align 4
  store i32 %v3_144ec, i32* %stack_var_-8, align 4
  %v0_144f4 = load i32, i32* @r0, align 4
  store i32 %v0_144f4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_144f4, -4095
  br i1 %tmp, label %dec_label_pc_14510, label %dec_label_pc_14500

dec_label_pc_14500:                               ; preds = %dec_label_pc_144ec
  %v0_14500 = call i32 @function_12f88()
  %v0_14504 = load i32, i32* %r4.global-to-local, align 4
  %v1_14504 = sub i32 0, %v0_14504
  %v2_14508 = inttoptr i32 %v0_14500 to i32*
  store i32 %v1_14504, i32* %v2_14508, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14514.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14510

dec_label_pc_14510:                               ; preds = %dec_label_pc_144ec, %dec_label_pc_14500
  %v2_14514 = phi i32 [ %v3_144ec, %dec_label_pc_144ec ], [ %v2_14514.pre, %dec_label_pc_14500 ]
  %v0_14510 = phi i32 [ %v0_144f4, %dec_label_pc_144ec ], [ -1, %dec_label_pc_14500 ]
  store i32 %v2_14514, i32* @r4, align 4
  ret i32 %v0_14510

; uselistorder directives
  uselistorder i32 %v0_144f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14510, { 1, 0 }
}

define i32 @function_14518(i32 %arg1) local_unnamed_addr {
dec_label_pc_14518:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14518 = load i32, i32* @r4, align 4
  store i32 %v3_14518, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1453c, label %dec_label_pc_1452c

dec_label_pc_1452c:                               ; preds = %dec_label_pc_14518
  %v0_1452c = call i32 @function_12f88()
  %v0_14530 = load i32, i32* %r4.global-to-local, align 4
  %v1_14530 = sub i32 0, %v0_14530
  %v2_14534 = inttoptr i32 %v0_1452c to i32*
  store i32 %v1_14530, i32* %v2_14534, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14540.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1453c

dec_label_pc_1453c:                               ; preds = %dec_label_pc_14518, %dec_label_pc_1452c
  %v2_14540 = phi i32 [ %v3_14518, %dec_label_pc_14518 ], [ %v2_14540.pre, %dec_label_pc_1452c ]
  %v0_1453c = phi i32 [ %arg1, %dec_label_pc_14518 ], [ -1, %dec_label_pc_1452c ]
  store i32 %v2_14540, i32* %r4.global-to-local, align 4
  ret i32 %v0_1453c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1453c, { 1, 0 }
}

define i32 @function_14544() local_unnamed_addr {
dec_label_pc_14544:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14544 = load i32, i32* @r4, align 4
  store i32 %v3_14544, i32* %stack_var_-8, align 4
  %v0_1454c = load i32, i32* @r0, align 4
  store i32 %v0_1454c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1454c, -4095
  br i1 %tmp, label %dec_label_pc_14568, label %dec_label_pc_14558

dec_label_pc_14558:                               ; preds = %dec_label_pc_14544
  %v0_14558 = call i32 @function_12f88()
  %v0_1455c = load i32, i32* %r4.global-to-local, align 4
  %v1_1455c = sub i32 0, %v0_1455c
  %v2_14560 = inttoptr i32 %v0_14558 to i32*
  store i32 %v1_1455c, i32* %v2_14560, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1456c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14568

dec_label_pc_14568:                               ; preds = %dec_label_pc_14544, %dec_label_pc_14558
  %v2_1456c = phi i32 [ %v3_14544, %dec_label_pc_14544 ], [ %v2_1456c.pre, %dec_label_pc_14558 ]
  %v0_14568 = phi i32 [ %v0_1454c, %dec_label_pc_14544 ], [ -1, %dec_label_pc_14558 ]
  store i32 %v2_1456c, i32* %r4.global-to-local, align 4
  ret i32 %v0_14568

; uselistorder directives
  uselistorder i32 %v0_1454c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14568, { 1, 0 }
}

define i32 @function_14570(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14570:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_145b4, label %dec_label_pc_145a0

dec_label_pc_145a0:                               ; preds = %dec_label_pc_14570
  %v0_145a0 = call i32 @function_12f88()
  %v0_145a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_145a4 = sub i32 0, %v0_145a4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_145ac = inttoptr i32 %v0_145a0 to i32*
  store i32 %v1_145a4, i32* %v2_145ac, align 4
  %v0_145bc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_145bc

dec_label_pc_145b4:                               ; preds = %dec_label_pc_14570
  %v2_145b4 = icmp eq i32 %arg1, 0
  br i1 %v2_145b4, label %dec_label_pc_145c8, label %dec_label_pc_145bc

dec_label_pc_145bc:                               ; preds = %dec_label_pc_145b4, %dec_label_pc_145a0
  %v0_145bc = phi i32 [ %arg1, %dec_label_pc_145b4 ], [ %v0_145bc.pre, %dec_label_pc_145a0 ]
  br label %dec_label_pc_145cc

dec_label_pc_145c8:                               ; preds = %dec_label_pc_145b4
  br label %dec_label_pc_145cc

dec_label_pc_145cc:                               ; preds = %dec_label_pc_145bc, %dec_label_pc_145c8
  %v14_145d0 = phi i32 [ %v0_145bc, %dec_label_pc_145bc ], [ %tmp9, %dec_label_pc_145c8 ]
  ret i32 %v14_145d0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_145cc, { 1, 0 }
}

define i32 @function_145d4(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_145d4:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_145d4 = load i32, i32* @r4, align 4
  store i32 %v3_145d4, i32* %stack_var_-8, align 4
  %v6_145d8 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_145d8, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_145d8, -4095
  br i1 %tmp6, label %dec_label_pc_145f8, label %dec_label_pc_145e8

dec_label_pc_145e8:                               ; preds = %dec_label_pc_145d4
  %v0_145e8 = call i32 @function_12f88()
  %v0_145ec = load i32, i32* %r4.global-to-local, align 4
  %v1_145ec = sub i32 0, %v0_145ec
  %v2_145f0 = inttoptr i32 %v0_145e8 to i32*
  store i32 %v1_145ec, i32* %v2_145f0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_145f8

dec_label_pc_145f8:                               ; preds = %dec_label_pc_145d4, %dec_label_pc_145e8
  %v0_145f8 = phi i32 [ %v6_145d8, %dec_label_pc_145d4 ], [ -1, %dec_label_pc_145e8 ]
  %v2_145fc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_145fc, i32* %r4.global-to-local, align 4
  ret i32 %v0_145f8

; uselistorder directives
  uselistorder i32 %v6_145d8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_145f8, { 1, 0 }
}

define i32 @function_14600(i32 %arg1) local_unnamed_addr {
dec_label_pc_14600:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14600 = load i32, i32* @r4, align 4
  store i32 %v3_14600, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1dd38.667 to i32), i32* %r4.global-to-local, align 4
  %v2_14608 = load i32, i32* @global_var_1dd38.667, align 4
  %v2_1460c = icmp eq i32 %v2_14608, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_1460c, label %dec_label_pc_1461c, label %dec_label_pc_14628

dec_label_pc_1461c:                               ; preds = %dec_label_pc_14600
  %v2_1461c = call i32 @function_15018(i32* null)
  %v1_14620 = icmp slt i32 %v2_1461c, 0
  br i1 %v1_14620, label %dec_label_pc_14648, label %dec_label_pc_14628thread-pre-split

dec_label_pc_14628thread-pre-split:               ; preds = %dec_label_pc_1461c
  %v0_1462c.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_14628.pre = load i32, i32* @global_var_1dd38.667, align 4
  br label %dec_label_pc_14628

dec_label_pc_14628:                               ; preds = %dec_label_pc_14628thread-pre-split, %dec_label_pc_14600
  %v2_14628 = phi i32 [ %v2_14628.pre, %dec_label_pc_14628thread-pre-split ], [ %v2_14608, %dec_label_pc_14600 ]
  %v1_14634 = phi i32 [ %v0_1462c.pr, %dec_label_pc_14628thread-pre-split ], [ %arg1, %dec_label_pc_14600 ]
  %v2_1462c = icmp eq i32 %v1_14634, 0
  store i32 %v2_14628, i32* %r4.global-to-local, align 4
  br i1 %v2_1462c, label %dec_label_pc_1464c, label %dec_label_pc_1463c

dec_label_pc_1463c:                               ; preds = %dec_label_pc_14628
  %v2_14634 = add i32 %v1_14634, %v2_14628
  %v1_1463c = inttoptr i32 %v2_14634 to i32*
  %v2_1463c = call i32 @function_15018(i32* %v1_1463c)
  %v1_14640 = icmp slt i32 %v2_1463c, 0
  br i1 %v1_14640, label %dec_label_pc_14648, label %dec_label_pc_1463c.dec_label_pc_1464c_crit_edge

dec_label_pc_1463c.dec_label_pc_1464c_crit_edge:  ; preds = %dec_label_pc_1463c
  %v0_1464c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1464c

dec_label_pc_14648:                               ; preds = %dec_label_pc_1463c, %dec_label_pc_1461c
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1464c

dec_label_pc_1464c:                               ; preds = %dec_label_pc_1463c.dec_label_pc_1464c_crit_edge, %dec_label_pc_14628, %dec_label_pc_14648
  %v0_1464c = phi i32 [ %v0_1464c.pre, %dec_label_pc_1463c.dec_label_pc_1464c_crit_edge ], [ %v2_14628, %dec_label_pc_14628 ], [ -1, %dec_label_pc_14648 ]
  %v2_14650 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14650, i32* @r4, align 4
  ret i32 %v0_1464c

; uselistorder directives
  uselistorder i32 %v2_14628, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 7, 48, 49, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 2, 29, 30, 31, 35, 34, 33, 32, 47, 6, 36, 37, 38, 45, 39, 40, 41, 42, 43, 44, 5, 46 }
  uselistorder label %dec_label_pc_1464c, { 2, 0, 1 }
}

define i32 @function_14658(%tms* %arg1) local_unnamed_addr {
dec_label_pc_14658:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14658 = load i32, i32* @r4, align 4
  store i32 %v3_14658, i32* %stack_var_-8, align 4
  %v3_1465c = call i32 @times(%tms* %arg1)
  store i32 %v3_1465c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_1465c, -4095
  br i1 %tmp, label %dec_label_pc_1467c, label %dec_label_pc_1466c

dec_label_pc_1466c:                               ; preds = %dec_label_pc_14658
  %v0_1466c = call i32 @function_12f88()
  %v0_14670 = load i32, i32* %r4.global-to-local, align 4
  %v1_14670 = sub i32 0, %v0_14670
  %v2_14674 = inttoptr i32 %v0_1466c to i32*
  store i32 %v1_14670, i32* %v2_14674, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1467c

dec_label_pc_1467c:                               ; preds = %dec_label_pc_14658, %dec_label_pc_1466c
  %v0_1467c = phi i32 [ %v3_1465c, %dec_label_pc_14658 ], [ -1, %dec_label_pc_1466c ]
  %v2_14680 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14680, i32* %r4.global-to-local, align 4
  ret i32 %v0_1467c

; uselistorder directives
  uselistorder i32 %v3_1465c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1467c, { 1, 0 }
}

define i32 @function_14684(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14684:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_146a0 = inttoptr i32 %arg2 to i8*
  %v3_146a0 = call i32 @function_12ff0(i8* %v2_146a0, i32 0)
  %v1_146a4 = add i32 %tmp, 1
  %v2_146a4 = inttoptr i32 %v1_146a4 to i8*
  %v3_146a4 = load i8, i8* %v2_146a4, align 1
  %v4_146a4 = zext i8 %v3_146a4 to i32
  %v1_146a8 = add i32 %tmp, 5
  %v2_146a8 = inttoptr i32 %v1_146a8 to i8*
  %v3_146a8 = load i8, i8* %v2_146a8, align 1
  %v4_146a8 = zext i8 %v3_146a8 to i32
  %v2_146ac = load i8, i8* %arg1, align 1
  %v3_146ac = zext i8 %v2_146ac to i32
  %v1_146b0 = add i32 %tmp, 4
  %v2_146b0 = inttoptr i32 %v1_146b0 to i8*
  %v3_146b0 = load i8, i8* %v2_146b0, align 1
  %v4_146b0 = zext i8 %v3_146b0 to i32
  %v1_146b4 = add i32 %tmp, 2
  %v2_146b4 = inttoptr i32 %v1_146b4 to i8*
  %v3_146b4 = load i8, i8* %v2_146b4, align 1
  %v4_146b4 = zext i8 %v3_146b4 to i32
  %v1_146b8 = add i32 %tmp, 6
  %v2_146b8 = inttoptr i32 %v1_146b8 to i8*
  %v3_146b8 = load i8, i8* %v2_146b8, align 1
  %v4_146b8 = zext i8 %v3_146b8 to i32
  %v1_146bc = add i32 %tmp, 3
  %v2_146bc = inttoptr i32 %v1_146bc to i8*
  %v3_146bc = load i8, i8* %v2_146bc, align 1
  %v4_146bc = zext i8 %v3_146bc to i32
  %v4_146c0 = mul nuw nsw i32 %v4_146a4, 256
  %v5_146c0 = or i32 %v3_146ac, %v4_146c0
  %v4_146c4 = mul nuw nsw i32 %v4_146a8, 256
  %v5_146c4 = or i32 %v4_146b0, %v4_146c4
  %v1_146c8 = add i32 %tmp, 7
  %v2_146c8 = inttoptr i32 %v1_146c8 to i8*
  %v3_146c8 = load i8, i8* %v2_146c8, align 1
  %v4_146c8 = zext i8 %v3_146c8 to i32
  %v4_146cc = mul nuw nsw i32 %v4_146b4, 65536
  %v5_146cc = or i32 %v4_146cc, %v5_146c0
  %v4_146d0 = mul nuw nsw i32 %v4_146b8, 65536
  %v5_146d0 = or i32 %v4_146d0, %v5_146c4
  %v4_146d4 = mul nuw i32 %v4_146bc, 16777216
  %v5_146d4 = or i32 %v4_146d4, %v5_146cc
  %v4_146d8 = mul nuw i32 %v4_146c8, 16777216
  %v5_146d8 = or i32 %v4_146d8, %v5_146d0
  store i32 %v5_146d8, i32* %r3.global-to-local, align 4
  %v0_146dc = load i32, i32* %r7.global-to-local, align 4
  %v1_146dc = inttoptr i32 %v0_146dc to i32*
  store i32 %v5_146d4, i32* %v1_146dc, align 4
  %v3_146dc = add i32 %v0_146dc, 4
  %v4_146dc = inttoptr i32 %v3_146dc to i32*
  %v5_146dc = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_146dc, i32* %v4_146dc, align 4
  %v0_146e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_146e0 = add i32 %v0_146e0, 89
  %v2_146e0 = inttoptr i32 %v1_146e0 to i8*
  %v3_146e0 = load i8, i8* %v2_146e0, align 1
  %v4_146e0 = zext i8 %v3_146e0 to i32
  %v1_146e4 = add i32 %v0_146e0, 93
  %v2_146e4 = inttoptr i32 %v1_146e4 to i8*
  %v3_146e4 = load i8, i8* %v2_146e4, align 1
  %v4_146e4 = zext i8 %v3_146e4 to i32
  %v1_146e8 = add i32 %v0_146e0, 88
  %v2_146e8 = inttoptr i32 %v1_146e8 to i8*
  %v3_146e8 = load i8, i8* %v2_146e8, align 1
  %v4_146e8 = zext i8 %v3_146e8 to i32
  %v1_146ec = add i32 %v0_146e0, 92
  %v2_146ec = inttoptr i32 %v1_146ec to i8*
  %v3_146ec = load i8, i8* %v2_146ec, align 1
  %v4_146ec = zext i8 %v3_146ec to i32
  store i32 %v4_146ec, i32* %r3.global-to-local, align 4
  %v1_146f0 = add i32 %v0_146e0, 94
  %v2_146f0 = inttoptr i32 %v1_146f0 to i8*
  %v3_146f0 = load i8, i8* %v2_146f0, align 1
  %v4_146f0 = zext i8 %v3_146f0 to i32
  %v1_146f4 = add i32 %v0_146e0, 90
  %v2_146f4 = inttoptr i32 %v1_146f4 to i8*
  %v3_146f4 = load i8, i8* %v2_146f4, align 1
  %v4_146f4 = zext i8 %v3_146f4 to i32
  %v1_146f8 = add i32 %v0_146e0, 91
  %v2_146f8 = inttoptr i32 %v1_146f8 to i8*
  %v3_146f8 = load i8, i8* %v2_146f8, align 1
  %v4_146f8 = zext i8 %v3_146f8 to i32
  %v4_146fc = mul nuw nsw i32 %v4_146e0, 256
  %v5_146fc = or i32 %v4_146e8, %v4_146fc
  %v4_14700 = mul nuw nsw i32 %v4_146e4, 256
  %v5_14700 = or i32 %v4_146ec, %v4_14700
  store i32 %v5_14700, i32* %r3.global-to-local, align 4
  %v1_14704 = add i32 %v0_146e0, 95
  %v2_14704 = inttoptr i32 %v1_14704 to i8*
  %v3_14704 = load i8, i8* %v2_14704, align 1
  %v4_14704 = zext i8 %v3_14704 to i32
  %v4_14708 = mul nuw nsw i32 %v4_146f0, 65536
  %v5_14708 = or i32 %v4_14708, %v5_14700
  store i32 %v5_14708, i32* %r3.global-to-local, align 4
  %v4_1470c = mul nuw nsw i32 %v4_146f4, 65536
  %v5_1470c = or i32 %v4_1470c, %v5_146fc
  %v4_14710 = mul nuw i32 %v4_146f8, 16777216
  %v5_14710 = or i32 %v4_14710, %v5_1470c
  %v4_14714 = mul nuw i32 %v4_14704, 16777216
  %v5_14714 = or i32 %v4_14714, %v5_14708
  store i32 %v5_14714, i32* %r6.global-to-local, align 4
  %v1_14718 = load i32, i32* %r7.global-to-local, align 4
  %v2_14718 = add i32 %v1_14718, 88
  %v3_14718 = inttoptr i32 %v2_14718 to i32*
  store i32 %v5_14710, i32* %v3_14718, align 4
  %v0_1471c = load i32, i32* %r6.global-to-local, align 4
  %v1_1471c = load i32, i32* %r7.global-to-local, align 4
  %v2_1471c = add i32 %v1_1471c, 92
  %v3_1471c = inttoptr i32 %v2_1471c to i32*
  store i32 %v0_1471c, i32* %v3_1471c, align 4
  %v0_14720 = load i32, i32* %r4.global-to-local, align 4
  %v1_14720 = add i32 %v0_14720, 13
  %v2_14720 = inttoptr i32 %v1_14720 to i8*
  %v3_14720 = load i8, i8* %v2_14720, align 1
  %v4_14720 = zext i8 %v3_14720 to i32
  %v1_14724 = add i32 %v0_14720, 12
  %v2_14724 = inttoptr i32 %v1_14724 to i8*
  %v3_14724 = load i8, i8* %v2_14724, align 1
  %v4_14724 = zext i8 %v3_14724 to i32
  store i32 %v4_14724, i32* %r3.global-to-local, align 4
  %v1_14728 = add i32 %v0_14720, 14
  %v2_14728 = inttoptr i32 %v1_14728 to i8*
  %v3_14728 = load i8, i8* %v2_14728, align 1
  %v4_14728 = zext i8 %v3_14728 to i32
  %v4_1472c = mul nuw nsw i32 %v4_14720, 256
  %v5_1472c = or i32 %v4_14724, %v4_1472c
  store i32 %v5_1472c, i32* %r3.global-to-local, align 4
  %v1_14730 = add i32 %v0_14720, 15
  %v2_14730 = inttoptr i32 %v1_14730 to i8*
  %v3_14730 = load i8, i8* %v2_14730, align 1
  %v4_14730 = zext i8 %v3_14730 to i32
  %v4_14734 = mul nuw nsw i32 %v4_14728, 65536
  %v5_14734 = or i32 %v4_14734, %v5_1472c
  %v4_14738 = mul nuw i32 %v4_14730, 16777216
  %v5_14738 = or i32 %v5_14734, %v4_14738
  store i32 %v5_14738, i32* %r3.global-to-local, align 4
  %v1_1473c = load i32, i32* %r7.global-to-local, align 4
  %v2_1473c = add i32 %v1_1473c, 12
  %v3_1473c = inttoptr i32 %v2_1473c to i32*
  store i32 %v5_14738, i32* %v3_1473c, align 4
  %v0_14740 = load i32, i32* %r4.global-to-local, align 4
  %v1_14740 = add i32 %v0_14740, 17
  %v2_14740 = inttoptr i32 %v1_14740 to i8*
  %v3_14740 = load i8, i8* %v2_14740, align 1
  %v4_14740 = zext i8 %v3_14740 to i32
  %v1_14744 = add i32 %v0_14740, 16
  %v2_14744 = inttoptr i32 %v1_14744 to i8*
  %v3_14744 = load i8, i8* %v2_14744, align 1
  %v4_14744 = zext i8 %v3_14744 to i32
  store i32 %v4_14744, i32* %r3.global-to-local, align 4
  %v1_14748 = add i32 %v0_14740, 18
  %v2_14748 = inttoptr i32 %v1_14748 to i8*
  %v3_14748 = load i8, i8* %v2_14748, align 1
  %v4_14748 = zext i8 %v3_14748 to i32
  %v4_1474c = mul nuw nsw i32 %v4_14740, 256
  %v5_1474c = or i32 %v4_14744, %v4_1474c
  store i32 %v5_1474c, i32* %r3.global-to-local, align 4
  %v1_14750 = add i32 %v0_14740, 19
  %v2_14750 = inttoptr i32 %v1_14750 to i8*
  %v3_14750 = load i8, i8* %v2_14750, align 1
  %v4_14750 = zext i8 %v3_14750 to i32
  %v4_14754 = mul nuw nsw i32 %v4_14748, 65536
  %v5_14754 = or i32 %v4_14754, %v5_1474c
  %v4_14758 = mul nuw i32 %v4_14750, 16777216
  %v5_14758 = or i32 %v5_14754, %v4_14758
  store i32 %v5_14758, i32* %r3.global-to-local, align 4
  %v1_1475c = load i32, i32* %r7.global-to-local, align 4
  %v2_1475c = add i32 %v1_1475c, 16
  %v3_1475c = inttoptr i32 %v2_1475c to i32*
  store i32 %v5_14758, i32* %v3_1475c, align 4
  %v0_14760 = load i32, i32* %r4.global-to-local, align 4
  %v1_14760 = add i32 %v0_14760, 21
  %v2_14760 = inttoptr i32 %v1_14760 to i8*
  %v3_14760 = load i8, i8* %v2_14760, align 1
  %v4_14760 = zext i8 %v3_14760 to i32
  %v1_14764 = add i32 %v0_14760, 20
  %v2_14764 = inttoptr i32 %v1_14764 to i8*
  %v3_14764 = load i8, i8* %v2_14764, align 1
  %v4_14764 = zext i8 %v3_14764 to i32
  store i32 %v4_14764, i32* %r3.global-to-local, align 4
  %v1_14768 = add i32 %v0_14760, 22
  %v2_14768 = inttoptr i32 %v1_14768 to i8*
  %v3_14768 = load i8, i8* %v2_14768, align 1
  %v4_14768 = zext i8 %v3_14768 to i32
  %v4_1476c = mul nuw nsw i32 %v4_14760, 256
  %v5_1476c = or i32 %v4_14764, %v4_1476c
  store i32 %v5_1476c, i32* %r3.global-to-local, align 4
  %v1_14770 = add i32 %v0_14760, 23
  %v2_14770 = inttoptr i32 %v1_14770 to i8*
  %v3_14770 = load i8, i8* %v2_14770, align 1
  %v4_14770 = zext i8 %v3_14770 to i32
  %v4_14774 = mul nuw nsw i32 %v4_14768, 65536
  %v5_14774 = or i32 %v4_14774, %v5_1476c
  %v4_14778 = mul nuw i32 %v4_14770, 16777216
  %v5_14778 = or i32 %v5_14774, %v4_14778
  store i32 %v5_14778, i32* %r3.global-to-local, align 4
  %v1_1477c = load i32, i32* %r7.global-to-local, align 4
  %v2_1477c = add i32 %v1_1477c, 20
  %v3_1477c = inttoptr i32 %v2_1477c to i32*
  store i32 %v5_14778, i32* %v3_1477c, align 4
  %v0_14780 = load i32, i32* %r4.global-to-local, align 4
  %v1_14780 = add i32 %v0_14780, 25
  %v2_14780 = inttoptr i32 %v1_14780 to i8*
  %v3_14780 = load i8, i8* %v2_14780, align 1
  %v4_14780 = zext i8 %v3_14780 to i32
  %v1_14784 = add i32 %v0_14780, 24
  %v2_14784 = inttoptr i32 %v1_14784 to i8*
  %v3_14784 = load i8, i8* %v2_14784, align 1
  %v4_14784 = zext i8 %v3_14784 to i32
  store i32 %v4_14784, i32* %r3.global-to-local, align 4
  %v1_14788 = add i32 %v0_14780, 26
  %v2_14788 = inttoptr i32 %v1_14788 to i8*
  %v3_14788 = load i8, i8* %v2_14788, align 1
  %v4_14788 = zext i8 %v3_14788 to i32
  %v4_1478c = mul nuw nsw i32 %v4_14780, 256
  %v5_1478c = or i32 %v4_14784, %v4_1478c
  store i32 %v5_1478c, i32* %r3.global-to-local, align 4
  %v1_14790 = add i32 %v0_14780, 27
  %v2_14790 = inttoptr i32 %v1_14790 to i8*
  %v3_14790 = load i8, i8* %v2_14790, align 1
  %v4_14790 = zext i8 %v3_14790 to i32
  %v4_14794 = mul nuw nsw i32 %v4_14788, 65536
  %v5_14794 = or i32 %v4_14794, %v5_1478c
  %v4_14798 = mul nuw i32 %v4_14790, 16777216
  %v5_14798 = or i32 %v5_14794, %v4_14798
  store i32 %v5_14798, i32* %r3.global-to-local, align 4
  %v1_1479c = load i32, i32* %r7.global-to-local, align 4
  %v2_1479c = add i32 %v1_1479c, 24
  %v3_1479c = inttoptr i32 %v2_1479c to i32*
  store i32 %v5_14798, i32* %v3_1479c, align 4
  %v0_147a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_147a0 = add i32 %v0_147a0, 29
  %v2_147a0 = inttoptr i32 %v1_147a0 to i8*
  %v3_147a0 = load i8, i8* %v2_147a0, align 1
  %v4_147a0 = zext i8 %v3_147a0 to i32
  %v1_147a4 = add i32 %v0_147a0, 28
  %v2_147a4 = inttoptr i32 %v1_147a4 to i8*
  %v3_147a4 = load i8, i8* %v2_147a4, align 1
  %v4_147a4 = zext i8 %v3_147a4 to i32
  store i32 %v4_147a4, i32* %r3.global-to-local, align 4
  %v1_147a8 = add i32 %v0_147a0, 30
  %v2_147a8 = inttoptr i32 %v1_147a8 to i8*
  %v3_147a8 = load i8, i8* %v2_147a8, align 1
  %v4_147a8 = zext i8 %v3_147a8 to i32
  %v4_147ac = mul nuw nsw i32 %v4_147a0, 256
  %v5_147ac = or i32 %v4_147a4, %v4_147ac
  store i32 %v5_147ac, i32* %r3.global-to-local, align 4
  %v1_147b0 = add i32 %v0_147a0, 31
  %v2_147b0 = inttoptr i32 %v1_147b0 to i8*
  %v3_147b0 = load i8, i8* %v2_147b0, align 1
  %v4_147b0 = zext i8 %v3_147b0 to i32
  %v4_147b4 = mul nuw nsw i32 %v4_147a8, 65536
  %v5_147b4 = or i32 %v4_147b4, %v5_147ac
  %v4_147b8 = mul nuw i32 %v4_147b0, 16777216
  %v5_147b8 = or i32 %v5_147b4, %v4_147b8
  store i32 %v5_147b8, i32* %r3.global-to-local, align 4
  %v1_147bc = load i32, i32* %r7.global-to-local, align 4
  %v2_147bc = add i32 %v1_147bc, 28
  %v3_147bc = inttoptr i32 %v2_147bc to i32*
  store i32 %v5_147b8, i32* %v3_147bc, align 4
  %v0_147c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_147c0 = add i32 %v0_147c0, 33
  %v2_147c0 = inttoptr i32 %v1_147c0 to i8*
  %v3_147c0 = load i8, i8* %v2_147c0, align 1
  %v4_147c0 = zext i8 %v3_147c0 to i32
  %v1_147c4 = add i32 %v0_147c0, 37
  %v2_147c4 = inttoptr i32 %v1_147c4 to i8*
  %v3_147c4 = load i8, i8* %v2_147c4, align 1
  %v4_147c4 = zext i8 %v3_147c4 to i32
  %v1_147c8 = add i32 %v0_147c0, 32
  %v2_147c8 = inttoptr i32 %v1_147c8 to i8*
  %v3_147c8 = load i8, i8* %v2_147c8, align 1
  %v4_147c8 = zext i8 %v3_147c8 to i32
  %v1_147cc = add i32 %v0_147c0, 36
  %v2_147cc = inttoptr i32 %v1_147cc to i8*
  %v3_147cc = load i8, i8* %v2_147cc, align 1
  %v4_147cc = zext i8 %v3_147cc to i32
  store i32 %v4_147cc, i32* %r3.global-to-local, align 4
  %v1_147d0 = add i32 %v0_147c0, 34
  %v2_147d0 = inttoptr i32 %v1_147d0 to i8*
  %v3_147d0 = load i8, i8* %v2_147d0, align 1
  %v4_147d0 = zext i8 %v3_147d0 to i32
  %v1_147d4 = add i32 %v0_147c0, 38
  %v2_147d4 = inttoptr i32 %v1_147d4 to i8*
  %v3_147d4 = load i8, i8* %v2_147d4, align 1
  %v4_147d4 = zext i8 %v3_147d4 to i32
  %v1_147d8 = add i32 %v0_147c0, 35
  %v2_147d8 = inttoptr i32 %v1_147d8 to i8*
  %v3_147d8 = load i8, i8* %v2_147d8, align 1
  %v4_147d8 = zext i8 %v3_147d8 to i32
  %v4_147dc = mul nuw nsw i32 %v4_147c0, 256
  %v5_147dc = or i32 %v4_147c8, %v4_147dc
  %v4_147e0 = mul nuw nsw i32 %v4_147c4, 256
  %v5_147e0 = or i32 %v4_147cc, %v4_147e0
  store i32 %v5_147e0, i32* %r3.global-to-local, align 4
  %v1_147e4 = add i32 %v0_147c0, 39
  %v2_147e4 = inttoptr i32 %v1_147e4 to i8*
  %v3_147e4 = load i8, i8* %v2_147e4, align 1
  %v4_147e4 = zext i8 %v3_147e4 to i32
  %v4_147e8 = mul nuw nsw i32 %v4_147d0, 65536
  %v5_147e8 = or i32 %v4_147e8, %v5_147dc
  %v4_147ec = mul nuw nsw i32 %v4_147d4, 65536
  %v5_147ec = or i32 %v4_147ec, %v5_147e0
  %v4_147f0 = mul nuw i32 %v4_147d8, 16777216
  %v5_147f0 = or i32 %v5_147e8, %v4_147f0
  %v4_147f4 = mul nuw i32 %v4_147e4, 16777216
  %v5_147f4 = or i32 %v5_147ec, %v4_147f4
  store i32 %v5_147f4, i32* %r3.global-to-local, align 4
  %v1_14808 = load i32, i32* %r7.global-to-local, align 4
  %v2_14808 = add i32 %v1_14808, 32
  %v3_14808 = inttoptr i32 %v2_14808 to i32*
  store i32 %v5_147f0, i32* %v3_14808, align 4
  %v0_1480c = load i32, i32* %r3.global-to-local, align 4
  %v1_1480c = load i32, i32* %r7.global-to-local, align 4
  %v2_1480c = add i32 %v1_1480c, 36
  %v3_1480c = inttoptr i32 %v2_1480c to i32*
  store i32 %v0_1480c, i32* %v3_1480c, align 4
  %v0_14810 = load i32, i32* %r4.global-to-local, align 4
  %v1_14810 = add i32 %v0_14810, 45
  %v2_14810 = inttoptr i32 %v1_14810 to i8*
  %v3_14810 = load i8, i8* %v2_14810, align 1
  %v4_14810 = zext i8 %v3_14810 to i32
  %v1_14814 = add i32 %v0_14810, 49
  %v2_14814 = inttoptr i32 %v1_14814 to i8*
  %v3_14814 = load i8, i8* %v2_14814, align 1
  %v4_14814 = zext i8 %v3_14814 to i32
  %v1_14818 = add i32 %v0_14810, 44
  %v2_14818 = inttoptr i32 %v1_14818 to i8*
  %v3_14818 = load i8, i8* %v2_14818, align 1
  %v4_14818 = zext i8 %v3_14818 to i32
  %v1_1481c = add i32 %v0_14810, 48
  %v2_1481c = inttoptr i32 %v1_1481c to i8*
  %v3_1481c = load i8, i8* %v2_1481c, align 1
  %v4_1481c = zext i8 %v3_1481c to i32
  store i32 %v4_1481c, i32* %r3.global-to-local, align 4
  %v1_14820 = add i32 %v0_14810, 46
  %v2_14820 = inttoptr i32 %v1_14820 to i8*
  %v3_14820 = load i8, i8* %v2_14820, align 1
  %v4_14820 = zext i8 %v3_14820 to i32
  %v1_14824 = add i32 %v0_14810, 50
  %v2_14824 = inttoptr i32 %v1_14824 to i8*
  %v3_14824 = load i8, i8* %v2_14824, align 1
  %v4_14824 = zext i8 %v3_14824 to i32
  %v1_14828 = add i32 %v0_14810, 47
  %v2_14828 = inttoptr i32 %v1_14828 to i8*
  %v3_14828 = load i8, i8* %v2_14828, align 1
  %v4_14828 = zext i8 %v3_14828 to i32
  %v4_1482c = mul nuw nsw i32 %v4_14810, 256
  %v5_1482c = or i32 %v4_14818, %v4_1482c
  %v4_14830 = mul nuw nsw i32 %v4_14814, 256
  %v5_14830 = or i32 %v4_1481c, %v4_14830
  store i32 %v5_14830, i32* %r3.global-to-local, align 4
  %v1_14834 = add i32 %v0_14810, 51
  %v2_14834 = inttoptr i32 %v1_14834 to i8*
  %v3_14834 = load i8, i8* %v2_14834, align 1
  %v4_14834 = zext i8 %v3_14834 to i32
  %v4_14838 = mul nuw nsw i32 %v4_14820, 65536
  %v5_14838 = or i32 %v4_14838, %v5_1482c
  %v4_1483c = mul nuw nsw i32 %v4_14824, 65536
  %v5_1483c = or i32 %v4_1483c, %v5_14830
  %v4_14840 = mul nuw i32 %v4_14828, 16777216
  %v5_14840 = or i32 %v5_14838, %v4_14840
  %v4_14844 = mul nuw i32 %v4_14834, 16777216
  %v5_14844 = or i32 %v5_1483c, %v4_14844
  store i32 %v5_14844, i32* %r3.global-to-local, align 4
  %v1_14858 = load i32, i32* %r7.global-to-local, align 4
  %v2_14858 = add i32 %v1_14858, 44
  %v3_14858 = inttoptr i32 %v2_14858 to i32*
  store i32 %v5_14840, i32* %v3_14858, align 4
  %v0_1485c = load i32, i32* %r3.global-to-local, align 4
  %v1_1485c = load i32, i32* %r7.global-to-local, align 4
  %v2_1485c = add i32 %v1_1485c, 48
  %v3_1485c = inttoptr i32 %v2_1485c to i32*
  store i32 %v0_1485c, i32* %v3_1485c, align 4
  %v0_14860 = load i32, i32* %r4.global-to-local, align 4
  %v1_14860 = add i32 %v0_14860, 53
  %v2_14860 = inttoptr i32 %v1_14860 to i8*
  %v3_14860 = load i8, i8* %v2_14860, align 1
  %v4_14860 = zext i8 %v3_14860 to i32
  %v1_14864 = add i32 %v0_14860, 52
  %v2_14864 = inttoptr i32 %v1_14864 to i8*
  %v3_14864 = load i8, i8* %v2_14864, align 1
  %v4_14864 = zext i8 %v3_14864 to i32
  store i32 %v4_14864, i32* %r3.global-to-local, align 4
  %v1_14868 = add i32 %v0_14860, 54
  %v2_14868 = inttoptr i32 %v1_14868 to i8*
  %v3_14868 = load i8, i8* %v2_14868, align 1
  %v4_14868 = zext i8 %v3_14868 to i32
  %v4_1486c = mul nuw nsw i32 %v4_14860, 256
  %v5_1486c = or i32 %v4_14864, %v4_1486c
  store i32 %v5_1486c, i32* %r3.global-to-local, align 4
  %v1_14870 = add i32 %v0_14860, 55
  %v2_14870 = inttoptr i32 %v1_14870 to i8*
  %v3_14870 = load i8, i8* %v2_14870, align 1
  %v4_14870 = zext i8 %v3_14870 to i32
  %v4_14874 = mul nuw nsw i32 %v4_14868, 65536
  %v5_14874 = or i32 %v4_14874, %v5_1486c
  %v4_14878 = mul nuw i32 %v4_14870, 16777216
  %v5_14878 = or i32 %v5_14874, %v4_14878
  store i32 %v5_14878, i32* %r3.global-to-local, align 4
  %v1_1487c = load i32, i32* %r7.global-to-local, align 4
  %v2_1487c = add i32 %v1_1487c, 52
  %v3_1487c = inttoptr i32 %v2_1487c to i32*
  store i32 %v5_14878, i32* %v3_1487c, align 4
  %v0_14880 = load i32, i32* %r4.global-to-local, align 4
  %v1_14880 = add i32 %v0_14880, 57
  %v2_14880 = inttoptr i32 %v1_14880 to i8*
  %v3_14880 = load i8, i8* %v2_14880, align 1
  %v4_14880 = zext i8 %v3_14880 to i32
  %v1_14884 = add i32 %v0_14880, 56
  %v2_14884 = inttoptr i32 %v1_14884 to i8*
  %v3_14884 = load i8, i8* %v2_14884, align 1
  %v4_14884 = zext i8 %v3_14884 to i32
  %v1_14888 = add i32 %v0_14880, 60
  %v2_14888 = inttoptr i32 %v1_14888 to i8*
  %v3_14888 = load i8, i8* %v2_14888, align 1
  %v4_14888 = zext i8 %v3_14888 to i32
  store i32 %v4_14888, i32* %r3.global-to-local, align 4
  %v1_1488c = add i32 %v0_14880, 61
  %v2_1488c = inttoptr i32 %v1_1488c to i8*
  %v3_1488c = load i8, i8* %v2_1488c, align 1
  %v4_1488c = zext i8 %v3_1488c to i32
  %v1_14890 = add i32 %v0_14880, 58
  %v2_14890 = inttoptr i32 %v1_14890 to i8*
  %v3_14890 = load i8, i8* %v2_14890, align 1
  %v4_14890 = zext i8 %v3_14890 to i32
  %v1_14894 = add i32 %v0_14880, 62
  %v2_14894 = inttoptr i32 %v1_14894 to i8*
  %v3_14894 = load i8, i8* %v2_14894, align 1
  %v4_14894 = zext i8 %v3_14894 to i32
  %v1_14898 = add i32 %v0_14880, 59
  %v2_14898 = inttoptr i32 %v1_14898 to i8*
  %v3_14898 = load i8, i8* %v2_14898, align 1
  %v4_14898 = zext i8 %v3_14898 to i32
  %v4_1489c = mul nuw nsw i32 %v4_14880, 256
  %v5_1489c = or i32 %v4_14884, %v4_1489c
  %v4_148a0 = mul nuw nsw i32 %v4_1488c, 256
  %v5_148a0 = or i32 %v4_148a0, %v4_14888
  store i32 %v5_148a0, i32* %r3.global-to-local, align 4
  %v1_148a4 = add i32 %v0_14880, 63
  %v2_148a4 = inttoptr i32 %v1_148a4 to i8*
  %v3_148a4 = load i8, i8* %v2_148a4, align 1
  %v4_148a4 = zext i8 %v3_148a4 to i32
  %v4_148a8 = mul nuw nsw i32 %v4_14890, 65536
  %v5_148a8 = or i32 %v4_148a8, %v5_1489c
  %v4_148ac = mul nuw nsw i32 %v4_14894, 65536
  %v5_148ac = or i32 %v4_148ac, %v5_148a0
  %v4_148b0 = mul nuw i32 %v4_148a4, 16777216
  %v5_148b0 = or i32 %v5_148ac, %v4_148b0
  %v4_148b4 = mul nuw i32 %v4_14898, 16777216
  %v5_148b4 = or i32 %v5_148a8, %v4_148b4
  store i32 %v5_148b0, i32* %r3.global-to-local, align 4
  %v1_148c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_148c4 = add i32 %v1_148c4, 56
  %v3_148c4 = inttoptr i32 %v2_148c4 to i32*
  store i32 %v5_148b4, i32* %v3_148c4, align 4
  %v0_148c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_148c8 = load i32, i32* %r7.global-to-local, align 4
  %v2_148c8 = add i32 %v1_148c8, 60
  %v3_148c8 = inttoptr i32 %v2_148c8 to i32*
  store i32 %v0_148c8, i32* %v3_148c8, align 4
  %v0_148cc = load i32, i32* %r4.global-to-local, align 4
  %v1_148cc = add i32 %v0_148cc, 65
  %v2_148cc = inttoptr i32 %v1_148cc to i8*
  %v3_148cc = load i8, i8* %v2_148cc, align 1
  %v4_148cc = zext i8 %v3_148cc to i32
  %v1_148d0 = add i32 %v0_148cc, 64
  %v2_148d0 = inttoptr i32 %v1_148d0 to i8*
  %v3_148d0 = load i8, i8* %v2_148d0, align 1
  %v4_148d0 = zext i8 %v3_148d0 to i32
  store i32 %v4_148d0, i32* %r3.global-to-local, align 4
  %v1_148d4 = add i32 %v0_148cc, 66
  %v2_148d4 = inttoptr i32 %v1_148d4 to i8*
  %v3_148d4 = load i8, i8* %v2_148d4, align 1
  %v4_148d4 = zext i8 %v3_148d4 to i32
  %v4_148d8 = mul nuw nsw i32 %v4_148cc, 256
  %v5_148d8 = or i32 %v4_148d0, %v4_148d8
  store i32 %v5_148d8, i32* %r3.global-to-local, align 4
  %v1_148dc = add i32 %v0_148cc, 67
  %v2_148dc = inttoptr i32 %v1_148dc to i8*
  %v3_148dc = load i8, i8* %v2_148dc, align 1
  %v4_148dc = zext i8 %v3_148dc to i32
  %v4_148e0 = mul nuw nsw i32 %v4_148d4, 65536
  %v5_148e0 = or i32 %v4_148e0, %v5_148d8
  %v4_148e4 = mul nuw i32 %v4_148dc, 16777216
  %v5_148e4 = or i32 %v5_148e0, %v4_148e4
  store i32 %v5_148e4, i32* %r3.global-to-local, align 4
  %v1_148e8 = load i32, i32* %r7.global-to-local, align 4
  %v2_148e8 = add i32 %v1_148e8, 64
  %v3_148e8 = inttoptr i32 %v2_148e8 to i32*
  store i32 %v5_148e4, i32* %v3_148e8, align 4
  %v0_148ec = load i32, i32* %r4.global-to-local, align 4
  %v1_148ec = add i32 %v0_148ec, 73
  %v2_148ec = inttoptr i32 %v1_148ec to i8*
  %v3_148ec = load i8, i8* %v2_148ec, align 1
  %v4_148ec = zext i8 %v3_148ec to i32
  %v1_148f0 = add i32 %v0_148ec, 72
  %v2_148f0 = inttoptr i32 %v1_148f0 to i8*
  %v3_148f0 = load i8, i8* %v2_148f0, align 1
  %v4_148f0 = zext i8 %v3_148f0 to i32
  store i32 %v4_148f0, i32* %r3.global-to-local, align 4
  %v1_148f4 = add i32 %v0_148ec, 74
  %v2_148f4 = inttoptr i32 %v1_148f4 to i8*
  %v3_148f4 = load i8, i8* %v2_148f4, align 1
  %v4_148f4 = zext i8 %v3_148f4 to i32
  %v4_148f8 = mul nuw nsw i32 %v4_148ec, 256
  %v5_148f8 = or i32 %v4_148f0, %v4_148f8
  store i32 %v5_148f8, i32* %r3.global-to-local, align 4
  %v1_148fc = add i32 %v0_148ec, 75
  %v2_148fc = inttoptr i32 %v1_148fc to i8*
  %v3_148fc = load i8, i8* %v2_148fc, align 1
  %v4_148fc = zext i8 %v3_148fc to i32
  %v4_14900 = mul nuw nsw i32 %v4_148f4, 65536
  %v5_14900 = or i32 %v4_14900, %v5_148f8
  %v4_14904 = mul nuw i32 %v4_148fc, 16777216
  %v5_14904 = or i32 %v5_14900, %v4_14904
  store i32 %v5_14904, i32* %r3.global-to-local, align 4
  %v1_14908 = load i32, i32* %r7.global-to-local, align 4
  %v2_14908 = add i32 %v1_14908, 72
  %v3_14908 = inttoptr i32 %v2_14908 to i32*
  store i32 %v5_14904, i32* %v3_14908, align 4
  %v0_1490c = load i32, i32* %r4.global-to-local, align 4
  %v1_1490c = add i32 %v0_1490c, 81
  %v2_1490c = inttoptr i32 %v1_1490c to i8*
  %v3_1490c = load i8, i8* %v2_1490c, align 1
  %v4_1490c = zext i8 %v3_1490c to i32
  %v1_14910 = add i32 %v0_1490c, 80
  %v2_14910 = inttoptr i32 %v1_14910 to i8*
  %v3_14910 = load i8, i8* %v2_14910, align 1
  %v4_14910 = zext i8 %v3_14910 to i32
  store i32 %v4_14910, i32* %r3.global-to-local, align 4
  %v1_14914 = add i32 %v0_1490c, 82
  %v2_14914 = inttoptr i32 %v1_14914 to i8*
  %v3_14914 = load i8, i8* %v2_14914, align 1
  %v4_14914 = zext i8 %v3_14914 to i32
  %v4_14918 = mul nuw nsw i32 %v4_1490c, 256
  %v5_14918 = or i32 %v4_14910, %v4_14918
  store i32 %v5_14918, i32* %r3.global-to-local, align 4
  %v1_1491c = add i32 %v0_1490c, 83
  %v2_1491c = inttoptr i32 %v1_1491c to i8*
  %v3_1491c = load i8, i8* %v2_1491c, align 1
  %v4_1491c = zext i8 %v3_1491c to i32
  %v4_14920 = mul nuw nsw i32 %v4_14914, 65536
  %v5_14920 = or i32 %v4_14920, %v5_14918
  %v4_14924 = mul nuw i32 %v4_1491c, 16777216
  %v5_14924 = or i32 %v5_14920, %v4_14924
  store i32 %v5_14924, i32* %r3.global-to-local, align 4
  %v1_14928 = load i32, i32* %r7.global-to-local, align 4
  %v2_14928 = add i32 %v1_14928, 80
  %v3_14928 = inttoptr i32 %v2_14928 to i32*
  store i32 %v5_14924, i32* %v3_14928, align 4
  %v0_1492c = load i32, i32* %r4.global-to-local, align 4
  %v1_1492c = add i32 %v0_1492c, 69
  %v2_1492c = inttoptr i32 %v1_1492c to i8*
  %v3_1492c = load i8, i8* %v2_1492c, align 1
  %v4_1492c = zext i8 %v3_1492c to i32
  %v1_14930 = add i32 %v0_1492c, 68
  %v2_14930 = inttoptr i32 %v1_14930 to i8*
  %v3_14930 = load i8, i8* %v2_14930, align 1
  %v4_14930 = zext i8 %v3_14930 to i32
  store i32 %v4_14930, i32* %r3.global-to-local, align 4
  %v1_14934 = add i32 %v0_1492c, 70
  %v2_14934 = inttoptr i32 %v1_14934 to i8*
  %v3_14934 = load i8, i8* %v2_14934, align 1
  %v4_14934 = zext i8 %v3_14934 to i32
  %v4_14938 = mul nuw nsw i32 %v4_1492c, 256
  %v5_14938 = or i32 %v4_14930, %v4_14938
  store i32 %v5_14938, i32* %r3.global-to-local, align 4
  %v1_1493c = add i32 %v0_1492c, 71
  %v2_1493c = inttoptr i32 %v1_1493c to i8*
  %v3_1493c = load i8, i8* %v2_1493c, align 1
  %v4_1493c = zext i8 %v3_1493c to i32
  %v4_14940 = mul nuw nsw i32 %v4_14934, 65536
  %v5_14940 = or i32 %v4_14940, %v5_14938
  %v4_14944 = mul nuw i32 %v4_1493c, 16777216
  %v5_14944 = or i32 %v5_14940, %v4_14944
  store i32 %v5_14944, i32* %r3.global-to-local, align 4
  %v1_14948 = load i32, i32* %r7.global-to-local, align 4
  %v2_14948 = add i32 %v1_14948, 68
  %v3_14948 = inttoptr i32 %v2_14948 to i32*
  store i32 %v5_14944, i32* %v3_14948, align 4
  %v0_1494c = load i32, i32* %r4.global-to-local, align 4
  %v1_1494c = add i32 %v0_1494c, 77
  %v2_1494c = inttoptr i32 %v1_1494c to i8*
  %v3_1494c = load i8, i8* %v2_1494c, align 1
  %v4_1494c = zext i8 %v3_1494c to i32
  %v1_14950 = add i32 %v0_1494c, 76
  %v2_14950 = inttoptr i32 %v1_14950 to i8*
  %v3_14950 = load i8, i8* %v2_14950, align 1
  %v4_14950 = zext i8 %v3_14950 to i32
  store i32 %v4_14950, i32* %r3.global-to-local, align 4
  %v1_14954 = add i32 %v0_1494c, 78
  %v2_14954 = inttoptr i32 %v1_14954 to i8*
  %v3_14954 = load i8, i8* %v2_14954, align 1
  %v4_14954 = zext i8 %v3_14954 to i32
  %v4_14958 = mul nuw nsw i32 %v4_1494c, 256
  %v5_14958 = or i32 %v4_14950, %v4_14958
  store i32 %v5_14958, i32* %r3.global-to-local, align 4
  %v1_1495c = add i32 %v0_1494c, 79
  %v2_1495c = inttoptr i32 %v1_1495c to i8*
  %v3_1495c = load i8, i8* %v2_1495c, align 1
  %v4_1495c = zext i8 %v3_1495c to i32
  %v4_14960 = mul nuw nsw i32 %v4_14954, 65536
  %v5_14960 = or i32 %v4_14960, %v5_14958
  %v4_14964 = mul nuw i32 %v4_1495c, 16777216
  %v5_14964 = or i32 %v5_14960, %v4_14964
  store i32 %v5_14964, i32* %r3.global-to-local, align 4
  %v1_14968 = load i32, i32* %r7.global-to-local, align 4
  %v2_14968 = add i32 %v1_14968, 76
  %v3_14968 = inttoptr i32 %v2_14968 to i32*
  store i32 %v5_14964, i32* %v3_14968, align 4
  %v0_1496c = load i32, i32* %r4.global-to-local, align 4
  %v1_1496c = add i32 %v0_1496c, 85
  %v2_1496c = inttoptr i32 %v1_1496c to i8*
  %v3_1496c = load i8, i8* %v2_1496c, align 1
  %v4_1496c = zext i8 %v3_1496c to i32
  %v1_14970 = add i32 %v0_1496c, 84
  %v2_14970 = inttoptr i32 %v1_14970 to i8*
  %v3_14970 = load i8, i8* %v2_14970, align 1
  %v4_14970 = zext i8 %v3_14970 to i32
  store i32 %v4_14970, i32* %r3.global-to-local, align 4
  %v1_14974 = add i32 %v0_1496c, 86
  %v2_14974 = inttoptr i32 %v1_14974 to i8*
  %v3_14974 = load i8, i8* %v2_14974, align 1
  %v4_14974 = zext i8 %v3_14974 to i32
  %v4_14978 = mul nuw nsw i32 %v4_1496c, 256
  %v5_14978 = or i32 %v4_14970, %v4_14978
  store i32 %v5_14978, i32* %r3.global-to-local, align 4
  %v1_1497c = add i32 %v0_1496c, 87
  %v2_1497c = inttoptr i32 %v1_1497c to i8*
  %v3_1497c = load i8, i8* %v2_1497c, align 1
  %v4_1497c = zext i8 %v3_1497c to i32
  %v4_14980 = mul nuw nsw i32 %v4_14974, 65536
  %v5_14980 = or i32 %v4_14980, %v5_14978
  %v4_14984 = mul nuw i32 %v4_1497c, 16777216
  %v5_14984 = or i32 %v5_14980, %v4_14984
  store i32 %v5_14984, i32* %r3.global-to-local, align 4
  %v1_14988 = load i32, i32* %r7.global-to-local, align 4
  %v2_14988 = add i32 %v1_14988, 84
  %v3_14988 = inttoptr i32 %v2_14988 to i32*
  store i32 %v5_14984, i32* %v3_14988, align 4
  ret i32 %v4_1488c

; uselistorder directives
  uselistorder i32 %v4_1488c, { 1, 0 }
  uselistorder i32 %v0_14880, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_14810, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_147c0, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_146e0, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 79, { 2, 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 80, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 74, { 2, 0, 1 }
  uselistorder i32 59, { 4, 0, 1, 2, 5, 3 }
  uselistorder i32 62, { 6, 5, 0, 1, 2, 3, 4 }
  uselistorder i32 58, { 3, 4, 5, 6, 7, 0, 8, 1, 9, 2, 10 }
  uselistorder i32 61, { 4, 0, 1, 2, 3 }
  uselistorder i32 57, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32 55, { 5, 10, 0, 6, 4, 1, 7, 2, 8, 3, 9 }
  uselistorder i32 54, { 4, 3, 0, 5, 1, 6, 2, 7 }
  uselistorder i32 53, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 51, { 3, 1, 4, 0, 5, 2, 6 }
  uselistorder i32 47, { 5, 6, 7, 8, 9, 1, 10, 2, 11, 0, 12, 13, 3, 14, 4 }
  uselistorder i32 50, { 2, 0, 3, 1, 4 }
  uselistorder i32 46, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32 49, { 2, 0, 3, 1, 4 }
  uselistorder i32 45, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32 39, { 5, 6, 0, 1, 7, 2, 8, 3, 9, 4 }
  uselistorder i32 38, { 4, 3, 0, 5, 1, 6, 2, 7, 8, 9, 10, 11 }
  uselistorder i32 37, { 3, 0, 4, 1, 5, 2, 6, 7, 8, 9 }
  uselistorder i32 33, { 6, 0, 7, 1, 8, 2, 9, 3, 10, 11, 4, 5, 12 }
  uselistorder i32 30, { 5, 1, 6, 2, 7, 3, 8, 0, 9, 4, 10 }
  uselistorder i32 29, { 8, 1, 0, 2, 9, 3, 10, 4, 11, 12, 13, 6, 5, 7 }
  uselistorder i32 26, { 5, 0, 1, 2, 6, 3, 7, 4, 8, 9 }
  uselistorder i32 25, { 7, 14, 15, 1, 0, 2, 8, 3, 9, 4, 10, 6, 11, 12, 13, 5, 16, 17 }
  uselistorder i32 23, { 4, 1, 5, 0, 6, 7, 8, 2, 3, 9 }
  uselistorder i32 22, { 5, 0, 7, 1, 2, 3, 6, 4 }
  uselistorder i32 21, { 4, 1, 6, 0, 5, 7, 8, 3, 9, 2, 10 }
  uselistorder i32 19, { 10, 12, 13, 14, 5, 1, 6, 2, 7, 3, 8, 4, 0, 11, 15, 9, 16 }
  uselistorder i32 18, { 7, 9, 10, 11, 3, 0, 6, 4, 8, 12, 5, 13, 1, 14, 2, 15 }
  uselistorder i32 17, { 13, 16, 0, 3, 31, 32, 4, 33, 34, 5, 1, 14, 6, 15, 7, 17, 8, 18, 9, 19, 10, 20, 11, 21, 22, 2, 23, 24, 25, 12, 26, 27, 28, 29, 30 }
  uselistorder i32 6, { 35, 40, 13, 14, 82, 15, 37, 2, 16, 36, 0, 38, 17, 39, 3, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 4, 29, 41, 42, 43, 5, 44, 45, 46, 47, 6, 48, 49, 50, 51, 7, 52, 8, 53, 54, 30, 55, 9, 56, 57, 58, 31, 59, 10, 60, 61, 62, 32, 63, 64, 65, 66, 67, 33, 68, 11, 69, 70, 71, 72, 73, 74, 34, 75, 12, 76, 81, 1, 77, 78, 79, 80 }
}

define i32 @function_14994(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14994:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14994 = load i32, i32* @r4, align 4
  store i32 %v3_14994, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_149ac = inttoptr i32 %arg2 to i8*
  %v3_149ac = call i32 @function_12ff0(i8* %v2_149ac, i32 0)
  store i32 %v3_149ac, i32* %r0.global-to-local, align 4
  %v0_149b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_149b0 = inttoptr i32 %v0_149b0 to i32*
  %v2_149b0 = load i32, i32* %v1_149b0, align 4
  store i32 %v2_149b0, i32* %r3.global-to-local, align 4
  %v1_149b4 = add i32 %v0_149b0, 4
  %v2_149b4 = inttoptr i32 %v1_149b4 to i32*
  %v3_149b4 = load i32, i32* %v2_149b4, align 4
  store i32 %v3_149b4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_149bc = load i32, i32* %r6.global-to-local, align 4
  %v1_149bc = inttoptr i32 %v0_149bc to i32*
  store i32 %v2_149b0, i32* %v1_149bc, align 4
  %v3_149bc = add i32 %v0_149bc, 4
  %v4_149bc = inttoptr i32 %v3_149bc to i32*
  %v5_149bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_149bc, i32* %v4_149bc, align 4
  %v0_149c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_149c0 = load i32, i32* %r6.global-to-local, align 4
  %v2_149c0 = add i32 %v1_149c0, 12
  %v3_149c0 = inttoptr i32 %v2_149c0 to i32*
  store i32 %v0_149c0, i32* %v3_149c0, align 4
  %v0_149c4 = load i32, i32* %r5.global-to-local, align 4
  %v1_149c4 = add i32 %v0_149c4, 9
  %v2_149c4 = inttoptr i32 %v1_149c4 to i8*
  %v3_149c4 = load i8, i8* %v2_149c4, align 1
  %v4_149c4 = zext i8 %v3_149c4 to i32
  store i32 %v4_149c4, i32* %r2.global-to-local, align 4
  %v1_149c8 = add i32 %v0_149c4, 8
  %v2_149c8 = inttoptr i32 %v1_149c8 to i8*
  %v3_149c8 = load i8, i8* %v2_149c8, align 1
  %v4_149c8 = zext i8 %v3_149c8 to i32
  %v4_149cc = mul nuw nsw i32 %v4_149c4, 256
  %v5_149cc = or i32 %v4_149c8, %v4_149cc
  store i32 %v5_149cc, i32* %r3.global-to-local, align 4
  %v1_149d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_149d0 = add i32 %v1_149d0, 16
  %v3_149d0 = inttoptr i32 %v2_149d0 to i32*
  store i32 %v5_149cc, i32* %v3_149d0, align 4
  %v0_149d4 = load i32, i32* %r5.global-to-local, align 4
  %v1_149d4 = add i32 %v0_149d4, 11
  %v2_149d4 = inttoptr i32 %v1_149d4 to i8*
  %v3_149d4 = load i8, i8* %v2_149d4, align 1
  %v4_149d4 = zext i8 %v3_149d4 to i32
  store i32 %v4_149d4, i32* %r2.global-to-local, align 4
  %v1_149d8 = add i32 %v0_149d4, 10
  %v2_149d8 = inttoptr i32 %v1_149d8 to i8*
  %v3_149d8 = load i8, i8* %v2_149d8, align 1
  %v4_149d8 = zext i8 %v3_149d8 to i32
  %v4_149dc = mul nuw nsw i32 %v4_149d4, 256
  %v5_149dc = or i32 %v4_149d8, %v4_149dc
  store i32 %v5_149dc, i32* %r3.global-to-local, align 4
  %v1_149e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_149e0 = add i32 %v1_149e0, 20
  %v3_149e0 = inttoptr i32 %v2_149e0 to i32*
  store i32 %v5_149dc, i32* %v3_149e0, align 4
  %v0_149e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_149e4 = add i32 %v0_149e4, 13
  %v2_149e4 = inttoptr i32 %v1_149e4 to i8*
  %v3_149e4 = load i8, i8* %v2_149e4, align 1
  %v4_149e4 = zext i8 %v3_149e4 to i32
  store i32 %v4_149e4, i32* %r2.global-to-local, align 4
  %v1_149e8 = add i32 %v0_149e4, 12
  %v2_149e8 = inttoptr i32 %v1_149e8 to i8*
  %v3_149e8 = load i8, i8* %v2_149e8, align 1
  %v4_149e8 = zext i8 %v3_149e8 to i32
  %v4_149ec = mul nuw nsw i32 %v4_149e4, 256
  %v5_149ec = or i32 %v4_149e8, %v4_149ec
  store i32 %v5_149ec, i32* %r3.global-to-local, align 4
  %v1_149f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_149f0 = add i32 %v1_149f0, 24
  %v3_149f0 = inttoptr i32 %v2_149f0 to i32*
  store i32 %v5_149ec, i32* %v3_149f0, align 4
  %v0_149f4 = load i32, i32* %r5.global-to-local, align 4
  %v1_149f4 = add i32 %v0_149f4, 20
  %v2_149f4 = inttoptr i32 %v1_149f4 to i32*
  %v3_149f4 = load i32, i32* %v2_149f4, align 4
  store i32 %v3_149f4, i32* %r3.global-to-local, align 4
  %v1_149f8 = add i32 %v0_149f4, 14
  %v2_149f8 = inttoptr i32 %v1_149f8 to i8*
  %v3_149f8 = load i8, i8* %v2_149f8, align 1
  %v4_149f8 = zext i8 %v3_149f8 to i32
  store i32 %v4_149f8, i32* %r0.global-to-local, align 4
  %v1_149fc = add i32 %v0_149f4, 15
  %v2_149fc = inttoptr i32 %v1_149fc to i8*
  %v3_149fc = load i8, i8* %v2_149fc, align 1
  %v4_149fc = zext i8 %v3_149fc to i32
  store i32 %v4_149fc, i32* %ip.global-to-local, align 4
  %v1_14a00 = add i32 %v0_149f4, 16
  %v2_14a00 = inttoptr i32 %v1_14a00 to i32*
  %v3_14a00 = load i32, i32* %v2_14a00, align 4
  store i32 %v3_14a00, i32* %r1.global-to-local, align 4
  %v1_14a04 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a04 = add i32 %v1_14a04, 44
  %v3_14a04 = inttoptr i32 %v2_14a04 to i32*
  store i32 %v3_149f4, i32* %v3_14a04, align 4
  %v0_14a08 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a08 = add i32 %v0_14a08, 24
  %v2_14a08 = inttoptr i32 %v1_14a08 to i32*
  %v3_14a08 = load i32, i32* %v2_14a08, align 4
  store i32 %v3_14a08, i32* %r3.global-to-local, align 4
  %v1_14a0c = load i32, i32* %r6.global-to-local, align 4
  %v2_14a0c = add i32 %v1_14a0c, 48
  %v3_14a0c = inttoptr i32 %v2_14a0c to i32*
  store i32 %v3_14a08, i32* %v3_14a0c, align 4
  %v0_14a10 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a10 = add i32 %v0_14a10, 28
  %v2_14a10 = inttoptr i32 %v1_14a10 to i32*
  %v3_14a10 = load i32, i32* %v2_14a10, align 4
  store i32 %v3_14a10, i32* %r3.global-to-local, align 4
  %v1_14a14 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a14 = add i32 %v1_14a14, 52
  %v3_14a14 = inttoptr i32 %v2_14a14 to i32*
  store i32 %v3_14a10, i32* %v3_14a14, align 4
  %v0_14a18 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a18 = add i32 %v0_14a18, 32
  %v2_14a18 = inttoptr i32 %v1_14a18 to i32*
  %v3_14a18 = load i32, i32* %v2_14a18, align 4
  store i32 %v3_14a18, i32* %r3.global-to-local, align 4
  %v1_14a1c = load i32, i32* %r6.global-to-local, align 4
  %v2_14a1c = add i32 %v1_14a1c, 56
  %v3_14a1c = inttoptr i32 %v2_14a1c to i32*
  store i32 %v3_14a18, i32* %v3_14a1c, align 4
  %v0_14a20 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a20 = add i32 %v0_14a20, 40
  %v2_14a20 = inttoptr i32 %v1_14a20 to i32*
  %v3_14a20 = load i32, i32* %v2_14a20, align 4
  store i32 %v3_14a20, i32* %r3.global-to-local, align 4
  %v1_14a24 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a24 = add i32 %v1_14a24, 64
  %v3_14a24 = inttoptr i32 %v2_14a24 to i32*
  store i32 %v3_14a20, i32* %v3_14a24, align 4
  %v0_14a28 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a28 = add i32 %v0_14a28, 48
  %v2_14a28 = inttoptr i32 %v1_14a28 to i32*
  %v3_14a28 = load i32, i32* %v2_14a28, align 4
  store i32 %v3_14a28, i32* %r3.global-to-local, align 4
  %v1_14a2c = load i32, i32* %r6.global-to-local, align 4
  %v2_14a2c = add i32 %v1_14a2c, 72
  %v3_14a2c = inttoptr i32 %v2_14a2c to i32*
  store i32 %v3_14a28, i32* %v3_14a2c, align 4
  %v0_14a30 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a30 = add i32 %v0_14a30, 36
  %v2_14a30 = inttoptr i32 %v1_14a30 to i32*
  %v3_14a30 = load i32, i32* %v2_14a30, align 4
  store i32 %v3_14a30, i32* %r3.global-to-local, align 4
  %v1_14a34 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a34 = add i32 %v1_14a34, 60
  %v3_14a34 = inttoptr i32 %v2_14a34 to i32*
  store i32 %v3_14a30, i32* %v3_14a34, align 4
  %v0_14a38 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a38 = add i32 %v0_14a38, 44
  %v2_14a38 = inttoptr i32 %v1_14a38 to i32*
  %v3_14a38 = load i32, i32* %v2_14a38, align 4
  store i32 %v3_14a38, i32* %r3.global-to-local, align 4
  %v0_14a3c = load i32, i32* %r0.global-to-local, align 4
  %v1_14a3c = load i32, i32* %ip.global-to-local, align 4
  %v4_14a3c = mul i32 %v1_14a3c, 256
  %v5_14a3c = or i32 %v4_14a3c, %v0_14a3c
  store i32 %v5_14a3c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_14a44 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a44 = add i32 %v1_14a44, 28
  %v3_14a44 = inttoptr i32 %v2_14a44 to i32*
  store i32 %v5_14a3c, i32* %v3_14a44, align 4
  %v0_14a48 = load i32, i32* %r1.global-to-local, align 4
  %v1_14a48 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a48 = add i32 %v1_14a48, 32
  %v3_14a48 = inttoptr i32 %v2_14a48 to i32*
  store i32 %v0_14a48, i32* %v3_14a48, align 4
  %v0_14a4c = load i32, i32* %r2.global-to-local, align 4
  %v1_14a4c = load i32, i32* %r6.global-to-local, align 4
  %v2_14a4c = add i32 %v1_14a4c, 36
  %v3_14a4c = inttoptr i32 %v2_14a4c to i32*
  store i32 %v0_14a4c, i32* %v3_14a4c, align 4
  %v0_14a50 = load i32, i32* %r3.global-to-local, align 4
  %v1_14a50 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a50 = add i32 %v1_14a50, 68
  %v3_14a50 = inttoptr i32 %v2_14a50 to i32*
  store i32 %v0_14a50, i32* %v3_14a50, align 4
  %v0_14a54 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a54 = add i32 %v0_14a54, 52
  %v2_14a54 = inttoptr i32 %v1_14a54 to i32*
  %v3_14a54 = load i32, i32* %v2_14a54, align 4
  store i32 %v3_14a54, i32* %r3.global-to-local, align 4
  %v1_14a58 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a58 = add i32 %v1_14a58, 76
  %v3_14a58 = inttoptr i32 %v2_14a58 to i32*
  store i32 %v3_14a54, i32* %v3_14a58, align 4
  %v2_14a5c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14a5c, i32* %r4.global-to-local, align 4
  ret i32 %v5_14a3c

; uselistorder directives
  uselistorder i32 %v0_149f4, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 6, 4, 5, 1, 2, 3, 0, 7 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 14, 12, 13, 1, 5, 44, 6, 15, 16, 0, 7, 17, 18, 19, 8, 20, 21, 22, 9, 23, 24, 25, 10, 26, 27, 28, 11, 29, 30, 31, 2, 32, 33, 34, 35, 36, 3, 37, 38, 39, 40, 41, 4, 42, 43 }
  uselistorder i32 56, { 8, 5, 6, 7, 9, 0, 10, 1, 11, 2, 12, 3, 4 }
  uselistorder i32 52, { 4, 5, 2, 3, 6, 7, 0, 8, 1, 9 }
  uselistorder i32 15, { 10, 8, 7, 3, 0, 9, 4, 5, 1, 11, 12, 6, 13, 14, 15, 16, 2, 17 }
  uselistorder i32 14, { 17, 14, 25, 6, 0, 7, 1, 8, 2, 9, 3, 13, 10, 15, 11, 16, 12, 18, 19, 4, 20, 21, 22, 23, 5, 24 }
  uselistorder i32 13, { 12, 6, 5, 7, 8, 9, 10, 4, 11, 0, 13, 14, 15, 16, 17, 1, 18, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 3, 38, 39 }
  uselistorder i32 9, { 45, 46, 47, 8, 5, 63, 9, 34, 6, 35, 11, 33, 29, 12, 32, 10, 3, 36, 30, 37, 2, 31, 13, 38, 14, 39, 15, 40, 16, 41, 17, 42, 18, 43, 44, 19, 20, 21, 22, 0, 23, 24, 1, 25, 26, 27, 59, 48, 49, 28, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 64, 65, 7, 66, 4, 62 }
  uselistorder i32 (i8*, i32)* @function_12ff0, { 2, 0, 8, 7, 1, 3, 4, 5, 6 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_14a60() local_unnamed_addr {
dec_label_pc_14a60:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_14a60 = load i32, i32* @r1, align 4
  %v1_14a60 = load i32, i32* @r0, align 4
  %v2_14a60 = sub i32 %v0_14a60, %v1_14a60
  %v3_14a60 = icmp ult i32 %v0_14a60, %v1_14a60
  %v4_14a60 = xor i32 %v1_14a60, %v0_14a60
  %v5_14a60 = xor i32 %v2_14a60, %v0_14a60
  %v6_14a60 = and i32 %v5_14a60, %v4_14a60
  %v7_14a60 = icmp slt i32 %v6_14a60, 0
  store i1 %v7_14a60, i1* %cpsr_v.global-to-local, align 1
  %v8_14a60 = icmp slt i32 %v2_14a60, 0
  store i1 %v8_14a60, i1* %cpsr_n.global-to-local, align 1
  %v9_14a60 = icmp eq i32 %v0_14a60, %v1_14a60
  store i1 %v9_14a60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14a60, label %dec_label_pc_14cac, label %dec_label_pc_14a68

dec_label_pc_14a68:                               ; preds = %dec_label_pc_14a60
  br i1 %v9_14a60, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_14a68
  %merge = phi i32 [ %v0_14a60, %dec_label_pc_14a68 ], [ %v2_14d40, %bb141 ], [ %v11_14d5c, %bb144 ], [ %v7_14d5c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_14a68
  store i32 %v1_14a60, i32* %stack_var_-8, align 4
  %v0_14a70 = load i32, i32* @r2, align 4
  %v2_14a70 = add i32 %v0_14a70, -4
  store i32 %v2_14a70, i32* %r2.global-to-local, align 4
  %v4_14a70 = sub i32 3, %v0_14a70
  %v5_14a70 = and i32 %v4_14a70, %v0_14a70
  %v6_14a70 = icmp slt i32 %v5_14a70, 0
  store i1 %v6_14a70, i1* %cpsr_v.global-to-local, align 1
  %v7_14a70 = icmp slt i32 %v2_14a70, 0
  store i1 %v7_14a70, i1* %cpsr_n.global-to-local, align 1
  %v8_14a70 = icmp eq i32 %v0_14a70, 4
  store i1 %v8_14a70, i1* %cpsr_z.global-to-local, align 1
  %v5_14a74 = icmp slt i32 %v0_14a70, 4
  br i1 %v5_14a74, label %bb131, label %dec_label_pc_14a78

dec_label_pc_14a78:                               ; preds = %bb
  %v1_14a78 = urem i32 %v1_14a60, 4
  store i32 %v1_14a78, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14a78 = icmp eq i32 %v1_14a78, 0
  store i1 %v2_14a78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14a78, label %dec_label_pc_14a80, label %dec_label_pc_14b24

dec_label_pc_14a80:                               ; preds = %dec_label_pc_14a78
  %v1_14a80 = urem i32 %v0_14a60, 4
  store i32 %v1_14a80, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14a80 = icmp eq i32 %v1_14a80, 0
  store i1 %v2_14a80, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_14a60 to i2
  br i1 %v2_14a80, label %dec_label_pc_14a88, label %dec_label_pc_14b54

dec_label_pc_14a88:                               ; preds = %dec_label_pc_14a80, %dec_label_pc_14b4c
  %v0_14aa092 = phi i32 [ %v1_14a60, %dec_label_pc_14a80 ], [ %v0_14b9c75, %dec_label_pc_14b4c ]
  %v0_14a9c91 = phi i32 [ %v0_14a60, %dec_label_pc_14a80 ], [ %v0_14b4c, %dec_label_pc_14b4c ]
  %v0_14a88 = phi i32 [ %v2_14a70, %dec_label_pc_14a80 ], [ %v2_14b44, %dec_label_pc_14b4c ]
  %v2_14a88 = add i32 %v0_14a88, -8
  store i32 %v2_14a88, i32* %r2.global-to-local, align 4
  %v4_14a88 = sub i32 7, %v0_14a88
  %v5_14a88 = and i32 %v4_14a88, %v0_14a88
  %v6_14a88 = icmp slt i32 %v5_14a88, 0
  store i1 %v6_14a88, i1* %cpsr_v.global-to-local, align 1
  %v7_14a88 = icmp slt i32 %v2_14a88, 0
  store i1 %v7_14a88, i1* %cpsr_n.global-to-local, align 1
  %v8_14a88 = icmp eq i32 %v0_14a88, 8
  store i1 %v8_14a88, i1* %cpsr_z.global-to-local, align 1
  %v5_14a8c = icmp slt i32 %v0_14a88, 8
  br i1 %v5_14a8c, label %dec_label_pc_14adc, label %dec_label_pc_14a90

dec_label_pc_14a90:                               ; preds = %dec_label_pc_14a88
  %v2_14a90 = add i32 %v0_14a88, -28
  store i32 %v2_14a90, i32* %r2.global-to-local, align 4
  %v4_14a90 = sub i32 27, %v0_14a88
  %v5_14a90 = and i32 %v4_14a90, %v2_14a88
  %v6_14a90 = icmp slt i32 %v5_14a90, 0
  store i1 %v6_14a90, i1* %cpsr_v.global-to-local, align 1
  %v7_14a90 = icmp slt i32 %v2_14a90, 0
  store i1 %v7_14a90, i1* %cpsr_n.global-to-local, align 1
  %v8_14a90 = icmp eq i32 %v2_14a88, 20
  store i1 %v8_14a90, i1* %cpsr_z.global-to-local, align 1
  %v5_14a94 = icmp slt i32 %v2_14a88, 20
  br i1 %v5_14a94, label %dec_label_pc_14ac8, label %dec_label_pc_14a98

dec_label_pc_14a98:                               ; preds = %dec_label_pc_14a90
  %v0_14a98 = load i32, i32* @r4, align 4
  store i32 %v0_14a98, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14a9c

dec_label_pc_14a9c:                               ; preds = %dec_label_pc_14a9c.dec_label_pc_14a9c_crit_edge, %dec_label_pc_14a98
  %v0_14aa0 = phi i32 [ %v12_14aa8, %dec_label_pc_14a9c.dec_label_pc_14a9c_crit_edge ], [ %v0_14aa092, %dec_label_pc_14a98 ]
  %v0_14a9c = phi i32 [ %v0_14a9c.pre, %dec_label_pc_14a9c.dec_label_pc_14a9c_crit_edge ], [ %v0_14a9c91, %dec_label_pc_14a98 ]
  %v1_14a9c = inttoptr i32 %v0_14a9c to i32*
  %v2_14a9c = load i32, i32* %v1_14a9c, align 4
  store i32 %v2_14a9c, i32* %r3.global-to-local, align 4
  %v3_14a9c = add i32 %v0_14a9c, 4
  %v4_14a9c = inttoptr i32 %v3_14a9c to i32*
  %v5_14a9c = load i32, i32* %v4_14a9c, align 4
  store i32 %v5_14a9c, i32* %r4.global-to-local, align 4
  %v6_14a9c = add i32 %v0_14a9c, 8
  %v7_14a9c = inttoptr i32 %v6_14a9c to i32*
  %v8_14a9c = load i32, i32* %v7_14a9c, align 4
  store i32 %v8_14a9c, i32* %ip.global-to-local, align 4
  %v9_14a9c = add i32 %v0_14a9c, 12
  %v10_14a9c = inttoptr i32 %v9_14a9c to i32*
  %v11_14a9c = load i32, i32* %v10_14a9c, align 4
  store i32 %v11_14a9c, i32* %lr.global-to-local, align 4
  %v12_14a9c = add i32 %v0_14a9c, 16
  store i32 %v12_14a9c, i32* %r1.global-to-local, align 4
  %v1_14aa0 = inttoptr i32 %v0_14aa0 to i32*
  store i32 %v2_14a9c, i32* %v1_14aa0, align 4
  %v3_14aa0 = add i32 %v0_14aa0, 4
  %v4_14aa0 = inttoptr i32 %v3_14aa0 to i32*
  %v5_14aa0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14aa0, i32* %v4_14aa0, align 4
  %v6_14aa0 = add i32 %v0_14aa0, 8
  %v7_14aa0 = inttoptr i32 %v6_14aa0 to i32*
  %v8_14aa0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14aa0, i32* %v7_14aa0, align 4
  %v9_14aa0 = add i32 %v0_14aa0, 12
  %v10_14aa0 = inttoptr i32 %v9_14aa0 to i32*
  %v11_14aa0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14aa0, i32* %v10_14aa0, align 4
  %v12_14aa0 = add i32 %v0_14aa0, 16
  store i32 %v12_14aa0, i32* %r0.global-to-local, align 4
  %v0_14aa4 = load i32, i32* %r1.global-to-local, align 4
  %v1_14aa4 = inttoptr i32 %v0_14aa4 to i32*
  %v2_14aa4 = load i32, i32* %v1_14aa4, align 4
  store i32 %v2_14aa4, i32* %r3.global-to-local, align 4
  %v3_14aa4 = add i32 %v0_14aa4, 4
  %v4_14aa4 = inttoptr i32 %v3_14aa4 to i32*
  %v5_14aa4 = load i32, i32* %v4_14aa4, align 4
  store i32 %v5_14aa4, i32* %r4.global-to-local, align 4
  %v6_14aa4 = add i32 %v0_14aa4, 8
  %v7_14aa4 = inttoptr i32 %v6_14aa4 to i32*
  %v8_14aa4 = load i32, i32* %v7_14aa4, align 4
  store i32 %v8_14aa4, i32* %ip.global-to-local, align 4
  %v9_14aa4 = add i32 %v0_14aa4, 12
  %v10_14aa4 = inttoptr i32 %v9_14aa4 to i32*
  %v11_14aa4 = load i32, i32* %v10_14aa4, align 4
  store i32 %v11_14aa4, i32* @lr, align 4
  %v12_14aa4 = add i32 %v0_14aa4, 16
  store i32 %v12_14aa4, i32* @r1, align 4
  %v1_14aa8 = inttoptr i32 %v12_14aa0 to i32*
  store i32 %v2_14aa4, i32* %v1_14aa8, align 4
  %v3_14aa8 = add i32 %v0_14aa0, 20
  %v4_14aa8 = inttoptr i32 %v3_14aa8 to i32*
  %v5_14aa8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14aa8, i32* %v4_14aa8, align 4
  %v6_14aa8 = add i32 %v0_14aa0, 24
  %v7_14aa8 = inttoptr i32 %v6_14aa8 to i32*
  %v8_14aa8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14aa8, i32* %v7_14aa8, align 4
  %v9_14aa8 = add i32 %v0_14aa0, 28
  %v10_14aa8 = inttoptr i32 %v9_14aa8 to i32*
  %v11_14aa8 = load i32, i32* @lr, align 4
  store i32 %v11_14aa8, i32* %v10_14aa8, align 4
  %v12_14aa8 = add i32 %v0_14aa0, 32
  store i32 %v12_14aa8, i32* @r0, align 4
  %v0_14aac = load i32, i32* %r2.global-to-local, align 4
  %v2_14aac = add i32 %v0_14aac, -32
  store i32 %v2_14aac, i32* %r2.global-to-local, align 4
  %v6_14ab0 = icmp slt i32 %v0_14aac, 32
  br i1 %v6_14ab0, label %dec_label_pc_14ab4, label %dec_label_pc_14a9c.dec_label_pc_14a9c_crit_edge

dec_label_pc_14a9c.dec_label_pc_14a9c_crit_edge:  ; preds = %dec_label_pc_14a9c
  %v0_14a9c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_14a9c

dec_label_pc_14ab4:                               ; preds = %dec_label_pc_14a9c
  %v4_14ab4 = add i32 %v0_14aac, -16
  %v6_14ab4 = add i32 %v0_14aac, 2147483616
  %v7_14ab4 = and i32 %v4_14ab4, %v6_14ab4
  %v8_14ab4 = icmp slt i32 %v7_14ab4, 0
  store i1 %v8_14ab4, i1* %cpsr_v.global-to-local, align 1
  %v9_14ab4 = icmp slt i32 %v4_14ab4, 0
  store i1 %v9_14ab4, i1* %cpsr_n.global-to-local, align 1
  %v10_14ab4 = icmp eq i32 %v4_14ab4, 0
  store i1 %v10_14ab4, i1* %cpsr_z.global-to-local, align 1
  %v5_14ab8 = icmp slt i32 %v2_14aac, -16
  br i1 %v5_14ab8, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_14ab4
  %v6_14ab8 = load i32, i32* @r1, align 4
  %v7_14ab8 = inttoptr i32 %v6_14ab8 to i32*
  %v8_14ab8 = load i32, i32* %v7_14ab8, align 4
  store i32 %v8_14ab8, i32* %r3.global-to-local, align 4
  %v9_14ab8 = add i32 %v6_14ab8, 4
  %v10_14ab8 = inttoptr i32 %v9_14ab8 to i32*
  %v11_14ab8 = load i32, i32* %v10_14ab8, align 4
  store i32 %v11_14ab8, i32* %r4.global-to-local, align 4
  %v12_14ab8 = add i32 %v6_14ab8, 8
  %v13_14ab8 = inttoptr i32 %v12_14ab8 to i32*
  %v14_14ab8 = load i32, i32* %v13_14ab8, align 4
  store i32 %v14_14ab8, i32* %ip.global-to-local, align 4
  %v15_14ab8 = add i32 %v6_14ab8, 12
  %v16_14ab8 = inttoptr i32 %v15_14ab8 to i32*
  %v17_14ab8 = load i32, i32* %v16_14ab8, align 4
  store i32 %v17_14ab8, i32* @lr, align 4
  %v18_14ab8 = add i32 %v6_14ab8, 16
  store i32 %v18_14ab8, i32* @r1, align 4
  %v7_14abc = inttoptr i32 %v12_14aa8 to i32*
  store i32 %v8_14ab8, i32* %v7_14abc, align 4
  %v9_14abc = add i32 %v0_14aa0, 36
  %v10_14abc = inttoptr i32 %v9_14abc to i32*
  %v11_14abc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_14abc, i32* %v10_14abc, align 4
  %v12_14abc = add i32 %v0_14aa0, 40
  %v13_14abc = inttoptr i32 %v12_14abc to i32*
  %v14_14abc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v14_14abc, i32* %v13_14abc, align 4
  %v15_14abc = add i32 %v0_14aa0, 44
  %v16_14abc = inttoptr i32 %v15_14abc to i32*
  %v17_14abc = load i32, i32* @lr, align 4
  store i32 %v17_14abc, i32* %v16_14abc, align 4
  %v18_14abc = add i32 %v0_14aa0, 48
  store i32 %v18_14abc, i32* @r0, align 4
  %v6_14ac0 = load i32, i32* %r2.global-to-local, align 4
  %v7_14ac0 = add i32 %v6_14ac0, -16
  store i32 %v7_14ac0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14ab4, %bb128
  %v3_14ad0101 = phi i32 [ %v12_14aa8, %dec_label_pc_14ab4 ], [ %v18_14abc, %bb128 ]
  %v0_14ac895 = phi i32 [ %v2_14aac, %dec_label_pc_14ab4 ], [ %v7_14ac0, %bb128 ]
  %v2_14ac4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14ac4, i32* @r4, align 4
  br label %dec_label_pc_14ac8

dec_label_pc_14ac8:                               ; preds = %dec_label_pc_14a90, %.thread1
  %v3_14ad0100 = phi i32 [ %v0_14aa092, %dec_label_pc_14a90 ], [ %v3_14ad0101, %.thread1 ]
  %v0_14ac8 = phi i32 [ %v2_14a90, %dec_label_pc_14a90 ], [ %v0_14ac895, %.thread1 ]
  %v1_14ac8 = add i32 %v0_14ac8, 20
  store i32 %v1_14ac8, i32* %r2.global-to-local, align 4
  %v3_14ac8 = sub i32 0, %v0_14ac8
  %v4_14ac8 = and i32 %v1_14ac8, %v3_14ac8
  %v5_14ac8 = icmp slt i32 %v4_14ac8, 0
  store i1 %v5_14ac8, i1* %cpsr_v.global-to-local, align 1
  %v6_14ac8 = icmp slt i32 %v1_14ac8, 0
  store i1 %v6_14ac8, i1* %cpsr_n.global-to-local, align 1
  %v7_14ac8 = icmp eq i32 %v1_14ac8, 0
  store i1 %v7_14ac8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14acc

dec_label_pc_14acc:                               ; preds = %.thread117, %dec_label_pc_14ac8
  %v0_14adc.pre147 = phi i32 [ %v0_14adc.pre, %.thread117 ], [ %v1_14ac8, %dec_label_pc_14ac8 ]
  %v3_14ad0 = phi i32 [ %v3_14ad098118, %.thread117 ], [ %v3_14ad0100, %dec_label_pc_14ac8 ]
  %v1_14ad4 = phi i1 [ %v1_14ad8, %.thread117 ], [ %v5_14ac8, %dec_label_pc_14ac8 ]
  %v0_14ad4 = phi i1 [ %v0_14ad8, %.thread117 ], [ %v6_14ac8, %dec_label_pc_14ac8 ]
  %v2_14acc = xor i1 %v1_14ad4, %v0_14ad4
  br i1 %v2_14acc, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_14acc
  %v3_14acc = load i32, i32* @r1, align 4
  %v4_14acc = inttoptr i32 %v3_14acc to i32*
  %v5_14acc = load i32, i32* %v4_14acc, align 4
  store i32 %v5_14acc, i32* %r3.global-to-local, align 4
  %v6_14acc = add i32 %v3_14acc, 4
  %v7_14acc = inttoptr i32 %v6_14acc to i32*
  %v8_14acc = load i32, i32* %v7_14acc, align 4
  store i32 %v8_14acc, i32* %ip.global-to-local, align 4
  %v9_14acc = add i32 %v3_14acc, 8
  %v10_14acc = inttoptr i32 %v9_14acc to i32*
  %v11_14acc = load i32, i32* %v10_14acc, align 4
  store i32 %v11_14acc, i32* @lr, align 4
  %v12_14acc = add i32 %v3_14acc, 12
  store i32 %v12_14acc, i32* @r1, align 4
  %v4_14ad0 = inttoptr i32 %v3_14ad0 to i32*
  store i32 %v5_14acc, i32* %v4_14ad0, align 4
  %v6_14ad0 = add i32 %v3_14ad0, 4
  %v7_14ad0 = inttoptr i32 %v6_14ad0 to i32*
  %v8_14ad0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14ad0, i32* %v7_14ad0, align 4
  %v9_14ad0 = add i32 %v3_14ad0, 8
  %v10_14ad0 = inttoptr i32 %v9_14ad0 to i32*
  %v11_14ad0 = load i32, i32* @lr, align 4
  store i32 %v11_14ad0, i32* %v10_14ad0, align 4
  %v12_14ad0 = add i32 %v3_14ad0, 12
  store i32 %v12_14ad0, i32* @r0, align 4
  %v3_14ad4 = load i32, i32* %r2.global-to-local, align 4
  %v4_14ad4 = add i32 %v3_14ad4, -12
  store i32 %v4_14ad4, i32* %r2.global-to-local, align 4
  %v6_14ad4 = sub i32 11, %v3_14ad4
  %v7_14ad4 = and i32 %v6_14ad4, %v3_14ad4
  %v8_14ad4 = icmp slt i32 %v7_14ad4, 0
  store i1 %v8_14ad4, i1* %cpsr_v.global-to-local, align 1
  %v9_14ad4 = icmp slt i32 %v4_14ad4, 0
  store i1 %v9_14ad4, i1* %cpsr_n.global-to-local, align 1
  %v10_14ad4 = icmp eq i32 %v3_14ad4, 12
  store i1 %v10_14ad4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_14acc, %bb129
  %v0_14adc.pre = phi i32 [ %v4_14ad4, %bb129 ], [ %v0_14adc.pre147, %dec_label_pc_14acc ]
  %v3_14ad098118 = phi i32 [ %v12_14ad0, %bb129 ], [ %v3_14ad0, %dec_label_pc_14acc ]
  %v1_14ad8 = phi i1 [ %v8_14ad4, %bb129 ], [ %v1_14ad4, %dec_label_pc_14acc ]
  %v0_14ad8 = phi i1 [ %v9_14ad4, %bb129 ], [ %v0_14ad4, %dec_label_pc_14acc ]
  %v2_14ad8 = xor i1 %v1_14ad8, %v0_14ad8
  br i1 %v2_14ad8, label %dec_label_pc_14adc, label %dec_label_pc_14acc

dec_label_pc_14adc:                               ; preds = %.thread117, %dec_label_pc_14a88
  %v7_14aec = phi i32 [ %v0_14aa092, %dec_label_pc_14a88 ], [ %v3_14ad098118, %.thread117 ]
  %v0_14adc = phi i32 [ %v2_14a88, %dec_label_pc_14a88 ], [ %v0_14adc.pre, %.thread117 ]
  %v2_14adc = add i32 %v0_14adc, 8
  store i32 %v2_14adc, i32* %r2.global-to-local, align 4
  %v4_14adc = sub i32 0, %v0_14adc
  %v5_14adc = and i32 %v2_14adc, %v4_14adc
  %v6_14adc = icmp slt i32 %v5_14adc, 0
  store i1 %v6_14adc, i1* %cpsr_v.global-to-local, align 1
  %v7_14adc = icmp slt i32 %v2_14adc, 0
  store i1 %v7_14adc, i1* %cpsr_n.global-to-local, align 1
  %v8_14adc = icmp eq i32 %v2_14adc, 0
  store i1 %v8_14adc, i1* %cpsr_z.global-to-local, align 1
  %v5_14ae0 = icmp slt i32 %v0_14adc, -8
  br i1 %v5_14ae0, label %bb131, label %dec_label_pc_14ae4

dec_label_pc_14ae4:                               ; preds = %dec_label_pc_14adc
  %v6_14ae4 = add i32 %v0_14adc, 4
  store i32 %v6_14ae4, i32* %r2.global-to-local, align 4
  %v8_14ae4 = sub i32 -5, %v0_14adc
  %v9_14ae4 = and i32 %v8_14ae4, %v2_14adc
  %v10_14ae4 = icmp slt i32 %v9_14ae4, 0
  store i1 %v10_14ae4, i1* %cpsr_v.global-to-local, align 1
  %v11_14ae4 = icmp slt i32 %v6_14ae4, 0
  store i1 %v11_14ae4, i1* %cpsr_n.global-to-local, align 1
  %v12_14ae4 = icmp eq i32 %v2_14adc, 4
  store i1 %v12_14ae4, i1* %cpsr_z.global-to-local, align 1
  %v5_14ae8 = icmp slt i32 %v2_14adc, 4
  %v6_14ae8 = load i32, i32* @r1, align 4
  %v7_14ae8 = inttoptr i32 %v6_14ae8 to i32*
  %v8_14ae8 = load i32, i32* %v7_14ae8, align 4
  store i32 %v8_14ae8, i32* %r3.global-to-local, align 4
  %v10_14ae8 = add i32 %v6_14ae8, 4
  br i1 %v5_14ae8, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_14ae4
  store i32 %v10_14ae8, i32* @r1, align 4
  %v8_14aec = inttoptr i32 %v7_14aec to i32*
  store i32 %v8_14ae8, i32* %v8_14aec, align 4
  %v9_14aec = load i32, i32* @r0, align 4
  %v10_14aec = add i32 %v9_14aec, 4
  store i32 %v10_14aec, i32* @r0, align 4
  %v0_14afc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_14ae4
  %v10_14af0 = inttoptr i32 %v10_14ae8 to i32*
  %v11_14af0 = load i32, i32* %v10_14af0, align 4
  store i32 %v11_14af0, i32* %ip.global-to-local, align 4
  %v12_14af0 = add i32 %v6_14ae8, 8
  store i32 %v12_14af0, i32* @r1, align 4
  %v7_14af4 = inttoptr i32 %v7_14aec to i32*
  store i32 %v8_14ae8, i32* %v7_14af4, align 4
  %v9_14af4 = add i32 %v7_14aec, 4
  %v10_14af4 = inttoptr i32 %v9_14af4 to i32*
  %v11_14af4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_14af4, i32* %v10_14af4, align 4
  %v12_14af4 = add i32 %v7_14aec, 8
  store i32 %v12_14af4, i32* @r0, align 4
  %v6_14af8 = load i32, i32* %r2.global-to-local, align 4
  %v7_14af8 = add i32 %v6_14af8, -4
  store i32 %v7_14af8, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_14adc, %bb, %dec_label_pc_14ca4, %dec_label_pc_14c38, %dec_label_pc_14bcc, %bb130
  %v2_14b0c = phi i32 [ %v10_14aec, %.thread5 ], [ %v0_14b9c75, %.thread11 ], [ %v7_14aec, %dec_label_pc_14adc ], [ %v1_14a60, %bb ], [ %v2_14b0c113, %dec_label_pc_14ca4 ], [ %v2_14b0c112, %dec_label_pc_14c38 ], [ %v2_14b0c111, %dec_label_pc_14bcc ], [ %v12_14af4, %bb130 ]
  %v0_14afc = phi i32 [ %v0_14afc.pre, %.thread5 ], [ %v2_14b44, %.thread11 ], [ %v2_14adc, %dec_label_pc_14adc ], [ %v2_14a70, %bb ], [ %v0_14afc109, %dec_label_pc_14ca4 ], [ %v0_14afc108, %dec_label_pc_14c38 ], [ %v0_14afc107, %dec_label_pc_14bcc ], [ %v7_14af8, %bb130 ]
  %v1_14afc = add i32 %v0_14afc, 4
  store i32 %v1_14afc, i32* %r2.global-to-local, align 4
  %v3_14afc = sub i32 0, %v0_14afc
  %v4_14afc = and i32 %v1_14afc, %v3_14afc
  %v5_14afc = icmp slt i32 %v4_14afc, 0
  store i1 %v5_14afc, i1* %cpsr_v.global-to-local, align 1
  %v6_14afc = icmp slt i32 %v1_14afc, 0
  store i1 %v6_14afc, i1* %cpsr_n.global-to-local, align 1
  %v7_14afc = icmp eq i32 %v1_14afc, 0
  store i1 %v7_14afc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14afc, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_14b00 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_14b00, i32* %r0.global-to-local, align 4
  ret i32 %v3_14b00

bb133:                                            ; preds = %bb131
  %v1_14b04 = add i32 %v0_14afc, 2
  %v3_14b04 = sub i32 -3, %v0_14afc
  %v4_14b04 = and i32 %v3_14b04, %v1_14afc
  %v5_14b04 = icmp slt i32 %v4_14b04, 0
  store i1 %v5_14b04, i1* %cpsr_v.global-to-local, align 1
  %v6_14b04 = icmp slt i32 %v1_14b04, 0
  store i1 %v6_14b04, i1* %cpsr_n.global-to-local, align 1
  %v7_14b04 = icmp eq i32 %v1_14afc, 2
  store i1 %v7_14b04, i1* %cpsr_z.global-to-local, align 1
  %v0_14b08 = load i32, i32* @r1, align 4
  %v1_14b08 = inttoptr i32 %v0_14b08 to i8*
  %v2_14b08 = load i8, i8* %v1_14b08, align 1
  %v3_14b08 = zext i8 %v2_14b08 to i32
  store i32 %v3_14b08, i32* %r3.global-to-local, align 4
  %v5_14b08 = add i32 %v0_14b08, 1
  store i32 %v5_14b08, i32* %r1.global-to-local, align 4
  %v3_14b0c = inttoptr i32 %v2_14b0c to i8*
  store i8 %v2_14b08, i8* %v3_14b0c, align 1
  %v4_14b0c = load i32, i32* @r0, align 4
  %v5_14b0c = add i32 %v4_14b0c, 1
  store i32 %v5_14b0c, i32* %r0.global-to-local, align 4
  %v0_14b10 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14b10 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14b10 = xor i1 %v0_14b10, %v1_14b10
  br i1 %v2_14b10, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_14b10 = load i32, i32* %r1.global-to-local, align 4
  %v4_14b10 = inttoptr i32 %v3_14b10 to i8*
  %v5_14b10 = load i8, i8* %v4_14b10, align 1
  %v6_14b10 = zext i8 %v5_14b10 to i32
  store i32 %v6_14b10, i32* %r3.global-to-local, align 4
  %v8_14b10 = add i32 %v3_14b10, 1
  store i32 %v8_14b10, i32* %r1.global-to-local, align 4
  %v6_14b14 = inttoptr i32 %v5_14b0c to i8*
  store i8 %v5_14b10, i8* %v6_14b14, align 1
  %v7_14b14 = load i32, i32* %r0.global-to-local, align 4
  %v8_14b14 = add i32 %v7_14b14, 1
  store i32 %v8_14b14, i32* %r0.global-to-local, align 4
  %v1_14b18.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14b18.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_14b1c = phi i32 [ %v8_14b14, %bb134 ], [ %v5_14b0c, %bb133 ]
  %v2_14b1c = phi i1 [ %v2_14b18.pre, %bb134 ], [ %v1_14b10, %bb133 ]
  %v1_14b1c = phi i1 [ %v1_14b18.pre, %bb134 ], [ %v0_14b10, %bb133 ]
  %v0_14b18 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14b18 = xor i1 %v2_14b1c, %v1_14b1c
  %v4_14b18 = or i1 %v0_14b18, %v3_14b18
  br i1 %v4_14b18, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_14b18 = load i32, i32* %r1.global-to-local, align 4
  %v6_14b18 = inttoptr i32 %v5_14b18 to i8*
  %v7_14b18 = load i8, i8* %v6_14b18, align 1
  %v8_14b18 = zext i8 %v7_14b18 to i32
  store i32 %v8_14b18, i32* %r3.global-to-local, align 4
  %v10_14b18 = add i32 %v5_14b18, 1
  store i32 %v10_14b18, i32* %r1.global-to-local, align 4
  %v8_14b1c = inttoptr i32 %v7_14b1c to i8*
  store i8 %v7_14b18, i8* %v8_14b1c, align 1
  %v9_14b1c = load i32, i32* %r0.global-to-local, align 4
  %v10_14b1c = add i32 %v9_14b1c, 1
  store i32 %v10_14b1c, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_14b20 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14b20, i32* %r0.global-to-local, align 4
  ret i32 %v2_14b20

dec_label_pc_14b24:                               ; preds = %dec_label_pc_14a78
  %v1_14b24 = sub nsw i32 4, %v1_14a78
  store i32 %v1_14b24, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14b28 = icmp ult i32 %v1_14b24, 2
  store i1 %v8_14b28, i1* %cpsr_n.global-to-local, align 1
  %v9_14b28 = icmp eq i32 %v1_14b24, 2
  store i1 %v9_14b28, i1* %cpsr_z.global-to-local, align 1
  %v1_14b2c = inttoptr i32 %v0_14a60 to i8*
  %v2_14b2c = load i8, i8* %v1_14b2c, align 1
  %v3_14b2c = zext i8 %v2_14b2c to i32
  store i32 %v3_14b2c, i32* %r3.global-to-local, align 4
  %v5_14b2c = add i32 %v0_14a60, 1
  store i32 %v5_14b2c, i32* @r1, align 4
  %v3_14b30 = inttoptr i32 %v1_14a60 to i8*
  store i8 %v2_14b2c, i8* %v3_14b30, align 1
  %v4_14b30 = load i32, i32* @r0, align 4
  %v5_14b30 = add i32 %v4_14b30, 1
  store i32 %v5_14b30, i32* @r0, align 4
  br i1 %v8_14b28, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_14b24
  %v6_14b34 = load i32, i32* @r1, align 4
  %v7_14b34 = inttoptr i32 %v6_14b34 to i8*
  %v8_14b34 = load i8, i8* %v7_14b34, align 1
  %v9_14b34 = zext i8 %v8_14b34 to i32
  store i32 %v9_14b34, i32* %r3.global-to-local, align 4
  %v11_14b34 = add i32 %v6_14b34, 1
  store i32 %v11_14b34, i32* @r1, align 4
  %v9_14b38 = inttoptr i32 %v5_14b30 to i8*
  store i8 %v8_14b34, i8* %v9_14b38, align 1
  %v10_14b38 = load i32, i32* @r0, align 4
  %v11_14b38 = add i32 %v10_14b38, 1
  store i32 %v11_14b38, i32* @r0, align 4
  br i1 %v9_14b28, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_14b3c = load i32, i32* @r1, align 4
  %v9_14b3c = inttoptr i32 %v8_14b3c to i8*
  %v10_14b3c = load i8, i8* %v9_14b3c, align 1
  %v11_14b3c = zext i8 %v10_14b3c to i32
  store i32 %v11_14b3c, i32* %r3.global-to-local, align 4
  %v13_14b3c = add i32 %v8_14b3c, 1
  store i32 %v13_14b3c, i32* @r1, align 4
  %v11_14b40 = inttoptr i32 %v11_14b38 to i8*
  store i8 %v10_14b3c, i8* %v11_14b40, align 1
  %v12_14b40 = load i32, i32* @r0, align 4
  %v13_14b40 = add i32 %v12_14b40, 1
  store i32 %v13_14b40, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_14b24, %bb137
  %v0_14b9c75 = phi i32 [ %v11_14b38, %bb136 ], [ %v5_14b30, %dec_label_pc_14b24 ], [ %v13_14b40, %bb137 ]
  %v0_14b44 = load i32, i32* %r2.global-to-local, align 4
  %v1_14b44 = load i32, i32* %ip.global-to-local, align 4
  %v2_14b44 = sub i32 %v0_14b44, %v1_14b44
  store i32 %v2_14b44, i32* %r2.global-to-local, align 4
  %v4_14b44 = xor i32 %v1_14b44, %v0_14b44
  %v5_14b44 = xor i32 %v2_14b44, %v0_14b44
  %v6_14b44 = and i32 %v5_14b44, %v4_14b44
  %v7_14b44 = icmp slt i32 %v6_14b44, 0
  store i1 %v7_14b44, i1* %cpsr_v.global-to-local, align 1
  %v8_14b44 = icmp slt i32 %v2_14b44, 0
  store i1 %v8_14b44, i1* %cpsr_n.global-to-local, align 1
  %v9_14b44 = icmp eq i32 %v0_14b44, %v1_14b44
  store i1 %v9_14b44, i1* %cpsr_z.global-to-local, align 1
  %v5_14b48 = icmp slt i32 %v0_14b44, %v1_14b44
  br i1 %v5_14b48, label %bb131, label %dec_label_pc_14b4c

dec_label_pc_14b4c:                               ; preds = %.thread11
  %v0_14b4c = load i32, i32* @r1, align 4
  %v1_14b4c = urem i32 %v0_14b4c, 4
  store i32 %v1_14b4c, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14b4c = icmp eq i32 %v1_14b4c, 0
  store i1 %v2_14b4c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_14b4c to i2
  br i1 %v2_14b4c, label %dec_label_pc_14a88, label %dec_label_pc_14b54

dec_label_pc_14b54:                               ; preds = %dec_label_pc_14a80, %dec_label_pc_14b4c
  %v0_14b9c74 = phi i32 [ %v1_14a60, %dec_label_pc_14a80 ], [ %v0_14b9c75, %dec_label_pc_14b4c ]
  %v0_14c48 = phi i32 [ %v2_14a70, %dec_label_pc_14a80 ], [ %v2_14b44, %dec_label_pc_14b4c ]
  %v0_14b5c.off0 = phi i2 [ %extract.t, %dec_label_pc_14a80 ], [ %extract.t123, %dec_label_pc_14b4c ]
  %v0_14b54 = phi i32 [ %v0_14a60, %dec_label_pc_14a80 ], [ %v0_14b4c, %dec_label_pc_14b4c ]
  %v1_14b54 = and i32 %v0_14b54, -4
  store i32 %v1_14b54, i32* %r1.global-to-local, align 4
  %v1_14b58 = inttoptr i32 %v1_14b54 to i32*
  %v2_14b58 = load i32, i32* %v1_14b58, align 4
  store i32 %v2_14b58, i32* @lr, align 4
  %v4_14b58 = add i32 %v1_14b54, 4
  store i32 %v4_14b58, i32* %r1.global-to-local, align 4
  %v2_14c40 = add i32 %v0_14c48, -12
  %v4_14c40 = sub i32 11, %v0_14c48
  %v5_14c40 = and i32 %v4_14c40, %v0_14c48
  %v6_14c40 = icmp slt i32 %v5_14c40, 0
  store i1 %v6_14c40, i1* %cpsr_v.global-to-local, align 1
  %v7_14c40 = icmp slt i32 %v2_14c40, 0
  store i1 %v7_14c40, i1* %cpsr_n.global-to-local, align 1
  %v8_14c40 = icmp eq i32 %v0_14c48, 12
  store i1 %v8_14c40, i1* %cpsr_z.global-to-local, align 1
  %v5_14c44 = icmp slt i32 %v0_14c48, 12
  switch i2 %v0_14b5c.off0, label %dec_label_pc_14b68 [
    i2 -1, label %dec_label_pc_14c40
    i2 -2, label %dec_label_pc_14bd4
  ]

dec_label_pc_14b68:                               ; preds = %dec_label_pc_14b54
  br i1 %v5_14c44, label %dec_label_pc_14bb4, label %dec_label_pc_14b70

dec_label_pc_14b70:                               ; preds = %dec_label_pc_14b68
  store i32 %v2_14c40, i32* %r2.global-to-local, align 4
  %v3_14b74 = load i32, i32* @r4, align 4
  store i32 %v3_14b74, i32* %stack_var_-16, align 4
  %v6_14b74 = load i32, i32* @r5, align 4
  store i32 %v6_14b74, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14b78

dec_label_pc_14b78:                               ; preds = %dec_label_pc_14b78.dec_label_pc_14b78_crit_edge, %dec_label_pc_14b70
  %v0_14b9c = phi i32 [ %v12_14b9c, %dec_label_pc_14b78.dec_label_pc_14b78_crit_edge ], [ %v0_14b9c74, %dec_label_pc_14b70 ]
  %v0_14b7c = phi i32 [ %v0_14b7c.pre, %dec_label_pc_14b78.dec_label_pc_14b78_crit_edge ], [ %v4_14b58, %dec_label_pc_14b70 ]
  %v0_14b78 = phi i32 [ %v0_14b78.pre, %dec_label_pc_14b78.dec_label_pc_14b78_crit_edge ], [ %v2_14b58, %dec_label_pc_14b70 ]
  %v3_14b78 = udiv i32 %v0_14b78, 256
  store i32 %v3_14b78, i32* %r3.global-to-local, align 4
  %v1_14b7c = inttoptr i32 %v0_14b7c to i32*
  %v2_14b7c = load i32, i32* %v1_14b7c, align 4
  store i32 %v2_14b7c, i32* %r4.global-to-local, align 4
  %v3_14b7c = add i32 %v0_14b7c, 4
  %v4_14b7c = inttoptr i32 %v3_14b7c to i32*
  %v5_14b7c = load i32, i32* %v4_14b7c, align 4
  store i32 %v5_14b7c, i32* %r5.global-to-local, align 4
  %v6_14b7c = add i32 %v0_14b7c, 8
  %v7_14b7c = inttoptr i32 %v6_14b7c to i32*
  %v8_14b7c = load i32, i32* %v7_14b7c, align 4
  store i32 %v8_14b7c, i32* %ip.global-to-local, align 4
  %v9_14b7c = add i32 %v0_14b7c, 12
  %v10_14b7c = inttoptr i32 %v9_14b7c to i32*
  %v11_14b7c = load i32, i32* %v10_14b7c, align 4
  store i32 %v11_14b7c, i32* @lr, align 4
  %v12_14b7c = add i32 %v0_14b7c, 16
  store i32 %v12_14b7c, i32* %r1.global-to-local, align 4
  %v4_14b80 = mul i32 %v2_14b7c, 16777216
  %v5_14b80 = or i32 %v4_14b80, %v3_14b78
  store i32 %v5_14b80, i32* %r3.global-to-local, align 4
  %v3_14b84 = udiv i32 %v2_14b7c, 256
  %v4_14b88 = mul i32 %v5_14b7c, 16777216
  %v5_14b88 = or i32 %v4_14b88, %v3_14b84
  store i32 %v5_14b88, i32* %r4.global-to-local, align 4
  %v3_14b8c = udiv i32 %v5_14b7c, 256
  %v4_14b90 = mul i32 %v8_14b7c, 16777216
  %v5_14b90 = or i32 %v4_14b90, %v3_14b8c
  store i32 %v5_14b90, i32* %r5.global-to-local, align 4
  %v3_14b94 = udiv i32 %v8_14b7c, 256
  %v4_14b98 = mul i32 %v11_14b7c, 16777216
  %v5_14b98 = or i32 %v4_14b98, %v3_14b94
  store i32 %v5_14b98, i32* %ip.global-to-local, align 4
  %v1_14b9c = inttoptr i32 %v0_14b9c to i32*
  store i32 %v5_14b80, i32* %v1_14b9c, align 4
  %v3_14b9c = add i32 %v0_14b9c, 4
  %v4_14b9c = inttoptr i32 %v3_14b9c to i32*
  %v5_14b9c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14b9c, i32* %v4_14b9c, align 4
  %v6_14b9c = add i32 %v0_14b9c, 8
  %v7_14b9c = inttoptr i32 %v6_14b9c to i32*
  %v8_14b9c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14b9c, i32* %v7_14b9c, align 4
  %v9_14b9c = add i32 %v0_14b9c, 12
  %v10_14b9c = inttoptr i32 %v9_14b9c to i32*
  %v11_14b9c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_14b9c, i32* %v10_14b9c, align 4
  %v12_14b9c = add i32 %v0_14b9c, 16
  store i32 %v12_14b9c, i32* @r0, align 4
  %v0_14ba0 = load i32, i32* %r2.global-to-local, align 4
  %v2_14ba0 = add i32 %v0_14ba0, -16
  store i32 %v2_14ba0, i32* %r2.global-to-local, align 4
  %v6_14ba4 = icmp slt i32 %v0_14ba0, 16
  br i1 %v6_14ba4, label %dec_label_pc_14ba8, label %dec_label_pc_14b78.dec_label_pc_14b78_crit_edge

dec_label_pc_14b78.dec_label_pc_14b78_crit_edge:  ; preds = %dec_label_pc_14b78
  %v0_14b78.pre = load i32, i32* @lr, align 4
  %v0_14b7c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14b78

dec_label_pc_14ba8:                               ; preds = %dec_label_pc_14b78
  %v2_14ba8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14ba8, i32* @r4, align 4
  %v5_14ba8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14ba8, i32* @r5, align 4
  %v2_14bac = add i32 %v0_14ba0, -4
  store i32 %v2_14bac, i32* %r2.global-to-local, align 4
  %v4_14bac = add i32 %v0_14ba0, 2147483632
  %v5_14bac = and i32 %v2_14bac, %v4_14bac
  %v6_14bac = icmp slt i32 %v5_14bac, 0
  store i1 %v6_14bac, i1* %cpsr_v.global-to-local, align 1
  %v7_14bac = icmp slt i32 %v2_14bac, 0
  store i1 %v7_14bac, i1* %cpsr_n.global-to-local, align 1
  %v8_14bac = icmp eq i32 %v2_14bac, 0
  store i1 %v8_14bac, i1* %cpsr_z.global-to-local, align 1
  %v5_14bb0 = icmp slt i32 %v2_14ba0, -12
  br i1 %v5_14bb0, label %dec_label_pc_14bcc, label %dec_label_pc_14bb4

dec_label_pc_14bb4:                               ; preds = %dec_label_pc_14ba8, %dec_label_pc_14b68, %dec_label_pc_14bb4
  %v1_14bc0 = phi i32 [ %v4_14bc0, %dec_label_pc_14bb4 ], [ %v12_14b9c, %dec_label_pc_14ba8 ], [ %v0_14b9c74, %dec_label_pc_14b68 ]
  %v0_14bb4 = load i32, i32* @lr, align 4
  %v3_14bb4 = udiv i32 %v0_14bb4, 256
  store i32 %v3_14bb4, i32* %ip.global-to-local, align 4
  %v0_14bb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_14bb8 = inttoptr i32 %v0_14bb8 to i32*
  %v2_14bb8 = load i32, i32* %v1_14bb8, align 4
  store i32 %v2_14bb8, i32* @lr, align 4
  %v4_14bb8 = add i32 %v0_14bb8, 4
  store i32 %v4_14bb8, i32* %r1.global-to-local, align 4
  %v4_14bbc = mul i32 %v2_14bb8, 16777216
  %v5_14bbc = or i32 %v4_14bbc, %v3_14bb4
  store i32 %v5_14bbc, i32* %ip.global-to-local, align 4
  %v2_14bc0 = inttoptr i32 %v1_14bc0 to i32*
  store i32 %v5_14bbc, i32* %v2_14bc0, align 4
  %v3_14bc0 = load i32, i32* @r0, align 4
  %v4_14bc0 = add i32 %v3_14bc0, 4
  store i32 %v4_14bc0, i32* @r0, align 4
  %v0_14bc4 = load i32, i32* %r2.global-to-local, align 4
  %v2_14bc4 = add i32 %v0_14bc4, -4
  store i32 %v2_14bc4, i32* %r2.global-to-local, align 4
  %v6_14bc8 = icmp slt i32 %v0_14bc4, 4
  br i1 %v6_14bc8, label %dec_label_pc_14bcc.loopexit, label %dec_label_pc_14bb4

dec_label_pc_14bcc.loopexit:                      ; preds = %dec_label_pc_14bb4
  %v4_14bc4 = sub i32 3, %v0_14bc4
  %v5_14bc4 = and i32 %v4_14bc4, %v0_14bc4
  %v6_14bc4 = icmp slt i32 %v5_14bc4, 0
  %v7_14bc4 = icmp slt i32 %v2_14bc4, 0
  store i1 %v6_14bc4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14bc4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14bcc

dec_label_pc_14bcc:                               ; preds = %dec_label_pc_14bcc.loopexit, %dec_label_pc_14ba8
  %v2_14b0c111 = phi i32 [ %v4_14bc0, %dec_label_pc_14bcc.loopexit ], [ %v12_14b9c, %dec_label_pc_14ba8 ]
  %v0_14afc107 = phi i32 [ %v2_14bc4, %dec_label_pc_14bcc.loopexit ], [ %v2_14bac, %dec_label_pc_14ba8 ]
  %v0_14bcc = load i32, i32* %r1.global-to-local, align 4
  %v1_14bcc = add i32 %v0_14bcc, -3
  store i32 %v1_14bcc, i32* @r1, align 4
  br label %bb131

dec_label_pc_14bd4:                               ; preds = %dec_label_pc_14b54
  br i1 %v5_14c44, label %dec_label_pc_14c20, label %dec_label_pc_14bdc

dec_label_pc_14bdc:                               ; preds = %dec_label_pc_14bd4
  store i32 %v2_14c40, i32* %r2.global-to-local, align 4
  %v3_14be0 = load i32, i32* @r4, align 4
  store i32 %v3_14be0, i32* %stack_var_-16, align 4
  %v6_14be0 = load i32, i32* @r5, align 4
  store i32 %v6_14be0, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14be4

dec_label_pc_14be4:                               ; preds = %dec_label_pc_14be4.dec_label_pc_14be4_crit_edge, %dec_label_pc_14bdc
  %v0_14c08 = phi i32 [ %v12_14c08, %dec_label_pc_14be4.dec_label_pc_14be4_crit_edge ], [ %v0_14b9c74, %dec_label_pc_14bdc ]
  %v0_14be8 = phi i32 [ %v0_14be8.pre, %dec_label_pc_14be4.dec_label_pc_14be4_crit_edge ], [ %v4_14b58, %dec_label_pc_14bdc ]
  %v0_14be4 = phi i32 [ %v0_14be4.pre, %dec_label_pc_14be4.dec_label_pc_14be4_crit_edge ], [ %v2_14b58, %dec_label_pc_14bdc ]
  %v3_14be4 = udiv i32 %v0_14be4, 65536
  store i32 %v3_14be4, i32* %r3.global-to-local, align 4
  %v1_14be8 = inttoptr i32 %v0_14be8 to i32*
  %v2_14be8 = load i32, i32* %v1_14be8, align 4
  store i32 %v2_14be8, i32* %r4.global-to-local, align 4
  %v3_14be8 = add i32 %v0_14be8, 4
  %v4_14be8 = inttoptr i32 %v3_14be8 to i32*
  %v5_14be8 = load i32, i32* %v4_14be8, align 4
  store i32 %v5_14be8, i32* %r5.global-to-local, align 4
  %v6_14be8 = add i32 %v0_14be8, 8
  %v7_14be8 = inttoptr i32 %v6_14be8 to i32*
  %v8_14be8 = load i32, i32* %v7_14be8, align 4
  store i32 %v8_14be8, i32* %ip.global-to-local, align 4
  %v9_14be8 = add i32 %v0_14be8, 12
  %v10_14be8 = inttoptr i32 %v9_14be8 to i32*
  %v11_14be8 = load i32, i32* %v10_14be8, align 4
  store i32 %v11_14be8, i32* @lr, align 4
  %v12_14be8 = add i32 %v0_14be8, 16
  store i32 %v12_14be8, i32* %r1.global-to-local, align 4
  %v4_14bec = mul i32 %v2_14be8, 65536
  %v5_14bec = or i32 %v4_14bec, %v3_14be4
  store i32 %v5_14bec, i32* %r3.global-to-local, align 4
  %v3_14bf0 = udiv i32 %v2_14be8, 65536
  %v4_14bf4 = mul i32 %v5_14be8, 65536
  %v5_14bf4 = or i32 %v4_14bf4, %v3_14bf0
  store i32 %v5_14bf4, i32* %r4.global-to-local, align 4
  %v3_14bf8 = udiv i32 %v5_14be8, 65536
  %v4_14bfc = mul i32 %v8_14be8, 65536
  %v5_14bfc = or i32 %v4_14bfc, %v3_14bf8
  store i32 %v5_14bfc, i32* %r5.global-to-local, align 4
  %v3_14c00 = udiv i32 %v8_14be8, 65536
  %v4_14c04 = mul i32 %v11_14be8, 65536
  %v5_14c04 = or i32 %v4_14c04, %v3_14c00
  store i32 %v5_14c04, i32* %ip.global-to-local, align 4
  %v1_14c08 = inttoptr i32 %v0_14c08 to i32*
  store i32 %v5_14bec, i32* %v1_14c08, align 4
  %v3_14c08 = add i32 %v0_14c08, 4
  %v4_14c08 = inttoptr i32 %v3_14c08 to i32*
  %v5_14c08 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14c08, i32* %v4_14c08, align 4
  %v6_14c08 = add i32 %v0_14c08, 8
  %v7_14c08 = inttoptr i32 %v6_14c08 to i32*
  %v8_14c08 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14c08, i32* %v7_14c08, align 4
  %v9_14c08 = add i32 %v0_14c08, 12
  %v10_14c08 = inttoptr i32 %v9_14c08 to i32*
  %v11_14c08 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_14c08, i32* %v10_14c08, align 4
  %v12_14c08 = add i32 %v0_14c08, 16
  store i32 %v12_14c08, i32* @r0, align 4
  %v0_14c0c = load i32, i32* %r2.global-to-local, align 4
  %v2_14c0c = add i32 %v0_14c0c, -16
  store i32 %v2_14c0c, i32* %r2.global-to-local, align 4
  %v6_14c10 = icmp slt i32 %v0_14c0c, 16
  br i1 %v6_14c10, label %dec_label_pc_14c14, label %dec_label_pc_14be4.dec_label_pc_14be4_crit_edge

dec_label_pc_14be4.dec_label_pc_14be4_crit_edge:  ; preds = %dec_label_pc_14be4
  %v0_14be4.pre = load i32, i32* @lr, align 4
  %v0_14be8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14be4

dec_label_pc_14c14:                               ; preds = %dec_label_pc_14be4
  %v2_14c14 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14c14, i32* @r4, align 4
  %v5_14c14 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14c14, i32* @r5, align 4
  %v2_14c18 = add i32 %v0_14c0c, -4
  store i32 %v2_14c18, i32* %r2.global-to-local, align 4
  %v4_14c18 = add i32 %v0_14c0c, 2147483632
  %v5_14c18 = and i32 %v2_14c18, %v4_14c18
  %v6_14c18 = icmp slt i32 %v5_14c18, 0
  store i1 %v6_14c18, i1* %cpsr_v.global-to-local, align 1
  %v7_14c18 = icmp slt i32 %v2_14c18, 0
  store i1 %v7_14c18, i1* %cpsr_n.global-to-local, align 1
  %v8_14c18 = icmp eq i32 %v2_14c18, 0
  store i1 %v8_14c18, i1* %cpsr_z.global-to-local, align 1
  %v5_14c1c = icmp slt i32 %v2_14c0c, -12
  br i1 %v5_14c1c, label %dec_label_pc_14c38, label %dec_label_pc_14c20

dec_label_pc_14c20:                               ; preds = %dec_label_pc_14c14, %dec_label_pc_14bd4, %dec_label_pc_14c20
  %v1_14c2c = phi i32 [ %v4_14c2c, %dec_label_pc_14c20 ], [ %v12_14c08, %dec_label_pc_14c14 ], [ %v0_14b9c74, %dec_label_pc_14bd4 ]
  %v0_14c20 = load i32, i32* @lr, align 4
  %v3_14c20 = udiv i32 %v0_14c20, 65536
  store i32 %v3_14c20, i32* %ip.global-to-local, align 4
  %v0_14c24 = load i32, i32* %r1.global-to-local, align 4
  %v1_14c24 = inttoptr i32 %v0_14c24 to i32*
  %v2_14c24 = load i32, i32* %v1_14c24, align 4
  store i32 %v2_14c24, i32* @lr, align 4
  %v4_14c24 = add i32 %v0_14c24, 4
  store i32 %v4_14c24, i32* %r1.global-to-local, align 4
  %v4_14c28 = mul i32 %v2_14c24, 65536
  %v5_14c28 = or i32 %v4_14c28, %v3_14c20
  store i32 %v5_14c28, i32* %ip.global-to-local, align 4
  %v2_14c2c = inttoptr i32 %v1_14c2c to i32*
  store i32 %v5_14c28, i32* %v2_14c2c, align 4
  %v3_14c2c = load i32, i32* @r0, align 4
  %v4_14c2c = add i32 %v3_14c2c, 4
  store i32 %v4_14c2c, i32* @r0, align 4
  %v0_14c30 = load i32, i32* %r2.global-to-local, align 4
  %v2_14c30 = add i32 %v0_14c30, -4
  store i32 %v2_14c30, i32* %r2.global-to-local, align 4
  %v6_14c34 = icmp slt i32 %v0_14c30, 4
  br i1 %v6_14c34, label %dec_label_pc_14c38.loopexit, label %dec_label_pc_14c20

dec_label_pc_14c38.loopexit:                      ; preds = %dec_label_pc_14c20
  %v4_14c30 = sub i32 3, %v0_14c30
  %v5_14c30 = and i32 %v4_14c30, %v0_14c30
  %v6_14c30 = icmp slt i32 %v5_14c30, 0
  %v7_14c30 = icmp slt i32 %v2_14c30, 0
  store i1 %v6_14c30, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14c30, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14c38

dec_label_pc_14c38:                               ; preds = %dec_label_pc_14c38.loopexit, %dec_label_pc_14c14
  %v2_14b0c112 = phi i32 [ %v4_14c2c, %dec_label_pc_14c38.loopexit ], [ %v12_14c08, %dec_label_pc_14c14 ]
  %v0_14afc108 = phi i32 [ %v2_14c30, %dec_label_pc_14c38.loopexit ], [ %v2_14c18, %dec_label_pc_14c14 ]
  %v0_14c38 = load i32, i32* %r1.global-to-local, align 4
  %v1_14c38 = add i32 %v0_14c38, -2
  store i32 %v1_14c38, i32* @r1, align 4
  br label %bb131

dec_label_pc_14c40:                               ; preds = %dec_label_pc_14b54
  br i1 %v5_14c44, label %dec_label_pc_14c8c, label %dec_label_pc_14c48

dec_label_pc_14c48:                               ; preds = %dec_label_pc_14c40
  store i32 %v2_14c40, i32* %r2.global-to-local, align 4
  %v3_14c4c = load i32, i32* @r4, align 4
  store i32 %v3_14c4c, i32* %stack_var_-16, align 4
  %v6_14c4c = load i32, i32* @r5, align 4
  store i32 %v6_14c4c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14c50

dec_label_pc_14c50:                               ; preds = %dec_label_pc_14c50.dec_label_pc_14c50_crit_edge, %dec_label_pc_14c48
  %v0_14c74 = phi i32 [ %v12_14c74, %dec_label_pc_14c50.dec_label_pc_14c50_crit_edge ], [ %v0_14b9c74, %dec_label_pc_14c48 ]
  %v0_14c54 = phi i32 [ %v0_14c54.pre, %dec_label_pc_14c50.dec_label_pc_14c50_crit_edge ], [ %v4_14b58, %dec_label_pc_14c48 ]
  %v0_14c50 = phi i32 [ %v0_14c50.pre, %dec_label_pc_14c50.dec_label_pc_14c50_crit_edge ], [ %v2_14b58, %dec_label_pc_14c48 ]
  %v3_14c50 = udiv i32 %v0_14c50, 16777216
  store i32 %v3_14c50, i32* %r3.global-to-local, align 4
  %v1_14c54 = inttoptr i32 %v0_14c54 to i32*
  %v2_14c54 = load i32, i32* %v1_14c54, align 4
  store i32 %v2_14c54, i32* %r4.global-to-local, align 4
  %v3_14c54 = add i32 %v0_14c54, 4
  %v4_14c54 = inttoptr i32 %v3_14c54 to i32*
  %v5_14c54 = load i32, i32* %v4_14c54, align 4
  store i32 %v5_14c54, i32* %r5.global-to-local, align 4
  %v6_14c54 = add i32 %v0_14c54, 8
  %v7_14c54 = inttoptr i32 %v6_14c54 to i32*
  %v8_14c54 = load i32, i32* %v7_14c54, align 4
  store i32 %v8_14c54, i32* %ip.global-to-local, align 4
  %v9_14c54 = add i32 %v0_14c54, 12
  %v10_14c54 = inttoptr i32 %v9_14c54 to i32*
  %v11_14c54 = load i32, i32* %v10_14c54, align 4
  store i32 %v11_14c54, i32* @lr, align 4
  %v12_14c54 = add i32 %v0_14c54, 16
  store i32 %v12_14c54, i32* %r1.global-to-local, align 4
  %v4_14c58 = mul i32 %v2_14c54, 256
  %v5_14c58 = or i32 %v4_14c58, %v3_14c50
  store i32 %v5_14c58, i32* %r3.global-to-local, align 4
  %v3_14c5c = udiv i32 %v2_14c54, 16777216
  %v4_14c60 = mul i32 %v5_14c54, 256
  %v5_14c60 = or i32 %v4_14c60, %v3_14c5c
  store i32 %v5_14c60, i32* %r4.global-to-local, align 4
  %v3_14c64 = udiv i32 %v5_14c54, 16777216
  %v4_14c68 = mul i32 %v8_14c54, 256
  %v5_14c68 = or i32 %v4_14c68, %v3_14c64
  store i32 %v5_14c68, i32* %r5.global-to-local, align 4
  %v3_14c6c = udiv i32 %v8_14c54, 16777216
  %v4_14c70 = mul i32 %v11_14c54, 256
  %v5_14c70 = or i32 %v4_14c70, %v3_14c6c
  store i32 %v5_14c70, i32* %ip.global-to-local, align 4
  %v1_14c74 = inttoptr i32 %v0_14c74 to i32*
  store i32 %v5_14c58, i32* %v1_14c74, align 4
  %v3_14c74 = add i32 %v0_14c74, 4
  %v4_14c74 = inttoptr i32 %v3_14c74 to i32*
  %v5_14c74 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14c74, i32* %v4_14c74, align 4
  %v6_14c74 = add i32 %v0_14c74, 8
  %v7_14c74 = inttoptr i32 %v6_14c74 to i32*
  %v8_14c74 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14c74, i32* %v7_14c74, align 4
  %v9_14c74 = add i32 %v0_14c74, 12
  %v10_14c74 = inttoptr i32 %v9_14c74 to i32*
  %v11_14c74 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_14c74, i32* %v10_14c74, align 4
  %v12_14c74 = add i32 %v0_14c74, 16
  store i32 %v12_14c74, i32* @r0, align 4
  %v0_14c78 = load i32, i32* %r2.global-to-local, align 4
  %v2_14c78 = add i32 %v0_14c78, -16
  store i32 %v2_14c78, i32* %r2.global-to-local, align 4
  %v6_14c7c = icmp slt i32 %v0_14c78, 16
  br i1 %v6_14c7c, label %dec_label_pc_14c80, label %dec_label_pc_14c50.dec_label_pc_14c50_crit_edge

dec_label_pc_14c50.dec_label_pc_14c50_crit_edge:  ; preds = %dec_label_pc_14c50
  %v0_14c50.pre = load i32, i32* @lr, align 4
  %v0_14c54.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14c50

dec_label_pc_14c80:                               ; preds = %dec_label_pc_14c50
  %v2_14c80 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14c80, i32* @r4, align 4
  %v5_14c80 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14c80, i32* @r5, align 4
  %v2_14c84 = add i32 %v0_14c78, -4
  store i32 %v2_14c84, i32* %r2.global-to-local, align 4
  %v4_14c84 = add i32 %v0_14c78, 2147483632
  %v5_14c84 = and i32 %v2_14c84, %v4_14c84
  %v6_14c84 = icmp slt i32 %v5_14c84, 0
  store i1 %v6_14c84, i1* %cpsr_v.global-to-local, align 1
  %v7_14c84 = icmp slt i32 %v2_14c84, 0
  store i1 %v7_14c84, i1* %cpsr_n.global-to-local, align 1
  %v8_14c84 = icmp eq i32 %v2_14c84, 0
  store i1 %v8_14c84, i1* %cpsr_z.global-to-local, align 1
  %v5_14c88 = icmp slt i32 %v2_14c78, -12
  br i1 %v5_14c88, label %dec_label_pc_14ca4, label %dec_label_pc_14c8c

dec_label_pc_14c8c:                               ; preds = %dec_label_pc_14c80, %dec_label_pc_14c40, %dec_label_pc_14c8c
  %v1_14c98 = phi i32 [ %v4_14c98, %dec_label_pc_14c8c ], [ %v12_14c74, %dec_label_pc_14c80 ], [ %v0_14b9c74, %dec_label_pc_14c40 ]
  %v0_14c8c = load i32, i32* @lr, align 4
  %v3_14c8c = udiv i32 %v0_14c8c, 16777216
  store i32 %v3_14c8c, i32* %ip.global-to-local, align 4
  %v0_14c90 = load i32, i32* %r1.global-to-local, align 4
  %v1_14c90 = inttoptr i32 %v0_14c90 to i32*
  %v2_14c90 = load i32, i32* %v1_14c90, align 4
  store i32 %v2_14c90, i32* @lr, align 4
  %v4_14c90 = add i32 %v0_14c90, 4
  store i32 %v4_14c90, i32* %r1.global-to-local, align 4
  %v4_14c94 = mul i32 %v2_14c90, 256
  %v5_14c94 = or i32 %v4_14c94, %v3_14c8c
  store i32 %v5_14c94, i32* %ip.global-to-local, align 4
  %v2_14c98 = inttoptr i32 %v1_14c98 to i32*
  store i32 %v5_14c94, i32* %v2_14c98, align 4
  %v3_14c98 = load i32, i32* @r0, align 4
  %v4_14c98 = add i32 %v3_14c98, 4
  store i32 %v4_14c98, i32* @r0, align 4
  %v0_14c9c = load i32, i32* %r2.global-to-local, align 4
  %v2_14c9c = add i32 %v0_14c9c, -4
  store i32 %v2_14c9c, i32* %r2.global-to-local, align 4
  %v6_14ca0 = icmp slt i32 %v0_14c9c, 4
  br i1 %v6_14ca0, label %dec_label_pc_14ca4.loopexit, label %dec_label_pc_14c8c

dec_label_pc_14ca4.loopexit:                      ; preds = %dec_label_pc_14c8c
  %v4_14c9c = sub i32 3, %v0_14c9c
  %v5_14c9c = and i32 %v4_14c9c, %v0_14c9c
  %v6_14c9c = icmp slt i32 %v5_14c9c, 0
  %v7_14c9c = icmp slt i32 %v2_14c9c, 0
  store i1 %v6_14c9c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14c9c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14ca4

dec_label_pc_14ca4:                               ; preds = %dec_label_pc_14ca4.loopexit, %dec_label_pc_14c80
  %v2_14b0c113 = phi i32 [ %v4_14c98, %dec_label_pc_14ca4.loopexit ], [ %v12_14c74, %dec_label_pc_14c80 ]
  %v0_14afc109 = phi i32 [ %v2_14c9c, %dec_label_pc_14ca4.loopexit ], [ %v2_14c84, %dec_label_pc_14c80 ]
  %v0_14ca4 = load i32, i32* %r1.global-to-local, align 4
  %v1_14ca4 = add i32 %v0_14ca4, -1
  store i32 %v1_14ca4, i32* @r1, align 4
  br label %bb131

dec_label_pc_14cac:                               ; preds = %dec_label_pc_14a60
  %v1_14cac = load i32, i32* @r2, align 4
  %v2_14cac = add i32 %v1_14cac, %v0_14a60
  store i32 %v2_14cac, i32* %r1.global-to-local, align 4
  %v2_14cb0 = add i32 %v1_14cac, %v1_14a60
  store i32 %v2_14cb0, i32* %r0.global-to-local, align 4
  %v2_14cb4 = add i32 %v1_14cac, -4
  store i32 %v2_14cb4, i32* %r2.global-to-local, align 4
  %v4_14cb4 = sub i32 3, %v1_14cac
  %v5_14cb4 = and i32 %v4_14cb4, %v1_14cac
  %v6_14cb4 = icmp slt i32 %v5_14cb4, 0
  store i1 %v6_14cb4, i1* %cpsr_v.global-to-local, align 1
  %v7_14cb4 = icmp slt i32 %v2_14cb4, 0
  store i1 %v7_14cb4, i1* %cpsr_n.global-to-local, align 1
  %v8_14cb4 = icmp eq i32 %v1_14cac, 4
  store i1 %v8_14cb4, i1* %cpsr_z.global-to-local, align 1
  %v5_14cb8 = icmp slt i32 %v1_14cac, 4
  br i1 %v5_14cb8, label %bb141, label %dec_label_pc_14cbc

dec_label_pc_14cbc:                               ; preds = %dec_label_pc_14cac
  %v1_14cbc = urem i32 %v2_14cb0, 4
  store i32 %v1_14cbc, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14cbc = icmp eq i32 %v1_14cbc, 0
  store i1 %v2_14cbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14cbc, label %dec_label_pc_14cc4, label %dec_label_pc_14d64

dec_label_pc_14cc4:                               ; preds = %dec_label_pc_14cbc
  %v1_14cc4 = urem i32 %v2_14cac, 4
  store i32 %v1_14cc4, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14cc4 = icmp eq i32 %v1_14cc4, 0
  store i1 %v2_14cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14cc4, label %dec_label_pc_14ccc, label %dec_label_pc_14d90

dec_label_pc_14ccc:                               ; preds = %dec_label_pc_14cc4, %dec_label_pc_14d88
  %v0_14ce448 = phi i32 [ %v2_14cb0, %dec_label_pc_14cc4 ], [ %v0_14dd831, %dec_label_pc_14d88 ]
  %v0_14ce047 = phi i32 [ %v2_14cac, %dec_label_pc_14cc4 ], [ %v0_14d88, %dec_label_pc_14d88 ]
  %v0_14ccc = phi i32 [ %v2_14cb4, %dec_label_pc_14cc4 ], [ %v2_14d80, %dec_label_pc_14d88 ]
  %v2_14ccc = add i32 %v0_14ccc, -8
  store i32 %v2_14ccc, i32* %r2.global-to-local, align 4
  %v4_14ccc = sub i32 7, %v0_14ccc
  %v5_14ccc = and i32 %v4_14ccc, %v0_14ccc
  %v6_14ccc = icmp slt i32 %v5_14ccc, 0
  store i1 %v6_14ccc, i1* %cpsr_v.global-to-local, align 1
  %v7_14ccc = icmp slt i32 %v2_14ccc, 0
  store i1 %v7_14ccc, i1* %cpsr_n.global-to-local, align 1
  %v8_14ccc = icmp eq i32 %v0_14ccc, 8
  store i1 %v8_14ccc, i1* %cpsr_z.global-to-local, align 1
  %v5_14cd0 = icmp slt i32 %v0_14ccc, 8
  br i1 %v5_14cd0, label %dec_label_pc_14d1c, label %dec_label_pc_14cd4

dec_label_pc_14cd4:                               ; preds = %dec_label_pc_14ccc
  %v3_14cd4 = load i32, i32* @r4, align 4
  store i32 %v3_14cd4, i32* %stack_var_-8, align 4
  %v6_14cd4 = load i32, i32* @lr, align 4
  %v2_14cd8 = add i32 %v0_14ccc, -28
  store i32 %v2_14cd8, i32* %r2.global-to-local, align 4
  %v4_14cd8 = sub i32 27, %v0_14ccc
  %v5_14cd8 = and i32 %v4_14cd8, %v2_14ccc
  %v6_14cd8 = icmp slt i32 %v5_14cd8, 0
  store i1 %v6_14cd8, i1* %cpsr_v.global-to-local, align 1
  %v7_14cd8 = icmp slt i32 %v2_14cd8, 0
  store i1 %v7_14cd8, i1* %cpsr_n.global-to-local, align 1
  %v8_14cd8 = icmp eq i32 %v2_14ccc, 20
  store i1 %v8_14cd8, i1* %cpsr_z.global-to-local, align 1
  %v5_14cdc = icmp slt i32 %v2_14ccc, 20
  br i1 %v5_14cdc, label %dec_label_pc_14cf8, label %dec_label_pc_14ce0

dec_label_pc_14ce0:                               ; preds = %dec_label_pc_14cd4, %dec_label_pc_14ce0.dec_label_pc_14ce0_crit_edge
  %v0_14ce4 = phi i32 [ %v1_14cec, %dec_label_pc_14ce0.dec_label_pc_14ce0_crit_edge ], [ %v0_14ce448, %dec_label_pc_14cd4 ]
  %v0_14ce0 = phi i32 [ %v0_14ce0.pre, %dec_label_pc_14ce0.dec_label_pc_14ce0_crit_edge ], [ %v0_14ce047, %dec_label_pc_14cd4 ]
  %v1_14ce0 = add i32 %v0_14ce0, -4
  %v2_14ce0 = inttoptr i32 %v1_14ce0 to i32*
  %v3_14ce0 = load i32, i32* %v2_14ce0, align 4
  store i32 %v3_14ce0, i32* %r3.global-to-local, align 4
  %v4_14ce0 = add i32 %v0_14ce0, -8
  %v5_14ce0 = inttoptr i32 %v4_14ce0 to i32*
  %v6_14ce0 = load i32, i32* %v5_14ce0, align 4
  store i32 %v6_14ce0, i32* %r4.global-to-local, align 4
  %v7_14ce0 = add i32 %v0_14ce0, -12
  %v8_14ce0 = inttoptr i32 %v7_14ce0 to i32*
  %v9_14ce0 = load i32, i32* %v8_14ce0, align 4
  store i32 %v9_14ce0, i32* %ip.global-to-local, align 4
  %v10_14ce0 = add i32 %v0_14ce0, -16
  %v11_14ce0 = inttoptr i32 %v10_14ce0 to i32*
  %v12_14ce0 = load i32, i32* %v11_14ce0, align 4
  store i32 %v12_14ce0, i32* %lr.global-to-local, align 4
  store i32 %v10_14ce0, i32* %r1.global-to-local, align 4
  %v1_14ce4 = add i32 %v0_14ce4, -16
  %v2_14ce4 = inttoptr i32 %v1_14ce4 to i32*
  store i32 %v3_14ce0, i32* %v2_14ce4, align 4
  %v4_14ce4 = add i32 %v0_14ce4, -12
  %v5_14ce4 = inttoptr i32 %v4_14ce4 to i32*
  %v6_14ce4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_14ce4, i32* %v5_14ce4, align 4
  %v7_14ce4 = add i32 %v0_14ce4, -8
  %v8_14ce4 = inttoptr i32 %v7_14ce4 to i32*
  %v9_14ce4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14ce4, i32* %v8_14ce4, align 4
  %v10_14ce4 = add i32 %v0_14ce4, -4
  %v11_14ce4 = inttoptr i32 %v10_14ce4 to i32*
  %v12_14ce4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14ce4, i32* %v11_14ce4, align 4
  store i32 %v1_14ce4, i32* %r0.global-to-local, align 4
  %v0_14ce8 = load i32, i32* %r1.global-to-local, align 4
  %v1_14ce8 = add i32 %v0_14ce8, -4
  %v2_14ce8 = inttoptr i32 %v1_14ce8 to i32*
  %v3_14ce8 = load i32, i32* %v2_14ce8, align 4
  store i32 %v3_14ce8, i32* %r3.global-to-local, align 4
  %v4_14ce8 = add i32 %v0_14ce8, -8
  %v5_14ce8 = inttoptr i32 %v4_14ce8 to i32*
  %v6_14ce8 = load i32, i32* %v5_14ce8, align 4
  store i32 %v6_14ce8, i32* %r4.global-to-local, align 4
  %v7_14ce8 = add i32 %v0_14ce8, -12
  %v8_14ce8 = inttoptr i32 %v7_14ce8 to i32*
  %v9_14ce8 = load i32, i32* %v8_14ce8, align 4
  store i32 %v9_14ce8, i32* %ip.global-to-local, align 4
  %v10_14ce8 = add i32 %v0_14ce8, -16
  %v11_14ce8 = inttoptr i32 %v10_14ce8 to i32*
  %v12_14ce8 = load i32, i32* %v11_14ce8, align 4
  store i32 %v12_14ce8, i32* %lr.global-to-local, align 4
  store i32 %v10_14ce8, i32* %r1.global-to-local, align 4
  %v1_14cec = add i32 %v0_14ce4, -32
  %v2_14cec = inttoptr i32 %v1_14cec to i32*
  store i32 %v3_14ce8, i32* %v2_14cec, align 4
  %v4_14cec = add i32 %v0_14ce4, -28
  %v5_14cec = inttoptr i32 %v4_14cec to i32*
  %v6_14cec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_14cec, i32* %v5_14cec, align 4
  %v7_14cec = add i32 %v0_14ce4, -24
  %v8_14cec = inttoptr i32 %v7_14cec to i32*
  %v9_14cec = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14cec, i32* %v8_14cec, align 4
  %v10_14cec = add i32 %v0_14ce4, -20
  %v11_14cec = inttoptr i32 %v10_14cec to i32*
  %v12_14cec = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14cec, i32* %v11_14cec, align 4
  store i32 %v1_14cec, i32* %r0.global-to-local, align 4
  %v0_14cf0 = load i32, i32* %r2.global-to-local, align 4
  %v2_14cf0 = add i32 %v0_14cf0, -32
  store i32 %v2_14cf0, i32* %r2.global-to-local, align 4
  %v6_14cf4 = icmp slt i32 %v0_14cf0, 32
  br i1 %v6_14cf4, label %dec_label_pc_14cf8.loopexit, label %dec_label_pc_14ce0.dec_label_pc_14ce0_crit_edge

dec_label_pc_14ce0.dec_label_pc_14ce0_crit_edge:  ; preds = %dec_label_pc_14ce0
  %v0_14ce0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14ce0

dec_label_pc_14cf8.loopexit:                      ; preds = %dec_label_pc_14ce0
  %v4_14cf0 = sub i32 31, %v0_14cf0
  %v5_14cf0 = and i32 %v4_14cf0, %v0_14cf0
  %v6_14cf0 = icmp slt i32 %v5_14cf0, 0
  %v7_14cf0 = icmp slt i32 %v2_14cf0, 0
  store i1 %v6_14cf0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14cf0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14cf8

dec_label_pc_14cf8:                               ; preds = %dec_label_pc_14cf8.loopexit, %dec_label_pc_14cd4
  %v6_14d00 = phi i32 [ %v1_14cec, %dec_label_pc_14cf8.loopexit ], [ %v0_14ce448, %dec_label_pc_14cd4 ]
  %v0_14d08.pr = phi i32 [ %v2_14cf0, %dec_label_pc_14cf8.loopexit ], [ %v2_14cd8, %dec_label_pc_14cd4 ]
  %v4_14cf8 = add i32 %v0_14d08.pr, 16
  %v6_14cf8 = sub i32 0, %v0_14d08.pr
  %v7_14cf8 = and i32 %v4_14cf8, %v6_14cf8
  %v8_14cf8 = icmp slt i32 %v7_14cf8, 0
  store i1 %v8_14cf8, i1* %cpsr_v.global-to-local, align 1
  %v9_14cf8 = icmp slt i32 %v4_14cf8, 0
  store i1 %v9_14cf8, i1* %cpsr_n.global-to-local, align 1
  %v10_14cf8 = icmp eq i32 %v4_14cf8, 0
  store i1 %v10_14cf8, i1* %cpsr_z.global-to-local, align 1
  %v5_14cfc = icmp slt i32 %v0_14d08.pr, -16
  br i1 %v5_14cfc, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_14cf8
  %v6_14cfc = load i32, i32* %r1.global-to-local, align 4
  %v7_14cfc = add i32 %v6_14cfc, -4
  %v8_14cfc = inttoptr i32 %v7_14cfc to i32*
  %v9_14cfc = load i32, i32* %v8_14cfc, align 4
  store i32 %v9_14cfc, i32* %r3.global-to-local, align 4
  %v10_14cfc = add i32 %v6_14cfc, -8
  %v11_14cfc = inttoptr i32 %v10_14cfc to i32*
  %v12_14cfc = load i32, i32* %v11_14cfc, align 4
  store i32 %v12_14cfc, i32* %r4.global-to-local, align 4
  %v13_14cfc = add i32 %v6_14cfc, -12
  %v14_14cfc = inttoptr i32 %v13_14cfc to i32*
  %v15_14cfc = load i32, i32* %v14_14cfc, align 4
  store i32 %v15_14cfc, i32* %ip.global-to-local, align 4
  %v16_14cfc = add i32 %v6_14cfc, -16
  %v17_14cfc = inttoptr i32 %v16_14cfc to i32*
  %v18_14cfc = load i32, i32* %v17_14cfc, align 4
  store i32 %v18_14cfc, i32* %lr.global-to-local, align 4
  store i32 %v16_14cfc, i32* %r1.global-to-local, align 4
  %v7_14d00 = add i32 %v6_14d00, -16
  %v8_14d00 = inttoptr i32 %v7_14d00 to i32*
  store i32 %v9_14cfc, i32* %v8_14d00, align 4
  %v10_14d00 = add i32 %v6_14d00, -12
  %v11_14d00 = inttoptr i32 %v10_14d00 to i32*
  %v12_14d00 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_14d00, i32* %v11_14d00, align 4
  %v13_14d00 = add i32 %v6_14d00, -8
  %v14_14d00 = inttoptr i32 %v13_14d00 to i32*
  %v15_14d00 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v15_14d00, i32* %v14_14d00, align 4
  %v16_14d00 = add i32 %v6_14d00, -4
  %v17_14d00 = inttoptr i32 %v16_14d00 to i32*
  %v18_14d00 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_14d00, i32* %v17_14d00, align 4
  store i32 %v7_14d00, i32* %r0.global-to-local, align 4
  %v6_14d04 = load i32, i32* %r2.global-to-local, align 4
  %v7_14d04 = add i32 %v6_14d04, -16
  store i32 %v7_14d04, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_14cf8, %bb138
  %v6_14d10 = phi i32 [ %v7_14d00, %bb138 ], [ %v6_14d00, %dec_label_pc_14cf8 ]
  %v0_14d08 = phi i32 [ %v7_14d04, %bb138 ], [ %v0_14d08.pr, %dec_label_pc_14cf8 ]
  %v4_14d08 = add i32 %v0_14d08, 20
  store i32 %v4_14d08, i32* %r2.global-to-local, align 4
  %v6_14d08 = sub i32 0, %v0_14d08
  %v7_14d08 = and i32 %v4_14d08, %v6_14d08
  %v8_14d08 = icmp slt i32 %v7_14d08, 0
  store i1 %v8_14d08, i1* %cpsr_v.global-to-local, align 1
  %v9_14d08 = icmp slt i32 %v4_14d08, 0
  store i1 %v9_14d08, i1* %cpsr_n.global-to-local, align 1
  %v10_14d08 = icmp eq i32 %v4_14d08, 0
  store i1 %v10_14d08, i1* %cpsr_z.global-to-local, align 1
  %v5_14d0c = icmp slt i32 %v0_14d08, -20
  br i1 %v5_14d0c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_14d0c = load i32, i32* %r1.global-to-local, align 4
  %v7_14d0c = add i32 %v6_14d0c, -4
  %v8_14d0c = inttoptr i32 %v7_14d0c to i32*
  %v9_14d0c = load i32, i32* %v8_14d0c, align 4
  store i32 %v9_14d0c, i32* %r3.global-to-local, align 4
  %v10_14d0c = add i32 %v6_14d0c, -8
  %v11_14d0c = inttoptr i32 %v10_14d0c to i32*
  %v12_14d0c = load i32, i32* %v11_14d0c, align 4
  store i32 %v12_14d0c, i32* %ip.global-to-local, align 4
  %v13_14d0c = add i32 %v6_14d0c, -12
  %v14_14d0c = inttoptr i32 %v13_14d0c to i32*
  %v15_14d0c = load i32, i32* %v14_14d0c, align 4
  store i32 %v15_14d0c, i32* %lr.global-to-local, align 4
  store i32 %v13_14d0c, i32* %r1.global-to-local, align 4
  %v7_14d10 = add i32 %v6_14d10, -12
  %v8_14d10 = inttoptr i32 %v7_14d10 to i32*
  store i32 %v9_14d0c, i32* %v8_14d10, align 4
  %v10_14d10 = add i32 %v6_14d10, -8
  %v11_14d10 = inttoptr i32 %v10_14d10 to i32*
  %v12_14d10 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_14d10, i32* %v11_14d10, align 4
  %v13_14d10 = add i32 %v6_14d10, -4
  %v14_14d10 = inttoptr i32 %v13_14d10 to i32*
  %v15_14d10 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_14d10, i32* %v14_14d10, align 4
  store i32 %v7_14d10, i32* %r0.global-to-local, align 4
  %v6_14d14 = load i32, i32* %r2.global-to-local, align 4
  %v7_14d14 = add i32 %v6_14d14, -12
  store i32 %v7_14d14, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_14d3456 = phi i32 [ %v6_14d10, %.thread13 ], [ %v7_14d10, %bb139 ]
  %v0_14d1c54 = phi i32 [ %v4_14d08, %.thread13 ], [ %v7_14d14, %bb139 ]
  %v2_14d18 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14d18, i32* @r4, align 4
  store i32 %v6_14cd4, i32* @lr, align 4
  br label %dec_label_pc_14d1c

dec_label_pc_14d1c:                               ; preds = %dec_label_pc_14ccc, %.thread15
  %v7_14d2c = phi i32 [ %v0_14ce448, %dec_label_pc_14ccc ], [ %v6_14d3456, %.thread15 ]
  %v0_14d1c = phi i32 [ %v2_14ccc, %dec_label_pc_14ccc ], [ %v0_14d1c54, %.thread15 ]
  %v2_14d1c = add i32 %v0_14d1c, 8
  store i32 %v2_14d1c, i32* %r2.global-to-local, align 4
  %v4_14d1c = sub i32 0, %v0_14d1c
  %v5_14d1c = and i32 %v2_14d1c, %v4_14d1c
  %v6_14d1c = icmp slt i32 %v5_14d1c, 0
  store i1 %v6_14d1c, i1* %cpsr_v.global-to-local, align 1
  %v7_14d1c = icmp slt i32 %v2_14d1c, 0
  store i1 %v7_14d1c, i1* %cpsr_n.global-to-local, align 1
  %v8_14d1c = icmp eq i32 %v2_14d1c, 0
  store i1 %v8_14d1c, i1* %cpsr_z.global-to-local, align 1
  %v5_14d20 = icmp slt i32 %v0_14d1c, -8
  br i1 %v5_14d20, label %bb141, label %dec_label_pc_14d24

dec_label_pc_14d24:                               ; preds = %dec_label_pc_14d1c
  %v6_14d24 = add i32 %v0_14d1c, 4
  store i32 %v6_14d24, i32* %r2.global-to-local, align 4
  %v8_14d24 = sub i32 -5, %v0_14d1c
  %v9_14d24 = and i32 %v8_14d24, %v2_14d1c
  %v10_14d24 = icmp slt i32 %v9_14d24, 0
  store i1 %v10_14d24, i1* %cpsr_v.global-to-local, align 1
  %v11_14d24 = icmp slt i32 %v6_14d24, 0
  store i1 %v11_14d24, i1* %cpsr_n.global-to-local, align 1
  %v12_14d24 = icmp eq i32 %v2_14d1c, 4
  store i1 %v12_14d24, i1* %cpsr_z.global-to-local, align 1
  %v5_14d28 = icmp slt i32 %v2_14d1c, 4
  %v6_14d28 = load i32, i32* %r1.global-to-local, align 4
  %v7_14d28 = add i32 %v6_14d28, -4
  %v8_14d28 = inttoptr i32 %v7_14d28 to i32*
  %v9_14d28 = load i32, i32* %v8_14d28, align 4
  store i32 %v9_14d28, i32* %r3.global-to-local, align 4
  br i1 %v5_14d28, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_14d24
  store i32 %v7_14d28, i32* %r1.global-to-local, align 4
  %v8_14d2c = add i32 %v7_14d2c, -4
  %v9_14d2c = inttoptr i32 %v8_14d2c to i32*
  store i32 %v9_14d28, i32* %v9_14d2c, align 4
  %v10_14d2c = load i32, i32* %r0.global-to-local, align 4
  %v11_14d2c = add i32 %v10_14d2c, -4
  store i32 %v11_14d2c, i32* %r0.global-to-local, align 4
  %v0_14d3c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_14d24
  %v10_14d30 = add i32 %v6_14d28, -8
  %v11_14d30 = inttoptr i32 %v10_14d30 to i32*
  %v12_14d30 = load i32, i32* %v11_14d30, align 4
  store i32 %v12_14d30, i32* %ip.global-to-local, align 4
  store i32 %v10_14d30, i32* %r1.global-to-local, align 4
  %v7_14d34 = add i32 %v7_14d2c, -8
  %v8_14d34 = inttoptr i32 %v7_14d34 to i32*
  store i32 %v9_14d28, i32* %v8_14d34, align 4
  %v10_14d34 = add i32 %v7_14d2c, -4
  %v11_14d34 = inttoptr i32 %v10_14d34 to i32*
  %v12_14d34 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_14d34, i32* %v11_14d34, align 4
  store i32 %v7_14d34, i32* %r0.global-to-local, align 4
  %v6_14d38 = load i32, i32* %r2.global-to-local, align 4
  %v7_14d38 = add i32 %v6_14d38, -4
  store i32 %v7_14d38, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_14d1c, %dec_label_pc_14cac, %dec_label_pc_14ee0, %dec_label_pc_14e74, %dec_label_pc_14e08, %bb140
  %v2_14d40 = phi i32 [ %v11_14d2c, %.thread19 ], [ %v0_14dd831, %.thread25 ], [ %v7_14d2c, %dec_label_pc_14d1c ], [ %v2_14cb0, %dec_label_pc_14cac ], [ %v2_14d4c64, %dec_label_pc_14ee0 ], [ %v2_14d4c63, %dec_label_pc_14e74 ], [ %v2_14d4c62, %dec_label_pc_14e08 ], [ %v7_14d34, %bb140 ]
  %v0_14d3c = phi i32 [ %v0_14d3c.pre, %.thread19 ], [ %v2_14d80, %.thread25 ], [ %v2_14d1c, %dec_label_pc_14d1c ], [ %v2_14cb4, %dec_label_pc_14cac ], [ %v0_14d3c60, %dec_label_pc_14ee0 ], [ %v0_14d3c59, %dec_label_pc_14e74 ], [ %v0_14d3c58, %dec_label_pc_14e08 ], [ %v7_14d38, %bb140 ]
  %v1_14d3c = add i32 %v0_14d3c, 4
  store i32 %v1_14d3c, i32* %r2.global-to-local, align 4
  %v3_14d3c = sub i32 0, %v0_14d3c
  %v4_14d3c = and i32 %v1_14d3c, %v3_14d3c
  %v5_14d3c = icmp slt i32 %v4_14d3c, 0
  store i1 %v5_14d3c, i1* %cpsr_v.global-to-local, align 1
  %v6_14d3c = icmp slt i32 %v1_14d3c, 0
  store i1 %v6_14d3c, i1* %cpsr_n.global-to-local, align 1
  %v7_14d3c = icmp eq i32 %v1_14d3c, 0
  store i1 %v7_14d3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14d3c, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_14d44 = add i32 %v0_14d3c, 2
  %v3_14d44 = sub i32 -3, %v0_14d3c
  %v4_14d44 = and i32 %v3_14d44, %v1_14d3c
  %v5_14d44 = icmp slt i32 %v4_14d44, 0
  store i1 %v5_14d44, i1* %cpsr_v.global-to-local, align 1
  %v6_14d44 = icmp slt i32 %v1_14d44, 0
  store i1 %v6_14d44, i1* %cpsr_n.global-to-local, align 1
  %v7_14d44 = icmp eq i32 %v1_14d3c, 2
  store i1 %v7_14d44, i1* %cpsr_z.global-to-local, align 1
  %v0_14d48 = load i32, i32* %r1.global-to-local, align 4
  %v1_14d48 = add i32 %v0_14d48, -1
  %v2_14d48 = inttoptr i32 %v1_14d48 to i8*
  %v3_14d48 = load i8, i8* %v2_14d48, align 1
  %v4_14d48 = zext i8 %v3_14d48 to i32
  store i32 %v4_14d48, i32* %r3.global-to-local, align 4
  store i32 %v1_14d48, i32* %r1.global-to-local, align 4
  %v3_14d4c = add i32 %v2_14d40, -1
  %v4_14d4c = inttoptr i32 %v3_14d4c to i8*
  store i8 %v3_14d48, i8* %v4_14d4c, align 1
  %v5_14d4c = load i32, i32* %r0.global-to-local, align 4
  %v6_14d4c = add i32 %v5_14d4c, -1
  store i32 %v6_14d4c, i32* %r0.global-to-local, align 4
  %v0_14d50 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14d50 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14d50 = xor i1 %v0_14d50, %v1_14d50
  br i1 %v2_14d50, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_14d50 = load i32, i32* %r1.global-to-local, align 4
  %v4_14d50 = add i32 %v3_14d50, -1
  %v5_14d50 = inttoptr i32 %v4_14d50 to i8*
  %v6_14d50 = load i8, i8* %v5_14d50, align 1
  %v7_14d50 = zext i8 %v6_14d50 to i32
  store i32 %v7_14d50, i32* %r3.global-to-local, align 4
  store i32 %v4_14d50, i32* %r1.global-to-local, align 4
  %v6_14d54 = add i32 %v5_14d4c, -2
  %v7_14d54 = inttoptr i32 %v6_14d54 to i8*
  store i8 %v6_14d50, i8* %v7_14d54, align 1
  %v8_14d54 = load i32, i32* %r0.global-to-local, align 4
  %v9_14d54 = add i32 %v8_14d54, -1
  store i32 %v9_14d54, i32* %r0.global-to-local, align 4
  %v1_14d58.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14d58.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_14d5c = phi i32 [ %v9_14d54, %bb143 ], [ %v6_14d4c, %bb142 ]
  %v2_14d5c = phi i1 [ %v2_14d58.pre, %bb143 ], [ %v1_14d50, %bb142 ]
  %v1_14d5c = phi i1 [ %v1_14d58.pre, %bb143 ], [ %v0_14d50, %bb142 ]
  %v0_14d58 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14d58 = xor i1 %v2_14d5c, %v1_14d5c
  %v4_14d58 = or i1 %v0_14d58, %v3_14d58
  br i1 %v4_14d58, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_14d58 = load i32, i32* %r1.global-to-local, align 4
  %v6_14d58 = add i32 %v5_14d58, -1
  %v7_14d58 = inttoptr i32 %v6_14d58 to i8*
  %v8_14d58 = load i8, i8* %v7_14d58, align 1
  %v9_14d58 = zext i8 %v8_14d58 to i32
  store i32 %v9_14d58, i32* %r3.global-to-local, align 4
  store i32 %v6_14d58, i32* %r1.global-to-local, align 4
  %v8_14d5c = add i32 %v7_14d5c, -1
  %v9_14d5c = inttoptr i32 %v8_14d5c to i8*
  store i8 %v8_14d58, i8* %v9_14d5c, align 1
  %v10_14d5c = load i32, i32* %r0.global-to-local, align 4
  %v11_14d5c = add i32 %v10_14d5c, -1
  store i32 %v11_14d5c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_14d64:                               ; preds = %dec_label_pc_14cbc
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14d64 = icmp eq i32 %v1_14cbc, 1
  store i1 %v8_14d64, i1* %cpsr_n.global-to-local, align 1
  %v9_14d64 = icmp eq i32 %v1_14cbc, 2
  store i1 %v9_14d64, i1* %cpsr_z.global-to-local, align 1
  %v1_14d68 = add i32 %v2_14cac, -1
  %v2_14d68 = inttoptr i32 %v1_14d68 to i8*
  %v3_14d68 = load i8, i8* %v2_14d68, align 1
  %v4_14d68 = zext i8 %v3_14d68 to i32
  store i32 %v4_14d68, i32* %r3.global-to-local, align 4
  store i32 %v1_14d68, i32* %r1.global-to-local, align 4
  %v3_14d6c = add i32 %v2_14cb0, -1
  %v4_14d6c = inttoptr i32 %v3_14d6c to i8*
  store i8 %v3_14d68, i8* %v4_14d6c, align 1
  %v5_14d6c = load i32, i32* %r0.global-to-local, align 4
  %v6_14d6c = add i32 %v5_14d6c, -1
  store i32 %v6_14d6c, i32* %r0.global-to-local, align 4
  br i1 %v8_14d64, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_14d64
  %v6_14d70 = load i32, i32* %r1.global-to-local, align 4
  %v7_14d70 = add i32 %v6_14d70, -1
  %v8_14d70 = inttoptr i32 %v7_14d70 to i8*
  %v9_14d70 = load i8, i8* %v8_14d70, align 1
  %v10_14d70 = zext i8 %v9_14d70 to i32
  store i32 %v10_14d70, i32* %r3.global-to-local, align 4
  store i32 %v7_14d70, i32* %r1.global-to-local, align 4
  %v9_14d74 = add i32 %v5_14d6c, -2
  %v10_14d74 = inttoptr i32 %v9_14d74 to i8*
  store i8 %v9_14d70, i8* %v10_14d74, align 1
  %v11_14d74 = load i32, i32* %r0.global-to-local, align 4
  %v12_14d74 = add i32 %v11_14d74, -1
  store i32 %v12_14d74, i32* %r0.global-to-local, align 4
  br i1 %v9_14d64, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_14d78 = load i32, i32* %r1.global-to-local, align 4
  %v9_14d78 = add i32 %v8_14d78, -1
  %v10_14d78 = inttoptr i32 %v9_14d78 to i8*
  %v11_14d78 = load i8, i8* %v10_14d78, align 1
  %v12_14d78 = zext i8 %v11_14d78 to i32
  store i32 %v12_14d78, i32* %r3.global-to-local, align 4
  store i32 %v9_14d78, i32* %r1.global-to-local, align 4
  %v11_14d7c = add i32 %v11_14d74, -2
  %v12_14d7c = inttoptr i32 %v11_14d7c to i8*
  store i8 %v11_14d78, i8* %v12_14d7c, align 1
  %v13_14d7c = load i32, i32* %r0.global-to-local, align 4
  %v14_14d7c = add i32 %v13_14d7c, -1
  store i32 %v14_14d7c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_14d64, %bb146
  %v0_14dd831 = phi i32 [ %v12_14d74, %bb145 ], [ %v6_14d6c, %dec_label_pc_14d64 ], [ %v14_14d7c, %bb146 ]
  %v0_14d80 = load i32, i32* %r2.global-to-local, align 4
  %v1_14d80 = load i32, i32* %ip.global-to-local, align 4
  %v2_14d80 = sub i32 %v0_14d80, %v1_14d80
  store i32 %v2_14d80, i32* %r2.global-to-local, align 4
  %v4_14d80 = xor i32 %v1_14d80, %v0_14d80
  %v5_14d80 = xor i32 %v2_14d80, %v0_14d80
  %v6_14d80 = and i32 %v5_14d80, %v4_14d80
  %v7_14d80 = icmp slt i32 %v6_14d80, 0
  store i1 %v7_14d80, i1* %cpsr_v.global-to-local, align 1
  %v8_14d80 = icmp slt i32 %v2_14d80, 0
  store i1 %v8_14d80, i1* %cpsr_n.global-to-local, align 1
  %v9_14d80 = icmp eq i32 %v0_14d80, %v1_14d80
  store i1 %v9_14d80, i1* %cpsr_z.global-to-local, align 1
  %v5_14d84 = icmp slt i32 %v0_14d80, %v1_14d80
  br i1 %v5_14d84, label %bb141, label %dec_label_pc_14d88

dec_label_pc_14d88:                               ; preds = %.thread25
  %v0_14d88 = load i32, i32* %r1.global-to-local, align 4
  %v1_14d88 = urem i32 %v0_14d88, 4
  store i32 %v1_14d88, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14d88 = icmp eq i32 %v1_14d88, 0
  store i1 %v2_14d88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14d88, label %dec_label_pc_14ccc, label %dec_label_pc_14d90

dec_label_pc_14d90:                               ; preds = %dec_label_pc_14cc4, %dec_label_pc_14d88
  %v0_14dd830 = phi i32 [ %v2_14cb0, %dec_label_pc_14cc4 ], [ %v0_14dd831, %dec_label_pc_14d88 ]
  %v0_14e84 = phi i32 [ %v2_14cb4, %dec_label_pc_14cc4 ], [ %v2_14d80, %dec_label_pc_14d88 ]
  %v0_14d90 = phi i32 [ %v2_14cac, %dec_label_pc_14cc4 ], [ %v0_14d88, %dec_label_pc_14d88 ]
  %v0_14d98 = phi i32 [ %v1_14cc4, %dec_label_pc_14cc4 ], [ %v1_14d88, %dec_label_pc_14d88 ]
  %v1_14d90 = and i32 %v0_14d90, -4
  store i32 %v1_14d90, i32* %r1.global-to-local, align 4
  %v1_14d94 = inttoptr i32 %v1_14d90 to i32*
  %v2_14d94 = load i32, i32* %v1_14d94, align 4
  store i32 %v2_14d94, i32* %r3.global-to-local, align 4
  %v7_14d98 = icmp ult i32 %v0_14d98, 2
  %v2_14e7c = add i32 %v0_14e84, -12
  %v4_14e7c = sub i32 11, %v0_14e84
  %v5_14e7c = and i32 %v4_14e7c, %v0_14e84
  %v6_14e7c = icmp slt i32 %v5_14e7c, 0
  store i1 %v6_14e7c, i1* %cpsr_v.global-to-local, align 1
  %v7_14e7c = icmp slt i32 %v2_14e7c, 0
  store i1 %v7_14e7c, i1* %cpsr_n.global-to-local, align 1
  %v8_14e7c = icmp eq i32 %v0_14e84, 12
  store i1 %v8_14e7c, i1* %cpsr_z.global-to-local, align 1
  %v5_14e80 = icmp slt i32 %v0_14e84, 12
  br i1 %v7_14d98, label %dec_label_pc_14e7c, label %dec_label_pc_14da0

dec_label_pc_14da0:                               ; preds = %dec_label_pc_14d90
  %v8_14d98 = icmp eq i32 %v0_14d98, 2
  br i1 %v8_14d98, label %dec_label_pc_14e10, label %dec_label_pc_14da4

dec_label_pc_14da4:                               ; preds = %dec_label_pc_14da0
  br i1 %v5_14e80, label %dec_label_pc_14df0, label %dec_label_pc_14dac

dec_label_pc_14dac:                               ; preds = %dec_label_pc_14da4
  store i32 %v2_14e7c, i32* %r2.global-to-local, align 4
  %v3_14db0 = load i32, i32* @r4, align 4
  store i32 %v3_14db0, i32* %stack_var_-12, align 4
  %v6_14db0 = load i32, i32* @r5, align 4
  store i32 %v6_14db0, i32* %stack_var_-8, align 4
  %v9_14db0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14db4

dec_label_pc_14db4:                               ; preds = %dec_label_pc_14db4.dec_label_pc_14db4_crit_edge, %dec_label_pc_14dac
  %v0_14dd8 = phi i32 [ %v1_14dd8, %dec_label_pc_14db4.dec_label_pc_14db4_crit_edge ], [ %v0_14dd830, %dec_label_pc_14dac ]
  %v0_14db8 = phi i32 [ %v0_14db8.pre, %dec_label_pc_14db4.dec_label_pc_14db4_crit_edge ], [ %v1_14d90, %dec_label_pc_14dac ]
  %v0_14db4 = phi i32 [ %v0_14db4.pre, %dec_label_pc_14db4.dec_label_pc_14db4_crit_edge ], [ %v2_14d94, %dec_label_pc_14dac ]
  %v3_14db4 = mul i32 %v0_14db4, 256
  store i32 %v3_14db4, i32* %lr.global-to-local, align 4
  %v1_14db8 = add i32 %v0_14db8, -4
  %v2_14db8 = inttoptr i32 %v1_14db8 to i32*
  %v3_14db8 = load i32, i32* %v2_14db8, align 4
  store i32 %v3_14db8, i32* %r3.global-to-local, align 4
  %v4_14db8 = add i32 %v0_14db8, -8
  %v5_14db8 = inttoptr i32 %v4_14db8 to i32*
  %v6_14db8 = load i32, i32* %v5_14db8, align 4
  store i32 %v6_14db8, i32* %r4.global-to-local, align 4
  %v7_14db8 = add i32 %v0_14db8, -12
  %v8_14db8 = inttoptr i32 %v7_14db8 to i32*
  %v9_14db8 = load i32, i32* %v8_14db8, align 4
  store i32 %v9_14db8, i32* %r5.global-to-local, align 4
  %v10_14db8 = add i32 %v0_14db8, -16
  %v11_14db8 = inttoptr i32 %v10_14db8 to i32*
  %v12_14db8 = load i32, i32* %v11_14db8, align 4
  store i32 %v10_14db8, i32* %r1.global-to-local, align 4
  %v4_14dbc = udiv i32 %v12_14db8, 16777216
  %v5_14dbc = or i32 %v4_14dbc, %v3_14db4
  store i32 %v5_14dbc, i32* %lr.global-to-local, align 4
  %v3_14dc0 = mul i32 %v12_14db8, 256
  %v4_14dc4 = udiv i32 %v9_14db8, 16777216
  %v5_14dc4 = or i32 %v3_14dc0, %v4_14dc4
  store i32 %v5_14dc4, i32* %ip.global-to-local, align 4
  %v3_14dc8 = mul i32 %v9_14db8, 256
  %v4_14dcc = udiv i32 %v6_14db8, 16777216
  %v5_14dcc = or i32 %v3_14dc8, %v4_14dcc
  store i32 %v5_14dcc, i32* %r5.global-to-local, align 4
  %v3_14dd0 = mul i32 %v6_14db8, 256
  %v4_14dd4 = udiv i32 %v3_14db8, 16777216
  %v5_14dd4 = or i32 %v3_14dd0, %v4_14dd4
  store i32 %v5_14dd4, i32* %r4.global-to-local, align 4
  %v1_14dd8 = add i32 %v0_14dd8, -16
  %v2_14dd8 = inttoptr i32 %v1_14dd8 to i32*
  store i32 %v5_14dd4, i32* %v2_14dd8, align 4
  %v4_14dd8 = add i32 %v0_14dd8, -12
  %v5_14dd8 = inttoptr i32 %v4_14dd8 to i32*
  %v6_14dd8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14dd8, i32* %v5_14dd8, align 4
  %v7_14dd8 = add i32 %v0_14dd8, -8
  %v8_14dd8 = inttoptr i32 %v7_14dd8 to i32*
  %v9_14dd8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14dd8, i32* %v8_14dd8, align 4
  %v10_14dd8 = add i32 %v0_14dd8, -4
  %v11_14dd8 = inttoptr i32 %v10_14dd8 to i32*
  %v12_14dd8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14dd8, i32* %v11_14dd8, align 4
  store i32 %v1_14dd8, i32* %r0.global-to-local, align 4
  %v0_14ddc = load i32, i32* %r2.global-to-local, align 4
  %v2_14ddc = add i32 %v0_14ddc, -16
  store i32 %v2_14ddc, i32* %r2.global-to-local, align 4
  %v6_14de0 = icmp slt i32 %v0_14ddc, 16
  br i1 %v6_14de0, label %dec_label_pc_14de4, label %dec_label_pc_14db4.dec_label_pc_14db4_crit_edge

dec_label_pc_14db4.dec_label_pc_14db4_crit_edge:  ; preds = %dec_label_pc_14db4
  %v0_14db4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14db8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14db4

dec_label_pc_14de4:                               ; preds = %dec_label_pc_14db4
  %v2_14de4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14de4, i32* @r4, align 4
  %v5_14de4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_14de4, i32* @r5, align 4
  store i32 %v9_14db0, i32* @lr, align 4
  %v2_14de8 = add i32 %v0_14ddc, -4
  store i32 %v2_14de8, i32* %r2.global-to-local, align 4
  %v4_14de8 = add i32 %v0_14ddc, 2147483632
  %v5_14de8 = and i32 %v2_14de8, %v4_14de8
  %v6_14de8 = icmp slt i32 %v5_14de8, 0
  store i1 %v6_14de8, i1* %cpsr_v.global-to-local, align 1
  %v7_14de8 = icmp slt i32 %v2_14de8, 0
  store i1 %v7_14de8, i1* %cpsr_n.global-to-local, align 1
  %v8_14de8 = icmp eq i32 %v2_14de8, 0
  store i1 %v8_14de8, i1* %cpsr_z.global-to-local, align 1
  %v5_14dec = icmp slt i32 %v2_14ddc, -12
  br i1 %v5_14dec, label %dec_label_pc_14e08, label %dec_label_pc_14df0

dec_label_pc_14df0:                               ; preds = %dec_label_pc_14de4, %dec_label_pc_14da4, %dec_label_pc_14df0
  %v1_14dfc = phi i32 [ %v5_14dfc, %dec_label_pc_14df0 ], [ %v1_14dd8, %dec_label_pc_14de4 ], [ %v0_14dd830, %dec_label_pc_14da4 ]
  %v0_14df0 = load i32, i32* %r3.global-to-local, align 4
  %v3_14df0 = mul i32 %v0_14df0, 256
  store i32 %v3_14df0, i32* %ip.global-to-local, align 4
  %v0_14df4 = load i32, i32* %r1.global-to-local, align 4
  %v1_14df4 = add i32 %v0_14df4, -4
  %v2_14df4 = inttoptr i32 %v1_14df4 to i32*
  %v3_14df4 = load i32, i32* %v2_14df4, align 4
  store i32 %v3_14df4, i32* %r3.global-to-local, align 4
  store i32 %v1_14df4, i32* %r1.global-to-local, align 4
  %v4_14df8 = udiv i32 %v3_14df4, 16777216
  %v5_14df8 = or i32 %v4_14df8, %v3_14df0
  store i32 %v5_14df8, i32* %ip.global-to-local, align 4
  %v2_14dfc = add i32 %v1_14dfc, -4
  %v3_14dfc = inttoptr i32 %v2_14dfc to i32*
  store i32 %v5_14df8, i32* %v3_14dfc, align 4
  %v4_14dfc = load i32, i32* %r0.global-to-local, align 4
  %v5_14dfc = add i32 %v4_14dfc, -4
  store i32 %v5_14dfc, i32* %r0.global-to-local, align 4
  %v0_14e00 = load i32, i32* %r2.global-to-local, align 4
  %v2_14e00 = add i32 %v0_14e00, -4
  store i32 %v2_14e00, i32* %r2.global-to-local, align 4
  %v6_14e04 = icmp slt i32 %v0_14e00, 4
  br i1 %v6_14e04, label %dec_label_pc_14e08.loopexit, label %dec_label_pc_14df0

dec_label_pc_14e08.loopexit:                      ; preds = %dec_label_pc_14df0
  %v4_14e00 = sub i32 3, %v0_14e00
  %v5_14e00 = and i32 %v4_14e00, %v0_14e00
  %v6_14e00 = icmp slt i32 %v5_14e00, 0
  %v7_14e00 = icmp slt i32 %v2_14e00, 0
  store i1 %v6_14e00, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14e00, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14e08

dec_label_pc_14e08:                               ; preds = %dec_label_pc_14e08.loopexit, %dec_label_pc_14de4
  %v2_14d4c62 = phi i32 [ %v5_14dfc, %dec_label_pc_14e08.loopexit ], [ %v1_14dd8, %dec_label_pc_14de4 ]
  %v0_14d3c58 = phi i32 [ %v2_14e00, %dec_label_pc_14e08.loopexit ], [ %v2_14de8, %dec_label_pc_14de4 ]
  %v0_14e08 = load i32, i32* %r1.global-to-local, align 4
  %v1_14e08 = add i32 %v0_14e08, 3
  store i32 %v1_14e08, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_14e10:                               ; preds = %dec_label_pc_14da0
  br i1 %v5_14e80, label %dec_label_pc_14e5c, label %dec_label_pc_14e18

dec_label_pc_14e18:                               ; preds = %dec_label_pc_14e10
  store i32 %v2_14e7c, i32* %r2.global-to-local, align 4
  %v3_14e1c = load i32, i32* @r4, align 4
  store i32 %v3_14e1c, i32* %stack_var_-12, align 4
  %v6_14e1c = load i32, i32* @r5, align 4
  store i32 %v6_14e1c, i32* %stack_var_-8, align 4
  %v9_14e1c = load i32, i32* @lr, align 4
  br label %dec_label_pc_14e20

dec_label_pc_14e20:                               ; preds = %dec_label_pc_14e20.dec_label_pc_14e20_crit_edge, %dec_label_pc_14e18
  %v0_14e44 = phi i32 [ %v1_14e44, %dec_label_pc_14e20.dec_label_pc_14e20_crit_edge ], [ %v0_14dd830, %dec_label_pc_14e18 ]
  %v0_14e24 = phi i32 [ %v0_14e24.pre, %dec_label_pc_14e20.dec_label_pc_14e20_crit_edge ], [ %v1_14d90, %dec_label_pc_14e18 ]
  %v0_14e20 = phi i32 [ %v0_14e20.pre, %dec_label_pc_14e20.dec_label_pc_14e20_crit_edge ], [ %v2_14d94, %dec_label_pc_14e18 ]
  %v3_14e20 = mul i32 %v0_14e20, 65536
  store i32 %v3_14e20, i32* %lr.global-to-local, align 4
  %v1_14e24 = add i32 %v0_14e24, -4
  %v2_14e24 = inttoptr i32 %v1_14e24 to i32*
  %v3_14e24 = load i32, i32* %v2_14e24, align 4
  store i32 %v3_14e24, i32* %r3.global-to-local, align 4
  %v4_14e24 = add i32 %v0_14e24, -8
  %v5_14e24 = inttoptr i32 %v4_14e24 to i32*
  %v6_14e24 = load i32, i32* %v5_14e24, align 4
  store i32 %v6_14e24, i32* %r4.global-to-local, align 4
  %v7_14e24 = add i32 %v0_14e24, -12
  %v8_14e24 = inttoptr i32 %v7_14e24 to i32*
  %v9_14e24 = load i32, i32* %v8_14e24, align 4
  store i32 %v9_14e24, i32* %r5.global-to-local, align 4
  %v10_14e24 = add i32 %v0_14e24, -16
  %v11_14e24 = inttoptr i32 %v10_14e24 to i32*
  %v12_14e24 = load i32, i32* %v11_14e24, align 4
  store i32 %v10_14e24, i32* %r1.global-to-local, align 4
  %v4_14e28 = udiv i32 %v12_14e24, 65536
  %v5_14e28 = or i32 %v4_14e28, %v3_14e20
  store i32 %v5_14e28, i32* %lr.global-to-local, align 4
  %v3_14e2c = mul i32 %v12_14e24, 65536
  %v4_14e30 = udiv i32 %v9_14e24, 65536
  %v5_14e30 = or i32 %v3_14e2c, %v4_14e30
  store i32 %v5_14e30, i32* %ip.global-to-local, align 4
  %v3_14e34 = mul i32 %v9_14e24, 65536
  %v4_14e38 = udiv i32 %v6_14e24, 65536
  %v5_14e38 = or i32 %v3_14e34, %v4_14e38
  store i32 %v5_14e38, i32* %r5.global-to-local, align 4
  %v3_14e3c = mul i32 %v6_14e24, 65536
  %v4_14e40 = udiv i32 %v3_14e24, 65536
  %v5_14e40 = or i32 %v3_14e3c, %v4_14e40
  store i32 %v5_14e40, i32* %r4.global-to-local, align 4
  %v1_14e44 = add i32 %v0_14e44, -16
  %v2_14e44 = inttoptr i32 %v1_14e44 to i32*
  store i32 %v5_14e40, i32* %v2_14e44, align 4
  %v4_14e44 = add i32 %v0_14e44, -12
  %v5_14e44 = inttoptr i32 %v4_14e44 to i32*
  %v6_14e44 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14e44, i32* %v5_14e44, align 4
  %v7_14e44 = add i32 %v0_14e44, -8
  %v8_14e44 = inttoptr i32 %v7_14e44 to i32*
  %v9_14e44 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14e44, i32* %v8_14e44, align 4
  %v10_14e44 = add i32 %v0_14e44, -4
  %v11_14e44 = inttoptr i32 %v10_14e44 to i32*
  %v12_14e44 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14e44, i32* %v11_14e44, align 4
  store i32 %v1_14e44, i32* %r0.global-to-local, align 4
  %v0_14e48 = load i32, i32* %r2.global-to-local, align 4
  %v2_14e48 = add i32 %v0_14e48, -16
  store i32 %v2_14e48, i32* %r2.global-to-local, align 4
  %v6_14e4c = icmp slt i32 %v0_14e48, 16
  br i1 %v6_14e4c, label %dec_label_pc_14e50, label %dec_label_pc_14e20.dec_label_pc_14e20_crit_edge

dec_label_pc_14e20.dec_label_pc_14e20_crit_edge:  ; preds = %dec_label_pc_14e20
  %v0_14e20.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14e24.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14e20

dec_label_pc_14e50:                               ; preds = %dec_label_pc_14e20
  %v2_14e50 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14e50, i32* @r4, align 4
  %v5_14e50 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_14e50, i32* @r5, align 4
  store i32 %v9_14e1c, i32* @lr, align 4
  %v2_14e54 = add i32 %v0_14e48, -4
  store i32 %v2_14e54, i32* %r2.global-to-local, align 4
  %v4_14e54 = add i32 %v0_14e48, 2147483632
  %v5_14e54 = and i32 %v2_14e54, %v4_14e54
  %v6_14e54 = icmp slt i32 %v5_14e54, 0
  store i1 %v6_14e54, i1* %cpsr_v.global-to-local, align 1
  %v7_14e54 = icmp slt i32 %v2_14e54, 0
  store i1 %v7_14e54, i1* %cpsr_n.global-to-local, align 1
  %v8_14e54 = icmp eq i32 %v2_14e54, 0
  store i1 %v8_14e54, i1* %cpsr_z.global-to-local, align 1
  %v5_14e58 = icmp slt i32 %v2_14e48, -12
  br i1 %v5_14e58, label %dec_label_pc_14e74, label %dec_label_pc_14e5c

dec_label_pc_14e5c:                               ; preds = %dec_label_pc_14e50, %dec_label_pc_14e10, %dec_label_pc_14e5c
  %v1_14e68 = phi i32 [ %v5_14e68, %dec_label_pc_14e5c ], [ %v1_14e44, %dec_label_pc_14e50 ], [ %v0_14dd830, %dec_label_pc_14e10 ]
  %v0_14e5c = load i32, i32* %r3.global-to-local, align 4
  %v3_14e5c = mul i32 %v0_14e5c, 65536
  store i32 %v3_14e5c, i32* %ip.global-to-local, align 4
  %v0_14e60 = load i32, i32* %r1.global-to-local, align 4
  %v1_14e60 = add i32 %v0_14e60, -4
  %v2_14e60 = inttoptr i32 %v1_14e60 to i32*
  %v3_14e60 = load i32, i32* %v2_14e60, align 4
  store i32 %v3_14e60, i32* %r3.global-to-local, align 4
  store i32 %v1_14e60, i32* %r1.global-to-local, align 4
  %v4_14e64 = udiv i32 %v3_14e60, 65536
  %v5_14e64 = or i32 %v4_14e64, %v3_14e5c
  store i32 %v5_14e64, i32* %ip.global-to-local, align 4
  %v2_14e68 = add i32 %v1_14e68, -4
  %v3_14e68 = inttoptr i32 %v2_14e68 to i32*
  store i32 %v5_14e64, i32* %v3_14e68, align 4
  %v4_14e68 = load i32, i32* %r0.global-to-local, align 4
  %v5_14e68 = add i32 %v4_14e68, -4
  store i32 %v5_14e68, i32* %r0.global-to-local, align 4
  %v0_14e6c = load i32, i32* %r2.global-to-local, align 4
  %v2_14e6c = add i32 %v0_14e6c, -4
  store i32 %v2_14e6c, i32* %r2.global-to-local, align 4
  %v6_14e70 = icmp slt i32 %v0_14e6c, 4
  br i1 %v6_14e70, label %dec_label_pc_14e74.loopexit, label %dec_label_pc_14e5c

dec_label_pc_14e74.loopexit:                      ; preds = %dec_label_pc_14e5c
  %v4_14e6c = sub i32 3, %v0_14e6c
  %v5_14e6c = and i32 %v4_14e6c, %v0_14e6c
  %v6_14e6c = icmp slt i32 %v5_14e6c, 0
  %v7_14e6c = icmp slt i32 %v2_14e6c, 0
  store i1 %v6_14e6c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14e6c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14e74

dec_label_pc_14e74:                               ; preds = %dec_label_pc_14e74.loopexit, %dec_label_pc_14e50
  %v2_14d4c63 = phi i32 [ %v5_14e68, %dec_label_pc_14e74.loopexit ], [ %v1_14e44, %dec_label_pc_14e50 ]
  %v0_14d3c59 = phi i32 [ %v2_14e6c, %dec_label_pc_14e74.loopexit ], [ %v2_14e54, %dec_label_pc_14e50 ]
  %v0_14e74 = load i32, i32* %r1.global-to-local, align 4
  %v1_14e74 = add i32 %v0_14e74, 2
  store i32 %v1_14e74, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_14e7c:                               ; preds = %dec_label_pc_14d90
  br i1 %v5_14e80, label %dec_label_pc_14ec8, label %dec_label_pc_14e84

dec_label_pc_14e84:                               ; preds = %dec_label_pc_14e7c
  store i32 %v2_14e7c, i32* %r2.global-to-local, align 4
  %v3_14e88 = load i32, i32* @r4, align 4
  store i32 %v3_14e88, i32* %stack_var_-12, align 4
  %v6_14e88 = load i32, i32* @r5, align 4
  store i32 %v6_14e88, i32* %stack_var_-8, align 4
  %v9_14e88 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14e8c

dec_label_pc_14e8c:                               ; preds = %dec_label_pc_14e8c.dec_label_pc_14e8c_crit_edge, %dec_label_pc_14e84
  %v0_14eb0 = phi i32 [ %v1_14eb0, %dec_label_pc_14e8c.dec_label_pc_14e8c_crit_edge ], [ %v0_14dd830, %dec_label_pc_14e84 ]
  %v0_14e90 = phi i32 [ %v0_14e90.pre, %dec_label_pc_14e8c.dec_label_pc_14e8c_crit_edge ], [ %v1_14d90, %dec_label_pc_14e84 ]
  %v0_14e8c = phi i32 [ %v0_14e8c.pre, %dec_label_pc_14e8c.dec_label_pc_14e8c_crit_edge ], [ %v2_14d94, %dec_label_pc_14e84 ]
  %v3_14e8c = mul i32 %v0_14e8c, 16777216
  store i32 %v3_14e8c, i32* %lr.global-to-local, align 4
  %v1_14e90 = add i32 %v0_14e90, -4
  %v2_14e90 = inttoptr i32 %v1_14e90 to i32*
  %v3_14e90 = load i32, i32* %v2_14e90, align 4
  store i32 %v3_14e90, i32* %r3.global-to-local, align 4
  %v4_14e90 = add i32 %v0_14e90, -8
  %v5_14e90 = inttoptr i32 %v4_14e90 to i32*
  %v6_14e90 = load i32, i32* %v5_14e90, align 4
  store i32 %v6_14e90, i32* %r4.global-to-local, align 4
  %v7_14e90 = add i32 %v0_14e90, -12
  %v8_14e90 = inttoptr i32 %v7_14e90 to i32*
  %v9_14e90 = load i32, i32* %v8_14e90, align 4
  store i32 %v9_14e90, i32* %r5.global-to-local, align 4
  %v10_14e90 = add i32 %v0_14e90, -16
  %v11_14e90 = inttoptr i32 %v10_14e90 to i32*
  %v12_14e90 = load i32, i32* %v11_14e90, align 4
  store i32 %v10_14e90, i32* %r1.global-to-local, align 4
  %v4_14e94 = udiv i32 %v12_14e90, 256
  %v5_14e94 = or i32 %v4_14e94, %v3_14e8c
  store i32 %v5_14e94, i32* %lr.global-to-local, align 4
  %v3_14e98 = mul i32 %v12_14e90, 16777216
  %v4_14e9c = udiv i32 %v9_14e90, 256
  %v5_14e9c = or i32 %v3_14e98, %v4_14e9c
  store i32 %v5_14e9c, i32* %ip.global-to-local, align 4
  %v3_14ea0 = mul i32 %v9_14e90, 16777216
  %v4_14ea4 = udiv i32 %v6_14e90, 256
  %v5_14ea4 = or i32 %v3_14ea0, %v4_14ea4
  store i32 %v5_14ea4, i32* %r5.global-to-local, align 4
  %v3_14ea8 = mul i32 %v6_14e90, 16777216
  %v4_14eac = udiv i32 %v3_14e90, 256
  %v5_14eac = or i32 %v3_14ea8, %v4_14eac
  store i32 %v5_14eac, i32* %r4.global-to-local, align 4
  %v1_14eb0 = add i32 %v0_14eb0, -16
  %v2_14eb0 = inttoptr i32 %v1_14eb0 to i32*
  store i32 %v5_14eac, i32* %v2_14eb0, align 4
  %v4_14eb0 = add i32 %v0_14eb0, -12
  %v5_14eb0 = inttoptr i32 %v4_14eb0 to i32*
  %v6_14eb0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14eb0, i32* %v5_14eb0, align 4
  %v7_14eb0 = add i32 %v0_14eb0, -8
  %v8_14eb0 = inttoptr i32 %v7_14eb0 to i32*
  %v9_14eb0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14eb0, i32* %v8_14eb0, align 4
  %v10_14eb0 = add i32 %v0_14eb0, -4
  %v11_14eb0 = inttoptr i32 %v10_14eb0 to i32*
  %v12_14eb0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14eb0, i32* %v11_14eb0, align 4
  store i32 %v1_14eb0, i32* %r0.global-to-local, align 4
  %v0_14eb4 = load i32, i32* %r2.global-to-local, align 4
  %v2_14eb4 = add i32 %v0_14eb4, -16
  store i32 %v2_14eb4, i32* %r2.global-to-local, align 4
  %v6_14eb8 = icmp slt i32 %v0_14eb4, 16
  br i1 %v6_14eb8, label %dec_label_pc_14ebc, label %dec_label_pc_14e8c.dec_label_pc_14e8c_crit_edge

dec_label_pc_14e8c.dec_label_pc_14e8c_crit_edge:  ; preds = %dec_label_pc_14e8c
  %v0_14e8c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14e90.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14e8c

dec_label_pc_14ebc:                               ; preds = %dec_label_pc_14e8c
  %v2_14ebc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14ebc, i32* @r4, align 4
  %v5_14ebc = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_14ebc, i32* @r5, align 4
  store i32 %v9_14e88, i32* @lr, align 4
  %v2_14ec0 = add i32 %v0_14eb4, -4
  store i32 %v2_14ec0, i32* %r2.global-to-local, align 4
  %v4_14ec0 = add i32 %v0_14eb4, 2147483632
  %v5_14ec0 = and i32 %v2_14ec0, %v4_14ec0
  %v6_14ec0 = icmp slt i32 %v5_14ec0, 0
  store i1 %v6_14ec0, i1* %cpsr_v.global-to-local, align 1
  %v7_14ec0 = icmp slt i32 %v2_14ec0, 0
  store i1 %v7_14ec0, i1* %cpsr_n.global-to-local, align 1
  %v8_14ec0 = icmp eq i32 %v2_14ec0, 0
  store i1 %v8_14ec0, i1* %cpsr_z.global-to-local, align 1
  %v5_14ec4 = icmp slt i32 %v2_14eb4, -12
  br i1 %v5_14ec4, label %dec_label_pc_14ee0, label %dec_label_pc_14ec8

dec_label_pc_14ec8:                               ; preds = %dec_label_pc_14ebc, %dec_label_pc_14e7c, %dec_label_pc_14ec8
  %v1_14ed4 = phi i32 [ %v5_14ed4, %dec_label_pc_14ec8 ], [ %v1_14eb0, %dec_label_pc_14ebc ], [ %v0_14dd830, %dec_label_pc_14e7c ]
  %v0_14ec8 = load i32, i32* %r3.global-to-local, align 4
  %v3_14ec8 = mul i32 %v0_14ec8, 16777216
  store i32 %v3_14ec8, i32* %ip.global-to-local, align 4
  %v0_14ecc = load i32, i32* %r1.global-to-local, align 4
  %v1_14ecc = add i32 %v0_14ecc, -4
  %v2_14ecc = inttoptr i32 %v1_14ecc to i32*
  %v3_14ecc = load i32, i32* %v2_14ecc, align 4
  store i32 %v3_14ecc, i32* %r3.global-to-local, align 4
  store i32 %v1_14ecc, i32* %r1.global-to-local, align 4
  %v4_14ed0 = udiv i32 %v3_14ecc, 256
  %v5_14ed0 = or i32 %v4_14ed0, %v3_14ec8
  store i32 %v5_14ed0, i32* %ip.global-to-local, align 4
  %v2_14ed4 = add i32 %v1_14ed4, -4
  %v3_14ed4 = inttoptr i32 %v2_14ed4 to i32*
  store i32 %v5_14ed0, i32* %v3_14ed4, align 4
  %v4_14ed4 = load i32, i32* %r0.global-to-local, align 4
  %v5_14ed4 = add i32 %v4_14ed4, -4
  store i32 %v5_14ed4, i32* %r0.global-to-local, align 4
  %v0_14ed8 = load i32, i32* %r2.global-to-local, align 4
  %v2_14ed8 = add i32 %v0_14ed8, -4
  store i32 %v2_14ed8, i32* %r2.global-to-local, align 4
  %v6_14edc = icmp slt i32 %v0_14ed8, 4
  br i1 %v6_14edc, label %dec_label_pc_14ee0.loopexit, label %dec_label_pc_14ec8

dec_label_pc_14ee0.loopexit:                      ; preds = %dec_label_pc_14ec8
  %v4_14ed8 = sub i32 3, %v0_14ed8
  %v5_14ed8 = and i32 %v4_14ed8, %v0_14ed8
  %v6_14ed8 = icmp slt i32 %v5_14ed8, 0
  %v7_14ed8 = icmp slt i32 %v2_14ed8, 0
  store i1 %v6_14ed8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14ed8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14ee0

dec_label_pc_14ee0:                               ; preds = %dec_label_pc_14ee0.loopexit, %dec_label_pc_14ebc
  %v2_14d4c64 = phi i32 [ %v5_14ed4, %dec_label_pc_14ee0.loopexit ], [ %v1_14eb0, %dec_label_pc_14ebc ]
  %v0_14d3c60 = phi i32 [ %v2_14ed8, %dec_label_pc_14ee0.loopexit ], [ %v2_14ec0, %dec_label_pc_14ebc ]
  %v0_14ee0 = load i32, i32* %r1.global-to-local, align 4
  %v1_14ee0 = add i32 %v0_14ee0, 1
  store i32 %v1_14ee0, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_14ed4, { 0, 2, 1 }
  uselistorder i32 %v3_14ec8, { 1, 0 }
  uselistorder i32 %v2_14ec0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14eb0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14e90, { 1, 0 }
  uselistorder i32 %v3_14e8c, { 1, 0 }
  uselistorder i32 %v0_14e90, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14eb0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14e68, { 0, 2, 1 }
  uselistorder i32 %v3_14e5c, { 1, 0 }
  uselistorder i32 %v2_14e54, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14e44, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14e24, { 1, 0 }
  uselistorder i32 %v3_14e20, { 1, 0 }
  uselistorder i32 %v0_14e24, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14e44, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14dfc, { 0, 2, 1 }
  uselistorder i32 %v3_14df0, { 1, 0 }
  uselistorder i32 %v2_14de8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14dd8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14db8, { 1, 0 }
  uselistorder i32 %v3_14db4, { 1, 0 }
  uselistorder i32 %v0_14db8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14dd8, { 3, 2, 1, 0 }
  uselistorder i1 %v5_14e80, { 2, 0, 1 }
  uselistorder i32 %v0_14d98, { 1, 0 }
  uselistorder i32 %v0_14e84, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_14dd830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_14d88, { 2, 1, 0 }
  uselistorder i32 %v0_14d88, { 2, 0, 1 }
  uselistorder i32 %v2_14d80, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14d80, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14d80, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_14dd831, { 2, 1, 0 }
  uselistorder i32 %v11_14d5c, { 1, 0 }
  uselistorder i32 %v7_14d5c, { 1, 0 }
  uselistorder i32 %v1_14d3c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_14d3c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_14d40, { 1, 0 }
  uselistorder i32 %v7_14d34, { 0, 2, 1 }
  uselistorder i32 %v10_14d30, { 1, 0 }
  uselistorder i32 %v9_14d28, { 1, 0, 2 }
  uselistorder i32 %v6_14d24, { 1, 0 }
  uselistorder i32 %v2_14d1c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_14d1c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_14d2c, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14d10, { 0, 2, 1 }
  uselistorder i32 %v13_14d0c, { 1, 0 }
  uselistorder i32 %v4_14d08, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_14d08, { 2, 0, 1 }
  uselistorder i32 %v6_14d10, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14d00, { 0, 2, 1 }
  uselistorder i32 %v16_14cfc, { 1, 0 }
  uselistorder i32 %v4_14cf8, { 1, 2, 0 }
  uselistorder i32 %v0_14d08.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_14d00, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_14cec, { 0, 3, 2, 1 }
  uselistorder i32 %v10_14ce8, { 1, 0 }
  uselistorder i32 %v1_14ce4, { 1, 0 }
  uselistorder i32 %v10_14ce0, { 1, 0 }
  uselistorder i32 %v0_14ce0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14ce4, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_14cd8, { 0, 2, 1 }
  uselistorder i32 %v2_14ccc, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_14ccc, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_14ce448, { 1, 2, 0 }
  uselistorder i32 %v1_14cc4, { 2, 1, 0 }
  uselistorder i32 %v1_14cbc, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14cb4, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_14cb0, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_14cac, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_14cac, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_14c98, { 0, 2, 1 }
  uselistorder i32 %v3_14c8c, { 1, 0 }
  uselistorder i32 %v2_14c84, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_14c74, { 1, 0, 3, 2 }
  uselistorder i32 %v8_14c54, { 1, 0, 2 }
  uselistorder i32 %v5_14c54, { 1, 0, 2 }
  uselistorder i32 %v2_14c54, { 1, 0, 2 }
  uselistorder i32 %v3_14c50, { 1, 0 }
  uselistorder i32 %v0_14c54, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14c74, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_14c2c, { 0, 2, 1 }
  uselistorder i32 %v3_14c20, { 1, 0 }
  uselistorder i32 %v2_14c18, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_14c08, { 1, 0, 3, 2 }
  uselistorder i32 %v8_14be8, { 1, 0, 2 }
  uselistorder i32 %v5_14be8, { 1, 0, 2 }
  uselistorder i32 %v2_14be8, { 1, 0, 2 }
  uselistorder i32 %v3_14be4, { 1, 0 }
  uselistorder i32 %v0_14be8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14c08, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_14bc0, { 0, 2, 1 }
  uselistorder i32 %v3_14bb4, { 1, 0 }
  uselistorder i32 %v2_14bac, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_14b9c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_14b7c, { 1, 0, 2 }
  uselistorder i32 %v5_14b7c, { 1, 0, 2 }
  uselistorder i32 %v2_14b7c, { 1, 0, 2 }
  uselistorder i32 %v3_14b78, { 1, 0 }
  uselistorder i32 %v0_14b7c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14b9c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_14c44, { 2, 0, 1 }
  uselistorder i32 %v0_14c48, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_14b9c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_14b4c, { 1, 0 }
  uselistorder i32 %v0_14b4c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_14b44, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14b44, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14b44, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_14b9c75, { 2, 1, 0 }
  uselistorder i32 %v1_14b24, { 1, 0, 2 }
  uselistorder i32 %v1_14afc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_14afc, { 1, 2, 0, 3 }
  uselistorder i32 %v8_14ae8, { 1, 0, 2 }
  uselistorder i32 %v6_14ae4, { 1, 0 }
  uselistorder i32 %v2_14adc, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_14adc, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_14aec, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_14ad4, { 0, 2, 1 }
  uselistorder i32 %v3_14ad4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_14ad4, { 1, 0 }
  uselistorder i1 %v1_14ad4, { 1, 0 }
  uselistorder i32 %v3_14ad0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_14ac8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_14ab4, { 1, 2, 0 }
  uselistorder i32 %v12_14aa8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_14a9c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14aa0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_14a90, { 0, 2, 1 }
  uselistorder i32 %v2_14a88, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_14a88, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_14a80, { 1, 0 }
  uselistorder i32 %v1_14a78, { 2, 1, 0 }
  uselistorder i32 %v2_14a70, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_14a70, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_14a60, { 1, 0 }
  uselistorder i32 %v1_14a60, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_14a60, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 63, 64, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 49, 47, 53, 48, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 53, 54, 55, 21, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 0, 24, 1, 26, 2, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 0, 23, 1, 25, 2, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 0, 25, 1, 27, 2, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 25, 26, 1, 0, 14, 16, 15, 17, 2, 19, 27, 20, 28, 21, 29, 22, 18, 30, 23, 7, 3, 8, 24, 9, 4, 5, 10, 11, 6, 12, 13 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 23, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 24, 25, 26, 22, 21, 20, 19, 18, 17, 14 }
  uselistorder i32 65536, { 5, 4, 10, 6, 11, 7, 12, 8, 13, 9, 14, 15, 16, 20, 17, 21, 18, 22, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 1, 55, 56, 2, 57, 0, 3, 58, 59, 60, 61, 62, 65, 63, 64, 66, 67, 68, 73, 74, 75, 76, 69, 70, 71, 72, 77, 80, 81, 82, 78, 79, 83, 84, 87, 88, 89, 85, 86, 90, 92, 91, 94, 95, 93, 96, 97, 98, 100, 101, 102, 99, 103, 104, 107, 108, 109, 105, 106, 110, 132, 112, 111, 113, 115, 114, 117, 116, 118, 119, 121, 122, 123, 120, 124, 125, 127, 128, 129, 126, 131, 130 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 51, 50, 53, 52, 57, 54, 56, 55, 58, 60, 59, 62, 61, 64, 63, 65, 67, 66, 68, 75, 69, 76, 70, 77, 71, 78, 79, 72, 80, 73, 81, 74, 85, 82, 86, 83, 87, 84, 89, 88, 90, 91, 92, 96, 93, 97, 94, 98, 95, 99, 100, 101, 102, 108, 103, 109, 104, 110, 105, 111, 106, 112, 107, 113, 114, 116, 115, 118, 117, 119, 121, 120, 122, 123, 124, 128, 125, 129, 126, 127, 130, 136, 131, 137, 132, 138, 133, 135, 139, 140, 141, 134, 142, 143, 149, 144, 150, 145, 151, 146, 148, 152, 153, 154, 147, 157, 155, 158, 156, 159, 160, 161 }
  uselistorder i32* @r5, { 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 260, 261, 262, 264, 757, 758, 759, 760, 761, 0, 762, 763, 764, 625, 626, 627, 628, 629, 630, 571, 572, 573, 574, 575, 576, 577, 578, 611, 612, 613, 614, 615, 616, 631, 632, 633, 640, 641, 642, 643, 634, 635, 636, 637, 638, 639, 59, 60, 61, 265, 266, 2, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 51, 52, 42, 17, 18, 186, 47, 187, 188, 189, 190, 191, 192, 19, 20, 21, 22, 23, 43, 48, 14, 15, 16, 53, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 54, 55, 56, 57, 49, 50, 193, 194, 195, 196, 197, 58, 198, 199, 200, 201, 9, 202, 203, 204, 205, 214, 215, 216, 206, 207, 208, 209, 210, 211, 212, 213, 521, 522, 523, 524, 525, 526, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 1, 237, 238, 239, 240, 241, 242, 3, 243, 244, 245, 246, 247, 248, 249, 250, 278, 279, 280, 281, 282, 11, 283, 284, 285, 286, 287, 288, 289, 290, 12, 291, 292, 293, 294, 295, 296, 302, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 330, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 355, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 402, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 437, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 466, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 496, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 527, 528, 529, 530, 531, 532, 541, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 644, 645, 570, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 7, 683, 684, 685, 686, 687, 688, 689, 10, 690, 691, 4, 692, 693, 5, 694, 695, 6, 696, 697, 698, 699, 700, 701, 13, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 8, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 617, 620, 618, 619, 621, 622, 623, 624 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 8, 9, 10, 19, 20, 0, 1, 11, 12, 13, 14, 4, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 2, 31, 32, 33, 5, 34, 35, 36, 3, 37, 38, 39, 40, 41, 42, 43, 44, 45, 6, 46, 47, 48, 7, 49 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 9, 10, 7, 8, 3, 12, 4, 1, 11, 5, 13, 2, 14, 6, 15 }
  uselistorder i32 40, { 1, 10, 0, 3, 8, 9, 11, 4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 5, 21, 6, 22, 7, 23 }
  uselistorder i32 36, { 1, 7, 8, 5, 6, 0, 2, 3, 4 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 4, 3 }
  uselistorder i32 24, { 0, 80, 81, 42, 43, 1, 82, 83, 39, 40, 15, 12, 69, 46, 74, 47, 48, 62, 66, 44, 45, 70, 49, 50, 51, 16, 52, 17, 53, 18, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 71, 65, 72, 67, 68, 75, 76, 77, 73, 78, 79, 2, 84, 19, 20, 3, 85, 21, 22, 4, 86, 13, 87, 88, 89, 23, 24, 5, 25, 26, 90, 27, 28, 6, 14, 91, 29, 7, 8, 30, 92, 31, 9, 93, 94, 95, 32, 33, 96, 34, 97, 35, 10, 98, 36, 37, 99, 11, 41, 100, 38, 101 }
  uselistorder i32* @lr, { 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 0, 110, 111, 112, 1, 113, 114, 115, 2, 116, 117, 118, 119, 120, 121, 122, 123, 19, 20, 124, 125, 126, 127, 128, 53, 54, 55, 56, 61, 62, 63, 64, 21, 22, 23, 24, 25, 65, 66, 4, 5, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 6, 7, 10, 11, 3, 14, 12, 13, 8, 9, 82, 15, 16, 17, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 57, 58, 59, 60, 96, 97, 98, 99 }
  uselistorder i32 16, { 31, 32, 33, 172, 34, 173, 174, 35, 175, 176, 36, 177, 178, 179, 180, 181, 182, 88, 89, 72, 73, 93, 90, 91, 92, 94, 23, 95, 96, 4, 5, 6, 7, 8, 22, 9, 10, 0, 11, 12, 48, 76, 49, 37, 50, 38, 51, 39, 52, 74, 75, 77, 79, 80, 81, 24, 71, 53, 82, 54, 83, 13, 14, 21, 69, 15, 84, 16, 55, 78, 42, 41, 40, 85, 43, 86, 44, 56, 57, 87, 58, 59, 25, 97, 98, 99, 100, 26, 101, 102, 103, 104, 105, 106, 107, 29, 108, 109, 110, 61, 111, 45, 60, 112, 113, 62, 114, 115, 116, 17, 117, 118, 1, 63, 119, 120, 121, 64, 122, 123, 124, 125, 126, 2, 65, 127, 128, 18, 129, 70, 19, 130, 66, 131, 132, 133, 20, 30, 134, 67, 135, 136, 3, 46, 137, 138, 139, 140, 141, 142, 27, 143, 144, 145, 146, 148, 147, 149, 150, 151, 152, 153, 154, 155, 28, 156, 157, 158, 159, 160, 162, 161, 163, 164, 68, 166, 47, 167, 168, 169, 170, 171, 165 }
  uselistorder i32 20, { 103, 2, 104, 105, 0, 3, 106, 27, 28, 18, 19, 1, 29, 30, 31, 32, 20, 22, 4, 23, 5, 24, 17, 21, 25, 26, 33, 36, 34, 6, 35, 37, 38, 39, 40, 42, 43, 41, 7, 44, 45, 46, 47, 48, 49, 52, 53, 50, 8, 51, 54, 55, 56, 57, 58, 59, 62, 63, 60, 9, 61, 64, 65, 66, 67, 70, 71, 68, 10, 69, 72, 73, 74, 75, 76, 77, 80, 78, 16, 79, 81, 82, 83, 86, 12, 84, 11, 85, 87, 88, 91, 14, 89, 13, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 15, 102, 98 }
  uselistorder i32 27, { 1, 0, 6, 2, 7, 3, 8, 4, 9, 5, 10 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 25, 26, 28, 62, 68, 10, 30, 4, 11, 29, 2, 12, 31, 13, 32, 14, 33, 15, 16, 17, 34, 35, 36, 18, 37, 38, 39, 40, 5, 41, 42, 43, 44, 19, 45, 6, 46, 20, 47, 48, 7, 49, 50, 8, 51, 52, 53, 54, 55, 21, 56, 57, 58, 59, 60, 22, 61, 0, 23, 64, 1, 24, 65, 66, 27, 9, 67, 3, 63 }
  uselistorder i32 -8, { 15, 16, 17, 18, 19, 20, 14, 13, 6, 12, 11, 10, 9, 21, 22, 23, 24, 7, 25, 0, 28, 8, 26, 27, 5, 1, 3, 2, 4 }
  uselistorder i1 false, { 45, 46, 47, 83, 16, 44, 84, 85, 41, 42, 43, 86, 15, 87, 88, 0, 50, 49, 51, 48, 2, 4, 3, 12, 5, 53, 14, 11, 17, 55, 6, 7, 8, 52, 1, 18, 9, 89, 58, 90, 91, 59, 92, 23, 24, 25, 26, 60, 93, 94, 76, 95, 96, 97, 65, 98, 28, 29, 66, 99, 67, 100, 61, 62, 63, 27, 101, 64, 102, 103, 75, 104, 105, 106, 107, 108, 109, 68, 69, 110, 111, 70, 112, 71, 72, 113, 73, 114, 74, 115, 56, 57, 116, 117, 118, 119, 120, 121, 30, 31, 77, 122, 123, 78, 37, 124, 79, 20, 21, 32, 22, 33, 34, 35, 13, 36, 125, 38, 39, 80, 81, 126, 19, 82, 127, 40, 10, 54, 128 }
  uselistorder i32 4, { 85, 76, 77, 5, 407, 78, 408, 57, 6, 7, 79, 409, 80, 410, 411, 412, 413, 81, 414, 415, 416, 417, 82, 418, 419, 420, 421, 422, 8, 423, 424, 425, 426, 427, 83, 428, 56, 429, 430, 431, 432, 433, 434, 9, 10, 84, 435, 242, 243, 183, 184, 244, 245, 246, 436, 437, 438, 439, 440, 134, 135, 136, 58, 137, 138, 369, 371, 370, 367, 368, 331, 332, 333, 334, 372, 373, 374, 375, 356, 357, 358, 376, 377, 139, 140, 141, 142, 143, 49, 11, 12, 247, 248, 249, 250, 251, 252, 13, 14, 67, 15, 16, 68, 378, 379, 181, 17, 18, 102, 86, 380, 381, 59, 187, 103, 188, 213, 214, 105, 189, 106, 190, 107, 191, 207, 208, 215, 216, 192, 193, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 104, 210, 211, 212, 209, 69, 217, 218, 87, 108, 19, 219, 20, 220, 221, 21, 22, 222, 223, 51, 224, 50, 229, 109, 230, 110, 232, 111, 233, 234, 231, 225, 112, 226, 227, 228, 235, 65, 64, 63, 236, 113, 23, 24, 25, 26, 27, 28, 237, 52, 238, 53, 239, 240, 241, 0, 114, 253, 144, 254, 255, 256, 257, 145, 146, 116, 258, 66, 29, 115, 259, 88, 260, 261, 147, 262, 263, 148, 149, 264, 117, 265, 89, 266, 267, 150, 151, 268, 152, 269, 270, 153, 154, 70, 271, 118, 272, 90, 273, 274, 275, 276, 277, 278, 119, 91, 279, 280, 155, 281, 282, 283, 284, 156, 157, 2, 285, 120, 286, 92, 287, 288, 289, 158, 290, 291, 159, 160, 3, 71, 292, 121, 293, 93, 294, 295, 296, 297, 161, 162, 298, 299, 300, 163, 301, 302, 122, 303, 4, 304, 94, 305, 123, 306, 307, 308, 164, 309, 310, 311, 312, 313, 165, 166, 124, 314, 72, 95, 315, 96, 316, 317, 318, 167, 319, 320, 321, 125, 322, 126, 323, 324, 325, 326, 168, 169, 127, 327, 73, 328, 97, 329, 98, 330, 382, 101, 383, 384, 74, 385, 128, 386, 387, 388, 389, 99, 390, 129, 391, 392, 393, 100, 394, 130, 395, 30, 31, 32, 396, 397, 62, 61, 60, 398, 33, 34, 35, 131, 399, 132, 400, 36, 37, 401, 54, 402, 55, 133, 403, 404, 170, 335, 336, 38, 171, 337, 338, 39, 172, 339, 340, 40, 173, 341, 342, 41, 174, 75, 343, 344, 42, 345, 175, 346, 347, 43, 176, 348, 349, 44, 177, 350, 351, 45, 178, 352, 353, 46, 179, 354, 355, 47, 359, 180, 360, 361, 362, 363, 48, 364, 365, 1, 405, 366, 406, 182 }
  uselistorder i32* @r2, { 89, 90, 25, 9, 26, 28, 27, 29, 30, 31, 32, 7, 91, 1, 92, 97, 98, 101, 93, 53, 57, 58, 61, 59, 60, 54, 55, 56, 41, 62, 15, 0, 99, 3, 100, 6, 33, 34, 35, 8, 10, 94, 95, 96, 11, 63, 64, 65, 66, 2, 67, 68, 69, 70, 71, 72, 4, 73, 74, 75, 76, 77, 78, 79, 16, 12, 13, 14, 19, 20, 17, 18, 21, 22, 23, 24, 36, 37, 38, 39, 40, 80, 81, 82, 83, 84, 85, 86, 87, 88, 5, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder label %dec_label_pc_14ec8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14e5c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14df0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14d90, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_14d1c, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_14ce0, { 1, 0 }
  uselistorder label %dec_label_pc_14ccc, { 1, 0 }
  uselistorder label %dec_label_pc_14c8c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14c20, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14bb4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14b54, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_14ac8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_14a88, { 1, 0 }
}

define i32 @function_14ee8(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ee8:
  ret i32 %arg1
}

define i32 @function_14ef0() local_unnamed_addr {
dec_label_pc_14ef0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_14ef0 = load i32, i32* @r0, align 4
  %v2_14ef0 = icmp eq i32 %v0_14ef0, 0
  %v3_14ef4 = load i32, i32* @r4, align 4
  store i32 %v3_14ef4, i32* %stack_var_-20, align 4
  %v0_14ef8 = load i32, i32* @r1, align 4
  br i1 %v2_14ef0, label %dec_label_pc_14fd0, label %dec_label_pc_14f0c.lr.ph

dec_label_pc_14f0c:                               ; preds = %dec_label_pc_14f0c.lr.ph, %dec_label_pc_14f90
  %v1_14f90 = phi i32 [ 0, %dec_label_pc_14f0c.lr.ph ], [ %v5_14f90, %dec_label_pc_14f90 ]
  %v0_14f94 = phi i32 [ 1, %dec_label_pc_14f0c.lr.ph ], [ %v1_14f94, %dec_label_pc_14f90 ]
  %v0_14f14 = phi i32 [ %v0_14ef0, %dec_label_pc_14f0c.lr.ph ], [ %v0_14f1425, %dec_label_pc_14f90 ]
  %v1_14f14 = inttoptr i32 %v0_14f14 to i8*
  %v2_14f14 = load i8, i8* %v1_14f14, align 1
  %v3_14f14 = zext i8 %v2_14f14 to i32
  %v3_14f18 = mul nuw nsw i32 %v3_14f14, 2
  %v4_14f18 = add i32 %v3_14f18, %v2_14f10.pre
  %v5_14f18 = inttoptr i32 %v4_14f18 to i8*
  %v6_14f18 = load i8, i8* %v5_14f18, align 1
  %v1_14f1c = and i8 %v6_14f18, 8
  %v2_14f1c = icmp eq i8 %v1_14f1c, 0
  br i1 %v2_14f1c, label %dec_label_pc_14fd0, label %dec_label_pc_14f24

dec_label_pc_14f24:                               ; preds = %dec_label_pc_14f0c
  br label %dec_label_pc_14f44

dec_label_pc_14f2c:                               ; preds = %dec_label_pc_14f44
  %v3_14f30 = mul i32 %v0_14f90, 10
  %v4_14f30 = add i32 %v3_14f44, %v3_14f30
  %v1_14f34 = add i32 %v4_14f30, -48
  %v8_14f3c = icmp sgt i32 %v1_14f34, 255
  br i1 %v8_14f3c, label %dec_label_pc_14fd0, label %dec_label_pc_14f40

dec_label_pc_14f40:                               ; preds = %dec_label_pc_14f2c
  %v1_14f40 = add i32 %v0_14f80, 1
  store i32 %v1_14f40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14f44

dec_label_pc_14f44:                               ; preds = %dec_label_pc_14f24, %dec_label_pc_14f40
  %v0_14f90 = phi i32 [ 0, %dec_label_pc_14f24 ], [ %v1_14f34, %dec_label_pc_14f40 ]
  %v0_14f80 = phi i32 [ %v0_14f14, %dec_label_pc_14f24 ], [ %v1_14f40, %dec_label_pc_14f40 ]
  %v1_14f44 = inttoptr i32 %v0_14f80 to i8*
  %v2_14f44 = load i8, i8* %v1_14f44, align 1
  %v3_14f44 = zext i8 %v2_14f44 to i32
  %v2_14f48 = mul nuw nsw i32 %v3_14f44, 2
  %v2_14f4c = add i32 %v2_14f48, %v2_14f10.pre
  %v3_14f50 = inttoptr i32 %v2_14f4c to i8*
  %v4_14f50 = load i8, i8* %v3_14f50, align 1
  %v6_14f50 = zext i8 %v4_14f50 to i32
  %v1_14f5c = and i32 %v6_14f50, 8
  %v2_14f5c = icmp eq i32 %v1_14f5c, 0
  br i1 %v2_14f5c, label %dec_label_pc_14f64, label %dec_label_pc_14f2c

dec_label_pc_14f64:                               ; preds = %dec_label_pc_14f44
  %v8_14f68 = icmp sgt i32 %v0_14f94, 3
  br i1 %v8_14f68, label %dec_label_pc_14f7c, label %dec_label_pc_14f6c

dec_label_pc_14f6c:                               ; preds = %dec_label_pc_14f64
  %v7_14f6c = icmp eq i8 %v2_14f44, 46
  br i1 %v7_14f6c, label %dec_label_pc_14f74, label %dec_label_pc_14fd0

dec_label_pc_14f74:                               ; preds = %dec_label_pc_14f6c
  %v1_14f74 = add i32 %v0_14f80, 1
  store i32 %v1_14f74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14f90

dec_label_pc_14f7c:                               ; preds = %dec_label_pc_14f64
  %v2_14f7c = icmp eq i8 %v2_14f44, 0
  %v1_14f80 = add i32 %v0_14f80, 1
  store i32 %v1_14f80, i32* %r0.global-to-local, align 4
  br i1 %v2_14f7c, label %dec_label_pc_14f90, label %dec_label_pc_14f88

dec_label_pc_14f88:                               ; preds = %dec_label_pc_14f7c
  %v1_14f88 = and i32 %v6_14f50, 32
  %v2_14f88 = icmp eq i32 %v1_14f88, 0
  br i1 %v2_14f88, label %dec_label_pc_14fd0, label %dec_label_pc_14f90

dec_label_pc_14f90:                               ; preds = %dec_label_pc_14f88, %dec_label_pc_14f7c, %dec_label_pc_14f74
  %v0_14f1425 = phi i32 [ %v1_14f80, %dec_label_pc_14f88 ], [ %v1_14f80, %dec_label_pc_14f7c ], [ %v1_14f74, %dec_label_pc_14f74 ]
  %v4_14f90 = mul i32 %v1_14f90, 256
  %v5_14f90 = or i32 %v0_14f90, %v4_14f90
  %v1_14f94 = add nuw nsw i32 %v0_14f94, 1
  %v7_14f9c = icmp slt i32 %v1_14f94, 5
  br i1 %v7_14f9c, label %dec_label_pc_14f0c, label %dec_label_pc_14fa0

dec_label_pc_14f0c.lr.ph:                         ; preds = %dec_label_pc_14ef0
  %v2_14f10.pre = load i32, i32* bitcast (i32** @global_var_1dc78.669 to i32*), align 4
  br label %dec_label_pc_14f0c

dec_label_pc_14fa0:                               ; preds = %dec_label_pc_14f90
  %v2_14fa0 = icmp eq i32 %v0_14ef8, 0
  br i1 %v2_14fa0, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_14fa0
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_14fa0
  %v3_14fbc = call i32 @llvm.bswap.i32(i32 %v5_14f90)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_14fc8 = inttoptr i32 %v0_14ef8 to i32*
  store i32 %v3_14fbc, i32* %v3_14fc8, align 4
  %v2_14fcc.pre = load i32, i32* %stack_var_-20, align 4
  %v17_14fcc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_14fcc = phi i32 [ 1, %bb ], [ %v17_14fcc.pre, %bb40 ]
  %v2_14fcc = phi i32 [ %v3_14ef4, %bb ], [ %v2_14fcc.pre, %bb40 ]
  store i32 %v2_14fcc, i32* @r4, align 4
  ret i32 %v17_14fcc

dec_label_pc_14fd0:                               ; preds = %dec_label_pc_14f6c, %dec_label_pc_14f88, %dec_label_pc_14f0c, %dec_label_pc_14f2c, %dec_label_pc_14ef0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_14ef4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_14f10.pre, { 1, 0 }
  uselistorder i32 %v1_14f94, { 1, 0 }
  uselistorder i32 %v0_14f80, { 0, 1, 3, 2 }
  uselistorder i32 %v3_14ef4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 16, 17, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 5, { 15, 28, 30, 16, 5, 17, 6, 2, 18, 29, 3, 0, 19, 31, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 7, 36, 37, 38, 39, 8, 40, 41, 42, 43, 44, 45, 46, 47, 9, 48, 49, 26, 50, 10, 51, 52, 53, 11, 54, 55, 56, 57, 12, 58, 59, 60, 61, 62, 63, 64, 13, 65, 66, 67, 68, 69, 70, 71, 14, 72, 27, 77, 4, 73, 74, 1, 75, 76 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 60, 61, 65, 68, 69, 70, 66, 67, 71, 72, 73, 74, 75, 420, 421, 76, 77, 78, 79, 80, 81, 82, 422, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 95, 96, 100, 99, 98, 101, 418, 423, 106, 102, 105, 103, 104, 416, 107, 108, 109, 112, 111, 110, 113, 115, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 125, 127, 128, 129, 133, 139, 134, 130, 131, 135, 136, 137, 140, 132, 141, 142, 138, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 154, 157, 160, 161, 159, 158, 162, 165, 164, 163, 166, 172, 169, 173, 170, 167, 174, 168, 175, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 192, 194, 195, 196, 207, 202, 197, 208, 203, 209, 210, 204, 211, 205, 198, 199, 200, 212, 201, 213, 206, 214, 215, 216, 217, 218, 219, 220, 221, 223, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 238, 248, 244, 245, 240, 241, 249, 246, 242, 250, 247, 243, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 267, 266, 269, 276, 272, 277, 278, 273, 270, 279, 274, 271, 280, 275, 281, 282, 283, 284, 285, 286, 287, 290, 291, 288, 292, 289, 294, 293, 295, 296, 297, 298, 299, 302, 303, 306, 304, 300, 307, 305, 301, 310, 309, 308, 417, 424, 311, 312, 318, 313, 319, 314, 315, 320, 316, 321, 322, 317, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 341, 343, 344, 348, 349, 356, 350, 351, 357, 352, 345, 346, 358, 353, 347, 354, 355, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 373, 375, 376, 380, 381, 388, 382, 383, 389, 384, 377, 378, 390, 385, 379, 386, 387, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419 }
  uselistorder i32 32, { 73, 50, 51, 48, 68, 69, 62, 63, 4, 3, 6, 5, 8, 7, 49, 47, 74, 75, 53, 52, 54, 64, 55, 65, 56, 66, 57, 67, 10, 9, 12, 11, 14, 13, 16, 15, 61, 18, 17, 19, 21, 20, 23, 22, 24, 25, 27, 26, 58, 59, 70, 71, 28, 72, 29, 30, 0, 31, 1, 2, 32, 33, 34, 35, 36, 38, 37, 40, 39, 42, 41, 43, 44, 45, 46, 60 }
  uselistorder i8 46, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 3, { 34, 58, 59, 163, 60, 61, 62, 63, 64, 65, 78, 94, 164, 4, 155, 158, 159, 0, 66, 21, 67, 22, 160, 73, 35, 23, 24, 79, 38, 80, 2, 81, 82, 83, 84, 36, 19, 85, 86, 87, 88, 39, 89, 40, 90, 25, 91, 41, 92, 37, 93, 42, 43, 44, 1, 95, 96, 97, 98, 99, 100, 101, 102, 45, 103, 46, 104, 47, 26, 105, 106, 107, 108, 109, 6, 5, 48, 27, 110, 111, 112, 113, 114, 115, 116, 8, 7, 49, 117, 28, 118, 119, 120, 121, 122, 123, 124, 125, 10, 9, 50, 126, 29, 127, 128, 129, 130, 131, 12, 11, 51, 132, 30, 133, 134, 135, 136, 52, 137, 14, 13, 53, 138, 31, 139, 140, 141, 142, 143, 144, 16, 15, 54, 145, 32, 146, 147, 148, 149, 150, 151, 152, 18, 17, 55, 153, 33, 154, 161, 68, 74, 69, 75, 70, 76, 71, 77, 56, 162, 57, 72, 20, 156, 3, 157 }
  uselistorder i32 8, { 129, 147, 30, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 31, 164, 74, 75, 76, 77, 81, 78, 79, 80, 165, 133, 132, 130, 131, 115, 116, 117, 134, 135, 136, 123, 124, 125, 6, 34, 35, 32, 33, 16, 17, 26, 27, 36, 166, 82, 83, 84, 85, 7, 8, 58, 20, 9, 10, 15, 11, 44, 64, 37, 12, 13, 14, 59, 45, 63, 29, 65, 66, 67, 68, 70, 46, 71, 47, 72, 73, 69, 48, 49, 50, 51, 86, 28, 57, 38, 87, 88, 89, 90, 91, 21, 92, 93, 94, 95, 3, 96, 97, 98, 4, 99, 100, 101, 102, 103, 104, 105, 5, 106, 107, 108, 109, 110, 111, 112, 113, 114, 18, 22, 23, 137, 19, 24, 25, 138, 52, 60, 61, 139, 140, 142, 141, 143, 144, 39, 145, 56, 62, 40, 146, 118, 41, 119, 42, 120, 43, 121, 53, 122, 55, 126, 127, 54, 128, 0, 1, 2 }
  uselistorder i32 255, { 2, 15, 16, 3, 17, 4, 18, 5, 19, 0, 1, 8, 20, 9, 21, 6, 22, 7, 23, 12, 24, 13, 25, 10, 26, 11, 27, 14, 28 }
  uselistorder i32 10, { 12, 52, 53, 33, 34, 81, 0, 4, 5, 35, 13, 40, 41, 3, 42, 43, 36, 14, 44, 37, 45, 15, 46, 16, 47, 17, 48, 18, 49, 19, 50, 51, 20, 1, 21, 22, 23, 24, 25, 26, 6, 54, 55, 56, 57, 58, 59, 60, 61, 62, 7, 63, 64, 65, 8, 66, 67, 68, 27, 69, 9, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 2, 31, 38, 83, 29, 84, 32, 39, 10, 85, 28, 86, 80, 11, 87, 30 }
  uselistorder i8 0, { 4, 0, 22, 3, 23, 24, 1, 8, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 5, 36, 37, 38, 39, 11, 40, 2, 10, 9, 12, 41, 42, 43, 44, 17, 45, 46, 49, 18, 47, 48, 16, 50, 51, 52, 53, 54, 55, 13, 56, 57, 58, 60, 61, 7, 64, 15, 70, 65, 66, 62, 63, 14, 19, 67, 68, 69, 6, 71, 72, 59, 20, 21, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82 }
  uselistorder i32 2, { 4, 138, 259, 260, 57, 261, 262, 47, 263, 46, 264, 45, 141, 81, 82, 244, 83, 245, 84, 246, 265, 52, 85, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 139, 14, 15, 16, 17, 18, 87, 88, 86, 48, 49, 89, 156, 90, 92, 143, 93, 144, 150, 64, 142, 65, 145, 66, 146, 67, 147, 68, 148, 69, 149, 70, 155, 151, 152, 153, 154, 59, 94, 157, 19, 20, 158, 160, 161, 95, 162, 53, 140, 163, 91, 164, 21, 96, 159, 100, 165, 98, 166, 99, 167, 97, 101, 168, 22, 23, 24, 102, 169, 60, 103, 104, 105, 106, 61, 108, 109, 107, 71, 110, 111, 112, 170, 50, 56, 171, 172, 173, 230, 231, 174, 175, 176, 177, 178, 179, 180, 113, 181, 72, 182, 183, 184, 185, 186, 114, 73, 187, 188, 189, 190, 191, 192, 193, 115, 194, 74, 195, 196, 116, 197, 117, 118, 198, 199, 200, 201, 202, 203, 204, 205, 1, 25, 26, 27, 28, 29, 30, 119, 206, 75, 207, 208, 209, 210, 211, 2, 31, 32, 33, 34, 35, 36, 120, 76, 212, 213, 214, 215, 121, 216, 54, 217, 122, 218, 3, 37, 38, 39, 40, 41, 42, 123, 219, 77, 220, 221, 222, 223, 224, 225, 226, 227, 124, 228, 78, 229, 232, 233, 234, 125, 235, 126, 236, 237, 238, 239, 127, 240, 79, 241, 51, 128, 247, 248, 80, 249, 135, 250, 129, 251, 130, 131, 252, 132, 253, 133, 254, 134, 255, 55, 256, 43, 44, 257, 136, 258, 137, 62, 242, 58, 63, 243 }
  uselistorder i32* @r1, { 33, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1, 93, 94, 14, 15, 17, 16, 4, 6, 95, 0, 96, 35, 36, 98, 37, 42, 43, 46, 44, 45, 38, 39, 40, 41, 32, 47, 97, 11, 5, 34, 18, 7, 48, 49, 3, 50, 12, 8, 9, 10, 13, 19, 20, 29, 30, 2, 21, 22, 23, 24, 25, 26, 27, 28, 31, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75 }
  uselistorder label %dec_label_pc_14fd0, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_14f44, { 1, 0 }
}

define i32 @function_14fdc(i32 %arg1) local_unnamed_addr {
dec_label_pc_14fdc:
  %v3_14fdc = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_14fe4 = call i32 @function_12a38()
  %v0_14fe8 = load i32, i32* @r4, align 4
  store i32 %v3_14fdc, i32* @r4, align 4
  %v2_14ff0 = call i32 @function_12ae0(i32 %v0_14fe4, i32 %v0_14fe8)
  ret i32 %v2_14ff0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_12ae0, { 4, 6, 3, 2, 1, 0, 5 }
}

define i32 @function_14ff4(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ff4:
  %v1_14ff4 = add i32 %arg1, 28
  %v2_14ff4 = inttoptr i32 %v1_14ff4 to i32*
  %v3_14ff4 = load i32, i32* %v2_14ff4, align 4
  %v1_14ffc = add i32 %arg1, 44
  %v2_14ffc = inttoptr i32 %v1_14ffc to i32*
  %v3_14ffc = load i32, i32* %v2_14ffc, align 4
  store i32 %v3_14ff4, i32* @global_var_1dff4.671, align 4
  store i32 %v3_14ffc, i32* @global_var_1dff8.673, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 17, 0, 6, 7, 4, 5, 12, 13, 8, 9, 10, 11, 1, 14, 2, 15, 3, 16 }
  uselistorder i32 28, { 34, 0, 24, 25, 10, 11, 33, 1, 5, 4, 6, 12, 7, 13, 8, 14, 15, 16, 17, 18, 19, 20, 21, 2, 9, 23, 22, 26, 27, 28, 29, 30, 31, 32, 3 }
}

define i32 @function_15018(i32* %arg1) local_unnamed_addr {
dec_label_pc_15018:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_15020 = call i32 @brk(i32* %arg1)
  %v3_15024 = icmp ult i32 %v2_15020, %tmp
  store i32 %v2_15020, i32* @global_var_1dd38.667, align 4
  br i1 %v3_15024, label %dec_label_pc_15038, label %dec_label_pc_15048

dec_label_pc_15038:                               ; preds = %dec_label_pc_15018
  %v0_15038 = call i32 @function_12f88()
  %v2_15040 = inttoptr i32 %v0_15038 to i32*
  store i32 12, i32* %v2_15040, align 4
  br label %dec_label_pc_15048

dec_label_pc_15048:                               ; preds = %dec_label_pc_15018, %dec_label_pc_15038
  %v0_15048 = phi i32 [ 0, %dec_label_pc_15018 ], [ -1, %dec_label_pc_15038 ]
  ret i32 %v0_15048

; uselistorder directives
  uselistorder i32 12, { 16, 10, 121, 122, 123, 125, 126, 127, 128, 11, 124, 129, 130, 131, 132, 133, 134, 135, 65, 66, 29, 30, 67, 17, 18, 106, 107, 108, 0, 103, 109, 7, 110, 8, 104, 4, 105, 19, 20, 6, 68, 69, 21, 70, 71, 22, 46, 12, 32, 33, 47, 48, 43, 40, 49, 34, 31, 35, 36, 37, 38, 39, 41, 44, 45, 42, 50, 51, 52, 9, 53, 54, 56, 57, 58, 23, 59, 24, 60, 25, 61, 26, 62, 27, 64, 5, 63, 55, 98, 72, 28, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 13, 84, 85, 86, 87, 14, 88, 89, 90, 91, 92, 93, 15, 94, 95, 96, 97, 99, 100, 101, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 1, 2, 3 }
  uselistorder i32 ()* @function_12f88, { 29, 57, 28, 42, 9, 8, 7, 6, 41, 40, 39, 5, 58, 27, 26, 24, 25, 56, 55, 23, 22, 32, 21, 14, 20, 43, 19, 54, 18, 33, 53, 38, 37, 36, 52, 17, 4, 3, 51, 16, 35, 34, 50, 2, 11, 49, 48, 10, 31, 15, 1, 0, 47, 46, 45, 44, 13, 12, 30 }
  uselistorder i32* @global_var_1dd38.667, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15048, { 1, 0 }
}

define i32 @function_15054(i32 %arg1) local_unnamed_addr {
dec_label_pc_15054:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15058 = load i32, i32* @global_var_1db04.629, align 4
  %v7_1505c = icmp eq i32 %v3_15058, -1
  %v3_15060 = load i32, i32* @r4, align 4
  store i32 %v3_15060, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1db04.629 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_1505c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_15054
  store i32 %v3_15060, i32* %r4.global-to-local, align 4
  %v9_15068 = load i32, i32* @r0, align 4
  ret i32 %v9_15068

.preheader:                                       ; preds = %dec_label_pc_15054, %.preheader
  %v0_15070 = phi i32 [ %v3_15074, %.preheader ], [ %v3_15058, %dec_label_pc_15054 ]
  call void @__pseudo_branch(i32 %v0_15070)
  %v0_15074 = load i32, i32* %r4.global-to-local, align 4
  %v1_15074 = add i32 %v0_15074, -4
  %v2_15074 = inttoptr i32 %v1_15074 to i32*
  %v3_15074 = load i32, i32* %v2_15074, align 4
  store i32 %v1_15074, i32* %r4.global-to-local, align 4
  %v3_15078 = icmp eq i32 %v3_15074, -1
  br i1 %v3_15078, label %dec_label_pc_15080, label %.preheader

dec_label_pc_15080:                               ; preds = %.preheader
  %v2_15080 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15080, i32* %r4.global-to-local, align 4
  %v8_15080 = load i32, i32* @r0, align 4
  ret i32 %v8_15080

; uselistorder directives
  uselistorder i32 %v3_15074, { 1, 0 }
  uselistorder i32 %v3_15058, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 54, 15, 55, 56, 57, 3, 16, 17, 18, 58, 59, 60, 4, 19, 20, 21, 61, 62, 63, 5, 22, 23, 64, 14, 13, 65, 66, 67, 12, 11, 10, 9, 24, 25, 26, 27, 28, 0, 29, 1, 30, 2, 68, 8, 31, 42, 43, 49, 44, 32, 33, 45, 46, 47, 48, 50, 7, 6, 39, 40, 41, 34, 35, 51, 36, 37, 52, 53, 38 }
  uselistorder i32 -1, { 153, 0, 86, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 154, 87, 270, 88, 300, 89, 301, 289, 90, 341, 91, 342, 92, 343, 93, 344, 133, 84, 290, 291, 94, 292, 293, 95, 345, 1, 155, 2, 96, 302, 303, 156, 157, 158, 135, 159, 3, 4, 83, 73, 74, 160, 161, 162, 82, 271, 163, 272, 5, 6, 97, 304, 98, 305, 99, 298, 100, 306, 101, 297, 102, 307, 103, 288, 104, 308, 105, 273, 106, 309, 107, 296, 108, 274, 109, 164, 152, 110, 165, 111, 275, 112, 310, 113, 346, 347, 114, 276, 115, 311, 116, 294, 117, 295, 118, 277, 119, 348, 120, 324, 121, 278, 122, 279, 123, 325, 124, 299, 125, 312, 126, 349, 85, 350, 166, 167, 168, 169, 170, 171, 172, 173, 7, 8, 9, 10, 11, 127, 128, 12, 174, 280, 18, 175, 19, 176, 14, 177, 178, 281, 13, 179, 77, 20, 180, 181, 17, 182, 183, 184, 267, 268, 185, 186, 187, 265, 129, 266, 21, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 269, 15, 208, 16, 209, 210, 211, 22, 212, 213, 130, 282, 214, 23, 215, 283, 78, 75, 76, 24, 25, 28, 136, 284, 27, 138, 285, 26, 137, 286, 29, 30, 139, 287, 31, 32, 33, 34, 35, 216, 36, 79, 37, 38, 40, 217, 132, 39, 80, 41, 42, 43, 44, 45, 46, 47, 218, 48, 131, 49, 50, 52, 219, 51, 53, 54, 55, 56, 220, 57, 58, 59, 221, 60, 61, 62, 222, 63, 64, 65, 66, 67, 223, 68, 69, 70, 224, 71, 72, 313, 314, 145, 315, 143, 316, 144, 317, 141, 318, 225, 226, 227, 228, 229, 146, 319, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 140, 320, 147, 321, 256, 257, 258, 259, 260, 142, 322, 134, 148, 323, 81, 261, 262, 263, 264, 149, 150, 151 }
  uselistorder i32* @global_var_1db04.629, { 1, 0 }
  uselistorder i32 1, { 519, 160, 331, 369, 873, 874, 875, 876, 877, 345, 520, 315, 985, 334, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 523, 522, 521, 307, 308, 311, 310, 306, 305, 309, 314, 312, 304, 313, 524, 77, 76, 72, 74, 73, 75, 78, 71, 683, 82, 79, 81, 80, 525, 83, 526, 137, 138, 527, 36, 169, 528, 281, 529, 120, 530, 282, 531, 283, 753, 754, 532, 294, 290, 295, 291, 292, 296, 293, 755, 756, 757, 414, 110, 111, 107, 109, 108, 533, 302, 534, 87, 0, 538, 537, 536, 535, 32, 33, 415, 539, 34, 35, 346, 416, 540, 98, 541, 879, 546, 545, 544, 543, 542, 66, 67, 68, 70, 69, 417, 547, 998, 347, 550, 549, 548, 286, 285, 551, 240, 241, 239, 242, 28, 29, 30, 31, 552, 134, 135, 133, 132, 553, 554, 289, 288, 555, 348, 880, 556, 89, 90, 418, 419, 329, 560, 559, 558, 557, 140, 139, 335, 561, 86, 562, 105, 563, 121, 564, 122, 565, 13, 566, 124, 567, 219, 568, 26, 569, 27, 570, 88, 571, 9, 572, 10, 573, 846, 320, 16, 15, 14, 684, 685, 686, 687, 688, 689, 690, 999, 20, 21, 17, 18, 19, 574, 420, 421, 575, 24, 23, 25, 22, 377, 758, 576, 170, 378, 578, 577, 168, 167, 579, 97, 580, 104, 581, 11, 12, 582, 202, 583, 65, 584, 49, 585, 50, 586, 85, 99, 587, 123, 588, 84, 589, 287, 590, 284, 591, 297, 592, 91, 303, 166, 379, 881, 882, 380, 883, 884, 319, 885, 886, 887, 888, 325, 889, 595, 594, 593, 44, 46, 38, 39, 42, 40, 41, 37, 43, 45, 1, 890, 891, 892, 893, 48, 47, 2, 894, 895, 896, 897, 336, 898, 899, 337, 900, 597, 596, 280, 279, 759, 760, 761, 422, 598, 103, 102, 101, 100, 901, 349, 350, 3, 413, 902, 599, 205, 203, 206, 207, 204, 903, 905, 904, 423, 906, 238, 237, 861, 907, 908, 909, 114, 115, 910, 716, 600, 116, 118, 119, 117, 911, 912, 601, 164, 163, 162, 161, 165, 913, 914, 602, 95, 94, 93, 92, 96, 424, 693, 425, 694, 381, 695, 696, 434, 697, 717, 435, 436, 707, 708, 713, 433, 691, 692, 698, 431, 699, 700, 432, 701, 702, 430, 703, 704, 429, 705, 706, 428, 709, 710, 427, 711, 712, 426, 714, 715, 718, 437, 330, 719, 438, 720, 722, 723, 721, 724, 439, 725, 682, 351, 728, 726, 440, 727, 730, 441, 731, 732, 733, 370, 734, 735, 352, 741, 742, 326, 442, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 514, 605, 604, 603, 148, 151, 149, 150, 154, 157, 155, 159, 152, 153, 156, 158, 736, 737, 443, 738, 739, 444, 740, 616, 271, 270, 265, 269, 268, 267, 264, 266, 729, 445, 618, 617, 299, 301, 298, 300, 847, 620, 619, 234, 235, 233, 232, 231, 236, 621, 448, 382, 743, 744, 383, 745, 446, 447, 449, 746, 747, 450, 451, 452, 453, 454, 455, 456, 457, 633, 632, 631, 630, 629, 628, 627, 626, 625, 518, 624, 623, 622, 52, 54, 53, 56, 55, 458, 327, 459, 634, 462, 461, 460, 748, 636, 635, 749, 637, 463, 464, 465, 750, 751, 466, 353, 752, 328, 467, 641, 640, 639, 638, 113, 112, 767, 5, 762, 468, 763, 4, 764, 371, 765, 332, 333, 766, 768, 372, 769, 645, 644, 643, 515, 516, 642, 848, 384, 849, 385, 850, 6, 851, 7, 8, 770, 771, 772, 773, 774, 775, 776, 777, 373, 778, 779, 780, 781, 469, 782, 470, 783, 471, 784, 785, 786, 787, 788, 648, 647, 646, 211, 210, 208, 213, 214, 217, 215, 209, 218, 216, 212, 789, 790, 791, 792, 793, 472, 473, 650, 649, 191, 194, 193, 198, 197, 196, 199, 192, 195, 794, 795, 796, 474, 797, 798, 799, 800, 801, 802, 475, 803, 476, 387, 386, 477, 804, 651, 57, 59, 61, 62, 64, 63, 60, 58, 805, 806, 478, 807, 479, 480, 390, 388, 389, 517, 652, 200, 201, 808, 809, 338, 810, 811, 812, 813, 481, 814, 339, 482, 483, 815, 391, 816, 653, 222, 225, 220, 221, 226, 227, 230, 228, 224, 229, 223, 817, 818, 819, 820, 821, 484, 822, 485, 393, 392, 486, 823, 487, 824, 654, 274, 276, 277, 278, 275, 273, 272, 825, 826, 827, 828, 829, 830, 831, 488, 832, 489, 833, 490, 398, 397, 491, 834, 394, 835, 395, 836, 396, 837, 659, 658, 657, 656, 655, 142, 144, 146, 147, 145, 141, 143, 838, 839, 840, 841, 842, 843, 492, 401, 400, 493, 844, 399, 845, 660, 246, 245, 244, 248, 249, 252, 250, 243, 251, 247, 852, 853, 854, 855, 856, 857, 494, 404, 403, 495, 858, 402, 859, 665, 664, 663, 662, 661, 256, 255, 254, 259, 260, 263, 261, 253, 258, 262, 257, 915, 321, 499, 361, 362, 916, 322, 497, 363, 364, 498, 917, 354, 918, 360, 919, 323, 365, 502, 366, 375, 324, 500, 367, 368, 501, 920, 355, 921, 922, 411, 923, 924, 925, 406, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 407, 938, 939, 940, 941, 942, 341, 943, 503, 944, 504, 505, 945, 946, 947, 948, 949, 408, 950, 951, 952, 356, 953, 409, 954, 955, 956, 357, 957, 410, 958, 959, 960, 358, 961, 962, 963, 964, 342, 965, 966, 967, 340, 496, 405, 968, 970, 972, 971, 969, 506, 973, 974, 975, 507, 976, 977, 978, 979, 681, 376, 980, 981, 374, 508, 983, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 174, 173, 171, 172, 176, 186, 185, 178, 184, 177, 183, 175, 179, 181, 180, 182, 860, 412, 509, 678, 188, 190, 189, 187, 862, 863, 510, 359, 511, 866, 512, 513, 867, 864, 865, 868, 869, 870, 871, 343, 872, 344, 129, 126, 128, 127, 131, 125, 130, 982, 106, 878, 136, 984, 51, 679, 680, 318, 317, 316 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_15088() local_unnamed_addr {
dec_label_pc_15088:
  %v5_1508c = load i32, i32* @r0, align 4
  ret i32 %v5_1508c

; uselistorder directives
  uselistorder i32* @r0, { 3, 17, 18, 104, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 57, 58, 60, 59, 25, 190, 191, 32, 33, 34, 35, 6, 2, 12, 13, 106, 107, 26, 192, 193, 195, 14, 15, 109, 16, 108, 100, 30, 101, 19, 102, 110, 194, 40, 5, 61, 62, 63, 64, 28, 9, 65, 66, 67, 68, 8, 196, 21, 22, 111, 7, 112, 10, 113, 114, 20, 115, 116, 117, 118, 0, 36, 41, 42, 37, 38, 39, 43, 45, 46, 47, 48, 49, 44, 50, 51, 52, 53, 54, 55, 56, 27, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 29, 81, 91, 92, 1, 4, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 119, 99, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 103, 105, 11, 23, 24, 31 }
}

define i32 @function_15090() local_unnamed_addr {
entry:
  %v3_15094 = load i32, i32* @r4, align 4
  %v0_1509c = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_15094)
  ret i32 %v0_1509c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 4, 5, 6, 2, 3, 1, 8 }
  uselistorder i32 0, { 119, 0, 901, 902, 903, 904, 121, 120, 905, 1284, 1285, 1286, 1287, 1288, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1289, 1290, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 33, 1309, 1310, 1311, 1312, 1313, 34, 1314, 1315, 1316, 35, 1317, 1318, 1319, 36, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1335, 1336, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 37, 1355, 1356, 1357, 1358, 1359, 38, 1360, 1361, 1362, 1363, 1364, 39, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 745, 746, 267, 747, 268, 654, 909, 910, 911, 912, 913, 748, 749, 1378, 1379, 1380, 1381, 269, 750, 1, 751, 752, 753, 1382, 1383, 1384, 122, 1385, 87, 1386, 85, 86, 1387, 1388, 1389, 270, 1393, 271, 1404, 1406, 576, 223, 1407, 272, 1405, 273, 274, 2, 1390, 1391, 123, 914, 250, 915, 277, 252, 251, 916, 917, 918, 919, 276, 921, 922, 275, 923, 1392, 279, 1394, 280, 253, 1395, 1396, 1398, 1399, 278, 926, 928, 929, 67, 224, 930, 927, 924, 925, 3, 872, 875, 873, 874, 225, 4, 933, 931, 932, 226, 124, 876, 877, 878, 879, 881, 882, 281, 5, 883, 6, 940, 941, 125, 934, 935, 936, 937, 938, 939, 7, 8, 920, 655, 656, 657, 282, 9, 283, 942, 943, 570, 856, 571, 944, 833, 945, 737, 946, 658, 947, 811, 659, 906, 1408, 1409, 80, 754, 284, 755, 756, 757, 758, 285, 759, 760, 761, 762, 763, 764, 765, 660, 948, 1397, 661, 949, 766, 784, 662, 572, 1400, 90, 1401, 1282, 663, 664, 1283, 884, 950, 1402, 1403, 10, 951, 107, 952, 953, 218, 217, 577, 91, 92, 93, 94, 601, 578, 69, 68, 108, 954, 955, 956, 957, 959, 958, 11, 960, 961, 220, 219, 579, 95, 96, 97, 98, 602, 580, 71, 70, 66, 76, 962, 603, 963, 964, 965, 99, 966, 967, 968, 969, 970, 126, 971, 581, 604, 582, 583, 972, 605, 116, 127, 973, 974, 975, 100, 976, 977, 978, 12, 606, 227, 14, 13, 128, 979, 129, 607, 15, 228, 130, 131, 262, 72, 132, 286, 665, 88, 767, 768, 981, 980, 982, 983, 40, 133, 984, 136, 135, 134, 263, 264, 265, 138, 137, 139, 287, 985, 986, 140, 885, 886, 117, 141, 987, 142, 666, 143, 988, 989, 144, 990, 991, 667, 629, 145, 146, 671, 668, 630, 631, 632, 633, 644, 627, 608, 294, 628, 650, 651, 634, 635, 636, 609, 292, 637, 638, 610, 293, 639, 640, 611, 291, 641, 642, 612, 290, 643, 645, 613, 289, 646, 653, 614, 288, 647, 652, 648, 84, 73, 221, 222, 649, 575, 669, 295, 670, 230, 672, 109, 673, 296, 674, 677, 678, 148, 229, 675, 676, 297, 298, 679, 680, 254, 681, 682, 683, 684, 685, 686, 615, 687, 688, 81, 299, 690, 691, 692, 693, 694, 695, 696, 238, 237, 697, 300, 698, 101, 699, 700, 118, 701, 600, 702, 703, 704, 599, 705, 706, 707, 147, 301, 302, 708, 711, 712, 713, 714, 715, 149, 709, 150, 710, 16, 151, 689, 857, 858, 716, 717, 303, 718, 720, 152, 721, 722, 723, 724, 725, 726, 727, 153, 728, 255, 304, 729, 82, 305, 730, 719, 17, 731, 239, 732, 306, 733, 734, 735, 736, 307, 740, 616, 266, 155, 154, 232, 308, 738, 739, 231, 741, 742, 743, 74, 744, 156, 157, 309, 89, 769, 770, 771, 772, 235, 773, 774, 775, 234, 776, 777, 778, 779, 112, 780, 782, 781, 110, 111, 158, 233, 310, 783, 258, 256, 257, 113, 159, 77, 160, 785, 786, 103, 104, 78, 161, 162, 163, 240, 787, 114, 788, 789, 790, 236, 791, 164, 792, 793, 311, 794, 795, 796, 165, 166, 797, 167, 798, 105, 106, 79, 168, 169, 241, 799, 800, 801, 802, 170, 803, 804, 805, 171, 173, 172, 242, 807, 806, 174, 808, 809, 175, 810, 812, 180, 313, 813, 178, 179, 176, 177, 814, 815, 181, 816, 314, 315, 817, 312, 818, 182, 184, 183, 185, 820, 821, 819, 822, 18, 19, 20, 21, 22, 823, 186, 824, 187, 188, 243, 826, 825, 827, 829, 830, 828, 23, 24, 25, 26, 27, 831, 189, 832, 834, 835, 836, 75, 190, 192, 191, 244, 838, 837, 316, 839, 841, 842, 843, 844, 317, 845, 28, 29, 30, 840, 31, 32, 846, 193, 847, 848, 194, 196, 195, 245, 851, 849, 850, 318, 853, 852, 854, 197, 855, 859, 198, 200, 199, 246, 862, 861, 860, 319, 864, 863, 865, 201, 866, 867, 868, 869, 870, 992, 993, 871, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 320, 1007, 584, 585, 586, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 41, 1049, 1050, 1051, 202, 203, 1052, 321, 1053, 1054, 1055, 1056, 587, 617, 1057, 1058, 1059, 42, 1060, 1061, 1062, 1063, 43, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 44, 1071, 1072, 208, 1073, 1074, 1075, 1076, 1077, 1078, 45, 1079, 1080, 1081, 46, 1082, 1083, 1084, 47, 1085, 1086, 1087, 1088, 324, 1102, 1103, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 588, 618, 1098, 1099, 1100, 1101, 589, 619, 1104, 1105, 1106, 48, 1107, 1108, 325, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 590, 620, 1117, 1118, 1119, 49, 1120, 1121, 1122, 1123, 50, 1124, 591, 1125, 1126, 1129, 1130, 592, 204, 1127, 1128, 205, 206, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 593, 621, 1142, 1143, 1144, 51, 1145, 1146, 1147, 1148, 1149, 1150, 52, 1151, 115, 1152, 1153, 1154, 1155, 594, 622, 1156, 1157, 1158, 53, 1159, 207, 1160, 1161, 1162, 54, 1163, 1164, 1165, 1166, 1167, 595, 623, 1168, 1169, 1170, 55, 1171, 1172, 1173, 56, 322, 323, 1174, 1175, 1176, 1177, 1178, 596, 624, 1179, 1180, 1181, 57, 1182, 1183, 1184, 58, 1185, 1186, 1187, 59, 1188, 1189, 1190, 60, 1191, 1192, 1193, 1194, 61, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1207, 1208, 597, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 247, 1220, 1223, 1224, 1227, 1228, 1229, 62, 1225, 1226, 1221, 1222, 1230, 1231, 210, 209, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 63, 211, 1242, 1243, 1244, 64, 1245, 1246, 1247, 1248, 1250, 83, 326, 1251, 1249, 1205, 1206, 102, 573, 574, 1252, 1253, 1254, 598, 248, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 259, 1275, 260, 1278, 261, 1280, 249, 880, 327, 887, 888, 212, 889, 890, 891, 892, 213, 893, 328, 894, 895, 65, 896, 897, 898, 899, 900, 1276, 214, 1277, 907, 215, 908, 216, 1279, 1281, 625, 626, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424 }
  uselistorder i32* @r4, { 40, 678, 682, 683, 686, 687, 527, 528, 529, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 180, 68, 533, 534, 535, 704, 705, 706, 707, 708, 709, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 710, 711, 5, 712, 713, 714, 715, 729, 730, 731, 732, 38, 733, 30, 724, 725, 726, 727, 728, 716, 717, 718, 536, 537, 538, 539, 540, 541, 542, 543, 719, 720, 723, 544, 545, 546, 487, 6, 488, 489, 490, 7, 491, 8, 492, 493, 507, 9, 10, 508, 509, 510, 511, 512, 513, 547, 548, 11, 556, 557, 549, 550, 551, 552, 553, 554, 555, 69, 70, 71, 72, 73, 74, 558, 559, 560, 561, 458, 459, 562, 563, 399, 400, 564, 565, 166, 167, 566, 567, 75, 76, 568, 569, 326, 327, 77, 78, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 79, 80, 570, 571, 721, 722, 4, 81, 82, 572, 573, 217, 218, 243, 244, 83, 84, 680, 681, 85, 86, 684, 685, 514, 515, 574, 575, 576, 577, 87, 88, 89, 90, 219, 220, 221, 222, 223, 578, 579, 580, 91, 92, 93, 581, 582, 583, 584, 585, 586, 41, 42, 43, 44, 45, 46, 47, 48, 94, 95, 49, 50, 51, 52, 96, 97, 53, 56, 57, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 98, 99, 66, 67, 12, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 0, 129, 117, 118, 119, 120, 121, 122, 106, 107, 108, 109, 110, 460, 461, 462, 463, 464, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 13, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 31, 172, 173, 174, 175, 176, 177, 178, 1, 179, 224, 225, 226, 2, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 258, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 3, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 14, 305, 15, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 16, 342, 17, 343, 18, 344, 19, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 20, 372, 21, 373, 22, 374, 23, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 419, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 24, 439, 25, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 465, 466, 467, 26, 468, 27, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 32, 618, 619, 37, 620, 29, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 36, 28, 633, 634, 635, 636, 637, 638, 639, 35, 640, 641, 642, 34, 643, 644, 645, 33, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 673, 674, 675, 676, 677, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 516, 520, 517, 518, 519, 521, 522, 523, 524, 525, 526, 669, 670, 671, 530, 531, 532, 39, 679 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
