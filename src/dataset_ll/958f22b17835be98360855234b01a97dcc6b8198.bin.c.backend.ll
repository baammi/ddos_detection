source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%_TYPEDEF_fd_set = type { [1 x i32] }
%timeval = type { i32, i32 }
%dirent = type { i32, i32, i16, i8, [256 x i8] }
%__dirstream = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_1c014.2 = global i32 1
@global_var_1c0ac.3 = global i32* @global_var_1c014.2
@global_var_1c0b4.4 = global i32 0
@global_var_1c0b8.5 = global i32 35616
@global_var_1c0bc.6 = global i32 35616
@global_var_1c0c0.7 = global i32 35616
@global_var_1c0c4.8 = global i32 35616
@global_var_1c0c8.9 = global i32 35616
@global_var_1c0cc.10 = global i32 35616
@global_var_1c0d0.11 = global i32 35616
@global_var_1c0d4.12 = global i32 35616
@global_var_1c0d8.13 = global i32 35616
@global_var_1c0dc.14 = global i32 35616
@global_var_1c0e0.15 = global i32 35616
@global_var_1c0e4.16 = global i32 35616
@global_var_1c0e8.17 = global i32 35616
@global_var_1c0ec.18 = global i32 35616
@global_var_1c0f0.19 = global i32 35616
@global_var_1c0f4.20 = global i32 35616
@global_var_1c0f8.21 = global i32 35616
@global_var_1c0fc.22 = global i32 35616
@global_var_1c104.24 = global i32 35616
@global_var_1c108.25 = global i32 35616
@global_var_1c10c.26 = global i32 35616
@global_var_1c110.27 = global i32 35616
@global_var_1c114.28 = global i32 35616
@global_var_1c118.29 = global i32 35616
@global_var_1c11c.30 = global i32 35616
@global_var_1c120.31 = global i32 35616
@global_var_1c124.32 = global i32 35616
@global_var_1c128.33 = global i32 35616
@global_var_1c12c.34 = global i32 35616
@global_var_1c130.35 = global i32 35616
@global_var_1c134.36 = global i32 35616
@global_var_1c138.37 = global i32 35616
@global_var_1c13c.38 = global i32 35616
@global_var_1c140.39 = global i32 35616
@global_var_1c144.40 = global i32 35616
@global_var_1c148.41 = global i32 35616
@global_var_1c14c.42 = global i32 35616
@global_var_1c150.43 = global i32 35616
@global_var_1c158.45 = global i32 35616
@global_var_1c15c.46 = global i32 35616
@global_var_1c160.47 = global i32 35616
@global_var_1c164.48 = global i32 35616
@global_var_1c168.49 = global i32 35616
@global_var_1c16c.50 = global i32 35616
@global_var_1c170.51 = global i32 35616
@global_var_1c174.52 = global i32 35616
@global_var_1c178.53 = global i32 35616
@global_var_1c00c.57 = global i32 0
@global_var_1c184.58 = global i32* @global_var_1c00c.57
@global_var_1c1a4.64 = global i32 0
@global_var_fdfc.70 = constant i32 -382906384
@global_var_8d5c.72 = constant i32 -493894144
@global_var_1c1c0.76 = global i32 0
@global_var_92ac.77 = constant i32 -352321555
@global_var_e4b8.83 = constant i32 -382906384
@global_var_e9b8.85 = constant i32 -382906384
@global_var_daec.87 = constant i32 -382906384
@global_var_d370.89 = constant i32 -382906384
@global_var_cbb4.91 = constant i32 -382906384
@global_var_c288.93 = constant i32 -382906384
@global_var_bb50.95 = constant i32 -382906384
@global_var_95f0.98 = constant i32 -382906384
@global_var_1369c.100 = constant [4 x i8] c"GET\00"
@global_var_136a0.102 = constant i32 47
@global_var_8d50.104 = constant i32 -493894144
@global_var_13694.106 = constant i32 32
@global_var_1366c.108 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_13684.110 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_13690.112 = constant [3 x i8] c"\0D\0A\00"
@global_var_136a4.114 = constant [9 x i8] c"Cookie: \00"
@global_var_136b0.116 = constant [3 x i8] c"; \00"
@global_var_136b4.118 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_136bc.120 = constant i32 59
@global_var_136c0.122 = constant [5 x i8] c"http\00"
@global_var_136c8.124 = constant [5 x i8] c"url=\00"
@global_var_136d0.126 = constant [5 x i8] c"POST\00"
@global_var_12d64.127 = constant i32 -439275520
@global_var_136d8.129 = constant i32 39
@global_var_139d4.131 = constant i32 61
@global_var_1c21c.133 = global i32 0
@global_var_1c1c4.144 = global i32 0
@global_var_1c220.148 = local_unnamed_addr global i32 0
@global_var_1c1c8.150 = global i32 0
@global_var_fb4c.152 = constant i32 -382910448
@global_var_1c194.154 = global i32 77812
@global_var_1c228.157 = local_unnamed_addr global i32 0
@global_var_1c227.158 = local_unnamed_addr global i32 0
@global_var_1c226.159 = local_unnamed_addr global i32 0
@global_var_1c18c.161 = global i32 -1
@global_var_1c1cc.166 = global i32 0
@global_var_1c225.172 = local_unnamed_addr global i32 0
@global_var_136dc.176 = constant i32 10
@global_var_1c190.178 = global i32 -1
@global_var_12ff4.182 = constant i32 -382910224
@global_var_136e0.185 = constant i32 16777216
@global_var_1c1d4.187 = global i32 0
@global_var_1c1e0.189 = global i32 0
@global_var_1c1d8.191 = global i32 0
@global_var_1c1dc.193 = global i32 0
@global_var_1c23c.203 = global i32 0
@global_var_1c218.205 = global i32 0
@global_var_1c1e4.207 = global i32 0
@global_var_1c210.209 = global i32 0
@global_var_1c234.217 = global i32 0
@global_var_1c238.219 = global i32 0
@global_var_1c1e8.221 = global i32 0
@global_var_1c1eb.222 = local_unnamed_addr global i32 0
@global_var_1c1ea.223 = local_unnamed_addr global i32 0
@global_var_1c1fc.225 = global i32 0
@global_var_1c1f0.227 = local_unnamed_addr global i32 0
@global_var_1c1ed.228 = local_unnamed_addr global i32 0
@global_var_1c1fd.229 = local_unnamed_addr global i32 0
@global_var_1c1ff.230 = local_unnamed_addr global i32 0
@global_var_1c1f1.231 = local_unnamed_addr global i32 0
@global_var_1c1ec.232 = local_unnamed_addr global i32 0
@global_var_1c1fe.233 = local_unnamed_addr global i32 0
@global_var_1c20b.235 = local_unnamed_addr global i32 0
@global_var_1c20a.236 = local_unnamed_addr global i32 0
@global_var_137c0.238 = constant [6 x i8] c"14=9>\00"
@global_var_137c8.240 = constant [8 x i8] c"1!%1\229?\00"
@global_var_137d0.242 = constant [5 x i8] c" 1##\00"
@global_var_137d8.244 = constant [9 x i8] c"381>75=5\00"
@global_var_137e4.246 = constant i32 490349927
@global_var_136b8.248 = constant i32 0
@global_var_137b8.250 = constant [5 x i8] c"abcd\00"
@global_var_136e8.252 = constant [4 x i8] c"14=\00"
@global_var_136ec.254 = constant [5 x i8] c"\22??$\00"
@global_var_136f4.256 = constant [5 x i8] c"1>;?\00"
@global_var_136fc.258 = constant [7 x i8] c"(3ceaa\00"
@global_var_13704.260 = constant [6 x i8] c"$$>5$\00"
@global_var_1370c.262 = constant [9 x i8] c"8%>$egei\00"
@global_var_13718.264 = constant [6 x i8] c"&9*(&\00"
@global_var_13720.266 = constant [6 x i8] c"abcde\00"
@global_var_13728.268 = constant [9 x i8] c"a``a389>\00"
@global_var_13734.270 = constant [8 x i8] c"4561%<$\00"
@global_var_1373c.272 = constant [4 x i8] c"abc\00"
@global_var_13740.274 = constant [7 x i8] c"1>$#<!\00"
@global_var_13748.276 = constant [4 x i8] c"e% \00"
@global_var_1374c.278 = constant [9 x i8] c":%1>$538\00"
@global_var_13758.280 = constant [6 x i8] c"*<((~\00"
@global_var_13760.282 = constant [7 x i8] c"abcdef\00"
@global_var_13768.284 = constant [11 x i8] c"?5<9>%(abc\00"
@global_var_13774.286 = constant [7 x i8] c"\0A$5eba\00"
@global_var_1377c.288 = constant i32 490349927
@global_var_1378c.290 = constant [5 x i8] c"%#5\22\00"
@global_var_13794.292 = constant [7 x i8] c"415=?>\00"
@global_var_1379c.294 = constant [4 x i8] c"29>\00"
@global_var_137a0.296 = constant [8 x i8] c"#%  ?\22$\00"
@global_var_137a8.298 = constant [11 x i8] c"#% 5\22&9#?\22\00"
@global_var_137b4.300 = constant [9 x i8] c"*)14abcd\00"
@global_var_1c1f4.301 = local_unnamed_addr global i32 0
@global_var_1c1f2.303 = local_unnamed_addr global i32 0
@global_var_1c1f3.304 = local_unnamed_addr global i32 0
@global_var_1c20c.306 = local_unnamed_addr global i32 0
@global_var_1c20d.307 = local_unnamed_addr global i32 0
@global_var_137fa.314 = constant i32 2096127
@global_var_137f1.316 = constant i32 2095871
@global_var_1c244.319 = global i32 0
@global_var_1c19c.322 = global i32 1043935
@global_var_13800.327 = constant i32 39228
@global_var_1c254.328 = local_unnamed_addr global i32 0
@global_var_1c258.329 = local_unnamed_addr global i32 0
@global_var_1c259.330 = local_unnamed_addr global i32 0
@global_var_13804.332 = constant i32 55430
@global_var_1c264.333 = local_unnamed_addr global i32 0
@global_var_1c268.334 = local_unnamed_addr global i32 0
@global_var_1c269.335 = local_unnamed_addr global i32 0
@global_var_13808.337 = constant i32 1499028601
@global_var_1c270.338 = local_unnamed_addr global i32 0
@global_var_1c26c.339 = local_unnamed_addr global i32 0
@global_var_1c271.340 = local_unnamed_addr global i32 0
@global_var_13828.342 = constant i32 1380928786
@global_var_1c274.343 = local_unnamed_addr global i32 0
@global_var_1c278.344 = local_unnamed_addr global i32 0
@global_var_1c279.345 = local_unnamed_addr global i32 0
@global_var_13830.347 = constant i32 1480939538
@global_var_1c280.348 = local_unnamed_addr global i32 0
@global_var_1c27c.349 = local_unnamed_addr global i32 0
@global_var_1c281.350 = local_unnamed_addr global i32 0
@global_var_13838.352 = constant i32 1029266194
@global_var_1c288.353 = local_unnamed_addr global i32 0
@global_var_1c284.354 = local_unnamed_addr global i32 0
@global_var_1c289.355 = local_unnamed_addr global i32 0
@global_var_13840.357 = constant i32 1380928786
@global_var_1c290.358 = local_unnamed_addr global i32 0
@global_var_1c28c.359 = local_unnamed_addr global i32 0
@global_var_1c291.360 = local_unnamed_addr global i32 0
@global_var_13850.362 = constant i32 1297895442
@global_var_1c294.363 = local_unnamed_addr global i32 0
@global_var_1c298.364 = local_unnamed_addr global i32 0
@global_var_1c299.365 = local_unnamed_addr global i32 0
@global_var_13858.367 = constant i32 1548307986
@global_var_1c29c.368 = local_unnamed_addr global i32 0
@global_var_1c2a0.369 = local_unnamed_addr global i32 0
@global_var_1c2a1.370 = local_unnamed_addr global i32 0
@global_var_13864.372 = constant i32 1414749203
@global_var_1c2a4.373 = local_unnamed_addr global i32 0
@global_var_1c2a8.374 = local_unnamed_addr global i32 0
@global_var_1c2a9.375 = local_unnamed_addr global i32 0
@global_var_1386c.377 = constant i32 1380928786
@global_var_1c2b0.378 = local_unnamed_addr global i32 0
@global_var_1c2ac.379 = local_unnamed_addr global i32 0
@global_var_1c2b1.380 = local_unnamed_addr global i32 0
@global_var_13880.382 = constant i32 1380928786
@global_var_1c2b8.383 = local_unnamed_addr global i32 0
@global_var_1c2b4.384 = local_unnamed_addr global i32 0
@global_var_1c2b9.385 = local_unnamed_addr global i32 0
@global_var_13890.387 = constant i32 1920627327
@global_var_1c2bc.388 = local_unnamed_addr global i32 0
@global_var_1c2c0.389 = local_unnamed_addr global i32 0
@global_var_1c2c1.390 = local_unnamed_addr global i32 0
@global_var_1389c.392 = constant i32 1581864978
@global_var_1c2c8.393 = local_unnamed_addr global i32 0
@global_var_1c2c4.394 = local_unnamed_addr global i32 0
@global_var_1c2c9.395 = local_unnamed_addr global i32 0
@global_var_138b0.397 = constant i32 1599867994
@global_var_1c2cc.398 = local_unnamed_addr global i32 0
@global_var_1c2d0.399 = local_unnamed_addr global i32 0
@global_var_1c2d1.400 = local_unnamed_addr global i32 0
@global_var_138c8.402 = constant [9 x i8] c"\5CNNJROY=\00"
@global_var_1c2d4.403 = local_unnamed_addr global i32 0
@global_var_1c2d8.404 = local_unnamed_addr global i32 0
@global_var_1c2d9.405 = local_unnamed_addr global i32 0
@global_var_138d4.407 = constant i32 1264081170
@global_var_1c2e0.408 = local_unnamed_addr global i32 0
@global_var_1c2dc.409 = local_unnamed_addr global i32 0
@global_var_1c2e1.410 = local_unnamed_addr global i32 0
@global_var_138e4.412 = constant i32 1264081170
@global_var_1c2e8.413 = local_unnamed_addr global i32 0
@global_var_1c2e4.414 = local_unnamed_addr global i32 0
@global_var_1c2e9.415 = local_unnamed_addr global i32 0
@global_var_138f8.417 = constant i32 1264081170
@global_var_1c2ec.418 = local_unnamed_addr global i32 0
@global_var_1c2f0.419 = local_unnamed_addr global i32 0
@global_var_1c2f1.420 = local_unnamed_addr global i32 0
@global_var_13910.422 = constant i32 1264081170
@global_var_1c2f8.423 = local_unnamed_addr global i32 0
@global_var_1c2f4.424 = local_unnamed_addr global i32 0
@global_var_1c2f9.425 = local_unnamed_addr global i32 0
@global_var_1392c.427 = constant i32 1264081170
@global_var_1c300.428 = local_unnamed_addr global i32 0
@global_var_1c2fc.429 = local_unnamed_addr global i32 0
@global_var_1c301.430 = local_unnamed_addr global i32 0
@global_var_1393c.432 = constant [7 x i8] c"NUXQQ=\00"
@global_var_1c304.433 = local_unnamed_addr global i32 0
@global_var_1c308.434 = local_unnamed_addr global i32 0
@global_var_1c309.435 = local_unnamed_addr global i32 0
@global_var_13944.437 = constant [8 x i8] c"XS\5C_QX=\00"
@global_var_1c30c.438 = local_unnamed_addr global i32 0
@global_var_1c310.439 = local_unnamed_addr global i32 0
@global_var_1c311.440 = local_unnamed_addr global i32 0
@global_var_1394c.442 = constant [8 x i8] c"NDNIXP=\00"
@global_var_1c314.443 = local_unnamed_addr global i32 0
@global_var_1c318.444 = local_unnamed_addr global i32 0
@global_var_1c319.445 = local_unnamed_addr global i32 0
@global_var_13954.447 = constant [4 x i8] c"NU=\00"
@global_var_1c320.448 = local_unnamed_addr global i32 0
@global_var_1c31c.449 = local_unnamed_addr global i32 0
@global_var_1c321.450 = local_unnamed_addr global i32 0
@global_var_13958.452 = constant i32 1398038290
@global_var_1c324.453 = local_unnamed_addr global i32 0
@global_var_1c328.454 = local_unnamed_addr global i32 0
@global_var_1c329.455 = local_unnamed_addr global i32 0
@global_var_13970.457 = constant i32 1499028569
@global_var_1c330.458 = local_unnamed_addr global i32 0
@global_var_1c32c.459 = local_unnamed_addr global i32 0
@global_var_1c331.460 = local_unnamed_addr global i32 0
@global_var_13990.462 = constant [10 x i8] c"S^ROOX^I=\00"
@global_var_1c334.463 = local_unnamed_addr global i32 0
@global_var_1c338.464 = local_unnamed_addr global i32 0
@global_var_1c339.465 = local_unnamed_addr global i32 0
@global_var_1c33c.466 = local_unnamed_addr global i32 0
@global_var_1c340.467 = local_unnamed_addr global i32 0
@global_var_1c341.468 = local_unnamed_addr global i32 0
@global_var_1399c.470 = constant [6 x i8] c"RZTS=\00"
@global_var_1c348.471 = local_unnamed_addr global i32 0
@global_var_1c344.472 = local_unnamed_addr global i32 0
@global_var_1c349.473 = local_unnamed_addr global i32 0
@global_var_139a4.475 = constant [7 x i8] c"XSIXO=\00"
@global_var_1c34c.476 = local_unnamed_addr global i32 0
@global_var_1c350.477 = local_unnamed_addr global i32 0
@global_var_1c351.478 = local_unnamed_addr global i32 0
@global_var_139ac.480 = constant i32 1398038290
@global_var_1c358.481 = local_unnamed_addr global i32 0
@global_var_1c354.482 = local_unnamed_addr global i32 0
@global_var_1c359.483 = local_unnamed_addr global i32 0
@global_var_139c0.485 = constant i32 1398038290
@global_var_1c35c.486 = local_unnamed_addr global i32 0
@global_var_1c360.487 = local_unnamed_addr global i32 0
@global_var_1c361.488 = local_unnamed_addr global i32 0
@global_var_139d8.490 = constant i32 1213361769
@global_var_1c364.491 = local_unnamed_addr global i32 0
@global_var_1c368.492 = local_unnamed_addr global i32 0
@global_var_1c369.493 = local_unnamed_addr global i32 0
@global_var_139f0.495 = constant i32 1581864978
@global_var_1c370.496 = local_unnamed_addr global i32 0
@global_var_1c36c.497 = local_unnamed_addr global i32 0
@global_var_1c371.498 = local_unnamed_addr global i32 0
@global_var_13a04.500 = constant [12 x i8] c"S\5CPXNXOKXO=\00"
@global_var_1c374.501 = local_unnamed_addr global i32 0
@global_var_1c378.502 = local_unnamed_addr global i32 0
@global_var_1c379.503 = local_unnamed_addr global i32 0
@global_var_13a10.505 = constant i32 1397969534
@global_var_1c37c.506 = local_unnamed_addr global i32 0
@global_var_1c380.507 = local_unnamed_addr global i32 0
@global_var_1c381.508 = local_unnamed_addr global i32 0
@global_var_13d34.510 = constant i32 1482579580
@global_var_1c388.511 = local_unnamed_addr global i32 0
@global_var_1c384.512 = local_unnamed_addr global i32 0
@global_var_1c389.513 = local_unnamed_addr global i32 0
@global_var_13d88.515 = constant i32 1482579580
@global_var_1c390.516 = local_unnamed_addr global i32 0
@global_var_1c38c.517 = local_unnamed_addr global i32 0
@global_var_1c391.518 = local_unnamed_addr global i32 0
@global_var_13a28.520 = constant i32 1230197374
@global_var_1c398.521 = local_unnamed_addr global i32 0
@global_var_1c394.522 = local_unnamed_addr global i32 0
@global_var_1c399.523 = local_unnamed_addr global i32 0
@global_var_13a5c.525 = constant i32 2118735950
@global_var_1c39c.526 = local_unnamed_addr global i32 0
@global_var_1c3a0.527 = local_unnamed_addr global i32 0
@global_var_1c3a1.528 = local_unnamed_addr global i32 0
@global_var_13a6c.530 = constant i32 1331386447
@global_var_1c3a4.531 = local_unnamed_addr global i32 0
@global_var_1c3a8.532 = local_unnamed_addr global i32 0
@global_var_1c3a9.533 = local_unnamed_addr global i32 0
@global_var_13a78.535 = constant i32 1549685329
@global_var_1c3ac.536 = local_unnamed_addr global i32 0
@global_var_1c3b0.537 = local_unnamed_addr global i32 0
@global_var_1c3b1.538 = local_unnamed_addr global i32 0
@global_var_13a84.540 = constant i32 273242190
@global_var_1c3b4.541 = local_unnamed_addr global i32 0
@global_var_1c3b8.542 = local_unnamed_addr global i32 0
@global_var_1c3b9.543 = local_unnamed_addr global i32 0
@global_var_13a94.545 = constant i32 1230197342
@global_var_1c3c0.546 = local_unnamed_addr global i32 0
@global_var_1c3bc.547 = local_unnamed_addr global i32 0
@global_var_1c3c1.548 = local_unnamed_addr global i32 0
@global_var_13aa8.550 = constant i32 1398558537
@global_var_1c3c8.551 = local_unnamed_addr global i32 0
@global_var_1c3c4.552 = local_unnamed_addr global i32 0
@global_var_1c3c9.553 = local_unnamed_addr global i32 0
@global_var_13abc.555 = constant [9 x i8] c"^UHSVXY=\00"
@global_var_1c3cc.556 = local_unnamed_addr global i32 0
@global_var_1c3d0.557 = local_unnamed_addr global i32 0
@global_var_1c3d1.558 = local_unnamed_addr global i32 0
@global_var_13a1c.560 = constant i32 1297635414
@global_var_1c3d4.561 = local_unnamed_addr global i32 0
@global_var_1c3d8.562 = local_unnamed_addr global i32 0
@global_var_1c3d9.563 = local_unnamed_addr global i32 0
@global_var_13ac8.565 = constant i32 1397969502
@global_var_1c3dc.566 = local_unnamed_addr global i32 0
@global_var_1c3e0.567 = local_unnamed_addr global i32 0
@global_var_1c3e1.568 = local_unnamed_addr global i32 0
@global_var_13ad8.570 = constant i32 1263491150
@global_var_1c3e8.571 = local_unnamed_addr global i32 0
@global_var_1c3e4.572 = local_unnamed_addr global i32 0
@global_var_1c3e9.573 = local_unnamed_addr global i32 0
@global_var_13aec.575 = constant i32 1263491150
@global_var_1c3f0.576 = local_unnamed_addr global i32 0
@global_var_1c3ec.577 = local_unnamed_addr global i32 0
@global_var_1c3f1.578 = local_unnamed_addr global i32 0
@global_var_13b08.580 = constant i32 1413960304
@global_var_1c3f4.581 = local_unnamed_addr global i32 0
@global_var_1c3f8.582 = local_unnamed_addr global i32 0
@global_var_1c3f9.583 = local_unnamed_addr global i32 0
@global_var_13b7c.585 = constant i32 1413960304
@global_var_1c3fc.586 = local_unnamed_addr global i32 0
@global_var_1c400.587 = local_unnamed_addr global i32 0
@global_var_1c401.588 = local_unnamed_addr global i32 0
@global_var_13bf0.590 = constant i32 1413960304
@global_var_1c408.591 = local_unnamed_addr global i32 0
@global_var_1c404.592 = local_unnamed_addr global i32 0
@global_var_1c409.593 = local_unnamed_addr global i32 0
@global_var_13c40.595 = constant i32 1413960304
@global_var_1c40c.596 = local_unnamed_addr global i32 0
@global_var_1c410.597 = local_unnamed_addr global i32 0
@global_var_1c411.598 = local_unnamed_addr global i32 0
@global_var_13cb4.600 = constant i32 1413960304
@global_var_1c418.601 = local_unnamed_addr global i32 0
@global_var_1c414.602 = local_unnamed_addr global i32 0
@global_var_1c419.603 = local_unnamed_addr global i32 0
@global_var_1c420.604 = local_unnamed_addr global i32 0
@global_var_1c41c.605 = local_unnamed_addr global i32 0
@global_var_1c421.606 = local_unnamed_addr global i32 0
@global_var_1c428.607 = local_unnamed_addr global i32 0
@global_var_1c424.608 = local_unnamed_addr global i32 0
@global_var_1c429.609 = local_unnamed_addr global i32 0
@global_var_1c42c.610 = local_unnamed_addr global i32 0
@global_var_1c430.611 = local_unnamed_addr global i32 0
@global_var_1c431.612 = local_unnamed_addr global i32 0
@global_var_13d28.614 = constant [11 x i8] c"YKOuXQMXO=\00"
@global_var_1c434.615 = local_unnamed_addr global i32 0
@global_var_1c438.616 = local_unnamed_addr global i32 0
@global_var_1c004.618 = global i32 0
@global_var_1c000.619 = global i32 -1
@global_var_1c1a0.55 = external global i8*
@global_var_1c1bc.74 = external global i8*
@global_var_1c1bd.81 = global i8 0
@global_var_1c224.156 = global %sockaddr* null
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1c198.163 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_fb34.168 = constant void (i32)* inttoptr (i32 -442556408 to void (i32)*)
@global_var_1c1d0.181 = external global i8*
@global_var_1c214.211 = external global i8*
@global_var_1c215.212 = local_unnamed_addr global i8 0
@global_var_1c208.226 = local_unnamed_addr global i8 0
@global_var_1c209.234 = local_unnamed_addr global i8 0
@global_var_1c1f8.302 = local_unnamed_addr global i8 0
@global_var_1c200.305 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8b08() local_unnamed_addr {
entry:
  %v3_8b0c = load i32, i32* @r4, align 4
  %v0_8b14 = call i32 @function_8e00()
  store i32 %v0_8b14, i32* @r0, align 4
  %v1_8b18 = call i32 @function_1360c(i32 %v0_8b14)
  call void @__pseudo_branch(i32 %v3_8b0c)
  ret i32 %v1_8b18
}

define i32 @function_8b20(i32 %arg1) local_unnamed_addr {
entry:
  %v3_8b2c = load i32, i32* @global_var_1c0b4.4, align 4
  call void @__pseudo_branch(i32 %v3_8b2c)
  %v0_8b30 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8b30, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v10_8b30 = load i32, i32* @r0, align 4
  ret i32 %v10_8b30

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i8* @_strcpy(i8* %dest, i8* %src) local_unnamed_addr {
entry:
  %v8_8b3c = call i8* @strcpy(i8* %dest, i8* %src)
  ret i8* %v8_8b3c
}

define i32 @_ioctl(i32 %fd, i32 %request, ...) local_unnamed_addr {
entry:
  %v6_8b48 = call i32 (i32, i32, ...) @ioctl(i32 %fd, i32 %request)
  ret i32 %v6_8b48
}

define i32 @_recv(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8b54 = call i32 @recv(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8b54
}

define i32 @_connect(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8b60 = call i32 @connect(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8b60
}

define i32 @_sigemptyset(%_TYPEDEF_sigset_t* %set) local_unnamed_addr {
entry:
  %v6_8b6c = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %set)
  ret i32 %v6_8b6c
}

define i32* @_memmove(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8b78 = call i32* @memmove(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8b78
}

define i32 @_getpid() local_unnamed_addr {
entry:
  %v4_8b84 = call i32 @getpid()
  ret i32 %v4_8b84
}

define i32 @_prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v9_8b90 = call i32 @prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5)
  ret i32 %v9_8b90
}

define i32* @_memcpy(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8b9c = call i32* @memcpy(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8b9c
}

define i32 @_readlink(i8* %path, i8* %buf, i32 %len) local_unnamed_addr {
entry:
  %v9_8ba8 = call i32 @readlink(i8* %path, i8* %buf, i32 %len)
  ret i32 %v9_8ba8
}

define i32* @_malloc(i32 %size) local_unnamed_addr {
entry:
  %v5_8bb4 = call i32* @malloc(i32 %size)
  ret i32* %v5_8bb4
}

define i32 @_sleep(i32 %seconds) local_unnamed_addr {
entry:
  %v5_8bc0 = call i32 @sleep(i32 %seconds)
  ret i32 %v5_8bc0
}

define i32 @_recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len) local_unnamed_addr {
entry:
  %v10_8bcc = call i32 @recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len)
  ret i32 %v10_8bcc
}

define i32 @_socket(i32 %domain, i32 %type, i32 %protocol) local_unnamed_addr {
entry:
  %v7_8bd8 = call i32 @socket(i32 %domain, i32 %type, i32 %protocol)
  ret i32 %v7_8bd8
}

define i32 @_select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout) local_unnamed_addr {
entry:
  %v12_8be4 = call i32 @select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout)
  ret i32 %v12_8be4
}

define %dirent* @_readdir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8bf0 = call %dirent* @readdir(%__dirstream* %dirp)
  ret %dirent* %v6_8bf0
}

define i32 @_sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo) local_unnamed_addr {
entry:
  %v7_8bfc = call i32 @sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo)
  ret i32 %v7_8bfc
}

define i32 @_send(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8c08 = call i32 @send(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8c08
}

; Function Attrs: noreturn
define void @_abort() local_unnamed_addr #0 {
entry:
  call void @abort()
  unreachable
}

define i32 @_accept(i32 %fd, %sockaddr* %addr, i32* %addr_len) local_unnamed_addr {
entry:
  %v9_8c20 = call i32 @accept(i32 %fd, %sockaddr* %addr, i32* %addr_len)
  ret i32 %v9_8c20
}

define i32* @_calloc(i32 %nmemb, i32 %size) local_unnamed_addr {
entry:
  %v6_8c2c = call i32* @calloc(i32 %nmemb, i32 %size)
  ret i32* %v6_8c2c
}

define i32 @_write(i32 %fd, i32* %buf, i32 %n) local_unnamed_addr {
entry:
  %v8_8c38 = call i32 @write(i32 %fd, i32* %buf, i32 %n)
  ret i32 %v8_8c38
}

define i32 @_kill(i32 %pid, i32 %sig) local_unnamed_addr {
entry:
  %v6_8c44 = call i32 @kill(i32 %pid, i32 %sig)
  ret i32 %v6_8c44
}

define i32 @_bind(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8c50 = call i32 @bind(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8c50
}

define i32 @_inet_addr(i8* %cp) local_unnamed_addr {
entry:
  %v6_8c5c = call i32 @inet_addr(i8* %cp)
  ret i32 %v6_8c5c
}

define i32 @_setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen) local_unnamed_addr {
entry:
  %v10_8c68 = call i32 @setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen)
  ret i32 %v10_8c68
}

define void (i32)* @_signal(i32 %sig, void (i32)* %handler) local_unnamed_addr {
entry:
  %v7_8c74 = call void (i32)* @signal(i32 %sig, void (i32)* %handler)
  ret void (i32)* %v7_8c74
}

define i32 @_read(i32 %fd, i32* %buf, i32 %nbytes) local_unnamed_addr {
entry:
  %v8_8c80 = call i32 @read(i32 %fd, i32* %buf, i32 %nbytes)
  ret i32 %v8_8c80
}

define i32 @_sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len) local_unnamed_addr {
entry:
  %v11_8c8c = call i32 @sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len)
  ret i32 %v11_8c8c
}

define i32* @_realloc(i32* %ptr, i32 %size) local_unnamed_addr {
entry:
  %v7_8c98 = call i32* @realloc(i32* %ptr, i32 %size)
  ret i32* %v7_8c98
}

define i32 @_listen(i32 %fd, i32 %n) local_unnamed_addr {
entry:
  %v6_8ca4 = call i32 @listen(i32 %fd, i32 %n)
  ret i32 %v6_8ca4
}

define i32 @_fork() local_unnamed_addr {
entry:
  %v4_8cb0 = call i32 @fork()
  ret i32 %v4_8cb0
}

define i32 @___uClibc_main(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v4_8cbc = call i32 @__uClibc_main()
  ret i32 %v4_8cbc
}

define i32* @_memset(i32* %s, i32 %c, i32 %n) local_unnamed_addr {
entry:
  %v8_8cc8 = call i32* @memset(i32* %s, i32 %c, i32 %n)
  ret i32* %v8_8cc8
}

define i32 @_getppid() local_unnamed_addr {
entry:
  %v4_8cd4 = call i32 @getppid()
  ret i32 %v4_8cd4
}

define i32 @_time(i32* %timer) local_unnamed_addr {
entry:
  %v6_8ce0 = call i32 @time(i32* %timer)
  ret i32 %v6_8ce0
}

define %__dirstream* @_opendir(i8* %name) local_unnamed_addr {
entry:
  %v6_8cec = call %__dirstream* @opendir(i8* %name)
  ret %__dirstream* %v6_8cec
}

define i32 @_getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen) local_unnamed_addr {
entry:
  %v9_8cf8 = call i32 @getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen)
  ret i32 %v9_8cf8
}

define i32* @___errno_location() local_unnamed_addr {
entry:
  %v4_8d04 = call i32* @__errno_location()
  ret i32* %v4_8d04
}

; Function Attrs: noreturn
define void @_exit(i32 %status) local_unnamed_addr #0 {
entry:
  call void @exit(i32 %status)
  unreachable
}

define i32 @_open(i8* %file, i32 %oflag, ...) local_unnamed_addr {
entry:
  %v7_8d1c = call i32 (i8*, i32, ...) @open(i8* %file, i32 %oflag)
  ret i32 %v7_8d1c
}

define i32 @_clock() local_unnamed_addr {
entry:
  %v4_8d28 = call i32 @clock()
  ret i32 %v4_8d28
}

define i32 @_setsid() local_unnamed_addr {
entry:
  %v4_8d34 = call i32 @setsid()
  ret i32 %v4_8d34
}

define i32 @_closedir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8d40 = call i32 @closedir(%__dirstream* %dirp)
  ret i32 %v6_8d40
}

define i32 @_fcntl(i32 %fd, i32 %cmd, ...) local_unnamed_addr {
entry:
  %v6_8d4c = call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 %cmd)
  ret i32 %v6_8d4c
}

define i32 @_close(i32 %fd) local_unnamed_addr {
entry:
  %v5_8d58 = call i32 @close(i32 %fd)
  ret i32 %v5_8d58
}

define void @_free(i32* %ptr) local_unnamed_addr {
entry:
  call void @free(i32* %ptr)
  ret void
}

define i32 @_sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset) local_unnamed_addr {
entry:
  %v9_8d70 = call i32 @sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset)
  ret i32 %v9_8d70
}

define i32 @_getsockname(i32 %fd, %sockaddr* %addr, i32* %len) local_unnamed_addr {
entry:
  %v9_8d7c = call i32 @getsockname(i32 %fd, %sockaddr* %addr, i32* %len)
  ret i32 %v9_8d7c
}

define i32 @function_8d80() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_8d80 = load i32, i32* @r4, align 4
  store i32 %v3_8d80, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1c1a0.55 to i32), i32* %r5.global-to-local, align 4
  %v2_8d88 = load i8, i8* bitcast (i8** @global_var_1c1a0.55 to i8*), align 4
  %v2_8d8c = icmp eq i8 %v2_8d88, 0
  br i1 %v2_8d8c, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_8d90 = load i32, i32* @r0, align 4
  ret i32 %v12_8d90

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1c184.58 to i32), i32* %r4.global-to-local, align 4
  %v2_8d98 = load i32, i32* bitcast (i32** @global_var_1c184.58 to i32*), align 4
  store i32 %v2_8d98, i32* %r2.global-to-local, align 4
  %v2_8da0 = icmp eq i32 %v2_8d98, 0
  br i1 %v2_8da0, label %bb8, label %dec_label_pc_8da8

dec_label_pc_8da8:                                ; preds = %bb7, %dec_label_pc_8da8.dec_label_pc_8da8_crit_edge
  %v1_8dac = phi i32 [ %v1_8dac.pre, %dec_label_pc_8da8.dec_label_pc_8da8_crit_edge ], [ ptrtoint (i32** @global_var_1c184.58 to i32), %bb7 ]
  %v0_8da8 = phi i32 [ %v2_8db8, %dec_label_pc_8da8.dec_label_pc_8da8_crit_edge ], [ %v2_8d98, %bb7 ]
  %v1_8da8 = add i32 %v0_8da8, 4
  %v2_8dac = inttoptr i32 %v1_8dac to i32*
  store i32 %v1_8da8, i32* %v2_8dac, align 4
  %v0_8db4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_8db4)
  %v2_8db8 = load i32, i32* bitcast (i32** @global_var_1c184.58 to i32*), align 4
  store i32 %v2_8db8, i32* %r2.global-to-local, align 4
  %v2_8dc0 = icmp eq i32 %v2_8db8, 0
  br i1 %v2_8dc0, label %.loopexit, label %dec_label_pc_8da8.dec_label_pc_8da8_crit_edge

dec_label_pc_8da8.dec_label_pc_8da8_crit_edge:    ; preds = %dec_label_pc_8da8
  %v1_8dac.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8da8

.loopexit:                                        ; preds = %dec_label_pc_8da8
  %v2_8de0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8de0 = phi i32 [ %v2_8de0.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1c1a0.55 to i32), %bb7 ]
  %v3_8de0 = inttoptr i32 %v2_8de0 to i8*
  store i8 1, i8* %v3_8de0, align 1
  %v2_8de4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8de4, i32* %r4.global-to-local, align 4
  %v11_8de4 = load i32, i32* @r0, align 4
  ret i32 %v11_8de4

; uselistorder directives
  uselistorder i32 %v2_8db8, { 1, 2, 0 }
  uselistorder i32** @global_var_1c184.58, { 1, 0 }
  uselistorder i8** @global_var_1c1a0.55, { 1, 0 }
  uselistorder label %dec_label_pc_8da8, { 1, 0 }
}

define i32 @function_8df4(i32 %arg1) local_unnamed_addr {
dec_label_pc_8df4:
  %v0_8df4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8df4, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8df4
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8df4, %bb
  %v5_8dfc = load i32, i32* @r0, align 4
  ret i32 %v5_8dfc

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8e00() local_unnamed_addr {
.thread:
  %v2_8e20 = load i32, i32* inttoptr (i32 114704 to i32*), align 16
  %v2_8e24 = icmp eq i32 %v2_8e20, 0
  br i1 %v2_8e24, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 114704

bb2:                                              ; preds = %.thread
  ret i32 114704

; uselistorder directives
  uselistorder i32 114704, { 1, 0, 2 }
}

define i32 @function_8e58() local_unnamed_addr {
dec_label_pc_8e58:
  %v5_8e5c = load i32, i32* @r0, align 4
  ret i32 %v5_8e5c
}

define i32 @__start(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8e68 = ptrtoint i32* %stack_var_4 to i32
  %v7_8e88 = call i32 @___uClibc_main(i32 ptrtoint (i32* @global_var_fdfc.70 to i32), i32 %arg2, i32 %v4_8e68, i32 35592, i32 79432, i32 %arg1, i32 %v4_8e68)
  ret i32 %v7_8e88
}

define i32 @function_8e9c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8e9c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8e9c = urem i32 %arg1, 256
  %v2_8ea0 = icmp eq i32 %v1_8e9c, 0
  %v1_8ea8 = urem i32 %arg3, 256
  br i1 %v2_8ea0, label %dec_label_pc_8eec, label %dec_label_pc_8eb4

dec_label_pc_8eb4:                                ; preds = %dec_label_pc_8e9c
  %v0_8eb4 = load i32, i32* %r1.global-to-local, align 4
  %v1_8eb4 = add i32 %v0_8eb4, 4
  %v2_8eb4 = inttoptr i32 %v1_8eb4 to i8*
  %v3_8eb4 = load i8, i8* %v2_8eb4, align 1
  %v4_8eb4 = zext i8 %v3_8eb4 to i32
  %v9_8eb8 = icmp eq i32 %v4_8eb4, %v1_8ea8
  br i1 %v9_8eb8, label %dec_label_pc_8ef4, label %dec_label_pc_8edc.preheader

dec_label_pc_8edc.preheader:                      ; preds = %dec_label_pc_8eb4
  br label %dec_label_pc_8edc

dec_label_pc_8ecc:                                ; preds = %dec_label_pc_8edc
  %v1_8ecc = add i32 %v0_8ed4.in, 12
  %v2_8ecc = inttoptr i32 %v1_8ecc to i8*
  %v3_8ecc = load i8, i8* %v2_8ecc, align 1
  %v4_8ecc = zext i8 %v3_8ecc to i32
  %v9_8ed0 = icmp eq i32 %v4_8ecc, %v1_8ea8
  br i1 %v9_8ed0, label %dec_label_pc_8ef4, label %dec_label_pc_8edc

dec_label_pc_8edc:                                ; preds = %dec_label_pc_8edc.preheader, %dec_label_pc_8ecc
  %v0_8ed4.in = phi i32 [ %v0_8eb4, %dec_label_pc_8edc.preheader ], [ %v0_8ed4, %dec_label_pc_8ecc ]
  %v0_8edc = phi i32 [ 0, %dec_label_pc_8edc.preheader ], [ %v1_8edc, %dec_label_pc_8ecc ]
  %v0_8ed4 = add i32 %v0_8ed4.in, 8
  %v1_8edc = add i32 %v0_8edc, 1
  store i32 %v1_8edc, i32* @lr, align 4
  %v9_8ee0 = icmp eq i32 %v1_8edc, %v1_8e9c
  store i32 %v0_8ed4, i32* %r1.global-to-local, align 4
  br i1 %v9_8ee0, label %dec_label_pc_8eec, label %dec_label_pc_8ecc

dec_label_pc_8eec:                                ; preds = %dec_label_pc_8edc, %dec_label_pc_8e9c
  ret i32 %arg4

dec_label_pc_8ef4:                                ; preds = %dec_label_pc_8ecc, %dec_label_pc_8eb4
  %v0_8ef4 = phi i32 [ %v0_8eb4, %dec_label_pc_8eb4 ], [ %v0_8ed4, %dec_label_pc_8ecc ]
  %v1_8ef4 = inttoptr i32 %v0_8ef4 to i32*
  %v2_8ef4 = load i32, i32* %v1_8ef4, align 4
  ret i32 %v2_8ef4

; uselistorder directives
  uselistorder i32 %v1_8edc, { 1, 2, 0 }
  uselistorder i32 %v0_8ed4, { 1, 0, 2 }
  uselistorder i32 %v0_8ed4.in, { 1, 0 }
  uselistorder i32 %v0_8eb4, { 1, 0, 2 }
  uselistorder i32 %v1_8ea8, { 1, 0 }
  uselistorder i32 %v1_8e9c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8edc, { 1, 0 }
}

define i32 @function_8f00(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8f00:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8f00 = urem i32 %arg1, 256
  %v2_8f04 = icmp eq i32 %v1_8f00, 0
  br i1 %v2_8f04, label %dec_label_pc_8f50, label %dec_label_pc_8f14

dec_label_pc_8f14:                                ; preds = %dec_label_pc_8f00
  %v0_8f14 = load i32, i32* %r1.global-to-local, align 4
  %v1_8f14 = add i32 %v0_8f14, 4
  %v2_8f14 = inttoptr i32 %v1_8f14 to i8*
  %v3_8f14 = load i8, i8* %v2_8f14, align 1
  %v4_8f14 = zext i8 %v3_8f14 to i32
  %v1_8f18 = urem i32 %arg3, 256
  %v9_8f1c = icmp eq i32 %v4_8f14, %v1_8f18
  br i1 %v9_8f1c, label %dec_label_pc_8f58, label %dec_label_pc_8f40.preheader

dec_label_pc_8f40.preheader:                      ; preds = %dec_label_pc_8f14
  br label %dec_label_pc_8f40

dec_label_pc_8f30:                                ; preds = %dec_label_pc_8f40
  %v1_8f30 = add i32 %v0_8f38.in, 12
  %v2_8f30 = inttoptr i32 %v1_8f30 to i8*
  %v3_8f30 = load i8, i8* %v2_8f30, align 1
  %v4_8f30 = zext i8 %v3_8f30 to i32
  %v9_8f34 = icmp eq i32 %v1_8f18, %v4_8f30
  br i1 %v9_8f34, label %dec_label_pc_8f58, label %dec_label_pc_8f40

dec_label_pc_8f40:                                ; preds = %dec_label_pc_8f40.preheader, %dec_label_pc_8f30
  %v0_8f38.in = phi i32 [ %v0_8f14, %dec_label_pc_8f40.preheader ], [ %v0_8f38, %dec_label_pc_8f30 ]
  %v0_8f40 = phi i32 [ 0, %dec_label_pc_8f40.preheader ], [ %v1_8f40, %dec_label_pc_8f30 ]
  %v0_8f38 = add i32 %v0_8f38.in, 8
  %v1_8f40 = add i32 %v0_8f40, 1
  %v9_8f44 = icmp eq i32 %v1_8f00, %v1_8f40
  store i32 %v0_8f38, i32* %r1.global-to-local, align 4
  br i1 %v9_8f44, label %dec_label_pc_8f50, label %dec_label_pc_8f30

dec_label_pc_8f50:                                ; preds = %dec_label_pc_8f40, %dec_label_pc_8f58, %dec_label_pc_8f00
  ret i32 %arg4

dec_label_pc_8f58:                                ; preds = %dec_label_pc_8f30, %dec_label_pc_8f14
  %v0_8f58 = phi i32 [ %v0_8f14, %dec_label_pc_8f14 ], [ %v0_8f38, %dec_label_pc_8f30 ]
  %v1_8f58 = inttoptr i32 %v0_8f58 to i32*
  %v2_8f58 = load i32, i32* %v1_8f58, align 4
  %v3_8f5c = icmp eq i32 %v2_8f58, 0
  br i1 %v3_8f5c, label %dec_label_pc_8f50, label %dec_label_pc_8f64

dec_label_pc_8f64:                                ; preds = %dec_label_pc_8f58
  %v3_8f58 = inttoptr i32 %v2_8f58 to i8*
  %v3_8f68 = call i32 @inet_addr(i8* %v3_8f58)
  ret i32 %v3_8f68

; uselistorder directives
  uselistorder i32 %v2_8f58, { 1, 0 }
  uselistorder i32 %v1_8f40, { 1, 0 }
  uselistorder i32 %v0_8f38, { 1, 0, 2 }
  uselistorder i32 %v0_8f38.in, { 1, 0 }
  uselistorder i32 %v1_8f18, { 1, 0 }
  uselistorder i32 %v0_8f14, { 1, 0, 2 }
  uselistorder i32 %v1_8f00, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8f50, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8f40, { 1, 0 }
}

define i32 @function_8f6c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8f6c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8f6c = urem i32 %arg1, 256
  %v2_8f70 = icmp eq i32 %v1_8f6c, 0
  %v3_8f74 = load i32, i32* @r4, align 4
  br i1 %v2_8f70, label %dec_label_pc_8fbc, label %dec_label_pc_8f80

dec_label_pc_8f80:                                ; preds = %dec_label_pc_8f6c
  %v0_8f80 = load i32, i32* %r1.global-to-local, align 4
  %v1_8f80 = add i32 %v0_8f80, 4
  %v2_8f80 = inttoptr i32 %v1_8f80 to i8*
  %v3_8f80 = load i8, i8* %v2_8f80, align 1
  %v4_8f80 = zext i8 %v3_8f80 to i32
  %v1_8f84 = urem i32 %arg3, 256
  %v9_8f88 = icmp eq i32 %v4_8f80, %v1_8f84
  br i1 %v9_8f88, label %dec_label_pc_8fc4, label %dec_label_pc_8fac.preheader

dec_label_pc_8fac.preheader:                      ; preds = %dec_label_pc_8f80
  br label %dec_label_pc_8fac

dec_label_pc_8f9c:                                ; preds = %dec_label_pc_8fac
  %v1_8f9c = add i32 %v0_8fa4.in, 12
  %v2_8f9c = inttoptr i32 %v1_8f9c to i8*
  %v3_8f9c = load i8, i8* %v2_8f9c, align 1
  %v4_8f9c = zext i8 %v3_8f9c to i32
  %v9_8fa0 = icmp eq i32 %v1_8f84, %v4_8f9c
  br i1 %v9_8fa0, label %dec_label_pc_8fc4, label %dec_label_pc_8fac

dec_label_pc_8fac:                                ; preds = %dec_label_pc_8fac.preheader, %dec_label_pc_8f9c
  %v0_8fa4.in = phi i32 [ %v0_8f80, %dec_label_pc_8fac.preheader ], [ %v0_8fa4, %dec_label_pc_8f9c ]
  %v0_8fac = phi i32 [ 0, %dec_label_pc_8fac.preheader ], [ %v1_8fac, %dec_label_pc_8f9c ]
  %v0_8fa4 = add i32 %v0_8fa4.in, 8
  %v1_8fac = add i32 %v0_8fac, 1
  store i32 %v1_8fac, i32* @lr, align 4
  %v9_8fb0 = icmp eq i32 %v1_8f6c, %v1_8fac
  store i32 %v0_8fa4, i32* %r1.global-to-local, align 4
  br i1 %v9_8fb0, label %dec_label_pc_8fbc, label %dec_label_pc_8f9c

dec_label_pc_8fbc:                                ; preds = %dec_label_pc_8fac, %dec_label_pc_8fc4, %dec_label_pc_8f6c
  store i32 %v3_8f74, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8fc4:                                ; preds = %dec_label_pc_8f9c, %dec_label_pc_8f80
  %v0_8fc4 = phi i32 [ %v0_8f80, %dec_label_pc_8f80 ], [ %v0_8fa4, %dec_label_pc_8f9c ]
  %v1_8fc4 = inttoptr i32 %v0_8fc4 to i32*
  %v2_8fc4 = load i32, i32* %v1_8fc4, align 4
  %v2_8fc8 = icmp eq i32 %v2_8fc4, 0
  br i1 %v2_8fc8, label %dec_label_pc_8fbc, label %dec_label_pc_8fd0

dec_label_pc_8fd0:                                ; preds = %dec_label_pc_8fc4
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_8f74, i32* @r4, align 4
  %v2_8fd8 = inttoptr i32 %v2_8fc4 to i8*
  %v3_8fd8 = call i32 @function_12e68(i8* %v2_8fd8, i32 10)
  ret i32 %v3_8fd8

; uselistorder directives
  uselistorder i32 %v1_8fac, { 1, 2, 0 }
  uselistorder i32 %v0_8fa4, { 1, 0, 2 }
  uselistorder i32 %v0_8fa4.in, { 1, 0 }
  uselistorder i32 %v1_8f84, { 1, 0 }
  uselistorder i32 %v0_8f80, { 1, 0, 2 }
  uselistorder i32 %v3_8f74, { 1, 0 }
  uselistorder i32 %v1_8f6c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_8fbc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8fac, { 1, 0 }
}

define i32 @function_8fdc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8fdc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_8fdc = load i32, i32* @r4, align 4
  %v6_8fdc = load i32, i32* @r5, align 4
  %v9_8fdc = load i32, i32* @r6, align 4
  %v12_8fdc = load i32, i32* @r7, align 4
  %v15_8fdc = load i32, i32* @r8, align 4
  %v18_8fdc = load i32, i32* @sb, align 4
  %v21_8fdc = load i32, i32* @sl, align 4
  %v24_8fdc = load i32, i32* @fp, align 4
  %v27_8fdc = load i32, i32* @lr, align 4
  %v7_8fe0 = icmp eq i32 %arg2, 3
  store i1 %v7_8fe0, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  %v0_8fec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8fec, i32* %r4.global-to-local, align 4
  %tmp47 = icmp ult i32 %arg2, 4
  br i1 %tmp47, label %dec_label_pc_9000, label %dec_label_pc_8ff4

dec_label_pc_8ff4:                                ; preds = %dec_label_pc_8fdc
  %v7_8ff4 = icmp eq i32 %arg2, 4
  store i1 %v7_8ff4, i1* %cpsr_z.global-to-local, align 1
  %v1_8ff8 = inttoptr i32 %v0_8fec to i32*
  %v2_8ff8 = load i32, i32* %v1_8ff8, align 4
  store i32 %v2_8ff8, i32* @sl, align 4
  br i1 %v7_8ff4, label %dec_label_pc_9000, label %dec_label_pc_9008

dec_label_pc_9000:                                ; preds = %dec_label_pc_9024, %.dec_label_pc_9000_crit_edge, %dec_label_pc_8ff4, %dec_label_pc_9018, %dec_label_pc_9008, %dec_label_pc_8fdc
  %v29_9004 = phi i32 [ %v29_9004.pre, %.dec_label_pc_9000_crit_edge ], [ %v0_8fec, %dec_label_pc_9024 ], [ %v0_8fec, %dec_label_pc_8ff4 ], [ %v0_8fec, %dec_label_pc_9018 ], [ %v0_8fec, %dec_label_pc_9008 ], [ %v0_8fec, %dec_label_pc_8fdc ]
  store i32 %v3_8fdc, i32* %r4.global-to-local, align 4
  store i32 %v6_8fdc, i32* %r5.global-to-local, align 4
  store i32 %v9_8fdc, i32* @r6, align 4
  store i32 %v12_8fdc, i32* @r7, align 4
  store i32 %v15_8fdc, i32* %r8.global-to-local, align 4
  store i32 %v18_8fdc, i32* @sb, align 4
  store i32 %v21_8fdc, i32* @sl, align 4
  store i32 %v24_8fdc, i32* @fp, align 4
  ret i32 %v29_9004

dec_label_pc_9008:                                ; preds = %dec_label_pc_8ff4
  %v7_9008 = icmp eq i32 %arg2, 5
  store i1 %v7_9008, i1* %cpsr_z.global-to-local, align 1
  %v1_900c = add i32 %v0_8fec, 4
  %v2_900c = inttoptr i32 %v1_900c to i8*
  %v3_900c = load i8, i8* %v2_900c, align 1
  %v4_900c = zext i8 %v3_900c to i32
  store i32 %v4_900c, i32* %r1.global-to-local, align 4
  br i1 %v7_9008, label %dec_label_pc_9000, label %dec_label_pc_9018

dec_label_pc_9018:                                ; preds = %dec_label_pc_9008
  %v1_9018 = add i32 %v0_8fec, 5
  %v2_9018 = inttoptr i32 %v1_9018 to i8*
  %v3_9018 = load i8, i8* %v2_9018, align 1
  %v4_9018 = zext i8 %v3_9018 to i32
  store i32 %v4_9018, i32* %r8.global-to-local, align 4
  %v2_901c = icmp eq i8 %v3_9018, 0
  store i1 %v2_901c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_901c, label %dec_label_pc_9000, label %dec_label_pc_9024

dec_label_pc_9024:                                ; preds = %dec_label_pc_9018
  %v3_9024 = mul nuw nsw i32 %v4_9018, 4
  store i32 %v3_9024, i32* @sb, align 4
  %v1_9028 = add i32 %arg2, -6
  store i32 %v1_9028, i32* @r6, align 4
  %v2_902c = mul nuw nsw i32 %v4_9018, 5
  store i32 %v2_902c, i32* @r7, align 4
  %v3_9030 = icmp ult i32 %v1_9028, %v2_902c
  %v9_9030 = icmp eq i32 %v1_9028, %v2_902c
  store i1 %v9_9030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9030, label %dec_label_pc_9000, label %dec_label_pc_9038

dec_label_pc_9038:                                ; preds = %dec_label_pc_9024
  store i32 %v4_9018, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_9040 = call i32* @calloc(i32 %v4_9018, i32 24)
  %v4_9040 = ptrtoint i32* %v2_9040 to i32
  store i32 %v4_9040, i32* %r0.global-to-local, align 4
  %v0_9044 = load i32, i32* %r8.global-to-local, align 4
  %v2_9044 = icmp eq i32 %v0_9044, 0
  store i1 %v2_9044, i1* %cpsr_z.global-to-local, align 1
  %v0_904c = load i32, i32* %r4.global-to-local, align 4
  %v1_904c = add i32 %v0_904c, 6
  store i32 %v1_904c, i32* @fp, align 4
  %tmp36 = icmp slt i32 %v0_9044, 1
  br i1 %tmp36, label %dec_label_pc_90a4thread-pre-split, label %dec_label_pc_9054

dec_label_pc_9054:                                ; preds = %dec_label_pc_9038
  store i32 %v4_9040, i32* %r1.global-to-local, align 4
  %v1_9058 = load i32, i32* @r7, align 4
  %v2_9058 = add i32 %v1_9058, %v0_904c
  store i32 %v2_9058, i32* %ip.global-to-local, align 4
  store i32 %v0_904c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9068

dec_label_pc_9068:                                ; preds = %dec_label_pc_9068.dec_label_pc_9068_crit_edge, %dec_label_pc_9054
  %v2_9078 = phi i32 [ %v1_908c, %dec_label_pc_9068.dec_label_pc_9068_crit_edge ], [ %v4_9040, %dec_label_pc_9054 ]
  %v0_9074 = phi i32 [ %v0_9074.pre, %dec_label_pc_9068.dec_label_pc_9068_crit_edge ], [ %v2_9058, %dec_label_pc_9054 ]
  %v0_9070 = phi i32 [ %v0_9068.pre, %dec_label_pc_9068.dec_label_pc_9068_crit_edge ], [ %v0_904c, %dec_label_pc_9054 ]
  %v1_9068 = add i32 %v0_9070, 10
  %v2_9068 = inttoptr i32 %v1_9068 to i8*
  %v3_9068 = load i8, i8* %v2_9068, align 1
  %v1_906c = add i32 %v0_9070, 6
  %v2_906c = inttoptr i32 %v1_906c to i32*
  %v3_906c = load i32, i32* %v2_906c, align 4
  store i32 %v3_906c, i32* @r2, align 4
  %v1_9070 = add i32 %v0_9070, 5
  store i32 %v1_9070, i32* %r0.global-to-local, align 4
  %v9_9074 = icmp eq i32 %v0_9074, %v1_9070
  store i1 %v9_9074, i1* %cpsr_z.global-to-local, align 1
  %v3_9078 = add i32 %v2_9078, 20
  %v4_9078 = inttoptr i32 %v3_9078 to i8*
  store i8 %v3_9068, i8* %v4_9078, align 1
  %v0_907c = load i32, i32* @r2, align 4
  %v1_907c = load i32, i32* %r1.global-to-local, align 4
  %v2_907c = add i32 %v1_907c, 4
  %v3_907c = inttoptr i32 %v2_907c to i32*
  store i32 %v0_907c, i32* %v3_907c, align 4
  %v0_9080 = load i32, i32* @r2, align 4
  %v1_9080 = load i32, i32* %r1.global-to-local, align 4
  %v2_9080 = add i32 %v1_9080, 16
  %v3_9080 = inttoptr i32 %v2_9080 to i32*
  store i32 %v0_9080, i32* %v3_9080, align 4
  %v0_9084 = load i32, i32* %r4.global-to-local, align 4
  %v1_9084 = trunc i32 %v0_9084 to i8
  %v2_9084 = load i32, i32* %r1.global-to-local, align 4
  %v3_9084 = inttoptr i32 %v2_9084 to i8*
  store i8 %v1_9084, i8* %v3_9084, align 1
  %v0_9088 = load i32, i32* %lr.global-to-local, align 4
  %v1_9088 = trunc i32 %v0_9088 to i8
  %v2_9088 = load i32, i32* %r1.global-to-local, align 4
  %v3_9088 = add i32 %v2_9088, 1
  %v4_9088 = inttoptr i32 %v3_9088 to i8*
  store i8 %v1_9088, i8* %v4_9088, align 1
  %v0_908c = load i32, i32* %r1.global-to-local, align 4
  %v1_908c = add i32 %v0_908c, 24
  store i32 %v1_908c, i32* %r1.global-to-local, align 4
  %v0_9090 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9090, label %dec_label_pc_9094, label %dec_label_pc_9068.dec_label_pc_9068_crit_edge

dec_label_pc_9068.dec_label_pc_9068_crit_edge:    ; preds = %dec_label_pc_9068
  %v0_9068.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_9074.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9068

dec_label_pc_9094:                                ; preds = %dec_label_pc_9068
  %v0_9094 = load i32, i32* @sb, align 4
  %v1_9094 = load i32, i32* %r8.global-to-local, align 4
  %v1_9098 = load i32, i32* %r5.global-to-local, align 4
  %sum = add i32 %v1_9094, %v0_9094
  %v2_9098 = sub i32 %v1_9098, %sum
  %v0_909c = load i32, i32* %r0.global-to-local, align 4
  %v1_909c = add i32 %v0_909c, 6
  store i32 %v1_909c, i32* @fp, align 4
  %v1_90a0 = add i32 %v2_9098, -6
  store i32 %v1_90a0, i32* @r6, align 4
  br label %dec_label_pc_90a4

dec_label_pc_90a4thread-pre-split:                ; preds = %dec_label_pc_9038
  %v0_90a4.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_90a4

dec_label_pc_90a4:                                ; preds = %dec_label_pc_90a4thread-pre-split, %dec_label_pc_9094
  %v0_90b0 = phi i32 [ %v1_904c, %dec_label_pc_90a4thread-pre-split ], [ %v1_909c, %dec_label_pc_9094 ]
  %v1_90a8 = phi i32 [ %v0_90a4.pr, %dec_label_pc_90a4thread-pre-split ], [ %v1_90a0, %dec_label_pc_9094 ]
  %v2_90a4 = icmp eq i32 %v1_90a8, 0
  store i1 %v2_90a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_90a4, label %dec_label_pc_91c4, label %dec_label_pc_90b0

dec_label_pc_90b0:                                ; preds = %dec_label_pc_90a4
  %v1_90b0 = inttoptr i32 %v0_90b0 to i8*
  %v2_90b0 = load i8, i8* %v1_90b0, align 1
  %v3_90b0 = zext i8 %v2_90b0 to i32
  store i32 %v3_90b0, i32* @sb, align 4
  %v2_90b4 = icmp eq i8 %v2_90b0, 0
  store i1 %v2_90b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_90b4, label %dec_label_pc_9194, label %dec_label_pc_90c4

dec_label_pc_90c4:                                ; preds = %dec_label_pc_90b0
  store i32 %v3_90b0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_90cc = call i32* @calloc(i32 %v3_90b0, i32 8)
  %v4_90cc = ptrtoint i32* %v2_90cc to i32
  store i32 %v4_90cc, i32* %r0.global-to-local, align 4
  %v0_90d0 = load i32, i32* @sb, align 4
  %v2_90d0 = icmp eq i32 %v0_90d0, 0
  store i1 %v2_90d0, i1* %cpsr_z.global-to-local, align 1
  %tmp37 = icmp slt i32 %v0_90d0, 1
  br i1 %tmp37, label %dec_label_pc_9194, label %dec_label_pc_90e0

dec_label_pc_90e0:                                ; preds = %dec_label_pc_90c4
  %v0_90e0 = load i32, i32* @r6, align 4
  %v1_90e0 = add i32 %v0_90e0, -1
  store i32 %v1_90e0, i32* @r2, align 4
  %v7_90e0 = icmp eq i32 %v0_90e0, 1
  store i1 %v7_90e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90e0, label %dec_label_pc_91c4, label %dec_label_pc_90e8

dec_label_pc_90e8:                                ; preds = %dec_label_pc_90e0
  %v0_90e8 = load i32, i32* @fp, align 4
  %v1_90e8 = add i32 %v0_90e8, 1
  %v2_90e8 = inttoptr i32 %v1_90e8 to i8*
  %v3_90e8 = load i8, i8* %v2_90e8, align 1
  %v1_90ec = add i32 %v0_90e0, -2
  store i32 %v1_90ec, i32* @r2, align 4
  %v7_90ec = icmp eq i32 %v1_90e0, 1
  store i1 %v7_90ec, i1* %cpsr_z.global-to-local, align 1
  %v3_90f0 = add i32 %v4_90cc, 4
  %v4_90f0 = inttoptr i32 %v3_90f0 to i8*
  store i8 %v3_90e8, i8* %v4_90f0, align 1
  %v0_90f4 = load i32, i32* @fp, align 4
  %v1_90f4 = add i32 %v0_90f4, 1
  store i32 %v1_90f4, i32* %r0.global-to-local, align 4
  %v0_90f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90f8, label %dec_label_pc_91c4, label %dec_label_pc_90fc

dec_label_pc_90fc:                                ; preds = %dec_label_pc_90e8
  %v1_90fc = add i32 %v0_90f4, 2
  %v2_90fc = inttoptr i32 %v1_90fc to i8*
  %v3_90fc = load i8, i8* %v2_90fc, align 1
  %v4_90fc = zext i8 %v3_90fc to i32
  store i32 %v4_90fc, i32* %r4.global-to-local, align 4
  %v0_9100 = load i32, i32* @r2, align 4
  %v1_9100 = add i32 %v0_9100, -1
  store i32 %v1_9100, i32* @r7, align 4
  %v9_9104 = icmp eq i32 %v1_9100, %v4_90fc
  store i1 %v9_9104, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_90fc, i32* %r0.global-to-local, align 4
  %v5_910c = icmp slt i32 %v1_9100, %v4_90fc
  br i1 %v5_910c, label %dec_label_pc_91c4, label %dec_label_pc_9110

dec_label_pc_9110:                                ; preds = %dec_label_pc_90fc
  store i32 %v4_90cc, i32* %r5.global-to-local, align 4
  %v1_9118 = add i32 %v4_90cc, 8
  %v1_911c = add i32 %v0_90f4, 3
  store i32 %v1_911c, i32* @r6, align 4
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_916c

dec_label_pc_912c:                                ; preds = %dec_label_pc_916c
  %v0_912c = load i32, i32* @r7, align 4
  %v1_912c = load i32, i32* %r4.global-to-local, align 4
  %v2_912c = sub i32 %v0_912c, %v1_912c
  store i32 %v2_912c, i32* @r2, align 4
  %v9_912c = icmp eq i32 %v0_912c, %v1_912c
  store i1 %v9_912c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_912c, label %dec_label_pc_91c4, label %dec_label_pc_9134

dec_label_pc_9134:                                ; preds = %dec_label_pc_912c
  %v1_9134 = load i32, i32* @r6, align 4
  %v2_9134 = add i32 %v1_9134, %v1_912c
  %v3_9134 = inttoptr i32 %v2_9134 to i8*
  %v4_9134 = load i8, i8* %v3_9134, align 1
  store i32 %stack_var_-44.0, i32* %r5.global-to-local, align 4
  %v1_913c = add i32 %v2_912c, -1
  store i32 %v1_913c, i32* @r2, align 4
  %v7_913c = icmp eq i32 %v2_912c, 1
  store i1 %v7_913c, i1* %cpsr_z.global-to-local, align 1
  %v3_9140 = add i32 %stack_var_-44.0, 4
  %v4_9140 = inttoptr i32 %v3_9140 to i8*
  store i8 %v4_9134, i8* %v4_9140, align 1
  %v0_9144 = load i32, i32* %r4.global-to-local, align 4
  %v1_9144 = load i32, i32* @r6, align 4
  %v2_9144 = add i32 %v1_9144, %v0_9144
  store i32 %v2_9144, i32* %r0.global-to-local, align 4
  %v0_9148 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9148, label %dec_label_pc_91c4, label %dec_label_pc_914c

dec_label_pc_914c:                                ; preds = %dec_label_pc_9134
  %v1_914c = add i32 %v2_9144, 1
  %v2_914c = inttoptr i32 %v1_914c to i8*
  %v3_914c = load i8, i8* %v2_914c, align 1
  %v4_914c = zext i8 %v3_914c to i32
  store i32 %v4_914c, i32* %r4.global-to-local, align 4
  %v0_9150 = load i32, i32* @r2, align 4
  %v1_9150 = add i32 %v0_9150, -1
  store i32 %v1_9150, i32* @r7, align 4
  %v0_9154 = load i32, i32* %r5.global-to-local, align 4
  %v1_9154 = add i32 %v0_9154, 8
  store i32 %v1_9154, i32* %r1.global-to-local, align 4
  %v2_9158 = sub i32 %v1_9150, %v4_914c
  %tmp39 = sub i32 0, %v2_9158
  %v6_9158 = and i32 %v1_9150, %tmp39
  %v7_9158 = icmp slt i32 %v6_9158, 0
  %v8_9158 = icmp slt i32 %v2_9158, 0
  %v9_9158 = icmp eq i32 %v1_9150, %v4_914c
  store i1 %v9_9158, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_914c, i32* %r0.global-to-local, align 4
  %v2_9164 = xor i1 %v8_9158, %v7_9158
  br i1 %v2_9164, label %dec_label_pc_91c4, label %dec_label_pc_9168

dec_label_pc_9168:                                ; preds = %dec_label_pc_914c
  %v1_9168 = add i32 %v2_9144, 2
  store i32 %v1_9168, i32* @r6, align 4
  br label %dec_label_pc_916c

dec_label_pc_916c:                                ; preds = %dec_label_pc_9110, %dec_label_pc_9168
  %v0_9170 = phi i32 [ %v4_90fc, %dec_label_pc_9110 ], [ %v4_914c, %dec_label_pc_9168 ]
  %stack_var_-44.0 = phi i32 [ %v1_9118, %dec_label_pc_9110 ], [ %v1_9154, %dec_label_pc_9168 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_9170 = add nuw nsw i32 %v0_9170, 1
  store i32 %v2_9170, i32* %r0.global-to-local, align 4
  %v2_9174 = call i32* @calloc(i32 %v2_9170, i32 1)
  %v3_9174 = ptrtoint i32* %v2_9174 to i32
  store i32 %v3_9174, i32* %r0.global-to-local, align 4
  %v0_9178 = load i32, i32* @fp, align 4
  %v1_9178 = add i32 %v0_9178, 1
  store i32 %v1_9178, i32* @fp, align 4
  %v1_917c = load i32, i32* %r5.global-to-local, align 4
  %v2_917c = inttoptr i32 %v1_917c to i32*
  store i32 %v3_9174, i32* %v2_917c, align 4
  %v0_9180 = load i32, i32* @r6, align 4
  store i32 %v0_9180, i32* %r1.global-to-local, align 4
  %v0_9184 = load i32, i32* %r4.global-to-local, align 4
  %v3_9188 = call i32 @function_12db8(i32 %v3_9174, i32 %v0_9180, i32 %v0_9184)
  store i32 %v3_9188, i32* %r0.global-to-local, align 4
  %v0_918c = load i32, i32* @sb, align 4
  %v1_918c = load i32, i32* @fp, align 4
  %v9_918c = icmp eq i32 %v0_918c, %v1_918c
  store i1 %v9_918c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_918c, label %dec_label_pc_9194, label %dec_label_pc_912c

dec_label_pc_9194:                                ; preds = %dec_label_pc_916c, %dec_label_pc_90c4, %dec_label_pc_90b0
  %stack_var_-52.2 = phi i32 [ %v3_90b0, %dec_label_pc_90b0 ], [ %v4_90cc, %dec_label_pc_90c4 ], [ %v4_90cc, %dec_label_pc_916c ]
  %v0_9194 = call i32* @__errno_location()
  %v2_9194 = ptrtoint i32* %v0_9194 to i32
  store i32 %v2_9194, i32* %r0.global-to-local, align 4
  store i32 0, i32* %v0_9194, align 4
  %v0_91a0 = call i32 @fork()
  store i32 %v0_91a0, i32* %r0.global-to-local, align 4
  %v7_91a4 = icmp eq i32 %v0_91a0, -1
  %v2_91b0 = icmp eq i32 %v0_91a0, 0
  store i1 %v2_91b0, i1* %cpsr_z.global-to-local, align 1
  %tmp41 = icmp slt i32 %v0_91a0, 1
  br i1 %tmp41, label %bb42, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_9194
  store i32 1, i32* @r2, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_91c4

bb42:                                             ; preds = %dec_label_pc_9194
  %. = zext i1 %v7_91a4 to i32
  store i32 %., i32* @r2, align 4
  %v2_91bc = icmp eq i1 %v7_91a4, false
  store i1 %v2_91bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_91bc, label %dec_label_pc_9218, label %dec_label_pc_91c4

dec_label_pc_91c4:                                ; preds = %dec_label_pc_914c, %dec_label_pc_9134, %dec_label_pc_912c, %.thread1, %bb42, %dec_label_pc_90fc, %dec_label_pc_90e8, %dec_label_pc_90e0, %dec_label_pc_90a4
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_90a4 ], [ %stack_var_-52.2, %bb42 ], [ %v4_90cc, %dec_label_pc_90e0 ], [ %v4_90cc, %dec_label_pc_90e8 ], [ %v4_90cc, %dec_label_pc_90fc ], [ %stack_var_-52.2, %.thread1 ], [ %v4_90cc, %dec_label_pc_912c ], [ %v4_90cc, %dec_label_pc_9134 ], [ %v4_90cc, %dec_label_pc_914c ]
  store i32 %v4_9040, i32* %r1.global-to-local, align 4
  %v2_91c8 = icmp eq i32* %v2_9040, null
  store i1 %v2_91c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_91c8, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_91c4
  store i32 %v4_9040, i32* %r0.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_91c4, %bb43
  store i32 37332, i32* %lr.global-to-local, align 4
  %v1_91d0 = xor i1 %v2_91c8, true
  call void @__pseudo_cond_branch(i1 %v1_91d0, i32 ptrtoint (i32* @global_var_8d5c.72 to i32))
  %v2_91d8 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_91d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_91d8, label %.dec_label_pc_9000_crit_edge, label %dec_label_pc_91e0

.dec_label_pc_9000_crit_edge:                     ; preds = %bb44
  %v29_9004.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9000

dec_label_pc_91e0:                                ; preds = %bb44
  %v0_91e0 = load i32, i32* @sb, align 4
  %v2_91e0 = icmp eq i32 %v0_91e0, 0
  store i1 %v2_91e0, i1* %cpsr_z.global-to-local, align 1
  %tmp45 = icmp slt i32 %v0_91e0, 1
  br i1 %tmp45, label %dec_label_pc_9208, label %dec_label_pc_91e8

dec_label_pc_91e8:                                ; preds = %dec_label_pc_91e0
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_91ec

dec_label_pc_91ec:                                ; preds = %dec_label_pc_91ec, %dec_label_pc_91e8
  %v1_91f0 = phi i32 [ %v1_91fc, %dec_label_pc_91ec ], [ 0, %dec_label_pc_91e8 ]
  store i32 %stack_var_-52.3, i32* %r1.global-to-local, align 4
  %v4_91f0 = mul i32 %v1_91f0, 8
  %v5_91f0 = add i32 %v4_91f0, %stack_var_-52.3
  %v6_91f0 = inttoptr i32 %v5_91f0 to i32*
  %v7_91f0 = load i32, i32* %v6_91f0, align 4
  store i32 %v7_91f0, i32* %r0.global-to-local, align 4
  %v2_91f4 = icmp eq i32 %v7_91f0, 0
  store i1 %v2_91f4, i1* %cpsr_z.global-to-local, align 1
  store i32 37372, i32* %lr.global-to-local, align 4
  %v1_91f8 = xor i1 %v2_91f4, true
  call void @__pseudo_cond_branch(i1 %v1_91f8, i32 ptrtoint (i32* @global_var_8d5c.72 to i32))
  %v0_91fc = load i32, i32* %r4.global-to-local, align 4
  %v1_91fc = add i32 %v0_91fc, 1
  store i32 %v1_91fc, i32* %r4.global-to-local, align 4
  %v0_9200 = load i32, i32* @sb, align 4
  %v9_9200 = icmp eq i32 %v0_9200, %v1_91fc
  store i1 %v9_9200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9200, label %dec_label_pc_9208, label %dec_label_pc_91ec

dec_label_pc_9208:                                ; preds = %dec_label_pc_91ec, %dec_label_pc_91e0
  store i32 %stack_var_-52.3, i32* %r0.global-to-local, align 4
  store i32 %v3_8fdc, i32* %r4.global-to-local, align 4
  store i32 %v6_8fdc, i32* %r5.global-to-local, align 4
  store i32 %v9_8fdc, i32* @r6, align 4
  store i32 %v12_8fdc, i32* @r7, align 4
  store i32 %v15_8fdc, i32* %r8.global-to-local, align 4
  store i32 %v18_8fdc, i32* @sb, align 4
  store i32 %v21_8fdc, i32* @sl, align 4
  store i32 %v24_8fdc, i32* @fp, align 4
  store i32 %v27_8fdc, i32* %lr.global-to-local, align 4
  %v1_9214 = inttoptr i32 %stack_var_-52.3 to i32*
  call void @free(i32* %v1_9214)
  store i32 ptrtoint (i32* @0 to i32), i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9218

dec_label_pc_9218:                                ; preds = %bb42, %dec_label_pc_9208
  %stack_var_-52.4 = phi i32 [ %stack_var_-52.3, %dec_label_pc_9208 ], [ %stack_var_-52.2, %bb42 ]
  %v2_921c = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_921c = zext i8 %v2_921c to i32
  store i32 %v3_921c, i32* %lr.global-to-local, align 4
  %v2_9220 = icmp eq i8 %v2_921c, 0
  store i1 %v2_9220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9220, label %dec_label_pc_9268, label %dec_label_pc_9228

dec_label_pc_9228:                                ; preds = %dec_label_pc_9218
  %v2_922c = load i32, i32* @global_var_1c1c0.76, align 4
  store i32 %v2_922c, i32* %r0.global-to-local, align 4
  %v1_9230 = inttoptr i32 %v2_922c to i32*
  %v2_9230 = load i32, i32* %v1_9230, align 4
  store i32 %v2_9230, i32* %ip.global-to-local, align 4
  store i32 %v4_900c, i32* %r4.global-to-local, align 4
  %v1_9238 = add i32 %v2_9230, 4
  %v2_9238 = inttoptr i32 %v1_9238 to i8*
  %v3_9238 = load i8, i8* %v2_9238, align 1
  store i32 %v4_900c, i32* %r1.global-to-local, align 4
  %v9_9240 = icmp eq i8 %v3_9238, %v3_900c
  store i1 %v9_9240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9240, label %dec_label_pc_9270, label %dec_label_pc_925c.preheader

dec_label_pc_925c.preheader:                      ; preds = %dec_label_pc_9228
  %v0_925c.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_925c

dec_label_pc_924c:                                ; preds = %dec_label_pc_925c
  %v4_924c = mul i32 %v1_925c, 4
  %v5_924c = add i32 %v4_924c, %v2_922c
  %v6_924c = inttoptr i32 %v5_924c to i32*
  %v7_924c = load i32, i32* %v6_924c, align 4
  store i32 %v7_924c, i32* %ip.global-to-local, align 4
  %v1_9250 = add i32 %v7_924c, 4
  %v2_9250 = inttoptr i32 %v1_9250 to i8*
  %v3_9250 = load i8, i8* %v2_9250, align 1
  %v9_9254 = icmp eq i8 %v3_9250, %v3_900c
  store i1 %v9_9254, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9254, label %dec_label_pc_9270, label %dec_label_pc_925c

dec_label_pc_925c:                                ; preds = %dec_label_pc_925c.preheader, %dec_label_pc_924c
  %v0_925c = phi i32 [ %v0_925c.pre, %dec_label_pc_925c.preheader ], [ %v1_925c, %dec_label_pc_924c ]
  %v1_925c = add i32 %v0_925c, 1
  %v9_9260 = icmp eq i32 %v1_925c, %v3_921c
  store i1 %v9_9260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9260, label %dec_label_pc_9268, label %dec_label_pc_924c

dec_label_pc_9268:                                ; preds = %dec_label_pc_925c, %dec_label_pc_9218, %dec_label_pc_9270
  store i32 0, i32* %r0.global-to-local, align 4
  call void @exit(i32 0)
  unreachable

dec_label_pc_9270:                                ; preds = %dec_label_pc_924c, %dec_label_pc_9228
  %v0_92a8 = phi i32 [ %v2_9230, %dec_label_pc_9228 ], [ %v7_924c, %dec_label_pc_924c ]
  %v0_9270 = load i32, i32* @sl, align 4
  store i32 %stack_var_-52.4, i32* %r4.global-to-local, align 4
  %v2_9294 = call i32 @llvm.bswap.i32(i32 %v0_9270)
  store i32 %v2_9294, i32* %r0.global-to-local, align 4
  %v0_929c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_929c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_92ac.77 to i32), i32* %lr.global-to-local, align 4
  %v1_92a8 = inttoptr i32 %v0_92a8 to i32*
  %v2_92a8 = load i32, i32* %v1_92a8, align 4
  call void @__pseudo_branch(i32 %v2_92a8)
  br label %dec_label_pc_9268

; uselistorder directives
  uselistorder i32 %v1_925c, { 2, 0, 1 }
  uselistorder i1 %v9_9254, { 1, 0 }
  uselistorder i1 %v9_9240, { 1, 0 }
  uselistorder i32 %v1_91fc, { 1, 2, 0 }
  uselistorder i1 %v2_91c8, { 0, 2, 1 }
  uselistorder i32 %stack_var_-52.3, { 2, 4, 3, 0, 1, 5 }
  uselistorder i1 %v2_91bc, { 1, 0 }
  uselistorder i1 %v7_91a4, { 1, 0 }
  uselistorder i32 %v0_91a0, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-52.2, { 2, 0, 1 }
  uselistorder i32 %v3_9174, { 0, 2, 1 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v2_9158, { 1, 0 }
  uselistorder i32 %v1_9150, { 2, 0, 1, 3 }
  uselistorder i32 %v4_914c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_90e0, { 0, 2, 1 }
  uselistorder i32 %v4_90cc, { 0, 1, 2, 10, 9, 8, 3, 5, 6, 7, 4, 11 }
  uselistorder i32 %v3_90b0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_908c, { 1, 0 }
  uselistorder i32 %v0_9070, { 0, 2, 1 }
  uselistorder i32 %v0_904c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_9040, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v2_902c, { 2, 1, 0 }
  uselistorder i32 %v4_9018, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_8fec, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 %v3_8fdc, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %r5.global-to-local, { 0, 3, 1, 2, 4, 6, 5, 7 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 9, 6, 7, 8, 10, 11, 12, 14, 13, 15 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 6, 3, 7, 8, 25, 9, 10, 13, 2, 17, 14, 11, 12, 15, 16, 23, 18, 20, 19, 21, 22, 26, 24, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 16, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 %arg2, { 1, 3, 4, 0, 2, 5, 6 }
  uselistorder label %dec_label_pc_9268, { 2, 0, 1 }
  uselistorder label %dec_label_pc_925c, { 1, 0 }
  uselistorder label %dec_label_pc_9218, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_91c4, { 4, 3, 0, 1, 2, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_916c, { 1, 0 }
  uselistorder label %dec_label_pc_9000, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_92b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_92b8:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_92b8 = load i32, i32* @r4, align 4
  store i32 %v3_92b8, i32* %stack_var_-24, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_92c4 = call i32* @calloc(i32 1, i32 8)
  %v3_92c4 = ptrtoint i32* %v2_92c4 to i32
  store i32 ptrtoint (i8** @global_var_1c1bc.74 to i32), i32* %r4.global-to-local, align 4
  %v2_92cc = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_92cc = zext i8 %v2_92cc to i32
  store i32 ptrtoint (i32* @global_var_1c1c0.76 to i32), i32* %r6.global-to-local, align 4
  store i32 56848, i32* %r2.global-to-local, align 4
  store i32 %v3_92c4, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_92e0 = mul nuw nsw i32 %v3_92cc, 4
  store i32 %v3_92e0, i32* %r1.global-to-local, align 4
  %v2_92e4 = load i32, i32* @global_var_1c1c0.76, align 4
  store i32 56848, i32* %v2_92c4, align 4
  %v0_92ec = load i32, i32* %r3.global-to-local, align 4
  %v1_92ec = trunc i32 %v0_92ec to i8
  %v2_92ec = load i32, i32* %r5.global-to-local, align 4
  %v3_92ec = add i32 %v2_92ec, 4
  %v4_92ec = inttoptr i32 %v3_92ec to i8*
  store i8 %v1_92ec, i8* %v4_92ec, align 1
  %v0_92f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_92f0 = add i32 %v0_92f0, 4
  store i32 %v1_92f0, i32* %r1.global-to-local, align 4
  %v4_92f4 = inttoptr i32 %v2_92e4 to i32*
  %v5_92f4 = call i32* @realloc(i32* %v4_92f4, i32 %v1_92f0)
  %v7_92f4 = ptrtoint i32* %v5_92f4 to i32
  %v2_92f8 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_92f8 = zext i8 %v2_92f8 to i32
  store i32 %v3_92f8, i32* %r3.global-to-local, align 4
  store i32 %v7_92f4, i32* %ip.global-to-local, align 4
  %v0_9300 = load i32, i32* %r5.global-to-local, align 4
  %v5_9300 = mul nuw nsw i32 %v3_92f8, 4
  %v6_9300 = add i32 %v5_9300, %v7_92f4
  %v7_9300 = inttoptr i32 %v6_9300 to i32*
  store i32 %v0_9300, i32* %v7_9300, align 4
  store i32 ptrtoint (i8* @global_var_1c1bd.81 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_9310 = load i32, i32* %r4.global-to-local, align 4
  %v3_9310 = inttoptr i32 %v2_9310 to i8*
  store i8 ptrtoint (i8* @global_var_1c1bd.81 to i8), i8* %v3_9310, align 1
  %v0_9314 = load i32, i32* %ip.global-to-local, align 4
  %v1_9314 = load i32, i32* %r6.global-to-local, align 4
  %v2_9314 = inttoptr i32 %v1_9314 to i32*
  store i32 %v0_9314, i32* %v2_9314, align 4
  %v2_9318 = call i32* @calloc(i32 1, i32 8)
  %v3_9318 = ptrtoint i32* %v2_9318 to i32
  %v2_931c = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_931c = zext i8 %v2_931c to i32
  store i32 ptrtoint (i32* @global_var_e4b8.83 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* %r8.global-to-local, align 4
  store i32 %v3_9318, i32* %r5.global-to-local, align 4
  %v3_932c = mul nuw nsw i32 %v3_931c, 4
  store i32 %v3_932c, i32* %r1.global-to-local, align 4
  %v2_9330 = load i32, i32* @global_var_1c1c0.76, align 4
  store i32 ptrtoint (i32* @global_var_e4b8.83 to i32), i32* %v2_9318, align 4
  %v2_9338 = load i32, i32* %r5.global-to-local, align 4
  %v3_9338 = add i32 %v2_9338, 4
  %v4_9338 = inttoptr i32 %v3_9338 to i8*
  store i8 1, i8* %v4_9338, align 1
  %v0_933c = load i32, i32* %r1.global-to-local, align 4
  %v1_933c = add i32 %v0_933c, 4
  store i32 %v1_933c, i32* %r1.global-to-local, align 4
  %v3_9340 = inttoptr i32 %v2_9330 to i32*
  %v4_9340 = call i32* @realloc(i32* %v3_9340, i32 %v1_933c)
  %v6_9340 = ptrtoint i32* %v4_9340 to i32
  %v2_9344 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_9344 = zext i8 %v2_9344 to i32
  store i32 %v3_9344, i32* %r3.global-to-local, align 4
  store i32 %v6_9340, i32* %ip.global-to-local, align 4
  %v0_934c = load i32, i32* %r5.global-to-local, align 4
  %v5_934c = mul nuw nsw i32 %v3_9344, 4
  %v6_934c = add i32 %v5_934c, %v6_9340
  %v7_934c = inttoptr i32 %v6_934c to i32*
  store i32 %v0_934c, i32* %v7_934c, align 4
  %v0_9350 = load i32, i32* %r3.global-to-local, align 4
  %v1_9350 = load i32, i32* %r8.global-to-local, align 4
  %v2_9350 = add i32 %v1_9350, %v0_9350
  store i32 %v2_9350, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_935c = load i32, i32* %ip.global-to-local, align 4
  %v1_935c = load i32, i32* %r6.global-to-local, align 4
  %v2_935c = inttoptr i32 %v1_935c to i32*
  store i32 %v0_935c, i32* %v2_935c, align 4
  %v0_9360 = load i32, i32* %r2.global-to-local, align 4
  %v1_9360 = trunc i32 %v0_9360 to i8
  %v2_9360 = load i32, i32* %r4.global-to-local, align 4
  %v3_9360 = inttoptr i32 %v2_9360 to i8*
  store i8 %v1_9360, i8* %v3_9360, align 1
  %v2_9364 = call i32* @calloc(i32 %v1_9350, i32 8)
  %v4_9364 = ptrtoint i32* %v2_9364 to i32
  %v2_9368 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_9368 = zext i8 %v2_9368 to i32
  store i32 ptrtoint (i32* @global_var_e9b8.85 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9364, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_9378 = mul nuw nsw i32 %v3_9368, 4
  store i32 %v3_9378, i32* %r1.global-to-local, align 4
  %v2_937c = load i32, i32* @global_var_1c1c0.76, align 4
  store i32 ptrtoint (i32* @global_var_e9b8.85 to i32), i32* %v2_9364, align 4
  %v0_9384 = load i32, i32* %r3.global-to-local, align 4
  %v1_9384 = trunc i32 %v0_9384 to i8
  %v2_9384 = load i32, i32* %r5.global-to-local, align 4
  %v3_9384 = add i32 %v2_9384, 4
  %v4_9384 = inttoptr i32 %v3_9384 to i8*
  store i8 %v1_9384, i8* %v4_9384, align 1
  %v0_9388 = load i32, i32* %r1.global-to-local, align 4
  %v1_9388 = add i32 %v0_9388, 4
  store i32 %v1_9388, i32* %r1.global-to-local, align 4
  %v4_938c = inttoptr i32 %v2_937c to i32*
  %v5_938c = call i32* @realloc(i32* %v4_938c, i32 %v1_9388)
  %v7_938c = ptrtoint i32* %v5_938c to i32
  %v2_9390 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_9390 = zext i8 %v2_9390 to i32
  store i32 %v3_9390, i32* %r3.global-to-local, align 4
  store i32 %v7_938c, i32* %ip.global-to-local, align 4
  %v1_9398 = load i32, i32* %r8.global-to-local, align 4
  %v2_9398 = add i32 %v1_9398, %v3_9390
  store i32 %v2_9398, i32* %r2.global-to-local, align 4
  %v0_939c = load i32, i32* %r5.global-to-local, align 4
  %v5_939c = mul nuw nsw i32 %v3_9390, 4
  %v6_939c = add i32 %v5_939c, %v7_938c
  %v7_939c = inttoptr i32 %v6_939c to i32*
  store i32 %v0_939c, i32* %v7_939c, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_93a4 = load i32, i32* %r8.global-to-local, align 4
  %v0_93a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_93a8 = trunc i32 %v0_93a8 to i8
  %v2_93a8 = load i32, i32* %r4.global-to-local, align 4
  %v3_93a8 = inttoptr i32 %v2_93a8 to i8*
  store i8 %v1_93a8, i8* %v3_93a8, align 1
  %v0_93ac = load i32, i32* %ip.global-to-local, align 4
  %v1_93ac = load i32, i32* %r6.global-to-local, align 4
  %v2_93ac = inttoptr i32 %v1_93ac to i32*
  store i32 %v0_93ac, i32* %v2_93ac, align 4
  %v2_93b0 = call i32* @calloc(i32 %v0_93a4, i32 8)
  %v3_93b0 = ptrtoint i32* %v2_93b0 to i32
  %v2_93b4 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_93b4 = zext i8 %v2_93b4 to i32
  store i32 ptrtoint (i32* @global_var_daec.87 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* %r7.global-to-local, align 4
  store i32 %v3_93b0, i32* %r5.global-to-local, align 4
  %v3_93c4 = mul nuw nsw i32 %v3_93b4, 4
  store i32 %v3_93c4, i32* %r1.global-to-local, align 4
  %v2_93c8 = load i32, i32* @global_var_1c1c0.76, align 4
  store i32 ptrtoint (i32* @global_var_daec.87 to i32), i32* %v2_93b0, align 4
  %v2_93d0 = load i32, i32* %r5.global-to-local, align 4
  %v3_93d0 = add i32 %v2_93d0, 4
  %v4_93d0 = inttoptr i32 %v3_93d0 to i8*
  store i8 8, i8* %v4_93d0, align 1
  %v0_93d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_93d4 = add i32 %v0_93d4, 4
  store i32 %v1_93d4, i32* %r1.global-to-local, align 4
  %v3_93d8 = inttoptr i32 %v2_93c8 to i32*
  %v4_93d8 = call i32* @realloc(i32* %v3_93d8, i32 %v1_93d4)
  %v6_93d8 = ptrtoint i32* %v4_93d8 to i32
  %v2_93dc = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_93dc = zext i8 %v2_93dc to i32
  store i32 %v3_93dc, i32* %r3.global-to-local, align 4
  store i32 %v6_93d8, i32* %ip.global-to-local, align 4
  %v0_93e4 = load i32, i32* %r5.global-to-local, align 4
  %v5_93e4 = mul nuw nsw i32 %v3_93dc, 4
  %v6_93e4 = add i32 %v5_93e4, %v6_93d8
  %v7_93e4 = inttoptr i32 %v6_93e4 to i32*
  store i32 %v0_93e4, i32* %v7_93e4, align 4
  %v0_93e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_93e8 = load i32, i32* %r8.global-to-local, align 4
  %v2_93e8 = add i32 %v1_93e8, %v0_93e8
  store i32 %v2_93e8, i32* %r2.global-to-local, align 4
  %v0_93ec = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_93ec, i32* %r1.global-to-local, align 4
  %v0_93f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_93f4 = load i32, i32* %r6.global-to-local, align 4
  %v2_93f4 = inttoptr i32 %v1_93f4 to i32*
  store i32 %v0_93f4, i32* %v2_93f4, align 4
  %v0_93f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_93f8 = trunc i32 %v0_93f8 to i8
  %v2_93f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_93f8 = inttoptr i32 %v2_93f8 to i8*
  store i8 %v1_93f8, i8* %v3_93f8, align 1
  %v2_93fc = call i32* @calloc(i32 %v1_93e8, i32 %v0_93ec)
  %v4_93fc = ptrtoint i32* %v2_93fc to i32
  %v2_9400 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_9400 = zext i8 %v2_9400 to i32
  store i32 ptrtoint (i32* @global_var_d370.89 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_93fc, i32* %r5.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_9410 = mul nuw nsw i32 %v3_9400, 4
  store i32 %v3_9410, i32* %r1.global-to-local, align 4
  %v2_9414 = load i32, i32* @global_var_1c1c0.76, align 4
  store i32 ptrtoint (i32* @global_var_d370.89 to i32), i32* %v2_93fc, align 4
  %v0_941c = load i32, i32* %r3.global-to-local, align 4
  %v1_941c = trunc i32 %v0_941c to i8
  %v2_941c = load i32, i32* %r5.global-to-local, align 4
  %v3_941c = add i32 %v2_941c, 4
  %v4_941c = inttoptr i32 %v3_941c to i8*
  store i8 %v1_941c, i8* %v4_941c, align 1
  %v0_9420 = load i32, i32* %r1.global-to-local, align 4
  %v1_9420 = add i32 %v0_9420, 4
  store i32 %v1_9420, i32* %r1.global-to-local, align 4
  %v4_9424 = inttoptr i32 %v2_9414 to i32*
  %v5_9424 = call i32* @realloc(i32* %v4_9424, i32 %v1_9420)
  %v7_9424 = ptrtoint i32* %v5_9424 to i32
  %v2_9428 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_9428 = zext i8 %v2_9428 to i32
  store i32 %v3_9428, i32* %r3.global-to-local, align 4
  store i32 %v7_9424, i32* %ip.global-to-local, align 4
  %v0_9430 = load i32, i32* %r5.global-to-local, align 4
  %v5_9430 = mul nuw nsw i32 %v3_9428, 4
  %v6_9430 = add i32 %v5_9430, %v7_9424
  %v7_9430 = inttoptr i32 %v6_9430 to i32*
  store i32 %v0_9430, i32* %v7_9430, align 4
  %v0_9434 = load i32, i32* %r3.global-to-local, align 4
  %v1_9434 = load i32, i32* %r8.global-to-local, align 4
  %v2_9434 = add i32 %v1_9434, %v0_9434
  store i32 %v2_9434, i32* %r2.global-to-local, align 4
  %v0_9438 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9438, i32* %r1.global-to-local, align 4
  %v0_9440 = load i32, i32* %ip.global-to-local, align 4
  %v1_9440 = load i32, i32* %r6.global-to-local, align 4
  %v2_9440 = inttoptr i32 %v1_9440 to i32*
  store i32 %v0_9440, i32* %v2_9440, align 4
  %v0_9444 = load i32, i32* %r2.global-to-local, align 4
  %v1_9444 = trunc i32 %v0_9444 to i8
  %v2_9444 = load i32, i32* %r4.global-to-local, align 4
  %v3_9444 = inttoptr i32 %v2_9444 to i8*
  store i8 %v1_9444, i8* %v3_9444, align 1
  %v2_9448 = call i32* @calloc(i32 %v1_9434, i32 %v0_9438)
  %v4_9448 = ptrtoint i32* %v2_9448 to i32
  %v2_944c = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_944c = zext i8 %v2_944c to i32
  store i32 ptrtoint (i32* @global_var_cbb4.91 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9448, i32* %r5.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_945c = mul nuw nsw i32 %v3_944c, 4
  store i32 %v3_945c, i32* %r1.global-to-local, align 4
  %v2_9460 = load i32, i32* @global_var_1c1c0.76, align 4
  store i32 ptrtoint (i32* @global_var_cbb4.91 to i32), i32* %v2_9448, align 4
  %v0_9468 = load i32, i32* %r3.global-to-local, align 4
  %v1_9468 = trunc i32 %v0_9468 to i8
  %v2_9468 = load i32, i32* %r5.global-to-local, align 4
  %v3_9468 = add i32 %v2_9468, 4
  %v4_9468 = inttoptr i32 %v3_9468 to i8*
  store i8 %v1_9468, i8* %v4_9468, align 1
  %v0_946c = load i32, i32* %r1.global-to-local, align 4
  %v1_946c = add i32 %v0_946c, 4
  store i32 %v1_946c, i32* %r1.global-to-local, align 4
  %v4_9470 = inttoptr i32 %v2_9460 to i32*
  %v5_9470 = call i32* @realloc(i32* %v4_9470, i32 %v1_946c)
  %v7_9470 = ptrtoint i32* %v5_9470 to i32
  %v2_9474 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_9474 = zext i8 %v2_9474 to i32
  store i32 %v3_9474, i32* %r3.global-to-local, align 4
  store i32 %v7_9470, i32* %ip.global-to-local, align 4
  %v0_947c = load i32, i32* %r5.global-to-local, align 4
  %v5_947c = mul nuw nsw i32 %v3_9474, 4
  %v6_947c = add i32 %v5_947c, %v7_9470
  %v7_947c = inttoptr i32 %v6_947c to i32*
  store i32 %v0_947c, i32* %v7_947c, align 4
  %v0_9480 = load i32, i32* %r3.global-to-local, align 4
  %v1_9480 = load i32, i32* %r8.global-to-local, align 4
  %v2_9480 = add i32 %v1_9480, %v0_9480
  store i32 %v2_9480, i32* %r2.global-to-local, align 4
  %v0_9484 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9484, i32* %r1.global-to-local, align 4
  %v0_948c = load i32, i32* %ip.global-to-local, align 4
  %v1_948c = load i32, i32* %r6.global-to-local, align 4
  %v2_948c = inttoptr i32 %v1_948c to i32*
  store i32 %v0_948c, i32* %v2_948c, align 4
  %v0_9490 = load i32, i32* %r2.global-to-local, align 4
  %v1_9490 = trunc i32 %v0_9490 to i8
  %v2_9490 = load i32, i32* %r4.global-to-local, align 4
  %v3_9490 = inttoptr i32 %v2_9490 to i8*
  store i8 %v1_9490, i8* %v3_9490, align 1
  %v2_9494 = call i32* @calloc(i32 %v1_9480, i32 %v0_9484)
  %v4_9494 = ptrtoint i32* %v2_9494 to i32
  %v2_9498 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_9498 = zext i8 %v2_9498 to i32
  store i32 ptrtoint (i32* @global_var_c288.93 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9494, i32* %r5.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_94a8 = mul nuw nsw i32 %v3_9498, 4
  store i32 %v3_94a8, i32* %r1.global-to-local, align 4
  %v2_94ac = load i32, i32* @global_var_1c1c0.76, align 4
  store i32 ptrtoint (i32* @global_var_c288.93 to i32), i32* %v2_9494, align 4
  %v0_94b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_94b4 = trunc i32 %v0_94b4 to i8
  %v2_94b4 = load i32, i32* %r5.global-to-local, align 4
  %v3_94b4 = add i32 %v2_94b4, 4
  %v4_94b4 = inttoptr i32 %v3_94b4 to i8*
  store i8 %v1_94b4, i8* %v4_94b4, align 1
  %v0_94b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_94b8 = add i32 %v0_94b8, 4
  store i32 %v1_94b8, i32* %r1.global-to-local, align 4
  %v4_94bc = inttoptr i32 %v2_94ac to i32*
  %v5_94bc = call i32* @realloc(i32* %v4_94bc, i32 %v1_94b8)
  %v7_94bc = ptrtoint i32* %v5_94bc to i32
  %v2_94c0 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_94c0 = zext i8 %v2_94c0 to i32
  store i32 %v3_94c0, i32* %r3.global-to-local, align 4
  store i32 %v7_94bc, i32* %ip.global-to-local, align 4
  %v0_94c8 = load i32, i32* %r5.global-to-local, align 4
  %v5_94c8 = mul nuw nsw i32 %v3_94c0, 4
  %v6_94c8 = add i32 %v5_94c8, %v7_94bc
  %v7_94c8 = inttoptr i32 %v6_94c8 to i32*
  store i32 %v0_94c8, i32* %v7_94c8, align 4
  %v0_94cc = load i32, i32* %r3.global-to-local, align 4
  %v1_94cc = load i32, i32* %r8.global-to-local, align 4
  %v2_94cc = add i32 %v1_94cc, %v0_94cc
  store i32 %v2_94cc, i32* %r2.global-to-local, align 4
  %v0_94d0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_94d0, i32* %r1.global-to-local, align 4
  %v0_94d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_94d8 = load i32, i32* %r6.global-to-local, align 4
  %v2_94d8 = inttoptr i32 %v1_94d8 to i32*
  store i32 %v0_94d8, i32* %v2_94d8, align 4
  %v0_94dc = load i32, i32* %r2.global-to-local, align 4
  %v1_94dc = trunc i32 %v0_94dc to i8
  %v2_94dc = load i32, i32* %r4.global-to-local, align 4
  %v3_94dc = inttoptr i32 %v2_94dc to i8*
  store i8 %v1_94dc, i8* %v3_94dc, align 1
  %v2_94e0 = call i32* @calloc(i32 %v1_94cc, i32 %v0_94d0)
  %v4_94e0 = ptrtoint i32* %v2_94e0 to i32
  %v2_94e4 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_94e4 = zext i8 %v2_94e4 to i32
  store i32 ptrtoint (i32* @global_var_bb50.95 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_94e0, i32* %r5.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_94f4 = mul nuw nsw i32 %v3_94e4, 4
  store i32 %v3_94f4, i32* %r1.global-to-local, align 4
  %v2_94f8 = load i32, i32* @global_var_1c1c0.76, align 4
  store i32 ptrtoint (i32* @global_var_bb50.95 to i32), i32* %v2_94e0, align 4
  %v0_9500 = load i32, i32* %r3.global-to-local, align 4
  %v1_9500 = trunc i32 %v0_9500 to i8
  %v2_9500 = load i32, i32* %r5.global-to-local, align 4
  %v3_9500 = add i32 %v2_9500, 4
  %v4_9500 = inttoptr i32 %v3_9500 to i8*
  store i8 %v1_9500, i8* %v4_9500, align 1
  %v0_9504 = load i32, i32* %r1.global-to-local, align 4
  %v1_9504 = add i32 %v0_9504, 4
  store i32 %v1_9504, i32* %r1.global-to-local, align 4
  %v4_9508 = inttoptr i32 %v2_94f8 to i32*
  %v5_9508 = call i32* @realloc(i32* %v4_9508, i32 %v1_9504)
  %v7_9508 = ptrtoint i32* %v5_9508 to i32
  %v2_950c = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_950c = zext i8 %v2_950c to i32
  store i32 %v3_950c, i32* %r3.global-to-local, align 4
  store i32 %v7_9508, i32* %ip.global-to-local, align 4
  %v0_9514 = load i32, i32* %r5.global-to-local, align 4
  %v5_9514 = mul nuw nsw i32 %v3_950c, 4
  %v6_9514 = add i32 %v5_9514, %v7_9508
  %v7_9514 = inttoptr i32 %v6_9514 to i32*
  store i32 %v0_9514, i32* %v7_9514, align 4
  %v0_9518 = load i32, i32* %r3.global-to-local, align 4
  %v1_9518 = load i32, i32* %r8.global-to-local, align 4
  %v2_9518 = add i32 %v1_9518, %v0_9518
  store i32 %v2_9518, i32* %r2.global-to-local, align 4
  %v0_951c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_951c, i32* %r1.global-to-local, align 4
  %v0_9524 = load i32, i32* %ip.global-to-local, align 4
  %v1_9524 = load i32, i32* %r6.global-to-local, align 4
  %v2_9524 = inttoptr i32 %v1_9524 to i32*
  store i32 %v0_9524, i32* %v2_9524, align 4
  %v0_9528 = load i32, i32* %r2.global-to-local, align 4
  %v1_9528 = trunc i32 %v0_9528 to i8
  %v2_9528 = load i32, i32* %r4.global-to-local, align 4
  %v3_9528 = inttoptr i32 %v2_9528 to i8*
  store i8 %v1_9528, i8* %v3_9528, align 1
  %v2_952c = call i32* @calloc(i32 %v1_9518, i32 %v0_951c)
  %v4_952c = ptrtoint i32* %v2_952c to i32
  %v2_9530 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_9530 = zext i8 %v2_9530 to i32
  store i32 45992, i32* %r2.global-to-local, align 4
  store i32 %v4_952c, i32* %r5.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_9540 = mul nuw nsw i32 %v3_9530, 4
  store i32 %v3_9540, i32* %r1.global-to-local, align 4
  %v2_9544 = load i32, i32* @global_var_1c1c0.76, align 4
  store i32 45992, i32* %v2_952c, align 4
  %v0_954c = load i32, i32* %r3.global-to-local, align 4
  %v1_954c = trunc i32 %v0_954c to i8
  %v2_954c = load i32, i32* %r5.global-to-local, align 4
  %v3_954c = add i32 %v2_954c, 4
  %v4_954c = inttoptr i32 %v3_954c to i8*
  store i8 %v1_954c, i8* %v4_954c, align 1
  %v0_9550 = load i32, i32* %r1.global-to-local, align 4
  %v1_9550 = add i32 %v0_9550, 4
  store i32 %v1_9550, i32* %r1.global-to-local, align 4
  %v4_9554 = inttoptr i32 %v2_9544 to i32*
  %v5_9554 = call i32* @realloc(i32* %v4_9554, i32 %v1_9550)
  %v7_9554 = ptrtoint i32* %v5_9554 to i32
  %v2_9558 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_9558 = zext i8 %v2_9558 to i32
  store i32 %v3_9558, i32* %r3.global-to-local, align 4
  store i32 %v7_9554, i32* %ip.global-to-local, align 4
  %v0_9560 = load i32, i32* %r5.global-to-local, align 4
  %v5_9560 = mul nuw nsw i32 %v3_9558, 4
  %v6_9560 = add i32 %v5_9560, %v7_9554
  %v7_9560 = inttoptr i32 %v6_9560 to i32*
  store i32 %v0_9560, i32* %v7_9560, align 4
  %v0_9564 = load i32, i32* %r3.global-to-local, align 4
  %v1_9564 = load i32, i32* %r8.global-to-local, align 4
  %v2_9564 = add i32 %v1_9564, %v0_9564
  store i32 %v2_9564, i32* %r2.global-to-local, align 4
  %v0_9568 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9568, i32* %r1.global-to-local, align 4
  %v1_9570 = trunc i32 %v2_9564 to i8
  %v2_9570 = load i32, i32* %r4.global-to-local, align 4
  %v3_9570 = inttoptr i32 %v2_9570 to i8*
  store i8 %v1_9570, i8* %v3_9570, align 1
  %v0_9574 = load i32, i32* %ip.global-to-local, align 4
  %v1_9574 = load i32, i32* %r6.global-to-local, align 4
  %v2_9574 = inttoptr i32 %v1_9574 to i32*
  store i32 %v0_9574, i32* %v2_9574, align 4
  %v2_9578 = call i32* @calloc(i32 %v1_9564, i32 %v0_9568)
  %v4_9578 = ptrtoint i32* %v2_9578 to i32
  %v2_957c = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_957c = zext i8 %v2_957c to i32
  store i32 ptrtoint (i32* @global_var_95f0.98 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9578, i32* %r5.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_958c = mul nuw nsw i32 %v3_957c, 4
  store i32 %v3_958c, i32* %r1.global-to-local, align 4
  %v2_9590 = load i32, i32* @global_var_1c1c0.76, align 4
  store i32 ptrtoint (i32* @global_var_95f0.98 to i32), i32* %v2_9578, align 4
  %v0_9598 = load i32, i32* %r3.global-to-local, align 4
  %v1_9598 = trunc i32 %v0_9598 to i8
  %v2_9598 = load i32, i32* %r5.global-to-local, align 4
  %v3_9598 = add i32 %v2_9598, 4
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v1_9598, i8* %v4_9598, align 1
  %v0_959c = load i32, i32* %r1.global-to-local, align 4
  %v1_959c = add i32 %v0_959c, 4
  store i32 %v1_959c, i32* %r1.global-to-local, align 4
  %v4_95a0 = inttoptr i32 %v2_9590 to i32*
  %v5_95a0 = call i32* @realloc(i32* %v4_95a0, i32 %v1_959c)
  %v6_95a0 = ptrtoint i32* %v5_95a0 to i32
  %v2_95a4 = load i8, i8* bitcast (i8** @global_var_1c1bc.74 to i8*), align 4
  %v3_95a4 = zext i8 %v2_95a4 to i32
  store i32 %v3_95a4, i32* %r3.global-to-local, align 4
  %v1_95a8 = load i32, i32* %r6.global-to-local, align 4
  %v2_95a8 = inttoptr i32 %v1_95a8 to i32*
  store i32 %v6_95a0, i32* %v2_95a8, align 4
  %v0_95ac = load i32, i32* %r5.global-to-local, align 4
  %v2_95ac = load i32, i32* %r3.global-to-local, align 4
  %v5_95ac = mul i32 %v2_95ac, 4
  %v6_95ac = add i32 %v5_95ac, %v6_95a0
  %v7_95ac = inttoptr i32 %v6_95ac to i32*
  store i32 %v0_95ac, i32* %v7_95ac, align 4
  %v0_95b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_95b0 = load i32, i32* %r8.global-to-local, align 4
  %v2_95b0 = add i32 %v1_95b0, %v0_95b0
  store i32 %v2_95b0, i32* %r2.global-to-local, align 4
  %v1_95b8 = trunc i32 %v2_95b0 to i8
  %v2_95b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_95b8 = inttoptr i32 %v2_95b8 to i8*
  store i8 %v1_95b8, i8* %v3_95b8, align 1
  %v2_95bc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_95bc, i32* @r4, align 4
  ret i32 %v1_95b0

; uselistorder directives
  uselistorder i32 %v1_95b0, { 1, 0 }
  uselistorder i32 %v1_9564, { 1, 0 }
  uselistorder i32 %v1_9518, { 1, 0 }
  uselistorder i32 %v1_94cc, { 1, 0 }
  uselistorder i32 %v1_9480, { 1, 0 }
  uselistorder i32 %v1_9434, { 1, 0 }
  uselistorder i32 %v1_93e8, { 1, 0 }
  uselistorder i32 %v3_9390, { 1, 0, 2 }
  uselistorder i32 %v1_9350, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 10 }
  uselistorder i32* %r7.global-to-local, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32* %r6.global-to-local, { 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 10 }
  uselistorder i32* %r5.global-to-local, { 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32* %r4.global-to-local, { 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 10 }
  uselistorder i32* %r3.global-to-local, { 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %r2.global-to-local, { 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 24, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r1.global-to-local, { 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32* %ip.global-to-local, { 12, 13, 14, 15, 16, 17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* @global_var_1c1c0.76, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i8* bitcast (i8** @global_var_1c1bc.74 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_95f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_95f0:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_95f0 = load i32, i32* @r4, align 4
  store i32 %v3_95f0, i32* %stack_var_-36, align 4
  %v6_95f0 = load i32, i32* @r5, align 4
  %v9_95f0 = load i32, i32* @r6, align 4
  %v15_95f0 = load i32, i32* @r8, align 4
  %v1_95fc = urem i32 %arg3, 256
  store i32 %v1_95fc, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9608 = urem i32 %arg1, 256
  store i32 %v1_9608, i32* %ip.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_95fc, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_9624 = inttoptr i32 %arg4 to i32*
  %v6_9624 = call i32 @function_8e9c(i32 %v1_95fc, i32* %v5_9624, i32 20, i32 0, i32 %arg2)
  %v0_9628 = load i32, i32* @r5, align 4
  store i32 %v0_9628, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_9634 = load i32, i32* @r4, align 4
  store i32 %v0_9634, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1369c.100 to i32), i32* %r3.global-to-local, align 4
  %v5_963c = inttoptr i32 %v0_9628 to i32*
  %v6_963c = call i32 @function_8e9c(i32 %v0_9634, i32* %v5_963c, i32 19, i32 ptrtoint ([4 x i8]* @global_var_1369c.100 to i32), i32 %v6_9624)
  %v0_9640 = load i32, i32* @r5, align 4
  store i32 %v0_9640, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_963c, i32* %fp.global-to-local, align 4
  %v0_9650 = load i32, i32* @r4, align 4
  store i32 %v0_9650, i32* %r0.global-to-local, align 4
  %v5_9654 = inttoptr i32 %v0_9640 to i32*
  %v6_9654 = call i32 @function_8e9c(i32 %v0_9650, i32* %v5_9654, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_9658 = load i32, i32* @r5, align 4
  store i32 %v0_9658, i32* %r1.global-to-local, align 4
  store i32 %v6_9654, i32* %sb.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  %v0_9664 = load i32, i32* @r4, align 4
  store i32 %v0_9664, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136a0.102 to i32), i32* %r3.global-to-local, align 4
  %v5_966c = inttoptr i32 %v0_9658 to i32*
  %v6_966c = call i32 @function_8e9c(i32 %v0_9664, i32* %v5_966c, i32 21, i32 ptrtoint (i32* @global_var_136a0.102 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_9670 = load i32, i32* @r5, align 4
  store i32 %v0_9670, i32* %r1.global-to-local, align 4
  store i32 %v6_966c, i32* @sl, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v0_967c = load i32, i32* @r4, align 4
  store i32 %v0_967c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_9684 = inttoptr i32 %v0_9670 to i32*
  %v5_9684 = call i32 @function_8f6c(i32 %v0_967c, i32* %v4_9684, i32 23, i32 1)
  %v0_9688 = load i32, i32* @r5, align 4
  store i32 %v0_9688, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_9684, i32* @r6, align 4
  %v0_9698 = load i32, i32* @r4, align 4
  store i32 %v0_9698, i32* %r0.global-to-local, align 4
  %v4_969c = inttoptr i32 %v0_9688 to i32*
  %v5_969c = call i32 @function_8f6c(i32 %v0_9698, i32* %v4_969c, i32 7, i32 80)
  %v2_96a4 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_96ac = mul i32 %v5_969c, 65536
  store i32 %v3_96ac, i32* %r3.global-to-local, align 4
  %tmp200 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  store i32 10241, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_96c0 = urem i32 %v5_969c, 65536
  store i32 %v3_96c0, i32* %r8.global-to-local, align 4
  %v4_96c4 = call i32* @memset(i32* nonnull %stack_var_-20809, i32 0, i32 10241)
  %v6_96c4 = ptrtoint i32* %v4_96c4 to i32
  store i32 %v6_96c4, i32* %r0.global-to-local, align 4
  %v0_96c8 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_96c8 = icmp slt i32 %v0_96c8, 0
  store i1 %v1_96c8, i1* %cpsr_n.global-to-local, align 1
  %v2_96c8 = icmp eq i32 %v0_96c8, 0
  store i1 %v2_96c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_96c8, label %.thread14, label %bb

bb:                                               ; preds = %dec_label_pc_95f0
  %v1_96cc = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_96cc = icmp slt i32 %v1_96cc, 0
  store i1 %v2_96cc, i1* %cpsr_n.global-to-local, align 1
  %v3_96cc = icmp eq i32 %v1_96cc, 0
  store i1 %v3_96cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_96cc, label %bb201, label %dec_label_pc_96e8

.thread14:                                        ; preds = %dec_label_pc_95f0
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_96dc

bb201:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_96dc

dec_label_pc_96dc:                                ; preds = %bb201, %dec_label_pc_9708, %.thread14, %dec_label_pc_96f8, %dec_label_pc_96e8
  %v29_96e4 = phi i32 [ %v2_970c, %dec_label_pc_9708 ], [ %v6_96c4, %.thread14 ], [ %v6_96c4, %bb201 ], [ %v2_96fc, %dec_label_pc_96f8 ], [ %v2_96ec, %dec_label_pc_96e8 ]
  %v2_96e4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_96e4, i32* %r4.global-to-local, align 4
  store i32 %v6_95f0, i32* %r5.global-to-local, align 4
  store i32 %v9_95f0, i32* %r6.global-to-local, align 4
  store i32 %v15_95f0, i32* %r8.global-to-local, align 4
  ret i32 %v29_96e4

dec_label_pc_96e8:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_96c8, i32* %r0.global-to-local, align 4
  %v1_96ec = inttoptr i32 %v0_96c8 to i8*
  %v2_96ec = call i32 @function_12d3c(i8* %v1_96ec)
  store i32 %v2_96ec, i32* %r0.global-to-local, align 4
  %v1_96f0 = add i32 %v2_96ec, -255
  %v2_96f0 = icmp ugt i32 %v2_96ec, 254
  store i1 %v2_96f0, i1* %cpsr_c.global-to-local, align 1
  %v3_96f0 = sub i32 254, %v2_96ec
  %v4_96f0 = and i32 %v3_96f0, %v2_96ec
  %v5_96f0 = icmp slt i32 %v4_96f0, 0
  store i1 %v5_96f0, i1* %cpsr_v.global-to-local, align 1
  %v6_96f0 = icmp slt i32 %v1_96f0, 0
  store i1 %v6_96f0, i1* %cpsr_n.global-to-local, align 1
  %v7_96f0 = icmp eq i32 %v2_96ec, 255
  store i1 %v7_96f0, i1* %cpsr_z.global-to-local, align 1
  %v8_96f4 = icmp sgt i32 %v2_96ec, 255
  br i1 %v8_96f4, label %dec_label_pc_96dc, label %dec_label_pc_96f8

dec_label_pc_96f8:                                ; preds = %dec_label_pc_96e8
  %v0_96f8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_96f8, i32* %r0.global-to-local, align 4
  %v1_96fc = inttoptr i32 %v0_96f8 to i8*
  %v2_96fc = call i32 @function_12d3c(i8* %v1_96fc)
  store i32 %v2_96fc, i32* %r0.global-to-local, align 4
  %v1_9700 = add i32 %v2_96fc, -127
  %v2_9700 = icmp ugt i32 %v2_96fc, 126
  store i1 %v2_9700, i1* %cpsr_c.global-to-local, align 1
  %v3_9700 = sub i32 126, %v2_96fc
  %v4_9700 = and i32 %v3_9700, %v2_96fc
  %v5_9700 = icmp slt i32 %v4_9700, 0
  store i1 %v5_9700, i1* %cpsr_v.global-to-local, align 1
  %v6_9700 = icmp slt i32 %v1_9700, 0
  store i1 %v6_9700, i1* %cpsr_n.global-to-local, align 1
  %v7_9700 = icmp eq i32 %v2_96fc, 127
  store i1 %v7_9700, i1* %cpsr_z.global-to-local, align 1
  %v8_9704 = icmp sgt i32 %v2_96fc, 127
  br i1 %v8_9704, label %dec_label_pc_96dc, label %dec_label_pc_9708

dec_label_pc_9708:                                ; preds = %dec_label_pc_96f8
  %v0_9708 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9708, i32* %r0.global-to-local, align 4
  %v1_970c = inttoptr i32 %v0_9708 to i8*
  %v2_970c = call i32 @function_12d3c(i8* %v1_970c)
  store i32 %v2_970c, i32* %r0.global-to-local, align 4
  %v1_9710 = add i32 %v2_970c, -9
  %v2_9710 = icmp ugt i32 %v2_970c, 8
  store i1 %v2_9710, i1* %cpsr_c.global-to-local, align 1
  %v3_9710 = sub i32 8, %v2_970c
  %v4_9710 = and i32 %v3_9710, %v2_970c
  %v5_9710 = icmp slt i32 %v4_9710, 0
  store i1 %v5_9710, i1* %cpsr_v.global-to-local, align 1
  %v6_9710 = icmp slt i32 %v1_9710, 0
  store i1 %v6_9710, i1* %cpsr_n.global-to-local, align 1
  %v7_9710 = icmp eq i32 %v2_970c, 9
  store i1 %v7_9710, i1* %cpsr_z.global-to-local, align 1
  %v7_9714 = icmp sgt i32 %v2_970c, 9
  br i1 %v7_9714, label %dec_label_pc_96dc, label %bb202

bb202:                                            ; preds = %dec_label_pc_9708
  %v10_9714 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_9714, i32* %r2.global-to-local, align 4
  %v8_9718 = load i32, i32* @r4, align 4
  %v10_9718 = add i32 %v10_9714, 364
  %v11_9718 = inttoptr i32 %v10_9718 to i32*
  store i32 %v8_9718, i32* %v11_9718, align 4
  br label %dec_label_pc_9720

dec_label_pc_9720:                                ; preds = %bb202, %bb206
  %v0_9720 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9720, i32* %r0.global-to-local, align 4
  %v1_9724 = inttoptr i32 %v0_9720 to i8*
  %v2_9724 = call i32 @function_12d3c(i8* %v1_9724)
  store i32 %v2_9724, i32* %r0.global-to-local, align 4
  store i32 %v10_9714, i32* %r1.global-to-local, align 4
  %v3_972c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_972c, i32* %ip.global-to-local, align 4
  %v2_9730 = sub i32 %v2_9724, %v3_972c
  %v3_9730 = icmp uge i32 %v2_9724, %v3_972c
  store i1 %v3_9730, i1* %cpsr_c.global-to-local, align 1
  %v4_9730 = xor i32 %v3_972c, %v2_9724
  %v5_9730 = xor i32 %v2_9730, %v2_9724
  %v6_9730 = and i32 %v5_9730, %v4_9730
  %v7_9730 = icmp slt i32 %v6_9730, 0
  store i1 %v7_9730, i1* %cpsr_v.global-to-local, align 1
  %v8_9730 = icmp slt i32 %v2_9730, 0
  store i1 %v8_9730, i1* %cpsr_n.global-to-local, align 1
  %v9_9730 = icmp eq i32 %v2_9724, %v3_972c
  store i1 %v9_9730, i1* %cpsr_z.global-to-local, align 1
  %v7_9734 = icmp sgt i32 %v2_9724, %v3_972c
  br i1 %v7_9734, label %dec_label_pc_9738, label %dec_label_pc_9764

dec_label_pc_9738:                                ; preds = %dec_label_pc_9720
  %v0_9738 = load i32, i32* %fp.global-to-local, align 4
  %v2_9738 = add i32 %v0_9738, %v3_972c
  %v3_9738 = inttoptr i32 %v2_9738 to i8*
  %v4_9738 = load i8, i8* %v3_9738, align 1
  %v6_9738 = zext i8 %v4_9738 to i32
  %v1_973c = add nsw i32 %v6_9738, -32
  store i32 %v1_973c, i32* %r2.global-to-local, align 4
  %v1_9740 = add nsw i32 %v6_9738, -97
  store i32 %v1_9740, i32* %r3.global-to-local, align 4
  %v2_9744 = icmp ugt i32 %v1_9740, 24
  store i1 %v2_9744, i1* %cpsr_c.global-to-local, align 1
  %v3_9744 = sub nsw i32 121, %v6_9738
  %v4_9744 = and i32 %v3_9744, %v1_9740
  %v5_9744 = icmp slt i32 %v4_9744, 0
  store i1 %v5_9744, i1* %cpsr_v.global-to-local, align 1
  %v6_9744 = icmp ult i8 %v4_9738, 122
  store i1 %v6_9744, i1* %cpsr_n.global-to-local, align 1
  %v7_9744 = icmp eq i32 %v1_9740, 25
  store i1 %v7_9744, i1* %cpsr_z.global-to-local, align 1
  %v2_9748 = xor i1 %v2_9744, true
  %v3_9748 = or i1 %v7_9744, %v2_9748
  br i1 %v3_9748, label %bb203, label %bb204

bb203:                                            ; preds = %dec_label_pc_9738
  %v5_9748 = trunc i32 %v1_973c to i8
  store i8 %v5_9748, i8* %v3_9738, align 1
  %v0_974c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_974c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb204

bb204:                                            ; preds = %dec_label_pc_9738, %bb203
  %v1_9750 = phi i1 [ %v2_9744, %dec_label_pc_9738 ], [ %v1_974c.pre, %bb203 ]
  %v0_9750 = phi i1 [ false, %dec_label_pc_9738 ], [ %v0_974c.pre, %bb203 ]
  %v2_974c = xor i1 %v1_9750, true
  %v3_974c = or i1 %v0_9750, %v2_974c
  br i1 %v3_974c, label %bb205, label %._crit_edge

._crit_edge:                                      ; preds = %bb204
  %v0_9758.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb206

bb205:                                            ; preds = %bb204
  store i32 %v10_9714, i32* %r3.global-to-local, align 4
  %v7_9750 = load i32, i32* %v11_9718, align 4
  store i32 %v7_9750, i32* %ip.global-to-local, align 4
  br label %bb206

bb206:                                            ; preds = %._crit_edge, %bb205
  %v0_9758 = phi i32 [ %v0_9758.pre, %._crit_edge ], [ %v7_9750, %bb205 ]
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  %v1_9758 = add i32 %v0_9758, 1
  store i32 %v1_9758, i32* %ip.global-to-local, align 4
  store i32 %v1_9758, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9720

dec_label_pc_9764:                                ; preds = %dec_label_pc_9720
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_9768 = call i32 @function_12288(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_9770 = call i32 @function_12288(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_9778 = call i32 @function_12288(i32 45)
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_9780 = call i32 @function_12288(i32 46)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9788 = call i32 @function_12288(i32 47)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9790 = call i32 @function_12288(i32 48)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9798 = call i32 @function_12288(i32 49)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_97a0 = call i32 @function_12288(i32 50)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_97a8 = call i32 @function_12288(i32 51)
  store i32 52, i32* %r0.global-to-local, align 4
  %v1_97b0 = call i32 @function_12288(i32 52)
  store i32 %v1_97b0, i32* %r0.global-to-local, align 4
  %v0_97b4 = load i32, i32* @r6, align 4
  %v2_97b4 = add i32 %v0_97b4, -512
  %v3_97b4 = icmp ugt i32 %v0_97b4, 511
  store i1 %v3_97b4, i1* %cpsr_c.global-to-local, align 1
  %v4_97b4 = sub i32 511, %v0_97b4
  %v5_97b4 = and i32 %v4_97b4, %v0_97b4
  %v6_97b4 = icmp slt i32 %v5_97b4, 0
  store i1 %v6_97b4, i1* %cpsr_v.global-to-local, align 1
  %v7_97b4 = icmp slt i32 %v2_97b4, 0
  store i1 %v7_97b4, i1* %cpsr_n.global-to-local, align 1
  %v8_97b4 = icmp eq i32 %v0_97b4, 512
  store i1 %v8_97b4, i1* %cpsr_z.global-to-local, align 1
  %v5_97b8 = icmp slt i32 %v0_97b4, 512
  br i1 %v5_97b8, label %thread-pre-split, label %bb207

bb207:                                            ; preds = %dec_label_pc_9764
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_9764, %bb207
  %v0_97c0 = phi i32 [ 512, %bb207 ], [ %v0_97b4, %dec_label_pc_9764 ]
  store i32 53, i32* %r0.global-to-local, align 4
  %v1_97c4 = call i32 @function_12288(i32 53)
  store i32 %v0_97c0, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_97d4 = call i32* @calloc(i32 %v0_97c0, i32 3140)
  %v3_97d4 = ptrtoint i32* %v2_97d4 to i32
  store i32 %v3_97d4, i32* %r0.global-to-local, align 4
  store i32 %v0_97c0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_97dc = icmp slt i32 %v0_97c0, 0
  store i1 %v1_97dc, i1* %cpsr_n.global-to-local, align 1
  %v2_97dc = icmp eq i32 %v0_97c0, 0
  store i1 %v2_97dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_97d4, i32* @r5, align 4
  %tmp208 = icmp slt i32 %v0_97c0, 1
  br i1 %tmp208, label %dec_label_pc_9918, label %dec_label_pc_97ec

dec_label_pc_97ec:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_97f0

dec_label_pc_97f0:                                ; preds = %dec_label_pc_b294, %dec_label_pc_97ec
  %v1_97fc = phi i32 [ %v1_b2b0, %dec_label_pc_b294 ], [ %v3_97d4, %dec_label_pc_97ec ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_9608, i32* %r1.global-to-local, align 4
  %v2_97fc = inttoptr i32 %v1_97fc to i32*
  store i32 -1, i32* %v2_97fc, align 4
  %v0_9800 = load i32, i32* %r3.global-to-local, align 4
  %v1_9800 = trunc i32 %v0_9800 to i8
  %v2_9800 = load i32, i32* @r5, align 4
  %v3_9800 = add i32 %v2_9800, 4
  %v4_9800 = inttoptr i32 %v3_9800 to i8*
  store i8 %v1_9800, i8* %v4_9800, align 1
  %v0_9804 = load i32, i32* @r7, align 4
  %v1_9808 = load i32, i32* %r1.global-to-local, align 4
  %v2_9808 = srem i32 %v0_9804, %v1_9808
  store i32 %v2_9808, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_9814 = and i32 %v2_9808, 536870912
  %v3_9814 = icmp ne i32 %v2_9814, 0
  store i1 %v3_9814, i1* %cpsr_c.global-to-local, align 1
  %v5_9814 = mul i32 %v2_9808, 24
  store i32 %v5_9814, i32* %r3.global-to-local, align 4
  %v2_9818 = add i32 %v5_9814, %arg2
  store i32 %v2_9818, i32* @r6, align 4
  %v1_981c = add i32 %v2_9818, 16
  %v2_981c = inttoptr i32 %v1_981c to i32*
  %v3_981c = load i32, i32* %v2_981c, align 4
  store i32 %v3_981c, i32* %r2.global-to-local, align 4
  %v0_9820 = load i32, i32* @r5, align 4
  %v1_9820 = add i32 %v0_9820, 532
  store i32 %v1_9820, i32* %lr.global-to-local, align 4
  store i32 %v1_9820, i32* @r0, align 4
  %v0_9828 = load i32, i32* @sl, align 4
  store i32 %v0_9828, i32* %r1.global-to-local, align 4
  %v2_982c = add i32 %v0_9820, 16
  %v3_982c = inttoptr i32 %v2_982c to i32*
  store i32 %v3_981c, i32* %v3_982c, align 4
  %v0_9830 = load i32, i32* %lr.global-to-local, align 4
  %v2_9834 = inttoptr i32 %v1_9820 to i8*
  %v3_9834 = call i32 @function_12d64(i8* %v2_9834, i32 %v0_9828)
  store i32 %v3_9834, i32* %r0.global-to-local, align 4
  %v0_9838 = load i32, i32* @r5, align 4
  %v1_9838 = add i32 %v0_9838, 532
  %v2_9838 = inttoptr i32 %v1_9838 to i8*
  %v3_9838 = load i8, i8* %v2_9838, align 1
  %v4_9838 = zext i8 %v3_9838 to i32
  store i32 %v4_9838, i32* %r3.global-to-local, align 4
  %v2_983c = icmp ugt i8 %v3_9838, 46
  store i1 %v2_983c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_983c = icmp ult i8 %v3_9838, 47
  store i1 %v6_983c, i1* %cpsr_n.global-to-local, align 1
  %v7_983c = icmp eq i8 %v3_9838, 47
  store i1 %v7_983c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_983c, label %dec_label_pc_9868, label %dec_label_pc_9844

dec_label_pc_9844:                                ; preds = %dec_label_pc_97f0
  store i32 %v0_9830, i32* %r0.global-to-local, align 4
  %v1_9848 = inttoptr i32 %v0_9830 to i8*
  %v2_9848 = call i32 @function_12d3c(i8* %v1_9848)
  store i32 %v2_9848, i32* %r2.global-to-local, align 4
  %v0_9850 = load i32, i32* @r5, align 4
  %v1_9854 = add i32 %v0_9850, 533
  store i32 %v1_9854, i32* %r0.global-to-local, align 4
  store i32 %v0_9830, i32* %r1.global-to-local, align 4
  %v3_985c = inttoptr i32 %v1_9854 to i32*
  %v4_985c = inttoptr i32 %v0_9830 to i32*
  %v5_985c = call i32* @memmove(i32* %v3_985c, i32* %v4_985c, i32 %v2_9848)
  %v7_985c = ptrtoint i32* %v5_985c to i32
  store i32 %v7_985c, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_9864 = load i32, i32* @r5, align 4
  %v3_9864 = add i32 %v2_9864, 532
  %v4_9864 = inttoptr i32 %v3_9864 to i8*
  store i8 47, i8* %v4_9864, align 1
  %v0_986c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9868

dec_label_pc_9868:                                ; preds = %dec_label_pc_97f0, %dec_label_pc_9844
  %v0_986c = phi i32 [ %v0_9838, %dec_label_pc_97f0 ], [ %v0_986c.pre, %dec_label_pc_9844 ]
  %v0_9868 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9868, i32* %r1.global-to-local, align 4
  %v1_986c = add i32 %v0_986c, 1440
  store i32 %v1_986c, i32* @r0, align 4
  %v2_9870 = inttoptr i32 %v1_986c to i8*
  %v3_9870 = call i32 @function_12d64(i8* %v2_9870, i32 %v0_9868)
  %v0_9874 = load i32, i32* @r5, align 4
  %v0_9878 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9878, i32* %r1.global-to-local, align 4
  %v1_987c = add i32 %v0_9874, 1431
  store i32 %v1_987c, i32* @r0, align 4
  %v2_9880 = inttoptr i32 %v1_987c to i8*
  %v3_9880 = call i32 @function_12d64(i8* %v2_9880, i32 %v0_9878)
  %v0_9884 = load i32, i32* @r5, align 4
  %v1_9888 = add i32 %v0_9884, 789
  store i32 %v1_9888, i32* @r0, align 4
  %v0_988c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_988c, i32* %r1.global-to-local, align 4
  %v2_9890 = inttoptr i32 %v1_9888 to i8*
  %v3_9890 = call i32 @function_12d64(i8* %v2_9890, i32 %v0_988c)
  store i32 %v3_9890, i32* %r0.global-to-local, align 4
  %v0_9894 = load i32, i32* @r6, align 4
  %v1_9894 = add i32 %v0_9894, 20
  %v2_9894 = inttoptr i32 %v1_9894 to i8*
  %v3_9894 = load i8, i8* %v2_9894, align 1
  %v4_9894 = zext i8 %v3_9894 to i32
  store i32 %v4_9894, i32* %r3.global-to-local, align 4
  %v2_9898 = icmp ugt i8 %v3_9894, 30
  store i1 %v2_9898, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9898 = icmp ult i8 %v3_9894, 31
  store i1 %v6_9898, i1* %cpsr_n.global-to-local, align 1
  %v7_9898 = icmp eq i8 %v3_9894, 31
  store i1 %v7_9898, i1* %cpsr_z.global-to-local, align 1
  %v2_989c = xor i1 %v7_9898, true
  %v3_989c = and i1 %v2_9898, %v2_989c
  br i1 %v3_989c, label %dec_label_pc_b294, label %dec_label_pc_98a0

dec_label_pc_98a0:                                ; preds = %dec_label_pc_9868
  %v1_98a0 = add i32 %v0_9894, 16
  %v2_98a0 = inttoptr i32 %v1_98a0 to i32*
  %v3_98a0 = load i32, i32* %v2_98a0, align 4
  store i32 %v3_98a0, i32* @r4, align 4
  %v0_98a4 = call i32 @function_105b4()
  store i32 %v0_98a4, i32* %r0.global-to-local, align 4
  %v0_98a8 = load i32, i32* @r4, align 4
  %v1_98ac = and i32 %v0_98a8, 65280
  store i32 %v1_98ac, i32* %r3.global-to-local, align 4
  %v1_98a8 = udiv i32 %v0_98a8, 256
  %v3_98b0 = and i32 %v1_98a8, 65280
  store i32 %v3_98b0, i32* %r2.global-to-local, align 4
  %v3_98b4 = mul i32 %v0_98a8, 16777216
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_98b8 = mul nuw nsw i32 %v1_98ac, 256
  %v5_98b8 = or i32 %v4_98b8, %v3_98b4
  store i32 %v5_98b8, i32* %r1.global-to-local, align 4
  %v0_98bc = load i32, i32* @r6, align 4
  %v1_98bc = add i32 %v0_98bc, 20
  %v2_98bc = inttoptr i32 %v1_98bc to i8*
  %v3_98bc = load i8, i8* %v2_98bc, align 1
  %v4_98bc = zext i8 %v3_98bc to i32
  store i32 %v4_98bc, i32* %ip.global-to-local, align 4
  %v2_98c4 = call i32 @llvm.bswap.i32(i32 %v0_98a8)
  %v7_98c8 = lshr i32 %v0_98a4, %v4_98bc
  %v8_98c8 = add i32 %v7_98c8, %v2_98c4
  store i32 %v8_98c8, i32* %r2.global-to-local, align 4
  %v3_98d4 = mul i32 %v8_98c8, 16777216
  %v1_98d8 = and i32 %v8_98c8, 65280
  store i32 %v1_98d8, i32* %r0.global-to-local, align 4
  %v4_98dc = mul nuw nsw i32 %v1_98d8, 256
  %v5_98dc = or i32 %v4_98dc, %v3_98d4
  store i32 %v5_98dc, i32* %r1.global-to-local, align 4
  %v2_98e0 = and i32 %v8_98c8, 8388608
  %v3_98e0 = icmp ne i32 %v2_98e0, 0
  store i1 %v3_98e0, i1* %cpsr_c.global-to-local, align 1
  %v2_98e4 = call i32 @llvm.bswap.i32(i32 %v8_98c8)
  store i32 %v2_98e4, i32* %r3.global-to-local, align 4
  %v1_98e8 = load i32, i32* @r5, align 4
  %v2_98e8 = add i32 %v1_98e8, 16
  %v3_98e8 = inttoptr i32 %v2_98e8 to i32*
  store i32 %v2_98e4, i32* %v3_98e8, align 4
  br label %dec_label_pc_b294

dec_label_pc_9918:                                ; preds = %thread-pre-split
  %v1_991c = add i32 %v3_97d4, 1456
  %v0_9924 = load i32, i32* %r8.global-to-local, align 4
  %v1_9924 = urem i32 %v0_9924, 256
  store i32 %v1_9924, i32* %r3.global-to-local, align 4
  %v1_9928 = add i32 %v3_97d4, 1464
  store i32 %v1_9928, i32* %r1.global-to-local, align 4
  %v2_992c = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_992c, i32* %r2.global-to-local, align 4
  store i32 %v1_991c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_994c.preheader

dec_label_pc_994c.preheader:                      ; preds = %dec_label_pc_9918, %dec_label_pc_b2b8
  %storemerge149.in.in = phi i32 [ %v0_b2cc, %dec_label_pc_b2b8 ], [ %v0_9924, %dec_label_pc_9918 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_b2c4, %dec_label_pc_b2b8 ], [ %v1_991c, %dec_label_pc_9918 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_b2cc, %dec_label_pc_b2b8 ], [ %v1_9924, %dec_label_pc_9918 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_b2d0, %dec_label_pc_b2b8 ], [ %v1_9928, %dec_label_pc_9918 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_b2d4, %dec_label_pc_b2b8 ], [ %v2_992c, %dec_label_pc_9918 ]
  %storemerge149.in = and i32 %storemerge149.in.in, 128
  %storemerge149 = icmp ne i32 %storemerge149.in, 0
  store i1 %storemerge149, i1* %cpsr_c.global-to-local, align 1
  %v3_b2dc = udiv i32 %storemerge149.in.in, 256
  store i32 %v3_b2dc, i32* %r8.global-to-local, align 4
  %v4_99b4 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_9af4 = ptrtoint i32* %stack_var_-148 to i32
  %v2_9b0c = ptrtoint i32* %stack_var_-40 to i32
  %v2_9b4c = ptrtoint i32* %stack_var_-72 to i32
  %tmp209 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_9b6c = ptrtoint i32* %stack_var_-36 to i32
  %v1_9d64 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_a0b8 = icmp slt i32 %v6_9624, 0
  %v2_a0b8 = icmp eq i32 %v6_9624, 0
  %v4_a10c = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_9fb4 = inttoptr i32 %v6_9624 to i8*
  %v2_9bd8 = ptrtoint i32* %stack_var_-56 to i32
  %v2_9bdc = ptrtoint i32* %stack_var_-200 to i32
  %tmp210 = bitcast i32* %stack_var_-200 to %_TYPEDEF_fd_set*
  %v2_9be0 = ptrtoint i32* %stack_var_-328 to i32
  %tmp211 = bitcast i32* %stack_var_-328 to %_TYPEDEF_fd_set*
  %tmp212 = bitcast i32* %stack_var_-56 to %timeval*
  %v2_a640 = add i32 %v2_9b6c, -20773
  %v2_9ccc = ptrtoint i32* %stack_var_-44 to i32
  %v2_9cd8 = ptrtoint i32* %stack_var_-48 to i32
  %v5_99b4 = or i32 %v4_99b4, %v3_b2dc
  %v1_99b8 = and i32 %v3_b2dc, 128
  %v2_99b8 = icmp ne i32 %v1_99b8, 0
  %v3_99b8254 = udiv i32 %v5_99b4, 256
  %v1_99c0 = add i32 %stack_var_-20872.0.ph, -1464
  %v1_99c8 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_99b8254, 16777216
  %v4_9b34 = sdiv i32 %sext, 16777216
  %sext11 = mul i32 %v3_b2dc, 16777216
  %v4_9b3c = sdiv i32 %sext11, 16777216
  %v2_9a00 = add i32 %v2_9af4, 112
  br label %dec_label_pc_994c

dec_label_pc_994c:                                ; preds = %dec_label_pc_9bb8, %dec_label_pc_9bb0, %dec_label_pc_9998, %dec_label_pc_9c5c, %dec_label_pc_994c.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9950 = call i32 @time(i32* null)
  store i32 %v2_9950, i32* %r0.global-to-local, align 4
  store i32 %v2_9950, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_9970262 = load i32, i32* @sp, align 4
  %v3_9970263 = add i32 %v2_9970262, 20684
  %v4_9970264 = inttoptr i32 %v3_9970263 to i32*
  store i32 0, i32* %v4_9970264, align 4
  br label %dec_label_pc_9960.dec_label_pc_9960_crit_edge

dec_label_pc_9960.dec_label_pc_9960_crit_edge:    ; preds = %dec_label_pc_994c, %dec_label_pc_9960.dec_label_pc_9960_crit_edge
  %v0_9960.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_9970.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_9964 = add i32 %v0_9960.pre, 4
  store i32 %v1_9964, i32* %r3.global-to-local, align 4
  %v1_9968 = add i32 %v0_9960.pre, 20684
  store i32 %v1_9968, i32* %ip.global-to-local, align 4
  %v7_996c = icmp eq i32 %v1_9964, 128
  %v2_9970 = load i32, i32* @sp, align 4
  %v3_9970 = add i32 %v2_9970, %v1_9968
  %v4_9970 = inttoptr i32 %v3_9970 to i32*
  store i32 %v0_9970.pre, i32* %v4_9970, align 4
  br i1 %v7_996c, label %dec_label_pc_9978, label %dec_label_pc_9960.dec_label_pc_9960_crit_edge

dec_label_pc_9978:                                ; preds = %dec_label_pc_9960.dec_label_pc_9960_crit_edge
  %v1_996c = add i32 %v0_9960.pre, -124
  %v6_996c = icmp slt i32 %v1_996c, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_996c, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_9978 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_9978, i32* %r0.global-to-local, align 4
  %v1_9984265 = add i32 %v0_9978, 4
  store i32 %v1_9984265, i32* %r3.global-to-local, align 4
  %v1_9988266 = add i32 %v0_9978, 20556
  store i32 %v1_9988266, i32* %lr.global-to-local, align 4
  %v7_998c267 = icmp eq i32 %v1_9984265, 128
  %v2_9990268 = load i32, i32* @sp, align 4
  %v3_9990269 = add i32 %v2_9990268, %v1_9988266
  %v4_9990270 = inttoptr i32 %v3_9990269 to i32*
  store i32 %v0_9978, i32* %v4_9990270, align 4
  br i1 %v7_998c267, label %dec_label_pc_9998, label %dec_label_pc_9980.dec_label_pc_9980_crit_edge

dec_label_pc_9980.dec_label_pc_9980_crit_edge:    ; preds = %dec_label_pc_9978, %dec_label_pc_9980.dec_label_pc_9980_crit_edge
  %v0_9980.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_9990.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_9984 = add i32 %v0_9980.pre, 4
  store i32 %v1_9984, i32* %r3.global-to-local, align 4
  %v1_9988 = add i32 %v0_9980.pre, 20556
  store i32 %v1_9988, i32* %lr.global-to-local, align 4
  %v7_998c = icmp eq i32 %v1_9984, 128
  %v2_9990 = load i32, i32* @sp, align 4
  %v3_9990 = add i32 %v2_9990, %v1_9988
  %v4_9990 = inttoptr i32 %v3_9990 to i32*
  store i32 %v0_9990.pre, i32* %v4_9990, align 4
  br i1 %v7_998c, label %dec_label_pc_9998, label %dec_label_pc_9980.dec_label_pc_9980_crit_edge

dec_label_pc_9998:                                ; preds = %dec_label_pc_9980.dec_label_pc_9980_crit_edge, %dec_label_pc_9978
  store i32 %v0_97c0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_97dc, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_97dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp208, label %dec_label_pc_994c, label %dec_label_pc_99a4

dec_label_pc_99a4:                                ; preds = %dec_label_pc_9998
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_99b4, i32* %r2.global-to-local, align 4
  store i1 %v2_99b8, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_99b8254, i32* %lr.global-to-local, align 4
  %v0_99bc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_99bc, i32* @sl, align 4
  store i32 %v1_99c0, i32* @r7, align 4
  store i32 %v0_99bc, i32* @r8, align 4
  store i32 %v1_99c8, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_9a74

dec_label_pc_99dc:                                ; preds = %dec_label_pc_9a80
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_99dc = icmp eq i8 %v3_9a74, 2
  store i1 %v7_99dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99dc, label %dec_label_pc_a18c, label %dec_label_pc_99e4

dec_label_pc_99e4:                                ; preds = %dec_label_pc_99dc
  %v2_99e4 = icmp ugt i8 %v3_9a74, 3
  store i1 %v2_99e4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99e4 = icmp ult i8 %v3_9a74, 4
  store i1 %v6_99e4, i1* %cpsr_n.global-to-local, align 1
  %v7_99e4 = icmp eq i8 %v3_9a74, 4
  store i1 %v7_99e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99e4, label %dec_label_pc_9d30, label %dec_label_pc_99ec

dec_label_pc_99ec:                                ; preds = %dec_label_pc_99e4
  %v2_99ec = icmp ugt i8 %v3_9a74, 5
  store i1 %v2_99ec, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99ec = icmp ult i8 %v3_9a74, 6
  store i1 %v6_99ec, i1* %cpsr_n.global-to-local, align 1
  %v7_99ec = icmp eq i8 %v3_9a74, 6
  store i1 %v7_99ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99ec, label %.thread25, label %dec_label_pc_9a0c

.thread25:                                        ; preds = %dec_label_pc_99ec
  %v2_99f0 = add i32 %v3_9d24, -1431
  %v3_99f0 = inttoptr i32 %v2_99f0 to i32*
  %v4_99f0 = load i32, i32* %v3_99f0, align 4
  store i32 %v4_99f0, i32* %r0.global-to-local, align 4
  %v4_99f8 = udiv i32 %v4_99f0, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_99fc = mul nuw nsw i32 %v4_99f8, 4
  store i32 %v2_9a00, i32* %r1.global-to-local, align 4
  %v3_9a04 = add i32 %v4_99fc, %v2_9a00
  store i32 %v3_9a04, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a16c

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_99ec
  %v2_9a0c = icmp ugt i8 %v3_9a74, 6
  store i1 %v2_9a0c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9a0c = icmp ult i8 %v3_9a74, 7
  store i1 %v6_9a0c, i1* %cpsr_n.global-to-local, align 1
  %v7_9a0c = icmp eq i8 %v3_9a74, 7
  store i1 %v7_9a0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9a0c, label %.thread36, label %dec_label_pc_9a2c

.thread36:                                        ; preds = %dec_label_pc_9a0c
  %v2_9a10 = add i32 %v3_9d24, -1431
  %v3_9a10 = inttoptr i32 %v2_9a10 to i32*
  %v4_9a10 = load i32, i32* %v3_9a10, align 4
  store i32 %v4_9a10, i32* %r0.global-to-local, align 4
  %v4_9a18 = udiv i32 %v4_9a10, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_9a1c = mul nuw nsw i32 %v4_9a18, 4
  store i32 %v2_9a00, i32* %r2.global-to-local, align 4
  %v3_9a24 = add i32 %v4_9a1c, %v2_9a00
  store i32 %v3_9a24, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a16c

dec_label_pc_9a2c:                                ; preds = %dec_label_pc_9a0c
  %v2_9a2c = icmp ugt i8 %v3_9a74, 9
  store i1 %v2_9a2c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9a2c = icmp ult i8 %v3_9a74, 10
  store i1 %v6_9a2c, i1* %cpsr_n.global-to-local, align 1
  %v7_9a2c = icmp eq i8 %v3_9a74, 10
  store i1 %v7_9a2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9a2c, label %dec_label_pc_a154, label %dec_label_pc_9a34

dec_label_pc_9a34:                                ; preds = %dec_label_pc_9a2c
  %v1_9a34 = add nsw i32 %v4_9a74, -11
  %v2_9a34 = icmp ugt i8 %v3_9a74, 10
  store i1 %v2_9a34, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9a34 = icmp ult i8 %v3_9a74, 11
  store i1 %v6_9a34, i1* %cpsr_n.global-to-local, align 1
  %v7_9a34 = icmp eq i8 %v3_9a74, 11
  store i1 %v7_9a34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9a34, label %dec_label_pc_acc8, label %dec_label_pc_9a3c

dec_label_pc_9a3c:                                ; preds = %dec_label_pc_a18c, %dec_label_pc_9a34
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_9a74, align 1
  %v0_9a44 = load i32, i32* @r6, align 4
  %v1_9a44 = add i32 %v0_9a44, -1431
  %v2_9a44 = inttoptr i32 %v1_9a44 to i32*
  %v3_9a44 = load i32, i32* %v2_9a44, align 4
  store i32 %v3_9a44, i32* %r0.global-to-local, align 4
  %v1_9a48 = call i32 @close(i32 %v3_9a44)
  store i32 %v1_9a48, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_9a50 = load i32, i32* @r6, align 4
  %v2_9a50 = add i32 %v1_9a50, -1431
  %v3_9a50 = inttoptr i32 %v2_9a50 to i32*
  store i32 -1, i32* %v3_9a50, align 4
  br label %dec_label_pc_9a54

dec_label_pc_9a54:                                ; preds = %dec_label_pc_a0f0, %dec_label_pc_a16c, %dec_label_pc_9b74, %dec_label_pc_9a88, %dec_label_pc_acc8, %dec_label_pc_9a3c
  store i32 %v0_97c0, i32* %lr.global-to-local, align 4
  %v0_9a58 = load i32, i32* @r8, align 4
  %v1_9a58 = add i32 %v0_9a58, 1
  store i32 %v1_9a58, i32* @r8, align 4
  %v0_9a5c = load i32, i32* @r7, align 4
  %v0_9a60 = load i32, i32* @r6, align 4
  %v2_9a64 = sub i32 %v0_97c0, %v1_9a58
  %v3_9a64 = icmp uge i32 %v0_97c0, %v1_9a58
  store i1 %v3_9a64, i1* %cpsr_c.global-to-local, align 1
  %v4_9a64 = xor i32 %v1_9a58, %v0_97c0
  %v5_9a64 = xor i32 %v2_9a64, %v0_97c0
  %v6_9a64 = and i32 %v5_9a64, %v4_9a64
  %v7_9a64 = icmp slt i32 %v6_9a64, 0
  store i1 %v7_9a64, i1* %cpsr_v.global-to-local, align 1
  %v8_9a64 = icmp slt i32 %v2_9a64, 0
  store i1 %v8_9a64, i1* %cpsr_n.global-to-local, align 1
  %v9_9a64 = icmp eq i32 %v0_97c0, %v1_9a58
  store i1 %v9_9a64, i1* %cpsr_z.global-to-local, align 1
  %v1_9a68 = add i32 %v0_9a5c, 3140
  store i32 %v1_9a68, i32* @r7, align 4
  %v1_9a6c = add i32 %v0_9a60, 3140
  store i32 %v1_9a6c, i32* @r6, align 4
  br i1 %v9_9a64, label %dec_label_pc_9a54.dec_label_pc_9bb0_crit_edge, label %dec_label_pc_9a74

dec_label_pc_9a54.dec_label_pc_9bb0_crit_edge:    ; preds = %dec_label_pc_9a54
  %v0_9bb0.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9bb0

dec_label_pc_9a74:                                ; preds = %dec_label_pc_9b90, %dec_label_pc_9a54, %dec_label_pc_99a4
  %v3_9d24 = phi i32 [ %v1_99c8, %dec_label_pc_99a4 ], [ %v1_9a6c, %dec_label_pc_9a54 ], [ %v1_9ba8, %dec_label_pc_9b90 ]
  %v1_9a74 = add i32 %v3_9d24, -1427
  %v2_9a74 = inttoptr i32 %v1_9a74 to i8*
  %v3_9a74 = load i8, i8* %v2_9a74, align 1
  %v4_9a74 = zext i8 %v3_9a74 to i32
  store i32 %v4_9a74, i32* %r3.global-to-local, align 4
  %v2_9a78 = icmp ne i8 %v3_9a74, 0
  store i1 %v2_9a78, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9a78 = icmp eq i8 %v3_9a74, 0
  store i1 %v6_9a78, i1* %cpsr_n.global-to-local, align 1
  %v7_9a78 = icmp eq i8 %v3_9a74, 1
  store i1 %v7_9a78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9a78, label %dec_label_pc_9d18, label %dec_label_pc_9a80

dec_label_pc_9a80:                                ; preds = %dec_label_pc_9a74
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_9a78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_9a78, label %dec_label_pc_9a88, label %dec_label_pc_99dc

dec_label_pc_9a88:                                ; preds = %.thread44.dec_label_pc_9a88_crit_edge, %dec_label_pc_9a80
  %v0_9a88 = phi i32 [ %v0_9a88.pre, %.thread44.dec_label_pc_9a88_crit_edge ], [ %v3_9d24, %dec_label_pc_9a80 ]
  %v1_9a88 = add i32 %v0_9a88, -1431
  %v2_9a88 = inttoptr i32 %v1_9a88 to i32*
  %v3_9a88 = load i32, i32* %v2_9a88, align 4
  store i32 %v3_9a88, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_9714, i32* %r1.global-to-local, align 4
  %v1_9a94 = add i32 %v3_9a88, 1
  %v2_9a94 = icmp eq i32 %v3_9a88, -1
  store i1 %v2_9a94, i1* %cpsr_c.global-to-local, align 1
  %v3_9a94 = sub i32 0, %v3_9a88
  %v4_9a94 = and i32 %v1_9a94, %v3_9a94
  %v5_9a94 = icmp slt i32 %v4_9a94, 0
  store i1 %v5_9a94, i1* %cpsr_v.global-to-local, align 1
  %v6_9a94 = icmp slt i32 %v1_9a94, 0
  store i1 %v6_9a94, i1* %cpsr_n.global-to-local, align 1
  %v7_9a94 = icmp eq i32 %v1_9a94, 0
  store i1 %v7_9a94, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  store i32 39596, i32* %lr.global-to-local, align 4
  %v1_9aa8 = xor i1 %v7_9a94, true
  call void @__pseudo_cond_branch(i1 %v1_9aa8, i32 ptrtoint (i32* @global_var_8d50.104 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_9ab4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_9ab4, i32* %r2.global-to-local, align 4
  %v3_9ab8 = call i32 @socket(i32 2, i32 1, i32 %v0_9ab4)
  store i32 %v3_9ab8, i32* %r0.global-to-local, align 4
  %v1_9abc = add i32 %v3_9ab8, 1
  %v2_9abc = icmp eq i32 %v3_9ab8, -1
  store i1 %v2_9abc, i1* %cpsr_c.global-to-local, align 1
  %v3_9abc = sub i32 0, %v3_9ab8
  %v4_9abc = and i32 %v1_9abc, %v3_9abc
  %v5_9abc = icmp slt i32 %v4_9abc, 0
  store i1 %v5_9abc, i1* %cpsr_v.global-to-local, align 1
  %v6_9abc = icmp slt i32 %v1_9abc, 0
  store i1 %v6_9abc, i1* %cpsr_n.global-to-local, align 1
  %v7_9abc = icmp eq i32 %v1_9abc, 0
  store i1 %v7_9abc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9ab8, i32* @r4, align 4
  %v1_9ac4 = load i32, i32* @r6, align 4
  %v2_9ac4 = add i32 %v1_9ac4, -1431
  %v3_9ac4 = inttoptr i32 %v2_9ac4 to i32*
  store i32 %v3_9ab8, i32* %v3_9ac4, align 4
  br i1 %v7_9abc, label %dec_label_pc_9a54, label %dec_label_pc_9acc

dec_label_pc_9acc:                                ; preds = %dec_label_pc_9a88
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_9ad0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_9ad0, i32* %r2.global-to-local, align 4
  %v0_9ad4 = load i32, i32* %r0.global-to-local, align 4
  %v2_9ad4 = call i32 (i32, i32, ...) @fcntl(i32 %v0_9ad4, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9adc = or i32 %v2_9ad4, 2048
  store i32 %v1_9adc, i32* %r2.global-to-local, align 4
  %v0_9ae0 = load i32, i32* @r4, align 4
  store i32 %v0_9ae0, i32* %r0.global-to-local, align 4
  %v2_9ae4 = call i32 (i32, i32, ...) @fcntl(i32 %v0_9ae0, i32 4)
  store i32 %v2_9ae4, i32* %r0.global-to-local, align 4
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_9af4, i32* %r3.global-to-local, align 4
  %v0_9af8 = load i32, i32* @r6, align 4
  %v1_9af8 = add i32 %v0_9af8, -1431
  %v2_9af8 = inttoptr i32 %v1_9af8 to i32*
  %v3_9af8 = load i32, i32* %v2_9af8, align 4
  store i32 %v3_9af8, i32* %r0.global-to-local, align 4
  %v0_9afc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_9afc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_9b0c, i32* %r3.global-to-local, align 4
  %v7_9b14 = call i32 @setsockopt(i32 %v3_9af8, i32 %v0_9afc, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_9b14, i32* %r0.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r6, align 4
  %v1_9b18 = add i32 %v0_9b18, -1415
  %v2_9b18 = inttoptr i32 %v1_9b18 to i32*
  %v3_9b18 = load i32, i32* %v2_9b18, align 4
  store i32 %v3_9b18, i32* %ip.global-to-local, align 4
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_9b28 = add i32 %v0_9b18, -1431
  %v2_9b28 = inttoptr i32 %v1_9b28 to i32*
  %v3_9b28 = load i32, i32* %v2_9b28, align 4
  store i32 %v3_9b28, i32* %r0.global-to-local, align 4
  %v3_9b30 = add i32 %v0_9b18, -1427
  %v4_9b30 = inttoptr i32 %v3_9b30 to i8*
  store i8 2, i8* %v4_9b30, align 1
  store i32 %v4_9b34, i32* %ip.global-to-local, align 4
  %v0_9b38 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_9b38, i32* %stack_var_-72, align 4
  store i32 %v4_9b3c, i32* %r3.global-to-local, align 4
  store i32 %v2_9b4c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9b54 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b54 = load i32, i32* @r6, align 4
  %v2_9b54 = add i32 %v1_9b54, -1423
  %v3_9b54 = inttoptr i32 %v2_9b54 to i32*
  store i32 %v0_9b54, i32* %v3_9b54, align 4
  %v5_9b58 = call i32 @connect(i32 %v3_9b28, %sockaddr* nonnull %tmp209, i32 16)
  store i32 %v5_9b58, i32* %r0.global-to-local, align 4
  %v0_9b5c = load i32, i32* @r6, align 4
  %v1_9b5c = add i32 %v0_9b5c, -1431
  %v2_9b5c = inttoptr i32 %v1_9b5c to i32*
  %v3_9b5c = load i32, i32* %v2_9b5c, align 4
  store i32 %v3_9b5c, i32* %r0.global-to-local, align 4
  %v3_9b64 = udiv i32 %v3_9b5c, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_9b68 = mul nuw nsw i32 %v3_9b64, 4
  store i32 %v3_9b68, i32* %r3.global-to-local, align 4
  store i32 %v2_9b6c, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_9b74

dec_label_pc_9b74:                                ; preds = %dec_label_pc_a19c, %dec_label_pc_9acc
  %v1_9b80 = phi i32 [ %v3_9b5c, %dec_label_pc_9acc ], [ %v3_a19c, %dec_label_pc_a19c ]
  %v3_9b68.pn = phi i32 [ %v3_9b68, %dec_label_pc_9acc ], [ %v3_a1a8, %dec_label_pc_a19c ]
  %storemerge = add i32 %v3_9b68.pn, %v2_9b6c
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_9b74 = add i32 %storemerge, -292
  %v2_9b74 = inttoptr i32 %v1_9b74 to i32*
  %v3_9b74 = load i32, i32* %v2_9b74, align 4
  %v1_9b78 = urem i32 %v1_9b80, 32
  store i32 %v1_9b78, i32* %r1.global-to-local, align 4
  %v1_9b7c = load i32, i32* %fp.global-to-local, align 4
  %v7_9b7c = shl i32 %v1_9b7c, %v1_9b78
  %v8_9b7c = or i32 %v7_9b7c, %v3_9b74
  store i32 %v8_9b7c, i32* %r2.global-to-local, align 4
  %v0_9b80 = load i32, i32* @sl, align 4
  %v2_9b80 = sub i32 %v0_9b80, %v1_9b80
  %v3_9b80 = icmp uge i32 %v0_9b80, %v1_9b80
  store i1 %v3_9b80, i1* %cpsr_c.global-to-local, align 1
  %v4_9b80 = xor i32 %v0_9b80, %v1_9b80
  %v5_9b80 = xor i32 %v2_9b80, %v0_9b80
  %v6_9b80 = and i32 %v5_9b80, %v4_9b80
  %v7_9b80 = icmp slt i32 %v6_9b80, 0
  store i1 %v7_9b80, i1* %cpsr_v.global-to-local, align 1
  %v8_9b80 = icmp slt i32 %v2_9b80, 0
  store i1 %v8_9b80, i1* %cpsr_n.global-to-local, align 1
  %v9_9b80 = icmp eq i32 %v0_9b80, %v1_9b80
  store i1 %v9_9b80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_9b7c, i32* %v2_9b74, align 4
  %v2_9b88 = xor i1 %v8_9b80, %v7_9b80
  br i1 %v2_9b88, label %dec_label_pc_9b8c, label %dec_label_pc_9a54

dec_label_pc_9b8c:                                ; preds = %dec_label_pc_9b74
  %v0_9b8c = load i32, i32* %r0.global-to-local, align 4
  %v1_9b8c = add i32 %v0_9b8c, 1
  store i32 %v1_9b8c, i32* @sl, align 4
  br label %dec_label_pc_9b90

dec_label_pc_9b90:                                ; preds = %dec_label_pc_a184, %dec_label_pc_a14c, %dec_label_pc_9b8c
  %v0_9bb099 = phi i32 [ %v1_a184, %dec_label_pc_a184 ], [ %v1_a14c, %dec_label_pc_a14c ], [ %v1_9b8c, %dec_label_pc_9b8c ]
  store i32 %v0_97c0, i32* %lr.global-to-local, align 4
  %v0_9b94 = load i32, i32* @r8, align 4
  %v1_9b94 = add i32 %v0_9b94, 1
  store i32 %v1_9b94, i32* @r8, align 4
  %v0_9b98 = load i32, i32* @r7, align 4
  %v0_9b9c = load i32, i32* @r6, align 4
  %v2_9ba0 = sub i32 %v0_97c0, %v1_9b94
  %v3_9ba0 = icmp uge i32 %v0_97c0, %v1_9b94
  store i1 %v3_9ba0, i1* %cpsr_c.global-to-local, align 1
  %v4_9ba0 = xor i32 %v1_9b94, %v0_97c0
  %v5_9ba0 = xor i32 %v2_9ba0, %v0_97c0
  %v6_9ba0 = and i32 %v5_9ba0, %v4_9ba0
  %v7_9ba0 = icmp slt i32 %v6_9ba0, 0
  store i1 %v7_9ba0, i1* %cpsr_v.global-to-local, align 1
  %v8_9ba0 = icmp slt i32 %v2_9ba0, 0
  store i1 %v8_9ba0, i1* %cpsr_n.global-to-local, align 1
  %v9_9ba0 = icmp eq i32 %v0_97c0, %v1_9b94
  store i1 %v9_9ba0, i1* %cpsr_z.global-to-local, align 1
  %v1_9ba4 = add i32 %v0_9b98, 3140
  store i32 %v1_9ba4, i32* @r7, align 4
  %v1_9ba8 = add i32 %v0_9b9c, 3140
  store i32 %v1_9ba8, i32* @r6, align 4
  br i1 %v9_9ba0, label %dec_label_pc_9bb0, label %dec_label_pc_9a74

dec_label_pc_9bb0:                                ; preds = %dec_label_pc_9b90, %dec_label_pc_9a54.dec_label_pc_9bb0_crit_edge
  %v0_9be8 = phi i32 [ %v0_9bb0.pre, %dec_label_pc_9a54.dec_label_pc_9bb0_crit_edge ], [ %v0_9bb099, %dec_label_pc_9b90 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9bb0 = icmp slt i32 %v0_9be8, 0
  store i1 %v1_9bb0, i1* %cpsr_n.global-to-local, align 1
  %v2_9bb0 = icmp eq i32 %v0_9be8, 0
  store i1 %v2_9bb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9bb0, label %dec_label_pc_994c, label %dec_label_pc_9bb8

dec_label_pc_9bb8:                                ; preds = %dec_label_pc_9bb0
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_9bd8, i32* %ip.global-to-local, align 4
  store i32 %v2_9bdc, i32* %r1.global-to-local, align 4
  store i32 %v2_9be0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_9be8, i32* %r0.global-to-local, align 4
  %v13_9bf0 = call i32 @select(i32 %v0_9be8, %_TYPEDEF_fd_set* %tmp210, %_TYPEDEF_fd_set* %tmp211, %_TYPEDEF_fd_set* null, %timeval* %tmp212)
  store i32 %v13_9bf0, i32* @r4, align 4
  %v0_9bf8 = load i32, i32* @r5, align 4
  store i32 %v0_9bf8, i32* %r0.global-to-local, align 4
  %v1_9bfc = inttoptr i32 %v0_9bf8 to i32*
  %v2_9bfc = call i32 @time(i32* %v1_9bfc)
  store i32 %v2_9bfc, i32* %r0.global-to-local, align 4
  %v0_9c00 = load i32, i32* @r4, align 4
  %v1_9c00 = load i32, i32* @r5, align 4
  %v2_9c00 = sub i32 %v0_9c00, %v1_9c00
  %v3_9c00 = icmp uge i32 %v0_9c00, %v1_9c00
  store i1 %v3_9c00, i1* %cpsr_c.global-to-local, align 1
  %v4_9c00 = xor i32 %v1_9c00, %v0_9c00
  %v5_9c00 = xor i32 %v2_9c00, %v0_9c00
  %v6_9c00 = and i32 %v5_9c00, %v4_9c00
  %v7_9c00 = icmp slt i32 %v6_9c00, 0
  store i1 %v7_9c00, i1* %cpsr_v.global-to-local, align 1
  %v8_9c00 = icmp slt i32 %v2_9c00, 0
  store i1 %v8_9c00, i1* %cpsr_n.global-to-local, align 1
  %v9_9c00 = icmp eq i32 %v0_9c00, %v1_9c00
  store i1 %v9_9c00, i1* %cpsr_z.global-to-local, align 1
  %v7_9c08 = icmp sgt i32 %v0_9c00, %v1_9c00
  br i1 %v7_9c08, label %dec_label_pc_9c0c, label %dec_label_pc_994c

dec_label_pc_9c0c:                                ; preds = %dec_label_pc_9bb8
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_9c7c

dec_label_pc_9c18:                                ; preds = %.thread39.dec_label_pc_9c18_crit_edge, %dec_label_pc_9c8c
  %v0_9c30 = phi i32 [ %v0_9c18.pre, %.thread39.dec_label_pc_9c18_crit_edge ], [ %v3_9c7c, %dec_label_pc_9c8c ]
  %v3_9c18 = udiv i32 %v0_9c30, 32
  store i32 %v2_9b6c, i32* %r2.global-to-local, align 4
  %v3_9c24 = mul nuw nsw i32 %v3_9c18, 4
  %v2_9c28 = add i32 %v3_9c24, %v2_9b6c
  store i32 %v2_9c28, i32* %r3.global-to-local, align 4
  %v1_9c2c = add i32 %v2_9c28, -164
  %v2_9c2c = inttoptr i32 %v1_9c2c to i32*
  %v3_9c2c = load i32, i32* %v2_9c2c, align 4
  %v1_9c30 = urem i32 %v0_9c30, 32
  store i32 %v1_9c30, i32* %r1.global-to-local, align 4
  %v2_9c34 = add nsw i32 %v1_9c30, -1
  %v3_9c34 = shl i32 1, %v2_9c34
  %v4_9c34 = and i32 %v3_9c34, %v3_9c2c
  %v5_9c34 = icmp ne i32 %v4_9c34, 0
  store i1 %v5_9c34, i1* %cpsr_c.global-to-local, align 1
  %v6_9c34 = lshr i32 %v3_9c2c, %v1_9c30
  store i32 %v6_9c34, i32* %r2.global-to-local, align 4
  %v1_9c38 = urem i32 %v6_9c34, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9c38 = icmp eq i32 %v1_9c38, 0
  store i1 %v2_9c38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9c38, label %dec_label_pc_9c5c, label %dec_label_pc_9c40

dec_label_pc_9c40:                                ; preds = %dec_label_pc_9c18
  %v0_9c40 = load i32, i32* @r8, align 4
  %v1_9c40 = add i32 %v0_9c40, -1452
  %v2_9c40 = inttoptr i32 %v1_9c40 to i8*
  %v3_9c40 = load i8, i8* %v2_9c40, align 1
  %v4_9c40 = zext i8 %v3_9c40 to i32
  store i32 %v4_9c40, i32* %r3.global-to-local, align 4
  %v2_9c44 = icmp ugt i8 %v3_9c40, 5
  store i1 %v2_9c44, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c44 = icmp ult i8 %v3_9c40, 6
  store i1 %v6_9c44, i1* %cpsr_n.global-to-local, align 1
  %v7_9c44 = icmp eq i8 %v3_9c40, 6
  store i1 %v7_9c44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c44, label %dec_label_pc_a1f4, label %dec_label_pc_9c4c

dec_label_pc_9c4c:                                ; preds = %dec_label_pc_9c40
  %v2_9c4c = icmp ugt i8 %v3_9c40, 6
  store i1 %v2_9c4c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c4c = icmp ult i8 %v3_9c40, 7
  store i1 %v6_9c4c, i1* %cpsr_n.global-to-local, align 1
  %v7_9c4c = icmp eq i8 %v3_9c40, 7
  store i1 %v7_9c4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c4c, label %dec_label_pc_a830, label %dec_label_pc_9c54

dec_label_pc_9c54:                                ; preds = %dec_label_pc_9c4c
  %v2_9c54 = icmp ugt i8 %v3_9c40, 9
  store i1 %v2_9c54, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c54 = icmp ult i8 %v3_9c40, 10
  store i1 %v6_9c54, i1* %cpsr_n.global-to-local, align 1
  %v7_9c54 = icmp eq i8 %v3_9c40, 10
  store i1 %v7_9c54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c54, label %dec_label_pc_aa40, label %dec_label_pc_9c5c

dec_label_pc_9c5c:                                ; preds = %dec_label_pc_a934, %dec_label_pc_ad74, %dec_label_pc_aebc, %dec_label_pc_ad38, %dec_label_pc_9c54, %dec_label_pc_9c18, %dec_label_pc_9c7c, %dec_label_pc_b1a8, %dec_label_pc_af58, %dec_label_pc_aea0, %dec_label_pc_ad58, %dec_label_pc_ad20, %dec_label_pc_aca8, %dec_label_pc_aa80, %dec_label_pc_a824, %dec_label_pc_9d00
  store i32 %v0_97c0, i32* %r3.global-to-local, align 4
  %v1_9c64 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_9c64, i32* %r2.global-to-local, align 4
  %v0_9c68 = load i32, i32* @r8, align 4
  %v2_9c6c = sub i32 %v1_9c64, %v0_97c0
  %v3_9c6c = icmp uge i32 %v1_9c64, %v0_97c0
  store i1 %v3_9c6c, i1* %cpsr_c.global-to-local, align 1
  %v4_9c6c = xor i32 %v1_9c64, %v0_97c0
  %v5_9c6c = xor i32 %v2_9c6c, %v1_9c64
  %v6_9c6c = and i32 %v5_9c6c, %v4_9c6c
  %v7_9c6c = icmp slt i32 %v6_9c6c, 0
  store i1 %v7_9c6c, i1* %cpsr_v.global-to-local, align 1
  %v8_9c6c = icmp slt i32 %v2_9c6c, 0
  store i1 %v8_9c6c, i1* %cpsr_n.global-to-local, align 1
  %v9_9c6c = icmp eq i32 %v1_9c64, %v0_97c0
  store i1 %v9_9c6c, i1* %cpsr_z.global-to-local, align 1
  %v1_9c74 = add i32 %v0_9c68, 3140
  store i32 %v1_9c74, i32* @r8, align 4
  br i1 %v9_9c6c, label %dec_label_pc_994c, label %dec_label_pc_9c7c

dec_label_pc_9c7c:                                ; preds = %dec_label_pc_9c5c, %dec_label_pc_9c0c
  %v0_9c84 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_9c0c ], [ %v1_9c74, %dec_label_pc_9c5c ]
  %stack_var_-20832.0 = phi i32 [ %v1_9c00, %dec_label_pc_9c0c ], [ %v1_9c64, %dec_label_pc_9c5c ]
  %v1_9c7c = add i32 %v0_9c84, -1456
  %v2_9c7c = inttoptr i32 %v1_9c7c to i32*
  %v3_9c7c = load i32, i32* %v2_9c7c, align 4
  store i32 %v3_9c7c, i32* %r0.global-to-local, align 4
  %v1_9c80 = add i32 %v3_9c7c, 1
  %v2_9c80 = icmp eq i32 %v3_9c7c, -1
  store i1 %v2_9c80, i1* %cpsr_c.global-to-local, align 1
  %v3_9c80 = sub i32 0, %v3_9c7c
  %v4_9c80 = and i32 %v1_9c80, %v3_9c80
  %v5_9c80 = icmp slt i32 %v4_9c80, 0
  store i1 %v5_9c80, i1* %cpsr_v.global-to-local, align 1
  %v6_9c80 = icmp slt i32 %v1_9c80, 0
  store i1 %v6_9c80, i1* %cpsr_n.global-to-local, align 1
  %v7_9c80 = icmp eq i32 %v1_9c80, 0
  store i1 %v7_9c80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9c7c, i32* %sb.global-to-local, align 4
  br i1 %v7_9c80, label %dec_label_pc_9c5c, label %dec_label_pc_9c8c

dec_label_pc_9c8c:                                ; preds = %dec_label_pc_9c7c
  %v3_9c8c = udiv i32 %v3_9c7c, 32
  %v3_9c94 = mul nuw nsw i32 %v3_9c8c, 4
  store i32 %v2_9b6c, i32* %lr.global-to-local, align 4
  %v2_9c9c = add i32 %v3_9c94, %v2_9b6c
  store i32 %v2_9c9c, i32* %r3.global-to-local, align 4
  %v1_9ca0 = add i32 %v2_9c9c, -292
  %v2_9ca0 = inttoptr i32 %v1_9ca0 to i32*
  %v3_9ca0 = load i32, i32* %v2_9ca0, align 4
  %v1_9ca4 = urem i32 %v3_9c7c, 32
  store i32 %v1_9ca4, i32* %r1.global-to-local, align 4
  %v2_9ca8 = add nsw i32 %v1_9ca4, -1
  %v3_9ca8 = shl i32 1, %v2_9ca8
  %v4_9ca8 = and i32 %v3_9ca0, %v3_9ca8
  %v5_9ca8 = icmp ne i32 %v4_9ca8, 0
  store i1 %v5_9ca8, i1* %cpsr_c.global-to-local, align 1
  %v6_9ca8 = lshr i32 %v3_9ca0, %v1_9ca4
  store i32 %v6_9ca8, i32* %r2.global-to-local, align 4
  %v1_9cac = urem i32 %v6_9ca8, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9cac = icmp eq i32 %v1_9cac, 0
  store i1 %v2_9cac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9cac, label %dec_label_pc_9c18, label %dec_label_pc_9cb4

dec_label_pc_9cb4:                                ; preds = %dec_label_pc_9c8c
  store i32 4, i32* @r4, align 4
  store i32 %v10_9714, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_9ccc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_9cd8, i32* %lr.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v8_9ce4 = call i32 @getsockopt(i32 %v3_9c7c, i32 1, i32 4, i32* nonnull %stack_var_-44, i32* nonnull %stack_var_-48)
  store i32 %v10_9714, i32* %r1.global-to-local, align 4
  %v3_9cec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9cec, i32* %r3.global-to-local, align 4
  %v2_9cf0 = or i32 %v3_9cec, %v8_9ce4
  store i32 %v2_9cf0, i32* %r0.global-to-local, align 4
  %v3_9cf0 = icmp slt i32 %v2_9cf0, 0
  store i1 %v3_9cf0, i1* %cpsr_n.global-to-local, align 1
  %v4_9cf0 = icmp eq i32 %v2_9cf0, 0
  store i1 %v4_9cf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_9cf0, label %.thread39, label %dec_label_pc_9d00

.thread39:                                        ; preds = %dec_label_pc_9cb4
  %v1_9cf4 = load i32, i32* @r8, align 4
  %v2_9cf4 = add i32 %v1_9cf4, -1456
  %v3_9cf4 = inttoptr i32 %v2_9cf4 to i32*
  %v4_9cf4 = load i32, i32* %v3_9cf4, align 4
  store i32 %v4_9cf4, i32* %r0.global-to-local, align 4
  %v1_9cf8 = load i32, i32* @r4, align 4
  %v2_9cf8 = trunc i32 %v1_9cf8 to i8
  %v4_9cf8 = add i32 %v1_9cf4, -1452
  %v5_9cf8 = inttoptr i32 %v4_9cf8 to i8*
  store i8 %v2_9cf8, i8* %v5_9cf8, align 1
  %v0_9cfc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9cfc.pr.pr, label %.thread39.dec_label_pc_9c18_crit_edge, label %dec_label_pc_9d00

.thread39.dec_label_pc_9c18_crit_edge:            ; preds = %.thread39
  %v0_9c18.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c18

dec_label_pc_9d00:                                ; preds = %dec_label_pc_9cb4, %.thread39
  %v0_9d00 = load i32, i32* @r8, align 4
  %v1_9d00 = add i32 %v0_9d00, -1456
  %v2_9d00 = inttoptr i32 %v1_9d00 to i32*
  %v3_9d00 = load i32, i32* %v2_9d00, align 4
  store i32 %v3_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = call i32 @close(i32 %v3_9d00)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_9d0c = load i32, i32* @r8, align 4
  %v2_9d0c = add i32 %v1_9d0c, -1456
  %v3_9d0c = inttoptr i32 %v2_9d0c to i32*
  store i32 -1, i32* %v3_9d0c, align 4
  %v0_9d10 = load i32, i32* @r5, align 4
  %v1_9d10 = trunc i32 %v0_9d10 to i8
  %v2_9d10 = load i32, i32* @r8, align 4
  %v3_9d10 = add i32 %v2_9d10, -1452
  %v4_9d10 = inttoptr i32 %v3_9d10 to i8*
  store i8 %v1_9d10, i8* %v4_9d10, align 1
  br label %dec_label_pc_9c5c

dec_label_pc_9d18:                                ; preds = %dec_label_pc_9a74
  %v1_9d18 = add i32 %v3_9d24, 25
  %v2_9d18 = inttoptr i32 %v1_9d18 to i32*
  %v3_9d18 = load i32, i32* %v2_9d18, align 4
  store i32 %v3_9d18, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d1c = icmp slt i32 %v3_9d18, 0
  store i1 %v1_9d1c, i1* %cpsr_n.global-to-local, align 1
  %v2_9d1c = icmp eq i32 %v3_9d18, 0
  store i1 %v2_9d1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d1c, label %.thread44, label %.thread42

.thread42:                                        ; preds = %dec_label_pc_9d18
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_9a74, align 1
  %v0_9d28.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d28.pr.pr, label %.thread42..thread44_crit_edge, label %dec_label_pc_9d30

.thread42..thread44_crit_edge:                    ; preds = %.thread42
  %v1_9d28.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_9d28.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_9d28.pre to i8
  br label %.thread44

.thread44:                                        ; preds = %.thread42..thread44_crit_edge, %dec_label_pc_9d18
  %v3_9d28 = phi i32 [ %v3_9d28.pre, %.thread42..thread44_crit_edge ], [ %v3_9d24, %dec_label_pc_9d18 ]
  %v1_9d28.off0 = phi i8 [ %extract.t, %.thread42..thread44_crit_edge ], [ 0, %dec_label_pc_9d18 ]
  %v4_9d28 = add i32 %v3_9d28, -1427
  %v5_9d28 = inttoptr i32 %v4_9d28 to i8*
  store i8 %v1_9d28.off0, i8* %v5_9d28, align 1
  %v0_9d2c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d2c.pr, label %.thread44.dec_label_pc_9a88_crit_edge, label %dec_label_pc_9d30

.thread44.dec_label_pc_9a88_crit_edge:            ; preds = %.thread44
  %v0_9a88.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9a88

dec_label_pc_9d30:                                ; preds = %.thread42, %.thread44, %dec_label_pc_99e4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_9d38 = load i32, i32* @r7, align 4
  %v1_9d38 = add i32 %v0_9d38, 2112
  store i32 %v1_9d38, i32* %r0.global-to-local, align 4
  %v1_9d3c = load i32, i32* @r6, align 4
  %v2_9d3c = add i32 %v1_9d3c, 33
  %v3_9d3c = inttoptr i32 %v2_9d3c to i32*
  store i32 -1, i32* %v3_9d3c, align 4
  %v0_9d40 = load i32, i32* %r0.global-to-local, align 4
  %v1_9d40 = add i32 %v0_9d40, 4
  store i32 %v1_9d40, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_9d48 = load i32, i32* @r5, align 4
  %v1_9d48 = load i32, i32* @r6, align 4
  %v2_9d48 = add i32 %v1_9d48, 21
  %v3_9d48 = inttoptr i32 %v2_9d48 to i32*
  store i32 %v0_9d48, i32* %v3_9d48, align 4
  %v2_9d4c = call i32 @function_12ddc(i32 %v1_9d40, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_9d58 = load i32, i32* @r5, align 4
  %v1_9d58 = load i32, i32* @r6, align 4
  %v2_9d58 = add i32 %v1_9d58, 681
  %v3_9d58 = inttoptr i32 %v2_9d58 to i32*
  store i32 %v0_9d58, i32* %v3_9d58, align 4
  %v2_9d5c = call i32 @function_12ddc(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9d64 = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_9d6c = load i32, i32* @r6, align 4
  store i32 %v0_9d6c, i32* %r1.global-to-local, align 4
  %v2_9d70 = add i32 %v2_9d64, %stack_var_-20856.0.ph
  store i32 %v2_9d70, i32* @r0, align 4
  %v2_9d74 = inttoptr i32 %v2_9d70 to i8*
  %v3_9d74 = call i32 @function_12d64(i8* %v2_9d74, i32 %v0_9d6c)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9d7c = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13694.106 to i32), i32* %r1.global-to-local, align 4
  %v2_9d88 = add i32 %v2_9d7c, %stack_var_-20856.0.ph
  store i32 %v2_9d88, i32* @r0, align 4
  %v2_9d8c = inttoptr i32 %v2_9d88 to i8*
  %v3_9d8c = call i32 @function_12d64(i8* %v2_9d8c, i32 ptrtoint (i32* @global_var_13694.106 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9d94 = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_9d9c = load i32, i32* @r7, align 4
  %v1_9d9c = add i32 %v0_9d9c, 532
  store i32 %v1_9d9c, i32* %r1.global-to-local, align 4
  %v2_9da0 = add i32 %v2_9d94, %stack_var_-20856.0.ph
  store i32 %v2_9da0, i32* @r0, align 4
  %v2_9da4 = inttoptr i32 %v2_9da0 to i8*
  %v3_9da4 = call i32 @function_12d64(i8* %v2_9da4, i32 %v1_9d9c)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9dac = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_1366c.108 to i32), i32* %r1.global-to-local, align 4
  %v2_9db8 = add i32 %v2_9dac, %stack_var_-20856.0.ph
  store i32 %v2_9db8, i32* @r0, align 4
  %v3_9dbc = inttoptr i32 %v2_9db8 to i8*
  %v4_9dbc = call i32 @function_12d64(i8* %v3_9dbc, i32 ptrtoint ([24 x i8]* @global_var_1366c.108 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9dc4 = call i32 @function_12d3c(i8* %v1_9d64)
  %v2_9dcc = add i32 %v2_9dc4, %stack_var_-20856.0.ph
  store i32 %v2_9dcc, i32* @r0, align 4
  %v0_9dd0 = load i32, i32* @r7, align 4
  %v1_9dd0 = add i32 %v0_9dd0, 20
  store i32 %v1_9dd0, i32* %r1.global-to-local, align 4
  %v2_9dd4 = inttoptr i32 %v2_9dcc to i8*
  %v3_9dd4 = call i32 @function_12d64(i8* %v2_9dd4, i32 %v1_9dd0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9ddc = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13684.110 to i32), i32* %r1.global-to-local, align 4
  %v2_9de8 = add i32 %v2_9ddc, %stack_var_-20856.0.ph
  store i32 %v2_9de8, i32* @r0, align 4
  %v3_9dec = inttoptr i32 %v2_9de8 to i8*
  %v4_9dec = call i32 @function_12d64(i8* %v3_9dec, i32 ptrtoint ([9 x i8]* @global_var_13684.110 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9df4 = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_9dfc = load i32, i32* @r7, align 4
  %v2_9e00 = add i32 %v2_9df4, %stack_var_-20856.0.ph
  store i32 %v2_9e00, i32* @r0, align 4
  %v1_9e04 = add i32 %v0_9dfc, 789
  store i32 %v1_9e04, i32* %r1.global-to-local, align 4
  %v2_9e08 = inttoptr i32 %v2_9e00 to i8*
  %v3_9e08 = call i32 @function_12d64(i8* %v2_9e08, i32 %v1_9e04)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9e10 = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  %v2_9e1c = add i32 %v2_9e10, %stack_var_-20856.0.ph
  store i32 %v2_9e1c, i32* @r0, align 4
  %v2_9e20 = inttoptr i32 %v2_9e1c to i8*
  %v3_9e20 = call i32 @function_12d64(i8* %v2_9e20, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32))
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_9e28 = call i32 @function_12288(i32 39)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9e30 = call i32 @function_12d3c(i8* %v1_9d64)
  %v0_9e34 = load i32, i32* @r5, align 4
  store i32 %v0_9e34, i32* %r1.global-to-local, align 4
  store i32 %v2_9e30, i32* @r4, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_9e40 = inttoptr i32 %v0_9e34 to i32*
  %v3_9e40 = call i32 @function_121a4(i32 39, i32* %v2_9e40)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_9e40, i32* %r1.global-to-local, align 4
  %v1_9e4c = load i32, i32* @r4, align 4
  %v2_9e4c = add i32 %v1_9e4c, %stack_var_-20856.0.ph
  store i32 %v2_9e4c, i32* @r0, align 4
  %v2_9e50 = inttoptr i32 %v2_9e4c to i8*
  %v3_9e50 = call i32 @function_12d64(i8* %v2_9e50, i32 %v3_9e40)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_9e58 = call i32 @function_121d0(i32 39)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9e60 = call i32 @function_12d3c(i8* %v1_9d64)
  %v2_9e68 = add i32 %v2_9e60, %stack_var_-20856.0.ph
  store i32 %v2_9e68, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  %v2_9e70 = inttoptr i32 %v2_9e68 to i8*
  %v3_9e70 = call i32 @function_12d64(i8* %v2_9e70, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32))
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_9e78 = call i32 @function_12288(i32 40)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9e80 = call i32 @function_12d3c(i8* %v1_9d64)
  %v0_9e84 = load i32, i32* @r5, align 4
  store i32 %v0_9e84, i32* %r1.global-to-local, align 4
  store i32 %v2_9e80, i32* @r4, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_9e90 = inttoptr i32 %v0_9e84 to i32*
  %v3_9e90 = call i32 @function_121a4(i32 40, i32* %v2_9e90)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_9e90, i32* %r1.global-to-local, align 4
  %v1_9e9c = load i32, i32* @r4, align 4
  %v2_9e9c = add i32 %v1_9e9c, %stack_var_-20856.0.ph
  store i32 %v2_9e9c, i32* @r0, align 4
  %v2_9ea0 = inttoptr i32 %v2_9e9c to i8*
  %v3_9ea0 = call i32 @function_12d64(i8* %v2_9ea0, i32 %v3_9e90)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_9ea8 = call i32 @function_121d0(i32 40)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9eb0 = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  %v2_9ebc = add i32 %v2_9eb0, %stack_var_-20856.0.ph
  store i32 %v2_9ebc, i32* @r0, align 4
  %v2_9ec0 = inttoptr i32 %v2_9ebc to i8*
  %v3_9ec0 = call i32 @function_12d64(i8* %v2_9ec0, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32))
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_9ec8 = call i32 @function_12288(i32 41)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9ed0 = call i32 @function_12d3c(i8* %v1_9d64)
  %v0_9ed4 = load i32, i32* @r5, align 4
  store i32 %v0_9ed4, i32* %r1.global-to-local, align 4
  store i32 %v2_9ed0, i32* @r4, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_9ee0 = inttoptr i32 %v0_9ed4 to i32*
  %v3_9ee0 = call i32 @function_121a4(i32 41, i32* %v2_9ee0)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_9ee0, i32* %r1.global-to-local, align 4
  %v1_9eec = load i32, i32* @r4, align 4
  %v2_9eec = add i32 %v1_9eec, %stack_var_-20856.0.ph
  store i32 %v2_9eec, i32* @r0, align 4
  %v2_9ef0 = inttoptr i32 %v2_9eec to i8*
  %v3_9ef0 = call i32 @function_12d64(i8* %v2_9ef0, i32 %v3_9ee0)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_121d0(i32 41)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9f00 = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  %v2_9f0c = add i32 %v2_9f00, %stack_var_-20856.0.ph
  store i32 %v2_9f0c, i32* @r0, align 4
  %v2_9f10 = inttoptr i32 %v2_9f0c to i8*
  %v3_9f10 = call i32 @function_12d64(i8* %v2_9f10, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32))
  store i32 %v3_9f10, i32* %r0.global-to-local, align 4
  store i32 %v6_9624, i32* %r1.global-to-local, align 4
  %v1_9f18 = load i32, i32* @r5, align 4
  %v2_9f18 = sub i32 %v6_9624, %v1_9f18
  %v3_9f18 = icmp uge i32 %v6_9624, %v1_9f18
  store i1 %v3_9f18, i1* %cpsr_c.global-to-local, align 1
  %v4_9f18 = xor i32 %v1_9f18, %v6_9624
  %v5_9f18 = xor i32 %v2_9f18, %v6_9624
  %v6_9f18 = and i32 %v5_9f18, %v4_9f18
  %v7_9f18 = icmp slt i32 %v6_9f18, 0
  store i1 %v7_9f18, i1* %cpsr_v.global-to-local, align 1
  %v8_9f18 = icmp slt i32 %v2_9f18, 0
  store i1 %v8_9f18, i1* %cpsr_n.global-to-local, align 1
  %v9_9f18 = icmp eq i32 %v6_9624, %v1_9f18
  store i1 %v9_9f18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9f18, label %dec_label_pc_9ff0, label %dec_label_pc_9f20

dec_label_pc_9f20:                                ; preds = %dec_label_pc_9d30
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_9f24 = call i32 @function_12288(i32 42)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9f2c = call i32 @function_12d3c(i8* %v1_9d64)
  %v0_9f30 = load i32, i32* @r5, align 4
  store i32 %v0_9f30, i32* %r1.global-to-local, align 4
  store i32 %v2_9f2c, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_9f3c = inttoptr i32 %v0_9f30 to i32*
  %v3_9f3c = call i32 @function_121a4(i32 42, i32* %v2_9f3c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_9f3c, i32* %r1.global-to-local, align 4
  %v1_9f48 = load i32, i32* @r4, align 4
  %v2_9f48 = add i32 %v1_9f48, %stack_var_-20856.0.ph
  store i32 %v2_9f48, i32* @r0, align 4
  %v2_9f4c = inttoptr i32 %v2_9f48 to i8*
  %v3_9f4c = call i32 @function_12d64(i8* %v2_9f4c, i32 %v3_9f3c)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_9f54 = call i32 @function_121d0(i32 42)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9f5c = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  %v2_9f68 = add i32 %v2_9f5c, %stack_var_-20856.0.ph
  store i32 %v2_9f68, i32* @r0, align 4
  %v2_9f6c = inttoptr i32 %v2_9f68 to i8*
  %v3_9f6c = call i32 @function_12d64(i8* %v2_9f6c, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9f74 = call i32 @function_12d3c(i8* %v1_9d64)
  %v0_9f78 = load i32, i32* @r5, align 4
  store i32 %v0_9f78, i32* %r1.global-to-local, align 4
  store i32 %v2_9f74, i32* %r4.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v2_9f84 = inttoptr i32 %v0_9f78 to i32*
  %v3_9f84 = call i32 @function_121a4(i32 47, i32* %v2_9f84)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_9f84, i32* %r1.global-to-local, align 4
  %v2_9f90 = add i32 %v2_9f74, %stack_var_-20856.0.ph
  store i32 %v2_9f90, i32* @r0, align 4
  %v2_9f94 = inttoptr i32 %v2_9f90 to i8*
  %v3_9f94 = call i32 @function_12d64(i8* %v2_9f94, i32 %v3_9f84)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9f9c = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13694.106 to i32), i32* %r1.global-to-local, align 4
  %v2_9fa8 = add i32 %v2_9f9c, %stack_var_-20856.0.ph
  store i32 %v2_9fa8, i32* @r0, align 4
  %v2_9fac = inttoptr i32 %v2_9fa8 to i8*
  %v3_9fac = call i32 @function_12d64(i8* %v2_9fac, i32 ptrtoint (i32* @global_var_13694.106 to i32))
  store i32 %v6_9624, i32* %r0.global-to-local, align 4
  %v2_9fb4 = call i32 @function_12d3c(i8* %v1_9fb4)
  store i32 %v2_9fb4, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9fc0 = call i32 @function_12d3c(i8* %v1_9d64)
  %v2_9fc8 = add i32 %v2_9fc0, %stack_var_-20856.0.ph
  store i32 %v2_9fc8, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_9fd0 = load i32, i32* @r4, align 4
  store i32 %v0_9fd0, i32* %r0.global-to-local, align 4
  %v3_9fd4 = trunc i32 %v0_9fd0 to i8
  %v4_9fd4 = call i32 @function_13230(i8 %v3_9fd4, i32 10, i32 %v2_9fc8)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_9fdc = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  %v2_9fe8 = add i32 %v2_9fdc, %stack_var_-20856.0.ph
  store i32 %v2_9fe8, i32* @r0, align 4
  %v2_9fec = inttoptr i32 %v2_9fe8 to i8*
  %v3_9fec = call i32 @function_12d64(i8* %v2_9fec, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32))
  store i32 %v3_9fec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9ff0

dec_label_pc_9ff0:                                ; preds = %dec_label_pc_9d30, %dec_label_pc_9f20
  %v0_9ff0 = load i32, i32* @r6, align 4
  %v1_9ff0 = add i32 %v0_9ff0, 37
  %v2_9ff0 = inttoptr i32 %v1_9ff0 to i32*
  %v3_9ff0 = load i32, i32* %v2_9ff0, align 4
  store i32 %v3_9ff0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ff4 = icmp slt i32 %v3_9ff0, 0
  store i1 %v1_9ff4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ff4 = icmp eq i32 %v3_9ff0, 0
  store i1 %v2_9ff4, i1* %cpsr_z.global-to-local, align 1
  %tmp214 = icmp slt i32 %v3_9ff0, 1
  br i1 %tmp214, label %dec_label_pc_a09c, label %dec_label_pc_9ffc

dec_label_pc_9ffc:                                ; preds = %dec_label_pc_9ff0
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_a000 = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_136a4.114 to i32), i32* %r1.global-to-local, align 4
  %v2_a00c = add i32 %v2_a000, %stack_var_-20856.0.ph
  store i32 %v2_a00c, i32* @r0, align 4
  %v3_a010 = inttoptr i32 %v2_a00c to i8*
  %v4_a010 = call i32 @function_12d64(i8* %v3_a010, i32 ptrtoint ([9 x i8]* @global_var_136a4.114 to i32))
  store i32 %v4_a010, i32* %r0.global-to-local, align 4
  %v0_a014 = load i32, i32* @r6, align 4
  %v1_a014 = add i32 %v0_a014, 37
  %v2_a014 = inttoptr i32 %v1_a014 to i32*
  %v3_a014 = load i32, i32* %v2_a014, align 4
  store i32 %v3_a014, i32* %r3.global-to-local, align 4
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a01c = icmp slt i32 %v3_a014, 0
  store i1 %v1_a01c, i1* %cpsr_n.global-to-local, align 1
  %v2_a01c = icmp eq i32 %v3_a014, 0
  store i1 %v2_a01c, i1* %cpsr_z.global-to-local, align 1
  %v0_a020 = load i32, i32* @r5, align 4
  store i32 %v0_a020, i32* %stack_var_-40, align 4
  %tmp215 = icmp slt i32 %v3_a014, 1
  br i1 %tmp215, label %dec_label_pc_a084, label %dec_label_pc_a028

dec_label_pc_a028:                                ; preds = %dec_label_pc_9ffc, %dec_label_pc_a028
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_a02c = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %v10_9714, i32* %r2.global-to-local, align 4
  %v3_a034 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_a03c = and i32 %v3_a034, 33554432
  %v2_a03c = icmp ne i32 %v1_a03c, 0
  store i1 %v2_a03c, i1* %cpsr_c.global-to-local, align 1
  %v3_a03c = mul i32 %v3_a034, 128
  %v1_a040 = add i32 %v3_a03c, 1472
  %v2_a044 = add i32 %v2_a02c, %stack_var_-20856.0.ph
  store i32 %v2_a044, i32* @r0, align 4
  %v0_a048 = load i32, i32* @r7, align 4
  %v2_a048 = add i32 %v1_a040, %v0_a048
  store i32 %v2_a048, i32* %r1.global-to-local, align 4
  %v2_a04c = inttoptr i32 %v2_a044 to i8*
  %v3_a04c = call i32 @function_12d64(i8* %v2_a04c, i32 %v2_a048)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_a054 = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_136b0.116 to i32), i32* %r1.global-to-local, align 4
  %v2_a060 = add i32 %v2_a054, %stack_var_-20856.0.ph
  store i32 %v2_a060, i32* @r0, align 4
  %v3_a064 = inttoptr i32 %v2_a060 to i8*
  %v4_a064 = call i32 @function_12d64(i8* %v3_a064, i32 ptrtoint ([3 x i8]* @global_var_136b0.116 to i32))
  store i32 %v4_a064, i32* %r0.global-to-local, align 4
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  %v3_a06c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a06c, i32* %r3.global-to-local, align 4
  %v0_a070 = load i32, i32* @r6, align 4
  %v1_a070 = add i32 %v0_a070, 37
  %v2_a070 = inttoptr i32 %v1_a070 to i32*
  %v3_a070 = load i32, i32* %v2_a070, align 4
  store i32 %v3_a070, i32* %r2.global-to-local, align 4
  %v1_a074 = add i32 %v3_a06c, 1
  store i32 %v1_a074, i32* %ip.global-to-local, align 4
  %v2_a078 = sub i32 %v3_a070, %v1_a074
  %v3_a078 = icmp uge i32 %v3_a070, %v1_a074
  store i1 %v3_a078, i1* %cpsr_c.global-to-local, align 1
  %v4_a078 = xor i32 %v3_a070, %v1_a074
  %v5_a078 = xor i32 %v2_a078, %v3_a070
  %v6_a078 = and i32 %v5_a078, %v4_a078
  %v7_a078 = icmp slt i32 %v6_a078, 0
  store i1 %v7_a078, i1* %cpsr_v.global-to-local, align 1
  %v8_a078 = icmp slt i32 %v2_a078, 0
  store i1 %v8_a078, i1* %cpsr_n.global-to-local, align 1
  %v9_a078 = icmp eq i32 %v3_a070, %v1_a074
  store i1 %v9_a078, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a074, i32* %stack_var_-40, align 4
  %v8_a080 = icmp sgt i32 %v3_a070, %v1_a074
  br i1 %v8_a080, label %dec_label_pc_a028, label %dec_label_pc_a084

dec_label_pc_a084:                                ; preds = %dec_label_pc_a028, %dec_label_pc_9ffc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_a088 = call i32 @function_12d3c(i8* %v1_9d64)
  %v2_a090 = add i32 %v2_a088, %stack_var_-20856.0.ph
  store i32 %v2_a090, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  %v2_a098 = inttoptr i32 %v2_a090 to i8*
  %v3_a098 = call i32 @function_12d64(i8* %v2_a098, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32))
  store i32 %v3_a098, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a09c

dec_label_pc_a09c:                                ; preds = %dec_label_pc_9ff0, %dec_label_pc_a084
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_a0a0 = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  %v2_a0ac = add i32 %v2_a0a0, %stack_var_-20856.0.ph
  store i32 %v2_a0ac, i32* @r0, align 4
  %v2_a0b0 = inttoptr i32 %v2_a0ac to i8*
  %v3_a0b0 = call i32 @function_12d64(i8* %v2_a0b0, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32))
  store i32 %v3_a0b0, i32* %r0.global-to-local, align 4
  store i32 %v6_9624, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_a0b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_a0b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a0b8, label %dec_label_pc_a0d8, label %dec_label_pc_a0c0

dec_label_pc_a0c0:                                ; preds = %dec_label_pc_a09c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_a0c4 = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_9624, i32* %r1.global-to-local, align 4
  %v2_a0d0 = add i32 %v2_a0c4, %stack_var_-20856.0.ph
  store i32 %v2_a0d0, i32* @r0, align 4
  %v2_a0d4 = inttoptr i32 %v2_a0d0 to i8*
  %v3_a0d4 = call i32 @function_12d64(i8* %v2_a0d4, i32 %v6_9624)
  store i32 %v3_a0d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0d8

dec_label_pc_a0d8:                                ; preds = %dec_label_pc_a09c, %dec_label_pc_a0c0
  %v0_a0d8 = load i32, i32* @r7, align 4
  %v1_a0d8 = add i32 %v0_a0d8, 1440
  store i32 %v1_a0d8, i32* %r4.global-to-local, align 4
  %v0_a0dc = load i32, i32* @r6, align 4
  store i32 %v0_a0dc, i32* %r0.global-to-local, align 4
  store i32 %v1_a0d8, i32* %r1.global-to-local, align 4
  %v2_a0e4 = inttoptr i32 %v0_a0dc to i8*
  %v3_a0e4 = call i32 @function_1311c(i8* %v2_a0e4, i32 %v1_a0d8)
  store i32 %v3_a0e4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a0e8 = icmp slt i32 %v3_a0e4, 0
  store i1 %v1_a0e8, i1* %cpsr_n.global-to-local, align 1
  %v2_a0e8 = icmp eq i32 %v3_a0e4, 0
  store i1 %v2_a0e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a0e8, label %dec_label_pc_aa30, label %dec_label_pc_a0f0

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0d8, %dec_label_pc_aa30
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_a0f4 = load i32, i32* @r6, align 4
  %v1_a0f4 = add i32 %v0_a0f4, -1431
  %v2_a0f4 = inttoptr i32 %v1_a0f4 to i32*
  %v3_a0f4 = load i32, i32* %v2_a0f4, align 4
  store i32 %v3_a0f4, i32* @r4, align 4
  %v2_a0f8 = call i32 @function_12d3c(i8* %v1_9d64)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_a0f8, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a108 = load i32, i32* @r4, align 4
  store i32 %v0_a108, i32* %r0.global-to-local, align 4
  %v5_a10c = call i32 @send(i32 %v0_a108, i32* %v4_a10c, i32 %v2_a0f8, i32 16384)
  store i32 %v5_a10c, i32* %r0.global-to-local, align 4
  %v0_a110 = load i32, i32* @r6, align 4
  %v1_a110 = add i32 %v0_a110, -1431
  %v2_a110 = inttoptr i32 %v1_a110 to i32*
  %v3_a110 = load i32, i32* %v2_a110, align 4
  store i32 %v3_a110, i32* %r0.global-to-local, align 4
  %v3_a118 = udiv i32 %v3_a110, 32
  %v3_a11c = mul nuw nsw i32 %v3_a118, 4
  store i32 %v2_9b6c, i32* %lr.global-to-local, align 4
  %v2_a124 = add i32 %v3_a11c, %v2_9b6c
  store i32 %v2_a124, i32* %r3.global-to-local, align 4
  %v1_a128 = add i32 %v2_a124, -164
  %v2_a128 = inttoptr i32 %v1_a128 to i32*
  %v3_a128 = load i32, i32* %v2_a128, align 4
  %v1_a12c = urem i32 %v3_a110, 32
  %v1_a130 = load i32, i32* %fp.global-to-local, align 4
  %v7_a130 = shl i32 %v1_a130, %v1_a12c
  %v8_a130 = or i32 %v7_a130, %v3_a128
  store i32 %v8_a130, i32* %r2.global-to-local, align 4
  %v0_a134 = load i32, i32* @sl, align 4
  %v2_a134 = sub i32 %v0_a134, %v3_a110
  %v3_a134 = icmp uge i32 %v0_a134, %v3_a110
  store i1 %v3_a134, i1* %cpsr_c.global-to-local, align 1
  %v4_a134 = xor i32 %v0_a134, %v3_a110
  %v5_a134 = xor i32 %v2_a134, %v0_a134
  %v6_a134 = and i32 %v5_a134, %v4_a134
  %v7_a134 = icmp slt i32 %v6_a134, 0
  store i1 %v7_a134, i1* %cpsr_v.global-to-local, align 1
  %v8_a134 = icmp slt i32 %v2_a134, 0
  store i1 %v8_a134, i1* %cpsr_n.global-to-local, align 1
  %v9_a134 = icmp eq i32 %v0_a134, %v3_a110
  store i1 %v9_a134, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_a130, i32* %v2_a128, align 4
  %v0_a140 = load i32, i32* %sb.global-to-local, align 4
  %v1_a140 = load i32, i32* @r6, align 4
  %v2_a140 = add i32 %v1_a140, -1419
  %v3_a140 = inttoptr i32 %v2_a140 to i32*
  store i32 %v0_a140, i32* %v3_a140, align 4
  %v0_a144 = load i32, i32* %r1.global-to-local, align 4
  %v1_a144 = trunc i32 %v0_a144 to i8
  %v2_a144 = load i32, i32* @r6, align 4
  %v3_a144 = add i32 %v2_a144, -1427
  %v4_a144 = inttoptr i32 %v3_a144 to i8*
  store i8 %v1_a144, i8* %v4_a144, align 1
  %v0_a148 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_a148 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_a148 = xor i1 %v0_a148, %v1_a148
  br i1 %v2_a148, label %dec_label_pc_a14c, label %dec_label_pc_9a54

dec_label_pc_a14c:                                ; preds = %dec_label_pc_a0f0
  %v0_a14c = load i32, i32* %r0.global-to-local, align 4
  %v1_a14c = add i32 %v0_a14c, 1
  store i32 %v1_a14c, i32* @sl, align 4
  br label %dec_label_pc_9b90

dec_label_pc_a154:                                ; preds = %dec_label_pc_9a2c
  %v1_a154 = add i32 %v3_9d24, -1431
  %v2_a154 = inttoptr i32 %v1_a154 to i32*
  %v3_a154 = load i32, i32* %v2_a154, align 4
  store i32 %v3_a154, i32* %r0.global-to-local, align 4
  %v3_a15c = udiv i32 %v3_a154, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_a160 = mul nuw nsw i32 %v3_a15c, 4
  store i32 %v2_9b6c, i32* %ip.global-to-local, align 4
  %v2_a168 = add i32 %v3_a160, %v2_9b6c
  store i32 %v2_a168, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a16c

dec_label_pc_a16c:                                ; preds = %.thread25, %.thread36, %dec_label_pc_a154
  %v1_a178 = phi i32 [ %v4_9a10, %.thread36 ], [ %v4_99f0, %.thread25 ], [ %v3_a154, %dec_label_pc_a154 ]
  %v1_a17c = phi i32 [ %v3_9a24, %.thread36 ], [ %v3_9a04, %.thread25 ], [ %v2_a168, %dec_label_pc_a154 ]
  %v1_a16c = add i32 %v1_a17c, -164
  %v2_a16c = inttoptr i32 %v1_a16c to i32*
  %v3_a16c = load i32, i32* %v2_a16c, align 4
  %v1_a170 = urem i32 %v1_a178, 32
  store i32 %v1_a170, i32* %r1.global-to-local, align 4
  %v1_a174 = load i32, i32* %fp.global-to-local, align 4
  %v7_a174 = shl i32 %v1_a174, %v1_a170
  %v8_a174 = or i32 %v7_a174, %v3_a16c
  store i32 %v8_a174, i32* %r2.global-to-local, align 4
  %v0_a178 = load i32, i32* @sl, align 4
  %v2_a178 = sub i32 %v0_a178, %v1_a178
  %v3_a178 = icmp uge i32 %v0_a178, %v1_a178
  store i1 %v3_a178, i1* %cpsr_c.global-to-local, align 1
  %v4_a178 = xor i32 %v0_a178, %v1_a178
  %v5_a178 = xor i32 %v2_a178, %v0_a178
  %v6_a178 = and i32 %v5_a178, %v4_a178
  %v7_a178 = icmp slt i32 %v6_a178, 0
  store i1 %v7_a178, i1* %cpsr_v.global-to-local, align 1
  %v8_a178 = icmp slt i32 %v2_a178, 0
  store i1 %v8_a178, i1* %cpsr_n.global-to-local, align 1
  %v9_a178 = icmp eq i32 %v0_a178, %v1_a178
  store i1 %v9_a178, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_a174, i32* %v2_a16c, align 4
  %v2_a180 = xor i1 %v8_a178, %v7_a178
  br i1 %v2_a180, label %dec_label_pc_a184, label %dec_label_pc_9a54

dec_label_pc_a184:                                ; preds = %dec_label_pc_a16c
  %v0_a184 = load i32, i32* %r0.global-to-local, align 4
  %v1_a184 = add i32 %v0_a184, 1
  store i32 %v1_a184, i32* @sl, align 4
  br label %dec_label_pc_9b90

dec_label_pc_a18c:                                ; preds = %dec_label_pc_99dc
  %v1_a18c = add i32 %v3_9d24, -1423
  %v2_a18c = inttoptr i32 %v1_a18c to i32*
  %v3_a18c = load i32, i32* %v2_a18c, align 4
  %v1_a190 = load i32, i32* %sb.global-to-local, align 4
  %v2_a190 = sub i32 %v1_a190, %v3_a18c
  store i32 %v2_a190, i32* %r3.global-to-local, align 4
  %v1_a194 = add i32 %v2_a190, -30
  %v2_a194 = icmp ugt i32 %v2_a190, 29
  store i1 %v2_a194, i1* %cpsr_c.global-to-local, align 1
  %v3_a194 = sub i32 29, %v2_a190
  %v4_a194 = and i32 %v3_a194, %v2_a190
  %v5_a194 = icmp slt i32 %v4_a194, 0
  store i1 %v5_a194, i1* %cpsr_v.global-to-local, align 1
  %v6_a194 = icmp slt i32 %v1_a194, 0
  store i1 %v6_a194, i1* %cpsr_n.global-to-local, align 1
  %v7_a194 = icmp eq i32 %v2_a190, 30
  store i1 %v7_a194, i1* %cpsr_z.global-to-local, align 1
  %v2_a198 = xor i1 %v7_a194, true
  %v3_a198 = and i1 %v2_a194, %v2_a198
  br i1 %v3_a198, label %dec_label_pc_9a3c, label %dec_label_pc_a19c

dec_label_pc_a19c:                                ; preds = %dec_label_pc_a18c
  %v1_a19c = add i32 %v3_9d24, -1431
  %v2_a19c = inttoptr i32 %v1_a19c to i32*
  %v3_a19c = load i32, i32* %v2_a19c, align 4
  store i32 %v3_a19c, i32* %r0.global-to-local, align 4
  %v3_a1a4 = udiv i32 %v3_a19c, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_a1a8 = mul nuw nsw i32 %v3_a1a4, 4
  store i32 %v3_a1a8, i32* %r3.global-to-local, align 4
  store i32 %v2_9b6c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9b74

dec_label_pc_a1f4:                                ; preds = %dec_label_pc_9c40
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_a1fc = call i32 @function_12ddc(i32 %v2_96a4, i32 10240)
  store i32 %v2_a1fc, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_a208 = load i32, i32* @r8, align 4
  %v1_a208 = add i32 %v0_a208, -1456
  %v2_a208 = inttoptr i32 %v1_a208 to i32*
  %v3_a208 = load i32, i32* %v2_a208, align 4
  store i32 %v3_a208, i32* %r0.global-to-local, align 4
  store i32 %v2_96a4, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_a214 = call i32 @recv(i32 %v3_a208, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_a214, i32* %r0.global-to-local, align 4
  store i32 %v5_a214, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a21c = icmp slt i32 %v5_a214, 0
  store i1 %v1_a21c, i1* %cpsr_n.global-to-local, align 1
  %v2_a21c = icmp eq i32 %v5_a214, 0
  store i1 %v2_a21c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp216 = icmp slt i32 %v5_a214, 1
  br i1 %tmp216, label %dec_label_pc_aea0, label %dec_label_pc_a228

dec_label_pc_a228:                                ; preds = %dec_label_pc_a1f4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  store i32 %v5_a214, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_136b4.118 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_a238 = call i32 @function_12e00(i32 %v2_96a4, i32 %v5_a214, i32 ptrtoint ([5 x i8]* @global_var_136b4.118 to i32), i32 4)
  store i32 %v5_a238, i32* %r0.global-to-local, align 4
  %v1_a23c = add i32 %v5_a238, 1
  %v2_a23c = icmp eq i32 %v5_a238, -1
  store i1 %v2_a23c, i1* %cpsr_c.global-to-local, align 1
  %v3_a23c = sub i32 0, %v5_a238
  %v4_a23c = and i32 %v1_a23c, %v3_a23c
  %v5_a23c = icmp slt i32 %v4_a23c, 0
  store i1 %v5_a23c, i1* %cpsr_v.global-to-local, align 1
  %v6_a23c = icmp slt i32 %v1_a23c, 0
  store i1 %v6_a23c, i1* %cpsr_n.global-to-local, align 1
  %v7_a23c = icmp eq i32 %v1_a23c, 0
  store i1 %v7_a23c, i1* %cpsr_z.global-to-local, align 1
  %v0_ad38 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_a23c, label %dec_label_pc_ad38, label %dec_label_pc_a244

dec_label_pc_a244:                                ; preds = %dec_label_pc_a228, %dec_label_pc_ad38
  store i32 ptrtoint ([5 x i8]* @global_var_136b4.118 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_ad38, i32* %r1.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v5_a254 = call i32 @function_12e00(i32 %v2_96a4, i32 %v0_ad38, i32 ptrtoint ([5 x i8]* @global_var_136b4.118 to i32), i32 4)
  store i32 %v2_9b6c, i32* %ip.global-to-local, align 4
  %v2_a260 = add i32 %v5_a254, %v2_9b6c
  store i32 %v2_a260, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_a268 = load i32, i32* @r6, align 4
  %v4_a268 = add i32 %v3_a268, %v2_a260
  %v5_a268 = inttoptr i32 %v4_a268 to i8*
  store i8 0, i8* %v5_a268, align 1
  %v0_a26c = load i32, i32* @r5, align 4
  store i32 %v0_a26c, i32* %r1.global-to-local, align 4
  store i32 53, i32* %r0.global-to-local, align 4
  %v2_a274 = inttoptr i32 %v0_a26c to i32*
  %v3_a274 = call i32 @function_121a4(i32 53, i32* %v2_a274)
  %v0_a278 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a278, i32* @r1, align 4
  store i32 %v3_a274, i32* %r2.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v4_a284 = call i32 @function_13090(i8* %tmp200, i32 %v0_a278, i32 %v3_a274)
  store i32 %v4_a284, i32* %r0.global-to-local, align 4
  %v1_a288 = add i32 %v4_a284, 1
  %v2_a288 = icmp eq i32 %v4_a284, -1
  store i1 %v2_a288, i1* %cpsr_c.global-to-local, align 1
  %v3_a288 = sub i32 0, %v4_a284
  %v4_a288 = and i32 %v1_a288, %v3_a288
  %v5_a288 = icmp slt i32 %v4_a288, 0
  store i1 %v5_a288, i1* %cpsr_v.global-to-local, align 1
  %v6_a288 = icmp slt i32 %v1_a288, 0
  store i1 %v6_a288, i1* %cpsr_n.global-to-local, align 1
  %v7_a288 = icmp eq i32 %v1_a288, 0
  store i1 %v7_a288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a288, label %.thread46, label %bb217

bb217:                                            ; preds = %dec_label_pc_a244
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_a290 = load i32, i32* @r8, align 4
  %v3_a290 = add i32 %v2_a290, -4
  %v4_a290 = inttoptr i32 %v3_a290 to i32*
  store i32 2, i32* %v4_a290, align 4
  br label %.thread46

.thread46:                                        ; preds = %dec_label_pc_a244, %bb217
  %v0_a294 = load i32, i32* @r5, align 4
  store i32 %v0_a294, i32* %r1.global-to-local, align 4
  store i32 52, i32* %r0.global-to-local, align 4
  %v2_a29c = inttoptr i32 %v0_a294 to i32*
  %v3_a29c = call i32 @function_121a4(i32 52, i32* %v2_a29c)
  %v0_a2a0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a2a0, i32* @r1, align 4
  store i32 %v3_a29c, i32* %r2.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v4_a2ac = call i32 @function_13090(i8* %tmp200, i32 %v0_a2a0, i32 %v3_a29c)
  store i32 %v4_a2ac, i32* %r0.global-to-local, align 4
  %v1_a2b0 = add i32 %v4_a2ac, 1
  %v2_a2b0 = icmp eq i32 %v4_a2ac, -1
  store i1 %v2_a2b0, i1* %cpsr_c.global-to-local, align 1
  %v3_a2b0 = sub i32 0, %v4_a2ac
  %v4_a2b0 = and i32 %v1_a2b0, %v3_a2b0
  %v5_a2b0 = icmp slt i32 %v4_a2b0, 0
  store i1 %v5_a2b0, i1* %cpsr_v.global-to-local, align 1
  %v6_a2b0 = icmp slt i32 %v1_a2b0, 0
  store i1 %v6_a2b0, i1* %cpsr_n.global-to-local, align 1
  %v7_a2b0 = icmp eq i32 %v1_a2b0, 0
  store i1 %v7_a2b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a2b0, label %.thread47, label %bb218

bb218:                                            ; preds = %.thread46
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_a2b8 = load i32, i32* @r8, align 4
  %v3_a2b8 = add i32 %v2_a2b8, -4
  %v4_a2b8 = inttoptr i32 %v3_a2b8 to i32*
  store i32 1, i32* %v4_a2b8, align 4
  br label %.thread47

.thread47:                                        ; preds = %.thread46, %bb218
  %v0_a2bc = load i32, i32* @r5, align 4
  store i32 %v0_a2bc, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_a2c4 = load i32, i32* @r8, align 4
  %v2_a2c4 = inttoptr i32 %v1_a2c4 to i32*
  store i32 %v0_a2bc, i32* %v2_a2c4, align 4
  %v2_a2c8 = inttoptr i32 %v0_a2bc to i32*
  %v3_a2c8 = call i32 @function_121a4(i32 51, i32* %v2_a2c8)
  %v0_a2cc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a2cc, i32* @r1, align 4
  store i32 %v3_a2c8, i32* %r2.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v4_a2d8 = call i32 @function_13090(i8* %tmp200, i32 %v0_a2cc, i32 %v3_a2c8)
  store i32 %v4_a2d8, i32* %r0.global-to-local, align 4
  %v1_a2dc = add i32 %v4_a2d8, 1
  %v2_a2dc = icmp eq i32 %v4_a2d8, -1
  store i1 %v2_a2dc, i1* %cpsr_c.global-to-local, align 1
  %v3_a2dc = sub i32 0, %v4_a2d8
  %v4_a2dc = and i32 %v1_a2dc, %v3_a2dc
  %v5_a2dc = icmp slt i32 %v4_a2dc, 0
  store i1 %v5_a2dc, i1* %cpsr_v.global-to-local, align 1
  %v6_a2dc = icmp slt i32 %v1_a2dc, 0
  store i1 %v6_a2dc, i1* %cpsr_n.global-to-local, align 1
  %v7_a2dc = icmp eq i32 %v1_a2dc, 0
  store i1 %v7_a2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a2dc, label %.thread48, label %dec_label_pc_a2e4

dec_label_pc_a2e4:                                ; preds = %.thread47
  %v0_a2e4 = load i32, i32* @r5, align 4
  store i32 %v0_a2e4, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v2_a2ec = inttoptr i32 %v0_a2e4 to i32*
  %v3_a2ec = call i32 @function_121a4(i32 51, i32* %v2_a2ec)
  %v0_a2f0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a2f0, i32* @r1, align 4
  store i32 %v3_a2ec, i32* %r2.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v4_a2fc = call i32 @function_13090(i8* %tmp200, i32 %v0_a2f0, i32 %v3_a2ec)
  store i32 %v4_a2fc, i32* %r0.global-to-local, align 4
  store i32 %v2_9b6c, i32* %lr.global-to-local, align 4
  %v2_a308 = add i32 %v4_a2fc, %v2_9b6c
  store i32 %v2_a308, i32* %r3.global-to-local, align 4
  %v1_a30c = load i32, i32* @r6, align 4
  %v2_a30c = add i32 %v1_a30c, %v2_a308
  %v3_a30c = inttoptr i32 %v2_a30c to i8*
  %v4_a30c = load i8, i8* %v3_a30c, align 1
  %v2_a314 = icmp ugt i8 %v4_a30c, 31
  store i1 %v2_a314, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a314 = icmp ult i8 %v4_a30c, 32
  store i1 %v6_a314, i1* %cpsr_n.global-to-local, align 1
  %v7_a314 = icmp eq i8 %v4_a30c, 32
  store i1 %v7_a314, i1* %cpsr_z.global-to-local, align 1
  %v2_a31c = zext i1 %v7_a314 to i32
  %v2_a31c.v4_a2fc = add i32 %v2_a31c, %v4_a2fc
  store i32 %v2_a31c.v4_a2fc, i32* @r4, align 4
  %v2_a320 = add i32 %v2_a31c.v4_a2fc, %v2_96a4
  store i32 %v2_a320, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a320, i32* %r0.global-to-local, align 4
  %v1_a32c = load i32, i32* %fp.global-to-local, align 4
  %v2_a32c = sub i32 %v1_a32c, %v2_a31c.v4_a2fc
  store i32 %v2_a32c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_a334 = call i32 @function_12e00(i32 %v2_a320, i32 %v2_a32c, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32 2)
  store i32 %v4_a334, i32* %r0.global-to-local, align 4
  %v1_a338 = add i32 %v4_a334, 1
  %v2_a338 = icmp eq i32 %v4_a334, -1
  store i1 %v2_a338, i1* %cpsr_c.global-to-local, align 1
  %v3_a338 = sub i32 0, %v4_a334
  %v4_a338 = and i32 %v1_a338, %v3_a338
  %v5_a338 = icmp slt i32 %v4_a338, 0
  store i1 %v5_a338, i1* %cpsr_v.global-to-local, align 1
  %v6_a338 = icmp slt i32 %v1_a338, 0
  store i1 %v6_a338, i1* %cpsr_n.global-to-local, align 1
  %v7_a338 = icmp eq i32 %v1_a338, 0
  store i1 %v7_a338, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_a334, i32* %r2.global-to-local, align 4
  br i1 %v7_a338, label %.thread48, label %dec_label_pc_a344

dec_label_pc_a344:                                ; preds = %dec_label_pc_a2e4
  store i32 %v2_9b6c, i32* %ip.global-to-local, align 4
  %v1_a34c = load i32, i32* @r4, align 4
  %v2_a34c = add i32 %v1_a34c, %v2_9b6c
  %v1_a350 = add i32 %v4_a334, -1
  %v2_a350 = icmp ne i32 %v4_a334, 0
  store i1 %v2_a350, i1* %cpsr_c.global-to-local, align 1
  %v3_a350 = sub i32 0, %v4_a334
  %v4_a350 = and i32 %v4_a334, %v3_a350
  %v5_a350 = icmp slt i32 %v4_a350, 0
  store i1 %v5_a350, i1* %cpsr_v.global-to-local, align 1
  %v6_a350 = icmp slt i32 %v1_a350, 0
  store i1 %v6_a350, i1* %cpsr_n.global-to-local, align 1
  %v7_a350 = icmp eq i32 %v4_a334, 1
  store i1 %v7_a350, i1* %cpsr_z.global-to-local, align 1
  %v1_a354 = add i32 %v2_a34c, -20736
  store i32 %v1_a354, i32* %r3.global-to-local, align 4
  %v7_a358 = icmp sgt i32 %v4_a334, 1
  br i1 %v7_a358, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_a344
  %v9_a358 = add i32 %v4_a334, -2
  store i32 %v9_a358, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_a344, %bb219
  %v3_a360 = phi i32 [ %v4_a334, %dec_label_pc_a344 ], [ %v9_a358, %bb219 ]
  %v1_a35c = add i32 %v2_a34c, -20773
  store i32 %v1_a35c, i32* %r3.global-to-local, align 4
  %v0_a360 = load i32, i32* @r5, align 4
  %v1_a360 = trunc i32 %v0_a360 to i8
  %v4_a360 = add i32 %v3_a360, %v1_a35c
  %v5_a360 = inttoptr i32 %v4_a360 to i8*
  store i8 %v1_a360, i8* %v5_a360, align 1
  %v0_a364 = load i32, i32* @r6, align 4
  store i32 %v0_a364, i32* %r0.global-to-local, align 4
  %v1_a368 = inttoptr i32 %v0_a364 to i8*
  %v2_a368 = call i32 @function_12d3c(i8* %v1_a368)
  %v0_a36c = load i32, i32* @r5, align 4
  store i32 %v0_a36c, i32* %r1.global-to-local, align 4
  store i32 %v2_a368, i32* @r4, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v2_a378 = inttoptr i32 %v0_a36c to i32*
  %v3_a378 = call i32 @function_121a4(i32 50, i32* %v2_a378)
  %v0_a37c = load i32, i32* @r4, align 4
  store i32 %v0_a37c, i32* @r1, align 4
  store i32 %v3_a378, i32* %r2.global-to-local, align 4
  %v0_a384 = load i32, i32* @r6, align 4
  store i32 %v0_a384, i32* %r0.global-to-local, align 4
  %v3_a388 = inttoptr i32 %v0_a384 to i8*
  %v4_a388 = call i32 @function_13090(i8* %v3_a388, i32 %v0_a37c, i32 %v3_a378)
  store i32 %v4_a388, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a38c = icmp slt i32 %v4_a388, 0
  store i1 %v1_a38c, i1* %cpsr_n.global-to-local, align 1
  %v2_a38c = icmp eq i32 %v4_a388, 0
  store i1 %v2_a38c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a38c, label %.thread48, label %bb221

bb221:                                            ; preds = %bb220
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_a394 = load i32, i32* @r8, align 4
  %v3_a394 = inttoptr i32 %v2_a394 to i32*
  store i32 1, i32* %v3_a394, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb220, %dec_label_pc_a2e4, %.thread47, %bb221
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_a3a4 = load i32, i32* @r8, align 4
  %v2_a3a4 = add i32 %v1_a3a4, 4
  %v3_a3a4 = inttoptr i32 %v2_a3a4 to i32*
  store i32 0, i32* %v3_a3a4, align 4
  %v3_a3a8 = call i32 @function_121a4(i32 48, i32* null)
  %v0_a3ac = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a3ac, i32* @r1, align 4
  store i32 %v3_a3a8, i32* %r2.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v4_a3b8 = call i32 @function_13090(i8* %tmp200, i32 %v0_a3ac, i32 %v3_a3a8)
  store i32 %v4_a3b8, i32* %r0.global-to-local, align 4
  %v1_a3c0 = add i32 %v4_a3b8, 1
  %v2_a3c0 = icmp eq i32 %v4_a3b8, -1
  store i1 %v2_a3c0, i1* %cpsr_c.global-to-local, align 1
  %v3_a3c0 = sub i32 0, %v4_a3b8
  %v4_a3c0 = and i32 %v1_a3c0, %v3_a3c0
  %v5_a3c0 = icmp slt i32 %v4_a3c0, 0
  store i1 %v5_a3c0, i1* %cpsr_v.global-to-local, align 1
  %v6_a3c0 = icmp slt i32 %v1_a3c0, 0
  store i1 %v6_a3c0, i1* %cpsr_n.global-to-local, align 1
  %v7_a3c0 = icmp eq i32 %v1_a3c0, 0
  store i1 %v7_a3c0, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_a3c0, label %.thread49, label %dec_label_pc_a3cc

dec_label_pc_a3cc:                                ; preds = %.thread48
  %v0_a3cc = load i32, i32* @r6, align 4
  store i32 %v0_a3cc, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v2_a3d4 = inttoptr i32 %v0_a3cc to i32*
  %v3_a3d4 = call i32 @function_121a4(i32 48, i32* %v2_a3d4)
  %v0_a3d8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a3d8, i32* @r1, align 4
  store i32 %v3_a3d4, i32* %r2.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v4_a3e4 = call i32 @function_13090(i8* %tmp200, i32 %v0_a3d8, i32 %v3_a3d4)
  store i32 %v4_a3e4, i32* %r0.global-to-local, align 4
  store i32 %v2_9b6c, i32* %lr.global-to-local, align 4
  %v2_a3f0 = add i32 %v4_a3e4, %v2_9b6c
  store i32 %v2_a3f0, i32* %r3.global-to-local, align 4
  %v1_a3f4 = load i32, i32* @r5, align 4
  %v2_a3f4 = add i32 %v1_a3f4, %v2_a3f0
  %v3_a3f4 = inttoptr i32 %v2_a3f4 to i8*
  %v4_a3f4 = load i8, i8* %v3_a3f4, align 1
  %v2_a3fc = icmp ugt i8 %v4_a3f4, 31
  store i1 %v2_a3fc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a3fc = icmp ult i8 %v4_a3f4, 32
  store i1 %v6_a3fc, i1* %cpsr_n.global-to-local, align 1
  %v7_a3fc = icmp eq i8 %v4_a3f4, 32
  store i1 %v7_a3fc, i1* %cpsr_z.global-to-local, align 1
  %v2_a404 = zext i1 %v7_a3fc to i32
  %v2_a404.v4_a3e4 = add i32 %v2_a404, %v4_a3e4
  store i32 %v2_a404.v4_a3e4, i32* @r4, align 4
  %v2_a408 = add i32 %v2_a404.v4_a3e4, %v2_96a4
  store i32 %v2_a408, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a408, i32* %r0.global-to-local, align 4
  %v1_a414 = load i32, i32* %fp.global-to-local, align 4
  %v2_a414 = sub i32 %v1_a414, %v2_a404.v4_a3e4
  store i32 %v2_a414, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_a41c = call i32 @function_12e00(i32 %v2_a408, i32 %v2_a414, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32 2)
  store i32 %v4_a41c, i32* %r0.global-to-local, align 4
  %v1_a420 = add i32 %v4_a41c, 1
  %v2_a420 = icmp eq i32 %v4_a41c, -1
  store i1 %v2_a420, i1* %cpsr_c.global-to-local, align 1
  %v3_a420 = sub i32 0, %v4_a41c
  %v4_a420 = and i32 %v1_a420, %v3_a420
  %v5_a420 = icmp slt i32 %v4_a420, 0
  store i1 %v5_a420, i1* %cpsr_v.global-to-local, align 1
  %v6_a420 = icmp slt i32 %v1_a420, 0
  store i1 %v6_a420, i1* %cpsr_n.global-to-local, align 1
  %v7_a420 = icmp eq i32 %v1_a420, 0
  store i1 %v7_a420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_a41c, i32* %r2.global-to-local, align 4
  br i1 %v7_a420, label %.thread49, label %dec_label_pc_a42c

dec_label_pc_a42c:                                ; preds = %dec_label_pc_a3cc
  store i32 %v2_9b6c, i32* %ip.global-to-local, align 4
  %v1_a434 = load i32, i32* @r4, align 4
  %v2_a434 = add i32 %v1_a434, %v2_9b6c
  %v1_a438 = add i32 %v4_a41c, -1
  %v2_a438 = icmp ne i32 %v4_a41c, 0
  store i1 %v2_a438, i1* %cpsr_c.global-to-local, align 1
  %v3_a438 = sub i32 0, %v4_a41c
  %v4_a438 = and i32 %v4_a41c, %v3_a438
  %v5_a438 = icmp slt i32 %v4_a438, 0
  store i1 %v5_a438, i1* %cpsr_v.global-to-local, align 1
  %v6_a438 = icmp slt i32 %v1_a438, 0
  store i1 %v6_a438, i1* %cpsr_n.global-to-local, align 1
  %v7_a438 = icmp eq i32 %v4_a41c, 1
  store i1 %v7_a438, i1* %cpsr_z.global-to-local, align 1
  %v1_a43c = add i32 %v2_a434, -20736
  store i32 %v1_a43c, i32* %r3.global-to-local, align 4
  %v7_a440 = icmp sgt i32 %v4_a41c, 1
  br i1 %v7_a440, label %bb222, label %bb223

bb222:                                            ; preds = %dec_label_pc_a42c
  %v9_a440 = add i32 %v4_a41c, -2
  store i32 %v9_a440, i32* %r2.global-to-local, align 4
  br label %bb223

bb223:                                            ; preds = %dec_label_pc_a42c, %bb222
  %v3_a448 = phi i32 [ %v4_a41c, %dec_label_pc_a42c ], [ %v9_a440, %bb222 ]
  %v1_a444 = add i32 %v2_a434, -20773
  store i32 %v1_a444, i32* %r3.global-to-local, align 4
  %v0_a448 = load i32, i32* @r6, align 4
  %v1_a448 = trunc i32 %v0_a448 to i8
  %v4_a448 = add i32 %v3_a448, %v1_a444
  %v5_a448 = inttoptr i32 %v4_a448 to i8*
  store i8 %v1_a448, i8* %v5_a448, align 1
  %v0_a44c = load i32, i32* @r5, align 4
  store i32 %v0_a44c, i32* %r0.global-to-local, align 4
  %v1_a450 = inttoptr i32 %v0_a44c to i8*
  %v2_a450 = call i32 @function_12d3c(i8* %v1_a450)
  %v0_a454 = load i32, i32* @r6, align 4
  store i32 %v0_a454, i32* %r1.global-to-local, align 4
  store i32 %v2_a450, i32* @r4, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v2_a460 = inttoptr i32 %v0_a454 to i32*
  %v3_a460 = call i32 @function_121a4(i32 49, i32* %v2_a460)
  %v0_a464 = load i32, i32* @r4, align 4
  store i32 %v0_a464, i32* @r1, align 4
  store i32 %v3_a460, i32* %r2.global-to-local, align 4
  %v0_a46c = load i32, i32* @r5, align 4
  store i32 %v0_a46c, i32* %r0.global-to-local, align 4
  %v3_a470 = inttoptr i32 %v0_a46c to i8*
  %v4_a470 = call i32 @function_13090(i8* %v3_a470, i32 %v0_a464, i32 %v3_a460)
  store i32 %v4_a470, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a474 = icmp slt i32 %v4_a470, 0
  store i1 %v1_a474, i1* %cpsr_n.global-to-local, align 1
  %v2_a474 = icmp eq i32 %v4_a470, 0
  store i1 %v2_a474, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a474, label %.thread49, label %bb224

bb224:                                            ; preds = %bb223
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_a47c = load i32, i32* @r8, align 4
  %v3_a47c = add i32 %v2_a47c, 4
  %v4_a47c = inttoptr i32 %v3_a47c to i32*
  store i32 1, i32* %v4_a47c, align 4
  br label %.thread49

.thread49:                                        ; preds = %bb223, %dec_label_pc_a3cc, %.thread48, %bb224
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_a488 = call i32 @function_121a4(i32 47, i32* null)
  %v0_a48c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a48c, i32* @r1, align 4
  store i32 %v3_a488, i32* %r2.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v4_a498 = call i32 @function_13090(i8* %tmp200, i32 %v0_a48c, i32 %v3_a488)
  store i32 %v4_a498, i32* %r0.global-to-local, align 4
  %v1_a49c = add i32 %v4_a498, 1
  %v2_a49c = icmp eq i32 %v4_a498, -1
  store i1 %v2_a49c, i1* %cpsr_c.global-to-local, align 1
  %v3_a49c = sub i32 0, %v4_a498
  %v4_a49c = and i32 %v1_a49c, %v3_a49c
  %v5_a49c = icmp slt i32 %v4_a49c, 0
  store i1 %v5_a49c, i1* %cpsr_v.global-to-local, align 1
  %v6_a49c = icmp slt i32 %v1_a49c, 0
  store i1 %v6_a49c, i1* %cpsr_n.global-to-local, align 1
  %v7_a49c = icmp eq i32 %v1_a49c, 0
  store i1 %v7_a49c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_a49c, label %.thread, label %dec_label_pc_a4b4

.thread:                                          ; preds = %.thread49
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_a4ac = load i32, i32* @r8, align 4
  %v3_a4ac = add i32 %v2_a4ac, 8
  %v4_a4ac = inttoptr i32 %v3_a4ac to i32*
  store i32 0, i32* %v4_a4ac, align 4
  br label %dec_label_pc_a548

dec_label_pc_a4b4:                                ; preds = %.thread49
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_a4bc = call i32 @function_121a4(i32 47, i32* null)
  %v0_a4c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a4c0, i32* @r1, align 4
  store i32 %v3_a4bc, i32* %r2.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v4_a4cc = call i32 @function_13090(i8* %tmp200, i32 %v0_a4c0, i32 %v3_a4bc)
  store i32 %v4_a4cc, i32* %r0.global-to-local, align 4
  store i32 %v2_9b6c, i32* %lr.global-to-local, align 4
  %v2_a4d8 = add i32 %v4_a4cc, %v2_9b6c
  store i32 %v2_a4d8, i32* %r3.global-to-local, align 4
  %v1_a4dc = load i32, i32* @r5, align 4
  %v2_a4dc = add i32 %v1_a4dc, %v2_a4d8
  %v3_a4dc = inttoptr i32 %v2_a4dc to i8*
  %v4_a4dc = load i8, i8* %v3_a4dc, align 1
  %v2_a4e4 = icmp ugt i8 %v4_a4dc, 31
  store i1 %v2_a4e4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a4e4 = icmp ult i8 %v4_a4dc, 32
  store i1 %v6_a4e4, i1* %cpsr_n.global-to-local, align 1
  %v7_a4e4 = icmp eq i8 %v4_a4dc, 32
  store i1 %v7_a4e4, i1* %cpsr_z.global-to-local, align 1
  %v2_a4ec = zext i1 %v7_a4e4 to i32
  %v2_a4ec.v4_a4cc = add i32 %v2_a4ec, %v4_a4cc
  store i32 %v2_a4ec.v4_a4cc, i32* @r4, align 4
  %v2_a4f0 = add i32 %v2_a4ec.v4_a4cc, %v2_96a4
  store i32 %v2_a4f0, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a4f0, i32* %r0.global-to-local, align 4
  %v1_a4fc = load i32, i32* %fp.global-to-local, align 4
  %v2_a4fc = sub i32 %v1_a4fc, %v2_a4ec.v4_a4cc
  store i32 %v2_a4fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_a504 = call i32 @function_12e00(i32 %v2_a4f0, i32 %v2_a4fc, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32 2)
  store i32 %v4_a504, i32* %r0.global-to-local, align 4
  %v1_a508 = add i32 %v4_a504, 1
  %v2_a508 = icmp eq i32 %v4_a504, -1
  store i1 %v2_a508, i1* %cpsr_c.global-to-local, align 1
  %v3_a508 = sub i32 0, %v4_a504
  %v4_a508 = and i32 %v1_a508, %v3_a508
  %v5_a508 = icmp slt i32 %v4_a508, 0
  store i1 %v5_a508, i1* %cpsr_v.global-to-local, align 1
  %v6_a508 = icmp slt i32 %v1_a508, 0
  store i1 %v6_a508, i1* %cpsr_n.global-to-local, align 1
  %v7_a508 = icmp eq i32 %v1_a508, 0
  store i1 %v7_a508, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_a504, i32* %r2.global-to-local, align 4
  br i1 %v7_a508, label %dec_label_pc_a548, label %dec_label_pc_a514

dec_label_pc_a514:                                ; preds = %dec_label_pc_a4b4
  store i32 %v2_9b6c, i32* %ip.global-to-local, align 4
  %v1_a51c = load i32, i32* @r4, align 4
  %v2_a51c = add i32 %v1_a51c, %v2_9b6c
  %v1_a520 = add i32 %v4_a504, -1
  %v2_a520 = icmp ne i32 %v4_a504, 0
  store i1 %v2_a520, i1* %cpsr_c.global-to-local, align 1
  %v3_a520 = sub i32 0, %v4_a504
  %v4_a520 = and i32 %v4_a504, %v3_a520
  %v5_a520 = icmp slt i32 %v4_a520, 0
  store i1 %v5_a520, i1* %cpsr_v.global-to-local, align 1
  %v6_a520 = icmp slt i32 %v1_a520, 0
  store i1 %v6_a520, i1* %cpsr_n.global-to-local, align 1
  %v7_a520 = icmp eq i32 %v4_a504, 1
  store i1 %v7_a520, i1* %cpsr_z.global-to-local, align 1
  %v1_a524 = add i32 %v2_a51c, -20736
  store i32 %v1_a524, i32* %r3.global-to-local, align 4
  %v7_a528 = icmp sgt i32 %v4_a504, 1
  br i1 %v7_a528, label %bb225, label %bb226

bb225:                                            ; preds = %dec_label_pc_a514
  %v9_a528 = add i32 %v4_a504, -2
  store i32 %v9_a528, i32* %r2.global-to-local, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_a514, %bb225
  %v3_a53c = phi i32 [ %v4_a504, %dec_label_pc_a514 ], [ %v9_a528, %bb225 ]
  %v1_a52c = add i32 %v2_a51c, -20773
  store i32 %v1_a52c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v0_a534 = load i32, i32* @r5, align 4
  store i32 %v0_a534, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_a53c = add i32 %v3_a53c, %v1_a52c
  %v5_a53c = inttoptr i32 %v4_a53c to i8*
  store i8 0, i8* %v5_a53c, align 1
  %v2_a540 = inttoptr i32 %v0_a534 to i8*
  %v3_a540 = call i32 @function_12e68(i8* %v2_a540, i32 10)
  store i32 %v3_a540, i32* %r0.global-to-local, align 4
  %v1_a544 = load i32, i32* @r8, align 4
  %v2_a544 = add i32 %v1_a544, 8
  %v3_a544 = inttoptr i32 %v2_a544 to i32*
  store i32 %v3_a540, i32* %v3_a544, align 4
  br label %dec_label_pc_a548

dec_label_pc_a548:                                ; preds = %.thread, %dec_label_pc_a4b4, %bb226
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_a54c

dec_label_pc_a54c:                                ; preds = %dec_label_pc_a6a0, %dec_label_pc_a720, %dec_label_pc_a548
  %v1_a558 = phi i32 [ 0, %dec_label_pc_a548 ], [ %v1_a558.pre.pre, %dec_label_pc_a720 ], [ %v0_a6a0, %dec_label_pc_a6a0 ]
  store i32 %v2_96a4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_a558 = add i32 %v1_a558, %v2_96a4
  store i32 %v2_a558, i32* @r4, align 4
  %v3_a55c = call i32 @function_121a4(i32 46, i32* null)
  %v0_a560 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a560, i32* @r1, align 4
  store i32 %v3_a55c, i32* %r2.global-to-local, align 4
  %v0_a568 = load i32, i32* @r4, align 4
  store i32 %v0_a568, i32* %r0.global-to-local, align 4
  %v3_a56c = inttoptr i32 %v0_a568 to i8*
  %v4_a56c = call i32 @function_13090(i8* %v3_a56c, i32 %v0_a560, i32 %v3_a55c)
  store i32 %v4_a56c, i32* %r0.global-to-local, align 4
  %v1_a574 = add i32 %v4_a56c, 1
  %v2_a574 = icmp eq i32 %v4_a56c, -1
  store i1 %v2_a574, i1* %cpsr_c.global-to-local, align 1
  %v3_a574 = sub i32 0, %v4_a56c
  %v4_a574 = and i32 %v1_a574, %v3_a574
  %v5_a574 = icmp slt i32 %v4_a574, 0
  store i1 %v5_a574, i1* %cpsr_v.global-to-local, align 1
  %v6_a574 = icmp slt i32 %v1_a574, 0
  store i1 %v6_a574, i1* %cpsr_n.global-to-local, align 1
  %v7_a574 = icmp eq i32 %v1_a574, 0
  store i1 %v7_a574, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_a574, label %dec_label_pc_a74c, label %dec_label_pc_a580

dec_label_pc_a580:                                ; preds = %dec_label_pc_a54c
  %v0_a580 = load i32, i32* @r8, align 4
  %v1_a580 = add i32 %v0_a580, 12
  %v2_a580 = inttoptr i32 %v1_a580 to i32*
  %v3_a580 = load i32, i32* %v2_a580, align 4
  store i32 %v3_a580, i32* %r3.global-to-local, align 4
  %v1_a584 = add i32 %v3_a580, -4
  %v2_a584 = icmp ugt i32 %v3_a580, 3
  store i1 %v2_a584, i1* %cpsr_c.global-to-local, align 1
  %v3_a584 = sub i32 3, %v3_a580
  %v4_a584 = and i32 %v3_a584, %v3_a580
  %v5_a584 = icmp slt i32 %v4_a584, 0
  store i1 %v5_a584, i1* %cpsr_v.global-to-local, align 1
  %v6_a584 = icmp slt i32 %v1_a584, 0
  store i1 %v6_a584, i1* %cpsr_n.global-to-local, align 1
  %v7_a584 = icmp eq i32 %v3_a580, 4
  store i1 %v7_a584, i1* %cpsr_z.global-to-local, align 1
  %v8_a588 = icmp sgt i32 %v3_a580, 4
  br i1 %v8_a588, label %dec_label_pc_a74c, label %dec_label_pc_a58c

dec_label_pc_a58c:                                ; preds = %dec_label_pc_a580
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v3_a594 = call i32 @function_121a4(i32 46, i32* null)
  %v0_a598 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a598, i32* @r1, align 4
  store i32 %v3_a594, i32* %r2.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r4, align 4
  store i32 %v0_a5a0, i32* %r0.global-to-local, align 4
  %v3_a5a4 = inttoptr i32 %v0_a5a0 to i8*
  %v4_a5a4 = call i32 @function_13090(i8* %v3_a5a4, i32 %v0_a598, i32 %v3_a594)
  store i32 %v4_a5a4, i32* %r0.global-to-local, align 4
  %v0_a5ac = load i32, i32* @r5, align 4
  %v2_a5ac = add i32 %v0_a5ac, %v4_a5a4
  store i32 %v2_a5ac, i32* @sl, align 4
  store i32 %v2_9b6c, i32* %r1.global-to-local, align 4
  %v2_a5b4 = add i32 %v2_a5ac, %v2_9b6c
  store i32 %v2_a5b4, i32* %r3.global-to-local, align 4
  %v1_a5b8 = load i32, i32* @r6, align 4
  %v2_a5b8 = add i32 %v1_a5b8, %v2_a5b4
  %v3_a5b8 = inttoptr i32 %v2_a5b8 to i8*
  %v4_a5b8 = load i8, i8* %v3_a5b8, align 1
  %v6_a5b8 = zext i8 %v4_a5b8 to i32
  store i32 %v6_a5b8, i32* %r2.global-to-local, align 4
  %v2_a5bc = icmp ugt i8 %v4_a5b8, 31
  store i1 %v2_a5bc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a5bc = icmp ult i8 %v4_a5b8, 32
  store i1 %v6_a5bc, i1* %cpsr_n.global-to-local, align 1
  %v7_a5bc = icmp eq i8 %v4_a5b8, 32
  store i1 %v7_a5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a5bc, label %bb227, label %bb228

bb227:                                            ; preds = %dec_label_pc_a58c
  %v2_a5c0 = add i32 %v4_a5a4, 1
  store i32 %v2_a5c0, i32* %r0.global-to-local, align 4
  br label %bb228

bb228:                                            ; preds = %dec_label_pc_a58c, %bb227
  %v2_a5d0 = phi i32 [ %v4_a5a4, %dec_label_pc_a58c ], [ %v2_a5c0, %bb227 ]
  %v1_a5c4 = load i32, i32* %fp.global-to-local, align 4
  %v2_a5c4 = sub i32 %v1_a5c4, %v0_a5ac
  store i32 %v2_a5c4, i32* %r3.global-to-local, align 4
  %v2_a5c8 = sub i32 %v2_a5c4, %v2_a5d0
  store i32 %v2_a5c8, i32* @r7, align 4
  %v0_a5cc = load i32, i32* @r4, align 4
  %v2_a5cc = add i32 %v0_a5cc, %v2_a5d0
  store i32 %v2_a5cc, i32* @r6, align 4
  br i1 %v7_a5bc, label %bb229, label %bb230

bb229:                                            ; preds = %bb228
  %v3_a5d0 = add i32 %v2_a5d0, %v0_a5ac
  store i32 %v3_a5d0, i32* @sl, align 4
  br label %bb230

bb230:                                            ; preds = %bb228, %bb229
  store i32 %v2_a5c8, i32* %r1.global-to-local, align 4
  store i32 %v2_a5cc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_a5e4 = call i32 @function_12e00(i32 %v2_a5cc, i32 %v2_a5c8, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32 2)
  store i32 %v4_a5e4, i32* %r0.global-to-local, align 4
  %v1_a5e8 = add i32 %v4_a5e4, 1
  %v2_a5e8 = icmp eq i32 %v4_a5e4, -1
  store i1 %v2_a5e8, i1* %cpsr_c.global-to-local, align 1
  %v3_a5e8 = sub i32 0, %v4_a5e4
  %v4_a5e8 = and i32 %v1_a5e8, %v3_a5e8
  %v5_a5e8 = icmp slt i32 %v4_a5e8, 0
  store i1 %v5_a5e8, i1* %cpsr_v.global-to-local, align 1
  %v6_a5e8 = icmp slt i32 %v1_a5e8, 0
  store i1 %v6_a5e8, i1* %cpsr_n.global-to-local, align 1
  %v7_a5e8 = icmp eq i32 %v1_a5e8, 0
  store i1 %v7_a5e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_a5e4, i32* @r4, align 4
  br i1 %v7_a5e8, label %dec_label_pc_a6a0, label %dec_label_pc_a5f4

dec_label_pc_a5f4:                                ; preds = %bb230
  store i32 %v2_96a4, i32* %r2.global-to-local, align 4
  %v1_a5f8 = add i32 %v4_a5e4, -1
  %v2_a5f8 = icmp ne i32 %v4_a5e4, 0
  store i1 %v2_a5f8, i1* %cpsr_c.global-to-local, align 1
  %v3_a5f8 = sub i32 0, %v4_a5e4
  %v4_a5f8 = and i32 %v4_a5e4, %v3_a5f8
  %v5_a5f8 = icmp slt i32 %v4_a5f8, 0
  store i1 %v5_a5f8, i1* %cpsr_v.global-to-local, align 1
  %v6_a5f8 = icmp slt i32 %v1_a5f8, 0
  store i1 %v6_a5f8, i1* %cpsr_n.global-to-local, align 1
  %v7_a5f8 = icmp eq i32 %v4_a5e4, 1
  store i1 %v7_a5f8, i1* %cpsr_z.global-to-local, align 1
  %v7_a5fc = icmp slt i32 %v4_a5e4, 2
  br i1 %v7_a5fc, label %bb232, label %bb231

bb231:                                            ; preds = %dec_label_pc_a5f4
  %v9_a5fc = add i32 %v4_a5e4, -2
  store i32 %v9_a5fc, i32* @r4, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_a5f4, %bb231
  %v1_a600 = load i32, i32* @sl, align 4
  %v2_a600 = add i32 %v1_a600, %v2_96a4
  store i32 %v2_a600, i32* @r5, align 4
  %v0_a604 = load i32, i32* @r6, align 4
  store i32 %v0_a604, i32* %r0.global-to-local, align 4
  %v0_a608 = load i32, i32* @r7, align 4
  store i32 %v0_a608, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136bc.120 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_a614 = call i32 @function_12e00(i32 %v0_a604, i32 %v0_a608, i32 ptrtoint (i32* @global_var_136bc.120 to i32), i32 1)
  store i32 %v4_a614, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a618 = icmp slt i32 %v4_a614, 0
  store i1 %v1_a618, i1* %cpsr_n.global-to-local, align 1
  %v2_a618 = icmp eq i32 %v4_a614, 0
  store i1 %v2_a618, i1* %cpsr_z.global-to-local, align 1
  %tmp233 = icmp slt i32 %v4_a614, 1
  br i1 %tmp233, label %.dec_label_pc_a638_crit_edge, label %dec_label_pc_a620

.dec_label_pc_a638_crit_edge:                     ; preds = %bb232
  %v1_a640.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a638

dec_label_pc_a620:                                ; preds = %bb232
  %v0_a620 = load i32, i32* @r6, align 4
  store i32 %v0_a620, i32* %r0.global-to-local, align 4
  %v0_a624 = load i32, i32* @r7, align 4
  store i32 %v0_a624, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136bc.120 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_a630 = call i32 @function_12e00(i32 %v0_a620, i32 %v0_a624, i32 ptrtoint (i32* @global_var_136bc.120 to i32), i32 1)
  store i32 %v4_a630, i32* %r0.global-to-local, align 4
  %v1_a634 = add i32 %v4_a630, -1
  store i32 %v1_a634, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a638

dec_label_pc_a638:                                ; preds = %.dec_label_pc_a638_crit_edge, %dec_label_pc_a620
  %v1_a640 = phi i32 [ %v1_a640.pre, %.dec_label_pc_a638_crit_edge ], [ %v1_a634, %dec_label_pc_a620 ]
  store i32 %v2_9b6c, i32* %ip.global-to-local, align 4
  %v1_a648 = add i32 %v2_a640, %v1_a640
  store i32 %v1_a648, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_9714, i32* %r1.global-to-local, align 4
  %v3_a658 = load i32, i32* @sl, align 4
  %v4_a658 = add i32 %v3_a658, %v1_a648
  %v5_a658 = inttoptr i32 %v4_a658 to i8*
  store i8 0, i8* %v5_a658, align 1
  %storemerge5.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_a678.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a678

dec_label_pc_a664:                                ; preds = %dec_label_pc_a678
  br i1 %v7_a668, label %dec_label_pc_a6a8, label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %dec_label_pc_a664
  store i32 %v10_9714, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a678

dec_label_pc_a678:                                ; preds = %dec_label_pc_a638, %dec_label_pc_a670
  %v0_a678 = phi i32 [ %v0_a664, %dec_label_pc_a670 ], [ %v0_a678.pre, %dec_label_pc_a638 ]
  %storemerge5 = phi i32 [ %v1_a68c, %dec_label_pc_a670 ], [ %storemerge5.pre, %dec_label_pc_a638 ]
  store i32 %storemerge5, i32* %stack_var_-40, align 4
  store i32 %v0_a678, i32* %r0.global-to-local, align 4
  %v1_a67c = inttoptr i32 %v0_a678 to i8*
  %v2_a67c = call i32 @function_12d3c(i8* %v1_a67c)
  store i32 %v2_a67c, i32* %r0.global-to-local, align 4
  %v3_a684 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a684, i32* %r4.global-to-local, align 4
  %v2_a688 = sub i32 %v2_a67c, %v3_a684
  %v3_a688 = icmp uge i32 %v2_a67c, %v3_a684
  store i1 %v3_a688, i1* %cpsr_c.global-to-local, align 1
  %v4_a688 = xor i32 %v3_a684, %v2_a67c
  %v5_a688 = xor i32 %v2_a688, %v2_a67c
  %v6_a688 = and i32 %v5_a688, %v4_a688
  %v7_a688 = icmp slt i32 %v6_a688, 0
  store i1 %v7_a688, i1* %cpsr_v.global-to-local, align 1
  %v8_a688 = icmp slt i32 %v2_a688, 0
  store i1 %v8_a688, i1* %cpsr_n.global-to-local, align 1
  %v9_a688 = icmp eq i32 %v2_a67c, %v3_a684
  store i1 %v9_a688, i1* %cpsr_z.global-to-local, align 1
  %v1_a68c = add i32 %v3_a684, 1
  store i32 %v1_a68c, i32* %ip.global-to-local, align 4
  %v8_a690 = icmp sgt i32 %v2_a67c, %v3_a684
  %v0_a664 = load i32, i32* @r5, align 4
  %v2_a664 = add i32 %v0_a664, %v3_a684
  %v3_a664 = inttoptr i32 %v2_a664 to i8*
  %v4_a664 = load i8, i8* %v3_a664, align 1
  %v6_a664 = zext i8 %v4_a664 to i32
  store i32 %v6_a664, i32* %r3.global-to-local, align 4
  %v2_a668 = icmp ugt i8 %v4_a664, 60
  store i1 %v2_a668, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a668 = icmp ult i8 %v4_a664, 61
  store i1 %v6_a668, i1* %cpsr_n.global-to-local, align 1
  %v7_a668 = icmp eq i8 %v4_a664, 61
  store i1 %v7_a668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_a690, label %dec_label_pc_a664, label %dec_label_pc_a694

dec_label_pc_a694:                                ; preds = %dec_label_pc_a678
  br i1 %v7_a668, label %dec_label_pc_a6a8, label %dec_label_pc_a6a0

dec_label_pc_a6a0:                                ; preds = %dec_label_pc_a6ec, %dec_label_pc_a694, %bb230, %dec_label_pc_a710
  %v0_a6a0 = load i32, i32* @sl, align 4
  store i32 %v0_a6a0, i32* @r5, align 4
  br label %dec_label_pc_a54c

dec_label_pc_a6a8:                                ; preds = %dec_label_pc_a664, %dec_label_pc_a694
  %v0_a6a8 = load i32, i32* @r8, align 4
  %v1_a6a8 = add i32 %v0_a6a8, 12
  %v2_a6a8 = inttoptr i32 %v1_a6a8 to i32*
  %v3_a6a8 = load i32, i32* %v2_a6a8, align 4
  store i32 %v3_a6a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a6b4 = icmp slt i32 %v3_a6a8, 0
  store i1 %v1_a6b4, i1* %cpsr_n.global-to-local, align 1
  %v2_a6b4 = icmp eq i32 %v3_a6a8, 0
  store i1 %v2_a6b4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp234 = icmp slt i32 %v3_a6a8, 1
  br i1 %tmp234, label %dec_label_pc_a710, label %dec_label_pc_a6c0

dec_label_pc_a6c0:                                ; preds = %dec_label_pc_a6a8
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a6ec

dec_label_pc_a6c8:                                ; preds = %dec_label_pc_a6ec
  store i32 %v10_9714, i32* %r1.global-to-local, align 4
  %v3_a6cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a6cc, i32* %r3.global-to-local, align 4
  %v0_a6d0 = load i32, i32* @r8, align 4
  %v1_a6d0 = add i32 %v0_a6d0, 12
  %v2_a6d0 = inttoptr i32 %v1_a6d0 to i32*
  %v3_a6d0 = load i32, i32* %v2_a6d0, align 4
  %v1_a6d4 = add i32 %v3_a6cc, 1
  store i32 %v1_a6d4, i32* %ip.global-to-local, align 4
  %v2_a6d8 = sub i32 %v3_a6d0, %v1_a6d4
  %v3_a6d8 = icmp uge i32 %v3_a6d0, %v1_a6d4
  store i1 %v3_a6d8, i1* %cpsr_c.global-to-local, align 1
  %v4_a6d8 = xor i32 %v3_a6d0, %v1_a6d4
  %v5_a6d8 = xor i32 %v2_a6d8, %v3_a6d0
  %v6_a6d8 = and i32 %v5_a6d8, %v4_a6d8
  %v7_a6d8 = icmp slt i32 %v6_a6d8, 0
  store i1 %v7_a6d8, i1* %cpsr_v.global-to-local, align 1
  %v8_a6d8 = icmp slt i32 %v2_a6d8, 0
  store i1 %v8_a6d8, i1* %cpsr_n.global-to-local, align 1
  %v9_a6d8 = icmp eq i32 %v3_a6d0, %v1_a6d4
  store i1 %v9_a6d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_9714, i32* %r2.global-to-local, align 4
  store i32 %v1_a6d4, i32* %r1.global-to-local, align 4
  store i32 %v1_a6d4, i32* %stack_var_-40, align 4
  %v7_a6e8 = icmp sgt i32 %v3_a6d0, %v1_a6d4
  %v0_a6f8.pre = load i32, i32* @r5, align 4
  br i1 %v7_a6e8, label %dec_label_pc_a6c8.dec_label_pc_a6ec_crit_edge, label %dec_label_pc_a710

dec_label_pc_a6c8.dec_label_pc_a6ec_crit_edge:    ; preds = %dec_label_pc_a6c8
  %v0_a6fc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a6ec

dec_label_pc_a6ec:                                ; preds = %dec_label_pc_a6c8.dec_label_pc_a6ec_crit_edge, %dec_label_pc_a6c0
  %v0_a6fc = phi i32 [ %v0_a6fc.pre, %dec_label_pc_a6c8.dec_label_pc_a6ec_crit_edge ], [ %v3_a684, %dec_label_pc_a6c0 ]
  %v0_a6f8 = phi i32 [ %v0_a6f8.pre, %dec_label_pc_a6c8.dec_label_pc_a6ec_crit_edge ], [ %v0_a664, %dec_label_pc_a6c0 ]
  %v0_a6ec = phi i32 [ %v1_a6d4, %dec_label_pc_a6c8.dec_label_pc_a6ec_crit_edge ], [ 0, %dec_label_pc_a6c0 ]
  %v1_a6ec = and i32 %v0_a6ec, 33554432
  %v2_a6ec = icmp ne i32 %v1_a6ec, 0
  store i1 %v2_a6ec, i1* %cpsr_c.global-to-local, align 1
  %v3_a6ec = mul i32 %v0_a6ec, 128
  %v1_a6f0 = add i32 %v3_a6ec, 1472
  %v0_a6f4 = load i32, i32* %sb.global-to-local, align 4
  %v2_a6f4 = add i32 %v1_a6f0, %v0_a6f4
  store i32 %v2_a6f4, i32* %r1.global-to-local, align 4
  store i32 %v0_a6f8, i32* %r0.global-to-local, align 4
  store i32 %v0_a6fc, i32* %r2.global-to-local, align 4
  %v3_a700 = inttoptr i32 %v0_a6f8 to i8*
  %v4_a700 = call i32 @function_131a0(i8* %v3_a700, i32 %v2_a6f4, i32 %v0_a6fc)
  store i32 %v4_a700, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a704 = icmp slt i32 %v4_a700, 0
  store i1 %v1_a704, i1* %cpsr_n.global-to-local, align 1
  %v2_a704 = icmp eq i32 %v4_a700, 0
  store i1 %v2_a704, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a704, label %dec_label_pc_a6c8, label %dec_label_pc_a6a0

dec_label_pc_a710:                                ; preds = %dec_label_pc_a6c8, %dec_label_pc_a6a8
  %v0_a710 = phi i32 [ %v0_a664, %dec_label_pc_a6a8 ], [ %v0_a6f8.pre, %dec_label_pc_a6c8 ]
  store i32 %v0_a710, i32* %r0.global-to-local, align 4
  %v1_a714 = inttoptr i32 %v0_a710 to i8*
  %v2_a714 = call i32 @function_12d3c(i8* %v1_a714)
  store i32 %v2_a714, i32* %r0.global-to-local, align 4
  %v1_a718 = add i32 %v2_a714, -127
  %v2_a718 = icmp ugt i32 %v2_a714, 126
  store i1 %v2_a718, i1* %cpsr_c.global-to-local, align 1
  %v3_a718 = sub i32 126, %v2_a714
  %v4_a718 = and i32 %v3_a718, %v2_a714
  %v5_a718 = icmp slt i32 %v4_a718, 0
  store i1 %v5_a718, i1* %cpsr_v.global-to-local, align 1
  %v6_a718 = icmp slt i32 %v1_a718, 0
  store i1 %v6_a718, i1* %cpsr_n.global-to-local, align 1
  %v7_a718 = icmp eq i32 %v2_a714, 127
  store i1 %v7_a718, i1* %cpsr_z.global-to-local, align 1
  %v8_a71c = icmp sgt i32 %v2_a714, 127
  br i1 %v8_a71c, label %dec_label_pc_a6a0, label %dec_label_pc_a720

dec_label_pc_a720:                                ; preds = %dec_label_pc_a710
  %v0_a720 = load i32, i32* @r8, align 4
  %v1_a720 = add i32 %v0_a720, 12
  %v2_a720 = inttoptr i32 %v1_a720 to i32*
  %v3_a720 = load i32, i32* %v2_a720, align 4
  %v1_a724 = and i32 %v3_a720, 33554432
  %v2_a724 = icmp ne i32 %v1_a724, 0
  store i1 %v2_a724, i1* %cpsr_c.global-to-local, align 1
  %v3_a724 = mul i32 %v3_a720, 128
  %v1_a728 = add i32 %v3_a724, 1472
  %v0_a72c = load i32, i32* @r5, align 4
  store i32 %v0_a72c, i32* %r1.global-to-local, align 4
  %v0_a730 = load i32, i32* %sb.global-to-local, align 4
  %v2_a730 = add i32 %v1_a728, %v0_a730
  store i32 %v2_a730, i32* @r0, align 4
  %v2_a734 = inttoptr i32 %v2_a730 to i8*
  %v3_a734 = call i32 @function_12d64(i8* %v2_a734, i32 %v0_a72c)
  store i32 %v3_a734, i32* %r0.global-to-local, align 4
  %v0_a738 = load i32, i32* @r8, align 4
  %v1_a738 = add i32 %v0_a738, 12
  %v2_a738 = inttoptr i32 %v1_a738 to i32*
  %v3_a738 = load i32, i32* %v2_a738, align 4
  %v0_a73c = load i32, i32* @sl, align 4
  store i32 %v0_a73c, i32* @r5, align 4
  %v1_a740 = add i32 %v3_a738, 1
  store i32 %v1_a740, i32* %r3.global-to-local, align 4
  store i32 %v1_a740, i32* %v2_a738, align 4
  %v1_a558.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a54c

dec_label_pc_a74c:                                ; preds = %dec_label_pc_a580, %dec_label_pc_a54c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v3_a754 = call i32 @function_121a4(i32 45, i32* null)
  %v0_a758 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a758, i32* @r1, align 4
  store i32 %v3_a754, i32* %r2.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v4_a764 = call i32 @function_13090(i8* %tmp200, i32 %v0_a758, i32 %v3_a754)
  store i32 %v4_a764, i32* %r0.global-to-local, align 4
  %v1_a768 = add i32 %v4_a764, 1
  %v2_a768 = icmp eq i32 %v4_a764, -1
  store i1 %v2_a768, i1* %cpsr_c.global-to-local, align 1
  %v3_a768 = sub i32 0, %v4_a764
  %v4_a768 = and i32 %v1_a768, %v3_a768
  %v5_a768 = icmp slt i32 %v4_a768, 0
  store i1 %v5_a768, i1* %cpsr_v.global-to-local, align 1
  %v6_a768 = icmp slt i32 %v1_a768, 0
  store i1 %v6_a768, i1* %cpsr_n.global-to-local, align 1
  %v7_a768 = icmp eq i32 %v1_a768, 0
  store i1 %v7_a768, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a768, label %dec_label_pc_aa9c, label %dec_label_pc_a770

dec_label_pc_a770:                                ; preds = %dec_label_pc_a74c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v3_a778 = call i32 @function_121a4(i32 45, i32* null)
  %v0_a77c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a77c, i32* @r1, align 4
  store i32 %v3_a778, i32* %r2.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v4_a788 = call i32 @function_13090(i8* %tmp200, i32 %v0_a77c, i32 %v3_a778)
  store i32 %v4_a788, i32* %r0.global-to-local, align 4
  store i32 %v2_9b6c, i32* %ip.global-to-local, align 4
  %v2_a794 = add i32 %v4_a788, %v2_9b6c
  store i32 %v2_a794, i32* %r3.global-to-local, align 4
  %v1_a798 = load i32, i32* @r6, align 4
  %v2_a798 = add i32 %v1_a798, %v2_a794
  %v3_a798 = inttoptr i32 %v2_a798 to i8*
  %v4_a798 = load i8, i8* %v3_a798, align 1
  store i32 %v2_96a4, i32* %lr.global-to-local, align 4
  %v2_a7a0 = icmp ugt i8 %v4_a798, 31
  store i1 %v2_a7a0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a7a0 = icmp ult i8 %v4_a798, 32
  store i1 %v6_a7a0, i1* %cpsr_n.global-to-local, align 1
  %v7_a7a0 = icmp eq i8 %v4_a798, 32
  store i1 %v7_a7a0, i1* %cpsr_z.global-to-local, align 1
  %v2_a7a8 = zext i1 %v7_a7a0 to i32
  %v2_a7a8.v4_a788 = add i32 %v2_a7a8, %v4_a788
  store i32 %v2_a7a8.v4_a788, i32* @r4, align 4
  %v2_a7ac = add i32 %v2_a7a8.v4_a788, %v2_96a4
  store i32 %v2_a7ac, i32* @r5, align 4
  store i32 %v2_a7ac, i32* %r0.global-to-local, align 4
  %v1_a7b4 = load i32, i32* %fp.global-to-local, align 4
  %v2_a7b4 = sub i32 %v1_a7b4, %v2_a7a8.v4_a788
  store i32 %v2_a7b4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_a7c0 = call i32 @function_12e00(i32 %v2_a7ac, i32 %v2_a7b4, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32 2)
  store i32 %v4_a7c0, i32* %r0.global-to-local, align 4
  %v1_a7c4 = add i32 %v4_a7c0, 1
  %v2_a7c4 = icmp eq i32 %v4_a7c0, -1
  store i1 %v2_a7c4, i1* %cpsr_c.global-to-local, align 1
  %v3_a7c4 = sub i32 0, %v4_a7c0
  %v4_a7c4 = and i32 %v1_a7c4, %v3_a7c4
  %v5_a7c4 = icmp slt i32 %v4_a7c4, 0
  store i1 %v5_a7c4, i1* %cpsr_v.global-to-local, align 1
  %v6_a7c4 = icmp slt i32 %v1_a7c4, 0
  store i1 %v6_a7c4, i1* %cpsr_n.global-to-local, align 1
  %v7_a7c4 = icmp eq i32 %v1_a7c4, 0
  store i1 %v7_a7c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_a7c0, i32* %lr.global-to-local, align 4
  br i1 %v7_a7c4, label %dec_label_pc_aa9c, label %dec_label_pc_a7d0

dec_label_pc_a7d0:                                ; preds = %dec_label_pc_a770
  store i32 %v2_9b6c, i32* %r1.global-to-local, align 4
  %v1_a7d8 = add i32 %v4_a7c0, -1
  %v2_a7d8 = icmp ne i32 %v4_a7c0, 0
  store i1 %v2_a7d8, i1* %cpsr_c.global-to-local, align 1
  %v3_a7d8 = sub i32 0, %v4_a7c0
  %v4_a7d8 = and i32 %v4_a7c0, %v3_a7d8
  %v5_a7d8 = icmp slt i32 %v4_a7d8, 0
  store i1 %v5_a7d8, i1* %cpsr_v.global-to-local, align 1
  %v6_a7d8 = icmp slt i32 %v1_a7d8, 0
  store i1 %v6_a7d8, i1* %cpsr_n.global-to-local, align 1
  %v7_a7d8 = icmp eq i32 %v4_a7c0, 1
  store i1 %v7_a7d8, i1* %cpsr_z.global-to-local, align 1
  %v1_a7dc = load i32, i32* @r4, align 4
  %v2_a7dc = add i32 %v1_a7dc, %v2_9b6c
  store i32 %v2_a7dc, i32* %ip.global-to-local, align 4
  %v7_a7e0 = icmp sgt i32 %v4_a7c0, 1
  br i1 %v7_a7e0, label %bb235, label %bb236

bb235:                                            ; preds = %dec_label_pc_a7d0
  %v9_a7e0 = add i32 %v4_a7c0, -2
  store i32 %v9_a7e0, i32* %lr.global-to-local, align 4
  br label %bb236

bb236:                                            ; preds = %dec_label_pc_a7d0, %bb235
  %v3_a804 = phi i32 [ %v4_a7c0, %dec_label_pc_a7d0 ], [ %v9_a7e0, %bb235 ]
  %v1_a7e8 = add i32 %v3_a804, 1
  store i32 %v1_a7e8, i32* %r6.global-to-local, align 4
  %v1_a7ec = add i32 %v2_a7dc, -20773
  store i32 %v1_a7ec, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_a7f4 = load i32, i32* @r5, align 4
  store i32 %v0_a7f4, i32* %r0.global-to-local, align 4
  store i32 %v1_a7e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_136c0.122 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_a804 = add i32 %v3_a804, %v1_a7ec
  %v5_a804 = inttoptr i32 %v4_a804 to i8*
  store i8 0, i8* %v5_a804, align 1
  %v5_a808 = call i32 @function_12e00(i32 %v0_a7f4, i32 %v1_a7e8, i32 ptrtoint ([5 x i8]* @global_var_136c0.122 to i32), i32 4)
  store i32 %v5_a808, i32* %r0.global-to-local, align 4
  %v1_a80c = add i32 %v5_a808, -4
  %v2_a80c = icmp ugt i32 %v5_a808, 3
  store i1 %v2_a80c, i1* %cpsr_c.global-to-local, align 1
  %v3_a80c = sub i32 3, %v5_a808
  %v4_a80c = and i32 %v3_a80c, %v5_a808
  %v5_a80c = icmp slt i32 %v4_a80c, 0
  store i1 %v5_a80c, i1* %cpsr_v.global-to-local, align 1
  %v6_a80c = icmp slt i32 %v1_a80c, 0
  store i1 %v6_a80c, i1* %cpsr_n.global-to-local, align 1
  %v7_a80c = icmp eq i32 %v5_a808, 4
  store i1 %v7_a80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a80c, label %dec_label_pc_ad84, label %dec_label_pc_a814

dec_label_pc_a814:                                ; preds = %bb236
  store i32 %v2_96a4, i32* %ip.global-to-local, align 4
  %v1_a818 = load i32, i32* @r4, align 4
  %v2_a818 = add i32 %v1_a818, %v2_96a4
  %v3_a818 = inttoptr i32 %v2_a818 to i8*
  %v4_a818 = load i8, i8* %v3_a818, align 1
  %v6_a818 = zext i8 %v4_a818 to i32
  store i32 %v6_a818, i32* %r3.global-to-local, align 4
  %v2_a81c = icmp ugt i8 %v4_a818, 46
  store i1 %v2_a81c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a81c = icmp ult i8 %v4_a818, 47
  store i1 %v6_a81c, i1* %cpsr_n.global-to-local, align 1
  %v7_a81c = icmp eq i8 %v4_a818, 47
  store i1 %v7_a81c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a81c, label %dec_label_pc_af78, label %dec_label_pc_a824

dec_label_pc_a824:                                ; preds = %dec_label_pc_a8d0, %dec_label_pc_aebc, %dec_label_pc_afa8, %dec_label_pc_af78, %dec_label_pc_ae54, %dec_label_pc_ae38, %dec_label_pc_a814, %dec_label_pc_afc4, %dec_label_pc_ae84
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_a828 = load i32, i32* @r8, align 4
  %v3_a828 = add i32 %v2_a828, -1452
  %v4_a828 = inttoptr i32 %v3_a828 to i8*
  store i8 1, i8* %v4_a828, align 1
  br label %dec_label_pc_9c5c

dec_label_pc_a830:                                ; preds = %dec_label_pc_9c4c
  %v0_a830 = call i32* @__errno_location()
  %v1_a830 = ptrtoint i32* %v0_a830 to i32
  store i32 %v1_a830, i32* %r0.global-to-local, align 4
  %v0_a834 = load i32, i32* %sb.global-to-local, align 4
  %v1_a834 = add i32 %v0_a834, 1472
  store i32 %v1_a834, i32* %r3.global-to-local, align 4
  %v0_a83c = load i32, i32* @r8, align 4
  %v1_a83c = add i32 %v0_a83c, 656
  %v2_a83c = inttoptr i32 %v1_a83c to i32*
  %v3_a83c = load i32, i32* %v2_a83c, align 4
  store i32 %v3_a83c, i32* %r3.global-to-local, align 4
  %v1_a844 = add i32 %v3_a83c, -1024
  %v2_a844 = icmp ugt i32 %v3_a83c, 1023
  store i1 %v2_a844, i1* %cpsr_c.global-to-local, align 1
  %v3_a844 = sub i32 1023, %v3_a83c
  %v4_a844 = and i32 %v3_a844, %v3_a83c
  %v5_a844 = icmp slt i32 %v4_a844, 0
  store i1 %v5_a844, i1* %cpsr_v.global-to-local, align 1
  %v6_a844 = icmp slt i32 %v1_a844, 0
  store i1 %v6_a844, i1* %cpsr_n.global-to-local, align 1
  %v7_a844 = icmp eq i32 %v3_a83c, 1024
  store i1 %v7_a844, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a830, i32* %fp.global-to-local, align 4
  %v1_a84c = add i32 %v0_a834, 2116
  store i32 %v1_a84c, i32* @r7, align 4
  br i1 %v7_a844, label %dec_label_pc_a94c, label %dec_label_pc_a854

dec_label_pc_a854:                                ; preds = %dec_label_pc_a830, %dec_label_pc_a94c, %dec_label_pc_a940
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_a858 = load i32, i32* %fp.global-to-local, align 4
  %v2_a858 = inttoptr i32 %v1_a858 to i32*
  store i32 0, i32* %v2_a858, align 4
  %v0_a85c = load i32, i32* @r8, align 4
  %v1_a85c = add i32 %v0_a85c, 656
  %v2_a85c = inttoptr i32 %v1_a85c to i32*
  %v3_a85c = load i32, i32* %v2_a85c, align 4
  store i32 %v3_a85c, i32* %r1.global-to-local, align 4
  %v1_a860 = add i32 %v0_a85c, -1456
  %v2_a860 = inttoptr i32 %v1_a860 to i32*
  %v3_a860 = load i32, i32* %v2_a860, align 4
  store i32 %v3_a860, i32* %r0.global-to-local, align 4
  %v1_a864 = sub i32 1024, %v3_a85c
  store i32 %v1_a864, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a86c = load i32, i32* @r7, align 4
  %v2_a86c = add i32 %v0_a86c, %v3_a85c
  store i32 %v2_a86c, i32* %r1.global-to-local, align 4
  %v4_a870 = inttoptr i32 %v2_a86c to i32*
  %v5_a870 = call i32 @recv(i32 %v3_a860, i32* %v4_a870, i32 %v1_a864, i32 16384)
  store i32 %v5_a870, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a874 = icmp slt i32 %v5_a870, 0
  store i1 %v1_a874, i1* %cpsr_n.global-to-local, align 1
  %v2_a874 = icmp eq i32 %v5_a870, 0
  store i1 %v2_a874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a874, label %dec_label_pc_ad50, label %dec_label_pc_a87c

dec_label_pc_a87c:                                ; preds = %dec_label_pc_a854
  %v1_a87c = add i32 %v5_a870, 1
  %v2_a87c = icmp eq i32 %v5_a870, -1
  store i1 %v2_a87c, i1* %cpsr_c.global-to-local, align 1
  %v3_a87c = sub i32 0, %v5_a870
  %v4_a87c = and i32 %v1_a87c, %v3_a87c
  %v5_a87c = icmp slt i32 %v4_a87c, 0
  store i1 %v5_a87c, i1* %cpsr_v.global-to-local, align 1
  %v6_a87c = icmp slt i32 %v1_a87c, 0
  store i1 %v6_a87c, i1* %cpsr_n.global-to-local, align 1
  %v7_a87c = icmp eq i32 %v1_a87c, 0
  store i1 %v7_a87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a87c, label %dec_label_pc_ad74, label %dec_label_pc_a884

dec_label_pc_a884:                                ; preds = %dec_label_pc_a87c
  %v0_a884 = load i32, i32* @r8, align 4
  %v1_a884 = add i32 %v0_a884, 656
  %v2_a884 = inttoptr i32 %v1_a884 to i32*
  %v3_a884 = load i32, i32* %v2_a884, align 4
  store i32 %v2_9bfc, i32* %r1.global-to-local, align 4
  %v2_a88c = add i32 %v3_a884, %v5_a870
  store i32 %v2_a88c, i32* @r4, align 4
  store i32 %v2_a88c, i32* %v2_a884, align 4
  %v0_a894 = load i32, i32* %r1.global-to-local, align 4
  %v1_a894 = load i32, i32* @r8, align 4
  %v2_a894 = add i32 %v1_a894, -1448
  %v3_a894 = inttoptr i32 %v2_a894 to i32*
  store i32 %v0_a894, i32* %v3_a894, align 4
  br label %dec_label_pc_a920

dec_label_pc_a89c:                                ; preds = %dec_label_pc_a920
  %v1_a89c = add i32 %v0_a920, -4
  %v2_a89c = inttoptr i32 %v1_a89c to i32*
  %v3_a89c = load i32, i32* %v2_a89c, align 4
  store i32 %v3_a89c, i32* @sl, align 4
  %v1_a8a0 = load i32, i32* @r4, align 4
  %v5_a8a4 = icmp slt i32 %v3_a920, %v1_a8a0
  %storemerge74 = select i1 %v5_a8a4, i32 %v3_a920, i32 %v1_a8a0
  store i32 %storemerge74, i32* @r5, align 4
  %v2_a8ac = sub i32 %v3_a920, %storemerge74
  store i32 %v2_a8ac, i32* @r6, align 4
  %v1_a8b0 = add i32 %v3_a89c, -1
  %v2_a8b0 = icmp ne i32 %v3_a89c, 0
  store i1 %v2_a8b0, i1* %cpsr_c.global-to-local, align 1
  %v3_a8b0 = sub i32 0, %v3_a89c
  %v4_a8b0 = and i32 %v3_a89c, %v3_a8b0
  %v5_a8b0 = icmp slt i32 %v4_a8b0, 0
  store i1 %v5_a8b0, i1* %cpsr_v.global-to-local, align 1
  %v6_a8b0 = icmp slt i32 %v1_a8b0, 0
  store i1 %v6_a8b0, i1* %cpsr_n.global-to-local, align 1
  %v7_a8b0 = icmp eq i32 %v3_a89c, 1
  store i1 %v7_a8b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_a8ac, i32* %v2_a920, align 4
  br i1 %v7_a8b0, label %dec_label_pc_a96c, label %dec_label_pc_a89c.dec_label_pc_a8bcthread-pre-split_crit_edge

dec_label_pc_a89c.dec_label_pc_a8bcthread-pre-split_crit_edge: ; preds = %dec_label_pc_a89c
  %v0_a8bc.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_a8bc

dec_label_pc_a8bc:                                ; preds = %dec_label_pc_a92c, %dec_label_pc_a89c.dec_label_pc_a8bcthread-pre-split_crit_edge, %dec_label_pc_a994
  %v0_a8bc = phi i32 [ %v3_a994, %dec_label_pc_a994 ], [ %v0_a8bc.pr.pre, %dec_label_pc_a89c.dec_label_pc_a8bcthread-pre-split_crit_edge ], [ %v3_a920, %dec_label_pc_a92c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a8bc = icmp slt i32 %v0_a8bc, 0
  store i1 %v1_a8bc, i1* %cpsr_n.global-to-local, align 1
  %v2_a8bc = icmp eq i32 %v0_a8bc, 0
  store i1 %v2_a8bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a8bc, label %dec_label_pc_a8c4, label %dec_label_pc_a8e4

dec_label_pc_a8c4:                                ; preds = %dec_label_pc_a8bc
  %v0_a8c4 = load i32, i32* @r8, align 4
  %v1_a8c4 = add i32 %v0_a8c4, 4
  %v2_a8c4 = inttoptr i32 %v1_a8c4 to i32*
  %v3_a8c4 = load i32, i32* %v2_a8c4, align 4
  store i32 %v3_a8c4, i32* @r4, align 4
  %v1_a8c8 = add i32 %v3_a8c4, -1
  %v2_a8c8 = icmp ne i32 %v3_a8c4, 0
  store i1 %v2_a8c8, i1* %cpsr_c.global-to-local, align 1
  %v3_a8c8 = sub i32 0, %v3_a8c4
  %v4_a8c8 = and i32 %v3_a8c4, %v3_a8c8
  %v5_a8c8 = icmp slt i32 %v4_a8c8, 0
  store i1 %v5_a8c8, i1* %cpsr_v.global-to-local, align 1
  %v6_a8c8 = icmp slt i32 %v1_a8c8, 0
  store i1 %v6_a8c8, i1* %cpsr_n.global-to-local, align 1
  %v7_a8c8 = icmp eq i32 %v3_a8c4, 1
  store i1 %v7_a8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a8c8, label %dec_label_pc_a99c, label %dec_label_pc_a8d0

dec_label_pc_a8d0:                                ; preds = %dec_label_pc_a8c4
  %v1_a8d0 = add i32 %v0_a8c4, 656
  %v2_a8d0 = inttoptr i32 %v1_a8d0 to i32*
  %v3_a8d0 = load i32, i32* %v2_a8d0, align 4
  %v0_a8d4 = load i32, i32* @r5, align 4
  %v2_a8d4 = sub i32 %v3_a8d0, %v0_a8d4
  store i32 %v2_a8d4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a8d8 = icmp slt i32 %v2_a8d4, 0
  store i1 %v1_a8d8, i1* %cpsr_n.global-to-local, align 1
  %v2_a8d8 = icmp eq i32 %v2_a8d4, 0
  store i1 %v2_a8d8, i1* %cpsr_z.global-to-local, align 1
  %v2_a8dc = add i32 %v0_a8c4, 8
  %v3_a8dc = inttoptr i32 %v2_a8dc to i32*
  store i32 %v2_a8d4, i32* %v3_a8dc, align 4
  br i1 %v2_a8d8, label %dec_label_pc_a824, label %dec_label_pc_a8e4

dec_label_pc_a8e4:                                ; preds = %dec_label_pc_a8bc, %dec_label_pc_a99c, %dec_label_pc_a8d0, %dec_label_pc_aa24
  %v0_a8e4 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a8e4 = icmp slt i32 %v0_a8e4, 0
  store i1 %v1_a8e4, i1* %cpsr_n.global-to-local, align 1
  %v2_a8e4 = icmp eq i32 %v0_a8e4, 0
  store i1 %v2_a8e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a8e4, label %dec_label_pc_a934, label %dec_label_pc_a8ec

dec_label_pc_a8ec:                                ; preds = %dec_label_pc_a8e4
  %v0_a8ec = load i32, i32* @r8, align 4
  %v1_a8ec = add i32 %v0_a8ec, 656
  %v2_a8ec = inttoptr i32 %v1_a8ec to i32*
  %v3_a8ec = load i32, i32* %v2_a8ec, align 4
  store i32 %v3_a8ec, i32* %r3.global-to-local, align 4
  %v2_a8f0 = sub i32 %v3_a8ec, %v0_a8e4
  store i32 %v2_a8f0, i32* %r4.global-to-local, align 4
  store i32 %v2_a8f0, i32* %r2.global-to-local, align 4
  store i32 %v2_a8f0, i32* %v2_a8ec, align 4
  %v0_a8fc = load i32, i32* @r7, align 4
  %v1_a8fc = load i32, i32* @r5, align 4
  %v2_a8fc = add i32 %v1_a8fc, %v0_a8fc
  store i32 %v2_a8fc, i32* %r1.global-to-local, align 4
  store i32 %v0_a8fc, i32* %r0.global-to-local, align 4
  %v3_a904 = inttoptr i32 %v0_a8fc to i32*
  %v4_a904 = inttoptr i32 %v2_a8fc to i32*
  %v5_a904 = call i32* @memmove(i32* %v3_a904, i32* %v4_a904, i32 %v2_a8f0)
  %v7_a904 = ptrtoint i32* %v5_a904 to i32
  store i32 %v7_a904, i32* %r0.global-to-local, align 4
  %v0_a908 = load i32, i32* @r8, align 4
  %v1_a908 = add i32 %v0_a908, 656
  %v2_a908 = inttoptr i32 %v1_a908 to i32*
  %v3_a908 = load i32, i32* %v2_a908, align 4
  store i32 %v3_a908, i32* @r4, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_a910 = load i32, i32* %sb.global-to-local, align 4
  %v2_a910 = add i32 %v1_a910, %v3_a908
  store i32 %v2_a910, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a914 = icmp slt i32 %v3_a908, 0
  store i1 %v1_a914, i1* %cpsr_n.global-to-local, align 1
  %v2_a914 = icmp eq i32 %v3_a908, 0
  store i1 %v2_a914, i1* %cpsr_z.global-to-local, align 1
  %v3_a918 = add i32 %v2_a910, 2116
  %v4_a918 = inttoptr i32 %v3_a918 to i8*
  store i8 0, i8* %v4_a918, align 1
  %v0_a91c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a91c, label %dec_label_pc_a934, label %dec_label_pc_a920

dec_label_pc_a920:                                ; preds = %dec_label_pc_a8ec, %dec_label_pc_a884
  %v0_a920 = load i32, i32* @r8, align 4
  %v1_a920 = add i32 %v0_a920, 8
  %v2_a920 = inttoptr i32 %v1_a920 to i32*
  %v3_a920 = load i32, i32* %v2_a920, align 4
  store i32 %v3_a920, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_a924 = icmp slt i32 %v3_a920, 0
  store i1 %v1_a924, i1* %cpsr_n.global-to-local, align 1
  %v2_a924 = icmp eq i32 %v3_a920, 0
  store i1 %v2_a924, i1* %cpsr_z.global-to-local, align 1
  %v5_a928 = icmp sgt i32 %v3_a920, 0
  br i1 %v5_a928, label %dec_label_pc_a89c, label %dec_label_pc_a92c

dec_label_pc_a92c:                                ; preds = %dec_label_pc_a920
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_a8bc

dec_label_pc_a934:                                ; preds = %dec_label_pc_a8ec, %dec_label_pc_a8e4
  %v0_a934 = load i32, i32* @r8, align 4
  %v1_a934 = add i32 %v0_a934, -1452
  %v2_a934 = inttoptr i32 %v1_a934 to i8*
  %v3_a934 = load i8, i8* %v2_a934, align 1
  %v4_a934 = zext i8 %v3_a934 to i32
  store i32 %v4_a934, i32* %r3.global-to-local, align 4
  %v2_a938 = icmp ugt i8 %v3_a934, 6
  store i1 %v2_a938, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_a938 = icmp ult i8 %v3_a934, 7
  store i1 %v6_a938, i1* %cpsr_n.global-to-local, align 1
  %v7_a938 = icmp eq i8 %v3_a934, 7
  store i1 %v7_a938, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a938, label %dec_label_pc_a940, label %dec_label_pc_9c5c

dec_label_pc_a940:                                ; preds = %dec_label_pc_a934
  %v1_a940 = add i32 %v0_a934, 656
  %v2_a940 = inttoptr i32 %v1_a940 to i32*
  %v3_a940 = load i32, i32* %v2_a940, align 4
  store i32 %v3_a940, i32* %r3.global-to-local, align 4
  %v1_a944 = add i32 %v3_a940, -1024
  %v2_a944 = icmp ugt i32 %v3_a940, 1023
  store i1 %v2_a944, i1* %cpsr_c.global-to-local, align 1
  %v3_a944 = sub i32 1023, %v3_a940
  %v4_a944 = and i32 %v3_a944, %v3_a940
  %v5_a944 = icmp slt i32 %v4_a944, 0
  store i1 %v5_a944, i1* %cpsr_v.global-to-local, align 1
  %v6_a944 = icmp slt i32 %v1_a944, 0
  store i1 %v6_a944, i1* %cpsr_n.global-to-local, align 1
  %v7_a944 = icmp eq i32 %v3_a940, 1024
  store i1 %v7_a944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a944, label %dec_label_pc_a94c.loopexit, label %dec_label_pc_a854

dec_label_pc_a94c.loopexit:                       ; preds = %dec_label_pc_a940
  %v0_a94c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_a94c

dec_label_pc_a94c:                                ; preds = %dec_label_pc_a94c.loopexit, %dec_label_pc_a830
  %v0_a94c = phi i32 [ %v0_a94c.pre, %dec_label_pc_a94c.loopexit ], [ %v1_a84c, %dec_label_pc_a830 ]
  store i32 %v0_a94c, i32* %r0.global-to-local, align 4
  %v1_a950 = add i32 %v0_a94c, 64
  store i32 %v1_a950, i32* %r1.global-to-local, align 4
  store i32 960, i32* %r2.global-to-local, align 4
  %v3_a958 = inttoptr i32 %v0_a94c to i32*
  %v4_a958 = inttoptr i32 %v1_a950 to i32*
  %v5_a958 = call i32* @memmove(i32* %v3_a958, i32* %v4_a958, i32 960)
  %v7_a958 = ptrtoint i32* %v5_a958 to i32
  store i32 %v7_a958, i32* %r0.global-to-local, align 4
  %v0_a95c = load i32, i32* @r8, align 4
  %v1_a95c = add i32 %v0_a95c, 656
  %v2_a95c = inttoptr i32 %v1_a95c to i32*
  %v3_a95c = load i32, i32* %v2_a95c, align 4
  store i32 %v3_a95c, i32* %r3.global-to-local, align 4
  %v1_a960 = add i32 %v3_a95c, -64
  store i32 %v1_a960, i32* @r4, align 4
  store i32 %v1_a960, i32* %v2_a95c, align 4
  br label %dec_label_pc_a854

dec_label_pc_a96c:                                ; preds = %dec_label_pc_a89c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v3_a974 = call i32 @function_121a4(i32 43, i32* null)
  %v0_a978 = load i32, i32* @r4, align 4
  store i32 %v0_a978, i32* %r1.global-to-local, align 4
  store i32 %v3_a974, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_a984 = load i32, i32* @r7, align 4
  store i32 %v0_a984, i32* %r0.global-to-local, align 4
  %v4_a988 = call i32 @function_12e00(i32 %v0_a984, i32 %v0_a978, i32 %v3_a974, i32 11)
  store i32 %v4_a988, i32* %r0.global-to-local, align 4
  %v2_a98c = add i32 %v4_a988, 1
  %v3_a98c = icmp eq i32 %v4_a988, -1
  store i1 %v3_a98c, i1* %cpsr_c.global-to-local, align 1
  %v4_a98c = sub i32 0, %v4_a988
  %v5_a98c = and i32 %v2_a98c, %v4_a98c
  %v6_a98c = icmp slt i32 %v5_a98c, 0
  store i1 %v6_a98c, i1* %cpsr_v.global-to-local, align 1
  %v7_a98c = icmp slt i32 %v2_a98c, 0
  store i1 %v7_a98c, i1* %cpsr_n.global-to-local, align 1
  %v8_a98c = icmp eq i32 %v2_a98c, 0
  store i1 %v8_a98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a98c, label %dec_label_pc_a994, label %dec_label_pc_aef8

dec_label_pc_a994:                                ; preds = %dec_label_pc_a96c
  %v0_a994 = load i32, i32* @r8, align 4
  %v1_a994 = add i32 %v0_a994, 8
  %v2_a994 = inttoptr i32 %v1_a994 to i32*
  %v3_a994 = load i32, i32* %v2_a994, align 4
  store i32 %v3_a994, i32* @r6, align 4
  br label %dec_label_pc_a8bc

dec_label_pc_a99c:                                ; preds = %dec_label_pc_a8c4
  %v0_a99c = load i32, i32* @r7, align 4
  store i32 %v0_a99c, i32* %r0.global-to-local, align 4
  %v1_a9a0 = add i32 %v0_a8c4, 656
  %v2_a9a0 = inttoptr i32 %v1_a9a0 to i32*
  %v3_a9a0 = load i32, i32* %v2_a9a0, align 4
  store i32 %v3_a9a0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_a9ac = call i32 @function_12e00(i32 %v0_a99c, i32 %v3_a9a0, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32 2)
  store i32 %v4_a9ac, i32* %r0.global-to-local, align 4
  %v1_a9b0 = add i32 %v4_a9ac, 1
  %v2_a9b0 = icmp eq i32 %v4_a9ac, -1
  store i1 %v2_a9b0, i1* %cpsr_c.global-to-local, align 1
  %v3_a9b0 = sub i32 0, %v4_a9ac
  %v4_a9b0 = and i32 %v1_a9b0, %v3_a9b0
  %v5_a9b0 = icmp slt i32 %v4_a9b0, 0
  store i1 %v5_a9b0, i1* %cpsr_v.global-to-local, align 1
  %v6_a9b0 = icmp slt i32 %v1_a9b0, 0
  store i1 %v6_a9b0, i1* %cpsr_n.global-to-local, align 1
  %v7_a9b0 = icmp eq i32 %v1_a9b0, 0
  store i1 %v7_a9b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a9b0, label %dec_label_pc_a8e4, label %dec_label_pc_a9b8

dec_label_pc_a9b8:                                ; preds = %dec_label_pc_a99c
  %v0_a9b8 = load i32, i32* @r8, align 4
  %v1_a9b8 = add i32 %v0_a9b8, 656
  %v2_a9b8 = inttoptr i32 %v1_a9b8 to i32*
  %v3_a9b8 = load i32, i32* %v2_a9b8, align 4
  store i32 %v3_a9b8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_a9c4 = load i32, i32* @r7, align 4
  store i32 %v0_a9c4, i32* %r0.global-to-local, align 4
  %v4_a9c8 = call i32 @function_12e00(i32 %v0_a9c4, i32 %v3_a9b8, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32 2)
  %v1_a9cc = load i32, i32* %sb.global-to-local, align 4
  %v2_a9cc = add i32 %v1_a9cc, %v4_a9c8
  store i32 %v2_a9cc, i32* %ip.global-to-local, align 4
  store i32 %v4_a9c8, i32* @r5, align 4
  store i32 %v4_a9c8, i32* %r1.global-to-local, align 4
  %v0_a9d8 = load i32, i32* @r7, align 4
  store i32 %v0_a9d8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136bc.120 to i32), i32* %r2.global-to-local, align 4
  %v0_a9e0 = load i32, i32* @r4, align 4
  store i32 %v0_a9e0, i32* %r3.global-to-local, align 4
  %v0_a9e4 = load i32, i32* @r6, align 4
  %v1_a9e4 = trunc i32 %v0_a9e4 to i8
  %v3_a9e4 = add i32 %v2_a9cc, 2114
  %v4_a9e4 = inttoptr i32 %v3_a9e4 to i8*
  store i8 %v1_a9e4, i8* %v4_a9e4, align 1
  %v4_a9e8 = call i32 @function_12e00(i32 %v0_a9d8, i32 %v4_a9c8, i32 ptrtoint (i32* @global_var_136bc.120 to i32), i32 %v0_a9e0)
  store i32 %v4_a9e8, i32* %r0.global-to-local, align 4
  %v1_a9ec = add i32 %v4_a9e8, 1
  %v2_a9ec = icmp eq i32 %v4_a9e8, -1
  store i1 %v2_a9ec, i1* %cpsr_c.global-to-local, align 1
  %v3_a9ec = sub i32 0, %v4_a9e8
  %v4_a9ec = and i32 %v1_a9ec, %v3_a9ec
  %v5_a9ec = icmp slt i32 %v4_a9ec, 0
  store i1 %v5_a9ec, i1* %cpsr_v.global-to-local, align 1
  %v6_a9ec = icmp slt i32 %v1_a9ec, 0
  store i1 %v6_a9ec, i1* %cpsr_n.global-to-local, align 1
  %v7_a9ec = icmp eq i32 %v1_a9ec, 0
  store i1 %v7_a9ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a9ec, label %dec_label_pc_aa10, label %dec_label_pc_a9f4

dec_label_pc_a9f4:                                ; preds = %dec_label_pc_a9b8
  %v0_a9f4 = load i32, i32* @r7, align 4
  store i32 %v0_a9f4, i32* %r0.global-to-local, align 4
  %v0_a9f8 = load i32, i32* @r5, align 4
  store i32 %v0_a9f8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136bc.120 to i32), i32* %r2.global-to-local, align 4
  %v0_aa00 = load i32, i32* @r4, align 4
  store i32 %v0_aa00, i32* %r3.global-to-local, align 4
  %v4_aa04 = call i32 @function_12e00(i32 %v0_a9f4, i32 %v0_a9f8, i32 ptrtoint (i32* @global_var_136bc.120 to i32), i32 %v0_aa00)
  %v1_aa08 = load i32, i32* %sb.global-to-local, align 4
  %v2_aa08 = add i32 %v1_aa08, %v4_aa04
  store i32 %v2_aa08, i32* %r0.global-to-local, align 4
  %v0_aa0c = load i32, i32* @r6, align 4
  %v1_aa0c = trunc i32 %v0_aa0c to i8
  %v3_aa0c = add i32 %v2_aa08, 2116
  %v4_aa0c = inttoptr i32 %v3_aa0c to i8*
  store i8 %v1_aa0c, i8* %v4_aa0c, align 1
  br label %dec_label_pc_aa10

dec_label_pc_aa10:                                ; preds = %dec_label_pc_a9b8, %dec_label_pc_a9f4
  %v0_aa10 = load i32, i32* @r7, align 4
  store i32 %v0_aa10, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_aa18 = inttoptr i32 %v0_aa10 to i8*
  %v3_aa18 = call i32 @function_12e68(i8* %v2_aa18, i32 16)
  store i32 %v3_aa18, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_aa1c = icmp slt i32 %v3_aa18, 0
  store i1 %v1_aa1c, i1* %cpsr_n.global-to-local, align 1
  %v2_aa1c = icmp eq i32 %v3_aa18, 0
  store i1 %v2_aa1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aa1c, label %dec_label_pc_b1a8, label %dec_label_pc_aa24

dec_label_pc_aa24:                                ; preds = %dec_label_pc_aa10
  %v1_aa24 = add i32 %v3_aa18, 2
  store i32 %v1_aa24, i32* %r6.global-to-local, align 4
  %v1_aa28 = load i32, i32* @r8, align 4
  %v2_aa28 = add i32 %v1_aa28, 8
  %v3_aa28 = inttoptr i32 %v2_aa28 to i32*
  store i32 %v1_aa24, i32* %v3_aa28, align 4
  br label %dec_label_pc_a8e4

dec_label_pc_aa30:                                ; preds = %dec_label_pc_a0d8
  %v0_aa30 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_aa30, i32* %r1.global-to-local, align 4
  %v0_aa34 = load i32, i32* @r6, align 4
  store i32 %v0_aa34, i32* @r0, align 4
  %v2_aa38 = inttoptr i32 %v0_aa34 to i8*
  %v3_aa38 = call i32 @function_12d64(i8* %v2_aa38, i32 %v0_aa30)
  store i32 %v3_aa38, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0f0

dec_label_pc_aa40:                                ; preds = %dec_label_pc_9c54
  %v0_aa40 = call i32* @__errno_location()
  %v2_aa40 = ptrtoint i32* %v0_aa40 to i32
  store i32 %v2_aa40, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v2_aa40, i32* @r4, align 4
  br label %dec_label_pc_aa4c

dec_label_pc_aa4c:                                ; preds = %dec_label_pc_aa6c.dec_label_pc_aa4c_crit_edge, %dec_label_pc_aa40
  %v1_aa4c = phi i32 [ %v1_aa4c.pre, %dec_label_pc_aa6c.dec_label_pc_aa4c_crit_edge ], [ %v2_aa40, %dec_label_pc_aa40 ]
  %v0_aa4c = phi i32 [ %v0_aa4c.pre, %dec_label_pc_aa6c.dec_label_pc_aa4c_crit_edge ], [ 0, %dec_label_pc_aa40 ]
  %v2_aa4c = inttoptr i32 %v1_aa4c to i32*
  store i32 %v0_aa4c, i32* %v2_aa4c, align 4
  store i32 %v2_96a4, i32* %r1.global-to-local, align 4
  %v0_aa54 = load i32, i32* @r8, align 4
  %v1_aa54 = add i32 %v0_aa54, -1456
  %v2_aa54 = inttoptr i32 %v1_aa54 to i32*
  %v3_aa54 = load i32, i32* %v2_aa54, align 4
  store i32 %v3_aa54, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_aa60 = call i32 @recv(i32 %v3_aa54, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_aa60, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_aa64 = icmp slt i32 %v5_aa60, 0
  store i1 %v1_aa64, i1* %cpsr_n.global-to-local, align 1
  %v2_aa64 = icmp eq i32 %v5_aa60, 0
  store i1 %v2_aa64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aa64, label %dec_label_pc_ad44, label %dec_label_pc_aa6c

dec_label_pc_aa6c:                                ; preds = %dec_label_pc_aa4c
  %v2_aa6c = add i32 %v5_aa60, 1
  %v3_aa6c = icmp eq i32 %v5_aa60, -1
  store i1 %v3_aa6c, i1* %cpsr_c.global-to-local, align 1
  %v4_aa6c = sub i32 0, %v5_aa60
  %v5_aa6c = and i32 %v2_aa6c, %v4_aa6c
  %v6_aa6c = icmp slt i32 %v5_aa6c, 0
  store i1 %v6_aa6c, i1* %cpsr_v.global-to-local, align 1
  %v7_aa6c = icmp slt i32 %v2_aa6c, 0
  store i1 %v7_aa6c, i1* %cpsr_n.global-to-local, align 1
  %v8_aa6c = icmp eq i32 %v2_aa6c, 0
  store i1 %v8_aa6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_aa6c, label %dec_label_pc_aa74, label %dec_label_pc_aa6c.dec_label_pc_aa4c_crit_edge

dec_label_pc_aa6c.dec_label_pc_aa4c_crit_edge:    ; preds = %dec_label_pc_aa6c
  %v0_aa4c.pre = load i32, i32* @r5, align 4
  %v1_aa4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aa4c

dec_label_pc_aa74:                                ; preds = %dec_label_pc_aa6c
  %v0_aa74 = load i32, i32* @r4, align 4
  %v1_aa74 = inttoptr i32 %v0_aa74 to i32*
  %v2_aa74 = load i32, i32* %v1_aa74, align 4
  store i32 %v2_aa74, i32* %r3.global-to-local, align 4
  %v1_aa78 = add i32 %v2_aa74, -11
  %v2_aa78 = icmp ugt i32 %v2_aa74, 10
  store i1 %v2_aa78, i1* %cpsr_c.global-to-local, align 1
  %v3_aa78 = sub i32 10, %v2_aa74
  %v4_aa78 = and i32 %v3_aa78, %v2_aa74
  %v5_aa78 = icmp slt i32 %v4_aa78, 0
  store i1 %v5_aa78, i1* %cpsr_v.global-to-local, align 1
  %v6_aa78 = icmp slt i32 %v1_aa78, 0
  store i1 %v6_aa78, i1* %cpsr_n.global-to-local, align 1
  %v7_aa78 = icmp eq i32 %v2_aa74, 11
  store i1 %v7_aa78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa78, label %dec_label_pc_aebc, label %dec_label_pc_aa80

dec_label_pc_aa80:                                ; preds = %dec_label_pc_aa74, %dec_label_pc_ad44
  %v0_aa80 = load i32, i32* @r8, align 4
  %v1_aa80 = add i32 %v0_aa80, -1456
  %v2_aa80 = inttoptr i32 %v1_aa80 to i32*
  %v3_aa80 = load i32, i32* %v2_aa80, align 4
  store i32 %v3_aa80, i32* %r0.global-to-local, align 4
  %v1_aa84 = call i32 @close(i32 %v3_aa80)
  store i32 %v1_aa84, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_aa90 = load i32, i32* @r8, align 4
  %v2_aa90 = add i32 %v1_aa90, -1456
  %v3_aa90 = inttoptr i32 %v2_aa90 to i32*
  store i32 -1, i32* %v3_aa90, align 4
  %v0_aa94 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa94 = trunc i32 %v0_aa94 to i8
  %v2_aa94 = load i32, i32* @r8, align 4
  %v3_aa94 = add i32 %v2_aa94, -1452
  %v4_aa94 = inttoptr i32 %v3_aa94 to i8*
  store i8 %v1_aa94, i8* %v4_aa94, align 1
  br label %dec_label_pc_9c5c

dec_label_pc_aa9c:                                ; preds = %dec_label_pc_a770, %dec_label_pc_a74c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v3_aaa4 = call i32 @function_121a4(i32 44, i32* null)
  %v0_aaa8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_aaa8, i32* @r1, align 4
  store i32 %v3_aaa4, i32* %r2.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v4_aab4 = call i32 @function_13090(i8* %tmp200, i32 %v0_aaa8, i32 %v3_aaa4)
  store i32 %v4_aab4, i32* %r0.global-to-local, align 4
  %v1_aabc = add i32 %v4_aab4, 1
  %v2_aabc = icmp eq i32 %v4_aab4, -1
  store i1 %v2_aabc, i1* %cpsr_c.global-to-local, align 1
  %v3_aabc = sub i32 0, %v4_aab4
  %v4_aabc = and i32 %v1_aabc, %v3_aabc
  %v5_aabc = icmp slt i32 %v4_aabc, 0
  store i1 %v5_aabc, i1* %cpsr_v.global-to-local, align 1
  %v6_aabc = icmp slt i32 %v1_aabc, 0
  store i1 %v6_aabc, i1* %cpsr_n.global-to-local, align 1
  %v7_aabc = icmp eq i32 %v1_aabc, 0
  store i1 %v7_aabc, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_aabc, label %dec_label_pc_ace4, label %dec_label_pc_aac8

dec_label_pc_aac8:                                ; preds = %dec_label_pc_aa9c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v3_aad0 = call i32 @function_121a4(i32 44, i32* null)
  %v0_aad4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_aad4, i32* @r1, align 4
  store i32 %v3_aad0, i32* %r2.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v4_aae0 = call i32 @function_13090(i8* %tmp200, i32 %v0_aad4, i32 %v3_aad0)
  store i32 %v4_aae0, i32* %r0.global-to-local, align 4
  store i32 %v2_9b6c, i32* %ip.global-to-local, align 4
  %v2_aaec = add i32 %v4_aae0, %v2_9b6c
  store i32 %v2_aaec, i32* %r3.global-to-local, align 4
  %v1_aaf0 = load i32, i32* @r5, align 4
  %v2_aaf0 = add i32 %v1_aaf0, %v2_aaec
  %v3_aaf0 = inttoptr i32 %v2_aaf0 to i8*
  %v4_aaf0 = load i8, i8* %v3_aaf0, align 1
  store i32 %v2_96a4, i32* %lr.global-to-local, align 4
  %v2_aaf8 = icmp ugt i8 %v4_aaf0, 31
  store i1 %v2_aaf8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_aaf8 = icmp ult i8 %v4_aaf0, 32
  store i1 %v6_aaf8, i1* %cpsr_n.global-to-local, align 1
  %v7_aaf8 = icmp eq i8 %v4_aaf0, 32
  store i1 %v7_aaf8, i1* %cpsr_z.global-to-local, align 1
  %v2_ab00 = zext i1 %v7_aaf8 to i32
  %v2_ab00.v4_aae0 = add i32 %v2_ab00, %v4_aae0
  store i32 %v2_ab00.v4_aae0, i32* @r4, align 4
  %v2_ab04 = add i32 %v2_ab00.v4_aae0, %v2_96a4
  store i32 %v2_ab04, i32* @r6, align 4
  store i32 %v2_ab04, i32* %r0.global-to-local, align 4
  %v1_ab0c = load i32, i32* %fp.global-to-local, align 4
  %v2_ab0c = sub i32 %v1_ab0c, %v2_ab00.v4_aae0
  store i32 %v2_ab0c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v4_ab18 = call i32 @function_12e00(i32 %v2_ab04, i32 %v2_ab0c, i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32 2)
  store i32 %v4_ab18, i32* %r0.global-to-local, align 4
  %v1_ab1c = add i32 %v4_ab18, 1
  %v2_ab1c = icmp eq i32 %v4_ab18, -1
  store i1 %v2_ab1c, i1* %cpsr_c.global-to-local, align 1
  %v3_ab1c = sub i32 0, %v4_ab18
  %v4_ab1c = and i32 %v1_ab1c, %v3_ab1c
  %v5_ab1c = icmp slt i32 %v4_ab1c, 0
  store i1 %v5_ab1c, i1* %cpsr_v.global-to-local, align 1
  %v6_ab1c = icmp slt i32 %v1_ab1c, 0
  store i1 %v6_ab1c, i1* %cpsr_n.global-to-local, align 1
  %v7_ab1c = icmp eq i32 %v1_ab1c, 0
  store i1 %v7_ab1c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_ab18, i32* @r7, align 4
  br i1 %v7_ab1c, label %dec_label_pc_ace4, label %dec_label_pc_ab28

dec_label_pc_ab28:                                ; preds = %dec_label_pc_aac8
  store i32 %v2_9b6c, i32* %r1.global-to-local, align 4
  %v1_ab30 = load i32, i32* @r4, align 4
  %v2_ab30 = add i32 %v1_ab30, %v2_9b6c
  %v1_ab34 = add i32 %v4_ab18, -1
  %v2_ab34 = icmp ne i32 %v4_ab18, 0
  store i1 %v2_ab34, i1* %cpsr_c.global-to-local, align 1
  %v3_ab34 = sub i32 0, %v4_ab18
  %v4_ab34 = and i32 %v4_ab18, %v3_ab34
  %v5_ab34 = icmp slt i32 %v4_ab34, 0
  store i1 %v5_ab34, i1* %cpsr_v.global-to-local, align 1
  %v6_ab34 = icmp slt i32 %v1_ab34, 0
  store i1 %v6_ab34, i1* %cpsr_n.global-to-local, align 1
  %v7_ab34 = icmp eq i32 %v4_ab18, 1
  store i1 %v7_ab34, i1* %cpsr_z.global-to-local, align 1
  %v1_ab38 = add i32 %v2_ab30, -20736
  store i32 %v1_ab38, i32* %r3.global-to-local, align 4
  %v7_ab3c = icmp sgt i32 %v4_ab18, 1
  br i1 %v7_ab3c, label %bb237, label %bb238

bb237:                                            ; preds = %dec_label_pc_ab28
  %v9_ab3c = add i32 %v4_ab18, -2
  store i32 %v9_ab3c, i32* @r7, align 4
  br label %bb238

bb238:                                            ; preds = %dec_label_pc_ab28, %bb237
  %v3_ab48 = phi i32 [ %v4_ab18, %dec_label_pc_ab28 ], [ %v9_ab3c, %bb237 ]
  %v1_ab40 = add i32 %v2_ab30, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_ab48 = add i32 %v1_ab40, %v3_ab48
  %v5_ab48 = inttoptr i32 %v4_ab48 to i8*
  store i8 0, i8* %v5_ab48, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_9714, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_96a4, i32* %lr.global-to-local, align 4
  %v1_ab5c = load i32, i32* @r4, align 4
  %v2_ab5c = add i32 %v1_ab5c, %v2_96a4
  %v3_ab5c = inttoptr i32 %v2_ab5c to i8*
  %v4_ab5c = load i8, i8* %v3_ab5c, align 1
  %v6_ab5c = zext i8 %v4_ab5c to i32
  store i32 %v6_ab5c, i32* %r0.global-to-local, align 4
  %v1_ab60 = add nsw i32 %v6_ab5c, -48
  store i32 %v1_ab60, i32* %r3.global-to-local, align 4
  %v2_ab64 = icmp ugt i32 %v1_ab60, 8
  store i1 %v2_ab64, i1* %cpsr_c.global-to-local, align 1
  %v3_ab64 = sub nsw i32 56, %v6_ab5c
  %v4_ab64 = and i32 %v3_ab64, %v1_ab60
  %v5_ab64 = icmp slt i32 %v4_ab64, 0
  store i1 %v5_ab64, i1* %cpsr_v.global-to-local, align 1
  %v6_ab64 = icmp ult i8 %v4_ab5c, 57
  store i1 %v6_ab64, i1* %cpsr_n.global-to-local, align 1
  %v7_ab64 = icmp eq i32 %v1_ab60, 9
  store i1 %v7_ab64, i1* %cpsr_z.global-to-local, align 1
  %v2_ab68 = xor i1 %v7_ab64, true
  %v3_ab68 = and i1 %v2_ab64, %v2_ab68
  br i1 %v3_ab68, label %.thread143, label %dec_label_pc_ab70

.thread143:                                       ; preds = %bb238
  %v4_ab68 = load i32, i32* @r6, align 4
  br label %dec_label_pc_ab98

dec_label_pc_ab70:                                ; preds = %bb238
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ab80.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ab74

dec_label_pc_ab74:                                ; preds = %dec_label_pc_ab74, %dec_label_pc_ab70
  %v0_ab74 = phi i32 [ %v1_ab74, %dec_label_pc_ab74 ], [ 0, %dec_label_pc_ab70 ]
  %v1_ab74 = add i32 %v0_ab74, 1
  store i32 %v1_ab74, i32* %ip.global-to-local, align 4
  store i32 %v10_9714, i32* %r1.global-to-local, align 4
  store i32 %v1_ab74, i32* %stack_var_-40, align 4
  %v2_ab80 = add i32 %v1_ab74, %v1_ab80.pre
  %v3_ab80 = inttoptr i32 %v2_ab80 to i8*
  %v4_ab80 = load i8, i8* %v3_ab80, align 1
  %v6_ab80 = zext i8 %v4_ab80 to i32
  store i32 %v6_ab80, i32* %r0.global-to-local, align 4
  %v1_ab84 = add nsw i32 %v6_ab80, -48
  %v2_ab88 = icmp ugt i32 %v1_ab84, 8
  store i1 %v2_ab88, i1* %cpsr_c.global-to-local, align 1
  %v3_ab88 = sub nsw i32 56, %v6_ab80
  %v4_ab88 = and i32 %v3_ab88, %v1_ab84
  %v5_ab88 = icmp slt i32 %v4_ab88, 0
  store i1 %v5_ab88, i1* %cpsr_v.global-to-local, align 1
  %v6_ab88 = icmp ult i8 %v4_ab80, 57
  store i1 %v6_ab88, i1* %cpsr_n.global-to-local, align 1
  %v7_ab88 = icmp eq i32 %v1_ab84, 9
  store i1 %v7_ab88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ab74, i32* %r3.global-to-local, align 4
  %v2_ab90 = xor i1 %v2_ab88, true
  %v3_ab90 = or i1 %v7_ab88, %v2_ab90
  br i1 %v3_ab90, label %dec_label_pc_ab74, label %dec_label_pc_ab98

dec_label_pc_ab98:                                ; preds = %dec_label_pc_ab74, %.thread143
  %v2_aba4 = phi i32 [ %v4_ab68, %.thread143 ], [ %v2_ab80, %dec_label_pc_ab74 ]
  %v0_ab98 = phi i32 [ %v6_ab5c, %.thread143 ], [ %v6_ab80, %dec_label_pc_ab74 ]
  store i32 %v2_aba4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_ab98 = icmp eq i32 %v0_ab98, 0
  store i1 %v2_ab98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ab98, label %dec_label_pc_ace4, label %dec_label_pc_aba0

dec_label_pc_aba0:                                ; preds = %dec_label_pc_ab98
  store i32 0, i32* @r5, align 4
  %v3_aba4 = inttoptr i32 %v2_aba4 to i8*
  store i8 0, i8* %v3_aba4, align 1
  store i32 %v10_9714, i32* %r2.global-to-local, align 4
  %v3_abac = load i32, i32* %stack_var_-40, align 4
  %v1_abb0 = add i32 %v3_abac, 1
  store i32 %v1_abb0, i32* %ip.global-to-local, align 4
  store i32 %v1_abb0, i32* %stack_var_-40, align 4
  %v0_abb8 = load i32, i32* @r6, align 4
  %v2_abb8 = add i32 %v0_abb8, %v1_abb0
  %v3_abb8 = inttoptr i32 %v2_abb8 to i8*
  %v4_abb8 = load i8, i8* %v3_abb8, align 1
  %v6_abb8 = zext i8 %v4_abb8 to i32
  store i32 %v6_abb8, i32* %r3.global-to-local, align 4
  %v2_abbc = icmp ugt i8 %v4_abb8, 31
  store i1 %v2_abbc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_abbc = icmp ult i8 %v4_abb8, 32
  store i1 %v6_abbc, i1* %cpsr_n.global-to-local, align 1
  %v7_abbc = icmp eq i8 %v4_abb8, 32
  store i1 %v7_abbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_abbc, label %bb239, label %.thread57

.thread57:                                        ; preds = %dec_label_pc_aba0
  store i32 %v2_abb8, i32* @r4, align 4
  br label %bb240

bb239:                                            ; preds = %dec_label_pc_aba0
  %v2_abc0 = add i32 %v3_abac, 2
  store i32 %v2_abc0, i32* %ip.global-to-local, align 4
  %v2_abc4 = add i32 %v0_abb8, %v2_abc0
  store i32 %v2_abc4, i32* @r4, align 4
  store i32 %v2_abc0, i32* %stack_var_-40, align 4
  br label %bb240

bb240:                                            ; preds = %.thread57, %bb239
  %v0_abcc = phi i32 [ %v2_abb8, %.thread57 ], [ %v2_abc4, %bb239 ]
  store i32 %v0_abcc, i32* %r0.global-to-local, align 4
  %v1_abd0 = inttoptr i32 %v0_abcc to i8*
  %v2_abd0 = call i32 @function_12d3c(i8* %v1_abd0)
  store i32 ptrtoint ([5 x i8]* @global_var_136c8.124 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_abd0, i32* @r1, align 4
  %v0_abdc = load i32, i32* @r4, align 4
  store i32 %v0_abdc, i32* %r0.global-to-local, align 4
  %v4_abe0 = inttoptr i32 %v0_abdc to i8*
  %v5_abe0 = call i32 @function_13090(i8* %v4_abe0, i32 %v2_abd0, i32 ptrtoint ([5 x i8]* @global_var_136c8.124 to i32))
  store i32 %v5_abe0, i32* %r0.global-to-local, align 4
  %v1_abe4 = add i32 %v5_abe0, 1
  %v2_abe4 = icmp eq i32 %v5_abe0, -1
  store i1 %v2_abe4, i1* %cpsr_c.global-to-local, align 1
  %v3_abe4 = sub i32 0, %v5_abe0
  %v4_abe4 = and i32 %v1_abe4, %v3_abe4
  %v5_abe4 = icmp slt i32 %v4_abe4, 0
  store i1 %v5_abe4, i1* %cpsr_v.global-to-local, align 1
  %v6_abe4 = icmp slt i32 %v1_abe4, 0
  store i1 %v6_abe4, i1* %cpsr_n.global-to-local, align 1
  %v7_abe4 = icmp eq i32 %v1_abe4, 0
  store i1 %v7_abe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_abe4, label %.thread61, label %dec_label_pc_abf4

.thread61:                                        ; preds = %bb240
  store i32 %v10_9714, i32* %r1.global-to-local, align 4
  %v4_abec = load i32, i32* %v11_9718, align 4
  store i32 %v4_abec, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ac28

dec_label_pc_abf4:                                ; preds = %bb240
  store i32 %v10_9714, i32* %r3.global-to-local, align 4
  %v3_abf8 = load i32, i32* %stack_var_-40, align 4
  %v0_abfc = load i32, i32* @r6, align 4
  %v2_abfc = add i32 %v0_abfc, %v3_abf8
  store i32 %v2_abfc, i32* @r4, align 4
  store i32 %v2_abfc, i32* %r0.global-to-local, align 4
  %v1_ac04 = inttoptr i32 %v2_abfc to i8*
  %v2_ac04 = call i32 @function_12d3c(i8* %v1_ac04)
  store i32 ptrtoint ([5 x i8]* @global_var_136c8.124 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_ac04, i32* @r1, align 4
  %v0_ac10 = load i32, i32* @r4, align 4
  store i32 %v0_ac10, i32* %r0.global-to-local, align 4
  %v4_ac14 = inttoptr i32 %v0_ac10 to i8*
  %v5_ac14 = call i32 @function_13090(i8* %v4_ac14, i32 %v2_ac04, i32 ptrtoint ([5 x i8]* @global_var_136c8.124 to i32))
  store i32 %v5_ac14, i32* %r0.global-to-local, align 4
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  %v3_ac1c = load i32, i32* %stack_var_-40, align 4
  %v2_ac20 = add i32 %v3_ac1c, %v5_ac14
  store i32 %v2_ac20, i32* %ip.global-to-local, align 4
  store i32 %v2_ac20, i32* %stack_var_-40, align 4
  br label %dec_label_pc_ac28

dec_label_pc_ac28:                                ; preds = %.thread61, %dec_label_pc_abf4
  %v0_b1b0 = phi i32 [ %v4_abec, %.thread61 ], [ %v2_ac20, %dec_label_pc_abf4 ]
  %v0_ac28 = load i32, i32* @r6, align 4
  %v2_ac28 = add i32 %v0_ac28, %v0_b1b0
  %v3_ac28 = inttoptr i32 %v2_ac28 to i8*
  %v4_ac28 = load i8, i8* %v3_ac28, align 1
  %v6_ac28 = zext i8 %v4_ac28 to i32
  store i32 %v6_ac28, i32* %r3.global-to-local, align 4
  %v2_ac2c = icmp ugt i8 %v4_ac28, 33
  store i1 %v2_ac2c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_ac2c = icmp ult i8 %v4_ac28, 34
  store i1 %v6_ac2c, i1* %cpsr_n.global-to-local, align 1
  %v7_ac2c = icmp eq i8 %v4_ac28, 34
  store i1 %v7_ac2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ac2c, label %dec_label_pc_b1b0, label %dec_label_pc_ac34

dec_label_pc_ac34:                                ; preds = %dec_label_pc_b1b0, %dec_label_pc_ac28, %dec_label_pc_b1d8
  %v0_ac34 = load i32, i32* @r6, align 4
  store i32 %v0_ac34, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_ac3c = inttoptr i32 %v0_ac34 to i8*
  %v3_ac3c = call i32 @function_12e68(i8* %v2_ac3c, i32 10)
  store i32 %v3_ac3c, i32* %r0.global-to-local, align 4
  %v1_ac40 = add i32 %v3_ac3c, -1
  store i32 %v1_ac40, i32* %r3.global-to-local, align 4
  %v1_ac44 = add i32 %v3_ac3c, -9
  %v2_ac44 = icmp ugt i32 %v1_ac40, 7
  store i1 %v2_ac44, i1* %cpsr_c.global-to-local, align 1
  %v3_ac44 = sub i32 8, %v3_ac3c
  %v4_ac44 = and i32 %v3_ac44, %v1_ac40
  %v5_ac44 = icmp slt i32 %v4_ac44, 0
  store i1 %v5_ac44, i1* %cpsr_v.global-to-local, align 1
  %v6_ac44 = icmp slt i32 %v1_ac44, 0
  store i1 %v6_ac44, i1* %cpsr_n.global-to-local, align 1
  %v7_ac44 = icmp eq i32 %v1_ac40, 8
  store i1 %v7_ac44, i1* %cpsr_z.global-to-local, align 1
  %v2_ac48 = xor i1 %v2_ac44, true
  %v3_ac48 = or i1 %v7_ac44, %v2_ac48
  br i1 %v3_ac48, label %dec_label_pc_ac5c.preheader, label %dec_label_pc_ac70

dec_label_pc_ac5c.preheader:                      ; preds = %dec_label_pc_ac34
  store i32 %v2_9bfc, i32* %ip.global-to-local, align 4
  %v6_ac4c = add i32 %v3_ac3c, %v2_9bfc
  store i32 %v6_ac4c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ac5c

dec_label_pc_ac58:                                ; preds = %dec_label_pc_ac5c
  %v1_ac58 = call i32 @sleep(i32 1)
  store i32 %v1_ac58, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ac5c

dec_label_pc_ac5c:                                ; preds = %dec_label_pc_ac5c.preheader, %dec_label_pc_ac58
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ac60 = call i32 @time(i32* null)
  %v1_ac64 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac64 = sub i32 %v2_ac60, %v1_ac64
  %v3_ac64 = icmp uge i32 %v2_ac60, %v1_ac64
  store i1 %v3_ac64, i1* %cpsr_c.global-to-local, align 1
  %v4_ac64 = xor i32 %v1_ac64, %v2_ac60
  %v5_ac64 = xor i32 %v2_ac64, %v2_ac60
  %v6_ac64 = and i32 %v5_ac64, %v4_ac64
  %v7_ac64 = icmp slt i32 %v6_ac64, 0
  store i1 %v7_ac64, i1* %cpsr_v.global-to-local, align 1
  %v8_ac64 = icmp slt i32 %v2_ac64, 0
  store i1 %v8_ac64, i1* %cpsr_n.global-to-local, align 1
  %v9_ac64 = icmp eq i32 %v2_ac60, %v1_ac64
  store i1 %v9_ac64, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_ac64, label %dec_label_pc_ac70, label %dec_label_pc_ac58

dec_label_pc_ac70:                                ; preds = %dec_label_pc_ac5c, %dec_label_pc_ac34
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  %v3_ac74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ac74, i32* @r4, align 4
  %v0_ac78 = load i32, i32* @r6, align 4
  %v2_ac78 = add i32 %v0_ac78, %v3_ac74
  store i32 %v2_ac78, i32* @r5, align 4
  store i32 %v2_ac78, i32* %r0.global-to-local, align 4
  %v1_ac80 = inttoptr i32 %v2_ac78 to i8*
  %v2_ac80 = call i32 @function_12d3c(i8* %v1_ac80)
  store i32 ptrtoint ([5 x i8]* @global_var_136c0.122 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_ac80, i32* @r1, align 4
  %v0_ac8c = load i32, i32* @r5, align 4
  store i32 %v0_ac8c, i32* %r0.global-to-local, align 4
  %v4_ac90 = inttoptr i32 %v0_ac8c to i8*
  %v5_ac90 = call i32 @function_13090(i8* %v4_ac90, i32 %v2_ac80, i32 ptrtoint ([5 x i8]* @global_var_136c0.122 to i32))
  store i32 %v5_ac90, i32* %r0.global-to-local, align 4
  %v1_ac94 = add i32 %v5_ac90, -4
  %v2_ac94 = icmp ugt i32 %v5_ac90, 3
  store i1 %v2_ac94, i1* %cpsr_c.global-to-local, align 1
  %v3_ac94 = sub i32 3, %v5_ac90
  %v4_ac94 = and i32 %v3_ac94, %v5_ac90
  %v5_ac94 = icmp slt i32 %v4_ac94, 0
  store i1 %v5_ac94, i1* %cpsr_v.global-to-local, align 1
  %v6_ac94 = icmp slt i32 %v1_ac94, 0
  store i1 %v6_ac94, i1* %cpsr_n.global-to-local, align 1
  %v7_ac94 = icmp eq i32 %v5_ac90, 4
  store i1 %v7_ac94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ac94, label %dec_label_pc_b08c, label %dec_label_pc_ac9c

dec_label_pc_ac9c:                                ; preds = %dec_label_pc_ac70
  %v0_ac9c = load i32, i32* @r6, align 4
  %v1_ac9c = load i32, i32* @r4, align 4
  %v2_ac9c = add i32 %v1_ac9c, %v0_ac9c
  %v3_ac9c = inttoptr i32 %v2_ac9c to i8*
  %v4_ac9c = load i8, i8* %v3_ac9c, align 1
  %v6_ac9c = zext i8 %v4_ac9c to i32
  store i32 %v6_ac9c, i32* %r3.global-to-local, align 4
  %v2_aca0 = icmp ugt i8 %v4_ac9c, 46
  store i1 %v2_aca0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_aca0 = icmp ult i8 %v4_ac9c, 47
  store i1 %v6_aca0, i1* %cpsr_n.global-to-local, align 1
  %v7_aca0 = icmp eq i8 %v4_ac9c, 47
  store i1 %v7_aca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aca0, label %dec_label_pc_b204, label %dec_label_pc_aca8

dec_label_pc_aca8:                                ; preds = %dec_label_pc_b220, %dec_label_pc_b204, %dec_label_pc_b15c, %dec_label_pc_b140, %dec_label_pc_ac9c, %dec_label_pc_b250, %dec_label_pc_b18c
  %v0_aca8 = load i32, i32* %sb.global-to-local, align 4
  %v1_acac = add i32 %v0_aca8, 1431
  store i32 %v1_acac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1369c.100 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_acb8 = inttoptr i32 %v1_acac to i32*
  %v5_acb8 = call i32* @memcpy(i32* %v3_acb8, i32* bitcast ([4 x i8]* @global_var_1369c.100 to i32*), i32 4)
  %v7_acb8 = ptrtoint i32* %v5_acb8 to i32
  store i32 %v7_acb8, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_acc0 = load i32, i32* @r8, align 4
  %v3_acc0 = add i32 %v2_acc0, -1452
  %v4_acc0 = inttoptr i32 %v3_acc0 to i8*
  store i8 10, i8* %v4_acc0, align 1
  br label %dec_label_pc_9c5c

dec_label_pc_acc8:                                ; preds = %dec_label_pc_9a34
  store i32 %v1_9a34, i32* %r3.global-to-local, align 4
  %v1_accc = trunc i32 %v1_9a34 to i8
  store i8 %v1_accc, i8* %v2_9a74, align 1
  %v0_acd0 = load i32, i32* @r6, align 4
  %v1_acd0 = add i32 %v0_acd0, -1431
  %v2_acd0 = inttoptr i32 %v1_acd0 to i32*
  %v3_acd0 = load i32, i32* %v2_acd0, align 4
  store i32 %v3_acd0, i32* %r0.global-to-local, align 4
  %v1_acd4 = call i32 @close(i32 %v3_acd0)
  store i32 %v1_acd4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_acdc = load i32, i32* @r6, align 4
  %v2_acdc = add i32 %v1_acdc, -1431
  %v3_acdc = inttoptr i32 %v2_acdc to i32*
  store i32 -1, i32* %v3_acdc, align 4
  br label %dec_label_pc_9a54

dec_label_pc_ace4:                                ; preds = %dec_label_pc_ab98, %dec_label_pc_aac8, %dec_label_pc_aa9c
  %v0_ace4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_ace4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_136b4.118 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_96a4, i32* %r0.global-to-local, align 4
  %v5_acf4 = call i32 @function_12e00(i32 %v2_96a4, i32 %v0_ace4, i32 ptrtoint ([5 x i8]* @global_var_136b4.118 to i32), i32 4)
  %v0_acf8 = load i32, i32* %sb.global-to-local, align 4
  %v1_acfc = add i32 %v0_acf8, 1431
  store i32 %v1_acfc, i32* @r4, align 4
  store i32 %v5_acf4, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_136d0.126 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_acfc, i32* %r0.global-to-local, align 4
  %v3_ad0c = inttoptr i32 %v1_acfc to i8*
  %v4_ad0c = call i32 @function_1311c(i8* %v3_ad0c, i32 ptrtoint ([5 x i8]* @global_var_136d0.126 to i32))
  store i32 %v4_ad0c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_ad10 = icmp slt i32 %v4_ad0c, 0
  store i1 %v1_ad10, i1* %cpsr_n.global-to-local, align 1
  %v2_ad10 = icmp eq i32 %v4_ad0c, 0
  store i1 %v2_ad10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ad10, label %dec_label_pc_aecc, label %dec_label_pc_ad18

dec_label_pc_ad18:                                ; preds = %dec_label_pc_aecc, %dec_label_pc_ace4
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_ad1c = load i32, i32* @r8, align 4
  %v3_ad1c = add i32 %v2_ad1c, -1452
  %v4_ad1c = inttoptr i32 %v3_ad1c to i8*
  store i8 7, i8* %v4_ad1c, align 1
  br label %dec_label_pc_ad20

dec_label_pc_ad20:                                ; preds = %bb246, %dec_label_pc_ad18
  %v0_ad20 = load i32, i32* @r5, align 4
  store i32 %v0_ad20, i32* %r2.global-to-local, align 4
  %v0_ad24 = load i32, i32* @r8, align 4
  %v1_ad24 = add i32 %v0_ad24, -1456
  %v2_ad24 = inttoptr i32 %v1_ad24 to i32*
  %v3_ad24 = load i32, i32* %v2_ad24, align 4
  store i32 %v3_ad24, i32* %r0.global-to-local, align 4
  store i32 %v2_96a4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_ad30 = call i32 @recv(i32 %v3_ad24, i32* nonnull %stack_var_-20809, i32 %v0_ad20, i32 16384)
  store i32 %v5_ad30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c5c

dec_label_pc_ad38:                                ; preds = %dec_label_pc_a228
  %v2_ad38 = add i32 %v0_ad38, -10240
  %v3_ad38 = icmp ugt i32 %v0_ad38, 10239
  store i1 %v3_ad38, i1* %cpsr_c.global-to-local, align 1
  %v4_ad38 = sub i32 10239, %v0_ad38
  %v5_ad38 = and i32 %v4_ad38, %v0_ad38
  %v6_ad38 = icmp slt i32 %v5_ad38, 0
  store i1 %v6_ad38, i1* %cpsr_v.global-to-local, align 1
  %v7_ad38 = icmp slt i32 %v2_ad38, 0
  store i1 %v7_ad38, i1* %cpsr_n.global-to-local, align 1
  %v8_ad38 = icmp eq i32 %v0_ad38, 10240
  store i1 %v8_ad38, i1* %cpsr_z.global-to-local, align 1
  %v5_ad3c = icmp slt i32 %v0_ad38, 10240
  br i1 %v5_ad3c, label %dec_label_pc_9c5c, label %dec_label_pc_a244

dec_label_pc_ad44:                                ; preds = %dec_label_pc_aa4c
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_ad48 = load i32, i32* @r4, align 4
  %v2_ad48 = inttoptr i32 %v1_ad48 to i32*
  store i32 104, i32* %v2_ad48, align 4
  br label %dec_label_pc_aa80

dec_label_pc_ad50:                                ; preds = %dec_label_pc_a854
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_ad54 = load i32, i32* %fp.global-to-local, align 4
  %v2_ad54 = inttoptr i32 %v1_ad54 to i32*
  store i32 104, i32* %v2_ad54, align 4
  br label %dec_label_pc_ad58

dec_label_pc_ad58:                                ; preds = %dec_label_pc_ad74, %dec_label_pc_ad50
  %v0_ad58 = load i32, i32* @r8, align 4
  %v1_ad58 = add i32 %v0_ad58, -1456
  %v2_ad58 = inttoptr i32 %v1_ad58 to i32*
  %v3_ad58 = load i32, i32* %v2_ad58, align 4
  store i32 %v3_ad58, i32* %r0.global-to-local, align 4
  %v1_ad5c = call i32 @close(i32 %v3_ad58)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_ad68 = load i32, i32* @r8, align 4
  %v2_ad68 = add i32 %v1_ad68, -1456
  %v3_ad68 = inttoptr i32 %v2_ad68 to i32*
  store i32 -1, i32* %v3_ad68, align 4
  %v0_ad6c = load i32, i32* %lr.global-to-local, align 4
  %v1_ad6c = trunc i32 %v0_ad6c to i8
  %v2_ad6c = load i32, i32* @r8, align 4
  %v3_ad6c = add i32 %v2_ad6c, -1452
  %v4_ad6c = inttoptr i32 %v3_ad6c to i8*
  store i8 %v1_ad6c, i8* %v4_ad6c, align 1
  br label %dec_label_pc_9c5c

dec_label_pc_ad74:                                ; preds = %dec_label_pc_a87c
  %v0_ad74 = load i32, i32* %fp.global-to-local, align 4
  %v1_ad74 = inttoptr i32 %v0_ad74 to i32*
  %v2_ad74 = load i32, i32* %v1_ad74, align 4
  store i32 %v2_ad74, i32* %r3.global-to-local, align 4
  %v1_ad78 = add i32 %v2_ad74, -11
  %v2_ad78 = icmp ugt i32 %v2_ad74, 10
  store i1 %v2_ad78, i1* %cpsr_c.global-to-local, align 1
  %v3_ad78 = sub i32 10, %v2_ad74
  %v4_ad78 = and i32 %v3_ad78, %v2_ad74
  %v5_ad78 = icmp slt i32 %v4_ad78, 0
  store i1 %v5_ad78, i1* %cpsr_v.global-to-local, align 1
  %v6_ad78 = icmp slt i32 %v1_ad78, 0
  store i1 %v6_ad78, i1* %cpsr_n.global-to-local, align 1
  %v7_ad78 = icmp eq i32 %v2_ad74, 11
  store i1 %v7_ad78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad78, label %dec_label_pc_9c5c, label %dec_label_pc_ad58

dec_label_pc_ad84:                                ; preds = %bb236
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_9714, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_ad90 = load i32, i32* @r5, align 4
  %v1_ad90 = add i32 %v0_ad90, 4
  %v2_ad90 = inttoptr i32 %v1_ad90 to i8*
  %v3_ad90 = load i8, i8* %v2_ad90, align 1
  %v4_ad90 = zext i8 %v3_ad90 to i32
  store i32 %v4_ad90, i32* %r3.global-to-local, align 4
  %v2_ad94 = icmp ugt i8 %v3_ad90, 114
  store i1 %v2_ad94, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_ad94 = icmp ult i8 %v3_ad90, 115
  store i1 %v6_ad94, i1* %cpsr_n.global-to-local, align 1
  %v7_ad94 = icmp eq i8 %v3_ad90, 115
  store i1 %v7_ad94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad94, label %bb241, label %.thread64

bb241:                                            ; preds = %dec_label_pc_ad84
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread64

.thread64:                                        ; preds = %dec_label_pc_ad84, %bb241
  %v3_ada4 = phi i32 [ 7, %dec_label_pc_ad84 ], [ 8, %bb241 ]
  store i32 %v10_9714, i32* %r3.global-to-local, align 4
  store i32 %v0_ad90, i32* %r0.global-to-local, align 4
  %v1_adac = load i32, i32* %r6.global-to-local, align 4
  %v2_adac = sub i32 %v1_adac, %v3_ada4
  store i32 %v2_adac, i32* %r2.global-to-local, align 4
  %v2_adb0 = add i32 %v3_ada4, %v0_ad90
  store i32 %v2_adb0, i32* %r1.global-to-local, align 4
  %v3_adb4 = inttoptr i32 %v0_ad90 to i32*
  %v4_adb4 = inttoptr i32 %v2_adb0 to i32*
  %v5_adb4 = call i32* @memmove(i32* %v3_adb4, i32* %v4_adb4, i32 %v2_adac)
  %v7_adb4 = ptrtoint i32* %v5_adb4 to i32
  store i32 %v7_adb4, i32* %r0.global-to-local, align 4
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  %v0_adbc = load i32, i32* @r7, align 4
  store i32 %v0_adbc, i32* %stack_var_-40, align 4
  store i32 %v2_96a4, i32* %r1.global-to-local, align 4
  %v1_adc4 = load i32, i32* @r4, align 4
  %v2_adc4 = add i32 %v1_adc4, %v2_96a4
  %v3_adc4 = inttoptr i32 %v2_adc4 to i8*
  %v4_adc4 = load i8, i8* %v3_adc4, align 1
  %v6_adc4 = zext i8 %v4_adc4 to i32
  store i32 %v6_adc4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_adc8 = icmp eq i8 %v4_adc4, 0
  store i1 %v2_adc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_adc8, label %dec_label_pc_ae0c, label %dec_label_pc_add0

dec_label_pc_add0:                                ; preds = %.thread64
  %v2_add0 = icmp ugt i8 %v4_adc4, 46
  store i1 %v2_add0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_add0 = icmp ult i8 %v4_adc4, 47
  store i1 %v6_add0, i1* %cpsr_n.global-to-local, align 1
  %v7_add0 = icmp eq i8 %v4_adc4, 47
  store i1 %v7_add0, i1* %cpsr_z.global-to-local, align 1
  %v1_add4 = load i32, i32* @r5, align 4
  br i1 %v7_add0, label %bb242, label %dec_label_pc_addc

bb242:                                            ; preds = %dec_label_pc_add0
  store i32 %v1_add4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_af6c

dec_label_pc_addc:                                ; preds = %dec_label_pc_add0
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_adec

dec_label_pc_ade4:                                ; preds = %dec_label_pc_adec
  %v2_ade4 = icmp ugt i8 %v4_adf8, 46
  store i1 %v2_ade4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_ade4 = icmp ult i8 %v4_adf8, 47
  store i1 %v6_ade4, i1* %cpsr_n.global-to-local, align 1
  %v7_ade4 = icmp eq i8 %v4_adf8, 47
  store i1 %v7_ade4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ade4, label %dec_label_pc_af6c, label %dec_label_pc_adec

dec_label_pc_adec:                                ; preds = %dec_label_pc_ade4, %dec_label_pc_addc
  %v0_ae00 = phi i32 [ %v1_ae00, %dec_label_pc_ade4 ], [ 1, %dec_label_pc_addc ]
  store i32 %v0_ae00, i32* %ip.global-to-local, align 4
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  store i32 %v0_ae00, i32* %stack_var_-40, align 4
  %v2_adf8 = add i32 %v0_ae00, %v1_add4
  %v3_adf8 = inttoptr i32 %v2_adf8 to i8*
  %v4_adf8 = load i8, i8* %v3_adf8, align 1
  %v6_adf8 = zext i8 %v4_adf8 to i32
  store i32 %v6_adf8, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_adfc = icmp eq i8 %v4_adf8, 0
  store i1 %v2_adfc, i1* %cpsr_z.global-to-local, align 1
  %v1_ae00 = add i32 %v0_ae00, 1
  store i32 %v1_ae00, i32* %r3.global-to-local, align 4
  store i32 %v2_adf8, i32* %r1.global-to-local, align 4
  br i1 %v2_adfc, label %dec_label_pc_ae0c, label %dec_label_pc_ade4

dec_label_pc_ae0c:                                ; preds = %dec_label_pc_adec, %.thread64, %dec_label_pc_af6c
  %v0_ae0c = load i32, i32* @r5, align 4
  store i32 %v0_ae0c, i32* %r0.global-to-local, align 4
  %v1_ae10 = inttoptr i32 %v0_ae0c to i8*
  %v2_ae10 = call i32 @function_12d3c(i8* %v1_ae10)
  store i32 %v2_ae10, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_ae14 = icmp slt i32 %v2_ae10, 0
  store i1 %v1_ae14, i1* %cpsr_n.global-to-local, align 1
  %v2_ae14 = icmp eq i32 %v2_ae10, 0
  store i1 %v2_ae14, i1* %cpsr_z.global-to-local, align 1
  %tmp243 = icmp slt i32 %v2_ae10, 1
  br i1 %tmp243, label %dec_label_pc_ae38, label %dec_label_pc_ae1c

dec_label_pc_ae1c:                                ; preds = %dec_label_pc_ae0c
  %v0_ae1c = load i32, i32* @r5, align 4
  store i32 %v0_ae1c, i32* %r0.global-to-local, align 4
  %v1_ae20 = inttoptr i32 %v0_ae1c to i8*
  %v2_ae20 = call i32 @function_12d3c(i8* %v1_ae20)
  store i32 %v2_ae20, i32* %r0.global-to-local, align 4
  %v1_ae24 = add i32 %v2_ae20, -127
  %v2_ae24 = icmp ugt i32 %v2_ae20, 126
  store i1 %v2_ae24, i1* %cpsr_c.global-to-local, align 1
  %v3_ae24 = sub i32 126, %v2_ae20
  %v4_ae24 = and i32 %v3_ae24, %v2_ae20
  %v5_ae24 = icmp slt i32 %v4_ae24, 0
  store i1 %v5_ae24, i1* %cpsr_v.global-to-local, align 1
  %v6_ae24 = icmp slt i32 %v1_ae24, 0
  store i1 %v6_ae24, i1* %cpsr_n.global-to-local, align 1
  %v7_ae24 = icmp eq i32 %v2_ae20, 127
  store i1 %v7_ae24, i1* %cpsr_z.global-to-local, align 1
  %v7_ae28 = icmp sgt i32 %v2_ae20, 127
  br i1 %v7_ae28, label %.thread67, label %bb244

bb244:                                            ; preds = %dec_label_pc_ae1c
  %v8_ae28 = load i32, i32* %sb.global-to-local, align 4
  %v9_ae2c = add i32 %v8_ae28, 789
  store i32 %v9_ae2c, i32* %r0.global-to-local, align 4
  %v8_ae30 = load i32, i32* @r5, align 4
  store i32 %v8_ae30, i32* %r1.global-to-local, align 4
  br label %.thread67

.thread67:                                        ; preds = %dec_label_pc_ae1c, %bb244
  store i32 44600, i32* %lr.global-to-local, align 4
  %v3_ae34 = xor i1 %v6_ae24, %v5_ae24
  %v4_ae34 = or i1 %v7_ae24, %v3_ae34
  call void @__pseudo_cond_branch(i1 %v4_ae34, i32 ptrtoint (i32* @global_var_12d64.127 to i32))
  br label %dec_label_pc_ae38

dec_label_pc_ae38:                                ; preds = %dec_label_pc_ae0c, %.thread67
  store i32 %v10_9714, i32* %r1.global-to-local, align 4
  %v3_ae3c = load i32, i32* %stack_var_-40, align 4
  %v0_ae40 = load i32, i32* @r5, align 4
  %v2_ae40 = add i32 %v3_ae3c, 1
  %v1_ae44 = add i32 %v2_ae40, %v0_ae40
  store i32 %v1_ae44, i32* %r0.global-to-local, align 4
  %v1_ae48 = inttoptr i32 %v1_ae44 to i8*
  %v2_ae48 = call i32 @function_12d3c(i8* %v1_ae48)
  store i32 %v2_ae48, i32* %r0.global-to-local, align 4
  %v1_ae4c = add i32 %v2_ae48, -255
  %v2_ae4c = icmp ugt i32 %v2_ae48, 254
  store i1 %v2_ae4c, i1* %cpsr_c.global-to-local, align 1
  %v3_ae4c = sub i32 254, %v2_ae48
  %v4_ae4c = and i32 %v3_ae4c, %v2_ae48
  %v5_ae4c = icmp slt i32 %v4_ae4c, 0
  store i1 %v5_ae4c, i1* %cpsr_v.global-to-local, align 1
  %v6_ae4c = icmp slt i32 %v1_ae4c, 0
  store i1 %v6_ae4c, i1* %cpsr_n.global-to-local, align 1
  %v7_ae4c = icmp eq i32 %v2_ae48, 255
  store i1 %v7_ae4c, i1* %cpsr_z.global-to-local, align 1
  %v8_ae50 = icmp sgt i32 %v2_ae48, 255
  br i1 %v8_ae50, label %dec_label_pc_a824, label %dec_label_pc_ae54

dec_label_pc_ae54:                                ; preds = %dec_label_pc_ae38
  %v0_ae54 = load i32, i32* %sb.global-to-local, align 4
  %v1_ae58 = add i32 %v0_ae54, 533
  store i32 %v1_ae58, i32* @r4, align 4
  store i32 %v1_ae58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_ae64 = call i32 @function_12ddc(i32 %v1_ae58, i32 255)
  store i32 %v10_9714, i32* %r2.global-to-local, align 4
  %v3_ae6c = load i32, i32* %stack_var_-40, align 4
  %v0_ae70 = load i32, i32* @r5, align 4
  %v2_ae70 = add i32 %v3_ae6c, 1
  %v1_ae74 = add i32 %v2_ae70, %v0_ae70
  store i32 %v1_ae74, i32* %r0.global-to-local, align 4
  %v1_ae78 = inttoptr i32 %v1_ae74 to i8*
  %v2_ae78 = call i32 @function_12d3c(i8* %v1_ae78)
  store i32 %v2_ae78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_ae7c = icmp slt i32 %v2_ae78, 0
  store i1 %v1_ae7c, i1* %cpsr_n.global-to-local, align 1
  %v2_ae7c = icmp eq i32 %v2_ae78, 0
  store i1 %v2_ae7c, i1* %cpsr_z.global-to-local, align 1
  %tmp245 = icmp slt i32 %v2_ae78, 1
  br i1 %tmp245, label %dec_label_pc_a824, label %dec_label_pc_ae84

dec_label_pc_ae84:                                ; preds = %dec_label_pc_ae54
  store i32 %v10_9714, i32* %r3.global-to-local, align 4
  %v3_ae88 = load i32, i32* %stack_var_-40, align 4
  %v0_ae8c = load i32, i32* @r5, align 4
  %v0_ae90 = load i32, i32* @r4, align 4
  store i32 %v0_ae90, i32* @r0, align 4
  %v2_ae8c = add i32 %v3_ae88, 1
  %v1_ae94 = add i32 %v2_ae8c, %v0_ae8c
  store i32 %v1_ae94, i32* %r1.global-to-local, align 4
  %v2_ae98 = inttoptr i32 %v0_ae90 to i8*
  %v3_ae98 = call i32 @function_12d64(i8* %v2_ae98, i32 %v1_ae94)
  store i32 %v3_ae98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a824

dec_label_pc_aea0:                                ; preds = %dec_label_pc_a1f4
  %v0_aea0 = load i32, i32* @r8, align 4
  %v1_aea0 = add i32 %v0_aea0, -1456
  %v2_aea0 = inttoptr i32 %v1_aea0 to i32*
  %v3_aea0 = load i32, i32* %v2_aea0, align 4
  store i32 %v3_aea0, i32* %r0.global-to-local, align 4
  %v1_aea4 = call i32 @close(i32 %v3_aea0)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_aeb0 = load i32, i32* @r8, align 4
  %v2_aeb0 = add i32 %v1_aeb0, -1456
  %v3_aeb0 = inttoptr i32 %v2_aeb0 to i32*
  store i32 -1, i32* %v3_aeb0, align 4
  %v0_aeb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_aeb4 = trunc i32 %v0_aeb4 to i8
  %v2_aeb4 = load i32, i32* @r8, align 4
  %v3_aeb4 = add i32 %v2_aeb4, -1452
  %v4_aeb4 = inttoptr i32 %v3_aeb4 to i8*
  store i8 %v1_aeb4, i8* %v4_aeb4, align 1
  br label %dec_label_pc_9c5c

dec_label_pc_aebc:                                ; preds = %dec_label_pc_aa74
  %v0_aebc = load i32, i32* @r8, align 4
  %v1_aebc = add i32 %v0_aebc, -1452
  %v2_aebc = inttoptr i32 %v1_aebc to i8*
  %v3_aebc = load i8, i8* %v2_aebc, align 1
  %v4_aebc = zext i8 %v3_aebc to i32
  store i32 %v4_aebc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_aec0 = icmp eq i8 %v3_aebc, 0
  store i1 %v2_aec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aec0, label %dec_label_pc_9c5c, label %dec_label_pc_a824

dec_label_pc_aecc:                                ; preds = %dec_label_pc_ace4
  %v0_aecc = load i32, i32* @r4, align 4
  store i32 %v0_aecc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1369c.100 to i32), i32* %r1.global-to-local, align 4
  %v2_aed4 = inttoptr i32 %v0_aecc to i8*
  %v3_aed4 = call i32 @function_1311c(i8* %v2_aed4, i32 ptrtoint ([4 x i8]* @global_var_1369c.100 to i32))
  store i32 %v3_aed4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_aed8 = icmp slt i32 %v3_aed4, 0
  store i1 %v1_aed8, i1* %cpsr_n.global-to-local, align 1
  %v2_aed8 = icmp eq i32 %v3_aed4, 0
  store i1 %v2_aed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aed8, label %bb246, label %dec_label_pc_ad18

bb246:                                            ; preds = %dec_label_pc_aecc
  %v0_aee0 = load i32, i32* %fp.global-to-local, align 4
  %v1_aee0 = load i32, i32* @r5, align 4
  %v2_aee0 = sub i32 %v0_aee0, %v1_aee0
  %v3_aee0 = icmp uge i32 %v0_aee0, %v1_aee0
  store i1 %v3_aee0, i1* %cpsr_c.global-to-local, align 1
  %v4_aee0 = xor i32 %v1_aee0, %v0_aee0
  %v5_aee0 = xor i32 %v2_aee0, %v0_aee0
  %v6_aee0 = and i32 %v5_aee0, %v4_aee0
  %v7_aee0 = icmp slt i32 %v6_aee0, 0
  store i1 %v7_aee0, i1* %cpsr_v.global-to-local, align 1
  %v8_aee0 = icmp slt i32 %v2_aee0, 0
  store i1 %v8_aee0, i1* %cpsr_n.global-to-local, align 1
  %v9_aee0 = icmp eq i32 %v0_aee0, %v1_aee0
  store i1 %v9_aee0, i1* %cpsr_z.global-to-local, align 1
  %v7_aee4 = icmp sgt i32 %v0_aee0, %v1_aee0
  %. = select i1 %v7_aee4, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_aeec = trunc i32 %. to i8
  %v10_aeec = load i32, i32* @r8, align 4
  %v11_aeec = add i32 %v10_aeec, -1452
  %v12_aeec = inttoptr i32 %v11_aeec to i8*
  store i8 %v9_aeec, i8* %v12_aeec, align 1
  br label %dec_label_pc_ad20

dec_label_pc_aef8:                                ; preds = %dec_label_pc_a96c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v0_af00 = load i32, i32* @r8, align 4
  %v1_af00 = add i32 %v0_af00, 656
  %v2_af00 = inttoptr i32 %v1_af00 to i32*
  %v3_af00 = load i32, i32* %v2_af00, align 4
  store i32 %v3_af00, i32* @r4, align 4
  %v3_af04 = call i32 @function_121a4(i32 43, i32* null)
  %v0_af08 = load i32, i32* @r4, align 4
  store i32 %v0_af08, i32* %r1.global-to-local, align 4
  store i32 %v3_af04, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_af14 = load i32, i32* @r7, align 4
  store i32 %v0_af14, i32* %r0.global-to-local, align 4
  %v4_af18 = call i32 @function_12e00(i32 %v0_af14, i32 %v0_af08, i32 %v3_af04, i32 11)
  store i32 %v4_af18, i32* %r0.global-to-local, align 4
  %v0_af1c = load i32, i32* @r8, align 4
  %v1_af1c = add i32 %v0_af1c, 656
  %v2_af1c = inttoptr i32 %v1_af1c to i32*
  %v3_af1c = load i32, i32* %v2_af1c, align 4
  %v0_af20 = load i32, i32* @r7, align 4
  %v2_af20 = add i32 %v0_af20, %v4_af18
  store i32 %v2_af20, i32* @r5, align 4
  store i32 %v4_af18, i32* @r4, align 4
  %v2_af28 = sub i32 %v3_af1c, %v4_af18
  store i32 %v2_af28, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136d8.129 to i32), i32* %r2.global-to-local, align 4
  %v0_af30 = load i32, i32* @sl, align 4
  store i32 %v0_af30, i32* %r3.global-to-local, align 4
  store i32 %v2_af20, i32* %r0.global-to-local, align 4
  %v4_af38 = call i32 @function_12e00(i32 %v2_af20, i32 %v2_af28, i32 ptrtoint (i32* @global_var_136d8.129 to i32), i32 %v0_af30)
  store i32 %v4_af38, i32* %r0.global-to-local, align 4
  %v0_af3c = load i32, i32* @r8, align 4
  %v1_af3c = add i32 %v0_af3c, 12
  %v2_af3c = inttoptr i32 %v1_af3c to i32*
  %v3_af3c = load i32, i32* %v2_af3c, align 4
  store i32 %v3_af3c, i32* %r3.global-to-local, align 4
  %v0_af40 = load i32, i32* @r4, align 4
  %v2_af40 = add i32 %v0_af40, %v4_af38
  store i32 %v2_af40, i32* %r6.global-to-local, align 4
  %v1_af44 = load i32, i32* %sb.global-to-local, align 4
  %v2_af44 = add i32 %v1_af44, %v2_af40
  store i32 %v2_af44, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_af4c = add i32 %v3_af3c, -4
  %v2_af4c = icmp ugt i32 %v3_af3c, 3
  store i1 %v2_af4c, i1* %cpsr_c.global-to-local, align 1
  %v3_af4c = sub i32 3, %v3_af3c
  %v4_af4c = and i32 %v3_af4c, %v3_af3c
  %v5_af4c = icmp slt i32 %v4_af4c, 0
  store i1 %v5_af4c, i1* %cpsr_v.global-to-local, align 1
  %v6_af4c = icmp slt i32 %v1_af4c, 0
  store i1 %v6_af4c, i1* %cpsr_n.global-to-local, align 1
  %v7_af4c = icmp eq i32 %v3_af3c, 4
  store i1 %v7_af4c, i1* %cpsr_z.global-to-local, align 1
  %v3_af50 = add i32 %v2_af44, 2115
  %v4_af50 = inttoptr i32 %v3_af50 to i8*
  store i8 0, i8* %v4_af50, align 1
  %v7_af54 = icmp sgt i32 %v3_af3c, 4
  br i1 %v7_af54, label %dec_label_pc_af58, label %dec_label_pc_afe0

dec_label_pc_af58:                                ; preds = %dec_label_pc_aef8, %dec_label_pc_afe0, %dec_label_pc_aff0
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_af60 = load i32, i32* @r8, align 4
  %v2_af60 = add i32 %v1_af60, 8
  %v3_af60 = inttoptr i32 %v2_af60 to i32*
  store i32 -1, i32* %v3_af60, align 4
  %v0_af64 = load i32, i32* %r3.global-to-local, align 4
  %v1_af64 = trunc i32 %v0_af64 to i8
  %v2_af64 = load i32, i32* @r8, align 4
  %v3_af64 = add i32 %v2_af64, -1452
  %v4_af64 = inttoptr i32 %v3_af64 to i8*
  store i8 %v1_af64, i8* %v4_af64, align 1
  br label %dec_label_pc_9c5c

dec_label_pc_af6c:                                ; preds = %dec_label_pc_ade4, %bb242
  %v2_af70 = phi i32 [ %v1_add4, %bb242 ], [ %v2_adf8, %dec_label_pc_ade4 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_af70 = inttoptr i32 %v2_af70 to i8*
  store i8 0, i8* %v3_af70, align 1
  br label %dec_label_pc_ae0c

dec_label_pc_af78:                                ; preds = %dec_label_pc_a814
  %v0_af78 = load i32, i32* %sb.global-to-local, align 4
  %v1_af7c = add i32 %v0_af78, 533
  store i32 %v1_af7c, i32* @r4, align 4
  store i32 %v1_af7c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_af88 = call i32 @function_12ddc(i32 %v1_af7c, i32 255)
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  %v3_af90 = load i32, i32* %stack_var_-40, align 4
  %v0_af94 = load i32, i32* @r5, align 4
  %v2_af94 = add i32 %v3_af90, 1
  %v1_af98 = add i32 %v2_af94, %v0_af94
  store i32 %v1_af98, i32* %r0.global-to-local, align 4
  %v1_af9c = inttoptr i32 %v1_af98 to i8*
  %v2_af9c = call i32 @function_12d3c(i8* %v1_af9c)
  store i32 %v2_af9c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_afa0 = icmp slt i32 %v2_af9c, 0
  store i1 %v1_afa0, i1* %cpsr_n.global-to-local, align 1
  %v2_afa0 = icmp eq i32 %v2_af9c, 0
  store i1 %v2_afa0, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_af9c, 1
  br i1 %tmp247, label %dec_label_pc_a824, label %dec_label_pc_afa8

dec_label_pc_afa8:                                ; preds = %dec_label_pc_af78
  store i32 %v10_9714, i32* %r1.global-to-local, align 4
  %v3_afac = load i32, i32* %stack_var_-40, align 4
  %v0_afb0 = load i32, i32* @r5, align 4
  %v2_afb0 = add i32 %v3_afac, 1
  %v1_afb4 = add i32 %v2_afb0, %v0_afb0
  store i32 %v1_afb4, i32* %r0.global-to-local, align 4
  %v1_afb8 = inttoptr i32 %v1_afb4 to i8*
  %v2_afb8 = call i32 @function_12d3c(i8* %v1_afb8)
  store i32 %v2_afb8, i32* %r0.global-to-local, align 4
  %v1_afbc = add i32 %v2_afb8, -255
  %v2_afbc = icmp ugt i32 %v2_afb8, 254
  store i1 %v2_afbc, i1* %cpsr_c.global-to-local, align 1
  %v3_afbc = sub i32 254, %v2_afb8
  %v4_afbc = and i32 %v3_afbc, %v2_afb8
  %v5_afbc = icmp slt i32 %v4_afbc, 0
  store i1 %v5_afbc, i1* %cpsr_v.global-to-local, align 1
  %v6_afbc = icmp slt i32 %v1_afbc, 0
  store i1 %v6_afbc, i1* %cpsr_n.global-to-local, align 1
  %v7_afbc = icmp eq i32 %v2_afb8, 255
  store i1 %v7_afbc, i1* %cpsr_z.global-to-local, align 1
  %v8_afc0 = icmp sgt i32 %v2_afb8, 255
  br i1 %v8_afc0, label %dec_label_pc_a824, label %dec_label_pc_afc4

dec_label_pc_afc4:                                ; preds = %dec_label_pc_afa8
  store i32 %v10_9714, i32* %r2.global-to-local, align 4
  %v3_afc8 = load i32, i32* %stack_var_-40, align 4
  %v0_afcc = load i32, i32* @r5, align 4
  %v0_afd0 = load i32, i32* @r4, align 4
  store i32 %v0_afd0, i32* @r0, align 4
  %v2_afcc = add i32 %v3_afc8, 1
  %v1_afd4 = add i32 %v2_afcc, %v0_afcc
  store i32 %v1_afd4, i32* %r1.global-to-local, align 4
  %v2_afd8 = inttoptr i32 %v0_afd0 to i8*
  %v3_afd8 = call i32 @function_12d64(i8* %v2_afd8, i32 %v1_afd4)
  store i32 %v3_afd8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a824

dec_label_pc_afe0:                                ; preds = %dec_label_pc_aef8
  %v0_afe0 = load i32, i32* @r5, align 4
  store i32 %v0_afe0, i32* %r0.global-to-local, align 4
  %v1_afe4 = inttoptr i32 %v0_afe0 to i8*
  %v2_afe4 = call i32 @function_12d3c(i8* %v1_afe4)
  store i32 %v2_afe4, i32* %r0.global-to-local, align 4
  %v1_afe8 = add i32 %v2_afe4, -127
  %v2_afe8 = icmp ugt i32 %v2_afe4, 126
  store i1 %v2_afe8, i1* %cpsr_c.global-to-local, align 1
  %v3_afe8 = sub i32 126, %v2_afe4
  %v4_afe8 = and i32 %v3_afe8, %v2_afe4
  %v5_afe8 = icmp slt i32 %v4_afe8, 0
  store i1 %v5_afe8, i1* %cpsr_v.global-to-local, align 1
  %v6_afe8 = icmp slt i32 %v1_afe8, 0
  store i1 %v6_afe8, i1* %cpsr_n.global-to-local, align 1
  %v7_afe8 = icmp eq i32 %v2_afe4, 127
  store i1 %v7_afe8, i1* %cpsr_z.global-to-local, align 1
  %v8_afec = icmp sgt i32 %v2_afe4, 127
  br i1 %v8_afec, label %dec_label_pc_af58, label %dec_label_pc_aff0

dec_label_pc_aff0:                                ; preds = %dec_label_pc_afe0
  %v0_aff0 = load i32, i32* @r8, align 4
  %v1_aff0 = add i32 %v0_aff0, 12
  %v2_aff0 = inttoptr i32 %v1_aff0 to i32*
  %v3_aff0 = load i32, i32* %v2_aff0, align 4
  store i32 %v1_a834, i32* %r2.global-to-local, align 4
  %v1_aff8 = and i32 %v3_aff0, 33554432
  %v2_aff8 = icmp ne i32 %v1_aff8, 0
  store i1 %v2_aff8, i1* %cpsr_c.global-to-local, align 1
  %v3_aff8 = mul i32 %v3_aff0, 128
  %v0_affc = load i32, i32* @r5, align 4
  store i32 %v0_affc, i32* %r1.global-to-local, align 4
  %v2_b000 = add i32 %v3_aff8, %v1_a834
  store i32 %v2_b000, i32* @r0, align 4
  %v2_b004 = inttoptr i32 %v2_b000 to i8*
  %v3_b004 = call i32 @function_12d64(i8* %v2_b004, i32 %v0_affc)
  store i32 %v3_b004, i32* %r0.global-to-local, align 4
  %v0_b008 = load i32, i32* @r8, align 4
  %v1_b008 = add i32 %v0_b008, 12
  %v2_b008 = inttoptr i32 %v1_b008 to i32*
  %v3_b008 = load i32, i32* %v2_b008, align 4
  store i32 %v1_a834, i32* %r3.global-to-local, align 4
  %v1_b010 = and i32 %v3_b008, 33554432
  %v2_b010 = icmp ne i32 %v1_b010, 0
  store i1 %v2_b010, i1* %cpsr_c.global-to-local, align 1
  %v3_b010 = mul i32 %v3_b008, 128
  %v2_b014 = add i32 %v3_b010, %v1_a834
  store i32 %v2_b014, i32* %r4.global-to-local, align 4
  store i32 %v2_b014, i32* %r0.global-to-local, align 4
  %v1_b01c = inttoptr i32 %v2_b014 to i8*
  %v2_b01c = call i32 @function_12d3c(i8* %v1_b01c)
  store i32 ptrtoint (i32* @global_var_139d4.131 to i32), i32* %r1.global-to-local, align 4
  %v2_b024 = add i32 %v2_b014, %v2_b01c
  store i32 %v2_b024, i32* @r0, align 4
  %v2_b028 = inttoptr i32 %v2_b024 to i8*
  %v3_b028 = call i32 @function_12d64(i8* %v2_b028, i32 ptrtoint (i32* @global_var_139d4.131 to i32))
  store i32 %v3_b028, i32* %r0.global-to-local, align 4
  %v0_b02c = load i32, i32* %r6.global-to-local, align 4
  %v1_b02c = add i32 %v0_b02c, 3
  store i32 %v1_b02c, i32* @r4, align 4
  %v0_b030 = load i32, i32* @r8, align 4
  %v1_b030 = add i32 %v0_b030, 656
  %v2_b030 = inttoptr i32 %v1_b030 to i32*
  %v3_b030 = load i32, i32* %v2_b030, align 4
  %v0_b034 = load i32, i32* @r7, align 4
  %v2_b034 = add i32 %v0_b034, %v1_b02c
  store i32 %v2_b034, i32* %r6.global-to-local, align 4
  %v2_b038 = sub i32 %v3_b030, %v1_b02c
  store i32 %v2_b038, i32* %r1.global-to-local, align 4
  %v0_b03c = load i32, i32* @sl, align 4
  store i32 %v0_b03c, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136d8.129 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_b034, i32* %r0.global-to-local, align 4
  %v4_b048 = call i32 @function_12e00(i32 %v2_b034, i32 %v2_b038, i32 ptrtoint (i32* @global_var_136d8.129 to i32), i32 %v0_b03c)
  store i32 %v4_b048, i32* %r0.global-to-local, align 4
  %v0_b04c = load i32, i32* @r8, align 4
  %v1_b04c = add i32 %v0_b04c, 12
  %v2_b04c = inttoptr i32 %v1_b04c to i32*
  %v3_b04c = load i32, i32* %v2_b04c, align 4
  store i32 %v1_a834, i32* %ip.global-to-local, align 4
  %v1_b054 = and i32 %v3_b04c, 33554432
  %v2_b054 = icmp ne i32 %v1_b054, 0
  store i1 %v2_b054, i1* %cpsr_c.global-to-local, align 1
  %v3_b054 = mul i32 %v3_b04c, 128
  %v0_b058 = load i32, i32* @r4, align 4
  %v1_b058 = load i32, i32* %sb.global-to-local, align 4
  %v2_b05c = add i32 %v3_b054, %v1_a834
  store i32 %v2_b05c, i32* @r5, align 4
  %v2_b058 = add i32 %v0_b058, %v4_b048
  %v2_b060 = add i32 %v2_b058, %v1_b058
  store i32 %v2_b060, i32* @r4, align 4
  %v0_b064 = load i32, i32* %fp.global-to-local, align 4
  %v1_b064 = trunc i32 %v0_b064 to i8
  %v3_b064 = add i32 %v2_b060, 2115
  %v4_b064 = inttoptr i32 %v3_b064 to i8*
  store i8 %v1_b064, i8* %v4_b064, align 1
  %v0_b068 = load i32, i32* @r5, align 4
  store i32 %v0_b068, i32* %r0.global-to-local, align 4
  %v1_b06c = inttoptr i32 %v0_b068 to i8*
  %v2_b06c = call i32 @function_12d3c(i8* %v1_b06c)
  %v0_b070 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_b070, i32* %r1.global-to-local, align 4
  %v0_b074 = load i32, i32* @r5, align 4
  %v2_b074 = add i32 %v0_b074, %v2_b06c
  store i32 %v2_b074, i32* @r0, align 4
  %v2_b078 = inttoptr i32 %v2_b074 to i8*
  %v3_b078 = call i32 @function_12d64(i8* %v2_b078, i32 %v0_b070)
  store i32 %v3_b078, i32* %r0.global-to-local, align 4
  %v0_b07c = load i32, i32* @r8, align 4
  %v1_b07c = add i32 %v0_b07c, 12
  %v2_b07c = inttoptr i32 %v1_b07c to i32*
  %v3_b07c = load i32, i32* %v2_b07c, align 4
  %v1_b080 = add i32 %v3_b07c, 1
  store i32 %v1_b080, i32* %r3.global-to-local, align 4
  store i32 %v1_b080, i32* %v2_b07c, align 4
  br label %dec_label_pc_af58

dec_label_pc_b08c:                                ; preds = %dec_label_pc_ac70
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_9714, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_b098 = load i32, i32* @r5, align 4
  %v1_b098 = add i32 %v0_b098, 4
  %v2_b098 = inttoptr i32 %v1_b098 to i8*
  %v3_b098 = load i8, i8* %v2_b098, align 1
  %v4_b098 = zext i8 %v3_b098 to i32
  store i32 %v4_b098, i32* %r3.global-to-local, align 4
  %v2_b09c = icmp ugt i8 %v3_b098, 114
  store i1 %v2_b09c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_b09c = icmp ult i8 %v3_b098, 115
  store i1 %v6_b09c, i1* %cpsr_n.global-to-local, align 1
  %v7_b09c = icmp eq i8 %v3_b098, 115
  store i1 %v7_b09c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b09c, label %bb248, label %.thread70

bb248:                                            ; preds = %dec_label_pc_b08c
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread70

.thread70:                                        ; preds = %dec_label_pc_b08c, %bb248
  %v3_b0ac = phi i32 [ 7, %dec_label_pc_b08c ], [ 8, %bb248 ]
  %v0_b0b0 = load i32, i32* @r7, align 4
  %v1_b0b0 = sub nsw i32 1, %v3_b0ac
  %v2_b0b4 = add i32 %v1_b0b0, %v0_b0b0
  store i32 %v2_b0b4, i32* %r2.global-to-local, align 4
  store i32 %v0_b098, i32* %r0.global-to-local, align 4
  %v2_b0bc = add i32 %v3_b0ac, %v0_b098
  store i32 %v2_b0bc, i32* %r1.global-to-local, align 4
  %v3_b0c0 = inttoptr i32 %v0_b098 to i32*
  %v4_b0c0 = inttoptr i32 %v2_b0bc to i32*
  %v5_b0c0 = call i32* @memmove(i32* %v3_b0c0, i32* %v4_b0c0, i32 %v2_b0b4)
  %v7_b0c0 = ptrtoint i32* %v5_b0c0 to i32
  store i32 %v7_b0c0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_9714, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_b0d0 = load i32, i32* @r6, align 4
  %v1_b0d0 = load i32, i32* @r4, align 4
  %v2_b0d0 = add i32 %v1_b0d0, %v0_b0d0
  %v3_b0d0 = inttoptr i32 %v2_b0d0 to i8*
  %v4_b0d0 = load i8, i8* %v3_b0d0, align 1
  %v6_b0d0 = zext i8 %v4_b0d0 to i32
  store i32 %v6_b0d0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_b0d4 = icmp eq i8 %v4_b0d0, 0
  store i1 %v9_b0d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b0d4, label %dec_label_pc_b114, label %dec_label_pc_b0dc

dec_label_pc_b0dc:                                ; preds = %.thread70
  %v2_b0dc = icmp ugt i8 %v4_b0d0, 46
  store i1 %v2_b0dc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_b0dc = icmp ult i8 %v4_b0d0, 47
  store i1 %v6_b0dc, i1* %cpsr_n.global-to-local, align 1
  %v7_b0dc = icmp eq i8 %v4_b0d0, 47
  store i1 %v7_b0dc, i1* %cpsr_z.global-to-local, align 1
  %v1_b0e0 = load i32, i32* @r5, align 4
  br i1 %v7_b0dc, label %bb249, label %dec_label_pc_b0e8

bb249:                                            ; preds = %dec_label_pc_b0dc
  store i32 %v1_b0e0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_b1f8

dec_label_pc_b0e8:                                ; preds = %dec_label_pc_b0dc
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b0f8

dec_label_pc_b0f0:                                ; preds = %dec_label_pc_b0f8
  %v2_b0f0 = icmp ugt i8 %v4_b100, 46
  store i1 %v2_b0f0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_b0f0 = icmp ult i8 %v4_b100, 47
  store i1 %v6_b0f0, i1* %cpsr_n.global-to-local, align 1
  %v7_b0f0 = icmp eq i8 %v4_b100, 47
  store i1 %v7_b0f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b0f0, label %dec_label_pc_b1f8, label %dec_label_pc_b0f8

dec_label_pc_b0f8:                                ; preds = %dec_label_pc_b0f0, %dec_label_pc_b0e8
  %v1_b108 = phi i32 [ %v1_b10c, %dec_label_pc_b0f0 ], [ 1, %dec_label_pc_b0e8 ]
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  store i32 %v1_b108, i32* %stack_var_-40, align 4
  %v2_b100 = add i32 %v1_b108, %v1_b0e0
  %v3_b100 = inttoptr i32 %v2_b100 to i8*
  %v4_b100 = load i8, i8* %v3_b100, align 1
  %v6_b100 = zext i8 %v4_b100 to i32
  store i32 %v6_b100, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_b104 = icmp eq i8 %v4_b100, 0
  store i1 %v2_b104, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_b100, i32* %r1.global-to-local, align 4
  %v1_b10c = add i32 %v1_b108, 1
  store i32 %v1_b10c, i32* %r3.global-to-local, align 4
  br i1 %v2_b104, label %dec_label_pc_b114, label %dec_label_pc_b0f0

dec_label_pc_b114:                                ; preds = %dec_label_pc_b0f8, %.thread70, %dec_label_pc_b1f8
  %v0_b114 = load i32, i32* @r5, align 4
  store i32 %v0_b114, i32* %r0.global-to-local, align 4
  %v1_b118 = inttoptr i32 %v0_b114 to i8*
  %v2_b118 = call i32 @function_12d3c(i8* %v1_b118)
  store i32 %v2_b118, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_b11c = icmp slt i32 %v2_b118, 0
  store i1 %v1_b11c, i1* %cpsr_n.global-to-local, align 1
  %v2_b11c = icmp eq i32 %v2_b118, 0
  store i1 %v2_b11c, i1* %cpsr_z.global-to-local, align 1
  %tmp250 = icmp slt i32 %v2_b118, 1
  br i1 %tmp250, label %dec_label_pc_b140, label %dec_label_pc_b124

dec_label_pc_b124:                                ; preds = %dec_label_pc_b114
  %v0_b124 = load i32, i32* @r5, align 4
  store i32 %v0_b124, i32* %r0.global-to-local, align 4
  %v1_b128 = inttoptr i32 %v0_b124 to i8*
  %v2_b128 = call i32 @function_12d3c(i8* %v1_b128)
  store i32 %v2_b128, i32* %r0.global-to-local, align 4
  %v1_b12c = add i32 %v2_b128, -127
  %v2_b12c = icmp ugt i32 %v2_b128, 126
  store i1 %v2_b12c, i1* %cpsr_c.global-to-local, align 1
  %v3_b12c = sub i32 126, %v2_b128
  %v4_b12c = and i32 %v3_b12c, %v2_b128
  %v5_b12c = icmp slt i32 %v4_b12c, 0
  store i1 %v5_b12c, i1* %cpsr_v.global-to-local, align 1
  %v6_b12c = icmp slt i32 %v1_b12c, 0
  store i1 %v6_b12c, i1* %cpsr_n.global-to-local, align 1
  %v7_b12c = icmp eq i32 %v2_b128, 127
  store i1 %v7_b12c, i1* %cpsr_z.global-to-local, align 1
  %v7_b130 = icmp sgt i32 %v2_b128, 127
  br i1 %v7_b130, label %.thread73, label %bb251

bb251:                                            ; preds = %dec_label_pc_b124
  %v8_b130 = load i32, i32* %sb.global-to-local, align 4
  %v9_b134 = add i32 %v8_b130, 789
  store i32 %v9_b134, i32* %r0.global-to-local, align 4
  %v8_b138 = load i32, i32* @r5, align 4
  store i32 %v8_b138, i32* %r1.global-to-local, align 4
  br label %.thread73

.thread73:                                        ; preds = %dec_label_pc_b124, %bb251
  store i32 45376, i32* %lr.global-to-local, align 4
  %v3_b13c = xor i1 %v6_b12c, %v5_b12c
  %v4_b13c = or i1 %v7_b12c, %v3_b13c
  call void @__pseudo_cond_branch(i1 %v4_b13c, i32 ptrtoint (i32* @global_var_12d64.127 to i32))
  br label %dec_label_pc_b140

dec_label_pc_b140:                                ; preds = %dec_label_pc_b114, %.thread73
  store i32 %v10_9714, i32* %r1.global-to-local, align 4
  %v3_b144 = load i32, i32* %stack_var_-40, align 4
  %v0_b148 = load i32, i32* @r5, align 4
  %v2_b148 = add i32 %v3_b144, 1
  %v1_b14c = add i32 %v2_b148, %v0_b148
  store i32 %v1_b14c, i32* %r0.global-to-local, align 4
  %v1_b150 = inttoptr i32 %v1_b14c to i8*
  %v2_b150 = call i32 @function_12d3c(i8* %v1_b150)
  store i32 %v2_b150, i32* %r0.global-to-local, align 4
  %v1_b154 = add i32 %v2_b150, -255
  %v2_b154 = icmp ugt i32 %v2_b150, 254
  store i1 %v2_b154, i1* %cpsr_c.global-to-local, align 1
  %v3_b154 = sub i32 254, %v2_b150
  %v4_b154 = and i32 %v3_b154, %v2_b150
  %v5_b154 = icmp slt i32 %v4_b154, 0
  store i1 %v5_b154, i1* %cpsr_v.global-to-local, align 1
  %v6_b154 = icmp slt i32 %v1_b154, 0
  store i1 %v6_b154, i1* %cpsr_n.global-to-local, align 1
  %v7_b154 = icmp eq i32 %v2_b150, 255
  store i1 %v7_b154, i1* %cpsr_z.global-to-local, align 1
  %v8_b158 = icmp sgt i32 %v2_b150, 255
  br i1 %v8_b158, label %dec_label_pc_aca8, label %dec_label_pc_b15c

dec_label_pc_b15c:                                ; preds = %dec_label_pc_b140
  %v0_b15c = load i32, i32* %sb.global-to-local, align 4
  %v1_b160 = add i32 %v0_b15c, 533
  store i32 %v1_b160, i32* @r4, align 4
  store i32 %v1_b160, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_b16c = call i32 @function_12ddc(i32 %v1_b160, i32 255)
  store i32 %v10_9714, i32* %r2.global-to-local, align 4
  %v3_b174 = load i32, i32* %stack_var_-40, align 4
  %v0_b178 = load i32, i32* @r5, align 4
  %v2_b178 = add i32 %v3_b174, 1
  %v1_b17c = add i32 %v2_b178, %v0_b178
  store i32 %v1_b17c, i32* %r0.global-to-local, align 4
  %v1_b180 = inttoptr i32 %v1_b17c to i8*
  %v2_b180 = call i32 @function_12d3c(i8* %v1_b180)
  store i32 %v2_b180, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_b184 = icmp slt i32 %v2_b180, 0
  store i1 %v1_b184, i1* %cpsr_n.global-to-local, align 1
  %v2_b184 = icmp eq i32 %v2_b180, 0
  store i1 %v2_b184, i1* %cpsr_z.global-to-local, align 1
  %tmp252 = icmp slt i32 %v2_b180, 1
  br i1 %tmp252, label %dec_label_pc_aca8, label %dec_label_pc_b18c

dec_label_pc_b18c:                                ; preds = %dec_label_pc_b15c
  store i32 %v10_9714, i32* %r3.global-to-local, align 4
  %v3_b190 = load i32, i32* %stack_var_-40, align 4
  %v0_b194 = load i32, i32* @r5, align 4
  %v0_b198 = load i32, i32* @r4, align 4
  store i32 %v0_b198, i32* @r0, align 4
  %v2_b194 = add i32 %v3_b190, 1
  %v1_b19c = add i32 %v2_b194, %v0_b194
  store i32 %v1_b19c, i32* %r1.global-to-local, align 4
  %v2_b1a0 = inttoptr i32 %v0_b198 to i8*
  %v3_b1a0 = call i32 @function_12d64(i8* %v2_b1a0, i32 %v1_b19c)
  store i32 %v3_b1a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aca8

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_aa10
  %v0_b1a8 = load i32, i32* @r4, align 4
  %v1_b1a8 = trunc i32 %v0_b1a8 to i8
  %v2_b1a8 = load i32, i32* @r8, align 4
  %v3_b1a8 = add i32 %v2_b1a8, -1452
  %v4_b1a8 = inttoptr i32 %v3_b1a8 to i8*
  store i8 %v1_b1a8, i8* %v4_b1a8, align 1
  br label %dec_label_pc_9c5c

dec_label_pc_b1b0:                                ; preds = %dec_label_pc_ac28
  %v1_b1b0 = add i32 %v0_b1b0, 1
  store i32 %v1_b1b0, i32* %ip.global-to-local, align 4
  %v2_b1b4 = add i32 %v0_ac28, %v1_b1b0
  store i32 %v2_b1b4, i32* %r4.global-to-local, align 4
  store i32 %v10_9714, i32* %r2.global-to-local, align 4
  store i32 %v2_b1b4, i32* %r0.global-to-local, align 4
  store i32 %v1_b1b0, i32* %stack_var_-40, align 4
  %v1_b1c4 = inttoptr i32 %v2_b1b4 to i8*
  %v2_b1c4 = call i32 @function_12d3c(i8* %v1_b1c4)
  store i32 %v2_b1c4, i32* %r0.global-to-local, align 4
  %v0_b1c8 = load i32, i32* %r4.global-to-local, align 4
  %v2_b1c8 = add i32 %v0_b1c8, %v2_b1c4
  %v1_b1cc = add i32 %v2_b1c8, -1
  %v2_b1cc = inttoptr i32 %v1_b1cc to i8*
  %v3_b1cc = load i8, i8* %v2_b1cc, align 1
  %v4_b1cc = zext i8 %v3_b1cc to i32
  store i32 %v4_b1cc, i32* %r3.global-to-local, align 4
  %v2_b1d0 = icmp ugt i8 %v3_b1cc, 33
  store i1 %v2_b1d0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_b1d0 = icmp ult i8 %v3_b1cc, 34
  store i1 %v6_b1d0, i1* %cpsr_n.global-to-local, align 1
  %v7_b1d0 = icmp eq i8 %v3_b1cc, 34
  store i1 %v7_b1d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b1d0, label %dec_label_pc_b1d8, label %dec_label_pc_ac34

dec_label_pc_b1d8:                                ; preds = %dec_label_pc_b1b0
  store i32 %v10_9714, i32* %r3.global-to-local, align 4
  %v3_b1dc = load i32, i32* %stack_var_-40, align 4
  %v0_b1e0 = load i32, i32* @r6, align 4
  %v2_b1e0 = add i32 %v0_b1e0, %v3_b1dc
  store i32 %v2_b1e0, i32* %r4.global-to-local, align 4
  store i32 %v2_b1e0, i32* %r0.global-to-local, align 4
  %v1_b1e8 = inttoptr i32 %v2_b1e0 to i8*
  %v2_b1e8 = call i32 @function_12d3c(i8* %v1_b1e8)
  store i32 %v2_b1e8, i32* %r0.global-to-local, align 4
  %v2_b1ec = add i32 %v2_b1e0, %v2_b1e8
  %v0_b1f0 = load i32, i32* @r5, align 4
  %v1_b1f0 = trunc i32 %v0_b1f0 to i8
  %v3_b1f0 = add i32 %v2_b1ec, -1
  %v4_b1f0 = inttoptr i32 %v3_b1f0 to i8*
  store i8 %v1_b1f0, i8* %v4_b1f0, align 1
  br label %dec_label_pc_ac34

dec_label_pc_b1f8:                                ; preds = %dec_label_pc_b0f0, %bb249
  %v2_b1fc = phi i32 [ %v1_b0e0, %bb249 ], [ %v2_b100, %dec_label_pc_b0f0 ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_b1fc = inttoptr i32 %v2_b1fc to i8*
  store i8 0, i8* %v3_b1fc, align 1
  br label %dec_label_pc_b114

dec_label_pc_b204:                                ; preds = %dec_label_pc_ac9c
  store i32 %v10_9714, i32* %ip.global-to-local, align 4
  %v3_b208 = load i32, i32* %stack_var_-40, align 4
  %v0_b20c = load i32, i32* @r5, align 4
  %v2_b20c = add i32 %v3_b208, 1
  %v1_b210 = add i32 %v2_b20c, %v0_b20c
  store i32 %v1_b210, i32* %r0.global-to-local, align 4
  %v1_b214 = inttoptr i32 %v1_b210 to i8*
  %v2_b214 = call i32 @function_12d3c(i8* %v1_b214)
  store i32 %v2_b214, i32* %r0.global-to-local, align 4
  %v1_b218 = add i32 %v2_b214, -255
  %v2_b218 = icmp ugt i32 %v2_b214, 254
  store i1 %v2_b218, i1* %cpsr_c.global-to-local, align 1
  %v3_b218 = sub i32 254, %v2_b214
  %v4_b218 = and i32 %v3_b218, %v2_b214
  %v5_b218 = icmp slt i32 %v4_b218, 0
  store i1 %v5_b218, i1* %cpsr_v.global-to-local, align 1
  %v6_b218 = icmp slt i32 %v1_b218, 0
  store i1 %v6_b218, i1* %cpsr_n.global-to-local, align 1
  %v7_b218 = icmp eq i32 %v2_b214, 255
  store i1 %v7_b218, i1* %cpsr_z.global-to-local, align 1
  %v8_b21c = icmp sgt i32 %v2_b214, 255
  br i1 %v8_b21c, label %dec_label_pc_aca8, label %dec_label_pc_b220

dec_label_pc_b220:                                ; preds = %dec_label_pc_b204
  %v0_b220 = load i32, i32* %sb.global-to-local, align 4
  %v1_b224 = add i32 %v0_b220, 533
  store i32 %v1_b224, i32* @r4, align 4
  store i32 %v1_b224, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_b230 = call i32 @function_12ddc(i32 %v1_b224, i32 255)
  store i32 %v10_9714, i32* %lr.global-to-local, align 4
  %v3_b238 = load i32, i32* %stack_var_-40, align 4
  %v0_b23c = load i32, i32* @r5, align 4
  %v2_b23c = add i32 %v3_b238, 1
  %v1_b240 = add i32 %v2_b23c, %v0_b23c
  store i32 %v1_b240, i32* %r0.global-to-local, align 4
  %v1_b244 = inttoptr i32 %v1_b240 to i8*
  %v2_b244 = call i32 @function_12d3c(i8* %v1_b244)
  store i32 %v2_b244, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_b248 = icmp slt i32 %v2_b244, 0
  store i1 %v1_b248, i1* %cpsr_n.global-to-local, align 1
  %v2_b248 = icmp eq i32 %v2_b244, 0
  store i1 %v2_b248, i1* %cpsr_z.global-to-local, align 1
  %tmp253 = icmp slt i32 %v2_b244, 1
  br i1 %tmp253, label %dec_label_pc_aca8, label %dec_label_pc_b250

dec_label_pc_b250:                                ; preds = %dec_label_pc_b220
  store i32 %v10_9714, i32* %r2.global-to-local, align 4
  %v3_b254 = load i32, i32* %stack_var_-40, align 4
  %v0_b258 = load i32, i32* @r5, align 4
  %v0_b25c = load i32, i32* @r4, align 4
  store i32 %v0_b25c, i32* @r0, align 4
  %v2_b258 = add i32 %v3_b254, 1
  %v1_b260 = add i32 %v2_b258, %v0_b258
  store i32 %v1_b260, i32* %r1.global-to-local, align 4
  %v2_b264 = inttoptr i32 %v0_b25c to i8*
  %v3_b264 = call i32 @function_12d64(i8* %v2_b264, i32 %v1_b260)
  store i32 %v3_b264, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aca8

dec_label_pc_b294:                                ; preds = %dec_label_pc_9868, %dec_label_pc_98a0
  %v0_98ec = call i32 @function_105b4()
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_98f4 = urem i32 %v0_98ec, 5
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_98f8 = icmp ult i32 %v2_98f4, 4
  store i1 %v6_98f8, i1* %cpsr_n.global-to-local, align 1
  %v7_98f8 = icmp eq i32 %v2_98f4, 4
  store i1 %v7_98f8, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_b2fc = call i32 @function_12288(i32 54)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 54, i32* %r0.global-to-local, align 4
  %v3_b308 = call i32 @function_121a4(i32 54, i32* null)
  store i32 %v3_b308, i32* %r1.global-to-local, align 4
  %v0_b310 = load i32, i32* @r5, align 4
  %v1_b310 = add i32 %v0_b310, 20
  store i32 %v1_b310, i32* @r0, align 4
  %v2_b314 = inttoptr i32 %v1_b310 to i8*
  %v3_b314 = call i32 @function_12d64(i8* %v2_b314, i32 %v3_b308)
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_b31c = call i32 @function_121d0(i32 54)
  %v0_b294 = load i32, i32* @sl, align 4
  store i32 %v0_b294, i32* %r1.global-to-local, align 4
  store i32 %v0_9830, i32* @r0, align 4
  %v2_b29c = inttoptr i32 %v0_9830 to i8*
  %v3_b29c = call i32 @function_12d64(i8* %v2_b29c, i32 %v0_b294)
  store i32 %v3_b29c, i32* %r0.global-to-local, align 4
  store i32 %v0_97c0, i32* %r1.global-to-local, align 4
  %v0_b2a4 = load i32, i32* @r7, align 4
  %v1_b2a4 = add i32 %v0_b2a4, 1
  store i32 %v1_b2a4, i32* @r7, align 4
  %v0_b2a8 = load i32, i32* @r5, align 4
  %v2_b2ac = sub i32 %v0_97c0, %v1_b2a4
  %v3_b2ac = icmp uge i32 %v0_97c0, %v1_b2a4
  store i1 %v3_b2ac, i1* %cpsr_c.global-to-local, align 1
  %v4_b2ac = xor i32 %v1_b2a4, %v0_97c0
  %v5_b2ac = xor i32 %v2_b2ac, %v0_97c0
  %v6_b2ac = and i32 %v5_b2ac, %v4_b2ac
  %v7_b2ac = icmp slt i32 %v6_b2ac, 0
  store i1 %v7_b2ac, i1* %cpsr_v.global-to-local, align 1
  %v8_b2ac = icmp slt i32 %v2_b2ac, 0
  store i1 %v8_b2ac, i1* %cpsr_n.global-to-local, align 1
  %v9_b2ac = icmp eq i32 %v0_97c0, %v1_b2a4
  store i1 %v9_b2ac, i1* %cpsr_z.global-to-local, align 1
  %v1_b2b0 = add i32 %v0_b2a8, 3140
  store i32 %v1_b2b0, i32* @r5, align 4
  br i1 %v9_b2ac, label %dec_label_pc_b2b8, label %dec_label_pc_97f0

dec_label_pc_b2b8:                                ; preds = %dec_label_pc_b294
  %v1_b2c4 = add i32 %v3_97d4, 1456
  %v0_b2cc = load i32, i32* %r8.global-to-local, align 4
  %v1_b2cc = urem i32 %v0_b2cc, 256
  store i32 %v1_b2cc, i32* %ip.global-to-local, align 4
  %v1_b2d0 = add i32 %v3_97d4, 1464
  store i32 %v1_b2d0, i32* %r2.global-to-local, align 4
  %v2_b2d4 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_b2d4, i32* %r3.global-to-local, align 4
  store i32 %v1_b2c4, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_994c.preheader

; uselistorder directives
  uselistorder i32 %v2_b2d4, { 1, 0 }
  uselistorder i32 %v1_b2d0, { 1, 0 }
  uselistorder i32 %v1_b2c4, { 1, 0 }
  uselistorder i32 %v1_b2b0, { 1, 0 }
  uselistorder i32 %v2_b2ac, { 1, 0 }
  uselistorder i32 %v1_b2a4, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_98f4, { 1, 0 }
  uselistorder i32 %v2_b214, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_b1b0, { 1, 0, 2 }
  uselistorder i32 %v2_b150, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_b128, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_b10c, { 1, 0 }
  uselistorder i8 %v4_b100, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_b108, { 1, 0, 2 }
  uselistorder i1 %v7_b0f0, { 1, 0 }
  uselistorder i32 %v1_b0e0, { 1, 0, 2 }
  uselistorder i1 %v7_b0dc, { 1, 0 }
  uselistorder i1 %v9_b0d4, { 1, 0 }
  uselistorder i32 %v2_b0b4, { 1, 0 }
  uselistorder i32 %v0_b098, { 2, 0, 1, 3 }
  uselistorder i32 %v2_b034, { 1, 0, 2 }
  uselistorder i32 %v1_b02c, { 1, 0, 2 }
  uselistorder i32 %v2_afe4, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_afb8, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_af3c, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_af20, { 1, 0, 2 }
  uselistorder i32 %v4_af18, { 2, 1, 0, 3 }
  uselistorder i32 %v2_aee0, { 1, 0 }
  uselistorder i32 %v1_aee0, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_aee0, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_ae48, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_ae20, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_ae00, { 1, 0 }
  uselistorder i8 %v4_adf8, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_ae00, { 1, 0, 3, 2 }
  uselistorder i1 %v7_ade4, { 1, 0 }
  uselistorder i32 %v1_add4, { 1, 0, 2 }
  uselistorder i1 %v7_add0, { 1, 0 }
  uselistorder i32 %v0_ad90, { 2, 0, 1, 3 }
  uselistorder i32 %v2_ad74, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_ac90, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_ac64, { 1, 0 }
  uselistorder i32 %v1_ac64, { 2, 0, 1, 3 }
  uselistorder i32 %v2_ac60, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_ac40, { 0, 2, 1, 3 }
  uselistorder i32 %v0_ac28, { 1, 0 }
  uselistorder i32 %v0_b1b0, { 1, 0 }
  uselistorder i32 %v1_abe4, { 1, 2, 0 }
  uselistorder i32 %v5_abe0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_abcc, { 1, 0 }
  uselistorder i32 %v2_abc0, { 1, 0, 2 }
  uselistorder i32 %v1_ab84, { 0, 2, 1 }
  uselistorder i32 %v1_ab74, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_ab60, { 0, 2, 1, 3 }
  uselistorder i32 %v1_ab1c, { 1, 2, 0 }
  uselistorder i32 %v4_ab18, { 1, 8, 2, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_ab00.v4_aae0, { 1, 0, 2 }
  uselistorder i32 %v1_aabc, { 1, 2, 0 }
  uselistorder i32 %v4_aab4, { 0, 2, 1, 3 }
  uselistorder i32 %v2_aa74, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_aa6c, { 1, 2, 0 }
  uselistorder i32 %v5_aa60, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_a9ec, { 1, 2, 0 }
  uselistorder i32 %v4_a9e8, { 0, 2, 1, 3 }
  uselistorder i32 %v4_a9c8, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a9b0, { 1, 2, 0 }
  uselistorder i32 %v4_a9ac, { 0, 2, 1, 3 }
  uselistorder i32 %v3_a994, { 1, 0 }
  uselistorder i32 %v2_a98c, { 1, 2, 0 }
  uselistorder i32 %v4_a988, { 0, 2, 1, 3 }
  uselistorder i32 %v0_a94c, { 2, 1, 0 }
  uselistorder i32 %v3_a940, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_a920, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_a920, { 1, 0 }
  uselistorder i32 %v0_a920, { 1, 0 }
  uselistorder i32 %v3_a908, { 1, 2, 0, 3 }
  uselistorder i32 %v0_a8fc, { 1, 2, 0 }
  uselistorder i32 %v0_a8e4, { 0, 2, 1 }
  uselistorder i32 %v3_a8c4, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge74, { 1, 0 }
  uselistorder i32 %v3_a89c, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_a87c, { 1, 2, 0 }
  uselistorder i32 %v5_a870, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_a83c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_a834, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_a808, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_a7e8, { 1, 0, 2 }
  uselistorder i32 %v1_a7c4, { 1, 2, 0 }
  uselistorder i32 %v4_a7c0, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_a7a8.v4_a788, { 1, 0, 2 }
  uselistorder i32 %v1_a768, { 1, 2, 0 }
  uselistorder i32 %v4_a764, { 0, 2, 1, 3 }
  uselistorder i32 %v2_a714, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_a710, { 1, 0 }
  uselistorder i32 %v0_a6f8, { 1, 0 }
  uselistorder i32 %v0_a6fc, { 1, 0 }
  uselistorder i32 %v2_a6d8, { 1, 0 }
  uselistorder i32 %v1_a6d4, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_a6d0, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_a6a0, { 1, 0 }
  uselistorder i1 %v7_a668, { 0, 2, 1 }
  uselistorder i32 %v1_a68c, { 1, 0 }
  uselistorder i32 %v2_a688, { 1, 0 }
  uselistorder i32 %v3_a684, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_a67c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_a678, { 1, 0 }
  uselistorder i32 %v1_a5e8, { 1, 2, 0 }
  uselistorder i32 %v4_a5e4, { 7, 6, 1, 4, 5, 3, 2, 8, 0, 10, 9, 11 }
  uselistorder i32 %v2_a5cc, { 1, 0, 2 }
  uselistorder i32 %v2_a5c8, { 1, 0, 2 }
  uselistorder i32 %v0_a5ac, { 0, 2, 1 }
  uselistorder i32 %v4_a5a4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_a580, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_a574, { 1, 2, 0 }
  uselistorder i32 %v4_a56c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a508, { 1, 2, 0 }
  uselistorder i32 %v4_a504, { 1, 2, 8, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_a4ec.v4_a4cc, { 1, 0, 2 }
  uselistorder i32 %v1_a49c, { 1, 2, 0 }
  uselistorder i32 %v4_a498, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a420, { 1, 2, 0 }
  uselistorder i32 %v4_a41c, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_a404.v4_a3e4, { 1, 0, 2 }
  uselistorder i32 %v1_a3c0, { 1, 2, 0 }
  uselistorder i32 %v4_a3b8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a338, { 1, 2, 0 }
  uselistorder i32 %v4_a334, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_a31c.v4_a2fc, { 1, 0, 2 }
  uselistorder i32 %v1_a2dc, { 1, 2, 0 }
  uselistorder i32 %v4_a2d8, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a2b0, { 1, 2, 0 }
  uselistorder i32 %v4_a2ac, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a288, { 1, 2, 0 }
  uselistorder i32 %v4_a284, { 0, 2, 1, 3 }
  uselistorder i32 %v0_ad38, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_a23c, { 1, 2, 0 }
  uselistorder i32 %v5_a238, { 0, 2, 1, 3 }
  uselistorder i32 %v5_a214, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_a19c, { 0, 2, 1 }
  uselistorder i32 %v2_a190, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_a184, { 1, 0 }
  uselistorder i32 %v2_a178, { 1, 0 }
  uselistorder i32 %v0_a178, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_a170, { 1, 0 }
  uselistorder i32 %v1_a178, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_a154, { 1, 0, 2 }
  uselistorder i32 %v1_a14c, { 1, 0 }
  uselistorder i32 %v2_a134, { 1, 0 }
  uselistorder i32 %v0_a134, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_a110, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_a078, { 1, 0 }
  uselistorder i32 %v1_a074, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_a070, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_9f18, { 1, 0 }
  uselistorder i32 %v1_9f18, { 2, 0, 1, 3 }
  uselistorder i32 %v1_9ca4, { 2, 1, 0 }
  uselistorder i32 %v3_9ca0, { 1, 0 }
  uselistorder i32 %v1_9c80, { 1, 2, 0 }
  uselistorder i32 %v3_9c7c, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_9c6c, { 1, 0 }
  uselistorder i32 %v1_9c64, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_9c54, { 1, 0 }
  uselistorder i1 %v7_9c4c, { 1, 0 }
  uselistorder i32 %v1_9c30, { 2, 1, 0 }
  uselistorder i32 %v3_9c2c, { 1, 0 }
  uselistorder i32 %v0_9c30, { 1, 0 }
  uselistorder i32 %v2_9c00, { 1, 0 }
  uselistorder i32 %v1_9c00, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_9c00, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9bfc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9be8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_9ba8, { 1, 0 }
  uselistorder i32 %v2_9ba0, { 1, 0 }
  uselistorder i32 %v1_9b94, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9b80, { 1, 0 }
  uselistorder i32 %v0_9b80, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_9b78, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_9b80, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_9b68, { 1, 0 }
  uselistorder i32 %v3_9b5c, { 1, 0, 2 }
  uselistorder i32 %v0_9b18, { 1, 0, 2 }
  uselistorder i32 %v1_9abc, { 1, 2, 0 }
  uselistorder i32 %v3_9ab8, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_9a94, { 1, 2, 0 }
  uselistorder i32 %v3_9a88, { 0, 2, 1, 3 }
  uselistorder i32 %v4_9a74, { 1, 0 }
  uselistorder i8 %v3_9a74, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_9a74, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9d24, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_9a64, { 1, 0 }
  uselistorder i32 %v1_9a58, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_9a34, { 1, 0 }
  uselistorder i32 %v1_9a34, { 1, 0 }
  uselistorder i1 %v7_9a2c, { 1, 0 }
  uselistorder i32 %v4_9a10, { 1, 0, 2 }
  uselistorder i1 %v7_9a0c, { 1, 0 }
  uselistorder i32 %v4_99f0, { 1, 0, 2 }
  uselistorder i1 %v7_99ec, { 1, 0 }
  uselistorder i1 %v7_99e4, { 1, 0 }
  uselistorder i1 %v7_99dc, { 1, 0 }
  uselistorder i32 %v2_9a00, { 1, 0, 2, 3 }
  uselistorder i32 %v3_99b8254, { 1, 0 }
  uselistorder i32 %v5_99b4, { 1, 0 }
  uselistorder i8* %v1_9d64, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_9b6c, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_9af4, { 1, 0 }
  uselistorder i32 %v3_b2dc, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_9924, { 1, 0 }
  uselistorder i32 %v0_9924, { 1, 0 }
  uselistorder i32 %v2_98e4, { 1, 0 }
  uselistorder i32 %v8_98c8, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_98a8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_9830, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v3_97d4, { 2, 1, 5, 4, 0, 3, 6 }
  uselistorder i32 %v0_97c0, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_97b4, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_9744, { 1, 0, 2 }
  uselistorder i32 %v1_9740, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9730, { 1, 0 }
  uselistorder i32 %v3_972c, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_9724, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_9718, { 1, 0, 2 }
  uselistorder i32 %v10_9714, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_970c, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_96fc, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_96ec, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_96cc, { 1, 0 }
  uselistorder i32 %v0_96c8, { 1, 0, 3, 2 }
  uselistorder i8* %tmp200, { 4, 5, 3, 6, 2, 7, 1, 8, 0, 9, 10, 11 }
  uselistorder i32 %v2_96a4, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_969c, { 1, 0 }
  uselistorder i32 %v6_9624, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_9608, { 1, 0 }
  uselistorder i32 %v1_95fc, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 6, 5, 7, 8 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 4, 2, 3, 5, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 66, 68, 130, 131, 132, 69, 70, 72, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 116, 117, 118, 120, 121, 124, 125, 122, 123, 126, 128, 127, 129, 161, 162, 163, 164, 137, 133, 134, 135, 136, 138, 140, 139, 3, 142, 141, 2, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 91, 92, 93, 39, 94, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 84, 85, 88, 89, 90, 118, 119, 95, 96, 97, 98, 100, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 62, 63, 151, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1, 39, 40, 41, 42, 45, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 139, 140, 141, 142, 143, 65, 144, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 130, 132, 133, 135, 134, 136, 137, 138, 170, 171, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 0 }
  uselistorder i32* %r0.global-to-local, { 10, 135, 136, 200, 11, 13, 12, 14, 16, 15, 18, 17, 20, 19, 21, 23, 22, 24, 27, 25, 26, 29, 28, 32, 30, 31, 34, 33, 35, 36, 38, 37, 39, 40, 41, 43, 42, 44, 46, 45, 48, 47, 49, 51, 50, 53, 52, 54, 56, 55, 58, 57, 59, 61, 60, 62, 65, 63, 64, 67, 66, 70, 68, 69, 72, 71, 74, 73, 76, 75, 78, 77, 79, 81, 80, 83, 82, 85, 84, 86, 87, 89, 88, 91, 90, 93, 92, 94, 96, 95, 97, 98, 99, 101, 100, 103, 102, 104, 106, 105, 107, 109, 108, 111, 110, 112, 113, 116, 114, 115, 117, 119, 118, 120, 122, 121, 124, 123, 125, 127, 126, 129, 128, 131, 130, 132, 134, 133, 8, 272, 274, 273, 275, 7, 276, 277, 278, 280, 279, 3, 137, 139, 138, 141, 140, 143, 142, 146, 144, 145, 148, 147, 149, 151, 150, 152, 2, 153, 155, 154, 157, 156, 158, 160, 159, 161, 163, 162, 164, 165, 167, 166, 169, 168, 170, 172, 171, 173, 175, 174, 176, 177, 179, 178, 181, 180, 182, 184, 183, 185, 187, 186, 188, 190, 189, 191, 192, 194, 193, 196, 195, 203, 197, 198, 287, 199, 201, 202, 205, 204, 206, 4, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 260, 262, 263, 264, 265, 267, 266, 268, 269, 270, 271, 329, 331, 330, 333, 332, 283, 284, 282, 281, 292, 285, 286, 288, 290, 289, 291, 294, 293, 295, 6, 296, 298, 297, 299, 5, 1, 301, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 314, 317, 316, 319, 318, 9, 320, 322, 321, 323, 324, 325, 326, 327, 328, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 34, 35, 36, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 44, 45, 37, 38, 39, 40, 0, 41, 42, 43 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 42, 43, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 53, 54, 55, 56, 44, 45, 0, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 6, 3, 2, 8, 9, 10, 11, 4, 5, 26, 27, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 7, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 140, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 123, 124, 125, 126, 127, 70, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 107, 109, 110, 111, 116, 118, 117, 112, 113, 114, 115, 119, 120, 121, 122, 128, 129, 137, 138, 130, 131, 132, 133, 134, 135, 136, 139, 0, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 134, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 117, 118, 119, 120, 121, 69, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 111, 108, 109, 110, 113, 114, 115, 116, 122, 123, 131, 132, 124, 125, 126, 127, 128, 129, 130, 133, 0, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 137, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 120, 121, 122, 123, 124, 69, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 113, 115, 114, 109, 110, 111, 112, 116, 117, 118, 119, 125, 126, 134, 135, 127, 128, 129, 130, 131, 132, 133, 136, 0, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 147, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 126, 127, 128, 129, 130, 131, 72, 73, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 120, 119, 114, 115, 116, 117, 121, 122, 123, 124, 125, 132, 133, 143, 144, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 0, 150, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164 }
  uselistorder i32 ptrtoint (i32* @global_var_136d8.129 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_136c8.124 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_136c0.122 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_136bc.120 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_136b4.118 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_13694.106 to i32), { 0, 2, 1, 3 }
  uselistorder i8 7, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 51, { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 50, { 0, 2, 1, 3 }
  uselistorder i32 49, { 0, 2, 1, 3 }
  uselistorder [4 x i8]* @global_var_1369c.100, { 1, 0 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_1369c.100 to i32), { 0, 2, 3, 1, 4 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_b294, { 1, 0 }
  uselistorder label %dec_label_pc_b140, { 1, 0 }
  uselistorder label %.thread73, { 1, 0 }
  uselistorder label %dec_label_pc_b114, { 2, 0, 1 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %dec_label_pc_af58, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ae38, { 1, 0 }
  uselistorder label %.thread67, { 1, 0 }
  uselistorder label %dec_label_pc_ae0c, { 2, 0, 1 }
  uselistorder label %.thread64, { 1, 0 }
  uselistorder label %dec_label_pc_aca8, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_ac5c, { 1, 0 }
  uselistorder label %dec_label_pc_ac34, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ac28, { 1, 0 }
  uselistorder label %bb240, { 1, 0 }
  uselistorder label %bb238, { 1, 0 }
  uselistorder label %dec_label_pc_aa80, { 1, 0 }
  uselistorder label %dec_label_pc_aa10, { 1, 0 }
  uselistorder label %dec_label_pc_a8e4, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_a8bc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a854, { 1, 2, 0 }
  uselistorder label %dec_label_pc_a824, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb236, { 1, 0 }
  uselistorder label %dec_label_pc_a6a8, { 1, 0 }
  uselistorder label %dec_label_pc_a6a0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_a678, { 1, 0 }
  uselistorder label %dec_label_pc_a638, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %bb228, { 1, 0 }
  uselistorder label %dec_label_pc_a54c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a548, { 2, 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %.thread49, { 3, 0, 1, 2 }
  uselistorder label %bb223, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %dec_label_pc_a244, { 1, 0 }
  uselistorder label %dec_label_pc_a16c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a0f0, { 1, 0 }
  uselistorder label %dec_label_pc_a0d8, { 1, 0 }
  uselistorder label %dec_label_pc_a09c, { 1, 0 }
  uselistorder label %dec_label_pc_a028, { 1, 0 }
  uselistorder label %dec_label_pc_9ff0, { 1, 0 }
  uselistorder label %dec_label_pc_9d30, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9d00, { 1, 0 }
  uselistorder label %dec_label_pc_9c5c, { 7, 8, 2, 9, 1, 10, 3, 11, 12, 13, 0, 14, 15, 6, 4, 5 }
  uselistorder label %dec_label_pc_9a54, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_9980.dec_label_pc_9980_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_9960.dec_label_pc_9960_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_994c, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_994c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_9868, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb206, { 1, 0 }
  uselistorder label %bb204, { 1, 0 }
  uselistorder label %dec_label_pc_9720, { 1, 0 }
  uselistorder label %dec_label_pc_96dc, { 1, 3, 4, 0, 2 }
}

define i32 @function_b3a8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b3a8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b3a8 = load i32, i32* @r4, align 4
  %v6_b3a8 = load i32, i32* @r5, align 4
  %v9_b3a8 = load i32, i32* @r6, align 4
  %v12_b3a8 = load i32, i32* @r7, align 4
  %v15_b3a8 = load i32, i32* @r8, align 4
  %v21_b3a8 = load i32, i32* @sl, align 4
  %v24_b3a8 = load i32, i32* @fp, align 4
  %v1_b3ac = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_b3ac, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b3c8 = urem i32 %arg4, 256
  store i32 %v1_b3c8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b3d8 = call i32* @calloc(i32 %v1_b3ac, i32 4)
  %v4_b3d8 = ptrtoint i32* %v2_b3d8 to i32
  %v0_b3dc = load i32, i32* @r5, align 4
  store i32 %v0_b3dc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b3e8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b3e8, i32* %r3.global-to-local, align 4
  %v0_b3ec = load i32, i32* @r4, align 4
  store i32 %v0_b3ec, i32* %r0.global-to-local, align 4
  %v5_b3f0 = inttoptr i32 %v0_b3dc to i32*
  %v6_b3f0 = call i32 @function_8f6c(i32 %v0_b3ec, i32* %v5_b3f0, i32 2, i32 %v0_b3e8)
  %v1_b3fc = urem i32 %v6_b3f0, 256
  store i32 %v1_b3fc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b408 = load i32, i32* @r5, align 4
  store i32 %v0_b408, i32* %r1.global-to-local, align 4
  %v0_b40c = load i32, i32* @r4, align 4
  store i32 %v0_b40c, i32* %r0.global-to-local, align 4
  %v5_b410 = trunc i32 %v6_b3f0 to i8
  %v6_b414 = inttoptr i32 %v0_b408 to i32*
  %v7_b414 = call i32 @function_8f6c(i32 %v0_b40c, i32* %v6_b414, i32 3, i32 65535)
  %v0_b418 = load i32, i32* @r5, align 4
  store i32 %v0_b418, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b414, i32* @r7, align 4
  %v0_b428 = load i32, i32* @r4, align 4
  store i32 %v0_b428, i32* %r0.global-to-local, align 4
  %v4_b42c = inttoptr i32 %v0_b418 to i32*
  %v5_b42c = call i32 @function_8f6c(i32 %v0_b428, i32* %v4_b42c, i32 4, i32 64)
  %v1_b434 = urem i32 %v5_b42c, 256
  store i32 %v1_b434, i32* %ip.global-to-local, align 4
  %v0_b438 = load i32, i32* @r5, align 4
  store i32 %v0_b438, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b444 = load i32, i32* @r4, align 4
  store i32 %v0_b444, i32* %r0.global-to-local, align 4
  %v5_b448 = trunc i32 %v5_b42c to i8
  %v6_b44c = inttoptr i32 %v0_b438 to i32*
  %v7_b44c = call i32 @function_8f6c(i32 %v0_b444, i32* %v6_b44c, i32 5, i32 1)
  %v1_b458 = urem i32 %v7_b44c, 256
  store i32 %v1_b458, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b464 = load i32, i32* @r5, align 4
  store i32 %v0_b464, i32* %r1.global-to-local, align 4
  %v0_b468 = load i32, i32* @r4, align 4
  store i32 %v0_b468, i32* %r0.global-to-local, align 4
  %v5_b470 = inttoptr i32 %v0_b464 to i32*
  %v6_b470 = call i32 @function_8f6c(i32 %v0_b468, i32* %v5_b470, i32 6, i32 65535)
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b488 = load i32, i32* @r4, align 4
  store i32 %v0_b488, i32* %r0.global-to-local, align 4
  %v5_b48c = inttoptr i32 %v0_b47c to i32*
  %v6_b48c = call i32 @function_8f6c(i32 %v0_b488, i32* %v5_b48c, i32 7, i32 65535)
  %v0_b490 = load i32, i32* @r5, align 4
  store i32 %v0_b490, i32* %r1.global-to-local, align 4
  %v0_b494 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b494, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_b48c, i32* @sl, align 4
  %v0_b4a0 = load i32, i32* @r4, align 4
  store i32 %v0_b4a0, i32* %r0.global-to-local, align 4
  %v4_b4a4 = inttoptr i32 %v0_b490 to i32*
  %v5_b4a4 = call i32 @function_8f6c(i32 %v0_b4a0, i32* %v4_b4a4, i32 %v0_b494, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b4b4 = load i32, i32* @r5, align 4
  store i32 %v0_b4b4, i32* %r1.global-to-local, align 4
  %v0_b4b8 = load i32, i32* @r4, align 4
  store i32 %v0_b4b8, i32* %r0.global-to-local, align 4
  %v4_b4bc = inttoptr i32 %v0_b4b4 to i32*
  %v5_b4bc = call i32 @function_8f6c(i32 %v0_b4b8, i32* %v4_b4bc, i32 1, i32 1)
  %v1_b4c4 = urem i32 %v5_b4bc, 256
  store i32 %v1_b4c4, i32* %ip.global-to-local, align 4
  %v0_b4c8 = load i32, i32* @r5, align 4
  store i32 %v0_b4c8, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_b4d0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b4d0, i32* %r3.global-to-local, align 4
  %v0_b4d4 = load i32, i32* @r4, align 4
  store i32 %v0_b4d4, i32* %r0.global-to-local, align 4
  %v5_b4dc = inttoptr i32 %v0_b4c8 to i32*
  %v6_b4dc = call i32 @function_8f6c(i32 %v0_b4d4, i32* %v5_b4dc, i32 18, i32 %v0_b4d0)
  %v0_b4e4 = load i32, i32* @r5, align 4
  store i32 %v0_b4e4, i32* %r1.global-to-local, align 4
  %v2_b4e8 = load i32, i32* @global_var_1c21c.133, align 4
  store i32 %v2_b4e8, i32* %r3.global-to-local, align 4
  store i32 %v6_b4dc, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_b4f4 = load i32, i32* @r4, align 4
  store i32 %v0_b4f4, i32* %r0.global-to-local, align 4
  %v4_b4f8 = inttoptr i32 %v0_b4e4 to i32*
  %v5_b4f8 = call i32 @function_8f6c(i32 %v0_b4f4, i32* %v4_b4f8, i32 24, i32 %v2_b4e8)
  %v0_b500 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b500, i32* %r0.global-to-local, align 4
  %v1_b504 = inttoptr i32 %v0_b500 to i32*
  %v2_b504 = call i32 @time(i32* %v1_b504)
  %v1_b508 = load i32, i32* @r6, align 4
  %v2_b508 = add i32 %v1_b508, %v2_b504
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b51c = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_b51c, i32* %r0.global-to-local, align 4
  %v7_b520 = icmp eq i32 %v3_b51c, -1
  store i1 %v7_b520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b520, label %dec_label_pc_bb38, label %dec_label_pc_b52c

dec_label_pc_b52c:                                ; preds = %dec_label_pc_b3a8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b534 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b534, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b53c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b53c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_b548 = call i32 @setsockopt(i32 %v3_b51c, i32 %v0_b53c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_b548, i32* %r0.global-to-local, align 4
  %v7_b54c = icmp eq i32 %v7_b548, -1
  store i1 %v7_b54c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b54c, label %dec_label_pc_bb40, label %dec_label_pc_b554

dec_label_pc_b554:                                ; preds = %dec_label_pc_b52c
  %v0_b560 = load i32, i32* @sl, align 4
  %v3_b560 = mul i32 %v0_b560, 65536
  store i32 %v3_b560, i32* %sl.global-to-local, align 4
  %v0_b564 = load i32, i32* @r7, align 4
  %v3_b564 = mul i32 %v0_b564, 65536
  store i32 %v3_b564, i32* %r7.global-to-local, align 4
  %v2_b56c = icmp eq i32 %v1_b3ac, 0
  store i1 %v2_b56c, i1* %cpsr_z.global-to-local, align 1
  %v0_b570 = load i32, i32* @r8, align 4
  %v1_b570 = urem i32 %v0_b570, 256
  store i32 %v1_b570, i32* %r8.global-to-local, align 4
  %v3_b574 = urem i32 %v0_b564, 65536
  store i32 %v3_b574, i32* %r3.global-to-local, align 4
  %v3_b578 = urem i32 %v6_b470, 65536
  store i32 %v3_b578, i32* %r1.global-to-local, align 4
  %v3_b57c = urem i32 %v0_b560, 65536
  store i32 %v3_b57c, i32* %r2.global-to-local, align 4
  %v0_b588 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b588, i32* %stack_var_-40, align 4
  br i1 %v2_b56c, label %dec_label_pc_b81c.preheader, label %dec_label_pc_b59c

dec_label_pc_b59c:                                ; preds = %dec_label_pc_b554
  %v3_b5a4 = mul i32 %v5_b4a4, 65536
  %v1_b5ac = urem i32 %v6_b470, 256
  %v1_b5b4 = add i32 %v3_b5a4, 524288
  %v1_b5b8 = add i32 %v3_b5a4, 4325376
  %v1_b5bc = urem i32 %v0_b560, 256
  %v1_b5c0 = add i32 %v3_b5a4, 1835008
  %v0_b564.not = or i32 %v0_b564, -65536
  %v1_b5c8 = xor i32 %v0_b564.not, 65535
  %v3_b5cc = udiv i32 %v1_b5c0, 256
  %tmp83 = udiv i32 %v0_b564, 256
  %v1_b5e0 = and i32 %v3_b5cc, 65280
  store i32 %v1_b5e0, i32* %r0.global-to-local, align 4
  %v3_b604 = mul nuw nsw i32 %v1_b5ac, 256
  %tmp84 = udiv i32 %v6_b470, 256
  %v4_b60c = urem i32 %tmp84, 256
  %v5_b60c = or i32 %v4_b60c, %v3_b604
  store i32 %v5_b60c, i32* %lr.global-to-local, align 4
  %tmp85 = mul nsw i32 %v1_b5c8, 256
  %v3_b614 = mul nuw nsw i32 %v1_b5bc, 256
  %sext24 = mul i32 %tmp83, 16777216
  %v4_b61c = sdiv i32 %sext24, 16777216
  %v4_b5e4 = sdiv i32 %v1_b5b8, 16777216
  %tmp86 = udiv i32 %v0_b560, 256
  %v4_b624 = urem i32 %tmp86, 256
  %v5_b624 = or i32 %v4_b624, %v3_b614
  store i32 %v5_b624, i32* %r7.global-to-local, align 4
  %v1_b628 = and i32 %tmp85, 65280
  store i32 %v1_b628, i32* %ip.global-to-local, align 4
  %v4_b62c = sdiv i32 %v1_b5c0, 16777216
  %v3_b630 = udiv i32 %v1_b5b4, 256
  %tmp87 = udiv i32 %v1_b5c8, 256
  %v4_b634 = urem i32 %tmp87, 256
  %v5_b634 = or i32 %v4_b634, %v1_b628
  store i32 %v5_b634, i32* %r6.global-to-local, align 4
  %v3_b638 = ashr i32 %v1_b5b8, 31
  %v3_b63c = ashr i32 %sext24, 31
  %v1_b640 = and i32 %v3_b630, 65280
  store i32 %v1_b640, i32* %r5.global-to-local, align 4
  %v3_b64c = ashr i32 %v1_b5c0, 31
  store i32 %v3_b64c, i32* %r2.global-to-local, align 4
  %v3_b65033 = udiv i32 %v1_b628, 256
  store i32 %v3_b65033, i32* %r3.global-to-local, align 4
  store i32 %v1_b5ac, i32* %r1.global-to-local, align 4
  %v4_b658 = udiv i32 %v1_b5b4, 16777216
  %v5_b658 = or i32 %v4_b658, %v1_b640
  store i32 %v5_b658, i32* %r8.global-to-local, align 4
  %v5_b65c = trunc i32 %tmp87 to i8
  store i32 %v0_b588, i32* %r4.global-to-local, align 4
  %v3_b67434 = udiv i32 %v1_b640, 256
  store i32 %v3_b67434, i32* %sl.global-to-local, align 4
  store i32 %v1_b5bc, i32* %fp.global-to-local, align 4
  %v4_b6c8 = sext i8 %v5_b448 to i32
  %sext16 = mul i32 %v1_b5c8, 16777216
  %v4_b798 = sdiv i32 %sext16, 16777216
  %v2_b7c8 = icmp eq i32 %v1_b570, 0
  %sext17 = mul i32 %v6_b470, 16777216
  %v4_b7dc = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %tmp84, 16777216
  %v4_b7f8 = sdiv i32 %sext18, 16777216
  %v1_b6e0 = trunc i32 %v4_b61c to i8
  br label %dec_label_pc_b67c

dec_label_pc_b67c:                                ; preds = %bb98, %dec_label_pc_b59c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b688 = call i32* @calloc(i32 1510, i32 4)
  %v4_b688 = ptrtoint i32* %v2_b688 to i32
  store i32 %v4_b688, i32* %r0.global-to-local, align 4
  store i32 %v4_b3d8, i32* %r2.global-to-local, align 4
  %v3_b690 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b690, i32* %r3.global-to-local, align 4
  %v2_b694 = load i32, i32* %r4.global-to-local, align 4
  %v5_b694 = mul i32 %v2_b694, 4
  %v6_b694 = add i32 %v5_b694, %v4_b3d8
  %v7_b694 = inttoptr i32 %v6_b694 to i32*
  store i32 %v4_b688, i32* %v7_b694, align 4
  %v0_b698 = load i32, i32* %r2.global-to-local, align 4
  %v1_b698 = load i32, i32* %r3.global-to-local, align 4
  %v4_b698 = mul i32 %v1_b698, 4
  %v5_b698 = add i32 %v4_b698, %v0_b698
  %v6_b698 = inttoptr i32 %v5_b698 to i32*
  %v7_b698 = load i32, i32* %v6_b698, align 4
  store i32 %v7_b698, i32* %r4.global-to-local, align 4
  %v1_b69c = inttoptr i32 %v7_b698 to i8*
  %v2_b69c = load i8, i8* %v1_b69c, align 1
  %tmp = urem i8 %v2_b69c, 16
  %v1_b6a0 = zext i8 %tmp to i32
  %v1_b6a4 = or i32 %v1_b6a0, 64
  store i32 %v1_b6a4, i32* %r2.global-to-local, align 4
  %v1_b6a8 = trunc i32 %v1_b6a4 to i8
  store i8 %v1_b6a8, i8* %v1_b69c, align 1
  %v0_b6ac = load i32, i32* %r4.global-to-local, align 4
  %v1_b6ac = inttoptr i32 %v0_b6ac to i8*
  %v2_b6ac = load i8, i8* %v1_b6ac, align 1
  %v1_b6b0 = and i8 %v2_b6ac, -16
  %v1_b6b4 = or i8 %v1_b6b0, 5
  store i32 %v1_b458, i32* %r1.global-to-local, align 4
  store i8 %v1_b6b4, i8* %v1_b6ac, align 1
  %v2_b6c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6c4 = add i32 %v2_b6c4, 1
  %v4_b6c4 = inttoptr i32 %v3_b6c4 to i8*
  store i8 %v5_b410, i8* %v4_b6c4, align 1
  %v2_b6cc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6cc = add i32 %v2_b6cc, 8
  %v4_b6cc = inttoptr i32 %v3_b6cc to i8*
  store i8 %v5_b448, i8* %v4_b6cc, align 1
  store i32 %v4_b61c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_b6d8 = load i32, i32* %r1.global-to-local, align 4
  %v9_b6d8 = icmp eq i32 %v0_b6d8, 0
  store i1 %v9_b6d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b638, i32* %r2.global-to-local, align 4
  %v2_b6e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6e0 = add i32 %v2_b6e0, 4
  %v4_b6e0 = inttoptr i32 %v3_b6e0 to i8*
  store i8 %v1_b6e0, i8* %v4_b6e0, align 1
  store i32 %v4_b5e4, i32* %r1.global-to-local, align 4
  %v0_b6e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6e8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b67c
  %v1_b6e8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_b6e8, i32* %r3.global-to-local, align 4
  %v2_b6ec = trunc i32 %v1_b6e8 to i8
  %v3_b6ec = load i32, i32* %r4.global-to-local, align 4
  %v4_b6ec = add i32 %v3_b6ec, 7
  %v5_b6ec = inttoptr i32 %v4_b6ec to i8*
  store i8 %v2_b6ec, i8* %v5_b6ec, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b67c, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_b6f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b6f4 = trunc i32 %v0_b6f4 to i8
  %v2_b6f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6f4 = add i32 %v2_b6f4, 3
  %v4_b6f4 = inttoptr i32 %v3_b6f4 to i8*
  store i8 %v1_b6f4, i8* %v4_b6f4, align 1
  %v0_b6f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b6f8 = trunc i32 %v0_b6f8 to i8
  %v2_b6f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6f8 = add i32 %v2_b6f8, 2
  %v4_b6f8 = inttoptr i32 %v3_b6f8 to i8*
  store i8 %v1_b6f8, i8* %v4_b6f8, align 1
  %v0_b6fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6fc, label %bb89, label %bb88

bb88:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb89

bb89:                                             ; preds = %.thread, %bb88
  store i32 %v3_b63c, i32* %r1.global-to-local, align 4
  %v0_b704 = load i32, i32* %r3.global-to-local, align 4
  %v1_b704 = trunc i32 %v0_b704 to i8
  %v2_b704 = load i32, i32* %r4.global-to-local, align 4
  %v3_b704 = add i32 %v2_b704, 9
  %v4_b704 = inttoptr i32 %v3_b704 to i8*
  store i8 %v1_b704, i8* %v4_b704, align 1
  %v0_b708 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b708, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v1_b708 = load i32, i32* %r2.global-to-local, align 4
  %v2_b708 = trunc i32 %v1_b708 to i8
  %v3_b708 = load i32, i32* %r4.global-to-local, align 4
  %v4_b708 = add i32 %v3_b708, 6
  %v5_b708 = inttoptr i32 %v4_b708 to i8*
  store i8 %v2_b708, i8* %v5_b708, align 1
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v3_b70c = load i32, i32* %stack_var_-40, align 4
  %v5_b714 = mul i32 %v3_b70c, 24
  store i32 %v5_b714, i32* %r3.global-to-local, align 4
  store i32 %v5_b4f8, i32* %r2.global-to-local, align 4
  %v1_b71c = load i32, i32* %r4.global-to-local, align 4
  %v2_b71c = add i32 %v1_b71c, 12
  %v3_b71c = inttoptr i32 %v2_b71c to i32*
  store i32 %v5_b4f8, i32* %v3_b71c, align 4
  %v0_b720 = load i32, i32* %r3.global-to-local, align 4
  %v1_b720 = load i32, i32* @sb, align 4
  %v2_b720 = add i32 %v1_b720, %v0_b720
  store i32 %v2_b720, i32* %r3.global-to-local, align 4
  %v1_b724 = add i32 %v2_b720, 16
  %v2_b724 = inttoptr i32 %v1_b724 to i32*
  %v3_b724 = load i32, i32* %v2_b724, align 4
  store i32 %v3_b724, i32* %r2.global-to-local, align 4
  %v0_b728 = load i32, i32* %r1.global-to-local, align 4
  %v1_b728 = trunc i32 %v0_b728 to i8
  %v2_b728 = load i32, i32* %r4.global-to-local, align 4
  %v3_b728 = add i32 %v2_b728, 5
  %v4_b728 = inttoptr i32 %v3_b728 to i8*
  store i8 %v1_b728, i8* %v4_b728, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_b730 = load i32, i32* %r4.global-to-local, align 4
  %v1_b730 = add i32 %v0_b730, 20
  store i32 %v1_b730, i32* %r1.global-to-local, align 4
  %v3_b734 = add i32 %v0_b730, 22
  %v4_b734 = inttoptr i32 %v3_b734 to i8*
  store i8 101, i8* %v4_b734, align 1
  %v0_b738 = load i32, i32* %r2.global-to-local, align 4
  %v1_b738 = load i32, i32* %r4.global-to-local, align 4
  %v2_b738 = add i32 %v1_b738, 16
  %v3_b738 = inttoptr i32 %v2_b738 to i32*
  store i32 %v0_b738, i32* %v3_b738, align 4
  %v0_b73c = load i32, i32* %r4.global-to-local, align 4
  %v1_b73c = add i32 %v0_b73c, 24
  store i32 %v1_b73c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_b744 = load i32, i32* %r3.global-to-local, align 4
  %v1_b744 = add i32 %v0_b744, -93
  store i32 %v1_b744, i32* %r3.global-to-local, align 4
  %v2_b748 = load i32, i32* %r1.global-to-local, align 4
  %v3_b748 = add i32 %v2_b748, 3
  %v4_b748 = inttoptr i32 %v3_b748 to i8*
  store i8 88, i8* %v4_b748, align 1
  %v0_b74c = load i32, i32* %r3.global-to-local, align 4
  %v1_b74c = trunc i32 %v0_b74c to i8
  %v2_b74c = load i32, i32* %r0.global-to-local, align 4
  %v3_b74c = add i32 %v2_b74c, 12
  %v4_b74c = inttoptr i32 %v3_b74c to i8*
  store i8 %v1_b74c, i8* %v4_b74c, align 1
  %v0_b750 = load i32, i32* %ip.global-to-local, align 4
  %v1_b750 = trunc i32 %v0_b750 to i8
  %v2_b750 = load i32, i32* %r0.global-to-local, align 4
  %v3_b750 = add i32 %v2_b750, 13
  %v4_b750 = inttoptr i32 %v3_b750 to i8*
  store i8 %v1_b750, i8* %v4_b750, align 1
  %v0_b754 = load i32, i32* %r4.global-to-local, align 4
  %v1_b754 = add i32 %v0_b754, 38
  %v2_b754 = inttoptr i32 %v1_b754 to i8*
  %v3_b754 = load i8, i8* %v2_b754, align 1
  %tmp104 = urem i8 %v3_b754, 16
  %v1_b758 = zext i8 %tmp104 to i32
  %v1_b75c = or i32 %v1_b758, 64
  store i32 %v1_b75c, i32* %r3.global-to-local, align 4
  %v1_b760 = trunc i32 %v1_b75c to i8
  store i8 %v1_b760, i8* %v2_b754, align 1
  %v0_b764 = load i32, i32* %r4.global-to-local, align 4
  %v1_b764 = add i32 %v0_b764, 38
  %v2_b764 = inttoptr i32 %v1_b764 to i8*
  %v3_b764 = load i8, i8* %v2_b764, align 1
  %v1_b768 = and i8 %v3_b764, -16
  %v1_b76c = or i8 %v1_b768, 5
  store i8 %v1_b76c, i8* %v2_b764, align 1
  %v0_b778 = load i32, i32* %r4.global-to-local, align 4
  %v1_b778 = add i32 %v0_b778, 38
  store i32 %v1_b778, i32* %r5.global-to-local, align 4
  %v3_b77c = add i32 %v0_b778, 39
  %v4_b77c = inttoptr i32 %v3_b77c to i8*
  store i8 %v5_b410, i8* %v4_b77c, align 1
  store i32 %v4_b62c, i32* %r1.global-to-local, align 4
  store i32 %tmp87, i32* %r3.global-to-local, align 4
  store i32 %v3_b64c, i32* %r2.global-to-local, align 4
  %v2_b78c = load i32, i32* %r5.global-to-local, align 4
  %v3_b78c = add i32 %v2_b78c, 4
  %v4_b78c = inttoptr i32 %v3_b78c to i8*
  store i8 %v5_b65c, i8* %v4_b78c, align 1
  %v0_b790 = load i32, i32* %r1.global-to-local, align 4
  %v1_b790 = trunc i32 %v0_b790 to i8
  %v2_b790 = load i32, i32* %r5.global-to-local, align 4
  %v3_b790 = add i32 %v2_b790, 2
  %v4_b790 = inttoptr i32 %v3_b790 to i8*
  store i8 %v1_b790, i8* %v4_b790, align 1
  %v0_b794 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b794, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 %v4_b798, i32* %r1.global-to-local, align 4
  %v0_b79c = load i32, i32* %r2.global-to-local, align 4
  %v1_b79c = trunc i32 %v0_b79c to i8
  %v2_b79c = load i32, i32* %r5.global-to-local, align 4
  %v3_b79c = add i32 %v2_b79c, 3
  %v4_b79c = inttoptr i32 %v3_b79c to i8*
  store i8 %v1_b79c, i8* %v4_b79c, align 1
  store i32 %v4_b6c8, i32* %r2.global-to-local, align 4
  %v0_b7a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b7a4, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_b7a4 = load i32, i32* %r3.global-to-local, align 4
  %v2_b7a4 = trunc i32 %v1_b7a4 to i8
  %v3_b7a4 = load i32, i32* %r5.global-to-local, align 4
  %v4_b7a4 = add i32 %v3_b7a4, 6
  %v5_b7a4 = inttoptr i32 %v4_b7a4 to i8*
  store i8 %v2_b7a4, i8* %v5_b7a4, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b7ac = load i32, i32* %r1.global-to-local, align 4
  %v1_b7ac = trunc i32 %v0_b7ac to i8
  %v2_b7ac = load i32, i32* %r5.global-to-local, align 4
  %v3_b7ac = add i32 %v2_b7ac, 5
  %v4_b7ac = inttoptr i32 %v3_b7ac to i8*
  store i8 %v1_b7ac, i8* %v4_b7ac, align 1
  %v0_b7b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b7b0 = trunc i32 %v0_b7b0 to i8
  %v2_b7b0 = load i32, i32* %r5.global-to-local, align 4
  %v3_b7b0 = add i32 %v2_b7b0, 8
  %v4_b7b0 = inttoptr i32 %v3_b7b0 to i8*
  store i8 %v1_b7b0, i8* %v4_b7b0, align 1
  %v0_b7b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b7b4, label %bb97, label %bb96

bb96:                                             ; preds = %bb95
  %v1_b7b4 = load i32, i32* %ip.global-to-local, align 4
  %v2_b7b4 = trunc i32 %v1_b7b4 to i8
  %v3_b7b4 = load i32, i32* %r5.global-to-local, align 4
  %v4_b7b4 = add i32 %v3_b7b4, 7
  %v5_b7b4 = inttoptr i32 %v4_b7b4 to i8*
  store i8 %v2_b7b4, i8* %v5_b7b4, align 1
  br label %bb97

bb97:                                             ; preds = %bb95, %bb96
  %v0_b7b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7b8 = trunc i32 %v0_b7b8 to i8
  %v2_b7b8 = load i32, i32* %r5.global-to-local, align 4
  %v3_b7b8 = add i32 %v2_b7b8, 9
  %v4_b7b8 = inttoptr i32 %v3_b7b8 to i8*
  store i8 %v1_b7b8, i8* %v4_b7b8, align 1
  %v0_b7bc = call i32 @function_105b4()
  store i32 %v0_b7bc, i32* %r0.global-to-local, align 4
  store i32 %v1_b570, i32* %r1.global-to-local, align 4
  store i1 %v2_b7c8, i1* %cpsr_z.global-to-local, align 1
  %v1_b7cc = sub i32 1023, %v0_b7bc
  store i32 %v1_b7cc, i32* %r3.global-to-local, align 4
  br i1 %v2_b7c8, label %.thread19, label %.thread20

.thread19:                                        ; preds = %bb97
  %v2_b7d4 = load i32, i32* %r5.global-to-local, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 16
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i32*
  store i32 %v1_b7cc, i32* %v4_b7d4, align 4
  br label %bb98

.thread20:                                        ; preds = %bb97
  %v1_b7d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_b7d0 = add i32 %v1_b7d0, 16
  %v3_b7d0 = inttoptr i32 %v2_b7d0 to i32*
  %v4_b7d0 = load i32, i32* %v3_b7d0, align 4
  store i32 %v4_b7d0, i32* %r3.global-to-local, align 4
  %v2_b7d8 = load i32, i32* %r5.global-to-local, align 4
  %v3_b7d8 = add i32 %v2_b7d8, 16
  %v4_b7d8 = inttoptr i32 %v3_b7d8 to i32*
  store i32 %v4_b7d0, i32* %v4_b7d8, align 4
  br label %bb98

bb98:                                             ; preds = %.thread19, %.thread20
  store i32 %v4_b7dc, i32* %r3.global-to-local, align 4
  %v0_b7e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b7e0 = add i32 %v0_b7e0, 58
  store i32 %v1_b7e0, i32* %r6.global-to-local, align 4
  %v1_b7e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_b7e4 = add i32 %v1_b7e4, 12
  %v3_b7e4 = inttoptr i32 %v2_b7e4 to i32*
  store i32 %v0_b7bc, i32* %v3_b7e4, align 4
  %v0_b7e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7e8 = trunc i32 %v0_b7e8 to i8
  %v2_b7e8 = load i32, i32* %r6.global-to-local, align 4
  %v3_b7e8 = add i32 %v2_b7e8, 1
  %v4_b7e8 = inttoptr i32 %v3_b7e8 to i8*
  store i8 %v1_b7e8, i8* %v4_b7e8, align 1
  %v3_b7ec = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b7ec, i32* %r3.global-to-local, align 4
  store i32 %v1_b3ac, i32* %r1.global-to-local, align 4
  %v1_b7f4 = add i32 %v3_b7ec, 1
  store i32 %v1_b7f4, i32* %r4.global-to-local, align 4
  store i32 %v4_b7f8, i32* %r2.global-to-local, align 4
  %v9_b7fc = icmp eq i32 %v1_b7f4, %v1_b3ac
  store i1 %v9_b7fc, i1* %cpsr_z.global-to-local, align 1
  %v0_b800 = load i32, i32* %sl.global-to-local, align 4
  %v1_b800 = trunc i32 %v0_b800 to i8
  %v2_b800 = load i32, i32* %r6.global-to-local, align 4
  %v3_b800 = add i32 %v2_b800, 5
  %v4_b800 = inttoptr i32 %v3_b800 to i8*
  store i8 %v1_b800, i8* %v4_b800, align 1
  %v0_b804 = load i32, i32* %r2.global-to-local, align 4
  %v1_b804 = trunc i32 %v0_b804 to i8
  %v2_b804 = load i32, i32* %r6.global-to-local, align 4
  %v3_b804 = inttoptr i32 %v2_b804 to i8*
  store i8 %v1_b804, i8* %v3_b804, align 1
  %v0_b808 = load i32, i32* %r7.global-to-local, align 4
  %v1_b808 = trunc i32 %v0_b808 to i8
  %v2_b808 = load i32, i32* %r6.global-to-local, align 4
  %v3_b808 = add i32 %v2_b808, 2
  %v4_b808 = inttoptr i32 %v3_b808 to i8*
  store i8 %v1_b808, i8* %v4_b808, align 1
  %v0_b80c = load i32, i32* %fp.global-to-local, align 4
  %v1_b80c = trunc i32 %v0_b80c to i8
  %v2_b80c = load i32, i32* %r6.global-to-local, align 4
  %v3_b80c = add i32 %v2_b80c, 3
  %v4_b80c = inttoptr i32 %v3_b80c to i8*
  store i8 %v1_b80c, i8* %v4_b80c, align 1
  %v0_b810 = load i32, i32* %r8.global-to-local, align 4
  %v1_b810 = trunc i32 %v0_b810 to i8
  %v2_b810 = load i32, i32* %r6.global-to-local, align 4
  %v3_b810 = add i32 %v2_b810, 4
  %v4_b810 = inttoptr i32 %v3_b810 to i8*
  store i8 %v1_b810, i8* %v4_b810, align 1
  %v0_b814 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_b814, i32* %stack_var_-40, align 4
  %v5_b818 = icmp slt i32 %v1_b7f4, %v1_b3ac
  br i1 %v5_b818, label %dec_label_pc_b67c, label %dec_label_pc_b81c.preheader

dec_label_pc_b81c.preheader:                      ; preds = %bb98, %dec_label_pc_b554
  %v1_b83c = add i32 %v5_b4a4, 66
  %v1_b840 = add i32 %v5_b4a4, 8
  %v2_b854 = icmp eq i32 %v5_b4f8, -1
  %v7_b854 = icmp eq i32 %v5_b4f8, -1
  %v3_ba78 = icmp eq i32 %v3_b574, 65535
  %v2_bae8 = icmp eq i32 %v1_b570, 0
  %v2_b8b0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_b8c8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_b8d8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_b8e4 = ptrtoint i32* %stack_var_-50 to i32
  %v2_b8f8 = icmp eq i32 %v1_b4c4, 0
  br label %dec_label_pc_b81c

dec_label_pc_b81c:                                ; preds = %dec_label_pc_b81c.preheader, %dec_label_pc_bb24
  store i32 %v1_b3ac, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b56c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b56c, label %dec_label_pc_bb24, label %dec_label_pc_b830

dec_label_pc_b830:                                ; preds = %dec_label_pc_b81c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_b4a4, i32* %r1.global-to-local, align 4
  store i32 %v1_b83c, i32* @fp, align 4
  store i32 %v1_b840, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_b9d4

dec_label_pc_b850:                                ; preds = %dec_label_pc_b9d4
  store i32 %v5_b4f8, i32* %r2.global-to-local, align 4
  store i1 %v7_b854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b854, label %dec_label_pc_ba68, label %dec_label_pc_b85c

dec_label_pc_b85c:                                ; preds = %dec_label_pc_ba00, %dec_label_pc_b850
  store i32 %v3_b574, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba78, label %dec_label_pc_ba84, label %dec_label_pc_b870

dec_label_pc_b870:                                ; preds = %dec_label_pc_ba68.dec_label_pc_b870_crit_edge, %dec_label_pc_b85c
  %v1_b874 = phi i32 [ %v1_b874.pre, %dec_label_pc_ba68.dec_label_pc_b870_crit_edge ], [ 65535, %dec_label_pc_b85c ]
  store i32 %v3_b578, i32* %r1.global-to-local, align 4
  %v9_b874 = icmp eq i32 %v3_b578, %v1_b874
  store i1 %v9_b874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b874, label %dec_label_pc_babc, label %dec_label_pc_b87c

dec_label_pc_b87c:                                ; preds = %dec_label_pc_ba84.dec_label_pc_b87c_crit_edge, %dec_label_pc_b870
  %v1_b880 = phi i32 [ %v1_b880.pre, %dec_label_pc_ba84.dec_label_pc_b87c_crit_edge ], [ %v1_b874, %dec_label_pc_b870 ]
  store i32 %v3_b57c, i32* %r2.global-to-local, align 4
  %v9_b880 = icmp eq i32 %v3_b57c, %v1_b880
  store i1 %v9_b880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b880, label %dec_label_pc_bad8, label %dec_label_pc_b888

dec_label_pc_b888:                                ; preds = %dec_label_pc_babc, %dec_label_pc_b87c
  store i32 %v1_b570, i32* %r3.global-to-local, align 4
  store i1 %v2_bae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bae8, label %dec_label_pc_bafc, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_b888
  %v1_b890 = load i32, i32* @r5, align 4
  %v2_b890 = add i32 %v1_b890, 16
  %v3_b890 = inttoptr i32 %v2_b890 to i32*
  %v4_b890 = load i32, i32* %v3_b890, align 4
  store i32 %v4_b890, i32* %r3.global-to-local, align 4
  %v2_b894 = load i32, i32* @r6, align 4
  %v3_b894 = add i32 %v2_b894, 16
  %v4_b894 = inttoptr i32 %v3_b894 to i32*
  store i32 %v4_b890, i32* %v4_b894, align 4
  br label %dec_label_pc_b89c

dec_label_pc_b89c:                                ; preds = %bb103, %.thread21, %dec_label_pc_bafc
  %v0_b89c = call i32 @function_105b4()
  store i32 %v0_b89c, i32* %r0.global-to-local, align 4
  store i32 %v0_b89c, i32* %stack_var_-44, align 4
  %v0_b8a4 = call i32 @function_105b4()
  store i32 %v0_b8a4, i32* %r0.global-to-local, align 4
  store i32 %v0_b8a4, i32* %stack_var_-48, align 4
  %v0_b8ac = call i32 @function_105b4()
  store i32 %v2_b8b0, i32* %r1.global-to-local, align 4
  store i32 %v0_b8ac, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_b8bc = load i32, i32* @r8, align 4
  store i32 %v0_b8bc, i32* %r0.global-to-local, align 4
  %v3_b8c0 = call i32 @function_12db8(i32 %v0_b8bc, i32 %v2_b8b0, i32 4)
  %v0_b8c4 = load i32, i32* @r8, align 4
  %v1_b8c4 = add i32 %v0_b8c4, 6
  store i32 %v1_b8c4, i32* %r0.global-to-local, align 4
  store i32 %v2_b8c8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_b8d0 = call i32 @function_12db8(i32 %v1_b8c4, i32 %v2_b8c8, i32 4)
  %v0_b8d4 = load i32, i32* @r8, align 4
  %v1_b8d4 = add i32 %v0_b8d4, 4
  store i32 %v1_b8d4, i32* %r0.global-to-local, align 4
  store i32 %v2_b8d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_b8e0 = call i32 @function_12db8(i32 %v1_b8d4, i32 %v2_b8d8, i32 2)
  store i32 %v2_b8e4, i32* %r1.global-to-local, align 4
  %v0_b8e8 = load i32, i32* @r8, align 4
  %v1_b8e8 = add i32 %v0_b8e8, 10
  store i32 %v1_b8e8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_b8f0 = call i32 @function_12db8(i32 %v1_b8e8, i32 %v2_b8e4, i32 2)
  store i32 %v3_b8f0, i32* %r0.global-to-local, align 4
  store i32 %v1_b4c4, i32* %r1.global-to-local, align 4
  store i1 %v2_b8f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b8f8, label %dec_label_pc_b900, label %dec_label_pc_bb08

dec_label_pc_b900:                                ; preds = %dec_label_pc_b89c, %dec_label_pc_bb08
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b904 = load i32, i32* @sl, align 4
  %v1_b904 = trunc i32 %v0_b904 to i8
  %v2_b904 = load i32, i32* @r5, align 4
  %v3_b904 = add i32 %v2_b904, 10
  %v4_b904 = inttoptr i32 %v3_b904 to i8*
  store i8 %v1_b904, i8* %v4_b904, align 1
  %v0_b908 = load i32, i32* @sl, align 4
  %v1_b908 = trunc i32 %v0_b908 to i8
  %v2_b908 = load i32, i32* @r5, align 4
  %v3_b908 = add i32 %v2_b908, 11
  %v4_b908 = inttoptr i32 %v3_b908 to i8*
  store i8 %v1_b908, i8* %v4_b908, align 1
  %v0_b90c = load i32, i32* @r5, align 4
  store i32 %v0_b90c, i32* @r0, align 4
  %v2_b910 = call i32 @function_f188(i32 %v0_b90c, i32 20)
  %v3_b910 = trunc i32 %v2_b910 to i8
  %v4_b914 = sdiv i32 %v2_b910, 256
  store i32 %v4_b914, i32* %r3.global-to-local, align 4
  %v1_b918 = trunc i32 %v4_b914 to i8
  %v2_b918 = load i32, i32* @r5, align 4
  %v3_b918 = add i32 %v2_b918, 11
  %v4_b918 = inttoptr i32 %v3_b918 to i8*
  store i8 %v1_b918, i8* %v4_b918, align 1
  %v3_b91c = load i32, i32* @r5, align 4
  %v4_b91c = add i32 %v3_b91c, 10
  %v5_b91c = inttoptr i32 %v4_b91c to i8*
  store i8 %v3_b910, i8* %v5_b91c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b924 = load i32, i32* @sl, align 4
  %v1_b924 = trunc i32 %v0_b924 to i8
  %v2_b924 = load i32, i32* @r6, align 4
  %v3_b924 = add i32 %v2_b924, 10
  %v4_b924 = inttoptr i32 %v3_b924 to i8*
  store i8 %v1_b924, i8* %v4_b924, align 1
  %v0_b928 = load i32, i32* @sl, align 4
  %v1_b928 = trunc i32 %v0_b928 to i8
  %v2_b928 = load i32, i32* @r6, align 4
  %v3_b928 = add i32 %v2_b928, 11
  %v4_b928 = inttoptr i32 %v3_b928 to i8*
  store i8 %v1_b928, i8* %v4_b928, align 1
  %v0_b92c = load i32, i32* @r6, align 4
  store i32 %v0_b92c, i32* @r0, align 4
  %v2_b930 = call i32 @function_f188(i32 %v0_b92c, i32 20)
  %v3_b930 = trunc i32 %v2_b930 to i8
  store i32 %v2_b930, i32* %r0.global-to-local, align 4
  %v4_b934 = sdiv i32 %v2_b930, 256
  store i32 %v4_b934, i32* %r3.global-to-local, align 4
  %v3_b938 = load i32, i32* @r6, align 4
  %v4_b938 = add i32 %v3_b938, 10
  %v5_b938 = inttoptr i32 %v4_b938 to i8*
  store i8 %v3_b930, i8* %v5_b938, align 1
  %v0_b93c = load i32, i32* %r3.global-to-local, align 4
  %v1_b93c = trunc i32 %v0_b93c to i8
  %v2_b93c = load i32, i32* @r6, align 4
  %v3_b93c = add i32 %v2_b93c, 11
  %v4_b93c = inttoptr i32 %v3_b93c to i8*
  store i8 %v1_b93c, i8* %v4_b93c, align 1
  %v0_b940 = load i32, i32* @r7, align 4
  %v1_b940 = add i32 %v0_b940, 4
  %v2_b940 = inttoptr i32 %v1_b940 to i8*
  %v3_b940 = load i8, i8* %v2_b940, align 1
  %v4_b940 = zext i8 %v3_b940 to i32
  store i32 %v4_b940, i32* %r3.global-to-local, align 4
  %v1_b944 = add i32 %v0_b940, 5
  %v2_b944 = inttoptr i32 %v1_b944 to i8*
  %v3_b944 = load i8, i8* %v2_b944, align 1
  %v4_b944 = zext i8 %v3_b944 to i32
  store i32 %v0_b940, i32* @r1, align 4
  %v4_b94c = mul nuw nsw i32 %v4_b944, 256
  %v5_b94c = or i32 %v4_b94c, %v4_b940
  store i32 %v5_b94c, i32* %r2.global-to-local, align 4
  %v0_b950 = load i32, i32* @sl, align 4
  %v1_b950 = trunc i32 %v0_b950 to i8
  %v3_b950 = add i32 %v0_b940, 6
  %v4_b950 = inttoptr i32 %v3_b950 to i8*
  store i8 %v1_b950, i8* %v4_b950, align 1
  store i32 %v1_b840, i32* %r3.global-to-local, align 4
  %v0_b958 = load i32, i32* @sl, align 4
  %v1_b958 = trunc i32 %v0_b958 to i8
  %v2_b958 = load i32, i32* @r7, align 4
  %v3_b958 = add i32 %v2_b958, 7
  %v4_b958 = inttoptr i32 %v3_b958 to i8*
  store i8 %v1_b958, i8* %v4_b958, align 1
  %v0_b95c = load i32, i32* @r6, align 4
  store i32 %v0_b95c, i32* %r0.global-to-local, align 4
  %v4_b960 = call i32 @function_f1e4(i32 %v0_b95c, i32 %v0_b940, i32 %v5_b94c, i32 %v1_b840)
  %v5_b960 = trunc i32 %v4_b960 to i8
  store i32 %v4_b960, i32* %r0.global-to-local, align 4
  %v3_b964 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b964, i32* %r3.global-to-local, align 4
  %v3_b968 = mul i32 %v3_b964, 32
  store i32 %v3_b968, i32* %r2.global-to-local, align 4
  %v0_b96c = load i32, i32* @r5, align 4
  %v1_b96c = add i32 %v0_b96c, 16
  %v2_b96c = inttoptr i32 %v1_b96c to i32*
  %v3_b96c = load i32, i32* %v2_b96c, align 4
  store i32 %v3_b96c, i32* %r1.global-to-local, align 4
  %v5_b970 = mul i32 %v3_b964, 24
  store i32 %v5_b970, i32* %r2.global-to-local, align 4
  %v4_b97436 = udiv i32 %v4_b960, 256
  %v1_b978 = trunc i32 %v4_b97436 to i8
  %v2_b978 = load i32, i32* @r7, align 4
  %v3_b978 = add i32 %v2_b978, 7
  %v4_b978 = inttoptr i32 %v3_b978 to i8*
  store i8 %v1_b978, i8* %v4_b978, align 1
  %v0_b97c = load i32, i32* %r2.global-to-local, align 4
  %v1_b97c = load i32, i32* @sb, align 4
  %v2_b97c = add i32 %v1_b97c, %v0_b97c
  store i32 %v2_b97c, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b984 = load i32, i32* @r7, align 4
  %v4_b984 = add i32 %v3_b984, 6
  %v5_b984 = inttoptr i32 %v4_b984 to i8*
  store i8 %v5_b960, i8* %v5_b984, align 1
  %v0_b988 = load i32, i32* %r1.global-to-local, align 4
  %v1_b988 = load i32, i32* %lr.global-to-local, align 4
  %v2_b988 = add i32 %v1_b988, 4
  %v3_b988 = inttoptr i32 %v2_b988 to i32*
  store i32 %v0_b988, i32* %v3_b988, align 4
  %v0_b98c = load i32, i32* %r3.global-to-local, align 4
  %v1_b98c = trunc i32 %v0_b98c to i8
  %v2_b98c = load i32, i32* %r2.global-to-local, align 4
  %v3_b98c = load i32, i32* @sb, align 4
  %v4_b98c = add i32 %v3_b98c, %v2_b98c
  %v5_b98c = inttoptr i32 %v4_b98c to i8*
  store i8 %v1_b98c, i8* %v5_b98c, align 1
  %v0_b990 = load i32, i32* @sl, align 4
  %v1_b990 = trunc i32 %v0_b990 to i8
  %v2_b990 = load i32, i32* %lr.global-to-local, align 4
  %v3_b990 = add i32 %v2_b990, 2
  %v4_b990 = inttoptr i32 %v3_b990 to i8*
  store i8 %v1_b990, i8* %v4_b990, align 1
  %v0_b994 = load i32, i32* @sl, align 4
  %v1_b994 = trunc i32 %v0_b994 to i8
  %v2_b994 = load i32, i32* %lr.global-to-local, align 4
  %v3_b994 = add i32 %v2_b994, 1
  %v4_b994 = inttoptr i32 %v3_b994 to i8*
  store i8 %v1_b994, i8* %v4_b994, align 1
  %v0_b998 = load i32, i32* @sl, align 4
  %v1_b998 = trunc i32 %v0_b998 to i8
  %v2_b998 = load i32, i32* %lr.global-to-local, align 4
  %v3_b998 = add i32 %v2_b998, 3
  %v4_b998 = inttoptr i32 %v3_b998 to i8*
  store i8 %v1_b998, i8* %v4_b998, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b9a4 = load i32, i32* @r5, align 4
  store i32 %v0_b9a4, i32* %r1.global-to-local, align 4
  store i32 %v3_b51c, i32* %r0.global-to-local, align 4
  %v0_b9ac = load i32, i32* @fp, align 4
  store i32 %v0_b9ac, i32* %r2.global-to-local, align 4
  %v0_b9b0 = load i32, i32* %lr.global-to-local, align 4
  %v4_b9b0 = inttoptr i32 %v0_b9b0 to %sockaddr*
  %v7_b9b8 = inttoptr i32 %v0_b9a4 to i32*
  %v9_b9b8 = call i32 @sendto(i32 %v3_b51c, i32* %v7_b9b8, i32 %v0_b9ac, i32 16384, %sockaddr* %v4_b9b0, i32 16)
  %v3_b9bc = load i32, i32* %stack_var_-40, align 4
  %v1_b9c0 = add i32 %v3_b9bc, 1
  store i32 %v1_b9c0, i32* %r0.global-to-local, align 4
  store i32 %v1_b3ac, i32* %r3.global-to-local, align 4
  %v9_b9c8 = icmp eq i32 %v1_b9c0, %v1_b3ac
  store i1 %v9_b9c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b9c0, i32* %stack_var_-40, align 4
  %v6_b9d0 = icmp slt i32 %v1_b9c0, %v1_b3ac
  br i1 %v6_b9d0, label %dec_label_pc_b9d4, label %dec_label_pc_bb24

dec_label_pc_b9d4:                                ; preds = %dec_label_pc_b900, %dec_label_pc_b830
  %v1_b9e8 = phi i32 [ %v1_b9c0, %dec_label_pc_b900 ], [ 0, %dec_label_pc_b830 ]
  %v5_b9d8 = mul i32 %v1_b9e8, 24
  %v1_b9dc = load i32, i32* @sb, align 4
  %v2_b9dc = add i32 %v1_b9dc, %v5_b9d8
  store i32 %v2_b9dc, i32* %r3.global-to-local, align 4
  store i32 %v4_b3d8, i32* %r1.global-to-local, align 4
  %v1_b9e4 = add i32 %v2_b9dc, 20
  %v2_b9e4 = inttoptr i32 %v1_b9e4 to i8*
  %v3_b9e4 = load i8, i8* %v2_b9e4, align 1
  %v4_b9e4 = zext i8 %v3_b9e4 to i32
  store i32 %v4_b9e4, i32* %r2.global-to-local, align 4
  %v4_b9e8 = mul i32 %v1_b9e8, 4
  %v5_b9e8 = add i32 %v4_b9e8, %v4_b3d8
  %v6_b9e8 = inttoptr i32 %v5_b9e8 to i32*
  %v7_b9e8 = load i32, i32* %v6_b9e8, align 4
  store i32 %v7_b9e8, i32* @r5, align 4
  %v2_b9ec = icmp ugt i8 %v3_b9e4, 30
  %v7_b9ec = icmp eq i8 %v3_b9e4, 31
  store i1 %v7_b9ec, i1* %cpsr_z.global-to-local, align 1
  %v1_b9f0 = add i32 %v7_b9e8, 24
  store i32 %v1_b9f0, i32* @r8, align 4
  %v1_b9f4 = add i32 %v7_b9e8, 38
  store i32 %v1_b9f4, i32* @r6, align 4
  %v1_b9f8 = add i32 %v7_b9e8, 58
  store i32 %v1_b9f8, i32* @r7, align 4
  %v2_b9fc = xor i1 %v7_b9ec, true
  %v3_b9fc = and i1 %v2_b9ec, %v2_b9fc
  br i1 %v3_b9fc, label %dec_label_pc_b850, label %dec_label_pc_ba00

dec_label_pc_ba00:                                ; preds = %dec_label_pc_b9d4
  %v1_ba00 = add i32 %v2_b9dc, 16
  %v2_ba00 = inttoptr i32 %v1_ba00 to i32*
  %v3_ba00 = load i32, i32* %v2_ba00, align 4
  store i32 %v3_ba00, i32* %r4.global-to-local, align 4
  %v0_ba04 = call i32 @function_105b4()
  store i32 %v0_ba04, i32* %r0.global-to-local, align 4
  %v3_ba08 = load i32, i32* %stack_var_-40, align 4
  %v5_ba10 = mul i32 %v3_ba08, 24
  %v0_ba14 = load i32, i32* %r4.global-to-local, align 4
  %v1_ba18 = load i32, i32* @sb, align 4
  %v2_ba18 = add i32 %v1_ba18, %v5_ba10
  store i32 %v2_ba18, i32* %r1.global-to-local, align 4
  %v1_ba1c = and i32 %v0_ba14, 65280
  store i32 %v1_ba1c, i32* %r3.global-to-local, align 4
  %v1_ba14 = udiv i32 %v0_ba14, 256
  %v3_ba20 = and i32 %v1_ba14, 65280
  store i32 %v3_ba20, i32* %r2.global-to-local, align 4
  %v3_ba24 = mul i32 %v0_ba14, 16777216
  store i32 %v3_ba24, i32* %ip.global-to-local, align 4
  %v1_ba28 = add i32 %v2_ba18, 20
  %v2_ba28 = inttoptr i32 %v1_ba28 to i8*
  %v3_ba28 = load i8, i8* %v2_ba28, align 1
  %v4_ba28 = zext i8 %v3_ba28 to i32
  store i32 %v4_ba28, i32* %lr.global-to-local, align 4
  %v4_ba2c = mul nuw nsw i32 %v1_ba1c, 256
  %v5_ba2c = or i32 %v4_ba2c, %v3_ba24
  store i32 %v5_ba2c, i32* %ip.global-to-local, align 4
  %v2_ba34 = call i32 @llvm.bswap.i32(i32 %v0_ba14)
  %v7_ba38 = lshr i32 %v0_ba04, %v4_ba28
  %v8_ba38 = add i32 %v7_ba38, %v2_ba34
  %v3_ba44 = mul i32 %v8_ba38, 16777216
  %v1_ba48 = and i32 %v8_ba38, 65280
  store i32 %v1_ba48, i32* %r0.global-to-local, align 4
  store i32 %v5_b4f8, i32* %r2.global-to-local, align 4
  %v4_ba54 = mul nuw nsw i32 %v1_ba48, 256
  %v5_ba54 = or i32 %v4_ba54, %v3_ba44
  store i32 %v5_ba54, i32* %r1.global-to-local, align 4
  %v2_ba58 = call i32 @llvm.bswap.i32(i32 %v8_ba38)
  store i32 %v2_ba58, i32* %r3.global-to-local, align 4
  store i1 %v7_b854, i1* %cpsr_z.global-to-local, align 1
  %v1_ba60 = load i32, i32* @r5, align 4
  %v2_ba60 = add i32 %v1_ba60, 16
  %v3_ba60 = inttoptr i32 %v2_ba60 to i32*
  store i32 %v2_ba58, i32* %v3_ba60, align 4
  br i1 %v2_b854, label %dec_label_pc_ba68, label %dec_label_pc_b85c

dec_label_pc_ba68:                                ; preds = %dec_label_pc_ba00, %dec_label_pc_b850
  %v0_ba68 = call i32 @function_105b4()
  store i32 %v0_ba68, i32* %r0.global-to-local, align 4
  store i32 %v3_b574, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba78, i1* %cpsr_z.global-to-local, align 1
  %v1_ba7c = load i32, i32* @r5, align 4
  %v2_ba7c = add i32 %v1_ba7c, 12
  %v3_ba7c = inttoptr i32 %v2_ba7c to i32*
  store i32 %v0_ba68, i32* %v3_ba7c, align 4
  br i1 %v3_ba78, label %dec_label_pc_ba84, label %dec_label_pc_ba68.dec_label_pc_b870_crit_edge

dec_label_pc_ba68.dec_label_pc_b870_crit_edge:    ; preds = %dec_label_pc_ba68
  %v1_b874.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b870

dec_label_pc_ba84:                                ; preds = %dec_label_pc_ba68, %dec_label_pc_b85c
  %v0_ba84 = call i32 @function_105b4()
  %v3_ba8c = urem i32 %v0_ba84, 65536
  store i32 %v3_ba8c, i32* %r0.global-to-local, align 4
  %v1_ba94 = sub nsw i32 999, %v3_ba8c
  store i32 %v1_ba94, i32* %r2.global-to-local, align 4
  %v3_ba98 = sdiv i32 %v1_ba94, 256
  store i32 %v3_ba98, i32* %r1.global-to-local, align 4
  %v3_ba9c35 = udiv i32 %v3_ba8c, 256
  store i32 %v3_ba9c35, i32* %r3.global-to-local, align 4
  %v1_baa0 = trunc i32 %v3_ba9c35 to i8
  %v2_baa0 = load i32, i32* @r5, align 4
  %v3_baa0 = add i32 %v2_baa0, 5
  %v4_baa0 = inttoptr i32 %v3_baa0 to i8*
  store i8 %v1_baa0, i8* %v4_baa0, align 1
  %v0_baa4 = load i32, i32* %r0.global-to-local, align 4
  %v1_baa4 = trunc i32 %v0_baa4 to i8
  %v2_baa4 = load i32, i32* @r5, align 4
  %v3_baa4 = add i32 %v2_baa4, 4
  %v4_baa4 = inttoptr i32 %v3_baa4 to i8*
  store i8 %v1_baa4, i8* %v4_baa4, align 1
  %v0_baa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_baa8 = trunc i32 %v0_baa8 to i8
  %v2_baa8 = load i32, i32* @r6, align 4
  %v3_baa8 = add i32 %v2_baa8, 5
  %v4_baa8 = inttoptr i32 %v3_baa8 to i8*
  store i8 %v1_baa8, i8* %v4_baa8, align 1
  store i32 %v3_b578, i32* %r1.global-to-local, align 4
  %v1_bab0 = load i32, i32* @r4, align 4
  %v9_bab0 = icmp eq i32 %v3_b578, %v1_bab0
  store i1 %v9_bab0, i1* %cpsr_z.global-to-local, align 1
  %v0_bab4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bab4 = trunc i32 %v0_bab4 to i8
  %v2_bab4 = load i32, i32* @r6, align 4
  %v3_bab4 = add i32 %v2_bab4, 4
  %v4_bab4 = inttoptr i32 %v3_bab4 to i8*
  store i8 %v1_bab4, i8* %v4_bab4, align 1
  %v0_bab8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bab8, label %dec_label_pc_babc, label %dec_label_pc_ba84.dec_label_pc_b87c_crit_edge

dec_label_pc_ba84.dec_label_pc_b87c_crit_edge:    ; preds = %dec_label_pc_ba84
  %v1_b880.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b87c

dec_label_pc_babc:                                ; preds = %dec_label_pc_ba84, %dec_label_pc_b870
  %v0_babc = call i32 @function_105b4()
  %v1_babc = trunc i32 %v0_babc to i8
  store i32 %v0_babc, i32* %r0.global-to-local, align 4
  store i32 %v3_b57c, i32* %r2.global-to-local, align 4
  %v4_bac4 = sdiv i32 %v0_babc, 256
  store i32 %v4_bac4, i32* %r3.global-to-local, align 4
  %v1_bac8 = load i32, i32* @r4, align 4
  %v9_bac8 = icmp eq i32 %v3_b57c, %v1_bac8
  store i1 %v9_bac8, i1* %cpsr_z.global-to-local, align 1
  %v3_bacc = load i32, i32* @r5, align 4
  %v4_bacc = add i32 %v3_bacc, 58
  %v5_bacc = inttoptr i32 %v4_bacc to i8*
  store i8 %v1_babc, i8* %v5_bacc, align 1
  %v0_bad0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bad0 = trunc i32 %v0_bad0 to i8
  %v2_bad0 = load i32, i32* @r7, align 4
  %v3_bad0 = add i32 %v2_bad0, 1
  %v4_bad0 = inttoptr i32 %v3_bad0 to i8*
  store i8 %v1_bad0, i8* %v4_bad0, align 1
  %v0_bad4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bad4, label %dec_label_pc_bad8, label %dec_label_pc_b888

dec_label_pc_bad8:                                ; preds = %dec_label_pc_babc, %dec_label_pc_b87c
  %v0_bad8 = call i32 @function_105b4()
  %v1_bad8 = trunc i32 %v0_bad8 to i8
  store i32 %v0_bad8, i32* %r0.global-to-local, align 4
  %v4_badc37 = udiv i32 %v0_bad8, 256
  %v1_bae0 = trunc i32 %v4_badc37 to i8
  %v2_bae0 = load i32, i32* @r7, align 4
  %v3_bae0 = add i32 %v2_bae0, 3
  %v4_bae0 = inttoptr i32 %v3_bae0 to i8*
  store i8 %v1_bae0, i8* %v4_bae0, align 1
  store i32 %v1_b570, i32* %r3.global-to-local, align 4
  store i1 %v2_bae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bae8, label %bb102, label %bb101

bb101:                                            ; preds = %dec_label_pc_bad8
  %v1_baec = load i32, i32* @r5, align 4
  %v2_baec = add i32 %v1_baec, 16
  %v3_baec = inttoptr i32 %v2_baec to i32*
  %v4_baec = load i32, i32* %v3_baec, align 4
  store i32 %v4_baec, i32* %r3.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_bad8, %bb101
  %v3_baf0 = load i32, i32* @r7, align 4
  %v4_baf0 = add i32 %v3_baf0, 2
  %v5_baf0 = inttoptr i32 %v4_baf0 to i8*
  store i8 %v1_bad8, i8* %v5_baf0, align 1
  %v0_baf4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_baf4, label %dec_label_pc_bafc, label %bb103

bb103:                                            ; preds = %bb102
  %v1_baf4 = load i32, i32* %r3.global-to-local, align 4
  %v2_baf4 = load i32, i32* @r6, align 4
  %v3_baf4 = add i32 %v2_baf4, 16
  %v4_baf4 = inttoptr i32 %v3_baf4 to i32*
  store i32 %v1_baf4, i32* %v4_baf4, align 4
  br label %dec_label_pc_b89c

dec_label_pc_bafc:                                ; preds = %dec_label_pc_b888, %bb102
  %v0_bafc = call i32 @function_105b4()
  store i32 %v0_bafc, i32* %r0.global-to-local, align 4
  %v1_bb00 = load i32, i32* @r6, align 4
  %v2_bb00 = add i32 %v1_bb00, 16
  %v3_bb00 = inttoptr i32 %v2_bb00 to i32*
  store i32 %v0_bafc, i32* %v3_bb00, align 4
  br label %dec_label_pc_b89c

dec_label_pc_bb08:                                ; preds = %dec_label_pc_b89c
  %v0_bb08 = load i32, i32* @r7, align 4
  %v1_bb08 = add i32 %v0_bb08, 8
  store i32 %v1_bb08, i32* @r4, align 4
  store i32 %v1_bb08, i32* %r0.global-to-local, align 4
  store i32 %v5_b4a4, i32* %r1.global-to-local, align 4
  %v2_bb14 = call i32 @function_10668(i32 %v1_bb08, i32 %v5_b4a4)
  store i32 %v2_bb14, i32* %r0.global-to-local, align 4
  store i32 %v5_b4a4, i32* %r2.global-to-local, align 4
  %v0_bb1c = load i32, i32* @sl, align 4
  %v1_bb1c = trunc i32 %v0_bb1c to i8
  %v2_bb1c = load i32, i32* @r4, align 4
  %v4_bb1c = add i32 %v2_bb1c, %v5_b4a4
  %v5_bb1c = inttoptr i32 %v4_bb1c to i8*
  store i8 %v1_bb1c, i8* %v5_bb1c, align 1
  br label %dec_label_pc_b900

dec_label_pc_bb24:                                ; preds = %dec_label_pc_b900, %dec_label_pc_b81c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bb28 = call i32 @time(i32* null)
  store i32 %v2_bb28, i32* %r0.global-to-local, align 4
  store i32 %v2_b508, i32* %r1.global-to-local, align 4
  %v9_bb30 = icmp eq i32 %v2_b508, %v2_bb28
  store i1 %v9_bb30, i1* %cpsr_z.global-to-local, align 1
  %v6_bb34 = icmp slt i32 %v2_b508, %v2_bb28
  br i1 %v6_bb34, label %dec_label_pc_bb38, label %dec_label_pc_b81c

dec_label_pc_bb38:                                ; preds = %dec_label_pc_bb24, %dec_label_pc_b3a8, %dec_label_pc_bb40
  %v29_bb3c = phi i32 [ %v3_b51c, %dec_label_pc_b3a8 ], [ %v1_bb44, %dec_label_pc_bb40 ], [ %v2_bb28, %dec_label_pc_bb24 ]
  store i32 %v3_b3a8, i32* %r4.global-to-local, align 4
  store i32 %v6_b3a8, i32* %r5.global-to-local, align 4
  store i32 %v9_b3a8, i32* %r6.global-to-local, align 4
  store i32 %v12_b3a8, i32* %r7.global-to-local, align 4
  store i32 %v15_b3a8, i32* %r8.global-to-local, align 4
  store i32 %v21_b3a8, i32* %sl.global-to-local, align 4
  store i32 %v24_b3a8, i32* %fp.global-to-local, align 4
  ret i32 %v29_bb3c

dec_label_pc_bb40:                                ; preds = %dec_label_pc_b52c
  store i32 %v3_b51c, i32* %r0.global-to-local, align 4
  %v1_bb44 = call i32 @close(i32 %v3_b51c)
  store i32 %v1_bb44, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb38

; uselistorder directives
  uselistorder i32 %v1_bb44, { 1, 0 }
  uselistorder i32 %v0_bad8, { 0, 2, 1 }
  uselistorder i32 %v0_babc, { 0, 2, 1 }
  uselistorder i32 %v3_ba8c, { 0, 2, 1 }
  uselistorder i32 %v2_ba58, { 1, 0 }
  uselistorder i32 %v8_ba38, { 1, 2, 0 }
  uselistorder i32 %v3_ba24, { 1, 0 }
  uselistorder i32 %v0_ba14, { 2, 0, 1, 3 }
  uselistorder i32 %v7_b9e8, { 2, 1, 0, 3 }
  uselistorder i32 %v1_b9c0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b964, { 1, 0, 2 }
  uselistorder i32 %v4_b960, { 0, 2, 1 }
  uselistorder i32 %v0_b940, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b930, { 0, 2, 1 }
  uselistorder i32 %v4_b914, { 1, 0 }
  uselistorder i1 %v2_bae8, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ba78, { 1, 0, 2, 3 }
  uselistorder i1 %v7_b854, { 2, 1, 0 }
  uselistorder i32 %v1_b840, { 1, 0, 2 }
  uselistorder i32 %v0_b7bc, { 1, 0, 2 }
  uselistorder i32 %v3_b64c, { 1, 0 }
  uselistorder i32 %tmp87, { 1, 0, 2 }
  uselistorder i32 %v1_b5c8, { 0, 2, 1 }
  uselistorder i32 %v1_b5c0, { 2, 1, 0 }
  uselistorder i32 %v1_b5bc, { 1, 0 }
  uselistorder i32 %v1_b5b8, { 1, 0 }
  uselistorder i32 %v1_b5ac, { 1, 0 }
  uselistorder i32 %v3_b5a4, { 2, 0, 1 }
  uselistorder i32 %v3_b574, { 0, 1, 3, 2 }
  uselistorder i32 %v1_b570, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_b56c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b564, { 0, 3, 2, 1 }
  uselistorder i32 %v0_b560, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b54c, { 1, 0 }
  uselistorder i1 %v7_b520, { 1, 0 }
  uselistorder i32 %v3_b51c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_b508, { 2, 1, 0 }
  uselistorder i32 %v5_b4f8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_b4c4, { 1, 2, 0 }
  uselistorder i32 %v5_b4a4, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_b458, { 1, 0 }
  uselistorder i8 %v5_b448, { 1, 0 }
  uselistorder i32 %v5_b42c, { 1, 0 }
  uselistorder i32 %v6_b3f0, { 1, 0 }
  uselistorder i32 %v4_b3d8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b3ac, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 45, 46, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 19, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 15, 14, 16, 18, 17, 19, 21, 20, 22, 23, 24, 25, 27, 26, 31, 28, 29, 30, 34, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_bb38, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bafc, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %dec_label_pc_b900, { 1, 0 }
  uselistorder label %dec_label_pc_b89c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b81c, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_bb50(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_bb50:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_bb50 = load i32, i32* @r4, align 4
  %v6_bb50 = load i32, i32* @r5, align 4
  %v9_bb50 = load i32, i32* @r6, align 4
  %v12_bb50 = load i32, i32* @r7, align 4
  %v15_bb50 = load i32, i32* @r8, align 4
  %v21_bb50 = load i32, i32* @sl, align 4
  %v24_bb50 = load i32, i32* @fp, align 4
  %v1_bb54 = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_bb54, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bb70 = urem i32 %arg4, 256
  store i32 %v1_bb70, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_bb80 = call i32* @calloc(i32 %v1_bb54, i32 4)
  %v4_bb80 = ptrtoint i32* %v2_bb80 to i32
  %v0_bb84 = load i32, i32* @r5, align 4
  store i32 %v0_bb84, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_bb90 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bb90, i32* %r3.global-to-local, align 4
  %v0_bb94 = load i32, i32* @r4, align 4
  store i32 %v0_bb94, i32* %r0.global-to-local, align 4
  %v5_bb98 = inttoptr i32 %v0_bb84 to i32*
  %v6_bb98 = call i32 @function_8f6c(i32 %v0_bb94, i32* %v5_bb98, i32 2, i32 %v0_bb90)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bbb0 = load i32, i32* @r5, align 4
  store i32 %v0_bbb0, i32* %r1.global-to-local, align 4
  %v0_bbb4 = load i32, i32* @r4, align 4
  store i32 %v0_bbb4, i32* %r0.global-to-local, align 4
  %v5_bbb8 = trunc i32 %v6_bb98 to i8
  %v6_bbbc = inttoptr i32 %v0_bbb0 to i32*
  %v7_bbbc = call i32 @function_8f6c(i32 %v0_bbb4, i32* %v6_bbbc, i32 3, i32 65535)
  %v0_bbc0 = load i32, i32* @r5, align 4
  store i32 %v0_bbc0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bbbc, i32* @r7, align 4
  %v0_bbd0 = load i32, i32* @r4, align 4
  store i32 %v0_bbd0, i32* %r0.global-to-local, align 4
  %v4_bbd4 = inttoptr i32 %v0_bbc0 to i32*
  %v5_bbd4 = call i32 @function_8f6c(i32 %v0_bbd0, i32* %v4_bbd4, i32 4, i32 64)
  %v0_bbe0 = load i32, i32* @r5, align 4
  store i32 %v0_bbe0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bbec = load i32, i32* @r4, align 4
  store i32 %v0_bbec, i32* %r0.global-to-local, align 4
  %v5_bbf0 = trunc i32 %v5_bbd4 to i8
  %v6_bbf4 = inttoptr i32 %v0_bbe0 to i32*
  %v7_bbf4 = call i32 @function_8f6c(i32 %v0_bbec, i32* %v6_bbf4, i32 5, i32 1)
  %v1_bc00 = urem i32 %v7_bbf4, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bc0c = load i32, i32* @r5, align 4
  store i32 %v0_bc0c, i32* %r1.global-to-local, align 4
  %v0_bc10 = load i32, i32* @r4, align 4
  store i32 %v0_bc10, i32* %r0.global-to-local, align 4
  %v5_bc18 = inttoptr i32 %v0_bc0c to i32*
  %v6_bc18 = call i32 @function_8f6c(i32 %v0_bc10, i32* %v5_bc18, i32 6, i32 65535)
  %v0_bc24 = load i32, i32* @r5, align 4
  store i32 %v0_bc24, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_bc30 = load i32, i32* @r4, align 4
  store i32 %v0_bc30, i32* %r0.global-to-local, align 4
  %v5_bc34 = inttoptr i32 %v0_bc24 to i32*
  %v6_bc34 = call i32 @function_8f6c(i32 %v0_bc30, i32* %v5_bc34, i32 7, i32 65535)
  %v0_bc38 = load i32, i32* @r5, align 4
  store i32 %v0_bc38, i32* %r1.global-to-local, align 4
  %v0_bc3c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bc3c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_bc34, i32* @sl, align 4
  %v0_bc48 = load i32, i32* @r4, align 4
  store i32 %v0_bc48, i32* %r0.global-to-local, align 4
  %v4_bc4c = inttoptr i32 %v0_bc38 to i32*
  %v5_bc4c = call i32 @function_8f6c(i32 %v0_bc48, i32* %v4_bc4c, i32 %v0_bc3c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bc5c = load i32, i32* @r5, align 4
  store i32 %v0_bc5c, i32* %r1.global-to-local, align 4
  %v0_bc60 = load i32, i32* @r4, align 4
  store i32 %v0_bc60, i32* %r0.global-to-local, align 4
  %v4_bc64 = inttoptr i32 %v0_bc5c to i32*
  %v5_bc64 = call i32 @function_8f6c(i32 %v0_bc60, i32* %v4_bc64, i32 1, i32 1)
  %v1_bc6c = urem i32 %v5_bc64, 256
  %v0_bc70 = load i32, i32* @r5, align 4
  store i32 %v0_bc70, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_bc78 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bc78, i32* %r3.global-to-local, align 4
  %v0_bc7c = load i32, i32* @r4, align 4
  store i32 %v0_bc7c, i32* %r0.global-to-local, align 4
  %v5_bc84 = inttoptr i32 %v0_bc70 to i32*
  %v6_bc84 = call i32 @function_8f6c(i32 %v0_bc7c, i32* %v5_bc84, i32 18, i32 %v0_bc78)
  %v0_bc8c = load i32, i32* @r5, align 4
  store i32 %v0_bc8c, i32* %r1.global-to-local, align 4
  %v2_bc90 = load i32, i32* @global_var_1c21c.133, align 4
  store i32 %v2_bc90, i32* %r3.global-to-local, align 4
  store i32 %v6_bc84, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_bc9c = load i32, i32* @r4, align 4
  store i32 %v0_bc9c, i32* %r0.global-to-local, align 4
  %v4_bca0 = inttoptr i32 %v0_bc8c to i32*
  %v5_bca0 = call i32 @function_8f6c(i32 %v0_bc9c, i32* %v4_bca0, i32 24, i32 %v2_bc90)
  %v0_bca8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bca8, i32* %r0.global-to-local, align 4
  %v1_bcac = inttoptr i32 %v0_bca8 to i32*
  %v2_bcac = call i32 @time(i32* %v1_bcac)
  %v1_bcb0 = load i32, i32* @r6, align 4
  %v2_bcb0 = add i32 %v1_bcb0, %v2_bcac
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_bcc4 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_bcc4, i32* %r0.global-to-local, align 4
  %v7_bcc8 = icmp eq i32 %v3_bcc4, -1
  store i1 %v7_bcc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bcc8, label %dec_label_pc_c270, label %dec_label_pc_bcd4

dec_label_pc_bcd4:                                ; preds = %dec_label_pc_bb50
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bcdc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bcdc, i32* %r3.global-to-local, align 4
  %v0_bce4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bce4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_bcf0 = call i32 @setsockopt(i32 %v3_bcc4, i32 %v0_bce4, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_bcf0, i32* %r0.global-to-local, align 4
  %v7_bcf4 = icmp eq i32 %v7_bcf0, -1
  store i1 %v7_bcf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bcf4, label %dec_label_pc_c278, label %dec_label_pc_bcfc

dec_label_pc_bcfc:                                ; preds = %dec_label_pc_bcd4
  %v0_bd08 = load i32, i32* @sl, align 4
  %v3_bd08 = mul i32 %v0_bd08, 65536
  store i32 %v3_bd08, i32* %sl.global-to-local, align 4
  %v0_bd0c = load i32, i32* @r7, align 4
  %v3_bd0c = mul i32 %v0_bd0c, 65536
  store i32 %v3_bd0c, i32* %r7.global-to-local, align 4
  %v2_bd14 = icmp eq i32 %v1_bb54, 0
  store i1 %v2_bd14, i1* %cpsr_z.global-to-local, align 1
  %v0_bd18 = load i32, i32* @r8, align 4
  %v1_bd18 = urem i32 %v0_bd18, 256
  store i32 %v1_bd18, i32* %r8.global-to-local, align 4
  %v3_bd1c = urem i32 %v0_bd0c, 65536
  store i32 %v3_bd1c, i32* %r3.global-to-local, align 4
  %v3_bd20 = urem i32 %v6_bc18, 65536
  store i32 %v3_bd20, i32* %r1.global-to-local, align 4
  %v3_bd24 = urem i32 %v0_bd08, 65536
  store i32 %v3_bd24, i32* %r2.global-to-local, align 4
  %v0_bd30 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bd30, i32* %stack_var_-40, align 4
  br i1 %v2_bd14, label %dec_label_pc_bfb0.preheader, label %dec_label_pc_bd44

dec_label_pc_bd44:                                ; preds = %dec_label_pc_bcfc
  %v3_bd4c = mul i32 %v5_bc4c, 65536
  %v1_bd54 = urem i32 %v6_bc18, 256
  %v1_bd5c = add i32 %v3_bd4c, 524288
  %v1_bd60 = add i32 %v3_bd4c, 3407872
  %v1_bd64 = urem i32 %v0_bd08, 256
  %v1_bd68 = add i32 %v3_bd4c, 1835008
  %v0_bd0c.not = or i32 %v0_bd0c, -65536
  %v1_bd70 = xor i32 %v0_bd0c.not, 65535
  %v3_bd74 = udiv i32 %v1_bd68, 256
  %tmp78 = udiv i32 %v0_bd0c, 256
  %v1_bd88 = and i32 %v3_bd74, 65280
  store i32 %v1_bd88, i32* %r0.global-to-local, align 4
  %v3_bdac = mul nuw nsw i32 %v1_bd54, 256
  %tmp79 = udiv i32 %v6_bc18, 256
  %v4_bdb4 = urem i32 %tmp79, 256
  %v5_bdb4 = or i32 %v4_bdb4, %v3_bdac
  store i32 %v5_bdb4, i32* %lr.global-to-local, align 4
  %tmp80 = mul nsw i32 %v1_bd70, 256
  %v3_bdbc = mul nuw nsw i32 %v1_bd64, 256
  %sext24 = mul i32 %tmp78, 16777216
  %v4_bdc4 = sdiv i32 %sext24, 16777216
  %v4_bd8c = sdiv i32 %v1_bd60, 16777216
  %tmp81 = udiv i32 %v0_bd08, 256
  %v4_bdcc = urem i32 %tmp81, 256
  %v5_bdcc = or i32 %v4_bdcc, %v3_bdbc
  store i32 %v5_bdcc, i32* %r7.global-to-local, align 4
  %v1_bdd0 = and i32 %tmp80, 65280
  %v4_bdd4 = sdiv i32 %v1_bd68, 16777216
  %v3_bdd8 = udiv i32 %v1_bd5c, 256
  %tmp82 = udiv i32 %v1_bd70, 256
  %v4_bddc = urem i32 %tmp82, 256
  %v5_bddc = or i32 %v4_bddc, %v1_bdd0
  store i32 %v5_bddc, i32* %r6.global-to-local, align 4
  %v3_bde0 = ashr i32 %v1_bd60, 31
  %v3_bde4 = ashr i32 %sext24, 31
  %v1_bde8 = and i32 %v3_bdd8, 65280
  store i32 %v1_bde8, i32* %r5.global-to-local, align 4
  %v3_bdf4 = ashr i32 %v1_bd68, 31
  store i32 %v3_bdf4, i32* %r2.global-to-local, align 4
  %v3_bdf833 = udiv i32 %v1_bdd0, 256
  store i32 %v3_bdf833, i32* %r3.global-to-local, align 4
  store i32 %v1_bd54, i32* %r1.global-to-local, align 4
  %v4_be00 = udiv i32 %v1_bd5c, 16777216
  %v5_be00 = or i32 %v4_be00, %v1_bde8
  store i32 %v5_be00, i32* %r8.global-to-local, align 4
  %v5_be04 = trunc i32 %tmp82 to i8
  store i32 %v0_bd30, i32* %r4.global-to-local, align 4
  %v3_be1c34 = udiv i32 %v1_bde8, 256
  store i32 %v3_be1c34, i32* %sl.global-to-local, align 4
  store i32 %v1_bd64, i32* %fp.global-to-local, align 4
  %v4_be70 = sext i8 %v5_bbf0 to i32
  %sext16 = mul i32 %v1_bd70, 16777216
  %v4_bf2c = sdiv i32 %sext16, 16777216
  %v2_bf5c = icmp eq i32 %v1_bd18, 0
  %sext17 = mul i32 %v6_bc18, 16777216
  %v4_bf70 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %tmp79, 16777216
  %v4_bf8c = sdiv i32 %sext18, 16777216
  %v1_be88 = trunc i32 %v4_bdc4 to i8
  br label %dec_label_pc_be24

dec_label_pc_be24:                                ; preds = %bb93, %dec_label_pc_bd44
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_be30 = call i32* @calloc(i32 1510, i32 4)
  %v4_be30 = ptrtoint i32* %v2_be30 to i32
  store i32 %v4_be30, i32* %r0.global-to-local, align 4
  store i32 %v4_bb80, i32* %r2.global-to-local, align 4
  %v3_be38 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_be38, i32* %r3.global-to-local, align 4
  %v2_be3c = load i32, i32* %r4.global-to-local, align 4
  %v5_be3c = mul i32 %v2_be3c, 4
  %v6_be3c = add i32 %v5_be3c, %v4_bb80
  %v7_be3c = inttoptr i32 %v6_be3c to i32*
  store i32 %v4_be30, i32* %v7_be3c, align 4
  %v0_be40 = load i32, i32* %r2.global-to-local, align 4
  %v1_be40 = load i32, i32* %r3.global-to-local, align 4
  %v4_be40 = mul i32 %v1_be40, 4
  %v5_be40 = add i32 %v4_be40, %v0_be40
  %v6_be40 = inttoptr i32 %v5_be40 to i32*
  %v7_be40 = load i32, i32* %v6_be40, align 4
  store i32 %v7_be40, i32* %r4.global-to-local, align 4
  %v1_be44 = inttoptr i32 %v7_be40 to i8*
  %v2_be44 = load i8, i8* %v1_be44, align 1
  %tmp = urem i8 %v2_be44, 16
  %v1_be48 = zext i8 %tmp to i32
  %v1_be4c = or i32 %v1_be48, 64
  store i32 %v1_be4c, i32* %r2.global-to-local, align 4
  %v1_be50 = trunc i32 %v1_be4c to i8
  store i8 %v1_be50, i8* %v1_be44, align 1
  %v0_be54 = load i32, i32* %r4.global-to-local, align 4
  %v1_be54 = inttoptr i32 %v0_be54 to i8*
  %v2_be54 = load i8, i8* %v1_be54, align 1
  %v1_be58 = and i8 %v2_be54, -16
  %v1_be5c = or i8 %v1_be58, 5
  store i32 %v1_bc00, i32* %r1.global-to-local, align 4
  store i8 %v1_be5c, i8* %v1_be54, align 1
  %v2_be6c = load i32, i32* %r4.global-to-local, align 4
  %v3_be6c = add i32 %v2_be6c, 1
  %v4_be6c = inttoptr i32 %v3_be6c to i8*
  store i8 %v5_bbb8, i8* %v4_be6c, align 1
  %v2_be74 = load i32, i32* %r4.global-to-local, align 4
  %v3_be74 = add i32 %v2_be74, 8
  %v4_be74 = inttoptr i32 %v3_be74 to i8*
  store i8 %v5_bbf0, i8* %v4_be74, align 1
  store i32 %v4_bdc4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_be80 = load i32, i32* %r1.global-to-local, align 4
  %v9_be80 = icmp eq i32 %v0_be80, 0
  store i1 %v9_be80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_bde0, i32* %r2.global-to-local, align 4
  %v2_be88 = load i32, i32* %r4.global-to-local, align 4
  %v3_be88 = add i32 %v2_be88, 4
  %v4_be88 = inttoptr i32 %v3_be88 to i8*
  store i8 %v1_be88, i8* %v4_be88, align 1
  store i32 %v4_bd8c, i32* %r1.global-to-local, align 4
  %v0_be90 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be90, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_be24
  %v1_be90 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_be90, i32* %r3.global-to-local, align 4
  %v2_be94 = trunc i32 %v1_be90 to i8
  %v3_be94 = load i32, i32* %r4.global-to-local, align 4
  %v4_be94 = add i32 %v3_be94, 7
  %v5_be94 = inttoptr i32 %v4_be94 to i8*
  store i8 %v2_be94, i8* %v5_be94, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_be24, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_be9c = load i32, i32* %r2.global-to-local, align 4
  %v1_be9c = trunc i32 %v0_be9c to i8
  %v2_be9c = load i32, i32* %r4.global-to-local, align 4
  %v3_be9c = add i32 %v2_be9c, 3
  %v4_be9c = inttoptr i32 %v3_be9c to i8*
  store i8 %v1_be9c, i8* %v4_be9c, align 1
  %v0_bea0 = load i32, i32* %r1.global-to-local, align 4
  %v1_bea0 = trunc i32 %v0_bea0 to i8
  %v2_bea0 = load i32, i32* %r4.global-to-local, align 4
  %v3_bea0 = add i32 %v2_bea0, 2
  %v4_bea0 = inttoptr i32 %v3_bea0 to i8*
  store i8 %v1_bea0, i8* %v4_bea0, align 1
  %v0_bea4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bea4, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  store i32 %v3_bde4, i32* %r1.global-to-local, align 4
  %v0_beac = load i32, i32* %r3.global-to-local, align 4
  %v1_beac = trunc i32 %v0_beac to i8
  %v2_beac = load i32, i32* %r4.global-to-local, align 4
  %v3_beac = add i32 %v2_beac, 9
  %v4_beac = inttoptr i32 %v3_beac to i8*
  store i8 %v1_beac, i8* %v4_beac, align 1
  %v0_beb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_beb0, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_beb0 = load i32, i32* %r2.global-to-local, align 4
  %v2_beb0 = trunc i32 %v1_beb0 to i8
  %v3_beb0 = load i32, i32* %r4.global-to-local, align 4
  %v4_beb0 = add i32 %v3_beb0, 6
  %v5_beb0 = inttoptr i32 %v4_beb0 to i8*
  store i8 %v2_beb0, i8* %v5_beb0, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_beb4 = load i32, i32* %stack_var_-40, align 4
  %v5_bebc = mul i32 %v3_beb4, 24
  store i32 %v5_bebc, i32* %r3.global-to-local, align 4
  store i32 %v5_bca0, i32* %r2.global-to-local, align 4
  %v1_bec4 = load i32, i32* %r4.global-to-local, align 4
  %v2_bec4 = add i32 %v1_bec4, 12
  %v3_bec4 = inttoptr i32 %v2_bec4 to i32*
  store i32 %v5_bca0, i32* %v3_bec4, align 4
  %v0_bec8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bec8 = load i32, i32* @sb, align 4
  %v2_bec8 = add i32 %v1_bec8, %v0_bec8
  store i32 %v2_bec8, i32* %r3.global-to-local, align 4
  %v0_becc = load i32, i32* %r1.global-to-local, align 4
  %v1_becc = trunc i32 %v0_becc to i8
  %v2_becc = load i32, i32* %r4.global-to-local, align 4
  %v3_becc = add i32 %v2_becc, 5
  %v4_becc = inttoptr i32 %v3_becc to i8*
  store i8 %v1_becc, i8* %v4_becc, align 1
  %v0_bed0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bed0 = add i32 %v0_bed0, 16
  %v2_bed0 = inttoptr i32 %v1_bed0 to i32*
  %v3_bed0 = load i32, i32* %v2_bed0, align 4
  store i32 %v3_bed0, i32* %r2.global-to-local, align 4
  %v0_bed4 = load i32, i32* %r4.global-to-local, align 4
  %v1_bed4 = add i32 %v0_bed4, 20
  store i32 %v1_bed4, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_bedc = load i32, i32* %r0.global-to-local, align 4
  %v1_bedc = trunc i32 %v0_bedc to i8
  %v3_bedc = add i32 %v0_bed4, 23
  %v4_bedc = inttoptr i32 %v3_bedc to i8*
  store i8 %v1_bedc, i8* %v4_bedc, align 1
  %v0_bee0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bee0 = trunc i32 %v0_bee0 to i8
  %v2_bee0 = load i32, i32* %r1.global-to-local, align 4
  %v3_bee0 = add i32 %v2_bee0, 2
  %v4_bee0 = inttoptr i32 %v3_bee0 to i8*
  store i8 %v1_bee0, i8* %v4_bee0, align 1
  %v0_bee4 = load i32, i32* %r4.global-to-local, align 4
  %v1_bee4 = add i32 %v0_bee4, 24
  %v2_bee4 = inttoptr i32 %v1_bee4 to i8*
  %v3_bee4 = load i8, i8* %v2_bee4, align 1
  %tmp99 = urem i8 %v3_bee4, 16
  %v1_bee8 = zext i8 %tmp99 to i32
  %v1_beec = or i32 %v1_bee8, 64
  store i32 %v1_beec, i32* %r3.global-to-local, align 4
  %v1_bef0 = trunc i32 %v1_beec to i8
  store i8 %v1_bef0, i8* %v2_bee4, align 1
  %v0_bef4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bef4 = load i32, i32* %r4.global-to-local, align 4
  %v2_bef4 = add i32 %v1_bef4, 16
  %v3_bef4 = inttoptr i32 %v2_bef4 to i32*
  store i32 %v0_bef4, i32* %v3_bef4, align 4
  %v0_bef8 = load i32, i32* %r4.global-to-local, align 4
  %v1_bef8 = add i32 %v0_bef8, 24
  %v2_bef8 = inttoptr i32 %v1_bef8 to i8*
  %v3_bef8 = load i8, i8* %v2_bef8, align 1
  %v1_befc = and i8 %v3_bef8, -16
  %v1_bf00 = or i8 %v1_befc, 5
  store i8 %v1_bf00, i8* %v2_bef8, align 1
  %v0_bf0c = load i32, i32* %r4.global-to-local, align 4
  %v1_bf0c = add i32 %v0_bf0c, 24
  store i32 %v1_bf0c, i32* %r5.global-to-local, align 4
  %v3_bf10 = add i32 %v0_bf0c, 25
  %v4_bf10 = inttoptr i32 %v3_bf10 to i8*
  store i8 %v5_bbb8, i8* %v4_bf10, align 1
  store i32 %v4_bdd4, i32* %r1.global-to-local, align 4
  store i32 %tmp82, i32* %r3.global-to-local, align 4
  store i32 %v3_bdf4, i32* %r2.global-to-local, align 4
  %v2_bf20 = load i32, i32* %r5.global-to-local, align 4
  %v3_bf20 = add i32 %v2_bf20, 4
  %v4_bf20 = inttoptr i32 %v3_bf20 to i8*
  store i8 %v5_be04, i8* %v4_bf20, align 1
  %v0_bf24 = load i32, i32* %r1.global-to-local, align 4
  %v1_bf24 = trunc i32 %v0_bf24 to i8
  %v2_bf24 = load i32, i32* %r5.global-to-local, align 4
  %v3_bf24 = add i32 %v2_bf24, 2
  %v4_bf24 = inttoptr i32 %v3_bf24 to i8*
  store i8 %v1_bf24, i8* %v4_bf24, align 1
  %v0_bf28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf28, label %bb88, label %bb87

bb87:                                             ; preds = %bb86
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %bb86, %bb87
  store i32 %v4_bf2c, i32* %r1.global-to-local, align 4
  %v0_bf30 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf30 = trunc i32 %v0_bf30 to i8
  %v2_bf30 = load i32, i32* %r5.global-to-local, align 4
  %v3_bf30 = add i32 %v2_bf30, 3
  %v4_bf30 = inttoptr i32 %v3_bf30 to i8*
  store i8 %v1_bf30, i8* %v4_bf30, align 1
  store i32 %v4_be70, i32* %r2.global-to-local, align 4
  %v0_bf38 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf38, label %bb90, label %bb89

bb89:                                             ; preds = %bb88
  %v1_bf38 = load i32, i32* %r3.global-to-local, align 4
  %v2_bf38 = trunc i32 %v1_bf38 to i8
  %v3_bf38 = load i32, i32* %r5.global-to-local, align 4
  %v4_bf38 = add i32 %v3_bf38, 6
  %v5_bf38 = inttoptr i32 %v4_bf38 to i8*
  store i8 %v2_bf38, i8* %v5_bf38, align 1
  br label %bb90

bb90:                                             ; preds = %bb88, %bb89
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_bf40 = load i32, i32* %r1.global-to-local, align 4
  %v1_bf40 = trunc i32 %v0_bf40 to i8
  %v2_bf40 = load i32, i32* %r5.global-to-local, align 4
  %v3_bf40 = add i32 %v2_bf40, 5
  %v4_bf40 = inttoptr i32 %v3_bf40 to i8*
  store i8 %v1_bf40, i8* %v4_bf40, align 1
  %v0_bf44 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf44 = trunc i32 %v0_bf44 to i8
  %v2_bf44 = load i32, i32* %r5.global-to-local, align 4
  %v3_bf44 = add i32 %v2_bf44, 8
  %v4_bf44 = inttoptr i32 %v3_bf44 to i8*
  store i8 %v1_bf44, i8* %v4_bf44, align 1
  %v0_bf48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf48, label %bb92, label %bb91

bb91:                                             ; preds = %bb90
  %v1_bf48 = load i32, i32* %r0.global-to-local, align 4
  %v2_bf48 = trunc i32 %v1_bf48 to i8
  %v3_bf48 = load i32, i32* %r5.global-to-local, align 4
  %v4_bf48 = add i32 %v3_bf48, 7
  %v5_bf48 = inttoptr i32 %v4_bf48 to i8*
  store i8 %v2_bf48, i8* %v5_bf48, align 1
  br label %bb92

bb92:                                             ; preds = %bb90, %bb91
  %v0_bf4c = load i32, i32* %r3.global-to-local, align 4
  %v1_bf4c = trunc i32 %v0_bf4c to i8
  %v2_bf4c = load i32, i32* %r5.global-to-local, align 4
  %v3_bf4c = add i32 %v2_bf4c, 9
  %v4_bf4c = inttoptr i32 %v3_bf4c to i8*
  store i8 %v1_bf4c, i8* %v4_bf4c, align 1
  %v0_bf50 = call i32 @function_105b4()
  store i32 %v0_bf50, i32* %r0.global-to-local, align 4
  store i32 %v1_bd18, i32* %r1.global-to-local, align 4
  store i1 %v2_bf5c, i1* %cpsr_z.global-to-local, align 1
  %v1_bf60 = sub i32 1023, %v0_bf50
  store i32 %v1_bf60, i32* %r3.global-to-local, align 4
  br i1 %v2_bf5c, label %.thread19, label %.thread20

.thread19:                                        ; preds = %bb92
  %v2_bf68 = load i32, i32* %r5.global-to-local, align 4
  %v3_bf68 = add i32 %v2_bf68, 16
  %v4_bf68 = inttoptr i32 %v3_bf68 to i32*
  store i32 %v1_bf60, i32* %v4_bf68, align 4
  br label %bb93

.thread20:                                        ; preds = %bb92
  %v1_bf64 = load i32, i32* %r4.global-to-local, align 4
  %v2_bf64 = add i32 %v1_bf64, 16
  %v3_bf64 = inttoptr i32 %v2_bf64 to i32*
  %v4_bf64 = load i32, i32* %v3_bf64, align 4
  store i32 %v4_bf64, i32* %r3.global-to-local, align 4
  %v2_bf6c = load i32, i32* %r5.global-to-local, align 4
  %v3_bf6c = add i32 %v2_bf6c, 16
  %v4_bf6c = inttoptr i32 %v3_bf6c to i32*
  store i32 %v4_bf64, i32* %v4_bf6c, align 4
  br label %bb93

bb93:                                             ; preds = %.thread19, %.thread20
  store i32 %v4_bf70, i32* %r3.global-to-local, align 4
  %v0_bf74 = load i32, i32* %r4.global-to-local, align 4
  %v1_bf74 = add i32 %v0_bf74, 44
  store i32 %v1_bf74, i32* %r6.global-to-local, align 4
  %v1_bf78 = load i32, i32* %r5.global-to-local, align 4
  %v2_bf78 = add i32 %v1_bf78, 12
  %v3_bf78 = inttoptr i32 %v2_bf78 to i32*
  store i32 %v0_bf50, i32* %v3_bf78, align 4
  %v0_bf7c = load i32, i32* %r3.global-to-local, align 4
  %v1_bf7c = trunc i32 %v0_bf7c to i8
  %v2_bf7c = load i32, i32* %r6.global-to-local, align 4
  %v3_bf7c = add i32 %v2_bf7c, 1
  %v4_bf7c = inttoptr i32 %v3_bf7c to i8*
  store i8 %v1_bf7c, i8* %v4_bf7c, align 1
  %v3_bf80 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf80, i32* %r3.global-to-local, align 4
  store i32 %v1_bb54, i32* %r1.global-to-local, align 4
  %v1_bf88 = add i32 %v3_bf80, 1
  store i32 %v1_bf88, i32* %r4.global-to-local, align 4
  store i32 %v4_bf8c, i32* %r2.global-to-local, align 4
  %v9_bf90 = icmp eq i32 %v1_bf88, %v1_bb54
  store i1 %v9_bf90, i1* %cpsr_z.global-to-local, align 1
  %v0_bf94 = load i32, i32* %sl.global-to-local, align 4
  %v1_bf94 = trunc i32 %v0_bf94 to i8
  %v2_bf94 = load i32, i32* %r6.global-to-local, align 4
  %v3_bf94 = add i32 %v2_bf94, 5
  %v4_bf94 = inttoptr i32 %v3_bf94 to i8*
  store i8 %v1_bf94, i8* %v4_bf94, align 1
  %v0_bf98 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf98 = trunc i32 %v0_bf98 to i8
  %v2_bf98 = load i32, i32* %r6.global-to-local, align 4
  %v3_bf98 = inttoptr i32 %v2_bf98 to i8*
  store i8 %v1_bf98, i8* %v3_bf98, align 1
  %v0_bf9c = load i32, i32* %r7.global-to-local, align 4
  %v1_bf9c = trunc i32 %v0_bf9c to i8
  %v2_bf9c = load i32, i32* %r6.global-to-local, align 4
  %v3_bf9c = add i32 %v2_bf9c, 2
  %v4_bf9c = inttoptr i32 %v3_bf9c to i8*
  store i8 %v1_bf9c, i8* %v4_bf9c, align 1
  %v0_bfa0 = load i32, i32* %fp.global-to-local, align 4
  %v1_bfa0 = trunc i32 %v0_bfa0 to i8
  %v2_bfa0 = load i32, i32* %r6.global-to-local, align 4
  %v3_bfa0 = add i32 %v2_bfa0, 3
  %v4_bfa0 = inttoptr i32 %v3_bfa0 to i8*
  store i8 %v1_bfa0, i8* %v4_bfa0, align 1
  %v0_bfa4 = load i32, i32* %r8.global-to-local, align 4
  %v1_bfa4 = trunc i32 %v0_bfa4 to i8
  %v2_bfa4 = load i32, i32* %r6.global-to-local, align 4
  %v3_bfa4 = add i32 %v2_bfa4, 4
  %v4_bfa4 = inttoptr i32 %v3_bfa4 to i8*
  store i8 %v1_bfa4, i8* %v4_bfa4, align 1
  %v0_bfa8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bfa8, i32* %stack_var_-40, align 4
  %v5_bfac = icmp slt i32 %v1_bf88, %v1_bb54
  br i1 %v5_bfac, label %dec_label_pc_be24, label %dec_label_pc_bfb0.preheader

dec_label_pc_bfb0.preheader:                      ; preds = %bb93, %dec_label_pc_bcfc
  %v1_bfd0 = add i32 %v5_bc4c, 8
  %v1_bfd4 = add i32 %v5_bc4c, 52
  %v2_bfe0 = icmp eq i32 %v5_bca0, -1
  %v7_bfe0 = icmp eq i32 %v5_bca0, -1
  %v3_c1a8 = icmp eq i32 %v3_bd1c, 65535
  %v2_c218 = icmp eq i32 %v1_bd18, 0
  %v2_c234 = icmp eq i32 %v1_bc6c, 0
  br label %dec_label_pc_bfb0

dec_label_pc_bfb0:                                ; preds = %dec_label_pc_bfb0.preheader, %dec_label_pc_c25c
  store i32 %v1_bb54, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_bd14, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_bd14, label %dec_label_pc_c25c, label %dec_label_pc_bfc4

dec_label_pc_bfc4:                                ; preds = %dec_label_pc_bfb0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_bc4c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v1_bfd0, i32* @fp, align 4
  store i32 %v1_bfd4, i32* @sl, align 4
  br label %dec_label_pc_c108

dec_label_pc_bfdc:                                ; preds = %dec_label_pc_c108
  store i32 %v5_bca0, i32* %r2.global-to-local, align 4
  store i1 %v7_bfe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bfe0, label %dec_label_pc_c198, label %dec_label_pc_bfe8

dec_label_pc_bfe8:                                ; preds = %dec_label_pc_c130, %dec_label_pc_bfdc
  store i32 %v3_bd1c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c1a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c1a8, label %dec_label_pc_c1b4, label %dec_label_pc_bffc

dec_label_pc_bffc:                                ; preds = %dec_label_pc_c198.dec_label_pc_bffc_crit_edge, %dec_label_pc_bfe8
  %v1_c000 = phi i32 [ %v1_c000.pre, %dec_label_pc_c198.dec_label_pc_bffc_crit_edge ], [ 65535, %dec_label_pc_bfe8 ]
  store i32 %v3_bd20, i32* %r1.global-to-local, align 4
  %v9_c000 = icmp eq i32 %v3_bd20, %v1_c000
  store i1 %v9_c000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c000, label %dec_label_pc_c1ec, label %dec_label_pc_c008

dec_label_pc_c008:                                ; preds = %dec_label_pc_c1b4.dec_label_pc_c008_crit_edge, %dec_label_pc_bffc
  %v1_c00c = phi i32 [ %v1_c00c.pre, %dec_label_pc_c1b4.dec_label_pc_c008_crit_edge ], [ %v1_c000, %dec_label_pc_bffc ]
  store i32 %v3_bd24, i32* %r2.global-to-local, align 4
  %v9_c00c = icmp eq i32 %v3_bd24, %v1_c00c
  store i1 %v9_c00c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c00c, label %dec_label_pc_c208, label %dec_label_pc_c014

dec_label_pc_c014:                                ; preds = %dec_label_pc_c1ec, %dec_label_pc_c008
  store i32 %v1_bd18, i32* %r3.global-to-local, align 4
  store i1 %v2_c218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c218, label %dec_label_pc_c22c, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_c014
  %v1_c01c = load i32, i32* @r5, align 4
  %v2_c01c = add i32 %v1_c01c, 16
  %v3_c01c = inttoptr i32 %v2_c01c to i32*
  %v4_c01c = load i32, i32* %v3_c01c, align 4
  store i32 %v4_c01c, i32* %r3.global-to-local, align 4
  %v2_c020 = load i32, i32* @r6, align 4
  %v3_c020 = add i32 %v2_c020, 16
  %v4_c020 = inttoptr i32 %v3_c020 to i32*
  store i32 %v4_c01c, i32* %v4_c020, align 4
  br label %dec_label_pc_c028

dec_label_pc_c028:                                ; preds = %bb98, %.thread21
  store i32 %v1_bc6c, i32* %r1.global-to-local, align 4
  store i1 %v2_c234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c234, label %dec_label_pc_c034, label %dec_label_pc_c240

dec_label_pc_c034:                                ; preds = %dec_label_pc_c028, %dec_label_pc_c22c, %dec_label_pc_c240
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c038 = load i32, i32* @r8, align 4
  %v1_c038 = trunc i32 %v0_c038 to i8
  %v2_c038 = load i32, i32* @r5, align 4
  %v3_c038 = add i32 %v2_c038, 10
  %v4_c038 = inttoptr i32 %v3_c038 to i8*
  store i8 %v1_c038, i8* %v4_c038, align 1
  %v0_c03c = load i32, i32* @r8, align 4
  %v1_c03c = trunc i32 %v0_c03c to i8
  %v2_c03c = load i32, i32* @r5, align 4
  %v3_c03c = add i32 %v2_c03c, 11
  %v4_c03c = inttoptr i32 %v3_c03c to i8*
  store i8 %v1_c03c, i8* %v4_c03c, align 1
  %v0_c040 = load i32, i32* @r5, align 4
  store i32 %v0_c040, i32* @r0, align 4
  %v2_c044 = call i32 @function_f188(i32 %v0_c040, i32 20)
  %v3_c044 = trunc i32 %v2_c044 to i8
  %v4_c048 = sdiv i32 %v2_c044, 256
  store i32 %v4_c048, i32* %r3.global-to-local, align 4
  %v1_c04c = trunc i32 %v4_c048 to i8
  %v2_c04c = load i32, i32* @r5, align 4
  %v3_c04c = add i32 %v2_c04c, 11
  %v4_c04c = inttoptr i32 %v3_c04c to i8*
  store i8 %v1_c04c, i8* %v4_c04c, align 1
  %v3_c050 = load i32, i32* @r5, align 4
  %v4_c050 = add i32 %v3_c050, 10
  %v5_c050 = inttoptr i32 %v4_c050 to i8*
  store i8 %v3_c044, i8* %v5_c050, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c058 = load i32, i32* @r8, align 4
  %v1_c058 = trunc i32 %v0_c058 to i8
  %v2_c058 = load i32, i32* @r6, align 4
  %v3_c058 = add i32 %v2_c058, 10
  %v4_c058 = inttoptr i32 %v3_c058 to i8*
  store i8 %v1_c058, i8* %v4_c058, align 1
  %v0_c05c = load i32, i32* @r8, align 4
  %v1_c05c = trunc i32 %v0_c05c to i8
  %v2_c05c = load i32, i32* @r6, align 4
  %v3_c05c = add i32 %v2_c05c, 11
  %v4_c05c = inttoptr i32 %v3_c05c to i8*
  store i8 %v1_c05c, i8* %v4_c05c, align 1
  %v0_c060 = load i32, i32* @r6, align 4
  store i32 %v0_c060, i32* @r0, align 4
  %v2_c064 = call i32 @function_f188(i32 %v0_c060, i32 20)
  %v3_c064 = trunc i32 %v2_c064 to i8
  store i32 %v2_c064, i32* %r0.global-to-local, align 4
  %v4_c068 = sdiv i32 %v2_c064, 256
  store i32 %v4_c068, i32* %r3.global-to-local, align 4
  %v3_c06c = load i32, i32* @r6, align 4
  %v4_c06c = add i32 %v3_c06c, 10
  %v5_c06c = inttoptr i32 %v4_c06c to i8*
  store i8 %v3_c064, i8* %v5_c06c, align 1
  %v0_c070 = load i32, i32* %r3.global-to-local, align 4
  %v1_c070 = trunc i32 %v0_c070 to i8
  %v2_c070 = load i32, i32* @r6, align 4
  %v3_c070 = add i32 %v2_c070, 11
  %v4_c070 = inttoptr i32 %v3_c070 to i8*
  store i8 %v1_c070, i8* %v4_c070, align 1
  %v0_c074 = load i32, i32* @r7, align 4
  %v1_c074 = add i32 %v0_c074, 4
  %v2_c074 = inttoptr i32 %v1_c074 to i8*
  %v3_c074 = load i8, i8* %v2_c074, align 1
  %v4_c074 = zext i8 %v3_c074 to i32
  store i32 %v4_c074, i32* %r3.global-to-local, align 4
  %v1_c078 = add i32 %v0_c074, 5
  %v2_c078 = inttoptr i32 %v1_c078 to i8*
  %v3_c078 = load i8, i8* %v2_c078, align 1
  %v4_c078 = zext i8 %v3_c078 to i32
  store i32 %v0_c074, i32* @r1, align 4
  %v4_c080 = mul nuw nsw i32 %v4_c078, 256
  %v5_c080 = or i32 %v4_c080, %v4_c074
  store i32 %v5_c080, i32* %r2.global-to-local, align 4
  %v0_c084 = load i32, i32* @r8, align 4
  %v1_c084 = trunc i32 %v0_c084 to i8
  %v3_c084 = add i32 %v0_c074, 6
  %v4_c084 = inttoptr i32 %v3_c084 to i8*
  store i8 %v1_c084, i8* %v4_c084, align 1
  %v0_c088 = load i32, i32* @fp, align 4
  store i32 %v0_c088, i32* %r3.global-to-local, align 4
  %v0_c08c = load i32, i32* @r8, align 4
  %v1_c08c = trunc i32 %v0_c08c to i8
  %v2_c08c = load i32, i32* @r7, align 4
  %v3_c08c = add i32 %v2_c08c, 7
  %v4_c08c = inttoptr i32 %v3_c08c to i8*
  store i8 %v1_c08c, i8* %v4_c08c, align 1
  %v0_c090 = load i32, i32* @r6, align 4
  store i32 %v0_c090, i32* %r0.global-to-local, align 4
  %v4_c094 = call i32 @function_f1e4(i32 %v0_c090, i32 %v0_c074, i32 %v5_c080, i32 %v0_c088)
  %v5_c094 = trunc i32 %v4_c094 to i8
  store i32 %v4_c094, i32* %r0.global-to-local, align 4
  %v3_c098 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c098, i32* %r3.global-to-local, align 4
  %v3_c09c = mul i32 %v3_c098, 32
  store i32 %v3_c09c, i32* %r2.global-to-local, align 4
  %v0_c0a0 = load i32, i32* @r5, align 4
  %v1_c0a0 = add i32 %v0_c0a0, 16
  %v2_c0a0 = inttoptr i32 %v1_c0a0 to i32*
  %v3_c0a0 = load i32, i32* %v2_c0a0, align 4
  store i32 %v3_c0a0, i32* %r1.global-to-local, align 4
  %v5_c0a4 = mul i32 %v3_c098, 24
  store i32 %v5_c0a4, i32* %r2.global-to-local, align 4
  %v4_c0a836 = udiv i32 %v4_c094, 256
  %v1_c0ac = trunc i32 %v4_c0a836 to i8
  %v2_c0ac = load i32, i32* @r7, align 4
  %v3_c0ac = add i32 %v2_c0ac, 7
  %v4_c0ac = inttoptr i32 %v3_c0ac to i8*
  store i8 %v1_c0ac, i8* %v4_c0ac, align 1
  %v0_c0b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0b0 = load i32, i32* @sb, align 4
  %v2_c0b0 = add i32 %v1_c0b0, %v0_c0b0
  store i32 %v2_c0b0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_c0b8 = load i32, i32* @r7, align 4
  %v4_c0b8 = add i32 %v3_c0b8, 6
  %v5_c0b8 = inttoptr i32 %v4_c0b8 to i8*
  store i8 %v5_c094, i8* %v5_c0b8, align 1
  %v0_c0bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c0bc = load i32, i32* %lr.global-to-local, align 4
  %v2_c0bc = add i32 %v1_c0bc, 4
  %v3_c0bc = inttoptr i32 %v2_c0bc to i32*
  store i32 %v0_c0bc, i32* %v3_c0bc, align 4
  %v0_c0c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c0c0 = trunc i32 %v0_c0c0 to i8
  %v2_c0c0 = load i32, i32* %r2.global-to-local, align 4
  %v3_c0c0 = load i32, i32* @sb, align 4
  %v4_c0c0 = add i32 %v3_c0c0, %v2_c0c0
  %v5_c0c0 = inttoptr i32 %v4_c0c0 to i8*
  store i8 %v1_c0c0, i8* %v5_c0c0, align 1
  %v0_c0c4 = load i32, i32* @r8, align 4
  %v1_c0c4 = trunc i32 %v0_c0c4 to i8
  %v2_c0c4 = load i32, i32* %lr.global-to-local, align 4
  %v3_c0c4 = add i32 %v2_c0c4, 2
  %v4_c0c4 = inttoptr i32 %v3_c0c4 to i8*
  store i8 %v1_c0c4, i8* %v4_c0c4, align 1
  %v0_c0c8 = load i32, i32* @r8, align 4
  %v1_c0c8 = trunc i32 %v0_c0c8 to i8
  %v2_c0c8 = load i32, i32* %lr.global-to-local, align 4
  %v3_c0c8 = add i32 %v2_c0c8, 1
  %v4_c0c8 = inttoptr i32 %v3_c0c8 to i8*
  store i8 %v1_c0c8, i8* %v4_c0c8, align 1
  %v0_c0cc = load i32, i32* @r8, align 4
  %v1_c0cc = trunc i32 %v0_c0cc to i8
  %v2_c0cc = load i32, i32* %lr.global-to-local, align 4
  %v3_c0cc = add i32 %v2_c0cc, 3
  %v4_c0cc = inttoptr i32 %v3_c0cc to i8*
  store i8 %v1_c0cc, i8* %v4_c0cc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c0d8 = load i32, i32* @r5, align 4
  store i32 %v0_c0d8, i32* %r1.global-to-local, align 4
  store i32 %v3_bcc4, i32* %r0.global-to-local, align 4
  %v0_c0e0 = load i32, i32* @sl, align 4
  store i32 %v0_c0e0, i32* %r2.global-to-local, align 4
  %v0_c0e4 = load i32, i32* %lr.global-to-local, align 4
  %v4_c0e4 = inttoptr i32 %v0_c0e4 to %sockaddr*
  %v7_c0ec = inttoptr i32 %v0_c0d8 to i32*
  %v9_c0ec = call i32 @sendto(i32 %v3_bcc4, i32* %v7_c0ec, i32 %v0_c0e0, i32 16384, %sockaddr* %v4_c0e4, i32 16)
  %v3_c0f0 = load i32, i32* %stack_var_-40, align 4
  %v1_c0f4 = add i32 %v3_c0f0, 1
  store i32 %v1_c0f4, i32* %r0.global-to-local, align 4
  store i32 %v1_bb54, i32* %r3.global-to-local, align 4
  %v9_c0fc = icmp eq i32 %v1_c0f4, %v1_bb54
  store i1 %v9_c0fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c0f4, i32* %stack_var_-40, align 4
  %v6_c104 = icmp slt i32 %v1_c0f4, %v1_bb54
  br i1 %v6_c104, label %dec_label_pc_c108, label %dec_label_pc_c25c

dec_label_pc_c108:                                ; preds = %dec_label_pc_c034, %dec_label_pc_bfc4
  %v1_c11c = phi i32 [ %v1_c0f4, %dec_label_pc_c034 ], [ 0, %dec_label_pc_bfc4 ]
  %v5_c10c = mul i32 %v1_c11c, 24
  %v1_c110 = load i32, i32* @sb, align 4
  %v2_c110 = add i32 %v1_c110, %v5_c10c
  store i32 %v2_c110, i32* %r3.global-to-local, align 4
  store i32 %v4_bb80, i32* %r1.global-to-local, align 4
  %v1_c118 = add i32 %v2_c110, 20
  %v2_c118 = inttoptr i32 %v1_c118 to i8*
  %v3_c118 = load i8, i8* %v2_c118, align 1
  %v4_c118 = zext i8 %v3_c118 to i32
  store i32 %v4_c118, i32* %r2.global-to-local, align 4
  %v4_c11c = mul i32 %v1_c11c, 4
  %v5_c11c = add i32 %v4_c11c, %v4_bb80
  %v6_c11c = inttoptr i32 %v5_c11c to i32*
  %v7_c11c = load i32, i32* %v6_c11c, align 4
  store i32 %v7_c11c, i32* @r5, align 4
  %v2_c120 = icmp ugt i8 %v3_c118, 30
  %v7_c120 = icmp eq i8 %v3_c118, 31
  store i1 %v7_c120, i1* %cpsr_z.global-to-local, align 1
  %v1_c124 = add i32 %v7_c11c, 24
  store i32 %v1_c124, i32* @r6, align 4
  %v1_c128 = add i32 %v7_c11c, 44
  store i32 %v1_c128, i32* @r7, align 4
  %v2_c12c = xor i1 %v7_c120, true
  %v3_c12c = and i1 %v2_c120, %v2_c12c
  br i1 %v3_c12c, label %dec_label_pc_bfdc, label %dec_label_pc_c130

dec_label_pc_c130:                                ; preds = %dec_label_pc_c108
  %v1_c130 = add i32 %v2_c110, 16
  %v2_c130 = inttoptr i32 %v1_c130 to i32*
  %v3_c130 = load i32, i32* %v2_c130, align 4
  store i32 %v3_c130, i32* %r4.global-to-local, align 4
  %v0_c134 = call i32 @function_105b4()
  store i32 %v0_c134, i32* %r0.global-to-local, align 4
  %v3_c138 = load i32, i32* %stack_var_-40, align 4
  %v5_c140 = mul i32 %v3_c138, 24
  %v0_c144 = load i32, i32* %r4.global-to-local, align 4
  %v1_c148 = load i32, i32* @sb, align 4
  %v2_c148 = add i32 %v1_c148, %v5_c140
  store i32 %v2_c148, i32* %r1.global-to-local, align 4
  %v1_c14c = and i32 %v0_c144, 65280
  store i32 %v1_c14c, i32* %r3.global-to-local, align 4
  %v1_c144 = udiv i32 %v0_c144, 256
  %v3_c150 = and i32 %v1_c144, 65280
  store i32 %v3_c150, i32* %r2.global-to-local, align 4
  %v1_c158 = add i32 %v2_c148, 20
  %v2_c158 = inttoptr i32 %v1_c158 to i8*
  %v3_c158 = load i8, i8* %v2_c158, align 1
  %v4_c158 = zext i8 %v3_c158 to i32
  store i32 %v4_c158, i32* %lr.global-to-local, align 4
  %v2_c164 = call i32 @llvm.bswap.i32(i32 %v0_c144)
  %v7_c168 = lshr i32 %v0_c134, %v4_c158
  %v8_c168 = add i32 %v7_c168, %v2_c164
  %v3_c174 = mul i32 %v8_c168, 16777216
  %v1_c178 = and i32 %v8_c168, 65280
  store i32 %v1_c178, i32* %r0.global-to-local, align 4
  store i32 %v5_bca0, i32* %r2.global-to-local, align 4
  %v4_c184 = mul nuw nsw i32 %v1_c178, 256
  %v5_c184 = or i32 %v4_c184, %v3_c174
  store i32 %v5_c184, i32* %r1.global-to-local, align 4
  %v2_c188 = call i32 @llvm.bswap.i32(i32 %v8_c168)
  store i32 %v2_c188, i32* %r3.global-to-local, align 4
  store i1 %v7_bfe0, i1* %cpsr_z.global-to-local, align 1
  %v1_c190 = load i32, i32* @r5, align 4
  %v2_c190 = add i32 %v1_c190, 16
  %v3_c190 = inttoptr i32 %v2_c190 to i32*
  store i32 %v2_c188, i32* %v3_c190, align 4
  br i1 %v2_bfe0, label %dec_label_pc_c198, label %dec_label_pc_bfe8

dec_label_pc_c198:                                ; preds = %dec_label_pc_c130, %dec_label_pc_bfdc
  %v0_c198 = call i32 @function_105b4()
  store i32 %v0_c198, i32* %r0.global-to-local, align 4
  store i32 %v3_bd1c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c1a8, i1* %cpsr_z.global-to-local, align 1
  %v1_c1ac = load i32, i32* @r5, align 4
  %v2_c1ac = add i32 %v1_c1ac, 12
  %v3_c1ac = inttoptr i32 %v2_c1ac to i32*
  store i32 %v0_c198, i32* %v3_c1ac, align 4
  br i1 %v3_c1a8, label %dec_label_pc_c1b4, label %dec_label_pc_c198.dec_label_pc_bffc_crit_edge

dec_label_pc_c198.dec_label_pc_bffc_crit_edge:    ; preds = %dec_label_pc_c198
  %v1_c000.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bffc

dec_label_pc_c1b4:                                ; preds = %dec_label_pc_c198, %dec_label_pc_bfe8
  %v0_c1b4 = call i32 @function_105b4()
  %v3_c1bc = urem i32 %v0_c1b4, 65536
  store i32 %v3_c1bc, i32* %r0.global-to-local, align 4
  %v1_c1c4 = sub nsw i32 999, %v3_c1bc
  store i32 %v1_c1c4, i32* %r2.global-to-local, align 4
  %v3_c1c8 = sdiv i32 %v1_c1c4, 256
  store i32 %v3_c1c8, i32* %r1.global-to-local, align 4
  %v3_c1cc35 = udiv i32 %v3_c1bc, 256
  store i32 %v3_c1cc35, i32* %r3.global-to-local, align 4
  %v1_c1d0 = trunc i32 %v3_c1cc35 to i8
  %v2_c1d0 = load i32, i32* @r5, align 4
  %v3_c1d0 = add i32 %v2_c1d0, 5
  %v4_c1d0 = inttoptr i32 %v3_c1d0 to i8*
  store i8 %v1_c1d0, i8* %v4_c1d0, align 1
  %v0_c1d4 = load i32, i32* %r0.global-to-local, align 4
  %v1_c1d4 = trunc i32 %v0_c1d4 to i8
  %v2_c1d4 = load i32, i32* @r5, align 4
  %v3_c1d4 = add i32 %v2_c1d4, 4
  %v4_c1d4 = inttoptr i32 %v3_c1d4 to i8*
  store i8 %v1_c1d4, i8* %v4_c1d4, align 1
  %v0_c1d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c1d8 = trunc i32 %v0_c1d8 to i8
  %v2_c1d8 = load i32, i32* @r6, align 4
  %v3_c1d8 = add i32 %v2_c1d8, 5
  %v4_c1d8 = inttoptr i32 %v3_c1d8 to i8*
  store i8 %v1_c1d8, i8* %v4_c1d8, align 1
  store i32 %v3_bd20, i32* %r1.global-to-local, align 4
  %v1_c1e0 = load i32, i32* @r4, align 4
  %v9_c1e0 = icmp eq i32 %v3_bd20, %v1_c1e0
  store i1 %v9_c1e0, i1* %cpsr_z.global-to-local, align 1
  %v0_c1e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c1e4 = trunc i32 %v0_c1e4 to i8
  %v2_c1e4 = load i32, i32* @r6, align 4
  %v3_c1e4 = add i32 %v2_c1e4, 4
  %v4_c1e4 = inttoptr i32 %v3_c1e4 to i8*
  store i8 %v1_c1e4, i8* %v4_c1e4, align 1
  %v0_c1e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c1e8, label %dec_label_pc_c1ec, label %dec_label_pc_c1b4.dec_label_pc_c008_crit_edge

dec_label_pc_c1b4.dec_label_pc_c008_crit_edge:    ; preds = %dec_label_pc_c1b4
  %v1_c00c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c008

dec_label_pc_c1ec:                                ; preds = %dec_label_pc_c1b4, %dec_label_pc_bffc
  %v0_c1ec = call i32 @function_105b4()
  %v1_c1ec = trunc i32 %v0_c1ec to i8
  store i32 %v0_c1ec, i32* %r0.global-to-local, align 4
  store i32 %v3_bd24, i32* %r2.global-to-local, align 4
  %v4_c1f4 = sdiv i32 %v0_c1ec, 256
  store i32 %v4_c1f4, i32* %r3.global-to-local, align 4
  %v1_c1f8 = load i32, i32* @r4, align 4
  %v9_c1f8 = icmp eq i32 %v3_bd24, %v1_c1f8
  store i1 %v9_c1f8, i1* %cpsr_z.global-to-local, align 1
  %v3_c1fc = load i32, i32* @r5, align 4
  %v4_c1fc = add i32 %v3_c1fc, 44
  %v5_c1fc = inttoptr i32 %v4_c1fc to i8*
  store i8 %v1_c1ec, i8* %v5_c1fc, align 1
  %v0_c200 = load i32, i32* %r3.global-to-local, align 4
  %v1_c200 = trunc i32 %v0_c200 to i8
  %v2_c200 = load i32, i32* @r7, align 4
  %v3_c200 = add i32 %v2_c200, 1
  %v4_c200 = inttoptr i32 %v3_c200 to i8*
  store i8 %v1_c200, i8* %v4_c200, align 1
  %v0_c204 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c204, label %dec_label_pc_c208, label %dec_label_pc_c014

dec_label_pc_c208:                                ; preds = %dec_label_pc_c1ec, %dec_label_pc_c008
  %v0_c208 = call i32 @function_105b4()
  %v1_c208 = trunc i32 %v0_c208 to i8
  store i32 %v0_c208, i32* %r0.global-to-local, align 4
  %v4_c20c37 = udiv i32 %v0_c208, 256
  %v1_c210 = trunc i32 %v4_c20c37 to i8
  %v2_c210 = load i32, i32* @r7, align 4
  %v3_c210 = add i32 %v2_c210, 3
  %v4_c210 = inttoptr i32 %v3_c210 to i8*
  store i8 %v1_c210, i8* %v4_c210, align 1
  store i32 %v1_bd18, i32* %r3.global-to-local, align 4
  store i1 %v2_c218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c218, label %bb97, label %bb96

bb96:                                             ; preds = %dec_label_pc_c208
  %v1_c21c = load i32, i32* @r5, align 4
  %v2_c21c = add i32 %v1_c21c, 16
  %v3_c21c = inttoptr i32 %v2_c21c to i32*
  %v4_c21c = load i32, i32* %v3_c21c, align 4
  store i32 %v4_c21c, i32* %r3.global-to-local, align 4
  br label %bb97

bb97:                                             ; preds = %dec_label_pc_c208, %bb96
  %v3_c220 = load i32, i32* @r7, align 4
  %v4_c220 = add i32 %v3_c220, 2
  %v5_c220 = inttoptr i32 %v4_c220 to i8*
  store i8 %v1_c208, i8* %v5_c220, align 1
  %v0_c224 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c224, label %dec_label_pc_c22c, label %bb98

bb98:                                             ; preds = %bb97
  %v1_c224 = load i32, i32* %r3.global-to-local, align 4
  %v2_c224 = load i32, i32* @r6, align 4
  %v3_c224 = add i32 %v2_c224, 16
  %v4_c224 = inttoptr i32 %v3_c224 to i32*
  store i32 %v1_c224, i32* %v4_c224, align 4
  br label %dec_label_pc_c028

dec_label_pc_c22c:                                ; preds = %dec_label_pc_c014, %bb97
  %v0_c22c = call i32 @function_105b4()
  store i32 %v0_c22c, i32* %r0.global-to-local, align 4
  store i32 %v1_bc6c, i32* %r1.global-to-local, align 4
  store i1 %v2_c234, i1* %cpsr_z.global-to-local, align 1
  %v1_c238 = load i32, i32* @r6, align 4
  %v2_c238 = add i32 %v1_c238, 16
  %v3_c238 = inttoptr i32 %v2_c238 to i32*
  store i32 %v0_c22c, i32* %v3_c238, align 4
  br i1 %v2_c234, label %dec_label_pc_c034, label %dec_label_pc_c240

dec_label_pc_c240:                                ; preds = %dec_label_pc_c028, %dec_label_pc_c22c
  %v0_c240 = load i32, i32* @r7, align 4
  %v1_c240 = add i32 %v0_c240, 8
  store i32 %v1_c240, i32* @r4, align 4
  store i32 %v1_c240, i32* %r0.global-to-local, align 4
  store i32 %v5_bc4c, i32* %r1.global-to-local, align 4
  %v2_c24c = call i32 @function_10668(i32 %v1_c240, i32 %v5_bc4c)
  store i32 %v2_c24c, i32* %r0.global-to-local, align 4
  store i32 %v5_bc4c, i32* %r2.global-to-local, align 4
  %v0_c254 = load i32, i32* @r8, align 4
  %v1_c254 = trunc i32 %v0_c254 to i8
  %v2_c254 = load i32, i32* @r4, align 4
  %v4_c254 = add i32 %v2_c254, %v5_bc4c
  %v5_c254 = inttoptr i32 %v4_c254 to i8*
  store i8 %v1_c254, i8* %v5_c254, align 1
  br label %dec_label_pc_c034

dec_label_pc_c25c:                                ; preds = %dec_label_pc_c034, %dec_label_pc_bfb0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c260 = call i32 @time(i32* null)
  store i32 %v2_c260, i32* %r0.global-to-local, align 4
  store i32 %v2_bcb0, i32* %r1.global-to-local, align 4
  %v9_c268 = icmp eq i32 %v2_bcb0, %v2_c260
  store i1 %v9_c268, i1* %cpsr_z.global-to-local, align 1
  %v6_c26c = icmp slt i32 %v2_bcb0, %v2_c260
  br i1 %v6_c26c, label %dec_label_pc_c270, label %dec_label_pc_bfb0

dec_label_pc_c270:                                ; preds = %dec_label_pc_c25c, %dec_label_pc_bb50, %dec_label_pc_c278
  %v29_c274 = phi i32 [ %v3_bcc4, %dec_label_pc_bb50 ], [ %v1_c27c, %dec_label_pc_c278 ], [ %v2_c260, %dec_label_pc_c25c ]
  store i32 %v3_bb50, i32* %r4.global-to-local, align 4
  store i32 %v6_bb50, i32* %r5.global-to-local, align 4
  store i32 %v9_bb50, i32* %r6.global-to-local, align 4
  store i32 %v12_bb50, i32* %r7.global-to-local, align 4
  store i32 %v15_bb50, i32* %r8.global-to-local, align 4
  store i32 %v21_bb50, i32* %sl.global-to-local, align 4
  store i32 %v24_bb50, i32* %fp.global-to-local, align 4
  ret i32 %v29_c274

dec_label_pc_c278:                                ; preds = %dec_label_pc_bcd4
  store i32 %v3_bcc4, i32* %r0.global-to-local, align 4
  %v1_c27c = call i32 @close(i32 %v3_bcc4)
  store i32 %v1_c27c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c270

; uselistorder directives
  uselistorder i32 %v1_c27c, { 1, 0 }
  uselistorder i32 %v0_c208, { 0, 2, 1 }
  uselistorder i32 %v0_c1ec, { 0, 2, 1 }
  uselistorder i32 %v3_c1bc, { 0, 2, 1 }
  uselistorder i32 %v2_c188, { 1, 0 }
  uselistorder i32 %v8_c168, { 1, 2, 0 }
  uselistorder i32 %v0_c144, { 1, 0, 2 }
  uselistorder i32 %v7_c11c, { 1, 0, 2 }
  uselistorder i32 %v1_c0f4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_c098, { 1, 0, 2 }
  uselistorder i32 %v4_c094, { 0, 2, 1 }
  uselistorder i32 %v0_c074, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_c064, { 0, 2, 1 }
  uselistorder i32 %v4_c048, { 1, 0 }
  uselistorder i1 %v2_c234, { 2, 3, 1, 0 }
  uselistorder i1 %v2_c218, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c1a8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_bfe0, { 2, 1, 0 }
  uselistorder i32 %v0_bf50, { 1, 0, 2 }
  uselistorder i32 %v3_bdf4, { 1, 0 }
  uselistorder i32 %tmp82, { 1, 0, 2 }
  uselistorder i32 %v1_bd70, { 0, 2, 1 }
  uselistorder i32 %v1_bd68, { 2, 1, 0 }
  uselistorder i32 %v1_bd64, { 1, 0 }
  uselistorder i32 %v1_bd60, { 1, 0 }
  uselistorder i32 %v1_bd54, { 1, 0 }
  uselistorder i32 %v3_bd4c, { 2, 0, 1 }
  uselistorder i32 %v3_bd1c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_bd18, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_bd14, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bd0c, { 0, 3, 2, 1 }
  uselistorder i32 %v0_bd08, { 0, 1, 3, 2 }
  uselistorder i1 %v7_bcf4, { 1, 0 }
  uselistorder i1 %v7_bcc8, { 1, 0 }
  uselistorder i32 %v3_bcc4, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_bcb0, { 2, 1, 0 }
  uselistorder i32 %v5_bca0, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_bc6c, { 1, 0, 2 }
  uselistorder i32 %v5_bc4c, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i8 %v5_bbf0, { 1, 0 }
  uselistorder i32 %v4_bb80, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bb54, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 14, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 44, 43, 46, 45, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 15, 14, 16, 18, 17, 19, 20, 25, 21, 22, 23, 24, 28, 26, 27, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_c270, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c240, { 1, 0 }
  uselistorder label %dec_label_pc_c22c, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %dec_label_pc_c034, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bfb0, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c288(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c288:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i8 @__decompiler_undefined_function_1()
  %tmp37 = call i8 @__decompiler_undefined_function_1()
  %tmp38 = call i8 @__decompiler_undefined_function_1()
  %tmp39 = call i32 @__decompiler_undefined_function_0()
  %tmp44 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c288 = load i32, i32* @r4, align 4
  %v18_c288 = load i32, i32* @sb, align 4
  %v1_c28c = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %v1_c28c, i32* %r0.global-to-local, align 4
  %v1_c2a8 = urem i32 %arg4, 256
  store i32 %v1_c2a8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_c2b8 = call i32* @calloc(i32 %v1_c28c, i32 16)
  %v4_c2b8 = ptrtoint i32* %v2_c2b8 to i32
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_c28c, i32* %r0.global-to-local, align 4
  %v2_c2c8 = call i32* @calloc(i32 %v1_c28c, i32 4)
  %v4_c2c8 = ptrtoint i32* %v2_c2c8 to i32
  %v0_c2cc = load i32, i32* @r5, align 4
  store i32 %v0_c2cc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c2d8 = load i32, i32* @r7, align 4
  store i32 %v0_c2d8, i32* %r3.global-to-local, align 4
  %v0_c2dc = load i32, i32* @r4, align 4
  store i32 %v0_c2dc, i32* %r0.global-to-local, align 4
  %v5_c2e0 = inttoptr i32 %v0_c2cc to i32*
  %v6_c2e0 = call i32 @function_8f6c(i32 %v0_c2dc, i32* %v5_c2e0, i32 2, i32 %v0_c2d8)
  %v1_c2ec = urem i32 %v6_c2e0, 256
  store i32 %v1_c2ec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c2f8 = load i32, i32* @r5, align 4
  store i32 %v0_c2f8, i32* %r1.global-to-local, align 4
  %v0_c2fc = load i32, i32* @r4, align 4
  store i32 %v0_c2fc, i32* %r0.global-to-local, align 4
  %v5_c300 = trunc i32 %v6_c2e0 to i8
  %v6_c304 = inttoptr i32 %v0_c2f8 to i32*
  %v7_c304 = call i32 @function_8f6c(i32 %v0_c2fc, i32* %v6_c304, i32 3, i32 65535)
  %v0_c308 = load i32, i32* @r5, align 4
  store i32 %v0_c308, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c304, i32* %sb.global-to-local, align 4
  %v0_c318 = load i32, i32* @r4, align 4
  store i32 %v0_c318, i32* %r0.global-to-local, align 4
  %v4_c31c = inttoptr i32 %v0_c308 to i32*
  %v5_c31c = call i32 @function_8f6c(i32 %v0_c318, i32* %v4_c31c, i32 4, i32 64)
  %v1_c324 = urem i32 %v5_c31c, 256
  store i32 %v1_c324, i32* %ip.global-to-local, align 4
  %v0_c328 = load i32, i32* @r5, align 4
  store i32 %v0_c328, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c334 = load i32, i32* @r4, align 4
  store i32 %v0_c334, i32* %r0.global-to-local, align 4
  %v6_c33c = inttoptr i32 %v0_c328 to i32*
  %v7_c33c = call i32 @function_8f6c(i32 %v0_c334, i32* %v6_c33c, i32 5, i32 1)
  %v1_c348 = urem i32 %v7_c33c, 256
  store i32 %v1_c348, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_c350 = load i32, i32* @r5, align 4
  store i32 %v0_c350, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c358 = load i32, i32* @r4, align 4
  store i32 %v0_c358, i32* %r0.global-to-local, align 4
  %v6_c360 = inttoptr i32 %v0_c350 to i32*
  %v7_c360 = call i32 @function_8f6c(i32 %v0_c358, i32* %v6_c360, i32 7, i32 65535)
  %v0_c364 = load i32, i32* @r5, align 4
  store i32 %v0_c364, i32* %r1.global-to-local, align 4
  %v3_c368 = mul i32 %v7_c360, 65536
  store i32 %v3_c368, i32* @sl, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_c370 = load i32, i32* @r7, align 4
  store i32 %v0_c370, i32* %r3.global-to-local, align 4
  %v0_c374 = load i32, i32* @r4, align 4
  store i32 %v0_c374, i32* %r0.global-to-local, align 4
  %v4_c378 = inttoptr i32 %v0_c364 to i32*
  %v5_c378 = call i32 @function_8f6c(i32 %v0_c374, i32* %v4_c378, i32 10, i32 %v0_c370)
  %v1_c380 = urem i32 %v5_c378, 256
  store i32 %v1_c380, i32* %ip.global-to-local, align 4
  %v0_c384 = load i32, i32* @r5, align 4
  store i32 %v0_c384, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c390 = load i32, i32* @r4, align 4
  store i32 %v0_c390, i32* %r0.global-to-local, align 4
  %v5_c398 = inttoptr i32 %v0_c384 to i32*
  %v6_c398 = call i32 @function_8f6c(i32 %v0_c390, i32* %v5_c398, i32 11, i32 1)
  %v1_c3a0 = urem i32 %v6_c398, 256
  store i32 %v1_c3a0, i32* %ip.global-to-local, align 4
  %v0_c3a4 = load i32, i32* @r5, align 4
  store i32 %v0_c3a4, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c3b0 = load i32, i32* @r4, align 4
  store i32 %v0_c3b0, i32* %r0.global-to-local, align 4
  %v5_c3b8 = inttoptr i32 %v0_c3a4 to i32*
  %v6_c3b8 = call i32 @function_8f6c(i32 %v0_c3b0, i32* %v5_c3b8, i32 12, i32 1)
  %v1_c3c0 = urem i32 %v6_c3b8, 256
  store i32 %v1_c3c0, i32* %ip.global-to-local, align 4
  %v0_c3c4 = load i32, i32* @r5, align 4
  store i32 %v0_c3c4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_c3cc = load i32, i32* @r7, align 4
  store i32 %v0_c3cc, i32* %r3.global-to-local, align 4
  %v0_c3d0 = load i32, i32* @r4, align 4
  store i32 %v0_c3d0, i32* %r0.global-to-local, align 4
  %v5_c3d8 = inttoptr i32 %v0_c3c4 to i32*
  %v6_c3d8 = call i32 @function_8f6c(i32 %v0_c3d0, i32* %v5_c3d8, i32 13, i32 %v0_c3cc)
  %v1_c3e0 = urem i32 %v6_c3d8, 256
  store i32 %v1_c3e0, i32* %ip.global-to-local, align 4
  %v0_c3e4 = load i32, i32* @r5, align 4
  store i32 %v0_c3e4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_c3ec = load i32, i32* @r7, align 4
  store i32 %v0_c3ec, i32* %r3.global-to-local, align 4
  %v0_c3f0 = load i32, i32* @r4, align 4
  store i32 %v0_c3f0, i32* %r0.global-to-local, align 4
  %v5_c3f8 = inttoptr i32 %v0_c3e4 to i32*
  %v6_c3f8 = call i32 @function_8f6c(i32 %v0_c3f0, i32* %v5_c3f8, i32 14, i32 %v0_c3ec)
  %v1_c400 = urem i32 %v6_c3f8, 256
  store i32 %v1_c400, i32* %ip.global-to-local, align 4
  %v0_c404 = load i32, i32* @r5, align 4
  store i32 %v0_c404, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_c40c = load i32, i32* @r7, align 4
  store i32 %v0_c40c, i32* %r3.global-to-local, align 4
  %v0_c410 = load i32, i32* @r4, align 4
  store i32 %v0_c410, i32* %r0.global-to-local, align 4
  %v5_c418 = inttoptr i32 %v0_c404 to i32*
  %v6_c418 = call i32 @function_8f6c(i32 %v0_c410, i32* %v5_c418, i32 15, i32 %v0_c40c)
  %v1_c420 = urem i32 %v6_c418, 256
  store i32 %v1_c420, i32* %ip.global-to-local, align 4
  %v0_c424 = load i32, i32* @r7, align 4
  store i32 %v0_c424, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_c42c = load i32, i32* @r5, align 4
  store i32 %v0_c42c, i32* %r1.global-to-local, align 4
  %v0_c430 = load i32, i32* @r4, align 4
  store i32 %v0_c430, i32* %r0.global-to-local, align 4
  %v5_c438 = inttoptr i32 %v0_c42c to i32*
  %v6_c438 = call i32 @function_8f6c(i32 %v0_c430, i32* %v5_c438, i32 %v0_c424, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c444 = load i32, i32* @r5, align 4
  store i32 %v0_c444, i32* %r1.global-to-local, align 4
  %v0_c44c = load i32, i32* @r4, align 4
  store i32 %v0_c44c, i32* %r0.global-to-local, align 4
  %v4_c450 = inttoptr i32 %v0_c444 to i32*
  %v5_c450 = call i32 @function_8f6c(i32 %v0_c44c, i32* %v4_c450, i32 1, i32 1)
  %v1_c458 = urem i32 %v5_c450, 256
  store i32 %v1_c458, i32* %r3.global-to-local, align 4
  %v0_c45c = load i32, i32* @r7, align 4
  store i32 %v0_c45c, i32* %r0.global-to-local, align 4
  %v1_c464 = inttoptr i32 %v0_c45c to i32*
  %v2_c464 = call i32 @time(i32* %v1_c464)
  %v1_c468 = load i32, i32* @r6, align 4
  %v2_c468 = add i32 %v1_c468, %v2_c464
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c47c = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_c47c, i32* %r0.global-to-local, align 4
  %v0_c480 = load i32, i32* @sl, align 4
  %v3_c480 = udiv i32 %v0_c480, 65536
  store i32 %v3_c480, i32* %r1.global-to-local, align 4
  %v7_c484 = icmp eq i32 %v3_c47c, -1
  store i1 %v7_c484, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c47c, i32* @r8, align 4
  br i1 %v7_c484, label %dec_label_pc_c850, label %dec_label_pc_c494

dec_label_pc_c494:                                ; preds = %dec_label_pc_c288
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c49c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c49c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_c4a4 = load i32, i32* @r7, align 4
  store i32 %v0_c4a4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c4b0 = call i32 @setsockopt(i32 %v0_c4a4, i32 3, i32 %v6_c49c, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c4b0, i32* %r0.global-to-local, align 4
  %v7_c4b4 = icmp eq i32 %v6_c4b0, -1
  store i1 %v7_c4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c4b4, label %dec_label_pc_c848, label %dec_label_pc_c4bc

dec_label_pc_c4bc:                                ; preds = %dec_label_pc_c494
  store i32 %v1_c28c, i32* %r2.global-to-local, align 4
  %v0_c4c0 = load i32, i32* %sb.global-to-local, align 4
  %v3_c4c0 = mul i32 %v0_c4c0, 65536
  store i32 %v3_c4c0, i32* %r0.global-to-local, align 4
  %v3_c4c4 = urem i32 %v0_c4c0, 65536
  store i32 %v3_c4c4, i32* %r3.global-to-local, align 4
  %v2_c4c8 = icmp eq i32 %v1_c28c, 0
  store i1 %v2_c4c8, i1* %cpsr_z.global-to-local, align 1
  %v0_c4cc = load i32, i32* @r7, align 4
  store i32 %v0_c4cc, i32* %stack_var_-40, align 4
  br i1 %v2_c4c8, label %dec_label_pc_c4bc.dec_label_pc_c6d0.preheader_crit_edge, label %dec_label_pc_c4d8

dec_label_pc_c4bc.dec_label_pc_c6d0.preheader_crit_edge: ; preds = %dec_label_pc_c4bc
  %.pre = add i32 %v6_c438, 40
  br label %dec_label_pc_c6d0.preheader

dec_label_pc_c4d8:                                ; preds = %dec_label_pc_c4bc
  %v0_c4dc = load i32, i32* @sl, align 4
  %v3_c4dc = udiv i32 %v0_c4dc, 16777216
  %tmp84 = udiv i32 %v0_c4c0, 256
  %v3_c4e0 = urem i32 %tmp84, 256
  store i32 %v3_c4e0, i32* %r0.global-to-local, align 4
  %v1_c4e4 = add i32 %v6_c438, 40
  store i32 %v1_c4e4, i32* %ip.global-to-local, align 4
  %v2_c518 = ptrtoint i32* %stack_var_-332 to i32
  %v3_c8c4 = icmp ugt i32 %v0_c480, -65537
  %v2_c5a4 = ptrtoint i32* %stack_var_-60 to i32
  %tmp85 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v1_c5c8 = urem i32 %v1_c4e4, 256
  %tmp86 = udiv i32 %v1_c4e4, 256
  %v3_c5cc = urem i32 %tmp86, 256
  %v2_c5dc = ptrtoint i32* %stack_var_-44 to i32
  %tmp87 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_c650 = zext i8 %tmp38 to i32
  %v4_c654 = zext i8 %tmp37 to i32
  %v4_c660 = mul nuw nsw i32 %v4_c654, 256
  %v4_c670 = zext i8 %tmp36 to i32
  %v1_c674 = and i32 %v4_c670, 18
  %v2_c678 = icmp eq i32 %v1_c674, 18
  %sext = mul i32 %v7_c33c, 16777216
  %v4_c9dc = sdiv i32 %sext, 16777216
  %v4_c9ec = sext i8 %v5_c300 to i32
  %sext9 = mul i32 %v5_c31c, 16777216
  %v4_c9f8 = sdiv i32 %sext9, 16777216
  %v1_cae0 = urem i32 %v5_c378, 2
  %tmp111 = sub nsw i32 0, %v1_cae0
  %v4_cae8 = and i32 %tmp111, 32
  %v1_cb14 = urem i32 %v6_c3b8, 2
  %tmp112 = sub nsw i32 0, %v1_cb14
  %v4_cb1c = and i32 %tmp112, 8
  %v1_cb60 = urem i32 %v6_c418, 2
  %v4_c5d0 = mul nuw nsw i32 %v1_c5c8, 256
  %v5_c5d0 = or i32 %v4_c5d0, %v3_c5cc
  %v5_c660 = or i32 %v4_c650, %v4_c660
  %v1_c680 = and i32 %v4_c670, 5
  %v2_c680 = icmp eq i32 %v1_c680, 0
  %v1_c590 = urem i32 %v3_c480, 256
  %v4_c594 = mul nuw nsw i32 %v1_c590, 256
  %v5_c594 = or i32 %v3_c4dc, %v4_c594
  %v1_c59c = trunc i32 %v3_c480 to i8
  %v1_c5a0 = trunc i32 %v3_c4dc to i8
  %v1_c9cc = urem i32 %v0_c4c0, 256
  %v4_c9d4 = mul nuw nsw i32 %v1_c9cc, 256
  %v5_c9d4 = or i32 %v4_c9d4, %v3_c4e0
  %sext8 = mul i32 %v1_c4e4, 16777216
  %v4_c9f0 = sdiv i32 %sext8, 16777216
  %v1_caf8 = urem i32 %v6_c398, 2
  %tmp113 = sub nsw i32 0, %v1_caf8
  %v4_cb00 = and i32 %tmp113, 16
  %v1_cb2c = urem i32 %v6_c3d8, 2
  %tmp114 = sub nsw i32 0, %v1_cb2c
  %v4_cb34 = and i32 %tmp114, 4
  %v1_cb44 = urem i32 %v6_c3f8, 2
  %tmp115 = sub nsw i32 0, %v1_cb44
  %v3_cb4c = and i32 %tmp115, 2
  br label %dec_label_pc_c4f4.outer

dec_label_pc_c4f4.outer:                          ; preds = %.thread11, %dec_label_pc_c4d8
  %stack_var_-336.0.ph = phi i32 [ %v0_ca0c, %.thread11 ], [ %tmp, %dec_label_pc_c4d8 ]
  %stack_var_-56.0.ph = phi i32 [ %v0_c918, %.thread11 ], [ %tmp44, %dec_label_pc_c4d8 ]
  br label %dec_label_pc_c4f4

dec_label_pc_c4f4:                                ; preds = %dec_label_pc_c6b8, %dec_label_pc_c688, %dec_label_pc_c4f4.outer
  %stack_var_-56.0 = phi i32 [ %stack_var_-56.0.ph, %dec_label_pc_c4f4.outer ], [ %stack_var_-56.5, %dec_label_pc_c6b8 ], [ %v0_c918, %dec_label_pc_c688 ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 %v3_c4e0, i32* %lr.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c50c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c50c, i32* %r0.global-to-local, align 4
  %v7_c510 = icmp eq i32 %v3_c50c, -1
  store i1 %v7_c510, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c50c, i32* @r7, align 4
  br i1 %v7_c510, label %dec_label_pc_c6b8, label %dec_label_pc_c524

dec_label_pc_c524:                                ; preds = %dec_label_pc_c4f4, %dec_label_pc_c694
  %v0_c52c = phi i32 [ %v3_c6a8, %dec_label_pc_c694 ], [ %v3_c50c, %dec_label_pc_c4f4 ]
  %stack_var_-56.1 = phi i32 [ %v0_c918, %dec_label_pc_c694 ], [ %stack_var_-56.0, %dec_label_pc_c4f4 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c52c = call i32 (i32, i32, ...) @fcntl(i32 %v0_c52c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c534 = or i32 %v2_c52c, 2048
  store i32 %v1_c534, i32* %r2.global-to-local, align 4
  %v0_c538 = load i32, i32* @r7, align 4
  store i32 %v0_c538, i32* %r0.global-to-local, align 4
  %v2_c53c = call i32 (i32, i32, ...) @fcntl(i32 %v0_c538, i32 4)
  %v3_c540 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_c54c = mul i32 %v3_c540, 24
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_c560 = add i32 %v5_c54c, %arg3
  store i32 %v2_c560, i32* %r2.global-to-local, align 4
  %v1_c564 = add i32 %v2_c560, 20
  %v2_c564 = inttoptr i32 %v1_c564 to i8*
  %v3_c564 = load i8, i8* %v2_c564, align 1
  %v4_c564 = zext i8 %v3_c564 to i32
  store i32 %v4_c564, i32* %r3.global-to-local, align 4
  %v2_c568 = icmp ugt i8 %v3_c564, 30
  %v7_c568 = icmp eq i8 %v3_c564, 31
  store i1 %v7_c568, i1* %cpsr_z.global-to-local, align 1
  %v2_c56c = xor i1 %v7_c568, true
  %v3_c56c = and i1 %v2_c568, %v2_c56c
  br i1 %v3_c56c, label %bb, label %bb88

bb:                                               ; preds = %dec_label_pc_c524
  %v5_c56c = add i32 %v2_c560, 16
  %v6_c56c = inttoptr i32 %v5_c56c to i32*
  %v7_c56c = load i32, i32* %v6_c56c, align 4
  store i32 %v7_c56c, i32* %r3.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_c524, %bb
  %v4_c570 = phi i32 [ %v4_c564, %dec_label_pc_c524 ], [ %v7_c56c, %bb ]
  %v4_c570.stack_var_-56.1 = select i1 %v3_c56c, i32 %v4_c570, i32 %stack_var_-56.1
  %v2_c574 = xor i1 %v2_c568, true
  %v3_c574 = or i1 %v7_c568, %v2_c574
  br i1 %v3_c574, label %dec_label_pc_c858, label %dec_label_pc_c578

dec_label_pc_c578:                                ; preds = %bb88
  store i32 %v3_c480, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c8c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c8c4, label %dec_label_pc_c8cc, label %dec_label_pc_c58c

dec_label_pc_c58c:                                ; preds = %dec_label_pc_c858, %dec_label_pc_c578
  %stack_var_-56.3 = phi i32 [ %v2_c8b0, %dec_label_pc_c858 ], [ %v4_c570.stack_var_-56.1, %dec_label_pc_c578 ]
  store i32 %v3_c4dc, i32* %r0.global-to-local, align 4
  store i32 %v5_c594, i32* %r3.global-to-local, align 4
  store i32 %v1_c590, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c5a4

dec_label_pc_c5a4:                                ; preds = %dec_label_pc_c8cc, %dec_label_pc_c58c
  %stack_var_-57.0 = phi i8 [ %v1_c8d4, %dec_label_pc_c8cc ], [ %v1_c59c, %dec_label_pc_c58c ]
  %v0_c918 = phi i32 [ %stack_var_-56.6, %dec_label_pc_c8cc ], [ %stack_var_-56.3, %dec_label_pc_c58c ]
  %storemerge = phi i8 [ %v1_c8cc, %dec_label_pc_c8cc ], [ %v1_c5a0, %dec_label_pc_c58c ]
  store i32 %v2_c5a4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c5ac = load i32, i32* @r7, align 4
  store i32 %v0_c5ac, i32* %r0.global-to-local, align 4
  %v5_c5b0 = call i32 @connect(i32 %v0_c5ac, %sockaddr* %tmp85, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c5b8 = call i32 @time(i32* null)
  store i32 %v2_c5b8, i32* %r0.global-to-local, align 4
  store i32 %v1_c4e4, i32* %r1.global-to-local, align 4
  store i32 %v1_c5c8, i32* %r3.global-to-local, align 4
  store i32 %v5_c5d0, i32* @fp, align 4
  store i32 %v1_c5c8, i32* %r2.global-to-local, align 4
  store i32 %v2_c5b8, i32* %r4.global-to-local, align 4
  store i32 %v2_c5dc, i32* @r6, align 4
  %v9_c634 = icmp eq i32 %tmp39, %v0_c918
  %v4_c658 = zext i8 %storemerge to i32
  %v4_c65c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_c634 to i32
  %v9_c648 = icmp eq i1 %v9_c634, false
  %v4_c664 = mul nuw nsw i32 %v4_c65c, 256
  %v5_c664 = or i32 %v4_c658, %v4_c664
  %v9_c668 = icmp eq i32 %v5_c664, %v5_c660
  br label %dec_label_pc_c5f8

dec_label_pc_c5e8:                                ; preds = %.thread31, %dec_label_pc_c650, %dec_label_pc_c680, %bb91
  %v2_c5e8 = call i32 @time(i32* null)
  %v0_c5ec = load i32, i32* %r4.global-to-local, align 4
  %v2_c5ec = sub i32 %v2_c5e8, %v0_c5ec
  store i32 %v2_c5ec, i32* %r0.global-to-local, align 4
  %v7_c5f0 = icmp eq i32 %v2_c5ec, 10
  store i1 %v7_c5f0, i1* %cpsr_z.global-to-local, align 1
  %v8_c5f4 = icmp sgt i32 %v2_c5ec, 10
  br i1 %v8_c5f4, label %dec_label_pc_c694, label %dec_label_pc_c5f8

dec_label_pc_c5f8:                                ; preds = %dec_label_pc_c5e8, %dec_label_pc_c5a4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_c518, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c608 = load i32, i32* @r8, align 4
  store i32 %v0_c608, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  %v10_c618 = call i32 @recvfrom(i32 %v0_c608, i32* nonnull %stack_var_-332, i32 256, i32 16384, %sockaddr* %tmp87, i32* nonnull %stack_var_-44)
  store i32 %v10_c618, i32* %r2.global-to-local, align 4
  %v7_c620 = icmp eq i32 %v10_c618, -1
  store i1 %v7_c620, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_c620, label %dec_label_pc_c850, label %dec_label_pc_c62c

dec_label_pc_c62c:                                ; preds = %dec_label_pc_c5f8
  store i32 %v0_c918, i32* %lr.global-to-local, align 4
  store i32 %tmp39, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_c640 = icmp eq i32 %v10_c618, 40
  store i1 %v7_c640, i1* %cpsr_z.global-to-local, align 1
  %tmp116 = icmp ult i32 %v10_c618, 41
  br i1 %tmp116, label %.thread31, label %bb91

.thread31:                                        ; preds = %dec_label_pc_c62c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c5e8

bb91:                                             ; preds = %dec_label_pc_c62c
  store i1 %v9_c648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c648, label %dec_label_pc_c5e8, label %dec_label_pc_c650

dec_label_pc_c650:                                ; preds = %bb91
  store i32 %v4_c654, i32* %r1.global-to-local, align 4
  store i32 %v4_c658, i32* %ip.global-to-local, align 4
  store i32 %v4_c65c, i32* %r2.global-to-local, align 4
  store i32 %v5_c660, i32* %r3.global-to-local, align 4
  store i32 %v5_c664, i32* @r5, align 4
  store i1 %v9_c668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c668, label %dec_label_pc_c670, label %dec_label_pc_c5e8

dec_label_pc_c670:                                ; preds = %dec_label_pc_c650
  store i32 %v4_c670, i32* %r2.global-to-local, align 4
  store i32 %v1_c674, i32* %r3.global-to-local, align 4
  store i1 %v2_c678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c678, label %dec_label_pc_c90c, label %dec_label_pc_c680

dec_label_pc_c680:                                ; preds = %dec_label_pc_c670
  store i1 %v2_c680, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c680, label %dec_label_pc_c5e8, label %dec_label_pc_c688

dec_label_pc_c688:                                ; preds = %dec_label_pc_c680
  %v0_c688 = load i32, i32* @r7, align 4
  store i32 %v0_c688, i32* %r0.global-to-local, align 4
  %v1_c68c = call i32 @close(i32 %v0_c688)
  store i32 %v1_c68c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c4f4

dec_label_pc_c694:                                ; preds = %dec_label_pc_c5e8
  %v0_c694 = load i32, i32* @r7, align 4
  store i32 %v0_c694, i32* %r0.global-to-local, align 4
  %v1_c698 = call i32 @close(i32 %v0_c694)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c6a8 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c6a8, i32* %r0.global-to-local, align 4
  %v3_c6ac = icmp eq i32 %v3_c6a8, -1
  %v8_c6ac = icmp eq i32 %v3_c6a8, -1
  store i1 %v8_c6ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c6a8, i32* @r7, align 4
  br i1 %v3_c6ac, label %dec_label_pc_c6b8, label %dec_label_pc_c524

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c694, %dec_label_pc_c4f4
  %stack_var_-56.5 = phi i32 [ %stack_var_-56.0, %dec_label_pc_c4f4 ], [ %v0_c918, %dec_label_pc_c694 ]
  %v3_c6b8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v1_c28c, i32* %lr.global-to-local, align 4
  %v1_c6c0 = add i32 %v3_c6b8, 1
  store i32 %v1_c6c0, i32* %r3.global-to-local, align 4
  %v9_c6c4 = icmp eq i32 %v1_c6c0, %v1_c28c
  store i1 %v9_c6c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c6c0, i32* %stack_var_-40, align 4
  %v5_c6cc = icmp slt i32 %v1_c6c0, %v1_c28c
  br i1 %v5_c6cc, label %dec_label_pc_c4f4, label %dec_label_pc_c6d0.preheader

dec_label_pc_c6d0.preheader:                      ; preds = %.thread11, %dec_label_pc_c6b8, %dec_label_pc_c4bc.dec_label_pc_c6d0.preheader_crit_edge
  %v1_c704.pre-phi = phi i32 [ %.pre, %dec_label_pc_c4bc.dec_label_pc_c6d0.preheader_crit_edge ], [ %v1_c4e4, %dec_label_pc_c6b8 ], [ %v1_c4e4, %.thread11 ]
  %v1_c6e8 = add i32 %v6_c438, 20
  %v3_c6ec = mul i32 %v1_c6e8, 65536
  %tmp93 = mul i32 %v1_c6e8, 256
  %v1_c6f4 = and i32 %tmp93, 65280
  %tmp94 = udiv i32 %v1_c6e8, 256
  %v4_c6f8 = urem i32 %tmp94, 256
  %v5_c6f8 = or i32 %v4_c6f8, %v1_c6f4
  %v2_c828 = icmp eq i32 %v1_c458, 0
  %v3_c814 = icmp eq i32 %v3_c4c4, 65535
  br label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c6d0.preheader, %dec_label_pc_c8f4
  store i32 %v1_c28c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_c4c8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c4c8, label %dec_label_pc_c8f4, label %dec_label_pc_c6e4

dec_label_pc_c6e4:                                ; preds = %dec_label_pc_c6d0
  store i32 %v1_c6e8, i32* @sl, align 4
  store i32 %v3_c6ec, i32* %r2.global-to-local, align 4
  store i32 %v5_c6f8, i32* @fp, align 4
  store i32 %v6_c438, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_c704.pre-phi, i32* @sb, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c800

dec_label_pc_c710:                                ; preds = %dec_label_pc_c824, %dec_label_pc_c838
  %v0_c710 = load i32, i32* @r7, align 4
  %v1_c710 = trunc i32 %v0_c710 to i8
  %v2_c710 = load i32, i32* @r4, align 4
  %v3_c710 = add i32 %v2_c710, 10
  %v4_c710 = inttoptr i32 %v3_c710 to i8*
  store i8 %v1_c710, i8* %v4_c710, align 1
  %v0_c714 = load i32, i32* @r7, align 4
  %v1_c714 = trunc i32 %v0_c714 to i8
  %v2_c714 = load i32, i32* @r4, align 4
  %v3_c714 = add i32 %v2_c714, 11
  %v4_c714 = inttoptr i32 %v3_c714 to i8*
  store i8 %v1_c714, i8* %v4_c714, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c71c = load i32, i32* @r4, align 4
  store i32 %v0_c71c, i32* @r0, align 4
  %v2_c720 = call i32 @function_f188(i32 %v0_c71c, i32 20)
  %v3_c720 = trunc i32 %v2_c720 to i8
  store i32 %v2_c720, i32* %r0.global-to-local, align 4
  %v3_c724 = load i32, i32* %stack_var_-40, align 4
  store i32 %v4_c2b8, i32* %r2.global-to-local, align 4
  %v3_c72c = mul i32 %v3_c724, 16
  %v2_c730 = add i32 %v3_c72c, %v4_c2b8
  store i32 %v2_c730, i32* %r1.global-to-local, align 4
  %v1_c734 = add i32 %v2_c730, 4
  %v2_c734 = inttoptr i32 %v1_c734 to i32*
  %v3_c734 = load i32, i32* %v2_c734, align 4
  %v3_c738 = mul i32 %v3_c734, 65536
  store i32 %v3_c738, i32* %ip.global-to-local, align 4
  %tmp95 = mul i32 %v3_c734, 256
  %v1_c740 = and i32 %tmp95, 65280
  %tmp96 = udiv i32 %v3_c734, 256
  %v4_c744 = urem i32 %tmp96, 256
  %v5_c744 = or i32 %v4_c744, %v1_c740
  store i32 %v5_c744, i32* %r2.global-to-local, align 4
  %v1_c748 = add i32 %v3_c734, 1
  store i32 %v1_c748, i32* %r3.global-to-local, align 4
  store i32 %v1_c748, i32* %v2_c734, align 4
  %v0_c750 = load i32, i32* %r2.global-to-local, align 4
  %v1_c750 = load i32, i32* @r5, align 4
  %v2_c750 = add i32 %v1_c750, 4
  %v3_c750 = inttoptr i32 %v2_c750 to i32*
  store i32 %v0_c750, i32* %v3_c750, align 4
  %v0_c754 = load i32, i32* %r1.global-to-local, align 4
  %v1_c754 = add i32 %v0_c754, 8
  %v2_c754 = inttoptr i32 %v1_c754 to i32*
  %v3_c754 = load i32, i32* %v2_c754, align 4
  %tmp97 = mul i32 %v3_c754, 256
  %v1_c760 = and i32 %tmp97, 65280
  %tmp98 = udiv i32 %v3_c754, 256
  %v4_c764 = urem i32 %tmp98, 256
  %v5_c764 = or i32 %v4_c764, %v1_c760
  store i32 %v5_c764, i32* %r2.global-to-local, align 4
  %v4_c76834 = udiv i32 %v2_c720, 256
  %v1_c76c = trunc i32 %v4_c76834 to i8
  %v2_c76c = load i32, i32* @r4, align 4
  %v3_c76c = add i32 %v2_c76c, 11
  %v4_c76c = inttoptr i32 %v3_c76c to i8*
  store i8 %v1_c76c, i8* %v4_c76c, align 1
  %v3_c770 = load i32, i32* @r4, align 4
  %v4_c770 = add i32 %v3_c770, 10
  %v5_c770 = inttoptr i32 %v4_c770 to i8*
  store i8 %v3_c720, i8* %v5_c770, align 1
  %v0_c774 = load i32, i32* %r2.global-to-local, align 4
  %v1_c774 = load i32, i32* @r5, align 4
  %v2_c774 = add i32 %v1_c774, 8
  %v3_c774 = inttoptr i32 %v2_c774 to i32*
  store i32 %v0_c774, i32* %v3_c774, align 4
  %v0_c778 = load i32, i32* @r5, align 4
  store i32 %v0_c778, i32* @r1, align 4
  %v0_c77c = load i32, i32* @fp, align 4
  store i32 %v0_c77c, i32* %r2.global-to-local, align 4
  %v0_c780 = load i32, i32* @sl, align 4
  store i32 %v0_c780, i32* %r3.global-to-local, align 4
  %v0_c784 = load i32, i32* @r4, align 4
  store i32 %v0_c784, i32* %r0.global-to-local, align 4
  %v0_c788 = load i32, i32* @r7, align 4
  %v1_c788 = trunc i32 %v0_c788 to i8
  %v3_c788 = add i32 %v0_c778, 16
  %v4_c788 = inttoptr i32 %v3_c788 to i8*
  store i8 %v1_c788, i8* %v4_c788, align 1
  %v0_c78c = load i32, i32* @r7, align 4
  %v1_c78c = trunc i32 %v0_c78c to i8
  %v2_c78c = load i32, i32* @r5, align 4
  %v3_c78c = add i32 %v2_c78c, 17
  %v4_c78c = inttoptr i32 %v3_c78c to i8*
  store i8 %v1_c78c, i8* %v4_c78c, align 1
  %v4_c790 = call i32 @function_f1e4(i32 %v0_c784, i32 %v0_c778, i32 %v0_c77c, i32 %v0_c780)
  %v5_c790 = trunc i32 %v4_c790 to i8
  store i32 %v4_c790, i32* %r0.global-to-local, align 4
  %v4_c79435 = udiv i32 %v4_c790, 256
  %v1_c798 = trunc i32 %v4_c79435 to i8
  %v2_c798 = load i32, i32* @r5, align 4
  %v3_c798 = add i32 %v2_c798, 17
  %v4_c798 = inttoptr i32 %v3_c798 to i8*
  store i8 %v1_c798, i8* %v4_c798, align 1
  %v3_c79c = load i32, i32* @r5, align 4
  %v4_c79c = add i32 %v3_c79c, 16
  %v5_c79c = inttoptr i32 %v4_c79c to i8*
  store i8 %v5_c790, i8* %v5_c79c, align 1
  %v3_c7a0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7a0, i32* %r3.global-to-local, align 4
  %v0_c7a4 = load i32, i32* @r4, align 4
  %v1_c7a4 = add i32 %v0_c7a4, 20
  %v2_c7a4 = inttoptr i32 %v1_c7a4 to i32*
  %v3_c7a4 = load i32, i32* %v2_c7a4, align 4
  %v5_c7ac = mul i32 %v3_c7a0, 24
  %v3_c7b4 = udiv i32 %v3_c7a4, 65536
  store i32 %v3_c7b4, i32* %r2.global-to-local, align 4
  %v2_c7b8 = add i32 %v5_c7ac, %arg3
  store i32 %v2_c7b8, i32* %ip.global-to-local, align 4
  %v3_c7bc6 = udiv i32 %v3_c7a4, 16777216
  %v1_c7c0 = trunc i32 %v3_c7bc6 to i8
  %v3_c7c0 = add i32 %v2_c7b8, 3
  %v4_c7c0 = inttoptr i32 %v3_c7c0 to i8*
  store i8 %v1_c7c0, i8* %v4_c7c0, align 1
  %v0_c7c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c7c4 = trunc i32 %v0_c7c4 to i8
  %v2_c7c4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c7c4 = add i32 %v2_c7c4, 2
  %v4_c7c4 = inttoptr i32 %v3_c7c4 to i8*
  store i8 %v1_c7c4, i8* %v4_c7c4, align 1
  %v0_c7c8 = load i32, i32* @r4, align 4
  store i32 %v0_c7c8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c7d0 = load i32, i32* @r8, align 4
  store i32 %v0_c7d0, i32* %r0.global-to-local, align 4
  %v0_c7d4 = load i32, i32* @sb, align 4
  store i32 %v0_c7d4, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_c7dc = load i32, i32* %ip.global-to-local, align 4
  %v4_c7dc = inttoptr i32 %v0_c7dc to %sockaddr*
  %v7_c7e4 = inttoptr i32 %v0_c7c8 to i32*
  %v9_c7e4 = call i32 @sendto(i32 %v0_c7d0, i32* %v7_c7e4, i32 %v0_c7d4, i32 16384, %sockaddr* %v4_c7dc, i32 16)
  %v3_c7e8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7e8, i32* %r3.global-to-local, align 4
  store i32 %v1_c28c, i32* %ip.global-to-local, align 4
  %v1_c7f0 = add i32 %v3_c7e8, 1
  store i32 %v1_c7f0, i32* %r0.global-to-local, align 4
  %v9_c7f4 = icmp eq i32 %v1_c7f0, %v1_c28c
  store i1 %v9_c7f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c7f0, i32* %stack_var_-40, align 4
  %v6_c7fc = icmp slt i32 %v1_c7f0, %v1_c28c
  br i1 %v6_c7fc, label %dec_label_pc_c800, label %dec_label_pc_c8f4

dec_label_pc_c800:                                ; preds = %dec_label_pc_c710, %dec_label_pc_c6e4
  %v1_c80c = phi i32 [ %v1_c7f0, %dec_label_pc_c710 ], [ 0, %dec_label_pc_c6e4 ]
  store i32 %v4_c2c8, i32* %ip.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c4c4, i32* %lr.global-to-local, align 4
  %v4_c80c = mul i32 %v1_c80c, 4
  %v5_c80c = add i32 %v4_c80c, %v4_c2c8
  %v6_c80c = inttoptr i32 %v5_c80c to i32*
  %v7_c80c = load i32, i32* %v6_c80c, align 4
  store i32 %v7_c80c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c814, i1* %cpsr_z.global-to-local, align 1
  %v1_c818 = add i32 %v7_c80c, 40
  store i32 %v1_c818, i32* @r6, align 4
  %v1_c81c = add i32 %v7_c80c, 20
  store i32 %v1_c81c, i32* @r5, align 4
  br i1 %v3_c814, label %dec_label_pc_c8e0, label %dec_label_pc_c824

dec_label_pc_c824:                                ; preds = %dec_label_pc_c800, %dec_label_pc_c8e0
  %v0_c830 = phi i32 [ %v1_c818, %dec_label_pc_c800 ], [ %v0_c830.pre, %dec_label_pc_c8e0 ]
  store i1 %v2_c828, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_c438, i32* %r1.global-to-local, align 4
  store i32 %v0_c830, i32* %r0.global-to-local, align 4
  br i1 %v2_c828, label %dec_label_pc_c710, label %dec_label_pc_c838

dec_label_pc_c838:                                ; preds = %dec_label_pc_c824
  %v2_c838 = call i32 @function_10668(i32 %v0_c830, i32 %v6_c438)
  store i32 %v2_c838, i32* %r0.global-to-local, align 4
  store i32 %v6_c438, i32* %r1.global-to-local, align 4
  %v0_c840 = load i32, i32* @r7, align 4
  %v1_c840 = trunc i32 %v0_c840 to i8
  %v2_c840 = load i32, i32* @r6, align 4
  %v4_c840 = add i32 %v2_c840, %v6_c438
  %v5_c840 = inttoptr i32 %v4_c840 to i8*
  store i8 %v1_c840, i8* %v5_c840, align 1
  br label %dec_label_pc_c710

dec_label_pc_c848:                                ; preds = %dec_label_pc_c494
  %v0_c848 = load i32, i32* @r8, align 4
  store i32 %v0_c848, i32* %r0.global-to-local, align 4
  %v1_c84c = call i32 @close(i32 %v0_c848)
  store i32 %v1_c84c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c850

dec_label_pc_c850:                                ; preds = %dec_label_pc_c5f8, %dec_label_pc_c8f4, %dec_label_pc_c288, %dec_label_pc_c848
  %v29_c854 = phi i32 [ %v3_c47c, %dec_label_pc_c288 ], [ %v1_c84c, %dec_label_pc_c848 ], [ %v2_c8f8, %dec_label_pc_c8f4 ], [ 0, %dec_label_pc_c5f8 ]
  store i32 %v3_c288, i32* %r4.global-to-local, align 4
  store i32 %v18_c288, i32* %sb.global-to-local, align 4
  ret i32 %v29_c854

dec_label_pc_c858:                                ; preds = %bb88
  %v1_c858 = add i32 %v2_c560, 16
  %v2_c858 = inttoptr i32 %v1_c858 to i32*
  %v3_c858 = load i32, i32* %v2_c858, align 4
  store i32 %v3_c858, i32* %r4.global-to-local, align 4
  %v0_c85c = call i32 @function_105b4()
  store i32 %v0_c85c, i32* %r0.global-to-local, align 4
  %v3_c860 = load i32, i32* %stack_var_-40, align 4
  %v5_c868 = mul i32 %v3_c860, 24
  %v2_c874 = add i32 %v5_c868, %arg3
  store i32 %v2_c874, i32* %r1.global-to-local, align 4
  %v1_c870 = udiv i32 %v3_c858, 256
  %v3_c878 = and i32 %v1_c870, 65280
  store i32 %v3_c878, i32* %r2.global-to-local, align 4
  %v1_c87c = and i32 %v3_c858, 65280
  store i32 %v1_c87c, i32* %r3.global-to-local, align 4
  %v3_c880 = mul i32 %v3_c858, 16777216
  %v4_c884 = mul nuw nsw i32 %v1_c87c, 256
  %v5_c884 = or i32 %v4_c884, %v3_c880
  store i32 %v5_c884, i32* %ip.global-to-local, align 4
  %v1_c888 = add i32 %v2_c874, 20
  %v2_c888 = inttoptr i32 %v1_c888 to i8*
  %v3_c888 = load i8, i8* %v2_c888, align 1
  %v4_c888 = zext i8 %v3_c888 to i32
  store i32 %v4_c888, i32* %lr.global-to-local, align 4
  %v2_c890 = call i32 @llvm.bswap.i32(i32 %v3_c858)
  %v7_c894 = lshr i32 %v0_c85c, %v4_c888
  %v8_c894 = add i32 %v7_c894, %v2_c890
  store i32 %v8_c894, i32* %r2.global-to-local, align 4
  %v3_c8a0 = mul i32 %v8_c894, 16777216
  %v1_c8a4 = and i32 %v8_c894, 65280
  store i32 %v1_c8a4, i32* %r0.global-to-local, align 4
  %v4_c8a8 = mul nuw nsw i32 %v1_c8a4, 256
  %v5_c8a8 = or i32 %v4_c8a8, %v3_c8a0
  store i32 %v5_c8a8, i32* %r1.global-to-local, align 4
  %v2_c8b0 = call i32 @llvm.bswap.i32(i32 %v8_c894)
  store i32 %v3_c480, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c8c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c8c4, label %dec_label_pc_c8cc, label %dec_label_pc_c58c

dec_label_pc_c8cc:                                ; preds = %dec_label_pc_c858, %dec_label_pc_c578
  %stack_var_-56.6 = phi i32 [ %v2_c8b0, %dec_label_pc_c858 ], [ %v4_c570.stack_var_-56.1, %dec_label_pc_c578 ]
  %v0_c8cc = call i32 @function_105b4()
  %v1_c8cc = trunc i32 %v0_c8cc to i8
  store i32 %v0_c8cc, i32* %r0.global-to-local, align 4
  %v4_c8d0 = sdiv i32 %v0_c8cc, 256
  store i32 %v4_c8d0, i32* %r3.global-to-local, align 4
  %v1_c8d4 = trunc i32 %v4_c8d0 to i8
  br label %dec_label_pc_c5a4

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c800
  %v0_c8e0 = call i32 @function_105b4()
  %v1_c8e0 = trunc i32 %v0_c8e0 to i8
  store i32 %v0_c8e0, i32* %r0.global-to-local, align 4
  %v4_c8e4 = sdiv i32 %v0_c8e0, 256
  store i32 %v4_c8e4, i32* %r3.global-to-local, align 4
  %v1_c8e8 = trunc i32 %v4_c8e4 to i8
  %v2_c8e8 = load i32, i32* @r4, align 4
  %v3_c8e8 = add i32 %v2_c8e8, 5
  %v4_c8e8 = inttoptr i32 %v3_c8e8 to i8*
  store i8 %v1_c8e8, i8* %v4_c8e8, align 1
  %v3_c8ec = load i32, i32* @r4, align 4
  %v4_c8ec = add i32 %v3_c8ec, 4
  %v5_c8ec = inttoptr i32 %v4_c8ec to i8*
  store i8 %v1_c8e0, i8* %v5_c8ec, align 1
  %v0_c830.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c824

dec_label_pc_c8f4:                                ; preds = %dec_label_pc_c710, %dec_label_pc_c6d0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c8f8 = call i32 @time(i32* null)
  store i32 %v2_c8f8, i32* %r0.global-to-local, align 4
  store i32 %v2_c468, i32* %lr.global-to-local, align 4
  %v9_c900 = icmp eq i32 %v2_c468, %v2_c8f8
  store i1 %v9_c900, i1* %cpsr_z.global-to-local, align 1
  %v6_c904 = icmp slt i32 %v2_c468, %v2_c8f8
  br i1 %v6_c904, label %dec_label_pc_c850, label %dec_label_pc_c6d0

dec_label_pc_c90c:                                ; preds = %dec_label_pc_c670
  %v3_c90c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c90c, i32* %r4.global-to-local, align 4
  store i32 %v4_c2b8, i32* %r0.global-to-local, align 4
  %v3_c914 = mul i32 %v3_c90c, 16
  store i32 %v3_c914, i32* %ip.global-to-local, align 4
  %v3_c918 = add i32 %v3_c914, %v4_c2b8
  %v4_c918 = inttoptr i32 %v3_c918 to i32*
  store i32 %v0_c918, i32* %v4_c918, align 4
  store i32 %stack_var_-336.0.ph, i32* %r1.global-to-local, align 4
  %v1_c920 = add i32 %stack_var_-336.0.ph, 4
  %v2_c920 = inttoptr i32 %v1_c920 to i32*
  %v3_c920 = load i32, i32* %v2_c920, align 4
  store i32 %v3_c920, i32* %r0.global-to-local, align 4
  %v1_c928 = and i32 %v3_c920, 65280
  store i32 %v1_c928, i32* %r1.global-to-local, align 4
  %v2_c93c = call i32 @llvm.bswap.i32(i32 %v3_c920)
  store i32 %v4_c2b8, i32* %r2.global-to-local, align 4
  %v1_c944 = load i32, i32* %ip.global-to-local, align 4
  %v2_c944 = add i32 %v1_c944, %v4_c2b8
  store i32 %v2_c944, i32* %ip.global-to-local, align 4
  %v2_c948 = add i32 %v2_c944, 4
  %v3_c948 = inttoptr i32 %v2_c948 to i32*
  store i32 %v2_c93c, i32* %v3_c948, align 4
  store i32 %stack_var_-336.0.ph, i32* %r3.global-to-local, align 4
  %v1_c950 = add i32 %stack_var_-336.0.ph, 8
  %v2_c950 = inttoptr i32 %v1_c950 to i32*
  %v3_c950 = load i32, i32* %v2_c950, align 4
  store i32 %v3_c950, i32* %r0.global-to-local, align 4
  %v1_c958 = and i32 %v3_c950, 65280
  store i32 %v1_c958, i32* %r1.global-to-local, align 4
  %v3_c95c = mul i32 %v3_c950, 16777216
  %v4_c964 = mul nuw nsw i32 %v1_c958, 256
  %v5_c964 = or i32 %v4_c964, %v3_c95c
  store i32 %v5_c964, i32* %r2.global-to-local, align 4
  %v2_c96c = call i32 @llvm.bswap.i32(i32 %v3_c950)
  store i32 %v2_c96c, i32* %r3.global-to-local, align 4
  %v1_c970 = load i32, i32* %ip.global-to-local, align 4
  %v2_c970 = add i32 %v1_c970, 8
  %v3_c970 = inttoptr i32 %v2_c970 to i32*
  store i32 %v2_c96c, i32* %v3_c970, align 4
  store i32 %stack_var_-336.0.ph, i32* %lr.global-to-local, align 4
  %v1_c978 = inttoptr i32 %stack_var_-336.0.ph to i32*
  %v2_c978 = load i32, i32* %v1_c978, align 4
  %v3_c97c = udiv i32 %v2_c978, 65536
  store i32 %v3_c97c, i32* %r2.global-to-local, align 4
  %v3_c9807 = udiv i32 %v2_c978, 16777216
  store i32 %v3_c9807, i32* %r1.global-to-local, align 4
  %v0_c984 = load i32, i32* @r5, align 4
  %v3_c984 = sdiv i32 %v0_c984, 256
  store i32 %v3_c984, i32* %r3.global-to-local, align 4
  %v1_c988 = trunc i32 %v3_c984 to i8
  %v2_c988 = load i32, i32* %ip.global-to-local, align 4
  %v3_c988 = add i32 %v2_c988, 15
  %v4_c988 = inttoptr i32 %v3_c988 to i8*
  store i8 %v1_c988, i8* %v4_c988, align 1
  %v0_c98c = load i32, i32* %r1.global-to-local, align 4
  %v1_c98c = trunc i32 %v0_c98c to i8
  %v2_c98c = load i32, i32* %ip.global-to-local, align 4
  %v3_c98c = add i32 %v2_c98c, 13
  %v4_c98c = inttoptr i32 %v3_c98c to i8*
  store i8 %v1_c98c, i8* %v4_c98c, align 1
  %v0_c990 = load i32, i32* %r2.global-to-local, align 4
  %v1_c990 = trunc i32 %v0_c990 to i8
  %v2_c990 = load i32, i32* %ip.global-to-local, align 4
  %v3_c990 = add i32 %v2_c990, 12
  %v4_c990 = inttoptr i32 %v3_c990 to i8*
  store i8 %v1_c990, i8* %v4_c990, align 1
  %v0_c994 = load i32, i32* @r5, align 4
  %v1_c994 = trunc i32 %v0_c994 to i8
  %v2_c994 = load i32, i32* %ip.global-to-local, align 4
  %v3_c994 = add i32 %v2_c994, 14
  %v4_c994 = inttoptr i32 %v3_c994 to i8*
  store i8 %v1_c994, i8* %v4_c994, align 1
  store i32 %v1_c4e4, i32* %r0.global-to-local, align 4
  %v1_c99c = call i32* @malloc(i32 %v1_c4e4)
  %v3_c99c = ptrtoint i32* %v1_c99c to i32
  store i32 %v3_c99c, i32* %r0.global-to-local, align 4
  store i32 %v4_c2c8, i32* %r1.global-to-local, align 4
  %v3_c9a4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c9a4, i32* %r2.global-to-local, align 4
  %v2_c9a8 = load i32, i32* %r4.global-to-local, align 4
  %v5_c9a8 = mul i32 %v2_c9a8, 4
  %v6_c9a8 = add i32 %v5_c9a8, %v4_c2c8
  %v7_c9a8 = inttoptr i32 %v6_c9a8 to i32*
  store i32 %v3_c99c, i32* %v7_c9a8, align 4
  %v0_c9ac = load i32, i32* %r1.global-to-local, align 4
  %v1_c9ac = load i32, i32* %r2.global-to-local, align 4
  %v4_c9ac = mul i32 %v1_c9ac, 4
  %v5_c9ac = add i32 %v4_c9ac, %v0_c9ac
  %v6_c9ac = inttoptr i32 %v5_c9ac to i32*
  %v7_c9ac = load i32, i32* %v6_c9ac, align 4
  store i32 %v7_c9ac, i32* %r0.global-to-local, align 4
  %v1_c9b0 = inttoptr i32 %v7_c9ac to i8*
  %v2_c9b0 = load i8, i8* %v1_c9b0, align 1
  %tmp117 = urem i8 %v2_c9b0, 16
  %v1_c9b4 = zext i8 %tmp117 to i32
  %v1_c9b8 = or i32 %v1_c9b4, 64
  store i32 %v1_c9b8, i32* %r3.global-to-local, align 4
  %v1_c9bc = trunc i32 %v1_c9b8 to i8
  store i8 %v1_c9bc, i8* %v1_c9b0, align 1
  store i32 %v3_c4c4, i32* %ip.global-to-local, align 4
  %v0_c9c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_c9c4 = inttoptr i32 %v0_c9c4 to i8*
  %v2_c9c4 = load i8, i8* %v1_c9c4, align 1
  %v1_c9d0 = and i8 %v2_c9c4, -16
  store i32 %v5_c9d4, i32* %r3.global-to-local, align 4
  %v1_c9d8 = or i8 %v1_c9d0, 5
  store i32 %v4_c9dc, i32* %ip.global-to-local, align 4
  store i32 %v1_c9cc, i32* %r1.global-to-local, align 4
  store i8 %v1_c9d8, i8* %v1_c9c4, align 1
  %v0_c9e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c9e8 = trunc i32 %v0_c9e8 to i8
  %v2_c9e8 = load i32, i32* %r0.global-to-local, align 4
  %v3_c9e8 = add i32 %v2_c9e8, 5
  %v4_c9e8 = inttoptr i32 %v3_c9e8 to i8*
  store i8 %v1_c9e8, i8* %v4_c9e8, align 1
  store i32 %v4_c9ec, i32* %r1.global-to-local, align 4
  store i32 %v4_c9f0, i32* %lr.global-to-local, align 4
  %v2_c9f4 = load i32, i32* %r0.global-to-local, align 4
  %v3_c9f4 = add i32 %v2_c9f4, 1
  %v4_c9f4 = inttoptr i32 %v3_c9f4 to i8*
  store i8 %v5_c300, i8* %v4_c9f4, align 1
  store i32 %v4_c9f8, i32* %r2.global-to-local, align 4
  %v0_c9fc = load i32, i32* %ip.global-to-local, align 4
  %v2_c9fc = icmp eq i32 %v0_c9fc, 0
  store i1 %v2_c9fc, i1* %cpsr_z.global-to-local, align 1
  %v0_ca00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca00 = trunc i32 %v0_ca00 to i8
  %v2_ca00 = load i32, i32* %r0.global-to-local, align 4
  %v3_ca00 = add i32 %v2_ca00, 4
  %v4_ca00 = inttoptr i32 %v3_ca00 to i8*
  store i8 %v1_ca00, i8* %v4_ca00, align 1
  %v0_ca04 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca04 = add i32 %v0_ca04, 20
  store i32 %v1_ca04, i32* %r3.global-to-local, align 4
  %v0_ca08 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca08 = trunc i32 %v0_ca08 to i8
  %v3_ca08 = add i32 %v0_ca04, 8
  %v4_ca08 = inttoptr i32 %v3_ca08 to i8*
  store i8 %v1_ca08, i8* %v4_ca08, align 1
  %v0_ca0c = load i32, i32* %r3.global-to-local, align 4
  %v0_ca10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca10, label %.thread10, label %bb100

bb100:                                            ; preds = %dec_label_pc_c90c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ca14 = load i32, i32* %r0.global-to-local, align 4
  %v4_ca14 = add i32 %v3_ca14, 6
  %v5_ca14 = inttoptr i32 %v4_ca14 to i8*
  store i8 64, i8* %v5_ca14, align 1
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_c90c, %bb100
  %v2_ca1c = load i32, i32* %r0.global-to-local, align 4
  %v3_ca1c = add i32 %v2_ca1c, 9
  %v4_ca1c = inttoptr i32 %v3_ca1c to i8*
  store i8 6, i8* %v4_ca1c, align 1
  %v2_ca24 = load i32, i32* @global_var_1c21c.133, align 4
  store i32 %v2_ca24, i32* %r3.global-to-local, align 4
  %v1_ca28 = load i32, i32* %r0.global-to-local, align 4
  %v2_ca28 = add i32 %v1_ca28, 12
  %v3_ca28 = inttoptr i32 %v2_ca28 to i32*
  store i32 %v2_ca24, i32* %v3_ca28, align 4
  %v0_ca2c = load i32, i32* %lr.global-to-local, align 4
  %v1_ca2c = trunc i32 %v0_ca2c to i8
  %v2_ca2c = load i32, i32* %r0.global-to-local, align 4
  %v3_ca2c = add i32 %v2_ca2c, 3
  %v4_ca2c = inttoptr i32 %v3_ca2c to i8*
  store i8 %v1_ca2c, i8* %v4_ca2c, align 1
  %v3_ca30 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca30, i32* %r2.global-to-local, align 4
  store i32 %v4_c2b8, i32* %lr.global-to-local, align 4
  %v4_ca38 = mul i32 %v3_ca30, 16
  %v5_ca38 = add i32 %v4_ca38, %v4_c2b8
  %v6_ca38 = inttoptr i32 %v5_ca38 to i32*
  %v7_ca38 = load i32, i32* %v6_ca38, align 4
  store i32 %v7_ca38, i32* %r3.global-to-local, align 4
  %v0_ca3c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca3c, label %.thread11, label %bb101

bb101:                                            ; preds = %.thread10
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_ca40 = load i32, i32* %r0.global-to-local, align 4
  %v4_ca40 = add i32 %v3_ca40, 7
  %v5_ca40 = inttoptr i32 %v4_ca40 to i8*
  store i8 0, i8* %v5_ca40, align 1
  br label %.thread11

.thread11:                                        ; preds = %.thread10, %bb101
  %v0_ca44 = load i32, i32* @fp, align 4
  %v1_ca44 = trunc i32 %v0_ca44 to i8
  %v2_ca44 = load i32, i32* %r0.global-to-local, align 4
  %v3_ca44 = add i32 %v2_ca44, 2
  %v4_ca44 = inttoptr i32 %v3_ca44 to i8*
  store i8 %v1_ca44, i8* %v4_ca44, align 1
  %v0_ca48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca48 = load i32, i32* %r0.global-to-local, align 4
  %v2_ca48 = add i32 %v1_ca48, 16
  %v3_ca48 = inttoptr i32 %v2_ca48 to i32*
  store i32 %v0_ca48, i32* %v3_ca48, align 4
  %v0_ca4c = load i32, i32* %r2.global-to-local, align 4
  %v3_ca4c = mul i32 %v0_ca4c, 16
  %v1_ca50 = load i32, i32* %lr.global-to-local, align 4
  %v2_ca50 = add i32 %v1_ca50, %v3_ca4c
  store i32 %v2_ca50, i32* %r2.global-to-local, align 4
  %v1_ca54 = add i32 %v2_ca50, 13
  %v2_ca54 = inttoptr i32 %v1_ca54 to i8*
  %v3_ca54 = load i8, i8* %v2_ca54, align 1
  %v4_ca54 = zext i8 %v3_ca54 to i32
  store i32 %v4_ca54, i32* %r1.global-to-local, align 4
  %v1_ca58 = add i32 %v2_ca50, 12
  %v2_ca58 = inttoptr i32 %v1_ca58 to i8*
  %v3_ca58 = load i8, i8* %v2_ca58, align 1
  %v4_ca58 = zext i8 %v3_ca58 to i32
  %v4_ca5c = mul nuw nsw i32 %v4_ca54, 256
  %v5_ca5c = or i32 %v4_ca58, %v4_ca5c
  store i32 %v5_ca5c, i32* %r3.global-to-local, align 4
  %v0_ca60 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca60 = add i32 %v0_ca60, 40
  store i32 %v1_ca60, i32* @r4, align 4
  %v3_ca64 = add i32 %v0_ca60, 20
  %v4_ca64 = inttoptr i32 %v3_ca64 to i8*
  store i8 %v3_ca58, i8* %v4_ca64, align 1
  store i32 %v0_ca0c, i32* %r0.global-to-local, align 4
  %v0_ca6c = load i32, i32* %r3.global-to-local, align 4
  %v3_ca6c = sdiv i32 %v0_ca6c, 256
  store i32 %v3_ca6c, i32* %r3.global-to-local, align 4
  %v1_ca70 = trunc i32 %v3_ca6c to i8
  %v3_ca70 = add i32 %v0_ca0c, 1
  %v4_ca70 = inttoptr i32 %v3_ca70 to i8*
  store i8 %v1_ca70, i8* %v4_ca70, align 1
  %v0_ca74 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca74 = add i32 %v0_ca74, 8
  %v2_ca74 = inttoptr i32 %v1_ca74 to i32*
  %v3_ca74 = load i32, i32* %v2_ca74, align 4
  store i32 %v3_ca74, i32* %r1.global-to-local, align 4
  store i32 %v0_ca0c, i32* %lr.global-to-local, align 4
  %v0_ca7c = load i32, i32* %r0.global-to-local, align 4
  %v1_ca7c = add i32 %v0_ca7c, 13
  %v2_ca7c = inttoptr i32 %v1_ca7c to i8*
  %v3_ca7c = load i8, i8* %v2_ca7c, align 1
  %v4_ca7c = zext i8 %v3_ca7c to i32
  store i32 %v4_ca7c, i32* %r3.global-to-local, align 4
  %v1_ca80 = add i32 %v0_ca74, 15
  %v2_ca80 = inttoptr i32 %v1_ca80 to i8*
  %v3_ca80 = load i8, i8* %v2_ca80, align 1
  %v4_ca80 = zext i8 %v3_ca80 to i32
  store i32 %v4_ca80, i32* %ip.global-to-local, align 4
  %v1_ca84 = add i32 %v0_ca74, 14
  %v2_ca84 = inttoptr i32 %v1_ca84 to i8*
  %v3_ca84 = load i8, i8* %v2_ca84, align 1
  %v4_ca84 = zext i8 %v3_ca84 to i32
  store i32 %v4_ca84, i32* %r0.global-to-local, align 4
  %v2_ca88 = add i32 %v0_ca0c, 4
  %v3_ca88 = inttoptr i32 %v2_ca88 to i32*
  store i32 %v3_ca74, i32* %v3_ca88, align 4
  store i32 %v0_ca0c, i32* %r1.global-to-local, align 4
  %v0_ca90 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca90 = or i32 %v0_ca90, 1
  store i32 %v1_ca90, i32* %r3.global-to-local, align 4
  %v0_ca94 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca94 = add i32 %v0_ca94, 4
  %v2_ca94 = inttoptr i32 %v1_ca94 to i32*
  %v3_ca94 = load i32, i32* %v2_ca94, align 4
  store i32 %v3_ca94, i32* %lr.global-to-local, align 4
  %v1_ca98 = trunc i32 %v1_ca90 to i8
  %v3_ca98 = add i32 %v0_ca0c, 13
  %v4_ca98 = inttoptr i32 %v3_ca98 to i8*
  store i8 %v1_ca98, i8* %v4_ca98, align 1
  %v0_ca9c = load i32, i32* %r1.global-to-local, align 4
  %v1_ca9c = add i32 %v0_ca9c, 12
  %v2_ca9c = inttoptr i32 %v1_ca9c to i8*
  %v3_ca9c = load i8, i8* %v2_ca9c, align 1
  %v4_ca9c = zext i8 %v3_ca9c to i32
  store i32 %v4_ca9c, i32* %r2.global-to-local, align 4
  %v1_caa0 = add i32 %v0_ca9c, 13
  %v2_caa0 = inttoptr i32 %v1_caa0 to i8*
  %v3_caa0 = load i8, i8* %v2_caa0, align 1
  %v4_caa0 = zext i8 %v3_caa0 to i32
  %v0_caa4 = load i32, i32* %r0.global-to-local, align 4
  %v1_caa4 = load i32, i32* %ip.global-to-local, align 4
  %v4_caa4 = mul i32 %v1_caa4, 256
  %v5_caa4 = or i32 %v4_caa4, %v0_caa4
  store i32 %v5_caa4, i32* %r0.global-to-local, align 4
  %tmp118 = urem i8 %v3_ca9c, 16
  %v1_caa8 = zext i8 %tmp118 to i32
  store i32 %v0_ca0c, i32* %ip.global-to-local, align 4
  %v3_cab0 = sdiv i32 %v5_caa4, 256
  store i32 %v3_cab0, i32* %r1.global-to-local, align 4
  %v1_cab4 = or i32 %v1_caa8, 128
  store i32 %v1_cab4, i32* %r2.global-to-local, align 4
  %v1_cab8 = or i32 %v4_caa0, 16
  store i32 %v1_cab8, i32* %r3.global-to-local, align 4
  %v1_cabc = trunc i32 %v3_cab0 to i8
  %v3_cabc = add i32 %v0_ca0c, 3
  %v4_cabc = inttoptr i32 %v3_cabc to i8*
  store i8 %v1_cabc, i8* %v4_cabc, align 1
  %v0_cac0 = load i32, i32* %lr.global-to-local, align 4
  %v1_cac0 = load i32, i32* %ip.global-to-local, align 4
  %v2_cac0 = add i32 %v1_cac0, 8
  %v3_cac0 = inttoptr i32 %v2_cac0 to i32*
  store i32 %v0_cac0, i32* %v3_cac0, align 4
  %v0_cac4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cac4 = trunc i32 %v0_cac4 to i8
  %v2_cac4 = load i32, i32* %ip.global-to-local, align 4
  %v3_cac4 = add i32 %v2_cac4, 12
  %v4_cac4 = inttoptr i32 %v3_cac4 to i8*
  store i8 %v1_cac4, i8* %v4_cac4, align 1
  %v0_cac8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cac8 = trunc i32 %v0_cac8 to i8
  %v2_cac8 = load i32, i32* %ip.global-to-local, align 4
  %v3_cac8 = add i32 %v2_cac8, 13
  %v4_cac8 = inttoptr i32 %v3_cac8 to i8*
  store i8 %v1_cac8, i8* %v4_cac8, align 1
  %v0_cacc = load i32, i32* %r0.global-to-local, align 4
  %v1_cacc = trunc i32 %v0_cacc to i8
  %v2_cacc = load i32, i32* %ip.global-to-local, align 4
  %v3_cacc = add i32 %v2_cacc, 2
  %v4_cacc = inttoptr i32 %v3_cacc to i8*
  store i8 %v1_cacc, i8* %v4_cacc, align 1
  %v0_cad0 = call i32 @function_105b4()
  %v1_cad0 = trunc i32 %v0_cad0 to i8
  store i32 %v0_cad0, i32* %r0.global-to-local, align 4
  store i32 %v0_ca0c, i32* %lr.global-to-local, align 4
  store i32 %v1_c380, i32* %r1.global-to-local, align 4
  %v3_cadc = load i8, i8* %v4_ca98, align 1
  %v4_cadc = zext i8 %v3_cadc to i32
  store i32 %v1_cae0, i32* %r2.global-to-local, align 4
  %v1_cae4 = and i32 %v4_cadc, 223
  %v5_cae8 = or i32 %v1_cae4, %v4_cae8
  store i32 %v5_cae8, i32* %r3.global-to-local, align 4
  %v1_caec = trunc i32 %v5_cae8 to i8
  store i8 %v1_caec, i8* %v4_ca98, align 1
  store i32 %v1_c3a0, i32* %ip.global-to-local, align 4
  %v0_caf4 = load i32, i32* %lr.global-to-local, align 4
  %v1_caf4 = add i32 %v0_caf4, 13
  %v2_caf4 = inttoptr i32 %v1_caf4 to i8*
  %v3_caf4 = load i8, i8* %v2_caf4, align 1
  %v4_caf4 = zext i8 %v3_caf4 to i32
  store i32 %v1_caf8, i32* %r3.global-to-local, align 4
  %v1_cafc = and i32 %v4_caf4, 239
  %v5_cb00 = or i32 %v1_cafc, %v4_cb00
  store i32 %v5_cb00, i32* %r2.global-to-local, align 4
  %v1_cb04 = trunc i32 %v5_cb00 to i8
  store i8 %v1_cb04, i8* %v2_caf4, align 1
  %v0_cb08 = load i32, i32* %lr.global-to-local, align 4
  %v1_cb08 = add i32 %v0_cb08, 13
  %v2_cb08 = inttoptr i32 %v1_cb08 to i8*
  %v3_cb08 = load i8, i8* %v2_cb08, align 1
  %v4_cb08 = zext i8 %v3_cb08 to i32
  store i32 %v1_c3c0, i32* %lr.global-to-local, align 4
  store i32 %v0_ca0c, i32* %r1.global-to-local, align 4
  store i32 %v1_cb14, i32* %r2.global-to-local, align 4
  %v1_cb18 = and i32 %v4_cb08, 247
  %v5_cb1c = or i32 %v1_cb18, %v4_cb1c
  store i32 %v5_cb1c, i32* %r3.global-to-local, align 4
  %v1_cb20 = trunc i32 %v5_cb1c to i8
  store i8 %v1_cb20, i8* %v4_ca98, align 1
  store i32 %v1_c3e0, i32* %ip.global-to-local, align 4
  %v0_cb28 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb28 = add i32 %v0_cb28, 13
  %v2_cb28 = inttoptr i32 %v1_cb28 to i8*
  %v3_cb28 = load i8, i8* %v2_cb28, align 1
  %v4_cb28 = zext i8 %v3_cb28 to i32
  store i32 %v1_cb2c, i32* %r3.global-to-local, align 4
  %v1_cb30 = and i32 %v4_cb28, 251
  %v5_cb34 = or i32 %v1_cb30, %v4_cb34
  store i32 %v5_cb34, i32* %r2.global-to-local, align 4
  %v1_cb38 = trunc i32 %v5_cb34 to i8
  store i8 %v1_cb38, i8* %v2_cb28, align 1
  store i32 %v1_c400, i32* %lr.global-to-local, align 4
  %v0_cb40 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb40 = add i32 %v0_cb40, 13
  %v2_cb40 = inttoptr i32 %v1_cb40 to i8*
  %v3_cb40 = load i8, i8* %v2_cb40, align 1
  %v4_cb40 = zext i8 %v3_cb40 to i32
  store i32 %v1_cb44, i32* %r2.global-to-local, align 4
  %v1_cb48 = and i32 %v4_cb40, 253
  %v4_cb4c = or i32 %v1_cb48, %v3_cb4c
  store i32 %v4_cb4c, i32* %r3.global-to-local, align 4
  %v1_cb50 = trunc i32 %v4_cb4c to i8
  store i8 %v1_cb50, i8* %v2_cb40, align 1
  %v0_cb54 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb54 = add i32 %v0_cb54, 13
  %v2_cb54 = inttoptr i32 %v1_cb54 to i8*
  %v3_cb54 = load i8, i8* %v2_cb54, align 1
  %v4_cb54 = zext i8 %v3_cb54 to i32
  %v1_cb5c = and i32 %v4_cb54, 254
  %v2_cb64 = or i32 %v1_cb5c, %v1_cb60
  store i32 %v2_cb64, i32* %r3.global-to-local, align 4
  store i32 %v0_ca0c, i32* %r2.global-to-local, align 4
  %v4_cb6c = sdiv i32 %v0_cad0, 256
  store i32 %v4_cb6c, i32* %r1.global-to-local, align 4
  %v1_cb70 = trunc i32 %v2_cb64 to i8
  store i8 %v1_cb70, i8* %v4_ca98, align 1
  %v0_cb74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb74 = trunc i32 %v0_cb74 to i8
  %v2_cb74 = load i32, i32* %r2.global-to-local, align 4
  %v3_cb74 = add i32 %v2_cb74, 15
  %v4_cb74 = inttoptr i32 %v3_cb74 to i8*
  store i8 %v1_cb74, i8* %v4_cb74, align 1
  %v3_cb78 = load i32, i32* %r2.global-to-local, align 4
  %v4_cb78 = add i32 %v3_cb78, 14
  %v5_cb78 = inttoptr i32 %v4_cb78 to i8*
  store i8 %v1_cad0, i8* %v5_cb78, align 1
  store i32 %v6_c438, i32* %r1.global-to-local, align 4
  %v0_cb80 = load i32, i32* @r4, align 4
  store i32 %v0_cb80, i32* %r0.global-to-local, align 4
  %v2_cb84 = call i32 @function_10668(i32 %v0_cb80, i32 %v6_c438)
  store i32 %v2_cb84, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_cb90 = load i32, i32* @r4, align 4
  %v4_cb90 = add i32 %v2_cb90, %v6_c438
  %v5_cb90 = inttoptr i32 %v4_cb90 to i8*
  store i8 0, i8* %v5_cb90, align 1
  %v3_cb94 = load i32, i32* %stack_var_-40, align 4
  store i32 %v1_c28c, i32* %lr.global-to-local, align 4
  %v1_cb9c = add i32 %v3_cb94, 1
  store i32 %v1_cb9c, i32* %r3.global-to-local, align 4
  %v9_cba0 = icmp eq i32 %v1_cb9c, %v1_c28c
  store i1 %v9_cba0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb9c, i32* %stack_var_-40, align 4
  %v5_cba8 = icmp slt i32 %v1_cb9c, %v1_c28c
  br i1 %v5_cba8, label %dec_label_pc_c4f4.outer, label %dec_label_pc_c6d0.preheader

; uselistorder directives
  uselistorder i32 %v1_cb9c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cad0, { 0, 2, 1 }
  uselistorder i32 %v3_cab0, { 1, 0 }
  uselistorder i32 %v0_ca74, { 1, 0, 2 }
  uselistorder i32 %v3_ca6c, { 1, 0 }
  uselistorder i32 %v0_ca0c, { 5, 6, 7, 0, 8, 1, 9, 2, 10, 3, 11, 4 }
  uselistorder i32 %v3_c984, { 1, 0 }
  uselistorder i32 %v2_c96c, { 1, 0 }
  uselistorder i32 %v3_c950, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c914, { 1, 0 }
  uselistorder i32 %v2_c8f8, { 1, 2, 3, 0 }
  uselistorder i32 %v4_c8e4, { 1, 0 }
  uselistorder i32 %v0_c8e0, { 0, 2, 1 }
  uselistorder i32 %v4_c8d0, { 1, 0 }
  uselistorder i32 %v0_c8cc, { 0, 2, 1 }
  uselistorder i32 %v8_c894, { 1, 2, 0, 3 }
  uselistorder i32 %v3_c858, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_c830, { 1, 0 }
  uselistorder i32 %v7_c80c, { 1, 0, 2 }
  uselistorder i32 %v1_c7f0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_c790, { 0, 2, 1 }
  uselistorder i32 %v0_c778, { 1, 0, 2 }
  uselistorder i32 %v3_c754, { 1, 0 }
  uselistorder i32 %v3_c734, { 3, 2, 0, 1 }
  uselistorder i32 %v2_c720, { 0, 2, 1 }
  uselistorder i1 %v3_c814, { 1, 0 }
  uselistorder i32 %v1_c6e8, { 3, 2, 0, 1 }
  uselistorder i32 %v1_c6c0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c6a8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_c620, { 1, 0 }
  uselistorder i32 %v10_c618, { 0, 2, 1, 3 }
  uselistorder i32 %v5_c664, { 1, 0 }
  uselistorder i1 %v9_c648, { 1, 0 }
  uselistorder i32 %v4_c65c, { 1, 0 }
  uselistorder i32 %v4_c658, { 1, 0 }
  uselistorder i32 %v0_c918, { 2, 0, 5, 6, 3, 1, 4 }
  uselistorder i1 %v7_c568, { 1, 0, 2 }
  uselistorder i1 %v7_c510, { 1, 0 }
  uselistorder i32 %v3_c50c, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-56.0, { 1, 0 }
  uselistorder i32 %stack_var_-336.0.ph, { 4, 5, 2, 3, 0, 1 }
  uselistorder i32 %v1_cb44, { 1, 0 }
  uselistorder i32 %v1_cb2c, { 1, 0 }
  uselistorder i32 %v1_caf8, { 1, 0 }
  uselistorder i32 %v1_c9cc, { 1, 0 }
  uselistorder i32 %v1_c590, { 1, 0 }
  uselistorder i32 %v5_c660, { 1, 0 }
  uselistorder i32 %v1_cb14, { 1, 0 }
  uselistorder i32 %v1_cae0, { 1, 0 }
  uselistorder i1 %v2_c678, { 1, 0 }
  uselistorder i32 %v1_c674, { 1, 0 }
  uselistorder i32 %v4_c670, { 2, 0, 1 }
  uselistorder i32 %v4_c654, { 1, 0 }
  uselistorder i32 %v1_c5c8, { 2, 1, 0 }
  uselistorder i1 %v3_c8c4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c4e4, { 6, 5, 3, 4, 7, 0, 1, 2, 8 }
  uselistorder i32 %v3_c4e0, { 1, 0, 2 }
  uselistorder i32 %v3_c4dc, { 1, 0, 2 }
  uselistorder i1 %v2_c4c8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c4c4, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c4c0, { 1, 0, 3, 2 }
  uselistorder i1 %v7_c4b4, { 1, 0 }
  uselistorder i1 %v7_c484, { 1, 0 }
  uselistorder i32 %v3_c480, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_c47c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_c468, { 2, 1, 0 }
  uselistorder i32 %v1_c458, { 1, 0 }
  uselistorder i32 %v6_c438, { 0, 5, 4, 1, 6, 8, 7, 9, 10, 3, 2 }
  uselistorder i32 %v1_c400, { 1, 0 }
  uselistorder i32 %v1_c3e0, { 1, 0 }
  uselistorder i32 %v1_c3c0, { 1, 0 }
  uselistorder i32 %v1_c3a0, { 1, 0 }
  uselistorder i32 %v1_c380, { 1, 0 }
  uselistorder i8 %v5_c300, { 1, 0 }
  uselistorder i32 %v6_c2e0, { 1, 0 }
  uselistorder i32 %v4_c2c8, { 0, 2, 1, 3 }
  uselistorder i32 %v4_c2b8, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 %v1_c28c, { 12, 13, 14, 6, 7, 8, 5, 9, 10, 11, 15, 4, 2, 3, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 18, 16, 17 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 56, 55, 57, 59, 58, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 23, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 24, 25, 26, 27, 30, 29, 31, 33, 32, 34, 36, 35, 38, 42, 37, 39, 41, 40, 45, 43, 44, 46, 47, 48, 51, 49, 52, 53, 50, 54, 57, 55, 56, 58, 59, 63, 60, 61, 62, 64, 66, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 25, 26, 27, 28, 29, 31, 32, 0, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 8, 6, 9, 10, 11, 12, 13, 14, 16, 25, 17, 18, 15, 19, 20, 21, 22, 23, 24 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %dec_label_pc_c850, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_c824, { 1, 0 }
  uselistorder label %dec_label_pc_c710, { 1, 0 }
  uselistorder label %dec_label_pc_c6d0, { 1, 0 }
  uselistorder label %dec_label_pc_c5e8, { 2, 1, 3, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_c524, { 1, 0 }
}

define i32 @function_cbb4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_cbb4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_cbb4 = load i32, i32* @sb, align 4
  %v24_cbb4 = load i32, i32* @fp, align 4
  %v1_cbb8 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_cbd4 = urem i32 %arg4, 256
  store i32 %v1_cbd4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_cbe4 = call i32* @calloc(i32 %v1_cbb8, i32 4)
  %v4_cbe4 = ptrtoint i32* %v2_cbe4 to i32
  %v0_cbe8 = load i32, i32* @r5, align 4
  store i32 %v0_cbe8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_cbf4 = load i32, i32* @r7, align 4
  store i32 %v0_cbf4, i32* %r3.global-to-local, align 4
  %v0_cbf8 = load i32, i32* @r4, align 4
  %v5_cbfc = inttoptr i32 %v0_cbe8 to i32*
  %v6_cbfc = call i32 @function_8f6c(i32 %v0_cbf8, i32* %v5_cbfc, i32 2, i32 %v0_cbf4)
  %v1_cc08 = urem i32 %v6_cbfc, 256
  store i32 %v1_cc08, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cc14 = load i32, i32* @r5, align 4
  store i32 %v0_cc14, i32* %r1.global-to-local, align 4
  %v0_cc18 = load i32, i32* @r4, align 4
  %v5_cc1c = trunc i32 %v6_cbfc to i8
  %v6_cc20 = inttoptr i32 %v0_cc14 to i32*
  %v7_cc20 = call i32 @function_8f6c(i32 %v0_cc18, i32* %v6_cc20, i32 3, i32 65535)
  %v0_cc24 = load i32, i32* @r5, align 4
  store i32 %v0_cc24, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_cc34 = load i32, i32* @r4, align 4
  %v5_cc38 = inttoptr i32 %v0_cc24 to i32*
  %v6_cc38 = call i32 @function_8f6c(i32 %v0_cc34, i32* %v5_cc38, i32 4, i32 64)
  %v1_cc40 = urem i32 %v6_cc38, 256
  store i32 %v1_cc40, i32* %ip.global-to-local, align 4
  %v0_cc44 = load i32, i32* @r5, align 4
  store i32 %v0_cc44, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_cc4c = load i32, i32* @r7, align 4
  store i32 %v0_cc4c, i32* %r3.global-to-local, align 4
  %v0_cc50 = load i32, i32* @r4, align 4
  %v5_cc54 = trunc i32 %v6_cc38 to i8
  %v6_cc58 = inttoptr i32 %v0_cc44 to i32*
  %v7_cc58 = call i32 @function_8f6c(i32 %v0_cc50, i32* %v6_cc58, i32 5, i32 %v0_cc4c)
  %v1_cc64 = urem i32 %v7_cc58, 256
  store i32 %v1_cc64, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_cc70 = load i32, i32* @r5, align 4
  store i32 %v0_cc70, i32* %r1.global-to-local, align 4
  %v0_cc74 = load i32, i32* @r4, align 4
  %v5_cc7c = inttoptr i32 %v0_cc70 to i32*
  %v6_cc7c = call i32 @function_8f6c(i32 %v0_cc74, i32* %v5_cc7c, i32 6, i32 65535)
  %v0_cc84 = load i32, i32* @r5, align 4
  store i32 %v0_cc84, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_cc7c, i32* %sb.global-to-local, align 4
  %v0_cc94 = load i32, i32* @r4, align 4
  %v4_cc98 = inttoptr i32 %v0_cc84 to i32*
  %v5_cc98 = call i32 @function_8f6c(i32 %v0_cc94, i32* %v4_cc98, i32 7, i32 65535)
  %v0_cca4 = load i32, i32* @r5, align 4
  store i32 %v0_cca4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ccb0 = load i32, i32* @r4, align 4
  %v5_ccb4 = inttoptr i32 %v0_cca4 to i32*
  %v6_ccb4 = call i32 @function_8f6c(i32 %v0_ccb0, i32* %v5_ccb4, i32 16, i32 65535)
  %v0_ccc0 = load i32, i32* @r5, align 4
  store i32 %v0_ccc0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_cccc = load i32, i32* @r4, align 4
  %v5_ccd0 = inttoptr i32 %v0_ccc0 to i32*
  %v6_ccd0 = call i32 @function_8f6c(i32 %v0_cccc, i32* %v5_ccd0, i32 17, i32 65535)
  %v0_ccd4 = load i32, i32* @r5, align 4
  store i32 %v0_ccd4, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_cce0 = load i32, i32* @r7, align 4
  store i32 %v0_cce0, i32* %r3.global-to-local, align 4
  %v0_cce4 = load i32, i32* @r4, align 4
  %v5_cce8 = inttoptr i32 %v0_ccd4 to i32*
  %v6_cce8 = call i32 @function_8f6c(i32 %v0_cce4, i32* %v5_cce8, i32 10, i32 %v0_cce0)
  %v0_ccec = load i32, i32* @r5, align 4
  store i32 %v0_ccec, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ccfc = load i32, i32* @r4, align 4
  %v5_cd00 = inttoptr i32 %v0_ccec to i32*
  %v6_cd00 = call i32 @function_8f6c(i32 %v0_ccfc, i32* %v5_cd00, i32 11, i32 1)
  %v0_cd04 = load i32, i32* @r5, align 4
  store i32 %v0_cd04, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_cd10 = load i32, i32* @r7, align 4
  store i32 %v0_cd10, i32* %r3.global-to-local, align 4
  %v0_cd14 = load i32, i32* @r4, align 4
  %v5_cd18 = inttoptr i32 %v0_cd04 to i32*
  %v6_cd18 = call i32 @function_8f6c(i32 %v0_cd14, i32* %v5_cd18, i32 12, i32 %v0_cd10)
  %v0_cd1c = load i32, i32* @r5, align 4
  store i32 %v0_cd1c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_cd28 = load i32, i32* @r7, align 4
  store i32 %v0_cd28, i32* %r3.global-to-local, align 4
  %v0_cd2c = load i32, i32* @r4, align 4
  %v5_cd30 = inttoptr i32 %v0_cd1c to i32*
  %v6_cd30 = call i32 @function_8f6c(i32 %v0_cd2c, i32* %v5_cd30, i32 13, i32 %v0_cd28)
  %v0_cd34 = load i32, i32* @r5, align 4
  store i32 %v0_cd34, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_cd40 = load i32, i32* @r7, align 4
  store i32 %v0_cd40, i32* %r3.global-to-local, align 4
  %v0_cd44 = load i32, i32* @r4, align 4
  %v5_cd48 = inttoptr i32 %v0_cd34 to i32*
  %v6_cd48 = call i32 @function_8f6c(i32 %v0_cd44, i32* %v5_cd48, i32 14, i32 %v0_cd40)
  %v0_cd4c = load i32, i32* @r5, align 4
  store i32 %v0_cd4c, i32* %r1.global-to-local, align 4
  %v0_cd54 = load i32, i32* @r7, align 4
  store i32 %v0_cd54, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_cd5c = load i32, i32* @r4, align 4
  %v5_cd60 = inttoptr i32 %v0_cd4c to i32*
  %v6_cd60 = call i32 @function_8f6c(i32 %v0_cd5c, i32* %v5_cd60, i32 15, i32 %v0_cd54)
  %v0_cd64 = load i32, i32* @r5, align 4
  store i32 %v0_cd64, i32* %r1.global-to-local, align 4
  %v0_cd68 = load i32, i32* @r7, align 4
  store i32 %v0_cd68, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_cd60, i32* %fp.global-to-local, align 4
  %v0_cd74 = load i32, i32* @r4, align 4
  %v4_cd78 = inttoptr i32 %v0_cd64 to i32*
  %v5_cd78 = call i32 @function_8f6c(i32 %v0_cd74, i32* %v4_cd78, i32 %v0_cd68, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cd84 = load i32, i32* @r5, align 4
  store i32 %v0_cd84, i32* %r1.global-to-local, align 4
  store i32 %v5_cd78, i32* @sl, align 4
  %v0_cd8c = load i32, i32* @r4, align 4
  %v4_cd90 = inttoptr i32 %v0_cd84 to i32*
  %v5_cd90 = call i32 @function_8f6c(i32 %v0_cd8c, i32* %v4_cd90, i32 1, i32 1)
  %v2_cd9c = load i32, i32* @global_var_1c21c.133, align 4
  store i32 %v2_cd9c, i32* %r3.global-to-local, align 4
  %v1_cda0 = urem i32 %v5_cd90, 256
  store i32 %v1_cda0, i32* %ip.global-to-local, align 4
  %v0_cda4 = load i32, i32* @r5, align 4
  store i32 %v0_cda4, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_cdac = load i32, i32* @r4, align 4
  %v5_cdb4 = inttoptr i32 %v0_cda4 to i32*
  %v6_cdb4 = call i32 @function_8f00(i32 %v0_cdac, i32* %v5_cdb4, i32 24, i32 %v2_cd9c, i32 %v1_cda0)
  %v0_cdbc = load i32, i32* @r7, align 4
  %v1_cdc0 = inttoptr i32 %v0_cdbc to i32*
  %v2_cdc0 = call i32 @time(i32* %v1_cdc0)
  %v1_cdc4 = load i32, i32* @r6, align 4
  %v2_cdc4 = add i32 %v1_cdc4, %v2_cdc0
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_cdd8 = call i32 @socket(i32 2, i32 3, i32 6)
  %v7_cddc = icmp eq i32 %v3_cdd8, -1
  store i1 %v7_cddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cddc, label %dec_label_pc_d358, label %dec_label_pc_cde8

dec_label_pc_cde8:                                ; preds = %dec_label_pc_cbb4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_cdf0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_cdf0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_cdf8 = load i32, i32* @r7, align 4
  store i32 %v0_cdf8, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_ce04 = call i32 @setsockopt(i32 %v3_cdd8, i32 %v0_cdf8, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_ce08 = icmp eq i32 %v7_ce04, -1
  store i1 %v7_ce08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ce08, label %dec_label_pc_d360, label %dec_label_pc_ce10

dec_label_pc_ce10:                                ; preds = %dec_label_pc_cde8
  store i32 %v1_cbb8, i32* %r3.global-to-local, align 4
  %v0_ce20 = load i32, i32* %sb.global-to-local, align 4
  %v3_ce20 = mul i32 %v0_ce20, 65536
  store i32 %v3_ce20, i32* %sb.global-to-local, align 4
  %v3_ce28 = urem i32 %v7_cc20, 65536
  store i32 %v3_ce28, i32* %ip.global-to-local, align 4
  %v3_ce2c = urem i32 %v0_ce20, 65536
  store i32 %v3_ce2c, i32* %r1.global-to-local, align 4
  %v3_ce30 = urem i32 %v5_cc98, 65536
  store i32 %v3_ce30, i32* %r2.global-to-local, align 4
  %v2_ce34 = icmp eq i32 %v1_cbb8, 0
  store i1 %v2_ce34, i1* %cpsr_z.global-to-local, align 1
  %v0_ce38 = load i32, i32* @r7, align 4
  store i32 %v0_ce38, i32* %stack_var_-40, align 4
  br i1 %v2_ce34, label %dec_label_pc_d0cc.preheader, label %dec_label_pc_ce4c

dec_label_pc_ce4c:                                ; preds = %dec_label_pc_ce10
  %v0_ce54 = load i32, i32* @sl, align 4
  %v1_ce54 = add i32 %v0_ce54, 40
  %v1_ce68 = urem i32 %v0_ce20, 256
  %tmp72 = udiv i32 %v7_cc20, 256
  %tmp73 = udiv i32 %v1_ce54, 256
  %v1_ce84 = urem i32 %v5_cc98, 256
  %tmp74 = mul i32 %v6_ccb4, 256
  %v1_cea0 = and i32 %tmp74, 65280
  %tmp75 = udiv i32 %v6_ccb4, 256
  %v4_cea4 = urem i32 %tmp75, 256
  %v5_cea4 = or i32 %v4_cea4, %v1_cea0
  %v1_cea8 = urem i32 %v6_cce8, 2
  %v1_ceac = urem i32 %v6_cd00, 2
  %v1_ceb0 = urem i32 %v6_cd18, 2
  %sext12 = mul i32 %tmp73, 16777216
  %v4_cecc = sdiv i32 %sext12, 16777216
  %v1_ced0 = urem i32 %v6_cd30, 2
  %tmp76 = udiv i32 %v5_cc98, 256
  %v3_ced8 = urem i32 %tmp76, 256
  %v1_cee0 = urem i32 %v6_cd48, 2
  store i32 %v1_cee0, i32* %ip.global-to-local, align 4
  %v1_cee4 = urem i32 %v6_cd18, 256
  store i32 %v1_cee4, i32* %r1.global-to-local, align 4
  %v3_cee8 = ashr i32 %sext12, 31
  store i32 %v3_cee8, i32* %r2.global-to-local, align 4
  %sext13 = mul i32 %tmp72, 16777216
  %v4_ceec = sdiv i32 %sext13, 16777216
  store i32 %v4_ceec, i32* %r3.global-to-local, align 4
  %tmp77 = udiv i32 %v0_ce20, 256
  %v0_cef4 = load i32, i32* %fp.global-to-local, align 4
  %v1_cef4 = urem i32 %v0_cef4, 2
  %v4_cef8 = mul nuw nsw i32 %v1_ce84, 256
  %v5_cef8 = or i32 %v4_cef8, %v3_ced8
  store i32 %v5_cef8, i32* @r5, align 4
  %v3_cf14 = ashr i32 %sext13, 31
  store i32 %v3_cf14, i32* @r4, align 4
  store i32 %v1_ce68, i32* @fp, align 4
  store i32 %v1_ce84, i32* @sb, align 4
  %v4_cf6c = sext i8 %v5_cc54 to i32
  %sext9 = mul i32 %tmp77, 16777216
  %v4_cfc8 = sdiv i32 %sext9, 16777216
  %tmp = sub nsw i32 0, %v1_cea8
  %v4_cfe4 = and i32 %tmp, 32
  %tmp85 = sub nsw i32 0, %v1_ceac
  %v4_cffc = and i32 %tmp85, 16
  %tmp86 = sub nsw i32 0, %v1_ceb0
  %v4_d010 = and i32 %tmp86, 8
  %tmp87 = sub nsw i32 0, %v1_ced0
  %v4_d024 = and i32 %tmp87, 4
  %tmp88 = sub nsw i32 0, %v1_cee0
  %v3_d038 = and i32 %tmp88, 2
  %v1_cf7c = trunc i32 %v3_cee8 to i8
  %extract.t = trunc i32 %v4_cecc to i8
  %v2_d088 = icmp eq i32 %v1_cee4, 0
  br label %dec_label_pc_cf20

dec_label_pc_cf20:                                ; preds = %.thread11, %dec_label_pc_ce4c
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_cf2c = call i32* @calloc(i32 1510, i32 1)
  %v4_cf2c = ptrtoint i32* %v2_cf2c to i32
  store i32 %v4_cbe4, i32* %ip.global-to-local, align 4
  %v3_cf34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cf34, i32* %r3.global-to-local, align 4
  %v2_cf38 = load i32, i32* @r7, align 4
  %v5_cf38 = mul i32 %v2_cf38, 4
  %v6_cf38 = add i32 %v5_cf38, %v4_cbe4
  %v7_cf38 = inttoptr i32 %v6_cf38 to i32*
  store i32 %v4_cf2c, i32* %v7_cf38, align 4
  %v0_cf3c = load i32, i32* %ip.global-to-local, align 4
  %v1_cf3c = load i32, i32* %r3.global-to-local, align 4
  %v4_cf3c = mul i32 %v1_cf3c, 4
  %v5_cf3c = add i32 %v4_cf3c, %v0_cf3c
  %v6_cf3c = inttoptr i32 %v5_cf3c to i32*
  %v7_cf3c = load i32, i32* %v6_cf3c, align 4
  store i32 %v7_cf3c, i32* %r1.global-to-local, align 4
  %v1_cf40 = inttoptr i32 %v7_cf3c to i8*
  %v2_cf40 = load i8, i8* %v1_cf40, align 1
  %tmp89 = urem i8 %v2_cf40, 16
  %v1_cf44 = zext i8 %tmp89 to i32
  %v1_cf48 = or i32 %v1_cf44, 64
  store i32 %v1_cf48, i32* %r2.global-to-local, align 4
  %v1_cf4c = trunc i32 %v1_cf48 to i8
  store i8 %v1_cf4c, i8* %v1_cf40, align 1
  %v0_cf50 = load i32, i32* %r1.global-to-local, align 4
  %v1_cf50 = inttoptr i32 %v0_cf50 to i8*
  %v2_cf50 = load i8, i8* %v1_cf50, align 1
  %v1_cf54 = and i8 %v2_cf50, -16
  %v1_cf58 = or i8 %v1_cf54, 5
  store i32 %v1_cc64, i32* %r2.global-to-local, align 4
  store i8 %v1_cf58, i8* %v1_cf50, align 1
  %v2_cf68 = load i32, i32* %r1.global-to-local, align 4
  %v3_cf68 = add i32 %v2_cf68, 1
  %v4_cf68 = inttoptr i32 %v3_cf68 to i8*
  store i8 %v5_cc1c, i8* %v4_cf68, align 1
  store i32 %v4_cf6c, i32* %ip.global-to-local, align 4
  %v2_cf70 = load i32, i32* %r1.global-to-local, align 4
  %v3_cf70 = add i32 %v2_cf70, 8
  %v4_cf70 = inttoptr i32 %v3_cf70 to i8*
  store i8 %v5_cc54, i8* %v4_cf70, align 1
  store i32 %v3_cee8, i32* %r3.global-to-local, align 4
  %v0_cf78 = load i32, i32* %r2.global-to-local, align 4
  %v2_cf78 = icmp eq i32 %v0_cf78, 0
  store i1 %v2_cf78, i1* %cpsr_z.global-to-local, align 1
  %v2_cf7c = load i32, i32* %r1.global-to-local, align 4
  %v3_cf7c = add i32 %v2_cf7c, 3
  %v4_cf7c = inttoptr i32 %v3_cf7c to i8*
  store i8 %v1_cf7c, i8* %v4_cf7c, align 1
  store i32 %v4_cecc, i32* %r2.global-to-local, align 4
  %v0_cf84 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cf84, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_cf20
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_cf88 = load i32, i32* %r1.global-to-local, align 4
  %v4_cf88 = add i32 %v3_cf88, 6
  %v5_cf88 = inttoptr i32 %v4_cf88 to i8*
  store i8 64, i8* %v5_cf88, align 1
  %v0_cf90.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t21 = trunc i32 %v0_cf90.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_cf20, %bb
  %v0_cf90.off0 = phi i8 [ %extract.t, %dec_label_pc_cf20 ], [ %extract.t21, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_cf90 = load i32, i32* %r1.global-to-local, align 4
  %v3_cf90 = add i32 %v2_cf90, 2
  %v4_cf90 = inttoptr i32 %v3_cf90 to i8*
  store i8 %v0_cf90.off0, i8* %v4_cf90, align 1
  store i32 %v4_ceec, i32* %ip.global-to-local, align 4
  %v0_cf98 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cf98, label %bb79, label %bb78

bb78:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %.thread, %bb78
  %v0_cf9c = load i32, i32* %r3.global-to-local, align 4
  %v1_cf9c = trunc i32 %v0_cf9c to i8
  %v2_cf9c = load i32, i32* %r1.global-to-local, align 4
  %v3_cf9c = add i32 %v2_cf9c, 9
  %v4_cf9c = inttoptr i32 %v3_cf9c to i8*
  store i8 %v1_cf9c, i8* %v4_cf9c, align 1
  %v0_cfa0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cfa0, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_cfa0 = load i32, i32* %r2.global-to-local, align 4
  %v2_cfa0 = trunc i32 %v1_cfa0 to i8
  %v3_cfa0 = load i32, i32* %r1.global-to-local, align 4
  %v4_cfa0 = add i32 %v3_cfa0, 7
  %v5_cfa0 = inttoptr i32 %v4_cfa0 to i8*
  store i8 %v2_cfa0, i8* %v5_cfa0, align 1
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v3_cfa4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cfa4, i32* %r2.global-to-local, align 4
  %v0_cfa8 = load i32, i32* %ip.global-to-local, align 4
  %v1_cfa8 = trunc i32 %v0_cfa8 to i8
  %v2_cfa8 = load i32, i32* %r1.global-to-local, align 4
  %v3_cfa8 = add i32 %v2_cfa8, 4
  %v4_cfa8 = inttoptr i32 %v3_cfa8 to i8*
  store i8 %v1_cfa8, i8* %v4_cfa8, align 1
  store i32 %v6_cdb4, i32* %ip.global-to-local, align 4
  %v0_cfb0 = load i32, i32* %r2.global-to-local, align 4
  %v3_cfb0 = mul i32 %v0_cfb0, 32
  store i32 %v3_cfb0, i32* %r3.global-to-local, align 4
  %v1_cfb4 = load i32, i32* %r1.global-to-local, align 4
  %v2_cfb4 = add i32 %v1_cfb4, 12
  %v3_cfb4 = inttoptr i32 %v2_cfb4 to i32*
  store i32 %v6_cdb4, i32* %v3_cfb4, align 4
  %v0_cfb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cfb8 = load i32, i32* %r2.global-to-local, align 4
  %tmp90 = mul i32 %v1_cfb8, -8
  %v5_cfb8 = add i32 %v0_cfb8, %tmp90
  %v1_cfbc = load i32, i32* @r8, align 4
  %v2_cfbc = add i32 %v1_cfbc, %v5_cfb8
  store i32 %v2_cfbc, i32* %r3.global-to-local, align 4
  %v1_cfc0 = add i32 %v2_cfbc, 16
  %v2_cfc0 = inttoptr i32 %v1_cfc0 to i32*
  %v3_cfc0 = load i32, i32* %v2_cfc0, align 4
  %v1_cfc4 = load i32, i32* %r1.global-to-local, align 4
  %v2_cfc4 = add i32 %v1_cfc4, 16
  %v3_cfc4 = inttoptr i32 %v2_cfc4 to i32*
  store i32 %v3_cfc0, i32* %v3_cfc4, align 4
  store i32 %v4_cfc8, i32* %r2.global-to-local, align 4
  %v0_cfcc = load i32, i32* @r4, align 4
  %v1_cfcc = trunc i32 %v0_cfcc to i8
  %v2_cfcc = load i32, i32* %r1.global-to-local, align 4
  %v3_cfcc = add i32 %v2_cfcc, 5
  %v4_cfcc = inttoptr i32 %v3_cfcc to i8*
  store i8 %v1_cfcc, i8* %v4_cfcc, align 1
  %v0_cfd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_cfd0 = trunc i32 %v0_cfd0 to i8
  %v2_cfd0 = load i32, i32* %r1.global-to-local, align 4
  %v3_cfd0 = add i32 %v2_cfd0, 20
  %v4_cfd0 = inttoptr i32 %v3_cfd0 to i8*
  store i8 %v1_cfd0, i8* %v4_cfd0, align 1
  %v0_cfd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cfd4 = add i32 %v0_cfd4, 20
  store i32 %v1_cfd4, i32* @r6, align 4
  %v1_cfd8 = add i32 %v0_cfd4, 33
  %v2_cfd8 = inttoptr i32 %v1_cfd8 to i8*
  %v3_cfd8 = load i8, i8* %v2_cfd8, align 1
  %v4_cfd8 = zext i8 %v3_cfd8 to i32
  store i32 %v1_cea8, i32* %ip.global-to-local, align 4
  %v1_cfe0 = and i32 %v4_cfd8, 223
  %v5_cfe4 = or i32 %v1_cfe0, %v4_cfe4
  store i32 %v5_cfe4, i32* %r3.global-to-local, align 4
  %v1_cfe8 = trunc i32 %v5_cfe4 to i8
  store i8 %v1_cfe8, i8* %v2_cfd8, align 1
  %v0_cfec = load i32, i32* @r6, align 4
  %v1_cfec = add i32 %v0_cfec, 13
  %v2_cfec = inttoptr i32 %v1_cfec to i8*
  %v3_cfec = load i8, i8* %v2_cfec, align 1
  %v4_cfec = zext i8 %v3_cfec to i32
  %v0_cff0 = load i32, i32* %r1.global-to-local, align 4
  %v1_cff0 = add i32 %v0_cff0, 40
  store i32 %v1_cff0, i32* @r7, align 4
  store i32 %v1_ceac, i32* %r1.global-to-local, align 4
  %v1_cff8 = and i32 %v4_cfec, 239
  %v5_cffc = or i32 %v1_cff8, %v4_cffc
  store i32 %v5_cffc, i32* %r2.global-to-local, align 4
  %v1_d000 = trunc i32 %v5_cffc to i8
  store i8 %v1_d000, i8* %v2_cfec, align 1
  %v0_d004 = load i32, i32* @r6, align 4
  %v1_d004 = add i32 %v0_d004, 13
  %v2_d004 = inttoptr i32 %v1_d004 to i8*
  %v3_d004 = load i8, i8* %v2_d004, align 1
  %v4_d004 = zext i8 %v3_d004 to i32
  store i32 %v1_ceb0, i32* %r2.global-to-local, align 4
  %v1_d00c = and i32 %v4_d004, 247
  %v5_d010 = or i32 %v1_d00c, %v4_d010
  store i32 %v5_d010, i32* %r3.global-to-local, align 4
  %v1_d014 = trunc i32 %v5_d010 to i8
  store i8 %v1_d014, i8* %v2_d004, align 1
  %v0_d018 = load i32, i32* @r6, align 4
  %v1_d018 = add i32 %v0_d018, 13
  %v2_d018 = inttoptr i32 %v1_d018 to i8*
  %v3_d018 = load i8, i8* %v2_d018, align 1
  %v4_d018 = zext i8 %v3_d018 to i32
  store i32 %v1_ced0, i32* %r3.global-to-local, align 4
  %v1_d020 = and i32 %v4_d018, 251
  %v5_d024 = or i32 %v1_d020, %v4_d024
  store i32 %v5_d024, i32* %r2.global-to-local, align 4
  %v1_d028 = trunc i32 %v5_d024 to i8
  store i8 %v1_d028, i8* %v2_d018, align 1
  %v0_d02c = load i32, i32* @r6, align 4
  %v1_d02c = add i32 %v0_d02c, 13
  %v2_d02c = inttoptr i32 %v1_d02c to i8*
  %v3_d02c = load i8, i8* %v2_d02c, align 1
  %v4_d02c = zext i8 %v3_d02c to i32
  store i32 %v1_cee0, i32* %ip.global-to-local, align 4
  %v1_d034 = and i32 %v4_d02c, 253
  %v4_d038 = or i32 %v1_d034, %v3_d038
  store i32 %v4_d038, i32* %r3.global-to-local, align 4
  %v1_d03c = trunc i32 %v4_d038 to i8
  store i8 %v1_d03c, i8* %v2_d02c, align 1
  %v0_d040 = load i32, i32* @r6, align 4
  %v1_d040 = add i32 %v0_d040, 12
  %v2_d040 = inttoptr i32 %v1_d040 to i8*
  %v3_d040 = load i8, i8* %v2_d040, align 1
  %v4_d040 = zext i8 %v3_d040 to i32
  store i32 %v4_d040, i32* %r2.global-to-local, align 4
  %v1_d044 = add i32 %v0_d040, 13
  %v2_d044 = inttoptr i32 %v1_d044 to i8*
  %v3_d044 = load i8, i8* %v2_d044, align 1
  %v4_d044 = zext i8 %v3_d044 to i32
  store i32 %v1_cef4, i32* %r1.global-to-local, align 4
  %tmp91 = urem i8 %v3_d040, 16
  %v1_d04c = zext i8 %tmp91 to i32
  %v1_d050 = and i32 %v4_d044, 254
  %v2_d054 = or i32 %v1_d050, %v1_cef4
  store i32 %v2_d054, i32* %r3.global-to-local, align 4
  %v1_d058 = or i32 %v1_d04c, 80
  store i32 %v1_d058, i32* %r2.global-to-local, align 4
  %v1_d05c = trunc i32 %v2_d054 to i8
  store i8 %v1_d05c, i8* %v2_d044, align 1
  %v0_d060 = load i32, i32* %r2.global-to-local, align 4
  %v1_d060 = trunc i32 %v0_d060 to i8
  %v2_d060 = load i32, i32* @r6, align 4
  %v3_d060 = add i32 %v2_d060, 12
  %v4_d060 = inttoptr i32 %v3_d060 to i8*
  store i8 %v1_d060, i8* %v4_d060, align 1
  store i32 %v5_cea4, i32* %r2.global-to-local, align 4
  %v0_d068 = load i32, i32* @fp, align 4
  %v1_d068 = trunc i32 %v0_d068 to i8
  %v2_d068 = load i32, i32* @r6, align 4
  %v3_d068 = add i32 %v2_d068, 1
  %v4_d068 = inttoptr i32 %v3_d068 to i8*
  store i8 %v1_d068, i8* %v4_d068, align 1
  %v0_d06c = load i32, i32* %r2.global-to-local, align 4
  %v1_d06c = load i32, i32* @r6, align 4
  %v2_d06c = add i32 %v1_d06c, 4
  %v3_d06c = inttoptr i32 %v2_d06c to i32*
  store i32 %v0_d06c, i32* %v3_d06c, align 4
  %v0_d070 = load i32, i32* @r5, align 4
  %v1_d070 = trunc i32 %v0_d070 to i8
  %v2_d070 = load i32, i32* @r6, align 4
  %v3_d070 = add i32 %v2_d070, 2
  %v4_d070 = inttoptr i32 %v3_d070 to i8*
  store i8 %v1_d070, i8* %v4_d070, align 1
  %v0_d074 = load i32, i32* @sb, align 4
  %v1_d074 = trunc i32 %v0_d074 to i8
  %v2_d074 = load i32, i32* @r6, align 4
  %v3_d074 = add i32 %v2_d074, 3
  %v4_d074 = inttoptr i32 %v3_d074 to i8*
  store i8 %v1_d074, i8* %v4_d074, align 1
  %v0_d078 = call i32 @function_105b4()
  store i32 %v1_cee4, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_d078, 16777216
  %v1_d080 = sdiv i32 %sext, 16777216
  store i32 %v1_d080, i32* %r2.global-to-local, align 4
  %v3_d084 = ashr i32 %sext, 31
  store i32 %v3_d084, i32* %r3.global-to-local, align 4
  store i1 %v2_d088, i1* %cpsr_z.global-to-local, align 1
  %v1_d08c = trunc i32 %v3_d084 to i8
  %v2_d08c = load i32, i32* @r6, align 4
  %v3_d08c = add i32 %v2_d08c, 15
  %v4_d08c = inttoptr i32 %v3_d08c to i8*
  store i8 %v1_d08c, i8* %v4_d08c, align 1
  %v0_d090 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d090, label %.thread11, label %bb82

bb82:                                             ; preds = %bb81
  %v1_d090 = load i32, i32* @r6, align 4
  %v2_d090 = add i32 %v1_d090, 13
  %v3_d090 = inttoptr i32 %v2_d090 to i8*
  %v4_d090 = load i8, i8* %v3_d090, align 1
  %v5_d090 = zext i8 %v4_d090 to i32
  %v2_d094 = or i32 %v5_d090, 8
  store i32 %v2_d094, i32* %r3.global-to-local, align 4
  %v2_d098 = trunc i32 %v2_d094 to i8
  store i8 %v2_d098, i8* %v3_d090, align 1
  br label %.thread11

.thread11:                                        ; preds = %bb81, %bb82
  %v0_d09c = load i32, i32* @sl, align 4
  store i32 %v0_d09c, i32* %r1.global-to-local, align 4
  %v0_d0a0 = load i32, i32* @r7, align 4
  %v0_d0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d0a4 = trunc i32 %v0_d0a4 to i8
  %v2_d0a4 = load i32, i32* @r6, align 4
  %v3_d0a4 = add i32 %v2_d0a4, 14
  %v4_d0a4 = inttoptr i32 %v3_d0a4 to i8*
  store i8 %v1_d0a4, i8* %v4_d0a4, align 1
  %v2_d0a8 = call i32 @function_10668(i32 %v0_d0a0, i32 %v0_d09c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d0b0 = load i32, i32* @r7, align 4
  %v3_d0b0 = load i32, i32* @sl, align 4
  %v4_d0b0 = add i32 %v3_d0b0, %v2_d0b0
  %v5_d0b0 = inttoptr i32 %v4_d0b0 to i8*
  store i8 0, i8* %v5_d0b0, align 1
  %v3_d0b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d0b4, i32* %r3.global-to-local, align 4
  store i32 %v1_cbb8, i32* %r2.global-to-local, align 4
  %v1_d0bc = add i32 %v3_d0b4, 1
  store i32 %v1_d0bc, i32* @r7, align 4
  %v9_d0c0 = icmp eq i32 %v1_cbb8, %v1_d0bc
  store i1 %v9_d0c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d0bc, i32* %stack_var_-40, align 4
  %v8_d0c8 = icmp sgt i32 %v1_cbb8, %v1_d0bc
  br i1 %v8_d0c8, label %dec_label_pc_cf20, label %dec_label_pc_d0cc.preheader

dec_label_pc_d0cc.preheader:                      ; preds = %.thread11, %dec_label_pc_ce10
  %v2_d10c = icmp eq i32 %v6_cdb4, -1
  %v7_d10c = icmp eq i32 %v6_cdb4, -1
  %v3_d2a4 = icmp eq i32 %v3_ce28, 65535
  %v2_d320 = icmp eq i32 %v1_cda0, 0
  br label %dec_label_pc_d0cc

dec_label_pc_d0cc:                                ; preds = %dec_label_pc_d0cc.preheader, %dec_label_pc_d344
  store i32 %v1_cbb8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_ce34, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_ce34, label %dec_label_pc_d344, label %dec_label_pc_d0e0

dec_label_pc_d0e0:                                ; preds = %dec_label_pc_d0cc
  %v0_d0e0 = load i32, i32* @sl, align 4
  %v1_d0e0 = add i32 %v0_d0e0, 20
  store i32 %v1_d0e0, i32* @sb, align 4
  %tmp83 = mul i32 %v1_d0e0, 256
  %v1_d0ec = and i32 %tmp83, 65280
  store i32 %v1_d0ec, i32* %r3.global-to-local, align 4
  %tmp84 = udiv i32 %v1_d0e0, 256
  %v4_d0f0 = urem i32 %tmp84, 256
  %v5_d0f0 = or i32 %v4_d0f0, %v1_d0ec
  store i32 %v5_d0f0, i32* %r2.global-to-local, align 4
  %v1_d0f8 = add i32 %v0_d0e0, 40
  store i32 %v1_d0f8, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d208

dec_label_pc_d108:                                ; preds = %dec_label_pc_d208
  store i32 %v6_cdb4, i32* %r1.global-to-local, align 4
  store i1 %v7_d10c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d10c, label %dec_label_pc_d294, label %dec_label_pc_d114

dec_label_pc_d114:                                ; preds = %dec_label_pc_d22c, %dec_label_pc_d108
  store i32 %v3_ce28, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d2a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d2a4, label %dec_label_pc_d2b0, label %dec_label_pc_d128

dec_label_pc_d128:                                ; preds = %dec_label_pc_d294.dec_label_pc_d128_crit_edge, %dec_label_pc_d114
  %v1_d12c = phi i32 [ %v1_d12c.pre, %dec_label_pc_d294.dec_label_pc_d128_crit_edge ], [ 65535, %dec_label_pc_d114 ]
  store i32 %v3_ce2c, i32* %r3.global-to-local, align 4
  %v9_d12c = icmp eq i32 %v3_ce2c, %v1_d12c
  store i1 %v9_d12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d12c, label %dec_label_pc_d2cc, label %dec_label_pc_d134

dec_label_pc_d134:                                ; preds = %dec_label_pc_d2b0.dec_label_pc_d134_crit_edge, %dec_label_pc_d128
  %v1_d138 = phi i32 [ %v1_d138.pre, %dec_label_pc_d2b0.dec_label_pc_d134_crit_edge ], [ %v1_d12c, %dec_label_pc_d128 ]
  store i32 %v3_ce30, i32* %ip.global-to-local, align 4
  %v9_d138 = icmp eq i32 %v3_ce30, %v1_d138
  store i1 %v9_d138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d138, label %dec_label_pc_d2e8, label %dec_label_pc_d140

dec_label_pc_d140:                                ; preds = %dec_label_pc_d2cc.dec_label_pc_d140_crit_edge, %dec_label_pc_d134
  %v1_d144 = phi i32 [ %v1_d144.pre, %dec_label_pc_d2cc.dec_label_pc_d140_crit_edge ], [ %v1_d138, %dec_label_pc_d134 ]
  store i32 %v6_ccb4, i32* %r1.global-to-local, align 4
  %v9_d144 = icmp eq i32 %v6_ccb4, %v1_d144
  store i1 %v9_d144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d144, label %dec_label_pc_d304, label %dec_label_pc_d14c

dec_label_pc_d14c:                                ; preds = %dec_label_pc_d2e8.dec_label_pc_d14c_crit_edge, %dec_label_pc_d140
  %v1_d150 = phi i32 [ %v1_d150.pre, %dec_label_pc_d2e8.dec_label_pc_d14c_crit_edge ], [ %v1_d144, %dec_label_pc_d140 ]
  store i32 %v6_ccd0, i32* %r2.global-to-local, align 4
  %v9_d150 = icmp eq i32 %v6_ccd0, %v1_d150
  store i1 %v9_d150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d150, label %dec_label_pc_d318, label %dec_label_pc_d158

dec_label_pc_d158:                                ; preds = %dec_label_pc_d304, %dec_label_pc_d14c
  store i32 %v1_cda0, i32* %r3.global-to-local, align 4
  store i1 %v2_d320, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d320, label %dec_label_pc_d164, label %dec_label_pc_d32c

dec_label_pc_d164:                                ; preds = %dec_label_pc_d158, %dec_label_pc_d318, %dec_label_pc_d32c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d168 = load i32, i32* @r7, align 4
  %v1_d168 = trunc i32 %v0_d168 to i8
  %v2_d168 = load i32, i32* @r5, align 4
  %v3_d168 = add i32 %v2_d168, 10
  %v4_d168 = inttoptr i32 %v3_d168 to i8*
  store i8 %v1_d168, i8* %v4_d168, align 1
  %v0_d16c = load i32, i32* @r7, align 4
  %v1_d16c = trunc i32 %v0_d16c to i8
  %v2_d16c = load i32, i32* @r5, align 4
  %v3_d16c = add i32 %v2_d16c, 11
  %v4_d16c = inttoptr i32 %v3_d16c to i8*
  store i8 %v1_d16c, i8* %v4_d16c, align 1
  %v0_d170 = load i32, i32* @r5, align 4
  store i32 %v0_d170, i32* @r0, align 4
  %v2_d174 = call i32 @function_f188(i32 %v0_d170, i32 20)
  %v3_d174 = trunc i32 %v2_d174 to i8
  %v4_d17823 = udiv i32 %v2_d174, 256
  %v1_d17c = trunc i32 %v4_d17823 to i8
  %v2_d17c = load i32, i32* @r5, align 4
  %v3_d17c = add i32 %v2_d17c, 11
  %v4_d17c = inttoptr i32 %v3_d17c to i8*
  store i8 %v1_d17c, i8* %v4_d17c, align 1
  %v3_d180 = load i32, i32* @r5, align 4
  %v4_d180 = add i32 %v3_d180, 10
  %v5_d180 = inttoptr i32 %v4_d180 to i8*
  store i8 %v3_d174, i8* %v5_d180, align 1
  %v0_d184 = load i32, i32* @r6, align 4
  store i32 %v0_d184, i32* @r1, align 4
  store i32 %v5_d0f0, i32* %r2.global-to-local, align 4
  %v0_d18c = load i32, i32* @sb, align 4
  store i32 %v0_d18c, i32* %r3.global-to-local, align 4
  %v0_d190 = load i32, i32* @r7, align 4
  %v1_d190 = trunc i32 %v0_d190 to i8
  %v3_d190 = add i32 %v0_d184, 16
  %v4_d190 = inttoptr i32 %v3_d190 to i8*
  store i8 %v1_d190, i8* %v4_d190, align 1
  %v0_d194 = load i32, i32* @r7, align 4
  %v1_d194 = trunc i32 %v0_d194 to i8
  %v2_d194 = load i32, i32* @r6, align 4
  %v3_d194 = add i32 %v2_d194, 17
  %v4_d194 = inttoptr i32 %v3_d194 to i8*
  store i8 %v1_d194, i8* %v4_d194, align 1
  %v0_d198 = load i32, i32* @r5, align 4
  %v4_d19c = call i32 @function_f1e4(i32 %v0_d198, i32 %v0_d184, i32 %v5_d0f0, i32 %v0_d18c)
  %v5_d19c = trunc i32 %v4_d19c to i8
  %v4_d1a024 = udiv i32 %v4_d19c, 256
  %v1_d1a4 = trunc i32 %v4_d1a024 to i8
  %v2_d1a4 = load i32, i32* @r6, align 4
  %v3_d1a4 = add i32 %v2_d1a4, 17
  %v4_d1a4 = inttoptr i32 %v3_d1a4 to i8*
  store i8 %v1_d1a4, i8* %v4_d1a4, align 1
  %v3_d1a8 = load i32, i32* @r6, align 4
  %v4_d1a8 = add i32 %v3_d1a8, 16
  %v5_d1a8 = inttoptr i32 %v4_d1a8 to i8*
  store i8 %v5_d19c, i8* %v5_d1a8, align 1
  %v3_d1ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d1ac, i32* %r3.global-to-local, align 4
  %v0_d1b0 = load i32, i32* @r5, align 4
  %v1_d1b0 = add i32 %v0_d1b0, 20
  %v2_d1b0 = inttoptr i32 %v1_d1b0 to i32*
  %v3_d1b0 = load i32, i32* %v2_d1b0, align 4
  %v3_d1b8 = udiv i32 %v3_d1b0, 65536
  store i32 %v3_d1b8, i32* %r2.global-to-local, align 4
  %v5_d1bc = mul i32 %v3_d1ac, 24
  %v1_d1c0 = load i32, i32* @r8, align 4
  %v2_d1c0 = add i32 %v1_d1c0, %v5_d1bc
  store i32 %v2_d1c0, i32* %ip.global-to-local, align 4
  %v3_d1c422 = udiv i32 %v3_d1b0, 16777216
  %v1_d1c8 = trunc i32 %v3_d1c422 to i8
  %v3_d1c8 = add i32 %v2_d1c0, 3
  %v4_d1c8 = inttoptr i32 %v3_d1c8 to i8*
  store i8 %v1_d1c8, i8* %v4_d1c8, align 1
  %v0_d1cc = load i32, i32* %r2.global-to-local, align 4
  %v1_d1cc = trunc i32 %v0_d1cc to i8
  %v2_d1cc = load i32, i32* %ip.global-to-local, align 4
  %v3_d1cc = add i32 %v2_d1cc, 2
  %v4_d1cc = inttoptr i32 %v3_d1cc to i8*
  store i8 %v1_d1cc, i8* %v4_d1cc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d1d4 = load i32, i32* @r5, align 4
  store i32 %v0_d1d4, i32* %r1.global-to-local, align 4
  %v0_d1dc = load i32, i32* @fp, align 4
  store i32 %v0_d1dc, i32* %r2.global-to-local, align 4
  %v0_d1e4 = load i32, i32* %ip.global-to-local, align 4
  %v4_d1e4 = inttoptr i32 %v0_d1e4 to %sockaddr*
  %v7_d1ec = inttoptr i32 %v0_d1d4 to i32*
  %v9_d1ec = call i32 @sendto(i32 %v3_cdd8, i32* %v7_d1ec, i32 %v0_d1dc, i32 16384, %sockaddr* %v4_d1e4, i32 16)
  %v3_d1f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d1f0, i32* %r3.global-to-local, align 4
  store i32 %v1_cbb8, i32* %ip.global-to-local, align 4
  %v1_d1f8 = add i32 %v3_d1f0, 1
  %v9_d1fc = icmp eq i32 %v1_cbb8, %v1_d1f8
  store i1 %v9_d1fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d1f8, i32* %stack_var_-40, align 4
  %v7_d204 = icmp sgt i32 %v1_cbb8, %v1_d1f8
  br i1 %v7_d204, label %dec_label_pc_d208, label %dec_label_pc_d344

dec_label_pc_d208:                                ; preds = %dec_label_pc_d164, %dec_label_pc_d0e0
  %v1_d21c = phi i32 [ %v1_d1f8, %dec_label_pc_d164 ], [ 0, %dec_label_pc_d0e0 ]
  %v5_d20c = mul i32 %v1_d21c, 24
  %v1_d210 = load i32, i32* @r8, align 4
  %v2_d210 = add i32 %v1_d210, %v5_d20c
  store i32 %v2_d210, i32* %r3.global-to-local, align 4
  store i32 %v4_cbe4, i32* %ip.global-to-local, align 4
  %v1_d218 = add i32 %v2_d210, 20
  %v2_d218 = inttoptr i32 %v1_d218 to i8*
  %v3_d218 = load i8, i8* %v2_d218, align 1
  %v4_d218 = zext i8 %v3_d218 to i32
  store i32 %v4_d218, i32* %r2.global-to-local, align 4
  %v4_d21c = mul i32 %v1_d21c, 4
  %v5_d21c = add i32 %v4_d21c, %v4_cbe4
  %v6_d21c = inttoptr i32 %v5_d21c to i32*
  %v7_d21c = load i32, i32* %v6_d21c, align 4
  store i32 %v7_d21c, i32* @r5, align 4
  %v2_d220 = icmp ugt i8 %v3_d218, 30
  %v7_d220 = icmp eq i8 %v3_d218, 31
  store i1 %v7_d220, i1* %cpsr_z.global-to-local, align 1
  %v1_d224 = add i32 %v7_d21c, 20
  store i32 %v1_d224, i32* @r6, align 4
  %v2_d228 = xor i1 %v7_d220, true
  %v3_d228 = and i1 %v2_d220, %v2_d228
  br i1 %v3_d228, label %dec_label_pc_d108, label %dec_label_pc_d22c

dec_label_pc_d22c:                                ; preds = %dec_label_pc_d208
  %v1_d22c = add i32 %v2_d210, 16
  %v2_d22c = inttoptr i32 %v1_d22c to i32*
  %v3_d22c = load i32, i32* %v2_d22c, align 4
  %v0_d230 = call i32 @function_105b4()
  %v3_d234 = load i32, i32* %stack_var_-40, align 4
  %v5_d23c = mul i32 %v3_d234, 24
  %v1_d244 = load i32, i32* @r8, align 4
  %v2_d244 = add i32 %v1_d244, %v5_d23c
  store i32 %v2_d244, i32* %r1.global-to-local, align 4
  %v1_d248 = and i32 %v3_d22c, 65280
  store i32 %v1_d248, i32* %r3.global-to-local, align 4
  %v1_d240 = udiv i32 %v3_d22c, 256
  %v3_d24c = and i32 %v1_d240, 65280
  store i32 %v3_d24c, i32* %r2.global-to-local, align 4
  %v3_d250 = mul i32 %v3_d22c, 16777216
  store i32 %v3_d250, i32* %ip.global-to-local, align 4
  %v1_d254 = add i32 %v2_d244, 20
  %v2_d254 = inttoptr i32 %v1_d254 to i8*
  %v3_d254 = load i8, i8* %v2_d254, align 1
  %v4_d254 = zext i8 %v3_d254 to i32
  %v4_d258 = mul nuw nsw i32 %v1_d248, 256
  %v5_d258 = or i32 %v4_d258, %v3_d250
  store i32 %v5_d258, i32* %ip.global-to-local, align 4
  %v2_d260 = call i32 @llvm.bswap.i32(i32 %v3_d22c)
  %v7_d264 = lshr i32 %v0_d230, %v4_d254
  %v8_d264 = add i32 %v7_d264, %v2_d260
  store i32 %v8_d264, i32* %r2.global-to-local, align 4
  %v2_d280 = call i32 @llvm.bswap.i32(i32 %v8_d264)
  store i32 %v2_d280, i32* %r3.global-to-local, align 4
  store i32 %v6_cdb4, i32* %r1.global-to-local, align 4
  store i1 %v7_d10c, i1* %cpsr_z.global-to-local, align 1
  %v1_d28c = load i32, i32* @r5, align 4
  %v2_d28c = add i32 %v1_d28c, 16
  %v3_d28c = inttoptr i32 %v2_d28c to i32*
  store i32 %v2_d280, i32* %v3_d28c, align 4
  br i1 %v2_d10c, label %dec_label_pc_d294, label %dec_label_pc_d114

dec_label_pc_d294:                                ; preds = %dec_label_pc_d22c, %dec_label_pc_d108
  %v0_d294 = call i32 @function_105b4()
  store i32 %v3_ce28, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d2a4, i1* %cpsr_z.global-to-local, align 1
  %v1_d2a8 = load i32, i32* @r5, align 4
  %v2_d2a8 = add i32 %v1_d2a8, 12
  %v3_d2a8 = inttoptr i32 %v2_d2a8 to i32*
  store i32 %v0_d294, i32* %v3_d2a8, align 4
  br i1 %v3_d2a4, label %dec_label_pc_d2b0, label %dec_label_pc_d294.dec_label_pc_d128_crit_edge

dec_label_pc_d294.dec_label_pc_d128_crit_edge:    ; preds = %dec_label_pc_d294
  %v1_d12c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d128

dec_label_pc_d2b0:                                ; preds = %dec_label_pc_d294, %dec_label_pc_d114
  %v0_d2b0 = call i32 @function_105b4()
  %v1_d2b0 = trunc i32 %v0_d2b0 to i8
  %v4_d2b425 = udiv i32 %v0_d2b0, 256
  %v1_d2b8 = trunc i32 %v4_d2b425 to i8
  %v2_d2b8 = load i32, i32* @r5, align 4
  %v3_d2b8 = add i32 %v2_d2b8, 5
  %v4_d2b8 = inttoptr i32 %v3_d2b8 to i8*
  store i8 %v1_d2b8, i8* %v4_d2b8, align 1
  store i32 %v3_ce2c, i32* %r3.global-to-local, align 4
  %v1_d2c0 = load i32, i32* @r4, align 4
  %v9_d2c0 = icmp eq i32 %v3_ce2c, %v1_d2c0
  store i1 %v9_d2c0, i1* %cpsr_z.global-to-local, align 1
  %v3_d2c4 = load i32, i32* @r5, align 4
  %v4_d2c4 = add i32 %v3_d2c4, 4
  %v5_d2c4 = inttoptr i32 %v4_d2c4 to i8*
  store i8 %v1_d2b0, i8* %v5_d2c4, align 1
  %v0_d2c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2c8, label %dec_label_pc_d2cc, label %dec_label_pc_d2b0.dec_label_pc_d134_crit_edge

dec_label_pc_d2b0.dec_label_pc_d134_crit_edge:    ; preds = %dec_label_pc_d2b0
  %v1_d138.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d134

dec_label_pc_d2cc:                                ; preds = %dec_label_pc_d2b0, %dec_label_pc_d128
  %v0_d2cc = call i32 @function_105b4()
  %v1_d2cc = trunc i32 %v0_d2cc to i8
  store i32 %v3_ce30, i32* %ip.global-to-local, align 4
  %v4_d2d4 = sdiv i32 %v0_d2cc, 256
  store i32 %v4_d2d4, i32* %r3.global-to-local, align 4
  %v1_d2d8 = load i32, i32* @r4, align 4
  %v9_d2d8 = icmp eq i32 %v3_ce30, %v1_d2d8
  store i1 %v9_d2d8, i1* %cpsr_z.global-to-local, align 1
  %v3_d2dc = load i32, i32* @r5, align 4
  %v4_d2dc = add i32 %v3_d2dc, 20
  %v5_d2dc = inttoptr i32 %v4_d2dc to i8*
  store i8 %v1_d2cc, i8* %v5_d2dc, align 1
  %v0_d2e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_d2e0 = trunc i32 %v0_d2e0 to i8
  %v2_d2e0 = load i32, i32* @r6, align 4
  %v3_d2e0 = add i32 %v2_d2e0, 1
  %v4_d2e0 = inttoptr i32 %v3_d2e0 to i8*
  store i8 %v1_d2e0, i8* %v4_d2e0, align 1
  %v0_d2e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2e4, label %dec_label_pc_d2e8, label %dec_label_pc_d2cc.dec_label_pc_d140_crit_edge

dec_label_pc_d2cc.dec_label_pc_d140_crit_edge:    ; preds = %dec_label_pc_d2cc
  %v1_d144.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d140

dec_label_pc_d2e8:                                ; preds = %dec_label_pc_d2cc, %dec_label_pc_d134
  %v0_d2e8 = call i32 @function_105b4()
  %v1_d2e8 = trunc i32 %v0_d2e8 to i8
  store i32 %v6_ccb4, i32* %r1.global-to-local, align 4
  %v4_d2f0 = sdiv i32 %v0_d2e8, 256
  store i32 %v4_d2f0, i32* %r3.global-to-local, align 4
  %v1_d2f4 = load i32, i32* @r4, align 4
  %v9_d2f4 = icmp eq i32 %v6_ccb4, %v1_d2f4
  store i1 %v9_d2f4, i1* %cpsr_z.global-to-local, align 1
  %v1_d2f8 = trunc i32 %v4_d2f0 to i8
  %v2_d2f8 = load i32, i32* @r6, align 4
  %v3_d2f8 = add i32 %v2_d2f8, 3
  %v4_d2f8 = inttoptr i32 %v3_d2f8 to i8*
  store i8 %v1_d2f8, i8* %v4_d2f8, align 1
  %v3_d2fc = load i32, i32* @r6, align 4
  %v4_d2fc = add i32 %v3_d2fc, 2
  %v5_d2fc = inttoptr i32 %v4_d2fc to i8*
  store i8 %v1_d2e8, i8* %v5_d2fc, align 1
  %v0_d300 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d300, label %dec_label_pc_d304, label %dec_label_pc_d2e8.dec_label_pc_d14c_crit_edge

dec_label_pc_d2e8.dec_label_pc_d14c_crit_edge:    ; preds = %dec_label_pc_d2e8
  %v1_d150.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d14c

dec_label_pc_d304:                                ; preds = %dec_label_pc_d2e8, %dec_label_pc_d140
  %v0_d304 = call i32 @function_105b4()
  store i32 %v6_ccd0, i32* %r2.global-to-local, align 4
  %v1_d30c = load i32, i32* @r4, align 4
  %v9_d30c = icmp eq i32 %v6_ccd0, %v1_d30c
  store i1 %v9_d30c, i1* %cpsr_z.global-to-local, align 1
  %v1_d310 = load i32, i32* @r6, align 4
  %v2_d310 = add i32 %v1_d310, 4
  %v3_d310 = inttoptr i32 %v2_d310 to i32*
  store i32 %v0_d304, i32* %v3_d310, align 4
  br i1 %v9_d30c, label %dec_label_pc_d318, label %dec_label_pc_d158

dec_label_pc_d318:                                ; preds = %dec_label_pc_d304, %dec_label_pc_d14c
  %v0_d318 = call i32 @function_105b4()
  store i32 %v1_cda0, i32* %r3.global-to-local, align 4
  store i1 %v2_d320, i1* %cpsr_z.global-to-local, align 1
  %v1_d324 = load i32, i32* @r6, align 4
  %v2_d324 = add i32 %v1_d324, 8
  %v3_d324 = inttoptr i32 %v2_d324 to i32*
  store i32 %v0_d318, i32* %v3_d324, align 4
  br i1 %v2_d320, label %dec_label_pc_d164, label %dec_label_pc_d32c

dec_label_pc_d32c:                                ; preds = %dec_label_pc_d158, %dec_label_pc_d318
  %v0_d32c = load i32, i32* @r5, align 4
  %v1_d32c = add i32 %v0_d32c, 40
  store i32 %v1_d32c, i32* @r4, align 4
  %v0_d334 = load i32, i32* @sl, align 4
  store i32 %v0_d334, i32* %r1.global-to-local, align 4
  %v2_d338 = call i32 @function_10668(i32 %v1_d32c, i32 %v0_d334)
  %v0_d33c = load i32, i32* @r7, align 4
  %v1_d33c = trunc i32 %v0_d33c to i8
  %v2_d33c = load i32, i32* @r4, align 4
  %v3_d33c = load i32, i32* @sl, align 4
  %v4_d33c = add i32 %v3_d33c, %v2_d33c
  %v5_d33c = inttoptr i32 %v4_d33c to i8*
  store i8 %v1_d33c, i8* %v5_d33c, align 1
  br label %dec_label_pc_d164

dec_label_pc_d344:                                ; preds = %dec_label_pc_d164, %dec_label_pc_d0cc
  %v2_d348 = call i32 @time(i32* null)
  store i32 %v2_cdc4, i32* %r1.global-to-local, align 4
  %v9_d350 = icmp eq i32 %v2_cdc4, %v2_d348
  store i1 %v9_d350, i1* %cpsr_z.global-to-local, align 1
  %v6_d354 = icmp slt i32 %v2_cdc4, %v2_d348
  br i1 %v6_d354, label %dec_label_pc_d358, label %dec_label_pc_d0cc

dec_label_pc_d358:                                ; preds = %dec_label_pc_d344, %dec_label_pc_cbb4, %dec_label_pc_d360
  %v29_d35c = phi i32 [ %v3_cdd8, %dec_label_pc_cbb4 ], [ %v1_d364, %dec_label_pc_d360 ], [ %v2_d348, %dec_label_pc_d344 ]
  store i32 %v18_cbb4, i32* %sb.global-to-local, align 4
  store i32 %v24_cbb4, i32* %fp.global-to-local, align 4
  ret i32 %v29_d35c

dec_label_pc_d360:                                ; preds = %dec_label_pc_cde8
  %v1_d364 = call i32 @close(i32 %v3_cdd8)
  br label %dec_label_pc_d358

; uselistorder directives
  uselistorder i32 %v4_d2f0, { 1, 0 }
  uselistorder i32 %v2_d280, { 1, 0 }
  uselistorder i32 %v3_d250, { 1, 0 }
  uselistorder i32 %v3_d22c, { 1, 3, 2, 0 }
  uselistorder i32 %v1_d1f8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_d184, { 1, 0, 2 }
  uselistorder i32 %v1_d0e0, { 1, 0, 2 }
  uselistorder i1 %v2_d320, { 2, 3, 1, 0 }
  uselistorder i1 %v3_d2a4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_d10c, { 2, 1, 0 }
  uselistorder i32 %v1_d0bc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_cef4, { 1, 0 }
  uselistorder i32 %v1_cee4, { 1, 2, 0 }
  uselistorder i32 %v1_cee0, { 2, 0, 1 }
  uselistorder i32 %v1_ced0, { 1, 0 }
  uselistorder i32 %v1_ceb0, { 1, 0 }
  uselistorder i32 %v1_ceac, { 1, 0 }
  uselistorder i32 %v1_cea8, { 1, 0 }
  uselistorder i32 %v1_ce84, { 1, 0 }
  uselistorder i1 %v2_ce34, { 1, 0, 2, 3 }
  uselistorder i32 %v3_ce28, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ce20, { 0, 1, 3, 2 }
  uselistorder i1 %v7_ce08, { 1, 0 }
  uselistorder i1 %v7_cddc, { 1, 0 }
  uselistorder i32 %v3_cdd8, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_cdc4, { 2, 1, 0 }
  uselistorder i32 %v6_cdb4, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_cda0, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_ccd0, { 3, 2, 1, 0 }
  uselistorder i32 %v6_ccb4, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_cc64, { 1, 0 }
  uselistorder i8 %v5_cc54, { 1, 0 }
  uselistorder i32 %v6_cc38, { 1, 0 }
  uselistorder i32 %v6_cbfc, { 1, 0 }
  uselistorder i32 %v4_cbe4, { 0, 3, 1, 2 }
  uselistorder i32 %v1_cbb8, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 51, 50, 53, 52, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_d358, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d32c, { 1, 0 }
  uselistorder label %dec_label_pc_d164, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d0cc, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d370(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d370:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_d370 = load i32, i32* @r4, align 4
  %v6_d370 = load i32, i32* @r5, align 4
  %v9_d370 = load i32, i32* @r6, align 4
  %v12_d370 = load i32, i32* @r7, align 4
  %v1_d374 = urem i32 %arg2, 256
  store i32 %v1_d374, i32* %fp.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_d374, i32* %r0.global-to-local, align 4
  %v1_d38c = urem i32 %arg4, 256
  store i32 %v1_d38c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_d39c = call i32* @calloc(i32 %v1_d374, i32 4)
  %v3_d39c = ptrtoint i32* %v2_d39c to i32
  %v0_d3a0 = load i32, i32* @r5, align 4
  store i32 %v0_d3a0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d3a8 = load i32, i32* @r7, align 4
  store i32 %v0_d3a8, i32* %r3.global-to-local, align 4
  store i32 %v3_d39c, i32* %sb.global-to-local, align 4
  %v0_d3b0 = load i32, i32* @r4, align 4
  store i32 %v0_d3b0, i32* %r0.global-to-local, align 4
  %v4_d3b4 = inttoptr i32 %v0_d3a0 to i32*
  %v5_d3b4 = call i32 @function_8f6c(i32 %v0_d3b0, i32* %v4_d3b4, i32 2, i32 %v0_d3a8)
  %v1_d3c0 = urem i32 %v5_d3b4, 256
  store i32 %v1_d3c0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d3cc = load i32, i32* @r5, align 4
  store i32 %v0_d3cc, i32* %r1.global-to-local, align 4
  %v0_d3d0 = load i32, i32* @r4, align 4
  store i32 %v0_d3d0, i32* %r0.global-to-local, align 4
  %v5_d3d4 = trunc i32 %v5_d3b4 to i8
  %v6_d3d8 = inttoptr i32 %v0_d3cc to i32*
  %v7_d3d8 = call i32 @function_8f6c(i32 %v0_d3d0, i32* %v6_d3d8, i32 3, i32 65535)
  %v0_d3dc = load i32, i32* @r5, align 4
  store i32 %v0_d3dc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d3ec = load i32, i32* @r4, align 4
  store i32 %v0_d3ec, i32* %r0.global-to-local, align 4
  %v5_d3f0 = inttoptr i32 %v0_d3dc to i32*
  %v6_d3f0 = call i32 @function_8f6c(i32 %v0_d3ec, i32* %v5_d3f0, i32 4, i32 64)
  %v1_d3f8 = urem i32 %v6_d3f0, 256
  store i32 %v1_d3f8, i32* %ip.global-to-local, align 4
  %v0_d3fc = load i32, i32* @r5, align 4
  store i32 %v0_d3fc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d408 = load i32, i32* @r4, align 4
  store i32 %v0_d408, i32* %r0.global-to-local, align 4
  %v6_d410 = inttoptr i32 %v0_d3fc to i32*
  %v7_d410 = call i32 @function_8f6c(i32 %v0_d408, i32* %v6_d410, i32 5, i32 1)
  %v1_d41c = urem i32 %v7_d410, 256
  store i32 %v1_d41c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d428 = load i32, i32* @r5, align 4
  store i32 %v0_d428, i32* %r1.global-to-local, align 4
  %v0_d42c = load i32, i32* @r4, align 4
  store i32 %v0_d42c, i32* %r0.global-to-local, align 4
  %v5_d434 = inttoptr i32 %v0_d428 to i32*
  %v6_d434 = call i32 @function_8f6c(i32 %v0_d42c, i32* %v5_d434, i32 6, i32 65535)
  %v0_d440 = load i32, i32* @r5, align 4
  store i32 %v0_d440, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d44c = load i32, i32* @r4, align 4
  store i32 %v0_d44c, i32* %r0.global-to-local, align 4
  %v5_d450 = inttoptr i32 %v0_d440 to i32*
  %v6_d450 = call i32 @function_8f6c(i32 %v0_d44c, i32* %v5_d450, i32 7, i32 65535)
  %v0_d45c = load i32, i32* @r5, align 4
  store i32 %v0_d45c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_d468 = load i32, i32* @r4, align 4
  store i32 %v0_d468, i32* %r0.global-to-local, align 4
  %v5_d46c = inttoptr i32 %v0_d45c to i32*
  %v6_d46c = call i32 @function_8f6c(i32 %v0_d468, i32* %v5_d46c, i32 16, i32 65535)
  %v0_d470 = load i32, i32* @r5, align 4
  store i32 %v0_d470, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_d47c = load i32, i32* @r7, align 4
  store i32 %v0_d47c, i32* %r3.global-to-local, align 4
  %v0_d480 = load i32, i32* @r4, align 4
  store i32 %v0_d480, i32* %r0.global-to-local, align 4
  %v5_d484 = inttoptr i32 %v0_d470 to i32*
  %v6_d484 = call i32 @function_8f6c(i32 %v0_d480, i32* %v5_d484, i32 17, i32 %v0_d47c)
  %v0_d488 = load i32, i32* @r5, align 4
  store i32 %v0_d488, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_d494 = load i32, i32* @r7, align 4
  store i32 %v0_d494, i32* %r3.global-to-local, align 4
  %v0_d498 = load i32, i32* @r4, align 4
  store i32 %v0_d498, i32* %r0.global-to-local, align 4
  %v5_d49c = inttoptr i32 %v0_d488 to i32*
  %v6_d49c = call i32 @function_8f6c(i32 %v0_d498, i32* %v5_d49c, i32 10, i32 %v0_d494)
  %v0_d4a0 = load i32, i32* @r5, align 4
  store i32 %v0_d4a0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v0_d4ac = load i32, i32* @r7, align 4
  store i32 %v0_d4ac, i32* %r3.global-to-local, align 4
  %v0_d4b0 = load i32, i32* @r4, align 4
  store i32 %v0_d4b0, i32* %r0.global-to-local, align 4
  %v5_d4b4 = inttoptr i32 %v0_d4a0 to i32*
  %v6_d4b4 = call i32 @function_8f6c(i32 %v0_d4b0, i32* %v5_d4b4, i32 11, i32 %v0_d4ac)
  %v0_d4b8 = load i32, i32* @r5, align 4
  store i32 %v0_d4b8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_d4c4 = load i32, i32* @r7, align 4
  store i32 %v0_d4c4, i32* %r3.global-to-local, align 4
  %v0_d4c8 = load i32, i32* @r4, align 4
  store i32 %v0_d4c8, i32* %r0.global-to-local, align 4
  %v5_d4cc = inttoptr i32 %v0_d4b8 to i32*
  %v6_d4cc = call i32 @function_8f6c(i32 %v0_d4c8, i32* %v5_d4cc, i32 12, i32 %v0_d4c4)
  %v0_d4d0 = load i32, i32* @r5, align 4
  store i32 %v0_d4d0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_d4dc = load i32, i32* @r7, align 4
  store i32 %v0_d4dc, i32* %r3.global-to-local, align 4
  %v0_d4e0 = load i32, i32* @r4, align 4
  store i32 %v0_d4e0, i32* %r0.global-to-local, align 4
  %v5_d4e4 = inttoptr i32 %v0_d4d0 to i32*
  %v6_d4e4 = call i32 @function_8f6c(i32 %v0_d4e0, i32* %v5_d4e4, i32 13, i32 %v0_d4dc)
  %v0_d4e8 = load i32, i32* @r5, align 4
  store i32 %v0_d4e8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d4f8 = load i32, i32* @r4, align 4
  store i32 %v0_d4f8, i32* %r0.global-to-local, align 4
  %v5_d4fc = inttoptr i32 %v0_d4e8 to i32*
  %v6_d4fc = call i32 @function_8f6c(i32 %v0_d4f8, i32* %v5_d4fc, i32 14, i32 1)
  %v0_d500 = load i32, i32* @r5, align 4
  store i32 %v0_d500, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_d50c = load i32, i32* @r7, align 4
  store i32 %v0_d50c, i32* %r3.global-to-local, align 4
  %v0_d510 = load i32, i32* @r4, align 4
  store i32 %v0_d510, i32* %r0.global-to-local, align 4
  %v5_d514 = inttoptr i32 %v0_d500 to i32*
  %v6_d514 = call i32 @function_8f6c(i32 %v0_d510, i32* %v5_d514, i32 15, i32 %v0_d50c)
  %v0_d51c = load i32, i32* @r5, align 4
  store i32 %v0_d51c, i32* %r1.global-to-local, align 4
  %v2_d520 = load i32, i32* @global_var_1c21c.133, align 4
  store i32 %v2_d520, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_d52c = load i32, i32* @r4, align 4
  store i32 %v0_d52c, i32* %r0.global-to-local, align 4
  %v5_d530 = inttoptr i32 %v0_d51c to i32*
  %v6_d530 = call i32 @function_8f00(i32 %v0_d52c, i32* %v5_d530, i32 24, i32 %v2_d520, i32 %v6_d514)
  %v0_d538 = load i32, i32* @r7, align 4
  store i32 %v0_d538, i32* %r0.global-to-local, align 4
  %v1_d53c = inttoptr i32 %v0_d538 to i32*
  %v2_d53c = call i32 @time(i32* %v1_d53c)
  %v1_d540 = load i32, i32* @r6, align 4
  %v2_d540 = add i32 %v1_d540, %v2_d53c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_d554 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_d554, i32* %r0.global-to-local, align 4
  %v7_d558 = icmp eq i32 %v3_d554, -1
  store i1 %v7_d558, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d554, i32* %sl.global-to-local, align 4
  br i1 %v7_d558, label %dec_label_pc_dad4, label %dec_label_pc_d564

dec_label_pc_d564:                                ; preds = %dec_label_pc_d370
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d56c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d56c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_d574 = load i32, i32* @r7, align 4
  store i32 %v0_d574, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d580 = call i32 @setsockopt(i32 %v0_d574, i32 3, i32 %v6_d56c, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_d580, i32* %r0.global-to-local, align 4
  %v7_d584 = icmp eq i32 %v6_d580, -1
  store i1 %v7_d584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d584, label %dec_label_pc_dadc, label %dec_label_pc_d58c

dec_label_pc_d58c:                                ; preds = %dec_label_pc_d564
  %v3_d594 = mul i32 %v6_d450, 65536
  store i32 %v3_d594, i32* %r5.global-to-local, align 4
  %v3_d5a0 = mul i32 %v6_d434, 65536
  store i32 %v3_d5a0, i32* %r4.global-to-local, align 4
  %v3_d5a4 = urem i32 %v7_d3d8, 65536
  store i32 %v3_d5a4, i32* %ip.global-to-local, align 4
  %v3_d5a8 = urem i32 %v6_d434, 65536
  store i32 %v3_d5a8, i32* %r0.global-to-local, align 4
  %v3_d5ac = urem i32 %v6_d450, 65536
  store i32 %v3_d5ac, i32* %r2.global-to-local, align 4
  %v1_d5b0 = urem i32 %v6_d49c, 256
  store i32 %v1_d5b0, i32* %r3.global-to-local, align 4
  %v0_d5b4 = load i32, i32* %fp.global-to-local, align 4
  %v2_d5b4 = icmp eq i32 %v0_d5b4, 0
  store i1 %v2_d5b4, i1* %cpsr_z.global-to-local, align 1
  %v0_d5b8 = load i32, i32* @r7, align 4
  store i32 %v0_d5b8, i32* %stack_var_-40, align 4
  %tmp70 = icmp slt i32 %v0_d5b4, 1
  br i1 %tmp70, label %dec_label_pc_d874.preheader, label %dec_label_pc_d5d0

dec_label_pc_d5d0:                                ; preds = %dec_label_pc_d58c
  %v1_d5d8 = urem i32 %v7_d3d8, 256
  %v1_d5ec = urem i32 %v6_d450, 256
  %tmp71 = mul i32 %v6_d46c, 256
  %v1_d5f4 = and i32 %tmp71, 65280
  %tmp72 = udiv i32 %v6_d46c, 256
  %v4_d5f8 = urem i32 %tmp72, 256
  %v5_d5f8 = or i32 %v4_d5f8, %v1_d5f4
  %v3_d5fc = mul nuw nsw i32 %v1_d5ec, 256
  %tmp73 = udiv i32 %v6_d450, 256
  %v4_d608 = urem i32 %tmp73, 256
  %v5_d608 = or i32 %v4_d608, %v3_d5fc
  store i32 %v5_d608, i32* %r6.global-to-local, align 4
  %v1_d5e8 = mul i32 %v6_d434, 256
  %v3_d60c = and i32 %v1_d5e8, 65280
  store i32 %v3_d60c, i32* %r1.global-to-local, align 4
  %tmp74 = udiv i32 %v6_d434, 256
  %v1_d620 = urem i32 %v6_d49c, 2
  %tmp75 = udiv i32 %v7_d3d8, 256
  %v1_d62c = urem i32 %v6_d4b4, 2
  %v1_d630 = urem i32 %v6_d4e4, 2
  %sext12 = mul i32 %tmp74, 16777216
  %v4_d64c = sdiv i32 %sext12, 16777216
  %v1_d650 = urem i32 %v6_d4cc, 2
  %v1_d654 = urem i32 %v6_d4fc, 2
  %v1_d660 = urem i32 %v6_d514, 2
  store i32 %v1_d660, i32* %r0.global-to-local, align 4
  store i32 %v1_d5d8, i32* %r2.global-to-local, align 4
  %v3_d668 = ashr i32 %sext12, 31
  store i32 %v3_d668, i32* %r3.global-to-local, align 4
  store i32 %v1_d5ec, i32* %ip.global-to-local, align 4
  %v5_d67c = trunc i32 %v3_d668 to i8
  store i32 %v0_d5b8, i32* %r4.global-to-local, align 4
  store i32 %v0_d5b8, i32* %r5.global-to-local, align 4
  store i32 6, i32* %r7.global-to-local, align 4
  %sext = mul i32 %v6_d3f0, 16777216
  %v4_d6d8 = sdiv i32 %sext, 16777216
  %sext9 = mul i32 %v7_d3d8, 16777216
  %v4_d6e4 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp75, 16777216
  %v4_d6e8 = sdiv i32 %sext10, 16777216
  %tmp = sub nsw i32 0, %v1_d620
  %v4_d744 = and i32 %tmp, 32
  %tmp79 = sub nsw i32 0, %v1_d62c
  %v4_d758 = and i32 %tmp79, 16
  %tmp80 = sub nsw i32 0, %v1_d650
  %v4_d76c = and i32 %tmp80, 8
  %tmp81 = sub nsw i32 0, %v1_d630
  %v4_d780 = and i32 %tmp81, 4
  %tmp82 = sub nsw i32 0, %v1_d654
  %v3_d794 = and i32 %tmp82, 2
  %sext11 = mul i32 %v6_d450, 16777216
  %v7_d7c4 = sdiv i32 %sext11, 16777216
  br label %dec_label_pc_d690

dec_label_pc_d690:                                ; preds = %bb77, %dec_label_pc_d5d0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_d698 = call i32* @calloc(i32 128, i32 1)
  %v4_d698 = ptrtoint i32* %v2_d698 to i32
  store i32 %v4_d698, i32* %r0.global-to-local, align 4
  %v3_d69c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d69c, i32* %r2.global-to-local, align 4
  %v1_d6a0 = load i32, i32* %sb.global-to-local, align 4
  %v2_d6a0 = load i32, i32* %r4.global-to-local, align 4
  %v5_d6a0 = mul i32 %v2_d6a0, 4
  %v6_d6a0 = add i32 %v5_d6a0, %v1_d6a0
  %v7_d6a0 = inttoptr i32 %v6_d6a0 to i32*
  store i32 %v4_d698, i32* %v7_d6a0, align 4
  %v0_d6a4 = load i32, i32* %sb.global-to-local, align 4
  %v1_d6a4 = load i32, i32* %r2.global-to-local, align 4
  %v4_d6a4 = mul i32 %v1_d6a4, 4
  %v5_d6a4 = add i32 %v4_d6a4, %v0_d6a4
  %v6_d6a4 = inttoptr i32 %v5_d6a4 to i32*
  %v7_d6a4 = load i32, i32* %v6_d6a4, align 4
  store i32 %v7_d6a4, i32* %r4.global-to-local, align 4
  %v1_d6a8 = inttoptr i32 %v7_d6a4 to i8*
  %v2_d6a8 = load i8, i8* %v1_d6a8, align 1
  %tmp83 = urem i8 %v2_d6a8, 16
  %v1_d6ac = zext i8 %tmp83 to i32
  %v1_d6b0 = or i32 %v1_d6ac, 64
  store i32 %v1_d6b0, i32* %r3.global-to-local, align 4
  %v1_d6b4 = trunc i32 %v1_d6b0 to i8
  store i8 %v1_d6b4, i8* %v1_d6a8, align 1
  %v0_d6b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_d6b8 = inttoptr i32 %v0_d6b8 to i8*
  %v2_d6b8 = load i8, i8* %v1_d6b8, align 1
  %v1_d6bc = and i8 %v2_d6b8, -16
  %v1_d6c0 = or i8 %v1_d6bc, 5
  store i32 %v1_d41c, i32* %r0.global-to-local, align 4
  store i8 %v1_d6c0, i8* %v1_d6b8, align 1
  %v2_d6d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d6d0 = add i32 %v2_d6d0, 1
  %v4_d6d0 = inttoptr i32 %v3_d6d0 to i8*
  store i8 %v5_d3d4, i8* %v4_d6d0, align 1
  %v0_d6d4 = load i32, i32* %r0.global-to-local, align 4
  %v2_d6d4 = icmp eq i32 %v0_d6d4, 0
  store i1 %v2_d6d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_d6d8, i32* %r0.global-to-local, align 4
  %v2_d6e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d6e0 = add i32 %v2_d6e0, 3
  %v4_d6e0 = inttoptr i32 %v3_d6e0 to i8*
  store i8 60, i8* %v4_d6e0, align 1
  store i32 %v4_d6e4, i32* %ip.global-to-local, align 4
  store i32 %v4_d6e8, i32* %r3.global-to-local, align 4
  %v0_d6ec = load i32, i32* %r0.global-to-local, align 4
  %v1_d6ec = trunc i32 %v0_d6ec to i8
  %v2_d6ec = load i32, i32* %r4.global-to-local, align 4
  %v3_d6ec = add i32 %v2_d6ec, 8
  %v4_d6ec = inttoptr i32 %v3_d6ec to i8*
  store i8 %v1_d6ec, i8* %v4_d6ec, align 1
  %v0_d6f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_d6f0 = trunc i32 %v0_d6f0 to i8
  %v2_d6f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d6f0 = add i32 %v2_d6f0, 9
  %v4_d6f0 = inttoptr i32 %v3_d6f0 to i8*
  store i8 %v1_d6f0, i8* %v4_d6f0, align 1
  %v3_d6f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d6f4, i32* %r2.global-to-local, align 4
  %v0_d6f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d6f8 = trunc i32 %v0_d6f8 to i8
  %v2_d6f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d6f8 = add i32 %v2_d6f8, 4
  %v4_d6f8 = inttoptr i32 %v3_d6f8 to i8*
  store i8 %v1_d6f8, i8* %v4_d6f8, align 1
  %v0_d6fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d6fc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d690
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d700 = load i32, i32* %r4.global-to-local, align 4
  %v4_d700 = add i32 %v3_d700, 6
  %v5_d700 = inttoptr i32 %v4_d700 to i8*
  store i8 64, i8* %v5_d700, align 1
  %v0_d720.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d690, %bb
  %v0_d720 = phi i1 [ true, %dec_label_pc_d690 ], [ %v0_d720.pre, %bb ]
  %v0_d704 = load i32, i32* %r2.global-to-local, align 4
  %v5_d708 = mul i32 %v0_d704, 24
  store i32 %v5_d708, i32* %r3.global-to-local, align 4
  store i32 %v6_d530, i32* %r2.global-to-local, align 4
  %v1_d710 = load i32, i32* %r4.global-to-local, align 4
  %v2_d710 = add i32 %v1_d710, 12
  %v3_d710 = inttoptr i32 %v2_d710 to i32*
  store i32 %v6_d530, i32* %v3_d710, align 4
  %v0_d714 = load i32, i32* %r3.global-to-local, align 4
  %v1_d714 = load i32, i32* @r8, align 4
  %v2_d714 = add i32 %v1_d714, %v0_d714
  store i32 %v2_d714, i32* %r3.global-to-local, align 4
  %v1_d718 = add i32 %v2_d714, 16
  %v2_d718 = inttoptr i32 %v1_d718 to i32*
  %v3_d718 = load i32, i32* %v2_d718, align 4
  store i32 %v3_d718, i32* %r2.global-to-local, align 4
  store i32 %v4_d64c, i32* %r3.global-to-local, align 4
  br i1 %v0_d720, label %bb77, label %bb76

bb76:                                             ; preds = %.thread
  %v1_d720 = load i32, i32* %r5.global-to-local, align 4
  %v2_d720 = trunc i32 %v1_d720 to i8
  %v3_d720 = load i32, i32* %r4.global-to-local, align 4
  %v4_d720 = add i32 %v3_d720, 7
  %v5_d720 = inttoptr i32 %v4_d720 to i8*
  store i8 %v2_d720, i8* %v5_d720, align 1
  br label %bb77

bb77:                                             ; preds = %.thread, %bb76
  %v0_d724 = load i32, i32* %ip.global-to-local, align 4
  %v1_d724 = trunc i32 %v0_d724 to i8
  %v2_d724 = load i32, i32* %r4.global-to-local, align 4
  %v3_d724 = add i32 %v2_d724, 5
  %v4_d724 = inttoptr i32 %v3_d724 to i8*
  store i8 %v1_d724, i8* %v4_d724, align 1
  %v0_d728 = load i32, i32* %r5.global-to-local, align 4
  %v1_d728 = trunc i32 %v0_d728 to i8
  %v2_d728 = load i32, i32* %r4.global-to-local, align 4
  %v3_d728 = add i32 %v2_d728, 2
  %v4_d728 = inttoptr i32 %v3_d728 to i8*
  store i8 %v1_d728, i8* %v4_d728, align 1
  %v0_d72c = load i32, i32* %r2.global-to-local, align 4
  %v1_d72c = load i32, i32* %r4.global-to-local, align 4
  %v2_d72c = add i32 %v1_d72c, 16
  %v3_d72c = inttoptr i32 %v2_d72c to i32*
  store i32 %v0_d72c, i32* %v3_d72c, align 4
  %v0_d730 = load i32, i32* %r3.global-to-local, align 4
  %v1_d730 = trunc i32 %v0_d730 to i8
  %v2_d730 = load i32, i32* %r4.global-to-local, align 4
  %v3_d730 = add i32 %v2_d730, 20
  %v4_d730 = inttoptr i32 %v3_d730 to i8*
  store i8 %v1_d730, i8* %v4_d730, align 1
  %v0_d734 = load i32, i32* %r4.global-to-local, align 4
  %v1_d734 = add i32 %v0_d734, 20
  store i32 %v1_d734, i32* %r1.global-to-local, align 4
  %v1_d738 = add i32 %v0_d734, 33
  %v2_d738 = inttoptr i32 %v1_d738 to i8*
  %v3_d738 = load i8, i8* %v2_d738, align 1
  %v4_d738 = zext i8 %v3_d738 to i32
  store i32 %v1_d620, i32* %ip.global-to-local, align 4
  %v1_d740 = and i32 %v4_d738, 223
  %v5_d744 = or i32 %v1_d740, %v4_d744
  store i32 %v5_d744, i32* %r3.global-to-local, align 4
  %v1_d748 = trunc i32 %v5_d744 to i8
  store i8 %v1_d748, i8* %v2_d738, align 1
  %v0_d74c = load i32, i32* %r1.global-to-local, align 4
  %v1_d74c = add i32 %v0_d74c, 13
  %v2_d74c = inttoptr i32 %v1_d74c to i8*
  %v3_d74c = load i8, i8* %v2_d74c, align 1
  %v4_d74c = zext i8 %v3_d74c to i32
  store i32 %v1_d62c, i32* %r0.global-to-local, align 4
  %v1_d754 = and i32 %v4_d74c, 239
  %v5_d758 = or i32 %v1_d754, %v4_d758
  store i32 %v5_d758, i32* %r2.global-to-local, align 4
  %v1_d75c = trunc i32 %v5_d758 to i8
  store i8 %v1_d75c, i8* %v2_d74c, align 1
  %v0_d760 = load i32, i32* %r1.global-to-local, align 4
  %v1_d760 = add i32 %v0_d760, 13
  %v2_d760 = inttoptr i32 %v1_d760 to i8*
  %v3_d760 = load i8, i8* %v2_d760, align 1
  %v4_d760 = zext i8 %v3_d760 to i32
  store i32 %v1_d650, i32* %r2.global-to-local, align 4
  %v1_d768 = and i32 %v4_d760, 247
  %v5_d76c = or i32 %v1_d768, %v4_d76c
  store i32 %v5_d76c, i32* %r3.global-to-local, align 4
  %v1_d770 = trunc i32 %v5_d76c to i8
  store i8 %v1_d770, i8* %v2_d760, align 1
  %v0_d774 = load i32, i32* %r1.global-to-local, align 4
  %v1_d774 = add i32 %v0_d774, 13
  %v2_d774 = inttoptr i32 %v1_d774 to i8*
  %v3_d774 = load i8, i8* %v2_d774, align 1
  %v4_d774 = zext i8 %v3_d774 to i32
  store i32 %v1_d630, i32* %r3.global-to-local, align 4
  %v1_d77c = and i32 %v4_d774, 251
  %v5_d780 = or i32 %v1_d77c, %v4_d780
  store i32 %v5_d780, i32* %r2.global-to-local, align 4
  %v1_d784 = trunc i32 %v5_d780 to i8
  store i8 %v1_d784, i8* %v2_d774, align 1
  %v0_d788 = load i32, i32* %r1.global-to-local, align 4
  %v1_d788 = add i32 %v0_d788, 13
  %v2_d788 = inttoptr i32 %v1_d788 to i8*
  %v3_d788 = load i8, i8* %v2_d788, align 1
  %v4_d788 = zext i8 %v3_d788 to i32
  store i32 %v1_d654, i32* %ip.global-to-local, align 4
  %v1_d790 = and i32 %v4_d788, 253
  %v4_d794 = or i32 %v1_d790, %v3_d794
  store i32 %v4_d794, i32* %r3.global-to-local, align 4
  %v1_d798 = trunc i32 %v4_d794 to i8
  store i8 %v1_d798, i8* %v2_d788, align 1
  %v0_d79c = load i32, i32* %r1.global-to-local, align 4
  %v1_d79c = add i32 %v0_d79c, 12
  %v2_d79c = inttoptr i32 %v1_d79c to i8*
  %v3_d79c = load i8, i8* %v2_d79c, align 1
  %v4_d79c = zext i8 %v3_d79c to i32
  store i32 %v4_d79c, i32* %r2.global-to-local, align 4
  %v1_d7a0 = add i32 %v0_d79c, 13
  %v2_d7a0 = inttoptr i32 %v1_d7a0 to i8*
  %v3_d7a0 = load i8, i8* %v2_d7a0, align 1
  %v4_d7a0 = zext i8 %v3_d7a0 to i32
  %tmp84 = urem i8 %v3_d79c, 16
  %v1_d7a8 = zext i8 %tmp84 to i32
  %v1_d7ac = and i32 %v4_d7a0, 254
  %v2_d7b0 = or i32 %v1_d7ac, %v1_d660
  %v1_d7b4 = or i32 %v1_d7a8, 160
  store i32 %v1_d7b4, i32* %r2.global-to-local, align 4
  %v1_d7b8 = trunc i32 %v2_d7b0 to i8
  store i8 %v1_d7b8, i8* %v2_d7a0, align 1
  %v0_d7bc = load i32, i32* %r2.global-to-local, align 4
  %v1_d7bc = trunc i32 %v0_d7bc to i8
  %v2_d7bc = load i32, i32* %r1.global-to-local, align 4
  %v3_d7bc = add i32 %v2_d7bc, 12
  %v4_d7bc = inttoptr i32 %v3_d7bc to i8*
  store i8 %v1_d7bc, i8* %v4_d7bc, align 1
  store i32 %v7_d7c4, i32* %r3.global-to-local, align 4
  store i32 %v5_d5f8, i32* %ip.global-to-local, align 4
  %v2_d7cc = load i32, i32* %r1.global-to-local, align 4
  %v3_d7cc = add i32 %v2_d7cc, 1
  %v4_d7cc = inttoptr i32 %v3_d7cc to i8*
  store i8 %v5_d67c, i8* %v4_d7cc, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_d7d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d7d8 = trunc i32 %v0_d7d8 to i8
  %v2_d7d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_d7d8 = add i32 %v2_d7d8, 3
  %v4_d7d8 = inttoptr i32 %v3_d7d8 to i8*
  store i8 %v1_d7d8, i8* %v4_d7d8, align 1
  %v0_d7dc = load i32, i32* %ip.global-to-local, align 4
  %v1_d7dc = load i32, i32* %r1.global-to-local, align 4
  %v2_d7dc = add i32 %v1_d7dc, 4
  %v3_d7dc = inttoptr i32 %v2_d7dc to i32*
  store i32 %v0_d7dc, i32* %v3_d7dc, align 4
  %v0_d7e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_d7e0 = trunc i32 %v0_d7e0 to i8
  %v2_d7e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_d7e0 = add i32 %v2_d7e0, 2
  %v4_d7e0 = inttoptr i32 %v3_d7e0 to i8*
  store i8 %v1_d7e0, i8* %v4_d7e0, align 1
  %v0_d7e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d7e4 = trunc i32 %v0_d7e4 to i8
  %v2_d7e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_d7e4 = add i32 %v2_d7e4, 41
  %v4_d7e4 = inttoptr i32 %v3_d7e4 to i8*
  store i8 %v1_d7e4, i8* %v4_d7e4, align 1
  %v0_d7e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_d7e8 = trunc i32 %v0_d7e8 to i8
  %v2_d7e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d7e8 = add i32 %v2_d7e8, 40
  %v4_d7e8 = inttoptr i32 %v3_d7e8 to i8*
  store i8 %v1_d7e8, i8* %v4_d7e8, align 1
  %v0_d7ec = call i32 @function_105b4()
  %v1_d7f0 = urem i32 %v0_d7ec, 16
  %v1_d7f4 = or i32 %v1_d7f0, 1392
  %v1_d7f8 = add nuw nsw i32 %v1_d7f4, 8
  %v3_d7fc = mul nuw nsw i32 %v1_d7f8, 65536
  store i32 %v3_d7fc, i32* %r0.global-to-local, align 4
  %v3_d800 = mul nuw nsw i32 %v1_d7f8, 256
  %v1_d804 = and i32 %v3_d800, 65280
  %v5_d808 = or i32 %v1_d804, 5
  store i32 %v5_d808, i32* %r3.global-to-local, align 4
  %v2_d80c = load i32, i32* %r4.global-to-local, align 4
  %v3_d80c = add i32 %v2_d80c, 42
  %v4_d80c = inttoptr i32 %v3_d80c to i8*
  store i8 5, i8* %v4_d80c, align 1
  %v0_d810 = load i32, i32* %r3.global-to-local, align 4
  %v3_d810 = sdiv i32 %v0_d810, 256
  store i32 %v3_d810, i32* %r1.global-to-local, align 4
  %v0_d814 = load i32, i32* %r4.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v1_d81c = trunc i32 %v3_d810 to i8
  %v3_d81c = add i32 %v0_d814, 43
  %v4_d81c = inttoptr i32 %v3_d81c to i8*
  store i8 %v1_d81c, i8* %v4_d81c, align 1
  store i32 2, i32* %ip.global-to-local, align 4
  %v0_d824 = load i32, i32* %r3.global-to-local, align 4
  %v1_d824 = trunc i32 %v0_d824 to i8
  %v2_d824 = load i32, i32* %r4.global-to-local, align 4
  %v3_d824 = add i32 %v2_d824, 46
  %v4_d824 = inttoptr i32 %v3_d824 to i8*
  store i8 %v1_d824, i8* %v4_d824, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_d830 = load i32, i32* %r4.global-to-local, align 4
  %v3_d830 = add i32 %v2_d830, 47
  %v4_d830 = inttoptr i32 %v3_d830 to i8*
  store i8 10, i8* %v4_d830, align 1
  %v0_d834 = load i32, i32* %r3.global-to-local, align 4
  %v1_d834 = trunc i32 %v0_d834 to i8
  %v2_d834 = load i32, i32* %r4.global-to-local, align 4
  %v3_d834 = add i32 %v2_d834, 44
  %v4_d834 = inttoptr i32 %v3_d834 to i8*
  store i8 %v1_d834, i8* %v4_d834, align 1
  %v0_d838 = load i32, i32* %ip.global-to-local, align 4
  %v1_d838 = trunc i32 %v0_d838 to i8
  %v2_d838 = load i32, i32* %r4.global-to-local, align 4
  %v3_d838 = add i32 %v2_d838, 45
  %v4_d838 = inttoptr i32 %v3_d838 to i8*
  store i8 %v1_d838, i8* %v4_d838, align 1
  %v0_d83c = call i32 @function_105b4()
  store i32 %v0_d83c, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_d848 = load i32, i32* %r4.global-to-local, align 4
  %v2_d848 = add i32 %v1_d848, 48
  %v3_d848 = inttoptr i32 %v2_d848 to i32*
  store i32 %v0_d83c, i32* %v3_d848, align 4
  %v0_d84c = load i32, i32* %r3.global-to-local, align 4
  %v1_d84c = trunc i32 %v0_d84c to i8
  %v2_d84c = load i32, i32* %r4.global-to-local, align 4
  %v3_d84c = add i32 %v2_d84c, 56
  %v4_d84c = inttoptr i32 %v3_d84c to i8*
  store i8 %v1_d84c, i8* %v4_d84c, align 1
  %v0_d850 = load i32, i32* %r2.global-to-local, align 4
  %v1_d850 = trunc i32 %v0_d850 to i8
  %v2_d850 = load i32, i32* %r4.global-to-local, align 4
  %v3_d850 = add i32 %v2_d850, 58
  %v4_d850 = inttoptr i32 %v3_d850 to i8*
  store i8 %v1_d850, i8* %v4_d850, align 1
  %v0_d854 = load i32, i32* %r7.global-to-local, align 4
  %v1_d854 = trunc i32 %v0_d854 to i8
  %v2_d854 = load i32, i32* %r4.global-to-local, align 4
  %v3_d854 = add i32 %v2_d854, 59
  %v4_d854 = inttoptr i32 %v3_d854 to i8*
  store i8 %v1_d854, i8* %v4_d854, align 1
  %v0_d858 = load i32, i32* %r5.global-to-local, align 4
  %v1_d858 = load i32, i32* %r4.global-to-local, align 4
  %v2_d858 = add i32 %v1_d858, 52
  %v3_d858 = inttoptr i32 %v2_d858 to i32*
  store i32 %v0_d858, i32* %v3_d858, align 4
  %v0_d85c = load i32, i32* %r2.global-to-local, align 4
  %v1_d85c = trunc i32 %v0_d85c to i8
  %v2_d85c = load i32, i32* %r4.global-to-local, align 4
  %v3_d85c = add i32 %v2_d85c, 57
  %v4_d85c = inttoptr i32 %v3_d85c to i8*
  store i8 %v1_d85c, i8* %v4_d85c, align 1
  %v3_d860 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d860, i32* %r3.global-to-local, align 4
  %v1_d864 = add i32 %v3_d860, 1
  store i32 %v1_d864, i32* %r4.global-to-local, align 4
  %v0_d868 = load i32, i32* %fp.global-to-local, align 4
  %v9_d868 = icmp eq i32 %v0_d868, %v1_d864
  store i1 %v9_d868, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d864, i32* %stack_var_-40, align 4
  %v8_d870 = icmp sgt i32 %v0_d868, %v1_d864
  br i1 %v8_d870, label %dec_label_pc_d690, label %dec_label_pc_d874.preheader

dec_label_pc_d874.preheader:                      ; preds = %bb77, %dec_label_pc_d58c
  %v0_d87815 = phi i32 [ %v0_d5b4, %dec_label_pc_d58c ], [ %v0_d868, %bb77 ]
  %v2_d894 = icmp eq i32 %v6_d530, -1
  %v7_d894 = icmp eq i32 %v6_d530, -1
  %v3_da24 = icmp eq i32 %v3_d5a4, 65535
  %v2_daa0 = icmp eq i32 %v1_d5b0, 0
  br label %dec_label_pc_d874

dec_label_pc_d874:                                ; preds = %dec_label_pc_dac0.dec_label_pc_d874_crit_edge, %dec_label_pc_d874.preheader
  %v0_d878 = phi i32 [ %v0_d878.pre, %dec_label_pc_dac0.dec_label_pc_d874_crit_edge ], [ %v0_d87815, %dec_label_pc_d874.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_d878 = icmp eq i32 %v0_d878, 0
  store i1 %v2_d878, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp78 = icmp slt i32 %v0_d878, 1
  br i1 %tmp78, label %dec_label_pc_dac0, label %dec_label_pc_d884

dec_label_pc_d884:                                ; preds = %dec_label_pc_d874
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_d98c

dec_label_pc_d890:                                ; preds = %dec_label_pc_d98c
  store i32 %v6_d530, i32* %r0.global-to-local, align 4
  store i1 %v7_d894, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d894, label %dec_label_pc_da14, label %dec_label_pc_d89c

dec_label_pc_d89c:                                ; preds = %dec_label_pc_d9ac, %dec_label_pc_d890
  store i32 %v3_d5a4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_da24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_da24, label %dec_label_pc_da30, label %dec_label_pc_d8b0

dec_label_pc_d8b0:                                ; preds = %dec_label_pc_da14.dec_label_pc_d8b0_crit_edge, %dec_label_pc_d89c
  %v1_d8b4 = phi i32 [ %v1_d8b4.pre, %dec_label_pc_da14.dec_label_pc_d8b0_crit_edge ], [ 65535, %dec_label_pc_d89c ]
  store i32 %v3_d5a8, i32* %r3.global-to-local, align 4
  %v9_d8b4 = icmp eq i32 %v3_d5a8, %v1_d8b4
  store i1 %v9_d8b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d8b4, label %dec_label_pc_da4c, label %dec_label_pc_d8bc

dec_label_pc_d8bc:                                ; preds = %dec_label_pc_da30.dec_label_pc_d8bc_crit_edge, %dec_label_pc_d8b0
  %v1_d8c0 = phi i32 [ %v1_d8c0.pre, %dec_label_pc_da30.dec_label_pc_d8bc_crit_edge ], [ %v1_d8b4, %dec_label_pc_d8b0 ]
  store i32 %v3_d5ac, i32* %ip.global-to-local, align 4
  %v9_d8c0 = icmp eq i32 %v3_d5ac, %v1_d8c0
  store i1 %v9_d8c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d8c0, label %dec_label_pc_da68, label %dec_label_pc_d8c8

dec_label_pc_d8c8:                                ; preds = %dec_label_pc_da4c.dec_label_pc_d8c8_crit_edge, %dec_label_pc_d8bc
  %v1_d8cc = phi i32 [ %v1_d8cc.pre, %dec_label_pc_da4c.dec_label_pc_d8c8_crit_edge ], [ %v1_d8c0, %dec_label_pc_d8bc ]
  store i32 %v6_d46c, i32* %r0.global-to-local, align 4
  %v9_d8cc = icmp eq i32 %v6_d46c, %v1_d8cc
  store i1 %v9_d8cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d8cc, label %dec_label_pc_da84, label %dec_label_pc_d8d4

dec_label_pc_d8d4:                                ; preds = %dec_label_pc_da68.dec_label_pc_d8d4_crit_edge, %dec_label_pc_d8c8
  %v1_d8d8 = phi i32 [ %v1_d8d8.pre, %dec_label_pc_da68.dec_label_pc_d8d4_crit_edge ], [ %v1_d8cc, %dec_label_pc_d8c8 ]
  store i32 %v6_d484, i32* %r2.global-to-local, align 4
  %v9_d8d8 = icmp eq i32 %v6_d484, %v1_d8d8
  store i1 %v9_d8d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d8d8, label %dec_label_pc_da98, label %dec_label_pc_d8e0

dec_label_pc_d8e0:                                ; preds = %dec_label_pc_da84, %dec_label_pc_d8d4
  store i32 %v1_d5b0, i32* %r3.global-to-local, align 4
  store i1 %v2_daa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_daa0, label %dec_label_pc_d8ec, label %dec_label_pc_daac

dec_label_pc_d8ec:                                ; preds = %dec_label_pc_d8e0, %dec_label_pc_da98, %dec_label_pc_daac
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d8f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_d8f0 = trunc i32 %v0_d8f0 to i8
  %v2_d8f0 = load i32, i32* @r5, align 4
  %v3_d8f0 = add i32 %v2_d8f0, 10
  %v4_d8f0 = inttoptr i32 %v3_d8f0 to i8*
  store i8 %v1_d8f0, i8* %v4_d8f0, align 1
  %v0_d8f4 = load i32, i32* %r7.global-to-local, align 4
  %v1_d8f4 = trunc i32 %v0_d8f4 to i8
  %v2_d8f4 = load i32, i32* @r5, align 4
  %v3_d8f4 = add i32 %v2_d8f4, 11
  %v4_d8f4 = inttoptr i32 %v3_d8f4 to i8*
  store i8 %v1_d8f4, i8* %v4_d8f4, align 1
  %v0_d8f8 = load i32, i32* @r5, align 4
  store i32 %v0_d8f8, i32* @r0, align 4
  %v2_d8fc = call i32 @function_f188(i32 %v0_d8f8, i32 20)
  %v3_d8fc = trunc i32 %v2_d8fc to i8
  %v4_d90023 = udiv i32 %v2_d8fc, 256
  %v1_d904 = trunc i32 %v4_d90023 to i8
  %v2_d904 = load i32, i32* @r5, align 4
  %v3_d904 = add i32 %v2_d904, 11
  %v4_d904 = inttoptr i32 %v3_d904 to i8*
  store i8 %v1_d904, i8* %v4_d904, align 1
  %v3_d908 = load i32, i32* @r5, align 4
  %v4_d908 = add i32 %v3_d908, 10
  %v5_d908 = inttoptr i32 %v4_d908 to i8*
  store i8 %v3_d8fc, i8* %v5_d908, align 1
  %v0_d90c = load i32, i32* @r6, align 4
  store i32 %v0_d90c, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_d918 = load i32, i32* %r7.global-to-local, align 4
  %v1_d918 = trunc i32 %v0_d918 to i8
  %v3_d918 = add i32 %v0_d90c, 16
  %v4_d918 = inttoptr i32 %v3_d918 to i8*
  store i8 %v1_d918, i8* %v4_d918, align 1
  %v0_d91c = load i32, i32* %r7.global-to-local, align 4
  %v1_d91c = trunc i32 %v0_d91c to i8
  %v2_d91c = load i32, i32* @r6, align 4
  %v3_d91c = add i32 %v2_d91c, 17
  %v4_d91c = inttoptr i32 %v3_d91c to i8*
  store i8 %v1_d91c, i8* %v4_d91c, align 1
  %v0_d920 = load i32, i32* @r5, align 4
  store i32 %v0_d920, i32* %r0.global-to-local, align 4
  %v4_d924 = call i32 @function_f1e4(i32 %v0_d920, i32 %v0_d90c, i32 10240, i32 40)
  %v5_d924 = trunc i32 %v4_d924 to i8
  store i32 %v4_d924, i32* %r0.global-to-local, align 4
  %v4_d92824 = udiv i32 %v4_d924, 256
  %v1_d92c = trunc i32 %v4_d92824 to i8
  %v2_d92c = load i32, i32* @r6, align 4
  %v3_d92c = add i32 %v2_d92c, 17
  %v4_d92c = inttoptr i32 %v3_d92c to i8*
  store i8 %v1_d92c, i8* %v4_d92c, align 1
  %v3_d930 = load i32, i32* @r6, align 4
  %v4_d930 = add i32 %v3_d930, 16
  %v5_d930 = inttoptr i32 %v4_d930 to i8*
  store i8 %v5_d924, i8* %v5_d930, align 1
  %v3_d934 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d934, i32* %r3.global-to-local, align 4
  %v0_d938 = load i32, i32* @r5, align 4
  %v1_d938 = add i32 %v0_d938, 20
  %v2_d938 = inttoptr i32 %v1_d938 to i32*
  %v3_d938 = load i32, i32* %v2_d938, align 4
  %v3_d940 = udiv i32 %v3_d938, 65536
  store i32 %v3_d940, i32* %r2.global-to-local, align 4
  %v5_d944 = mul i32 %v3_d934, 24
  %v1_d948 = load i32, i32* @r8, align 4
  %v2_d948 = add i32 %v1_d948, %v5_d944
  store i32 %v2_d948, i32* %ip.global-to-local, align 4
  %v3_d94c22 = udiv i32 %v3_d938, 16777216
  %v1_d950 = trunc i32 %v3_d94c22 to i8
  %v3_d950 = add i32 %v2_d948, 3
  %v4_d950 = inttoptr i32 %v3_d950 to i8*
  store i8 %v1_d950, i8* %v4_d950, align 1
  %v0_d954 = load i32, i32* %r2.global-to-local, align 4
  %v1_d954 = trunc i32 %v0_d954 to i8
  %v2_d954 = load i32, i32* %ip.global-to-local, align 4
  %v3_d954 = add i32 %v2_d954, 2
  %v4_d954 = inttoptr i32 %v3_d954 to i8*
  store i8 %v1_d954, i8* %v4_d954, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d95c = load i32, i32* @r5, align 4
  store i32 %v0_d95c, i32* %r1.global-to-local, align 4
  %v0_d960 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_d960, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_d96c = load i32, i32* %ip.global-to-local, align 4
  %v4_d96c = inttoptr i32 %v0_d96c to %sockaddr*
  %v7_d974 = inttoptr i32 %v0_d95c to i32*
  %v9_d974 = call i32 @sendto(i32 %v0_d960, i32* %v7_d974, i32 60, i32 16384, %sockaddr* %v4_d96c, i32 16)
  %v3_d978 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d978, i32* %r3.global-to-local, align 4
  %v1_d97c = add i32 %v3_d978, 1
  store i32 %v1_d97c, i32* %r0.global-to-local, align 4
  %v0_d980 = load i32, i32* %fp.global-to-local, align 4
  %v9_d980 = icmp eq i32 %v0_d980, %v1_d97c
  store i1 %v9_d980, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d97c, i32* %stack_var_-40, align 4
  %v7_d988 = icmp sgt i32 %v0_d980, %v1_d97c
  br i1 %v7_d988, label %dec_label_pc_d98c, label %dec_label_pc_dac0

dec_label_pc_d98c:                                ; preds = %dec_label_pc_d8ec, %dec_label_pc_d884
  %v1_d99c = phi i32 [ %v1_d97c, %dec_label_pc_d8ec ], [ 0, %dec_label_pc_d884 ]
  %v5_d990 = mul i32 %v1_d99c, 24
  %v1_d994 = load i32, i32* @r8, align 4
  %v2_d994 = add i32 %v1_d994, %v5_d990
  store i32 %v2_d994, i32* %r3.global-to-local, align 4
  %v1_d998 = add i32 %v2_d994, 20
  %v2_d998 = inttoptr i32 %v1_d998 to i8*
  %v3_d998 = load i8, i8* %v2_d998, align 1
  %v4_d998 = zext i8 %v3_d998 to i32
  store i32 %v4_d998, i32* %r2.global-to-local, align 4
  %v0_d99c = load i32, i32* %sb.global-to-local, align 4
  %v4_d99c = mul i32 %v1_d99c, 4
  %v5_d99c = add i32 %v0_d99c, %v4_d99c
  %v6_d99c = inttoptr i32 %v5_d99c to i32*
  %v7_d99c = load i32, i32* %v6_d99c, align 4
  store i32 %v7_d99c, i32* @r5, align 4
  %v2_d9a0 = icmp ugt i8 %v3_d998, 30
  %v7_d9a0 = icmp eq i8 %v3_d998, 31
  store i1 %v7_d9a0, i1* %cpsr_z.global-to-local, align 1
  %v1_d9a4 = add i32 %v7_d99c, 20
  store i32 %v1_d9a4, i32* @r6, align 4
  %v2_d9a8 = xor i1 %v7_d9a0, true
  %v3_d9a8 = and i1 %v2_d9a0, %v2_d9a8
  br i1 %v3_d9a8, label %dec_label_pc_d890, label %dec_label_pc_d9ac

dec_label_pc_d9ac:                                ; preds = %dec_label_pc_d98c
  %v1_d9ac = add i32 %v2_d994, 16
  %v2_d9ac = inttoptr i32 %v1_d9ac to i32*
  %v3_d9ac = load i32, i32* %v2_d9ac, align 4
  store i32 %v3_d9ac, i32* %r4.global-to-local, align 4
  %v0_d9b0 = call i32 @function_105b4()
  store i32 %v0_d9b0, i32* %r0.global-to-local, align 4
  %v3_d9b4 = load i32, i32* %stack_var_-40, align 4
  %v5_d9bc = mul i32 %v3_d9b4, 24
  %v0_d9c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_d9c4 = load i32, i32* @r8, align 4
  %v2_d9c4 = add i32 %v1_d9c4, %v5_d9bc
  store i32 %v2_d9c4, i32* %r1.global-to-local, align 4
  %v1_d9c8 = and i32 %v0_d9c0, 65280
  store i32 %v1_d9c8, i32* %r3.global-to-local, align 4
  %v1_d9c0 = udiv i32 %v0_d9c0, 256
  %v3_d9cc = and i32 %v1_d9c0, 65280
  store i32 %v3_d9cc, i32* %r2.global-to-local, align 4
  %v3_d9d0 = mul i32 %v0_d9c0, 16777216
  store i32 %v3_d9d0, i32* %ip.global-to-local, align 4
  %v1_d9d4 = add i32 %v2_d9c4, 20
  %v2_d9d4 = inttoptr i32 %v1_d9d4 to i8*
  %v3_d9d4 = load i8, i8* %v2_d9d4, align 1
  %v4_d9d4 = zext i8 %v3_d9d4 to i32
  %v4_d9d8 = mul nuw nsw i32 %v1_d9c8, 256
  %v5_d9d8 = or i32 %v4_d9d8, %v3_d9d0
  store i32 %v5_d9d8, i32* %ip.global-to-local, align 4
  %v2_d9e0 = call i32 @llvm.bswap.i32(i32 %v0_d9c0)
  %v7_d9e4 = lshr i32 %v0_d9b0, %v4_d9d4
  %v8_d9e4 = add i32 %v7_d9e4, %v2_d9e0
  store i32 %v8_d9e4, i32* %r2.global-to-local, align 4
  %v3_d9f0 = mul i32 %v8_d9e4, 16777216
  %v1_d9e8 = mul i32 %v8_d9e4, 256
  %v4_d9f4 = and i32 %v1_d9e8, 16711680
  %v5_d9f4 = or i32 %v4_d9f4, %v3_d9f0
  store i32 %v5_d9f4, i32* %r1.global-to-local, align 4
  store i32 %v6_d530, i32* %r0.global-to-local, align 4
  %v2_da04 = call i32 @llvm.bswap.i32(i32 %v8_d9e4)
  store i32 %v2_da04, i32* %r3.global-to-local, align 4
  store i1 %v7_d894, i1* %cpsr_z.global-to-local, align 1
  %v1_da0c = load i32, i32* @r5, align 4
  %v2_da0c = add i32 %v1_da0c, 16
  %v3_da0c = inttoptr i32 %v2_da0c to i32*
  store i32 %v2_da04, i32* %v3_da0c, align 4
  br i1 %v2_d894, label %dec_label_pc_da14, label %dec_label_pc_d89c

dec_label_pc_da14:                                ; preds = %dec_label_pc_d9ac, %dec_label_pc_d890
  %v0_da14 = call i32 @function_105b4()
  store i32 %v0_da14, i32* %r0.global-to-local, align 4
  store i32 %v3_d5a4, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_da24, i1* %cpsr_z.global-to-local, align 1
  %v1_da28 = load i32, i32* @r5, align 4
  %v2_da28 = add i32 %v1_da28, 12
  %v3_da28 = inttoptr i32 %v2_da28 to i32*
  store i32 %v0_da14, i32* %v3_da28, align 4
  br i1 %v3_da24, label %dec_label_pc_da30, label %dec_label_pc_da14.dec_label_pc_d8b0_crit_edge

dec_label_pc_da14.dec_label_pc_d8b0_crit_edge:    ; preds = %dec_label_pc_da14
  %v1_d8b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d8b0

dec_label_pc_da30:                                ; preds = %dec_label_pc_da14, %dec_label_pc_d89c
  %v0_da30 = call i32 @function_105b4()
  %v1_da30 = trunc i32 %v0_da30 to i8
  store i32 %v0_da30, i32* %r0.global-to-local, align 4
  %v4_da3425 = udiv i32 %v0_da30, 256
  %v1_da38 = trunc i32 %v4_da3425 to i8
  %v2_da38 = load i32, i32* @r5, align 4
  %v3_da38 = add i32 %v2_da38, 5
  %v4_da38 = inttoptr i32 %v3_da38 to i8*
  store i8 %v1_da38, i8* %v4_da38, align 1
  store i32 %v3_d5a8, i32* %r3.global-to-local, align 4
  %v1_da40 = load i32, i32* @r4, align 4
  %v9_da40 = icmp eq i32 %v3_d5a8, %v1_da40
  store i1 %v9_da40, i1* %cpsr_z.global-to-local, align 1
  %v3_da44 = load i32, i32* @r5, align 4
  %v4_da44 = add i32 %v3_da44, 4
  %v5_da44 = inttoptr i32 %v4_da44 to i8*
  store i8 %v1_da30, i8* %v5_da44, align 1
  %v0_da48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da48, label %dec_label_pc_da4c, label %dec_label_pc_da30.dec_label_pc_d8bc_crit_edge

dec_label_pc_da30.dec_label_pc_d8bc_crit_edge:    ; preds = %dec_label_pc_da30
  %v1_d8c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d8bc

dec_label_pc_da4c:                                ; preds = %dec_label_pc_da30, %dec_label_pc_d8b0
  %v0_da4c = call i32 @function_105b4()
  %v1_da4c = trunc i32 %v0_da4c to i8
  store i32 %v0_da4c, i32* %r0.global-to-local, align 4
  store i32 %v3_d5ac, i32* %ip.global-to-local, align 4
  %v4_da54 = sdiv i32 %v0_da4c, 256
  store i32 %v4_da54, i32* %r3.global-to-local, align 4
  %v1_da58 = load i32, i32* @r4, align 4
  %v9_da58 = icmp eq i32 %v3_d5ac, %v1_da58
  store i1 %v9_da58, i1* %cpsr_z.global-to-local, align 1
  %v3_da5c = load i32, i32* @r5, align 4
  %v4_da5c = add i32 %v3_da5c, 20
  %v5_da5c = inttoptr i32 %v4_da5c to i8*
  store i8 %v1_da4c, i8* %v5_da5c, align 1
  %v0_da60 = load i32, i32* %r3.global-to-local, align 4
  %v1_da60 = trunc i32 %v0_da60 to i8
  %v2_da60 = load i32, i32* @r6, align 4
  %v3_da60 = add i32 %v2_da60, 1
  %v4_da60 = inttoptr i32 %v3_da60 to i8*
  store i8 %v1_da60, i8* %v4_da60, align 1
  %v0_da64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da64, label %dec_label_pc_da68, label %dec_label_pc_da4c.dec_label_pc_d8c8_crit_edge

dec_label_pc_da4c.dec_label_pc_d8c8_crit_edge:    ; preds = %dec_label_pc_da4c
  %v1_d8cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d8c8

dec_label_pc_da68:                                ; preds = %dec_label_pc_da4c, %dec_label_pc_d8bc
  %v0_da68 = call i32 @function_105b4()
  %v1_da68 = trunc i32 %v0_da68 to i8
  %v4_da6c = sdiv i32 %v0_da68, 256
  store i32 %v4_da6c, i32* %r3.global-to-local, align 4
  %v3_da70 = load i32, i32* @r6, align 4
  %v4_da70 = add i32 %v3_da70, 2
  %v5_da70 = inttoptr i32 %v4_da70 to i8*
  store i8 %v1_da68, i8* %v5_da70, align 1
  store i32 %v6_d46c, i32* %r0.global-to-local, align 4
  %v1_da78 = load i32, i32* @r4, align 4
  %v9_da78 = icmp eq i32 %v6_d46c, %v1_da78
  store i1 %v9_da78, i1* %cpsr_z.global-to-local, align 1
  %v0_da7c = load i32, i32* %r3.global-to-local, align 4
  %v1_da7c = trunc i32 %v0_da7c to i8
  %v2_da7c = load i32, i32* @r6, align 4
  %v3_da7c = add i32 %v2_da7c, 3
  %v4_da7c = inttoptr i32 %v3_da7c to i8*
  store i8 %v1_da7c, i8* %v4_da7c, align 1
  %v0_da80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da80, label %dec_label_pc_da84, label %dec_label_pc_da68.dec_label_pc_d8d4_crit_edge

dec_label_pc_da68.dec_label_pc_d8d4_crit_edge:    ; preds = %dec_label_pc_da68
  %v1_d8d8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d8d4

dec_label_pc_da84:                                ; preds = %dec_label_pc_da68, %dec_label_pc_d8c8
  %v0_da84 = call i32 @function_105b4()
  store i32 %v0_da84, i32* %r0.global-to-local, align 4
  store i32 %v6_d484, i32* %r2.global-to-local, align 4
  %v1_da8c = load i32, i32* @r4, align 4
  %v9_da8c = icmp eq i32 %v6_d484, %v1_da8c
  store i1 %v9_da8c, i1* %cpsr_z.global-to-local, align 1
  %v1_da90 = load i32, i32* @r6, align 4
  %v2_da90 = add i32 %v1_da90, 4
  %v3_da90 = inttoptr i32 %v2_da90 to i32*
  store i32 %v0_da84, i32* %v3_da90, align 4
  br i1 %v9_da8c, label %dec_label_pc_da98, label %dec_label_pc_d8e0

dec_label_pc_da98:                                ; preds = %dec_label_pc_da84, %dec_label_pc_d8d4
  %v0_da98 = call i32 @function_105b4()
  store i32 %v0_da98, i32* %r0.global-to-local, align 4
  store i32 %v1_d5b0, i32* %r3.global-to-local, align 4
  store i1 %v2_daa0, i1* %cpsr_z.global-to-local, align 1
  %v1_daa4 = load i32, i32* @r6, align 4
  %v2_daa4 = add i32 %v1_daa4, 8
  %v3_daa4 = inttoptr i32 %v2_daa4 to i32*
  store i32 %v0_da98, i32* %v3_daa4, align 4
  br i1 %v2_daa0, label %dec_label_pc_d8ec, label %dec_label_pc_daac

dec_label_pc_daac:                                ; preds = %dec_label_pc_d8e0, %dec_label_pc_da98
  %v0_daac = call i32 @function_105b4()
  %v1_daac = trunc i32 %v0_daac to i8
  store i32 %v0_daac, i32* %r0.global-to-local, align 4
  %v4_dab0 = sdiv i32 %v0_daac, 256
  store i32 %v4_dab0, i32* %r3.global-to-local, align 4
  %v1_dab4 = trunc i32 %v4_dab0 to i8
  %v2_dab4 = load i32, i32* @r6, align 4
  %v3_dab4 = add i32 %v2_dab4, 19
  %v4_dab4 = inttoptr i32 %v3_dab4 to i8*
  store i8 %v1_dab4, i8* %v4_dab4, align 1
  %v3_dab8 = load i32, i32* @r6, align 4
  %v4_dab8 = add i32 %v3_dab8, 18
  %v5_dab8 = inttoptr i32 %v4_dab8 to i8*
  store i8 %v1_daac, i8* %v5_dab8, align 1
  br label %dec_label_pc_d8ec

dec_label_pc_dac0:                                ; preds = %dec_label_pc_d8ec, %dec_label_pc_d874
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_dac4 = call i32 @time(i32* null)
  store i32 %v2_dac4, i32* %r0.global-to-local, align 4
  store i32 %v2_d540, i32* %ip.global-to-local, align 4
  %v9_dacc = icmp eq i32 %v2_d540, %v2_dac4
  store i1 %v9_dacc, i1* %cpsr_z.global-to-local, align 1
  %v6_dad0 = icmp slt i32 %v2_d540, %v2_dac4
  br i1 %v6_dad0, label %dec_label_pc_dad4, label %dec_label_pc_dac0.dec_label_pc_d874_crit_edge

dec_label_pc_dac0.dec_label_pc_d874_crit_edge:    ; preds = %dec_label_pc_dac0
  %v0_d878.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_d874

dec_label_pc_dad4:                                ; preds = %dec_label_pc_dac0, %dec_label_pc_d370, %dec_label_pc_dadc
  %v29_dad8 = phi i32 [ %v3_d554, %dec_label_pc_d370 ], [ %v1_dae0, %dec_label_pc_dadc ], [ %v2_dac4, %dec_label_pc_dac0 ]
  store i32 %v3_d370, i32* %r4.global-to-local, align 4
  store i32 %v6_d370, i32* %r5.global-to-local, align 4
  store i32 %v9_d370, i32* %r6.global-to-local, align 4
  store i32 %v12_d370, i32* %r7.global-to-local, align 4
  ret i32 %v29_dad8

dec_label_pc_dadc:                                ; preds = %dec_label_pc_d564
  %v0_dadc = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_dadc, i32* %r0.global-to-local, align 4
  %v1_dae0 = call i32 @close(i32 %v0_dadc)
  store i32 %v1_dae0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dad4

; uselistorder directives
  uselistorder i32 %v1_dae0, { 1, 0 }
  uselistorder i32 %v4_dab0, { 1, 0 }
  uselistorder i32 %v0_daac, { 0, 2, 1 }
  uselistorder i32 %v0_da4c, { 0, 2, 1 }
  uselistorder i32 %v0_da30, { 0, 2, 1 }
  uselistorder i32 %v2_da04, { 1, 0 }
  uselistorder i32 %v8_d9e4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_d9d0, { 1, 0 }
  uselistorder i32 %v0_d9c0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_d97c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_d924, { 0, 2, 1 }
  uselistorder i32 %v0_d90c, { 1, 0, 2 }
  uselistorder i1 %v2_daa0, { 2, 3, 1, 0 }
  uselistorder i1 %v3_da24, { 1, 0, 2, 3 }
  uselistorder i1 %v7_d894, { 2, 1, 0 }
  uselistorder i32 %v1_d864, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d810, { 1, 0 }
  uselistorder i32 %v3_d668, { 1, 0 }
  uselistorder i32 %v1_d660, { 1, 0 }
  uselistorder i32 %v1_d654, { 1, 0 }
  uselistorder i32 %v1_d650, { 1, 0 }
  uselistorder i32 %v1_d630, { 1, 0 }
  uselistorder i32 %v1_d62c, { 1, 0 }
  uselistorder i32 %v1_d620, { 1, 0 }
  uselistorder i32 %v1_d5ec, { 1, 0 }
  uselistorder i32 %v0_d5b8, { 1, 0, 2 }
  uselistorder i32 %v1_d5b0, { 2, 1, 3, 0 }
  uselistorder i32 %v3_d5a8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v3_d5a4, { 0, 1, 3, 2 }
  uselistorder i1 %v7_d584, { 1, 0 }
  uselistorder i1 %v7_d558, { 1, 0 }
  uselistorder i32 %v3_d554, { 1, 2, 0, 3 }
  uselistorder i32 %v2_d540, { 2, 1, 0 }
  uselistorder i32 %v6_d530, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_d484, { 3, 2, 1, 0 }
  uselistorder i32 %v6_d46c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_d450, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_d434, { 1, 0, 3, 2 }
  uselistorder i32 %v1_d41c, { 1, 0 }
  uselistorder i32 %v5_d3b4, { 1, 0 }
  uselistorder i32 %v1_d374, { 1, 2, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 20, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 13, 14, 15, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 52, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 45, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 44, { 3, 4, 5, 6, 0, 7, 1, 8, 2, 9 }
  uselistorder i32 46, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 43, { 1, 0, 4, 2, 5, 3, 6 }
  uselistorder i32 42, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder label %dec_label_pc_dad4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_daac, { 1, 0 }
  uselistorder label %dec_label_pc_d8ec, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_daec(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_daec:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-84 = alloca i8, align 1
  %v3_daec = load i32, i32* @r4, align 4
  %v6_daec = load i32, i32* @r5, align 4
  %v9_daec = load i32, i32* @r6, align 4
  %v1_daf0 = urem i32 %arg2, 256
  store i32 %v1_daf0, i32* @sl, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %v1_daf0, i32* %r0.global-to-local, align 4
  %v1_db04 = urem i32 %arg4, 256
  store i32 %v1_db04, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  %v2_db10 = call i32* @calloc(i32 %v1_daf0, i32 4)
  %v4_db10 = ptrtoint i32* %v2_db10 to i32
  %v0_db1c = load i32, i32* @sl, align 4
  store i32 %v0_db1c, i32* %r0.global-to-local, align 4
  %v2_db20 = call i32* @calloc(i32 %v0_db1c, i32 4)
  %v3_db20 = ptrtoint i32* %v2_db20 to i32
  store i32 65535, i32* @r6, align 4
  %v0_db2c = load i32, i32* @r5, align 4
  store i32 %v3_db20, i32* @sb, align 4
  %v0_db3c = load i32, i32* @r4, align 4
  store i32 %v0_db3c, i32* %r0.global-to-local, align 4
  %v4_db40 = inttoptr i32 %v0_db2c to i32*
  %v5_db40 = call i32 @function_8f6c(i32 %v0_db3c, i32* %v4_db40, i32 7, i32 65535)
  %v0_db44 = load i32, i32* @r5, align 4
  %v0_db50 = load i32, i32* @r6, align 4
  %v0_db54 = load i32, i32* @r4, align 4
  store i32 %v0_db54, i32* %r0.global-to-local, align 4
  %v3_db58 = urem i32 %v5_db40, 65536
  store i32 %v3_db58, i32* @fp, align 4
  %v4_db5c = inttoptr i32 %v0_db44 to i32*
  %v5_db5c = call i32 @function_8f6c(i32 %v0_db54, i32* %v4_db5c, i32 6, i32 %v0_db50)
  %v0_db60 = load i32, i32* @r5, align 4
  %v3_db64 = mul i32 %v5_db5c, 65536
  store i32 %v3_db64, i32* @r8, align 4
  %v0_db70 = load i32, i32* @r4, align 4
  store i32 %v0_db70, i32* %r0.global-to-local, align 4
  %v4_db74 = inttoptr i32 %v0_db60 to i32*
  %v5_db74 = call i32 @function_8f6c(i32 %v0_db70, i32* %v4_db74, i32 0, i32 512)
  %v3_db84 = urem i32 %v5_db74, 65536
  %v0_db88 = load i32, i32* @r5, align 4
  %v0_db8c = load i32, i32* @r4, align 4
  store i32 %v0_db8c, i32* %r0.global-to-local, align 4
  %v4_db94 = inttoptr i32 %v0_db88 to i32*
  %v5_db94 = call i32 @function_8f6c(i32 %v0_db8c, i32* %v4_db94, i32 1, i32 1)
  %v1_dba0 = urem i32 %v5_db94, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_dbbc = call i32 @time(i32* null)
  %v0_dbc0 = load i32, i32* @r8, align 4
  %v3_dbc0 = udiv i32 %v0_dbc0, 65536
  %v1_dbc4 = load i32, i32* @r6, align 4
  %v9_dbc4 = icmp eq i32 %v3_dbc0, %v1_dbc4
  %v1_dbcc4 = load i32, i32* @r7, align 4
  %v2_dbcc5 = add i32 %v1_dbcc4, %v2_dbbc
  store i32 %v2_dbcc5, i32* %r0.global-to-local, align 4
  br i1 %v9_dbc4, label %dec_label_pc_ddb0, label %bb

bb:                                               ; preds = %dec_label_pc_daec
  br label %dec_label_pc_dbe0

dec_label_pc_dbe0:                                ; preds = %bb, %dec_label_pc_ddb0
  %v0_dbe0 = load i32, i32* @sl, align 4
  %tmp47 = icmp slt i32 %v0_dbe0, 1
  br i1 %tmp47, label %dec_label_pc_dd80, label %dec_label_pc_dbe8

dec_label_pc_dbe8:                                ; preds = %dec_label_pc_dbe0
  %v0_dbe8 = load i32, i32* @fp, align 4
  %v3_dbe8 = udiv i32 %v0_dbe8, 256
  %v5_dbf4 = trunc i32 %v3_dbe8 to i8
  store i32 0, i32* @r8, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  %v3_dc10 = udiv i32 %v0_dbe8, 65536
  store i32 0, i32* %r6.global-to-local, align 4
  %v4_dc18 = trunc i32 %v3_dc10 to i8
  store i8 %v4_dc18, i8* %stack_var_-84, align 1
  %tmp48 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_dc40

dec_label_pc_dc20:                                ; preds = %dec_label_pc_dca0
  %v0_dc20 = load i32, i32* %r6.global-to-local, align 4
  %v1_dc20 = load i32, i32* @sb, align 4
  %v2_dc20 = add i32 %v1_dc20, %v0_dc20
  %v3_dc20 = inttoptr i32 %v2_dc20 to i32*
  %v4_dc20 = load i32, i32* %v3_dc20, align 4
  store i32 %v4_dc20, i32* %r0.global-to-local, align 4
  %v1_dc24 = inttoptr i32 %v0_dcc4 to %sockaddr*
  %v5_dc2c = call i32 @connect(i32 %v4_dc20, %sockaddr* %v1_dc24, i32 16)
  store i32 %v5_dc2c, i32* %r0.global-to-local, align 4
  %v0_dc30 = load i32, i32* @r8, align 4
  %v1_dc30 = load i32, i32* @sl, align 4
  %v9_dc30 = icmp eq i32 %v0_dc30, %v1_dc30
  %v0_dc34 = load i32, i32* %r6.global-to-local, align 4
  %v1_dc34 = add i32 %v0_dc34, 4
  store i32 %v1_dc34, i32* %r6.global-to-local, align 4
  %v0_dc38 = load i32, i32* %r5.global-to-local, align 4
  %v1_dc38 = add i32 %v0_dc38, 24
  store i32 %v1_dc38, i32* %r5.global-to-local, align 4
  br i1 %v9_dc30, label %dec_label_pc_dd3c, label %dec_label_pc_dc40

dec_label_pc_dc40:                                ; preds = %dec_label_pc_dcd0, %dec_label_pc_dc20, %dec_label_pc_dbe8
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_dc4c = call i32* @calloc(i32 65535, i32 1)
  %v3_dc4c = ptrtoint i32* %v2_dc4c to i32
  store i32 %v3_dc4c, i32* %r0.global-to-local, align 4
  %v0_dc54 = load i32, i32* @fp, align 4
  %v9_dc54 = icmp eq i32 %v0_dc54, 65535
  %v1_dc5c = load i32, i32* %r6.global-to-local, align 4
  %v3_dc5c = add i32 %v1_dc5c, %v4_db10
  %v4_dc5c = inttoptr i32 %v3_dc5c to i32*
  store i32 %v3_dc4c, i32* %v4_dc5c, align 4
  br i1 %v9_dc54, label %dec_label_pc_dd9c, label %dec_label_pc_dc64

dec_label_pc_dc64:                                ; preds = %dec_label_pc_dc40
  %v2_dc68 = load i32, i32* %r5.global-to-local, align 4
  %v3_dc68 = add i32 %v2_dc68, 2
  %v4_dc68 = inttoptr i32 %v3_dc68 to i8*
  store i8 %v5_dbf4, i8* %v4_dc68, align 1
  %v2_dc6c = load i8, i8* %stack_var_-84, align 1
  %v2_dc70 = load i32, i32* %r5.global-to-local, align 4
  %v3_dc70 = add i32 %v2_dc70, 3
  %v4_dc70 = inttoptr i32 %v3_dc70 to i8*
  store i8 %v2_dc6c, i8* %v4_dc70, align 1
  br label %dec_label_pc_dc74

dec_label_pc_dc74:                                ; preds = %dec_label_pc_dd9c, %dec_label_pc_dc64
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_dc80 = call i32 @socket(i32 2, i32 17, i32 17)
  store i32 %v3_dc80, i32* %r0.global-to-local, align 4
  %v7_dc84 = icmp eq i32 %v3_dc80, -1
  %v0_dc88 = load i32, i32* @r8, align 4
  %v1_dc88 = add i32 %v0_dc88, 1
  store i32 %v1_dc88, i32* @r8, align 4
  %v1_dc98 = load i32, i32* %r6.global-to-local, align 4
  %v2_dc98 = load i32, i32* @sb, align 4
  %v3_dc98 = add i32 %v2_dc98, %v1_dc98
  %v4_dc98 = inttoptr i32 %v3_dc98 to i32*
  store i32 %v3_dc80, i32* %v4_dc98, align 4
  br i1 %v7_dc84, label %dec_label_pc_dd94.loopexit, label %dec_label_pc_dca0

dec_label_pc_dca0:                                ; preds = %dec_label_pc_dc74
  store i32 2, i32* %stack_var_-52, align 4
  %v0_dcc0 = load i32, i32* %r0.global-to-local, align 4
  %v5_dcc0 = call i32 @bind(i32 %v0_dcc0, %sockaddr* %tmp48, i32 16)
  store i32 %v5_dcc0, i32* %r0.global-to-local, align 4
  %v0_dcc4 = load i32, i32* %r5.global-to-local, align 4
  %v1_dcc4 = add i32 %v0_dcc4, 20
  %v2_dcc4 = inttoptr i32 %v1_dcc4 to i8*
  %v3_dcc4 = load i8, i8* %v2_dcc4, align 1
  %tmp52 = icmp ugt i8 %v3_dcc4, 31
  br i1 %tmp52, label %dec_label_pc_dc20, label %dec_label_pc_dcd0

dec_label_pc_dcd0:                                ; preds = %dec_label_pc_dca0
  %v1_dcd0 = add i32 %v0_dcc4, 16
  %v2_dcd0 = inttoptr i32 %v1_dcd0 to i32*
  %v3_dcd0 = load i32, i32* %v2_dcd0, align 4
  store i32 %v3_dcd0, i32* %r4.global-to-local, align 4
  %v0_dcd4 = call i32 @function_105b4()
  store i32 %v0_dcd4, i32* %r0.global-to-local, align 4
  %v0_dcec = load i32, i32* %r5.global-to-local, align 4
  %v1_dcec = add i32 %v0_dcec, 20
  %v2_dcec = inttoptr i32 %v1_dcec to i8*
  %v3_dcec = load i8, i8* %v2_dcec, align 1
  %v4_dcec = zext i8 %v3_dcec to i32
  %v2_dcf4 = call i32 @llvm.bswap.i32(i32 %v3_dcd0)
  %v7_dcf8 = lshr i32 %v0_dcd4, %v4_dcec
  %v8_dcf8 = add i32 %v7_dcf8, %v2_dcf4
  %v1_dd00 = and i32 %v8_dcf8, 65280
  store i32 %v1_dd00, i32* %r0.global-to-local, align 4
  %v2_dd14 = call i32 @llvm.bswap.i32(i32 %v8_dcf8)
  %v2_dd18 = add i32 %v0_dcec, 4
  %v3_dd18 = inttoptr i32 %v2_dd18 to i32*
  store i32 %v2_dd14, i32* %v3_dd18, align 4
  %v0_dd1c = load i32, i32* %r5.global-to-local, align 4
  %v1_dd1c = inttoptr i32 %v0_dd1c to %sockaddr*
  %v0_dd20 = load i32, i32* %r6.global-to-local, align 4
  %v1_dd20 = load i32, i32* @sb, align 4
  %v2_dd20 = add i32 %v1_dd20, %v0_dd20
  %v3_dd20 = inttoptr i32 %v2_dd20 to i32*
  %v4_dd20 = load i32, i32* %v3_dd20, align 4
  store i32 %v4_dd20, i32* %r0.global-to-local, align 4
  %v5_dd28 = call i32 @connect(i32 %v4_dd20, %sockaddr* %v1_dd1c, i32 16)
  store i32 %v5_dd28, i32* %r0.global-to-local, align 4
  %v0_dd2c = load i32, i32* @r8, align 4
  %v1_dd2c = load i32, i32* @sl, align 4
  %v9_dd2c = icmp eq i32 %v0_dd2c, %v1_dd2c
  %v0_dd30 = load i32, i32* %r6.global-to-local, align 4
  %v1_dd30 = add i32 %v0_dd30, 4
  store i32 %v1_dd30, i32* %r6.global-to-local, align 4
  %v0_dd34 = load i32, i32* %r5.global-to-local, align 4
  %v1_dd34 = add i32 %v0_dd34, 24
  store i32 %v1_dd34, i32* %r5.global-to-local, align 4
  br i1 %v9_dd2c, label %dec_label_pc_dd3c, label %dec_label_pc_dc40

dec_label_pc_dd3c:                                ; preds = %dec_label_pc_dcd0, %dec_label_pc_dc20, %dec_label_pc_dd80.dec_label_pc_dd3c_crit_edge
  %v0_dd3c = phi i32 [ %v0_dd3c.pre, %dec_label_pc_dd80.dec_label_pc_dd3c_crit_edge ], [ %v0_dd2c, %dec_label_pc_dcd0 ], [ %v0_dc30, %dec_label_pc_dc20 ]
  %tmp50 = icmp slt i32 %v0_dd3c, 1
  br i1 %tmp50, label %dec_label_pc_dd80, label %dec_label_pc_dd44

dec_label_pc_dd44:                                ; preds = %dec_label_pc_dd3c
  %v2_dd48 = icmp eq i32 %v1_dba0, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_dd48, label %dec_label_pc_dd50, label %dec_label_pc_ddc0

dec_label_pc_dd50:                                ; preds = %dec_label_pc_dd44
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_dd58

dec_label_pc_dd58:                                ; preds = %dec_label_pc_dd58, %dec_label_pc_dd50
  %v0_dd64 = phi i32 [ %v1_dd64, %dec_label_pc_dd58 ], [ 0, %dec_label_pc_dd50 ]
  %v0_dd5c = phi i32 [ %v1_dd78, %dec_label_pc_dd58 ], [ 0, %dec_label_pc_dd50 ]
  %v1_dd5c = load i32, i32* @sb, align 4
  %v2_dd5c = add i32 %v1_dd5c, %v0_dd5c
  %v3_dd5c = inttoptr i32 %v2_dd5c to i32*
  %v4_dd5c = load i32, i32* %v3_dd5c, align 4
  store i32 %v4_dd5c, i32* %r0.global-to-local, align 4
  %v2_dd60 = add i32 %v0_dd5c, %v4_db10
  %v3_dd60 = inttoptr i32 %v2_dd60 to i32*
  %v4_dd60 = load i32, i32* %v3_dd60, align 4
  %v1_dd64 = add i32 %v0_dd64, 1
  store i32 %v1_dd64, i32* %r5.global-to-local, align 4
  %v4_dd70 = inttoptr i32 %v4_dd60 to i32*
  %v5_dd70 = call i32 @send(i32 %v4_dd5c, i32* %v4_dd70, i32 %v3_db84, i32 16384)
  store i32 %v5_dd70, i32* %r0.global-to-local, align 4
  %v1_dd74 = load i32, i32* @sl, align 4
  %v9_dd74 = icmp eq i32 %v1_dd64, %v1_dd74
  %v0_dd78 = load i32, i32* %r4.global-to-local, align 4
  %v1_dd78 = add i32 %v0_dd78, 4
  store i32 %v1_dd78, i32* %r4.global-to-local, align 4
  br i1 %v9_dd74, label %dec_label_pc_dd80, label %dec_label_pc_dd58

dec_label_pc_dd80:                                ; preds = %dec_label_pc_ddcc, %dec_label_pc_dd58, %dec_label_pc_dd3c, %dec_label_pc_dbe0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_dd84 = call i32 @time(i32* null)
  store i32 %v2_dd84, i32* %r0.global-to-local, align 4
  %v6_dd90 = icmp slt i32 %v2_dbcc5, %v2_dd84
  br i1 %v6_dd90, label %dec_label_pc_dd94, label %dec_label_pc_dd80.dec_label_pc_dd3c_crit_edge

dec_label_pc_dd80.dec_label_pc_dd3c_crit_edge:    ; preds = %dec_label_pc_dd80
  %v0_dd3c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_dd3c

dec_label_pc_dd94.loopexit:                       ; preds = %dec_label_pc_dc74
  %v29_dd98.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dd94

dec_label_pc_dd94:                                ; preds = %dec_label_pc_dd94.loopexit, %dec_label_pc_dd80
  %v29_dd98 = phi i32 [ %v29_dd98.pre, %dec_label_pc_dd94.loopexit ], [ %v2_dd84, %dec_label_pc_dd80 ]
  store i32 %v3_daec, i32* %r4.global-to-local, align 4
  store i32 %v6_daec, i32* %r5.global-to-local, align 4
  store i32 %v9_daec, i32* %r6.global-to-local, align 4
  ret i32 %v29_dd98

dec_label_pc_dd9c:                                ; preds = %dec_label_pc_dc40
  %v0_dd9c = call i32 @function_105b4()
  %v1_dd9c = trunc i32 %v0_dd9c to i8
  store i32 %v0_dd9c, i32* %r0.global-to-local, align 4
  %v4_dda0 = sdiv i32 %v0_dd9c, 256
  %v1_dda4 = trunc i32 %v4_dda0 to i8
  %v2_dda4 = load i32, i32* %r5.global-to-local, align 4
  %v3_dda4 = add i32 %v2_dda4, 3
  %v4_dda4 = inttoptr i32 %v3_dda4 to i8*
  store i8 %v1_dda4, i8* %v4_dda4, align 1
  %v3_dda8 = load i32, i32* %r5.global-to-local, align 4
  %v4_dda8 = add i32 %v3_dda8, 2
  %v5_dda8 = inttoptr i32 %v4_dda8 to i8*
  store i8 %v1_dd9c, i8* %v5_dda8, align 1
  br label %dec_label_pc_dc74

dec_label_pc_ddb0:                                ; preds = %dec_label_pc_daec
  %v0_ddb0 = call i32 @function_105b4()
  %v3_ddb4 = mul i32 %v0_ddb0, 65536
  store i32 %v3_ddb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dbe0

dec_label_pc_ddc0:                                ; preds = %dec_label_pc_dd44
  store i32 0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_ddcc

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_ddcc, %dec_label_pc_ddc0
  %v0_ddd0 = phi i32 [ %v1_de04, %dec_label_pc_ddcc ], [ 0, %dec_label_pc_ddc0 ]
  %v2_ddd0 = add i32 %v0_ddd0, %v4_db10
  %v3_ddd0 = inttoptr i32 %v2_ddd0 to i32*
  %v4_ddd0 = load i32, i32* %v3_ddd0, align 4
  store i32 %v4_ddd0, i32* @r4, align 4
  store i32 %v4_ddd0, i32* %r0.global-to-local, align 4
  %v2_dddc = call i32 @function_10668(i32 %v4_ddd0, i32 %v3_db84)
  store i32 %v2_dddc, i32* %r0.global-to-local, align 4
  %v0_dde4 = load i32, i32* @r7, align 4
  %v1_dde4 = trunc i32 %v0_dde4 to i8
  %v2_dde4 = load i32, i32* @r4, align 4
  %v4_dde4 = add i32 %v2_dde4, %v3_db84
  %v5_dde4 = inttoptr i32 %v4_dde4 to i8*
  store i8 %v1_dde4, i8* %v5_dde4, align 1
  %v0_dde8 = load i32, i32* @r4, align 4
  %v0_ddec = load i32, i32* @r6, align 4
  %v1_ddec = load i32, i32* @sb, align 4
  %v2_ddec = add i32 %v1_ddec, %v0_ddec
  %v3_ddec = inttoptr i32 %v2_ddec to i32*
  %v4_ddec = load i32, i32* %v3_ddec, align 4
  store i32 %v4_ddec, i32* %r0.global-to-local, align 4
  %v0_ddf0 = load i32, i32* @r5, align 4
  %v1_ddf0 = add i32 %v0_ddf0, 1
  store i32 %v1_ddf0, i32* @r5, align 4
  %v4_ddfc = inttoptr i32 %v0_dde8 to i32*
  %v5_ddfc = call i32 @send(i32 %v4_ddec, i32* %v4_ddfc, i32 %v3_db84, i32 16384)
  store i32 %v5_ddfc, i32* %r0.global-to-local, align 4
  %v0_de00 = load i32, i32* @r5, align 4
  %v1_de00 = load i32, i32* @sl, align 4
  %v9_de00 = icmp eq i32 %v0_de00, %v1_de00
  %v0_de04 = load i32, i32* @r6, align 4
  %v1_de04 = add i32 %v0_de04, 4
  store i32 %v1_de04, i32* @r6, align 4
  br i1 %v9_de00, label %dec_label_pc_dd80, label %dec_label_pc_ddcc

; uselistorder directives
  uselistorder i32 %v1_de04, { 1, 0 }
  uselistorder i32 %v0_dd9c, { 0, 2, 1 }
  uselistorder i32 %v1_dd78, { 1, 0 }
  uselistorder i32 %v1_dd64, { 0, 2, 1 }
  uselistorder i32 %v0_dcc4, { 1, 2, 0 }
  uselistorder i32 %v3_dc80, { 1, 0, 2 }
  uselistorder i32 %v3_db84, { 2, 3, 1, 0 }
  uselistorder i32 %v1_daf0, { 1, 2, 0 }
  uselistorder i8* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 3, 4, 7, 8, 2, 5, 6, 9 }
  uselistorder i32* %r5.global-to-local, { 4, 5, 0, 1, 2, 6, 7, 8, 10, 11, 12, 3, 9, 13 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 6, 4, 5, 7, 21, 9, 8, 11, 10, 14, 12, 13, 15, 18, 20, 22, 19, 24, 23, 17, 16, 1, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder label %dec_label_pc_dd3c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dbe0, { 1, 0 }
}

define i32 @function_de10(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_de10:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_de10 = load i32, i32* @r4, align 4
  %v6_de10 = load i32, i32* @r5, align 4
  %v9_de10 = load i32, i32* @r6, align 4
  %v12_de10 = load i32, i32* @r7, align 4
  %v18_de10 = load i32, i32* @sb, align 4
  %v21_de10 = load i32, i32* @sl, align 4
  %v1_de14 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_de14, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_de30 = urem i32 %arg4, 256
  store i32 %v1_de30, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_de40 = call i32* @calloc(i32 %v1_de14, i32 4)
  %v4_de40 = ptrtoint i32* %v2_de40 to i32
  %v0_de44 = load i32, i32* @r5, align 4
  store i32 %v0_de44, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_de50 = load i32, i32* @r7, align 4
  store i32 %v0_de50, i32* %r3.global-to-local, align 4
  %v0_de54 = load i32, i32* @r4, align 4
  store i32 %v0_de54, i32* %r0.global-to-local, align 4
  %v5_de58 = inttoptr i32 %v0_de44 to i32*
  %v6_de58 = call i32 @function_8f6c(i32 %v0_de54, i32* %v5_de58, i32 2, i32 %v0_de50)
  %v1_de64 = urem i32 %v6_de58, 256
  store i32 %v1_de64, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_de70 = load i32, i32* @r5, align 4
  store i32 %v0_de70, i32* %r1.global-to-local, align 4
  %v0_de74 = load i32, i32* @r4, align 4
  store i32 %v0_de74, i32* %r0.global-to-local, align 4
  %v5_de78 = trunc i32 %v6_de58 to i8
  %v6_de7c = inttoptr i32 %v0_de70 to i32*
  %v7_de7c = call i32 @function_8f6c(i32 %v0_de74, i32* %v6_de7c, i32 3, i32 65535)
  %v0_de80 = load i32, i32* @r5, align 4
  store i32 %v0_de80, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_de90 = load i32, i32* @r4, align 4
  store i32 %v0_de90, i32* %r0.global-to-local, align 4
  %v5_de94 = inttoptr i32 %v0_de80 to i32*
  %v6_de94 = call i32 @function_8f6c(i32 %v0_de90, i32* %v5_de94, i32 4, i32 64)
  %v1_de9c = urem i32 %v6_de94, 256
  store i32 %v1_de9c, i32* %ip.global-to-local, align 4
  %v0_dea0 = load i32, i32* @r5, align 4
  store i32 %v0_dea0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_dea8 = load i32, i32* @r7, align 4
  store i32 %v0_dea8, i32* %r3.global-to-local, align 4
  %v0_deac = load i32, i32* @r4, align 4
  store i32 %v0_deac, i32* %r0.global-to-local, align 4
  %v5_deb0 = trunc i32 %v6_de94 to i8
  %v6_deb4 = inttoptr i32 %v0_dea0 to i32*
  %v7_deb4 = call i32 @function_8f6c(i32 %v0_deac, i32* %v6_deb4, i32 5, i32 %v0_dea8)
  %v1_dec0 = urem i32 %v7_deb4, 256
  store i32 %v1_dec0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_decc = load i32, i32* @r5, align 4
  store i32 %v0_decc, i32* %r1.global-to-local, align 4
  %v0_ded0 = load i32, i32* @r4, align 4
  store i32 %v0_ded0, i32* %r0.global-to-local, align 4
  %v5_ded8 = inttoptr i32 %v0_decc to i32*
  %v6_ded8 = call i32 @function_8f6c(i32 %v0_ded0, i32* %v5_ded8, i32 6, i32 65535)
  %v0_dee4 = load i32, i32* @r5, align 4
  store i32 %v0_dee4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_def0 = load i32, i32* @r4, align 4
  store i32 %v0_def0, i32* %r0.global-to-local, align 4
  %v5_def4 = inttoptr i32 %v0_dee4 to i32*
  %v6_def4 = call i32 @function_8f6c(i32 %v0_def0, i32* %v5_def4, i32 7, i32 65535)
  %v0_def8 = load i32, i32* @r5, align 4
  store i32 %v0_def8, i32* %r1.global-to-local, align 4
  %v0_defc = load i32, i32* @r7, align 4
  store i32 %v0_defc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_def4, i32* %sb.global-to-local, align 4
  %v0_df08 = load i32, i32* @r4, align 4
  store i32 %v0_df08, i32* %r0.global-to-local, align 4
  %v4_df0c = inttoptr i32 %v0_def8 to i32*
  %v5_df0c = call i32 @function_8f6c(i32 %v0_df08, i32* %v4_df0c, i32 %v0_defc, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_df18 = load i32, i32* @r5, align 4
  store i32 %v0_df18, i32* %r1.global-to-local, align 4
  store i32 %v5_df0c, i32* @sl, align 4
  %v0_df20 = load i32, i32* @r4, align 4
  store i32 %v0_df20, i32* %r0.global-to-local, align 4
  %v4_df24 = inttoptr i32 %v0_df18 to i32*
  %v5_df24 = call i32 @function_8f6c(i32 %v0_df20, i32* %v4_df24, i32 1, i32 1)
  %v2_df30 = load i32, i32* @global_var_1c21c.133, align 4
  store i32 %v2_df30, i32* %r3.global-to-local, align 4
  %v1_df34 = urem i32 %v5_df24, 256
  store i32 %v1_df34, i32* %ip.global-to-local, align 4
  %v0_df38 = load i32, i32* @r5, align 4
  store i32 %v0_df38, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_df40 = load i32, i32* @r4, align 4
  store i32 %v0_df40, i32* %r0.global-to-local, align 4
  %v5_df48 = inttoptr i32 %v0_df38 to i32*
  %v6_df48 = call i32 @function_8f6c(i32 %v0_df40, i32* %v5_df48, i32 24, i32 %v2_df30)
  store i32 %v6_df48, i32* @fp, align 4
  %v0_df50 = load i32, i32* @r7, align 4
  store i32 %v0_df50, i32* %r0.global-to-local, align 4
  %v1_df54 = inttoptr i32 %v0_df50 to i32*
  %v2_df54 = call i32 @time(i32* %v1_df54)
  %v1_df58 = load i32, i32* @r6, align 4
  %v2_df58 = add i32 %v1_df58, %v2_df54
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_df6c = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_df6c, i32* %r0.global-to-local, align 4
  %v7_df70 = icmp eq i32 %v3_df6c, -1
  store i1 %v7_df70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df70, label %dec_label_pc_e398, label %dec_label_pc_df7c

dec_label_pc_df7c:                                ; preds = %dec_label_pc_de10
  store i32 1, i32* %stack_var_-40, align 4
  %v6_df84 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_df84, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_df8c = load i32, i32* @r7, align 4
  store i32 %v0_df8c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_df98 = call i32 @setsockopt(i32 %v3_df6c, i32 %v0_df8c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_df98, i32* %r0.global-to-local, align 4
  %v7_df9c = icmp eq i32 %v7_df98, -1
  store i1 %v7_df9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df9c, label %dec_label_pc_e3a0, label %dec_label_pc_dfa4

dec_label_pc_dfa4:                                ; preds = %dec_label_pc_df7c
  %v0_dfa4 = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_dfb0 = urem i32 %v0_dfa4, 65536
  store i32 %v3_dfb0, i32* %r2.global-to-local, align 4
  %v3_dfb4 = icmp ugt i32 %v3_dfb0, 1459
  %v9_dfb4 = icmp eq i32 %v3_dfb0, 1460
  store i1 %v9_dfb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_dfb4, label %bb, label %bb57

bb:                                               ; preds = %dec_label_pc_dfa4
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %dec_label_pc_dfa4, %bb
  %v0_dfbc = phi i32 [ %v3_dfb0, %dec_label_pc_dfa4 ], [ 1460, %bb ]
  store i32 %v7_de7c, i32* %r1.global-to-local, align 4
  store i32 %v6_ded8, i32* %r2.global-to-local, align 4
  store i32 %v1_de14, i32* %r3.global-to-local, align 4
  %v0_dfcc = load i32, i32* %sb.global-to-local, align 4
  %v3_dfcc = mul i32 %v0_dfcc, 65536
  store i32 %v3_dfcc, i32* %r6.global-to-local, align 4
  %v3_dfd0 = mul i32 %v7_de7c, 65536
  store i32 %v3_dfd0, i32* %r0.global-to-local, align 4
  %v3_dfd4 = mul i32 %v6_ded8, 65536
  store i32 %v3_dfd4, i32* %sl.global-to-local, align 4
  %v3_dfd8 = urem i32 %v7_de7c, 65536
  store i32 %v3_dfd8, i32* %r4.global-to-local, align 4
  %v3_dfdc = urem i32 %v6_ded8, 65536
  store i32 %v3_dfdc, i32* %sb.global-to-local, align 4
  %v3_dfe0 = urem i32 %v0_dfcc, 65536
  store i32 %v3_dfe0, i32* %ip.global-to-local, align 4
  %v2_dfe4 = icmp eq i32 %v1_de14, 0
  store i1 %v2_dfe4, i1* %cpsr_z.global-to-local, align 1
  %v0_dfe8 = load i32, i32* @r7, align 4
  store i32 %v0_dfe8, i32* %stack_var_-40, align 4
  br i1 %v2_dfe4, label %.dec_label_pc_e158.preheader_crit_edge, label %dec_label_pc_dffc

.dec_label_pc_e158.preheader_crit_edge:           ; preds = %bb57
  %.pre = add nuw nsw i32 %v0_dfbc, 8
  %.pre20 = add nuw nsw i32 %v0_dfbc, 28
  br label %dec_label_pc_e158.preheader

dec_label_pc_dffc:                                ; preds = %bb57
  %v1_e000 = add nuw nsw i32 %v0_dfbc, 28
  %v1_e004 = add nuw nsw i32 %v0_dfbc, 8
  %v1_e008 = urem i32 %v6_ded8, 256
  %tmp58 = udiv i32 %v7_de7c, 256
  %v3_e014 = urem i32 %tmp58, 256
  %tmp59 = mul nuw nsw i32 %v1_e000, 256
  %v1_e024 = urem i32 %v7_de7c, 256
  %tmp60 = mul nuw nsw i32 %v1_e004, 256
  %v1_e030 = and i32 %tmp59, 65280
  store i32 %v1_e030, i32* %r3.global-to-local, align 4
  %v4_e034 = mul nuw nsw i32 %v1_e024, 256
  %v5_e034 = or i32 %v4_e034, %v3_e014
  store i32 %v5_e034, i32* %r0.global-to-local, align 4
  %v3_e038 = mul nuw nsw i32 %v1_e008, 256
  store i32 %v3_e038, i32* %r1.global-to-local, align 4
  %tmp61 = udiv i32 %v0_dfcc, 256
  %v3_e03c = urem i32 %tmp61, 256
  %v1_e040 = and i32 %tmp60, 65280
  store i32 %v1_e040, i32* %ip.global-to-local, align 4
  %v2_e044 = icmp eq i32 %v1_dec0, 0
  store i1 %v2_e044, i1* %cpsr_z.global-to-local, align 1
  %tmp62 = udiv i32 %v1_e000, 256
  %v4_e048 = urem i32 %tmp62, 256
  %v5_e048 = or i32 %v4_e048, %v1_e030
  store i32 %v5_e048, i32* %r2.global-to-local, align 4
  %v1_e04c = urem i32 %v0_dfcc, 256
  store i32 %v1_e04c, i32* %r4.global-to-local, align 4
  %v5_e050 = trunc i32 %tmp62 to i8
  %v5_e054 = trunc i32 %tmp58 to i8
  %tmp63 = udiv i32 %v6_ded8, 256
  %v4_e058 = urem i32 %tmp63, 256
  %v5_e058 = or i32 %v4_e058, %v3_e038
  store i32 %v5_e058, i32* %r5.global-to-local, align 4
  %v4_e05c = mul nuw nsw i32 %v1_e04c, 256
  %v5_e05c = or i32 %v4_e05c, %v3_e03c
  store i32 %v5_e05c, i32* %r6.global-to-local, align 4
  %tmp64 = udiv i32 %v1_e004, 256
  %v4_e060 = urem i32 %tmp64, 256
  %v5_e060 = or i32 %v4_e060, %v1_e040
  store i32 %v5_e060, i32* %sb.global-to-local, align 4
  br i1 %v2_e044, label %dec_label_pc_e068, label %dec_label_pc_e3ac

dec_label_pc_e068:                                ; preds = %dec_label_pc_dffc
  %v3_e06823 = udiv i32 %v1_e030, 256
  store i32 %v3_e06823, i32* %ip.global-to-local, align 4
  store i32 %v1_e024, i32* %r0.global-to-local, align 4
  store i32 %v1_e008, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %v1_e04c, i32* %sl.global-to-local, align 4
  %v3_e08824 = udiv i32 %v1_e040, 256
  store i32 %v3_e08824, i32* %r7.global-to-local, align 4
  %v4_e0d8 = sext i8 %v5_de78 to i32
  %v4_e0e0 = sext i8 %v5_deb0 to i32
  %sext11 = mul i32 %v1_e000, 16777216
  %v4_e110 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v7_de7c, 16777216
  %v4_e11c = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v6_ded8, 16777216
  %v4_e120 = sdiv i32 %sext13, 16777216
  %v4_e128 = sext i8 %v5_e054 to i32
  %v4_e104 = sext i8 %v5_e050 to i32
  br label %dec_label_pc_e08c

dec_label_pc_e08c:                                ; preds = %dec_label_pc_e08c, %dec_label_pc_e068
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_e098 = call i32* @calloc(i32 1510, i32 1)
  %v4_e098 = ptrtoint i32* %v2_e098 to i32
  store i32 %v4_e098, i32* %r0.global-to-local, align 4
  store i32 %v4_de40, i32* %r3.global-to-local, align 4
  %v2_e0a4 = load i32, i32* %r4.global-to-local, align 4
  %v5_e0a4 = mul i32 %v2_e0a4, 4
  %v6_e0a4 = add i32 %v5_e0a4, %v4_de40
  %v7_e0a4 = inttoptr i32 %v6_e0a4 to i32*
  store i32 %v4_e098, i32* %v7_e0a4, align 4
  %v3_e0a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e0a8, i32* %r2.global-to-local, align 4
  %v0_e0ac = load i32, i32* %r3.global-to-local, align 4
  %v4_e0ac = mul i32 %v3_e0a8, 4
  %v5_e0ac = add i32 %v0_e0ac, %v4_e0ac
  %v6_e0ac = inttoptr i32 %v5_e0ac to i32*
  %v7_e0ac = load i32, i32* %v6_e0ac, align 4
  store i32 %v7_e0ac, i32* %r1.global-to-local, align 4
  %v1_e0b0 = inttoptr i32 %v7_e0ac to i8*
  %v2_e0b0 = load i8, i8* %v1_e0b0, align 1
  %tmp = urem i8 %v2_e0b0, 16
  %v1_e0b4 = zext i8 %tmp to i32
  %v1_e0b8 = or i32 %v1_e0b4, 64
  store i32 %v1_e0b8, i32* %r3.global-to-local, align 4
  %v1_e0bc = trunc i32 %v1_e0b8 to i8
  store i8 %v1_e0bc, i8* %v1_e0b0, align 1
  %v0_e0c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0c0 = inttoptr i32 %v0_e0c0 to i8*
  %v2_e0c0 = load i8, i8* %v1_e0c0, align 1
  %v3_e0c0 = zext i8 %v2_e0c0 to i32
  %v1_e0c4 = and i32 %v3_e0c0, 240
  %v1_e0c8 = or i32 %v1_e0c4, 5
  store i32 %v1_e0c8, i32* %r2.global-to-local, align 4
  %v3_e0d0 = add i32 %v0_e0c0, 9
  %v4_e0d0 = inttoptr i32 %v3_e0d0 to i8*
  store i8 17, i8* %v4_e0d0, align 1
  %v0_e0d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_e0d4 = trunc i32 %v0_e0d4 to i8
  %v2_e0d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0d4 = inttoptr i32 %v2_e0d4 to i8*
  store i8 %v1_e0d4, i8* %v3_e0d4, align 1
  store i32 %v4_e0d8, i32* %r4.global-to-local, align 4
  %v2_e0dc = load i32, i32* %r1.global-to-local, align 4
  %v3_e0dc = add i32 %v2_e0dc, 1
  %v4_e0dc = inttoptr i32 %v3_e0dc to i8*
  store i8 %v5_de78, i8* %v4_e0dc, align 1
  store i32 %v4_e0e0, i32* %ip.global-to-local, align 4
  %v2_e0e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0e4 = add i32 %v2_e0e4, 8
  %v4_e0e4 = inttoptr i32 %v3_e0e4 to i8*
  store i8 %v5_deb0, i8* %v4_e0e4, align 1
  %v3_e0e8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e0e8, i32* %r2.global-to-local, align 4
  %v3_e0ec = mul i32 %v3_e0e8, 32
  store i32 %v3_e0ec, i32* %r3.global-to-local, align 4
  %v0_e0f0 = load i32, i32* @fp, align 4
  %v1_e0f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_e0f0 = add i32 %v1_e0f0, 12
  %v3_e0f0 = inttoptr i32 %v2_e0f0 to i32*
  store i32 %v0_e0f0, i32* %v3_e0f0, align 4
  %v0_e0f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e0f4 = load i32, i32* %r2.global-to-local, align 4
  %tmp67 = mul i32 %v1_e0f4, -8
  %v5_e0f4 = add i32 %v0_e0f4, %tmp67
  %v1_e0f8 = load i32, i32* @r8, align 4
  %v2_e0f8 = add i32 %v5_e0f4, %v1_e0f8
  store i32 %v2_e0f8, i32* %r3.global-to-local, align 4
  %v1_e0fc = add i32 %v2_e0f8, 16
  %v2_e0fc = inttoptr i32 %v1_e0fc to i32*
  %v3_e0fc = load i32, i32* %v2_e0fc, align 4
  %v1_e100 = add i32 %v1_e0f4, 1
  store i32 %v1_e100, i32* %r4.global-to-local, align 4
  store i32 %v4_e104, i32* %ip.global-to-local, align 4
  store i32 %v1_de14, i32* %r2.global-to-local, align 4
  %v1_e10c = load i32, i32* %r1.global-to-local, align 4
  %v2_e10c = add i32 %v1_e10c, 16
  %v3_e10c = inttoptr i32 %v2_e10c to i32*
  store i32 %v3_e0fc, i32* %v3_e10c, align 4
  store i32 %v4_e110, i32* %r0.global-to-local, align 4
  %v0_e114 = load i32, i32* %ip.global-to-local, align 4
  %v1_e114 = trunc i32 %v0_e114 to i8
  %v2_e114 = load i32, i32* %r1.global-to-local, align 4
  %v3_e114 = add i32 %v2_e114, 2
  %v4_e114 = inttoptr i32 %v3_e114 to i8*
  store i8 %v1_e114, i8* %v4_e114, align 1
  %v0_e118 = load i32, i32* %r0.global-to-local, align 4
  %v1_e118 = trunc i32 %v0_e118 to i8
  %v2_e118 = load i32, i32* %r1.global-to-local, align 4
  %v3_e118 = add i32 %v2_e118, 3
  %v4_e118 = inttoptr i32 %v3_e118 to i8*
  store i8 %v1_e118, i8* %v4_e118, align 1
  store i32 %v4_e11c, i32* %ip.global-to-local, align 4
  store i32 %v4_e120, i32* %r0.global-to-local, align 4
  %v0_e124 = load i32, i32* %r4.global-to-local, align 4
  %v1_e124 = load i32, i32* %r2.global-to-local, align 4
  %v9_e124 = icmp eq i32 %v0_e124, %v1_e124
  store i1 %v9_e124, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_e128, i32* %r2.global-to-local, align 4
  %v0_e12c = load i32, i32* %r1.global-to-local, align 4
  %v1_e12c = add i32 %v0_e12c, 20
  store i32 %v1_e12c, i32* %r3.global-to-local, align 4
  %v3_e130 = add i32 %v0_e12c, 4
  %v4_e130 = inttoptr i32 %v3_e130 to i8*
  store i8 %v5_e054, i8* %v4_e130, align 1
  %v0_e134 = load i32, i32* %ip.global-to-local, align 4
  %v1_e134 = trunc i32 %v0_e134 to i8
  %v2_e134 = load i32, i32* %r1.global-to-local, align 4
  %v3_e134 = add i32 %v2_e134, 5
  %v4_e134 = inttoptr i32 %v3_e134 to i8*
  store i8 %v1_e134, i8* %v4_e134, align 1
  %v0_e138 = load i32, i32* %r5.global-to-local, align 4
  %v1_e138 = trunc i32 %v0_e138 to i8
  %v2_e138 = load i32, i32* %r1.global-to-local, align 4
  %v3_e138 = add i32 %v2_e138, 20
  %v4_e138 = inttoptr i32 %v3_e138 to i8*
  store i8 %v1_e138, i8* %v4_e138, align 1
  %v0_e13c = load i32, i32* %r7.global-to-local, align 4
  %v1_e13c = trunc i32 %v0_e13c to i8
  %v2_e13c = load i32, i32* %r3.global-to-local, align 4
  %v3_e13c = add i32 %v2_e13c, 5
  %v4_e13c = inttoptr i32 %v3_e13c to i8*
  store i8 %v1_e13c, i8* %v4_e13c, align 1
  %v0_e140 = load i32, i32* %r0.global-to-local, align 4
  %v1_e140 = trunc i32 %v0_e140 to i8
  %v2_e140 = load i32, i32* %r3.global-to-local, align 4
  %v3_e140 = add i32 %v2_e140, 1
  %v4_e140 = inttoptr i32 %v3_e140 to i8*
  store i8 %v1_e140, i8* %v4_e140, align 1
  %v0_e144 = load i32, i32* %r6.global-to-local, align 4
  %v1_e144 = trunc i32 %v0_e144 to i8
  %v2_e144 = load i32, i32* %r3.global-to-local, align 4
  %v3_e144 = add i32 %v2_e144, 2
  %v4_e144 = inttoptr i32 %v3_e144 to i8*
  store i8 %v1_e144, i8* %v4_e144, align 1
  %v0_e148 = load i32, i32* %sl.global-to-local, align 4
  %v1_e148 = trunc i32 %v0_e148 to i8
  %v2_e148 = load i32, i32* %r3.global-to-local, align 4
  %v3_e148 = add i32 %v2_e148, 3
  %v4_e148 = inttoptr i32 %v3_e148 to i8*
  store i8 %v1_e148, i8* %v4_e148, align 1
  %v0_e14c = load i32, i32* %sb.global-to-local, align 4
  %v1_e14c = trunc i32 %v0_e14c to i8
  %v2_e14c = load i32, i32* %r3.global-to-local, align 4
  %v3_e14c = add i32 %v2_e14c, 4
  %v4_e14c = inttoptr i32 %v3_e14c to i8*
  store i8 %v1_e14c, i8* %v4_e14c, align 1
  %v0_e150 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e150, i32* %stack_var_-40, align 4
  %v5_e154 = icmp slt i32 %v0_e124, %v1_e124
  br i1 %v5_e154, label %dec_label_pc_e08c, label %dec_label_pc_e158.preheader

dec_label_pc_e158.preheader:                      ; preds = %dec_label_pc_e3d8, %dec_label_pc_e08c, %.dec_label_pc_e158.preheader_crit_edge
  %v1_e178.pre-phi = phi i32 [ %.pre20, %.dec_label_pc_e158.preheader_crit_edge ], [ %v1_e000, %dec_label_pc_e08c ], [ %v1_e000, %dec_label_pc_e3d8 ]
  %v1_e174.pre-phi = phi i32 [ %.pre, %.dec_label_pc_e158.preheader_crit_edge ], [ %v1_e004, %dec_label_pc_e08c ], [ %v1_e004, %dec_label_pc_e3d8 ]
  %v3_e308 = icmp eq i32 %v3_dfd8, 65535
  %v2_e1bc = icmp eq i32 %v1_df34, 0
  br label %dec_label_pc_e158

dec_label_pc_e158:                                ; preds = %dec_label_pc_e158.preheader, %dec_label_pc_e384
  store i32 %v1_de14, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_dfe4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_dfe4, label %dec_label_pc_e384, label %dec_label_pc_e16c

dec_label_pc_e16c:                                ; preds = %dec_label_pc_e158
  store i32 %v0_dfbc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_e174.pre-phi, i32* @sb, align 4
  store i32 %v1_e178.pre-phi, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e270

dec_label_pc_e184:                                ; preds = %dec_label_pc_e270
  %v0_e184 = load i32, i32* @fp, align 4
  %v7_e184 = icmp eq i32 %v0_e184, -1
  store i1 %v7_e184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e184, label %dec_label_pc_e2f8, label %dec_label_pc_e18c

dec_label_pc_e18c:                                ; preds = %dec_label_pc_e294, %dec_label_pc_e184
  store i32 %v3_dfd8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_e308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e308, label %dec_label_pc_e314, label %dec_label_pc_e1a0

dec_label_pc_e1a0:                                ; preds = %dec_label_pc_e2f8.dec_label_pc_e1a0_crit_edge, %dec_label_pc_e18c
  %v1_e1a4 = phi i32 [ %v1_e1a4.pre, %dec_label_pc_e2f8.dec_label_pc_e1a0_crit_edge ], [ 65535, %dec_label_pc_e18c ]
  store i32 %v3_dfdc, i32* %r0.global-to-local, align 4
  %v9_e1a4 = icmp eq i32 %v3_dfdc, %v1_e1a4
  store i1 %v9_e1a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e1a4, label %dec_label_pc_e330, label %dec_label_pc_e1ac

dec_label_pc_e1ac:                                ; preds = %dec_label_pc_e314.dec_label_pc_e1ac_crit_edge, %dec_label_pc_e1a0
  %v1_e1b0 = phi i32 [ %v1_e1b0.pre, %dec_label_pc_e314.dec_label_pc_e1ac_crit_edge ], [ %v1_e1a4, %dec_label_pc_e1a0 ]
  store i32 %v3_dfe0, i32* %r1.global-to-local, align 4
  %v9_e1b0 = icmp eq i32 %v3_dfe0, %v1_e1b0
  store i1 %v9_e1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e1b0, label %dec_label_pc_e34c, label %dec_label_pc_e1b8

dec_label_pc_e1b8:                                ; preds = %dec_label_pc_e330, %dec_label_pc_e1ac
  store i32 %v1_df34, i32* %r2.global-to-local, align 4
  store i1 %v2_e1bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e1bc, label %dec_label_pc_e1c4, label %dec_label_pc_e368

dec_label_pc_e1c4:                                ; preds = %dec_label_pc_e1b8, %dec_label_pc_e34c, %dec_label_pc_e368
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e1c8 = load i32, i32* @r7, align 4
  %v1_e1c8 = trunc i32 %v0_e1c8 to i8
  %v2_e1c8 = load i32, i32* @r5, align 4
  %v3_e1c8 = add i32 %v2_e1c8, 10
  %v4_e1c8 = inttoptr i32 %v3_e1c8 to i8*
  store i8 %v1_e1c8, i8* %v4_e1c8, align 1
  %v0_e1cc = load i32, i32* @r7, align 4
  %v1_e1cc = trunc i32 %v0_e1cc to i8
  %v2_e1cc = load i32, i32* @r5, align 4
  %v3_e1cc = add i32 %v2_e1cc, 11
  %v4_e1cc = inttoptr i32 %v3_e1cc to i8*
  store i8 %v1_e1cc, i8* %v4_e1cc, align 1
  %v0_e1d0 = load i32, i32* @r5, align 4
  store i32 %v0_e1d0, i32* @r0, align 4
  %v2_e1d4 = call i32 @function_f188(i32 %v0_e1d0, i32 20)
  %v3_e1d4 = trunc i32 %v2_e1d4 to i8
  store i32 %v2_e1d4, i32* %r0.global-to-local, align 4
  %v4_e1d8 = sdiv i32 %v2_e1d4, 256
  store i32 %v4_e1d8, i32* %r3.global-to-local, align 4
  %v1_e1dc = trunc i32 %v4_e1d8 to i8
  %v2_e1dc = load i32, i32* @r5, align 4
  %v3_e1dc = add i32 %v2_e1dc, 11
  %v4_e1dc = inttoptr i32 %v3_e1dc to i8*
  store i8 %v1_e1dc, i8* %v4_e1dc, align 1
  %v3_e1e0 = load i32, i32* @r5, align 4
  %v4_e1e0 = add i32 %v3_e1e0, 10
  %v5_e1e0 = inttoptr i32 %v4_e1e0 to i8*
  store i8 %v3_e1d4, i8* %v5_e1e0, align 1
  %v0_e1e4 = load i32, i32* @r7, align 4
  %v1_e1e4 = trunc i32 %v0_e1e4 to i8
  %v2_e1e4 = load i32, i32* @r6, align 4
  %v3_e1e4 = add i32 %v2_e1e4, 6
  %v4_e1e4 = inttoptr i32 %v3_e1e4 to i8*
  store i8 %v1_e1e4, i8* %v4_e1e4, align 1
  %v0_e1e8 = load i32, i32* @r7, align 4
  %v1_e1e8 = trunc i32 %v0_e1e8 to i8
  %v2_e1e8 = load i32, i32* @r6, align 4
  %v3_e1e8 = add i32 %v2_e1e8, 7
  %v4_e1e8 = inttoptr i32 %v3_e1e8 to i8*
  store i8 %v1_e1e8, i8* %v4_e1e8, align 1
  %v0_e1ec = load i32, i32* @r5, align 4
  %v1_e1ec = add i32 %v0_e1ec, 24
  %v2_e1ec = inttoptr i32 %v1_e1ec to i8*
  %v3_e1ec = load i8, i8* %v2_e1ec, align 1
  %v4_e1ec = zext i8 %v3_e1ec to i32
  store i32 %v4_e1ec, i32* %r3.global-to-local, align 4
  %v1_e1f0 = add i32 %v0_e1ec, 25
  %v2_e1f0 = inttoptr i32 %v1_e1f0 to i8*
  %v3_e1f0 = load i8, i8* %v2_e1f0, align 1
  %v4_e1f0 = zext i8 %v3_e1f0 to i32
  %v0_e1f4 = load i32, i32* @r6, align 4
  store i32 %v0_e1f4, i32* @r1, align 4
  %v4_e1f8 = mul nuw nsw i32 %v4_e1f0, 256
  %v5_e1f8 = or i32 %v4_e1f8, %v4_e1ec
  store i32 %v5_e1f8, i32* %r2.global-to-local, align 4
  store i32 %v0_e1ec, i32* %r0.global-to-local, align 4
  %v0_e200 = load i32, i32* @sb, align 4
  store i32 %v0_e200, i32* %r3.global-to-local, align 4
  %v4_e204 = call i32 @function_f1e4(i32 %v0_e1ec, i32 %v0_e1f4, i32 %v5_e1f8, i32 %v0_e200)
  %v5_e204 = trunc i32 %v4_e204 to i8
  store i32 %v4_e204, i32* %r0.global-to-local, align 4
  %v4_e20825 = udiv i32 %v4_e204, 256
  %v1_e20c = trunc i32 %v4_e20825 to i8
  %v2_e20c = load i32, i32* @r6, align 4
  %v3_e20c = add i32 %v2_e20c, 7
  %v4_e20c = inttoptr i32 %v3_e20c to i8*
  store i8 %v1_e20c, i8* %v4_e20c, align 1
  %v3_e210 = load i32, i32* @r6, align 4
  %v4_e210 = add i32 %v3_e210, 6
  %v5_e210 = inttoptr i32 %v4_e210 to i8*
  store i8 %v5_e204, i8* %v5_e210, align 1
  %v3_e214 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e214, i32* %r3.global-to-local, align 4
  %v0_e218 = load i32, i32* @r5, align 4
  %v1_e218 = add i32 %v0_e218, 20
  %v2_e218 = inttoptr i32 %v1_e218 to i32*
  %v3_e218 = load i32, i32* %v2_e218, align 4
  %v3_e220 = udiv i32 %v3_e218, 65536
  store i32 %v3_e220, i32* %r2.global-to-local, align 4
  %v5_e224 = mul i32 %v3_e214, 24
  %v1_e228 = load i32, i32* @r8, align 4
  %v2_e228 = add i32 %v1_e228, %v5_e224
  store i32 %v2_e228, i32* %ip.global-to-local, align 4
  %v3_e22c22 = udiv i32 %v3_e218, 16777216
  %v1_e230 = trunc i32 %v3_e22c22 to i8
  %v3_e230 = add i32 %v2_e228, 3
  %v4_e230 = inttoptr i32 %v3_e230 to i8*
  store i8 %v1_e230, i8* %v4_e230, align 1
  %v0_e234 = load i32, i32* %r2.global-to-local, align 4
  %v1_e234 = trunc i32 %v0_e234 to i8
  %v2_e234 = load i32, i32* %ip.global-to-local, align 4
  %v3_e234 = add i32 %v2_e234, 2
  %v4_e234 = inttoptr i32 %v3_e234 to i8*
  store i8 %v1_e234, i8* %v4_e234, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_e240 = load i32, i32* @r5, align 4
  store i32 %v0_e240, i32* %r1.global-to-local, align 4
  store i32 %v3_df6c, i32* %r0.global-to-local, align 4
  %v0_e248 = load i32, i32* @sl, align 4
  store i32 %v0_e248, i32* %r2.global-to-local, align 4
  %v0_e250 = load i32, i32* %ip.global-to-local, align 4
  %v4_e250 = inttoptr i32 %v0_e250 to %sockaddr*
  %v7_e254 = inttoptr i32 %v0_e240 to i32*
  %v9_e254 = call i32 @sendto(i32 %v3_df6c, i32* %v7_e254, i32 %v0_e248, i32 16384, %sockaddr* %v4_e250, i32 16)
  %v3_e258 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e258, i32* %r3.global-to-local, align 4
  store i32 %v1_de14, i32* %r4.global-to-local, align 4
  %v1_e260 = add i32 %v3_e258, 1
  store i32 %v1_e260, i32* %r0.global-to-local, align 4
  %v9_e264 = icmp eq i32 %v1_e260, %v1_de14
  store i1 %v9_e264, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e260, i32* %stack_var_-40, align 4
  %v6_e26c = icmp slt i32 %v1_e260, %v1_de14
  br i1 %v6_e26c, label %dec_label_pc_e270, label %dec_label_pc_e384

dec_label_pc_e270:                                ; preds = %dec_label_pc_e1c4, %dec_label_pc_e16c
  %v1_e284 = phi i32 [ %v1_e260, %dec_label_pc_e1c4 ], [ 0, %dec_label_pc_e16c ]
  %v5_e274 = mul i32 %v1_e284, 24
  %v1_e278 = load i32, i32* @r8, align 4
  %v2_e278 = add i32 %v1_e278, %v5_e274
  store i32 %v2_e278, i32* %r3.global-to-local, align 4
  store i32 %v4_de40, i32* %r4.global-to-local, align 4
  %v1_e280 = add i32 %v2_e278, 20
  %v2_e280 = inttoptr i32 %v1_e280 to i8*
  %v3_e280 = load i8, i8* %v2_e280, align 1
  %v4_e280 = zext i8 %v3_e280 to i32
  store i32 %v4_e280, i32* %r2.global-to-local, align 4
  %v4_e284 = mul i32 %v1_e284, 4
  %v5_e284 = add i32 %v4_e284, %v4_de40
  %v6_e284 = inttoptr i32 %v5_e284 to i32*
  %v7_e284 = load i32, i32* %v6_e284, align 4
  store i32 %v7_e284, i32* @r5, align 4
  %v2_e288 = icmp ugt i8 %v3_e280, 30
  %v7_e288 = icmp eq i8 %v3_e280, 31
  store i1 %v7_e288, i1* %cpsr_z.global-to-local, align 1
  %v1_e28c = add i32 %v7_e284, 20
  store i32 %v1_e28c, i32* @r6, align 4
  %v2_e290 = xor i1 %v7_e288, true
  %v3_e290 = and i1 %v2_e288, %v2_e290
  br i1 %v3_e290, label %dec_label_pc_e184, label %dec_label_pc_e294

dec_label_pc_e294:                                ; preds = %dec_label_pc_e270
  %v1_e294 = add i32 %v2_e278, 16
  %v2_e294 = inttoptr i32 %v1_e294 to i32*
  %v3_e294 = load i32, i32* %v2_e294, align 4
  store i32 %v3_e294, i32* %r4.global-to-local, align 4
  %v0_e298 = call i32 @function_105b4()
  store i32 %v0_e298, i32* %r0.global-to-local, align 4
  %v3_e29c = load i32, i32* %stack_var_-40, align 4
  %v5_e2a4 = mul i32 %v3_e29c, 24
  %v1_e2ac = load i32, i32* @r8, align 4
  %v2_e2ac = add i32 %v1_e2ac, %v5_e2a4
  store i32 %v2_e2ac, i32* %r1.global-to-local, align 4
  %v1_e2b0 = and i32 %v3_e294, 65280
  store i32 %v1_e2b0, i32* %r3.global-to-local, align 4
  %v1_e2a8 = udiv i32 %v3_e294, 256
  %v3_e2b4 = and i32 %v1_e2a8, 65280
  store i32 %v3_e2b4, i32* %r2.global-to-local, align 4
  %v3_e2b8 = mul i32 %v3_e294, 16777216
  store i32 %v3_e2b8, i32* %ip.global-to-local, align 4
  %v1_e2bc = add i32 %v2_e2ac, 20
  %v2_e2bc = inttoptr i32 %v1_e2bc to i8*
  %v3_e2bc = load i8, i8* %v2_e2bc, align 1
  %v4_e2bc = zext i8 %v3_e2bc to i32
  %v4_e2c0 = mul nuw nsw i32 %v1_e2b0, 256
  %v5_e2c0 = or i32 %v4_e2c0, %v3_e2b8
  store i32 %v5_e2c0, i32* %ip.global-to-local, align 4
  %v2_e2c8 = call i32 @llvm.bswap.i32(i32 %v3_e294)
  %v7_e2cc = lshr i32 %v0_e298, %v4_e2bc
  %v8_e2cc = add i32 %v7_e2cc, %v2_e2c8
  store i32 %v8_e2cc, i32* %r2.global-to-local, align 4
  %v3_e2d8 = mul i32 %v8_e2cc, 16777216
  %v1_e2dc = and i32 %v8_e2cc, 65280
  store i32 %v1_e2dc, i32* %r0.global-to-local, align 4
  %v4_e2e0 = mul nuw nsw i32 %v1_e2dc, 256
  %v5_e2e0 = or i32 %v4_e2e0, %v3_e2d8
  store i32 %v5_e2e0, i32* %r1.global-to-local, align 4
  %v2_e2e8 = call i32 @llvm.bswap.i32(i32 %v8_e2cc)
  store i32 %v2_e2e8, i32* %r3.global-to-local, align 4
  %v0_e2ec = load i32, i32* @fp, align 4
  %v3_e2ec = icmp eq i32 %v0_e2ec, -1
  %v8_e2ec = icmp eq i32 %v0_e2ec, -1
  store i1 %v8_e2ec, i1* %cpsr_z.global-to-local, align 1
  %v1_e2f0 = load i32, i32* @r5, align 4
  %v2_e2f0 = add i32 %v1_e2f0, 16
  %v3_e2f0 = inttoptr i32 %v2_e2f0 to i32*
  store i32 %v2_e2e8, i32* %v3_e2f0, align 4
  br i1 %v3_e2ec, label %dec_label_pc_e2f8, label %dec_label_pc_e18c

dec_label_pc_e2f8:                                ; preds = %dec_label_pc_e294, %dec_label_pc_e184
  %v0_e2f8 = call i32 @function_105b4()
  store i32 %v0_e2f8, i32* %r0.global-to-local, align 4
  store i32 %v3_dfd8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_e308, i1* %cpsr_z.global-to-local, align 1
  %v1_e30c = load i32, i32* @r5, align 4
  %v2_e30c = add i32 %v1_e30c, 12
  %v3_e30c = inttoptr i32 %v2_e30c to i32*
  store i32 %v0_e2f8, i32* %v3_e30c, align 4
  br i1 %v3_e308, label %dec_label_pc_e314, label %dec_label_pc_e2f8.dec_label_pc_e1a0_crit_edge

dec_label_pc_e2f8.dec_label_pc_e1a0_crit_edge:    ; preds = %dec_label_pc_e2f8
  %v1_e1a4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e1a0

dec_label_pc_e314:                                ; preds = %dec_label_pc_e2f8, %dec_label_pc_e18c
  %v0_e314 = call i32 @function_105b4()
  %v1_e314 = trunc i32 %v0_e314 to i8
  %v4_e318 = sdiv i32 %v0_e314, 256
  store i32 %v4_e318, i32* %r3.global-to-local, align 4
  %v3_e31c = load i32, i32* @r5, align 4
  %v4_e31c = add i32 %v3_e31c, 4
  %v5_e31c = inttoptr i32 %v4_e31c to i8*
  store i8 %v1_e314, i8* %v5_e31c, align 1
  store i32 %v3_dfdc, i32* %r0.global-to-local, align 4
  %v1_e324 = load i32, i32* @r4, align 4
  %v9_e324 = icmp eq i32 %v3_dfdc, %v1_e324
  store i1 %v9_e324, i1* %cpsr_z.global-to-local, align 1
  %v0_e328 = load i32, i32* %r3.global-to-local, align 4
  %v1_e328 = trunc i32 %v0_e328 to i8
  %v2_e328 = load i32, i32* @r5, align 4
  %v3_e328 = add i32 %v2_e328, 5
  %v4_e328 = inttoptr i32 %v3_e328 to i8*
  store i8 %v1_e328, i8* %v4_e328, align 1
  %v0_e32c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e32c, label %dec_label_pc_e330, label %dec_label_pc_e314.dec_label_pc_e1ac_crit_edge

dec_label_pc_e314.dec_label_pc_e1ac_crit_edge:    ; preds = %dec_label_pc_e314
  %v1_e1b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e1ac

dec_label_pc_e330:                                ; preds = %dec_label_pc_e314, %dec_label_pc_e1a0
  %v0_e330 = call i32 @function_105b4()
  %v1_e330 = trunc i32 %v0_e330 to i8
  store i32 %v0_e330, i32* %r0.global-to-local, align 4
  store i32 %v3_dfe0, i32* %r1.global-to-local, align 4
  %v4_e338 = sdiv i32 %v0_e330, 256
  store i32 %v4_e338, i32* %r3.global-to-local, align 4
  %v1_e33c = load i32, i32* @r4, align 4
  %v9_e33c = icmp eq i32 %v3_dfe0, %v1_e33c
  store i1 %v9_e33c, i1* %cpsr_z.global-to-local, align 1
  %v3_e340 = load i32, i32* @r5, align 4
  %v4_e340 = add i32 %v3_e340, 20
  %v5_e340 = inttoptr i32 %v4_e340 to i8*
  store i8 %v1_e330, i8* %v5_e340, align 1
  %v0_e344 = load i32, i32* %r3.global-to-local, align 4
  %v1_e344 = trunc i32 %v0_e344 to i8
  %v2_e344 = load i32, i32* @r6, align 4
  %v3_e344 = add i32 %v2_e344, 1
  %v4_e344 = inttoptr i32 %v3_e344 to i8*
  store i8 %v1_e344, i8* %v4_e344, align 1
  %v0_e348 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e348, label %dec_label_pc_e34c, label %dec_label_pc_e1b8

dec_label_pc_e34c:                                ; preds = %dec_label_pc_e330, %dec_label_pc_e1ac
  %v0_e34c = call i32 @function_105b4()
  %v1_e34c = trunc i32 %v0_e34c to i8
  store i32 %v0_e34c, i32* %r0.global-to-local, align 4
  store i32 %v1_df34, i32* %r2.global-to-local, align 4
  %v4_e354 = sdiv i32 %v0_e34c, 256
  store i32 %v4_e354, i32* %r3.global-to-local, align 4
  store i1 %v2_e1bc, i1* %cpsr_z.global-to-local, align 1
  %v1_e35c = trunc i32 %v4_e354 to i8
  %v2_e35c = load i32, i32* @r6, align 4
  %v3_e35c = add i32 %v2_e35c, 3
  %v4_e35c = inttoptr i32 %v3_e35c to i8*
  store i8 %v1_e35c, i8* %v4_e35c, align 1
  %v3_e360 = load i32, i32* @r6, align 4
  %v4_e360 = add i32 %v3_e360, 2
  %v5_e360 = inttoptr i32 %v4_e360 to i8*
  store i8 %v1_e34c, i8* %v5_e360, align 1
  %v0_e364 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e364, label %dec_label_pc_e1c4, label %dec_label_pc_e368

dec_label_pc_e368:                                ; preds = %dec_label_pc_e1b8, %dec_label_pc_e34c
  %v0_e368 = load i32, i32* @r5, align 4
  %v1_e368 = add i32 %v0_e368, 28
  store i32 %v1_e368, i32* @r4, align 4
  store i32 %v1_e368, i32* %r0.global-to-local, align 4
  store i32 %v0_dfbc, i32* %r1.global-to-local, align 4
  %v2_e374 = call i32 @function_10668(i32 %v1_e368, i32 %v0_dfbc)
  store i32 %v2_e374, i32* %r0.global-to-local, align 4
  store i32 %v0_dfbc, i32* %r3.global-to-local, align 4
  %v0_e37c = load i32, i32* @r7, align 4
  %v1_e37c = trunc i32 %v0_e37c to i8
  %v2_e37c = load i32, i32* @r4, align 4
  %v4_e37c = add i32 %v2_e37c, %v0_dfbc
  %v5_e37c = inttoptr i32 %v4_e37c to i8*
  store i8 %v1_e37c, i8* %v5_e37c, align 1
  br label %dec_label_pc_e1c4

dec_label_pc_e384:                                ; preds = %dec_label_pc_e1c4, %dec_label_pc_e158
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_e388 = call i32 @time(i32* null)
  store i32 %v2_e388, i32* %r0.global-to-local, align 4
  store i32 %v2_df58, i32* %sb.global-to-local, align 4
  %v9_e390 = icmp eq i32 %v2_df58, %v2_e388
  store i1 %v9_e390, i1* %cpsr_z.global-to-local, align 1
  %v6_e394 = icmp slt i32 %v2_df58, %v2_e388
  br i1 %v6_e394, label %dec_label_pc_e398, label %dec_label_pc_e158

dec_label_pc_e398:                                ; preds = %dec_label_pc_e384, %dec_label_pc_de10, %dec_label_pc_e3a0
  %v29_e39c = phi i32 [ %v3_df6c, %dec_label_pc_de10 ], [ %v1_e3a4, %dec_label_pc_e3a0 ], [ %v2_e388, %dec_label_pc_e384 ]
  store i32 %v3_de10, i32* %r4.global-to-local, align 4
  store i32 %v6_de10, i32* %r5.global-to-local, align 4
  store i32 %v9_de10, i32* %r6.global-to-local, align 4
  store i32 %v12_de10, i32* %r7.global-to-local, align 4
  store i32 %v18_de10, i32* %sb.global-to-local, align 4
  store i32 %v21_de10, i32* %sl.global-to-local, align 4
  ret i32 %v29_e39c

dec_label_pc_e3a0:                                ; preds = %dec_label_pc_df7c
  store i32 %v3_df6c, i32* %r0.global-to-local, align 4
  %v1_e3a4 = call i32 @close(i32 %v3_df6c)
  store i32 %v1_e3a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e398

dec_label_pc_e3ac:                                ; preds = %dec_label_pc_dffc
  %v3_e3b0 = sext i8 %v5_e050 to i32
  %v7_e3b0 = sext i8 %v5_e054 to i32
  %v3_e3b4 = sdiv i32 %v3_e3b0, 256
  store i32 %v3_e3b4, i32* %r1.global-to-local, align 4
  %v3_e3b8 = sdiv i32 %v7_e3b0, 256
  store i32 %v3_e3b8, i32* %r2.global-to-local, align 4
  store i32 %v1_e008, i32* %r3.global-to-local, align 4
  store i32 %v0_dfe8, i32* %r4.global-to-local, align 4
  store i32 %v1_e04c, i32* %sl.global-to-local, align 4
  %v3_e3d421 = udiv i32 %v1_e040, 256
  store i32 %v3_e3d421, i32* %r7.global-to-local, align 4
  %v4_e420 = sext i8 %v5_de78 to i32
  %sext10 = mul i32 %v6_ded8, 16777216
  %v4_e46c = sdiv i32 %sext10, 16777216
  br label %dec_label_pc_e3d8

dec_label_pc_e3d8:                                ; preds = %dec_label_pc_e3d8, %dec_label_pc_e3ac
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_e3e4 = call i32* @calloc(i32 1510, i32 1)
  %v4_e3e4 = ptrtoint i32* %v2_e3e4 to i32
  store i32 %v4_e3e4, i32* %r0.global-to-local, align 4
  store i32 %v4_de40, i32* %ip.global-to-local, align 4
  %v3_e3ec = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e3ec, i32* %r2.global-to-local, align 4
  %v2_e3f0 = load i32, i32* %r4.global-to-local, align 4
  %v5_e3f0 = mul i32 %v2_e3f0, 4
  %v6_e3f0 = add i32 %v5_e3f0, %v4_de40
  %v7_e3f0 = inttoptr i32 %v6_e3f0 to i32*
  store i32 %v4_e3e4, i32* %v7_e3f0, align 4
  %v0_e3f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_e3f4 = load i32, i32* %r2.global-to-local, align 4
  %v4_e3f4 = mul i32 %v1_e3f4, 4
  %v5_e3f4 = add i32 %v4_e3f4, %v0_e3f4
  %v6_e3f4 = inttoptr i32 %v5_e3f4 to i32*
  %v7_e3f4 = load i32, i32* %v6_e3f4, align 4
  store i32 %v7_e3f4, i32* %r1.global-to-local, align 4
  %v1_e3f8 = inttoptr i32 %v7_e3f4 to i8*
  %v2_e3f8 = load i8, i8* %v1_e3f8, align 1
  %tmp68 = urem i8 %v2_e3f8, 16
  %v1_e3fc = zext i8 %tmp68 to i32
  %v1_e400 = or i32 %v1_e3fc, 64
  store i32 %v1_e400, i32* %r3.global-to-local, align 4
  %v1_e404 = trunc i32 %v1_e400 to i8
  store i8 %v1_e404, i8* %v1_e3f8, align 1
  %v0_e408 = load i32, i32* %r1.global-to-local, align 4
  %v1_e408 = inttoptr i32 %v0_e408 to i8*
  %v2_e408 = load i8, i8* %v1_e408, align 1
  %v3_e408 = zext i8 %v2_e408 to i32
  %v1_e40c = and i32 %v3_e408, 240
  %v1_e410 = or i32 %v1_e40c, 5
  store i32 %v1_e410, i32* %r2.global-to-local, align 4
  %v3_e418 = add i32 %v0_e408, 9
  %v4_e418 = inttoptr i32 %v3_e418 to i8*
  store i8 17, i8* %v4_e418, align 1
  %v0_e41c = load i32, i32* %r2.global-to-local, align 4
  %v1_e41c = trunc i32 %v0_e41c to i8
  %v2_e41c = load i32, i32* %r1.global-to-local, align 4
  %v3_e41c = inttoptr i32 %v2_e41c to i8*
  store i8 %v1_e41c, i8* %v3_e41c, align 1
  store i32 %v4_e420, i32* %r0.global-to-local, align 4
  %v2_e424 = load i32, i32* %r1.global-to-local, align 4
  %v3_e424 = add i32 %v2_e424, 1
  %v4_e424 = inttoptr i32 %v3_e424 to i8*
  store i8 %v5_de78, i8* %v4_e424, align 1
  %v2_e42c = load i32, i32* %r1.global-to-local, align 4
  %v3_e42c = add i32 %v2_e42c, 8
  %v4_e42c = inttoptr i32 %v3_e42c to i8*
  store i8 %v5_deb0, i8* %v4_e42c, align 1
  %v3_e430 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e430, i32* %r2.global-to-local, align 4
  %v3_e434 = mul i32 %v3_e430, 32
  store i32 %v3_e434, i32* %r3.global-to-local, align 4
  %v0_e438 = load i32, i32* @fp, align 4
  %v1_e438 = load i32, i32* %r1.global-to-local, align 4
  %v2_e438 = add i32 %v1_e438, 12
  %v3_e438 = inttoptr i32 %v2_e438 to i32*
  store i32 %v0_e438, i32* %v3_e438, align 4
  %v0_e43c = load i32, i32* %r3.global-to-local, align 4
  %v1_e43c = load i32, i32* %r2.global-to-local, align 4
  %tmp69 = mul i32 %v1_e43c, -8
  %v5_e43c = add i32 %v0_e43c, %tmp69
  store i32 %v3_e3b0, i32* %ip.global-to-local, align 4
  %v1_e444 = load i32, i32* @r8, align 4
  %v2_e444 = add i32 %v1_e444, %v5_e43c
  store i32 %v2_e444, i32* %r3.global-to-local, align 4
  %v1_e448 = add i32 %v2_e444, 16
  %v2_e448 = inttoptr i32 %v1_e448 to i32*
  %v3_e448 = load i32, i32* %v2_e448, align 4
  store i32 %v3_e448, i32* %r0.global-to-local, align 4
  %v2_e44c = load i32, i32* %r1.global-to-local, align 4
  %v3_e44c = add i32 %v2_e44c, 2
  %v4_e44c = inttoptr i32 %v3_e44c to i8*
  store i8 %v5_e050, i8* %v4_e44c, align 1
  store i32 %v3_e3b8, i32* %ip.global-to-local, align 4
  %v0_e454 = load i32, i32* %r2.global-to-local, align 4
  %v1_e454 = add i32 %v0_e454, 1
  store i32 %v1_e454, i32* %r4.global-to-local, align 4
  store i32 %v1_de14, i32* %r3.global-to-local, align 4
  store i32 %v7_e3b0, i32* %r2.global-to-local, align 4
  %v0_e460 = load i32, i32* %r0.global-to-local, align 4
  %v1_e460 = load i32, i32* %r1.global-to-local, align 4
  %v2_e460 = add i32 %v1_e460, 16
  %v3_e460 = inttoptr i32 %v2_e460 to i32*
  store i32 %v0_e460, i32* %v3_e460, align 4
  store i32 %v3_e3b4, i32* %r0.global-to-local, align 4
  %v0_e468 = load i32, i32* %ip.global-to-local, align 4
  %v1_e468 = trunc i32 %v0_e468 to i8
  %v2_e468 = load i32, i32* %r1.global-to-local, align 4
  %v3_e468 = add i32 %v2_e468, 5
  %v4_e468 = inttoptr i32 %v3_e468 to i8*
  store i8 %v1_e468, i8* %v4_e468, align 1
  store i32 %v4_e46c, i32* %ip.global-to-local, align 4
  %v0_e470 = load i32, i32* %r0.global-to-local, align 4
  %v1_e470 = trunc i32 %v0_e470 to i8
  %v2_e470 = load i32, i32* %r1.global-to-local, align 4
  %v3_e470 = add i32 %v2_e470, 3
  %v4_e470 = inttoptr i32 %v3_e470 to i8*
  store i8 %v1_e470, i8* %v4_e470, align 1
  %v0_e474 = load i32, i32* %r2.global-to-local, align 4
  %v1_e474 = trunc i32 %v0_e474 to i8
  %v2_e474 = load i32, i32* %r1.global-to-local, align 4
  %v3_e474 = add i32 %v2_e474, 4
  %v4_e474 = inttoptr i32 %v3_e474 to i8*
  store i8 %v1_e474, i8* %v4_e474, align 1
  %v0_e478 = load i32, i32* %r4.global-to-local, align 4
  %v1_e478 = load i32, i32* %r3.global-to-local, align 4
  %v9_e478 = icmp eq i32 %v0_e478, %v1_e478
  store i1 %v9_e478, i1* %cpsr_z.global-to-local, align 1
  store i32 64, i32* %r0.global-to-local, align 4
  %v0_e480 = load i32, i32* %r1.global-to-local, align 4
  %v1_e480 = add i32 %v0_e480, 20
  store i32 %v1_e480, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e488 = add i32 %v0_e480, 6
  %v4_e488 = inttoptr i32 %v3_e488 to i8*
  store i8 64, i8* %v4_e488, align 1
  %v0_e48c = load i32, i32* %r2.global-to-local, align 4
  %v1_e48c = trunc i32 %v0_e48c to i8
  %v2_e48c = load i32, i32* %r1.global-to-local, align 4
  %v3_e48c = add i32 %v2_e48c, 7
  %v4_e48c = inttoptr i32 %v3_e48c to i8*
  store i8 %v1_e48c, i8* %v4_e48c, align 1
  %v0_e490 = load i32, i32* %r5.global-to-local, align 4
  %v1_e490 = trunc i32 %v0_e490 to i8
  %v2_e490 = load i32, i32* %r1.global-to-local, align 4
  %v3_e490 = add i32 %v2_e490, 20
  %v4_e490 = inttoptr i32 %v3_e490 to i8*
  store i8 %v1_e490, i8* %v4_e490, align 1
  %v0_e494 = load i32, i32* %r7.global-to-local, align 4
  %v1_e494 = trunc i32 %v0_e494 to i8
  %v2_e494 = load i32, i32* %r3.global-to-local, align 4
  %v3_e494 = add i32 %v2_e494, 5
  %v4_e494 = inttoptr i32 %v3_e494 to i8*
  store i8 %v1_e494, i8* %v4_e494, align 1
  %v0_e498 = load i32, i32* %ip.global-to-local, align 4
  %v1_e498 = trunc i32 %v0_e498 to i8
  %v2_e498 = load i32, i32* %r3.global-to-local, align 4
  %v3_e498 = add i32 %v2_e498, 1
  %v4_e498 = inttoptr i32 %v3_e498 to i8*
  store i8 %v1_e498, i8* %v4_e498, align 1
  %v0_e49c = load i32, i32* %r6.global-to-local, align 4
  %v1_e49c = trunc i32 %v0_e49c to i8
  %v2_e49c = load i32, i32* %r3.global-to-local, align 4
  %v3_e49c = add i32 %v2_e49c, 2
  %v4_e49c = inttoptr i32 %v3_e49c to i8*
  store i8 %v1_e49c, i8* %v4_e49c, align 1
  %v0_e4a0 = load i32, i32* %sl.global-to-local, align 4
  %v1_e4a0 = trunc i32 %v0_e4a0 to i8
  %v2_e4a0 = load i32, i32* %r3.global-to-local, align 4
  %v3_e4a0 = add i32 %v2_e4a0, 3
  %v4_e4a0 = inttoptr i32 %v3_e4a0 to i8*
  store i8 %v1_e4a0, i8* %v4_e4a0, align 1
  %v0_e4a4 = load i32, i32* %sb.global-to-local, align 4
  %v1_e4a4 = trunc i32 %v0_e4a4 to i8
  %v2_e4a4 = load i32, i32* %r3.global-to-local, align 4
  %v3_e4a4 = add i32 %v2_e4a4, 4
  %v4_e4a4 = inttoptr i32 %v3_e4a4 to i8*
  store i8 %v1_e4a4, i8* %v4_e4a4, align 1
  %v0_e4a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e4a8, i32* %stack_var_-40, align 4
  %v5_e4ac = icmp slt i32 %v0_e478, %v1_e478
  br i1 %v5_e4ac, label %dec_label_pc_e3d8, label %dec_label_pc_e158.preheader

; uselistorder directives
  uselistorder i32 %v3_e3b8, { 1, 0 }
  uselistorder i32 %v3_e3b4, { 1, 0 }
  uselistorder i32 %v7_e3b0, { 1, 0 }
  uselistorder i32 %v3_e3b0, { 1, 0 }
  uselistorder i32 %v1_e3a4, { 1, 0 }
  uselistorder i32 %v4_e354, { 1, 0 }
  uselistorder i32 %v0_e34c, { 0, 2, 1 }
  uselistorder i32 %v0_e330, { 0, 2, 1 }
  uselistorder i32 %v2_e2e8, { 1, 0 }
  uselistorder i32 %v8_e2cc, { 1, 2, 0, 3 }
  uselistorder i32 %v3_e2b8, { 1, 0 }
  uselistorder i32 %v3_e294, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_e260, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_e204, { 0, 2, 1 }
  uselistorder i32 %v0_e1ec, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e1d8, { 1, 0 }
  uselistorder i32 %v2_e1d4, { 0, 2, 1 }
  uselistorder i1 %v7_e184, { 1, 0 }
  uselistorder i1 %v3_e308, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e0f4, { 1, 0 }
  uselistorder i8 %v5_e054, { 0, 2, 1 }
  uselistorder i8 %v5_e050, { 0, 2, 1 }
  uselistorder i32 %v1_e04c, { 2, 3, 0, 1 }
  uselistorder i32 %v3_e038, { 1, 0 }
  uselistorder i32 %v1_e024, { 1, 0 }
  uselistorder i32 %v1_e008, { 1, 2, 0 }
  uselistorder i32 %v1_e004, { 2, 3, 1, 0 }
  uselistorder i32 %v1_e000, { 3, 4, 0, 2, 1 }
  uselistorder i1 %v2_dfe4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_dfd8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_dfcc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_dfbc, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_dfb0, { 3, 1, 2, 0 }
  uselistorder i1 %v7_df9c, { 1, 0 }
  uselistorder i1 %v7_df70, { 1, 0 }
  uselistorder i32 %v3_df6c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_df58, { 2, 1, 0 }
  uselistorder i32 %v1_df34, { 3, 1, 2, 0 }
  uselistorder i32 %v6_ded8, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_dec0, { 1, 0 }
  uselistorder i8 %v5_deb0, { 0, 2, 1 }
  uselistorder i32 %v6_de94, { 1, 0 }
  uselistorder i32 %v7_de7c, { 0, 2, 1, 4, 3, 5 }
  uselistorder i8 %v5_de78, { 1, 0, 3, 2 }
  uselistorder i32 %v6_de58, { 1, 0 }
  uselistorder i32 %v4_de40, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_de14, { 6, 2, 3, 4, 1, 5, 9, 0, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 15, 13, 14 }
  uselistorder i32* %sl.global-to-local, { 0, 1, 2, 4, 5, 3 }
  uselistorder i32* %sb.global-to-local, { 5, 0, 1, 6, 7, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 3, 4, 1 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 10, 8, 9, 11, 12, 13, 14, 15, 16, 17, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 26, 27, 28, 29, 30, 31, 32, 33, 40, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 27, 28, 29, 35, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 13, 9, 10, 11, 12, 14, 15, 16, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 17, 18, 19, 20, 21, 23, 22, 24, 25, 27, 26, 29, 28, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 6, 7, 8, 9, 11, 10, 13, 12, 15, 30, 2, 31, 33, 34, 32, 36, 35, 38, 37, 39, 1, 40, 3, 41, 42, 43, 44, 45, 46, 47, 51, 48, 49, 50, 14, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 20, 14, 15, 16, 17, 18, 19, 21, 22, 23, 2, 3, 4, 5 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_e398, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e368, { 1, 0 }
  uselistorder label %dec_label_pc_e1c4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e158, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
}

define i32 @function_e4b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_e4b8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_e4b8 = load i32, i32* @r4, align 4
  %v6_e4b8 = load i32, i32* @r5, align 4
  %v9_e4b8 = load i32, i32* @r6, align 4
  %v12_e4b8 = load i32, i32* @r7, align 4
  %v15_e4b8 = load i32, i32* @r8, align 4
  %v1_e4bc = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  %v1_e4d8 = urem i32 %arg4, 256
  store i32 %v1_e4d8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_e4e8 = call i32* @calloc(i32 %v1_e4bc, i32 4)
  %v3_e4e8 = ptrtoint i32* %v2_e4e8 to i32
  %v0_e4ec = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_e4f4 = load i32, i32* @r7, align 4
  store i32 %v0_e4f4, i32* %r3.global-to-local, align 4
  store i32 %v3_e4e8, i32* %fp.global-to-local, align 4
  %v0_e4fc = load i32, i32* @r4, align 4
  %v4_e500 = inttoptr i32 %v0_e4ec to i32*
  %v5_e500 = call i32 @function_8f6c(i32 %v0_e4fc, i32* %v4_e500, i32 2, i32 %v0_e4f4)
  %v1_e50c = urem i32 %v5_e500, 256
  store i32 %v1_e50c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_e518 = load i32, i32* @r4, align 4
  %v0_e51c = load i32, i32* @r5, align 4
  %v5_e520 = trunc i32 %v5_e500 to i8
  %v6_e524 = inttoptr i32 %v0_e51c to i32*
  %v7_e524 = call i32 @function_8f6c(i32 %v0_e518, i32* %v6_e524, i32 3, i32 65535)
  %v0_e528 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_e534 = load i32, i32* @r4, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_e53c = inttoptr i32 %v0_e528 to i32*
  %v6_e53c = call i32 @function_8f6c(i32 %v0_e534, i32* %v5_e53c, i32 4, i32 64)
  %v1_e544 = urem i32 %v6_e53c, 256
  store i32 %v1_e544, i32* %ip.global-to-local, align 4
  %v0_e548 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_e550 = load i32, i32* @r7, align 4
  store i32 %v0_e550, i32* %r3.global-to-local, align 4
  %v0_e554 = load i32, i32* @r4, align 4
  %v6_e55c = inttoptr i32 %v0_e548 to i32*
  %v7_e55c = call i32 @function_8f6c(i32 %v0_e554, i32* %v6_e55c, i32 5, i32 %v0_e550)
  %v1_e568 = urem i32 %v7_e55c, 256
  store i32 %v1_e568, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_e574 = load i32, i32* @r4, align 4
  %v0_e578 = load i32, i32* @r5, align 4
  %v5_e580 = inttoptr i32 %v0_e578 to i32*
  %v6_e580 = call i32 @function_8f6c(i32 %v0_e574, i32* %v5_e580, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_e590 = load i32, i32* @r5, align 4
  store i32 %v6_e580, i32* @r8, align 4
  %v0_e598 = load i32, i32* @r4, align 4
  %v4_e59c = inttoptr i32 %v0_e590 to i32*
  %v5_e59c = call i32 @function_8f6c(i32 %v0_e598, i32* %v4_e59c, i32 7, i32 27015)
  store i32 %v5_e59c, i32* @r4, align 4
  %v0_e5a4 = load i32, i32* @r7, align 4
  store i32 %v0_e5a4, i32* %stack_var_-44, align 4
  %v1_e5ac = inttoptr i32 %v0_e5a4 to i32*
  %v2_e5ac = call i32 @time(i32* %v1_e5ac)
  %v1_e5b0 = load i32, i32* @r6, align 4
  %v2_e5b0 = add i32 %v1_e5b0, %v2_e5ac
  %v1_e5bc = call i32 @function_12288(i32 36)
  %v3_e5c8 = call i32 @function_121a4(i32 36, i32* nonnull %stack_var_-44)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_e5dc = call i32 @socket(i32 2, i32 3, i32 17)
  %v7_e5e0 = icmp eq i32 %v3_e5dc, -1
  store i1 %v7_e5e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e5dc, i32* %sb.global-to-local, align 4
  br i1 %v7_e5e0, label %dec_label_pc_e9a0, label %dec_label_pc_e5ec

dec_label_pc_e5ec:                                ; preds = %dec_label_pc_e4b8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_e5f4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_e5f4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_e5fc = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_e608 = call i32 @setsockopt(i32 %v0_e5fc, i32 3, i32 %v6_e5f4, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_e60c = icmp eq i32 %v6_e608, -1
  store i1 %v7_e60c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e60c, label %dec_label_pc_e9a8, label %dec_label_pc_e614

dec_label_pc_e614:                                ; preds = %dec_label_pc_e5ec
  store i32 %v1_e4bc, i32* %r2.global-to-local, align 4
  %v0_e620 = load i32, i32* @r4, align 4
  %v3_e620 = mul i32 %v0_e620, 65536
  store i32 %v3_e620, i32* %lr.global-to-local, align 4
  %v0_e624 = load i32, i32* @r8, align 4
  %v3_e624 = mul i32 %v0_e624, 65536
  store i32 %v3_e624, i32* %ip.global-to-local, align 4
  %v3_e628 = urem i32 %v7_e524, 65536
  store i32 %v3_e628, i32* %r3.global-to-local, align 4
  %v3_e62c = urem i32 %v0_e624, 65536
  store i32 %v3_e62c, i32* %r4.global-to-local, align 4
  %v3_e630 = urem i32 %v0_e620, 65536
  %v2_e634 = icmp eq i32 %v1_e4bc, 0
  store i1 %v2_e634, i1* %cpsr_z.global-to-local, align 1
  %v0_e638 = load i32, i32* @r7, align 4
  store i32 %v0_e638, i32* %stack_var_-40, align 4
  br i1 %v2_e634, label %dec_label_pc_e98c.critedge, label %dec_label_pc_e64c

dec_label_pc_e64c:                                ; preds = %dec_label_pc_e614
  %v1_e650 = urem i32 %v7_e524, 256
  %v1_e654 = urem i32 %v0_e620, 256
  %tmp42 = udiv i32 %v7_e524, 256
  %v3_e65c = urem i32 %tmp42, 256
  %v3_e660 = mul nuw nsw i32 %v1_e654, 256
  store i32 %v3_e660, i32* %r3.global-to-local, align 4
  %v1_e664 = urem i32 %v0_e624, 256
  %v4_e668 = mul nuw nsw i32 %v1_e650, 256
  %v5_e668 = or i32 %v4_e668, %v3_e65c
  store i32 %v5_e668, i32* %r8.global-to-local, align 4
  %tmp43 = udiv i32 %v0_e624, 256
  %v3_e66c = urem i32 %tmp43, 256
  store i32 %v3_e66c, i32* %ip.global-to-local, align 4
  %tmp44 = udiv i32 %v0_e620, 256
  %v4_e670 = urem i32 %tmp44, 256
  %v5_e670 = or i32 %v4_e670, %v3_e660
  store i32 %v5_e670, i32* %r5.global-to-local, align 4
  %v4_e674 = mul nuw nsw i32 %v1_e664, 256
  %v5_e674 = or i32 %v4_e674, %v3_e66c
  store i32 %v5_e674, i32* %r6.global-to-local, align 4
  store i32 %v1_e654, i32* %r2.global-to-local, align 4
  store i32 %v0_e638, i32* %r4.global-to-local, align 4
  store i32 %v1_e664, i32* %r7.global-to-local, align 4
  %sext = mul i32 %v6_e53c, 16777216
  %v4_e6f0 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v7_e524, 16777216
  %v4_e70c = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_e620, 16777216
  %v4_e768 = sdiv i32 %sext7, 16777216
  %v2_e6f4 = icmp eq i32 %v1_e568, 0
  %v1_e6f8 = trunc i32 %v4_e6f0 to i8
  br label %dec_label_pc_e690

dec_label_pc_e690:                                ; preds = %bb48, %dec_label_pc_e64c
  %v2_e698 = call i32* @calloc(i32 128, i32 1)
  %v4_e698 = ptrtoint i32* %v2_e698 to i32
  %v3_e69c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e69c, i32* %r3.global-to-local, align 4
  %v1_e6a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_e6a0 = load i32, i32* %r4.global-to-local, align 4
  %v5_e6a0 = mul i32 %v2_e6a0, 4
  %v6_e6a0 = add i32 %v5_e6a0, %v1_e6a0
  %v7_e6a0 = inttoptr i32 %v6_e6a0 to i32*
  store i32 %v4_e698, i32* %v7_e6a0, align 4
  %v0_e6a4 = load i32, i32* %fp.global-to-local, align 4
  %v1_e6a4 = load i32, i32* %r3.global-to-local, align 4
  %v4_e6a4 = mul i32 %v1_e6a4, 4
  %v5_e6a4 = add i32 %v4_e6a4, %v0_e6a4
  %v6_e6a4 = inttoptr i32 %v5_e6a4 to i32*
  %v7_e6a4 = load i32, i32* %v6_e6a4, align 4
  store i32 %v7_e6a4, i32* %lr.global-to-local, align 4
  %v1_e6a8 = inttoptr i32 %v7_e6a4 to i8*
  %v2_e6a8 = load i8, i8* %v1_e6a8, align 1
  %tmp = urem i8 %v2_e6a8, 16
  %v1_e6ac = zext i8 %tmp to i32
  %v1_e6b0 = or i32 %v1_e6ac, 64
  store i32 %v1_e6b0, i32* %r3.global-to-local, align 4
  %v1_e6b8 = trunc i32 %v1_e6b0 to i8
  store i8 %v1_e6b8, i8* %v1_e6a8, align 1
  %v0_e6bc = load i32, i32* %lr.global-to-local, align 4
  %v1_e6bc = inttoptr i32 %v0_e6bc to i8*
  %v2_e6bc = load i8, i8* %v1_e6bc, align 1
  %v1_e6c0 = and i8 %v2_e6bc, -16
  %v1_e6c4 = or i8 %v1_e6c0, 5
  store i8 %v1_e6c4, i8* %v1_e6bc, align 1
  %v2_e6d0 = load i32, i32* %lr.global-to-local, align 4
  %v3_e6d0 = add i32 %v2_e6d0, 1
  %v4_e6d0 = inttoptr i32 %v3_e6d0 to i8*
  store i8 %v5_e520, i8* %v4_e6d0, align 1
  %v3_e6d4 = load i32, i32* %stack_var_-44, align 4
  %v1_e6d8 = add i32 %v3_e6d4, 32
  %tmp45 = mul i32 %v1_e6d8, 256
  store i32 %v1_e568, i32* %r4.global-to-local, align 4
  %v1_e6e8 = and i32 %tmp45, 65280
  %tmp46 = udiv i32 %v1_e6d8, 256
  %v4_e6ec = urem i32 %tmp46, 256
  %v5_e6ec = or i32 %v4_e6ec, %v1_e6e8
  store i32 %v5_e6ec, i32* %r2.global-to-local, align 4
  store i32 %v4_e6f0, i32* %r3.global-to-local, align 4
  store i1 %v2_e6f4, i1* %cpsr_z.global-to-local, align 1
  %v2_e6f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_e6f8 = add i32 %v2_e6f8, 8
  %v4_e6f8 = inttoptr i32 %v3_e6f8 to i8*
  store i8 %v1_e6f8, i8* %v4_e6f8, align 1
  %v0_e6fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e6fc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_e690
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e700 = load i32, i32* %lr.global-to-local, align 4
  %v4_e700 = add i32 %v3_e700, 6
  %v5_e700 = inttoptr i32 %v4_e700 to i8*
  store i8 64, i8* %v5_e700, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e690, %bb
  %v0_e708 = load i32, i32* %r2.global-to-local, align 4
  %v3_e708 = sdiv i32 %v0_e708, 256
  store i32 %v3_e708, i32* %ip.global-to-local, align 4
  store i32 %v4_e70c, i32* %r4.global-to-local, align 4
  %v2_e710 = load i32, i32* %lr.global-to-local, align 4
  %v3_e710 = add i32 %v2_e710, 9
  %v4_e710 = inttoptr i32 %v3_e710 to i8*
  store i8 17, i8* %v4_e710, align 1
  store i32 ptrtoint (i32* @global_var_1c21c.133 to i32), i32* %r3.global-to-local, align 4
  %v0_e718 = load i32, i32* %r2.global-to-local, align 4
  %v1_e718 = trunc i32 %v0_e718 to i8
  %v2_e718 = load i32, i32* %lr.global-to-local, align 4
  %v3_e718 = add i32 %v2_e718, 2
  %v4_e718 = inttoptr i32 %v3_e718 to i8*
  store i8 %v1_e718, i8* %v4_e718, align 1
  %v0_e71c = load i32, i32* %ip.global-to-local, align 4
  %v1_e71c = trunc i32 %v0_e71c to i8
  %v2_e71c = load i32, i32* %lr.global-to-local, align 4
  %v3_e71c = add i32 %v2_e71c, 3
  %v4_e71c = inttoptr i32 %v3_e71c to i8*
  store i8 %v1_e71c, i8* %v4_e71c, align 1
  %v0_e720 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e720, label %.thread8, label %bb47

.thread8:                                         ; preds = %.thread
  %v3_e7249 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e7249, i32* %ip.global-to-local, align 4
  br label %bb48

bb47:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e724 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e724, i32* %ip.global-to-local, align 4
  %v3_e728 = load i32, i32* %lr.global-to-local, align 4
  %v4_e728 = add i32 %v3_e728, 7
  %v5_e728 = inttoptr i32 %v4_e728 to i8*
  store i8 0, i8* %v5_e728, align 1
  %v0_e730.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %.thread8, %bb47
  %v0_e730 = phi i32 [ %v3_e7249, %.thread8 ], [ %v0_e730.pre, %bb47 ]
  %v2_e72c = load i32, i32* @global_var_1c21c.133, align 4
  store i32 %v2_e72c, i32* %r2.global-to-local, align 4
  %v3_e730 = mul i32 %v0_e730, 32
  store i32 %v3_e730, i32* %r3.global-to-local, align 4
  %v1_e734 = load i32, i32* %lr.global-to-local, align 4
  %v2_e734 = add i32 %v1_e734, 12
  %v3_e734 = inttoptr i32 %v2_e734 to i32*
  store i32 %v2_e72c, i32* %v3_e734, align 4
  %v0_e738 = load i32, i32* %r3.global-to-local, align 4
  %v1_e738 = load i32, i32* %ip.global-to-local, align 4
  %tmp53 = mul i32 %v1_e738, -8
  %v5_e738 = add i32 %v0_e738, %tmp53
  %v1_e73c = load i32, i32* @sl, align 4
  %v2_e73c = add i32 %v5_e738, %v1_e73c
  store i32 %v2_e73c, i32* %r3.global-to-local, align 4
  %v1_e740 = add i32 %v2_e73c, 16
  %v2_e740 = inttoptr i32 %v1_e740 to i32*
  %v3_e740 = load i32, i32* %v2_e740, align 4
  %v1_e744 = load i32, i32* %lr.global-to-local, align 4
  %v2_e744 = add i32 %v1_e744, 16
  %v3_e744 = inttoptr i32 %v2_e744 to i32*
  store i32 %v3_e740, i32* %v3_e744, align 4
  %v3_e748 = load i32, i32* %stack_var_-44, align 4
  %v1_e74c = add i32 %v3_e748, 12
  %tmp49 = mul i32 %v1_e74c, 256
  %v1_e75c = and i32 %tmp49, 65280
  %tmp50 = udiv i32 %v1_e74c, 256
  %v4_e760 = urem i32 %tmp50, 256
  %v5_e760 = or i32 %v4_e760, %v1_e75c
  store i32 %v5_e760, i32* %ip.global-to-local, align 4
  %v1_e764 = load i32, i32* %lr.global-to-local, align 4
  %v2_e764 = add i32 %v1_e764, 28
  %v3_e764 = inttoptr i32 %v2_e764 to i32*
  store i32 -1, i32* %v3_e764, align 4
  store i32 %v4_e768, i32* %r2.global-to-local, align 4
  %v0_e76c = load i32, i32* %r4.global-to-local, align 4
  %v1_e76c = trunc i32 %v0_e76c to i8
  %v2_e76c = load i32, i32* %lr.global-to-local, align 4
  %v3_e76c = add i32 %v2_e76c, 5
  %v4_e76c = inttoptr i32 %v3_e76c to i8*
  store i8 %v1_e76c, i8* %v4_e76c, align 1
  %v0_e770 = load i32, i32* %ip.global-to-local, align 4
  %v3_e770 = sdiv i32 %v0_e770, 256
  store i32 %v3_e770, i32* %r3.global-to-local, align 4
  %v0_e774 = load i32, i32* %lr.global-to-local, align 4
  %v1_e774 = add i32 %v0_e774, 20
  store i32 %v1_e774, i32* %r4.global-to-local, align 4
  %v0_e778 = load i32, i32* %r8.global-to-local, align 4
  %v1_e778 = trunc i32 %v0_e778 to i8
  %v3_e778 = add i32 %v0_e774, 4
  %v4_e778 = inttoptr i32 %v3_e778 to i8*
  store i8 %v1_e778, i8* %v4_e778, align 1
  %v0_e77c = load i32, i32* %r6.global-to-local, align 4
  %v1_e77c = trunc i32 %v0_e77c to i8
  %v2_e77c = load i32, i32* %lr.global-to-local, align 4
  %v3_e77c = add i32 %v2_e77c, 20
  %v4_e77c = inttoptr i32 %v3_e77c to i8*
  store i8 %v1_e77c, i8* %v4_e77c, align 1
  %v0_e780 = load i32, i32* %r3.global-to-local, align 4
  %v1_e780 = trunc i32 %v0_e780 to i8
  %v2_e780 = load i32, i32* %r4.global-to-local, align 4
  %v3_e780 = add i32 %v2_e780, 5
  %v4_e780 = inttoptr i32 %v3_e780 to i8*
  store i8 %v1_e780, i8* %v4_e780, align 1
  %v0_e784 = load i32, i32* %r5.global-to-local, align 4
  %v1_e784 = trunc i32 %v0_e784 to i8
  %v2_e784 = load i32, i32* %r4.global-to-local, align 4
  %v3_e784 = add i32 %v2_e784, 2
  %v4_e784 = inttoptr i32 %v3_e784 to i8*
  store i8 %v1_e784, i8* %v4_e784, align 1
  %v0_e788 = load i32, i32* %r7.global-to-local, align 4
  %v1_e788 = trunc i32 %v0_e788 to i8
  %v2_e788 = load i32, i32* %r4.global-to-local, align 4
  %v3_e788 = add i32 %v2_e788, 1
  %v4_e788 = inttoptr i32 %v3_e788 to i8*
  store i8 %v1_e788, i8* %v4_e788, align 1
  %v0_e78c = load i32, i32* %lr.global-to-local, align 4
  %v1_e78c = add i32 %v0_e78c, 32
  %v0_e790 = load i32, i32* %r2.global-to-local, align 4
  %v1_e790 = trunc i32 %v0_e790 to i8
  %v2_e790 = load i32, i32* %r4.global-to-local, align 4
  %v3_e790 = add i32 %v2_e790, 3
  %v4_e790 = inttoptr i32 %v3_e790 to i8*
  store i8 %v1_e790, i8* %v4_e790, align 1
  %v0_e794 = load i32, i32* %ip.global-to-local, align 4
  %v1_e794 = trunc i32 %v0_e794 to i8
  %v2_e794 = load i32, i32* %r4.global-to-local, align 4
  %v3_e794 = add i32 %v2_e794, 4
  %v4_e794 = inttoptr i32 %v3_e794 to i8*
  store i8 %v1_e794, i8* %v4_e794, align 1
  %v3_e798 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e798, i32* %r2.global-to-local, align 4
  %v3_e79c = call i32 @function_12db8(i32 %v1_e78c, i32 %v3_e5c8, i32 %v3_e798)
  %v3_e7a0 = load i32, i32* %stack_var_-40, align 4
  %v1_e7a4 = add i32 %v3_e7a0, 1
  store i32 %v1_e7a4, i32* %r4.global-to-local, align 4
  store i32 %v1_e4bc, i32* %r3.global-to-local, align 4
  %v9_e7ac = icmp eq i32 %v1_e7a4, %v1_e4bc
  store i1 %v9_e7ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e7a4, i32* %stack_var_-40, align 4
  %v5_e7b4 = icmp slt i32 %v1_e7a4, %v1_e4bc
  br i1 %v5_e7b4, label %dec_label_pc_e690, label %dec_label_pc_e7b8

dec_label_pc_e7b8:                                ; preds = %bb48, %dec_label_pc_e98c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_e634, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_e634, label %dec_label_pc_e98c, label %dec_label_pc_e7cc

dec_label_pc_e7cc:                                ; preds = %dec_label_pc_e7b8
  store i32 0, i32* %r8.global-to-local, align 4
  %v3_e7dc = icmp eq i32 %v3_e628, 65535
  br label %dec_label_pc_e8b0

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e8b0
  store i1 %v3_e7dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e7dc, label %dec_label_pc_e940, label %dec_label_pc_e7e4

dec_label_pc_e7e4:                                ; preds = %dec_label_pc_e8d8.dec_label_pc_e7e4_crit_edge, %dec_label_pc_e7d8
  %v1_e7e8 = phi i32 [ %v1_e7e8.pre, %dec_label_pc_e8d8.dec_label_pc_e7e4_crit_edge ], [ 65535, %dec_label_pc_e7d8 ]
  store i32 %v3_e62c, i32* %r2.global-to-local, align 4
  %v9_e7e8 = icmp eq i32 %v3_e62c, %v1_e7e8
  store i1 %v9_e7e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e7e8, label %dec_label_pc_e95c, label %dec_label_pc_e7f0

dec_label_pc_e7f0:                                ; preds = %dec_label_pc_e940.dec_label_pc_e7f0_crit_edge, %dec_label_pc_e7e4
  %v1_e7f4 = phi i32 [ %v1_e7f4.pre, %dec_label_pc_e940.dec_label_pc_e7f0_crit_edge ], [ %v1_e7e8, %dec_label_pc_e7e4 ]
  store i32 %v3_e630, i32* %r3.global-to-local, align 4
  %v9_e7f4 = icmp eq i32 %v3_e630, %v1_e7f4
  store i1 %v9_e7f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e7f4, label %dec_label_pc_e978, label %dec_label_pc_e7fc

dec_label_pc_e7fc:                                ; preds = %dec_label_pc_e95c, %dec_label_pc_e7f0, %dec_label_pc_e978
  %v0_e800 = load i32, i32* %r8.global-to-local, align 4
  %v1_e800 = trunc i32 %v0_e800 to i8
  %v2_e800 = load i32, i32* @r5, align 4
  %v3_e800 = add i32 %v2_e800, 10
  %v4_e800 = inttoptr i32 %v3_e800 to i8*
  store i8 %v1_e800, i8* %v4_e800, align 1
  %v0_e804 = load i32, i32* %r8.global-to-local, align 4
  %v1_e804 = trunc i32 %v0_e804 to i8
  %v2_e804 = load i32, i32* @r5, align 4
  %v3_e804 = add i32 %v2_e804, 11
  %v4_e804 = inttoptr i32 %v3_e804 to i8*
  store i8 %v1_e804, i8* %v4_e804, align 1
  %v0_e808 = load i32, i32* @r5, align 4
  store i32 %v0_e808, i32* @r0, align 4
  %v2_e80c = call i32 @function_f188(i32 %v0_e808, i32 20)
  %v3_e80c = trunc i32 %v2_e80c to i8
  %v4_e810 = sdiv i32 %v2_e80c, 256
  store i32 %v4_e810, i32* %r3.global-to-local, align 4
  %v1_e814 = trunc i32 %v4_e810 to i8
  %v2_e814 = load i32, i32* @r5, align 4
  %v3_e814 = add i32 %v2_e814, 11
  %v4_e814 = inttoptr i32 %v3_e814 to i8*
  store i8 %v1_e814, i8* %v4_e814, align 1
  %v3_e818 = load i32, i32* @r5, align 4
  %v4_e818 = add i32 %v3_e818, 10
  %v5_e818 = inttoptr i32 %v4_e818 to i8*
  store i8 %v3_e80c, i8* %v5_e818, align 1
  %v0_e81c = load i32, i32* %r8.global-to-local, align 4
  %v1_e81c = trunc i32 %v0_e81c to i8
  %v2_e81c = load i32, i32* @r6, align 4
  %v3_e81c = add i32 %v2_e81c, 6
  %v4_e81c = inttoptr i32 %v3_e81c to i8*
  store i8 %v1_e81c, i8* %v4_e81c, align 1
  %v0_e820 = load i32, i32* %r8.global-to-local, align 4
  %v1_e820 = trunc i32 %v0_e820 to i8
  %v2_e820 = load i32, i32* @r6, align 4
  %v3_e820 = add i32 %v2_e820, 7
  %v4_e820 = inttoptr i32 %v3_e820 to i8*
  store i8 %v1_e820, i8* %v4_e820, align 1
  %v0_e824 = load i32, i32* @r5, align 4
  %v1_e824 = add i32 %v0_e824, 24
  %v2_e824 = inttoptr i32 %v1_e824 to i8*
  %v3_e824 = load i8, i8* %v2_e824, align 1
  %v4_e824 = zext i8 %v3_e824 to i32
  store i32 %v4_e824, i32* %r3.global-to-local, align 4
  %v1_e828 = add i32 %v0_e824, 25
  %v2_e828 = inttoptr i32 %v1_e828 to i8*
  %v3_e828 = load i8, i8* %v2_e828, align 1
  %v4_e828 = zext i8 %v3_e828 to i32
  %v4_e82c = mul nuw nsw i32 %v4_e828, 256
  %v5_e82c = or i32 %v4_e82c, %v4_e824
  store i32 %v5_e82c, i32* %r2.global-to-local, align 4
  %v3_e830 = load i32, i32* %stack_var_-44, align 4
  %v0_e834 = load i32, i32* @r6, align 4
  store i32 %v0_e834, i32* @r1, align 4
  %v1_e838 = add i32 %v3_e830, 12
  store i32 %v1_e838, i32* %r3.global-to-local, align 4
  %v4_e840 = call i32 @function_f1e4(i32 %v0_e824, i32 %v0_e834, i32 %v5_e82c, i32 %v1_e838)
  %v5_e840 = trunc i32 %v4_e840 to i8
  %v4_e84415 = udiv i32 %v4_e840, 256
  %v1_e848 = trunc i32 %v4_e84415 to i8
  %v2_e848 = load i32, i32* @r6, align 4
  %v3_e848 = add i32 %v2_e848, 7
  %v4_e848 = inttoptr i32 %v3_e848 to i8*
  store i8 %v1_e848, i8* %v4_e848, align 1
  %v3_e84c = load i32, i32* @r6, align 4
  %v4_e84c = add i32 %v3_e84c, 6
  %v5_e84c = inttoptr i32 %v4_e84c to i8*
  store i8 %v5_e840, i8* %v5_e84c, align 1
  %v3_e850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e850, i32* %r3.global-to-local, align 4
  %v0_e854 = load i32, i32* @r5, align 4
  %v1_e854 = add i32 %v0_e854, 20
  %v2_e854 = inttoptr i32 %v1_e854 to i32*
  %v3_e854 = load i32, i32* %v2_e854, align 4
  %v5_e85c = mul i32 %v3_e850, 24
  %v1_e860 = load i32, i32* @sl, align 4
  %v2_e860 = add i32 %v1_e860, %v5_e85c
  store i32 %v2_e860, i32* %ip.global-to-local, align 4
  %v3_e864 = udiv i32 %v3_e854, 65536
  store i32 %v3_e864, i32* %r2.global-to-local, align 4
  %v1_e868 = trunc i32 %v3_e864 to i8
  %v3_e868 = add i32 %v2_e860, 2
  %v4_e868 = inttoptr i32 %v3_e868 to i8*
  store i8 %v1_e868, i8* %v4_e868, align 1
  %v0_e86c = load i32, i32* %r2.global-to-local, align 4
  %v3_e86c16 = udiv i32 %v0_e86c, 256
  %v3_e870 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e870, i32* %r2.global-to-local, align 4
  %v1_e874 = trunc i32 %v3_e86c16 to i8
  %v2_e874 = load i32, i32* %ip.global-to-local, align 4
  %v3_e874 = add i32 %v2_e874, 3
  %v4_e874 = inttoptr i32 %v3_e874 to i8*
  store i8 %v1_e874, i8* %v4_e874, align 1
  store i32 16, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e880 = load i32, i32* @r5, align 4
  %v0_e884 = load i32, i32* %r2.global-to-local, align 4
  %v1_e884 = add i32 %v0_e884, 32
  store i32 %v1_e884, i32* %r2.global-to-local, align 4
  %v0_e888 = load i32, i32* %sb.global-to-local, align 4
  %v0_e890 = load i32, i32* %ip.global-to-local, align 4
  %v4_e890 = inttoptr i32 %v0_e890 to %sockaddr*
  %v7_e894 = inttoptr i32 %v0_e880 to i32*
  %v9_e894 = call i32 @sendto(i32 %v0_e888, i32* %v7_e894, i32 %v1_e884, i32 16384, %sockaddr* %v4_e890, i32 16)
  %v3_e898 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e898, i32* %r3.global-to-local, align 4
  %v1_e8a0 = add i32 %v3_e898, 1
  %v9_e8a4 = icmp eq i32 %v1_e8a0, %v1_e4bc
  store i1 %v9_e8a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e8a0, i32* %stack_var_-40, align 4
  %v6_e8ac = icmp slt i32 %v1_e8a0, %v1_e4bc
  br i1 %v6_e8ac, label %dec_label_pc_e8b0, label %dec_label_pc_e98c

dec_label_pc_e8b0:                                ; preds = %dec_label_pc_e7fc, %dec_label_pc_e7cc
  %v1_e8c0 = phi i32 [ %v1_e8a0, %dec_label_pc_e7fc ], [ 0, %dec_label_pc_e7cc ]
  %v5_e8b4 = mul i32 %v1_e8c0, 24
  %v1_e8b8 = load i32, i32* @sl, align 4
  %v2_e8b8 = add i32 %v1_e8b8, %v5_e8b4
  store i32 %v2_e8b8, i32* %r3.global-to-local, align 4
  %v1_e8bc = add i32 %v2_e8b8, 20
  %v2_e8bc = inttoptr i32 %v1_e8bc to i8*
  %v3_e8bc = load i8, i8* %v2_e8bc, align 1
  %v4_e8bc = zext i8 %v3_e8bc to i32
  store i32 %v4_e8bc, i32* %r2.global-to-local, align 4
  %v0_e8c0 = load i32, i32* %fp.global-to-local, align 4
  %v4_e8c0 = mul i32 %v1_e8c0, 4
  %v5_e8c0 = add i32 %v0_e8c0, %v4_e8c0
  %v6_e8c0 = inttoptr i32 %v5_e8c0 to i32*
  %v7_e8c0 = load i32, i32* %v6_e8c0, align 4
  store i32 %v7_e8c0, i32* @r5, align 4
  %v2_e8c8 = icmp ugt i8 %v3_e8bc, 30
  %v7_e8c8 = icmp eq i8 %v3_e8bc, 31
  store i1 %v7_e8c8, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_e8d0 = add i32 %v7_e8c0, 20
  store i32 %v1_e8d0, i32* @r6, align 4
  %v2_e8d4 = xor i1 %v7_e8c8, true
  %v3_e8d4 = and i1 %v2_e8c8, %v2_e8d4
  br i1 %v3_e8d4, label %dec_label_pc_e7d8, label %dec_label_pc_e8d8

dec_label_pc_e8d8:                                ; preds = %dec_label_pc_e8b0
  %v1_e8d8 = add i32 %v2_e8b8, 16
  %v2_e8d8 = inttoptr i32 %v1_e8d8 to i32*
  %v3_e8d8 = load i32, i32* %v2_e8d8, align 4
  store i32 %v3_e8d8, i32* @r4, align 4
  %v0_e8dc = call i32 @function_105b4()
  %v3_e8e0 = load i32, i32* %stack_var_-40, align 4
  %v5_e8e8 = mul i32 %v3_e8e0, 24
  %v0_e8ec = load i32, i32* @r4, align 4
  %v1_e8f0 = and i32 %v0_e8ec, 65280
  store i32 %v1_e8f0, i32* %r3.global-to-local, align 4
  %v1_e8ec = udiv i32 %v0_e8ec, 256
  %v3_e8f4 = and i32 %v1_e8ec, 65280
  store i32 %v3_e8f4, i32* %r2.global-to-local, align 4
  %v1_e8f8 = load i32, i32* @sl, align 4
  %v2_e8f8 = add i32 %v1_e8f8, %v5_e8e8
  store i32 %v2_e8f8, i32* %ip.global-to-local, align 4
  %v1_e904 = add i32 %v2_e8f8, 20
  %v2_e904 = inttoptr i32 %v1_e904 to i8*
  %v3_e904 = load i8, i8* %v2_e904, align 1
  %v4_e904 = zext i8 %v3_e904 to i32
  store i32 %v4_e904, i32* %lr.global-to-local, align 4
  %v2_e90c = call i32 @llvm.bswap.i32(i32 %v0_e8ec)
  %v7_e910 = lshr i32 %v0_e8dc, %v4_e904
  %v8_e910 = add i32 %v7_e910, %v2_e90c
  store i32 %v8_e910, i32* %r2.global-to-local, align 4
  %v2_e92c = call i32 @llvm.bswap.i32(i32 %v8_e910)
  store i32 %v2_e92c, i32* %r3.global-to-local, align 4
  %v1_e934 = load i32, i32* %r7.global-to-local, align 4
  %v9_e934 = icmp eq i32 %v3_e628, %v1_e934
  store i1 %v9_e934, i1* %cpsr_z.global-to-local, align 1
  %v1_e938 = load i32, i32* @r5, align 4
  %v2_e938 = add i32 %v1_e938, 16
  %v3_e938 = inttoptr i32 %v2_e938 to i32*
  store i32 %v2_e92c, i32* %v3_e938, align 4
  br i1 %v9_e934, label %dec_label_pc_e940, label %dec_label_pc_e8d8.dec_label_pc_e7e4_crit_edge

dec_label_pc_e8d8.dec_label_pc_e7e4_crit_edge:    ; preds = %dec_label_pc_e8d8
  %v1_e7e8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e7e4

dec_label_pc_e940:                                ; preds = %dec_label_pc_e8d8, %dec_label_pc_e7d8
  %v0_e940 = call i32 @function_105b4()
  %v1_e940 = trunc i32 %v0_e940 to i8
  store i32 %v3_e62c, i32* %r2.global-to-local, align 4
  %v4_e948 = sdiv i32 %v0_e940, 256
  store i32 %v4_e948, i32* %r3.global-to-local, align 4
  %v1_e94c = load i32, i32* %r7.global-to-local, align 4
  %v9_e94c = icmp eq i32 %v3_e62c, %v1_e94c
  store i1 %v9_e94c, i1* %cpsr_z.global-to-local, align 1
  %v1_e950 = trunc i32 %v4_e948 to i8
  %v2_e950 = load i32, i32* @r5, align 4
  %v3_e950 = add i32 %v2_e950, 5
  %v4_e950 = inttoptr i32 %v3_e950 to i8*
  store i8 %v1_e950, i8* %v4_e950, align 1
  %v3_e954 = load i32, i32* @r5, align 4
  %v4_e954 = add i32 %v3_e954, 4
  %v5_e954 = inttoptr i32 %v4_e954 to i8*
  store i8 %v1_e940, i8* %v5_e954, align 1
  %v0_e958 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e958, label %dec_label_pc_e95c, label %dec_label_pc_e940.dec_label_pc_e7f0_crit_edge

dec_label_pc_e940.dec_label_pc_e7f0_crit_edge:    ; preds = %dec_label_pc_e940
  %v1_e7f4.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e7f0

dec_label_pc_e95c:                                ; preds = %dec_label_pc_e940, %dec_label_pc_e7e4
  %v0_e95c = call i32 @function_105b4()
  %v1_e95c = trunc i32 %v0_e95c to i8
  %v4_e960 = sdiv i32 %v0_e95c, 256
  store i32 %v4_e960, i32* %r3.global-to-local, align 4
  %v3_e964 = load i32, i32* @r5, align 4
  %v4_e964 = add i32 %v3_e964, 20
  %v5_e964 = inttoptr i32 %v4_e964 to i8*
  store i8 %v1_e95c, i8* %v5_e964, align 1
  %v0_e968 = load i32, i32* %r3.global-to-local, align 4
  %v1_e968 = trunc i32 %v0_e968 to i8
  %v2_e968 = load i32, i32* @r6, align 4
  %v3_e968 = add i32 %v2_e968, 1
  %v4_e968 = inttoptr i32 %v3_e968 to i8*
  store i8 %v1_e968, i8* %v4_e968, align 1
  store i32 %v3_e630, i32* %r3.global-to-local, align 4
  %v1_e970 = load i32, i32* %r7.global-to-local, align 4
  %v9_e970 = icmp eq i32 %v3_e630, %v1_e970
  store i1 %v9_e970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e970, label %dec_label_pc_e978, label %dec_label_pc_e7fc

dec_label_pc_e978:                                ; preds = %dec_label_pc_e95c, %dec_label_pc_e7f0
  %v0_e978 = call i32 @function_105b4()
  %v1_e978 = trunc i32 %v0_e978 to i8
  %v4_e97c = sdiv i32 %v0_e978, 256
  store i32 %v4_e97c, i32* %r3.global-to-local, align 4
  %v1_e980 = trunc i32 %v4_e97c to i8
  %v2_e980 = load i32, i32* @r6, align 4
  %v3_e980 = add i32 %v2_e980, 3
  %v4_e980 = inttoptr i32 %v3_e980 to i8*
  store i8 %v1_e980, i8* %v4_e980, align 1
  %v3_e984 = load i32, i32* @r6, align 4
  %v4_e984 = add i32 %v3_e984, 2
  %v5_e984 = inttoptr i32 %v4_e984 to i8*
  store i8 %v1_e978, i8* %v5_e984, align 1
  br label %dec_label_pc_e7fc

dec_label_pc_e98c.critedge:                       ; preds = %dec_label_pc_e614
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_e98c

dec_label_pc_e98c:                                ; preds = %dec_label_pc_e7fc, %dec_label_pc_e98c.critedge, %dec_label_pc_e7b8
  %v2_e990 = call i32 @time(i32* null)
  %v9_e998 = icmp eq i32 %v2_e5b0, %v2_e990
  store i1 %v9_e998, i1* %cpsr_z.global-to-local, align 1
  %v6_e99c = icmp slt i32 %v2_e5b0, %v2_e990
  br i1 %v6_e99c, label %dec_label_pc_e9a0, label %dec_label_pc_e7b8

dec_label_pc_e9a0:                                ; preds = %dec_label_pc_e98c, %dec_label_pc_e4b8, %dec_label_pc_e9a8
  %v29_e9a4 = phi i32 [ %v3_e5dc, %dec_label_pc_e4b8 ], [ %v1_e9ac, %dec_label_pc_e9a8 ], [ %v2_e990, %dec_label_pc_e98c ]
  store i32 %v3_e4b8, i32* %r4.global-to-local, align 4
  store i32 %v6_e4b8, i32* %r5.global-to-local, align 4
  store i32 %v9_e4b8, i32* %r6.global-to-local, align 4
  store i32 %v12_e4b8, i32* %r7.global-to-local, align 4
  store i32 %v15_e4b8, i32* %r8.global-to-local, align 4
  ret i32 %v29_e9a4

dec_label_pc_e9a8:                                ; preds = %dec_label_pc_e5ec
  %v0_e9a8 = load i32, i32* %sb.global-to-local, align 4
  %v1_e9ac = call i32 @close(i32 %v0_e9a8)
  br label %dec_label_pc_e9a0

; uselistorder directives
  uselistorder i32 %v4_e97c, { 1, 0 }
  uselistorder i32 %v4_e948, { 1, 0 }
  uselistorder i32 %v2_e92c, { 1, 0 }
  uselistorder i32 %v0_e8ec, { 1, 0, 2 }
  uselistorder i32 %v1_e8a0, { 1, 2, 0, 3 }
  uselistorder i32 %v3_e864, { 1, 0 }
  uselistorder i32 %v4_e810, { 1, 0 }
  uselistorder i1 %v3_e7dc, { 1, 0 }
  uselistorder i32 %v1_e7a4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e74c, { 1, 0 }
  uselistorder i32 %v1_e6d8, { 1, 0 }
  uselistorder i32 %v1_e664, { 1, 0 }
  uselistorder i32 %v3_e660, { 1, 0 }
  uselistorder i32 %v1_e654, { 1, 0 }
  uselistorder i32 %v3_e628, { 0, 2, 1 }
  uselistorder i32 %v0_e624, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e620, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_e60c, { 1, 0 }
  uselistorder i1 %v7_e5e0, { 1, 0 }
  uselistorder i32 %v3_e5dc, { 1, 2, 0 }
  uselistorder i32 %v2_e5b0, { 1, 0 }
  uselistorder i32 %v1_e568, { 1, 2, 0 }
  uselistorder i32 %v5_e500, { 1, 0 }
  uselistorder i32 %v1_e4bc, { 1, 2, 3, 4, 5, 7, 0, 6 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %stack_var_-40, { 0, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 2, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 5, 3, 1, 4, 6, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 11, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 5, 10, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 -8, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_e9a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e98c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e7fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e7b8, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e9b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_e9b8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_e9b8 = load i32, i32* @r4, align 4
  %v6_e9b8 = load i32, i32* @r5, align 4
  %v9_e9b8 = load i32, i32* @r6, align 4
  %v15_e9b8 = load i32, i32* @r8, align 4
  %v21_e9b8 = load i32, i32* @sl, align 4
  %v24_e9b8 = load i32, i32* @fp, align 4
  %v1_e9c4 = urem i32 %arg2, 256
  store i32 0, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %v1_e9c4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e9dc = urem i32 %arg4, 256
  store i32 %v1_e9dc, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_e9ec = call i32* @calloc(i32 %v1_e9c4, i32 4)
  %v4_e9ec = ptrtoint i32* %v2_e9ec to i32
  %v0_e9f0 = load i32, i32* @r5, align 4
  store i32 %v0_e9f0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_e9fc = load i32, i32* @r4, align 4
  store i32 %v0_e9fc, i32* %r0.global-to-local, align 4
  %v0_ea00 = load i32, i32* @r6, align 4
  store i32 %v0_ea00, i32* %r3.global-to-local, align 4
  %v5_ea04 = inttoptr i32 %v0_e9f0 to i32*
  %v6_ea04 = call i32 @function_8f6c(i32 %v0_e9fc, i32* %v5_ea04, i32 2, i32 %v0_ea00)
  %v1_ea10 = urem i32 %v6_ea04, 256
  store i32 %v1_ea10, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ea1c = load i32, i32* @r4, align 4
  store i32 %v0_ea1c, i32* %r0.global-to-local, align 4
  %v0_ea20 = load i32, i32* @r5, align 4
  store i32 %v0_ea20, i32* %r1.global-to-local, align 4
  %v5_ea24 = trunc i32 %v6_ea04 to i8
  %v6_ea28 = inttoptr i32 %v0_ea20 to i32*
  %v7_ea28 = call i32 @function_8f6c(i32 %v0_ea1c, i32* %v6_ea28, i32 3, i32 65535)
  %v0_ea2c = load i32, i32* @r5, align 4
  store i32 %v0_ea2c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_ea38 = load i32, i32* @r4, align 4
  store i32 %v0_ea38, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_ea40 = inttoptr i32 %v0_ea2c to i32*
  %v6_ea40 = call i32 @function_8f6c(i32 %v0_ea38, i32* %v5_ea40, i32 4, i32 64)
  %v1_ea48 = urem i32 %v6_ea40, 256
  store i32 %v1_ea48, i32* %ip.global-to-local, align 4
  %v0_ea4c = load i32, i32* @r5, align 4
  store i32 %v0_ea4c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_ea54 = load i32, i32* @r6, align 4
  store i32 %v0_ea54, i32* %r3.global-to-local, align 4
  %v0_ea58 = load i32, i32* @r4, align 4
  store i32 %v0_ea58, i32* %r0.global-to-local, align 4
  %v6_ea60 = inttoptr i32 %v0_ea4c to i32*
  %v7_ea60 = call i32 @function_8f6c(i32 %v0_ea58, i32* %v6_ea60, i32 5, i32 %v0_ea54)
  %v1_ea6c = urem i32 %v7_ea60, 256
  store i32 %v1_ea6c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ea78 = load i32, i32* @r4, align 4
  store i32 %v0_ea78, i32* %r0.global-to-local, align 4
  %v0_ea7c = load i32, i32* @r5, align 4
  store i32 %v0_ea7c, i32* %r1.global-to-local, align 4
  %v5_ea84 = inttoptr i32 %v0_ea7c to i32*
  %v6_ea84 = call i32 @function_8f6c(i32 %v0_ea78, i32* %v5_ea84, i32 6, i32 65535)
  %v0_ea88 = load i32, i32* @r5, align 4
  store i32 %v0_ea88, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ea94 = load i32, i32* @r4, align 4
  store i32 %v0_ea94, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_ea9c = inttoptr i32 %v0_ea88 to i32*
  %v6_ea9c = call i32 @function_8f6c(i32 %v0_ea94, i32* %v5_ea9c, i32 7, i32 53)
  %v0_eaa8 = load i32, i32* @r5, align 4
  store i32 %v0_eaa8, i32* %r1.global-to-local, align 4
  %v0_eaac = load i32, i32* @r4, align 4
  store i32 %v0_eaac, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_eab8 = inttoptr i32 %v0_eaa8 to i32*
  %v6_eab8 = call i32 @function_8f6c(i32 %v0_eaac, i32* %v5_eab8, i32 9, i32 65535)
  %v0_eabc = load i32, i32* @r5, align 4
  store i32 %v0_eabc, i32* %r1.global-to-local, align 4
  %v0_eac4 = load i32, i32* @r6, align 4
  store i32 %v0_eac4, i32* %r2.global-to-local, align 4
  %v0_eac8 = load i32, i32* @r4, align 4
  store i32 %v0_eac8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_ead0 = inttoptr i32 %v0_eabc to i32*
  %v6_ead0 = call i32 @function_8f6c(i32 %v0_eac8, i32* %v5_ead0, i32 %v0_eac4, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_ead8 = load i32, i32* @r6, align 4
  store i32 %v0_ead8, i32* %r3.global-to-local, align 4
  %v0_eadc = load i32, i32* @r5, align 4
  store i32 %v0_eadc, i32* %r1.global-to-local, align 4
  %v0_eae4 = load i32, i32* @r4, align 4
  store i32 %v0_eae4, i32* %r0.global-to-local, align 4
  %v5_eae8 = inttoptr i32 %v0_eadc to i32*
  %v6_eae8 = call i32 @function_8e9c(i32 %v0_eae4, i32* %v5_eae8, i32 8, i32 %v0_ead8, i32 %v6_ead0)
  store i32 %v6_eae8, i32* @r7, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_eaf4 = call i32 @function_12288(i32 37)
  %v0_eaf8 = load i32, i32* @r6, align 4
  store i32 %v0_eaf8, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v2_eb00 = inttoptr i32 %v0_eaf8 to i32*
  %v3_eb00 = call i32 @function_121a4(i32 37, i32* %v2_eb00)
  %v4_eb00 = inttoptr i32 %v3_eb00 to i8*
  store i32 %v3_eb00, i32* %r0.global-to-local, align 4
  %v0_eb04 = load i32, i32* @r6, align 4
  store i32 %v0_eb04, i32* %r1.global-to-local, align 4
  %v4_eb08 = call i32 (i8*, i32, ...) @open(i8* %v4_eb00, i32 %v0_eb04)
  store i32 %v4_eb08, i32* @r4, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_eb14 = call i32 @function_121d0(i32 37)
  store i32 %v1_eb14, i32* %r0.global-to-local, align 4
  %v0_eb18 = load i32, i32* @r4, align 4
  %v1_eb18 = load i32, i32* @r6, align 4
  %v9_eb18 = icmp eq i32 %v0_eb18, %v1_eb18
  store i1 %v9_eb18, i1* %cpsr_z.global-to-local, align 1
  %v5_eb1c = icmp slt i32 %v0_eb18, %v1_eb18
  br i1 %v5_eb1c, label %dec_label_pc_ebf0, label %dec_label_pc_eb20

dec_label_pc_eb20:                                ; preds = %dec_label_pc_e9b8
  %v2_eb24 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_eb24, i32* %sl.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_eb24, i32* %r1.global-to-local, align 4
  store i32 %v0_eb18, i32* %r0.global-to-local, align 4
  %v4_eb34 = call i32 @read(i32 %v0_eb18, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_eb34, i32* @r5, align 4
  %v0_eb3c = load i32, i32* @r4, align 4
  store i32 %v0_eb3c, i32* %r0.global-to-local, align 4
  %v1_eb40 = call i32 @close(i32 %v0_eb3c)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_eb48 = call i32 @function_12288(i32 38)
  %v0_eb4c = load i32, i32* @r6, align 4
  store i32 %v0_eb4c, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v2_eb54 = inttoptr i32 %v0_eb4c to i32*
  %v3_eb54 = call i32 @function_121a4(i32 38, i32* %v2_eb54)
  %v0_eb58 = load i32, i32* @r5, align 4
  store i32 %v0_eb58, i32* @r1, align 4
  store i32 %v3_eb54, i32* %r2.global-to-local, align 4
  store i32 %v2_eb24, i32* %r0.global-to-local, align 4
  %v3_eb64 = bitcast i32* %stack_var_-2120 to i8*
  %v4_eb64 = call i32 @function_13090(i8* %v3_eb64, i32 %v0_eb58, i32 %v3_eb54)
  store i32 %v4_eb64, i32* %r8.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_eb70 = call i32 @function_121d0(i32 38)
  store i32 %v1_eb70, i32* %r0.global-to-local, align 4
  %v7_eb74 = icmp eq i32 %v4_eb64, -1
  store i1 %v7_eb74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb74, label %dec_label_pc_ebf0, label %dec_label_pc_eb7c

dec_label_pc_eb7c:                                ; preds = %dec_label_pc_eb20
  %v0_eb7c = load i32, i32* @r5, align 4
  %v9_eb7c = icmp eq i32 %v0_eb7c, %v4_eb64
  store i1 %v9_eb7c, i1* %cpsr_z.global-to-local, align 1
  %v7_eb80 = icmp sgt i32 %v0_eb7c, %v4_eb64
  br i1 %v7_eb80, label %dec_label_pc_eb84, label %dec_label_pc_ebf0

dec_label_pc_eb84:                                ; preds = %dec_label_pc_eb7c
  %v2_eb7c = sub i32 %v0_eb7c, %v4_eb64
  store i32 %v2_eb7c, i32* %r3.global-to-local, align 4
  %v2_eb8c = ptrtoint i32* %stack_var_-72 to i32
  %v0_eb90 = load i32, i32* @r6, align 4
  store i32 %v0_eb90, i32* %r1.global-to-local, align 4
  store i32 %v4_eb64, i32* %r2.global-to-local, align 4
  store i32 %v0_eb7c, i32* %r6.global-to-local, align 4
  %v0_eb9c = load i32, i32* %sl.global-to-local, align 4
  %v2_eb9c = add i32 %v0_eb9c, %v4_eb64
  store i32 %v2_eb9c, i32* %r0.global-to-local, align 4
  store i32 %v2_eb8c, i32* %r4.global-to-local, align 4
  %v1_ebac = add i32 %v0_eb7c, -1
  br label %dec_label_pc_eba4

dec_label_pc_eba4:                                ; preds = %dec_label_pc_ebe0, %dec_label_pc_eb84
  %v0_ebe8 = phi i32 [ %v1_ebe8, %dec_label_pc_ebe0 ], [ %v2_eb8c, %dec_label_pc_eb84 ]
  %v0_ebe0 = phi i32 [ %v1_ebe0, %dec_label_pc_ebe0 ], [ %v4_eb64, %dec_label_pc_eb84 ]
  %v0_ebc8 = phi i32 [ %v0_ebc847, %dec_label_pc_ebe0 ], [ %v0_eb90, %dec_label_pc_eb84 ]
  %v0_eba8 = phi i32 [ %v0_eba843, %dec_label_pc_ebe0 ], [ %v0_eb90, %dec_label_pc_eb84 ]
  %v0_ebb0 = phi i32 [ %v1_ebb0, %dec_label_pc_ebe0 ], [ %v2_eb9c, %dec_label_pc_eb84 ]
  %v1_eba4 = inttoptr i32 %v0_ebb0 to i8*
  %v2_eba4 = load i8, i8* %v1_eba4, align 1
  %v3_eba4 = zext i8 %v2_eba4 to i32
  store i32 %v3_eba4, i32* %r3.global-to-local, align 4
  %v2_eba8 = icmp eq i32 %v0_eba8, 0
  store i1 %v2_eba8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ebac, i32* %lr.global-to-local, align 4
  %v1_ebb0 = add i32 %v0_ebb0, 1
  store i32 %v1_ebb0, i32* %r0.global-to-local, align 4
  %v1_ebb4 = add nsw i32 %v3_eba4, -48
  store i32 %v1_ebb4, i32* %ip.global-to-local, align 4
  br i1 %v2_eba8, label %dec_label_pc_ebbc, label %dec_label_pc_ebcc

dec_label_pc_ebbc:                                ; preds = %dec_label_pc_eba4
  %v7_ebbc = icmp eq i8 %v2_eba4, 9
  store i1 %v7_ebbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebbc, label %dec_label_pc_ebe0, label %bb

bb:                                               ; preds = %dec_label_pc_ebbc
  %v8_ebc0 = icmp eq i8 %v2_eba4, 32
  store i1 %v8_ebc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ebc0, label %dec_label_pc_ebe0, label %dec_label_pc_ebc8

dec_label_pc_ebc8:                                ; preds = %bb
  %v1_ebc8 = add i32 %v0_ebc8, 1
  store i32 %v1_ebc8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ebcc

dec_label_pc_ebcc:                                ; preds = %dec_label_pc_eba4, %dec_label_pc_ebc8
  %v0_ebc848 = phi i32 [ %v0_ebc8, %dec_label_pc_eba4 ], [ %v1_ebc8, %dec_label_pc_ebc8 ]
  %v0_eba844 = phi i32 [ %v0_eba8, %dec_label_pc_eba4 ], [ %v1_ebc8, %dec_label_pc_ebc8 ]
  %v7_ebcc = icmp eq i8 %v2_eba4, 46
  store i1 %v7_ebcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebcc, label %dec_label_pc_ebd8, label %bb130

bb130:                                            ; preds = %dec_label_pc_ebcc
  %v3_ebd0 = icmp ugt i32 %v1_ebb4, 8
  %v8_ebd0 = icmp eq i32 %v1_ebb4, 9
  store i1 %v8_ebd0, i1* %cpsr_z.global-to-local, align 1
  %v2_ebd4 = xor i1 %v8_ebd0, true
  %v3_ebd4 = and i1 %v3_ebd0, %v2_ebd4
  br i1 %v3_ebd4, label %dec_label_pc_f120, label %dec_label_pc_ebd8

dec_label_pc_ebd8:                                ; preds = %dec_label_pc_ebcc, %bb130
  %v9_ebd8 = icmp eq i32 %v0_ebe0, %v1_ebac
  store i1 %v9_ebd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebd8, label %dec_label_pc_f120, label %dec_label_pc_ebe0

dec_label_pc_ebe0:                                ; preds = %dec_label_pc_ebbc, %dec_label_pc_ebd8, %bb
  %v0_ebc847 = phi i32 [ %v0_ebc8, %dec_label_pc_ebbc ], [ %v0_ebc848, %dec_label_pc_ebd8 ], [ %v0_ebc8, %bb ]
  %v0_eba843 = phi i32 [ 0, %dec_label_pc_ebbc ], [ %v0_eba844, %dec_label_pc_ebd8 ], [ 0, %bb ]
  %v1_ebe0 = add i32 %v0_ebe0, 1
  store i32 %v1_ebe0, i32* %r2.global-to-local, align 4
  %v9_ebe4 = icmp eq i32 %v0_eb7c, %v1_ebe0
  store i1 %v9_ebe4, i1* %cpsr_z.global-to-local, align 1
  %v1_ebe8 = add i32 %v0_ebe8, 1
  store i32 %v1_ebe8, i32* %r4.global-to-local, align 4
  br i1 %v9_ebe4, label %dec_label_pc_ebf0, label %dec_label_pc_eba4

dec_label_pc_ebf0:                                ; preds = %dec_label_pc_ebe0, %dec_label_pc_eb7c, %dec_label_pc_eb20, %dec_label_pc_e9b8
  %v0_ebf0 = call i32 @function_105b4()
  %v1_ebf4 = urem i32 %v0_ebf0, 4
  store i32 %v1_ebf4, i32* %r0.global-to-local, align 4
  %v2_ebf8 = icmp eq i32 %v1_ebf4, 3
  store i1 %v2_ebf8, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_ebf0 to i2
  switch i2 %trunc, label %dec_label_pc_ec1c26 [
    i2 0, label %dec_label_pc_f158
    i2 1, label %dec_label_pc_ec14
    i2 -2, label %dec_label_pc_f148
    i2 -1, label %dec_label_pc_f16c
  ]

dec_label_pc_ec14:                                ; preds = %dec_label_pc_ebf0
  store i32 74, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ec1c

dec_label_pc_ec1c26:                              ; preds = %dec_label_pc_ebf0
  unreachable

dec_label_pc_ec1c:                                ; preds = %dec_label_pc_f16c, %dec_label_pc_f158, %dec_label_pc_f148, %dec_label_pc_f120, %dec_label_pc_ec14
  %stack_var_-2188.0 = phi i32 [ 4, %dec_label_pc_f16c ], [ 64, %dec_label_pc_f148 ], [ 74, %dec_label_pc_ec14 ], [ 8, %dec_label_pc_f158 ], [ %phitmp, %dec_label_pc_f120 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ec20 = call i32 @time(i32* null)
  %v0_ec24 = load i32, i32* @r7, align 4
  %v2_ec24 = icmp eq i32 %v0_ec24, 0
  store i1 %v2_ec24, i1* %cpsr_z.global-to-local, align 1
  %v1_ec28 = load i32, i32* %fp.global-to-local, align 4
  %v2_ec28 = add i32 %v1_ec28, %v2_ec20
  store i32 %v2_ec28, i32* %r0.global-to-local, align 4
  br i1 %v2_ec24, label %dec_label_pc_f0fc, label %dec_label_pc_ec34

dec_label_pc_ec34:                                ; preds = %dec_label_pc_ec1c
  store i32 %v0_ec24, i32* %r0.global-to-local, align 4
  %v1_ec38 = inttoptr i32 %v0_ec24 to i8*
  %v2_ec38 = call i32 @function_12d3c(i8* %v1_ec38)
  %v3_ec38 = inttoptr i32 %v2_ec38 to i8*
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_ec4c = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_ec4c, i32* %r0.global-to-local, align 4
  %v7_ec50 = icmp eq i32 %v3_ec4c, -1
  store i1 %v7_ec50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec50, label %dec_label_pc_f0fc, label %dec_label_pc_ec5c

dec_label_pc_ec5c:                                ; preds = %dec_label_pc_ec34
  store i32 1, i32* %lr.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ec68 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ec68, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_ec7c = call i32 @setsockopt(i32 %v3_ec4c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_ec7c, i32* %r0.global-to-local, align 4
  %v7_ec80 = icmp eq i32 %v7_ec7c, -1
  store i1 %v7_ec80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec80, label %dec_label_pc_f0f4, label %dec_label_pc_ec88

dec_label_pc_ec88:                                ; preds = %dec_label_pc_ec5c
  %v3_ec90 = mul i32 %v7_ea28, 65536
  store i32 %v3_ec90, i32* %r8.global-to-local, align 4
  %v3_ec9c = mul i32 %v6_ea84, 65536
  store i32 %v3_ec9c, i32* %r0.global-to-local, align 4
  %v3_eca0 = mul i32 %v6_ea9c, 65536
  store i32 %v3_eca0, i32* %sl.global-to-local, align 4
  %v3_eca4 = mul i32 %v6_eab8, 65536
  store i32 %v3_eca4, i32* %fp.global-to-local, align 4
  %v2_eca8 = icmp eq i32 %v1_e9c4, 0
  store i1 %v2_eca8, i1* %cpsr_z.global-to-local, align 1
  %v1_ecac = urem i32 %v6_ead0, 256
  store i32 %v1_ecac, i32* @sb, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ecb4 = urem i32 %v7_ea28, 65536
  store i32 %v3_ecb4, i32* %r5.global-to-local, align 4
  %v3_ecb8 = urem i32 %v6_ea84, 65536
  store i32 %v3_ecb8, i32* %ip.global-to-local, align 4
  %v3_ecbc = urem i32 %v6_ea9c, 65536
  store i32 %v3_ecbc, i32* %lr.global-to-local, align 4
  %v3_ecc0 = urem i32 %v6_eab8, 65536
  store i32 %v3_ecc0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_eca8, label %dec_label_pc_f108.critedge, label %dec_label_pc_ecdc

dec_label_pc_ecdc:                                ; preds = %dec_label_pc_ec88
  %v2_ece4 = add i32 %v2_ec38, %v1_ecac
  %v3_ece8 = mul i32 %v2_ece4, 65536
  %v1_ecec = add i32 %v3_ece8, 1769472
  %v1_ecf0 = add i32 %v3_ece8, 3080192
  %v1_ed0c = urem i32 %v6_eab8, 256
  %tmp131 = udiv i32 %v6_ea84, 256
  %v3_ed10 = urem i32 %tmp131, 256
  %v1_ed14 = urem i32 %v6_ea84, 256
  %v1_ed08 = mul i32 %v7_ea28, 256
  %v3_ed1c = and i32 %v1_ed08, 65280
  store i32 %v3_ed1c, i32* %r1.global-to-local, align 4
  %v1_ed24 = urem i32 %v6_ea9c, 256
  %tmp132 = udiv i32 %v7_ea28, 256
  %v3_ed2c = udiv i32 %v1_ecec, 256
  %v1_ed34 = and i32 %v3_ed2c, 65280
  %tmp133 = udiv i32 %v6_ea9c, 256
  %v4_ed44 = udiv i32 %v1_ecec, 16777216
  %v5_ed44 = or i32 %v1_ed34, %v4_ed44
  store i32 %v5_ed44, i32* %r6.global-to-local, align 4
  %v3_ed4c = sdiv i32 %v1_ecf0, 16777216
  %sext40 = mul i32 %tmp132, 16777216
  %v7_ed4c = sdiv i32 %sext40, 16777216
  %v3_ed50 = mul nuw nsw i32 %v1_ed0c, 256
  %v4_ed58 = mul nuw nsw i32 %v1_ed14, 256
  %v5_ed58 = or i32 %v4_ed58, %v3_ed10
  store i32 %v5_ed58, i32* %r0.global-to-local, align 4
  %v3_ed5c = ashr i32 %v1_ecf0, 31
  %tmp134 = udiv i32 %v6_eab8, 256
  %v4_ed60 = urem i32 %tmp134, 256
  %v5_ed60 = or i32 %v4_ed60, %v3_ed50
  store i32 %v5_ed60, i32* %r5.global-to-local, align 4
  %v3_ed64 = ashr i32 %sext40, 31
  store i32 1, i32* %r8.global-to-local, align 4
  %v2_ed6c = add i32 %v2_ec38, 1
  store i32 %v2_ed6c, i32* %fp.global-to-local, align 4
  store i32 %v1_ed24, i32* %r3.global-to-local, align 4
  store i32 %v1_ed14, i32* %r2.global-to-local, align 4
  %v3_ed8070 = udiv i32 %v1_ed34, 256
  store i32 %v3_ed8070, i32* %ip.global-to-local, align 4
  store i32 %v1_ed0c, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v5_ed8c = trunc i32 %tmp131 to i8
  store i32 0, i32* %sl.global-to-local, align 4
  %sext19 = mul i32 %v6_ea40, 16777216
  %v4_ee0c = sdiv i32 %sext19, 16777216
  %sext20 = mul i32 %v1_ecec, 256
  %v4_ee3c = sdiv i32 %sext20, 16777216
  %sext22 = mul i32 %v6_ea9c, 16777216
  %v4_ee58 = sdiv i32 %sext22, 16777216
  %sext23 = mul nuw i32 %v4_ed44, 16777216
  %v4_ee5c = sdiv i32 %sext23, 16777216
  %sext25 = mul i32 %v6_eab8, 16777216
  %v4_ee7c = sdiv i32 %sext25, 16777216
  %v1_ee00 = trunc i32 %v3_ed5c to i8
  %extract.t = trunc i32 %v3_ed64 to i8
  %v1_ee60 = trunc i32 %tmp133 to i8
  %v1_ee88 = trunc i32 %v6_ea84 to i8
  br label %dec_label_pc_edac

dec_label_pc_edac:                                ; preds = %dec_label_pc_ef0c, %dec_label_pc_ecdc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_edb4 = call i32* @calloc(i32 600, i32 1)
  %v4_edb4 = ptrtoint i32* %v2_edb4 to i32
  store i32 %v4_edb4, i32* %r0.global-to-local, align 4
  store i32 %v4_e9ec, i32* %r2.global-to-local, align 4
  %v3_edbc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_edbc, i32* %r3.global-to-local, align 4
  %v2_edc0 = load i32, i32* %r4.global-to-local, align 4
  %v5_edc0 = mul i32 %v2_edc0, 4
  %v6_edc0 = add i32 %v5_edc0, %v4_e9ec
  %v7_edc0 = inttoptr i32 %v6_edc0 to i32*
  store i32 %v4_edb4, i32* %v7_edc0, align 4
  %v0_edc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_edc4 = load i32, i32* %r3.global-to-local, align 4
  %v4_edc4 = mul i32 %v1_edc4, 4
  %v5_edc4 = add i32 %v4_edc4, %v0_edc4
  %v6_edc4 = inttoptr i32 %v5_edc4 to i32*
  %v7_edc4 = load i32, i32* %v6_edc4, align 4
  store i32 %v7_edc4, i32* %r1.global-to-local, align 4
  %v1_edc8 = inttoptr i32 %v7_edc4 to i8*
  %v2_edc8 = load i8, i8* %v1_edc8, align 1
  %tmp = urem i8 %v2_edc8, 16
  %v1_edcc = zext i8 %tmp to i32
  %v1_edd0 = or i32 %v1_edcc, 64
  store i32 %v1_edd0, i32* %r2.global-to-local, align 4
  %v1_edd4 = trunc i32 %v1_edd0 to i8
  store i8 %v1_edd4, i8* %v1_edc8, align 1
  %v0_edd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_edd8 = inttoptr i32 %v0_edd8 to i8*
  %v2_edd8 = load i8, i8* %v1_edd8, align 1
  %v1_eddc = and i8 %v2_edd8, -16
  %v1_ede0 = or i8 %v1_eddc, 5
  store i32 %v1_ea6c, i32* %ip.global-to-local, align 4
  store i8 %v1_ede0, i8* %v1_edd8, align 1
  %v2_edf0 = load i32, i32* %r1.global-to-local, align 4
  %v3_edf0 = add i32 %v2_edf0, 1
  %v4_edf0 = inttoptr i32 %v3_edf0 to i8*
  store i8 %v5_ea24, i8* %v4_edf0, align 1
  store i32 %v3_ed5c, i32* %r3.global-to-local, align 4
  store i32 %v3_ed4c, i32* %r2.global-to-local, align 4
  %v0_edfc = load i32, i32* %ip.global-to-local, align 4
  %v2_edfc = icmp eq i32 %v0_edfc, 0
  store i1 %v2_edfc, i1* %cpsr_z.global-to-local, align 1
  %v2_ee00 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee00 = add i32 %v2_ee00, 3
  %v4_ee00 = inttoptr i32 %v3_ee00 to i8*
  store i8 %v1_ee00, i8* %v4_ee00, align 1
  %v0_ee04 = load i32, i32* %r2.global-to-local, align 4
  %v1_ee04 = trunc i32 %v0_ee04 to i8
  %v2_ee04 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee04 = add i32 %v2_ee04, 2
  %v4_ee04 = inttoptr i32 %v3_ee04 to i8*
  store i8 %v1_ee04, i8* %v4_ee04, align 1
  store i32 %v3_ed64, i32* %lr.global-to-local, align 4
  store i32 %v4_ee0c, i32* %r2.global-to-local, align 4
  %v0_ee10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee10, label %.thread27, label %bb135

bb135:                                            ; preds = %dec_label_pc_edac
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ee14 = load i32, i32* %r1.global-to-local, align 4
  %v4_ee14 = add i32 %v3_ee14, 6
  %v5_ee14 = inttoptr i32 %v4_ee14 to i8*
  store i8 64, i8* %v5_ee14, align 1
  %v0_ee1c.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t71 = trunc i32 %v0_ee1c.pre to i8
  br label %.thread27

.thread27:                                        ; preds = %dec_label_pc_edac, %bb135
  %v0_ee1c.off0 = phi i8 [ %extract.t, %dec_label_pc_edac ], [ %extract.t71, %bb135 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_ee1c = load i32, i32* %r1.global-to-local, align 4
  %v3_ee1c = add i32 %v2_ee1c, 5
  %v4_ee1c = inttoptr i32 %v3_ee1c to i8*
  store i8 %v0_ee1c.off0, i8* %v4_ee1c, align 1
  store i32 %v7_ed4c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c21c.133 to i32), i32* %lr.global-to-local, align 4
  %v0_ee28 = load i32, i32* %r2.global-to-local, align 4
  %v1_ee28 = trunc i32 %v0_ee28 to i8
  %v2_ee28 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee28 = add i32 %v2_ee28, 8
  %v4_ee28 = inttoptr i32 %v3_ee28 to i8*
  store i8 %v1_ee28, i8* %v4_ee28, align 1
  %v0_ee2c = load i32, i32* %r3.global-to-local, align 4
  %v1_ee2c = trunc i32 %v0_ee2c to i8
  %v2_ee2c = load i32, i32* %r1.global-to-local, align 4
  %v3_ee2c = add i32 %v2_ee2c, 9
  %v4_ee2c = inttoptr i32 %v3_ee2c to i8*
  store i8 %v1_ee2c, i8* %v4_ee2c, align 1
  %v0_ee30 = load i32, i32* %r1.global-to-local, align 4
  %v1_ee30 = add i32 %v0_ee30, 41
  %v2_ee34 = load i32, i32* @global_var_1c21c.133, align 4
  store i32 %v2_ee34, i32* %r3.global-to-local, align 4
  %v0_ee38 = load i32, i32* @sb, align 4
  %v2_ee38 = add i32 %v1_ee30, %v0_ee38
  store i32 %v2_ee38, i32* %r4.global-to-local, align 4
  store i32 %v4_ee3c, i32* %r2.global-to-local, align 4
  %v1_ee40 = add i32 %v0_ee30, 20
  store i32 %v1_ee40, i32* %r0.global-to-local, align 4
  %v0_ee44 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee44, label %bb137, label %bb136

bb136:                                            ; preds = %.thread27
  %v1_ee44 = load i32, i32* %sl.global-to-local, align 4
  %v2_ee44 = trunc i32 %v1_ee44 to i8
  %v4_ee44 = add i32 %v0_ee30, 7
  %v5_ee44 = inttoptr i32 %v4_ee44 to i8*
  store i8 %v2_ee44, i8* %v5_ee44, align 1
  %v2_ee48.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %.thread27, %bb136
  %v2_ee48 = phi i32 [ %v0_ee30, %.thread27 ], [ %v2_ee48.pre, %bb136 ]
  %v0_ee48 = load i32, i32* %ip.global-to-local, align 4
  %v1_ee48 = trunc i32 %v0_ee48 to i8
  %v3_ee48 = add i32 %v2_ee48, 4
  %v4_ee48 = inttoptr i32 %v3_ee48 to i8*
  store i8 %v1_ee48, i8* %v4_ee48, align 1
  %v0_ee4c = load i32, i32* %r3.global-to-local, align 4
  %v1_ee4c = load i32, i32* %r1.global-to-local, align 4
  %v2_ee4c = add i32 %v1_ee4c, 12
  %v3_ee4c = inttoptr i32 %v2_ee4c to i32*
  store i32 %v0_ee4c, i32* %v3_ee4c, align 4
  %v0_ee50 = load i32, i32* %r2.global-to-local, align 4
  %v1_ee50 = trunc i32 %v0_ee50 to i8
  %v2_ee50 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee50 = add i32 %v2_ee50, 5
  %v4_ee50 = inttoptr i32 %v3_ee50 to i8*
  store i8 %v1_ee50, i8* %v4_ee50, align 1
  store i32 %v4_ee58, i32* %lr.global-to-local, align 4
  store i32 %v4_ee5c, i32* %r2.global-to-local, align 4
  %v2_ee60 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee60 = add i32 %v2_ee60, 2
  %v4_ee60 = inttoptr i32 %v3_ee60 to i8*
  store i8 %v1_ee60, i8* %v4_ee60, align 1
  %v0_ee64 = load i32, i32* %lr.global-to-local, align 4
  %v1_ee64 = trunc i32 %v0_ee64 to i8
  %v2_ee64 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee64 = add i32 %v2_ee64, 3
  %v4_ee64 = inttoptr i32 %v3_ee64 to i8*
  store i8 %v1_ee64, i8* %v4_ee64, align 1
  %v0_ee68 = load i32, i32* %r2.global-to-local, align 4
  %v1_ee68 = trunc i32 %v0_ee68 to i8
  %v2_ee68 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee68 = add i32 %v2_ee68, 4
  %v4_ee68 = inttoptr i32 %v3_ee68 to i8*
  store i8 %v1_ee68, i8* %v4_ee68, align 1
  store i32 %stack_var_-2188.0, i32* %lr.global-to-local, align 4
  %v2_ee74 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee74 = add i32 %v2_ee74, 20
  %v4_ee74 = inttoptr i32 %v3_ee74 to i8*
  store i8 %v5_ed8c, i8* %v4_ee74, align 1
  store i32 %v4_ee7c, i32* %r3.global-to-local, align 4
  %v0_ee80 = load i32, i32* %r1.global-to-local, align 4
  %v1_ee80 = add i32 %v0_ee80, 28
  store i32 %v1_ee80, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_ee88 = load i32, i32* %r0.global-to-local, align 4
  %v3_ee88 = add i32 %v2_ee88, 1
  %v4_ee88 = inttoptr i32 %v3_ee88 to i8*
  store i8 %v1_ee88, i8* %v4_ee88, align 1
  %v0_ee8c = load i32, i32* %lr.global-to-local, align 4
  %v1_ee8c = load i32, i32* %r1.global-to-local, align 4
  %v2_ee8c = add i32 %v1_ee8c, 16
  %v3_ee8c = inttoptr i32 %v2_ee8c to i32*
  store i32 %v0_ee8c, i32* %v3_ee8c, align 4
  %v0_ee90 = load i32, i32* %r8.global-to-local, align 4
  %v1_ee90 = trunc i32 %v0_ee90 to i8
  %v2_ee90 = load i32, i32* %ip.global-to-local, align 4
  %v3_ee90 = add i32 %v2_ee90, 5
  %v4_ee90 = inttoptr i32 %v3_ee90 to i8*
  store i8 %v1_ee90, i8* %v4_ee90, align 1
  %v0_ee94 = load i32, i32* %r5.global-to-local, align 4
  %v1_ee94 = trunc i32 %v0_ee94 to i8
  %v2_ee94 = load i32, i32* %r1.global-to-local, align 4
  %v3_ee94 = add i32 %v2_ee94, 28
  %v4_ee94 = inttoptr i32 %v3_ee94 to i8*
  store i8 %v1_ee94, i8* %v4_ee94, align 1
  %v0_ee98 = load i32, i32* %r8.global-to-local, align 4
  %v1_ee98 = trunc i32 %v0_ee98 to i8
  %v2_ee98 = load i32, i32* %ip.global-to-local, align 4
  %v3_ee98 = add i32 %v2_ee98, 2
  %v4_ee98 = inttoptr i32 %v3_ee98 to i8*
  store i8 %v1_ee98, i8* %v4_ee98, align 1
  %v0_ee9c = load i32, i32* %r3.global-to-local, align 4
  %v1_ee9c = trunc i32 %v0_ee9c to i8
  %v2_ee9c = load i32, i32* %ip.global-to-local, align 4
  %v3_ee9c = add i32 %v2_ee9c, 1
  %v4_ee9c = inttoptr i32 %v3_ee9c to i8*
  store i8 %v1_ee9c, i8* %v4_ee9c, align 1
  %v0_eea0 = load i32, i32* %r6.global-to-local, align 4
  %v1_eea0 = trunc i32 %v0_eea0 to i8
  %v2_eea0 = load i32, i32* %ip.global-to-local, align 4
  %v3_eea0 = add i32 %v2_eea0, 3
  %v4_eea0 = inttoptr i32 %v3_eea0 to i8*
  store i8 %v1_eea0, i8* %v4_eea0, align 1
  %v0_eea4 = load i32, i32* %r6.global-to-local, align 4
  %v1_eea4 = trunc i32 %v0_eea4 to i8
  %v2_eea4 = load i32, i32* %ip.global-to-local, align 4
  %v3_eea4 = add i32 %v2_eea4, 4
  %v4_eea4 = inttoptr i32 %v3_eea4 to i8*
  store i8 %v1_eea4, i8* %v4_eea4, align 1
  %v0_eea8 = load i32, i32* %r4.global-to-local, align 4
  %v1_eea8 = add i32 %v0_eea8, 1
  store i32 %v1_eea8, i32* %r0.global-to-local, align 4
  %v0_eeac = load i32, i32* @sb, align 4
  %v1_eeac = trunc i32 %v0_eeac to i8
  %v2_eeac = load i32, i32* %r1.global-to-local, align 4
  %v3_eeac = add i32 %v2_eeac, 40
  %v4_eeac = inttoptr i32 %v3_eeac to i8*
  store i8 %v1_eeac, i8* %v4_eeac, align 1
  %v0_eeb0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_eeb0, i32* %r2.global-to-local, align 4
  %v0_eeb4 = load i32, i32* @r7, align 4
  store i32 %v0_eeb4, i32* %r1.global-to-local, align 4
  %v3_eeb8 = call i32 @function_12db8(i32 %v1_eea8, i32 %v0_eeb4, i32 %v0_eeb0)
  store i32 %v3_eeb8, i32* %r0.global-to-local, align 4
  %v1_eec0 = load i32, i32* %r6.global-to-local, align 4
  %v10_eec0 = inttoptr i32 %v1_eec0 to i8*
  %v15_eec0 = icmp eq i32 %v2_ec38, %v1_eec0
  store i1 %v15_eec0, i1* %cpsr_z.global-to-local, align 1
  %v9_eec4 = icmp sgt i8* %v3_ec38, %v10_eec0
  store i32 %v1_eec0, i32* %lr.global-to-local, align 4
  %v0_eed4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_eed4, i32* %ip.global-to-local, align 4
  %extract.t73 = trunc i32 %v1_eec0 to i8
  br i1 %v9_eec4, label %dec_label_pc_eed0, label %dec_label_pc_ef0c

dec_label_pc_eed0:                                ; preds = %bb137
  store i32 %v1_eec0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_eedc

dec_label_pc_eedc:                                ; preds = %.thread39, %dec_label_pc_eed0
  %v1_eee4 = phi i32 [ %v1_eee459, %.thread39 ], [ %v1_eec0, %dec_label_pc_eed0 ]
  %v0_eedc = phi i32 [ %v1_eef8, %.thread39 ], [ %v1_eec0, %dec_label_pc_eed0 ]
  %v1_eedc = load i32, i32* @r7, align 4
  %v2_eedc = add i32 %v1_eedc, %v0_eedc
  %v3_eedc = inttoptr i32 %v2_eedc to i8*
  %v4_eedc = load i8, i8* %v3_eedc, align 1
  %v6_eedc = zext i8 %v4_eedc to i32
  store i32 %v6_eedc, i32* %r3.global-to-local, align 4
  %v7_eee0 = icmp eq i8 %v4_eedc, 46
  store i1 %v7_eee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eee0, label %bb138, label %.thread35

.thread35:                                        ; preds = %dec_label_pc_eedc
  %v1_eee837 = add i32 %v1_eee4, 1
  store i32 %v1_eee837, i32* %r2.global-to-local, align 4
  br label %bb139

bb138:                                            ; preds = %dec_label_pc_eedc
  %v2_eee4 = trunc i32 %v1_eee4 to i8
  %v3_eee4 = load i32, i32* %ip.global-to-local, align 4
  %v4_eee4 = inttoptr i32 %v3_eee4 to i8*
  store i8 %v2_eee4, i8* %v4_eee4, align 1
  %v0_eeec.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_eee8 = load i32, i32* %lr.global-to-local, align 4
  %v1_eee8 = add i32 %v0_eee8, 1
  store i32 %v1_eee8, i32* %r2.global-to-local, align 4
  br i1 %v0_eeec.pr, label %bb140, label %bb139

bb139:                                            ; preds = %.thread35, %bb138
  %v1_eee838 = phi i32 [ %v1_eee837, %.thread35 ], [ %v1_eee8, %bb138 ]
  %v2_eeec = urem i32 %v1_eee838, 256
  store i32 %v2_eeec, i32* %lr.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_eee460 = phi i32 [ %v0_eee8, %bb138 ], [ %v2_eeec, %bb139 ]
  %v0_ef00.pr = phi i1 [ true, %bb138 ], [ false, %bb139 ]
  store i32 %v2_ec38, i32* %r2.global-to-local, align 4
  %v0_eef4 = load i32, i32* %r4.global-to-local, align 4
  %v1_eef4 = load i32, i32* %r1.global-to-local, align 4
  %v2_eef4 = add i32 %v1_eef4, %v0_eef4
  store i32 %v2_eef4, i32* %r0.global-to-local, align 4
  %v1_eef8 = add i32 %v1_eef4, 1
  store i32 %v1_eef8, i32* %r1.global-to-local, align 4
  br i1 %v0_ef00.pr, label %bb141, label %.thread39

bb141:                                            ; preds = %bb140
  %v2_eefc = add i32 %v2_eef4, 1
  store i32 %v2_eefc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread39

.thread39:                                        ; preds = %bb140, %bb141
  %v1_eee459 = phi i32 [ %v1_eee460, %bb140 ], [ 0, %bb141 ]
  %v9_ef04 = icmp eq i32 %v2_ec38, %v1_eef8
  store i1 %v9_ef04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef04, label %dec_label_pc_ef0c.loopexit, label %dec_label_pc_eedc

dec_label_pc_ef0c.loopexit:                       ; preds = %.thread39
  %v2_ef0c.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t72 = trunc i32 %v1_eee459 to i8
  br label %dec_label_pc_ef0c

dec_label_pc_ef0c:                                ; preds = %dec_label_pc_ef0c.loopexit, %bb137
  %v2_ef0c = phi i32 [ %v2_ef0c.pre, %dec_label_pc_ef0c.loopexit ], [ %v0_eed4, %bb137 ]
  %v0_ef0c.off0 = phi i8 [ %extract.t72, %dec_label_pc_ef0c.loopexit ], [ %extract.t73, %bb137 ]
  %v3_ef0c = inttoptr i32 %v2_ef0c to i8*
  store i8 %v0_ef0c.off0, i8* %v3_ef0c, align 1
  %v3_ef10 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_ec38, i32* %ip.global-to-local, align 4
  store i32 %v1_e9c4, i32* %lr.global-to-local, align 4
  %v0_ef1c = load i32, i32* %r4.global-to-local, align 4
  %v2_ef1c = add i32 %v0_ef1c, %v2_ec38
  store i32 %v2_ef1c, i32* %r3.global-to-local, align 4
  %v1_ef20 = add i32 %v3_ef10, 1
  store i32 %v1_ef20, i32* %r4.global-to-local, align 4
  %v9_ef24 = icmp eq i32 %v1_e9c4, %v1_ef20
  store i1 %v9_ef24, i1* %cpsr_z.global-to-local, align 1
  %v1_ef28 = add i32 %v2_ef1c, 2
  store i32 %v1_ef28, i32* %r2.global-to-local, align 4
  %v0_ef2c = load i32, i32* %sl.global-to-local, align 4
  %v1_ef2c = trunc i32 %v0_ef2c to i8
  %v4_ef2c = inttoptr i32 %v1_ef28 to i8*
  store i8 %v1_ef2c, i8* %v4_ef2c, align 1
  %v0_ef30 = load i32, i32* %r8.global-to-local, align 4
  %v1_ef30 = trunc i32 %v0_ef30 to i8
  %v2_ef30 = load i32, i32* %r2.global-to-local, align 4
  %v3_ef30 = add i32 %v2_ef30, 3
  %v4_ef30 = inttoptr i32 %v3_ef30 to i8*
  store i8 %v1_ef30, i8* %v4_ef30, align 1
  %v0_ef34 = load i32, i32* %r8.global-to-local, align 4
  %v1_ef34 = trunc i32 %v0_ef34 to i8
  %v2_ef34 = load i32, i32* %r2.global-to-local, align 4
  %v3_ef34 = add i32 %v2_ef34, 1
  %v4_ef34 = inttoptr i32 %v3_ef34 to i8*
  store i8 %v1_ef34, i8* %v4_ef34, align 1
  %v0_ef38 = load i32, i32* %sl.global-to-local, align 4
  %v1_ef38 = trunc i32 %v0_ef38 to i8
  %v2_ef38 = load i32, i32* %r2.global-to-local, align 4
  %v3_ef38 = add i32 %v2_ef38, 2
  %v4_ef38 = inttoptr i32 %v3_ef38 to i8*
  store i8 %v1_ef38, i8* %v4_ef38, align 1
  %v0_ef3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ef3c, i32* %stack_var_-40, align 4
  %v8_ef40 = icmp sgt i32 %v1_e9c4, %v1_ef20
  br i1 %v8_ef40, label %dec_label_pc_edac, label %dec_label_pc_ef44

dec_label_pc_ef44:                                ; preds = %dec_label_pc_ef0c, %dec_label_pc_f108
  store i32 %v1_e9c4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_eca8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_eca8, label %dec_label_pc_f108, label %dec_label_pc_ef58

dec_label_pc_ef58:                                ; preds = %dec_label_pc_ef44
  store i32 %v2_ec38, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_ef64 = load i32, i32* @sb, align 4
  %v2_ef64 = add i32 %v0_ef64, %v2_ec38
  store i32 %v2_ef64, i32* %r3.global-to-local, align 4
  %v1_ef68 = add i32 %v2_ef64, 47
  store i32 %v1_ef68, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r8, align 4
  %v1_ef70 = add i32 %v2_ef64, 27
  store i32 %v1_ef70, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_f06c

dec_label_pc_ef80:                                ; preds = %dec_label_pc_f06c
  store i32 %v3_ecb8, i32* %r3.global-to-local, align 4
  %v9_ef84 = icmp eq i32 %v3_ecb8, %v1_ef84
  store i1 %v9_ef84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef84, label %dec_label_pc_f0a8, label %dec_label_pc_ef8c

dec_label_pc_ef8c:                                ; preds = %dec_label_pc_f08c.dec_label_pc_ef8c_crit_edge, %dec_label_pc_ef80
  %v1_ef90 = phi i32 [ %v1_ef90.pre, %dec_label_pc_f08c.dec_label_pc_ef8c_crit_edge ], [ %v1_ef84, %dec_label_pc_ef80 ]
  store i32 %v3_ecbc, i32* %ip.global-to-local, align 4
  %v9_ef90 = icmp eq i32 %v3_ecbc, %v1_ef90
  store i1 %v9_ef90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef90, label %dec_label_pc_f0c4, label %dec_label_pc_ef98

dec_label_pc_ef98:                                ; preds = %dec_label_pc_f0a8.dec_label_pc_ef98_crit_edge, %dec_label_pc_ef8c
  %v1_ef9c = phi i32 [ %v1_ef9c.pre, %dec_label_pc_f0a8.dec_label_pc_ef98_crit_edge ], [ %v1_ef90, %dec_label_pc_ef8c ]
  store i32 %v3_ecc0, i32* %lr.global-to-local, align 4
  %v9_ef9c = icmp eq i32 %v3_ecc0, %v1_ef9c
  store i1 %v9_ef9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef9c, label %dec_label_pc_f0e0, label %dec_label_pc_efa4

dec_label_pc_efa4:                                ; preds = %dec_label_pc_f0c4, %dec_label_pc_ef98, %dec_label_pc_f0e0
  %v0_efa4 = load i32, i32* @r6, align 4
  store i32 %v0_efa4, i32* %r0.global-to-local, align 4
  %v0_efa8 = load i32, i32* @sb, align 4
  store i32 %v0_efa8, i32* %r1.global-to-local, align 4
  %v2_efac = call i32 @function_10668(i32 %v0_efa4, i32 %v0_efa8)
  %v0_efb0 = load i32, i32* @r7, align 4
  %v1_efb0 = trunc i32 %v0_efb0 to i8
  %v2_efb0 = load i32, i32* @r6, align 4
  %v3_efb0 = load i32, i32* @sb, align 4
  %v4_efb0 = add i32 %v3_efb0, %v2_efb0
  %v5_efb0 = inttoptr i32 %v4_efb0 to i8*
  store i8 %v1_efb0, i8* %v5_efb0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_efb8 = load i32, i32* @r7, align 4
  %v1_efb8 = trunc i32 %v0_efb8 to i8
  %v2_efb8 = load i32, i32* @r4, align 4
  %v3_efb8 = add i32 %v2_efb8, 10
  %v4_efb8 = inttoptr i32 %v3_efb8 to i8*
  store i8 %v1_efb8, i8* %v4_efb8, align 1
  %v0_efbc = load i32, i32* @r7, align 4
  %v1_efbc = trunc i32 %v0_efbc to i8
  %v2_efbc = load i32, i32* @r4, align 4
  %v3_efbc = add i32 %v2_efbc, 11
  %v4_efbc = inttoptr i32 %v3_efbc to i8*
  store i8 %v1_efbc, i8* %v4_efbc, align 1
  %v0_efc0 = load i32, i32* @r4, align 4
  store i32 %v0_efc0, i32* @r0, align 4
  %v2_efc4 = call i32 @function_f188(i32 %v0_efc0, i32 20)
  %v3_efc4 = trunc i32 %v2_efc4 to i8
  store i32 %v2_efc4, i32* %r0.global-to-local, align 4
  %v4_efc8 = sdiv i32 %v2_efc4, 256
  store i32 %v4_efc8, i32* %r3.global-to-local, align 4
  %v1_efcc = trunc i32 %v4_efc8 to i8
  %v2_efcc = load i32, i32* @r4, align 4
  %v3_efcc = add i32 %v2_efcc, 11
  %v4_efcc = inttoptr i32 %v3_efcc to i8*
  store i8 %v1_efcc, i8* %v4_efcc, align 1
  %v3_efd0 = load i32, i32* @r4, align 4
  %v4_efd0 = add i32 %v3_efd0, 10
  %v5_efd0 = inttoptr i32 %v4_efd0 to i8*
  store i8 %v3_efc4, i8* %v5_efd0, align 1
  %v0_efd4 = load i32, i32* @r7, align 4
  %v1_efd4 = trunc i32 %v0_efd4 to i8
  %v2_efd4 = load i32, i32* @r5, align 4
  %v3_efd4 = add i32 %v2_efd4, 6
  %v4_efd4 = inttoptr i32 %v3_efd4 to i8*
  store i8 %v1_efd4, i8* %v4_efd4, align 1
  %v0_efd8 = load i32, i32* @r7, align 4
  %v1_efd8 = trunc i32 %v0_efd8 to i8
  %v2_efd8 = load i32, i32* @r5, align 4
  %v3_efd8 = add i32 %v2_efd8, 7
  %v4_efd8 = inttoptr i32 %v3_efd8 to i8*
  store i8 %v1_efd8, i8* %v4_efd8, align 1
  %v0_efdc = load i32, i32* @r4, align 4
  %v1_efdc = add i32 %v0_efdc, 24
  %v2_efdc = inttoptr i32 %v1_efdc to i8*
  %v3_efdc = load i8, i8* %v2_efdc, align 1
  %v4_efdc = zext i8 %v3_efdc to i32
  store i32 %v4_efdc, i32* %r3.global-to-local, align 4
  %v1_efe0 = add i32 %v0_efdc, 25
  %v2_efe0 = inttoptr i32 %v1_efe0 to i8*
  %v3_efe0 = load i8, i8* %v2_efe0, align 1
  %v4_efe0 = zext i8 %v3_efe0 to i32
  %v0_efe4 = load i32, i32* @r5, align 4
  store i32 %v0_efe4, i32* @r1, align 4
  %v4_efe8 = mul nuw nsw i32 %v4_efe0, 256
  %v5_efe8 = or i32 %v4_efe8, %v4_efdc
  store i32 %v5_efe8, i32* %r2.global-to-local, align 4
  store i32 %v0_efdc, i32* %r0.global-to-local, align 4
  %v0_eff0 = load i32, i32* @fp, align 4
  store i32 %v0_eff0, i32* %r3.global-to-local, align 4
  %v4_eff4 = call i32 @function_f1e4(i32 %v0_efdc, i32 %v0_efe4, i32 %v5_efe8, i32 %v0_eff0)
  %v5_eff4 = trunc i32 %v4_eff4 to i8
  store i32 %v4_eff4, i32* %r0.global-to-local, align 4
  %v3_eff8 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v5_f004 = mul i32 %v3_eff8, 24
  store i32 %v5_f004, i32* %lr.global-to-local, align 4
  %v4_f00878 = udiv i32 %v4_eff4, 256
  %v1_f00c = trunc i32 %v4_f00878 to i8
  %v2_f00c = load i32, i32* @r5, align 4
  %v3_f00c = add i32 %v2_f00c, 7
  %v4_f00c = inttoptr i32 %v3_f00c to i8*
  store i8 %v1_f00c, i8* %v4_f00c, align 1
  store i32 %stack_var_-2188.0, i32* %r3.global-to-local, align 4
  %v0_f014 = load i32, i32* %lr.global-to-local, align 4
  %v1_f014 = load i32, i32* %r2.global-to-local, align 4
  %v2_f014 = add i32 %v1_f014, %v0_f014
  store i32 %v2_f014, i32* %lr.global-to-local, align 4
  %v3_f018 = load i32, i32* @r5, align 4
  %v4_f018 = add i32 %v3_f018, 6
  %v5_f018 = inttoptr i32 %v4_f018 to i8*
  store i8 %v5_eff4, i8* %v5_f018, align 1
  %v0_f01c = load i32, i32* %r3.global-to-local, align 4
  %v1_f01c = load i32, i32* %lr.global-to-local, align 4
  %v2_f01c = add i32 %v1_f01c, 4
  %v3_f01c = inttoptr i32 %v2_f01c to i32*
  store i32 %v0_f01c, i32* %v3_f01c, align 4
  %v0_f020 = load i32, i32* @r4, align 4
  %v1_f020 = add i32 %v0_f020, 20
  %v2_f020 = inttoptr i32 %v1_f020 to i32*
  %v3_f020 = load i32, i32* %v2_f020, align 4
  %v3_f024 = udiv i32 %v3_f020, 65536
  store i32 %v3_f024, i32* %r3.global-to-local, align 4
  %v3_f02817 = udiv i32 %v3_f020, 16777216
  %v1_f02c = trunc i32 %v3_f02817 to i8
  %v2_f02c = load i32, i32* %lr.global-to-local, align 4
  %v3_f02c = add i32 %v2_f02c, 3
  %v4_f02c = inttoptr i32 %v3_f02c to i8*
  store i8 %v1_f02c, i8* %v4_f02c, align 1
  %v0_f030 = load i32, i32* %r3.global-to-local, align 4
  %v1_f030 = trunc i32 %v0_f030 to i8
  %v2_f030 = load i32, i32* %lr.global-to-local, align 4
  %v3_f030 = add i32 %v2_f030, 2
  %v4_f030 = inttoptr i32 %v3_f030 to i8*
  store i8 %v1_f030, i8* %v4_f030, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f03c = load i32, i32* @r4, align 4
  store i32 %v0_f03c, i32* %r1.global-to-local, align 4
  store i32 %v3_ec4c, i32* %r0.global-to-local, align 4
  store i32 %v1_ef68, i32* %r2.global-to-local, align 4
  %v0_f048 = load i32, i32* %lr.global-to-local, align 4
  %v4_f048 = inttoptr i32 %v0_f048 to %sockaddr*
  %v7_f050 = inttoptr i32 %v0_f03c to i32*
  %v9_f050 = call i32 @sendto(i32 %v3_ec4c, i32* %v7_f050, i32 %v1_ef68, i32 16384, %sockaddr* %v4_f048, i32 16)
  %v3_f054 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_f054, i32* %r3.global-to-local, align 4
  store i32 %v1_e9c4, i32* %r5.global-to-local, align 4
  %v1_f05c = add i32 %v3_f054, 1
  store i32 %v1_f05c, i32* %r0.global-to-local, align 4
  %v9_f060 = icmp eq i32 %v1_e9c4, %v1_f05c
  store i1 %v9_f060, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f05c, i32* %stack_var_-40, align 4
  %v7_f068 = icmp sgt i32 %v1_e9c4, %v1_f05c
  br i1 %v7_f068, label %dec_label_pc_efa4.dec_label_pc_f06c_crit_edge, label %dec_label_pc_f108

dec_label_pc_efa4.dec_label_pc_f06c_crit_edge:    ; preds = %dec_label_pc_efa4
  %v1_f078.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f06c

dec_label_pc_f06c:                                ; preds = %dec_label_pc_efa4.dec_label_pc_f06c_crit_edge, %dec_label_pc_ef58
  %v1_ef84 = phi i32 [ %v1_f078.pre, %dec_label_pc_efa4.dec_label_pc_f06c_crit_edge ], [ 65535, %dec_label_pc_ef58 ]
  %v1_f074 = phi i32 [ %v1_f05c, %dec_label_pc_efa4.dec_label_pc_f06c_crit_edge ], [ 0, %dec_label_pc_ef58 ]
  store i32 %v4_e9ec, i32* %lr.global-to-local, align 4
  store i32 %v3_ecb4, i32* %r2.global-to-local, align 4
  %v4_f074 = mul i32 %v1_f074, 4
  %v5_f074 = add i32 %v4_f074, %v4_e9ec
  %v6_f074 = inttoptr i32 %v5_f074 to i32*
  %v7_f074 = load i32, i32* %v6_f074, align 4
  store i32 %v7_f074, i32* @r4, align 4
  %v9_f078 = icmp eq i32 %v3_ecb4, %v1_ef84
  store i1 %v9_f078, i1* %cpsr_z.global-to-local, align 1
  %v1_f07c = add i32 %v7_f074, 20
  store i32 %v1_f07c, i32* @r5, align 4
  %v1_f080 = add i32 %v7_f074, 41
  store i32 %v1_f080, i32* @r6, align 4
  %v1_f084 = add i32 %v7_f074, 28
  store i32 %v1_f084, i32* @sl, align 4
  br i1 %v9_f078, label %dec_label_pc_f08c, label %dec_label_pc_ef80

dec_label_pc_f08c:                                ; preds = %dec_label_pc_f06c
  %v0_f08c = call i32 @function_105b4()
  %v1_f08c = trunc i32 %v0_f08c to i8
  store i32 %v0_f08c, i32* %r0.global-to-local, align 4
  %v4_f09079 = udiv i32 %v0_f08c, 256
  %v1_f094 = trunc i32 %v4_f09079 to i8
  %v2_f094 = load i32, i32* @r4, align 4
  %v3_f094 = add i32 %v2_f094, 5
  %v4_f094 = inttoptr i32 %v3_f094 to i8*
  store i8 %v1_f094, i8* %v4_f094, align 1
  store i32 %v3_ecb8, i32* %r3.global-to-local, align 4
  %v1_f09c = load i32, i32* @r8, align 4
  %v9_f09c = icmp eq i32 %v3_ecb8, %v1_f09c
  store i1 %v9_f09c, i1* %cpsr_z.global-to-local, align 1
  %v3_f0a0 = load i32, i32* @r4, align 4
  %v4_f0a0 = add i32 %v3_f0a0, 4
  %v5_f0a0 = inttoptr i32 %v4_f0a0 to i8*
  store i8 %v1_f08c, i8* %v5_f0a0, align 1
  %v0_f0a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0a4, label %dec_label_pc_f0a8, label %dec_label_pc_f08c.dec_label_pc_ef8c_crit_edge

dec_label_pc_f08c.dec_label_pc_ef8c_crit_edge:    ; preds = %dec_label_pc_f08c
  %v1_ef90.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_ef8c

dec_label_pc_f0a8:                                ; preds = %dec_label_pc_f08c, %dec_label_pc_ef80
  %v0_f0a8 = call i32 @function_105b4()
  %v1_f0a8 = trunc i32 %v0_f0a8 to i8
  store i32 %v0_f0a8, i32* %r0.global-to-local, align 4
  store i32 %v3_ecbc, i32* %ip.global-to-local, align 4
  %v4_f0b0 = sdiv i32 %v0_f0a8, 256
  store i32 %v4_f0b0, i32* %r3.global-to-local, align 4
  %v1_f0b4 = load i32, i32* @r8, align 4
  %v9_f0b4 = icmp eq i32 %v3_ecbc, %v1_f0b4
  store i1 %v9_f0b4, i1* %cpsr_z.global-to-local, align 1
  %v3_f0b8 = load i32, i32* @r4, align 4
  %v4_f0b8 = add i32 %v3_f0b8, 20
  %v5_f0b8 = inttoptr i32 %v4_f0b8 to i8*
  store i8 %v1_f0a8, i8* %v5_f0b8, align 1
  %v0_f0bc = load i32, i32* %r3.global-to-local, align 4
  %v1_f0bc = trunc i32 %v0_f0bc to i8
  %v2_f0bc = load i32, i32* @r5, align 4
  %v3_f0bc = add i32 %v2_f0bc, 1
  %v4_f0bc = inttoptr i32 %v3_f0bc to i8*
  store i8 %v1_f0bc, i8* %v4_f0bc, align 1
  %v0_f0c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0c0, label %dec_label_pc_f0c4, label %dec_label_pc_f0a8.dec_label_pc_ef98_crit_edge

dec_label_pc_f0a8.dec_label_pc_ef98_crit_edge:    ; preds = %dec_label_pc_f0a8
  %v1_ef9c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_ef98

dec_label_pc_f0c4:                                ; preds = %dec_label_pc_f0a8, %dec_label_pc_ef8c
  %v0_f0c4 = call i32 @function_105b4()
  %v1_f0c4 = trunc i32 %v0_f0c4 to i8
  store i32 %v0_f0c4, i32* %r0.global-to-local, align 4
  store i32 %v3_ecc0, i32* %lr.global-to-local, align 4
  %v4_f0cc = sdiv i32 %v0_f0c4, 256
  store i32 %v4_f0cc, i32* %r3.global-to-local, align 4
  %v1_f0d0 = load i32, i32* @r8, align 4
  %v9_f0d0 = icmp eq i32 %v3_ecc0, %v1_f0d0
  store i1 %v9_f0d0, i1* %cpsr_z.global-to-local, align 1
  %v1_f0d4 = trunc i32 %v4_f0cc to i8
  %v2_f0d4 = load i32, i32* @r5, align 4
  %v3_f0d4 = add i32 %v2_f0d4, 3
  %v4_f0d4 = inttoptr i32 %v3_f0d4 to i8*
  store i8 %v1_f0d4, i8* %v4_f0d4, align 1
  %v3_f0d8 = load i32, i32* @r5, align 4
  %v4_f0d8 = add i32 %v3_f0d8, 2
  %v5_f0d8 = inttoptr i32 %v4_f0d8 to i8*
  store i8 %v1_f0c4, i8* %v5_f0d8, align 1
  %v0_f0dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f0dc, label %dec_label_pc_f0e0, label %dec_label_pc_efa4

dec_label_pc_f0e0:                                ; preds = %dec_label_pc_f0c4, %dec_label_pc_ef98
  %v0_f0e0 = call i32 @function_105b4()
  %v1_f0e0 = trunc i32 %v0_f0e0 to i8
  store i32 %v0_f0e0, i32* %r0.global-to-local, align 4
  %v4_f0e4 = sdiv i32 %v0_f0e0, 256
  store i32 %v4_f0e4, i32* %r3.global-to-local, align 4
  %v3_f0e8 = load i32, i32* @r4, align 4
  %v4_f0e8 = add i32 %v3_f0e8, 28
  %v5_f0e8 = inttoptr i32 %v4_f0e8 to i8*
  store i8 %v1_f0e0, i8* %v5_f0e8, align 1
  %v0_f0ec = load i32, i32* %r3.global-to-local, align 4
  %v1_f0ec = trunc i32 %v0_f0ec to i8
  %v2_f0ec = load i32, i32* @sl, align 4
  %v3_f0ec = add i32 %v2_f0ec, 1
  %v4_f0ec = inttoptr i32 %v3_f0ec to i8*
  store i8 %v1_f0ec, i8* %v4_f0ec, align 1
  br label %dec_label_pc_efa4

dec_label_pc_f0f4:                                ; preds = %dec_label_pc_ec5c
  store i32 %v3_ec4c, i32* %r0.global-to-local, align 4
  %v1_f0f8 = call i32 @close(i32 %v3_ec4c)
  store i32 %v1_f0f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f0fc

dec_label_pc_f0fc:                                ; preds = %dec_label_pc_f108, %dec_label_pc_ec34, %dec_label_pc_ec1c, %dec_label_pc_f0f4
  %v29_f104 = phi i32 [ %v3_ec4c, %dec_label_pc_ec34 ], [ %v2_ec28, %dec_label_pc_ec1c ], [ %v1_f0f8, %dec_label_pc_f0f4 ], [ %v2_f10c, %dec_label_pc_f108 ]
  store i32 %v3_e9b8, i32* %r4.global-to-local, align 4
  store i32 %v6_e9b8, i32* %r5.global-to-local, align 4
  store i32 %v9_e9b8, i32* %r6.global-to-local, align 4
  store i32 %v15_e9b8, i32* %r8.global-to-local, align 4
  store i32 %v21_e9b8, i32* %sl.global-to-local, align 4
  store i32 %v24_e9b8, i32* %fp.global-to-local, align 4
  ret i32 %v29_f104

dec_label_pc_f108.critedge:                       ; preds = %dec_label_pc_ec88
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_f108

dec_label_pc_f108:                                ; preds = %dec_label_pc_efa4, %dec_label_pc_f108.critedge, %dec_label_pc_ef44
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_f10c = call i32 @time(i32* null)
  store i32 %v2_f10c, i32* %r0.global-to-local, align 4
  store i32 %v2_ec28, i32* %ip.global-to-local, align 4
  %v9_f114 = icmp eq i32 %v2_ec28, %v2_f10c
  store i1 %v9_f114, i1* %cpsr_z.global-to-local, align 1
  %v6_f118 = icmp slt i32 %v2_ec28, %v2_f10c
  br i1 %v6_f118, label %dec_label_pc_f0fc, label %dec_label_pc_ef44

dec_label_pc_f120:                                ; preds = %dec_label_pc_ebd8, %bb130
  %v0_ebe0.lcssa = phi i32 [ %v1_ebac, %dec_label_pc_ebd8 ], [ %v0_ebe0, %bb130 ]
  %v2_f120 = sub i32 %v0_ebe0.lcssa, %v4_eb64
  store i32 %v2_f120, i32* %r2.global-to-local, align 4
  store i32 %v2_eb9c, i32* %r1.global-to-local, align 4
  store i32 %v2_eb8c, i32* %r0.global-to-local, align 4
  %v3_f12c = call i32 @function_12db8(i32 %v2_eb8c, i32 %v2_eb9c, i32 %v2_f120)
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp142 = bitcast i32* %stack_var_-72 to i8*
  store i32 %v2_eb8c, i32* %r0.global-to-local, align 4
  %v2_f138 = load i32, i32* %r4.global-to-local, align 4
  %v3_f138 = inttoptr i32 %v2_f138 to i8*
  store i8 0, i8* %v3_f138, align 1
  %v3_f13c = call i32 @inet_addr(i8* %tmp142)
  store i32 %v3_f13c, i32* %r0.global-to-local, align 4
  %sext41 = mul i32 %v3_f13c, 16777216
  %phitmp = sdiv i32 %sext41, 16777216
  br label %dec_label_pc_ec1c

dec_label_pc_f148:                                ; preds = %dec_label_pc_ebf0
  store i32 104859200, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ec1c

dec_label_pc_f158:                                ; preds = %dec_label_pc_ebf0
  store i32 134744072, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_ec1c

dec_label_pc_f16c:                                ; preds = %dec_label_pc_ebf0
  store i32 33686020, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ec1c

; uselistorder directives
  uselistorder i32 %v2_f10c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_f0e0, { 0, 2, 1 }
  uselistorder i32 %v4_f0cc, { 1, 0 }
  uselistorder i32 %v0_f0c4, { 0, 2, 1 }
  uselistorder i32 %v0_f0a8, { 0, 2, 1 }
  uselistorder i32 %v0_f08c, { 0, 2, 1 }
  uselistorder i32 %v7_f074, { 2, 1, 0, 3 }
  uselistorder i32 %v1_ef84, { 2, 1, 0 }
  uselistorder i32 %v1_f05c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_eff4, { 0, 2, 1 }
  uselistorder i32 %v0_efdc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_efc8, { 1, 0 }
  uselistorder i32 %v2_efc4, { 0, 2, 1 }
  uselistorder i32 %v1_ef68, { 1, 0, 2 }
  uselistorder i32 %v1_eef8, { 0, 2, 1 }
  uselistorder i32 %v1_eef4, { 1, 0 }
  uselistorder i32 %v2_eeec, { 1, 0 }
  uselistorder i32 %v1_eec0, { 2, 1, 4, 0, 3, 6, 5 }
  uselistorder i32 %v3_ed64, { 1, 0 }
  uselistorder i32 %v3_ed5c, { 1, 0 }
  uselistorder i32 %v1_ed14, { 1, 0 }
  uselistorder i32 %v1_ed0c, { 1, 0 }
  uselistorder i32 %v1_ecf0, { 1, 0 }
  uselistorder i32 %v3_ece8, { 1, 0 }
  uselistorder i32 %v1_ecac, { 1, 0 }
  uselistorder i1 %v7_ec80, { 1, 0 }
  uselistorder i1 %v7_ec50, { 1, 0 }
  uselistorder i32 %v3_ec4c, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_ec38, { 0, 6, 1, 7, 3, 5, 8, 4, 2, 9 }
  uselistorder i32 %v2_ec28, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_ec24, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2188.0, { 1, 0 }
  uselistorder i32 %v1_ebf4, { 1, 0 }
  uselistorder i32 %v0_ebf0, { 1, 0 }
  uselistorder i32 %v1_ebe8, { 1, 0 }
  uselistorder i32 %v1_ebe0, { 1, 2, 0 }
  uselistorder i1 %v7_ebcc, { 1, 0 }
  uselistorder i32 %v1_ebc8, { 1, 0, 2 }
  uselistorder i1 %v8_ebc0, { 1, 0 }
  uselistorder i1 %v7_ebbc, { 1, 0 }
  uselistorder i32 %v1_ebb0, { 1, 0 }
  uselistorder i8 %v2_eba4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_eba8, { 1, 0 }
  uselistorder i32 %v0_ebc8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_eb9c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_eb90, { 1, 0, 2 }
  uselistorder i32 %v2_eb8c, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_eb7c, { 1, 0, 2, 5, 3, 4 }
  uselistorder i1 %v7_eb74, { 1, 0 }
  uselistorder i32 %v4_eb64, { 6, 5, 7, 4, 3, 1, 2, 0, 8 }
  uselistorder i32 %v0_eb18, { 1, 0, 2, 3 }
  uselistorder i32 %v6_eab8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_ea9c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_ea84, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v1_ea6c, { 1, 0 }
  uselistorder i32 %v7_ea28, { 1, 0, 3, 2 }
  uselistorder i32 %v6_ea04, { 1, 0 }
  uselistorder i32 %v4_e9ec, { 0, 3, 1, 2 }
  uselistorder i32 %v1_e9c4, { 3, 4, 5, 2, 7, 8, 6, 9, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 12, 10, 11 }
  uselistorder i32* %r4.global-to-local, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 38, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 36, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 37, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 40, 39, 41, 43, 42, 45, 44, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 7, 6, 8, 9, 10, 12, 11, 13, 15, 14, 16, 17, 18, 19, 27, 20, 21, 22, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 36, 35, 37, 38, 39, 40, 42, 41, 43, 44, 46, 45, 47, 49, 48, 51, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 24, 25, 26, 27 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 36, 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 41, { 4, 5, 6, 0, 1, 7, 2, 8, 3, 9 }
  uselistorder i8 46, { 5, 0, 1, 2, 3, 4, 6, 7, 8 }
  uselistorder i32 37, { 0, 3, 1, 4, 2, 5, 6, 7, 8 }
  uselistorder i32 53, { 0, 3, 1, 4, 2, 5 }
  uselistorder label %dec_label_pc_f108, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f0fc, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_efa4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ef44, { 1, 0 }
  uselistorder label %.thread39, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb139, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_ebe0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ebd8, { 1, 0 }
  uselistorder label %dec_label_pc_ebcc, { 1, 0 }
}

define i32 @function_f180(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f180:
  call void @__pseudo_cond_branch(i1 false, i32 11156144)
  %v0_f184 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f184, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_f180
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_f180, %bb
  %v10_f184 = load i32, i32* @r0, align 4
  ret i32 %v10_f184

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_f188(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f188:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_f1b8, label %dec_label_pc_f194

dec_label_pc_f194:                                ; preds = %dec_label_pc_f188
  %v0_f198.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f198

dec_label_pc_f198:                                ; preds = %dec_label_pc_f198, %dec_label_pc_f194
  %v0_f1ac = phi i32 [ %v2_f1ac, %dec_label_pc_f198 ], [ 0, %dec_label_pc_f194 ]
  %v0_f1a0 = phi i32 [ %v1_f1a0, %dec_label_pc_f198 ], [ %arg1, %dec_label_pc_f194 ]
  %v0_f1b0 = phi i32 [ %v1_f1b0, %dec_label_pc_f198 ], [ %v0_f198.pre, %dec_label_pc_f194 ]
  %v1_f198 = inttoptr i32 %v0_f1b0 to i8*
  %v2_f198 = load i8, i8* %v1_f198, align 1
  %v3_f198 = zext i8 %v2_f198 to i32
  %v1_f19c = add i32 %v0_f1b0, 1
  %v2_f19c = inttoptr i32 %v1_f19c to i8*
  %v3_f19c = load i8, i8* %v2_f19c, align 1
  %v4_f19c = zext i8 %v3_f19c to i32
  %v1_f1a0 = add i32 %v0_f1a0, -2
  %v4_f1a4 = mul nuw nsw i32 %v4_f19c, 256
  %v5_f1a4 = or i32 %v4_f1a4, %v3_f198
  %v2_f1ac = add i32 %v5_f1a4, %v0_f1ac
  %v1_f1b0 = add i32 %v0_f1b0, 2
  store i32 %v1_f1b0, i32* @r0, align 4
  %v1_f1a0.cmp = icmp ugt i32 %v1_f1a0, 1
  br i1 %v1_f1a0.cmp, label %dec_label_pc_f198, label %dec_label_pc_f1b8

dec_label_pc_f1b8:                                ; preds = %dec_label_pc_f198, %dec_label_pc_f188
  %v1_f1c0 = phi i32 [ 0, %dec_label_pc_f188 ], [ %v2_f1ac, %dec_label_pc_f198 ]
  %v0_f1b8 = phi i32 [ %arg1, %dec_label_pc_f188 ], [ %v1_f1a0, %dec_label_pc_f198 ]
  %v7_f1b8 = icmp eq i32 %v0_f1b8, 1
  br i1 %v7_f1b8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f1b8
  %v1_f1bc = load i32, i32* @r0, align 4
  %v2_f1bc = inttoptr i32 %v1_f1bc to i8*
  %v3_f1bc = load i8, i8* %v2_f1bc, align 1
  %v4_f1bc = zext i8 %v3_f1bc to i32
  %v3_f1c0 = add i32 %v1_f1c0, %v4_f1bc
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f1b8, %bb
  %v0_f1c4 = phi i32 [ %v1_f1c0, %dec_label_pc_f1b8 ], [ %v3_f1c0, %bb ]
  %v3_f1c8 = urem i32 %v0_f1c4, 65536
  %v4_f1cc = udiv i32 %v0_f1c4, 65536
  %v5_f1cc = add nuw nsw i32 %v4_f1cc, %v3_f1c8
  %v4_f1d0 = udiv i32 %v5_f1cc, 65536
  %v5_f1d0 = add nuw nsw i32 %v4_f1d0, %v5_f1cc
  %v1_f1d4 = urem i32 %v5_f1d0, 65536
  %v3_f1dc = xor i32 %v1_f1d4, 65535
  ret i32 %v3_f1dc

; uselistorder directives
  uselistorder i32 %v5_f1cc, { 1, 0 }
  uselistorder i32 %v1_f1b0, { 1, 0 }
  uselistorder i32 %v1_f1a0, { 1, 0, 2 }
  uselistorder i32 %v0_f1b0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_f1e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f1e4:
  %v3_f1f4 = urem i32 %arg2, 65536
  %v1_f1f8 = add i32 %arg1, 12
  %v1_f1fc = inttoptr i32 %v1_f1f8 to i32*
  %v2_f1fc = load i32, i32* %v1_f1fc, align 4
  %v3_f1fc = add i32 %arg1, 16
  %v4_f1fc = inttoptr i32 %v3_f1fc to i32*
  %v5_f1fc = load i32, i32* %v4_f1fc, align 4
  %v7_f200 = icmp sgt i32 %arg3, 1
  br i1 %v7_f200, label %dec_label_pc_f20c.preheader, label %dec_label_pc_f22c

dec_label_pc_f20c.preheader:                      ; preds = %dec_label_pc_f1e4
  %v0_f20c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_f20c

dec_label_pc_f20c:                                ; preds = %dec_label_pc_f20c.preheader, %dec_label_pc_f20c
  %v0_f220 = phi i32 [ 0, %dec_label_pc_f20c.preheader ], [ %v2_f220, %dec_label_pc_f20c ]
  %v0_f214 = phi i32 [ %arg3, %dec_label_pc_f20c.preheader ], [ %v1_f214, %dec_label_pc_f20c ]
  %v0_f224 = phi i32 [ %v0_f20c.pre, %dec_label_pc_f20c.preheader ], [ %v1_f224, %dec_label_pc_f20c ]
  %v1_f20c = inttoptr i32 %v0_f224 to i8*
  %v2_f20c = load i8, i8* %v1_f20c, align 1
  %v3_f20c = zext i8 %v2_f20c to i32
  %v1_f210 = add i32 %v0_f224, 1
  %v2_f210 = inttoptr i32 %v1_f210 to i8*
  %v3_f210 = load i8, i8* %v2_f210, align 1
  %v4_f210 = zext i8 %v3_f210 to i32
  %v1_f214 = add nsw i32 %v0_f214, -2
  %v4_f218 = mul nuw nsw i32 %v4_f210, 256
  %v5_f218 = or i32 %v4_f218, %v3_f20c
  %v2_f220 = add i32 %v5_f218, %v0_f220
  %v1_f224 = add i32 %v0_f224, 2
  store i32 %v1_f224, i32* @r1, align 4
  %v8_f228 = icmp sgt i32 %v1_f214, 1
  br i1 %v8_f228, label %dec_label_pc_f20c, label %dec_label_pc_f22c

dec_label_pc_f22c:                                ; preds = %dec_label_pc_f20c, %dec_label_pc_f1e4
  %v1_f234 = phi i32 [ 0, %dec_label_pc_f1e4 ], [ %v2_f220, %dec_label_pc_f20c ]
  %v0_f22c = phi i32 [ %arg3, %dec_label_pc_f1e4 ], [ %v1_f214, %dec_label_pc_f20c ]
  %v7_f22c = icmp eq i32 %v0_f22c, 1
  br i1 %v7_f22c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_f22c
  %v1_f230 = load i32, i32* @r1, align 4
  %v2_f230 = inttoptr i32 %v1_f230 to i8*
  %v3_f230 = load i8, i8* %v2_f230, align 1
  %v4_f230 = zext i8 %v3_f230 to i32
  %v3_f234 = add i32 %v4_f230, %v1_f234
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f22c, %bb
  %v0_f258 = phi i32 [ %v1_f234, %dec_label_pc_f22c ], [ %v3_f234, %bb ]
  %v3_f23c = urem i32 %v2_f1fc, 65536
  %v1_f244 = add i32 %arg1, 9
  %v2_f244 = inttoptr i32 %v1_f244 to i8*
  %v3_f244 = load i8, i8* %v2_f244, align 1
  %v4_f244 = zext i8 %v3_f244 to i32
  %v3_f248 = urem i32 %v5_f1fc, 65536
  %v4_f24c = udiv i32 %v2_f1fc, 65536
  %v3_f254 = mul nuw nsw i32 %v4_f244, 256
  %v4_f258 = udiv i32 %v5_f1fc, 65536
  %v5_f258 = add i32 %v0_f258, %v4_f258
  %v2_f25c = add i32 %v5_f258, %v3_f254
  %v5_f24c = add nuw nsw i32 %v3_f23c, %v3_f1f4
  %v2_f250 = add nuw nsw i32 %v5_f24c, %v4_f24c
  %v2_f260 = add nuw nsw i32 %v2_f250, %v3_f248
  %v2_f264 = add i32 %v2_f25c, %v2_f260
  %tmp = icmp ult i32 %v2_f264, 65536
  br i1 %tmp, label %dec_label_pc_f284, label %dec_label_pc_f270

dec_label_pc_f270:                                ; preds = %.thread, %dec_label_pc_f270
  %v2_f2781 = phi i32 [ %v2_f278, %dec_label_pc_f270 ], [ %v2_f264, %.thread ]
  %v3_f27c2.in = phi i32 [ %v2_f278, %dec_label_pc_f270 ], [ %v2_f264, %.thread ]
  %v3_f27c2 = udiv i32 %v3_f27c2.in, 65536
  %v3_f274 = urem i32 %v2_f2781, 65536
  %v2_f278 = add nuw nsw i32 %v3_f274, %v3_f27c2
  %tmp14 = icmp ult i32 %v2_f278, 65536
  br i1 %tmp14, label %dec_label_pc_f284.loopexit, label %dec_label_pc_f270

dec_label_pc_f284.loopexit:                       ; preds = %dec_label_pc_f270
  br label %dec_label_pc_f284

dec_label_pc_f284:                                ; preds = %dec_label_pc_f284.loopexit, %.thread
  %v0_f284 = phi i32 [ %v2_f278, %dec_label_pc_f284.loopexit ], [ %v2_f264, %.thread ]
  %v1_f284 = urem i32 %v0_f284, 65536
  %v3_f28c = xor i32 %v1_f284, 65535
  ret i32 %v3_f28c

; uselistorder directives
  uselistorder i32 %v2_f278, { 2, 1, 3, 0 }
  uselistorder i32 %v2_f264, { 3, 0, 2, 1 }
  uselistorder i32 %v1_f234, { 1, 0 }
  uselistorder i32 %v1_f224, { 1, 0 }
  uselistorder i32 %v1_f214, { 0, 2, 1 }
  uselistorder i32 %v0_f224, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f270, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f20c, { 1, 0 }
}

define i32 @function_f294(i32 %arg1) local_unnamed_addr {
dec_label_pc_f294:
  %v2_f298 = load i32, i32* @global_var_1c1c4.144, align 4
  %v2_f2a0 = call i32 @kill(i32 %v2_f298, i32 9)
  %v0_f2a4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f2a4, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_f294
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_f294, %bb
  ret i32 %v2_f2a0

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_f2a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_f2a8:
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f2a8 = load i32, i32* @r4, align 4
  store i32 %v3_f2a8, i32* %stack_var_-36, align 4
  %v6_f2a8 = load i32, i32* @r5, align 4
  %v9_f2a8 = load i32, i32* @r6, align 4
  %v12_f2a8 = load i32, i32* @r7, align 4
  %v15_f2a8 = load i32, i32* @r8, align 4
  %v21_f2a8 = load i32, i32* @sl, align 4
  %v2_f2bc = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_f2bc, i32* @sl, align 4
  %v3_f2c4 = mul i32 %arg1, 65536
  store i32 %v3_f2c4, i32* @r5, align 4
  %v2_f2d0 = ptrtoint i32* %stack_var_-8773 to i32
  %v4_f2dc = call i32* @memset(i32* nonnull %stack_var_-4677, i32 0, i32 4096)
  %v0_f2f0 = load i32, i32* @r5, align 4
  %v3_f2f0 = udiv i32 %v0_f2f0, 65536
  store i32 %v3_f2f0, i32* %r4.global-to-local, align 4
  %v4_f2f4 = call i32* @memset(i32* nonnull %stack_var_-8773, i32 0, i32 4096)
  %v2_f2f8 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_f2f8, i32* @r6, align 4
  %v1_f300 = mul nuw nsw i32 %v3_f2f0, 256
  %v3_f30c = and i32 %v1_f300, 65280
  store i32 %v3_f30c, i32* %r4.global-to-local, align 4
  %v2_f314 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_f314, i32* %sb.global-to-local, align 4
  %v3_f318 = bitcast i8* %stack_var_-581 to i32*
  %v4_f318 = call i32* @memset(i32* %v3_f318, i32 0, i32 513)
  %v2_f31c = ptrtoint i8* %stack_var_-68 to i32
  store i32 %v2_f31c, i32* %sb.global-to-local, align 4
  %v0_f324 = load i32, i32* %r4.global-to-local, align 4
  %v1_f324 = load i32, i32* @r5, align 4
  %v4_f324 = udiv i32 %v1_f324, 16777216
  %v5_f324 = or i32 %v4_f324, %v0_f324
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_f344 = trunc i32 %v5_f324 to i8
  %v4_f344 = call i32 @function_13230(i8 %v3_f344, i32 16, i32 %v2_f31c)
  %v2_f34c = call i32 @function_12d3c(i8* nonnull %stack_var_-68)
  %v7_f350 = icmp eq i32 %v2_f34c, 2
  br i1 %v7_f350, label %dec_label_pc_f7fc, label %dec_label_pc_f358

dec_label_pc_f358:                                ; preds = %dec_label_pc_f2a8, %dec_label_pc_f7fc
  %v1_f35c = call i32 @function_12288(i32 6)
  %v1_f364 = call i32 @function_12288(i32 7)
  %v1_f36c = call i32 @function_12288(i32 8)
  %v1_f374 = call i32 @function_12288(i32 9)
  %v0_f378 = load i32, i32* @r4, align 4
  %v2_f380 = inttoptr i32 %v0_f378 to i32*
  %v3_f380 = call i32 @function_121a4(i32 9, i32* %v2_f380)
  %v4_f380 = inttoptr i32 %v3_f380 to i8*
  %v0_f384 = load i32, i32* @r4, align 4
  %v4_f388 = call i32 (i8*, i32, ...) @open(i8* %v4_f380, i32 %v0_f384)
  %v7_f38c = icmp eq i32 %v4_f388, -1
  store i32 %v4_f388, i32* @r8, align 4
  br i1 %v7_f38c, label %dec_label_pc_f7bc, label %dec_label_pc_f398.preheader

dec_label_pc_f398.preheader:                      ; preds = %dec_label_pc_f358
  %v4_f3a454 = call i32 @function_12f94(i32* %v3_f318, i32 512, i32 %v4_f388)
  %v2_f3a856 = icmp eq i32 %v4_f3a454, 0
  br i1 %v2_f3a856, label %dec_label_pc_f538.loopexit, label %dec_label_pc_f3b0.lr.ph

dec_label_pc_f3b0.lr.ph:                          ; preds = %dec_label_pc_f398.preheader
  %v2_f3f8 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_f3b0

dec_label_pc_f3b0:                                ; preds = %dec_label_pc_f3b0.lr.ph, %dec_label_pc_f398.backedge
  %v3_f3b4 = load i8, i8* %stack_var_-581, align 1
  %v4_f3b4 = sext i8 %v3_f3b4 to i32
  %v2_f3b8 = icmp eq i8 %v3_f3b4, 0
  br i1 %v2_f3b8, label %bb125, label %bb

bb:                                               ; preds = %dec_label_pc_f3b0
  %v8_f3bc = icmp eq i8 %v3_f3b4, 58
  br i1 %v8_f3bc, label %.thread6, label %dec_label_pc_f3d0

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_f3e8

bb125:                                            ; preds = %dec_label_pc_f3b0
  br label %dec_label_pc_f3e8

dec_label_pc_f3d0:                                ; preds = %bb
  %v1_f3d8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f3d4

dec_label_pc_f3d4:                                ; preds = %bb126, %dec_label_pc_f3d0
  %v0_f3d4 = phi i32 [ %v1_f3d4, %bb126 ], [ 0, %dec_label_pc_f3d0 ]
  %v1_f3d4 = add i32 %v0_f3d4, 1
  %v2_f3d8 = add i32 %v1_f3d4, %v1_f3d8.pre
  %v3_f3d8 = inttoptr i32 %v2_f3d8 to i8*
  %v4_f3d8 = load i8, i8* %v3_f3d8, align 1
  %v6_f3d8 = zext i8 %v4_f3d8 to i32
  %v2_f3dc = icmp eq i8 %v4_f3d8, 0
  br i1 %v2_f3dc, label %dec_label_pc_f3e8, label %bb126

bb126:                                            ; preds = %dec_label_pc_f3d4
  %v8_f3e0 = icmp eq i8 %v4_f3d8, 58
  br i1 %v8_f3e0, label %dec_label_pc_f3e8, label %dec_label_pc_f3d4

dec_label_pc_f3e8:                                ; preds = %dec_label_pc_f3d4, %bb126, %bb125, %.thread6
  %v1_f414 = phi i32 [ 0, %.thread6 ], [ 0, %bb125 ], [ %v1_f3d4, %bb126 ], [ %v1_f3d4, %dec_label_pc_f3d4 ]
  %v0_f3e8 = phi i32 [ %v4_f3b4, %.thread6 ], [ %v4_f3b4, %bb125 ], [ %v6_f3d8, %bb126 ], [ %v6_f3d8, %dec_label_pc_f3d4 ]
  %v2_f3e8 = icmp eq i32 %v0_f3e8, 0
  br i1 %v2_f3e8, label %dec_label_pc_f398.backedge, label %dec_label_pc_f3f0

dec_label_pc_f398.backedge:                       ; preds = %dec_label_pc_f3e8, %dec_label_pc_f4c0, %dec_label_pc_f50c, %dec_label_pc_f434
  %v0_f3a0 = load i32, i32* @r8, align 4
  %v4_f3a4 = call i32 @function_12f94(i32* %v3_f318, i32 512, i32 %v0_f3a0)
  %v2_f3a8 = icmp eq i32 %v4_f3a4, 0
  br i1 %v2_f3a8, label %dec_label_pc_f538.loopexit, label %dec_label_pc_f3b0

dec_label_pc_f3f0:                                ; preds = %dec_label_pc_f3e8
  %v1_f3f4 = add i32 %v1_f414, 2
  %v2_f3fc = add i32 %v1_f3f4, %v2_f3f8
  %v1_f400 = add i32 %v2_f3fc, -545
  %v2_f400 = inttoptr i32 %v1_f400 to i8*
  %v3_f400 = load i8, i8* %v2_f400, align 1
  %v2_f404 = icmp eq i8 %v3_f400, 0
  br i1 %v2_f404, label %bb128, label %bb127

bb127:                                            ; preds = %dec_label_pc_f3f0
  %v8_f408 = icmp eq i8 %v3_f400, 32
  br i1 %v8_f408, label %.thread10, label %dec_label_pc_f414

.thread10:                                        ; preds = %bb127
  store i32 %v1_f3f4, i32* @r5, align 4
  br label %dec_label_pc_f434

bb128:                                            ; preds = %dec_label_pc_f3f0
  store i32 %v1_f3f4, i32* @r5, align 4
  br label %dec_label_pc_f434

dec_label_pc_f414:                                ; preds = %bb127
  %v0_f414 = load i32, i32* @r6, align 4
  %v2_f414 = add i32 %v0_f414, %v1_f414
  br label %dec_label_pc_f418

dec_label_pc_f418:                                ; preds = %bb129, %dec_label_pc_f414
  %v0_f42413 = phi i32 [ %v1_f424, %bb129 ], [ %v2_f414, %dec_label_pc_f414 ]
  %v1_f418 = add i32 %v0_f42413, 3
  %v2_f418 = inttoptr i32 %v1_f418 to i8*
  %v3_f418 = load i8, i8* %v2_f418, align 1
  %v2_f41c = icmp eq i8 %v3_f418, 0
  br i1 %v2_f41c, label %.thread12, label %bb129

.thread12:                                        ; preds = %dec_label_pc_f418
  %v1_f42414 = add i32 %v0_f42413, 1
  br label %dec_label_pc_f42c

bb129:                                            ; preds = %dec_label_pc_f418
  %v8_f420 = icmp eq i8 %v3_f418, 32
  %v1_f424 = add i32 %v0_f42413, 1
  br i1 %v8_f420, label %dec_label_pc_f42c, label %dec_label_pc_f418

dec_label_pc_f42c:                                ; preds = %bb129, %.thread12
  %v1_f42415 = phi i32 [ %v1_f42414, %.thread12 ], [ %v1_f424, %bb129 ]
  %v2_f42c = sub i32 %v1_f42415, %v0_f414
  %v1_f430 = add i32 %v2_f42c, 2
  store i32 %v1_f430, i32* @r5, align 4
  br label %dec_label_pc_f434

dec_label_pc_f434:                                ; preds = %bb128, %.thread10, %dec_label_pc_f42c
  %v1_f440 = phi i32 [ %v1_f3f4, %.thread10 ], [ %v1_f3f4, %bb128 ], [ %v1_f430, %dec_label_pc_f42c ]
  %v0_f434 = load i32, i32* @r6, align 4
  %v2_f434 = add i32 %v0_f434, %v1_f3f4
  store i32 %v2_f434, i32* @r4, align 4
  %v2_f440 = add i32 %v1_f440, %v2_f3f8
  store i32 0, i32* @r7, align 4
  %v3_f44c = add i32 %v2_f440, -545
  %v4_f44c = inttoptr i32 %v3_f44c to i8*
  store i8 0, i8* %v4_f44c, align 1
  %v1_f450 = inttoptr i32 %v2_f434 to i8*
  %v2_f450 = call i32 @function_12d3c(i8* %v1_f450)
  store i32 %v2_f450, i32* @r1, align 4
  %v0_f45c = load i32, i32* @r4, align 4
  %v3_f460 = inttoptr i32 %v0_f45c to i8*
  %v4_f460 = call i32 @function_13090(i8* %v3_f460, i32 %v2_f450, i32 %v2_f31c)
  %v7_f464 = icmp eq i32 %v4_f460, -1
  br i1 %v7_f464, label %dec_label_pc_f398.backedge, label %dec_label_pc_f480.preheader

dec_label_pc_f480.preheader:                      ; preds = %dec_label_pc_f434
  %v1_f468 = load i32, i32* @r7, align 4
  %v1_f46c = load i32, i32* @r6, align 4
  %v2_f46c = load i32, i32* @r5, align 4
  %v3_f46c = add i32 %v2_f46c, %v1_f46c
  store i32 %v1_f468, i32* @r4, align 4
  %v1_f48046 = add i32 %v3_f46c, 2
  %v2_f48047 = inttoptr i32 %v1_f48046 to i8*
  %v3_f48048 = load i8, i8* %v2_f48047, align 1
  %v2_f48450 = icmp eq i8 %v3_f48048, 0
  %v1_f48852 = add i32 %v2_f46c, 2
  br i1 %v2_f48450, label %dec_label_pc_f4c0, label %dec_label_pc_f490

dec_label_pc_f490:                                ; preds = %dec_label_pc_f480.preheader, %dec_label_pc_f480.backedge
  %v0_f4c082 = phi i32 [ %v0_f4c081, %dec_label_pc_f480.backedge ], [ %v1_f468, %dec_label_pc_f480.preheader ]
  %v0_f4a8.pr = phi i32 [ %v0_f4a8.pr67, %dec_label_pc_f480.backedge ], [ %v1_f468, %dec_label_pc_f480.preheader ]
  %v0_f7cc = phi i32 [ %v0_f7cc70, %dec_label_pc_f480.backedge ], [ %v1_f468, %dec_label_pc_f480.preheader ]
  %v0_f48878 = phi i32 [ %v1_f488, %dec_label_pc_f480.backedge ], [ %v1_f48852, %dec_label_pc_f480.preheader ]
  %v0_f4b8 = phi i32 [ %v0_f480, %dec_label_pc_f480.backedge ], [ %v3_f46c, %dec_label_pc_f480.preheader ]
  %v1_f494.in = phi i8 [ %v3_f480, %dec_label_pc_f480.backedge ], [ %v3_f48048, %dec_label_pc_f480.preheader ]
  %v7_f490 = icmp eq i8 %v1_f494.in, 9
  br i1 %v7_f490, label %.thread23, label %bb130

bb130:                                            ; preds = %dec_label_pc_f490
  %v8_f494 = icmp eq i8 %v1_f494.in, 32
  br i1 %v8_f494, label %.thread23.thread35, label %dec_label_pc_f4a8

.thread23.thread35:                               ; preds = %bb130
  br label %dec_label_pc_f4b4

.thread23:                                        ; preds = %dec_label_pc_f490
  br label %dec_label_pc_f4b4

dec_label_pc_f4a8:                                ; preds = %bb130
  %v7_f4a8 = icmp eq i32 %v0_f4a8.pr, 1
  br i1 %v7_f4a8, label %dec_label_pc_f7cc, label %dec_label_pc_f4b0

dec_label_pc_f4b0:                                ; preds = %dec_label_pc_f7cc, %dec_label_pc_f4a8
  %v0_f4b475 = phi i32 [ %v1_f7cc, %dec_label_pc_f7cc ], [ %v0_f7cc, %dec_label_pc_f4a8 ]
  br label %dec_label_pc_f4b4

dec_label_pc_f4b4:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_f4b0
  %v0_f4b4 = phi i32 [ %v0_f7cc, %.thread23.thread35 ], [ %v0_f7cc, %.thread23 ], [ %v0_f4b475, %dec_label_pc_f4b0 ]
  %v0_f4a8.pr68 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_f4b0 ]
  %v7_f4bc = icmp sgt i32 %v0_f4b4, 6
  br i1 %v7_f4bc, label %dec_label_pc_f4c0, label %dec_label_pc_f480.backedge

dec_label_pc_f4c0:                                ; preds = %dec_label_pc_f480.backedge, %dec_label_pc_f4b4, %dec_label_pc_f480.preheader
  %v1_f510 = phi i32 [ %v1_f48852, %dec_label_pc_f480.preheader ], [ %v1_f488, %dec_label_pc_f480.backedge ], [ %v0_f48878, %dec_label_pc_f4b4 ]
  %v0_f4c0 = phi i32 [ %v1_f468, %dec_label_pc_f480.preheader ], [ %v0_f4c081, %dec_label_pc_f480.backedge ], [ %v0_f4c082, %dec_label_pc_f4b4 ]
  %v2_f4c0 = icmp eq i32 %v0_f4c0, 0
  br i1 %v2_f4c0, label %dec_label_pc_f398.backedge, label %dec_label_pc_f4cc

dec_label_pc_f4cc:                                ; preds = %dec_label_pc_f4c0
  %v2_f4d4 = add i32 %v1_f510, %v2_f3f8
  %v1_f4d8 = add i32 %v2_f4d4, -545
  %v2_f4d8 = inttoptr i32 %v1_f4d8 to i8*
  %v3_f4d8 = load i8, i8* %v2_f4d8, align 1
  %v2_f4dc = icmp eq i8 %v3_f4d8, 0
  br i1 %v2_f4dc, label %dec_label_pc_f50c, label %bb131

bb131:                                            ; preds = %dec_label_pc_f4cc
  %v8_f4e0 = icmp eq i8 %v3_f4d8, 32
  br i1 %v8_f4e0, label %dec_label_pc_f50c, label %dec_label_pc_f4e8

dec_label_pc_f4e8:                                ; preds = %bb131
  %v2_f4e8 = add i32 %v1_f510, %v1_f46c
  br label %dec_label_pc_f4ec

dec_label_pc_f4ec:                                ; preds = %bb132, %dec_label_pc_f4e8
  %v0_f4f828 = phi i32 [ %v1_f4f8, %bb132 ], [ %v1_f510, %dec_label_pc_f4e8 ]
  %v0_f4ec = phi i32 [ %v1_f4ec, %bb132 ], [ %v2_f4e8, %dec_label_pc_f4e8 ]
  %v1_f4ec = add i32 %v0_f4ec, 1
  %v2_f4ec = inttoptr i32 %v1_f4ec to i8*
  %v3_f4ec = load i8, i8* %v2_f4ec, align 1
  %v2_f4f0 = icmp eq i8 %v3_f4ec, 0
  br i1 %v2_f4f0, label %.thread27, label %bb132

.thread27:                                        ; preds = %dec_label_pc_f4ec
  %v1_f4f829 = add i32 %v0_f4f828, 1
  br label %dec_label_pc_f500

bb132:                                            ; preds = %dec_label_pc_f4ec
  %v8_f4f4 = icmp eq i8 %v3_f4ec, 32
  %v1_f4f8 = add i32 %v0_f4f828, 1
  br i1 %v8_f4f4, label %dec_label_pc_f500, label %dec_label_pc_f4ec

dec_label_pc_f500:                                ; preds = %bb132, %.thread27
  %v1_f508 = phi i32 [ %v1_f4f829, %.thread27 ], [ %v1_f4f8, %bb132 ]
  %v2_f508 = add i32 %v1_f508, %v2_f3f8
  br label %dec_label_pc_f50c

dec_label_pc_f50c:                                ; preds = %dec_label_pc_f4cc, %bb131, %dec_label_pc_f500
  %v2_f518 = phi i32 [ %v2_f4d4, %dec_label_pc_f4cc ], [ %v2_f4d4, %bb131 ], [ %v2_f508, %dec_label_pc_f500 ]
  %v2_f510 = add i32 %v1_f510, %v1_f46c
  store i32 %v2_f510, i32* @r4, align 4
  %v3_f518 = add i32 %v2_f518, -545
  %v4_f518 = inttoptr i32 %v3_f518 to i8*
  store i8 0, i8* %v4_f518, align 1
  %v1_f51c = inttoptr i32 %v2_f510 to i8*
  %v2_f51c = call i32 @function_12d3c(i8* %v1_f51c)
  %v8_f524 = icmp sgt i32 %v2_f51c, 15
  br i1 %v8_f524, label %dec_label_pc_f398.backedge, label %dec_label_pc_f528

dec_label_pc_f528:                                ; preds = %dec_label_pc_f50c
  %v0_f52c = load i32, i32* @r4, align 4
  %v2_f530 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f530, i32* @r0, align 4
  %v2_f534 = bitcast i32* %stack_var_-52 to i8*
  %v3_f534 = call i32 @function_12d64(i8* %v2_f534, i32 %v0_f52c)
  br label %dec_label_pc_f538

dec_label_pc_f538.loopexit:                       ; preds = %dec_label_pc_f398.backedge, %dec_label_pc_f398.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre94 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_f538

dec_label_pc_f538:                                ; preds = %dec_label_pc_f538.loopexit, %dec_label_pc_f528
  %v1_f548.pre-phi = phi i8* [ %.pre94, %dec_label_pc_f538.loopexit ], [ %v2_f534, %dec_label_pc_f528 ]
  %v2_f544.pre-phi = phi i32 [ %.pre, %dec_label_pc_f538.loopexit ], [ %v2_f530, %dec_label_pc_f528 ]
  %v0_f538 = load i32, i32* @r8, align 4
  %v1_f53c = call i32 @close(i32 %v0_f538)
  %v2_f548 = call i32 @function_12d3c(i8* %v1_f548.pre-phi)
  store i32 %v2_f548, i32* @r4, align 4
  %v2_f54c = icmp eq i32 %v2_f548, 0
  br i1 %v2_f54c, label %dec_label_pc_f79c, label %dec_label_pc_f554

dec_label_pc_f554:                                ; preds = %dec_label_pc_f538
  %v3_f55c = call i32 @function_121a4(i32 6, i32* null)
  %v4_f55c = inttoptr i32 %v3_f55c to i8*
  %v3_f560 = call %__dirstream* @opendir(i8* %v4_f55c)
  %v5_f560 = ptrtoint %__dirstream* %v3_f560 to i32
  store i32 %v5_f560, i32* @r8, align 4
  %v2_f564 = icmp eq %__dirstream* %v3_f560, null
  br i1 %v2_f564, label %dec_label_pc_f794, label %dec_label_pc_f574.preheader

dec_label_pc_f574.preheader:                      ; preds = %dec_label_pc_f554
  store i32 0, i32* @r5, align 4
  %v3_f57841 = call %dirent* @readdir(%__dirstream* nonnull %v3_f560)
  %v2_f57c44 = icmp eq %dirent* %v3_f57841, null
  br i1 %v2_f57c44, label %dec_label_pc_f788, label %dec_label_pc_f584.preheader.lr.ph

dec_label_pc_f584.preheader.lr.ph:                ; preds = %dec_label_pc_f574.preheader
  %v2_f5b4 = bitcast i32* %stack_var_-4677 to i8*
  %tmp134 = bitcast i32* %stack_var_-8773 to i8*
  br label %dec_label_pc_f584.preheader

dec_label_pc_f574.loopexit:                       ; preds = %dec_label_pc_f58c, %dec_label_pc_f5a0, %dec_label_pc_f608
  %v0_f574 = load i32, i32* @r8, align 4
  %v1_f574 = inttoptr i32 %v0_f574 to %__dirstream*
  %v3_f578 = call %dirent* @readdir(%__dirstream* %v1_f574)
  %v2_f57c = icmp eq %dirent* %v3_f578, null
  br i1 %v2_f57c, label %dec_label_pc_f788, label %dec_label_pc_f584.preheader

dec_label_pc_f584.preheader:                      ; preds = %dec_label_pc_f584.preheader.lr.ph, %dec_label_pc_f574.loopexit
  %v0_f58c90.in = phi %dirent* [ %v3_f57841, %dec_label_pc_f584.preheader.lr.ph ], [ %v3_f578, %dec_label_pc_f574.loopexit ]
  br label %dec_label_pc_f584

dec_label_pc_f584:                                ; preds = %dec_label_pc_f584.preheader, %dec_label_pc_f770
  %v0_f598.in = phi %dirent* [ %v0_f58c90.in, %dec_label_pc_f584.preheader ], [ %v3_f77c, %dec_label_pc_f770 ]
  %v0_f584 = load i32, i32* @r5, align 4
  %v2_f584 = icmp eq i32 %v0_f584, 0
  br i1 %v2_f584, label %dec_label_pc_f58c, label %dec_label_pc_f788

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f584
  %v0_f598 = ptrtoint %dirent* %v0_f598.in to i32
  %v1_f58c = add i32 %v0_f598, 11
  %v2_f58c = inttoptr i32 %v1_f58c to i8*
  %v3_f58c = load i8, i8* %v2_f58c, align 1
  %v4_f58c = zext i8 %v3_f58c to i32
  %v1_f590 = add nsw i32 %v4_f58c, -48
  store i32 %v1_f58c, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_f590, 9
  br i1 %tmp, label %dec_label_pc_f574.loopexit, label %dec_label_pc_f5a0

dec_label_pc_f5a0:                                ; preds = %dec_label_pc_f58c
  %v3_f5a8 = call i32 @function_121a4(i32 6, i32* null)
  store i32 %v2_f2bc, i32* @r0, align 4
  %v3_f5b4 = call i32 @function_12d64(i8* %v2_f5b4, i32 %v3_f5a8)
  %v2_f5bc = call i32 @function_12d3c(i8* %v2_f5b4)
  %v0_f5c0 = load i32, i32* @r7, align 4
  %v0_f5c4 = load i32, i32* @sl, align 4
  %v2_f5c4 = add i32 %v0_f5c4, %v2_f5bc
  store i32 %v2_f5c4, i32* @r0, align 4
  %v2_f5c8 = inttoptr i32 %v2_f5c4 to i8*
  %v3_f5c8 = call i32 @function_12d64(i8* %v2_f5c8, i32 %v0_f5c0)
  %v2_f5d0 = call i32 @function_12d3c(i8* %v2_f5b4)
  %v0_f5d4 = load i32, i32* @r5, align 4
  store i32 %v2_f5d0, i32* %r4.global-to-local, align 4
  %v2_f5e0 = inttoptr i32 %v0_f5d4 to i32*
  %v3_f5e0 = call i32 @function_121a4(i32 7, i32* %v2_f5e0)
  %v0_f5e8 = load i32, i32* @sl, align 4
  %v2_f5e8 = add i32 %v2_f5d0, %v0_f5e8
  store i32 %v2_f5e8, i32* @r0, align 4
  %v2_f5ec = inttoptr i32 %v2_f5e8 to i8*
  %v3_f5ec = call i32 @function_12d64(i8* %v2_f5ec, i32 %v3_f5e0)
  %v7_f5fc = call i32 @readlink(i8* %v2_f5b4, i8* %tmp134, i32 4096)
  %v7_f600 = icmp eq i32 %v7_f5fc, -1
  br i1 %v7_f600, label %dec_label_pc_f574.loopexit, label %dec_label_pc_f608

dec_label_pc_f608:                                ; preds = %dec_label_pc_f5a0
  %v0_f608 = load i32, i32* @r5, align 4
  %v2_f610 = inttoptr i32 %v0_f608 to i32*
  %v3_f610 = call i32 @function_121a4(i32 6, i32* %v2_f610)
  store i32 %v2_f2bc, i32* @r0, align 4
  %v3_f61c = call i32 @function_12d64(i8* %v2_f5b4, i32 %v3_f610)
  %v2_f624 = call i32 @function_12d3c(i8* %v2_f5b4)
  %v0_f628 = load i32, i32* @r7, align 4
  %v0_f62c = load i32, i32* @sl, align 4
  %v2_f62c = add i32 %v0_f62c, %v2_f624
  store i32 %v2_f62c, i32* @r0, align 4
  %v2_f630 = inttoptr i32 %v2_f62c to i8*
  %v3_f630 = call i32 @function_12d64(i8* %v2_f630, i32 %v0_f628)
  %v2_f638 = call i32 @function_12d3c(i8* %v2_f5b4)
  %v0_f63c = load i32, i32* @r5, align 4
  store i32 %v2_f638, i32* %r4.global-to-local, align 4
  %v2_f648 = inttoptr i32 %v0_f63c to i32*
  %v3_f648 = call i32 @function_121a4(i32 8, i32* %v2_f648)
  %v0_f650 = load i32, i32* @sl, align 4
  %v2_f650 = add i32 %v2_f638, %v0_f650
  store i32 %v2_f650, i32* @r0, align 4
  %v2_f654 = inttoptr i32 %v2_f650 to i8*
  %v3_f654 = call i32 @function_12d64(i8* %v2_f654, i32 %v3_f648)
  %v3_f65c = call %__dirstream* @opendir(i8* %v2_f5b4)
  %v5_f65c = ptrtoint %__dirstream* %v3_f65c to i32
  store i32 %v5_f65c, i32* %sb.global-to-local, align 4
  %v2_f660 = icmp eq %__dirstream* %v3_f65c, null
  br i1 %v2_f660, label %dec_label_pc_f574.loopexit, label %dec_label_pc_f668.preheader

dec_label_pc_f668.preheader:                      ; preds = %dec_label_pc_f608
  %v3_f66c140 = call %dirent* @readdir(%__dirstream* nonnull %v3_f65c)
  %v5_f66c141 = ptrtoint %dirent* %v3_f66c140 to i32
  store i32 %v5_f66c141, i32* @r6, align 4
  %v2_f670143 = icmp eq %dirent* %v3_f66c140, null
  br i1 %v2_f670143, label %dec_label_pc_f770, label %dec_label_pc_f680thread-pre-split

dec_label_pc_f668.loopexit:                       ; preds = %dec_label_pc_f688, %dec_label_pc_f720
  %v0_f668.pre = load i32, i32* %sb.global-to-local, align 4
  %v1_f668 = inttoptr i32 %v0_f668.pre to %__dirstream*
  %v3_f66c = call %dirent* @readdir(%__dirstream* %v1_f668)
  %v5_f66c = ptrtoint %dirent* %v3_f66c to i32
  store i32 %v5_f66c, i32* @r6, align 4
  %v2_f670 = icmp eq %dirent* %v3_f66c, null
  br i1 %v2_f670, label %dec_label_pc_f770, label %dec_label_pc_f680thread-pre-split

dec_label_pc_f680thread-pre-split:                ; preds = %dec_label_pc_f668.preheader, %dec_label_pc_f668.loopexit
  %v0_f680.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_f680

dec_label_pc_f680:                                ; preds = %dec_label_pc_f680thread-pre-split, %dec_label_pc_f748
  %v0_f680 = phi i32 [ %v0_f680.pr, %dec_label_pc_f680thread-pre-split ], [ 1, %dec_label_pc_f748 ]
  %v2_f680 = icmp eq i32 %v0_f680, 0
  br i1 %v2_f680, label %dec_label_pc_f688, label %dec_label_pc_f770

dec_label_pc_f688:                                ; preds = %dec_label_pc_f680
  %v2_f688 = call i32 @function_12ddc(i32 %v2_f2d0, i32 4096)
  %v0_f68c = load i32, i32* @r5, align 4
  %v2_f694 = inttoptr i32 %v0_f68c to i32*
  %v3_f694 = call i32 @function_121a4(i32 6, i32* %v2_f694)
  store i32 %v2_f2bc, i32* @r0, align 4
  %v3_f6a0 = call i32 @function_12d64(i8* %v2_f5b4, i32 %v3_f694)
  %v2_f6a8 = call i32 @function_12d3c(i8* %v2_f5b4)
  %v0_f6ac = load i32, i32* @r7, align 4
  %v0_f6b0 = load i32, i32* @sl, align 4
  %v2_f6b0 = add i32 %v0_f6b0, %v2_f6a8
  store i32 %v2_f6b0, i32* @r0, align 4
  %v2_f6b4 = inttoptr i32 %v2_f6b0 to i8*
  %v3_f6b4 = call i32 @function_12d64(i8* %v2_f6b4, i32 %v0_f6ac)
  %v2_f6bc = call i32 @function_12d3c(i8* %v2_f5b4)
  %v0_f6c0 = load i32, i32* @r5, align 4
  store i32 %v2_f6bc, i32* @r4, align 4
  %v2_f6cc = inttoptr i32 %v0_f6c0 to i32*
  %v3_f6cc = call i32 @function_121a4(i32 8, i32* %v2_f6cc)
  %v0_f6d4 = load i32, i32* @sl, align 4
  %v1_f6d4 = load i32, i32* @r4, align 4
  %v2_f6d4 = add i32 %v1_f6d4, %v0_f6d4
  store i32 %v2_f6d4, i32* @r0, align 4
  %v2_f6d8 = inttoptr i32 %v2_f6d4 to i8*
  %v3_f6d8 = call i32 @function_12d64(i8* %v2_f6d8, i32 %v3_f6cc)
  %v2_f6e0 = call i32 @function_12d3c(i8* %v2_f5b4)
  %v0_f6e8 = load i32, i32* @sl, align 4
  %v2_f6e8 = add i32 %v0_f6e8, %v2_f6e0
  store i32 %v2_f6e8, i32* @r0, align 4
  %v2_f6ec = inttoptr i32 %v2_f6e8 to i8*
  %v3_f6ec = call i32 @function_12d64(i8* %v2_f6ec, i32 ptrtoint (i32* @global_var_136a0.102 to i32))
  %v2_f6f4 = call i32 @function_12d3c(i8* %v2_f5b4)
  %v0_f6f8 = load i32, i32* @r6, align 4
  %v1_f6f8 = add i32 %v0_f6f8, 11
  %v0_f6fc = load i32, i32* @sl, align 4
  %v2_f6fc = add i32 %v0_f6fc, %v2_f6f4
  store i32 %v2_f6fc, i32* @r0, align 4
  %v2_f700 = inttoptr i32 %v2_f6fc to i8*
  %v3_f700 = call i32 @function_12d64(i8* %v2_f700, i32 %v1_f6f8)
  %v7_f710 = call i32 @readlink(i8* %v2_f5b4, i8* %tmp134, i32 4096)
  %v7_f714 = icmp eq i32 %v7_f710, -1
  br i1 %v7_f714, label %dec_label_pc_f668.loopexit, label %dec_label_pc_f720

dec_label_pc_f720:                                ; preds = %dec_label_pc_f688
  %v2_f720 = call i32 @function_12d3c(i8* %tmp134)
  store i32 %v2_f720, i32* @r1, align 4
  %v4_f734 = call i32 @function_13090(i8* %tmp134, i32 %v2_f720, i32 %v2_f544.pre-phi)
  %v7_f738 = icmp eq i32 %v4_f734, -1
  br i1 %v7_f738, label %dec_label_pc_f668.loopexit, label %dec_label_pc_f748

dec_label_pc_f748:                                ; preds = %dec_label_pc_f720
  %v0_f740 = load i32, i32* @r7, align 4
  %v2_f748 = inttoptr i32 %v0_f740 to i8*
  %v3_f748 = call i32 @function_12e68(i8* %v2_f748, i32 10)
  %v2_f750 = call i32 @kill(i32 %v3_f748, i32 9)
  %v0_f754 = load i32, i32* %sb.global-to-local, align 4
  %v1_f754 = inttoptr i32 %v0_f754 to %__dirstream*
  %v3_f758 = call %dirent* @readdir(%__dirstream* %v1_f754)
  %v5_f758 = ptrtoint %dirent* %v3_f758 to i32
  store i32 %v5_f758, i32* @r6, align 4
  %v2_f75c = icmp eq %dirent* %v3_f758, null
  store i32 1, i32* @r5, align 4
  br i1 %v2_f75c, label %dec_label_pc_f770, label %dec_label_pc_f680

dec_label_pc_f770:                                ; preds = %dec_label_pc_f668.preheader, %dec_label_pc_f668.loopexit, %dec_label_pc_f748, %dec_label_pc_f680
  %v0_f770 = load i32, i32* %sb.global-to-local, align 4
  %v1_f770 = inttoptr i32 %v0_f770 to %__dirstream*
  %v3_f774 = call i32 @closedir(%__dirstream* %v1_f770)
  %v0_f778 = load i32, i32* @r8, align 4
  %v1_f778 = inttoptr i32 %v0_f778 to %__dirstream*
  %v3_f77c = call %dirent* @readdir(%__dirstream* %v1_f778)
  %v2_f780 = icmp eq %dirent* %v3_f77c, null
  br i1 %v2_f780, label %dec_label_pc_f788, label %dec_label_pc_f584

dec_label_pc_f788:                                ; preds = %dec_label_pc_f574.loopexit, %dec_label_pc_f770, %dec_label_pc_f584, %dec_label_pc_f574.preheader
  %v0_f788 = load i32, i32* @r8, align 4
  %v1_f788 = inttoptr i32 %v0_f788 to %__dirstream*
  %v3_f78c = call i32 @closedir(%__dirstream* %v1_f788)
  %v0_f790 = load i32, i32* @r5, align 4
  %v1_f790 = urem i32 %v0_f790, 256
  br label %dec_label_pc_f794

dec_label_pc_f794:                                ; preds = %dec_label_pc_f554, %dec_label_pc_f788
  %storemerge = phi i32 [ %v1_f790, %dec_label_pc_f788 ], [ %v5_f560, %dec_label_pc_f554 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_f798 = call i32 @sleep(i32 1)
  br label %dec_label_pc_f79c

dec_label_pc_f79c:                                ; preds = %dec_label_pc_f538, %dec_label_pc_f794
  %v1_f7a0 = call i32 @function_121d0(i32 6)
  %v1_f7a8 = call i32 @function_121d0(i32 7)
  %v1_f7b0 = call i32 @function_121d0(i32 8)
  %v1_f7b8 = call i32 @function_121d0(i32 9)
  br label %dec_label_pc_f7bc

dec_label_pc_f7bc:                                ; preds = %dec_label_pc_f358, %dec_label_pc_f79c
  %v0_f7bc = load i32, i32* @r4, align 4
  %v2_f7c8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f7c8, i32* @r4, align 4
  store i32 %v6_f2a8, i32* @r5, align 4
  store i32 %v9_f2a8, i32* @r6, align 4
  store i32 %v12_f2a8, i32* @r7, align 4
  store i32 %v15_f2a8, i32* @r8, align 4
  store i32 %v21_f2a8, i32* @sl, align 4
  ret i32 %v0_f7bc

dec_label_pc_f7cc:                                ; preds = %dec_label_pc_f4a8
  %v1_f7cc = add i32 %v0_f7cc, 1
  %v7_f7d0 = icmp eq i32 %v0_f7cc, 0
  br i1 %v7_f7d0, label %dec_label_pc_f7d8, label %dec_label_pc_f4b0

dec_label_pc_f7d8:                                ; preds = %dec_label_pc_f7cc
  %v1_f7d8 = add i32 %v0_f4b8, 3
  %v2_f7d8 = inttoptr i32 %v1_f7d8 to i8*
  %v3_f7d8 = load i8, i8* %v2_f7d8, align 1
  %v7_f7dc = icmp eq i8 %v3_f7d8, 65
  br i1 %v7_f7dc, label %dec_label_pc_f7ec, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_f7d8
  br label %dec_label_pc_f480.backedge

dec_label_pc_f7ec:                                ; preds = %dec_label_pc_f7d8
  store i32 %v1_f7cc, i32* @r4, align 4
  br label %dec_label_pc_f480.backedge

dec_label_pc_f480.backedge:                       ; preds = %.thread33, %dec_label_pc_f7ec, %dec_label_pc_f4b4
  %v0_f4c081 = phi i32 [ %v1_f7cc, %dec_label_pc_f7ec ], [ %v0_f4c082, %dec_label_pc_f4b4 ], [ %v0_f4c082, %.thread33 ]
  %v0_f7cc70 = phi i32 [ %v1_f7cc, %dec_label_pc_f7ec ], [ %v0_f4b4, %dec_label_pc_f4b4 ], [ %v1_f7cc, %.thread33 ]
  %v0_f4a8.pr67 = phi i32 [ 0, %dec_label_pc_f7ec ], [ %v0_f4a8.pr68, %dec_label_pc_f4b4 ], [ 0, %.thread33 ]
  %v0_f480 = add i32 %v0_f4b8, 1
  %v1_f480 = add i32 %v0_f4b8, 3
  %v2_f480 = inttoptr i32 %v1_f480 to i8*
  %v3_f480 = load i8, i8* %v2_f480, align 1
  %v2_f484 = icmp eq i8 %v3_f480, 0
  %v1_f488 = add i32 %v0_f48878, 1
  br i1 %v2_f484, label %dec_label_pc_f4c0, label %dec_label_pc_f490

dec_label_pc_f7fc:                                ; preds = %dec_label_pc_f2a8
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_f358

; uselistorder directives
  uselistorder i32 %v1_f488, { 1, 0 }
  uselistorder i8 %v3_f480, { 1, 0 }
  uselistorder i32 %v0_f4c081, { 1, 0 }
  uselistorder i32 %v1_f7cc, { 4, 3, 0, 2, 1 }
  uselistorder %dirent* %v3_f77c, { 1, 0 }
  uselistorder i8* %tmp134, { 1, 0, 2, 3 }
  uselistorder i32 %v1_f4ec, { 1, 0 }
  uselistorder i32 %v0_f4f828, { 1, 0 }
  uselistorder i32 %v1_f510, { 0, 3, 1, 2 }
  uselistorder i32 %v0_f4b4, { 1, 0 }
  uselistorder i32 %v0_f48878, { 1, 0 }
  uselistorder i32 %v0_f7cc, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_f4c082, { 1, 2, 0 }
  uselistorder i32 %v1_f48852, { 1, 0 }
  uselistorder i32 %v2_f46c, { 1, 0 }
  uselistorder i32 %v1_f468, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v0_f42413, { 1, 0, 2 }
  uselistorder i32 %v0_f414, { 1, 0 }
  uselistorder i32 %v1_f3f4, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v4_f388, { 1, 2, 0 }
  uselistorder i32* %v3_f318, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-8773, { 1, 0, 2 }
  uselistorder i8* %stack_var_-581, { 2, 0, 1 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32* %sb.global-to-local, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32 47, { 5, 6, 7, 8, 1, 9, 2, 10, 0, 11, 12, 3, 13, 4 }
  uselistorder i32 (i8*, i8*, i32)* @readlink, { 1, 0, 2 }
  uselistorder i32 (i8*, i32, i32)* @function_13090, { 0, 1, 2, 3, 4, 5, 6, 7, 20, 21, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 (i32*, i32, i32)* @function_12f94, { 1, 0 }
  uselistorder label %dec_label_pc_f480.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f7bc, { 1, 0 }
  uselistorder label %dec_label_pc_f79c, { 1, 0 }
  uselistorder label %dec_label_pc_f794, { 1, 0 }
  uselistorder label %dec_label_pc_f788, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f770, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_f680, { 1, 0 }
  uselistorder label %dec_label_pc_f680thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_f668.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_f584, { 1, 0 }
  uselistorder label %dec_label_pc_f584.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f574.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f50c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f4b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f490, { 1, 0 }
  uselistorder label %dec_label_pc_f434, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f398.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_f3e8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f3b0, { 1, 0 }
  uselistorder label %dec_label_pc_f358, { 1, 0 }
}

define i32 @function_f828(i32 %arg1) local_unnamed_addr {
dec_label_pc_f828:
  %fp.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-628 = alloca i32, align 4
  %stack_var_-116 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %v3_f828 = load i32, i32* @r4, align 4
  %v6_f828 = load i32, i32* @r5, align 4
  %v9_f828 = load i32, i32* @r6, align 4
  %v12_f828 = load i32, i32* @r7, align 4
  %v15_f828 = load i32, i32* @r8, align 4
  %v21_f828 = load i32, i32* @sl, align 4
  %v2_f834 = call i32 @time(i32* null)
  store i32 %v2_f834, i32* @r6, align 4
  %v0_f83c = call i32 @fork()
  %v7_f840 = icmp eq i32 %v0_f83c, -1
  %. = zext i1 %v7_f840 to i32
  %tmp57 = icmp slt i32 %v0_f83c, 1
  %storemerge38 = select i1 %tmp57, i32 %., i32 1
  store i32 %storemerge38, i32* @r4, align 4
  %v2_f85c = icmp eq i32 %storemerge38, 0
  store i32 %v0_f83c, i32* @global_var_1c1c4.144, align 4
  br i1 %v2_f85c, label %dec_label_pc_f870, label %dec_label_pc_f868

dec_label_pc_f868:                                ; preds = %dec_label_pc_f8cc, %dec_label_pc_f828
  %v29_f86c = phi i32 [ %v0_f83c, %dec_label_pc_f828 ], [ %v5_f8e0, %dec_label_pc_f8cc ]
  store i32 %v3_f828, i32* @r4, align 4
  store i32 %v6_f828, i32* @r5, align 4
  store i32 %v9_f828, i32* @r6, align 4
  store i32 %v12_f828, i32* @r7, align 4
  store i32 %v15_f828, i32* @r8, align 4
  store i32 %v21_f828, i32* @sl, align 4
  ret i32 %v29_f86c

dec_label_pc_f870:                                ; preds = %dec_label_pc_f828
  store i32 2, i32* @r5, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v1_f884 = call i32 @function_f2a8(i32 20736)
  %v2_f888 = icmp eq i32 %v1_f884, 0
  br i1 %v2_f888, label %dec_label_pc_f890, label %dec_label_pc_fae4

dec_label_pc_f890:                                ; preds = %dec_label_pc_f870, %dec_label_pc_fae4, %dec_label_pc_fb0c
  %v1_f894 = call i32 @sleep(i32 5)
  %v1_f89c = call i32* @malloc(i32 4096)
  %v2_f89c = ptrtoint i32* %v1_f89c to i32
  %tmp60 = bitcast i32* %v1_f89c to i8*
  store i32 %v2_f89c, i32* @global_var_1c220.148, align 4
  store i8 0, i8* %tmp60, align 1
  store i32 0, i32* @global_var_1c1c8.150, align 4
  %v0_f8b8 = load i32, i32* @r6, align 4
  store i32 %v0_f8b8, i32* @r5, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 400, i32* @r6, align 4
  %v2_f8c4 = ptrtoint i32* %stack_var_-116 to i32
  store i32 %v2_f8c4, i32* %fp.global-to-local, align 4
  %v2_f8c8 = ptrtoint i32* %stack_var_-628 to i32
  store i32 %v2_f8c8, i32* @r8, align 4
  %v2_f9bc = bitcast i32* %stack_var_-116 to i8*
  br label %dec_label_pc_f8cc

dec_label_pc_f8cc:                                ; preds = %dec_label_pc_f980, %dec_label_pc_f890
  %v1_f8d0 = call i32 @function_12288(i32 6)
  %v3_f8dc = call i32 @function_121a4(i32 6, i32* null)
  %v4_f8dc = inttoptr i32 %v3_f8dc to i8*
  %v3_f8e0 = call %__dirstream* @opendir(i8* %v4_f8dc)
  %v5_f8e0 = ptrtoint %__dirstream* %v3_f8e0 to i32
  store i32 %v5_f8e0, i32* @sl, align 4
  %v2_f8e4 = icmp eq %__dirstream* %v3_f8e0, null
  br i1 %v2_f8e4, label %dec_label_pc_f868, label %dec_label_pc_f8ec

dec_label_pc_f8ec:                                ; preds = %dec_label_pc_f8cc
  %v1_f8f0 = call i32 @function_121d0(i32 6)
  %v0_f8f420 = load i32, i32* @sl, align 4
  %v1_f8f421 = inttoptr i32 %v0_f8f420 to %__dirstream*
  %v3_f8f822 = call %dirent* @readdir(%__dirstream* %v1_f8f421)
  %v2_f8fc25 = icmp eq %dirent* %v3_f8f822, null
  br i1 %v2_f8fc25, label %dec_label_pc_f980, label %dec_label_pc_f904.preheader

dec_label_pc_f904.preheader:                      ; preds = %dec_label_pc_f8ec, %dec_label_pc_f8f4.backedge
  %v0_f90430.in = phi %dirent* [ %v3_f8f8, %dec_label_pc_f8f4.backedge ], [ %v3_f8f822, %dec_label_pc_f8ec ]
  br label %dec_label_pc_f904

dec_label_pc_f904:                                ; preds = %dec_label_pc_f904.preheader, %dec_label_pc_f968
  %v0_f914.in = phi %dirent* [ %v0_f90430.in, %dec_label_pc_f904.preheader ], [ %v3_f974, %dec_label_pc_f968 ]
  %v0_f914 = ptrtoint %dirent* %v0_f914.in to i32
  %v1_f904 = add i32 %v0_f914, 11
  %v2_f904 = inttoptr i32 %v1_f904 to i8*
  %v3_f904 = load i8, i8* %v2_f904, align 1
  %v4_f904 = zext i8 %v3_f904 to i32
  %v1_f908 = add nsw i32 %v4_f904, -48
  %tmp = icmp ugt i32 %v1_f908, 9
  br i1 %tmp, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_f914

dec_label_pc_f914:                                ; preds = %dec_label_pc_f904
  store i32 %v1_f904, i32* @r4, align 4
  %v3_f920 = call i32 @function_12e68(i8* %v2_f904, i32 10)
  %v0_f924 = load i32, i32* @r6, align 4
  store i32 %v3_f920, i32* @r7, align 4
  %v0_f92c = load i32, i32* %sb.global-to-local, align 4
  %v1_f92c = add i32 %v0_f92c, 1
  store i32 %v1_f92c, i32* %sb.global-to-local, align 4
  %v5_f930 = icmp slt i32 %v0_f924, %v3_f920
  %v2_f990 = call i32 @time(i32* null)
  br i1 %v5_f930, label %dec_label_pc_f98c, label %dec_label_pc_f934

dec_label_pc_f934:                                ; preds = %dec_label_pc_f914
  %v0_f93c = load i32, i32* @r5, align 4
  %v2_f93c = sub i32 %v2_f990, %v0_f93c
  %v7_f944 = icmp slt i32 %v2_f93c, 601
  br i1 %v7_f944, label %dec_label_pc_f94c, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_f934
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_f94c:                                ; preds = %dec_label_pc_f934
  %v0_f94c = load i32, i32* @r7, align 4
  %v7_f950 = icmp slt i32 %v0_f94c, 401
  br i1 %v7_f950, label %dec_label_pc_f8f4.backedge, label %dec_label_pc_f954

dec_label_pc_f954:                                ; preds = %dec_label_pc_f94c
  %v0_f954 = load i32, i32* %sb.global-to-local, align 4
  %v2_f95c = urem i32 %v0_f954, 10
  %v2_f960 = icmp eq i32 %v2_f95c, 0
  br i1 %v2_f960, label %dec_label_pc_f968, label %dec_label_pc_f8f4.backedge

dec_label_pc_f968:                                ; preds = %dec_label_pc_f954
  %v1_f96c = call i32 @sleep(i32 1)
  %v0_f970 = load i32, i32* @sl, align 4
  %v1_f970 = inttoptr i32 %v0_f970 to %__dirstream*
  %v3_f974 = call %dirent* @readdir(%__dirstream* %v1_f970)
  %v2_f978 = icmp eq %dirent* %v3_f974, null
  br i1 %v2_f978, label %dec_label_pc_f980, label %dec_label_pc_f904

dec_label_pc_f980:                                ; preds = %dec_label_pc_f8f4.backedge, %dec_label_pc_f968, %dec_label_pc_f8ec
  %v0_f980 = load i32, i32* @sl, align 4
  %v1_f980 = inttoptr i32 %v0_f980 to %__dirstream*
  %v3_f984 = call i32 @closedir(%__dirstream* %v1_f980)
  br label %dec_label_pc_f8cc

dec_label_pc_f98c:                                ; preds = %dec_label_pc_f914
  store i32 %v2_f990, i32* %stack_var_-632, align 4
  %v1_f99c = call i32 @function_12288(i32 6)
  %v1_f9a4 = call i32 @function_12288(i32 10)
  %v3_f9b0 = call i32 @function_121a4(i32 6, i32* null)
  store i32 %v2_f8c4, i32* @r0, align 4
  %v3_f9bc = call i32 @function_12d64(i8* %v2_f9bc, i32 %v3_f9b0)
  %v0_f9c0 = load i32, i32* %fp.global-to-local, align 4
  %v2_f9c0 = add i32 %v0_f9c0, %v3_f9bc
  store i32 %v2_f9c0, i32* @r5, align 4
  %v0_f9c4 = load i32, i32* @r4, align 4
  store i32 %v2_f9c0, i32* @r0, align 4
  %v2_f9cc = inttoptr i32 %v2_f9c0 to i8*
  %v3_f9cc = call i32 @function_12d64(i8* %v2_f9cc, i32 %v0_f9c4)
  store i32 %v3_f9cc, i32* @r4, align 4
  %v3_f9dc = call i32 @function_121a4(i32 10, i32* null)
  %v0_f9e4 = load i32, i32* @r5, align 4
  %v1_f9e4 = load i32, i32* @r4, align 4
  %v2_f9e4 = add i32 %v1_f9e4, %v0_f9e4
  store i32 %v2_f9e4, i32* @r0, align 4
  %v2_f9e8 = inttoptr i32 %v2_f9e4 to i8*
  %v3_f9e8 = call i32 @function_12d64(i8* %v2_f9e8, i32 %v3_f9dc)
  %v1_f9f0 = call i32 @function_121d0(i32 6)
  %v1_f9f8 = call i32 @function_121d0(i32 10)
  %v4_fa04 = call i32 (i8*, i32, ...) @open(i8* %v2_f9bc, i32 0)
  %v7_fa08 = icmp eq i32 %v4_fa04, -1
  store i32 %v4_fa04, i32* @r6, align 4
  br i1 %v7_fa08, label %dec_label_pc_fab0, label %dec_label_pc_fa14

dec_label_pc_fa14:                                ; preds = %dec_label_pc_f98c
  %v1_fa18 = call i32 @function_12288(i32 62)
  br label %dec_label_pc_fa1c

dec_label_pc_fa1c:                                ; preds = %dec_label_pc_fa84, %.thread6, %dec_label_pc_fa34, %dec_label_pc_fa14
  %v0_fa1c = load i32, i32* @r6, align 4
  %v4_fa28 = call i32 @read(i32 %v0_fa1c, i32* nonnull %stack_var_-628, i32 512)
  store i32 %v4_fa28, i32* @r4, align 4
  %tmp61 = icmp slt i32 %v4_fa28, 1
  br i1 %tmp61, label %dec_label_pc_fad0, label %dec_label_pc_fa34

dec_label_pc_fa34:                                ; preds = %dec_label_pc_fa1c
  %v3_fa3c = call i32 @function_121a4(i32 62, i32* null)
  store i32 %v3_fa3c, i32* @r5, align 4
  %v3_fa4c = call i32 @function_121a4(i32 62, i32* null)
  %v1_fa50 = inttoptr i32 %v3_fa4c to i8*
  %v2_fa50 = call i32 @function_12d3c(i8* %v1_fa50)
  %v0_fa54 = load i32, i32* @r4, align 4
  %v5_fa58 = icmp slt i32 %v0_fa54, %v2_fa50
  br i1 %v5_fa58, label %dec_label_pc_fa1c, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_fa34
  %v1_fa6412 = add i32 %v0_fa54, -1
  store i32 %v1_fa6412, i32* @r4, align 4
  %v2_fa6413 = icmp eq i32 %v0_fa54, 0
  br i1 %v2_fa6413, label %dec_label_pc_fa1c, label %dec_label_pc_fa6c.lr.ph

dec_label_pc_fa6c.lr.ph:                          ; preds = %.thread6
  %v0_fa6c.pre = load i32, i32* @r5, align 4
  %v1_fa70.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_fa6c

dec_label_pc_fa6c:                                ; preds = %dec_label_pc_fa84, %dec_label_pc_fa6c.lr.ph
  %v0_fa64 = phi i32 [ %v1_fa6412, %dec_label_pc_fa6c.lr.ph ], [ %v1_fa64, %dec_label_pc_fa84 ]
  %v0_fa84 = phi i32 [ 0, %dec_label_pc_fa6c.lr.ph ], [ %v1_fa84, %dec_label_pc_fa84 ]
  %v0_fa78 = phi i32 [ 0, %dec_label_pc_fa6c.lr.ph ], [ %v1_fa78., %dec_label_pc_fa84 ]
  %v2_fa6c = add i32 %v0_fa78, %v0_fa6c.pre
  %v3_fa6c = inttoptr i32 %v2_fa6c to i8*
  %v4_fa6c = load i8, i8* %v3_fa6c, align 1
  %v2_fa70 = add i32 %v0_fa84, %v1_fa70.pre
  %v3_fa70 = inttoptr i32 %v2_fa70 to i8*
  %v4_fa70 = load i8, i8* %v3_fa70, align 1
  %v9_fa74 = icmp eq i8 %v4_fa70, %v4_fa6c
  %v1_fa78 = add i32 %v0_fa78, 1
  %v1_fa78. = select i1 %v9_fa74, i32 %v1_fa78, i32 0
  br i1 %v9_fa74, label %dec_label_pc_fa8c, label %dec_label_pc_fa84

dec_label_pc_fa84:                                ; preds = %dec_label_pc_fa8c, %dec_label_pc_fa6c
  %v1_fa84 = add i32 %v0_fa84, 1
  %v1_fa64 = add i32 %v0_fa64, -1
  store i32 %v1_fa64, i32* @r4, align 4
  %v2_fa64 = icmp eq i32 %v0_fa64, 0
  br i1 %v2_fa64, label %dec_label_pc_fa1c, label %dec_label_pc_fa6c

dec_label_pc_fa8c:                                ; preds = %dec_label_pc_fa6c
  %v9_fa8c = icmp eq i32 %v2_fa50, %v1_fa78.
  br i1 %v9_fa8c, label %dec_label_pc_fa94, label %dec_label_pc_fa84

dec_label_pc_fa94:                                ; preds = %dec_label_pc_fa8c
  %v1_fa98 = call i32 @function_121d0(i32 62)
  %v0_fa9c = load i32, i32* @r6, align 4
  %v1_faa0 = call i32 @close(i32 %v0_fa9c)
  %v0_faa4 = load i32, i32* @r7, align 4
  %v2_faac = call i32 @kill(i32 %v0_faa4, i32 9)
  br label %dec_label_pc_fab0

dec_label_pc_fab0:                                ; preds = %dec_label_pc_f98c, %dec_label_pc_fad0, %dec_label_pc_fa94
  %v2_fab8 = call i32 @function_12ddc(i32 %v2_f8c4, i32 64)
  %v1_fac0 = call i32 @sleep(i32 1)
  %v2_fac4 = load i32, i32* %stack_var_-632, align 4
  store i32 %v2_fac4, i32* @r5, align 4
  %v0_fac8 = load i32, i32* @r7, align 4
  store i32 %v0_fac8, i32* @r6, align 4
  br label %dec_label_pc_f8f4.backedge

dec_label_pc_f8f4.backedge:                       ; preds = %dec_label_pc_f954, %dec_label_pc_f94c, %dec_label_pc_f904, %dec_label_pc_fab0, %.thread1
  %v0_f8f4 = load i32, i32* @sl, align 4
  %v1_f8f4 = inttoptr i32 %v0_f8f4 to %__dirstream*
  %v3_f8f8 = call %dirent* @readdir(%__dirstream* %v1_f8f4)
  %v2_f8fc = icmp eq %dirent* %v3_f8f8, null
  br i1 %v2_f8fc, label %dec_label_pc_f980, label %dec_label_pc_f904.preheader

dec_label_pc_fad0:                                ; preds = %dec_label_pc_fa1c
  %v1_fad4 = call i32 @function_121d0(i32 62)
  %v0_fad8 = load i32, i32* @r6, align 4
  %v1_fadc = call i32 @close(i32 %v0_fad8)
  br label %dec_label_pc_fab0

dec_label_pc_fae4:                                ; preds = %dec_label_pc_f870
  %v0_fae4 = load i32, i32* @r4, align 4
  %v0_faec = load i32, i32* @r5, align 4
  %v3_fafc = call i32 @socket(i32 %v0_faec, i32 1, i32 %v0_fae4)
  %v7_fb00 = icmp eq i32 %v3_fafc, -1
  store i32 %v3_fafc, i32* @r4, align 4
  br i1 %v7_fb00, label %dec_label_pc_f890, label %dec_label_pc_fb0c

dec_label_pc_fb0c:                                ; preds = %dec_label_pc_fae4
  %v2_fb0c = ptrtoint i32* %stack_var_-52 to i32
  %v6_fb14 = call i32 @bind(i32 %v2_fb0c, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_fb18 = load i32, i32* @r4, align 4
  %v2_fb20 = call i32 @listen(i32 %v0_fb18, i32 1)
  br label %dec_label_pc_f890

; uselistorder directives
  uselistorder i32 %v3_fafc, { 1, 0 }
  uselistorder %dirent* %v3_f8f8, { 1, 0 }
  uselistorder i32 %v1_fa64, { 1, 0 }
  uselistorder i32 %v1_fa78., { 1, 0 }
  uselistorder i1 %v9_fa74, { 1, 0 }
  uselistorder i32 %v0_fa78, { 1, 0 }
  uselistorder i32 %v0_fa84, { 1, 0 }
  uselistorder i32 %v0_fa64, { 1, 0 }
  uselistorder i32 %v0_fa54, { 1, 0, 2 }
  uselistorder i32 %v2_fa50, { 1, 0 }
  uselistorder i32 %v4_fa04, { 1, 0 }
  uselistorder %dirent* %v3_f974, { 1, 0 }
  uselistorder i32 %v5_f8e0, { 1, 0 }
  uselistorder i32 %storemerge38, { 1, 0 }
  uselistorder i32 %v0_f83c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32 64, { 4, 10, 11, 0, 5, 12, 13, 14, 6, 15, 16, 17, 18, 7, 19, 20, 21, 8, 22, 23, 24, 9, 25, 26, 27, 1, 28, 29, 30, 31, 32, 2, 33, 34, 35, 36, 37, 3, 38, 39 }
  uselistorder i32 512, { 7, 8, 1, 2, 10, 9, 3, 11, 4, 12, 5, 13, 0, 6, 14 }
  uselistorder i32 (%__dirstream*)* @closedir, { 1, 0, 2, 3 }
  uselistorder i32 (i8*, i32)* @function_12e68, { 1, 2, 3, 4, 5, 0 }
  uselistorder %dirent* null, { 4, 3, 1, 5, 6, 7, 0, 8, 2 }
  uselistorder %dirent* (%__dirstream*)* @readdir, { 5, 8, 1, 7, 3, 4, 0, 6, 2, 9 }
  uselistorder %__dirstream* (i8*)* @opendir, { 1, 0, 2, 3 }
  uselistorder i32 4096, { 3, 4, 0, 5, 1, 2 }
  uselistorder label %dec_label_pc_f8f4.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_fab0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f904, { 1, 0 }
  uselistorder label %dec_label_pc_f904.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f890, { 2, 1, 0 }
}

define i32 @function_fb34(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fb34:
  store i32 ptrtoint (i32* @global_var_fb4c.152 to i32), i32* @global_var_1c194.154, align 4
  ret i32 %arg1
}

define i32 @function_fb4c() local_unnamed_addr {
dec_label_pc_fb4c:
  %stack_var_-8 = alloca i32, align 4
  %v3_fb4c = load i32, i32* @r4, align 4
  store i32 %v3_fb4c, i32* %stack_var_-8, align 4
  %v1_fb54 = call i32 @function_12288(i32 2)
  store i32 385990760, i32* @global_var_1c228.157, align 4
  %v3_fb74 = call i32 @function_121a4(i32 2, i32* null)
  %v4_fb74 = inttoptr i32 %v3_fb74 to i8*
  %v2_fb78 = add i32 %v3_fb74, 1
  %v3_fb78 = inttoptr i32 %v2_fb78 to i8*
  %v4_fb78 = load i8, i8* %v3_fb78, align 1
  %v3_fb7c = load i8, i8* %v4_fb74, align 1
  store i8 %v4_fb78, i8* bitcast (i32* @global_var_1c227.158 to i8*), align 4
  store i8 %v3_fb7c, i8* bitcast (i32* @global_var_1c226.159 to i8*), align 4
  %v2_fb94 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_fb94, i32* @r4, align 4
  %v1_fb98 = call i32 @function_121d0(i32 2)
  %v0_fb9c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_fb9c, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_fb4c
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_fb4c, %bb
  ret i32 %v1_fb98

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_fba0(i32 %arg1) local_unnamed_addr {
dec_label_pc_fba0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_fba0 = load i32, i32* @r4, align 4
  %v9_fba0 = load i32, i32* @r6, align 4
  %v12_fba0 = load i32, i32* @r7, align 4
  %v15_fba0 = load i32, i32* @r8, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_fbbc = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1c18c.161 to i32), i32* @r6, align 4
  %v7_fbc4 = icmp eq i32 %v3_fbbc, -1
  store i32 %v3_fbbc, i32* @global_var_1c18c.161, align 4
  br i1 %v7_fbc4, label %dec_label_pc_fc84, label %dec_label_pc_fbd0

dec_label_pc_fbd0:                                ; preds = %dec_label_pc_fba0
  %v0_fbd4 = load i32, i32* %r4.global-to-local, align 4
  %v6_fbe4 = call i32 @setsockopt(i32 %v3_fbbc, i32 %v0_fbd4, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_fbe8 = load i32, i32* @global_var_1c18c.161, align 4
  store i32 %v2_fbe8, i32* %r4.global-to-local, align 4
  %v2_fbf8 = call i32 (i32, i32, ...) @fcntl(i32 %v2_fbe8, i32 3)
  %v2_fc08 = call i32 (i32, i32, ...) @fcntl(i32 %v2_fbe8, i32 4)
  store i32 ptrtoint (i8** @global_var_1c198.163 to i32), i32* @r8, align 4
  %v2_fc10 = load i8, i8* bitcast (i8** @global_var_1c198.163 to i8*), align 4
  %v2_fc14 = icmp eq i8 %v2_fc10, 0
  br i1 %v2_fc14, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_fbd0
  br label %bb

.thread:                                          ; preds = %dec_label_pc_fbd0
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_fc4c = call i32* @__errno_location()
  %v2_fc4c = ptrtoint i32* %v0_fc4c to i32
  %v0_fc50 = load i32, i32* @r5, align 4
  store i32 %v0_fc50, i32* %v0_fc4c, align 4
  %v2_fc54 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_fc54, i32* @r7, align 4
  store i32 %v2_fc4c, i32* %r4.global-to-local, align 4
  %tmp21 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v2_fc60 = load i32, i32* @global_var_1c18c.161, align 4
  %v5_fc68 = call i32 @bind(i32 %v2_fc60, %sockaddr* %tmp21, i32 16)
  %v7_fc6c = icmp eq i32 %v5_fc68, -1
  br i1 %v7_fc6c, label %dec_label_pc_fc8c, label %dec_label_pc_fc74

dec_label_pc_fc74:                                ; preds = %bb
  %v2_fc7c = load i32, i32* @global_var_1c18c.161, align 4
  %v2_fc80 = call i32 @listen(i32 %v2_fc7c, i32 1)
  br label %dec_label_pc_fc84

dec_label_pc_fc84:                                ; preds = %dec_label_pc_fba0, %dec_label_pc_fc98, %dec_label_pc_fc74
  %v20_fc88 = phi i32 [ %v3_fbbc, %dec_label_pc_fba0 ], [ %v1_fce8, %dec_label_pc_fc98 ], [ %v2_fc80, %dec_label_pc_fc74 ]
  store i32 %v3_fba0, i32* @r4, align 4
  store i32 %v9_fba0, i32* @r6, align 4
  store i32 %v12_fba0, i32* @r7, align 4
  store i32 %v15_fba0, i32* @r8, align 4
  ret i32 %v20_fc88

dec_label_pc_fc8c:                                ; preds = %bb
  %v0_fc8c = load i32, i32* %r4.global-to-local, align 4
  %v1_fc8c = inttoptr i32 %v0_fc8c to i32*
  %v2_fc8c = load i32, i32* %v1_fc8c, align 4
  %v7_fc90 = icmp eq i32 %v2_fc8c, 99
  br i1 %v7_fc90, label %dec_label_pc_fcf0, label %dec_label_pc_fc98

dec_label_pc_fc98:                                ; preds = %dec_label_pc_fcf0, %bb22, %dec_label_pc_fc8c
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_fcb0 = load i32, i32* @global_var_1c18c.161, align 4
  %v5_fcc8 = call i32 @connect(i32 %v2_fcb0, %sockaddr* %tmp21, i32 16)
  %v1_fcd0 = call i32 @sleep(i32 5)
  %v2_fcd4 = load i32, i32* @global_var_1c18c.161, align 4
  %v1_fcd8 = call i32 @close(i32 %v2_fcd4)
  %v1_fce4 = call i32 @function_f2a8(i32 50951)
  %v1_fce8 = call i32 @function_fba0(i32 %v1_fce4)
  br label %dec_label_pc_fc84

dec_label_pc_fcf0:                                ; preds = %dec_label_pc_fc8c
  %v2_fcf0 = load i8, i8* bitcast (i8** @global_var_1c198.163 to i8*), align 4
  %v3_fcf0 = zext i8 %v2_fcf0 to i32
  %v1_fcf4 = load i32, i32* @r5, align 4
  %v9_fcf4 = icmp eq i32 %v3_fcf0, %v1_fcf4
  br i1 %v9_fcf4, label %dec_label_pc_fc98, label %bb22

bb22:                                             ; preds = %dec_label_pc_fcf0
  %v2_fcfc = trunc i32 %v1_fcf4 to i8
  store i8 %v2_fcfc, i8* bitcast (i8** @global_var_1c198.163 to i8*), align 4
  br label %dec_label_pc_fc98

; uselistorder directives
  uselistorder i32 %v3_fbbc, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_f2a8, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @bind, { 2, 1, 0, 3 }
  uselistorder i8* bitcast (i8** @global_var_1c198.163 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1c198.163, { 1, 0 }
  uselistorder label %dec_label_pc_fc98, { 1, 0, 2 }
  uselistorder label %dec_label_pc_fc84, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_fd10(i32 %arg1) local_unnamed_addr {
dec_label_pc_fd10:
  %v3_fd10 = load i32, i32* @r4, align 4
  %v6_fd10 = load i32, i32* @r5, align 4
  %v0_fd18 = call i32 @fork()
  %v7_fd1c = icmp eq i32 %v0_fd18, -1
  %. = zext i1 %v7_fd1c to i32
  %tmp11 = icmp slt i32 %v0_fd18, 1
  %storemerge5 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge5, i32* @r5, align 4
  %v2_fd38 = icmp eq i32 %storemerge5, 0
  store i32 %v0_fd18, i32* @global_var_1c1cc.166, align 4
  br i1 %v2_fd38, label %dec_label_pc_fd4c, label %dec_label_pc_fd44

dec_label_pc_fd44:                                ; preds = %dec_label_pc_fd10
  store i32 %v3_fd10, i32* @r4, align 4
  store i32 %v6_fd10, i32* @r5, align 4
  ret i32 %v0_fd18

dec_label_pc_fd4c:                                ; preds = %dec_label_pc_fd10
  %v1_fd58 = call i32 @function_12288(i32 59)
  %v1_fd60 = call i32 @function_12288(i32 60)
  %v0_fd64 = load i32, i32* @r5, align 4
  %v2_fd6c = inttoptr i32 %v0_fd64 to i32*
  %v3_fd6c = call i32 @function_121a4(i32 59, i32* %v2_fd6c)
  %v4_fd6c = inttoptr i32 %v3_fd6c to i8*
  %v4_fd74 = call i32 (i8*, i32, ...) @open(i8* %v4_fd6c, i32 2)
  %v7_fd78 = icmp eq i32 %v4_fd74, -1
  store i32 %v4_fd74, i32* @r4, align 4
  br i1 %v7_fd78, label %dec_label_pc_fdc0, label %dec_label_pc_fd84

dec_label_pc_fd84:                                ; preds = %dec_label_pc_fdc0, %dec_label_pc_fd4c
  %v0_fd90 = phi i32 [ %v4_fdd0, %dec_label_pc_fdc0 ], [ %v4_fd74, %dec_label_pc_fd4c ]
  %v2_fd98 = call i32 (i32, i32, ...) @ioctl(i32 %v0_fd90, i32 -2147199228)
  br label %dec_label_pc_fd9c

dec_label_pc_fd9c:                                ; preds = %dec_label_pc_fd9c, %dec_label_pc_fd84
  %v0_fda8 = load i32, i32* @r4, align 4
  %v2_fdb0 = call i32 (i32, i32, ...) @ioctl(i32 %v0_fda8, i32 -2147199227)
  %v1_fdb8 = call i32 @sleep(i32 10)
  br label %dec_label_pc_fd9c

dec_label_pc_fdc0:                                ; preds = %dec_label_pc_fd4c
  %v0_fdc0 = load i32, i32* @r5, align 4
  %v2_fdc8 = inttoptr i32 %v0_fdc0 to i32*
  %v3_fdc8 = call i32 @function_121a4(i32 60, i32* %v2_fdc8)
  %v4_fdc8 = inttoptr i32 %v3_fdc8 to i8*
  %v4_fdd0 = call i32 (i8*, i32, ...) @open(i8* %v4_fdc8, i32 2)
  %v3_fdd4 = icmp eq i32 %v4_fdd0, -1
  store i32 %v4_fdd0, i32* @r4, align 4
  br i1 %v3_fdd4, label %dec_label_pc_fde0, label %dec_label_pc_fd84

dec_label_pc_fde0:                                ; preds = %dec_label_pc_fdc0
  %v1_fde4 = call i32 @function_121d0(i32 59)
  %v1_fdec = call i32 @function_121d0(i32 60)
  %v0_fdf0 = load i32, i32* @r5, align 4
  call void @exit(i32 %v0_fdf0)
  unreachable

; uselistorder directives
  uselistorder i32 %v4_fdd0, { 1, 2, 0 }
  uselistorder i32 %v4_fd74, { 1, 2, 0 }
  uselistorder i32 %storemerge5, { 1, 0 }
  uselistorder i32 %v0_fd18, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, ...)* @ioctl, { 1, 0, 2 }
  uselistorder i32 (i8*, i32, ...)* @open, { 0, 3, 2, 1, 4, 5 }
  uselistorder i32 60, { 1, 2, 3, 0, 4 }
  uselistorder i32 59, { 0, 1, 2, 4, 3 }
}

define i32 @function_fdfc(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_fdfc:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_fdfc = load i32, i32* @r4, align 4
  store i32 %v3_fdfc, i32* %stack_var_-36, align 4
  %v6_fdfc = load i32, i32* @r5, align 4
  %v9_fdfc = load i32, i32* @r6, align 4
  %v15_fdfc = load i32, i32* @r8, align 4
  %v2_fe08 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_fe08, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %tmp43 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v3_fe20 = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %tmp43)
  %v4_fe2c = call i32 @sigaddset(%_TYPEDEF_sigset_t* %tmp43, i32 2)
  %v0_fe30 = load i32, i32* @r5, align 4
  %v1_fe30 = inttoptr i32 %v0_fe30 to %_TYPEDEF_sigset_t*
  store i32 %v0_fe30, i32* %r2.global-to-local, align 4
  %v7_fe3c = call i32 @sigprocmask(i32 %v0_fe30, %_TYPEDEF_sigset_t* %tmp43, %_TYPEDEF_sigset_t* %v1_fe30)
  %v4_fe48 = call void (i32)* @signal(i32 17, void (i32)* inttoptr (i32 1 to void (i32)*))
  %v4_fe54 = call void (i32)* @signal(i32 5, void (i32)* bitcast (void (i32)** @global_var_fb34.168 to void (i32)*))
  %v0_fe58 = call i32 @function_12ff4()
  store i32 %v0_fe58, i32* @global_var_1c21c.133, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1c227.158 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (%sockaddr** @global_var_1c224.156 to i8*), align 4
  store i32 1494907824, i32* @global_var_1c228.157, align 4
  %v0_fe80 = load i32, i32* @r5, align 4
  %v1_fe80 = trunc i32 %v0_fe80 to i8
  store i8 %v1_fe80, i8* bitcast (i32* @global_var_1c226.159 to i8*), align 4
  store i8 %v1_fe80, i8* bitcast (i32* @global_var_1c225.172 to i8*), align 4
  %v6_fe88 = call i32 @function_12340(i32 %v0_fe58, i32 ptrtoint (%sockaddr** @global_var_1c224.156 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_fb4c.152 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_fb4c.152 to i32), i32* @global_var_1c194.154, align 4
  %v2_fe9c = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_fe9c, i32* @sb, align 4
  %v1_fea0 = call i32 @function_fba0(i32 %v6_fe88)
  %v1_fea4 = call i32 @function_1060c(i32 %v1_fea0)
  %v2_feb0 = call i32 @function_12ddc(i32 %v2_fe9c, i32 32)
  %v0_feb4 = load i32, i32* @r6, align 4
  %v7_feb4 = icmp eq i32 %v0_feb4, 2
  br i1 %v7_feb4, label %dec_label_pc_ffe0, label %dec_label_pc_febc

dec_label_pc_febc:                                ; preds = %dec_label_pc_ffe0, %dec_label_pc_fdfc, %dec_label_pc_fff0
  %v0_febc = call i32 @function_105b4()
  store i32 %v0_febc, i32* %r6.global-to-local, align 4
  %v0_fec4 = load i32, i32* @r8, align 4
  %v1_fec4 = inttoptr i32 %v0_fec4 to i32*
  %v2_fec4 = load i32, i32* %v1_fec4, align 4
  %v1_fec8 = inttoptr i32 %v2_fec4 to i8*
  %v2_fec8 = call i32 @function_12d3c(i8* %v1_fec8)
  store i32 %v2_fec8, i32* %r4.global-to-local, align 4
  %v0_fed0 = load i32, i32* @r8, align 4
  %v1_fed0 = inttoptr i32 %v0_fed0 to i32*
  %v2_fed0 = load i32, i32* %v1_fed0, align 4
  %v1_fed4 = inttoptr i32 %v2_fed0 to i8*
  %v2_fed4 = call i32 @function_12d3c(i8* %v1_fed4)
  %v1_fed8 = sub i32 20, %v2_fec8
  store i32 %v2_fed4, i32* @r5, align 4
  %v0_fee0 = load i32, i32* %r6.global-to-local, align 4
  %v2_fee4 = urem i32 %v0_fee0, %v1_fed8
  %v2_feec = add i32 %v2_fee4, %v2_fed4
  store i32 %v2_feec, i32* @r4, align 4
  %v2_fef0 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_fef0, i32* @r6, align 4
  %v2_fefc = call i32 @function_10668(i32 %v2_fef0, i32 %v2_feec)
  %v2_ff00 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_ff00, i32* %r2.global-to-local, align 4
  %v1_ff04 = load i32, i32* @r4, align 4
  %v2_ff04 = add i32 %v1_ff04, %v2_ff00
  store i32 %v2_ff04, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_ff10 = load i32, i32* @r8, align 4
  %v1_ff10 = inttoptr i32 %v0_ff10 to i32*
  %v2_ff10 = load i32, i32* %v1_ff10, align 4
  store i32 %v2_ff10, i32* @r0, align 4
  %v3_ff14 = add i32 %v2_ff04, -72
  %v4_ff14 = inttoptr i32 %v3_ff14 to i8*
  store i8 0, i8* %v4_ff14, align 1
  %v2_ff18 = inttoptr i32 %v2_ff10 to i8*
  %v3_ff18 = call i32 @function_12d64(i8* %v2_ff18, i32 %v2_fef0)
  %v2_ff24 = call i32 @function_12ddc(i32 %v2_fef0, i32 32)
  %v0_ff28 = call i32 @function_105b4()
  store i32 %v0_ff28, i32* @r7, align 4
  %v0_ff30 = load i32, i32* @r8, align 4
  %v1_ff30 = inttoptr i32 %v0_ff30 to i32*
  %v2_ff30 = load i32, i32* %v1_ff30, align 4
  %v1_ff34 = inttoptr i32 %v2_ff30 to i8*
  %v2_ff34 = call i32 @function_12d3c(i8* %v1_ff34)
  store i32 %v2_ff34, i32* %r4.global-to-local, align 4
  %v0_ff3c = load i32, i32* @r8, align 4
  %v1_ff3c = inttoptr i32 %v0_ff3c to i32*
  %v2_ff3c = load i32, i32* %v1_ff3c, align 4
  %v1_ff40 = inttoptr i32 %v2_ff3c to i8*
  %v2_ff40 = call i32 @function_12d3c(i8* %v1_ff40)
  %v1_ff44 = sub i32 20, %v2_ff34
  store i32 %v2_ff40, i32* @r5, align 4
  %v0_ff4c = load i32, i32* @r7, align 4
  %v2_ff50 = urem i32 %v0_ff4c, %v1_ff44
  %v2_ff54 = add i32 %v2_ff50, %v2_ff40
  store i32 %v2_ff54, i32* @r4, align 4
  %v2_ff60 = call i32 @function_10668(i32 %v2_fef0, i32 %v2_ff54)
  %v1_ff68 = load i32, i32* @r4, align 4
  %v2_ff68 = add i32 %v1_ff68, %v2_ff00
  store i32 %v2_ff68, i32* %r3.global-to-local, align 4
  %v0_ff6c = load i32, i32* @sl, align 4
  %v1_ff6c = trunc i32 %v0_ff6c to i8
  %v3_ff6c = add i32 %v2_ff68, -72
  %v4_ff6c = inttoptr i32 %v3_ff6c to i8*
  store i8 %v1_ff6c, i8* %v4_ff6c, align 1
  %v5_ff78 = call i32 @prctl(i32 15, i32 %v2_fef0, i32 %v2_ff68, i32 %v2_ff68, i32 ptrtoint (i32* @0 to i32))
  %v1_ff80 = call i32 @function_12288(i32 5)
  %v3_ff90 = call i32 @function_121a4(i32 5, i32* nonnull %stack_var_-44)
  %v3_ff94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ff94, i32* %r2.global-to-local, align 4
  %v3_ffa0 = inttoptr i32 %v3_ff90 to i32*
  %v4_ffa0 = call i32 @write(i32 1, i32* %v3_ffa0, i32 %v3_ff94)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_ffb0 = call i32 @write(i32 ptrtoint (i32* @global_var_136dc.176 to i32), i32* inttoptr (i32 1 to i32*), i32 1)
  %v1_ffb8 = call i32 @function_121d0(i32 5)
  %v1_ffbc = call i32 @function_92b8(i32 %v1_ffb8)
  %v1_ffc0 = call i32 @function_f828(i32 %v1_ffbc)
  %v1_ffc4 = call i32 @function_fd10(i32 %v1_ffc0)
  %v0_ffc8 = call i32 @fork()
  %v1_ffcc = load i32, i32* @sl, align 4
  %v7_ffd0 = icmp sgt i32 %v0_ffc8, %v1_ffcc
  br i1 %v7_ffd0, label %dec_label_pc_ffd4, label %dec_label_pc_10018

dec_label_pc_ffd4:                                ; preds = %dec_label_pc_febc
  %v2_ffdc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ffdc, i32* %r4.global-to-local, align 4
  store i32 %v6_fdfc, i32* %r5.global-to-local, align 4
  store i32 %v9_fdfc, i32* %r6.global-to-local, align 4
  store i32 %v15_fdfc, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_ffe0:                                ; preds = %dec_label_pc_fdfc
  %v0_ffe0 = load i32, i32* @r8, align 4
  %v1_ffe0 = add i32 %v0_ffe0, 4
  %v2_ffe0 = inttoptr i32 %v1_ffe0 to i32*
  %v3_ffe0 = load i32, i32* %v2_ffe0, align 4
  %v1_ffe4 = inttoptr i32 %v3_ffe0 to i8*
  %v2_ffe4 = call i32 @function_12d3c(i8* %v1_ffe4)
  %v8_ffec = icmp sgt i32 %v2_ffe4, 31
  br i1 %v8_ffec, label %dec_label_pc_febc, label %dec_label_pc_fff0

dec_label_pc_fff0:                                ; preds = %dec_label_pc_ffe0
  %v0_fff0 = load i32, i32* @r8, align 4
  %v1_fff0 = add i32 %v0_fff0, 4
  %v2_fff0 = inttoptr i32 %v1_fff0 to i32*
  %v3_fff0 = load i32, i32* %v2_fff0, align 4
  store i32 %v2_fe9c, i32* @r0, align 4
  %v2_fff8 = bitcast i32* %stack_var_-140 to i8*
  %v3_fff8 = call i32 @function_12d64(i8* %v2_fff8, i32 %v3_fff0)
  %v0_fffc = load i32, i32* @r8, align 4
  %v1_fffc = add i32 %v0_fffc, 4
  %v2_fffc = inttoptr i32 %v1_fffc to i32*
  %v3_fffc = load i32, i32* %v2_fffc, align 4
  store i32 %v3_fffc, i32* %r4.global-to-local, align 4
  %v1_10004 = inttoptr i32 %v3_fffc to i8*
  %v2_10004 = call i32 @function_12d3c(i8* %v1_10004)
  %v2_10010 = call i32 @function_12ddc(i32 %v3_fffc, i32 %v2_10004)
  br label %dec_label_pc_febc

dec_label_pc_10018:                               ; preds = %dec_label_pc_febc
  %v1_10018 = call i32 @setsid()
  %v0_10020 = load i32, i32* @sl, align 4
  %v1_10024 = call i32 @close(i32 %v0_10020)
  %v1_1002c = call i32 @close(i32 1)
  %v1_10034 = call i32 @close(i32 2)
  %v1_10038 = call i32 @function_92b8(i32 %v1_10034)
  %v1_1003c = call i32 @function_f828(i32 %v1_10038)
  %v1_10040 = call i32 @function_fd10(i32 %v1_1003c)
  %v1_10044 = call i32 @function_109d0(i32 %v1_10040)
  store i32 ptrtoint (i32* @global_var_1c190.178 to i32), i32* @fp, align 4
  %v2_10054 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_10054, i32* @r6, align 4
  %v2_10058 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_10058, i32* @r7, align 4
  %tmp44 = bitcast i32* %stack_var_-396 to %_TYPEDEF_fd_set*
  %tmp45 = bitcast i32* %stack_var_-524 to %_TYPEDEF_fd_set*
  %tmp46 = bitcast i32* %stack_var_-60 to %timeval*
  %v7_10384 = bitcast i8** %stack_var_-38 to i32*
  %v2_104e0 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_10394 = ptrtoint i32* %stack_var_-48 to i32
  %v1_10438 = bitcast i32* %stack_var_-140 to i8*
  %tmp48 = bitcast i32* %stack_var_-76 to %sockaddr*
  br label %dec_label_pc_1005c

dec_label_pc_1005c:                               ; preds = %dec_label_pc_1005c.backedge, %dec_label_pc_10018
  %v2_1006452 = phi i32 [ %v2_1006452.pre, %dec_label_pc_1005c.backedge ], [ %v2_10054, %dec_label_pc_10018 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_1006454 = inttoptr i32 %v2_1006452 to i32*
  store i32 0, i32* %v4_1006454, align 4
  %v0_1006855 = load i32, i32* %r3.global-to-local, align 4
  %v1_1006856 = add i32 %v0_1006855, 4
  store i32 %v1_1006856, i32* %r3.global-to-local, align 4
  %v7_1006c57 = icmp eq i32 %v1_1006856, 128
  br i1 %v7_1006c57, label %dec_label_pc_10074, label %dec_label_pc_10064.dec_label_pc_10064_crit_edge

dec_label_pc_10064.dec_label_pc_10064_crit_edge:  ; preds = %dec_label_pc_1005c, %dec_label_pc_10064.dec_label_pc_10064_crit_edge
  %v1_1006858 = phi i32 [ %v1_10068, %dec_label_pc_10064.dec_label_pc_10064_crit_edge ], [ %v1_1006856, %dec_label_pc_1005c ]
  %v0_10064.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_10064 = load i32, i32* @r6, align 4
  %v3_10064 = add i32 %v2_10064, %v1_1006858
  %v4_10064 = inttoptr i32 %v3_10064 to i32*
  store i32 %v0_10064.pre, i32* %v4_10064, align 4
  %v0_10068 = load i32, i32* %r3.global-to-local, align 4
  %v1_10068 = add i32 %v0_10068, 4
  store i32 %v1_10068, i32* %r3.global-to-local, align 4
  %v7_1006c = icmp eq i32 %v1_10068, 128
  br i1 %v7_1006c, label %dec_label_pc_10074, label %dec_label_pc_10064.dec_label_pc_10064_crit_edge

dec_label_pc_10074:                               ; preds = %dec_label_pc_10064.dec_label_pc_10064_crit_edge, %dec_label_pc_1005c
  %v0_10074 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10074, i32* %r3.global-to-local, align 4
  store i32 %v0_10074, i32* @r4, align 4
  %v2_1007c59 = load i32, i32* @r7, align 4
  %v3_1007c60 = add i32 %v2_1007c59, %v0_10074
  %v4_1007c61 = inttoptr i32 %v3_1007c60 to i32*
  store i32 %v0_10074, i32* %v4_1007c61, align 4
  %v0_1008062 = load i32, i32* %r3.global-to-local, align 4
  %v1_1008063 = add i32 %v0_1008062, 4
  store i32 %v1_1008063, i32* %r3.global-to-local, align 4
  %v7_1008464 = icmp eq i32 %v1_1008063, 128
  br i1 %v7_1008464, label %dec_label_pc_1008c, label %dec_label_pc_1007c.dec_label_pc_1007c_crit_edge

dec_label_pc_1007c.dec_label_pc_1007c_crit_edge:  ; preds = %dec_label_pc_10074, %dec_label_pc_1007c.dec_label_pc_1007c_crit_edge
  %v1_1008065 = phi i32 [ %v1_10080, %dec_label_pc_1007c.dec_label_pc_1007c_crit_edge ], [ %v1_1008063, %dec_label_pc_10074 ]
  %v0_1007c.pre = load i32, i32* @r4, align 4
  %v2_1007c = load i32, i32* @r7, align 4
  %v3_1007c = add i32 %v2_1007c, %v1_1008065
  %v4_1007c = inttoptr i32 %v3_1007c to i32*
  store i32 %v0_1007c.pre, i32* %v4_1007c, align 4
  %v0_10080 = load i32, i32* %r3.global-to-local, align 4
  %v1_10080 = add i32 %v0_10080, 4
  store i32 %v1_10080, i32* %r3.global-to-local, align 4
  %v7_10084 = icmp eq i32 %v1_10080, 128
  br i1 %v7_10084, label %dec_label_pc_1008c, label %dec_label_pc_1007c.dec_label_pc_1007c_crit_edge

dec_label_pc_1008c:                               ; preds = %dec_label_pc_1007c.dec_label_pc_1007c_crit_edge, %dec_label_pc_10074
  store i32 ptrtoint (i32* @global_var_1c18c.161 to i32), i32* %r2.global-to-local, align 4
  %v2_10090 = load i32, i32* @global_var_1c18c.161, align 4
  %v7_10094 = icmp eq i32 %v2_10090, -1
  br i1 %v7_10094, label %dec_label_pc_100c0, label %dec_label_pc_1009c

dec_label_pc_1009c:                               ; preds = %dec_label_pc_1008c
  %v3_1009c = udiv i32 %v2_10090, 32
  %v3_100a0 = mul nuw nsw i32 %v3_1009c, 4
  %v2_100a8 = add i32 %v3_100a0, %v2_ff00
  store i32 %v2_100a8, i32* %r3.global-to-local, align 4
  %v1_100ac = add i32 %v2_100a8, -360
  %v2_100ac = inttoptr i32 %v1_100ac to i32*
  %v3_100ac = load i32, i32* %v2_100ac, align 4
  %v1_100b0 = urem i32 %v2_10090, 32
  %v7_100b8 = shl i32 1, %v1_100b0
  %v8_100b8 = or i32 %v3_100ac, %v7_100b8
  store i32 %v8_100b8, i32* %r2.global-to-local, align 4
  store i32 %v8_100b8, i32* %v2_100ac, align 4
  br label %dec_label_pc_100c0

dec_label_pc_100c0:                               ; preds = %dec_label_pc_1008c, %dec_label_pc_1009c
  %v2_100c0 = load i32, i32* @global_var_1c190.178, align 4
  store i32 %v2_100c0, i32* %r3.global-to-local, align 4
  %v7_100c4 = icmp eq i32 %v2_100c0, -1
  store i32 ptrtoint (i32* @global_var_1c190.178 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_100c4, label %dec_label_pc_102fc, label %dec_label_pc_100d0

dec_label_pc_100d0:                               ; preds = %dec_label_pc_100c0, %dec_label_pc_102fc, %.thread
  store i32 ptrtoint (i8** @global_var_1c1d0.181 to i32), i32* %r2.global-to-local, align 4
  %v2_100d4 = load i8, i8* bitcast (i8** @global_var_1c1d0.181 to i8*), align 4
  %v2_100d8 = icmp eq i8 %v2_100d4, 0
  %v2_10218 = load i32, i32* @global_var_1c190.178, align 4
  %v3_1021c = udiv i32 %v2_10218, 32
  store i32 %v3_1021c, i32* %r3.global-to-local, align 4
  br i1 %v2_100d8, label %dec_label_pc_10218, label %dec_label_pc_100e0

dec_label_pc_100e0:                               ; preds = %dec_label_pc_100d0
  %v3_100e8 = mul nuw nsw i32 %v3_1021c, 4
  %v2_100f0 = add i32 %v3_100e8, %v2_ff00
  store i32 %v2_100f0, i32* %r3.global-to-local, align 4
  %v1_100f4 = add i32 %v2_100f0, -488
  %v2_100f4 = inttoptr i32 %v1_100f4 to i32*
  %v3_100f4 = load i32, i32* %v2_100f4, align 4
  %v1_100f8 = urem i32 %v2_10218, 32
  %v7_10100 = shl i32 1, %v1_100f8
  %v8_10100 = or i32 %v3_100f4, %v7_10100
  store i32 %v8_10100, i32* %r2.global-to-local, align 4
  store i32 %v8_10100, i32* %v2_100f4, align 4
  br label %dec_label_pc_10108

dec_label_pc_10108:                               ; preds = %dec_label_pc_10218, %dec_label_pc_100e0
  %v2_1010c = load i32, i32* @global_var_1c18c.161, align 4
  %v2_10110 = load i32, i32* @global_var_1c190.178, align 4
  store i32 %v2_10110, i32* %r3.global-to-local, align 4
  %v5_1011c = icmp slt i32 %v2_1010c, %v2_10110
  br i1 %v5_1011c, label %bb, label %bb49

bb:                                               ; preds = %dec_label_pc_10108
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_10108, %bb
  %v0_10134 = phi i32 [ %v2_1010c, %dec_label_pc_10108 ], [ %v2_10110, %bb ]
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10134 = add i32 %v0_10134, 1
  store i32 %v2_10058, i32* %r2.global-to-local, align 4
  %v13_10148 = call i32 @select(i32 %v1_10134, %_TYPEDEF_fd_set* %tmp44, %_TYPEDEF_fd_set* %tmp45, %_TYPEDEF_fd_set* null, %timeval* %tmp46)
  %v8_1014c = icmp eq i32 %v13_10148, -1
  store i32 %v13_10148, i32* %r3.global-to-local, align 4
  br i1 %v8_1014c, label %dec_label_pc_1005c.backedge, label %dec_label_pc_10158

dec_label_pc_10158:                               ; preds = %bb49
  %v14_10148 = trunc i32 %v13_10148 to i8
  %v3_10158 = icmp eq i8 %v14_10148, 0
  br i1 %v3_10158, label %dec_label_pc_10160, label %dec_label_pc_10180

dec_label_pc_10160:                               ; preds = %dec_label_pc_10158
  %v0_10160 = load i32, i32* @sl, align 4
  %v6_1016c = inttoptr i32 %v13_10148 to i8*
  store i8* %v6_1016c, i8** %stack_var_-38, align 4
  %v2_10170 = srem i32 %v0_10160, 6
  %v2_10174 = icmp eq i32 %v2_10170, 0
  %v1_10178 = add i32 %v0_10160, 1
  store i32 %v1_10178, i32* @sl, align 4
  br i1 %v2_10174, label %dec_label_pc_1036c, label %dec_label_pc_10180

dec_label_pc_10180:                               ; preds = %dec_label_pc_10158, %dec_label_pc_10160, %dec_label_pc_1036c
  store i32 ptrtoint (i32* @global_var_1c18c.161 to i32), i32* %r2.global-to-local, align 4
  %v2_10184 = load i32, i32* @global_var_1c18c.161, align 4
  %v7_10188 = icmp eq i32 %v2_10184, -1
  br i1 %v7_10188, label %dec_label_pc_101b4, label %dec_label_pc_10190

dec_label_pc_10190:                               ; preds = %dec_label_pc_10180
  %v3_10190 = udiv i32 %v2_10184, 32
  %v3_10194 = mul nuw nsw i32 %v3_10190, 4
  store i32 %v2_ff00, i32* @ip, align 4
  %v2_1019c = add i32 %v3_10194, %v2_ff00
  store i32 %v2_1019c, i32* %r3.global-to-local, align 4
  %v1_101a0 = add i32 %v2_1019c, -360
  %v2_101a0 = inttoptr i32 %v1_101a0 to i32*
  %v3_101a0 = load i32, i32* %v2_101a0, align 4
  %v1_101a4 = urem i32 %v2_10184, 32
  %v6_101a8 = lshr i32 %v3_101a0, %v1_101a4
  store i32 %v6_101a8, i32* %r2.global-to-local, align 4
  %v1_101ac = urem i32 %v6_101a8, 2
  %v2_101ac = icmp eq i32 %v1_101ac, 0
  store i1 %v2_101ac, i1* @cpsr_z, align 1
  br i1 %v2_101ac, label %dec_label_pc_101b4, label %dec_label_pc_103e8

dec_label_pc_101b4:                               ; preds = %dec_label_pc_10190, %dec_label_pc_10180
  store i32 ptrtoint (i8** @global_var_1c1d0.181 to i32), i32* %r3.global-to-local, align 4
  %v2_101b8 = load i8, i8* bitcast (i8** @global_var_1c1d0.181 to i8*), align 4
  %v3_101b8 = zext i8 %v2_101b8 to i32
  store i32 %v3_101b8, i32* %r4.global-to-local, align 4
  %v2_101bc = icmp eq i8 %v2_101b8, 0
  %v2_10244 = load i32, i32* @global_var_1c190.178, align 4
  br i1 %v2_101bc, label %dec_label_pc_10244, label %dec_label_pc_101c4

dec_label_pc_101c4:                               ; preds = %dec_label_pc_101b4
  %v3_101c8 = udiv i32 %v2_10244, 32
  %v3_101d0 = mul nuw nsw i32 %v3_101c8, 4
  %v2_101d4 = add i32 %v3_101d0, %v2_ff00
  store i32 %v2_101d4, i32* %r3.global-to-local, align 4
  %v1_101d8 = add i32 %v2_101d4, -488
  %v2_101d8 = inttoptr i32 %v1_101d8 to i32*
  %v3_101d8 = load i32, i32* %v2_101d8, align 4
  %v1_101dc = urem i32 %v2_10244, 32
  %v6_101e0 = lshr i32 %v3_101d8, %v1_101dc
  store i32 %v6_101e0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c1d0.181 to i32), i32* %r3.global-to-local, align 4
  %v1_101ec = urem i32 %v6_101e0, 2
  %v2_101ec = icmp eq i32 %v1_101ec, 0
  store i8 0, i8* bitcast (i8** @global_var_1c1d0.181 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1c190.178 to i32), i32* @r5, align 4
  br i1 %v2_101ec, label %dec_label_pc_101fc, label %dec_label_pc_1038c

dec_label_pc_101fc:                               ; preds = %dec_label_pc_101c4
  %v1_10200 = icmp ne i32 %v2_10244, -1
  call void @__pseudo_cond_branch(i1 %v1_10200, i32 ptrtoint (i32* @global_var_8d50.104 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_10208 = load i32, i32* @r5, align 4
  %v2_10208 = inttoptr i32 %v1_10208 to i32*
  store i32 -1, i32* %v2_10208, align 4
  %v1_10210 = call i32 @sleep(i32 1)
  br label %dec_label_pc_1005c.backedge

dec_label_pc_10218:                               ; preds = %dec_label_pc_100d0
  store i32 %v2_ff00, i32* %r2.global-to-local, align 4
  %v3_10224 = mul nuw nsw i32 %v3_1021c, 4
  %v2_10228 = add i32 %v3_10224, %v2_ff00
  store i32 %v2_10228, i32* %r3.global-to-local, align 4
  %v1_1022c = add i32 %v2_10228, -360
  %v2_1022c = inttoptr i32 %v1_1022c to i32*
  %v3_1022c = load i32, i32* %v2_1022c, align 4
  %v1_10230 = urem i32 %v2_10218, 32
  %v7_10238 = shl i32 1, %v1_10230
  %v8_10238 = or i32 %v3_1022c, %v7_10238
  store i32 %v8_10238, i32* %r2.global-to-local, align 4
  store i32 %v8_10238, i32* %v2_1022c, align 4
  br label %dec_label_pc_10108

dec_label_pc_10244:                               ; preds = %dec_label_pc_101b4
  %v7_10248 = icmp eq i32 %v2_10244, -1
  store i32 ptrtoint (i32* @global_var_1c190.178 to i32), i32* @r5, align 4
  br i1 %v7_10248, label %dec_label_pc_1005c.backedge, label %dec_label_pc_10254

dec_label_pc_10254:                               ; preds = %dec_label_pc_10244
  %v3_10254 = udiv i32 %v2_10244, 32
  %v3_10258 = mul nuw nsw i32 %v3_10254, 4
  %v2_10260 = add i32 %v3_10258, %v2_ff00
  store i32 %v2_10260, i32* %r3.global-to-local, align 4
  %v1_10264 = add i32 %v2_10260, -360
  %v2_10264 = inttoptr i32 %v1_10264 to i32*
  %v3_10264 = load i32, i32* %v2_10264, align 4
  %v1_10268 = urem i32 %v2_10244, 32
  %v6_1026c = lshr i32 %v3_10264, %v1_10268
  store i32 %v6_1026c, i32* %r2.global-to-local, align 4
  %v1_10270 = urem i32 %v6_1026c, 2
  %v2_10270 = icmp eq i32 %v1_10270, 0
  br i1 %v2_10270, label %dec_label_pc_1005c.backedge, label %dec_label_pc_10278

dec_label_pc_10278:                               ; preds = %dec_label_pc_10254
  %v6_10278 = inttoptr i32 %v3_101b8 to i8*
  store i8* %v6_10278, i8** %stack_var_-38, align 4
  %v0_10280 = call i32* @__errno_location()
  %v1_10280 = ptrtoint i32* %v0_10280 to i32
  %v0_10284 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10284, i32* %v0_10280, align 4
  store i32 %v1_10280, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_10298 = load i32, i32* @global_var_1c190.178, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_102a4 = call i32 @recv(i32 %v2_10298, i32* %v7_10384, i32 2, i32 16386)
  %v7_102a8 = icmp eq i32 %v5_102a4, -1
  br i1 %v7_102a8, label %dec_label_pc_10498, label %dec_label_pc_102b0

dec_label_pc_102b0:                               ; preds = %dec_label_pc_10278
  %v2_102b0 = icmp eq i32 %v5_102a4, 0
  br i1 %v2_102b0, label %dec_label_pc_104a8, label %dec_label_pc_102b8

dec_label_pc_102b8:                               ; preds = %dec_label_pc_102b0
  %v3_102b8 = load i8*, i8** %stack_var_-38, align 4
  %v4_102b8 = ptrtoint i8* %v3_102b8 to i32
  store i32 %v3_101b8, i32* %r3.global-to-local, align 4
  %v4_102c0 = mul nuw nsw i32 %v3_101b8, 256
  %v5_102c0 = or i32 %v4_102b8, %v4_102c0
  store i32 %v5_102c0, i32* %r2.global-to-local, align 4
  %v7_102c0 = icmp eq i32 %v5_102c0, 0
  br i1 %v7_102c0, label %dec_label_pc_10568, label %dec_label_pc_102c8

dec_label_pc_102c8:                               ; preds = %dec_label_pc_102b8
  %v1_102c8 = mul i32 %v4_102b8, 256
  %v3_102cc = and i32 %v1_102c8, 65280
  %v4_102d0 = udiv i32 %v5_102c0, 256
  %v5_102d0 = or i32 %v3_102cc, %v4_102d0
  %v6_102d0 = trunc i32 %v4_102d0 to i8
  store i32 %v5_102d0, i32* %r2.global-to-local, align 4
  %v4_102d4 = udiv i32 %v5_102c0, 65536
  store i32 %v4_102d4, i32* %r3.global-to-local, align 4
  %v3_102d8 = icmp slt i8 %v6_102d0, 0
  %v7_102e0 = inttoptr i32 %v4_102d0 to i8*
  store i8* %v7_102e0, i8** %stack_var_-38, align 4
  br i1 %v3_102d8, label %dec_label_pc_102e8, label %dec_label_pc_104d8

dec_label_pc_102e8:                               ; preds = %dec_label_pc_102c8
  %v2_102e8 = load i32, i32* @global_var_1c190.178, align 4
  %v1_102ec = call i32 @close(i32 %v2_102e8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_102f4 = load i32, i32* @r5, align 4
  %v2_102f4 = inttoptr i32 %v1_102f4 to i32*
  store i32 -1, i32* %v2_102f4, align 4
  br label %dec_label_pc_1005c.backedge

dec_label_pc_1005c.backedge:                      ; preds = %dec_label_pc_102e8, %dec_label_pc_103c0, %dec_label_pc_10484, %dec_label_pc_104a8, %dec_label_pc_1055c, %dec_label_pc_10568, %dec_label_pc_101fc, %dec_label_pc_10434, %bb51, %dec_label_pc_10508, %bb49, %dec_label_pc_10244, %dec_label_pc_10254, %dec_label_pc_10498
  %v2_1006452.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1005c

dec_label_pc_102fc:                               ; preds = %dec_label_pc_100c0
  %v0_10304 = load i32, i32* @r4, align 4
  store i32 %v0_10304, i32* %r2.global-to-local, align 4
  %v3_10308 = call i32 @socket(i32 2, i32 1, i32 %v0_10304)
  %v7_1030c = icmp eq i32 %v3_10308, -1
  store i32 %v3_10308, i32* %r5.global-to-local, align 4
  %v1_10314 = load i32, i32* %r8.global-to-local, align 4
  %v2_10314 = inttoptr i32 %v1_10314 to i32*
  store i32 %v3_10308, i32* %v2_10314, align 4
  br i1 %v7_1030c, label %dec_label_pc_100d0, label %dec_label_pc_1031c

dec_label_pc_1031c:                               ; preds = %dec_label_pc_102fc
  %v0_1031c = load i32, i32* @r4, align 4
  store i32 %v0_1031c, i32* %r2.global-to-local, align 4
  %v2_10324 = call i32 (i32, i32, ...) @fcntl(i32 %v3_10308, i32 3)
  %v1_1032c = or i32 %v2_10324, 2048
  store i32 %v1_1032c, i32* %r2.global-to-local, align 4
  %v0_10330 = load i32, i32* %r5.global-to-local, align 4
  %v2_10334 = call i32 (i32, i32, ...) @fcntl(i32 %v0_10330, i32 4)
  store i32 ptrtoint (i32* @global_var_1c194.154 to i32), i32* %r2.global-to-local, align 4
  %v2_1033c = load i32, i32* @global_var_1c194.154, align 4
  store i32 %v2_1033c, i32* %r3.global-to-local, align 4
  %v2_10340 = icmp eq i32 %v2_1033c, 0
  br i1 %v2_10340, label %.thread, label %bb50

bb50:                                             ; preds = %dec_label_pc_1031c
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_12ff4.182 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1031c, %bb50
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_10354 = load i32, i32* @global_var_1c190.178, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1c1d0.181 to i8*), align 4
  %v5_10364 = call i32 @connect(i32 %v2_10354, %sockaddr* bitcast (%sockaddr** @global_var_1c224.156 to %sockaddr*), i32 16)
  br label %dec_label_pc_100d0

dec_label_pc_1036c:                               ; preds = %dec_label_pc_10160
  %v2_10374 = load i32, i32* @global_var_1c190.178, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v8_10384 = call i32 @send(i32 %v2_10374, i32* nonnull %v7_10384, i32 2, i32 16384)
  br label %dec_label_pc_10180

dec_label_pc_1038c:                               ; preds = %dec_label_pc_101c4
  store i32 4, i32* @r4, align 4
  store i32 %v2_10394, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v8_103b0 = call i32 @getsockopt(i32 %v2_10244, i32 1, i32 4, i32* nonnull %stack_var_-48, i32* nonnull %stack_var_-52)
  %v3_103b4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_103b4, i32* %r3.global-to-local, align 4
  %v2_103b8 = icmp eq i32 %v3_103b4, 0
  br i1 %v2_103b8, label %dec_label_pc_10434, label %dec_label_pc_103c0

dec_label_pc_103c0:                               ; preds = %dec_label_pc_1038c
  %v2_103c0 = load i32, i32* @global_var_1c190.178, align 4
  %v1_103c4 = call i32 @close(i32 %v2_103c0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_103cc = load i32, i32* @r5, align 4
  %v2_103cc = inttoptr i32 %v1_103cc to i32*
  store i32 -1, i32* %v2_103cc, align 4
  %v0_103d0 = call i32 @function_105b4()
  %v2_103d8 = urem i32 %v0_103d0, 10
  %v1_103dc = add nuw nsw i32 %v2_103d8, 1
  %v1_103e0 = call i32 @sleep(i32 %v1_103dc)
  br label %dec_label_pc_1005c.backedge

dec_label_pc_103e8:                               ; preds = %dec_label_pc_10190
  %v1_10414 = sub i32 0, %v1_10018
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_10394, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v8_10400 = call i32 @accept(i32 %v2_10184, %sockaddr* %tmp48, i32* nonnull %stack_var_-48)
  %v1_10404 = call i32 @function_10734(i32 %v8_10400)
  %v1_10408 = call i32 @function_f294(i32 %v1_10404)
  store i32 %v1_10018, i32* %r2.global-to-local, align 4
  %v2_10418 = call i32 @kill(i32 %v1_10414, i32 9)
  store i32 ptrtoint (i32* @global_var_1c1cc.166 to i32), i32* %r3.global-to-local, align 4
  %v2_10420 = load i32, i32* @global_var_1c1cc.166, align 4
  %v2_10424 = icmp eq i32 %v2_10420, 0
  br i1 %v2_10424, label %dec_label_pc_1042c, label %dec_label_pc_104cc

dec_label_pc_1042c:                               ; preds = %dec_label_pc_103e8, %dec_label_pc_104cc
  call void @exit(i32 0)
  unreachable

dec_label_pc_10434:                               ; preds = %dec_label_pc_1038c
  %v2_10438 = call i32 @function_12d3c(i8* %v1_10438)
  %sext = mul i32 %v2_10438, 16777216
  %v1_1043c = sdiv i32 %sext, 16777216
  %v7_1043c = inttoptr i32 %v1_1043c to i8*
  store i8* %v7_1043c, i8** %stack_var_-38, align 4
  %v0_10440 = call i32 @function_12ff4()
  store i32 %v0_10440, i32* @global_var_1c21c.133, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10454 = load i32, i32* @r4, align 4
  store i32 %v0_10454, i32* %r2.global-to-local, align 4
  %v0_10458 = load i32, i32* @r5, align 4
  %v1_10458 = inttoptr i32 %v0_10458 to i32*
  %v2_10458 = load i32, i32* %v1_10458, align 4
  %v5_1045c = call i32 @send(i32 %v2_10458, i32* nonnull @global_var_136e0.185, i32 %v0_10454, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_10468 = load i32, i32* @r5, align 4
  %v1_10468 = inttoptr i32 %v0_10468 to i32*
  %v2_10468 = load i32, i32* %v1_10468, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10474 = call i32 @send(i32 %v2_10468, i32* %v7_10384, i32 1, i32 16384)
  %v3_10478 = load i8*, i8** %stack_var_-38, align 4
  %v4_10478 = ptrtoint i8* %v3_10478 to i32
  store i32 %v4_10478, i32* %r2.global-to-local, align 4
  %v3_1047c = icmp eq i8* %v3_10478, null
  br i1 %v3_1047c, label %dec_label_pc_1005c.backedge, label %dec_label_pc_10484

dec_label_pc_10484:                               ; preds = %dec_label_pc_10434
  %v0_10484 = load i32, i32* @r5, align 4
  %v1_10484 = inttoptr i32 %v0_10484 to i32*
  %v2_10484 = load i32, i32* %v1_10484, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_10490 = call i32 @send(i32 %v2_10484, i32* nonnull %stack_var_-140, i32 %v4_10478, i32 16384)
  br label %dec_label_pc_1005c.backedge

dec_label_pc_10498:                               ; preds = %dec_label_pc_104d8, %dec_label_pc_10278
  %v0_10498 = load i32, i32* @r8, align 4
  %v1_10498 = inttoptr i32 %v0_10498 to i32*
  %v2_10498 = load i32, i32* %v1_10498, align 4
  store i32 %v2_10498, i32* %r3.global-to-local, align 4
  %v7_1049c = icmp eq i32 %v2_10498, 4
  br i1 %v7_1049c, label %dec_label_pc_1005c.backedge, label %bb51

bb51:                                             ; preds = %dec_label_pc_10498
  %v8_104a0 = icmp eq i32 %v2_10498, 11
  br i1 %v8_104a0, label %dec_label_pc_1005c.backedge, label %dec_label_pc_104a8

dec_label_pc_104a8:                               ; preds = %dec_label_pc_10500, %bb51, %dec_label_pc_102b0
  %v2_104a8 = load i32, i32* @global_var_1c190.178, align 4
  %v1_104b0 = icmp ne i32 %v2_104a8, -1
  call void @__pseudo_cond_branch(i1 %v1_104b0, i32 ptrtoint (i32* @global_var_8d50.104 to i32))
  store i32 ptrtoint (i32* @global_var_1c190.178 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1c190.178, align 4
  %v1_104c4 = call i32 @sleep(i32 1)
  br label %dec_label_pc_1005c.backedge

dec_label_pc_104cc:                               ; preds = %dec_label_pc_103e8
  %v2_104d0 = call i32 @kill(i32 %v2_10420, i32 9)
  br label %dec_label_pc_1042c

dec_label_pc_104d8:                               ; preds = %dec_label_pc_102c8
  %v0_104d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_104d8 = load i32, i32* @r8, align 4
  %v2_104d8 = inttoptr i32 %v1_104d8 to i32*
  store i32 %v0_104d8, i32* %v2_104d8, align 4
  store i32 %v2_104e0, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_104ec = load i32, i32* @global_var_1c190.178, align 4
  %v9_104f4 = call i32 @recv(i32 %v2_104ec, i32* nonnull %stack_var_-1548, i32 %v4_102d0, i32 16386)
  %v7_104f8 = icmp eq i32 %v9_104f4, -1
  br i1 %v7_104f8, label %dec_label_pc_10498, label %dec_label_pc_10500

dec_label_pc_10500:                               ; preds = %dec_label_pc_104d8
  %v2_10500 = icmp eq i32 %v9_104f4, 0
  br i1 %v2_10500, label %dec_label_pc_104a8, label %dec_label_pc_10508

dec_label_pc_10508:                               ; preds = %dec_label_pc_10500
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_10518 = load i32, i32* @global_var_1c190.178, align 4
  %v5_1051c = call i32 @recv(i32 %v2_10518, i32* nonnull %v7_10384, i32 2, i32 16384)
  %v3_10520 = load i8*, i8** %stack_var_-38, align 4
  %v4_10520 = ptrtoint i8* %v3_10520 to i32
  %v4_10524 = urem i32 %v4_102d4, 256
  %v4_10528 = mul i32 %v4_10520, 256
  %v5_10528 = or i32 %v4_10528, %v4_10524
  store i32 %v5_10528, i32* %r2.global-to-local, align 4
  %v3_10530 = sdiv i32 %v4_10528, 256
  store i32 %v3_10530, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_1053c = load i32, i32* @global_var_1c190.178, align 4
  %v6_10544 = inttoptr i32 %v5_10528 to i8*
  store i8* %v6_10544, i8** %stack_var_-38, align 4
  %v8_10548 = call i32 @recv(i32 %v2_1053c, i32* nonnull %stack_var_-1548, i32 %v5_10528, i32 16384)
  %v3_1054c = load i8*, i8** %stack_var_-38, align 4
  %v4_1054c = ptrtoint i8* %v3_1054c to i32
  store i32 %v4_1054c, i32* @r2, align 4
  %v4_10550 = urem i32 %v3_10530, 256
  store i32 %v4_10550, i32* %r3.global-to-local, align 4
  %v6_10554 = mul nuw nsw i32 %v4_10550, 256
  %v7_10554 = or i32 %v4_1054c, %v6_10554
  %v9_10554 = icmp eq i32 %v7_10554, 0
  br i1 %v9_10554, label %dec_label_pc_1005c.backedge, label %dec_label_pc_1055c

dec_label_pc_1055c:                               ; preds = %dec_label_pc_10508
  %v7_10560 = call i32 @function_8fdc(i32* nonnull %stack_var_-1548, i32 %v7_10554, i32 %v4_1054c, i32 %v4_10550)
  br label %dec_label_pc_1005c.backedge

dec_label_pc_10568:                               ; preds = %dec_label_pc_102b8
  %v2_1056c = load i32, i32* @global_var_1c190.178, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_1057c = call i32 @recv(i32 %v2_1056c, i32* nonnull %v7_10384, i32 2, i32 16384)
  br label %dec_label_pc_1005c.backedge

; uselistorder directives
  uselistorder i32 %v4_10550, { 2, 0, 1 }
  uselistorder i32 %v4_1054c, { 1, 0, 2 }
  uselistorder i32 %v3_10530, { 1, 0 }
  uselistorder i32 %v5_10528, { 1, 0, 2 }
  uselistorder i32 %v4_10528, { 1, 0 }
  uselistorder i32 %v9_104f4, { 1, 0 }
  uselistorder i32 %v3_10308, { 3, 2, 1, 0 }
  uselistorder i32 %v4_102d0, { 2, 3, 0, 1 }
  uselistorder i32 %v5_102a4, { 1, 0 }
  uselistorder i32 %v2_10244, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_10184, { 3, 2, 1, 0 }
  uselistorder i32 %v13_10148, { 2, 3, 1, 0 }
  uselistorder i32 %v2_10090, { 2, 1, 0 }
  uselistorder i32 %v1_10080, { 1, 2, 0 }
  uselistorder i32 %v1_10068, { 1, 2, 0 }
  uselistorder i32* %v7_10384, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_ff68, { 1, 0, 2, 3 }
  uselistorder i32 %v2_ff00, { 0, 1, 9, 2, 3, 8, 4, 5, 6, 7, 10 }
  uselistorder i32 %v2_fef0, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_fe30, { 0, 2, 1 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0, 1, 3, 4, 5, 7, 6, 8, 9, 10, 11, 2, 12, 13, 14, 26, 27, 18, 19, 15, 24, 25, 16, 17, 20, 21, 22, 23 }
  uselistorder i32* %r2.global-to-local, { 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* @r2, { 1, 0, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* @global_var_1c1cc.166, { 1, 2, 0 }
  uselistorder i8 1, { 1, 2, 3, 0, 4 }
  uselistorder i32 16386, { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 (i32)* @sleep, { 6, 5, 4, 1, 8, 2, 9, 3, 7, 0, 10 }
  uselistorder i8* bitcast (i8** @global_var_1c1d0.181 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1c1d0.181, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1c1d0.181 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1c18c.161, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1c190.178, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i32)* @function_fd10, { 1, 0 }
  uselistorder i32 (i32)* @function_f828, { 1, 0 }
  uselistorder i32 (i32)* @function_92b8, { 1, 0 }
  uselistorder i32 (i32, i32*, i32)* @write, { 1, 0, 2 }
  uselistorder i32 (i8*, i32)* @function_12d64, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 26, 18, 19, 20, 21, 22, 23, 24, 25, 52, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56 }
  uselistorder i32 (i32, i32)* @function_10668, { 10, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32)* @function_fba0, { 1, 0 }
  uselistorder i32* @global_var_1c194.154, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_fb4c.152 to i32), { 0, 2, 1 }
  uselistorder label %dec_label_pc_1042c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_1005c.backedge, { 5, 4, 9, 3, 8, 13, 2, 7, 1, 0, 12, 11, 6, 10 }
  uselistorder label %dec_label_pc_10180, { 2, 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_100d0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_100c0, { 1, 0 }
  uselistorder label %dec_label_pc_1007c.dec_label_pc_1007c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10064.dec_label_pc_10064_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_febc, { 2, 0, 1 }
}

define i32 @function_105b4() local_unnamed_addr {
dec_label_pc_105b4:
  %v2_105c0 = load i32, i32* @global_var_1c1d4.187, align 4
  %v2_105c4 = load i32, i32* @global_var_1c1e0.189, align 4
  store i32 ptrtoint (i32* @global_var_1c1d8.191 to i32), i32* @lr, align 4
  %v4_105d0 = mul i32 %v2_105c0, 2048
  %v5_105d0 = xor i32 %v4_105d0, %v2_105c0
  %v4_105d4 = udiv i32 %v2_105c4, 524288
  %v5_105d4 = xor i32 %v4_105d4, %v2_105c4
  %v2_105d8 = load i32, i32* @global_var_1c1d8.191, align 4
  %v2_105dc = load i32, i32* @global_var_1c1dc.193, align 4
  %v2_105e0 = xor i32 %v5_105d4, %v5_105d0
  %v4_105e4 = udiv i32 %v5_105d0, 256
  %v5_105e4 = xor i32 %v2_105e0, %v4_105e4
  store i32 %v2_105d8, i32* @global_var_1c1d4.187, align 4
  store i32 %v2_105dc, i32* @global_var_1c1d8.191, align 4
  store i32 %v2_105c4, i32* @global_var_1c1dc.193, align 4
  store i32 %v5_105e4, i32* @global_var_1c1e0.189, align 4
  ret i32 %v5_105e4

; uselistorder directives
  uselistorder i32 %v2_105c4, { 2, 1, 0 }
  uselistorder i32 %v2_105c0, { 1, 0 }
}

define i32 @function_1060c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1060c:
  %stack_var_-12 = alloca i32, align 4
  %v3_1060c = load i32, i32* @r4, align 4
  store i32 %v3_1060c, i32* %stack_var_-12, align 4
  %v2_10614 = call i32 @time(i32* null)
  store i32 %v2_10614, i32* @global_var_1c1d4.187, align 4
  %v2_10620 = call i32 @getpid()
  %v0_10628 = call i32 @getppid()
  %v2_10630 = xor i32 %v2_10620, %v0_10628
  store i32 %v2_10630, i32* @global_var_1c1d8.191, align 4
  %v1_10638 = call i32 @clock()
  %v2_1063c = load i32, i32* @global_var_1c1d8.191, align 4
  %v2_10648 = xor i32 %v2_1063c, %v1_10638
  store i32 %v2_10648, i32* @global_var_1c1e0.189, align 4
  store i32 %v1_10638, i32* @global_var_1c1dc.193, align 4
  %v2_10654 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10654, i32* @r4, align 4
  ret i32 %v1_10638

; uselistorder directives
  uselistorder i32 %v1_10638, { 1, 2, 0 }
}

define i32 @function_10668(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10668:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10668 = load i32, i32* @r4, align 4
  store i32 %v3_10668, i32* %stack_var_-36, align 4
  %v6_10668 = load i32, i32* @r5, align 4
  %v9_10668 = load i32, i32* @r6, align 4
  %v12_10668 = load i32, i32* @r7, align 4
  %v28_10668 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_1067c = call i32 @function_12288(i32 61)
  %v3_10688 = call i32 @function_121a4(i32 61, i32* null)
  %v1_1068c = inttoptr i32 %v3_10688 to i8*
  %tmp12 = bitcast i32* %stack_var_-68 to i8*
  %v6_10694 = call i8* @strcpy(i8* %tmp12, i8* %v1_1068c)
  %v2_10698 = icmp eq i32 %arg2, 0
  br i1 %v2_10698, label %dec_label_pc_10714, label %dec_label_pc_106a0

dec_label_pc_106a0:                               ; preds = %dec_label_pc_10668
  store i32 ptrtoint (i32* @global_var_1c1d4.187 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1d8.191 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1dc.193 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1c1e0.189 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_106b4

dec_label_pc_106b4:                               ; preds = %dec_label_pc_106b4.dec_label_pc_106b4_crit_edge, %dec_label_pc_106a0
  %v1_106d8 = phi i32 [ %v1_106d8.pre, %dec_label_pc_106b4.dec_label_pc_106b4_crit_edge ], [ ptrtoint (i32* @global_var_1c1d4.187 to i32), %dec_label_pc_106a0 ]
  %v2_106b4 = load i32, i32* @global_var_1c1e0.189, align 4
  store i32 %v2_106b4, i32* %r2.global-to-local, align 4
  %v2_106b8 = load i32, i32* @global_var_1c1d4.187, align 4
  %v4_106bc = udiv i32 %v2_106b4, 524288
  %v5_106bc = xor i32 %v4_106bc, %v2_106b4
  %v4_106c0 = mul i32 %v2_106b8, 2048
  %v5_106c0 = xor i32 %v4_106c0, %v2_106b8
  %v2_106c4 = xor i32 %v5_106bc, %v5_106c0
  %v2_106c8 = load i32, i32* @global_var_1c1d8.191, align 4
  %v2_106cc = load i32, i32* @global_var_1c1dc.193, align 4
  store i32 %v2_106cc, i32* %ip.global-to-local, align 4
  %v4_106d0 = udiv i32 %v5_106c0, 256
  %v5_106d0 = xor i32 %v2_106c4, %v4_106d0
  store i32 %v5_106d0, i32* @r4, align 4
  %v2_106d8 = inttoptr i32 %v1_106d8 to i32*
  store i32 %v2_106c8, i32* %v2_106d8, align 4
  %v0_106dc = load i32, i32* %ip.global-to-local, align 4
  %v1_106dc = load i32, i32* %r8.global-to-local, align 4
  %v2_106dc = inttoptr i32 %v1_106dc to i32*
  store i32 %v0_106dc, i32* %v2_106dc, align 4
  %v0_106e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_106e0 = load i32, i32* @r7, align 4
  %v2_106e0 = inttoptr i32 %v1_106e0 to i32*
  store i32 %v0_106e0, i32* %v2_106e0, align 4
  %v0_106e4 = load i32, i32* @r4, align 4
  %v1_106e4 = load i32, i32* @r6, align 4
  %v2_106e4 = inttoptr i32 %v1_106e4 to i32*
  store i32 %v0_106e4, i32* %v2_106e4, align 4
  %v2_106e8 = call i32 @function_12d3c(i8* %tmp12)
  %v0_106f0 = load i32, i32* @r4, align 4
  %v2_106f4 = urem i32 %v0_106f0, %v2_106e8
  %v2_106fc = add i32 %v2_106f4, %v28_10668
  %v1_10700 = add i32 %v2_106fc, -32
  %v2_10700 = inttoptr i32 %v1_10700 to i8*
  %v3_10700 = load i8, i8* %v2_10700, align 1
  %v2_10704 = load i32, i32* @r5, align 4
  %v3_10704 = load i32, i32* %fp.global-to-local, align 4
  %v4_10704 = add i32 %v3_10704, %v2_10704
  %v5_10704 = inttoptr i32 %v4_10704 to i8*
  store i8 %v3_10700, i8* %v5_10704, align 1
  %v0_10708 = load i32, i32* @r5, align 4
  %v1_10708 = add i32 %v0_10708, 1
  store i32 %v1_10708, i32* @r5, align 4
  %v1_1070c = load i32, i32* %sb.global-to-local, align 4
  %v9_1070c = icmp eq i32 %v1_10708, %v1_1070c
  br i1 %v9_1070c, label %dec_label_pc_10714, label %dec_label_pc_106b4.dec_label_pc_106b4_crit_edge

dec_label_pc_106b4.dec_label_pc_106b4_crit_edge:  ; preds = %dec_label_pc_106b4
  %v1_106d8.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_106b4

dec_label_pc_10714:                               ; preds = %dec_label_pc_106b4, %dec_label_pc_10668
  %v1_10718 = call i32 @function_121d0(i32 61)
  %v2_10720 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10720, i32* @r4, align 4
  store i32 %v6_10668, i32* @r5, align 4
  store i32 %v9_10668, i32* @r6, align 4
  store i32 %v12_10668, i32* @r7, align 4
  ret i32 %v1_10718

; uselistorder directives
  uselistorder i32 %v2_106b8, { 1, 0 }
  uselistorder i32 %v2_106b4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32 -32, { 1, 0 }
  uselistorder i32* @global_var_1c1e0.189, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1c1dc.193, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1c1d8.191, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32* @global_var_1c1d4.187, { 2, 4, 1, 0, 3 }
}

define i32 @function_10734(i32 %arg1) local_unnamed_addr {
dec_label_pc_10734:
  %v2_10738 = load i32, i32* @global_var_1c23c.203, align 4
  %v2_10740 = call i32 @kill(i32 %v2_10738, i32 9)
  %v0_10744 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10744, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10734
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10734, %bb
  ret i32 %v2_10740

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 3, 5, 4, 2, 1, 0, 6 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_10748() local_unnamed_addr {
dec_label_pc_10748:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10748 = load i32, i32* @r4, align 4
  store i32 %v3_10748, i32* %stack_var_-16, align 4
  %v0_1074c = load i32, i32* @r0, align 4
  store i32 %v0_1074c, i32* %r5.global-to-local, align 4
  %v1_10750 = add i32 %v0_1074c, 4
  %v2_10750 = inttoptr i32 %v1_10750 to i32*
  %v3_10750 = load i32, i32* %v2_10750, align 4
  store i32 %v3_10750, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  %v1_10770 = icmp ne i32 %v3_10750, -1
  call void @__pseudo_cond_branch(i1 %v1_10770, i32 ptrtoint (i32* @global_var_8d50.104 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_10780 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_10780, i32* %r3.global-to-local, align 4
  %v7_10788 = icmp eq i32 %v3_10780, -1
  %v0_10790 = load i32, i32* %r5.global-to-local, align 4
  %v1_10790 = add i32 %v0_10790, 28
  store i32 %v1_10790, i32* %r0.global-to-local, align 4
  %v2_10794 = add i32 %v0_10790, 4
  %v3_10794 = inttoptr i32 %v2_10794 to i32*
  store i32 %v3_10780, i32* %v3_10794, align 4
  br i1 %v7_10788, label %dec_label_pc_10748.dec_label_pc_10810_crit_edge, label %dec_label_pc_1079c

dec_label_pc_10748.dec_label_pc_10810_crit_edge:  ; preds = %dec_label_pc_10748
  %v14_10814.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10810

dec_label_pc_1079c:                               ; preds = %dec_label_pc_10748
  %v0_1079c = load i32, i32* %r6.global-to-local, align 4
  %v1_1079c = load i32, i32* %r5.global-to-local, align 4
  %v2_1079c = add i32 %v1_1079c, 24
  %v3_1079c = inttoptr i32 %v2_1079c to i32*
  store i32 %v0_1079c, i32* %v3_1079c, align 4
  %v0_107a0 = load i32, i32* %r0.global-to-local, align 4
  %v2_107a0 = call i32 @function_12ddc(i32 %v0_107a0, i32 256)
  store i32 %v2_107a0, i32* %r0.global-to-local, align 4
  %v0_107a4 = load i32, i32* %r5.global-to-local, align 4
  %v1_107a4 = add i32 %v0_107a4, 4
  %v2_107a4 = inttoptr i32 %v1_107a4 to i32*
  %v3_107a4 = load i32, i32* %v2_107a4, align 4
  store i32 %v3_107a4, i32* %r0.global-to-local, align 4
  %v2_107b4 = call i32 (i32, i32, ...) @fcntl(i32 %v3_107a4, i32 3)
  store i32 %v3_107a4, i32* %r0.global-to-local, align 4
  %v2_107c4 = call i32 (i32, i32, ...) @fcntl(i32 %v3_107a4, i32 4)
  store i32 %v2_107c4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c218.205 to i32), i32* %r3.global-to-local, align 4
  %v0_107cc = load i32, i32* %r5.global-to-local, align 4
  %v2_107d0 = load i32, i32* @global_var_1c218.205, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_107dc = add i32 %v0_107cc, 8
  %v3_107dc = inttoptr i32 %v2_107dc to i32*
  store i32 %v2_107d0, i32* %v3_107dc, align 4
  %v0_107e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_107e0 = load i32, i32* %r5.global-to-local, align 4
  %v2_107e0 = add i32 %v1_107e0, 12
  %v3_107e0 = inttoptr i32 %v2_107e0 to i32*
  store i32 %v0_107e0, i32* %v3_107e0, align 4
  %v0_107e8 = load i32, i32* %r5.global-to-local, align 4
  %v1_107e8 = add i32 %v0_107e8, 4
  %v2_107e8 = inttoptr i32 %v1_107e8 to i32*
  %v3_107e8 = load i32, i32* %v2_107e8, align 4
  store i32 %v3_107e8, i32* %r0.global-to-local, align 4
  %v0_107ec = load i32, i32* %r3.global-to-local, align 4
  %v2_107ec = mul i32 %v0_107ec, 2
  store i32 %v2_107ec, i32* %r3.global-to-local, align 4
  %tmp13 = bitcast i32* %stack_var_-32 to %sockaddr*
  store i32 %v2_107ec, i32* %stack_var_-32, align 4
  %v5_1080c = call i32 @connect(i32 %v3_107e8, %sockaddr* %tmp13, i32 16)
  store i32 %v5_1080c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10810

dec_label_pc_10810:                               ; preds = %dec_label_pc_10748.dec_label_pc_10810_crit_edge, %dec_label_pc_1079c
  %v14_10814 = phi i32 [ %v14_10814.pre, %dec_label_pc_10748.dec_label_pc_10810_crit_edge ], [ %v5_1080c, %dec_label_pc_1079c ]
  %v2_10814 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10814, i32* @r4, align 4
  ret i32 %v14_10814

; uselistorder directives
  uselistorder i32 %v2_107ec, { 1, 0 }
  uselistorder i32 %v3_107a4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10780, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 5, 6, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_12ddc, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 0, 1, 2, 3, 6, 7, 8, 4, 5 }
  uselistorder label %dec_label_pc_10810, { 1, 0 }
}

define i32 @function_1081c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1081c:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1c1e4.207 to i32), i32* %r8.global-to-local, align 4
  %v2_10824 = load i32, i32* @global_var_1c1e4.207, align 4
  store i32 ptrtoint (i32* @global_var_1c210.209 to i32), i32* %sb.global-to-local, align 4
  %v3_10830 = mul i32 %v2_10824, 16
  store i32 %v3_10830, i32* %r3.global-to-local, align 4
  %v3_10838 = urem i32 %arg3, 65536
  store i32 %v3_10838, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_10844 = load i32, i32* @global_var_1c210.209, align 4
  %v1_10848 = add i32 %v3_10830, 16
  store i32 %v1_10848, i32* %r1.global-to-local, align 4
  store i32 %v3_10838, i32* %stack_var_-44, align 4
  %v15_10850 = inttoptr i32 %v2_10844 to i32*
  %v16_10850 = call i32* @realloc(i32* %v15_10850, i32 %v1_10848)
  %v18_10850 = ptrtoint i32* %v16_10850 to i32
  store i32 %v18_10850, i32* %sl.global-to-local, align 4
  %v0_10858 = load i32, i32* %r5.global-to-local, align 4
  %v1_1085c = load i32, i32* %sb.global-to-local, align 4
  %v2_1085c = inttoptr i32 %v1_1085c to i32*
  store i32 %v18_10850, i32* %v2_1085c, align 4
  %v2_10860 = load i32, i32* @global_var_1c1e4.207, align 4
  store i32 %v2_10860, i32* %fp.global-to-local, align 4
  %v1_10864 = inttoptr i32 %v0_10858 to i8*
  %v2_10864 = call i32 @function_12d3c(i8* %v1_10864)
  %sext = mul i32 %v2_10864, 16777216
  %v1_10868 = sdiv i32 %sext, 16777216
  %v2_10868 = add nsw i32 %v1_10868, 1
  store i32 %v1_10868, i32* %r7.global-to-local, align 4
  %v1_10874 = call i32* @malloc(i32 %v2_10868)
  %v3_10874 = ptrtoint i32* %v1_10874 to i32
  %v0_10878 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10878, i32* %r1.global-to-local, align 4
  store i32 %v2_10868, i32* %r2.global-to-local, align 4
  store i32 %v3_10874, i32* %r6.global-to-local, align 4
  %v3_10884 = call i32 @function_12db8(i32 %v3_10874, i32 %v0_10878, i32 %v2_10868)
  %v0_10888 = load i32, i32* %r7.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_10888, 1
  %extract.t8 = trunc i32 %v0_10888 to i8
  br i1 %tmp23, label %dec_label_pc_108b4, label %dec_label_pc_10890

dec_label_pc_10890:                               ; preds = %dec_label_pc_1081c
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10898

dec_label_pc_10898:                               ; preds = %dec_label_pc_10898.dec_label_pc_10898_crit_edge, %dec_label_pc_10890
  %v1_108a0 = phi i32 [ %v1_108a0.pre, %dec_label_pc_10898.dec_label_pc_10898_crit_edge ], [ -81, %dec_label_pc_10890 ]
  %v2_108a4 = phi i32 [ %v1_108a8, %dec_label_pc_10898.dec_label_pc_10898_crit_edge ], [ 0, %dec_label_pc_10890 ]
  %v1_10898 = load i32, i32* %r6.global-to-local, align 4
  %v2_10898 = add i32 %v1_10898, %v2_108a4
  %v3_10898 = inttoptr i32 %v2_10898 to i8*
  %v4_10898 = load i8, i8* %v3_10898, align 1
  %v6_10898 = zext i8 %v4_10898 to i32
  %v1_1089c = sub i32 -1, %v1_108a0
  %v2_108a0 = xor i32 %v6_10898, %v1_1089c
  store i32 %v2_108a0, i32* %r3.global-to-local, align 4
  %v1_108a4 = trunc i32 %v2_108a0 to i8
  store i8 %v1_108a4, i8* %v3_10898, align 1
  %v0_108a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_108a8 = add i32 %v0_108a8, 1
  store i32 %v1_108a8, i32* %r2.global-to-local, align 4
  %v0_108ac = load i32, i32* %r7.global-to-local, align 4
  %v9_108ac = icmp eq i32 %v0_108ac, %v1_108a8
  br i1 %v9_108ac, label %dec_label_pc_108b4.loopexit, label %dec_label_pc_10898.dec_label_pc_10898_crit_edge

dec_label_pc_10898.dec_label_pc_10898_crit_edge:  ; preds = %dec_label_pc_10898
  %v1_108a0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10898

dec_label_pc_108b4.loopexit:                      ; preds = %dec_label_pc_10898
  %extract.t = trunc i32 %v1_108a8 to i8
  br label %dec_label_pc_108b4

dec_label_pc_108b4:                               ; preds = %dec_label_pc_108b4.loopexit, %dec_label_pc_1081c
  %v0_108c4.off0 = phi i8 [ %extract.t, %dec_label_pc_108b4.loopexit ], [ %extract.t8, %dec_label_pc_1081c ]
  %v2_108b4 = load i32, i32* @global_var_1c1e4.207, align 4
  %v2_108b8 = load i32, i32* @global_var_1c210.209, align 4
  store i32 %v2_108b8, i32* %r2.global-to-local, align 4
  %v3_108bc = mul i32 %v2_108b4, 16
  %v2_108c0 = add i32 %v2_108b8, %v3_108bc
  store i32 %v2_108c0, i32* %r3.global-to-local, align 4
  %v3_108c4 = add i32 %v2_108c0, 12
  %v4_108c4 = inttoptr i32 %v3_108c4 to i8*
  store i8 %v0_108c4.off0, i8* %v4_108c4, align 1
  %v0_108c8 = load i32, i32* %r6.global-to-local, align 4
  %v1_108c8 = load i32, i32* %sl.global-to-local, align 4
  %v2_108c8 = load i32, i32* %fp.global-to-local, align 4
  %v5_108c8 = mul i32 %v2_108c8, 16
  %v6_108c8 = add i32 %v5_108c8, %v1_108c8
  %v7_108c8 = inttoptr i32 %v6_108c8 to i32*
  store i32 %v0_108c8, i32* %v7_108c8, align 4
  %v2_108d0 = load i32, i32* @global_var_1c1e4.207, align 4
  store i32 %v2_108d0, i32* %r7.global-to-local, align 4
  %v2_108d4 = load i32, i32* @global_var_1c210.209, align 4
  store i32 %v2_108d4, i32* %sl.global-to-local, align 4
  %v1_108d8 = inttoptr i32 %arg2 to i8*
  %v2_108d8 = call i32 @function_12d3c(i8* %v1_108d8)
  %sext1 = mul i32 %v2_108d8, 16777216
  %v1_108dc = sdiv i32 %sext1, 16777216
  %v2_108dc = add nsw i32 %v1_108dc, 1
  store i32 %v1_108dc, i32* %r5.global-to-local, align 4
  %v1_108e8 = call i32* @malloc(i32 %v2_108dc)
  %v3_108e8 = ptrtoint i32* %v1_108e8 to i32
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %v2_108dc, i32* %r2.global-to-local, align 4
  store i32 %v3_108e8, i32* %r6.global-to-local, align 4
  %v3_108f8 = call i32 @function_12db8(i32 %v3_108e8, i32 %arg2, i32 %v2_108dc)
  %v0_108fc = load i32, i32* %r5.global-to-local, align 4
  %tmp24 = icmp slt i32 %v0_108fc, 1
  %extract.t10 = trunc i32 %v0_108fc to i8
  br i1 %tmp24, label %dec_label_pc_10928, label %dec_label_pc_10904

dec_label_pc_10904:                               ; preds = %dec_label_pc_108b4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1090c

dec_label_pc_1090c:                               ; preds = %dec_label_pc_1090c.dec_label_pc_1090c_crit_edge, %dec_label_pc_10904
  %v1_10914 = phi i32 [ %v1_10914.pre, %dec_label_pc_1090c.dec_label_pc_1090c_crit_edge ], [ -81, %dec_label_pc_10904 ]
  %v2_10918 = phi i32 [ %v1_1091c, %dec_label_pc_1090c.dec_label_pc_1090c_crit_edge ], [ 0, %dec_label_pc_10904 ]
  %v1_1090c = load i32, i32* %r6.global-to-local, align 4
  %v2_1090c = add i32 %v1_1090c, %v2_10918
  %v3_1090c = inttoptr i32 %v2_1090c to i8*
  %v4_1090c = load i8, i8* %v3_1090c, align 1
  %v6_1090c = zext i8 %v4_1090c to i32
  %v1_10910 = sub i32 -1, %v1_10914
  %v2_10914 = xor i32 %v6_1090c, %v1_10910
  store i32 %v2_10914, i32* %r3.global-to-local, align 4
  %v1_10918 = trunc i32 %v2_10914 to i8
  store i8 %v1_10918, i8* %v3_1090c, align 1
  %v0_1091c = load i32, i32* %r2.global-to-local, align 4
  %v1_1091c = add i32 %v0_1091c, 1
  store i32 %v1_1091c, i32* %r2.global-to-local, align 4
  %v0_10920 = load i32, i32* %r5.global-to-local, align 4
  %v9_10920 = icmp eq i32 %v0_10920, %v1_1091c
  br i1 %v9_10920, label %dec_label_pc_10928.loopexit, label %dec_label_pc_1090c.dec_label_pc_1090c_crit_edge

dec_label_pc_1090c.dec_label_pc_1090c_crit_edge:  ; preds = %dec_label_pc_1090c
  %v1_10914.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1090c

dec_label_pc_10928.loopexit:                      ; preds = %dec_label_pc_1090c
  %extract.t9 = trunc i32 %v1_1091c to i8
  br label %dec_label_pc_10928

dec_label_pc_10928:                               ; preds = %dec_label_pc_10928.loopexit, %dec_label_pc_108b4
  %v0_10938.off0 = phi i8 [ %extract.t9, %dec_label_pc_10928.loopexit ], [ %extract.t10, %dec_label_pc_108b4 ]
  %v2_10928 = load i32, i32* @global_var_1c1e4.207, align 4
  %v2_1092c = load i32, i32* @global_var_1c210.209, align 4
  %v3_10930 = mul i32 %v2_10928, 16
  %v2_10934 = or i32 %v3_10930, 13
  %v3_10938 = add i32 %v2_10934, %v2_1092c
  %v4_10938 = inttoptr i32 %v3_10938 to i8*
  store i8 %v0_10938.off0, i8* %v4_10938, align 1
  %v2_10940 = load i32, i32* @global_var_1c1e4.207, align 4
  store i32 %v2_10940, i32* %lr.global-to-local, align 4
  %v4_10944 = load i8, i8* @global_var_1c215.212, align 1
  %v5_10944 = zext i8 %v4_10944 to i32
  %v3_10948 = load i8, i8* bitcast (i8** @global_var_1c214.211 to i8*), align 4
  %v4_10948 = zext i8 %v3_10948 to i32
  %v2_1094c = load i32, i32* @global_var_1c210.209, align 4
  %v4_10950 = mul nuw nsw i32 %v5_10944, 256
  %v5_10950 = or i32 %v4_10948, %v4_10950
  store i32 %v5_10950, i32* %r2.global-to-local, align 4
  %v3_10954 = mul i32 %v2_10940, 16
  %v2_10958 = add i32 %v2_1094c, %v3_10954
  store i32 %v2_10958, i32* %r1.global-to-local, align 4
  %v3_10960 = add i32 %v2_10958, 9
  %v4_10960 = inttoptr i32 %v3_10960 to i8*
  store i8 %v4_10944, i8* %v4_10960, align 1
  %v0_10964 = load i32, i32* %r2.global-to-local, align 4
  %v1_10964 = trunc i32 %v0_10964 to i8
  %v2_10964 = load i32, i32* %r1.global-to-local, align 4
  %v3_10964 = add i32 %v2_10964, 8
  %v4_10964 = inttoptr i32 %v3_10964 to i8*
  store i8 %v1_10964, i8* %v4_10964, align 1
  %v4_10968 = load i8, i8* @global_var_1c215.212, align 1
  %v5_10968 = zext i8 %v4_10968 to i32
  %v3_1096c = load i8, i8* bitcast (i8** @global_var_1c214.211 to i8*), align 4
  %v4_1096c = zext i8 %v3_1096c to i32
  %v4_10970 = mul nuw nsw i32 %v5_10968, 256
  %v5_10970 = or i32 %v4_1096c, %v4_10970
  %v2_10974 = load i32, i32* %stack_var_-44, align 4
  %v2_10978 = add i32 %v5_10970, %v2_10974
  store i32 %v2_10978, i32* %r3.global-to-local, align 4
  %v3_1097c11 = udiv i32 %v2_10978, 256
  %v1_10980 = trunc i32 %v3_1097c11 to i8
  %v2_10980 = load i32, i32* %r1.global-to-local, align 4
  %v3_10980 = add i32 %v2_10980, 11
  %v4_10980 = inttoptr i32 %v3_10980 to i8*
  store i8 %v1_10980, i8* %v4_10980, align 1
  %v0_10984 = load i32, i32* %r3.global-to-local, align 4
  %v1_10984 = trunc i32 %v0_10984 to i8
  %v2_10984 = load i32, i32* %r1.global-to-local, align 4
  %v3_10984 = add i32 %v2_10984, 10
  %v4_10984 = inttoptr i32 %v3_10984 to i8*
  store i8 %v1_10984, i8* %v4_10984, align 1
  %v4_10988 = load i8, i8* @global_var_1c215.212, align 1
  %v5_10988 = zext i8 %v4_10988 to i32
  %v3_1098c = load i8, i8* bitcast (i8** @global_var_1c214.211 to i8*), align 4
  %v4_1098c = zext i8 %v3_1098c to i32
  %v4_10990 = mul nuw nsw i32 %v5_10988, 256
  %v5_10990 = or i32 %v4_1098c, %v4_10990
  %v2_10994 = load i32, i32* %stack_var_-44, align 4
  %v2_10998 = add i32 %v5_10990, %v2_10994
  store i32 %v2_10998, i32* %r2.global-to-local, align 4
  %v0_1099c = load i32, i32* %r7.global-to-local, align 4
  %v3_1099c = mul i32 %v0_1099c, 16
  %v1_109a0 = load i32, i32* %sl.global-to-local, align 4
  %v2_109a0 = add i32 %v1_109a0, %v3_1099c
  store i32 %v2_109a0, i32* %r3.global-to-local, align 4
  %v0_109a4 = load i32, i32* %lr.global-to-local, align 4
  %v1_109a4 = add i32 %v0_109a4, 1
  store i32 %v1_109a4, i32* %lr.global-to-local, align 4
  %v3_109a8 = sdiv i32 %v2_10998, 256
  store i32 %v3_109a8, i32* %r1.global-to-local, align 4
  %v0_109ac = load i32, i32* %r6.global-to-local, align 4
  %v2_109ac = add i32 %v2_109a0, 4
  %v3_109ac = inttoptr i32 %v2_109ac to i32*
  store i32 %v0_109ac, i32* %v3_109ac, align 4
  %v0_109b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_109b0 = load i32, i32* %r8.global-to-local, align 4
  %v2_109b0 = inttoptr i32 %v1_109b0 to i32*
  store i32 %v0_109b0, i32* %v2_109b0, align 4
  %v0_109b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_109b4 = trunc i32 %v0_109b4 to i8
  store i8 %v1_109b4, i8* @global_var_1c215.212, align 1
  %v0_109b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_109b8 = trunc i32 %v0_109b8 to i8
  store i8 %v1_109b8, i8* bitcast (i8** @global_var_1c214.211 to i8*), align 4
  ret i32 ptrtoint (i8** @global_var_1c214.211 to i32)

; uselistorder directives
  uselistorder i32 %v1_1091c, { 0, 2, 3, 1 }
  uselistorder i32 %v3_108e8, { 1, 0 }
  uselistorder i32 %v2_108dc, { 1, 0, 2 }
  uselistorder i32 %v1_108a8, { 0, 2, 3, 1 }
  uselistorder i32 %v3_10874, { 1, 0 }
  uselistorder i32 %v2_10868, { 1, 0, 2 }
  uselistorder i32 %v3_10838, { 1, 0 }
  uselistorder i32 %v3_10830, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32 -81, { 0, 2, 1, 3 }
  uselistorder i32 (i8*)* @function_12d3c, { 0, 1, 23, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 76, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81 }
  uselistorder i32* (i32*, i32)* @realloc, { 8, 10, 6, 0, 1, 7, 9, 4, 5, 3, 2, 11 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_109d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_109d0:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-52 = alloca i8, align 1
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_109d0 = load i32, i32* @r4, align 4
  store i32 %v3_109d0, i32* %stack_var_-36, align 4
  %v6_109d0 = load i32, i32* @r5, align 4
  %v15_109d0 = load i32, i32* @r8, align 4
  %v18_109d0 = load i32, i32* @sb, align 4
  %v21_109d0 = load i32, i32* @sl, align 4
  %v0_109dc = call i32 @fork()
  store i32 %v0_109dc, i32* %r0.global-to-local, align 4
  %v7_109e0 = icmp eq i32 %v0_109dc, -1
  %. = zext i1 %v7_109e0 to i32
  %tmp282 = icmp slt i32 %v0_109dc, 1
  %storemerge241 = select i1 %tmp282, i32 %., i32 1
  store i32 %storemerge241, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c23c.203 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_109fc = icmp eq i32 %storemerge241, 0
  store i1 %v2_109fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_109dc, i32* @global_var_1c23c.203, align 4
  br i1 %v2_109fc, label %dec_label_pc_10a14, label %dec_label_pc_10a08

dec_label_pc_10a08:                               ; preds = %dec_label_pc_109d0
  store i32 %v3_109d0, i32* %r4.global-to-local, align 4
  store i32 %v6_109d0, i32* %r5.global-to-local, align 4
  store i32 %v15_109d0, i32* %r8.global-to-local, align 4
  store i32 %v18_109d0, i32* @sb, align 4
  store i32 %v21_109d0, i32* @sl, align 4
  ret i32 %v0_109dc

dec_label_pc_10a14:                               ; preds = %dec_label_pc_109d0
  %v0_10a14 = call i32 @function_12ff4()
  store i32 %v0_10a14, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c21c.133 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_10a14, i32* @global_var_1c21c.133, align 4
  %v1_10a20 = call i32 @function_1060c(i32 %v0_10a14)
  %v0_10a24 = load i32, i32* @r4, align 4
  store i32 %v0_10a24, i32* %r0.global-to-local, align 4
  %v1_10a28 = inttoptr i32 %v0_10a24 to i32*
  %v2_10a28 = call i32 @time(i32* %v1_10a28)
  store i32 ptrtoint (i32* @global_var_1c218.205 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_10a28, i32* @global_var_1c218.205, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_10a3c = call i32* @calloc(i32 256, i32 288)
  %v4_10a3c = ptrtoint i32* %v2_10a3c to i32
  store i32 %v4_10a3c, i32* %lr.global-to-local, align 4
  %v0_10a48 = load i32, i32* @r4, align 4
  store i32 %v0_10a48, i32* %stack_var_-48, align 4
  store i32 %v4_10a3c, i32* @global_var_1c234.217, align 4
  store i32 %v0_10a48, i32* %r3.global-to-local, align 4
  store i32 %v0_10a48, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_10a48, i32* %ip.global-to-local, align 4
  %v1_10a60 = add i32 %v4_10a3c, 4
  store i32 %v1_10a60, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10a64

dec_label_pc_10a64:                               ; preds = %dec_label_pc_10a64.dec_label_pc_10a64_crit_edge, %dec_label_pc_10a14
  %v0_10a7c = phi i32 [ %v0_10a7c.pre, %dec_label_pc_10a64.dec_label_pc_10a64_crit_edge ], [ %v0_10a48, %dec_label_pc_10a14 ]
  %v0_10a6c = phi i32 [ %v0_10a84, %dec_label_pc_10a64.dec_label_pc_10a64_crit_edge ], [ %v0_10a48, %dec_label_pc_10a14 ]
  %v1_10a74 = phi i32 [ %v1_10a74.pre, %dec_label_pc_10a64.dec_label_pc_10a64_crit_edge ], [ %v4_10a3c, %dec_label_pc_10a14 ]
  %v3_10a64 = mul i32 %v0_10a6c, 256
  store i32 %v3_10a64, i32* %r2.global-to-local, align 4
  %v1_10a6c = add i32 %v0_10a6c, 1
  store i32 %v1_10a6c, i32* %ip.global-to-local, align 4
  %v2_10a70 = mul i32 %v0_10a6c, 288
  %v2_10a74 = add i32 %v1_10a74, 12
  %v2_10a7c = add i32 %v2_10a74, %v2_10a70
  %v3_10a7c = inttoptr i32 %v2_10a7c to i32*
  store i32 %v0_10a7c, i32* %v3_10a7c, align 4
  %v0_10a80 = load i32, i32* %r0.global-to-local, align 4
  %v1_10a80 = load i32, i32* %r1.global-to-local, align 4
  %v2_10a80 = inttoptr i32 %v1_10a80 to i32*
  store i32 %v0_10a80, i32* %v2_10a80, align 4
  %v3_10a80 = load i32, i32* %r1.global-to-local, align 4
  %v4_10a80 = add i32 %v3_10a80, 288
  store i32 %v4_10a80, i32* %r1.global-to-local, align 4
  %v0_10a84 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_10a84, i32* %r3.global-to-local, align 4
  %v7_10a88 = icmp sgt i32 %v1_10a6c, 255
  br i1 %v7_10a88, label %dec_label_pc_10a8c, label %dec_label_pc_10a64.dec_label_pc_10a64_crit_edge

dec_label_pc_10a64.dec_label_pc_10a64_crit_edge:  ; preds = %dec_label_pc_10a64
  %v1_10a74.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_10a7c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10a64

dec_label_pc_10a8c:                               ; preds = %dec_label_pc_10a64
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_10a84, i32* %stack_var_-48, align 4
  %v3_10a9c = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_10a9c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c238.219 to i32), i32* %lr.global-to-local, align 4
  %v2_10aa4 = icmp eq i32 %v3_10a9c, -1
  store i1 %v2_10aa4, i1* %cpsr_c.global-to-local, align 1
  %v7_10aa4 = icmp eq i32 %v3_10a9c, -1
  store i1 %v7_10aa4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10a9c, i32* %r4.global-to-local, align 4
  store i32 %v3_10a9c, i32* @global_var_1c238.219, align 4
  br i1 %v7_10aa4, label %dec_label_pc_11274, label %dec_label_pc_10ab4

dec_label_pc_10ab4:                               ; preds = %dec_label_pc_10a8c
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_10ab8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10ab8, i32* %r2.global-to-local, align 4
  %v2_10abc = call i32 (i32, i32, ...) @fcntl(i32 %v3_10a9c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_10ac4 = or i32 %v2_10abc, 2048
  store i32 %v1_10ac4, i32* %r2.global-to-local, align 4
  %v0_10ac8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10ac8, i32* %r0.global-to-local, align 4
  %v2_10acc = call i32 (i32, i32, ...) @fcntl(i32 %v0_10ac8, i32 4)
  %v2_10ad8 = load i32, i32* @global_var_1c238.219, align 4
  store i32 %v2_10ad8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_10ae0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10ae0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_10ae8 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_10ae8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r4.global-to-local, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v7_10af8 = call i32 @setsockopt(i32 %v2_10ad8, i32 %v0_10ae0, i32 3, i32* nonnull %stack_var_-48, i32 4)
  store i32 %v7_10af8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10afc = icmp eq i32 %v7_10af8, 0
  store i1 %v2_10afc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10afc, label %dec_label_pc_10b04, label %dec_label_pc_11268

dec_label_pc_10b04:                               ; preds = %dec_label_pc_10ab4, %dec_label_pc_10b04
  %v0_10b04 = call i32 @function_105b4()
  %v3_10b08 = mul i32 %v0_10b04, 65536
  store i32 %v3_10b08, i32* %r0.global-to-local, align 4
  %v1_10b14 = mul i32 %v0_10b04, 256
  %v3_10b18 = and i32 %v1_10b14, 65280
  %tmp285 = udiv i32 %v0_10b04, 256
  %v4_10b1c = urem i32 %tmp285, 256
  %v5_10b1c = or i32 %v4_10b1c, %v3_10b18
  store i32 %v5_10b1c, i32* %r3.global-to-local, align 4
  %v2_10b20 = icmp ugt i32 %v5_10b1c, 1023
  store i1 %v2_10b20, i1* %cpsr_c.global-to-local, align 1
  %v7_10b20 = icmp eq i32 %v5_10b1c, 1024
  store i1 %v7_10b20, i1* %cpsr_z.global-to-local, align 1
  %v3_10b24 = icmp ult i32 %v5_10b1c, 1022
  br i1 %v3_10b24, label %dec_label_pc_10b04, label %dec_label_pc_10b28

dec_label_pc_10b28:                               ; preds = %dec_label_pc_10b04
  %v5_10b10.le = trunc i32 %v0_10b04 to i8
  store i32 ptrtoint (i32* @global_var_1c1e8.221 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i32* @global_var_1c1e8.221 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1c1eb.222 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1c1ea.223 to i8*), align 4
  %v0_10b5c = call i32 @function_105b4()
  %v1_10b5c = trunc i32 %v0_10b5c to i8
  store i32 %v0_10b5c, i32* %r0.global-to-local, align 4
  %v4_10b64 = sext i8 %v5_10b10.le to i32
  %v3_10b68 = load i8, i8* @global_var_1c208.226, align 1
  store i32 ptrtoint (i32* @global_var_1c1e8.221 to i32), i32* %lr.global-to-local, align 4
  %v3_10b70240 = udiv i32 %v4_10b64, 256
  store i8 64, i8* bitcast (i32* @global_var_1c1f0.227 to i8*), align 4
  %v2_10b7c = and i32 %v0_10b5c, 128
  %v3_10b7c = icmp ne i32 %v2_10b7c, 0
  store i1 %v3_10b7c, i1* %cpsr_c.global-to-local, align 1
  %v4_10b7c239 = udiv i32 %v0_10b5c, 256
  store i32 ptrtoint (i32* @global_var_1c1fc.225 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_10b68, 16
  %v1_10b84 = zext i8 %tmp to i32
  %v1_10b88 = trunc i32 %v4_10b7c239 to i8
  store i8 %v1_10b88, i8* bitcast (i32* @global_var_1c1ed.228 to i8*), align 4
  %v1_10b8c = or i32 %v1_10b84, 80
  store i32 %v1_10b8c, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  store i32 6, i32* @r6, align 4
  %v1_10b98 = trunc i32 %v1_10b8c to i8
  store i8 %v1_10b98, i8* @global_var_1c208.226, align 1
  %v1_10b9c = trunc i32 %v3_10b70240 to i8
  store i8 %v1_10b9c, i8* bitcast (i32* @global_var_1c1fd.229 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1c1ff.230 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1c1f1.231 to i8*), align 4
  store i32 %v4_10b64, i32* %ip.global-to-local, align 4
  store i8 %v1_10b5c, i8* bitcast (i32* @global_var_1c1ec.232 to i8*), align 4
  store i8 %v5_10b10.le, i8* bitcast (i32* @global_var_1c1fc.225 to i8*), align 4
  %v0_10bb4 = load i32, i32* @r5, align 4
  %v1_10bb4 = trunc i32 %v0_10bb4 to i8
  store i8 %v1_10bb4, i8* bitcast (i32* @global_var_1c1fe.233 to i8*), align 4
  %v0_10bb8 = call i32 @function_105b4()
  %v1_10bb8 = trunc i32 %v0_10bb8 to i8
  store i32 ptrtoint (i32* @global_var_1c1fc.225 to i32), i32* %lr.global-to-local, align 4
  %v3_10bc0 = load i8, i8* @global_var_1c209.234, align 1
  %v4_10bc0 = zext i8 %v3_10bc0 to i32
  %v2_10bc4 = and i32 %v0_10bb8, 128
  %v3_10bc4 = icmp ne i32 %v2_10bc4, 0
  store i1 %v3_10bc4, i1* %cpsr_c.global-to-local, align 1
  %v4_10bc4 = sdiv i32 %v0_10bb8, 256
  store i32 %v4_10bc4, i32* %ip.global-to-local, align 4
  %v1_10bc8 = or i32 %v4_10bc0, 2
  store i32 %v1_10bc8, i32* %r3.global-to-local, align 4
  %v1_10bd0 = trunc i32 %v4_10bc4 to i8
  store i8 %v1_10bd0, i8* bitcast (i32* @global_var_1c20b.235 to i8*), align 4
  %v1_10bd4 = trunc i32 %v1_10bc8 to i8
  store i8 %v1_10bd4, i8* @global_var_1c209.234, align 1
  store i8 %v1_10bb8, i8* bitcast (i32* @global_var_1c20a.236 to i8*), align 4
  store i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_137c8.240 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10be8 = call i32 @function_1081c(i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32 ptrtoint ([8 x i8]* @global_var_137c8.240 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_137d0.242 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10bf8 = call i32 @function_1081c(i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32 ptrtoint ([5 x i8]* @global_var_137d0.242 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_137d8.244 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_10c08 = call i32 @function_1081c(i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32 ptrtoint ([9 x i8]* @global_var_137d8.244 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32* %r1.global-to-local, align 4
  %v5_10c18 = call i32 @function_1081c(i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_137e4.246 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_10c28 = call i32 @function_1081c(i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32 ptrtoint (i32* @global_var_137e4.246 to i32), i32 17)
  store i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b8.248 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10c38 = call i32 @function_1081c(i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32 ptrtoint (i32* @global_var_136b8.248 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_137b8.250 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10c48 = call i32 @function_1081c(i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), i32 ptrtoint ([5 x i8]* @global_var_137b8.250 to i32), i32 9)
  store i32 ptrtoint ([4 x i8]* @global_var_136e8.252 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b8.248 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10c58 = call i32 @function_1081c(i32 ptrtoint ([4 x i8]* @global_var_136e8.252 to i32), i32 ptrtoint (i32* @global_var_136b8.248 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_136f4.256 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_10c68 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([5 x i8]* @global_var_136f4.256 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_136fc.258 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10c78 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([7 x i8]* @global_var_136fc.258 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b8.248 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_10c88 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint (i32* @global_var_136b8.248 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13704.260 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10c98 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([6 x i8]* @global_var_13704.260 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1370c.262 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10ca8 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([9 x i8]* @global_var_1370c.262 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13718.264 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10cb8 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([6 x i8]* @global_var_13718.264 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13720.266 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10cc8 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([6 x i8]* @global_var_13720.266 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13728.268 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10cd8 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([9 x i8]* @global_var_13728.268 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_13734.270 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_10ce8 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([8 x i8]* @global_var_13734.270 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1373c.272 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10cf8 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([4 x i8]* @global_var_1373c.272 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_13740.274 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10d08 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([7 x i8]* @global_var_13740.274 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_13748.276 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10d18 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([4 x i8]* @global_var_13748.276 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1374c.278 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10d28 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([9 x i8]* @global_var_1374c.278 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_137d8.244 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10d38 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([9 x i8]* @global_var_137d8.244 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_137e4.246 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10d48 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint (i32* @global_var_137e4.246 to i32), i32 16)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13758.280 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10d58 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([6 x i8]* @global_var_13758.280 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_13760.282 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10d68 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([7 x i8]* @global_var_13760.282 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_13768.284 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v5_10d78 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([11 x i8]* @global_var_13768.284 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_13774.286 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10d88 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint ([7 x i8]* @global_var_13774.286 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1377c.288 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10d98 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), i32 ptrtoint (i32* @global_var_1377c.288 to i32), i32 16)
  store i32 ptrtoint ([8 x i8]* @global_var_13734.270 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b8.248 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10da8 = call i32 @function_1081c(i32 ptrtoint ([8 x i8]* @global_var_13734.270 to i32), i32 ptrtoint (i32* @global_var_136b8.248 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_1378c.290 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1378c.290 to i32), i32* %r1.global-to-local, align 4
  %v5_10db8 = call i32 @function_1081c(i32 ptrtoint ([5 x i8]* @global_var_1378c.290 to i32), i32 ptrtoint ([5 x i8]* @global_var_1378c.290 to i32), i32 8)
  %v0_10dbc = load i32, i32* @r6, align 4
  store i32 %v0_10dbc, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_13794.292 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b8.248 to i32), i32* %r1.global-to-local, align 4
  %v4_10dc8 = call i32 @function_1081c(i32 ptrtoint ([7 x i8]* @global_var_13794.292 to i32), i32 ptrtoint (i32* @global_var_136b8.248 to i32), i32 %v0_10dbc)
  store i32 ptrtoint ([4 x i8]* @global_var_1379c.294 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_136b8.248 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10dd8 = call i32 @function_1081c(i32 ptrtoint ([4 x i8]* @global_var_1379c.294 to i32), i32 ptrtoint (i32* @global_var_136b8.248 to i32), i32 3)
  store i32 ptrtoint ([8 x i8]* @global_var_137a0.296 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_137a0.296 to i32), i32* %r1.global-to-local, align 4
  %v5_10de8 = call i32 @function_1081c(i32 ptrtoint ([8 x i8]* @global_var_137a0.296 to i32), i32 ptrtoint ([8 x i8]* @global_var_137a0.296 to i32), i32 14)
  store i32 ptrtoint ([11 x i8]* @global_var_137a8.298 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_137b4.300 to i32), i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v5_10df8 = call i32 @function_1081c(i32 ptrtoint ([11 x i8]* @global_var_137a8.298 to i32), i32 ptrtoint ([9 x i8]* @global_var_137b4.300 to i32), i32 18)
  %v2_10e00 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_10e00, i32* %r0.global-to-local, align 4
  %v2_10e04 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_10e04, i32* %r1.global-to-local, align 4
  %tmp286 = bitcast i32* %stack_var_-1842 to i8*
  %v1_11120 = add i32 %v2_10e00, 16
  %v2_11120 = inttoptr i32 %v1_11120 to i32*
  %v1_11144 = or i32 %v2_10e04, 1
  %v2_11144 = inttoptr i32 %v1_11144 to i8*
  %v1_11168 = or i32 %v2_10e04, 2
  %v2_11168 = inttoptr i32 %v1_11168 to i8*
  %v1_1116c = or i32 %v2_10e04, 3
  %v2_1116c = inttoptr i32 %v1_1116c to i8*
  %v1_11184 = add i32 %v2_10e04, 13
  %v2_11184 = inttoptr i32 %v1_11184 to i8*
  %v1_11130 = add i32 %v2_10e00, 9
  %v2_11130 = inttoptr i32 %v1_11130 to i8*
  %v1_111a8 = add i32 %v2_10e04, 8
  %v2_111a8 = inttoptr i32 %v1_111a8 to i32*
  %v1_111e8 = add i32 %v2_10e00, 12
  %v2_111e8 = inttoptr i32 %v1_111e8 to i32*
  %v2_11374 = ptrtoint i32* %stack_var_-36 to i32
  %v2_113ec = ptrtoint i32* %stack_var_-76 to i32
  %v2_113f0 = ptrtoint i32* %stack_var_-348 to i32
  %tmp317 = bitcast i32* %stack_var_-348 to %_TYPEDEF_fd_set*
  %v2_113f8 = ptrtoint i32* %stack_var_-64 to i32
  %v2_113fc = ptrtoint i32* %stack_var_-220 to i32
  %tmp318 = bitcast i32* %stack_var_-220 to %_TYPEDEF_fd_set*
  %tmp320 = bitcast i32* %stack_var_-64 to %timeval*
  %v2_11dbc = ptrtoint i32* %stack_var_-41 to i32
  %v2_11dcc = ptrtoint i32* %stack_var_-73 to i32
  %v2_115a4 = ptrtoint i8* %stack_var_-52 to i32
  %v2_115ac = bitcast i8* %stack_var_-52 to i32*
  %v2_115b8 = ptrtoint i32* %stack_var_-56 to i32
  %v2_11094 = ptrtoint i32* %stack_var_-92 to i32
  %tmp287 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_10e10

dec_label_pc_10e10:                               ; preds = %dec_label_pc_11458, %dec_label_pc_10b28
  store i32 ptrtoint (i32* @global_var_1c218.205 to i32), i32* %r2.global-to-local, align 4
  %v2_10e14 = load i32, i32* @global_var_1c218.205, align 4
  store i32 %v2_10e14, i32* %r8.global-to-local, align 4
  %v0_10e18 = load i32, i32* @fp, align 4
  %v3_10e18 = icmp uge i32 %v0_10e18, %v2_10e14
  store i1 %v3_10e18, i1* %cpsr_c.global-to-local, align 1
  %v9_10e18 = icmp eq i32 %v0_10e18, %v2_10e14
  store i1 %v9_10e18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10e18, label %dec_label_pc_110c0, label %dec_label_pc_10e20

dec_label_pc_10e20:                               ; preds = %dec_label_pc_10e10
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10e2c

dec_label_pc_10e2c:                               ; preds = %.thread52.dec_label_pc_10e2c_crit_edge, %dec_label_pc_10e20
  %v0_10e2c = phi i32 [ %v0_10e2c.pre, %.thread52.dec_label_pc_10e2c_crit_edge ], [ 0, %dec_label_pc_10e20 ]
  store i32 %v0_10e2c, i32* %stack_var_-92, align 4
  %v0_10e3c = call i32 @function_105b4()
  %v1_10e3c = trunc i32 %v0_10e3c to i8
  store i32 %v0_10e3c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c21c.133 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1e8.221 to i32), i32* %lr.global-to-local, align 4
  %v2_10e48 = load i32, i32* @global_var_1c21c.133, align 4
  store i32 %v2_10e48, i32* %r2.global-to-local, align 4
  %v2_10e4c = and i32 %v0_10e3c, 128
  %v3_10e4c = icmp ne i32 %v2_10e4c, 0
  store i1 %v3_10e4c, i1* %cpsr_c.global-to-local, align 1
  %v4_10e4c = sdiv i32 %v0_10e3c, 256
  store i32 %v4_10e4c, i32* %r3.global-to-local, align 4
  %v1_10e50 = trunc i32 %v4_10e4c to i8
  store i8 %v1_10e50, i8* bitcast (i32* @global_var_1c1ed.228 to i8*), align 4
  store i32 %v2_10e48, i32* @global_var_1c1f4.301, align 4
  store i8 %v1_10e3c, i8* bitcast (i32* @global_var_1c1ec.232 to i8*), align 4
  br label %dec_label_pc_10e5c

dec_label_pc_10e5c:                               ; preds = %dec_label_pc_10f30, %dec_label_pc_10e8c, %dec_label_pc_10f64, %dec_label_pc_10f58, %dec_label_pc_10f4c, %dec_label_pc_10f40, %.thread37, %bb306, %bb305, %bb304, %bb303, %bb302, %dec_label_pc_10f28, %dec_label_pc_10f20, %bb298, %dec_label_pc_10ef0, %dec_label_pc_10ecc, %bb291, %dec_label_pc_10e9c, %bb290, %dec_label_pc_10e84, %bb289, %bb308, %dec_label_pc_10e2c
  %v0_10e5c = call i32 @function_105b4()
  store i32 %v0_10e5c, i32* %r0.global-to-local, align 4
  %v1_10e60 = urem i32 %v0_10e5c, 256
  store i32 %v1_10e60, i32* %r1.global-to-local, align 4
  %v3_10e64 = udiv i32 %v0_10e5c, 256
  store i32 %v3_10e64, i32* %r3.global-to-local, align 4
  %v3_10e68 = udiv i32 %v0_10e5c, 65536
  store i32 %v3_10e68, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e6c = icmp eq i32 %v1_10e60, 0
  store i1 %v2_10e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e6c, label %bb289, label %bb288

bb288:                                            ; preds = %dec_label_pc_10e5c
  %v3_10e70 = icmp ugt i32 %v1_10e60, 126
  store i1 %v3_10e70, i1* %cpsr_c.global-to-local, align 1
  %v8_10e70 = icmp eq i32 %v1_10e60, 127
  store i1 %v8_10e70, i1* %cpsr_z.global-to-local, align 1
  br label %bb289

bb289:                                            ; preds = %dec_label_pc_10e5c, %bb288
  %v0_10e80 = phi i1 [ true, %dec_label_pc_10e5c ], [ %v8_10e70, %bb288 ]
  %v1_10e74 = urem i32 %v3_10e64, 256
  store i32 %v1_10e74, i32* %ip.global-to-local, align 4
  %v1_10e78 = urem i32 %v3_10e68, 256
  store i32 %v1_10e78, i32* %r2.global-to-local, align 4
  %v1_10e7c = and i32 %v0_10e5c, 8388608
  %v2_10e7c = icmp ne i32 %v1_10e7c, 0
  store i1 %v2_10e7c, i1* %cpsr_c.global-to-local, align 1
  %v3_10e7c = udiv i32 %v0_10e5c, 16777216
  store i32 %v3_10e7c, i32* %r0.global-to-local, align 4
  br i1 %v0_10e80, label %dec_label_pc_10e5c, label %dec_label_pc_10e84

dec_label_pc_10e84:                               ; preds = %bb289
  %v2_10e84 = icmp ugt i32 %v1_10e60, 2
  store i1 %v2_10e84, i1* %cpsr_c.global-to-local, align 1
  %v7_10e84 = icmp eq i32 %v1_10e60, 3
  store i1 %v7_10e84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e84, label %dec_label_pc_10e5c, label %dec_label_pc_10e8c

dec_label_pc_10e8c:                               ; preds = %dec_label_pc_10e84
  %v1_10e8c = add nsw i32 %v1_10e60, -15
  store i32 %v1_10e8c, i32* %r3.global-to-local, align 4
  %v2_10e90 = icmp ugt i32 %v1_10e60, 55
  store i1 %v2_10e90, i1* %cpsr_c.global-to-local, align 1
  %v7_10e90 = icmp eq i32 %v1_10e60, 56
  store i1 %v7_10e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e90, label %dec_label_pc_10e5c, label %bb290

bb290:                                            ; preds = %dec_label_pc_10e8c
  %v3_10e94 = icmp ne i32 %v1_10e8c, 0
  store i1 %v3_10e94, i1* %cpsr_c.global-to-local, align 1
  %v8_10e94 = icmp eq i32 %v1_10e8c, 1
  store i1 %v8_10e94, i1* %cpsr_z.global-to-local, align 1
  %v2_10e98 = xor i1 %v3_10e94, true
  %v3_10e98 = or i1 %v8_10e94, %v2_10e98
  br i1 %v3_10e98, label %dec_label_pc_10e5c, label %dec_label_pc_10e9c

dec_label_pc_10e9c:                               ; preds = %bb290
  %v2_10e9c = icmp ugt i32 %v1_10e60, 9
  store i1 %v2_10e9c, i1* %cpsr_c.global-to-local, align 1
  %v7_10e9c = icmp eq i32 %v1_10e60, 10
  store i1 %v7_10e9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e9c, label %dec_label_pc_10e5c, label %dec_label_pc_10ea4

dec_label_pc_10ea4:                               ; preds = %dec_label_pc_10e9c
  %v2_10ea4 = icmp ugt i32 %v1_10e60, 191
  store i1 %v2_10ea4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ea4 = icmp eq i32 %v1_10e60, 192
  store i1 %v7_10ea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ea4, label %bb291, label %dec_label_pc_10eb0

bb291:                                            ; preds = %dec_label_pc_10ea4
  %v3_10ea8 = icmp ugt i32 %v1_10e74, 167
  store i1 %v3_10ea8, i1* %cpsr_c.global-to-local, align 1
  %v8_10ea8 = icmp eq i32 %v1_10e74, 168
  store i1 %v8_10ea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10ea8, label %dec_label_pc_10e5c, label %dec_label_pc_10eb0

dec_label_pc_10eb0:                               ; preds = %dec_label_pc_10ea4, %bb291
  %v7_10eb0 = icmp eq i32 %v1_10e60, 172
  %.364 = zext i1 %v7_10eb0 to i32
  store i32 %.364, i32* %r3.global-to-local, align 4
  %v2_10ebc = icmp ugt i32 %v1_10e74, 14
  store i1 %v2_10ebc, i1* %cpsr_c.global-to-local, align 1
  %v7_10ebc = icmp eq i32 %v1_10e74, 15
  store i1 %v7_10ebc, i1* %cpsr_z.global-to-local, align 1
  %v2_10ec0 = xor i1 %v2_10ebc, true
  %v3_10ec0 = or i1 %v7_10ebc, %v2_10ec0
  br i1 %v3_10ec0, label %.thread15, label %bb294

.thread15:                                        ; preds = %dec_label_pc_10eb0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ed4

bb294:                                            ; preds = %dec_label_pc_10eb0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10ec4 = icmp eq i1 %v7_10eb0, false
  store i1 %v2_10ec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ec4, label %dec_label_pc_10ed4, label %dec_label_pc_10ecc

dec_label_pc_10ecc:                               ; preds = %bb294
  %v2_10ecc = icmp ugt i32 %v1_10e74, 30
  store i1 %v2_10ecc, i1* %cpsr_c.global-to-local, align 1
  %v7_10ecc = icmp eq i32 %v1_10e74, 31
  store i1 %v7_10ecc, i1* %cpsr_z.global-to-local, align 1
  %v2_10ed0 = xor i1 %v2_10ecc, true
  %v3_10ed0 = or i1 %v7_10ecc, %v2_10ed0
  br i1 %v3_10ed0, label %dec_label_pc_10e5c, label %dec_label_pc_10ed4

dec_label_pc_10ed4:                               ; preds = %.thread15, %dec_label_pc_10ecc, %bb294
  %v7_10ed4 = icmp eq i32 %v1_10e60, 100
  %.365 = zext i1 %v7_10ed4 to i32
  store i32 %.365, i32* %r3.global-to-local, align 4
  %v2_10ee0 = icmp ugt i32 %v1_10e74, 62
  store i1 %v2_10ee0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ee0 = icmp eq i32 %v1_10e74, 63
  store i1 %v7_10ee0, i1* %cpsr_z.global-to-local, align 1
  %v2_10ee4 = xor i1 %v2_10ee0, true
  %v3_10ee4 = or i1 %v7_10ee0, %v2_10ee4
  br i1 %v3_10ee4, label %.thread20, label %bb297

.thread20:                                        ; preds = %dec_label_pc_10ed4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10ef8

bb297:                                            ; preds = %dec_label_pc_10ed4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10ee8 = icmp eq i1 %v7_10ed4, false
  store i1 %v2_10ee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10ee8, label %dec_label_pc_10ef8, label %dec_label_pc_10ef0

dec_label_pc_10ef0:                               ; preds = %bb297
  %v2_10ef0 = icmp ugt i32 %v1_10e74, 125
  store i1 %v2_10ef0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ef0 = icmp eq i32 %v1_10e74, 126
  store i1 %v7_10ef0, i1* %cpsr_z.global-to-local, align 1
  %v2_10ef4 = xor i1 %v2_10ef0, true
  %v3_10ef4 = or i1 %v7_10ef0, %v2_10ef4
  br i1 %v3_10ef4, label %dec_label_pc_10e5c, label %dec_label_pc_10ef8

dec_label_pc_10ef8:                               ; preds = %.thread20, %dec_label_pc_10ef0, %bb297
  %v2_10ef8 = icmp ugt i32 %v1_10e60, 168
  store i1 %v2_10ef8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ef8 = icmp eq i32 %v1_10e60, 169
  store i1 %v7_10ef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ef8, label %bb298, label %dec_label_pc_10f04

bb298:                                            ; preds = %dec_label_pc_10ef8
  %v3_10efc = icmp eq i32 %v1_10e74, 255
  store i1 %v3_10efc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10efc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10efc, label %dec_label_pc_10e5c, label %dec_label_pc_10f04

dec_label_pc_10f04:                               ; preds = %dec_label_pc_10ef8, %bb298
  %v7_10f04 = icmp eq i32 %v1_10e60, 198
  %.366 = zext i1 %v7_10f04 to i32
  store i32 %.366, i32* %r3.global-to-local, align 4
  %v2_10f10 = icmp ugt i32 %v1_10e74, 16
  store i1 %v2_10f10, i1* %cpsr_c.global-to-local, align 1
  %v7_10f10 = icmp eq i32 %v1_10e74, 17
  store i1 %v7_10f10, i1* %cpsr_z.global-to-local, align 1
  %v2_10f14 = xor i1 %v2_10f10, true
  %v3_10f14 = or i1 %v7_10f10, %v2_10f14
  br i1 %v3_10f14, label %.thread26, label %bb301

.thread26:                                        ; preds = %dec_label_pc_10f04
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10f28

bb301:                                            ; preds = %dec_label_pc_10f04
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10f18 = icmp eq i1 %v7_10f04, false
  store i1 %v2_10f18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10f18, label %dec_label_pc_10f28, label %dec_label_pc_10f20

dec_label_pc_10f20:                               ; preds = %bb301
  %v2_10f20 = icmp ugt i32 %v1_10e74, 18
  store i1 %v2_10f20, i1* %cpsr_c.global-to-local, align 1
  %v7_10f20 = icmp eq i32 %v1_10e74, 19
  store i1 %v7_10f20, i1* %cpsr_z.global-to-local, align 1
  %v2_10f24 = xor i1 %v2_10f20, true
  %v3_10f24 = or i1 %v7_10f20, %v2_10f24
  br i1 %v3_10f24, label %dec_label_pc_10e5c, label %dec_label_pc_10f28

dec_label_pc_10f28:                               ; preds = %.thread26, %dec_label_pc_10f20, %bb301
  %v2_10f28 = icmp ugt i32 %v1_10e60, 222
  store i1 %v2_10f28, i1* %cpsr_c.global-to-local, align 1
  %v7_10f28 = icmp eq i32 %v1_10e60, 223
  store i1 %v7_10f28, i1* %cpsr_z.global-to-local, align 1
  %v2_10f2c = xor i1 %v7_10f28, true
  %v3_10f2c = and i1 %v2_10f28, %v2_10f2c
  br i1 %v3_10f2c, label %dec_label_pc_10e5c, label %dec_label_pc_10f30

dec_label_pc_10f30:                               ; preds = %dec_label_pc_10f28
  %v1_10f30 = add nsw i32 %v1_10e60, -6
  store i32 %v1_10f30, i32* %r3.global-to-local, align 4
  %v2_10f34 = icmp ugt i32 %v1_10e60, 10
  store i1 %v2_10f34, i1* %cpsr_c.global-to-local, align 1
  %v7_10f34 = icmp eq i32 %v1_10e60, 11
  store i1 %v7_10f34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f34, label %dec_label_pc_10e5c, label %bb302

bb302:                                            ; preds = %dec_label_pc_10f30
  %v3_10f38 = icmp ne i32 %v1_10f30, 0
  store i1 %v3_10f38, i1* %cpsr_c.global-to-local, align 1
  %v8_10f38 = icmp eq i32 %v1_10f30, 1
  store i1 %v8_10f38, i1* %cpsr_z.global-to-local, align 1
  %v2_10f3c = xor i1 %v3_10f38, true
  %v3_10f3c = or i1 %v8_10f38, %v2_10f3c
  br i1 %v3_10f3c, label %dec_label_pc_10e5c, label %dec_label_pc_10f40

dec_label_pc_10f40:                               ; preds = %bb302
  %v2_10f40 = icmp ugt i32 %v1_10e60, 21
  store i1 %v2_10f40, i1* %cpsr_c.global-to-local, align 1
  %v7_10f40 = icmp eq i32 %v1_10e60, 22
  store i1 %v7_10f40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f40, label %dec_label_pc_10e5c, label %bb303

bb303:                                            ; preds = %dec_label_pc_10f40
  %v3_10f44 = icmp ugt i32 %v1_10e60, 20
  store i1 %v3_10f44, i1* %cpsr_c.global-to-local, align 1
  %v8_10f44 = icmp eq i32 %v1_10e60, 21
  store i1 %v8_10f44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f44, label %dec_label_pc_10e5c, label %dec_label_pc_10f4c

dec_label_pc_10f4c:                               ; preds = %bb303
  %v2_10f4c = icmp ugt i32 %v1_10e60, 27
  store i1 %v2_10f4c, i1* %cpsr_c.global-to-local, align 1
  %v7_10f4c = icmp eq i32 %v1_10e60, 28
  store i1 %v7_10f4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f4c, label %dec_label_pc_10e5c, label %bb304

bb304:                                            ; preds = %dec_label_pc_10f4c
  %v3_10f50 = icmp ugt i32 %v1_10e60, 25
  store i1 %v3_10f50, i1* %cpsr_c.global-to-local, align 1
  %v8_10f50 = icmp eq i32 %v1_10e60, 26
  store i1 %v8_10f50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f50, label %dec_label_pc_10e5c, label %dec_label_pc_10f58

dec_label_pc_10f58:                               ; preds = %bb304
  %v2_10f58 = icmp ugt i32 %v1_10e60, 29
  store i1 %v2_10f58, i1* %cpsr_c.global-to-local, align 1
  %v7_10f58 = icmp eq i32 %v1_10e60, 30
  store i1 %v7_10f58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f58, label %dec_label_pc_10e5c, label %bb305

bb305:                                            ; preds = %dec_label_pc_10f58
  %v3_10f5c = icmp ugt i32 %v1_10e60, 28
  store i1 %v3_10f5c, i1* %cpsr_c.global-to-local, align 1
  %v8_10f5c = icmp eq i32 %v1_10e60, 29
  store i1 %v8_10f5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f5c, label %dec_label_pc_10e5c, label %dec_label_pc_10f64

dec_label_pc_10f64:                               ; preds = %bb305
  %v2_10f64 = icmp ugt i32 %v1_10e60, 54
  store i1 %v2_10f64, i1* %cpsr_c.global-to-local, align 1
  %v7_10f64 = icmp eq i32 %v1_10e60, 55
  store i1 %v7_10f64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f64, label %dec_label_pc_10e5c, label %bb306

bb306:                                            ; preds = %dec_label_pc_10f64
  %v3_10f68 = icmp ugt i32 %v1_10e60, 32
  store i1 %v3_10f68, i1* %cpsr_c.global-to-local, align 1
  %v8_10f68 = icmp eq i32 %v1_10e60, 33
  store i1 %v8_10f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f68, label %dec_label_pc_10e5c, label %dec_label_pc_10f70

dec_label_pc_10f70:                               ; preds = %bb306
  %v2_10f70 = icmp ugt i32 %v1_10e60, 214
  store i1 %v2_10f70, i1* %cpsr_c.global-to-local, align 1
  %v7_10f70 = icmp eq i32 %v1_10e60, 215
  store i1 %v7_10f70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f70, label %.thread37, label %bb307

bb307:                                            ; preds = %dec_label_pc_10f70
  %v3_10f74 = icmp ugt i32 %v1_10e60, 213
  store i1 %v3_10f74, i1* %cpsr_c.global-to-local, align 1
  %v8_10f74 = icmp eq i32 %v1_10e60, 214
  store i1 %v8_10f74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10f74, label %bb308, label %dec_label_pc_10f84

.thread37:                                        ; preds = %dec_label_pc_10f70
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e5c

bb308:                                            ; preds = %bb307
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e5c

dec_label_pc_10f84:                               ; preds = %bb307
  store i32 0, i32* @r4, align 4
  %v5_10f90 = call i32 @llvm.bswap.i32(i32 %v0_10e5c)
  store i32 %v5_10f90, i32* %r3.global-to-local, align 4
  %tmp309 = and i32 %v0_10e5c, 65280
  %tmp310 = call i32 @llvm.bswap.i32(i32 %tmp309)
  %tmp311 = and i32 %v0_10e5c, 16711680
  %tmp312 = call i32 @llvm.bswap.i32(i32 %tmp311)
  %v3_10f9c = mul nuw i32 %v3_10e7c, 16777216
  %v3_10fa0 = udiv i32 %tmp310, 256
  %v4_10fa4 = mul nuw nsw i32 %tmp312, 256
  %tmp313 = and i32 %v0_10e5c, 32768
  %v3_10fa8 = icmp ne i32 %tmp313, 0
  store i1 %v3_10fa8, i1* %cpsr_c.global-to-local, align 1
  %v4_10fa8 = udiv i32 %v5_10f90, 16777216
  store i32 ptrtoint (i32* @global_var_1c1e8.221 to i32), i32* @r0, align 4
  %v5_10fa8 = or i32 %v4_10fa8, %v3_10f9c
  %v5_10fa4 = or i32 %v5_10fa8, %v4_10fa4
  %v2_10fb0 = or i32 %v5_10fa4, %v3_10fa0
  store i32 %v2_10fb0, i32* %r2.global-to-local, align 4
  %v4_10fb4 = trunc i32 %v4_10fa8 to i8
  store i8 %v4_10fb4, i8* @global_var_1c1f8.302, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1c1f2.303 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1c1f3.304 to i8*), align 4
  %v2_10fc4 = call i32 @function_f188(i32 ptrtoint (i32* @global_var_1c1e8.221 to i32), i32 20)
  store i32 ptrtoint (i32* @global_var_1c1e8.221 to i32), i32* %ip.global-to-local, align 4
  %sext11 = mul i32 %v2_10fc4, 16777216
  %v1_10fcc = sdiv i32 %sext11, 16777216
  store i32 %v1_10fcc, i32* %r3.global-to-local, align 4
  %v4_10fd0 = ashr i32 %sext11, 31
  store i32 %v4_10fd0, i32* %r2.global-to-local, align 4
  %v1_10fd4 = trunc i32 %v1_10fcc to i8
  store i8 %v1_10fd4, i8* bitcast (i32* @global_var_1c1f2.303 to i8*), align 4
  %v1_10fd8 = trunc i32 %v4_10fd0 to i8
  store i8 %v1_10fd8, i8* bitcast (i32* @global_var_1c1f3.304 to i8*), align 4
  %v3_10fdc = load i32, i32* %stack_var_-48, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_10fe4 = srem i32 %v3_10fdc, 10
  store i32 %v2_10fe4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10fe8 = icmp eq i32 %v2_10fe4, 0
  store i1 %v2_10fe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fe8, label %.thread218, label %bb314

.thread218:                                       ; preds = %dec_label_pc_10f84
  store i32 ptrtoint (i32* @global_var_1c1fc.225 to i32), i32* @lr, align 4
  br label %.thread47.thread90

bb314:                                            ; preds = %dec_label_pc_10f84
  store i32 ptrtoint (i32* @global_var_1c1fc.225 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_10ff8 = load i32, i32* @r4, align 4
  %v2_10ff8 = trunc i32 %v1_10ff8 to i8
  store i8 %v2_10ff8, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1c1fc.225 to i32), i32 2) to i8*), align 2
  %v0_10ffc.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10ffc.pr.pre, label %.thread47.thread90, label %.thread44

.thread44:                                        ; preds = %bb314
  %v1_10ffc = load i32, i32* %r3.global-to-local, align 4
  %v2_10ffc = trunc i32 %v1_10ffc to i8
  %v3_10ffc = load i32, i32* %r0.global-to-local, align 4
  %v4_10ffc = add i32 %v3_10ffc, 3
  %v5_10ffc = inttoptr i32 %v4_10ffc to i8*
  store i8 %v2_10ffc, i8* %v5_10ffc, align 1
  %v0_11004.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1c1e8.221 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_11004.pr.pr, label %.thread50, label %.thread52

.thread47.thread90:                               ; preds = %bb314, %.thread218
  store i32 ptrtoint (i32* @global_var_1c1e8.221 to i32), i32* %r0.global-to-local, align 4
  br label %.thread50

.thread50:                                        ; preds = %.thread44, %.thread47.thread90
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_1100c = load i32, i32* @lr, align 4
  %v4_1100c = add i32 %v3_1100c, 2
  %v5_1100c = inttoptr i32 %v4_1100c to i8*
  store i8 9, i8* %v5_1100c, align 1
  %v0_11010.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11010.pr.pr, label %bb315, label %.thread52

bb315:                                            ; preds = %.thread50
  %v1_11010 = load i32, i32* %r2.global-to-local, align 4
  %v2_11010 = trunc i32 %v1_11010 to i8
  %v3_11010 = load i32, i32* @lr, align 4
  %v4_11010 = add i32 %v3_11010, 3
  %v5_11010 = inttoptr i32 %v4_11010 to i8*
  store i8 %v2_11010, i8* %v5_11010, align 1
  br label %.thread52

.thread52:                                        ; preds = %.thread44, %.thread50, %bb315
  %v3_11014 = load i8, i8* @global_var_1c1f8.302, align 1
  %v4_11014 = sext i8 %v3_11014 to i32
  store i32 %v4_11014, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1fc.225 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1fc.225 to i32), i32* @r1, align 4
  store i8 %v3_11014, i8* @global_var_1c200.305, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_1102c = load i32, i32* %sl.global-to-local, align 4
  %v1_1102c = trunc i32 %v0_1102c to i8
  store i8 %v1_1102c, i8* bitcast (i32* @global_var_1c20c.306 to i8*), align 4
  store i8 %v1_1102c, i8* bitcast (i32* @global_var_1c20d.307 to i8*), align 4
  %v4_11034 = call i32 @function_f1e4(i32 ptrtoint (i32* @global_var_1c1e8.221 to i32), i32 ptrtoint (i32* @global_var_1c1fc.225 to i32), i32 5120, i32 20)
  %sext = mul i32 %v4_11034, 16777216
  %v1_1103c = sdiv i32 %sext, 16777216
  %v3_11044 = ashr i32 %sext, 31
  %v2_11048 = load i32, i32* @global_var_1c1fc.225, align 4
  %v1_11050 = trunc i32 %v3_11044 to i8
  store i8 %v1_11050, i8* bitcast (i32* @global_var_1c20d.307 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_11064 = load i8, i8* @global_var_1c1f8.302, align 1
  %v4_11064 = sext i8 %v3_11064 to i32
  store i32 %v4_11064, i32* %r4.global-to-local, align 4
  %v2_11068 = load i32, i32* @global_var_1c238.219, align 4
  store i32 %v2_11068, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c1fc.225 to i32), i32* %ip.global-to-local, align 4
  %v1_11078 = and i32 %v2_11048, 8388608
  %v2_11078 = icmp ne i32 %v1_11078, 0
  store i1 %v2_11078, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1c1e8.221 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_1108c = trunc i32 %v1_1103c to i8
  store i8 %v1_1108c, i8* bitcast (i32* @global_var_1c20c.306 to i8*), align 4
  store i32 %v2_11094, i32* %lr.global-to-local, align 4
  %v9_110a4 = call i32 @sendto(i32 %v2_11068, i32* nonnull @global_var_1c1e8.221, i32 40, i32 16384, %sockaddr* %tmp287, i32 16)
  store i32 %v9_110a4, i32* %r0.global-to-local, align 4
  %v3_110a8 = load i32, i32* %stack_var_-48, align 4
  %v1_110ac = add i32 %v3_110a8, 1
  store i32 %v1_110ac, i32* %r3.global-to-local, align 4
  %v3_110b0 = icmp ugt i32 %v1_110ac, 383
  store i1 %v3_110b0, i1* %cpsr_c.global-to-local, align 1
  %v8_110b0 = icmp eq i32 %v1_110ac, 384
  store i1 %v8_110b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_110ac, i32* %stack_var_-48, align 4
  %v5_110b8 = icmp slt i32 %v1_110ac, 384
  br i1 %v5_110b8, label %.thread52.dec_label_pc_10e2c_crit_edge, label %dec_label_pc_110bc

.thread52.dec_label_pc_10e2c_crit_edge:           ; preds = %.thread52
  %v0_10e2c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10e2c

dec_label_pc_110bc:                               ; preds = %.thread52
  %v0_110bc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_110bc, i32* @fp, align 4
  br label %dec_label_pc_110c0

dec_label_pc_110c0:                               ; preds = %dec_label_pc_10e10, %dec_label_pc_110bc
  %v0_110c0 = call i32* @__errno_location()
  %v2_110c0 = ptrtoint i32* %v0_110c0 to i32
  store i32 %v2_110c0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v2_110c0, i32* @sb, align 4
  br label %dec_label_pc_110cc

dec_label_pc_110cc:                               ; preds = %dec_label_pc_111a8, %dec_label_pc_111a0, %dec_label_pc_11198, %dec_label_pc_11164, %dec_label_pc_11154, %dec_label_pc_11130, %dec_label_pc_11118, %dec_label_pc_11190, %dec_label_pc_11180, %dec_label_pc_11110, %dec_label_pc_11248, %dec_label_pc_110c0
  %v1_110d0 = phi i32 [ %v2_110c0, %dec_label_pc_110c0 ], [ %v1_110d0.pre.pre, %dec_label_pc_11248 ], [ %v0_11104, %dec_label_pc_11110 ], [ %v0_11104, %dec_label_pc_11180 ], [ %v0_11104, %dec_label_pc_11190 ], [ %v0_11104, %dec_label_pc_11118 ], [ %v0_11104, %dec_label_pc_11130 ], [ %v0_11104, %dec_label_pc_11154 ], [ %v0_11104, %dec_label_pc_11164 ], [ %v0_11104, %dec_label_pc_11198 ], [ %v0_11104, %dec_label_pc_111a0 ], [ %v0_11104, %dec_label_pc_111a8 ]
  %v2_110d0 = inttoptr i32 %v1_110d0 to i32*
  store i32 0, i32* %v2_110d0, align 4
  %v2_110dc = load i32, i32* @global_var_1c238.219, align 4
  store i32 %v2_110dc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_10e00, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v10_110f8 = call i32 @recvfrom(i32 %v2_110dc, i32* nonnull %stack_var_-1862, i32 1514, i32 16384, %sockaddr* null, i32* null)
  store i32 %v10_110f8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_110fc = icmp eq i32 %v10_110f8, 0
  store i1 %v2_110fc, i1* %cpsr_z.global-to-local, align 1
  %tmp316 = icmp slt i32 %v10_110f8, 1
  br i1 %tmp316, label %dec_label_pc_1127c, label %dec_label_pc_11104

dec_label_pc_11104:                               ; preds = %dec_label_pc_110cc
  %v0_11104 = load i32, i32* @sb, align 4
  %v1_11104 = inttoptr i32 %v0_11104 to i32*
  %v2_11104 = load i32, i32* %v1_11104, align 4
  store i32 %v2_11104, i32* %r3.global-to-local, align 4
  %v2_11108 = icmp ugt i32 %v2_11104, 10
  store i1 %v2_11108, i1* %cpsr_c.global-to-local, align 1
  %v7_11108 = icmp eq i32 %v2_11104, 11
  store i1 %v7_11108, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11108, label %dec_label_pc_1127c, label %dec_label_pc_11110

dec_label_pc_11110:                               ; preds = %dec_label_pc_11104
  %v2_11110 = icmp ugt i32 %v10_110f8, 38
  store i1 %v2_11110, i1* %cpsr_c.global-to-local, align 1
  %v7_11110 = icmp eq i32 %v10_110f8, 39
  store i1 %v7_11110, i1* %cpsr_z.global-to-local, align 1
  %v2_11114 = xor i1 %v2_11110, true
  %v3_11114 = or i1 %v7_11110, %v2_11114
  br i1 %v3_11114, label %dec_label_pc_110cc, label %dec_label_pc_11118

dec_label_pc_11118:                               ; preds = %dec_label_pc_11110
  store i32 %v2_10e00, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c21c.133 to i32), i32* %r0.global-to-local, align 4
  %v3_11120 = load i32, i32* %v2_11120, align 4
  store i32 %v3_11120, i32* %r2.global-to-local, align 4
  %v2_11124 = load i32, i32* @global_var_1c21c.133, align 4
  store i32 %v2_11124, i32* %r3.global-to-local, align 4
  %v3_11128 = icmp uge i32 %v3_11120, %v2_11124
  store i1 %v3_11128, i1* %cpsr_c.global-to-local, align 1
  %v9_11128 = icmp eq i32 %v3_11120, %v2_11124
  store i1 %v9_11128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11128, label %dec_label_pc_11130, label %dec_label_pc_110cc

dec_label_pc_11130:                               ; preds = %dec_label_pc_11118
  %v3_11130 = load i8, i8* %v2_11130, align 1
  %v4_11130 = zext i8 %v3_11130 to i32
  store i32 %v4_11130, i32* %r3.global-to-local, align 4
  %v2_11134 = icmp ugt i8 %v3_11130, 5
  store i1 %v2_11134, i1* %cpsr_c.global-to-local, align 1
  %v7_11134 = icmp eq i8 %v3_11130, 6
  store i1 %v7_11134, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11134, label %dec_label_pc_1113c, label %dec_label_pc_110cc

dec_label_pc_1113c:                               ; preds = %dec_label_pc_11130
  store i32 %v2_10e04, i32* %r1.global-to-local, align 4
  %v2_11140 = load i8, i8* %tmp286, align 4
  %v3_11140 = zext i8 %v2_11140 to i32
  store i32 %v3_11140, i32* %r2.global-to-local, align 4
  %v3_11144 = load i8, i8* %v2_11144, align 1
  %v4_11144 = zext i8 %v3_11144 to i32
  store i32 %v4_11144, i32* %r3.global-to-local, align 4
  %v4_11148 = mul nuw nsw i32 %v4_11144, 256
  %v5_11148 = or i32 %v4_11148, %v3_11140
  store i32 %v5_11148, i32* %r2.global-to-local, align 4
  %v2_1114c = icmp ugt i32 %v5_11148, 5887
  store i1 %v2_1114c, i1* %cpsr_c.global-to-local, align 1
  %v7_1114c = icmp eq i32 %v5_11148, 5888
  store i1 %v7_1114c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1114c, label %dec_label_pc_11164, label %dec_label_pc_11154

dec_label_pc_11154:                               ; preds = %dec_label_pc_1113c
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_1115c = icmp ugt i32 %v5_11148, 4872
  store i1 %v3_1115c, i1* %cpsr_c.global-to-local, align 1
  %v9_1115c = icmp eq i32 %v5_11148, 4873
  store i1 %v9_1115c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1115c, label %dec_label_pc_11164, label %dec_label_pc_110cc

dec_label_pc_11164:                               ; preds = %dec_label_pc_11154, %dec_label_pc_1113c
  store i32 %v2_10e04, i32* %r2.global-to-local, align 4
  %v3_11168 = load i8, i8* %v2_11168, align 2
  %v4_11168 = zext i8 %v3_11168 to i32
  store i32 %v4_11168, i32* %r3.global-to-local, align 4
  %v3_1116c = load i8, i8* %v2_1116c, align 1
  %v4_1116c = zext i8 %v3_1116c to i32
  store i32 %v4_1116c, i32* %r2.global-to-local, align 4
  store i32 %v4_10b64, i32* %ip.global-to-local, align 4
  %v4_11174 = mul nuw nsw i32 %v4_1116c, 256
  %v5_11174 = or i32 %v4_11174, %v4_11168
  store i32 %v5_11174, i32* %r3.global-to-local, align 4
  %v3_11178 = icmp uge i32 %v5_11174, %v4_10b64
  store i1 %v3_11178, i1* %cpsr_c.global-to-local, align 1
  %v9_11178 = icmp eq i32 %v5_11174, %v4_10b64
  store i1 %v9_11178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11178, label %dec_label_pc_11180, label %dec_label_pc_110cc

dec_label_pc_11180:                               ; preds = %dec_label_pc_11164
  store i32 %v2_10e04, i32* %lr.global-to-local, align 4
  %v3_11184 = load i8, i8* %v2_11184, align 1
  %v4_11184 = zext i8 %v3_11184 to i32
  store i32 %v4_11184, i32* %r3.global-to-local, align 4
  %v1_11188 = and i32 %v4_11184, 2
  %v2_11188 = icmp eq i32 %v1_11188, 0
  store i1 %v2_11188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11188, label %dec_label_pc_110cc, label %dec_label_pc_11190

dec_label_pc_11190:                               ; preds = %dec_label_pc_11180
  %v1_11190 = and i32 %v4_11184, 16
  %v2_11190 = icmp eq i32 %v1_11190, 0
  store i1 %v2_11190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11190, label %dec_label_pc_110cc, label %dec_label_pc_11198

dec_label_pc_11198:                               ; preds = %dec_label_pc_11190
  %v1_11198 = and i32 %v4_11184, 4
  %v2_11198 = icmp eq i32 %v1_11198, 0
  store i1 %v2_11198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11198, label %dec_label_pc_111a0, label %dec_label_pc_110cc

dec_label_pc_111a0:                               ; preds = %dec_label_pc_11198
  %tmp469 = urem i8 %v3_11184, 2
  %v2_111a0 = icmp eq i8 %tmp469, 0
  store i1 %v2_111a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_111a0, label %dec_label_pc_111a8, label %dec_label_pc_110cc

dec_label_pc_111a8:                               ; preds = %dec_label_pc_111a0
  %v3_111a8 = load i32, i32* %v2_111a8, align 4
  %v2_111c4 = call i32 @llvm.bswap.i32(i32 %v3_111a8)
  %v1_111c8 = add i32 %v2_111c4, -1
  %v1_111cc = udiv i32 %v1_111c8, 256
  %v3_111d0 = and i32 %v1_111cc, 65280
  %v1_111d4 = and i32 %v1_111c8, 65280
  store i32 %v1_111d4, i32* %r2.global-to-local, align 4
  %v3_111d8 = mul i32 %v1_111c8, 16777216
  %v4_111dc = udiv i32 %v1_111c8, 16777216
  %v5_111dc = or i32 %v3_111d0, %v4_111dc
  store i32 %v5_111dc, i32* %r1.global-to-local, align 4
  store i32 %v2_10e00, i32* %r3.global-to-local, align 4
  %v4_111e4 = mul nuw nsw i32 %v1_111d4, 256
  %v5_111e4 = or i32 %v4_111e4, %v3_111d8
  store i32 %v5_111e4, i32* %r0.global-to-local, align 4
  %v3_111e8 = load i32, i32* %v2_111e8, align 4
  store i32 %v3_111e8, i32* %r2.global-to-local, align 4
  %v2_111ec = call i32 @llvm.bswap.i32(i32 %v1_111c8)
  store i32 %v2_111ec, i32* %ip.global-to-local, align 4
  %v3_111f0 = icmp uge i32 %v2_111ec, %v3_111e8
  store i1 %v3_111f0, i1* %cpsr_c.global-to-local, align 1
  %v9_111f0 = icmp eq i32 %v2_111ec, %v3_111e8
  store i1 %v9_111f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_111f0, label %dec_label_pc_111f8, label %dec_label_pc_110cc

dec_label_pc_111f8:                               ; preds = %dec_label_pc_111a8
  %v0_111f8 = load i32, i32* @r4, align 4
  %v2_111f8 = icmp ugt i32 %v0_111f8, 254
  store i1 %v2_111f8, i1* %cpsr_c.global-to-local, align 1
  %v7_111f8 = icmp eq i32 %v0_111f8, 255
  store i1 %v7_111f8, i1* %cpsr_z.global-to-local, align 1
  %v8_111fc = icmp sgt i32 %v0_111f8, 255
  br i1 %v8_111fc, label %dec_label_pc_1127c, label %dec_label_pc_11200

dec_label_pc_11200:                               ; preds = %dec_label_pc_111f8
  store i32 ptrtoint (i32* @global_var_1c234.217 to i32), i32* %lr.global-to-local, align 4
  %v3_11204 = mul i32 %v0_111f8, 256
  store i32 %v3_11204, i32* %r2.global-to-local, align 4
  %v2_11208 = load i32, i32* @global_var_1c234.217, align 4
  store i32 %v2_11208, i32* %r1.global-to-local, align 4
  %v2_11210 = mul i32 %v0_111f8, 288
  store i32 %v2_11210, i32* %r3.global-to-local, align 4
  %v2_11214 = add i32 %v2_11208, %v2_11210
  store i32 %v2_11214, i32* @r0, align 4
  %v1_11218 = add i32 %v2_11214, 12
  %v2_11218 = inttoptr i32 %v1_11218 to i32*
  %v3_11218 = load i32, i32* %v2_11218, align 4
  store i32 %v3_11218, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1121c = icmp eq i32 %v3_11218, 0
  store i1 %v2_1121c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1121c, label %dec_label_pc_11248, label %dec_label_pc_11228.preheader

dec_label_pc_11228.preheader:                     ; preds = %dec_label_pc_11200
  %v2_11220 = add i32 %v2_11214, 288
  store i32 %v2_11220, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11228

dec_label_pc_11228:                               ; preds = %dec_label_pc_11228.preheader, %dec_label_pc_11234
  %v0_11234 = phi i32 [ %v2_11220, %dec_label_pc_11228.preheader ], [ %v1_11240, %dec_label_pc_11234 ]
  %v0_11228 = phi i32 [ %v0_111f8, %dec_label_pc_11228.preheader ], [ %v1_11228, %dec_label_pc_11234 ]
  %v1_11228 = add i32 %v0_11228, 1
  store i32 %v1_11228, i32* @r4, align 4
  %v7_1122c = icmp eq i32 %v1_11228, 256
  br i1 %v7_1122c, label %dec_label_pc_1127c.loopexit, label %dec_label_pc_11234

dec_label_pc_11234:                               ; preds = %dec_label_pc_11228
  store i32 %v0_11234, i32* @r0, align 4
  %v1_11238 = add i32 %v0_11234, 12
  %v2_11238 = inttoptr i32 %v1_11238 to i32*
  %v3_11238 = load i32, i32* %v2_11238, align 4
  %v2_1123c = icmp eq i32 %v3_11238, 0
  %v1_11240 = add i32 %v0_11234, 288
  store i32 %v1_11240, i32* %r3.global-to-local, align 4
  br i1 %v2_1123c, label %dec_label_pc_11248.loopexit, label %dec_label_pc_11228

dec_label_pc_11248.loopexit:                      ; preds = %dec_label_pc_11234
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11248

dec_label_pc_11248:                               ; preds = %dec_label_pc_11248.loopexit, %dec_label_pc_11200
  %v1_11248 = phi i32 [ %v0_11234, %dec_label_pc_11248.loopexit ], [ %v2_11214, %dec_label_pc_11200 ]
  %v2_11248 = add i32 %v1_11248, 16
  %v3_11248 = inttoptr i32 %v2_11248 to i32*
  store i32 %v3_111e8, i32* %v3_11248, align 4
  store i32 %v2_10e04, i32* %r1.global-to-local, align 4
  %v2_11250 = load i32, i32* %stack_var_-1842, align 4
  store i32 %v2_11250, i32* %r2.global-to-local, align 4
  %v1_11254 = and i32 %v2_11250, 128
  %v2_11254 = icmp ne i32 %v1_11254, 0
  store i1 %v2_11254, i1* %cpsr_c.global-to-local, align 1
  %v3_11254 = sdiv i32 %v2_11250, 256
  store i32 %v3_11254, i32* %r3.global-to-local, align 4
  %v1_11258 = trunc i32 %v3_11254 to i8
  %v2_11258 = load i32, i32* @r0, align 4
  %v3_11258 = add i32 %v2_11258, 21
  %v4_11258 = inttoptr i32 %v3_11258 to i8*
  store i8 %v1_11258, i8* %v4_11258, align 1
  %v0_1125c = load i32, i32* %r2.global-to-local, align 4
  %v1_1125c = trunc i32 %v0_1125c to i8
  %v2_1125c = load i32, i32* @r0, align 4
  %v3_1125c = add i32 %v2_1125c, 20
  %v4_1125c = inttoptr i32 %v3_1125c to i8*
  store i8 %v1_1125c, i8* %v4_1125c, align 1
  %v0_11260 = call i32 @function_10748()
  store i32 %v0_11260, i32* %r0.global-to-local, align 4
  %v1_110d0.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_110cc

dec_label_pc_11268:                               ; preds = %dec_label_pc_10ab4
  store i32 ptrtoint (i32* @global_var_1c238.219 to i32), i32* %r2.global-to-local, align 4
  %v2_1126c = load i32, i32* @global_var_1c238.219, align 4
  store i32 %v2_1126c, i32* %r0.global-to-local, align 4
  %v1_11270 = call i32 @close(i32 %v2_1126c)
  store i32 %v1_11270, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11274

dec_label_pc_11274:                               ; preds = %dec_label_pc_10a8c, %dec_label_pc_11268
  %v0_11274 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11274, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_11274)
  unreachable

dec_label_pc_1127c.loopexit:                      ; preds = %dec_label_pc_11228
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1127c

dec_label_pc_1127c:                               ; preds = %dec_label_pc_111f8, %dec_label_pc_11104, %dec_label_pc_110cc, %dec_label_pc_1127c.loopexit
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_11290416 = load i32, i32* @sp, align 4
  %v3_11290417 = add i32 %v2_11290416, 1664
  %v4_11290418 = inttoptr i32 %v3_11290417 to i32*
  store i32 0, i32* %v4_11290418, align 4
  br label %dec_label_pc_11284.dec_label_pc_11284_crit_edge

dec_label_pc_11284.dec_label_pc_11284_crit_edge:  ; preds = %dec_label_pc_1127c, %dec_label_pc_11284.dec_label_pc_11284_crit_edge
  %v0_11284.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_11290.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11284 = add i32 %v0_11284.pre, 1664
  store i32 %v1_11284, i32* %ip.global-to-local, align 4
  %v1_11288 = add i32 %v0_11284.pre, 4
  store i32 %v1_11288, i32* %r3.global-to-local, align 4
  %v7_1128c = icmp eq i32 %v1_11288, 128
  %v2_11290 = load i32, i32* @sp, align 4
  %v3_11290 = add i32 %v2_11290, %v1_11284
  %v4_11290 = inttoptr i32 %v3_11290 to i32*
  store i32 %v0_11290.pre, i32* %v4_11290, align 4
  br i1 %v7_1128c, label %dec_label_pc_11298, label %dec_label_pc_11284.dec_label_pc_11284_crit_edge

dec_label_pc_11298:                               ; preds = %dec_label_pc_11284.dec_label_pc_11284_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_11298 = load i32, i32* %r2.global-to-local, align 4
  %v1_1129c419 = add i32 %v0_11298, 1536
  store i32 %v1_1129c419, i32* %lr.global-to-local, align 4
  %v1_112a0420 = add i32 %v0_11298, 4
  store i32 %v1_112a0420, i32* %r3.global-to-local, align 4
  %v7_112a4421 = icmp eq i32 %v1_112a0420, 128
  %v2_112a8422 = load i32, i32* @sp, align 4
  %v3_112a8423 = add i32 %v2_112a8422, %v1_1129c419
  %v4_112a8424 = inttoptr i32 %v3_112a8423 to i32*
  store i32 %v0_11298, i32* %v4_112a8424, align 4
  br i1 %v7_112a4421, label %dec_label_pc_112b0, label %dec_label_pc_1129c.dec_label_pc_1129c_crit_edge

dec_label_pc_1129c.dec_label_pc_1129c_crit_edge:  ; preds = %dec_label_pc_11298, %dec_label_pc_1129c.dec_label_pc_1129c_crit_edge
  %v0_1129c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_112a8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1129c = add i32 %v0_1129c.pre, 1536
  store i32 %v1_1129c, i32* %lr.global-to-local, align 4
  %v1_112a0 = add i32 %v0_1129c.pre, 4
  store i32 %v1_112a0, i32* %r3.global-to-local, align 4
  %v7_112a4 = icmp eq i32 %v1_112a0, 128
  %v2_112a8 = load i32, i32* @sp, align 4
  %v3_112a8 = add i32 %v2_112a8, %v1_1129c
  %v4_112a8 = inttoptr i32 %v3_112a8 to i32*
  store i32 %v0_112a8.pre, i32* %v4_112a8, align 4
  br i1 %v7_112a4, label %dec_label_pc_112b0, label %dec_label_pc_1129c.dec_label_pc_1129c_crit_edge

dec_label_pc_112b0:                               ; preds = %dec_label_pc_1129c.dec_label_pc_1129c_crit_edge, %dec_label_pc_11298
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_112b0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_112b0, i32* @r6, align 4
  store i32 %v0_112b0, i32* @r5, align 4
  store i32 %v0_112b0, i32* @r7, align 4
  store i32 %v0_112b0, i32* %stack_var_-48, align 4
  br label %dec_label_pc_1132c

dec_label_pc_112c4:                               ; preds = %dec_label_pc_11354, %dec_label_pc_1132c
  %storemerge233 = phi i32 [ 30, %dec_label_pc_1132c ], [ 5, %dec_label_pc_11354 ]
  store i32 %storemerge233, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c218.205 to i32), i32* %r2.global-to-local, align 4
  %v2_112c8 = load i32, i32* @global_var_1c218.205, align 4
  store i32 %v2_112c8, i32* %r3.global-to-local, align 4
  %v1_112cc = add i32 %v2_11340, 8
  %v2_112cc = inttoptr i32 %v1_112cc to i32*
  %v3_112cc = load i32, i32* %v2_112cc, align 4
  store i32 %v3_112cc, i32* %r2.global-to-local, align 4
  %v2_112d0 = sub i32 %v2_112c8, %v3_112cc
  store i32 %v2_112d0, i32* %r3.global-to-local, align 4
  %v3_112d4 = icmp uge i32 %v2_112d0, %storemerge233
  store i1 %v3_112d4, i1* %cpsr_c.global-to-local, align 1
  %v9_112d4 = icmp eq i32 %v2_112d0, %storemerge233
  store i1 %v9_112d4, i1* %cpsr_z.global-to-local, align 1
  %v2_112d8 = xor i1 %v9_112d4, true
  %v3_112d8 = and i1 %v3_112d4, %v2_112d8
  br i1 %v3_112d8, label %dec_label_pc_11398, label %dec_label_pc_112dc

dec_label_pc_112dc:                               ; preds = %dec_label_pc_112c4
  store i1 %v2_11348, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_11348, i1* %cpsr_z.global-to-local, align 1
  %v1_11364 = add i32 %v2_11340, 4
  %v2_11364 = inttoptr i32 %v1_11364 to i32*
  %v3_11364 = load i32, i32* %v2_11364, align 4
  br i1 %v7_11348, label %dec_label_pc_11364, label %dec_label_pc_112e4

dec_label_pc_112e4:                               ; preds = %dec_label_pc_112dc
  store i32 %v3_11364, i32* %ip.global-to-local, align 4
  %v3_112ec = udiv i32 %v3_11364, 32
  store i32 %v2_11374, i32* %r0.global-to-local, align 4
  %v3_112f4 = mul nuw nsw i32 %v3_112ec, 4
  %v2_112f8 = add i32 %v3_112f4, %v2_11374
  store i32 %v2_112f8, i32* %r3.global-to-local, align 4
  %v1_112fc = add i32 %v2_112f8, -184
  %v2_112fc = inttoptr i32 %v1_112fc to i32*
  %v3_112fc = load i32, i32* %v2_112fc, align 4
  %v1_11300 = urem i32 %v3_11364, 32
  store i32 %v1_11300, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_11308 = shl i32 1, %v1_11300
  %v8_11308 = or i32 %v3_112fc, %v7_11308
  store i32 %v8_11308, i32* %r2.global-to-local, align 4
  store i32 %v8_11308, i32* %v2_112fc, align 4
  %v0_11310 = load i32, i32* @r6, align 4
  %v1_11310 = load i32, i32* %ip.global-to-local, align 4
  %v2_11310 = sub i32 %v0_11310, %v1_11310
  %v3_11310 = icmp uge i32 %v0_11310, %v1_11310
  store i1 %v3_11310, i1* %cpsr_c.global-to-local, align 1
  %v4_11310 = xor i32 %v1_11310, %v0_11310
  %v5_11310 = xor i32 %v2_11310, %v0_11310
  %v6_11310 = and i32 %v5_11310, %v4_11310
  %v7_11310 = icmp slt i32 %v6_11310, 0
  %v8_11310 = icmp slt i32 %v2_11310, 0
  %v9_11310 = icmp eq i32 %v0_11310, %v1_11310
  store i1 %v9_11310, i1* %cpsr_z.global-to-local, align 1
  %v2_11314 = xor i1 %v8_11310, %v7_11310
  br i1 %v2_11314, label %bb324, label %bb325

bb324:                                            ; preds = %dec_label_pc_112e4
  store i32 %v1_11310, i32* @r6, align 4
  br label %bb325

bb325:                                            ; preds = %dec_label_pc_11354, %dec_label_pc_120bc, %dec_label_pc_113cc, %bb327, %dec_label_pc_112e4, %bb324
  %v3_11318 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11318, i32* %r3.global-to-local, align 4
  %v1_1131c = add i32 %v3_11318, 1
  store i32 %v1_1131c, i32* %r2.global-to-local, align 4
  %v2_11320 = icmp ugt i32 %v1_1131c, 254
  store i1 %v2_11320, i1* %cpsr_c.global-to-local, align 1
  %v7_11320 = icmp eq i32 %v1_1131c, 255
  store i1 %v7_11320, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_1131c, i32* %stack_var_-48, align 4
  %v8_11328 = icmp sgt i32 %v1_1131c, 255
  br i1 %v8_11328, label %dec_label_pc_113d8, label %dec_label_pc_1132c

dec_label_pc_1132c:                               ; preds = %bb325, %dec_label_pc_112b0
  %v0_11338 = phi i32 [ %v1_1131c, %bb325 ], [ %v0_112b0, %dec_label_pc_112b0 ]
  store i32 ptrtoint (i32* @global_var_1c234.217 to i32), i32* %r0.global-to-local, align 4
  %v3_11330 = mul i32 %v0_11338, 256
  store i32 %v3_11330, i32* %r3.global-to-local, align 4
  %v2_11334 = load i32, i32* @global_var_1c234.217, align 4
  store i32 %v2_11334, i32* %r1.global-to-local, align 4
  %v2_1133c = mul i32 %v0_11338, 288
  store i32 %v2_1133c, i32* %r2.global-to-local, align 4
  %v2_11340 = add i32 %v2_11334, %v2_1133c
  store i32 %v2_11340, i32* @r4, align 4
  %v1_11344 = add i32 %v2_11340, 12
  %v2_11344 = inttoptr i32 %v1_11344 to i32*
  %v3_11344 = load i32, i32* %v2_11344, align 4
  store i32 %v3_11344, i32* %ip.global-to-local, align 4
  %v2_11348 = icmp ne i32 %v3_11344, 0
  store i1 %v2_11348, i1* %cpsr_c.global-to-local, align 1
  %v7_11348 = icmp eq i32 %v3_11344, 1
  store i1 %v7_11348, i1* %cpsr_z.global-to-local, align 1
  %v2_1134c = xor i1 %v7_11348, true
  %v3_1134c = and i1 %v2_11348, %v2_1134c
  br i1 %v3_1134c, label %dec_label_pc_112c4, label %dec_label_pc_11354

dec_label_pc_11354:                               ; preds = %dec_label_pc_1132c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11354 = icmp eq i32 %v3_11344, 0
  store i1 %v2_11354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11354, label %bb325, label %dec_label_pc_112c4

dec_label_pc_11364:                               ; preds = %dec_label_pc_112dc
  store i32 %v3_11364, i32* %r0.global-to-local, align 4
  %v3_1136c = udiv i32 %v3_11364, 32
  %v3_11370 = mul nuw nsw i32 %v3_1136c, 4
  store i32 %v2_11374, i32* %lr.global-to-local, align 4
  %v2_11378 = add i32 %v3_11370, %v2_11374
  store i32 %v2_11378, i32* %r3.global-to-local, align 4
  %v1_1137c = add i32 %v2_11378, -312
  %v2_1137c = inttoptr i32 %v1_1137c to i32*
  %v3_1137c = load i32, i32* %v2_1137c, align 4
  %v1_11380 = urem i32 %v3_11364, 32
  store i32 %v1_11380, i32* %r1.global-to-local, align 4
  %v7_11384 = shl i32 1, %v1_11380
  %v8_11384 = or i32 %v3_1137c, %v7_11384
  store i32 %v8_11384, i32* %r2.global-to-local, align 4
  %v0_11388 = load i32, i32* @r5, align 4
  %v2_11388 = sub i32 %v0_11388, %v3_11364
  %v3_11388 = icmp uge i32 %v0_11388, %v3_11364
  store i1 %v3_11388, i1* %cpsr_c.global-to-local, align 1
  %v4_11388 = xor i32 %v0_11388, %v3_11364
  %v5_11388 = xor i32 %v2_11388, %v0_11388
  %v6_11388 = and i32 %v5_11388, %v4_11388
  %v7_11388 = icmp slt i32 %v6_11388, 0
  %v8_11388 = icmp slt i32 %v2_11388, 0
  %v9_11388 = icmp eq i32 %v0_11388, %v3_11364
  store i1 %v9_11388, i1* %cpsr_z.global-to-local, align 1
  %v2_1138c = xor i1 %v8_11388, %v7_11388
  br i1 %v2_1138c, label %bb326, label %bb327

bb326:                                            ; preds = %dec_label_pc_11364
  store i32 %v3_11364, i32* @r5, align 4
  br label %bb327

bb327:                                            ; preds = %dec_label_pc_11364, %bb326
  store i32 %v8_11384, i32* %v2_1137c, align 4
  br label %bb325

dec_label_pc_11398:                               ; preds = %dec_label_pc_112c4
  %v1_11398 = add i32 %v2_11340, 4
  %v2_11398 = inttoptr i32 %v1_11398 to i32*
  %v3_11398 = load i32, i32* %v2_11398, align 4
  store i32 %v3_11398, i32* %r0.global-to-local, align 4
  %v1_1139c = call i32 @close(i32 %v3_11398)
  store i32 %v1_1139c, i32* %r0.global-to-local, align 4
  %v0_113a0 = load i32, i32* @r4, align 4
  %v1_113a0 = add i32 %v0_113a0, 12
  %v2_113a0 = inttoptr i32 %v1_113a0 to i32*
  %v3_113a0 = load i32, i32* %v2_113a0, align 4
  store i32 %v3_113a0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_113a8 = icmp ugt i32 %v3_113a0, 1
  store i1 %v2_113a8, i1* %cpsr_c.global-to-local, align 1
  %v7_113a8 = icmp eq i32 %v3_113a0, 2
  store i1 %v7_113a8, i1* %cpsr_z.global-to-local, align 1
  %v2_113ac = add i32 %v0_113a0, 4
  %v3_113ac = inttoptr i32 %v2_113ac to i32*
  store i32 -1, i32* %v3_113ac, align 4
  %v2_113b0 = xor i1 %v2_113a8, true
  %v3_113b0 = or i1 %v7_113a8, %v2_113b0
  br i1 %v3_113b0, label %dec_label_pc_120bc, label %dec_label_pc_113b4

dec_label_pc_113b4:                               ; preds = %dec_label_pc_11398
  %v0_113b4 = load i32, i32* @r4, align 4
  %v1_113b4 = add i32 %v0_113b4, 284
  %v2_113b4 = inttoptr i32 %v1_113b4 to i8*
  %v3_113b4 = load i8, i8* %v2_113b4, align 1
  %v4_113b4 = zext i8 %v3_113b4 to i32
  %v1_113b8 = add nuw nsw i32 %v4_113b4, 1
  %v1_113bc = urem i32 %v1_113b8, 256
  store i32 %v1_113bc, i32* %r3.global-to-local, align 4
  %v2_113c0 = icmp ugt i32 %v1_113bc, 9
  store i1 %v2_113c0, i1* %cpsr_c.global-to-local, align 1
  %v7_113c0 = icmp eq i32 %v1_113bc, 10
  store i1 %v7_113c0, i1* %cpsr_z.global-to-local, align 1
  %v1_113c4 = trunc i32 %v1_113b8 to i8
  store i8 %v1_113c4, i8* %v2_113b4, align 1
  %v0_113c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_113c8, label %dec_label_pc_120bc, label %dec_label_pc_113cc

dec_label_pc_113cc:                               ; preds = %dec_label_pc_113b4
  %v0_113cc = load i32, i32* @r4, align 4
  store i32 %v0_113cc, i32* @r0, align 4
  %v0_113d0 = call i32 @function_10748()
  store i32 %v0_113d0, i32* %r0.global-to-local, align 4
  br label %bb325

dec_label_pc_113d8:                               ; preds = %bb325
  store i32 1, i32* %stack_var_-64, align 4
  %v0_113e0 = load i32, i32* @r6, align 4
  %v1_113e0 = load i32, i32* @r5, align 4
  %v2_113e0 = sub i32 %v0_113e0, %v1_113e0
  %v3_113e0 = icmp uge i32 %v0_113e0, %v1_113e0
  store i1 %v3_113e0, i1* %cpsr_c.global-to-local, align 1
  %v4_113e0 = xor i32 %v1_113e0, %v0_113e0
  %v5_113e0 = xor i32 %v2_113e0, %v0_113e0
  %v6_113e0 = and i32 %v5_113e0, %v4_113e0
  %v7_113e0 = icmp slt i32 %v6_113e0, 0
  %v8_113e0 = icmp slt i32 %v2_113e0, 0
  %v9_113e0 = icmp eq i32 %v0_113e0, %v1_113e0
  store i1 %v9_113e0, i1* %cpsr_z.global-to-local, align 1
  %v2_113e4 = xor i1 %v8_113e0, %v7_113e0
  %v1_113e0.v0_113e0 = select i1 %v2_113e4, i32 %v1_113e0, i32 %v0_113e0
  store i32 %v2_113f0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_113f8, i32* %ip.global-to-local, align 4
  store i32 %v2_113fc, i32* %r1.global-to-local, align 4
  %v1_11400 = add i32 %v1_113e0.v0_113e0, 1
  store i32 %v1_11400, i32* %r0.global-to-local, align 4
  %v13_1140c = call i32 @select(i32 %v1_11400, %_TYPEDEF_fd_set* %tmp318, %_TYPEDEF_fd_set* %tmp317, %_TYPEDEF_fd_set* null, %timeval* nonnull %tmp320)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_11414 = call i32 @time(i32* null)
  store i32 ptrtoint (i32* @global_var_1c218.205 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_11414, i32* @global_var_1c218.205, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  br label %dec_label_pc_1146c

dec_label_pc_11430:                               ; preds = %dec_label_pc_11490, %dec_label_pc_1157c
  %v0_11448 = phi i32 [ %v3_11484, %dec_label_pc_11490 ], [ %v0_11430.pre, %dec_label_pc_1157c ]
  %v3_11430 = udiv i32 %v0_11448, 32
  %v3_11438 = mul nuw nsw i32 %v3_11430, 4
  store i32 %v2_11374, i32* %lr.global-to-local, align 4
  %v2_11440 = add i32 %v3_11438, %v2_11374
  store i32 %v2_11440, i32* %r3.global-to-local, align 4
  %v1_11444 = add i32 %v2_11440, -184
  %v2_11444 = inttoptr i32 %v1_11444 to i32*
  %v3_11444 = load i32, i32* %v2_11444, align 4
  %v1_11448 = urem i32 %v0_11448, 32
  store i32 %v1_11448, i32* %r1.global-to-local, align 4
  %v2_1144c = add nsw i32 %v1_11448, -1
  %v3_1144c = shl i32 1, %v2_1144c
  %v4_1144c = and i32 %v3_1144c, %v3_11444
  %v5_1144c = icmp ne i32 %v4_1144c, 0
  store i1 %v5_1144c, i1* %cpsr_c.global-to-local, align 1
  %v6_1144c = lshr i32 %v3_11444, %v1_11448
  store i32 %v6_1144c, i32* %r2.global-to-local, align 4
  %v1_11450 = urem i32 %v6_1144c, 2
  %v2_11450 = icmp eq i32 %v1_11450, 0
  store i1 %v2_11450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11450, label %dec_label_pc_11458, label %dec_label_pc_11608.preheader

dec_label_pc_11608.preheader:                     ; preds = %dec_label_pc_11430
  %v0_11608114 = load i32, i32* @r5, align 4
  %v1_11608115 = add i32 %v0_11608114, 12
  %v2_11608116 = inttoptr i32 %v1_11608115 to i32*
  %v3_11608117 = load i32, i32* %v2_11608116, align 4
  store i32 %v3_11608117, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1160c113119 = icmp eq i32 %v3_11608117, 0
  store i1 %v2_1160c113119, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1160c113119, label %dec_label_pc_11458, label %dec_label_pc_11614.lr.ph

dec_label_pc_11458:                               ; preds = %dec_label_pc_11608.loopexit, %dec_label_pc_1160c.backedge, %dec_label_pc_11608.preheader, %dec_label_pc_11430, %.thread229, %dec_label_pc_11f30, %dec_label_pc_1146c, %dec_label_pc_120d0, %dec_label_pc_11f70
  %v3_11458 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11458, i32* %r3.global-to-local, align 4
  %v1_1145c = add i32 %v3_11458, 1
  store i32 %v1_1145c, i32* %r2.global-to-local, align 4
  %v2_11460 = icmp ugt i32 %v1_1145c, 254
  store i1 %v2_11460, i1* %cpsr_c.global-to-local, align 1
  %v7_11460 = icmp eq i32 %v1_1145c, 255
  store i1 %v7_11460, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_1145c, i32* %stack_var_-48, align 4
  %v8_11468 = icmp sgt i32 %v1_1145c, 255
  br i1 %v8_11468, label %dec_label_pc_10e10, label %dec_label_pc_1146c

dec_label_pc_1146c:                               ; preds = %dec_label_pc_11458, %dec_label_pc_113d8
  %v0_11478 = phi i32 [ %v1_1145c, %dec_label_pc_11458 ], [ 0, %dec_label_pc_113d8 ]
  store i32 ptrtoint (i32* @global_var_1c234.217 to i32), i32* %ip.global-to-local, align 4
  %v3_11470 = mul i32 %v0_11478, 256
  store i32 %v3_11470, i32* %r3.global-to-local, align 4
  %v2_11474 = load i32, i32* @global_var_1c234.217, align 4
  store i32 %v2_11474, i32* %r1.global-to-local, align 4
  %v2_1147c = mul i32 %v0_11478, 288
  store i32 %v2_1147c, i32* %r2.global-to-local, align 4
  %v2_11480 = add i32 %v2_11474, %v2_1147c
  store i32 %v2_11480, i32* @r5, align 4
  %v1_11484 = add i32 %v2_11480, 4
  %v2_11484 = inttoptr i32 %v1_11484 to i32*
  %v3_11484 = load i32, i32* %v2_11484, align 4
  store i32 %v3_11484, i32* %r4.global-to-local, align 4
  %v2_11488 = icmp eq i32 %v3_11484, -1
  store i1 %v2_11488, i1* %cpsr_c.global-to-local, align 1
  %v7_11488 = icmp eq i32 %v3_11484, -1
  store i1 %v7_11488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11488, label %dec_label_pc_11458, label %dec_label_pc_11490

dec_label_pc_11490:                               ; preds = %dec_label_pc_1146c
  %v3_11490 = udiv i32 %v3_11484, 32
  %v3_11498 = mul nuw nsw i32 %v3_11490, 4
  store i32 %v2_11374, i32* %lr.global-to-local, align 4
  %v2_114a0 = add i32 %v3_11498, %v2_11374
  store i32 %v2_114a0, i32* %r3.global-to-local, align 4
  %v1_114a4 = add i32 %v2_114a0, -312
  %v2_114a4 = inttoptr i32 %v1_114a4 to i32*
  %v3_114a4 = load i32, i32* %v2_114a4, align 4
  %v1_114a8 = urem i32 %v3_11484, 32
  store i32 %v1_114a8, i32* %r1.global-to-local, align 4
  %v2_114ac = add nsw i32 %v1_114a8, -1
  %v3_114ac = shl i32 1, %v2_114ac
  %v4_114ac = and i32 %v3_114a4, %v3_114ac
  %v5_114ac = icmp ne i32 %v4_114ac, 0
  store i1 %v5_114ac, i1* %cpsr_c.global-to-local, align 1
  %v6_114ac = lshr i32 %v3_114a4, %v1_114a8
  store i32 %v6_114ac, i32* %r2.global-to-local, align 4
  %v1_114b0 = urem i32 %v6_114ac, 2
  %v2_114b0 = icmp eq i32 %v1_114b0, 0
  store i1 %v2_114b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_114b0, label %dec_label_pc_11430, label %dec_label_pc_114b8

dec_label_pc_114b8:                               ; preds = %dec_label_pc_11490
  store i32 4, i32* %r2.global-to-local, align 4
  store i8 4, i8* %stack_var_-52, align 1
  store i32 %v2_115b8, i32* %r3.global-to-local, align 4
  store i32 %v2_115a4, i32* %ip.global-to-local, align 4
  store i32 %v3_11484, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v8_114e8 = call i32 @getsockopt(i32 %v3_11484, i32 1, i32 4, i32* nonnull %stack_var_-56, i32* %v2_115ac)
  %v3_114ec = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_114ec, i32* %r3.global-to-local, align 4
  %v2_114f0 = or i32 %v3_114ec, %v8_114e8
  store i32 %v2_114f0, i32* %r0.global-to-local, align 4
  %v4_114f0 = icmp eq i32 %v2_114f0, 0
  store i1 %v4_114f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_114f0, label %dec_label_pc_114f8, label %dec_label_pc_120d0

dec_label_pc_114f8:                               ; preds = %dec_label_pc_114b8
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_114fc = load i32, i32* @r5, align 4
  %v2_114fc = add i32 %v1_114fc, 12
  %v3_114fc = inttoptr i32 %v2_114fc to i32*
  store i32 2, i32* %v3_114fc, align 4
  %v0_11500 = call i32 @function_105b4()
  %v3_11508 = load i8, i8* @global_var_1c215.212, align 1
  %v4_11508 = zext i8 %v3_11508 to i32
  store i32 %v4_11508, i32* %r2.global-to-local, align 4
  %v2_1150c = load i8, i8* bitcast (i8** @global_var_1c214.211 to i8*), align 4
  %v3_1150c = zext i8 %v2_1150c to i32
  %v4_11510 = mul nuw nsw i32 %v4_11508, 256
  %v5_11510 = or i32 %v3_1150c, %v4_11510
  store i32 %v5_11510, i32* %r1.global-to-local, align 4
  %v2_11514 = urem i32 %v0_11500, %v5_11510
  store i32 ptrtoint (i32* @global_var_1c1e4.207 to i32), i32* %r3.global-to-local, align 4
  %v2_1151c = load i32, i32* @global_var_1c1e4.207, align 4
  store i32 %v2_1151c, i32* %lr.global-to-local, align 4
  %v1_11524 = load i32, i32* @r6, align 4
  %v9_11524 = icmp eq i32 %v2_1151c, %v1_11524
  store i1 %v9_11524, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v2_11514, i32* %r0.global-to-local, align 4
  %v7_1152c = icmp sgt i32 %v2_1151c, %v1_11524
  br i1 %v7_1152c, label %dec_label_pc_11530, label %dec_label_pc_120c8

dec_label_pc_11530:                               ; preds = %dec_label_pc_114f8
  %v2_11534 = load i32, i32* @global_var_1c210.209, align 4
  store i32 %v2_11534, i32* %r3.global-to-local, align 4
  store i32 %v1_11524, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11550

dec_label_pc_11540:                               ; preds = %dec_label_pc_11568, %dec_label_pc_11550
  %v1_11540 = add i32 %v0_11540, 1
  store i32 %v1_11540, i32* %ip.global-to-local, align 4
  %v3_11544 = icmp uge i32 %v2_1151c, %v1_11540
  store i1 %v3_11544, i1* %cpsr_c.global-to-local, align 1
  %v9_11544 = icmp eq i32 %v2_1151c, %v1_11540
  store i1 %v9_11544, i1* %cpsr_z.global-to-local, align 1
  %v1_11548 = add i32 %v0_11548, 16
  store i32 %v1_11548, i32* %r3.global-to-local, align 4
  br i1 %v9_11544, label %dec_label_pc_120c8, label %dec_label_pc_11550

dec_label_pc_11550:                               ; preds = %dec_label_pc_11540, %dec_label_pc_11530
  %v0_11540 = phi i32 [ %v1_11540, %dec_label_pc_11540 ], [ %v1_11524, %dec_label_pc_11530 ]
  %v0_11548 = phi i32 [ %v1_11548, %dec_label_pc_11540 ], [ %v2_11534, %dec_label_pc_11530 ]
  store i32 %v0_11548, i32* %r1.global-to-local, align 4
  %v1_11554 = add i32 %v0_11548, 9
  %v2_11554 = inttoptr i32 %v1_11554 to i8*
  %v3_11554 = load i8, i8* %v2_11554, align 1
  %v4_11554 = zext i8 %v3_11554 to i32
  store i32 %v4_11554, i32* %r2.global-to-local, align 4
  %v1_11558 = add i32 %v0_11548, 8
  %v2_11558 = inttoptr i32 %v1_11558 to i8*
  %v3_11558 = load i8, i8* %v2_11558, align 1
  %v4_11558 = zext i8 %v3_11558 to i32
  %v4_1155c = mul nuw nsw i32 %v4_11554, 256
  %v5_1155c = or i32 %v4_11558, %v4_1155c
  store i32 %v5_1155c, i32* %r3.global-to-local, align 4
  %v3_11560 = icmp uge i32 %v5_1155c, %v2_11514
  store i1 %v3_11560, i1* %cpsr_c.global-to-local, align 1
  %v9_11560 = icmp eq i32 %v5_1155c, %v2_11514
  store i1 %v9_11560, i1* %cpsr_z.global-to-local, align 1
  %v2_11564 = xor i1 %v9_11560, true
  %v3_11564 = and i1 %v3_11560, %v2_11564
  br i1 %v3_11564, label %dec_label_pc_11540, label %dec_label_pc_11568

dec_label_pc_11568:                               ; preds = %dec_label_pc_11550
  %v1_11568 = add i32 %v0_11548, 10
  %v2_11568 = inttoptr i32 %v1_11568 to i8*
  %v3_11568 = load i8, i8* %v2_11568, align 1
  %v4_11568 = zext i8 %v3_11568 to i32
  store i32 %v4_11568, i32* %r3.global-to-local, align 4
  %v1_1156c = add i32 %v0_11548, 11
  %v2_1156c = inttoptr i32 %v1_1156c to i8*
  %v3_1156c = load i8, i8* %v2_1156c, align 1
  %v4_1156c = zext i8 %v3_1156c to i32
  store i32 %v4_1156c, i32* %r2.global-to-local, align 4
  %v4_11570 = mul nuw nsw i32 %v4_1156c, 256
  %v5_11570 = or i32 %v4_11570, %v4_11568
  store i32 %v5_11570, i32* %r3.global-to-local, align 4
  %v3_11574 = icmp uge i32 %v5_11570, %v2_11514
  store i1 %v3_11574, i1* %cpsr_c.global-to-local, align 1
  %v9_11574 = icmp eq i32 %v5_11570, %v2_11514
  store i1 %v9_11574, i1* %cpsr_z.global-to-local, align 1
  %v2_11578 = xor i1 %v3_11574, true
  %v3_11578 = or i1 %v9_11574, %v2_11578
  br i1 %v3_11578, label %dec_label_pc_11540, label %dec_label_pc_1157c

dec_label_pc_1157c:                               ; preds = %dec_label_pc_11568, %dec_label_pc_120c8
  %v0_11584 = phi i32 [ 0, %dec_label_pc_120c8 ], [ %v0_11548, %dec_label_pc_11568 ]
  %v0_1157c = load i32, i32* @r5, align 4
  %v1_1157c = add i32 %v0_1157c, 4
  %v2_1157c = inttoptr i32 %v1_1157c to i32*
  %v3_1157c = load i32, i32* %v2_1157c, align 4
  store i32 %v3_1157c, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_11584 = inttoptr i32 %v0_1157c to i32*
  store i32 %v0_11584, i32* %v2_11584, align 4
  %v0_11588 = load i32, i32* %ip.global-to-local, align 4
  %v1_11588 = load i32, i32* @r5, align 4
  %v2_11588 = add i32 %v1_11588, 24
  %v3_11588 = inttoptr i32 %v2_11588 to i32*
  store i32 %v0_11588, i32* %v3_11588, align 4
  %v0_11430.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11430

dec_label_pc_11590:                               ; preds = %dec_label_pc_117d0, %dec_label_pc_117a4, %dec_label_pc_117ec
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_11594 = call i32 @function_12288(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_1159c = call i32 @function_12288(i32 33)
  store i32 %v2_115a4, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v3_115ac = call i32 @function_121a4(i32 32, i32* %v2_115ac)
  store i32 %v3_115ac, i32* @r4, align 4
  store i32 %v2_115b8, i32* %r1.global-to-local, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v3_115c0 = call i32 @function_121a4(i32 33, i32* nonnull %stack_var_-56)
  %v3_115c4 = load i8, i8* %stack_var_-52, align 1
  %v4_115c4 = sext i8 %v3_115c4 to i32
  %sext9 = mul i32 %v3_115c0, 16777216
  %v1_115c8 = sdiv i32 %sext9, 16777216
  store i32 %v1_115c8, i32* @r6, align 4
  %v0_115cc = load i32, i32* @r4, align 4
  store i32 %v0_115cc, i32* %r2.global-to-local, align 4
  %v1_115d0 = add nsw i32 %v4_115c4, -1
  store i32 %v1_115d0, i32* %r3.global-to-local, align 4
  %v0_115d4 = load i32, i32* @sl, align 4
  store i32 %v0_115d4, i32* %r0.global-to-local, align 4
  %v0_115d8 = load i32, i32* @r5, align 4
  %v1_115d8 = add i32 %v0_115d8, 24
  %v2_115d8 = inttoptr i32 %v1_115d8 to i32*
  %v3_115d8 = load i32, i32* %v2_115d8, align 4
  store i32 %v3_115d8, i32* %r1.global-to-local, align 4
  %v4_115dc = call i32 @function_12e00(i32 %v0_115d4, i32 %v3_115d8, i32 %v0_115cc, i32 %v1_115d0)
  store i32 %v4_115dc, i32* %r0.global-to-local, align 4
  %v2_115e0 = icmp eq i32 %v4_115dc, -1
  store i1 %v2_115e0, i1* %cpsr_c.global-to-local, align 1
  %v7_115e0 = icmp eq i32 %v4_115dc, -1
  store i1 %v7_115e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115e0, label %dec_label_pc_11ff0, label %dec_label_pc_115f0

dec_label_pc_115f0:                               ; preds = %dec_label_pc_11ff0, %dec_label_pc_11590
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_115f4 = call i32 @function_121d0(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_115fc = call i32 @function_121d0(i32 33)
  store i32 %v1_115fc, i32* %r0.global-to-local, align 4
  %v0_11600 = load i32, i32* @r7, align 4
  %v3_11600 = icmp eq i32 %v0_11600, -1
  store i1 %v3_11600, i1* %cpsr_c.global-to-local, align 1
  %v8_11600 = icmp eq i32 %v0_11600, -1
  store i1 %v8_11600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11600, label %dec_label_pc_11608.loopexit, label %dec_label_pc_117f8

dec_label_pc_11608.loopexit:                      ; preds = %dec_label_pc_11794, %dec_label_pc_11e6c, %dec_label_pc_11688, %dec_label_pc_115f0, %dec_label_pc_11e58
  %v0_11608 = load i32, i32* @r5, align 4
  %v1_11608 = add i32 %v0_11608, 12
  %v2_11608 = inttoptr i32 %v1_11608 to i32*
  %v3_11608 = load i32, i32* %v2_11608, align 4
  store i32 %v3_11608, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1160c113 = icmp eq i32 %v3_11608, 0
  store i1 %v2_1160c113, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1160c113, label %dec_label_pc_11458, label %dec_label_pc_11614.lr.ph

dec_label_pc_11614.lr.ph:                         ; preds = %dec_label_pc_11608.preheader, %dec_label_pc_11608.loopexit
  %v0_11614147 = phi i32 [ %v0_11608, %dec_label_pc_11608.loopexit ], [ %v0_11608114, %dec_label_pc_11608.preheader ]
  br label %dec_label_pc_11614

dec_label_pc_11614:                               ; preds = %dec_label_pc_1160c.backedge.thread, %dec_label_pc_1160c.backedge, %dec_label_pc_1160c.backedge.thread465, %dec_label_pc_11614.lr.ph
  %v0_11fa8 = phi i32 [ %v0_11614147, %dec_label_pc_11614.lr.ph ], [ %v0_11614144, %dec_label_pc_1160c.backedge ], [ %v0_11688, %dec_label_pc_1160c.backedge.thread ], [ %v0_11688, %dec_label_pc_1160c.backedge.thread465 ]
  %v1_11614 = add i32 %v0_11fa8, 24
  %v2_11614 = inttoptr i32 %v1_11614 to i32*
  %v3_11614 = load i32, i32* %v2_11614, align 4
  store i32 %v3_11614, i32* %r3.global-to-local, align 4
  %v2_11618 = icmp ugt i32 %v3_11614, 255
  store i1 %v2_11618, i1* %cpsr_c.global-to-local, align 1
  %v7_11618 = icmp eq i32 %v3_11614, 256
  store i1 %v7_11618, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_11fa8, 28
  store i32 %.pre, i32* @sl, align 4
  br i1 %v7_11618, label %dec_label_pc_11fa8, label %dec_label_pc_11624

dec_label_pc_11624:                               ; preds = %dec_label_pc_11614, %dec_label_pc_11fa8
  store i32 0, i32* @r6, align 4
  %v1_11628 = load i32, i32* @sb, align 4
  %v2_11628 = inttoptr i32 %v1_11628 to i32*
  store i32 0, i32* %v2_11628, align 4
  %v0_1162c = load i32, i32* @r5, align 4
  %v1_1162c = add i32 %v0_1162c, 24
  %v2_1162c = inttoptr i32 %v1_1162c to i32*
  %v3_1162c = load i32, i32* %v2_1162c, align 4
  store i32 %v3_1162c, i32* %r2.global-to-local, align 4
  %v0_11630 = load i32, i32* @sl, align 4
  %v2_11630 = add i32 %v0_11630, %v3_1162c
  store i32 %v2_11630, i32* @r4, align 4
  %v1_11634 = add i32 %v0_1162c, 4
  %v2_11634 = inttoptr i32 %v1_11634 to i32*
  %v3_11634 = load i32, i32* %v2_11634, align 4
  store i32 %v3_11634, i32* %r0.global-to-local, align 4
  %v1_11638 = sub i32 256, %v3_1162c
  store i32 %v1_11638, i32* %r2.global-to-local, align 4
  store i32 %v2_11630, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11644 = inttoptr i32 %v2_11630 to i32*
  %v5_11644 = call i32 @recv(i32 %v3_11634, i32* %v4_11644, i32 %v1_11638, i32 16384)
  store i32 %v5_11644, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11648 = icmp eq i32 %v5_11644, 0
  store i1 %v2_11648, i1* %cpsr_z.global-to-local, align 1
  %tmp330 = icmp slt i32 %v5_11644, 1
  br i1 %tmp330, label %dec_label_pc_11f24, label %dec_label_pc_11650

dec_label_pc_11650:                               ; preds = %dec_label_pc_11624
  %v0_11650 = load i32, i32* @r6, align 4
  store i32 %v0_11650, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11658

dec_label_pc_11658:                               ; preds = %bb332, %dec_label_pc_11650
  %v3_11660 = phi i32 [ %v1_11664, %bb332 ], [ %v0_11650, %dec_label_pc_11650 ]
  %v1_11658 = load i32, i32* @r4, align 4
  %v2_11658 = add i32 %v1_11658, %v3_11660
  %v3_11658 = inttoptr i32 %v2_11658 to i8*
  %v4_11658 = load i8, i8* %v3_11658, align 1
  %v6_11658 = zext i8 %v4_11658 to i32
  store i32 %v6_11658, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1165c = icmp eq i8 %v4_11658, 0
  store i1 %v2_1165c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1165c, label %bb331, label %bb332

bb331:                                            ; preds = %dec_label_pc_11658
  %v1_11660 = load i32, i32* %r1.global-to-local, align 4
  %v2_11660 = trunc i32 %v1_11660 to i8
  store i8 %v2_11660, i8* %v3_11658, align 1
  %v0_11664.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb332

bb332:                                            ; preds = %dec_label_pc_11658, %bb331
  %v0_11664 = phi i32 [ %v3_11660, %dec_label_pc_11658 ], [ %v0_11664.pre, %bb331 ]
  %v1_11664 = add i32 %v0_11664, 1
  store i32 %v1_11664, i32* %r2.global-to-local, align 4
  %v3_11668 = icmp uge i32 %v5_11644, %v1_11664
  store i1 %v3_11668, i1* %cpsr_c.global-to-local, align 1
  %v9_11668 = icmp eq i32 %v5_11644, %v1_11664
  store i1 %v9_11668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11668, label %dec_label_pc_11670, label %dec_label_pc_11658

dec_label_pc_11670:                               ; preds = %bb332, %dec_label_pc_11f28
  store i32 ptrtoint (i32* @global_var_1c218.205 to i32), i32* %r1.global-to-local, align 4
  %v0_11674 = load i32, i32* @r5, align 4
  %v1_11674 = add i32 %v0_11674, 24
  %v2_11674 = inttoptr i32 %v1_11674 to i32*
  %v3_11674 = load i32, i32* %v2_11674, align 4
  %v2_11678 = load i32, i32* @global_var_1c218.205, align 4
  store i32 %v2_11678, i32* %r3.global-to-local, align 4
  %v2_1167c = add i32 %v3_11674, %v5_11644
  store i32 %v2_1167c, i32* %ip.global-to-local, align 4
  store i32 %v2_1167c, i32* %v2_11674, align 4
  %v0_11684 = load i32, i32* %r3.global-to-local, align 4
  %v1_11684 = load i32, i32* @r5, align 4
  %v2_11684 = add i32 %v1_11684, 8
  %v3_11684 = inttoptr i32 %v2_11684 to i32*
  store i32 %v0_11684, i32* %v3_11684, align 4
  br label %dec_label_pc_11688

dec_label_pc_11688:                               ; preds = %dec_label_pc_11cd8, %dec_label_pc_11670
  %v0_11688 = load i32, i32* @r5, align 4
  %v1_11688 = add i32 %v0_11688, 12
  %v2_11688 = inttoptr i32 %v1_11688 to i32*
  %v3_11688 = load i32, i32* %v2_11688, align 4
  store i32 %v3_11688, i32* %r2.global-to-local, align 4
  %v1_1168c = add i32 %v3_11688, -2
  store i32 %v1_1168c, i32* %r3.global-to-local, align 4
  %v7_11690 = icmp eq i32 %v1_1168c, 8
  store i1 %v7_11690, i1* %cpsr_z.global-to-local, align 1
  %v5_11694 = and i32 %v1_1168c, 1073741824
  %v6_11694 = icmp ne i32 %v5_11694, 0
  store i1 %v6_11694, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_11688, label %dec_label_pc_11608.loopexit [
    i32 2, label %dec_label_pc_116c0
    i32 3, label %dec_label_pc_117a4
    i32 4, label %dec_label_pc_1183c
    i32 5, label %dec_label_pc_118cc
    i32 6, label %dec_label_pc_11980
    i32 7, label %dec_label_pc_11ba0
    i32 8, label %dec_label_pc_11aec
    i32 9, label %dec_label_pc_11cfc
    i32 10, label %dec_label_pc_11c54
  ]

dec_label_pc_116c0:                               ; preds = %dec_label_pc_11688
  %v1_116c0 = add i32 %v0_11688, 24
  %v2_116c0 = inttoptr i32 %v1_116c0 to i32*
  %v3_116c0 = load i32, i32* %v2_116c0, align 4
  store i32 %v3_116c0, i32* %ip.global-to-local, align 4
  %v0_116c4 = load i32, i32* @sl, align 4
  store i32 %v0_116c4, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  store i32 -3, i32* %r8.global-to-local, align 4
  %v1_116d0 = add i32 %v0_11688, 29
  store i32 %v1_116d0, i32* @r4, align 4
  %v3_116d4104 = icmp eq i32 %v3_116c0, 0
  store i1 %v3_116d4104, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_116d4104, i1* %cpsr_z.global-to-local, align 1
  %v6_116d8111 = icmp sgt i32 %v3_116c0, 0
  br i1 %v6_116d8111, label %dec_label_pc_116dc.preheader, label %dec_label_pc_11784

dec_label_pc_116d4.loopexit:                      ; preds = %dec_label_pc_116f4
  %v2_116fc = add i32 %v1_116fc, 2
  store i32 %v2_116fc, i32* @r6, align 4
  %v2_11700 = add i32 %v1_11700, 2
  store i32 %v2_11700, i32* @r4, align 4
  %v2_11704 = add i32 %v1_11704, 2
  store i32 %v2_11704, i32* @r7, align 4
  %v3_116d4 = icmp uge i32 %v2_11704, %v1_116d4
  store i1 %v3_116d4, i1* %cpsr_c.global-to-local, align 1
  %v9_116d4 = icmp eq i32 %v2_11704, %v1_116d4
  store i1 %v9_116d4, i1* %cpsr_z.global-to-local, align 1
  %v6_116d8 = icmp slt i32 %v2_11704, %v1_116d4
  br i1 %v6_116d8, label %dec_label_pc_116dc.preheader, label %dec_label_pc_11784

dec_label_pc_116dc.preheader:                     ; preds = %dec_label_pc_116c0, %dec_label_pc_116d4.loopexit
  %v6_1178c185 = phi i32 [ %v6_1178c186, %dec_label_pc_116d4.loopexit ], [ %v0_11688, %dec_label_pc_116c0 ]
  %v1_11704175 = phi i32 [ %v2_11704, %dec_label_pc_116d4.loopexit ], [ 0, %dec_label_pc_116c0 ]
  %v1_116fc173 = phi i32 [ %v2_116fc, %dec_label_pc_116d4.loopexit ], [ %v0_116c4, %dec_label_pc_116c0 ]
  %v1_116e8171 = phi i32 [ %v1_116d4, %dec_label_pc_116d4.loopexit ], [ %v3_116c0, %dec_label_pc_116c0 ]
  %v0_116dc169 = phi i32 [ %v2_11700, %dec_label_pc_116d4.loopexit ], [ %v1_116d0, %dec_label_pc_116c0 ]
  br label %dec_label_pc_116dc

dec_label_pc_116dc:                               ; preds = %dec_label_pc_116dc.preheader, %dec_label_pc_11764
  %v6_1178c186 = phi i32 [ %v6_1178c185, %dec_label_pc_116dc.preheader ], [ %v0_1176c, %dec_label_pc_11764 ]
  %v1_11704 = phi i32 [ %v1_11704175, %dec_label_pc_116dc.preheader ], [ %v1_11770, %dec_label_pc_11764 ]
  %v1_116fc = phi i32 [ %v1_116fc173, %dec_label_pc_116dc.preheader ], [ %v1_11778, %dec_label_pc_11764 ]
  %v1_116d4 = phi i32 [ %v1_116e8171, %dec_label_pc_116dc.preheader ], [ %v3_1176c, %dec_label_pc_11764 ]
  %v1_11700 = phi i32 [ %v0_116dc169, %dec_label_pc_116dc.preheader ], [ %v1_1177c, %dec_label_pc_11764 ]
  %v1_116dc = add i32 %v1_11700, -1
  %v2_116dc = inttoptr i32 %v1_116dc to i8*
  %v3_116dc = load i8, i8* %v2_116dc, align 1
  %v4_116dc = zext i8 %v3_116dc to i32
  store i32 %v4_116dc, i32* %r3.global-to-local, align 4
  %v2_116e0 = icmp eq i8 %v3_116dc, -1
  store i1 %v2_116e0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_116e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116e0, label %dec_label_pc_116e8, label %dec_label_pc_11784

dec_label_pc_116e8:                               ; preds = %dec_label_pc_116dc
  %v0_116e8 = load i32, i32* @sl, align 4
  %v2_116e8 = add i32 %v0_116e8, %v1_116d4
  store i32 %v2_116e8, i32* %r2.global-to-local, align 4
  %v3_116ec = icmp uge i32 %v2_116e8, %v1_11700
  store i1 %v3_116ec, i1* %cpsr_c.global-to-local, align 1
  %v9_116ec = icmp eq i32 %v2_116e8, %v1_11700
  store i1 %v9_116ec, i1* %cpsr_z.global-to-local, align 1
  %v2_116f0 = xor i1 %v3_116ec, true
  %v3_116f0 = or i1 %v9_116ec, %v2_116f0
  br i1 %v3_116f0, label %dec_label_pc_11784, label %dec_label_pc_116f4

dec_label_pc_116f4:                               ; preds = %dec_label_pc_116e8
  %v1_116f4 = inttoptr i32 %v1_11700 to i8*
  %v2_116f4 = load i8, i8* %v1_116f4, align 1
  %v3_116f4 = zext i8 %v2_116f4 to i32
  store i32 %v3_116f4, i32* %r3.global-to-local, align 4
  %v2_116f8 = icmp eq i8 %v2_116f4, -1
  store i1 %v2_116f8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_116f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116f8, label %dec_label_pc_116d4.loopexit, label %dec_label_pc_1170c

dec_label_pc_1170c:                               ; preds = %dec_label_pc_116f4
  %v2_1170c = icmp ugt i8 %v2_116f4, -4
  store i1 %v2_1170c, i1* %cpsr_c.global-to-local, align 1
  %v7_1170c = icmp eq i8 %v2_116f4, -3
  store i1 %v7_1170c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1170c, label %dec_label_pc_11db0, label %dec_label_pc_11714

dec_label_pc_11714:                               ; preds = %dec_label_pc_1170c
  %v1_11714 = add i32 %v1_116fc, 2
  store i32 %v1_11714, i32* %r3.global-to-local, align 4
  %v3_11718 = icmp uge i32 %v2_116e8, %v1_11714
  store i1 %v3_11718, i1* %cpsr_c.global-to-local, align 1
  %v9_11718 = icmp eq i32 %v2_116e8, %v1_11714
  store i1 %v9_11718, i1* %cpsr_z.global-to-local, align 1
  %v2_1171c = xor i1 %v3_11718, true
  %v3_1171c = or i1 %v9_11718, %v2_1171c
  br i1 %v3_1171c, label %dec_label_pc_11784, label %dec_label_pc_11720

dec_label_pc_11720:                               ; preds = %bb354, %dec_label_pc_11e0c, %.thread77, %dec_label_pc_11714
  %v0_11720 = load i32, i32* @r4, align 4
  %v1_11720 = inttoptr i32 %v0_11720 to i8*
  %v2_11720 = load i8, i8* %v1_11720, align 1
  %v3_11720 = zext i8 %v2_11720 to i32
  store i32 %v3_11720, i32* %r3.global-to-local, align 4
  %v2_11724 = icmp ugt i8 %v2_11720, -4
  store i1 %v2_11724, i1* %cpsr_c.global-to-local, align 1
  %v7_11724 = icmp eq i8 %v2_11720, -3
  store i1 %v7_11724, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11724, label %.thread64, label %dec_label_pc_11734

.thread64:                                        ; preds = %dec_label_pc_11720
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_11720, align 1
  %v0_11730.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11730.pr.pr, label %bb334, label %.thread64.dec_label_pc_11734thread-pre-split_crit_edge

.thread64.dec_label_pc_11734thread-pre-split_crit_edge: ; preds = %.thread64
  %v0_11734.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11734

dec_label_pc_11734:                               ; preds = %dec_label_pc_11720, %.thread64.dec_label_pc_11734thread-pre-split_crit_edge
  %v0_11734.pr = phi i32 [ %v0_11734.pr.pre, %.thread64.dec_label_pc_11734thread-pre-split_crit_edge ], [ %v3_11720, %dec_label_pc_11720 ]
  %v2_11734 = icmp ugt i32 %v0_11734.pr, 250
  store i1 %v2_11734, i1* %cpsr_c.global-to-local, align 1
  %v7_11734 = icmp eq i32 %v0_11734.pr, 251
  store i1 %v7_11734, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11734, label %bb333, label %bb334

bb333:                                            ; preds = %dec_label_pc_11734
  %v1_11738 = load i32, i32* %r8.global-to-local, align 4
  %v2_11738 = trunc i32 %v1_11738 to i8
  %v3_11738 = load i32, i32* @r4, align 4
  %v4_11738 = inttoptr i32 %v3_11738 to i8*
  store i8 %v2_11738, i8* %v4_11738, align 1
  br label %bb334

bb334:                                            ; preds = %.thread64, %dec_label_pc_11734, %bb333
  %v0_1173c = load i32, i32* @r4, align 4
  %v1_1173c = add i32 %v0_1173c, 1
  %v2_1173c = inttoptr i32 %v1_1173c to i8*
  %v3_1173c = load i8, i8* %v2_1173c, align 1
  %v4_1173c = zext i8 %v3_1173c to i32
  store i32 %v4_1173c, i32* %r3.global-to-local, align 4
  %v2_11740 = icmp ugt i8 %v3_1173c, -4
  store i1 %v2_11740, i1* %cpsr_c.global-to-local, align 1
  %v7_11740 = icmp eq i8 %v3_1173c, -3
  store i1 %v7_11740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11740, label %.thread67, label %dec_label_pc_11750

.thread67:                                        ; preds = %bb334
  store i32 -4, i32* %ip.global-to-local, align 4
  store i8 -4, i8* %v2_1173c, align 1
  %v0_1174c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1174c.pr.pr, label %bb336, label %.thread67.dec_label_pc_11750_crit_edge

.thread67.dec_label_pc_11750_crit_edge:           ; preds = %.thread67
  %v0_11750.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11750

dec_label_pc_11750:                               ; preds = %.thread67.dec_label_pc_11750_crit_edge, %bb334
  %v0_11750 = phi i32 [ %v0_11750.pre, %.thread67.dec_label_pc_11750_crit_edge ], [ %v4_1173c, %bb334 ]
  %v2_11750 = icmp ugt i32 %v0_11750, 250
  store i1 %v2_11750, i1* %cpsr_c.global-to-local, align 1
  %v7_11750 = icmp eq i32 %v0_11750, 251
  store i1 %v7_11750, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11750, label %bb335, label %bb336

bb335:                                            ; preds = %dec_label_pc_11750
  %v1_11754 = load i32, i32* %r8.global-to-local, align 4
  %v2_11754 = trunc i32 %v1_11754 to i8
  %v3_11754 = load i32, i32* @r4, align 4
  %v4_11754 = add i32 %v3_11754, 1
  %v5_11754 = inttoptr i32 %v4_11754 to i8*
  store i8 %v2_11754, i8* %v5_11754, align 1
  br label %bb336

bb336:                                            ; preds = %.thread67, %dec_label_pc_11750, %bb335
  %v0_11758 = load i32, i32* @r5, align 4
  %v1_11758 = add i32 %v0_11758, 4
  %v2_11758 = inttoptr i32 %v1_11758 to i32*
  %v3_11758 = load i32, i32* %v2_11758, align 4
  store i32 %v3_11758, i32* %r0.global-to-local, align 4
  %v0_1175c = load i32, i32* @r6, align 4
  br label %dec_label_pc_11764

dec_label_pc_11764:                               ; preds = %dec_label_pc_11f7c, %bb336
  %storemerge10 = phi i32 [ %v2_11dcc, %dec_label_pc_11f7c ], [ %v0_1175c, %bb336 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_11f7c ], [ 3, %bb336 ]
  store i32 %storemerge10, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11768 = inttoptr i32 %storemerge10 to i32*
  %v5_11768 = call i32 @send(i32 16384, i32* %v4_11768, i32 %storemerge, i32 16384)
  store i32 %v5_11768, i32* %r0.global-to-local, align 4
  %v0_1176c = load i32, i32* @r5, align 4
  %v1_1176c = add i32 %v0_1176c, 24
  %v2_1176c = inttoptr i32 %v1_1176c to i32*
  %v3_1176c = load i32, i32* %v2_1176c, align 4
  store i32 %v3_1176c, i32* %ip.global-to-local, align 4
  %v0_11770 = load i32, i32* @r7, align 4
  %v1_11770 = add i32 %v0_11770, 3
  store i32 %v1_11770, i32* @r7, align 4
  %v3_11774 = icmp uge i32 %v1_11770, %v3_1176c
  store i1 %v3_11774, i1* %cpsr_c.global-to-local, align 1
  %v9_11774 = icmp eq i32 %v1_11770, %v3_1176c
  store i1 %v9_11774, i1* %cpsr_z.global-to-local, align 1
  %v0_11778 = load i32, i32* @r6, align 4
  %v1_11778 = add i32 %v0_11778, 3
  store i32 %v1_11778, i32* @r6, align 4
  %v0_1177c = load i32, i32* @r4, align 4
  %v1_1177c = add i32 %v0_1177c, 3
  store i32 %v1_1177c, i32* @r4, align 4
  %v5_11780 = icmp slt i32 %v1_11770, %v3_1176c
  br i1 %v5_11780, label %dec_label_pc_116dc, label %dec_label_pc_11784

dec_label_pc_11784:                               ; preds = %dec_label_pc_116d4.loopexit, %dec_label_pc_116dc, %dec_label_pc_11764, %dec_label_pc_11714, %dec_label_pc_116e8, %dec_label_pc_116c0, %dec_label_pc_11db0.dec_label_pc_11784.loopexit_crit_edge
  %v6_1178c = phi i32 [ %v0_11dd8, %dec_label_pc_11db0.dec_label_pc_11784.loopexit_crit_edge ], [ %v0_11688, %dec_label_pc_116c0 ], [ %v6_1178c186, %dec_label_pc_116dc ], [ %v0_1176c, %dec_label_pc_11764 ], [ %v6_1178c186, %dec_label_pc_11714 ], [ %v6_1178c186, %dec_label_pc_116e8 ], [ %v6_1178c186, %dec_label_pc_116d4.loopexit ]
  %v0_11794.pre = phi i32 [ %v0_11784.pre.pre, %dec_label_pc_11db0.dec_label_pc_11784.loopexit_crit_edge ], [ 0, %dec_label_pc_116c0 ], [ %v1_11704, %dec_label_pc_116dc ], [ %v1_11770, %dec_label_pc_11764 ], [ %v1_11704, %dec_label_pc_11714 ], [ %v1_11704, %dec_label_pc_116e8 ], [ %v2_11704, %dec_label_pc_116d4.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11784 = icmp eq i32 %v0_11794.pre, 0
  store i1 %v2_11784, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v0_11794.pre, 1
  br i1 %tmp337, label %dec_label_pc_11794, label %.thread224

.thread224:                                       ; preds = %dec_label_pc_11784
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_1178c = add i32 %v6_1178c, 12
  %v8_1178c = inttoptr i32 %v7_1178c to i32*
  store i32 3, i32* %v8_1178c, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11794:                               ; preds = %dec_label_pc_11784, %dec_label_pc_11d50, %dec_label_pc_11eb8, %dec_label_pc_11bf4, %dec_label_pc_11b40, %dec_label_pc_11a8c, %dec_label_pc_11920, %dec_label_pc_11888, %dec_label_pc_117f8
  %v0_11794 = phi i32 [ %v1_11d44, %dec_label_pc_11d50 ], [ %v0_11eb0, %dec_label_pc_11eb8 ], [ %v1_11be8, %dec_label_pc_11bf4 ], [ %v1_11b34, %dec_label_pc_11b40 ], [ %v1_11a80, %dec_label_pc_11a8c ], [ %v1_11914, %dec_label_pc_11920 ], [ %v0_11888, %dec_label_pc_11888 ], [ %v0_117f8, %dec_label_pc_117f8 ], [ %v0_11794.pre, %dec_label_pc_11784 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11794 = icmp eq i32 %v0_11794, 0
  store i1 %v2_11794, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11794, label %dec_label_pc_11608.loopexit, label %dec_label_pc_1179c

dec_label_pc_1179c:                               ; preds = %dec_label_pc_11794
  %v0_1179c = load i32, i32* @r5, align 4
  %v1_1179c = add i32 %v0_1179c, 24
  %v2_1179c = inttoptr i32 %v1_1179c to i32*
  %v3_1179c = load i32, i32* %v2_1179c, align 4
  store i32 %v3_1179c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_117a4:                               ; preds = %dec_label_pc_11688
  %v1_117a4 = add i32 %v0_11688, 24
  %v2_117a4 = inttoptr i32 %v1_117a4 to i32*
  %v3_117a4 = load i32, i32* %v2_117a4, align 4
  store i32 %v3_117a4, i32* %ip.global-to-local, align 4
  %v1_117a8 = add i32 %v3_117a4, -1
  store i32 %v1_117a8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_117ac = icmp eq i32 %v1_117a8, 0
  store i1 %v2_117ac, i1* %cpsr_z.global-to-local, align 1
  %v5_117b0 = icmp sgt i32 %v1_117a8, 0
  br i1 %v5_117b0, label %dec_label_pc_117d8, label %dec_label_pc_11590

dec_label_pc_117b8:                               ; preds = %bb338
  %v2_117b8 = icmp ugt i8 %v3_117dc, 35
  store i1 %v2_117b8, i1* %cpsr_c.global-to-local, align 1
  %v7_117b8 = icmp eq i8 %v3_117dc, 36
  store i1 %v7_117b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117b8, label %dec_label_pc_117ec, label %dec_label_pc_117c0

dec_label_pc_117c0:                               ; preds = %dec_label_pc_117b8
  %v2_117c0 = icmp ugt i8 %v3_117dc, 34
  store i1 %v2_117c0, i1* %cpsr_c.global-to-local, align 1
  %v7_117c0 = icmp eq i8 %v3_117dc, 35
  store i1 %v7_117c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117c0, label %dec_label_pc_117ec, label %dec_label_pc_117c8

dec_label_pc_117c8:                               ; preds = %dec_label_pc_117c0
  %v2_117c8 = icmp ugt i8 %v3_117dc, 36
  store i1 %v2_117c8, i1* %cpsr_c.global-to-local, align 1
  %v7_117c8 = icmp eq i8 %v3_117dc, 37
  store i1 %v7_117c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117c8, label %dec_label_pc_117ec, label %dec_label_pc_117d0

dec_label_pc_117d0:                               ; preds = %dec_label_pc_117c8
  %v1_117d0 = add i32 %v0_117ec, -1
  store i32 %v1_117d0, i32* %r0.global-to-local, align 4
  %v2_117d0 = icmp ne i32 %v0_117ec, 0
  store i1 %v2_117d0, i1* %cpsr_c.global-to-local, align 1
  %v7_117d0 = icmp eq i32 %v0_117ec, 1
  store i1 %v7_117d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117d0, label %dec_label_pc_11590, label %dec_label_pc_117d8

dec_label_pc_117d8:                               ; preds = %dec_label_pc_117a4, %dec_label_pc_117d0
  %v0_117ec = phi i32 [ %v1_117d0, %dec_label_pc_117d0 ], [ %v1_117a8, %dec_label_pc_117a4 ]
  %v2_117d8 = add i32 %v0_117ec, %v0_11688
  store i32 %v2_117d8, i32* %r3.global-to-local, align 4
  %v1_117dc = add i32 %v2_117d8, 28
  %v2_117dc = inttoptr i32 %v1_117dc to i8*
  %v3_117dc = load i8, i8* %v2_117dc, align 1
  %v4_117dc = zext i8 %v3_117dc to i32
  store i32 %v4_117dc, i32* %r3.global-to-local, align 4
  %v2_117e0 = icmp ugt i8 %v3_117dc, 61
  store i1 %v2_117e0, i1* %cpsr_c.global-to-local, align 1
  %v7_117e0 = icmp eq i8 %v3_117dc, 62
  store i1 %v7_117e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117e0, label %dec_label_pc_117ec, label %bb338

bb338:                                            ; preds = %dec_label_pc_117d8
  %v3_117e4 = icmp ugt i8 %v3_117dc, 57
  store i1 %v3_117e4, i1* %cpsr_c.global-to-local, align 1
  %v8_117e4 = icmp eq i8 %v3_117dc, 58
  store i1 %v8_117e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_117e4, label %dec_label_pc_117ec, label %dec_label_pc_117b8

dec_label_pc_117ec:                               ; preds = %dec_label_pc_117d8, %bb338, %dec_label_pc_117c8, %dec_label_pc_117c0, %dec_label_pc_117b8
  %v1_117ec = add i32 %v0_117ec, 1
  store i32 %v1_117ec, i32* @r7, align 4
  %v2_117f0 = icmp eq i32 %v1_117ec, -1
  store i1 %v2_117f0, i1* %cpsr_c.global-to-local, align 1
  %v7_117f0 = icmp eq i32 %v0_117ec, -2
  store i1 %v7_117f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117f0, label %dec_label_pc_11590, label %dec_label_pc_117f8

dec_label_pc_117f8:                               ; preds = %dec_label_pc_115f0, %dec_label_pc_117ec
  %v0_117f8 = phi i32 [ %v0_11600, %dec_label_pc_115f0 ], [ %v1_117ec, %dec_label_pc_117ec ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_117f8 = icmp eq i32 %v0_117f8, 0
  store i1 %v2_117f8, i1* %cpsr_z.global-to-local, align 1
  %tmp339 = icmp slt i32 %v0_117f8, 1
  br i1 %tmp339, label %dec_label_pc_11794, label %dec_label_pc_11800

dec_label_pc_11800:                               ; preds = %dec_label_pc_117f8
  %v0_11800 = load i32, i32* @r5, align 4
  %v1_11800 = inttoptr i32 %v0_11800 to i32*
  %v2_11800 = load i32, i32* %v1_11800, align 4
  store i32 %v2_11800, i32* %r3.global-to-local, align 4
  %v1_11804 = add i32 %v0_11800, 4
  %v2_11804 = inttoptr i32 %v1_11804 to i32*
  %v3_11804 = load i32, i32* %v2_11804, align 4
  store i32 %v3_11804, i32* %r0.global-to-local, align 4
  %v1_11808 = add i32 %v2_11800, 12
  %v2_11808 = inttoptr i32 %v1_11808 to i8*
  %v3_11808 = load i8, i8* %v2_11808, align 1
  %v4_11808 = zext i8 %v3_11808 to i32
  store i32 %v4_11808, i32* %r2.global-to-local, align 4
  %v1_1180c = inttoptr i32 %v2_11800 to i32*
  %v2_1180c = load i32, i32* %v1_1180c, align 4
  store i32 %v2_1180c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11814 = inttoptr i32 %v2_1180c to i32*
  %v5_11814 = call i32 @send(i32 %v3_11804, i32* %v4_11814, i32 %v4_11808, i32 16384)
  store i32 %v5_11814, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_1181c = load i32, i32* @r5, align 4
  %v1_1181c = add i32 %v0_1181c, 4
  %v2_1181c = inttoptr i32 %v1_1181c to i32*
  %v3_1181c = load i32, i32* %v2_1181c, align 4
  store i32 %v3_1181c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_11828 = call i32 @send(i32 %v3_1181c, i32* bitcast ([3 x i8]* @global_var_13690.112 to i32*), i32 2, i32 16384)
  store i32 %v5_11828, i32* %r0.global-to-local, align 4
  %v0_1182c = load i32, i32* @r5, align 4
  %v1_1182c = add i32 %v0_1182c, 24
  %v2_1182c = inttoptr i32 %v1_1182c to i32*
  %v3_1182c = load i32, i32* %v2_1182c, align 4
  store i32 %v3_1182c, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_11834 = add i32 %v0_1182c, 12
  %v3_11834 = inttoptr i32 %v2_11834 to i32*
  store i32 4, i32* %v3_11834, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_1183c:                               ; preds = %dec_label_pc_11688
  %v1_1183c = add i32 %v0_11688, 24
  %v2_1183c = inttoptr i32 %v1_1183c to i32*
  %v3_1183c = load i32, i32* %v2_1183c, align 4
  store i32 %v3_1183c, i32* %ip.global-to-local, align 4
  %v1_11840 = add i32 %v3_1183c, -1
  store i32 %v1_11840, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11844 = icmp eq i32 %v1_11840, 0
  store i1 %v2_11844, i1* %cpsr_z.global-to-local, align 1
  %v5_11848 = icmp sgt i32 %v1_11840, 0
  br i1 %v5_11848, label %dec_label_pc_11868, label %dec_label_pc_11e18

dec_label_pc_11850:                               ; preds = %bb340
  %v2_11850 = icmp ugt i8 %v3_1186c, 35
  store i1 %v2_11850, i1* %cpsr_c.global-to-local, align 1
  %v7_11850 = icmp eq i8 %v3_1186c, 36
  store i1 %v7_11850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11850, label %dec_label_pc_1187c, label %dec_label_pc_11858

dec_label_pc_11858:                               ; preds = %dec_label_pc_11850
  %v2_11858 = icmp ugt i8 %v3_1186c, 34
  store i1 %v2_11858, i1* %cpsr_c.global-to-local, align 1
  %v7_11858 = icmp eq i8 %v3_1186c, 35
  store i1 %v7_11858, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11858, label %dec_label_pc_1187c, label %dec_label_pc_11860

dec_label_pc_11860:                               ; preds = %dec_label_pc_11858
  %v1_11860 = add i32 %v0_1187c, -1
  store i32 %v1_11860, i32* %r0.global-to-local, align 4
  %v2_11860 = icmp ne i32 %v0_1187c, 0
  store i1 %v2_11860, i1* %cpsr_c.global-to-local, align 1
  %v7_11860 = icmp eq i32 %v0_1187c, 1
  store i1 %v7_11860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11860, label %dec_label_pc_11e18, label %dec_label_pc_11868

dec_label_pc_11868:                               ; preds = %dec_label_pc_1183c, %dec_label_pc_11860
  %v0_1187c = phi i32 [ %v1_11860, %dec_label_pc_11860 ], [ %v1_11840, %dec_label_pc_1183c ]
  %v2_11868 = add i32 %v0_1187c, %v0_11688
  store i32 %v2_11868, i32* %r3.global-to-local, align 4
  %v1_1186c = add i32 %v2_11868, 28
  %v2_1186c = inttoptr i32 %v1_1186c to i8*
  %v3_1186c = load i8, i8* %v2_1186c, align 1
  %v4_1186c = zext i8 %v3_1186c to i32
  store i32 %v4_1186c, i32* %r3.global-to-local, align 4
  %v2_11870 = icmp ugt i8 %v3_1186c, 61
  store i1 %v2_11870, i1* %cpsr_c.global-to-local, align 1
  %v7_11870 = icmp eq i8 %v3_1186c, 62
  store i1 %v7_11870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11870, label %dec_label_pc_1187c, label %bb340

bb340:                                            ; preds = %dec_label_pc_11868
  %v3_11874 = icmp ugt i8 %v3_1186c, 57
  store i1 %v3_11874, i1* %cpsr_c.global-to-local, align 1
  %v8_11874 = icmp eq i8 %v3_1186c, 58
  store i1 %v8_11874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11874, label %dec_label_pc_1187c, label %dec_label_pc_11850

dec_label_pc_1187c:                               ; preds = %dec_label_pc_11868, %bb340, %dec_label_pc_11858, %dec_label_pc_11850
  %v1_1187c = add i32 %v0_1187c, 1
  store i32 %v1_1187c, i32* @r7, align 4
  %v2_11880 = icmp eq i32 %v1_1187c, -1
  store i1 %v2_11880, i1* %cpsr_c.global-to-local, align 1
  %v7_11880 = icmp eq i32 %v0_1187c, -2
  store i1 %v7_11880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11880, label %dec_label_pc_11e18, label %dec_label_pc_11888

dec_label_pc_11888:                               ; preds = %dec_label_pc_11e58, %dec_label_pc_1187c
  %v0_11888 = phi i32 [ %v0_11e60, %dec_label_pc_11e58 ], [ %v1_1187c, %dec_label_pc_1187c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11888 = icmp eq i32 %v0_11888, 0
  store i1 %v2_11888, i1* %cpsr_z.global-to-local, align 1
  %tmp341 = icmp slt i32 %v0_11888, 1
  br i1 %tmp341, label %dec_label_pc_11794, label %dec_label_pc_11890

dec_label_pc_11890:                               ; preds = %dec_label_pc_11888
  %v0_11890 = load i32, i32* @r5, align 4
  %v1_11890 = inttoptr i32 %v0_11890 to i32*
  %v2_11890 = load i32, i32* %v1_11890, align 4
  store i32 %v2_11890, i32* %r3.global-to-local, align 4
  %v1_11894 = add i32 %v0_11890, 4
  %v2_11894 = inttoptr i32 %v1_11894 to i32*
  %v3_11894 = load i32, i32* %v2_11894, align 4
  store i32 %v3_11894, i32* %r0.global-to-local, align 4
  %v1_11898 = add i32 %v2_11890, 13
  %v2_11898 = inttoptr i32 %v1_11898 to i8*
  %v3_11898 = load i8, i8* %v2_11898, align 1
  %v4_11898 = zext i8 %v3_11898 to i32
  store i32 %v4_11898, i32* %r2.global-to-local, align 4
  %v1_1189c = add i32 %v2_11890, 4
  %v2_1189c = inttoptr i32 %v1_1189c to i32*
  %v3_1189c = load i32, i32* %v2_1189c, align 4
  store i32 %v3_1189c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_118a4 = inttoptr i32 %v3_1189c to i32*
  %v5_118a4 = call i32 @send(i32 %v3_11894, i32* %v4_118a4, i32 %v4_11898, i32 16384)
  store i32 %v5_118a4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_118ac = load i32, i32* @r5, align 4
  %v1_118ac = add i32 %v0_118ac, 4
  %v2_118ac = inttoptr i32 %v1_118ac to i32*
  %v3_118ac = load i32, i32* %v2_118ac, align 4
  store i32 %v3_118ac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_118b8 = call i32 @send(i32 %v3_118ac, i32* bitcast ([3 x i8]* @global_var_13690.112 to i32*), i32 2, i32 16384)
  store i32 %v5_118b8, i32* %r0.global-to-local, align 4
  %v0_118bc = load i32, i32* @r5, align 4
  %v1_118bc = add i32 %v0_118bc, 24
  %v2_118bc = inttoptr i32 %v1_118bc to i32*
  %v3_118bc = load i32, i32* %v2_118bc, align 4
  store i32 %v3_118bc, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_118c4 = add i32 %v0_118bc, 12
  %v3_118c4 = inttoptr i32 %v2_118c4 to i32*
  store i32 5, i32* %v3_118c4, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_118cc:                               ; preds = %dec_label_pc_11688
  %v1_118cc = add i32 %v0_11688, 24
  %v2_118cc = inttoptr i32 %v1_118cc to i32*
  %v3_118cc = load i32, i32* %v2_118cc, align 4
  store i32 %v3_118cc, i32* %ip.global-to-local, align 4
  %v1_118d0 = add i32 %v3_118cc, -1
  store i32 %v1_118d0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_118d4 = icmp eq i32 %v1_118d0, 0
  store i1 %v2_118d4, i1* %cpsr_z.global-to-local, align 1
  %v5_118d8 = icmp sgt i32 %v1_118d0, 0
  br i1 %v5_118d8, label %dec_label_pc_11900, label %dec_label_pc_1160c.backedge.thread

dec_label_pc_118e0:                               ; preds = %bb342
  %v2_118e0 = icmp ugt i8 %v3_11904, 35
  store i1 %v2_118e0, i1* %cpsr_c.global-to-local, align 1
  %v7_118e0 = icmp eq i8 %v3_11904, 36
  store i1 %v7_118e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118e0, label %dec_label_pc_11914, label %dec_label_pc_118e8

dec_label_pc_118e8:                               ; preds = %dec_label_pc_118e0
  %v2_118e8 = icmp ugt i8 %v3_11904, 34
  store i1 %v2_118e8, i1* %cpsr_c.global-to-local, align 1
  %v7_118e8 = icmp eq i8 %v3_11904, 35
  store i1 %v7_118e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118e8, label %dec_label_pc_11914, label %dec_label_pc_118f0

dec_label_pc_118f0:                               ; preds = %dec_label_pc_118e8
  %v2_118f0 = icmp ugt i8 %v3_11904, 36
  store i1 %v2_118f0, i1* %cpsr_c.global-to-local, align 1
  %v7_118f0 = icmp eq i8 %v3_11904, 37
  store i1 %v7_118f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118f0, label %dec_label_pc_11914, label %dec_label_pc_118f8

dec_label_pc_118f8:                               ; preds = %dec_label_pc_118f0
  %v1_118f8 = add i32 %v0_11914, -1
  store i32 %v1_118f8, i32* %r0.global-to-local, align 4
  %v2_118f8 = icmp ne i32 %v0_11914, 0
  store i1 %v2_118f8, i1* %cpsr_c.global-to-local, align 1
  %v7_118f8 = icmp eq i32 %v0_11914, 1
  store i1 %v7_118f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118f8, label %dec_label_pc_1160c.backedge.thread465, label %dec_label_pc_11900

dec_label_pc_11900:                               ; preds = %dec_label_pc_118cc, %dec_label_pc_118f8
  %v0_11914 = phi i32 [ %v1_118f8, %dec_label_pc_118f8 ], [ %v1_118d0, %dec_label_pc_118cc ]
  %v2_11900 = add i32 %v0_11914, %v0_11688
  store i32 %v2_11900, i32* %r3.global-to-local, align 4
  %v1_11904 = add i32 %v2_11900, 28
  %v2_11904 = inttoptr i32 %v1_11904 to i8*
  %v3_11904 = load i8, i8* %v2_11904, align 1
  %v4_11904 = zext i8 %v3_11904 to i32
  store i32 %v4_11904, i32* %r3.global-to-local, align 4
  %v2_11908 = icmp ugt i8 %v3_11904, 61
  store i1 %v2_11908, i1* %cpsr_c.global-to-local, align 1
  %v7_11908 = icmp eq i8 %v3_11904, 62
  store i1 %v7_11908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11908, label %dec_label_pc_11914, label %bb342

bb342:                                            ; preds = %dec_label_pc_11900
  %v3_1190c = icmp ugt i8 %v3_11904, 57
  store i1 %v3_1190c, i1* %cpsr_c.global-to-local, align 1
  %v8_1190c = icmp eq i8 %v3_11904, 58
  store i1 %v8_1190c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1190c, label %dec_label_pc_11914, label %dec_label_pc_118e0

dec_label_pc_11914:                               ; preds = %dec_label_pc_11900, %bb342, %dec_label_pc_118f0, %dec_label_pc_118e8, %dec_label_pc_118e0
  %v1_11914 = add i32 %v0_11914, 1
  store i32 %v1_11914, i32* @r7, align 4
  %v2_11918 = icmp eq i32 %v1_11914, -1
  store i1 %v2_11918, i1* %cpsr_c.global-to-local, align 1
  %v7_11918 = icmp eq i32 %v0_11914, -2
  store i1 %v7_11918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11918, label %dec_label_pc_1160c.backedge.thread465, label %dec_label_pc_11920

dec_label_pc_11920:                               ; preds = %dec_label_pc_11914
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11920 = icmp eq i32 %v1_11914, 0
  store i1 %v2_11920, i1* %cpsr_z.global-to-local, align 1
  %tmp343 = icmp slt i32 %v1_11914, 1
  br i1 %tmp343, label %dec_label_pc_11794, label %dec_label_pc_11928

dec_label_pc_11928:                               ; preds = %dec_label_pc_11920
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_1192c = call i32 @function_12288(i32 25)
  store i32 %v2_115a4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_1193c = call i32 @function_121a4(i32 25, i32* %v2_115ac)
  store i32 %v3_1193c, i32* %r0.global-to-local, align 4
  %v3_11940 = load i8, i8* %stack_var_-52, align 1
  %v4_11940 = sext i8 %v3_11940 to i32
  store i32 %v4_11940, i32* %r2.global-to-local, align 4
  store i32 %v3_1193c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1194c = load i32, i32* @r5, align 4
  %v1_1194c = add i32 %v0_1194c, 4
  %v2_1194c = inttoptr i32 %v1_1194c to i32*
  %v3_1194c = load i32, i32* %v2_1194c, align 4
  store i32 %v3_1194c, i32* %r0.global-to-local, align 4
  %v4_11950 = inttoptr i32 %v3_1193c to i32*
  %v5_11950 = call i32 @send(i32 %v3_1194c, i32* %v4_11950, i32 %v4_11940, i32 16384)
  store i32 %v5_11950, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11960 = load i32, i32* @r5, align 4
  %v1_11960 = add i32 %v0_11960, 4
  %v2_11960 = inttoptr i32 %v1_11960 to i32*
  %v3_11960 = load i32, i32* %v2_11960, align 4
  store i32 %v3_11960, i32* %r0.global-to-local, align 4
  %v5_11964 = call i32 @send(i32 %v3_11960, i32* bitcast ([3 x i8]* @global_var_13690.112 to i32*), i32 2, i32 16384)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_1196c = call i32 @function_121d0(i32 25)
  store i32 %v1_1196c, i32* %r0.global-to-local, align 4
  %v0_11970 = load i32, i32* @r5, align 4
  %v1_11970 = add i32 %v0_11970, 24
  %v2_11970 = inttoptr i32 %v1_11970 to i32*
  %v3_11970 = load i32, i32* %v2_11970, align 4
  store i32 %v3_11970, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_11978 = add i32 %v0_11970, 12
  %v3_11978 = inttoptr i32 %v2_11978 to i32*
  store i32 6, i32* %v3_11978, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11980:                               ; preds = %dec_label_pc_11688
  %v1_11980 = add i32 %v0_11688, 24
  %v2_11980 = inttoptr i32 %v1_11980 to i32*
  %v3_11980 = load i32, i32* %v2_11980, align 4
  store i32 %v3_11980, i32* %ip.global-to-local, align 4
  %v1_11984 = add i32 %v3_11980, -1
  store i32 %v1_11984, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11988 = icmp eq i32 %v1_11984, 0
  store i1 %v2_11988, i1* %cpsr_z.global-to-local, align 1
  %v5_1198c = icmp sgt i32 %v1_11984, 0
  br i1 %v5_1198c, label %dec_label_pc_11a6c, label %dec_label_pc_1160c.backedge.thread

dec_label_pc_11a4c:                               ; preds = %bb344
  %v2_11a4c = icmp ugt i8 %v3_11a70, 35
  store i1 %v2_11a4c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a4c = icmp eq i8 %v3_11a70, 36
  store i1 %v7_11a4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a4c, label %dec_label_pc_11a80, label %dec_label_pc_11a54

dec_label_pc_11a54:                               ; preds = %dec_label_pc_11a4c
  %v2_11a54 = icmp ugt i8 %v3_11a70, 34
  store i1 %v2_11a54, i1* %cpsr_c.global-to-local, align 1
  %v7_11a54 = icmp eq i8 %v3_11a70, 35
  store i1 %v7_11a54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a54, label %dec_label_pc_11a80, label %dec_label_pc_11a5c

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_11a54
  %v2_11a5c = icmp ugt i8 %v3_11a70, 36
  store i1 %v2_11a5c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a5c = icmp eq i8 %v3_11a70, 37
  store i1 %v7_11a5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a5c, label %dec_label_pc_11a80, label %dec_label_pc_11a64

dec_label_pc_11a64:                               ; preds = %dec_label_pc_11a5c
  %v1_11a64 = add i32 %v0_11a80, -1
  store i32 %v1_11a64, i32* %r0.global-to-local, align 4
  %v2_11a64 = icmp ne i32 %v0_11a80, 0
  store i1 %v2_11a64, i1* %cpsr_c.global-to-local, align 1
  %v7_11a64 = icmp eq i32 %v0_11a80, 1
  store i1 %v7_11a64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a64, label %dec_label_pc_1160c.backedge.thread465, label %dec_label_pc_11a6c

dec_label_pc_11a6c:                               ; preds = %dec_label_pc_11980, %dec_label_pc_11a64
  %v0_11a80 = phi i32 [ %v1_11a64, %dec_label_pc_11a64 ], [ %v1_11984, %dec_label_pc_11980 ]
  %v2_11a6c = add i32 %v0_11a80, %v0_11688
  store i32 %v2_11a6c, i32* %r3.global-to-local, align 4
  %v1_11a70 = add i32 %v2_11a6c, 28
  %v2_11a70 = inttoptr i32 %v1_11a70 to i8*
  %v3_11a70 = load i8, i8* %v2_11a70, align 1
  %v4_11a70 = zext i8 %v3_11a70 to i32
  store i32 %v4_11a70, i32* %r3.global-to-local, align 4
  %v2_11a74 = icmp ugt i8 %v3_11a70, 61
  store i1 %v2_11a74, i1* %cpsr_c.global-to-local, align 1
  %v7_11a74 = icmp eq i8 %v3_11a70, 62
  store i1 %v7_11a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a74, label %dec_label_pc_11a80, label %bb344

bb344:                                            ; preds = %dec_label_pc_11a6c
  %v3_11a78 = icmp ugt i8 %v3_11a70, 57
  store i1 %v3_11a78, i1* %cpsr_c.global-to-local, align 1
  %v8_11a78 = icmp eq i8 %v3_11a70, 58
  store i1 %v8_11a78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11a78, label %dec_label_pc_11a80, label %dec_label_pc_11a4c

dec_label_pc_11a80:                               ; preds = %dec_label_pc_11a6c, %bb344, %dec_label_pc_11a5c, %dec_label_pc_11a54, %dec_label_pc_11a4c
  %v1_11a80 = add i32 %v0_11a80, 1
  store i32 %v1_11a80, i32* @r7, align 4
  %v2_11a84 = icmp eq i32 %v1_11a80, -1
  store i1 %v2_11a84, i1* %cpsr_c.global-to-local, align 1
  %v7_11a84 = icmp eq i32 %v0_11a80, -2
  store i1 %v7_11a84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a84, label %dec_label_pc_1160c.backedge.thread465, label %dec_label_pc_11a8c

dec_label_pc_11a8c:                               ; preds = %dec_label_pc_11a80
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a8c = icmp eq i32 %v1_11a80, 0
  store i1 %v2_11a8c, i1* %cpsr_z.global-to-local, align 1
  %tmp345 = icmp slt i32 %v1_11a80, 1
  br i1 %tmp345, label %dec_label_pc_11794, label %dec_label_pc_11a94

dec_label_pc_11a94:                               ; preds = %dec_label_pc_11a8c
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11a98 = call i32 @function_12288(i32 26)
  store i32 %v2_115b8, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_11aa8 = call i32 @function_121a4(i32 26, i32* nonnull %stack_var_-56)
  store i32 %v3_11aa8, i32* %r0.global-to-local, align 4
  %v3_11aac = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11aac, i32* %r2.global-to-local, align 4
  store i32 %v3_11aa8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11ab8 = load i32, i32* @r5, align 4
  %v1_11ab8 = add i32 %v0_11ab8, 4
  %v2_11ab8 = inttoptr i32 %v1_11ab8 to i32*
  %v3_11ab8 = load i32, i32* %v2_11ab8, align 4
  store i32 %v3_11ab8, i32* %r0.global-to-local, align 4
  %v4_11abc = inttoptr i32 %v3_11aa8 to i32*
  %v5_11abc = call i32 @send(i32 %v3_11ab8, i32* %v4_11abc, i32 %v3_11aac, i32 16384)
  store i32 %v5_11abc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11acc = load i32, i32* @r5, align 4
  %v1_11acc = add i32 %v0_11acc, 4
  %v2_11acc = inttoptr i32 %v1_11acc to i32*
  %v3_11acc = load i32, i32* %v2_11acc, align 4
  store i32 %v3_11acc, i32* %r0.global-to-local, align 4
  %v5_11ad0 = call i32 @send(i32 %v3_11acc, i32* bitcast ([3 x i8]* @global_var_13690.112 to i32*), i32 2, i32 16384)
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11ad8 = call i32 @function_121d0(i32 26)
  store i32 %v1_11ad8, i32* %r0.global-to-local, align 4
  %v0_11adc = load i32, i32* @r5, align 4
  %v1_11adc = add i32 %v0_11adc, 24
  %v2_11adc = inttoptr i32 %v1_11adc to i32*
  %v3_11adc = load i32, i32* %v2_11adc, align 4
  store i32 %v3_11adc, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_11ae4 = add i32 %v0_11adc, 12
  %v3_11ae4 = inttoptr i32 %v2_11ae4 to i32*
  store i32 7, i32* %v3_11ae4, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11688
  %v1_11aec = add i32 %v0_11688, 24
  %v2_11aec = inttoptr i32 %v1_11aec to i32*
  %v3_11aec = load i32, i32* %v2_11aec, align 4
  store i32 %v3_11aec, i32* %ip.global-to-local, align 4
  %v1_11af0 = add i32 %v3_11aec, -1
  store i32 %v1_11af0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11af4 = icmp eq i32 %v1_11af0, 0
  store i1 %v2_11af4, i1* %cpsr_z.global-to-local, align 1
  %v5_11af8 = icmp sgt i32 %v1_11af0, 0
  br i1 %v5_11af8, label %dec_label_pc_11b20, label %dec_label_pc_1160c.backedge.thread

dec_label_pc_11b00:                               ; preds = %bb346
  %v2_11b00 = icmp ugt i8 %v3_11b24, 35
  store i1 %v2_11b00, i1* %cpsr_c.global-to-local, align 1
  %v7_11b00 = icmp eq i8 %v3_11b24, 36
  store i1 %v7_11b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b00, label %dec_label_pc_11b34, label %dec_label_pc_11b08

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11b00
  %v2_11b08 = icmp ugt i8 %v3_11b24, 34
  store i1 %v2_11b08, i1* %cpsr_c.global-to-local, align 1
  %v7_11b08 = icmp eq i8 %v3_11b24, 35
  store i1 %v7_11b08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b08, label %dec_label_pc_11b34, label %dec_label_pc_11b10

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11b08
  %v2_11b10 = icmp ugt i8 %v3_11b24, 36
  store i1 %v2_11b10, i1* %cpsr_c.global-to-local, align 1
  %v7_11b10 = icmp eq i8 %v3_11b24, 37
  store i1 %v7_11b10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b10, label %dec_label_pc_11b34, label %dec_label_pc_11b18

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11b10
  %v1_11b18 = add i32 %v0_11b34, -1
  store i32 %v1_11b18, i32* %r0.global-to-local, align 4
  %v2_11b18 = icmp ne i32 %v0_11b34, 0
  store i1 %v2_11b18, i1* %cpsr_c.global-to-local, align 1
  %v7_11b18 = icmp eq i32 %v0_11b34, 1
  store i1 %v7_11b18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b18, label %dec_label_pc_1160c.backedge.thread465, label %dec_label_pc_11b20

dec_label_pc_11b20:                               ; preds = %dec_label_pc_11aec, %dec_label_pc_11b18
  %v0_11b34 = phi i32 [ %v1_11b18, %dec_label_pc_11b18 ], [ %v1_11af0, %dec_label_pc_11aec ]
  %v2_11b20 = add i32 %v0_11b34, %v0_11688
  store i32 %v2_11b20, i32* %r3.global-to-local, align 4
  %v1_11b24 = add i32 %v2_11b20, 28
  %v2_11b24 = inttoptr i32 %v1_11b24 to i8*
  %v3_11b24 = load i8, i8* %v2_11b24, align 1
  %v4_11b24 = zext i8 %v3_11b24 to i32
  store i32 %v4_11b24, i32* %r3.global-to-local, align 4
  %v2_11b28 = icmp ugt i8 %v3_11b24, 61
  store i1 %v2_11b28, i1* %cpsr_c.global-to-local, align 1
  %v7_11b28 = icmp eq i8 %v3_11b24, 62
  store i1 %v7_11b28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b28, label %dec_label_pc_11b34, label %bb346

bb346:                                            ; preds = %dec_label_pc_11b20
  %v3_11b2c = icmp ugt i8 %v3_11b24, 57
  store i1 %v3_11b2c, i1* %cpsr_c.global-to-local, align 1
  %v8_11b2c = icmp eq i8 %v3_11b24, 58
  store i1 %v8_11b2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11b2c, label %dec_label_pc_11b34, label %dec_label_pc_11b00

dec_label_pc_11b34:                               ; preds = %dec_label_pc_11b20, %bb346, %dec_label_pc_11b10, %dec_label_pc_11b08, %dec_label_pc_11b00
  %v1_11b34 = add i32 %v0_11b34, 1
  store i32 %v1_11b34, i32* @r7, align 4
  %v2_11b38 = icmp eq i32 %v1_11b34, -1
  store i1 %v2_11b38, i1* %cpsr_c.global-to-local, align 1
  %v7_11b38 = icmp eq i32 %v0_11b34, -2
  store i1 %v7_11b38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b38, label %dec_label_pc_1160c.backedge.thread465, label %dec_label_pc_11b40

dec_label_pc_11b40:                               ; preds = %dec_label_pc_11b34
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11b40 = icmp eq i32 %v1_11b34, 0
  store i1 %v2_11b40, i1* %cpsr_z.global-to-local, align 1
  %tmp347 = icmp slt i32 %v1_11b34, 1
  br i1 %tmp347, label %dec_label_pc_11794, label %dec_label_pc_11b48

dec_label_pc_11b48:                               ; preds = %dec_label_pc_11b40
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_11b4c = call i32 @function_12288(i32 27)
  store i32 %v2_115a4, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_11b5c = call i32 @function_121a4(i32 27, i32* %v2_115ac)
  store i32 %v3_11b5c, i32* %r0.global-to-local, align 4
  %v3_11b60 = load i8, i8* %stack_var_-52, align 1
  %v4_11b60 = sext i8 %v3_11b60 to i32
  store i32 %v4_11b60, i32* %r2.global-to-local, align 4
  store i32 %v3_11b5c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b6c = load i32, i32* @r5, align 4
  %v1_11b6c = add i32 %v0_11b6c, 4
  %v2_11b6c = inttoptr i32 %v1_11b6c to i32*
  %v3_11b6c = load i32, i32* %v2_11b6c, align 4
  store i32 %v3_11b6c, i32* %r0.global-to-local, align 4
  %v4_11b70 = inttoptr i32 %v3_11b5c to i32*
  %v5_11b70 = call i32 @send(i32 %v3_11b6c, i32* %v4_11b70, i32 %v4_11b60, i32 16384)
  store i32 %v5_11b70, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b80 = load i32, i32* @r5, align 4
  %v1_11b80 = add i32 %v0_11b80, 4
  %v2_11b80 = inttoptr i32 %v1_11b80 to i32*
  %v3_11b80 = load i32, i32* %v2_11b80, align 4
  store i32 %v3_11b80, i32* %r0.global-to-local, align 4
  %v5_11b84 = call i32 @send(i32 %v3_11b80, i32* bitcast ([3 x i8]* @global_var_13690.112 to i32*), i32 2, i32 16384)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_11b8c = call i32 @function_121d0(i32 27)
  store i32 %v1_11b8c, i32* %r0.global-to-local, align 4
  %v0_11b90 = load i32, i32* @r5, align 4
  %v1_11b90 = add i32 %v0_11b90, 24
  %v2_11b90 = inttoptr i32 %v1_11b90 to i32*
  %v3_11b90 = load i32, i32* %v2_11b90, align 4
  store i32 %v3_11b90, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_11b98 = add i32 %v0_11b90, 12
  %v3_11b98 = inttoptr i32 %v2_11b98 to i32*
  store i32 9, i32* %v3_11b98, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11ba0:                               ; preds = %dec_label_pc_11688
  %v1_11ba0 = add i32 %v0_11688, 24
  %v2_11ba0 = inttoptr i32 %v1_11ba0 to i32*
  %v3_11ba0 = load i32, i32* %v2_11ba0, align 4
  store i32 %v3_11ba0, i32* %ip.global-to-local, align 4
  %v1_11ba4 = add i32 %v3_11ba0, -1
  store i32 %v1_11ba4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11ba8 = icmp eq i32 %v1_11ba4, 0
  store i1 %v2_11ba8, i1* %cpsr_z.global-to-local, align 1
  %v5_11bac = icmp sgt i32 %v1_11ba4, 0
  br i1 %v5_11bac, label %dec_label_pc_11bd4, label %dec_label_pc_1160c.backedge.thread

dec_label_pc_11bb4:                               ; preds = %bb348
  %v2_11bb4 = icmp ugt i8 %v3_11bd8, 35
  store i1 %v2_11bb4, i1* %cpsr_c.global-to-local, align 1
  %v7_11bb4 = icmp eq i8 %v3_11bd8, 36
  store i1 %v7_11bb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bb4, label %dec_label_pc_11be8, label %dec_label_pc_11bbc

dec_label_pc_11bbc:                               ; preds = %dec_label_pc_11bb4
  %v2_11bbc = icmp ugt i8 %v3_11bd8, 34
  store i1 %v2_11bbc, i1* %cpsr_c.global-to-local, align 1
  %v7_11bbc = icmp eq i8 %v3_11bd8, 35
  store i1 %v7_11bbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bbc, label %dec_label_pc_11be8, label %dec_label_pc_11bc4

dec_label_pc_11bc4:                               ; preds = %dec_label_pc_11bbc
  %v2_11bc4 = icmp ugt i8 %v3_11bd8, 36
  store i1 %v2_11bc4, i1* %cpsr_c.global-to-local, align 1
  %v7_11bc4 = icmp eq i8 %v3_11bd8, 37
  store i1 %v7_11bc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bc4, label %dec_label_pc_11be8, label %dec_label_pc_11bcc

dec_label_pc_11bcc:                               ; preds = %dec_label_pc_11bc4
  %v1_11bcc = add i32 %v0_11be8, -1
  store i32 %v1_11bcc, i32* %r0.global-to-local, align 4
  %v2_11bcc = icmp ne i32 %v0_11be8, 0
  store i1 %v2_11bcc, i1* %cpsr_c.global-to-local, align 1
  %v7_11bcc = icmp eq i32 %v0_11be8, 1
  store i1 %v7_11bcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bcc, label %dec_label_pc_1160c.backedge.thread465, label %dec_label_pc_11bd4

dec_label_pc_11bd4:                               ; preds = %dec_label_pc_11ba0, %dec_label_pc_11bcc
  %v0_11be8 = phi i32 [ %v1_11bcc, %dec_label_pc_11bcc ], [ %v1_11ba4, %dec_label_pc_11ba0 ]
  %v2_11bd4 = add i32 %v0_11be8, %v0_11688
  store i32 %v2_11bd4, i32* %r3.global-to-local, align 4
  %v1_11bd8 = add i32 %v2_11bd4, 28
  %v2_11bd8 = inttoptr i32 %v1_11bd8 to i8*
  %v3_11bd8 = load i8, i8* %v2_11bd8, align 1
  %v4_11bd8 = zext i8 %v3_11bd8 to i32
  store i32 %v4_11bd8, i32* %r3.global-to-local, align 4
  %v2_11bdc = icmp ugt i8 %v3_11bd8, 61
  store i1 %v2_11bdc, i1* %cpsr_c.global-to-local, align 1
  %v7_11bdc = icmp eq i8 %v3_11bd8, 62
  store i1 %v7_11bdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bdc, label %dec_label_pc_11be8, label %bb348

bb348:                                            ; preds = %dec_label_pc_11bd4
  %v3_11be0 = icmp ugt i8 %v3_11bd8, 57
  store i1 %v3_11be0, i1* %cpsr_c.global-to-local, align 1
  %v8_11be0 = icmp eq i8 %v3_11bd8, 58
  store i1 %v8_11be0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11be0, label %dec_label_pc_11be8, label %dec_label_pc_11bb4

dec_label_pc_11be8:                               ; preds = %dec_label_pc_11bd4, %bb348, %dec_label_pc_11bc4, %dec_label_pc_11bbc, %dec_label_pc_11bb4
  %v1_11be8 = add i32 %v0_11be8, 1
  store i32 %v1_11be8, i32* @r7, align 4
  %v2_11bec = icmp eq i32 %v1_11be8, -1
  store i1 %v2_11bec, i1* %cpsr_c.global-to-local, align 1
  %v7_11bec = icmp eq i32 %v0_11be8, -2
  store i1 %v7_11bec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11bec, label %dec_label_pc_1160c.backedge.thread465, label %dec_label_pc_11bf4

dec_label_pc_11bf4:                               ; preds = %dec_label_pc_11be8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11bf4 = icmp eq i32 %v1_11be8, 0
  store i1 %v2_11bf4, i1* %cpsr_z.global-to-local, align 1
  %tmp349 = icmp slt i32 %v1_11be8, 1
  br i1 %tmp349, label %dec_label_pc_11794, label %dec_label_pc_11bfc

dec_label_pc_11bfc:                               ; preds = %dec_label_pc_11bf4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11c00 = call i32 @function_12288(i32 24)
  store i32 %v2_115b8, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_11c10 = call i32 @function_121a4(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_11c10, i32* %r0.global-to-local, align 4
  %v3_11c14 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11c14, i32* %r2.global-to-local, align 4
  store i32 %v3_11c10, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11c20 = load i32, i32* @r5, align 4
  %v1_11c20 = add i32 %v0_11c20, 4
  %v2_11c20 = inttoptr i32 %v1_11c20 to i32*
  %v3_11c20 = load i32, i32* %v2_11c20, align 4
  store i32 %v3_11c20, i32* %r0.global-to-local, align 4
  %v4_11c24 = inttoptr i32 %v3_11c10 to i32*
  %v5_11c24 = call i32 @send(i32 %v3_11c20, i32* %v4_11c24, i32 %v3_11c14, i32 16384)
  store i32 %v5_11c24, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11c34 = load i32, i32* @r5, align 4
  %v1_11c34 = add i32 %v0_11c34, 4
  %v2_11c34 = inttoptr i32 %v1_11c34 to i32*
  %v3_11c34 = load i32, i32* %v2_11c34, align 4
  store i32 %v3_11c34, i32* %r0.global-to-local, align 4
  %v5_11c38 = call i32 @send(i32 %v3_11c34, i32* bitcast ([3 x i8]* @global_var_13690.112 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11c40 = call i32 @function_121d0(i32 24)
  store i32 %v1_11c40, i32* %r0.global-to-local, align 4
  %v0_11c44 = load i32, i32* @r5, align 4
  %v1_11c44 = add i32 %v0_11c44, 24
  %v2_11c44 = inttoptr i32 %v1_11c44 to i32*
  %v3_11c44 = load i32, i32* %v2_11c44, align 4
  store i32 %v3_11c44, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_11c4c = add i32 %v0_11c44, 12
  %v3_11c4c = inttoptr i32 %v2_11c4c to i32*
  store i32 8, i32* %v3_11c4c, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11c54:                               ; preds = %dec_label_pc_11688
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_11c58 = call i32 @function_12288(i32 30)
  store i32 %v2_115a4, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_11c68 = call i32 @function_121a4(i32 30, i32* %v2_115ac)
  %v3_11c6c = load i8, i8* %stack_var_-52, align 1
  %v4_11c6c = sext i8 %v3_11c6c to i32
  store i32 %v3_11c68, i32* %r2.global-to-local, align 4
  %v1_11c74 = add nsw i32 %v4_11c6c, -1
  store i32 %v1_11c74, i32* %r3.global-to-local, align 4
  %v0_11c78 = load i32, i32* @sl, align 4
  store i32 %v0_11c78, i32* %r0.global-to-local, align 4
  %v0_11c7c = load i32, i32* @r5, align 4
  %v1_11c7c = add i32 %v0_11c7c, 24
  %v2_11c7c = inttoptr i32 %v1_11c7c to i32*
  %v3_11c7c = load i32, i32* %v2_11c7c, align 4
  store i32 %v3_11c7c, i32* %r1.global-to-local, align 4
  %v4_11c80 = call i32 @function_12e00(i32 %v0_11c78, i32 %v3_11c7c, i32 %v3_11c68, i32 %v1_11c74)
  %v2_11c84 = icmp eq i32 %v4_11c80, -1
  store i1 %v2_11c84, i1* %cpsr_c.global-to-local, align 1
  %v7_11c84 = icmp eq i32 %v4_11c80, -1
  store i1 %v7_11c84, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_11c80, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_11e70 = call i32 @function_121d0(i32 30)
  br i1 %v7_11c84, label %dec_label_pc_11e6c, label %dec_label_pc_11c90

dec_label_pc_11c90:                               ; preds = %dec_label_pc_11c54
  store i32 %v1_11e70, i32* %r0.global-to-local, align 4
  %v0_11c98 = load i32, i32* @r5, align 4
  %v1_11c98 = add i32 %v0_11c98, 4
  %v2_11c98 = inttoptr i32 %v1_11c98 to i32*
  %v3_11c98 = load i32, i32* %v2_11c98, align 4
  store i32 %v3_11c98, i32* %r0.global-to-local, align 4
  %v1_11c9c = call i32 @close(i32 %v3_11c98)
  store i32 %v1_11c9c, i32* %r0.global-to-local, align 4
  %v0_11ca0 = load i32, i32* @r5, align 4
  %v1_11ca0 = add i32 %v0_11ca0, 284
  %v2_11ca0 = inttoptr i32 %v1_11ca0 to i8*
  %v3_11ca0 = load i8, i8* %v2_11ca0, align 1
  %v4_11ca0 = zext i8 %v3_11ca0 to i32
  %v1_11ca4 = add nuw nsw i32 %v4_11ca0, 1
  %v1_11ca8 = urem i32 %v1_11ca4, 256
  store i32 %v1_11ca8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_11cb0 = icmp ugt i32 %v1_11ca8, 9
  store i1 %v2_11cb0, i1* %cpsr_c.global-to-local, align 1
  %v7_11cb0 = icmp eq i32 %v1_11ca8, 10
  store i1 %v7_11cb0, i1* %cpsr_z.global-to-local, align 1
  %v2_11cb4 = add i32 %v0_11ca0, 4
  %v3_11cb4 = inttoptr i32 %v2_11cb4 to i32*
  store i32 -1, i32* %v3_11cb4, align 4
  %v0_11cb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_11cb8 = trunc i32 %v0_11cb8 to i8
  %v2_11cb8 = load i32, i32* @r5, align 4
  %v3_11cb8 = add i32 %v2_11cb8, 284
  %v4_11cb8 = inttoptr i32 %v3_11cb8 to i8*
  store i8 %v1_11cb8, i8* %v4_11cb8, align 1
  %v0_11cbc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11cbc, label %dec_label_pc_11cc0, label %dec_label_pc_11fcc

dec_label_pc_11cc0:                               ; preds = %dec_label_pc_11c90
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_11cc8 = load i32, i32* @r5, align 4
  %v1_11cc8 = add i32 %v0_11cc8, 24
  %v2_11cc8 = inttoptr i32 %v1_11cc8 to i32*
  %v3_11cc8 = load i32, i32* %v2_11cc8, align 4
  store i32 %v3_11cc8, i32* %ip.global-to-local, align 4
  %v3_11ccc = add i32 %v0_11cc8, 284
  %v4_11ccc = inttoptr i32 %v3_11ccc to i8*
  store i8 0, i8* %v4_11ccc, align 1
  %v0_11cd0 = load i32, i32* %r0.global-to-local, align 4
  %v1_11cd0 = load i32, i32* @r5, align 4
  %v2_11cd0 = add i32 %v1_11cd0, 12
  %v3_11cd0 = inttoptr i32 %v2_11cd0 to i32*
  store i32 %v0_11cd0, i32* %v3_11cd0, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11cd8:                               ; preds = %.thread224, %dec_label_pc_11d58, %dec_label_pc_11fcc, %dec_label_pc_11f08, %dec_label_pc_11bfc, %dec_label_pc_11b48, %dec_label_pc_11a94, %dec_label_pc_11928, %dec_label_pc_11890, %dec_label_pc_11800, %dec_label_pc_1179c, %dec_label_pc_11cc0
  %v0_11cd8 = load i32, i32* %ip.global-to-local, align 4
  %v1_11cd8 = load i32, i32* @r7, align 4
  %v2_11cd8 = sub i32 %v0_11cd8, %v1_11cd8
  %v3_11cd8 = icmp uge i32 %v0_11cd8, %v1_11cd8
  store i1 %v3_11cd8, i1* %cpsr_c.global-to-local, align 1
  %v4_11cd8 = xor i32 %v1_11cd8, %v0_11cd8
  %v5_11cd8 = xor i32 %v2_11cd8, %v0_11cd8
  %v6_11cd8 = and i32 %v5_11cd8, %v4_11cd8
  %v7_11cd8 = icmp slt i32 %v6_11cd8, 0
  %v8_11cd8 = icmp slt i32 %v2_11cd8, 0
  %v9_11cd8 = icmp eq i32 %v0_11cd8, %v1_11cd8
  store i1 %v9_11cd8, i1* %cpsr_z.global-to-local, align 1
  %v2_11cdc = xor i1 %v8_11cd8, %v7_11cd8
  %v0_11cd8.v1_11cd8 = select i1 %v2_11cdc, i32 %v0_11cd8, i32 %v1_11cd8
  store i32 %v0_11cd8.v1_11cd8, i32* %r1.global-to-local, align 4
  %v2_11ce4 = sub i32 %v0_11cd8, %v0_11cd8.v1_11cd8
  store i32 %v2_11ce4, i32* %r2.global-to-local, align 4
  %v1_11ce8 = load i32, i32* @r5, align 4
  %v2_11ce8 = add i32 %v1_11ce8, 24
  %v3_11ce8 = inttoptr i32 %v2_11ce8 to i32*
  store i32 %v2_11ce4, i32* %v3_11ce8, align 4
  %v0_11cec = load i32, i32* @sl, align 4
  %v1_11cec = load i32, i32* %r1.global-to-local, align 4
  %v2_11cec = add i32 %v1_11cec, %v0_11cec
  store i32 %v2_11cec, i32* %r1.global-to-local, align 4
  store i32 %v0_11cec, i32* %r0.global-to-local, align 4
  %v3_11cf4 = inttoptr i32 %v0_11cec to i32*
  %v4_11cf4 = inttoptr i32 %v2_11cec to i32*
  %v5_11cf4 = call i32* @memmove(i32* %v3_11cf4, i32* %v4_11cf4, i32 %v2_11ce4)
  %v7_11cf4 = ptrtoint i32* %v5_11cf4 to i32
  store i32 %v7_11cf4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11688

dec_label_pc_11cfc:                               ; preds = %dec_label_pc_11688
  %v1_11cfc = add i32 %v0_11688, 24
  %v2_11cfc = inttoptr i32 %v1_11cfc to i32*
  %v3_11cfc = load i32, i32* %v2_11cfc, align 4
  store i32 %v3_11cfc, i32* %ip.global-to-local, align 4
  %v1_11d00 = add i32 %v3_11cfc, -1
  store i32 %v1_11d00, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d04 = icmp eq i32 %v1_11d00, 0
  store i1 %v2_11d04, i1* %cpsr_z.global-to-local, align 1
  %v5_11d08 = icmp sgt i32 %v1_11d00, 0
  br i1 %v5_11d08, label %dec_label_pc_11d30, label %dec_label_pc_1160c.backedge.thread

dec_label_pc_11d10:                               ; preds = %bb352
  %v2_11d10 = icmp ugt i8 %v3_11d34, 35
  store i1 %v2_11d10, i1* %cpsr_c.global-to-local, align 1
  %v7_11d10 = icmp eq i8 %v3_11d34, 36
  store i1 %v7_11d10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d10, label %dec_label_pc_11d44, label %dec_label_pc_11d18

dec_label_pc_11d18:                               ; preds = %dec_label_pc_11d10
  %v2_11d18 = icmp ugt i8 %v3_11d34, 34
  store i1 %v2_11d18, i1* %cpsr_c.global-to-local, align 1
  %v7_11d18 = icmp eq i8 %v3_11d34, 35
  store i1 %v7_11d18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d18, label %dec_label_pc_11d44, label %dec_label_pc_11d20

dec_label_pc_11d20:                               ; preds = %dec_label_pc_11d18
  %v2_11d20 = icmp ugt i8 %v3_11d34, 36
  store i1 %v2_11d20, i1* %cpsr_c.global-to-local, align 1
  %v7_11d20 = icmp eq i8 %v3_11d34, 37
  store i1 %v7_11d20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d20, label %dec_label_pc_11d44, label %dec_label_pc_11d28

dec_label_pc_11d28:                               ; preds = %dec_label_pc_11d20
  %v1_11d28 = add i32 %v0_11d44, -1
  store i32 %v1_11d28, i32* %r0.global-to-local, align 4
  %v2_11d28 = icmp ne i32 %v0_11d44, 0
  store i1 %v2_11d28, i1* %cpsr_c.global-to-local, align 1
  %v7_11d28 = icmp eq i32 %v0_11d44, 1
  store i1 %v7_11d28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d28, label %dec_label_pc_1160c.backedge.thread465, label %dec_label_pc_11d30

dec_label_pc_11d30:                               ; preds = %dec_label_pc_11cfc, %dec_label_pc_11d28
  %v0_11d44 = phi i32 [ %v1_11d28, %dec_label_pc_11d28 ], [ %v1_11d00, %dec_label_pc_11cfc ]
  %v2_11d30 = add i32 %v0_11d44, %v0_11688
  store i32 %v2_11d30, i32* %r3.global-to-local, align 4
  %v1_11d34 = add i32 %v2_11d30, 28
  %v2_11d34 = inttoptr i32 %v1_11d34 to i8*
  %v3_11d34 = load i8, i8* %v2_11d34, align 1
  %v4_11d34 = zext i8 %v3_11d34 to i32
  store i32 %v4_11d34, i32* %r3.global-to-local, align 4
  %v2_11d38 = icmp ugt i8 %v3_11d34, 61
  store i1 %v2_11d38, i1* %cpsr_c.global-to-local, align 1
  %v7_11d38 = icmp eq i8 %v3_11d34, 62
  store i1 %v7_11d38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d38, label %dec_label_pc_11d44, label %bb352

bb352:                                            ; preds = %dec_label_pc_11d30
  %v3_11d3c = icmp ugt i8 %v3_11d34, 57
  store i1 %v3_11d3c, i1* %cpsr_c.global-to-local, align 1
  %v8_11d3c = icmp eq i8 %v3_11d34, 58
  store i1 %v8_11d3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11d3c, label %dec_label_pc_11d44, label %dec_label_pc_11d10

dec_label_pc_11d44:                               ; preds = %dec_label_pc_11d30, %bb352, %dec_label_pc_11d20, %dec_label_pc_11d18, %dec_label_pc_11d10
  %v1_11d44 = add i32 %v0_11d44, 1
  store i32 %v1_11d44, i32* @r7, align 4
  %v2_11d48 = icmp eq i32 %v1_11d44, -1
  store i1 %v2_11d48, i1* %cpsr_c.global-to-local, align 1
  %v7_11d48 = icmp eq i32 %v0_11d44, -2
  store i1 %v7_11d48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d48, label %dec_label_pc_1160c.backedge.thread465, label %dec_label_pc_11d50

dec_label_pc_11d50:                               ; preds = %dec_label_pc_11d44
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d50 = icmp eq i32 %v1_11d44, 0
  store i1 %v2_11d50, i1* %cpsr_z.global-to-local, align 1
  %tmp353 = icmp slt i32 %v1_11d44, 1
  br i1 %tmp353, label %dec_label_pc_11794, label %dec_label_pc_11d58

dec_label_pc_11d58:                               ; preds = %dec_label_pc_11d50
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_11d5c = call i32 @function_12288(i32 28)
  store i32 %v2_115a4, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_11d6c = call i32 @function_121a4(i32 28, i32* %v2_115ac)
  store i32 %v3_11d6c, i32* %r0.global-to-local, align 4
  %v3_11d70 = load i8, i8* %stack_var_-52, align 1
  %v4_11d70 = sext i8 %v3_11d70 to i32
  store i32 %v4_11d70, i32* %r2.global-to-local, align 4
  store i32 %v3_11d6c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11d7c = load i32, i32* @r5, align 4
  %v1_11d7c = add i32 %v0_11d7c, 4
  %v2_11d7c = inttoptr i32 %v1_11d7c to i32*
  %v3_11d7c = load i32, i32* %v2_11d7c, align 4
  store i32 %v3_11d7c, i32* %r0.global-to-local, align 4
  %v4_11d80 = inttoptr i32 %v3_11d6c to i32*
  %v5_11d80 = call i32 @send(i32 %v3_11d7c, i32* %v4_11d80, i32 %v4_11d70, i32 16384)
  store i32 %v5_11d80, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11d90 = load i32, i32* @r5, align 4
  %v1_11d90 = add i32 %v0_11d90, 4
  %v2_11d90 = inttoptr i32 %v1_11d90 to i32*
  %v3_11d90 = load i32, i32* %v2_11d90, align 4
  store i32 %v3_11d90, i32* %r0.global-to-local, align 4
  %v5_11d94 = call i32 @send(i32 %v3_11d90, i32* bitcast ([3 x i8]* @global_var_13690.112 to i32*), i32 2, i32 16384)
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_11d9c = call i32 @function_121d0(i32 28)
  store i32 %v1_11d9c, i32* %r0.global-to-local, align 4
  %v0_11da0 = load i32, i32* @r5, align 4
  %v1_11da0 = add i32 %v0_11da0, 24
  %v2_11da0 = inttoptr i32 %v1_11da0 to i32*
  %v3_11da0 = load i32, i32* %v2_11da0, align 4
  store i32 %v3_11da0, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_11da8 = add i32 %v0_11da0, 12
  %v3_11da8 = inttoptr i32 %v2_11da8 to i32*
  store i32 10, i32* %v3_11da8, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11db0:                               ; preds = %dec_label_pc_1170c
  store i32 ptrtoint (i32* @global_var_137fa.314 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 %v2_11dbc, i32* %r0.global-to-local, align 4
  %v5_11dc0 = call i32* @memcpy(i32* nonnull %stack_var_-41, i32* nonnull @global_var_137fa.314, i32 3)
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v2_11dcc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_137f1.316 to i32), i32* %r1.global-to-local, align 4
  %v5_11dd4 = call i32* @memcpy(i32* nonnull %stack_var_-73, i32* nonnull @global_var_137f1.316, i32 9)
  %v7_11dd4 = ptrtoint i32* %v5_11dd4 to i32
  store i32 %v7_11dd4, i32* %r0.global-to-local, align 4
  %v0_11dd8 = load i32, i32* @r5, align 4
  %v1_11dd8 = add i32 %v0_11dd8, 24
  %v2_11dd8 = inttoptr i32 %v1_11dd8 to i32*
  %v3_11dd8 = load i32, i32* %v2_11dd8, align 4
  store i32 %v3_11dd8, i32* %ip.global-to-local, align 4
  %v0_11ddc = load i32, i32* @r6, align 4
  %v1_11ddc = add i32 %v0_11ddc, 2
  store i32 %v1_11ddc, i32* %r2.global-to-local, align 4
  %v0_11de0 = load i32, i32* @sl, align 4
  %v2_11de0 = add i32 %v0_11de0, %v3_11dd8
  store i32 %v2_11de0, i32* %r3.global-to-local, align 4
  %v3_11de4 = icmp uge i32 %v2_11de0, %v1_11ddc
  store i1 %v3_11de4, i1* %cpsr_c.global-to-local, align 1
  %v9_11de4 = icmp eq i32 %v2_11de0, %v1_11ddc
  store i1 %v9_11de4, i1* %cpsr_z.global-to-local, align 1
  %v2_11de8 = xor i1 %v3_11de4, true
  %v3_11de8 = or i1 %v9_11de4, %v2_11de8
  br i1 %v3_11de8, label %dec_label_pc_11db0.dec_label_pc_11784.loopexit_crit_edge, label %dec_label_pc_11dec

dec_label_pc_11db0.dec_label_pc_11784.loopexit_crit_edge: ; preds = %dec_label_pc_11db0
  %v0_11784.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_11784

dec_label_pc_11dec:                               ; preds = %dec_label_pc_11db0
  %v0_11dec = load i32, i32* @r4, align 4
  %v1_11dec = add i32 %v0_11dec, 1
  %v2_11dec = inttoptr i32 %v1_11dec to i8*
  %v3_11dec = load i8, i8* %v2_11dec, align 1
  %v4_11dec = zext i8 %v3_11dec to i32
  store i32 %v4_11dec, i32* %r3.global-to-local, align 4
  %v2_11df0 = icmp ugt i8 %v3_11dec, 30
  store i1 %v2_11df0, i1* %cpsr_c.global-to-local, align 1
  %v7_11df0 = icmp eq i8 %v3_11dec, 31
  store i1 %v7_11df0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11df0, label %dec_label_pc_11f7c, label %dec_label_pc_11df8

dec_label_pc_11df8:                               ; preds = %dec_label_pc_11dec
  %v1_11df8 = add i32 %v0_11dec, -1
  %v2_11df8 = inttoptr i32 %v1_11df8 to i8*
  %v3_11df8 = load i8, i8* %v2_11df8, align 1
  %v4_11df8 = zext i8 %v3_11df8 to i32
  store i32 %v4_11df8, i32* %r3.global-to-local, align 4
  %v2_11dfc = icmp ugt i8 %v3_11df8, -4
  store i1 %v2_11dfc, i1* %cpsr_c.global-to-local, align 1
  %v7_11dfc = icmp eq i8 %v3_11df8, -3
  store i1 %v7_11dfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11dfc, label %.thread77, label %dec_label_pc_11e0c

.thread77:                                        ; preds = %dec_label_pc_11df8
  store i32 -4, i32* %r2.global-to-local, align 4
  store i8 -4, i8* %v2_11df8, align 1
  %v0_11e08.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11e08.pr.pr, label %dec_label_pc_11720, label %.thread77.dec_label_pc_11e0c_crit_edge

.thread77.dec_label_pc_11e0c_crit_edge:           ; preds = %.thread77
  %v0_11e0c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11e0c

dec_label_pc_11e0c:                               ; preds = %.thread77.dec_label_pc_11e0c_crit_edge, %dec_label_pc_11df8
  %v0_11e0c = phi i32 [ %v0_11e0c.pre, %.thread77.dec_label_pc_11e0c_crit_edge ], [ %v4_11df8, %dec_label_pc_11df8 ]
  %v2_11e0c = icmp ugt i32 %v0_11e0c, 250
  store i1 %v2_11e0c, i1* %cpsr_c.global-to-local, align 1
  %v7_11e0c = icmp eq i32 %v0_11e0c, 251
  store i1 %v7_11e0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e0c, label %bb354, label %dec_label_pc_11720

bb354:                                            ; preds = %dec_label_pc_11e0c
  %v1_11e10 = load i32, i32* %r8.global-to-local, align 4
  %v2_11e10 = trunc i32 %v1_11e10 to i8
  %v3_11e10 = load i32, i32* @r4, align 4
  %v4_11e10 = add i32 %v3_11e10, -1
  %v5_11e10 = inttoptr i32 %v4_11e10 to i8*
  store i8 %v2_11e10, i8* %v5_11e10, align 1
  br label %dec_label_pc_11720

dec_label_pc_11e18:                               ; preds = %dec_label_pc_11860, %dec_label_pc_1183c, %dec_label_pc_1187c
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_11e1c = call i32 @function_12288(i32 31)
  store i32 %v2_115a4, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_11e2c = call i32 @function_121a4(i32 31, i32* %v2_115ac)
  %v3_11e30 = load i8, i8* %stack_var_-52, align 1
  %v4_11e30 = sext i8 %v3_11e30 to i32
  store i32 %v3_11e2c, i32* %r2.global-to-local, align 4
  %v1_11e38 = add nsw i32 %v4_11e30, -1
  store i32 %v1_11e38, i32* %r3.global-to-local, align 4
  %v0_11e3c = load i32, i32* @sl, align 4
  store i32 %v0_11e3c, i32* %r0.global-to-local, align 4
  %v0_11e40 = load i32, i32* @r5, align 4
  %v1_11e40 = add i32 %v0_11e40, 24
  %v2_11e40 = inttoptr i32 %v1_11e40 to i32*
  %v3_11e40 = load i32, i32* %v2_11e40, align 4
  store i32 %v3_11e40, i32* %r1.global-to-local, align 4
  %v4_11e44 = call i32 @function_12e00(i32 %v0_11e3c, i32 %v3_11e40, i32 %v3_11e2c, i32 %v1_11e38)
  store i32 %v4_11e44, i32* %r0.global-to-local, align 4
  %v1_11e48 = add i32 %v4_11e44, 1
  store i32 %v1_11e48, i32* @r7, align 4
  %v2_11e48 = icmp eq i32 %v4_11e44, -1
  store i1 %v2_11e48, i1* %cpsr_c.global-to-local, align 1
  %v7_11e48 = icmp eq i32 %v1_11e48, 0
  store i1 %v7_11e48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e48, label %thread-pre-split80, label %bb355

bb355:                                            ; preds = %dec_label_pc_11e18
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split80

thread-pre-split80:                               ; preds = %dec_label_pc_11e18, %bb355
  %v0_11e50 = phi i1 [ false, %bb355 ], [ true, %dec_label_pc_11e18 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_11e50, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_11fe4 = call i32 @function_121d0(i32 31)
  store i32 %v1_11fe4, i32* %r0.global-to-local, align 4
  br i1 %v0_11e50, label %dec_label_pc_11fe0, label %dec_label_pc_11e58

dec_label_pc_11e58:                               ; preds = %thread-pre-split80
  %v0_11e60 = load i32, i32* @r7, align 4
  %v3_11e60 = icmp eq i32 %v0_11e60, -1
  store i1 %v3_11e60, i1* %cpsr_c.global-to-local, align 1
  %v8_11e60 = icmp eq i32 %v0_11e60, -1
  store i1 %v8_11e60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11e60, label %dec_label_pc_11608.loopexit, label %dec_label_pc_11888

dec_label_pc_11e6c:                               ; preds = %dec_label_pc_11c54
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_11e78 = call i32 @function_12288(i32 29)
  store i32 %v2_115a4, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_11e88 = call i32 @function_121a4(i32 29, i32* nonnull %v2_115ac)
  store i32 %v3_11e88, i32* %r0.global-to-local, align 4
  %v3_11e8c = load i8, i8* %stack_var_-52, align 1
  %v4_11e8c = sext i8 %v3_11e8c to i32
  store i32 %v3_11e88, i32* %r2.global-to-local, align 4
  %v1_11e94 = add nsw i32 %v4_11e8c, -1
  store i32 %v1_11e94, i32* %r3.global-to-local, align 4
  %v0_11e98 = load i32, i32* @r5, align 4
  %v1_11e98 = add i32 %v0_11e98, 24
  %v2_11e98 = inttoptr i32 %v1_11e98 to i32*
  %v3_11e98 = load i32, i32* %v2_11e98, align 4
  store i32 %v3_11e98, i32* %r1.global-to-local, align 4
  %v0_11e9c = load i32, i32* @sl, align 4
  store i32 %v0_11e9c, i32* %r0.global-to-local, align 4
  %v4_11ea0 = call i32 @function_12e00(i32 %v0_11e9c, i32 %v3_11e98, i32 %v3_11e88, i32 %v1_11e94)
  %sext8 = mul i32 %v4_11ea0, 16777216
  %v1_11ea4 = sdiv i32 %sext8, 16777216
  store i32 %v1_11ea4, i32* @r7, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_11eac = call i32 @function_121d0(i32 29)
  store i32 %v1_11eac, i32* %r0.global-to-local, align 4
  %v0_11eb0 = load i32, i32* @r7, align 4
  %v2_11eb0 = icmp eq i32 %v0_11eb0, -1
  store i1 %v2_11eb0, i1* %cpsr_c.global-to-local, align 1
  %v7_11eb0 = icmp eq i32 %v0_11eb0, -1
  store i1 %v7_11eb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11eb0, label %dec_label_pc_11608.loopexit, label %dec_label_pc_11eb8

dec_label_pc_11eb8:                               ; preds = %dec_label_pc_11e6c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11eb8 = icmp eq i32 %v0_11eb0, 0
  store i1 %v2_11eb8, i1* %cpsr_z.global-to-local, align 1
  %tmp356 = icmp slt i32 %v0_11eb0, 1
  br i1 %tmp356, label %dec_label_pc_11794, label %dec_label_pc_11ec0

dec_label_pc_11ec0:                               ; preds = %dec_label_pc_11eb8
  %v0_11ec0 = load i32, i32* @r5, align 4
  %v1_11ec0 = add i32 %v0_11ec0, 21
  %v2_11ec0 = inttoptr i32 %v1_11ec0 to i8*
  %v3_11ec0 = load i8, i8* %v2_11ec0, align 1
  %v4_11ec0 = zext i8 %v3_11ec0 to i32
  store i32 %v4_11ec0, i32* %r3.global-to-local, align 4
  %v1_11ec4 = add i32 %v0_11ec0, 20
  %v2_11ec4 = inttoptr i32 %v1_11ec4 to i8*
  %v3_11ec4 = load i8, i8* %v2_11ec4, align 1
  %v4_11ec4 = zext i8 %v3_11ec4 to i32
  store i32 %v4_11ec4, i32* %r2.global-to-local, align 4
  %v1_11ec8 = add i32 %v0_11ec0, 16
  %v2_11ec8 = inttoptr i32 %v1_11ec8 to i32*
  %v3_11ec8 = load i32, i32* %v2_11ec8, align 4
  store i32 %v3_11ec8, i32* %r1.global-to-local, align 4
  %v4_11ecc = mul nuw nsw i32 %v4_11ec0, 256
  %v5_11ecc = or i32 %v4_11ec4, %v4_11ecc
  store i32 %v5_11ecc, i32* %r2.global-to-local, align 4
  %v1_11ed0 = and i32 %v4_11ec4, 128
  %v2_11ed0 = icmp ne i32 %v1_11ed0, 0
  store i1 %v2_11ed0, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_11ec0, i32* %r3.global-to-local, align 4
  store i32 %v3_11ec8, i32* %stack_var_-56, align 4
  store i32 %v5_11ecc, i32* %stack_var_-38, align 4
  %v1_11ee0 = inttoptr i32 %v0_11ec0 to i32*
  %v2_11ee0 = load i32, i32* %v1_11ee0, align 4
  store i32 %v2_11ee0, i32* %r8.global-to-local, align 4
  %v0_11ee4 = call i32 @fork()
  store i32 %v0_11ee4, i32* %r0.global-to-local, align 4
  %v7_11ee8 = icmp eq i32 %v0_11ee4, -1
  %.367 = zext i1 %v7_11ee8 to i32
  store i32 %.367, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11ef4 = icmp eq i32 %v0_11ee4, 0
  store i1 %v2_11ef4, i1* %cpsr_z.global-to-local, align 1
  %tmp359 = icmp slt i32 %v0_11ee4, 1
  br i1 %tmp359, label %bb360, label %.thread83

.thread83:                                        ; preds = %dec_label_pc_11ec0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11f08

bb360:                                            ; preds = %dec_label_pc_11ec0
  store i32 %.367, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11f00 = icmp eq i1 %v7_11ee8, false
  store i1 %v2_11f00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11f00, label %dec_label_pc_12030, label %dec_label_pc_11f08

dec_label_pc_11f08:                               ; preds = %.thread83, %bb360
  %v0_11f08 = load i32, i32* @r5, align 4
  %v1_11f08 = add i32 %v0_11f08, 4
  %v2_11f08 = inttoptr i32 %v1_11f08 to i32*
  %v3_11f08 = load i32, i32* %v2_11f08, align 4
  store i32 %v3_11f08, i32* %r0.global-to-local, align 4
  %v1_11f0c = call i32 @close(i32 %v3_11f08)
  store i32 %v1_11f0c, i32* %r0.global-to-local, align 4
  %v0_11f10 = load i32, i32* @r5, align 4
  %v1_11f10 = add i32 %v0_11f10, 24
  %v2_11f10 = inttoptr i32 %v1_11f10 to i32*
  %v3_11f10 = load i32, i32* %v2_11f10, align 4
  store i32 %v3_11f10, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_11f18 = load i32, i32* @r4, align 4
  %v2_11f18 = add i32 %v0_11f10, 4
  %v3_11f18 = inttoptr i32 %v2_11f18 to i32*
  store i32 %v0_11f18, i32* %v3_11f18, align 4
  %v0_11f1c = load i32, i32* %r2.global-to-local, align 4
  %v1_11f1c = load i32, i32* @r5, align 4
  %v2_11f1c = add i32 %v1_11f1c, 12
  %v3_11f1c = inttoptr i32 %v2_11f1c to i32*
  store i32 %v0_11f1c, i32* %v3_11f1c, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11f24:                               ; preds = %dec_label_pc_11624
  br i1 %v2_11648, label %dec_label_pc_120ec, label %dec_label_pc_11f28

dec_label_pc_11f28:                               ; preds = %dec_label_pc_11f24
  %v3_11f28 = icmp eq i32 %v5_11644, -1
  store i1 %v3_11f28, i1* %cpsr_c.global-to-local, align 1
  %v8_11f28 = icmp eq i32 %v5_11644, -1
  store i1 %v8_11f28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11f28, label %dec_label_pc_11f30, label %dec_label_pc_11670

dec_label_pc_11f30:                               ; preds = %dec_label_pc_11f28
  %v0_11f30 = load i32, i32* @sb, align 4
  %v1_11f30 = inttoptr i32 %v0_11f30 to i32*
  %v2_11f30 = load i32, i32* %v1_11f30, align 4
  store i32 %v2_11f30, i32* %r3.global-to-local, align 4
  %v2_11f34 = icmp ugt i32 %v2_11f30, 10
  store i1 %v2_11f34, i1* %cpsr_c.global-to-local, align 1
  %v7_11f34 = icmp eq i32 %v2_11f30, 11
  store i1 %v7_11f34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11f34, label %dec_label_pc_11458, label %dec_label_pc_11f3c

dec_label_pc_11f3c:                               ; preds = %dec_label_pc_11f30, %dec_label_pc_120ec
  %v0_11f3c = load i32, i32* @r5, align 4
  %v1_11f3c = add i32 %v0_11f3c, 4
  %v2_11f3c = inttoptr i32 %v1_11f3c to i32*
  %v3_11f3c = load i32, i32* %v2_11f3c, align 4
  store i32 %v3_11f3c, i32* %r0.global-to-local, align 4
  %v1_11f40 = call i32 @close(i32 %v3_11f3c)
  store i32 %v1_11f40, i32* %r0.global-to-local, align 4
  %v0_11f44 = load i32, i32* @r5, align 4
  %v1_11f44 = add i32 %v0_11f44, 284
  %v2_11f44 = inttoptr i32 %v1_11f44 to i8*
  %v3_11f44 = load i8, i8* %v2_11f44, align 1
  %v4_11f44 = zext i8 %v3_11f44 to i32
  %v1_11f48 = add nuw nsw i32 %v4_11f44, 1
  %v1_11f4c = urem i32 %v1_11f48, 256
  store i32 %v1_11f4c, i32* %r3.global-to-local, align 4
  %v2_11f50 = icmp ugt i32 %v1_11f4c, 8
  store i1 %v2_11f50, i1* %cpsr_c.global-to-local, align 1
  %v7_11f50 = icmp eq i32 %v1_11f4c, 9
  store i1 %v7_11f50, i1* %cpsr_z.global-to-local, align 1
  %v2_11f54 = xor i1 %v7_11f50, true
  %v3_11f54 = and i1 %v2_11f50, %v2_11f54
  br i1 %v3_11f54, label %bb361, label %bb362

bb361:                                            ; preds = %dec_label_pc_11f3c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb362

bb362:                                            ; preds = %dec_label_pc_11f3c, %bb361
  store i32 -1, i32* @r4, align 4
  %v1_11f5c = trunc i32 %v1_11f48 to i8
  store i8 %v1_11f5c, i8* %v2_11f44, align 1
  %v0_11f60 = load i32, i32* @r4, align 4
  %v1_11f60 = load i32, i32* @r5, align 4
  %v2_11f60 = add i32 %v1_11f60, 4
  %v3_11f60 = inttoptr i32 %v2_11f60 to i32*
  store i32 %v0_11f60, i32* %v3_11f60, align 4
  %v0_11f64 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11f64 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_11f64 = xor i1 %v1_11f64, true
  %v3_11f64 = and i1 %v0_11f64, %v2_11f64
  br i1 %v3_11f64, label %bb363, label %.thread229

bb363:                                            ; preds = %bb362
  %v4_11f64 = load i32, i32* %r0.global-to-local, align 4
  %v5_11f64 = load i32, i32* @r5, align 4
  %v6_11f64 = add i32 %v5_11f64, 12
  %v7_11f64 = inttoptr i32 %v6_11f64 to i32*
  store i32 %v4_11f64, i32* %v7_11f64, align 4
  %v4_11f68 = load i32, i32* %r0.global-to-local, align 4
  %v5_11f68 = trunc i32 %v4_11f68 to i8
  %v6_11f68 = load i32, i32* @r5, align 4
  %v7_11f68 = add i32 %v6_11f68, 284
  %v8_11f68 = inttoptr i32 %v7_11f68 to i8*
  store i8 %v5_11f68, i8* %v8_11f68, align 1
  %v0_11f6c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11f6c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread229

.thread229:                                       ; preds = %bb362, %bb363
  %v1_11f6c = phi i1 [ %v1_11f6c.pre, %bb363 ], [ %v1_11f64, %bb362 ]
  %v0_11f6c = phi i1 [ %v0_11f6c.pre, %bb363 ], [ %v0_11f64, %bb362 ]
  %v2_11f6c = xor i1 %v1_11f6c, true
  %v3_11f6c = and i1 %v0_11f6c, %v2_11f6c
  br i1 %v3_11f6c, label %dec_label_pc_11458, label %dec_label_pc_11f70

dec_label_pc_11f70:                               ; preds = %.thread229
  %v0_11f70 = load i32, i32* @r5, align 4
  store i32 %v0_11f70, i32* @r0, align 4
  %v0_11f74 = call i32 @function_10748()
  store i32 %v0_11f74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11458

dec_label_pc_11f7c:                               ; preds = %dec_label_pc_11dec
  store i32 %v2_11dbc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_11f8c = add i32 %v0_11dd8, 4
  %v2_11f8c = inttoptr i32 %v1_11f8c to i32*
  %v3_11f8c = load i32, i32* %v2_11f8c, align 4
  store i32 %v3_11f8c, i32* %r0.global-to-local, align 4
  %v5_11f90 = call i32 @send(i32 %v3_11f8c, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_11f90, i32* %r0.global-to-local, align 4
  store i32 %v2_113ec, i32* %r1.global-to-local, align 4
  %v0_11f98 = load i32, i32* @r5, align 4
  %v1_11f98 = add i32 %v0_11f98, 4
  %v2_11f98 = inttoptr i32 %v1_11f98 to i32*
  %v3_11f98 = load i32, i32* %v2_11f98, align 4
  store i32 %v3_11f98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11764

dec_label_pc_11fa8:                               ; preds = %dec_label_pc_11614
  store i32 %.pre, i32* %r0.global-to-local, align 4
  %v1_11fb0 = add i32 %v0_11fa8, 92
  store i32 %v1_11fb0, i32* %r1.global-to-local, align 4
  store i32 192, i32* %r2.global-to-local, align 4
  %v3_11fb8 = inttoptr i32 %.pre to i32*
  %v4_11fb8 = inttoptr i32 %v1_11fb0 to i32*
  %v5_11fb8 = call i32* @memmove(i32* %v3_11fb8, i32* %v4_11fb8, i32 192)
  %v7_11fb8 = ptrtoint i32* %v5_11fb8 to i32
  store i32 %v7_11fb8, i32* %r0.global-to-local, align 4
  %v0_11fbc = load i32, i32* @r5, align 4
  %v1_11fbc = add i32 %v0_11fbc, 24
  %v2_11fbc = inttoptr i32 %v1_11fbc to i32*
  %v3_11fbc = load i32, i32* %v2_11fbc, align 4
  store i32 %v3_11fbc, i32* %r3.global-to-local, align 4
  %v1_11fc0 = add i32 %v3_11fbc, -64
  store i32 %v1_11fc0, i32* %ip.global-to-local, align 4
  store i32 %v1_11fc0, i32* %v2_11fbc, align 4
  br label %dec_label_pc_11624

dec_label_pc_11fcc:                               ; preds = %dec_label_pc_11c90
  %v0_11fcc = load i32, i32* @r5, align 4
  store i32 %v0_11fcc, i32* @r0, align 4
  %v0_11fd0 = call i32 @function_10748()
  store i32 %v0_11fd0, i32* %r0.global-to-local, align 4
  %v0_11fd4 = load i32, i32* @r5, align 4
  %v1_11fd4 = add i32 %v0_11fd4, 24
  %v2_11fd4 = inttoptr i32 %v1_11fd4 to i32*
  %v3_11fd4 = load i32, i32* %v2_11fd4, align 4
  store i32 %v3_11fd4, i32* %ip.global-to-local, align 4
  %v0_11fd8 = load i32, i32* @r4, align 4
  store i32 %v0_11fd8, i32* @r7, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11fe0:                               ; preds = %thread-pre-split80
  %v0_11fe8 = load i32, i32* @r5, align 4
  %v1_11fe8 = add i32 %v0_11fe8, 12
  %v2_11fe8 = inttoptr i32 %v1_11fe8 to i32*
  %v3_11fe8 = load i32, i32* %v2_11fe8, align 4
  br label %dec_label_pc_1160c.backedge

dec_label_pc_11ff0:                               ; preds = %dec_label_pc_11590
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_11ff0 = load i32, i32* %stack_var_-56, align 4
  %v0_11ff4 = load i32, i32* @r6, align 4
  store i32 %v0_11ff4, i32* %r2.global-to-local, align 4
  %v1_11ff8 = add i32 %v3_11ff0, -1
  store i32 %v1_11ff8, i32* %r3.global-to-local, align 4
  %v0_11ffc = load i32, i32* @sl, align 4
  store i32 %v0_11ffc, i32* %r0.global-to-local, align 4
  %v0_12000 = load i32, i32* @r5, align 4
  %v1_12000 = add i32 %v0_12000, 24
  %v2_12000 = inttoptr i32 %v1_12000 to i32*
  %v3_12000 = load i32, i32* %v2_12000, align 4
  store i32 %v3_12000, i32* %r1.global-to-local, align 4
  %v4_12004 = call i32 @function_12e00(i32 %v0_11ffc, i32 %v3_12000, i32 %v0_11ff4, i32 %v1_11ff8)
  store i32 %v4_12004, i32* %r0.global-to-local, align 4
  %v2_12008 = icmp eq i32 %v4_12004, -1
  store i1 %v2_12008, i1* %cpsr_c.global-to-local, align 1
  %v7_12008 = icmp eq i32 %v4_12004, -1
  store i1 %v7_12008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12008, label %dec_label_pc_12018, label %dec_label_pc_115f0

dec_label_pc_12018:                               ; preds = %dec_label_pc_11ff0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_1201c = call i32 @function_121d0(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_12024 = call i32 @function_121d0(i32 33)
  store i32 %v1_12024, i32* %r0.global-to-local, align 4
  %v0_12028 = load i32, i32* @r5, align 4
  %v1_12028 = add i32 %v0_12028, 12
  %v2_12028 = inttoptr i32 %v1_12028 to i32*
  %v3_12028 = load i32, i32* %v2_12028, align 4
  br label %dec_label_pc_1160c.backedge

dec_label_pc_1160c.backedge.thread:               ; preds = %dec_label_pc_118cc, %dec_label_pc_11980, %dec_label_pc_11aec, %dec_label_pc_11ba0, %dec_label_pc_11cfc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11614

dec_label_pc_1160c.backedge.thread465:            ; preds = %dec_label_pc_118f8, %dec_label_pc_11a64, %dec_label_pc_11bcc, %dec_label_pc_11b18, %dec_label_pc_11d28, %dec_label_pc_11914, %dec_label_pc_11a80, %dec_label_pc_11b34, %dec_label_pc_11be8, %dec_label_pc_11d44
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11614

dec_label_pc_1160c.backedge:                      ; preds = %dec_label_pc_12018, %dec_label_pc_11fe0
  %storemerge468 = phi i32 [ %v3_11fe8, %dec_label_pc_11fe0 ], [ %v3_12028, %dec_label_pc_12018 ]
  %v0_1160c.be = phi i32 [ %v3_11fe8, %dec_label_pc_11fe0 ], [ %v3_12028, %dec_label_pc_12018 ]
  %v0_11614144 = phi i32 [ %v0_11fe8, %dec_label_pc_11fe0 ], [ %v0_12028, %dec_label_pc_12018 ]
  store i32 %storemerge468, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1160c = icmp eq i32 %v0_1160c.be, 0
  store i1 %v2_1160c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1160c, label %dec_label_pc_11458, label %dec_label_pc_11614

dec_label_pc_12030:                               ; preds = %bb360
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_1203c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_1203c, i32* %r0.global-to-local, align 4
  %v2_12040 = icmp eq i32 %v3_1203c, -1
  store i1 %v2_12040, i1* %cpsr_c.global-to-local, align 1
  %v7_12040 = icmp eq i32 %v3_1203c, -1
  store i1 %v7_12040, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_1203c, i32* @r4, align 4
  br i1 %v7_12040, label %dec_label_pc_1219c, label %dec_label_pc_1204c

dec_label_pc_1204c:                               ; preds = %dec_label_pc_12030
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_12050 = call i32 @function_12288(i32 4)
  store i32 ptrtoint (%sockaddr** @global_var_1c224.156 to i32), i32* %r2.global-to-local, align 4
  store i32 385990760, i32* %r3.global-to-local, align 4
  store i32 385990760, i32* @global_var_1c228.157, align 4
  %v0_12068 = load i32, i32* @r6, align 4
  store i32 %v0_12068, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_12070 = inttoptr i32 %v0_12068 to i32*
  %v3_12070 = call i32 @function_121a4(i32 4, i32* %v2_12070)
  %v4_12070 = inttoptr i32 %v3_12070 to i8*
  store i32 %v3_12070, i32* %r0.global-to-local, align 4
  %v2_12074 = add i32 %v3_12070, 1
  %v3_12074 = inttoptr i32 %v2_12074 to i8*
  %v4_12074 = load i8, i8* %v3_12074, align 1
  %v5_12074 = zext i8 %v4_12074 to i32
  store i32 %v5_12074, i32* %r2.global-to-local, align 4
  %v3_12078 = load i8, i8* %v4_12070, align 1
  %v4_12078 = zext i8 %v3_12078 to i32
  %v4_1207c = mul nuw nsw i32 %v5_12074, 256
  %v5_1207c = or i32 %v4_12078, %v4_1207c
  store i32 %v5_1207c, i32* %r3.global-to-local, align 4
  %v1_12080 = and i32 %v4_12078, 128
  %v2_12080 = icmp ne i32 %v1_12080, 0
  store i1 %v2_12080, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_12074, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_12090 = call i32 @function_121d0(i32 4)
  %v0_12094 = load i32, i32* @r4, align 4
  store i32 %v0_12094, i32* %r0.global-to-local, align 4
  store i32 %v2_11094, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v5_120a0 = call i32 @connect(i32 %v0_12094, %sockaddr* %tmp287, i32 16)
  store i32 %v5_120a0, i32* %r0.global-to-local, align 4
  %v3_120a4 = icmp eq i32 %v5_120a0, -1
  store i1 %v3_120a4, i1* %cpsr_c.global-to-local, align 1
  %v8_120a4 = icmp eq i32 %v5_120a0, -1
  store i1 %v8_120a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_120a4, label %dec_label_pc_120ac, label %dec_label_pc_120f8

dec_label_pc_120ac:                               ; preds = %dec_label_pc_1204c
  %v0_120ac = load i32, i32* @r4, align 4
  store i32 %v0_120ac, i32* %r0.global-to-local, align 4
  %v1_120b0 = call i32 @close(i32 %v0_120ac)
  %v0_120b4 = load i32, i32* @r6, align 4
  store i32 %v0_120b4, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_120b4)
  unreachable

dec_label_pc_120bc:                               ; preds = %dec_label_pc_113b4, %dec_label_pc_11398
  %v0_120bc = load i32, i32* @r7, align 4
  %v1_120bc = load i32, i32* @r4, align 4
  %v2_120bc = add i32 %v1_120bc, 12
  %v3_120bc = inttoptr i32 %v2_120bc to i32*
  store i32 %v0_120bc, i32* %v3_120bc, align 4
  %v0_120c0 = load i32, i32* @r7, align 4
  %v1_120c0 = trunc i32 %v0_120c0 to i8
  %v2_120c0 = load i32, i32* @r4, align 4
  %v3_120c0 = add i32 %v2_120c0, 284
  %v4_120c0 = inttoptr i32 %v3_120c0 to i8*
  store i8 %v1_120c0, i8* %v4_120c0, align 1
  br label %bb325

dec_label_pc_120c8:                               ; preds = %dec_label_pc_11540, %dec_label_pc_114f8
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1157c

dec_label_pc_120d0:                               ; preds = %dec_label_pc_114b8
  %v0_120d0 = load i32, i32* @r5, align 4
  %v1_120d0 = add i32 %v0_120d0, 4
  %v2_120d0 = inttoptr i32 %v1_120d0 to i32*
  %v3_120d0 = load i32, i32* %v2_120d0, align 4
  store i32 %v3_120d0, i32* %r0.global-to-local, align 4
  %v1_120d4 = call i32 @close(i32 %v3_120d0)
  store i32 %v1_120d4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_120dc = load i32, i32* @r6, align 4
  %v1_120dc = load i32, i32* @r5, align 4
  %v2_120dc = add i32 %v1_120dc, 12
  %v3_120dc = inttoptr i32 %v2_120dc to i32*
  store i32 %v0_120dc, i32* %v3_120dc, align 4
  %v0_120e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_120e0 = load i32, i32* @r5, align 4
  %v2_120e0 = add i32 %v1_120e0, 4
  %v3_120e0 = inttoptr i32 %v2_120e0 to i32*
  store i32 %v0_120e0, i32* %v3_120e0, align 4
  %v0_120e4 = load i32, i32* @r6, align 4
  %v1_120e4 = trunc i32 %v0_120e4 to i8
  %v2_120e4 = load i32, i32* @r5, align 4
  %v3_120e4 = add i32 %v2_120e4, 284
  %v4_120e4 = inttoptr i32 %v3_120e4 to i8*
  store i8 %v1_120e4, i8* %v4_120e4, align 1
  br label %dec_label_pc_11458

dec_label_pc_120ec:                               ; preds = %dec_label_pc_11f24
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_120f0 = load i32, i32* @sb, align 4
  %v2_120f0 = inttoptr i32 %v1_120f0 to i32*
  store i32 104, i32* %v2_120f0, align 4
  br label %dec_label_pc_11f3c

dec_label_pc_120f8:                               ; preds = %dec_label_pc_1204c
  store i32 %v2_115a4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12108 = load i32, i32* @r4, align 4
  store i32 %v0_12108, i32* %r0.global-to-local, align 4
  %v0_1210c = load i32, i32* @r6, align 4
  %v6_1210c = trunc i32 %v0_1210c to i8
  store i8 %v6_1210c, i8* %stack_var_-52, align 1
  %v7_12110 = call i32 @send(i32 %v0_12108, i32* nonnull %v2_115ac, i32 1, i32 16384)
  store i32 %v2_115b8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12124 = load i32, i32* @r4, align 4
  store i32 %v0_12124, i32* %r0.global-to-local, align 4
  %v5_12128 = call i32 @send(i32 %v0_12124, i32* nonnull %stack_var_-56, i32 4, i32 16384)
  %v2_12130 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_12130, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1213c = load i32, i32* @r4, align 4
  store i32 %v0_1213c, i32* %r0.global-to-local, align 4
  %v5_12140 = call i32 @send(i32 %v0_1213c, i32* nonnull %stack_var_-38, i32 2, i32 16384)
  %v0_12144 = load i32, i32* %r8.global-to-local, align 4
  %v1_12144 = add i32 %v0_12144, 12
  store i32 %v1_12144, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12150 = load i32, i32* @r4, align 4
  store i32 %v0_12150, i32* %r0.global-to-local, align 4
  %v4_12154 = inttoptr i32 %v1_12144 to i32*
  %v5_12154 = call i32 @send(i32 %v0_12150, i32* %v4_12154, i32 1, i32 16384)
  store i32 %v5_12154, i32* %r0.global-to-local, align 4
  %v0_12158 = load i32, i32* %r8.global-to-local, align 4
  %v1_12158 = inttoptr i32 %v0_12158 to i32*
  %v2_12158 = load i32, i32* %v1_12158, align 4
  store i32 %v2_12158, i32* %r1.global-to-local, align 4
  %v1_1215c = add i32 %v0_12158, 12
  %v2_1215c = inttoptr i32 %v1_1215c to i8*
  %v3_1215c = load i8, i8* %v2_1215c, align 1
  %v4_1215c = zext i8 %v3_1215c to i32
  store i32 %v4_1215c, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12164 = load i32, i32* @r4, align 4
  store i32 %v0_12164, i32* %r0.global-to-local, align 4
  %v4_12168 = inttoptr i32 %v2_12158 to i32*
  %v5_12168 = call i32 @send(i32 %v0_12164, i32* %v4_12168, i32 %v4_1215c, i32 16384)
  %v0_1216c = load i32, i32* %r8.global-to-local, align 4
  %v1_1216c = add i32 %v0_1216c, 13
  store i32 %v1_1216c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12178 = load i32, i32* @r4, align 4
  store i32 %v0_12178, i32* %r0.global-to-local, align 4
  %v4_1217c = inttoptr i32 %v1_1216c to i32*
  %v5_1217c = call i32 @send(i32 %v0_12178, i32* %v4_1217c, i32 1, i32 16384)
  %v0_12180 = load i32, i32* @r4, align 4
  store i32 %v0_12180, i32* %r0.global-to-local, align 4
  %v0_12184 = load i32, i32* %r8.global-to-local, align 4
  %v1_12184 = add i32 %v0_12184, 13
  %v2_12184 = inttoptr i32 %v1_12184 to i8*
  %v3_12184 = load i8, i8* %v2_12184, align 1
  %v4_12184 = zext i8 %v3_12184 to i32
  store i32 %v4_12184, i32* %r2.global-to-local, align 4
  %v1_12188 = add i32 %v0_12184, 4
  %v2_12188 = inttoptr i32 %v1_12188 to i32*
  %v3_12188 = load i32, i32* %v2_12188, align 4
  store i32 %v3_12188, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_12190 = inttoptr i32 %v3_12188 to i32*
  %v5_12190 = call i32 @send(i32 %v0_12180, i32* %v4_12190, i32 %v4_12184, i32 16384)
  %v0_12194 = load i32, i32* @r4, align 4
  store i32 %v0_12194, i32* %r0.global-to-local, align 4
  %v1_12198 = call i32 @close(i32 %v0_12194)
  store i32 %v1_12198, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1219c

dec_label_pc_1219c:                               ; preds = %dec_label_pc_12030, %dec_label_pc_120f8
  %v0_1219c = load i32, i32* @r6, align 4
  store i32 %v0_1219c, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_1219c)
  unreachable

; uselistorder directives
  uselistorder i32 %v4_12078, { 1, 0 }
  uselistorder i32 %v5_12074, { 1, 0, 2 }
  uselistorder i1 %v7_12040, { 1, 0 }
  uselistorder i32 %v3_1203c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_12028, { 1, 0 }
  uselistorder i1 %v7_12008, { 1, 0 }
  uselistorder i32 %v3_11fe8, { 1, 0 }
  uselistorder i1 %v1_11f64, { 1, 0 }
  uselistorder i32 %v1_11f4c, { 2, 1, 0 }
  uselistorder i32 %v1_11f48, { 1, 0 }
  uselistorder i1 %v2_11f00, { 1, 0 }
  uselistorder i32 %.367, { 1, 0 }
  uselistorder i1 %v7_11ee8, { 1, 0 }
  uselistorder i32 %v0_11ee4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_11ec4, { 1, 0, 2 }
  uselistorder i32 %v4_11ec0, { 1, 0, 2 }
  uselistorder i1 %v7_11eb0, { 1, 0 }
  uselistorder i32 %v0_11eb0, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v0_11e60, { 0, 2, 1 }
  uselistorder i1 %v0_11e50, { 1, 0 }
  uselistorder i32 %v4_11e44, { 1, 0, 2 }
  uselistorder i32 %v0_11dd8, { 1, 2, 0 }
  uselistorder i1 %v7_11d48, { 1, 0 }
  uselistorder i32 %v1_11d44, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11d3c, { 1, 0 }
  uselistorder i8 %v3_11d34, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11d44, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11d20, { 1, 0 }
  uselistorder i1 %v7_11d18, { 1, 0 }
  uselistorder i1 %v7_11d10, { 1, 0 }
  uselistorder i32 %v0_11cec, { 1, 2, 0 }
  uselistorder i32 %v2_11cd8, { 1, 0 }
  uselistorder i32 %v1_11cd8, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_11cd8, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_11ca8, { 2, 1, 0 }
  uselistorder i1 %v7_11c84, { 1, 0 }
  uselistorder i32 %v4_11c80, { 1, 0, 2 }
  uselistorder i1 %v7_11bec, { 1, 0 }
  uselistorder i32 %v1_11be8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11be0, { 1, 0 }
  uselistorder i8 %v3_11bd8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11be8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11bc4, { 1, 0 }
  uselistorder i1 %v7_11bbc, { 1, 0 }
  uselistorder i1 %v7_11bb4, { 1, 0 }
  uselistorder i1 %v7_11b38, { 1, 0 }
  uselistorder i32 %v1_11b34, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11b2c, { 1, 0 }
  uselistorder i8 %v3_11b24, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b34, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11b10, { 1, 0 }
  uselistorder i1 %v7_11b08, { 1, 0 }
  uselistorder i1 %v7_11b00, { 1, 0 }
  uselistorder i1 %v7_11a84, { 1, 0 }
  uselistorder i32 %v1_11a80, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11a78, { 1, 0 }
  uselistorder i8 %v3_11a70, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11a80, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11a5c, { 1, 0 }
  uselistorder i1 %v7_11a54, { 1, 0 }
  uselistorder i1 %v7_11a4c, { 1, 0 }
  uselistorder i1 %v7_11918, { 1, 0 }
  uselistorder i32 %v1_11914, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_1190c, { 1, 0 }
  uselistorder i8 %v3_11904, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11914, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_118f0, { 1, 0 }
  uselistorder i1 %v7_118e8, { 1, 0 }
  uselistorder i1 %v7_118e0, { 1, 0 }
  uselistorder i32 %v0_11888, { 2, 1, 0 }
  uselistorder i1 %v7_11880, { 1, 0 }
  uselistorder i1 %v8_11874, { 1, 0 }
  uselistorder i8 %v3_1186c, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_1187c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11858, { 1, 0 }
  uselistorder i1 %v7_11850, { 1, 0 }
  uselistorder i32 %v0_117f8, { 2, 1, 0 }
  uselistorder i1 %v7_117f0, { 1, 0 }
  uselistorder i1 %v8_117e4, { 1, 0 }
  uselistorder i8 %v3_117dc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_117ec, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_117c8, { 1, 0 }
  uselistorder i1 %v7_117c0, { 1, 0 }
  uselistorder i1 %v7_117b8, { 1, 0 }
  uselistorder i32 %v0_11794.pre, { 0, 2, 1 }
  uselistorder i32 %v1_1177c, { 1, 0 }
  uselistorder i32 %v1_11778, { 1, 0 }
  uselistorder i32 %v1_11770, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_1176c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_1176c, { 0, 2, 1 }
  uselistorder i32 %v0_11734.pr, { 1, 0 }
  uselistorder i1 %v7_1170c, { 1, 0 }
  uselistorder i1 %v2_116f8, { 1, 0, 2 }
  uselistorder i1 %v2_116e0, { 1, 0, 2 }
  uselistorder i32 %v1_11700, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_116d4, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_116fc, { 1, 0 }
  uselistorder i32 %v2_11704, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_116c0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_11688, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_11664, { 1, 2, 3, 0 }
  uselistorder i32 %v3_11660, { 1, 0 }
  uselistorder i32 %v5_11644, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_11630, { 1, 0, 2 }
  uselistorder i32 %v3_1162c, { 1, 0, 2 }
  uselistorder i32 %v0_11fa8, { 1, 0, 2 }
  uselistorder i32 %v0_11600, { 1, 0, 2 }
  uselistorder i1 %v7_115e0, { 1, 0 }
  uselistorder i32 %v0_11548, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v2_1151c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_11514, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_114a8, { 2, 1, 0 }
  uselistorder i32 %v3_114a4, { 1, 0 }
  uselistorder i1 %v7_11488, { 1, 0 }
  uselistorder i32 %v3_11484, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_11478, { 1, 0 }
  uselistorder i32 %v1_1145c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_11448, { 2, 1, 0 }
  uselistorder i32 %v3_11444, { 1, 0 }
  uselistorder i32 %v0_11448, { 1, 0 }
  uselistorder i32 %v2_113e0, { 1, 0 }
  uselistorder i32 %v1_113e0, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_113e0, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_113bc, { 2, 1, 0 }
  uselistorder i32 %v1_113b8, { 1, 0 }
  uselistorder i32 %v2_11388, { 1, 0 }
  uselistorder i32 %v0_11388, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_11380, { 1, 0 }
  uselistorder i1 %v7_11348, { 0, 3, 1, 2 }
  uselistorder i1 %v2_11348, { 1, 2, 0 }
  uselistorder i32 %v2_11340, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_11338, { 1, 0 }
  uselistorder i32 %v1_1131c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v2_11310, { 1, 0 }
  uselistorder i32 %v1_11310, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_11310, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_11300, { 1, 0 }
  uselistorder i32 %v3_11364, { 5, 7, 4, 8, 6, 1, 0, 10, 3, 2, 9 }
  uselistorder i32 %storemerge233, { 1, 0, 2 }
  uselistorder i32 %v3_11254, { 1, 0 }
  uselistorder i32 %v1_11240, { 1, 0 }
  uselistorder i32 %v1_11228, { 1, 2, 0 }
  uselistorder i32 %v0_11234, { 0, 3, 2, 1 }
  uselistorder i32 %v0_111f8, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_111ec, { 2, 1, 0 }
  uselistorder i32 %v1_111c8, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_111a0, { 1, 0 }
  uselistorder i32 %v0_11104, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_110ac, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_10fd0, { 1, 0 }
  uselistorder i32 %v1_10fcc, { 1, 0 }
  uselistorder i32 %v4_10fa8, { 1, 0 }
  uselistorder i1 %v2_10f18, { 1, 0 }
  uselistorder i1 %v3_10efc, { 1, 0, 2 }
  uselistorder i1 %v2_10ee8, { 1, 0 }
  uselistorder i1 %v2_10ec4, { 1, 0 }
  uselistorder i32 %v1_10e74, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10e60, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10e5c, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_10e4c, { 1, 0 }
  uselistorder i32 %v0_10e3c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10e18, { 1, 0 }
  uselistorder i32 %v2_115b8, { 0, 2, 3, 4, 1 }
  uselistorder i32* %v2_115ac, { 0, 3, 7, 4, 2, 5, 6, 8, 1 }
  uselistorder i32 %v2_115a4, { 0, 3, 7, 4, 2, 5, 6, 8, 1 }
  uselistorder i32 %v2_11dcc, { 1, 0 }
  uselistorder i32 %v2_11374, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v2_10e04, { 1, 2, 4, 5, 0, 3, 8, 7, 6, 9 }
  uselistorder i32 %v2_10e00, { 3, 2, 0, 5, 4, 1, 6 }
  uselistorder i32 %v4_10bc4, { 1, 0 }
  uselistorder i32 %v4_10b64, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_10b5c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10b04, { 3, 2, 0, 1 }
  uselistorder i1 %v7_10aa4, { 1, 0 }
  uselistorder i32 %v3_10a9c, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_10a84, { 0, 2, 1 }
  uselistorder i32 %v0_10a6c, { 2, 1, 0 }
  uselistorder i32 %v0_10a48, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge241, { 1, 0 }
  uselistorder i32 %v0_109dc, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 5, 6, 7, 4, 8, 3, 2, 9, 0, 10, 11 }
  uselistorder i8* %stack_var_-52, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 10, 7, 8, 9, 11 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 62, 11, 12, 57, 63, 43, 64, 65, 134, 13, 14, 15, 35, 44, 45, 46, 47, 0, 1, 2, 3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 58, 59, 60, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 66, 67, 68, 69, 70, 71, 61, 72, 73, 75, 74, 76, 77, 78, 79, 81, 83, 82, 80, 84, 85, 86, 87, 93, 88, 89, 90, 91, 94, 137, 138, 95, 135, 136, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 133, 113, 114, 115, 116, 117, 118, 120, 119, 122, 121, 92, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 45, 51, 37, 14, 15, 17, 18, 19, 33, 38, 39, 40, 41, 0, 1, 2, 46, 20, 21, 23, 22, 24, 26, 25, 27, 29, 28, 30, 31, 32, 34, 36, 35, 47, 49, 48, 42, 43, 44, 52, 53, 54, 55, 56, 57, 58, 50, 59, 60, 61, 62, 63, 65, 67, 66, 145, 64, 68, 69, 70, 71, 75, 72, 73, 74, 76, 77, 80, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 97, 98, 101, 102, 103, 104, 105, 106, 107, 109, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 47, 11, 12, 13, 14, 40, 48, 36, 37, 15, 16, 17, 32, 33, 38, 39, 1, 2, 3, 41, 113, 114, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 42, 43, 0, 49, 50, 51, 52, 44, 45, 46, 53, 54, 55, 57, 58, 56, 59, 60, 62, 61, 120, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 115 }
  uselistorder i32* %r0.global-to-local, { 11, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 133, 132, 22, 23, 25, 24, 26, 28, 27, 29, 31, 30, 113, 114, 115, 117, 116, 32, 135, 134, 104, 107, 106, 137, 139, 140, 136, 141, 138, 34, 33, 35, 37, 36, 38, 40, 39, 41, 92, 91, 94, 93, 95, 96, 109, 108, 110, 2, 1, 3, 5, 4, 7, 6, 8, 9, 10, 119, 118, 43, 44, 46, 45, 47, 42, 48, 49, 50, 51, 53, 52, 55, 54, 57, 56, 58, 59, 60, 61, 63, 62, 65, 64, 67, 66, 68, 69, 70, 71, 73, 72, 75, 74, 77, 76, 78, 79, 80, 82, 81, 83, 85, 84, 87, 86, 88, 89, 90, 98, 97, 105, 99, 100, 101, 121, 120, 123, 122, 102, 103, 112, 111, 144, 142, 125, 124, 126, 128, 127, 129, 130, 131, 152, 143, 145, 146, 147, 149, 148, 150, 157, 151, 153, 156, 154, 155, 159, 160, 158, 163, 161, 162, 165, 164, 166, 168, 167, 216, 169, 170, 171, 0, 172, 173, 175, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 210, 213, 212, 214, 215, 219, 217, 218, 220, 221, 222, 223 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18 }
  uselistorder i32* %ip.global-to-local, { 2, 23, 3, 16, 0, 1, 21, 4, 5, 7, 6, 9, 8, 10, 11, 12, 13, 14, 20, 15, 22, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 50, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 10, 111, 201, 200, 93, 94, 99, 102, 101, 103, 104, 105, 11, 191, 13, 14, 15, 55, 56, 57, 74, 75, 76, 77, 78, 0, 1, 6, 7, 2, 3, 4, 5, 8, 95, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 97, 66, 71, 72, 67, 68, 69, 70, 73, 96, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 192, 106, 107, 108, 109, 110, 193, 98, 12, 100, 112, 114, 113, 115, 116, 118, 120, 119, 194, 117, 121, 122, 123, 124, 125, 126, 131, 127, 128, 129, 130, 197, 198, 195, 196, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 149, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 190, 167, 168, 169, 170, 171, 189, 172, 173, 174, 188, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 199, 202 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 108, 197, 196, 90, 91, 96, 98, 99, 100, 101, 102, 12, 186, 13, 14, 15, 16, 55, 56, 57, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 92, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 94, 66, 71, 72, 67, 68, 69, 70, 73, 93, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 188, 103, 104, 105, 106, 107, 189, 95, 187, 97, 109, 111, 110, 112, 114, 116, 115, 190, 113, 117, 118, 119, 120, 121, 126, 122, 123, 124, 125, 193, 194, 191, 127, 192, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 185, 158, 159, 160, 161, 162, 184, 163, 164, 165, 183, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 195, 198 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder %sockaddr** @global_var_1c224.156, { 1, 2, 0 }
  uselistorder i32 ptrtoint (%sockaddr** @global_var_1c224.156 to i32), { 1, 0 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 30, { 6, 0, 1, 2, 3, 7, 4, 5, 8 }
  uselistorder i32* (i32*, i32*, i32)* @memmove, { 0, 4, 1, 6, 5, 3, 2, 7 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_13690.112 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_13690.112, { 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_13690.112 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @send, { 10, 11, 12, 13, 17, 26, 25, 29, 9, 8, 24, 27, 28, 19, 4, 6, 5, 16, 18, 20, 21, 23, 22, 1, 0, 15, 14, 3, 2, 7, 30 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @recv, { 7, 6, 5, 9, 8, 4, 3, 0, 2, 1, 10 }
  uselistorder i32 (i32)* @function_121d0, { 31, 23, 22, 30, 24, 32, 29, 28, 27, 26, 25, 21, 20, 5, 19, 18, 17, 33, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12e00, { 21, 24, 22, 23, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32*)* @function_121a4, { 1, 2, 8, 0, 3, 4, 5, 6, 7, 9, 10, 31, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 32, 33, 34, 35, 54, 55, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32 (i32)* @function_12288, { 41, 40, 34, 42, 39, 38, 37, 36, 35, 33, 32, 16, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1c214.211 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1c215.212, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32*)* @getsockopt, { 2, 1, 0, 3 }
  uselistorder i32 (i32, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %timeval*)* @select, { 2, 1, 0, 3 }
  uselistorder %_TYPEDEF_fd_set* null, { 1, 2, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32* @r7, { 25, 26, 6, 7, 8, 14, 15, 16, 2, 5, 23, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 24, 1, 27, 153, 154, 155, 156, 28, 0, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 4, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 149, 145, 146, 147, 148, 150, 151, 152, 157, 158, 159, 160, 165, 161, 162, 163, 164, 166, 167, 168, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 3, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 169, 170, 171, 172, 173, 174, 175, 176 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32* @sp, { 4, 0, 5, 1, 6, 2, 7, 3 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder void (i32)* @exit, { 1, 0, 4, 5, 3, 2, 6 }
  uselistorder i32 ()* @function_10748, { 3, 2, 1, 0 }
  uselistorder i32 254, { 8, 9, 10, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8 2, { 0, 3, 2, 1 }
  uselistorder i32 39, { 5, 0, 1, 6, 2, 7, 3, 8, 4 }
  uselistorder i32 38, { 3, 0, 4, 1, 5, 2, 6, 7, 8, 9, 10 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32*)* @recvfrom, { 1, 0, 2 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32)* @sendto, { 6, 7, 0, 5, 1, 2, 3, 4, 8, 9 }
  uselistorder i32 16384, { 32, 51, 33, 52, 34, 53, 35, 54, 36, 55, 37, 56, 13, 57, 12, 68, 0, 49, 1, 50, 2, 58, 3, 59, 4, 60, 5, 61, 6, 62, 7, 63, 8, 64, 9, 65, 30, 66, 31, 67, 28, 70, 29, 71, 26, 27, 69, 38, 72, 10, 73, 11, 74, 40, 75, 15, 76, 41, 77, 42, 78, 43, 79, 14, 80, 39, 81, 16, 82, 17, 83, 18, 84, 44, 45, 19, 85, 20, 86, 22, 87, 21, 88, 23, 89, 24, 90, 47, 91, 48, 92, 25, 93, 46, 94 }
  uselistorder i32 (i32, i32, i32, i32)* @function_f1e4, { 8, 7, 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_f188, { 10, 9, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1c1f8.302, { 2, 1, 0 }
  uselistorder i32 16711680, { 1, 0 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 33, { 0, 6, 1, 7, 2, 8, 3, 9, 10, 4, 5, 11 }
  uselistorder i32 54, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 27, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 20, { 14, 15, 0, 16, 1, 17, 13, 18, 19, 20, 23, 21, 2, 22, 24, 25, 26, 27, 29, 30, 28, 3, 31, 32, 33, 34, 35, 36, 39, 40, 37, 4, 38, 41, 42, 43, 44, 45, 46, 49, 50, 47, 5, 48, 51, 52, 53, 54, 57, 58, 55, 6, 56, 59, 60, 61, 62, 63, 64, 67, 65, 12, 66, 68, 69, 70, 73, 8, 71, 7, 72, 74, 75, 78, 10, 76, 9, 77, 79, 80, 82, 83, 84, 11, 85, 81 }
  uselistorder i32 22, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 62, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 31, { 12, 18, 13, 19, 14, 20, 15, 11, 21, 16, 3, 0, 4, 17, 5, 6, 1, 7, 8, 2, 9, 10 }
  uselistorder i32 30, { 1, 5, 2, 6, 3, 7, 0, 8, 4, 9 }
  uselistorder i32 56, { 2, 3, 0, 1 }
  uselistorder i32 127, { 5, 0, 6, 3, 7, 1, 8, 2, 9, 4, 10 }
  uselistorder i32 126, { 11, 5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_13734.270 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_136ec.254 to i32), { 0, 20, 1, 21, 2, 22, 3, 23, 4, 24, 5, 25, 6, 26, 7, 27, 8, 28, 9, 29, 10, 30, 11, 31, 12, 32, 13, 33, 14, 34, 15, 35, 16, 36, 17, 37, 18, 38, 19, 39 }
  uselistorder i32 ptrtoint (i32* @global_var_136b8.248 to i32), { 0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_137e4.246 to i32), { 0, 2, 1, 3 }
  uselistorder i32 13, { 5, 6, 7, 8, 4, 9, 0, 10, 11, 12, 13, 14, 1, 15, 16, 17, 18, 19, 20, 21, 2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 3, 34, 35 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_137d8.244 to i32), { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32, i32)* @function_1081c, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_137c0.238 to i32), { 0, 9, 1, 10, 2, 11, 3, 4, 5, 12, 6, 13, 7, 14, 8, 15 }
  uselistorder i8* @global_var_1c209.234, { 1, 0 }
  uselistorder i32* @r6, { 9, 10, 22, 23, 11, 12, 20, 13, 14, 15, 16, 17, 18, 19, 24, 25, 21, 26, 27, 28, 29, 30, 31, 32, 33, 171, 172, 173, 174, 0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 1, 59, 60, 61, 2, 62, 63, 66, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 98, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 121, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 134, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 3, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 175, 176, 177, 178, 186, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 4, 211, 212, 213, 214, 215, 216, 218, 5, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 6, 7, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 190, 194, 191, 192, 193, 195, 196, 8, 197, 198, 199, 200 }
  uselistorder i32 80, { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_1c1fc.225 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder i8* @global_var_1c208.226, { 1, 0 }
  uselistorder i32 40, { 1, 6, 7, 8, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 3, 19, 4, 20, 5, 21 }
  uselistorder i32 ptrtoint (i32* @global_var_1c1e8.221 to i32), { 0, 2, 1, 4, 5, 3, 6, 7, 8, 9 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 65280, { 27, 1, 14, 0, 2, 3, 28, 4, 5, 29, 21, 22, 30, 6, 31, 15, 16, 32, 7, 33, 34, 8, 17, 9, 35, 23, 18, 36, 37, 38, 39, 10, 24, 25, 26, 40, 11, 41, 42, 19, 43, 44, 12, 45, 46, 20, 47, 48, 13, 49 }
  uselistorder i32 ()* @function_105b4, { 66, 65, 64, 63, 62, 61, 2, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 7, 6, 5, 4, 3, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @setsockopt, { 10, 9, 8, 1, 0, 7, 6, 3, 2, 5, 4, 11 }
  uselistorder i32 2048, { 3, 0, 1, 4, 2, 5, 6, 7 }
  uselistorder i32 (i32, i32, ...)* @fcntl, { 3, 2, 1, 0, 10, 9, 6, 5, 4, 11, 8, 7, 12 }
  uselistorder i32* @global_var_1c238.219, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_1c234.217, { 1, 2, 3, 4, 0 }
  uselistorder i32* (i32, i32)* @calloc, { 26, 34, 33, 7, 6, 8, 23, 5, 4, 3, 2, 11, 10, 14, 16, 15, 18, 17, 20, 19, 21, 13, 1, 0, 9, 22, 31, 30, 29, 28, 32, 25, 24, 27, 12, 35 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1c218.205, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @time, { 8, 13, 12, 7, 6, 27, 26, 2, 1, 0, 5, 4, 3, 16, 15, 14, 19, 18, 17, 22, 21, 20, 25, 24, 23, 11, 10, 9, 28 }
  uselistorder i32* @global_var_1c21c.133, { 3, 4, 0, 1, 2, 5, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_12ff4, { 1, 0, 2 }
  uselistorder i32* @global_var_1c23c.203, { 0, 2, 1 }
  uselistorder i32 ()* @fork, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* @sl, { 9, 3, 5, 6, 10, 4, 7, 8, 13, 12, 11, 14, 15, 16, 17, 18, 19, 20, 21, 24, 22, 23, 2, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 47, 48, 49, 50, 51, 52, 0, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 1, 111, 112, 113, 114, 90, 91, 92, 93, 94 }
  uselistorder i32* @sb, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 33, 34, 36, 37, 38, 41, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* @r8, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 1, 34, 2, 35, 3, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 47, 49, 50, 48, 51, 52, 53, 54, 56, 55, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 149, 152, 153, 154, 155, 156, 157, 158, 90 }
  uselistorder i32* @r5, { 57, 58, 59, 60, 49, 50, 40, 15, 16, 61, 45, 62, 63, 64, 65, 66, 67, 17, 18, 19, 20, 21, 41, 46, 12, 13, 14, 51, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 52, 53, 54, 55, 47, 48, 68, 69, 70, 71, 72, 56, 73, 74, 75, 76, 7, 77, 78, 79, 80, 81, 82, 83, 330, 331, 332, 333, 334, 335, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 106, 107, 1, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 9, 121, 122, 123, 124, 125, 126, 127, 128, 10, 129, 130, 131, 132, 133, 134, 135, 141, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 168, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 191, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 226, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 258, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 287, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 317, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 336, 337, 338, 339, 340, 341, 350, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 5, 404, 405, 406, 407, 408, 409, 410, 8, 411, 412, 2, 413, 414, 3, 415, 416, 4, 417, 418, 419, 420, 421, 422, 11, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 6, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 364 }
  uselistorder label %dec_label_pc_1219c, { 1, 0 }
  uselistorder label %dec_label_pc_1160c.backedge.thread465, { 9, 4, 8, 2, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_1160c.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %.thread229, { 1, 0 }
  uselistorder label %bb362, { 1, 0 }
  uselistorder label %dec_label_pc_11f3c, { 1, 0 }
  uselistorder label %dec_label_pc_11f08, { 1, 0 }
  uselistorder label %thread-pre-split80, { 1, 0 }
  uselistorder label %dec_label_pc_11e18, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11d44, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11d30, { 1, 0 }
  uselistorder label %dec_label_pc_11cd8, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_11be8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11bd4, { 1, 0 }
  uselistorder label %dec_label_pc_11b34, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11b20, { 1, 0 }
  uselistorder label %dec_label_pc_11a80, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11a6c, { 1, 0 }
  uselistorder label %dec_label_pc_11914, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11900, { 1, 0 }
  uselistorder label %dec_label_pc_1187c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_11868, { 1, 0 }
  uselistorder label %dec_label_pc_117f8, { 1, 0 }
  uselistorder label %dec_label_pc_117ec, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_117d8, { 1, 0 }
  uselistorder label %dec_label_pc_11794, { 2, 1, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_11784, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb336, { 2, 1, 0 }
  uselistorder label %bb334, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11734, { 1, 0 }
  uselistorder label %dec_label_pc_116dc, { 1, 0 }
  uselistorder label %dec_label_pc_116dc.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11670, { 1, 0 }
  uselistorder label %bb332, { 1, 0 }
  uselistorder label %dec_label_pc_11624, { 1, 0 }
  uselistorder label %dec_label_pc_11614, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11614.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_11608.loopexit, { 1, 4, 0, 2, 3 }
  uselistorder label %dec_label_pc_11590, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1157c, { 1, 0 }
  uselistorder label %dec_label_pc_11458, { 7, 1, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_11430, { 1, 0 }
  uselistorder label %bb327, { 1, 0 }
  uselistorder label %bb325, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_1129c.dec_label_pc_1129c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11284.dec_label_pc_11284_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1127c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11274, { 1, 0 }
  uselistorder label %dec_label_pc_11228, { 1, 0 }
  uselistorder label %dec_label_pc_110cc, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_110c0, { 1, 0 }
  uselistorder label %.thread52, { 2, 1, 0 }
  uselistorder label %.thread50, { 1, 0 }
  uselistorder label %dec_label_pc_10f28, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10f04, { 1, 0 }
  uselistorder label %dec_label_pc_10ef8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10ed4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10eb0, { 1, 0 }
  uselistorder label %bb289, { 1, 0 }
  uselistorder label %dec_label_pc_10e5c, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_10b04, { 1, 0 }
}

define i32 @function_121a4(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_121a4:
  %v3_121a8 = mul i32 %arg1, 8
  %v2_121ac = add i32 %v3_121a8, ptrtoint (i32* @global_var_1c244.319 to i32)
  %v2_121b0 = icmp eq i32* %arg2, null
  br i1 %v2_121b0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_121a4
  %v3_121bc11 = inttoptr i32 %v2_121ac to i32*
  %v4_121bc12 = load i32, i32* %v3_121bc11, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_121a4
  %v2_121b4 = add i32 %v3_121a8, add (i32 ptrtoint (i32* @global_var_1c244.319 to i32), i32 5)
  %v3_121b4 = inttoptr i32 %v2_121b4 to i8*
  %v4_121b4 = load i8, i8* %v3_121b4, align 1
  %v5_121b4 = zext i8 %v4_121b4 to i32
  %v2_121b8 = add i32 %v3_121a8, add (i32 ptrtoint (i32* @global_var_1c244.319 to i32), i32 4)
  %v3_121b8 = inttoptr i32 %v2_121b8 to i8*
  %v4_121b8 = load i8, i8* %v3_121b8, align 4
  %v5_121b8 = zext i8 %v4_121b8 to i32
  %v3_121bc = inttoptr i32 %v2_121ac to i32*
  %v4_121bc = load i32, i32* %v3_121bc, align 4
  %v5_121c0 = mul nuw nsw i32 %v5_121b4, 256
  %v6_121c0 = or i32 %v5_121b8, %v5_121c0
  store i32 %v6_121c0, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_121bc714 = phi i32 [ %v4_121bc12, %.thread ], [ %v4_121bc, %bb ]
  ret i32 %v4_121bc714

; uselistorder directives
  uselistorder i32 %v2_121ac, { 1, 0 }
  uselistorder i32 %v3_121a8, { 2, 1, 0 }
  uselistorder i32* null, { 3, 7, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 2, 28, 29, 30, 31, 6, 32, 33, 34, 41, 35, 36, 37, 38, 39, 40, 5, 42, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_121d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_121d0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_121d0 = mul i32 %arg1, 8
  %v3_121d4 = load i32, i32* @r4, align 4
  store i32 %v3_121d4, i32* %stack_var_-20, align 4
  %v3_121e4 = and i32 %v3_121d0, 2040
  %v2_121e8 = add i32 %v3_121e4, ptrtoint (i32* @global_var_1c244.319 to i32)
  store i32 %v2_121e8, i32* %lr.global-to-local, align 4
  %v1_121f0 = add i32 %v3_121e4, add (i32 ptrtoint (i32* @global_var_1c244.319 to i32), i32 4)
  store i32 %v1_121f0, i32* %r7.global-to-local, align 4
  %v2_121f4 = load i32, i32* @global_var_1c19c.322, align 4
  %v2_121f8 = inttoptr i32 %v1_121f0 to i8*
  %v3_121f8 = load i8, i8* %v2_121f8, align 4
  %v4_121f8 = zext i8 %v3_121f8 to i32
  store i32 %v4_121f8, i32* @r1, align 4
  %v1_121fc = add i32 %v3_121e4, add (i32 ptrtoint (i32* @global_var_1c244.319 to i32), i32 5)
  %v2_121fc = inttoptr i32 %v1_121fc to i8*
  %v3_121fc = load i8, i8* %v2_121fc, align 1
  %v4_121fc = zext i8 %v3_121fc to i32
  %v3_12200 = udiv i32 %v2_121f4, 256
  %v4_12204 = mul nuw nsw i32 %v4_121fc, 256
  %v5_12204 = or i32 %v4_12204, %v4_121f8
  %v7_12204 = icmp eq i32 %v5_12204, 0
  store i1 %v7_12204, i1* @cpsr_z, align 1
  %v3_12208 = udiv i32 %v2_121f4, 65536
  %v1_1220c = urem i32 %v3_12200, 256
  store i32 %v1_1220c, i32* %r6.global-to-local, align 4
  %v1_12210 = urem i32 %v3_12208, 256
  store i32 %v1_12210, i32* %r5.global-to-local, align 4
  %v3_12214 = udiv i32 %v2_121f4, 16777216
  store i32 %v3_12214, i32* %r4.global-to-local, align 4
  %v1_12218 = urem i32 %v2_121f4, 256
  br i1 %v7_12204, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_121d0
  store i32 %v3_121d4, i32* @r4, align 4
  ret i32 %v1_12218

bb8:                                              ; preds = %dec_label_pc_121d0
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12224

dec_label_pc_12224:                               ; preds = %dec_label_pc_12224, %bb8
  %v2_12230 = phi i32 [ %v1_1226c, %dec_label_pc_12224 ], [ 0, %bb8 ]
  %v0_12224 = phi i32 [ %v0_12264, %dec_label_pc_12224 ], [ %v2_121e8, %bb8 ]
  %v1_12224 = inttoptr i32 %v0_12224 to i32*
  %v2_12224 = load i32, i32* %v1_12224, align 4
  %v2_12228 = add i32 %v2_12224, %v2_12230
  %v3_12228 = inttoptr i32 %v2_12228 to i8*
  %v4_12228 = load i8, i8* %v3_12228, align 1
  %v6_12228 = zext i8 %v4_12228 to i32
  %v2_1222c = xor i32 %v6_12228, %v1_12218
  %v1_12230 = trunc i32 %v2_1222c to i8
  store i8 %v1_12230, i8* %v3_12228, align 1
  %v0_12234 = load i32, i32* %lr.global-to-local, align 4
  %v1_12234 = inttoptr i32 %v0_12234 to i32*
  %v2_12234 = load i32, i32* %v1_12234, align 4
  %v0_12238 = load i32, i32* %ip.global-to-local, align 4
  %v2_12238 = add i32 %v0_12238, %v2_12234
  %v3_12238 = inttoptr i32 %v2_12238 to i8*
  %v4_12238 = load i8, i8* %v3_12238, align 1
  %v6_12238 = zext i8 %v4_12238 to i32
  %v0_1223c = load i32, i32* %r6.global-to-local, align 4
  %v2_1223c = xor i32 %v0_1223c, %v6_12238
  %v1_12240 = trunc i32 %v2_1223c to i8
  store i8 %v1_12240, i8* %v3_12238, align 1
  %v0_12244 = load i32, i32* %lr.global-to-local, align 4
  %v1_12244 = inttoptr i32 %v0_12244 to i32*
  %v2_12244 = load i32, i32* %v1_12244, align 4
  %v0_12248 = load i32, i32* %ip.global-to-local, align 4
  %v2_12248 = add i32 %v0_12248, %v2_12244
  %v3_12248 = inttoptr i32 %v2_12248 to i8*
  %v4_12248 = load i8, i8* %v3_12248, align 1
  %v6_12248 = zext i8 %v4_12248 to i32
  %v0_1224c = load i32, i32* %r5.global-to-local, align 4
  %v2_1224c = xor i32 %v0_1224c, %v6_12248
  %v1_12250 = trunc i32 %v2_1224c to i8
  store i8 %v1_12250, i8* %v3_12248, align 1
  %v0_12254 = load i32, i32* %lr.global-to-local, align 4
  %v1_12254 = inttoptr i32 %v0_12254 to i32*
  %v2_12254 = load i32, i32* %v1_12254, align 4
  store i32 %v2_12254, i32* @r1, align 4
  %v0_12258 = load i32, i32* %ip.global-to-local, align 4
  %v2_12258 = add i32 %v0_12258, %v2_12254
  %v3_12258 = inttoptr i32 %v2_12258 to i8*
  %v4_12258 = load i8, i8* %v3_12258, align 1
  %v6_12258 = zext i8 %v4_12258 to i32
  %v0_1225c = load i32, i32* %r4.global-to-local, align 4
  %v2_1225c = xor i32 %v0_1225c, %v6_12258
  %v1_12260 = trunc i32 %v2_1225c to i8
  store i8 %v1_12260, i8* %v3_12258, align 1
  %v0_12264 = load i32, i32* %lr.global-to-local, align 4
  %v1_12264 = add i32 %v0_12264, 4
  %v2_12264 = inttoptr i32 %v1_12264 to i8*
  %v3_12264 = load i8, i8* %v2_12264, align 1
  %v4_12264 = zext i8 %v3_12264 to i32
  %v0_12268 = load i32, i32* %r7.global-to-local, align 4
  %v1_12268 = add i32 %v0_12268, 1
  %v2_12268 = inttoptr i32 %v1_12268 to i8*
  %v3_12268 = load i8, i8* %v2_12268, align 1
  %v4_12268 = zext i8 %v3_12268 to i32
  %v0_1226c = load i32, i32* %ip.global-to-local, align 4
  %v1_1226c = add i32 %v0_1226c, 1
  store i32 %v1_1226c, i32* %ip.global-to-local, align 4
  %v4_12270 = mul nuw nsw i32 %v4_12268, 256
  %v5_12270 = or i32 %v4_12270, %v4_12264
  %v9_12274 = icmp eq i32 %v5_12270, %v1_1226c
  store i1 %v9_12274, i1* @cpsr_z, align 1
  %v8_12278 = icmp sgt i32 %v5_12270, %v1_1226c
  br i1 %v8_12278, label %dec_label_pc_12224, label %dec_label_pc_1227c

dec_label_pc_1227c:                               ; preds = %dec_label_pc_12224
  %v2_1227c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1227c, i32* @r4, align 4
  ret i32 %v1_12218

; uselistorder directives
  uselistorder i32 %v1_1226c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_12264, { 1, 0 }
  uselistorder i32 %v1_12218, { 1, 2, 0 }
  uselistorder i32 %v2_121f4, { 3, 0, 1, 2 }
}

define i32 @function_12288(i32 %arg1) local_unnamed_addr {
dec_label_pc_12288:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12288 = mul i32 %arg1, 8
  %v3_1228c = load i32, i32* @r4, align 4
  store i32 %v3_1228c, i32* %stack_var_-20, align 4
  %v3_1229c = and i32 %v3_12288, 2040
  %v2_122a0 = add i32 %v3_1229c, ptrtoint (i32* @global_var_1c244.319 to i32)
  store i32 %v2_122a0, i32* %lr.global-to-local, align 4
  %v1_122a8 = add i32 %v3_1229c, add (i32 ptrtoint (i32* @global_var_1c244.319 to i32), i32 4)
  store i32 %v1_122a8, i32* %r7.global-to-local, align 4
  %v2_122ac = load i32, i32* @global_var_1c19c.322, align 4
  %v2_122b0 = inttoptr i32 %v1_122a8 to i8*
  %v3_122b0 = load i8, i8* %v2_122b0, align 4
  %v4_122b0 = zext i8 %v3_122b0 to i32
  %v1_122b4 = add i32 %v3_1229c, add (i32 ptrtoint (i32* @global_var_1c244.319 to i32), i32 5)
  %v2_122b4 = inttoptr i32 %v1_122b4 to i8*
  %v3_122b4 = load i8, i8* %v2_122b4, align 1
  %v4_122b4 = zext i8 %v3_122b4 to i32
  %v3_122b8 = udiv i32 %v2_122ac, 256
  %v4_122bc = mul nuw nsw i32 %v4_122b4, 256
  %v5_122bc = or i32 %v4_122bc, %v4_122b0
  %v7_122bc = icmp eq i32 %v5_122bc, 0
  %v3_122c0 = udiv i32 %v2_122ac, 65536
  %v1_122c4 = urem i32 %v3_122b8, 256
  store i32 %v1_122c4, i32* %r6.global-to-local, align 4
  %v1_122c8 = urem i32 %v3_122c0, 256
  store i32 %v1_122c8, i32* %r5.global-to-local, align 4
  %v3_122cc = udiv i32 %v2_122ac, 16777216
  store i32 %v3_122cc, i32* %r4.global-to-local, align 4
  %v1_122d0 = urem i32 %v2_122ac, 256
  br i1 %v7_122bc, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_12288
  store i32 %v3_1228c, i32* @r4, align 4
  ret i32 %v1_122d0

bb8:                                              ; preds = %dec_label_pc_12288
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_122dc

dec_label_pc_122dc:                               ; preds = %dec_label_pc_122dc, %bb8
  %v2_122e8 = phi i32 [ %v1_12324, %dec_label_pc_122dc ], [ 0, %bb8 ]
  %v0_122dc = phi i32 [ %v0_1231c, %dec_label_pc_122dc ], [ %v2_122a0, %bb8 ]
  %v1_122dc = inttoptr i32 %v0_122dc to i32*
  %v2_122dc = load i32, i32* %v1_122dc, align 4
  %v2_122e0 = add i32 %v2_122dc, %v2_122e8
  %v3_122e0 = inttoptr i32 %v2_122e0 to i8*
  %v4_122e0 = load i8, i8* %v3_122e0, align 1
  %v6_122e0 = zext i8 %v4_122e0 to i32
  %v2_122e4 = xor i32 %v6_122e0, %v1_122d0
  %v1_122e8 = trunc i32 %v2_122e4 to i8
  store i8 %v1_122e8, i8* %v3_122e0, align 1
  %v0_122ec = load i32, i32* %lr.global-to-local, align 4
  %v1_122ec = inttoptr i32 %v0_122ec to i32*
  %v2_122ec = load i32, i32* %v1_122ec, align 4
  %v0_122f0 = load i32, i32* %ip.global-to-local, align 4
  %v2_122f0 = add i32 %v0_122f0, %v2_122ec
  %v3_122f0 = inttoptr i32 %v2_122f0 to i8*
  %v4_122f0 = load i8, i8* %v3_122f0, align 1
  %v6_122f0 = zext i8 %v4_122f0 to i32
  %v0_122f4 = load i32, i32* %r6.global-to-local, align 4
  %v2_122f4 = xor i32 %v0_122f4, %v6_122f0
  %v1_122f8 = trunc i32 %v2_122f4 to i8
  store i8 %v1_122f8, i8* %v3_122f0, align 1
  %v0_122fc = load i32, i32* %lr.global-to-local, align 4
  %v1_122fc = inttoptr i32 %v0_122fc to i32*
  %v2_122fc = load i32, i32* %v1_122fc, align 4
  %v0_12300 = load i32, i32* %ip.global-to-local, align 4
  %v2_12300 = add i32 %v0_12300, %v2_122fc
  %v3_12300 = inttoptr i32 %v2_12300 to i8*
  %v4_12300 = load i8, i8* %v3_12300, align 1
  %v6_12300 = zext i8 %v4_12300 to i32
  %v0_12304 = load i32, i32* %r5.global-to-local, align 4
  %v2_12304 = xor i32 %v0_12304, %v6_12300
  %v1_12308 = trunc i32 %v2_12304 to i8
  store i8 %v1_12308, i8* %v3_12300, align 1
  %v0_1230c = load i32, i32* %lr.global-to-local, align 4
  %v1_1230c = inttoptr i32 %v0_1230c to i32*
  %v2_1230c = load i32, i32* %v1_1230c, align 4
  %v0_12310 = load i32, i32* %ip.global-to-local, align 4
  %v2_12310 = add i32 %v0_12310, %v2_1230c
  %v3_12310 = inttoptr i32 %v2_12310 to i8*
  %v4_12310 = load i8, i8* %v3_12310, align 1
  %v6_12310 = zext i8 %v4_12310 to i32
  %v0_12314 = load i32, i32* %r4.global-to-local, align 4
  %v2_12314 = xor i32 %v0_12314, %v6_12310
  %v1_12318 = trunc i32 %v2_12314 to i8
  store i8 %v1_12318, i8* %v3_12310, align 1
  %v0_1231c = load i32, i32* %lr.global-to-local, align 4
  %v1_1231c = add i32 %v0_1231c, 4
  %v2_1231c = inttoptr i32 %v1_1231c to i8*
  %v3_1231c = load i8, i8* %v2_1231c, align 1
  %v4_1231c = zext i8 %v3_1231c to i32
  %v0_12320 = load i32, i32* %r7.global-to-local, align 4
  %v1_12320 = add i32 %v0_12320, 1
  %v2_12320 = inttoptr i32 %v1_12320 to i8*
  %v3_12320 = load i8, i8* %v2_12320, align 1
  %v4_12320 = zext i8 %v3_12320 to i32
  %v0_12324 = load i32, i32* %ip.global-to-local, align 4
  %v1_12324 = add i32 %v0_12324, 1
  store i32 %v1_12324, i32* %ip.global-to-local, align 4
  %v4_12328 = mul nuw nsw i32 %v4_12320, 256
  %v5_12328 = or i32 %v4_12328, %v4_1231c
  %v8_12330 = icmp sgt i32 %v5_12328, %v1_12324
  br i1 %v8_12330, label %dec_label_pc_122dc, label %dec_label_pc_12334

dec_label_pc_12334:                               ; preds = %dec_label_pc_122dc
  %v2_12334 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12334, i32* @r4, align 4
  ret i32 %v1_122d0

; uselistorder directives
  uselistorder i32 %v1_12324, { 1, 2, 0 }
  uselistorder i32 %v0_1231c, { 1, 0 }
  uselistorder i32 %v1_122d0, { 1, 2, 0 }
  uselistorder i32 %v2_122ac, { 3, 0, 1, 2 }
  uselistorder i32 16777216, { 0, 1, 3, 2, 5, 4, 7, 6, 9, 8, 13, 10, 12, 11, 14, 16, 15, 18, 17, 20, 19, 21, 23, 22, 24, 31, 25, 32, 26, 33, 27, 34, 35, 28, 36, 29, 37, 30, 41, 38, 42, 39, 43, 40, 45, 44, 46, 47, 48, 52, 49, 53, 50, 54, 51, 55, 56, 57, 63, 58, 64, 59, 65, 60, 66, 61, 67, 62, 68, 69, 71, 70, 75, 72, 76, 73, 77, 74, 79, 78, 80, 81, 82, 87, 83, 88, 84, 89, 85, 86, 90, 96, 91, 97, 92, 98, 93, 95, 99, 100, 101, 94, 102, 103, 109, 104, 110, 105, 111, 106, 108, 112, 113, 114, 107, 117, 115, 118, 116, 119, 120, 121 }
}

define i32 @function_12340(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12340:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12340 = load i32, i32* @r4, align 4
  store i32 %v3_12340, i32* %stack_var_-36, align 4
  %v1_12348 = call i32* @malloc(i32 2)
  %v2_12348 = ptrtoint i32* %v1_12348 to i32
  store i32 2, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c244.319 to i32), i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v2_12348, i32* %r7.global-to-local, align 4
  %v3_12364 = call i32 @function_12db8(i32 %v2_12348, i32 ptrtoint (i32* @global_var_13800.327 to i32), i32 2)
  %v0_12368 = load i32, i32* %r5.global-to-local, align 4
  %v0_1236c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_1236c, i32* @global_var_1c254.328, align 4
  %v1_12370 = trunc i32 %v0_12368 to i8
  store i8 %v1_12370, i8* bitcast (i32* @global_var_1c258.329 to i8*), align 4
  %v0_12374 = load i32, i32* %r6.global-to-local, align 4
  %v1_12374 = trunc i32 %v0_12374 to i8
  store i8 %v1_12374, i8* bitcast (i32* @global_var_1c259.330 to i8*), align 4
  %v1_12378 = call i32* @malloc(i32 %v0_12368)
  %v3_12378 = ptrtoint i32* %v1_12378 to i32
  %v0_1237c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_12378, i32* %r7.global-to-local, align 4
  %v3_12388 = call i32 @function_12db8(i32 %v3_12378, i32 ptrtoint (i32* @global_var_13804.332 to i32), i32 %v0_1237c)
  %v0_12390 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12390, i32* @global_var_1c264.333, align 4
  %v0_12394 = load i32, i32* %r5.global-to-local, align 4
  %v1_12394 = trunc i32 %v0_12394 to i8
  store i8 %v1_12394, i8* bitcast (i32* @global_var_1c268.334 to i8*), align 4
  %v0_12398 = load i32, i32* %r6.global-to-local, align 4
  %v1_12398 = trunc i32 %v0_12398 to i8
  store i8 %v1_12398, i8* bitcast (i32* @global_var_1c269.335 to i8*), align 4
  %v1_1239c = call i32* @malloc(i32 29)
  %v3_1239c = ptrtoint i32* %v1_1239c to i32
  store i32 %v3_1239c, i32* %r5.global-to-local, align 4
  %v3_123ac = call i32 @function_12db8(i32 %v3_1239c, i32 ptrtoint (i32* @global_var_13808.337 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1c270.338 to i8*), align 4
  %v0_123bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_123bc, i32* @global_var_1c26c.339, align 4
  %v0_123c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_123c0 = trunc i32 %v0_123c0 to i8
  store i8 %v1_123c0, i8* bitcast (i32* @global_var_1c271.340 to i8*), align 4
  %v1_123c4 = call i32* @malloc(i32 7)
  %v3_123c4 = ptrtoint i32* %v1_123c4 to i32
  store i32 7, i32* %r7.global-to-local, align 4
  store i32 %v3_123c4, i32* %r5.global-to-local, align 4
  %v3_123d8 = call i32 @function_12db8(i32 %v3_123c4, i32 ptrtoint (i32* @global_var_13828.342 to i32), i32 7)
  %v0_123e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_123e0, i32* @global_var_1c274.343, align 4
  %v0_123e4 = load i32, i32* %r7.global-to-local, align 4
  %v1_123e4 = trunc i32 %v0_123e4 to i8
  store i8 %v1_123e4, i8* bitcast (i32* @global_var_1c278.344 to i8*), align 4
  %v0_123e8 = load i32, i32* %r6.global-to-local, align 4
  %v1_123e8 = trunc i32 %v0_123e8 to i8
  store i8 %v1_123e8, i8* bitcast (i32* @global_var_1c279.345 to i8*), align 4
  %v1_123ec = call i32* @malloc(i32 5)
  %v3_123ec = ptrtoint i32* %v1_123ec to i32
  store i32 %v3_123ec, i32* %r5.global-to-local, align 4
  %v3_123fc = call i32 @function_12db8(i32 %v3_123ec, i32 ptrtoint (i32* @global_var_13830.347 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1c280.348 to i8*), align 4
  %v0_1240c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1240c, i32* @global_var_1c27c.349, align 4
  %v0_12410 = load i32, i32* %r6.global-to-local, align 4
  %v1_12410 = trunc i32 %v0_12410 to i8
  store i8 %v1_12410, i8* bitcast (i32* @global_var_1c281.350 to i8*), align 4
  %v1_12414 = call i32* @malloc(i32 4)
  %v3_12414 = ptrtoint i32* %v1_12414 to i32
  store i32 %v3_12414, i32* %r5.global-to-local, align 4
  %v3_12424 = call i32 @function_12db8(i32 %v3_12414, i32 ptrtoint (i32* @global_var_13838.352 to i32), i32 4)
  store i8 4, i8* bitcast (i32* @global_var_1c288.353 to i8*), align 4
  %v0_12434 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12434, i32* @global_var_1c284.354, align 4
  %v0_12438 = load i32, i32* %r6.global-to-local, align 4
  %v1_12438 = trunc i32 %v0_12438 to i8
  store i8 %v1_12438, i8* bitcast (i32* @global_var_1c289.355 to i8*), align 4
  %v1_1243c = call i32* @malloc(i32 14)
  %v3_1243c = ptrtoint i32* %v1_1243c to i32
  store i32 %v3_1243c, i32* %r5.global-to-local, align 4
  %v3_1244c = call i32 @function_12db8(i32 %v3_1243c, i32 ptrtoint (i32* @global_var_13840.357 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1c290.358 to i8*), align 4
  %v0_1245c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1245c, i32* @global_var_1c28c.359, align 4
  %v0_12460 = load i32, i32* %r6.global-to-local, align 4
  %v1_12460 = trunc i32 %v0_12460 to i8
  store i8 %v1_12460, i8* bitcast (i32* @global_var_1c291.360 to i8*), align 4
  %v1_12464 = call i32* @malloc(i32 6)
  %v3_12464 = ptrtoint i32* %v1_12464 to i32
  store i32 6, i32* %r8.global-to-local, align 4
  store i32 %v3_12464, i32* %r5.global-to-local, align 4
  %v3_12478 = call i32 @function_12db8(i32 %v3_12464, i32 ptrtoint (i32* @global_var_13850.362 to i32), i32 6)
  %v0_12480 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12480, i32* @global_var_1c294.363, align 4
  store i8 6, i8* bitcast (i32* @global_var_1c298.364 to i8*), align 4
  %v0_12488 = load i32, i32* %r6.global-to-local, align 4
  %v1_12488 = trunc i32 %v0_12488 to i8
  store i8 %v1_12488, i8* bitcast (i32* @global_var_1c299.365 to i8*), align 4
  %v1_1248c = call i32* @malloc(i32 8)
  %v3_1248c = ptrtoint i32* %v1_1248c to i32
  store i32 8, i32* %sb.global-to-local, align 4
  store i32 %v3_1248c, i32* %r5.global-to-local, align 4
  %v3_124a0 = call i32 @function_12db8(i32 %v3_1248c, i32 ptrtoint (i32* @global_var_13858.367 to i32), i32 8)
  %v0_124a4 = load i32, i32* %r7.global-to-local, align 4
  %v0_124a8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_124a8, i32* @global_var_1c29c.368, align 4
  store i8 8, i8* bitcast (i32* @global_var_1c2a0.369 to i8*), align 4
  %v0_124b0 = load i32, i32* %r6.global-to-local, align 4
  %v1_124b0 = trunc i32 %v0_124b0 to i8
  store i8 %v1_124b0, i8* bitcast (i32* @global_var_1c2a1.370 to i8*), align 4
  %v1_124b4 = call i32* @malloc(i32 %v0_124a4)
  %v3_124b4 = ptrtoint i32* %v1_124b4 to i32
  %v0_124b8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_124b4, i32* %r5.global-to-local, align 4
  %v3_124c4 = call i32 @function_12db8(i32 %v3_124b4, i32 ptrtoint (i32* @global_var_13864.372 to i32), i32 %v0_124b8)
  %v0_124cc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_124cc, i32* @global_var_1c2a4.373, align 4
  %v0_124d0 = load i32, i32* %r7.global-to-local, align 4
  %v1_124d0 = trunc i32 %v0_124d0 to i8
  store i8 %v1_124d0, i8* bitcast (i32* @global_var_1c2a8.374 to i8*), align 4
  %v0_124d4 = load i32, i32* %r6.global-to-local, align 4
  %v1_124d4 = trunc i32 %v0_124d4 to i8
  store i8 %v1_124d4, i8* bitcast (i32* @global_var_1c2a9.375 to i8*), align 4
  %v1_124d8 = call i32* @malloc(i32 16)
  %v3_124d8 = ptrtoint i32* %v1_124d8 to i32
  store i32 %v3_124d8, i32* %r5.global-to-local, align 4
  %v3_124e8 = call i32 @function_12db8(i32 %v3_124d8, i32 ptrtoint (i32* @global_var_1386c.377 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1c2b0.378 to i8*), align 4
  %v0_124f8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_124f8, i32* @global_var_1c2ac.379, align 4
  %v0_124fc = load i32, i32* %r6.global-to-local, align 4
  %v1_124fc = trunc i32 %v0_124fc to i8
  store i8 %v1_124fc, i8* bitcast (i32* @global_var_1c2b1.380 to i8*), align 4
  %v1_12500 = call i32* @malloc(i32 14)
  %v3_12500 = ptrtoint i32* %v1_12500 to i32
  store i32 %v3_12500, i32* %r5.global-to-local, align 4
  %v3_12510 = call i32 @function_12db8(i32 %v3_12500, i32 ptrtoint (i32* @global_var_13880.382 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1c2b8.383 to i8*), align 4
  %v0_12520 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12520, i32* @global_var_1c2b4.384, align 4
  %v0_12524 = load i32, i32* %r6.global-to-local, align 4
  %v1_12524 = trunc i32 %v0_12524 to i8
  store i8 %v1_12524, i8* bitcast (i32* @global_var_1c2b9.385 to i8*), align 4
  %v1_12528 = call i32* @malloc(i32 9)
  %v3_12528 = ptrtoint i32* %v1_12528 to i32
  store i32 9, i32* %fp.global-to-local, align 4
  store i32 %v3_12528, i32* %r5.global-to-local, align 4
  %v3_1253c = call i32 @function_12db8(i32 %v3_12528, i32 ptrtoint (i32* @global_var_13890.387 to i32), i32 9)
  %v0_12544 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12544, i32* @global_var_1c2bc.388, align 4
  store i8 9, i8* bitcast (i32* @global_var_1c2c0.389 to i8*), align 4
  %v0_1254c = load i32, i32* %r6.global-to-local, align 4
  %v1_1254c = trunc i32 %v0_1254c to i8
  store i8 %v1_1254c, i8* bitcast (i32* @global_var_1c2c1.390 to i8*), align 4
  %v1_12550 = call i32* @malloc(i32 19)
  %v3_12550 = ptrtoint i32* %v1_12550 to i32
  store i32 %v3_12550, i32* %r5.global-to-local, align 4
  %v3_12560 = call i32 @function_12db8(i32 %v3_12550, i32 ptrtoint (i32* @global_var_1389c.392 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1c2c8.393 to i8*), align 4
  %v0_12570 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12570, i32* @global_var_1c2c4.394, align 4
  %v0_12574 = load i32, i32* %r6.global-to-local, align 4
  %v1_12574 = trunc i32 %v0_12574 to i8
  store i8 %v1_12574, i8* bitcast (i32* @global_var_1c2c9.395 to i8*), align 4
  %v1_12578 = call i32* @malloc(i32 23)
  %v3_12578 = ptrtoint i32* %v1_12578 to i32
  store i32 23, i32* %sl.global-to-local, align 4
  store i32 %v3_12578, i32* %r5.global-to-local, align 4
  %v3_1258c = call i32 @function_12db8(i32 %v3_12578, i32 ptrtoint (i32* @global_var_138b0.397 to i32), i32 23)
  %v0_12590 = load i32, i32* %sb.global-to-local, align 4
  %v0_12594 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12594, i32* @global_var_1c2cc.398, align 4
  store i8 23, i8* bitcast (i32* @global_var_1c2d0.399 to i8*), align 4
  %v0_1259c = load i32, i32* %r6.global-to-local, align 4
  %v1_1259c = trunc i32 %v0_1259c to i8
  store i8 %v1_1259c, i8* bitcast (i32* @global_var_1c2d1.400 to i8*), align 4
  %v1_125a0 = call i32* @malloc(i32 %v0_12590)
  %v3_125a0 = ptrtoint i32* %v1_125a0 to i32
  %v0_125a8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v3_125a0, i32* %r5.global-to-local, align 4
  %v4_125b0 = call i32 @function_12db8(i32 %v3_125a0, i32 ptrtoint ([9 x i8]* @global_var_138c8.402 to i32), i32 %v0_125a8)
  %v0_125b8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_125b8, i32* @global_var_1c2d4.403, align 4
  %v1_125bc = trunc i32 %v0_125a8 to i8
  store i8 %v1_125bc, i8* bitcast (i32* @global_var_1c2d8.404 to i8*), align 4
  %v0_125c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_125c0 = trunc i32 %v0_125c0 to i8
  store i8 %v1_125c0, i8* bitcast (i32* @global_var_1c2d9.405 to i8*), align 4
  %v1_125c4 = call i32* @malloc(i32 14)
  %v3_125c4 = ptrtoint i32* %v1_125c4 to i32
  store i32 %v3_125c4, i32* %r5.global-to-local, align 4
  %v3_125d4 = call i32 @function_12db8(i32 %v3_125c4, i32 ptrtoint (i32* @global_var_138d4.407 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1c2e0.408 to i8*), align 4
  %v0_125e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_125e4, i32* @global_var_1c2dc.409, align 4
  %v0_125e8 = load i32, i32* %r6.global-to-local, align 4
  %v1_125e8 = trunc i32 %v0_125e8 to i8
  store i8 %v1_125e8, i8* bitcast (i32* @global_var_1c2e1.410 to i8*), align 4
  %v1_125ec = call i32* @malloc(i32 19)
  %v3_125ec = ptrtoint i32* %v1_125ec to i32
  store i32 %v3_125ec, i32* %r5.global-to-local, align 4
  %v3_125fc = call i32 @function_12db8(i32 %v3_125ec, i32 ptrtoint (i32* @global_var_138e4.412 to i32), i32 19)
  %v0_12604 = load i32, i32* %sl.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1c2e8.413 to i8*), align 4
  %v0_1260c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1260c, i32* @global_var_1c2e4.414, align 4
  %v0_12610 = load i32, i32* %r6.global-to-local, align 4
  %v1_12610 = trunc i32 %v0_12610 to i8
  store i8 %v1_12610, i8* bitcast (i32* @global_var_1c2e9.415 to i8*), align 4
  %v1_12614 = call i32* @malloc(i32 %v0_12604)
  %v3_12614 = ptrtoint i32* %v1_12614 to i32
  %v0_1261c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_12614, i32* %r5.global-to-local, align 4
  %v3_12624 = call i32 @function_12db8(i32 %v3_12614, i32 ptrtoint (i32* @global_var_138f8.417 to i32), i32 %v0_1261c)
  %v0_1262c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1262c, i32* @global_var_1c2ec.418, align 4
  %v1_12630 = trunc i32 %v0_1261c to i8
  store i8 %v1_12630, i8* bitcast (i32* @global_var_1c2f0.419 to i8*), align 4
  %v0_12634 = load i32, i32* %r6.global-to-local, align 4
  %v1_12634 = trunc i32 %v0_12634 to i8
  store i8 %v1_12634, i8* bitcast (i32* @global_var_1c2f1.420 to i8*), align 4
  %v1_12638 = call i32* @malloc(i32 24)
  %v3_12638 = ptrtoint i32* %v1_12638 to i32
  store i32 %v3_12638, i32* %r5.global-to-local, align 4
  %v3_12648 = call i32 @function_12db8(i32 %v3_12638, i32 ptrtoint (i32* @global_var_13910.422 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1c2f8.423 to i8*), align 4
  %v0_12658 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12658, i32* @global_var_1c2f4.424, align 4
  %v0_1265c = load i32, i32* %r6.global-to-local, align 4
  %v1_1265c = trunc i32 %v0_1265c to i8
  store i8 %v1_1265c, i8* bitcast (i32* @global_var_1c2f9.425 to i8*), align 4
  %v1_12660 = call i32* @malloc(i32 15)
  %v3_12660 = ptrtoint i32* %v1_12660 to i32
  store i32 %v3_12660, i32* %r5.global-to-local, align 4
  %v3_12670 = call i32 @function_12db8(i32 %v3_12660, i32 ptrtoint (i32* @global_var_1392c.427 to i32), i32 15)
  %v0_12678 = load i32, i32* %r8.global-to-local, align 4
  store i8 15, i8* bitcast (i32* @global_var_1c300.428 to i8*), align 4
  %v0_12680 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12680, i32* @global_var_1c2fc.429, align 4
  %v0_12684 = load i32, i32* %r6.global-to-local, align 4
  %v1_12684 = trunc i32 %v0_12684 to i8
  store i8 %v1_12684, i8* bitcast (i32* @global_var_1c301.430 to i8*), align 4
  %v1_12688 = call i32* @malloc(i32 %v0_12678)
  %v3_12688 = ptrtoint i32* %v1_12688 to i32
  %v0_1268c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_12688, i32* %r5.global-to-local, align 4
  %v4_12698 = call i32 @function_12db8(i32 %v3_12688, i32 ptrtoint ([7 x i8]* @global_var_1393c.432 to i32), i32 %v0_1268c)
  %v0_1269c = load i32, i32* %r7.global-to-local, align 4
  %v0_126a0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_126a0, i32* @global_var_1c304.433, align 4
  %v1_126a4 = trunc i32 %v0_1268c to i8
  store i8 %v1_126a4, i8* bitcast (i32* @global_var_1c308.434 to i8*), align 4
  %v0_126a8 = load i32, i32* %r6.global-to-local, align 4
  %v1_126a8 = trunc i32 %v0_126a8 to i8
  store i8 %v1_126a8, i8* bitcast (i32* @global_var_1c309.435 to i8*), align 4
  %v1_126ac = call i32* @malloc(i32 %v0_1269c)
  %v3_126ac = ptrtoint i32* %v1_126ac to i32
  %v0_126b0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_126ac, i32* %r5.global-to-local, align 4
  %v4_126bc = call i32 @function_12db8(i32 %v3_126ac, i32 ptrtoint ([8 x i8]* @global_var_13944.437 to i32), i32 %v0_126b0)
  %v0_126c0 = load i32, i32* %r7.global-to-local, align 4
  %v0_126c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_126c4, i32* @global_var_1c30c.438, align 4
  %v1_126c8 = trunc i32 %v0_126c0 to i8
  store i8 %v1_126c8, i8* bitcast (i32* @global_var_1c310.439 to i8*), align 4
  %v0_126cc = load i32, i32* %r6.global-to-local, align 4
  %v1_126cc = trunc i32 %v0_126cc to i8
  store i8 %v1_126cc, i8* bitcast (i32* @global_var_1c311.440 to i8*), align 4
  %v1_126d0 = call i32* @malloc(i32 %v0_126c0)
  %v3_126d0 = ptrtoint i32* %v1_126d0 to i32
  %v0_126d4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_126d0, i32* %r5.global-to-local, align 4
  %v4_126e0 = call i32 @function_12db8(i32 %v3_126d0, i32 ptrtoint ([8 x i8]* @global_var_1394c.442 to i32), i32 %v0_126d4)
  %v0_126e8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_126e8, i32* @global_var_1c314.443, align 4
  %v0_126ec = load i32, i32* %r7.global-to-local, align 4
  %v1_126ec = trunc i32 %v0_126ec to i8
  store i8 %v1_126ec, i8* bitcast (i32* @global_var_1c318.444 to i8*), align 4
  %v0_126f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_126f0 = trunc i32 %v0_126f0 to i8
  store i8 %v1_126f0, i8* bitcast (i32* @global_var_1c319.445 to i8*), align 4
  %v1_126f4 = call i32* @malloc(i32 3)
  %v3_126f4 = ptrtoint i32* %v1_126f4 to i32
  store i32 %v3_126f4, i32* %r5.global-to-local, align 4
  %v4_12704 = call i32 @function_12db8(i32 %v3_126f4, i32 ptrtoint ([4 x i8]* @global_var_13954.447 to i32), i32 3)
  %v0_1270c = load i32, i32* %sl.global-to-local, align 4
  store i8 3, i8* bitcast (i32* @global_var_1c320.448 to i8*), align 4
  %v0_12714 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12714, i32* @global_var_1c31c.449, align 4
  %v0_12718 = load i32, i32* %r6.global-to-local, align 4
  %v1_12718 = trunc i32 %v0_12718 to i8
  store i8 %v1_12718, i8* bitcast (i32* @global_var_1c321.450 to i8*), align 4
  %v1_1271c = call i32* @malloc(i32 %v0_1270c)
  %v3_1271c = ptrtoint i32* %v1_1271c to i32
  %v0_12724 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_1271c, i32* %r5.global-to-local, align 4
  %v3_1272c = call i32 @function_12db8(i32 %v3_1271c, i32 ptrtoint (i32* @global_var_13958.452 to i32), i32 %v0_12724)
  %v0_12734 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12734, i32* @global_var_1c324.453, align 4
  %v1_12738 = trunc i32 %v0_12724 to i8
  store i8 %v1_12738, i8* bitcast (i32* @global_var_1c328.454 to i8*), align 4
  %v0_1273c = load i32, i32* %r6.global-to-local, align 4
  %v1_1273c = trunc i32 %v0_1273c to i8
  store i8 %v1_1273c, i8* bitcast (i32* @global_var_1c329.455 to i8*), align 4
  %v1_12740 = call i32* @malloc(i32 28)
  %v3_12740 = ptrtoint i32* %v1_12740 to i32
  store i32 %v3_12740, i32* %r5.global-to-local, align 4
  %v3_12750 = call i32 @function_12db8(i32 %v3_12740, i32 ptrtoint (i32* @global_var_13970.457 to i32), i32 28)
  %v0_12758 = load i32, i32* %fp.global-to-local, align 4
  store i8 28, i8* bitcast (i32* @global_var_1c330.458 to i8*), align 4
  %v0_12760 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12760, i32* @global_var_1c32c.459, align 4
  %v0_12764 = load i32, i32* %r6.global-to-local, align 4
  %v1_12764 = trunc i32 %v0_12764 to i8
  store i8 %v1_12764, i8* bitcast (i32* @global_var_1c331.460 to i8*), align 4
  %v1_12768 = call i32* @malloc(i32 %v0_12758)
  %v3_12768 = ptrtoint i32* %v1_12768 to i32
  %v0_1276c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_12768, i32* %r5.global-to-local, align 4
  %v4_12778 = call i32 @function_12db8(i32 %v3_12768, i32 ptrtoint ([10 x i8]* @global_var_13990.462 to i32), i32 %v0_1276c)
  %v0_1277c = load i32, i32* %sb.global-to-local, align 4
  %v0_12780 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12780, i32* @global_var_1c334.463, align 4
  %v1_12784 = trunc i32 %v0_1276c to i8
  store i8 %v1_12784, i8* bitcast (i32* @global_var_1c338.464 to i8*), align 4
  %v0_12788 = load i32, i32* %r6.global-to-local, align 4
  %v1_12788 = trunc i32 %v0_12788 to i8
  store i8 %v1_12788, i8* bitcast (i32* @global_var_1c339.465 to i8*), align 4
  %v1_1278c = call i32* @malloc(i32 %v0_1277c)
  %v3_1278c = ptrtoint i32* %v1_1278c to i32
  %v0_12794 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v3_1278c, i32* %r5.global-to-local, align 4
  %v4_1279c = call i32 @function_12db8(i32 %v3_1278c, i32 ptrtoint ([9 x i8]* @global_var_138c8.402 to i32), i32 %v0_12794)
  %v0_127a4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_127a4, i32* @global_var_1c33c.466, align 4
  %v1_127a8 = trunc i32 %v0_12794 to i8
  store i8 %v1_127a8, i8* bitcast (i32* @global_var_1c340.467 to i8*), align 4
  %v0_127ac = load i32, i32* %r6.global-to-local, align 4
  %v1_127ac = trunc i32 %v0_127ac to i8
  store i8 %v1_127ac, i8* bitcast (i32* @global_var_1c341.468 to i8*), align 4
  %v1_127b0 = call i32* @malloc(i32 5)
  %v3_127b0 = ptrtoint i32* %v1_127b0 to i32
  store i32 %v3_127b0, i32* %r5.global-to-local, align 4
  %v4_127c0 = call i32 @function_12db8(i32 %v3_127b0, i32 ptrtoint ([6 x i8]* @global_var_1399c.470 to i32), i32 5)
  %v0_127c8 = load i32, i32* %r8.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1c348.471 to i8*), align 4
  %v0_127d0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_127d0, i32* @global_var_1c344.472, align 4
  %v0_127d4 = load i32, i32* %r6.global-to-local, align 4
  %v1_127d4 = trunc i32 %v0_127d4 to i8
  store i8 %v1_127d4, i8* bitcast (i32* @global_var_1c349.473 to i8*), align 4
  %v1_127d8 = call i32* @malloc(i32 %v0_127c8)
  %v3_127d8 = ptrtoint i32* %v1_127d8 to i32
  %v0_127dc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_127d8, i32* %r5.global-to-local, align 4
  %v4_127e8 = call i32 @function_12db8(i32 %v3_127d8, i32 ptrtoint ([7 x i8]* @global_var_139a4.475 to i32), i32 %v0_127dc)
  %v0_127f0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_127f0, i32* @global_var_1c34c.476, align 4
  %v1_127f4 = trunc i32 %v0_127dc to i8
  store i8 %v1_127f4, i8* bitcast (i32* @global_var_1c350.477 to i8*), align 4
  %v0_127f8 = load i32, i32* %r6.global-to-local, align 4
  %v1_127f8 = trunc i32 %v0_127f8 to i8
  store i8 %v1_127f8, i8* bitcast (i32* @global_var_1c351.478 to i8*), align 4
  %v1_127fc = call i32* @malloc(i32 16)
  %v3_127fc = ptrtoint i32* %v1_127fc to i32
  store i32 %v3_127fc, i32* %r5.global-to-local, align 4
  %v3_1280c = call i32 @function_12db8(i32 %v3_127fc, i32 ptrtoint (i32* @global_var_139ac.480 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1c358.481 to i8*), align 4
  %v0_1281c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1281c, i32* @global_var_1c354.482, align 4
  %v0_12820 = load i32, i32* %r6.global-to-local, align 4
  %v1_12820 = trunc i32 %v0_12820 to i8
  store i8 %v1_12820, i8* bitcast (i32* @global_var_1c359.483 to i8*), align 4
  %v1_12824 = call i32* @malloc(i32 21)
  %v3_12824 = ptrtoint i32* %v1_12824 to i32
  store i32 21, i32* %r5.global-to-local, align 4
  store i32 %v3_12824, i32* %r7.global-to-local, align 4
  %v3_12838 = call i32 @function_12db8(i32 %v3_12824, i32 ptrtoint (i32* @global_var_139c0.485 to i32), i32 21)
  %v0_1283c = load i32, i32* %r5.global-to-local, align 4
  %v0_12840 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12840, i32* @global_var_1c35c.486, align 4
  %v1_12844 = trunc i32 %v0_1283c to i8
  store i8 %v1_12844, i8* bitcast (i32* @global_var_1c360.487 to i8*), align 4
  %v0_12848 = load i32, i32* %r6.global-to-local, align 4
  %v1_12848 = trunc i32 %v0_12848 to i8
  store i8 %v1_12848, i8* bitcast (i32* @global_var_1c361.488 to i8*), align 4
  %v1_1284c = call i32* @malloc(i32 %v0_1283c)
  %v3_1284c = ptrtoint i32* %v1_1284c to i32
  %v0_12850 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_1284c, i32* %r7.global-to-local, align 4
  %v3_1285c = call i32 @function_12db8(i32 %v3_1284c, i32 ptrtoint (i32* @global_var_139d8.490 to i32), i32 %v0_12850)
  %v0_12864 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12864, i32* @global_var_1c364.491, align 4
  %v0_12868 = load i32, i32* %r5.global-to-local, align 4
  %v1_12868 = trunc i32 %v0_12868 to i8
  store i8 %v1_12868, i8* bitcast (i32* @global_var_1c368.492 to i8*), align 4
  %v0_1286c = load i32, i32* %r6.global-to-local, align 4
  %v1_1286c = trunc i32 %v0_1286c to i8
  store i8 %v1_1286c, i8* bitcast (i32* @global_var_1c369.493 to i8*), align 4
  %v1_12870 = call i32* @malloc(i32 17)
  %v3_12870 = ptrtoint i32* %v1_12870 to i32
  store i32 %v3_12870, i32* %r5.global-to-local, align 4
  %v3_12880 = call i32 @function_12db8(i32 %v3_12870, i32 ptrtoint (i32* @global_var_139f0.495 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1c370.496 to i8*), align 4
  %v0_12890 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12890, i32* @global_var_1c36c.497, align 4
  %v0_12894 = load i32, i32* %r6.global-to-local, align 4
  %v1_12894 = trunc i32 %v0_12894 to i8
  store i8 %v1_12894, i8* bitcast (i32* @global_var_1c371.498 to i8*), align 4
  %v1_12898 = call i32* @malloc(i32 11)
  %v2_12898 = ptrtoint i32* %v1_12898 to i32
  store i32 %v2_12898, i32* %r5.global-to-local, align 4
  %v0_128a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_128a8 = add i32 %v0_128a8, 5
  store i32 %v1_128a8, i32* %r8.global-to-local, align 4
  %v4_128ac = call i32 @function_12db8(i32 %v2_12898, i32 ptrtoint ([12 x i8]* @global_var_13a04.500 to i32), i32 11)
  %v0_128b0 = load i32, i32* %sl.global-to-local, align 4
  %v0_128b4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_128b4, i32* @global_var_1c374.501, align 4
  %v1_128b8 = trunc i32 %v1_128a8 to i8
  store i8 %v1_128b8, i8* bitcast (i32* @global_var_1c378.502 to i8*), align 4
  %v0_128bc = load i32, i32* %r6.global-to-local, align 4
  %v1_128bc = trunc i32 %v0_128bc to i8
  store i8 %v1_128bc, i8* bitcast (i32* @global_var_1c379.503 to i8*), align 4
  %v1_128c0 = call i32* @malloc(i32 %v0_128b0)
  %v3_128c0 = ptrtoint i32* %v1_128c0 to i32
  %v0_128c8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_128c0, i32* %r5.global-to-local, align 4
  %v3_128d0 = call i32 @function_12db8(i32 %v3_128c0, i32 ptrtoint (i32* @global_var_13a10.505 to i32), i32 %v0_128c8)
  %v0_128d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_128d8, i32* @global_var_1c37c.506, align 4
  %v1_128dc = trunc i32 %v0_128c8 to i8
  store i8 %v1_128dc, i8* bitcast (i32* @global_var_1c380.507 to i8*), align 4
  %v0_128e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_128e0 = trunc i32 %v0_128e0 to i8
  store i8 %v1_128e0, i8* bitcast (i32* @global_var_1c381.508 to i8*), align 4
  %v1_128e4 = call i32* @malloc(i32 83)
  %v3_128e4 = ptrtoint i32* %v1_128e4 to i32
  store i32 %v3_128e4, i32* %r5.global-to-local, align 4
  %v3_128f4 = call i32 @function_12db8(i32 %v3_128e4, i32 ptrtoint (i32* @global_var_13d34.510 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1c388.511 to i8*), align 4
  %v0_12904 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12904, i32* @global_var_1c384.512, align 4
  %v0_12908 = load i32, i32* %r6.global-to-local, align 4
  %v1_12908 = trunc i32 %v0_12908 to i8
  store i8 %v1_12908, i8* bitcast (i32* @global_var_1c389.513 to i8*), align 4
  %v1_1290c = call i32* @malloc(i32 32)
  %v3_1290c = ptrtoint i32* %v1_1290c to i32
  store i32 %v3_1290c, i32* %r5.global-to-local, align 4
  %v3_1291c = call i32 @function_12db8(i32 %v3_1290c, i32 ptrtoint (i32* @global_var_13d88.515 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1c390.516 to i8*), align 4
  %v0_1292c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1292c, i32* @global_var_1c38c.517, align 4
  %v0_12930 = load i32, i32* %r6.global-to-local, align 4
  %v1_12930 = trunc i32 %v0_12930 to i8
  store i8 %v1_12930, i8* bitcast (i32* @global_var_1c391.518 to i8*), align 4
  %v1_12934 = call i32* @malloc(i32 48)
  %v3_12934 = ptrtoint i32* %v1_12934 to i32
  store i32 %v3_12934, i32* %r5.global-to-local, align 4
  %v3_12944 = call i32 @function_12db8(i32 %v3_12934, i32 ptrtoint (i32* @global_var_13a28.520 to i32), i32 48)
  store i8 48, i8* bitcast (i32* @global_var_1c398.521 to i8*), align 4
  %v0_12954 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12954, i32* @global_var_1c394.522, align 4
  %v0_12958 = load i32, i32* %r6.global-to-local, align 4
  %v1_12958 = trunc i32 %v0_12958 to i8
  store i8 %v1_12958, i8* bitcast (i32* @global_var_1c399.523 to i8*), align 4
  %v1_1295c = call i32* @malloc(i32 12)
  %v3_1295c = ptrtoint i32* %v1_1295c to i32
  store i32 12, i32* %r7.global-to-local, align 4
  store i32 %v3_1295c, i32* %r5.global-to-local, align 4
  %v3_12970 = call i32 @function_12db8(i32 %v3_1295c, i32 ptrtoint (i32* @global_var_13a5c.525 to i32), i32 12)
  %v0_12974 = load i32, i32* %fp.global-to-local, align 4
  %v0_12978 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12978, i32* @global_var_1c39c.526, align 4
  %v0_1297c = load i32, i32* %r7.global-to-local, align 4
  %v1_1297c = trunc i32 %v0_1297c to i8
  store i8 %v1_1297c, i8* bitcast (i32* @global_var_1c3a0.527 to i8*), align 4
  %v0_12980 = load i32, i32* %r6.global-to-local, align 4
  %v1_12980 = trunc i32 %v0_12980 to i8
  store i8 %v1_12980, i8* bitcast (i32* @global_var_1c3a1.528 to i8*), align 4
  %v1_12984 = call i32* @malloc(i32 %v0_12974)
  %v3_12984 = ptrtoint i32* %v1_12984 to i32
  %v0_12988 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_12984, i32* %r5.global-to-local, align 4
  %v3_12994 = call i32 @function_12db8(i32 %v3_12984, i32 ptrtoint (i32* @global_var_13a6c.530 to i32), i32 %v0_12988)
  %v0_1299c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1299c, i32* @global_var_1c3a4.531, align 4
  %v1_129a0 = trunc i32 %v0_12988 to i8
  store i8 %v1_129a0, i8* bitcast (i32* @global_var_1c3a8.532 to i8*), align 4
  %v0_129a4 = load i32, i32* %r6.global-to-local, align 4
  %v1_129a4 = trunc i32 %v0_129a4 to i8
  store i8 %v1_129a4, i8* bitcast (i32* @global_var_1c3a9.533 to i8*), align 4
  %v1_129a8 = call i32* @malloc(i32 10)
  %v2_129a8 = ptrtoint i32* %v1_129a8 to i32
  store i32 %v2_129a8, i32* %r5.global-to-local, align 4
  %v0_129b8 = load i32, i32* %fp.global-to-local, align 4
  %v1_129b8 = add i32 %v0_129b8, 1
  store i32 %v1_129b8, i32* %fp.global-to-local, align 4
  %v3_129bc = call i32 @function_12db8(i32 %v2_129a8, i32 ptrtoint (i32* @global_var_13a78.535 to i32), i32 10)
  %v0_129c0 = load i32, i32* %r7.global-to-local, align 4
  %v0_129c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_129c4, i32* @global_var_1c3ac.536, align 4
  %v1_129c8 = trunc i32 %v1_129b8 to i8
  store i8 %v1_129c8, i8* bitcast (i32* @global_var_1c3b0.537 to i8*), align 4
  %v0_129cc = load i32, i32* %r6.global-to-local, align 4
  %v1_129cc = trunc i32 %v0_129cc to i8
  store i8 %v1_129cc, i8* bitcast (i32* @global_var_1c3b1.538 to i8*), align 4
  %v1_129d0 = call i32* @malloc(i32 %v0_129c0)
  %v3_129d0 = ptrtoint i32* %v1_129d0 to i32
  %v0_129d4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_129d0, i32* %r5.global-to-local, align 4
  %v3_129e0 = call i32 @function_12db8(i32 %v3_129d0, i32 ptrtoint (i32* @global_var_13a84.540 to i32), i32 %v0_129d4)
  %v0_129e8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_129e8, i32* @global_var_1c3b4.541, align 4
  %v0_129ec = load i32, i32* %r7.global-to-local, align 4
  %v1_129ec = trunc i32 %v0_129ec to i8
  store i8 %v1_129ec, i8* bitcast (i32* @global_var_1c3b8.542 to i8*), align 4
  %v0_129f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_129f0 = trunc i32 %v0_129f0 to i8
  store i8 %v1_129f0, i8* bitcast (i32* @global_var_1c3b9.543 to i8*), align 4
  %v1_129f4 = call i32* @malloc(i32 16)
  %v3_129f4 = ptrtoint i32* %v1_129f4 to i32
  store i32 %v3_129f4, i32* %r5.global-to-local, align 4
  %v3_12a04 = call i32 @function_12db8(i32 %v3_129f4, i32 ptrtoint (i32* @global_var_13a94.545 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1c3c0.546 to i8*), align 4
  %v0_12a14 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12a14, i32* @global_var_1c3bc.547, align 4
  %v0_12a18 = load i32, i32* %r6.global-to-local, align 4
  %v1_12a18 = trunc i32 %v0_12a18 to i8
  store i8 %v1_12a18, i8* bitcast (i32* @global_var_1c3c1.548 to i8*), align 4
  %v1_12a1c = call i32* @malloc(i32 19)
  %v3_12a1c = ptrtoint i32* %v1_12a1c to i32
  store i32 %v3_12a1c, i32* %r5.global-to-local, align 4
  %v3_12a2c = call i32 @function_12db8(i32 %v3_12a1c, i32 ptrtoint (i32* @global_var_13aa8.550 to i32), i32 19)
  %v0_12a34 = load i32, i32* %sb.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1c3c8.551 to i8*), align 4
  %v0_12a3c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12a3c, i32* @global_var_1c3c4.552, align 4
  %v0_12a40 = load i32, i32* %r6.global-to-local, align 4
  %v1_12a40 = trunc i32 %v0_12a40 to i8
  store i8 %v1_12a40, i8* bitcast (i32* @global_var_1c3c9.553 to i8*), align 4
  %v1_12a44 = call i32* @malloc(i32 %v0_12a34)
  %v3_12a44 = ptrtoint i32* %v1_12a44 to i32
  %v0_12a4c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v3_12a44, i32* %r5.global-to-local, align 4
  %v4_12a54 = call i32 @function_12db8(i32 %v3_12a44, i32 ptrtoint ([9 x i8]* @global_var_13abc.555 to i32), i32 %v0_12a4c)
  %v0_12a58 = load i32, i32* %r8.global-to-local, align 4
  %v0_12a5c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12a5c, i32* @global_var_1c3cc.556, align 4
  %v1_12a60 = trunc i32 %v0_12a4c to i8
  store i8 %v1_12a60, i8* bitcast (i32* @global_var_1c3d0.557 to i8*), align 4
  %v0_12a64 = load i32, i32* %r6.global-to-local, align 4
  %v1_12a64 = trunc i32 %v0_12a64 to i8
  store i8 %v1_12a64, i8* bitcast (i32* @global_var_1c3d1.558 to i8*), align 4
  %v1_12a68 = call i32* @malloc(i32 %v0_12a58)
  %v3_12a68 = ptrtoint i32* %v1_12a68 to i32
  %v0_12a70 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_12a68, i32* %r5.global-to-local, align 4
  %v3_12a78 = call i32 @function_12db8(i32 %v3_12a68, i32 ptrtoint (i32* @global_var_13a1c.560 to i32), i32 %v0_12a70)
  %v0_12a7c = load i32, i32* %r7.global-to-local, align 4
  %v0_12a80 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12a80, i32* @global_var_1c3d4.561, align 4
  %v1_12a84 = trunc i32 %v0_12a70 to i8
  store i8 %v1_12a84, i8* bitcast (i32* @global_var_1c3d8.562 to i8*), align 4
  %v0_12a88 = load i32, i32* %r6.global-to-local, align 4
  %v1_12a88 = trunc i32 %v0_12a88 to i8
  store i8 %v1_12a88, i8* bitcast (i32* @global_var_1c3d9.563 to i8*), align 4
  %v1_12a8c = call i32* @malloc(i32 %v0_12a7c)
  %v3_12a8c = ptrtoint i32* %v1_12a8c to i32
  %v0_12a90 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_12a8c, i32* %r5.global-to-local, align 4
  %v3_12a9c = call i32 @function_12db8(i32 %v3_12a8c, i32 ptrtoint (i32* @global_var_13ac8.565 to i32), i32 %v0_12a90)
  %v0_12aa4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12aa4, i32* @global_var_1c3dc.566, align 4
  %v0_12aa8 = load i32, i32* %r7.global-to-local, align 4
  %v1_12aa8 = trunc i32 %v0_12aa8 to i8
  store i8 %v1_12aa8, i8* bitcast (i32* @global_var_1c3e0.567 to i8*), align 4
  %v0_12aac = load i32, i32* %r6.global-to-local, align 4
  %v1_12aac = trunc i32 %v0_12aac to i8
  store i8 %v1_12aac, i8* bitcast (i32* @global_var_1c3e1.568 to i8*), align 4
  %v1_12ab0 = call i32* @malloc(i32 18)
  %v3_12ab0 = ptrtoint i32* %v1_12ab0 to i32
  store i32 %v3_12ab0, i32* %r5.global-to-local, align 4
  %v3_12ac0 = call i32 @function_12db8(i32 %v3_12ab0, i32 ptrtoint (i32* @global_var_13ad8.570 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1c3e8.571 to i8*), align 4
  %v0_12ad0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12ad0, i32* @global_var_1c3e4.572, align 4
  %v0_12ad4 = load i32, i32* %r6.global-to-local, align 4
  %v1_12ad4 = trunc i32 %v0_12ad4 to i8
  store i8 %v1_12ad4, i8* bitcast (i32* @global_var_1c3e9.573 to i8*), align 4
  %v1_12ad8 = call i32* @malloc(i32 25)
  %v3_12ad8 = ptrtoint i32* %v1_12ad8 to i32
  store i32 %v3_12ad8, i32* %r5.global-to-local, align 4
  %v3_12ae8 = call i32 @function_12db8(i32 %v3_12ad8, i32 ptrtoint (i32* @global_var_13aec.575 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1c3f0.576 to i8*), align 4
  %v0_12af8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12af8, i32* @global_var_1c3ec.577, align 4
  %v0_12afc = load i32, i32* %r6.global-to-local, align 4
  %v1_12afc = trunc i32 %v0_12afc to i8
  store i8 %v1_12afc, i8* bitcast (i32* @global_var_1c3f1.578 to i8*), align 4
  %v1_12b00 = call i32* @malloc(i32 115)
  %v3_12b00 = ptrtoint i32* %v1_12b00 to i32
  store i32 115, i32* %r5.global-to-local, align 4
  store i32 %v3_12b00, i32* %r7.global-to-local, align 4
  %v3_12b14 = call i32 @function_12db8(i32 %v3_12b00, i32 ptrtoint (i32* @global_var_13b08.580 to i32), i32 115)
  %v0_12b18 = load i32, i32* %r5.global-to-local, align 4
  %v0_12b1c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12b1c, i32* @global_var_1c3f4.581, align 4
  %v1_12b20 = trunc i32 %v0_12b18 to i8
  store i8 %v1_12b20, i8* bitcast (i32* @global_var_1c3f8.582 to i8*), align 4
  %v0_12b24 = load i32, i32* %r6.global-to-local, align 4
  %v1_12b24 = trunc i32 %v0_12b24 to i8
  store i8 %v1_12b24, i8* bitcast (i32* @global_var_1c3f9.583 to i8*), align 4
  %v1_12b28 = call i32* @malloc(i32 %v0_12b18)
  %v3_12b28 = ptrtoint i32* %v1_12b28 to i32
  %v0_12b2c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_12b28, i32* %r7.global-to-local, align 4
  %v3_12b38 = call i32 @function_12db8(i32 %v3_12b28, i32 ptrtoint (i32* @global_var_13b7c.585 to i32), i32 %v0_12b2c)
  %v0_12b40 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12b40, i32* @global_var_1c3fc.586, align 4
  %v0_12b44 = load i32, i32* %r5.global-to-local, align 4
  %v1_12b44 = trunc i32 %v0_12b44 to i8
  store i8 %v1_12b44, i8* bitcast (i32* @global_var_1c400.587 to i8*), align 4
  %v0_12b48 = load i32, i32* %r6.global-to-local, align 4
  %v1_12b48 = trunc i32 %v0_12b48 to i8
  store i8 %v1_12b48, i8* bitcast (i32* @global_var_1c401.588 to i8*), align 4
  %v1_12b4c = call i32* @malloc(i32 79)
  %v3_12b4c = ptrtoint i32* %v1_12b4c to i32
  store i32 %v3_12b4c, i32* %r5.global-to-local, align 4
  %v3_12b5c = call i32 @function_12db8(i32 %v3_12b4c, i32 ptrtoint (i32* @global_var_13bf0.590 to i32), i32 79)
  store i8 79, i8* bitcast (i32* @global_var_1c408.591 to i8*), align 4
  %v0_12b6c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12b6c, i32* @global_var_1c404.592, align 4
  %v0_12b70 = load i32, i32* %r6.global-to-local, align 4
  %v1_12b70 = trunc i32 %v0_12b70 to i8
  store i8 %v1_12b70, i8* bitcast (i32* @global_var_1c409.593 to i8*), align 4
  %v1_12b74 = call i32* @malloc(i32 114)
  %v3_12b74 = ptrtoint i32* %v1_12b74 to i32
  store i32 114, i32* %r5.global-to-local, align 4
  store i32 %v3_12b74, i32* %r7.global-to-local, align 4
  %v3_12b88 = call i32 @function_12db8(i32 %v3_12b74, i32 ptrtoint (i32* @global_var_13c40.595 to i32), i32 114)
  %v0_12b8c = load i32, i32* %r5.global-to-local, align 4
  %v0_12b90 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12b90, i32* @global_var_1c40c.596, align 4
  %v1_12b94 = trunc i32 %v0_12b8c to i8
  store i8 %v1_12b94, i8* bitcast (i32* @global_var_1c410.597 to i8*), align 4
  %v0_12b98 = load i32, i32* %r6.global-to-local, align 4
  %v1_12b98 = trunc i32 %v0_12b98 to i8
  store i8 %v1_12b98, i8* bitcast (i32* @global_var_1c411.598 to i8*), align 4
  %v1_12b9c = call i32* @malloc(i32 %v0_12b8c)
  %v3_12b9c = ptrtoint i32* %v1_12b9c to i32
  %v0_12ba0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_12b9c, i32* %r7.global-to-local, align 4
  %v3_12bac = call i32 @function_12db8(i32 %v3_12b9c, i32 ptrtoint (i32* @global_var_13cb4.600 to i32), i32 %v0_12ba0)
  %v0_12bb4 = load i32, i32* %r5.global-to-local, align 4
  %v1_12bb4 = trunc i32 %v0_12bb4 to i8
  store i8 %v1_12bb4, i8* bitcast (i32* @global_var_1c418.601 to i8*), align 4
  %v0_12bb8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_12bb8, i32* @global_var_1c414.602, align 4
  %v0_12bbc = load i32, i32* %r6.global-to-local, align 4
  %v1_12bbc = trunc i32 %v0_12bbc to i8
  store i8 %v1_12bbc, i8* bitcast (i32* @global_var_1c419.603 to i8*), align 4
  %v1_12bc0 = call i32* @malloc(i32 14)
  %v3_12bc0 = ptrtoint i32* %v1_12bc0 to i32
  store i32 %v3_12bc0, i32* %r5.global-to-local, align 4
  %v3_12bd0 = call i32 @function_12db8(i32 %v3_12bc0, i32 ptrtoint (i32* @global_var_138d4.407 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1c420.604 to i8*), align 4
  %v0_12be0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12be0, i32* @global_var_1c41c.605, align 4
  %v0_12be4 = load i32, i32* %r6.global-to-local, align 4
  %v1_12be4 = trunc i32 %v0_12be4 to i8
  store i8 %v1_12be4, i8* bitcast (i32* @global_var_1c421.606 to i8*), align 4
  %v1_12be8 = call i32* @malloc(i32 19)
  %v3_12be8 = ptrtoint i32* %v1_12be8 to i32
  store i32 %v3_12be8, i32* %r5.global-to-local, align 4
  %v3_12bf8 = call i32 @function_12db8(i32 %v3_12be8, i32 ptrtoint (i32* @global_var_138e4.412 to i32), i32 19)
  %v0_12c00 = load i32, i32* %sl.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1c428.607 to i8*), align 4
  %v0_12c08 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12c08, i32* @global_var_1c424.608, align 4
  %v0_12c0c = load i32, i32* %r6.global-to-local, align 4
  %v1_12c0c = trunc i32 %v0_12c0c to i8
  store i8 %v1_12c0c, i8* bitcast (i32* @global_var_1c429.609 to i8*), align 4
  %v1_12c10 = call i32* @malloc(i32 %v0_12c00)
  %v3_12c10 = ptrtoint i32* %v1_12c10 to i32
  %v0_12c18 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_12c10, i32* %r5.global-to-local, align 4
  %v3_12c20 = call i32 @function_12db8(i32 %v3_12c10, i32 ptrtoint (i32* @global_var_138b0.397 to i32), i32 %v0_12c18)
  %v0_12c24 = load i32, i32* %fp.global-to-local, align 4
  %v0_12c28 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12c28, i32* @global_var_1c42c.610, align 4
  %v1_12c2c = trunc i32 %v0_12c18 to i8
  store i8 %v1_12c2c, i8* bitcast (i32* @global_var_1c430.611 to i8*), align 4
  %v0_12c30 = load i32, i32* %r6.global-to-local, align 4
  %v1_12c30 = trunc i32 %v0_12c30 to i8
  store i8 %v1_12c30, i8* bitcast (i32* @global_var_1c431.612 to i8*), align 4
  %v1_12c34 = call i32* @malloc(i32 %v0_12c24)
  %v3_12c34 = ptrtoint i32* %v1_12c34 to i32
  %v0_12c3c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_12c34, i32* %r5.global-to-local, align 4
  %v4_12c44 = call i32 @function_12db8(i32 %v3_12c34, i32 ptrtoint ([11 x i8]* @global_var_13d28.614 to i32), i32 %v0_12c3c)
  %v0_12c48 = load i32, i32* %r6.global-to-local, align 4
  %v1_12c48 = trunc i32 %v0_12c48 to i8
  %v2_12c48 = load i32, i32* %r4.global-to-local, align 4
  %v3_12c48 = add i32 %v2_12c48, 501
  %v4_12c48 = inttoptr i32 %v3_12c48 to i8*
  store i8 %v1_12c48, i8* %v4_12c48, align 1
  %v0_12c4c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12c4c, i32* @global_var_1c434.615, align 4
  %v0_12c50 = load i32, i32* %fp.global-to-local, align 4
  %v1_12c50 = trunc i32 %v0_12c50 to i8
  store i8 %v1_12c50, i8* bitcast (i32* @global_var_1c438.616 to i8*), align 4
  %v2_12c54 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12c54, i32* @r4, align 4
  ret i32 %v4_12c44

; uselistorder directives
  uselistorder i32 %v3_12c34, { 1, 0 }
  uselistorder i32 %v3_12c10, { 1, 0 }
  uselistorder i32 %v3_12b9c, { 1, 0 }
  uselistorder i32 %v3_12b74, { 1, 0 }
  uselistorder i32 %v3_12b28, { 1, 0 }
  uselistorder i32 %v3_12b00, { 1, 0 }
  uselistorder i32 %v3_12a8c, { 1, 0 }
  uselistorder i32 %v3_12a68, { 1, 0 }
  uselistorder i32 %v3_12a44, { 1, 0 }
  uselistorder i32 %v3_129d0, { 1, 0 }
  uselistorder i32 %v3_12984, { 1, 0 }
  uselistorder i32 %v3_1295c, { 1, 0 }
  uselistorder i32 %v3_128c0, { 1, 0 }
  uselistorder i32 %v3_1284c, { 1, 0 }
  uselistorder i32 %v3_12824, { 1, 0 }
  uselistorder i32 %v3_127d8, { 1, 0 }
  uselistorder i32 %v3_1278c, { 1, 0 }
  uselistorder i32 %v3_12768, { 1, 0 }
  uselistorder i32 %v3_1271c, { 1, 0 }
  uselistorder i32 %v3_126d0, { 1, 0 }
  uselistorder i32 %v3_126ac, { 1, 0 }
  uselistorder i32 %v3_12688, { 1, 0 }
  uselistorder i32 %v3_12614, { 1, 0 }
  uselistorder i32 %v3_125a0, { 1, 0 }
  uselistorder i32 %v3_12578, { 1, 0 }
  uselistorder i32 %v3_12528, { 1, 0 }
  uselistorder i32 %v3_124b4, { 1, 0 }
  uselistorder i32 %v3_1248c, { 1, 0 }
  uselistorder i32 %v3_12464, { 1, 0 }
  uselistorder i32 %v3_123c4, { 1, 0 }
  uselistorder i32 %v3_12378, { 1, 0 }
  uselistorder i32 %v2_12348, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 3, 5, 4, 7, 6, 8 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 5, 32, 33, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9 }
  uselistorder i32 114, { 1, 2, 0 }
  uselistorder i32 79, { 1, 0 }
  uselistorder i32 115, { 1, 2, 0 }
  uselistorder i32 18, { 3, 0, 6, 4, 7, 8, 5, 9, 1, 10, 2, 11 }
  uselistorder i32 12, { 9, 31, 5, 17, 18, 32, 33, 28, 25, 34, 19, 16, 20, 21, 22, 23, 24, 26, 29, 30, 27, 35, 36, 37, 4, 38, 39, 41, 42, 43, 10, 44, 11, 45, 12, 46, 13, 47, 14, 49, 3, 48, 40, 77, 50, 15, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 6, 62, 63, 64, 65, 66, 7, 67, 68, 69, 70, 71, 72, 8, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 0, 1, 2 }
  uselistorder i32 83, { 1, 0 }
  uselistorder i32 11, { 0, 1, 8, 9, 10, 11, 4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 5, 29, 30, 31, 3, 32, 33, 34, 35, 36, 37, 38, 39, 40, 6, 41, 42, 43, 7, 44 }
  uselistorder i8 17, { 1, 0, 2, 3 }
  uselistorder i32 17, { 2, 0, 11, 3, 12, 4, 13, 5, 14, 6, 15, 7, 16, 8, 9, 17, 18, 1, 19, 20, 21, 10, 22, 23, 24, 25, 26 }
  uselistorder i32 21, { 1, 5, 0, 4, 6, 7, 3, 8, 2, 9 }
  uselistorder i32 28, { 3, 2, 4, 8, 5, 9, 6, 10, 11, 12, 13, 14, 15, 16, 17, 0, 7, 19, 18, 20, 21, 22, 23, 24, 25, 26, 1 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i32 23, { 1, 4, 0, 5, 6, 2, 3, 7 }
  uselistorder i32 19, { 5, 1, 6, 2, 7, 3, 8, 4, 0, 10, 11, 9, 12 }
  uselistorder i8 16, { 15, 16, 17, 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i8 6, { 0, 6, 5, 7, 8, 1, 9, 10, 2, 3, 4 }
  uselistorder i32 6, { 12, 33, 2, 13, 32, 0, 34, 14, 35, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 3, 26, 36, 37, 38, 4, 39, 40, 41, 42, 5, 43, 44, 45, 46, 6, 47, 7, 48, 49, 27, 50, 8, 51, 52, 53, 28, 54, 9, 55, 56, 29, 57, 58, 59, 60, 61, 30, 62, 10, 63, 64, 65, 66, 67, 68, 31, 69, 11, 70, 75, 71, 72, 73, 74 }
  uselistorder i32 14, { 6, 0, 7, 1, 8, 2, 9, 3, 13, 10, 14, 11, 15, 12, 16, 17, 4, 18, 19, 20, 21, 5, 22 }
  uselistorder i8 4, { 3, 4, 2, 0, 1 }
  uselistorder i8 5, { 10, 11, 12, 0, 1, 13, 2, 3, 4, 5, 6, 7, 8, 14, 9 }
  uselistorder i32 5, { 27, 14, 4, 15, 5, 2, 16, 26, 3, 0, 17, 28, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 6, 33, 34, 35, 36, 7, 37, 38, 39, 40, 41, 42, 43, 44, 8, 45, 46, 24, 47, 9, 48, 49, 50, 10, 51, 52, 53, 54, 11, 55, 56, 57, 58, 59, 60, 61, 12, 62, 63, 64, 65, 66, 67, 68, 13, 69, 25, 74, 70, 71, 1, 72, 73 }
  uselistorder i32 7, { 9, 26, 3, 10, 25, 2, 11, 27, 12, 28, 13, 29, 14, 15, 16, 30, 31, 32, 17, 33, 34, 35, 36, 4, 37, 38, 39, 40, 18, 41, 5, 42, 19, 43, 44, 6, 45, 46, 7, 47, 48, 49, 50, 51, 20, 52, 53, 54, 55, 56, 21, 57, 0, 22, 59, 1, 23, 60, 61, 24, 8, 62, 58 }
  uselistorder i32 29, { 1, 0, 2, 8, 3, 9, 4, 10, 11, 12, 6, 5, 7 }
  uselistorder i32 (i32, i32, i32)* @function_12db8, { 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1c244.319 to i32), { 5, 0, 1, 2, 3, 4 }
  uselistorder i32* (i32)* @malloc, { 45, 44, 18, 10, 53, 29, 46, 21, 27, 19, 61, 50, 0, 1, 3, 4, 52, 12, 51, 32, 11, 20, 34, 54, 13, 17, 2, 24, 5, 41, 7, 43, 35, 23, 6, 9, 60, 47, 42, 8, 39, 58, 26, 57, 33, 22, 62, 48, 49, 56, 16, 15, 36, 63, 40, 14, 37, 38, 31, 28, 30, 59, 25, 55, 64 }
}

define i32 @function_12d3c(i8* %arg1) local_unnamed_addr {
dec_label_pc_12d3c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_12d40 = load i8, i8* %arg1, align 1
  %v4_12d40 = zext i8 %v3_12d40 to i32
  %v2_12d44 = icmp eq i8 %v3_12d40, 0
  br i1 %v2_12d44, label %dec_label_pc_12d60, label %bb

dec_label_pc_12d60:                               ; preds = %dec_label_pc_12d50, %dec_label_pc_12d3c
  %merge = phi i32 [ %v4_12d40, %dec_label_pc_12d3c ], [ %v1_12d50, %dec_label_pc_12d50 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_12d3c
  br label %dec_label_pc_12d50

dec_label_pc_12d50:                               ; preds = %dec_label_pc_12d50, %bb
  %v0_12d50 = phi i32 [ %v1_12d50, %dec_label_pc_12d50 ], [ 0, %bb ]
  %v1_12d50 = add i32 %v0_12d50, 1
  %v2_12d54 = add i32 %v1_12d50, %tmp
  %v3_12d54 = inttoptr i32 %v2_12d54 to i8*
  %v4_12d54 = load i8, i8* %v3_12d54, align 1
  %v2_12d58 = icmp eq i8 %v4_12d54, 0
  br i1 %v2_12d58, label %dec_label_pc_12d60, label %dec_label_pc_12d50

; uselistorder directives
  uselistorder i32 %v1_12d50, { 1, 0, 2 }
}

define i32 @function_12d64(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d64:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12d64 = load i8, i8* %arg1, align 1
  %v3_12d64 = zext i8 %v2_12d64 to i32
  %v2_12d68 = icmp eq i8 %v2_12d64, 0
  br i1 %v2_12d68, label %dec_label_pc_12dac, label %dec_label_pc_12d70

dec_label_pc_12d70:                               ; preds = %dec_label_pc_12d64
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d74

dec_label_pc_12d74:                               ; preds = %dec_label_pc_12d74, %dec_label_pc_12d70
  %v0_12d74 = phi i32 [ %v1_12d74, %dec_label_pc_12d74 ], [ 0, %dec_label_pc_12d70 ]
  %v1_12d74 = add i32 %v0_12d74, 1
  store i32 %v1_12d74, i32* %ip.global-to-local, align 4
  %v2_12d78 = add i32 %v1_12d74, %tmp
  %v3_12d78 = inttoptr i32 %v2_12d78 to i8*
  %v4_12d78 = load i8, i8* %v3_12d78, align 1
  %v2_12d7c = icmp eq i8 %v4_12d78, 0
  br i1 %v2_12d7c, label %dec_label_pc_12d84, label %dec_label_pc_12d74

dec_label_pc_12d84:                               ; preds = %dec_label_pc_12d74
  %v7_12d84 = icmp eq i32 %v0_12d74, -2
  br i1 %v7_12d84, label %dec_label_pc_12da4, label %dec_label_pc_12d90.preheader

dec_label_pc_12d90.preheader:                     ; preds = %dec_label_pc_12d84, %dec_label_pc_12dac
  %storemerge = phi i32 [ %v3_12d64, %dec_label_pc_12dac ], [ %v1_12d74, %dec_label_pc_12d84 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_12d9c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12d90

dec_label_pc_12d90:                               ; preds = %dec_label_pc_12d90.dec_label_pc_12d90_crit_edge, %dec_label_pc_12d90.preheader
  %v2_12d9c = phi i32 [ %v5_12d9c, %dec_label_pc_12d90.dec_label_pc_12d90_crit_edge ], [ %v2_12d9c.pre, %dec_label_pc_12d90.preheader ]
  %v0_12d94 = phi i32 [ %v0_12d94.pre, %dec_label_pc_12d90.dec_label_pc_12d90_crit_edge ], [ %tmp, %dec_label_pc_12d90.preheader ]
  %v0_12d90 = phi i32 [ %v0_12d90.pre, %dec_label_pc_12d90.dec_label_pc_12d90_crit_edge ], [ %storemerge, %dec_label_pc_12d90.preheader ]
  %v1_12d90 = add i32 %v0_12d90, -1
  store i32 %v1_12d90, i32* %r2.global-to-local, align 4
  %v1_12d94 = inttoptr i32 %v0_12d94 to i8*
  %v2_12d94 = load i8, i8* %v1_12d94, align 1
  %v5_12d94 = add i32 %v0_12d94, 1
  store i32 %v5_12d94, i32* %r1.global-to-local, align 4
  %v3_12d98 = icmp eq i32 %v0_12d90, 0
  %v3_12d9c = inttoptr i32 %v2_12d9c to i8*
  store i8 %v2_12d94, i8* %v3_12d9c, align 1
  %v4_12d9c = load i32, i32* @r0, align 4
  %v5_12d9c = add i32 %v4_12d9c, 1
  store i32 %v5_12d9c, i32* @r0, align 4
  br i1 %v3_12d98, label %dec_label_pc_12da4.loopexit, label %dec_label_pc_12d90.dec_label_pc_12d90_crit_edge

dec_label_pc_12d90.dec_label_pc_12d90_crit_edge:  ; preds = %dec_label_pc_12d90
  %v0_12d90.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_12d94.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12d90

dec_label_pc_12da4.loopexit:                      ; preds = %dec_label_pc_12d90
  %v0_12da4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12da4

dec_label_pc_12da4:                               ; preds = %dec_label_pc_12da4.loopexit, %dec_label_pc_12d84
  %v0_12da4 = phi i32 [ %v0_12da4.pre, %dec_label_pc_12da4.loopexit ], [ %v1_12d74, %dec_label_pc_12d84 ]
  ret i32 %v0_12da4

dec_label_pc_12dac:                               ; preds = %dec_label_pc_12d64
  store i32 %v3_12d64, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12d90.preheader

; uselistorder directives
  uselistorder i32 %v5_12d9c, { 1, 0 }
  uselistorder i32 %v0_12d94, { 1, 0 }
  uselistorder i32 %v1_12d74, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_12d64, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12d90.preheader, { 1, 0 }
}

define i32 @function_12db8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12db8:
  %ip.global-to-local = alloca i32, align 4
  %v2_12db8 = icmp eq i32 %arg3, 0
  br i1 %v2_12db8, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12dc4, %dec_label_pc_12db8
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12db8
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12dc4

dec_label_pc_12dc4:                               ; preds = %dec_label_pc_12dc4, %bb
  %v0_12dc4 = phi i32 [ %v1_12dcc, %dec_label_pc_12dc4 ], [ 0, %bb ]
  %v2_12dc4 = add i32 %v0_12dc4, %arg2
  %v3_12dc4 = inttoptr i32 %v2_12dc4 to i8*
  %v4_12dc4 = load i8, i8* %v3_12dc4, align 1
  %v4_12dc8 = add i32 %v0_12dc4, %arg1
  %v5_12dc8 = inttoptr i32 %v4_12dc8 to i8*
  store i8 %v4_12dc4, i8* %v5_12dc8, align 1
  %v0_12dcc = load i32, i32* %ip.global-to-local, align 4
  %v1_12dcc = add i32 %v0_12dcc, 1
  store i32 %v1_12dcc, i32* %ip.global-to-local, align 4
  %v9_12dd0 = icmp eq i32 %v1_12dcc, %arg3
  br i1 %v9_12dd0, label %.loopexit, label %dec_label_pc_12dc4

; uselistorder directives
  uselistorder i32 %v1_12dcc, { 1, 2, 0 }
}

define i32 @function_12ddc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12ddc:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_12ddc = icmp eq i32 %arg2, 0
  br i1 %v2_12ddc, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12dec, %dec_label_pc_12ddc
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12ddc
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12dec

dec_label_pc_12dec:                               ; preds = %dec_label_pc_12dec.dec_label_pc_12dec_crit_edge, %bb
  %v2_12dec = phi i32 [ %v1_12df0, %dec_label_pc_12dec.dec_label_pc_12dec_crit_edge ], [ 0, %bb ]
  %v0_12dec.off0 = phi i8 [ %extract.t, %dec_label_pc_12dec.dec_label_pc_12dec_crit_edge ], [ 0, %bb ]
  %v4_12dec = add i32 %v2_12dec, %arg1
  %v5_12dec = inttoptr i32 %v4_12dec to i8*
  store i8 %v0_12dec.off0, i8* %v5_12dec, align 1
  %v0_12df0 = load i32, i32* %r3.global-to-local, align 4
  %v1_12df0 = add i32 %v0_12df0, 1
  store i32 %v1_12df0, i32* %r3.global-to-local, align 4
  %v9_12df4 = icmp eq i32 %v1_12df0, %arg2
  br i1 %v9_12df4, label %.loopexit, label %dec_label_pc_12dec.dec_label_pc_12dec_crit_edge

dec_label_pc_12dec.dec_label_pc_12dec_crit_edge:  ; preds = %dec_label_pc_12dec
  %v0_12dec.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_12dec.pre to i8
  br label %dec_label_pc_12dec

; uselistorder directives
  uselistorder i32 %v1_12df0, { 1, 2, 0 }
}

define i32 @function_12e00(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12e00:
  %v7_12e14 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_12e14, label %dec_label_pc_12e18, label %dec_label_pc_12e20

dec_label_pc_12e18:                               ; preds = %dec_label_pc_12e34, %dec_label_pc_12e00, %dec_label_pc_12e20
  ret i32 -1

dec_label_pc_12e20:                               ; preds = %dec_label_pc_12e00
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_12e18, label %dec_label_pc_12e28

dec_label_pc_12e28:                               ; preds = %dec_label_pc_12e20
  br label %dec_label_pc_12e40

dec_label_pc_12e34:                               ; preds = %dec_label_pc_12e58, %dec_label_pc_12e40
  %v1_12e34 = add i32 %v0_12e60, 1
  %v9_12e38 = icmp eq i32 %v1_12e34, %arg2
  br i1 %v9_12e38, label %dec_label_pc_12e18, label %dec_label_pc_12e40

dec_label_pc_12e40:                               ; preds = %dec_label_pc_12e34, %dec_label_pc_12e28
  %v0_12e60 = phi i32 [ %v1_12e34, %dec_label_pc_12e34 ], [ 0, %dec_label_pc_12e28 ]
  %v0_12e4c = phi i32 [ %v1_12e4c., %dec_label_pc_12e34 ], [ 0, %dec_label_pc_12e28 ]
  %v2_12e40 = add i32 %v0_12e4c, %arg3
  %v3_12e40 = inttoptr i32 %v2_12e40 to i8*
  %v4_12e40 = load i8, i8* %v3_12e40, align 1
  %v2_12e44 = add i32 %v0_12e60, %arg1
  %v3_12e44 = inttoptr i32 %v2_12e44 to i8*
  %v4_12e44 = load i8, i8* %v3_12e44, align 1
  %v9_12e48 = icmp eq i8 %v4_12e44, %v4_12e40
  %v1_12e4c = add i32 %v0_12e4c, 1
  %v1_12e4c. = select i1 %v9_12e48, i32 %v1_12e4c, i32 0
  br i1 %v9_12e48, label %dec_label_pc_12e58, label %dec_label_pc_12e34

dec_label_pc_12e58:                               ; preds = %dec_label_pc_12e40
  %v9_12e58 = icmp eq i32 %v1_12e4c., %arg4
  br i1 %v9_12e58, label %dec_label_pc_12e60, label %dec_label_pc_12e34

dec_label_pc_12e60:                               ; preds = %dec_label_pc_12e58
  %v1_12e60 = add i32 %v0_12e60, 1
  ret i32 %v1_12e60

; uselistorder directives
  uselistorder i1 %v9_12e48, { 1, 0 }
  uselistorder i32 %v0_12e4c, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12e18, { 0, 2, 1 }
}

define i32 @function_12e68(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12e68:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_12e74

dec_label_pc_12e74:                               ; preds = %.thread, %dec_label_pc_12e8c, %bb, %dec_label_pc_12e68
  %v0_12e74 = phi i32 [ %tmp, %dec_label_pc_12e68 ], [ %v5_12e74, %bb ], [ %v5_12e74, %dec_label_pc_12e8c ], [ %v5_12e74, %.thread ]
  %v1_12e74 = inttoptr i32 %v0_12e74 to i8*
  %v2_12e74 = load i8, i8* %v1_12e74, align 1
  %v5_12e74 = add i32 %v0_12e74, 1
  %v7_12e7c = icmp eq i8 %v2_12e74, 9
  br i1 %v7_12e7c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12e74
  br label %dec_label_pc_12e74

bb:                                               ; preds = %dec_label_pc_12e74
  %v8_12e80 = icmp eq i8 %v2_12e74, 32
  br i1 %v8_12e80, label %dec_label_pc_12e74, label %dec_label_pc_12e8c

dec_label_pc_12e8c:                               ; preds = %bb
  %v7_12e8c = icmp eq i8 %v2_12e74, 10
  br i1 %v7_12e8c, label %dec_label_pc_12e74, label %dec_label_pc_12e94

dec_label_pc_12e94:                               ; preds = %dec_label_pc_12e8c
  %v7_12e94 = icmp eq i8 %v2_12e74, 45
  br i1 %v7_12e94, label %dec_label_pc_12f74, label %dec_label_pc_12e9c

dec_label_pc_12e9c:                               ; preds = %dec_label_pc_12e94
  %v7_12e9c = icmp eq i8 %v2_12e74, 43
  br i1 %v7_12e9c, label %bb54, label %dec_label_pc_12eac

bb54:                                             ; preds = %dec_label_pc_12e9c
  %v2_12ea0 = inttoptr i32 %v5_12e74 to i8*
  %v3_12ea0 = load i8, i8* %v2_12ea0, align 1
  %v6_12ea0 = add i32 %v0_12e74, 2
  br label %dec_label_pc_12eac

dec_label_pc_12eac:                               ; preds = %bb54, %dec_label_pc_12e9c, %dec_label_pc_12f74
  %v0_12f5842 = phi i32 [ %v5_12f74, %dec_label_pc_12f74 ], [ %v5_12e74, %dec_label_pc_12e9c ], [ %v6_12ea0, %bb54 ]
  %v0_12ed417.in = phi i8 [ %v2_12f74, %dec_label_pc_12f74 ], [ %v2_12e74, %dec_label_pc_12e9c ], [ %v3_12ea0, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_12f74 ], [ 2147483647, %dec_label_pc_12e9c ], [ 2147483647, %bb54 ]
  %v0_12f84 = phi i32 [ 1, %dec_label_pc_12f74 ], [ 0, %dec_label_pc_12e9c ], [ 0, %bb54 ]
  %v2_12eb4 = urem i32 %storemerge1, %arg2
  %v2_12ec4 = udiv i32 %storemerge1, %arg2
  store i32 %v2_12ec4, i32* @lr, align 4
  br label %dec_label_pc_12ed4

dec_label_pc_12ed4:                               ; preds = %.thread8, %dec_label_pc_12eac
  %v0_12f58 = phi i32 [ %v5_12f58, %.thread8 ], [ %v0_12f5842, %dec_label_pc_12eac ]
  %v2_12f5011 = phi i32 [ %v1_12f6c29, %.thread8 ], [ 0, %dec_label_pc_12eac ]
  %v1_12f2c = phi i32 [ %v0_12f6027, %.thread8 ], [ 0, %dec_label_pc_12eac ]
  %v1_12f14.in = phi i8 [ %v2_12f58, %.thread8 ], [ %v0_12ed417.in, %dec_label_pc_12eac ]
  %v1_12f14 = zext i8 %v1_12f14.in to i32
  %v1_12ed4 = urem i32 %v1_12f14, 256
  %v1_12ed8 = add nsw i32 %v1_12ed4, -48
  %v1_12ee0 = add nsw i32 %v1_12ed4, -97
  %v1_12ee4 = add nsw i32 %v1_12f14, -48
  %v1_12ee8 = add nsw i32 %v1_12ed4, -65
  %tmp77 = icmp ult i32 %v1_12ed8, 10
  br i1 %tmp77, label %dec_label_pc_12f18, label %dec_label_pc_12ef0

dec_label_pc_12ef0:                               ; preds = %dec_label_pc_12ed4
  %v2_12ef0 = icmp ugt i32 %v1_12ee8, 24
  %v7_12ef0 = icmp eq i32 %v1_12ee8, 25
  %v2_12ef4 = xor i1 %v7_12ef0, true
  %v3_12ef4 = and i1 %v2_12ef0, %v2_12ef4
  br i1 %v3_12ef4, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_12ef0
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_12ef0, %bb55
  %v0_12f0821 = phi i32 [ %v1_12ee4, %dec_label_pc_12ef0 ], [ 0, %bb55 ]
  %v2_12ef8 = xor i1 %v2_12ef0, true
  %v3_12ef8 = or i1 %v7_12ef0, %v2_12ef8
  br i1 %v3_12ef8, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_12f08 = phi i32 [ %v0_12f0821, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_12ef4, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_12f00 = icmp ugt i32 %v1_12ee0, 24
  %v11_12f00 = icmp eq i32 %v1_12ee0, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_12f04 = phi i1 [ %v7_12ef0, %bb58 ], [ %v11_12f00, %bb59 ]
  %v0_12f04 = phi i1 [ %v2_12ef0, %bb58 ], [ %v6_12f00, %bb59 ]
  %v2_12f04 = xor i1 %v1_12f04, true
  %v3_12f04 = and i1 %v0_12f04, %v2_12f04
  br i1 %v3_12f04, label %dec_label_pc_12f60, label %dec_label_pc_12f08

dec_label_pc_12f08:                               ; preds = %bb60
  %v2_12f08 = icmp eq i32 %v0_12f08, 0
  %. = select i1 %v2_12f08, i32 87, i32 55
  %v2_12f14 = sub nsw i32 %v1_12f14, %.
  br label %dec_label_pc_12f18

dec_label_pc_12f18:                               ; preds = %dec_label_pc_12ed4, %dec_label_pc_12f08
  %v0_12f2c37 = phi i32 [ %v1_12ee8, %dec_label_pc_12ed4 ], [ %., %dec_label_pc_12f08 ]
  %v3_12f5012 = phi i32 [ %v1_12ee4, %dec_label_pc_12ed4 ], [ %v2_12f14, %dec_label_pc_12f08 ]
  %v6_12f1c = icmp slt i32 %v3_12f5012, %arg2
  br i1 %v6_12f1c, label %dec_label_pc_12f20, label %dec_label_pc_12f60

dec_label_pc_12f20:                               ; preds = %dec_label_pc_12f18
  %v3_12f20 = icmp uge i32 %v2_12f5011, %v2_12ec4
  %v9_12f20 = icmp eq i32 %v2_12f5011, %v2_12ec4
  %v2_12f24 = xor i1 %v3_12f20, true
  %v3_12f24 = or i1 %v9_12f20, %v2_12f24
  br i1 %v3_12f24, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_12f20
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_12f20, %bb63
  %v0_12f2c36 = phi i32 [ %v0_12f2c37, %dec_label_pc_12f20 ], [ 0, %bb63 ]
  %v2_12f28 = xor i1 %v9_12f20, true
  %v3_12f28 = and i1 %v3_12f20, %v2_12f28
  br i1 %v3_12f28, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_12f2c = phi i32 [ %v0_12f2c36, %bb64 ], [ 1, %bb65 ]
  %tmp78 = icmp slt i32 %v1_12f2c, 0
  %v4_12f2c = zext i1 %tmp78 to i32
  %v5_12f2c = or i32 %v0_12f2c, %v4_12f2c
  %v7_12f2c = icmp eq i32 %v5_12f2c, 0
  br i1 %v7_12f2c, label %dec_label_pc_12f38, label %.thread8

dec_label_pc_12f38:                               ; preds = %bb66
  %v7_12f48 = icmp sgt i32 %v3_12f5012, %v2_12eb4
  br i1 %v7_12f48, label %bb69, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_12f38
  br label %bb70

bb69:                                             ; preds = %dec_label_pc_12f38
  %v2_12f4c = icmp eq i1 %v9_12f20, false
  br i1 %v2_12f4c, label %bb70, label %.thread8

bb70:                                             ; preds = %bb69, %.thread5
  %v4_12f5013 = mul i32 %v2_12f5011, %arg2
  %v5_12f5014 = add i32 %v3_12f5012, %v4_12f5013
  br label %.thread8

.thread8:                                         ; preds = %bb69, %bb66, %bb70
  %v1_12f6c29 = phi i32 [ %v2_12f5011, %bb69 ], [ %v2_12f5011, %bb66 ], [ %v5_12f5014, %bb70 ]
  %v0_12f6027 = phi i32 [ -1, %bb69 ], [ -1, %bb66 ], [ 1, %bb70 ]
  %v1_12f58 = inttoptr i32 %v0_12f58 to i8*
  %v2_12f58 = load i8, i8* %v1_12f58, align 1
  %v5_12f58 = add i32 %v0_12f58, 1
  br label %dec_label_pc_12ed4

dec_label_pc_12f60:                               ; preds = %dec_label_pc_12f18, %bb60
  %v1_12f60 = icmp slt i32 %v1_12f2c, 0
  %v2_12f84 = icmp eq i32 %v0_12f84, 0
  br i1 %v1_12f60, label %dec_label_pc_12f84, label %dec_label_pc_12f68

dec_label_pc_12f68:                               ; preds = %dec_label_pc_12f60
  br i1 %v2_12f84, label %bb72, label %bb71

bb71:                                             ; preds = %dec_label_pc_12f68
  %v2_12f6c = sub i32 0, %v2_12f5011
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_12f68, %bb71
  %v23_12f70 = phi i32 [ %v2_12f5011, %dec_label_pc_12f68 ], [ %v2_12f6c, %bb71 ]
  ret i32 %v23_12f70

dec_label_pc_12f74:                               ; preds = %dec_label_pc_12e94
  %v1_12f74 = inttoptr i32 %v5_12e74 to i8*
  %v2_12f74 = load i8, i8* %v1_12f74, align 1
  %v5_12f74 = add i32 %v0_12e74, 2
  br label %dec_label_pc_12eac

dec_label_pc_12f84:                               ; preds = %dec_label_pc_12f60
  %.76 = select i1 %v2_12f84, i32 2147483647, i32 -2147483648
  ret i32 %.76

; uselistorder directives
  uselistorder i1 %v9_12f20, { 1, 0, 2 }
  uselistorder i1 %v3_12f20, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_12ef0, { 1, 2, 0 }
  uselistorder i1 %v2_12ef0, { 1, 0, 2 }
  uselistorder i32 %v1_12ed4, { 1, 2, 0 }
  uselistorder i32 %v1_12f14, { 1, 0, 2 }
  uselistorder i32 %v1_12f2c, { 1, 0 }
  uselistorder i32 %v2_12f5011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_12f58, { 1, 0 }
  uselistorder i32 %v2_12ec4, { 1, 0, 2 }
  uselistorder i32 %storemerge1, { 1, 0 }
  uselistorder i32 %v5_12e74, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_12e74, { 0, 1, 3, 2 }
  uselistorder i32 25, { 13, 14, 1, 0, 2, 7, 3, 8, 4, 9, 6, 10, 11, 12, 5, 15, 16 }
  uselistorder i32 24, { 37, 38, 13, 10, 65, 42, 70, 43, 44, 58, 62, 40, 41, 66, 45, 46, 47, 14, 48, 15, 49, 16, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 67, 61, 68, 63, 64, 71, 72, 73, 69, 74, 75, 0, 76, 17, 18, 1, 77, 19, 20, 2, 78, 11, 79, 80, 81, 21, 22, 3, 23, 24, 82, 25, 26, 4, 12, 83, 27, 5, 6, 28, 84, 29, 7, 85, 86, 87, 30, 31, 88, 32, 89, 33, 8, 90, 34, 35, 91, 9, 39, 92, 36, 93 }
  uselistorder i8 32, { 1, 7, 2, 3, 0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i8 9, { 6, 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_12f18, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_12eac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12e74, { 1, 2, 0, 3 }
}

define i32 @function_12f94(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12f94:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_12f94 = load i32, i32* @r4, align 4
  store i32 %v3_12f94, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12fac

dec_label_pc_12fac:                               ; preds = %dec_label_pc_12fd8.dec_label_pc_12fac_crit_edge, %dec_label_pc_12f94
  %v0_12fb0 = phi i32 [ %v0_12fb0.pre, %dec_label_pc_12fd8.dec_label_pc_12fac_crit_edge ], [ %arg3, %dec_label_pc_12f94 ]
  %v0_12fac = phi i32 [ %v1_12fc4, %dec_label_pc_12fd8.dec_label_pc_12fac_crit_edge ], [ %tmp, %dec_label_pc_12f94 ]
  %v3_12fb8 = inttoptr i32 %v0_12fac to i32*
  %v4_12fb8 = call i32 @read(i32 %v0_12fb0, i32* %v3_12fb8, i32 1)
  %v7_12fbc = icmp eq i32 %v4_12fb8, 1
  %v0_12fc0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12fc4 = add i32 %v0_12fc0, 1
  store i32 %v1_12fc4, i32* %r4.global-to-local, align 4
  %v0_12fcc = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_12fbc, label %dec_label_pc_12fcc, label %dec_label_pc_12fe4

dec_label_pc_12fcc:                               ; preds = %dec_label_pc_12fac
  %v1_12fcc = add i32 %v0_12fcc, 1
  store i32 %v1_12fcc, i32* %r5.global-to-local, align 4
  %v0_12fd0 = load i32, i32* %r7.global-to-local, align 4
  %v7_12fd4 = icmp sgt i32 %v0_12fd0, %v1_12fcc
  br i1 %v7_12fd4, label %dec_label_pc_12fd8, label %dec_label_pc_12fe4

dec_label_pc_12fd8:                               ; preds = %dec_label_pc_12fcc
  %v1_12fd8 = inttoptr i32 %v0_12fc0 to i8*
  %v2_12fd8 = load i8, i8* %v1_12fd8, align 1
  %v7_12fdc = icmp eq i8 %v2_12fd8, 10
  br i1 %v7_12fdc, label %dec_label_pc_12fe4, label %dec_label_pc_12fd8.dec_label_pc_12fac_crit_edge

dec_label_pc_12fd8.dec_label_pc_12fac_crit_edge:  ; preds = %dec_label_pc_12fd8
  %v0_12fb0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12fac

dec_label_pc_12fe4:                               ; preds = %dec_label_pc_12fac, %dec_label_pc_12fd8, %dec_label_pc_12fcc
  %v0_12fe4 = phi i32 [ %v1_12fcc, %dec_label_pc_12fd8 ], [ %v1_12fcc, %dec_label_pc_12fcc ], [ %v0_12fcc, %dec_label_pc_12fac ]
  %v2_12fe4 = icmp eq i32 %v0_12fe4, 0
  %v1_12fe8 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_12fe4, i32 0, i32 %v1_12fe8
  %v2_12ff0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12ff0, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_12fc4, { 1, 0 }
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder i8 10, { 6, 0, 7, 8, 1, 2, 3, 4, 5 }
  uselistorder i32 (i32, i32*, i32)* @read, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12fe4, { 1, 2, 0 }
}

define i32 @function_12ff4() local_unnamed_addr {
dec_label_pc_12ff4:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_13004 = call i32* @__errno_location()
  store i32 0, i32* %v0_13004, align 4
  %v3_1301c = call i32 @socket(i32 2, i32 0, i32 0)
  %v7_13028 = icmp eq i32 %v3_1301c, -1
  store i32 %v3_1301c, i32* %r5.global-to-local, align 4
  %v2_13034 = load i32, i32* %r4.global-to-local, align 4
  br i1 %v7_13028, label %dec_label_pc_13084, label %dec_label_pc_13048

dec_label_pc_13048:                               ; preds = %dec_label_pc_12ff4
  %v7_13034 = shl i32 2056, %v2_13034
  %v8_13034 = or i32 %v7_13034, 2056
  %v2_12ffc = ptrtoint i32* %stack_var_-40 to i32
  %v1_13038 = inttoptr i32 %v2_13034 to %sockaddr*
  store i32 2, i32* %stack_var_-40, align 4
  %v6_13064 = call i32 @connect(i32 %v2_12ffc, %sockaddr* %v1_13038, i32 %v2_13034)
  %tmp13 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v0_13070 = load i32, i32* %r5.global-to-local, align 4
  %v6_13074 = call i32 @getsockname(i32 %v0_13070, %sockaddr* %tmp13, i32* nonnull %stack_var_-24)
  %v1_1307c = call i32 @close(i32 %v0_13070)
  br label %dec_label_pc_13084

dec_label_pc_13084:                               ; preds = %dec_label_pc_12ff4, %dec_label_pc_13048
  %v0_13084 = phi i32 [ 0, %dec_label_pc_12ff4 ], [ %v8_13034, %dec_label_pc_13048 ]
  ret i32 %v0_13084

; uselistorder directives
  uselistorder i32 %v2_13034, { 1, 0, 2 }
  uselistorder i32 %v3_1301c, { 1, 0 }
  uselistorder i32 (i32)* @close, { 4, 2, 3, 1, 7, 0, 5, 6, 10, 30, 22, 9, 8, 12, 11, 15, 14, 13, 17, 16, 27, 26, 25, 24, 23, 34, 33, 32, 31, 21, 20, 19, 18, 29, 28, 35 }
  uselistorder i32 (i32, %sockaddr*, i32)* @connect, { 1, 0, 3, 7, 6, 5, 4, 8, 2, 9 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 9, 10, 16, 18, 15, 8, 11, 17, 3, 2, 7, 6, 5, 4, 1, 0, 13, 12, 14, 19 }
  uselistorder i32* ()* @__errno_location, { 4, 3, 1, 5, 0, 2, 6, 7 }
  uselistorder label %dec_label_pc_13084, { 1, 0 }
}

define i32 @function_13090(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13090:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_13094 = load i8, i8* %tmp, align 1
  %v2_13098 = icmp eq i8 %v3_13094, 0
  br i1 %v2_13098, label %bb, label %dec_label_pc_130ac

bb:                                               ; preds = %dec_label_pc_13090
  %v4_13094 = zext i8 %v3_13094 to i32
  br label %dec_label_pc_130c0

dec_label_pc_130ac:                               ; preds = %dec_label_pc_13090
  br label %dec_label_pc_130b0

dec_label_pc_130b0:                               ; preds = %dec_label_pc_130b0, %dec_label_pc_130ac
  %v0_130b0 = phi i32 [ %v1_130b0, %dec_label_pc_130b0 ], [ 0, %dec_label_pc_130ac ]
  %v1_130b0 = add i32 %v0_130b0, 1
  %v2_130b4 = add i32 %v1_130b0, %arg2
  %v3_130b4 = inttoptr i32 %v2_130b4 to i8*
  %v4_130b4 = load i8, i8* %v3_130b4, align 1
  %v2_130b8 = icmp eq i8 %v4_130b4, 0
  br i1 %v2_130b8, label %dec_label_pc_130c0, label %dec_label_pc_130b0

dec_label_pc_130c0:                               ; preds = %dec_label_pc_130b0, %bb
  %v0_1310418 = phi i32 [ %v4_13094, %bb ], [ %v1_130b0, %dec_label_pc_130b0 ]
  %v0_130c81 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_130c81, 1
  br i1 %tmp27, label %dec_label_pc_13114, label %dec_label_pc_130d4

dec_label_pc_130d4:                               ; preds = %dec_label_pc_130c0, %dec_label_pc_130c8.backedge
  %v0_130cc.in = phi i32 [ %v0_130cc, %dec_label_pc_130c8.backedge ], [ %v0_130c81, %dec_label_pc_130c0 ]
  %v0_130f8 = phi i32 [ %v1_130f8., %dec_label_pc_130c8.backedge ], [ 0, %dec_label_pc_130c0 ]
  %v0_130d4 = phi i32 [ %v5_130d4, %dec_label_pc_130c8.backedge ], [ %tmp20, %dec_label_pc_130c0 ]
  %v0_130cc = add i32 %v0_130cc.in, -1
  %v1_130d4 = inttoptr i32 %v0_130d4 to i8*
  %v2_130d4 = load i8, i8* %v1_130d4, align 1
  %v3_130d4 = zext i8 %v2_130d4 to i32
  %v5_130d4 = add i32 %v0_130d4, 1
  %v2_130d8 = add i32 %v0_130f8, %arg2
  %v3_130d8 = inttoptr i32 %v2_130d8 to i8*
  %v4_130d8 = load i8, i8* %v3_130d8, align 1
  %v6_130d8 = zext i8 %v4_130d8 to i32
  %v1_130dc = add nsw i32 %v3_130d4, -65
  %v1_130e0 = add nsw i32 %v6_130d8, -65
  %tmp35 = icmp ult i32 %v1_130dc, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_130d4
  %v5_130e8 = or i32 %v3_130d4, 96
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_130d4, %bb28
  %v0_130f4 = phi i32 [ %v3_130d4, %dec_label_pc_130d4 ], [ %v5_130e8, %bb28 ]
  %tmp36 = icmp ult i32 %v1_130e0, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_130f0 = or i32 %v6_130d8, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_130f4 = phi i32 [ %v6_130d8, %bb29 ], [ %v5_130f0, %bb30 ]
  %v9_130f4 = icmp eq i32 %v0_130f4, %v1_130f4
  %v1_130f8 = add i32 %v0_130f8, 1
  %v1_130f8. = select i1 %v9_130f4, i32 %v1_130f8, i32 0
  br i1 %v9_130f4, label %dec_label_pc_13104, label %dec_label_pc_130c8.backedge

dec_label_pc_130c8.backedge:                      ; preds = %bb31, %dec_label_pc_13104
  %tmp32 = icmp slt i32 %v0_130cc, 1
  br i1 %tmp32, label %dec_label_pc_13114, label %dec_label_pc_130d4

dec_label_pc_13104:                               ; preds = %bb31
  %v9_13104 = icmp eq i32 %v0_1310418, %v1_130f8.
  br i1 %v9_13104, label %dec_label_pc_1310c, label %dec_label_pc_130c8.backedge

dec_label_pc_1310c:                               ; preds = %dec_label_pc_13104
  %v2_1310c = sub i32 %v5_130d4, %tmp20
  ret i32 %v2_1310c

dec_label_pc_13114:                               ; preds = %dec_label_pc_130c8.backedge, %dec_label_pc_130c0
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_130f8., { 1, 0 }
  uselistorder i32 %v0_130d4, { 1, 0 }
  uselistorder i32 %v0_130f8, { 1, 0 }
  uselistorder i8 %v3_13094, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 5, 3, 6, 4, 7, 8 }
  uselistorder i32* @r1, { 1, 16, 17, 2, 3, 4, 13, 14, 0, 5, 6, 7, 8, 9, 10, 11, 12, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder label %dec_label_pc_130c8.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_130d4, { 1, 0 }
}

define i32 @function_1311c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1311c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_1311c = load i8, i8* %arg1, align 1
  %v2_13120 = icmp eq i8 %v2_1311c, 0
  br i1 %v2_13120, label %bb, label %dec_label_pc_1312c

bb:                                               ; preds = %dec_label_pc_1311c
  %v3_1311c = zext i8 %v2_1311c to i32
  br label %dec_label_pc_13140

dec_label_pc_1312c:                               ; preds = %dec_label_pc_1311c
  br label %dec_label_pc_13130

dec_label_pc_13130:                               ; preds = %dec_label_pc_13130, %dec_label_pc_1312c
  %v0_13130 = phi i32 [ %v1_13130, %dec_label_pc_13130 ], [ 0, %dec_label_pc_1312c ]
  %v1_13130 = add i32 %v0_13130, 1
  %v2_13134 = add i32 %v1_13130, %tmp
  %v3_13134 = inttoptr i32 %v2_13134 to i8*
  %v4_13134 = load i8, i8* %v3_13134, align 1
  %v2_13138 = icmp eq i8 %v4_13134, 0
  br i1 %v2_13138, label %dec_label_pc_13140, label %dec_label_pc_13130

dec_label_pc_13140:                               ; preds = %dec_label_pc_13130, %bb
  %v0_13164 = phi i32 [ %v3_1311c, %bb ], [ %v1_13130, %dec_label_pc_13130 ]
  %v1_13140 = inttoptr i32 %arg2 to i8*
  %v2_13140 = load i8, i8* %v1_13140, align 1
  %v2_13144 = icmp eq i8 %v2_13140, 0
  br i1 %v2_13144, label %bb22, label %dec_label_pc_13150

bb22:                                             ; preds = %dec_label_pc_13140
  %v3_13140 = zext i8 %v2_13140 to i32
  br label %dec_label_pc_13164

dec_label_pc_13150:                               ; preds = %dec_label_pc_13140
  br label %dec_label_pc_13154

dec_label_pc_13154:                               ; preds = %dec_label_pc_13154, %dec_label_pc_13150
  %v0_13154 = phi i32 [ %v1_13154, %dec_label_pc_13154 ], [ 0, %dec_label_pc_13150 ]
  %v1_13154 = add i32 %v0_13154, 1
  %v2_13158 = add i32 %v1_13154, %arg2
  %v3_13158 = inttoptr i32 %v2_13158 to i8*
  %v4_13158 = load i8, i8* %v3_13158, align 1
  %v2_1315c = icmp eq i8 %v4_13158, 0
  br i1 %v2_1315c, label %dec_label_pc_13164, label %dec_label_pc_13154

dec_label_pc_13164:                               ; preds = %dec_label_pc_13154, %bb22
  %v0_131904 = phi i32 [ %v3_13140, %bb22 ], [ %v1_13154, %dec_label_pc_13154 ]
  %v9_13164 = icmp eq i32 %v0_13164, %v0_131904
  br i1 %v9_13164, label %dec_label_pc_13190.preheader, label %dec_label_pc_13170

dec_label_pc_13190.preheader:                     ; preds = %dec_label_pc_13164
  %v2_131906 = icmp eq i32 %v0_13164, 0
  br i1 %v2_131906, label %dec_label_pc_13198, label %dec_label_pc_13178

dec_label_pc_13170:                               ; preds = %dec_label_pc_13178, %dec_label_pc_13164
  ret i32 0

dec_label_pc_13178:                               ; preds = %dec_label_pc_13188, %dec_label_pc_13190.preheader
  %v0_13190.in = phi i32 [ %v0_13190, %dec_label_pc_13188 ], [ %v0_13164, %dec_label_pc_13190.preheader ]
  %v0_1318c = phi i32 [ %v1_1318c, %dec_label_pc_13188 ], [ %arg2, %dec_label_pc_13190.preheader ]
  %v0_13188 = phi i32 [ %v1_13188, %dec_label_pc_13188 ], [ %tmp, %dec_label_pc_13190.preheader ]
  %v0_13190 = add i32 %v0_13190.in, -1
  %v1_13178 = inttoptr i32 %v0_13188 to i8*
  %v2_13178 = load i8, i8* %v1_13178, align 1
  %v1_1317c = inttoptr i32 %v0_1318c to i8*
  %v2_1317c = load i8, i8* %v1_1317c, align 1
  %v9_13180 = icmp eq i8 %v2_13178, %v2_1317c
  br i1 %v9_13180, label %dec_label_pc_13188, label %dec_label_pc_13170

dec_label_pc_13188:                               ; preds = %dec_label_pc_13178
  %v1_13188 = add i32 %v0_13188, 1
  %v1_1318c = add i32 %v0_1318c, 1
  %v2_13190 = icmp eq i32 %v0_13190, 0
  br i1 %v2_13190, label %dec_label_pc_13198, label %dec_label_pc_13178

dec_label_pc_13198:                               ; preds = %dec_label_pc_13188, %dec_label_pc_13190.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_13140, { 1, 0 }
  uselistorder i8 %v2_1311c, { 1, 0 }
}

define i32 @function_131a0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_131a0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_131a4 = load i8, i8* %arg1, align 1
  %v2_131a8 = icmp eq i8 %v2_131a4, 0
  %v0_131ac = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_131a8, label %bb, label %dec_label_pc_131b8

bb:                                               ; preds = %dec_label_pc_131a0
  %v3_131a4 = zext i8 %v2_131a4 to i32
  br label %dec_label_pc_131cc

dec_label_pc_131b8:                               ; preds = %dec_label_pc_131a0
  br label %dec_label_pc_131bc

dec_label_pc_131bc:                               ; preds = %dec_label_pc_131bc, %dec_label_pc_131b8
  %v0_131bc = phi i32 [ %v1_131bc, %dec_label_pc_131bc ], [ 0, %dec_label_pc_131b8 ]
  %v1_131bc = add i32 %v0_131bc, 1
  %v2_131c0 = add i32 %v1_131bc, %tmp
  %v3_131c0 = inttoptr i32 %v2_131c0 to i8*
  %v4_131c0 = load i8, i8* %v3_131c0, align 1
  %v2_131c4 = icmp eq i8 %v4_131c0, 0
  br i1 %v2_131c4, label %dec_label_pc_131cc, label %dec_label_pc_131bc

dec_label_pc_131cc:                               ; preds = %dec_label_pc_131bc, %bb
  %v9_131f4 = phi i32 [ %v3_131a4, %bb ], [ %v1_131bc, %dec_label_pc_131bc ]
  %v0_131cc = load i32, i32* %r1.global-to-local, align 4
  %v1_131cc = inttoptr i32 %v0_131cc to i8*
  %v2_131cc = load i8, i8* %v1_131cc, align 1
  %v3_131cc = zext i8 %v2_131cc to i32
  %v2_131d0 = icmp eq i8 %v2_131cc, 0
  br i1 %v2_131d0, label %bb26, label %dec_label_pc_131dc

bb26:                                             ; preds = %dec_label_pc_131cc
  store i32 %v3_131cc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_131f0

dec_label_pc_131dc:                               ; preds = %dec_label_pc_131cc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_131e0

dec_label_pc_131e0:                               ; preds = %dec_label_pc_131e0, %dec_label_pc_131dc
  %v0_131e0 = phi i32 [ %v1_131e0, %dec_label_pc_131e0 ], [ 0, %dec_label_pc_131dc ]
  %v1_131e0 = add i32 %v0_131e0, 1
  store i32 %v1_131e0, i32* %r2.global-to-local, align 4
  %v2_131e4 = add i32 %v1_131e0, %v0_131cc
  %v3_131e4 = inttoptr i32 %v2_131e4 to i8*
  %v4_131e4 = load i8, i8* %v3_131e4, align 1
  %v2_131e8 = icmp eq i8 %v4_131e4, 0
  br i1 %v2_131e8, label %dec_label_pc_131f0, label %dec_label_pc_131e0

dec_label_pc_131f0:                               ; preds = %dec_label_pc_131e0, %bb26
  %v1_131f0 = phi i32 [ %v3_131cc, %bb26 ], [ %v1_131e0, %dec_label_pc_131e0 ]
  %v2_131f0 = sub i32 %v0_131ac, %v1_131f0
  %v4_131f0 = xor i32 %v1_131f0, %v0_131ac
  %v5_131f0 = xor i32 %v2_131f0, %v0_131ac
  %v6_131f0 = and i32 %v5_131f0, %v4_131f0
  %v7_131f4 = icmp sgt i32 %v0_131ac, %v1_131f0
  br i1 %v7_131f4, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_131f0
  %v10_131f4 = sub i32 %v0_131ac, %v9_131f4
  %v12_131f4 = xor i32 %v9_131f4, %v0_131ac
  %v13_131f4 = xor i32 %v10_131f4, %v0_131ac
  %v14_131f4 = and i32 %v13_131f4, %v12_131f4
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_131f0, %bb27
  %v2_131f8.in = phi i32 [ %v6_131f0, %dec_label_pc_131f0 ], [ %v14_131f4, %bb27 ]
  %v1_131f8.in = phi i32 [ %v2_131f0, %dec_label_pc_131f0 ], [ %v10_131f4, %bb27 ]
  %v1_131f0.pn = phi i32 [ %v1_131f0, %dec_label_pc_131f0 ], [ %v9_131f4, %bb27 ]
  %v0_131f8 = icmp eq i32 %v0_131ac, %v1_131f0.pn
  %v1_131f8 = icmp slt i32 %v1_131f8.in, 0
  %v2_131f8 = icmp slt i32 %v2_131f8.in, 0
  %v3_131f8 = xor i1 %v2_131f8, %v1_131f8
  %v4_131f8 = or i1 %v0_131f8, %v3_131f8
  br i1 %v4_131f8, label %dec_label_pc_13208.preheader, label %dec_label_pc_13220

dec_label_pc_13208.preheader:                     ; preds = %bb28
  %v2_132085 = icmp eq i32 %v0_131ac, 0
  br i1 %v2_132085, label %dec_label_pc_13228, label %dec_label_pc_13210

dec_label_pc_13200:                               ; preds = %dec_label_pc_13210
  %v1_13200 = add i32 %v0_13200, 1
  %v1_13204 = add i32 %v0_13204, 1
  store i32 %v1_13204, i32* %r1.global-to-local, align 4
  %v2_13208 = icmp eq i32 %v0_13208, 0
  br i1 %v2_13208, label %dec_label_pc_13228, label %dec_label_pc_13210

dec_label_pc_13210:                               ; preds = %dec_label_pc_13200, %dec_label_pc_13208.preheader
  %v0_13208.in = phi i32 [ %v0_13208, %dec_label_pc_13200 ], [ %v0_131ac, %dec_label_pc_13208.preheader ]
  %v0_13204 = phi i32 [ %v1_13204, %dec_label_pc_13200 ], [ %v0_131cc, %dec_label_pc_13208.preheader ]
  %v0_13200 = phi i32 [ %v1_13200, %dec_label_pc_13200 ], [ %tmp, %dec_label_pc_13208.preheader ]
  %v0_13208 = add i32 %v0_13208.in, -1
  %v1_13210 = inttoptr i32 %v0_13200 to i8*
  %v2_13210 = load i8, i8* %v1_13210, align 1
  %v3_13210 = zext i8 %v2_13210 to i32
  store i32 %v3_13210, i32* %r2.global-to-local, align 4
  %v1_13214 = inttoptr i32 %v0_13204 to i8*
  %v2_13214 = load i8, i8* %v1_13214, align 1
  %v9_13218 = icmp eq i8 %v2_13210, %v2_13214
  br i1 %v9_13218, label %dec_label_pc_13200, label %dec_label_pc_13220

dec_label_pc_13220:                               ; preds = %dec_label_pc_13210, %bb28
  ret i32 0

dec_label_pc_13228:                               ; preds = %dec_label_pc_13200, %dec_label_pc_13208.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_13200, { 1, 0 }
  uselistorder i32 %v0_13204, { 1, 0 }
  uselistorder i32 %v1_131f0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_131e0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_131ac, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_131a4, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_13230(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13230:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13230 = load i32, i32* @r4, align 4
  store i32 %v3_13230, i32* %stack_var_-28, align 4
  %v22_13230 = ptrtoint i32* %stack_var_-28 to i32
  %v0_13234 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_13234, i32* %r8.global-to-local, align 4
  %v2_13234 = icmp eq i32 %v0_13234, 0
  store i1 %v2_13234, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_13234, label %dec_label_pc_13324, label %dec_label_pc_13244

dec_label_pc_13244:                               ; preds = %dec_label_pc_13230
  %v3_13244 = icmp eq i8 %arg1, 0
  store i1 %v3_13244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13244, label %.thread, label %dec_label_pc_13258

.thread:                                          ; preds = %dec_label_pc_13244
  %v4_1324c = inttoptr i32 %v0_13234 to i8*
  store i8 48, i8* %v4_1324c, align 1
  %v0_13250.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13250.pr.pr, label %.thread1, label %dec_label_pc_13258

.thread1:                                         ; preds = %.thread
  %v4_13250 = load i32, i32* %r8.global-to-local, align 4
  %v5_13250 = add i32 %v4_13250, 1
  %v6_13250 = inttoptr i32 %v5_13250 to i8*
  store i8 0, i8* %v6_13250, align 1
  %v0_13254.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13254.pr.pr, label %dec_label_pc_13324, label %dec_label_pc_13258

dec_label_pc_13258:                               ; preds = %dec_label_pc_13244, %.thread, %.thread1
  %tmp40 = icmp slt i8 %arg1, 0
  %v7_1325c = icmp eq i32 %arg2, 10
  store i1 %v7_1325c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1325c, label %bb, label %.thread22

.thread22:                                        ; preds = %dec_label_pc_13258
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_13258
  %v4_13258 = zext i1 %tmp40 to i32
  store i32 %v4_13258, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp40, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_13280

.thread4:                                         ; preds = %bb, %.thread22
  br label %dec_label_pc_13290

dec_label_pc_13280:                               ; preds = %bb
  %v2_13280 = sub nsw i32 0, %tmp
  store i1 %v3_13244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13244, label %dec_label_pc_13330, label %dec_label_pc_13290

dec_label_pc_13290:                               ; preds = %dec_label_pc_13280, %.thread4
  %v0_1329810 = phi i32 [ %tmp, %.thread4 ], [ %v2_13280, %dec_label_pc_13280 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_13280 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_13294 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_13294, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13298

dec_label_pc_13298:                               ; preds = %bb38, %dec_label_pc_13290
  %v2_132b8 = phi i32 [ %v5_132b8, %bb38 ], [ %v2_13294, %dec_label_pc_13290 ]
  %v0_132b4 = phi i32 [ %v2_132bc, %bb38 ], [ %v0_1329810, %dec_label_pc_13290 ]
  %v0_1329c = load i32, i32* %r5.global-to-local, align 4
  %v2_132a0 = urem i32 %v0_132b4, %v0_1329c
  store i32 %v2_132a0, i32* %r0.global-to-local, align 4
  %v7_132a4 = icmp eq i32 %v2_132a0, 9
  store i1 %v7_132a4, i1* %cpsr_z.global-to-local, align 1
  %v1_132a8 = add i32 %v2_132a0, 48
  store i32 %v0_1329c, i32* %r1.global-to-local, align 4
  %v7_132b0 = icmp sgt i32 %v2_132a0, 9
  %extract.t = trunc i32 %v1_132a8 to i8
  br i1 %v7_132b0, label %bb37, label %bb38

bb37:                                             ; preds = %dec_label_pc_13298
  %v9_132b0 = add i32 %v2_132a0, 55
  %extract.t21 = trunc i32 %v9_132b0 to i8
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_13298, %bb37
  %v0_132b8.off0 = phi i8 [ %extract.t, %dec_label_pc_13298 ], [ %extract.t21, %bb37 ]
  store i32 %v0_132b4, i32* %r0.global-to-local, align 4
  %v3_132b8 = inttoptr i32 %v2_132b8 to i8*
  store i8 %v0_132b8.off0, i8* %v3_132b8, align 1
  %v4_132b8 = load i32, i32* %r7.global-to-local, align 4
  %v5_132b8 = add i32 %v4_132b8, -1
  store i32 %v5_132b8, i32* %r7.global-to-local, align 4
  %v0_132bc = load i32, i32* %r0.global-to-local, align 4
  %v1_132bc = load i32, i32* %r1.global-to-local, align 4
  %v2_132bc = udiv i32 %v0_132bc, %v1_132bc
  store i32 %v2_132bc, i32* %r0.global-to-local, align 4
  %v2_132c0 = icmp ugt i32 %v1_132bc, %v0_132bc
  store i1 %v2_132c0, i1* %cpsr_z.global-to-local, align 1
  %v0_132c4 = load i32, i32* %r6.global-to-local, align 4
  %v1_132c4 = add i32 %v0_132c4, -1
  store i32 %v1_132c4, i32* %r6.global-to-local, align 4
  br i1 %v2_132c0, label %dec_label_pc_132cc, label %dec_label_pc_13298

dec_label_pc_132cc:                               ; preds = %bb38
  %v0_132cc = load i32, i32* %sl.global-to-local, align 4
  %v2_132cc = icmp eq i32 %v0_132cc, 0
  store i1 %v2_132cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_132cc, label %bb39, label %dec_label_pc_13334

bb39:                                             ; preds = %dec_label_pc_132cc
  store i32 %v0_132c4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_132d8

dec_label_pc_132d8:                               ; preds = %bb39, %dec_label_pc_13334
  %v1_132e4 = phi i32 [ %v0_132c4, %bb39 ], [ %v1_132dc.pre, %dec_label_pc_13334 ]
  %v2_132d8 = ptrtoint i32* %stack_var_-62 to i32
  %v2_132dc = add i32 %v1_132e4, %v2_132d8
  %v3_132dc = inttoptr i32 %v2_132dc to i8*
  %v4_132dc = load i8, i8* %v3_132dc, align 1
  %v6_132dc = zext i8 %v4_132dc to i32
  store i32 %v6_132dc, i32* %r2.global-to-local, align 4
  %v2_132e0 = icmp eq i8 %v4_132dc, 0
  store i1 %v2_132e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_132dc, i32* %r1.global-to-local, align 4
  br i1 %v2_132e0, label %dec_label_pc_13308, label %dec_label_pc_132ec

dec_label_pc_132ec:                               ; preds = %dec_label_pc_132d8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_132f0

dec_label_pc_132f0:                               ; preds = %dec_label_pc_132f0, %dec_label_pc_132ec
  %v0_132f0 = phi i32 [ %v1_132f0, %dec_label_pc_132f0 ], [ 0, %dec_label_pc_132ec ]
  %v1_132f0 = add i32 %v0_132f0, 1
  store i32 %v1_132f0, i32* %r2.global-to-local, align 4
  %v2_132f4 = add i32 %v1_132f0, %v2_132dc
  %v3_132f4 = inttoptr i32 %v2_132f4 to i8*
  %v4_132f4 = load i8, i8* %v3_132f4, align 1
  %v2_132f8 = icmp eq i8 %v4_132f4, 0
  store i1 %v2_132f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_132f8, label %dec_label_pc_13300, label %dec_label_pc_132f0

dec_label_pc_13300:                               ; preds = %dec_label_pc_132f0
  %v7_13300 = icmp eq i32 %v0_132f0, -2
  store i1 %v7_13300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13300, label %dec_label_pc_13324, label %dec_label_pc_13308

dec_label_pc_13308:                               ; preds = %dec_label_pc_13300, %dec_label_pc_132d8
  %v0_1331018 = phi i32 [ %v1_132f0, %dec_label_pc_13300 ], [ %v6_132dc, %dec_label_pc_132d8 ]
  store i32 %v2_132dc, i32* %r0.global-to-local, align 4
  %v0_1330c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1330c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13310

dec_label_pc_13310:                               ; preds = %dec_label_pc_13310.dec_label_pc_13310_crit_edge, %dec_label_pc_13308
  %v2_1331c = phi i32 [ %v5_1331c, %dec_label_pc_13310.dec_label_pc_13310_crit_edge ], [ %v0_1330c, %dec_label_pc_13308 ]
  %v0_13314 = phi i32 [ %v0_13314.pre, %dec_label_pc_13310.dec_label_pc_13310_crit_edge ], [ %v2_132dc, %dec_label_pc_13308 ]
  %v0_13310 = phi i32 [ %v0_13310.pre, %dec_label_pc_13310.dec_label_pc_13310_crit_edge ], [ %v0_1331018, %dec_label_pc_13308 ]
  %v1_13310 = add i32 %v0_13310, -1
  store i32 %v1_13310, i32* %r2.global-to-local, align 4
  %v1_13314 = inttoptr i32 %v0_13314 to i8*
  %v2_13314 = load i8, i8* %v1_13314, align 1
  %v5_13314 = add i32 %v0_13314, 1
  store i32 %v5_13314, i32* %r0.global-to-local, align 4
  %v3_13318 = icmp eq i32 %v0_13310, 0
  store i1 %v3_13318, i1* %cpsr_z.global-to-local, align 1
  %v3_1331c = inttoptr i32 %v2_1331c to i8*
  store i8 %v2_13314, i8* %v3_1331c, align 1
  %v4_1331c = load i32, i32* %r1.global-to-local, align 4
  %v5_1331c = add i32 %v4_1331c, 1
  store i32 %v5_1331c, i32* %r1.global-to-local, align 4
  br i1 %v3_13318, label %dec_label_pc_13324, label %dec_label_pc_13310.dec_label_pc_13310_crit_edge

dec_label_pc_13310.dec_label_pc_13310_crit_edge:  ; preds = %dec_label_pc_13310
  %v0_13310.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_13314.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13310

dec_label_pc_13324:                               ; preds = %dec_label_pc_13310, %.thread1, %dec_label_pc_13230, %dec_label_pc_13300
  %v0_13324 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13324, i32* %r0.global-to-local, align 4
  %v2_1332c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1332c, i32* @r4, align 4
  ret i32 %v0_13324

dec_label_pc_13330:                               ; preds = %dec_label_pc_13280
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13334

dec_label_pc_13334:                               ; preds = %dec_label_pc_132cc, %dec_label_pc_13330
  %v1_13338 = phi i32 [ %v1_132c4, %dec_label_pc_132cc ], [ 32, %dec_label_pc_13330 ]
  %v2_13338 = add i32 %v1_13338, %v22_13230
  store i32 %v2_13338, i32* %r2.global-to-local, align 4
  %v3_13340 = add i32 %v2_13338, -34
  %v4_13340 = inttoptr i32 %v3_13340 to i8*
  store i8 45, i8* %v4_13340, align 1
  %v1_132dc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_132d8

; uselistorder directives
  uselistorder i32 %v5_1331c, { 1, 0 }
  uselistorder i1 %v3_13318, { 1, 0 }
  uselistorder i32 %v0_13314, { 1, 0 }
  uselistorder i1 %v7_13300, { 1, 0 }
  uselistorder i32 %v1_132f0, { 0, 1, 3, 2 }
  uselistorder i32 %v2_132dc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_132bc, { 1, 0 }
  uselistorder i32 %v5_132b8, { 1, 0 }
  uselistorder i32 %v2_132a0, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_13244, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13234, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 2, 7, 8, 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 14, 2, 1, 3, 4 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 48, { 6, 2, 0, 5, 3, 7, 1, 8, 4, 9 }
  uselistorder i32 9, { 4, 58, 7, 32, 5, 33, 9, 31, 27, 10, 30, 8, 3, 34, 28, 2, 29, 35, 11, 36, 12, 37, 13, 38, 14, 39, 15, 40, 16, 41, 42, 17, 18, 19, 20, 0, 21, 22, 1, 23, 24, 25, 54, 43, 44, 26, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 59, 60, 6, 61, 57 }
  uselistorder i32 32, { 41, 59, 60, 43, 42, 44, 52, 45, 53, 46, 54, 47, 55, 4, 3, 6, 5, 8, 7, 10, 9, 51, 12, 11, 13, 15, 14, 17, 16, 18, 19, 21, 20, 48, 49, 56, 57, 22, 58, 23, 24, 0, 25, 1, 2, 26, 27, 28, 29, 30, 32, 31, 34, 33, 36, 35, 37, 38, 39, 40, 50 }
  uselistorder i32 10, { 76, 0, 4, 5, 32, 12, 37, 38, 3, 39, 40, 33, 13, 41, 34, 42, 14, 43, 15, 44, 16, 45, 17, 46, 18, 47, 48, 19, 1, 20, 21, 22, 23, 24, 25, 6, 49, 50, 51, 52, 53, 54, 55, 56, 57, 7, 58, 59, 60, 8, 61, 62, 63, 26, 64, 9, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 2, 30, 35, 78, 28, 79, 31, 36, 10, 80, 27, 81, 75, 11, 82, 29 }
  uselistorder i8 0, { 18, 19, 0, 5, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 2, 31, 32, 33, 34, 8, 35, 1, 7, 6, 9, 36, 37, 38, 39, 40, 15, 41, 42, 45, 16, 43, 44, 14, 46, 47, 48, 49, 50, 51, 10, 52, 53, 11, 55, 56, 4, 59, 13, 65, 60, 61, 57, 58, 12, 17, 62, 63, 64, 3, 66, 67, 54, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13334, { 1, 0 }
  uselistorder label %dec_label_pc_13324, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_132d8, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_13258, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_13348 = add i32 %arg2, -1
  %v7_13348 = icmp eq i32 %arg2, 1
  br i1 %v7_13348, label %bb, label %bb80

bb:                                               ; preds = %entry
  %v2_1334c = load i32, i32* @r0, align 4
  ret i32 %v2_1334c

bb80:                                             ; preds = %entry
  %v2_13348 = icmp eq i32 %arg2, 0
  br i1 %v2_13348, label %dec_label_pc_13430, label %dec_label_pc_13354

dec_label_pc_13354:                               ; preds = %bb80
  %v0_13354 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_13354, %arg2
  br i1 %tmp, label %dec_label_pc_1335c, label %dec_label_pc_133e8

dec_label_pc_1335c:                               ; preds = %dec_label_pc_13354
  %v2_1335c = and i32 %v1_13348, %arg2
  %v4_1335c = icmp eq i32 %v2_1335c, 0
  br i1 %v4_1335c, label %dec_label_pc_133f4, label %dec_label_pc_13364

dec_label_pc_13364:                               ; preds = %dec_label_pc_1335c
  %v3_13364 = icmp ult i32 %arg2, 536870912
  br i1 %v3_13364, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_13364
  %v4_13368 = mul i32 %arg2, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_13364, %.thread
  %v0_13388.pr36.ph = phi i32 [ %v4_13368, %.thread ], [ %arg2, %dec_label_pc_13364 ]
  %storemerge135 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_13364 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb83
  %v0_13388.pr36 = phi i32 [ %v4_1337c, %bb83 ], [ %v0_13388.pr36.ph, %.preheader.preheader ]
  %v1_13380 = phi i32 [ %v4_13380, %bb83 ], [ %storemerge135, %.preheader.preheader ]
  %v2_13374 = icmp ugt i32 %v0_13388.pr36, 268435455
  br i1 %v2_13374, label %.thread2, label %bb81

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_13388thread-pre-split.loopexit

bb81:                                             ; preds = %.preheader
  %v4_13378 = icmp ult i32 %v0_13388.pr36, %v0_13354
  br i1 %v4_13378, label %bb82, label %dec_label_pc_13388thread-pre-split.loopexit.loopexit

bb82:                                             ; preds = %bb81
  %v2_1337c = and i32 %v0_13388.pr36, 268435456
  %v3_1337c = icmp eq i32 %v2_1337c, 0
  %v4_1337c = mul i32 %v0_13388.pr36, 16
  br i1 %v3_1337c, label %bb83, label %dec_label_pc_13388.loopexit

bb83:                                             ; preds = %bb82
  %v2_13380 = and i32 %v1_13380, 268435456
  %v3_13380 = icmp eq i32 %v2_13380, 0
  %v4_13380 = mul i32 %v1_13380, 16
  br i1 %v3_13380, label %.preheader, label %dec_label_pc_13388thread-pre-split.loopexit.loopexit

dec_label_pc_13388thread-pre-split.loopexit.loopexit: ; preds = %bb83, %bb81
  %v1_1339448.ph = phi i32 [ %v1_13380, %bb81 ], [ %v4_13380, %bb83 ]
  %v0_13388.pr38.ph = phi i32 [ %v0_13388.pr36, %bb81 ], [ %v4_1337c, %bb83 ]
  br label %dec_label_pc_13388thread-pre-split.loopexit

dec_label_pc_13388thread-pre-split.loopexit:      ; preds = %dec_label_pc_13388thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1339448 = phi i32 [ %v1_13380, %.thread2 ], [ %v1_1339448.ph, %dec_label_pc_13388thread-pre-split.loopexit.loopexit ]
  %v0_13388.pr38 = phi i32 [ %v0_13388.pr36, %.thread2 ], [ %v0_13388.pr38.ph, %dec_label_pc_13388thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13388thread-pre-split

dec_label_pc_13388thread-pre-split:               ; preds = %dec_label_pc_13388thread-pre-split.loopexit, %bb85
  %v1_1339446 = phi i32 [ %v1_1339448, %dec_label_pc_13388thread-pre-split.loopexit ], [ %v3_13394, %bb85 ]
  %v0_13388.pr = phi i32 [ %v0_13388.pr38, %dec_label_pc_13388thread-pre-split.loopexit ], [ %v3_13390, %bb85 ]
  br label %dec_label_pc_13388

dec_label_pc_13388.loopexit:                      ; preds = %bb82
  br label %dec_label_pc_13388

dec_label_pc_13388:                               ; preds = %dec_label_pc_13388.loopexit, %dec_label_pc_13388thread-pre-split
  %v1_13394 = phi i32 [ %v1_1339446, %dec_label_pc_13388thread-pre-split ], [ %v1_13380, %dec_label_pc_13388.loopexit ]
  %v1_13390 = phi i32 [ %v0_13388.pr, %dec_label_pc_13388thread-pre-split ], [ %v4_1337c, %dec_label_pc_13388.loopexit ]
  %v2_13388 = icmp slt i32 %v1_13390, 0
  br i1 %v2_13388, label %dec_label_pc_1339c, label %bb84

bb84:                                             ; preds = %dec_label_pc_13388
  %v4_1338c = icmp ult i32 %v1_13390, %v0_13354
  br i1 %v4_1338c, label %bb85, label %dec_label_pc_1339c

bb85:                                             ; preds = %bb84
  %v3_13390 = mul i32 %v1_13390, 2
  %v2_13394 = icmp slt i32 %v1_13394, 0
  %v3_13394 = mul i32 %v1_13394, 2
  br i1 %v2_13394, label %dec_label_pc_1339c, label %dec_label_pc_13388thread-pre-split

dec_label_pc_1339c:                               ; preds = %bb84, %dec_label_pc_13388, %bb85
  %v2_133a859 = phi i32 [ %v3_13394, %bb85 ], [ %v1_13394, %bb84 ], [ %v1_13394, %dec_label_pc_13388 ]
  %v1_133a051 = phi i32 [ %v3_13390, %bb85 ], [ %v1_13390, %bb84 ], [ %v1_13390, %dec_label_pc_13388 ]
  br label %dec_label_pc_133a0

dec_label_pc_133a0:                               ; preds = %.thread11, %dec_label_pc_1339c
  %v1_133d4 = phi i32 [ %v4_133d4, %.thread11 ], [ %v2_133a859, %dec_label_pc_1339c ]
  %v1_133a8 = phi i32 [ %v0_133e0, %.thread11 ], [ 0, %dec_label_pc_1339c ]
  %v1_133d8 = phi i32 [ %v4_133d8, %.thread11 ], [ %v1_133a051, %dec_label_pc_1339c ]
  %v1_133a4 = phi i32 [ %v0_133d0, %.thread11 ], [ %v0_13354, %dec_label_pc_1339c ]
  %v3_133a0 = icmp ult i32 %v1_133a4, %v1_133d8
  br i1 %v3_133a0, label %.thread7, label %bb86

bb86:                                             ; preds = %dec_label_pc_133a0
  %v3_133a4 = sub i32 %v1_133a4, %v1_133d8
  %v3_133a8 = or i32 %v1_133a8, %v1_133d4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_133a0, %bb86
  %v1_133b0 = phi i32 [ %v1_133a4, %dec_label_pc_133a0 ], [ %v3_133a4, %bb86 ]
  %v1_133b4 = phi i32 [ %v1_133a8, %dec_label_pc_133a0 ], [ %v3_133a8, %bb86 ]
  %v4_133ac = udiv i32 %v1_133d8, 2
  %v6_133ac = icmp ult i32 %v1_133b0, %v4_133ac
  br i1 %v6_133ac, label %.thread8, label %bb87

bb87:                                             ; preds = %.thread7
  %v3_133b0 = urem i32 %v1_133d8, 2
  %v4_133b0 = icmp eq i32 %v3_133b0, 0
  %v6_133b0 = sub i32 %v1_133b0, %v4_133ac
  br i1 %v4_133b0, label %.thread8, label %bb88

bb88:                                             ; preds = %bb87
  %v5_133b4 = udiv i32 %v1_133d4, 2
  %v6_133b4 = or i32 %v1_133b4, %v5_133b4
  br label %.thread8

.thread8:                                         ; preds = %bb87, %.thread7, %bb88
  %v1_133bc = phi i32 [ %v6_133b0, %bb87 ], [ %v1_133b0, %.thread7 ], [ %v6_133b0, %bb88 ]
  %v1_133c0 = phi i32 [ %v1_133b4, %bb87 ], [ %v1_133b4, %.thread7 ], [ %v6_133b4, %bb88 ]
  %v4_133b8 = udiv i32 %v1_133d8, 4
  %v6_133b8 = icmp ult i32 %v1_133bc, %v4_133b8
  br i1 %v6_133b8, label %.thread9, label %bb89

bb89:                                             ; preds = %.thread8
  %v3_133bc = and i32 %v1_133d8, 2
  %v4_133bc = icmp eq i32 %v3_133bc, 0
  %v6_133bc = sub i32 %v1_133bc, %v4_133b8
  br i1 %v4_133bc, label %.thread9, label %bb90

bb90:                                             ; preds = %bb89
  %v5_133c0 = udiv i32 %v1_133d4, 4
  %v6_133c0 = or i32 %v1_133c0, %v5_133c0
  br label %.thread9

.thread9:                                         ; preds = %bb89, %.thread8, %bb90
  %v1_133c8 = phi i32 [ %v6_133bc, %bb89 ], [ %v1_133bc, %.thread8 ], [ %v6_133bc, %bb90 ]
  %v1_133cc = phi i32 [ %v1_133c0, %bb89 ], [ %v1_133c0, %.thread8 ], [ %v6_133c0, %bb90 ]
  %v4_133c4 = udiv i32 %v1_133d8, 8
  %v6_133c4 = icmp ult i32 %v1_133c8, %v4_133c4
  br i1 %v6_133c4, label %thread-pre-split, label %bb91

bb91:                                             ; preds = %.thread9
  %v3_133c8 = and i32 %v1_133d8, 4
  %v4_133c8 = icmp eq i32 %v3_133c8, 0
  %v6_133c8 = sub i32 %v1_133c8, %v4_133c4
  br i1 %v4_133c8, label %thread-pre-split, label %bb92

bb92:                                             ; preds = %bb91
  %v5_133cc = udiv i32 %v1_133d4, 8
  %v6_133cc = or i32 %v1_133cc, %v5_133cc
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb92, %.thread9, %bb91
  %v0_133e0 = phi i32 [ %v1_133cc, %bb91 ], [ %v1_133cc, %.thread9 ], [ %v6_133cc, %bb92 ]
  %v0_133d0 = phi i32 [ %v6_133c8, %bb91 ], [ %v1_133c8, %.thread9 ], [ %v6_133c8, %bb92 ]
  %v2_133d0 = icmp eq i32 %v0_133d0, 0
  br i1 %v2_133d0, label %dec_label_pc_133e0, label %bb93

bb93:                                             ; preds = %thread-pre-split
  %tmp140 = icmp ult i32 %v1_133d4, 16
  br i1 %tmp140, label %dec_label_pc_133e0, label %.thread11

.thread11:                                        ; preds = %bb93
  %v4_133d4 = udiv i32 %v1_133d4, 16
  %v4_133d8 = udiv i32 %v1_133d8, 16
  br label %dec_label_pc_133a0

dec_label_pc_133e0:                               ; preds = %thread-pre-split, %bb93
  ret i32 %v0_133e0

dec_label_pc_133e8:                               ; preds = %dec_label_pc_13354
  %v9_13354 = icmp eq i32 %v0_13354, %arg2
  %. = zext i1 %v9_13354 to i32
  ret i32 %.

dec_label_pc_133f4:                               ; preds = %dec_label_pc_1335c
  %v2_133f4 = icmp ugt i32 %arg2, 65535
  br i1 %v2_133f4, label %bb97, label %.thread16

bb97:                                             ; preds = %dec_label_pc_133f4
  %v2_133f8 = and i32 %arg2, 32768
  %v3_133f8 = icmp eq i32 %v2_133f8, 0
  %v4_133f8 = udiv i32 %arg2, 65536
  br i1 %v3_133f8, label %.thread16, label %bb98

.thread16:                                        ; preds = %bb97, %dec_label_pc_133f4
  %v0_1340465 = phi i32 [ %arg2, %dec_label_pc_133f4 ], [ %v4_133f8, %bb97 ]
  br label %bb98

bb98:                                             ; preds = %bb97, %.thread16
  %v1_13408 = phi i32 [ %v0_1340465, %.thread16 ], [ %v4_133f8, %bb97 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb97 ]
  %v2_13404 = icmp ugt i32 %v1_13408, 255
  br i1 %v2_13404, label %bb99, label %.thread17

bb99:                                             ; preds = %bb98
  %v2_13408 = and i32 %v1_13408, 128
  %v3_13408 = icmp eq i32 %v2_13408, 0
  %v4_13408 = udiv i32 %v1_13408, 256
  br i1 %v3_13408, label %.thread17, label %bb100

bb100:                                            ; preds = %bb99
  %v2_1340c = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb99, %bb98, %bb100
  %v1_13418 = phi i32 [ %storemerge, %bb98 ], [ %storemerge, %bb99 ], [ %v2_1340c, %bb100 ]
  %v1_13414 = phi i32 [ %v1_13408, %bb98 ], [ %v4_13408, %bb99 ], [ %v4_13408, %bb100 ]
  %v2_13410 = icmp ugt i32 %v1_13414, 15
  br i1 %v2_13410, label %bb101, label %.thread18

bb101:                                            ; preds = %.thread17
  %v2_13414 = and i32 %v1_13414, 8
  %v3_13414 = icmp eq i32 %v2_13414, 0
  %v4_13414 = udiv i32 %v1_13414, 16
  br i1 %v3_13414, label %.thread18, label %bb102

bb102:                                            ; preds = %bb101
  %v2_13418 = add nsw i32 %v1_13418, 4
  br label %.thread18

.thread18:                                        ; preds = %bb101, %.thread17, %bb102
  %v4_13420 = phi i32 [ %v1_13418, %.thread17 ], [ %v1_13418, %bb101 ], [ %v2_13418, %bb102 ]
  %v5_13424 = phi i32 [ %v1_13414, %.thread17 ], [ %v4_13414, %bb101 ], [ %v4_13414, %bb102 ]
  %v2_1341c = icmp ugt i32 %v5_13424, 3
  %v7_1341c = icmp eq i32 %v5_13424, 4
  %v2_13420 = xor i1 %v7_1341c, true
  %v3_13420 = and i1 %v2_1341c, %v2_13420
  br i1 %v3_13420, label %bb103, label %bb104

bb103:                                            ; preds = %.thread18
  %v5_13420 = add nsw i32 %v4_13420, 3
  br label %bb104

bb104:                                            ; preds = %.thread18, %bb103
  %v4_13424 = phi i32 [ %v4_13420, %.thread18 ], [ %v5_13420, %bb103 ]
  %v2_13424 = xor i1 %v2_1341c, true
  %v3_13424 = or i1 %v7_1341c, %v2_13424
  br i1 %v3_13424, label %bb105, label %bb106

bb105:                                            ; preds = %bb104
  %v8_13424 = udiv i32 %v5_13424, 2
  %v9_13424 = add i32 %v4_13424, %v8_13424
  br label %bb106

bb106:                                            ; preds = %bb104, %bb105
  %v1_13428 = phi i32 [ %v4_13424, %bb104 ], [ %v9_13424, %bb105 ]
  %v6_13428 = lshr i32 %v0_13354, %v1_13428
  ret i32 %v6_13428

dec_label_pc_13430:                               ; preds = %bb80
  %v0_13430 = load i32, i32* @lr, align 4
  %v0_13434 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_13430)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_13424, { 1, 0 }
  uselistorder i1 %v7_1341c, { 1, 0 }
  uselistorder i32 %v4_13414, { 1, 0 }
  uselistorder i32 %v1_13414, { 1, 0, 2, 3 }
  uselistorder i32 %v4_13408, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_13408, { 1, 0, 2, 3 }
  uselistorder i32 %v4_133f8, { 1, 0 }
  uselistorder i32 %v0_133d0, { 1, 0 }
  uselistorder i32 %v4_133c4, { 1, 0 }
  uselistorder i32 %v1_133cc, { 1, 2, 0 }
  uselistorder i32 %v4_133b8, { 1, 0 }
  uselistorder i32 %v1_133c0, { 1, 2, 0 }
  uselistorder i32 %v4_133ac, { 1, 0 }
  uselistorder i32 %v1_133b4, { 1, 2, 0 }
  uselistorder i32 %v1_133d8, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_133a8, { 1, 0 }
  uselistorder i32 %v1_133d4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_13394, { 1, 0 }
  uselistorder i32 %v3_13390, { 1, 0 }
  uselistorder i32 %v1_13390, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_13394, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13380, { 1, 0 }
  uselistorder i32 %v4_1337c, { 2, 1, 0 }
  uselistorder i32 %v1_13380, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_13388.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_13354, { 2, 5, 3, 1, 4, 0 }
  uselistorder i1 true, { 0, 1, 52, 2, 3, 4, 5, 6, 106, 47, 53, 59, 83, 60, 107, 10, 11, 12, 84, 75, 85, 86, 87, 54, 13, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 14, 15, 104, 105, 74, 50, 8, 9, 73, 7, 108, 17, 16, 61, 68, 62, 69, 57, 67, 58, 72, 109, 18, 110, 111, 19, 20, 21, 112, 76, 77, 22, 23, 113, 78, 79, 24, 25, 114, 80, 81, 26, 27, 56, 115, 116, 70, 117, 48, 63, 28, 49, 29, 30, 31, 64, 32, 55, 33, 34, 35, 36, 118, 119, 120, 121, 65, 122, 123, 124, 125, 126, 127, 128, 129, 41, 130, 42, 43, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 40, 145, 146, 147, 148, 149, 150, 39, 151, 51, 152, 66, 71, 44, 153, 37, 38, 82, 154, 45, 46 }
  uselistorder i32 15, { 7, 3, 0, 8, 4, 5, 1, 9, 10, 6, 11, 12, 13, 14, 2, 15 }
  uselistorder i32 256, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 11, 12, 13, 9, 10, 14, 15, 16, 17, 18, 357, 358, 19, 20, 21, 22, 23, 24, 25, 359, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 38, 39, 43, 42, 41, 44, 356, 360, 49, 45, 48, 46, 47, 354, 50, 51, 52, 55, 54, 53, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 69, 71, 72, 73, 77, 83, 78, 74, 75, 79, 80, 81, 84, 76, 85, 86, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 98, 101, 104, 105, 103, 102, 106, 109, 108, 107, 110, 116, 113, 117, 114, 111, 118, 112, 119, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 136, 138, 139, 140, 151, 146, 141, 152, 147, 153, 154, 148, 155, 149, 142, 143, 144, 156, 145, 157, 150, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 179, 184, 185, 181, 188, 186, 182, 189, 187, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 206, 205, 208, 210, 215, 216, 211, 217, 212, 209, 218, 213, 214, 219, 220, 221, 222, 223, 224, 225, 228, 229, 226, 230, 227, 232, 231, 233, 234, 235, 236, 237, 240, 241, 244, 242, 238, 245, 243, 239, 248, 247, 246, 355, 361, 249, 250, 256, 251, 257, 252, 253, 258, 254, 259, 260, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 279, 281, 282, 286, 287, 294, 288, 289, 295, 290, 283, 284, 296, 291, 285, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 311, 313, 314, 318, 319, 326, 320, 321, 327, 322, 315, 316, 328, 323, 317, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353 }
  uselistorder i32 128, { 13, 14, 15, 21, 2, 22, 16, 17, 18, 19, 23, 3, 24, 4, 11, 12, 25, 26, 6, 0, 1, 7, 8, 9, 27, 5, 28, 20, 10 }
  uselistorder i32 255, { 14, 15, 2, 16, 3, 17, 4, 18, 0, 1, 7, 19, 8, 20, 5, 21, 6, 22, 11, 23, 12, 24, 9, 25, 10, 26, 13, 27 }
  uselistorder i32 65536, { 5, 6, 7, 8, 9, 10, 1, 12, 11, 13, 2, 14, 0, 3, 15, 16, 17, 18, 19, 22, 20, 21, 23, 24, 25, 30, 31, 32, 33, 26, 27, 28, 29, 34, 37, 38, 39, 35, 36, 40, 44, 45, 46, 41, 42, 43, 47, 48, 4, 50, 51, 49, 52, 53, 54, 57, 58, 59, 55, 56, 60, 62, 63, 64, 61, 65, 89, 67, 66, 68, 70, 69, 72, 71, 73, 74, 77, 78, 79, 75, 76, 80, 81, 84, 85, 86, 82, 83, 88, 87 }
  uselistorder i32 32768, { 1, 0 }
  uselistorder i32 65535, { 90, 0, 1, 11, 42, 22, 21, 24, 43, 23, 44, 13, 12, 2, 26, 45, 25, 46, 48, 14, 47, 3, 49, 50, 27, 51, 28, 52, 29, 53, 54, 30, 55, 57, 15, 56, 4, 58, 59, 60, 61, 32, 62, 31, 63, 65, 16, 64, 5, 66, 67, 68, 69, 33, 70, 34, 71, 35, 72, 73, 17, 6, 74, 36, 75, 37, 76, 78, 18, 77, 7, 8, 79, 80, 39, 81, 38, 82, 84, 19, 83, 9, 10, 85, 86, 41, 87, 40, 88, 20, 89 }
  uselistorder i32 %arg2, { 8, 12, 7, 6, 5, 10, 11, 0, 9, 1, 4, 2, 3 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %dec_label_pc_133e0, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_1339c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13388thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_13444 = udiv i32 %arg1, %arg2
  ret i32 %v2_13444
}

define i32 @__umodsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_13458 = add i32 %arg2, -1
  %v2_13458 = icmp eq i32 %arg2, 0
  br i1 %v2_13458, label %dec_label_pc_13514, label %dec_label_pc_13460

dec_label_pc_13460:                               ; preds = %entry
  %v7_13458 = icmp eq i32 %arg2, 1
  br i1 %v7_13458, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_13460
  %v1_13460 = load i32, i32* @r0, align 4
  %v10_13460 = icmp eq i32 %v1_13460, %arg2
  br i1 %v10_13460, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_13460, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_13460 = icmp ult i32 %v1_13460, %arg2
  br i1 %v4_13460, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_13468 = and i32 %v1_13458, %arg2
  %v8_13468 = icmp eq i32 %v6_13468, 0
  br i1 %v8_13468, label %.thread67, label %dec_label_pc_13478.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_1346c = phi i32 [ %v1_13460, %bb75 ], [ 0, %.thread65 ]
  %v3_1346c = and i32 %v1_1346c, %v1_13458
  br label %bb76

dec_label_pc_13478.preheader:                     ; preds = %bb75
  %v2_1347899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1347899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_13508, %bb74, %bb89, %bb84, %dec_label_pc_134d8, %.thread67
  %v5_13470 = phi i32 [ %v1_13460, %bb74 ], [ %v3_1346c, %.thread67 ], [ %v1_134b4.v6_134b4.v6_134bc.v6_134c4, %dec_label_pc_134d8 ], [ 0, %bb84 ], [ %v1_1350c, %dec_label_pc_13508 ], [ %v2_13508, %bb89 ]
  ret i32 %v5_13470

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_13478.preheader
  %v0_1348c.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_13478.preheader ], [ %v4_13480, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_13478.preheader ], [ %v2_1348411, %.thread1.thread9 ]
  br label %dec_label_pc_1348cthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_13478.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1348411, %.thread1.thread9 ], [ 0, %dec_label_pc_13478.preheader ]
  %v0_1348c.pr33100 = phi i32 [ %v4_13480, %.thread1.thread9 ], [ %arg2, %dec_label_pc_13478.preheader ]
  %v4_1347c = icmp ult i32 %v0_1348c.pr33100, %v1_13460
  br i1 %v4_1347c, label %bb78, label %dec_label_pc_1348cthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_13480 = and i32 %v0_1348c.pr33100, 268435456
  %v3_13480 = icmp eq i32 %v2_13480, 0
  %v4_13480 = mul i32 %v0_1348c.pr33100, 16
  br i1 %v3_13480, label %.thread1.thread9, label %dec_label_pc_1348c.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1348411 = add i32 %storemerge101, 4
  %v2_13478 = icmp ugt i32 %v4_13480, 268435455
  br i1 %v2_13478, label %.thread, label %bb77

dec_label_pc_1348cthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_1348cthread-pre-split.loopexit

dec_label_pc_1348cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1348cthread-pre-split.loopexit.loopexit, %.thread
  %v0_1348c.pr3398 = phi i32 [ %v0_1348c.pr33.lcssa, %.thread ], [ %v0_1348c.pr33100, %dec_label_pc_1348cthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_1348cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1348cthread-pre-split

dec_label_pc_1348cthread-pre-split:               ; preds = %.thread4, %dec_label_pc_1348cthread-pre-split.loopexit
  %v1_1349839 = phi i32 [ %storemerge95, %dec_label_pc_1348cthread-pre-split.loopexit ], [ %v2_13498, %.thread4 ]
  %v0_1348c.pr = phi i32 [ %v0_1348c.pr3398, %dec_label_pc_1348cthread-pre-split.loopexit ], [ %v3_13494, %.thread4 ]
  br label %dec_label_pc_1348c

dec_label_pc_1348c.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_1348c

dec_label_pc_1348c:                               ; preds = %dec_label_pc_1348c.loopexit, %dec_label_pc_1348cthread-pre-split
  %v0_134a0.pr = phi i32 [ %v1_1349839, %dec_label_pc_1348cthread-pre-split ], [ %storemerge101, %dec_label_pc_1348c.loopexit ]
  %v1_13494 = phi i32 [ %v0_1348c.pr, %dec_label_pc_1348cthread-pre-split ], [ %v4_13480, %dec_label_pc_1348c.loopexit ]
  %v2_1348c = icmp slt i32 %v1_13494, 0
  br i1 %v2_1348c, label %dec_label_pc_134a0, label %bb79

bb79:                                             ; preds = %dec_label_pc_1348c
  %v4_13490 = icmp ult i32 %v1_13494, %v1_13460
  br i1 %v4_13490, label %.thread4, label %dec_label_pc_134a0

.thread4:                                         ; preds = %bb79
  %v3_13494 = mul i32 %v1_13494, 2
  %v2_13498 = add i32 %v0_134a0.pr, 1
  br label %dec_label_pc_1348cthread-pre-split

dec_label_pc_134a0:                               ; preds = %bb79, %dec_label_pc_1348c
  %v2_134a0 = add i32 %v0_134a0.pr, -3
  %v5_134a4 = icmp slt i32 %v0_134a0.pr, 3
  br i1 %v5_134a4, label %dec_label_pc_134e4, label %dec_label_pc_134a8

dec_label_pc_134a8:                               ; preds = %dec_label_pc_134a0, %bb83
  %v6_134d0 = phi i32 [ %v0_134d8, %bb83 ], [ %v2_134a0, %dec_label_pc_134a0 ]
  %v1_134ac = phi i32 [ %v1_134b4.v6_134b4.v6_134bc.v6_134c4, %bb83 ], [ %v1_13460, %dec_label_pc_134a0 ]
  %v3_134cc12 = phi i32 [ %v3_134cc, %bb83 ], [ %v1_13494, %dec_label_pc_134a0 ]
  %v3_134a8 = icmp ult i32 %v1_134ac, %v3_134cc12
  %v3_134ac = select i1 %v3_134a8, i32 0, i32 %v3_134cc12
  %v1_134b4 = sub i32 %v1_134ac, %v3_134ac
  %v4_134b0 = udiv i32 %v3_134cc12, 2
  %v6_134b0 = icmp ult i32 %v1_134b4, %v4_134b0
  %v6_134b4 = select i1 %v6_134b0, i32 0, i32 %v4_134b0
  %v1_134b4.v6_134b4 = sub i32 %v1_134b4, %v6_134b4
  %.demorgan = and i1 %v3_134a8, %v6_134b0
  %v4_134b8 = udiv i32 %v3_134cc12, 4
  %v6_134b8 = icmp ult i32 %v1_134b4.v6_134b4, %v4_134b8
  %v6_134bc = select i1 %v6_134b8, i32 0, i32 %v4_134b8
  %v1_134b4.v6_134b4.v6_134bc = sub i32 %v1_134b4.v6_134b4, %v6_134bc
  %.demorgan71 = and i1 %.demorgan, %v6_134b8
  %v4_134c0 = udiv i32 %v3_134cc12, 8
  %v6_134c0 = icmp ult i32 %v1_134b4.v6_134b4.v6_134bc, %v4_134c0
  %v6_134c4 = select i1 %v6_134c0, i32 0, i32 %v4_134c0
  %v1_134b4.v6_134b4.v6_134bc.v6_134c4 = sub i32 %v1_134b4.v6_134b4.v6_134bc, %v6_134c4
  %.demorgan72 = and i1 %.demorgan71, %v6_134c0
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_134a8
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_134a8, %bb80
  %v2_134c8 = add i32 %v1_134b4.v6_134b4.v6_134bc.v6_134c4, -1
  %v4_134c8 = sub i32 0, %v1_134b4.v6_134b4.v6_134bc.v6_134c4
  %v5_134c8 = and i32 %v1_134b4.v6_134b4.v6_134bc.v6_134c4, %v4_134c8
  %v3_134cc = udiv i32 %v3_134cc12, 16
  %v5_134d0 = icmp slt i32 %v1_134b4.v6_134b4.v6_134bc.v6_134c4, 1
  br i1 %v5_134d0, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_134d0 = add i32 %v6_134d0, -4
  %v9_134d0 = sub i32 3, %v6_134d0
  %v10_134d0 = and i32 %v9_134d0, %v6_134d0
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_134d8 = phi i32 [ %v6_134d0, %bb81 ], [ %v7_134d0, %bb82 ]
  %v0_134d415.in = phi i32 [ %v2_134c8, %bb81 ], [ %v7_134d0, %bb82 ]
  %v1_134d414.in = phi i32 [ %v5_134c8, %bb81 ], [ %v10_134d0, %bb82 ]
  %v1_134d414 = icmp slt i32 %v1_134d414.in, 0
  %v0_134d415 = icmp slt i32 %v0_134d415.in, 0
  %v2_134d4 = xor i1 %v0_134d415, %v1_134d414
  br i1 %v2_134d4, label %dec_label_pc_134d8, label %dec_label_pc_134a8

dec_label_pc_134d8:                               ; preds = %bb83
  %v1_134d8 = urem i32 %v0_134d8, 4
  %v2_134d8 = icmp eq i32 %v1_134d8, 0
  br i1 %v2_134d8, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_134d8
  %v3_134dc = icmp eq i32 %v1_134b4.v6_134b4.v6_134bc.v6_134c4, 0
  br i1 %v3_134dc, label %bb76, label %dec_label_pc_134e4

dec_label_pc_134e4:                               ; preds = %bb84, %dec_label_pc_134a0
  %v0_134f8 = phi i32 [ %v3_134cc, %bb84 ], [ %v1_13494, %dec_label_pc_134a0 ]
  %v1_134f4 = phi i32 [ %v1_134b4.v6_134b4.v6_134bc.v6_134c4, %bb84 ], [ %v1_13460, %dec_label_pc_134a0 ]
  %v0_134e4 = phi i32 [ %v0_134d8, %bb84 ], [ %v2_134a0, %dec_label_pc_134a0 ]
  %v5_134e8 = icmp slt i32 %v0_134e4, -2
  br i1 %v5_134e8, label %dec_label_pc_13508, label %dec_label_pc_134ec

dec_label_pc_134ec:                               ; preds = %dec_label_pc_134e4
  %v8_134e4 = icmp eq i32 %v0_134e4, -2
  br i1 %v8_134e4, label %dec_label_pc_134fc, label %dec_label_pc_134f0

dec_label_pc_134f0:                               ; preds = %dec_label_pc_134ec
  %v3_134f0 = icmp ult i32 %v1_134f4, %v0_134f8
  br i1 %v3_134f0, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_134f0
  %v2_134f0 = sub i32 %v1_134f4, %v0_134f8
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_134f0, %bb85
  %v0_134fc52 = phi i32 [ %v1_134f4, %dec_label_pc_134f0 ], [ %v2_134f0, %bb85 ]
  %v3_134f8 = udiv i32 %v0_134f8, 2
  br label %dec_label_pc_134fc

dec_label_pc_134fc:                               ; preds = %dec_label_pc_134ec, %bb86
  %v0_13504 = phi i32 [ %v0_134f8, %dec_label_pc_134ec ], [ %v3_134f8, %bb86 ]
  %v1_13500 = phi i32 [ %v1_134f4, %dec_label_pc_134ec ], [ %v0_134fc52, %bb86 ]
  %v3_134fc = icmp ult i32 %v1_13500, %v0_13504
  br i1 %v3_134fc, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_134fc
  %v2_134fc = sub i32 %v1_13500, %v0_13504
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_134fc, %bb87
  %v0_1350855 = phi i32 [ %v1_13500, %dec_label_pc_134fc ], [ %v2_134fc, %bb87 ]
  %v3_13504 = udiv i32 %v0_13504, 2
  br label %dec_label_pc_13508

dec_label_pc_13508:                               ; preds = %dec_label_pc_134e4, %bb88
  %v2_1350c = phi i32 [ %v0_134f8, %dec_label_pc_134e4 ], [ %v3_13504, %bb88 ]
  %v1_1350c = phi i32 [ %v1_134f4, %dec_label_pc_134e4 ], [ %v0_1350855, %bb88 ]
  %v3_13508 = icmp ult i32 %v1_1350c, %v2_1350c
  br i1 %v3_13508, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_13508
  %v2_13508 = sub i32 %v1_1350c, %v2_1350c
  br label %bb76

dec_label_pc_13514:                               ; preds = %entry
  %v0_13514 = load i32, i32* @lr, align 4
  %v0_13518 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_13514)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1350c, { 1, 2, 0 }
  uselistorder i32 %v0_134f8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_134d8, { 1, 0, 2 }
  uselistorder i32 %v7_134d0, { 1, 0 }
  uselistorder i32 %v3_134cc, { 1, 0 }
  uselistorder i32 %v1_134b4.v6_134b4.v6_134bc.v6_134c4, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_134c0, { 1, 0 }
  uselistorder i32 %v4_134b8, { 1, 0 }
  uselistorder i32 %v4_134b0, { 1, 0 }
  uselistorder i32 %v6_134d0, { 3, 0, 2, 1 }
  uselistorder i32 %v2_134a0, { 1, 0 }
  uselistorder i32 %v1_13494, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_13480, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1348c.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13460, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_13508, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_134fc, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_134a8, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @__modsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_13524 = icmp eq i32 %arg2, 0
  br i1 %v2_13524, label %dec_label_pc_135f8, label %dec_label_pc_1352c

dec_label_pc_1352c:                               ; preds = %entry
  %v1_13524 = icmp slt i32 %arg2, 0
  br i1 %v1_13524, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_1352c
  %v2_1352c = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_1352c, %bb
  %v4_13544 = phi i32 [ %arg2, %dec_label_pc_1352c ], [ %v2_1352c, %bb ]
  %v0_13530 = load i32, i32* @r0, align 4
  %v1_13530 = icmp slt i32 %v0_13530, 0
  br i1 %v1_13530, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_13534 = sub i32 0, %v0_13530
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_1353c = phi i32 [ %v0_13530, %bb79 ], [ %v2_13534, %bb80 ]
  %v1_13538 = add i32 %v4_13544, -1
  %v7_13538 = icmp eq i32 %v4_13544, 1
  br i1 %v7_13538, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_1353c = icmp eq i32 %v1_1353c, %v4_13544
  br i1 %v10_1353c, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_1353c = icmp ult i32 %v1_1353c, %v4_13544
  br i1 %v4_1353c, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_13544 = and i32 %v1_13538, %v4_13544
  %v8_13544 = icmp eq i32 %v6_13544, 0
  br i1 %v8_13544, label %.thread72, label %dec_label_pc_13554.preheader

dec_label_pc_13554.preheader:                     ; preds = %bb84
  %v2_13554109 = icmp ugt i32 %v4_13544, 268435455
  br i1 %v2_13554109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1354864 = phi i32 [ %v1_1353c, %bb84 ], [ 0, %.thread70 ]
  %v3_13548 = and i32 %v1_1354864, %v1_13538
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_13554.preheader
  %v0_13568.pr35.lcssa = phi i32 [ %v4_13544, %dec_label_pc_13554.preheader ], [ %v4_1355c, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_13554.preheader ], [ %v2_135609, %.thread2.thread7 ]
  br label %dec_label_pc_13568thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_13554.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_135609, %.thread2.thread7 ], [ 0, %dec_label_pc_13554.preheader ]
  %v0_13568.pr35110 = phi i32 [ %v4_1355c, %.thread2.thread7 ], [ %v4_13544, %dec_label_pc_13554.preheader ]
  %v4_13558 = icmp ult i32 %v0_13568.pr35110, %v1_1353c
  br i1 %v4_13558, label %bb86, label %dec_label_pc_13568thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_1355c = and i32 %v0_13568.pr35110, 268435456
  %v3_1355c = icmp eq i32 %v2_1355c, 0
  %v4_1355c = mul i32 %v0_13568.pr35110, 16
  br i1 %v3_1355c, label %.thread2.thread7, label %dec_label_pc_13568.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_135609 = add i32 %storemerge111, 4
  %v2_13554 = icmp ugt i32 %v4_1355c, 268435455
  br i1 %v2_13554, label %.thread1, label %bb85

dec_label_pc_13568thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_13568thread-pre-split.loopexit

dec_label_pc_13568thread-pre-split.loopexit:      ; preds = %dec_label_pc_13568thread-pre-split.loopexit.loopexit, %.thread1
  %v0_13568.pr35108 = phi i32 [ %v0_13568.pr35.lcssa, %.thread1 ], [ %v0_13568.pr35110, %dec_label_pc_13568thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_13568thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13568thread-pre-split

dec_label_pc_13568thread-pre-split:               ; preds = %.thread4, %dec_label_pc_13568thread-pre-split.loopexit
  %v1_1357441 = phi i32 [ %storemerge105, %dec_label_pc_13568thread-pre-split.loopexit ], [ %v2_13574, %.thread4 ]
  %v2_1356c36 = phi i32 [ %v1_1353c, %dec_label_pc_13568thread-pre-split.loopexit ], [ %v2_1356c, %.thread4 ]
  %v0_13568.pr = phi i32 [ %v0_13568.pr35108, %dec_label_pc_13568thread-pre-split.loopexit ], [ %v3_13570, %.thread4 ]
  br label %dec_label_pc_13568

dec_label_pc_13568.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_13568

dec_label_pc_13568:                               ; preds = %dec_label_pc_13568.loopexit, %dec_label_pc_13568thread-pre-split
  %v0_1357c.pr = phi i32 [ %v1_1357441, %dec_label_pc_13568thread-pre-split ], [ %storemerge111, %dec_label_pc_13568.loopexit ]
  %v2_1356c = phi i32 [ %v2_1356c36, %dec_label_pc_13568thread-pre-split ], [ %v1_1353c, %dec_label_pc_13568.loopexit ]
  %v1_13570 = phi i32 [ %v0_13568.pr, %dec_label_pc_13568thread-pre-split ], [ %v4_1355c, %dec_label_pc_13568.loopexit ]
  %v2_13568 = icmp slt i32 %v1_13570, 0
  br i1 %v2_13568, label %dec_label_pc_1357c, label %bb87

bb87:                                             ; preds = %dec_label_pc_13568
  %v4_1356c = icmp ult i32 %v1_13570, %v2_1356c
  br i1 %v4_1356c, label %.thread4, label %dec_label_pc_1357c

.thread4:                                         ; preds = %bb87
  %v3_13570 = mul i32 %v1_13570, 2
  %v2_13574 = add i32 %v0_1357c.pr, 1
  br label %dec_label_pc_13568thread-pre-split

dec_label_pc_1357c:                               ; preds = %bb87, %dec_label_pc_13568
  %v2_1357c = add i32 %v0_1357c.pr, -3
  %v5_13580 = icmp slt i32 %v0_1357c.pr, 3
  br i1 %v5_13580, label %dec_label_pc_135c0, label %dec_label_pc_13584

dec_label_pc_13584:                               ; preds = %dec_label_pc_1357c, %bb91
  %v6_135ac = phi i32 [ %v0_135b4, %bb91 ], [ %v2_1357c, %dec_label_pc_1357c ]
  %v1_13588 = phi i32 [ %v1_13590.v6_13590.v6_13598.v6_135a0, %bb91 ], [ %v2_1356c, %dec_label_pc_1357c ]
  %v3_135a810 = phi i32 [ %v3_135a8, %bb91 ], [ %v1_13570, %dec_label_pc_1357c ]
  %v3_13584 = icmp ult i32 %v1_13588, %v3_135a810
  %v3_13588 = select i1 %v3_13584, i32 0, i32 %v3_135a810
  %v1_13590 = sub i32 %v1_13588, %v3_13588
  %v4_1358c = udiv i32 %v3_135a810, 2
  %v6_1358c = icmp ult i32 %v1_13590, %v4_1358c
  %v6_13590 = select i1 %v6_1358c, i32 0, i32 %v4_1358c
  %v1_13590.v6_13590 = sub i32 %v1_13590, %v6_13590
  %.demorgan = and i1 %v3_13584, %v6_1358c
  %v4_13594 = udiv i32 %v3_135a810, 4
  %v6_13594 = icmp ult i32 %v1_13590.v6_13590, %v4_13594
  %v6_13598 = select i1 %v6_13594, i32 0, i32 %v4_13594
  %v1_13590.v6_13590.v6_13598 = sub i32 %v1_13590.v6_13590, %v6_13598
  %.demorgan76 = and i1 %.demorgan, %v6_13594
  %v4_1359c = udiv i32 %v3_135a810, 8
  %v6_1359c = icmp ult i32 %v1_13590.v6_13590.v6_13598, %v4_1359c
  %v6_135a0 = select i1 %v6_1359c, i32 0, i32 %v4_1359c
  %v1_13590.v6_13590.v6_13598.v6_135a0 = sub i32 %v1_13590.v6_13590.v6_13598, %v6_135a0
  %.demorgan77 = and i1 %.demorgan76, %v6_1359c
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_13584
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_13584, %bb88
  %v2_135a4 = add i32 %v1_13590.v6_13590.v6_13598.v6_135a0, -1
  %v4_135a4 = sub i32 0, %v1_13590.v6_13590.v6_13598.v6_135a0
  %v5_135a4 = and i32 %v1_13590.v6_13590.v6_13598.v6_135a0, %v4_135a4
  %v3_135a8 = udiv i32 %v3_135a810, 16
  %v5_135ac = icmp slt i32 %v1_13590.v6_13590.v6_13598.v6_135a0, 1
  br i1 %v5_135ac, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_135ac = add i32 %v6_135ac, -4
  %v9_135ac = sub i32 3, %v6_135ac
  %v10_135ac = and i32 %v9_135ac, %v6_135ac
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_135b4 = phi i32 [ %v6_135ac, %bb89 ], [ %v7_135ac, %bb90 ]
  %v0_135b013.in = phi i32 [ %v2_135a4, %bb89 ], [ %v7_135ac, %bb90 ]
  %v1_135b012.in = phi i32 [ %v5_135a4, %bb89 ], [ %v10_135ac, %bb90 ]
  %v1_135b012 = icmp slt i32 %v1_135b012.in, 0
  %v0_135b013 = icmp slt i32 %v0_135b013.in, 0
  %v2_135b0 = xor i1 %v0_135b013, %v1_135b012
  br i1 %v2_135b0, label %dec_label_pc_135b4, label %dec_label_pc_13584

dec_label_pc_135b4:                               ; preds = %bb91
  %v1_135b4 = urem i32 %v0_135b4, 4
  %v2_135b4 = icmp eq i32 %v1_135b4, 0
  br i1 %v2_135b4, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_135b4
  %v3_135b8 = icmp eq i32 %v1_13590.v6_13590.v6_13598.v6_135a0, 0
  br i1 %v3_135b8, label %.thread6, label %dec_label_pc_135c0

dec_label_pc_135c0:                               ; preds = %bb92, %dec_label_pc_1357c
  %v0_135d4 = phi i32 [ %v3_135a8, %bb92 ], [ %v1_13570, %dec_label_pc_1357c ]
  %v1_135d0 = phi i32 [ %v1_13590.v6_13590.v6_13598.v6_135a0, %bb92 ], [ %v2_1356c, %dec_label_pc_1357c ]
  %v0_135c0 = phi i32 [ %v0_135b4, %bb92 ], [ %v2_1357c, %dec_label_pc_1357c ]
  %v5_135c4 = icmp slt i32 %v0_135c0, -2
  br i1 %v5_135c4, label %dec_label_pc_135e4, label %dec_label_pc_135c8

dec_label_pc_135c8:                               ; preds = %dec_label_pc_135c0
  %v8_135c0 = icmp eq i32 %v0_135c0, -2
  br i1 %v8_135c0, label %dec_label_pc_135d8, label %dec_label_pc_135cc

dec_label_pc_135cc:                               ; preds = %dec_label_pc_135c8
  %v3_135cc = icmp ult i32 %v1_135d0, %v0_135d4
  br i1 %v3_135cc, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_135cc
  %v2_135cc = sub i32 %v1_135d0, %v0_135d4
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_135cc, %bb93
  %v0_135d854 = phi i32 [ %v1_135d0, %dec_label_pc_135cc ], [ %v2_135cc, %bb93 ]
  %v3_135d4 = udiv i32 %v0_135d4, 2
  br label %dec_label_pc_135d8

dec_label_pc_135d8:                               ; preds = %dec_label_pc_135c8, %bb94
  %v0_135e0 = phi i32 [ %v0_135d4, %dec_label_pc_135c8 ], [ %v3_135d4, %bb94 ]
  %v1_135dc = phi i32 [ %v1_135d0, %dec_label_pc_135c8 ], [ %v0_135d854, %bb94 ]
  %v3_135d8 = icmp ult i32 %v1_135dc, %v0_135e0
  br i1 %v3_135d8, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_135d8
  %v2_135d8 = sub i32 %v1_135dc, %v0_135e0
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_135d8, %bb95
  %v0_135e457 = phi i32 [ %v1_135dc, %dec_label_pc_135d8 ], [ %v2_135d8, %bb95 ]
  %v3_135e0 = udiv i32 %v0_135e0, 2
  br label %dec_label_pc_135e4

dec_label_pc_135e4:                               ; preds = %dec_label_pc_135c0, %bb96
  %v2_135e8 = phi i32 [ %v0_135d4, %dec_label_pc_135c0 ], [ %v3_135e0, %bb96 ]
  %v1_135e8 = phi i32 [ %v1_135d0, %dec_label_pc_135c0 ], [ %v0_135e457, %bb96 ]
  %v3_135e4 = icmp ult i32 %v1_135e8, %v2_135e8
  br i1 %v3_135e4, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_135e4
  %v2_135e4 = sub i32 %v1_135e8, %v2_135e8
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_135e4, %bb83, %.thread72, %dec_label_pc_135b4, %bb92, %bb97
  %v1_135f0 = phi i32 [ %v1_13590.v6_13590.v6_13598.v6_135a0, %dec_label_pc_135b4 ], [ 0, %bb92 ], [ %v1_135e8, %dec_label_pc_135e4 ], [ %v2_135e4, %bb97 ], [ %v3_13548, %.thread72 ], [ %v1_1353c, %bb83 ]
  br i1 %v1_13530, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_135f0 = sub i32 0, %v1_135f0
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_135f4 = phi i32 [ %v1_135f0, %.thread6 ], [ %v2_135f0, %bb98 ]
  ret i32 %v1_135f4

dec_label_pc_135f8:                               ; preds = %entry
  %v0_135f8 = load i32, i32* @lr, align 4
  %v0_135fc = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_135f8)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_135d4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_135b4, { 1, 0, 2 }
  uselistorder i32 %v7_135ac, { 1, 0 }
  uselistorder i32 %v3_135a8, { 1, 0 }
  uselistorder i32 %v1_13590.v6_13590.v6_13598.v6_135a0, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_1359c, { 1, 0 }
  uselistorder i32 %v4_13594, { 1, 0 }
  uselistorder i32 %v4_1358c, { 1, 0 }
  uselistorder i32 %v6_135ac, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1357c, { 1, 0 }
  uselistorder i32 %v1_13570, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_1356c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_1355c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_13568.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1353c, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_13544, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @__aeabi_ldiv0, { 2, 1, 0 }
  uselistorder i32* @lr, { 9, 10, 11, 5, 1, 2, 0, 6, 3, 4, 7, 8 }
  uselistorder i32 -2, { 0, 12, 1, 13, 2, 3, 10, 8, 9, 7, 6, 5, 4, 20, 21, 22, 19, 18, 17, 16, 15, 14, 11 }
  uselistorder i32 8, { 6, 7, 44, 17, 8, 9, 14, 10, 32, 52, 25, 11, 12, 13, 47, 33, 51, 24, 53, 54, 55, 56, 58, 34, 59, 35, 60, 61, 57, 36, 37, 38, 39, 62, 23, 46, 26, 63, 64, 65, 66, 67, 18, 68, 69, 70, 71, 3, 72, 73, 74, 4, 75, 76, 77, 78, 79, 80, 81, 5, 82, 83, 84, 85, 86, 87, 88, 89, 90, 15, 19, 20, 99, 16, 21, 22, 100, 40, 48, 49, 101, 102, 104, 103, 105, 106, 27, 107, 45, 50, 28, 108, 91, 29, 92, 30, 93, 31, 94, 41, 95, 43, 96, 97, 42, 98, 0, 1, 2 }
  uselistorder i32 3, { 54, 19, 55, 20, 143, 56, 32, 21, 22, 65, 35, 66, 2, 67, 68, 69, 70, 33, 18, 71, 72, 73, 1, 36, 74, 37, 75, 23, 76, 38, 77, 34, 78, 39, 40, 41, 0, 79, 80, 81, 82, 83, 84, 85, 86, 42, 87, 43, 88, 44, 24, 89, 90, 91, 92, 93, 5, 4, 45, 25, 94, 95, 96, 97, 98, 99, 100, 7, 6, 46, 101, 26, 102, 103, 104, 105, 106, 107, 108, 109, 9, 8, 47, 110, 27, 111, 112, 113, 114, 115, 11, 10, 48, 116, 28, 117, 118, 119, 120, 49, 121, 13, 12, 50, 122, 29, 123, 124, 125, 126, 127, 128, 15, 14, 51, 129, 30, 130, 131, 132, 133, 134, 135, 136, 17, 16, 52, 137, 31, 138, 141, 57, 61, 58, 62, 59, 63, 60, 64, 53, 142, 139, 3, 140 }
  uselistorder i32 2, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 123, 12, 13, 14, 15, 16, 74, 75, 44, 45, 76, 139, 77, 79, 126, 80, 127, 133, 57, 125, 58, 128, 59, 129, 60, 130, 61, 131, 62, 132, 63, 138, 134, 135, 136, 137, 53, 81, 140, 17, 18, 141, 143, 82, 144, 48, 124, 43, 145, 78, 146, 19, 83, 142, 87, 147, 85, 148, 86, 149, 84, 88, 150, 20, 21, 22, 89, 151, 54, 90, 91, 92, 93, 55, 95, 96, 94, 64, 97, 98, 99, 152, 46, 51, 153, 154, 155, 211, 212, 156, 157, 158, 159, 160, 161, 162, 100, 163, 65, 164, 165, 166, 167, 168, 101, 66, 169, 170, 171, 172, 173, 174, 175, 102, 176, 67, 177, 178, 103, 104, 179, 180, 181, 182, 183, 184, 185, 186, 0, 23, 24, 25, 26, 27, 28, 105, 187, 68, 188, 189, 190, 191, 192, 1, 29, 30, 31, 32, 33, 34, 106, 69, 193, 194, 195, 196, 107, 197, 49, 198, 71, 199, 2, 35, 36, 37, 38, 39, 40, 108, 200, 70, 201, 202, 203, 204, 205, 206, 207, 208, 109, 209, 72, 210, 213, 214, 215, 110, 216, 111, 217, 218, 219, 220, 112, 221, 73, 222, 47, 113, 225, 226, 120, 227, 121, 228, 114, 229, 115, 116, 230, 117, 231, 118, 232, 119, 233, 50, 234, 41, 42, 235, 122, 236, 223, 52, 56, 224 }
  uselistorder i32 4, { 5, 6, 55, 7, 8, 56, 341, 342, 148, 9, 10, 79, 63, 313, 314, 47, 151, 80, 152, 177, 178, 82, 153, 83, 154, 84, 155, 171, 172, 179, 180, 156, 157, 149, 150, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 81, 174, 175, 176, 173, 57, 181, 182, 64, 85, 11, 183, 12, 184, 185, 13, 14, 186, 187, 41, 188, 42, 193, 86, 194, 87, 196, 88, 197, 198, 195, 189, 89, 190, 191, 192, 199, 53, 52, 51, 200, 90, 15, 16, 17, 18, 19, 20, 201, 43, 202, 44, 203, 204, 205, 0, 91, 206, 111, 207, 208, 209, 210, 112, 113, 93, 211, 54, 21, 92, 212, 65, 213, 214, 114, 215, 216, 115, 116, 217, 94, 218, 66, 219, 220, 117, 118, 221, 119, 222, 223, 120, 121, 58, 224, 95, 225, 67, 226, 227, 228, 229, 230, 231, 96, 68, 232, 233, 122, 234, 235, 236, 237, 123, 124, 2, 238, 97, 239, 69, 240, 241, 242, 125, 243, 244, 126, 127, 3, 59, 245, 98, 246, 70, 247, 248, 249, 250, 128, 129, 251, 252, 253, 130, 254, 255, 99, 256, 4, 257, 71, 258, 100, 259, 260, 261, 131, 262, 263, 264, 265, 266, 132, 133, 101, 267, 60, 72, 268, 73, 269, 270, 271, 134, 272, 273, 274, 102, 275, 103, 276, 277, 278, 279, 135, 136, 104, 280, 61, 281, 74, 282, 75, 283, 336, 110, 315, 78, 316, 317, 62, 318, 105, 319, 320, 321, 322, 76, 323, 106, 324, 325, 326, 77, 327, 107, 328, 22, 23, 24, 329, 330, 50, 49, 48, 331, 25, 26, 27, 108, 332, 109, 333, 28, 29, 334, 45, 335, 46, 337, 137, 284, 285, 30, 138, 286, 287, 31, 139, 288, 289, 32, 140, 290, 291, 33, 141, 292, 293, 34, 294, 142, 295, 296, 35, 143, 297, 298, 36, 144, 299, 300, 37, 145, 301, 302, 38, 146, 303, 304, 39, 305, 147, 306, 307, 308, 309, 40, 310, 311, 1, 338, 312, 339, 340 }
  uselistorder i32 16, { 4, 5, 6, 7, 8, 22, 9, 10, 0, 11, 12, 39, 66, 40, 31, 41, 32, 42, 33, 43, 64, 65, 67, 68, 69, 23, 63, 70, 44, 71, 45, 72, 13, 14, 21, 61, 15, 73, 16, 46, 28, 74, 34, 75, 35, 47, 48, 49, 50, 51, 24, 76, 77, 78, 79, 25, 80, 81, 82, 83, 84, 85, 86, 29, 87, 88, 89, 53, 90, 36, 52, 91, 92, 54, 93, 94, 95, 17, 96, 97, 1, 55, 98, 99, 100, 56, 101, 102, 103, 104, 2, 57, 105, 106, 18, 107, 62, 19, 108, 58, 109, 110, 111, 20, 30, 112, 59, 113, 114, 3, 37, 115, 116, 117, 118, 119, 120, 26, 121, 122, 123, 124, 126, 125, 127, 128, 129, 130, 131, 132, 133, 27, 134, 135, 136, 137, 138, 140, 139, 141, 142, 60, 144, 38, 145, 146, 147, 148, 149, 143 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_135e4, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_135d8, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_13584, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @__aeabi_ldiv0() local_unnamed_addr {
entry:
  %v1_13608 = load i32, i32* @r0, align 4
  ret i32 %v1_13608
}

define i32 @function_1360c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1360c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13610 = load i32, i32* @global_var_1c000.619, align 4
  %v7_13614 = icmp eq i32 %v3_13610, -1
  %v3_13618 = load i32, i32* @r4, align 4
  store i32 %v3_13618, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1c000.619 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_13614, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_1360c
  store i32 %v3_13618, i32* %r4.global-to-local, align 4
  %v9_13620 = load i32, i32* @r0, align 4
  ret i32 %v9_13620

.preheader:                                       ; preds = %dec_label_pc_1360c, %.preheader
  %v0_13628 = phi i32 [ %v3_1362c, %.preheader ], [ %v3_13610, %dec_label_pc_1360c ]
  call void @__pseudo_branch(i32 %v0_13628)
  %v0_1362c = load i32, i32* %r4.global-to-local, align 4
  %v1_1362c = add i32 %v0_1362c, -4
  %v2_1362c = inttoptr i32 %v1_1362c to i32*
  %v3_1362c = load i32, i32* %v2_1362c, align 4
  store i32 %v1_1362c, i32* %r4.global-to-local, align 4
  %v3_13630 = icmp eq i32 %v3_1362c, -1
  br i1 %v3_13630, label %dec_label_pc_13638, label %.preheader

dec_label_pc_13638:                               ; preds = %.preheader
  %v2_13638 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13638, i32* %r4.global-to-local, align 4
  %v8_13638 = load i32, i32* @r0, align 4
  ret i32 %v8_13638

; uselistorder directives
  uselistorder i32 %v3_1362c, { 1, 0 }
  uselistorder i32 %v3_13610, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 12, 0, 1, 6, 7, 8, 2, 3, 9, 4, 5, 10, 11 }
  uselistorder i32 -1, { 96, 0, 97, 98, 99, 100, 101, 102, 103, 104, 1, 2, 3, 4, 5, 74, 75, 6, 105, 201, 12, 106, 13, 107, 8, 108, 109, 202, 7, 110, 69, 14, 111, 112, 11, 113, 114, 115, 198, 199, 116, 117, 118, 196, 76, 197, 15, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 200, 9, 139, 10, 140, 141, 142, 16, 143, 144, 77, 203, 145, 17, 146, 204, 70, 67, 68, 18, 19, 22, 80, 205, 21, 82, 206, 20, 81, 207, 23, 24, 83, 208, 25, 26, 27, 28, 29, 147, 30, 71, 31, 32, 34, 148, 79, 33, 72, 35, 36, 37, 38, 39, 40, 41, 149, 42, 78, 43, 44, 46, 150, 45, 47, 48, 49, 50, 151, 51, 52, 53, 152, 54, 55, 56, 153, 57, 58, 59, 60, 61, 154, 62, 63, 64, 155, 65, 66, 209, 210, 89, 211, 87, 212, 88, 213, 85, 214, 156, 157, 158, 159, 160, 90, 215, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 84, 216, 91, 217, 187, 188, 189, 190, 191, 86, 218, 92, 219, 73, 192, 193, 194, 195, 93, 94, 95 }
  uselistorder i32 1, { 413, 192, 283, 776, 777, 284, 778, 779, 234, 780, 677, 678, 679, 239, 680, 416, 415, 414, 24, 26, 29, 30, 25, 31, 28, 27, 32, 0, 681, 682, 683, 684, 34, 33, 1, 685, 686, 687, 688, 247, 689, 690, 248, 691, 418, 417, 225, 226, 563, 564, 565, 316, 419, 23, 22, 21, 19, 20, 692, 256, 257, 2, 3, 693, 694, 696, 695, 317, 697, 179, 178, 664, 156, 698, 699, 700, 123, 122, 124, 701, 527, 420, 217, 219, 220, 224, 221, 223, 222, 218, 702, 703, 421, 128, 127, 126, 125, 129, 130, 704, 705, 422, 70, 69, 68, 67, 71, 72, 318, 504, 319, 505, 285, 506, 507, 328, 508, 528, 329, 330, 518, 519, 524, 327, 502, 503, 509, 325, 510, 511, 326, 512, 513, 324, 514, 515, 323, 516, 517, 322, 520, 521, 321, 522, 523, 320, 525, 526, 529, 331, 244, 530, 332, 531, 533, 534, 532, 535, 333, 536, 501, 258, 539, 537, 334, 538, 541, 335, 542, 543, 276, 544, 545, 243, 259, 551, 552, 240, 336, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 407, 425, 424, 423, 142, 146, 147, 148, 151, 145, 152, 153, 144, 143, 149, 150, 546, 547, 337, 548, 549, 338, 550, 436, 141, 139, 140, 133, 132, 136, 138, 137, 135, 131, 134, 540, 339, 438, 437, 228, 230, 227, 229, 650, 440, 439, 97, 98, 96, 95, 94, 99, 441, 342, 286, 553, 554, 287, 555, 340, 341, 343, 556, 557, 344, 345, 346, 348, 347, 349, 350, 351, 453, 452, 451, 450, 449, 448, 447, 446, 445, 411, 444, 443, 442, 13, 15, 16, 14, 18, 17, 241, 352, 355, 354, 353, 558, 455, 454, 66, 559, 456, 356, 357, 358, 560, 561, 359, 260, 562, 242, 360, 460, 459, 458, 457, 49, 48, 571, 5, 566, 361, 567, 4, 568, 277, 569, 245, 246, 570, 572, 278, 573, 465, 464, 463, 408, 462, 409, 461, 154, 155, 651, 288, 652, 289, 653, 6, 654, 7, 8, 574, 575, 576, 577, 578, 579, 580, 581, 279, 582, 583, 584, 585, 362, 586, 363, 587, 364, 588, 589, 590, 591, 592, 468, 467, 466, 105, 104, 103, 100, 102, 108, 109, 112, 110, 101, 107, 111, 106, 593, 594, 595, 596, 597, 365, 366, 470, 469, 172, 169, 166, 167, 168, 170, 176, 177, 171, 174, 175, 173, 598, 599, 600, 367, 601, 602, 603, 604, 605, 606, 368, 607, 369, 291, 290, 370, 608, 471, 181, 182, 180, 183, 184, 185, 190, 186, 189, 191, 188, 187, 609, 610, 371, 611, 372, 373, 293, 292, 410, 472, 10, 11, 9, 12, 612, 613, 249, 614, 615, 616, 617, 374, 618, 250, 375, 376, 619, 294, 620, 473, 77, 80, 73, 74, 76, 75, 81, 82, 85, 83, 79, 84, 78, 621, 622, 623, 624, 625, 377, 626, 378, 296, 295, 379, 627, 380, 628, 474, 161, 163, 164, 165, 162, 160, 159, 629, 630, 631, 632, 633, 634, 635, 381, 636, 382, 637, 383, 301, 300, 384, 638, 297, 639, 298, 640, 299, 641, 479, 478, 477, 476, 475, 195, 193, 197, 198, 200, 199, 194, 196, 201, 642, 643, 644, 645, 646, 647, 385, 304, 303, 386, 648, 302, 649, 480, 41, 39, 40, 37, 36, 35, 43, 44, 47, 45, 38, 46, 42, 655, 656, 657, 658, 659, 660, 387, 307, 306, 388, 661, 305, 662, 485, 484, 483, 482, 481, 208, 206, 207, 204, 203, 202, 211, 212, 215, 213, 205, 210, 214, 209, 706, 235, 392, 268, 269, 707, 236, 390, 270, 271, 391, 708, 261, 709, 267, 710, 237, 272, 395, 273, 281, 238, 393, 274, 275, 394, 711, 262, 712, 713, 314, 714, 715, 716, 309, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 310, 729, 730, 731, 732, 733, 252, 734, 396, 735, 397, 398, 736, 737, 738, 739, 740, 311, 741, 742, 743, 263, 744, 312, 745, 746, 747, 264, 748, 313, 749, 750, 751, 265, 752, 753, 754, 755, 253, 756, 757, 758, 251, 389, 308, 759, 761, 763, 762, 760, 399, 764, 765, 766, 400, 767, 768, 769, 770, 282, 771, 772, 280, 401, 774, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 58, 56, 50, 51, 52, 60, 63, 65, 64, 62, 61, 59, 53, 55, 54, 57, 663, 315, 402, 498, 114, 113, 115, 117, 116, 120, 121, 118, 119, 665, 666, 403, 266, 404, 669, 405, 406, 670, 667, 668, 671, 672, 673, 674, 254, 675, 255, 89, 91, 90, 88, 93, 86, 87, 92, 773, 216, 676, 157, 775, 158, 499, 500, 233, 232, 231, 412 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_13640() local_unnamed_addr {
dec_label_pc_13640:
  %v5_13644 = load i32, i32* @r0, align 4
  ret i32 %v5_13644

; uselistorder directives
  uselistorder i32* @r0, { 2, 3, 4, 8, 97, 9, 98, 10, 99, 12, 11, 56, 57, 0, 17, 18, 19, 21, 22, 23, 24, 25, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 51, 52, 1, 7, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 58, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 6, 5, 13, 14, 15, 16 }
}

define i32 @function_13648() local_unnamed_addr {
entry:
  %v3_1364c = load i32, i32* @r4, align 4
  %v0_13654 = call i32 @function_8d80()
  call void @__pseudo_branch(i32 %v3_1364c)
  ret i32 %v0_13654

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 5, 7, 8, 9, 1, 2, 3, 4, 6 }
  uselistorder i32 0, { 0, 1052, 88, 1053, 1054, 190, 189, 490, 72, 73, 74, 75, 492, 491, 57, 56, 89, 1055, 1056, 1057, 1058, 1060, 1059, 1, 1061, 1062, 192, 191, 493, 76, 77, 78, 79, 495, 494, 59, 58, 55, 63, 1063, 496, 2, 1064, 1065, 80, 1066, 1067, 1068, 1069, 1070, 100, 497, 500, 498, 499, 1071, 501, 97, 101, 744, 745, 81, 746, 747, 748, 3, 520, 195, 5, 4, 102, 749, 103, 521, 6, 196, 104, 105, 217, 60, 106, 7, 9, 8, 222, 71, 636, 637, 751, 750, 752, 753, 29, 107, 754, 110, 109, 108, 218, 219, 220, 112, 111, 113, 223, 755, 756, 114, 727, 728, 98, 115, 757, 116, 566, 117, 758, 759, 118, 760, 761, 567, 541, 119, 120, 571, 568, 542, 543, 544, 545, 556, 539, 522, 230, 540, 562, 563, 546, 547, 548, 523, 228, 549, 550, 524, 229, 551, 552, 525, 227, 553, 554, 526, 226, 555, 557, 527, 225, 558, 565, 528, 224, 559, 564, 560, 70, 61, 193, 194, 561, 502, 569, 231, 570, 198, 572, 90, 573, 232, 574, 577, 578, 122, 197, 575, 576, 233, 234, 579, 580, 581, 582, 583, 584, 585, 586, 529, 587, 588, 67, 235, 590, 591, 592, 593, 594, 595, 596, 597, 236, 598, 82, 599, 99, 600, 519, 601, 602, 603, 518, 604, 605, 606, 121, 237, 238, 607, 610, 611, 612, 613, 614, 123, 608, 124, 609, 10, 125, 589, 715, 716, 615, 616, 239, 617, 618, 619, 126, 620, 621, 622, 623, 624, 625, 626, 240, 68, 241, 627, 11, 628, 202, 629, 630, 631, 632, 242, 530, 221, 128, 127, 199, 243, 633, 12, 13, 634, 635, 129, 130, 244, 638, 639, 640, 641, 642, 93, 643, 645, 644, 91, 92, 131, 200, 245, 646, 211, 212, 213, 94, 132, 64, 133, 647, 648, 84, 85, 65, 134, 135, 136, 203, 649, 95, 650, 651, 652, 201, 653, 137, 654, 655, 246, 656, 657, 658, 138, 139, 659, 140, 660, 86, 87, 66, 141, 142, 204, 661, 662, 663, 664, 143, 665, 666, 667, 144, 146, 145, 205, 669, 668, 147, 670, 671, 148, 672, 153, 248, 249, 673, 151, 152, 149, 150, 674, 154, 675, 250, 251, 247, 676, 155, 157, 156, 158, 678, 679, 677, 680, 14, 15, 16, 17, 18, 681, 159, 682, 160, 161, 206, 684, 683, 685, 687, 688, 686, 19, 20, 21, 22, 23, 689, 162, 690, 691, 692, 693, 694, 62, 163, 165, 164, 207, 696, 695, 252, 697, 699, 700, 701, 702, 703, 253, 704, 24, 25, 26, 698, 27, 28, 705, 166, 706, 707, 167, 169, 168, 208, 710, 708, 709, 254, 712, 711, 713, 170, 714, 717, 171, 173, 172, 209, 720, 719, 718, 255, 722, 721, 723, 174, 724, 762, 763, 725, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 256, 777, 503, 504, 505, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 30, 819, 820, 821, 175, 176, 822, 257, 823, 824, 825, 826, 506, 531, 827, 828, 829, 31, 830, 831, 832, 833, 32, 834, 835, 836, 837, 838, 839, 840, 33, 841, 842, 181, 843, 844, 845, 846, 847, 848, 34, 849, 850, 851, 35, 852, 853, 854, 36, 855, 856, 857, 858, 260, 872, 873, 859, 860, 861, 862, 863, 864, 865, 866, 867, 507, 532, 868, 869, 870, 871, 508, 533, 874, 875, 876, 37, 877, 878, 261, 879, 880, 881, 882, 883, 884, 885, 886, 509, 534, 887, 888, 889, 38, 890, 891, 892, 893, 39, 894, 510, 895, 896, 899, 900, 511, 177, 897, 898, 178, 179, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 512, 535, 912, 913, 914, 40, 915, 916, 917, 918, 919, 920, 41, 921, 96, 922, 923, 924, 925, 513, 536, 926, 927, 928, 42, 929, 180, 930, 931, 932, 43, 933, 934, 935, 936, 937, 514, 537, 938, 939, 940, 44, 941, 942, 943, 45, 258, 259, 944, 945, 946, 947, 948, 515, 538, 949, 950, 951, 46, 952, 953, 954, 47, 955, 956, 957, 48, 958, 959, 960, 49, 961, 962, 963, 964, 50, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 516, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 210, 990, 993, 994, 997, 998, 999, 51, 995, 996, 991, 992, 1000, 1001, 182, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 52, 183, 1012, 1013, 1014, 53, 1015, 1016, 1017, 1018, 1020, 69, 262, 1021, 1019, 975, 976, 83, 1022, 517, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 214, 1043, 215, 1046, 216, 1048, 726, 263, 729, 730, 184, 731, 732, 733, 185, 734, 264, 735, 736, 54, 737, 738, 739, 740, 741, 1044, 186, 1045, 742, 187, 743, 188, 1047, 1051, 1049, 1050, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085 }
  uselistorder i32* @r4, { 27, 414, 319, 320, 113, 114, 55, 56, 321, 322, 323, 324, 325, 326, 28, 29, 30, 31, 32, 33, 34, 35, 57, 58, 36, 37, 38, 39, 59, 60, 40, 43, 44, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 61, 62, 53, 54, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 0, 76, 67, 68, 293, 294, 295, 296, 297, 77, 78, 79, 80, 81, 82, 83, 3, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 20, 105, 106, 107, 108, 109, 110, 111, 1, 112, 115, 116, 117, 2, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 142, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 4, 172, 5, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 6, 196, 7, 197, 8, 198, 9, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 10, 221, 11, 222, 12, 223, 13, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 259, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 14, 278, 15, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 299, 300, 16, 301, 17, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 21, 354, 355, 26, 356, 19, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 25, 18, 368, 369, 370, 371, 372, 373, 374, 24, 375, 376, 377, 23, 378, 379, 380, 22, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 409, 410, 411, 412, 316, 317, 318, 404, 405, 406, 413, 415 }
}

declare i8* @strcpy(i8*, i8*) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @sigemptyset(%_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32* @memmove(i32*, i32*, i32) local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32* @memcpy(i32*, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32* @malloc(i32) local_unnamed_addr

declare i32 @sleep(i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @select(i32, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %timeval*) local_unnamed_addr

declare %dirent* @readdir(%__dirstream*) local_unnamed_addr

declare i32 @sigaddset(%_TYPEDEF_sigset_t*, i32) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare void @abort() local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32* @calloc(i32, i32) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @inet_addr(i8*) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare void (i32)* @signal(i32, void (i32)*) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32* @realloc(i32*, i32) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @__uClibc_main() local_unnamed_addr

declare i32* @memset(i32*, i32, i32) local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare %__dirstream* @opendir(i8*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32* @__errno_location() local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @clock() local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @closedir(%__dirstream*) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare void @free(i32*) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

define i32 @__data_start(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_1c184 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1c184, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder i1 false, { 1, 3, 2, 11, 4, 40, 13, 10, 14, 5, 6, 7, 39, 0, 15, 8, 36, 66, 70, 44, 71, 72, 45, 73, 20, 21, 22, 23, 46, 74, 75, 62, 76, 77, 78, 51, 79, 25, 26, 52, 80, 53, 81, 47, 48, 49, 24, 82, 50, 83, 84, 61, 85, 86, 87, 88, 89, 90, 54, 55, 91, 92, 56, 93, 57, 58, 94, 59, 95, 60, 96, 42, 43, 97, 98, 99, 100, 101, 102, 27, 28, 63, 103, 104, 64, 34, 105, 65, 17, 18, 29, 19, 30, 31, 32, 12, 33, 106, 35, 37, 67, 68, 107, 16, 69, 108, 38, 9, 41, 109 }
  uselistorder i1* @cpsr_z, { 9, 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder label %bb1, { 1, 0 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare %timeval* @__decompiler_undefined_function_3() local_unnamed_addr

declare %sockaddr* @__decompiler_undefined_function_4() local_unnamed_addr

declare %_TYPEDEF_fd_set* @__decompiler_undefined_function_5() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
